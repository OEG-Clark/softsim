{"home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.None.vis_utils.plot_results": [[17, 66], ["numpy.argmax", "matplotlib.figure", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.title", "pylab.gca", "pylab.gca.axes.get_xaxis().set_ticks", "pylab.gca.axes.get_yaxis().set_ticks", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.title", "pylab.gca", "pylab.gca.axes.get_xaxis().set_ticks", "pylab.gca.axes.get_yaxis().set_ticks", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.colorbar", "matplotlib.title", "pylab.gca", "pylab.gca.axes.get_xaxis().set_ticks", "pylab.gca.axes.get_yaxis().set_ticks", "matplotlib.subplot", "matplotlib.title", "get_overlayed_image", "matplotlib.imshow", "pylab.gca", "pylab.gca.axes.get_xaxis().set_ticks", "pylab.gca.axes.get_yaxis().set_ticks", "matplotlib.gcf", "plt.gcf.set_size_inches", "matplotlib.tight_layout", "matplotlib.tight_layout", "matplotlib.tight_layout", "matplotlib.savefig", "matplotlib.close", "predDiff.reshape", "numpy.array", "tarFunc", "pylab.gca.axes.get_xaxis", "pylab.gca.axes.get_yaxis", "pylab.gca.axes.get_xaxis", "pylab.gca.axes.get_yaxis", "numpy.max", "pylab.gca.axes.get_xaxis", "pylab.gca.axes.get_yaxis", "numpy.max", "pylab.gca.axes.get_xaxis", "pylab.gca.axes.get_yaxis", "numpy.max", "numpy.abs", "numpy.max", "numpy.abs", "numpy.abs", "numpy.abs"], "function", ["None"], ["def", "plot_results", "(", "x_test", ",", "x_test_im", ",", "sensMap", ",", "predDiff", ",", "tarFunc", ",", "classnames", ",", "testIdx", ",", "save_path", ")", ":", "\n", "    ", "'''\n    Plot the results of the relevance estimation\n    '''", "\n", "imsize", "=", "x_test", ".", "shape", "\n", "\n", "tarIdx", "=", "np", ".", "argmax", "(", "tarFunc", "(", "x_test", ")", "[", "-", "1", "]", ")", "\n", "tarClass", "=", "classnames", "[", "tarIdx", "]", "\n", "# tarIdx = 287", "\n", "\n", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "subplot", "(", "2", ",", "2", ",", "1", ")", "\n", "plt", ".", "imshow", "(", "x_test_im", ",", "interpolation", "=", "'nearest'", ")", "\n", "plt", ".", "title", "(", "'original'", ")", "\n", "frame", "=", "pylab", ".", "gca", "(", ")", "\n", "frame", ".", "axes", ".", "get_xaxis", "(", ")", ".", "set_ticks", "(", "[", "]", ")", "\n", "frame", ".", "axes", ".", "get_yaxis", "(", ")", ".", "set_ticks", "(", "[", "]", ")", "\n", "plt", ".", "subplot", "(", "2", ",", "2", ",", "2", ")", "\n", "plt", ".", "imshow", "(", "sensMap", ",", "cmap", "=", "cm", ".", "Greys_r", ",", "interpolation", "=", "'nearest'", ")", "\n", "plt", ".", "title", "(", "'sensitivity map'", ")", "\n", "frame", "=", "pylab", ".", "gca", "(", ")", "\n", "frame", ".", "axes", ".", "get_xaxis", "(", ")", ".", "set_ticks", "(", "[", "]", ")", "\n", "frame", ".", "axes", ".", "get_yaxis", "(", ")", ".", "set_ticks", "(", "[", "]", ")", "\n", "plt", ".", "subplot", "(", "2", ",", "2", ",", "3", ")", "\n", "p", "=", "predDiff", ".", "reshape", "(", "(", "imsize", "[", "1", "]", ",", "imsize", "[", "2", "]", ",", "-", "1", ")", ")", "[", ":", ",", ":", ",", "tarIdx", "]", "\n", "plt", ".", "imshow", "(", "p", ",", "cmap", "=", "cm", ".", "seismic", ",", "vmin", "=", "-", "np", ".", "max", "(", "np", ".", "abs", "(", "p", ")", ")", ",", "vmax", "=", "np", ".", "max", "(", "np", ".", "abs", "(", "p", ")", ")", ",", "interpolation", "=", "'nearest'", ")", "\n", "plt", ".", "colorbar", "(", ")", "\n", "# plt.imshow(np.abs(p), cmap=cm.Greys_r)", "\n", "plt", ".", "title", "(", "'weight of evidence'", ")", "\n", "frame", "=", "pylab", ".", "gca", "(", ")", "\n", "frame", ".", "axes", ".", "get_xaxis", "(", ")", ".", "set_ticks", "(", "[", "]", ")", "\n", "frame", ".", "axes", ".", "get_yaxis", "(", ")", ".", "set_ticks", "(", "[", "]", ")", "\n", "plt", ".", "subplot", "(", "2", ",", "2", ",", "4", ")", "\n", "plt", ".", "title", "(", "'class: {}'", ".", "format", "(", "tarClass", ")", ")", "\n", "p", "=", "get_overlayed_image", "(", "x_test_im", ",", "p", ")", "\n", "# p = predDiff[0,:,:,np.argmax(netPred(net, x_test)[0]),1].reshape((224,224))", "\n", "plt", ".", "imshow", "(", "p", ",", "cmap", "=", "cm", ".", "seismic", ",", "vmin", "=", "-", "np", ".", "max", "(", "np", ".", "abs", "(", "p", ")", ")", ",", "vmax", "=", "np", ".", "max", "(", "np", ".", "abs", "(", "p", ")", ")", ",", "interpolation", "=", "'nearest'", ")", "\n", "# plt.title('class entropy')", "\n", "frame", "=", "pylab", ".", "gca", "(", ")", "\n", "frame", ".", "axes", ".", "get_xaxis", "(", ")", ".", "set_ticks", "(", "[", "]", ")", "\n", "frame", ".", "axes", ".", "get_yaxis", "(", ")", ".", "set_ticks", "(", "[", "]", ")", "\n", "\n", "fig", "=", "plt", ".", "gcf", "(", ")", "\n", "fig", ".", "set_size_inches", "(", "np", ".", "array", "(", "[", "12", ",", "12", "]", ")", ",", "forward", "=", "True", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "savefig", "(", "save_path", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.None.vis_utils.pytorch_to_np": [[68, 75], ["pytorch_image.repeat.cpu().mul().clamp().byte().permute().numpy", "pytorch_image.repeat.repeat", "pytorch_image.repeat.repeat", "pytorch_image.repeat.cpu().mul().clamp().byte().permute", "pytorch_image.repeat.cpu().mul().clamp().byte", "pytorch_image.repeat.cpu().mul().clamp", "pytorch_image.repeat.cpu().mul", "pytorch_image.repeat.cpu"], "function", ["None"], ["", "def", "pytorch_to_np", "(", "pytorch_image", ")", ":", "\n", "    ", "if", "pytorch_image", ".", "ndim", "==", "4", "and", "pytorch_image", ".", "shape", "[", "1", "]", "==", "1", ":", "\n", "        ", "pytorch_image", "=", "pytorch_image", ".", "repeat", "(", "1", ",", "3", ",", "1", ",", "1", ")", "\n", "", "if", "pytorch_image", ".", "ndim", "==", "3", "and", "pytorch_image", ".", "shape", "[", "0", "]", "==", "1", ":", "\n", "        ", "pytorch_image", "=", "pytorch_image", ".", "repeat", "(", "3", ",", "1", ",", "1", ")", "\n", "\n", "", "return", "pytorch_image", ".", "cpu", "(", ")", ".", "mul", "(", "255", ")", ".", "clamp", "(", "0", ",", "255", ")", ".", "byte", "(", ")", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.None.vis_utils.plot_pytorch_img": [[77, 81], ["ax.imshow", "matplotlib.subplots", "vis_utils.pytorch_to_np"], "function", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.None.vis_utils.pytorch_to_np"], ["", "def", "plot_pytorch_img", "(", "pytorch_img", ",", "ax", "=", "None", ",", "cmap", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "ax", "is", "None", ":", "\n", "        ", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "\n", "", "return", "ax", ".", "imshow", "(", "pytorch_to_np", "(", "pytorch_img", ")", ",", "cmap", "=", "cmap", ",", "interpolation", "=", "'nearest'", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.None.vis_utils.plot_rectangle": [[83, 97], ["ax.add_patch", "isinstance", "x.item", "isinstance", "y.item", "isinstance", "w.item", "isinstance", "h.item", "matplotlib.Rectangle"], "function", ["None"], ["", "def", "plot_rectangle", "(", "x", ",", "y", ",", "w", ",", "h", ",", "ax", ",", "color", "=", "'red'", ")", ":", "\n", "    ", "from", "matplotlib", "import", "patches", "\n", "x", "=", "x", ".", "item", "(", ")", "if", "isinstance", "(", "x", ",", "torch", ".", "Tensor", ")", "else", "x", "\n", "y", "=", "y", ".", "item", "(", ")", "if", "isinstance", "(", "y", ",", "torch", ".", "Tensor", ")", "else", "y", "\n", "w", "=", "w", ".", "item", "(", ")", "if", "isinstance", "(", "w", ",", "torch", ".", "Tensor", ")", "else", "w", "\n", "h", "=", "h", ".", "item", "(", ")", "if", "isinstance", "(", "h", ",", "torch", ".", "Tensor", ")", "else", "h", "\n", "\n", "if", "x", "==", "-", "1", ":", "\n", "        ", "return", "\n", "\n", "", "ax", ".", "add_patch", "(", "\n", "patches", ".", "Rectangle", "(", "\n", "xy", "=", "(", "x", ",", "y", ")", ",", "width", "=", "w", ",", "height", "=", "h", ",", "\n", "color", "=", "color", ",", "fill", "=", "False", "# remove background", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.None.vis_utils._preprocess_img_to_pytorch": [[101, 109], ["type", "torch.FloatTensor", "img.expand.ndimension", "Exception", "img.expand.expand", "img.expand.ndimension"], "function", ["None"], ["", "def", "_preprocess_img_to_pytorch", "(", "img", ")", ":", "\n", "    ", "if", "type", "(", "img", ")", "==", "np", ".", "ndarray", ":", "\n", "        ", "img", "=", "torch", ".", "FloatTensor", "(", "img", ")", "\n", "", "if", "img", ".", "ndimension", "(", ")", "!=", "3", ":", "\n", "        ", "raise", "Exception", "(", "'The input dimension of image is not 3 but %d'", "%", "img", ".", "ndimension", "(", ")", ")", "\n", "", "if", "img", ".", "shape", "[", "0", "]", "==", "1", ":", "\n", "        ", "img", "=", "img", ".", "expand", "(", "3", ",", "img", ".", "shape", "[", "1", "]", ",", "img", ".", "shape", "[", "2", "]", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.None.vis_utils.plot_orig_and_overlay_img": [[111, 162], ["vis_utils._preprocess_img_to_pytorch", "vis_utils._preprocess_img_to_pytorch", "matplotlib.close", "matplotlib.figure", "plt.figure.add_subplot", "vis_utils.plot_pytorch_img", "plt.figure.colorbar", "fig.add_subplot.add_patch", "plt.figure.add_subplot", "matplotlib.title", "fig.add_subplot.axis", "fig.add_subplot.axis", "matplotlib.subplots_adjust", "matplotlib.close", "type", "torch.from_numpy", "matplotlib.Rectangle", "vis_utils.plot_pytorch_img", "plt.figure.colorbar", "vis_utils.plot_pytorch_img", "matplotlib.show", "matplotlib.savefig"], "function", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.None.vis_utils._preprocess_img_to_pytorch", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.None.vis_utils._preprocess_img_to_pytorch", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.None.vis_utils.plot_pytorch_img", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.None.vis_utils.plot_pytorch_img", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.None.vis_utils.plot_pytorch_img"], ["", "def", "plot_orig_and_overlay_img", "(", "orig_img", ",", "overlayed_img", ",", "file_name", "=", "None", ",", "bbox_coord", "=", "None", ",", "gt_class_name", "=", "''", ",", "\n", "pred_class_name", "=", "''", ",", "cmap", "=", "cm", ".", "seismic", ",", "clim", "=", "None", ",", "visualize", "=", "False", ")", ":", "\n", "    ", "'''\n    :param orig_img: PyTorch 3d array [channel, width, height]\n    :param overlayed_img: PyTorch 3d array [channel, width, height]\n    :param visualize: Default True.\n    :return:\n    '''", "\n", "orig_img", "=", "_preprocess_img_to_pytorch", "(", "orig_img", ")", "\n", "overlayed_img", "=", "_preprocess_img_to_pytorch", "(", "overlayed_img", ")", "\n", "\n", "if", "type", "(", "overlayed_img", ")", "==", "np", ".", "ndarray", ":", "\n", "        ", "overlayed_img", "=", "torch", ".", "from_numpy", "(", "overlayed_img", ")", "\n", "\n", "", "plt", ".", "close", "(", ")", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "\n", "# Plot original image", "\n", "ax1", "=", "fig", ".", "add_subplot", "(", "121", ")", "\n", "im1", "=", "plot_pytorch_img", "(", "orig_img", ",", "ax1", ",", "cmap", ")", "\n", "fig", ".", "colorbar", "(", "im1", ",", "ax", "=", "ax1", ")", "\n", "## Plot the bounding box", "\n", "ax1", ".", "add_patch", "(", "\n", "patches", ".", "Rectangle", "(", "\n", "bbox_coord", "[", "0", ",", ":", "]", ",", "bbox_coord", "[", "1", ",", "0", "]", "-", "bbox_coord", "[", "0", ",", "0", "]", ",", "bbox_coord", "[", "1", ",", "1", "]", "-", "bbox_coord", "[", "0", ",", "1", "]", ",", "\n", "color", "=", "'red'", ",", "fill", "=", "False", "# remove background", "\n", ")", "\n", ")", "\n", "\n", "# Plot the overlayed image", "\n", "ax2", "=", "fig", ".", "add_subplot", "(", "122", ")", "\n", "if", "clim", "is", "not", "None", ":", "\n", "        ", "im2", "=", "plot_pytorch_img", "(", "overlayed_img", ",", "ax2", ",", "cmap", "=", "cm", ".", "seismic", ",", "vmin", "=", "clim", "[", "0", "]", ",", "vmax", "=", "clim", "[", "1", "]", ")", "\n", "fig", ".", "colorbar", "(", "im2", ",", "ax", "=", "ax2", ",", "cmap", "=", "cm", ".", "seismic", ",", "fraction", "=", "0.046", ",", "pad", "=", "0.04", ")", "\n", "", "else", ":", "\n", "        ", "im2", "=", "plot_pytorch_img", "(", "overlayed_img", ",", "ax2", ",", "cmap", "=", "cm", ".", "seismic", ")", "\n", "\n", "", "title", "=", "gt_class_name", "\n", "if", "gt_class_name", "!=", "pred_class_name", ":", "\n", "        ", "title", "=", "'%s\\n%s'", "%", "(", "gt_class_name", ",", "pred_class_name", ")", "\n", "\n", "", "plt", ".", "title", "(", "title", ")", "\n", "ax1", ".", "axis", "(", "\"off\"", ")", "\n", "ax2", ".", "axis", "(", "\"off\"", ")", "\n", "plt", ".", "subplots_adjust", "(", "left", "=", "0.075", ",", "bottom", "=", "0.2", ",", "right", "=", "0.9", ")", "\n", "\n", "if", "visualize", ":", "\n", "        ", "plt", ".", "show", "(", ")", "\n", "", "else", ":", "\n", "        ", "plt", ".", "savefig", "(", "file_name", ",", "dpi", "=", "300", ")", "\n", "", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.None.vis_utils.get_overlayed_images": [[164, 180], ["zip", "torch.stack", "orig_img.cpu().detach().numpy.cpu().detach().numpy", "color_vec.cpu().detach().numpy.cpu().detach().numpy", "vis_utils.overlay", "torch.stack.append", "clims.append", "torch.from_numpy", "orig_img.cpu().detach().numpy.cpu().detach", "color_vec.cpu().detach().numpy.cpu().detach", "orig_img.cpu().detach().numpy.cpu", "color_vec.cpu().detach().numpy.cpu"], "function", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.None.vis_utils.overlay"], ["", "def", "get_overlayed_images", "(", "orig_imgs", ",", "color_vecs", ",", "cmap", "=", "cm", ".", "seismic", ")", ":", "\n", "    ", "'''\n    :return: color_overlay_img: the image overlayed with noise color\n    '''", "\n", "assert", "orig_imgs", ".", "ndim", "==", "4", "and", "color_vecs", ".", "ndim", "==", "4", "\n", "\n", "result", ",", "clims", "=", "[", "]", ",", "[", "]", "\n", "for", "orig_img", ",", "color_vec", "in", "zip", "(", "orig_imgs", ",", "color_vecs", ")", ":", "\n", "        ", "orig_img", "=", "orig_img", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "color_vec", "=", "color_vec", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "overlayed_img", ",", "clim", "=", "overlay", "(", "orig_img", ",", "color_vec", "[", "0", "]", ",", "cmap", "=", "cmap", ")", "\n", "result", ".", "append", "(", "torch", ".", "from_numpy", "(", "overlayed_img", ")", ")", "\n", "clims", ".", "append", "(", "clim", ")", "\n", "\n", "", "result", "=", "torch", ".", "stack", "(", "result", ")", "\n", "return", "result", ",", "clims", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.None.vis_utils.overlay": [[182, 224], ["matplotlib.imshow", "skimage.color.rgb2hsv", "skimage.color.rgb2hsv", "skimage.color.hsv2rgb", "numpy.transpose", "matplotlib.close", "numpy.ndim", "str", "numpy.ndim", "c.reshape.reshape", "numpy.ndim", "abs", "abs", "plt.imshow.to_rgba", "plt.imshow.properties", "numpy.ndim", "numpy.ndim", "numpy.transpose", "skimage.color.rgb2gray", "numpy.dstack", "abs", "abs", "c.reshape.min", "c.reshape.max", "numpy.dstack", "c.reshape.min", "c.reshape.max"], "function", ["None"], ["", "def", "overlay", "(", "x", ",", "c", ",", "gray_factor_bg", "=", "0.3", ",", "alpha", "=", "0.8", ",", "cmap", "=", "cm", ".", "seismic", ")", ":", "\n", "    ", "'''\n    For an image x and a relevance vector c, overlay the image with the\n    relevance vector to visualise the influence of the image pixels.\n    '''", "\n", "assert", "np", ".", "ndim", "(", "c", ")", "<=", "2", ",", "'dimension of c is:'", "+", "str", "(", "np", ".", "ndim", "(", "c", ")", ")", "\n", "imDim", "=", "x", ".", "shape", "[", "0", "]", "\n", "\n", "if", "np", ".", "ndim", "(", "c", ")", "==", "1", ":", "\n", "        ", "c", "=", "c", ".", "reshape", "(", "(", "imDim", ",", "imDim", ")", ")", "\n", "\n", "# this happens with the MNIST Data", "\n", "", "if", "np", ".", "ndim", "(", "x", ")", "==", "2", ":", "\n", "        ", "x", "=", "1", "-", "np", ".", "dstack", "(", "(", "x", ",", "x", ",", "x", ")", ")", "*", "gray_factor_bg", "# make it a bit grayish", "\n", "\n", "", "elif", "np", ".", "ndim", "(", "x", ")", "==", "3", ":", "# this is what happens with cifar data", "\n", "        ", "x", "=", "np", ".", "transpose", "(", "x", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "x", "=", "color", ".", "rgb2gray", "(", "x", ")", "\n", "x", "=", "1", "-", "(", "1", "-", "x", ")", "*", "0.3", "\n", "x", "=", "np", ".", "dstack", "(", "(", "x", ",", "x", ",", "x", ")", ")", "\n", "\n", "# Construct a colour image to superimpose", "\n", "", "vlimit", "=", "abs", "(", "c", ".", "min", "(", ")", ")", "if", "abs", "(", "c", ".", "min", "(", ")", ")", ">", "abs", "(", "c", ".", "max", "(", ")", ")", "else", "abs", "(", "c", ".", "max", "(", ")", ")", "\n", "\n", "im", "=", "plt", ".", "imshow", "(", "c", ",", "cmap", "=", "cmap", ",", "interpolation", "=", "'nearest'", ",", "vmin", "=", "-", "vlimit", ",", "vmax", "=", "vlimit", ")", "\n", "color_mask", "=", "im", ".", "to_rgba", "(", "c", ")", "[", ":", ",", ":", ",", "[", "0", ",", "1", ",", "2", "]", "]", "\n", "clim", "=", "im", ".", "properties", "(", ")", "[", "'clim'", "]", "\n", "\n", "# Convert the input image and color mask to Hue Saturation Value (HSV) colorspace", "\n", "img_hsv", "=", "color", ".", "rgb2hsv", "(", "x", ")", "\n", "color_mask_hsv", "=", "color", ".", "rgb2hsv", "(", "color_mask", ")", "\n", "\n", "# Replace the hue and saturation of the original image", "\n", "# with that of the color mask", "\n", "img_hsv", "[", "...", ",", "0", "]", "=", "color_mask_hsv", "[", "...", ",", "0", "]", "\n", "img_hsv", "[", "...", ",", "1", "]", "=", "color_mask_hsv", "[", "...", ",", "1", "]", "*", "alpha", "\n", "\n", "img_masked", "=", "color", ".", "hsv2rgb", "(", "img_hsv", ")", "\n", "img_masked", "=", "np", ".", "transpose", "(", "img_masked", ",", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "\n", "plt", ".", "close", "(", ")", "\n", "return", "img_masked", ",", "clim", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.None.vis_utils.plot_pytorch_imgs": [[227, 238], ["torchvision.utils.make_grid", "vis_utils.plot_pytorch_img", "matplotlib.subplots", "matplotlib.savefig"], "function", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.None.vis_utils.plot_pytorch_img"], ["", "def", "plot_pytorch_imgs", "(", "imgs_list", ",", "filename", "=", "''", ",", "ncols", "=", "4", ",", "dpi", "=", "300", ",", "ax", "=", "None", ",", "clim", "=", "None", ")", ":", "\n", "    ", "grid", "=", "make_grid", "(", "imgs_list", ",", "nrow", "=", "ncols", ")", "\n", "if", "ax", "is", "None", ":", "\n", "        ", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "\n", "\n", "", "im", "=", "plot_pytorch_img", "(", "grid", ",", "ax", ",", "clim", "=", "clim", ")", "\n", "\n", "if", "filename", "!=", "''", ":", "\n", "        ", "plt", ".", "savefig", "(", "filename", ",", "dpi", "=", "dpi", ")", "\n", "\n", "", "return", "ax", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.None.vis_utils.plot_imgs_with_bboxes2": [[240, 264], ["len", "int", "matplotlib.subplots", "vis_utils.plot_img_with_bbox", "math.ceil", "enumerate", "enumerate", "vis_utils.plot_pytorch_img", "zip", "vis_utils.plot_img_with_bbox"], "function", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.None.vis_utils.plot_img_with_bbox", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.None.vis_utils.plot_pytorch_img", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.None.vis_utils.plot_img_with_bbox"], ["", "def", "plot_imgs_with_bboxes2", "(", "samples", ",", "ncols", "=", "8", ")", ":", "\n", "    ", "imgs", "=", "samples", "[", "'imgs'", "]", "\n", "xs", "=", "samples", "[", "'xs'", "]", "\n", "ys", "=", "samples", "[", "'ys'", "]", "\n", "ws", "=", "samples", "[", "'ws'", "]", "\n", "hs", "=", "samples", "[", "'hs'", "]", "\n", "\n", "if", "imgs", ".", "ndim", "==", "3", ":", "# only 1 img", "\n", "        ", "return", "plot_img_with_bbox", "(", "\n", "imgs", ",", "xs", ",", "ys", ",", "ws", ",", "hs", ")", "\n", "\n", "", "num_imgs", "=", "len", "(", "imgs", ")", "\n", "nrows", "=", "int", "(", "math", ".", "ceil", "(", "num_imgs", "/", "ncols", ")", ")", "\n", "fig", ",", "axes", "=", "plt", ".", "subplots", "(", "nrows", ",", "ncols", ",", "figsize", "=", "(", "ncols", "*", "5", ",", "nrows", "*", "5", ")", ")", "\n", "\n", "if", "xs", "is", "None", ":", "\n", "        ", "for", "idx", ",", "img", "in", "enumerate", "(", "imgs", ")", ":", "\n", "            ", "plot_pytorch_img", "(", "img", ",", "axes", ".", "flat", "[", "idx", "]", ")", "\n", "", "", "else", ":", "\n", "        ", "for", "idx", ",", "(", "img", ",", "x", ",", "y", ",", "w", ",", "h", ")", "in", "enumerate", "(", "zip", "(", "imgs", ",", "xs", ",", "ys", ",", "ws", ",", "hs", ")", ")", ":", "\n", "            ", "plot_img_with_bbox", "(", "\n", "img", ",", "x", ",", "y", ",", "w", ",", "h", ",", "\n", "fig", "=", "fig", ",", "ax", "=", "axes", ".", "flat", "[", "idx", "]", ")", "\n", "", "", "return", "fig", ",", "axes", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.None.vis_utils.plot_imgs_with_bboxes": [[266, 282], ["len", "int", "matplotlib.subplots", "math.ceil", "enumerate", "enumerate", "vis_utils.plot_pytorch_img", "zip", "vis_utils.plot_img_with_bbox"], "function", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.None.vis_utils.plot_pytorch_img", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.None.vis_utils.plot_img_with_bbox"], ["", "def", "plot_imgs_with_bboxes", "(", "imgs", ",", "xs", "=", "None", ",", "ys", "=", "None", ",", "ws", "=", "None", ",", "hs", "=", "None", ",", "ncols", "=", "8", ")", ":", "\n", "    ", "num_imgs", "=", "len", "(", "imgs", ")", "\n", "nrows", "=", "int", "(", "math", ".", "ceil", "(", "num_imgs", "/", "ncols", ")", ")", "\n", "fig", ",", "axes", "=", "plt", ".", "subplots", "(", "nrows", ",", "ncols", ",", "figsize", "=", "(", "ncols", "*", "5", ",", "nrows", "*", "5", ")", ")", "\n", "\n", "if", "xs", "is", "None", ":", "\n", "        ", "for", "idx", ",", "img", "in", "enumerate", "(", "imgs", ")", ":", "\n", "            ", "plot_pytorch_img", "(", "img", ",", "axes", ".", "flat", "[", "idx", "]", ")", "\n", "", "", "else", ":", "\n", "        ", "for", "idx", ",", "(", "img", ",", "x", ",", "y", ",", "w", ",", "h", ")", "in", "enumerate", "(", "zip", "(", "imgs", ",", "xs", ",", "ys", ",", "ws", ",", "hs", ")", ")", ":", "\n", "            ", "plot_img_with_bbox", "(", "\n", "img", ",", "x", ",", "y", ",", "w", ",", "h", ",", "\n", "fig", "=", "fig", ",", "\n", "ax", "=", "axes", ".", "flat", "[", "idx", "]", ")", "\n", "\n", "", "", "return", "fig", ",", "axes", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.None.vis_utils.plot_img_with_bbox": [[284, 296], ["vis_utils.plot_pytorch_img", "matplotlib.subplots", "torch.is_tensor", "zip", "vis_utils.plot_rectangle", "vis_utils.plot_rectangle"], "function", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.None.vis_utils.plot_pytorch_img", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.None.vis_utils.plot_rectangle", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.None.vis_utils.plot_rectangle"], ["", "def", "plot_img_with_bbox", "(", "img", ",", "xs", ",", "ys", ",", "ws", ",", "hs", ",", "fig", "=", "None", ",", "ax", "=", "None", ")", ":", "\n", "    ", "if", "fig", "is", "None", ":", "\n", "        ", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "\n", "", "im", "=", "plot_pytorch_img", "(", "img", ",", "ax", ")", "\n", "\n", "if", "torch", ".", "is_tensor", "(", "xs", ")", "and", "xs", ".", "ndim", ">", "0", ":", "\n", "        ", "for", "x", ",", "y", ",", "w", ",", "h", "in", "zip", "(", "xs", ",", "ys", ",", "ws", ",", "hs", ")", ":", "\n", "            ", "plot_rectangle", "(", "x", ",", "y", ",", "w", ",", "h", ",", "ax", "=", "ax", ")", "\n", "", "", "else", ":", "\n", "        ", "plot_rectangle", "(", "xs", ",", "ys", ",", "ws", ",", "hs", ",", "ax", "=", "ax", ")", "\n", "\n", "", "return", "fig", ",", "ax", "\n", "", ""]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.None.train_pl.get_args": [[24, 155], ["argparse.ArgumentParser", "eval().add_model_specific_args.add_argument", "eval().add_model_specific_args.add_argument", "eval().add_model_specific_args.add_argument", "eval().add_model_specific_args.add_argument", "eval().add_model_specific_args.add_argument", "eval().add_model_specific_args.add_argument", "eval().add_model_specific_args.add_argument", "eval().add_model_specific_args.add_argument", "eval().add_model_specific_args.add_argument", "eval().add_model_specific_args.add_argument", "eval().add_model_specific_args.add_argument", "eval().add_model_specific_args.add_argument", "eval().add_model_specific_args.add_argument", "eval().add_model_specific_args.add_argument", "eval().add_model_specific_args.add_argument", "eval().add_model_specific_args.add_argument", "eval().add_model_specific_args.add_argument", "eval().add_model_specific_args.add_argument", "eval().add_model_specific_args.add_argument", "eval().add_model_specific_args.add_argument", "eval().add_model_specific_args.add_argument", "eval().add_model_specific_args.add_argument", "eval().add_model_specific_args.parse_known_args", "eval().add_model_specific_args", "os.path.join", "os.makedirs", "eval().add_model_specific_args.parse_args", "json.load", "eval().add_model_specific_args.parse_args", "print", "argparse.Namespace", "os.path.exists", "os.symlink", "print", "argparse.Namespace.dataset.startswith", "os.path.exists", "os.path.exists", "eval", "os.path.exists", "open", "len", "json.load.update", "json.dump", "os.path.exists", "os.path.join", "argparse.Namespace.dataset.startswith", "argparse.Namespace.dataset.startswith", "shutil.rmtree", "shutil.rmtree", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "str", "vars", "vars", "open", "os.path.join"], "function", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.lightning.cct.CCTLightningModel.add_model_specific_args", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.CAInpainter.CAInpainter.eval"], ["def", "get_args", "(", ")", ":", "\n", "# Big Transfer arg parser", "\n", "    ", "parser", "=", "ArgumentParser", "(", "description", "=", "\"Fine-tune BiT-M model.\"", ")", "\n", "parser", ".", "add_argument", "(", "'--distributed_backend'", ",", "type", "=", "str", ",", "default", "=", "'dp'", ",", "\n", "choices", "=", "(", "'dp'", ",", "'ddp'", ",", "'ddp2'", ")", ",", "\n", "help", "=", "'supports three options dp, ddp, ddp2'", ")", "\n", "parser", ".", "add_argument", "(", "'-e'", ",", "'--evaluate'", ",", "dest", "=", "'evaluate'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'evaluate model on validation set'", ")", "\n", "parser", ".", "add_argument", "(", "\"--name\"", ",", "\n", "default", "=", "'test'", ",", "\n", "# default='0930_in9_seg_random_s5',", "\n", "help", "=", "\"Name of this run. Used for monitoring and checkpointing.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--model\"", ",", "default", "=", "'BiT-S-R50x1'", ",", "\n", "help", "=", "\"Which variant to use; BiT-M gives best results.\"", ")", "\n", "# parser.add_argument(\"--logdir\", default='./models/',", "\n", "#                     help=\"Where to log training info (small).\")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "None", ",", "\n", "help", "=", "'seed for initializing training. '", ")", "\n", "parser", ".", "add_argument", "(", "\"--workers\"", ",", "type", "=", "int", ",", "default", "=", "4", ",", "\n", "help", "=", "\"Number of background threads used to load data.\"", ")", "\n", "# My own arguments", "\n", "parser", ".", "add_argument", "(", "\"--dataset\"", ",", "default", "=", "'wb'", ",", "\n", "help", "=", "\"Choose the dataset. It should be easy to add your own!\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--inpaint\"", ",", "type", "=", "str", ",", "default", "=", "'none'", ")", "# ['none', 'random', 'mean', 'shuffle', 'tile']", "\n", "parser", ".", "add_argument", "(", "\"--f_inpaint\"", ",", "type", "=", "str", ",", "default", "=", "'none'", ")", "# ['none', 'pgd', 'fgsm', 'mean', 'random']", "\n", "parser", ".", "add_argument", "(", "\"--alpha\"", ",", "type", "=", "float", ",", "default", "=", "-", "1", ")", "# For factual inpainting loss", "\n", "parser", ".", "add_argument", "(", "\"--eps\"", ",", "type", "=", "float", ",", "default", "=", "0.6", ")", "# For factual fgsm l_inf attack", "\n", "parser", ".", "add_argument", "(", "\"--reg\"", ",", "type", "=", "str", ",", "default", "=", "'none'", ")", "# ['none', 'gs', 'bbox_o']", "\n", "parser", ".", "add_argument", "(", "\"--reg_grad\"", ",", "type", "=", "str", ",", "default", "=", "'grad_y'", ",", "\n", "choices", "=", "[", "'grad_y'", ",", "'grad_sum'", ",", "'grad_logp_y'", ",", "\n", "'grad_logp_sum'", ",", "'deeplift'", ",", "'grad_cam'", "]", ")", "\n", "parser", ".", "add_argument", "(", "\"--reg_coeff\"", ",", "type", "=", "float", ",", "default", "=", "0.", ")", "\n", "parser", ".", "add_argument", "(", "\"--cf\"", ",", "type", "=", "str", ",", "default", "=", "'logp'", ")", "# ['logp', 'uni', 'uni_e', 'channels']", "\n", "parser", ".", "add_argument", "(", "\"--cf_coeff\"", ",", "type", "=", "float", ",", "default", "=", "1.", ")", "\n", "parser", ".", "add_argument", "(", "\"--test_run\"", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "\"--fp16\"", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "\"--finetune\"", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "\n", "## Additional regularization baselines", "\n", "parser", ".", "add_argument", "(", "\"--mixup\"", ",", "type", "=", "float", ",", "default", "=", "0.", ")", "\n", "parser", ".", "add_argument", "(", "\"--eps_label_smoothing\"", ",", "type", "=", "float", ",", "default", "=", "0.", ")", "\n", "parser", ".", "add_argument", "(", "\"--grid\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'If set to 1, use grid mask baseline'", ")", "\n", "\n", "temp_args", ",", "_", "=", "parser", ".", "parse_known_args", "(", ")", "\n", "\n", "# setup which lightning model to use", "\n", "pl_model_dict", "=", "{", "\n", "'cct'", ":", "CCTLightningModel", ".", "__name__", ",", "\n", "'in9'", ":", "IN9LightningModel", ".", "__name__", ",", "\n", "'in9l'", ":", "IN9LLightningModel", ".", "__name__", ",", "\n", "'wb'", ":", "WaterbirdLightningModel", ".", "__name__", ",", "\n", "}", "\n", "temp_args", ".", "pl_model", "=", "pl_model_dict", "[", "temp_args", ".", "dataset", "]", "\n", "parser", "=", "eval", "(", "temp_args", ".", "pl_model", ")", ".", "add_model_specific_args", "(", "parser", ")", "\n", "\n", "saved_hparams", "=", "pjoin", "(", "'models'", ",", "temp_args", ".", "name", ",", "'hparams.json'", ")", "\n", "if", "temp_args", ".", "test_run", "or", "not", "pexists", "(", "saved_hparams", ")", ":", "\n", "        ", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "", "else", ":", "\n", "        ", "hparams", "=", "json", ".", "load", "(", "open", "(", "saved_hparams", ")", ")", "\n", "\n", "# Remove default value. Only parse user inputs", "\n", "for", "action", "in", "parser", ".", "_actions", ":", "\n", "            ", "action", ".", "default", "=", "argparse", ".", "SUPPRESS", "\n", "", "input_args", "=", "parser", ".", "parse_args", "(", ")", "\n", "print", "(", "'Reload and update from inputs: '", "+", "str", "(", "input_args", ")", ")", "\n", "if", "len", "(", "vars", "(", "input_args", ")", ")", ">", "0", ":", "\n", "            ", "hparams", ".", "update", "(", "vars", "(", "input_args", ")", ")", "\n", "json", ".", "dump", "(", "hparams", ",", "open", "(", "saved_hparams", ",", "'w'", ")", ")", "\n", "", "args", "=", "Namespace", "(", "**", "hparams", ")", "\n", "\n", "", "args", ".", "logdir", "=", "'./models/'", "\n", "args", ".", "result_dir", "=", "'./results/'", "\n", "os", ".", "makedirs", "(", "args", ".", "result_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "# on v server", "\n", "if", "not", "pexists", "(", "pjoin", "(", "args", ".", "logdir", ",", "args", ".", "name", ")", ")", "and", "'SLURM_JOB_ID'", "in", "os", ".", "environ", "and", "pexists", "(", "'/checkpoint/kingsley/%s'", "%", "os", ".", "environ", "[", "'SLURM_JOB_ID'", "]", ")", ":", "\n", "        ", "os", ".", "symlink", "(", "'/checkpoint/kingsley/%s'", "%", "os", ".", "environ", "[", "'SLURM_JOB_ID'", "]", ",", "\n", "pjoin", "(", "args", ".", "logdir", ",", "args", ".", "name", ")", ")", "\n", "\n", "", "if", "args", ".", "test_run", ":", "\n", "        ", "print", "(", "\"WATCHOUT!!! YOU ARE RUNNING IN TEST RUN MODE!!!\"", ")", "\n", "\n", "args", ".", "batch", "=", "8", "\n", "args", ".", "val_batch", "=", "16", "\n", "args", ".", "batch_split", "=", "2", "\n", "args", ".", "workers", "=", "0", "\n", "# args.eval_every = 1000", "\n", "# args.inpaint = 'none'", "\n", "# args.inpaint = 'cagan'", "\n", "args", ".", "inpaint", "=", "'mean'", "\n", "# args.f_inpaint = 'none'", "\n", "args", ".", "f_inpaint", "=", "'mrand'", "\n", "args", ".", "reg", "=", "'none'", "\n", "# args.reg = 'bbox_f1'", "\n", "args", ".", "reg_coeff", "=", "1e-5", "\n", "# args.reg_grad = 'grad_cam'", "\n", "# args.reg_grad = 'deeplift'", "\n", "args", ".", "reg_anneal", "=", "0.", "\n", "args", ".", "fp16", "=", "0", "\n", "args", ".", "max_epochs", "=", "5", "\n", "# args.cf = 'channels'", "\n", "args", ".", "eval_every", "=", "100", "\n", "# args.mixup = 1", "\n", "# args.eps_label_smoothing = 0.1", "\n", "args", ".", "grid", "=", "1", "\n", "if", "args", ".", "dataset", ".", "startswith", "(", "'in9'", ")", ":", "\n", "            ", "args", ".", "mask", "=", "'seg'", "\n", "args", ".", "data_ratio", "=", "1.", "\n", "", "if", "args", ".", "dataset", ".", "startswith", "(", "'imageneta'", ")", "or", "args", ".", "dataset", ".", "startswith", "(", "'objectnet'", ")", ":", "\n", "            ", "args", ".", "nobbox_data", "=", "1.", "\n", "\n", "", "if", "pexists", "(", "'./models/test'", ")", ":", "\n", "            ", "shutil", ".", "rmtree", "(", "'./models/test'", ",", "ignore_errors", "=", "True", ")", "\n", "", "if", "pexists", "(", "'./lightning_logs/test'", ")", ":", "\n", "            ", "shutil", ".", "rmtree", "(", "'./lightning_logs/test'", ",", "ignore_errors", "=", "True", ")", "\n", "\n", "", "", "if", "args", ".", "reg", "==", "'grad_supervision'", ":", "\n", "        ", "assert", "args", ".", "inpaint", "!=", "'none'", ",", "'wrong argument!'", "\n", "", "if", "args", ".", "reg", "==", "'grad_cam'", ":", "\n", "        ", "assert", "torch", ".", "cuda", ".", "device_count", "(", ")", "==", "1", ",", "'Now grad cam does not allow multi gpus'", "\n", "", "if", "'mixup'", "not", "in", "args", ":", "\n", "        ", "args", ".", "mixup", "=", "0.", "\n", "", "if", "'eps_label_smoothing'", "not", "in", "args", ":", "\n", "        ", "args", ".", "eps_label_smoothing", "=", "0.", "\n", "", "if", "args", ".", "mixup", ">", "0.", "or", "args", ".", "eps_label_smoothing", ">", "0.", ":", "\n", "        ", "assert", "args", ".", "reg", "==", "'none'", "and", "args", ".", "inpaint", "==", "'none'", "and", "args", ".", "f_inpaint", "==", "'none'", "\n", "", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.None.train_pl.main": [[157, 205], ["os.makedirs", "pytorch_lightning.logging.TensorBoardLogger", "dict", "dict.update", "pytorch_lightning.Trainer", "pytorch_lightning.seed_everything", "eval", "os.path.join", "model.pl_trainer_args", "model.is_finished_run", "json.dump", "pl.Trainer.fit", "hasattr", "model.test_dataloader", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "os.path.join", "vars", "open", "arch.utils.Timer", "pl.Trainer.test", "arch.lightning.csv_recording.CSVRecordingCallback", "os.path.join"], "function", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.CAInpainter.CAInpainter.eval", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.lightning.cct.CCTLightningModel.pl_trainer_args", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.lightning.base.EpochBaseLightningModel.is_finished_run", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.lightning.base.BaseLightningModel.test_dataloader"], ["", "def", "main", "(", "args", ":", "Namespace", ")", "->", "None", ":", "\n", "    ", "if", "args", ".", "seed", "is", "not", "None", ":", "\n", "        ", "seed_everything", "(", "args", ".", "seed", ")", "\n", "\n", "", "model", "=", "eval", "(", "args", ".", "pl_model", ")", "(", "args", ")", "\n", "\n", "os", ".", "makedirs", "(", "pjoin", "(", "'./lightning_logs'", ",", "args", ".", "name", ")", ",", "exist_ok", "=", "True", ")", "\n", "logger", "=", "TensorBoardLogger", "(", "\n", "save_dir", "=", "'./lightning_logs/'", ",", "\n", "name", "=", "args", ".", "name", ",", "\n", ")", "\n", "\n", "db", "=", "None", "if", "torch", ".", "cuda", ".", "device_count", "(", ")", "==", "1", "else", "args", ".", "distributed_backend", "\n", "default_args", "=", "dict", "(", "\n", "gpus", "=", "-", "1", ",", "\n", "distributed_backend", "=", "db", ",", "\n", "precision", "=", "16", "if", "args", ".", "fp16", "else", "32", ",", "\n", "amp_level", "=", "'O1'", ",", "\n", "profiler", "=", "True", ",", "\n", "num_sanity_val_steps", "=", "1", ",", "\n", "# num_sanity_val_steps=1 if args.test_run else 0,", "\n", "accumulate_grad_batches", "=", "args", ".", "batch_split", ",", "\n", "logger", "=", "logger", ",", "\n", "benchmark", "=", "(", "args", ".", "seed", "is", "None", ")", ",", "\n", "deterministic", "=", "(", "args", ".", "seed", "is", "not", "None", ")", ",", "\n", "callbacks", "=", "[", "CSVRecordingCallback", "(", ")", "]", ",", "\n", "limit_val_batches", "=", "0.1", "if", "args", ".", "test_run", "else", "1.", ",", "\n", "limit_train_batches", "=", "0.1", "if", "args", ".", "test_run", "else", "1.", ",", "\n", "gradient_clip_val", "=", "1.0", ",", "\n", ")", "\n", "# Let the specific model could overwrite the default args", "\n", "default_args", ".", "update", "(", "model", ".", "pl_trainer_args", "(", ")", ")", "\n", "\n", "trainer", "=", "pl", ".", "Trainer", "(", "**", "default_args", ")", "\n", "if", "not", "model", ".", "is_finished_run", "(", "pjoin", "(", "args", ".", "logdir", ",", "args", ".", "name", ")", ")", ":", "\n", "# Record hyperparameters", "\n", "        ", "json", ".", "dump", "(", "vars", "(", "args", ")", ",", "\n", "open", "(", "pjoin", "(", "args", ".", "logdir", ",", "args", ".", "name", ",", "'hparams.json'", ")", ",", "'w'", ")", ")", "\n", "\n", "trainer", ".", "fit", "(", "model", ")", "\n", "\n", "# Run the test set if defined in lightning model", "\n", "", "gave_test_loader", "=", "hasattr", "(", "model", ",", "'test_dataloader'", ")", "and", "model", ".", "test_dataloader", "(", ")", "\n", "if", "gave_test_loader", ":", "\n", "        ", "with", "Timer", "(", "'testing'", ")", ":", "\n", "            ", "trainer", ".", "test", "(", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.None.cal_saliency_focus.myclip": [[26, 31], ["img.clamp.std().item", "img.clamp.clamp", "img.clamp.std"], "function", ["None"], ["def", "myclip", "(", "img", ")", ":", "\n", "    ", "clip_std", "=", "img", ".", "std", "(", ")", ".", "item", "(", ")", "\n", "img", "=", "img", ".", "clamp", "(", "min", "=", "-", "3", "*", "clip_std", ",", "max", "=", "3", "*", "clip_std", ")", "\n", "img", "=", "(", "1", "+", "img", "/", "clip_std", ")", "*", "0.5", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.None.cal_saliency_focus.get_grad_imp": [[33, 88], ["X.requires_grad_", "X.requires_grad_", "model", "[].detach", "cal_saliency_focus.myclip", "model.argmax", "captum.attr.DeepLift", "captum.attr.DeepLiftShap.attribute", "F.interpolate.detach", "torch.no_grad", "torch.no_grad", "model", "model.argmax", "captum.attr.DeepLiftShap", "range", "torch.cat", "torch.cat", "torch.autograd.grad", "torch.autograd.grad", "len", "captum.attr.DeepLiftShap.attribute", "F.interpolate.append", "captum.attr.LayerGradCam", "captum.attr.LayerGradCam.attribute", "torch.interpolate", "NotImplementedError", "logits[].sum", "dl.attribute.detach", "torch.arange", "torch.arange", "len"], "function", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.None.cal_saliency_focus.myclip"], ["", "def", "get_grad_imp", "(", "model", ",", "X", ",", "y", "=", "None", ",", "mode", "=", "'grad'", ",", "return_y", "=", "False", ",", "clip", "=", "False", ",", "baselines", "=", "None", ")", ":", "\n", "    ", "X", ".", "requires_grad_", "(", "True", ")", "\n", "#     X = X.cuda()", "\n", "\n", "if", "mode", "in", "[", "'grad'", "]", ":", "\n", "        ", "logits", "=", "model", "(", "X", ")", "\n", "if", "y", "is", "None", ":", "\n", "            ", "y", "=", "logits", ".", "argmax", "(", "dim", "=", "1", ")", "\n", "\n", "", "attributions", "=", "torch", ".", "autograd", ".", "grad", "(", "\n", "logits", "[", "torch", ".", "arange", "(", "len", "(", "logits", ")", ")", ",", "y", "]", ".", "sum", "(", ")", ",", "X", ")", "[", "0", "]", ".", "detach", "(", ")", "\n", "", "else", ":", "\n", "        ", "if", "y", "is", "None", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "logits", "=", "model", "(", "X", ")", "\n", "y", "=", "logits", ".", "argmax", "(", "dim", "=", "1", ")", "\n", "\n", "", "", "if", "mode", "==", "'deeplift'", ":", "\n", "            ", "dl", "=", "DeepLift", "(", "model", ")", "\n", "\n", "attributions", "=", "dl", ".", "attribute", "(", "inputs", "=", "X", ",", "baselines", "=", "0.", ",", "target", "=", "y", ")", "\n", "attributions", "=", "attributions", ".", "detach", "(", ")", "\n", "#             attributions = (attributions.detach() ** 2).sum(dim=1, keepdim=True)", "\n", "#         elif mode in ['deepliftshap', 'deepliftshap_mean']:", "\n", "", "elif", "mode", "in", "[", "'deepliftshap'", "]", ":", "\n", "            ", "dl", "=", "DeepLiftShap", "(", "model", ")", "\n", "attributions", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "0", ",", "len", "(", "X", ")", ",", "2", ")", ":", "\n", "                ", "the_x", ",", "the_y", "=", "X", "[", "idx", ":", "(", "idx", "+", "2", ")", "]", ",", "y", "[", "idx", ":", "(", "idx", "+", "2", ")", "]", "\n", "\n", "attribution", "=", "dl", ".", "attribute", "(", "inputs", "=", "the_x", ",", "baselines", "=", "baselines", ",", "target", "=", "the_y", ")", "\n", "attributions", ".", "append", "(", "attribution", ".", "detach", "(", ")", ")", "\n", "", "attributions", "=", "torch", ".", "cat", "(", "attributions", ",", "dim", "=", "0", ")", "\n", "#             attributions = dl.attribute(inputs=X, baselines=baselines, target=y).detach()", "\n", "#             if mode == 'deepliftshap':", "\n", "#                 attributions = (attributions ** 2).sum(dim=1, keepdim=True)", "\n", "#             else:", "\n", "#                 attributions = (attributions).mean(dim=1, keepdim=True)", "\n", "", "elif", "mode", "in", "[", "'gradcam'", "]", ":", "\n", "            ", "orig_lgc", "=", "LayerGradCam", "(", "model", ",", "model", ".", "body", "[", "0", "]", ")", "\n", "attributions", "=", "orig_lgc", ".", "attribute", "(", "X", ",", "target", "=", "y", ")", "\n", "\n", "attributions", "=", "F", ".", "interpolate", "(", "\n", "attributions", ",", "size", "=", "X", ".", "shape", "[", "-", "2", ":", "]", ",", "mode", "=", "'bilinear'", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "f'${mode} is not specified.'", ")", "\n", "\n", "# Do clipping!", "\n", "", "", "if", "clip", ":", "\n", "        ", "attributions", "=", "myclip", "(", "attributions", ")", "\n", "\n", "", "X", ".", "requires_grad_", "(", "False", ")", "\n", "if", "not", "return_y", ":", "\n", "        ", "return", "attributions", "\n", "", "return", "attributions", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.None.cal_saliency_focus.get_X_and_y_by_idxs": [[90, 99], ["torch.stack", "torch.stack", "torch.tensor", "torch.tensor", "torch.stack.append", "torch.tensor.append"], "function", ["None"], ["", "def", "get_X_and_y_by_idxs", "(", "idxes", ",", "dataset", ")", ":", "\n", "    ", "X", ",", "y", "=", "[", "]", ",", "[", "]", "\n", "for", "idx", "in", "idxes", ":", "\n", "        ", "s", ",", "t", "=", "dataset", "[", "idx", "]", "\n", "X", ".", "append", "(", "s", ")", "\n", "y", ".", "append", "(", "t", ")", "\n", "", "X", "=", "torch", ".", "stack", "(", "X", ")", "\n", "y", "=", "torch", ".", "tensor", "(", "y", ")", "\n", "return", "X", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.None.cal_saliency_focus.get_X_and_y_mask_by_idxs": [[101, 131], ["torch.stack", "torch.stack", "torch.tensor", "torch.tensor", "torch.stack", "torch.stack", "int", "isinstance", "torch.stack.append", "torch.tensor.append", "torch.stack.append", "path.split", "os.path.join", "torch.from_numpy", "torch.from_numpy", "torch.stack.append", "torch.tensor.append", "torch.stack.append", "tmp[].split", "numpy.load", "torch.from_numpy.unsqueeze"], "function", ["None"], ["", "def", "get_X_and_y_mask_by_idxs", "(", "idxes", ",", "dataset", ")", ":", "\n", "    ", "X", ",", "y", ",", "masks", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "idx", "in", "idxes", ":", "\n", "        ", "idx", "=", "int", "(", "idx", ")", "\n", "s", ",", "t", "=", "dataset", "[", "idx", "]", "\n", "if", "isinstance", "(", "s", ",", "dict", ")", ":", "# the training data loader", "\n", "            ", "X", ".", "append", "(", "s", "[", "'imgs'", "]", ")", "\n", "y", ".", "append", "(", "t", ")", "\n", "masks", ".", "append", "(", "s", "[", "'masks'", "]", ")", "\n", "", "else", ":", "\n", "            ", "path", ",", "_", "=", "dataset", ".", "samples", "[", "idx", "]", "\n", "tmp", "=", "path", ".", "split", "(", "'/'", ")", "\n", "cls_name", "=", "tmp", "[", "-", "2", "]", "\n", "fname", "=", "tmp", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "if", "'fg'", "in", "fname", ":", "# 'mixed_next'", "\n", "                ", "fname", "=", "fname", "[", "3", ":", "18", "]", "+", "'.npy'", "\n", "", "else", ":", "# 'original'", "\n", "                ", "fname", "=", "fname", "+", "'.npy'", "\n", "\n", "", "mask_np", "=", "pjoin", "(", "'../datasets/bg_challenge/test/fg_mask/val/'", ",", "cls_name", ",", "fname", ")", "\n", "mask", "=", "torch", ".", "from_numpy", "(", "np", ".", "load", "(", "mask_np", ")", ")", "\n", "\n", "X", ".", "append", "(", "s", ")", "\n", "y", ".", "append", "(", "t", ")", "\n", "masks", ".", "append", "(", "mask", ".", "unsqueeze", "(", "0", ")", ")", "\n", "\n", "", "", "X", "=", "torch", ".", "stack", "(", "X", ")", "\n", "y", "=", "torch", ".", "tensor", "(", "y", ")", "\n", "masks", "=", "torch", ".", "stack", "(", "masks", ")", "\n", "return", "X", ",", "y", ",", "masks", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.None.cal_saliency_focus.cal_imps_and_masks": [[133, 185], ["cal_saliency_focus.cal_imps_and_masks.gen_loader"], "function", ["None"], ["", "def", "cal_imps_and_masks", "(", "model", ",", "dataset", ",", "batch_size", "=", "4", ",", "mode", "=", "'grad'", ",", "target", "=", "'y_pred'", ")", ":", "\n", "    ", "assert", "target", "in", "[", "'y_pred'", ",", "'y'", "]", "\n", "if", "'deeplift'", "in", "mode", ":", "\n", "        ", "b_loader", "=", "iter", "(", "dataset", ".", "make_loader", "(", "\n", "batch_size", "=", "20", ",", "shuffle", "=", "True", ",", "workers", "=", "2", ",", "drop_last", "=", "True", ")", ")", "\n", "\n", "", "if", "isinstance", "(", "dataset", ",", "MyCCT_Dataset", ")", "or", "isinstance", "(", "dataset", ",", "WaterbirdDataset", ")", ":", "\n", "        ", "def", "gen_loader", "(", ")", ":", "\n", "            ", "loader", "=", "dataset", ".", "make_loader", "(", "\n", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "workers", "=", "4", ")", "\n", "for", "s", ",", "y", "in", "loader", ":", "\n", "                ", "if", "'masks'", "not", "in", "s", ":", "\n", "                    ", "masks", "=", "generate_mask", "(", "s", "[", "'imgs'", "]", ",", "s", "[", "'xs'", "]", ",", "s", "[", "'ys'", "]", ",", "s", "[", "'ws'", "]", ",", "s", "[", "'hs'", "]", ")", "\n", "", "else", ":", "\n", "                    ", "masks", "=", "s", "[", "'masks'", "]", "\n", "", "yield", "s", "[", "'imgs'", "]", ",", "y", ",", "masks", "\n", "", "", "", "else", ":", "\n", "        ", "def", "gen_loader", "(", ")", ":", "\n", "            ", "idxes", "=", "torch", ".", "arange", "(", "len", "(", "dataset", ")", ")", "\n", "for", "the_idxes", "in", "torch", ".", "split", "(", "idxes", ",", "batch_size", ")", ":", "\n", "                ", "X", ",", "y", ",", "mask", "=", "get_X_and_y_mask_by_idxs", "(", "the_idxes", ",", "dataset", ")", "\n", "yield", "X", ",", "y", ",", "mask", "\n", "\n", "", "", "", "results", "=", "{", "}", "\n", "results", "[", "'norm_fg'", "]", "=", "[", "]", "\n", "results", "[", "'norm_aupr'", "]", "=", "[", "]", "\n", "results", "[", "'norm_auc'", "]", "=", "[", "]", "\n", "results", "[", "'norm_iou'", "]", "=", "[", "]", "\n", "for", "X", ",", "y", ",", "mask", "in", "gen_loader", "(", ")", ":", "\n", "        ", "X", "=", "X", ".", "cuda", "(", ")", "\n", "\n", "baselines", "=", "None", "\n", "if", "'deeplift'", "in", "mode", ":", "\n", "            ", "baselines", ",", "_", "=", "next", "(", "b_loader", ")", "\n", "if", "isinstance", "(", "baselines", ",", "dict", ")", ":", "\n", "                ", "baselines", "=", "baselines", "[", "'imgs'", "]", "\n", "", "baselines", "=", "baselines", ".", "cuda", "(", ")", "\n", "\n", "", "imp", "=", "get_grad_imp", "(", "model", ",", "X", ",", "mode", "=", "mode", ",", "baselines", "=", "baselines", ",", "\n", "**", "(", "{", "}", "if", "target", "==", "'y_pred'", "else", "{", "'y'", ":", "y", ".", "cuda", "(", ")", "}", ")", ")", "\n", "# norm", "\n", "imp", "=", "(", "imp", "**", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "cpu", "(", ")", "\n", "results", "[", "'norm_fg'", "]", "+=", "cal_bbox_metric", "(", "imp", ",", "mask", ")", "\n", "results", "[", "'norm_aupr'", "]", "+=", "cal_bbox_metric", "(", "imp", ",", "mask", ",", "kind", "=", "'aupr'", ")", "\n", "results", "[", "'norm_auc'", "]", "+=", "cal_bbox_metric", "(", "imp", ",", "mask", ",", "kind", "=", "'auc'", ")", "\n", "results", "[", "'norm_iou'", "]", "+=", "cal_bbox_metric", "(", "imp", ",", "mask", ",", "kind", "=", "'iou'", ")", "\n", "\n", "", "results", "[", "'norm_fg'", "]", "=", "np", ".", "mean", "(", "results", "[", "'norm_fg'", "]", ")", "\n", "results", "[", "'norm_aupr'", "]", "=", "np", ".", "mean", "(", "results", "[", "'norm_aupr'", "]", ")", "\n", "results", "[", "'norm_auc'", "]", "=", "np", ".", "mean", "(", "results", "[", "'norm_auc'", "]", ")", "\n", "results", "[", "'norm_iou'", "]", "=", "np", ".", "mean", "(", "results", "[", "'norm_iou'", "]", ")", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.None.cal_saliency_focus.cal_bbox_metric": [[187, 222], ["zip", "imps.sum", "results.append", "sklearn.metrics.average_precision_score", "results.append", "masks.float", "mask.cpu().view.cpu().view().int().numpy", "imp.cpu().view.cpu().view().numpy", "sklearn.metrics.roc_auc_score", "mask.cpu().view.cpu().view", "imp.cpu().view.cpu().view", "results.append", "NotImplementedError", "mask.cpu().view.cpu().view().int().numpy", "imp.cpu().view.cpu().view().numpy", "imp.cpu().view.kthvalue", "mask.cpu().view.cpu().view().int", "imp.cpu().view.cpu().view", "mask.cpu().view.cpu", "imp.cpu().view.cpu", "mask.cpu().view.cpu().view().int", "imp.cpu().view.cpu().view", "mask.cpu().view.cpu().view", "imp.cpu().view.cpu", "mask.cpu().view.cpu().view", "imp.cpu().view.cpu", "mask.cpu().view.cpu", "mask.cpu().view.cpu"], "function", ["None"], ["", "def", "cal_bbox_metric", "(", "imps", ",", "masks", ",", "kind", "=", "'percentage'", ")", ":", "\n", "    ", "if", "kind", "==", "'percentage'", ":", "\n", "        ", "orig_bbox_o", "=", "(", "imps", "*", "masks", ".", "float", "(", ")", ")", ".", "sum", "(", "dim", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "orig_all", "=", "(", "imps", ")", ".", "sum", "(", "dim", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "\n", "return", "(", "orig_bbox_o", "/", "orig_all", ")", ".", "tolist", "(", ")", "\n", "\n", "", "assert", "imps", ".", "shape", "==", "masks", ".", "shape", "\n", "results", "=", "[", "]", "\n", "for", "imp", ",", "mask", "in", "zip", "(", "imps", ",", "masks", ")", ":", "\n", "        ", "if", "(", "mask", "==", "1", ")", ".", "all", "(", ")", "or", "(", "mask", "==", "0", ")", ".", "all", "(", ")", ":", "\n", "            ", "continue", "\n", "\n", "", "if", "kind", "==", "'aupr'", ":", "\n", "            ", "results", ".", "append", "(", "average_precision_score", "(", "\n", "mask", ".", "cpu", "(", ")", ".", "view", "(", "-", "1", ")", ".", "int", "(", ")", ".", "numpy", "(", ")", ",", "imp", ".", "cpu", "(", ")", ".", "view", "(", "-", "1", ")", ".", "numpy", "(", ")", ")", ")", "\n", "", "elif", "kind", "==", "'auc'", ":", "\n", "            ", "results", ".", "append", "(", "roc_auc_score", "(", "\n", "mask", ".", "cpu", "(", ")", ".", "view", "(", "-", "1", ")", ".", "int", "(", ")", ".", "numpy", "(", ")", ",", "imp", ".", "cpu", "(", ")", ".", "view", "(", "-", "1", ")", ".", "numpy", "(", ")", ")", ")", "\n", "", "elif", "kind", "==", "'iou'", ":", "\n", "            ", "mask", "=", "mask", ".", "cpu", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "\n", "imp", "=", "imp", ".", "cpu", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "thresh", "=", "imp", ".", "kthvalue", "(", "k", "=", "(", "mask", "==", "0", ")", ".", "int", "(", ")", ".", "sum", "(", ")", ")", ".", "values", "\n", "imp", "[", "imp", ">", "thresh", "]", "=", "1", "\n", "imp", "[", "imp", "<=", "thresh", "]", "=", "0", "\n", "\n", "intersection", "=", "(", "(", "imp", "==", "1", ")", "&", "(", "mask", "==", "1", ")", ")", ".", "float", "(", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "union", "=", "(", "(", "imp", "==", "1", ")", "|", "(", "mask", "==", "1", ")", ")", ".", "float", "(", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "results", ".", "append", "(", "intersection", "*", "1.0", "/", "union", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "\n", "", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.None.cal_saliency_focus.main": [[224, 353], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_known_args", "pytorch_lightning.seed_everything", "os.path.exists", "eval().load_from_checkpoint", "model.cuda().eval", "model.parameters", "pandas.read_csv", "os.path.exists", "print", "os.system", "p.requires_grad_", "arch.data.imagenet_datasets.MyImageFolder", "arch.data.imagenet_datasets.MyImageFolder", "arch.data.imagenet_datasets.MyImageFolder", "eval", "model.cuda", "arch.data.imagenet_datasets.MyImageFolder.get_val_transform", "arch.data.imagenet_datasets.MyImageFolder.get_val_transform", "arch.data.imagenet_datasets.MyImageFolder.get_val_transform", "arch.data.cct_datasets.MyCCT_Dataset", "arch.data.cct_datasets.MyCCT_Dataset", "print", "print", "NotImplementedError", "len", "len", "arch.data.waterbirds_datasets.WaterbirdDataset", "arch.data.waterbirds_datasets.WaterbirdDataset", "print", "print", "NotImplementedError", "print", "cal_saliency_focus.cal_imps_and_masks", "arch.utils.output_csv", "arch.data.cct_datasets.MyCCT_Dataset.get_val_bbox_transform", "arch.data.cct_datasets.MyCCT_Dataset.get_val_bbox_transform", "len", "len", "arch.data.waterbirds_datasets.WaterbirdDataset.get_val_transform", "arch.data.waterbirds_datasets.WaterbirdDataset.get_val_transform", "prefix.split", "prefix.split"], "function", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.CAInpainter.CAInpainter.eval", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.CAInpainter.CAInpainter.eval", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.CAInpainter.CAInpainter.cuda", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.waterbirds_datasets.WaterbirdDataset.get_val_transform", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.waterbirds_datasets.WaterbirdDataset.get_val_transform", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.waterbirds_datasets.WaterbirdDataset.get_val_transform", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.None.cal_saliency_focus.cal_imps_and_masks", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.arch.utils.output_csv", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.cct_datasets.MyCCT_Dataset.get_val_bbox_transform", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.cct_datasets.MyCCT_Dataset.get_val_bbox_transform", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.waterbirds_datasets.WaterbirdDataset.get_val_transform", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.waterbirds_datasets.WaterbirdDataset.get_val_transform"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"Fine-tune BiT-M model.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--prefixes\"", ",", "nargs", "=", "'+'", ",", "type", "=", "str", ",", "required", "=", "True", ")", "\n", "args", ",", "_", "=", "parser", ".", "parse_known_args", "(", ")", "\n", "\n", "seed_everything", "(", "2020", ")", "\n", "\n", "for", "seed", "in", "[", "5", ",", "10", ",", "100", "]", ":", "\n", "        ", "for", "prefix", "in", "args", ".", "prefixes", ":", "\n", "            ", "name", "=", "f\"{prefix}_s{seed}\"", "\n", "\n", "if", "'in9'", "in", "name", ":", "\n", "                ", "output_file", "=", "'IN9_saliency.csv'", "\n", "the_cls_name", "=", "IN9LightningModel", ".", "__name__", "\n", "", "elif", "'cct'", "in", "name", ":", "\n", "                ", "output_file", "=", "'CCT_saliency.csv'", "\n", "the_cls_name", "=", "CCTLightningModel", ".", "__name__", "\n", "", "elif", "'wb'", "in", "name", ":", "\n", "                ", "output_file", "=", "'wb_saliency.csv'", "\n", "the_cls_name", "=", "WaterbirdLightningModel", ".", "__name__", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", ")", "\n", "\n", "", "prev_df", "=", "None", "\n", "if", "pexists", "(", "f'./results/{output_file}'", ")", ":", "\n", "                ", "prev_df", "=", "pd", ".", "read_csv", "(", "f'./results/{output_file}'", ")", "\n", "\n", "", "model_path", "=", "f'./models/{name}/best.ckpt'", "\n", "if", "not", "pexists", "(", "model_path", ")", ":", "\n", "                ", "print", "(", "f'Copying from v for {model_path}'", ")", "\n", "os", ".", "system", "(", "f'rsync -avzL '", "\n", "f'vr:/h/kingsley/bbox_deconv/big_transfer/models/{name}/best.ckpt ./models/{name}/'", ")", "\n", "\n", "", "tmp", "=", "eval", "(", "the_cls_name", ")", ".", "load_from_checkpoint", "(", "model_path", ")", "\n", "model", "=", "tmp", ".", "model", "\n", "# hparams = tmp.hparams", "\n", "model", ".", "cuda", "(", ")", ".", "eval", "(", ")", "\n", "\n", "for", "p", "in", "model", ".", "parameters", "(", ")", ":", "\n", "                ", "p", ".", "requires_grad_", "(", "False", ")", "\n", "\n", "", "if", "'in9'", "in", "name", ":", "\n", "                ", "original_d", "=", "MyImageFolder", "(", "\n", "'../datasets/bg_challenge/test/original/val/'", ",", "\n", "MyImageFolder", ".", "get_val_transform", "(", ")", "\n", ")", "\n", "mixed_same_d", "=", "MyImageFolder", "(", "\n", "'../datasets/bg_challenge/test/mixed_same/val/'", ",", "\n", "MyImageFolder", ".", "get_val_transform", "(", ")", "\n", ")", "\n", "mixed_next_d", "=", "MyImageFolder", "(", "\n", "'../datasets/bg_challenge/test/mixed_next/val/'", ",", "\n", "MyImageFolder", ".", "get_val_transform", "(", ")", "\n", ")", "\n", "arr", "=", "[", "\n", "(", "'All mixed_same'", ",", "mixed_same_d", ")", ",", "\n", "(", "'All original'", ",", "original_d", ")", ",", "\n", "(", "'All mixed_next'", ",", "mixed_next_d", ")", ",", "\n", "]", "\n", "", "elif", "'cct'", "in", "name", ":", "\n", "                ", "cis_test_d", "=", "MyCCT_Dataset", "(", "\n", "'../datasets/cct/eccv_18_annotation_files/cis_test_annotations.json'", ",", "\n", "transform", "=", "MyCCT_Dataset", ".", "get_val_bbox_transform", "(", ")", ",", "\n", "only_bbox_imgs", "=", "True", ",", "\n", ")", "\n", "trans_test_d", "=", "MyCCT_Dataset", "(", "\n", "'../datasets/cct/eccv_18_annotation_files/trans_test_annotations.json'", ",", "\n", "transform", "=", "MyCCT_Dataset", ".", "get_val_bbox_transform", "(", ")", ",", "\n", "only_bbox_imgs", "=", "True", ",", "\n", ")", "\n", "print", "(", "'cis:'", ",", "len", "(", "cis_test_d", ")", ")", "\n", "print", "(", "'trans:'", ",", "len", "(", "trans_test_d", ")", ")", "\n", "arr", "=", "[", "\n", "(", "'All cis_test'", ",", "cis_test_d", ")", ",", "\n", "(", "'All trans_test'", ",", "trans_test_d", ")", ",", "\n", "]", "\n", "", "elif", "'wb'", "in", "name", ":", "\n", "                ", "orig_test_d", "=", "WaterbirdDataset", "(", "\n", "mode", "=", "'test'", ",", "\n", "type", "=", "'same'", ",", "\n", "only_images", "=", "False", ",", "\n", "transform", "=", "WaterbirdDataset", ".", "get_val_transform", "(", ")", ")", "\n", "flip_test_d", "=", "WaterbirdDataset", "(", "\n", "mode", "=", "'test'", ",", "\n", "type", "=", "'flip'", ",", "\n", "only_images", "=", "False", ",", "\n", "transform", "=", "WaterbirdDataset", ".", "get_val_transform", "(", ")", ")", "\n", "print", "(", "'orig:'", ",", "len", "(", "orig_test_d", ")", ")", "\n", "print", "(", "'flip:'", ",", "len", "(", "flip_test_d", ")", ")", "\n", "arr", "=", "[", "\n", "(", "'All orig'", ",", "orig_test_d", ")", ",", "\n", "(", "'All flip'", ",", "flip_test_d", ")", ",", "\n", "]", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", "'Not found %s'", "%", "name", ")", "\n", "\n", "", "for", "name_idxes", ",", "dataset", "in", "arr", ":", "\n", "                ", "for", "mode", ",", "bs", "in", "[", "\n", "# ('grad', 32),", "\n", "(", "'deepliftshap'", ",", "64", ")", ",", "\n", "]", ":", "\n", "                    ", "for", "target", "in", "[", "\n", "#                 'y_pred',", "\n", "'y'", ",", "\n", "]", ":", "\n", "                        ", "if", "prev_df", "is", "not", "None", "and", "(", "(", "prev_df", "[", "'name'", "]", "==", "name", ")", "\n", "&", "(", "prev_df", "[", "'mode'", "]", "==", "mode", ")", "\n", "&", "(", "prev_df", "[", "'name_idxes'", "]", "==", "name_idxes", ")", ")", ".", "any", "(", ")", ":", "\n", "                            ", "continue", "\n", "\n", "", "print", "(", "name", ",", "name_idxes", ",", "mode", ")", "\n", "result", "=", "cal_imps_and_masks", "(", "model", ",", "dataset", ",", "mode", "=", "mode", ",", "batch_size", "=", "bs", ",", "target", "=", "target", ")", "\n", "\n", "# result = {}", "\n", "result", "[", "'name_idxes'", "]", "=", "name_idxes", "\n", "\n", "if", "'in9'", "in", "name", ":", "\n", "                            ", "name_m", "=", "'_'", ".", "join", "(", "prefix", ".", "split", "(", "'_'", ")", "[", "3", ":", "]", ")", "\n", "", "else", ":", "\n", "                            ", "name_m", "=", "'_'", ".", "join", "(", "prefix", ".", "split", "(", "'_'", ")", "[", "2", ":", "]", ")", "\n", "", "result", "[", "'name_m'", "]", "=", "name_m", "\n", "\n", "result", "[", "'name'", "]", "=", "name", "\n", "result", "[", "'seed'", "]", "=", "seed", "\n", "result", "[", "'mode'", "]", "=", "mode", "\n", "result", "[", "'target'", "]", "=", "target", "\n", "\n", "output_csv", "(", "f'./results/{output_file}'", ",", "result", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.arch.myhack.HackGradAndOutputs.__init__": [[9, 14], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "is_training", "=", "True", ")", ":", "\n", "        ", "self", ".", "is_training", "=", "is_training", "\n", "self", ".", "normal_grad", "=", "None", "\n", "self", ".", "captum_select_target", "=", "None", "\n", "self", ".", "output", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.arch.myhack.HackGradAndOutputs.__enter__": [[15, 36], ["myhack.HackGradAndOutputs.captum_select_target", "myhack.HackGradAndOutputs.normal_grad"], "methods", ["None"], ["", "def", "__enter__", "(", "self", ")", ":", "\n", "# Override torch autograd", "\n", "        ", "if", "self", ".", "is_training", ":", "\n", "            ", "self", ".", "normal_grad", "=", "torch", ".", "autograd", ".", "grad", "\n", "\n", "def", "my_grad", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "                ", "kwargs", "[", "'create_graph'", "]", "=", "True", "\n", "kwargs", "[", "'retain_graph'", "]", "=", "True", "\n", "return", "self", ".", "normal_grad", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "", "torch", ".", "autograd", ".", "grad", "=", "my_grad", "\n", "\n", "# Override the captum's function to derive the model's output", "\n", "", "self", ".", "captum_select_target", "=", "captum", ".", "attr", ".", "_utils", ".", "common", ".", "_select_targets", "\n", "def", "my_select_targets", "(", "output", ",", "target", ")", ":", "\n", "            ", "self", ".", "output", "=", "output", "\n", "return", "self", ".", "captum_select_target", "(", "output", ",", "target", ")", "\n", "\n", "", "captum", ".", "attr", ".", "_utils", ".", "common", ".", "_select_targets", "=", "my_select_targets", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.arch.myhack.HackGradAndOutputs.__exit__": [[37, 45], ["None"], "methods", ["None"], ["", "def", "__exit__", "(", "self", ",", "exc_type", ",", "exc_val", ",", "exc_tb", ")", ":", "\n", "        ", "if", "self", ".", "is_training", ":", "\n", "            ", "torch", ".", "autograd", ".", "grad", "=", "self", ".", "normal_grad", "\n", "", "captum", ".", "attr", ".", "_utils", ".", "common", ".", "_select_targets", "=", "self", ".", "captum_select_target", "\n", "\n", "self", ".", "normal_grad", "=", "None", "\n", "self", ".", "captum_select_target", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.arch.myhack.MyDeepLift.__init__": [[48, 53], ["captum.attr.DeepLift.__init__"], "methods", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.bit_pytorch.lbtoolbox.Chrono.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "kept_backward", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "kept_backward", "=", "kept_backward", "\n", "self", ".", "my_kept_module_input", "=", "None", "\n", "self", ".", "my_kept_module_output", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.arch.myhack.MyDeepLift._backward_hook": [[54, 76], ["super()._backward_hook"], "methods", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.arch.myhack.MyDeepLift._backward_hook"], ["", "def", "_backward_hook", "(", "\n", "self", ",", "\n", "module", ",", "\n", "grad_input", ",", "\n", "grad_output", ",", "\n", "eps", ":", "float", "=", "1e-10", ",", "\n", ")", ":", "\n", "        ", "r\"\"\"\n         Override the function to keep the module input / output\n         after back propogation to do 2nd bp.\n         \"\"\"", "\n", "if", "self", ".", "kept_backward", ":", "\n", "            ", "self", ".", "my_kept_module_input", "=", "module", ".", "input", "\n", "self", ".", "my_kept_module_output", "=", "module", ".", "output", "\n", "\n", "", "result", "=", "super", "(", ")", ".", "_backward_hook", "(", "module", ",", "grad_input", ",", "grad_output", ",", "eps", ")", "\n", "\n", "if", "self", ".", "kept_backward", ":", "\n", "            ", "module", ".", "input", "=", "self", ".", "my_kept_module_input", "\n", "module", ".", "output", "=", "self", ".", "my_kept_module_output", "\n", "\n", "", "return", "result", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.arch.models.StdConv2d.forward": [[26, 32], ["torch.var_mean", "torch.var_mean", "torch.var_mean", "torch.var_mean", "torch.var_mean", "torch.var_mean", "torch.var_mean", "torch.var_mean", "torch.var_mean", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt"], "methods", ["None"], ["  ", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "w", "=", "self", ".", "weight", "\n", "v", ",", "m", "=", "torch", ".", "var_mean", "(", "w", ",", "dim", "=", "[", "1", ",", "2", ",", "3", "]", ",", "keepdim", "=", "True", ",", "unbiased", "=", "False", ")", "\n", "w", "=", "(", "w", "-", "m", ")", "/", "torch", ".", "sqrt", "(", "v", "+", "1e-10", ")", "\n", "return", "F", ".", "conv2d", "(", "x", ",", "w", ",", "self", ".", "bias", ",", "self", ".", "stride", ",", "self", ".", "padding", ",", "\n", "self", ".", "dilation", ",", "self", ".", "groups", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.arch.models.PreActBottleneck.__init__": [[60, 76], ["torch.Module.__init__", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "models.conv1x1", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "models.conv3x3", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "models.conv1x1", "torch.ReLU", "torch.ReLU", "torch.ReLU", "models.conv1x1"], "methods", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.bit_pytorch.lbtoolbox.Chrono.__init__", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.bit_pytorch.models.conv1x1", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.bit_pytorch.models.conv3x3", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.bit_pytorch.models.conv1x1", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.bit_pytorch.models.conv1x1"], ["def", "__init__", "(", "self", ",", "cin", ",", "cout", "=", "None", ",", "cmid", "=", "None", ",", "stride", "=", "1", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "cout", "=", "cout", "or", "cin", "\n", "cmid", "=", "cmid", "or", "cout", "//", "4", "\n", "\n", "self", ".", "gn1", "=", "nn", ".", "GroupNorm", "(", "32", ",", "cin", ")", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "cin", ",", "cmid", ")", "\n", "self", ".", "gn2", "=", "nn", ".", "GroupNorm", "(", "32", ",", "cmid", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "cmid", ",", "cmid", ",", "stride", ")", "# Original code has it on conv1!!", "\n", "self", ".", "gn3", "=", "nn", ".", "GroupNorm", "(", "32", ",", "cmid", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "cmid", ",", "cout", ")", "\n", "self", ".", "relu", "=", "lambda", ":", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "if", "(", "stride", "!=", "1", "or", "cin", "!=", "cout", ")", ":", "\n", "# Projection also with pre-activation according to paper.", "\n", "      ", "self", ".", "downsample", "=", "conv1x1", "(", "cin", ",", "cout", ",", "stride", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.arch.models.PreActBottleneck.forward": [[77, 91], ["hasattr", "models.PreActBottleneck.conv1", "models.PreActBottleneck.conv2", "models.PreActBottleneck.conv3", "models.PreActBottleneck.relu", "models.PreActBottleneck.gn1", "models.PreActBottleneck.downsample", "models.PreActBottleneck.relu", "models.PreActBottleneck.gn2", "models.PreActBottleneck.relu", "models.PreActBottleneck.gn3"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "out", "=", "self", ".", "relu", "(", ")", "(", "self", ".", "gn1", "(", "x", ")", ")", "\n", "\n", "# Residual branch", "\n", "residual", "=", "x", "\n", "if", "hasattr", "(", "self", ",", "'downsample'", ")", ":", "\n", "      ", "residual", "=", "self", ".", "downsample", "(", "out", ")", "\n", "\n", "# Unit's branch", "\n", "", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "self", ".", "relu", "(", ")", "(", "self", ".", "gn2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "conv3", "(", "self", ".", "relu", "(", ")", "(", "self", ".", "gn3", "(", "out", ")", ")", ")", "\n", "\n", "return", "out", "+", "residual", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.arch.models.PreActBottleneck.load_from": [[92, 107], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "models.PreActBottleneck.conv1.weight.copy_", "models.PreActBottleneck.conv2.weight.copy_", "models.PreActBottleneck.conv3.weight.copy_", "models.PreActBottleneck.gn1.weight.copy_", "models.PreActBottleneck.gn2.weight.copy_", "models.PreActBottleneck.gn3.weight.copy_", "models.PreActBottleneck.gn1.bias.copy_", "models.PreActBottleneck.gn2.bias.copy_", "models.PreActBottleneck.gn3.bias.copy_", "hasattr", "models.tf2th", "models.tf2th", "models.tf2th", "models.tf2th", "models.tf2th", "models.tf2th", "models.tf2th", "models.tf2th", "models.tf2th", "models.PreActBottleneck.downsample.weight.copy_", "models.tf2th"], "methods", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.bit_pytorch.models.tf2th", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.bit_pytorch.models.tf2th", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.bit_pytorch.models.tf2th", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.bit_pytorch.models.tf2th", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.bit_pytorch.models.tf2th", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.bit_pytorch.models.tf2th", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.bit_pytorch.models.tf2th", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.bit_pytorch.models.tf2th", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.bit_pytorch.models.tf2th", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.bit_pytorch.models.tf2th"], ["", "def", "load_from", "(", "self", ",", "weights", ",", "prefix", "=", "''", ")", ":", "\n", "    ", "convname", "=", "'standardized_conv2d'", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "      ", "self", ".", "conv1", ".", "weight", ".", "copy_", "(", "tf2th", "(", "weights", "[", "f'{prefix}a/{convname}/kernel'", "]", ")", ")", "\n", "self", ".", "conv2", ".", "weight", ".", "copy_", "(", "tf2th", "(", "weights", "[", "f'{prefix}b/{convname}/kernel'", "]", ")", ")", "\n", "self", ".", "conv3", ".", "weight", ".", "copy_", "(", "tf2th", "(", "weights", "[", "f'{prefix}c/{convname}/kernel'", "]", ")", ")", "\n", "self", ".", "gn1", ".", "weight", ".", "copy_", "(", "tf2th", "(", "weights", "[", "f'{prefix}a/group_norm/gamma'", "]", ")", ")", "\n", "self", ".", "gn2", ".", "weight", ".", "copy_", "(", "tf2th", "(", "weights", "[", "f'{prefix}b/group_norm/gamma'", "]", ")", ")", "\n", "self", ".", "gn3", ".", "weight", ".", "copy_", "(", "tf2th", "(", "weights", "[", "f'{prefix}c/group_norm/gamma'", "]", ")", ")", "\n", "self", ".", "gn1", ".", "bias", ".", "copy_", "(", "tf2th", "(", "weights", "[", "f'{prefix}a/group_norm/beta'", "]", ")", ")", "\n", "self", ".", "gn2", ".", "bias", ".", "copy_", "(", "tf2th", "(", "weights", "[", "f'{prefix}b/group_norm/beta'", "]", ")", ")", "\n", "self", ".", "gn3", ".", "bias", ".", "copy_", "(", "tf2th", "(", "weights", "[", "f'{prefix}c/group_norm/beta'", "]", ")", ")", "\n", "if", "hasattr", "(", "self", ",", "'downsample'", ")", ":", "\n", "        ", "w", "=", "weights", "[", "f'{prefix}a/proj/{convname}/kernel'", "]", "\n", "self", ".", "downsample", ".", "weight", ".", "copy_", "(", "tf2th", "(", "w", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.arch.models.ResNetV2.__init__": [[112, 159], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "collections.OrderedDict", "collections.OrderedDict", "collections.OrderedDict", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "models.StdConv2d", "torch.ConstantPad2d", "torch.ConstantPad2d", "torch.ConstantPad2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "collections.OrderedDict", "collections.OrderedDict", "collections.OrderedDict", "collections.OrderedDict", "models.PreActBottleneck", "models.PreActBottleneck", "range", "models.PreActBottleneck", "models.PreActBottleneck", "range", "models.PreActBottleneck", "models.PreActBottleneck", "range", "models.PreActBottleneck", "models.PreActBottleneck", "range"], "methods", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.bit_pytorch.lbtoolbox.Chrono.__init__"], ["def", "__init__", "(", "self", ",", "block_units", ",", "width_factor", ",", "head_size", "=", "21843", ",", "zero_head", "=", "False", ",", "\n", "in_channels", "=", "3", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "wf", "=", "width_factor", "# shortcut 'cause we'll use it a lot.", "\n", "self", ".", "head_size", "=", "head_size", "\n", "\n", "# The following will be unreadable if we split lines.", "\n", "# pylint: disable=line-too-long", "\n", "self", ".", "root", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "\n", "(", "'conv'", ",", "StdConv2d", "(", "in_channels", ",", "64", "*", "wf", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", ")", ")", ",", "\n", "(", "'pad'", ",", "nn", ".", "ConstantPad2d", "(", "1", ",", "0", ")", ")", ",", "\n", "(", "'pool'", ",", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", ")", ",", "\n", "# The following is subtly not the same!", "\n", "# ('pool', nn.MaxPool2d(kernel_size=3, stride=2, padding=1)),", "\n", "]", ")", ")", "\n", "\n", "self", ".", "body", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "\n", "(", "'block1'", ",", "nn", ".", "Sequential", "(", "OrderedDict", "(", "\n", "[", "(", "'unit01'", ",", "PreActBottleneck", "(", "cin", "=", "64", "*", "wf", ",", "cout", "=", "256", "*", "wf", ",", "cmid", "=", "64", "*", "wf", ")", ")", "]", "+", "\n", "[", "(", "f'unit{i:02d}'", ",", "PreActBottleneck", "(", "cin", "=", "256", "*", "wf", ",", "cout", "=", "256", "*", "wf", ",", "cmid", "=", "64", "*", "wf", ")", ")", "for", "i", "in", "range", "(", "2", ",", "block_units", "[", "0", "]", "+", "1", ")", "]", ",", "\n", ")", ")", ")", ",", "\n", "(", "'block2'", ",", "nn", ".", "Sequential", "(", "OrderedDict", "(", "\n", "[", "(", "'unit01'", ",", "PreActBottleneck", "(", "cin", "=", "256", "*", "wf", ",", "cout", "=", "512", "*", "wf", ",", "cmid", "=", "128", "*", "wf", ",", "stride", "=", "2", ")", ")", "]", "+", "\n", "[", "(", "f'unit{i:02d}'", ",", "PreActBottleneck", "(", "cin", "=", "512", "*", "wf", ",", "cout", "=", "512", "*", "wf", ",", "cmid", "=", "128", "*", "wf", ")", ")", "for", "i", "in", "range", "(", "2", ",", "block_units", "[", "1", "]", "+", "1", ")", "]", ",", "\n", ")", ")", ")", ",", "\n", "(", "'block3'", ",", "nn", ".", "Sequential", "(", "OrderedDict", "(", "\n", "[", "(", "'unit01'", ",", "PreActBottleneck", "(", "cin", "=", "512", "*", "wf", ",", "cout", "=", "1024", "*", "wf", ",", "cmid", "=", "256", "*", "wf", ",", "stride", "=", "2", ")", ")", "]", "+", "\n", "[", "(", "f'unit{i:02d}'", ",", "PreActBottleneck", "(", "cin", "=", "1024", "*", "wf", ",", "cout", "=", "1024", "*", "wf", ",", "cmid", "=", "256", "*", "wf", ")", ")", "for", "i", "in", "range", "(", "2", ",", "block_units", "[", "2", "]", "+", "1", ")", "]", ",", "\n", ")", ")", ")", ",", "\n", "(", "'block4'", ",", "nn", ".", "Sequential", "(", "OrderedDict", "(", "\n", "[", "(", "'unit01'", ",", "PreActBottleneck", "(", "cin", "=", "1024", "*", "wf", ",", "cout", "=", "2048", "*", "wf", ",", "cmid", "=", "512", "*", "wf", ",", "stride", "=", "2", ")", ")", "]", "+", "\n", "[", "(", "f'unit{i:02d}'", ",", "PreActBottleneck", "(", "cin", "=", "2048", "*", "wf", ",", "cout", "=", "2048", "*", "wf", ",", "cmid", "=", "512", "*", "wf", ")", ")", "for", "i", "in", "range", "(", "2", ",", "block_units", "[", "3", "]", "+", "1", ")", "]", ",", "\n", ")", ")", ")", ",", "\n", "]", ")", ")", "\n", "# pylint: enable=line-too-long", "\n", "\n", "self", ".", "zero_head", "=", "zero_head", "\n", "self", ".", "head", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "\n", "(", "'gn'", ",", "nn", ".", "GroupNorm", "(", "32", ",", "2048", "*", "wf", ")", ")", ",", "\n", "(", "'relu'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "(", "'avg'", ",", "nn", ".", "AdaptiveAvgPool2d", "(", "output_size", "=", "1", ")", ")", ",", "\n", "(", "'conv'", ",", "nn", ".", "Conv2d", "(", "2048", "*", "wf", ",", "head_size", ",", "kernel_size", "=", "1", ",", "bias", "=", "True", ")", ")", ",", "\n", "]", ")", ")", "\n", "\n", "if", "zero_head", ":", "\n", "        ", "nn", ".", "init", ".", "zeros_", "(", "self", ".", "head", ".", "conv", ".", "weight", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "self", ".", "head", ".", "conv", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.arch.models.ResNetV2.forward": [[160, 164], ["models.ResNetV2.head", "models.ResNetV2.body", "models.ResNetV2.root"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "x", "=", "self", ".", "head", "(", "self", ".", "body", "(", "self", ".", "root", "(", "x", ")", ")", ")", "\n", "assert", "x", ".", "shape", "[", "-", "2", ":", "]", "==", "(", "1", ",", "1", ")", "# We should have no spatial shape left.", "\n", "return", "x", "[", "...", ",", "0", ",", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.arch.models.ResNetV2.load_from": [[165, 178], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "models.ResNetV2.root.conv.weight.copy_", "models.ResNetV2.head.gn.weight.copy_", "models.ResNetV2.head.gn.bias.copy_", "models.ResNetV2.body.named_children", "models.tf2th", "models.tf2th", "models.tf2th", "models.ResNetV2.head.conv.weight.copy_", "models.ResNetV2.head.conv.bias.copy_", "block.named_children", "models.tf2th", "models.tf2th", "unit.load_from"], "methods", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.bit_pytorch.models.tf2th", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.bit_pytorch.models.tf2th", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.bit_pytorch.models.tf2th", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.bit_pytorch.models.tf2th", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.bit_pytorch.models.tf2th", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.bit_pytorch.models.ResNetV2.load_from"], ["", "def", "load_from", "(", "self", ",", "weights", ",", "prefix", "=", "'resnet/'", ",", "last_layer_load", "=", "False", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "      ", "self", ".", "root", ".", "conv", ".", "weight", ".", "copy_", "(", "tf2th", "(", "weights", "[", "f'{prefix}root_block/standardized_conv2d/kernel'", "]", ")", ")", "# pylint: disable=line-too-long", "\n", "self", ".", "head", ".", "gn", ".", "weight", ".", "copy_", "(", "tf2th", "(", "weights", "[", "f'{prefix}group_norm/gamma'", "]", ")", ")", "\n", "self", ".", "head", ".", "gn", ".", "bias", ".", "copy_", "(", "tf2th", "(", "weights", "[", "f'{prefix}group_norm/beta'", "]", ")", ")", "\n", "if", "last_layer_load", ":", "\n", "          ", "assert", "self", ".", "head_size", "==", "1000", "\n", "self", ".", "head", ".", "conv", ".", "weight", ".", "copy_", "(", "tf2th", "(", "weights", "[", "f'{prefix}head/conv2d/kernel'", "]", ")", ")", "# pylint: disable=line-too-long", "\n", "self", ".", "head", ".", "conv", ".", "bias", ".", "copy_", "(", "tf2th", "(", "weights", "[", "f'{prefix}head/conv2d/bias'", "]", ")", ")", "\n", "\n", "", "for", "bname", ",", "block", "in", "self", ".", "body", ".", "named_children", "(", ")", ":", "\n", "        ", "for", "uname", ",", "unit", "in", "block", ".", "named_children", "(", ")", ":", "\n", "          ", "unit", ".", "load_from", "(", "weights", ",", "prefix", "=", "f'{prefix}{bname}/{uname}/'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.arch.models.conv3x3": [[34, 37], ["models.StdConv2d"], "function", ["None"], ["", "", "def", "conv3x3", "(", "cin", ",", "cout", ",", "stride", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ":", "\n", "  ", "return", "StdConv2d", "(", "cin", ",", "cout", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "bias", ",", "groups", "=", "groups", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.arch.models.conv1x1": [[39, 42], ["models.StdConv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "cin", ",", "cout", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ":", "\n", "  ", "return", "StdConv2d", "(", "cin", ",", "cout", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "0", ",", "bias", "=", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.arch.models.tf2th": [[44, 49], ["torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "conv_weights.transpose.transpose"], "function", ["None"], ["", "def", "tf2th", "(", "conv_weights", ")", ":", "\n", "  ", "\"\"\"Possibly convert HWIO to OIHW.\"\"\"", "\n", "if", "conv_weights", ".", "ndim", "==", "4", ":", "\n", "    ", "conv_weights", "=", "conv_weights", ".", "transpose", "(", "[", "3", ",", "2", ",", "0", ",", "1", "]", ")", "\n", "", "return", "torch", ".", "from_numpy", "(", "conv_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.arch.bit_common.argparser": [[26, 56], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "list", "list", "bit_hyperrule.known_dataset_sizes.keys"], "function", ["None"], ["def", "argparser", "(", "known_models", ")", ":", "\n", "  ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"Fine-tune BiT-M model.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--name\"", ",", "required", "=", "True", ",", "\n", "help", "=", "\"Name of this run. Used for monitoring and checkpointing.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--model\"", ",", "choices", "=", "list", "(", "known_models", ")", ",", "\n", "help", "=", "\"Which variant to use; BiT-M gives best results.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--logdir\"", ",", "required", "=", "True", ",", "\n", "help", "=", "\"Where to log training info (small).\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--bit_pretrained_dir\"", ",", "default", "=", "'.'", ",", "\n", "help", "=", "\"Where to search for pretrained BiT models.\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--dataset\"", ",", "choices", "=", "list", "(", "bit_hyperrule", ".", "known_dataset_sizes", ".", "keys", "(", ")", ")", ",", "\n", "help", "=", "\"Choose the dataset. It should be easy to add your own! \"", "\n", "\"Don't forget to set --datadir if necessary.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--examples_per_class\"", ",", "type", "=", "int", ",", "default", "=", "None", ",", "\n", "help", "=", "\"For the few-shot variant, use this many examples \"", "\n", "\"per class only.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--examples_per_class_seed\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "\"Random seed for selecting examples.\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--batch\"", ",", "type", "=", "int", ",", "default", "=", "512", ",", "\n", "help", "=", "\"Batch size.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--batch_split\"", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "\"Number of batches to compute gradient on before updating weights.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--base_lr\"", ",", "type", "=", "float", ",", "default", "=", "0.003", ",", "\n", "help", "=", "\"Base learning-rate for fine-tuning. Most likely default is best.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--eval_every\"", ",", "type", "=", "int", ",", "default", "=", "None", ",", "\n", "help", "=", "\"Run prediction on validation set every so many steps.\"", "\n", "\"Will always run one evaluation at the end of training.\"", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.arch.bit_common.setup_logger": [[58, 99], ["os.makedirs", "logging.config.dictConfig", "logging.config.dictConfig", "logging.getLogger", "logging.getLogger", "logging.getLogger.info", "os.path.join", "h.flush", "os.path.join"], "function", ["None"], ["", "def", "setup_logger", "(", "args", ")", ":", "\n", "  ", "\"\"\"Creates and returns a fancy logger.\"\"\"", "\n", "# return logging.basicConfig(level=logging.INFO, format=\"[%(asctime)s] %(message)s\")", "\n", "# Why is setting up proper logging so !@?#! ugly?", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "args", ".", "logdir", ",", "args", ".", "name", ")", ",", "exist_ok", "=", "True", ")", "\n", "logging", ".", "config", ".", "dictConfig", "(", "{", "\n", "\"version\"", ":", "1", ",", "\n", "\"disable_existing_loggers\"", ":", "False", ",", "\n", "\"formatters\"", ":", "{", "\n", "\"standard\"", ":", "{", "\n", "\"format\"", ":", "\"%(asctime)s [%(levelname)s] %(name)s: %(message)s\"", "\n", "}", ",", "\n", "}", ",", "\n", "\"handlers\"", ":", "{", "\n", "\"stderr\"", ":", "{", "\n", "\"level\"", ":", "\"INFO\"", ",", "\n", "\"formatter\"", ":", "\"standard\"", ",", "\n", "\"class\"", ":", "\"logging.StreamHandler\"", ",", "\n", "\"stream\"", ":", "\"ext://sys.stderr\"", ",", "\n", "}", ",", "\n", "\"logfile\"", ":", "{", "\n", "\"level\"", ":", "\"DEBUG\"", ",", "\n", "\"formatter\"", ":", "\"standard\"", ",", "\n", "\"class\"", ":", "\"logging.FileHandler\"", ",", "\n", "\"filename\"", ":", "os", ".", "path", ".", "join", "(", "args", ".", "logdir", ",", "args", ".", "name", ",", "\"train.log\"", ")", ",", "\n", "\"mode\"", ":", "\"a\"", ",", "\n", "}", "\n", "}", ",", "\n", "\"loggers\"", ":", "{", "\n", "\"\"", ":", "{", "\n", "# \"handlers\": [\"stderr\", \"logfile\"],", "\n", "\"handlers\"", ":", "[", "\"stderr\"", "]", ",", "\n", "\"level\"", ":", "\"DEBUG\"", ",", "\n", "\"propagate\"", ":", "True", "\n", "}", ",", "\n", "}", "\n", "}", ")", "\n", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "logger", ".", "flush", "=", "lambda", ":", "[", "h", ".", "flush", "(", ")", "for", "h", "in", "logger", ".", "handlers", "]", "\n", "logger", ".", "info", "(", "args", ")", "\n", "return", "logger", "\n", "", ""]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.arch.saliency_utils._get_grad_base": [[13, 25], ["torch.enable_grad", "x.requires_grad_", "model", "saliency_utils.get_grad_y.callback", "x.requires_grad_", "torch.autograd.grad"], "function", ["None"], ["def", "_get_grad_base", "(", "x", ",", "y", ",", "model", ",", "callback", ",", "is_training", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "with", "torch", ".", "enable_grad", "(", ")", ":", "\n", "        ", "x", ".", "requires_grad_", "(", "True", ")", "\n", "logits", "=", "model", "(", "x", ")", "\n", "\n", "target", "=", "callback", "(", "logits", ",", "y", ")", "\n", "the_grad", "=", "torch", ".", "autograd", ".", "grad", "(", "\n", "target", ",", "x", ",", "\n", "retain_graph", "=", "is_training", ",", "\n", "create_graph", "=", "is_training", ")", "[", "0", "]", "\n", "x", ".", "requires_grad_", "(", "False", ")", "\n", "", "return", "the_grad", ",", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.arch.saliency_utils.get_grad_y": [[27, 34], ["saliency_utils._get_grad_base", "logits[].sum"], "function", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.arch.saliency_utils._get_grad_base"], ["", "def", "get_grad_y", "(", "x", ",", "y", ",", "model", ",", "is_training", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "''' Gradient supervision (2020) '''", "\n", "def", "callback", "(", "logits", ",", "y", ")", ":", "\n", "        ", "return", "logits", "[", ":", ",", "y", "]", ".", "sum", "(", ")", "\n", "\n", "", "return", "_get_grad_base", "(", "x", ",", "y", ",", "model", ",", "callback", "=", "callback", ",", "\n", "is_training", "=", "is_training", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.arch.saliency_utils.get_grad_sum": [[36, 42], ["saliency_utils._get_grad_base", "logits.sum"], "function", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.arch.saliency_utils._get_grad_base"], ["", "def", "get_grad_sum", "(", "x", ",", "y", ",", "model", ",", "is_training", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "def", "callback", "(", "logits", ",", "y", ")", ":", "\n", "        ", "return", "logits", ".", "sum", "(", ")", "\n", "\n", "", "return", "_get_grad_base", "(", "x", ",", "y", ",", "model", ",", "callback", "=", "callback", ",", "\n", "is_training", "=", "is_training", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.arch.saliency_utils.get_grad_logp_y": [[44, 51], ["saliency_utils._get_grad_base", "torch.log_softmax", "logp[].sum"], "function", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.arch.saliency_utils._get_grad_base"], ["", "def", "get_grad_logp_y", "(", "x", ",", "y", ",", "model", ",", "is_training", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "def", "callback", "(", "logits", ",", "y", ")", ":", "\n", "        ", "logp", "=", "torch", ".", "log_softmax", "(", "logits", ",", "dim", "=", "1", ")", "\n", "return", "logp", "[", ":", ",", "y", "]", ".", "sum", "(", ")", "\n", "\n", "", "return", "_get_grad_base", "(", "x", ",", "y", ",", "model", ",", "callback", "=", "callback", ",", "\n", "is_training", "=", "is_training", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.arch.saliency_utils.get_grad_logp_sum": [[53, 61], ["saliency_utils._get_grad_base", "torch.log_softmax", "torch.log_softmax.sum"], "function", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.arch.saliency_utils._get_grad_base"], ["", "def", "get_grad_logp_sum", "(", "x", ",", "y", ",", "model", ",", "is_training", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "''' Learning right for the right reason (2017) '''", "\n", "def", "callback", "(", "logits", ",", "y", ")", ":", "\n", "        ", "logp", "=", "torch", ".", "log_softmax", "(", "logits", ",", "dim", "=", "1", ")", "\n", "return", "logp", ".", "sum", "(", ")", "\n", "\n", "", "return", "_get_grad_base", "(", "x", ",", "y", ",", "model", ",", "callback", "=", "callback", ",", "\n", "is_training", "=", "is_training", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.arch.saliency_utils.get_deeplift": [[63, 76], ["torch.enable_grad", "myhack.HackGradAndOutputs", "myhack.MyDeepLift", "myhack.MyDeepLift.attribute"], "function", ["None"], ["", "def", "get_deeplift", "(", "x", ",", "y", ",", "model", ",", "is_training", "=", "True", ",", "baselines", "=", "None", ")", ":", "\n", "# if baselines is None:", "\n", "#     # baselines = torch.zeros_like(x)", "\n", "#     baselines = 0.", "\n", "\n", "    ", "with", "torch", ".", "enable_grad", "(", ")", ",", "HackGradAndOutputs", "(", "is_training", "=", "is_training", ")", "as", "hack", ":", "\n", "        ", "dl", "=", "MyDeepLift", "(", "model", ",", "kept_backward", "=", "is_training", ")", "\n", "attributions", "=", "dl", ".", "attribute", "(", "x", ",", "baselines", ",", "\n", "target", "=", "y", ",", "return_convergence_delta", "=", "False", ")", "\n", "dl", ".", "kept_backward", "=", "False", "\n", "bs", "=", "x", ".", "shape", "[", "0", "]", "\n", "return", "attributions", ",", "hack", ".", "output", "[", ":", "bs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.arch.saliency_utils.get_grad_cam": [[78, 89], ["torch.enable_grad", "myhack.HackGradAndOutputs", "captum.attr.LayerGradCam", "captum.attr.LayerGradCam.attribute", "torch.nn.functional.interpolate", "model.get_grad_cam_layer"], "function", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.lightning.cct.CCTLightningModel.get_grad_cam_layer"], ["", "", "def", "get_grad_cam", "(", "x", ",", "y", ",", "model", ",", "is_training", "=", "True", ")", ":", "\n", "    ", "''' Choose the last conv layer which only has 7x7 out of 224x224 '''", "\n", "with", "torch", ".", "enable_grad", "(", ")", ",", "HackGradAndOutputs", "(", "is_training", "=", "is_training", ")", "as", "hack", ":", "\n", "        ", "lgc", "=", "LayerGradCam", "(", "model", ",", "model", ".", "get_grad_cam_layer", "(", ")", ")", "\n", "attributions", "=", "lgc", ".", "attribute", "(", "x", ",", "target", "=", "y", ")", "\n", "\n", "attributions", "=", "F", ".", "interpolate", "(", "\n", "attributions", ",", "size", "=", "x", ".", "shape", "[", "-", "2", ":", "]", ",", "mode", "=", "'bilinear'", ")", "\n", "\n", "return", "attributions", ",", "hack", ".", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.arch.label_smoothing.LabelSmoothingCrossEntropy.__init__": [[17, 21], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.bit_pytorch.lbtoolbox.Chrono.__init__"], ["    ", "def", "__init__", "(", "self", ",", "epsilon", ":", "float", "=", "0.1", ",", "reduction", "=", "'mean'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "self", ".", "reduction", "=", "reduction", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.arch.label_smoothing.LabelSmoothingCrossEntropy.forward": [[22, 28], ["torch.log_softmax", "torch.log_softmax", "label_smoothing.reduce_loss", "torch.nll_loss", "torch.nll_loss", "label_smoothing.linear_combination", "preds.size", "torch.log_softmax.sum"], "methods", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.arch.label_smoothing.reduce_loss", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.arch.label_smoothing.linear_combination"], ["", "def", "forward", "(", "self", ",", "preds", ",", "target", ")", ":", "\n", "        ", "n", "=", "preds", ".", "size", "(", ")", "[", "-", "1", "]", "\n", "log_preds", "=", "F", ".", "log_softmax", "(", "preds", ",", "dim", "=", "-", "1", ")", "\n", "loss", "=", "reduce_loss", "(", "-", "log_preds", ".", "sum", "(", "dim", "=", "-", "1", ")", ",", "self", ".", "reduction", ")", "\n", "nll", "=", "F", ".", "nll_loss", "(", "log_preds", ",", "target", ",", "reduction", "=", "self", ".", "reduction", ")", "\n", "return", "linear_combination", "(", "loss", "/", "n", ",", "nll", ",", "self", ".", "epsilon", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.arch.label_smoothing.linear_combination": [[8, 10], ["None"], "function", ["None"], ["def", "linear_combination", "(", "x", ",", "y", ",", "epsilon", ")", ":", "\n", "    ", "return", "epsilon", "*", "x", "+", "(", "1", "-", "epsilon", ")", "*", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.arch.label_smoothing.reduce_loss": [[12, 14], ["loss.mean", "loss.sum"], "function", ["None"], ["", "def", "reduce_loss", "(", "loss", ",", "reduction", "=", "'mean'", ")", ":", "\n", "    ", "return", "loss", ".", "mean", "(", ")", "if", "reduction", "==", "'mean'", "else", "loss", ".", "sum", "(", ")", "if", "reduction", "==", "'sum'", "else", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.arch.grid.Grid.__init__": [[15, 24], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "d1", "=", "96", ",", "d2", "=", "224", ",", "rotate", "=", "360", ",", "ratio", "=", "0.6", ",", "\n", "mode", "=", "1", ",", "prob", "=", "0.8", ")", ":", "\n", "\n", "        ", "self", ".", "d1", "=", "d1", "\n", "self", ".", "d2", "=", "d2", "\n", "self", ".", "rotate", "=", "rotate", "\n", "self", ".", "ratio", "=", "ratio", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "st_prob", "=", "self", ".", "prob", "=", "prob", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.arch.grid.Grid.set_prob": [[25, 27], ["min"], "methods", ["None"], ["", "def", "set_prob", "(", "self", ",", "epoch", ",", "max_epoch", ")", ":", "\n", "        ", "self", ".", "prob", "=", "self", ".", "st_prob", "*", "min", "(", "1", ",", "epoch", "/", "max_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.arch.grid.Grid.__call__": [[28, 75], ["img.size", "img.size", "math.ceil", "numpy.random.randint", "math.ceil", "numpy.ones", "numpy.random.randint", "numpy.random.randint", "range", "range", "numpy.random.randint", "PIL.Image.fromarray", "mask.expand_as.expand_as.rotate", "numpy.asarray", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "mask.expand_as.expand_as.expand_as", "numpy.random.rand", "math.sqrt", "max", "max", "max", "max", "numpy.uint8", "min", "min", "min", "min", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.CAInpainter.CAInpainter.cuda", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.CAInpainter.CAInpainter.cuda", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.CAInpainter.CAInpainter.cuda", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.CAInpainter.CAInpainter.cuda"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "if", "np", ".", "random", ".", "rand", "(", ")", ">", "self", ".", "prob", ":", "\n", "            ", "return", "img", "\n", "", "h", "=", "img", ".", "size", "(", "1", ")", "\n", "w", "=", "img", ".", "size", "(", "2", ")", "\n", "\n", "# 1.5 * h, 1.5 * w works fine with the squared images", "\n", "# But with rectangular input, the mask might not be able to recover back to the input image shape", "\n", "# A square mask with edge length equal to the diagnoal of the input image", "\n", "# will be able to cover all the image spot after the rotation. This is also the minimum square.", "\n", "hh", "=", "math", ".", "ceil", "(", "(", "math", ".", "sqrt", "(", "h", "*", "h", "+", "w", "*", "w", ")", ")", ")", "\n", "\n", "d", "=", "np", ".", "random", ".", "randint", "(", "self", ".", "d1", ",", "self", ".", "d2", ")", "\n", "# d = self.d", "\n", "\n", "# maybe use ceil? but i guess no big difference", "\n", "self", ".", "l", "=", "math", ".", "ceil", "(", "d", "*", "self", ".", "ratio", ")", "\n", "\n", "mask", "=", "np", ".", "ones", "(", "(", "hh", ",", "hh", ")", ",", "np", ".", "float32", ")", "\n", "st_h", "=", "np", ".", "random", ".", "randint", "(", "d", ")", "\n", "st_w", "=", "np", ".", "random", ".", "randint", "(", "d", ")", "\n", "for", "i", "in", "range", "(", "-", "1", ",", "hh", "//", "d", "+", "1", ")", ":", "\n", "            ", "s", "=", "d", "*", "i", "+", "st_h", "\n", "t", "=", "s", "+", "self", ".", "l", "\n", "s", "=", "max", "(", "min", "(", "s", ",", "hh", ")", ",", "0", ")", "\n", "t", "=", "max", "(", "min", "(", "t", ",", "hh", ")", ",", "0", ")", "\n", "mask", "[", "s", ":", "t", ",", ":", "]", "*=", "0", "\n", "", "for", "i", "in", "range", "(", "-", "1", ",", "hh", "//", "d", "+", "1", ")", ":", "\n", "            ", "s", "=", "d", "*", "i", "+", "st_w", "\n", "t", "=", "s", "+", "self", ".", "l", "\n", "s", "=", "max", "(", "min", "(", "s", ",", "hh", ")", ",", "0", ")", "\n", "t", "=", "max", "(", "min", "(", "t", ",", "hh", ")", ",", "0", ")", "\n", "mask", "[", ":", ",", "s", ":", "t", "]", "*=", "0", "\n", "", "r", "=", "np", ".", "random", ".", "randint", "(", "self", ".", "rotate", ")", "\n", "mask", "=", "Image", ".", "fromarray", "(", "np", ".", "uint8", "(", "mask", ")", ")", "\n", "mask", "=", "mask", ".", "rotate", "(", "r", ")", "\n", "mask", "=", "np", ".", "asarray", "(", "mask", ")", "\n", "mask", "=", "mask", "[", "(", "hh", "-", "h", ")", "//", "2", ":", "(", "hh", "-", "h", ")", "//", "2", "+", "h", ",", "(", "hh", "-", "w", ")", "//", "2", ":", "(", "hh", "-", "w", ")", "//", "2", "+", "w", "]", "\n", "\n", "mask", "=", "torch", ".", "from_numpy", "(", "mask", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "if", "self", ".", "mode", "==", "1", ":", "\n", "            ", "mask", "=", "1", "-", "mask", "\n", "\n", "", "mask", "=", "mask", ".", "expand_as", "(", "img", ")", "\n", "img", "=", "img", "*", "mask", "\n", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.arch.grid.GridMask.__init__": [[78, 86], ["torch.Module.__init__", "grid.Grid"], "methods", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.bit_pytorch.lbtoolbox.Chrono.__init__"], ["    ", "def", "__init__", "(", "self", ",", "d1", "=", "96", ",", "d2", "=", "224", ",", "rotate", "=", "360", ",", "ratio", "=", "0.6", ",", "\n", "mode", "=", "1", ",", "prob", "=", "0.8", ")", ":", "\n", "        ", "super", "(", "GridMask", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "rotate", "=", "rotate", "\n", "self", ".", "ratio", "=", "ratio", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "st_prob", "=", "prob", "\n", "self", ".", "grid", "=", "Grid", "(", "d1", ",", "d2", ",", "rotate", ",", "ratio", ",", "mode", ",", "prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.arch.grid.GridMask.set_prob": [[87, 89], ["grid.GridMask.grid.set_prob"], "methods", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.arch.grid.GridMask.set_prob"], ["", "def", "set_prob", "(", "self", ",", "epoch", ",", "max_epoch", ")", ":", "\n", "        ", "self", ".", "grid", ".", "set_prob", "(", "epoch", ",", "max_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.arch.grid.GridMask.forward": [[90, 99], ["x.size", "range", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view.append", "torch.cat().view.append", "grid.GridMask.grid", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "not", "self", ".", "training", ":", "\n", "            ", "return", "x", "\n", "", "n", ",", "c", ",", "h", ",", "w", "=", "x", ".", "size", "(", ")", "\n", "y", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "            ", "y", ".", "append", "(", "self", ".", "grid", "(", "x", "[", "i", "]", ")", ")", "\n", "", "y", "=", "torch", ".", "cat", "(", "y", ")", ".", "view", "(", "n", ",", "c", ",", "h", ",", "w", ")", "\n", "return", "y", "", "", "", ""]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.arch.utils.Timer.__init__": [[52, 55], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "remove_start_msg", "=", "True", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "remove_start_msg", "=", "remove_start_msg", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.arch.utils.Timer.__enter__": [[56, 59], ["time.time", "print"], "methods", ["None"], ["", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "self", ".", "start_time", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "'Run \"%s\".........'", "%", "self", ".", "name", ",", "end", "=", "'\\r'", "if", "self", ".", "remove_start_msg", "else", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.arch.utils.Timer.__exit__": [[60, 65], ["float", "print", "time.time"], "methods", ["None"], ["", "def", "__exit__", "(", "self", ",", "exc_type", ",", "exc_val", ",", "exc_tb", ")", ":", "\n", "        ", "time_diff", "=", "float", "(", "time", ".", "time", "(", ")", "-", "self", ".", "start_time", ")", "\n", "time_str", "=", "'{:.1f}s'", ".", "format", "(", "time_diff", ")", "if", "time_diff", ">=", "1", "else", "'{:.0f}ms'", ".", "format", "(", "time_diff", "*", "1000", ")", "\n", "\n", "print", "(", "'Finish \"{}\" in {}'", ".", "format", "(", "self", ".", "name", ",", "time_str", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.arch.utils.DotDict.__init__": [[112, 117], ["dict.__init__", "utils.DotDict.items", "isinstance", "utils.DotDict", "isinstance"], "methods", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.bit_pytorch.lbtoolbox.Chrono.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "for", "k", ",", "v", "in", "self", ".", "items", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "v", ",", "dict", ")", "and", "not", "isinstance", "(", "v", ",", "DotDict", ")", ":", "\n", "                ", "self", "[", "k", "]", "=", "DotDict", "(", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.arch.utils.DotDict.__deepcopy__": [[118, 120], ["utils.DotDict", "copy.deepcopy", "dict"], "methods", ["None"], ["", "", "", "def", "__deepcopy__", "(", "self", ",", "memo", ")", ":", "\n", "        ", "return", "DotDict", "(", "copy", ".", "deepcopy", "(", "dict", "(", "self", ")", ",", "memo", "=", "memo", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.arch.utils.output_csv": [[8, 49], ["the_path.endswith", "os.path.exists", "open", "list", "delimiter.join", "print", "data_dict.keys", "print", "open().readline().strip", "data_dict.get", "vals.append", "delimiter.join", "str", "open().readline().strip.split", "isinstance", "val.item.item", "str", "open().readline", "len", "print", "len", "print", "delimiter.join", "print", "open", "str", "str", "str"], "function", ["None"], ["def", "output_csv", "(", "the_path", ",", "data_dict", ",", "order", "=", "None", ",", "delimiter", "=", "','", ")", ":", "\n", "    ", "if", "the_path", ".", "endswith", "(", "'.tsv'", ")", ":", "\n", "        ", "delimiter", "=", "'\\t'", "\n", "\n", "", "is_file_exists", "=", "os", ".", "path", ".", "exists", "(", "the_path", ")", "\n", "with", "open", "(", "the_path", ",", "'a+'", ")", "as", "op", ":", "\n", "        ", "keys", "=", "list", "(", "data_dict", ".", "keys", "(", ")", ")", "\n", "if", "order", "is", "not", "None", ":", "\n", "            ", "keys", "=", "order", "+", "[", "k", "for", "k", "in", "keys", "if", "k", "not", "in", "order", "]", "\n", "\n", "", "col_title", "=", "delimiter", ".", "join", "(", "[", "str", "(", "k", ")", "for", "k", "in", "keys", "]", ")", "\n", "if", "not", "is_file_exists", ":", "\n", "            ", "print", "(", "col_title", ",", "file", "=", "op", ")", "\n", "", "else", ":", "\n", "            ", "old_col_title", "=", "open", "(", "the_path", ",", "'r'", ")", ".", "readline", "(", ")", ".", "strip", "(", ")", "\n", "if", "col_title", "!=", "old_col_title", ":", "\n", "                ", "old_order", "=", "old_col_title", ".", "split", "(", "delimiter", ")", "\n", "\n", "no_key", "=", "[", "k", "for", "k", "in", "old_order", "if", "k", "not", "in", "keys", "]", "\n", "if", "len", "(", "no_key", ")", ">", "0", ":", "\n", "                    ", "print", "(", "'The data_dict does not have the '", "\n", "'following old keys: %s'", "%", "str", "(", "no_key", ")", ")", "\n", "\n", "", "additional_keys", "=", "[", "k", "for", "k", "in", "keys", "if", "k", "not", "in", "old_order", "]", "\n", "if", "len", "(", "additional_keys", ")", ">", "0", ":", "\n", "                    ", "print", "(", "'WARNING! The data_dict has following additional '", "\n", "'keys %s.'", "%", "(", "str", "(", "additional_keys", ")", ")", ")", "\n", "col_title", "=", "delimiter", ".", "join", "(", "[", "\n", "str", "(", "k", ")", "for", "k", "in", "old_order", "+", "additional_keys", "]", ")", "\n", "print", "(", "col_title", ",", "file", "=", "op", ")", "\n", "\n", "", "keys", "=", "old_order", "+", "additional_keys", "\n", "\n", "", "", "vals", "=", "[", "]", "\n", "for", "k", "in", "keys", ":", "\n", "            ", "val", "=", "data_dict", ".", "get", "(", "k", ",", "-", "999", ")", "\n", "if", "isinstance", "(", "val", ",", "torch", ".", "Tensor", ")", "and", "val", ".", "ndim", "==", "0", ":", "\n", "                ", "val", "=", "val", ".", "item", "(", ")", "\n", "", "vals", ".", "append", "(", "str", "(", "val", ")", ")", "\n", "\n", "", "print", "(", "delimiter", ".", "join", "(", "vals", ")", ",", "file", "=", "op", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.arch.utils.generate_mask": [[67, 81], ["imgs.new_zeros", "enumerate", "zip", "zip"], "function", ["None"], ["", "", "def", "generate_mask", "(", "imgs", ",", "xs", ",", "ys", ",", "ws", ",", "hs", ")", ":", "\n", "    ", "''' It sets the bbox region as 1, and the outside as 0 '''", "\n", "mask", "=", "imgs", ".", "new_zeros", "(", "imgs", ".", "shape", "[", "0", "]", ",", "1", ",", "*", "imgs", ".", "shape", "[", "2", ":", "]", ")", "\n", "for", "i", ",", "(", "xs", ",", "ys", ",", "ws", ",", "hs", ")", "in", "enumerate", "(", "zip", "(", "xs", ",", "ys", ",", "ws", ",", "hs", ")", ")", ":", "\n", "        ", "if", "xs", ".", "ndim", "==", "0", ":", "\n", "            ", "if", "xs", ">", "0", ":", "\n", "                ", "mask", "[", "i", ",", "0", ",", "ys", ":", "(", "ys", "+", "hs", ")", ",", "xs", ":", "(", "xs", "+", "ws", ")", "]", "=", "1.", "\n", "", "continue", "\n", "\n", "", "for", "coord_x", ",", "coord_y", ",", "w", ",", "h", "in", "zip", "(", "xs", ",", "ys", ",", "ws", ",", "hs", ")", ":", "\n", "            ", "if", "coord_x", "==", "-", "1", ":", "\n", "                ", "break", "\n", "", "mask", "[", "i", ",", "0", ",", "coord_y", ":", "(", "coord_y", "+", "h", ")", ",", "coord_x", ":", "(", "coord_x", "+", "w", ")", "]", "=", "1.", "\n", "", "", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.arch.utils.make_masks_as_rectangular": [[83, 104], ["isinstance", "str", "str", "masks.clone.clone", "enumerate", "type", "is_mask.all.all", "utils.make_masks_as_rectangular.extract_coordinates_from_mask"], "function", ["None"], ["", "def", "make_masks_as_rectangular", "(", "masks", ")", ":", "\n", "    ", "assert", "isinstance", "(", "masks", ",", "torch", ".", "Tensor", ")", ",", "str", "(", "type", "(", "masks", ")", ")", "\n", "assert", "masks", ".", "ndim", "==", "4", ",", "str", "(", "masks", ".", "ndim", ")", "\n", "\n", "def", "extract_coordinates_from_mask", "(", "is_mask", ")", ":", "\n", "# extract x, y, w, h", "\n", "        ", "is_mask", "=", "is_mask", ".", "all", "(", "dim", "=", "0", ")", "\n", "tmp", "=", "torch", ".", "arange", "(", "is_mask", ".", "shape", "[", "0", "]", ")", "[", "is_mask", ".", "any", "(", "dim", "=", "1", ")", "]", "\n", "if", "len", "(", "tmp", ")", "==", "0", ":", "\n", "            ", "return", "(", "torch", ".", "tensor", "(", "-", "1.", ")", ")", "*", "4", "\n", "", "y", ",", "h", "=", "tmp", "[", "0", "]", ",", "tmp", "[", "-", "1", "]", "-", "tmp", "[", "0", "]", "+", "1", "\n", "tmp", "=", "torch", ".", "arange", "(", "is_mask", ".", "shape", "[", "1", "]", ")", "[", "is_mask", ".", "any", "(", "dim", "=", "0", ")", "]", "\n", "x", ",", "w", "=", "tmp", "[", "0", "]", ",", "tmp", "[", "-", "1", "]", "-", "tmp", "[", "0", "]", "+", "1", "\n", "return", "x", ",", "y", ",", "w", ",", "h", "\n", "\n", "", "masks", "=", "masks", ".", "clone", "(", ")", "\n", "for", "i", ",", "mask", "in", "enumerate", "(", "masks", ")", ":", "\n", "        ", "x", ",", "y", ",", "w", ",", "h", "=", "extract_coordinates_from_mask", "(", "(", "mask", "==", "1", ")", ")", "\n", "if", "x", ">=", "0", ":", "\n", "            ", "masks", "[", "i", ",", ":", ",", "y", ":", "(", "y", "+", "h", ")", ",", "x", ":", "(", "x", "+", "w", ")", "]", "=", "1", "\n", "", "", "return", "masks", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.arch.bit_hyperrule.get_resolution": [[15, 20], ["None"], "function", ["None"], ["def", "get_resolution", "(", "original_resolution", ")", ":", "\n", "  ", "\"\"\"Takes (H,W) and returns (precrop, crop).\"\"\"", "\n", "area", "=", "original_resolution", "[", "0", "]", "*", "original_resolution", "[", "1", "]", "\n", "# return (160, 128) if area < 96*96 else (512, 480)", "\n", "return", "(", "160", ",", "128", ")", "if", "area", "<", "96", "*", "96", "else", "(", "256", ",", "224", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.arch.bit_hyperrule.get_resolution_from_dataset": [[36, 40], ["bit_hyperrule.get_resolution", "ValueError"], "function", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.arch.bit_hyperrule.get_resolution"], ["def", "get_resolution_from_dataset", "(", "dataset", ")", ":", "\n", "  ", "if", "dataset", "not", "in", "known_dataset_sizes", ":", "\n", "    ", "raise", "ValueError", "(", "f\"Unsupported dataset {dataset}. Add your own here :)\"", ")", "\n", "", "return", "get_resolution", "(", "known_dataset_sizes", "[", "dataset", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.arch.bit_hyperrule.get_mixup": [[42, 44], ["None"], "function", ["None"], ["", "def", "get_mixup", "(", "dataset_size", ")", ":", "\n", "  ", "return", "0.0", "if", "dataset_size", "<", "20_000", "else", "0.1", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.arch.bit_hyperrule.get_schedule": [[46, 54], ["None"], "function", ["None"], ["", "def", "get_schedule", "(", "dataset_size", ")", ":", "\n", "# return [5, 30, 60, 90, 10_0]", "\n", "# if dataset_size < 20_000:", "\n", "#   return [100, 200, 300, 400, 500]", "\n", "  ", "if", "dataset_size", "<", "500_000", ":", "\n", "    ", "return", "[", "500", ",", "3000", ",", "6000", ",", "9000", ",", "10_000", "]", "\n", "", "else", ":", "\n", "    ", "return", "[", "500", ",", "6000", ",", "12_000", ",", "18_000", ",", "20_000", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.arch.bit_hyperrule.get_lr": [[56, 75], ["bit_hyperrule.get_schedule"], "function", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.arch.bit_hyperrule.get_schedule"], ["", "", "def", "get_lr", "(", "step", ",", "dataset_size", "=", "None", ",", "base_lr", "=", "0.003", ",", "supports", "=", "None", ")", ":", "\n", "  ", "\"\"\"Returns learning-rate for `step` or None at the end.\"\"\"", "\n", "if", "supports", "is", "None", ":", "\n", "    ", "supports", "=", "get_schedule", "(", "dataset_size", ")", "\n", "# Linear warmupm", "\n", "", "if", "step", "<", "supports", "[", "0", "]", ":", "\n", "    ", "lr", "=", "base_lr", "*", "(", "step", "+", "1", ")", "/", "supports", "[", "0", "]", "\n", "# print(f\"Return lr {lr} in step {step}\")", "\n", "return", "lr", "\n", "# End of training", "\n", "", "elif", "step", ">", "supports", "[", "-", "1", "]", ":", "\n", "    ", "return", "None", "\n", "# Staircase decays by factor of 10", "\n", "", "else", ":", "\n", "    ", "for", "s", "in", "supports", "[", "1", ":", "]", ":", "\n", "      ", "if", "s", "<", "step", ":", "\n", "        ", "base_lr", "/=", "10", "\n", "# print(f\"Return lr {base_lr} in step {step}\")", "\n", "", "", "return", "base_lr", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.lightning.base.BaseLightningModel.__init__": [[29, 67], ["pytorch_lightning.core.LightningModule.__init__", "isinstance", "base.BaseLightningModel.hparams.cf.startswith", "bit_common.setup_logger", "base.BaseLightningModel.init_setup", "base.BaseLightningModel.get_inpainting_model", "base.BaseLightningModel.get_inpainting_model", "utils.DotDict", "grid.GridMask"], "methods", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.bit_pytorch.lbtoolbox.Chrono.__init__", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.arch.bit_common.setup_logger", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.lightning.cct.CCTLightningModel.init_setup", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.lightning.cct.CCTLightningModel.get_inpainting_model", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.lightning.cct.CCTLightningModel.get_inpainting_model"], ["    ", "def", "__init__", "(", "self", ",", "hparams", ")", ":", "\n", "        ", "\"\"\"\n        Training imagenet models by fintuning from Big-Transfer models\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "isinstance", "(", "hparams", ",", "dict", ")", ":", "# Fix the bug in pl in reloading", "\n", "            ", "hparams", "=", "DotDict", "(", "hparams", ")", "\n", "", "self", ".", "hparams", "=", "hparams", "\n", "\n", "# Backward compatability", "\n", "if", "'cf'", "not", "in", "self", ".", "hparams", ":", "\n", "            ", "self", ".", "hparams", ".", "cf", "=", "'logp'", "\n", "", "if", "'result_dir'", "not", "in", "self", ".", "hparams", ":", "\n", "            ", "self", ".", "hparams", ".", "result_dir", "=", "'./results/'", "\n", "", "if", "'mixup'", "not", "in", "self", ".", "hparams", ":", "\n", "            ", "self", ".", "hparams", ".", "mixup", "=", "0.", "\n", "", "if", "'eps_label_smoothing'", "not", "in", "self", ".", "hparams", ":", "\n", "            ", "self", ".", "hparams", ".", "eps_label_smoothing", "=", "0.", "\n", "", "if", "'grid'", "not", "in", "self", ".", "hparams", ":", "\n", "            ", "self", ".", "hparams", ".", "grid", "=", "0", "\n", "\n", "", "if", "self", ".", "hparams", ".", "grid", ">", "0", ":", "\n", "# I set the default parameter same as the original repo", "\n", "# for ImageNet experiment", "\n", "            ", "self", ".", "grid_mask", "=", "GridMask", "(", ")", "\n", "", "if", "self", ".", "hparams", ".", "cf", ".", "startswith", "(", "'channels'", ")", ":", "\n", "            ", "assert", "self", ".", "hparams", ".", "inpaint", "!=", "'none'", "\n", "\n", "", "self", ".", "my_logger", "=", "bit_common", ".", "setup_logger", "(", "self", ".", "hparams", ")", "\n", "self", ".", "train_loader", "=", "None", "\n", "self", ".", "valid_loaders", "=", "None", "\n", "self", ".", "test_loaders", "=", "None", "\n", "self", ".", "stage", "=", "'train'", "# Record it's now train/val/test", "\n", "\n", "self", ".", "init_setup", "(", ")", "\n", "\n", "self", ".", "inpaint", "=", "self", ".", "get_inpainting_model", "(", "self", ".", "hparams", ".", "inpaint", ")", "\n", "self", ".", "f_inpaint", "=", "self", ".", "get_inpainting_model", "(", "self", ".", "hparams", ".", "f_inpaint", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.lightning.base.BaseLightningModel.forward": [[68, 78], ["base.BaseLightningModel.model", "base.BaseLightningModel.grid_mask", "base.BaseLightningModel.hparams.cf.startswith", "int"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "return_cf_channels", "=", "False", ")", ":", "\n", "        ", "if", "self", ".", "hparams", ".", "grid", ">", "0", ":", "\n", "            ", "x", "=", "self", ".", "grid_mask", "(", "x", ")", "\n", "\n", "", "logits", "=", "self", ".", "model", "(", "x", ")", "\n", "if", "self", ".", "hparams", ".", "cf", ".", "startswith", "(", "'channels'", ")", "and", "(", "not", "return_cf_channels", ")", ":", "\n", "# In validation time, ignore backgnd logits", "\n", "            ", "return", "logits", "[", ":", ",", ":", "int", "(", "logits", ".", "shape", "[", "1", "]", "/", "2", ")", "]", "\n", "\n", "", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.lightning.base.BaseLightningModel.training_step": [[79, 201], ["isinstance", "base.BaseLightningModel.counterfact_cri", "collections.OrderedDict", "base.BaseLightningModel.mixup_training_step", "base.BaseLightningModel.label_smooting_training_step", "len", "base.BaseLightningModel.", "torch.cat.new_tensor", "torch.cat.new_tensor", "torch.cat.new_tensor", "torch.cat.new_tensor", "torch.cat.new_tensor", "torch.cat.new_tensor", "torch.cat.new_tensor", "eval", "eval.", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "c_cf.detach", "torch.cat.new_tensor.detach", "utils.generate_mask", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "has_bbox.any.any.any", "base.BaseLightningModel.f_inpaint", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "base.BaseLightningModel.hparams.get", "torch.cat.new_tensor", "torch.cat.new_tensor", "torch.cat.new_tensor", "torch.cat.new_tensor", "torch.cat.new_tensor", "torch.cat.new_tensor", "torch.cat.new_tensor", "len", "base.BaseLightningModel.", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "RuntimeError", "c.detach", "c_cf.detach", "torch.cat.new_tensor.detach", "s[].new_zeros().bool", "has_bbox.any.any.any", "has_bbox.any.any.sum", "base.BaseLightningModel.inpaint", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "utils.make_masks_as_rectangular", "base.BaseLightningModel.hparams.get", "has_bbox.any.any.any", "torch.cat.new_tensor", "torch.cat.new_tensor", "torch.cat.new_tensor", "torch.cat.new_tensor", "torch.cat.new_tensor", "torch.cat.new_tensor", "torch.cat.new_tensor", "base.BaseLightningModel.my_cosine_similarity", "s[].new_zeros", "base.BaseLightningModel.diff_f1_score", "NotImplementedError", "len", "norm.max", "norm.min", "has_bbox.any.any.sum"], "methods", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.lightning.base.BaseLightningModel.counterfact_cri", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.lightning.base.BaseLightningModel.mixup_training_step", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.lightning.base.BaseLightningModel.label_smooting_training_step", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.CAInpainter.CAInpainter.eval", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.arch.utils.generate_mask", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.arch.utils.make_masks_as_rectangular", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.lightning.base.BaseLightningModel.my_cosine_similarity", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.lightning.base.BaseLightningModel.diff_f1_score"], ["", "def", "training_step", "(", "self", ",", "batch", ",", "batch_idx", ",", "is_training", "=", "True", ")", ":", "\n", "# Baseline training", "\n", "        ", "if", "self", ".", "hparams", ".", "mixup", ">", "0.", ":", "\n", "            ", "return", "self", ".", "mixup_training_step", "(", "batch", ",", "batch_idx", ")", "\n", "", "if", "self", ".", "hparams", ".", "eps_label_smoothing", ">", "0.", ":", "\n", "            ", "return", "self", ".", "label_smooting_training_step", "(", "batch", ",", "batch_idx", ")", "\n", "\n", "", "s", ",", "l", "=", "batch", "\n", "\n", "is_dict", "=", "isinstance", "(", "s", ",", "dict", ")", "\n", "if", "not", "is_dict", ":", "\n", "            ", "x", ",", "y", "=", "s", ",", "l", "\n", "", "else", ":", "\n", "            ", "orig_x_len", "=", "len", "(", "s", "[", "'imgs'", "]", ")", "\n", "is_mask_rect", "=", "True", "\n", "if", "'masks'", "in", "s", ":", "\n", "                ", "if", "s", "[", "'masks'", "]", "is", "None", ":", "# no fg region", "\n", "                    ", "has_bbox", "=", "s", "[", "'imgs'", "]", ".", "new_zeros", "(", "s", "[", "'imgs'", "]", ".", "shape", "[", "0", "]", ")", ".", "bool", "(", ")", "\n", "", "else", ":", "\n", "                    ", "mask", "=", "s", "[", "'masks'", "]", "\n", "has_bbox", "=", "(", "mask", "==", "1", ")", ".", "any", "(", "dim", "=", "3", ")", ".", "any", "(", "dim", "=", "2", ")", ".", "any", "(", "dim", "=", "1", ")", "\n", "is_mask_rect", "=", "False", "\n", "", "", "else", ":", "\n", "                ", "has_bbox", "=", "(", "s", "[", "'xs'", "]", "!=", "-", "1", ")", "\n", "if", "has_bbox", ".", "ndim", "==", "2", ":", "# multiple bboxes", "\n", "                    ", "has_bbox", "=", "has_bbox", ".", "any", "(", "dim", "=", "1", ")", "\n", "\n", "", "mask", "=", "generate_mask", "(", "\n", "s", "[", "'imgs'", "]", ",", "s", "[", "'xs'", "]", ",", "s", "[", "'ys'", "]", ",", "s", "[", "'ws'", "]", ",", "s", "[", "'hs'", "]", ")", "\n", "", "if", "self", ".", "hparams", ".", "inpaint", "==", "'none'", "or", "has_bbox", ".", "sum", "(", ")", "==", "0", ":", "\n", "                ", "x", ",", "y", "=", "s", "[", "'imgs'", "]", ",", "l", "\n", "", "else", ":", "\n", "                ", "if", "'imgs_cf'", "in", "s", ":", "\n", "                    ", "impute_x", "=", "s", "[", "'imgs_cf'", "]", "[", "has_bbox", "]", "\n", "", "else", ":", "\n", "# Transform mask into rectangular to do CF imputation", "\n", "# to avoid shape info still existing in CF images", "\n", "                    ", "mask_cf", "=", "mask", "[", "has_bbox", "]", "\n", "if", "not", "is_mask_rect", ":", "\n", "                        ", "mask_cf", "=", "make_masks_as_rectangular", "(", "mask_cf", ")", "\n", "", "impute_x", "=", "self", ".", "inpaint", "(", "s", "[", "'imgs'", "]", "[", "has_bbox", "]", ",", "1", "-", "mask_cf", ")", "\n", "", "impute_y", "=", "(", "-", "l", "[", "has_bbox", "]", "-", "1", ")", "\n", "\n", "x", "=", "torch", ".", "cat", "(", "[", "s", "[", "'imgs'", "]", ",", "impute_x", "]", ",", "dim", "=", "0", ")", "\n", "# label -1 as negative of class 0, -2 as negative of class 1 etc...", "\n", "y", "=", "torch", ".", "cat", "(", "[", "l", ",", "impute_y", "]", ",", "dim", "=", "0", ")", "\n", "\n", "", "if", "self", ".", "hparams", ".", "f_inpaint", "!=", "'none'", "and", "has_bbox", ".", "any", "(", ")", ":", "\n", "                ", "impute_x", "=", "self", ".", "f_inpaint", "(", "\n", "s", "[", "'imgs'", "]", "[", "has_bbox", "]", ",", "mask", "[", "has_bbox", "]", ",", "l", "[", "has_bbox", "]", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "impute_x", "]", ",", "dim", "=", "0", ")", "\n", "y", "=", "torch", ".", "cat", "(", "[", "y", ",", "l", "[", "has_bbox", "]", "]", ",", "dim", "=", "0", ")", "\n", "\n", "", "", "if", "not", "is_dict", "or", "self", ".", "hparams", ".", "get", "(", "'reg'", ",", "'none'", ")", "==", "'none'", "or", "(", "is_dict", "and", "(", "~", "has_bbox", ")", ".", "all", "(", ")", ")", ":", "\n", "            ", "logits", "=", "self", "(", "x", ",", "return_cf_channels", "=", "True", ")", "\n", "reg_loss", "=", "logits", ".", "new_tensor", "(", "0.", ")", "\n", "", "else", ":", "\n", "            ", "x_orig", ",", "y_orig", "=", "x", "[", ":", "orig_x_len", "]", ",", "y", "[", ":", "orig_x_len", "]", "\n", "saliency_fn", "=", "eval", "(", "f\"get_{self.hparams.get('reg_grad', 'grad_y')}\"", ")", "\n", "the_grad", ",", "logits", "=", "saliency_fn", "(", "x_orig", ",", "y_orig", ",", "self", ",", "\n", "is_training", "=", "is_training", ")", "\n", "if", "torch", ".", "all", "(", "the_grad", "==", "0.", ")", ":", "\n", "                ", "reg_loss", "=", "logits", ".", "new_tensor", "(", "0.", ")", "\n", "", "elif", "self", ".", "hparams", ".", "reg", "==", "'gs'", ":", "\n", "                ", "assert", "is_dict", "and", "self", ".", "hparams", ".", "inpaint", "!=", "'none'", "\n", "if", "not", "has_bbox", ".", "any", "(", ")", ":", "\n", "                    ", "reg_loss", "=", "logits", ".", "new_tensor", "(", "0.", ")", "\n", "", "else", ":", "\n", "                    ", "x_orig", ",", "x_cf", "=", "x", "[", ":", "orig_x_len", "]", ",", "x", "[", "orig_x_len", ":", "(", "orig_x_len", "+", "has_bbox", ".", "sum", "(", ")", ")", "]", "\n", "dist", "=", "x_orig", "[", "has_bbox", "]", "-", "x_cf", "\n", "cos_sim", "=", "self", ".", "my_cosine_similarity", "(", "the_grad", ",", "dist", ")", "\n", "\n", "reg_loss", "=", "(", "1.", "-", "cos_sim", ")", ".", "mean", "(", ")", ".", "mul_", "(", "self", ".", "hparams", ".", "reg_coeff", ")", "\n", "", "", "elif", "self", ".", "hparams", ".", "reg", "==", "'bbox_o'", ":", "\n", "                ", "reg_loss", "=", "(", "(", "the_grad", "[", "has_bbox", "]", "*", "(", "1", "-", "mask", "[", "has_bbox", "]", ")", ")", "**", "2", ")", ".", "mean", "(", ")", ".", "mul_", "(", "self", ".", "hparams", ".", "reg_coeff", ")", "\n", "", "elif", "self", ".", "hparams", ".", "reg", "==", "'bbox_f1'", ":", "\n", "                ", "norm", "=", "(", "the_grad", "[", "has_bbox", "]", "**", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "norm", "=", "(", "norm", "-", "norm", ".", "min", "(", ")", ")", "/", "norm", ".", "max", "(", ")", "\n", "gnd_truth", "=", "mask", "[", "has_bbox", "]", "\n", "\n", "f1", "=", "self", ".", "diff_f1_score", "(", "norm", ",", "gnd_truth", ")", "\n", "# (1 - F1) as the loss", "\n", "reg_loss", "=", "(", "1.", "-", "f1", ")", ".", "mul_", "(", "self", ".", "hparams", ".", "reg_coeff", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", "self", ".", "hparams", ".", "reg", ")", "\n", "\n", "# Doing annealing for reg loss", "\n", "", "if", "self", ".", "hparams", ".", "reg_anneal", ">", "0.", ":", "\n", "                ", "anneal", "=", "self", ".", "global_step", "/", "(", "self", ".", "hparams", ".", "max_epochs", "*", "len", "(", "self", ".", "train_loader", ")", "\n", "*", "self", ".", "hparams", ".", "reg_anneal", ")", "\n", "reg_loss", "*=", "anneal", "\n", "\n", "", "if", "len", "(", "x", ")", ">", "orig_x_len", ":", "# Other f or cf images", "\n", "                ", "cf_logits", "=", "self", "(", "x", "[", "orig_x_len", ":", "]", ",", "return_cf_channels", "=", "True", ")", "\n", "logits", "=", "torch", ".", "cat", "(", "[", "logits", ",", "cf_logits", "]", ",", "dim", "=", "0", ")", "\n", "\n", "", "", "c", ",", "c_cf", "=", "self", ".", "counterfact_cri", "(", "logits", ",", "y", ")", "\n", "c_cf", "*=", "self", ".", "hparams", ".", "cf_coeff", "\n", "\n", "# Check NaN", "\n", "for", "name", ",", "metric", "in", "[", "\n", "(", "'train_loss'", ",", "c", ")", ",", "\n", "(", "'cf_loss'", ",", "c_cf", ")", ",", "\n", "(", "'reg_loss'", ",", "reg_loss", ")", ",", "\n", "]", ":", "\n", "            ", "if", "torch", ".", "isnan", "(", "metric", ")", ".", "all", "(", ")", ":", "\n", "                ", "raise", "RuntimeError", "(", "f'metric {name} is Nan'", ")", "\n", "\n", "", "", "tqdm_dict", "=", "{", "'train_loss'", ":", "c", ",", "\n", "'cf_loss'", ":", "c_cf", ".", "detach", "(", ")", ",", "\n", "'reg_loss'", ":", "reg_loss", ".", "detach", "(", ")", "}", "\n", "output", "=", "OrderedDict", "(", "{", "\n", "'loss'", ":", "c", "+", "c_cf", "+", "reg_loss", ",", "\n", "'train_loss'", ":", "c", ".", "detach", "(", ")", ",", "\n", "'cf_loss'", ":", "c_cf", ".", "detach", "(", ")", ",", "\n", "'reg_loss'", ":", "reg_loss", ".", "detach", "(", ")", ",", "\n", "'progress_bar'", ":", "tqdm_dict", ",", "\n", "'log'", ":", "tqdm_dict", ",", "\n", "}", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.lightning.base.BaseLightningModel.mixup_training_step": [[202, 226], ["isinstance", "numpy.random.beta", "base.BaseLightningModel.mixup_data", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "base.BaseLightningModel.", "base.BaseLightningModel.mixup_criterion", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "collections.OrderedDict", "RuntimeError", "base.BaseLightningModel.detach", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "base.BaseLightningModel.detach"], "methods", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.lightning.base.BaseLightningModel.mixup_data", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.lightning.base.BaseLightningModel.mixup_criterion"], ["", "def", "mixup_training_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "        ", "x", ",", "y", "=", "batch", "\n", "if", "isinstance", "(", "x", ",", "dict", ")", ":", "\n", "            ", "x", "=", "x", "[", "'imgs'", "]", "\n", "\n", "", "mixup_l", "=", "np", ".", "random", ".", "beta", "(", "self", ".", "hparams", ".", "mixup", ",", "self", ".", "hparams", ".", "mixup", ")", "\n", "x", ",", "y_a", ",", "y_b", "=", "self", ".", "mixup_data", "(", "x", ",", "y", ",", "mixup_l", ")", "\n", "\n", "criteria", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", "reduction", "=", "'mean'", ")", "\n", "logits", "=", "self", "(", "x", ")", "\n", "c", "=", "self", ".", "mixup_criterion", "(", "criteria", ",", "logits", ",", "y_a", ",", "y_b", ",", "mixup_l", ")", "\n", "\n", "# Check NaN", "\n", "if", "torch", ".", "isnan", "(", "c", ")", ".", "all", "(", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "f'metric train_loss is Nan'", ")", "\n", "\n", "", "tqdm_dict", "=", "{", "'train_loss'", ":", "c", ".", "detach", "(", ")", "}", "\n", "output", "=", "OrderedDict", "(", "{", "\n", "'loss'", ":", "c", ",", "\n", "'train_loss'", ":", "c", ".", "detach", "(", ")", ",", "\n", "'progress_bar'", ":", "tqdm_dict", ",", "\n", "'log'", ":", "tqdm_dict", ",", "\n", "}", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.lightning.base.BaseLightningModel.label_smooting_training_step": [[227, 249], ["isinstance", "label_smoothing.LabelSmoothingCrossEntropy", "base.BaseLightningModel.", "label_smoothing.LabelSmoothingCrossEntropy.", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "torch.isnan().all", "collections.OrderedDict", "RuntimeError", "label_smoothing.LabelSmoothingCrossEntropy.detach", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "label_smoothing.LabelSmoothingCrossEntropy.detach"], "methods", ["None"], ["", "def", "label_smooting_training_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "        ", "x", ",", "y", "=", "batch", "\n", "if", "isinstance", "(", "x", ",", "dict", ")", ":", "\n", "            ", "x", "=", "x", "[", "'imgs'", "]", "\n", "\n", "", "criteria", "=", "LabelSmoothingCrossEntropy", "(", "\n", "epsilon", "=", "self", ".", "hparams", ".", "eps_label_smoothing", ")", "\n", "\n", "logits", "=", "self", "(", "x", ")", "\n", "c", "=", "criteria", "(", "logits", ",", "y", ")", "\n", "\n", "if", "torch", ".", "isnan", "(", "c", ")", ".", "all", "(", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "f'metric train_loss is Nan'", ")", "\n", "\n", "", "tqdm_dict", "=", "{", "'train_loss'", ":", "c", ".", "detach", "(", ")", "}", "\n", "output", "=", "OrderedDict", "(", "{", "\n", "'loss'", ":", "c", ",", "\n", "'train_loss'", ":", "c", ".", "detach", "(", ")", ",", "\n", "'progress_bar'", ":", "tqdm_dict", ",", "\n", "'log'", ":", "tqdm_dict", ",", "\n", "}", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.lightning.base.BaseLightningModel.validation_step": [[250, 263], ["isinstance", "base.BaseLightningModel.", "collections.OrderedDict"], "methods", ["None"], ["", "def", "validation_step", "(", "self", ",", "batch", ",", "batch_idx", ",", "dataloader_idx", "=", "0", ")", ":", "\n", "        ", "x", ",", "y", "=", "batch", "\n", "if", "isinstance", "(", "x", ",", "dict", ")", ":", "\n", "            ", "x", "=", "x", "[", "'imgs'", "]", "\n", "\n", "", "logit", "=", "self", "(", "x", ")", "\n", "prefix", "=", "self", ".", "val_sets_names", "[", "dataloader_idx", "]", "\n", "\n", "output", "=", "OrderedDict", "(", "{", "\n", "f'{prefix}_logit'", ":", "logit", ",", "\n", "f'{prefix}_y'", ":", "y", ",", "\n", "}", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.lightning.base.BaseLightningModel.validation_epoch_end": [[264, 350], ["isinstance", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cross_entropy().item", "torch.cross_entropy().item", "torch.cross_entropy().item", "torch.cross_entropy().item", "torch.cross_entropy().item", "torch.cross_entropy().item", "torch.cross_entropy().item", "base.BaseLightningModel.accuracy", "base.BaseLightningModel.validation_epoch_end.cal_metrics"], "methods", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.lightning.base.BaseLightningModel.accuracy"], ["", "def", "validation_epoch_end", "(", "self", ",", "outputs", ")", ":", "\n", "        ", "tqdm_dict", "=", "{", "}", "\n", "calibration_dict", "=", "{", "}", "\n", "\n", "def", "cal_metrics", "(", "output", ",", "prefix", "=", "'val'", ")", ":", "\n", "            ", "logit", "=", "torch", ".", "cat", "(", "[", "o", "[", "f'{prefix}_logit'", "]", "for", "o", "in", "output", "]", ")", "\n", "y", "=", "torch", ".", "cat", "(", "[", "o", "[", "f'{prefix}_y'", "]", "for", "o", "in", "output", "]", ")", "\n", "tqdm_dict", "[", "f'{prefix}_loss'", "]", "=", "F", ".", "cross_entropy", "(", "logit", ",", "y", ",", "reduction", "=", "'mean'", ")", ".", "item", "(", ")", "\n", "tqdm_dict", "[", "f'{prefix}_acc1'", "]", ",", "=", "self", ".", "accuracy", "(", "logit", ",", "y", ",", "topk", "=", "(", "1", ",", ")", ")", "\n", "\n", "assert", "logit", ".", "shape", "[", "1", "]", ">", "1", ",", "'Logits shape is wierd: '", "+", "str", "(", "logit", ".", "shape", ")", "\n", "if", "logit", ".", "shape", "[", "1", "]", "==", "2", ":", "# binary classification", "\n", "                ", "prob", "=", "F", ".", "softmax", "(", "logit", ",", "dim", "=", "1", ")", "\n", "y", ",", "logit", ",", "prob", "=", "y", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "(", "logit", "[", ":", ",", "1", "]", "-", "logit", "[", ":", ",", "0", "]", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "prob", "[", ":", ",", "1", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "try", ":", "\n", "                    ", "tqdm_dict", "[", "f'{prefix}_auc'", "]", "=", "roc_auc_score", "(", "\n", "y", ",", "logit", ")", "*", "100", "\n", "tqdm_dict", "[", "f'{prefix}_aupr'", "]", "=", "average_precision_score", "(", "\n", "y", ",", "logit", ")", "*", "100", "\n", "fraction_of_positives", ",", "mean_predicted_value", "=", "calibration_curve", "(", "y", ",", "prob", ",", "n_bins", "=", "10", ")", "\n", "tqdm_dict", "[", "f'{prefix}_ece'", "]", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "\n", "fraction_of_positives", "-", "mean_predicted_value", ")", ")", "*", "100", "\n", "hist", ",", "bins", "=", "np", ".", "histogram", "(", "prob", ",", "bins", "=", "10", ")", "\n", "calibration_dict", "[", "f'{prefix}_frp'", "]", "=", "fraction_of_positives", ".", "tolist", "(", ")", "\n", "calibration_dict", "[", "f'{prefix}_mpv'", "]", "=", "mean_predicted_value", ".", "tolist", "(", ")", "\n", "calibration_dict", "[", "f'{prefix}_hist'", "]", "=", "hist", ".", "tolist", "(", ")", "\n", "calibration_dict", "[", "f'{prefix}_bins'", "]", "=", "bins", ".", "tolist", "(", ")", "\n", "", "except", "ValueError", "as", "e", ":", "# only 1 class is present. Happens in sanity check", "\n", "                    ", "self", ".", "my_logger", ".", "warn", "(", "'Only 1 class is present!\\n'", "+", "str", "(", "e", ")", ")", "\n", "tqdm_dict", "[", "f'{prefix}_auc'", "]", "=", "-", "1.", "\n", "tqdm_dict", "[", "f'{prefix}_aupr'", "]", "=", "-", "1.", "\n", "tqdm_dict", "[", "f'{prefix}_ece'", "]", "=", "-", "1.", "\n", "", "", "else", ":", "\n", "# Calculate the average auc, average aupr, and average F1", "\n", "                ", "_", ",", "pred", "=", "torch", ".", "max", "(", "logit", ",", "dim", "=", "1", ")", "\n", "y_onehot", "=", "torch", ".", "nn", ".", "functional", ".", "one_hot", "(", "y", ",", "num_classes", "=", "logit", ".", "shape", "[", "1", "]", ")", "\n", "\n", "# In CCT cis_val and trans_test, some classes do not exist", "\n", "non_zero_cls", "=", "(", "y_onehot", ".", "sum", "(", "dim", "=", "0", ")", ">", "0", ")", "\n", "if", "not", "non_zero_cls", ".", "all", "(", ")", ":", "\n", "                    ", "y_onehot", "=", "y_onehot", "[", ":", ",", "non_zero_cls", "]", "\n", "logit", "=", "logit", "[", ":", ",", "non_zero_cls", "]", "\n", "\n", "", "prob", "=", "F", ".", "softmax", "(", "logit", ",", "dim", "=", "1", ")", "\n", "y", ",", "y_onehot", ",", "logit", ",", "pred", "=", "y", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "y_onehot", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "logit", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "pred", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "all_y", "=", "y_onehot", ".", "reshape", "(", "-", "1", ")", "\n", "all_prob", "=", "prob", ".", "reshape", "(", "-", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "fraction_of_positives", ",", "mean_predicted_value", "=", "calibration_curve", "(", "all_y", ",", "all_prob", ",", "n_bins", "=", "10", ")", "\n", "ece", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "fraction_of_positives", "-", "mean_predicted_value", ")", ")", "\n", "\n", "tqdm_dict", "[", "f'{prefix}_ece'", "]", "=", "ece", "*", "100", "\n", "try", ":", "\n", "                    ", "tqdm_dict", "[", "f'{prefix}_auc'", "]", "=", "roc_auc_score", "(", "\n", "y_onehot", ",", "logit", ",", "multi_class", "=", "'ovr'", ")", "*", "100", "\n", "tqdm_dict", "[", "f'{prefix}_aupr'", "]", "=", "average_precision_score", "(", "\n", "y_onehot", ",", "logit", ")", "*", "100", "\n", "", "except", "ValueError", "as", "e", ":", "# only 1 class is present. Happens in sanity check", "\n", "                    ", "self", ".", "my_logger", ".", "warn", "(", "'Only 1 class is present!\\n'", "+", "str", "(", "e", ")", ")", "\n", "tqdm_dict", "[", "f'{prefix}_auc'", "]", "=", "-", "1.", "\n", "tqdm_dict", "[", "f'{prefix}_aupr'", "]", "=", "-", "1.", "\n", "\n", "", "hist", ",", "bins", "=", "np", ".", "histogram", "(", "all_prob", ",", "bins", "=", "10", ")", "\n", "calibration_dict", "[", "f'{prefix}_frp'", "]", "=", "fraction_of_positives", ".", "tolist", "(", ")", "\n", "calibration_dict", "[", "f'{prefix}_mpv'", "]", "=", "mean_predicted_value", ".", "tolist", "(", ")", "\n", "calibration_dict", "[", "f'{prefix}_hist'", "]", "=", "hist", ".", "tolist", "(", ")", "\n", "calibration_dict", "[", "f'{prefix}_bins'", "]", "=", "bins", ".", "tolist", "(", ")", "\n", "\n", "", "", "if", "isinstance", "(", "outputs", "[", "0", "]", ",", "dict", ")", ":", "# Only one val loader", "\n", "            ", "cal_metrics", "(", "outputs", ",", "self", ".", "val_sets_names", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "            ", "for", "i", ",", "n", "in", "enumerate", "(", "self", ".", "val_sets_names", ")", ":", "\n", "                ", "cal_metrics", "(", "outputs", "[", "i", "]", ",", "n", ")", "\n", "\n", "", "", "result", "=", "{", "\n", "'progress_bar'", ":", "tqdm_dict", ",", "'log'", ":", "tqdm_dict", ",", "\n", "'val_loss'", ":", "tqdm_dict", "[", "\"val_loss\"", "]", ",", "\n", "**", "calibration_dict", "\n", "}", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.lightning.base.BaseLightningModel.my_cosine_similarity": [[351, 361], ["list", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "t1.new_tensor", "range"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "my_cosine_similarity", "(", "t1", ",", "t2", ",", "eps", "=", "1e-8", ")", ":", "\n", "        ", "if", "torch", ".", "all", "(", "t1", "==", "0.", ")", "or", "torch", ".", "all", "(", "t2", "==", "0.", ")", ":", "\n", "            ", "return", "t1", ".", "new_tensor", "(", "0.", ")", "\n", "", "other_dim", "=", "list", "(", "range", "(", "1", ",", "t1", ".", "ndim", ")", ")", "\n", "iprod", "=", "(", "t1", "*", "t2", ")", ".", "sum", "(", "dim", "=", "other_dim", ")", "\n", "t1_norm", "=", "(", "t1", "*", "t1", ")", ".", "sum", "(", "dim", "=", "other_dim", ")", ".", "sqrt", "(", ")", "\n", "t2_norm", "=", "(", "t2", "*", "t2", ")", ".", "sum", "(", "dim", "=", "other_dim", ")", ".", "sqrt", "(", ")", "\n", "cos_sim", "=", "iprod", "/", "(", "t1_norm", "*", "t2_norm", "+", "eps", ")", "\n", "return", "cos_sim", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.lightning.base.BaseLightningModel.diff_f1_score": [[362, 370], ["pred.mul().sum", "pred.mul().sum", "pred.mul", "list", "pred.mul", "list", "list", "range", "range", "range"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "diff_f1_score", "(", "pred", ",", "gnd_truth", ")", ":", "\n", "        ", "TP", "=", "pred", ".", "mul", "(", "gnd_truth", ")", ".", "sum", "(", "dim", "=", "list", "(", "range", "(", "1", ",", "pred", ".", "ndim", ")", ")", ")", "\n", "FP", "=", "pred", ".", "mul", "(", "1.", "-", "gnd_truth", ")", ".", "sum", "(", "dim", "=", "list", "(", "range", "(", "1", ",", "pred", ".", "ndim", ")", ")", ")", "\n", "FN", "=", "(", "1.", "-", "pred", ")", ".", "mul", "(", "gnd_truth", ")", ".", "sum", "(", "dim", "=", "list", "(", "range", "(", "1", ",", "pred", ".", "ndim", ")", ")", ")", "\n", "\n", "# (1 - F1) as the loss", "\n", "return", "(", "2", "*", "TP", "/", "(", "2", "*", "TP", "+", "FP", "+", "FN", ")", ")", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.lightning.base.BaseLightningModel.accuracy": [[371, 387], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "max", "target.size", "output.topk", "pred.t.t.t", "pred.t.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "accuracy", "(", "cls", ",", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "        ", "\"\"\"Computes the accuracy over the k top predictions for the specified values of k\"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "                ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.lightning.base.BaseLightningModel.configure_optimizers": [[388, 390], ["NotImplementedError"], "methods", ["None"], ["", "", "def", "configure_optimizers", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.lightning.base.BaseLightningModel.counterfact_cri": [[391, 405], ["logit.new_tensor", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "base.BaseLightningModel.counterfactual_ce_loss", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "base.BaseLightningModel.counterfactual_ce_loss"], "methods", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.lightning.base.BaseLightningModel.counterfactual_ce_loss", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.lightning.base.BaseLightningModel.counterfactual_ce_loss"], ["", "def", "counterfact_cri", "(", "self", ",", "logit", ",", "y", ")", ":", "\n", "        ", "'''\n        :return: (avg normal loss, avg ce_loss)\n        '''", "\n", "zero_tensor", "=", "logit", ".", "new_tensor", "(", "0.", ")", "\n", "if", "torch", ".", "all", "(", "y", ">=", "0", ")", ":", "\n", "            ", "return", "F", ".", "cross_entropy", "(", "logit", ",", "y", ",", "reduction", "=", "'mean'", ")", ",", "zero_tensor", "\n", "", "if", "torch", ".", "all", "(", "y", "<", "0", ")", ":", "\n", "            ", "return", "zero_tensor", ",", "self", ".", "counterfactual_ce_loss", "(", "logit", ",", "y", ",", "reduction", "=", "'mean'", ")", "\n", "\n", "", "loss1", "=", "F", ".", "cross_entropy", "(", "logit", "[", "y", ">=", "0", "]", ",", "y", "[", "y", ">=", "0", "]", ",", "reduction", "=", "'sum'", ")", "\n", "loss2", "=", "self", ".", "counterfactual_ce_loss", "(", "logit", "[", "y", "<", "0", "]", ",", "y", "[", "y", "<", "0", "]", ",", "reduction", "=", "'sum'", ")", "\n", "\n", "return", "loss1", "/", "logit", ".", "shape", "[", "0", "]", ",", "loss2", "/", "logit", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.lightning.base.BaseLightningModel.counterfactual_ce_loss": [[406, 447], ["str", "base.BaseLightningModel.hparams.cf.startswith", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "loss.mean", "loss.sum", "torch.log_softmax().mean", "torch.log_softmax().mean", "torch.log_softmax().mean", "torch.log_softmax().mean", "torch.log_softmax().mean", "torch.log_softmax().mean", "torch.log_softmax().mean", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.ones_like().mul_", "torch.ones_like().mul_", "torch.ones_like().mul_", "torch.ones_like().mul_", "torch.ones_like().mul_", "torch.ones_like().mul_", "torch.ones_like().mul_", "torch.ones_like().mul_", "torch.ones_like().mul_", "torch.ones_like().mul_", "torch.ones_like().mul_", "torch.ones_like().mul_", "torch.ones_like().mul_", "torch.ones_like().mul_", "torch.ones_like().mul_", "torch.ones_like().mul_", "torch.ones_like().mul_", "torch.ones_like().mul_", "torch.ones_like().mul_", "torch.ones_like().mul_", "torch.ones_like().mul_", "torch.ones_like().mul_", "torch.ones_like().mul_", "torch.ones_like().mul_", "torch.ones_like().mul_", "torch.ones_like().mul_", "torch.ones_like().mul_", "torch.ones_like().mul_", "torch.ones_like().mul_", "torch.ones_like().mul_", "torch.ones_like().mul_", "torch.ones_like().mul_", "torch.ones_like().mul_", "torch.ones_like().mul_", "torch.ones_like().mul_", "torch.ones_like().mul_", "torch.ones_like().mul_", "torch.ones_like().mul_", "torch.ones_like().mul_", "torch.ones_like().mul_", "torch.ones_like().mul_", "torch.ones_like().mul_", "torch.ones_like().mul_", "torch.ones_like().mul_", "torch.ones_like().mul_", "torch.ones_like().mul_", "torch.ones_like().mul_", "torch.ones_like().mul_", "torch.ones_like().mul_", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "NotImplementedError", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "str", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "len", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["None"], ["", "def", "counterfactual_ce_loss", "(", "self", ",", "logit", ",", "y", ",", "reduction", "=", "'none'", ")", ":", "\n", "        ", "assert", "(", "y", "<", "0", ")", ".", "all", "(", ")", ",", "str", "(", "y", ")", "\n", "\n", "if", "self", ".", "hparams", ".", "cf", ".", "startswith", "(", "'channels'", ")", ":", "\n", "            ", "new_y", "=", "(", "(", "-", "y", "-", "1", ")", "+", "(", "logit", ".", "shape", "[", "1", "]", "//", "2", ")", ")", "\n", "return", "F", ".", "cross_entropy", "(", "logit", ",", "new_y", ",", "reduction", "=", "reduction", ")", "\n", "\n", "", "cf_y", "=", "-", "(", "y", "+", "1", ")", "\n", "if", "self", ".", "hparams", ".", "cf", "==", "'uni'", ":", "# uniform prob", "\n", "            ", "loss", "=", "-", "F", ".", "log_softmax", "(", "logit", ",", "dim", "=", "1", ")", ".", "mean", "(", "dim", "=", "1", ")", "\n", "", "elif", "self", ".", "hparams", ".", "cf", "==", "'uni_e'", ":", "# uniform prob except the cls", "\n", "            ", "logp", "=", "F", ".", "log_softmax", "(", "logit", ",", "dim", "=", "1", ")", "\n", "weights", "=", "torch", ".", "ones_like", "(", "logp", ")", ".", "mul_", "(", "1.", "/", "(", "\n", "logp", ".", "shape", "[", "1", "]", "-", "1", ")", ")", "\n", "weights", "[", "torch", ".", "arange", "(", "len", "(", "cf_y", ")", ")", ",", "cf_y", "]", "=", "0.", "\n", "loss", "=", "-", "(", "weights", "*", "logp", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "", "elif", "self", ".", "hparams", ".", "cf", "==", "'logp'", ":", "\n", "            ", "if", "logit", ".", "shape", "[", "1", "]", "==", "2", ":", "# 2-cls", "\n", "                ", "return", "F", ".", "cross_entropy", "(", "logit", ",", "1", "-", "cf_y", ",", "reduction", "=", "reduction", ")", "\n", "\n", "# Implement my own logsumexp trick", "\n", "", "m", ",", "_", "=", "torch", ".", "max", "(", "logit", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "exp_logit", "=", "torch", ".", "exp", "(", "logit", "-", "m", ")", "\n", "sum_exp_logit", "=", "torch", ".", "sum", "(", "exp_logit", ",", "dim", "=", "1", ")", "\n", "\n", "eps", "=", "1e-20", "\n", "num", "=", "(", "sum_exp_logit", "-", "exp_logit", "[", "torch", ".", "arange", "(", "exp_logit", ".", "shape", "[", "0", "]", ")", ",", "cf_y", "]", ")", "\n", "num", "=", "torch", ".", "log", "(", "num", "+", "eps", ")", "\n", "denon", "=", "torch", ".", "log", "(", "sum_exp_logit", "+", "eps", ")", "\n", "\n", "# Negative log probability", "\n", "loss", "=", "-", "(", "num", "-", "denon", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "str", "(", "self", ".", "hparams", ".", "cf", ")", ")", "\n", "\n", "", "if", "reduction", "==", "'none'", ":", "\n", "            ", "return", "loss", "\n", "", "if", "reduction", "==", "'mean'", ":", "\n", "            ", "return", "loss", ".", "mean", "(", ")", "\n", "", "if", "reduction", "==", "'sum'", ":", "\n", "            ", "return", "loss", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.lightning.base.BaseLightningModel.train_dataloader": [[448, 452], ["base.BaseLightningModel._setup_loaders"], "methods", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.lightning.base.BaseLightningModel._setup_loaders"], ["", "", "def", "train_dataloader", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "train_loader", "is", "None", ":", "\n", "            ", "self", ".", "_setup_loaders", "(", ")", "\n", "", "return", "self", ".", "train_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.lightning.base.BaseLightningModel.val_dataloader": [[453, 457], ["base.BaseLightningModel._setup_loaders"], "methods", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.lightning.base.BaseLightningModel._setup_loaders"], ["", "def", "val_dataloader", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "valid_loaders", "is", "None", ":", "\n", "            ", "self", ".", "_setup_loaders", "(", ")", "\n", "", "return", "self", ".", "valid_loaders", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.lightning.base.BaseLightningModel.mixup_data": [[458, 466], ["torch.randperm().to", "torch.randperm().to", "torch.randperm().to", "torch.randperm().to", "torch.randperm().to", "torch.randperm().to", "torch.randperm().to", "torch.randperm().to", "torch.randperm().to", "torch.randperm().to", "torch.randperm().to", "torch.randperm().to", "torch.randperm().to", "torch.randperm().to", "torch.randperm().to", "torch.randperm().to", "torch.randperm().to", "torch.randperm().to", "torch.randperm().to", "torch.randperm().to", "torch.randperm().to", "torch.randperm().to", "torch.randperm().to", "torch.randperm().to", "torch.randperm().to", "torch.randperm().to", "torch.randperm().to", "torch.randperm().to", "torch.randperm().to", "torch.randperm().to", "torch.randperm().to", "torch.randperm().to", "torch.randperm().to", "torch.randperm().to", "torch.randperm().to", "torch.randperm().to", "torch.randperm().to", "torch.randperm().to", "torch.randperm().to", "torch.randperm().to", "torch.randperm().to", "torch.randperm().to", "torch.randperm().to", "torch.randperm().to", "torch.randperm().to", "torch.randperm().to", "torch.randperm().to", "torch.randperm().to", "torch.randperm().to", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "mixup_data", "(", "x", ",", "y", ",", "l", ")", ":", "\n", "        ", "\"\"\"Returns mixed inputs, pairs of targets, and lambda\"\"\"", "\n", "indices", "=", "torch", ".", "randperm", "(", "x", ".", "shape", "[", "0", "]", ")", ".", "to", "(", "x", ".", "device", ")", "\n", "\n", "mixed_x", "=", "l", "*", "x", "+", "(", "1", "-", "l", ")", "*", "x", "[", "indices", "]", "\n", "y_a", ",", "y_b", "=", "y", ",", "y", "[", "indices", "]", "\n", "return", "mixed_x", ",", "y_a", ",", "y_b", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.lightning.base.BaseLightningModel.mixup_criterion": [[467, 470], ["criterion", "criterion"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "mixup_criterion", "(", "criterion", ",", "pred", ",", "y_a", ",", "y_b", ",", "l", ")", ":", "\n", "        ", "return", "l", "*", "criterion", "(", "pred", ",", "y_a", ")", "+", "(", "1", "-", "l", ")", "*", "criterion", "(", "pred", ",", "y_b", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.lightning.base.BaseLightningModel._setup_loaders": [[471, 488], ["base.BaseLightningModel._make_train_val_dataset", "base.BaseLightningModel.my_logger.info", "enumerate", "train_set.make_loader", "zip", "base.BaseLightningModel.my_logger.info", "v.make_loader", "len", "len"], "methods", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.lightning.cct.CCTLightningModel._make_train_val_dataset", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.waterbirds_datasets.WaterbirdDataset.make_loader", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.waterbirds_datasets.WaterbirdDataset.make_loader"], ["", "def", "_setup_loaders", "(", "self", ")", ":", "\n", "        ", "train_set", ",", "valid_sets", ",", "val_sets_names", "=", "self", ".", "_make_train_val_dataset", "(", ")", "\n", "self", ".", "my_logger", ".", "info", "(", "f\"Using a training set with {len(train_set)} images.\"", ")", "\n", "for", "idx", ",", "(", "n", ",", "v", ")", "in", "enumerate", "(", "zip", "(", "val_sets_names", ",", "valid_sets", ")", ")", ":", "\n", "            ", "self", ".", "my_logger", ".", "info", "(", "f\"Using a validation set {idx} {n} with {len(v)} images.\"", ")", "\n", "\n", "", "self", ".", "val_sets_names", "=", "val_sets_names", "\n", "\n", "train_bs", "=", "self", ".", "hparams", ".", "batch", "//", "self", ".", "hparams", ".", "batch_split", "\n", "val_bs", "=", "train_bs", "\n", "if", "'val_batch'", "in", "self", ".", "hparams", ":", "\n", "            ", "val_bs", "=", "self", ".", "hparams", ".", "val_batch", "//", "self", ".", "hparams", ".", "batch_split", "\n", "", "self", ".", "train_loader", "=", "train_set", ".", "make_loader", "(", "\n", "train_bs", ",", "shuffle", "=", "True", ",", "workers", "=", "self", ".", "hparams", ".", "workers", ")", "\n", "self", ".", "valid_loaders", "=", "[", "v", ".", "make_loader", "(", "\n", "val_bs", ",", "shuffle", "=", "False", ",", "workers", "=", "self", ".", "hparams", ".", "workers", ")", "\n", "for", "v", "in", "valid_sets", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.lightning.base.BaseLightningModel._make_train_val_dataset": [[489, 491], ["NotImplementedError"], "methods", ["None"], ["", "def", "_make_train_val_dataset", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.lightning.base.BaseLightningModel.sub_dataset": [[492, 518], ["torch.Generator", "torch.Generator", "torch.Generator", "torch.Generator", "torch.Generator", "torch.Generator", "torch.Generator", "torch.Generator", "torch.Generator", "torch.Generator", "torch.Generator", "torch.Generator", "torch.Generator", "torch.Generator", "torch.Generator", "torch.Generator", "torch.Generator", "torch.Generator", "torch.Generator", "torch.Generator", "torch.Generator", "torch.Generator", "torch.Generator", "torch.Generator", "torch.Generator", "torch.Generator", "torch.Generator", "torch.Generator", "torch.Generator", "torch.Generator", "torch.Generator", "torch.Generator", "torch.Generator", "torch.Generator", "torch.Generator", "torch.Generator", "torch.Generator", "torch.Generator", "torch.Generator", "torch.Generator", "torch.Generator", "torch.Generator", "torch.Generator", "torch.Generator", "torch.Generator", "torch.Generator", "torch.Generator", "torch.Generator", "torch.Generator", "torch.Generator.manual_seed", "torch.Generator.manual_seed", "torch.Generator.manual_seed", "torch.Generator.manual_seed", "torch.Generator.manual_seed", "torch.Generator.manual_seed", "torch.Generator.manual_seed", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "data.imagenet_datasets.MySubset", "data.imagenet_datasets.MySubset", "data.imagenet_datasets.MySubset", "data.imagenet_datasets.MySubset", "len", "len", "len", "len"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "sub_dataset", "(", "bbox_dataset", ",", "num_subset", ",", "sec_dataset", "=", "None", ")", ":", "\n", "        ", "if", "sec_dataset", "is", "not", "None", ":", "\n", "            ", "assert", "len", "(", "sec_dataset", ")", "==", "len", "(", "bbox_dataset", ")", "\n", "\n", "", "if", "num_subset", "==", "0", ":", "\n", "            ", "if", "sec_dataset", "is", "None", ":", "\n", "                ", "return", "None", ",", "bbox_dataset", "\n", "", "return", "None", ",", "bbox_dataset", ",", "None", ",", "sec_dataset", "\n", "", "if", "num_subset", ">=", "len", "(", "bbox_dataset", ")", ":", "\n", "            ", "if", "sec_dataset", "is", "None", ":", "\n", "                ", "return", "bbox_dataset", ",", "None", "\n", "", "return", "bbox_dataset", ",", "None", ",", "sec_dataset", ",", "None", "\n", "\n", "", "tmp", "=", "torch", ".", "Generator", "(", ")", "\n", "tmp", ".", "manual_seed", "(", "2020", ")", "\n", "\n", "indices", "=", "torch", ".", "randperm", "(", "len", "(", "bbox_dataset", ")", ",", "generator", "=", "tmp", ")", "\n", "first_dataset", "=", "MySubset", "(", "bbox_dataset", ",", "indices", "=", "indices", "[", ":", "num_subset", "]", ")", "\n", "rest_dataset", "=", "MySubset", "(", "bbox_dataset", ",", "indices", "=", "indices", "[", "num_subset", ":", "]", ")", "\n", "if", "sec_dataset", "is", "None", ":", "\n", "            ", "return", "first_dataset", ",", "rest_dataset", "\n", "\n", "", "fs", "=", "MySubset", "(", "sec_dataset", ",", "indices", "=", "indices", "[", ":", "num_subset", "]", ")", "\n", "rs", "=", "MySubset", "(", "sec_dataset", ",", "indices", "=", "indices", "[", "num_subset", ":", "]", ")", "\n", "return", "first_dataset", ",", "rest_dataset", ",", "fs", ",", "rs", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.lightning.base.BaseLightningModel.get_inpainting_model": [[519, 544], ["inpainting.Baseline.RandomColorWithNoiseInpainter", "inpainting.Baseline.ShuffleInpainter", "inpainting.Baseline.TileInpainter", "inpainting.AdvInpainting.AdvInpainting", "inpainting.Baseline.FactualMixedRandomTileInpainter", "NotImplementedError"], "methods", ["None"], ["", "def", "get_inpainting_model", "(", "self", ",", "inpaint", ")", ":", "\n", "        ", "if", "inpaint", "in", "[", "'none'", "]", ":", "\n", "            ", "inpaint_model", "=", "None", "\n", "", "elif", "inpaint", "==", "'mean'", ":", "\n", "            ", "inpaint_model", "=", "(", "lambda", "x", ",", "mask", ":", "x", "*", "mask", ")", "\n", "", "elif", "inpaint", "==", "'random'", ":", "\n", "            ", "inpaint_model", "=", "RandomColorWithNoiseInpainter", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "\n", "", "elif", "inpaint", "==", "'shuffle'", ":", "\n", "            ", "inpaint_model", "=", "ShuffleInpainter", "(", ")", "\n", "", "elif", "inpaint", "==", "'tile'", ":", "\n", "            ", "inpaint_model", "=", "TileInpainter", "(", ")", "\n", "", "elif", "inpaint", "in", "[", "'pgd'", ",", "'fgsm'", "]", ":", "\n", "            ", "alpha", "=", "self", ".", "hparams", ".", "alpha", "\n", "if", "alpha", "==", "-", "1", ":", "\n", "                ", "alpha", "=", "self", ".", "hparams", ".", "eps", "*", "1.25", "\n", "", "inpaint_model", "=", "AdvInpainting", "(", "\n", "self", ".", "model", ",", "eps", "=", "self", ".", "hparams", ".", "eps", ",", "\n", "alpha", "=", "alpha", ",", "\n", "attack", "=", "inpaint", ")", "\n", "", "elif", "inpaint", "==", "'mrand'", ":", "\n", "            ", "inpaint_model", "=", "FactualMixedRandomTileInpainter", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "f\"Unkown inpaint {inpaint}\"", ")", "\n", "\n", "", "return", "inpaint_model", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.lightning.base.BaseLightningModel.test_dataloader": [[545, 568], ["base.BaseLightningModel._make_test_datasets", "enumerate", "zip", "base.BaseLightningModel.my_logger.info", "v.make_loader", "len"], "methods", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.lightning.base.BaseLightningModel._make_test_datasets", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.waterbirds_datasets.WaterbirdDataset.make_loader"], ["", "def", "test_dataloader", "(", "self", ")", ":", "\n", "        ", "'''\n        This is for OOD detections. The first loader is the normal\n        test set. And the rest of the loaders are from other datasets\n        like Gaussian, Uniform, CCT and Xray.\n\n        Gaussian, Uniform: generate the same number as test sets (45k)\n        CCT: whole dataset like 45k?\n        Xray: 30k?\n        '''", "\n", "if", "self", ".", "test_loaders", "is", "None", ":", "\n", "            ", "test_sets", ",", "test_sets_names", "=", "self", ".", "_make_test_datasets", "(", ")", "\n", "if", "test_sets", "is", "None", ":", "\n", "                ", "return", "None", "\n", "\n", "", "self", ".", "test_sets_names", "=", "test_sets_names", "\n", "for", "idx", ",", "(", "n", ",", "v", ")", "in", "enumerate", "(", "zip", "(", "self", ".", "test_sets_names", ",", "test_sets", ")", ")", ":", "\n", "                ", "self", ".", "my_logger", ".", "info", "(", "f\"Using a test set {idx} {n} with {len(v)} images.\"", ")", "\n", "\n", "", "self", ".", "test_loaders", "=", "[", "v", ".", "make_loader", "(", "\n", "self", ".", "hparams", ".", "val_batch", ",", "shuffle", "=", "False", ",", "workers", "=", "self", ".", "hparams", ".", "workers", ")", "\n", "for", "v", "in", "test_sets", "]", "\n", "", "return", "self", ".", "test_loaders", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.lightning.base.BaseLightningModel.test_step": [[569, 587], ["isinstance", "base.BaseLightningModel.", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "base.BaseLightningModel.hparams.cf.startswith", "prob[].sum", "torch.softmax.max"], "methods", ["None"], ["", "def", "test_step", "(", "self", ",", "batch", ",", "batch_idx", ",", "dataloader_idx", "=", "0", ")", ":", "\n", "        ", "x", ",", "y", "=", "batch", "\n", "if", "isinstance", "(", "x", ",", "dict", ")", ":", "\n", "            ", "x", "=", "x", "[", "'imgs'", "]", "\n", "\n", "", "logits", "=", "self", "(", "x", ",", "return_cf_channels", "=", "True", ")", "\n", "prob", "=", "F", ".", "softmax", "(", "logits", ",", "dim", "=", "1", ")", "\n", "\n", "if", "self", ".", "hparams", ".", "cf", ".", "startswith", "(", "'channels'", ")", ":", "\n", "            ", "anomaly_score", "=", "prob", "[", ":", ",", "(", "prob", ".", "shape", "[", "1", "]", "//", "2", ")", ":", "]", ".", "sum", "(", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "anomaly_score", "=", "1.", "-", "(", "prob", ".", "max", "(", "dim", "=", "1", ")", ".", "values", ")", "\n", "\n", "", "output", "=", "{", "\n", "# Can't return cpu or it will die in multi-gpu settings", "\n", "'anomaly_score'", ":", "anomaly_score", ",", "\n", "}", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.lightning.base.BaseLightningModel.test_epoch_end": [[588, 618], ["zip", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "sklearn.metrics.roc_auc_score", "sklearn.metrics.average_precision_score", "base.BaseLightningModel.validation_epoch_end.cal_metrics"], "methods", ["None"], ["", "def", "test_epoch_end", "(", "self", ",", "outputs", ")", ":", "\n", "        ", "tqdm_dict", "=", "{", "}", "\n", "\n", "def", "cal_metrics", "(", "the_test", ",", "the_orig", ",", "prefix", "=", "'gn'", ")", ":", "\n", "            ", "the_as", "=", "torch", ".", "cat", "(", "[", "o", "[", "'anomaly_score'", "]", "for", "o", "in", "the_test", "]", ")", "\n", "orig_as", "=", "torch", ".", "cat", "(", "[", "o", "[", "'anomaly_score'", "]", "for", "o", "in", "the_orig", "]", ")", "\n", "\n", "# 95% TPR: k is the kth-smallest element", "\n", "# I want 95% of examples to below this number", "\n", "thresh", "=", "torch", ".", "kthvalue", "(", "\n", "orig_as", ",", "\n", "k", "=", "int", "(", "np", ".", "floor", "(", "0.95", "*", "len", "(", "orig_as", ")", ")", ")", ")", ".", "values", "\n", "fpr", "=", "(", "the_as", "<=", "thresh", ")", ".", "float", "(", ")", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "tqdm_dict", "[", "f'{prefix}_ood_fpr'", "]", "=", "fpr", "\n", "\n", "cat_as", "=", "torch", ".", "cat", "(", "[", "the_as", ",", "orig_as", "]", ",", "dim", "=", "0", ")", "\n", "ys", "=", "torch", ".", "cat", "(", "[", "torch", ".", "ones", "(", "len", "(", "the_as", ")", ")", ",", "torch", ".", "zeros", "(", "len", "(", "orig_as", ")", ")", "]", ",", "dim", "=", "0", ")", "\n", "\n", "tqdm_dict", "[", "f'{prefix}_ood_auc'", "]", "=", "roc_auc_score", "(", "\n", "ys", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "cat_as", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "tqdm_dict", "[", "f'{prefix}_ood_aupr'", "]", "=", "average_precision_score", "(", "\n", "ys", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "cat_as", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "", "for", "name", ",", "output", "in", "zip", "(", "self", ".", "test_sets_names", "[", "1", ":", "]", ",", "outputs", "[", "1", ":", "]", ")", ":", "\n", "            ", "cal_metrics", "(", "output", ",", "outputs", "[", "0", "]", ",", "name", ")", "\n", "\n", "", "result", "=", "{", "\n", "'progress_bar'", ":", "tqdm_dict", ",", "'log'", ":", "tqdm_dict", ",", "\n", "}", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.lightning.base.BaseLightningModel.is_data_ratio_exp": [[619, 621], ["None"], "methods", ["None"], ["", "def", "is_data_ratio_exp", "(", "self", ")", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.lightning.base.BaseLightningModel.is_bbox_noise_exp": [[622, 624], ["None"], "methods", ["None"], ["", "def", "is_bbox_noise_exp", "(", "self", ")", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.lightning.base.BaseLightningModel._make_test_datasets": [[625, 628], ["None"], "methods", ["None"], ["", "def", "_make_test_datasets", "(", "self", ")", ":", "\n", "# Return None if no test set exists", "\n", "        ", "return", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.lightning.base.BaseLightningModel.add_model_specific_args": [[629, 632], ["NotImplementedError"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "add_model_specific_args", "(", "cls", ",", "parser", ")", ":", "# pragma: no-cover", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.lightning.base.BaseLightningModel.pl_trainer_args": [[633, 635], ["NotImplementedError"], "methods", ["None"], ["", "def", "pl_trainer_args", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.lightning.base.BaseLightningModel.is_finished_run": [[636, 639], ["NotImplementedError"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "is_finished_run", "(", "cls", ",", "model_dir", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.lightning.base.EpochBaseLightningModel.is_finished_run": [[642, 656], ["os.path.join", "os.path.exists", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "print", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device"], "methods", ["None"], ["    ", "@", "classmethod", "\n", "def", "is_finished_run", "(", "cls", ",", "model_dir", ")", ":", "\n", "        ", "last_ckpt", "=", "pjoin", "(", "model_dir", ",", "'last.ckpt'", ")", "\n", "if", "pexists", "(", "last_ckpt", ")", ":", "\n", "            ", "tmp", "=", "torch", ".", "load", "(", "last_ckpt", ",", "\n", "map_location", "=", "torch", ".", "device", "(", "'cpu'", ")", ")", "\n", "last_epoch", "=", "tmp", "[", "'epoch'", "]", "\n", "hparams", "=", "tmp", "[", "'hyper_parameters'", "]", "\n", "if", "last_epoch", ">=", "hparams", ".", "max_epochs", ":", "\n", "                ", "print", "(", "'Already finish fitting! Max %d Last %d'", "\n", "%", "(", "hparams", ".", "max_epochs", ",", "last_epoch", ")", ")", "\n", "return", "True", "\n", "\n", "", "", "return", "False", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.lightning.in9.IN9LightningModel.init_setup": [[22, 42], ["in9.IN9LightningModel.hparams.cf.startswith", "in9.IN9LightningModel.my_logger.info", "in9.IN9LightningModel.model.load_from", "os.path.exists", "os.system", "numpy.load"], "methods", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.bit_pytorch.models.ResNetV2.load_from"], ["def", "init_setup", "(", "self", ")", ":", "\n", "# Resnet 50", "\n", "        ", "if", "'arch'", "not", "in", "self", ".", "hparams", ":", "\n", "            ", "self", ".", "hparams", ".", "arch", "=", "'BiT-S-R50x1'", "\n", "", "if", "'data_ratio'", "not", "in", "self", ".", "hparams", ":", "\n", "            ", "self", ".", "hparams", ".", "data_ratio", "=", "1.", "\n", "", "if", "'bbox_noise'", "not", "in", "self", ".", "hparams", ":", "\n", "            ", "self", ".", "hparams", ".", "bbox_noise", "=", "0.", "\n", "\n", "", "head_size", "=", "18", "if", "self", ".", "hparams", ".", "cf", ".", "startswith", "(", "'channels'", ")", "else", "9", "\n", "self", ".", "model", "=", "models", ".", "KNOWN_MODELS", "[", "self", ".", "hparams", ".", "arch", "]", "(", "\n", "head_size", "=", "head_size", ",", "\n", "zero_head", "=", "False", ")", "\n", "if", "self", ".", "hparams", ".", "finetune", ":", "\n", "            ", "if", "not", "pexists", "(", "f\"models/{self.hparams.arch}.npz\"", ")", ":", "\n", "                ", "os", ".", "system", "(", "f'wget -O models/{self.hparams.arch}.npz '", "\n", "f'https://storage.googleapis.com/bit_models/{self.hparams.arch}.npz'", ")", "\n", "\n", "", "self", ".", "my_logger", ".", "info", "(", "\"Fine-tuning from BiT\"", ")", "\n", "self", ".", "model", ".", "load_from", "(", "np", ".", "load", "(", "f\"models/{self.hparams.arch}.npz\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.lightning.in9.IN9LightningModel.configure_optimizers": [[43, 54], ["torch.optim.SGD", "in9.IN9LightningModel.model.parameters", "torch.optim.lr_scheduler.MultiStepLR"], "methods", ["None"], ["", "", "def", "configure_optimizers", "(", "self", ")", ":", "\n", "        ", "optim", "=", "torch", ".", "optim", ".", "SGD", "(", "\n", "self", ".", "model", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "hparams", ".", "base_lr", ",", "\n", "momentum", "=", "0.9", ",", "weight_decay", "=", "1e-4", ")", "\n", "scheduler", "=", "{", "\n", "# Total 50 epochs", "\n", "'scheduler'", ":", "torch", ".", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "\n", "optim", ",", "milestones", "=", "self", ".", "milestones", ",", "gamma", "=", "0.1", ")", ",", "\n", "'interval'", ":", "'epoch'", ",", "\n", "}", "\n", "return", "[", "optim", "]", ",", "[", "scheduler", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.lightning.in9.IN9LightningModel.get_inpainting_model": [[55, 61], ["super().get_inpainting_model", "inpainting.Baseline.TileInpainter"], "methods", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.lightning.cct.CCTLightningModel.get_inpainting_model"], ["", "def", "get_inpainting_model", "(", "self", ",", "inpaint", ")", ":", "\n", "        ", "if", "inpaint", "==", "'cagan'", ":", "\n", "            ", "return", "None", "\n", "", "if", "inpaint", "==", "'tile'", "and", "self", ".", "hparams", ".", "mask", "==", "'seg'", ":", "\n", "            ", "return", "TileInpainter", "(", "use_bbox_to_mask", "=", "True", ")", "\n", "", "return", "super", "(", ")", ".", "get_inpainting_model", "(", "inpaint", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.lightning.in9.IN9LightningModel._make_train_val_dataset": [[62, 143], ["data.imagenet_datasets.MyImageFolder", "data.imagenet_datasets.MyImageFolder", "data.imagenet_datasets.MyImageFolder", "data.imagenet_datasets.MyImageFolder", "data.imagenet_datasets.MyImageFolder", "data.imagenet_datasets.MyImagenetBoundingBoxFolder", "data.in9_datasets.IN9Dataset", "int", "in9.IN9LightningModel.sub_dataset", "data.imagenet_datasets.MyImageFolder.get_val_transform", "data.imagenet_datasets.MyImageFolder.get_val_transform", "data.imagenet_datasets.MyImageFolder.get_val_transform", "data.imagenet_datasets.MyImageFolder.get_val_transform", "data.imagenet_datasets.MyImageFolder.get_val_transform", "data.imagenet_datasets.MyImagenetBoundingBoxFolder.get_train_transform", "data.in9_datasets.IN9Dataset.get_train_transform", "set", "data.imagenet_datasets.MyImageFolder", "data.imagenet_datasets.MyConcatDataset", "len", "open", "int", "NotImplementedError", "set.add", "os.path.basename", "data.imagenet_datasets.MyImageFolder.get_train_transform", "len", "in9.IN9LightningModel.sub_dataset", "line.strip", "len", "str"], "methods", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.lightning.base.BaseLightningModel.sub_dataset", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.waterbirds_datasets.WaterbirdDataset.get_val_transform", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.waterbirds_datasets.WaterbirdDataset.get_val_transform", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.waterbirds_datasets.WaterbirdDataset.get_val_transform", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.waterbirds_datasets.WaterbirdDataset.get_val_transform", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.waterbirds_datasets.WaterbirdDataset.get_val_transform", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.waterbirds_datasets.WaterbirdDataset.get_train_transform", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.waterbirds_datasets.WaterbirdDataset.get_train_transform", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.waterbirds_datasets.WaterbirdDataset.get_train_transform", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.lightning.base.BaseLightningModel.sub_dataset"], ["", "def", "_make_train_val_dataset", "(", "self", ")", ":", "\n", "        ", "cf_inpaint_dir", "=", "None", "\n", "if", "self", ".", "hparams", ".", "inpaint", "==", "'cagan'", ":", "\n", "            ", "if", "self", ".", "hparams", ".", "bbox_noise", "==", "0.", ":", "\n", "                ", "cf_inpaint_dir", "=", "'./datasets/bg_challenge/train/original_bbox_cf_cagan/train/'", "\n", "", "else", ":", "\n", "                ", "cf_inpaint_dir", "=", "'./datasets/bg_challenge/train/cf_cagan_bbox_noise_%s/train/'", "%", "self", ".", "hparams", ".", "bbox_noise", "\n", "\n", "", "", "if", "self", ".", "hparams", ".", "mask", "==", "'bbox'", ":", "\n", "            ", "assert", "self", ".", "hparams", ".", "bbox_noise", "==", "0.", "\n", "train_d", "=", "MyImagenetBoundingBoxFolder", "(", "\n", "'./datasets/bg_challenge/train/%s/train/'", "%", "self", ".", "train_dataset", ",", "\n", "'./datasets/imagenet/LOC_train_solution.csv'", ",", "\n", "cf_inpaint_dir", "=", "cf_inpaint_dir", ",", "\n", "transform", "=", "MyImagenetBoundingBoxFolder", ".", "get_train_transform", "(", "\n", "self", ".", "hparams", ".", "test_run", ")", ")", "\n", "", "else", ":", "\n", "            ", "train_d", "=", "IN9Dataset", "(", "\n", "'./datasets/bg_challenge/train/%s/train/'", "%", "self", ".", "train_dataset", ",", "\n", "no_fg_dir", "=", "'./datasets/bg_challenge/train/no_fg/train/'", ",", "\n", "cf_inpaint_dir", "=", "cf_inpaint_dir", ",", "\n", "bbox_noise", "=", "self", ".", "hparams", ".", "bbox_noise", ",", "\n", "transform", "=", "IN9Dataset", ".", "get_train_transform", "(", "self", ".", "hparams", ".", "test_run", ")", "\n", ")", "\n", "\n", "", "if", "self", ".", "hparams", ".", "data_ratio", "==", "1.", ":", "\n", "            ", "pass", "\n", "", "elif", "0.", "<", "self", ".", "hparams", ".", "data_ratio", "<", "1.", ":", "\n", "            ", "num_data", "=", "int", "(", "len", "(", "train_d", ")", "*", "self", ".", "hparams", ".", "data_ratio", ")", "\n", "train_d", ",", "_", "=", "self", ".", "sub_dataset", "(", "train_d", ",", "num_data", ")", "\n", "", "elif", "(", "self", ".", "hparams", ".", "data_ratio", ">", "1.", "or", "self", ".", "hparams", ".", "data_ratio", "==", "-", "1", ")", "and", "self", ".", "train_dataset", "==", "'original'", ":", "\n", "            ", "orig_filenames", "=", "set", "(", ")", "\n", "with", "open", "(", "'./datasets/bg_challenge/train/original/train_filenames'", ")", "as", "fp", ":", "\n", "                ", "for", "line", "in", "fp", ":", "\n", "                    ", "orig_filenames", ".", "add", "(", "line", ".", "strip", "(", ")", ")", "\n", "\n", "", "", "def", "is_valid_file", "(", "path", ")", ":", "\n", "                ", "return", "os", ".", "path", ".", "basename", "(", "path", ")", "not", "in", "orig_filenames", "\n", "\n", "", "more_train_d", "=", "MyImageFolder", "(", "\n", "'./datasets/bg_challenge/train/in9l/train/'", ",", "\n", "is_valid_file", "=", "is_valid_file", ",", "\n", "transform", "=", "MyImageFolder", ".", "get_train_transform", "(", "self", ".", "hparams", ".", "test_run", ")", ")", "\n", "\n", "if", "self", ".", "hparams", ".", "data_ratio", ">", "1.", ":", "\n", "                ", "more_data", "=", "self", ".", "hparams", ".", "data_ratio", "-", "1.", "\n", "num_data", "=", "int", "(", "len", "(", "train_d", ")", "*", "more_data", ")", "\n", "if", "num_data", "<", "len", "(", "more_train_d", ")", ":", "\n", "                    ", "more_train_d", ",", "_", "=", "self", ".", "sub_dataset", "(", "more_train_d", ",", "num_data", ")", "\n", "\n", "", "", "train_d", "=", "MyConcatDataset", "(", "[", "train_d", ",", "more_train_d", "]", ")", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "hparams", ".", "data_ratio", "!=", "1.", ":", "\n", "                ", "raise", "NotImplementedError", "(", "\n", "'Data ratio is wronly specified: '", "+", "str", "(", "self", ".", "hparams", ".", "data_ratio", ")", ")", "\n", "\n", "", "", "val_d", "=", "MyImageFolder", "(", "\n", "'./datasets/bg_challenge/train/%s/val/'", "%", "self", ".", "train_dataset", ",", "\n", "transform", "=", "MyImageFolder", ".", "get_val_transform", "(", "self", ".", "hparams", ".", "test_run", ")", ")", "\n", "orig_test_d", "=", "MyImageFolder", "(", "\n", "'./datasets/bg_challenge/test/original/val/'", ",", "\n", "transform", "=", "MyImageFolder", ".", "get_val_transform", "(", "self", ".", "hparams", ".", "test_run", ")", ")", "\n", "mixed_same_test_d", "=", "MyImageFolder", "(", "\n", "'./datasets/bg_challenge/test/mixed_same/val/'", ",", "\n", "transform", "=", "MyImageFolder", ".", "get_val_transform", "(", "self", ".", "hparams", ".", "test_run", ")", ")", "\n", "mixed_rand_test_d", "=", "MyImageFolder", "(", "\n", "'./datasets/bg_challenge/test/mixed_rand/val/'", ",", "\n", "transform", "=", "MyImageFolder", ".", "get_val_transform", "(", "self", ".", "hparams", ".", "test_run", ")", ")", "\n", "mixed_next_test_d", "=", "MyImageFolder", "(", "\n", "'./datasets/bg_challenge/test/mixed_next/val/'", ",", "\n", "transform", "=", "MyImageFolder", ".", "get_val_transform", "(", "self", ".", "hparams", ".", "test_run", ")", ")", "\n", "\n", "val_ds", "=", "[", "\n", "val_d", ",", "orig_test_d", ",", "mixed_same_test_d", ",", "\n", "mixed_rand_test_d", ",", "mixed_next_test_d", "]", "\n", "val_sets_names", "=", "[", "\n", "'val'", ",", "'orig'", ",", "'mixed_same'", ",", "'mixed_rand'", ",", "'mixed_next'", "\n", "]", "\n", "return", "train_d", ",", "val_ds", ",", "val_sets_names", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.lightning.in9.IN9LightningModel.is_data_ratio_exp": [[144, 146], ["None"], "methods", ["None"], ["", "def", "is_data_ratio_exp", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "hparams", ".", "data_ratio", "!=", "1.", "or", "'_dr'", "in", "self", ".", "hparams", ".", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.lightning.in9.IN9LightningModel.is_bbox_noise_exp": [[147, 149], ["None"], "methods", ["None"], ["", "def", "is_bbox_noise_exp", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "hparams", ".", "bbox_noise", ">", "0.", "or", "'_bn'", "in", "self", ".", "hparams", ".", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.lightning.in9.IN9LightningModel.add_model_specific_args": [[150, 175], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "add_model_specific_args", "(", "cls", ",", "parser", ")", ":", "\n", "# To use bbox as mask or segmentation mask", "\n", "        ", "parser", ".", "add_argument", "(", "\"--mask\"", ",", "type", "=", "str", ",", "default", "=", "'seg'", ",", "\n", "choices", "=", "[", "'bbox'", ",", "'seg'", "]", ")", "\n", "parser", ".", "add_argument", "(", "\"--arch\"", ",", "type", "=", "str", ",", "default", "=", "'BiT-S-R50x1'", ")", "\n", "parser", ".", "add_argument", "(", "\"--max_epochs\"", ",", "type", "=", "int", ",", "default", "=", "cls", ".", "max_epochs", ")", "\n", "parser", ".", "add_argument", "(", "\"--batch\"", ",", "type", "=", "int", ",", "default", "=", "32", ",", "\n", "help", "=", "\"Batch size.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--val_batch\"", ",", "type", "=", "int", ",", "default", "=", "256", ",", "\n", "help", "=", "\"Batch size.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--batch_split\"", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "\"Number of batches to compute gradient on before updating weights.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--base_lr\"", ",", "type", "=", "float", ",", "default", "=", "0.05", ")", "\n", "parser", ".", "add_argument", "(", "\"--pl_model\"", ",", "type", "=", "str", ",", "default", "=", "cls", ".", "__name__", ")", "\n", "parser", ".", "add_argument", "(", "\"--reg_anneal\"", ",", "type", "=", "float", ",", "default", "=", "0.", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--data_ratio\"", ",", "type", "=", "float", ",", "default", "=", "1.", ",", "\n", "help", "=", "'Specifies how many data to use. '", "\n", "'Default is 1: it means just using the original dataset.'", "\n", "'If bigger than 1, e.g. 2, then it adds 1x more data from'", "\n", "'in9l dataset. If it is -1, then it uses all data in9l.'", ")", "\n", "parser", ".", "add_argument", "(", "\"--bbox_noise\"", ",", "type", "=", "float", ",", "default", "=", "0.", ",", "\n", "help", "=", "'If bigger than 0, we randomly shuffle the foreground mask'", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.lightning.in9.IN9LightningModel.pl_trainer_args": [[176, 193], ["pytorch_lightning.callbacks.ModelCheckpoint", "dict", "os.path.join", "os.path.exists", "os.path.join"], "methods", ["None"], ["", "def", "pl_trainer_args", "(", "self", ")", ":", "\n", "        ", "checkpoint_callback", "=", "ModelCheckpoint", "(", "\n", "filepath", "=", "pjoin", "(", "self", ".", "hparams", ".", "logdir", ",", "self", ".", "hparams", ".", "name", ",", "'{epoch}'", ")", ",", "\n", "save_top_k", "=", "1", ",", "\n", "save_last", "=", "True", ",", "\n", "verbose", "=", "True", ",", "\n", "mode", "=", "'max'", ",", "\n", "monitor", "=", "'val_acc1'", ",", "\n", ")", "\n", "\n", "args", "=", "dict", "(", ")", "\n", "args", "[", "'max_epochs'", "]", "=", "self", ".", "hparams", ".", "max_epochs", "\n", "args", "[", "'checkpoint_callback'", "]", "=", "checkpoint_callback", "\n", "last_ckpt", "=", "pjoin", "(", "self", ".", "hparams", ".", "logdir", ",", "self", ".", "hparams", ".", "name", ",", "'last.ckpt'", ")", "\n", "if", "pexists", "(", "last_ckpt", ")", ":", "\n", "            ", "args", "[", "'resume_from_checkpoint'", "]", "=", "last_ckpt", "\n", "", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.lightning.in9.IN9LightningModel.get_grad_cam_layer": [[194, 196], ["None"], "methods", ["None"], ["", "def", "get_grad_cam_layer", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "model", ".", "head", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.lightning.waterbird.WaterbirdLightningModel.init_setup": [[18, 35], ["waterbird.WaterbirdLightningModel.my_logger.info", "waterbird.WaterbirdLightningModel.model.load_from", "os.path.exists", "os.system", "numpy.load"], "methods", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.bit_pytorch.models.ResNetV2.load_from"], ["def", "init_setup", "(", "self", ")", ":", "\n", "# Resnet 50", "\n", "        ", "if", "'arch'", "not", "in", "self", ".", "hparams", ":", "\n", "            ", "self", ".", "hparams", ".", "arch", "=", "'BiT-S-R50x1'", "\n", "", "if", "'data_ratio'", "not", "in", "self", ".", "hparams", ":", "\n", "            ", "self", ".", "hparams", ".", "data_ratio", "=", "1.", "\n", "\n", "", "self", ".", "model", "=", "models", ".", "KNOWN_MODELS", "[", "self", ".", "hparams", ".", "arch", "]", "(", "\n", "head_size", "=", "2", ",", "\n", "zero_head", "=", "False", ")", "\n", "if", "self", ".", "hparams", ".", "finetune", ":", "\n", "            ", "self", ".", "my_logger", ".", "info", "(", "\"Fine-tuning from BiT\"", ")", "\n", "if", "not", "pexists", "(", "f\"models/BiT-S-R50x1.npz\"", ")", ":", "\n", "                ", "os", ".", "system", "(", "f'wget -O models/BiT-S-R50x1.npz '", "\n", "f'https://storage.googleapis.com/bit_models/BiT-S-R50x1.npz'", ")", "\n", "\n", "", "self", ".", "model", ".", "load_from", "(", "np", ".", "load", "(", "f\"models/BiT-S-R50x1.npz\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.lightning.waterbird.WaterbirdLightningModel.configure_optimizers": [[36, 53], ["torch.optim.SGD", "waterbird.WaterbirdLightningModel.model.parameters", "torch.optim.lr_scheduler.ReduceLROnPlateau"], "methods", ["None"], ["", "", "def", "configure_optimizers", "(", "self", ")", ":", "\n", "        ", "optim", "=", "torch", ".", "optim", ".", "SGD", "(", "\n", "self", ".", "model", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "hparams", ".", "base_lr", ",", "\n", "momentum", "=", "0.9", ",", "weight_decay", "=", "1e-4", ")", "\n", "\n", "scheduler", "=", "{", "\n", "'scheduler'", ":", "torch", ".", "optim", ".", "lr_scheduler", ".", "ReduceLROnPlateau", "(", "\n", "optim", ",", "\n", "'min'", ",", "\n", "factor", "=", "0.1", ",", "\n", "patience", "=", "1", ",", "\n", "threshold", "=", "0.0001", ",", "\n", "min_lr", "=", "0", ",", "\n", "eps", "=", "1e-08", ")", ",", "\n", "'interval'", ":", "'epoch'", ",", "\n", "}", "\n", "return", "[", "optim", "]", ",", "[", "scheduler", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.lightning.waterbird.WaterbirdLightningModel.get_inpainting_model": [[54, 58], ["super().get_inpainting_model"], "methods", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.lightning.cct.CCTLightningModel.get_inpainting_model"], ["", "def", "get_inpainting_model", "(", "self", ",", "inpaint", ")", ":", "\n", "        ", "if", "inpaint", "==", "'cagan'", ":", "\n", "            ", "return", "None", "\n", "", "return", "super", "(", ")", ".", "get_inpainting_model", "(", "inpaint", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.lightning.waterbird.WaterbirdLightningModel._make_train_val_dataset": [[59, 103], ["data.waterbirds_datasets.WaterbirdDataset", "data.imagenet_datasets.MyImageFolder.get_val_transform", "data.waterbirds_datasets.WaterbirdDataset", "data.waterbirds_datasets.WaterbirdDataset", "data.waterbirds_datasets.WaterbirdDataset", "data.waterbirds_datasets.WaterbirdDataset.get_train_transform", "int", "waterbird.WaterbirdLightningModel.sub_dataset", "NotImplementedError", "len", "str"], "methods", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.waterbirds_datasets.WaterbirdDataset.get_val_transform", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.waterbirds_datasets.WaterbirdDataset.get_train_transform", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.lightning.base.BaseLightningModel.sub_dataset"], ["", "def", "_make_train_val_dataset", "(", "self", ")", ":", "\n", "        ", "cf_inpaint_dir", "=", "None", "\n", "if", "self", ".", "hparams", ".", "inpaint", "==", "'cagan'", ":", "\n", "            ", "cf_inpaint_dir", "=", "'../datasets/waterbird/cagan/'", "\n", "\n", "", "train_d", "=", "WaterbirdDataset", "(", "\n", "mode", "=", "'train'", ",", "\n", "cf_inpaint_dir", "=", "cf_inpaint_dir", ",", "\n", "transform", "=", "WaterbirdDataset", ".", "get_train_transform", "(", "\n", "self", ".", "hparams", ".", "test_run", ")", "\n", ")", "\n", "\n", "if", "self", ".", "hparams", ".", "data_ratio", "==", "1.", ":", "\n", "            ", "pass", "\n", "", "elif", "0.", "<", "self", ".", "hparams", ".", "data_ratio", "<", "1.", ":", "\n", "            ", "num_data", "=", "int", "(", "len", "(", "train_d", ")", "*", "self", ".", "hparams", ".", "data_ratio", ")", "\n", "train_d", ",", "_", "=", "self", ".", "sub_dataset", "(", "train_d", ",", "num_data", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\n", "'Data ratio is wronly specified: '", "\n", "+", "str", "(", "self", ".", "hparams", ".", "data_ratio", ")", ")", "\n", "\n", "", "val_tx", "=", "MyImageFolder", ".", "get_val_transform", "(", "self", ".", "hparams", ".", "test_run", ")", "\n", "val_d", "=", "WaterbirdDataset", "(", "\n", "mode", "=", "'val'", ",", "\n", "only_images", "=", "True", ",", "\n", "transform", "=", "val_tx", ")", "\n", "orig_test_d", "=", "WaterbirdDataset", "(", "\n", "mode", "=", "'test'", ",", "\n", "type", "=", "'same'", ",", "\n", "only_images", "=", "True", ",", "\n", "transform", "=", "val_tx", ")", "\n", "flip_test_d", "=", "WaterbirdDataset", "(", "\n", "mode", "=", "'test'", ",", "\n", "type", "=", "'flip'", ",", "\n", "only_images", "=", "True", ",", "\n", "transform", "=", "val_tx", ")", "\n", "\n", "val_ds", "=", "[", "\n", "val_d", ",", "orig_test_d", ",", "flip_test_d", "]", "\n", "val_sets_names", "=", "[", "\n", "'val'", ",", "'orig'", ",", "'flip'", ",", "\n", "]", "\n", "return", "train_d", ",", "val_ds", ",", "val_sets_names", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.lightning.waterbird.WaterbirdLightningModel.is_data_ratio_exp": [[104, 106], ["None"], "methods", ["None"], ["", "def", "is_data_ratio_exp", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "hparams", ".", "data_ratio", "!=", "1.", "or", "'_dr'", "in", "self", ".", "hparams", ".", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.lightning.waterbird.WaterbirdLightningModel.add_model_specific_args": [[107, 127], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "add_model_specific_args", "(", "cls", ",", "parser", ")", ":", "\n", "        ", "parser", ".", "add_argument", "(", "\"--arch\"", ",", "type", "=", "str", ",", "default", "=", "'BiT-S-R50x1'", ")", "\n", "parser", ".", "add_argument", "(", "\"--max_epochs\"", ",", "type", "=", "int", ",", "default", "=", "cls", ".", "max_epochs", ")", "\n", "parser", ".", "add_argument", "(", "\"--batch\"", ",", "type", "=", "int", ",", "default", "=", "32", ",", "\n", "help", "=", "\"Batch size.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--val_batch\"", ",", "type", "=", "int", ",", "default", "=", "256", ",", "\n", "help", "=", "\"Batch size.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--batch_split\"", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "\"Number of batches to compute gradient on before updating weights.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--base_lr\"", ",", "type", "=", "float", ",", "default", "=", "8e-4", ")", "\n", "parser", ".", "add_argument", "(", "\"--pl_model\"", ",", "type", "=", "str", ",", "default", "=", "cls", ".", "__name__", ")", "\n", "parser", ".", "add_argument", "(", "\"--reg_anneal\"", ",", "type", "=", "float", ",", "default", "=", "0.", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--data_ratio\"", ",", "type", "=", "float", ",", "default", "=", "1.", ",", "\n", "help", "=", "'Specifies how many data to use. '", "\n", "'Default is 1: it means just using the original dataset.'", "\n", "'If bigger than 1, e.g. 2, then it adds 1x more data from'", "\n", "'in9l dataset. If it is -1, then it uses all data in9l.'", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.lightning.waterbird.WaterbirdLightningModel.pl_trainer_args": [[128, 145], ["pytorch_lightning.callbacks.ModelCheckpoint", "dict", "os.path.join", "os.path.exists", "os.path.join"], "methods", ["None"], ["", "def", "pl_trainer_args", "(", "self", ")", ":", "\n", "        ", "checkpoint_callback", "=", "ModelCheckpoint", "(", "\n", "filepath", "=", "pjoin", "(", "self", ".", "hparams", ".", "logdir", ",", "self", ".", "hparams", ".", "name", ",", "'{epoch}'", ")", ",", "\n", "save_top_k", "=", "1", ",", "\n", "save_last", "=", "True", ",", "\n", "verbose", "=", "True", ",", "\n", "mode", "=", "'max'", ",", "\n", "monitor", "=", "'val_acc1'", ",", "\n", ")", "\n", "\n", "args", "=", "dict", "(", ")", "\n", "args", "[", "'max_epochs'", "]", "=", "self", ".", "hparams", ".", "max_epochs", "\n", "args", "[", "'checkpoint_callback'", "]", "=", "checkpoint_callback", "\n", "last_ckpt", "=", "pjoin", "(", "self", ".", "hparams", ".", "logdir", ",", "self", ".", "hparams", ".", "name", ",", "'last.ckpt'", ")", "\n", "if", "pexists", "(", "last_ckpt", ")", ":", "\n", "            ", "args", "[", "'resume_from_checkpoint'", "]", "=", "last_ckpt", "\n", "", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.lightning.waterbird.WaterbirdLightningModel.get_grad_cam_layer": [[146, 148], ["None"], "methods", ["None"], ["", "def", "get_grad_cam_layer", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "model", ".", "head", "[", "1", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.lightning.csv_recording.CSVRecordingCallback.on_validation_end": [[15, 28], ["collections.OrderedDict", "collections.OrderedDict.update", "os.path.join", "utils.output_csv", "metrics.items"], "methods", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.arch.utils.output_csv"], ["    ", "def", "on_validation_end", "(", "self", ",", "trainer", ",", "pl_module", ")", ":", "\n", "        ", "metrics", "=", "trainer", ".", "callback_metrics", "\n", "\n", "csv_dict", "=", "OrderedDict", "(", ")", "\n", "csv_dict", "[", "'epoch'", "]", "=", "pl_module", ".", "current_epoch", "\n", "csv_dict", "[", "'global_step'", "]", "=", "pl_module", ".", "global_step", "\n", "# In the metrics csv, the epoch is lagged by 1. Remove it.", "\n", "csv_dict", ".", "update", "(", "{", "k", ":", "v", "for", "k", ",", "v", "in", "metrics", ".", "items", "(", ")", "\n", "if", "k", "not", "in", "[", "'epoch'", ",", "'global_step'", "]", "}", ")", "\n", "\n", "result_f", "=", "pjoin", "(", "pl_module", ".", "hparams", ".", "logdir", ",", "pl_module", ".", "hparams", ".", "name", ",", "\n", "'results.tsv'", ")", "\n", "output_csv", "(", "result_f", ",", "csv_dict", ",", "delimiter", "=", "'\\t'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.lightning.csv_recording.CSVRecordingCallback.on_train_end": [[29, 80], ["os.path.join", "os.path.exists", "pandas.read_csv", "int", "pandas.read_csv.iloc[].to_dict", "collections.OrderedDict", "collections.OrderedDict.update", "collections.OrderedDict.update", "pl_module.is_data_ratio_exp", "pl_module.is_bbox_noise_exp", "os.path.join", "os.path.join", "os.path.exists", "os.path.islink", "trainer.checkpoint_callback.format_checkpoint_name", "os.symlink", "func", "os.path.exists", "utils.output_csv", "os.unlink", "dict", "isinstance", "vars", "pandas.read_csv", "set", "utils.output_csv", "utils.output_csv"], "methods", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.lightning.cct.CCTLightningModel.is_data_ratio_exp", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.lightning.in9.IN9LightningModel.is_bbox_noise_exp", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.arch.utils.output_csv", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.arch.utils.output_csv", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.arch.utils.output_csv"], ["", "def", "on_train_end", "(", "self", ",", "trainer", ",", "pl_module", ")", ":", "\n", "        ", "result_f", "=", "pjoin", "(", "pl_module", ".", "hparams", ".", "logdir", ",", "pl_module", ".", "hparams", ".", "name", ",", "\n", "'results.tsv'", ")", "\n", "assert", "pexists", "(", "result_f", ")", ",", "'Result %s should exists!'", "%", "result_f", "\n", "\n", "df", "=", "pd", ".", "read_csv", "(", "result_f", ",", "delimiter", "=", "'\\t'", ")", "\n", "\n", "func", "=", "{", "'min'", ":", "np", ".", "argmin", ",", "'max'", ":", "np", ".", "argmax", "}", "[", "\n", "trainer", ".", "checkpoint_callback", ".", "mode", "]", "\n", "best_idx", "=", "int", "(", "func", "(", "df", "[", "trainer", ".", "checkpoint_callback", ".", "monitor", "]", ".", "values", ")", ")", "\n", "\n", "best_metric", "=", "df", ".", "iloc", "[", "best_idx", "]", ".", "to_dict", "(", ")", "\n", "\n", "csv_dict", "=", "OrderedDict", "(", ")", "\n", "csv_dict", "[", "'name'", "]", "=", "pl_module", ".", "hparams", ".", "name", "\n", "csv_dict", ".", "update", "(", "best_metric", ")", "\n", "csv_dict", ".", "update", "(", "\n", "vars", "(", "pl_module", ".", "hparams", ")", "if", "isinstance", "(", "pl_module", ".", "hparams", ",", "Namespace", ")", "\n", "else", "pl_module", ".", "hparams", ")", "\n", "\n", "postfix", "=", "'_test'", "if", "pl_module", ".", "hparams", ".", "test_run", "else", "''", "\n", "dr_exp", "=", "''", "\n", "if", "pl_module", ".", "is_data_ratio_exp", "(", ")", ":", "\n", "            ", "dr_exp", "+=", "'dr_'", "\n", "", "if", "pl_module", ".", "is_bbox_noise_exp", "(", ")", ":", "\n", "            ", "dr_exp", "+=", "'bn_'", "\n", "", "fname", "=", "pjoin", "(", "pl_module", ".", "hparams", ".", "result_dir", ",", "\n", "f'{pl_module.__class__.__name__}_{dr_exp}results{postfix}.tsv'", ")", "\n", "\n", "# Check if already exists", "\n", "if", "not", "pexists", "(", "fname", ")", ":", "\n", "            ", "output_csv", "(", "fname", ",", "csv_dict", ",", "delimiter", "=", "'\\t'", ")", "\n", "", "else", ":", "\n", "            ", "try", ":", "\n", "                ", "tmp_df", "=", "pd", ".", "read_csv", "(", "fname", ",", "delimiter", "=", "'\\t'", ")", "\n", "if", "pl_module", ".", "hparams", ".", "name", "not", "in", "set", "(", "tmp_df", "[", "'name'", "]", ")", ":", "\n", "                    ", "output_csv", "(", "fname", ",", "csv_dict", ",", "delimiter", "=", "'\\t'", ")", "\n", "", "", "except", ":", "\n", "# Avoid reading CSV error", "\n", "                ", "output_csv", "(", "fname", ",", "csv_dict", ",", "delimiter", "=", "'\\t'", ")", "\n", "\n", "", "", "bpath", "=", "pjoin", "(", "pl_module", ".", "hparams", ".", "logdir", ",", "pl_module", ".", "hparams", ".", "name", ",", "'best.ckpt'", ")", "\n", "if", "pexists", "(", "bpath", ")", ":", "\n", "            ", "return", "\n", "\n", "", "if", "os", ".", "path", ".", "islink", "(", "bpath", ")", ":", "\n", "            ", "os", ".", "unlink", "(", "bpath", ")", "\n", "\n", "", "best_filename", "=", "trainer", ".", "checkpoint_callback", ".", "format_checkpoint_name", "(", "\n", "best_metric", "[", "'epoch'", "]", ",", "dict", "(", "gstep", "=", "best_metric", "[", "'global_step'", "]", ")", ")", "\n", "os", ".", "symlink", "(", "best_filename", ",", "bpath", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.lightning.csv_recording.CSVRecordingCallback.on_test_start": [[81, 108], ["pl_module.is_data_ratio_exp", "pl_module.is_bbox_noise_exp", "os.path.join", "os.path.exists", "os.path.join", "os.path.exists", "pl_module.load_from_checkpoint", "pl_module.model.load_state_dict", "print", "print", "pandas.read_csv", "pl_module.load_from_checkpoint.model.state_dict", "set", "print", "sys.exit"], "methods", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.lightning.cct.CCTLightningModel.is_data_ratio_exp", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.lightning.in9.IN9LightningModel.is_bbox_noise_exp", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.GAN_Inpainting.AE_GAN.load_state_dict", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.GAN_Inpainting.AE_GAN.state_dict"], ["", "def", "on_test_start", "(", "self", ",", "trainer", ",", "pl_module", ")", ":", "\n", "# Check if it already runs", "\n", "        ", "dr_exp", "=", "''", "\n", "if", "pl_module", ".", "is_data_ratio_exp", "(", ")", ":", "\n", "            ", "dr_exp", "+=", "'dr_'", "\n", "", "if", "pl_module", ".", "is_bbox_noise_exp", "(", ")", ":", "\n", "            ", "dr_exp", "+=", "'bn_'", "\n", "", "ood_fname", "=", "pjoin", "(", "pl_module", ".", "hparams", ".", "result_dir", ",", "\n", "f'{pl_module.__class__.__name__}_{dr_exp}ood_results.tsv'", ")", "\n", "if", "pexists", "(", "ood_fname", ")", ":", "\n", "            ", "ood_df", "=", "pd", ".", "read_csv", "(", "ood_fname", ",", "delimiter", "=", "'\\t'", ")", "\n", "if", "pl_module", ".", "hparams", ".", "name", "in", "set", "(", "ood_df", "[", "'name'", "]", ")", ":", "\n", "                ", "print", "(", "'Already ood test for %s. Exit!'", "%", "pl_module", ".", "hparams", ".", "name", ")", "\n", "sys", ".", "exit", "(", ")", "\n", "\n", "# For OOD detections", "\n", "", "", "bpath", "=", "pjoin", "(", "pl_module", ".", "hparams", ".", "logdir", ",", "pl_module", ".", "hparams", ".", "name", ",", "'best.ckpt'", ")", "\n", "assert", "pexists", "(", "bpath", ")", ",", "'Best path %s not exists!'", "%", "bpath", "\n", "\n", "best_pl_module", "=", "pl_module", ".", "load_from_checkpoint", "(", "bpath", ")", "\n", "pl_module", ".", "model", ".", "load_state_dict", "(", "best_pl_module", ".", "model", ".", "state_dict", "(", ")", ")", "\n", "pl_module", ".", "current_epoch", "=", "best_pl_module", ".", "current_epoch", "\n", "pl_module", ".", "global_step", "=", "best_pl_module", ".", "global_step", "\n", "print", "(", "'Load best model from %s'", "%", "bpath", ")", "\n", "\n", "trainer", ".", "callback_metrics", "=", "{", "}", "\n", "print", "(", "'Clean up the callback metrics before test; Remove last val metrics'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.lightning.csv_recording.CSVRecordingCallback.on_test_end": [[109, 131], ["collections.OrderedDict", "collections.OrderedDict.update", "pl_module.is_data_ratio_exp", "pl_module.is_bbox_noise_exp", "os.path.join", "utils.output_csv", "metrics.items"], "methods", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.lightning.cct.CCTLightningModel.is_data_ratio_exp", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.lightning.in9.IN9LightningModel.is_bbox_noise_exp", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.arch.utils.output_csv"], ["", "def", "on_test_end", "(", "self", ",", "trainer", ",", "pl_module", ")", ":", "\n", "# For OOD detections", "\n", "        ", "metrics", "=", "trainer", ".", "callback_metrics", "\n", "\n", "csv_dict", "=", "OrderedDict", "(", ")", "\n", "csv_dict", "[", "'name'", "]", "=", "pl_module", ".", "hparams", ".", "name", "\n", "csv_dict", "[", "'epoch'", "]", "=", "pl_module", ".", "current_epoch", "\n", "csv_dict", "[", "'global_step'", "]", "=", "pl_module", ".", "global_step", "\n", "# In the metrics csv, the epoch is lagged by 1. Remove it.", "\n", "csv_dict", ".", "update", "(", "{", "k", ":", "v", "for", "k", ",", "v", "in", "metrics", ".", "items", "(", ")", "\n", "if", "k", "not", "in", "[", "'epoch'", ",", "'global_step'", "]", "}", ")", "\n", "\n", "postfix", "=", "'_test'", "if", "pl_module", ".", "hparams", ".", "test_run", "else", "''", "\n", "dr_exp", "=", "''", "\n", "if", "pl_module", ".", "is_data_ratio_exp", "(", ")", ":", "\n", "            ", "dr_exp", "+=", "'dr_'", "\n", "", "if", "pl_module", ".", "is_bbox_noise_exp", "(", ")", ":", "\n", "            ", "dr_exp", "+=", "'bn_'", "\n", "\n", "", "fname", "=", "pjoin", "(", "pl_module", ".", "hparams", ".", "result_dir", ",", "\n", "f'{pl_module.__class__.__name__}_{dr_exp}ood_results{postfix}.tsv'", ")", "\n", "output_csv", "(", "fname", ",", "csv_dict", ",", "delimiter", "=", "'\\t'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.lightning.csv_recording.CSVRecording2Callback.on_validation_end": [[138, 151], ["collections.OrderedDict", "collections.OrderedDict.update", "os.path.join", "utils.output_csv", "metrics.items"], "methods", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.arch.utils.output_csv"], ["def", "on_validation_end", "(", "self", ",", "trainer", ",", "pl_module", ")", ":", "\n", "        ", "metrics", "=", "trainer", ".", "callback_metrics", "\n", "\n", "csv_dict", "=", "OrderedDict", "(", ")", "\n", "csv_dict", "[", "'epoch'", "]", "=", "pl_module", ".", "current_epoch", "\n", "csv_dict", "[", "'global_step'", "]", "=", "pl_module", ".", "global_step", "\n", "# In the metrics csv, the epoch is lagged by 1. Remove it.", "\n", "csv_dict", ".", "update", "(", "{", "k", ":", "v", "for", "k", ",", "v", "in", "metrics", ".", "items", "(", ")", "\n", "if", "k", "not", "in", "[", "'epoch'", ",", "'global_step'", "]", "}", ")", "\n", "\n", "result_f", "=", "pjoin", "(", "pl_module", ".", "hparams", ".", "logdir", ",", "pl_module", ".", "hparams", ".", "name", ",", "\n", "'results.tsv'", ")", "\n", "output_csv", "(", "result_f", ",", "csv_dict", ",", "delimiter", "=", "'\\t'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.lightning.csv_recording.CSVRecording2Callback.on_test_start": [[152, 179], ["os.path.join", "os.path.join", "os.path.exists", "pl_module.load_from_checkpoint", "pl_module.model.load_state_dict", "print", "os.path.exists", "Exception", "os.path.exists", "pandas.read_csv", "int", "pandas.read_csv.iloc[].to_dict", "trainer.checkpoint_callback.format_checkpoint_name", "os.symlink", "pl_module.load_from_checkpoint.model.state_dict", "func"], "methods", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.GAN_Inpainting.AE_GAN.load_state_dict", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.GAN_Inpainting.AE_GAN.state_dict"], ["", "def", "on_test_start", "(", "self", ",", "trainer", ",", "pl_module", ")", ":", "\n", "        ", "result_f", "=", "pjoin", "(", "pl_module", ".", "hparams", ".", "logdir", ",", "pl_module", ".", "hparams", ".", "name", ",", "\n", "'results.tsv'", ")", "\n", "if", "not", "pexists", "(", "result_f", ")", ":", "\n", "            ", "raise", "Exception", "(", "'WIERD!!!! No results.tsv found in the model directory.'", ")", "\n", "\n", "", "bpath", "=", "pjoin", "(", "pl_module", ".", "hparams", ".", "logdir", ",", "pl_module", ".", "hparams", ".", "name", ",", "'best.ckpt'", ")", "\n", "if", "not", "pexists", "(", "bpath", ")", ":", "\n", "            ", "df", "=", "pd", ".", "read_csv", "(", "result_f", ",", "delimiter", "=", "'\\t'", ")", "\n", "\n", "func", "=", "{", "'min'", ":", "np", ".", "argmin", ",", "'max'", ":", "np", ".", "argmax", "}", "[", "\n", "trainer", ".", "checkpoint_callback", ".", "mode", "]", "\n", "best_idx", "=", "int", "(", "func", "(", "df", "[", "trainer", ".", "checkpoint_callback", ".", "monitor", "]", ".", "values", ")", ")", "\n", "best_record", "=", "df", ".", "iloc", "[", "best_idx", "]", ".", "to_dict", "(", ")", "\n", "best_epoch", "=", "best_record", "[", "'epoch'", "]", "\n", "\n", "best_filename", "=", "trainer", ".", "checkpoint_callback", ".", "format_checkpoint_name", "(", "\n", "best_epoch", ",", "best_record", ")", "\n", "\n", "os", ".", "symlink", "(", "best_filename", ",", "bpath", ")", "\n", "", "assert", "pexists", "(", "bpath", ")", ",", "'Best model %s does not exist!'", "%", "bpath", "\n", "\n", "best_pl_module", "=", "pl_module", ".", "load_from_checkpoint", "(", "bpath", ")", "\n", "pl_module", ".", "model", ".", "load_state_dict", "(", "best_pl_module", ".", "model", ".", "state_dict", "(", ")", ")", "\n", "pl_module", ".", "current_epoch", "=", "best_pl_module", ".", "current_epoch", "\n", "pl_module", ".", "global_step", "=", "best_pl_module", ".", "global_step", "\n", "print", "(", "'Load best model from %s'", "%", "bpath", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.lightning.csv_recording.CSVRecording2Callback.on_test_end": [[180, 195], ["collections.OrderedDict", "collections.OrderedDict.update", "os.path.join", "utils.output_csv", "metrics.items"], "methods", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.arch.utils.output_csv"], ["", "def", "on_test_end", "(", "self", ",", "trainer", ",", "pl_module", ")", ":", "\n", "        ", "metrics", "=", "trainer", ".", "callback_metrics", "\n", "\n", "csv_dict", "=", "OrderedDict", "(", ")", "\n", "csv_dict", "[", "'name'", "]", "=", "pl_module", ".", "hparams", ".", "name", "\n", "csv_dict", "[", "'epoch'", "]", "=", "pl_module", ".", "current_epoch", "\n", "csv_dict", "[", "'global_step'", "]", "=", "pl_module", ".", "global_step", "\n", "# In the metrics csv, the epoch is lagged by 1. Remove it.", "\n", "csv_dict", ".", "update", "(", "{", "k", ":", "v", "for", "k", ",", "v", "in", "metrics", ".", "items", "(", ")", "\n", "if", "k", "not", "in", "[", "'epoch'", ",", "'global_step'", "]", "}", ")", "\n", "\n", "postfix", "=", "'_test'", "if", "pl_module", ".", "hparams", ".", "test_run", "else", "''", "\n", "fname", "=", "pjoin", "(", "pl_module", ".", "hparams", ".", "result_dir", ",", "\n", "f'{pl_module.__class__.__name__}_results{postfix}.tsv'", ")", "\n", "output_csv", "(", "fname", ",", "csv_dict", ",", "delimiter", "=", "'\\t'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.lightning.cct.CCTLightningModel.init_setup": [[15, 30], ["cct.CCTLightningModel.my_logger.info", "cct.CCTLightningModel.model.load_from", "cct.CCTLightningModel.hparams.cf.startswith", "os.path.exists", "os.system", "numpy.load"], "methods", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.bit_pytorch.models.ResNetV2.load_from"], ["    ", "def", "init_setup", "(", "self", ")", ":", "\n", "        ", "if", "'data_ratio'", "not", "in", "self", ".", "hparams", ":", "\n", "            ", "self", ".", "hparams", ".", "data_ratio", "=", "1", "\n", "\n", "# Resnet 50", "\n", "", "head_size", "=", "30", "if", "self", ".", "hparams", ".", "cf", ".", "startswith", "(", "'channels'", ")", "else", "15", "\n", "self", ".", "model", "=", "models", ".", "KNOWN_MODELS", "[", "'BiT-S-R50x1'", "]", "(", "\n", "head_size", "=", "head_size", ",", "\n", "zero_head", "=", "True", ")", "\n", "self", ".", "my_logger", ".", "info", "(", "\"Fine-tuning from BiT\"", ")", "\n", "if", "not", "pexists", "(", "f\"models/BiT-S-R50x1.npz\"", ")", ":", "\n", "            ", "os", ".", "system", "(", "f'wget -O models/BiT-S-R50x1.npz '", "\n", "f'https://storage.googleapis.com/bit_models/BiT-S-R50x1.npz'", ")", "\n", "\n", "", "self", ".", "model", ".", "load_from", "(", "np", ".", "load", "(", "f\"models/BiT-S-R50x1.npz\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.lightning.cct.CCTLightningModel.get_inpainting_model": [[37, 41], ["super().get_inpainting_model"], "methods", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.lightning.cct.CCTLightningModel.get_inpainting_model"], ["", "def", "get_inpainting_model", "(", "self", ",", "inpaint", ")", ":", "\n", "        ", "if", "inpaint", "==", "'cagan'", ":", "\n", "            ", "return", "None", "\n", "", "return", "super", "(", ")", ".", "get_inpainting_model", "(", "inpaint", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.lightning.cct.CCTLightningModel.configure_optimizers": [[42, 53], ["torch.optim.RMSprop", "cct.CCTLightningModel.model.parameters", "torch.optim.lr_scheduler.MultiStepLR"], "methods", ["None"], ["", "def", "configure_optimizers", "(", "self", ")", ":", "\n", "        ", "optim", "=", "torch", ".", "optim", ".", "RMSprop", "(", "\n", "self", ".", "model", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "hparams", ".", "base_lr", ",", "\n", "momentum", "=", "0.9", ")", "\n", "scheduler", "=", "{", "\n", "# Total 50 epochs", "\n", "'scheduler'", ":", "torch", ".", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "\n", "optim", ",", "milestones", "=", "[", "15", ",", "30", ",", "45", "]", ",", "gamma", "=", "0.1", ")", ",", "\n", "'interval'", ":", "'epoch'", ",", "\n", "}", "\n", "return", "[", "optim", "]", ",", "[", "scheduler", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.lightning.cct.CCTLightningModel._make_train_val_dataset": [[63, 94], ["data.cct_datasets.MyCCT_Dataset", "data.cct_datasets.MyCCT_Dataset", "data.cct_datasets.MyCCT_Dataset", "data.cct_datasets.MyCCT_Dataset", "str", "cct.CCTLightningModel.sub_dataset", "data.cct_datasets.MyCCT_Dataset.get_train_bbox_transform", "data.cct_datasets.MyCCT_Dataset.get_val_bbox_transform", "data.cct_datasets.MyCCT_Dataset.get_val_bbox_transform", "data.cct_datasets.MyCCT_Dataset.get_val_bbox_transform", "int", "len"], "methods", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.lightning.base.BaseLightningModel.sub_dataset", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.cct_datasets.MyCCT_Dataset.get_train_bbox_transform", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.cct_datasets.MyCCT_Dataset.get_val_bbox_transform", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.cct_datasets.MyCCT_Dataset.get_val_bbox_transform", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.cct_datasets.MyCCT_Dataset.get_val_bbox_transform"], ["", "def", "_make_train_val_dataset", "(", "self", ")", ":", "\n", "        ", "cf_inpaint_dir", "=", "None", "\n", "if", "self", ".", "hparams", ".", "inpaint", "==", "'cagan'", ":", "\n", "            ", "cf_inpaint_dir", "=", "'./datasets/cct/cagan/'", "\n", "\n", "", "train_d", "=", "MyCCT_Dataset", "(", "\n", "'./datasets/cct/eccv_18_annotation_files/train_annotations.json'", ",", "\n", "cf_inpaint_dir", "=", "cf_inpaint_dir", ",", "\n", "transform", "=", "MyCCT_Dataset", ".", "get_train_bbox_transform", "(", ")", "\n", ")", "\n", "\n", "dr", "=", "self", ".", "hparams", ".", "data_ratio", "\n", "assert", "0.", "<", "dr", "<=", "1.", ",", "'Data ratio is invalid: '", "+", "str", "(", "dr", ")", "\n", "if", "dr", "<", "1.", ":", "\n", "            ", "train_d", ",", "_", "=", "self", ".", "sub_dataset", "(", "train_d", ",", "num_subset", "=", "int", "(", "len", "(", "train_d", ")", "*", "dr", ")", ")", "\n", "\n", "", "val_d", "=", "MyCCT_Dataset", "(", "\n", "'./datasets/cct/eccv_18_annotation_files/cis_val_annotations.json'", ",", "\n", "transform", "=", "MyCCT_Dataset", ".", "get_val_bbox_transform", "(", ")", "\n", ")", "\n", "cis_test_d", "=", "MyCCT_Dataset", "(", "\n", "'./datasets/cct/eccv_18_annotation_files/cis_test_annotations.json'", ",", "\n", "transform", "=", "MyCCT_Dataset", ".", "get_val_bbox_transform", "(", ")", "\n", ")", "\n", "trans_test_d", "=", "MyCCT_Dataset", "(", "\n", "'./datasets/cct/eccv_18_annotation_files/trans_test_annotations.json'", ",", "\n", "transform", "=", "MyCCT_Dataset", ".", "get_val_bbox_transform", "(", ")", "\n", ")", "\n", "\n", "val_sets_names", "=", "[", "'val'", ",", "'cis_test'", ",", "'trans_test'", "]", "\n", "return", "train_d", ",", "[", "val_d", ",", "cis_test_d", ",", "trans_test_d", "]", ",", "val_sets_names", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.lightning.cct.CCTLightningModel.is_data_ratio_exp": [[95, 97], ["None"], "methods", ["None"], ["", "def", "is_data_ratio_exp", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "hparams", ".", "data_ratio", "!=", "1.", "or", "'_dr'", "in", "self", ".", "hparams", ".", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.lightning.cct.CCTLightningModel.add_model_specific_args": [[98, 116], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "add_model_specific_args", "(", "cls", ",", "parser", ")", ":", "\n", "        ", "parser", ".", "add_argument", "(", "\"--max_epochs\"", ",", "type", "=", "int", ",", "default", "=", "50", ")", "\n", "parser", ".", "add_argument", "(", "\"--batch\"", ",", "type", "=", "int", ",", "default", "=", "64", ",", "\n", "help", "=", "\"Batch size.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--val_batch\"", ",", "type", "=", "int", ",", "default", "=", "256", ",", "\n", "help", "=", "\"Batch size.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--batch_split\"", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "\"Number of batches to compute gradient on before updating weights.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--base_lr\"", ",", "type", "=", "float", ",", "default", "=", "0.003", ")", "\n", "parser", ".", "add_argument", "(", "\"--pl_model\"", ",", "type", "=", "str", ",", "default", "=", "cls", ".", "__name__", ")", "\n", "parser", ".", "add_argument", "(", "\"--reg_anneal\"", ",", "type", "=", "float", ",", "default", "=", "0.", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--data_ratio\"", ",", "type", "=", "float", ",", "default", "=", "1.", ",", "\n", "help", "=", "'Specifies how many data to use. '", "\n", "'Default is 1: it means just using the cct dataset.'", "\n", "'It can be only use 0~1.'", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.lightning.cct.CCTLightningModel.pl_trainer_args": [[117, 134], ["pytorch_lightning.callbacks.ModelCheckpoint", "dict", "os.path.join", "os.path.exists", "os.path.join"], "methods", ["None"], ["", "def", "pl_trainer_args", "(", "self", ")", ":", "\n", "        ", "checkpoint_callback", "=", "ModelCheckpoint", "(", "\n", "filepath", "=", "pjoin", "(", "self", ".", "hparams", ".", "logdir", ",", "self", ".", "hparams", ".", "name", ",", "'{epoch}'", ")", ",", "\n", "save_top_k", "=", "1", ",", "\n", "save_last", "=", "True", ",", "\n", "verbose", "=", "True", ",", "\n", "mode", "=", "'max'", ",", "\n", "monitor", "=", "'val_auc'", ",", "\n", ")", "\n", "\n", "args", "=", "dict", "(", ")", "\n", "args", "[", "'max_epochs'", "]", "=", "self", ".", "hparams", ".", "max_epochs", "\n", "args", "[", "'checkpoint_callback'", "]", "=", "checkpoint_callback", "\n", "last_ckpt", "=", "pjoin", "(", "self", ".", "hparams", ".", "logdir", ",", "self", ".", "hparams", ".", "name", ",", "'last.ckpt'", ")", "\n", "if", "pexists", "(", "last_ckpt", ")", ":", "\n", "            ", "args", "[", "'resume_from_checkpoint'", "]", "=", "last_ckpt", "\n", "", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.lightning.cct.CCTLightningModel.get_grad_cam_layer": [[135, 137], ["None"], "methods", ["None"], ["", "def", "get_grad_cam_layer", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "model", ".", "head", "[", "1", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.InpaintingBase.InpaintingBase.__init__": [[8, 19], ["Baseline.InpaintTemplate.__init__", "torch.FloatTensor().unsqueeze().unsqueeze().unsqueeze", "torch.FloatTensor().unsqueeze().unsqueeze().unsqueeze", "torch.FloatTensor().unsqueeze().unsqueeze().unsqueeze", "torch.FloatTensor().unsqueeze().unsqueeze().unsqueeze", "torch.FloatTensor().unsqueeze().unsqueeze().unsqueeze", "torch.FloatTensor().unsqueeze().unsqueeze().unsqueeze", "torch.FloatTensor().unsqueeze().unsqueeze().unsqueeze", "torch.FloatTensor().unsqueeze().unsqueeze().unsqueeze", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "InpaintingBase.InpaintingBase.zero_loss_record", "torch.FloatTensor().unsqueeze().unsqueeze", "torch.FloatTensor().unsqueeze().unsqueeze", "torch.FloatTensor().unsqueeze().unsqueeze", "torch.FloatTensor().unsqueeze().unsqueeze", "torch.FloatTensor().unsqueeze().unsqueeze", "torch.FloatTensor().unsqueeze().unsqueeze", "torch.FloatTensor().unsqueeze().unsqueeze", "torch.FloatTensor().unsqueeze().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.bit_pytorch.lbtoolbox.Chrono.__init__", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.GAN_Inpainting.AE_GAN.zero_loss_record"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "InpaintingBase", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "pth_mean", "=", "torch", ".", "FloatTensor", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "pth_std", "=", "torch", ".", "FloatTensor", "(", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n", "self", ".", "pth_mean", "=", "nn", ".", "Parameter", "(", "pth_mean", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "pth_std", "=", "nn", ".", "Parameter", "(", "pth_std", ",", "requires_grad", "=", "False", ")", "\n", "\n", "# Set up loss record system", "\n", "self", ".", "zero_loss_record", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.InpaintingBase.InpaintingBase.generate_background": [[20, 26], ["InpaintingBase.InpaintingBase.forward"], "methods", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.bit_pytorch.models.ResNetV2.forward"], ["", "def", "generate_background", "(", "self", ",", "x", ",", "mask", ")", ":", "\n", "        ", "'''\n        Use to generate whole blurry images with pytorch normalization.\n        '''", "\n", "outputs", "=", "self", ".", "forward", "(", "x", ",", "mask", ")", "\n", "return", "outputs", "[", "0", "]", ".", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.InpaintingBase.InpaintingBase.impute_missing_imgs": [[27, 40], ["InpaintingBase.InpaintingBase.generate_background", "mask.unsqueeze.unsqueeze.expand_as", "mask.unsqueeze.unsqueeze.ndimension", "mask.unsqueeze.unsqueeze.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.Baseline.RandomColorWithNoiseInpainter.generate_background"], ["", "def", "impute_missing_imgs", "(", "self", ",", "x", ",", "mask", ")", ":", "\n", "        ", "'''\n        Generate images but replace the part that don't need to impute by original img.\n        Used in test time.\n        '''", "\n", "generated_img", "=", "self", ".", "generate_background", "(", "x", ",", "mask", ")", "\n", "\n", "if", "mask", ".", "ndimension", "(", ")", "==", "3", ":", "\n", "            ", "mask", "=", "mask", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "", "expand_mask", "=", "mask", ".", "expand_as", "(", "x", ")", "\n", "generated_img", "[", "expand_mask", "==", "1", "]", "=", "x", "[", "expand_mask", "==", "1", "]", "\n", "return", "generated_img", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.InpaintingBase.InpaintingBase.loss_fn": [[44, 49], ["outputs[].size", "outputs[].size"], "methods", ["None"], ["def", "loss_fn", "(", "self", ",", "outputs", ",", "targets", ",", "mask", ")", ":", "\n", "        ", "loss", "=", "(", "(", "1.", "-", "mask", ")", "*", "(", "outputs", "[", "0", "]", "-", "targets", ")", "**", "2", ")", ".", "sum", "(", ")", "\n", "self", ".", "total_loss", "+=", "loss", ".", "data", "[", "0", "]", "\n", "self", ".", "num_instances", "+=", "outputs", "[", "0", "]", ".", "size", "(", "0", ")", "\n", "return", "loss", "/", "outputs", "[", "0", "]", ".", "size", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.InpaintingBase.InpaintingBase.zero_loss_record": [[50, 53], ["None"], "methods", ["None"], ["", "def", "zero_loss_record", "(", "self", ")", ":", "\n", "        ", "self", ".", "total_loss", "=", "0.", "\n", "self", ".", "num_instances", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.InpaintingBase.InpaintingBase.report_loss": [[54, 56], ["None"], "methods", ["None"], ["", "def", "report_loss", "(", "self", ")", ":", "\n", "        ", "return", "'training loss: {}'", ".", "format", "(", "self", ".", "total_loss", "/", "self", ".", "num_instances", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.InpaintingBase.InpaintingBase.total_avg_loss": [[57, 59], ["None"], "methods", ["None"], ["", "def", "total_avg_loss", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "total_loss", "/", "self", ".", "num_instances", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.InpaintingBase.VAEInpaintingBase.__init__": [[62, 67], ["InpaintingBase.InpaintingBase.__init__", "print"], "methods", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.bit_pytorch.lbtoolbox.Chrono.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_training", "=", "100000", ")", ":", "\n", "        ", "super", "(", "VAEInpaintingBase", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "print", "(", "'num_training:'", ",", "num_training", ")", "\n", "self", ".", "num_training", "=", "num_training", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.InpaintingBase.VAEInpaintingBase.reparametrize": [[68, 74], ["logvar.mul().exp_", "logvar.mul().exp_.data.new().normal_", "logvar.mul().exp_.data.new().normal_.mul().add_", "logvar.mul", "logvar.mul().exp_.data.new", "logvar.mul().exp_.data.new().normal_.mul", "logvar.mul().exp_.size"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "reparametrize", "(", "mu", ",", "logvar", ")", ":", "\n", "        ", "std", "=", "logvar", ".", "mul", "(", "0.5", ")", ".", "exp_", "(", ")", "\n", "\n", "eps", "=", "std", ".", "data", ".", "new", "(", "std", ".", "size", "(", ")", ")", ".", "normal_", "(", ")", "\n", "return", "eps", ".", "mul", "(", "std", ")", ".", "add_", "(", "mu", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.InpaintingBase.VAEInpaintingBase.zero_loss_record": [[75, 80], ["None"], "methods", ["None"], ["", "def", "zero_loss_record", "(", "self", ")", ":", "\n", "        ", "self", ".", "total_loss", "=", "0.", "\n", "self", ".", "pred_loss", "=", "0.", "\n", "self", ".", "reg_loss", "=", "0.", "\n", "self", ".", "num_instances", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.InpaintingBase.VAEInpaintingBase.report_loss": [[81, 85], ["None"], "methods", ["None"], ["", "def", "report_loss", "(", "self", ")", ":", "\n", "        ", "return", "'loss: {} ({}, {})'", ".", "format", "(", "self", ".", "total_loss", "/", "self", ".", "num_instances", ",", "\n", "self", ".", "pred_loss", "/", "self", ".", "num_instances", ",", "\n", "self", ".", "reg_loss", "/", "self", ".", "num_instances", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.CAInpainter.CAInpainter.__init__": [[14, 58], ["tensorflow.compat.v1.disable_eager_execution", "tensorflow.compat.v1.placeholder", "CAInpainter.CAInpainter.build_server_graph", "tensorflow.reverse", "tensorflow.saturate_cast", "tensorflow.compat.v1.get_collection", "print", "numpy.ones", "numpy.array", "numpy.ones", "numpy.array", "torch.nn.Upsample", "tensorflow.compat.v1.ConfigProto", "tensorflow.compat.v1.Session", "CAInpainter.CAInpainter.sess.run", "tensorflow.train.load_variable", "CAInpainter.CAInpainter.assign_ops.append", "tensorflow.compat.v1.assign"], "methods", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.CAInpainter.CAInpainter.build_server_graph"], ["def", "__init__", "(", "self", ",", "batch_size", ",", "checkpoint_dir", ",", "\n", "pth_mean", "=", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "\n", "pth_std", "=", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", ":", "\n", "        ", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "checkpoint_dir", "=", "checkpoint_dir", "\n", "tf", ".", "compat", ".", "v1", ".", "disable_eager_execution", "(", ")", "\n", "\n", "self", ".", "images_ph", "=", "tf", ".", "compat", ".", "v1", ".", "placeholder", "(", "tf", ".", "float32", ",", "\n", "shape", "=", "[", "batch_size", ",", "256", ",", "512", ",", "3", "]", ")", "\n", "# with tf.device('/device:GPU:0'):", "\n", "# with tf.device('/cpu:0'):", "\n", "output", "=", "self", ".", "build_server_graph", "(", "self", ".", "images_ph", ")", "\n", "output", "=", "(", "output", "+", "1.", ")", "*", "127.5", "\n", "output", "=", "tf", ".", "reverse", "(", "output", ",", "[", "-", "1", "]", ")", "\n", "output", "=", "tf", ".", "saturate_cast", "(", "output", ",", "tf", ".", "uint8", ")", "\n", "self", ".", "output", "=", "output", "\n", "\n", "# load pretrained model", "\n", "vars_list", "=", "tf", ".", "compat", ".", "v1", ".", "get_collection", "(", "\n", "tf", ".", "compat", ".", "v1", ".", "GraphKeys", ".", "GLOBAL_VARIABLES", ")", "\n", "self", ".", "assign_ops", "=", "[", "]", "\n", "for", "var", "in", "vars_list", ":", "\n", "            ", "vname", "=", "var", ".", "name", "\n", "from_name", "=", "vname", "\n", "var_value", "=", "tf", ".", "train", ".", "load_variable", "(", "checkpoint_dir", ",", "from_name", ")", "\n", "# var_value = tf.contrib.framework.load_variable(checkpoint_dir, from_name)", "\n", "self", ".", "assign_ops", ".", "append", "(", "tf", ".", "compat", ".", "v1", ".", "assign", "(", "var", ",", "var_value", ")", ")", "\n", "", "print", "(", "'Model loaded.'", ")", "\n", "\n", "self", ".", "pth_mean", "=", "np", ".", "ones", "(", "(", "1", ",", "3", ",", "1", ",", "1", ")", ",", "dtype", "=", "'float32'", ")", "\n", "self", ".", "pth_mean", "[", "0", ",", ":", ",", "0", ",", "0", "]", "=", "np", ".", "array", "(", "pth_mean", ")", "\n", "self", ".", "pth_std", "=", "np", ".", "ones", "(", "(", "1", ",", "3", ",", "1", ",", "1", ")", ",", "dtype", "=", "'float32'", ")", "\n", "self", ".", "pth_std", "[", "0", ",", ":", ",", "0", ",", "0", "]", "=", "np", ".", "array", "(", "pth_std", ")", "\n", "\n", "self", ".", "upsample", "=", "torch", ".", "nn", ".", "Upsample", "(", "size", "=", "(", "256", ",", "256", ")", ",", "mode", "=", "'bilinear'", ")", "\n", "# self.downsample = torch.nn.Upsample(size=inpaint_img_size, mode='bilinear')", "\n", "\n", "# Create a session", "\n", "sess_config", "=", "tf", ".", "compat", ".", "v1", ".", "ConfigProto", "(", ")", "\n", "sess_config", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "# sess_config.log_device_placement = True", "\n", "self", ".", "sess", "=", "tf", ".", "compat", ".", "v1", ".", "Session", "(", "config", "=", "sess_config", ")", "\n", "\n", "self", ".", "sess", ".", "run", "(", "self", ".", "assign_ops", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.CAInpainter.CAInpainter.__call__": [[59, 61], ["CAInpainter.CAInpainter.impute_missing_imgs"], "methods", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.Baseline.RandomColorWithNoiseInpainter.impute_missing_imgs"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "return", "self", ".", "impute_missing_imgs", "(", "img", ",", "mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.CAInpainter.CAInpainter.impute_missing_imgs": [[62, 82], ["CAInpainter.CAInpainter.generate_background", "torch.cat.new_zeros", "torch.cat", "torch.cat.new_zeros", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.Baseline.RandomColorWithNoiseInpainter.generate_background"], ["", "def", "impute_missing_imgs", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "'''\n        :param img: 1 x 3 x 224 x 224\n        :param mask: 1 x 3 x 224 x 224. Mask\n        :return:\n        '''", "\n", "# If the passed in batch size is smaller than the specified one,", "\n", "# Put 0 to make it as a full batch", "\n", "orig_batch_size", "=", "img", ".", "shape", "[", "0", "]", "\n", "if", "orig_batch_size", "<", "self", ".", "batch_size", ":", "\n", "            ", "tmp", "=", "img", ".", "new_zeros", "(", "self", ".", "batch_size", "-", "orig_batch_size", ",", "*", "img", ".", "shape", "[", "1", ":", "]", ")", "\n", "img", "=", "torch", ".", "cat", "(", "[", "img", ",", "tmp", "]", ",", "dim", "=", "0", ")", "\n", "\n", "tmp", "=", "mask", ".", "new_zeros", "(", "self", ".", "batch_size", "-", "orig_batch_size", ",", "*", "mask", ".", "shape", "[", "1", ":", "]", ")", "\n", "mask", "=", "torch", ".", "cat", "(", "[", "mask", ",", "tmp", "]", ",", "dim", "=", "0", ")", "\n", "\n", "", "bgd_img", "=", "self", ".", "generate_background", "(", "img", ",", "mask", ")", "\n", "\n", "result", "=", "img", "*", "mask", "+", "bgd_img", "*", "(", "1.", "-", "mask", ")", "\n", "return", "result", "[", ":", "orig_batch_size", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.CAInpainter.CAInpainter.generate_background": [[83, 123], ["pytorch_mask.expand", "CAInpainter.CAInpainter.upsample().data.round", "numpy.moveaxis.cpu().numpy", "numpy.moveaxis", "CAInpainter.CAInpainter.upsample().data.cpu().numpy", "numpy.round", "numpy.moveaxis", "numpy.concatenate", "CAInpainter.CAInpainter.sess.run", "numpy.moveaxis", "torch.from_numpy", "pth_img.to.to.to", "torch.nn.functional.interpolate", "numpy.moveaxis.cpu", "CAInpainter.CAInpainter.upsample().data.cpu", "CAInpainter.CAInpainter.upsample", "CAInpainter.CAInpainter.upsample"], "methods", ["None"], ["", "def", "generate_background", "(", "self", ",", "pytorch_image", ",", "pytorch_mask", ")", ":", "\n", "        ", "'''\n        Use to generate whole blurry images with pytorch normalization.\n        '''", "\n", "orig_size", "=", "pytorch_image", ".", "shape", "[", "2", ":", "]", "\n", "\n", "mask", "=", "pytorch_mask", ".", "expand", "(", "pytorch_mask", ".", "shape", "[", "0", "]", ",", "3", ",", "\n", "orig_size", "[", "0", "]", ",", "orig_size", "[", "1", "]", ")", "\n", "mask", "=", "self", ".", "upsample", "(", "mask", ")", ".", "data", ".", "round", "(", ")", "\n", "mask", "=", "mask", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "# Make it into tensorflow input ordering, then resizing then normalization", "\n", "# Do 3 things:", "\n", "# - Move from NCHW to NHWC, and from RGB to BGR input", "\n", "# - Normalize to 0 - 255 with integer round up", "\n", "# - Resize the image size to be 256 x 256", "\n", "\n", "mask", "=", "np", ".", "moveaxis", "(", "mask", ",", "1", ",", "-", "1", ")", "\n", "mask", "=", "(", "1.", "-", "mask", ")", "*", "255", "\n", "\n", "image", "=", "self", ".", "upsample", "(", "pytorch_image", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "image", "=", "np", ".", "round", "(", "(", "image", "*", "self", ".", "pth_std", "+", "self", ".", "pth_mean", ")", "*", "255", ")", "\n", "image", "=", "np", ".", "moveaxis", "(", "image", ",", "1", ",", "-", "1", ")", "\n", "image", "=", "image", "[", ":", ",", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "\n", "input_image", "=", "np", ".", "concatenate", "(", "[", "image", ",", "mask", "]", ",", "axis", "=", "2", ")", "\n", "\n", "# DEBUG", "\n", "# cv2.imwrite('./test_input.png', input_image[0])", "\n", "\n", "tf_images", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "output", ",", "{", "self", ".", "images_ph", ":", "input_image", "}", ")", "\n", "\n", "# it's RGB back. So just change back to pytorch normalization", "\n", "pth_img", "=", "np", ".", "moveaxis", "(", "tf_images", ",", "3", ",", "1", ")", "\n", "pth_img", "=", "(", "(", "pth_img", "/", "255.", ")", "-", "self", ".", "pth_mean", ")", "/", "self", ".", "pth_std", "\n", "\n", "pth_img", "=", "torch", ".", "from_numpy", "(", "pth_img", ")", "\n", "pth_img", "=", "pth_img", ".", "to", "(", "pytorch_image", ".", "device", ")", "\n", "pth_img", "=", "F", ".", "interpolate", "(", "pth_img", ",", "size", "=", "orig_size", ",", "mode", "=", "'bilinear'", ")", ".", "data", "\n", "\n", "return", "pth_img", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.CAInpainter.CAInpainter.build_server_graph": [[124, 139], ["tensorflow.split", "tensorflow.cast", "cls.build_inpaint_net"], "methods", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.CAInpainter.CAInpainter.build_inpaint_net"], ["", "@", "classmethod", "\n", "def", "build_server_graph", "(", "cls", ",", "batch_data", ",", "reuse", "=", "False", ",", "is_training", "=", "False", ")", ":", "\n", "# generate mask, 1 represents masked point", "\n", "        ", "batch_raw", ",", "masks_raw", "=", "tf", ".", "split", "(", "batch_data", ",", "2", ",", "axis", "=", "2", ")", "\n", "masks", "=", "tf", ".", "cast", "(", "masks_raw", "[", ":", ",", ":", ",", ":", ",", "0", ":", "1", "]", ">", "127.5", ",", "tf", ".", "float32", ")", "\n", "\n", "batch_pos", "=", "batch_raw", "/", "127.5", "-", "1.", "\n", "batch_incomplete", "=", "batch_pos", "*", "(", "1.", "-", "masks", ")", "\n", "# inpaint", "\n", "x1", ",", "x2", ",", "flow", "=", "cls", ".", "build_inpaint_net", "(", "\n", "batch_incomplete", ",", "masks", ",", "reuse", "=", "reuse", ",", "training", "=", "is_training", ")", "\n", "batch_predict", "=", "x2", "\n", "# apply mask and reconstruct", "\n", "batch_complete", "=", "batch_predict", "*", "masks", "+", "batch_incomplete", "*", "(", "1", "-", "masks", ")", "\n", "return", "batch_complete", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.CAInpainter.CAInpainter.build_inpaint_net": [[140, 224], ["tensorflow.concat", "tensorflow.ones_like", "tensorflow.compat.v1.variable_scope", "cls.gen_conv", "cls.gen_conv", "cls.gen_conv", "cls.gen_conv", "cls.gen_conv", "cls.gen_conv", "cls.resize_mask_like", "cls.gen_conv", "cls.gen_conv", "cls.gen_conv", "cls.gen_conv", "cls.gen_conv", "cls.gen_conv", "cls.gen_deconv", "cls.gen_conv", "cls.gen_deconv", "cls.gen_conv", "cls.gen_conv", "tensorflow.clip_by_value", "cls.gen_conv.set_shape", "tensorflow.concat", "cls.gen_conv", "cls.gen_conv", "cls.gen_conv", "cls.gen_conv", "cls.gen_conv", "cls.gen_conv", "cls.gen_conv", "cls.gen_conv", "cls.gen_conv", "cls.gen_conv", "cls.gen_conv", "cls.gen_conv", "cls.gen_conv", "cls.gen_conv", "cls.gen_conv", "cls.gen_conv", "cls.contextual_attention", "cls.gen_conv", "cls.gen_conv", "tensorflow.concat", "cls.gen_conv", "cls.gen_conv", "cls.gen_deconv", "cls.gen_conv", "cls.gen_deconv", "cls.gen_conv", "cls.gen_conv", "tensorflow.clip_by_value", "xin.get_shape().as_list", "xin.get_shape"], "methods", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.CAInpainter.CAInpainter.gen_conv", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.CAInpainter.CAInpainter.gen_conv", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.CAInpainter.CAInpainter.gen_conv", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.CAInpainter.CAInpainter.gen_conv", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.CAInpainter.CAInpainter.gen_conv", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.CAInpainter.CAInpainter.gen_conv", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.CAInpainter.CAInpainter.resize_mask_like", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.CAInpainter.CAInpainter.gen_conv", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.CAInpainter.CAInpainter.gen_conv", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.CAInpainter.CAInpainter.gen_conv", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.CAInpainter.CAInpainter.gen_conv", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.CAInpainter.CAInpainter.gen_conv", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.CAInpainter.CAInpainter.gen_conv", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.CAInpainter.CAInpainter.gen_deconv", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.CAInpainter.CAInpainter.gen_conv", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.CAInpainter.CAInpainter.gen_deconv", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.CAInpainter.CAInpainter.gen_conv", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.CAInpainter.CAInpainter.gen_conv", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.CAInpainter.CAInpainter.gen_conv", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.CAInpainter.CAInpainter.gen_conv", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.CAInpainter.CAInpainter.gen_conv", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.CAInpainter.CAInpainter.gen_conv", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.CAInpainter.CAInpainter.gen_conv", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.CAInpainter.CAInpainter.gen_conv", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.CAInpainter.CAInpainter.gen_conv", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.CAInpainter.CAInpainter.gen_conv", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.CAInpainter.CAInpainter.gen_conv", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.CAInpainter.CAInpainter.gen_conv", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.CAInpainter.CAInpainter.gen_conv", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.CAInpainter.CAInpainter.gen_conv", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.CAInpainter.CAInpainter.gen_conv", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.CAInpainter.CAInpainter.gen_conv", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.CAInpainter.CAInpainter.gen_conv", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.CAInpainter.CAInpainter.gen_conv", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.CAInpainter.CAInpainter.contextual_attention", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.CAInpainter.CAInpainter.gen_conv", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.CAInpainter.CAInpainter.gen_conv", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.CAInpainter.CAInpainter.gen_conv", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.CAInpainter.CAInpainter.gen_conv", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.CAInpainter.CAInpainter.gen_deconv", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.CAInpainter.CAInpainter.gen_conv", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.CAInpainter.CAInpainter.gen_deconv", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.CAInpainter.CAInpainter.gen_conv", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.CAInpainter.CAInpainter.gen_conv"], ["", "@", "classmethod", "\n", "def", "build_inpaint_net", "(", "cls", ",", "x", ",", "mask", ",", "reuse", "=", "False", ",", "\n", "training", "=", "True", ",", "padding", "=", "'SAME'", ",", "\n", "name", "=", "'inpaint_net'", ")", ":", "\n", "        ", "\"\"\"Inpaint network.\n\n        Args:\n            x: incomplete image, [-1, 1]\n            mask: mask region {0, 1}\n        Returns:\n            [-1, 1] as predicted image\n        \"\"\"", "\n", "xin", "=", "x", "\n", "ones_x", "=", "tf", ".", "ones_like", "(", "x", ")", "[", ":", ",", ":", ",", ":", ",", "0", ":", "1", "]", "\n", "x", "=", "tf", ".", "concat", "(", "[", "x", ",", "ones_x", ",", "ones_x", "*", "mask", "]", ",", "axis", "=", "3", ")", "\n", "\n", "# two stage network", "\n", "cnum", "=", "32", "\n", "with", "tf", ".", "compat", ".", "v1", ".", "variable_scope", "(", "name", ",", "reuse", "=", "reuse", ")", ":", "\n", "# stage1", "\n", "            ", "x", "=", "cls", ".", "gen_conv", "(", "x", ",", "cnum", ",", "5", ",", "1", ",", "name", "=", "'conv1'", ",", "padding", "=", "padding", ")", "\n", "x", "=", "cls", ".", "gen_conv", "(", "x", ",", "2", "*", "cnum", ",", "3", ",", "2", ",", "name", "=", "'conv2_downsample'", ",", "padding", "=", "padding", ")", "\n", "x", "=", "cls", ".", "gen_conv", "(", "x", ",", "2", "*", "cnum", ",", "3", ",", "1", ",", "name", "=", "'conv3'", ",", "padding", "=", "padding", ")", "\n", "x", "=", "cls", ".", "gen_conv", "(", "x", ",", "4", "*", "cnum", ",", "3", ",", "2", ",", "name", "=", "'conv4_downsample'", ",", "padding", "=", "padding", ")", "\n", "x", "=", "cls", ".", "gen_conv", "(", "x", ",", "4", "*", "cnum", ",", "3", ",", "1", ",", "name", "=", "'conv5'", ",", "padding", "=", "padding", ")", "\n", "x", "=", "cls", ".", "gen_conv", "(", "x", ",", "4", "*", "cnum", ",", "3", ",", "1", ",", "name", "=", "'conv6'", ",", "padding", "=", "padding", ")", "\n", "mask_s", "=", "cls", ".", "resize_mask_like", "(", "mask", ",", "x", ")", "\n", "x", "=", "cls", ".", "gen_conv", "(", "x", ",", "4", "*", "cnum", ",", "3", ",", "rate", "=", "2", ",", "name", "=", "'conv7_atrous'", ",", "padding", "=", "padding", ")", "\n", "x", "=", "cls", ".", "gen_conv", "(", "x", ",", "4", "*", "cnum", ",", "3", ",", "rate", "=", "4", ",", "name", "=", "'conv8_atrous'", ",", "padding", "=", "padding", ")", "\n", "x", "=", "cls", ".", "gen_conv", "(", "x", ",", "4", "*", "cnum", ",", "3", ",", "rate", "=", "8", ",", "name", "=", "'conv9_atrous'", ",", "padding", "=", "padding", ")", "\n", "x", "=", "cls", ".", "gen_conv", "(", "x", ",", "4", "*", "cnum", ",", "3", ",", "rate", "=", "16", ",", "name", "=", "'conv10_atrous'", ",", "padding", "=", "padding", ")", "\n", "x", "=", "cls", ".", "gen_conv", "(", "x", ",", "4", "*", "cnum", ",", "3", ",", "1", ",", "name", "=", "'conv11'", ",", "padding", "=", "padding", ")", "\n", "x", "=", "cls", ".", "gen_conv", "(", "x", ",", "4", "*", "cnum", ",", "3", ",", "1", ",", "name", "=", "'conv12'", ",", "padding", "=", "padding", ")", "\n", "x", "=", "cls", ".", "gen_deconv", "(", "x", ",", "2", "*", "cnum", ",", "name", "=", "'conv13_upsample'", ",", "padding", "=", "padding", ")", "\n", "x", "=", "cls", ".", "gen_conv", "(", "x", ",", "2", "*", "cnum", ",", "3", ",", "1", ",", "name", "=", "'conv14'", ",", "padding", "=", "padding", ")", "\n", "x", "=", "cls", ".", "gen_deconv", "(", "x", ",", "cnum", ",", "name", "=", "'conv15_upsample'", ",", "padding", "=", "padding", ")", "\n", "x", "=", "cls", ".", "gen_conv", "(", "x", ",", "cnum", "//", "2", ",", "3", ",", "1", ",", "name", "=", "'conv16'", ",", "padding", "=", "padding", ")", "\n", "x", "=", "cls", ".", "gen_conv", "(", "x", ",", "3", ",", "3", ",", "1", ",", "activation", "=", "None", ",", "name", "=", "'conv17'", ",", "padding", "=", "padding", ")", "\n", "x", "=", "tf", ".", "clip_by_value", "(", "x", ",", "-", "1.", ",", "1.", ")", "\n", "x_stage1", "=", "x", "\n", "# return x_stage1, None, None", "\n", "\n", "# stage2, paste result as input", "\n", "# x = tf.stop_gradient(x)", "\n", "x", "=", "x", "*", "mask", "+", "xin", "*", "(", "1.", "-", "mask", ")", "\n", "x", ".", "set_shape", "(", "xin", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", "\n", "# conv branch", "\n", "xnow", "=", "tf", ".", "concat", "(", "[", "x", ",", "ones_x", ",", "ones_x", "*", "mask", "]", ",", "axis", "=", "3", ")", "\n", "x", "=", "cls", ".", "gen_conv", "(", "xnow", ",", "cnum", ",", "5", ",", "1", ",", "name", "=", "'xconv1'", ",", "padding", "=", "padding", ")", "\n", "x", "=", "cls", ".", "gen_conv", "(", "x", ",", "cnum", ",", "3", ",", "2", ",", "name", "=", "'xconv2_downsample'", ",", "padding", "=", "padding", ")", "\n", "x", "=", "cls", ".", "gen_conv", "(", "x", ",", "2", "*", "cnum", ",", "3", ",", "1", ",", "name", "=", "'xconv3'", ",", "padding", "=", "padding", ")", "\n", "x", "=", "cls", ".", "gen_conv", "(", "x", ",", "2", "*", "cnum", ",", "3", ",", "2", ",", "name", "=", "'xconv4_downsample'", ",", "padding", "=", "padding", ")", "\n", "x", "=", "cls", ".", "gen_conv", "(", "x", ",", "4", "*", "cnum", ",", "3", ",", "1", ",", "name", "=", "'xconv5'", ",", "padding", "=", "padding", ")", "\n", "x", "=", "cls", ".", "gen_conv", "(", "x", ",", "4", "*", "cnum", ",", "3", ",", "1", ",", "name", "=", "'xconv6'", ",", "padding", "=", "padding", ")", "\n", "x", "=", "cls", ".", "gen_conv", "(", "x", ",", "4", "*", "cnum", ",", "3", ",", "rate", "=", "2", ",", "name", "=", "'xconv7_atrous'", ",", "padding", "=", "padding", ")", "\n", "x", "=", "cls", ".", "gen_conv", "(", "x", ",", "4", "*", "cnum", ",", "3", ",", "rate", "=", "4", ",", "name", "=", "'xconv8_atrous'", ",", "padding", "=", "padding", ")", "\n", "x", "=", "cls", ".", "gen_conv", "(", "x", ",", "4", "*", "cnum", ",", "3", ",", "rate", "=", "8", ",", "name", "=", "'xconv9_atrous'", ",", "padding", "=", "padding", ")", "\n", "x", "=", "cls", ".", "gen_conv", "(", "x", ",", "4", "*", "cnum", ",", "3", ",", "rate", "=", "16", ",", "name", "=", "'xconv10_atrous'", ",", "padding", "=", "padding", ")", "\n", "x_hallu", "=", "x", "\n", "# attention branch", "\n", "x", "=", "cls", ".", "gen_conv", "(", "xnow", ",", "cnum", ",", "5", ",", "1", ",", "name", "=", "'pmconv1'", ",", "padding", "=", "padding", ")", "\n", "x", "=", "cls", ".", "gen_conv", "(", "x", ",", "cnum", ",", "3", ",", "2", ",", "name", "=", "'pmconv2_downsample'", ",", "padding", "=", "padding", ")", "\n", "x", "=", "cls", ".", "gen_conv", "(", "x", ",", "2", "*", "cnum", ",", "3", ",", "1", ",", "name", "=", "'pmconv3'", ",", "padding", "=", "padding", ")", "\n", "x", "=", "cls", ".", "gen_conv", "(", "x", ",", "4", "*", "cnum", ",", "3", ",", "2", ",", "name", "=", "'pmconv4_downsample'", ",", "padding", "=", "padding", ")", "\n", "x", "=", "cls", ".", "gen_conv", "(", "x", ",", "4", "*", "cnum", ",", "3", ",", "1", ",", "name", "=", "'pmconv5'", ",", "padding", "=", "padding", ")", "\n", "x", "=", "cls", ".", "gen_conv", "(", "x", ",", "4", "*", "cnum", ",", "3", ",", "1", ",", "name", "=", "'pmconv6'", ",", "padding", "=", "padding", ",", "\n", "activation", "=", "tf", ".", "nn", ".", "relu", ")", "\n", "x", ",", "offset_flow", "=", "cls", ".", "contextual_attention", "(", "x", ",", "x", ",", "mask_s", ",", "3", ",", "1", ",", "rate", "=", "2", ")", "\n", "x", "=", "cls", ".", "gen_conv", "(", "x", ",", "4", "*", "cnum", ",", "3", ",", "1", ",", "name", "=", "'pmconv9'", ",", "padding", "=", "padding", ")", "\n", "x", "=", "cls", ".", "gen_conv", "(", "x", ",", "4", "*", "cnum", ",", "3", ",", "1", ",", "name", "=", "'pmconv10'", ",", "padding", "=", "padding", ")", "\n", "pm", "=", "x", "\n", "# pm = tf.zeros([1, 64, 64, 128])", "\n", "# x_hallu, pm: 1x64x64x128", "\n", "x", "=", "tf", ".", "concat", "(", "[", "x_hallu", ",", "pm", "]", ",", "axis", "=", "3", ")", "\n", "\n", "x", "=", "cls", ".", "gen_conv", "(", "x", ",", "4", "*", "cnum", ",", "3", ",", "1", ",", "name", "=", "'allconv11'", ",", "padding", "=", "padding", ")", "\n", "x", "=", "cls", ".", "gen_conv", "(", "x", ",", "4", "*", "cnum", ",", "3", ",", "1", ",", "name", "=", "'allconv12'", ",", "padding", "=", "padding", ")", "\n", "x", "=", "cls", ".", "gen_deconv", "(", "x", ",", "2", "*", "cnum", ",", "name", "=", "'allconv13_upsample'", ",", "padding", "=", "padding", ")", "\n", "x", "=", "cls", ".", "gen_conv", "(", "x", ",", "2", "*", "cnum", ",", "3", ",", "1", ",", "name", "=", "'allconv14'", ",", "padding", "=", "padding", ")", "\n", "x", "=", "cls", ".", "gen_deconv", "(", "x", ",", "cnum", ",", "name", "=", "'allconv15_upsample'", ",", "padding", "=", "padding", ")", "\n", "x", "=", "cls", ".", "gen_conv", "(", "x", ",", "cnum", "//", "2", ",", "3", ",", "1", ",", "name", "=", "'allconv16'", ",", "padding", "=", "padding", ")", "\n", "x", "=", "cls", ".", "gen_conv", "(", "x", ",", "3", ",", "3", ",", "1", ",", "activation", "=", "None", ",", "name", "=", "'allconv17'", ",", "padding", "=", "padding", ")", "\n", "x_stage2", "=", "tf", ".", "clip_by_value", "(", "x", ",", "-", "1.", ",", "1.", ")", "\n", "", "return", "x_stage1", ",", "x_stage2", ",", "offset_flow", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.CAInpainter.CAInpainter.gen_conv": [[225, 254], ["tensorflow.compat.v1.layers.conv2d", "int", "tensorflow.pad"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "gen_conv", "(", "cls", ",", "x", ",", "cnum", ",", "ksize", ",", "stride", "=", "1", ",", "rate", "=", "1", ",", "name", "=", "'conv'", ",", "\n", "padding", "=", "'SAME'", ",", "activation", "=", "tf", ".", "nn", ".", "elu", ")", ":", "\n", "        ", "\"\"\"Define conv for generator.\n\n        Args:\n            x: Input.\n            cnum: Channel number.\n            ksize: Kernel size.\n            Stride: Convolution stride.\n            Rate: Rate for or dilated conv.\n            name: Name of layers.\n            padding: Default to SYMMETRIC.\n            activation: Activation function after convolution.\n            training: If current graph is for training or inference, used for bn.\n\n        Returns:\n            tf.Tensor: output\n\n        \"\"\"", "\n", "assert", "padding", "in", "[", "'SYMMETRIC'", ",", "'SAME'", ",", "'REFELECT'", "]", "\n", "if", "padding", "==", "'SYMMETRIC'", "or", "padding", "==", "'REFELECT'", ":", "\n", "            ", "p", "=", "int", "(", "rate", "*", "(", "ksize", "-", "1", ")", "/", "2", ")", "\n", "x", "=", "tf", ".", "pad", "(", "x", ",", "[", "[", "0", ",", "0", "]", ",", "[", "p", ",", "p", "]", ",", "[", "p", ",", "p", "]", ",", "[", "0", ",", "0", "]", "]", ",", "mode", "=", "padding", ")", "\n", "padding", "=", "'VALID'", "\n", "", "x", "=", "tf", ".", "compat", ".", "v1", ".", "layers", ".", "conv2d", "(", "\n", "x", ",", "cnum", ",", "ksize", ",", "stride", ",", "dilation_rate", "=", "rate", ",", "\n", "activation", "=", "activation", ",", "padding", "=", "padding", ",", "name", "=", "name", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.CAInpainter.CAInpainter.gen_deconv": [[255, 276], ["tensorflow.compat.v1.variable_scope", "cls.resize", "cls.gen_conv"], "methods", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.CAInpainter.CAInpainter.resize", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.CAInpainter.CAInpainter.gen_conv"], ["", "@", "classmethod", "\n", "def", "gen_deconv", "(", "cls", ",", "x", ",", "cnum", ",", "name", "=", "'upsample'", ",", "padding", "=", "'SAME'", ")", ":", "\n", "        ", "\"\"\"Define deconv for generator.\n        The deconv is defined to be a x2 resize_nearest_neighbor operation with\n        additional gen_conv operation.\n\n        Args:\n            x: Input.\n            cnum: Channel number.\n            name: Name of layers.\n            training: If current graph is for training or inference, used for bn.\n\n        Returns:\n            tf.Tensor: output\n\n        \"\"\"", "\n", "with", "tf", ".", "compat", ".", "v1", ".", "variable_scope", "(", "name", ")", ":", "\n", "            ", "x", "=", "cls", ".", "resize", "(", "x", ",", "func", "=", "tf", ".", "compat", ".", "v1", ".", "image", ".", "resize_nearest_neighbor", ")", "\n", "x", "=", "cls", ".", "gen_conv", "(", "\n", "x", ",", "cnum", ",", "3", ",", "1", ",", "name", "=", "name", "+", "'_conv'", ",", "padding", "=", "padding", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.CAInpainter.CAInpainter.contextual_attention": [[277, 395], ["tensorflow.shape", "cls.resize.get_shape().as_list", "cls.resize.get_shape().as_list", "tensorflow.compat.v1.extract_image_patches", "tensorflow.reshape", "tensorflow.transpose", "cls.resize", "cls.resize", "tensorflow.shape", "cls.resize.get_shape().as_list", "tensorflow.split", "tensorflow.shape", "cls.resize.get_shape().as_list", "tensorflow.compat.v1.extract_image_patches", "tensorflow.reshape", "tensorflow.transpose", "tensorflow.compat.v1.extract_image_patches", "tensorflow.reshape", "tensorflow.transpose", "tensorflow.cast", "tensorflow.split", "tensorflow.split", "tensorflow.reshape", "enumerate", "tensorflow.concat", "tensorflow.concat.set_shape", "tensorflow.concat", "tensorflow.concat.set_shape", "tensorflow.tile", "tensorflow.tile", "cls.flow_to_image_tf", "tensorflow.zeros", "cls.resize", "tensorflow.equal", "tensorflow.maximum", "tensorflow.eye", "zip", "tensorflow.nn.conv2d", "tensorflow.reshape", "tensorflow.nn.softmax", "tensorflow.argmax", "tensorflow.stack", "tensorflow.concat.append", "tensorflow.concat.append", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.concat", "cls.resize", "cls.resize.get_shape", "cls.resize.get_shape", "cls.resize.get_shape", "cls.resize.get_shape", "tensorflow.reduce_mean", "tensorflow.sqrt", "tensorflow.reshape", "tensorflow.nn.conv2d", "tensorflow.reshape", "tensorflow.transpose", "tensorflow.reshape", "tensorflow.nn.conv2d", "tensorflow.reshape", "tensorflow.transpose", "tensorflow.nn.conv2d_transpose", "tensorflow.range", "tensorflow.range", "int", "int", "tensorflow.cast.get_shape().as_list", "tensorflow.reduce_sum", "tensorflow.concat", "tensorflow.square", "tensorflow.cast.get_shape"], "methods", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.CAInpainter.CAInpainter.resize", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.CAInpainter.CAInpainter.resize", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.CAInpainter.CAInpainter.flow_to_image_tf", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.CAInpainter.CAInpainter.resize", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.CAInpainter.CAInpainter.resize"], ["", "@", "classmethod", "\n", "def", "contextual_attention", "(", "cls", ",", "f", ",", "b", ",", "mask", "=", "None", ",", "ksize", "=", "3", ",", "stride", "=", "1", ",", "rate", "=", "1", ",", "\n", "fuse_k", "=", "3", ",", "softmax_scale", "=", "10.", ",", "training", "=", "True", ",", "fuse", "=", "True", ")", ":", "\n", "        ", "\"\"\" Contextual attention layer implementation.\n\n        Contextual attention is first introduced in publication:\n            Generative Image Inpainting with Contextual Attention, Yu et al.\n\n        Args:\n            x: Input feature to match (foreground).\n            t: Input feature for match (background).\n            mask: Input mask for t, indicating patches not available.\n            ksize: Kernel size for contextual attention.\n            stride: Stride for extracting patches from t.\n            rate: Dilation for matching.\n            softmax_scale: Scaled softmax for attention.\n            training: Indicating if current graph is training or inference.\n\n        Returns:\n            tf.Tensor: output\n\n        \"\"\"", "\n", "# get shapes", "\n", "raw_fs", "=", "tf", ".", "shape", "(", "f", ")", "\n", "raw_int_fs", "=", "f", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "raw_int_bs", "=", "b", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "# extract patches from background with stride and rate", "\n", "kernel", "=", "2", "*", "rate", "\n", "raw_w", "=", "tf", ".", "compat", ".", "v1", ".", "extract_image_patches", "(", "\n", "b", ",", "[", "1", ",", "kernel", ",", "kernel", ",", "1", "]", ",", "[", "1", ",", "rate", "*", "stride", ",", "rate", "*", "stride", ",", "1", "]", ",", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "padding", "=", "'SAME'", ")", "\n", "raw_w", "=", "tf", ".", "reshape", "(", "raw_w", ",", "[", "raw_int_bs", "[", "0", "]", ",", "-", "1", ",", "kernel", ",", "kernel", ",", "raw_int_bs", "[", "3", "]", "]", ")", "\n", "raw_w", "=", "tf", ".", "transpose", "(", "raw_w", ",", "[", "0", ",", "2", ",", "3", ",", "4", ",", "1", "]", ")", "# transpose to b*k*k*c*hw", "\n", "# downscaling foreground option: downscaling both foreground and", "\n", "# background for matching and use original background for reconstruction.", "\n", "f", "=", "cls", ".", "resize", "(", "f", ",", "scale", "=", "1.", "/", "rate", ",", "func", "=", "tf", ".", "compat", ".", "v1", ".", "image", ".", "resize_nearest_neighbor", ")", "\n", "b", "=", "cls", ".", "resize", "(", "b", ",", "to_shape", "=", "[", "int", "(", "raw_int_bs", "[", "1", "]", "/", "rate", ")", ",", "int", "(", "raw_int_bs", "[", "2", "]", "/", "rate", ")", "]", ",", "\n", "func", "=", "tf", ".", "compat", ".", "v1", ".", "image", ".", "resize_nearest_neighbor", ")", "# https://github.com/tensorflow/tensorflow/issues/11651", "\n", "\n", "fs", "=", "tf", ".", "shape", "(", "f", ")", "\n", "int_fs", "=", "f", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "f_groups", "=", "tf", ".", "split", "(", "f", ",", "int_fs", "[", "0", "]", ",", "axis", "=", "0", ")", "\n", "# from t(H*W*C) to w(b*k*k*c*h*w)", "\n", "bs", "=", "tf", ".", "shape", "(", "b", ")", "\n", "int_bs", "=", "b", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "w", "=", "tf", ".", "compat", ".", "v1", ".", "extract_image_patches", "(", "\n", "b", ",", "[", "1", ",", "ksize", ",", "ksize", ",", "1", "]", ",", "[", "1", ",", "stride", ",", "stride", ",", "1", "]", ",", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "padding", "=", "'SAME'", ")", "\n", "w", "=", "tf", ".", "reshape", "(", "w", ",", "[", "int_fs", "[", "0", "]", ",", "-", "1", ",", "ksize", ",", "ksize", ",", "int_fs", "[", "3", "]", "]", ")", "\n", "w", "=", "tf", ".", "transpose", "(", "w", ",", "[", "0", ",", "2", ",", "3", ",", "4", ",", "1", "]", ")", "# transpose to b*k*k*c*hw", "\n", "\n", "# process mask", "\n", "if", "mask", "is", "None", ":", "\n", "            ", "mask", "=", "tf", ".", "zeros", "(", "[", "1", ",", "bs", "[", "1", "]", ",", "bs", "[", "2", "]", ",", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "mask", "=", "cls", ".", "resize", "(", "mask", ",", "scale", "=", "1.", "/", "rate", ",", "func", "=", "tf", ".", "compat", ".", "v1", ".", "image", ".", "resize_nearest_neighbor", ")", "\n", "\n", "", "m_patches", "=", "tf", ".", "compat", ".", "v1", ".", "extract_image_patches", "(", "\n", "mask", ",", "[", "1", ",", "ksize", ",", "ksize", ",", "1", "]", ",", "[", "1", ",", "stride", ",", "stride", ",", "1", "]", ",", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "padding", "=", "'SAME'", ")", "\n", "m_patches", "=", "tf", ".", "reshape", "(", "m_patches", ",", "[", "m_patches", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "0", "]", ",", "-", "1", ",", "ksize", ",", "ksize", ",", "1", "]", ")", "\n", "m_patches", "=", "tf", ".", "transpose", "(", "m_patches", ",", "[", "0", ",", "2", ",", "3", ",", "4", ",", "1", "]", ")", "# transpose to b*k*k*c*hw", "\n", "m_patches", "=", "tf", ".", "cast", "(", "tf", ".", "equal", "(", "tf", ".", "reduce_mean", "(", "m_patches", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ",", "keepdims", "=", "True", ")", ",", "0.", ")", ",", "tf", ".", "float32", ")", "\n", "\n", "w_norm", "=", "w", "/", "tf", ".", "maximum", "(", "tf", ".", "sqrt", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "w", ")", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ",", "keepdims", "=", "True", ")", ")", ",", "1e-4", ")", "\n", "w_norm_groups", "=", "tf", ".", "split", "(", "w_norm", ",", "int_bs", "[", "0", "]", ",", "axis", "=", "0", ")", "\n", "raw_w_groups", "=", "tf", ".", "split", "(", "raw_w", ",", "int_bs", "[", "0", "]", ",", "axis", "=", "0", ")", "\n", "y", "=", "[", "]", "\n", "offsets", "=", "[", "]", "\n", "k", "=", "fuse_k", "\n", "scale", "=", "softmax_scale", "\n", "fuse_weight", "=", "tf", ".", "reshape", "(", "tf", ".", "eye", "(", "k", ")", ",", "[", "k", ",", "k", ",", "1", ",", "1", "]", ")", "\n", "\n", "for", "i", ",", "(", "xi", ",", "wi_normed", ",", "raw_wi", ")", "in", "enumerate", "(", "zip", "(", "f_groups", ",", "w_norm_groups", ",", "raw_w_groups", ")", ")", ":", "\n", "            ", "mm", "=", "m_patches", "[", "i", "]", "\n", "\n", "# conv for compare", "\n", "wi_normed", "=", "wi_normed", "[", "0", "]", "\n", "yi", "=", "tf", ".", "nn", ".", "conv2d", "(", "xi", ",", "wi_normed", ",", "strides", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "padding", "=", "\"SAME\"", ")", "\n", "\n", "# conv implementation for fuse scores to encourage large patches", "\n", "if", "fuse", ":", "\n", "                ", "yi", "=", "tf", ".", "reshape", "(", "yi", ",", "[", "1", ",", "fs", "[", "1", "]", "*", "fs", "[", "2", "]", ",", "bs", "[", "1", "]", "*", "bs", "[", "2", "]", ",", "1", "]", ")", "\n", "yi", "=", "tf", ".", "nn", ".", "conv2d", "(", "yi", ",", "fuse_weight", ",", "strides", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "padding", "=", "'SAME'", ")", "\n", "yi", "=", "tf", ".", "reshape", "(", "yi", ",", "[", "1", ",", "fs", "[", "1", "]", ",", "fs", "[", "2", "]", ",", "bs", "[", "1", "]", ",", "bs", "[", "2", "]", "]", ")", "\n", "yi", "=", "tf", ".", "transpose", "(", "yi", ",", "[", "0", ",", "2", ",", "1", ",", "4", ",", "3", "]", ")", "\n", "yi", "=", "tf", ".", "reshape", "(", "yi", ",", "[", "1", ",", "fs", "[", "1", "]", "*", "fs", "[", "2", "]", ",", "bs", "[", "1", "]", "*", "bs", "[", "2", "]", ",", "1", "]", ")", "\n", "yi", "=", "tf", ".", "nn", ".", "conv2d", "(", "yi", ",", "fuse_weight", ",", "strides", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "padding", "=", "'SAME'", ")", "\n", "yi", "=", "tf", ".", "reshape", "(", "yi", ",", "[", "1", ",", "fs", "[", "2", "]", ",", "fs", "[", "1", "]", ",", "bs", "[", "2", "]", ",", "bs", "[", "1", "]", "]", ")", "\n", "yi", "=", "tf", ".", "transpose", "(", "yi", ",", "[", "0", ",", "2", ",", "1", ",", "4", ",", "3", "]", ")", "\n", "", "yi", "=", "tf", ".", "reshape", "(", "yi", ",", "[", "1", ",", "fs", "[", "1", "]", ",", "fs", "[", "2", "]", ",", "bs", "[", "1", "]", "*", "bs", "[", "2", "]", "]", ")", "\n", "\n", "# softmax to match", "\n", "yi", "*=", "mm", "# mask", "\n", "yi", "=", "tf", ".", "nn", ".", "softmax", "(", "yi", "*", "scale", ",", "3", ")", "\n", "yi", "*=", "mm", "# mask", "\n", "\n", "offset", "=", "tf", ".", "argmax", "(", "yi", ",", "axis", "=", "3", ",", "output_type", "=", "tf", ".", "int32", ")", "\n", "offset", "=", "tf", ".", "stack", "(", "[", "offset", "//", "fs", "[", "2", "]", ",", "offset", "%", "fs", "[", "2", "]", "]", ",", "axis", "=", "-", "1", ")", "\n", "# deconv for patch pasting", "\n", "# 3.1 paste center", "\n", "wi_center", "=", "raw_wi", "[", "0", "]", "\n", "yi", "=", "tf", ".", "nn", ".", "conv2d_transpose", "(", "yi", ",", "wi_center", ",", "tf", ".", "concat", "(", "[", "[", "1", "]", ",", "raw_fs", "[", "1", ":", "]", "]", ",", "axis", "=", "0", ")", ",", "\n", "strides", "=", "[", "1", ",", "rate", ",", "rate", ",", "1", "]", ")", "/", "4.", "\n", "y", ".", "append", "(", "yi", ")", "\n", "offsets", ".", "append", "(", "offset", ")", "\n", "", "y", "=", "tf", ".", "concat", "(", "y", ",", "axis", "=", "0", ")", "\n", "y", ".", "set_shape", "(", "raw_int_fs", ")", "\n", "offsets", "=", "tf", ".", "concat", "(", "offsets", ",", "axis", "=", "0", ")", "\n", "offsets", ".", "set_shape", "(", "int_bs", "[", ":", "3", "]", "+", "[", "2", "]", ")", "\n", "# case1: visualize optical flow: minus current position", "\n", "h_add", "=", "tf", ".", "tile", "(", "tf", ".", "reshape", "(", "tf", ".", "range", "(", "bs", "[", "1", "]", ")", ",", "[", "1", ",", "bs", "[", "1", "]", ",", "1", ",", "1", "]", ")", ",", "[", "bs", "[", "0", "]", ",", "1", ",", "bs", "[", "2", "]", ",", "1", "]", ")", "\n", "w_add", "=", "tf", ".", "tile", "(", "tf", ".", "reshape", "(", "tf", ".", "range", "(", "bs", "[", "2", "]", ")", ",", "[", "1", ",", "1", ",", "bs", "[", "2", "]", ",", "1", "]", ")", ",", "[", "bs", "[", "0", "]", ",", "bs", "[", "1", "]", ",", "1", ",", "1", "]", ")", "\n", "offsets", "=", "offsets", "-", "tf", ".", "concat", "(", "[", "h_add", ",", "w_add", "]", ",", "axis", "=", "3", ")", "\n", "# to flow image", "\n", "flow", "=", "cls", ".", "flow_to_image_tf", "(", "offsets", ")", "\n", "# # case2: visualize which pixels are attended", "\n", "# flow = highlight_flow_tf(offsets * tf.cast(mask, tf.int32))", "\n", "if", "rate", "!=", "1", ":", "\n", "            ", "flow", "=", "cls", ".", "resize", "(", "flow", ",", "scale", "=", "rate", ",", "func", "=", "tf", ".", "compat", ".", "v1", ".", "image", ".", "resize_nearest_neighbor", ")", "\n", "", "return", "y", ",", "flow", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.CAInpainter.CAInpainter.resize_mask_like": [[396, 412], ["cls.resize", "x.get_shape().as_list", "x.get_shape"], "methods", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.CAInpainter.CAInpainter.resize"], ["", "@", "classmethod", "\n", "def", "resize_mask_like", "(", "cls", ",", "mask", ",", "x", ")", ":", "\n", "        ", "\"\"\"Resize mask like shape of x.\n\n        Args:\n            mask: Original mask.\n            x: To shape of x.\n\n        Returns:\n            tf.Tensor: resized mask\n\n        \"\"\"", "\n", "mask_resize", "=", "cls", ".", "resize", "(", "\n", "mask", ",", "to_shape", "=", "x", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", ":", "3", "]", ",", "\n", "func", "=", "tf", ".", "compat", ".", "v1", ".", "image", ".", "resize_nearest_neighbor", ")", "\n", "return", "mask_resize", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.CAInpainter.CAInpainter.flow_to_image_tf": [[413, 422], ["tensorflow.compat.v1.variable_scope", "tensorflow.device", "tensorflow.compat.v1.py_func", "tensorflow.compat.v1.py_func.set_shape", "flow.get_shape().as_list", "flow.get_shape"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "flow_to_image_tf", "(", "cls", ",", "flow", ",", "name", "=", "'flow_to_image'", ")", ":", "\n", "        ", "\"\"\"Tensorflow ops for computing flow to image.\n        \"\"\"", "\n", "with", "tf", ".", "compat", ".", "v1", ".", "variable_scope", "(", "name", ")", ",", "tf", ".", "device", "(", "'/cpu:0'", ")", ":", "\n", "            ", "img", "=", "tf", ".", "compat", ".", "v1", ".", "py_func", "(", "cls", ".", "flow_to_image", ",", "[", "flow", "]", ",", "tf", ".", "float32", ",", "stateful", "=", "False", ")", "\n", "img", ".", "set_shape", "(", "flow", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "0", ":", "-", "1", "]", "+", "[", "3", "]", ")", "\n", "img", "=", "img", "/", "127.5", "-", "1.", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.CAInpainter.CAInpainter.flow_to_image": [[423, 451], ["range", "numpy.float32", "max", "min", "max", "min", "numpy.sqrt", "max", "cls.compute_color", "out.append", "numpy.uint8", "numpy.max", "numpy.min", "numpy.max", "numpy.min", "numpy.max", "abs", "abs", "numpy.finfo", "numpy.finfo"], "methods", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.CAInpainter.CAInpainter.compute_color"], ["", "", "@", "classmethod", "\n", "def", "flow_to_image", "(", "cls", ",", "flow", ")", ":", "\n", "        ", "\"\"\"Transfer flow map to image.\n        Part of code forked from flownet.\n        \"\"\"", "\n", "out", "=", "[", "]", "\n", "maxu", "=", "-", "999.", "\n", "maxv", "=", "-", "999.", "\n", "minu", "=", "999.", "\n", "minv", "=", "999.", "\n", "maxrad", "=", "-", "1", "\n", "for", "i", "in", "range", "(", "flow", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "u", "=", "flow", "[", "i", ",", ":", ",", ":", ",", "0", "]", "\n", "v", "=", "flow", "[", "i", ",", ":", ",", ":", ",", "1", "]", "\n", "idxunknow", "=", "(", "abs", "(", "u", ")", ">", "1e7", ")", "|", "(", "abs", "(", "v", ")", ">", "1e7", ")", "\n", "u", "[", "idxunknow", "]", "=", "0", "\n", "v", "[", "idxunknow", "]", "=", "0", "\n", "maxu", "=", "max", "(", "maxu", ",", "np", ".", "max", "(", "u", ")", ")", "\n", "minu", "=", "min", "(", "minu", ",", "np", ".", "min", "(", "u", ")", ")", "\n", "maxv", "=", "max", "(", "maxv", ",", "np", ".", "max", "(", "v", ")", ")", "\n", "minv", "=", "min", "(", "minv", ",", "np", ".", "min", "(", "v", ")", ")", "\n", "rad", "=", "np", ".", "sqrt", "(", "u", "**", "2", "+", "v", "**", "2", ")", "\n", "maxrad", "=", "max", "(", "maxrad", ",", "np", ".", "max", "(", "rad", ")", ")", "\n", "u", "=", "u", "/", "(", "maxrad", "+", "np", ".", "finfo", "(", "float", ")", ".", "eps", ")", "\n", "v", "=", "v", "/", "(", "maxrad", "+", "np", ".", "finfo", "(", "float", ")", ".", "eps", ")", "\n", "img", "=", "cls", ".", "compute_color", "(", "u", ",", "v", ")", "\n", "out", ".", "append", "(", "img", ")", "\n", "", "return", "np", ".", "float32", "(", "np", ".", "uint8", "(", "out", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.CAInpainter.CAInpainter.compute_color": [[452, 480], ["numpy.zeros", "cls.make_color_wheel", "numpy.size", "numpy.sqrt", "numpy.floor().astype", "range", "numpy.isnan", "numpy.isnan", "numpy.arctan2", "numpy.size", "numpy.logical_not", "numpy.uint8", "numpy.floor", "numpy.floor"], "methods", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.CAInpainter.CAInpainter.make_color_wheel"], ["", "@", "classmethod", "\n", "def", "compute_color", "(", "cls", ",", "u", ",", "v", ")", ":", "\n", "        ", "h", ",", "w", "=", "u", ".", "shape", "\n", "img", "=", "np", ".", "zeros", "(", "[", "h", ",", "w", ",", "3", "]", ")", "\n", "nanIdx", "=", "np", ".", "isnan", "(", "u", ")", "|", "np", ".", "isnan", "(", "v", ")", "\n", "u", "[", "nanIdx", "]", "=", "0", "\n", "v", "[", "nanIdx", "]", "=", "0", "\n", "# colorwheel = COLORWHEEL", "\n", "colorwheel", "=", "cls", ".", "make_color_wheel", "(", ")", "\n", "ncols", "=", "np", ".", "size", "(", "colorwheel", ",", "0", ")", "\n", "rad", "=", "np", ".", "sqrt", "(", "u", "**", "2", "+", "v", "**", "2", ")", "\n", "a", "=", "np", ".", "arctan2", "(", "-", "v", ",", "-", "u", ")", "/", "np", ".", "pi", "\n", "fk", "=", "(", "a", "+", "1", ")", "/", "2", "*", "(", "ncols", "-", "1", ")", "+", "1", "\n", "k0", "=", "np", ".", "floor", "(", "fk", ")", ".", "astype", "(", "int", ")", "\n", "k1", "=", "k0", "+", "1", "\n", "k1", "[", "k1", "==", "ncols", "+", "1", "]", "=", "1", "\n", "f", "=", "fk", "-", "k0", "\n", "for", "i", "in", "range", "(", "np", ".", "size", "(", "colorwheel", ",", "1", ")", ")", ":", "\n", "            ", "tmp", "=", "colorwheel", "[", ":", ",", "i", "]", "\n", "col0", "=", "tmp", "[", "k0", "-", "1", "]", "/", "255", "\n", "col1", "=", "tmp", "[", "k1", "-", "1", "]", "/", "255", "\n", "col", "=", "(", "1", "-", "f", ")", "*", "col0", "+", "f", "*", "col1", "\n", "idx", "=", "rad", "<=", "1", "\n", "col", "[", "idx", "]", "=", "1", "-", "rad", "[", "idx", "]", "*", "(", "1", "-", "col", "[", "idx", "]", ")", "\n", "notidx", "=", "np", ".", "logical_not", "(", "idx", ")", "\n", "col", "[", "notidx", "]", "*=", "0.75", "\n", "img", "[", ":", ",", ":", ",", "i", "]", "=", "np", ".", "uint8", "(", "np", ".", "floor", "(", "255", "*", "col", "*", "(", "1", "-", "nanIdx", ")", ")", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.CAInpainter.CAInpainter.make_color_wheel": [[481, 511], ["numpy.zeros", "numpy.transpose", "numpy.transpose", "numpy.transpose", "numpy.floor", "numpy.transpose", "numpy.floor", "numpy.transpose", "numpy.floor", "numpy.transpose", "numpy.floor", "numpy.floor", "numpy.floor", "numpy.arange", "numpy.arange", "numpy.arange", "numpy.arange", "numpy.arange", "numpy.arange"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "make_color_wheel", "(", "cls", ")", ":", "\n", "        ", "RY", ",", "YG", ",", "GC", ",", "CB", ",", "BM", ",", "MR", "=", "(", "15", ",", "6", ",", "4", ",", "11", ",", "13", ",", "6", ")", "\n", "ncols", "=", "RY", "+", "YG", "+", "GC", "+", "CB", "+", "BM", "+", "MR", "\n", "colorwheel", "=", "np", ".", "zeros", "(", "[", "ncols", ",", "3", "]", ")", "\n", "col", "=", "0", "\n", "# RY", "\n", "colorwheel", "[", "0", ":", "RY", ",", "0", "]", "=", "255", "\n", "colorwheel", "[", "0", ":", "RY", ",", "1", "]", "=", "np", ".", "transpose", "(", "np", ".", "floor", "(", "255", "*", "np", ".", "arange", "(", "0", ",", "RY", ")", "/", "RY", ")", ")", "\n", "col", "+=", "RY", "\n", "# YG", "\n", "colorwheel", "[", "col", ":", "col", "+", "YG", ",", "0", "]", "=", "255", "-", "np", ".", "transpose", "(", "np", ".", "floor", "(", "255", "*", "np", ".", "arange", "(", "0", ",", "YG", ")", "/", "YG", ")", ")", "\n", "colorwheel", "[", "col", ":", "col", "+", "YG", ",", "1", "]", "=", "255", "\n", "col", "+=", "YG", "\n", "# GC", "\n", "colorwheel", "[", "col", ":", "col", "+", "GC", ",", "1", "]", "=", "255", "\n", "colorwheel", "[", "col", ":", "col", "+", "GC", ",", "2", "]", "=", "np", ".", "transpose", "(", "np", ".", "floor", "(", "255", "*", "np", ".", "arange", "(", "0", ",", "GC", ")", "/", "GC", ")", ")", "\n", "col", "+=", "GC", "\n", "# CB", "\n", "colorwheel", "[", "col", ":", "col", "+", "CB", ",", "1", "]", "=", "255", "-", "np", ".", "transpose", "(", "np", ".", "floor", "(", "255", "*", "np", ".", "arange", "(", "0", ",", "CB", ")", "/", "CB", ")", ")", "\n", "colorwheel", "[", "col", ":", "col", "+", "CB", ",", "2", "]", "=", "255", "\n", "col", "+=", "CB", "\n", "# BM", "\n", "colorwheel", "[", "col", ":", "col", "+", "BM", ",", "2", "]", "=", "255", "\n", "colorwheel", "[", "col", ":", "col", "+", "BM", ",", "0", "]", "=", "np", ".", "transpose", "(", "np", ".", "floor", "(", "255", "*", "np", ".", "arange", "(", "0", ",", "BM", ")", "/", "BM", ")", ")", "\n", "col", "+=", "+", "BM", "\n", "# MR", "\n", "colorwheel", "[", "col", ":", "col", "+", "MR", ",", "2", "]", "=", "255", "-", "np", ".", "transpose", "(", "np", ".", "floor", "(", "255", "*", "np", ".", "arange", "(", "0", ",", "MR", ")", "/", "MR", ")", ")", "\n", "colorwheel", "[", "col", ":", "col", "+", "MR", ",", "0", "]", "=", "255", "\n", "return", "colorwheel", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.CAInpainter.CAInpainter.resize": [[512, 529], ["tensorflow.cast", "func.get_shape().as_list", "tensorflow.compat.v1.variable_scope", "tensorflow.shape", "tensorflow.cast", "tensorflow.cast", "int", "int", "func", "func", "func.get_shape"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "resize", "(", "cls", ",", "x", ",", "scale", "=", "2.", ",", "to_shape", "=", "None", ",", "align_corners", "=", "True", ",", "dynamic", "=", "False", ",", "\n", "func", "=", "tf", ".", "compat", ".", "v1", ".", "image", ".", "resize_bilinear", ",", "name", "=", "'resize'", ")", ":", "\n", "        ", "if", "dynamic", ":", "\n", "            ", "xs", "=", "tf", ".", "cast", "(", "tf", ".", "shape", "(", "x", ")", ",", "tf", ".", "float32", ")", "\n", "new_xs", "=", "[", "tf", ".", "cast", "(", "xs", "[", "1", "]", "*", "scale", ",", "tf", ".", "int32", ")", ",", "\n", "tf", ".", "cast", "(", "xs", "[", "2", "]", "*", "scale", ",", "tf", ".", "int32", ")", "]", "\n", "", "else", ":", "\n", "            ", "xs", "=", "x", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "new_xs", "=", "[", "int", "(", "xs", "[", "1", "]", "*", "scale", ")", ",", "int", "(", "xs", "[", "2", "]", "*", "scale", ")", "]", "\n", "", "with", "tf", ".", "compat", ".", "v1", ".", "variable_scope", "(", "name", ")", ":", "\n", "            ", "if", "to_shape", "is", "None", ":", "\n", "                ", "x", "=", "func", "(", "x", ",", "new_xs", ",", "align_corners", "=", "align_corners", ")", "\n", "", "else", ":", "\n", "                ", "x", "=", "func", "(", "x", ",", "[", "to_shape", "[", "0", "]", ",", "to_shape", "[", "1", "]", "]", ",", "\n", "align_corners", "=", "align_corners", ")", "\n", "", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.CAInpainter.CAInpainter.time_impute_missing_imgs": [[530, 535], ["time.time", "CAInpainter.CAInpainter.impute_missing_imgs", "print", "time.time"], "methods", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.Baseline.RandomColorWithNoiseInpainter.impute_missing_imgs"], ["", "def", "time_impute_missing_imgs", "(", "self", ",", "pytorch_image", ",", "pytorch_mask", ")", ":", "\n", "        ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "result", "=", "self", ".", "impute_missing_imgs", "(", "pytorch_image", ",", "pytorch_mask", ")", "\n", "print", "(", "'Total time:'", ",", "time", ".", "time", "(", ")", "-", "start_time", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.CAInpainter.CAInpainter.reset": [[536, 538], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.CAInpainter.CAInpainter.eval": [[539, 541], ["None"], "methods", ["None"], ["", "def", "eval", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.CAInpainter.CAInpainter.cuda": [[542, 545], ["CAInpainter.CAInpainter.upsample.cuda", "CAInpainter.CAInpainter.downsample.cuda"], "methods", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.CAInpainter.CAInpainter.cuda", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.CAInpainter.CAInpainter.cuda"], ["", "def", "cuda", "(", "self", ")", ":", "\n", "        ", "self", ".", "upsample", ".", "cuda", "(", ")", "\n", "self", ".", "downsample", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.CAInpainter.CAInpainter.__del__": [[546, 548], ["CAInpainter.CAInpainter.sess.close"], "methods", ["None"], ["", "def", "__del__", "(", "self", ")", ":", "\n", "        ", "self", ".", "sess", ".", "close", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.AdvInpainting.AdvInpainting.__init__": [[7, 23], ["super().__init__", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss"], "methods", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.bit_pytorch.lbtoolbox.Chrono.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "loss_fn", "=", "None", ",", "eps", "=", "0.3", ",", "nb_iter", "=", "40", ",", "\n", "alpha", "=", "0.375", ",", "rand_init", "=", "True", ",", "clip_min", "=", "-", "1.", ",", "\n", "clip_max", "=", "1.", ",", "attack", "=", "'fgsm'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "loss_fn", "=", "loss_fn", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "nb_iter", "=", "nb_iter", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "rand_init", "=", "rand_init", "\n", "self", ".", "clip_min", "=", "clip_min", "\n", "self", ".", "clip_max", "=", "clip_max", "\n", "self", ".", "attack", "=", "attack", "\n", "\n", "if", "self", ".", "loss_fn", "is", "None", ":", "\n", "            ", "self", ".", "loss_fn", "=", "nn", ".", "CrossEntropyLoss", "(", "reduction", "=", "\"sum\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.AdvInpainting.AdvInpainting.forward": [[24, 66], ["torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.max", "torch.max", "torch.max", "torch.max", "delta.detach.detach.detach", "advertorch.context.ctx_noparamgrad_and_eval", "torch.zeros_like().uniform_", "torch.zeros_like().uniform_", "torch.zeros_like().uniform_", "torch.zeros_like().uniform_", "AdvInpainting.AdvInpainting.model", "AdvInpainting.AdvInpainting.loss_fn", "AdvInpainting.AdvInpainting.backward", "delta.detach.detach.grad.detach", "torch.min", "torch.min", "torch.min", "torch.min", "torch.zeros_like().uniform_", "torch.zeros_like().uniform_", "torch.zeros_like().uniform_", "torch.zeros_like().uniform_", "torch.max", "torch.max", "torch.max", "torch.max", "torch.min", "torch.min", "torch.min", "torch.min", "advertorch.context.ctx_noparamgrad_and_eval", "range", "delta.detach.detach.detach", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "AdvInpainting.AdvInpainting.model", "AdvInpainting.AdvInpainting.loss_fn", "AdvInpainting.AdvInpainting.backward", "delta.detach.detach.grad.detach", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.max", "torch.max", "torch.max", "torch.max", "AdvInpainting.AdvInpainting.max", "torch.min", "torch.min", "torch.min", "torch.min", "torch.sign", "torch.sign", "torch.sign", "torch.sign"], "methods", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.GAN_Inpainting.AE_GAN.loss_fn", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.GAN_Inpainting.AE_GAN.loss_fn"], ["", "", "def", "forward", "(", "self", ",", "X", ",", "mask", ",", "y", ")", ":", "\n", "        ", "if", "self", ".", "attack", "==", "'fgsm'", ":", "\n", "            ", "with", "ctx_noparamgrad_and_eval", "(", "self", ".", "model", ")", ":", "\n", "                ", "delta", "=", "torch", ".", "zeros_like", "(", "X", ")", ".", "uniform_", "(", "\n", "-", "self", ".", "eps", ",", "self", ".", "eps", ")", "\n", "delta", ".", "requires_grad", "=", "True", "\n", "output", "=", "self", ".", "model", "(", "X", "+", "delta", ")", "\n", "loss", "=", "self", ".", "loss_fn", "(", "output", ",", "y", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "grad", "=", "delta", ".", "grad", ".", "detach", "(", ")", "\n", "", "delta", ".", "data", "=", "torch", ".", "clamp", "(", "delta", "+", "self", ".", "alpha", "*", "torch", ".", "sign", "(", "grad", ")", ",", "\n", "-", "self", ".", "eps", ",", "\n", "self", ".", "eps", ")", "\n", "delta", ".", "data", "=", "torch", ".", "max", "(", "torch", ".", "min", "(", "\n", "self", ".", "clip_max", "-", "X", ",", "delta", ".", "data", ")", ",", "self", ".", "clip_min", "-", "X", ")", "\n", "delta", ".", "data", "[", "(", "mask", "==", "1", ")", ".", "expand_as", "(", "delta", ")", "]", "=", "0.", "\n", "delta", "=", "delta", ".", "detach", "(", ")", "\n", "", "elif", "self", ".", "attack", "==", "'pgd'", ":", "\n", "            ", "delta", "=", "torch", ".", "zeros_like", "(", "X", ")", ".", "uniform_", "(", "\n", "-", "self", ".", "eps", ",", "self", ".", "eps", ")", "\n", "delta", ".", "data", "=", "torch", ".", "max", "(", "torch", ".", "min", "(", "\n", "self", ".", "clip_max", "-", "X", ",", "delta", ".", "data", ")", ",", "self", ".", "clip_min", "-", "X", ")", "\n", "delta", ".", "requires_grad", "=", "True", "\n", "\n", "with", "ctx_noparamgrad_and_eval", "(", "self", ".", "model", ")", ":", "\n", "                ", "for", "_", "in", "range", "(", "self", ".", "nb_iter", ")", ":", "\n", "                    ", "delta", ".", "data", "[", "(", "mask", "==", "1", ")", ".", "expand_as", "(", "delta", ")", "]", "=", "0.", "\n", "output", "=", "self", ".", "model", "(", "X", "+", "delta", ")", "\n", "loss", "=", "self", ".", "loss_fn", "(", "output", ",", "y", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "grad", "=", "delta", ".", "grad", ".", "detach", "(", ")", "\n", "I", "=", "output", ".", "max", "(", "1", ")", "[", "1", "]", "==", "y", "\n", "delta", ".", "data", "[", "I", "]", "=", "torch", ".", "clamp", "(", "\n", "delta", "+", "self", ".", "alpha", "*", "torch", ".", "sign", "(", "grad", ")", ",", "\n", "-", "self", ".", "eps", ",", "\n", "self", ".", "eps", ")", "[", "I", "]", "\n", "delta", ".", "data", "[", "I", "]", "=", "torch", ".", "max", "(", "torch", ".", "min", "(", "\n", "self", ".", "clip_max", "-", "X", ",", "delta", ".", "data", ")", ",", "self", ".", "clip_min", "-", "X", ")", "[", "I", "]", "\n", "", "delta", ".", "data", "[", "(", "mask", "==", "1", ")", ".", "expand_as", "(", "delta", ")", "]", "=", "0.", "\n", "delta", "=", "delta", ".", "detach", "(", ")", "\n", "\n", "", "", "return", "X", "+", "delta", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.GAN_Inpainting.GAN_Common.set_up_gan_g": [[15, 22], ["exp.vbd_imagenet.nets.GAN.GAN_G.PureGAN_G", "GAN_Inpainting.GAN_Common.gan_g_model.load_state_dict", "GAN_Inpainting.GAN_Common.gan_g_model.parameters", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.GAN_Inpainting.AE_GAN.load_state_dict"], ["    ", "def", "set_up_gan_g", "(", "self", ",", "gan_g_dir", ")", ":", "\n", "# Define generator and load weights", "\n", "        ", "self", ".", "gan_g_model", "=", "PureGAN_G", "(", ")", "\n", "self", ".", "gan_g_model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "gan_g_dir", ",", "'GAN_G.pth'", ")", ",", "\n", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", ")", "\n", "for", "param", "in", "self", ".", "gan_g_model", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.GAN_Inpainting.AE_GAN.__init__": [[25, 52], ["arch.Inpainting.InpaintingBase.InpaintingBase.__init__", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "exp.vbd_imagenet.nets.BVLC.BVLC_NET.ImpaintBVLC", "GAN_Inpainting.AE_GAN.bvlc_encoder_net.state_dict", "GAN_Inpainting.AE_GAN.update", "GAN_Inpainting.AE_GAN.bvlc_encoder_net.load_state_dict", "GAN_Inpainting.AE_GAN.set_up_gan_g", "os.path.join", "exp.vbd_imagenet.nets.BVLC.BVLC_NET.BVLC_NET", "GAN_Inpainting.AE_GAN.hidden_fixed_encoder.state_dict", "GAN_Inpainting.AE_GAN.update", "GAN_Inpainting.AE_GAN.hidden_fixed_encoder.load_state_dict", "GAN_Inpainting.AE_GAN.hidden_fixed_encoder.parameters"], "methods", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.bit_pytorch.lbtoolbox.Chrono.__init__", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.GAN_Inpainting.AE_GAN.state_dict", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.GAN_Inpainting.AE_GAN.load_state_dict", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.GAN_Inpainting.GAN_Common.set_up_gan_g", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.GAN_Inpainting.AE_GAN.state_dict", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.GAN_Inpainting.AE_GAN.load_state_dict"], ["    ", "def", "__init__", "(", "self", ",", "bvlc_dir", ",", "gan_g_dir", ",", "reg_coef", "=", "0.", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "AE_GAN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "reg_coef", "=", "reg_coef", "\n", "\n", "## Define encoder", "\n", "pretrained_dict", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "bvlc_dir", ",", "'bvlc_reference_pytorch_net.pth'", ")", ")", "\n", "del", "pretrained_dict", "[", "'fc7.weight'", "]", ",", "pretrained_dict", "[", "'fc7.bias'", "]", ",", "pretrained_dict", "[", "'fc8.weight'", "]", ",", "pretrained_dict", "[", "'fc8.bias'", "]", "\n", "\n", "self", ".", "bvlc_encoder_net", "=", "ImpaintBVLC", "(", ")", "\n", "state", "=", "self", ".", "bvlc_encoder_net", ".", "state_dict", "(", ")", "\n", "state", ".", "update", "(", "pretrained_dict", ")", "\n", "# Save some storage", "\n", "self", ".", "bvlc_encoder_net", ".", "load_state_dict", "(", "state", ")", "\n", "\n", "# To save some memories if not used autoencoding loss", "\n", "if", "reg_coef", ">", "0.", ":", "\n", "            ", "self", ".", "hidden_fixed_encoder", "=", "BVLC_NET", "(", ")", "\n", "state", "=", "self", ".", "hidden_fixed_encoder", ".", "state_dict", "(", ")", "\n", "state", ".", "update", "(", "pretrained_dict", ")", "\n", "self", ".", "hidden_fixed_encoder", ".", "load_state_dict", "(", "state", ")", "\n", "for", "param", "in", "self", ".", "hidden_fixed_encoder", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "\n", "## Define generator", "\n", "", "", "self", ".", "set_up_gan_g", "(", "gan_g_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.GAN_Inpainting.AE_GAN.state_dict": [[53, 55], ["GAN_Inpainting.AE_GAN.bvlc_encoder_net.state_dict"], "methods", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.GAN_Inpainting.AE_GAN.state_dict"], ["", "def", "state_dict", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "bvlc_encoder_net", ".", "state_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.GAN_Inpainting.AE_GAN.load_state_dict": [[56, 58], ["GAN_Inpainting.AE_GAN.bvlc_encoder_net.load_state_dict"], "methods", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.GAN_Inpainting.AE_GAN.load_state_dict"], ["", "def", "load_state_dict", "(", "self", ",", "state_dict", ")", ":", "\n", "        ", "self", ".", "bvlc_encoder_net", ".", "load_state_dict", "(", "state_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.GAN_Inpainting.AE_GAN.forward": [[59, 81], ["GAN_Inpainting.AE_GAN.bvlc_encoder_net.train_generate_fc6_code", "GAN_Inpainting.AE_GAN.gan_g_model", "GAN_Inpainting.AE_GAN.center_crop", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "GAN_Inpainting.AE_GAN.index_select", "GAN_Inpainting.AE_GAN.normalize_imgs", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "GAN_Inpainting.AE_GAN.data.new().long", "GAN_Inpainting.AE_GAN.data.new().fill_", "GAN_Inpainting.AE_GAN.data.new", "GAN_Inpainting.AE_GAN.data.new", "GAN_Inpainting.AE_GAN.size", "GAN_Inpainting.AE_GAN.size", "GAN_Inpainting.AE_GAN.size"], "methods", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.GAN_Inpainting.AE_GAN.center_crop", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.GAN_Inpainting.AE_GAN.normalize_imgs"], ["", "def", "forward", "(", "self", ",", "x", ",", "mask", "=", "None", ")", ":", "\n", "# Encode the parts", "\n", "        ", "if", "mask", "is", "None", ":", "\n", "            ", "mask", "=", "Variable", "(", "x", ".", "data", ".", "new", "(", "x", ".", "size", "(", "0", ")", ",", "1", ",", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", ")", ".", "fill_", "(", "0.", ")", ")", "\n", "\n", "", "h", "=", "self", ".", "bvlc_encoder_net", ".", "train_generate_fc6_code", "(", "x", ",", "mask", ")", "\n", "\n", "# GAN generator parts", "\n", "x", "=", "self", ".", "gan_g_model", "(", "h", ")", "\n", "# Center crop", "\n", "x1", "=", "self", ".", "center_crop", "(", "x", ")", "\n", "\n", "# Change from BGR to RGB. For now pytorch doesn't support ::-1.", "\n", "# Look https://github.com/pytorch/pytorch/issues/229", "\n", "inv_idx", "=", "Variable", "(", "x1", ".", "data", ".", "new", "(", "[", "2", ",", "1", ",", "0", "]", ")", ".", "long", "(", ")", ",", "requires_grad", "=", "False", ")", "\n", "x", "=", "x1", ".", "index_select", "(", "1", ",", "inv_idx", ")", "\n", "\n", "# Normalize caffe range to 0 ~ 1", "\n", "x", "=", "self", ".", "normalize_imgs", "(", "x", ")", "\n", "# Pytorch normalization", "\n", "x", "=", "(", "x", "-", "self", ".", "pth_mean", ")", "/", "self", ".", "pth_std", "\n", "return", "x", ",", "x1", ",", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.GAN_Inpainting.AE_GAN.center_crop": [[82, 89], ["x.size", "x.size"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "center_crop", "(", "x", ",", "size", "=", "224", ")", ":", "\n", "# assert x.size(2) > size and x.size(3) > size", "\n", "\n", "        ", "top_left_coord", "=", "(", "(", "x", ".", "size", "(", "2", ")", "-", "size", ")", "//", "2", ",", "(", "x", ".", "size", "(", "3", ")", "-", "size", ")", "//", "2", ")", "\n", "return", "x", "[", ":", ",", ":", ",", "top_left_coord", "[", "0", "]", ":", "(", "top_left_coord", "[", "0", "]", "+", "size", ")", ",", "\n", "top_left_coord", "[", "1", "]", ":", "(", "top_left_coord", "[", "1", "]", "+", "size", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.GAN_Inpainting.AE_GAN.normalize_imgs": [[90, 95], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "normalize_imgs", "(", "x", ",", "input_range", "=", "(", "-", "120", ",", "120", ")", ")", ":", "\n", "        ", "x", "[", "x", "<", "input_range", "[", "0", "]", "]", "=", "input_range", "[", "0", "]", "\n", "x", "[", "x", ">", "input_range", "[", "1", "]", "]", "=", "input_range", "[", "1", "]", "\n", "return", "(", "x", "-", "input_range", "[", "0", "]", ")", "/", "(", "input_range", "[", "1", "]", "-", "input_range", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.GAN_Inpainting.AE_GAN.loss_fn": [[96, 111], ["x.size", "x.size", "GAN_Inpainting.AE_GAN.hidden_fixed_encoder"], "methods", ["None"], ["", "def", "loss_fn", "(", "self", ",", "outputs", ",", "targets", ",", "mask", ")", ":", "\n", "        ", "x", ",", "x1", ",", "h", "=", "outputs", "\n", "pred_loss", "=", "(", "mask", "*", "(", "x", "-", "targets", ")", "**", "2", ")", ".", "sum", "(", ")", "\n", "\n", "reg_loss", "=", "0.", "\n", "if", "self", ".", "reg_coef", "!=", "0.", ":", "\n", "            ", "reg_loss", "=", "self", ".", "reg_coef", "*", "(", "(", "self", ".", "hidden_fixed_encoder", "(", "x1", ")", "-", "h", ")", "**", "2", ")", ".", "sum", "(", ")", "\n", "self", ".", "reg_loss", "+=", "reg_loss", ".", "data", "[", "0", "]", "\n", "\n", "", "total_loss", "=", "pred_loss", "+", "reg_loss", "\n", "\n", "self", ".", "total_loss", "+=", "total_loss", ".", "data", "[", "0", "]", "\n", "self", ".", "pred_loss", "+=", "pred_loss", ".", "data", "[", "0", "]", "\n", "self", ".", "num_instances", "+=", "x", ".", "size", "(", "0", ")", "\n", "return", "total_loss", "/", "x", ".", "size", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.GAN_Inpainting.AE_GAN.zero_loss_record": [[112, 117], ["None"], "methods", ["None"], ["", "def", "zero_loss_record", "(", "self", ")", ":", "\n", "        ", "self", ".", "total_loss", "=", "0.", "\n", "self", ".", "pred_loss", "=", "0.", "\n", "self", ".", "reg_loss", "=", "0.", "\n", "self", ".", "num_instances", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.GAN_Inpainting.AE_GAN.report_loss": [[118, 122], ["None"], "methods", ["None"], ["", "def", "report_loss", "(", "self", ")", ":", "\n", "        ", "return", "'loss: {} ({}, {})'", ".", "format", "(", "self", ".", "total_loss", "/", "self", ".", "num_instances", ",", "\n", "self", ".", "pred_loss", "/", "self", ".", "num_instances", ",", "\n", "self", ".", "reg_loss", "/", "self", ".", "num_instances", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.GAN_Inpainting.VAE_GAN.__init__": [[125, 136], ["arch.Inpainting.InpaintingBase.VAEInpaintingBase.__init__", "exp.vbd_imagenet.nets.BVLC.BVLC_NET.VAEImpaintBVLC", "GAN_Inpainting.VAE_GAN.bvlc_encoder_net.state_dict", "GAN_Inpainting.VAE_GAN.update", "GAN_Inpainting.VAE_GAN.bvlc_encoder_net.load_state_dict", "GAN_Inpainting.VAE_GAN.set_up_gan_g", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.bit_pytorch.lbtoolbox.Chrono.__init__", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.GAN_Inpainting.AE_GAN.state_dict", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.GAN_Inpainting.AE_GAN.load_state_dict", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.GAN_Inpainting.GAN_Common.set_up_gan_g"], ["    ", "def", "__init__", "(", "self", ",", "bvlc_dir", ",", "gan_g_dir", ",", "clamp", "=", "True", ",", "num_training", "=", "100000", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "VAE_GAN", ",", "self", ")", ".", "__init__", "(", "num_training", "=", "num_training", ")", "\n", "self", ".", "clamp", "=", "clamp", "\n", "\n", "# Define encoder", "\n", "self", ".", "bvlc_encoder_net", "=", "VAEImpaintBVLC", "(", ")", "\n", "state", "=", "self", ".", "bvlc_encoder_net", ".", "state_dict", "(", ")", "\n", "state", ".", "update", "(", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "bvlc_dir", ",", "'bvlc_reference_pytorch_net.pth'", ")", ")", ")", "\n", "self", ".", "bvlc_encoder_net", ".", "load_state_dict", "(", "state", ")", "\n", "\n", "self", ".", "set_up_gan_g", "(", "gan_g_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.GAN_Inpainting.VAE_GAN.forward": [[137, 157], ["GAN_Inpainting.VAE_GAN.bvlc_encoder_net.generate_fc6_code", "GAN_Inpainting.VAE_GAN.reparametrize", "GAN_Inpainting.VAE_GAN.gan_g_model", "GAN_Inpainting.VAE_GAN.center_crop", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "GAN_Inpainting.VAE_GAN.index_select", "GAN_Inpainting.VAE_GAN.normalize_imgs", "GAN_Inpainting.VAE_GAN.bound_range_", "GAN_Inpainting.VAE_GAN.data.new().long", "GAN_Inpainting.VAE_GAN.data.new"], "methods", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.InpaintingBase.VAEInpaintingBase.reparametrize", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.GAN_Inpainting.AE_GAN.center_crop", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.GAN_Inpainting.AE_GAN.normalize_imgs"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# Encode the parts", "\n", "        ", "mu", ",", "logvar", "=", "self", ".", "bvlc_encoder_net", ".", "generate_fc6_code", "(", "x", ")", "\n", "z", "=", "self", ".", "reparametrize", "(", "mu", ",", "logvar", ")", "\n", "if", "self", ".", "clamp", ":", "\n", "            ", "z", "=", "self", ".", "bound_range_", "(", "z", ")", "\n", "\n", "# GAN generator parts", "\n", "", "x", "=", "self", ".", "gan_g_model", "(", "z", ")", "\n", "# Center crop", "\n", "x", "=", "self", ".", "center_crop", "(", "x", ")", "\n", "\n", "# Change from BGR to RGB. For now pytorch doesn't support ::-1.", "\n", "# Look https://github.com/pytorch/pytorch/issues/229", "\n", "inv_idx", "=", "Variable", "(", "x", ".", "data", ".", "new", "(", "[", "2", ",", "1", ",", "0", "]", ")", ".", "long", "(", ")", ",", "requires_grad", "=", "False", ")", "\n", "x", "=", "x", ".", "index_select", "(", "1", ",", "inv_idx", ")", "\n", "\n", "# Normalize caffe range to 0 ~ 1", "\n", "x", "=", "self", ".", "normalize_imgs", "(", "x", ")", "\n", "return", "x", ",", "mu", ",", "logvar", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.Baseline.InpaintTemplate.forward": [[8, 10], ["Baseline.InpaintTemplate.impute_missing_imgs"], "methods", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.Baseline.RandomColorWithNoiseInpainter.impute_missing_imgs"], ["    ", "def", "forward", "(", "self", ",", "x", ",", "mask", ",", "y", "=", "None", ")", ":", "\n", "        ", "return", "self", ".", "impute_missing_imgs", "(", "x", ",", "mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.Baseline.InpaintTemplate.impute_missing_imgs": [[11, 13], ["NotImplementedError"], "methods", ["None"], ["", "def", "impute_missing_imgs", "(", "self", ",", "x", ",", "mask", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'Need to implement this'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.Baseline.InpaintTemplate.reset": [[14, 16], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.Baseline.MeanInpainter.impute_missing_imgs": [[22, 24], ["None"], "methods", ["None"], ["def", "impute_missing_imgs", "(", "self", ",", "x", ",", "mask", ")", ":", "\n", "        ", "return", "x", "*", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.Baseline.MeanInpainter.generate_background": [[25, 27], ["x.new().zero_", "x.new"], "methods", ["None"], ["", "def", "generate_background", "(", "self", ",", "x", ",", "mask", ")", ":", "\n", "        ", "return", "x", ".", "new", "(", "x", ".", "shape", ")", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.Baseline.ShuffleInpainter.impute_missing_imgs": [[33, 36], ["Baseline.ShuffleInpainter.generate_background"], "methods", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.Baseline.RandomColorWithNoiseInpainter.generate_background"], ["def", "impute_missing_imgs", "(", "self", ",", "x", ",", "mask", ")", ":", "\n", "        ", "background", "=", "self", ".", "generate_background", "(", "x", ",", "mask", ")", "\n", "return", "x", "*", "mask", "+", "background", "*", "(", "1.", "-", "mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.Baseline.ShuffleInpainter.generate_background": [[37, 41], ["torch.randperm().to", "torch.randperm().to", "torch.randperm().to", "torch.randperm().to", "[].reshape", "x.size", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "x.nelement", "x.reshape"], "methods", ["None"], ["", "def", "generate_background", "(", "self", ",", "x", ",", "mask", ")", ":", "\n", "        ", "idx", "=", "torch", ".", "randperm", "(", "x", ".", "nelement", "(", ")", ")", ".", "to", "(", "x", ".", "device", ")", "\n", "t", "=", "x", ".", "reshape", "(", "-", "1", ")", "[", "idx", "]", ".", "reshape", "(", "x", ".", "size", "(", ")", ")", "\n", "return", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.Baseline.TileInpainter.__init__": [[48, 51], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.bit_pytorch.lbtoolbox.Chrono.__init__"], ["def", "__init__", "(", "self", ",", "use_bbox_to_mask", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "use_bbox_to_mask", "=", "use_bbox_to_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.Baseline.TileInpainter.impute_missing_imgs": [[52, 64], ["Baseline.TileInpainter.generate_background", "utils.generate_mask"], "methods", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.Baseline.RandomColorWithNoiseInpainter.generate_background", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.arch.utils.generate_mask"], ["", "def", "impute_missing_imgs", "(", "self", ",", "x", ",", "mask", ")", ":", "\n", "        ", "if", "(", "mask", "==", "1", ")", ".", "all", "(", ")", ":", "\n", "            ", "return", "x", "\n", "", "if", "(", "mask", "==", "0", ")", ".", "all", "(", ")", ":", "\n", "            ", "return", "x", "*", "0.", "\n", "\n", "", "background", ",", "coords", "=", "self", ".", "generate_background", "(", "x", ",", "mask", ")", "\n", "if", "self", ".", "use_bbox_to_mask", ":", "\n", "# Fg mask is 0, bg mask is 1", "\n", "            ", "mask", "=", "1", "-", "generate_mask", "(", "x", ",", "*", "coords", ")", "\n", "\n", "", "return", "x", "*", "mask", "+", "background", "*", "(", "1.", "-", "mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.Baseline.TileInpainter.generate_background": [[65, 148], ["Baseline.TileInpainter.generate_background.find_largest_chunk"], "methods", ["None"], ["", "def", "generate_background", "(", "self", ",", "x", ",", "mask", ")", ":", "\n", "# Find the largest rectangular with 1", "\n", "        ", "is_backgnd", "=", "(", "mask", "==", "1", ")", "\n", "is_col_with_backgnd", "=", "is_backgnd", ".", "all", "(", "dim", "=", "-", "2", ")", "[", ":", ",", "0", ",", ":", "]", "\n", "is_row_with_backgnd", "=", "is_backgnd", ".", "all", "(", "dim", "=", "-", "1", ")", "[", ":", ",", "0", ",", ":", "]", "\n", "\n", "def", "find_largest_chunk", "(", "row", ")", ":", "\n", "# does not seem to have an elegant vector way", "\n", "# write ugly for loop", "\n", "            ", "results", ",", "fg_x1", ",", "fg_x2", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "r", "in", "row", ":", "\n", "                ", "if", "r", ".", "all", "(", ")", ":", "# all background", "\n", "                    ", "results", ".", "append", "(", "(", "0", ",", "len", "(", "r", ")", ")", ")", "\n", "fg_x1", ".", "append", "(", "-", "1", ")", "\n", "fg_x2", ".", "append", "(", "-", "1", ")", "\n", "continue", "\n", "", "if", "(", "~", "r", ")", ".", "all", "(", ")", ":", "# all foreground", "\n", "                    ", "results", ".", "append", "(", "(", "-", "1", ",", "-", "1", ")", ")", "\n", "fg_x1", ".", "append", "(", "0", ")", "\n", "fg_x2", ".", "append", "(", "len", "(", "r", ")", ")", "\n", "continue", "\n", "\n", "# r is a 1 dimension tensor", "\n", "", "tmp", "=", "torch", ".", "arange", "(", "len", "(", "r", ")", ")", "\n", "true_idxes", "=", "tmp", "[", "r", "]", "\n", "false_idxes", "=", "tmp", "[", "~", "r", "]", "\n", "\n", "max_len", ",", "max_s", ",", "max_e", "=", "0", ",", "-", "1", ",", "-", "1", "\n", "false_start", "=", "0", "if", "len", "(", "false_idxes", ")", "==", "0", "else", "false_idxes", "[", "0", "]", "\n", "false_end", "=", "len", "(", "r", ")", "\n", "while", "len", "(", "true_idxes", ")", ">", "0", ":", "\n", "                    ", "s", "=", "true_idxes", "[", "0", "]", "\n", "e", "=", "len", "(", "r", ")", "if", "len", "(", "false_idxes", ")", "==", "0", "else", "false_idxes", "[", "0", "]", "\n", "if", "(", "e", "-", "s", ")", ">", "max_len", ":", "\n", "                        ", "max_len", ",", "max_s", ",", "max_e", "=", "(", "e", "-", "s", ")", ",", "s", ",", "e", "\n", "\n", "", "true_idxes", "=", "true_idxes", "[", "true_idxes", ">", "e", "]", "\n", "if", "len", "(", "true_idxes", ")", "==", "0", ":", "\n", "                        ", "break", "\n", "", "if", "(", "false_idxes", "<", "true_idxes", "[", "0", "]", ")", ".", "all", "(", ")", ":", "\n", "                        ", "false_end", "=", "true_idxes", "[", "0", "]", "\n", "", "false_idxes", "=", "false_idxes", "[", "false_idxes", ">", "true_idxes", "[", "0", "]", "]", "\n", "\n", "", "results", ".", "append", "(", "(", "max_s", ",", "max_e", ")", ")", "\n", "fg_x1", ".", "append", "(", "false_start", ")", "\n", "fg_x2", ".", "append", "(", "false_end", ")", "\n", "\n", "", "fg_x1", "=", "torch", ".", "tensor", "(", "fg_x1", ")", "\n", "fg_x2", "=", "torch", ".", "tensor", "(", "fg_x2", ")", "\n", "return", "results", ",", "fg_x1", ",", "fg_x2", "-", "fg_x1", "\n", "\n", "", "row_chunks", ",", "ys", ",", "hs", "=", "find_largest_chunk", "(", "is_row_with_backgnd", ")", "\n", "col_chunks", ",", "xs", ",", "ws", "=", "find_largest_chunk", "(", "is_col_with_backgnd", ")", "\n", "\n", "ret_backgnds", "=", "[", "]", "\n", "for", "img", ",", "row_chunk", ",", "col_chunk", "in", "zip", "(", "x", ",", "row_chunks", ",", "col_chunks", ")", ":", "\n", "# No background", "\n", "            ", "if", "row_chunk", "==", "(", "-", "1", ",", "-", "1", ")", "and", "col_chunk", "==", "(", "-", "1", ",", "-", "1", ")", ":", "\n", "                ", "ret_backgnds", ".", "append", "(", "torch", ".", "zeros_like", "(", "img", ")", ")", "\n", "continue", "\n", "\n", "# No foreground", "\n", "", "if", "row_chunk", "==", "(", "0", ",", "img", ".", "shape", "[", "-", "2", "]", ")", "and", "col_chunk", "==", "(", "0", ",", "img", ".", "shape", "[", "-", "1", "]", ")", ":", "\n", "                ", "ret_backgnds", ".", "append", "(", "img", ")", "\n", "continue", "\n", "\n", "", "if", "row_chunk", "==", "(", "-", "1", ",", "-", "1", ")", ":", "\n", "                ", "chunk", "=", "img", "[", ":", ",", ":", ",", "col_chunk", "[", "0", "]", ":", "col_chunk", "[", "1", "]", "]", "\n", "", "elif", "col_chunk", "==", "(", "-", "1", ",", "-", "1", ")", ":", "\n", "                ", "chunk", "=", "img", "[", ":", ",", "row_chunk", "[", "0", "]", ":", "row_chunk", "[", "1", "]", ",", ":", "]", "\n", "", "else", ":", "\n", "                ", "if", "row_chunk", "[", "1", "]", "-", "row_chunk", "[", "0", "]", ">=", "col_chunk", "[", "1", "]", "-", "col_chunk", "[", "0", "]", ":", "\n", "                    ", "chunk", "=", "img", "[", ":", ",", "row_chunk", "[", "0", "]", ":", "row_chunk", "[", "1", "]", ",", ":", "]", "\n", "", "else", ":", "\n", "                    ", "chunk", "=", "img", "[", ":", ",", ":", ",", "col_chunk", "[", "0", "]", ":", "col_chunk", "[", "1", "]", "]", "\n", "\n", "", "", "(", "img_h", ",", "img_w", ")", ",", "(", "h", ",", "w", ")", "=", "img", ".", "shape", "[", "-", "2", ":", "]", ",", "chunk", ".", "shape", "[", "-", "2", ":", "]", "\n", "ret_b", "=", "chunk", ".", "repeat", "(", "1", ",", "int", "(", "math", ".", "ceil", "(", "img_h", "/", "h", ")", ")", ",", "int", "(", "math", ".", "ceil", "(", "img_w", "/", "w", ")", ")", ")", "\n", "ret_b", "=", "ret_b", "[", ":", ",", ":", "img_h", ",", ":", "img_w", "]", "\n", "ret_backgnds", ".", "append", "(", "ret_b", ")", "\n", "\n", "", "ret_backgnds", "=", "torch", ".", "stack", "(", "ret_backgnds", ",", "dim", "=", "0", ")", "\n", "return", "ret_backgnds", ",", "(", "xs", ",", "ys", ",", "ws", ",", "hs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.Baseline.FactualMixedRandomTileInpainter.__init__": [[156, 159], ["torch.Module.__init__", "Baseline.TileInpainter"], "methods", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.bit_pytorch.lbtoolbox.Chrono.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cf_tile", "=", "TileInpainter", "(", "use_bbox_to_mask", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.Baseline.FactualMixedRandomTileInpainter.forward": [[160, 185], ["Baseline.FactualMixedRandomTileInpainter.cf_tile", "y.reshape().expand", "indicators.nonzero", "valid_idx[].unique", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "len", "len", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.stack.append", "torch.stack.append", "len", "y.reshape", "torch.ones().float", "torch.ones().float", "torch.ones().float", "torch.ones().float", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "v[].squeeze", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "v.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "X", ",", "mask", ",", "y", ")", ":", "\n", "        ", "if", "X", ".", "shape", "[", "0", "]", "==", "1", "or", "len", "(", "torch", ".", "unique", "(", "y", ")", ")", "==", "1", ":", "\n", "# In edge cases where only 1 example or just 1 class", "\n", "# Put 0 in the background", "\n", "            ", "return", "X", "*", "mask", "\n", "\n", "# Use rectangular to tile the object to avoid having shape bias!", "\n", "", "bg", "=", "self", ".", "cf_tile", "(", "X", ",", "1", "-", "mask", ")", "\n", "\n", "# First, create a y x y array to label which idx isn't the same cls", "\n", "tmp", "=", "y", ".", "reshape", "(", "-", "1", ",", "1", ")", ".", "expand", "(", "len", "(", "y", ")", ",", "len", "(", "y", ")", ")", "\n", "indicators", "=", "(", "tmp", "!=", "tmp", ".", "T", ")", "\n", "\n", "# Then follow https://discuss.pytorch.org/t/efficiently-selecting-a-random-element-from-a-vector/37757/4", "\n", "valid_idx", "=", "indicators", ".", "nonzero", "(", ")", "\n", "unique_rows", "=", "valid_idx", "[", ":", ",", "0", "]", ".", "unique", "(", ")", "\n", "valid_row_idx", "=", "[", "valid_idx", "[", "valid_idx", "[", ":", ",", "0", "]", "==", "u", "]", "for", "u", "in", "unique_rows", "]", "\n", "\n", "swap", "=", "[", "]", "\n", "for", "v", "in", "valid_row_idx", ":", "\n", "            ", "choice", "=", "torch", ".", "multinomial", "(", "torch", ".", "ones", "(", "v", ".", "size", "(", "0", ")", ")", ".", "float", "(", ")", ",", "1", ")", "\n", "swap", ".", "append", "(", "v", "[", "choice", "]", ".", "squeeze", "(", ")", "[", "1", "]", ")", "\n", "", "swap", "=", "torch", ".", "stack", "(", "swap", ")", "\n", "\n", "return", "X", "*", "mask", "+", "bg", "[", "swap", "]", "*", "(", "1", "-", "mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.Baseline.RandomColorWithNoiseInpainter.__init__": [[188, 192], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.bit_pytorch.lbtoolbox.Chrono.__init__"], ["    ", "def", "__init__", "(", "self", ",", "color_mean", "=", "(", "0.5", ",", ")", ",", "color_std", "=", "(", "0.5", ",", ")", ")", ":", "\n", "        ", "super", "(", "RandomColorWithNoiseInpainter", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "color_mean", "=", "color_mean", "\n", "self", ".", "color_std", "=", "color_std", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.Baseline.RandomColorWithNoiseInpainter.impute_missing_imgs": [[193, 196], ["Baseline.RandomColorWithNoiseInpainter.generate_background"], "methods", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.Baseline.RandomColorWithNoiseInpainter.generate_background"], ["", "def", "impute_missing_imgs", "(", "self", ",", "x", ",", "mask", ")", ":", "\n", "        ", "background", "=", "self", ".", "generate_background", "(", "x", ",", "mask", ")", "\n", "return", "x", "*", "mask", "+", "background", "*", "(", "1.", "-", "mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.Baseline.RandomColorWithNoiseInpainter.generate_background": [[197, 205], ["x.new().uniform_().repeat", "x.new().normal_", "x.new().uniform_().repeat.clamp_", "range", "x.size", "x.size", "x.size", "random_img[].sub_().div_", "x.new().uniform_", "x.new", "random_img[].sub_", "x.new", "x.size", "x.size", "x.size"], "methods", ["None"], ["", "def", "generate_background", "(", "self", ",", "x", ",", "mask", ")", ":", "\n", "        ", "random_img", "=", "x", ".", "new", "(", "x", ".", "size", "(", "0", ")", ",", "x", ".", "size", "(", "1", ")", ",", "1", ",", "1", ")", ".", "uniform_", "(", ")", ".", "repeat", "(", "1", ",", "1", ",", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", ")", "\n", "random_img", "+=", "x", ".", "new", "(", "*", "x", ".", "size", "(", ")", ")", ".", "normal_", "(", "0", ",", "0.2", ")", "\n", "random_img", ".", "clamp_", "(", "0.", ",", "1.", ")", "\n", "\n", "for", "c", "in", "range", "(", "x", ".", "size", "(", "1", ")", ")", ":", "\n", "            ", "random_img", "[", ":", ",", "c", ",", ":", ",", ":", "]", ".", "sub_", "(", "self", ".", "color_mean", "[", "c", "]", ")", ".", "div_", "(", "self", ".", "color_std", "[", "c", "]", ")", "\n", "", "return", "random_img", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.imagenet_datasets.ImagenetBoundingBoxFolder.__init__": [[20, 30], ["imagenet_datasets.ImagenetBoundingBoxFolder.parse_coord_dict", "torchvision.datasets.ImageFolder.__init__", "os.path.basename"], "methods", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.imagenet_datasets.ImagenetBoundingBoxFolder.parse_coord_dict", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.bit_pytorch.lbtoolbox.Chrono.__init__"], ["def", "__init__", "(", "self", ",", "root", ",", "bbox_file", ",", "is_valid_file", "=", "None", ",", "\n", "cf_inpaint_dir", "=", "None", ",", "\n", "only_bbox_imgs", "=", "False", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "''' bbox_file points to either `LOC_train_solution.csv` or `LOC_val_solution.csv` '''", "\n", "self", ".", "cf_inpaint_dir", "=", "cf_inpaint_dir", "\n", "self", ".", "coord_dict", "=", "self", ".", "parse_coord_dict", "(", "bbox_file", ")", "\n", "if", "is_valid_file", "is", "None", "and", "only_bbox_imgs", "is", "True", ":", "\n", "            ", "is_valid_file", "=", "lambda", "path", ":", "os", ".", "path", ".", "basename", "(", "path", ")", "in", "self", ".", "coord_dict", "\n", "", "super", "(", ")", ".", "__init__", "(", "root", ",", "is_valid_file", "=", "is_valid_file", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.imagenet_datasets.ImagenetBoundingBoxFolder.parse_coord_dict": [[31, 67], ["open", "fp.readline", "line.strip().split.strip().split.strip().split", "line[].split", "range", "dict", "xs.append", "ys.append", "ws.append", "hs.append", "line.strip().split.strip().split.strip", "len", "int", "int", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "int", "int", "int", "int"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "parse_coord_dict", "(", "data_file", ")", ":", "\n", "# map from ILSVRC2012_val_00037956 to ('n03995372', [85 1 499 272])", "\n", "        ", "coord_dict", "=", "{", "}", "\n", "with", "open", "(", "data_file", ")", "as", "fp", ":", "\n", "            ", "fp", ".", "readline", "(", ")", "\n", "for", "line", "in", "fp", ":", "\n", "                ", "line", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "','", ")", "\n", "filename", "=", "'%s.JPEG'", "%", "line", "[", "0", "]", "\n", "tmp", "=", "line", "[", "1", "]", ".", "split", "(", "' '", ")", "\n", "\n", "xs", ",", "ys", ",", "ws", ",", "hs", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "the_first_class", "=", "tmp", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "tmp", ")", "//", "5", ")", ":", "\n", "                    ", "the_class", "=", "tmp", "[", "i", "*", "5", "]", "\n", "if", "the_class", "!=", "the_first_class", ":", "\n", "                        ", "continue", "\n", "\n", "# The string is: n0133595 x1 y1 x2 y2", "\n", "", "[", "x1", ",", "y1", ",", "x2", ",", "y2", "]", "=", "tmp", "[", "(", "i", "*", "5", "+", "1", ")", ":", "(", "i", "*", "5", "+", "5", ")", "]", "\n", "\n", "# parse it in x, y, w, h", "\n", "xs", ".", "append", "(", "int", "(", "x1", ")", ")", "\n", "ys", ".", "append", "(", "int", "(", "y1", ")", ")", "\n", "ws", ".", "append", "(", "(", "int", "(", "x2", ")", "-", "int", "(", "x1", ")", ")", ")", "\n", "hs", ".", "append", "(", "(", "int", "(", "y2", ")", "-", "int", "(", "y1", ")", ")", ")", "\n", "\n", "# Only take the first bounding box which is the ground truth", "\n", "", "coord_dict", "[", "filename", "]", "=", "dict", "(", "\n", "xs", "=", "torch", ".", "LongTensor", "(", "xs", ")", ",", "\n", "ys", "=", "torch", ".", "LongTensor", "(", "ys", ")", ",", "\n", "ws", "=", "torch", ".", "LongTensor", "(", "ws", ")", ",", "\n", "hs", "=", "torch", ".", "LongTensor", "(", "hs", ")", ",", "\n", ")", "\n", "\n", "", "", "return", "coord_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.imagenet_datasets.ImagenetBoundingBoxFolder.__getitem__": [[68, 106], ["imagenet_datasets.ImagenetBoundingBoxFolder.loader", "os.path.basename", "dict", "dict", "os.path.join", "imagenet_datasets.ImagenetBoundingBoxFolder.transform", "imagenet_datasets.ImagenetBoundingBoxFolder.target_transform", "path.split", "os.path.exists", "imagenet_datasets.ImagenetBoundingBoxFolder.loader", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "bbox[].clone", "bbox[].clone", "bbox[].clone", "bbox[].clone"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Override this to return the bounding box as well\n        \"\"\"", "\n", "path", ",", "target", "=", "self", ".", "samples", "[", "index", "]", "\n", "imgs", "=", "self", ".", "loader", "(", "path", ")", "\n", "\n", "# Append the bounding box in the 4th channel", "\n", "filename", "=", "os", ".", "path", ".", "basename", "(", "path", ")", "\n", "if", "filename", "not", "in", "self", ".", "coord_dict", ":", "\n", "            ", "sample", "=", "dict", "(", "\n", "imgs", "=", "imgs", ",", "\n", "xs", "=", "torch", ".", "tensor", "(", "[", "-", "1", "]", ")", ",", "\n", "ys", "=", "torch", ".", "tensor", "(", "[", "-", "1", "]", ")", ",", "\n", "ws", "=", "torch", ".", "tensor", "(", "[", "-", "1", "]", ")", ",", "\n", "hs", "=", "torch", ".", "tensor", "(", "[", "-", "1", "]", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "bbox", "=", "self", ".", "coord_dict", "[", "filename", "]", "\n", "sample", "=", "dict", "(", "imgs", "=", "imgs", ",", "\n", "xs", "=", "bbox", "[", "'xs'", "]", ".", "clone", "(", ")", ",", "\n", "ys", "=", "bbox", "[", "'ys'", "]", ".", "clone", "(", ")", ",", "\n", "ws", "=", "bbox", "[", "'ws'", "]", ".", "clone", "(", ")", ",", "\n", "hs", "=", "bbox", "[", "'hs'", "]", ".", "clone", "(", ")", ",", "\n", ")", "\n", "\n", "", "if", "self", ".", "cf_inpaint_dir", "is", "not", "None", ":", "\n", "            ", "cls_name", "=", "self", ".", "classes", "[", "target", "]", "\n", "img_name", "=", "path", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", "\n", "cf_path", "=", "pjoin", "(", "self", ".", "cf_inpaint_dir", ",", "cls_name", ",", "img_name", ")", "\n", "sample", "[", "'imgs_cf'", "]", "=", "self", ".", "loader", "(", "cf_path", ")", "if", "pexists", "(", "cf_path", ")", "else", "None", "\n", "\n", "", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "sample", "=", "self", ".", "transform", "(", "sample", ")", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "\n", "", "return", "sample", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.imagenet_datasets.ImagenetBoundingBoxFolder.get_train_transform": [[107, 122], ["torchvision.transforms.Compose", "bbox_utils.Resize", "bbox_utils.RandomCrop", "bbox_utils.RandomHorizontalFlip", "bbox_utils.ColorJitter", "bbox_utils.ToTensor", "bbox_utils.Normalize"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "get_train_transform", "(", "self", ",", "test_run", "=", "False", ")", ":", "\n", "        ", "precut", ",", "cut", "=", "256", ",", "224", "\n", "if", "test_run", ":", "\n", "            ", "precut", ",", "cut", "=", "16", ",", "14", "\n", "\n", "", "train_bbox_tx", "=", "tv", ".", "transforms", ".", "Compose", "(", "[", "\n", "bbox_utils", ".", "Resize", "(", "(", "precut", ",", "precut", ")", ")", ",", "\n", "bbox_utils", ".", "RandomCrop", "(", "(", "cut", ",", "cut", ")", ")", ",", "\n", "bbox_utils", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "bbox_utils", ".", "ColorJitter", "(", ")", ",", "\n", "bbox_utils", ".", "ToTensor", "(", ")", ",", "\n", "bbox_utils", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", ",", "\n", "]", ")", "\n", "return", "train_bbox_tx", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.imagenet_datasets.ImagenetBoundingBoxFolder.get_val_transform": [[123, 133], ["torchvision.transforms.Compose", "bbox_utils.Resize", "bbox_utils.ToTensor", "bbox_utils.Normalize"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "get_val_transform", "(", "self", ",", "test_run", "=", "False", ")", ":", "\n", "        ", "cut", "=", "14", "if", "test_run", "else", "224", "\n", "\n", "val_bbox_tx", "=", "tv", ".", "transforms", ".", "Compose", "(", "[", "\n", "bbox_utils", ".", "Resize", "(", "(", "cut", ",", "cut", ")", ")", ",", "\n", "bbox_utils", ".", "ToTensor", "(", ")", ",", "\n", "bbox_utils", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", ",", "\n", "]", ")", "\n", "return", "val_bbox_tx", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.imagenet_datasets.MyHackSampleSizeMixin.__init__": [[142, 145], ["object.__init__"], "methods", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.bit_pytorch.lbtoolbox.Chrono.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "my_num_samples", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "my_num_samples", "=", "my_num_samples", "\n", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.imagenet_datasets.MyHackSampleSizeMixin.__len__": [[146, 151], ["object.__len__"], "methods", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.waterbirds_datasets.WaterbirdDataset.__len__"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "my_num_samples", "is", "None", ":", "\n", "            ", "return", "super", "(", ")", ".", "__len__", "(", ")", "\n", "\n", "", "return", "self", ".", "my_num_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.imagenet_datasets.MyHackSampleSizeMixin.__getitem__": [[152, 158], ["object.__len__", "isinstance", "get_item_func", "get_item_func"], "methods", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.waterbirds_datasets.WaterbirdDataset.__len__"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "actual_len", "=", "super", "(", ")", ".", "__len__", "(", ")", "\n", "get_item_func", "=", "super", "(", ")", ".", "__getitem__", "\n", "if", "isinstance", "(", "index", ",", "list", ")", ":", "\n", "            ", "return", "[", "get_item_func", "(", "i", "%", "actual_len", ")", "for", "i", "in", "index", "]", "\n", "", "return", "get_item_func", "(", "index", "%", "actual_len", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.imagenet_datasets.MyImageFolder.make_loader": [[161, 165], ["torch.utils.data.dataloader.DataLoader"], "methods", ["None"], ["    ", "def", "make_loader", "(", "self", ",", "batch_size", ",", "shuffle", ",", "workers", ",", "pin_memory", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "DataLoader", "(", "\n", "self", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "shuffle", ",", "\n", "num_workers", "=", "workers", ",", "pin_memory", "=", "pin_memory", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.imagenet_datasets.MyImageFolder.is_bbox_folder": [[166, 169], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "is_bbox_folder", "(", "self", ")", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.imagenet_datasets.MyImageFolder.get_train_transform": [[170, 185], ["torchvision.transforms.Compose", "torchvision.transforms.Resize", "torchvision.transforms.RandomCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ColorJitter", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "get_train_transform", "(", "self", ",", "test_run", "=", "False", ")", ":", "\n", "        ", "precut", ",", "cut", "=", "256", ",", "224", "\n", "if", "test_run", ":", "\n", "            ", "precut", ",", "cut", "=", "16", ",", "14", "\n", "\n", "", "train_bbox_tx", "=", "tv", ".", "transforms", ".", "Compose", "(", "[", "\n", "tv", ".", "transforms", ".", "Resize", "(", "(", "precut", ",", "precut", ")", ")", ",", "\n", "tv", ".", "transforms", ".", "RandomCrop", "(", "(", "cut", ",", "cut", ")", ")", ",", "\n", "tv", ".", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "tv", ".", "transforms", ".", "ColorJitter", "(", ")", ",", "\n", "tv", ".", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "tv", ".", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", ",", "\n", "]", ")", "\n", "return", "train_bbox_tx", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.imagenet_datasets.MyImageFolder.get_val_transform": [[186, 196], ["torchvision.transforms.Compose", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "get_val_transform", "(", "cls", ",", "test_run", "=", "False", ")", ":", "\n", "        ", "cut", "=", "14", "if", "test_run", "else", "224", "\n", "\n", "val_bbox_tx", "=", "tv", ".", "transforms", ".", "Compose", "(", "[", "\n", "tv", ".", "transforms", ".", "Resize", "(", "(", "cut", ",", "cut", ")", ")", ",", "\n", "tv", ".", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "tv", ".", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", ",", "\n", "]", ")", "\n", "return", "val_bbox_tx", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.imagenet_datasets.MyImagenetBoundingBoxFolder.make_loader": [[199, 207], ["torch.utils.data.dataloader.DataLoader"], "methods", ["None"], ["    ", "def", "make_loader", "(", "self", ",", "batch_size", ",", "shuffle", ",", "workers", ",", "pin_memory", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "# if self.my_num_samples is not None:", "\n", "#     self.my_num_samples //= 2", "\n", "# batch_size = batch_size // 2", "\n", "        ", "return", "DataLoader", "(", "\n", "self", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "shuffle", ",", "\n", "num_workers", "=", "workers", ",", "pin_memory", "=", "pin_memory", ",", "\n", "collate_fn", "=", "bbox_utils", ".", "bbox_collate", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.imagenet_datasets.MyImagenetBoundingBoxFolder.is_bbox_folder": [[208, 211], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "is_bbox_folder", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.imagenet_datasets.MySubset.__init__": [[214, 217], ["imagenet_datasets.MyHackSampleSizeMixin.__init__"], "methods", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.bit_pytorch.lbtoolbox.Chrono.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "indices", ",", "transform", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dataset", ",", "indices", ")", "\n", "self", ".", "transform", "=", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.imagenet_datasets.MySubset.__getitem__": [[218, 223], ["imagenet_datasets.MyHackSampleSizeMixin.__getitem__", "imagenet_datasets.MySubset.transform"], "methods", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.waterbirds_datasets.WaterbirdDataset.__getitem__"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "img", ",", "target", "=", "super", "(", ")", ".", "__getitem__", "(", "idx", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "return", "img", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.imagenet_datasets.MySubset.make_loader": [[224, 231], ["isinstance", "the_dataset.__class__.make_loader"], "methods", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.waterbirds_datasets.WaterbirdDataset.make_loader"], ["", "def", "make_loader", "(", "self", ",", "batch_size", ",", "shuffle", ",", "workers", ",", "**", "kwargs", ")", ":", "\n", "        ", "the_dataset", "=", "self", ".", "dataset", "\n", "while", "isinstance", "(", "the_dataset", ",", "MySubset", ")", ":", "\n", "            ", "the_dataset", "=", "the_dataset", ".", "dataset", "\n", "\n", "", "return", "the_dataset", ".", "__class__", ".", "make_loader", "(", "\n", "self", ",", "batch_size", ",", "shuffle", ",", "workers", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.imagenet_datasets.MySubset.is_bbox_folder": [[232, 235], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "is_bbox_folder", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "dataset", ".", "is_bbox_folder", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.imagenet_datasets.MySubset.classes": [[236, 239], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "classes", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "dataset", ".", "classes", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.imagenet_datasets.MyConcatDataset.make_loader": [[242, 265], ["isinstance", "imagenet_datasets.MyConcatDatasetSampler", "torch.utils.data.dataloader.DataLoader", "numpy.all", "imagenet_datasets.MyConcatDataset.datasets[].__class__.make_loader", "numpy.any"], "methods", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.waterbirds_datasets.WaterbirdDataset.make_loader"], ["    ", "def", "make_loader", "(", "self", ",", "batch_size", ",", "shuffle", ",", "workers", ",", "pin_memory", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "'''\n        Possibly 1 bbox folder and 1 img folder, or 2 img folders\n        '''", "\n", "my_self", "=", "self", "\n", "while", "isinstance", "(", "my_self", ",", "MySubset", ")", ":", "\n", "            ", "my_self", "=", "my_self", ".", "dataset", "\n", "# all bbox folder or not-bbox folder", "\n", "", "if", "np", ".", "all", "(", "self", ".", "is_bbox_folder", ")", "or", "not", "np", ".", "any", "(", "self", ".", "is_bbox_folder", ")", ":", "\n", "            ", "return", "my_self", ".", "datasets", "[", "0", "]", ".", "__class__", ".", "make_loader", "(", "\n", "self", ",", "batch_size", ",", "shuffle", ",", "workers", ",", "\n", "pin_memory", "=", "pin_memory", ",", "\n", "**", "kwargs", ")", "\n", "\n", "# 1 img folder and 1 bbox folder", "\n", "", "sampler", "=", "MyConcatDatasetSampler", "(", "\n", "self", ",", "batch_size", ",", "\n", "my_num_samples", "=", "self", ".", "my_num_samples", ",", "\n", "shuffle", "=", "shuffle", ")", "\n", "return", "DataLoader", "(", "\n", "self", ",", "batch_size", "=", "None", ",", "sampler", "=", "sampler", ",", "\n", "num_workers", "=", "workers", ",", "pin_memory", "=", "pin_memory", ",", "\n", "collate_fn", "=", "bbox_utils", ".", "bbox_collate", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.imagenet_datasets.MyConcatDataset.use_my_batch_sampler": [[266, 269], ["numpy.any", "numpy.all"], "methods", ["None"], ["", "@", "property", "\n", "def", "use_my_batch_sampler", "(", "self", ")", ":", "\n", "        ", "return", "(", "not", "np", ".", "all", "(", "self", ".", "is_bbox_folder", ")", "and", "np", ".", "any", "(", "self", ".", "is_bbox_folder", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.imagenet_datasets.MyConcatDataset.is_bbox_folder": [[270, 274], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "is_bbox_folder", "(", "self", ")", ":", "\n", "        ", "''' return a list of bbox folder for its underlying datasets '''", "\n", "return", "[", "d", ".", "is_bbox_folder", "for", "d", "in", "self", ".", "datasets", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.imagenet_datasets.MyConcatDataset.classes": [[275, 278], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "classes", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "datasets", "[", "0", "]", ".", "classes", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.imagenet_datasets.MyConcatDatasetSampler.__init__": [[285, 295], ["isinstance", "int", "type", "sum", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "data_source", ",", "batch_size", ",", "my_num_samples", "=", "None", ",", "shuffle", "=", "True", ")", ":", "\n", "        ", "assert", "isinstance", "(", "data_source", ",", "ConcatDataset", ")", ",", "'Wrong data source with type '", "+", "type", "(", "data_source", ")", "\n", "self", ".", "data_source", "=", "data_source", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "my_num_samples", "=", "my_num_samples", "\n", "self", ".", "batch_len", "=", "int", "(", "sum", "(", "[", "\n", "len", "(", "d", ")", "//", "batch_size", "\n", "for", "d", "in", "self", ".", "data_source", ".", "datasets", "]", ")", ")", "\n", "self", ".", "gen_func", "=", "torch", ".", "randperm", "if", "shuffle", "else", "torch", ".", "arange", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.imagenet_datasets.MyConcatDatasetSampler.__iter__": [[296, 319], ["range", "imagenet_datasets.MyConcatDatasetSampler.gen_func", "len", "iter", "len", "random.randint", "idxes[].tolist", "imagenet_datasets.MyConcatDatasetSampler.__iter__.idxes_generator"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "cs", "=", "self", ".", "data_source", ".", "cumulative_sizes", "\n", "\n", "def", "idxes_generator", "(", "s", ",", "e", ")", ":", "\n", "            ", "bs", "=", "self", ".", "batch_size", "\n", "idxes", "=", "self", ".", "gen_func", "(", "e", "-", "s", ")", "+", "s", "\n", "\n", "for", "s", "in", "range", "(", "0", ",", "len", "(", "idxes", ")", ",", "bs", ")", ":", "\n", "                ", "yield", "idxes", "[", "s", ":", "(", "s", "+", "bs", ")", "]", ".", "tolist", "(", ")", "\n", "\n", "", "", "while", "True", ":", "\n", "# randomly sample batch from each dataset", "\n", "            ", "generators", "=", "[", "\n", "iter", "(", "idxes_generator", "(", "s", ",", "e", ")", ")", "\n", "for", "s", ",", "e", "in", "zip", "(", "[", "0", "]", "+", "cs", "[", ":", "-", "1", "]", ",", "cs", ")", "\n", "]", "\n", "while", "len", "(", "generators", ")", ">", "0", ":", "\n", "                ", "g_idx", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "generators", ")", "-", "1", ")", "\n", "try", ":", "\n", "                    ", "yield", "next", "(", "generators", "[", "g_idx", "]", ")", "\n", "", "except", "StopIteration", ":", "\n", "                    ", "generators", ".", "pop", "(", "g_idx", ")", "\n", "continue", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.imagenet_datasets.MyConcatDatasetSampler.__len__": [[320, 324], ["None"], "methods", ["None"], ["", "", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "my_num_samples", "is", "not", "None", ":", "\n", "            ", "return", "self", ".", "my_num_samples", "\n", "", "return", "self", ".", "batch_len", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.imagenet_datasets.MyFactualAndCFDatasetBase.__init__": [[327, 334], ["isinstance", "isinstance", "len", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "factual_folder", ",", "cf_folder", ")", ":", "\n", "        ", "assert", "len", "(", "factual_folder", ")", "==", "len", "(", "cf_folder", ")", "\n", "assert", "isinstance", "(", "factual_folder", ",", "MyImagenetBoundingBoxFolder", ")", "\n", "assert", "isinstance", "(", "cf_folder", ",", "MyImageFolder", ")", "\n", "\n", "self", ".", "factual_folder", "=", "factual_folder", "\n", "self", ".", "cf_folder", "=", "cf_folder", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.imagenet_datasets.MyFactualAndCFDatasetBase.__getitem__": [[335, 341], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "sample", ",", "y", "=", "self", ".", "factual_folder", "[", "item", "]", "\n", "x_cf", ",", "_", "=", "self", ".", "cf_folder", "[", "item", "]", "\n", "sample", "[", "'imgs_cf'", "]", "=", "x_cf", "\n", "\n", "return", "sample", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.imagenet_datasets.MyFactualAndCFDatasetBase.__len__": [[342, 344], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "factual_folder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.imagenet_datasets.MyFactualAndCFDatasetBase.make_loader": [[345, 353], ["torch.utils.data.dataloader.DataLoader"], "methods", ["None"], ["", "def", "make_loader", "(", "self", ",", "batch_size", ",", "shuffle", ",", "workers", ",", "pin_memory", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "# if self.my_num_samples is not None:", "\n", "#     self.my_num_samples //= 2", "\n", "# batch_size = batch_size // 2", "\n", "        ", "return", "DataLoader", "(", "\n", "self", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "shuffle", ",", "\n", "num_workers", "=", "workers", ",", "pin_memory", "=", "pin_memory", ",", "\n", "collate_fn", "=", "bbox_utils", ".", "bbox_collate", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.imagenet_datasets.MyFactualAndCFDatasetBase.classes": [[354, 357], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "classes", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "factual_folder", ".", "classes", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.imagenet_datasets.MyImageNetODataset.__init__": [[371, 376], ["imagenet_datasets.MyImageFolder", "imagenet_datasets.MyImageFolder", "imagenet_datasets.MyHackSampleSizeMixin.__init__"], "methods", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.bit_pytorch.lbtoolbox.Chrono.__init__"], ["def", "__init__", "(", "self", ",", "imageneto_dir", ",", "val_imgnet_dir", ",", "transform", ")", ":", "\n", "        ", "imageneto", "=", "MyImageFolder", "(", "imageneto_dir", ",", "transform", "=", "transform", ")", "\n", "val_imgnet", "=", "MyImageFolder", "(", "val_imgnet_dir", ",", "transform", "=", "transform", ")", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "[", "val_imgnet", ",", "imageneto", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.imagenet_datasets.MyImageNetODataset.__getitem__": [[377, 391], ["bisect.bisect_right", "len", "ValueError", "len"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "if", "idx", "<", "0", ":", "\n", "            ", "if", "-", "idx", ">", "len", "(", "self", ")", ":", "\n", "                ", "raise", "ValueError", "(", "\"absolute value of index should not exceed dataset length\"", ")", "\n", "", "idx", "=", "len", "(", "self", ")", "+", "idx", "\n", "", "dataset_idx", "=", "bisect", ".", "bisect_right", "(", "self", ".", "cumulative_sizes", ",", "idx", ")", "\n", "if", "dataset_idx", "==", "0", ":", "\n", "            ", "sample_idx", "=", "idx", "\n", "", "else", ":", "\n", "            ", "sample_idx", "=", "idx", "-", "self", ".", "cumulative_sizes", "[", "dataset_idx", "-", "1", "]", "\n", "\n", "", "x", ",", "_", "=", "self", ".", "datasets", "[", "dataset_idx", "]", "[", "sample_idx", "]", "\n", "y", "=", "dataset_idx", "# 0 means normal, 1 means outlier (imgnet-o)", "\n", "return", "x", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.cct_datasets.MyCCT_Dataset.__init__": [[22, 41], ["super().__init__", "cct_datasets.MyCCT_Dataset.setup_data"], "methods", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.bit_pytorch.lbtoolbox.Chrono.__init__", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.cct_datasets.MyCCT_Dataset.setup_data"], ["    ", "def", "__init__", "(", "self", ",", "\n", "json_file", "=", "'./datasets/cct/eccv_18_annotation_files/train_annotations.json'", ",", "\n", "cct_img_folder", "=", "'./datasets/cct/eccv_18_all_images_sm/'", ",", "\n", "cf_inpaint_dir", "=", "None", ",", "\n", "remove_empty_img", "=", "True", ",", "\n", "only_bbox_imgs", "=", "False", ",", "\n", "no_bbox", "=", "False", ",", "\n", "transform", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "json_file", "=", "json_file", "\n", "self", ".", "cct_img_folder", "=", "cct_img_folder", "\n", "self", ".", "cf_inpaint_dir", "=", "cf_inpaint_dir", "\n", "self", ".", "remove_empty_img", "=", "remove_empty_img", "\n", "self", ".", "only_bbox_imgs", "=", "only_bbox_imgs", "\n", "self", ".", "no_bbox", "=", "no_bbox", "\n", "self", ".", "transform", "=", "transform", "\n", "\n", "# Load json", "\n", "self", ".", "setup_data", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.cct_datasets.MyCCT_Dataset.setup_data": [[42, 73], ["json.load", "pandas.DataFrame", "annotations.reset_index.reset_index.groupby().apply", "annotations.reset_index.reset_index.reset_index", "pandas.merge", "cct_datasets.MyCCT_Dataset.annotations[].reset_index", "pandas.DataFrame", "pandas.DataFrame.sort_values().reset_index", "pandas.Series", "open", "pandas.DataFrame", "annotations.reset_index.reset_index.groupby", "pandas.DataFrame.sort_values", "numpy.isnan().any", "x.bbox.values.tolist", "pandas.isnull", "numpy.isnan"], "methods", ["None"], ["", "def", "setup_data", "(", "self", ")", ":", "\n", "        ", "tmp", "=", "json", ".", "load", "(", "open", "(", "self", ".", "json_file", ")", ")", "\n", "# It has 'image_id', 'category_id', 'bbox', 'id'", "\n", "annotations", "=", "pd", ".", "DataFrame", "(", "tmp", "[", "'annotations'", "]", ")", "\n", "images", "=", "pd", ".", "DataFrame", "(", "tmp", "[", "'images'", "]", ")", "[", "[", "'id'", ",", "'height'", ",", "'width'", "]", "]", "\n", "\n", "# Merge bboxes for the same image", "\n", "annotations", "=", "annotations", ".", "groupby", "(", "[", "'image_id'", ",", "'category_id'", "]", ")", ".", "apply", "(", "\n", "lambda", "x", ":", "np", ".", "nan", "if", "np", ".", "isnan", "(", "x", ".", "bbox", ".", "iloc", "[", "0", "]", ")", ".", "any", "(", ")", "else", "x", ".", "bbox", ".", "values", ".", "tolist", "(", ")", ")", "\n", "annotations", ".", "name", "=", "'bbox'", "\n", "annotations", "=", "annotations", ".", "reset_index", "(", ")", "\n", "self", ".", "annotations", "=", "pd", ".", "merge", "(", "annotations", ",", "images", ",", "\n", "how", "=", "'left'", ",", "left_on", "=", "'image_id'", ",", "right_on", "=", "'id'", ")", "\n", "self", ".", "annotations", "=", "self", ".", "annotations", "[", "[", "\n", "'image_id'", ",", "'category_id'", ",", "'bbox'", ",", "'height'", ",", "'width'", "]", "]", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "\n", "if", "self", ".", "remove_empty_img", ":", "\n", "            ", "self", ".", "annotations", "=", "self", ".", "annotations", "[", "self", ".", "annotations", ".", "category_id", "!=", "30", "]", "\n", "", "if", "self", ".", "only_bbox_imgs", ":", "\n", "            ", "self", ".", "annotations", "=", "self", ".", "annotations", "[", "~", "pd", ".", "isnull", "(", "self", ".", "annotations", ".", "bbox", ")", "]", "\n", "\n", "# setup category_id to the target id", "\n", "", "cat_df", "=", "pd", ".", "DataFrame", "(", "tmp", "[", "'categories'", "]", ")", "\n", "if", "self", ".", "remove_empty_img", ":", "\n", "            ", "cat_df", "=", "cat_df", "[", "cat_df", ".", "id", "!=", "30", "]", "\n", "\n", "", "tmp2", "=", "cat_df", ".", "sort_values", "(", "'id'", ")", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "self", ".", "y_to_cat_id", "=", "tmp2", "[", "'id'", "]", "\n", "self", ".", "cat_id_to_y", "=", "pd", ".", "Series", "(", "self", ".", "y_to_cat_id", ".", "index", ",", "\n", "self", ".", "y_to_cat_id", ".", "values", ")", "\n", "self", ".", "category_name", "=", "tmp2", "[", "'name'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.cct_datasets.MyCCT_Dataset.__len__": [[74, 76], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "annotations", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.cct_datasets.MyCCT_Dataset.__getitem__": [[77, 131], ["torch.is_tensor", "os.path.join", "torchvision.datasets.folder.default_loader", "dict", "numpy.isnan().any", "idx.item.item.item", "str", "torch.tensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "os.path.join", "cct_datasets.MyCCT_Dataset.transform", "cct_datasets.MyCCT_Dataset.transform", "numpy.isnan", "torch.LongTensor.append", "torch.LongTensor.append", "torch.LongTensor.append", "torch.LongTensor.append", "bbox_utils.Resize.resize_bbox", "torchvision.datasets.folder.default_loader", "int", "int", "int", "int", "os.path.exists"], "methods", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.bbox_utils.Resize.resize_bbox"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "if", "torch", ".", "is_tensor", "(", "idx", ")", ":", "\n", "            ", "idx", "=", "idx", ".", "item", "(", ")", "\n", "\n", "", "record", "=", "self", ".", "annotations", ".", "iloc", "[", "idx", "]", "\n", "img_path", "=", "pjoin", "(", "self", ".", "cct_img_folder", ",", "record", "[", "'image_id'", "]", "+", "'.jpg'", ")", "\n", "img", "=", "default_loader", "(", "img_path", ")", "\n", "\n", "target", "=", "self", ".", "cat_id_to_y", "[", "record", ".", "category_id", "]", "\n", "if", "self", ".", "no_bbox", ":", "\n", "            ", "assert", "self", ".", "cf_inpaint_dir", "is", "None", ",", "\"Avoid myself being stupid.\"", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "                ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "assert", "img", "is", "not", "None", "and", "target", "is", "not", "None", ",", "str", "(", "idx", ")", "\n", "return", "img", ",", "target", "\n", "\n", "", "result", "=", "dict", "(", ")", "\n", "result", "[", "'imgs'", "]", "=", "img", "\n", "if", "np", ".", "isnan", "(", "record", ".", "bbox", ")", ".", "any", "(", ")", ":", "\n", "            ", "result", "[", "'xs'", "]", "=", "result", "[", "'ys'", "]", "=", "result", "[", "'ws'", "]", "=", "result", "[", "'hs'", "]", "=", "torch", ".", "tensor", "(", "[", "-", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "w", ",", "h", "=", "record", ".", "width", ",", "record", ".", "height", "\n", "new_w", ",", "new_h", "=", "img", ".", "width", ",", "img", ".", "height", "\n", "\n", "bbox_xs", ",", "bbox_ys", ",", "bbox_ws", ",", "bbox_hs", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "(", "bbox_x", ",", "bbox_y", ",", "bbox_w", ",", "bbox_h", ")", "in", "record", ".", "bbox", ":", "\n", "                ", "bbox_xs", ".", "append", "(", "int", "(", "bbox_x", ")", ")", "\n", "bbox_ys", ".", "append", "(", "int", "(", "bbox_y", ")", ")", "\n", "bbox_ws", ".", "append", "(", "int", "(", "bbox_w", ")", ")", "\n", "bbox_hs", ".", "append", "(", "int", "(", "bbox_h", ")", ")", "\n", "", "bbox_xs", "=", "torch", ".", "LongTensor", "(", "bbox_xs", ")", "\n", "bbox_ys", "=", "torch", ".", "LongTensor", "(", "bbox_ys", ")", "\n", "bbox_ws", "=", "torch", ".", "LongTensor", "(", "bbox_ws", ")", "\n", "bbox_hs", "=", "torch", ".", "LongTensor", "(", "bbox_hs", ")", "\n", "\n", "# Do transformation!!!", "\n", "if", "w", "!=", "new_w", "or", "h", "!=", "new_h", ":", "\n", "                ", "bbox_xs", ",", "bbox_ys", ",", "bbox_ws", ",", "bbox_hs", "=", "bbox_utils", ".", "Resize", ".", "resize_bbox", "(", "\n", "w", ",", "h", ",", "new_w", ",", "new_h", ",", "bbox_xs", ",", "bbox_ys", ",", "bbox_ws", ",", "bbox_hs", ")", "\n", "\n", "", "result", "[", "'xs'", "]", ",", "result", "[", "'ys'", "]", ",", "result", "[", "'ws'", "]", ",", "result", "[", "'hs'", "]", "=", "bbox_xs", ",", "bbox_ys", ",", "bbox_ws", ",", "bbox_hs", "\n", "\n", "", "if", "self", ".", "cf_inpaint_dir", "is", "not", "None", ":", "\n", "            ", "cf_path", "=", "pjoin", "(", "self", ".", "cf_inpaint_dir", ",", "record", "[", "'image_id'", "]", "+", "'.jpg'", ")", "\n", "result", "[", "'imgs_cf'", "]", "=", "default_loader", "(", "cf_path", ")", "if", "(", "result", "[", "'xs'", "]", "!=", "-", "1", ")", ".", "all", "(", ")", "and", "pexists", "(", "cf_path", ")", "else", "None", "\n", "\n", "", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "result", "=", "self", ".", "transform", "(", "result", ")", "\n", "", "return", "result", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.cct_datasets.MyCCT_Dataset.is_bbox_folder": [[132, 135], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "is_bbox_folder", "(", "self", ")", ":", "\n", "        ", "return", "not", "self", ".", "no_bbox", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.cct_datasets.MyCCT_Dataset.get_train_bbox_transform": [[136, 149], ["torchvision.transforms.Compose", "bbox_utils.Resize", "bbox_utils.RandomCrop", "bbox_utils.RandomHorizontalFlip", "bbox_utils.ColorJitter", "bbox_utils.ToTensor", "bbox_utils.Normalize"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "get_train_bbox_transform", "(", "cls", ",", "test_run", "=", "False", ")", ":", "\n", "        ", "orig_size", "=", "224", "if", "not", "test_run", "else", "14", "\n", "\n", "train_tx", "=", "tv", ".", "transforms", ".", "Compose", "(", "[", "\n", "bbox_utils", ".", "Resize", "(", "orig_size", ")", ",", "\n", "bbox_utils", ".", "RandomCrop", "(", "(", "orig_size", ",", "orig_size", ")", ")", ",", "\n", "bbox_utils", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "bbox_utils", ".", "ColorJitter", "(", ")", ",", "\n", "bbox_utils", ".", "ToTensor", "(", ")", ",", "\n", "bbox_utils", ".", "Normalize", "(", "(", "0.5", ",", ")", ",", "(", "0.5", ",", ")", ")", ",", "\n", "]", ")", "\n", "return", "train_tx", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.cct_datasets.MyCCT_Dataset.get_val_bbox_transform": [[150, 159], ["torchvision.transforms.Compose", "bbox_utils.Resize", "bbox_utils.ToTensor", "bbox_utils.Normalize"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "get_val_bbox_transform", "(", "cls", ",", "test_run", "=", "False", ")", ":", "\n", "        ", "orig_size", "=", "224", "if", "not", "test_run", "else", "14", "\n", "val_tx", "=", "tv", ".", "transforms", ".", "Compose", "(", "[", "\n", "bbox_utils", ".", "Resize", "(", "(", "orig_size", ",", "orig_size", ")", ")", ",", "\n", "bbox_utils", ".", "ToTensor", "(", ")", ",", "\n", "bbox_utils", ".", "Normalize", "(", "(", "0.5", ",", ")", ",", "(", "0.5", ",", ")", ")", ",", "\n", "]", ")", "\n", "return", "val_tx", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.cct_datasets.MyCCT_Dataset.make_loader": [[160, 165], ["torch.utils.data.DataLoader"], "methods", ["None"], ["", "def", "make_loader", "(", "self", ",", "batch_size", ",", "shuffle", ",", "workers", ",", "pin_memory", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "self", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "shuffle", ",", "\n", "num_workers", "=", "workers", ",", "pin_memory", "=", "pin_memory", ",", "\n", "collate_fn", "=", "bbox_utils", ".", "bbox_collate", ",", "**", "kwargs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.simulated_datasets.NoiseDatasetBase.__init__": [[9, 14], ["torch.Generator"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "num_samples", ",", "num_channels", "=", "3", ",", "seed", "=", "42", ")", ":", "\n", "        ", "self", ".", "num_samples", "=", "num_samples", "\n", "self", ".", "num_channels", "=", "num_channels", "\n", "self", ".", "seed", "=", "seed", "\n", "self", ".", "generator", "=", "torch", ".", "Generator", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.simulated_datasets.NoiseDatasetBase.make_loader": [[15, 28], ["simulated_datasets.NoiseDatasetBase.generator.manual_seed", "range", "simulated_datasets.NoiseDatasetBase.generate_noise", "simulated_datasets.NoiseDatasetBase.generate_noise"], "methods", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.simulated_datasets.UniformNoiseDataset.generate_noise", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.simulated_datasets.UniformNoiseDataset.generate_noise"], ["", "def", "make_loader", "(", "self", ",", "batch_size", ",", "**", "kwargs", ")", ":", "\n", "# Generate the same data each time", "\n", "        ", "self", ".", "generator", ".", "manual_seed", "(", "self", ".", "seed", ")", "\n", "\n", "num_times", "=", "(", "self", ".", "num_samples", "//", "batch_size", ")", "\n", "for", "_", "in", "range", "(", "num_times", ")", ":", "\n", "            ", "n", "=", "self", ".", "generate_noise", "(", "batch_size", ")", "\n", "yield", "n", ",", "0", "\n", "\n", "", "residual", "=", "self", ".", "num_samples", "-", "num_times", "*", "batch_size", "\n", "if", "residual", ">", "0", ":", "\n", "            ", "n", "=", "self", ".", "generate_noise", "(", "residual", ")", "\n", "yield", "n", ",", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.simulated_datasets.NoiseDatasetBase.generate_noise": [[29, 31], ["NotImplementedError"], "methods", ["None"], ["", "", "def", "generate_noise", "(", "self", ",", "num", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.simulated_datasets.NoiseDatasetBase.__len__": [[32, 34], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.simulated_datasets.GaussianNoiseDataset.generate_noise": [[41, 45], ["torch.randn().add_", "torch.randn().add_.clamp_().sub_().mul_", "torch.randn", "torch.randn().add_.clamp_().sub_", "torch.randn().add_.clamp_"], "methods", ["None"], ["def", "generate_noise", "(", "self", ",", "num", ")", ":", "\n", "        ", "gn", "=", "torch", ".", "randn", "(", "num", ",", "self", ".", "num_channels", ",", "224", ",", "224", ",", "generator", "=", "self", ".", "generator", ")", ".", "add_", "(", "0.5", ")", "\n", "gn", ".", "clamp_", "(", "min", "=", "0.", ",", "max", "=", "1.", ")", ".", "sub_", "(", "0.5", ")", ".", "mul_", "(", "2", ")", "\n", "return", "gn", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.simulated_datasets.UniformNoiseDataset.generate_noise": [[52, 55], ["torch.rand().sub_().mul_", "torch.rand().sub_", "torch.rand"], "methods", ["None"], ["def", "generate_noise", "(", "self", ",", "num", ")", ":", "\n", "        ", "un", "=", "torch", ".", "rand", "(", "num", ",", "self", ".", "num_channels", ",", "224", ",", "224", ",", "generator", "=", "self", ".", "generator", ")", ".", "sub_", "(", "0.5", ")", ".", "mul_", "(", "2", ")", "\n", "return", "un", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.bbox_utils.RandomCrop.__call__": [[67, 113], ["torchvision.transforms.functional.crop", "bbox_utils.RandomCrop.get_params", "torchvision.transforms.functional.crop", "bbox_utils.RandomCrop.get_params", "torch.clamp", "torch.clamp", "torch.min", "torch.min", "torch.any", "torchvision.transforms.functional.crop", "torchvision.transforms.functional.crop", "torchvision.transforms.functional.crop", "print"], "methods", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.bbox_utils.RandomCrop.get_params", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.bbox_utils.RandomCrop.get_params"], ["    ", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "\n", "        ", "img", "=", "sample", "[", "'imgs'", "]", "\n", "\n", "if", "(", "'masks'", "in", "sample", "and", "sample", "[", "'masks'", "]", "is", "None", ")", "or", "(", "'masks'", "not", "in", "sample", "and", "(", "'xs'", "not", "in", "sample", "or", "(", "sample", "[", "'xs'", "]", "<", "0.", ")", ".", "all", "(", ")", ")", ")", ":", "\n", "            ", "i", ",", "j", ",", "h", ",", "w", "=", "self", ".", "get_params", "(", "img", ",", "self", ".", "size", ")", "\n", "sample", "[", "'imgs'", "]", "=", "F", ".", "crop", "(", "img", ",", "i", ",", "j", ",", "h", ",", "w", ")", "\n", "if", "'imgs_cf'", "in", "sample", "and", "sample", "[", "'imgs_cf'", "]", "is", "not", "None", ":", "\n", "                ", "sample", "[", "'imgs_cf'", "]", "=", "F", ".", "crop", "(", "sample", "[", "'imgs_cf'", "]", ",", "i", ",", "j", ",", "h", ",", "w", ")", "\n", "", "return", "sample", "\n", "\n", "", "low_i", "=", "(", "sample", "[", "'ys'", "]", "-", "self", ".", "size", "[", "0", "]", "+", "1", ")", ".", "clamp_", "(", "0", ")", ".", "min", "(", ")", ".", "item", "(", ")", "\n", "low_j", "=", "(", "sample", "[", "'xs'", "]", "-", "self", ".", "size", "[", "1", "]", "+", "1", ")", ".", "clamp_", "(", "0", ")", ".", "min", "(", ")", ".", "item", "(", ")", "\n", "max_i", "=", "(", "sample", "[", "'ys'", "]", "+", "sample", "[", "'hs'", "]", "-", "1", ")", ".", "max", "(", ")", ".", "item", "(", ")", "\n", "max_j", "=", "(", "sample", "[", "'xs'", "]", "+", "sample", "[", "'ws'", "]", "-", "1", ")", ".", "max", "(", ")", ".", "item", "(", ")", "\n", "\n", "# It has to contain at least 1 bounding box!", "\n", "while", "True", ":", "\n", "            ", "i", ",", "j", ",", "h", ",", "w", "=", "self", ".", "get_params", "(", "img", ",", "self", ".", "size", ",", "low_i", "=", "low_i", ",", "low_j", "=", "low_j", ",", "\n", "max_i", "=", "max_i", ",", "max_j", "=", "max_j", ")", "\n", "new_xs", "=", "torch", ".", "clamp", "(", "sample", "[", "'xs'", "]", "-", "j", ",", "min", "=", "0", ")", "\n", "new_ys", "=", "torch", ".", "clamp", "(", "sample", "[", "'ys'", "]", "-", "i", ",", "min", "=", "0", ")", "\n", "new_ws", "=", "torch", ".", "min", "(", "\n", "(", "(", "sample", "[", "'ws'", "]", "+", "sample", "[", "'xs'", "]", ")", "-", "j", ")", ".", "clamp_", "(", "min", "=", "0", ")", ".", "sub_", "(", "new_xs", ")", ",", "\n", "(", "w", "-", "new_xs", ")", ")", "\n", "new_hs", "=", "torch", ".", "min", "(", "\n", "(", "(", "sample", "[", "'hs'", "]", "+", "sample", "[", "'ys'", "]", ")", "-", "i", ")", ".", "clamp_", "(", "min", "=", "0", ")", ".", "sub_", "(", "new_ys", ")", ",", "\n", "(", "h", "-", "new_ys", ")", ")", "\n", "\n", "# At least 1 bounding box is included", "\n", "if", "torch", ".", "any", "(", "(", "new_ws", "!=", "0", ")", "&", "(", "new_hs", "!=", "0", ")", ")", ":", "\n", "                ", "break", "\n", "", "else", ":", "\n", "                ", "print", "(", "'Not found at least 1 valid bbox. Re-crop.'", ")", "\n", "\n", "", "", "sample", "[", "'xs'", "]", "=", "new_xs", "\n", "sample", "[", "'ys'", "]", "=", "new_ys", "\n", "sample", "[", "'ws'", "]", "=", "new_ws", "\n", "sample", "[", "'hs'", "]", "=", "new_hs", "\n", "sample", "[", "'imgs'", "]", "=", "F", ".", "crop", "(", "img", ",", "i", ",", "j", ",", "h", ",", "w", ")", "\n", "if", "'masks'", "in", "sample", "and", "sample", "[", "'masks'", "]", "is", "not", "None", ":", "\n", "            ", "sample", "[", "'masks'", "]", "=", "F", ".", "crop", "(", "sample", "[", "'masks'", "]", ",", "i", ",", "j", ",", "h", ",", "w", ")", "\n", "", "if", "'imgs_cf'", "in", "sample", "and", "sample", "[", "'imgs_cf'", "]", "is", "not", "None", ":", "\n", "            ", "sample", "[", "'imgs_cf'", "]", "=", "F", ".", "crop", "(", "sample", "[", "'imgs_cf'", "]", ",", "i", ",", "j", ",", "h", ",", "w", ")", "\n", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.bbox_utils.RandomCrop.get_params": [[114, 133], ["random.randint", "random.randint", "min", "min"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_params", "(", "img", ",", "output_size", ",", "low_i", "=", "0", ",", "low_j", "=", "0", ",", "max_i", "=", "np", ".", "inf", ",", "max_j", "=", "np", ".", "inf", ")", ":", "\n", "        ", "\"\"\"Get parameters for ``crop`` for a random crop.\n\n        Args:\n            img (PIL Image): Image to be cropped.\n            output_size (tuple): Expected output size of the crop.\n\n        Returns:\n            tuple: params (i, j, h, w) to be passed to ``crop`` for random crop.\n        \"\"\"", "\n", "w", ",", "h", "=", "img", ".", "width", ",", "img", ".", "height", "\n", "th", ",", "tw", "=", "output_size", "\n", "if", "w", "==", "tw", "and", "h", "==", "th", ":", "\n", "            ", "return", "0", ",", "0", ",", "h", ",", "w", "\n", "\n", "", "i", "=", "random", ".", "randint", "(", "low_i", ",", "min", "(", "max_i", ",", "h", "-", "th", ")", ")", "\n", "j", "=", "random", ".", "randint", "(", "low_j", ",", "min", "(", "max_j", ",", "w", "-", "tw", ")", ")", "\n", "return", "i", ",", "j", ",", "th", ",", "tw", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.bbox_utils.CenterCrop.__call__": [[136, 167], ["torchvision.transforms.functional.center_crop", "int", "int", "torch.clamp", "torch.clamp", "torch.min", "torch.min", "torchvision.transforms.functional.center_crop", "torchvision.transforms.functional.center_crop", "round", "round"], "methods", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.GAN_Inpainting.AE_GAN.center_crop", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.GAN_Inpainting.AE_GAN.center_crop", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.GAN_Inpainting.AE_GAN.center_crop"], ["    ", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "\n", "        ", "sample", "[", "'imgs'", "]", "=", "F", ".", "center_crop", "(", "sample", "[", "'imgs'", "]", ",", "self", ".", "size", ")", "\n", "if", "'masks'", "in", "sample", "and", "sample", "[", "'masks'", "]", "is", "not", "None", ":", "\n", "            ", "sample", "[", "'masks'", "]", "=", "F", ".", "center_crop", "(", "sample", "[", "'masks'", "]", ",", "self", ".", "size", ")", "\n", "", "if", "'imgs_cf'", "in", "sample", "and", "sample", "[", "'imgs_cf'", "]", "is", "not", "None", ":", "\n", "            ", "sample", "[", "'imgs_cf'", "]", "=", "F", ".", "center_crop", "(", "sample", "[", "'imgs_cf'", "]", ",", "self", ".", "size", ")", "\n", "\n", "", "if", "(", "'masks'", "in", "sample", "and", "sample", "[", "'masks'", "]", "is", "None", ")", "or", "(", "'masks'", "not", "in", "sample", "and", "(", "'xs'", "not", "in", "sample", "or", "(", "sample", "[", "'xs'", "]", "<", "0.", ")", ".", "all", "(", ")", ")", ")", ":", "\n", "            ", "return", "sample", "\n", "\n", "", "image_width", ",", "image_height", "=", "sample", "[", "'imgs'", "]", ".", "size", "\n", "h", ",", "w", "=", "self", ".", "size", "\n", "j", "=", "int", "(", "round", "(", "(", "image_height", "-", "h", ")", "/", "2.", ")", ")", "\n", "i", "=", "int", "(", "round", "(", "(", "image_width", "-", "w", ")", "/", "2.", ")", ")", "\n", "\n", "new_xs", "=", "torch", ".", "clamp", "(", "sample", "[", "'xs'", "]", "-", "j", ",", "min", "=", "0", ")", "\n", "new_ys", "=", "torch", ".", "clamp", "(", "sample", "[", "'ys'", "]", "-", "i", ",", "min", "=", "0", ")", "\n", "new_ws", "=", "torch", ".", "min", "(", "\n", "(", "(", "sample", "[", "'ws'", "]", "+", "sample", "[", "'xs'", "]", ")", "-", "j", ")", ".", "clamp_", "(", "min", "=", "0", ")", ".", "sub_", "(", "new_xs", ")", ",", "\n", "(", "w", "-", "new_xs", ")", ")", "\n", "new_hs", "=", "torch", ".", "min", "(", "\n", "(", "(", "sample", "[", "'hs'", "]", "+", "sample", "[", "'ys'", "]", ")", "-", "i", ")", ".", "clamp_", "(", "min", "=", "0", ")", ".", "sub_", "(", "new_ys", ")", ",", "\n", "(", "h", "-", "new_ys", ")", ")", "\n", "\n", "sample", "[", "'xs'", "]", "=", "new_xs", "\n", "sample", "[", "'ys'", "]", "=", "new_ys", "\n", "sample", "[", "'ws'", "]", "=", "new_ws", "\n", "sample", "[", "'hs'", "]", "=", "new_hs", "\n", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.bbox_utils.Resize.__call__": [[181, 199], ["torchvision.transforms.functional.resize", "bbox_utils.Resize.resize_bbox", "torchvision.transforms.functional.resize", "torchvision.transforms.functional.resize"], "methods", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.CAInpainter.CAInpainter.resize", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.bbox_utils.Resize.resize_bbox", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.CAInpainter.CAInpainter.resize", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.inpainting.CAInpainter.CAInpainter.resize"], ["def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "h", ",", "w", "=", "sample", "[", "'imgs'", "]", ".", "height", ",", "sample", "[", "'imgs'", "]", ".", "width", "\n", "sample", "[", "'imgs'", "]", "=", "F", ".", "resize", "(", "sample", "[", "'imgs'", "]", ",", "self", ".", "size", ",", "self", ".", "interpolation", ")", "\n", "if", "'masks'", "in", "sample", "and", "sample", "[", "'masks'", "]", "is", "not", "None", ":", "\n", "            ", "sample", "[", "'masks'", "]", "=", "F", ".", "resize", "(", "sample", "[", "'masks'", "]", ",", "self", ".", "size", ",", "self", ".", "interpolation", ")", "\n", "", "if", "'imgs_cf'", "in", "sample", "and", "sample", "[", "'imgs_cf'", "]", "is", "not", "None", ":", "\n", "            ", "sample", "[", "'imgs_cf'", "]", "=", "F", ".", "resize", "(", "sample", "[", "'imgs_cf'", "]", ",", "self", ".", "size", ",", "self", ".", "interpolation", ")", "\n", "\n", "", "if", "(", "'masks'", "in", "sample", "and", "sample", "[", "'masks'", "]", "is", "None", ")", "or", "(", "'masks'", "not", "in", "sample", "and", "(", "'xs'", "not", "in", "sample", "or", "(", "sample", "[", "'xs'", "]", "<", "0.", ")", ".", "all", "(", ")", ")", ")", ":", "\n", "            ", "return", "sample", "\n", "\n", "", "new_h", ",", "new_w", "=", "sample", "[", "'imgs'", "]", ".", "height", ",", "sample", "[", "'imgs'", "]", ".", "width", "\n", "sample", "[", "'xs'", "]", ",", "sample", "[", "'ys'", "]", ",", "sample", "[", "'ws'", "]", ",", "sample", "[", "'hs'", "]", "=", "self", ".", "resize_bbox", "(", "\n", "w", ",", "h", ",", "new_w", ",", "new_h", ",", "\n", "sample", "[", "'xs'", "]", ",", "sample", "[", "'ys'", "]", ",", "sample", "[", "'ws'", "]", ",", "sample", "[", "'hs'", "]", ")", "\n", "\n", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.bbox_utils.Resize.resize_bbox": [[200, 209], ["bbox_x.mul().floor_divide_", "bbox_y.mul().floor_divide_", "bbox_w.add().mul_().floor_divide_().add_().sub_", "bbox_h.add().mul_().floor_divide_().add_().sub_", "bbox_x.mul", "bbox_y.mul", "bbox_w.add().mul_().floor_divide_().add_", "bbox_h.add().mul_().floor_divide_().add_", "bbox_w.add().mul_().floor_divide_", "bbox_h.add().mul_().floor_divide_", "bbox_w.add().mul_", "bbox_h.add().mul_", "bbox_w.add", "bbox_h.add"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "resize_bbox", "(", "w", ",", "h", ",", "new_w", ",", "new_h", ",", "bbox_x", ",", "bbox_y", ",", "bbox_w", ",", "bbox_h", ")", ":", "\n", "        ", "new_bbox_x", "=", "bbox_x", ".", "mul", "(", "new_w", ")", ".", "floor_divide_", "(", "w", ")", "\n", "new_bbox_y", "=", "bbox_y", ".", "mul", "(", "new_h", ")", ".", "floor_divide_", "(", "h", ")", "\n", "\n", "new_bbox_w", "=", "bbox_w", ".", "add", "(", "bbox_x", ")", ".", "mul_", "(", "new_w", ")", ".", "floor_divide_", "(", "w", ")", ".", "add_", "(", "1", ")", ".", "sub_", "(", "new_bbox_x", ")", "\n", "new_bbox_h", "=", "bbox_h", ".", "add", "(", "bbox_y", ")", ".", "mul_", "(", "new_h", ")", ".", "floor_divide_", "(", "h", ")", ".", "add_", "(", "1", ")", ".", "sub_", "(", "new_bbox_y", ")", "\n", "\n", "return", "new_bbox_x", ",", "new_bbox_y", ",", "new_bbox_w", ",", "new_bbox_h", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.bbox_utils.RandomHorizontalFlip.__call__": [[212, 229], ["torchvision.transforms.functional.hflip", "sample[].add_().neg_().add_", "random.random", "torchvision.transforms.functional.hflip", "torchvision.transforms.functional.hflip", "sample[].add_().neg_", "sample[].add_"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", ">=", "self", ".", "p", ":", "\n", "            ", "return", "sample", "\n", "\n", "", "sample", "[", "'imgs'", "]", "=", "F", ".", "hflip", "(", "sample", "[", "'imgs'", "]", ")", "\n", "if", "'masks'", "in", "sample", "and", "sample", "[", "'masks'", "]", "is", "not", "None", ":", "\n", "            ", "sample", "[", "'masks'", "]", "=", "F", ".", "hflip", "(", "sample", "[", "'masks'", "]", ")", "\n", "", "if", "'imgs_cf'", "in", "sample", "and", "sample", "[", "'imgs_cf'", "]", "is", "not", "None", ":", "\n", "            ", "sample", "[", "'imgs_cf'", "]", "=", "F", ".", "hflip", "(", "sample", "[", "'imgs_cf'", "]", ")", "\n", "\n", "", "if", "(", "'masks'", "in", "sample", "and", "sample", "[", "'masks'", "]", "is", "None", ")", "or", "(", "'masks'", "not", "in", "sample", "and", "(", "'xs'", "not", "in", "sample", "or", "(", "sample", "[", "'xs'", "]", "<", "0.", ")", ".", "all", "(", ")", ")", ")", ":", "\n", "            ", "return", "sample", "\n", "\n", "", "h", ",", "w", "=", "sample", "[", "'imgs'", "]", ".", "height", ",", "sample", "[", "'imgs'", "]", ".", "width", "\n", "sample", "[", "'xs'", "]", ".", "add_", "(", "sample", "[", "'ws'", "]", ")", ".", "neg_", "(", ")", ".", "add_", "(", "w", ")", "\n", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.bbox_utils.ColorJitter.__call__": [[232, 239], ["bbox_utils.ColorJitter.get_params", "bbox_utils.ColorJitter.", "bbox_utils.ColorJitter."], "methods", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.bbox_utils.RandomCrop.get_params"], ["    ", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "transform", "=", "self", ".", "get_params", "(", "self", ".", "brightness", ",", "self", ".", "contrast", ",", "\n", "self", ".", "saturation", ",", "self", ".", "hue", ")", "\n", "sample", "[", "'imgs'", "]", "=", "transform", "(", "sample", "[", "'imgs'", "]", ")", "\n", "if", "'imgs_cf'", "in", "sample", "and", "sample", "[", "'imgs_cf'", "]", "is", "not", "None", ":", "\n", "            ", "sample", "[", "'imgs_cf'", "]", "=", "transform", "(", "sample", "[", "'imgs_cf'", "]", ")", "\n", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.bbox_utils.ToTensor.__call__": [[242, 254], ["super().__call__", "super().__call__", "super().__call__", "sample[].ceil_"], "methods", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.bbox_utils.Grayscale.__call__", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.bbox_utils.Grayscale.__call__", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.bbox_utils.Grayscale.__call__"], ["    ", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "sample", "[", "'imgs'", "]", "=", "super", "(", ")", ".", "__call__", "(", "sample", "[", "'imgs'", "]", ")", "\n", "if", "'imgs_cf'", "in", "sample", "and", "sample", "[", "'imgs_cf'", "]", "is", "not", "None", ":", "\n", "            ", "sample", "[", "'imgs_cf'", "]", "=", "super", "(", ")", ".", "__call__", "(", "sample", "[", "'imgs_cf'", "]", ")", "\n", "\n", "", "if", "'masks'", "in", "sample", "and", "sample", "[", "'masks'", "]", "is", "not", "None", ":", "\n", "            ", "sample", "[", "'masks'", "]", "=", "super", "(", ")", ".", "__call__", "(", "sample", "[", "'masks'", "]", ")", "\n", "# Ceil the masks since PIL is not easy to operate", "\n", "sample", "[", "'masks'", "]", ".", "ceil_", "(", ")", "\n", "sample", "[", "'masks'", "]", "=", "(", "sample", "[", "'masks'", "]", "==", "1", ")", ".", "any", "(", "dim", "=", "0", ",", "keepdims", "=", "True", ")", ".", "float", "(", ")", "\n", "\n", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.bbox_utils.Normalize.__call__": [[257, 262], ["super().__call__", "super().__call__"], "methods", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.bbox_utils.Grayscale.__call__", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.bbox_utils.Grayscale.__call__"], ["    ", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "sample", "[", "'imgs'", "]", "=", "super", "(", ")", ".", "__call__", "(", "sample", "[", "'imgs'", "]", ")", "\n", "if", "'imgs_cf'", "in", "sample", "and", "sample", "[", "'imgs_cf'", "]", "is", "not", "None", ":", "\n", "            ", "sample", "[", "'imgs_cf'", "]", "=", "super", "(", ")", ".", "__call__", "(", "sample", "[", "'imgs_cf'", "]", ")", "\n", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.bbox_utils.Grayscale.__call__": [[265, 270], ["super().__call__", "super().__call__"], "methods", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.bbox_utils.Grayscale.__call__", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.bbox_utils.Grayscale.__call__"], ["    ", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "sample", "[", "'imgs'", "]", "=", "super", "(", ")", ".", "__call__", "(", "sample", "[", "'imgs'", "]", ")", "\n", "if", "'imgs_cf'", "in", "sample", "and", "sample", "[", "'imgs_cf'", "]", "is", "not", "None", ":", "\n", "            ", "sample", "[", "'imgs_cf'", "]", "=", "super", "(", ")", ".", "__call__", "(", "sample", "[", "'imgs_cf'", "]", ")", "\n", "", "return", "sample", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.bbox_utils.bbox_collate": [[18, 61], ["torch.is_tensor", "torch.utils.data._utils.collate.default_collate", "torch.utils.data._utils.collate.default_collate", "torch.utils.data._utils.collate.default_collate", "isinstance", "torch.utils.data._utils.collate.default_collate", "torch.utils.data._utils.collate.default_collate", "torch.nn.utils.rnn.pad_sequence", "torch.nn.utils.rnn.pad_sequence", "torch.nn.utils.rnn.pad_sequence", "torch.nn.utils.rnn.pad_sequence", "torch.zeros", "torch.stack", "torch.stack", "len", "len", "len", "torch.zeros", "torch.zeros_like"], "function", ["None"], ["def", "bbox_collate", "(", "batch", ")", ":", "\n", "    ", "'''\n    Padding the bounding box in the collate function\n    '''", "\n", "if", "torch", ".", "is_tensor", "(", "batch", "[", "0", "]", "[", "0", "]", ")", ":", "\n", "        ", "return", "default_collate", "(", "batch", ")", "\n", "", "if", "isinstance", "(", "batch", "[", "0", "]", "[", "0", "]", ",", "dict", ")", "and", "'xs'", "not", "in", "batch", "[", "0", "]", "[", "0", "]", "and", "'masks'", "not", "in", "batch", "[", "0", "]", "[", "0", "]", ":", "\n", "        ", "return", "default_collate", "(", "batch", ")", "\n", "", "if", "'masks'", "not", "in", "batch", "[", "0", "]", "[", "0", "]", "and", "batch", "[", "0", "]", "[", "0", "]", "[", "'xs'", "]", ".", "ndim", "==", "0", ":", "\n", "        ", "return", "default_collate", "(", "batch", ")", "\n", "\n", "", "samples", "=", "[", "item", "[", "0", "]", "for", "item", "in", "batch", "]", "\n", "if", "'masks'", "not", "in", "batch", "[", "0", "]", "[", "0", "]", ":", "# do the bbox", "\n", "# pad the bboxes into xs, ys, ws, hs", "\n", "        ", "data", "=", "{", "\n", "'xs'", ":", "pad_sequence", "(", "[", "sample", "[", "'xs'", "]", "for", "sample", "in", "samples", "]", ",", "batch_first", "=", "True", ",", "padding_value", "=", "-", "1.", ")", ",", "\n", "'ys'", ":", "pad_sequence", "(", "[", "sample", "[", "'ys'", "]", "for", "sample", "in", "samples", "]", ",", "batch_first", "=", "True", ",", "padding_value", "=", "-", "1.", ")", ",", "\n", "'ws'", ":", "pad_sequence", "(", "[", "sample", "[", "'ws'", "]", "for", "sample", "in", "samples", "]", ",", "batch_first", "=", "True", ",", "padding_value", "=", "-", "1.", ")", ",", "\n", "'hs'", ":", "pad_sequence", "(", "[", "sample", "[", "'hs'", "]", "for", "sample", "in", "samples", "]", ",", "batch_first", "=", "True", ",", "padding_value", "=", "-", "1.", ")", ",", "\n", "}", "\n", "", "else", ":", "# only do the masks instead", "\n", "        ", "data", "=", "{", "}", "\n", "masks", "=", "[", "s", "[", "'masks'", "]", "for", "s", "in", "samples", "]", "\n", "if", "masks", "==", "[", "None", "]", "*", "len", "(", "masks", ")", ":", "\n", "# Hack: since we can't pass None in pl, we pass a tensor that", "\n", "#   makes the __base__.py has no bbox", "\n", "            ", "data", "[", "'masks'", "]", "=", "torch", ".", "zeros", "(", "len", "(", "masks", ")", ",", "1", ",", "1", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "masks", "=", "[", "torch", ".", "zeros", "(", "1", ",", "*", "samples", "[", "0", "]", "[", "'imgs'", "]", ".", "shape", "[", "1", ":", "]", ")", "if", "m", "is", "None", "\n", "else", "m", "for", "m", "in", "masks", "]", "\n", "data", "[", "'masks'", "]", "=", "torch", ".", "stack", "(", "masks", ",", "dim", "=", "0", ")", "\n", "\n", "", "", "data", "[", "'imgs'", "]", "=", "default_collate", "(", "[", "item", "[", "'imgs'", "]", "for", "item", "in", "samples", "]", ")", "\n", "if", "'imgs_cf'", "in", "samples", "[", "0", "]", ":", "\n", "        ", "imgs_cf", "=", "[", "s", "[", "'imgs_cf'", "]", "for", "s", "in", "samples", "]", "\n", "if", "imgs_cf", "!=", "[", "None", "]", "*", "len", "(", "imgs_cf", ")", ":", "\n", "            ", "imgs_cf", "=", "[", "torch", ".", "zeros_like", "(", "samples", "[", "0", "]", "[", "'imgs'", "]", ")", "if", "m", "is", "None", "\n", "else", "m", "for", "m", "in", "imgs_cf", "]", "\n", "data", "[", "'imgs_cf'", "]", "=", "torch", ".", "stack", "(", "imgs_cf", ",", "dim", "=", "0", ")", "\n", "\n", "", "", "targets", "=", "default_collate", "(", "[", "item", "[", "1", "]", "for", "item", "in", "batch", "]", ")", "\n", "return", "[", "data", ",", "targets", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.in9_datasets.IN9Dataset.__init__": [[20, 41], ["torchvision.datasets.ImageFolder.__init__", "set", "open", "set.add", "os.path.basename", "line.strip"], "methods", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.bit_pytorch.lbtoolbox.Chrono.__init__"], ["def", "__init__", "(", "self", ",", "train_dir", "=", "'./datasets/bg_challenge/train/original/train/'", ",", "\n", "no_fg_dir", "=", "'./datasets/bg_challenge/train/no_fg/train/'", ",", "\n", "cf_inpaint_dir", "=", "None", ",", "\n", "mask_only", "=", "False", ",", "\n", "bbox_noise", "=", "0.", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "train_dir", "=", "train_dir", "\n", "self", ".", "no_fg_dir", "=", "no_fg_dir", "\n", "self", ".", "cf_inpaint_dir", "=", "cf_inpaint_dir", "\n", "self", ".", "bbox_noise", "=", "bbox_noise", "\n", "\n", "if", "mask_only", ":", "\n", "            ", "mask_f", "=", "'./datasets/bg_challenge/train/original/have_mask_files'", "\n", "valid_files", "=", "set", "(", ")", "\n", "with", "open", "(", "mask_f", ")", "as", "fp", ":", "\n", "                ", "for", "line", "in", "fp", ":", "\n", "                    ", "valid_files", ".", "add", "(", "line", ".", "strip", "(", ")", ")", "\n", "", "", "is_valid_file", "=", "lambda", "path", ":", "os", ".", "path", ".", "basename", "(", "path", ")", "in", "valid_files", "\n", "kwargs", "[", "'is_valid_file'", "]", "=", "is_valid_file", "\n", "\n", "", "super", "(", ")", ".", "__init__", "(", "train_dir", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.in9_datasets.IN9Dataset.__getitem__": [[42, 140], ["in9_datasets.IN9Dataset.loader", "os.path.join", "dict", "path.split", "os.path.exists", "in9_datasets.IN9Dataset.loader", "os.path.join", "in9_datasets.IN9Dataset.transform", "in9_datasets.IN9Dataset.target_transform", "numpy.asarray", "numpy.asarray", "numpy.asarray", "move_matrix.all().any", "in9_datasets.IN9Dataset.update", "move_matrix.astype", "PIL.Image.fromarray", "in9_datasets.IN9Dataset.update", "in9_datasets.IN9Dataset.loader", "numpy.arange", "torch.tensor", "torch.tensor", "numpy.arange", "torch.tensor", "torch.tensor", "os.path.exists", "move_matrix.all", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "move_matrix.all().any", "move_matrix.all().any", "w.item", "int", "in9_datasets.IN9Dataset.__getitem__.move_matrix"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Override this to return the bounding box as well\n        \"\"\"", "\n", "path", ",", "target", "=", "self", ".", "samples", "[", "index", "]", "\n", "imgs", "=", "self", ".", "loader", "(", "path", ")", "\n", "\n", "cls_name", "=", "self", ".", "classes", "[", "target", "]", "\n", "img_name", "=", "path", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", "\n", "mask_path", "=", "pjoin", "(", "self", ".", "no_fg_dir", ",", "cls_name", ",", "img_name", ")", "\n", "\n", "sample", "=", "dict", "(", ")", "\n", "sample", "[", "'imgs'", "]", "=", "imgs", "\n", "if", "not", "pexists", "(", "mask_path", ")", ":", "# no such mask exists", "\n", "            ", "sample", "[", "'masks'", "]", "=", "None", "\n", "", "else", ":", "\n", "            ", "no_fg", "=", "self", ".", "loader", "(", "mask_path", ")", "\n", "is_zero", "=", "(", "np", ".", "asarray", "(", "no_fg", ")", "==", "0.", ")", "\n", "is_diff", "=", "(", "np", ".", "asarray", "(", "no_fg", ")", "!=", "np", ".", "asarray", "(", "imgs", ")", ")", "\n", "is_mask", "=", "(", "is_zero", "&", "is_diff", ")", "\n", "\n", "if", "not", "is_mask", ".", "all", "(", "axis", "=", "2", ")", ".", "any", "(", ")", ":", "\n", "                ", "sample", ".", "update", "(", "{", "\n", "'masks'", ":", "None", ",", "\n", "'xs'", ":", "torch", ".", "tensor", "(", "-", "1", ")", ",", "\n", "'ys'", ":", "torch", ".", "tensor", "(", "-", "1", ")", ",", "\n", "'ws'", ":", "torch", ".", "tensor", "(", "-", "1", ")", ",", "\n", "'hs'", ":", "torch", ".", "tensor", "(", "-", "1", ")", ",", "\n", "}", ")", "\n", "", "else", ":", "\n", "# extract x, y, w, h", "\n", "                ", "tmp", "=", "np", ".", "arange", "(", "is_mask", ".", "shape", "[", "0", "]", ")", "[", "is_mask", ".", "all", "(", "axis", "=", "2", ")", ".", "any", "(", "axis", "=", "1", ")", "]", "\n", "y", ",", "h", "=", "torch", ".", "tensor", "(", "tmp", "[", "0", "]", ")", ",", "torch", ".", "tensor", "(", "tmp", "[", "-", "1", "]", "-", "tmp", "[", "0", "]", "+", "1", ")", "\n", "tmp", "=", "np", ".", "arange", "(", "is_mask", ".", "shape", "[", "1", "]", ")", "[", "is_mask", ".", "all", "(", "axis", "=", "2", ")", ".", "any", "(", "axis", "=", "0", ")", "]", "\n", "x", ",", "w", "=", "torch", ".", "tensor", "(", "tmp", "[", "0", "]", ")", ",", "torch", ".", "tensor", "(", "tmp", "[", "-", "1", "]", "-", "tmp", "[", "0", "]", "+", "1", ")", "\n", "\n", "# Randomly move the x, y", "\n", "if", "self", ".", "bbox_noise", ">", "0.", ":", "\n", "# Move the mask content by new_x, new_y", "\n", "                    ", "def", "move_matrix", "(", "arr", ",", "offset", ",", "mode", "=", "'width'", ")", ":", "\n", "                        ", "if", "offset", "==", "0", ":", "\n", "                            ", "return", "arr", "\n", "\n", "", "if", "mode", "==", "'width'", ":", "\n", "                            ", "tmp", "=", "np", ".", "zeros", "(", "(", "arr", ".", "shape", "[", "0", "]", ",", "abs", "(", "offset", ")", ",", "3", ")", ",", "dtype", "=", "bool", ")", "\n", "if", "offset", "<", "0", ":", "\n", "                                ", "arr", "=", "np", ".", "concatenate", "(", "[", "\n", "arr", "[", ":", ",", "abs", "(", "offset", ")", ":", ",", ":", "]", ",", "tmp", ",", "\n", "]", ",", "axis", "=", "1", ")", "\n", "", "else", ":", "\n", "                                ", "arr", "=", "np", ".", "concatenate", "(", "[", "\n", "tmp", ",", "arr", "[", ":", ",", ":", "-", "abs", "(", "offset", ")", ",", ":", "]", "\n", "]", ",", "axis", "=", "1", ")", "\n", "", "", "elif", "mode", "==", "'height'", ":", "\n", "                            ", "tmp", "=", "np", ".", "zeros", "(", "(", "abs", "(", "offset", ")", ",", "arr", ".", "shape", "[", "1", "]", ",", "3", ")", ",", "dtype", "=", "bool", ")", "\n", "if", "offset", "<", "0", ":", "\n", "                                ", "arr", "=", "np", ".", "concatenate", "(", "[", "\n", "arr", "[", "abs", "(", "offset", ")", ":", ",", ":", ",", ":", "]", ",", "tmp", ",", "\n", "]", ",", "axis", "=", "0", ")", "\n", "", "else", ":", "\n", "                                ", "arr", "=", "np", ".", "concatenate", "(", "[", "\n", "tmp", ",", "arr", "[", ":", "-", "abs", "(", "offset", ")", ",", ":", ",", ":", "]", "\n", "]", ",", "axis", "=", "0", ")", "\n", "", "", "return", "arr", "\n", "\n", "", "x_offset", ",", "y_offset", "=", "0", ",", "0", "\n", "if", "w", ".", "item", "(", ")", "<", "is_mask", ".", "shape", "[", "1", "]", ":", "\n", "                        ", "offsets", "=", "np", ".", "arange", "(", "(", "is_mask", ".", "shape", "[", "1", "]", "-", "w", ".", "item", "(", ")", ")", ")", "-", "x", ".", "item", "(", ")", "\n", "max_offset", "=", "offsets", "[", "np", ".", "abs", "(", "offsets", ")", ".", "argmax", "(", ")", "]", "\n", "\n", "x_offset", "=", "int", "(", "self", ".", "bbox_noise", "*", "max_offset", ")", "\n", "is_mask", "=", "move_matrix", "(", "is_mask", ",", "x_offset", ",", "mode", "=", "'width'", ")", "\n", "", "if", "h", ".", "item", "(", ")", "<", "is_mask", ".", "shape", "[", "0", "]", ":", "\n", "                        ", "offsets", "=", "np", ".", "arange", "(", "(", "is_mask", ".", "shape", "[", "0", "]", "-", "h", ".", "item", "(", ")", ")", ")", "-", "y", ".", "item", "(", ")", "\n", "max_offset", "=", "offsets", "[", "np", ".", "abs", "(", "offsets", ")", ".", "argmax", "(", ")", "]", "\n", "\n", "y_offset", "=", "int", "(", "self", ".", "bbox_noise", "*", "max_offset", ")", "\n", "is_mask", "=", "move_matrix", "(", "is_mask", ",", "y_offset", ",", "mode", "=", "'height'", ")", "\n", "\n", "", "x", ",", "y", "=", "x", "+", "x_offset", ",", "y", "+", "y_offset", "\n", "", "fg_mask", "=", "is_mask", ".", "astype", "(", "'uint8'", ")", "\n", "fg_mask", "=", "Image", ".", "fromarray", "(", "fg_mask", "*", "255", ")", "\n", "\n", "sample", ".", "update", "(", "{", "'masks'", ":", "fg_mask", ",", "'xs'", ":", "x", ",", "'ys'", ":", "y", ",", "'ws'", ":", "w", ",", "'hs'", ":", "h", "}", ")", "\n", "\n", "", "", "if", "self", ".", "cf_inpaint_dir", "is", "not", "None", ":", "\n", "            ", "cf_path", "=", "pjoin", "(", "self", ".", "cf_inpaint_dir", ",", "cls_name", ",", "img_name", ")", "\n", "sample", "[", "'imgs_cf'", "]", "=", "self", ".", "loader", "(", "cf_path", ")", "if", "pexists", "(", "cf_path", ")", "and", "sample", "[", "'masks'", "]", "is", "not", "None", "else", "None", "\n", "\n", "", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "sample", "=", "self", ".", "transform", "(", "sample", ")", "\n", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "\n", "", "return", "sample", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.in9_datasets.IN9Dataset.get_train_transform": [[141, 156], ["torchvision.transforms.Compose", "bbox_utils.Resize", "bbox_utils.RandomCrop", "bbox_utils.RandomHorizontalFlip", "bbox_utils.ColorJitter", "bbox_utils.ToTensor", "bbox_utils.Normalize"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "get_train_transform", "(", "self", ",", "test_run", "=", "False", ")", ":", "\n", "        ", "precut", ",", "cut", "=", "256", ",", "224", "\n", "if", "test_run", ":", "\n", "            ", "precut", ",", "cut", "=", "16", ",", "14", "\n", "\n", "", "train_bbox_tx", "=", "tv", ".", "transforms", ".", "Compose", "(", "[", "\n", "bbox_utils", ".", "Resize", "(", "(", "precut", ",", "precut", ")", ")", ",", "\n", "bbox_utils", ".", "RandomCrop", "(", "(", "cut", ",", "cut", ")", ")", ",", "\n", "bbox_utils", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "bbox_utils", ".", "ColorJitter", "(", ")", ",", "\n", "bbox_utils", ".", "ToTensor", "(", ")", ",", "\n", "bbox_utils", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", ",", "\n", "]", ")", "\n", "return", "train_bbox_tx", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.in9_datasets.IN9Dataset.get_val_transform": [[157, 167], ["torchvision.transforms.Compose", "bbox_utils.Resize", "bbox_utils.ToTensor", "bbox_utils.Normalize"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "get_val_transform", "(", "self", ",", "test_run", "=", "False", ")", ":", "\n", "        ", "cut", "=", "14", "if", "test_run", "else", "224", "\n", "\n", "val_bbox_tx", "=", "tv", ".", "transforms", ".", "Compose", "(", "[", "\n", "bbox_utils", ".", "Resize", "(", "(", "cut", ",", "cut", ")", ")", ",", "\n", "bbox_utils", ".", "ToTensor", "(", ")", ",", "\n", "bbox_utils", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", ",", "\n", "]", ")", "\n", "return", "val_bbox_tx", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.in9_datasets.IN9Dataset.make_loader": [[168, 173], ["torch.utils.data.dataloader.DataLoader"], "methods", ["None"], ["", "def", "make_loader", "(", "self", ",", "batch_size", ",", "shuffle", ",", "workers", ",", "pin_memory", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "DataLoader", "(", "\n", "self", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "shuffle", ",", "\n", "num_workers", "=", "workers", ",", "pin_memory", "=", "pin_memory", ",", "\n", "collate_fn", "=", "bbox_utils", ".", "bbox_collate", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.in9_datasets.IN9Dataset.is_bbox_folder": [[174, 177], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "is_bbox_folder", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.waterbirds_datasets.WaterbirdDataset.__init__": [[17, 57], ["torch.utils.data.dataset.Dataset.__init__", "pandas.read_csv", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.bit_pytorch.lbtoolbox.Chrono.__init__"], ["def", "__init__", "(", "self", ",", "\n", "mode", ",", "\n", "type", "=", "'all'", ",", "\n", "train_dir", "=", "'./datasets/waterbird/waterbird_complete95_forest2water2/'", ",", "\n", "seg_dir", "=", "'./datasets/waterbird/segmentations/'", ",", "\n", "only_images", "=", "False", ",", "\n", "cf_inpaint_dir", "=", "None", ",", "\n", "transform", "=", "None", ")", ":", "\n", "        ", "'''\n        Data loader for waterbird dataset\n        :param mode: choose from ['train', 'val', 'test']\n        :param type: choose from ['same', 'flip', 'all']. Same means to choose\n            images with the same backgrounds as labels. 'Flip' means\n            to choose images with opposite backgrounds than labels.\n        :param train_dir:\n        :param seg_dir:\n        :param cf_inpaint_dir:\n        :param transform:\n        '''", "\n", "assert", "mode", "in", "[", "'train'", ",", "'val'", ",", "'test'", ",", "'all'", "]", "\n", "assert", "type", "in", "[", "'same'", ",", "'flip'", ",", "'all'", "]", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "train_dir", "=", "train_dir", "\n", "self", ".", "seg_dir", "=", "seg_dir", "\n", "self", ".", "only_images", "=", "only_images", "\n", "self", ".", "cf_inpaint_dir", "=", "cf_inpaint_dir", "\n", "self", ".", "transform", "=", "transform", "\n", "\n", "self", ".", "metadata", "=", "pd", ".", "read_csv", "(", "pjoin", "(", "train_dir", ",", "'metadata.csv'", ")", ")", "\n", "if", "mode", "!=", "'all'", ":", "\n", "            ", "mode_idx", "=", "{", "'train'", ":", "0", ",", "'val'", ":", "1", ",", "'test'", ":", "2", "}", "[", "mode", "]", "\n", "self", ".", "metadata", "=", "self", ".", "metadata", "[", "self", ".", "metadata", ".", "split", "==", "mode_idx", "]", "\n", "\n", "", "if", "type", "==", "'same'", ":", "\n", "            ", "is_kept", "=", "(", "self", ".", "metadata", ".", "y", "==", "self", ".", "metadata", ".", "place", ")", "\n", "self", ".", "metadata", "=", "self", ".", "metadata", "[", "is_kept", "]", "\n", "", "elif", "type", "==", "'flip'", ":", "\n", "            ", "is_kept", "=", "(", "self", ".", "metadata", ".", "y", "!=", "self", ".", "metadata", ".", "place", ")", "\n", "self", ".", "metadata", "=", "self", ".", "metadata", "[", "is_kept", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.waterbirds_datasets.WaterbirdDataset.__getitem__": [[58, 95], ["os.path.join", "PIL.Image.open().convert", "os.path.join", "PIL.Image.open().convert", "dict", "waterbirds_datasets.WaterbirdDataset.transform", "f_name.replace", "numpy.asarray", "numpy.arange", "torch.tensor", "torch.tensor", "numpy.arange", "torch.tensor", "torch.tensor", "os.path.join", "PIL.Image.open().convert", "waterbirds_datasets.WaterbirdDataset.transform", "PIL.Image.open", "PIL.Image.open", "seg_np.all().any", "seg_np.all().any", "PIL.Image.open", "seg_np.all", "seg_np.all"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Override this to return the bounding box as well\n        \"\"\"", "\n", "f_name", "=", "self", ".", "metadata", ".", "img_filename", ".", "iloc", "[", "index", "]", "\n", "img_path", "=", "pjoin", "(", "self", ".", "train_dir", ",", "f_name", ")", "\n", "img", "=", "Image", ".", "open", "(", "img_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "target", "=", "self", ".", "metadata", ".", "y", ".", "iloc", "[", "index", "]", "\n", "\n", "if", "self", ".", "only_images", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "return", "img", ",", "target", "\n", "\n", "", "seg_path", "=", "pjoin", "(", "self", ".", "seg_dir", ",", "f_name", ".", "replace", "(", "'.jpg'", ",", "'.png'", ")", ")", "\n", "seg", "=", "Image", ".", "open", "(", "seg_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n", "sample", "=", "dict", "(", ")", "\n", "sample", "[", "'imgs'", "]", "=", "img", "\n", "sample", "[", "'masks'", "]", "=", "seg", "\n", "\n", "# extract x, y, w, h", "\n", "seg_np", "=", "np", ".", "asarray", "(", "seg", ")", "/", "255", "\n", "tmp", "=", "np", ".", "arange", "(", "seg_np", ".", "shape", "[", "0", "]", ")", "[", "seg_np", ".", "all", "(", "axis", "=", "2", ")", ".", "any", "(", "axis", "=", "1", ")", "]", "\n", "sample", "[", "'ys'", "]", ",", "sample", "[", "'hs'", "]", "=", "torch", ".", "tensor", "(", "tmp", "[", "0", "]", ")", ",", "torch", ".", "tensor", "(", "tmp", "[", "-", "1", "]", "-", "tmp", "[", "0", "]", "+", "1", ")", "\n", "tmp", "=", "np", ".", "arange", "(", "seg_np", ".", "shape", "[", "1", "]", ")", "[", "seg_np", ".", "all", "(", "axis", "=", "2", ")", ".", "any", "(", "axis", "=", "0", ")", "]", "\n", "sample", "[", "'xs'", "]", ",", "sample", "[", "'ws'", "]", "=", "torch", ".", "tensor", "(", "tmp", "[", "0", "]", ")", ",", "torch", ".", "tensor", "(", "tmp", "[", "-", "1", "]", "-", "tmp", "[", "0", "]", "+", "1", ")", "\n", "\n", "if", "self", ".", "cf_inpaint_dir", "is", "not", "None", ":", "\n", "            ", "cf_path", "=", "pjoin", "(", "self", ".", "cf_inpaint_dir", ",", "f_name", ")", "\n", "sample", "[", "'imgs_cf'", "]", "=", "Image", ".", "open", "(", "cf_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n", "", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "sample", "=", "self", ".", "transform", "(", "sample", ")", "\n", "\n", "", "return", "sample", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.waterbirds_datasets.WaterbirdDataset.__len__": [[96, 98], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "metadata", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.waterbirds_datasets.WaterbirdDataset.get_train_transform": [[99, 114], ["torchvision.transforms.Compose", "bbox_utils.Resize", "bbox_utils.RandomCrop", "bbox_utils.RandomHorizontalFlip", "bbox_utils.ColorJitter", "bbox_utils.ToTensor", "bbox_utils.Normalize"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "get_train_transform", "(", "self", ",", "test_run", "=", "False", ")", ":", "\n", "        ", "precut", ",", "cut", "=", "256", ",", "224", "\n", "if", "test_run", ":", "\n", "            ", "precut", ",", "cut", "=", "16", ",", "14", "\n", "\n", "", "train_bbox_tx", "=", "tv", ".", "transforms", ".", "Compose", "(", "[", "\n", "bbox_utils", ".", "Resize", "(", "(", "precut", ",", "precut", ")", ")", ",", "\n", "bbox_utils", ".", "RandomCrop", "(", "(", "cut", ",", "cut", ")", ")", ",", "\n", "bbox_utils", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "bbox_utils", ".", "ColorJitter", "(", ")", ",", "\n", "bbox_utils", ".", "ToTensor", "(", ")", ",", "\n", "bbox_utils", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", ",", "\n", "]", ")", "\n", "return", "train_bbox_tx", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.waterbirds_datasets.WaterbirdDataset.get_val_transform": [[115, 125], ["torchvision.transforms.Compose", "bbox_utils.Resize", "bbox_utils.ToTensor", "bbox_utils.Normalize"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "get_val_transform", "(", "self", ",", "test_run", "=", "False", ")", ":", "\n", "        ", "cut", "=", "14", "if", "test_run", "else", "224", "\n", "\n", "val_bbox_tx", "=", "tv", ".", "transforms", ".", "Compose", "(", "[", "\n", "bbox_utils", ".", "Resize", "(", "(", "cut", ",", "cut", ")", ")", ",", "\n", "bbox_utils", ".", "ToTensor", "(", ")", ",", "\n", "bbox_utils", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", ",", "\n", "]", ")", "\n", "return", "val_bbox_tx", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.waterbirds_datasets.WaterbirdDataset.make_loader": [[126, 135], ["torch.utils.data.dataloader.DataLoader"], "methods", ["None"], ["", "def", "make_loader", "(", "self", ",", "batch_size", ",", "shuffle", ",", "workers", ",", "pin_memory", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "collate_fn", "=", "None", "\n", "if", "not", "self", ".", "only_images", ":", "\n", "            ", "collate_fn", "=", "bbox_utils", ".", "bbox_collate", "\n", "\n", "", "return", "DataLoader", "(", "\n", "self", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "shuffle", ",", "\n", "num_workers", "=", "workers", ",", "pin_memory", "=", "pin_memory", ",", "\n", "collate_fn", "=", "collate_fn", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.data.waterbirds_datasets.WaterbirdDataset.is_bbox_folder": [[136, 139], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "is_bbox_folder", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.bit_pytorch.models.StdConv2d.forward": [[27, 33], ["torch.var_mean", "torch.var_mean", "torch.var_mean", "torch.var_mean", "torch.var_mean", "torch.var_mean", "torch.var_mean", "torch.var_mean", "torch.var_mean", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt"], "methods", ["None"], ["    ", "w", "=", "self", ".", "weight", "\n", "v", ",", "m", "=", "torch", ".", "var_mean", "(", "w", ",", "dim", "=", "[", "1", ",", "2", ",", "3", "]", ",", "keepdim", "=", "True", ",", "unbiased", "=", "False", ")", "\n", "w", "=", "(", "w", "-", "m", ")", "/", "torch", ".", "sqrt", "(", "v", "+", "1e-10", ")", "\n", "return", "F", ".", "conv2d", "(", "x", ",", "w", ",", "self", ".", "bias", ",", "self", ".", "stride", ",", "self", ".", "padding", ",", "\n", "self", ".", "dilation", ",", "self", ".", "groups", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.bit_pytorch.models.PreActBottleneck.__init__": [[61, 77], ["torch.Module.__init__", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "models.conv1x1", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "models.conv3x3", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "models.conv1x1", "torch.ReLU", "torch.ReLU", "torch.ReLU", "models.conv1x1"], "methods", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.bit_pytorch.lbtoolbox.Chrono.__init__", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.bit_pytorch.models.conv1x1", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.bit_pytorch.models.conv3x3", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.bit_pytorch.models.conv1x1", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.bit_pytorch.models.conv1x1"], ["    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "cout", "=", "cout", "or", "cin", "\n", "cmid", "=", "cmid", "or", "cout", "//", "4", "\n", "\n", "self", ".", "gn1", "=", "nn", ".", "GroupNorm", "(", "32", ",", "cin", ")", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "cin", ",", "cmid", ")", "\n", "self", ".", "gn2", "=", "nn", ".", "GroupNorm", "(", "32", ",", "cmid", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "cmid", ",", "cmid", ",", "stride", ")", "# Original code has it on conv1!!", "\n", "self", ".", "gn3", "=", "nn", ".", "GroupNorm", "(", "32", ",", "cmid", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "cmid", ",", "cout", ")", "\n", "self", ".", "relu", "=", "lambda", ":", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "if", "(", "stride", "!=", "1", "or", "cin", "!=", "cout", ")", ":", "\n", "# Projection also with pre-activation according to paper.", "\n", "      ", "self", ".", "downsample", "=", "conv1x1", "(", "cin", ",", "cout", ",", "stride", ")", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.bit_pytorch.models.PreActBottleneck.forward": [[78, 92], ["models.PreActBottleneck.relu", "hasattr", "models.PreActBottleneck.conv1", "models.PreActBottleneck.conv2", "models.PreActBottleneck.conv3", "models.PreActBottleneck.gn1", "models.PreActBottleneck.downsample", "models.PreActBottleneck.relu", "models.PreActBottleneck.relu", "models.PreActBottleneck.gn2", "models.PreActBottleneck.gn3"], "methods", ["None"], ["    ", "out", "=", "self", ".", "relu", "(", ")", "(", "self", ".", "gn1", "(", "x", ")", ")", "\n", "\n", "# Residual branch", "\n", "residual", "=", "x", "\n", "if", "hasattr", "(", "self", ",", "'downsample'", ")", ":", "\n", "      ", "residual", "=", "self", ".", "downsample", "(", "out", ")", "\n", "\n", "# Unit's branch", "\n", "", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "self", ".", "relu", "(", ")", "(", "self", ".", "gn2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "conv3", "(", "self", ".", "relu", "(", ")", "(", "self", ".", "gn3", "(", "out", ")", ")", ")", "\n", "\n", "return", "out", "+", "residual", "\n", "\n", "", "def", "load_from", "(", "self", ",", "weights", ",", "prefix", "=", "''", ")", ":", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.bit_pytorch.models.PreActBottleneck.load_from": [[93, 108], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "models.PreActBottleneck.conv1.weight.copy_", "models.PreActBottleneck.conv2.weight.copy_", "models.PreActBottleneck.conv3.weight.copy_", "models.PreActBottleneck.gn1.weight.copy_", "models.PreActBottleneck.gn2.weight.copy_", "models.PreActBottleneck.gn3.weight.copy_", "models.PreActBottleneck.gn1.bias.copy_", "models.PreActBottleneck.gn2.bias.copy_", "models.PreActBottleneck.gn3.bias.copy_", "hasattr", "models.tf2th", "models.tf2th", "models.tf2th", "models.tf2th", "models.tf2th", "models.tf2th", "models.tf2th", "models.tf2th", "models.tf2th", "models.PreActBottleneck.downsample.weight.copy_", "models.tf2th"], "methods", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.bit_pytorch.models.tf2th", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.bit_pytorch.models.tf2th", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.bit_pytorch.models.tf2th", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.bit_pytorch.models.tf2th", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.bit_pytorch.models.tf2th", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.bit_pytorch.models.tf2th", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.bit_pytorch.models.tf2th", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.bit_pytorch.models.tf2th", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.bit_pytorch.models.tf2th", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.bit_pytorch.models.tf2th"], ["    ", "convname", "=", "'standardized_conv2d'", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "      ", "self", ".", "conv1", ".", "weight", ".", "copy_", "(", "tf2th", "(", "weights", "[", "f'{prefix}a/{convname}/kernel'", "]", ")", ")", "\n", "self", ".", "conv2", ".", "weight", ".", "copy_", "(", "tf2th", "(", "weights", "[", "f'{prefix}b/{convname}/kernel'", "]", ")", ")", "\n", "self", ".", "conv3", ".", "weight", ".", "copy_", "(", "tf2th", "(", "weights", "[", "f'{prefix}c/{convname}/kernel'", "]", ")", ")", "\n", "self", ".", "gn1", ".", "weight", ".", "copy_", "(", "tf2th", "(", "weights", "[", "f'{prefix}a/group_norm/gamma'", "]", ")", ")", "\n", "self", ".", "gn2", ".", "weight", ".", "copy_", "(", "tf2th", "(", "weights", "[", "f'{prefix}b/group_norm/gamma'", "]", ")", ")", "\n", "self", ".", "gn3", ".", "weight", ".", "copy_", "(", "tf2th", "(", "weights", "[", "f'{prefix}c/group_norm/gamma'", "]", ")", ")", "\n", "self", ".", "gn1", ".", "bias", ".", "copy_", "(", "tf2th", "(", "weights", "[", "f'{prefix}a/group_norm/beta'", "]", ")", ")", "\n", "self", ".", "gn2", ".", "bias", ".", "copy_", "(", "tf2th", "(", "weights", "[", "f'{prefix}b/group_norm/beta'", "]", ")", ")", "\n", "self", ".", "gn3", ".", "bias", ".", "copy_", "(", "tf2th", "(", "weights", "[", "f'{prefix}c/group_norm/beta'", "]", ")", ")", "\n", "if", "hasattr", "(", "self", ",", "'downsample'", ")", ":", "\n", "        ", "w", "=", "weights", "[", "f'{prefix}a/proj/{convname}/kernel'", "]", "\n", "self", ".", "downsample", ".", "weight", ".", "copy_", "(", "tf2th", "(", "w", ")", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.bit_pytorch.models.ResNetV2.__init__": [[113, 153], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "collections.OrderedDict", "collections.OrderedDict", "collections.OrderedDict", "models.StdConv2d", "torch.ConstantPad2d", "torch.ConstantPad2d", "torch.ConstantPad2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "collections.OrderedDict", "collections.OrderedDict", "collections.OrderedDict", "collections.OrderedDict", "models.PreActBottleneck", "models.PreActBottleneck", "range", "models.PreActBottleneck", "models.PreActBottleneck", "range", "models.PreActBottleneck", "models.PreActBottleneck", "range", "models.PreActBottleneck", "models.PreActBottleneck", "range"], "methods", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.bit_pytorch.lbtoolbox.Chrono.__init__"], ["in_channels", "=", "3", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "wf", "=", "width_factor", "# shortcut 'cause we'll use it a lot.", "\n", "self", ".", "head_size", "=", "head_size", "\n", "\n", "# The following will be unreadable if we split lines.", "\n", "# pylint: disable=line-too-long", "\n", "self", ".", "root", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "\n", "(", "'conv'", ",", "StdConv2d", "(", "in_channels", ",", "64", "*", "wf", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", ")", ")", ",", "\n", "(", "'pad'", ",", "nn", ".", "ConstantPad2d", "(", "1", ",", "0", ")", ")", ",", "\n", "(", "'pool'", ",", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", ")", ",", "\n", "# The following is subtly not the same!", "\n", "# ('pool', nn.MaxPool2d(kernel_size=3, stride=2, padding=1)),", "\n", "]", ")", ")", "\n", "\n", "self", ".", "body", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "\n", "(", "'block1'", ",", "nn", ".", "Sequential", "(", "OrderedDict", "(", "\n", "[", "(", "'unit01'", ",", "PreActBottleneck", "(", "cin", "=", "64", "*", "wf", ",", "cout", "=", "256", "*", "wf", ",", "cmid", "=", "64", "*", "wf", ")", ")", "]", "+", "\n", "[", "(", "f'unit{i:02d}'", ",", "PreActBottleneck", "(", "cin", "=", "256", "*", "wf", ",", "cout", "=", "256", "*", "wf", ",", "cmid", "=", "64", "*", "wf", ")", ")", "for", "i", "in", "range", "(", "2", ",", "block_units", "[", "0", "]", "+", "1", ")", "]", ",", "\n", ")", ")", ")", ",", "\n", "(", "'block2'", ",", "nn", ".", "Sequential", "(", "OrderedDict", "(", "\n", "[", "(", "'unit01'", ",", "PreActBottleneck", "(", "cin", "=", "256", "*", "wf", ",", "cout", "=", "512", "*", "wf", ",", "cmid", "=", "128", "*", "wf", ",", "stride", "=", "2", ")", ")", "]", "+", "\n", "[", "(", "f'unit{i:02d}'", ",", "PreActBottleneck", "(", "cin", "=", "512", "*", "wf", ",", "cout", "=", "512", "*", "wf", ",", "cmid", "=", "128", "*", "wf", ")", ")", "for", "i", "in", "range", "(", "2", ",", "block_units", "[", "1", "]", "+", "1", ")", "]", ",", "\n", ")", ")", ")", ",", "\n", "(", "'block3'", ",", "nn", ".", "Sequential", "(", "OrderedDict", "(", "\n", "[", "(", "'unit01'", ",", "PreActBottleneck", "(", "cin", "=", "512", "*", "wf", ",", "cout", "=", "1024", "*", "wf", ",", "cmid", "=", "256", "*", "wf", ",", "stride", "=", "2", ")", ")", "]", "+", "\n", "[", "(", "f'unit{i:02d}'", ",", "PreActBottleneck", "(", "cin", "=", "1024", "*", "wf", ",", "cout", "=", "1024", "*", "wf", ",", "cmid", "=", "256", "*", "wf", ")", ")", "for", "i", "in", "range", "(", "2", ",", "block_units", "[", "2", "]", "+", "1", ")", "]", ",", "\n", ")", ")", ")", ",", "\n", "(", "'block4'", ",", "nn", ".", "Sequential", "(", "OrderedDict", "(", "\n", "[", "(", "'unit01'", ",", "PreActBottleneck", "(", "cin", "=", "1024", "*", "wf", ",", "cout", "=", "2048", "*", "wf", ",", "cmid", "=", "512", "*", "wf", ",", "stride", "=", "2", ")", ")", "]", "+", "\n", "[", "(", "f'unit{i:02d}'", ",", "PreActBottleneck", "(", "cin", "=", "2048", "*", "wf", ",", "cout", "=", "2048", "*", "wf", ",", "cmid", "=", "512", "*", "wf", ")", ")", "for", "i", "in", "range", "(", "2", ",", "block_units", "[", "3", "]", "+", "1", ")", "]", ",", "\n", ")", ")", ")", ",", "\n", "]", ")", ")", "\n", "# pylint: enable=line-too-long", "\n", "\n", "self", ".", "zero_head", "=", "zero_head", "\n", "self", ".", "head", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "\n", "(", "'gn'", ",", "nn", ".", "GroupNorm", "(", "32", ",", "2048", "*", "wf", ")", ")", ",", "\n", "(", "'relu'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "(", "'avg'", ",", "nn", ".", "AdaptiveAvgPool2d", "(", "output_size", "=", "1", ")", ")", ",", "\n", "(", "'conv'", ",", "nn", ".", "Conv2d", "(", "2048", "*", "wf", ",", "head_size", ",", "kernel_size", "=", "1", ",", "bias", "=", "True", ")", ")", ",", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.bit_pytorch.models.ResNetV2.forward": [[155, 159], ["models.ResNetV2.head", "models.ResNetV2.body", "models.ResNetV2.root"], "methods", ["None"], ["\n", "if", "zero_head", ":", "\n", "        ", "nn", ".", "init", ".", "zeros_", "(", "self", ".", "head", ".", "conv", ".", "weight", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "self", ".", "head", ".", "conv", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.bit_pytorch.models.ResNetV2.load_from": [[160, 175], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "models.ResNetV2.root.conv.weight.copy_", "models.ResNetV2.head.gn.weight.copy_", "models.ResNetV2.head.gn.bias.copy_", "models.ResNetV2.body.named_children", "models.tf2th", "models.tf2th", "models.tf2th", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "models.ResNetV2.head.conv.weight.copy_", "models.ResNetV2.head.conv.bias.copy_", "block.named_children", "models.tf2th", "models.tf2th", "unit.load_from"], "methods", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.bit_pytorch.models.tf2th", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.bit_pytorch.models.tf2th", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.bit_pytorch.models.tf2th", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.bit_pytorch.models.tf2th", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.bit_pytorch.models.tf2th", "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.bit_pytorch.models.ResNetV2.load_from"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "x", "=", "self", ".", "head", "(", "self", ".", "body", "(", "self", ".", "root", "(", "x", ")", ")", ")", "\n", "assert", "x", ".", "shape", "[", "-", "2", ":", "]", "==", "(", "1", ",", "1", ")", "# We should have no spatial shape left.", "\n", "return", "x", "[", "...", ",", "0", ",", "0", "]", "\n", "\n", "", "def", "load_from", "(", "self", ",", "weights", ",", "prefix", "=", "'resnet/'", ",", "last_layer_load", "=", "False", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "      ", "self", ".", "root", ".", "conv", ".", "weight", ".", "copy_", "(", "tf2th", "(", "weights", "[", "f'{prefix}root_block/standardized_conv2d/kernel'", "]", ")", ")", "# pylint: disable=line-too-long", "\n", "self", ".", "head", ".", "gn", ".", "weight", ".", "copy_", "(", "tf2th", "(", "weights", "[", "f'{prefix}group_norm/gamma'", "]", ")", ")", "\n", "self", ".", "head", ".", "gn", ".", "bias", ".", "copy_", "(", "tf2th", "(", "weights", "[", "f'{prefix}group_norm/beta'", "]", ")", ")", "\n", "if", "last_layer_load", ":", "\n", "          ", "assert", "self", ".", "head_size", "==", "1000", "\n", "self", ".", "head", ".", "conv", ".", "weight", ".", "copy_", "(", "tf2th", "(", "weights", "[", "f'{prefix}head/conv2d/kernel'", "]", ")", ")", "# pylint: disable=line-too-long", "\n", "self", ".", "head", ".", "conv", ".", "bias", ".", "copy_", "(", "tf2th", "(", "weights", "[", "f'{prefix}head/conv2d/bias'", "]", ")", ")", "\n", "\n", "", "for", "bname", ",", "block", "in", "self", ".", "body", ".", "named_children", "(", ")", ":", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.bit_pytorch.models.conv3x3": [[35, 38], ["models.StdConv2d"], "function", ["None"], ["  ", "return", "StdConv2d", "(", "cin", ",", "cout", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "bias", ",", "groups", "=", "groups", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.bit_pytorch.models.conv1x1": [[40, 43], ["models.StdConv2d"], "function", ["None"], ["  ", "return", "StdConv2d", "(", "cin", ",", "cout", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "0", ",", "bias", "=", "bias", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.bit_pytorch.models.tf2th": [[45, 50], ["torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "conv_weights.transpose.transpose"], "function", ["None"], ["  ", "\"\"\"Possibly convert HWIO to OIHW.\"\"\"", "\n", "if", "conv_weights", ".", "ndim", "==", "4", ":", "\n", "    ", "conv_weights", "=", "conv_weights", ".", "transpose", "(", "[", "3", ",", "2", ",", "0", ",", "1", "]", ")", "\n", "", "return", "torch", ".", "from_numpy", "(", "conv_weights", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.bit_pytorch.lbtoolbox.Uninterrupt.__init__": [[35, 40], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "sigs", "=", "(", "signal", ".", "SIGINT", ",", "signal", ".", "SIGTERM", ")", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "self", ".", "sigs", "=", "sigs", "\n", "self", ".", "verbose", "=", "verbose", "\n", "self", ".", "interrupted", "=", "False", "\n", "self", ".", "orig_handlers", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.bit_pytorch.lbtoolbox.Uninterrupt.__enter__": [[41, 60], ["ValueError", "signal.getsignal", "lbtoolbox.Uninterrupt.release", "signal.signal", "print"], "methods", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.bit_pytorch.lbtoolbox.Uninterrupt.release"], ["", "def", "__enter__", "(", "self", ")", ":", "\n", "    ", "if", "self", ".", "orig_handlers", "is", "not", "None", ":", "\n", "      ", "raise", "ValueError", "(", "\"Can only enter `Uninterrupt` once!\"", ")", "\n", "\n", "", "self", ".", "interrupted", "=", "False", "\n", "self", ".", "orig_handlers", "=", "[", "signal", ".", "getsignal", "(", "sig", ")", "for", "sig", "in", "self", ".", "sigs", "]", "\n", "\n", "def", "handler", "(", "signum", ",", "frame", ")", ":", "\n", "      ", "del", "signum", "# unused", "\n", "del", "frame", "# unused", "\n", "self", ".", "release", "(", ")", "\n", "self", ".", "interrupted", "=", "True", "\n", "if", "self", ".", "verbose", ":", "\n", "        ", "print", "(", "\"Interruption scheduled...\"", ",", "flush", "=", "True", ")", "\n", "\n", "", "", "for", "sig", "in", "self", ".", "sigs", ":", "\n", "      ", "signal", ".", "signal", "(", "sig", ",", "handler", ")", "\n", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.bit_pytorch.lbtoolbox.Uninterrupt.__exit__": [[61, 63], ["lbtoolbox.Uninterrupt.release"], "methods", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.bit_pytorch.lbtoolbox.Uninterrupt.release"], ["", "def", "__exit__", "(", "self", ",", "type_", ",", "value", ",", "tb", ")", ":", "\n", "    ", "self", ".", "release", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.bit_pytorch.lbtoolbox.Uninterrupt.release": [[64, 69], ["zip", "signal.signal"], "methods", ["None"], ["", "def", "release", "(", "self", ")", ":", "\n", "    ", "if", "self", ".", "orig_handlers", "is", "not", "None", ":", "\n", "      ", "for", "sig", ",", "orig", "in", "zip", "(", "self", ".", "sigs", ",", "self", ".", "orig_handlers", ")", ":", "\n", "        ", "signal", ".", "signal", "(", "sig", ",", "orig", ")", "\n", "", "self", ".", "orig_handlers", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.bit_pytorch.lbtoolbox.Timer.__init__": [[74, 76], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "donecb", ")", ":", "\n", "    ", "self", ".", "cb", "=", "donecb", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.bit_pytorch.lbtoolbox.Timer.__enter__": [[77, 79], ["time.time"], "methods", ["None"], ["", "def", "__enter__", "(", "self", ")", ":", "\n", "    ", "self", ".", "t0", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.bit_pytorch.lbtoolbox.Timer.__exit__": [[80, 83], ["lbtoolbox.Timer.cb", "time.time"], "methods", ["None"], ["", "def", "__exit__", "(", "self", ",", "exc_type", ",", "exc_value", ",", "traceback", ")", ":", "\n", "    ", "t", "=", "time", ".", "time", "(", ")", "-", "self", ".", "t0", "\n", "self", ".", "cb", "(", "t", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.bit_pytorch.lbtoolbox.Chrono.__init__": [[88, 90], ["collections.OrderedDict"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "    ", "self", ".", "timings", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.bit_pytorch.lbtoolbox.Chrono.measure": [[91, 93], ["lbtoolbox.Timer", "lbtoolbox.Chrono._done"], "methods", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.bit_pytorch.lbtoolbox.Chrono._done"], ["", "def", "measure", "(", "self", ",", "what", ")", ":", "\n", "    ", "return", "Timer", "(", "lambda", "t", ":", "self", ".", "_done", "(", "what", ",", "t", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.bit_pytorch.lbtoolbox.Chrono._done": [[94, 96], ["lbtoolbox.Chrono.timings.setdefault().append", "lbtoolbox.Chrono.timings.setdefault"], "methods", ["None"], ["", "def", "_done", "(", "self", ",", "what", ",", "t", ")", ":", "\n", "    ", "self", ".", "timings", ".", "setdefault", "(", "what", ",", "[", "]", ")", ".", "append", "(", "t", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.bit_pytorch.lbtoolbox.Chrono.times": [[97, 99], ["None"], "methods", ["None"], ["", "def", "times", "(", "self", ",", "what", ")", ":", "\n", "    ", "return", "self", ".", "timings", "[", "what", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.bit_pytorch.lbtoolbox.Chrono.avgtime": [[100, 105], ["sum", "len", "len"], "methods", ["None"], ["", "def", "avgtime", "(", "self", ",", "what", ",", "dropfirst", "=", "False", ")", ":", "\n", "    ", "timings", "=", "self", ".", "timings", "[", "what", "]", "\n", "if", "dropfirst", "and", "len", "(", "timings", ")", ">", "1", ":", "\n", "      ", "timings", "=", "timings", "[", "1", ":", "]", "\n", "", "return", "sum", "(", "timings", ")", "/", "len", "(", "timings", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.bit_pytorch.lbtoolbox.Chrono.__str__": [[106, 113], ["max", "max", "sorted", "lbtoolbox.Chrono.avgtime", "map", "avgtimes.items", "len", "fmt.format", "avgtimes.values", "fmt.format"], "methods", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.bit_pytorch.lbtoolbox.Chrono.avgtime"], ["", "def", "__str__", "(", "self", ",", "fmt", "=", "\"{:{w}.5f}\"", ",", "dropfirst", "=", "False", ")", ":", "\n", "    ", "avgtimes", "=", "{", "k", ":", "self", ".", "avgtime", "(", "k", ",", "dropfirst", ")", "for", "k", "in", "self", ".", "timings", "}", "\n", "l", "=", "max", "(", "map", "(", "len", ",", "avgtimes", ")", ")", "\n", "w", "=", "max", "(", "len", "(", "fmt", ".", "format", "(", "v", ",", "w", "=", "0", ")", ")", "for", "v", "in", "avgtimes", ".", "values", "(", ")", ")", "\n", "avg_by_time", "=", "sorted", "(", "avgtimes", ".", "items", "(", ")", ",", "key", "=", "lambda", "t", ":", "t", "[", "1", "]", ",", "reverse", "=", "True", ")", "\n", "return", "\"\\n\"", ".", "join", "(", "f\"{name:{l}s}: \"", "+", "fmt", ".", "format", "(", "t", ",", "w", "=", "w", ")", "+", "\"s\"", "\n", "for", "name", ",", "t", "in", "avg_by_time", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.bit_pytorch.lbtoolbox.create_dat": [[115, 136], ["numpy.memmap", "numpy.ndarray.__new__", "meta.setdefault", "meta.setdefault", "json.dump", "np.ndarray.__new__.fill", "np.memmap.flush", "open", "numpy.dtype"], "function", ["None"], ["", "", "def", "create_dat", "(", "basename", ",", "dtype", ",", "shape", ",", "fillvalue", "=", "None", ",", "**", "meta", ")", ":", "\n", "  ", "\"\"\"Creates mem-mapped numpy array plus metadata.\n\n  Creates a data file at `basename` and returns a writeable mem-map backed\n  numpy array to it. Can also be passed any json-serializable keys and values\n  in `meta`.\n  \"\"\"", "\n", "xm", "=", "np", ".", "memmap", "(", "basename", ",", "mode", "=", "\"w+\"", ",", "dtype", "=", "dtype", ",", "shape", "=", "shape", ")", "\n", "xa", "=", "np", ".", "ndarray", ".", "__new__", "(", "np", ".", "ndarray", ",", "dtype", "=", "dtype", ",", "shape", "=", "shape", ",", "buffer", "=", "xm", ")", "\n", "# xa.flush = xm.flush  # Sadly, we can't just add attributes to a numpy array, need to subclass it.", "\n", "\n", "if", "fillvalue", "is", "not", "None", ":", "\n", "    ", "xa", ".", "fill", "(", "fillvalue", ")", "\n", "# xa.flush()", "\n", "xm", ".", "flush", "(", ")", "\n", "\n", "", "meta", ".", "setdefault", "(", "\"dtype\"", ",", "np", ".", "dtype", "(", "dtype", ")", ".", "str", ")", "\n", "meta", ".", "setdefault", "(", "\"shape\"", ",", "shape", ")", "\n", "json", ".", "dump", "(", "meta", ",", "open", "(", "basename", "+", "\".json\"", ",", "\"w+\"", ")", ")", "\n", "\n", "return", "xa", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.bit_pytorch.lbtoolbox.load_dat": [[138, 150], ["json.load", "numpy.memmap", "numpy.ndarray.__new__", "open"], "function", ["None"], ["", "def", "load_dat", "(", "basename", ",", "mode", "=", "\"r\"", ")", ":", "\n", "  ", "\"\"\"Loads file created via `create_dat` as mem-mapped numpy array.\n\n  Returns a read-only mem-mapped numpy array to file at `basename`.\n  If `mode` is set to `'r+'`, the data can be written, too.\n  \"\"\"", "\n", "desc", "=", "json", ".", "load", "(", "open", "(", "basename", "+", "\".json\"", ",", "\"r\"", ")", ")", "\n", "dtype", ",", "shape", "=", "desc", "[", "\"dtype\"", "]", ",", "desc", "[", "\"shape\"", "]", "\n", "xm", "=", "np", ".", "memmap", "(", "basename", ",", "mode", "=", "mode", ",", "dtype", "=", "dtype", ",", "shape", "=", "shape", ")", "\n", "xa", "=", "np", ".", "ndarray", ".", "__new__", "(", "np", ".", "ndarray", ",", "dtype", "=", "dtype", ",", "shape", "=", "shape", ",", "buffer", "=", "xm", ")", "\n", "# xa.flush = xm.flush  # Sadly, we can't just add attributes to a numpy array, need to subclass it.", "\n", "return", "xa", "\n", "", ""]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.bit_pytorch.fewshot.AddIndexIter._next_data": [[30, 36], ["fewshot.AddIndexIter._next_index", "fewshot.AddIndexIter._dataset_fetcher.fetch", "torch.utils.data._utils.pin_memory.pin_memory"], "methods", ["None"], ["  ", "def", "_next_data", "(", "self", ")", ":", "\n", "    ", "index", "=", "self", ".", "_next_index", "(", ")", "# may raise StopIteration", "\n", "data", "=", "self", ".", "_dataset_fetcher", ".", "fetch", "(", "index", ")", "# may raise StopIteration", "\n", "if", "self", ".", "_pin_memory", ":", "\n", "      ", "data", "=", "torch", ".", "utils", ".", "data", ".", "_utils", ".", "pin_memory", ".", "pin_memory", "(", "data", ")", "\n", "", "return", "index", ",", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.bit_pytorch.fewshot.find_indices_loader": [[38, 49], ["defaultdict", "enumerate", "RuntimeError", "partial", "fewshot.AddIndexIter", "zip", "per_label_indices[].append", "sum", "map", "defaultdict.values", "lbl.item"], "function", ["None"], ["", "", "def", "find_indices_loader", "(", "loader", ",", "n_shots", ",", "n_classes", ")", ":", "\n", "  ", "per_label_indices", "=", "defaultdict", "(", "partial", "(", "deque", ",", "maxlen", "=", "n_shots", ")", ")", "\n", "\n", "for", "ibatch", ",", "(", "indices", ",", "(", "images", ",", "labels", ")", ")", "in", "enumerate", "(", "AddIndexIter", "(", "loader", ")", ")", ":", "\n", "    ", "for", "idx", ",", "lbl", "in", "zip", "(", "indices", ",", "labels", ")", ":", "\n", "      ", "per_label_indices", "[", "lbl", ".", "item", "(", ")", "]", ".", "append", "(", "idx", ")", "\n", "\n", "findings", "=", "sum", "(", "map", "(", "len", ",", "per_label_indices", ".", "values", "(", ")", ")", ")", "\n", "if", "findings", "==", "n_shots", "*", "n_classes", ":", "\n", "        ", "return", "per_label_indices", "\n", "", "", "", "raise", "RuntimeError", "(", "\"Unable to find enough examples!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.bit_pytorch.fewshot.find_fewshot_indices": [[51, 70], ["len", "torchvision.transforms.Compose", "torch.utils.data.DataLoader", "fewshot.find_indices_loader", "random.shuffle", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor", "find_indices_loader.values"], "function", ["home.repos.pwc.inspect_result.zzzace2000_robust_cls_model.bit_pytorch.fewshot.find_indices_loader"], ["", "def", "find_fewshot_indices", "(", "dataset", ",", "n_shots", ")", ":", "\n", "  ", "n_classes", "=", "len", "(", "dataset", ".", "classes", ")", "\n", "\n", "orig_transform", "=", "dataset", ".", "transform", "\n", "dataset", ".", "transform", "=", "tv", ".", "transforms", ".", "Compose", "(", "[", "\n", "tv", ".", "transforms", ".", "CenterCrop", "(", "1", ")", ",", "\n", "tv", ".", "transforms", ".", "ToTensor", "(", ")", "\n", "]", ")", "\n", "\n", "# TODO(lbeyer): if dataset isinstance DatasetFolder, we can (maybe?) do much better!", "\n", "\n", "loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "batch_size", "=", "1024", ",", "shuffle", "=", "True", ",", "num_workers", "=", "0", ")", "\n", "\n", "per_label_indices", "=", "find_indices_loader", "(", "loader", ",", "n_shots", ",", "n_classes", ")", "\n", "all_indices", "=", "[", "i", "for", "indices", "in", "per_label_indices", ".", "values", "(", ")", "for", "i", "in", "indices", "]", "\n", "random", ".", "shuffle", "(", "all_indices", ")", "\n", "\n", "dataset", ".", "transform", "=", "orig_transform", "\n", "return", "all_indices", "\n", "\n"]]}