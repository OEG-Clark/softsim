{"home.repos.pwc.inspect_result.maximecb_gym-minigrid.None.manual_control.redraw": [[11, 16], ["window.show_img", "env.render"], "function", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.window.Window.show_img", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv.render"], ["def", "redraw", "(", "img", ")", ":", "\n", "    ", "if", "not", "args", ".", "agent_view", ":", "\n", "        ", "img", "=", "env", ".", "render", "(", "'rgb_array'", ",", "tile_size", "=", "args", ".", "tile_size", ")", "\n", "\n", "", "window", ".", "show_img", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.None.manual_control.reset": [[17, 28], ["env.reset", "hasattr", "manual_control.redraw", "env.seed", "print", "window.set_caption"], "function", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv.reset", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.None.manual_control.redraw", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv.seed", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.window.Window.set_caption"], ["", "def", "reset", "(", ")", ":", "\n", "    ", "if", "args", ".", "seed", "!=", "-", "1", ":", "\n", "        ", "env", ".", "seed", "(", "args", ".", "seed", ")", "\n", "\n", "", "obs", "=", "env", ".", "reset", "(", ")", "\n", "\n", "if", "hasattr", "(", "env", ",", "'mission'", ")", ":", "\n", "        ", "print", "(", "'Mission: %s'", "%", "env", ".", "mission", ")", "\n", "window", ".", "set_caption", "(", "env", ".", "mission", ")", "\n", "\n", "", "redraw", "(", "obs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.None.manual_control.step": [[29, 38], ["env.step", "print", "print", "manual_control.reset", "manual_control.redraw"], "function", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryEnv.step", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv.reset", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.None.manual_control.redraw"], ["", "def", "step", "(", "action", ")", ":", "\n", "    ", "obs", ",", "reward", ",", "done", ",", "info", "=", "env", ".", "step", "(", "action", ")", "\n", "print", "(", "'step=%s, reward=%.2f'", "%", "(", "env", ".", "step_count", ",", "reward", ")", ")", "\n", "\n", "if", "done", ":", "\n", "        ", "print", "(", "'done!'", ")", "\n", "reset", "(", ")", "\n", "", "else", ":", "\n", "        ", "redraw", "(", "obs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.None.manual_control.key_handler": [[39, 74], ["print", "window.close", "manual_control.reset", "manual_control.step", "manual_control.step", "manual_control.step", "manual_control.step", "manual_control.step", "manual_control.step", "manual_control.step"], "function", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.window.Window.close", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv.reset", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryEnv.step", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryEnv.step", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryEnv.step", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryEnv.step", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryEnv.step", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryEnv.step", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryEnv.step"], ["", "", "def", "key_handler", "(", "event", ")", ":", "\n", "    ", "print", "(", "'pressed'", ",", "event", ".", "key", ")", "\n", "\n", "if", "event", ".", "key", "==", "'escape'", ":", "\n", "        ", "window", ".", "close", "(", ")", "\n", "return", "\n", "\n", "", "if", "event", ".", "key", "==", "'backspace'", ":", "\n", "        ", "reset", "(", ")", "\n", "return", "\n", "\n", "", "if", "event", ".", "key", "==", "'left'", ":", "\n", "        ", "step", "(", "env", ".", "actions", ".", "left", ")", "\n", "return", "\n", "", "if", "event", ".", "key", "==", "'right'", ":", "\n", "        ", "step", "(", "env", ".", "actions", ".", "right", ")", "\n", "return", "\n", "", "if", "event", ".", "key", "==", "'up'", ":", "\n", "        ", "step", "(", "env", ".", "actions", ".", "forward", ")", "\n", "return", "\n", "\n", "# Spacebar", "\n", "", "if", "event", ".", "key", "==", "' '", ":", "\n", "        ", "step", "(", "env", ".", "actions", ".", "toggle", ")", "\n", "return", "\n", "", "if", "event", ".", "key", "==", "'pageup'", ":", "\n", "        ", "step", "(", "env", ".", "actions", ".", "pickup", ")", "\n", "return", "\n", "", "if", "event", ".", "key", "==", "'pagedown'", ":", "\n", "        ", "step", "(", "env", ".", "actions", ".", "drop", ")", "\n", "return", "\n", "\n", "", "if", "event", ".", "key", "==", "'enter'", ":", "\n", "        ", "step", "(", "env", ".", "actions", ".", "done", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.None.run_tests.EmptyEnvWithExtraObs.__init__": [[142, 149], ["super().__init__", "spaces.Box", "numpy.iinfo"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryS7.__init__"], ["def", "__init__", "(", "self", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "observation_space", "[", "'size'", "]", "=", "spaces", ".", "Box", "(", "\n", "low", "=", "0", ",", "\n", "high", "=", "np", ".", "iinfo", "(", "np", ".", "uint", ")", ".", "max", ",", "\n", "shape", "=", "(", "2", ",", ")", ",", "\n", "dtype", "=", "np", ".", "uint", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.None.run_tests.EmptyEnvWithExtraObs.reset": [[151, 155], ["super().reset", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv.reset"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "obs", "=", "super", "(", ")", ".", "reset", "(", ")", "\n", "obs", "[", "'size'", "]", "=", "np", ".", "array", "(", "[", "self", ".", "width", ",", "self", ".", "height", "]", ")", "\n", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.None.run_tests.EmptyEnvWithExtraObs.step": [[156, 160], ["super().step", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryEnv.step"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "obs", ",", "reward", ",", "done", ",", "info", "=", "super", "(", ")", ".", "step", "(", "action", ")", "\n", "obs", "[", "'size'", "]", "=", "np", ".", "array", "(", "[", "self", ".", "width", ",", "self", ".", "height", "]", ")", "\n", "return", "obs", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.wrappers.ReseedWrapper.__init__": [[17, 21], ["list", "super().__init__"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryS7.__init__"], ["def", "__init__", "(", "self", ",", "env", ",", "seeds", "=", "[", "0", "]", ",", "seed_idx", "=", "0", ")", ":", "\n", "        ", "self", ".", "seeds", "=", "list", "(", "seeds", ")", "\n", "self", ".", "seed_idx", "=", "seed_idx", "\n", "super", "(", ")", ".", "__init__", "(", "env", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.wrappers.ReseedWrapper.reset": [[22, 27], ["wrappers.ReseedWrapper.env.seed", "wrappers.ReseedWrapper.env.reset", "len"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv.seed", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv.reset"], ["", "def", "reset", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "seed", "=", "self", ".", "seeds", "[", "self", ".", "seed_idx", "]", "\n", "self", ".", "seed_idx", "=", "(", "self", ".", "seed_idx", "+", "1", ")", "%", "len", "(", "self", ".", "seeds", ")", "\n", "self", ".", "env", ".", "seed", "(", "seed", ")", "\n", "return", "self", ".", "env", ".", "reset", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.wrappers.ReseedWrapper.step": [[28, 31], ["wrappers.ReseedWrapper.env.step"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryEnv.step"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "obs", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "return", "obs", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.wrappers.ActionBonus.__init__": [[39, 42], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryS7.__init__"], ["def", "__init__", "(", "self", ",", "env", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "env", ")", "\n", "self", ".", "counts", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.wrappers.ActionBonus.step": [[43, 62], ["wrappers.ActionBonus.env.step", "tuple", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryEnv.step"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "obs", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "\n", "env", "=", "self", ".", "unwrapped", "\n", "tup", "=", "(", "tuple", "(", "env", ".", "agent_pos", ")", ",", "env", ".", "agent_dir", ",", "action", ")", "\n", "\n", "# Get the count for this (s,a) pair", "\n", "pre_count", "=", "0", "\n", "if", "tup", "in", "self", ".", "counts", ":", "\n", "            ", "pre_count", "=", "self", ".", "counts", "[", "tup", "]", "\n", "\n", "# Update the count for this (s,a) pair", "\n", "", "new_count", "=", "pre_count", "+", "1", "\n", "self", ".", "counts", "[", "tup", "]", "=", "new_count", "\n", "\n", "bonus", "=", "1", "/", "math", ".", "sqrt", "(", "new_count", ")", "\n", "reward", "+=", "bonus", "\n", "\n", "return", "obs", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.wrappers.ActionBonus.reset": [[63, 65], ["wrappers.ActionBonus.env.reset"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv.reset"], ["", "def", "reset", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "env", ".", "reset", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.wrappers.StateBonus.__init__": [[72, 75], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryS7.__init__"], ["def", "__init__", "(", "self", ",", "env", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "env", ")", "\n", "self", ".", "counts", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.wrappers.StateBonus.step": [[76, 97], ["wrappers.StateBonus.env.step", "tuple", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryEnv.step"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "obs", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "\n", "# Tuple based on which we index the counts", "\n", "# We use the position after an update", "\n", "env", "=", "self", ".", "unwrapped", "\n", "tup", "=", "(", "tuple", "(", "env", ".", "agent_pos", ")", ")", "\n", "\n", "# Get the count for this key", "\n", "pre_count", "=", "0", "\n", "if", "tup", "in", "self", ".", "counts", ":", "\n", "            ", "pre_count", "=", "self", ".", "counts", "[", "tup", "]", "\n", "\n", "# Update the count for this key", "\n", "", "new_count", "=", "pre_count", "+", "1", "\n", "self", ".", "counts", "[", "tup", "]", "=", "new_count", "\n", "\n", "bonus", "=", "1", "/", "math", ".", "sqrt", "(", "new_count", ")", "\n", "reward", "+=", "bonus", "\n", "\n", "return", "obs", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.wrappers.StateBonus.reset": [[98, 100], ["wrappers.StateBonus.env.reset"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv.reset"], ["", "def", "reset", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "env", ".", "reset", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.wrappers.ImgObsWrapper.__init__": [[106, 109], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryS7.__init__"], ["def", "__init__", "(", "self", ",", "env", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "env", ")", "\n", "self", ".", "observation_space", "=", "env", ".", "observation_space", ".", "spaces", "[", "'image'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.wrappers.ImgObsWrapper.observation": [[110, 112], ["None"], "methods", ["None"], ["", "def", "observation", "(", "self", ",", "obs", ")", ":", "\n", "        ", "return", "obs", "[", "'image'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.wrappers.OneHotPartialObsWrapper.__init__": [[119, 134], ["super().__init__", "gym.spaces.Box", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryS7.__init__"], ["def", "__init__", "(", "self", ",", "env", ",", "tile_size", "=", "8", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "env", ")", "\n", "\n", "self", ".", "tile_size", "=", "tile_size", "\n", "\n", "obs_shape", "=", "env", ".", "observation_space", "[", "'image'", "]", ".", "shape", "\n", "\n", "# Number of bits per cell", "\n", "num_bits", "=", "len", "(", "OBJECT_TO_IDX", ")", "+", "len", "(", "COLOR_TO_IDX", ")", "+", "len", "(", "STATE_TO_IDX", ")", "\n", "\n", "self", ".", "observation_space", ".", "spaces", "[", "\"image\"", "]", "=", "spaces", ".", "Box", "(", "\n", "low", "=", "0", ",", "\n", "high", "=", "255", ",", "\n", "shape", "=", "(", "obs_shape", "[", "0", "]", ",", "obs_shape", "[", "1", "]", ",", "num_bits", ")", ",", "\n", "dtype", "=", "'uint8'", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.wrappers.OneHotPartialObsWrapper.observation": [[136, 153], ["numpy.zeros", "range", "range", "len", "len", "len"], "methods", ["None"], ["", "def", "observation", "(", "self", ",", "obs", ")", ":", "\n", "        ", "img", "=", "obs", "[", "'image'", "]", "\n", "out", "=", "np", ".", "zeros", "(", "self", ".", "observation_space", ".", "spaces", "[", "'image'", "]", ".", "shape", ",", "dtype", "=", "'uint8'", ")", "\n", "\n", "for", "i", "in", "range", "(", "img", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "img", ".", "shape", "[", "1", "]", ")", ":", "\n", "                ", "type", "=", "img", "[", "i", ",", "j", ",", "0", "]", "\n", "color", "=", "img", "[", "i", ",", "j", ",", "1", "]", "\n", "state", "=", "img", "[", "i", ",", "j", ",", "2", "]", "\n", "\n", "out", "[", "i", ",", "j", ",", "type", "]", "=", "1", "\n", "out", "[", "i", ",", "j", ",", "len", "(", "OBJECT_TO_IDX", ")", "+", "color", "]", "=", "1", "\n", "out", "[", "i", ",", "j", ",", "len", "(", "OBJECT_TO_IDX", ")", "+", "len", "(", "COLOR_TO_IDX", ")", "+", "state", "]", "=", "1", "\n", "\n", "", "", "return", "{", "\n", "**", "obs", ",", "\n", "'image'", ":", "out", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.wrappers.RGBImgObsWrapper.__init__": [[161, 171], ["super().__init__", "gym.spaces.Box"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryS7.__init__"], ["def", "__init__", "(", "self", ",", "env", ",", "tile_size", "=", "8", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "env", ")", "\n", "\n", "self", ".", "tile_size", "=", "tile_size", "\n", "\n", "self", ".", "observation_space", ".", "spaces", "[", "'image'", "]", "=", "spaces", ".", "Box", "(", "\n", "low", "=", "0", ",", "\n", "high", "=", "255", ",", "\n", "shape", "=", "(", "self", ".", "env", ".", "width", "*", "tile_size", ",", "self", ".", "env", ".", "height", "*", "tile_size", ",", "3", ")", ",", "\n", "dtype", "=", "'uint8'", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.wrappers.RGBImgObsWrapper.observation": [[173, 185], ["env.render"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv.render"], ["", "def", "observation", "(", "self", ",", "obs", ")", ":", "\n", "        ", "env", "=", "self", ".", "unwrapped", "\n", "\n", "rgb_img", "=", "env", ".", "render", "(", "\n", "mode", "=", "'rgb_array'", ",", "\n", "highlight", "=", "False", ",", "\n", "tile_size", "=", "self", ".", "tile_size", "\n", ")", "\n", "\n", "return", "{", "\n", "**", "obs", ",", "\n", "'image'", ":", "rgb_img", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.wrappers.RGBImgPartialObsWrapper.__init__": [[194, 205], ["super().__init__", "gym.spaces.Box"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryS7.__init__"], ["def", "__init__", "(", "self", ",", "env", ",", "tile_size", "=", "8", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "env", ")", "\n", "\n", "self", ".", "tile_size", "=", "tile_size", "\n", "\n", "obs_shape", "=", "env", ".", "observation_space", ".", "spaces", "[", "'image'", "]", ".", "shape", "\n", "self", ".", "observation_space", ".", "spaces", "[", "'image'", "]", "=", "spaces", ".", "Box", "(", "\n", "low", "=", "0", ",", "\n", "high", "=", "255", ",", "\n", "shape", "=", "(", "obs_shape", "[", "0", "]", "*", "tile_size", ",", "obs_shape", "[", "1", "]", "*", "tile_size", ",", "3", ")", ",", "\n", "dtype", "=", "'uint8'", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.wrappers.RGBImgPartialObsWrapper.observation": [[207, 218], ["env.get_obs_render"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv.get_obs_render"], ["", "def", "observation", "(", "self", ",", "obs", ")", ":", "\n", "        ", "env", "=", "self", ".", "unwrapped", "\n", "\n", "rgb_img_partial", "=", "env", ".", "get_obs_render", "(", "\n", "obs", "[", "'image'", "]", ",", "\n", "tile_size", "=", "self", ".", "tile_size", "\n", ")", "\n", "\n", "return", "{", "\n", "**", "obs", ",", "\n", "'image'", ":", "rgb_img_partial", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.wrappers.FullyObsWrapper.__init__": [[225, 233], ["super().__init__", "gym.spaces.Box"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryS7.__init__"], ["def", "__init__", "(", "self", ",", "env", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "env", ")", "\n", "\n", "self", ".", "observation_space", ".", "spaces", "[", "\"image\"", "]", "=", "spaces", ".", "Box", "(", "\n", "low", "=", "0", ",", "\n", "high", "=", "255", ",", "\n", "shape", "=", "(", "self", ".", "env", ".", "width", ",", "self", ".", "env", ".", "height", ",", "3", ")", ",", "# number of cells", "\n", "dtype", "=", "'uint8'", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.wrappers.FullyObsWrapper.observation": [[235, 247], ["env.grid.encode", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.encode"], ["", "def", "observation", "(", "self", ",", "obs", ")", ":", "\n", "        ", "env", "=", "self", ".", "unwrapped", "\n", "full_grid", "=", "env", ".", "grid", ".", "encode", "(", ")", "\n", "full_grid", "[", "env", ".", "agent_pos", "[", "0", "]", "]", "[", "env", ".", "agent_pos", "[", "1", "]", "]", "=", "np", ".", "array", "(", "[", "\n", "OBJECT_TO_IDX", "[", "'agent'", "]", ",", "\n", "COLOR_TO_IDX", "[", "'red'", "]", ",", "\n", "env", ".", "agent_dir", "\n", "]", ")", "\n", "\n", "return", "{", "\n", "**", "obs", ",", "\n", "'image'", ":", "full_grid", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.wrappers.FlatObsWrapper.__init__": [[255, 273], ["super().__init__", "functools.reduce", "gym.spaces.Box"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryS7.__init__"], ["def", "__init__", "(", "self", ",", "env", ",", "maxStrLen", "=", "96", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "env", ")", "\n", "\n", "self", ".", "maxStrLen", "=", "maxStrLen", "\n", "self", ".", "numCharCodes", "=", "27", "\n", "\n", "imgSpace", "=", "env", ".", "observation_space", ".", "spaces", "[", "'image'", "]", "\n", "imgSize", "=", "reduce", "(", "operator", ".", "mul", ",", "imgSpace", ".", "shape", ",", "1", ")", "\n", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Box", "(", "\n", "low", "=", "0", ",", "\n", "high", "=", "255", ",", "\n", "shape", "=", "(", "imgSize", "+", "self", ".", "numCharCodes", "*", "self", ".", "maxStrLen", ",", ")", ",", "\n", "dtype", "=", "'uint8'", "\n", ")", "\n", "\n", "self", ".", "cachedStr", "=", "None", "\n", "self", ".", "cachedArray", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.wrappers.FlatObsWrapper.observation": [[274, 299], ["numpy.concatenate", "mission.lower.lower.lower", "numpy.zeros", "enumerate", "len", "len", "image.flatten", "wrappers.FlatObsWrapper.cachedArray.flatten", "ord", "ord", "ord", "ord"], "methods", ["None"], ["", "def", "observation", "(", "self", ",", "obs", ")", ":", "\n", "        ", "image", "=", "obs", "[", "'image'", "]", "\n", "mission", "=", "obs", "[", "'mission'", "]", "\n", "\n", "# Cache the last-encoded mission string", "\n", "if", "mission", "!=", "self", ".", "cachedStr", ":", "\n", "            ", "assert", "len", "(", "mission", ")", "<=", "self", ".", "maxStrLen", ",", "'mission string too long ({} chars)'", ".", "format", "(", "len", "(", "mission", ")", ")", "\n", "mission", "=", "mission", ".", "lower", "(", ")", "\n", "\n", "strArray", "=", "np", ".", "zeros", "(", "shape", "=", "(", "self", ".", "maxStrLen", ",", "self", ".", "numCharCodes", ")", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "for", "idx", ",", "ch", "in", "enumerate", "(", "mission", ")", ":", "\n", "                ", "if", "ch", ">=", "'a'", "and", "ch", "<=", "'z'", ":", "\n", "                    ", "chNo", "=", "ord", "(", "ch", ")", "-", "ord", "(", "'a'", ")", "\n", "", "elif", "ch", "==", "' '", ":", "\n", "                    ", "chNo", "=", "ord", "(", "'z'", ")", "-", "ord", "(", "'a'", ")", "+", "1", "\n", "", "assert", "chNo", "<", "self", ".", "numCharCodes", ",", "'%s : %d'", "%", "(", "ch", ",", "chNo", ")", "\n", "strArray", "[", "idx", ",", "chNo", "]", "=", "1", "\n", "\n", "", "self", ".", "cachedStr", "=", "mission", "\n", "self", ".", "cachedArray", "=", "strArray", "\n", "\n", "", "obs", "=", "np", ".", "concatenate", "(", "(", "image", ".", "flatten", "(", ")", ",", "self", ".", "cachedArray", ".", "flatten", "(", ")", ")", ")", "\n", "\n", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.wrappers.ViewSizeWrapper.__init__": [[306, 326], ["super().__init__", "gym.spaces.Box", "gym.spaces.Dict"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryS7.__init__"], ["def", "__init__", "(", "self", ",", "env", ",", "agent_view_size", "=", "7", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "env", ")", "\n", "\n", "assert", "agent_view_size", "%", "2", "==", "1", "\n", "assert", "agent_view_size", ">=", "3", "\n", "\n", "# Override default view size", "\n", "env", ".", "unwrapped", ".", "agent_view_size", "=", "agent_view_size", "\n", "\n", "# Compute observation space with specified view size", "\n", "observation_space", "=", "gym", ".", "spaces", ".", "Box", "(", "\n", "low", "=", "0", ",", "\n", "high", "=", "255", ",", "\n", "shape", "=", "(", "agent_view_size", ",", "agent_view_size", ",", "3", ")", ",", "\n", "dtype", "=", "'uint8'", "\n", ")", "\n", "\n", "# Override the environment's observation space", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Dict", "(", "{", "\n", "'image'", ":", "observation_space", "\n", "}", ")", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.wrappers.ViewSizeWrapper.reset": [[328, 330], ["wrappers.ViewSizeWrapper.env.reset"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv.reset"], ["", "def", "reset", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "env", ".", "reset", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.wrappers.ViewSizeWrapper.step": [[331, 333], ["wrappers.ViewSizeWrapper.env.step"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryEnv.step"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "return", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.wrappers.DirectionObsWrapper.__init__": [[339, 343], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryS7.__init__"], ["def", "__init__", "(", "self", ",", "env", ",", "type", "=", "'slope'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "env", ")", "\n", "self", ".", "goal_position", "=", "None", "\n", "self", ".", "type", "=", "type", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.wrappers.DirectionObsWrapper.reset": [[344, 351], ["wrappers.DirectionObsWrapper.env.reset", "len", "enumerate", "isinstance", "int"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv.reset"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "obs", "=", "self", ".", "env", ".", "reset", "(", ")", "\n", "if", "not", "self", ".", "goal_position", ":", "\n", "            ", "self", ".", "goal_position", "=", "[", "x", "for", "x", ",", "y", "in", "enumerate", "(", "self", ".", "grid", ".", "grid", ")", "if", "isinstance", "(", "y", ",", "(", "Goal", ")", ")", "]", "\n", "if", "len", "(", "self", ".", "goal_position", ")", ">=", "1", ":", "# in case there are multiple goals , needs to be handled for other env types", "\n", "                ", "self", ".", "goal_position", "=", "(", "int", "(", "self", ".", "goal_position", "[", "0", "]", "/", "self", ".", "height", ")", ",", "self", ".", "goal_position", "[", "0", "]", "%", "self", ".", "width", ")", "\n", "", "", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.wrappers.DirectionObsWrapper.observation": [[352, 356], ["numpy.divide", "numpy.arctan"], "methods", ["None"], ["", "def", "observation", "(", "self", ",", "obs", ")", ":", "\n", "        ", "slope", "=", "np", ".", "divide", "(", "self", ".", "goal_position", "[", "1", "]", "-", "self", ".", "agent_pos", "[", "1", "]", ",", "self", ".", "goal_position", "[", "0", "]", "-", "self", ".", "agent_pos", "[", "0", "]", ")", "\n", "obs", "[", "'goal_direction'", "]", "=", "np", ".", "arctan", "(", "slope", ")", "if", "self", ".", "type", "==", "'angle'", "else", "slope", "\n", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.wrappers.SymbolicObsWrapper.__init__": [[364, 372], ["super().__init__", "gym.spaces.Box", "max", "minigrid.OBJECT_TO_IDX.values"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryS7.__init__"], ["def", "__init__", "(", "self", ",", "env", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "env", ")", "\n", "\n", "self", ".", "observation_space", ".", "spaces", "[", "\"image\"", "]", "=", "spaces", ".", "Box", "(", "\n", "low", "=", "0", ",", "\n", "high", "=", "max", "(", "OBJECT_TO_IDX", ".", "values", "(", ")", ")", ",", "\n", "shape", "=", "(", "self", ".", "env", ".", "width", ",", "self", ".", "env", ".", "height", ",", "3", ")", ",", "# number of cells", "\n", "dtype", "=", "\"uint8\"", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.wrappers.SymbolicObsWrapper.observation": [[374, 384], ["numpy.array", "numpy.concatenate", "numpy.transpose", "numpy.array.reshape"], "methods", ["None"], ["", "def", "observation", "(", "self", ",", "obs", ")", ":", "\n", "        ", "objects", "=", "np", ".", "array", "(", "\n", "[", "OBJECT_TO_IDX", "[", "o", ".", "type", "]", "if", "o", "is", "not", "None", "else", "-", "1", "for", "o", "in", "self", ".", "grid", ".", "grid", "]", "\n", ")", "\n", "w", ",", "h", "=", "self", ".", "width", ",", "self", ".", "height", "\n", "grid", "=", "np", ".", "mgrid", "[", ":", "w", ",", ":", "h", "]", "\n", "grid", "=", "np", ".", "concatenate", "(", "[", "grid", ",", "objects", ".", "reshape", "(", "1", ",", "w", ",", "h", ")", "]", ")", "\n", "grid", "=", "np", ".", "transpose", "(", "grid", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "obs", "[", "'image'", "]", "=", "grid", "\n", "return", "obs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.rendering.downsample": [[4, 17], ["img.mean.reshape", "img.mean.mean", "img.mean.mean"], "function", ["None"], ["def", "downsample", "(", "img", ",", "factor", ")", ":", "\n", "    ", "\"\"\"\n    Downsample an image along both dimensions by some factor\n    \"\"\"", "\n", "\n", "assert", "img", ".", "shape", "[", "0", "]", "%", "factor", "==", "0", "\n", "assert", "img", ".", "shape", "[", "1", "]", "%", "factor", "==", "0", "\n", "\n", "img", "=", "img", ".", "reshape", "(", "[", "img", ".", "shape", "[", "0", "]", "//", "factor", ",", "factor", ",", "img", ".", "shape", "[", "1", "]", "//", "factor", ",", "factor", ",", "3", "]", ")", "\n", "img", "=", "img", ".", "mean", "(", "axis", "=", "3", ")", "\n", "img", "=", "img", ".", "mean", "(", "axis", "=", "1", ")", "\n", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.rendering.fill_coords": [[18, 31], ["range", "range", "rendering.point_in_line.fn"], "function", ["None"], ["", "def", "fill_coords", "(", "img", ",", "fn", ",", "color", ")", ":", "\n", "    ", "\"\"\"\n    Fill pixels of an image with coordinates matching a filter function\n    \"\"\"", "\n", "\n", "for", "y", "in", "range", "(", "img", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "for", "x", "in", "range", "(", "img", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "yf", "=", "(", "y", "+", "0.5", ")", "/", "img", ".", "shape", "[", "0", "]", "\n", "xf", "=", "(", "x", "+", "0.5", ")", "/", "img", ".", "shape", "[", "1", "]", "\n", "if", "fn", "(", "xf", ",", "yf", ")", ":", "\n", "                ", "img", "[", "y", ",", "x", "]", "=", "color", "\n", "\n", "", "", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.rendering.rotate_fn": [[32, 43], ["fin", "math.sin", "math.sin", "math.cos", "math.cos"], "function", ["None"], ["", "def", "rotate_fn", "(", "fin", ",", "cx", ",", "cy", ",", "theta", ")", ":", "\n", "    ", "def", "fout", "(", "x", ",", "y", ")", ":", "\n", "        ", "x", "=", "x", "-", "cx", "\n", "y", "=", "y", "-", "cy", "\n", "\n", "x2", "=", "cx", "+", "x", "*", "math", ".", "cos", "(", "-", "theta", ")", "-", "y", "*", "math", ".", "sin", "(", "-", "theta", ")", "\n", "y2", "=", "cy", "+", "y", "*", "math", ".", "cos", "(", "-", "theta", ")", "+", "x", "*", "math", ".", "sin", "(", "-", "theta", ")", "\n", "\n", "return", "fin", "(", "x2", ",", "y2", ")", "\n", "\n", "", "return", "fout", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.rendering.point_in_line": [[44, 73], ["numpy.array", "numpy.array", "numpy.linalg.norm", "min", "max", "min", "max", "numpy.array", "numpy.dot", "numpy.clip", "numpy.linalg.norm"], "function", ["None"], ["", "def", "point_in_line", "(", "x0", ",", "y0", ",", "x1", ",", "y1", ",", "r", ")", ":", "\n", "    ", "p0", "=", "np", ".", "array", "(", "[", "x0", ",", "y0", "]", ")", "\n", "p1", "=", "np", ".", "array", "(", "[", "x1", ",", "y1", "]", ")", "\n", "dir", "=", "p1", "-", "p0", "\n", "dist", "=", "np", ".", "linalg", ".", "norm", "(", "dir", ")", "\n", "dir", "=", "dir", "/", "dist", "\n", "\n", "xmin", "=", "min", "(", "x0", ",", "x1", ")", "-", "r", "\n", "xmax", "=", "max", "(", "x0", ",", "x1", ")", "+", "r", "\n", "ymin", "=", "min", "(", "y0", ",", "y1", ")", "-", "r", "\n", "ymax", "=", "max", "(", "y0", ",", "y1", ")", "+", "r", "\n", "\n", "def", "fn", "(", "x", ",", "y", ")", ":", "\n", "# Fast, early escape test", "\n", "        ", "if", "x", "<", "xmin", "or", "x", ">", "xmax", "or", "y", "<", "ymin", "or", "y", ">", "ymax", ":", "\n", "            ", "return", "False", "\n", "\n", "", "q", "=", "np", ".", "array", "(", "[", "x", ",", "y", "]", ")", "\n", "pq", "=", "q", "-", "p0", "\n", "\n", "# Closest point on line", "\n", "a", "=", "np", ".", "dot", "(", "pq", ",", "dir", ")", "\n", "a", "=", "np", ".", "clip", "(", "a", ",", "0", ",", "dist", ")", "\n", "p", "=", "p0", "+", "a", "*", "dir", "\n", "\n", "dist_to_line", "=", "np", ".", "linalg", ".", "norm", "(", "q", "-", "p", ")", "\n", "return", "dist_to_line", "<=", "r", "\n", "\n", "", "return", "fn", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.rendering.point_in_circle": [[74, 78], ["None"], "function", ["None"], ["", "def", "point_in_circle", "(", "cx", ",", "cy", ",", "r", ")", ":", "\n", "    ", "def", "fn", "(", "x", ",", "y", ")", ":", "\n", "        ", "return", "(", "x", "-", "cx", ")", "*", "(", "x", "-", "cx", ")", "+", "(", "y", "-", "cy", ")", "*", "(", "y", "-", "cy", ")", "<=", "r", "*", "r", "\n", "", "return", "fn", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.rendering.point_in_rect": [[79, 83], ["None"], "function", ["None"], ["", "def", "point_in_rect", "(", "xmin", ",", "xmax", ",", "ymin", ",", "ymax", ")", ":", "\n", "    ", "def", "fn", "(", "x", ",", "y", ")", ":", "\n", "        ", "return", "x", ">=", "xmin", "and", "x", "<=", "xmax", "and", "y", ">=", "ymin", "and", "y", "<=", "ymax", "\n", "", "return", "fn", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.rendering.point_in_triangle": [[84, 110], ["numpy.array", "numpy.array", "numpy.array", "numpy.dot", "numpy.dot", "numpy.dot", "numpy.dot", "numpy.dot", "numpy.array"], "function", ["None"], ["", "def", "point_in_triangle", "(", "a", ",", "b", ",", "c", ")", ":", "\n", "    ", "a", "=", "np", ".", "array", "(", "a", ")", "\n", "b", "=", "np", ".", "array", "(", "b", ")", "\n", "c", "=", "np", ".", "array", "(", "c", ")", "\n", "\n", "def", "fn", "(", "x", ",", "y", ")", ":", "\n", "        ", "v0", "=", "c", "-", "a", "\n", "v1", "=", "b", "-", "a", "\n", "v2", "=", "np", ".", "array", "(", "(", "x", ",", "y", ")", ")", "-", "a", "\n", "\n", "# Compute dot products", "\n", "dot00", "=", "np", ".", "dot", "(", "v0", ",", "v0", ")", "\n", "dot01", "=", "np", ".", "dot", "(", "v0", ",", "v1", ")", "\n", "dot02", "=", "np", ".", "dot", "(", "v0", ",", "v2", ")", "\n", "dot11", "=", "np", ".", "dot", "(", "v1", ",", "v1", ")", "\n", "dot12", "=", "np", ".", "dot", "(", "v1", ",", "v2", ")", "\n", "\n", "# Compute barycentric coordinates", "\n", "inv_denom", "=", "1", "/", "(", "dot00", "*", "dot11", "-", "dot01", "*", "dot01", ")", "\n", "u", "=", "(", "dot11", "*", "dot02", "-", "dot01", "*", "dot12", ")", "*", "inv_denom", "\n", "v", "=", "(", "dot00", "*", "dot12", "-", "dot01", "*", "dot02", ")", "*", "inv_denom", "\n", "\n", "# Check if point is in triangle", "\n", "return", "(", "u", ">=", "0", ")", "and", "(", "v", ">=", "0", ")", "and", "(", "u", "+", "v", ")", "<", "1", "\n", "\n", "", "return", "fn", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.rendering.highlight_img": [[111, 119], ["blend_img.clip().astype.clip().astype", "blend_img.clip().astype.clip", "numpy.array"], "function", ["None"], ["", "def", "highlight_img", "(", "img", ",", "color", "=", "(", "255", ",", "255", ",", "255", ")", ",", "alpha", "=", "0.30", ")", ":", "\n", "    ", "\"\"\"\n    Add highlighting to an image\n    \"\"\"", "\n", "\n", "blend_img", "=", "img", "+", "alpha", "*", "(", "np", ".", "array", "(", "color", ",", "dtype", "=", "np", ".", "uint8", ")", "-", "img", ")", "\n", "blend_img", "=", "blend_img", ".", "clip", "(", "0", ",", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "img", "[", ":", ",", ":", ",", ":", "]", "=", "blend_img", "\n", "", ""]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.WorldObj.__init__": [[78, 90], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "type", ",", "color", ")", ":", "\n", "        ", "assert", "type", "in", "OBJECT_TO_IDX", ",", "type", "\n", "assert", "color", "in", "COLOR_TO_IDX", ",", "color", "\n", "self", ".", "type", "=", "type", "\n", "self", ".", "color", "=", "color", "\n", "self", ".", "contains", "=", "None", "\n", "\n", "# Initial position of the object", "\n", "self", ".", "init_pos", "=", "None", "\n", "\n", "# Current position of the object", "\n", "self", ".", "cur_pos", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.WorldObj.can_overlap": [[91, 94], ["None"], "methods", ["None"], ["", "def", "can_overlap", "(", "self", ")", ":", "\n", "        ", "\"\"\"Can the agent overlap with this?\"\"\"", "\n", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.WorldObj.can_pickup": [[95, 98], ["None"], "methods", ["None"], ["", "def", "can_pickup", "(", "self", ")", ":", "\n", "        ", "\"\"\"Can the agent pick this up?\"\"\"", "\n", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.WorldObj.can_contain": [[99, 102], ["None"], "methods", ["None"], ["", "def", "can_contain", "(", "self", ")", ":", "\n", "        ", "\"\"\"Can this contain another object?\"\"\"", "\n", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.WorldObj.see_behind": [[103, 106], ["None"], "methods", ["None"], ["", "def", "see_behind", "(", "self", ")", ":", "\n", "        ", "\"\"\"Can the agent see behind this object?\"\"\"", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.WorldObj.toggle": [[107, 110], ["None"], "methods", ["None"], ["", "def", "toggle", "(", "self", ",", "env", ",", "pos", ")", ":", "\n", "        ", "\"\"\"Method to trigger/toggle an action this object performs\"\"\"", "\n", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.WorldObj.encode": [[111, 114], ["None"], "methods", ["None"], ["", "def", "encode", "(", "self", ")", ":", "\n", "        ", "\"\"\"Encode the a description of this object as a 3-tuple of integers\"\"\"", "\n", "return", "(", "OBJECT_TO_IDX", "[", "self", ".", "type", "]", ",", "COLOR_TO_IDX", "[", "self", ".", "color", "]", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.WorldObj.decode": [[115, 149], ["minigrid.Wall", "minigrid.Floor", "minigrid.Ball", "minigrid.Key", "minigrid.Box", "minigrid.Door", "minigrid.Goal", "minigrid.Lava"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "decode", "(", "type_idx", ",", "color_idx", ",", "state", ")", ":", "\n", "        ", "\"\"\"Create an object from a 3-tuple state description\"\"\"", "\n", "\n", "obj_type", "=", "IDX_TO_OBJECT", "[", "type_idx", "]", "\n", "color", "=", "IDX_TO_COLOR", "[", "color_idx", "]", "\n", "\n", "if", "obj_type", "==", "'empty'", "or", "obj_type", "==", "'unseen'", ":", "\n", "            ", "return", "None", "\n", "\n", "# State, 0: open, 1: closed, 2: locked", "\n", "", "is_open", "=", "state", "==", "0", "\n", "is_locked", "=", "state", "==", "2", "\n", "\n", "if", "obj_type", "==", "'wall'", ":", "\n", "            ", "v", "=", "Wall", "(", "color", ")", "\n", "", "elif", "obj_type", "==", "'floor'", ":", "\n", "            ", "v", "=", "Floor", "(", "color", ")", "\n", "", "elif", "obj_type", "==", "'ball'", ":", "\n", "            ", "v", "=", "Ball", "(", "color", ")", "\n", "", "elif", "obj_type", "==", "'key'", ":", "\n", "            ", "v", "=", "Key", "(", "color", ")", "\n", "", "elif", "obj_type", "==", "'box'", ":", "\n", "            ", "v", "=", "Box", "(", "color", ")", "\n", "", "elif", "obj_type", "==", "'door'", ":", "\n", "            ", "v", "=", "Door", "(", "color", ",", "is_open", ",", "is_locked", ")", "\n", "", "elif", "obj_type", "==", "'goal'", ":", "\n", "            ", "v", "=", "Goal", "(", ")", "\n", "", "elif", "obj_type", "==", "'lava'", ":", "\n", "            ", "v", "=", "Lava", "(", ")", "\n", "", "else", ":", "\n", "            ", "assert", "False", ",", "\"unknown object type in decode '%s'\"", "%", "obj_type", "\n", "\n", "", "return", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.WorldObj.render": [[150, 153], ["None"], "methods", ["None"], ["", "def", "render", "(", "self", ",", "r", ")", ":", "\n", "        ", "\"\"\"Draw this object with the given renderer\"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Goal.__init__": [[155, 157], ["minigrid.WorldObj.__init__"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "'goal'", ",", "'green'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Goal.can_overlap": [[158, 160], ["None"], "methods", ["None"], ["", "def", "can_overlap", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Goal.render": [[161, 163], ["rendering.fill_coords", "rendering.point_in_rect"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.rendering.fill_coords", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.rendering.point_in_rect"], ["", "def", "render", "(", "self", ",", "img", ")", ":", "\n", "        ", "fill_coords", "(", "img", ",", "point_in_rect", "(", "0", ",", "1", ",", "0", ",", "1", ")", ",", "COLORS", "[", "self", ".", "color", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Floor.__init__": [[169, 171], ["minigrid.WorldObj.__init__"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryS7.__init__"], ["def", "__init__", "(", "self", ",", "color", "=", "'blue'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "'floor'", ",", "color", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Floor.can_overlap": [[172, 174], ["None"], "methods", ["None"], ["", "def", "can_overlap", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Floor.render": [[175, 179], ["rendering.fill_coords", "rendering.point_in_rect"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.rendering.fill_coords", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.rendering.point_in_rect"], ["", "def", "render", "(", "self", ",", "img", ")", ":", "\n", "# Give the floor a pale color", "\n", "        ", "color", "=", "COLORS", "[", "self", ".", "color", "]", "/", "2", "\n", "fill_coords", "(", "img", ",", "point_in_rect", "(", "0.031", ",", "1", ",", "0.031", ",", "1", ")", ",", "color", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Lava.__init__": [[182, 184], ["minigrid.WorldObj.__init__"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "'lava'", ",", "'red'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Lava.can_overlap": [[185, 187], ["None"], "methods", ["None"], ["", "def", "can_overlap", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Lava.render": [[188, 202], ["rendering.fill_coords", "range", "rendering.point_in_rect", "rendering.fill_coords", "rendering.fill_coords", "rendering.fill_coords", "rendering.fill_coords", "rendering.point_in_line", "rendering.point_in_line", "rendering.point_in_line", "rendering.point_in_line"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.rendering.fill_coords", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.rendering.point_in_rect", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.rendering.fill_coords", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.rendering.fill_coords", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.rendering.fill_coords", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.rendering.fill_coords", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.rendering.point_in_line", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.rendering.point_in_line", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.rendering.point_in_line", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.rendering.point_in_line"], ["", "def", "render", "(", "self", ",", "img", ")", ":", "\n", "        ", "c", "=", "(", "255", ",", "128", ",", "0", ")", "\n", "\n", "# Background color", "\n", "fill_coords", "(", "img", ",", "point_in_rect", "(", "0", ",", "1", ",", "0", ",", "1", ")", ",", "c", ")", "\n", "\n", "# Little waves", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "            ", "ylo", "=", "0.3", "+", "0.2", "*", "i", "\n", "yhi", "=", "0.4", "+", "0.2", "*", "i", "\n", "fill_coords", "(", "img", ",", "point_in_line", "(", "0.1", ",", "ylo", ",", "0.3", ",", "yhi", ",", "r", "=", "0.03", ")", ",", "(", "0", ",", "0", ",", "0", ")", ")", "\n", "fill_coords", "(", "img", ",", "point_in_line", "(", "0.3", ",", "yhi", ",", "0.5", ",", "ylo", ",", "r", "=", "0.03", ")", ",", "(", "0", ",", "0", ",", "0", ")", ")", "\n", "fill_coords", "(", "img", ",", "point_in_line", "(", "0.5", ",", "ylo", ",", "0.7", ",", "yhi", ",", "r", "=", "0.03", ")", ",", "(", "0", ",", "0", ",", "0", ")", ")", "\n", "fill_coords", "(", "img", ",", "point_in_line", "(", "0.7", ",", "yhi", ",", "0.9", ",", "ylo", ",", "r", "=", "0.03", ")", ",", "(", "0", ",", "0", ",", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Wall.__init__": [[204, 206], ["minigrid.WorldObj.__init__"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ",", "color", "=", "'grey'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "'wall'", ",", "color", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Wall.see_behind": [[207, 209], ["None"], "methods", ["None"], ["", "def", "see_behind", "(", "self", ")", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Wall.render": [[210, 212], ["rendering.fill_coords", "rendering.point_in_rect"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.rendering.fill_coords", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.rendering.point_in_rect"], ["", "def", "render", "(", "self", ",", "img", ")", ":", "\n", "        ", "fill_coords", "(", "img", ",", "point_in_rect", "(", "0", ",", "1", ",", "0", ",", "1", ")", ",", "COLORS", "[", "self", ".", "color", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Door.__init__": [[214, 218], ["minigrid.WorldObj.__init__"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ",", "color", ",", "is_open", "=", "False", ",", "is_locked", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "'door'", ",", "color", ")", "\n", "self", ".", "is_open", "=", "is_open", "\n", "self", ".", "is_locked", "=", "is_locked", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Door.can_overlap": [[219, 222], ["None"], "methods", ["None"], ["", "def", "can_overlap", "(", "self", ")", ":", "\n", "        ", "\"\"\"The agent can only walk over this cell when the door is open\"\"\"", "\n", "return", "self", ".", "is_open", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Door.see_behind": [[223, 225], ["None"], "methods", ["None"], ["", "def", "see_behind", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "is_open", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Door.toggle": [[226, 237], ["isinstance"], "methods", ["None"], ["", "def", "toggle", "(", "self", ",", "env", ",", "pos", ")", ":", "\n", "# If the player has the right key to open the door", "\n", "        ", "if", "self", ".", "is_locked", ":", "\n", "            ", "if", "isinstance", "(", "env", ".", "carrying", ",", "Key", ")", "and", "env", ".", "carrying", ".", "color", "==", "self", ".", "color", ":", "\n", "                ", "self", ".", "is_locked", "=", "False", "\n", "self", ".", "is_open", "=", "True", "\n", "return", "True", "\n", "", "return", "False", "\n", "\n", "", "self", ".", "is_open", "=", "not", "self", ".", "is_open", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Door.encode": [[238, 250], ["None"], "methods", ["None"], ["", "def", "encode", "(", "self", ")", ":", "\n", "        ", "\"\"\"Encode the a description of this object as a 3-tuple of integers\"\"\"", "\n", "\n", "# State, 0: open, 1: closed, 2: locked", "\n", "if", "self", ".", "is_open", ":", "\n", "            ", "state", "=", "0", "\n", "", "elif", "self", ".", "is_locked", ":", "\n", "            ", "state", "=", "2", "\n", "", "elif", "not", "self", ".", "is_open", ":", "\n", "            ", "state", "=", "1", "\n", "\n", "", "return", "(", "OBJECT_TO_IDX", "[", "self", ".", "type", "]", ",", "COLOR_TO_IDX", "[", "self", ".", "color", "]", ",", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Door.render": [[251, 274], ["rendering.fill_coords", "rendering.fill_coords", "rendering.fill_coords", "rendering.fill_coords", "rendering.fill_coords", "rendering.fill_coords", "rendering.fill_coords", "rendering.fill_coords", "rendering.fill_coords", "rendering.fill_coords", "rendering.point_in_rect", "rendering.point_in_rect", "rendering.point_in_rect", "rendering.point_in_rect", "rendering.point_in_rect", "rendering.point_in_rect", "rendering.point_in_rect", "rendering.point_in_rect", "rendering.point_in_rect", "rendering.point_in_circle", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.rendering.fill_coords", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.rendering.fill_coords", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.rendering.fill_coords", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.rendering.fill_coords", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.rendering.fill_coords", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.rendering.fill_coords", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.rendering.fill_coords", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.rendering.fill_coords", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.rendering.fill_coords", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.rendering.fill_coords", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.rendering.point_in_rect", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.rendering.point_in_rect", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.rendering.point_in_rect", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.rendering.point_in_rect", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.rendering.point_in_rect", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.rendering.point_in_rect", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.rendering.point_in_rect", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.rendering.point_in_rect", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.rendering.point_in_rect", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.rendering.point_in_circle"], ["", "def", "render", "(", "self", ",", "img", ")", ":", "\n", "        ", "c", "=", "COLORS", "[", "self", ".", "color", "]", "\n", "\n", "if", "self", ".", "is_open", ":", "\n", "            ", "fill_coords", "(", "img", ",", "point_in_rect", "(", "0.88", ",", "1.00", ",", "0.00", ",", "1.00", ")", ",", "c", ")", "\n", "fill_coords", "(", "img", ",", "point_in_rect", "(", "0.92", ",", "0.96", ",", "0.04", ",", "0.96", ")", ",", "(", "0", ",", "0", ",", "0", ")", ")", "\n", "return", "\n", "\n", "# Door frame and door", "\n", "", "if", "self", ".", "is_locked", ":", "\n", "            ", "fill_coords", "(", "img", ",", "point_in_rect", "(", "0.00", ",", "1.00", ",", "0.00", ",", "1.00", ")", ",", "c", ")", "\n", "fill_coords", "(", "img", ",", "point_in_rect", "(", "0.06", ",", "0.94", ",", "0.06", ",", "0.94", ")", ",", "0.45", "*", "np", ".", "array", "(", "c", ")", ")", "\n", "\n", "# Draw key slot", "\n", "fill_coords", "(", "img", ",", "point_in_rect", "(", "0.52", ",", "0.75", ",", "0.50", ",", "0.56", ")", ",", "c", ")", "\n", "", "else", ":", "\n", "            ", "fill_coords", "(", "img", ",", "point_in_rect", "(", "0.00", ",", "1.00", ",", "0.00", ",", "1.00", ")", ",", "c", ")", "\n", "fill_coords", "(", "img", ",", "point_in_rect", "(", "0.04", ",", "0.96", ",", "0.04", ",", "0.96", ")", ",", "(", "0", ",", "0", ",", "0", ")", ")", "\n", "fill_coords", "(", "img", ",", "point_in_rect", "(", "0.08", ",", "0.92", ",", "0.08", ",", "0.92", ")", ",", "c", ")", "\n", "fill_coords", "(", "img", ",", "point_in_rect", "(", "0.12", ",", "0.88", ",", "0.12", ",", "0.88", ")", ",", "(", "0", ",", "0", ",", "0", ")", ")", "\n", "\n", "# Draw door handle", "\n", "fill_coords", "(", "img", ",", "point_in_circle", "(", "cx", "=", "0.75", ",", "cy", "=", "0.50", ",", "r", "=", "0.08", ")", ",", "c", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Key.__init__": [[276, 278], ["minigrid.WorldObj.__init__"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ",", "color", "=", "'blue'", ")", ":", "\n", "        ", "super", "(", "Key", ",", "self", ")", ".", "__init__", "(", "'key'", ",", "color", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Key.can_pickup": [[279, 281], ["None"], "methods", ["None"], ["", "def", "can_pickup", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Key.render": [[282, 295], ["rendering.fill_coords", "rendering.fill_coords", "rendering.fill_coords", "rendering.fill_coords", "rendering.fill_coords", "rendering.point_in_rect", "rendering.point_in_rect", "rendering.point_in_rect", "rendering.point_in_circle", "rendering.point_in_circle"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.rendering.fill_coords", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.rendering.fill_coords", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.rendering.fill_coords", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.rendering.fill_coords", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.rendering.fill_coords", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.rendering.point_in_rect", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.rendering.point_in_rect", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.rendering.point_in_rect", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.rendering.point_in_circle", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.rendering.point_in_circle"], ["", "def", "render", "(", "self", ",", "img", ")", ":", "\n", "        ", "c", "=", "COLORS", "[", "self", ".", "color", "]", "\n", "\n", "# Vertical quad", "\n", "fill_coords", "(", "img", ",", "point_in_rect", "(", "0.50", ",", "0.63", ",", "0.31", ",", "0.88", ")", ",", "c", ")", "\n", "\n", "# Teeth", "\n", "fill_coords", "(", "img", ",", "point_in_rect", "(", "0.38", ",", "0.50", ",", "0.59", ",", "0.66", ")", ",", "c", ")", "\n", "fill_coords", "(", "img", ",", "point_in_rect", "(", "0.38", ",", "0.50", ",", "0.81", ",", "0.88", ")", ",", "c", ")", "\n", "\n", "# Ring", "\n", "fill_coords", "(", "img", ",", "point_in_circle", "(", "cx", "=", "0.56", ",", "cy", "=", "0.28", ",", "r", "=", "0.190", ")", ",", "c", ")", "\n", "fill_coords", "(", "img", ",", "point_in_circle", "(", "cx", "=", "0.56", ",", "cy", "=", "0.28", ",", "r", "=", "0.064", ")", ",", "(", "0", ",", "0", ",", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Ball.__init__": [[297, 299], ["minigrid.WorldObj.__init__"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ",", "color", "=", "'blue'", ")", ":", "\n", "        ", "super", "(", "Ball", ",", "self", ")", ".", "__init__", "(", "'ball'", ",", "color", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Ball.can_pickup": [[300, 302], ["None"], "methods", ["None"], ["", "def", "can_pickup", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Ball.render": [[303, 305], ["rendering.fill_coords", "rendering.point_in_circle"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.rendering.fill_coords", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.rendering.point_in_circle"], ["", "def", "render", "(", "self", ",", "img", ")", ":", "\n", "        ", "fill_coords", "(", "img", ",", "point_in_circle", "(", "0.5", ",", "0.5", ",", "0.31", ")", ",", "COLORS", "[", "self", ".", "color", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Box.__init__": [[307, 310], ["minigrid.WorldObj.__init__"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ",", "color", ",", "contains", "=", "None", ")", ":", "\n", "        ", "super", "(", "Box", ",", "self", ")", ".", "__init__", "(", "'box'", ",", "color", ")", "\n", "self", ".", "contains", "=", "contains", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Box.can_pickup": [[311, 313], ["None"], "methods", ["None"], ["", "def", "can_pickup", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Box.render": [[314, 323], ["rendering.fill_coords", "rendering.fill_coords", "rendering.fill_coords", "rendering.point_in_rect", "rendering.point_in_rect", "rendering.point_in_rect"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.rendering.fill_coords", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.rendering.fill_coords", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.rendering.fill_coords", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.rendering.point_in_rect", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.rendering.point_in_rect", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.rendering.point_in_rect"], ["", "def", "render", "(", "self", ",", "img", ")", ":", "\n", "        ", "c", "=", "COLORS", "[", "self", ".", "color", "]", "\n", "\n", "# Outline", "\n", "fill_coords", "(", "img", ",", "point_in_rect", "(", "0.12", ",", "0.88", ",", "0.12", ",", "0.88", ")", ",", "c", ")", "\n", "fill_coords", "(", "img", ",", "point_in_rect", "(", "0.18", ",", "0.82", ",", "0.18", ",", "0.82", ")", ",", "(", "0", ",", "0", ",", "0", ")", ")", "\n", "\n", "# Horizontal slit", "\n", "fill_coords", "(", "img", ",", "point_in_rect", "(", "0.16", ",", "0.84", ",", "0.47", ",", "0.53", ")", ",", "c", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Box.toggle": [[324, 328], ["env.grid.set"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.set"], ["", "def", "toggle", "(", "self", ",", "env", ",", "pos", ")", ":", "\n", "# Replace the box by its contents", "\n", "        ", "env", ".", "grid", ".", "set", "(", "*", "pos", ",", "self", ".", "contains", ")", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.__init__": [[337, 345], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "width", ",", "height", ")", ":", "\n", "        ", "assert", "width", ">=", "3", "\n", "assert", "height", ">=", "3", "\n", "\n", "self", ".", "width", "=", "width", "\n", "self", ".", "height", "=", "height", "\n", "\n", "self", ".", "grid", "=", "[", "None", "]", "*", "width", "*", "height", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.__contains__": [[346, 360], ["isinstance", "isinstance"], "methods", ["None"], ["", "def", "__contains__", "(", "self", ",", "key", ")", ":", "\n", "        ", "if", "isinstance", "(", "key", ",", "WorldObj", ")", ":", "\n", "            ", "for", "e", "in", "self", ".", "grid", ":", "\n", "                ", "if", "e", "is", "key", ":", "\n", "                    ", "return", "True", "\n", "", "", "", "elif", "isinstance", "(", "key", ",", "tuple", ")", ":", "\n", "            ", "for", "e", "in", "self", ".", "grid", ":", "\n", "                ", "if", "e", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "if", "(", "e", ".", "color", ",", "e", ".", "type", ")", "==", "key", ":", "\n", "                    ", "return", "True", "\n", "", "if", "key", "[", "0", "]", "is", "None", "and", "key", "[", "1", "]", "==", "e", ".", "type", ":", "\n", "                    ", "return", "True", "\n", "", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.__eq__": [[361, 365], ["minigrid.Grid.encode", "other.encode", "numpy.array_equal"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.encode", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.encode"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "grid1", "=", "self", ".", "encode", "(", ")", "\n", "grid2", "=", "other", ".", "encode", "(", ")", "\n", "return", "np", ".", "array_equal", "(", "grid2", ",", "grid1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.__ne__": [[366, 368], ["None"], "methods", ["None"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "not", "self", "==", "other", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.copy": [[369, 372], ["deepcopy"], "methods", ["None"], ["", "def", "copy", "(", "self", ")", ":", "\n", "        ", "from", "copy", "import", "deepcopy", "\n", "return", "deepcopy", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.set": [[373, 377], ["None"], "methods", ["None"], ["", "def", "set", "(", "self", ",", "i", ",", "j", ",", "v", ")", ":", "\n", "        ", "assert", "i", ">=", "0", "and", "i", "<", "self", ".", "width", "\n", "assert", "j", ">=", "0", "and", "j", "<", "self", ".", "height", "\n", "self", ".", "grid", "[", "j", "*", "self", ".", "width", "+", "i", "]", "=", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.get": [[378, 382], ["None"], "methods", ["None"], ["", "def", "get", "(", "self", ",", "i", ",", "j", ")", ":", "\n", "        ", "assert", "i", ">=", "0", "and", "i", "<", "self", ".", "width", "\n", "assert", "j", ">=", "0", "and", "j", "<", "self", ".", "height", "\n", "return", "self", ".", "grid", "[", "j", "*", "self", ".", "width", "+", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.horz_wall": [[383, 388], ["range", "minigrid.Grid.set", "obj_type"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.set"], ["", "def", "horz_wall", "(", "self", ",", "x", ",", "y", ",", "length", "=", "None", ",", "obj_type", "=", "Wall", ")", ":", "\n", "        ", "if", "length", "is", "None", ":", "\n", "            ", "length", "=", "self", ".", "width", "-", "x", "\n", "", "for", "i", "in", "range", "(", "0", ",", "length", ")", ":", "\n", "            ", "self", ".", "set", "(", "x", "+", "i", ",", "y", ",", "obj_type", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.vert_wall": [[389, 394], ["range", "minigrid.Grid.set", "obj_type"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.set"], ["", "", "def", "vert_wall", "(", "self", ",", "x", ",", "y", ",", "length", "=", "None", ",", "obj_type", "=", "Wall", ")", ":", "\n", "        ", "if", "length", "is", "None", ":", "\n", "            ", "length", "=", "self", ".", "height", "-", "y", "\n", "", "for", "j", "in", "range", "(", "0", ",", "length", ")", ":", "\n", "            ", "self", ".", "set", "(", "x", ",", "y", "+", "j", ",", "obj_type", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.wall_rect": [[395, 400], ["minigrid.Grid.horz_wall", "minigrid.Grid.horz_wall", "minigrid.Grid.vert_wall", "minigrid.Grid.vert_wall"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.horz_wall", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.horz_wall", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.vert_wall", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.vert_wall"], ["", "", "def", "wall_rect", "(", "self", ",", "x", ",", "y", ",", "w", ",", "h", ")", ":", "\n", "        ", "self", ".", "horz_wall", "(", "x", ",", "y", ",", "w", ")", "\n", "self", ".", "horz_wall", "(", "x", ",", "y", "+", "h", "-", "1", ",", "w", ")", "\n", "self", ".", "vert_wall", "(", "x", ",", "y", ",", "h", ")", "\n", "self", ".", "vert_wall", "(", "x", "+", "w", "-", "1", ",", "y", ",", "h", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.rotate_left": [[401, 414], ["minigrid.Grid", "range", "range", "minigrid.Grid.get", "minigrid.Grid.set"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.get", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.set"], ["", "def", "rotate_left", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Rotate the grid to the left (counter-clockwise)\n        \"\"\"", "\n", "\n", "grid", "=", "Grid", "(", "self", ".", "height", ",", "self", ".", "width", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "width", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "self", ".", "height", ")", ":", "\n", "                ", "v", "=", "self", ".", "get", "(", "i", ",", "j", ")", "\n", "grid", ".", "set", "(", "j", ",", "grid", ".", "height", "-", "1", "-", "i", ",", "v", ")", "\n", "\n", "", "", "return", "grid", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.slice": [[415, 436], ["minigrid.Grid", "range", "range", "minigrid.Grid.set", "minigrid.Grid.get", "minigrid.Wall"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.get"], ["", "def", "slice", "(", "self", ",", "topX", ",", "topY", ",", "width", ",", "height", ")", ":", "\n", "        ", "\"\"\"\n        Get a subset of the grid\n        \"\"\"", "\n", "\n", "grid", "=", "Grid", "(", "width", ",", "height", ")", "\n", "\n", "for", "j", "in", "range", "(", "0", ",", "height", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "0", ",", "width", ")", ":", "\n", "                ", "x", "=", "topX", "+", "i", "\n", "y", "=", "topY", "+", "j", "\n", "\n", "if", "x", ">=", "0", "and", "x", "<", "self", ".", "width", "and", "y", ">=", "0", "and", "y", "<", "self", ".", "height", ":", "\n", "                    ", "v", "=", "self", ".", "get", "(", "x", ",", "y", ")", "\n", "", "else", ":", "\n", "                    ", "v", "=", "Wall", "(", ")", "\n", "\n", "", "grid", ".", "set", "(", "i", ",", "j", ",", "v", ")", "\n", "\n", "", "", "return", "grid", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.render_tile": [[437, 489], ["numpy.zeros", "rendering.fill_coords", "rendering.fill_coords", "rendering.downsample", "rendering.point_in_rect", "rendering.point_in_rect", "obj.render", "rendering.point_in_triangle", "rendering.rotate_fn", "rendering.fill_coords", "rendering.highlight_img", "obj.encode"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.rendering.fill_coords", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.rendering.fill_coords", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.rendering.downsample", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.rendering.point_in_rect", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.rendering.point_in_rect", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv.render", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.rendering.point_in_triangle", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.rendering.rotate_fn", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.rendering.fill_coords", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.rendering.highlight_img", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.encode"], ["", "@", "classmethod", "\n", "def", "render_tile", "(", "\n", "cls", ",", "\n", "obj", ",", "\n", "agent_dir", "=", "None", ",", "\n", "highlight", "=", "False", ",", "\n", "tile_size", "=", "TILE_PIXELS", ",", "\n", "subdivs", "=", "3", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Render a tile and cache the result\n        \"\"\"", "\n", "\n", "# Hash map lookup key for the cache", "\n", "key", "=", "(", "agent_dir", ",", "highlight", ",", "tile_size", ")", "\n", "key", "=", "obj", ".", "encode", "(", ")", "+", "key", "if", "obj", "else", "key", "\n", "\n", "if", "key", "in", "cls", ".", "tile_cache", ":", "\n", "            ", "return", "cls", ".", "tile_cache", "[", "key", "]", "\n", "\n", "", "img", "=", "np", ".", "zeros", "(", "shape", "=", "(", "tile_size", "*", "subdivs", ",", "tile_size", "*", "subdivs", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "# Draw the grid lines (top and left edges)", "\n", "fill_coords", "(", "img", ",", "point_in_rect", "(", "0", ",", "0.031", ",", "0", ",", "1", ")", ",", "(", "100", ",", "100", ",", "100", ")", ")", "\n", "fill_coords", "(", "img", ",", "point_in_rect", "(", "0", ",", "1", ",", "0", ",", "0.031", ")", ",", "(", "100", ",", "100", ",", "100", ")", ")", "\n", "\n", "if", "obj", "!=", "None", ":", "\n", "            ", "obj", ".", "render", "(", "img", ")", "\n", "\n", "# Overlay the agent on top", "\n", "", "if", "agent_dir", "is", "not", "None", ":", "\n", "            ", "tri_fn", "=", "point_in_triangle", "(", "\n", "(", "0.12", ",", "0.19", ")", ",", "\n", "(", "0.87", ",", "0.50", ")", ",", "\n", "(", "0.12", ",", "0.81", ")", ",", "\n", ")", "\n", "\n", "# Rotate the agent based on its direction", "\n", "tri_fn", "=", "rotate_fn", "(", "tri_fn", ",", "cx", "=", "0.5", ",", "cy", "=", "0.5", ",", "theta", "=", "0.5", "*", "math", ".", "pi", "*", "agent_dir", ")", "\n", "fill_coords", "(", "img", ",", "tri_fn", ",", "(", "255", ",", "0", ",", "0", ")", ")", "\n", "\n", "# Highlight the cell if needed", "\n", "", "if", "highlight", ":", "\n", "            ", "highlight_img", "(", "img", ")", "\n", "\n", "# Downsample the image to perform supersampling/anti-aliasing", "\n", "", "img", "=", "downsample", "(", "img", ",", "subdivs", ")", "\n", "\n", "# Cache the rendered tile", "\n", "cls", ".", "tile_cache", "[", "key", "]", "=", "img", "\n", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.render": [[490, 532], ["numpy.zeros", "range", "numpy.zeros", "range", "minigrid.Grid.get", "numpy.array_equal", "minigrid.Grid.render_tile"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.get", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.render_tile"], ["", "def", "render", "(", "\n", "self", ",", "\n", "tile_size", ",", "\n", "agent_pos", "=", "None", ",", "\n", "agent_dir", "=", "None", ",", "\n", "highlight_mask", "=", "None", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Render this grid at a given scale\n        :param r: target renderer object\n        :param tile_size: tile size in pixels\n        \"\"\"", "\n", "\n", "if", "highlight_mask", "is", "None", ":", "\n", "            ", "highlight_mask", "=", "np", ".", "zeros", "(", "shape", "=", "(", "self", ".", "width", ",", "self", ".", "height", ")", ",", "dtype", "=", "bool", ")", "\n", "\n", "# Compute the total grid size", "\n", "", "width_px", "=", "self", ".", "width", "*", "tile_size", "\n", "height_px", "=", "self", ".", "height", "*", "tile_size", "\n", "\n", "img", "=", "np", ".", "zeros", "(", "shape", "=", "(", "height_px", ",", "width_px", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "# Render the grid", "\n", "for", "j", "in", "range", "(", "0", ",", "self", ".", "height", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "0", ",", "self", ".", "width", ")", ":", "\n", "                ", "cell", "=", "self", ".", "get", "(", "i", ",", "j", ")", "\n", "\n", "agent_here", "=", "np", ".", "array_equal", "(", "agent_pos", ",", "(", "i", ",", "j", ")", ")", "\n", "tile_img", "=", "Grid", ".", "render_tile", "(", "\n", "cell", ",", "\n", "agent_dir", "=", "agent_dir", "if", "agent_here", "else", "None", ",", "\n", "highlight", "=", "highlight_mask", "[", "i", ",", "j", "]", ",", "\n", "tile_size", "=", "tile_size", "\n", ")", "\n", "\n", "ymin", "=", "j", "*", "tile_size", "\n", "ymax", "=", "(", "j", "+", "1", ")", "*", "tile_size", "\n", "xmin", "=", "i", "*", "tile_size", "\n", "xmax", "=", "(", "i", "+", "1", ")", "*", "tile_size", "\n", "img", "[", "ymin", ":", "ymax", ",", "xmin", ":", "xmax", ",", ":", "]", "=", "tile_img", "\n", "\n", "", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.encode": [[533, 557], ["numpy.zeros", "range", "numpy.ones", "range", "minigrid.Grid.get", "minigrid.Grid.encode"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.get", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.encode"], ["", "def", "encode", "(", "self", ",", "vis_mask", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Produce a compact numpy encoding of the grid\n        \"\"\"", "\n", "\n", "if", "vis_mask", "is", "None", ":", "\n", "            ", "vis_mask", "=", "np", ".", "ones", "(", "(", "self", ".", "width", ",", "self", ".", "height", ")", ",", "dtype", "=", "bool", ")", "\n", "\n", "", "array", "=", "np", ".", "zeros", "(", "(", "self", ".", "width", ",", "self", ".", "height", ",", "3", ")", ",", "dtype", "=", "'uint8'", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "width", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "self", ".", "height", ")", ":", "\n", "                ", "if", "vis_mask", "[", "i", ",", "j", "]", ":", "\n", "                    ", "v", "=", "self", ".", "get", "(", "i", ",", "j", ")", "\n", "\n", "if", "v", "is", "None", ":", "\n", "                        ", "array", "[", "i", ",", "j", ",", "0", "]", "=", "OBJECT_TO_IDX", "[", "'empty'", "]", "\n", "array", "[", "i", ",", "j", ",", "1", "]", "=", "0", "\n", "array", "[", "i", ",", "j", ",", "2", "]", "=", "0", "\n", "\n", "", "else", ":", "\n", "                        ", "array", "[", "i", ",", "j", ",", ":", "]", "=", "v", ".", "encode", "(", ")", "\n", "\n", "", "", "", "", "return", "array", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.decode": [[558, 578], ["numpy.ones", "minigrid.Grid", "range", "range", "minigrid.WorldObj.decode", "minigrid.Grid.set"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.decode", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.set"], ["", "@", "staticmethod", "\n", "def", "decode", "(", "array", ")", ":", "\n", "        ", "\"\"\"\n        Decode an array grid encoding back into a grid\n        \"\"\"", "\n", "\n", "width", ",", "height", ",", "channels", "=", "array", ".", "shape", "\n", "assert", "channels", "==", "3", "\n", "\n", "vis_mask", "=", "np", ".", "ones", "(", "shape", "=", "(", "width", ",", "height", ")", ",", "dtype", "=", "bool", ")", "\n", "\n", "grid", "=", "Grid", "(", "width", ",", "height", ")", "\n", "for", "i", "in", "range", "(", "width", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "height", ")", ":", "\n", "                ", "type_idx", ",", "color_idx", ",", "state", "=", "array", "[", "i", ",", "j", "]", "\n", "v", "=", "WorldObj", ".", "decode", "(", "type_idx", ",", "color_idx", ",", "state", ")", "\n", "grid", ".", "set", "(", "i", ",", "j", ",", "v", ")", "\n", "vis_mask", "[", "i", ",", "j", "]", "=", "(", "type_idx", "!=", "OBJECT_TO_IDX", "[", "'unseen'", "]", ")", "\n", "\n", "", "", "return", "grid", ",", "vis_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.process_vis": [[579, 617], ["numpy.zeros", "reversed", "range", "range", "range", "reversed", "range", "grid.get", "range", "grid.get", "grid.set", "grid.get.see_behind", "grid.get.see_behind"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.get", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.get", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Door.see_behind", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Door.see_behind"], ["", "def", "process_vis", "(", "grid", ",", "agent_pos", ")", ":", "\n", "        ", "mask", "=", "np", ".", "zeros", "(", "shape", "=", "(", "grid", ".", "width", ",", "grid", ".", "height", ")", ",", "dtype", "=", "bool", ")", "\n", "\n", "mask", "[", "agent_pos", "[", "0", "]", ",", "agent_pos", "[", "1", "]", "]", "=", "True", "\n", "\n", "for", "j", "in", "reversed", "(", "range", "(", "0", ",", "grid", ".", "height", ")", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "0", ",", "grid", ".", "width", "-", "1", ")", ":", "\n", "                ", "if", "not", "mask", "[", "i", ",", "j", "]", ":", "\n", "                    ", "continue", "\n", "\n", "", "cell", "=", "grid", ".", "get", "(", "i", ",", "j", ")", "\n", "if", "cell", "and", "not", "cell", ".", "see_behind", "(", ")", ":", "\n", "                    ", "continue", "\n", "\n", "", "mask", "[", "i", "+", "1", ",", "j", "]", "=", "True", "\n", "if", "j", ">", "0", ":", "\n", "                    ", "mask", "[", "i", "+", "1", ",", "j", "-", "1", "]", "=", "True", "\n", "mask", "[", "i", ",", "j", "-", "1", "]", "=", "True", "\n", "\n", "", "", "for", "i", "in", "reversed", "(", "range", "(", "1", ",", "grid", ".", "width", ")", ")", ":", "\n", "                ", "if", "not", "mask", "[", "i", ",", "j", "]", ":", "\n", "                    ", "continue", "\n", "\n", "", "cell", "=", "grid", ".", "get", "(", "i", ",", "j", ")", "\n", "if", "cell", "and", "not", "cell", ".", "see_behind", "(", ")", ":", "\n", "                    ", "continue", "\n", "\n", "", "mask", "[", "i", "-", "1", ",", "j", "]", "=", "True", "\n", "if", "j", ">", "0", ":", "\n", "                    ", "mask", "[", "i", "-", "1", ",", "j", "-", "1", "]", "=", "True", "\n", "mask", "[", "i", ",", "j", "-", "1", "]", "=", "True", "\n", "\n", "", "", "", "for", "j", "in", "range", "(", "0", ",", "grid", ".", "height", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "0", ",", "grid", ".", "width", ")", ":", "\n", "                ", "if", "not", "mask", "[", "i", ",", "j", "]", ":", "\n", "                    ", "grid", ".", "set", "(", "i", ",", "j", ",", "None", ")", "\n", "\n", "", "", "", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv.__init__": [[645, 705], ["gym.spaces.Discrete", "gym.spaces.Box", "gym.spaces.Dict", "minigrid.MiniGridEnv.seed", "minigrid.MiniGridEnv.reset", "len"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv.seed", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv.reset"], ["", "def", "__init__", "(", "\n", "self", ",", "\n", "grid_size", "=", "None", ",", "\n", "width", "=", "None", ",", "\n", "height", "=", "None", ",", "\n", "max_steps", "=", "100", ",", "\n", "see_through_walls", "=", "False", ",", "\n", "seed", "=", "1337", ",", "\n", "agent_view_size", "=", "7", "\n", ")", ":", "\n", "# Can't set both grid_size and width/height", "\n", "        ", "if", "grid_size", ":", "\n", "            ", "assert", "width", "==", "None", "and", "height", "==", "None", "\n", "width", "=", "grid_size", "\n", "height", "=", "grid_size", "\n", "\n", "# Action enumeration for this environment", "\n", "", "self", ".", "actions", "=", "MiniGridEnv", ".", "Actions", "\n", "\n", "# Actions are discrete integer values", "\n", "self", ".", "action_space", "=", "spaces", ".", "Discrete", "(", "len", "(", "self", ".", "actions", ")", ")", "\n", "\n", "# Number of cells (width and height) in the agent view", "\n", "assert", "agent_view_size", "%", "2", "==", "1", "\n", "assert", "agent_view_size", ">=", "3", "\n", "self", ".", "agent_view_size", "=", "agent_view_size", "\n", "\n", "# Observations are dictionaries containing an", "\n", "# encoding of the grid and a textual 'mission' string", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Box", "(", "\n", "low", "=", "0", ",", "\n", "high", "=", "255", ",", "\n", "shape", "=", "(", "self", ".", "agent_view_size", ",", "self", ".", "agent_view_size", ",", "3", ")", ",", "\n", "dtype", "=", "'uint8'", "\n", ")", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Dict", "(", "{", "\n", "'image'", ":", "self", ".", "observation_space", "\n", "}", ")", "\n", "\n", "# Range of possible rewards", "\n", "self", ".", "reward_range", "=", "(", "0", ",", "1", ")", "\n", "\n", "# Window to use for human rendering mode", "\n", "self", ".", "window", "=", "None", "\n", "\n", "# Environment configuration", "\n", "self", ".", "width", "=", "width", "\n", "self", ".", "height", "=", "height", "\n", "self", ".", "max_steps", "=", "max_steps", "\n", "self", ".", "see_through_walls", "=", "see_through_walls", "\n", "\n", "# Current position and direction of the agent", "\n", "self", ".", "agent_pos", "=", "None", "\n", "self", ".", "agent_dir", "=", "None", "\n", "\n", "# Initialize the RNG", "\n", "self", ".", "seed", "(", "seed", "=", "seed", ")", "\n", "\n", "# Initialize the state", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv.reset": [[706, 733], ["minigrid.MiniGridEnv._gen_grid", "minigrid.MiniGridEnv.grid.get", "minigrid.MiniGridEnv.gen_obs", "minigrid.MiniGridEnv.can_overlap"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryEnv._gen_grid", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.get", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv.gen_obs", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Door.can_overlap"], ["", "def", "reset", "(", "self", ")", ":", "\n", "# Current position and direction of the agent", "\n", "        ", "self", ".", "agent_pos", "=", "None", "\n", "self", ".", "agent_dir", "=", "None", "\n", "\n", "# Generate a new random grid at the start of each episode", "\n", "# To keep the same grid for each episode, call env.seed() with", "\n", "# the same seed before calling env.reset()", "\n", "self", ".", "_gen_grid", "(", "self", ".", "width", ",", "self", ".", "height", ")", "\n", "\n", "# These fields should be defined by _gen_grid", "\n", "assert", "self", ".", "agent_pos", "is", "not", "None", "\n", "assert", "self", ".", "agent_dir", "is", "not", "None", "\n", "\n", "# Check that the agent doesn't overlap with an object", "\n", "start_cell", "=", "self", ".", "grid", ".", "get", "(", "*", "self", ".", "agent_pos", ")", "\n", "assert", "start_cell", "is", "None", "or", "start_cell", ".", "can_overlap", "(", ")", "\n", "\n", "# Item picked up, being carried, initially nothing", "\n", "self", ".", "carrying", "=", "None", "\n", "\n", "# Step count since episode start", "\n", "self", ".", "step_count", "=", "0", "\n", "\n", "# Return first observation", "\n", "obs", "=", "self", ".", "gen_obs", "(", ")", "\n", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv.seed": [[734, 738], ["gym.utils.seeding.np_random"], "methods", ["None"], ["", "def", "seed", "(", "self", ",", "seed", "=", "1337", ")", ":", "\n", "# Seed the random number generator", "\n", "        ", "self", ".", "np_random", ",", "_", "=", "seeding", ".", "np_random", "(", "seed", ")", "\n", "return", "[", "seed", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv.hash": [[739, 750], ["hashlib.sha256", "minigrid.MiniGridEnv.grid.encode().tolist", "hashlib.sha256.update", "hashlib.sha256.hexdigest", "str().encode", "minigrid.MiniGridEnv.grid.encode", "str"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.encode", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.encode"], ["", "def", "hash", "(", "self", ",", "size", "=", "16", ")", ":", "\n", "        ", "\"\"\"Compute a hash that uniquely identifies the current state of the environment.\n        :param size: Size of the hashing\n        \"\"\"", "\n", "sample_hash", "=", "hashlib", ".", "sha256", "(", ")", "\n", "\n", "to_encode", "=", "[", "self", ".", "grid", ".", "encode", "(", ")", ".", "tolist", "(", ")", ",", "self", ".", "agent_pos", ",", "self", ".", "agent_dir", "]", "\n", "for", "item", "in", "to_encode", ":", "\n", "            ", "sample_hash", ".", "update", "(", "str", "(", "item", ")", ".", "encode", "(", "'utf8'", ")", ")", "\n", "\n", "", "return", "sample_hash", ".", "hexdigest", "(", ")", "[", ":", "size", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv.steps_remaining": [[751, 754], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "steps_remaining", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "max_steps", "-", "self", ".", "step_count", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv.__str__": [[755, 815], ["range", "range", "minigrid.MiniGridEnv.grid.get", "minigrid.MiniGridEnv.color[].upper", "minigrid.MiniGridEnv.color[].upper", "minigrid.MiniGridEnv.color[].upper"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.get"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Produce a pretty string of the environment's grid along with the agent.\n        A grid cell is represented by 2-character string, the first one for\n        the object and the second one for the color.\n        \"\"\"", "\n", "\n", "# Map of object types to short string", "\n", "OBJECT_TO_STR", "=", "{", "\n", "'wall'", ":", "'W'", ",", "\n", "'floor'", ":", "'F'", ",", "\n", "'door'", ":", "'D'", ",", "\n", "'key'", ":", "'K'", ",", "\n", "'ball'", ":", "'A'", ",", "\n", "'box'", ":", "'B'", ",", "\n", "'goal'", ":", "'G'", ",", "\n", "'lava'", ":", "'V'", ",", "\n", "}", "\n", "\n", "# Short string for opened door", "\n", "OPENDED_DOOR_IDS", "=", "'_'", "\n", "\n", "# Map agent's direction to short string", "\n", "AGENT_DIR_TO_STR", "=", "{", "\n", "0", ":", "'>'", ",", "\n", "1", ":", "'V'", ",", "\n", "2", ":", "'<'", ",", "\n", "3", ":", "'^'", "\n", "}", "\n", "\n", "str", "=", "''", "\n", "\n", "for", "j", "in", "range", "(", "self", ".", "grid", ".", "height", ")", ":", "\n", "\n", "            ", "for", "i", "in", "range", "(", "self", ".", "grid", ".", "width", ")", ":", "\n", "                ", "if", "i", "==", "self", ".", "agent_pos", "[", "0", "]", "and", "j", "==", "self", ".", "agent_pos", "[", "1", "]", ":", "\n", "                    ", "str", "+=", "2", "*", "AGENT_DIR_TO_STR", "[", "self", ".", "agent_dir", "]", "\n", "continue", "\n", "\n", "", "c", "=", "self", ".", "grid", ".", "get", "(", "i", ",", "j", ")", "\n", "\n", "if", "c", "==", "None", ":", "\n", "                    ", "str", "+=", "'  '", "\n", "continue", "\n", "\n", "", "if", "c", ".", "type", "==", "'door'", ":", "\n", "                    ", "if", "c", ".", "is_open", ":", "\n", "                        ", "str", "+=", "'__'", "\n", "", "elif", "c", ".", "is_locked", ":", "\n", "                        ", "str", "+=", "'L'", "+", "c", ".", "color", "[", "0", "]", ".", "upper", "(", ")", "\n", "", "else", ":", "\n", "                        ", "str", "+=", "'D'", "+", "c", ".", "color", "[", "0", "]", ".", "upper", "(", ")", "\n", "", "continue", "\n", "\n", "", "str", "+=", "OBJECT_TO_STR", "[", "c", ".", "type", "]", "+", "c", ".", "color", "[", "0", "]", ".", "upper", "(", ")", "\n", "\n", "", "if", "j", "<", "self", ".", "grid", ".", "height", "-", "1", ":", "\n", "                ", "str", "+=", "'\\n'", "\n", "\n", "", "", "return", "str", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv._gen_grid": [[816, 818], ["None"], "methods", ["None"], ["", "def", "_gen_grid", "(", "self", ",", "width", ",", "height", ")", ":", "\n", "        ", "assert", "False", ",", "\"_gen_grid needs to be implemented by each environment\"", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv._reward": [[819, 825], ["None"], "methods", ["None"], ["", "def", "_reward", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Compute the reward to be given upon success\n        \"\"\"", "\n", "\n", "return", "1", "-", "0.9", "*", "(", "self", ".", "step_count", "/", "self", ".", "max_steps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_int": [[826, 832], ["minigrid.MiniGridEnv.np_random.randint"], "methods", ["None"], ["", "def", "_rand_int", "(", "self", ",", "low", ",", "high", ")", ":", "\n", "        ", "\"\"\"\n        Generate random integer in [low,high[\n        \"\"\"", "\n", "\n", "return", "self", ".", "np_random", ".", "randint", "(", "low", ",", "high", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_float": [[833, 839], ["minigrid.MiniGridEnv.np_random.uniform"], "methods", ["None"], ["", "def", "_rand_float", "(", "self", ",", "low", ",", "high", ")", ":", "\n", "        ", "\"\"\"\n        Generate random float in [low,high[\n        \"\"\"", "\n", "\n", "return", "self", ".", "np_random", ".", "uniform", "(", "low", ",", "high", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_bool": [[840, 846], ["minigrid.MiniGridEnv.np_random.randint"], "methods", ["None"], ["", "def", "_rand_bool", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Generate random boolean value\n        \"\"\"", "\n", "\n", "return", "(", "self", ".", "np_random", ".", "randint", "(", "0", ",", "2", ")", "==", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_elem": [[847, 855], ["list", "minigrid.MiniGridEnv._rand_int", "len"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_int"], ["", "def", "_rand_elem", "(", "self", ",", "iterable", ")", ":", "\n", "        ", "\"\"\"\n        Pick a random element in a list\n        \"\"\"", "\n", "\n", "lst", "=", "list", "(", "iterable", ")", "\n", "idx", "=", "self", ".", "_rand_int", "(", "0", ",", "len", "(", "lst", ")", ")", "\n", "return", "lst", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_subset": [[856, 872], ["list", "len", "len", "minigrid.MiniGridEnv._rand_elem", "list.remove", "out.append"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_elem"], ["", "def", "_rand_subset", "(", "self", ",", "iterable", ",", "num_elems", ")", ":", "\n", "        ", "\"\"\"\n        Sample a random subset of distinct elements of a list\n        \"\"\"", "\n", "\n", "lst", "=", "list", "(", "iterable", ")", "\n", "assert", "num_elems", "<=", "len", "(", "lst", ")", "\n", "\n", "out", "=", "[", "]", "\n", "\n", "while", "len", "(", "out", ")", "<", "num_elems", ":", "\n", "            ", "elem", "=", "self", ".", "_rand_elem", "(", "lst", ")", "\n", "lst", ".", "remove", "(", "elem", ")", "\n", "out", ".", "append", "(", "elem", ")", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_color": [[873, 879], ["minigrid.MiniGridEnv._rand_elem"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_elem"], ["", "def", "_rand_color", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Generate a random color name (string)\n        \"\"\"", "\n", "\n", "return", "self", ".", "_rand_elem", "(", "COLOR_NAMES", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_pos": [[880, 888], ["minigrid.MiniGridEnv.np_random.randint", "minigrid.MiniGridEnv.np_random.randint"], "methods", ["None"], ["", "def", "_rand_pos", "(", "self", ",", "xLow", ",", "xHigh", ",", "yLow", ",", "yHigh", ")", ":", "\n", "        ", "\"\"\"\n        Generate a random (x,y) position tuple\n        \"\"\"", "\n", "\n", "return", "(", "\n", "self", ".", "np_random", ".", "randint", "(", "xLow", ",", "xHigh", ")", ",", "\n", "self", ".", "np_random", ".", "randint", "(", "yLow", ",", "yHigh", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv.place_obj": [[890, 949], ["minigrid.MiniGridEnv.grid.set", "numpy.array", "numpy.array_equal", "max", "max", "RecursionError", "minigrid.MiniGridEnv.grid.get", "reject_fn", "minigrid.MiniGridEnv._rand_int", "minigrid.MiniGridEnv._rand_int", "min", "min"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.get", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_int", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_int"], ["", "def", "place_obj", "(", "self", ",", "\n", "obj", ",", "\n", "top", "=", "None", ",", "\n", "size", "=", "None", ",", "\n", "reject_fn", "=", "None", ",", "\n", "max_tries", "=", "math", ".", "inf", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Place an object at an empty position in the grid\n\n        :param top: top-left position of the rectangle where to place\n        :param size: size of the rectangle where to place\n        :param reject_fn: function to filter out potential positions\n        \"\"\"", "\n", "\n", "if", "top", "is", "None", ":", "\n", "            ", "top", "=", "(", "0", ",", "0", ")", "\n", "", "else", ":", "\n", "            ", "top", "=", "(", "max", "(", "top", "[", "0", "]", ",", "0", ")", ",", "max", "(", "top", "[", "1", "]", ",", "0", ")", ")", "\n", "\n", "", "if", "size", "is", "None", ":", "\n", "            ", "size", "=", "(", "self", ".", "grid", ".", "width", ",", "self", ".", "grid", ".", "height", ")", "\n", "\n", "", "num_tries", "=", "0", "\n", "\n", "while", "True", ":", "\n", "# This is to handle with rare cases where rejection sampling", "\n", "# gets stuck in an infinite loop", "\n", "            ", "if", "num_tries", ">", "max_tries", ":", "\n", "                ", "raise", "RecursionError", "(", "'rejection sampling failed in place_obj'", ")", "\n", "\n", "", "num_tries", "+=", "1", "\n", "\n", "pos", "=", "np", ".", "array", "(", "(", "\n", "self", ".", "_rand_int", "(", "top", "[", "0", "]", ",", "min", "(", "top", "[", "0", "]", "+", "size", "[", "0", "]", ",", "self", ".", "grid", ".", "width", ")", ")", ",", "\n", "self", ".", "_rand_int", "(", "top", "[", "1", "]", ",", "min", "(", "top", "[", "1", "]", "+", "size", "[", "1", "]", ",", "self", ".", "grid", ".", "height", ")", ")", "\n", ")", ")", "\n", "\n", "# Don't place the object on top of another object", "\n", "if", "self", ".", "grid", ".", "get", "(", "*", "pos", ")", "!=", "None", ":", "\n", "                ", "continue", "\n", "\n", "# Don't place the object where the agent is", "\n", "", "if", "np", ".", "array_equal", "(", "pos", ",", "self", ".", "agent_pos", ")", ":", "\n", "                ", "continue", "\n", "\n", "# Check if there is a filtering criterion", "\n", "", "if", "reject_fn", "and", "reject_fn", "(", "self", ",", "pos", ")", ":", "\n", "                ", "continue", "\n", "\n", "", "break", "\n", "\n", "", "self", ".", "grid", ".", "set", "(", "*", "pos", ",", "obj", ")", "\n", "\n", "if", "obj", "is", "not", "None", ":", "\n", "            ", "obj", ".", "init_pos", "=", "pos", "\n", "obj", ".", "cur_pos", "=", "pos", "\n", "\n", "", "return", "pos", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv.put_obj": [[950, 958], ["minigrid.MiniGridEnv.grid.set"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.set"], ["", "def", "put_obj", "(", "self", ",", "obj", ",", "i", ",", "j", ")", ":", "\n", "        ", "\"\"\"\n        Put an object at a specific position in the grid\n        \"\"\"", "\n", "\n", "self", ".", "grid", ".", "set", "(", "i", ",", "j", ",", "obj", ")", "\n", "obj", ".", "init_pos", "=", "(", "i", ",", "j", ")", "\n", "obj", ".", "cur_pos", "=", "(", "i", ",", "j", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv.place_agent": [[959, 978], ["minigrid.MiniGridEnv.place_obj", "minigrid.MiniGridEnv._rand_int"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv.place_obj", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_int"], ["", "def", "place_agent", "(", "\n", "self", ",", "\n", "top", "=", "None", ",", "\n", "size", "=", "None", ",", "\n", "rand_dir", "=", "True", ",", "\n", "max_tries", "=", "math", ".", "inf", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Set the agent's starting point at an empty position in the grid\n        \"\"\"", "\n", "\n", "self", ".", "agent_pos", "=", "None", "\n", "pos", "=", "self", ".", "place_obj", "(", "None", ",", "top", ",", "size", ",", "max_tries", "=", "max_tries", ")", "\n", "self", ".", "agent_pos", "=", "pos", "\n", "\n", "if", "rand_dir", ":", "\n", "            ", "self", ".", "agent_dir", "=", "self", ".", "_rand_int", "(", "0", ",", "4", ")", "\n", "\n", "", "return", "pos", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv.dir_vec": [[979, 988], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "dir_vec", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Get the direction vector for the agent, pointing in the direction\n        of forward movement.\n        \"\"\"", "\n", "\n", "assert", "self", ".", "agent_dir", ">=", "0", "and", "self", ".", "agent_dir", "<", "4", "\n", "return", "DIR_TO_VEC", "[", "self", ".", "agent_dir", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv.right_vec": [[989, 997], ["numpy.array"], "methods", ["None"], ["", "@", "property", "\n", "def", "right_vec", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Get the vector pointing to the right of the agent.\n        \"\"\"", "\n", "\n", "dx", ",", "dy", "=", "self", ".", "dir_vec", "\n", "return", "np", ".", "array", "(", "(", "-", "dy", ",", "dx", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv.front_pos": [[998, 1005], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "front_pos", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Get the position of the cell that is right in front of the agent\n        \"\"\"", "\n", "\n", "return", "self", ".", "agent_pos", "+", "self", ".", "dir_vec", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv.get_view_coords": [[1006, 1032], ["None"], "methods", ["None"], ["", "def", "get_view_coords", "(", "self", ",", "i", ",", "j", ")", ":", "\n", "        ", "\"\"\"\n        Translate and rotate absolute grid coordinates (i, j) into the\n        agent's partially observable view (sub-grid). Note that the resulting\n        coordinates may be negative or outside of the agent's view size.\n        \"\"\"", "\n", "\n", "ax", ",", "ay", "=", "self", ".", "agent_pos", "\n", "dx", ",", "dy", "=", "self", ".", "dir_vec", "\n", "rx", ",", "ry", "=", "self", ".", "right_vec", "\n", "\n", "# Compute the absolute coordinates of the top-left view corner", "\n", "sz", "=", "self", ".", "agent_view_size", "\n", "hs", "=", "self", ".", "agent_view_size", "//", "2", "\n", "tx", "=", "ax", "+", "(", "dx", "*", "(", "sz", "-", "1", ")", ")", "-", "(", "rx", "*", "hs", ")", "\n", "ty", "=", "ay", "+", "(", "dy", "*", "(", "sz", "-", "1", ")", ")", "-", "(", "ry", "*", "hs", ")", "\n", "\n", "lx", "=", "i", "-", "tx", "\n", "ly", "=", "j", "-", "ty", "\n", "\n", "# Project the coordinates of the object relative to the top-left", "\n", "# corner onto the agent's own coordinate system", "\n", "vx", "=", "(", "rx", "*", "lx", "+", "ry", "*", "ly", ")", "\n", "vy", "=", "-", "(", "dx", "*", "lx", "+", "dy", "*", "ly", ")", "\n", "\n", "return", "vx", ",", "vy", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv.get_view_exts": [[1033, 1062], ["None"], "methods", ["None"], ["", "def", "get_view_exts", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Get the extents of the square set of tiles visible to the agent\n        Note: the bottom extent indices are not included in the set\n        \"\"\"", "\n", "\n", "# Facing right", "\n", "if", "self", ".", "agent_dir", "==", "0", ":", "\n", "            ", "topX", "=", "self", ".", "agent_pos", "[", "0", "]", "\n", "topY", "=", "self", ".", "agent_pos", "[", "1", "]", "-", "self", ".", "agent_view_size", "//", "2", "\n", "# Facing down", "\n", "", "elif", "self", ".", "agent_dir", "==", "1", ":", "\n", "            ", "topX", "=", "self", ".", "agent_pos", "[", "0", "]", "-", "self", ".", "agent_view_size", "//", "2", "\n", "topY", "=", "self", ".", "agent_pos", "[", "1", "]", "\n", "# Facing left", "\n", "", "elif", "self", ".", "agent_dir", "==", "2", ":", "\n", "            ", "topX", "=", "self", ".", "agent_pos", "[", "0", "]", "-", "self", ".", "agent_view_size", "+", "1", "\n", "topY", "=", "self", ".", "agent_pos", "[", "1", "]", "-", "self", ".", "agent_view_size", "//", "2", "\n", "# Facing up", "\n", "", "elif", "self", ".", "agent_dir", "==", "3", ":", "\n", "            ", "topX", "=", "self", ".", "agent_pos", "[", "0", "]", "-", "self", ".", "agent_view_size", "//", "2", "\n", "topY", "=", "self", ".", "agent_pos", "[", "1", "]", "-", "self", ".", "agent_view_size", "+", "1", "\n", "", "else", ":", "\n", "            ", "assert", "False", ",", "\"invalid agent direction\"", "\n", "\n", "", "botX", "=", "topX", "+", "self", ".", "agent_view_size", "\n", "botY", "=", "topY", "+", "self", ".", "agent_view_size", "\n", "\n", "return", "(", "topX", ",", "topY", ",", "botX", ",", "botY", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv.relative_coords": [[1063, 1074], ["minigrid.MiniGridEnv.get_view_coords"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv.get_view_coords"], ["", "def", "relative_coords", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "\"\"\"\n        Check if a grid position belongs to the agent's field of view, and returns the corresponding coordinates\n        \"\"\"", "\n", "\n", "vx", ",", "vy", "=", "self", ".", "get_view_coords", "(", "x", ",", "y", ")", "\n", "\n", "if", "vx", "<", "0", "or", "vy", "<", "0", "or", "vx", ">=", "self", ".", "agent_view_size", "or", "vy", ">=", "self", ".", "agent_view_size", ":", "\n", "            ", "return", "None", "\n", "\n", "", "return", "vx", ",", "vy", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv.in_view": [[1075, 1081], ["minigrid.MiniGridEnv.relative_coords"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv.relative_coords"], ["", "def", "in_view", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "\"\"\"\n        check if a grid position is visible to the agent\n        \"\"\"", "\n", "\n", "return", "self", ".", "relative_coords", "(", "x", ",", "y", ")", "is", "not", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv.agent_sees": [[1082, 1098], ["minigrid.MiniGridEnv.relative_coords", "minigrid.MiniGridEnv.gen_obs", "minigrid.Grid.decode", "obs_grid.get", "minigrid.MiniGridEnv.grid.get"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv.relative_coords", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv.gen_obs", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.decode", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.get", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.get"], ["", "def", "agent_sees", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "\"\"\"\n        Check if a non-empty grid position is visible to the agent\n        \"\"\"", "\n", "\n", "coordinates", "=", "self", ".", "relative_coords", "(", "x", ",", "y", ")", "\n", "if", "coordinates", "is", "None", ":", "\n", "            ", "return", "False", "\n", "", "vx", ",", "vy", "=", "coordinates", "\n", "\n", "obs", "=", "self", ".", "gen_obs", "(", ")", "\n", "obs_grid", ",", "_", "=", "Grid", ".", "decode", "(", "obs", "[", "'image'", "]", ")", "\n", "obs_cell", "=", "obs_grid", ".", "get", "(", "vx", ",", "vy", ")", "\n", "world_cell", "=", "self", ".", "grid", ".", "get", "(", "x", ",", "y", ")", "\n", "\n", "return", "obs_cell", "is", "not", "None", "and", "obs_cell", ".", "type", "==", "world_cell", ".", "type", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv.step": [[1099, 1164], ["minigrid.MiniGridEnv.grid.get", "minigrid.MiniGridEnv.gen_obs", "minigrid.MiniGridEnv.can_overlap", "minigrid.MiniGridEnv._reward", "minigrid.MiniGridEnv.can_pickup", "numpy.array", "minigrid.MiniGridEnv.grid.set", "minigrid.MiniGridEnv.grid.set", "minigrid.MiniGridEnv.toggle"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.get", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv.gen_obs", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Door.can_overlap", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv._reward", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Box.can_pickup", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Box.toggle"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "self", ".", "step_count", "+=", "1", "\n", "\n", "reward", "=", "0", "\n", "done", "=", "False", "\n", "\n", "# Get the position in front of the agent", "\n", "fwd_pos", "=", "self", ".", "front_pos", "\n", "\n", "# Get the contents of the cell in front of the agent", "\n", "fwd_cell", "=", "self", ".", "grid", ".", "get", "(", "*", "fwd_pos", ")", "\n", "\n", "# Rotate left", "\n", "if", "action", "==", "self", ".", "actions", ".", "left", ":", "\n", "            ", "self", ".", "agent_dir", "-=", "1", "\n", "if", "self", ".", "agent_dir", "<", "0", ":", "\n", "                ", "self", ".", "agent_dir", "+=", "4", "\n", "\n", "# Rotate right", "\n", "", "", "elif", "action", "==", "self", ".", "actions", ".", "right", ":", "\n", "            ", "self", ".", "agent_dir", "=", "(", "self", ".", "agent_dir", "+", "1", ")", "%", "4", "\n", "\n", "# Move forward", "\n", "", "elif", "action", "==", "self", ".", "actions", ".", "forward", ":", "\n", "            ", "if", "fwd_cell", "==", "None", "or", "fwd_cell", ".", "can_overlap", "(", ")", ":", "\n", "                ", "self", ".", "agent_pos", "=", "fwd_pos", "\n", "", "if", "fwd_cell", "!=", "None", "and", "fwd_cell", ".", "type", "==", "'goal'", ":", "\n", "                ", "done", "=", "True", "\n", "reward", "=", "self", ".", "_reward", "(", ")", "\n", "", "if", "fwd_cell", "!=", "None", "and", "fwd_cell", ".", "type", "==", "'lava'", ":", "\n", "                ", "done", "=", "True", "\n", "\n", "# Pick up an object", "\n", "", "", "elif", "action", "==", "self", ".", "actions", ".", "pickup", ":", "\n", "            ", "if", "fwd_cell", "and", "fwd_cell", ".", "can_pickup", "(", ")", ":", "\n", "                ", "if", "self", ".", "carrying", "is", "None", ":", "\n", "                    ", "self", ".", "carrying", "=", "fwd_cell", "\n", "self", ".", "carrying", ".", "cur_pos", "=", "np", ".", "array", "(", "[", "-", "1", ",", "-", "1", "]", ")", "\n", "self", ".", "grid", ".", "set", "(", "*", "fwd_pos", ",", "None", ")", "\n", "\n", "# Drop an object", "\n", "", "", "", "elif", "action", "==", "self", ".", "actions", ".", "drop", ":", "\n", "            ", "if", "not", "fwd_cell", "and", "self", ".", "carrying", ":", "\n", "                ", "self", ".", "grid", ".", "set", "(", "*", "fwd_pos", ",", "self", ".", "carrying", ")", "\n", "self", ".", "carrying", ".", "cur_pos", "=", "fwd_pos", "\n", "self", ".", "carrying", "=", "None", "\n", "\n", "# Toggle/activate an object", "\n", "", "", "elif", "action", "==", "self", ".", "actions", ".", "toggle", ":", "\n", "            ", "if", "fwd_cell", ":", "\n", "                ", "fwd_cell", ".", "toggle", "(", "self", ",", "fwd_pos", ")", "\n", "\n", "# Done action (not used by default)", "\n", "", "", "elif", "action", "==", "self", ".", "actions", ".", "done", ":", "\n", "            ", "pass", "\n", "\n", "", "else", ":", "\n", "            ", "assert", "False", ",", "\"unknown action\"", "\n", "\n", "", "if", "self", ".", "step_count", ">=", "self", ".", "max_steps", ":", "\n", "            ", "done", "=", "True", "\n", "\n", "", "obs", "=", "self", ".", "gen_obs", "(", ")", "\n", "\n", "return", "obs", ",", "reward", ",", "done", ",", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv.gen_obs_grid": [[1165, 1196], ["minigrid.MiniGridEnv.get_view_exts", "minigrid.MiniGridEnv.grid.slice", "range", "grid.rotate_left.rotate_left.rotate_left", "grid.rotate_left.rotate_left.process_vis", "numpy.ones", "grid.rotate_left.rotate_left.set", "grid.rotate_left.rotate_left.set"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv.get_view_exts", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.slice", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.rotate_left", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.process_vis", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.set"], ["", "def", "gen_obs_grid", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Generate the sub-grid observed by the agent.\n        This method also outputs a visibility mask telling us which grid\n        cells the agent can actually see.\n        \"\"\"", "\n", "\n", "topX", ",", "topY", ",", "botX", ",", "botY", "=", "self", ".", "get_view_exts", "(", ")", "\n", "\n", "grid", "=", "self", ".", "grid", ".", "slice", "(", "topX", ",", "topY", ",", "self", ".", "agent_view_size", ",", "self", ".", "agent_view_size", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "agent_dir", "+", "1", ")", ":", "\n", "            ", "grid", "=", "grid", ".", "rotate_left", "(", ")", "\n", "\n", "# Process occluders and visibility", "\n", "# Note that this incurs some performance cost", "\n", "", "if", "not", "self", ".", "see_through_walls", ":", "\n", "            ", "vis_mask", "=", "grid", ".", "process_vis", "(", "agent_pos", "=", "(", "self", ".", "agent_view_size", "//", "2", ",", "self", ".", "agent_view_size", "-", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "vis_mask", "=", "np", ".", "ones", "(", "shape", "=", "(", "grid", ".", "width", ",", "grid", ".", "height", ")", ",", "dtype", "=", "bool", ")", "\n", "\n", "# Make it so the agent sees what it's carrying", "\n", "# We do this by placing the carried object at the agent's position", "\n", "# in the agent's partially observable view", "\n", "", "agent_pos", "=", "grid", ".", "width", "//", "2", ",", "grid", ".", "height", "-", "1", "\n", "if", "self", ".", "carrying", ":", "\n", "            ", "grid", ".", "set", "(", "*", "agent_pos", ",", "self", ".", "carrying", ")", "\n", "", "else", ":", "\n", "            ", "grid", ".", "set", "(", "*", "agent_pos", ",", "None", ")", "\n", "\n", "", "return", "grid", ",", "vis_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv.gen_obs": [[1197, 1220], ["minigrid.MiniGridEnv.gen_obs_grid", "grid.encode", "hasattr"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv.gen_obs_grid", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.encode"], ["", "def", "gen_obs", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Generate the agent's view (partially observable, low-resolution encoding)\n        \"\"\"", "\n", "\n", "grid", ",", "vis_mask", "=", "self", ".", "gen_obs_grid", "(", ")", "\n", "\n", "# Encode the partially observable view into a numpy array", "\n", "image", "=", "grid", ".", "encode", "(", "vis_mask", ")", "\n", "\n", "assert", "hasattr", "(", "self", ",", "'mission'", ")", ",", "\"environments must define a textual mission string\"", "\n", "\n", "# Observations are dictionaries containing:", "\n", "# - an image (partially observable view of the environment)", "\n", "# - the agent's direction/orientation (acting as a compass)", "\n", "# - a textual mission string (instructions for the agent)", "\n", "obs", "=", "{", "\n", "'image'", ":", "image", ",", "\n", "'direction'", ":", "self", ".", "agent_dir", ",", "\n", "'mission'", ":", "self", ".", "mission", "\n", "}", "\n", "\n", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv.get_obs_render": [[1221, 1237], ["minigrid.Grid.decode", "grid.render"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.decode", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv.render"], ["", "def", "get_obs_render", "(", "self", ",", "obs", ",", "tile_size", "=", "TILE_PIXELS", "//", "2", ")", ":", "\n", "        ", "\"\"\"\n        Render an agent observation for visualization\n        \"\"\"", "\n", "\n", "grid", ",", "vis_mask", "=", "Grid", ".", "decode", "(", "obs", ")", "\n", "\n", "# Render the whole grid", "\n", "img", "=", "grid", ".", "render", "(", "\n", "tile_size", ",", "\n", "agent_pos", "=", "(", "self", ".", "agent_view_size", "//", "2", ",", "self", ".", "agent_view_size", "-", "1", ")", ",", "\n", "agent_dir", "=", "3", ",", "\n", "highlight_mask", "=", "vis_mask", "\n", ")", "\n", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv.render": [[1238, 1296], ["minigrid.MiniGridEnv.gen_obs_grid", "numpy.zeros", "range", "minigrid.MiniGridEnv.grid.render", "gym_minigrid.window.Window", "minigrid.MiniGridEnv.window.show", "range", "minigrid.MiniGridEnv.window.set_caption", "minigrid.MiniGridEnv.window.show_img", "minigrid.MiniGridEnv.window.close"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv.gen_obs_grid", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv.render", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.window.Window.show", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.window.Window.set_caption", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.window.Window.show_img", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.window.Window.close"], ["", "def", "render", "(", "self", ",", "mode", "=", "'human'", ",", "close", "=", "False", ",", "highlight", "=", "True", ",", "tile_size", "=", "TILE_PIXELS", ")", ":", "\n", "        ", "\"\"\"\n        Render the whole-grid human view\n        \"\"\"", "\n", "\n", "if", "close", ":", "\n", "            ", "if", "self", ".", "window", ":", "\n", "                ", "self", ".", "window", ".", "close", "(", ")", "\n", "", "return", "\n", "\n", "", "if", "mode", "==", "'human'", "and", "not", "self", ".", "window", ":", "\n", "            ", "import", "gym_minigrid", ".", "window", "\n", "self", ".", "window", "=", "gym_minigrid", ".", "window", ".", "Window", "(", "'gym_minigrid'", ")", "\n", "self", ".", "window", ".", "show", "(", "block", "=", "False", ")", "\n", "\n", "# Compute which cells are visible to the agent", "\n", "", "_", ",", "vis_mask", "=", "self", ".", "gen_obs_grid", "(", ")", "\n", "\n", "# Compute the world coordinates of the bottom-left corner", "\n", "# of the agent's view area", "\n", "f_vec", "=", "self", ".", "dir_vec", "\n", "r_vec", "=", "self", ".", "right_vec", "\n", "top_left", "=", "self", ".", "agent_pos", "+", "f_vec", "*", "(", "self", ".", "agent_view_size", "-", "1", ")", "-", "r_vec", "*", "(", "self", ".", "agent_view_size", "//", "2", ")", "\n", "\n", "# Mask of which cells to highlight", "\n", "highlight_mask", "=", "np", ".", "zeros", "(", "shape", "=", "(", "self", ".", "width", ",", "self", ".", "height", ")", ",", "dtype", "=", "bool", ")", "\n", "\n", "# For each cell in the visibility mask", "\n", "for", "vis_j", "in", "range", "(", "0", ",", "self", ".", "agent_view_size", ")", ":", "\n", "            ", "for", "vis_i", "in", "range", "(", "0", ",", "self", ".", "agent_view_size", ")", ":", "\n", "# If this cell is not visible, don't highlight it", "\n", "                ", "if", "not", "vis_mask", "[", "vis_i", ",", "vis_j", "]", ":", "\n", "                    ", "continue", "\n", "\n", "# Compute the world coordinates of this cell", "\n", "", "abs_i", ",", "abs_j", "=", "top_left", "-", "(", "f_vec", "*", "vis_j", ")", "+", "(", "r_vec", "*", "vis_i", ")", "\n", "\n", "if", "abs_i", "<", "0", "or", "abs_i", ">=", "self", ".", "width", ":", "\n", "                    ", "continue", "\n", "", "if", "abs_j", "<", "0", "or", "abs_j", ">=", "self", ".", "height", ":", "\n", "                    ", "continue", "\n", "\n", "# Mark this cell to be highlighted", "\n", "", "highlight_mask", "[", "abs_i", ",", "abs_j", "]", "=", "True", "\n", "\n", "# Render the whole grid", "\n", "", "", "img", "=", "self", ".", "grid", ".", "render", "(", "\n", "tile_size", ",", "\n", "self", ".", "agent_pos", ",", "\n", "self", ".", "agent_dir", ",", "\n", "highlight_mask", "=", "highlight_mask", "if", "highlight", "else", "None", "\n", ")", "\n", "\n", "if", "mode", "==", "'human'", ":", "\n", "            ", "self", ".", "window", ".", "set_caption", "(", "self", ".", "mission", ")", "\n", "self", ".", "window", ".", "show_img", "(", "img", ")", "\n", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv.close": [[1297, 1301], ["minigrid.MiniGridEnv.window.close"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.window.Window.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "window", ":", "\n", "            ", "self", ".", "window", ".", "close", "(", ")", "\n", "", "return", "\n", "", "", ""]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.window.Window.__init__": [[17, 41], ["plt.subplots", "window.Window.fig.canvas.set_window_title", "window.Window.ax.xaxis.set_ticks_position", "window.Window.ax.yaxis.set_ticks_position", "window.Window.ax.set_xticklabels", "window.Window.ax.set_yticklabels", "window.Window.fig.canvas.mpl_connect"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "title", ")", ":", "\n", "        ", "self", ".", "fig", "=", "None", "\n", "\n", "self", ".", "imshow_obj", "=", "None", "\n", "\n", "# Create the figure and axes", "\n", "self", ".", "fig", ",", "self", ".", "ax", "=", "plt", ".", "subplots", "(", ")", "\n", "\n", "# Show the env name in the window title", "\n", "self", ".", "fig", ".", "canvas", ".", "set_window_title", "(", "title", ")", "\n", "\n", "# Turn off x/y axis numbering/ticks", "\n", "self", ".", "ax", ".", "xaxis", ".", "set_ticks_position", "(", "'none'", ")", "\n", "self", ".", "ax", ".", "yaxis", ".", "set_ticks_position", "(", "'none'", ")", "\n", "_", "=", "self", ".", "ax", ".", "set_xticklabels", "(", "[", "]", ")", "\n", "_", "=", "self", ".", "ax", ".", "set_yticklabels", "(", "[", "]", ")", "\n", "\n", "# Flag indicating the window was closed", "\n", "self", ".", "closed", "=", "False", "\n", "\n", "def", "close_handler", "(", "evt", ")", ":", "\n", "            ", "self", ".", "closed", "=", "True", "\n", "\n", "", "self", ".", "fig", ".", "canvas", ".", "mpl_connect", "(", "'close_event'", ",", "close_handler", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.window.Window.show_img": [[42, 61], ["window.Window.imshow_obj.set_data", "window.Window.fig.canvas.draw_idle", "window.Window.fig.canvas.flush_events", "plt.pause", "window.Window.ax.imshow"], "methods", ["None"], ["", "def", "show_img", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\"\n        Show an image or update the image being shown\n        \"\"\"", "\n", "\n", "# If no image has been shown yet,", "\n", "# show the first image of the environment", "\n", "if", "self", ".", "imshow_obj", "is", "None", ":", "\n", "            ", "self", ".", "imshow_obj", "=", "self", ".", "ax", ".", "imshow", "(", "img", ",", "interpolation", "=", "'bilinear'", ")", "\n", "\n", "# Update the image data", "\n", "", "self", ".", "imshow_obj", ".", "set_data", "(", "img", ")", "\n", "\n", "# Request the window be redrawn", "\n", "self", ".", "fig", ".", "canvas", ".", "draw_idle", "(", ")", "\n", "self", ".", "fig", ".", "canvas", ".", "flush_events", "(", ")", "\n", "\n", "# Let matplotlib process UI events", "\n", "plt", ".", "pause", "(", "0.001", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.window.Window.set_caption": [[62, 68], ["plt.xlabel"], "methods", ["None"], ["", "def", "set_caption", "(", "self", ",", "text", ")", ":", "\n", "        ", "\"\"\"\n        Set/update the caption text below the image\n        \"\"\"", "\n", "\n", "plt", ".", "xlabel", "(", "text", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.window.Window.reg_key_handler": [[69, 76], ["window.Window.fig.canvas.mpl_connect"], "methods", ["None"], ["", "def", "reg_key_handler", "(", "self", ",", "key_handler", ")", ":", "\n", "        ", "\"\"\"\n        Register a keyboard event handler\n        \"\"\"", "\n", "\n", "# Keyboard handler", "\n", "self", ".", "fig", ".", "canvas", ".", "mpl_connect", "(", "'key_press_event'", ",", "key_handler", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.window.Window.show": [[77, 90], ["plt.show", "plt.ion"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.window.Window.show"], ["", "def", "show", "(", "self", ",", "block", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Show the window, and start an event loop\n        \"\"\"", "\n", "\n", "# If not blocking, trigger interactive mode", "\n", "if", "not", "block", ":", "\n", "            ", "plt", ".", "ion", "(", ")", "\n", "\n", "# Show the plot", "\n", "# In non-interative mode, this enters the matplotlib event loop", "\n", "# In interactive mode, this call does not block", "\n", "", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.window.Window.close": [[91, 98], ["plt.close"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.window.Window.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Close the window\n        \"\"\"", "\n", "\n", "plt", ".", "close", "(", ")", "\n", "self", ".", "closed", "=", "True", "\n", "", "", ""]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.roomgrid.Room.__init__": [[15, 38], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "top", ",", "\n", "size", "\n", ")", ":", "\n", "# Top-left corner and size (tuples)", "\n", "        ", "self", ".", "top", "=", "top", "\n", "self", ".", "size", "=", "size", "\n", "\n", "# List of door objects and door positions", "\n", "# Order of the doors is right, down, left, up", "\n", "self", ".", "doors", "=", "[", "None", "]", "*", "4", "\n", "self", ".", "door_pos", "=", "[", "None", "]", "*", "4", "\n", "\n", "# List of rooms adjacent to this one", "\n", "# Order of the neighbors is right, down, left, up", "\n", "self", ".", "neighbors", "=", "[", "None", "]", "*", "4", "\n", "\n", "# Indicates if this room is behind a locked door", "\n", "self", ".", "locked", "=", "False", "\n", "\n", "# List of objects contained", "\n", "self", ".", "objs", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.roomgrid.Room.rand_pos": [[39, 45], ["env._randPos"], "methods", ["None"], ["", "def", "rand_pos", "(", "self", ",", "env", ")", ":", "\n", "        ", "topX", ",", "topY", "=", "self", ".", "top", "\n", "sizeX", ",", "sizeY", "=", "self", ".", "size", "\n", "return", "env", ".", "_randPos", "(", "\n", "topX", "+", "1", ",", "topX", "+", "sizeX", "-", "1", ",", "\n", "topY", "+", "1", ",", "topY", "+", "sizeY", "-", "1", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.roomgrid.Room.pos_inside": [[47, 62], ["None"], "methods", ["None"], ["", "def", "pos_inside", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "\"\"\"\n        Check if a position is within the bounds of this room\n        \"\"\"", "\n", "\n", "topX", ",", "topY", "=", "self", ".", "top", "\n", "sizeX", ",", "sizeY", "=", "self", ".", "size", "\n", "\n", "if", "x", "<", "topX", "or", "y", "<", "topY", ":", "\n", "            ", "return", "False", "\n", "\n", "", "if", "x", ">=", "topX", "+", "sizeX", "or", "y", ">=", "topY", "+", "sizeY", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.roomgrid.RoomGrid.__init__": [[69, 99], ["minigrid.MiniGridEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryS7.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "room_size", "=", "7", ",", "\n", "num_rows", "=", "3", ",", "\n", "num_cols", "=", "3", ",", "\n", "max_steps", "=", "100", ",", "\n", "seed", "=", "0", ",", "\n", "agent_view_size", "=", "7", "\n", ")", ":", "\n", "        ", "assert", "room_size", ">", "0", "\n", "assert", "room_size", ">=", "3", "\n", "assert", "num_rows", ">", "0", "\n", "assert", "num_cols", ">", "0", "\n", "self", ".", "room_size", "=", "room_size", "\n", "self", ".", "num_rows", "=", "num_rows", "\n", "self", ".", "num_cols", "=", "num_cols", "\n", "\n", "height", "=", "(", "room_size", "-", "1", ")", "*", "num_rows", "+", "1", "\n", "width", "=", "(", "room_size", "-", "1", ")", "*", "num_cols", "+", "1", "\n", "\n", "# By default, this environment has no mission", "\n", "self", ".", "mission", "=", "''", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "width", "=", "width", ",", "\n", "height", "=", "height", ",", "\n", "max_steps", "=", "max_steps", ",", "\n", "see_through_walls", "=", "False", ",", "\n", "seed", "=", "seed", ",", "\n", "agent_view_size", "=", "agent_view_size", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.roomgrid.RoomGrid.room_from_pos": [[101, 114], ["None"], "methods", ["None"], ["", "def", "room_from_pos", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "\"\"\"Get the room a given position maps to\"\"\"", "\n", "\n", "assert", "x", ">=", "0", "\n", "assert", "y", ">=", "0", "\n", "\n", "i", "=", "x", "//", "(", "self", ".", "room_size", "-", "1", ")", "\n", "j", "=", "y", "//", "(", "self", ".", "room_size", "-", "1", ")", "\n", "\n", "assert", "i", "<", "self", ".", "num_cols", "\n", "assert", "j", "<", "self", ".", "num_rows", "\n", "\n", "return", "self", ".", "room_grid", "[", "j", "]", "[", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.roomgrid.RoomGrid.get_room": [[115, 119], ["None"], "methods", ["None"], ["", "def", "get_room", "(", "self", ",", "i", ",", "j", ")", ":", "\n", "        ", "assert", "i", "<", "self", ".", "num_cols", "\n", "assert", "j", "<", "self", ".", "num_rows", "\n", "return", "self", ".", "room_grid", "[", "j", "]", "[", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.roomgrid.RoomGrid._gen_grid": [[120, 172], ["minigrid.Grid", "range", "range", "range", "roomgrid.RoomGrid.room_grid.append", "range", "roomgrid.Room", "row.append", "roomgrid.RoomGrid.grid.wall_rect", "roomgrid.RoomGrid._rand_int", "roomgrid.RoomGrid._rand_int"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.wall_rect", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_int", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_int"], ["", "def", "_gen_grid", "(", "self", ",", "width", ",", "height", ")", ":", "\n", "# Create the grid", "\n", "        ", "self", ".", "grid", "=", "Grid", "(", "width", ",", "height", ")", "\n", "\n", "self", ".", "room_grid", "=", "[", "]", "\n", "\n", "# For each row of rooms", "\n", "for", "j", "in", "range", "(", "0", ",", "self", ".", "num_rows", ")", ":", "\n", "            ", "row", "=", "[", "]", "\n", "\n", "# For each column of rooms", "\n", "for", "i", "in", "range", "(", "0", ",", "self", ".", "num_cols", ")", ":", "\n", "                ", "room", "=", "Room", "(", "\n", "(", "i", "*", "(", "self", ".", "room_size", "-", "1", ")", ",", "j", "*", "(", "self", ".", "room_size", "-", "1", ")", ")", ",", "\n", "(", "self", ".", "room_size", ",", "self", ".", "room_size", ")", "\n", ")", "\n", "row", ".", "append", "(", "room", ")", "\n", "\n", "# Generate the walls for this room", "\n", "self", ".", "grid", ".", "wall_rect", "(", "*", "room", ".", "top", ",", "*", "room", ".", "size", ")", "\n", "\n", "", "self", ".", "room_grid", ".", "append", "(", "row", ")", "\n", "\n", "# For each row of rooms", "\n", "", "for", "j", "in", "range", "(", "0", ",", "self", ".", "num_rows", ")", ":", "\n", "# For each column of rooms", "\n", "            ", "for", "i", "in", "range", "(", "0", ",", "self", ".", "num_cols", ")", ":", "\n", "                ", "room", "=", "self", ".", "room_grid", "[", "j", "]", "[", "i", "]", "\n", "\n", "x_l", ",", "y_l", "=", "(", "room", ".", "top", "[", "0", "]", "+", "1", ",", "room", ".", "top", "[", "1", "]", "+", "1", ")", "\n", "x_m", ",", "y_m", "=", "(", "room", ".", "top", "[", "0", "]", "+", "room", ".", "size", "[", "0", "]", "-", "1", ",", "room", ".", "top", "[", "1", "]", "+", "room", ".", "size", "[", "1", "]", "-", "1", ")", "\n", "\n", "# Door positions, order is right, down, left, up", "\n", "if", "i", "<", "self", ".", "num_cols", "-", "1", ":", "\n", "                    ", "room", ".", "neighbors", "[", "0", "]", "=", "self", ".", "room_grid", "[", "j", "]", "[", "i", "+", "1", "]", "\n", "room", ".", "door_pos", "[", "0", "]", "=", "(", "x_m", ",", "self", ".", "_rand_int", "(", "y_l", ",", "y_m", ")", ")", "\n", "", "if", "j", "<", "self", ".", "num_rows", "-", "1", ":", "\n", "                    ", "room", ".", "neighbors", "[", "1", "]", "=", "self", ".", "room_grid", "[", "j", "+", "1", "]", "[", "i", "]", "\n", "room", ".", "door_pos", "[", "1", "]", "=", "(", "self", ".", "_rand_int", "(", "x_l", ",", "x_m", ")", ",", "y_m", ")", "\n", "", "if", "i", ">", "0", ":", "\n", "                    ", "room", ".", "neighbors", "[", "2", "]", "=", "self", ".", "room_grid", "[", "j", "]", "[", "i", "-", "1", "]", "\n", "room", ".", "door_pos", "[", "2", "]", "=", "room", ".", "neighbors", "[", "2", "]", ".", "door_pos", "[", "0", "]", "\n", "", "if", "j", ">", "0", ":", "\n", "                    ", "room", ".", "neighbors", "[", "3", "]", "=", "self", ".", "room_grid", "[", "j", "-", "1", "]", "[", "i", "]", "\n", "room", ".", "door_pos", "[", "3", "]", "=", "room", ".", "neighbors", "[", "3", "]", ".", "door_pos", "[", "1", "]", "\n", "\n", "# The agent starts in the middle, facing right", "\n", "", "", "", "self", ".", "agent_pos", "=", "(", "\n", "(", "self", ".", "num_cols", "//", "2", ")", "*", "(", "self", ".", "room_size", "-", "1", ")", "+", "(", "self", ".", "room_size", "//", "2", ")", ",", "\n", "(", "self", ".", "num_rows", "//", "2", ")", "*", "(", "self", ".", "room_size", "-", "1", ")", "+", "(", "self", ".", "room_size", "//", "2", ")", "\n", ")", "\n", "self", ".", "agent_dir", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.roomgrid.RoomGrid.place_in_room": [[173, 191], ["roomgrid.RoomGrid.get_room", "roomgrid.RoomGrid.place_obj", "roomgrid.RoomGrid.objs.append"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.roomgrid.RoomGrid.get_room", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv.place_obj"], ["", "def", "place_in_room", "(", "self", ",", "i", ",", "j", ",", "obj", ")", ":", "\n", "        ", "\"\"\"\n        Add an existing object to room (i, j)\n        \"\"\"", "\n", "\n", "room", "=", "self", ".", "get_room", "(", "i", ",", "j", ")", "\n", "\n", "pos", "=", "self", ".", "place_obj", "(", "\n", "obj", ",", "\n", "room", ".", "top", ",", "\n", "room", ".", "size", ",", "\n", "reject_fn", "=", "reject_next_to", ",", "\n", "max_tries", "=", "1000", "\n", ")", "\n", "\n", "room", ".", "objs", ".", "append", "(", "obj", ")", "\n", "\n", "return", "obj", ",", "pos", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.roomgrid.RoomGrid.add_object": [[192, 213], ["roomgrid.RoomGrid.place_in_room", "roomgrid.RoomGrid._rand_elem", "roomgrid.RoomGrid._rand_color", "minigrid.Key", "minigrid.Ball", "minigrid.Box"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.roomgrid.RoomGrid.place_in_room", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_elem", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_color"], ["", "def", "add_object", "(", "self", ",", "i", ",", "j", ",", "kind", "=", "None", ",", "color", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Add a new object to room (i, j)\n        \"\"\"", "\n", "\n", "if", "kind", "==", "None", ":", "\n", "            ", "kind", "=", "self", ".", "_rand_elem", "(", "[", "'key'", ",", "'ball'", ",", "'box'", "]", ")", "\n", "\n", "", "if", "color", "==", "None", ":", "\n", "            ", "color", "=", "self", ".", "_rand_color", "(", ")", "\n", "\n", "# TODO: we probably want to add an Object.make helper function", "\n", "", "assert", "kind", "in", "[", "'key'", ",", "'ball'", ",", "'box'", "]", "\n", "if", "kind", "==", "'key'", ":", "\n", "            ", "obj", "=", "Key", "(", "color", ")", "\n", "", "elif", "kind", "==", "'ball'", ":", "\n", "            ", "obj", "=", "Ball", "(", "color", ")", "\n", "", "elif", "kind", "==", "'box'", ":", "\n", "            ", "obj", "=", "Box", "(", "color", ")", "\n", "\n", "", "return", "self", ".", "place_in_room", "(", "i", ",", "j", ",", "obj", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.roomgrid.RoomGrid.add_door": [[214, 249], ["roomgrid.RoomGrid.get_room", "minigrid.Door", "roomgrid.RoomGrid.grid.set", "roomgrid.RoomGrid._rand_color", "roomgrid.RoomGrid._rand_bool", "roomgrid.RoomGrid._rand_int"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.roomgrid.RoomGrid.get_room", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_color", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_bool", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_int"], ["", "def", "add_door", "(", "self", ",", "i", ",", "j", ",", "door_idx", "=", "None", ",", "color", "=", "None", ",", "locked", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Add a door to a room, connecting it to a neighbor\n        \"\"\"", "\n", "\n", "room", "=", "self", ".", "get_room", "(", "i", ",", "j", ")", "\n", "\n", "if", "door_idx", "==", "None", ":", "\n", "# Need to make sure that there is a neighbor along this wall", "\n", "# and that there is not already a door", "\n", "            ", "while", "True", ":", "\n", "                ", "door_idx", "=", "self", ".", "_rand_int", "(", "0", ",", "4", ")", "\n", "if", "room", ".", "neighbors", "[", "door_idx", "]", "and", "room", ".", "doors", "[", "door_idx", "]", "is", "None", ":", "\n", "                    ", "break", "\n", "\n", "", "", "", "if", "color", "==", "None", ":", "\n", "            ", "color", "=", "self", ".", "_rand_color", "(", ")", "\n", "\n", "", "if", "locked", "is", "None", ":", "\n", "            ", "locked", "=", "self", ".", "_rand_bool", "(", ")", "\n", "\n", "", "assert", "room", ".", "doors", "[", "door_idx", "]", "is", "None", ",", "\"door already exists\"", "\n", "\n", "room", ".", "locked", "=", "locked", "\n", "door", "=", "Door", "(", "color", ",", "is_locked", "=", "locked", ")", "\n", "\n", "pos", "=", "room", ".", "door_pos", "[", "door_idx", "]", "\n", "self", ".", "grid", ".", "set", "(", "*", "pos", ",", "door", ")", "\n", "door", ".", "cur_pos", "=", "pos", "\n", "\n", "neighbor", "=", "room", ".", "neighbors", "[", "door_idx", "]", "\n", "room", ".", "doors", "[", "door_idx", "]", "=", "door", "\n", "neighbor", ".", "doors", "[", "(", "door_idx", "+", "2", ")", "%", "4", "]", "=", "door", "\n", "\n", "return", "door", ",", "pos", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.roomgrid.RoomGrid.remove_wall": [[250, 285], ["roomgrid.RoomGrid.get_room", "range", "roomgrid.RoomGrid.grid.set", "range", "roomgrid.RoomGrid.grid.set", "range", "roomgrid.RoomGrid.grid.set", "range", "roomgrid.RoomGrid.grid.set"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.roomgrid.RoomGrid.get_room", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.set"], ["", "def", "remove_wall", "(", "self", ",", "i", ",", "j", ",", "wall_idx", ")", ":", "\n", "        ", "\"\"\"\n        Remove a wall between two rooms\n        \"\"\"", "\n", "\n", "room", "=", "self", ".", "get_room", "(", "i", ",", "j", ")", "\n", "\n", "assert", "wall_idx", ">=", "0", "and", "wall_idx", "<", "4", "\n", "assert", "room", ".", "doors", "[", "wall_idx", "]", "is", "None", ",", "\"door exists on this wall\"", "\n", "assert", "room", ".", "neighbors", "[", "wall_idx", "]", ",", "\"invalid wall\"", "\n", "\n", "neighbor", "=", "room", ".", "neighbors", "[", "wall_idx", "]", "\n", "\n", "tx", ",", "ty", "=", "room", ".", "top", "\n", "w", ",", "h", "=", "room", ".", "size", "\n", "\n", "# Ordering of walls is right, down, left, up", "\n", "if", "wall_idx", "==", "0", ":", "\n", "            ", "for", "i", "in", "range", "(", "1", ",", "h", "-", "1", ")", ":", "\n", "                ", "self", ".", "grid", ".", "set", "(", "tx", "+", "w", "-", "1", ",", "ty", "+", "i", ",", "None", ")", "\n", "", "", "elif", "wall_idx", "==", "1", ":", "\n", "            ", "for", "i", "in", "range", "(", "1", ",", "w", "-", "1", ")", ":", "\n", "                ", "self", ".", "grid", ".", "set", "(", "tx", "+", "i", ",", "ty", "+", "h", "-", "1", ",", "None", ")", "\n", "", "", "elif", "wall_idx", "==", "2", ":", "\n", "            ", "for", "i", "in", "range", "(", "1", ",", "h", "-", "1", ")", ":", "\n", "                ", "self", ".", "grid", ".", "set", "(", "tx", ",", "ty", "+", "i", ",", "None", ")", "\n", "", "", "elif", "wall_idx", "==", "3", ":", "\n", "            ", "for", "i", "in", "range", "(", "1", ",", "w", "-", "1", ")", ":", "\n", "                ", "self", ".", "grid", ".", "set", "(", "tx", "+", "i", ",", "ty", ",", "None", ")", "\n", "", "", "else", ":", "\n", "            ", "assert", "False", ",", "\"invalid wall index\"", "\n", "\n", "# Mark the rooms as connected", "\n", "", "room", ".", "doors", "[", "wall_idx", "]", "=", "True", "\n", "neighbor", ".", "doors", "[", "(", "wall_idx", "+", "2", ")", "%", "4", "]", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.roomgrid.RoomGrid.place_agent": [[286, 306], ["roomgrid.RoomGrid._rand_int", "roomgrid.RoomGrid._rand_int", "super().place_agent", "roomgrid.RoomGrid.grid.get"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_int", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_int", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.roomgrid.RoomGrid.place_agent", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.get"], ["", "def", "place_agent", "(", "self", ",", "i", "=", "None", ",", "j", "=", "None", ",", "rand_dir", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Place the agent in a room\n        \"\"\"", "\n", "\n", "if", "i", "==", "None", ":", "\n", "            ", "i", "=", "self", ".", "_rand_int", "(", "0", ",", "self", ".", "num_cols", ")", "\n", "", "if", "j", "==", "None", ":", "\n", "            ", "j", "=", "self", ".", "_rand_int", "(", "0", ",", "self", ".", "num_rows", ")", "\n", "\n", "", "room", "=", "self", ".", "room_grid", "[", "j", "]", "[", "i", "]", "\n", "\n", "# Find a position that is not right in front of an object", "\n", "while", "True", ":", "\n", "            ", "super", "(", ")", ".", "place_agent", "(", "room", ".", "top", ",", "room", ".", "size", ",", "rand_dir", ",", "max_tries", "=", "1000", ")", "\n", "front_cell", "=", "self", ".", "grid", ".", "get", "(", "*", "self", ".", "front_pos", ")", "\n", "if", "front_cell", "is", "None", "or", "front_cell", ".", "type", "==", "'wall'", ":", "\n", "                ", "break", "\n", "\n", "", "", "return", "self", ".", "agent_pos", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.roomgrid.RoomGrid.connect_all": [[307, 362], ["roomgrid.RoomGrid.room_from_pos", "set", "roomgrid.RoomGrid.connect_all.find_reach"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.roomgrid.RoomGrid.room_from_pos", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.set"], ["", "def", "connect_all", "(", "self", ",", "door_colors", "=", "COLOR_NAMES", ",", "max_itrs", "=", "5000", ")", ":", "\n", "        ", "\"\"\"\n        Make sure that all rooms are reachable by the agent from its\n        starting position\n        \"\"\"", "\n", "\n", "start_room", "=", "self", ".", "room_from_pos", "(", "*", "self", ".", "agent_pos", ")", "\n", "\n", "added_doors", "=", "[", "]", "\n", "\n", "def", "find_reach", "(", ")", ":", "\n", "            ", "reach", "=", "set", "(", ")", "\n", "stack", "=", "[", "start_room", "]", "\n", "while", "len", "(", "stack", ")", ">", "0", ":", "\n", "                ", "room", "=", "stack", ".", "pop", "(", ")", "\n", "if", "room", "in", "reach", ":", "\n", "                    ", "continue", "\n", "", "reach", ".", "add", "(", "room", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "4", ")", ":", "\n", "                    ", "if", "room", ".", "doors", "[", "i", "]", ":", "\n", "                        ", "stack", ".", "append", "(", "room", ".", "neighbors", "[", "i", "]", ")", "\n", "", "", "", "return", "reach", "\n", "\n", "", "num_itrs", "=", "0", "\n", "\n", "while", "True", ":", "\n", "# This is to handle rare situations where random sampling produces", "\n", "# a level that cannot be connected, producing in an infinite loop", "\n", "            ", "if", "num_itrs", ">", "max_itrs", ":", "\n", "                ", "raise", "RecursionError", "(", "'connect_all failed'", ")", "\n", "", "num_itrs", "+=", "1", "\n", "\n", "# If all rooms are reachable, stop", "\n", "reach", "=", "find_reach", "(", ")", "\n", "if", "len", "(", "reach", ")", "==", "self", ".", "num_rows", "*", "self", ".", "num_cols", ":", "\n", "                ", "break", "\n", "\n", "# Pick a random room and door position", "\n", "", "i", "=", "self", ".", "_rand_int", "(", "0", ",", "self", ".", "num_cols", ")", "\n", "j", "=", "self", ".", "_rand_int", "(", "0", ",", "self", ".", "num_rows", ")", "\n", "k", "=", "self", ".", "_rand_int", "(", "0", ",", "4", ")", "\n", "room", "=", "self", ".", "get_room", "(", "i", ",", "j", ")", "\n", "\n", "# If there is already a door there, skip", "\n", "if", "not", "room", ".", "door_pos", "[", "k", "]", "or", "room", ".", "doors", "[", "k", "]", ":", "\n", "                ", "continue", "\n", "\n", "", "if", "room", ".", "locked", "or", "room", ".", "neighbors", "[", "k", "]", ".", "locked", ":", "\n", "                ", "continue", "\n", "\n", "", "color", "=", "self", ".", "_rand_elem", "(", "door_colors", ")", "\n", "door", ",", "_", "=", "self", ".", "add_door", "(", "i", ",", "j", ",", "k", ",", "color", ",", "False", ")", "\n", "added_doors", ".", "append", "(", "door", ")", "\n", "\n", "", "return", "added_doors", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.roomgrid.RoomGrid.add_distractors": [[363, 400], ["len", "roomgrid.RoomGrid._rand_elem", "roomgrid.RoomGrid._rand_elem", "roomgrid.RoomGrid.add_object", "objs.append", "dists.append", "roomgrid.RoomGrid._rand_int", "roomgrid.RoomGrid._rand_int", "objs.append"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_elem", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_elem", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.roomgrid.RoomGrid.add_object", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_int", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_int"], ["", "def", "add_distractors", "(", "self", ",", "i", "=", "None", ",", "j", "=", "None", ",", "num_distractors", "=", "10", ",", "all_unique", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Add random objects that can potentially distract/confuse the agent.\n        \"\"\"", "\n", "\n", "# Collect a list of existing objects", "\n", "objs", "=", "[", "]", "\n", "for", "row", "in", "self", ".", "room_grid", ":", "\n", "            ", "for", "room", "in", "row", ":", "\n", "                ", "for", "obj", "in", "room", ".", "objs", ":", "\n", "                    ", "objs", ".", "append", "(", "(", "obj", ".", "type", ",", "obj", ".", "color", ")", ")", "\n", "\n", "# List of distractors added", "\n", "", "", "", "dists", "=", "[", "]", "\n", "\n", "while", "len", "(", "dists", ")", "<", "num_distractors", ":", "\n", "            ", "color", "=", "self", ".", "_rand_elem", "(", "COLOR_NAMES", ")", "\n", "type", "=", "self", ".", "_rand_elem", "(", "[", "'key'", ",", "'ball'", ",", "'box'", "]", ")", "\n", "obj", "=", "(", "type", ",", "color", ")", "\n", "\n", "if", "all_unique", "and", "obj", "in", "objs", ":", "\n", "                ", "continue", "\n", "\n", "# Add the object to a random room if no room specified", "\n", "", "room_i", "=", "i", "\n", "room_j", "=", "j", "\n", "if", "room_i", "==", "None", ":", "\n", "                ", "room_i", "=", "self", ".", "_rand_int", "(", "0", ",", "self", ".", "num_cols", ")", "\n", "", "if", "room_j", "==", "None", ":", "\n", "                ", "room_j", "=", "self", ".", "_rand_int", "(", "0", ",", "self", ".", "num_rows", ")", "\n", "\n", "", "dist", ",", "pos", "=", "self", ".", "add_object", "(", "room_i", ",", "room_j", ",", "*", "obj", ")", "\n", "\n", "objs", ".", "append", "(", "obj", ")", "\n", "dists", ".", "append", "(", "dist", ")", "\n", "\n", "", "return", "dists", "\n", "", "", ""]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.roomgrid.reject_next_to": [[3, 13], ["abs", "abs"], "function", ["None"], ["def", "reject_next_to", "(", "env", ",", "pos", ")", ":", "\n", "    ", "\"\"\"\n    Function to filter out object positions that are right next to\n    the agent's starting point\n    \"\"\"", "\n", "\n", "sx", ",", "sy", "=", "env", ".", "agent_pos", "\n", "x", ",", "y", "=", "pos", "\n", "d", "=", "abs", "(", "sx", "-", "x", ")", "+", "abs", "(", "sy", "-", "y", ")", "\n", "return", "d", "<", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.register.register": [[5, 22], ["id.startswith", "gym.envs.registration.register", "env_list.append"], "function", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.register.register"], ["def", "register", "(", "\n", "id", ",", "\n", "entry_point", ",", "\n", "reward_threshold", "=", "0.95", "\n", ")", ":", "\n", "    ", "assert", "id", ".", "startswith", "(", "\"MiniGrid-\"", ")", "\n", "assert", "id", "not", "in", "env_list", "\n", "\n", "# Register the environment with OpenAI gym", "\n", "gym_register", "(", "\n", "id", "=", "id", ",", "\n", "entry_point", "=", "entry_point", ",", "\n", "reward_threshold", "=", "reward_threshold", "\n", ")", "\n", "\n", "# Add the environment to the set", "\n", "env_list", ".", "append", "(", "id", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.crossing.CrossingEnv.__init__": [[12, 21], ["MiniGridEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryS7.__init__"], ["def", "__init__", "(", "self", ",", "size", "=", "9", ",", "num_crossings", "=", "1", ",", "obstacle_type", "=", "Lava", ",", "seed", "=", "None", ")", ":", "\n", "        ", "self", ".", "num_crossings", "=", "num_crossings", "\n", "self", ".", "obstacle_type", "=", "obstacle_type", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "grid_size", "=", "size", ",", "\n", "max_steps", "=", "4", "*", "size", "*", "size", ",", "\n", "# Set this to True for maximum speed", "\n", "see_through_walls", "=", "False", ",", "\n", "seed", "=", "None", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.crossing.CrossingEnv._gen_grid": [[23, 83], ["Grid", "crossing.CrossingEnv.grid.wall_rect", "crossing.CrossingEnv.put_obj", "crossing.CrossingEnv.np_random.shuffle", "sorted", "sorted", "itertools.chain", "crossing.CrossingEnv.np_random.shuffle", "Goal", "object", "object", "itertools.product", "itertools.product", "crossing.CrossingEnv.put_obj", "crossing.CrossingEnv.grid.set", "range", "range", "range", "range", "crossing.CrossingEnv.obstacle_type", "len", "len", "crossing.CrossingEnv.np_random.choice", "range", "crossing.CrossingEnv.np_random.choice", "range"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.wall_rect", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv.put_obj", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv.put_obj", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.set"], ["", "def", "_gen_grid", "(", "self", ",", "width", ",", "height", ")", ":", "\n", "        ", "assert", "width", "%", "2", "==", "1", "and", "height", "%", "2", "==", "1", "# odd size", "\n", "\n", "# Create an empty grid", "\n", "self", ".", "grid", "=", "Grid", "(", "width", ",", "height", ")", "\n", "\n", "# Generate the surrounding walls", "\n", "self", ".", "grid", ".", "wall_rect", "(", "0", ",", "0", ",", "width", ",", "height", ")", "\n", "\n", "# Place the agent in the top-left corner", "\n", "self", ".", "agent_pos", "=", "(", "1", ",", "1", ")", "\n", "self", ".", "agent_dir", "=", "0", "\n", "\n", "# Place a goal square in the bottom-right corner", "\n", "self", ".", "put_obj", "(", "Goal", "(", ")", ",", "width", "-", "2", ",", "height", "-", "2", ")", "\n", "\n", "# Place obstacles (lava or walls)", "\n", "v", ",", "h", "=", "object", "(", ")", ",", "object", "(", ")", "# singleton `vertical` and `horizontal` objects", "\n", "\n", "# Lava rivers or walls specified by direction and position in grid", "\n", "rivers", "=", "[", "(", "v", ",", "i", ")", "for", "i", "in", "range", "(", "2", ",", "height", "-", "2", ",", "2", ")", "]", "\n", "rivers", "+=", "[", "(", "h", ",", "j", ")", "for", "j", "in", "range", "(", "2", ",", "width", "-", "2", ",", "2", ")", "]", "\n", "self", ".", "np_random", ".", "shuffle", "(", "rivers", ")", "\n", "rivers", "=", "rivers", "[", ":", "self", ".", "num_crossings", "]", "# sample random rivers", "\n", "rivers_v", "=", "sorted", "(", "[", "pos", "for", "direction", ",", "pos", "in", "rivers", "if", "direction", "is", "v", "]", ")", "\n", "rivers_h", "=", "sorted", "(", "[", "pos", "for", "direction", ",", "pos", "in", "rivers", "if", "direction", "is", "h", "]", ")", "\n", "obstacle_pos", "=", "itt", ".", "chain", "(", "\n", "itt", ".", "product", "(", "range", "(", "1", ",", "width", "-", "1", ")", ",", "rivers_h", ")", ",", "\n", "itt", ".", "product", "(", "rivers_v", ",", "range", "(", "1", ",", "height", "-", "1", ")", ")", ",", "\n", ")", "\n", "for", "i", ",", "j", "in", "obstacle_pos", ":", "\n", "            ", "self", ".", "put_obj", "(", "self", ".", "obstacle_type", "(", ")", ",", "i", ",", "j", ")", "\n", "\n", "# Sample path to goal", "\n", "", "path", "=", "[", "h", "]", "*", "len", "(", "rivers_v", ")", "+", "[", "v", "]", "*", "len", "(", "rivers_h", ")", "\n", "self", ".", "np_random", ".", "shuffle", "(", "path", ")", "\n", "\n", "# Create openings", "\n", "limits_v", "=", "[", "0", "]", "+", "rivers_v", "+", "[", "height", "-", "1", "]", "\n", "limits_h", "=", "[", "0", "]", "+", "rivers_h", "+", "[", "width", "-", "1", "]", "\n", "room_i", ",", "room_j", "=", "0", ",", "0", "\n", "for", "direction", "in", "path", ":", "\n", "            ", "if", "direction", "is", "h", ":", "\n", "                ", "i", "=", "limits_v", "[", "room_i", "+", "1", "]", "\n", "j", "=", "self", ".", "np_random", ".", "choice", "(", "\n", "range", "(", "limits_h", "[", "room_j", "]", "+", "1", ",", "limits_h", "[", "room_j", "+", "1", "]", ")", ")", "\n", "room_i", "+=", "1", "\n", "", "elif", "direction", "is", "v", ":", "\n", "                ", "i", "=", "self", ".", "np_random", ".", "choice", "(", "\n", "range", "(", "limits_v", "[", "room_i", "]", "+", "1", ",", "limits_v", "[", "room_i", "+", "1", "]", ")", ")", "\n", "j", "=", "limits_h", "[", "room_j", "+", "1", "]", "\n", "room_j", "+=", "1", "\n", "", "else", ":", "\n", "                ", "assert", "False", "\n", "", "self", ".", "grid", ".", "set", "(", "i", ",", "j", ",", "None", ")", "\n", "\n", "", "self", ".", "mission", "=", "(", "\n", "\"avoid the lava and get to the green goal square\"", "\n", "if", "self", ".", "obstacle_type", "==", "Lava", "\n", "else", "\"find the opening and get to the green goal square\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.crossing.LavaCrossingEnv.__init__": [[86, 88], ["crossing.CrossingEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "size", "=", "9", ",", "num_crossings", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.crossing.LavaCrossingS9N2Env.__init__": [[90, 92], ["crossing.CrossingEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "size", "=", "9", ",", "num_crossings", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.crossing.LavaCrossingS9N3Env.__init__": [[94, 96], ["crossing.CrossingEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "size", "=", "9", ",", "num_crossings", "=", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.crossing.LavaCrossingS11N5Env.__init__": [[98, 100], ["crossing.CrossingEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "size", "=", "11", ",", "num_crossings", "=", "5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.crossing.SimpleCrossingEnv.__init__": [[122, 124], ["crossing.CrossingEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "size", "=", "9", ",", "num_crossings", "=", "1", ",", "obstacle_type", "=", "Wall", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.crossing.SimpleCrossingS9N2Env.__init__": [[126, 128], ["crossing.CrossingEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "size", "=", "9", ",", "num_crossings", "=", "2", ",", "obstacle_type", "=", "Wall", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.crossing.SimpleCrossingS9N3Env.__init__": [[130, 132], ["crossing.CrossingEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "size", "=", "9", ",", "num_crossings", "=", "3", ",", "obstacle_type", "=", "Wall", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.crossing.SimpleCrossingS11N5Env.__init__": [[134, 136], ["crossing.CrossingEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "size", "=", "11", ",", "num_crossings", "=", "5", ",", "obstacle_type", "=", "Wall", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.fourrooms.FourRoomsEnv.__init__": [[14, 18], ["MiniGridEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryS7.__init__"], ["def", "__init__", "(", "self", ",", "agent_pos", "=", "None", ",", "goal_pos", "=", "None", ")", ":", "\n", "        ", "self", ".", "_agent_default_pos", "=", "agent_pos", "\n", "self", ".", "_goal_default_pos", "=", "goal_pos", "\n", "super", "(", ")", ".", "__init__", "(", "grid_size", "=", "19", ",", "max_steps", "=", "100", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.fourrooms.FourRoomsEnv._gen_grid": [[19, 70], ["Grid", "fourrooms.FourRoomsEnv.grid.horz_wall", "fourrooms.FourRoomsEnv.grid.horz_wall", "fourrooms.FourRoomsEnv.grid.vert_wall", "fourrooms.FourRoomsEnv.grid.vert_wall", "range", "range", "fourrooms.FourRoomsEnv.grid.set", "fourrooms.FourRoomsEnv._rand_int", "fourrooms.FourRoomsEnv.place_agent", "Goal", "fourrooms.FourRoomsEnv.put_obj", "fourrooms.FourRoomsEnv.place_obj", "Goal", "fourrooms.FourRoomsEnv.grid.vert_wall", "fourrooms.FourRoomsEnv.grid.set", "fourrooms.FourRoomsEnv.grid.horz_wall", "fourrooms.FourRoomsEnv.grid.set", "fourrooms.FourRoomsEnv._rand_int", "fourrooms.FourRoomsEnv._rand_int"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.horz_wall", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.horz_wall", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.vert_wall", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.vert_wall", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_int", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.roomgrid.RoomGrid.place_agent", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv.put_obj", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv.place_obj", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.vert_wall", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.horz_wall", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_int", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_int"], ["", "def", "_gen_grid", "(", "self", ",", "width", ",", "height", ")", ":", "\n", "# Create the grid", "\n", "        ", "self", ".", "grid", "=", "Grid", "(", "width", ",", "height", ")", "\n", "\n", "# Generate the surrounding walls", "\n", "self", ".", "grid", ".", "horz_wall", "(", "0", ",", "0", ")", "\n", "self", ".", "grid", ".", "horz_wall", "(", "0", ",", "height", "-", "1", ")", "\n", "self", ".", "grid", ".", "vert_wall", "(", "0", ",", "0", ")", "\n", "self", ".", "grid", ".", "vert_wall", "(", "width", "-", "1", ",", "0", ")", "\n", "\n", "room_w", "=", "width", "//", "2", "\n", "room_h", "=", "height", "//", "2", "\n", "\n", "# For each row of rooms", "\n", "for", "j", "in", "range", "(", "0", ",", "2", ")", ":", "\n", "\n", "# For each column", "\n", "            ", "for", "i", "in", "range", "(", "0", ",", "2", ")", ":", "\n", "                ", "xL", "=", "i", "*", "room_w", "\n", "yT", "=", "j", "*", "room_h", "\n", "xR", "=", "xL", "+", "room_w", "\n", "yB", "=", "yT", "+", "room_h", "\n", "\n", "# Bottom wall and door", "\n", "if", "i", "+", "1", "<", "2", ":", "\n", "                    ", "self", ".", "grid", ".", "vert_wall", "(", "xR", ",", "yT", ",", "room_h", ")", "\n", "pos", "=", "(", "xR", ",", "self", ".", "_rand_int", "(", "yT", "+", "1", ",", "yB", ")", ")", "\n", "self", ".", "grid", ".", "set", "(", "*", "pos", ",", "None", ")", "\n", "\n", "# Bottom wall and door", "\n", "", "if", "j", "+", "1", "<", "2", ":", "\n", "                    ", "self", ".", "grid", ".", "horz_wall", "(", "xL", ",", "yB", ",", "room_w", ")", "\n", "pos", "=", "(", "self", ".", "_rand_int", "(", "xL", "+", "1", ",", "xR", ")", ",", "yB", ")", "\n", "self", ".", "grid", ".", "set", "(", "*", "pos", ",", "None", ")", "\n", "\n", "# Randomize the player start position and orientation", "\n", "", "", "", "if", "self", ".", "_agent_default_pos", "is", "not", "None", ":", "\n", "            ", "self", ".", "agent_pos", "=", "self", ".", "_agent_default_pos", "\n", "self", ".", "grid", ".", "set", "(", "*", "self", ".", "_agent_default_pos", ",", "None", ")", "\n", "self", ".", "agent_dir", "=", "self", ".", "_rand_int", "(", "0", ",", "4", ")", "# assuming random start direction", "\n", "", "else", ":", "\n", "            ", "self", ".", "place_agent", "(", ")", "\n", "\n", "", "if", "self", ".", "_goal_default_pos", "is", "not", "None", ":", "\n", "            ", "goal", "=", "Goal", "(", ")", "\n", "self", ".", "put_obj", "(", "goal", ",", "*", "self", ".", "_goal_default_pos", ")", "\n", "goal", ".", "init_pos", ",", "goal", ".", "cur_pos", "=", "self", ".", "_goal_default_pos", "\n", "", "else", ":", "\n", "            ", "self", ".", "place_obj", "(", "Goal", "(", ")", ")", "\n", "\n", "", "self", ".", "mission", "=", "'Reach the goal'", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.fourrooms.FourRoomsEnv.step": [[71, 74], ["MiniGridEnv.step"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryEnv.step"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "obs", ",", "reward", ",", "done", ",", "info", "=", "MiniGridEnv", ".", "step", "(", "self", ",", "action", ")", "\n", "return", "obs", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.blockedunlockpickup.BlockedUnlockPickup.__init__": [[11, 19], ["gym_minigrid.roomgrid.RoomGrid.__init__"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryS7.__init__"], ["def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "room_size", "=", "6", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "num_rows", "=", "1", ",", "\n", "num_cols", "=", "2", ",", "\n", "room_size", "=", "room_size", ",", "\n", "max_steps", "=", "16", "*", "room_size", "**", "2", ",", "\n", "seed", "=", "seed", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.blockedunlockpickup.BlockedUnlockPickup._gen_grid": [[21, 38], ["super()._gen_grid", "blockedunlockpickup.BlockedUnlockPickup.add_object", "blockedunlockpickup.BlockedUnlockPickup.add_door", "blockedunlockpickup.BlockedUnlockPickup._rand_color", "blockedunlockpickup.BlockedUnlockPickup.grid.set", "blockedunlockpickup.BlockedUnlockPickup.add_object", "blockedunlockpickup.BlockedUnlockPickup.place_agent", "gym_minigrid.minigrid.Ball"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryEnv._gen_grid", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.roomgrid.RoomGrid.add_object", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.obstructedmaze.ObstructedMazeEnv.add_door", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_color", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.roomgrid.RoomGrid.add_object", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.roomgrid.RoomGrid.place_agent"], ["", "def", "_gen_grid", "(", "self", ",", "width", ",", "height", ")", ":", "\n", "        ", "super", "(", ")", ".", "_gen_grid", "(", "width", ",", "height", ")", "\n", "\n", "# Add a box to the room on the right", "\n", "obj", ",", "_", "=", "self", ".", "add_object", "(", "1", ",", "0", ",", "kind", "=", "\"box\"", ")", "\n", "# Make sure the two rooms are directly connected by a locked door", "\n", "door", ",", "pos", "=", "self", ".", "add_door", "(", "0", ",", "0", ",", "0", ",", "locked", "=", "True", ")", "\n", "# Block the door with a ball", "\n", "color", "=", "self", ".", "_rand_color", "(", ")", "\n", "self", ".", "grid", ".", "set", "(", "pos", "[", "0", "]", "-", "1", ",", "pos", "[", "1", "]", ",", "Ball", "(", "color", ")", ")", "\n", "# Add a key to unlock the door", "\n", "self", ".", "add_object", "(", "0", ",", "0", ",", "'key'", ",", "door", ".", "color", ")", "\n", "\n", "self", ".", "place_agent", "(", "0", ",", "0", ")", "\n", "\n", "self", ".", "obj", "=", "obj", "\n", "self", ".", "mission", "=", "\"pick up the %s %s\"", "%", "(", "obj", ".", "color", ",", "obj", ".", "type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.blockedunlockpickup.BlockedUnlockPickup.step": [[39, 48], ["super().step", "blockedunlockpickup.BlockedUnlockPickup._reward"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryEnv.step", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv._reward"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "obs", ",", "reward", ",", "done", ",", "info", "=", "super", "(", ")", ".", "step", "(", "action", ")", "\n", "\n", "if", "action", "==", "self", ".", "actions", ".", "pickup", ":", "\n", "            ", "if", "self", ".", "carrying", "and", "self", ".", "carrying", "==", "self", ".", "obj", ":", "\n", "                ", "reward", "=", "self", ".", "_reward", "(", ")", "\n", "done", "=", "True", "\n", "\n", "", "", "return", "obs", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.distshift.DistShiftEnv.__init__": [[9, 28], ["MiniGridEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryS7.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "width", "=", "9", ",", "\n", "height", "=", "7", ",", "\n", "agent_start_pos", "=", "(", "1", ",", "1", ")", ",", "\n", "agent_start_dir", "=", "0", ",", "\n", "strip2_row", "=", "2", "\n", ")", ":", "\n", "        ", "self", ".", "agent_start_pos", "=", "agent_start_pos", "\n", "self", ".", "agent_start_dir", "=", "agent_start_dir", "\n", "self", ".", "goal_pos", "=", "(", "width", "-", "2", ",", "1", ")", "\n", "self", ".", "strip2_row", "=", "strip2_row", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "width", "=", "width", ",", "\n", "height", "=", "height", ",", "\n", "max_steps", "=", "4", "*", "width", "*", "height", ",", "\n", "# Set this to True for maximum speed", "\n", "see_through_walls", "=", "True", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.distshift.DistShiftEnv._gen_grid": [[30, 53], ["Grid", "distshift.DistShiftEnv.grid.wall_rect", "distshift.DistShiftEnv.put_obj", "range", "Goal", "distshift.DistShiftEnv.grid.set", "distshift.DistShiftEnv.grid.set", "distshift.DistShiftEnv.place_agent", "Lava", "Lava"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.wall_rect", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv.put_obj", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.roomgrid.RoomGrid.place_agent"], ["", "def", "_gen_grid", "(", "self", ",", "width", ",", "height", ")", ":", "\n", "# Create an empty grid", "\n", "        ", "self", ".", "grid", "=", "Grid", "(", "width", ",", "height", ")", "\n", "\n", "# Generate the surrounding walls", "\n", "self", ".", "grid", ".", "wall_rect", "(", "0", ",", "0", ",", "width", ",", "height", ")", "\n", "\n", "# Place a goal square in the bottom-right corner", "\n", "self", ".", "put_obj", "(", "Goal", "(", ")", ",", "*", "self", ".", "goal_pos", ")", "\n", "\n", "# Place the lava rows", "\n", "for", "i", "in", "range", "(", "self", ".", "width", "-", "6", ")", ":", "\n", "            ", "self", ".", "grid", ".", "set", "(", "3", "+", "i", ",", "1", ",", "Lava", "(", ")", ")", "\n", "self", ".", "grid", ".", "set", "(", "3", "+", "i", ",", "self", ".", "strip2_row", ",", "Lava", "(", ")", ")", "\n", "\n", "# Place the agent", "\n", "", "if", "self", ".", "agent_start_pos", "is", "not", "None", ":", "\n", "            ", "self", ".", "agent_pos", "=", "self", ".", "agent_start_pos", "\n", "self", ".", "agent_dir", "=", "self", ".", "agent_start_dir", "\n", "", "else", ":", "\n", "            ", "self", ".", "place_agent", "(", ")", "\n", "\n", "", "self", ".", "mission", "=", "\"get to the green goal square\"", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.distshift.DistShift1.__init__": [[55, 57], ["distshift.DistShiftEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "strip2_row", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.distshift.DistShift2.__init__": [[59, 61], ["distshift.DistShiftEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "strip2_row", "=", "5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.lockedroom.Room.__init__": [[6, 16], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "top", ",", "\n", "size", ",", "\n", "doorPos", "\n", ")", ":", "\n", "        ", "self", ".", "top", "=", "top", "\n", "self", ".", "size", "=", "size", "\n", "self", ".", "doorPos", "=", "doorPos", "\n", "self", ".", "color", "=", "None", "\n", "self", ".", "locked", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.lockedroom.Room.rand_pos": [[17, 23], ["env._rand_pos"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_pos"], ["", "def", "rand_pos", "(", "self", ",", "env", ")", ":", "\n", "        ", "topX", ",", "topY", "=", "self", ".", "top", "\n", "sizeX", ",", "sizeY", "=", "self", ".", "size", "\n", "return", "env", ".", "_rand_pos", "(", "\n", "topX", "+", "1", ",", "topX", "+", "sizeX", "-", "1", ",", "\n", "topY", "+", "1", ",", "topY", "+", "sizeY", "-", "1", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.lockedroom.LockedRoom.__init__": [[31, 36], ["MiniGridEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryS7.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "size", "=", "19", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "grid_size", "=", "size", ",", "max_steps", "=", "10", "*", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.lockedroom.LockedRoom._gen_grid": [[37, 116], ["Grid", "range", "range", "range", "range", "lockedroom.LockedRoom._rand_elem", "lockedroom.LockedRoom.rand_pos", "lockedroom.LockedRoom.grid.set", "set", "lockedroom.LockedRoom.rand_pos", "lockedroom.LockedRoom.grid.set", "lockedroom.LockedRoom.place_agent", "lockedroom.LockedRoom.grid.set", "lockedroom.LockedRoom.grid.set", "lockedroom.LockedRoom.grid.set", "lockedroom.LockedRoom.grid.set", "lockedroom.LockedRoom.grid.set", "lockedroom.LockedRoom.grid.set", "range", "range", "lockedroom.LockedRoom.rooms.append", "lockedroom.LockedRoom.rooms.append", "Goal", "lockedroom.LockedRoom._rand_elem", "set.remove", "lockedroom.LockedRoom._rand_elem", "Key", "Wall", "Wall", "Wall", "Wall", "Wall", "Wall", "lockedroom.LockedRoom.grid.set", "lockedroom.LockedRoom.grid.set", "lockedroom.Room", "lockedroom.Room", "sorted", "lockedroom.LockedRoom.grid.set", "lockedroom.LockedRoom.grid.set", "Wall", "Wall", "Door", "Door"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_elem", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.lockedroom.Room.rand_pos", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.lockedroom.Room.rand_pos", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.roomgrid.RoomGrid.place_agent", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_elem", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_elem", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.set"], ["", "def", "_gen_grid", "(", "self", ",", "width", ",", "height", ")", ":", "\n", "# Create the grid", "\n", "        ", "self", ".", "grid", "=", "Grid", "(", "width", ",", "height", ")", "\n", "\n", "# Generate the surrounding walls", "\n", "for", "i", "in", "range", "(", "0", ",", "width", ")", ":", "\n", "            ", "self", ".", "grid", ".", "set", "(", "i", ",", "0", ",", "Wall", "(", ")", ")", "\n", "self", ".", "grid", ".", "set", "(", "i", ",", "height", "-", "1", ",", "Wall", "(", ")", ")", "\n", "", "for", "j", "in", "range", "(", "0", ",", "height", ")", ":", "\n", "            ", "self", ".", "grid", ".", "set", "(", "0", ",", "j", ",", "Wall", "(", ")", ")", "\n", "self", ".", "grid", ".", "set", "(", "width", "-", "1", ",", "j", ",", "Wall", "(", ")", ")", "\n", "\n", "# Hallway walls", "\n", "", "lWallIdx", "=", "width", "//", "2", "-", "2", "\n", "rWallIdx", "=", "width", "//", "2", "+", "2", "\n", "for", "j", "in", "range", "(", "0", ",", "height", ")", ":", "\n", "            ", "self", ".", "grid", ".", "set", "(", "lWallIdx", ",", "j", ",", "Wall", "(", ")", ")", "\n", "self", ".", "grid", ".", "set", "(", "rWallIdx", ",", "j", ",", "Wall", "(", ")", ")", "\n", "\n", "", "self", ".", "rooms", "=", "[", "]", "\n", "\n", "# Room splitting walls", "\n", "for", "n", "in", "range", "(", "0", ",", "3", ")", ":", "\n", "            ", "j", "=", "n", "*", "(", "height", "//", "3", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "lWallIdx", ")", ":", "\n", "                ", "self", ".", "grid", ".", "set", "(", "i", ",", "j", ",", "Wall", "(", ")", ")", "\n", "", "for", "i", "in", "range", "(", "rWallIdx", ",", "width", ")", ":", "\n", "                ", "self", ".", "grid", ".", "set", "(", "i", ",", "j", ",", "Wall", "(", ")", ")", "\n", "\n", "", "roomW", "=", "lWallIdx", "+", "1", "\n", "roomH", "=", "height", "//", "3", "+", "1", "\n", "self", ".", "rooms", ".", "append", "(", "Room", "(", "\n", "(", "0", ",", "j", ")", ",", "\n", "(", "roomW", ",", "roomH", ")", ",", "\n", "(", "lWallIdx", ",", "j", "+", "3", ")", "\n", ")", ")", "\n", "self", ".", "rooms", ".", "append", "(", "Room", "(", "\n", "(", "rWallIdx", ",", "j", ")", ",", "\n", "(", "roomW", ",", "roomH", ")", ",", "\n", "(", "rWallIdx", ",", "j", "+", "3", ")", "\n", ")", ")", "\n", "\n", "# Choose one random room to be locked", "\n", "", "lockedRoom", "=", "self", ".", "_rand_elem", "(", "self", ".", "rooms", ")", "\n", "lockedRoom", ".", "locked", "=", "True", "\n", "goalPos", "=", "lockedRoom", ".", "rand_pos", "(", "self", ")", "\n", "self", ".", "grid", ".", "set", "(", "*", "goalPos", ",", "Goal", "(", ")", ")", "\n", "\n", "# Assign the door colors", "\n", "colors", "=", "set", "(", "COLOR_NAMES", ")", "\n", "for", "room", "in", "self", ".", "rooms", ":", "\n", "            ", "color", "=", "self", ".", "_rand_elem", "(", "sorted", "(", "colors", ")", ")", "\n", "colors", ".", "remove", "(", "color", ")", "\n", "room", ".", "color", "=", "color", "\n", "if", "room", ".", "locked", ":", "\n", "                ", "self", ".", "grid", ".", "set", "(", "*", "room", ".", "doorPos", ",", "Door", "(", "color", ",", "is_locked", "=", "True", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "grid", ".", "set", "(", "*", "room", ".", "doorPos", ",", "Door", "(", "color", ")", ")", "\n", "\n", "# Select a random room to contain the key", "\n", "", "", "while", "True", ":", "\n", "            ", "keyRoom", "=", "self", ".", "_rand_elem", "(", "self", ".", "rooms", ")", "\n", "if", "keyRoom", "!=", "lockedRoom", ":", "\n", "                ", "break", "\n", "", "", "keyPos", "=", "keyRoom", ".", "rand_pos", "(", "self", ")", "\n", "self", ".", "grid", ".", "set", "(", "*", "keyPos", ",", "Key", "(", "lockedRoom", ".", "color", ")", ")", "\n", "\n", "# Randomize the player start position and orientation", "\n", "self", ".", "agent_pos", "=", "self", ".", "place_agent", "(", "\n", "top", "=", "(", "lWallIdx", ",", "0", ")", ",", "\n", "size", "=", "(", "rWallIdx", "-", "lWallIdx", ",", "height", ")", "\n", ")", "\n", "\n", "# Generate the mission string", "\n", "self", ".", "mission", "=", "(", "\n", "'get the %s key from the %s room, '", "\n", "'unlock the %s door and '", "\n", "'go to the goal'", "\n", ")", "%", "(", "lockedRoom", ".", "color", ",", "keyRoom", ".", "color", ",", "lockedRoom", ".", "color", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.lockedroom.LockedRoom.step": [[117, 120], ["MiniGridEnv.step"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryEnv.step"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "obs", ",", "reward", ",", "done", ",", "info", "=", "MiniGridEnv", ".", "step", "(", "self", ",", "action", ")", "\n", "return", "obs", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.putnear.PutNearEnv.__init__": [[10, 22], ["MiniGridEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryS7.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "size", "=", "6", ",", "\n", "numObjs", "=", "2", "\n", ")", ":", "\n", "        ", "self", ".", "numObjs", "=", "numObjs", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "grid_size", "=", "size", ",", "\n", "max_steps", "=", "5", "*", "size", ",", "\n", "# Set this to True for maximum speed", "\n", "see_through_walls", "=", "True", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.putnear.PutNearEnv._gen_grid": [[24, 89], ["Grid", "putnear.PutNearEnv.grid.horz_wall", "putnear.PutNearEnv.grid.horz_wall", "putnear.PutNearEnv.grid.vert_wall", "putnear.PutNearEnv.grid.vert_wall", "putnear.PutNearEnv.place_agent", "putnear.PutNearEnv._rand_int", "len", "putnear.PutNearEnv._rand_elem", "putnear.PutNearEnv._rand_elem", "putnear.PutNearEnv.place_obj", "objs.append", "objPos.append", "len", "putnear.PutNearEnv._rand_int", "Key", "len", "Ball", "abs", "abs", "Box"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.horz_wall", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.horz_wall", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.vert_wall", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.vert_wall", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.roomgrid.RoomGrid.place_agent", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_int", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_elem", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_elem", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv.place_obj", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_int"], ["", "def", "_gen_grid", "(", "self", ",", "width", ",", "height", ")", ":", "\n", "        ", "self", ".", "grid", "=", "Grid", "(", "width", ",", "height", ")", "\n", "\n", "# Generate the surrounding walls", "\n", "self", ".", "grid", ".", "horz_wall", "(", "0", ",", "0", ")", "\n", "self", ".", "grid", ".", "horz_wall", "(", "0", ",", "height", "-", "1", ")", "\n", "self", ".", "grid", ".", "vert_wall", "(", "0", ",", "0", ")", "\n", "self", ".", "grid", ".", "vert_wall", "(", "width", "-", "1", ",", "0", ")", "\n", "\n", "# Types and colors of objects we can generate", "\n", "types", "=", "[", "'key'", ",", "'ball'", ",", "'box'", "]", "\n", "\n", "objs", "=", "[", "]", "\n", "objPos", "=", "[", "]", "\n", "\n", "def", "near_obj", "(", "env", ",", "p1", ")", ":", "\n", "            ", "for", "p2", "in", "objPos", ":", "\n", "                ", "dx", "=", "p1", "[", "0", "]", "-", "p2", "[", "0", "]", "\n", "dy", "=", "p1", "[", "1", "]", "-", "p2", "[", "1", "]", "\n", "if", "abs", "(", "dx", ")", "<=", "1", "and", "abs", "(", "dy", ")", "<=", "1", ":", "\n", "                    ", "return", "True", "\n", "", "", "return", "False", "\n", "\n", "# Until we have generated all the objects", "\n", "", "while", "len", "(", "objs", ")", "<", "self", ".", "numObjs", ":", "\n", "            ", "objType", "=", "self", ".", "_rand_elem", "(", "types", ")", "\n", "objColor", "=", "self", ".", "_rand_elem", "(", "COLOR_NAMES", ")", "\n", "\n", "# If this object already exists, try again", "\n", "if", "(", "objType", ",", "objColor", ")", "in", "objs", ":", "\n", "                ", "continue", "\n", "\n", "", "if", "objType", "==", "'key'", ":", "\n", "                ", "obj", "=", "Key", "(", "objColor", ")", "\n", "", "elif", "objType", "==", "'ball'", ":", "\n", "                ", "obj", "=", "Ball", "(", "objColor", ")", "\n", "", "elif", "objType", "==", "'box'", ":", "\n", "                ", "obj", "=", "Box", "(", "objColor", ")", "\n", "\n", "", "pos", "=", "self", ".", "place_obj", "(", "obj", ",", "reject_fn", "=", "near_obj", ")", "\n", "\n", "objs", ".", "append", "(", "(", "objType", ",", "objColor", ")", ")", "\n", "objPos", ".", "append", "(", "pos", ")", "\n", "\n", "# Randomize the agent start position and orientation", "\n", "", "self", ".", "place_agent", "(", ")", "\n", "\n", "# Choose a random object to be moved", "\n", "objIdx", "=", "self", ".", "_rand_int", "(", "0", ",", "len", "(", "objs", ")", ")", "\n", "self", ".", "move_type", ",", "self", ".", "moveColor", "=", "objs", "[", "objIdx", "]", "\n", "self", ".", "move_pos", "=", "objPos", "[", "objIdx", "]", "\n", "\n", "# Choose a target object (to put the first object next to)", "\n", "while", "True", ":", "\n", "            ", "targetIdx", "=", "self", ".", "_rand_int", "(", "0", ",", "len", "(", "objs", ")", ")", "\n", "if", "targetIdx", "!=", "objIdx", ":", "\n", "                ", "break", "\n", "", "", "self", ".", "target_type", ",", "self", ".", "target_color", "=", "objs", "[", "targetIdx", "]", "\n", "self", ".", "target_pos", "=", "objPos", "[", "targetIdx", "]", "\n", "\n", "self", ".", "mission", "=", "'put the %s %s near the %s %s'", "%", "(", "\n", "self", ".", "moveColor", ",", "\n", "self", ".", "move_type", ",", "\n", "self", ".", "target_color", ",", "\n", "self", ".", "target_type", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.putnear.PutNearEnv.step": [[91, 113], ["super().step", "putnear.PutNearEnv.grid.get", "putnear.PutNearEnv._reward", "abs", "abs"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryEnv.step", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.get", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv._reward"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "preCarrying", "=", "self", ".", "carrying", "\n", "\n", "obs", ",", "reward", ",", "done", ",", "info", "=", "super", "(", ")", ".", "step", "(", "action", ")", "\n", "\n", "u", ",", "v", "=", "self", ".", "dir_vec", "\n", "ox", ",", "oy", "=", "(", "self", ".", "agent_pos", "[", "0", "]", "+", "u", ",", "self", ".", "agent_pos", "[", "1", "]", "+", "v", ")", "\n", "tx", ",", "ty", "=", "self", ".", "target_pos", "\n", "\n", "# If we picked up the wrong object, terminate the episode", "\n", "if", "action", "==", "self", ".", "actions", ".", "pickup", "and", "self", ".", "carrying", ":", "\n", "            ", "if", "self", ".", "carrying", ".", "type", "!=", "self", ".", "move_type", "or", "self", ".", "carrying", ".", "color", "!=", "self", ".", "moveColor", ":", "\n", "                ", "done", "=", "True", "\n", "\n", "# If successfully dropping an object near the target", "\n", "", "", "if", "action", "==", "self", ".", "actions", ".", "drop", "and", "preCarrying", ":", "\n", "            ", "if", "self", ".", "grid", ".", "get", "(", "ox", ",", "oy", ")", "is", "preCarrying", ":", "\n", "                ", "if", "abs", "(", "ox", "-", "tx", ")", "<=", "1", "and", "abs", "(", "oy", "-", "ty", ")", "<=", "1", ":", "\n", "                    ", "reward", "=", "self", ".", "_reward", "(", ")", "\n", "", "", "done", "=", "True", "\n", "\n", "", "return", "obs", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.putnear.PutNear8x8N3.__init__": [[115, 117], ["putnear.PutNearEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "size", "=", "8", ",", "numObjs", "=", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.redbluedoors.RedBlueDoorEnv.__init__": [[11, 18], ["MiniGridEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryS7.__init__"], ["def", "__init__", "(", "self", ",", "size", "=", "8", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "width", "=", "2", "*", "size", ",", "\n", "height", "=", "size", ",", "\n", "max_steps", "=", "20", "*", "size", "*", "size", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.redbluedoors.RedBlueDoorEnv._gen_grid": [[20, 43], ["Grid", "redbluedoors.RedBlueDoorEnv.grid.wall_rect", "redbluedoors.RedBlueDoorEnv.grid.wall_rect", "redbluedoors.RedBlueDoorEnv.place_agent", "redbluedoors.RedBlueDoorEnv._rand_int", "Door", "redbluedoors.RedBlueDoorEnv.grid.set", "redbluedoors.RedBlueDoorEnv._rand_int", "Door", "redbluedoors.RedBlueDoorEnv.grid.set"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.wall_rect", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.wall_rect", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.roomgrid.RoomGrid.place_agent", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_int", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_int", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.set"], ["", "def", "_gen_grid", "(", "self", ",", "width", ",", "height", ")", ":", "\n", "# Create an empty grid", "\n", "        ", "self", ".", "grid", "=", "Grid", "(", "width", ",", "height", ")", "\n", "\n", "# Generate the grid walls", "\n", "self", ".", "grid", ".", "wall_rect", "(", "0", ",", "0", ",", "2", "*", "self", ".", "size", ",", "self", ".", "size", ")", "\n", "self", ".", "grid", ".", "wall_rect", "(", "self", ".", "size", "//", "2", ",", "0", ",", "self", ".", "size", ",", "self", ".", "size", ")", "\n", "\n", "# Place the agent in the top-left corner", "\n", "self", ".", "place_agent", "(", "top", "=", "(", "self", ".", "size", "//", "2", ",", "0", ")", ",", "size", "=", "(", "self", ".", "size", ",", "self", ".", "size", ")", ")", "\n", "\n", "# Add a red door at a random position in the left wall", "\n", "pos", "=", "self", ".", "_rand_int", "(", "1", ",", "self", ".", "size", "-", "1", ")", "\n", "self", ".", "red_door", "=", "Door", "(", "\"red\"", ")", "\n", "self", ".", "grid", ".", "set", "(", "self", ".", "size", "//", "2", ",", "pos", ",", "self", ".", "red_door", ")", "\n", "\n", "# Add a blue door at a random position in the right wall", "\n", "pos", "=", "self", ".", "_rand_int", "(", "1", ",", "self", ".", "size", "-", "1", ")", "\n", "self", ".", "blue_door", "=", "Door", "(", "\"blue\"", ")", "\n", "self", ".", "grid", ".", "set", "(", "self", ".", "size", "//", "2", "+", "self", ".", "size", "-", "1", ",", "pos", ",", "self", ".", "blue_door", ")", "\n", "\n", "# Generate the mission string", "\n", "self", ".", "mission", "=", "\"open the red door then the blue door\"", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.redbluedoors.RedBlueDoorEnv.step": [[44, 67], ["MiniGridEnv.step", "redbluedoors.RedBlueDoorEnv._reward"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryEnv.step", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv._reward"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "red_door_opened_before", "=", "self", ".", "red_door", ".", "is_open", "\n", "blue_door_opened_before", "=", "self", ".", "blue_door", ".", "is_open", "\n", "\n", "obs", ",", "reward", ",", "done", ",", "info", "=", "MiniGridEnv", ".", "step", "(", "self", ",", "action", ")", "\n", "\n", "red_door_opened_after", "=", "self", ".", "red_door", ".", "is_open", "\n", "blue_door_opened_after", "=", "self", ".", "blue_door", ".", "is_open", "\n", "\n", "if", "blue_door_opened_after", ":", "\n", "            ", "if", "red_door_opened_before", ":", "\n", "                ", "reward", "=", "self", ".", "_reward", "(", ")", "\n", "done", "=", "True", "\n", "", "else", ":", "\n", "                ", "reward", "=", "0", "\n", "done", "=", "True", "\n", "\n", "", "", "elif", "red_door_opened_after", ":", "\n", "            ", "if", "blue_door_opened_before", ":", "\n", "                ", "reward", "=", "0", "\n", "done", "=", "True", "\n", "\n", "", "", "return", "obs", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.redbluedoors.RedBlueDoorEnv6x6.__init__": [[69, 71], ["redbluedoors.RedBlueDoorEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "size", "=", "6", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.multiroom.Room.__init__": [[5, 15], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "top", ",", "\n", "size", ",", "\n", "entryDoorPos", ",", "\n", "exitDoorPos", "\n", ")", ":", "\n", "        ", "self", ".", "top", "=", "top", "\n", "self", ".", "size", "=", "size", "\n", "self", ".", "entryDoorPos", "=", "entryDoorPos", "\n", "self", ".", "exitDoorPos", "=", "exitDoorPos", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.multiroom.MultiRoomEnv.__init__": [[21, 39], ["MiniGridEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryS7.__init__"], ["def", "__init__", "(", "self", ",", "\n", "minNumRooms", ",", "\n", "maxNumRooms", ",", "\n", "maxRoomSize", "=", "10", "\n", ")", ":", "\n", "        ", "assert", "minNumRooms", ">", "0", "\n", "assert", "maxNumRooms", ">=", "minNumRooms", "\n", "assert", "maxRoomSize", ">=", "4", "\n", "\n", "self", ".", "minNumRooms", "=", "minNumRooms", "\n", "self", ".", "maxNumRooms", "=", "maxNumRooms", "\n", "self", ".", "maxRoomSize", "=", "maxRoomSize", "\n", "\n", "self", ".", "rooms", "=", "[", "]", "\n", "\n", "super", "(", "MultiRoomEnv", ",", "self", ")", ".", "__init__", "(", "\n", "grid_size", "=", "25", ",", "\n", "max_steps", "=", "self", ".", "maxNumRooms", "*", "20", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.multiroom.MultiRoomEnv._gen_grid": [[41, 118], ["multiroom.MultiRoomEnv._rand_int", "Grid", "Wall", "enumerate", "multiroom.MultiRoomEnv.place_agent", "multiroom.MultiRoomEnv.place_obj", "len", "multiroom.MultiRoomEnv._placeRoom", "len", "range", "range", "Goal", "multiroom.MultiRoomEnv._rand_int", "multiroom.MultiRoomEnv._rand_int", "len", "len", "multiroom.MultiRoomEnv.grid.set", "multiroom.MultiRoomEnv.grid.set", "multiroom.MultiRoomEnv.grid.set", "multiroom.MultiRoomEnv.grid.set", "set", "multiroom.MultiRoomEnv._rand_elem", "Door", "multiroom.MultiRoomEnv.grid.set", "set.remove", "sorted"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_int", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.roomgrid.RoomGrid.place_agent", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv.place_obj", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.multiroom.MultiRoomEnv._placeRoom", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_int", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_int", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_elem", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.set"], ["", "def", "_gen_grid", "(", "self", ",", "width", ",", "height", ")", ":", "\n", "        ", "roomList", "=", "[", "]", "\n", "\n", "# Choose a random number of rooms to generate", "\n", "numRooms", "=", "self", ".", "_rand_int", "(", "self", ".", "minNumRooms", ",", "self", ".", "maxNumRooms", "+", "1", ")", "\n", "\n", "while", "len", "(", "roomList", ")", "<", "numRooms", ":", "\n", "            ", "curRoomList", "=", "[", "]", "\n", "\n", "entryDoorPos", "=", "(", "\n", "self", ".", "_rand_int", "(", "0", ",", "width", "-", "2", ")", ",", "\n", "self", ".", "_rand_int", "(", "0", ",", "width", "-", "2", ")", "\n", ")", "\n", "\n", "# Recursively place the rooms", "\n", "self", ".", "_placeRoom", "(", "\n", "numRooms", ",", "\n", "roomList", "=", "curRoomList", ",", "\n", "minSz", "=", "4", ",", "\n", "maxSz", "=", "self", ".", "maxRoomSize", ",", "\n", "entryDoorWall", "=", "2", ",", "\n", "entryDoorPos", "=", "entryDoorPos", "\n", ")", "\n", "\n", "if", "len", "(", "curRoomList", ")", ">", "len", "(", "roomList", ")", ":", "\n", "                ", "roomList", "=", "curRoomList", "\n", "\n", "# Store the list of rooms in this environment", "\n", "", "", "assert", "len", "(", "roomList", ")", ">", "0", "\n", "self", ".", "rooms", "=", "roomList", "\n", "\n", "# Create the grid", "\n", "self", ".", "grid", "=", "Grid", "(", "width", ",", "height", ")", "\n", "wall", "=", "Wall", "(", ")", "\n", "\n", "prevDoorColor", "=", "None", "\n", "\n", "# For each room", "\n", "for", "idx", ",", "room", "in", "enumerate", "(", "roomList", ")", ":", "\n", "\n", "            ", "topX", ",", "topY", "=", "room", ".", "top", "\n", "sizeX", ",", "sizeY", "=", "room", ".", "size", "\n", "\n", "# Draw the top and bottom walls", "\n", "for", "i", "in", "range", "(", "0", ",", "sizeX", ")", ":", "\n", "                ", "self", ".", "grid", ".", "set", "(", "topX", "+", "i", ",", "topY", ",", "wall", ")", "\n", "self", ".", "grid", ".", "set", "(", "topX", "+", "i", ",", "topY", "+", "sizeY", "-", "1", ",", "wall", ")", "\n", "\n", "# Draw the left and right walls", "\n", "", "for", "j", "in", "range", "(", "0", ",", "sizeY", ")", ":", "\n", "                ", "self", ".", "grid", ".", "set", "(", "topX", ",", "topY", "+", "j", ",", "wall", ")", "\n", "self", ".", "grid", ".", "set", "(", "topX", "+", "sizeX", "-", "1", ",", "topY", "+", "j", ",", "wall", ")", "\n", "\n", "# If this isn't the first room, place the entry door", "\n", "", "if", "idx", ">", "0", ":", "\n", "# Pick a door color different from the previous one", "\n", "                ", "doorColors", "=", "set", "(", "COLOR_NAMES", ")", "\n", "if", "prevDoorColor", ":", "\n", "                    ", "doorColors", ".", "remove", "(", "prevDoorColor", ")", "\n", "# Note: the use of sorting here guarantees determinism,", "\n", "# This is needed because Python's set is not deterministic", "\n", "", "doorColor", "=", "self", ".", "_rand_elem", "(", "sorted", "(", "doorColors", ")", ")", "\n", "\n", "entryDoor", "=", "Door", "(", "doorColor", ")", "\n", "self", ".", "grid", ".", "set", "(", "*", "room", ".", "entryDoorPos", ",", "entryDoor", ")", "\n", "prevDoorColor", "=", "doorColor", "\n", "\n", "prevRoom", "=", "roomList", "[", "idx", "-", "1", "]", "\n", "prevRoom", ".", "exitDoorPos", "=", "room", ".", "entryDoorPos", "\n", "\n", "# Randomize the starting agent position and direction", "\n", "", "", "self", ".", "place_agent", "(", "roomList", "[", "0", "]", ".", "top", ",", "roomList", "[", "0", "]", ".", "size", ")", "\n", "\n", "# Place the final goal in the last room", "\n", "self", ".", "goal_pos", "=", "self", ".", "place_obj", "(", "Goal", "(", ")", ",", "roomList", "[", "-", "1", "]", ".", "top", ",", "roomList", "[", "-", "1", "]", ".", "size", ")", "\n", "\n", "self", ".", "mission", "=", "'traverse the rooms to get to the goal'", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.multiroom.MultiRoomEnv._placeRoom": [[119, 238], ["multiroom.MultiRoomEnv._rand_int", "multiroom.MultiRoomEnv._rand_int", "roomList.append", "range", "len", "multiroom.Room", "set", "set.remove", "multiroom.MultiRoomEnv._rand_elem", "multiroom.MultiRoomEnv._placeRoom", "multiroom.MultiRoomEnv._rand_int", "sorted", "multiroom.MultiRoomEnv._rand_int", "multiroom.MultiRoomEnv._rand_int", "multiroom.MultiRoomEnv._rand_int", "multiroom.MultiRoomEnv._rand_int", "multiroom.MultiRoomEnv._rand_int", "multiroom.MultiRoomEnv._rand_int", "multiroom.MultiRoomEnv._rand_int"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_int", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_int", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_elem", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.multiroom.MultiRoomEnv._placeRoom", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_int", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_int", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_int", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_int", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_int", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_int", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_int", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_int"], ["", "def", "_placeRoom", "(", "\n", "self", ",", "\n", "numLeft", ",", "\n", "roomList", ",", "\n", "minSz", ",", "\n", "maxSz", ",", "\n", "entryDoorWall", ",", "\n", "entryDoorPos", "\n", ")", ":", "\n", "# Choose the room size randomly", "\n", "        ", "sizeX", "=", "self", ".", "_rand_int", "(", "minSz", ",", "maxSz", "+", "1", ")", "\n", "sizeY", "=", "self", ".", "_rand_int", "(", "minSz", ",", "maxSz", "+", "1", ")", "\n", "\n", "# The first room will be at the door position", "\n", "if", "len", "(", "roomList", ")", "==", "0", ":", "\n", "            ", "topX", ",", "topY", "=", "entryDoorPos", "\n", "# Entry on the right", "\n", "", "elif", "entryDoorWall", "==", "0", ":", "\n", "            ", "topX", "=", "entryDoorPos", "[", "0", "]", "-", "sizeX", "+", "1", "\n", "y", "=", "entryDoorPos", "[", "1", "]", "\n", "topY", "=", "self", ".", "_rand_int", "(", "y", "-", "sizeY", "+", "2", ",", "y", ")", "\n", "# Entry wall on the south", "\n", "", "elif", "entryDoorWall", "==", "1", ":", "\n", "            ", "x", "=", "entryDoorPos", "[", "0", "]", "\n", "topX", "=", "self", ".", "_rand_int", "(", "x", "-", "sizeX", "+", "2", ",", "x", ")", "\n", "topY", "=", "entryDoorPos", "[", "1", "]", "-", "sizeY", "+", "1", "\n", "# Entry wall on the left", "\n", "", "elif", "entryDoorWall", "==", "2", ":", "\n", "            ", "topX", "=", "entryDoorPos", "[", "0", "]", "\n", "y", "=", "entryDoorPos", "[", "1", "]", "\n", "topY", "=", "self", ".", "_rand_int", "(", "y", "-", "sizeY", "+", "2", ",", "y", ")", "\n", "# Entry wall on the top", "\n", "", "elif", "entryDoorWall", "==", "3", ":", "\n", "            ", "x", "=", "entryDoorPos", "[", "0", "]", "\n", "topX", "=", "self", ".", "_rand_int", "(", "x", "-", "sizeX", "+", "2", ",", "x", ")", "\n", "topY", "=", "entryDoorPos", "[", "1", "]", "\n", "", "else", ":", "\n", "            ", "assert", "False", ",", "entryDoorWall", "\n", "\n", "# If the room is out of the grid, can't place a room here", "\n", "", "if", "topX", "<", "0", "or", "topY", "<", "0", ":", "\n", "            ", "return", "False", "\n", "", "if", "topX", "+", "sizeX", ">", "self", ".", "width", "or", "topY", "+", "sizeY", ">=", "self", ".", "height", ":", "\n", "            ", "return", "False", "\n", "\n", "# If the room intersects with previous rooms, can't place it here", "\n", "", "for", "room", "in", "roomList", "[", ":", "-", "1", "]", ":", "\n", "            ", "nonOverlap", "=", "topX", "+", "sizeX", "<", "room", ".", "top", "[", "0", "]", "or", "room", ".", "top", "[", "0", "]", "+", "room", ".", "size", "[", "0", "]", "<=", "topX", "or", "topY", "+", "sizeY", "<", "room", ".", "top", "[", "1", "]", "or", "room", ".", "top", "[", "1", "]", "+", "room", ".", "size", "[", "1", "]", "<=", "topY", "\n", "\n", "if", "not", "nonOverlap", ":", "\n", "                ", "return", "False", "\n", "\n", "# Add this room to the list", "\n", "", "", "roomList", ".", "append", "(", "Room", "(", "\n", "(", "topX", ",", "topY", ")", ",", "\n", "(", "sizeX", ",", "sizeY", ")", ",", "\n", "entryDoorPos", ",", "\n", "None", "\n", ")", ")", "\n", "\n", "# If this was the last room, stop", "\n", "if", "numLeft", "==", "1", ":", "\n", "            ", "return", "True", "\n", "\n", "# Try placing the next room", "\n", "", "for", "i", "in", "range", "(", "0", ",", "8", ")", ":", "\n", "\n", "# Pick which wall to place the out door on", "\n", "            ", "wallSet", "=", "set", "(", "(", "0", ",", "1", ",", "2", ",", "3", ")", ")", "\n", "wallSet", ".", "remove", "(", "entryDoorWall", ")", "\n", "exitDoorWall", "=", "self", ".", "_rand_elem", "(", "sorted", "(", "wallSet", ")", ")", "\n", "nextEntryWall", "=", "(", "exitDoorWall", "+", "2", ")", "%", "4", "\n", "\n", "# Pick the exit door position", "\n", "# Exit on right wall", "\n", "if", "exitDoorWall", "==", "0", ":", "\n", "                ", "exitDoorPos", "=", "(", "\n", "topX", "+", "sizeX", "-", "1", ",", "\n", "topY", "+", "self", ".", "_rand_int", "(", "1", ",", "sizeY", "-", "1", ")", "\n", ")", "\n", "# Exit on south wall", "\n", "", "elif", "exitDoorWall", "==", "1", ":", "\n", "                ", "exitDoorPos", "=", "(", "\n", "topX", "+", "self", ".", "_rand_int", "(", "1", ",", "sizeX", "-", "1", ")", ",", "\n", "topY", "+", "sizeY", "-", "1", "\n", ")", "\n", "# Exit on left wall", "\n", "", "elif", "exitDoorWall", "==", "2", ":", "\n", "                ", "exitDoorPos", "=", "(", "\n", "topX", ",", "\n", "topY", "+", "self", ".", "_rand_int", "(", "1", ",", "sizeY", "-", "1", ")", "\n", ")", "\n", "# Exit on north wall", "\n", "", "elif", "exitDoorWall", "==", "3", ":", "\n", "                ", "exitDoorPos", "=", "(", "\n", "topX", "+", "self", ".", "_rand_int", "(", "1", ",", "sizeX", "-", "1", ")", ",", "\n", "topY", "\n", ")", "\n", "", "else", ":", "\n", "                ", "assert", "False", "\n", "\n", "# Recursively create the other rooms", "\n", "", "success", "=", "self", ".", "_placeRoom", "(", "\n", "numLeft", "-", "1", ",", "\n", "roomList", "=", "roomList", ",", "\n", "minSz", "=", "minSz", ",", "\n", "maxSz", "=", "maxSz", ",", "\n", "entryDoorWall", "=", "nextEntryWall", ",", "\n", "entryDoorPos", "=", "exitDoorPos", "\n", ")", "\n", "\n", "if", "success", ":", "\n", "                ", "break", "\n", "\n", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.multiroom.MultiRoomEnvN2S4.__init__": [[240, 245], ["multiroom.MultiRoomEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "minNumRooms", "=", "2", ",", "\n", "maxNumRooms", "=", "2", ",", "\n", "maxRoomSize", "=", "4", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.multiroom.MultiRoomEnvN4S5.__init__": [[248, 253], ["multiroom.MultiRoomEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "minNumRooms", "=", "4", ",", "\n", "maxNumRooms", "=", "4", ",", "\n", "maxRoomSize", "=", "5", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.multiroom.MultiRoomEnvN6.__init__": [[256, 260], ["multiroom.MultiRoomEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "minNumRooms", "=", "6", ",", "\n", "maxNumRooms", "=", "6", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.gotoobject.GoToObjectEnv.__init__": [[10, 22], ["MiniGridEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryS7.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "size", "=", "6", ",", "\n", "numObjs", "=", "2", "\n", ")", ":", "\n", "        ", "self", ".", "numObjs", "=", "numObjs", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "grid_size", "=", "size", ",", "\n", "max_steps", "=", "5", "*", "size", "**", "2", ",", "\n", "# Set this to True for maximum speed", "\n", "see_through_walls", "=", "True", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.gotoobject.GoToObjectEnv._gen_grid": [[24, 66], ["Grid", "gotoobject.GoToObjectEnv.grid.wall_rect", "gotoobject.GoToObjectEnv.place_agent", "gotoobject.GoToObjectEnv._rand_int", "len", "gotoobject.GoToObjectEnv._rand_elem", "gotoobject.GoToObjectEnv._rand_elem", "gotoobject.GoToObjectEnv.place_obj", "objs.append", "objPos.append", "len", "Key", "Ball", "Box"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.wall_rect", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.roomgrid.RoomGrid.place_agent", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_int", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_elem", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_elem", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv.place_obj"], ["", "def", "_gen_grid", "(", "self", ",", "width", ",", "height", ")", ":", "\n", "        ", "self", ".", "grid", "=", "Grid", "(", "width", ",", "height", ")", "\n", "\n", "# Generate the surrounding walls", "\n", "self", ".", "grid", ".", "wall_rect", "(", "0", ",", "0", ",", "width", ",", "height", ")", "\n", "\n", "# Types and colors of objects we can generate", "\n", "types", "=", "[", "'key'", ",", "'ball'", ",", "'box'", "]", "\n", "\n", "objs", "=", "[", "]", "\n", "objPos", "=", "[", "]", "\n", "\n", "# Until we have generated all the objects", "\n", "while", "len", "(", "objs", ")", "<", "self", ".", "numObjs", ":", "\n", "            ", "objType", "=", "self", ".", "_rand_elem", "(", "types", ")", "\n", "objColor", "=", "self", ".", "_rand_elem", "(", "COLOR_NAMES", ")", "\n", "\n", "# If this object already exists, try again", "\n", "if", "(", "objType", ",", "objColor", ")", "in", "objs", ":", "\n", "                ", "continue", "\n", "\n", "", "if", "objType", "==", "'key'", ":", "\n", "                ", "obj", "=", "Key", "(", "objColor", ")", "\n", "", "elif", "objType", "==", "'ball'", ":", "\n", "                ", "obj", "=", "Ball", "(", "objColor", ")", "\n", "", "elif", "objType", "==", "'box'", ":", "\n", "                ", "obj", "=", "Box", "(", "objColor", ")", "\n", "\n", "", "pos", "=", "self", ".", "place_obj", "(", "obj", ")", "\n", "objs", ".", "append", "(", "(", "objType", ",", "objColor", ")", ")", "\n", "objPos", ".", "append", "(", "pos", ")", "\n", "\n", "# Randomize the agent start position and orientation", "\n", "", "self", ".", "place_agent", "(", ")", "\n", "\n", "# Choose a random object to be picked up", "\n", "objIdx", "=", "self", ".", "_rand_int", "(", "0", ",", "len", "(", "objs", ")", ")", "\n", "self", ".", "targetType", ",", "self", ".", "target_color", "=", "objs", "[", "objIdx", "]", "\n", "self", ".", "target_pos", "=", "objPos", "[", "objIdx", "]", "\n", "\n", "descStr", "=", "'%s %s'", "%", "(", "self", ".", "target_color", ",", "self", ".", "targetType", ")", "\n", "self", ".", "mission", "=", "'go to the %s'", "%", "descStr", "\n", "#print(self.mission)", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.gotoobject.GoToObjectEnv.step": [[68, 85], ["MiniGridEnv.step", "gotoobject.GoToObjectEnv._reward", "abs", "abs"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryEnv.step", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv._reward"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "obs", ",", "reward", ",", "done", ",", "info", "=", "MiniGridEnv", ".", "step", "(", "self", ",", "action", ")", "\n", "\n", "ax", ",", "ay", "=", "self", ".", "agent_pos", "\n", "tx", ",", "ty", "=", "self", ".", "target_pos", "\n", "\n", "# Toggle/pickup action terminates the episode", "\n", "if", "action", "==", "self", ".", "actions", ".", "toggle", ":", "\n", "            ", "done", "=", "True", "\n", "\n", "# Reward performing the done action next to the target object", "\n", "", "if", "action", "==", "self", ".", "actions", ".", "done", ":", "\n", "            ", "if", "abs", "(", "ax", "-", "tx", ")", "<=", "1", "and", "abs", "(", "ay", "-", "ty", ")", "<=", "1", ":", "\n", "                ", "reward", "=", "self", ".", "_reward", "(", ")", "\n", "", "done", "=", "True", "\n", "\n", "", "return", "obs", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.gotoobject.GotoEnv8x8N2.__init__": [[87, 89], ["gotoobject.GoToObjectEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "size", "=", "8", ",", "numObjs", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.empty.EmptyEnv.__init__": [[9, 23], ["MiniGridEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryS7.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "size", "=", "8", ",", "\n", "agent_start_pos", "=", "(", "1", ",", "1", ")", ",", "\n", "agent_start_dir", "=", "0", ",", "\n", ")", ":", "\n", "        ", "self", ".", "agent_start_pos", "=", "agent_start_pos", "\n", "self", ".", "agent_start_dir", "=", "agent_start_dir", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "grid_size", "=", "size", ",", "\n", "max_steps", "=", "4", "*", "size", "*", "size", ",", "\n", "# Set this to True for maximum speed", "\n", "see_through_walls", "=", "True", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.empty.EmptyEnv._gen_grid": [[25, 43], ["Grid", "empty.EmptyEnv.grid.wall_rect", "empty.EmptyEnv.put_obj", "Goal", "empty.EmptyEnv.place_agent"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.wall_rect", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv.put_obj", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.roomgrid.RoomGrid.place_agent"], ["", "def", "_gen_grid", "(", "self", ",", "width", ",", "height", ")", ":", "\n", "# Create an empty grid", "\n", "        ", "self", ".", "grid", "=", "Grid", "(", "width", ",", "height", ")", "\n", "\n", "# Generate the surrounding walls", "\n", "self", ".", "grid", ".", "wall_rect", "(", "0", ",", "0", ",", "width", ",", "height", ")", "\n", "\n", "# Place a goal square in the bottom-right corner", "\n", "self", ".", "put_obj", "(", "Goal", "(", ")", ",", "width", "-", "2", ",", "height", "-", "2", ")", "\n", "\n", "# Place the agent", "\n", "if", "self", ".", "agent_start_pos", "is", "not", "None", ":", "\n", "            ", "self", ".", "agent_pos", "=", "self", ".", "agent_start_pos", "\n", "self", ".", "agent_dir", "=", "self", ".", "agent_start_dir", "\n", "", "else", ":", "\n", "            ", "self", ".", "place_agent", "(", ")", "\n", "\n", "", "self", ".", "mission", "=", "\"get to the green goal square\"", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.empty.EmptyEnv5x5.__init__": [[45, 47], ["empty.EmptyEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "size", "=", "5", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.empty.EmptyRandomEnv5x5.__init__": [[49, 51], ["empty.EmptyEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "size", "=", "5", ",", "agent_start_pos", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.empty.EmptyEnv6x6.__init__": [[53, 55], ["empty.EmptyEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "size", "=", "6", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.empty.EmptyRandomEnv6x6.__init__": [[57, 59], ["empty.EmptyEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "size", "=", "6", ",", "agent_start_pos", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.empty.EmptyEnv16x16.__init__": [[61, 63], ["empty.EmptyEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "size", "=", "16", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.keycorridor.KeyCorridor.__init__": [[10, 24], ["gym_minigrid.roomgrid.RoomGrid.__init__"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryS7.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "num_rows", "=", "3", ",", "\n", "obj_type", "=", "\"ball\"", ",", "\n", "room_size", "=", "6", ",", "\n", "seed", "=", "None", "\n", ")", ":", "\n", "        ", "self", ".", "obj_type", "=", "obj_type", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "room_size", "=", "room_size", ",", "\n", "num_rows", "=", "num_rows", ",", "\n", "max_steps", "=", "30", "*", "room_size", "**", "2", ",", "\n", "seed", "=", "seed", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.keycorridor.KeyCorridor._gen_grid": [[26, 50], ["super()._gen_grid", "range", "keycorridor.KeyCorridor._rand_int", "keycorridor.KeyCorridor.add_door", "keycorridor.KeyCorridor.add_object", "keycorridor.KeyCorridor.add_object", "keycorridor.KeyCorridor.place_agent", "keycorridor.KeyCorridor.connect_all", "keycorridor.KeyCorridor.remove_wall", "keycorridor.KeyCorridor._rand_int"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryEnv._gen_grid", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_int", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.obstructedmaze.ObstructedMazeEnv.add_door", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.roomgrid.RoomGrid.add_object", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.roomgrid.RoomGrid.add_object", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.roomgrid.RoomGrid.place_agent", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.roomgrid.RoomGrid.connect_all", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.roomgrid.RoomGrid.remove_wall", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_int"], ["", "def", "_gen_grid", "(", "self", ",", "width", ",", "height", ")", ":", "\n", "        ", "super", "(", ")", ".", "_gen_grid", "(", "width", ",", "height", ")", "\n", "\n", "# Connect the middle column rooms into a hallway", "\n", "for", "j", "in", "range", "(", "1", ",", "self", ".", "num_rows", ")", ":", "\n", "            ", "self", ".", "remove_wall", "(", "1", ",", "j", ",", "3", ")", "\n", "\n", "# Add a locked door on the bottom right", "\n", "# Add an object behind the locked door", "\n", "", "room_idx", "=", "self", ".", "_rand_int", "(", "0", ",", "self", ".", "num_rows", ")", "\n", "door", ",", "_", "=", "self", ".", "add_door", "(", "2", ",", "room_idx", ",", "2", ",", "locked", "=", "True", ")", "\n", "obj", ",", "_", "=", "self", ".", "add_object", "(", "2", ",", "room_idx", ",", "kind", "=", "self", ".", "obj_type", ")", "\n", "\n", "# Add a key in a random room on the left side", "\n", "self", ".", "add_object", "(", "0", ",", "self", ".", "_rand_int", "(", "0", ",", "self", ".", "num_rows", ")", ",", "'key'", ",", "door", ".", "color", ")", "\n", "\n", "# Place the agent in the middle", "\n", "self", ".", "place_agent", "(", "1", ",", "self", ".", "num_rows", "//", "2", ")", "\n", "\n", "# Make sure all rooms are accessible", "\n", "self", ".", "connect_all", "(", ")", "\n", "\n", "self", ".", "obj", "=", "obj", "\n", "self", ".", "mission", "=", "\"pick up the %s %s\"", "%", "(", "obj", ".", "color", ",", "obj", ".", "type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.keycorridor.KeyCorridor.step": [[51, 60], ["super().step", "keycorridor.KeyCorridor._reward"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryEnv.step", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv._reward"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "obs", ",", "reward", ",", "done", ",", "info", "=", "super", "(", ")", ".", "step", "(", "action", ")", "\n", "\n", "if", "action", "==", "self", ".", "actions", ".", "pickup", ":", "\n", "            ", "if", "self", ".", "carrying", "and", "self", ".", "carrying", "==", "self", ".", "obj", ":", "\n", "                ", "reward", "=", "self", ".", "_reward", "(", ")", "\n", "done", "=", "True", "\n", "\n", "", "", "return", "obs", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.keycorridor.KeyCorridorS3R1.__init__": [[62, 67], ["keycorridor.KeyCorridor.__init__"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "room_size", "=", "3", ",", "\n", "num_rows", "=", "1", ",", "\n", "seed", "=", "seed", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.keycorridor.KeyCorridorS3R2.__init__": [[70, 75], ["keycorridor.KeyCorridor.__init__"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "room_size", "=", "3", ",", "\n", "num_rows", "=", "2", ",", "\n", "seed", "=", "seed", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.keycorridor.KeyCorridorS3R3.__init__": [[78, 83], ["keycorridor.KeyCorridor.__init__"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "room_size", "=", "3", ",", "\n", "num_rows", "=", "3", ",", "\n", "seed", "=", "seed", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.keycorridor.KeyCorridorS4R3.__init__": [[86, 91], ["keycorridor.KeyCorridor.__init__"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "room_size", "=", "4", ",", "\n", "num_rows", "=", "3", ",", "\n", "seed", "=", "seed", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.keycorridor.KeyCorridorS5R3.__init__": [[94, 99], ["keycorridor.KeyCorridor.__init__"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "room_size", "=", "5", ",", "\n", "num_rows", "=", "3", ",", "\n", "seed", "=", "seed", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.keycorridor.KeyCorridorS6R3.__init__": [[102, 107], ["keycorridor.KeyCorridor.__init__"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "room_size", "=", "6", ",", "\n", "num_rows", "=", "3", ",", "\n", "seed", "=", "seed", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.playground_v0.PlaygroundV0.__init__": [[10, 12], ["MiniGridEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryS7.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "grid_size", "=", "19", ",", "max_steps", "=", "100", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.playground_v0.PlaygroundV0._gen_grid": [[13, 68], ["Grid", "playground_v0.PlaygroundV0.grid.horz_wall", "playground_v0.PlaygroundV0.grid.horz_wall", "playground_v0.PlaygroundV0.grid.vert_wall", "playground_v0.PlaygroundV0.grid.vert_wall", "range", "playground_v0.PlaygroundV0.place_agent", "range", "range", "playground_v0.PlaygroundV0._rand_elem", "playground_v0.PlaygroundV0._rand_elem", "playground_v0.PlaygroundV0.place_obj", "Key", "playground_v0.PlaygroundV0.grid.vert_wall", "playground_v0.PlaygroundV0._rand_elem", "playground_v0.PlaygroundV0.grid.set", "playground_v0.PlaygroundV0.grid.horz_wall", "playground_v0.PlaygroundV0._rand_elem", "playground_v0.PlaygroundV0.grid.set", "Ball", "playground_v0.PlaygroundV0._rand_int", "Door", "playground_v0.PlaygroundV0._rand_int", "Door", "Box"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.horz_wall", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.horz_wall", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.vert_wall", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.vert_wall", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.roomgrid.RoomGrid.place_agent", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_elem", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_elem", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv.place_obj", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.vert_wall", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_elem", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.horz_wall", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_elem", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_int", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_int"], ["", "def", "_gen_grid", "(", "self", ",", "width", ",", "height", ")", ":", "\n", "# Create the grid", "\n", "        ", "self", ".", "grid", "=", "Grid", "(", "width", ",", "height", ")", "\n", "\n", "# Generate the surrounding walls", "\n", "self", ".", "grid", ".", "horz_wall", "(", "0", ",", "0", ")", "\n", "self", ".", "grid", ".", "horz_wall", "(", "0", ",", "height", "-", "1", ")", "\n", "self", ".", "grid", ".", "vert_wall", "(", "0", ",", "0", ")", "\n", "self", ".", "grid", ".", "vert_wall", "(", "width", "-", "1", ",", "0", ")", "\n", "\n", "roomW", "=", "width", "//", "3", "\n", "roomH", "=", "height", "//", "3", "\n", "\n", "# For each row of rooms", "\n", "for", "j", "in", "range", "(", "0", ",", "3", ")", ":", "\n", "\n", "# For each column", "\n", "            ", "for", "i", "in", "range", "(", "0", ",", "3", ")", ":", "\n", "                ", "xL", "=", "i", "*", "roomW", "\n", "yT", "=", "j", "*", "roomH", "\n", "xR", "=", "xL", "+", "roomW", "\n", "yB", "=", "yT", "+", "roomH", "\n", "\n", "# Bottom wall and door", "\n", "if", "i", "+", "1", "<", "3", ":", "\n", "                    ", "self", ".", "grid", ".", "vert_wall", "(", "xR", ",", "yT", ",", "roomH", ")", "\n", "pos", "=", "(", "xR", ",", "self", ".", "_rand_int", "(", "yT", "+", "1", ",", "yB", "-", "1", ")", ")", "\n", "color", "=", "self", ".", "_rand_elem", "(", "COLOR_NAMES", ")", "\n", "self", ".", "grid", ".", "set", "(", "*", "pos", ",", "Door", "(", "color", ")", ")", "\n", "\n", "# Bottom wall and door", "\n", "", "if", "j", "+", "1", "<", "3", ":", "\n", "                    ", "self", ".", "grid", ".", "horz_wall", "(", "xL", ",", "yB", ",", "roomW", ")", "\n", "pos", "=", "(", "self", ".", "_rand_int", "(", "xL", "+", "1", ",", "xR", "-", "1", ")", ",", "yB", ")", "\n", "color", "=", "self", ".", "_rand_elem", "(", "COLOR_NAMES", ")", "\n", "self", ".", "grid", ".", "set", "(", "*", "pos", ",", "Door", "(", "color", ")", ")", "\n", "\n", "# Randomize the player start position and orientation", "\n", "", "", "", "self", ".", "place_agent", "(", ")", "\n", "\n", "# Place random objects in the world", "\n", "types", "=", "[", "'key'", ",", "'ball'", ",", "'box'", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "12", ")", ":", "\n", "            ", "objType", "=", "self", ".", "_rand_elem", "(", "types", ")", "\n", "objColor", "=", "self", ".", "_rand_elem", "(", "COLOR_NAMES", ")", "\n", "if", "objType", "==", "'key'", ":", "\n", "                ", "obj", "=", "Key", "(", "objColor", ")", "\n", "", "elif", "objType", "==", "'ball'", ":", "\n", "                ", "obj", "=", "Ball", "(", "objColor", ")", "\n", "", "elif", "objType", "==", "'box'", ":", "\n", "                ", "obj", "=", "Box", "(", "objColor", ")", "\n", "", "self", ".", "place_obj", "(", "obj", ")", "\n", "\n", "# No explicit mission in this environment", "\n", "", "self", ".", "mission", "=", "''", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.playground_v0.PlaygroundV0.step": [[69, 72], ["MiniGridEnv.step"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryEnv.step"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "obs", ",", "reward", ",", "done", ",", "info", "=", "MiniGridEnv", ".", "step", "(", "self", ",", "action", ")", "\n", "return", "obs", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.dynamicobstacles.DynamicObstaclesEnv.__init__": [[10, 34], ["MiniGridEnv.__init__", "spaces.Discrete", "int", "int"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryS7.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "size", "=", "8", ",", "\n", "agent_start_pos", "=", "(", "1", ",", "1", ")", ",", "\n", "agent_start_dir", "=", "0", ",", "\n", "n_obstacles", "=", "4", "\n", ")", ":", "\n", "        ", "self", ".", "agent_start_pos", "=", "agent_start_pos", "\n", "self", ".", "agent_start_dir", "=", "agent_start_dir", "\n", "\n", "# Reduce obstacles if there are too many", "\n", "if", "n_obstacles", "<=", "size", "/", "2", "+", "1", ":", "\n", "            ", "self", ".", "n_obstacles", "=", "int", "(", "n_obstacles", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "n_obstacles", "=", "int", "(", "size", "/", "2", ")", "\n", "", "super", "(", ")", ".", "__init__", "(", "\n", "grid_size", "=", "size", ",", "\n", "max_steps", "=", "4", "*", "size", "*", "size", ",", "\n", "# Set this to True for maximum speed", "\n", "see_through_walls", "=", "True", ",", "\n", ")", "\n", "# Allow only 3 actions permitted: left, right, forward", "\n", "self", ".", "action_space", "=", "spaces", ".", "Discrete", "(", "self", ".", "actions", ".", "forward", "+", "1", ")", "\n", "self", ".", "reward_range", "=", "(", "-", "1", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.dynamicobstacles.DynamicObstaclesEnv._gen_grid": [[35, 59], ["Grid", "dynamicobstacles.DynamicObstaclesEnv.grid.wall_rect", "dynamicobstacles.DynamicObstaclesEnv.grid.set", "range", "Goal", "dynamicobstacles.DynamicObstaclesEnv.place_agent", "dynamicobstacles.DynamicObstaclesEnv.obstacles.append", "dynamicobstacles.DynamicObstaclesEnv.place_obj", "Ball"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.wall_rect", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.roomgrid.RoomGrid.place_agent", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv.place_obj"], ["", "def", "_gen_grid", "(", "self", ",", "width", ",", "height", ")", ":", "\n", "# Create an empty grid", "\n", "        ", "self", ".", "grid", "=", "Grid", "(", "width", ",", "height", ")", "\n", "\n", "# Generate the surrounding walls", "\n", "self", ".", "grid", ".", "wall_rect", "(", "0", ",", "0", ",", "width", ",", "height", ")", "\n", "\n", "# Place a goal square in the bottom-right corner", "\n", "self", ".", "grid", ".", "set", "(", "width", "-", "2", ",", "height", "-", "2", ",", "Goal", "(", ")", ")", "\n", "\n", "# Place the agent", "\n", "if", "self", ".", "agent_start_pos", "is", "not", "None", ":", "\n", "            ", "self", ".", "agent_pos", "=", "self", ".", "agent_start_pos", "\n", "self", ".", "agent_dir", "=", "self", ".", "agent_start_dir", "\n", "", "else", ":", "\n", "            ", "self", ".", "place_agent", "(", ")", "\n", "\n", "# Place obstacles", "\n", "", "self", ".", "obstacles", "=", "[", "]", "\n", "for", "i_obst", "in", "range", "(", "self", ".", "n_obstacles", ")", ":", "\n", "            ", "self", ".", "obstacles", ".", "append", "(", "Ball", "(", ")", ")", "\n", "self", ".", "place_obj", "(", "self", ".", "obstacles", "[", "i_obst", "]", ",", "max_tries", "=", "100", ")", "\n", "\n", "", "self", ".", "mission", "=", "\"get to the green goal square\"", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.dynamicobstacles.DynamicObstaclesEnv.step": [[60, 90], ["dynamicobstacles.DynamicObstaclesEnv.grid.get", "range", "MiniGridEnv.step", "len", "tuple", "map", "dynamicobstacles.DynamicObstaclesEnv.place_obj", "dynamicobstacles.DynamicObstaclesEnv.grid.set"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.get", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryEnv.step", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv.place_obj", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.set"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "# Invalid action", "\n", "        ", "if", "action", ">=", "self", ".", "action_space", ".", "n", ":", "\n", "            ", "action", "=", "0", "\n", "\n", "# Check if there is an obstacle in front of the agent", "\n", "", "front_cell", "=", "self", ".", "grid", ".", "get", "(", "*", "self", ".", "front_pos", ")", "\n", "not_clear", "=", "front_cell", "and", "front_cell", ".", "type", "!=", "'goal'", "\n", "\n", "# Update obstacle positions", "\n", "for", "i_obst", "in", "range", "(", "len", "(", "self", ".", "obstacles", ")", ")", ":", "\n", "            ", "old_pos", "=", "self", ".", "obstacles", "[", "i_obst", "]", ".", "cur_pos", "\n", "top", "=", "tuple", "(", "map", "(", "add", ",", "old_pos", ",", "(", "-", "1", ",", "-", "1", ")", ")", ")", "\n", "\n", "try", ":", "\n", "                ", "self", ".", "place_obj", "(", "self", ".", "obstacles", "[", "i_obst", "]", ",", "top", "=", "top", ",", "size", "=", "(", "3", ",", "3", ")", ",", "max_tries", "=", "100", ")", "\n", "self", ".", "grid", ".", "set", "(", "*", "old_pos", ",", "None", ")", "\n", "", "except", ":", "\n", "                ", "pass", "\n", "\n", "# Update the agent's position/direction", "\n", "", "", "obs", ",", "reward", ",", "done", ",", "info", "=", "MiniGridEnv", ".", "step", "(", "self", ",", "action", ")", "\n", "\n", "# If the agent tried to walk over an obstacle or wall", "\n", "if", "action", "==", "self", ".", "actions", ".", "forward", "and", "not_clear", ":", "\n", "            ", "reward", "=", "-", "1", "\n", "done", "=", "True", "\n", "return", "obs", ",", "reward", ",", "done", ",", "info", "\n", "\n", "", "return", "obs", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.dynamicobstacles.DynamicObstaclesEnv5x5.__init__": [[92, 94], ["dynamicobstacles.DynamicObstaclesEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "size", "=", "5", ",", "n_obstacles", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.dynamicobstacles.DynamicObstaclesRandomEnv5x5.__init__": [[96, 98], ["dynamicobstacles.DynamicObstaclesEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "size", "=", "5", ",", "agent_start_pos", "=", "None", ",", "n_obstacles", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.dynamicobstacles.DynamicObstaclesEnv6x6.__init__": [[100, 102], ["dynamicobstacles.DynamicObstaclesEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "size", "=", "6", ",", "n_obstacles", "=", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.dynamicobstacles.DynamicObstaclesRandomEnv6x6.__init__": [[104, 106], ["dynamicobstacles.DynamicObstaclesEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "size", "=", "6", ",", "agent_start_pos", "=", "None", ",", "n_obstacles", "=", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.dynamicobstacles.DynamicObstaclesEnv16x16.__init__": [[108, 110], ["dynamicobstacles.DynamicObstaclesEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "size", "=", "16", ",", "n_obstacles", "=", "8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.lavagap.LavaGapEnv.__init__": [[10, 18], ["MiniGridEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryS7.__init__"], ["def", "__init__", "(", "self", ",", "size", ",", "obstacle_type", "=", "Lava", ",", "seed", "=", "None", ")", ":", "\n", "        ", "self", ".", "obstacle_type", "=", "obstacle_type", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "grid_size", "=", "size", ",", "\n", "max_steps", "=", "4", "*", "size", "*", "size", ",", "\n", "# Set this to True for maximum speed", "\n", "see_through_walls", "=", "False", ",", "\n", "seed", "=", "None", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.lavagap.LavaGapEnv._gen_grid": [[20, 53], ["Grid", "lavagap.LavaGapEnv.grid.wall_rect", "np.array", "lavagap.LavaGapEnv.put_obj", "np.array", "lavagap.LavaGapEnv.grid.vert_wall", "lavagap.LavaGapEnv.grid.set", "Goal", "lavagap.LavaGapEnv._rand_int", "lavagap.LavaGapEnv._rand_int"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.wall_rect", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv.put_obj", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.vert_wall", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_int", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_int"], ["", "def", "_gen_grid", "(", "self", ",", "width", ",", "height", ")", ":", "\n", "        ", "assert", "width", ">=", "5", "and", "height", ">=", "5", "\n", "\n", "# Create an empty grid", "\n", "self", ".", "grid", "=", "Grid", "(", "width", ",", "height", ")", "\n", "\n", "# Generate the surrounding walls", "\n", "self", ".", "grid", ".", "wall_rect", "(", "0", ",", "0", ",", "width", ",", "height", ")", "\n", "\n", "# Place the agent in the top-left corner", "\n", "self", ".", "agent_pos", "=", "(", "1", ",", "1", ")", "\n", "self", ".", "agent_dir", "=", "0", "\n", "\n", "# Place a goal square in the bottom-right corner", "\n", "self", ".", "goal_pos", "=", "np", ".", "array", "(", "(", "width", "-", "2", ",", "height", "-", "2", ")", ")", "\n", "self", ".", "put_obj", "(", "Goal", "(", ")", ",", "*", "self", ".", "goal_pos", ")", "\n", "\n", "# Generate and store random gap position", "\n", "self", ".", "gap_pos", "=", "np", ".", "array", "(", "(", "\n", "self", ".", "_rand_int", "(", "2", ",", "width", "-", "2", ")", ",", "\n", "self", ".", "_rand_int", "(", "1", ",", "height", "-", "1", ")", ",", "\n", ")", ")", "\n", "\n", "# Place the obstacle wall", "\n", "self", ".", "grid", ".", "vert_wall", "(", "self", ".", "gap_pos", "[", "0", "]", ",", "1", ",", "height", "-", "2", ",", "self", ".", "obstacle_type", ")", "\n", "\n", "# Put a hole in the wall", "\n", "self", ".", "grid", ".", "set", "(", "*", "self", ".", "gap_pos", ",", "None", ")", "\n", "\n", "self", ".", "mission", "=", "(", "\n", "\"avoid the lava and get to the green goal square\"", "\n", "if", "self", ".", "obstacle_type", "==", "Lava", "\n", "else", "\"find the opening and get to the green goal square\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.lavagap.LavaGapS5Env.__init__": [[56, 58], ["lavagap.LavaGapEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "size", "=", "5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.lavagap.LavaGapS6Env.__init__": [[60, 62], ["lavagap.LavaGapEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "size", "=", "6", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.lavagap.LavaGapS7Env.__init__": [[64, 66], ["lavagap.LavaGapEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "size", "=", "7", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.fetch.FetchEnv.__init__": [[10, 22], ["MiniGridEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryS7.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "size", "=", "8", ",", "\n", "numObjs", "=", "3", "\n", ")", ":", "\n", "        ", "self", ".", "numObjs", "=", "numObjs", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "grid_size", "=", "size", ",", "\n", "max_steps", "=", "5", "*", "size", "**", "2", ",", "\n", "# Set this to True for maximum speed", "\n", "see_through_walls", "=", "True", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.fetch.FetchEnv._gen_grid": [[24, 73], ["Grid", "fetch.FetchEnv.grid.horz_wall", "fetch.FetchEnv.grid.horz_wall", "fetch.FetchEnv.grid.vert_wall", "fetch.FetchEnv.grid.vert_wall", "fetch.FetchEnv.place_agent", "fetch.FetchEnv._rand_int", "hasattr", "len", "fetch.FetchEnv._rand_elem", "fetch.FetchEnv._rand_elem", "fetch.FetchEnv.place_obj", "objs.append", "Key", "fetch.FetchEnv._rand_int", "Ball", "len"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.horz_wall", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.horz_wall", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.vert_wall", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.vert_wall", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.roomgrid.RoomGrid.place_agent", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_int", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_elem", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_elem", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv.place_obj", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_int"], ["", "def", "_gen_grid", "(", "self", ",", "width", ",", "height", ")", ":", "\n", "        ", "self", ".", "grid", "=", "Grid", "(", "width", ",", "height", ")", "\n", "\n", "# Generate the surrounding walls", "\n", "self", ".", "grid", ".", "horz_wall", "(", "0", ",", "0", ")", "\n", "self", ".", "grid", ".", "horz_wall", "(", "0", ",", "height", "-", "1", ")", "\n", "self", ".", "grid", ".", "vert_wall", "(", "0", ",", "0", ")", "\n", "self", ".", "grid", ".", "vert_wall", "(", "width", "-", "1", ",", "0", ")", "\n", "\n", "types", "=", "[", "'key'", ",", "'ball'", "]", "\n", "\n", "objs", "=", "[", "]", "\n", "\n", "# For each object to be generated", "\n", "while", "len", "(", "objs", ")", "<", "self", ".", "numObjs", ":", "\n", "            ", "objType", "=", "self", ".", "_rand_elem", "(", "types", ")", "\n", "objColor", "=", "self", ".", "_rand_elem", "(", "COLOR_NAMES", ")", "\n", "\n", "if", "objType", "==", "'key'", ":", "\n", "                ", "obj", "=", "Key", "(", "objColor", ")", "\n", "", "elif", "objType", "==", "'ball'", ":", "\n", "                ", "obj", "=", "Ball", "(", "objColor", ")", "\n", "\n", "", "self", ".", "place_obj", "(", "obj", ")", "\n", "objs", ".", "append", "(", "obj", ")", "\n", "\n", "# Randomize the player start position and orientation", "\n", "", "self", ".", "place_agent", "(", ")", "\n", "\n", "# Choose a random object to be picked up", "\n", "target", "=", "objs", "[", "self", ".", "_rand_int", "(", "0", ",", "len", "(", "objs", ")", ")", "]", "\n", "self", ".", "targetType", "=", "target", ".", "type", "\n", "self", ".", "targetColor", "=", "target", ".", "color", "\n", "\n", "descStr", "=", "'%s %s'", "%", "(", "self", ".", "targetColor", ",", "self", ".", "targetType", ")", "\n", "\n", "# Generate the mission string", "\n", "idx", "=", "self", ".", "_rand_int", "(", "0", ",", "5", ")", "\n", "if", "idx", "==", "0", ":", "\n", "            ", "self", ".", "mission", "=", "'get a %s'", "%", "descStr", "\n", "", "elif", "idx", "==", "1", ":", "\n", "            ", "self", ".", "mission", "=", "'go get a %s'", "%", "descStr", "\n", "", "elif", "idx", "==", "2", ":", "\n", "            ", "self", ".", "mission", "=", "'fetch a %s'", "%", "descStr", "\n", "", "elif", "idx", "==", "3", ":", "\n", "            ", "self", ".", "mission", "=", "'go fetch a %s'", "%", "descStr", "\n", "", "elif", "idx", "==", "4", ":", "\n", "            ", "self", ".", "mission", "=", "'you must fetch a %s'", "%", "descStr", "\n", "", "assert", "hasattr", "(", "self", ",", "'mission'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.fetch.FetchEnv.step": [[74, 87], ["MiniGridEnv.step", "fetch.FetchEnv._reward"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryEnv.step", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv._reward"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "obs", ",", "reward", ",", "done", ",", "info", "=", "MiniGridEnv", ".", "step", "(", "self", ",", "action", ")", "\n", "\n", "if", "self", ".", "carrying", ":", "\n", "            ", "if", "self", ".", "carrying", ".", "color", "==", "self", ".", "targetColor", "and", "self", ".", "carrying", ".", "type", "==", "self", ".", "targetType", ":", "\n", "                ", "reward", "=", "self", ".", "_reward", "(", ")", "\n", "done", "=", "True", "\n", "", "else", ":", "\n", "                ", "reward", "=", "0", "\n", "done", "=", "True", "\n", "\n", "", "", "return", "obs", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.fetch.FetchEnv5x5N2.__init__": [[89, 91], ["fetch.FetchEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "size", "=", "5", ",", "numObjs", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.fetch.FetchEnv6x6N2.__init__": [[93, 95], ["fetch.FetchEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "size", "=", "6", ",", "numObjs", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.unlockpickup.UnlockPickup.__init__": [[10, 18], ["gym_minigrid.roomgrid.RoomGrid.__init__"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryS7.__init__"], ["def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "room_size", "=", "6", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "num_rows", "=", "1", ",", "\n", "num_cols", "=", "2", ",", "\n", "room_size", "=", "room_size", ",", "\n", "max_steps", "=", "8", "*", "room_size", "**", "2", ",", "\n", "seed", "=", "seed", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.unlockpickup.UnlockPickup._gen_grid": [[20, 34], ["super()._gen_grid", "unlockpickup.UnlockPickup.add_object", "unlockpickup.UnlockPickup.add_door", "unlockpickup.UnlockPickup.add_object", "unlockpickup.UnlockPickup.place_agent"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryEnv._gen_grid", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.roomgrid.RoomGrid.add_object", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.obstructedmaze.ObstructedMazeEnv.add_door", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.roomgrid.RoomGrid.add_object", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.roomgrid.RoomGrid.place_agent"], ["", "def", "_gen_grid", "(", "self", ",", "width", ",", "height", ")", ":", "\n", "        ", "super", "(", ")", ".", "_gen_grid", "(", "width", ",", "height", ")", "\n", "\n", "# Add a box to the room on the right", "\n", "obj", ",", "_", "=", "self", ".", "add_object", "(", "1", ",", "0", ",", "kind", "=", "\"box\"", ")", "\n", "# Make sure the two rooms are directly connected by a locked door", "\n", "door", ",", "_", "=", "self", ".", "add_door", "(", "0", ",", "0", ",", "0", ",", "locked", "=", "True", ")", "\n", "# Add a key to unlock the door", "\n", "self", ".", "add_object", "(", "0", ",", "0", ",", "'key'", ",", "door", ".", "color", ")", "\n", "\n", "self", ".", "place_agent", "(", "0", ",", "0", ")", "\n", "\n", "self", ".", "obj", "=", "obj", "\n", "self", ".", "mission", "=", "\"pick up the %s %s\"", "%", "(", "obj", ".", "color", ",", "obj", ".", "type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.unlockpickup.UnlockPickup.step": [[35, 44], ["super().step", "unlockpickup.UnlockPickup._reward"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryEnv.step", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv._reward"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "obs", ",", "reward", ",", "done", ",", "info", "=", "super", "(", ")", ".", "step", "(", "action", ")", "\n", "\n", "if", "action", "==", "self", ".", "actions", ".", "pickup", ":", "\n", "            ", "if", "self", ".", "carrying", "and", "self", ".", "carrying", "==", "self", ".", "obj", ":", "\n", "                ", "reward", "=", "self", ".", "_reward", "(", ")", "\n", "done", "=", "True", "\n", "\n", "", "", "return", "obs", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.obstructedmaze.ObstructedMazeEnv.__init__": [[11, 26], ["gym_minigrid.roomgrid.RoomGrid.__init__"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryS7.__init__"], ["def", "__init__", "(", "self", ",", "\n", "num_rows", ",", "\n", "num_cols", ",", "\n", "num_rooms_visited", ",", "\n", "seed", "=", "None", "\n", ")", ":", "\n", "        ", "room_size", "=", "6", "\n", "max_steps", "=", "4", "*", "num_rooms_visited", "*", "room_size", "**", "2", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "room_size", "=", "room_size", ",", "\n", "num_rows", "=", "num_rows", ",", "\n", "num_cols", "=", "num_cols", ",", "\n", "max_steps", "=", "max_steps", ",", "\n", "seed", "=", "seed", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.obstructedmaze.ObstructedMazeEnv._gen_grid": [[28, 41], ["super()._gen_grid", "obstructedmaze.ObstructedMazeEnv._rand_subset", "len"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryEnv._gen_grid", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_subset"], ["", "def", "_gen_grid", "(", "self", ",", "width", ",", "height", ")", ":", "\n", "        ", "super", "(", ")", ".", "_gen_grid", "(", "width", ",", "height", ")", "\n", "\n", "# Define all possible colors for doors", "\n", "self", ".", "door_colors", "=", "self", ".", "_rand_subset", "(", "COLOR_NAMES", ",", "len", "(", "COLOR_NAMES", ")", ")", "\n", "# Define the color of the ball to pick up", "\n", "self", ".", "ball_to_find_color", "=", "COLOR_NAMES", "[", "0", "]", "\n", "# Define the color of the balls that obstruct doors", "\n", "self", ".", "blocking_ball_color", "=", "COLOR_NAMES", "[", "1", "]", "\n", "# Define the color of boxes in which keys are hidden", "\n", "self", ".", "box_color", "=", "COLOR_NAMES", "[", "2", "]", "\n", "\n", "self", ".", "mission", "=", "\"pick up the %s ball\"", "%", "self", ".", "ball_to_find_color", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.obstructedmaze.ObstructedMazeEnv.step": [[42, 51], ["super().step", "obstructedmaze.ObstructedMazeEnv._reward"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryEnv.step", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv._reward"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "obs", ",", "reward", ",", "done", ",", "info", "=", "super", "(", ")", ".", "step", "(", "action", ")", "\n", "\n", "if", "action", "==", "self", ".", "actions", ".", "pickup", ":", "\n", "            ", "if", "self", ".", "carrying", "and", "self", ".", "carrying", "==", "self", ".", "obj", ":", "\n", "                ", "reward", "=", "self", ".", "_reward", "(", ")", "\n", "done", "=", "True", "\n", "\n", "", "", "return", "obs", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.obstructedmaze.ObstructedMazeEnv.add_door": [[52, 75], ["super().add_door", "obstructedmaze.ObstructedMazeEnv.grid.set", "Key", "obstructedmaze.ObstructedMazeEnv.place_in_room", "Ball", "Box"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.obstructedmaze.ObstructedMazeEnv.add_door", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.roomgrid.RoomGrid.place_in_room"], ["", "def", "add_door", "(", "self", ",", "i", ",", "j", ",", "door_idx", "=", "0", ",", "color", "=", "None", ",", "locked", "=", "False", ",", "key_in_box", "=", "False", ",", "blocked", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Add a door. If the door must be locked, it also adds the key.\n        If the key must be hidden, it is put in a box. If the door must\n        be obstructed, it adds a ball in front of the door.\n        \"\"\"", "\n", "\n", "door", ",", "door_pos", "=", "super", "(", ")", ".", "add_door", "(", "i", ",", "j", ",", "door_idx", ",", "color", ",", "locked", "=", "locked", ")", "\n", "\n", "if", "blocked", ":", "\n", "            ", "vec", "=", "DIR_TO_VEC", "[", "door_idx", "]", "\n", "blocking_ball", "=", "Ball", "(", "self", ".", "blocking_ball_color", ")", "if", "blocked", "else", "None", "\n", "self", ".", "grid", ".", "set", "(", "door_pos", "[", "0", "]", "-", "vec", "[", "0", "]", ",", "door_pos", "[", "1", "]", "-", "vec", "[", "1", "]", ",", "blocking_ball", ")", "\n", "\n", "", "if", "locked", ":", "\n", "            ", "obj", "=", "Key", "(", "door", ".", "color", ")", "\n", "if", "key_in_box", ":", "\n", "                ", "box", "=", "Box", "(", "self", ".", "box_color", ")", "if", "key_in_box", "else", "None", "\n", "box", ".", "contains", "=", "obj", "\n", "obj", "=", "box", "\n", "", "self", ".", "place_in_room", "(", "i", ",", "j", ",", "obj", ")", "\n", "\n", "", "return", "door", ",", "door_pos", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.obstructedmaze.ObstructedMaze_1Dlhb.__init__": [[82, 91], ["obstructedmaze.ObstructedMazeEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryS7.__init__"], ["def", "__init__", "(", "self", ",", "key_in_box", "=", "True", ",", "blocked", "=", "True", ",", "seed", "=", "None", ")", ":", "\n", "        ", "self", ".", "key_in_box", "=", "key_in_box", "\n", "self", ".", "blocked", "=", "blocked", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "num_rows", "=", "1", ",", "\n", "num_cols", "=", "2", ",", "\n", "num_rooms_visited", "=", "2", ",", "\n", "seed", "=", "seed", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.obstructedmaze.ObstructedMaze_1Dlhb._gen_grid": [[93, 103], ["obstructedmaze.ObstructedMazeEnv._gen_grid", "obstructedmaze.ObstructedMaze_1Dlhb.add_door", "obstructedmaze.ObstructedMaze_1Dlhb.add_object", "obstructedmaze.ObstructedMaze_1Dlhb.place_agent"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryEnv._gen_grid", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.obstructedmaze.ObstructedMazeEnv.add_door", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.roomgrid.RoomGrid.add_object", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.roomgrid.RoomGrid.place_agent"], ["", "def", "_gen_grid", "(", "self", ",", "width", ",", "height", ")", ":", "\n", "        ", "super", "(", ")", ".", "_gen_grid", "(", "width", ",", "height", ")", "\n", "\n", "self", ".", "add_door", "(", "0", ",", "0", ",", "door_idx", "=", "0", ",", "color", "=", "self", ".", "door_colors", "[", "0", "]", ",", "\n", "locked", "=", "True", ",", "\n", "key_in_box", "=", "self", ".", "key_in_box", ",", "\n", "blocked", "=", "self", ".", "blocked", ")", "\n", "\n", "self", ".", "obj", ",", "_", "=", "self", ".", "add_object", "(", "1", ",", "0", ",", "\"ball\"", ",", "color", "=", "self", ".", "ball_to_find_color", ")", "\n", "self", ".", "place_agent", "(", "0", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.obstructedmaze.ObstructedMaze_1Dl.__init__": [[105, 107], ["obstructedmaze.ObstructedMaze_1Dlhb.__init__"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "False", ",", "False", ",", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.obstructedmaze.ObstructedMaze_1Dlh.__init__": [[109, 111], ["obstructedmaze.ObstructedMaze_1Dlhb.__init__"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "True", ",", "False", ",", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.obstructedmaze.ObstructedMaze_Full.__init__": [[119, 131], ["obstructedmaze.ObstructedMazeEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryS7.__init__"], ["def", "__init__", "(", "self", ",", "agent_room", "=", "(", "1", ",", "1", ")", ",", "key_in_box", "=", "True", ",", "blocked", "=", "True", ",", "\n", "num_quarters", "=", "4", ",", "num_rooms_visited", "=", "25", ",", "seed", "=", "None", ")", ":", "\n", "        ", "self", ".", "agent_room", "=", "agent_room", "\n", "self", ".", "key_in_box", "=", "key_in_box", "\n", "self", ".", "blocked", "=", "blocked", "\n", "self", ".", "num_quarters", "=", "num_quarters", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "num_rows", "=", "3", ",", "\n", "num_cols", "=", "3", ",", "\n", "num_rooms_visited", "=", "num_rooms_visited", ",", "\n", "seed", "=", "seed", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.obstructedmaze.ObstructedMaze_Full._gen_grid": [[133, 159], ["obstructedmaze.ObstructedMazeEnv._gen_grid", "range", "obstructedmaze.ObstructedMaze_Full._rand_elem", "obstructedmaze.ObstructedMaze_Full.add_object", "obstructedmaze.ObstructedMaze_Full.place_agent", "len", "obstructedmaze.ObstructedMaze_Full.add_door", "obstructedmaze.ObstructedMaze_Full.add_door", "len"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryEnv._gen_grid", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_elem", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.roomgrid.RoomGrid.add_object", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.roomgrid.RoomGrid.place_agent", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.obstructedmaze.ObstructedMazeEnv.add_door", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.obstructedmaze.ObstructedMazeEnv.add_door"], ["", "def", "_gen_grid", "(", "self", ",", "width", ",", "height", ")", ":", "\n", "        ", "super", "(", ")", ".", "_gen_grid", "(", "width", ",", "height", ")", "\n", "\n", "middle_room", "=", "(", "1", ",", "1", ")", "\n", "# Define positions of \"side rooms\" i.e. rooms that are neither", "\n", "# corners nor the center.", "\n", "side_rooms", "=", "[", "(", "2", ",", "1", ")", ",", "(", "1", ",", "2", ")", ",", "(", "0", ",", "1", ")", ",", "(", "1", ",", "0", ")", "]", "[", ":", "self", ".", "num_quarters", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "side_rooms", ")", ")", ":", "\n", "            ", "side_room", "=", "side_rooms", "[", "i", "]", "\n", "\n", "# Add a door between the center room and the side room", "\n", "self", ".", "add_door", "(", "*", "middle_room", ",", "door_idx", "=", "i", ",", "color", "=", "self", ".", "door_colors", "[", "i", "]", ",", "locked", "=", "False", ")", "\n", "\n", "for", "k", "in", "[", "-", "1", ",", "1", "]", ":", "\n", "# Add a door to each side of the side room", "\n", "                ", "self", ".", "add_door", "(", "*", "side_room", ",", "locked", "=", "True", ",", "\n", "door_idx", "=", "(", "i", "+", "k", ")", "%", "4", ",", "\n", "color", "=", "self", ".", "door_colors", "[", "(", "i", "+", "k", ")", "%", "len", "(", "self", ".", "door_colors", ")", "]", ",", "\n", "key_in_box", "=", "self", ".", "key_in_box", ",", "\n", "blocked", "=", "self", ".", "blocked", ")", "\n", "\n", "", "", "corners", "=", "[", "(", "2", ",", "0", ")", ",", "(", "2", ",", "2", ")", ",", "(", "0", ",", "2", ")", ",", "(", "0", ",", "0", ")", "]", "[", ":", "self", ".", "num_quarters", "]", "\n", "ball_room", "=", "self", ".", "_rand_elem", "(", "corners", ")", "\n", "\n", "self", ".", "obj", ",", "_", "=", "self", ".", "add_object", "(", "*", "ball_room", ",", "\"ball\"", ",", "color", "=", "self", ".", "ball_to_find_color", ")", "\n", "self", ".", "place_agent", "(", "*", "self", ".", "agent_room", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.obstructedmaze.ObstructedMaze_2Dl.__init__": [[161, 163], ["obstructedmaze.ObstructedMaze_Full.__init__"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "(", "2", ",", "1", ")", ",", "False", ",", "False", ",", "1", ",", "4", ",", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.obstructedmaze.ObstructedMaze_2Dlh.__init__": [[165, 167], ["obstructedmaze.ObstructedMaze_Full.__init__"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "(", "2", ",", "1", ")", ",", "True", ",", "False", ",", "1", ",", "4", ",", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.obstructedmaze.ObstructedMaze_2Dlhb.__init__": [[170, 172], ["obstructedmaze.ObstructedMaze_Full.__init__"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "(", "2", ",", "1", ")", ",", "True", ",", "True", ",", "1", ",", "4", ",", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.obstructedmaze.ObstructedMaze_1Q.__init__": [[174, 176], ["obstructedmaze.ObstructedMaze_Full.__init__"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "(", "1", ",", "1", ")", ",", "True", ",", "True", ",", "1", ",", "5", ",", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.obstructedmaze.ObstructedMaze_2Q.__init__": [[178, 180], ["obstructedmaze.ObstructedMaze_Full.__init__"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "(", "1", ",", "1", ")", ",", "True", ",", "True", ",", "2", ",", "11", ",", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.doorkey.DoorKeyEnv.__init__": [[9, 13], ["MiniGridEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryS7.__init__"], ["def", "__init__", "(", "self", ",", "size", "=", "8", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "grid_size", "=", "size", ",", "\n", "max_steps", "=", "10", "*", "size", "*", "size", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.doorkey.DoorKeyEnv._gen_grid": [[15, 45], ["Grid", "doorkey.DoorKeyEnv.grid.wall_rect", "doorkey.DoorKeyEnv.put_obj", "doorkey.DoorKeyEnv._rand_int", "doorkey.DoorKeyEnv.grid.vert_wall", "doorkey.DoorKeyEnv.place_agent", "doorkey.DoorKeyEnv._rand_int", "doorkey.DoorKeyEnv.put_obj", "doorkey.DoorKeyEnv.place_obj", "Goal", "Door", "Key"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.wall_rect", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv.put_obj", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_int", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.vert_wall", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.roomgrid.RoomGrid.place_agent", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_int", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv.put_obj", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv.place_obj"], ["", "def", "_gen_grid", "(", "self", ",", "width", ",", "height", ")", ":", "\n", "# Create an empty grid", "\n", "        ", "self", ".", "grid", "=", "Grid", "(", "width", ",", "height", ")", "\n", "\n", "# Generate the surrounding walls", "\n", "self", ".", "grid", ".", "wall_rect", "(", "0", ",", "0", ",", "width", ",", "height", ")", "\n", "\n", "# Place a goal in the bottom-right corner", "\n", "self", ".", "put_obj", "(", "Goal", "(", ")", ",", "width", "-", "2", ",", "height", "-", "2", ")", "\n", "\n", "# Create a vertical splitting wall", "\n", "splitIdx", "=", "self", ".", "_rand_int", "(", "2", ",", "width", "-", "2", ")", "\n", "self", ".", "grid", ".", "vert_wall", "(", "splitIdx", ",", "0", ")", "\n", "\n", "# Place the agent at a random position and orientation", "\n", "# on the left side of the splitting wall", "\n", "self", ".", "place_agent", "(", "size", "=", "(", "splitIdx", ",", "height", ")", ")", "\n", "\n", "# Place a door in the wall", "\n", "doorIdx", "=", "self", ".", "_rand_int", "(", "1", ",", "width", "-", "2", ")", "\n", "self", ".", "put_obj", "(", "Door", "(", "'yellow'", ",", "is_locked", "=", "True", ")", ",", "splitIdx", ",", "doorIdx", ")", "\n", "\n", "# Place a yellow key on the left side", "\n", "self", ".", "place_obj", "(", "\n", "obj", "=", "Key", "(", "'yellow'", ")", ",", "\n", "top", "=", "(", "0", ",", "0", ")", ",", "\n", "size", "=", "(", "splitIdx", ",", "height", ")", "\n", ")", "\n", "\n", "self", ".", "mission", "=", "\"use the key to open the door and then get to the goal\"", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.doorkey.DoorKeyEnv5x5.__init__": [[47, 49], ["doorkey.DoorKeyEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "size", "=", "5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.doorkey.DoorKeyEnv6x6.__init__": [[51, 53], ["doorkey.DoorKeyEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "size", "=", "6", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.doorkey.DoorKeyEnv16x16.__init__": [[55, 57], ["doorkey.DoorKeyEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "size", "=", "16", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.unlock.Unlock.__init__": [[10, 18], ["gym_minigrid.roomgrid.RoomGrid.__init__"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryS7.__init__"], ["def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "room_size", "=", "6", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "num_rows", "=", "1", ",", "\n", "num_cols", "=", "2", ",", "\n", "room_size", "=", "room_size", ",", "\n", "max_steps", "=", "8", "*", "room_size", "**", "2", ",", "\n", "seed", "=", "seed", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.unlock.Unlock._gen_grid": [[20, 32], ["super()._gen_grid", "unlock.Unlock.add_door", "unlock.Unlock.add_object", "unlock.Unlock.place_agent"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryEnv._gen_grid", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.obstructedmaze.ObstructedMazeEnv.add_door", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.roomgrid.RoomGrid.add_object", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.roomgrid.RoomGrid.place_agent"], ["", "def", "_gen_grid", "(", "self", ",", "width", ",", "height", ")", ":", "\n", "        ", "super", "(", ")", ".", "_gen_grid", "(", "width", ",", "height", ")", "\n", "\n", "# Make sure the two rooms are directly connected by a locked door", "\n", "door", ",", "_", "=", "self", ".", "add_door", "(", "0", ",", "0", ",", "0", ",", "locked", "=", "True", ")", "\n", "# Add a key to unlock the door", "\n", "self", ".", "add_object", "(", "0", ",", "0", ",", "'key'", ",", "door", ".", "color", ")", "\n", "\n", "self", ".", "place_agent", "(", "0", ",", "0", ")", "\n", "\n", "self", ".", "door", "=", "door", "\n", "self", ".", "mission", "=", "\"open the door\"", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.unlock.Unlock.step": [[33, 42], ["super().step", "unlock.Unlock._reward"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryEnv.step", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv._reward"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "obs", ",", "reward", ",", "done", ",", "info", "=", "super", "(", ")", ".", "step", "(", "action", ")", "\n", "\n", "if", "action", "==", "self", ".", "actions", ".", "toggle", ":", "\n", "            ", "if", "self", ".", "door", ".", "is_open", ":", "\n", "                ", "reward", "=", "self", ".", "_reward", "(", ")", "\n", "done", "=", "True", "\n", "\n", "", "", "return", "obs", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.gotodoor.GoToDoorEnv.__init__": [[10, 21], ["MiniGridEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryS7.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "size", "=", "5", "\n", ")", ":", "\n", "        ", "assert", "size", ">=", "5", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "grid_size", "=", "size", ",", "\n", "max_steps", "=", "5", "*", "size", "**", "2", ",", "\n", "# Set this to True for maximum speed", "\n", "see_through_walls", "=", "True", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.gotodoor.GoToDoorEnv._gen_grid": [[23, 64], ["Grid", "gotodoor.GoToDoorEnv._rand_int", "gotodoor.GoToDoorEnv._rand_int", "gotodoor.GoToDoorEnv.grid.wall_rect", "doorPos.append", "doorPos.append", "doorPos.append", "doorPos.append", "enumerate", "gotodoor.GoToDoorEnv.place_agent", "gotodoor.GoToDoorEnv._rand_int", "len", "len", "gotodoor.GoToDoorEnv._rand_elem", "doorColors.append", "gotodoor.GoToDoorEnv.grid.set", "len", "gotodoor.GoToDoorEnv._rand_int", "gotodoor.GoToDoorEnv._rand_int", "gotodoor.GoToDoorEnv._rand_int", "gotodoor.GoToDoorEnv._rand_int", "Door"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_int", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_int", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.wall_rect", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.roomgrid.RoomGrid.place_agent", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_int", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_elem", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_int", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_int", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_int", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_int"], ["", "def", "_gen_grid", "(", "self", ",", "width", ",", "height", ")", ":", "\n", "# Create the grid", "\n", "        ", "self", ".", "grid", "=", "Grid", "(", "width", ",", "height", ")", "\n", "\n", "# Randomly vary the room width and height", "\n", "width", "=", "self", ".", "_rand_int", "(", "5", ",", "width", "+", "1", ")", "\n", "height", "=", "self", ".", "_rand_int", "(", "5", ",", "height", "+", "1", ")", "\n", "\n", "# Generate the surrounding walls", "\n", "self", ".", "grid", ".", "wall_rect", "(", "0", ",", "0", ",", "width", ",", "height", ")", "\n", "\n", "# Generate the 4 doors at random positions", "\n", "doorPos", "=", "[", "]", "\n", "doorPos", ".", "append", "(", "(", "self", ".", "_rand_int", "(", "2", ",", "width", "-", "2", ")", ",", "0", ")", ")", "\n", "doorPos", ".", "append", "(", "(", "self", ".", "_rand_int", "(", "2", ",", "width", "-", "2", ")", ",", "height", "-", "1", ")", ")", "\n", "doorPos", ".", "append", "(", "(", "0", ",", "self", ".", "_rand_int", "(", "2", ",", "height", "-", "2", ")", ")", ")", "\n", "doorPos", ".", "append", "(", "(", "width", "-", "1", ",", "self", ".", "_rand_int", "(", "2", ",", "height", "-", "2", ")", ")", ")", "\n", "\n", "# Generate the door colors", "\n", "doorColors", "=", "[", "]", "\n", "while", "len", "(", "doorColors", ")", "<", "len", "(", "doorPos", ")", ":", "\n", "            ", "color", "=", "self", ".", "_rand_elem", "(", "COLOR_NAMES", ")", "\n", "if", "color", "in", "doorColors", ":", "\n", "                ", "continue", "\n", "", "doorColors", ".", "append", "(", "color", ")", "\n", "\n", "# Place the doors in the grid", "\n", "", "for", "idx", ",", "pos", "in", "enumerate", "(", "doorPos", ")", ":", "\n", "            ", "color", "=", "doorColors", "[", "idx", "]", "\n", "self", ".", "grid", ".", "set", "(", "*", "pos", ",", "Door", "(", "color", ")", ")", "\n", "\n", "# Randomize the agent start position and orientation", "\n", "", "self", ".", "place_agent", "(", "size", "=", "(", "width", ",", "height", ")", ")", "\n", "\n", "# Select a random target door", "\n", "doorIdx", "=", "self", ".", "_rand_int", "(", "0", ",", "len", "(", "doorPos", ")", ")", "\n", "self", ".", "target_pos", "=", "doorPos", "[", "doorIdx", "]", "\n", "self", ".", "target_color", "=", "doorColors", "[", "doorIdx", "]", "\n", "\n", "# Generate the mission string", "\n", "self", ".", "mission", "=", "'go to the %s door'", "%", "self", ".", "target_color", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.gotodoor.GoToDoorEnv.step": [[65, 82], ["super().step", "gotodoor.GoToDoorEnv._reward", "abs", "abs"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryEnv.step", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv._reward"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "obs", ",", "reward", ",", "done", ",", "info", "=", "super", "(", ")", ".", "step", "(", "action", ")", "\n", "\n", "ax", ",", "ay", "=", "self", ".", "agent_pos", "\n", "tx", ",", "ty", "=", "self", ".", "target_pos", "\n", "\n", "# Don't let the agent open any of the doors", "\n", "if", "action", "==", "self", ".", "actions", ".", "toggle", ":", "\n", "            ", "done", "=", "True", "\n", "\n", "# Reward performing done action in front of the target door", "\n", "", "if", "action", "==", "self", ".", "actions", ".", "done", ":", "\n", "            ", "if", "(", "ax", "==", "tx", "and", "abs", "(", "ay", "-", "ty", ")", "==", "1", ")", "or", "(", "ay", "==", "ty", "and", "abs", "(", "ax", "-", "tx", ")", "==", "1", ")", ":", "\n", "                ", "reward", "=", "self", ".", "_reward", "(", ")", "\n", "", "done", "=", "True", "\n", "\n", "", "return", "obs", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.gotodoor.GoToDoor8x8Env.__init__": [[84, 86], ["gotodoor.GoToDoorEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "size", "=", "8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.gotodoor.GoToDoor6x6Env.__init__": [[88, 90], ["gotodoor.GoToDoorEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "size", "=", "6", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryEnv.__init__": [[14, 27], ["MiniGridEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryS7.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "seed", ",", "\n", "size", "=", "8", ",", "\n", "random_length", "=", "False", ",", "\n", ")", ":", "\n", "        ", "self", ".", "random_length", "=", "random_length", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "seed", "=", "seed", ",", "\n", "grid_size", "=", "size", ",", "\n", "max_steps", "=", "5", "*", "size", "**", "2", ",", "\n", "# Set this to True for maximum speed", "\n", "see_through_walls", "=", "False", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryEnv._gen_grid": [[29, 87], ["Grid", "memory.MemoryEnv.grid.horz_wall", "memory.MemoryEnv.grid.horz_wall", "memory.MemoryEnv.grid.vert_wall", "memory.MemoryEnv.grid.vert_wall", "range", "memory.MemoryEnv.grid.set", "memory.MemoryEnv.grid.set", "range", "range", "memory.MemoryEnv._rand_elem", "memory.MemoryEnv.grid.set", "memory.MemoryEnv._rand_elem", "memory.MemoryEnv.grid.set", "memory.MemoryEnv.grid.set", "memory.MemoryEnv._rand_int", "memory.MemoryEnv.grid.set", "memory.MemoryEnv.grid.set", "Wall", "Wall", "memory.MemoryEnv.grid.set", "memory.MemoryEnv.grid.set", "memory.MemoryEnv.grid.set", "memory.MemoryEnv._rand_int", "memory.MemoryEnv.", "Wall", "Wall", "Wall", "Wall", "memory.MemoryEnv.grid.set", "Wall", "Wall"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.horz_wall", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.horz_wall", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.vert_wall", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.vert_wall", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_elem", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_elem", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_int", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_int", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.Grid.set"], ["", "def", "_gen_grid", "(", "self", ",", "width", ",", "height", ")", ":", "\n", "        ", "self", ".", "grid", "=", "Grid", "(", "width", ",", "height", ")", "\n", "\n", "# Generate the surrounding walls", "\n", "self", ".", "grid", ".", "horz_wall", "(", "0", ",", "0", ")", "\n", "self", ".", "grid", ".", "horz_wall", "(", "0", ",", "height", "-", "1", ")", "\n", "self", ".", "grid", ".", "vert_wall", "(", "0", ",", "0", ")", "\n", "self", ".", "grid", ".", "vert_wall", "(", "width", "-", "1", ",", "0", ")", "\n", "\n", "assert", "height", "%", "2", "==", "1", "\n", "upper_room_wall", "=", "height", "//", "2", "-", "2", "\n", "lower_room_wall", "=", "height", "//", "2", "+", "2", "\n", "if", "self", ".", "random_length", ":", "\n", "            ", "hallway_end", "=", "self", ".", "_rand_int", "(", "4", ",", "width", "-", "2", ")", "\n", "", "else", ":", "\n", "            ", "hallway_end", "=", "width", "-", "3", "\n", "\n", "# Start room", "\n", "", "for", "i", "in", "range", "(", "1", ",", "5", ")", ":", "\n", "            ", "self", ".", "grid", ".", "set", "(", "i", ",", "upper_room_wall", ",", "Wall", "(", ")", ")", "\n", "self", ".", "grid", ".", "set", "(", "i", ",", "lower_room_wall", ",", "Wall", "(", ")", ")", "\n", "", "self", ".", "grid", ".", "set", "(", "4", ",", "upper_room_wall", "+", "1", ",", "Wall", "(", ")", ")", "\n", "self", ".", "grid", ".", "set", "(", "4", ",", "lower_room_wall", "-", "1", ",", "Wall", "(", ")", ")", "\n", "\n", "# Horizontal hallway", "\n", "for", "i", "in", "range", "(", "5", ",", "hallway_end", ")", ":", "\n", "            ", "self", ".", "grid", ".", "set", "(", "i", ",", "upper_room_wall", "+", "1", ",", "Wall", "(", ")", ")", "\n", "self", ".", "grid", ".", "set", "(", "i", ",", "lower_room_wall", "-", "1", ",", "Wall", "(", ")", ")", "\n", "\n", "# Vertical hallway", "\n", "", "for", "j", "in", "range", "(", "0", ",", "height", ")", ":", "\n", "            ", "if", "j", "!=", "height", "//", "2", ":", "\n", "                ", "self", ".", "grid", ".", "set", "(", "hallway_end", ",", "j", ",", "Wall", "(", ")", ")", "\n", "", "self", ".", "grid", ".", "set", "(", "hallway_end", "+", "2", ",", "j", ",", "Wall", "(", ")", ")", "\n", "\n", "# Fix the player's start position and orientation", "\n", "", "self", ".", "agent_pos", "=", "(", "self", ".", "_rand_int", "(", "1", ",", "hallway_end", "+", "1", ")", ",", "height", "//", "2", ")", "\n", "self", ".", "agent_dir", "=", "0", "\n", "\n", "# Place objects", "\n", "start_room_obj", "=", "self", ".", "_rand_elem", "(", "[", "Key", ",", "Ball", "]", ")", "\n", "self", ".", "grid", ".", "set", "(", "1", ",", "height", "//", "2", "-", "1", ",", "start_room_obj", "(", "'green'", ")", ")", "\n", "\n", "other_objs", "=", "self", ".", "_rand_elem", "(", "[", "[", "Ball", ",", "Key", "]", ",", "[", "Key", ",", "Ball", "]", "]", ")", "\n", "pos0", "=", "(", "hallway_end", "+", "1", ",", "height", "//", "2", "-", "2", ")", "\n", "pos1", "=", "(", "hallway_end", "+", "1", ",", "height", "//", "2", "+", "2", ")", "\n", "self", ".", "grid", ".", "set", "(", "*", "pos0", ",", "other_objs", "[", "0", "]", "(", "'green'", ")", ")", "\n", "self", ".", "grid", ".", "set", "(", "*", "pos1", ",", "other_objs", "[", "1", "]", "(", "'green'", ")", ")", "\n", "\n", "# Choose the target objects", "\n", "if", "start_room_obj", "==", "other_objs", "[", "0", "]", ":", "\n", "            ", "self", ".", "success_pos", "=", "(", "pos0", "[", "0", "]", ",", "pos0", "[", "1", "]", "+", "1", ")", "\n", "self", ".", "failure_pos", "=", "(", "pos1", "[", "0", "]", ",", "pos1", "[", "1", "]", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "success_pos", "=", "(", "pos1", "[", "0", "]", ",", "pos1", "[", "1", "]", "-", "1", ")", "\n", "self", ".", "failure_pos", "=", "(", "pos0", "[", "0", "]", ",", "pos0", "[", "1", "]", "+", "1", ")", "\n", "\n", "", "self", ".", "mission", "=", "'go to the matching object at the end of the hallway'", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryEnv.step": [[88, 101], ["MiniGridEnv.step", "tuple", "memory.MemoryEnv._reward", "tuple"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryEnv.step", "home.repos.pwc.inspect_result.maximecb_gym-minigrid.gym_minigrid.minigrid.MiniGridEnv._reward"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "if", "action", "==", "MiniGridEnv", ".", "Actions", ".", "pickup", ":", "\n", "            ", "action", "=", "MiniGridEnv", ".", "Actions", ".", "toggle", "\n", "", "obs", ",", "reward", ",", "done", ",", "info", "=", "MiniGridEnv", ".", "step", "(", "self", ",", "action", ")", "\n", "\n", "if", "tuple", "(", "self", ".", "agent_pos", ")", "==", "self", ".", "success_pos", ":", "\n", "            ", "reward", "=", "self", ".", "_reward", "(", ")", "\n", "done", "=", "True", "\n", "", "if", "tuple", "(", "self", ".", "agent_pos", ")", "==", "self", ".", "failure_pos", ":", "\n", "            ", "reward", "=", "0", "\n", "done", "=", "True", "\n", "\n", "", "return", "obs", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryS17Random.__init__": [[103, 105], ["memory.MemoryEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "seed", "=", "seed", ",", "size", "=", "17", ",", "random_length", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryS13Random.__init__": [[112, 114], ["memory.MemoryEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "seed", "=", "seed", ",", "size", "=", "13", ",", "random_length", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryS13.__init__": [[121, 123], ["memory.MemoryEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "seed", "=", "seed", ",", "size", "=", "13", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryS11.__init__": [[130, 132], ["memory.MemoryEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "seed", "=", "seed", ",", "size", "=", "11", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryS9.__init__": [[139, 141], ["memory.MemoryEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "seed", "=", "seed", ",", "size", "=", "9", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryS7.__init__": [[148, 150], ["memory.MemoryEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.maximecb_gym-minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "seed", "=", "seed", ",", "size", "=", "7", ")", "\n", "\n"]]}