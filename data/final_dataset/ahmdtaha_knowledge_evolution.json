{"home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.None.train_KE_cls.get_trainer": [[19, 24], ["print", "importlib.import_module"], "function", ["None"], ["def", "get_trainer", "(", "args", ")", ":", "\n", "    ", "print", "(", "f\"=> Using trainer from trainers.{args.trainer}\"", ")", "\n", "trainer", "=", "importlib", ".", "import_module", "(", "f\"trainers.{args.trainer}\"", ")", "\n", "\n", "return", "trainer", ".", "train", ",", "trainer", ".", "validate", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.None.train_KE_cls.train_dense": [[26, 42], ["utils.net_utils.get_model", "KE_model.ke_cls_train", "utils.net_utils.load_pretrained", "utils.net_utils.move_model_to_gpu", "utils.net_utils.split_reinitialize", "utils.net_utils.move_model_to_gpu"], "function", ["home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.net_utils.get_model", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.None.KE_model.ke_cls_train", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.net_utils.load_pretrained", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.net_utils.move_model_to_gpu", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.layers.conv_type.SplitConv.split_reinitialize", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.net_utils.move_model_to_gpu"], ["", "def", "train_dense", "(", "cfg", ",", "generation", ")", ":", "\n", "\n", "    ", "model", "=", "net_utils", ".", "get_model", "(", "cfg", ")", "\n", "\n", "if", "cfg", ".", "pretrained", "and", "cfg", ".", "pretrained", "!=", "\"imagenet\"", ":", "\n", "        ", "net_utils", ".", "load_pretrained", "(", "cfg", ".", "pretrained", ",", "cfg", ".", "gpu", ",", "model", ",", "cfg", ")", "\n", "model", "=", "net_utils", ".", "move_model_to_gpu", "(", "cfg", ",", "model", ")", "\n", "net_utils", ".", "split_reinitialize", "(", "cfg", ",", "model", ",", "reset_hypothesis", "=", "cfg", ".", "reset_hypothesis", ")", "\n", "", "else", ":", "\n", "        ", "model", "=", "net_utils", ".", "move_model_to_gpu", "(", "cfg", ",", "model", ")", "\n", "\n", "", "cfg", ".", "trainer", "=", "\"default_cls\"", "\n", "cfg", ".", "pretrained", "=", "None", "\n", "ckpt_path", "=", "KE_model", ".", "ke_cls_train", "(", "cfg", ",", "model", ",", "generation", ")", "\n", "\n", "return", "ckpt_path", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.None.train_KE_cls.eval_slim": [[44, 147], ["torch.CrossEntropyLoss().cuda", "utils.net_utils.get_model", "utils.net_utils.load_pretrained", "utils.net_utils.move_model_to_gpu", "torch.zeros().cuda", "torch.zeros().cuda", "utils.model_profile.profile", "cfg.logger.info", "cfg.logger.info", "utils.csv_utils.write_cls_result_to_csv", "net_utils.move_model_to_gpu.named_modules", "utils.net_utils.get_model", "utils.net_utils.move_model_to_gpu", "utils.model_profile.profile", "cfg.logger.info", "cfg.logger.info", "utils.net_utils.extract_slim", "train_KE_cls.get_trainer", "validate", "cfg.logger.info", "torch.CrossEntropyLoss", "torch.zeros", "torch.zeros", "getattr", "hasattr", "hasattr", "utils.os_utils.txt_write", "os.join", "float", "float", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "n.replace", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "layer_mask.type"], "function", ["home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.net_utils.get_model", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.net_utils.load_pretrained", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.net_utils.move_model_to_gpu", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.model_profile.profile", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.csv_utils.write_cls_result_to_csv", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.net_utils.get_model", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.net_utils.move_model_to_gpu", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.model_profile.profile", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.layers.conv_type.SplitConv.extract_slim", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.None.KE_model.get_trainer", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.trainers.default_cls.validate", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.os_utils.txt_write"], ["", "def", "eval_slim", "(", "cfg", ",", "generation", ")", ":", "\n", "    ", "original_num_epos", "=", "cfg", ".", "epochs", "\n", "# cfg.epochs = 0", "\n", "softmax_criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "cuda", "(", ")", "\n", "epoch", "=", "1", "\n", "writer", "=", "None", "\n", "model", "=", "net_utils", ".", "get_model", "(", "cfg", ")", "\n", "net_utils", ".", "load_pretrained", "(", "cfg", ".", "pretrained", ",", "cfg", ".", "gpu", ",", "model", ",", "cfg", ")", "\n", "# if cfg.reset_mask:", "\n", "#     net_utils.reset_mask(cfg, model)", "\n", "model", "=", "net_utils", ".", "move_model_to_gpu", "(", "cfg", ",", "model", ")", "\n", "\n", "save_filter_stats", "=", "cfg", ".", "arch", "in", "[", "\"split_alexnet\"", ",", "\"split_vgg11_bn\"", "]", "\n", "if", "save_filter_stats", ":", "\n", "        ", "for", "n", ",", "m", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "            ", "if", "hasattr", "(", "m", ",", "\"weight\"", ")", "and", "m", ".", "weight", "is", "not", "None", ":", "\n", "                ", "if", "hasattr", "(", "m", ",", "\"mask\"", ")", ":", "\n", "                    ", "layer_mask", "=", "m", ".", "mask", "\n", "if", "m", ".", "__class__", "==", "conv_type", ".", "SplitConv", ":", "\n", "# filter_state = [''.join(map(str, ((score_mask == True).type(torch.int).squeeze().tolist())))]", "\n", "                        ", "filter_mag", "=", "[", "\n", "\"{},{}\"", ".", "format", "(", "\n", "float", "(", "\n", "torch", ".", "mean", "(", "\n", "torch", ".", "abs", "(", "m", ".", "weight", "[", "layer_mask", ".", "type", "(", "torch", ".", "bool", ")", "]", ")", "\n", ")", "\n", ")", ",", "\n", "float", "(", "\n", "torch", ".", "mean", "(", "\n", "torch", ".", "abs", "(", "\n", "m", ".", "weight", "[", "(", "1", "-", "layer_mask", ")", ".", "type", "(", "torch", ".", "bool", ")", "]", "\n", ")", "\n", ")", "\n", ")", ",", "\n", ")", "\n", "]", "\n", "os_utils", ".", "txt_write", "(", "\n", "osp", ".", "join", "(", "\n", "cfg", ".", "exp_dir", ",", "n", ".", "replace", "(", "\".\"", ",", "\"_\"", ")", "+", "\"_mean_magnitude.txt\"", "\n", ")", ",", "\n", "filter_mag", ",", "\n", "mode", "=", "\"a+\"", ",", "\n", ")", "\n", "\n", "", "", "", "", "", "dummy_input_tensor", "=", "torch", ".", "zeros", "(", "(", "1", ",", "3", ",", "224", ",", "224", ")", ")", ".", "cuda", "(", ")", "\n", "total_ops", ",", "total_params", "=", "model_profile", ".", "profile", "(", "model", ",", "dummy_input_tensor", ")", "\n", "cfg", ".", "logger", ".", "info", "(", "\"Dense #Ops: %f GOps\"", "%", "(", "total_ops", "/", "1e9", ")", ")", "\n", "cfg", ".", "logger", ".", "info", "(", "\n", "\"Dense #Parameters: %f M (Split-Mask included)\"", "%", "(", "total_params", "/", "1e6", ")", "\n", ")", "\n", "\n", "original_split_rate", "=", "cfg", ".", "split_rate", "\n", "original_bias_split_rate", "=", "cfg", ".", "bias_split_rate", "\n", "\n", "if", "cfg", ".", "split_mode", "==", "\"kels\"", ":", "\n", "        ", "cfg", ".", "slim_factor", "=", "cfg", ".", "split_rate", "\n", "cfg", ".", "split_rate", "=", "1.0", "\n", "cfg", ".", "bias_split_rate", "=", "1.0", "\n", "split_model", "=", "net_utils", ".", "get_model", "(", "cfg", ")", "\n", "split_model", "=", "net_utils", ".", "move_model_to_gpu", "(", "cfg", ",", "split_model", ")", "\n", "\n", "total_ops", ",", "total_params", "=", "model_profile", ".", "profile", "(", "split_model", ",", "dummy_input_tensor", ")", "\n", "cfg", ".", "logger", ".", "info", "(", "\"Split #Ops: %f GOps\"", "%", "(", "total_ops", "/", "1e9", ")", ")", "\n", "cfg", ".", "logger", ".", "info", "(", "\n", "\"Split #Parameters: %f M (Split-Mask included)\"", "%", "(", "total_params", "/", "1e6", ")", "\n", ")", "\n", "\n", "net_utils", ".", "extract_slim", "(", "split_model", ",", "model", ")", "\n", "dataset", "=", "getattr", "(", "data", ",", "cfg", ".", "set", ")", "(", "cfg", ")", "\n", "train", ",", "validate", "=", "get_trainer", "(", "cfg", ")", "\n", "last_val_acc1", ",", "last_val_acc5", "=", "validate", "(", "\n", "dataset", ".", "tst_loader", ",", "split_model", ",", "softmax_criterion", ",", "cfg", ",", "writer", ",", "epoch", "\n", ")", "\n", "cfg", ".", "logger", ".", "info", "(", "\"Split Model : {} , {}\"", ".", "format", "(", "last_val_acc1", ",", "last_val_acc5", ")", ")", "\n", "", "else", ":", "\n", "        ", "last_val_acc1", "=", "0", "\n", "last_val_acc5", "=", "0", "\n", "\n", "", "csv_utils", ".", "write_cls_result_to_csv", "(", "\n", "## Validation", "\n", "curr_acc1", "=", "0", ",", "\n", "curr_acc5", "=", "0", ",", "\n", "best_acc1", "=", "0", ",", "\n", "best_acc5", "=", "0", ",", "\n", "## Test", "\n", "last_tst_acc1", "=", "last_val_acc1", ",", "\n", "last_tst_acc5", "=", "last_val_acc5", ",", "\n", "best_tst_acc1", "=", "0", ",", "\n", "best_tst_acc5", "=", "0", ",", "\n", "## Train", "\n", "best_train_acc1", "=", "0", ",", "\n", "best_train_acc5", "=", "0", ",", "\n", "split_rate", "=", "\"slim\"", ",", "\n", "bias_split_rate", "=", "\"slim\"", ",", "\n", "base_config", "=", "cfg", ".", "name", ",", "\n", "name", "=", "cfg", ".", "name", ",", "\n", ")", "\n", "\n", "cfg", ".", "epochs", "=", "original_num_epos", "\n", "\n", "cfg", ".", "slim_factor", "=", "1", "\n", "cfg", ".", "split_rate", "=", "original_split_rate", "\n", "cfg", ".", "bias_split_rate", "=", "original_bias_split_rate", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.None.train_KE_cls.clean_dir": [[149, 166], ["rm_path.exists", "rm_path.exists", "rm_path.exists", "str", "os.remove", "os.remove", "os.remove", "os.remove", "os.remove", "os.remove"], "function", ["None"], ["", "def", "clean_dir", "(", "ckpt_dir", ",", "num_epochs", ")", ":", "\n", "# print(ckpt_dir)", "\n", "    ", "if", "\"0000\"", "in", "str", "(", "\n", "ckpt_dir", "\n", ")", ":", "## Always keep the first model -- Help reproduce results", "\n", "        ", "return", "\n", "", "rm_path", "=", "ckpt_dir", "/", "\"model_best.pth\"", "\n", "if", "rm_path", ".", "exists", "(", ")", ":", "\n", "        ", "os", ".", "remove", "(", "rm_path", ")", "\n", "\n", "", "rm_path", "=", "ckpt_dir", "/", "\"epoch_{}.state\"", ".", "format", "(", "num_epochs", "-", "1", ")", "\n", "if", "rm_path", ".", "exists", "(", ")", ":", "\n", "        ", "os", ".", "remove", "(", "rm_path", ")", "\n", "\n", "", "rm_path", "=", "ckpt_dir", "/", "\"initial.state\"", "\n", "if", "rm_path", ".", "exists", "(", ")", ":", "\n", "        ", "os", ".", "remove", "(", "rm_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.None.train_KE_cls.start_KE": [[168, 197], ["range", "train_KE_cls.train_dense", "ckpt_queue.append", "train_KE_cls.eval_slim", "len", "ckpt_queue.pop", "train_KE_cls.clean_dir"], "function", ["home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.None.train_KE_cls.train_dense", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.None.train_KE_cls.eval_slim", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.None.train_KE_cls.clean_dir"], ["", "", "def", "start_KE", "(", "cfg", ")", ":", "\n", "# assert cfg.epochs % 10 == 0 or 'debug' in cfg.name, 'Epoch should be divisible by 10'", "\n", "    ", "assert", "(", "\n", "cfg", ".", "cs_kd", "==", "False", "\n", ")", ",", "\"CS-KD requires a different data loader, not available in this repos\"", "\n", "\n", "ckpt_queue", "=", "[", "]", "\n", "\n", "for", "gen", "in", "range", "(", "cfg", ".", "num_generations", ")", ":", "\n", "        ", "cfg", ".", "start_epoch", "=", "0", "\n", "\n", "# cfg.name = original_name + 'task'", "\n", "task_ckpt", "=", "train_dense", "(", "cfg", ",", "gen", ")", "\n", "ckpt_queue", ".", "append", "(", "task_ckpt", ")", "\n", "\n", "# cfg.name = original_name + 'mask'", "\n", "\n", "cfg", ".", "pretrained", "=", "task_ckpt", "/", "\"epoch_{}.state\"", ".", "format", "(", "cfg", ".", "epochs", "-", "1", ")", "\n", "\n", "if", "cfg", ".", "num_generations", "==", "1", ":", "\n", "            ", "break", "\n", "\n", "", "eval_slim", "(", "cfg", ",", "gen", ")", "\n", "\n", "cfg", ".", "pretrained", "=", "task_ckpt", "/", "\"epoch_{}.state\"", ".", "format", "(", "cfg", ".", "epochs", "-", "1", ")", "\n", "\n", "if", "len", "(", "ckpt_queue", ")", ">", "4", ":", "\n", "            ", "oldest_ckpt", "=", "ckpt_queue", ".", "pop", "(", "0", ")", "\n", "clean_dir", "(", "oldest_ckpt", ",", "cfg", ".", "epochs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.None.train_KE_cls.main": [[199, 307], ["print", "str", "argv.extend", "configs.base_config.Config().parse", "train_KE_cls.start_KE", "argv.extend", "argv.extend", "argv.extend", "configs.base_config.Config"], "function", ["home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.configs.base_config.Config.parse", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.None.train_KE_cls.start_KE"], ["", "", "", "def", "main", "(", "arg_num_threads", "=", "16", ")", ":", "\n", "    ", "print", "(", "\"Starting with {} threads\"", ".", "format", "(", "arg_num_threads", ")", ")", "\n", "# arg_dataset = 'CUB200'  # Flower102, CUB200,HAM,Dog120,MIT67,Aircraft100,MINI_MIT67,FCAM", "\n", "for", "arg_dataset", "in", "[", "\"Flower102Pytorch\"", "]", ":", "\n", "        ", "arg_epochs", "=", "str", "(", "200", ")", "\n", "arg_evolve_mode", "=", "\"rand\"", "\n", "arg_reset_hypothesis", "=", "False", "\n", "arg_enable_cs_kd", "=", "False", "\n", "arg_enable_label_smoothing", "=", "True", "\n", "arg_arch", "=", "\"Split_ResNet18\"", "# Split_ResNet18,Split_ResNet34,Split_ResNet50,split_googlenet,split_densenet169,split_vgg11_bn,split_densenet121", "\n", "arg_split_top", "=", "\"0.5\"", "\n", "arg_bias_split_top", "=", "arg_split_top", "\n", "arg_num_generations", "=", "\"5\"", "\n", "arg_split_mode", "=", "\"kels\"", "# wels , kels", "\n", "\n", "exp_name_suffix", "=", "\"single_gpu_test3\"", "\n", "arg_exp_name", "=", "(", "\n", "\"SPLT_CLS_{}_{}_cskd{}_smth{}_k{}_G{}_e{}_ev{}_hReset{}_sm{}_{}/\"", ".", "format", "(", "\n", "arg_dataset", ",", "\n", "arg_arch", ",", "\n", "arg_enable_cs_kd", ",", "\n", "arg_enable_label_smoothing", ",", "\n", "arg_split_top", ",", "\n", "arg_num_generations", ",", "\n", "arg_epochs", ",", "\n", "arg_evolve_mode", ",", "\n", "arg_reset_hypothesis", ",", "\n", "arg_split_mode", ",", "\n", "exp_name_suffix", ",", "\n", ")", "\n", ")", "\n", "\n", "if", "arg_arch", "in", "[", "\"split_alexnet\"", ",", "\"split_vgg11\"", ",", "\"split_vgg11_bn\"", "]", ":", "\n", "            ", "arg_weight_decay", "=", "\"5e-4\"", "\n", "arg_init", "=", "\"kaiming_normal\"", "\n", "", "else", ":", "\n", "            ", "arg_weight_decay", "=", "\"1e-4\"", "\n", "arg_init", "=", "\"kaiming_normal\"", "\n", "\n", "", "argv", "=", "[", "\n", "\"--name\"", ",", "\n", "arg_exp_name", ",", "\n", "\"--evolve_mode\"", ",", "\n", "arg_evolve_mode", ",", "\n", "\"--num_threads\"", ",", "\n", "\"16\"", ",", "\n", "\"--gpu\"", ",", "\n", "\"0\"", ",", "\n", "\"--epochs\"", ",", "\n", "arg_epochs", ",", "\n", "\"--arch\"", ",", "\n", "arg_arch", ",", "\n", "# '--trainer', 'default', #'default', #lottery, # supermask", "\n", "\"--data\"", ",", "\n", "\"/mnt/data/datasets/\"", ",", "\n", "\"--set\"", ",", "\n", "arg_dataset", ",", "# Flower102, CUB200", "\n", "\"--optimizer\"", ",", "\n", "\"sgd\"", ",", "\n", "# '--lr', '0.1',", "\n", "# '--lr_policy', 'step_lr',", "\n", "# '--warmup_length', '5',", "\n", "\"--lr_policy\"", ",", "\n", "\"cosine_lr\"", ",", "\n", "\"--warmup_length\"", ",", "\n", "\"5\"", ",", "\n", "\"--weight_decay\"", ",", "\n", "arg_weight_decay", ",", "\n", "\"--momentum\"", ",", "\n", "\"0.9\"", ",", "\n", "\"--batch_size\"", ",", "\n", "\"32\"", ",", "\n", "\"--conv_type\"", ",", "\n", "\"SplitConv\"", ",", "# 'SubnetConv','StrictSubnetConv", "\n", "\"--bn_type\"", ",", "\n", "\"SplitBatchNorm\"", ",", "\n", "\"--linear_type\"", ",", "\n", "\"SplitLinear\"", ",", "\n", "\"--split_rate\"", ",", "\n", "arg_split_top", ",", "\n", "\"--bias_split_rate\"", ",", "\n", "arg_bias_split_top", ",", "\n", "\"--init\"", ",", "\n", "arg_init", ",", "# xavier_normal, kaiming_normal", "\n", "\"--mode\"", ",", "\n", "\"fan_in\"", ",", "\n", "\"--nonlinearity\"", ",", "\n", "\"relu\"", ",", "\n", "\"--num_generations\"", ",", "\n", "arg_num_generations", ",", "\n", "\"--split_mode\"", ",", "\n", "arg_split_mode", ",", "\n", "]", "\n", "\n", "if", "arg_enable_cs_kd", ":", "\n", "            ", "argv", ".", "extend", "(", "[", "\"--cs_kd\"", "]", ")", "\n", "\n", "", "if", "arg_enable_label_smoothing", ":", "\n", "            ", "argv", ".", "extend", "(", "[", "\"--label_smoothing\"", ",", "\"0.1\"", "]", ")", "\n", "\n", "", "argv", ".", "extend", "(", "[", "\"--lr\"", ",", "\"0.256\"", "]", ")", "\n", "\n", "if", "arg_reset_hypothesis", ":", "\n", "            ", "argv", ".", "extend", "(", "[", "\"--reset_hypothesis\"", "]", ")", "\n", "\n", "", "cfg", "=", "Config", "(", ")", ".", "parse", "(", "argv", ")", "\n", "\n", "start_KE", "(", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.None.KE_model.ke_cls_train": [[25, 202], ["cfg.logger.info", "KE_model.get_trainer", "KE_model.get_optimizer", "cfg.logger.info", "utils.path_utils.get_directories", "torch.utils.tensorboard.SummaryWriter", "utils.logging.AverageMeter", "utils.logging.AverageMeter", "utils.logging.AverageMeter", "utils.logging.ProgressMeter", "time.time", "time.time", "utils.gpu_utils.GPU_Utils", "range", "utils.csv_utils.write_cls_result_to_csv", "cfg.logger.info", "random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "cfg.logger.info", "getattr", "utils.schedulers.get_policy", "torch.CrossEntropyLoss().cuda", "utils.net_utils.LabelSmoothing().cuda", "net_utils.LabelSmoothing().cuda.", "KE_model.resume", "lr_policy", "utils.net_utils.get_lr", "time.time", "train", "utils.logging.AverageMeter.update", "validate", "time.time", "validate", "utils.logging.AverageMeter.update", "max", "max", "max", "max", "datetime.timedelta", "time.time", "cfg.logger.info", "utils.logging.AverageMeter.update", "utils.logging.ProgressMeter.display", "utils.logging.ProgressMeter.write_to_tensorboard", "torch.utils.tensorboard.SummaryWriter.add_scalar", "time.time", "torch.CrossEntropyLoss", "utils.net_utils.LabelSmoothing", "time.time", "utils.net_utils.save_checkpoint", "time.time", "int", "cfg.logger.info", "time.time", "gpu_utils.GPU_Utils.gpu_mem_usage", "gpu_utils.GPU_Utils.gpu_utilization", "model.state_dict", "get_optimizer.state_dict", "time.time"], "function", ["home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.None.KE_model.get_trainer", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.None.KE_model.get_optimizer", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.path_utils.get_directories", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.csv_utils.write_cls_result_to_csv", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.schedulers.get_policy", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.None.KE_model.resume", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.net_utils.get_lr", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.trainers.default_cls.train", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.logging.VarianceMeter.update", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.trainers.default_cls.validate", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.trainers.default_cls.validate", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.logging.VarianceMeter.update", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.logging.VarianceMeter.update", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.logging.ProgressMeter.display", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.logging.ProgressMeter.write_to_tensorboard", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.net_utils.save_checkpoint", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.gpu_utils.GPU_Utils.gpu_mem_usage", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.gpu_utils.GPU_Utils.gpu_utilization"], ["def", "ke_cls_train", "(", "cfg", ",", "model", ",", "generation", ")", ":", "\n", "    ", "cfg", ".", "logger", ".", "info", "(", "cfg", ")", "\n", "if", "cfg", ".", "seed", "is", "not", "None", ":", "\n", "        ", "random", ".", "seed", "(", "cfg", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "cfg", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "cfg", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "cfg", ".", "seed", ")", "\n", "\n", "# train, validate, modifier = get_trainer(cfg)", "\n", "", "train", ",", "validate", "=", "get_trainer", "(", "cfg", ")", "\n", "\n", "if", "cfg", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "cfg", ".", "logger", ".", "info", "(", "\"Use GPU: {} for training\"", ".", "format", "(", "cfg", ".", "gpu", ")", ")", "\n", "\n", "# if cfg.pretrained:", "\n", "#     net_utils.load_pretrained(cfg.pretrained,cfg.multigpu[0], model)", "\n", "\n", "", "optimizer", "=", "get_optimizer", "(", "cfg", ",", "model", ")", "\n", "cfg", ".", "logger", ".", "info", "(", "f\"=> Getting {cfg.set} dataset\"", ")", "\n", "dataset", "=", "getattr", "(", "data", ",", "cfg", ".", "set", ")", "(", "cfg", ")", "\n", "\n", "lr_policy", "=", "get_policy", "(", "cfg", ".", "lr_policy", ")", "(", "optimizer", ",", "cfg", ")", "\n", "\n", "if", "cfg", ".", "label_smoothing", "is", "None", ":", "\n", "        ", "softmax_criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "        ", "softmax_criterion", "=", "net_utils", ".", "LabelSmoothing", "(", "smoothing", "=", "cfg", ".", "label_smoothing", ")", ".", "cuda", "(", ")", "\n", "\n", "\n", "", "criterion", "=", "lambda", "output", ",", "target", ":", "softmax_criterion", "(", "output", ",", "target", ")", "\n", "\n", "\n", "# optionally resume from a checkpoint", "\n", "best_val_acc1", "=", "0.0", "\n", "best_val_acc5", "=", "0.0", "\n", "best_train_acc1", "=", "0.0", "\n", "best_train_acc5", "=", "0.0", "\n", "\n", "if", "cfg", ".", "resume", ":", "\n", "        ", "best_val_acc1", "=", "resume", "(", "cfg", ",", "model", ",", "optimizer", ")", "\n", "\n", "# Data loading code", "\n", "# if cfg.evaluate:", "\n", "#     last_val_acc1, last_val_acc5 = validate(", "\n", "#         dataset.val_loader, model, criterion, cfg, writer=None, epoch=cfg.start_epoch", "\n", "#     )", "\n", "#", "\n", "#     return", "\n", "\n", "", "run_base_dir", ",", "ckpt_base_dir", ",", "log_base_dir", "=", "path_utils", ".", "get_directories", "(", "cfg", ",", "generation", ")", "\n", "cfg", ".", "ckpt_base_dir", "=", "ckpt_base_dir", "\n", "\n", "writer", "=", "SummaryWriter", "(", "log_dir", "=", "log_base_dir", ")", "\n", "epoch_time", "=", "AverageMeter", "(", "\"epoch_time\"", ",", "\":.4f\"", ",", "write_avg", "=", "False", ")", "\n", "validation_time", "=", "AverageMeter", "(", "\"validation_time\"", ",", "\":.4f\"", ",", "write_avg", "=", "False", ")", "\n", "train_time", "=", "AverageMeter", "(", "\"train_time\"", ",", "\":.4f\"", ",", "write_avg", "=", "False", ")", "\n", "progress_overall", "=", "ProgressMeter", "(", "\n", "1", ",", "[", "epoch_time", ",", "validation_time", ",", "train_time", "]", ",", "cfg", ",", "prefix", "=", "\"Overall Timing\"", "\n", ")", "\n", "\n", "end_epoch", "=", "time", ".", "time", "(", ")", "\n", "cfg", ".", "start_epoch", "=", "cfg", ".", "start_epoch", "or", "0", "\n", "last_val_acc1", "=", "None", "\n", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "gpu_info", "=", "gpu_utils", ".", "GPU_Utils", "(", "gpu_index", "=", "cfg", ".", "gpu", ")", "\n", "\n", "\n", "# Start training", "\n", "for", "epoch", "in", "range", "(", "cfg", ".", "start_epoch", ",", "cfg", ".", "epochs", ")", ":", "\n", "        ", "lr_policy", "(", "epoch", ",", "iteration", "=", "None", ")", "\n", "# if epoch  == cfg.start_epoch:", "\n", "#     modifier(cfg, epoch, model)", "\n", "\n", "cur_lr", "=", "net_utils", ".", "get_lr", "(", "optimizer", ")", "\n", "# print(cur_lr)", "\n", "# train for one epoch", "\n", "start_train", "=", "time", ".", "time", "(", ")", "\n", "train_acc1", ",", "train_acc5", "=", "train", "(", "\n", "dataset", ".", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "cfg", ",", "writer", "=", "writer", "\n", ")", "\n", "train_time", ".", "update", "(", "(", "time", ".", "time", "(", ")", "-", "start_train", ")", "/", "60", ")", "\n", "\n", "if", "(", "epoch", "+", "1", ")", "%", "cfg", ".", "test_interval", "==", "0", ":", "\n", "# evaluate on validation set", "\n", "            ", "start_validation", "=", "time", ".", "time", "(", ")", "\n", "last_val_acc1", ",", "last_val_acc5", "=", "validate", "(", "dataset", ".", "val_loader", ",", "model", ",", "criterion", ",", "cfg", ",", "writer", ",", "epoch", ")", "\n", "validation_time", ".", "update", "(", "(", "time", ".", "time", "(", ")", "-", "start_validation", ")", "/", "60", ")", "\n", "\n", "# remember best acc@1 and save checkpoint", "\n", "is_best", "=", "last_val_acc1", ">", "best_val_acc1", "\n", "best_val_acc1", "=", "max", "(", "last_val_acc1", ",", "best_val_acc1", ")", "\n", "best_val_acc5", "=", "max", "(", "last_val_acc5", ",", "best_val_acc5", ")", "\n", "best_train_acc1", "=", "max", "(", "train_acc1", ",", "best_train_acc1", ")", "\n", "best_train_acc5", "=", "max", "(", "train_acc5", ",", "best_train_acc5", ")", "\n", "\n", "save", "=", "(", "(", "epoch", "%", "cfg", ".", "save_every", ")", "==", "0", ")", "and", "cfg", ".", "save_every", ">", "0", "\n", "\n", "elapsed_time", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "seconds_todo", "=", "(", "cfg", ".", "epochs", "-", "epoch", ")", "*", "(", "elapsed_time", "/", "cfg", ".", "test_interval", ")", "\n", "estimated_time_complete", "=", "timedelta", "(", "seconds", "=", "int", "(", "seconds_todo", ")", ")", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "cfg", ".", "logger", ".", "info", "(", "f\"==> ETA: {estimated_time_complete}\\tGPU-M: {gpu_info.gpu_mem_usage()}\\tGPU-U: {gpu_info.gpu_utilization()}\"", ")", "\n", "if", "is_best", "or", "save", "or", "epoch", "==", "cfg", ".", "epochs", "-", "1", ":", "\n", "                ", "if", "is_best", ":", "\n", "                    ", "cfg", ".", "logger", ".", "info", "(", "f\"==> best {last_val_acc1:.02f} saving at {ckpt_base_dir / 'model_best.pth'}\"", ")", "\n", "\n", "", "net_utils", ".", "save_checkpoint", "(", "\n", "{", "\n", "\"epoch\"", ":", "epoch", "+", "1", ",", "\n", "\"arch\"", ":", "cfg", ".", "arch", ",", "\n", "\"state_dict\"", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "\"best_acc1\"", ":", "best_val_acc1", ",", "\n", "\"best_acc5\"", ":", "best_val_acc5", ",", "\n", "\"best_train_acc1\"", ":", "best_train_acc1", ",", "\n", "\"best_train_acc5\"", ":", "best_train_acc5", ",", "\n", "\"optimizer\"", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "\"curr_acc1\"", ":", "last_val_acc1", ",", "\n", "\"curr_acc5\"", ":", "last_val_acc5", ",", "\n", "}", ",", "\n", "is_best", ",", "\n", "filename", "=", "ckpt_base_dir", "/", "f\"epoch_{epoch}.state\"", ",", "\n", "save", "=", "save", "or", "epoch", "==", "cfg", ".", "epochs", "-", "1", ",", "\n", ")", "\n", "\n", "", "epoch_time", ".", "update", "(", "(", "time", ".", "time", "(", ")", "-", "end_epoch", ")", "/", "60", ")", "\n", "progress_overall", ".", "display", "(", "epoch", ")", "\n", "progress_overall", ".", "write_to_tensorboard", "(", "\n", "writer", ",", "prefix", "=", "\"diagnostics\"", ",", "global_step", "=", "epoch", "\n", ")", "\n", "\n", "\n", "writer", ".", "add_scalar", "(", "\"test/lr\"", ",", "cur_lr", ",", "epoch", ")", "\n", "end_epoch", "=", "time", ".", "time", "(", ")", "\n", "\n", "\n", "", "", "if", "cfg", ".", "eval_tst", ":", "\n", "        ", "last_tst_acc1", ",", "last_tst_acc5", "=", "validate", "(", "dataset", ".", "tst_loader", ",", "model", ",", "criterion", ",", "cfg", ",", "writer", ",", "0", ")", "\n", "best_tst_acc1", "=", "0", "\n", "best_tst_acc5", "=", "0", "\n", "# net_utils.load_pretrained(ckpt_base_dir / 'model_best.pth',cfg.multigpu[0],model)", "\n", "# best_tst_acc1, best_tst_acc5 = validate(dataset.tst_loader, model, criterion, cfg, writer, 0)", "\n", "", "else", ":", "\n", "        ", "last_tst_acc1", "=", "0", "\n", "last_tst_acc5", "=", "0", "\n", "best_tst_acc1", "=", "0", "\n", "best_tst_acc5", "=", "0", "\n", "\n", "\n", "", "csv_utils", ".", "write_cls_result_to_csv", "(", "\n", "## Validation", "\n", "curr_acc1", "=", "last_val_acc1", ",", "\n", "curr_acc5", "=", "last_val_acc5", ",", "\n", "best_acc1", "=", "best_val_acc1", ",", "\n", "best_acc5", "=", "best_val_acc5", ",", "\n", "\n", "## Test", "\n", "last_tst_acc1", "=", "last_tst_acc1", ",", "\n", "last_tst_acc5", "=", "last_tst_acc5", ",", "\n", "best_tst_acc1", "=", "best_tst_acc1", ",", "\n", "best_tst_acc5", "=", "best_tst_acc5", ",", "\n", "\n", "## Train", "\n", "best_train_acc1", "=", "best_train_acc1", ",", "\n", "best_train_acc5", "=", "best_train_acc5", ",", "\n", "\n", "\n", "split_rate", "=", "cfg", ".", "split_rate", ",", "\n", "bias_split_rate", "=", "cfg", ".", "bias_split_rate", ",", "\n", "\n", "base_config", "=", "cfg", ".", "name", ",", "\n", "name", "=", "cfg", ".", "name", ",", "\n", ")", "\n", "\n", "cfg", ".", "logger", ".", "info", "(", "f\"==> Final Best {best_val_acc1:.02f}, saving at {ckpt_base_dir / 'model_best.pth'}\"", ")", "\n", "return", "ckpt_base_dir", "## Do Not return the model because you just reloaded the best one", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.None.KE_model.get_trainer": [[204, 209], ["args.logger.info", "importlib.import_module"], "function", ["None"], ["", "def", "get_trainer", "(", "args", ")", ":", "\n", "    ", "args", ".", "logger", ".", "info", "(", "f\"=> Using trainer from trainers.{args.trainer}\"", ")", "\n", "trainer", "=", "importlib", ".", "import_module", "(", "f\"trainers.{args.trainer}\"", ")", "\n", "\n", "return", "trainer", ".", "train", ",", "trainer", ".", "validate", "#, trainer.modifier", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.None.KE_model.resume": [[211, 231], ["os.path.isfile", "args.logger.info", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "model.load_state_dict", "optimizer.load_state_dict", "args.logger.info", "args.logger.info", "args.logger.info"], "function", ["home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.split_resnet.load_state_dict", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.split_resnet.load_state_dict"], ["", "def", "resume", "(", "args", ",", "model", ",", "optimizer", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "resume", ")", ":", "\n", "        ", "args", ".", "logger", ".", "info", "(", "f\"=> Loading checkpoint '{args.resume}'\"", ")", "\n", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ",", "map_location", "=", "f\"cuda:{args.gpu}\"", ")", "\n", "if", "args", ".", "start_epoch", "is", "None", ":", "\n", "            ", "args", ".", "logger", ".", "info", "(", "f\"=> Setting new start epoch at {checkpoint['epoch']}\"", ")", "\n", "args", ".", "start_epoch", "=", "checkpoint", "[", "\"epoch\"", "]", "\n", "\n", "", "best_acc1", "=", "checkpoint", "[", "\"best_acc1\"", "]", "\n", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "\"state_dict\"", "]", ")", "\n", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "\"optimizer\"", "]", ")", "\n", "\n", "args", ".", "logger", ".", "info", "(", "f\"=> Loaded checkpoint '{args.resume}' (epoch {checkpoint['epoch']})\"", ")", "\n", "\n", "return", "best_acc1", "\n", "", "else", ":", "\n", "        ", "args", ".", "logger", ".", "info", "(", "f\"=> No checkpoint found at '{args.resume}'\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.None.KE_model.get_optimizer": [[235, 288], ["model.named_parameters", "model.parameters", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "args.logger.info", "args.logger.info", "model.parameters.append", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "filter", "torch.optim.RMSprop", "torch.optim.RMSprop", "torch.optim.RMSprop", "torch.optim.RMSprop", "torch.optim.RMSprop", "torch.optim.RMSprop", "list", "list", "model.model.embedding.parameters", "model.module.model.embedding.parameters", "float", "torch.optim.AdamW", "torch.optim.AdamW", "torch.optim.AdamW", "torch.optim.AdamW", "torch.optim.AdamW", "torch.optim.AdamW", "NotImplemented", "set().difference", "set().difference", "float", "set", "set", "set", "model.model.embedding.parameters", "set", "model.module.model.embedding.parameters", "model.parameters", "model.module.parameters"], "function", ["None"], ["", "", "def", "get_optimizer", "(", "args", ",", "model", ",", "fine_tune", "=", "False", ",", "criterion", "=", "None", ")", ":", "\n", "    ", "for", "n", ",", "v", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "if", "v", ".", "requires_grad", ":", "\n", "            ", "args", ".", "logger", ".", "info", "(", "\"<DEBUG> gradient to {}\"", ".", "format", "(", "n", ")", ")", "\n", "\n", "", "if", "not", "v", ".", "requires_grad", ":", "\n", "            ", "args", ".", "logger", ".", "info", "(", "\"<DEBUG> no gradient to {}\"", ".", "format", "(", "n", ")", ")", "\n", "\n", "", "", "param_groups", "=", "model", ".", "parameters", "(", ")", "\n", "if", "fine_tune", ":", "\n", "# Train Parameters", "\n", "        ", "param_groups", "=", "[", "\n", "{", "'params'", ":", "list", "(", "\n", "set", "(", "model", ".", "parameters", "(", ")", ")", ".", "difference", "(", "set", "(", "model", ".", "model", ".", "embedding", ".", "parameters", "(", ")", ")", ")", ")", "if", "args", ".", "gpu", "!=", "-", "1", "else", "\n", "list", "(", "set", "(", "model", ".", "module", ".", "parameters", "(", ")", ")", ".", "difference", "(", "set", "(", "model", ".", "module", ".", "model", ".", "embedding", ".", "parameters", "(", ")", ")", ")", ")", "}", ",", "\n", "{", "\n", "'params'", ":", "model", ".", "model", ".", "embedding", ".", "parameters", "(", ")", "if", "args", ".", "gpu", "!=", "-", "1", "else", "model", ".", "module", ".", "model", ".", "embedding", ".", "parameters", "(", ")", ",", "\n", "'lr'", ":", "float", "(", "args", ".", "lr", ")", "*", "1", "}", ",", "\n", "]", "\n", "if", "args", ".", "ml_loss", "==", "'Proxy_Anchor'", ":", "\n", "            ", "param_groups", ".", "append", "(", "{", "'params'", ":", "criterion", ".", "proxies", ",", "'lr'", ":", "float", "(", "args", ".", "lr", ")", "*", "100", "}", ")", "\n", "\n", "", "", "if", "args", ".", "optimizer", "==", "\"sgd\"", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "param_groups", ",", "lr", "=", "args", ".", "lr", ",", "\n", "momentum", "=", "args", ".", "momentum", ",", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "# parameters = list(model.named_parameters())", "\n", "# bn_params = [v for n, v in parameters if (\"bn\" in n) and v.requires_grad]", "\n", "# rest_params = [v for n, v in parameters if (\"bn\" not in n) and v.requires_grad]", "\n", "# optimizer = torch.optim.SGD(", "\n", "#     [", "\n", "#         {", "\n", "#             \"params\": bn_params,", "\n", "#             \"weight_decay\": 0 if args.no_bn_decay else args.weight_decay,", "\n", "#         },", "\n", "#         {\"params\": rest_params, \"weight_decay\": args.weight_decay},", "\n", "#     ],", "\n", "#     args.lr,", "\n", "#     momentum=args.momentum,", "\n", "#     weight_decay=args.weight_decay,", "\n", "#     nesterov=args.nesterov,", "\n", "# )", "\n", "", "elif", "args", ".", "optimizer", "==", "\"adam\"", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "param_groups", ")", ",", "lr", "=", "args", ".", "lr", "\n", ")", "\n", "", "elif", "args", ".", "optimizer", "==", "'rmsprop'", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "RMSprop", "(", "param_groups", ",", "lr", "=", "args", ".", "lr", ",", "alpha", "=", "0.9", ",", "weight_decay", "=", "args", ".", "weight_decay", ",", "momentum", "=", "0.9", ")", "\n", "", "elif", "args", ".", "optimizer", "==", "'adamw'", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "AdamW", "(", "param_groups", ",", "lr", "=", "args", ".", "lr", ",", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplemented", "(", "'Invalid Optimizer {}'", ".", "format", "(", "args", ".", "optimizer", ")", ")", "\n", "\n", "", "return", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.schedulers.get_policy": [[6, 18], ["None"], "function", ["None"], ["def", "get_policy", "(", "name", ")", ":", "\n", "    ", "if", "name", "is", "None", ":", "\n", "        ", "return", "constant_lr", "\n", "\n", "", "out_dict", "=", "{", "\n", "\"constant_lr\"", ":", "constant_lr", ",", "\n", "\"cosine_lr\"", ":", "cosine_lr", ",", "\n", "\"multistep_lr\"", ":", "multistep_lr", ",", "\n", "\"step_lr\"", ":", "step_lr", ",", "\n", "}", "\n", "\n", "return", "out_dict", "[", "name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.schedulers.assign_learning_rate": [[20, 23], ["None"], "function", ["None"], ["", "def", "assign_learning_rate", "(", "optimizer", ",", "new_lr", ")", ":", "\n", "    ", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "\"lr\"", "]", "=", "new_lr", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.schedulers.constant_lr": [[25, 37], ["schedulers.assign_learning_rate", "schedulers._warmup_lr"], "function", ["home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.schedulers.assign_learning_rate", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.schedulers._warmup_lr"], ["", "", "def", "constant_lr", "(", "optimizer", ",", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "def", "_lr_adjuster", "(", "epoch", ",", "iteration", ")", ":", "\n", "        ", "if", "epoch", "<", "args", ".", "warmup_length", ":", "\n", "            ", "lr", "=", "_warmup_lr", "(", "args", ".", "lr", ",", "args", ".", "warmup_length", ",", "epoch", ")", "\n", "", "else", ":", "\n", "            ", "lr", "=", "args", ".", "lr", "\n", "\n", "", "assign_learning_rate", "(", "optimizer", ",", "lr", ")", "\n", "\n", "return", "lr", "\n", "\n", "", "return", "_lr_adjuster", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.schedulers.cosine_lr": [[39, 53], ["schedulers.assign_learning_rate", "schedulers._warmup_lr", "numpy.cos"], "function", ["home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.schedulers.assign_learning_rate", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.schedulers._warmup_lr"], ["", "def", "cosine_lr", "(", "optimizer", ",", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "def", "_lr_adjuster", "(", "epoch", ",", "iteration", ")", ":", "\n", "        ", "if", "epoch", "<", "args", ".", "warmup_length", ":", "\n", "            ", "lr", "=", "_warmup_lr", "(", "args", ".", "lr", ",", "args", ".", "warmup_length", ",", "epoch", ")", "\n", "", "else", ":", "\n", "            ", "e", "=", "epoch", "-", "args", ".", "warmup_length", "\n", "es", "=", "args", ".", "epochs", "-", "args", ".", "warmup_length", "\n", "lr", "=", "0.5", "*", "(", "1", "+", "np", ".", "cos", "(", "np", ".", "pi", "*", "e", "/", "es", ")", ")", "*", "args", ".", "lr", "\n", "\n", "", "assign_learning_rate", "(", "optimizer", ",", "lr", ")", "\n", "\n", "return", "lr", "\n", "\n", "", "return", "_lr_adjuster", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.schedulers.step_lr": [[54, 67], ["schedulers.assign_learning_rate"], "function", ["home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.schedulers.assign_learning_rate"], ["", "def", "step_lr", "(", "optimizer", ",", "cfg", ",", "**", "kwargs", ")", ":", "\n", "    ", "def", "_lr_adjuster", "(", "epoch", ",", "iteration", ")", ":", "\n", "        ", "lr", "=", "cfg", ".", "lr", "\n", "if", "epoch", ">=", "0.5", "*", "cfg", ".", "epochs", ":", "\n", "            ", "lr", "/=", "10", "\n", "", "if", "epoch", ">=", "0.75", "*", "cfg", ".", "epochs", ":", "\n", "            ", "lr", "/=", "10", "\n", "\n", "", "assign_learning_rate", "(", "optimizer", ",", "lr", ")", "\n", "\n", "return", "lr", "\n", "\n", "", "return", "_lr_adjuster", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.schedulers.multistep_lr": [[69, 80], ["schedulers.assign_learning_rate"], "function", ["home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.schedulers.assign_learning_rate"], ["", "def", "multistep_lr", "(", "optimizer", ",", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Sets the learning rate to the initial LR decayed by 10 every 30 epochs\"\"\"", "\n", "\n", "def", "_lr_adjuster", "(", "epoch", ",", "iteration", ")", ":", "\n", "        ", "lr", "=", "args", ".", "lr", "*", "(", "args", ".", "lr_gamma", "**", "(", "epoch", "//", "args", ".", "lr_adjust", ")", ")", "\n", "\n", "assign_learning_rate", "(", "optimizer", ",", "lr", ")", "\n", "\n", "return", "lr", "\n", "\n", "", "return", "_lr_adjuster", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.schedulers._warmup_lr": [[82, 84], ["None"], "function", ["None"], ["", "def", "_warmup_lr", "(", "base_lr", ",", "warmup_length", ",", "epoch", ")", ":", "\n", "    ", "return", "base_lr", "*", "(", "epoch", "+", "1", ")", "/", "warmup_length", "\n", "", ""]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.csv_utils.write_cls_result_to_csv": [[6, 58], ["kwargs.get", "time.strftime", "pathlib.Path", "pathlib.Path", "pathlib.Path.exists", "pathlib.Path.write_text", "open", "f.write", "kwargs.get.split", "os.path.join", "os.path.join", "utils.path_utils.get_checkpoint_dir", "utils.path_utils.get_checkpoint_dir"], "function", ["home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.path_utils.get_checkpoint_dir", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.path_utils.get_checkpoint_dir"], ["def", "write_cls_result_to_csv", "(", "**", "kwargs", ")", ":", "\n", "    ", "name", "=", "kwargs", ".", "get", "(", "'name'", ")", "\n", "if", "'/'", "in", "name", ":", "\n", "        ", "exp_name", "=", "name", ".", "split", "(", "'/'", ")", "[", "0", "]", "\n", "results", "=", "pathlib", ".", "Path", "(", "os", ".", "path", ".", "join", "(", "path_utils", ".", "get_checkpoint_dir", "(", ")", ",", "exp_name", ",", "\"{}.csv\"", ".", "format", "(", "exp_name", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "results", "=", "pathlib", ".", "Path", "(", "os", ".", "path", ".", "join", "(", "path_utils", ".", "get_checkpoint_dir", "(", ")", ",", "\"{}.csv\"", ".", "format", "(", "name", ")", ")", ")", "\n", "\n", "", "if", "not", "results", ".", "exists", "(", ")", ":", "\n", "        ", "results", ".", "write_text", "(", "\n", "\"Date Finished, \"", "\n", "# \"Base Config, \"", "\n", "\"Name, \"", "\n", "\"Split Rate, \"", "\n", "\"Bias Split Rate, \"", "\n", "\"Current Val Top 1, \"", "\n", "\"Current Val Top 5, \"", "\n", "\"Best Val Top 1, \"", "\n", "\"Best Val Top 5, \"", "\n", "\n", "\"Current Tst Top 1, \"", "\n", "\"Current Tst Top 5, \"", "\n", "\"Best Tst Top 1, \"", "\n", "\"Best Tst Top 5, \"", "\n", "\n", "\"Best Trn Top 1, \"", "\n", "\"Best Trn Top 5\\n\"", "\n", ")", "\n", "\n", "", "now", "=", "time", ".", "strftime", "(", "\"%m-%d-%y_%H:%M:%S\"", ")", "\n", "\n", "with", "open", "(", "results", ",", "\"a+\"", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "\n", "(", "\n", "\"{now}, \"", "\n", "# \"{base_config}, \"", "\n", "\"{name}, \"", "\n", "\"{split_rate}, \"", "\n", "\"{bias_split_rate}, \"", "\n", "\"{curr_acc1:.02f}, \"", "\n", "\"{curr_acc5:.02f}, \"", "\n", "\"{best_acc1:.02f}, \"", "\n", "\"{best_acc5:.02f}, \"", "\n", "\n", "\"{last_tst_acc1:.02f}, \"", "\n", "\"{last_tst_acc5:.02f}, \"", "\n", "\"{best_tst_acc1:.02f}, \"", "\n", "\"{best_tst_acc5:.02f}, \"", "\n", "\n", "\"{best_train_acc1:.02f}, \"", "\n", "\"{best_train_acc5:.02f}\\n\"", "\n", ")", ".", "format", "(", "now", "=", "now", ",", "**", "kwargs", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.csv_utils.write_ret_result_to_csv": [[61, 108], ["kwargs.get", "kwargs.get", "time.strftime", "pathlib.Path", "pathlib.Path.exists", "pathlib.Path.write_text", "open", "f.write", "kwargs.get.split", "pathlib.Path", "pathlib.Path", "os.path.join", "os.path.join", "os.path.join", "utils.path_utils.get_checkpoint_dir", "utils.path_utils.get_checkpoint_dir", "utils.path_utils.get_checkpoint_dir"], "function", ["home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.path_utils.get_checkpoint_dir", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.path_utils.get_checkpoint_dir", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.path_utils.get_checkpoint_dir"], ["", "", "def", "write_ret_result_to_csv", "(", "**", "kwargs", ")", ":", "\n", "    ", "name", "=", "kwargs", ".", "get", "(", "'name'", ")", "\n", "name_prefix", "=", "kwargs", ".", "get", "(", "'name_prefix'", ")", "\n", "\n", "if", "'/'", "in", "name", ":", "\n", "        ", "exp_name", "=", "name", ".", "split", "(", "'/'", ")", "[", "0", "]", "\n", "if", "name_prefix", "is", "None", ":", "\n", "            ", "results", "=", "pathlib", ".", "Path", "(", "os", ".", "path", ".", "join", "(", "path_utils", ".", "get_checkpoint_dir", "(", ")", ",", "exp_name", ",", "\"{}.csv\"", ".", "format", "(", "exp_name", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "results", "=", "pathlib", ".", "Path", "(", "os", ".", "path", ".", "join", "(", "path_utils", ".", "get_checkpoint_dir", "(", ")", ",", "exp_name", ",", "\"{}_{}.csv\"", ".", "format", "(", "name_prefix", ",", "exp_name", ")", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "results", "=", "pathlib", ".", "Path", "(", "os", ".", "path", ".", "join", "(", "path_utils", ".", "get_checkpoint_dir", "(", ")", ",", "\"{}.csv\"", ".", "format", "(", "name", ")", ")", ")", "\n", "\n", "", "if", "not", "results", ".", "exists", "(", ")", ":", "\n", "        ", "results", ".", "write_text", "(", "\n", "\"Date Finished, \"", "\n", "# \"Base Config, \"", "\n", "\"Name, \"", "\n", "\"Split Rate, \"", "\n", "\"Bias Split Rate, \"", "\n", "\"NMI,\"", "\n", "\"R@1,\"", "\n", "\"R@2,\"", "\n", "\"R@4,\"", "\n", "\"R@8,\"", "\n", "\"R@16,\"", "\n", "\"R@32\\n\"", "\n", ")", "\n", "\n", "", "now", "=", "time", ".", "strftime", "(", "\"%m-%d-%y_%H:%M:%S\"", ")", "\n", "\n", "with", "open", "(", "results", ",", "\"a+\"", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "\n", "(", "\n", "\"{now}, \"", "\n", "# \"{base_config}, \"", "\n", "\"{name}, \"", "\n", "\"{split_rate}, \"", "\n", "\"{bias_split_rate}, \"", "\n", "\"{NMI:.03f}, \"", "\n", "\"{R_1:.02f}, \"", "\n", "\"{R_2:.02f}, \"", "\n", "\"{R_4:.02f}, \"", "\n", "\"{R_8:.02f}, \"", "\n", "\"{R_16:.02f}, \"", "\n", "\"{R_32:.02f}\\n\"", "\n", ")", ".", "format", "(", "now", "=", "now", ",", "**", "kwargs", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.logging.ProgressMeter.__init__": [[8, 13], ["logging.ProgressMeter._get_batch_fmtstr"], "methods", ["home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.logging.ProgressMeter._get_batch_fmtstr"], ["    ", "def", "__init__", "(", "self", ",", "num_batches", ",", "meters", ",", "cfg", ",", "prefix", "=", "\"\"", ")", ":", "\n", "        ", "self", ".", "batch_fmtstr", "=", "self", ".", "_get_batch_fmtstr", "(", "num_batches", ")", "\n", "self", ".", "meters", "=", "meters", "\n", "self", ".", "prefix", "=", "prefix", "\n", "self", ".", "cfg", "=", "cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.logging.ProgressMeter.display": [[14, 21], ["str", "logging.ProgressMeter.cfg.logger.info", "tqdm.tqdm.write", "logging.ProgressMeter.batch_fmtstr.format"], "methods", ["home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.log_utils._AnsiColorStreamHandler.format"], ["", "def", "display", "(", "self", ",", "batch", ",", "tqdm_writer", "=", "False", ")", ":", "\n", "        ", "entries", "=", "[", "self", ".", "prefix", "+", "self", ".", "batch_fmtstr", ".", "format", "(", "batch", ")", "]", "\n", "entries", "+=", "[", "str", "(", "meter", ")", "for", "meter", "in", "self", ".", "meters", "]", "\n", "if", "not", "tqdm_writer", ":", "\n", "            ", "self", ".", "cfg", ".", "logger", ".", "info", "(", "\"\\t\"", ".", "join", "(", "entries", ")", ")", "\n", "", "else", ":", "\n", "            ", "tqdm", ".", "tqdm", ".", "write", "(", "\"\\t\"", ".", "join", "(", "entries", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.logging.ProgressMeter.write_to_tensorboard": [[22, 36], ["writer.add_scalar", "writer.add_scalar"], "methods", ["None"], ["", "", "def", "write_to_tensorboard", "(", "\n", "self", ",", "writer", ":", "SummaryWriter", ",", "prefix", "=", "\"train\"", ",", "global_step", "=", "None", "\n", ")", ":", "\n", "        ", "for", "meter", "in", "self", ".", "meters", ":", "\n", "            ", "avg", "=", "meter", ".", "avg", "\n", "val", "=", "meter", ".", "val", "\n", "if", "meter", ".", "write_val", ":", "\n", "                ", "writer", ".", "add_scalar", "(", "\n", "f\"{prefix}/{meter.name}_val\"", ",", "val", ",", "global_step", "=", "global_step", "\n", ")", "\n", "\n", "", "if", "meter", ".", "write_avg", ":", "\n", "                ", "writer", ".", "add_scalar", "(", "\n", "f\"{prefix}/{meter.name}_avg\"", ",", "avg", ",", "global_step", "=", "global_step", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.logging.ProgressMeter._get_batch_fmtstr": [[38, 42], ["len", "str", "str", "fmt.format"], "methods", ["home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.log_utils._AnsiColorStreamHandler.format"], ["", "", "", "def", "_get_batch_fmtstr", "(", "self", ",", "num_batches", ")", ":", "\n", "        ", "num_digits", "=", "len", "(", "str", "(", "num_batches", "//", "1", ")", ")", "\n", "fmt", "=", "\"{:\"", "+", "str", "(", "num_digits", ")", "+", "\"d}\"", "\n", "return", "\"[\"", "+", "fmt", "+", "\"/\"", "+", "fmt", ".", "format", "(", "num_batches", ")", "+", "\"]\"", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.logging.Meter.__init__": [[45, 48], ["None"], "methods", ["None"], ["    ", "@", "abc", ".", "abstractmethod", "\n", "def", "__init__", "(", "self", ",", "name", ",", "fmt", "=", "\":f\"", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.logging.Meter.reset": [[49, 52], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "reset", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.logging.Meter.update": [[53, 56], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.logging.Meter.__str__": [[57, 60], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.logging.AverageMeter.__init__": [[65, 72], ["logging.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.logging.VarianceMeter.reset"], ["def", "__init__", "(", "self", ",", "name", ",", "fmt", "=", "\":f\"", ",", "write_val", "=", "True", ",", "write_avg", "=", "True", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "fmt", "=", "fmt", "\n", "self", ".", "reset", "(", ")", "\n", "\n", "self", ".", "write_val", "=", "write_val", "\n", "self", ".", "write_avg", "=", "write_avg", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.logging.AverageMeter.reset": [[73, 78], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.logging.AverageMeter.update": [[79, 84], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.logging.AverageMeter.__str__": [[85, 88], ["fmtstr.format"], "methods", ["home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.log_utils._AnsiColorStreamHandler.format"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "fmtstr", "=", "\"{name} {val\"", "+", "self", ".", "fmt", "+", "\"} ({avg\"", "+", "self", ".", "fmt", "+", "\"})\"", "\n", "return", "fmtstr", ".", "format", "(", "**", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.logging.VarianceMeter.__init__": [[91, 99], ["logging.AverageMeter", "logging.AverageMeter", "logging.VarianceMeter.reset"], "methods", ["home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.logging.VarianceMeter.reset"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "fmt", "=", "\":f\"", ",", "write_val", "=", "False", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "_ex_sq", "=", "AverageMeter", "(", "name", "=", "\"_subvariance_1\"", ",", "fmt", "=", "\":.02f\"", ")", "\n", "self", ".", "_sq_ex", "=", "AverageMeter", "(", "name", "=", "\"_subvariance_2\"", ",", "fmt", "=", "\":.02f\"", ")", "\n", "self", ".", "fmt", "=", "fmt", "\n", "self", ".", "reset", "(", ")", "\n", "self", ".", "write_val", "=", "False", "\n", "self", ".", "write_avg", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.logging.VarianceMeter.val": [[100, 103], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "val", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_ex_sq", ".", "val", "-", "self", ".", "_sq_ex", ".", "val", "**", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.logging.VarianceMeter.avg": [[104, 107], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "avg", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_ex_sq", ".", "avg", "-", "self", ".", "_sq_ex", ".", "avg", "**", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.logging.VarianceMeter.reset": [[108, 111], ["logging.VarianceMeter._ex_sq.reset", "logging.VarianceMeter._sq_ex.reset"], "methods", ["home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.logging.VarianceMeter.reset", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.logging.VarianceMeter.reset"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "_ex_sq", ".", "reset", "(", ")", "\n", "self", ".", "_sq_ex", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.logging.VarianceMeter.update": [[112, 115], ["logging.VarianceMeter._ex_sq.update", "logging.VarianceMeter._sq_ex.update"], "methods", ["home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.logging.VarianceMeter.update", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.logging.VarianceMeter.update"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "_ex_sq", ".", "update", "(", "val", "**", "2", ",", "n", "=", "n", ")", "\n", "self", ".", "_sq_ex", ".", "update", "(", "val", ",", "n", "=", "n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.logging.VarianceMeter.__str__": [[116, 119], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "(", "\"{name} (var {avg\"", "+", "self", ".", "fmt", "+", "\"})\"", ")", ".", "format", "(", "\n", "name", "=", "self", ".", "name", ",", "avg", "=", "self", ".", "avg", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.os_utils.get_last_part": [[9, 11], ["os.path.basename", "os.path.normpath"], "function", ["None"], ["def", "get_last_part", "(", "path", ")", ":", "\n", "    ", "return", "os", ".", "path", ".", "basename", "(", "os", ".", "path", ".", "normpath", "(", "path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.os_utils.copy_file": [[12, 24], ["os_utils.touch_dir", "os.path.exists", "Exception", "shutil.copyfile", "os_utils.get_file_name_ext", "shutil.copyfile", "os.path.join", "os.path.join", "os_utils.get_last_part"], "function", ["home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.os_utils.touch_dir", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.os_utils.get_file_name_ext", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.os_utils.get_last_part"], ["", "def", "copy_file", "(", "f", ",", "dst", ",", "rename", "=", "None", ")", ":", "\n", "    ", "touch_dir", "(", "dst", ")", "\n", "# for f_idx,f in enumerate(src_file_lst):", "\n", "if", "os", ".", "path", ".", "exists", "(", "f", ")", ":", "\n", "# print(f)", "\n", "        ", "if", "rename", "==", "None", ":", "\n", "            ", "copyfile", "(", "f", ",", "os", ".", "path", ".", "join", "(", "dst", ",", "get_last_part", "(", "f", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "_", ",", "ext", "=", "get_file_name_ext", "(", "f", ")", "\n", "copyfile", "(", "f", ",", "os", ".", "path", ".", "join", "(", "dst", ",", "rename", "+", "ext", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "'File not found'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.os_utils.copy_files": [[25, 37], ["os_utils.touch_dir", "enumerate", "os.path.exists", "Exception", "shutil.copyfile", "os_utils.get_file_name_ext", "shutil.copyfile", "os.path.join", "os.path.join", "os_utils.get_last_part"], "function", ["home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.os_utils.touch_dir", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.os_utils.get_file_name_ext", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.os_utils.get_last_part"], ["", "", "def", "copy_files", "(", "src_file_lst", ",", "dst", ",", "rename", "=", "None", ")", ":", "\n", "    ", "touch_dir", "(", "dst", ")", "\n", "for", "f_idx", ",", "f", "in", "enumerate", "(", "src_file_lst", ")", ":", "\n", "        ", "if", "os", ".", "path", ".", "exists", "(", "f", ")", ":", "\n", "# print(f)", "\n", "            ", "if", "rename", "==", "None", ":", "\n", "                ", "copyfile", "(", "f", ",", "os", ".", "path", ".", "join", "(", "dst", ",", "get_last_part", "(", "f", ")", ")", ")", "\n", "", "else", ":", "\n", "                ", "_", ",", "ext", "=", "get_file_name_ext", "(", "f", ")", "\n", "copyfile", "(", "f", ",", "os", ".", "path", ".", "join", "(", "dst", ",", "rename", "[", "f_idx", "]", "+", "ext", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'File not found'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.os_utils.dataset_tuples": [[38, 40], ["None"], "function", ["None"], ["", "", "", "def", "dataset_tuples", "(", "dataset_path", ")", ":", "\n", "    ", "return", "dataset_path", "+", "'_tuples_class'", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.os_utils.get_dirs": [[42, 44], ["sorted", "os.listdir", "os.path.isdir", "os.path.join"], "function", ["None"], ["", "def", "get_dirs", "(", "base_path", ")", ":", "\n", "    ", "return", "sorted", "(", "[", "f", "for", "f", "in", "os", ".", "listdir", "(", "base_path", ")", "if", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "base_path", ",", "f", ")", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.os_utils.get_files": [[46, 52], ["sorted", "os.path.join", "os.listdir", "os.listdir", "f.endswith", "f.endswith", "f.startswith", "f.startswith"], "function", ["None"], ["", "def", "get_files", "(", "base_path", ",", "extension", ",", "append_base", "=", "False", ")", ":", "\n", "    ", "if", "(", "append_base", ")", ":", "\n", "        ", "files", "=", "[", "os", ".", "path", ".", "join", "(", "base_path", ",", "f", ")", "for", "f", "in", "os", ".", "listdir", "(", "base_path", ")", "if", "(", "f", ".", "endswith", "(", "extension", ")", "and", "not", "f", ".", "startswith", "(", "'.'", ")", ")", "]", ";", "\n", "", "else", ":", "\n", "        ", "files", "=", "[", "f", "for", "f", "in", "os", ".", "listdir", "(", "base_path", ")", "if", "(", "f", ".", "endswith", "(", "extension", ")", "and", "not", "f", ".", "startswith", "(", "'.'", ")", ")", "]", ";", "\n", "", "return", "sorted", "(", "files", ")", ";", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.os_utils.csv_read": [[53, 63], ["open", "csv.reader", "next", "rows.append"], "function", ["None"], ["", "def", "csv_read", "(", "csv_file", ",", "has_header", "=", "False", ")", ":", "\n", "    ", "rows", "=", "[", "]", "\n", "with", "open", "(", "csv_file", ",", "'r'", ")", "as", "csvfile", ":", "\n", "        ", "file_content", "=", "csv", ".", "reader", "(", "csvfile", ")", "\n", "if", "has_header", ":", "\n", "            ", "header", "=", "next", "(", "file_content", ",", "None", ")", "# skip the headers", "\n", "", "for", "row", "in", "file_content", ":", "\n", "            ", "rows", ".", "append", "(", "row", ")", "\n", "\n", "", "", "return", "rows", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.os_utils.csv_write": [[64, 69], ["open", "csv.writer", "csv.writer.writerow"], "function", ["None"], ["", "def", "csv_write", "(", "csv_file", ",", "rows", ")", ":", "\n", "    ", "with", "open", "(", "csv_file", ",", "mode", "=", "'w'", ")", "as", "file", ":", "\n", "        ", "rows_writer", "=", "csv", ".", "writer", "(", "file", ",", "delimiter", "=", "','", ",", "quotechar", "=", "'\"'", ",", "quoting", "=", "csv", ".", "QUOTE_MINIMAL", ")", "\n", "for", "row", "in", "rows", ":", "\n", "            ", "rows_writer", ".", "writerow", "(", "row", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.os_utils.txt_read": [[72, 77], ["open", "f.readlines", "x.strip"], "function", ["None"], ["", "", "", "def", "txt_read", "(", "path", ")", ":", "\n", "    ", "with", "open", "(", "path", ")", "as", "f", ":", "\n", "        ", "content", "=", "f", ".", "readlines", "(", ")", "\n", "", "lines", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "content", "]", "\n", "return", "lines", ";", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.os_utils.txt_write": [[78, 84], ["open", "open.close", "open.write", "open.write"], "function", ["None"], ["", "def", "txt_write", "(", "path", ",", "lines", ",", "mode", "=", "'w'", ")", ":", "\n", "    ", "out_file", "=", "open", "(", "path", ",", "mode", ")", "\n", "for", "line", "in", "lines", ":", "\n", "        ", "out_file", ".", "write", "(", "line", ")", "\n", "out_file", ".", "write", "(", "'\\n'", ")", "\n", "", "out_file", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.os_utils.pkl_write": [[85, 87], ["pickle.dump", "open"], "function", ["None"], ["", "def", "pkl_write", "(", "path", ",", "data", ")", ":", "\n", "    ", "pickle", ".", "dump", "(", "data", ",", "open", "(", "path", ",", "\"wb\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.os_utils.hot_one_vector": [[89, 94], ["numpy.zeros", "numpy.arange"], "function", ["None"], ["", "def", "hot_one_vector", "(", "y", ",", "max", ")", ":", "\n", "\n", "    ", "labels_hot_vector", "=", "np", ".", "zeros", "(", "(", "y", ".", "shape", "[", "0", "]", ",", "max", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "labels_hot_vector", "[", "np", ".", "arange", "(", "y", ".", "shape", "[", "0", "]", ")", ",", "y", "]", "=", "1", "\n", "return", "labels_hot_vector", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.os_utils.pkl_read": [[95, 101], ["pickle.load", "os.path.exists", "open"], "function", ["None"], ["", "def", "pkl_read", "(", "path", ")", ":", "\n", "    ", "if", "(", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ")", ":", "\n", "        ", "return", "None", "\n", "\n", "", "data", "=", "pickle", ".", "load", "(", "open", "(", "path", ",", "'rb'", ")", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.os_utils.touch_dir": [[102, 105], ["os.path.exists", "os.makedirs"], "function", ["None"], ["", "def", "touch_dir", "(", "path", ")", ":", "\n", "    ", "if", "(", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ",", "exist_ok", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.os_utils.touch_file_dir": [[106, 113], ["os.path.exists", "os.path.dirname", "os.makedirs", "os.path.dirname"], "function", ["None"], ["", "", "def", "touch_file_dir", "(", "file_path", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "dirname", "(", "file_path", ")", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "file_path", ")", ",", "exist_ok", "=", "True", ")", "\n", "", "except", "OSError", "as", "exc", ":", "# Guard against race condition", "\n", "            ", "if", "exc", ".", "errno", "!=", "errno", ".", "EEXIST", ":", "\n", "                ", "raise", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.os_utils.last_tuple_idx": [[117, 120], ["len", "os.listdir", "f.endswith", "f.startswith"], "function", ["None"], ["", "", "", "", "def", "last_tuple_idx", "(", "path", ")", ":", "\n", "    ", "files", "=", "[", "f", "for", "f", "in", "os", ".", "listdir", "(", "path", ")", "if", "(", "f", ".", "endswith", "(", "'.jpg'", ")", "and", "not", "f", ".", "startswith", "(", "'.'", ")", ")", "]", "\n", "return", "len", "(", "files", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.os_utils.get_file_name_ext": [[121, 125], ["os.path.basename", "os.path.splitext"], "function", ["None"], ["", "def", "get_file_name_ext", "(", "inputFilepath", ")", ":", "\n", "    ", "filename_w_ext", "=", "os", ".", "path", ".", "basename", "(", "inputFilepath", ")", "\n", "filename", ",", "file_extension", "=", "os", ".", "path", ".", "splitext", "(", "filename_w_ext", ")", "\n", "return", "filename", ",", "file_extension", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.os_utils.get_latest_file": [[126, 129], ["os_utils.get_files", "max"], "function", ["home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.os_utils.get_files"], ["", "def", "get_latest_file", "(", "path", ",", "extension", "=", "''", ")", ":", "\n", "    ", "files", "=", "get_files", "(", "path", ",", "extension", "=", "extension", ",", "append_base", "=", "True", ")", "\n", "return", "max", "(", "files", ",", "key", "=", "os", ".", "path", ".", "getctime", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.os_utils.dir_empty": [[130, 135], ["os.listdir"], "function", ["None"], ["", "def", "dir_empty", "(", "path", ")", ":", "\n", "    ", "if", "os", ".", "listdir", "(", "path", ")", "==", "[", "]", ":", "\n", "        ", "return", "True", "\n", "", "else", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.os_utils.chkpt_exists": [[136, 141], ["len", "os.listdir", "f.find", "f.startswith"], "function", ["None"], ["", "", "def", "chkpt_exists", "(", "path", ")", ":", "\n", "    ", "files", "=", "[", "f", "for", "f", "in", "os", ".", "listdir", "(", "path", ")", "if", "(", "f", ".", "find", "(", "'.ckpt'", ")", ">", "0", "and", "not", "f", ".", "startswith", "(", "'.'", ")", ")", "]", "\n", "if", "len", "(", "files", ")", ":", "\n", "        ", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.os_utils.ask_yes_no_question": [[142, 151], ["print", "input", "print", "input.lower", "input.lower"], "function", ["None"], ["", "def", "ask_yes_no_question", "(", "question", ")", ":", "\n", "    ", "print", "(", "question", "+", "' [y/n] '", ")", "\n", "while", "True", ":", "\n", "        ", "answer", "=", "input", "(", ")", "\n", "if", "answer", ".", "lower", "(", ")", "in", "[", "'y'", ",", "'yes'", "]", ":", "\n", "            ", "return", "True", "\n", "", "elif", "answer", ".", "lower", "(", ")", "in", "[", "'n'", ",", "'no'", "]", ":", "\n", "            ", "return", "False", "\n", "", "print", "(", "'Please Enter a valid answer'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.os_utils.file_size": [[152, 154], ["os.path.getsize"], "function", ["None"], ["", "", "def", "file_size", "(", "file", ")", ":", "\n", "    ", "return", "os", ".", "path", ".", "getsize", "(", "file", ")", "", "", ""]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.net_utils.LabelSmoothing.__init__": [[107, 116], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.configs.base_config.Config.__init__"], ["def", "__init__", "(", "self", ",", "smoothing", "=", "0.0", ")", ":", "\n", "        ", "\"\"\"\n        Constructor for the LabelSmoothing module.\n\n        :param smoothing: label smoothing factor\n        \"\"\"", "\n", "super", "(", "LabelSmoothing", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "confidence", "=", "1.0", "-", "smoothing", "\n", "self", ".", "smoothing", "=", "smoothing", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.net_utils.LabelSmoothing.forward": [[117, 125], ["torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "nll_loss.squeeze.squeeze.squeeze", "loss.mean", "torch.nn.functional.log_softmax.gather", "torch.nn.functional.log_softmax.gather", "torch.nn.functional.log_softmax.gather", "torch.nn.functional.log_softmax.mean", "torch.nn.functional.log_softmax.mean", "torch.nn.functional.log_softmax.mean", "target.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "target", ")", ":", "\n", "        ", "logprobs", "=", "torch", ".", "nn", ".", "functional", ".", "log_softmax", "(", "x", ",", "dim", "=", "-", "1", ")", "\n", "\n", "nll_loss", "=", "-", "logprobs", ".", "gather", "(", "dim", "=", "-", "1", ",", "index", "=", "target", ".", "unsqueeze", "(", "1", ")", ")", "\n", "nll_loss", "=", "nll_loss", ".", "squeeze", "(", "1", ")", "\n", "smooth_loss", "=", "-", "logprobs", ".", "mean", "(", "dim", "=", "-", "1", ")", "\n", "loss", "=", "self", ".", "confidence", "*", "nll_loss", "+", "self", ".", "smoothing", "*", "smooth_loss", "\n", "return", "loss", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.net_utils.get_model": [[16, 22], ["args.logger.info"], "function", ["None"], ["def", "get_model", "(", "args", ")", ":", "\n", "\n", "    ", "args", ".", "logger", ".", "info", "(", "\"=> Creating model '{}'\"", ".", "format", "(", "args", ".", "arch", ")", ")", "\n", "model", "=", "models", ".", "__dict__", "[", "args", ".", "arch", "]", "(", "args", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.net_utils.move_model_to_gpu": [[25, 45], ["torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.nn.DataParallel().cuda.cuda", "torch.device", "torch.device", "torch.device", "args.logger.info", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel"], "function", ["None"], ["", "def", "move_model_to_gpu", "(", "args", ",", "model", ")", ":", "\n", "    ", "assert", "torch", ".", "cuda", ".", "is_available", "(", ")", ",", "\"CPU-only experiments currently unsupported\"", "\n", "# print('{}'.format(args.gpu))", "\n", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "model", "=", "model", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "", "elif", "args", ".", "multigpu", "is", "None", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", "", "else", ":", "\n", "# DataParallel will divide and allocate batch_size to all available GPUs", "\n", "        ", "args", ".", "logger", ".", "info", "(", "f\"=> Parallelizing on {args.multigpu} gpus\"", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "multigpu", "[", "0", "]", ")", "\n", "args", ".", "gpu", "=", "args", ".", "multigpu", "[", "0", "]", "\n", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ",", "device_ids", "=", "args", ".", "multigpu", ")", ".", "cuda", "(", "\n", "args", ".", "multigpu", "[", "0", "]", "\n", ")", "\n", "\n", "", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.net_utils.save_checkpoint": [[46, 59], ["pathlib.Path", "torch.save", "torch.save", "torch.save", "pathlib.Path.parent.exists", "os.makedirs", "shutil.copyfile", "str", "os.remove"], "function", ["None"], ["", "def", "save_checkpoint", "(", "state", ",", "is_best", ",", "filename", "=", "\"checkpoint.pth\"", ",", "save", "=", "False", ")", ":", "\n", "    ", "filename", "=", "pathlib", ".", "Path", "(", "filename", ")", "\n", "\n", "if", "not", "filename", ".", "parent", ".", "exists", "(", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "filename", ".", "parent", ",", "exist_ok", "=", "True", ")", "\n", "\n", "", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "\n", "if", "is_best", ":", "\n", "        ", "shutil", ".", "copyfile", "(", "filename", ",", "str", "(", "filename", ".", "parent", "/", "\"model_best.pth\"", ")", ")", "\n", "\n", "if", "not", "save", ":", "\n", "            ", "os", ".", "remove", "(", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.net_utils.get_lr": [[61, 63], ["None"], "function", ["None"], ["", "", "", "def", "get_lr", "(", "optimizer", ")", ":", "\n", "    ", "return", "optimizer", ".", "param_groups", "[", "0", "]", "[", "\"lr\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.net_utils.extract_slim": [[65, 74], ["zip", "split_model.named_modules", "model.named_modules", "hasattr", "hasattr", "src_m.extract_slim", "src_m.extract_slim"], "function", ["home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.layers.conv_type.SplitConv.extract_slim", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.layers.conv_type.SplitConv.extract_slim"], ["", "def", "extract_slim", "(", "split_model", ",", "model", ")", ":", "\n", "    ", "for", "(", "dst_n", ",", "dst_m", ")", ",", "(", "src_n", ",", "src_m", ")", "in", "zip", "(", "split_model", ".", "named_modules", "(", ")", ",", "model", ".", "named_modules", "(", ")", ")", ":", "\n", "        ", "if", "hasattr", "(", "src_m", ",", "\"weight\"", ")", "and", "src_m", ".", "weight", "is", "not", "None", ":", "\n", "            ", "if", "hasattr", "(", "src_m", ",", "\"mask\"", ")", ":", "\n", "                ", "src_m", ".", "extract_slim", "(", "dst_m", ",", "src_n", ",", "dst_n", ")", "\n", "# if src_m.__class__ == conv_type.SplitConv:", "\n", "# elif src_m.__class__ == linear_type.SplitLinear:", "\n", "", "elif", "src_m", ".", "__class__", "==", "bn_type", ".", "SplitBatchNorm", ":", "## BatchNorm has bn_maks not mask", "\n", "                ", "src_m", ".", "extract_slim", "(", "dst_m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.net_utils.split_reinitialize": [[77, 98], ["cfg.logger.info", "model.named_modules", "cfg.logger.info", "hasattr", "hasattr", "torch.sum", "torch.sum", "torch.sum", "m.reset_mask", "cfg.logger.info", "cfg.logger.info", "m.split_reinitialize", "NotImplemented", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "function", ["home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.net_utils.reset_mask", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.layers.conv_type.SplitConv.split_reinitialize"], ["", "", "", "", "def", "split_reinitialize", "(", "cfg", ",", "model", ",", "reset_hypothesis", "=", "False", ")", ":", "\n", "    ", "cfg", ".", "logger", ".", "info", "(", "'split_reinitialize'", ")", "\n", "# zero_reset = True", "\n", "if", "cfg", ".", "evolve_mode", "==", "'zero'", ":", "\n", "        ", "cfg", ".", "logger", ".", "info", "(", "'WARNING: ZERO RESET is not optimal'", ")", "\n", "", "for", "n", ",", "m", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "        ", "if", "hasattr", "(", "m", ",", "\"weight\"", ")", "and", "m", ".", "weight", "is", "not", "None", ":", "\n", "            ", "if", "hasattr", "(", "m", ",", "\"mask\"", ")", ":", "## Conv and Linear but not BN", "\n", "                ", "assert", "m", ".", "split_rate", "<", "1.0", "\n", "\n", "if", "reset_hypothesis", "and", "(", "m", ".", "__class__", "==", "conv_type", ".", "SplitConv", "or", "m", ".", "__class__", "==", "linear_type", ".", "SplitLinear", ")", ":", "\n", "                    ", "before_sum", "=", "torch", ".", "sum", "(", "m", ".", "mask", ")", "\n", "m", ".", "reset_mask", "(", ")", "\n", "cfg", ".", "logger", ".", "info", "(", "'reset_hypothesis : True {} : {} -> {}'", ".", "format", "(", "n", ",", "before_sum", ",", "torch", ".", "sum", "(", "m", ".", "mask", ")", ")", ")", "\n", "", "else", ":", "\n", "                    ", "cfg", ".", "logger", ".", "info", "(", "'reset_hypothesis : False {} : {}'", ".", "format", "(", "n", ",", "torch", ".", "sum", "(", "m", ".", "mask", ")", ")", ")", "\n", "\n", "", "if", "m", ".", "__class__", "==", "conv_type", ".", "SplitConv", "or", "m", ".", "__class__", "==", "linear_type", ".", "SplitLinear", ":", "\n", "                    ", "m", ".", "split_reinitialize", "(", "cfg", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "NotImplemented", "(", "'Invalid layer {}'", ".", "format", "(", "m", ".", "__class__", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.net_utils.reset_mask": [[126, 138], ["cfg.logger.info", "model.named_modules", "hasattr", "hasattr", "cfg.logger.info", "m.reset_mask", "cfg.logger.info", "m.reset_bias_mask"], "function", ["home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.net_utils.reset_mask"], ["", "", "def", "reset_mask", "(", "cfg", ",", "model", ")", ":", "\n", "    ", "cfg", ".", "logger", ".", "info", "(", "\"=> reseting model mask\"", ")", "\n", "\n", "for", "n", ",", "m", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "        ", "if", "hasattr", "(", "m", ",", "\"mask\"", ")", ":", "\n", "            ", "cfg", ".", "logger", ".", "info", "(", "f\"==> reset {n}.mask\"", ")", "\n", "# m.mask.requires_grad = True", "\n", "m", ".", "reset_mask", "(", ")", "\n", "\n", "", "if", "hasattr", "(", "m", ",", "\"bias_mask\"", ")", ":", "\n", "            ", "cfg", ".", "logger", ".", "info", "(", "f\"==> reset {n}.bias_mask\"", ")", "\n", "m", ".", "reset_bias_mask", "(", ")", "\n", "# m.bias_mask.requires_grad = True", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.net_utils.load_pretrained": [[140, 164], ["os.path.isfile", "cfg.logger.info", "model.state_dict", "pretrained.items", "model.state_dict.update", "model.load_state_dict", "cfg.logger.info", "torch.load", "torch.load", "torch.load", "cfg.logger.info", "pretrained.items", "torch.device", "torch.device", "torch.device", "v.size", "model_state_dict[].size", "v.size", "model_state_dict[].size"], "function", ["home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.logging.VarianceMeter.update", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.split_resnet.load_state_dict"], ["", "", "", "def", "load_pretrained", "(", "pretrained_path", ",", "gpus", ",", "model", ",", "cfg", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "isfile", "(", "pretrained_path", ")", ":", "\n", "        ", "cfg", ".", "logger", ".", "info", "(", "\"=> loading pretrained weights from '{}'\"", ".", "format", "(", "pretrained_path", ")", ")", "\n", "pretrained", "=", "torch", ".", "load", "(", "\n", "pretrained_path", ",", "\n", "map_location", "=", "torch", ".", "device", "(", "\"cuda:{}\"", ".", "format", "(", "gpus", ")", ")", ",", "\n", ")", "[", "\"state_dict\"", "]", "\n", "skip", "=", "' '", "\n", "# skip = 'mask'", "\n", "model_state_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "for", "k", ",", "v", "in", "pretrained", ".", "items", "(", ")", ":", "\n", "# if k not in model_state_dict or v.size() != model_state_dict[k].size():", "\n", "            ", "if", "k", "not", "in", "model_state_dict", "or", "v", ".", "size", "(", ")", "!=", "model_state_dict", "[", "k", "]", ".", "size", "(", ")", "or", "skip", "in", "k", ":", "\n", "                ", "cfg", ".", "logger", ".", "info", "(", "\"IGNORE: {}\"", ".", "format", "(", "k", ")", ")", "\n", "", "", "pretrained", "=", "{", "\n", "k", ":", "v", "\n", "for", "k", ",", "v", "in", "pretrained", ".", "items", "(", ")", "\n", "if", "(", "k", "in", "model_state_dict", "and", "v", ".", "size", "(", ")", "==", "model_state_dict", "[", "k", "]", ".", "size", "(", ")", "and", "skip", "not", "in", "k", ")", "\n", "}", "\n", "model_state_dict", ".", "update", "(", "pretrained", ")", "\n", "model", ".", "load_state_dict", "(", "model_state_dict", ")", "\n", "\n", "", "else", ":", "\n", "        ", "cfg", ".", "logger", ".", "info", "(", "\"=> no pretrained weights found at '{}'\"", ".", "format", "(", "pretrained_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.log_utils._AnsiColorStreamHandler._get_color": [[50, 58], ["None"], "methods", ["None"], ["@", "classmethod", "\n", "def", "_get_color", "(", "cls", ",", "level", ")", ":", "\n", "        ", "if", "level", ">=", "logging", ".", "CRITICAL", ":", "return", "cls", ".", "CRITICAL", "\n", "elif", "level", ">=", "logging", ".", "ERROR", ":", "return", "cls", ".", "ERROR", "\n", "elif", "level", ">=", "logging", ".", "WARNING", ":", "return", "cls", ".", "WARNING", "\n", "elif", "level", ">=", "logging", ".", "INFO", ":", "return", "cls", ".", "INFO", "\n", "elif", "level", ">=", "logging", ".", "DEBUG", ":", "return", "cls", ".", "DEBUG", "\n", "else", ":", "return", "cls", ".", "DEFAULT", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.log_utils._AnsiColorStreamHandler.__init__": [[59, 61], ["logging.StreamHandler.__init__"], "methods", ["home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.configs.base_config.Config.__init__"], ["", "def", "__init__", "(", "self", ",", "stream", "=", "None", ")", ":", "\n", "        ", "logging", ".", "StreamHandler", ".", "__init__", "(", "self", ",", "stream", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.log_utils._AnsiColorStreamHandler.format": [[62, 66], ["logging.StreamHandler.format", "log_utils._AnsiColorStreamHandler._get_color", "log_utils._AnsiColorStreamHandler.is_tty"], "methods", ["home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.log_utils._AnsiColorStreamHandler.format", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.log_utils._WinColorStreamHandler._get_color", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.log_utils._AnsiColorStreamHandler.is_tty"], ["", "def", "format", "(", "self", ",", "record", ")", ":", "\n", "        ", "text", "=", "logging", ".", "StreamHandler", ".", "format", "(", "self", ",", "record", ")", "\n", "color", "=", "self", ".", "_get_color", "(", "record", ".", "levelno", ")", "\n", "return", "(", "color", "+", "text", "+", "self", ".", "DEFAULT", ")", "if", "self", ".", "is_tty", "(", ")", "else", "text", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.log_utils._AnsiColorStreamHandler.is_tty": [[67, 70], ["getattr", "getattr."], "methods", ["None"], ["", "def", "is_tty", "(", "self", ")", ":", "\n", "        ", "isatty", "=", "getattr", "(", "self", ".", "stream", ",", "'isatty'", ",", "None", ")", "\n", "return", "isatty", "and", "isatty", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.log_utils._WinColorStreamHandler._get_color": [[102, 110], ["None"], "methods", ["None"], ["@", "classmethod", "\n", "def", "_get_color", "(", "cls", ",", "level", ")", ":", "\n", "        ", "if", "level", ">=", "logging", ".", "CRITICAL", ":", "return", "cls", ".", "CRITICAL", "\n", "elif", "level", ">=", "logging", ".", "ERROR", ":", "return", "cls", ".", "ERROR", "\n", "elif", "level", ">=", "logging", ".", "WARNING", ":", "return", "cls", ".", "WARNING", "\n", "elif", "level", ">=", "logging", ".", "INFO", ":", "return", "cls", ".", "INFO", "\n", "elif", "level", ">=", "logging", ".", "DEBUG", ":", "return", "cls", ".", "DEBUG", "\n", "else", ":", "return", "cls", ".", "DEFAULT", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.log_utils._WinColorStreamHandler._set_color": [[111, 114], ["ctypes.windll.kernel32.SetConsoleTextAttribute"], "methods", ["None"], ["", "def", "_set_color", "(", "self", ",", "code", ")", ":", "\n", "        ", "import", "ctypes", "\n", "ctypes", ".", "windll", ".", "kernel32", ".", "SetConsoleTextAttribute", "(", "self", ".", "_outhdl", ",", "code", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.log_utils._WinColorStreamHandler.__init__": [[115, 125], ["logging.StreamHandler.__init__", "ctypes.util.find_msvcrt", "ctypes.cdll.LoadLibrary", "ctypes.cdll.LoadLibrary._get_osfhandle", "ctypes.util.find_library", "log_utils._WinColorStreamHandler.stream.fileno"], "methods", ["home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.configs.base_config.Config.__init__"], ["", "def", "__init__", "(", "self", ",", "stream", "=", "None", ")", ":", "\n", "        ", "logging", ".", "StreamHandler", ".", "__init__", "(", "self", ",", "stream", ")", "\n", "# get file handle for the stream", "\n", "import", "ctypes", ",", "ctypes", ".", "util", "\n", "# for some reason find_msvcrt() sometimes doesn't find msvcrt.dll on my system?", "\n", "crtname", "=", "ctypes", ".", "util", ".", "find_msvcrt", "(", ")", "\n", "if", "not", "crtname", ":", "\n", "            ", "crtname", "=", "ctypes", ".", "util", ".", "find_library", "(", "\"msvcrt\"", ")", "\n", "", "crtlib", "=", "ctypes", ".", "cdll", ".", "LoadLibrary", "(", "crtname", ")", "\n", "self", ".", "_outhdl", "=", "crtlib", ".", "_get_osfhandle", "(", "self", ".", "stream", ".", "fileno", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.log_utils._WinColorStreamHandler.emit": [[126, 131], ["log_utils._WinColorStreamHandler._get_color", "log_utils._WinColorStreamHandler._set_color", "logging.StreamHandler.emit", "log_utils._WinColorStreamHandler._set_color"], "methods", ["home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.log_utils._WinColorStreamHandler._get_color", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.log_utils._WinColorStreamHandler._set_color", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.log_utils._WinColorStreamHandler.emit", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.log_utils._WinColorStreamHandler._set_color"], ["", "def", "emit", "(", "self", ",", "record", ")", ":", "\n", "        ", "color", "=", "self", ".", "_get_color", "(", "record", ".", "levelno", ")", "\n", "self", ".", "_set_color", "(", "color", ")", "\n", "logging", ".", "StreamHandler", ".", "emit", "(", "self", ",", "record", ")", "\n", "self", ".", "_set_color", "(", "self", ".", "FOREGROUND_WHITE", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.log_utils.get_logging_dict": [[139, 174], ["None"], "function", ["None"], ["", "def", "get_logging_dict", "(", "name", ",", "mode", "=", "'w'", ")", ":", "\n", "    ", "return", "{", "\n", "'version'", ":", "1", ",", "\n", "'disable_existing_loggers'", ":", "False", ",", "\n", "'formatters'", ":", "{", "\n", "'standard'", ":", "{", "\n", "'format'", ":", "'%(asctime)s [%(levelname)s] %(name)s: %(message)s'", "\n", "}", ",", "\n", "}", ",", "\n", "'handlers'", ":", "{", "\n", "'stderr'", ":", "{", "\n", "'level'", ":", "'INFO'", ",", "\n", "'formatter'", ":", "'standard'", ",", "\n", "'class'", ":", "'utils.log_utils.ColorStreamHandler'", ",", "\n", "'stream'", ":", "'ext://sys.stderr'", ",", "\n", "}", ",", "\n", "'logfile'", ":", "{", "\n", "'level'", ":", "'DEBUG'", ",", "\n", "'formatter'", ":", "'standard'", ",", "\n", "'class'", ":", "'logging.FileHandler'", ",", "\n", "'filename'", ":", "name", ",", "\n", "'mode'", ":", "mode", ",", "\n", "}", "\n", "}", ",", "\n", "'loggers'", ":", "{", "\n", "''", ":", "{", "\n", "'handlers'", ":", "[", "'stderr'", ",", "'logfile'", "]", ",", "\n", "'level'", ":", "'DEBUG'", ",", "\n", "'propagate'", ":", "True", "\n", "}", ",", "\n", "\n", "# extra ones to shut up.", "\n", "'tensorflow'", ":", "{", "\n", "'handlers'", ":", "[", "'stderr'", ",", "'logfile'", "]", ",", "\n", "'level'", ":", "'INFO'", ",", "\n", "}", ",", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.log_utils.create_logger": [[178, 184], ["logging.config.dictConfig", "os.basename", "logging.getLogger", "log_utils.get_logging_dict"], "function", ["home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.log_utils.get_logging_dict"], ["", "def", "create_logger", "(", "log_file", ")", ":", "\n", "    ", "import", "logging", ".", "config", "\n", "logging", ".", "config", ".", "dictConfig", "(", "get_logging_dict", "(", "log_file", ")", ")", "\n", "filename", "=", "osp", ".", "basename", "(", "log_file", ")", "\n", "logger", "=", "logging", ".", "getLogger", "(", "filename", ")", "\n", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.log_utils.get_logger_by_tag": [[185, 188], ["logging.getLogger"], "function", ["None"], ["", "def", "get_logger_by_tag", "(", "tag", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "tag", ")", "\n", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.model_profile.count_conv2d": [[7, 27], ["y.numel", "torch.Tensor", "torch.Tensor", "x.size", "int"], "function", ["None"], ["def", "count_conv2d", "(", "m", ",", "x", ",", "y", ")", ":", "\n", "    ", "x", "=", "x", "[", "0", "]", "\n", "\n", "cin", "=", "m", ".", "in_channels", "//", "m", ".", "groups", "\n", "cout", "=", "m", ".", "out_channels", "//", "m", ".", "groups", "\n", "kh", ",", "kw", "=", "m", ".", "kernel_size", "\n", "batch_size", "=", "x", ".", "size", "(", ")", "[", "0", "]", "\n", "\n", "# ops per output element", "\n", "kernel_mul", "=", "kh", "*", "kw", "*", "cin", "\n", "kernel_add", "=", "kh", "*", "kw", "*", "cin", "-", "1", "\n", "bias_ops", "=", "1", "if", "m", ".", "bias", "is", "not", "None", "else", "0", "\n", "ops", "=", "kernel_mul", "+", "kernel_add", "+", "bias_ops", "\n", "\n", "# total ops", "\n", "num_out_elements", "=", "y", ".", "numel", "(", ")", "\n", "total_ops", "=", "num_out_elements", "*", "ops", "\n", "\n", "# incase same conv is used multiple times", "\n", "m", ".", "total_ops", "+=", "torch", ".", "Tensor", "(", "[", "int", "(", "total_ops", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.model_profile.count_bn2d": [[28, 37], ["x.numel", "torch.Tensor", "torch.Tensor", "int"], "function", ["None"], ["", "def", "count_bn2d", "(", "m", ",", "x", ",", "y", ")", ":", "\n", "    ", "x", "=", "x", "[", "0", "]", "\n", "\n", "nelements", "=", "x", ".", "numel", "(", ")", "\n", "total_sub", "=", "nelements", "\n", "total_div", "=", "nelements", "\n", "total_ops", "=", "total_sub", "+", "total_div", "\n", "\n", "m", ".", "total_ops", "+=", "torch", ".", "Tensor", "(", "[", "int", "(", "total_ops", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.model_profile.count_relu": [[38, 45], ["x.numel", "torch.Tensor", "torch.Tensor", "int"], "function", ["None"], ["", "def", "count_relu", "(", "m", ",", "x", ",", "y", ")", ":", "\n", "    ", "x", "=", "x", "[", "0", "]", "\n", "\n", "nelements", "=", "x", ".", "numel", "(", ")", "\n", "total_ops", "=", "nelements", "\n", "\n", "m", ".", "total_ops", "+=", "torch", ".", "Tensor", "(", "[", "int", "(", "total_ops", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.model_profile.count_softmax": [[46, 57], ["x.size", "torch.Tensor", "torch.Tensor", "int"], "function", ["None"], ["", "def", "count_softmax", "(", "m", ",", "x", ",", "y", ")", ":", "\n", "    ", "x", "=", "x", "[", "0", "]", "\n", "\n", "batch_size", ",", "nfeatures", "=", "x", ".", "size", "(", ")", "\n", "\n", "total_exp", "=", "nfeatures", "\n", "total_add", "=", "nfeatures", "-", "1", "\n", "total_div", "=", "nfeatures", "\n", "total_ops", "=", "batch_size", "*", "(", "total_exp", "+", "total_add", "+", "total_div", ")", "\n", "\n", "m", ".", "total_ops", "+=", "torch", ".", "Tensor", "(", "[", "int", "(", "total_ops", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.model_profile.count_maxpool": [[58, 64], ["y.numel", "torch.Tensor", "torch.Tensor", "torch.prod", "torch.prod", "torch.Tensor", "torch.Tensor", "int"], "function", ["None"], ["", "def", "count_maxpool", "(", "m", ",", "x", ",", "y", ")", ":", "\n", "    ", "kernel_ops", "=", "torch", ".", "prod", "(", "torch", ".", "Tensor", "(", "[", "m", ".", "kernel_size", "]", ")", ")", "-", "1", "\n", "num_elements", "=", "y", ".", "numel", "(", ")", "\n", "total_ops", "=", "kernel_ops", "*", "num_elements", "\n", "\n", "m", ".", "total_ops", "+=", "torch", ".", "Tensor", "(", "[", "int", "(", "total_ops", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.model_profile.count_avgpool": [[65, 73], ["y.numel", "torch.Tensor", "torch.Tensor", "torch.prod", "torch.prod", "torch.Tensor", "torch.Tensor", "int"], "function", ["None"], ["", "def", "count_avgpool", "(", "m", ",", "x", ",", "y", ")", ":", "\n", "    ", "total_add", "=", "torch", ".", "prod", "(", "torch", ".", "Tensor", "(", "[", "m", ".", "kernel_size", "]", ")", ")", "-", "1", "\n", "total_div", "=", "1", "\n", "kernel_ops", "=", "total_add", "+", "total_div", "\n", "num_elements", "=", "y", ".", "numel", "(", ")", "\n", "total_ops", "=", "kernel_ops", "*", "num_elements", "\n", "\n", "m", ".", "total_ops", "+=", "torch", ".", "Tensor", "(", "[", "int", "(", "total_ops", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.model_profile.count_linear": [[74, 82], ["y.numel", "torch.Tensor", "torch.Tensor", "int"], "function", ["None"], ["", "def", "count_linear", "(", "m", ",", "x", ",", "y", ")", ":", "\n", "# per output element", "\n", "    ", "total_mul", "=", "m", ".", "in_features", "\n", "total_add", "=", "m", ".", "in_features", "-", "1", "\n", "num_elements", "=", "y", ".", "numel", "(", ")", "\n", "total_ops", "=", "(", "total_mul", "+", "total_add", ")", "*", "num_elements", "\n", "\n", "m", ".", "total_ops", "+=", "torch", ".", "Tensor", "(", "[", "int", "(", "total_ops", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.model_profile.profile": [[83, 128], ["model.eval", "model.apply", "model", "model.modules", "m.register_buffer", "m.register_buffer", "m.parameters", "isinstance", "len", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.Tensor", "torch.Tensor", "m.register_forward_hook", "isinstance", "len", "list", "m.register_forward_hook", "isinstance", "list", "m.children", "p.numel", "m.register_forward_hook", "isinstance", "m.children", "m.register_forward_hook", "isinstance", "m.register_forward_hook", "isinstance", "m.register_forward_hook", "isinstance", "print"], "function", ["None"], ["", "def", "profile", "(", "model", ",", "input_zero_tensor", ",", "custom_ops", "=", "{", "}", ")", ":", "\n", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "\n", "def", "add_hooks", "(", "m", ")", ":", "\n", "        ", "if", "len", "(", "list", "(", "m", ".", "children", "(", ")", ")", ")", ">", "0", ":", "return", "\n", "m", ".", "register_buffer", "(", "'total_ops'", ",", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "m", ".", "register_buffer", "(", "'total_params'", ",", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "\n", "for", "p", "in", "m", ".", "parameters", "(", ")", ":", "\n", "            ", "m", ".", "total_params", "+=", "torch", ".", "Tensor", "(", "[", "p", ".", "numel", "(", ")", "]", ")", "\n", "\n", "", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "            ", "m", ".", "register_forward_hook", "(", "count_conv2d", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "            ", "m", ".", "register_forward_hook", "(", "count_bn2d", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "ReLU", ")", ":", "\n", "            ", "m", ".", "register_forward_hook", "(", "count_relu", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "MaxPool1d", ",", "nn", ".", "MaxPool2d", ",", "nn", ".", "MaxPool3d", ")", ")", ":", "\n", "            ", "m", ".", "register_forward_hook", "(", "count_maxpool", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "AvgPool1d", ",", "nn", ".", "AvgPool2d", ",", "nn", ".", "AvgPool3d", ")", ")", ":", "\n", "            ", "m", ".", "register_forward_hook", "(", "count_avgpool", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "m", ".", "register_forward_hook", "(", "count_linear", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "Dropout", ",", "nn", ".", "Dropout2d", ",", "nn", ".", "Dropout3d", ")", ")", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"Not implemented for \"", ",", "m", ")", "\n", "\n", "", "", "model", ".", "apply", "(", "add_hooks", ")", "\n", "\n", "\n", "model", "(", "input_zero_tensor", ")", "\n", "\n", "total_ops", "=", "0", "\n", "total_params", "=", "0", "\n", "for", "m", "in", "model", ".", "modules", "(", ")", ":", "\n", "        ", "if", "len", "(", "list", "(", "m", ".", "children", "(", ")", ")", ")", ">", "0", ":", "continue", "\n", "# print(m,m.total_ops)", "\n", "total_ops", "+=", "m", ".", "total_ops", "\n", "total_params", "+=", "m", ".", "total_params", "\n", "", "total_ops", "=", "total_ops", "\n", "total_params", "=", "total_params", "\n", "\n", "return", "total_ops", ",", "total_params", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.model_profile.main": [[129, 138], ["torchvision.alexnet", "torch.zeros", "torch.zeros", "model_profile.profile", "print", "print"], "function", ["home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.model_profile.profile"], ["", "def", "main", "(", "args", ")", ":", "\n", "# model = torch.load(args.model)", "\n", "# model = models.resnet18(pretrained=False)", "\n", "# model = models.vgg19(pretrained=False)", "\n", "    ", "model", "=", "models", ".", "alexnet", "(", "pretrained", "=", "False", ")", "\n", "dummy_input_tensor", "=", "torch", ".", "zeros", "(", "(", "1", ",", "3", ",", "224", ",", "224", ")", ")", "\n", "total_ops", ",", "total_params", "=", "profile", "(", "model", ",", "dummy_input_tensor", ")", "\n", "print", "(", "\"#Ops: %f GOps\"", "%", "(", "total_ops", "/", "1e9", ")", ")", "\n", "print", "(", "\"#Parameters: %f M\"", "%", "(", "total_params", "/", "1e6", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.gpu_utils.GPU_Utils.__init__": [[4, 7], ["nvidia_smi.nvmlInit", "nvidia_smi.nvmlDeviceGetHandleByIndex"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "gpu_index", "=", "0", ")", ":", "\n", "        ", "nvidia_smi", ".", "nvmlInit", "(", ")", "\n", "self", ".", "handle", "=", "nvidia_smi", ".", "nvmlDeviceGetHandleByIndex", "(", "gpu_index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.gpu_utils.GPU_Utils.gpu_mem_usage": [[8, 11], ["nvidia_smi.nvmlDeviceGetMemoryInfo"], "methods", ["None"], ["", "def", "gpu_mem_usage", "(", "self", ")", ":", "\n", "        ", "mem_res", "=", "nvidia_smi", ".", "nvmlDeviceGetMemoryInfo", "(", "self", ".", "handle", ")", "\n", "return", "mem_res", ".", "used", "/", "(", "1024", "**", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.gpu_utils.GPU_Utils.gpu_utilization": [[12, 15], ["nvidia_smi.nvmlDeviceGetUtilizationRates"], "methods", ["None"], ["", "def", "gpu_utilization", "(", "self", ")", ":", "\n", "        ", "gpu_util", "=", "nvidia_smi", ".", "nvmlDeviceGetUtilizationRates", "(", "self", ".", "handle", ")", "\n", "return", "gpu_util", ".", "gpu", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.path_utils.get_checkpoint_dir": [[8, 16], ["os.basename", "os.exists", "os.abspath"], "function", ["None"], ["def", "get_checkpoint_dir", "(", ")", ":", "\n", "\n", "    ", "project_name", "=", "osp", ".", "basename", "(", "osp", ".", "abspath", "(", "'./'", ")", ")", "\n", "ckpt_dir", "=", "constants", ".", "checkpoints_dir", "\n", "assert", "osp", ".", "exists", "(", "ckpt_dir", ")", ",", "(", "'{} does not exists'", ".", "format", "(", "ckpt_dir", ")", ")", "\n", "\n", "ckpt_dir", "=", "f'{ckpt_dir}/{project_name}'", "\n", "return", "ckpt_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.path_utils.get_datasets_dir": [[19, 55], ["os.exists", "NotImplementedError"], "function", ["None"], ["", "def", "get_datasets_dir", "(", "dataset_name", ")", ":", "\n", "    ", "datasets_dir", "=", "constants", ".", "datasets_dir", "\n", "\n", "assert", "osp", ".", "exists", "(", "datasets_dir", ")", ",", "(", "'{} does not exists'", ".", "format", "(", "datasets_dir", ")", ")", "\n", "if", "dataset_name", "==", "'CUB200'", "or", "dataset_name", "==", "'CUB200_RET'", ":", "\n", "        ", "dataset_dir", "=", "'CUB_200_2011'", "\n", "", "elif", "dataset_name", "==", "'CARS_RET'", ":", "\n", "        ", "dataset_dir", "=", "'stanford_cars'", "\n", "", "elif", "dataset_name", "==", "'stanford'", ":", "\n", "        ", "dataset_dir", "=", "'Stanford_Online_Products'", "\n", "", "elif", "dataset_name", "==", "'imagenet'", ":", "\n", "        ", "dataset_dir", "=", "'imagenet/ILSVRC/Data/CLS-LOC'", "\n", "", "elif", "dataset_name", "==", "'market'", ":", "\n", "        ", "dataset_dir", "=", "'Market-1501-v15.09.15'", "\n", "", "elif", "dataset_name", "==", "'Flower102'", "or", "dataset_name", "==", "'Flower102Pytorch'", ":", "\n", "        ", "dataset_dir", "=", "'flower102'", "\n", "", "elif", "dataset_name", "==", "'HAM'", ":", "\n", "        ", "dataset_dir", "=", "'HAM'", "\n", "", "elif", "dataset_name", "==", "'FCAM'", ":", "\n", "        ", "dataset_dir", "=", "'FCAM'", "\n", "", "elif", "dataset_name", "==", "'FCAMD'", ":", "\n", "        ", "dataset_dir", "=", "'FCAMD'", "\n", "", "elif", "dataset_name", "==", "'Dog120'", ":", "\n", "        ", "dataset_dir", "=", "'stanford_dogs'", "\n", "", "elif", "dataset_name", "in", "[", "'MIT67'", ",", "'MINI_MIT67'", "]", ":", "\n", "        ", "dataset_dir", "=", "'mit67'", "\n", "", "elif", "dataset_name", "==", "'Aircraft100'", "or", "dataset_name", "==", "'Aircraft100Pytorch'", ":", "\n", "        ", "dataset_dir", "=", "'aircrafts'", "\n", "", "elif", "dataset_name", "==", "'ImageNet'", ":", "\n", "        ", "dataset_dir", "=", "'imagenet/ILSVRC/Data/CLS-LOC'", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'Invalid dataset name {}'", ".", "format", "(", "dataset_name", ")", ")", "\n", "\n", "", "datasets_dir", "=", "'{}/{}'", ".", "format", "(", "datasets_dir", ",", "dataset_dir", ")", "\n", "\n", "return", "datasets_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.path_utils.get_directories": [[58, 97], ["path_utils.get_directories._run_dir_exists"], "function", ["None"], ["", "def", "get_directories", "(", "args", ",", "generation", ")", ":", "\n", "# if args.config_file is None or args.name is None:", "\n", "    ", "if", "args", ".", "config_file", "is", "None", "and", "args", ".", "name", "is", "None", ":", "\n", "        ", "raise", "ValueError", "(", "\"Must have name and config\"", ")", "\n", "\n", "# config = pathlib.Path(args.config_file).stem", "\n", "", "config", "=", "args", ".", "name", "\n", "if", "args", ".", "log_dir", "is", "None", ":", "\n", "        ", "run_base_dir", "=", "pathlib", ".", "Path", "(", "\n", "f\"{get_checkpoint_dir()}/{args.name}/gen_{generation}/split_rate={args.split_rate}\"", "\n", ")", "\n", "", "else", ":", "\n", "        ", "run_base_dir", "=", "pathlib", ".", "Path", "(", "\n", "f\"{args.log_dir}/{args.name}/gen_{generation}/split_rate={args.split_rate}\"", "\n", ")", "\n", "\n", "", "def", "_run_dir_exists", "(", "run_base_dir", ")", ":", "\n", "        ", "log_base_dir", "=", "run_base_dir", "/", "\"logs\"", "\n", "ckpt_base_dir", "=", "run_base_dir", "/", "\"checkpoints\"", "\n", "\n", "return", "log_base_dir", ".", "exists", "(", ")", "or", "ckpt_base_dir", ".", "exists", "(", ")", "\n", "\n", "# if _run_dir_exists(run_base_dir):", "\n", "", "rep_count", "=", "0", "\n", "while", "_run_dir_exists", "(", "run_base_dir", "/", "'{:04d}_g{:01d}'", ".", "format", "(", "rep_count", ",", "args", ".", "gpu", ")", ")", ":", "\n", "        ", "rep_count", "+=", "1", "\n", "\n", "# date_time_int = int(datetime.now().strftime('%Y%m%d%H%M'))", "\n", "", "run_base_dir", "=", "run_base_dir", "/", "'{:04d}_g{:01d}'", ".", "format", "(", "rep_count", ",", "args", ".", "gpu", ")", "\n", "\n", "log_base_dir", "=", "run_base_dir", "/", "\"logs\"", "\n", "ckpt_base_dir", "=", "run_base_dir", "/", "\"checkpoints\"", "\n", "\n", "if", "not", "run_base_dir", ".", "exists", "(", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "run_base_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "", "(", "run_base_dir", "/", "\"settings.txt\"", ")", ".", "write_text", "(", "str", "(", "args", ")", ")", "\n", "\n", "return", "run_base_dir", ",", "ckpt_base_dir", ",", "log_base_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.eval_utils.accuracy": [[4, 19], ["torch.no_grad", "max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].reshape().float().sum", "res.append", "correct[].reshape().float().sum.mul_", "target.view", "correct[].reshape().float", "correct[].reshape"], "function", ["None"], ["def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the accuracy over the k top predictions for the specified values of k\"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "            ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "reshape", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.layers.bn_type.NonAffineBatchNorm.__init__": [[10, 12], ["torch.BatchNorm2d.__init__"], "methods", ["home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.configs.base_config.Config.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "NonAffineBatchNorm", ",", "self", ")", ".", "__init__", "(", "dim", ",", "affine", "=", "False", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.layers.bn_type.SplitBatchNorm.__init__": [[14, 29], ["kwargs.pop", "kwargs.pop", "torch.BatchNorm2d.__init__", "numpy.zeros", "bn_type.SplitBatchNorm.in_channels_order.split", "torch.Parameter", "torch.Parameter", "int", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "bn_type.SplitBatchNorm.weight.size", "math.ceil", "int"], "methods", ["home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.configs.base_config.Config.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "in_channels_order", "=", "kwargs", ".", "pop", "(", "'in_channels_order'", ",", "None", ")", "\n", "split_rate", "=", "kwargs", ".", "pop", "(", "'split_rate'", ",", "None", ")", "\n", "super", "(", "SplitBatchNorm", ",", "self", ")", ".", "__init__", "(", "dim", ",", "affine", "=", "True", ",", "**", "kwargs", ")", "\n", "\n", "if", "self", ".", "in_channels_order", "is", "not", "None", ":", "\n", "            ", "assert", "split_rate", "is", "not", "None", ",", "'Should not be none if in_channels_order is not None'", "\n", "mask", "=", "np", ".", "zeros", "(", "self", ".", "weight", ".", "size", "(", ")", "[", "0", "]", ")", "\n", "conv_concat", "=", "self", ".", "in_channels_order", ".", "split", "(", "','", ")", "\n", "start_ch", "=", "0", "\n", "for", "conv", "in", "conv_concat", ":", "\n", "                ", "mask", "[", "start_ch", ":", "start_ch", "+", "math", ".", "ceil", "(", "int", "(", "conv", ")", "*", "split_rate", ")", "]", "=", "1", "\n", "start_ch", "+=", "int", "(", "conv", ")", "\n", "\n", "", "self", ".", "bn_mask", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "mask", ")", ",", "requires_grad", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.layers.bn_type.SplitBatchNorm.extract_slim": [[30, 45], ["bn_type.SplitBatchNorm.weight.size", "dst_m.weight.size"], "methods", ["None"], ["", "", "def", "extract_slim", "(", "self", ",", "dst_m", ")", ":", "\n", "        ", "c_out", "=", "self", ".", "weight", ".", "size", "(", ")", "[", "0", "]", "\n", "d_out", "=", "dst_m", ".", "weight", ".", "size", "(", ")", "[", "0", "]", "\n", "if", "self", ".", "in_channels_order", "is", "None", ":", "\n", "            ", "assert", "dst_m", ".", "weight", ".", "shape", "==", "self", ".", "weight", "[", ":", "d_out", "]", ".", "shape", "\n", "dst_m", ".", "weight", ".", "data", "=", "self", ".", "weight", "[", ":", "d_out", "]", "\n", "dst_m", ".", "bias", ".", "data", "=", "self", ".", "bias", "[", ":", "d_out", "]", "\n", "dst_m", ".", "running_mean", ".", "data", "=", "self", ".", "running_mean", "[", ":", "d_out", "]", "\n", "dst_m", ".", "running_var", ".", "data", "=", "self", ".", "running_var", "[", ":", "d_out", "]", "\n", "", "else", ":", "\n", "            ", "assert", "dst_m", ".", "weight", ".", "shape", "==", "self", ".", "weight", "[", "self", ".", "bn_mask", "==", "1", "]", ".", "shape", "\n", "dst_m", ".", "weight", ".", "data", "=", "self", ".", "weight", "[", "self", ".", "bn_mask", "==", "1", "]", "\n", "dst_m", ".", "bias", ".", "data", "=", "self", ".", "bias", ".", "data", "[", "self", ".", "bn_mask", "==", "1", "]", "\n", "dst_m", ".", "running_mean", ".", "data", "=", "self", ".", "running_mean", "[", "self", ".", "bn_mask", "==", "1", "]", "\n", "dst_m", ".", "running_var", ".", "data", "=", "self", ".", "running_var", "[", "self", ".", "bn_mask", "==", "1", "]", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.layers.linear_type.SplitLinear.__init__": [[13, 55], ["kwargs.pop", "kwargs.pop", "kwargs.pop", "kwargs.pop", "torch.Linear.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "numpy.zeros", "linear_type.SplitLinear.in_channels_order.split", "numpy.random.rand", "NotImplemented", "math.ceil", "numpy.zeros", "math.ceil", "math.ceil", "numpy.zeros", "int", "list", "len", "numpy.unique", "linear_type.SplitLinear.weight.size", "linear_type.SplitLinear.weight.size", "numpy.unique", "linear_type.SplitLinear.weight.size", "linear_type.SplitLinear.weight.size", "linear_type.SplitLinear.weight.size", "linear_type.SplitLinear.weight.size", "linear_type.SplitLinear.weight.size", "linear_type.SplitLinear.weight.size", "linear_type.SplitLinear.weight.size", "math.ceil", "int"], "methods", ["home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.configs.base_config.Config.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "split_mode", "=", "kwargs", ".", "pop", "(", "'split_mode'", ",", "None", ")", "\n", "split_rate", "=", "kwargs", ".", "pop", "(", "'split_rate'", ",", "None", ")", "\n", "last_layer", "=", "kwargs", ".", "pop", "(", "'last_layer'", ",", "None", ")", "\n", "self", ".", "in_channels_order", "=", "kwargs", ".", "pop", "(", "'in_channels_order'", ",", "None", ")", "\n", "\n", "self", ".", "split_rate", "=", "split_rate", "\n", "self", ".", "bias_split_rate", "=", "self", ".", "split_rate", "\n", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "## AT : I am assuming a single FC layer in the network. Typical for most CNNs", "\n", "if", "self", ".", "split_mode", "==", "'kels'", ":", "\n", "            ", "if", "self", ".", "in_channels_order", "is", "None", ":", "\n", "                ", "if", "last_layer", ":", "\n", "                    ", "active_in_dim", "=", "math", ".", "ceil", "(", "self", ".", "weight", ".", "size", "(", ")", "[", "1", "]", "*", "split_rate", ")", "\n", "mask", "=", "np", ".", "zeros", "(", "(", "self", ".", "weight", ".", "size", "(", ")", "[", "0", "]", ",", "self", ".", "weight", ".", "size", "(", ")", "[", "1", "]", ")", ")", "\n", "mask", "[", ":", ",", ":", "active_in_dim", "]", "=", "1", "\n", "", "else", ":", "\n", "                    ", "active_in_dim", "=", "math", ".", "ceil", "(", "self", ".", "weight", ".", "size", "(", ")", "[", "1", "]", "*", "split_rate", ")", "\n", "active_out_dim", "=", "math", ".", "ceil", "(", "self", ".", "weight", ".", "size", "(", ")", "[", "0", "]", "*", "split_rate", ")", "\n", "mask", "=", "np", ".", "zeros", "(", "(", "self", ".", "weight", ".", "size", "(", ")", "[", "0", "]", ",", "self", ".", "weight", ".", "size", "(", ")", "[", "1", "]", ")", ")", "\n", "mask", "[", ":", "active_out_dim", ",", ":", "active_in_dim", "]", "=", "1", "\n", "", "", "else", ":", "\n", "                ", "mask", "=", "np", ".", "zeros", "(", "(", "self", ".", "weight", ".", "size", "(", ")", "[", "0", "]", ",", "self", ".", "weight", ".", "size", "(", ")", "[", "1", "]", ")", ")", "\n", "conv_concat", "=", "self", ".", "in_channels_order", ".", "split", "(", "','", ")", "\n", "start_ch", "=", "0", "\n", "for", "conv", "in", "conv_concat", ":", "\n", "                    ", "mask", "[", ":", ",", "start_ch", ":", "start_ch", "+", "math", ".", "ceil", "(", "int", "(", "conv", ")", "*", "split_rate", ")", "]", "=", "1", "\n", "start_ch", "+=", "int", "(", "conv", ")", "\n", "\n", "", "", "", "elif", "self", ".", "split_mode", "==", "'wels'", ":", "\n", "            ", "mask", "=", "np", ".", "random", ".", "rand", "(", "*", "list", "(", "self", ".", "weight", ".", "shape", ")", ")", "\n", "# threshold = np.percentile(scores, (1 - self.keep_rate) * 100)", "\n", "threshold", "=", "1", "-", "self", ".", "split_rate", "\n", "mask", "[", "mask", "<", "threshold", "]", "=", "0", "\n", "mask", "[", "mask", ">=", "threshold", "]", "=", "1", "\n", "if", "self", ".", "split_rate", "!=", "1", ":", "\n", "                ", "assert", "len", "(", "np", ".", "unique", "(", "mask", ")", ")", "==", "2", ",", "'Something is wrong with the mask {}'", ".", "format", "(", "np", ".", "unique", "(", "mask", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "NotImplemented", "(", "'Invalid split_mode {}'", ".", "format", "(", "self", ".", "split_mode", ")", ")", "\n", "\n", "", "self", ".", "mask", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "mask", ")", ",", "requires_grad", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.layers.linear_type.SplitLinear.extract_slim": [[84, 96], ["linear_type.SplitLinear.weight.size", "dst_m.weight.size"], "methods", ["None"], ["", "def", "extract_slim", "(", "self", ",", "dst_m", ",", "src_name", ",", "dst_name", ")", ":", "\n", "        ", "c_out", ",", "c_in", "=", "self", ".", "weight", ".", "size", "(", ")", "\n", "d_out", ",", "d_in", "=", "dst_m", ".", "weight", ".", "size", "(", ")", "\n", "\n", "if", "self", ".", "in_channels_order", "is", "None", ":", "\n", "            ", "assert", "dst_m", ".", "weight", ".", "shape", "==", "self", ".", "weight", "[", ":", "d_out", ",", ":", "d_in", "]", ".", "shape", "\n", "dst_m", ".", "weight", ".", "data", "=", "self", ".", "weight", ".", "data", "[", ":", "d_out", ",", ":", "d_in", "]", "\n", "assert", "dst_m", ".", "bias", ".", "data", ".", "shape", "==", "self", ".", "bias", ".", "data", "[", ":", "d_out", "]", ".", "shape", "\n", "dst_m", ".", "bias", ".", "data", "=", "self", ".", "bias", ".", "data", "[", ":", "d_out", "]", "\n", "", "else", ":", "\n", "            ", "dst_m", ".", "weight", ".", "data", "=", "self", ".", "weight", "[", ":", "d_out", ",", "self", ".", "mask", "[", "0", ",", ":", "]", "==", "1", "]", "\n", "dst_m", ".", "bias", ".", "data", "=", "self", ".", "bias", ".", "data", "[", ":", "d_out", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.layers.linear_type.SplitLinear.split_reinitialize": [[97, 104], ["torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "NotImplemented", "linear_type.SplitLinear.mask.type", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "math.sqrt"], "methods", ["None"], ["", "", "def", "split_reinitialize", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "if", "cfg", ".", "evolve_mode", "==", "'rand'", ":", "\n", "            ", "rand_tensor", "=", "torch", ".", "zeros_like", "(", "self", ".", "weight", ")", ".", "cuda", "(", ")", "\n", "nn", ".", "init", ".", "kaiming_uniform_", "(", "rand_tensor", ",", "a", "=", "math", ".", "sqrt", "(", "5", ")", ")", "\n", "self", ".", "weight", ".", "data", "=", "torch", ".", "where", "(", "self", ".", "mask", ".", "type", "(", "torch", ".", "bool", ")", ",", "self", ".", "weight", ".", "data", ",", "rand_tensor", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplemented", "(", "'Invalid KE mode {}'", ".", "format", "(", "cfg", ".", "evolve_mode", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.layers.linear_type.SplitLinear.forward": [[105, 119], ["torch.linear", "torch.linear", "torch.linear", "torch.linear"], "methods", ["home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.builder.Builder.linear", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.builder.Builder.linear", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.builder.Builder.linear", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.builder.Builder.linear"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "## Debugging purpose", "\n", "# if self.split_rate < 1:", "\n", "#     # subnet = GetSubnet.apply(self.clamped_scores, self.keep_rate)", "\n", "#     w = self.weight * self.scores", "\n", "# else:", "\n", "#     w = self.weight", "\n", "\n", "        ", "w", "=", "self", ".", "weight", "\n", "b", "=", "self", ".", "bias", "\n", "\n", "x", "=", "F", ".", "linear", "(", "x", ",", "w", ",", "b", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.layers.normalize_layer.l2_norm": [[3, 12], ["input.size", "torch.pow", "torch.sum().add_", "torch.sqrt", "torch.div", "torch.div.view", "torch.sqrt.view().expand_as", "torch.sum", "torch.sqrt.view"], "function", ["None"], ["def", "l2_norm", "(", "input", ")", ":", "\n", "    ", "input_size", "=", "input", ".", "size", "(", ")", "\n", "buffer", "=", "torch", ".", "pow", "(", "input", ",", "2", ")", "\n", "normp", "=", "torch", ".", "sum", "(", "buffer", ",", "1", ")", ".", "add_", "(", "1e-5", ")", "\n", "norm", "=", "torch", ".", "sqrt", "(", "normp", ")", "\n", "_output", "=", "torch", ".", "div", "(", "input", ",", "norm", ".", "view", "(", "-", "1", ",", "1", ")", ".", "expand_as", "(", "input", ")", ")", "\n", "output", "=", "_output", ".", "view", "(", "input_size", ")", "\n", "\n", "return", "output", "", "", ""]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.layers.CS_KD.KDLoss.__init__": [[5, 9], ["torch.Module.__init__", "torch.KLDivLoss", "torch.KLDivLoss"], "methods", ["home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.configs.base_config.Config.__init__"], ["    ", "def", "__init__", "(", "self", ",", "temp_factor", ")", ":", "\n", "        ", "super", "(", "KDLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "temp_factor", "=", "temp_factor", "\n", "self", ".", "kl_div", "=", "nn", ".", "KLDivLoss", "(", "reduction", "=", "\"sum\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.layers.CS_KD.KDLoss.forward": [[10, 15], ["torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "input.size", "CS_KD.KDLoss.kl_div"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "log_p", "=", "torch", ".", "log_softmax", "(", "input", "/", "self", ".", "temp_factor", ",", "dim", "=", "1", ")", "\n", "q", "=", "torch", ".", "softmax", "(", "target", "/", "self", ".", "temp_factor", ",", "dim", "=", "1", ")", "\n", "loss", "=", "self", ".", "kl_div", "(", "log_p", ",", "q", ")", "*", "(", "self", ".", "temp_factor", "**", "2", ")", "/", "input", ".", "size", "(", "0", ")", "\n", "return", "loss", "", "", "", ""]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.layers.conv_type.SplitConv.__init__": [[16, 53], ["kwargs.pop", "kwargs.pop", "kwargs.pop", "torch.Conv2d.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "numpy.zeros", "numpy.zeros", "numpy.random.rand", "NotImplemented", "conv_type.SplitConv.weight.size", "conv_type.SplitConv.weight.size", "int", "conv_type.SplitConv.weight.size", "conv_type.SplitConv.in_channels_order.split", "list", "len", "numpy.unique", "numpy.unique", "math.ceil", "math.ceil", "math.ceil", "math.ceil", "math.ceil", "conv_type.SplitConv.weight.size", "conv_type.SplitConv.weight.size", "conv_type.SplitConv.weight.size", "conv_type.SplitConv.weight.size"], "methods", ["home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.configs.base_config.Config.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "split_mode", "=", "kwargs", ".", "pop", "(", "'split_mode'", ",", "None", ")", "\n", "self", ".", "split_rate", "=", "kwargs", ".", "pop", "(", "'split_rate'", ",", "None", ")", "\n", "self", ".", "in_channels_order", "=", "kwargs", ".", "pop", "(", "'in_channels_order'", ",", "None", ")", "\n", "# self.keep_rate = keep_rate", "\n", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "if", "self", ".", "split_mode", "==", "'kels'", ":", "\n", "            ", "if", "self", ".", "in_channels_order", "is", "None", ":", "\n", "                ", "mask", "=", "np", ".", "zeros", "(", "(", "self", ".", "weight", ".", "size", "(", ")", ")", ")", "\n", "if", "self", ".", "weight", ".", "size", "(", ")", "[", "1", "]", "==", "3", ":", "## This is the first conv", "\n", "                    ", "mask", "[", ":", "math", ".", "ceil", "(", "self", ".", "weight", ".", "size", "(", ")", "[", "0", "]", "*", "self", ".", "split_rate", ")", ",", ":", ",", ":", ",", ":", "]", "=", "1", "\n", "", "else", ":", "\n", "                    ", "mask", "[", ":", "math", ".", "ceil", "(", "self", ".", "weight", ".", "size", "(", ")", "[", "0", "]", "*", "self", ".", "split_rate", ")", ",", ":", "math", ".", "ceil", "(", "self", ".", "weight", ".", "size", "(", ")", "[", "1", "]", "*", "self", ".", "split_rate", ")", ",", ":", ",", ":", "]", "=", "1", "\n", "", "", "else", ":", "\n", "\n", "                ", "mask", "=", "np", ".", "zeros", "(", "(", "self", ".", "weight", ".", "size", "(", ")", ")", ")", "\n", "conv_concat", "=", "[", "int", "(", "chs", ")", "for", "chs", "in", "self", ".", "in_channels_order", ".", "split", "(", "','", ")", "]", "\n", "# assert sum(conv_concat) == self.weight.size()[1],'In channels {} should be equal to sum(concat) {}'.format(self.weight.size()[1],conv_concat)", "\n", "start_ch", "=", "0", "\n", "for", "conv", "in", "conv_concat", ":", "\n", "                    ", "mask", "[", ":", "math", ".", "ceil", "(", "self", ".", "weight", ".", "size", "(", ")", "[", "0", "]", "*", "self", ".", "split_rate", ")", ",", "start_ch", ":", "start_ch", "+", "math", ".", "ceil", "(", "conv", "*", "self", ".", "split_rate", ")", ",", "\n", ":", ",", ":", "]", "=", "1", "\n", "start_ch", "+=", "conv", "\n", "\n", "", "", "", "elif", "self", ".", "split_mode", "==", "'wels'", ":", "\n", "            ", "mask", "=", "np", ".", "random", ".", "rand", "(", "*", "list", "(", "self", ".", "weight", ".", "shape", ")", ")", "\n", "# threshold = np.percentile(scores, (1-self.keep_rate)*100)", "\n", "threshold", "=", "1", "-", "self", ".", "split_rate", "\n", "mask", "[", "mask", "<", "threshold", "]", "=", "0", "\n", "mask", "[", "mask", ">=", "threshold", "]", "=", "1", "\n", "if", "self", ".", "split_rate", "!=", "1", ":", "\n", "                ", "assert", "len", "(", "np", ".", "unique", "(", "mask", ")", ")", "==", "2", ",", "'Something is wrong with the mask {}'", ".", "format", "(", "np", ".", "unique", "(", "mask", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "NotImplemented", "(", "'Invalid split_mode {}'", ".", "format", "(", "self", ".", "split_mode", ")", ")", "\n", "\n", "", "self", ".", "mask", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "mask", ")", ",", "requires_grad", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.layers.conv_type.SplitConv.extract_slim": [[54, 71], ["conv_type.SplitConv.weight.size", "dst_m.weight.size"], "methods", ["None"], ["", "def", "extract_slim", "(", "self", ",", "dst_m", ",", "src_name", ",", "dst_name", ")", ":", "\n", "        ", "c_out", ",", "c_in", ",", "_", ",", "_", ",", "=", "self", ".", "weight", ".", "size", "(", ")", "\n", "d_out", ",", "d_in", ",", "_", ",", "_", "=", "dst_m", ".", "weight", ".", "size", "(", ")", "\n", "if", "self", ".", "in_channels_order", "is", "None", ":", "\n", "            ", "if", "c_in", "==", "3", ":", "\n", "                ", "selected_convs", "=", "self", ".", "weight", "[", ":", "d_out", "]", "\n", "# is_first_conv = False", "\n", "", "else", ":", "\n", "                ", "selected_convs", "=", "self", ".", "weight", "[", ":", "d_out", "]", "[", ":", ",", ":", "d_in", ",", ":", ",", ":", "]", "\n", "\n", "", "assert", "selected_convs", ".", "shape", "==", "dst_m", ".", "weight", ".", "shape", "\n", "dst_m", ".", "weight", ".", "data", "=", "selected_convs", "\n", "", "else", ":", "\n", "            ", "selected_convs", "=", "self", ".", "weight", "[", ":", "d_out", ",", "self", ".", "mask", "[", "0", ",", ":", ",", "0", ",", "0", "]", "==", "1", ",", ":", ",", ":", "]", "\n", "assert", "selected_convs", ".", "shape", "==", "dst_m", ".", "weight", ".", "shape", ",", "'{} {} {} {}'", ".", "format", "(", "dst_name", ",", "src_name", ",", "dst_m", ".", "weight", ".", "shape", ",", "\n", "selected_convs", ".", "shape", ")", "\n", "dst_m", ".", "weight", ".", "data", "=", "selected_convs", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.layers.conv_type.SplitConv.split_reinitialize": [[104, 122], ["torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "NotImplemented", "hasattr", "conv_type.SplitConv.mask.type", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.init._calculate_fan_in_and_fan_out", "torch.init._calculate_fan_in_and_fan_out", "torch.init._calculate_fan_in_and_fan_out", "torch.init._calculate_fan_in_and_fan_out", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "NotImplemented", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "math.sqrt", "math.sqrt", "bias_mask.type"], "methods", ["None"], ["", "", "def", "split_reinitialize", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "if", "cfg", ".", "evolve_mode", "==", "'rand'", ":", "\n", "            ", "rand_tensor", "=", "torch", ".", "zeros_like", "(", "self", ".", "weight", ")", ".", "cuda", "(", ")", "\n", "nn", ".", "init", ".", "kaiming_uniform_", "(", "rand_tensor", ",", "a", "=", "math", ".", "sqrt", "(", "5", ")", ")", "\n", "self", ".", "weight", ".", "data", "=", "torch", ".", "where", "(", "self", ".", "mask", ".", "type", "(", "torch", ".", "bool", ")", ",", "self", ".", "weight", ".", "data", ",", "rand_tensor", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplemented", "(", "'Invalid KE mode {}'", ".", "format", "(", "cfg", ".", "evolve_mode", ")", ")", "\n", "\n", "", "if", "hasattr", "(", "self", ",", "\"bias\"", ")", "and", "self", ".", "bias", "is", "not", "None", "and", "self", ".", "bias_split_rate", "<", "1.0", ":", "\n", "            ", "bias_mask", "=", "self", ".", "mask", "[", ":", ",", "0", ",", "0", ",", "0", "]", "## Same conv mask is used for bias terms", "\n", "if", "cfg", ".", "evolve_mode", "==", "'rand'", ":", "\n", "                ", "rand_tensor", "=", "torch", ".", "zeros_like", "(", "self", ".", "bias", ")", "\n", "fan_in", ",", "_", "=", "nn", ".", "init", ".", "_calculate_fan_in_and_fan_out", "(", "m", ".", "weight", ")", "\n", "bound", "=", "1", "/", "math", ".", "sqrt", "(", "fan_in", ")", "\n", "nn", ".", "init", ".", "uniform_", "(", "rand_tensor", ",", "-", "bound", ",", "bound", ")", "\n", "self", ".", "bias", ".", "data", "=", "torch", ".", "where", "(", "bias_mask", ".", "type", "(", "torch", ".", "bool", ")", ",", "self", ".", "bias", ".", "data", ",", "rand_tensor", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplemented", "(", "'Invalid KE mode {}'", ".", "format", "(", "cfg", ".", "evolve_mode", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.layers.conv_type.SplitConv.forward": [[123, 142], ["torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "## Debugging reasons only", "\n", "# if self.split_rate < 1:", "\n", "#     w = self.mask * self.weight", "\n", "#     if self.bias_split_rate < 1:", "\n", "#         # bias_subnet = GetSubnet.apply(self.clamped_bias_scores, self.bias_keep_rate)", "\n", "#         b = self.bias * self.mask[:, 0, 0, 0]", "\n", "#     else:", "\n", "#         b = self.bias", "\n", "# else:", "\n", "#     w = self.weight", "\n", "#     b = self.bias", "\n", "\n", "        ", "w", "=", "self", ".", "weight", "\n", "b", "=", "self", ".", "bias", "\n", "x", "=", "F", ".", "conv2d", "(", "\n", "x", ",", "w", ",", "b", ",", "self", ".", "stride", ",", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "groups", "\n", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.trainers.default_cls.train": [[18, 92], ["utils.logging.AverageMeter", "utils.logging.AverageMeter", "utils.logging.AverageMeter", "utils.logging.AverageMeter", "utils.logging.AverageMeter", "utils.logging.ProgressMeter", "model.train", "time.time", "enumerate", "utils.logging.AverageMeter.update", "utils.logging.AverageMeter.update", "utils.logging.AverageMeter.update", "utils.logging.AverageMeter.update", "optimizer.zero_grad", "criterion.backward", "optimizer.step", "utils.logging.AverageMeter.update", "time.time", "data[].cuda", "data[].long().squeeze().cuda", "images.size", "model", "torch.mean", "torch.mean", "kdloss", "utils.eval_utils.accuracy", "images.size", "model", "criterion", "utils.eval_utils.accuracy", "criterion.item", "acc1.item", "acc5.item", "utils.logging.ProgressMeter.display", "utils.logging.ProgressMeter.write_to_tensorboard", "time.time", "criterion", "torch.no_grad", "torch.no_grad", "model", "model.detach", "time.time", "data[].long().squeeze", "data[].long"], "function", ["home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.trainers.default_cls.train", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.logging.VarianceMeter.update", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.logging.VarianceMeter.update", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.logging.VarianceMeter.update", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.logging.VarianceMeter.update", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.logging.VarianceMeter.update", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.eval_utils.accuracy", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.eval_utils.accuracy", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.logging.ProgressMeter.display", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.logging.ProgressMeter.write_to_tensorboard"], ["def", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "cfg", ",", "writer", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", "\"Time\"", ",", "\":6.3f\"", ")", "\n", "data_time", "=", "AverageMeter", "(", "\"Data\"", ",", "\":6.3f\"", ")", "\n", "losses", "=", "AverageMeter", "(", "\"Loss\"", ",", "\":.3f\"", ")", "\n", "top1", "=", "AverageMeter", "(", "\"Acc@1\"", ",", "\":6.2f\"", ")", "\n", "top5", "=", "AverageMeter", "(", "\"Acc@5\"", ",", "\":6.2f\"", ")", "\n", "progress", "=", "ProgressMeter", "(", "\n", "train_loader", ".", "num_batches", ",", "\n", "[", "batch_time", ",", "data_time", ",", "losses", ",", "top1", ",", "top5", "]", ",", "cfg", ",", "\n", "prefix", "=", "f\"Epoch: [{epoch}]\"", ",", "\n", ")", "\n", "\n", "# switch to train mode", "\n", "model", ".", "train", "(", ")", "\n", "\n", "batch_size", "=", "train_loader", ".", "batch_size", "\n", "num_batches", "=", "train_loader", ".", "num_batches", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "# images, target = data[0]['data'],data[0]['label'].long().squeeze()", "\n", "        ", "images", ",", "target", "=", "data", "[", "0", "]", ".", "cuda", "(", ")", ",", "data", "[", "1", "]", ".", "long", "(", ")", ".", "squeeze", "(", ")", ".", "cuda", "(", ")", "\n", "# measure data loading time", "\n", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "if", "cfg", ".", "cs_kd", ":", "\n", "\n", "            ", "batch_size", "=", "images", ".", "size", "(", "0", ")", "\n", "loss_batch_size", "=", "batch_size", "//", "2", "\n", "targets_", "=", "target", "[", ":", "batch_size", "//", "2", "]", "\n", "outputs", "=", "model", "(", "images", "[", ":", "batch_size", "//", "2", "]", ")", "\n", "loss", "=", "torch", ".", "mean", "(", "criterion", "(", "outputs", ",", "targets_", ")", ")", "\n", "# loss += loss.item()", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "outputs_cls", "=", "model", "(", "images", "[", "batch_size", "//", "2", ":", "]", ")", "\n", "", "cls_loss", "=", "kdloss", "(", "outputs", "[", ":", "batch_size", "//", "2", "]", ",", "outputs_cls", ".", "detach", "(", ")", ")", "\n", "lamda", "=", "3", "\n", "loss", "+=", "lamda", "*", "cls_loss", "\n", "acc1", ",", "acc5", "=", "accuracy", "(", "outputs", ",", "targets_", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "", "else", ":", "\n", "            ", "batch_size", "=", "images", ".", "size", "(", "0", ")", "\n", "loss_batch_size", "=", "batch_size", "\n", "#compute output", "\n", "output", "=", "model", "(", "images", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "acc1", ",", "acc5", "=", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "\n", "# print(i, batch_size, loss)", "\n", "\n", "# measure accuracy and record loss", "\n", "\n", "", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "loss_batch_size", ")", "\n", "top1", ".", "update", "(", "acc1", ".", "item", "(", ")", ",", "loss_batch_size", ")", "\n", "top5", ".", "update", "(", "acc5", ".", "item", "(", ")", ",", "loss_batch_size", ")", "\n", "\n", "# compute gradient and do SGD step", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "\n", "if", "i", "%", "cfg", ".", "print_freq", "==", "0", "or", "i", "==", "num_batches", "-", "1", ":", "\n", "            ", "t", "=", "(", "num_batches", "*", "epoch", "+", "i", ")", "*", "batch_size", "\n", "progress", ".", "display", "(", "i", ")", "\n", "progress", ".", "write_to_tensorboard", "(", "writer", ",", "prefix", "=", "\"train\"", ",", "global_step", "=", "t", ")", "\n", "\n", "# train_loader.reset()", "\n", "# print(top1.count)", "\n", "", "", "return", "top1", ".", "avg", ",", "top5", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.trainers.default_cls.validate": [[94, 147], ["utils.logging.AverageMeter", "utils.logging.AverageMeter", "utils.logging.AverageMeter", "utils.logging.AverageMeter", "utils.logging.ProgressMeter", "model.eval", "torch.no_grad", "torch.no_grad", "time.time", "enumerate", "utils.logging.ProgressMeter.display", "model", "criterion", "utils.eval_utils.accuracy", "utils.logging.AverageMeter.update", "utils.logging.AverageMeter.update", "utils.logging.AverageMeter.update", "utils.logging.AverageMeter.update", "time.time", "utils.logging.ProgressMeter.write_to_tensorboard", "data[].cuda", "data[].long().squeeze().cuda", "criterion.item", "images.size", "acc1.item", "images.size", "acc5.item", "images.size", "utils.logging.ProgressMeter.display", "time.time", "data[].long().squeeze", "data[].long"], "function", ["home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.logging.ProgressMeter.display", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.eval_utils.accuracy", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.logging.VarianceMeter.update", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.logging.VarianceMeter.update", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.logging.VarianceMeter.update", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.logging.VarianceMeter.update", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.logging.ProgressMeter.write_to_tensorboard", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.logging.ProgressMeter.display"], ["", "def", "validate", "(", "val_loader", ",", "model", ",", "criterion", ",", "args", ",", "writer", ",", "epoch", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", "\"Time\"", ",", "\":6.3f\"", ",", "write_val", "=", "False", ")", "\n", "losses", "=", "AverageMeter", "(", "\"Loss\"", ",", "\":.3f\"", ",", "write_val", "=", "False", ")", "\n", "top1", "=", "AverageMeter", "(", "\"Acc@1\"", ",", "\":6.2f\"", ",", "write_val", "=", "False", ")", "\n", "top5", "=", "AverageMeter", "(", "\"Acc@5\"", ",", "\":6.2f\"", ",", "write_val", "=", "False", ")", "\n", "progress", "=", "ProgressMeter", "(", "\n", "val_loader", ".", "num_batches", ",", "[", "batch_time", ",", "losses", ",", "top1", ",", "top5", "]", ",", "args", ",", "prefix", "=", "\"Test: \"", "\n", ")", "\n", "\n", "# switch to evaluate mode", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "# confusion_matrix = torch.zeros(args.num_cls,args.num_cls)", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "# images, target = data[0]['data'], data[0]['label'].long().squeeze()", "\n", "            ", "images", ",", "target", "=", "data", "[", "0", "]", ".", "cuda", "(", ")", ",", "data", "[", "1", "]", ".", "long", "(", ")", ".", "squeeze", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "\n", "output", "=", "model", "(", "images", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "acc1", ",", "acc5", "=", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "# print(target,torch.mean(images),acc1,acc5,loss,torch.mean(output))", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "acc1", ".", "item", "(", ")", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "acc5", ".", "item", "(", ")", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "\n", "\n", "# _, preds = torch.max(output, 1)", "\n", "# for t, p in zip(target.view(-1), preds.view(-1)):", "\n", "#     confusion_matrix[t.long(), p.long()] += 1", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "                ", "progress", ".", "display", "(", "i", ")", "\n", "\n", "", "", "progress", ".", "display", "(", "val_loader", ".", "num_batches", ")", "\n", "\n", "if", "writer", "is", "not", "None", ":", "\n", "            ", "progress", ".", "write_to_tensorboard", "(", "writer", ",", "prefix", "=", "\"test\"", ",", "global_step", "=", "epoch", ")", "\n", "\n", "# torch.save(confusion_matrix,'./conf_mat.pt')", "\n", "# print(top1.count)", "\n", "", "", "return", "top1", ".", "avg", ",", "top5", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.split_googlenet.GoogLeNet.__init__": [[71, 157], ["torch.Module.__init__", "models.builder.get_builder", "conv_block", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "conv_block", "conv_block", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "inception_block", "inception_block", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "inception_block", "inception_block", "inception_block", "inception_block", "inception_block", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "inception_block", "inception_block", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Dropout", "torch.Dropout", "torch.Dropout", "models.builder.get_builder.linear", "warnings.warn", "len", "cfg.logger.info", "math.ceil", "slim", "slim", "slim", "slim", "slim", "slim", "slim", "slim", "slim", "slim", "slim", "slim", "slim", "slim", "slim", "slim", "slim", "slim", "slim", "slim", "slim", "slim", "slim", "slim", "slim", "slim", "slim", "slim", "slim", "slim", "slim", "slim", "slim", "slim", "slim", "slim", "slim", "slim", "slim", "slim", "slim", "slim", "slim", "slim", "slim", "slim", "slim", "slim", "slim", "slim", "slim", "slim", "slim", "slim", "slim", "slim", "slim", "slim", "slim", "slim", "inception_aux_block", "inception_aux_block", "split_googlenet.GoogLeNet._initialize_weights"], "methods", ["home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.configs.base_config.Config.__init__", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.builder.get_builder", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.builder.Builder.linear", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.split_googlenet.GoogLeNet._initialize_weights"], ["def", "__init__", "(", "self", ",", "cfg", ",", "num_classes", "=", "1000", ",", "aux_logits", "=", "False", ",", "transform_input", "=", "False", ",", "init_weights", "=", "None", ",", "\n", "blocks", "=", "None", ")", ":", "# AT : I disabled the aux_logits", "\n", "        ", "super", "(", "GoogLeNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "blocks", "is", "None", ":", "\n", "            ", "blocks", "=", "[", "BasicConv2d", ",", "Inception", ",", "InceptionAux", "]", "\n", "", "if", "init_weights", "is", "None", ":", "\n", "            ", "warnings", ".", "warn", "(", "'The default weight initialization of GoogleNet will be changed in future releases of '", "\n", "'torchvision. If you wish to keep the old behavior (which leads to long initialization times'", "\n", "' due to scipy/scipy#11299), please set init_weights=True.'", ",", "FutureWarning", ")", "\n", "init_weights", "=", "True", "\n", "", "assert", "len", "(", "blocks", ")", "==", "3", "\n", "\n", "builder", "=", "get_builder", "(", "cfg", ")", "\n", "slim_factor", "=", "cfg", ".", "slim_factor", "\n", "if", "slim_factor", "<", "1", ":", "\n", "            ", "cfg", ".", "logger", ".", "info", "(", "'WARNING: You are using a slim network'", ")", "\n", "\n", "", "conv_block", "=", "blocks", "[", "0", "]", "\n", "inception_block", "=", "blocks", "[", "1", "]", "\n", "inception_aux_block", "=", "blocks", "[", "2", "]", "\n", "\n", "self", ".", "aux_logits", "=", "aux_logits", "\n", "self", ".", "transform_input", "=", "transform_input", "\n", "\n", "slim", "=", "lambda", "x", ":", "math", ".", "ceil", "(", "x", "*", "slim_factor", ")", "\n", "self", ".", "conv1", "=", "conv_block", "(", "builder", ",", "3", ",", "slim", "(", "64", ")", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ")", "# , padding=3", "\n", "self", ".", "maxpool1", "=", "nn", ".", "MaxPool2d", "(", "3", ",", "stride", "=", "2", ",", "ceil_mode", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv_block", "(", "builder", ",", "slim", "(", "64", ")", ",", "slim", "(", "64", ")", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "conv3", "=", "conv_block", "(", "builder", ",", "slim", "(", "64", ")", ",", "slim", "(", "192", ")", ",", "kernel_size", "=", "3", ")", "# padding=1", "\n", "self", ".", "maxpool2", "=", "nn", ".", "MaxPool2d", "(", "3", ",", "stride", "=", "2", ",", "ceil_mode", "=", "True", ")", "\n", "\n", "self", ".", "inception3a", "=", "inception_block", "(", "builder", ",", "slim", "(", "192", ")", ",", "slim", "(", "64", ")", "\n", ",", "slim", "(", "96", ")", ",", "slim", "(", "128", ")", ",", "slim", "(", "16", ")", ",", "slim", "(", "32", ")", ",", "slim", "(", "32", ")", ")", "\n", "prev_out_channels", "=", "self", ".", "inception3a", ".", "out_channels", "# This is 256", "\n", "concat_order", "=", "self", ".", "inception3a", ".", "concat_order", "\n", "\n", "self", ".", "inception3b", "=", "inception_block", "(", "builder", ",", "prev_out_channels", ",", "slim", "(", "128", ")", ",", "slim", "(", "128", ")", ",", "slim", "(", "192", ")", ",", "slim", "(", "32", ")", ",", "slim", "(", "96", ")", ",", "slim", "(", "64", ")", ",", "in_channels_order", "=", "concat_order", ")", "\n", "prev_out_channels", "=", "self", ".", "inception3b", ".", "out_channels", "# This is 480", "\n", "concat_order", "=", "self", ".", "inception3b", ".", "concat_order", "\n", "\n", "self", ".", "maxpool3", "=", "nn", ".", "MaxPool2d", "(", "3", ",", "stride", "=", "2", ",", "ceil_mode", "=", "True", ")", "\n", "\n", "self", ".", "inception4a", "=", "inception_block", "(", "builder", ",", "prev_out_channels", ",", "slim", "(", "192", ")", ",", "slim", "(", "96", ")", ",", "slim", "(", "208", ")", ",", "slim", "(", "16", ")", ",", "slim", "(", "48", ")", ",", "slim", "(", "64", ")", ",", "in_channels_order", "=", "concat_order", ")", "\n", "prev_out_channels", "=", "self", ".", "inception4a", ".", "out_channels", "# This is 512", "\n", "concat_order", "=", "self", ".", "inception4a", ".", "concat_order", "\n", "\n", "self", ".", "inception4b", "=", "inception_block", "(", "builder", ",", "prev_out_channels", ",", "slim", "(", "160", ")", ",", "slim", "(", "112", ")", ",", "slim", "(", "224", ")", ",", "slim", "(", "24", ")", ",", "slim", "(", "64", ")", ",", "slim", "(", "64", ")", ",", "in_channels_order", "=", "concat_order", ")", "\n", "prev_out_channels", "=", "self", ".", "inception4b", ".", "out_channels", "# This is 512", "\n", "concat_order", "=", "self", ".", "inception4b", ".", "concat_order", "\n", "\n", "self", ".", "inception4c", "=", "inception_block", "(", "builder", ",", "prev_out_channels", ",", "slim", "(", "128", ")", ",", "slim", "(", "128", ")", ",", "slim", "(", "256", ")", ",", "slim", "(", "24", ")", ",", "slim", "(", "64", ")", ",", "slim", "(", "64", ")", ",", "in_channels_order", "=", "concat_order", ")", "\n", "prev_out_channels", "=", "self", ".", "inception4c", ".", "out_channels", "# This is 512", "\n", "concat_order", "=", "self", ".", "inception4c", ".", "concat_order", "\n", "\n", "self", ".", "inception4d", "=", "inception_block", "(", "builder", ",", "prev_out_channels", ",", "slim", "(", "112", ")", ",", "slim", "(", "144", ")", ",", "slim", "(", "288", ")", ",", "slim", "(", "32", ")", ",", "slim", "(", "64", ")", ",", "slim", "(", "64", ")", ",", "in_channels_order", "=", "concat_order", ")", "\n", "prev_out_channels", "=", "self", ".", "inception4d", ".", "out_channels", "# This is 528", "\n", "concat_order", "=", "self", ".", "inception4d", ".", "concat_order", "\n", "\n", "self", ".", "inception4e", "=", "inception_block", "(", "builder", ",", "prev_out_channels", ",", "slim", "(", "256", ")", ",", "slim", "(", "160", ")", ",", "slim", "(", "320", ")", ",", "slim", "(", "32", ")", ",", "slim", "(", "128", ")", ",", "slim", "(", "128", ")", ",", "in_channels_order", "=", "concat_order", ")", "\n", "prev_out_channels", "=", "self", ".", "inception4e", ".", "out_channels", "# This is 832", "\n", "concat_order", "=", "self", ".", "inception4e", ".", "concat_order", "\n", "\n", "self", ".", "maxpool4", "=", "nn", ".", "MaxPool2d", "(", "2", ",", "stride", "=", "2", ",", "ceil_mode", "=", "True", ")", "\n", "\n", "self", ".", "inception5a", "=", "inception_block", "(", "builder", ",", "prev_out_channels", ",", "slim", "(", "256", ")", ",", "slim", "(", "160", ")", ",", "slim", "(", "320", ")", ",", "slim", "(", "32", ")", ",", "slim", "(", "128", ")", ",", "slim", "(", "128", ")", ",", "in_channels_order", "=", "concat_order", ")", "\n", "prev_out_channels", "=", "self", ".", "inception5a", ".", "out_channels", "# This is 832", "\n", "concat_order", "=", "self", ".", "inception5a", ".", "concat_order", "\n", "\n", "self", ".", "inception5b", "=", "inception_block", "(", "builder", ",", "prev_out_channels", ",", "slim", "(", "384", ")", ",", "slim", "(", "192", ")", ",", "slim", "(", "384", ")", ",", "slim", "(", "48", ")", ",", "slim", "(", "128", ")", ",", "slim", "(", "128", ")", ",", "in_channels_order", "=", "concat_order", ")", "\n", "prev_out_channels", "=", "self", ".", "inception5b", ".", "out_channels", "# This is 1024", "\n", "concat_order", "=", "self", ".", "inception5b", ".", "concat_order", "\n", "\n", "if", "aux_logits", ":", "\n", "            ", "self", ".", "aux1", "=", "inception_aux_block", "(", "builder", ",", "512", ",", "num_classes", ")", "\n", "self", ".", "aux2", "=", "inception_aux_block", "(", "builder", ",", "528", ",", "num_classes", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "aux1", "=", "None", "\n", "self", ".", "aux2", "=", "None", "\n", "\n", "", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "0.2", ")", "\n", "# self.fc = nn.Linear(1024, num_classes)", "\n", "self", ".", "fc", "=", "builder", ".", "linear", "(", "prev_out_channels", ",", "num_classes", ",", "last_layer", "=", "True", ",", "in_channels_order", "=", "concat_order", ")", "\n", "\n", "if", "init_weights", ":", "\n", "            ", "self", ".", "_initialize_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.split_googlenet.GoogLeNet._initialize_weights": [[158, 170], ["split_googlenet.GoogLeNet.modules", "isinstance", "isinstance", "stats.truncnorm", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "values.view.view.view", "isinstance", "stats.truncnorm.rvs", "m.weight.size", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "m.weight.copy_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "m.weight.numel"], "methods", ["None"], ["", "", "def", "_initialize_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "import", "scipy", ".", "stats", "as", "stats", "\n", "X", "=", "stats", ".", "truncnorm", "(", "-", "2", ",", "2", ",", "scale", "=", "0.01", ")", "\n", "values", "=", "torch", ".", "as_tensor", "(", "X", ".", "rvs", "(", "m", ".", "weight", ".", "numel", "(", ")", ")", ",", "dtype", "=", "m", ".", "weight", ".", "dtype", ")", "\n", "values", "=", "values", ".", "view", "(", "m", ".", "weight", ".", "size", "(", ")", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "m", ".", "weight", ".", "copy_", "(", "values", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.split_googlenet.GoogLeNet._transform_input": [[171, 179], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze"], "methods", ["None"], ["", "", "", "def", "_transform_input", "(", "self", ",", "x", ")", ":", "\n", "# type: (Tensor) -> Tensor", "\n", "        ", "if", "self", ".", "transform_input", ":", "\n", "            ", "x_ch0", "=", "torch", ".", "unsqueeze", "(", "x", "[", ":", ",", "0", "]", ",", "1", ")", "*", "(", "0.229", "/", "0.5", ")", "+", "(", "0.485", "-", "0.5", ")", "/", "0.5", "\n", "x_ch1", "=", "torch", ".", "unsqueeze", "(", "x", "[", ":", ",", "1", "]", ",", "1", ")", "*", "(", "0.224", "/", "0.5", ")", "+", "(", "0.456", "-", "0.5", ")", "/", "0.5", "\n", "x_ch2", "=", "torch", ".", "unsqueeze", "(", "x", "[", ":", ",", "2", "]", ",", "1", ")", "*", "(", "0.225", "/", "0.5", ")", "+", "(", "0.406", "-", "0.5", ")", "/", "0.5", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x_ch0", ",", "x_ch1", ",", "x_ch2", ")", ",", "1", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.split_googlenet.GoogLeNet._forward": [[180, 237], ["split_googlenet.GoogLeNet.conv1", "split_googlenet.GoogLeNet.maxpool1", "split_googlenet.GoogLeNet.conv2", "split_googlenet.GoogLeNet.conv3", "split_googlenet.GoogLeNet.maxpool2", "split_googlenet.GoogLeNet.inception3a", "split_googlenet.GoogLeNet.inception3b", "split_googlenet.GoogLeNet.maxpool3", "split_googlenet.GoogLeNet.inception4a", "torch.jit.annotate", "torch.jit.annotate", "torch.jit.annotate", "torch.jit.annotate", "torch.jit.annotate", "torch.jit.annotate", "torch.jit.annotate", "torch.jit.annotate", "torch.jit.annotate", "split_googlenet.GoogLeNet.inception4b", "split_googlenet.GoogLeNet.inception4c", "split_googlenet.GoogLeNet.inception4d", "torch.jit.annotate", "torch.jit.annotate", "torch.jit.annotate", "torch.jit.annotate", "torch.jit.annotate", "torch.jit.annotate", "torch.jit.annotate", "torch.jit.annotate", "torch.jit.annotate", "split_googlenet.GoogLeNet.inception4e", "split_googlenet.GoogLeNet.maxpool4", "split_googlenet.GoogLeNet.inception5a", "split_googlenet.GoogLeNet.inception5b", "split_googlenet.GoogLeNet.avgpool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "split_googlenet.GoogLeNet.dropout", "split_googlenet.GoogLeNet.fc", "split_googlenet.GoogLeNet.aux1", "split_googlenet.GoogLeNet.aux2"], "methods", ["None"], ["", "def", "_forward", "(", "self", ",", "x", ")", ":", "\n", "# type: (Tensor) -> Tuple[Tensor, Optional[Tensor], Optional[Tensor]]", "\n", "# N x 3 x 224 x 224", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "# N x 64 x 112 x 112", "\n", "x", "=", "self", ".", "maxpool1", "(", "x", ")", "\n", "# N x 64 x 56 x 56", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "# N x 64 x 56 x 56", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "# N x 192 x 56 x 56", "\n", "x", "=", "self", ".", "maxpool2", "(", "x", ")", "\n", "\n", "# N x 192 x 28 x 28", "\n", "x", "=", "self", ".", "inception3a", "(", "x", ")", "\n", "\n", "# N x 256 x 28 x 28", "\n", "x", "=", "self", ".", "inception3b", "(", "x", ")", "\n", "# N x 480 x 28 x 28", "\n", "x", "=", "self", ".", "maxpool3", "(", "x", ")", "\n", "# N x 480 x 14 x 14", "\n", "x", "=", "self", ".", "inception4a", "(", "x", ")", "\n", "# N x 512 x 14 x 14", "\n", "aux1", "=", "torch", ".", "jit", ".", "annotate", "(", "Optional", "[", "Tensor", "]", ",", "None", ")", "\n", "if", "self", ".", "aux1", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "training", ":", "\n", "                ", "aux1", "=", "self", ".", "aux1", "(", "x", ")", "\n", "\n", "", "", "x", "=", "self", ".", "inception4b", "(", "x", ")", "\n", "# N x 512 x 14 x 14", "\n", "x", "=", "self", ".", "inception4c", "(", "x", ")", "\n", "# N x 512 x 14 x 14", "\n", "x", "=", "self", ".", "inception4d", "(", "x", ")", "\n", "# N x 528 x 14 x 14", "\n", "aux2", "=", "torch", ".", "jit", ".", "annotate", "(", "Optional", "[", "Tensor", "]", ",", "None", ")", "\n", "if", "self", ".", "aux2", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "training", ":", "\n", "                ", "aux2", "=", "self", ".", "aux2", "(", "x", ")", "\n", "\n", "", "", "x", "=", "self", ".", "inception4e", "(", "x", ")", "\n", "# N x 832 x 14 x 14", "\n", "x", "=", "self", ".", "maxpool4", "(", "x", ")", "\n", "# N x 832 x 7 x 7", "\n", "x", "=", "self", ".", "inception5a", "(", "x", ")", "\n", "# N x 832 x 7 x 7", "\n", "x", "=", "self", ".", "inception5b", "(", "x", ")", "\n", "# N x 1024 x 7 x 7", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "# N x 1024 x 1 x 1", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "1", ")", "\n", "# N x 1024", "\n", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "# N x 1000 (num_classes)", "\n", "\n", "return", "x", ",", "aux2", ",", "aux1", "\n", "# return x", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.split_googlenet.GoogLeNet.eager_outputs": [[239, 245], ["_GoogLeNetOutputs"], "methods", ["None"], ["", "@", "torch", ".", "jit", ".", "unused", "\n", "def", "eager_outputs", "(", "self", ",", "x", ":", "Tensor", ",", "aux2", ":", "Tensor", ",", "aux1", ":", "Optional", "[", "Tensor", "]", ")", "->", "GoogLeNetOutputs", ":", "\n", "        ", "if", "self", ".", "training", "and", "self", ".", "aux_logits", ":", "\n", "            ", "return", "_GoogLeNetOutputs", "(", "x", ",", "aux2", ",", "aux1", ")", "\n", "", "else", ":", "\n", "            ", "return", "x", "# type: ignore[return-value]", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.split_googlenet.GoogLeNet.forward": [[246, 261], ["split_googlenet.GoogLeNet._transform_input", "split_googlenet.GoogLeNet._forward", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "GoogLeNetOutputs", "split_googlenet.GoogLeNet.eager_outputs", "warnings.warn"], "methods", ["home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.split_googlenet.GoogLeNet._transform_input", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.split_googlenet.Inception._forward", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.split_googlenet.GoogLeNet.eager_outputs"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# type: (Tensor) -> GoogLeNetOutputs", "\n", "        ", "x", "=", "self", ".", "_transform_input", "(", "x", ")", "\n", "\n", "# x = self._forward(x)", "\n", "# return x", "\n", "\n", "x", ",", "aux1", ",", "aux2", "=", "self", ".", "_forward", "(", "x", ")", "\n", "aux_defined", "=", "self", ".", "training", "and", "self", ".", "aux_logits", "\n", "if", "torch", ".", "jit", ".", "is_scripting", "(", ")", ":", "\n", "            ", "if", "not", "aux_defined", ":", "\n", "                ", "warnings", ".", "warn", "(", "\"Scripted GoogleNet always returns GoogleNetOutputs Tuple\"", ")", "\n", "", "return", "GoogLeNetOutputs", "(", "x", ",", "aux2", ",", "aux1", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "eager_outputs", "(", "x", ",", "aux2", ",", "aux1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.split_googlenet.Inception.__init__": [[265, 291], ["torch.Module.__init__", "conv_block", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "conv_block", "conv_block", "conv_block", "conv_block", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "conv_block"], "methods", ["home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.configs.base_config.Config.__init__"], ["    ", "def", "__init__", "(", "self", ",", "builder", ",", "in_channels", ",", "ch1x1", ",", "ch3x3red", ",", "ch3x3", ",", "ch5x5red", ",", "ch5x5", ",", "pool_proj", ",", "\n", "in_channels_order", "=", "None", ",", "\n", "conv_block", "=", "None", ")", ":", "\n", "        ", "super", "(", "Inception", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "conv_block", "is", "None", ":", "\n", "            ", "conv_block", "=", "BasicConv2d", "\n", "", "self", ".", "branch1", "=", "conv_block", "(", "builder", ",", "in_channels", ",", "ch1x1", ",", "in_channels_order", "=", "in_channels_order", ",", "kernel_size", "=", "1", ")", "\n", "\n", "self", ".", "branch2", "=", "nn", ".", "Sequential", "(", "\n", "conv_block", "(", "builder", ",", "in_channels", ",", "ch3x3red", ",", "in_channels_order", "=", "in_channels_order", ",", "kernel_size", "=", "1", ")", ",", "\n", "conv_block", "(", "builder", ",", "ch3x3red", ",", "ch3x3", ",", "kernel_size", "=", "3", ")", "# padding=1", "\n", ")", "\n", "\n", "self", ".", "branch3", "=", "nn", ".", "Sequential", "(", "\n", "conv_block", "(", "builder", ",", "in_channels", ",", "ch5x5red", ",", "in_channels_order", "=", "in_channels_order", ",", "kernel_size", "=", "1", ")", ",", "\n", "# Here, kernel_size=3 instead of kernel_size=5 is a known bug.", "\n", "# Please see https://github.com/pytorch/vision/issues/906 for details.", "\n", "conv_block", "(", "builder", ",", "ch5x5red", ",", "ch5x5", ",", "kernel_size", "=", "3", ")", "# padding=1", "\n", ")", "\n", "\n", "self", ".", "branch4", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "ceil_mode", "=", "True", ")", ",", "\n", "conv_block", "(", "builder", ",", "in_channels", ",", "pool_proj", ",", "in_channels_order", "=", "in_channels_order", ",", "kernel_size", "=", "1", ")", "\n", ")", "\n", "self", ".", "out_channels", "=", "ch1x1", "+", "ch3x3", "+", "ch5x5", "+", "pool_proj", "\n", "self", ".", "concat_order", "=", "'{},{},{},{}'", ".", "format", "(", "ch1x1", ",", "ch3x3", ",", "ch5x5", ",", "pool_proj", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.split_googlenet.Inception._forward": [[292, 300], ["split_googlenet.Inception.branch1", "split_googlenet.Inception.branch2", "split_googlenet.Inception.branch3", "split_googlenet.Inception.branch4"], "methods", ["None"], ["", "def", "_forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "branch1", "=", "self", ".", "branch1", "(", "x", ")", "\n", "branch2", "=", "self", ".", "branch2", "(", "x", ")", "\n", "branch3", "=", "self", ".", "branch3", "(", "x", ")", "\n", "branch4", "=", "self", ".", "branch4", "(", "x", ")", "\n", "\n", "outputs", "=", "[", "branch1", ",", "branch2", ",", "branch3", ",", "branch4", "]", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.split_googlenet.Inception.forward": [[301, 306], ["split_googlenet.Inception._forward", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.split_googlenet.Inception._forward"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "_forward", "(", "x", ")", "\n", "_res", "=", "torch", ".", "cat", "(", "outputs", ",", "1", ")", "\n", "# print(_res.shape)", "\n", "return", "_res", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.split_googlenet.InceptionAux.__init__": [[310, 318], ["torch.Module.__init__", "conv_block", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.configs.base_config.Config.__init__"], ["    ", "def", "__init__", "(", "self", ",", "builder", ",", "in_channels", ",", "num_classes", ",", "slim_factor", ",", "conv_block", "=", "None", ")", ":", "\n", "        ", "super", "(", "InceptionAux", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "conv_block", "is", "None", ":", "\n", "            ", "conv_block", "=", "BasicConv2d", "\n", "", "self", ".", "conv", "=", "conv_block", "(", "builder", ",", "in_channels", ",", "128", ",", "kernel_size", "=", "1", ")", "\n", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "2048", ",", "1024", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "1024", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.split_googlenet.InceptionAux.forward": [[319, 335], ["torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "split_googlenet.InceptionAux.conv", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.relu", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "torch.dropout", "split_googlenet.InceptionAux.fc2", "split_googlenet.InceptionAux.fc1"], "methods", ["home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.builder.Builder.conv"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# aux1: N x 512 x 14 x 14, aux2: N x 528 x 14 x 14", "\n", "        ", "x", "=", "F", ".", "adaptive_avg_pool2d", "(", "x", ",", "(", "4", ",", "4", ")", ")", "\n", "# aux1: N x 512 x 4 x 4, aux2: N x 528 x 4 x 4", "\n", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "# N x 128 x 4 x 4", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "1", ")", "\n", "# N x 2048", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "x", ")", ",", "inplace", "=", "True", ")", "\n", "# N x 1024", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "0.7", ",", "training", "=", "self", ".", "training", ")", "\n", "# N x 1024", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "# N x 1000 (num_classes)", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.split_googlenet.BasicConv2d.__init__": [[339, 358], ["torch.Module.__init__", "kwargs.pop", "builder.batchnorm", "builder.conv3x3", "builder.conv1x1", "builder.conv7x7", "builder.conv11x11", "builder.conv5x5", "NotImplemented"], "methods", ["home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.configs.base_config.Config.__init__", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.builder.Builder.conv7x7", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.builder.Builder.conv11x11", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.builder.Builder.conv5x5"], ["    ", "def", "__init__", "(", "self", ",", "builder", ",", "in_channels", ",", "out_channels", ",", "in_channels_order", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "BasicConv2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "kernel_size", "=", "kwargs", ".", "pop", "(", "'kernel_size'", ",", "None", ")", "\n", "# self.conv = nn.Conv2d(in_channels, out_channels, bias=False, **kwargs)", "\n", "# self.bn = nn.BatchNorm2d(out_channels, eps=0.001)", "\n", "if", "kernel_size", "==", "3", ":", "\n", "            ", "self", ".", "conv", "=", "builder", ".", "conv3x3", "(", "in_channels", ",", "out_channels", ",", "bias", "=", "False", ",", "in_channels_order", "=", "in_channels_order", ",", "**", "kwargs", ")", "\n", "", "elif", "kernel_size", "==", "1", ":", "\n", "            ", "self", ".", "conv", "=", "builder", ".", "conv1x1", "(", "in_channels", ",", "out_channels", ",", "bias", "=", "False", ",", "in_channels_order", "=", "in_channels_order", ",", "**", "kwargs", ")", "\n", "", "elif", "kernel_size", "==", "7", ":", "\n", "            ", "self", ".", "conv", "=", "builder", ".", "conv7x7", "(", "in_channels", ",", "out_channels", ",", "bias", "=", "False", ",", "in_channels_order", "=", "in_channels_order", ",", "**", "kwargs", ")", "\n", "", "elif", "kernel_size", "==", "11", ":", "\n", "            ", "self", ".", "conv", "=", "builder", ".", "conv11x11", "(", "in_channels", ",", "out_channels", ",", "bias", "=", "False", ",", "in_channels_order", "=", "in_channels_order", ",", "**", "kwargs", ")", "\n", "", "elif", "kernel_size", "==", "5", ":", "\n", "            ", "self", ".", "conv", "=", "builder", ".", "conv5x5", "(", "in_channels", ",", "out_channels", ",", "bias", "=", "False", ",", "in_channels_order", "=", "in_channels_order", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplemented", "(", "\"Invalid kernel size {}\"", ".", "format", "(", "kernel_size", ")", ")", "\n", "\n", "", "self", ".", "bn", "=", "builder", ".", "batchnorm", "(", "out_channels", ",", "eps", "=", "0.001", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.split_googlenet.BasicConv2d.forward": [[359, 363], ["split_googlenet.BasicConv2d.conv", "split_googlenet.BasicConv2d.bn", "torch.relu", "torch.relu", "torch.relu"], "methods", ["home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.builder.Builder.conv"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "return", "F", ".", "relu", "(", "x", ",", "inplace", "=", "True", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.split_googlenet.Split_googlenet": [[32, 66], ["split_googlenet.GoogLeNet", "split_googlenet.GoogLeNet", "load_state_dict_from_url", "GoogLeNet.load_state_dict", "warnings.warn"], "function", ["home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.split_resnet.load_state_dict"], ["def", "Split_googlenet", "(", "cfg", ",", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"GoogLeNet (Inception v1) model architecture from\n    `\"Going Deeper with Convolutions\" <http://arxiv.org/abs/1409.4842>`_.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n        aux_logits (bool): If True, adds two auxiliary branches that can improve training.\n            Default: *False* when pretrained is True otherwise *True*\n        transform_input (bool): If True, preprocesses the input according to the method with which it\n            was trained on ImageNet. Default: *False*\n    \"\"\"", "\n", "if", "pretrained", ":", "\n", "        ", "if", "'transform_input'", "not", "in", "kwargs", ":", "\n", "            ", "kwargs", "[", "'transform_input'", "]", "=", "True", "\n", "", "if", "'aux_logits'", "not", "in", "kwargs", ":", "\n", "            ", "kwargs", "[", "'aux_logits'", "]", "=", "False", "\n", "", "if", "kwargs", "[", "'aux_logits'", "]", ":", "\n", "            ", "warnings", ".", "warn", "(", "'auxiliary heads in the pretrained googlenet model are NOT pretrained, '", "\n", "'so make sure to train them'", ")", "\n", "", "original_aux_logits", "=", "kwargs", "[", "'aux_logits'", "]", "\n", "kwargs", "[", "'aux_logits'", "]", "=", "True", "\n", "kwargs", "[", "'init_weights'", "]", "=", "False", "\n", "model", "=", "GoogLeNet", "(", "**", "kwargs", ")", "\n", "state_dict", "=", "load_state_dict_from_url", "(", "model_urls", "[", "'googlenet'", "]", ",", "\n", "progress", "=", "progress", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "if", "not", "original_aux_logits", ":", "\n", "            ", "model", ".", "aux_logits", "=", "False", "\n", "model", ".", "aux1", "=", "None", "\n", "model", ".", "aux2", "=", "None", "\n", "", "return", "model", "\n", "\n", "", "return", "GoogLeNet", "(", "cfg", ",", "num_classes", "=", "cfg", ".", "num_cls", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.common._IncompatibleKeys.__repr__": [[4, 8], ["super().__repr__"], "methods", ["home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.split_resnet._IncompatibleKeys.__repr__"], ["    ", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "missing_keys", "and", "not", "self", ".", "unexpected_keys", ":", "\n", "            ", "return", "'<All keys matched successfully>'", "\n", "", "return", "super", "(", "_IncompatibleKeys", ",", "self", ")", ".", "__repr__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.common.load_state_dict": [[11, 63], ["getattr", "state_dict.copy.copy", "common.load_state_dict.load"], "function", ["None"], ["", "def", "load_state_dict", "(", "model", ",", "state_dict", ",", "\n", "strict", ":", "bool", "=", "True", ")", ":", "\n", "    ", "r\"\"\"Copies parameters and buffers from :attr:`state_dict` into\n    this module and its descendants. If :attr:`strict` is ``True``, then\n    the keys of :attr:`state_dict` must exactly match the keys returned\n    by this module's :meth:`~torch.nn.Module.state_dict` function.\n    Arguments:\n        state_dict (dict): a dict containing parameters and\n            persistent buffers.\n        strict (bool, optional): whether to strictly enforce that the keys\n            in :attr:`state_dict` match the keys returned by this module's\n            :meth:`~torch.nn.Module.state_dict` function. Default: ``True``\n    Returns:\n        ``NamedTuple`` with ``missing_keys`` and ``unexpected_keys`` fields:\n            * **missing_keys** is a list of str containing the missing keys\n            * **unexpected_keys** is a list of str containing the unexpected keys\n    \"\"\"", "\n", "missing_keys", "=", "[", "]", "\n", "unexpected_keys", "=", "[", "]", "\n", "error_msgs", "=", "[", "]", "\n", "\n", "# copy state_dict so _load_from_state_dict can modify it", "\n", "metadata", "=", "getattr", "(", "state_dict", ",", "'_metadata'", ",", "None", ")", "\n", "state_dict", "=", "state_dict", ".", "copy", "(", ")", "\n", "if", "metadata", "is", "not", "None", ":", "\n", "        ", "state_dict", ".", "_metadata", "=", "metadata", "\n", "\n", "", "def", "load", "(", "module", ",", "prefix", "=", "''", ")", ":", "\n", "        ", "local_metadata", "=", "{", "}", "if", "metadata", "is", "None", "else", "metadata", ".", "get", "(", "prefix", "[", ":", "-", "1", "]", ",", "{", "}", ")", "\n", "module", ".", "_load_from_state_dict", "(", "\n", "state_dict", ",", "prefix", ",", "local_metadata", ",", "True", ",", "missing_keys", ",", "unexpected_keys", ",", "error_msgs", ")", "\n", "for", "name", ",", "child", "in", "module", ".", "_modules", ".", "items", "(", ")", ":", "\n", "            ", "if", "child", "is", "not", "None", "and", "not", "(", "child", ".", "__class__", ".", "__name__", "==", "'SplitLinear'", "or", "child", ".", "__class__", ".", "__name__", "==", "'Linear'", ")", ":", "\n", "                ", "load", "(", "child", ",", "prefix", "+", "name", "+", "'.'", ")", "\n", "\n", "", "", "", "load", "(", "model", ")", "\n", "load", "=", "None", "# break load->load reference cycle", "\n", "print", "(", "'WARNING: num unexpected_keys {} , num missing keys {}'", ".", "format", "(", "len", "(", "unexpected_keys", ")", ",", "len", "(", "missing_keys", ")", ")", ")", "\n", "if", "strict", ":", "\n", "        ", "if", "len", "(", "unexpected_keys", ")", ">", "0", ":", "\n", "            ", "error_msgs", ".", "insert", "(", "\n", "0", ",", "'Unexpected key(s) in state_dict: {}. '", ".", "format", "(", "\n", "', '", ".", "join", "(", "'\"{}\"'", ".", "format", "(", "k", ")", "for", "k", "in", "unexpected_keys", ")", ")", ")", "\n", "", "if", "len", "(", "missing_keys", ")", ">", "0", ":", "\n", "            ", "error_msgs", ".", "insert", "(", "\n", "0", ",", "'Missing key(s) in state_dict: {}. '", ".", "format", "(", "\n", "', '", ".", "join", "(", "'\"{}\"'", ".", "format", "(", "k", ")", "for", "k", "in", "missing_keys", ")", ")", ")", "\n", "\n", "", "", "if", "len", "(", "error_msgs", ")", ">", "0", ":", "\n", "        ", "raise", "RuntimeError", "(", "'Error(s) in loading state_dict for {}:\\n\\t{}'", ".", "format", "(", "\n", "model", ".", "__class__", ".", "__name__", ",", "\"\\n\\t\"", ".", "join", "(", "error_msgs", ")", ")", ")", "\n", "", "return", "_IncompatibleKeys", "(", "missing_keys", ",", "unexpected_keys", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.builder.Builder.__init__": [[11, 17], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "conv_layer", ",", "bn_layer", ",", "linear_layer", ",", "cfg", "=", "None", ")", ":", "\n", "        ", "self", ".", "conv_layer", "=", "conv_layer", "\n", "self", ".", "bn_layer", "=", "bn_layer", "\n", "self", ".", "linear_layer", "=", "linear_layer", "\n", "self", ".", "first_layer", "=", "conv_layer", "\n", "self", ".", "cfg", "=", "cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.builder.Builder.linear": [[19, 27], ["builder.Builder._init_linear", "builder.Builder.linear_layer", "builder.Builder.linear_layer"], "methods", ["home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.builder.Builder._init_linear"], ["", "def", "linear", "(", "self", ",", "in_feat", ",", "out_feat", ",", "last_layer", "=", "False", ",", "in_channels_order", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "linear_layer", "==", "nn", ".", "Linear", ":", "\n", "            ", "linear_layer", "=", "self", ".", "linear_layer", "(", "in_feat", ",", "out_feat", ")", "\n", "", "else", ":", "\n", "            ", "linear_layer", "=", "self", ".", "linear_layer", "(", "in_feat", ",", "out_feat", ",", "split_mode", "=", "self", ".", "cfg", ".", "split_mode", ",", "\n", "split_rate", "=", "self", ".", "cfg", ".", "split_rate", ",", "last_layer", "=", "last_layer", ",", "in_channels_order", "=", "in_channels_order", ")", "\n", "", "self", ".", "_init_linear", "(", "linear_layer", ")", "\n", "return", "linear_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.builder.Builder.conv": [[28, 140], ["builder.Builder._init_conv", "builder.Builder.cfg.logger.info", "conv_layer", "conv_layer", "conv_layer", "conv_layer", "str", "conv_layer", "conv_layer", "conv_layer", "conv_layer", "conv_layer", "conv_layer"], "methods", ["home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.builder.Builder._init_conv"], ["", "def", "conv", "(", "self", ",", "kernel_size", ",", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "first_layer", "=", "False", ",", "bias", "=", "False", ",", "in_channels_order", "=", "None", ")", ":", "\n", "        ", "conv_layer", "=", "self", ".", "first_layer", "if", "first_layer", "else", "self", ".", "conv_layer", "\n", "\n", "if", "first_layer", ":", "\n", "            ", "self", ".", "cfg", ".", "logger", ".", "info", "(", "f\"==> Building first layer with {str(self.first_layer)}\"", ")", "\n", "\n", "", "if", "kernel_size", "==", "3", ":", "\n", "            ", "if", "conv_layer", "==", "nn", ".", "Conv2d", ":", "\n", "                ", "conv", "=", "conv_layer", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "bias", ",", "\n", ")", "\n", "", "else", ":", "\n", "                ", "conv", "=", "conv_layer", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "bias", ",", "\n", "split_mode", "=", "self", ".", "cfg", ".", "split_mode", ",", "\n", "split_rate", "=", "self", ".", "cfg", ".", "split_rate", ",", "\n", "in_channels_order", "=", "in_channels_order", ",", "\n", ")", "\n", "", "", "elif", "kernel_size", "==", "1", ":", "\n", "            ", "if", "conv_layer", "==", "nn", ".", "Conv2d", ":", "\n", "                ", "conv", "=", "conv_layer", "(", "\n", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ",", "\n", ")", "\n", "", "else", ":", "\n", "                ", "conv", "=", "conv_layer", "(", "\n", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ",", "\n", "split_mode", "=", "self", ".", "cfg", ".", "split_mode", ",", "\n", "split_rate", "=", "self", ".", "cfg", ".", "split_rate", ",", "\n", "in_channels_order", "=", "in_channels_order", ",", "\n", ")", "\n", "", "", "elif", "kernel_size", "==", "5", ":", "\n", "            ", "if", "conv_layer", "==", "nn", ".", "Conv2d", ":", "\n", "                ", "conv", "=", "conv_layer", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "5", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "2", ",", "\n", "bias", "=", "bias", ",", "\n", ")", "\n", "", "else", ":", "\n", "                ", "conv", "=", "conv_layer", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "5", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "2", ",", "\n", "bias", "=", "bias", ",", "\n", "split_mode", "=", "self", ".", "cfg", ".", "split_mode", ",", "\n", "split_rate", "=", "self", ".", "cfg", ".", "split_rate", ",", "\n", "in_channels_order", "=", "in_channels_order", ",", "\n", ")", "\n", "", "", "elif", "kernel_size", "==", "7", ":", "\n", "            ", "if", "conv_layer", "==", "nn", ".", "Conv2d", ":", "\n", "                ", "conv", "=", "conv_layer", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "7", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "3", ",", "\n", "bias", "=", "bias", ",", "\n", ")", "\n", "", "else", ":", "\n", "                ", "conv", "=", "conv_layer", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "7", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "3", ",", "\n", "bias", "=", "bias", ",", "\n", "split_mode", "=", "self", ".", "cfg", ".", "split_mode", ",", "\n", "split_rate", "=", "self", ".", "cfg", ".", "split_rate", ",", "\n", "in_channels_order", "=", "in_channels_order", ",", "\n", ")", "\n", "", "", "elif", "kernel_size", "==", "11", ":", "\n", "            ", "if", "conv_layer", "==", "nn", ".", "Conv2d", ":", "\n", "                ", "conv", "=", "conv_layer", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "11", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "2", ",", "\n", "bias", "=", "bias", ",", "\n", ")", "\n", "", "else", ":", "\n", "                ", "conv", "=", "conv_layer", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "11", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "2", ",", "\n", "bias", "=", "bias", ",", "\n", "split_mode", "=", "self", ".", "cfg", ".", "split_mode", ",", "\n", "split_rate", "=", "self", ".", "cfg", ".", "split_rate", ",", "\n", "in_channels_order", "=", "in_channels_order", ",", "\n", ")", "\n", "", "", "else", ":", "\n", "            ", "return", "None", "\n", "\n", "", "self", ".", "_init_conv", "(", "conv", ")", "\n", "\n", "return", "conv", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.builder.Builder.conv3x3": [[141, 145], ["builder.Builder.conv"], "methods", ["home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.builder.Builder.conv"], ["", "def", "conv3x3", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "first_layer", "=", "False", ",", "bias", "=", "False", ",", "in_channels_order", "=", "None", ")", ":", "\n", "        ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "c", "=", "self", ".", "conv", "(", "3", ",", "in_planes", ",", "out_planes", ",", "stride", "=", "stride", ",", "first_layer", "=", "first_layer", ",", "bias", "=", "bias", ",", "in_channels_order", "=", "in_channels_order", ")", "\n", "return", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.builder.Builder.conv1x1": [[146, 150], ["builder.Builder.conv"], "methods", ["home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.builder.Builder.conv"], ["", "def", "conv1x1", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "first_layer", "=", "False", ",", "bias", "=", "False", ",", "in_channels_order", "=", "None", ")", ":", "\n", "        ", "\"\"\"1x1 convolution with padding\"\"\"", "\n", "c", "=", "self", ".", "conv", "(", "1", ",", "in_planes", ",", "out_planes", ",", "stride", "=", "stride", ",", "first_layer", "=", "first_layer", ",", "bias", "=", "bias", ",", "in_channels_order", "=", "in_channels_order", ")", "\n", "return", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.builder.Builder.conv7x7": [[151, 155], ["builder.Builder.conv"], "methods", ["home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.builder.Builder.conv"], ["", "def", "conv7x7", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "first_layer", "=", "False", ",", "bias", "=", "False", ",", "in_channels_order", "=", "None", ")", ":", "\n", "        ", "\"\"\"7x7 convolution with padding\"\"\"", "\n", "c", "=", "self", ".", "conv", "(", "7", ",", "in_planes", ",", "out_planes", ",", "stride", "=", "stride", ",", "first_layer", "=", "first_layer", ",", "bias", "=", "bias", ",", "in_channels_order", "=", "in_channels_order", ")", "\n", "return", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.builder.Builder.conv5x5": [[156, 160], ["builder.Builder.conv"], "methods", ["home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.builder.Builder.conv"], ["", "def", "conv5x5", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "first_layer", "=", "False", ",", "bias", "=", "False", ",", "in_channels_order", "=", "None", ")", ":", "\n", "        ", "\"\"\"5x5 convolution with padding\"\"\"", "\n", "c", "=", "self", ".", "conv", "(", "5", ",", "in_planes", ",", "out_planes", ",", "stride", "=", "stride", ",", "first_layer", "=", "first_layer", ",", "bias", "=", "bias", ",", "in_channels_order", "=", "in_channels_order", ")", "\n", "return", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.builder.Builder.conv11x11": [[161, 165], ["builder.Builder.conv"], "methods", ["home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.builder.Builder.conv"], ["", "def", "conv11x11", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "first_layer", "=", "False", ",", "bias", "=", "False", ",", "in_channels_order", "=", "None", ")", ":", "\n", "        ", "\"\"\"5x5 convolution with padding\"\"\"", "\n", "c", "=", "self", ".", "conv", "(", "11", ",", "in_planes", ",", "out_planes", ",", "stride", "=", "stride", ",", "first_layer", "=", "first_layer", ",", "bias", "=", "bias", ",", "in_channels_order", "=", "in_channels_order", ")", "\n", "return", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.builder.Builder.batchnorm": [[166, 171], ["builder.Builder.bn_layer", "builder.Builder.bn_layer"], "methods", ["None"], ["", "def", "batchnorm", "(", "self", ",", "planes", ",", "last_bn", "=", "False", ",", "first_layer", "=", "False", ",", "in_channels_order", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "self", ".", "bn_layer", "==", "nn", ".", "BatchNorm2d", ":", "\n", "            ", "return", "self", ".", "bn_layer", "(", "planes", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "bn_layer", "(", "planes", ",", "in_channels_order", "=", "in_channels_order", ",", "split_rate", "=", "self", ".", "cfg", ".", "split_rate", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.builder.Builder.activation": [[172, 177], ["ValueError", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["", "", "def", "activation", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "cfg", ".", "nonlinearity", "==", "\"relu\"", ":", "\n", "            ", "return", "(", "lambda", ":", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f\"{self.cfg.nonlinearity} is not an initialization option!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.builder.Builder._init_linear": [[178, 228], ["torch.init._calculate_correct_fan", "torch.init._calculate_correct_fan", "torch.init.calculate_gain", "torch.init.calculate_gain", "math.sqrt", "linear.weight.data.sign", "torch.init._calculate_correct_fan", "torch.init._calculate_correct_fan", "torch.init.calculate_gain", "torch.init.calculate_gain", "math.sqrt", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.init._calculate_correct_fan", "torch.init._calculate_correct_fan", "torch.init.calculate_gain", "torch.init.calculate_gain", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "math.sqrt", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "linear.weight.data.normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init._calculate_fan_in_and_fan_out", "torch.init._calculate_fan_in_and_fan_out", "math.sqrt", "linear.weight.data.sign", "torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "ValueError", "float", "math.sqrt"], "methods", ["None"], ["", "", "def", "_init_linear", "(", "self", ",", "linear", ")", ":", "\n", "        ", "if", "self", ".", "cfg", ".", "init", "==", "\"signed_constant\"", ":", "\n", "\n", "            ", "fan", "=", "nn", ".", "init", ".", "_calculate_correct_fan", "(", "linear", ".", "weight", ",", "self", ".", "cfg", ".", "mode", ")", "\n", "if", "self", ".", "cfg", ".", "scale_fan", ":", "\n", "                ", "fan", "=", "fan", "*", "(", "1", "-", "self", ".", "cfg", ".", "prune_rate", ")", "\n", "", "gain", "=", "nn", ".", "init", ".", "calculate_gain", "(", "self", ".", "cfg", ".", "nonlinearity", ")", "\n", "std", "=", "gain", "/", "math", ".", "sqrt", "(", "fan", ")", "\n", "linear", ".", "weight", ".", "data", "=", "linear", ".", "weight", ".", "data", ".", "sign", "(", ")", "*", "std", "\n", "\n", "", "elif", "self", ".", "cfg", ".", "init", "==", "\"unsigned_constant\"", ":", "\n", "\n", "            ", "fan", "=", "nn", ".", "init", ".", "_calculate_correct_fan", "(", "linear", ".", "weight", ",", "self", ".", "cfg", ".", "mode", ")", "\n", "if", "self", ".", "cfg", ".", "scale_fan", ":", "\n", "                ", "fan", "=", "fan", "*", "(", "1", "-", "self", ".", "cfg", ".", "prune_rate", ")", "\n", "\n", "", "gain", "=", "nn", ".", "init", ".", "calculate_gain", "(", "self", ".", "cfg", ".", "nonlinearity", ")", "\n", "std", "=", "gain", "/", "math", ".", "sqrt", "(", "fan", ")", "\n", "linear", ".", "weight", ".", "data", "=", "torch", ".", "ones_like", "(", "linear", ".", "weight", ".", "data", ")", "*", "std", "\n", "\n", "", "elif", "self", ".", "cfg", ".", "init", "==", "\"kaiming_normal\"", ":", "\n", "\n", "            ", "if", "self", ".", "cfg", ".", "scale_fan", ":", "\n", "                ", "fan", "=", "nn", ".", "init", ".", "_calculate_correct_fan", "(", "linear", ".", "weight", ",", "self", ".", "cfg", ".", "mode", ")", "\n", "fan", "=", "fan", "*", "(", "1", "-", "self", ".", "cfg", ".", "prune_rate", ")", "\n", "gain", "=", "nn", ".", "init", ".", "calculate_gain", "(", "self", ".", "cfg", ".", "nonlinearity", ")", "\n", "std", "=", "gain", "/", "math", ".", "sqrt", "(", "fan", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "linear", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "std", ")", "\n", "", "", "else", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "\n", "linear", ".", "weight", ",", "mode", "=", "self", ".", "cfg", ".", "mode", ",", "nonlinearity", "=", "self", ".", "cfg", ".", "nonlinearity", "\n", ")", "\n", "\n", "", "", "elif", "self", ".", "cfg", ".", "init", "==", "\"kaiming_uniform\"", ":", "\n", "            ", "nn", ".", "init", ".", "kaiming_uniform_", "(", "\n", "linear", ".", "weight", ",", "mode", "=", "self", ".", "cfg", ".", "mode", ",", "nonlinearity", "=", "self", ".", "cfg", ".", "nonlinearity", "\n", ")", "\n", "", "elif", "self", ".", "cfg", ".", "init", "==", "\"xavier_normal\"", ":", "\n", "            ", "nn", ".", "init", ".", "xavier_normal_", "(", "linear", ".", "weight", ")", "\n", "", "elif", "self", ".", "cfg", ".", "init", "==", "\"xavier_constant\"", ":", "\n", "\n", "            ", "fan_in", ",", "fan_out", "=", "nn", ".", "init", ".", "_calculate_fan_in_and_fan_out", "(", "linear", ".", "weight", ")", "\n", "std", "=", "math", ".", "sqrt", "(", "2.0", "/", "float", "(", "fan_in", "+", "fan_out", ")", ")", "\n", "linear", ".", "weight", ".", "data", "=", "linear", ".", "weight", ".", "data", ".", "sign", "(", ")", "*", "std", "\n", "\n", "", "elif", "self", ".", "cfg", ".", "init", "==", "\"standard\"", ":", "\n", "            ", "nn", ".", "init", ".", "kaiming_uniform_", "(", "linear", ".", "weight", ",", "a", "=", "math", ".", "sqrt", "(", "5", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f\"{self.cfg.init} is not an initialization option!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.builder.Builder._init_conv": [[230, 280], ["torch.init._calculate_correct_fan", "torch.init._calculate_correct_fan", "torch.init.calculate_gain", "torch.init.calculate_gain", "math.sqrt", "conv.weight.data.sign", "torch.init._calculate_correct_fan", "torch.init._calculate_correct_fan", "torch.init.calculate_gain", "torch.init.calculate_gain", "math.sqrt", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.init._calculate_correct_fan", "torch.init._calculate_correct_fan", "torch.init.calculate_gain", "torch.init.calculate_gain", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "math.sqrt", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "conv.weight.data.normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init._calculate_fan_in_and_fan_out", "torch.init._calculate_fan_in_and_fan_out", "math.sqrt", "conv.weight.data.sign", "torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "ValueError", "float", "math.sqrt"], "methods", ["None"], ["", "", "def", "_init_conv", "(", "self", ",", "conv", ")", ":", "\n", "        ", "if", "self", ".", "cfg", ".", "init", "==", "\"signed_constant\"", ":", "\n", "\n", "            ", "fan", "=", "nn", ".", "init", ".", "_calculate_correct_fan", "(", "conv", ".", "weight", ",", "self", ".", "cfg", ".", "mode", ")", "\n", "if", "self", ".", "cfg", ".", "scale_fan", ":", "\n", "                ", "fan", "=", "fan", "*", "(", "1", "-", "self", ".", "cfg", ".", "prune_rate", ")", "\n", "", "gain", "=", "nn", ".", "init", ".", "calculate_gain", "(", "self", ".", "cfg", ".", "nonlinearity", ")", "\n", "std", "=", "gain", "/", "math", ".", "sqrt", "(", "fan", ")", "\n", "conv", ".", "weight", ".", "data", "=", "conv", ".", "weight", ".", "data", ".", "sign", "(", ")", "*", "std", "\n", "\n", "", "elif", "self", ".", "cfg", ".", "init", "==", "\"unsigned_constant\"", ":", "\n", "\n", "            ", "fan", "=", "nn", ".", "init", ".", "_calculate_correct_fan", "(", "conv", ".", "weight", ",", "self", ".", "cfg", ".", "mode", ")", "\n", "if", "self", ".", "cfg", ".", "scale_fan", ":", "\n", "                ", "fan", "=", "fan", "*", "(", "1", "-", "self", ".", "cfg", ".", "prune_rate", ")", "\n", "\n", "", "gain", "=", "nn", ".", "init", ".", "calculate_gain", "(", "self", ".", "cfg", ".", "nonlinearity", ")", "\n", "std", "=", "gain", "/", "math", ".", "sqrt", "(", "fan", ")", "\n", "conv", ".", "weight", ".", "data", "=", "torch", ".", "ones_like", "(", "conv", ".", "weight", ".", "data", ")", "*", "std", "\n", "\n", "", "elif", "self", ".", "cfg", ".", "init", "==", "\"kaiming_normal\"", ":", "\n", "\n", "            ", "if", "self", ".", "cfg", ".", "scale_fan", ":", "\n", "                ", "fan", "=", "nn", ".", "init", ".", "_calculate_correct_fan", "(", "conv", ".", "weight", ",", "self", ".", "cfg", ".", "mode", ")", "\n", "fan", "=", "fan", "*", "(", "1", "-", "self", ".", "cfg", ".", "prune_rate", ")", "\n", "gain", "=", "nn", ".", "init", ".", "calculate_gain", "(", "self", ".", "cfg", ".", "nonlinearity", ")", "\n", "std", "=", "gain", "/", "math", ".", "sqrt", "(", "fan", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "conv", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "std", ")", "\n", "", "", "else", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "\n", "conv", ".", "weight", ",", "mode", "=", "self", ".", "cfg", ".", "mode", ",", "nonlinearity", "=", "self", ".", "cfg", ".", "nonlinearity", "\n", ")", "\n", "\n", "", "", "elif", "self", ".", "cfg", ".", "init", "==", "\"kaiming_uniform\"", ":", "\n", "            ", "nn", ".", "init", ".", "kaiming_uniform_", "(", "\n", "conv", ".", "weight", ",", "mode", "=", "self", ".", "cfg", ".", "mode", ",", "nonlinearity", "=", "self", ".", "cfg", ".", "nonlinearity", "\n", ")", "\n", "", "elif", "self", ".", "cfg", ".", "init", "==", "\"xavier_normal\"", ":", "\n", "            ", "nn", ".", "init", ".", "xavier_normal_", "(", "conv", ".", "weight", ")", "\n", "", "elif", "self", ".", "cfg", ".", "init", "==", "\"xavier_constant\"", ":", "\n", "\n", "            ", "fan_in", ",", "fan_out", "=", "nn", ".", "init", ".", "_calculate_fan_in_and_fan_out", "(", "conv", ".", "weight", ")", "\n", "std", "=", "math", ".", "sqrt", "(", "2.0", "/", "float", "(", "fan_in", "+", "fan_out", ")", ")", "\n", "conv", ".", "weight", ".", "data", "=", "conv", ".", "weight", ".", "data", ".", "sign", "(", ")", "*", "std", "\n", "\n", "", "elif", "self", ".", "cfg", ".", "init", "==", "\"standard\"", ":", "\n", "            ", "nn", ".", "init", ".", "kaiming_uniform_", "(", "conv", ".", "weight", ",", "a", "=", "math", ".", "sqrt", "(", "5", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f\"{self.cfg.init} is not an initialization option!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.builder.get_builder": [[282, 295], ["cfg.logger.info", "cfg.logger.info", "getattr", "getattr", "getattr", "builder.Builder"], "function", ["None"], ["", "", "", "def", "get_builder", "(", "cfg", ")", ":", "\n", "\n", "    ", "cfg", ".", "logger", ".", "info", "(", "\"==> Conv Type: {}\"", ".", "format", "(", "cfg", ".", "conv_type", ")", ")", "\n", "cfg", ".", "logger", ".", "info", "(", "\"==> BN Type: {}\"", ".", "format", "(", "cfg", ".", "bn_type", ")", ")", "\n", "\n", "conv_layer", "=", "getattr", "(", "layers", ".", "conv_type", ",", "cfg", ".", "conv_type", ")", "\n", "bn_layer", "=", "getattr", "(", "layers", ".", "bn_type", ",", "cfg", ".", "bn_type", ")", "\n", "linear_layer", "=", "getattr", "(", "layers", ".", "linear_type", ",", "cfg", ".", "linear_type", ")", "\n", "\n", "\n", "builder", "=", "Builder", "(", "conv_layer", "=", "conv_layer", ",", "bn_layer", "=", "bn_layer", ",", "linear_layer", "=", "linear_layer", ",", "cfg", "=", "cfg", ")", "\n", "\n", "return", "builder", "\n", "", ""]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.split_resnet.BasicBlock.__init__": [[29, 44], ["torch.Module.__init__", "builder.conv3x3", "builder.batchnorm", "builder.activation", "builder.conv3x3", "builder.batchnorm", "ValueError", "math.ceil", "math.ceil", "math.ceil", "math.ceil", "math.ceil", "math.ceil"], "methods", ["home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.configs.base_config.Config.__init__", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.builder.Builder.activation", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.builder.Builder.batchnorm"], ["def", "__init__", "(", "self", ",", "builder", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "base_width", "=", "64", ",", "slim_factor", "=", "1", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "base_width", "/", "64", ">", "1", ":", "\n", "            ", "raise", "ValueError", "(", "\"Base width >64 does not work for BasicBlock\"", ")", "\n", "\n", "", "self", ".", "conv1", "=", "builder", ".", "conv3x3", "(", "math", ".", "ceil", "(", "inplanes", "*", "slim_factor", ")", ",", "math", ".", "ceil", "(", "planes", "*", "slim_factor", ")", ",", "stride", ")", "## Avoid residual links", "\n", "self", ".", "bn1", "=", "builder", ".", "batchnorm", "(", "math", ".", "ceil", "(", "planes", "*", "slim_factor", ")", ")", "\n", "self", ".", "relu", "=", "builder", ".", "activation", "(", ")", "\n", "\n", "self", ".", "conv2", "=", "builder", ".", "conv3x3", "(", "math", ".", "ceil", "(", "planes", "*", "slim_factor", ")", ",", "\n", "math", ".", "ceil", "(", "planes", "*", "slim_factor", ")", ")", "## Avoid residual links", "\n", "self", ".", "bn2", "=", "builder", ".", "batchnorm", "(", "math", ".", "ceil", "(", "planes", "*", "slim_factor", ")", ",", "last_bn", "=", "True", ")", "## Avoid residual links", "\n", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.split_resnet.BasicBlock.forward": [[45, 68], ["split_resnet.BasicBlock.conv1", "split_resnet.BasicBlock.relu", "split_resnet.BasicBlock.conv2", "split_resnet.BasicBlock.relu", "split_resnet.BasicBlock.bn1", "split_resnet.BasicBlock.bn2", "split_resnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "residual", "=", "x", "\n", "# print('1: ',torch.norm(residual[:,:residual.shape[1]//self.split]))", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "# print('1.5 conv ',self.conv1.weight.shape)", "\n", "# print('1.5 conv ',torch.norm(self.conv1.weight[:self.conv1.weight.shape[0]//self.split,:self.conv1.weight.shape[1]//self.split]))", "\n", "# print('1.5: ', torch.norm(out[:, :out.shape[1] // self.split]))", "\n", "if", "self", ".", "bn1", "is", "not", "None", ":", "\n", "            ", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "# print('2: ', torch.norm(out[:,:out.shape[1]//self.split]))", "\n", "", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "# print('3: ', torch.norm(out[:,:out.shape[1]//self.split]))", "\n", "if", "self", ".", "bn2", "is", "not", "None", ":", "\n", "            ", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "# print('4: ', torch.norm(residual[:,:residual.shape[1]//self.split]))", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "# print('5: ', torch.norm(out[:,:out.shape[1]//self.split]))", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.split_resnet.Bottleneck.__init__": [[77, 89], ["torch.Module.__init__", "int", "builder.conv1x1", "builder.batchnorm", "builder.conv3x3", "builder.batchnorm", "builder.conv1x1", "builder.batchnorm", "builder.activation", "math.ceil", "math.ceil", "math.ceil", "math.ceil", "math.ceil", "math.ceil", "math.ceil", "math.ceil", "math.ceil"], "methods", ["home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.configs.base_config.Config.__init__", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.builder.Builder.activation"], ["def", "__init__", "(", "self", ",", "builder", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "base_width", "=", "64", ",", "slim_factor", "=", "1", ",", "is_last_conv", "=", "False", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "width", "=", "int", "(", "planes", "*", "base_width", "/", "64", ")", "\n", "self", ".", "conv1", "=", "builder", ".", "conv1x1", "(", "math", ".", "ceil", "(", "inplanes", "*", "slim_factor", ")", ",", "math", ".", "ceil", "(", "width", "*", "slim_factor", ")", ")", "\n", "self", ".", "bn1", "=", "builder", ".", "batchnorm", "(", "math", ".", "ceil", "(", "width", "*", "slim_factor", ")", ")", "\n", "self", ".", "conv2", "=", "builder", ".", "conv3x3", "(", "math", ".", "ceil", "(", "width", "*", "slim_factor", ")", ",", "math", ".", "ceil", "(", "width", "*", "slim_factor", ")", ",", "stride", "=", "stride", ")", "\n", "self", ".", "bn2", "=", "builder", ".", "batchnorm", "(", "math", ".", "ceil", "(", "width", "*", "slim_factor", ")", ")", "\n", "self", ".", "conv3", "=", "builder", ".", "conv1x1", "(", "math", ".", "ceil", "(", "width", "*", "slim_factor", ")", ",", "math", ".", "ceil", "(", "planes", "*", "self", ".", "expansion", "*", "slim_factor", ")", ")", "\n", "self", ".", "bn3", "=", "builder", ".", "batchnorm", "(", "math", ".", "ceil", "(", "planes", "*", "self", ".", "expansion", "*", "slim_factor", ")", ")", "\n", "self", ".", "relu", "=", "builder", ".", "activation", "(", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.split_resnet.Bottleneck.forward": [[90, 113], ["split_resnet.Bottleneck.conv1", "split_resnet.Bottleneck.bn1", "split_resnet.Bottleneck.relu", "split_resnet.Bottleneck.conv2", "split_resnet.Bottleneck.bn2", "split_resnet.Bottleneck.relu", "split_resnet.Bottleneck.conv3", "split_resnet.Bottleneck.bn3", "split_resnet.Bottleneck.relu", "split_resnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.split_resnet.ResNet.__init__": [[119, 148], ["torch.Module.__init__", "builder.conv7x7", "builder.batchnorm", "builder.activation", "torch.MaxPool2d", "torch.MaxPool2d", "split_resnet.ResNet._make_layer", "split_resnet.ResNet._make_layer", "split_resnet.ResNet._make_layer", "split_resnet.ResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "builder.linear", "cfg.logger.info", "print", "math.ceil", "math.ceil", "math.ceil"], "methods", ["home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.configs.base_config.Config.__init__", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.builder.Builder.conv7x7", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.builder.Builder.activation", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.split_resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.split_resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.split_resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.split_resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.builder.Builder.linear"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "builder", ",", "block", ",", "layers", ",", "base_width", "=", "64", ")", ":", "\n", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inplanes", "=", "64", "\n", "slim_factor", "=", "cfg", ".", "slim_factor", "\n", "if", "slim_factor", "<", "1", ":", "\n", "            ", "cfg", ".", "logger", ".", "info", "(", "'WARNING: You are using a slim network'", ")", "\n", "\n", "", "self", ".", "base_width", "=", "base_width", "\n", "if", "self", ".", "base_width", "//", "64", ">", "1", ":", "\n", "            ", "print", "(", "f\"==> Using {self.base_width // 64}x wide model\"", ")", "\n", "\n", "\n", "", "self", ".", "conv1", "=", "builder", ".", "conv7x7", "(", "3", ",", "math", ".", "ceil", "(", "64", "*", "slim_factor", ")", ",", "stride", "=", "2", ",", "first_layer", "=", "True", ")", "\n", "\n", "self", ".", "bn1", "=", "builder", ".", "batchnorm", "(", "math", ".", "ceil", "(", "64", "*", "slim_factor", ")", ")", "\n", "self", ".", "relu", "=", "builder", ".", "activation", "(", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "builder", ",", "block", ",", "64", ",", "layers", "[", "0", "]", ",", "slim_factor", "=", "slim_factor", ")", "\n", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "builder", ",", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "slim_factor", "=", "slim_factor", ")", "\n", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "builder", ",", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "slim_factor", "=", "slim_factor", ")", "\n", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "builder", ",", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ",", "slim_factor", "=", "slim_factor", ")", "\n", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "\n", "self", ".", "fc", "=", "builder", ".", "linear", "(", "math", ".", "ceil", "(", "512", "*", "block", ".", "expansion", "*", "slim_factor", ")", ",", "cfg", ".", "num_cls", ",", "last_layer", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.split_resnet.ResNet._make_layer": [[150, 169], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "builder.conv1x1", "builder.batchnorm", "block", "layers.append", "math.ceil", "math.ceil", "math.ceil", "torch.Sequential", "torch.Sequential", "block"], "methods", ["home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.builder.Builder.batchnorm"], ["", "def", "_make_layer", "(", "self", ",", "builder", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "slim_factor", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "dconv", "=", "builder", ".", "conv1x1", "(", "math", ".", "ceil", "(", "self", ".", "inplanes", "*", "slim_factor", ")", ",", "\n", "math", ".", "ceil", "(", "planes", "*", "block", ".", "expansion", "*", "slim_factor", ")", ",", "stride", "=", "stride", ")", "## Going into a residual link", "\n", "dbn", "=", "builder", ".", "batchnorm", "(", "math", ".", "ceil", "(", "planes", "*", "block", ".", "expansion", "*", "slim_factor", ")", ")", "\n", "if", "dbn", "is", "not", "None", ":", "\n", "                ", "downsample", "=", "nn", ".", "Sequential", "(", "dconv", ",", "dbn", ")", "\n", "", "else", ":", "\n", "                ", "downsample", "=", "dconv", "\n", "\n", "", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "builder", ",", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "base_width", "=", "self", ".", "base_width", ",", "slim_factor", "=", "slim_factor", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "builder", ",", "self", ".", "inplanes", ",", "planes", ",", "base_width", "=", "self", ".", "base_width", ",", "\n", "slim_factor", "=", "slim_factor", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.split_resnet.ResNet.forward": [[170, 198], ["split_resnet.ResNet.conv1", "split_resnet.ResNet.relu", "split_resnet.ResNet.maxpool", "split_resnet.ResNet.layer1", "split_resnet.ResNet.layer2", "split_resnet.ResNet.layer3", "split_resnet.ResNet.layer4", "split_resnet.ResNet.avgpool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "split_resnet.ResNet.fc", "split_resnet.ResNet.view", "split_resnet.ResNet.bn1", "split_resnet.ResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# features = []", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "# features.append(x)", "\n", "\n", "if", "self", ".", "bn1", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "# features.append(x)", "\n", "# print('resnet 1 ',torch.norm(x[:,:x.shape[1]//split]))", "\n", "# self.layer1[0].split = split", "\n", "# self.layer1[1].split = split", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "# features.append(x)", "\n", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "# features.append(x)", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "# features.append(x)", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "# features.append(x)", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "# features.append(x)", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.split_resnet._IncompatibleKeys.__repr__": [[202, 206], ["super().__repr__"], "methods", ["home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.split_resnet._IncompatibleKeys.__repr__"], ["    ", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "missing_keys", "and", "not", "self", ".", "unexpected_keys", ":", "\n", "            ", "return", "'<All keys matched successfully>'", "\n", "", "return", "super", "(", "_IncompatibleKeys", ",", "self", ")", ".", "__repr__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.split_resnet.load_state_dict": [[209, 261], ["getattr", "state_dict.copy.copy", "split_resnet.load_state_dict.load"], "function", ["None"], ["", "def", "load_state_dict", "(", "model", ",", "state_dict", ",", "\n", "strict", ":", "bool", "=", "True", ")", ":", "\n", "    ", "r\"\"\"Copies parameters and buffers from :attr:`state_dict` into\n    this module and its descendants. If :attr:`strict` is ``True``, then\n    the keys of :attr:`state_dict` must exactly match the keys returned\n    by this module's :meth:`~torch.nn.Module.state_dict` function.\n    Arguments:\n        state_dict (dict): a dict containing parameters and\n            persistent buffers.\n        strict (bool, optional): whether to strictly enforce that the keys\n            in :attr:`state_dict` match the keys returned by this module's\n            :meth:`~torch.nn.Module.state_dict` function. Default: ``True``\n    Returns:\n        ``NamedTuple`` with ``missing_keys`` and ``unexpected_keys`` fields:\n            * **missing_keys** is a list of str containing the missing keys\n            * **unexpected_keys** is a list of str containing the unexpected keys\n    \"\"\"", "\n", "missing_keys", "=", "[", "]", "\n", "unexpected_keys", "=", "[", "]", "\n", "error_msgs", "=", "[", "]", "\n", "\n", "# copy state_dict so _load_from_state_dict can modify it", "\n", "metadata", "=", "getattr", "(", "state_dict", ",", "'_metadata'", ",", "None", ")", "\n", "state_dict", "=", "state_dict", ".", "copy", "(", ")", "\n", "if", "metadata", "is", "not", "None", ":", "\n", "        ", "state_dict", ".", "_metadata", "=", "metadata", "\n", "\n", "", "def", "load", "(", "module", ",", "prefix", "=", "''", ")", ":", "\n", "        ", "local_metadata", "=", "{", "}", "if", "metadata", "is", "None", "else", "metadata", ".", "get", "(", "prefix", "[", ":", "-", "1", "]", ",", "{", "}", ")", "\n", "module", ".", "_load_from_state_dict", "(", "\n", "state_dict", ",", "prefix", ",", "local_metadata", ",", "True", ",", "missing_keys", ",", "unexpected_keys", ",", "error_msgs", ")", "\n", "for", "name", ",", "child", "in", "module", ".", "_modules", ".", "items", "(", ")", ":", "\n", "            ", "if", "child", "is", "not", "None", "and", "not", "(", "child", ".", "__class__", ".", "__name__", "==", "'SplitLinear'", "or", "child", ".", "__class__", ".", "__name__", "==", "'Linear'", ")", ":", "\n", "                ", "load", "(", "child", ",", "prefix", "+", "name", "+", "'.'", ")", "\n", "\n", "", "", "", "load", "(", "model", ")", "\n", "load", "=", "None", "# break load->load reference cycle", "\n", "\n", "if", "strict", ":", "\n", "        ", "if", "len", "(", "unexpected_keys", ")", ">", "0", ":", "\n", "            ", "error_msgs", ".", "insert", "(", "\n", "0", ",", "'Unexpected key(s) in state_dict: {}. '", ".", "format", "(", "\n", "', '", ".", "join", "(", "'\"{}\"'", ".", "format", "(", "k", ")", "for", "k", "in", "unexpected_keys", ")", ")", ")", "\n", "", "if", "len", "(", "missing_keys", ")", ">", "0", ":", "\n", "            ", "error_msgs", ".", "insert", "(", "\n", "0", ",", "'Missing key(s) in state_dict: {}. '", ".", "format", "(", "\n", "', '", ".", "join", "(", "'\"{}\"'", ".", "format", "(", "k", ")", "for", "k", "in", "missing_keys", ")", ")", ")", "\n", "\n", "", "", "if", "len", "(", "error_msgs", ")", ">", "0", ":", "\n", "        ", "raise", "RuntimeError", "(", "'Error(s) in loading state_dict for {}:\\n\\t{}'", ".", "format", "(", "\n", "model", ".", "__class__", ".", "__name__", ",", "\"\\n\\t\"", ".", "join", "(", "error_msgs", ")", ")", ")", "\n", "", "return", "_IncompatibleKeys", "(", "missing_keys", ",", "unexpected_keys", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.split_resnet.Split_ResNet18": [[263, 271], ["split_resnet.ResNet", "models.builder.get_builder", "load_state_dict_from_url", "split_resnet.load_state_dict"], "function", ["home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.builder.get_builder", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.split_resnet.load_state_dict"], ["", "def", "Split_ResNet18", "(", "cfg", ",", "progress", "=", "True", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "cfg", ",", "get_builder", "(", "cfg", ")", ",", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ")", "\n", "if", "cfg", ".", "pretrained", "==", "'imagenet'", ":", "\n", "        ", "arch", "=", "'resnet18'", "\n", "state_dict", "=", "load_state_dict_from_url", "(", "model_urls", "[", "arch", "]", ",", "\n", "progress", "=", "progress", ")", "\n", "load_state_dict", "(", "model", ",", "state_dict", ",", "strict", "=", "False", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.split_resnet.Split_ResNet34": [[272, 280], ["split_resnet.ResNet", "models.builder.get_builder", "load_state_dict_from_url", "split_resnet.load_state_dict"], "function", ["home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.builder.get_builder", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.split_resnet.load_state_dict"], ["", "def", "Split_ResNet34", "(", "cfg", ",", "progress", "=", "True", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "cfg", ",", "get_builder", "(", "cfg", ")", ",", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", "\n", "if", "cfg", ".", "pretrained", "==", "'imagenet'", ":", "\n", "        ", "arch", "=", "'resnet34'", "\n", "state_dict", "=", "load_state_dict_from_url", "(", "model_urls", "[", "arch", "]", ",", "\n", "progress", "=", "progress", ")", "\n", "load_state_dict", "(", "model", ",", "state_dict", ",", "strict", "=", "False", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.split_resnet.Split_ResNet50": [[281, 289], ["split_resnet.ResNet", "models.builder.get_builder", "load_state_dict_from_url", "split_resnet.load_state_dict"], "function", ["home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.builder.get_builder", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.split_resnet.load_state_dict"], ["", "def", "Split_ResNet50", "(", "cfg", ",", "progress", "=", "True", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "cfg", ",", "get_builder", "(", "cfg", ")", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", "\n", "if", "cfg", ".", "pretrained", "==", "'imagenet'", ":", "\n", "        ", "arch", "=", "'resnet50'", "\n", "state_dict", "=", "load_state_dict_from_url", "(", "model_urls", "[", "arch", "]", ",", "\n", "progress", "=", "progress", ")", "\n", "load_state_dict", "(", "model", ",", "state_dict", ",", "strict", "=", "False", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.split_resnet.Split_ResNet101": [[291, 299], ["split_resnet.ResNet", "models.builder.get_builder", "load_state_dict_from_url", "split_resnet.load_state_dict"], "function", ["home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.builder.get_builder", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.split_resnet.load_state_dict"], ["", "def", "Split_ResNet101", "(", "cfg", ",", "progress", "=", "True", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "cfg", ",", "get_builder", "(", "cfg", ")", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ")", "\n", "if", "cfg", ".", "pretrained", "==", "'imagenet'", ":", "\n", "        ", "arch", "=", "'resnet101'", "\n", "state_dict", "=", "load_state_dict_from_url", "(", "model_urls", "[", "arch", "]", ",", "\n", "progress", "=", "progress", ")", "\n", "load_state_dict", "(", "model", ",", "state_dict", ",", "strict", "=", "False", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.split_densenet._DenseLayer.__init__": [[29, 52], ["torch.Module.__init__", "float", "split_densenet._DenseLayer.add_module", "split_densenet._DenseLayer.add_module", "split_densenet._DenseLayer.add_module", "split_densenet._DenseLayer.add_module", "split_densenet._DenseLayer.add_module", "split_densenet._DenseLayer.add_module", "builder.batchnorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "builder.conv1x1", "builder.batchnorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "builder.conv3x3"], "methods", ["home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.configs.base_config.Config.__init__", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.builder.Builder.conv3x3"], ["    ", "def", "__init__", "(", "self", ",", "builder", ",", "num_input_features", ",", "growth_rate", ",", "bn_size", ",", "drop_rate", ",", "memory_efficient", "=", "False", ",", "in_channels_order", "=", "None", ")", ":", "\n", "        ", "super", "(", "_DenseLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# self.add_module('norm1', nn.BatchNorm2d(num_input_features)),", "\n", "# self.add_module('relu1', nn.ReLU(inplace=True)),", "\n", "# self.add_module('conv1', nn.Conv2d(num_input_features, bn_size *", "\n", "#                                    growth_rate, kernel_size=1, stride=1,", "\n", "#                                    bias=False)),", "\n", "# self.add_module('norm2', nn.BatchNorm2d(bn_size * growth_rate)),", "\n", "# self.add_module('relu2', nn.ReLU(inplace=True)),", "\n", "# self.add_module('conv2', nn.Conv2d(bn_size * growth_rate, growth_rate,", "\n", "#                                    kernel_size=3, stride=1, padding=1,", "\n", "#                                    bias=False)),", "\n", "\n", "self", ".", "add_module", "(", "'norm1'", ",", "builder", ".", "batchnorm", "(", "num_input_features", ",", "in_channels_order", "=", "in_channels_order", ")", ")", ",", "\n", "self", ".", "add_module", "(", "'relu1'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "self", ".", "add_module", "(", "'conv1'", ",", "builder", ".", "conv1x1", "(", "num_input_features", ",", "bn_size", "*", "\n", "growth_rate", ",", "stride", "=", "1", ",", "in_channels_order", "=", "in_channels_order", ")", ")", ",", "\n", "self", ".", "add_module", "(", "'norm2'", ",", "builder", ".", "batchnorm", "(", "bn_size", "*", "growth_rate", ")", ")", ",", "\n", "self", ".", "add_module", "(", "'relu2'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "self", ".", "add_module", "(", "'conv2'", ",", "builder", ".", "conv3x3", "(", "bn_size", "*", "growth_rate", ",", "growth_rate", ",", "stride", "=", "1", ")", ")", ",", "\n", "\n", "self", ".", "drop_rate", "=", "float", "(", "drop_rate", ")", "\n", "self", ".", "memory_efficient", "=", "memory_efficient", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.split_densenet._DenseLayer.bn_function": [[53, 58], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "split_densenet._DenseLayer.conv1", "split_densenet._DenseLayer.relu1", "split_densenet._DenseLayer.norm1"], "methods", ["None"], ["", "def", "bn_function", "(", "self", ",", "inputs", ")", ":", "\n", "# type: (List[Tensor]) -> Tensor", "\n", "        ", "concated_features", "=", "torch", ".", "cat", "(", "inputs", ",", "1", ")", "\n", "bottleneck_output", "=", "self", ".", "conv1", "(", "self", ".", "relu1", "(", "self", ".", "norm1", "(", "concated_features", ")", ")", ")", "# noqa: T484", "\n", "return", "bottleneck_output", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.split_densenet._DenseLayer.any_requires_grad": [[60, 66], ["None"], "methods", ["None"], ["", "def", "any_requires_grad", "(", "self", ",", "input", ")", ":", "\n", "# type: (List[Tensor]) -> bool", "\n", "        ", "for", "tensor", "in", "input", ":", "\n", "            ", "if", "tensor", ".", "requires_grad", ":", "\n", "                ", "return", "True", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.split_densenet._DenseLayer.call_checkpoint_bottleneck": [[67, 74], ["torch.checkpoint", "torch.checkpoint", "torch.checkpoint", "torch.checkpoint", "split_densenet._DenseLayer.bn_function"], "methods", ["home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.split_densenet._DenseLayer.bn_function"], ["", "@", "torch", ".", "jit", ".", "unused", "# noqa: T484", "\n", "def", "call_checkpoint_bottleneck", "(", "self", ",", "input", ")", ":", "\n", "# type: (List[Tensor]) -> Tensor", "\n", "        ", "def", "closure", "(", "*", "inputs", ")", ":", "\n", "            ", "return", "self", ".", "bn_function", "(", "inputs", ")", "\n", "\n", "", "return", "cp", ".", "checkpoint", "(", "closure", ",", "*", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.split_densenet._DenseLayer.forward": [[87, 106], ["isinstance", "split_densenet._DenseLayer.conv2", "split_densenet._DenseLayer.any_requires_grad", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "split_densenet._DenseLayer.call_checkpoint_bottleneck", "split_densenet._DenseLayer.bn_function", "split_densenet._DenseLayer.relu2", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "Exception", "split_densenet._DenseLayer.norm2"], "methods", ["home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.split_densenet._DenseLayer.any_requires_grad", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.split_densenet._DenseLayer.call_checkpoint_bottleneck", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.split_densenet._DenseLayer.bn_function"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "# noqa: F811", "\n", "        ", "if", "isinstance", "(", "input", ",", "Tensor", ")", ":", "\n", "            ", "prev_features", "=", "[", "input", "]", "\n", "", "else", ":", "\n", "            ", "prev_features", "=", "input", "\n", "\n", "", "if", "self", ".", "memory_efficient", "and", "self", ".", "any_requires_grad", "(", "prev_features", ")", ":", "\n", "            ", "if", "torch", ".", "jit", ".", "is_scripting", "(", ")", ":", "\n", "                ", "raise", "Exception", "(", "\"Memory Efficient not supported in JIT\"", ")", "\n", "\n", "", "bottleneck_output", "=", "self", ".", "call_checkpoint_bottleneck", "(", "prev_features", ")", "\n", "", "else", ":", "\n", "            ", "bottleneck_output", "=", "self", ".", "bn_function", "(", "prev_features", ")", "\n", "\n", "", "new_features", "=", "self", ".", "conv2", "(", "self", ".", "relu2", "(", "self", ".", "norm2", "(", "bottleneck_output", ")", ")", ")", "\n", "if", "self", ".", "drop_rate", ">", "0", ":", "\n", "            ", "new_features", "=", "F", ".", "dropout", "(", "new_features", ",", "p", "=", "self", ".", "drop_rate", ",", "\n", "training", "=", "self", ".", "training", ")", "\n", "", "return", "new_features", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.split_densenet._DenseBlock.__init__": [[111, 125], ["torch.ModuleDict.__init__", "range", "split_densenet._DenseLayer", "split_densenet._DenseBlock.add_module"], "methods", ["home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.configs.base_config.Config.__init__"], ["def", "__init__", "(", "self", ",", "builder", ",", "num_layers", ",", "num_input_features", ",", "bn_size", ",", "growth_rate", ",", "drop_rate", ",", "memory_efficient", "=", "False", ",", "in_channels_order", "=", "None", ")", ":", "\n", "        ", "super", "(", "_DenseBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "for", "i", "in", "range", "(", "num_layers", ")", ":", "\n", "            ", "layer", "=", "_DenseLayer", "(", "builder", ",", "\n", "num_input_features", "+", "i", "*", "growth_rate", ",", "\n", "growth_rate", "=", "growth_rate", ",", "\n", "bn_size", "=", "bn_size", ",", "\n", "drop_rate", "=", "drop_rate", ",", "\n", "memory_efficient", "=", "memory_efficient", ",", "\n", "in_channels_order", "=", "in_channels_order", "\n", ")", "\n", "in_channels_order", "+=", "',{}'", ".", "format", "(", "growth_rate", ")", "\n", "self", ".", "add_module", "(", "'denselayer%d'", "%", "(", "i", "+", "1", ")", ",", "layer", ")", "\n", "", "self", ".", "out_channels_order", "=", "in_channels_order", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.split_densenet._DenseBlock.forward": [[126, 132], ["split_densenet._DenseBlock.items", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "layer", "features.append"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "init_features", ")", ":", "\n", "        ", "features", "=", "[", "init_features", "]", "\n", "for", "name", ",", "layer", "in", "self", ".", "items", "(", ")", ":", "\n", "            ", "new_features", "=", "layer", "(", "features", ")", "\n", "features", ".", "append", "(", "new_features", ")", "\n", "", "return", "torch", ".", "cat", "(", "features", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.split_densenet._Transition.__init__": [[135, 147], ["torch.Sequential.__init__", "split_densenet._Transition.add_module", "split_densenet._Transition.add_module", "split_densenet._Transition.add_module", "split_densenet._Transition.add_module", "builder.batchnorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "builder.conv1x1", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d"], "methods", ["home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.configs.base_config.Config.__init__", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.builder.Builder.conv1x1"], ["    ", "def", "__init__", "(", "self", ",", "builder", ",", "num_input_features", ",", "num_output_features", ",", "in_channels_order", "=", "None", ")", ":", "\n", "        ", "super", "(", "_Transition", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# self.add_module('norm', nn.BatchNorm2d(num_input_features))", "\n", "# self.add_module('relu', nn.ReLU(inplace=True))", "\n", "# self.add_module('conv', nn.Conv2d(num_input_features, num_output_features,", "\n", "#                                   kernel_size=1, stride=1, bias=False))", "\n", "# self.add_module('pool', nn.AvgPool2d(kernel_size=2, stride=2))", "\n", "#", "\n", "self", ".", "add_module", "(", "'norm'", ",", "builder", ".", "batchnorm", "(", "num_input_features", ",", "in_channels_order", "=", "in_channels_order", ")", ")", "\n", "self", ".", "add_module", "(", "'relu'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "add_module", "(", "'conv'", ",", "builder", ".", "conv1x1", "(", "num_input_features", ",", "num_output_features", ",", "stride", "=", "1", ",", "in_channels_order", "=", "in_channels_order", ")", ")", "\n", "self", ".", "add_module", "(", "'pool'", ",", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.split_densenet.DenseNet.__init__": [[165, 235], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "enumerate", "split_densenet.DenseNet.features.add_module", "builder.linear", "split_densenet.DenseNet.modules", "cfg.logger.info", "math.ceil", "collections.OrderedDict", "split_densenet._DenseBlock", "split_densenet.DenseNet.features.add_module", "builder.batchnorm", "isinstance", "split_densenet._Transition", "split_densenet.DenseNet.features.add_module", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "slim", "slim", "len", "slim", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "builder.conv7x7", "builder.batchnorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "slim", "slim", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "slim", "slim", "slim", "slim"], "methods", ["home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.configs.base_config.Config.__init__", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.builder.Builder.linear", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.builder.Builder.conv7x7", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.builder.Builder.batchnorm"], ["def", "__init__", "(", "self", ",", "cfg", ",", "builder", ",", "growth_rate", "=", "32", ",", "block_config", "=", "(", "6", ",", "12", ",", "24", ",", "16", ")", ",", "\n", "num_init_features", "=", "64", ",", "bn_size", "=", "4", ",", "drop_rate", "=", "0", ",", "num_classes", "=", "1000", ",", "memory_efficient", "=", "False", ")", ":", "\n", "\n", "        ", "super", "(", "DenseNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "slim_factor", "=", "cfg", ".", "slim_factor", "\n", "if", "slim_factor", "<", "1", ":", "\n", "            ", "cfg", ".", "logger", ".", "info", "(", "'WARNING: You are using a slim network'", ")", "\n", "\n", "# num_init_features = math.ceil(num_init_features * slim_factor)", "\n", "# growth_rate = math.ceil(growth_rate * slim_factor)", "\n", "\n", "", "slim", "=", "lambda", "x", ":", "math", ".", "ceil", "(", "x", "*", "slim_factor", ")", "\n", "\n", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "\n", "(", "'conv0'", ",", "builder", ".", "conv7x7", "(", "3", ",", "slim", "(", "num_init_features", ")", ",", "stride", "=", "2", ")", ")", ",", "\n", "(", "'norm0'", ",", "builder", ".", "batchnorm", "(", "slim", "(", "num_init_features", ")", ")", ")", ",", "\n", "(", "'relu0'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "(", "'pool0'", ",", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ")", ",", "\n", "]", ")", ")", "\n", "\n", "# Each denseblock", "\n", "num_features", "=", "num_init_features", "\n", "# in_channels_order = '{}'.format(num_features)", "\n", "for", "i", ",", "num_layers", "in", "enumerate", "(", "block_config", ")", ":", "\n", "            ", "in_channels_order", "=", "'{}'", ".", "format", "(", "num_features", ")", "\n", "block", "=", "_DenseBlock", "(", "builder", ",", "\n", "num_layers", "=", "num_layers", ",", "\n", "num_input_features", "=", "slim", "(", "num_features", ")", ",", "\n", "bn_size", "=", "bn_size", ",", "\n", "growth_rate", "=", "slim", "(", "growth_rate", ")", ",", "\n", "drop_rate", "=", "drop_rate", ",", "\n", "memory_efficient", "=", "memory_efficient", ",", "\n", "in_channels_order", "=", "in_channels_order", ",", "\n", ")", "\n", "self", ".", "features", ".", "add_module", "(", "'denseblock%d'", "%", "(", "i", "+", "1", ")", ",", "block", ")", "\n", "pre_num_features", "=", "num_features", "\n", "\n", "if", "i", "!=", "len", "(", "block_config", ")", "-", "1", ":", "\n", "                ", "num_features", "=", "num_features", "+", "num_layers", "*", "growth_rate", "\n", "trans", "=", "_Transition", "(", "builder", ",", "num_input_features", "=", "slim", "(", "pre_num_features", ")", "+", "num_layers", "*", "slim", "(", "growth_rate", ")", ",", "\n", "num_output_features", "=", "slim", "(", "num_features", "//", "2", ")", ",", "in_channels_order", "=", "block", ".", "out_channels_order", ")", "\n", "self", ".", "features", ".", "add_module", "(", "'transition%d'", "%", "(", "i", "+", "1", ")", ",", "trans", ")", "\n", "num_features", "=", "num_features", "//", "2", "\n", "", "else", ":", "\n", "                ", "num_features", "=", "slim", "(", "num_features", ")", "+", "num_layers", "*", "slim", "(", "growth_rate", ")", "\n", "\n", "\n", "# else:", "\n", "#     num_features = slim(num_features) + num_layers * slim(growth_rate)", "\n", "\n", "\n", "\n", "# Final batch norm", "\n", "# self.features.add_module('norm5', nn.BatchNorm2d(num_features))", "\n", "", "", "self", ".", "features", ".", "add_module", "(", "'norm5'", ",", "builder", ".", "batchnorm", "(", "num_features", ",", "in_channels_order", "=", "block", ".", "out_channels_order", ")", ")", "\n", "\n", "# Linear layer", "\n", "# self.classifier = nn.Linear(num_features, num_classes)", "\n", "self", ".", "classifier", "=", "builder", ".", "linear", "(", "num_features", ",", "cfg", ".", "num_cls", ",", "last_layer", "=", "True", ",", "\n", "in_channels_order", "=", "block", ".", "out_channels_order", ")", "\n", "\n", "# Official init from torch repo.", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.split_densenet.DenseNet.forward": [[236, 243], ["split_densenet.DenseNet.features", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "split_densenet.DenseNet.classifier"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "features", "=", "self", ".", "features", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "features", ",", "inplace", "=", "True", ")", "\n", "out", "=", "F", ".", "adaptive_avg_pool2d", "(", "out", ",", "(", "1", ",", "1", ")", ")", "\n", "out", "=", "torch", ".", "flatten", "(", "out", ",", "1", ")", "\n", "out", "=", "self", ".", "classifier", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.split_densenet._load_state_dict": [[245, 262], ["re.compile", "load_state_dict_from_url", "list", "models.common.load_state_dict", "load_state_dict_from_url.keys", "re.compile.match", "pattern.match.group", "pattern.match.group"], "function", ["home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.split_resnet.load_state_dict"], ["", "", "def", "_load_state_dict", "(", "model", ",", "model_url", ",", "progress", ")", ":", "\n", "# '.'s are no longer allowed in module names, but previous _DenseLayer", "\n", "# has keys 'norm.1', 'relu.1', 'conv.1', 'norm.2', 'relu.2', 'conv.2'.", "\n", "# They are also in the checkpoints in model_urls. This pattern is used", "\n", "# to find such keys.", "\n", "    ", "pattern", "=", "re", ".", "compile", "(", "\n", "r'^(.*denselayer\\d+\\.(?:norm|relu|conv))\\.((?:[12])\\.(?:weight|bias|running_mean|running_var))$'", ")", "\n", "\n", "state_dict", "=", "load_state_dict_from_url", "(", "model_url", ",", "progress", "=", "progress", ")", "\n", "for", "key", "in", "list", "(", "state_dict", ".", "keys", "(", ")", ")", ":", "\n", "        ", "res", "=", "pattern", ".", "match", "(", "key", ")", "\n", "if", "res", ":", "\n", "            ", "new_key", "=", "res", ".", "group", "(", "1", ")", "+", "res", ".", "group", "(", "2", ")", "\n", "state_dict", "[", "new_key", "]", "=", "state_dict", "[", "key", "]", "\n", "del", "state_dict", "[", "key", "]", "\n", "\n", "", "", "common", ".", "load_state_dict", "(", "model", ",", "state_dict", ",", "strict", "=", "False", ")", "\n", "# model.load_state_dict(state_dict)", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.split_densenet._densenet": [[265, 271], ["split_densenet.DenseNet", "split_densenet._load_state_dict"], "function", ["home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.split_densenet._load_state_dict"], ["", "def", "_densenet", "(", "cfg", ",", "builder", ",", "arch", ",", "growth_rate", ",", "block_config", ",", "num_init_features", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "DenseNet", "(", "cfg", ",", "builder", ",", "growth_rate", ",", "block_config", ",", "num_init_features", ",", "**", "kwargs", ")", "\n", "if", "cfg", ".", "pretrained", "==", "'imagenet'", ":", "\n", "        ", "_load_state_dict", "(", "model", ",", "model_urls", "[", "arch", "]", ",", "progress", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.split_densenet.Split_densenet121": [[273, 285], ["split_densenet._densenet", "models.builder.get_builder"], "function", ["home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.split_densenet._densenet", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.builder.get_builder"], ["", "def", "Split_densenet121", "(", "cfg", ",", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"Densenet-121 model from\n    `\"Densely Connected Convolutional Networks\" <https://arxiv.org/pdf/1608.06993.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n        memory_efficient (bool) - If True, uses checkpointing. Much more memory efficient,\n          but slower. Default: *False*. See `\"paper\" <https://arxiv.org/pdf/1707.06990.pdf>`_\n    \"\"\"", "\n", "return", "_densenet", "(", "cfg", ",", "get_builder", "(", "cfg", ")", ",", "'densenet121'", ",", "32", ",", "(", "6", ",", "12", ",", "24", ",", "16", ")", ",", "64", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.split_densenet.Split_densenet161": [[287, 299], ["split_densenet._densenet", "models.builder.get_builder"], "function", ["home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.split_densenet._densenet", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.builder.get_builder"], ["", "def", "Split_densenet161", "(", "cfg", ",", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"Densenet-161 model from\n    `\"Densely Connected Convolutional Networks\" <https://arxiv.org/pdf/1608.06993.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n        memory_efficient (bool) - If True, uses checkpointing. Much more memory efficient,\n          but slower. Default: *False*. See `\"paper\" <https://arxiv.org/pdf/1707.06990.pdf>`_\n    \"\"\"", "\n", "return", "_densenet", "(", "cfg", ",", "get_builder", "(", "cfg", ")", ",", "'densenet161'", ",", "48", ",", "(", "6", ",", "12", ",", "36", ",", "24", ")", ",", "96", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.split_densenet.Split_densenet169": [[301, 313], ["split_densenet._densenet", "models.builder.get_builder"], "function", ["home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.split_densenet._densenet", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.builder.get_builder"], ["", "def", "Split_densenet169", "(", "cfg", ",", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"Densenet-169 model from\n    `\"Densely Connected Convolutional Networks\" <https://arxiv.org/pdf/1608.06993.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n        memory_efficient (bool) - If True, uses checkpointing. Much more memory efficient,\n          but slower. Default: *False*. See `\"paper\" <https://arxiv.org/pdf/1707.06990.pdf>`_\n    \"\"\"", "\n", "return", "_densenet", "(", "cfg", ",", "get_builder", "(", "cfg", ")", ",", "'densenet169'", ",", "32", ",", "(", "6", ",", "12", ",", "32", ",", "32", ")", ",", "64", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.split_densenet.Split_densenet201": [[315, 327], ["split_densenet._densenet", "models.builder.get_builder"], "function", ["home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.split_densenet._densenet", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.models.builder.get_builder"], ["", "def", "Split_densenet201", "(", "cfg", ",", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"Densenet-201 model from\n    `\"Densely Connected Convolutional Networks\" <https://arxiv.org/pdf/1608.06993.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n        memory_efficient (bool) - If True, uses checkpointing. Much more memory efficient,\n          but slower. Default: *False*. See `\"paper\" <https://arxiv.org/pdf/1707.06990.pdf>`_\n    \"\"\"", "\n", "return", "_densenet", "(", "cfg", ",", "get_builder", "(", "cfg", ")", ",", "'densenet201'", ",", "32", ",", "(", "6", ",", "12", ",", "48", ",", "32", ")", ",", "64", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.data.flower.Flower102Pytorch.__init__": [[13, 37], ["utils.path_utils.get_datasets_dir", "pandas.read_csv", "numpy.sort", "len", "flower.Flower102Pytorch.create_loader", "flower.Flower102Pytorch.create_loader", "flower.Flower102Pytorch.create_loader", "numpy.unique", "flower.Flower102Pytorch.lbl2idx_dict.keys", "enumerate", "list"], "methods", ["home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.path_utils.get_datasets_dir", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.data.aircraft.Aircraft100Pytorch.create_loader", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.data.aircraft.Aircraft100Pytorch.create_loader", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.data.aircraft.Aircraft100Pytorch.create_loader"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "\n", "        ", "db_path", "=", "path_utils", ".", "get_datasets_dir", "(", "cfg", ".", "set", ")", "\n", "self", ".", "img_path", "=", "db_path", "+", "'/jpg/'", "\n", "\n", "csv_file", "=", "'/lists/trn.csv'", "\n", "trn_data_df", "=", "pd", ".", "read_csv", "(", "db_path", "+", "csv_file", ")", "\n", "\n", "lbls", "=", "trn_data_df", "[", "'label'", "]", "\n", "lbl2idx", "=", "np", ".", "sort", "(", "np", ".", "unique", "(", "lbls", ")", ")", "\n", "self", ".", "lbl2idx_dict", "=", "{", "k", ":", "v", "for", "v", ",", "k", "in", "enumerate", "(", "lbl2idx", ")", "}", "\n", "self", ".", "final_lbls", "=", "[", "self", ".", "lbl2idx_dict", "[", "x", "]", "for", "x", "in", "list", "(", "lbls", ".", "values", ")", "]", "\n", "\n", "self", ".", "num_classes", "=", "len", "(", "self", ".", "lbl2idx_dict", ".", "keys", "(", ")", ")", "\n", "\n", "\n", "\n", "self", ".", "train_loader", "=", "self", ".", "create_loader", "(", "csv_file", ",", "cfg", ",", "is_training", "=", "True", ")", "\n", "\n", "csv_file", "=", "'/lists/tst.csv'", "\n", "self", ".", "tst_loader", "=", "self", ".", "create_loader", "(", "csv_file", ",", "cfg", ",", "is_training", "=", "False", ")", "\n", "\n", "csv_file", "=", "'/lists/val.csv'", "\n", "self", ".", "val_loader", "=", "self", ".", "create_loader", "(", "csv_file", ",", "cfg", ",", "is_training", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.data.flower.Flower102Pytorch.create_loader": [[39, 55], ["utils.path_utils.get_datasets_dir", "os.exists", "pandas.read_csv", "flower.Flower102Pytorch.imgs_and_lbls", "len", "torch.utils.data.DataLoader", "math.ceil", "data.custom_dataset.CustomDataset"], "methods", ["home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.path_utils.get_datasets_dir", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.data.aircraft.Aircraft100Pytorch.imgs_and_lbls"], ["", "def", "create_loader", "(", "self", ",", "imgs_lst", ",", "cfg", ",", "is_training", ")", ":", "\n", "        ", "db_path", "=", "path_utils", ".", "get_datasets_dir", "(", "cfg", ".", "set", ")", "\n", "if", "osp", ".", "exists", "(", "db_path", "+", "imgs_lst", ")", ":", "\n", "            ", "data_df", "=", "pd", ".", "read_csv", "(", "db_path", "+", "imgs_lst", ")", "\n", "imgs", ",", "lbls", "=", "self", ".", "imgs_and_lbls", "(", "data_df", ")", "\n", "epoch_size", "=", "len", "(", "imgs", ")", "\n", "loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "CustomDataset", "(", "imgs", ",", "lbls", ",", "is_training", "=", "is_training", ")", ",", "\n", "batch_size", "=", "cfg", ".", "batch_size", ",", "shuffle", "=", "is_training", ",", "\n", "num_workers", "=", "cfg", ".", "num_threads", ")", "\n", "\n", "loader", ".", "num_batches", "=", "math", ".", "ceil", "(", "epoch_size", "/", "cfg", ".", "batch_size", ")", "\n", "loader", ".", "num_files", "=", "epoch_size", "\n", "", "else", ":", "\n", "            ", "loader", "=", "None", "\n", "\n", "", "return", "loader", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.data.flower.Flower102Pytorch.imgs_and_lbls": [[56, 75], ["imgs[].tolist", "imgs[].tolist", "range"], "methods", ["None"], ["", "def", "imgs_and_lbls", "(", "self", ",", "data_df", ")", ":", "\n", "            ", "\"\"\"\n            Load images' paths and int32 labels\n            :param repeat: This is similar to TF.data.Dataset repeat. I use TF dataset repeat and no longer user this params.\n            So its default is False\n\n            :return: a list of images' paths and their corresponding int32 labels\n            \"\"\"", "\n", "\n", "imgs", "=", "data_df", "\n", "## Faster way to read data", "\n", "images", "=", "imgs", "[", "'file_name'", "]", ".", "tolist", "(", ")", "\n", "lbls", "=", "imgs", "[", "'label'", "]", ".", "tolist", "(", ")", "\n", "for", "img_idx", "in", "range", "(", "imgs", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "images", "[", "img_idx", "]", "=", "self", ".", "img_path", "+", "images", "[", "img_idx", "]", "\n", "lbls", "[", "img_idx", "]", "=", "self", ".", "lbl2idx_dict", "[", "lbls", "[", "img_idx", "]", "]", "\n", "\n", "\n", "", "return", "images", ",", "lbls", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.data.custom_dataset.CustomDataset.__init__": [[10, 28], ["torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.RandomResizedCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "imgs_path", ",", "lbls", ",", "is_training", ")", ":", "\n", "        ", "self", ".", "imgs_path", "=", "imgs_path", "\n", "self", ".", "lbls", "=", "lbls", "\n", "#self.idx = list(range(0,len(lbls)))", "\n", "if", "is_training", ":", "\n", "            ", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "# transforms.Resize(256),", "\n", "transforms", ".", "RandomResizedCrop", "(", "224", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.data.custom_dataset.CustomDataset.__len__": [[31, 33], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "imgs_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.data.custom_dataset.CustomDataset.__getitem__": [[34, 51], ["torch.is_tensor", "idx.tolist.tolist.tolist", "PIL.Image.open", "custom_dataset.CustomDataset.transform", "PIL.Image.open", "img.convert.convert.convert", "len", "len", "img.convert.convert.getbands"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "if", "torch", ".", "is_tensor", "(", "idx", ")", ":", "\n", "            ", "idx", "=", "idx", ".", "tolist", "(", ")", "\n", "", "if", "self", ".", "transform", ":", "\n", "            ", "img", "=", "Image", ".", "open", "(", "self", ".", "imgs_path", "[", "idx", "]", ")", "\n", "if", "len", "(", "img", ".", "mode", ")", "!=", "3", "or", "len", "(", "img", ".", "getbands", "(", ")", ")", "!=", "3", ":", "\n", "# print(len(img.mode),len(img.getbands()))", "\n", "# print(self.imgs_path[idx])", "\n", "                ", "img", "=", "img", ".", "convert", "(", "'RGB'", ")", "\n", "\n", "", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "# sample = {'image': self.transform(img), 'label': self.lbls[idx],'index': idx}", "\n", "", "else", ":", "\n", "            ", "img", "=", "Image", ".", "open", "(", "self", ".", "imgs_path", "[", "idx", "]", ")", "\n", "# sample = {'image': Image.open(self.imgs_path[idx]), 'label': self.lbls[idx],'index': idx}", "\n", "\n", "", "return", "img", ",", "self", ".", "lbls", "[", "idx", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.data.py_transform.Transform_single.__init__": [[5, 20], ["torchvision.Compose", "torchvision.Compose", "torchvision.RandomResizedCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Resize", "torchvision.Resize", "torchvision.CenterCrop", "torchvision.ToTensor", "torchvision.Normalize", "int", "int"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "image_size", ",", "train", ",", "mean_std", ")", ":", "\n", "        ", "if", "train", "==", "True", ":", "\n", "            ", "self", ".", "transform", "=", "T", ".", "Compose", "(", "[", "\n", "T", ".", "RandomResizedCrop", "(", "image_size", ",", "scale", "=", "(", "0.2", ",", "1.0", ")", ")", ",", "\n", "T", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "T", ".", "ToTensor", "(", ")", ",", "\n", "T", ".", "Normalize", "(", "*", "mean_std", ")", "\n", "]", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "transform", "=", "T", ".", "Compose", "(", "[", "\n", "T", ".", "Resize", "(", "int", "(", "image_size", "*", "(", "8", "/", "7", ")", ")", ",", "interpolation", "=", "Image", ".", "BICUBIC", ")", ",", "# 224 -> 256", "\n", "T", ".", "Resize", "(", "int", "(", "image_size", "*", "(", "8", "/", "7", ")", ")", ")", ",", "# 224 -> 256", "\n", "T", ".", "CenterCrop", "(", "image_size", ")", ",", "\n", "T", ".", "ToTensor", "(", ")", ",", "\n", "T", ".", "Normalize", "(", "*", "mean_std", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.data.py_transform.Transform_single.__call__": [[21, 23], ["py_transform.Transform_single.transform"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "transform", "(", "x", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.data.aircraft.Aircraft100Pytorch.__init__": [[12, 34], ["utils.path_utils.get_datasets_dir", "pandas.read_csv", "numpy.sort", "len", "aircraft.Aircraft100Pytorch.create_loader", "aircraft.Aircraft100Pytorch.create_loader", "aircraft.Aircraft100Pytorch.create_loader", "numpy.unique", "aircraft.Aircraft100Pytorch.lbl2idx_dict.keys", "enumerate", "list"], "methods", ["home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.path_utils.get_datasets_dir", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.data.aircraft.Aircraft100Pytorch.create_loader", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.data.aircraft.Aircraft100Pytorch.create_loader", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.data.aircraft.Aircraft100Pytorch.create_loader"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "\n", "        ", "db_path", "=", "path_utils", ".", "get_datasets_dir", "(", "cfg", ".", "set", ")", "\n", "self", ".", "img_path", "=", "db_path", "+", "'/images/'", "\n", "\n", "csv_file", "=", "'/lists/trn.csv'", "\n", "trn_data_df", "=", "pd", ".", "read_csv", "(", "db_path", "+", "csv_file", ")", "\n", "\n", "lbls", "=", "trn_data_df", "[", "'label'", "]", "\n", "lbl2idx", "=", "np", ".", "sort", "(", "np", ".", "unique", "(", "lbls", ")", ")", "\n", "self", ".", "lbl2idx_dict", "=", "{", "k", ":", "v", "for", "v", ",", "k", "in", "enumerate", "(", "lbl2idx", ")", "}", "\n", "self", ".", "final_lbls", "=", "[", "self", ".", "lbl2idx_dict", "[", "x", "]", "for", "x", "in", "list", "(", "lbls", ".", "values", ")", "]", "\n", "\n", "self", ".", "num_classes", "=", "len", "(", "self", ".", "lbl2idx_dict", ".", "keys", "(", ")", ")", "\n", "\n", "self", ".", "train_loader", "=", "self", ".", "create_loader", "(", "csv_file", ",", "cfg", ",", "is_training", "=", "True", ")", "\n", "\n", "csv_file", "=", "'/lists/tst.csv'", "\n", "self", ".", "tst_loader", "=", "self", ".", "create_loader", "(", "csv_file", ",", "cfg", ",", "is_training", "=", "False", ")", "\n", "\n", "csv_file", "=", "'/lists/val.csv'", "\n", "self", ".", "val_loader", "=", "self", ".", "create_loader", "(", "csv_file", ",", "cfg", ",", "is_training", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.data.aircraft.Aircraft100Pytorch.create_loader": [[35, 51], ["utils.path_utils.get_datasets_dir", "os.exists", "pandas.read_csv", "aircraft.Aircraft100Pytorch.imgs_and_lbls", "len", "torch.utils.data.DataLoader", "math.ceil", "data.custom_dataset.CustomDataset"], "methods", ["home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.path_utils.get_datasets_dir", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.data.aircraft.Aircraft100Pytorch.imgs_and_lbls"], ["", "def", "create_loader", "(", "self", ",", "imgs_lst", ",", "cfg", ",", "is_training", ")", ":", "\n", "        ", "db_path", "=", "path_utils", ".", "get_datasets_dir", "(", "cfg", ".", "set", ")", "\n", "if", "osp", ".", "exists", "(", "db_path", "+", "imgs_lst", ")", ":", "\n", "            ", "data_df", "=", "pd", ".", "read_csv", "(", "db_path", "+", "imgs_lst", ")", "\n", "imgs", ",", "lbls", "=", "self", ".", "imgs_and_lbls", "(", "data_df", ")", "\n", "epoch_size", "=", "len", "(", "imgs", ")", "\n", "loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "CustomDataset", "(", "imgs", ",", "lbls", ",", "is_training", "=", "is_training", ")", ",", "\n", "batch_size", "=", "cfg", ".", "batch_size", ",", "shuffle", "=", "is_training", ",", "\n", "num_workers", "=", "cfg", ".", "num_threads", ")", "\n", "\n", "loader", ".", "num_batches", "=", "math", ".", "ceil", "(", "epoch_size", "/", "cfg", ".", "batch_size", ")", "\n", "loader", ".", "num_files", "=", "epoch_size", "\n", "", "else", ":", "\n", "            ", "loader", "=", "None", "\n", "\n", "", "return", "loader", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.data.aircraft.Aircraft100Pytorch.imgs_and_lbls": [[52, 70], ["imgs[].tolist", "imgs[].tolist", "range"], "methods", ["None"], ["", "def", "imgs_and_lbls", "(", "self", ",", "data_df", ")", ":", "\n", "        ", "\"\"\"\n        Load images' paths and int32 labels\n        :param repeat: This is similar to TF.data.Dataset repeat. I use TF dataset repeat and no longer user this params.\n        So its default is False\n\n        :return: a list of images' paths and their corresponding int32 labels\n        \"\"\"", "\n", "\n", "imgs", "=", "data_df", "\n", "## Faster way to read data", "\n", "images", "=", "imgs", "[", "'file_name'", "]", ".", "tolist", "(", ")", "\n", "lbls", "=", "imgs", "[", "'label'", "]", ".", "tolist", "(", ")", "\n", "for", "img_idx", "in", "range", "(", "imgs", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "images", "[", "img_idx", "]", "=", "self", ".", "img_path", "+", "images", "[", "img_idx", "]", "\n", "lbls", "[", "img_idx", "]", "=", "self", ".", "lbl2idx_dict", "[", "lbls", "[", "img_idx", "]", "]", "\n", "\n", "", "return", "images", ",", "lbls", "", "", "", ""]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.configs.base_config.Config.__init__": [[15, 247], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"Knowledge Evolution Training Approach\"", ")", "\n", "\n", "# General Config", "\n", "parser", ".", "add_argument", "(", "\n", "\"--data\"", ",", "help", "=", "\"path to dataset base directory\"", ",", "default", "=", "\"/mnt/disk1/datasets\"", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--optimizer\"", ",", "help", "=", "\"Which optimizer to use\"", ",", "default", "=", "\"sgd\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--set\"", ",", "help", "=", "\"only Flower102Pytorch is currently supported\"", ",", "\n", "type", "=", "str", ",", "default", "=", "\"Flower102Pytorch\"", ",", "\n", "choices", "=", "[", "'Flower102Pytorch'", ",", "'Aircraft100Pytorch'", "]", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"-a\"", ",", "\"--arch\"", ",", "metavar", "=", "\"ARCH\"", ",", "default", "=", "\"Split_ResNet18\"", ",", "help", "=", "\"model architecture\"", ",", "\n", "choices", "=", "[", "'Split_ResNet18'", ",", "'Split_ResNet34'", ",", "'Split_ResNet50'", ",", "'Split_ResNet101'", ",", "\n", "'Split_googlenet'", ",", "\n", "'Split_densenet121'", ",", "'Split_densenet161'", ",", "'Split_densenet169'", ",", "'Split_densenet201'", ",", "\n", "]", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--config_file\"", ",", "help", "=", "\"Config file to use (see configs dir)\"", ",", "default", "=", "None", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--log-dir\"", ",", "help", "=", "\"Where to save the runs. If None use ./runs\"", ",", "default", "=", "None", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "'--evolve_mode'", ",", "default", "=", "'rand'", ",", "choices", "=", "[", "'rand'", "]", ",", "\n", "help", "=", "'How to initialize the reset-hypothesis.'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"-t\"", ",", "\n", "\"--num_threads\"", ",", "\n", "default", "=", "8", ",", "\n", "type", "=", "int", ",", "\n", "metavar", "=", "\"N\"", ",", "\n", "help", "=", "\"number of data loading workers (default: 20)\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--epochs\"", ",", "\n", "default", "=", "90", ",", "\n", "type", "=", "int", ",", "\n", "metavar", "=", "\"N\"", ",", "\n", "help", "=", "\"number of total epochs to run\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--start-epoch\"", ",", "\n", "default", "=", "None", ",", "\n", "type", "=", "int", ",", "\n", "metavar", "=", "\"N\"", ",", "\n", "help", "=", "\"manual epoch number (useful on restarts)\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"-b\"", ",", "\n", "\"--batch_size\"", ",", "\n", "default", "=", "256", ",", "\n", "type", "=", "int", ",", "\n", "metavar", "=", "\"N\"", ",", "\n", "help", "=", "\"mini-batch size (default: 256), this is the total \"", "\n", "\"batch size of all GPUs on the current node when \"", "\n", "\"using Data Parallel or Distributed Data Parallel\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--lr\"", ",", "\n", "\"--learning-rate\"", ",", "\n", "default", "=", "0.1", ",", "\n", "type", "=", "float", ",", "\n", "metavar", "=", "\"LR\"", ",", "\n", "help", "=", "\"initial learning rate\"", ",", "\n", "dest", "=", "\"lr\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--warmup_length\"", ",", "default", "=", "0", ",", "type", "=", "int", ",", "help", "=", "\"Number of warmup iterations\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--momentum\"", ",", "default", "=", "0.9", ",", "type", "=", "float", ",", "metavar", "=", "\"M\"", ",", "help", "=", "\"momentum\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--wd\"", ",", "\n", "\"--weight_decay\"", ",", "\n", "default", "=", "1e-4", ",", "\n", "type", "=", "float", ",", "\n", "metavar", "=", "\"W\"", ",", "\n", "help", "=", "\"weight decay (default: 1e-4)\"", ",", "\n", "dest", "=", "\"weight_decay\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"-p\"", ",", "\n", "\"--print-freq\"", ",", "\n", "default", "=", "10000", ",", "\n", "type", "=", "int", ",", "\n", "metavar", "=", "\"N\"", ",", "\n", "help", "=", "\"print frequency (default: 10)\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "'--bn_freeze'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "\n", "help", "=", "'Batch normalization parameter freeze'", "\n", ")", "\n", "parser", ".", "add_argument", "(", "'--samples_per_class'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "\n", "help", "=", "'Number of samples per class inside a mini-batch.'", "\n", ")", "\n", "parser", ".", "add_argument", "(", "'--alpha'", ",", "default", "=", "32", ",", "type", "=", "float", ",", "\n", "help", "=", "'Scaling Parameter setting'", "\n", ")", "\n", "parser", ".", "add_argument", "(", "'--warm'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "\n", "help", "=", "'Warmup training epochs'", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--resume\"", ",", "\n", "default", "=", "\"\"", ",", "\n", "type", "=", "str", ",", "\n", "metavar", "=", "\"PATH\"", ",", "\n", "help", "=", "\"path to latest checkpoint (default: none)\"", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--pretrained\"", ",", "\n", "dest", "=", "\"pretrained\"", ",", "\n", "default", "=", "None", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "\"use pre-trained model\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--seed\"", ",", "default", "=", "None", ",", "type", "=", "int", ",", "help", "=", "\"seed for initializing training. \"", "\n", ")", "\n", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--world_size\"", ",", "\n", "default", "=", "1", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "\"Pytorch DDP world size\"", ",", "\n", ")", "\n", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--gpu\"", ",", "\n", "default", "=", "'0'", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "\"Which GPUs to use?\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--test_interval\"", ",", "default", "=", "10", ",", "type", "=", "int", ",", "help", "=", "\"Eval on tst/val split every ? epochs\"", "\n", ")", "\n", "\n", "# Learning Rate Policy Specific", "\n", "parser", ".", "add_argument", "(", "\n", "\"--lr_policy\"", ",", "default", "=", "\"constant_lr\"", ",", "help", "=", "\"Policy for the learning rate.\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--multistep-lr-adjust\"", ",", "default", "=", "30", ",", "type", "=", "int", ",", "help", "=", "\"Interval to drop lr\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--multistep-lr-gamma\"", ",", "default", "=", "0.1", ",", "type", "=", "int", ",", "help", "=", "\"Multistep multiplier\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--name\"", ",", "default", "=", "None", ",", "type", "=", "str", ",", "help", "=", "\"Experiment name to append to filepath\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--log_file\"", ",", "default", "=", "'train_log.txt'", ",", "type", "=", "str", ",", "help", "=", "\"Experiment name to append to filepath\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--save_every\"", ",", "default", "=", "-", "1", ",", "type", "=", "int", ",", "help", "=", "\"Save every ___ epochs\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--num_generations\"", ",", "default", "=", "100", ",", "type", "=", "int", ",", "help", "=", "\"Task Mask number of generations\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "'--lr-decay-step'", ",", "default", "=", "10", ",", "type", "=", "int", ",", "help", "=", "'Learning decay step setting'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr-decay-gamma'", ",", "default", "=", "0.5", ",", "type", "=", "float", ",", "help", "=", "'Learning decay gamma setting'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--split_rate\"", ",", "\n", "default", "=", "1.0", ",", "\n", "help", "=", "\"What is the split-rate for the split-network weights?\"", ",", "\n", "type", "=", "float", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--bias_split_rate\"", ",", "\n", "default", "=", "1.0", ",", "\n", "help", "=", "\"What is the bias split-rate for the split-network weights?\"", ",", "\n", "type", "=", "float", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--slim_factor\"", ",", "\n", "default", "=", "1.0", ",", "\n", "help", "=", "\"This variable is used to extract a slim network from a dense network. \"", "\n", "\"It is initialized using the split_rate of the trained dense network.\"", ",", "\n", "type", "=", "float", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--split_mode\"", ",", "\n", "default", "=", "\"kels\"", ",", "\n", "choices", "=", "[", "'kels'", ",", "'wels'", "]", ",", "\n", "help", "=", "\"how to split the binary mask\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--conv_type\"", ",", "type", "=", "str", ",", "default", "=", "'SplitConv'", ",", "help", "=", "\"SplitConv | DenseConv\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--linear_type\"", ",", "type", "=", "str", ",", "default", "=", "'SplitLinear'", ",", "help", "=", "\"SplitLinear | DenseLinear\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--mode\"", ",", "default", "=", "\"fan_in\"", ",", "help", "=", "\"Weight initialization mode\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--nonlinearity\"", ",", "default", "=", "\"relu\"", ",", "help", "=", "\"Nonlinearity used by initialization\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--bn_type\"", ",", "default", "=", "'SplitBatchNorm'", ",", "help", "=", "\"BatchNorm type\"", ",", "\n", "choices", "=", "[", "'NormalBatchNorm'", ",", "'NonAffineBatchNorm'", ",", "'SplitBatchNorm'", "]", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--init\"", ",", "default", "=", "\"kaiming_normal\"", ",", "help", "=", "\"Weight initialization modifications\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--no-bn-decay\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", ",", "help", "=", "\"No batchnorm decay\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--scale-fan\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", ",", "help", "=", "\"scale fan\"", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--cs_kd\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", ",", "help", "=", "\"Enable Cls_KD\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--reset_mask\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", ",", "help", "=", "\"Reset mask?\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--reset_hypothesis\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", ",", "help", "=", "\"Reset hypothesis across generations\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--label_smoothing\"", ",", "\n", "type", "=", "float", ",", "\n", "help", "=", "\"Label smoothing to use, default 0.0\"", ",", "\n", "default", "=", "None", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--trainer\"", ",", "type", "=", "str", ",", "default", "=", "\"default\"", ",", "help", "=", "\"cs, ss, or standard training\"", "\n", ")", "\n", "\n", "\n", "self", ".", "parser", "=", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.configs.base_config.Config.parse": [[248, 296], ["base_config.Config.parser.parse_args", "os.join", "os.join", "utils.os_utils.touch_dir", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "logging.config.dictConfig", "logging.getLogger", "utils.path_utils.get_checkpoint_dir", "utils.log_utils.get_logging_dict", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.os_utils.touch_dir", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.path_utils.get_checkpoint_dir", "home.repos.pwc.inspect_result.ahmdtaha_knowledge_evolution.utils.log_utils.get_logging_dict"], ["", "def", "parse", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "cfg", "=", "self", ".", "parser", ".", "parse_args", "(", "args", ")", "\n", "\n", "# Allow for use from notebook without config file", "\n", "# self.read_config_file()", "\n", "# self.read_cmd_args()", "\n", "\n", "if", "self", ".", "cfg", ".", "set", "==", "'Flower102'", "or", "self", ".", "cfg", ".", "set", "==", "'Flower102Pytorch'", ":", "\n", "            ", "self", ".", "cfg", ".", "num_cls", "=", "102", "\n", "self", ".", "cfg", ".", "eval_tst", "=", "True", "\n", "", "elif", "self", ".", "cfg", ".", "set", "==", "'CUB200'", ":", "\n", "            ", "self", ".", "cfg", ".", "num_cls", "=", "200", "\n", "self", ".", "cfg", ".", "eval_tst", "=", "False", "\n", "", "elif", "self", ".", "cfg", ".", "set", "==", "'ImageNet'", ":", "\n", "            ", "self", ".", "cfg", ".", "num_cls", "=", "1000", "\n", "self", ".", "cfg", ".", "eval_tst", "=", "False", "\n", "", "elif", "self", ".", "cfg", ".", "set", "==", "'FCAMD'", ":", "\n", "            ", "self", ".", "cfg", ".", "num_cls", "=", "250", "\n", "self", ".", "cfg", ".", "eval_tst", "=", "False", "\n", "", "elif", "self", ".", "cfg", ".", "set", "==", "'CUB200_RET'", ":", "\n", "            ", "self", ".", "cfg", ".", "num_cls", "=", "self", ".", "cfg", ".", "emb_dim", "\n", "self", ".", "cfg", ".", "eval_tst", "=", "False", "\n", "", "elif", "self", ".", "cfg", ".", "set", "==", "'CARS_RET'", ":", "\n", "            ", "self", ".", "cfg", ".", "num_cls", "=", "self", ".", "cfg", ".", "emb_dim", "\n", "self", ".", "cfg", ".", "eval_tst", "=", "False", "\n", "", "elif", "self", ".", "cfg", ".", "set", "==", "'Dog120'", ":", "\n", "            ", "self", ".", "cfg", ".", "num_cls", "=", "120", "\n", "self", ".", "cfg", ".", "eval_tst", "=", "False", "\n", "", "elif", "self", ".", "cfg", ".", "set", "in", "[", "'MIT67'", "]", ":", "\n", "            ", "self", ".", "cfg", ".", "num_cls", "=", "67", "\n", "self", ".", "cfg", ".", "eval_tst", "=", "False", "\n", "", "elif", "self", ".", "cfg", ".", "set", "==", "'Aircraft100'", "or", "self", ".", "cfg", ".", "set", "==", "'Aircraft100Pytorch'", ":", "\n", "            ", "self", ".", "cfg", ".", "num_cls", "=", "100", "\n", "self", ".", "cfg", ".", "eval_tst", "=", "True", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'Invalid dataset {}'", ".", "format", "(", "self", ".", "cfg", ".", "set", ")", ")", "\n", "\n", "", "if", "self", ".", "cfg", ".", "cs_kd", ":", "\n", "            ", "self", ".", "cfg", ".", "samples_per_class", "=", "2", "\n", "\n", "", "self", ".", "cfg", ".", "exp_dir", "=", "osp", ".", "join", "(", "path_utils", ".", "get_checkpoint_dir", "(", ")", ",", "self", ".", "cfg", ".", "name", ")", "\n", "\n", "os_utils", ".", "touch_dir", "(", "self", ".", "cfg", ".", "exp_dir", ")", "\n", "log_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "cfg", ".", "exp_dir", ",", "self", ".", "cfg", ".", "log_file", ")", "\n", "logging", ".", "config", ".", "dictConfig", "(", "log_utils", ".", "get_logging_dict", "(", "log_file", ")", ")", "\n", "self", ".", "cfg", ".", "logger", "=", "logging", ".", "getLogger", "(", "'KE'", ")", "\n", "\n", "return", "self", ".", "cfg", "\n", "\n"]]}