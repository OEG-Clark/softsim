{"home.repos.pwc.inspect_result.zhuyun97_rosa.None.eval.str2bool": [[11, 20], ["isinstance", "v.lower", "v.lower", "argparse.ArgumentTypeError"], "function", ["None"], ["def", "str2bool", "(", "v", ")", ":", "\n", "    ", "if", "isinstance", "(", "v", ",", "bool", ")", ":", "\n", "        ", "return", "v", "\n", "", "if", "v", ".", "lower", "(", ")", "in", "(", "'yes'", ",", "'y'", ",", "'true'", ",", "'t'", ",", "'1'", ")", ":", "\n", "        ", "return", "True", "\n", "", "if", "v", ".", "lower", "(", ")", "in", "(", "'no'", ",", "'n'", ",", "'false'", ",", "'f'", ",", "'0'", ")", ":", "\n", "        ", "return", "False", "\n", "", "else", ":", "\n", "        ", "raise", "argparse", ".", "ArgumentTypeError", "(", "'Boolean value expected.'", ")", "\n", "", "", "def", "get_parser", "(", ")", ":", "\n"]], "home.repos.pwc.inspect_result.zhuyun97_rosa.None.eval.get_parser": [[20, 27], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["", "", "def", "get_parser", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Description: Script to run our model.'", ")", "\n", "parser", ".", "add_argument", "(", "'--config'", ",", "type", "=", "str", ",", "default", "=", "'config.yaml'", ")", "\n", "# dataset", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "help", "=", "'Cora, Citeseer , Pubmed, etc. Default=Cora'", ",", "default", "=", "'Cora'", ")", "\n", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuyun97_rosa.None.train.train": [[23, 121], ["augmentation.RWR", "getattr", "getattr.", "torch_geometric.data.DataLoader", "model.RoSA().to", "tqdm.tqdm", "importlib.import_module", "torch.optim.SGD", "os.path.exists", "os.makedirs", "range", "RoSA().to.train", "enumerate", "print", "RoSA().to.load_state_dict", "model.RoSA", "RoSA().to.parameters", "torch.optim.Adam", "RoSA().to.train", "torch.optim.AdamW.zero_grad", "len", "range", "numpy.random.permutation", "torch_geometric.data.Batch().from_data_list().to", "torch_geometric.data.Batch().from_data_list().to", "augmentation.DropEdgeAndFeature", "augmentation.DropEdgeAndFeature.drop_fea_edge", "augmentation.DropEdgeAndFeature.set_drop_ratio", "augmentation.DropEdgeAndFeature.drop_fea_edge", "tqdm.tqdm.set_postfix", "model.backward", "torch.optim.AdamW.step", "torch.save", "print", "torch.load", "RoSA().to.parameters", "torch.optim.AdamW", "len", "len", "view1_list.extend", "view2_list.extend", "adversarial.ad_training", "RoSA().to.", "RoSA().to.state_dict", "os.path.join", "os.path.join", "args.dataset.lower", "RoSA().to.parameters", "[].to_data_list", "[].to_data_list", "torch_geometric.data.Batch().from_data_list", "torch_geometric.data.Batch().from_data_list", "RoSA().to.", "model.item", "torch_geometric.data.Batch", "torch_geometric.data.Batch"], "function", ["home.repos.pwc.inspect_result.zhuyun97_rosa.None.train.train", "home.repos.pwc.inspect_result.zhuyun97_rosa.None.train.train", "home.repos.pwc.inspect_result.zhuyun97_rosa.None.augmentation.DropEdgeAndFeature.drop_fea_edge", "home.repos.pwc.inspect_result.zhuyun97_rosa.None.augmentation.DropEdgeAndFeature.set_drop_ratio", "home.repos.pwc.inspect_result.zhuyun97_rosa.None.augmentation.DropEdgeAndFeature.drop_fea_edge", "home.repos.pwc.inspect_result.zhuyun97_rosa.None.adversarial.ad_training"], ["def", "train", "(", "args", ")", ":", "\n", "    ", "trans", "=", "RWR", "(", "walk_step", "=", "args", ".", "walk_step", ",", "graph_num", "=", "args", ".", "graph_num", ",", "restart_ratio", "=", "args", ".", "restart_ratio", ",", "aligned", "=", "args", ".", "aligned", ",", "inductive", "=", "args", ".", "inductive", ")", "\n", "load_dataset", "=", "getattr", "(", "importlib", ".", "import_module", "(", "f\"dataset_apis.{args.dataset.lower()}\"", ")", ",", "'load_trainset'", ")", "\n", "dataset", "=", "load_dataset", "(", "trans", ")", "\n", "\n", "train_loader", "=", "DataLoader", "(", "dataset", ",", "batch_size", "=", "1", ",", "shuffle", "=", "False", ")", "\n", "\n", "# Model", "\n", "model", "=", "RoSA", "(", "\n", "# model", "\n", "encoder", "=", "args", ".", "encoder", ",", "\n", "# shape", "\n", "input_dim", "=", "args", ".", "input_dim", ",", "\n", "# model configuration", "\n", "layer_num", "=", "args", ".", "layer_num", ",", "\n", "hidden", "=", "args", ".", "hidden", ",", "\n", "proj_shape", "=", "(", "args", ".", "proj_middim", ",", "args", ".", "proj_outdim", ")", ",", "\n", "# loss", "\n", "is_rectified", "=", "args", ".", "rectified", ",", "\n", "T", "=", "args", ".", "tau", ",", "\n", "topo_t", "=", "args", ".", "topo_t", "\n", ")", ".", "to", "(", "device", ")", "\n", "\n", "# optimizer", "\n", "if", "args", ".", "optimizer", "==", "'sgd'", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "learning_rate", ",", "weight_decay", "=", "args", ".", "weight_decay", ",", "momentum", "=", "0.9", ")", "\n", "", "elif", "args", ".", "optimizer", "==", "'adam'", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "learning_rate", ",", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "", "elif", "args", ".", "optimizer", "==", "'adamw'", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "AdamW", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "learning_rate", ",", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "\n", "# save checkpoints", "\n", "", "path", "=", "f'./checkpoints/{args.dataset}/'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "\n", "", "patience", "=", "args", ".", "patience", "# early stopping", "\n", "stop_cnt", "=", "0", "\n", "best", "=", "9999", "\n", "best_t", "=", "0", "\n", "\n", "loop", "=", "tqdm", "(", "range", "(", "args", ".", "epochs", ")", ")", "\n", "for", "epoch", "in", "loop", ":", "\n", "        ", "model", ".", "train", "(", ")", "\n", "for", "idx", ",", "graphs", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "            ", "model", ".", "train", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "# transform the [batch, batch, batch] into one batch", "\n", "view1_list", "=", "[", "]", "\n", "view2_list", "=", "[", "]", "\n", "assert", "len", "(", "graphs", "[", "0", "]", ")", "==", "len", "(", "graphs", "[", "1", "]", ")", "\n", "all_graphs_num", "=", "len", "(", "graphs", "[", "0", "]", ")", "\n", "for", "i", "in", "range", "(", "all_graphs_num", ")", ":", "\n", "                ", "view1_list", ".", "extend", "(", "graphs", "[", "0", "]", "[", "i", "]", ".", "to_data_list", "(", ")", ")", "\n", "view2_list", ".", "extend", "(", "graphs", "[", "1", "]", "[", "i", "]", ".", "to_data_list", "(", ")", ")", "\n", "\n", "# shuffle views list", "\n", "", "shuf_idx", "=", "np", ".", "random", ".", "permutation", "(", "all_graphs_num", ")", "\n", "view1_list_shuff", "=", "[", "view1_list", "[", "i", "]", "for", "i", "in", "shuf_idx", "]", "\n", "view2_list_shuff", "=", "[", "view2_list", "[", "i", "]", "for", "i", "in", "shuf_idx", "]", "\n", "\n", "views1", "=", "Batch", "(", ")", ".", "from_data_list", "(", "view1_list_shuff", ")", ".", "to", "(", "device", ")", "\n", "views2", "=", "Batch", "(", ")", ".", "from_data_list", "(", "view2_list_shuff", ")", ".", "to", "(", "device", ")", "\n", "# additional augmentation", "\n", "drop", "=", "DropEdgeAndFeature", "(", "d_fea", "=", "args", ".", "drop_feature_rate_1", ",", "d_edge", "=", "args", ".", "drop_edge_rate_1", ")", "\n", "views1", "=", "drop", ".", "drop_fea_edge", "(", "views1", ")", "\n", "drop", ".", "set_drop_ratio", "(", "d_fea", "=", "args", ".", "drop_feature_rate_2", ",", "d_edge", "=", "args", ".", "drop_edge_rate_2", ")", "\n", "views2", "=", "drop", ".", "drop_fea_edge", "(", "views2", ")", "\n", "\n", "if", "args", ".", "ad", ":", "\n", "                ", "def", "node_attack", "(", "perturb", ")", ":", "\n", "                    ", "views1", ".", "x", "+=", "perturb", "\n", "return", "model", "(", "views1", ",", "views2", ",", "views1", ".", "batch", ",", "views2", ".", "batch", ")", "\n", "\n", "", "loss", "=", "ad_training", "(", "model", ",", "node_attack", ",", "views1", ".", "x", ".", "shape", ",", "args", ",", "device", ")", "\n", "", "else", ":", "\n", "                ", "loss", "=", "model", "(", "views1", ",", "views2", ",", "views1", ".", "batch", ",", "views2", ".", "batch", ")", "\n", "", "loop", ".", "set_postfix", "(", "loss", "=", "loss", ".", "item", "(", ")", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "if", "loss", "<", "best", ":", "\n", "            ", "stop_cnt", "=", "0", "\n", "best", "=", "loss", "\n", "best_t", "=", "epoch", "+", "1", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "os", ".", "path", ".", "join", "(", "path", ",", "'best.pt'", ")", ")", "\n", "", "else", ":", "\n", "            ", "stop_cnt", "+=", "1", "\n", "\n", "", "if", "stop_cnt", ">=", "patience", ":", "\n", "            ", "print", "(", "\"early stopping\"", ")", "\n", "break", "\n", "\n", "", "", "if", "patience", "<", "args", ".", "epochs", ":", "\n", "        ", "print", "(", "'Loading {}th epoch'", ".", "format", "(", "best_t", ")", ")", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'best.pt'", ")", ")", ")", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuyun97_rosa.None.train.register_topology": [[122, 151], ["getattr", "os.path.isfile", "global_var._init", "global_var.set_value", "importlib.import_module", "getattr.", "torch_geometric.utils.to_networkx", "dict", "torch.zeros", "torch.zeros().bool", "tqdm.tqdm", "torch.save", "torch.load", "args.dataset.lower", "networkx.shortest_path_length", "range", "range", "torch.zeros", "args.dataset.lower", "generator[].keys"], "function", ["home.repos.pwc.inspect_result.zhuyun97_rosa.None.global_var._init", "home.repos.pwc.inspect_result.zhuyun97_rosa.None.global_var.set_value"], ["", "def", "register_topology", "(", "args", ")", ":", "\n", "    ", "MAX_HOP", "=", "100", "\n", "load_dataset", "=", "getattr", "(", "importlib", ".", "import_module", "(", "f\"dataset_apis.{args.dataset.lower()}\"", ")", ",", "'load_eval_trainset'", ")", "\n", "data", "=", "load_dataset", "(", ")", "[", "0", "]", "\n", "topo_file", "=", "f\"./dataset_apis/topology_dist/{args.dataset.lower()}_padding.pt\"", "\n", "exist", "=", "os", ".", "path", ".", "isfile", "(", "topo_file", ")", "\n", "if", "not", "exist", ":", "\n", "        ", "node_num", "=", "data", ".", "x", ".", "shape", "[", "0", "]", "\n", "G", "=", "to_networkx", "(", "data", ")", "\n", "generator", "=", "dict", "(", "nx", ".", "shortest_path_length", "(", "G", ")", ")", "\n", "topology_dist", "=", "torch", ".", "zeros", "(", "(", "node_num", "+", "1", ",", "node_num", "+", "1", ")", ")", "# we shift the node index with 1, in order to store 0-index for padding nodes", "\n", "mask", "=", "torch", ".", "zeros", "(", "(", "node_num", "+", "1", ",", "node_num", "+", "1", ")", ")", ".", "bool", "(", ")", "\n", "\n", "topology_dist", "[", "0", ",", ":", "]", "=", "1000", "# used for padding nodes ", "\n", "topology_dist", "[", ":", ",", "0", "]", "=", "1000", "\n", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "1", ",", "node_num", "+", "1", ")", ")", ":", "\n", "# print(f\"processing {i}-th node\")", "\n", "            ", "for", "j", "in", "range", "(", "1", ",", "node_num", "+", "1", ")", ":", "\n", "                ", "if", "j", "-", "1", "in", "generator", "[", "i", "-", "1", "]", ".", "keys", "(", ")", ":", "\n", "                    ", "topology_dist", "[", "i", "]", "[", "j", "]", "=", "generator", "[", "i", "-", "1", "]", "[", "j", "-", "1", "]", "\n", "", "else", ":", "\n", "                    ", "topology_dist", "[", "i", "]", "[", "j", "]", "=", "MAX_HOP", "\n", "mask", "[", "i", "]", "[", "j", "]", "=", "True", "# record nodes that do not have connections", "\n", "", "", "", "torch", ".", "save", "(", "topology_dist", ",", "topo_file", ")", "\n", "", "else", ":", "\n", "        ", "topology_dist", "=", "torch", ".", "load", "(", "topo_file", ")", "\n", "", "global_var", ".", "_init", "(", ")", "\n", "global_var", ".", "set_value", "(", "\"topology_dist\"", ",", "topology_dist", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuyun97_rosa.None.train.str2bool": [[152, 161], ["isinstance", "v.lower", "v.lower", "argparse.ArgumentTypeError"], "function", ["None"], ["", "def", "str2bool", "(", "v", ")", ":", "\n", "    ", "if", "isinstance", "(", "v", ",", "bool", ")", ":", "\n", "        ", "return", "v", "\n", "", "if", "v", ".", "lower", "(", ")", "in", "(", "'yes'", ",", "'y'", ",", "'true'", ",", "'t'", ",", "'1'", ")", ":", "\n", "        ", "return", "True", "\n", "", "if", "v", ".", "lower", "(", ")", "in", "(", "'no'", ",", "'n'", ",", "'false'", ",", "'f'", ",", "'0'", ")", ":", "\n", "        ", "return", "False", "\n", "", "else", ":", "\n", "        ", "raise", "argparse", ".", "ArgumentTypeError", "(", "'Boolean value expected.'", ")", "\n", "", "", "def", "get_parser", "(", ")", ":", "\n"]], "home.repos.pwc.inspect_result.zhuyun97_rosa.None.train.get_parser": [[161, 177], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["", "", "def", "get_parser", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Description: Script to run our model.'", ")", "\n", "parser", ".", "add_argument", "(", "'--config'", ",", "type", "=", "str", ",", "default", "=", "'config.yaml'", ")", "\n", "# dataset", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "help", "=", "'Cora, Citeseer , Pubmed, etc. Default=Cora'", ",", "default", "=", "'Cora'", ")", "\n", "# augmentation", "\n", "parser", ".", "add_argument", "(", "'--aligned'", ",", "type", "=", "str2bool", ",", "help", "=", "'aligned views or not'", ",", "default", "=", "False", ")", "\n", "# adversarial training", "\n", "parser", ".", "add_argument", "(", "'--ad'", ",", "type", "=", "str2bool", ",", "help", "=", "'combine with adversarial training'", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--step-size'", ",", "type", "=", "float", ",", "default", "=", "1e-3", ")", "\n", "parser", ".", "add_argument", "(", "'--m'", ",", "type", "=", "int", ",", "default", "=", "3", ")", "\n", "# loss", "\n", "parser", ".", "add_argument", "(", "'--rectified'", ",", "type", "=", "str2bool", ",", "help", "=", "'use rectified cost matrix'", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--topo_t'", ",", "type", "=", "int", ",", "help", "=", "'temperature for sigmoid'", ",", "default", "=", "2", ")", "\n", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuyun97_rosa.None.global_var._init": [[1, 4], ["None"], "function", ["None"], ["def", "_init", "(", ")", ":", "# initialize", "\n", "    ", "global", "_global_dict", "\n", "_global_dict", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuyun97_rosa.None.global_var.set_value": [[5, 8], ["None"], "function", ["None"], ["", "def", "set_value", "(", "key", ",", "value", ")", ":", "\n", "# define a global value", "\n", "    ", "_global_dict", "[", "key", "]", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuyun97_rosa.None.global_var.get_value": [[9, 15], ["print"], "function", ["None"], ["", "def", "get_value", "(", "key", ")", ":", "\n", "# get a pre-defined global value", "\n", "    ", "try", ":", "\n", "        ", "return", "_global_dict", "[", "key", "]", "\n", "", "except", ":", "\n", "        ", "print", "(", "'access'", "+", "key", "+", "'is failing\\r\\n'", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.zhuyun97_rosa.None.adversarial.ad_training": [[3, 22], ["model.train", "torch.FloatTensor().uniform_().to", "torch.FloatTensor().uniform_().to.requires_grad_", "node_attack", "range", "node_attack.backward", "node_attack", "torch.FloatTensor().uniform_", "torch.FloatTensor().uniform_().to.detach", "torch.sign", "torch.FloatTensor", "torch.FloatTensor().uniform_().to.grad.detach"], "function", ["home.repos.pwc.inspect_result.zhuyun97_rosa.None.train.train"], ["def", "ad_training", "(", "model", ",", "node_attack", ",", "perturb_shape", ",", "args", ",", "device", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "\n", "perturb", "=", "torch", ".", "FloatTensor", "(", "*", "perturb_shape", ")", ".", "uniform_", "(", "-", "args", ".", "step_size", ",", "args", ".", "step_size", ")", ".", "to", "(", "device", ")", "\n", "perturb", ".", "requires_grad_", "(", ")", "\n", "\n", "loss", "=", "node_attack", "(", "perturb", ")", "\n", "loss", "/=", "args", ".", "m", "\n", "\n", "for", "i", "in", "range", "(", "args", ".", "m", "-", "1", ")", ":", "\n", "        ", "loss", ".", "backward", "(", ")", "\n", "perturb_data", "=", "perturb", ".", "detach", "(", ")", "+", "args", ".", "step_size", "*", "torch", ".", "sign", "(", "perturb", ".", "grad", ".", "detach", "(", ")", ")", "\n", "perturb", ".", "data", "=", "perturb_data", ".", "data", "\n", "perturb", ".", "grad", "[", ":", "]", "=", "0", "\n", "\n", "loss", "=", "node_attack", "(", "perturb", ")", "\n", "loss", "/=", "args", ".", "m", "\n", "\n", "", "return", "loss", "", "", ""]], "home.repos.pwc.inspect_result.zhuyun97_rosa.None.model.RoSA.__init__": [[13, 50], ["super().__init__", "Encoder", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch_geometric.data.Data", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model.RoSA.encoder", "model.Projector", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.zhuyun97_rosa.None.augmentation.DropEdgeAndFeature.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "encoder", "=", "'gcn'", ",", "\n", "input_dim", "=", "1433", ",", "\n", "\n", "# model configuration", "\n", "layer_num", "=", "2", ",", "# layers of encoder", "\n", "hidden", "=", "128", ",", "# encoder hidden size", "\n", "proj_shape", "=", "(", "128", ",", "128", ")", ",", "# hidden size for predictor", "\n", "\n", "T", "=", "0.4", ",", "# temperature", "\n", "is_rectified", "=", "True", ",", "# use rectified cost matrix", "\n", "topo_t", "=", "2", "# temperature for calculating re-scale ratios with topology dist", "\n", ")", ":", "\n", "        ", "super", "(", "RoSA", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# load components", "\n", "if", "encoder", "==", "'gcn'", ":", "\n", "            ", "Encoder", "=", "GCN", "\n", "", "elif", "encoder", "==", "'sage-gcn'", ":", "\n", "            ", "Encoder", "=", "GraphSAGE_GCN", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "f'{encoder} is not  implemented!'", ")", "\n", "", "self", ".", "encoder", "=", "Encoder", "(", "input_dim", "=", "input_dim", ",", "layer_num", "=", "layer_num", ",", "hidden", "=", "hidden", ")", "\n", "self", ".", "T", "=", "T", "\n", "self", ".", "rectified", "=", "is_rectified", "\n", "self", ".", "topo_t", "=", "topo_t", "\n", "\n", "# adapative size for mlp's input dim", "\n", "fake_x", "=", "torch", ".", "rand", "(", "(", "2", ",", "input_dim", ")", ")", "\n", "fake_edge_index", "=", "torch", ".", "LongTensor", "(", "[", "[", "0", "]", ",", "[", "0", "]", "]", ")", "\n", "fake_g", "=", "Data", "(", "x", "=", "fake_x", ",", "edge_index", "=", "fake_edge_index", ")", "\n", "# fake_graph = Data(x=fake_x, edge_index=fake_edge_index, batch=torch.LongTensor([0]))", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "rep", "=", "self", ".", "encoder", "(", "fake_g", ")", "\n", "hid", "=", "rep", ".", "shape", "[", "-", "1", "]", "\n", "self", ".", "projector", "=", "Projector", "(", "[", "hid", ",", "*", "proj_shape", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuyun97_rosa.None.model.RoSA.gen_rep": [[51, 55], ["model.RoSA.encoder", "model.RoSA.projector"], "methods", ["None"], ["", "", "def", "gen_rep", "(", "self", ",", "data", ")", ":", "\n", "        ", "h", "=", "self", ".", "encoder", "(", "data", ")", "\n", "z", "=", "self", ".", "projector", "(", "h", ")", "\n", "return", "h", ",", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuyun97_rosa.None.model.RoSA.sim": [[56, 66], ["torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "len", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "len", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "print", "len"], "methods", ["None"], ["", "def", "sim", "(", "self", ",", "reps1", ",", "reps2", ")", ":", "\n", "        ", "reps1_unit", "=", "F", ".", "normalize", "(", "reps1", ",", "dim", "=", "-", "1", ")", "\n", "reps2_unit", "=", "F", ".", "normalize", "(", "reps2", ",", "dim", "=", "-", "1", ")", "\n", "if", "len", "(", "reps1", ".", "shape", ")", "==", "2", ":", "\n", "            ", "sim_mat", "=", "torch", ".", "einsum", "(", "\"ik,jk->ij\"", ",", "[", "reps1_unit", ",", "reps2_unit", "]", ")", "\n", "", "elif", "len", "(", "reps1", ".", "shape", ")", "==", "3", ":", "\n", "            ", "sim_mat", "=", "torch", ".", "einsum", "(", "'bik,bjk->bij'", ",", "[", "reps1_unit", ",", "reps2_unit", "]", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "f\"{len(reps1.shape)} dimension tensor is not supported for this function!\"", ")", "\n", "", "return", "sim_mat", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuyun97_rosa.None.model.RoSA.topology_dist": [[67, 74], ["global_var.get_value().cuda", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "global_var.get_value().cuda.index_select().index_select", "global_var.get_value", "range", "global_var.get_value().cuda.index_select"], "methods", ["home.repos.pwc.inspect_result.zhuyun97_rosa.None.global_var.get_value"], ["", "def", "topology_dist", "(", "self", ",", "node_idx1", ",", "node_idx2", ")", ":", "\n", "        ", "full_topology_dist", "=", "global_var", ".", "get_value", "(", "'topology_dist'", ")", ".", "cuda", "(", ")", "\n", "\n", "batch_size", "=", "node_idx1", ".", "shape", "[", "0", "]", "\n", "batch_subpology_dist", "=", "[", "full_topology_dist", ".", "index_select", "(", "dim", "=", "0", ",", "index", "=", "node_idx1", "[", "i", "]", ")", ".", "index_select", "(", "dim", "=", "1", ",", "index", "=", "node_idx2", "[", "i", "]", ")", "for", "i", "in", "range", "(", "batch_size", ")", "]", "\n", "batch_subpology_dist", "=", "torch", ".", "stack", "(", "batch_subpology_dist", ")", "\n", "return", "batch_subpology_dist", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuyun97_rosa.None.model.RoSA._batched_semi_emd_loss": [[75, 103], ["torch.mul().sum().sum", "torch.mul().sum().sum", "torch.mul().sum().sum", "torch.mul().sum().sum", "model.RoSA.sim", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "range", "torch.div.squeeze", "torch.div.squeeze", "torch.div.squeeze", "torch.div.squeeze", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "avg_out2.transpose", "torch.bmm.sum", "torch.bmm.sum", "avg_out1.transpose", "torch.bmm.sum", "torch.bmm.sum", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "model.matrix_diag", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "model.matrix_diag", "torch.exp.transpose", "torch.exp.transpose", "torch.mul", "torch.mul", "torch.mul", "torch.mul"], "methods", ["home.repos.pwc.inspect_result.zhuyun97_rosa.None.model.RoSA.sim", "home.repos.pwc.inspect_result.zhuyun97_rosa.None.model.matrix_diag", "home.repos.pwc.inspect_result.zhuyun97_rosa.None.model.matrix_diag"], ["", "def", "_batched_semi_emd_loss", "(", "self", ",", "out1", ",", "avg_out1", ",", "out2", ",", "avg_out2", ",", "lamb", "=", "20", ",", "rescale_ratio", "=", "None", ")", ":", "\n", "        ", "assert", "out1", ".", "shape", "[", "0", "]", "==", "out2", ".", "shape", "[", "0", "]", "and", "avg_out1", ".", "shape", "==", "avg_out2", ".", "shape", "\n", "\n", "cost_matrix", "=", "1", "-", "self", ".", "sim", "(", "out1", ",", "out2", ")", "\n", "if", "rescale_ratio", "is", "not", "None", ":", "\n", "            ", "cost_matrix", "=", "cost_matrix", "*", "rescale_ratio", "\n", "\n", "# Sinkhorn iteration", "\n", "", "iter_times", "=", "5", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "r", "=", "torch", ".", "bmm", "(", "out1", ",", "avg_out2", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "r", "[", "r", "<=", "0", "]", "=", "1e-8", "\n", "r", "=", "r", "/", "r", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "c", "=", "torch", ".", "bmm", "(", "out2", ",", "avg_out1", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "c", "[", "c", "<=", "0", "]", "=", "1e-8", "\n", "c", "=", "c", "/", "c", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "P", "=", "torch", ".", "exp", "(", "-", "1", "*", "lamb", "*", "cost_matrix", ")", "\n", "u", "=", "(", "torch", ".", "ones_like", "(", "c", ")", "/", "c", ".", "shape", "[", "1", "]", ")", "\n", "for", "i", "in", "range", "(", "iter_times", ")", ":", "\n", "                ", "v", "=", "torch", ".", "div", "(", "r", ",", "torch", ".", "bmm", "(", "P", ",", "u", ")", ")", "\n", "u", "=", "torch", ".", "div", "(", "c", ",", "torch", ".", "bmm", "(", "P", ".", "transpose", "(", "1", ",", "2", ")", ",", "v", ")", ")", "\n", "", "u", "=", "u", ".", "squeeze", "(", "dim", "=", "-", "1", ")", "\n", "v", "=", "v", ".", "squeeze", "(", "dim", "=", "-", "1", ")", "\n", "transport_matrix", "=", "torch", ".", "bmm", "(", "torch", ".", "bmm", "(", "matrix_diag", "(", "v", ")", ",", "P", ")", ",", "matrix_diag", "(", "u", ")", ")", "\n", "", "assert", "cost_matrix", ".", "shape", "==", "transport_matrix", ".", "shape", "\n", "\n", "S", "=", "torch", ".", "mul", "(", "transport_matrix", ",", "1", "-", "cost_matrix", ")", ".", "sum", "(", "dim", "=", "1", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "# 2S - 1", "\n", "return", "S", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuyun97_rosa.None.model.RoSA.batched_semi_emd_loss": [[104, 146], ["batch1.max().cpu().item", "batch2.max().cpu().item", "torch_geometric.nn.global_mean_pool", "torch_geometric.nn.global_mean_pool", "torch_geometric.utils.to_dense_batch", "torch_geometric.utils.to_dense_batch", "list", "range", "torch_geometric.utils.to_dense_batch", "torch_geometric.utils.to_dense_batch", "model.RoSA.topology_dist", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.bmm().bool", "torch.bmm().bool", "torch.bmm().bool", "torch.bmm().bool", "model.RoSA._batched_semi_emd_loss", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "range", "list.insert", "out1[].clone", "out2[].clone", "avg_out1[].clone", "avg_out2[].clone", "torch.log", "torch.log", "torch.log", "torch.log", "batch1.max().cpu", "batch2.max().cpu", "model.RoSA._batched_semi_emd_loss", "list.pop", "f", "f", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "model.RoSA._batched_semi_emd_loss", "model.RoSA._batched_semi_emd_loss", "f", "batch1.max", "batch2.max", "idx_mask1[].float", "idx_mask2[].float"], "methods", ["home.repos.pwc.inspect_result.zhuyun97_rosa.None.model.RoSA.topology_dist", "home.repos.pwc.inspect_result.zhuyun97_rosa.None.model.RoSA._batched_semi_emd_loss", "home.repos.pwc.inspect_result.zhuyun97_rosa.None.model.RoSA._batched_semi_emd_loss", "home.repos.pwc.inspect_result.zhuyun97_rosa.None.model.RoSA._batched_semi_emd_loss", "home.repos.pwc.inspect_result.zhuyun97_rosa.None.model.RoSA._batched_semi_emd_loss"], ["", "def", "batched_semi_emd_loss", "(", "self", ",", "reps1", ",", "reps2", ",", "batch1", ",", "batch2", ",", "original_idx1", "=", "None", ",", "original_idx2", "=", "None", ")", ":", "\n", "        ", "batch_size1", "=", "batch1", ".", "max", "(", ")", ".", "cpu", "(", ")", ".", "item", "(", ")", "\n", "batch_size2", "=", "batch2", ".", "max", "(", ")", ".", "cpu", "(", ")", ".", "item", "(", ")", "\n", "assert", "batch_size1", "==", "batch_size2", "\n", "batch_size", "=", "batch_size1", "+", "1", "\n", "# avg nodes rep", "\n", "y_online1_pooling", "=", "global_mean_pool", "(", "reps1", ",", "batch1", ")", "\n", "y_online2_pooling", "=", "global_mean_pool", "(", "reps2", ",", "batch2", ")", "\n", "avg_out1", "=", "y_online1_pooling", "[", ":", ",", "None", ",", ":", "]", "# (B,1,D)", "\n", "avg_out2", "=", "y_online2_pooling", "[", ":", ",", "None", ",", ":", "]", "# (B,1,D)", "\n", "\n", "# x reps from sparse to dense", "\n", "out1", ",", "mask1", "=", "to_dense_batch", "(", "reps1", ",", "batch1", ",", "fill_value", "=", "1e-8", ")", "# (B,N,D), B means batch size, N means the number of nodes, D means hidden size", "\n", "out2", ",", "mask2", "=", "to_dense_batch", "(", "reps2", ",", "batch2", ",", "fill_value", "=", "1e-8", ")", "# (B,M,D)", "\n", "\n", "if", "original_idx1", "!=", "None", "and", "original_idx2", "!=", "None", ":", "\n", "            ", "dense_original_idx1", ",", "idx_mask1", "=", "to_dense_batch", "(", "original_idx1", ",", "batch", "=", "batch1", ",", "fill_value", "=", "0", ")", "\n", "dense_original_idx2", ",", "idx_mask2", "=", "to_dense_batch", "(", "original_idx2", ",", "batch", "=", "batch2", ",", "fill_value", "=", "0", ")", "\n", "topology_dist", "=", "self", ".", "topology_dist", "(", "dense_original_idx1", ",", "dense_original_idx2", ")", "\n", "rescale_ratio", "=", "torch", ".", "sigmoid", "(", "topology_dist", "/", "self", ".", "topo_t", ")", "\n", "topo_mask", "=", "torch", ".", "bmm", "(", "idx_mask1", "[", ":", ",", ":", ",", "None", "]", ".", "float", "(", ")", ",", "idx_mask2", "[", ":", ",", "None", ",", ":", "]", ".", "float", "(", ")", ")", ".", "bool", "(", ")", "\n", "loss_pos", "=", "self", ".", "_batched_semi_emd_loss", "(", "out1", ",", "avg_out1", ",", "out2", ",", "avg_out2", ",", "rescale_ratio", "=", "rescale_ratio", ")", "*", "2", "\n", "", "else", ":", "\n", "            ", "loss_pos", "=", "self", ".", "_batched_semi_emd_loss", "(", "out1", ",", "avg_out1", ",", "out2", ",", "avg_out2", ")", "\n", "\n", "", "T", "=", "self", ".", "T", "# temperature", "\n", "f", "=", "lambda", "x", ":", "torch", ".", "exp", "(", "x", "/", "T", ")", "\n", "\n", "total_neg_loss", "=", "0", "\n", "# completely create negative samples", "\n", "neg_index", "=", "list", "(", "range", "(", "batch_size", ")", ")", "\n", "for", "i", "in", "range", "(", "(", "batch_size", "-", "1", ")", ")", ":", "\n", "            ", "neg_index", ".", "insert", "(", "0", ",", "neg_index", ".", "pop", "(", "-", "1", ")", ")", "\n", "out1_perm", "=", "out1", "[", "neg_index", "]", ".", "clone", "(", ")", "\n", "out2_perm", "=", "out2", "[", "neg_index", "]", ".", "clone", "(", ")", "\n", "avg_out1_perm", "=", "avg_out1", "[", "neg_index", "]", ".", "clone", "(", ")", "\n", "avg_out2_perm", "=", "avg_out2", "[", "neg_index", "]", ".", "clone", "(", ")", "\n", "total_neg_loss", "+=", "f", "(", "self", ".", "_batched_semi_emd_loss", "(", "out1", ",", "avg_out1", ",", "out1_perm", ",", "avg_out1_perm", ")", ")", "+", "f", "(", "self", ".", "_batched_semi_emd_loss", "(", "out1", ",", "avg_out1", ",", "out2_perm", ",", "avg_out2_perm", ")", ")", "\n", "\n", "", "loss", "=", "-", "torch", ".", "log", "(", "f", "(", "loss_pos", ")", "/", "(", "total_neg_loss", ")", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuyun97_rosa.None.model.RoSA.gen_loss": [[149, 155], ["model.RoSA.batched_semi_emd_loss", "model.RoSA.batched_semi_emd_loss"], "methods", ["home.repos.pwc.inspect_result.zhuyun97_rosa.None.model.RoSA.batched_semi_emd_loss", "home.repos.pwc.inspect_result.zhuyun97_rosa.None.model.RoSA.batched_semi_emd_loss"], ["", "def", "gen_loss", "(", "self", ",", "reps1", ",", "reps2", ",", "batch1", "=", "None", ",", "batch2", "=", "None", ",", "original_idx1", "=", "None", ",", "original_idx2", "=", "None", ")", ":", "\n", "# data with batch", "\n", "        ", "loss1", "=", "self", ".", "batched_semi_emd_loss", "(", "reps1", ",", "reps2", ",", "batch1", ",", "batch2", ",", "original_idx1", "=", "original_idx1", ",", "original_idx2", "=", "original_idx2", ")", "\n", "loss2", "=", "self", ".", "batched_semi_emd_loss", "(", "reps2", ",", "reps1", ",", "batch2", ",", "batch1", ",", "original_idx1", "=", "original_idx2", ",", "original_idx2", "=", "original_idx1", ")", "\n", "loss", "=", "(", "loss1", "*", "0.5", "+", "loss2", "*", "0.5", ")", ".", "mean", "(", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuyun97_rosa.None.model.RoSA.forward": [[156, 167], ["model.RoSA.gen_rep", "model.RoSA.gen_rep", "hasattr", "model.RoSA.gen_loss", "model.RoSA.gen_loss"], "methods", ["home.repos.pwc.inspect_result.zhuyun97_rosa.None.model.RoSA.gen_rep", "home.repos.pwc.inspect_result.zhuyun97_rosa.None.model.RoSA.gen_rep", "home.repos.pwc.inspect_result.zhuyun97_rosa.None.model.RoSA.gen_loss", "home.repos.pwc.inspect_result.zhuyun97_rosa.None.model.RoSA.gen_loss"], ["", "def", "forward", "(", "self", ",", "view1", ",", "view2", ",", "batch1", "=", "None", ",", "batch2", "=", "None", ")", ":", "\n", "        ", "h1", ",", "z1", "=", "self", ".", "gen_rep", "(", "view1", ")", "\n", "h2", ",", "z2", "=", "self", ".", "gen_rep", "(", "view2", ")", "\n", "\n", "if", "hasattr", "(", "view1", ",", "'original_idx'", ")", "and", "self", ".", "rectified", ":", "\n", "            ", "original_idx1", ",", "original_idx2", "=", "view1", ".", "original_idx", "+", "1", ",", "view2", ".", "original_idx", "+", "1", "# shift one, zero-index is stored for padding nodes", "\n", "loss", "=", "self", ".", "gen_loss", "(", "z1", ",", "z2", ",", "batch1", ",", "batch2", ",", "original_idx1", ",", "original_idx2", ")", "\n", "", "else", ":", "\n", "            ", "loss", "=", "self", ".", "gen_loss", "(", "z1", ",", "z2", ",", "batch1", ",", "batch2", ")", "\n", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuyun97_rosa.None.model.RoSA.embed": [[168, 171], ["model.RoSA.encoder", "model.RoSA.detach"], "methods", ["None"], ["", "def", "embed", "(", "self", ",", "data", ")", ":", "\n", "        ", "h", "=", "self", ".", "encoder", "(", "data", ")", "\n", "return", "h", ".", "detach", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuyun97_rosa.None.model.GCN.__init__": [[174, 192], ["super().__init__", "torch.nn.ModuleList", "torch.nn.ModuleList", "model.GCN.convs.append", "range", "model.GCN.convs.append", "torch_geometric.nn.inits.glorot", "model.GCN.convs.append", "torch_geometric.nn.inits.glorot", "torch_geometric.nn.GCNConv", "model.GCN.convs.append", "torch_geometric.nn.inits.glorot", "torch_geometric.nn.GCNConv", "torch_geometric.nn.GCNConv", "torch_geometric.nn.GCNConv"], "methods", ["home.repos.pwc.inspect_result.zhuyun97_rosa.None.augmentation.DropEdgeAndFeature.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ",", "layer_num", "=", "2", ",", "hidden", "=", "128", ")", ":", "\n", "        ", "super", "(", "GCN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layer_num", "=", "layer_num", "\n", "self", ".", "hidden", "=", "hidden", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "\n", "self", ".", "convs", "=", "ModuleList", "(", ")", "\n", "if", "self", ".", "layer_num", ">", "1", ":", "\n", "            ", "self", ".", "convs", ".", "append", "(", "GCNConv", "(", "input_dim", ",", "hidden", "*", "2", ")", ")", "\n", "for", "i", "in", "range", "(", "layer_num", "-", "2", ")", ":", "\n", "                ", "self", ".", "convs", ".", "append", "(", "GCNConv", "(", "hidden", "*", "2", ",", "hidden", "*", "2", ")", ")", "\n", "glorot", "(", "self", ".", "convs", "[", "i", "]", ".", "weight", ")", "\n", "", "self", ".", "convs", ".", "append", "(", "GCNConv", "(", "hidden", "*", "2", ",", "hidden", ")", ")", "\n", "glorot", "(", "self", ".", "convs", "[", "-", "1", "]", ".", "weight", ")", "\n", "\n", "", "else", ":", "# one layer gcn", "\n", "            ", "self", ".", "convs", ".", "append", "(", "GCNConv", "(", "input_dim", ",", "hidden", ")", ")", "\n", "glorot", "(", "self", ".", "convs", "[", "-", "1", "]", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuyun97_rosa.None.model.GCN.forward": [[194, 199], ["range", "torch.relu", "torch.relu"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "data", ")", ":", "\n", "        ", "x", ",", "edge_index", "=", "data", ".", "x", ",", "data", ".", "edge_index", "\n", "for", "i", "in", "range", "(", "self", ".", "layer_num", ")", ":", "\n", "            ", "x", "=", "F", ".", "relu", "(", "self", ".", "convs", "[", "i", "]", "(", "x", ",", "edge_index", ")", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuyun97_rosa.None.model.GraphSAGE_GCN.__init__": [[202, 217], ["super().__init__", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "range", "model.GraphSAGE_GCN.acts.append", "model.GraphSAGE_GCN.norms.append", "model.GraphSAGE_GCN.convs.append", "model.GraphSAGE_GCN.convs.append", "torch.nn.ELU", "torch.nn.ELU", "torch.nn.ELU", "torch.nn.ELU", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "SAGEConv", "SAGEConv"], "methods", ["home.repos.pwc.inspect_result.zhuyun97_rosa.None.augmentation.DropEdgeAndFeature.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ",", "layer_num", "=", "3", ",", "hidden", "=", "512", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "convs", "=", "torch", ".", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "layer", "=", "layer_num", "\n", "self", ".", "acts", "=", "torch", ".", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "norms", "=", "torch", ".", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "layer", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "self", ".", "convs", ".", "append", "(", "SAGEConv", "(", "input_dim", ",", "hidden", ",", "root_weight", "=", "True", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "convs", ".", "append", "(", "SAGEConv", "(", "hidden", ",", "hidden", ",", "root_weight", "=", "True", ")", ")", "\n", "# self.acts.append(torch.nn.PReLU(hidden))", "\n", "", "self", ".", "acts", ".", "append", "(", "torch", ".", "nn", ".", "ELU", "(", ")", ")", "\n", "self", ".", "norms", ".", "append", "(", "torch", ".", "nn", ".", "BatchNorm1d", "(", "hidden", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuyun97_rosa.None.model.GraphSAGE_GCN.forward": [[218, 223], ["range"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "data", ")", ":", "\n", "        ", "x", ",", "edge_index", "=", "data", ".", "x", ",", "data", ".", "edge_index", "\n", "for", "i", "in", "range", "(", "self", ".", "layer", ")", ":", "\n", "            ", "x", "=", "self", ".", "acts", "[", "i", "]", "(", "self", ".", "norms", "[", "i", "]", "(", "self", ".", "convs", "[", "i", "]", "(", "x", ",", "edge_index", ")", ")", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuyun97_rosa.None.model.Projector.__init__": [[226, 236], ["super().__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "len", "Exception", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.zhuyun97_rosa.None.augmentation.DropEdgeAndFeature.__init__"], ["    ", "def", "__init__", "(", "self", ",", "shape", "=", "(", ")", ")", ":", "\n", "        ", "super", "(", "Projector", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "len", "(", "shape", ")", "<", "3", ":", "\n", "            ", "raise", "Exception", "(", "\"Wrong shape for Projector\"", ")", "\n", "\n", "", "self", ".", "main", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "torch", ".", "nn", ".", "Linear", "(", "shape", "[", "0", "]", ",", "shape", "[", "1", "]", ")", ",", "\n", "torch", ".", "nn", ".", "BatchNorm1d", "(", "shape", "[", "1", "]", ")", ",", "\n", "torch", ".", "nn", ".", "ReLU", "(", ")", ",", "\n", "torch", ".", "nn", ".", "Linear", "(", "shape", "[", "1", "]", ",", "shape", "[", "2", "]", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zhuyun97_rosa.None.model.Projector.forward": [[238, 240], ["model.Projector.main"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "main", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuyun97_rosa.None.model.matrix_diag": [[242, 251], ["torch.zeros", "torch.zeros", "torch.arange().reshape", "torch.arange().reshape", "indices.diagonal.diagonal", "torch.zeros.view", "torch.arange", "torch.arange", "torch.zeros.numel"], "function", ["None"], ["", "", "def", "matrix_diag", "(", "diagonal", ")", ":", "\n", "    ", "N", "=", "diagonal", ".", "shape", "[", "-", "1", "]", "\n", "shape", "=", "diagonal", ".", "shape", "[", ":", "-", "1", "]", "+", "(", "N", ",", "N", ")", "\n", "device", ",", "dtype", "=", "diagonal", ".", "device", ",", "diagonal", ".", "dtype", "\n", "result", "=", "torch", ".", "zeros", "(", "shape", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "indices", "=", "torch", ".", "arange", "(", "result", ".", "numel", "(", ")", ",", "device", "=", "device", ")", ".", "reshape", "(", "shape", ")", "\n", "indices", "=", "indices", ".", "diagonal", "(", "dim1", "=", "-", "2", ",", "dim2", "=", "-", "1", ")", "\n", "result", ".", "view", "(", "-", "1", ")", "[", "indices", "]", "=", "diagonal", "\n", "return", "result", "", "", ""]], "home.repos.pwc.inspect_result.zhuyun97_rosa.None.eval_utils.repeat": [[13, 28], ["functools.wraps", "results[].keys", "eval_utils.print_statistics", "f", "range", "numpy.mean", "numpy.std"], "function", ["home.repos.pwc.inspect_result.zhuyun97_rosa.None.eval_utils.print_statistics"], ["def", "repeat", "(", "n_times", ")", ":", "\n", "    ", "def", "decorator", "(", "f", ")", ":", "\n", "        ", "@", "functools", ".", "wraps", "(", "f", ")", "\n", "def", "wrapper", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "            ", "results", "=", "[", "f", "(", "*", "args", ",", "**", "kwargs", ")", "for", "_", "in", "range", "(", "n_times", ")", "]", "\n", "statistics", "=", "{", "}", "\n", "for", "key", "in", "results", "[", "0", "]", ".", "keys", "(", ")", ":", "\n", "                ", "values", "=", "[", "r", "[", "key", "]", "for", "r", "in", "results", "]", "\n", "statistics", "[", "key", "]", "=", "{", "\n", "'mean'", ":", "np", ".", "mean", "(", "values", ")", ",", "\n", "'std'", ":", "np", ".", "std", "(", "values", ")", "}", "\n", "", "print_statistics", "(", "statistics", ",", "f", ".", "__name__", ")", "\n", "return", "statistics", "\n", "", "return", "wrapper", "\n", "", "return", "decorator", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuyun97_rosa.None.eval_utils.prob_to_one_hot": [[30, 36], ["numpy.zeros", "numpy.argmax", "range"], "function", ["None"], ["", "def", "prob_to_one_hot", "(", "y_pred", ")", ":", "\n", "    ", "ret", "=", "np", ".", "zeros", "(", "y_pred", ".", "shape", ",", "np", ".", "bool", ")", "\n", "indices", "=", "np", ".", "argmax", "(", "y_pred", ",", "axis", "=", "1", ")", "\n", "for", "i", "in", "range", "(", "y_pred", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "ret", "[", "i", "]", "[", "indices", "[", "i", "]", "]", "=", "True", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuyun97_rosa.None.eval_utils.print_statistics": [[38, 48], ["print", "enumerate", "statistics.keys", "print", "print", "print", "len", "statistics.keys"], "function", ["None"], ["", "def", "print_statistics", "(", "statistics", ",", "function_name", ")", ":", "\n", "    ", "print", "(", "f'(E) | {function_name}:'", ",", "end", "=", "' '", ")", "\n", "for", "i", ",", "key", "in", "enumerate", "(", "statistics", ".", "keys", "(", ")", ")", ":", "\n", "        ", "mean", "=", "statistics", "[", "key", "]", "[", "'mean'", "]", "\n", "std", "=", "statistics", "[", "key", "]", "[", "'std'", "]", "\n", "print", "(", "f'{key}={mean:.4f}+-{std:.4f}'", ",", "end", "=", "''", ")", "\n", "if", "i", "!=", "len", "(", "statistics", ".", "keys", "(", ")", ")", "-", "1", ":", "\n", "            ", "print", "(", "','", ",", "end", "=", "' '", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuyun97_rosa.None.eval_utils.label_classification": [[50, 76], ["eval_utils.repeat", "embeddings.detach().cpu().numpy", "y.detach().cpu().numpy", "onehot_encoder.transform().toarray().astype.reshape", "sklearn.preprocessing.OneHotEncoder().fit", "OneHotEncoder().fit.transform().toarray().astype", "sklearn.preprocessing.normalize", "sklearn.model_selection.train_test_split", "sklearn.linear_model.LogisticRegression", "sklearn.model_selection.GridSearchCV", "sklearn.model_selection.GridSearchCV.fit", "sklearn.model_selection.GridSearchCV.predict_proba", "eval_utils.prob_to_one_hot", "sklearn.metrics.accuracy_score", "numpy.arange", "embeddings.detach().cpu", "y.detach().cpu", "sklearn.preprocessing.OneHotEncoder", "OneHotEncoder().fit.transform().toarray", "sklearn.multiclass.OneVsRestClassifier", "dict", "embeddings.detach", "y.detach", "OneHotEncoder().fit.transform"], "function", ["home.repos.pwc.inspect_result.zhuyun97_rosa.None.eval_utils.repeat", "home.repos.pwc.inspect_result.zhuyun97_rosa.None.eval_utils.prob_to_one_hot"], ["", "", "", "@", "repeat", "(", "5", ")", "\n", "def", "label_classification", "(", "embeddings", ",", "y", ",", "ratio", "=", "0.1", ")", ":", "\n", "    ", "X", "=", "embeddings", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "Y", "=", "y", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "Y", "=", "Y", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "onehot_encoder", "=", "OneHotEncoder", "(", "categories", "=", "'auto'", ")", ".", "fit", "(", "Y", ")", "\n", "Y", "=", "onehot_encoder", ".", "transform", "(", "Y", ")", ".", "toarray", "(", ")", ".", "astype", "(", "np", ".", "bool", ")", "\n", "\n", "X", "=", "normalize", "(", "X", ",", "norm", "=", "'l2'", ")", "\n", "\n", "X_train", ",", "X_test", ",", "y_train", ",", "y_test", "=", "train_test_split", "(", "X", ",", "Y", ",", "\n", "test_size", "=", "1", "-", "ratio", ")", "\n", "\n", "logreg", "=", "LogisticRegression", "(", "solver", "=", "'liblinear'", ")", "\n", "c", "=", "2.0", "**", "np", ".", "arange", "(", "-", "10", ",", "10", ")", "\n", "\n", "clf", "=", "GridSearchCV", "(", "estimator", "=", "OneVsRestClassifier", "(", "logreg", ")", ",", "\n", "param_grid", "=", "dict", "(", "estimator__C", "=", "c", ")", ",", "n_jobs", "=", "8", ",", "cv", "=", "5", ",", "\n", "verbose", "=", "0", ")", "\n", "clf", ".", "fit", "(", "X_train", ",", "y_train", ")", "\n", "\n", "y_pred", "=", "clf", ".", "predict_proba", "(", "X_test", ")", "\n", "y_pred", "=", "prob_to_one_hot", "(", "y_pred", ")", "\n", "\n", "acc", "=", "accuracy_score", "(", "y_test", ",", "y_pred", ")", "\n", "return", "{", "\"accuracy\"", ":", "acc", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuyun97_rosa.None.eval_utils.eval": [[78, 86], ["model.eval", "getattr", "getattr.", "dataset[].to", "model.embed", "eval_utils.label_classification", "importlib.import_module", "args.dataset.lower"], "function", ["home.repos.pwc.inspect_result.zhuyun97_rosa.None.eval_utils.eval", "home.repos.pwc.inspect_result.zhuyun97_rosa.None.model.RoSA.embed", "home.repos.pwc.inspect_result.zhuyun97_rosa.None.eval_utils.label_classification"], ["", "def", "eval", "(", "args", ",", "model", ",", "device", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "load_dataset", "=", "getattr", "(", "importlib", ".", "import_module", "(", "f\"dataset_apis.{args.dataset.lower()}\"", ")", ",", "'load_eval_trainset'", ")", "\n", "dataset", "=", "load_dataset", "(", ")", "\n", "data", "=", "dataset", "[", "0", "]", ".", "to", "(", "device", ")", "\n", "z", "=", "model", ".", "embed", "(", "data", ")", "\n", "acc", "=", "label_classification", "(", "z", ",", "data", ".", "y", ",", "ratio", "=", "0.1", ")", "\n", "return", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuyun97_rosa.None.augmentation.RWR.__init__": [[30, 36], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "walk_step", "=", "50", ",", "graph_num", "=", "128", ",", "restart_ratio", "=", "0.5", ",", "inductive", "=", "False", ",", "aligned", "=", "False", ",", "**", "args", ")", ":", "\n", "        ", "self", ".", "walk_steps", "=", "walk_step", "\n", "self", ".", "graph_num", "=", "graph_num", "\n", "self", ".", "restart_ratio", "=", "restart_ratio", "\n", "self", ".", "inductive", "=", "inductive", "\n", "self", ".", "aligned", "=", "aligned", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuyun97_rosa.None.augmentation.RWR.__call__": [[37, 101], ["copy.deepcopy", "torch_geometric.utils.to_undirected", "augmentation.RWR.", "min", "torch.arange", "torch_sparse.SparseTensor().t", "range", "torch_geometric.utils.subgraph", "torch_geometric.utils.remove_isolated_nodes", "torch.randperm", "augmentation.RWR.size", "start_nodes.clone", "start_nodes.clone().unsqueeze", "torch.ones().unsqueeze", "range", "range", "torch.where", "torch_sparse.SparseTensor", "torch.rand", "augmentation.RWR.adj_t.sample().squeeze", "torch.cat", "torch.cat", "path.unique", "path[].numpy().tolist", "path[].numpy().tolist", "torch.IntTensor().type_as", "augmentation.RWR.adjust_idx", "start_nodes.clone", "torch.ones", "torch_geometric.utils.to_undirected", "path[].item", "view1_list.append", "view2_list.append", "augmentation.RWR.adj_t.sample", "augmentation.RWR.unsqueeze", "sign.unsqueeze", "path[].numpy", "path[].numpy", "torch.IntTensor", "copy.deepcopy", "view1_list.append", "view2_list.append"], "methods", ["home.repos.pwc.inspect_result.zhuyun97_rosa.None.augmentation.RWR.adjust_idx"], ["", "def", "__call__", "(", "self", ",", "graph", ")", ":", "\n", "        ", "graph", "=", "copy", ".", "deepcopy", "(", "graph", ")", "# modified on the copy", "\n", "assert", "self", ".", "walk_steps", ">", "1", "\n", "# remove isolated nodes (or we can construct edges for these nodes)", "\n", "if", "self", ".", "inductive", ":", "\n", "            ", "train_node_idx", "=", "torch", ".", "where", "(", "graph", ".", "train_mask", "==", "True", ")", "[", "0", "]", "\n", "graph", ".", "edge_index", ",", "_", "=", "subgraph", "(", "train_node_idx", ",", "graph", ".", "edge_index", ")", "# remove val and test nodes (val and test are considered as isolated nodes)", "\n", "edge_index", ",", "_", ",", "mask", "=", "remove_isolated_nodes", "(", "graph", ".", "edge_index", ",", "num_nodes", "=", "graph", ".", "x", ".", "shape", "[", "0", "]", ")", "# remove all ioslated nodes and re-index nodes", "\n", "graph", ".", "x", "=", "graph", ".", "x", "[", "mask", "]", "\n", "", "edge_index", "=", "to_undirected", "(", "graph", ".", "edge_index", ")", "\n", "edge_index", "=", "add_remaining_selfloop_for_isolated_nodes", "(", "edge_index", ",", "graph", ".", "x", ".", "shape", "[", "0", "]", ")", "\n", "graph", ".", "edge_index", "=", "edge_index", "\n", "\n", "node_num", "=", "graph", ".", "x", ".", "shape", "[", "0", "]", "\n", "graph_num", "=", "min", "(", "self", ".", "graph_num", ",", "node_num", ")", "\n", "start_nodes", "=", "torch", ".", "randperm", "(", "node_num", ")", "[", ":", "graph_num", "]", "\n", "edge_index", "=", "graph", ".", "edge_index", "\n", "\n", "value", "=", "torch", ".", "arange", "(", "edge_index", ".", "size", "(", "1", ")", ")", "\n", "self", ".", "adj_t", "=", "SparseTensor", "(", "row", "=", "edge_index", "[", "0", "]", ",", "col", "=", "edge_index", "[", "1", "]", ",", "\n", "value", "=", "value", ",", "\n", "sparse_sizes", "=", "(", "node_num", ",", "node_num", ")", ")", ".", "t", "(", ")", "\n", "\n", "view1_list", "=", "[", "]", "\n", "view2_list", "=", "[", "]", "\n", "\n", "views_cnt", "=", "1", "if", "self", ".", "aligned", "else", "2", "\n", "for", "view_idx", "in", "range", "(", "views_cnt", ")", ":", "\n", "            ", "current_nodes", "=", "start_nodes", ".", "clone", "(", ")", "\n", "history", "=", "start_nodes", ".", "clone", "(", ")", ".", "unsqueeze", "(", "0", ")", "\n", "signs", "=", "torch", ".", "ones", "(", "graph_num", ",", "dtype", "=", "torch", ".", "bool", ")", ".", "unsqueeze", "(", "0", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "walk_steps", ")", ":", "\n", "                ", "seed", "=", "torch", ".", "rand", "(", "[", "graph_num", "]", ")", "\n", "nei", "=", "self", ".", "adj_t", ".", "sample", "(", "1", ",", "current_nodes", ")", ".", "squeeze", "(", ")", "\n", "sign", "=", "seed", "<", "self", ".", "restart_ratio", "\n", "nei", "[", "sign", "]", "=", "start_nodes", "[", "sign", "]", "\n", "history", "=", "torch", ".", "cat", "(", "(", "history", ",", "nei", ".", "unsqueeze", "(", "0", ")", ")", ",", "dim", "=", "0", ")", "\n", "signs", "=", "torch", ".", "cat", "(", "(", "signs", ",", "sign", ".", "unsqueeze", "(", "0", ")", ")", ",", "dim", "=", "0", ")", "\n", "current_nodes", "=", "nei", "\n", "", "history", "=", "history", ".", "T", "\n", "signs", "=", "signs", ".", "T", "\n", "\n", "for", "i", "in", "range", "(", "graph_num", ")", ":", "\n", "                ", "path", "=", "history", "[", "i", "]", "\n", "sign", "=", "signs", "[", "i", "]", "\n", "node_idx", "=", "path", ".", "unique", "(", ")", "\n", "sources", "=", "path", "[", ":", "-", "1", "]", ".", "numpy", "(", ")", ".", "tolist", "(", ")", "\n", "targets", "=", "path", "[", "1", ":", "]", ".", "numpy", "(", ")", ".", "tolist", "(", ")", "\n", "sub_edges", "=", "torch", ".", "IntTensor", "(", "[", "sources", ",", "targets", "]", ")", ".", "type_as", "(", "graph", ".", "edge_index", ")", "\n", "sub_edges", "=", "sub_edges", ".", "T", "[", "~", "sign", "[", "1", ":", "]", "]", ".", "T", "\n", "# undirectional", "\n", "if", "sub_edges", ".", "shape", "[", "1", "]", "!=", "0", ":", "\n", "                    ", "sub_edges", "=", "to_undirected", "(", "sub_edges", ")", "\n", "", "view", "=", "self", ".", "adjust_idx", "(", "sub_edges", ",", "node_idx", ",", "graph", ",", "path", "[", "0", "]", ".", "item", "(", ")", ")", "\n", "\n", "if", "self", ".", "aligned", ":", "\n", "                    ", "view1_list", ".", "append", "(", "view", ")", "\n", "view2_list", ".", "append", "(", "copy", ".", "deepcopy", "(", "view", ")", ")", "\n", "", "else", ":", "\n", "                    ", "if", "view_idx", "==", "0", ":", "\n", "                        ", "view1_list", ".", "append", "(", "view", ")", "\n", "", "else", ":", "\n", "                        ", "view2_list", ".", "append", "(", "view", ")", "\n", "", "", "", "", "return", "(", "view1_list", ",", "view2_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuyun97_rosa.None.augmentation.RWR.adjust_idx": [[102, 115], ["list", "list", "torch.IntTensor().type_as", "torch_geometric.data.Data", "map", "map", "enumerate", "edge_index[].numpy().tolist", "edge_index[].numpy().tolist", "torch.IntTensor", "node_idx.numpy().tolist", "edge_index[].numpy", "edge_index[].numpy", "node_idx.numpy"], "methods", ["None"], ["", "def", "adjust_idx", "(", "self", ",", "edge_index", ",", "node_idx", ",", "full_g", ",", "center_idx", ")", ":", "\n", "        ", "'''re-index the nodes and edge index\n\n        In the subgraphs, some nodes are droppped. We need to change the node index in edge_index in order to corresponds \n        nodes' index to edge index\n        '''", "\n", "node_idx_map", "=", "{", "j", ":", "i", "for", "i", ",", "j", "in", "enumerate", "(", "node_idx", ".", "numpy", "(", ")", ".", "tolist", "(", ")", ")", "}", "\n", "sources_idx", "=", "list", "(", "map", "(", "node_idx_map", ".", "get", ",", "edge_index", "[", "0", "]", ".", "numpy", "(", ")", ".", "tolist", "(", ")", ")", ")", "\n", "target_idx", "=", "list", "(", "map", "(", "node_idx_map", ".", "get", ",", "edge_index", "[", "1", "]", ".", "numpy", "(", ")", ".", "tolist", "(", ")", ")", ")", "\n", "\n", "edge_index", "=", "torch", ".", "IntTensor", "(", "[", "sources_idx", ",", "target_idx", "]", ")", ".", "type_as", "(", "full_g", ".", "edge_index", ")", "\n", "x_view", "=", "Data", "(", "edge_index", "=", "edge_index", ",", "x", "=", "full_g", ".", "x", "[", "node_idx", "]", ",", "center", "=", "node_idx_map", "[", "center_idx", "]", ",", "original_idx", "=", "node_idx", ")", "\n", "return", "x_view", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuyun97_rosa.None.augmentation.DropEdgeAndFeature.__init__": [[118, 121], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "d_fea", "=", "0.2", ",", "d_edge", "=", "0.3", ")", ":", "\n", "        ", "self", ".", "drop_feature_ratio", "=", "d_fea", "\n", "self", ".", "drop_edge_ratio", "=", "d_edge", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuyun97_rosa.None.augmentation.DropEdgeAndFeature.set_drop_ratio": [[122, 125], ["None"], "methods", ["None"], ["", "def", "set_drop_ratio", "(", "self", ",", "d_fea", ",", "d_edge", ")", ":", "\n", "        ", "self", ".", "drop_feature_ratio", "=", "d_fea", "\n", "self", ".", "drop_edge_ratio", "=", "d_edge", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuyun97_rosa.None.augmentation.DropEdgeAndFeature.set_drop_edge_ratio": [[126, 128], ["None"], "methods", ["None"], ["", "def", "set_drop_edge_ratio", "(", "self", ",", "d_edge", ")", ":", "\n", "        ", "self", ".", "drop_edge_ratio", "=", "d_edge", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuyun97_rosa.None.augmentation.DropEdgeAndFeature.set_drop_fea_ratio": [[129, 131], ["None"], "methods", ["None"], ["", "def", "set_drop_fea_ratio", "(", "self", ",", "d_fea", ")", ":", "\n", "        ", "self", ".", "drop_feature_ratio", "=", "d_fea", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuyun97_rosa.None.augmentation.DropEdgeAndFeature.drop_fea_edge": [[132, 139], ["copy.deepcopy", "augmentation.DropEdgeAndFeature._drop_edge", "augmentation.DropEdgeAndFeature._drop_feature"], "methods", ["home.repos.pwc.inspect_result.zhuyun97_rosa.None.augmentation.DropEdgeAndFeature._drop_edge", "home.repos.pwc.inspect_result.zhuyun97_rosa.None.augmentation.DropEdgeAndFeature._drop_feature"], ["", "def", "drop_fea_edge", "(", "self", ",", "g", ")", ":", "\n", "        ", "new_g", "=", "copy", ".", "deepcopy", "(", "g", ")", "\n", "edge_index", "=", "self", ".", "_drop_edge", "(", "new_g", ")", "\n", "x", "=", "self", ".", "_drop_feature", "(", "new_g", ")", "\n", "new_g", ".", "x", "=", "x", "\n", "new_g", ".", "edge_index", "=", "edge_index", "\n", "return", "new_g", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuyun97_rosa.None.augmentation.DropEdgeAndFeature._drop_feature": [[140, 148], ["g.x.clone", "torch.empty().uniform_", "torch.empty", "g.x.size"], "methods", ["None"], ["", "def", "_drop_feature", "(", "self", ",", "g", ")", ":", "\n", "        ", "drop_mask", "=", "torch", ".", "empty", "(", "\n", "(", "g", ".", "x", ".", "size", "(", "1", ")", ",", ")", ",", "\n", "dtype", "=", "torch", ".", "float32", ",", "\n", "device", "=", "g", ".", "x", ".", "device", ")", ".", "uniform_", "(", "0", ",", "1", ")", "<", "self", ".", "drop_feature_ratio", "\n", "x", "=", "g", ".", "x", ".", "clone", "(", ")", "\n", "x", "[", ":", ",", "drop_mask", "]", "=", "0", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuyun97_rosa.None.augmentation.DropEdgeAndFeature._drop_edge": [[149, 152], ["torch_geometric.utils.dropout_adj"], "methods", ["None"], ["", "def", "_drop_edge", "(", "self", ",", "g", ")", ":", "\n", "        ", "edge_index", ",", "_", "=", "dropout_adj", "(", "g", ".", "edge_index", ",", "p", "=", "self", ".", "drop_edge_ratio", ")", "\n", "return", "edge_index", "", "", "", ""]], "home.repos.pwc.inspect_result.zhuyun97_rosa.None.augmentation.add_remaining_selfloop_for_isolated_nodes": [[9, 21], ["max", "torch.arange", "torch.cat().unique", "torch.ones", "loops_for_isolatd_nodes.unsqueeze().repeat.unsqueeze().repeat", "torch.cat", "torch_geometric.utils.num_nodes.maybe_num_nodes", "torch.cat", "loops_for_isolatd_nodes.unsqueeze().repeat.unsqueeze"], "function", ["home.repos.pwc.inspect_result.zhuyun97_rosa.None.eval_utils.repeat"], ["def", "add_remaining_selfloop_for_isolated_nodes", "(", "edge_index", ",", "num_nodes", ")", ":", "\n", "    ", "num_nodes", "=", "max", "(", "maybe_num_nodes", "(", "edge_index", ")", ",", "num_nodes", ")", "\n", "# only add self-loop on isolated nodes", "\n", "# edge_index, _ = remove_self_loops(edge_index)", "\n", "loop_index", "=", "torch", ".", "arange", "(", "0", ",", "num_nodes", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "edge_index", ".", "device", ")", "\n", "connected_nodes_indices", "=", "torch", ".", "cat", "(", "[", "edge_index", "[", "0", "]", ",", "edge_index", "[", "1", "]", "]", ")", ".", "unique", "(", ")", "\n", "mask", "=", "torch", ".", "ones", "(", "num_nodes", ",", "dtype", "=", "torch", ".", "bool", ")", "\n", "mask", "[", "connected_nodes_indices", "]", "=", "False", "\n", "loops_for_isolatd_nodes", "=", "loop_index", "[", "mask", "]", "\n", "loops_for_isolatd_nodes", "=", "loops_for_isolatd_nodes", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "2", ",", "1", ")", "\n", "edge_index", "=", "torch", ".", "cat", "(", "[", "edge_index", ",", "loops_for_isolatd_nodes", "]", ",", "dim", "=", "1", ")", "\n", "return", "edge_index", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuyun97_rosa.dataset_apis.citeseer.load_trainset": [[4, 7], ["torch_geometric.datasets.Planetoid", "torch_geometric.Compose"], "function", ["None"], ["def", "load_trainset", "(", "trans", ")", ":", "\n", "    ", "dataset", "=", "Planetoid", "(", "root", "=", "'~/datasets'", ",", "name", "=", "'Citeseer'", ",", "transform", "=", "T", ".", "Compose", "(", "[", "trans", "]", ")", ")", "\n", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuyun97_rosa.dataset_apis.citeseer.load_eval_trainset": [[8, 10], ["torch_geometric.datasets.Planetoid"], "function", ["None"], ["", "def", "load_eval_trainset", "(", ")", ":", "\n", "    ", "return", "Planetoid", "(", "root", "=", "'~/datasets'", ",", "name", "=", "'Citeseer'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuyun97_rosa.dataset_apis.citeseer.load_testset": [[11, 13], ["torch_geometric.datasets.Planetoid"], "function", ["None"], ["", "def", "load_testset", "(", ")", ":", "\n", "    ", "return", "Planetoid", "(", "root", "=", "'~/datasets'", ",", "name", "=", "'Citeseer'", ")", "", "", ""]], "home.repos.pwc.inspect_result.zhuyun97_rosa.dataset_apis.dblp.load_trainset": [[4, 7], ["torch_geometric.datasets.CitationFull", "torch_geometric.Compose"], "function", ["None"], ["def", "load_trainset", "(", "trans", ")", ":", "\n", "    ", "dataset", "=", "CitationFull", "(", "root", "=", "'~/datasets'", ",", "name", "=", "'dblp'", ",", "transform", "=", "T", ".", "Compose", "(", "[", "trans", "]", ")", ")", "\n", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuyun97_rosa.dataset_apis.dblp.load_eval_trainset": [[8, 10], ["torch_geometric.datasets.CitationFull"], "function", ["None"], ["", "def", "load_eval_trainset", "(", ")", ":", "\n", "    ", "return", "CitationFull", "(", "root", "=", "'~/datasets'", ",", "name", "=", "'dblp'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuyun97_rosa.dataset_apis.dblp.load_testset": [[11, 13], ["torch_geometric.datasets.CitationFull"], "function", ["None"], ["", "def", "load_testset", "(", ")", ":", "\n", "    ", "return", "CitationFull", "(", "root", "=", "'~/datasets'", ",", "name", "=", "'dblp'", ")", "", "", ""]], "home.repos.pwc.inspect_result.zhuyun97_rosa.dataset_apis.pubmed.load_trainset": [[5, 8], ["torch_geometric.datasets.Planetoid", "torch_geometric.Compose"], "function", ["None"], ["def", "load_trainset", "(", "trans", ")", ":", "\n", "    ", "dataset", "=", "Planetoid", "(", "root", "=", "'~/datasets'", ",", "name", "=", "'Pubmed'", ",", "transform", "=", "T", ".", "Compose", "(", "[", "trans", "]", ")", ")", "\n", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuyun97_rosa.dataset_apis.pubmed.load_eval_trainset": [[9, 11], ["torch_geometric.datasets.Planetoid"], "function", ["None"], ["", "def", "load_eval_trainset", "(", ")", ":", "\n", "    ", "return", "Planetoid", "(", "root", "=", "'~/datasets'", ",", "name", "=", "'Pubmed'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuyun97_rosa.dataset_apis.pubmed.load_testset": [[12, 14], ["torch_geometric.datasets.Planetoid"], "function", ["None"], ["", "def", "load_testset", "(", ")", ":", "\n", "    ", "return", "Planetoid", "(", "root", "=", "'~/datasets'", ",", "name", "=", "'Pubmed'", ")", "", "", ""]], "home.repos.pwc.inspect_result.zhuyun97_rosa.dataset_apis.cora.load_trainset": [[4, 7], ["torch_geometric.datasets.Planetoid", "torch_geometric.Compose"], "function", ["None"], ["def", "load_trainset", "(", "trans", ")", ":", "\n", "    ", "dataset", "=", "Planetoid", "(", "root", "=", "'~/datasets'", ",", "name", "=", "'Cora'", ",", "transform", "=", "T", ".", "Compose", "(", "[", "trans", "]", ")", ")", "\n", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuyun97_rosa.dataset_apis.cora.load_eval_trainset": [[8, 10], ["torch_geometric.datasets.Planetoid"], "function", ["None"], ["", "def", "load_eval_trainset", "(", ")", ":", "\n", "    ", "return", "Planetoid", "(", "root", "=", "'~/datasets'", ",", "name", "=", "'Cora'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuyun97_rosa.dataset_apis.cora.load_testset": [[11, 13], ["torch_geometric.datasets.Planetoid"], "function", ["None"], ["", "def", "load_testset", "(", ")", ":", "\n", "    ", "return", "Planetoid", "(", "root", "=", "'~/datasets'", ",", "name", "=", "'Cora'", ")", "", "", ""]]}