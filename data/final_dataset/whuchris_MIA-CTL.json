{"home.repos.pwc.inspect_result.whuchris_MIA-CTL.None.train.worker": [[14, 137], ["torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.CrossEntropyLoss", "os.path.join", "data_reader.MyDataSet", "data_reader.MyDataSet", "data_reader.MyDataSet", "data_reader.MyDataSet", "data_reader.MyDataSet", "torch.utils.data.DataLoader", "torch.optim.Adam", "torch.cuda.is_available", "torch.cuda.is_available", "model.Linear.cuda", "nn.CrossEntropyLoss.cuda", "torch.DataParallel", "os.path.isfile", "train..", "train.fine_tune_or_supervised", "model.ResNet101", "model.Linear.parameters", "model.VGG19", "torch.optim.SGD", "print", "torch.load", "torch.load", "model.Linear.load_state_dict", "torch.optim.SGD.load_state_dict", "print", "print", "model.ResNet50", "model.Linear.parameters", "model.EfficientB7", "torch.optim.SGD", "model.Linear", "torch.optim.SGD", "model.Linear.parameters", "model.Linear.parameters"], "function", ["home.repos.pwc.inspect_result.whuchris_MIA-CTL.None.train.fine_tune_or_supervised", "home.repos.pwc.inspect_result.whuchris_MIA-CTL.None.model.ResNet101", "home.repos.pwc.inspect_result.whuchris_MIA-CTL.None.model.VGG19", "home.repos.pwc.inspect_result.whuchris_MIA-CTL.None.model.ResNet50", "home.repos.pwc.inspect_result.whuchris_MIA-CTL.None.model.EfficientB7"], ["def", "worker", "(", "args", ",", "folder_num", "=", "0", ")", ":", "\n", "\n", "#model configuration", "\n", "    ", "model_name", "=", "args", ".", "model_name", "\n", "feature_dim", "=", "args", ".", "feature_dim", "\n", "num_class", "=", "args", ".", "num_class", "\n", "\n", "#trianing configuration", "\n", "epoch", "=", "args", ".", "epoch", "\n", "start_epoch", "=", "args", ".", "start_epoch", "\n", "batch_size", "=", "args", ".", "batch_size", "\n", "num_workers", "=", "args", ".", "num_workers", "\n", "train_mode", "=", "args", ".", "train_mode", "\n", "temperature", "=", "args", ".", "temperature", "\n", "shuffle", "=", "not", "args", ".", "not_shuffle", "\n", "use_gpu", "=", "not", "args", ".", "not_use_gpu", "\n", "use_lbp", "=", "args", ".", "use_lbp", "\n", "\n", "#optimizer", "\n", "lr", "=", "args", ".", "lr", "\n", "weigth_decay", "=", "args", ".", "weight_decay", "\n", "\n", "#model params", "\n", "init", "=", "args", ".", "init", "\n", "pre_train", "=", "args", ".", "pre_train", "\n", "pre_load", "=", "args", ".", "pre_load", "\n", "\n", "#resume", "\n", "resume", "=", "args", ".", "resume", "\n", "resume_file_name", "=", "args", ".", "resume_file", "\n", "resume_file", "=", "\"\"", "\n", "\n", "#fine-tune", "\n", "load_path", "=", "args", ".", "pre_train_path", "\n", "\n", "#assert:", "\n", "assert", "model_name", "in", "[", "'resnet101'", ",", "'resnet50'", ",", "'vgg19'", ",", "'lbp_resnet101'", ",", "'efficientb7'", "]", ",", "\"invalid model_name %s\"", "%", "(", "model_name", ")", "\n", "assert", "train_mode", "in", "[", "'self_supervised'", ",", "'supervised'", ",", "'fine_tune'", "]", ",", "\"invalid train_mode %s\"", "%", "(", "train_mode", ")", "\n", "if", "resume", ":", "resume_file", "=", "os", ".", "path", ".", "join", "(", "\"checkpoint\"", ",", "train_mode", ",", "model_name", ",", "resume_file_name", ")", "\n", "\n", "val_set", "=", "None", "\n", "if", "train_mode", "==", "'self_supervised'", ":", "\n", "        ", "train_set", "=", "MyDataSet", "(", "mode", "=", "'ssl'", ",", "use_lbp", "=", "use_lbp", ")", "\n", "test_set", "=", "MyDataSet", "(", "mode", "=", "'test'", ",", "augmentation", "=", "False", ",", "use_lbp", "=", "use_lbp", ")", "\n", "", "else", ":", "\n", "        ", "train_set", "=", "MyDataSet", "(", "folder_num", "=", "folder_num", ",", "mode", "=", "'train'", ",", "use_lbp", "=", "use_lbp", ")", "\n", "val_set", "=", "MyDataSet", "(", "folder_num", "=", "folder_num", ",", "mode", "=", "'val'", ",", "augmentation", "=", "False", ",", "use_lbp", "=", "use_lbp", ")", "\n", "test_set", "=", "MyDataSet", "(", "mode", "=", "'test'", ",", "augmentation", "=", "False", ",", "use_lbp", "=", "use_lbp", ")", "\n", "\n", "", "train_loader", "=", "DataLoader", "(", "dataset", "=", "train_set", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "shuffle", "=", "shuffle", ")", "\n", "\n", "test_loader", "=", "DataLoader", "(", "dataset", "=", "test_set", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "shuffle", "=", "shuffle", ")", "\n", "if", "val_set", "!=", "None", ":", "\n", "        ", "val_loader", "=", "DataLoader", "(", "dataset", "=", "val_set", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "shuffle", "=", "shuffle", ")", "\n", "", "else", ":", "\n", "        ", "val_loader", "=", "None", "\n", "", "net", "=", "None", "\n", "if", "train_mode", "==", "'self_supervised'", ":", "\n", "        ", "if", "model_name", "in", "[", "'resnet101'", ",", "'lbp_resnet101'", "]", ":", "\n", "            ", "net", "=", "model", ".", "ResNet101", "(", "init", "=", "init", ",", "pre_train", "=", "pre_train", ",", "feature_dim", "=", "feature_dim", ")", "\n", "", "elif", "model_name", "==", "'resnet50'", ":", "\n", "            ", "net", "=", "model", ".", "ResNet50", "(", "init", "=", "init", ",", "pre_train", "=", "pre_train", ",", "feature_dim", "=", "feature_dim", ")", "\n", "", "optimizer", "=", "Adam", "(", "net", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ",", "weight_decay", "=", "weigth_decay", ")", "\n", "", "elif", "train_mode", "==", "'supervised'", "and", "model_name", "==", "'vgg19'", ":", "\n", "        ", "net", "=", "model", ".", "VGG19", "(", "init", "=", "True", ",", "class_num", "=", "5", ")", "\n", "optimizer", "=", "SGD", "(", "net", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ",", "momentum", "=", "0.9", ",", "weight_decay", "=", "weigth_decay", ")", "\n", "", "elif", "train_mode", "==", "'supervised'", "and", "model_name", "==", "'efficientb7'", ":", "\n", "        ", "net", "=", "model", ".", "EfficientB7", "(", ")", "\n", "optimizer", "=", "SGD", "(", "net", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ",", "momentum", "=", "0.9", ",", "weight_decay", "=", "weigth_decay", ")", "\n", "", "else", ":", "\n", "        ", "net", "=", "model", ".", "Linear", "(", "model_name", "=", "model_name", ",", "num_class", "=", "num_class", ",", "init", "=", "init", ",", "\n", "pre_train", "=", "pre_train", ",", "pre_load", "=", "pre_load", ",", "pretrained_path", "=", "load_path", ")", "\n", "optimizer", "=", "SGD", "(", "net", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ",", "momentum", "=", "0.9", ",", "weight_decay", "=", "weigth_decay", ")", "\n", "\n", "", "CE_loss", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "use_gpu", ":", "\n", "        ", "net", ".", "cuda", "(", ")", "\n", "CE_loss", ".", "cuda", "(", ")", "\n", "net", "=", "nn", ".", "DataParallel", "(", "net", ",", "device_ids", "=", "[", "0", ",", "2", "]", ")", "\n", "\n", "", "best_acc", "=", "0.0", "\n", "continue_epoch", "=", "0", "\n", "\n", "#resume from checkpoint", "\n", "if", "resume", "==", "True", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "resume_file", ")", ":", "\n", "            ", "print", "(", "\"=> loading checkpoint '{}'\"", ".", "format", "(", "resume_file_name", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "resume_file", ")", "\n", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "best_acc", "=", "checkpoint", "[", "'best_acc'", "]", "\n", "net", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "print", "(", "\"=> loaded checkpoint '{}' (epoch {})\"", "\n", ".", "format", "(", "args", ".", "resume_file", ",", "checkpoint", "[", "'epoch'", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"=> no checkpoint found\"", ")", "\n", "\n", "", "", "model_settings", "=", "{", "\n", "'train_loader'", ":", "train_loader", ",", "\n", "'test_loader'", ":", "test_loader", ",", "\n", "'val_loader'", ":", "val_loader", ",", "\n", "'net'", ":", "net", ",", "\n", "'optimizer'", ":", "optimizer", ",", "\n", "'train_mode'", ":", "train_mode", ",", "\n", "'temperature'", ":", "temperature", ",", "\n", "'model_name'", ":", "model_name", ",", "\n", "'continue_epoch'", ":", "continue_epoch", ",", "\n", "'CE_loss'", ":", "CE_loss", ",", "\n", "'best_acc'", ":", "best_acc", "\n", "}", "\n", "if", "train_mode", "==", "'self_supervised'", ":", "\n", "        ", "self_supervised", "(", "start_epoch", ",", "epoch", ",", "**", "model_settings", ")", "\n", "", "else", ":", "\n", "        ", "fine_tune_or_supervised", "(", "start_epoch", ",", "epoch", ",", "**", "model_settings", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whuchris_MIA-CTL.None.train.self_supervised": [[138, 167], ["range", "train._ssl_train", "train._ssl_test", "max", "util.save_checkpoint_ssl", "net.state_dict", "optimizer.state_dict"], "function", ["home.repos.pwc.inspect_result.whuchris_MIA-CTL.None.train._ssl_train", "home.repos.pwc.inspect_result.whuchris_MIA-CTL.None.train._ssl_test", "home.repos.pwc.inspect_result.whuchris_MIA-CTL.None.util.save_checkpoint_ssl"], ["", "", "def", "self_supervised", "(", "start_epoch", ",", "epoch", ",", "**", "model_settings", ")", ":", "\n", "    ", "train_loader", "=", "model_settings", "[", "'train_loader'", "]", "\n", "test_loader", "=", "model_settings", "[", "'test_loader'", "]", "\n", "net", "=", "model_settings", "[", "'net'", "]", "\n", "optimizer", "=", "model_settings", "[", "'optimizer'", "]", "\n", "train_mode", "=", "model_settings", "[", "'train_mode'", "]", "\n", "temperature", "=", "model_settings", "[", "'temperature'", "]", "\n", "model_name", "=", "model_settings", "[", "'model_name'", "]", "\n", "continue_epoch", "=", "model_settings", "[", "'continue_epoch'", "]", "\n", "best_acc", "=", "model_settings", "[", "'best_acc'", "]", "\n", "for", "i", "in", "range", "(", "start_epoch", ",", "epoch", ")", ":", "\n", "        ", "_ssl_train", "(", "train_loader", "=", "train_loader", ",", "net", "=", "net", ",", "optimizer", "=", "optimizer", ",", "train_mode", "=", "train_mode", ",", "\n", "temperature", "=", "temperature", ",", "model_name", "=", "model_name", ",", "i", "=", "i", ")", "\n", "\n", "#evaluate model", "\n", "test_acc", "=", "_ssl_test", "(", "test_loader", "=", "test_loader", ",", "net", "=", "net", ",", "train_mode", "=", "train_mode", ",", "\n", "temperature", "=", "temperature", ",", "model_name", "=", "model_name", ",", "i", "=", "i", ")", "\n", "\n", "is_best", "=", "test_acc", ">", "best_acc", "\n", "best_acc", "=", "max", "(", "test_acc", ",", "best_acc", ")", "\n", "if", "is_best", "or", "(", "i", "+", "1", ")", "%", "10", "==", "0", ":", "\n", "            ", "save_checkpoint_ssl", "(", "{", "\n", "'epoch'", ":", "i", "+", "1", ",", "\n", "'arch'", ":", "model_name", ",", "\n", "'state_dict'", ":", "net", ".", "state_dict", "(", ")", ",", "\n", "'best_acc'", ":", "best_acc", ",", "\n", "'continue_epoch'", ":", "continue_epoch", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "train_mode", "=", "train_mode", ",", "model_name", "=", "model_name", ",", "is_best", "=", "is_best", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whuchris_MIA-CTL.None.train.fine_tune_or_supervised": [[168, 196], ["range", "train._train", "train._val", "max", "util.save_checkpoint", "net.state_dict", "optimizer.state_dict"], "function", ["home.repos.pwc.inspect_result.whuchris_MIA-CTL.None.train._train", "home.repos.pwc.inspect_result.whuchris_MIA-CTL.None.train._val", "home.repos.pwc.inspect_result.whuchris_MIA-CTL.None.util.save_checkpoint"], ["", "", "", "def", "fine_tune_or_supervised", "(", "start_epoch", ",", "epoch", ",", "**", "model_settings", ")", ":", "\n", "    ", "train_loader", "=", "model_settings", "[", "'train_loader'", "]", "\n", "val_loader", "=", "model_settings", "[", "'val_loader'", "]", "\n", "net", "=", "model_settings", "[", "'net'", "]", "\n", "optimizer", "=", "model_settings", "[", "'optimizer'", "]", "\n", "train_mode", "=", "model_settings", "[", "'train_mode'", "]", "\n", "model_name", "=", "model_settings", "[", "'model_name'", "]", "\n", "continue_epoch", "=", "model_settings", "[", "'continue_epoch'", "]", "\n", "CE_loss", "=", "model_settings", "[", "'CE_loss'", "]", "\n", "best_acc", "=", "model_settings", "[", "'best_acc'", "]", "\n", "for", "i", "in", "range", "(", "start_epoch", ",", "epoch", ")", ":", "\n", "        ", "_train", "(", "train_loader", "=", "train_loader", ",", "net", "=", "net", ",", "optimizer", "=", "optimizer", ",", "criterion", "=", "CE_loss", ",", "\n", "train_mode", "=", "train_mode", ",", "model_name", "=", "model_name", ",", "folder_num", "=", "folder_num", ",", "i", "=", "i", ")", "\n", "#\u6d4b\u8bd5", "\n", "val_acc", "=", "_val", "(", "val_loader", "=", "val_loader", ",", "net", "=", "net", ",", "criterion", "=", "CE_loss", ",", "\n", "train_mode", "=", "train_mode", ",", "model_name", "=", "model_name", ",", "folder_num", "=", "folder_num", ",", "i", "=", "i", ")", "\n", "\n", "is_best", "=", "val_acc", ">", "best_acc", "\n", "best_acc", "=", "max", "(", "val_acc", ",", "best_acc", ")", "\n", "if", "is_best", "or", "(", "i", "+", "1", ")", "%", "10", "==", "0", ":", "\n", "            ", "save_checkpoint", "(", "{", "\n", "'epoch'", ":", "i", "+", "1", ",", "\n", "'arch'", ":", "model_name", ",", "\n", "'state_dict'", ":", "net", ".", "state_dict", "(", ")", ",", "\n", "'best_acc'", ":", "best_acc", ",", "\n", "'continue_epoch'", ":", "continue_epoch", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "train_mode", "=", "train_mode", ",", "model_name", "=", "model_name", ",", "is_best", "=", "is_best", ",", "folder_num", "=", "folder_num", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whuchris_MIA-CTL.None.train._ssl_train": [[197, 251], ["util.DataUpdater", "util.DataUpdater", "time.time", "net.train", "len", "enumerate", "len", "net", "net", "torch.cat", "torch.cat", "torch.exp", "torch.exp", "sim_matrix.masked_select().view.masked_select().view", "torch.exp", "torch.exp", "torch.cat", "torch.cat", "optimizer.zero_grad", "loss.backward", "optimizer.step", "util.DataUpdater.update", "util.DataUpdater.update", "time.time", "print", "os.path.join", "pos_1.float", "pos_2.float", "torch.cuda.is_available", "torch.cuda.is_available", "labels.cuda.cuda", "loss.item", "open", "file.write", "file.close", "print", "pos_1.cuda", "pos_2.cuda", "torch.mm", "torch.mm", "sim_matrix.masked_select().view.masked_select", "torch.sum", "torch.sum", "time.time", "len", "torch.cat.t().contiguous", "torch.ones_like", "torch.ones_like", "torch.eye", "torch.eye", "torch.log", "torch.log", "len", "torch.cat.t", "sim_matrix.masked_select().view.sum"], "function", ["home.repos.pwc.inspect_result.whuchris_MIA-CTL.None.util.DataUpdater.update", "home.repos.pwc.inspect_result.whuchris_MIA-CTL.None.util.DataUpdater.update"], ["", "", "", "def", "_ssl_train", "(", "train_loader", ",", "net", ",", "optimizer", ",", "train_mode", ",", "temperature", ",", "model_name", ",", "i", ")", ":", "\n", "    ", "batch_time", "=", "DataUpdater", "(", ")", "\n", "losses", "=", "DataUpdater", "(", ")", "\n", "tm", "=", "time", ".", "time", "(", ")", "\n", "net", ".", "train", "(", ")", "\n", "length", "=", "len", "(", "train_loader", ")", "\n", "for", "j", ",", "data", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "pos_1", ",", "pos_2", ",", "labels", ",", "name", "=", "data", "\n", "batch_size", "=", "len", "(", "labels", ")", "\n", "#pos_1, pos_2 = pos_1.cuda(non_blocking=True).float(), pos_2.cuda(non_blocking=True).float()", "\n", "pos_1", ",", "pos_2", "=", "pos_1", ".", "float", "(", ")", ",", "pos_2", ".", "float", "(", ")", "\n", "if", "not", "args", ".", "not_use_gpu", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "pos_1", ",", "pos_2", "=", "pos_1", ".", "cuda", "(", "non_blocking", "=", "True", ")", ",", "pos_2", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "labels", "=", "labels", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "", "feature_1", ",", "out_1", "=", "net", "(", "pos_1", ")", "\n", "feature_2", ",", "out_2", "=", "net", "(", "pos_2", ")", "\n", "out", "=", "torch", ".", "cat", "(", "[", "out_1", ",", "out_2", "]", ",", "dim", "=", "0", ")", "\n", "# [2*B, 2*B]", "\n", "sim_matrix", "=", "torch", ".", "exp", "(", "torch", ".", "mm", "(", "out", ",", "out", ".", "t", "(", ")", ".", "contiguous", "(", ")", ")", "/", "temperature", ")", "\n", "mask", "=", "(", "torch", ".", "ones_like", "(", "sim_matrix", ")", "-", "torch", ".", "eye", "(", "2", "*", "batch_size", ",", "device", "=", "sim_matrix", ".", "device", ")", ")", ".", "bool", "(", ")", "\n", "# [2*B, 2*B-1]", "\n", "sim_matrix", "=", "sim_matrix", ".", "masked_select", "(", "mask", ")", ".", "view", "(", "2", "*", "batch_size", ",", "-", "1", ")", "\n", "\n", "# compute loss", "\n", "pos_sim", "=", "torch", ".", "exp", "(", "torch", ".", "sum", "(", "out_1", "*", "out_2", ",", "dim", "=", "-", "1", ")", "/", "temperature", ")", "\n", "# [2*B]", "\n", "pos_sim", "=", "torch", ".", "cat", "(", "[", "pos_sim", ",", "pos_sim", "]", ",", "dim", "=", "0", ")", "\n", "loss", "=", "(", "-", "torch", ".", "log", "(", "pos_sim", "/", "sim_matrix", ".", "sum", "(", "dim", "=", "-", "1", ")", ")", ")", ".", "mean", "(", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "batch_size", ")", "\n", "#top1.update(metrics.accuracy(output=outputs,target=labels,topk=(1,))[0].item(),batch_size)", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "tm", ")", "\n", "\n", "tm", "=", "time", ".", "time", "(", ")", "\n", "\n", "print", "(", "'Train Epoch: {} [{}/{} ({:.0f}%)]\\t'", "\n", "'Loss: {loss.val:.4f} (Avg:{loss.avg:.4f})\\t'", "\n", "'Time: {batch_time.val:.3f} (Avg:{batch_time.avg:.3f})'", ".", "format", "(", "\n", "i", "+", "1", ",", "j", "*", "len", "(", "labels", ")", ",", "len", "(", "train_loader", ".", "dataset", ")", ",", "100.", "*", "j", "/", "length", ",", "\n", "loss", "=", "losses", ",", "batch_time", "=", "batch_time", ")", ")", "\n", "", "try", ":", "\n", "        ", "log", "=", "os", ".", "path", ".", "join", "(", "\"result\"", ",", "train_mode", ",", "model_name", ",", "\"train_result.txt\"", ")", "\n", "with", "open", "(", "log", ",", "'a'", ")", "as", "file", ":", "\n", "            ", "file", ".", "write", "(", "'Epoch: [{0}]\\t'", "\n", "'Loss: {loss.avg:.4f}\\t'", "\n", "'Time: {batch_time.avg:.3f}\\n'", ".", "format", "(", "\n", "i", "+", "1", ",", "loss", "=", "losses", ",", "batch_time", "=", "batch_time", ")", ")", "\n", "file", ".", "close", "(", ")", "\n", "", "", "except", "Exception", "as", "err", ":", "\n", "        ", "print", "(", "err", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whuchris_MIA-CTL.None.train._ssl_test": [[252, 319], ["util.DataUpdater", "util.DataUpdater", "time.time", "net.eval", "len", "torch.no_grad", "torch.no_grad", "enumerate", "torch.cat().t().contiguous", "torch.cat().t().contiguous", "torch.tensor", "torch.tensor", "enumerate", "data.float.float", "net", "torch.cat().t().contiguous.append", "data.float.float", "net", "data.float.size", "torch.mm", "torch.mm", "torch.mm.topk", "torch.gather", "torch.gather", "torch.zeros", "torch.zeros", "one_hot_label.scatter.scatter", "torch.sum", "torch.sum", "torch.sum.argsort", "torch.sum().item", "torch.sum().item", "util.DataUpdater.update", "util.DataUpdater.update", "time.time", "print", "os.path.join", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cat().t", "torch.cat().t", "torch.cuda.is_available", "torch.cuda.is_available", "torch.tensor.expand", "open", "file.write", "file.close", "print", "data.float.cuda", "labels.cuda", "data.float.cuda", "target.cuda", "data.float.size", "data.float.size", "torch.gather.view", "one_hot_label.scatter.view", "sim_weight.unsqueeze", "torch.sum", "torch.sum", "time.time", "len", "torch.cat", "torch.cat", "data.float.size", "len", "target.unsqueeze"], "function", ["home.repos.pwc.inspect_result.whuchris_MIA-CTL.None.util.DataUpdater.update", "home.repos.pwc.inspect_result.whuchris_MIA-CTL.None.util.DataUpdater.update"], ["", "", "def", "_ssl_test", "(", "test_loader", ",", "net", ",", "train_mode", ",", "temperature", ",", "model_name", ",", "i", ")", ":", "\n", "    ", "batch_time", "=", "DataUpdater", "(", ")", "\n", "top1", "=", "DataUpdater", "(", ")", "\n", "tm", "=", "time", ".", "time", "(", ")", "\n", "net", ".", "eval", "(", ")", "\n", "length", "=", "len", "(", "test_loader", ")", "\n", "feature_bank", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# generate feature bank", "\n", "        ", "for", "j", ",", "data_origin", "in", "enumerate", "(", "test_loader", ")", ":", "\n", "            ", "data", ",", "_", ",", "labels", ",", "name", "=", "data_origin", "\n", "#data, labels = data.cuda(non_blocking=True).float(), labels.cuda(non_blocking=True)", "\n", "data", "=", "data", ".", "float", "(", ")", "\n", "if", "not", "args", ".", "not_use_gpu", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                ", "data", ",", "labels", "=", "data", ".", "cuda", "(", "non_blocking", "=", "True", ")", ",", "labels", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "", "feature", ",", "out", "=", "net", "(", "data", ")", "\n", "feature_bank", ".", "append", "(", "feature", ")", "\n", "# [D, N]", "\n", "", "feature_bank", "=", "torch", ".", "cat", "(", "feature_bank", ",", "dim", "=", "0", ")", ".", "t", "(", ")", ".", "contiguous", "(", ")", "\n", "# loop test data to predict the label by weighted knn search", "\n", "feature_labels", "=", "torch", ".", "tensor", "(", "test_loader", ".", "dataset", ".", "labels", ",", "device", "=", "feature_bank", ".", "device", ")", "\n", "for", "j", ",", "data_origin", "in", "enumerate", "(", "test_loader", ")", ":", "\n", "            ", "data", ",", "_", ",", "target", ",", "name", "=", "data_origin", "\n", "#data,target = data.cuda(non_blocking=True).float(),target.cuda(non_blocking=True)", "\n", "data", "=", "data", ".", "float", "(", ")", "\n", "if", "not", "args", ".", "not_use_gpu", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                ", "data", ",", "target", "=", "data", ".", "cuda", "(", "non_blocking", "=", "True", ")", ",", "target", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "", "feature", ",", "out", "=", "net", "(", "data", ")", "\n", "\n", "total_num", "=", "data", ".", "size", "(", "0", ")", "\n", "# compute cos similarity between each feature vector and feature bank ---> [B, N]", "\n", "sim_matrix", "=", "torch", ".", "mm", "(", "feature", ",", "feature_bank", ")", "\n", "# [B, K]", "\n", "sim_weight", ",", "sim_indices", "=", "sim_matrix", ".", "topk", "(", "k", "=", "1", ",", "dim", "=", "-", "1", ")", "\n", "# [B, K]", "\n", "sim_labels", "=", "torch", ".", "gather", "(", "feature_labels", ".", "expand", "(", "data", ".", "size", "(", "0", ")", ",", "-", "1", ")", ",", "dim", "=", "-", "1", ",", "index", "=", "sim_indices", ")", "\n", "sim_weight", "=", "(", "sim_weight", "/", "temperature", ")", ".", "exp", "(", ")", "\n", "\n", "# counts for each class", "\n", "one_hot_label", "=", "torch", ".", "zeros", "(", "data", ".", "size", "(", "0", ")", "*", "1", ",", "5", ",", "device", "=", "sim_labels", ".", "device", ")", "\n", "# [B*K, C]", "\n", "one_hot_label", "=", "one_hot_label", ".", "scatter", "(", "dim", "=", "-", "1", ",", "index", "=", "sim_labels", ".", "view", "(", "-", "1", ",", "1", ")", ",", "value", "=", "1.0", ")", "\n", "# weighted score ---> [B, C]", "\n", "pred_scores", "=", "torch", ".", "sum", "(", "one_hot_label", ".", "view", "(", "data", ".", "size", "(", "0", ")", ",", "-", "1", ",", "5", ")", "*", "sim_weight", ".", "unsqueeze", "(", "dim", "=", "-", "1", ")", ",", "dim", "=", "1", ")", "\n", "\n", "pred_labels", "=", "pred_scores", ".", "argsort", "(", "dim", "=", "-", "1", ",", "descending", "=", "True", ")", "\n", "total_top1", "=", "torch", ".", "sum", "(", "(", "pred_labels", "[", ":", ",", ":", "1", "]", "==", "target", ".", "unsqueeze", "(", "dim", "=", "-", "1", ")", ")", ".", "any", "(", "dim", "=", "-", "1", ")", ".", "float", "(", ")", ")", ".", "item", "(", ")", "\n", "top1", ".", "update", "(", "total_top1", "/", "total_num", ",", "total_num", ")", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "tm", ")", "\n", "tm", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "'Test Epoch: {} [{}/{} ({:.0f}%)]\\t'", "\n", "'Top1Acc: {top1.val:.4f} (Avg:{top1.avg:.4f})\\t'", "\n", "'Time: {batch_time.val:.3f} (Avg:{batch_time.avg:.3f})'", ".", "format", "(", "\n", "i", "+", "1", ",", "j", "*", "len", "(", "labels", ")", ",", "len", "(", "test_loader", ".", "dataset", ")", ",", "100.", "*", "j", "/", "length", ",", "\n", "top1", "=", "top1", ",", "batch_time", "=", "batch_time", ")", ")", "\n", "\n", "", "try", ":", "\n", "            ", "log", "=", "os", ".", "path", ".", "join", "(", "\"result\"", ",", "train_mode", ",", "model_name", ",", "\"test_result.txt\"", ")", "\n", "with", "open", "(", "log", ",", "'a'", ")", "as", "file", ":", "\n", "                ", "file", ".", "write", "(", "'Epoch: [{0}]\\t'", "\n", "'Top1: {top1.avg:.4f}\\t'", "\n", "'Time: {batch_time.avg:.3f}\\n'", ".", "format", "(", "\n", "i", "+", "1", ",", "top1", "=", "top1", ",", "batch_time", "=", "batch_time", ")", ")", "\n", "file", ".", "close", "(", ")", "\n", "", "", "except", "Exception", "as", "err", ":", "\n", "            ", "print", "(", "err", ")", "\n", "", "", "return", "top1", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.whuchris_MIA-CTL.None.train._train": [[320, 365], ["util.DataUpdater", "util.DataUpdater", "util.DataUpdater", "util.Matrics", "time.time", "net.train", "enumerate", "len", "pos_1.float.float", "net", "criterion", "optimizer.zero_grad", "criterion.backward", "optimizer.step", "util.DataUpdater.update", "util.DataUpdater.update", "util.DataUpdater.update", "time.time", "print", "os.path.join", "torch.cuda.is_available", "torch.cuda.is_available", "criterion.item", "[].item", "open", "file.write", "file.close", "print", "pos_1.float.cuda", "labels.cuda", "time.time", "len", "len", "len", "str", "util.Matrics.accuracy"], "function", ["home.repos.pwc.inspect_result.whuchris_MIA-CTL.None.util.DataUpdater.update", "home.repos.pwc.inspect_result.whuchris_MIA-CTL.None.util.DataUpdater.update", "home.repos.pwc.inspect_result.whuchris_MIA-CTL.None.util.DataUpdater.update", "home.repos.pwc.inspect_result.whuchris_MIA-CTL.None.util.Matrics.accuracy"], ["", "def", "_train", "(", "train_loader", ",", "net", ",", "optimizer", ",", "criterion", ",", "train_mode", ",", "model_name", ",", "folder_num", ",", "i", ")", ":", "\n", "    ", "batch_time", "=", "DataUpdater", "(", ")", "\n", "losses", "=", "DataUpdater", "(", ")", "\n", "top1", "=", "DataUpdater", "(", ")", "\n", "metrics", "=", "Matrics", "(", ")", "\n", "tm", "=", "time", ".", "time", "(", ")", "\n", "net", ".", "train", "(", ")", "\n", "for", "j", ",", "data", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "pos_1", ",", "_", ",", "labels", ",", "name", "=", "data", "\n", "batch_size", "=", "len", "(", "labels", ")", "\n", "#pos_1 = pos_1.cuda(non_blocking=True).float()", "\n", "pos_1", "=", "pos_1", ".", "float", "(", ")", "\n", "if", "not", "args", ".", "not_use_gpu", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "pos_1", ",", "labels", "=", "pos_1", ".", "cuda", "(", "non_blocking", "=", "True", ")", ",", "labels", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "", "outputs", "=", "net", "(", "pos_1", ")", "\n", "#labels = labels.cuda()", "\n", "loss", "=", "criterion", "(", "outputs", ",", "labels", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "batch_size", ")", "\n", "top1", ".", "update", "(", "metrics", ".", "accuracy", "(", "output", "=", "outputs", ",", "target", "=", "labels", ",", "topk", "=", "(", "1", ",", ")", ")", "[", "0", "]", ".", "item", "(", ")", ",", "batch_size", ")", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "tm", ")", "\n", "tm", "=", "time", ".", "time", "(", ")", "\n", "\n", "print", "(", "'Folder: {}\\t'", "\n", "'Train Epoch: {} [{}/{} ({:.0f}%)]\\t'", "\n", "'Loss: {loss.val:.4f} (Avg:{loss.avg:.4f})\\t'", "\n", "'AccTop1: {top1.val:.3f} (Avg:{top1.avg:.3f})\\t'", "\n", "'Time: {batch_time.val:.3f} (Avg:{batch_time.avg:.3f})'", ".", "format", "(", "\n", "folder_num", ",", "i", "+", "1", ",", "j", "*", "len", "(", "labels", ")", ",", "len", "(", "train_loader", ".", "dataset", ")", ",", "100.", "*", "j", "/", "len", "(", "train_loader", ")", ",", "\n", "loss", "=", "losses", ",", "top1", "=", "top1", ",", "batch_time", "=", "batch_time", ")", ")", "\n", "", "try", ":", "\n", "        ", "log", "=", "os", ".", "path", ".", "join", "(", "\"result\"", ",", "train_mode", ",", "model_name", ",", "\"train_result_\"", "+", "str", "(", "folder_num", ")", "+", "\".txt\"", ")", "\n", "with", "open", "(", "log", ",", "'a'", ")", "as", "file", ":", "\n", "            ", "file", ".", "write", "(", "'Epoch: [{0}]\\t'", "\n", "'Loss: {loss.avg:.4f}\\t'", "\n", "'AccTop1: {top1.avg:.3f}\\t'", "\n", "'Time: {batch_time.avg:.3f}\\n'", ".", "format", "(", "\n", "i", "+", "1", ",", "loss", "=", "losses", ",", "top1", "=", "top1", ",", "batch_time", "=", "batch_time", ")", ")", "\n", "file", ".", "close", "(", ")", "\n", "", "", "except", "Exception", "as", "err", ":", "\n", "        ", "print", "(", "err", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whuchris_MIA-CTL.None.train._val": [[366, 414], ["util.DataUpdater", "util.DataUpdater", "util.DataUpdater", "net.eval", "util.Matrics", "torch.no_grad", "torch.no_grad", "time.time", "enumerate", "print", "len", "imgs.float.float", "net", "criterion", "util.Matrics.accuracy", "util.DataUpdater.update", "util.DataUpdater.update", "util.DataUpdater.update", "time.time", "print", "os.path.join", "torch.cuda.is_available", "torch.cuda.is_available", "criterion.item", "acc1[].item", "open", "file.write", "file.close", "print", "imgs.float.cuda", "labels.cuda", "time.time", "len", "len", "len", "str"], "function", ["home.repos.pwc.inspect_result.whuchris_MIA-CTL.None.util.Matrics.accuracy", "home.repos.pwc.inspect_result.whuchris_MIA-CTL.None.util.DataUpdater.update", "home.repos.pwc.inspect_result.whuchris_MIA-CTL.None.util.DataUpdater.update", "home.repos.pwc.inspect_result.whuchris_MIA-CTL.None.util.DataUpdater.update"], ["", "", "def", "_val", "(", "val_loader", ",", "net", ",", "criterion", ",", "train_mode", ",", "model_name", ",", "folder_num", ",", "i", ")", ":", "\n", "    ", "batch_time", "=", "DataUpdater", "(", ")", "\n", "losses", "=", "DataUpdater", "(", ")", "\n", "top1", "=", "DataUpdater", "(", ")", "\n", "net", ".", "eval", "(", ")", "\n", "metrics", "=", "Matrics", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "tm", "=", "time", ".", "time", "(", ")", "\n", "for", "j", ",", "data", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "            ", "imgs", ",", "_", ",", "labels", ",", "name", "=", "data", "\n", "batch_size", "=", "len", "(", "labels", ")", "\n", "# imgs = imgs.cuda().float()", "\n", "# labels = labels.cuda()", "\n", "imgs", "=", "imgs", ".", "float", "(", ")", "\n", "if", "not", "args", ".", "not_use_gpu", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                ", "imgs", ",", "labels", "=", "imgs", ".", "cuda", "(", "non_blocking", "=", "True", ")", ",", "labels", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "", "outputs", "=", "net", "(", "imgs", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "labels", ")", "\n", "\n", "acc1", "=", "metrics", ".", "accuracy", "(", "output", "=", "outputs", ",", "target", "=", "labels", ",", "topk", "=", "(", "1", ",", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "batch_size", ")", "\n", "top1", ".", "update", "(", "acc1", "[", "0", "]", ".", "item", "(", ")", ",", "batch_size", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "tm", ")", "\n", "tm", "=", "time", ".", "time", "(", ")", "\n", "\n", "print", "(", "'Folder: {}\\t'", "\n", "'Validation Epoch: {} [{}/{} ({:.0f}%)]\\t'", "\n", "'Loss: {loss.val:.4f}(Avg:{loss.avg:.4f})\\t'", "\n", "'AccTop1: {top1.val:.3f} (Avg:{top1.avg:.3f})\\t'", "\n", "'Time: {batch_time.val:.3f} (Avg:{batch_time.avg:.3f})'", ".", "format", "(", "\n", "folder_num", ",", "i", "+", "1", ",", "j", "*", "len", "(", "imgs", ")", ",", "len", "(", "val_loader", ".", "dataset", ")", ",", "100.", "*", "j", "/", "len", "(", "val_loader", ")", ",", "\n", "loss", "=", "losses", ",", "top1", "=", "top1", ",", "batch_time", "=", "batch_time", ")", ")", "\n", "\n", "", "print", "(", "' * AccTop1 {top1.avg:.3f}'", "\n", ".", "format", "(", "top1", "=", "top1", ")", ")", "\n", "\n", "try", ":", "\n", "            ", "log", "=", "os", ".", "path", ".", "join", "(", "\"result\"", ",", "train_mode", ",", "model_name", ",", "\"val_result_\"", "+", "str", "(", "folder_num", ")", "+", "\".txt\"", ")", "\n", "with", "open", "(", "log", ",", "'a'", ")", "as", "file", ":", "\n", "                ", "file", ".", "write", "(", "'Loss {loss.avg:.4f} * AccTop1 {top1.avg:.3f}\\n'", ".", "format", "(", "\n", "loss", "=", "losses", ",", "top1", "=", "top1", ")", ")", "\n", "file", ".", "close", "(", ")", "\n", "", "", "except", "Exception", "as", "err", ":", "\n", "            ", "print", "(", "err", ")", "\n", "\n", "", "", "return", "top1", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.whuchris_MIA-CTL.None.model.Bottleneck.__init__": [[35, 57], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.whuchris_MIA-CTL.None.util.ImageProcessor.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_places", ",", "places", ",", "stride", "=", "1", ",", "downsampling", "=", "False", ",", "expansion", "=", "4", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "expansion", "=", "expansion", "\n", "self", ".", "downsampling", "=", "downsampling", "\n", "\n", "self", ".", "bottleneck", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_places", ",", "out_channels", "=", "places", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "places", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "places", ",", "out_channels", "=", "places", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "places", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "places", ",", "out_channels", "=", "places", "*", "self", ".", "expansion", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "places", "*", "self", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "if", "self", ".", "downsampling", ":", "\n", "            ", "self", ".", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_places", ",", "out_channels", "=", "places", "*", "self", ".", "expansion", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "places", "*", "self", ".", "expansion", ")", "\n", ")", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.whuchris_MIA-CTL.None.model.Bottleneck.forward": [[57, 67], ["model.Bottleneck.bottleneck", "model.Bottleneck.relu", "model.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "out", "=", "self", ".", "bottleneck", "(", "x", ")", "\n", "\n", "if", "self", ".", "downsampling", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.whuchris_MIA-CTL.None.model.ResNet.__init__": [[69, 93], ["torch.Module.__init__", "model.Conv1", "model.ResNet.make_layer", "model.ResNet.make_layer", "model.ResNet.make_layer", "model.ResNet.make_layer", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linearbi", "torch.Linearbi", "torch.Linearbi", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "model.ResNet.modules", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.whuchris_MIA-CTL.None.util.ImageProcessor.__init__", "home.repos.pwc.inspect_result.whuchris_MIA-CTL.None.model.Conv1", "home.repos.pwc.inspect_result.whuchris_MIA-CTL.None.model.ResNet.make_layer", "home.repos.pwc.inspect_result.whuchris_MIA-CTL.None.model.ResNet.make_layer", "home.repos.pwc.inspect_result.whuchris_MIA-CTL.None.model.ResNet.make_layer", "home.repos.pwc.inspect_result.whuchris_MIA-CTL.None.model.ResNet.make_layer"], ["    ", "def", "__init__", "(", "self", ",", "blocks", ",", "expansion", "=", "4", ",", "init", "=", "True", ",", "pre_train", "=", "True", ",", "feature_dim", "=", "128", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "expansion", "=", "expansion", "\n", "self", ".", "init", "=", "init", "\n", "self", ".", "pre_train", "=", "pre_train", "\n", "self", ".", "conv1", "=", "Conv1", "(", "in_planes", "=", "3", ",", "places", "=", "64", ")", "\n", "\n", "self", ".", "layer1", "=", "self", ".", "make_layer", "(", "in_places", "=", "64", ",", "places", "=", "64", ",", "block", "=", "blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "make_layer", "(", "in_places", "=", "256", ",", "places", "=", "128", ",", "block", "=", "blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "make_layer", "(", "in_places", "=", "512", ",", "places", "=", "256", ",", "block", "=", "blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "make_layer", "(", "in_places", "=", "1024", ",", "places", "=", "512", ",", "block", "=", "blocks", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "7", ",", "stride", "=", "1", ")", "\n", "\n", "#MLP layers", "\n", "self", ".", "g", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linearbi", "(", "2048", ",", "512", ",", "bias", "=", "False", ")", ",", "nn", ".", "BatchNorm1d", "(", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "nn", ".", "Linear", "(", "512", ",", "feature_dim", ",", "bias", "=", "True", ")", ")", "\n", "if", "self", ".", "init", "==", "True", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whuchris_MIA-CTL.None.model.ResNet.make_layer": [[94, 101], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "model.Bottleneck", "layers.append", "model.Bottleneck"], "methods", ["None"], ["", "", "", "", "def", "make_layer", "(", "self", ",", "in_places", ",", "places", ",", "block", ",", "stride", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "Bottleneck", "(", "in_places", ",", "places", ",", "stride", ",", "downsampling", "=", "True", ")", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "block", ")", ":", "\n", "            ", "layers", ".", "append", "(", "Bottleneck", "(", "places", "*", "self", ".", "expansion", ",", "places", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whuchris_MIA-CTL.None.model.ResNet.forward": [[103, 117], ["model.ResNet.conv1", "model.ResNet.layer1", "model.ResNet.layer2", "model.ResNet.layer3", "model.ResNet.layer4", "model.ResNet.avgpool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "model.ResNet.g", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "if", "self", ".", "pre_train", "==", "False", ":", "\n", "            ", "return", "x", "\n", "", "features", "=", "torch", ".", "flatten", "(", "x", ",", "start_dim", "=", "1", ")", "#shape = [B, 2048]", "\n", "x", "=", "self", ".", "g", "(", "features", ")", "#[B,128]", "\n", "return", "F", ".", "normalize", "(", "features", ",", "dim", "=", "-", "1", ")", ",", "F", ".", "normalize", "(", "x", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whuchris_MIA-CTL.None.model.VGG.__init__": [[119, 133], ["torch.Module.__init__", "model.VGG.make_layers", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "model.VGG.modules", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.whuchris_MIA-CTL.None.util.ImageProcessor.__init__", "home.repos.pwc.inspect_result.whuchris_MIA-CTL.None.model.VGG.make_layers"], ["    ", "def", "__init__", "(", "self", ",", "vgg_config", "=", "vgg_config", ",", "model", "=", "'VGG19'", ",", "init", "=", "True", ",", "class_num", "=", "5", ")", ":", "\n", "        ", "super", "(", "VGG", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "config", "=", "vgg_config", "\n", "self", ".", "skeleton", "=", "self", ".", "make_layers", "(", "config", "=", "model", ",", "init_channel", "=", "3", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "7", ",", "stride", "=", "1", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "512", ",", "class_num", ",", "bias", "=", "False", ")", "\n", "self", ".", "init", "=", "init", "\n", "if", "self", ".", "init", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whuchris_MIA-CTL.None.model.VGG.forward": [[134, 140], ["model.VGG.skeleton", "model.VGG.avgpool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "model.VGG.classifier"], "methods", ["None"], ["", "", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "skeleton", "(", "x", ")", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "feature", "=", "torch", ".", "flatten", "(", "x", ",", "start_dim", "=", "1", ")", "\n", "output", "=", "self", ".", "classifier", "(", "feature", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.whuchris_MIA-CTL.None.model.VGG.make_layers": [[141, 153], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "layers.append", "layers.append", "layers.append", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["", "def", "make_layers", "(", "self", ",", "config", ",", "init_channel", "=", "3", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "in_channel", "=", "init_channel", "\n", "for", "layer", "in", "self", ".", "config", "[", "config", "]", ":", "\n", "            ", "if", "layer", "==", "'P'", ":", "\n", "                ", "layers", ".", "append", "(", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ")", "\n", "", "else", ":", "\n", "                ", "layers", ".", "append", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_channel", ",", "out_channels", "=", "layer", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "layer", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "in_channel", "=", "layer", "\n", "", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whuchris_MIA-CTL.None.model.Efficientnet.__init__": [[155, 160], ["torch.Module.__init__", "efficientnet_pytorch.EfficientNet.from_pretrained", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.whuchris_MIA-CTL.None.util.ImageProcessor.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", "=", "'b7'", ",", "class_num", "=", "5", ")", ":", "\n", "        ", "super", "(", "Efficientnet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "skeleton", "=", "EfficientNet", ".", "from_pretrained", "(", "efficientnet_config", "[", "config", "]", ")", "\n", "feature", "=", "self", ".", "skeleton", ".", "_fc", ".", "in_features", "\n", "self", ".", "skeleton", ".", "_fc", "=", "nn", ".", "Linear", "(", "in_features", "=", "feature", ",", "out_features", "=", "class_num", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whuchris_MIA-CTL.None.model.Efficientnet.forward": [[161, 163], ["model.Efficientnet.skeleton"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "skeleton", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whuchris_MIA-CTL.None.model.Linear.__init__": [[165, 182], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "model.ResNet101", "os.path.join", "print", "model.Linear.load_state_dict", "model.ResNet50", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load"], "methods", ["home.repos.pwc.inspect_result.whuchris_MIA-CTL.None.util.ImageProcessor.__init__", "home.repos.pwc.inspect_result.whuchris_MIA-CTL.None.model.ResNet101", "home.repos.pwc.inspect_result.whuchris_MIA-CTL.None.model.ResNet50"], ["    ", "def", "__init__", "(", "self", ",", "model_name", ",", "num_class", "=", "5", ",", "init", "=", "False", ",", "pre_train", "=", "False", ",", "pre_load", "=", "True", ",", "pretrained_path", "=", "\"checkpoint\"", ")", ":", "\n", "        ", "super", "(", "Linear", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "model_name", "in", "[", "'resnet101'", ",", "'lbp_resnet101'", "]", ":", "\n", "            ", "self", ".", "net", "=", "ResNet101", "(", "init", "=", "init", ",", "pre_train", "=", "pre_train", ")", "\n", "", "elif", "model_name", "==", "'resnet50'", ":", "\n", "            ", "self", ".", "net", "=", "ResNet50", "(", "init", "=", "init", ",", "pre_train", "=", "pre_train", ")", "\n", "", "self", ".", "pre_load", "=", "pre_load", "\n", "if", "self", ".", "pre_load", ":", "\n", "            ", "assert", "pretrained_path", "in", "[", "'checkpoint.pth.tar'", ",", "'model_best.pth.tar'", "]", ",", "'invalid pretrained path %s'", "%", "(", "pretrained_path", ")", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "\"checkpoint\"", ",", "\"self_supervised\"", ",", "model_name", ",", "pretrained_path", ")", "\n", "print", "(", "\"Loading pre_trained model %s\"", "%", "(", "path", ")", ")", "\n", "self", ".", "load_state_dict", "(", "torch", ".", "load", "(", "path", ",", "map_location", "=", "'cpu'", ")", "[", "'state_dict'", "]", ",", "strict", "=", "False", ")", "\n", "# self.load_state_dict(", "\n", "#     {'net.'+ k : v for k, v in torch.load(path,map_location='cpu')['state_dict'].items()}", "\n", "# )", "\n", "", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "2048", ",", "num_class", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whuchris_MIA-CTL.None.model.Linear.forward": [[183, 188], ["model.Linear.net", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "model.Linear.fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "net", "(", "x", ")", "\n", "feature", "=", "torch", ".", "flatten", "(", "x", ",", "start_dim", "=", "1", ")", "\n", "out", "=", "self", ".", "fc", "(", "feature", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.whuchris_MIA-CTL.None.model.Conv1": [[26, 32], ["torch.Sequential", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU", "torch.MaxPool2d"], "function", ["None"], ["def", "Conv1", "(", "in_planes", ",", "places", ",", "stride", "=", "2", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_planes", ",", "out_channels", "=", "places", ",", "kernel_size", "=", "7", ",", "stride", "=", "stride", ",", "padding", "=", "3", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "places", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.whuchris_MIA-CTL.None.model.ResNet50": [[189, 191], ["model.ResNet"], "function", ["None"], ["", "", "def", "ResNet50", "(", "init", "=", "True", ",", "pre_train", "=", "True", ",", "feature_dim", "=", "128", ",", ")", ":", "\n", "    ", "return", "ResNet", "(", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "init", "=", "init", ",", "pre_train", "=", "pre_train", ",", "feature_dim", "=", "feature_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whuchris_MIA-CTL.None.model.ResNet101": [[192, 194], ["model.ResNet"], "function", ["None"], ["", "def", "ResNet101", "(", "init", "=", "True", ",", "pre_train", "=", "True", ",", "feature_dim", "=", "128", ")", ":", "\n", "    ", "return", "ResNet", "(", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "init", "=", "init", ",", "pre_train", "=", "pre_train", ",", "feature_dim", "=", "feature_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whuchris_MIA-CTL.None.model.ResNet152": [[195, 197], ["model.ResNet"], "function", ["None"], ["", "def", "ResNet152", "(", "init", "=", "True", ",", "pre_train", "=", "True", ",", "feature_dim", "=", "128", ")", ":", "\n", "    ", "return", "ResNet", "(", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "init", "=", "init", ",", "pre_train", "=", "pre_train", ",", "feature_dim", "=", "feature_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whuchris_MIA-CTL.None.model.VGG11": [[198, 200], ["model.VGG"], "function", ["None"], ["", "def", "VGG11", "(", "init", "=", "True", ",", "class_num", "=", "5", ")", ":", "\n", "    ", "return", "VGG", "(", "model", "=", "'VGG11'", ",", "init", "=", "init", ",", "class_num", "=", "class_num", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whuchris_MIA-CTL.None.model.VGG13": [[201, 203], ["model.VGG"], "function", ["None"], ["", "def", "VGG13", "(", "init", "=", "True", ",", "class_num", "=", "5", ")", ":", "\n", "    ", "return", "VGG", "(", "model", "=", "'VGG13'", ",", "init", "=", "init", ",", "class_num", "=", "class_num", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whuchris_MIA-CTL.None.model.VGG16": [[204, 206], ["model.VGG"], "function", ["None"], ["", "def", "VGG16", "(", "init", "=", "True", ",", "class_num", "=", "5", ")", ":", "\n", "    ", "return", "VGG", "(", "model", "=", "'VGG16'", ",", "init", "=", "init", ",", "class_num", "=", "class_num", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whuchris_MIA-CTL.None.model.VGG19": [[207, 209], ["model.VGG"], "function", ["None"], ["", "def", "VGG19", "(", "init", "=", "True", ",", "class_num", "=", "5", ")", ":", "\n", "    ", "return", "VGG", "(", "model", "=", "'VGG19'", ",", "init", "=", "init", ",", "class_num", "=", "class_num", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whuchris_MIA-CTL.None.model.EfficientB0": [[210, 212], ["model.Efficientnet"], "function", ["None"], ["", "def", "EfficientB0", "(", ")", ":", "\n", "    ", "return", "Efficientnet", "(", "'b0'", ",", "class_num", "=", "5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whuchris_MIA-CTL.None.model.EfficientB1": [[213, 215], ["model.Efficientnet"], "function", ["None"], ["", "def", "EfficientB1", "(", ")", ":", "\n", "    ", "return", "Efficientnet", "(", "'b1'", ",", "class_num", "=", "5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whuchris_MIA-CTL.None.model.EfficientB2": [[216, 218], ["model.Efficientnet"], "function", ["None"], ["", "def", "EfficientB2", "(", ")", ":", "\n", "    ", "return", "Efficientnet", "(", "'b2'", ",", "class_num", "=", "5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whuchris_MIA-CTL.None.model.EfficientB3": [[219, 221], ["model.Efficientnet"], "function", ["None"], ["", "def", "EfficientB3", "(", ")", ":", "\n", "    ", "return", "Efficientnet", "(", "'b3'", ",", "class_num", "=", "5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whuchris_MIA-CTL.None.model.EfficientB4": [[222, 224], ["model.Efficientnet"], "function", ["None"], ["", "def", "EfficientB4", "(", ")", ":", "\n", "    ", "return", "Efficientnet", "(", "'b4'", ",", "class_num", "=", "5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whuchris_MIA-CTL.None.model.EfficientB5": [[225, 227], ["model.Efficientnet"], "function", ["None"], ["", "def", "EfficientB5", "(", ")", ":", "\n", "    ", "return", "Efficientnet", "(", "'b5'", ",", "class_num", "=", "5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whuchris_MIA-CTL.None.model.EfficientB6": [[228, 230], ["model.Efficientnet"], "function", ["None"], ["", "def", "EfficientB6", "(", ")", ":", "\n", "    ", "return", "Efficientnet", "(", "'b6'", ",", "class_num", "=", "5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whuchris_MIA-CTL.None.model.EfficientB7": [[231, 233], ["model.Efficientnet"], "function", ["None"], ["", "def", "EfficientB7", "(", ")", ":", "\n", "    ", "return", "Efficientnet", "(", "'b7'", ",", "class_num", "=", "5", ")", "", "", ""]], "home.repos.pwc.inspect_result.whuchris_MIA-CTL.None.data_reader.MyDataSet.__init__": [[7, 16], ["data_reader.MyDataSet.__load_file", "util.ImageProcessor", "data_reader.MyDataSet.imgs.append", "data_reader.MyDataSet.labels.append", "int", "fileName.split", "fileName.split"], "methods", ["home.repos.pwc.inspect_result.whuchris_MIA-CTL.None.data_reader.MyDataSet.__load_file"], ["    ", "def", "__init__", "(", "self", ",", "folder_num", "=", "0", ",", "mode", "=", "'train'", ",", "normalization", "=", "True", ",", "augmentation", "=", "True", ",", "use_lbp", "=", "False", ")", ":", "\n", "        ", "assert", "(", "mode", "in", "[", "'ssl'", ",", "'train'", ",", "'test'", ",", "'val'", "]", ")", ",", "\"mode must be type in ['ssl','train','test','val']\"", "\n", "fileNames", "=", "self", ".", "__load_file", "(", "mode", "=", "mode", ",", "folder_num", "=", "folder_num", ")", "\n", "self", ".", "imgs", "=", "[", "]", "\n", "self", ".", "labels", "=", "[", "]", "\n", "self", ".", "img_processor", "=", "ImageProcessor", "(", "normalization", "=", "normalization", ",", "augmentation", "=", "augmentation", ",", "use_lbp", "=", "use_lbp", ")", "\n", "for", "fileName", "in", "fileNames", ":", "\n", "            ", "self", ".", "imgs", ".", "append", "(", "fileName", ".", "split", "(", "'\\t'", ")", "[", "0", "]", ")", "\n", "self", ".", "labels", ".", "append", "(", "int", "(", "fileName", ".", "split", "(", "'\\t'", ")", "[", "1", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whuchris_MIA-CTL.None.data_reader.MyDataSet.__getitem__": [[17, 23], ["skimage.io.imread", "data_reader.MyDataSet.img_processor"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "imgPath", "=", "self", ".", "imgs", "[", "index", "]", "\n", "label", "=", "self", ".", "labels", "[", "index", "]", "\n", "img", "=", "io", ".", "imread", "(", "imgPath", ")", "\n", "pos_1", ",", "pos_2", "=", "self", ".", "img_processor", "(", "img", ")", "\n", "return", "[", "pos_1", ",", "pos_2", ",", "label", ",", "imgPath", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.whuchris_MIA-CTL.None.data_reader.MyDataSet.__len__": [[24, 26], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "imgs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whuchris_MIA-CTL.None.data_reader.MyDataSet.__load_file": [[28, 42], ["os.path.join", "open", "file.readlines", "fileNames.append", "line.strip", "str"], "methods", ["None"], ["", "def", "__load_file", "(", "self", ",", "pre", "=", "\"data_folder\"", ",", "mode", "=", "'train'", ",", "folder_num", "=", "0", ")", ":", "\n", "        ", "if", "mode", "==", "'test'", ":", "\n", "            ", "mode", "+=", "'_folder.txt'", "\n", "", "elif", "mode", "==", "'ssl'", ":", "\n", "            ", "mode", "=", "'self_supervised_list_folder.txt'", "\n", "", "else", ":", "\n", "            ", "mode", "+=", "'_folder_'", "+", "str", "(", "folder_num", ")", "+", "'.txt'", "\n", "", "mode", "=", "os", ".", "path", ".", "join", "(", "pre", ",", "mode", ")", "\n", "fileNames", "=", "[", "]", "\n", "with", "open", "(", "mode", ",", "'r'", ")", "as", "file", ":", "\n", "            ", "lines", "=", "file", ".", "readlines", "(", ")", "\n", "for", "line", "in", "lines", ":", "\n", "                ", "fileNames", ".", "append", "(", "line", ".", "strip", "(", "(", "\"\\n\"", ")", ")", ")", "\n", "", "", "return", "fileNames", "\n", "\n"]], "home.repos.pwc.inspect_result.whuchris_MIA-CTL.None.util.DataUpdater.__init__": [[12, 14], ["util.DataUpdater.reset"], "methods", ["home.repos.pwc.inspect_result.whuchris_MIA-CTL.None.util.DataUpdater.reset"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whuchris_MIA-CTL.None.util.DataUpdater.reset": [[15, 20], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.whuchris_MIA-CTL.None.util.DataUpdater.update": [[21, 26], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.whuchris_MIA-CTL.None.util.Matrics.accuracy": [[29, 45], ["torch.no_grad", "max", "target.size", "output.topk", "pred.t.t.t", "pred.t.t.eq", "target.view().expand_as", "correct[].reshape().float().sum", "res.append", "correct[].reshape().float().sum.mul_", "target.view", "correct[].reshape().float", "correct[].reshape"], "methods", ["None"], ["    ", "def", "accuracy", "(", "self", ",", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "        ", "\"\"\"Computes the accuracy over the k top predictions for the specified values of k\"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "                ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "reshape", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ",", "keepdim", "=", "True", ")", "# Pytorch 1.7", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.whuchris_MIA-CTL.None.util.ImageProcessor.__init__": [[48, 52], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "normalization", "=", "True", ",", "augmentation", "=", "True", ",", "use_lbp", "=", "False", ")", ":", "\n", "        ", "self", ".", "normalization", "=", "normalization", "\n", "self", ".", "augmentation", "=", "augmentation", "\n", "self", ".", "use_lbp", "=", "use_lbp", "\n", "\n"]], "home.repos.pwc.inspect_result.whuchris_MIA-CTL.None.util.ImageProcessor.__normalization": [[53, 60], ["numpy.transpose", "sklearn.preprocessing.scale", "sklearn.preprocessing.scale", "sklearn.preprocessing.scale", "numpy.transpose"], "methods", ["None"], ["", "def", "__normalization", "(", "self", ",", "imgData", ")", ":", "\n", "        ", "imgData", "=", "np", ".", "transpose", "(", "imgData", ",", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "imgData", "[", "0", "]", "=", "preprocessing", ".", "scale", "(", "imgData", "[", "0", "]", ")", "\n", "imgData", "[", "1", "]", "=", "preprocessing", ".", "scale", "(", "imgData", "[", "1", "]", ")", "\n", "imgData", "[", "2", "]", "=", "preprocessing", ".", "scale", "(", "imgData", "[", "2", "]", ")", "\n", "imgData", "=", "np", ".", "transpose", "(", "imgData", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "return", "imgData", "\n", "\n"]], "home.repos.pwc.inspect_result.whuchris_MIA-CTL.None.util.ImageProcessor.__augmentation": [[61, 75], ["random.random", "numpy.transpose", "numpy.flip", "numpy.flip", "numpy.flip", "numpy.transpose", "random.random", "numpy.transpose", "numpy.flip", "numpy.flip", "numpy.flip", "numpy.transpose"], "methods", ["None"], ["", "def", "__augmentation", "(", "self", ",", "imgData", ",", "flip_left_right_pro", "=", "0.5", ",", "flip_up_buttom_pro", "=", "0.5", ")", ":", "\n", "        ", "if", "(", "random", ".", "random", "(", ")", "<", "flip_left_right_pro", ")", ":", "\n", "            ", "imgData", "=", "np", ".", "transpose", "(", "imgData", ",", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "imgData", "[", "0", "]", "=", "np", ".", "flip", "(", "imgData", "[", "0", "]", ",", "1", ")", "\n", "imgData", "[", "1", "]", "=", "np", ".", "flip", "(", "imgData", "[", "1", "]", ",", "1", ")", "\n", "imgData", "[", "2", "]", "=", "np", ".", "flip", "(", "imgData", "[", "2", "]", ",", "1", ")", "\n", "imgData", "=", "np", ".", "transpose", "(", "imgData", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "", "if", "(", "random", ".", "random", "(", ")", "<", "flip_up_buttom_pro", ")", ":", "\n", "            ", "imgData", "=", "np", ".", "transpose", "(", "imgData", ",", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "imgData", "[", "0", "]", "=", "np", ".", "flip", "(", "imgData", "[", "0", "]", ",", "0", ")", "\n", "imgData", "[", "1", "]", "=", "np", ".", "flip", "(", "imgData", "[", "1", "]", ",", "0", ")", "\n", "imgData", "[", "2", "]", "=", "np", ".", "flip", "(", "imgData", "[", "2", "]", ",", "0", ")", "\n", "imgData", "=", "np", ".", "transpose", "(", "imgData", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "", "return", "imgData", "\n", "\n"]], "home.repos.pwc.inspect_result.whuchris_MIA-CTL.None.util.ImageProcessor._normalize_lbp": [[76, 83], ["numpy.transpose", "numpy.transpose", "imgData[].max", "imgData[].min", "imgData[].max", "imgData[].min", "imgData[].max", "imgData[].min"], "methods", ["None"], ["", "def", "_normalize_lbp", "(", "self", ",", "imgData", ")", ":", "\n", "        ", "imgData", "=", "np", ".", "transpose", "(", "imgData", ",", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "imgData", "[", "0", "]", "=", "imgData", "[", "0", "]", "/", "(", "imgData", "[", "0", "]", ".", "max", "(", ")", "-", "imgData", "[", "0", "]", ".", "min", "(", ")", ")", "\n", "imgData", "[", "1", "]", "=", "imgData", "[", "1", "]", "/", "(", "imgData", "[", "1", "]", ".", "max", "(", ")", "-", "imgData", "[", "1", "]", ".", "min", "(", ")", ")", "\n", "imgData", "[", "2", "]", "=", "imgData", "[", "2", "]", "/", "(", "imgData", "[", "2", "]", ".", "max", "(", ")", "-", "imgData", "[", "2", "]", ".", "min", "(", ")", ")", "\n", "imgData", "=", "np", ".", "transpose", "(", "imgData", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "return", "imgData", "\n", "\n"]], "home.repos.pwc.inspect_result.whuchris_MIA-CTL.None.util.ImageProcessor.__call__": [[84, 103], ["util.ImageProcessor.copy", "util.ImageProcessor.copy", "numpy.transpose", "numpy.transpose", "skimage.feature.local_binary_pattern().astype", "skimage.transform.resize", "util.ImageProcessor._normalize_lbp", "skimage.transform.resize", "util.ImageProcessor.__normalization", "util.ImageProcessor.__augmentation", "util.ImageProcessor.__augmentation", "skimage.feature.local_binary_pattern"], "methods", ["home.repos.pwc.inspect_result.whuchris_MIA-CTL.None.util.ImageProcessor._normalize_lbp", "home.repos.pwc.inspect_result.whuchris_MIA-CTL.None.util.ImageProcessor.__normalization", "home.repos.pwc.inspect_result.whuchris_MIA-CTL.None.util.ImageProcessor.__augmentation", "home.repos.pwc.inspect_result.whuchris_MIA-CTL.None.util.ImageProcessor.__augmentation"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "imgData", "=", "None", "\n", "if", "self", ".", "use_lbp", ":", "\n", "            ", "img", "=", "feature", ".", "local_binary_pattern", "(", "img", ",", "P", "=", "24", ",", "R", "=", "3", ",", "method", "=", "'ror'", ")", ".", "astype", "(", "float", ")", "\n", "imgData", "=", "transform", ".", "resize", "(", "img", ",", "(", "224", ",", "224", ",", "3", ")", ",", "order", "=", "1", ",", "mode", "=", "'constant'", ",", "cval", "=", "0", ",", "clip", "=", "True", ",", "\n", "preserve_range", "=", "False", ",", "anti_aliasing", "=", "False", ",", "anti_aliasing_sigma", "=", "None", ")", "\n", "imgData", "=", "self", ".", "_normalize_lbp", "(", "imgData", ")", "\n", "", "if", "self", ".", "normalization", "and", "not", "self", ".", "use_lbp", ":", "\n", "            ", "imgData", "=", "transform", ".", "resize", "(", "img", ",", "(", "224", ",", "224", ",", "3", ")", ",", "order", "=", "1", ",", "mode", "=", "'constant'", ",", "cval", "=", "0", ",", "clip", "=", "True", ",", "\n", "preserve_range", "=", "False", ",", "anti_aliasing", "=", "False", ",", "anti_aliasing_sigma", "=", "None", ")", "\n", "imgData", "=", "self", ".", "__normalization", "(", "imgData", ")", "\n", "", "pos_1", "=", "imgData", ".", "copy", "(", ")", "\n", "pos_2", "=", "imgData", ".", "copy", "(", ")", "\n", "if", "self", ".", "augmentation", ":", "\n", "            ", "pos_1", "=", "self", ".", "__augmentation", "(", "pos_1", ")", "\n", "pos_2", "=", "self", ".", "__augmentation", "(", "pos_2", ")", "\n", "", "pos_1", "=", "np", ".", "transpose", "(", "pos_1", ",", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "pos_2", "=", "np", ".", "transpose", "(", "pos_2", ",", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "return", "pos_1", ",", "pos_2", "\n", "\n"]], "home.repos.pwc.inspect_result.whuchris_MIA-CTL.None.util.save_checkpoint_ssl": [[104, 109], ["os.path.join", "torch.save", "shutil.copyfile", "os.path.join"], "function", ["None"], ["", "", "def", "save_checkpoint_ssl", "(", "state", ",", "train_mode", ",", "model_name", ",", "is_best", ",", "filename", "=", "'checkpoint.pth.tar'", ")", ":", "\n", "    ", "filename", "=", "os", ".", "path", ".", "join", "(", "\"./checkpoint\"", ",", "train_mode", ",", "model_name", ",", "filename", ")", "\n", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "if", "is_best", ":", "\n", "        ", "shutil", ".", "copyfile", "(", "filename", ",", "os", ".", "path", ".", "join", "(", "\"./checkpoint\"", ",", "train_mode", ",", "model_name", ",", "'model_best.pth.tar'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whuchris_MIA-CTL.None.util.save_checkpoint": [[110, 115], ["os.path.join", "torch.save", "shutil.copyfile", "os.path.join", "str", "str"], "function", ["None"], ["", "", "def", "save_checkpoint", "(", "state", ",", "train_mode", ",", "model_name", ",", "is_best", ",", "filename", "=", "'checkpoint.pth.tar'", ",", "folder_num", "=", "0", ")", ":", "\n", "    ", "filename", "=", "os", ".", "path", ".", "join", "(", "\"./checkpoint\"", ",", "train_mode", ",", "model_name", ",", "str", "(", "folder_num", ")", "+", "\"_\"", "+", "filename", ")", "\n", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "if", "is_best", ":", "\n", "        ", "shutil", ".", "copyfile", "(", "filename", ",", "os", ".", "path", ".", "join", "(", "\"./checkpoint\"", ",", "train_mode", ",", "model_name", ",", "str", "(", "folder_num", ")", "+", "'_model_best.pth.tar'", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.whuchris_MIA-CTL.None.create_list.generate_datatxt": [[4, 24], ["os.walk", "open", "f.write", "png_files.append", "[].split", "file.split", "os.path.join", "file.split"], "function", ["None"], ["def", "generate_datatxt", "(", "data_dir", "=", "r\"./dataset/\"", ")", ":", "\n", "    ", "'''\n    Read from the dataset and make file directory\n    :param data_dir: the whole dataset directory\n    :return: result in a 'data.txt' file\n    '''", "\n", "png_files", "=", "[", "]", "\n", "for", "root", ",", "dirs", ",", "files", "in", "os", ".", "walk", "(", "data_dir", ")", ":", "\n", "        ", "for", "file", "in", "files", ":", "\n", "            ", "if", "file", ":", "\n", "                ", "png_files", ".", "append", "(", "os", ".", "path", ".", "join", "(", "root", ",", "file", ")", ")", "\n", "", "", "break", "\n", "", "with", "open", "(", "r\"./data_folder/data.txt\"", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "for", "file", "in", "png_files", ":", "\n", "# modify the following code if neccesary", "\n", "# Our origin dataset file format are like:", "\n", "# ./dataset/0_info1_info2_patientname_info3.png", "\n", "            ", "label", "=", "file", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "split", "(", "'_'", ")", "[", "0", "]", "\n", "name", "=", "file", ".", "split", "(", "'_'", ")", "[", "3", "]", "\n", "f", ".", "write", "(", "file", "+", "'\\t'", "+", "label", "+", "'\\t'", "+", "name", "+", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whuchris_MIA-CTL.None.create_list.split_ssl_and_sl": [[25, 92], ["file.close", "print", "print", "print", "print", "print", "range", "range", "open", "open", "file.close", "open.close", "open.close", "open", "file.readline", "len", "len", "len", "len", "len", "random.shuffle", "open", "file.readline", "range", "range", "lists[].append", "file.readline", "range", "range", "create_list..append", "supervised_patient_lists[].append", "file.readline", "file.readline.split", "file.readline.split", "[].split", "patient_lists[].append", "int", "int", "file.readline.split", "file.readline.split", "[].split", "open.write", "open.write", "len", "len", "file.readline.split", "file.readline.split"], "function", ["None"], ["", "", "", "def", "split_ssl_and_sl", "(", "ssl_rate", "=", "0.2", ",", "whole_file", "=", "r\"./data_folder/data.txt\"", ")", ":", "\n", "\n", "    ", "'''\n    Divide the whole datasets into self-supervised sub-dataset and supervised sub-dataset.\n\n    :param ssl_rate: the rate of self-supervised sub-dataset.\n    :param whole_file: directory of whole dataset text file.\n    :return: no things returned. Result in two text files.\n\n    '''", "\n", "\n", "dict", "=", "{", "'0'", ":", "0", ",", "'1'", ":", "1", ",", "'2'", ":", "2", ",", "'3'", ":", "3", ",", "'4'", ":", "4", "}", "\n", "lists", "=", "[", "[", "]", "for", "i", "in", "range", "(", "5", ")", "]", "\n", "patient_lists", "=", "[", "[", "]", "for", "i", "in", "range", "(", "5", ")", "]", "\n", "with", "open", "(", "whole_file", ",", "'r'", ")", "as", "file", ":", "\n", "        ", "line", "=", "file", ".", "readline", "(", ")", "\n", "while", "line", ":", "\n", "            ", "file_name", "=", "line", ".", "split", "(", "'\\t'", ")", "[", "0", "]", "\n", "tmp_class_name", "=", "line", ".", "split", "(", "'\\t'", ")", "[", "1", "]", "\n", "tmp_patient_id", "=", "line", ".", "split", "(", "'\\t'", ")", "[", "2", "]", ".", "split", "(", "'\\n'", ")", "[", "0", "]", "\n", "# print(file_name)", "\n", "# print(tmp_patient_id+'\\t'+tmp_class_name)", "\n", "lists", "[", "dict", "[", "tmp_class_name", "]", "]", ".", "append", "(", "file_name", ")", "\n", "if", "tmp_patient_id", "not", "in", "patient_lists", "[", "dict", "[", "tmp_class_name", "]", "]", ":", "\n", "                ", "patient_lists", "[", "dict", "[", "tmp_class_name", "]", "]", ".", "append", "(", "tmp_patient_id", ")", "\n", "", "line", "=", "file", ".", "readline", "(", ")", "\n", "", "", "file", ".", "close", "(", ")", "\n", "print", "(", "len", "(", "patient_lists", "[", "0", "]", ")", ")", "\n", "print", "(", "len", "(", "patient_lists", "[", "1", "]", ")", ")", "\n", "print", "(", "len", "(", "patient_lists", "[", "2", "]", ")", ")", "\n", "print", "(", "len", "(", "patient_lists", "[", "3", "]", ")", ")", "\n", "print", "(", "len", "(", "patient_lists", "[", "4", "]", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "        ", "random", ".", "shuffle", "(", "patient_lists", "[", "i", "]", ")", "\n", "\n", "", "self_supervised_patient_lists", "=", "[", "[", "]", "for", "i", "in", "range", "(", "5", ")", "]", "\n", "supervised_patient_lists", "=", "[", "[", "]", "for", "i", "in", "range", "(", "5", ")", "]", "\n", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "        ", "tmp_ssl", "=", "patient_lists", "[", "i", "]", "[", "0", ":", "int", "(", "ssl_rate", "*", "len", "(", "patient_lists", "[", "i", "]", ")", ")", "]", "\n", "tmp_sl", "=", "patient_lists", "[", "i", "]", "[", "int", "(", "ssl_rate", "*", "len", "(", "patient_lists", "[", "i", "]", ")", ")", ":", "]", "\n", "for", "train_item", "in", "tmp_ssl", ":", "\n", "            ", "self_supervised_patient_lists", "[", "i", "]", ".", "append", "(", "train_item", ")", "\n", "", "for", "test_item", "in", "tmp_sl", ":", "\n", "            ", "supervised_patient_lists", "[", "i", "]", ".", "append", "(", "test_item", ")", "\n", "# print(len(train_patient_lists),len(test_patient_lists))", "\n", "# print(train_patient_lists)", "\n", "# print(test_patient_lists)", "\n", "\n", "", "", "ssl_list_file", "=", "open", "(", "r\"./data_folder/self_supervised_list_folder.txt\"", ",", "'w'", ")", "\n", "sl_list_file", "=", "open", "(", "r\"./data_folder/supervised_folder.txt\"", ",", "'w'", ")", "\n", "\n", "with", "open", "(", "whole_file", ",", "'r'", ")", "as", "file", ":", "\n", "        ", "line", "=", "file", ".", "readline", "(", ")", "\n", "while", "line", ":", "\n", "            ", "file_name", "=", "line", ".", "split", "(", "'\\t'", ")", "[", "0", "]", "\n", "tmp_class_name", "=", "line", ".", "split", "(", "'\\t'", ")", "[", "1", "]", "\n", "tmp_patient_id", "=", "line", ".", "split", "(", "'\\t'", ")", "[", "2", "]", ".", "split", "(", "'\\n'", ")", "[", "0", "]", "\n", "tmp_class", "=", "dict", "[", "tmp_class_name", "]", "\n", "if", "tmp_patient_id", "in", "self_supervised_patient_lists", "[", "tmp_class", "]", ":", "\n", "                ", "ssl_list_file", ".", "write", "(", "file_name", "+", "'\\t'", "+", "tmp_class_name", "+", "'\\t'", "+", "tmp_patient_id", "+", "'\\n'", ")", "\n", "", "elif", "tmp_patient_id", "in", "supervised_patient_lists", "[", "tmp_class", "]", ":", "\n", "                ", "sl_list_file", ".", "write", "(", "file_name", "+", "'\\t'", "+", "tmp_class_name", "+", "'\\t'", "+", "tmp_patient_id", "+", "'\\n'", ")", "\n", "", "line", "=", "file", ".", "readline", "(", ")", "\n", "", "", "file", ".", "close", "(", ")", "\n", "ssl_list_file", ".", "close", "(", ")", "\n", "ssl_list_file", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whuchris_MIA-CTL.None.create_list.generate_folder": [[93, 157], ["file.close", "range", "range", "open", "file.readline", "random.shuffle", "range", "open", "open", "file.close", "range", "range", "lists[].append", "file.readline", "open", "file.readline", "file.readline.split", "file.readline.split", "[].split", "patient_lists[].append", "range", "range", "train_patient_lists[].append", "test_patient_lists[].append", "file.readline", "int", "int", "str", "str", "file.readline.split", "file.readline.split", "[].split", "open.write", "int", "int", "open.write", "file.readline.split", "len", "len", "len", "len", "file.readline.split"], "function", ["None"], ["", "def", "generate_folder", "(", "folder_num", "=", "10", ",", "whole_file", "=", "r\"./data_folder/supervised_folder.txt\"", ")", ":", "\n", "\n", "    ", "'''\n    Generate 10 folders used to perform 10-fold cross validation experiment.\n\n    :param folder_num: num of folder(can be 3,5 or 10)\n    :param whole_file: directory of whole dataset text file.\n    :return: resulting in 10 [train/val]_folder_i.txts.\n    '''", "\n", "\n", "dict", "=", "{", "'0'", ":", "0", ",", "'1'", ":", "1", ",", "'2'", ":", "2", ",", "'3'", ":", "3", ",", "'4'", ":", "4", "}", "\n", "lists", "=", "[", "[", "]", "for", "i", "in", "range", "(", "5", ")", "]", "\n", "patient_lists", "=", "[", "[", "]", "for", "i", "in", "range", "(", "5", ")", "]", "\n", "with", "open", "(", "whole_file", ",", "'r'", ")", "as", "file", ":", "\n", "        ", "line", "=", "file", ".", "readline", "(", ")", "\n", "while", "line", ":", "\n", "            ", "file_name", "=", "line", ".", "split", "(", "'\\t'", ")", "[", "0", "]", "\n", "tmp_class_name", "=", "line", ".", "split", "(", "'\\t'", ")", "[", "1", "]", "\n", "tmp_patient_id", "=", "line", ".", "split", "(", "'\\t'", ")", "[", "2", "]", ".", "split", "(", "'\\n'", ")", "[", "0", "]", "\n", "# print(file_name)", "\n", "# print(tmp_patient_id+'\\t'+tmp_class_name)", "\n", "lists", "[", "dict", "[", "tmp_class_name", "]", "]", ".", "append", "(", "file_name", ")", "\n", "if", "tmp_patient_id", "not", "in", "patient_lists", "[", "dict", "[", "tmp_class_name", "]", "]", ":", "\n", "                ", "patient_lists", "[", "dict", "[", "tmp_class_name", "]", "]", ".", "append", "(", "tmp_patient_id", ")", "\n", "", "line", "=", "file", ".", "readline", "(", ")", "\n", "", "", "file", ".", "close", "(", ")", "\n", "# print(len(patient_lists[0]))", "\n", "# print(len(patient_lists[1]))", "\n", "# print(len(patient_lists[2]))", "\n", "# print(len(patient_lists[3]))", "\n", "# print(len(patient_lists[4]))", "\n", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "        ", "random", ".", "shuffle", "(", "patient_lists", "[", "i", "]", ")", "\n", "\n", "", "for", "folder", "in", "range", "(", "folder_num", ")", ":", "\n", "        ", "train_patient_lists", "=", "[", "[", "]", "for", "i", "in", "range", "(", "5", ")", "]", "\n", "test_patient_lists", "=", "[", "[", "]", "for", "i", "in", "range", "(", "5", ")", "]", "\n", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "            ", "tmp_train", "=", "patient_lists", "[", "i", "]", "[", ":", "int", "(", "folder", "/", "folder_num", "*", "len", "(", "patient_lists", "[", "i", "]", ")", ")", "]", "+", "patient_lists", "[", "i", "]", "[", "int", "(", "(", "folder", "+", "1", ")", "/", "folder_num", "*", "len", "(", "patient_lists", "[", "i", "]", ")", ")", ":", "]", "\n", "tmp_test", "=", "patient_lists", "[", "i", "]", "[", "int", "(", "folder", "/", "folder_num", "*", "len", "(", "patient_lists", "[", "i", "]", ")", ")", ":", "int", "(", "(", "folder", "+", "1", ")", "/", "folder_num", "*", "len", "(", "patient_lists", "[", "i", "]", ")", ")", "]", "\n", "for", "train_item", "in", "tmp_train", ":", "\n", "                ", "train_patient_lists", "[", "i", "]", ".", "append", "(", "train_item", ")", "\n", "", "for", "test_item", "in", "tmp_test", ":", "\n", "                ", "test_patient_lists", "[", "i", "]", ".", "append", "(", "test_item", ")", "\n", "# print(len(train_patient_lists),len(test_patient_lists))", "\n", "# print(train_patient_lists)", "\n", "# print(test_patient_lists)", "\n", "\n", "", "", "train_list_file", "=", "open", "(", "r\"./data_folder/train_folder_\"", "+", "str", "(", "folder", ")", "+", "\".txt\"", ",", "'w'", ")", "\n", "test_list_file", "=", "open", "(", "r\"./data_folder/val_folder_\"", "+", "str", "(", "folder", ")", "+", "\".txt\"", ",", "'w'", ")", "\n", "\n", "with", "open", "(", "whole_file", ",", "'r'", ")", "as", "file", ":", "\n", "            ", "line", "=", "file", ".", "readline", "(", ")", "\n", "while", "line", ":", "\n", "                ", "file_name", "=", "line", ".", "split", "(", "'\\t'", ")", "[", "0", "]", "\n", "tmp_class_name", "=", "line", ".", "split", "(", "'\\t'", ")", "[", "1", "]", "\n", "tmp_patient_id", "=", "line", ".", "split", "(", "'\\t'", ")", "[", "2", "]", ".", "split", "(", "'\\n'", ")", "[", "0", "]", "\n", "tmp_class", "=", "dict", "[", "tmp_class_name", "]", "\n", "if", "tmp_patient_id", "in", "train_patient_lists", "[", "tmp_class", "]", ":", "\n", "                    ", "train_list_file", ".", "write", "(", "file_name", "+", "'\\t'", "+", "tmp_class_name", "+", "'\\n'", ")", "\n", "", "elif", "tmp_patient_id", "in", "test_patient_lists", "[", "tmp_class", "]", ":", "\n", "                    ", "test_list_file", ".", "write", "(", "file_name", "+", "'\\t'", "+", "tmp_class_name", "+", "'\\n'", ")", "\n", "", "line", "=", "file", ".", "readline", "(", ")", "\n", "", "", "file", ".", "close", "(", ")", "\n", "\n"]]}