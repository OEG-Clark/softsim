{"home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.afterprocess.afterprocesser.__init__": [[9, 11], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "self", ".", "config", "=", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.afterprocess.afterprocesser.is_unk": [[12, 14], ["None"], "methods", ["None"], ["", "def", "is_unk", "(", "self", ",", "s", ")", ":", "\n", "        ", "return", "s", "==", "'<UNK>'", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.afterprocess.afterprocesser.is_dollar": [[15, 17], ["s.startswith"], "methods", ["None"], ["", "def", "is_dollar", "(", "self", ",", "s", ")", ":", "\n", "        ", "return", "s", ".", "startswith", "(", "'$'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.afterprocess.afterprocesser.is_eol": [[18, 20], ["None"], "methods", ["None"], ["", "def", "is_eol", "(", "self", ",", "s", ")", ":", "\n", "        ", "return", "s", "==", "'</S>'", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.afterprocess.afterprocesser.process_sent": [[21, 67], ["zip", "numpy.argmax", "afterprocess.afterprocesser.is_unk", "afterprocess.afterprocesser.is_dollar", "replaced.append", "replaced_cut.append", "len", "replaced.append", "replaced.append", "replaced_cut.append", "afterprocess.afterprocesser.is_eol", "replaced.append", "replaced_cut.append", "replaced.append", "replaced_cut.append", "len", "replaced.append", "replaced.append", "replaced_cut.append", "replaced.append", "replaced.append", "replaced_cut.append", "replaced.append", "replaced_cut.append", "replaced.append", "src[].strip", "src[].strip"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.afterprocess.afterprocesser.is_unk", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.afterprocess.afterprocesser.is_dollar", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.afterprocess.afterprocesser.is_eol"], ["", "def", "process_sent", "(", "self", ",", "src", ",", "sent", ",", "weights", ",", "\n", "trans_table", ",", "repl_table", ",", "att_table", ")", ":", "\n", "        ", "replaced", "=", "[", "]", "\n", "replaced_cut", "=", "[", "]", "\n", "for", "word", ",", "ws", "in", "zip", "(", "sent", ",", "weights", ")", ":", "\n", "            ", "att", "=", "np", ".", "argmax", "(", "ws", ")", "\n", "if", "self", ".", "is_unk", "(", "word", ")", ":", "\n", "                ", "if", "att", "in", "repl_table", ":", "\n", "                    ", "mark", ",", "repl", "=", "repl_table", "[", "att", "]", "\n", "replaced", ".", "append", "(", "repl", ")", "\n", "replaced_cut", ".", "append", "(", "repl", ")", "\n", "", "elif", "att", "<", "len", "(", "src", ")", ":", "\n", "                    ", "if", "src", "[", "att", "]", "in", "trans_table", ":", "\n", "                        ", "repl", ",", "freq", "=", "trans_table", "[", "src", "[", "att", "]", "]", "[", "0", "]", "\n", "replaced", ".", "append", "(", "repl", ")", "\n", "replaced_cut", ".", "append", "(", "repl", ")", "\n", "", "elif", "src", "[", "att", "]", "in", "att_table", ":", "\n", "                        ", "repl", ",", "freq", "=", "att_table", "[", "src", "[", "att", "]", "]", "[", "0", "]", "\n", "replaced", ".", "append", "(", "repl", ")", "\n", "replaced_cut", ".", "append", "(", "repl", ")", "\n", "", "else", ":", "\n", "                        ", "replaced", ".", "append", "(", "'$'", "+", "src", "[", "att", "]", ".", "strip", "(", ")", ")", "\n", "", "", "else", ":", "\n", "                    ", "replaced", ".", "append", "(", "word", ")", "\n", "", "", "elif", "self", ".", "is_dollar", "(", "word", ")", ":", "\n", "                ", "if", "att", "in", "repl_table", ":", "\n", "                    ", "mark", ",", "repl", "=", "repl_table", "[", "att", "]", "\n", "replaced", ".", "append", "(", "repl", ")", "\n", "replaced_cut", ".", "append", "(", "repl", ")", "\n", "", "elif", "att", "<", "len", "(", "src", ")", ":", "\n", "                    ", "if", "src", "[", "att", "]", "in", "trans_table", ":", "\n", "                        ", "repl", ",", "freq", "=", "trans_table", "[", "src", "[", "att", "]", "]", "[", "0", "]", "\n", "replaced", ".", "append", "(", "repl", ")", "\n", "replaced_cut", ".", "append", "(", "repl", ")", "\n", "", "elif", "src", "[", "att", "]", "in", "att_table", ":", "\n", "                        ", "repl", ",", "freq", "=", "att_table", "[", "src", "[", "att", "]", "]", "[", "0", "]", "\n", "replaced", ".", "append", "(", "repl", ")", "\n", "replaced_cut", ".", "append", "(", "repl", ")", "\n", "", "else", ":", "\n", "                        ", "replaced", ".", "append", "(", "'$'", "+", "src", "[", "att", "]", ".", "strip", "(", ")", ")", "\n", "", "", "else", ":", "\n", "                    ", "replaced", ".", "append", "(", "word", ")", "\n", "", "", "elif", "not", "self", ".", "is_eol", "(", "word", ")", ":", "\n", "                ", "replaced", ".", "append", "(", "word", ")", "\n", "replaced_cut", ".", "append", "(", "word", ")", "\n", "", "", "return", "replaced", ",", "replaced_cut", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.afterprocess.afterprocesser.main": [[69, 110], ["open().readlines", "open().readlines", "open", "open", "cPickle.load", "cPickle.load", "cPickle.load", "dict", "enumerate", "cPickle.dump", "open", "open", "open", "zip", "sent.strip().split.strip().split.strip().split", "source.strip().split.strip().split.strip().split", "afterprocess.afterprocesser.process_sent", "all_replaced.append", "open.write", "open", "open", "sent.strip().split.strip().split.strip", "source.strip().split.strip().split.strip"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.checkpoint.CheckpointNMT.dump", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.afterprocess.afterprocesser.process_sent"], ["", "def", "main", "(", "self", ")", ":", "\n", "        ", "val_set", "=", "self", ".", "config", "[", "'val_set_source'", "]", "\n", "source_file", "=", "open", "(", "val_set", ",", "'r'", ")", ".", "readlines", "(", ")", "\n", "original_file", "=", "open", "(", "self", ".", "config", "[", "'val_output_orig'", "]", ",", "'r'", ")", ".", "readlines", "(", ")", "\n", "replaced_file", "=", "open", "(", "self", ".", "config", "[", "'val_output_repl'", "]", ",", "'wb'", ")", "\n", "replaced_pkl", "=", "open", "(", "self", ".", "config", "[", "'val_output_repl'", "]", "+", "'.pkl'", ",", "'wb'", ")", "\n", "weights", "=", "cPickle", ".", "load", "(", "open", "(", "self", ".", "config", "[", "'attention_weights'", "]", ",", "'rb'", ")", ")", "\n", "translation_table", "=", "cPickle", ".", "load", "(", "open", "(", "self", ".", "config", "[", "'translation_table'", "]", ",", "'rb'", ")", ")", "\n", "replacement_table", "=", "cPickle", ".", "load", "(", "open", "(", "self", ".", "config", "[", "'replacement_table'", "]", ",", "'rb'", ")", ")", "\n", "\n", "att_table", "=", "dict", "(", ")", "\n", "'''\n        for mat, src, trg in zip(weights, source_file, original_file):\n            src = src.split()\n            trg = trg.split()\n            for line, word in zip(mat.T, src):\n                line = line / line.sum()\n                i = line.argmax()\n                if self.is_unk(trg[i]) or self.is_dollar(trg[i]) or self.is_eol(trg[i]):\n                    continue\n                if word not in att_table:\n                    att_table[word] = dict()\n                if trg[i] not in att_table[word]:\n                    att_table[word][trg[i]] = 0\n                att_table[word][trg[i]] += 1\n        for key, value in att_table.items():\n            value = sorted(value.items(), key=operator.itemgetter(1), reverse=True)\n            att_table[key] = value\n        '''", "\n", "\n", "all_replaced", "=", "[", "]", "\n", "for", "i", ",", "(", "source", ",", "sent", ",", "weight", ",", "repl", ")", "in", "enumerate", "(", "zip", "(", "\n", "source_file", ",", "original_file", ",", "weights", ",", "replacement_table", ")", ")", ":", "\n", "            ", "sent", "=", "sent", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "\n", "source", "=", "source", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "\n", "replaced", ",", "replaced_cut", "=", "self", ".", "process_sent", "(", "source", ",", "sent", ",", "weight", ",", "\n", "translation_table", ",", "repl", ",", "\n", "att_table", ")", "\n", "all_replaced", ".", "append", "(", "replaced", ")", "\n", "replaced_file", ".", "write", "(", "' '", ".", "join", "(", "replaced_cut", ")", "+", "'\\n'", ")", "\n", "", "cPickle", ".", "dump", "(", "all_replaced", ",", "replaced_pkl", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.GRU.GRU.__init__": [[15, 35], ["blocks.bricks.base.lazy", "blocks.bricks.recurrent.BaseRecurrent.__init__", "blocks.bricks.MLP", "blocks.bricks.Tanh", "blocks.bricks.Logistic", "blocks.bricks.Tanh"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.sampling.ModelInfo.__init__"], ["    ", "@", "lazy", "(", "allocation", "=", "[", "'dim'", "]", ")", "\n", "def", "__init__", "(", "self", ",", "dim", ",", "attended_dim", ",", "\n", "activation", "=", "None", ",", "gate_activation", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "GRU", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "attended_dim", "=", "attended_dim", "\n", "\n", "if", "not", "activation", ":", "\n", "            ", "activation", "=", "Tanh", "(", ")", "\n", "", "if", "not", "gate_activation", ":", "\n", "            ", "gate_activation", "=", "Logistic", "(", ")", "\n", "", "self", ".", "activation", "=", "activation", "\n", "self", ".", "gate_activation", "=", "gate_activation", "\n", "\n", "self", ".", "initial_transformer", "=", "MLP", "(", "activations", "=", "[", "Tanh", "(", ")", "]", ",", "\n", "dims", "=", "[", "attended_dim", ",", "self", ".", "dim", "]", ",", "\n", "name", "=", "'state_initializer'", ")", "\n", "\n", "self", ".", "children", "=", "[", "activation", ",", "gate_activation", ",", "self", ".", "initial_transformer", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.GRU.GRU.state_to_state": [[36, 39], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "state_to_state", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "parameters", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.GRU.GRU.state_to_gates": [[40, 43], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "state_to_gates", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "parameters", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.GRU.GRU.get_dim": [[44, 52], ["super().get_dim"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.AttentionRecurrent.get_dim"], ["", "def", "get_dim", "(", "self", ",", "name", ")", ":", "\n", "        ", "if", "name", "==", "'mask'", ":", "\n", "            ", "return", "0", "\n", "", "if", "name", "in", "[", "'inputs'", ",", "'states'", "]", ":", "\n", "            ", "return", "self", ".", "dim", "\n", "", "if", "name", "==", "'gate_inputs'", ":", "\n", "            ", "return", "2", "*", "self", ".", "dim", "\n", "", "return", "super", "(", "GRU", ",", "self", ")", ".", "get_dim", "(", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.GRU.GRU._allocate": [[53, 73], ["GRU.GRU.parameters.append", "GRU.GRU.parameters.append", "range", "blocks.utils.shared_floatx_nans", "blocks.utils.shared_floatx_nans", "blocks.roles.add_role"], "methods", ["None"], ["", "def", "_allocate", "(", "self", ")", ":", "\n", "        ", "'''\n        self.parameters.append(shared_floatx_nans((self.dim, self.dim),\n                               name='state_to_state'))\n        self.parameters.append(shared_floatx_nans((self.dim, 2 * self.dim),\n                               name='state_to_gates'))\n        self.parameters.append(shared_floatx_zeros((self.dim,),\n                               name=\"initial_state\"))\n        for i in range(2):\n            if self.parameters[i]:\n                add_role(self.parameters[i], WEIGHT)\n        add_role(self.parameters[2], INITIAL_STATE)\n        '''", "\n", "self", ".", "parameters", ".", "append", "(", "shared_floatx_nans", "(", "(", "self", ".", "dim", ",", "self", ".", "dim", ")", ",", "\n", "name", "=", "'state_to_state'", ")", ")", "\n", "self", ".", "parameters", ".", "append", "(", "shared_floatx_nans", "(", "(", "self", ".", "dim", ",", "2", "*", "self", ".", "dim", ")", ",", "\n", "name", "=", "'state_to_gates'", ")", ")", "\n", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "            ", "if", "self", ".", "parameters", "[", "i", "]", ":", "\n", "                ", "add_role", "(", "self", ".", "parameters", "[", "i", "]", ",", "WEIGHT", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.GRU.GRU._initialize": [[74, 82], ["GRU.GRU.weights_init.initialize", "GRU.GRU.weights_init.generate", "GRU.GRU.weights_init.generate", "GRU.GRU.state_to_gates.set_value", "numpy.hstack"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.model_with_l.Decoder.generate", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.model_with_l.Decoder.generate"], ["", "", "", "def", "_initialize", "(", "self", ")", ":", "\n", "        ", "self", ".", "weights_init", ".", "initialize", "(", "self", ".", "state_to_state", ",", "self", ".", "rng", ")", "\n", "state_to_update", "=", "self", ".", "weights_init", ".", "generate", "(", "\n", "self", ".", "rng", ",", "(", "self", ".", "dim", ",", "self", ".", "dim", ")", ")", "\n", "state_to_reset", "=", "self", ".", "weights_init", ".", "generate", "(", "\n", "self", ".", "rng", ",", "(", "self", ".", "dim", ",", "self", ".", "dim", ")", ")", "\n", "self", ".", "state_to_gates", ".", "set_value", "(", "\n", "numpy", ".", "hstack", "(", "[", "state_to_update", ",", "state_to_reset", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.GRU.GRU.apply": [[83, 122], ["blocks.bricks.recurrent.recurrent", "GRU.GRU.gate_activation.apply", "GRU.GRU.activation.apply", "states.dot", "states_reset.dot"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.match_functions.GeneralMatchFunction.apply", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.match_functions.GeneralMatchFunction.apply"], ["", "@", "recurrent", "(", "sequences", "=", "[", "'mask'", ",", "'inputs'", ",", "'gate_inputs'", "]", ",", "\n", "states", "=", "[", "'states'", "]", ",", "outputs", "=", "[", "'states'", "]", ",", "contexts", "=", "[", "]", ")", "\n", "def", "apply", "(", "self", ",", "inputs", ",", "gate_inputs", ",", "states", ",", "mask", "=", "None", ")", ":", "\n", "        ", "\"\"\"Apply the gated recurrent transition.\n\n        Parameters\n        ----------\n        states : :class:`~tensor.TensorVariable`\n            The 2 dimensional matrix of current states in the shape\n            (batch_size, dim). Required for `one_step` usage.\n        inputs : :class:`~tensor.TensorVariable`\n            The 2 dimensional matrix of inputs in the shape (batch_size,\n            dim)\n        gate_inputs : :class:`~tensor.TensorVariable`\n            The 2 dimensional matrix of inputs to the gates in the\n            shape (batch_size, 2 * dim).\n        mask : :class:`~tensor.TensorVariable`\n            A 1D binary array in the shape (batch,) which is 1 if there is\n            data available, 0 if not. Assumed to be 1-s only if not given.\n\n        Returns\n        -------\n        output : :class:`~tensor.TensorVariable`\n            Next states of the network.\n\n        \"\"\"", "\n", "gate_values", "=", "self", ".", "gate_activation", ".", "apply", "(", "\n", "states", ".", "dot", "(", "self", ".", "state_to_gates", ")", "+", "gate_inputs", ")", "\n", "update_values", "=", "gate_values", "[", ":", ",", ":", "self", ".", "dim", "]", "\n", "reset_values", "=", "gate_values", "[", ":", ",", "self", ".", "dim", ":", "]", "\n", "states_reset", "=", "states", "*", "reset_values", "\n", "next_states", "=", "self", ".", "activation", ".", "apply", "(", "\n", "states_reset", ".", "dot", "(", "self", ".", "state_to_state", ")", "+", "inputs", ")", "\n", "next_states", "=", "(", "next_states", "*", "update_values", "+", "\n", "states", "*", "(", "1", "-", "update_values", ")", ")", "\n", "if", "mask", ":", "\n", "            ", "next_states", "=", "(", "mask", "[", ":", ",", "None", "]", "*", "next_states", "+", "\n", "(", "1", "-", "mask", "[", ":", ",", "None", "]", ")", "*", "states", ")", "\n", "", "return", "next_states", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.GRU.GRU.initial_states": [[123, 132], ["blocks.bricks.base.application", "GRU.GRU.initial_transformer.apply"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.match_functions.GeneralMatchFunction.apply"], ["", "@", "application", "(", "outputs", "=", "apply", ".", "states", ")", "\n", "def", "initial_states", "(", "self", ",", "batch_size", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "'''\n        return [tensor.repeat(self.parameters[2][None, :], batch_size, 0)]\n        '''", "\n", "attended", "=", "kwargs", "[", "'attended_list'", "]", "\n", "initial_state", "=", "self", ".", "initial_transformer", ".", "apply", "(", "\n", "attended", "[", "0", ",", "0", ",", ":", ",", "-", "self", ".", "attended_dim", ":", "]", ")", "\n", "return", "initial_state", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.SequenceGenerator.SequenceGenerator.__init__": [[43, 70], ["kwargs.setdefault", "blocks.bricks.sequence_generators.BaseSequenceGenerator.__init__", "blocks.bricks.parallel.Fork", "attention_with_l.AttentionRecurrent_withL", "fake_attention_recurrent.FakeAttentionRecurrent"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.sampling.ModelInfo.__init__"], ["def", "__init__", "(", "self", ",", "representation_dim", ",", "readout", ",", "transition", ",", "context_transition", ",", "attention", "=", "None", ",", "\n", "use_step_decay_cost", "=", "False", ",", "\n", "use_doubly_stochastic", "=", "False", ",", "lambda_ds", "=", "0.001", ",", "\n", "use_concentration_cost", "=", "False", ",", "lambda_ct", "=", "10", ",", "\n", "use_stablilizer", "=", "False", ",", "lambda_st", "=", "50", ",", "\n", "add_contexts", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "use_doubly_stochastic", "=", "use_doubly_stochastic", "\n", "self", ".", "use_step_decay_cost", "=", "use_step_decay_cost", "\n", "self", ".", "use_concentration_cost", "=", "use_concentration_cost", "\n", "self", ".", "use_stablilizer", "=", "use_stablilizer", "\n", "self", ".", "lambda_ds", "=", "lambda_ds", "\n", "self", ".", "lambda_ct", "=", "lambda_ct", "\n", "self", ".", "lambda_st", "=", "lambda_st", "\n", "normal_inputs", "=", "[", "name", "for", "name", "in", "transition", ".", "apply", ".", "sequences", "\n", "if", "'mask'", "not", "in", "name", "]", "\n", "kwargs", ".", "setdefault", "(", "'fork'", ",", "Fork", "(", "normal_inputs", ")", ")", "\n", "self", ".", "context_transition", "=", "context_transition", "\n", "if", "attention", ":", "\n", "            ", "transition", "=", "AttentionRecurrent_withL", "(", "\n", "transition", ",", "context_transition", ",", "attention", ",", "\n", "add_contexts", "=", "add_contexts", ",", "name", "=", "\"att_trans\"", ")", "\n", "", "else", ":", "\n", "            ", "transition", "=", "FakeAttentionRecurrent", "(", "representation_dim", ",", "transition", ",", "context_transition", ",", "\n", "name", "=", "\"with_fake_attention\"", ")", "\n", "\n", "", "super", "(", "SequenceGenerator", ",", "self", ")", ".", "__init__", "(", "\n", "readout", ",", "transition", ",", "**", "kwargs", ")", "\n", "#self.children+=[self.context_transition]", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.SequenceGenerator.SequenceGenerator.cost_matrix": [[72, 171], ["blocks.utils.dict_subset", "blocks.utils.dict_subset", "SequenceGenerator.SequenceGenerator.readout.feedback", "SequenceGenerator.SequenceGenerator.fork.apply", "SequenceGenerator.SequenceGenerator.transition.apply", "theano.tensor.roll", "theano.tensor.set_subtensor", "SequenceGenerator.SequenceGenerator.readout.readout", "SequenceGenerator.SequenceGenerator.readout.cost", "SequenceGenerator.SequenceGenerator.readout.feedback", "theano.tensor.sum", "theano.tensor.pow", "theano.tensor.sum", "blocks.utils.dict_subset.norm", "theano.tensor.zeros", "SequenceGenerator.SequenceGenerator.cost_matrix.step_decay_cost"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.model_with_l.LookupFeedbackWMT15.feedback", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.match_functions.GeneralMatchFunction.apply", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.match_functions.GeneralMatchFunction.apply", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.model_with_l.Decoder.cost", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.model_with_l.LookupFeedbackWMT15.feedback"], ["", "@", "application", "\n", "def", "cost_matrix", "(", "self", ",", "application_call", ",", "outputs", ",", "mask", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Returns generation costs for output sequences.\n\n        See Also\n        --------\n        :meth:`cost` : Scalar cost.\n\n        \"\"\"", "\n", "# We assume the data has axes (time, batch, features, ...)", "\n", "batch_size", "=", "outputs", ".", "shape", "[", "1", "]", "\n", "\n", "# Prepare input for the iterative part", "\n", "states", "=", "dict_subset", "(", "kwargs", ",", "self", ".", "_state_names", ",", "must_have", "=", "False", ")", "\n", "# masks in context are optional (e.g. `attended_mask`)", "\n", "contexts", "=", "dict_subset", "(", "kwargs", ",", "self", ".", "_context_names", ",", "must_have", "=", "False", ")", "\n", "feedback", "=", "self", ".", "readout", ".", "feedback", "(", "outputs", ")", "\n", "inputs", "=", "self", ".", "fork", ".", "apply", "(", "feedback", ",", "as_dict", "=", "True", ")", "\n", "\n", "# Run the recurrent network", "\n", "results", "=", "self", ".", "transition", ".", "apply", "(", "\n", "mask", "=", "mask", ",", "return_initial_states", "=", "True", ",", "as_dict", "=", "True", ",", "\n", "**", "dict_union", "(", "inputs", ",", "states", ",", "contexts", ")", ")", "\n", "\n", "# Separate the deliverables. The last states are discarded: they", "\n", "# are not used to predict any output symbol. The initial glimpses", "\n", "# are discarded because they are not used for prediction.", "\n", "# Remember, glimpses are computed _before_ output stage, states are", "\n", "# computed after.", "\n", "states", "=", "{", "name", ":", "results", "[", "name", "]", "[", ":", "-", "1", "]", "for", "name", "in", "self", ".", "_state_names", "}", "\n", "glimpses", "=", "{", "name", ":", "results", "[", "name", "]", "[", "1", ":", "]", "for", "name", "in", "self", ".", "_glimpse_names", "}", "\n", "\n", "# Compute the cost", "\n", "feedback", "=", "tensor", ".", "roll", "(", "feedback", ",", "1", ",", "0", ")", "\n", "feedback", "=", "tensor", ".", "set_subtensor", "(", "\n", "feedback", "[", "0", "]", ",", "\n", "self", ".", "readout", ".", "feedback", "(", "self", ".", "readout", ".", "initial_outputs", "(", "batch_size", ")", ")", ")", "\n", "readouts", "=", "self", ".", "readout", ".", "readout", "(", "\n", "feedback", "=", "feedback", ",", "**", "dict_union", "(", "states", ",", "glimpses", ",", "contexts", ")", ")", "\n", "costs", "=", "self", ".", "readout", ".", "cost", "(", "readouts", ",", "outputs", ")", "\n", "\n", "if", "self", ".", "use_doubly_stochastic", ":", "\n", "# Doubly stochastic cost", "\n", "# \\lambda\\sum_{i}(1-\\sum_{t}w_{t, i})^2", "\n", "# the first dimensions of weights returned by transition", "\n", "# is batch, time", "\n", "            ", "weights", "=", "glimpses", "[", "'weights'", "]", "\n", "weights_sum_time", "=", "tensor", ".", "sum", "(", "weights", ",", "0", ")", "\n", "penalties", "=", "tensor", ".", "ones_like", "(", "weights_sum_time", ")", "-", "weights_sum_time", "\n", "penalties_squared", "=", "tensor", ".", "pow", "(", "penalties", ",", "2", ")", "\n", "ds_costs", "=", "tensor", ".", "sum", "(", "penalties_squared", ",", "1", ")", "\n", "costs", "+=", "(", "self", ".", "lambda_ds", "*", "ds_costs", ")", "[", "None", ",", ":", "]", "\n", "\n", "", "def", "step_decay_cost", "(", "states", ")", ":", "\n", "# shape is time, batch, features", "\n", "            ", "eta", "=", "0.0001", "\n", "xi", "=", "100", "\n", "states_norm", "=", "states", ".", "norm", "(", "2", ",", "axis", "=", "2", ")", "\n", "zz", "=", "tensor", ".", "zeros", "(", "[", "1", ",", "states", ".", "shape", "[", "1", "]", "]", ")", "\n", "padded_norm", "=", "tensor", ".", "join", "(", "0", ",", "zz", ",", "states_norm", ")", "[", ":", "-", "1", ",", ":", "]", "\n", "diffs", "=", "states_norm", "-", "padded_norm", "\n", "costs", "=", "eta", "*", "(", "xi", "**", "diffs", ")", "\n", "return", "costs", "\n", "\n", "", "if", "self", ".", "use_step_decay_cost", ":", "\n", "            ", "costs", "+=", "step_decay_cost", "(", "states", "[", "'states'", "]", ")", "\n", "\n", "", "def", "stablilizer_cost", "(", "states", ")", ":", "\n", "            ", "states_norm", "=", "states", ".", "norm", "(", "2", ",", "axis", "=", "2", ")", "\n", "zz", "=", "tensor", ".", "zeros", "(", "[", "1", ",", "states", ".", "shape", "[", "1", "]", "]", ")", "\n", "padded_norm", "=", "tensor", ".", "join", "(", "0", ",", "zz", ",", "states_norm", ")", "[", ":", "-", "1", ",", ":", "]", "\n", "diffs", "=", "states_norm", "-", "padded_norm", "\n", "costs", "=", "tensor", ".", "pow", "(", "diffs", ",", "2", ")", "\n", "return", "costs", "\n", "\n", "", "if", "self", ".", "use_stablilizer", ":", "\n", "            ", "costs", "+=", "self", ".", "lambda_st", "*", "stablilizer_cost", "(", "states", "[", "'states'", "]", ")", "\n", "\n", "", "if", "self", ".", "use_concentration_cost", ":", "\n", "# weights has shape [batch, time, source sentence len]", "\n", "            ", "weights", "=", "glimpses", "[", "'weights'", "]", "\n", "maxis", "=", "tensor", ".", "max", "(", "weights", ",", "axis", "=", "2", ")", "\n", "lacks", "=", "tensor", ".", "ones_like", "(", "maxis", ")", "-", "maxis", "\n", "costs", "+=", "self", ".", "lambda_ct", "*", "lacks", "\n", "\n", "", "if", "mask", "is", "not", "None", ":", "\n", "            ", "costs", "*=", "mask", "\n", "\n", "", "for", "name", ",", "variable", "in", "list", "(", "glimpses", ".", "items", "(", ")", ")", "+", "list", "(", "states", ".", "items", "(", ")", ")", ":", "\n", "            ", "application_call", ".", "add_auxiliary_variable", "(", "\n", "variable", ".", "copy", "(", ")", ",", "name", "=", "name", ")", "\n", "\n", "# This variables can be used to initialize the initial states of the", "\n", "# next batch using the last states of the current batch.", "\n", "", "for", "name", "in", "self", ".", "_state_names", ":", "\n", "            ", "application_call", ".", "add_auxiliary_variable", "(", "\n", "results", "[", "name", "]", "[", "-", "1", "]", ".", "copy", "(", ")", ",", "name", "=", "name", "+", "\"_final_value\"", ")", "\n", "\n", "", "return", "costs", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.SequenceGenerator.SequenceGenerator.generate": [[172, 212], ["blocks.utils.dict_subset", "blocks.utils.dict_subset", "blocks.utils.dict_subset", "SequenceGenerator.SequenceGenerator.transition.transform_context", "SequenceGenerator.SequenceGenerator.transition.take_glimpses", "SequenceGenerator.SequenceGenerator.readout.readout", "SequenceGenerator.SequenceGenerator.readout.emit", "SequenceGenerator.SequenceGenerator.readout.cost", "SequenceGenerator.SequenceGenerator.readout.feedback", "SequenceGenerator.SequenceGenerator.transition.compute_states", "SequenceGenerator.SequenceGenerator.fork.apply", "blocks.utils.dict_union", "SequenceGenerator.SequenceGenerator.readout.feedback", "blocks.utils.dict_union", "blocks.utils.dict_union", "list", "SequenceGenerator.SequenceGenerator.values", "theano.tensor.ones"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.AttentionRecurrent.transform_context", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.AttentionRecurrent.take_glimpses", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.model_with_l.Decoder.cost", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.model_with_l.LookupFeedbackWMT15.feedback", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.AttentionRecurrent.compute_states", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.match_functions.GeneralMatchFunction.apply", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.model_with_l.LookupFeedbackWMT15.feedback"], ["", "@", "recurrent", "\n", "def", "generate", "(", "self", ",", "outputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"A sequence generation step.\n\n        Parameters\n        ----------\n        outputs : :class:`~tensor.TensorVariable`\n            The outputs from the previous step.\n        Notes\n        -----\n        The contexts, previous states and glimpses are expected as keyword\n        arguments.\n\n        \"\"\"", "\n", "states", "=", "dict_subset", "(", "kwargs", ",", "self", ".", "_state_names", ")", "\n", "# masks in context are optional (e.g. `attended_mask`)", "\n", "contexts", "=", "dict_subset", "(", "kwargs", ",", "self", ".", "_context_names", ",", "must_have", "=", "False", ")", "\n", "glimpses", "=", "dict_subset", "(", "kwargs", ",", "self", ".", "_glimpse_names", ")", "\n", "attended_list", "=", "contexts", "[", "'attended_list'", "]", ";", "\n", "attended_mask_list", "=", "contexts", "[", "'attended_mask_list'", "]", ";", "\n", "utterance_attended", "=", "self", ".", "transition", ".", "transform_context", "(", "attended_list", ",", "attended_mask_list", ",", "states", "[", "'states'", "]", ")", ";", "\n", "next_glimpses", "=", "self", ".", "transition", ".", "take_glimpses", "(", "\n", "as_dict", "=", "True", ",", "\n", "**", "dict_union", "(", "\n", "states", ",", "\n", "{", "'attended_list'", ":", "utterance_attended", ",", "\n", "'attended_mask_list'", ":", "tensor", ".", "ones", "(", "[", "attended_list", ".", "shape", "[", "0", "]", ",", "attended_list", ".", "shape", "[", "2", "]", "]", ")", "}", ")", ")", "\n", "next_readouts", "=", "self", ".", "readout", ".", "readout", "(", "\n", "feedback", "=", "self", ".", "readout", ".", "feedback", "(", "outputs", ")", ",", "\n", "**", "dict_union", "(", "states", ",", "next_glimpses", ",", "contexts", ")", ")", "\n", "next_outputs", "=", "self", ".", "readout", ".", "emit", "(", "next_readouts", ")", "\n", "next_costs", "=", "self", ".", "readout", ".", "cost", "(", "next_readouts", ",", "next_outputs", ")", "\n", "next_feedback", "=", "self", ".", "readout", ".", "feedback", "(", "next_outputs", ")", "\n", "next_inputs", "=", "(", "self", ".", "fork", ".", "apply", "(", "next_feedback", ",", "as_dict", "=", "True", ")", "\n", "if", "self", ".", "fork", "else", "{", "'feedback'", ":", "next_feedback", "}", ")", "\n", "next_states", "=", "self", ".", "transition", ".", "compute_states", "(", "\n", "as_list", "=", "True", ",", "\n", "**", "dict_union", "(", "next_inputs", ",", "states", ",", "next_glimpses", ",", "contexts", ")", ")", "\n", "return", "(", "next_states", "+", "[", "next_outputs", "]", "+", "\n", "list", "(", "next_glimpses", ".", "values", "(", ")", ")", "+", "[", "next_costs", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.SequenceGenerator.SequenceGenerator.generate_delegate": [[251, 254], ["None"], "methods", ["None"], ["", "@", "generate", ".", "delegate", "\n", "def", "generate_delegate", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "transition", ".", "apply", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.SequenceGenerator.SequenceGenerator.generate_states": [[255, 258], ["generate.property"], "methods", ["None"], ["", "@", "generate", ".", "property", "(", "'states'", ")", "\n", "def", "generate_states", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_state_names", "+", "[", "'outputs'", "]", "+", "self", ".", "_glimpse_names", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.SequenceGenerator.SequenceGenerator.generate_outputs": [[259, 263], ["generate.property"], "methods", ["None"], ["", "@", "generate", ".", "property", "(", "'outputs'", ")", "\n", "def", "generate_outputs", "(", "self", ")", ":", "\n", "        ", "return", "(", "self", ".", "_state_names", "+", "[", "'outputs'", "]", "+", "\n", "self", ".", "_glimpse_names", "+", "[", "'costs'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.SequenceGenerator.SequenceGenerator.get_dim": [[264, 271], ["super().get_dim", "SequenceGenerator.SequenceGenerator.transition.get_dim", "SequenceGenerator.SequenceGenerator.readout.get_dim"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.AttentionRecurrent.get_dim", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.AttentionRecurrent.get_dim", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.AttentionRecurrent.get_dim"], ["", "def", "get_dim", "(", "self", ",", "name", ")", ":", "\n", "        ", "if", "name", "in", "(", "self", ".", "_state_names", "+", "self", ".", "_context_names", "+", "\n", "self", ".", "_glimpse_names", ")", ":", "\n", "            ", "return", "self", ".", "transition", ".", "get_dim", "(", "name", ")", "\n", "", "elif", "name", "==", "'outputs'", ":", "\n", "            ", "return", "self", ".", "readout", ".", "get_dim", "(", "name", ")", "\n", "", "return", "super", "(", "BaseSequenceGenerator", ",", "self", ")", ".", "get_dim", "(", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.SequenceGenerator.SequenceGenerator.initial_states": [[272, 282], ["dict", "SequenceGenerator.SequenceGenerator.transition.initial_states", "SequenceGenerator.SequenceGenerator.readout.initial_outputs"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.AttentionRecurrent.initial_states"], ["", "@", "application", "\n", "def", "initial_states", "(", "self", ",", "batch_size", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "# TODO: support dict of outputs for application methods", "\n", "# to simplify this code.", "\n", "        ", "state_dict", "=", "dict", "(", "\n", "self", ".", "transition", ".", "initial_states", "(", "\n", "batch_size", ",", "as_dict", "=", "True", ",", "*", "args", ",", "**", "kwargs", ")", ",", "\n", "outputs", "=", "self", ".", "readout", ".", "initial_outputs", "(", "batch_size", ")", ")", "\n", "return", "[", "state_dict", "[", "state_name", "]", "\n", "for", "state_name", "in", "self", ".", "generate", ".", "states", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.SequenceGenerator.SequenceGenerator.initial_states_outputs": [[283, 286], ["initial_states.property"], "methods", ["None"], ["", "@", "initial_states", ".", "property", "(", "'outputs'", ")", "\n", "def", "initial_states_outputs", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "generate", ".", "states", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.model_with_l.LookupFeedbackWMT15.feedback": [[36, 51], ["outputs.flatten", "theano.tensor.switch", "theano.tensor.switch", "theano.tensor.switch.reshape", "theano.tensor.alloc", "model_with_l.LookupFeedbackWMT15.lookup.apply", "range"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.match_functions.GeneralMatchFunction.apply"], ["@", "application", "\n", "def", "feedback", "(", "self", ",", "outputs", ")", ":", "\n", "        ", "assert", "self", ".", "output_dim", "==", "0", "\n", "\n", "shp", "=", "[", "outputs", ".", "shape", "[", "i", "]", "for", "i", "in", "range", "(", "outputs", ".", "ndim", ")", "]", "\n", "outputs_flat", "=", "outputs", ".", "flatten", "(", ")", "\n", "outputs_flat_zeros", "=", "tensor", ".", "switch", "(", "outputs_flat", "<", "0", ",", "0", ",", "\n", "outputs_flat", ")", "\n", "\n", "lookup_flat", "=", "tensor", ".", "switch", "(", "\n", "outputs_flat", "[", ":", ",", "None", "]", "<", "0", ",", "\n", "tensor", ".", "alloc", "(", "0.", ",", "outputs_flat", ".", "shape", "[", "0", "]", ",", "self", ".", "feedback_dim", ")", ",", "\n", "self", ".", "lookup", ".", "apply", "(", "outputs_flat_zeros", ")", ")", "\n", "lookup", "=", "lookup_flat", ".", "reshape", "(", "shp", "+", "[", "self", ".", "feedback_dim", "]", ")", "\n", "return", "lookup", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.model_with_l.BidirectionalWMT15.apply": [[56, 65], ["model_with_l.BidirectionalWMT15.children[].apply", "theano.tensor.concatenate", "model_with_l.BidirectionalWMT15.children[].apply", "picklable_itertools.extras.equizip"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.match_functions.GeneralMatchFunction.apply", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.match_functions.GeneralMatchFunction.apply"], ["@", "application", "\n", "def", "apply", "(", "self", ",", "forward_dict", ",", "backward_dict", ")", ":", "\n", "        ", "\"\"\"Applies forward and backward networks and concatenates outputs.\"\"\"", "\n", "forward", "=", "self", ".", "children", "[", "0", "]", ".", "apply", "(", "as_list", "=", "True", ",", "**", "forward_dict", ")", "\n", "backward", "=", "[", "x", "[", ":", ":", "-", "1", "]", "for", "x", "in", "\n", "self", ".", "children", "[", "1", "]", ".", "apply", "(", "reverse", "=", "True", ",", "as_list", "=", "True", ",", "\n", "**", "backward_dict", ")", "]", "\n", "return", "[", "tensor", ".", "concatenate", "(", "[", "f", ",", "b", "]", ",", "axis", "=", "2", ")", "\n", "for", "f", ",", "b", "in", "equizip", "(", "forward", ",", "backward", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.model_with_l.BidirectionalEncoder.__init__": [[70, 88], ["blocks.bricks.Initializable.__init__", "blocks.bricks.lookup.LookupTable", "model_with_l.BidirectionalWMT15", "blocks.bricks.parallel.Fork", "blocks.bricks.parallel.Fork", "blocks.bricks.recurrent.GatedRecurrent", "blocks.bricks.Linear", "blocks.bricks.Linear", "blocks.bricks.Tanh"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.sampling.ModelInfo.__init__"], ["def", "__init__", "(", "self", ",", "vocab_size", ",", "embedding_dim", ",", "state_dim", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "BidirectionalEncoder", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "vocab_size", "=", "vocab_size", "\n", "self", ".", "embedding_dim", "=", "embedding_dim", "\n", "self", ".", "state_dim", "=", "state_dim", "\n", "\n", "self", ".", "lookup", "=", "LookupTable", "(", "name", "=", "'embeddings'", ")", "\n", "self", ".", "bidir", "=", "BidirectionalWMT15", "(", "\n", "GatedRecurrent", "(", "activation", "=", "Tanh", "(", ")", ",", "dim", "=", "state_dim", ")", ")", "\n", "self", ".", "fwd_fork", "=", "Fork", "(", "\n", "[", "name", "for", "name", "in", "self", ".", "bidir", ".", "prototype", ".", "apply", ".", "sequences", "\n", "if", "name", "!=", "'mask'", "]", ",", "prototype", "=", "Linear", "(", ")", ",", "name", "=", "'fwd_fork'", ")", "\n", "self", ".", "back_fork", "=", "Fork", "(", "\n", "[", "name", "for", "name", "in", "self", ".", "bidir", ".", "prototype", ".", "apply", ".", "sequences", "\n", "if", "name", "!=", "'mask'", "]", ",", "prototype", "=", "Linear", "(", ")", ",", "name", "=", "'back_fork'", ")", "\n", "\n", "self", ".", "children", "=", "[", "self", ".", "lookup", ",", "self", ".", "bidir", ",", "\n", "self", ".", "fwd_fork", ",", "self", ".", "back_fork", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.model_with_l.BidirectionalEncoder._push_allocation_config": [[89, 99], ["model_with_l.BidirectionalEncoder.bidir.children[].get_dim", "model_with_l.BidirectionalEncoder.bidir.children[].get_dim"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.AttentionRecurrent.get_dim", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.AttentionRecurrent.get_dim"], ["", "def", "_push_allocation_config", "(", "self", ")", ":", "\n", "        ", "self", ".", "lookup", ".", "length", "=", "self", ".", "vocab_size", "\n", "self", ".", "lookup", ".", "dim", "=", "self", ".", "embedding_dim", "\n", "\n", "self", ".", "fwd_fork", ".", "input_dim", "=", "self", ".", "embedding_dim", "\n", "self", ".", "fwd_fork", ".", "output_dims", "=", "[", "self", ".", "bidir", ".", "children", "[", "0", "]", ".", "get_dim", "(", "name", ")", "\n", "for", "name", "in", "self", ".", "fwd_fork", ".", "output_names", "]", "\n", "self", ".", "back_fork", ".", "input_dim", "=", "self", ".", "embedding_dim", "\n", "self", ".", "back_fork", ".", "output_dims", "=", "[", "self", ".", "bidir", ".", "children", "[", "1", "]", ".", "get_dim", "(", "name", ")", "\n", "for", "name", "in", "self", ".", "back_fork", ".", "output_names", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.model_with_l.BidirectionalEncoder.apply": [[100, 116], ["blocks.bricks.base.application", "model_with_l.BidirectionalEncoder.lookup.apply", "model_with_l.BidirectionalEncoder.bidir.apply", "toolz.merge", "toolz.merge", "model_with_l.BidirectionalEncoder.fwd_fork.apply", "model_with_l.BidirectionalEncoder.back_fork.apply"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.match_functions.GeneralMatchFunction.apply", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.match_functions.GeneralMatchFunction.apply", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.match_functions.GeneralMatchFunction.apply", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.match_functions.GeneralMatchFunction.apply"], ["", "@", "application", "(", "inputs", "=", "[", "'source_sentence'", ",", "'source_sentence_mask'", "]", ",", "\n", "outputs", "=", "[", "'representation'", "]", ")", "\n", "def", "apply", "(", "self", ",", "source_sentence", ",", "source_sentence_mask", ")", ":", "\n", "# Time as first dimension", "\n", "        ", "source_sentence", "=", "source_sentence", ".", "T", "\n", "source_sentence_mask", "=", "source_sentence_mask", ".", "T", "\n", "\n", "embeddings", "=", "self", ".", "lookup", ".", "apply", "(", "source_sentence", ")", "\n", "\n", "representation", "=", "self", ".", "bidir", ".", "apply", "(", "\n", "merge", "(", "self", ".", "fwd_fork", ".", "apply", "(", "embeddings", ",", "as_dict", "=", "True", ")", ",", "\n", "{", "'mask'", ":", "source_sentence_mask", "}", ")", ",", "\n", "merge", "(", "self", ".", "back_fork", ".", "apply", "(", "embeddings", ",", "as_dict", "=", "True", ")", ",", "\n", "{", "'mask'", ":", "source_sentence_mask", "}", ")", "\n", ")", "\n", "return", "representation", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.model_with_l.SentenceEncoder.__init__": [[120, 142], ["blocks.bricks.Initializable.__init__", "GRU.GRU.GRU", "blocks.bricks.parallel.Fork", "match_functions.SumMatchFunction_posTag", "attention_with_posTagging.SequenceContentAttention_withExInput", "blocks.bricks.Tanh", "blocks.bricks.Linear"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.sampling.ModelInfo.__init__"], ["def", "__init__", "(", "self", ",", "embedding_dim", ",", "state_dim", ",", "use_local_attention", "=", "False", ",", "window_size", "=", "10", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "SentenceEncoder", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "embedding_dim", "=", "embedding_dim", "\n", "self", ".", "state_dim", "=", "state_dim", "\n", "self", ".", "rnn", "=", "GRU", "(", "activation", "=", "Tanh", "(", ")", ",", "dim", "=", "state_dim", ",", "attended_dim", "=", "embedding_dim", ")", ";", "\n", "self", ".", "input_fork", "=", "Fork", "(", "\n", "[", "name", "for", "name", "in", "self", ".", "rnn", ".", "apply", ".", "sequences", "\n", "if", "name", "!=", "'mask'", "]", ",", "prototype", "=", "Linear", "(", ")", ",", "name", "=", "'input_fork'", ")", "\n", "self", ".", "energy_computer", "=", "SumMatchFunction_posTag", "(", "name", "=", "\"wordAtt_energy_comp\"", ")", "\n", "self", ".", "attention", "=", "SequenceContentAttention_withExInput", "(", "\n", "state_names", "=", "[", "'states'", "]", ",", "\n", "state_dims", "=", "[", "state_dim", "]", ",", "\n", "attended_dim", "=", "embedding_dim", ",", "\n", "match_dim", "=", "state_dim", ",", "\n", "posTag_dim", "=", "self", ".", "state_dim", ",", "\n", "energy_computer", "=", "self", ".", "energy_computer", ",", "\n", "use_local_attention", "=", "use_local_attention", ",", "\n", "window_size", "=", "window_size", ",", "\n", "name", "=", "\"word_attention\"", ")", "\n", "\n", "self", ".", "children", "=", "[", "self", ".", "rnn", ",", "self", ".", "input_fork", ",", "self", ".", "attention", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.model_with_l.SentenceEncoder._push_allocation_config": [[143, 150], ["model_with_l.SentenceEncoder.rnn.get_dim"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.AttentionRecurrent.get_dim"], ["", "def", "_push_allocation_config", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "input_fork", ".", "input_dim", "=", "self", ".", "embedding_dim", "\n", "self", ".", "input_fork", ".", "output_dims", "=", "[", "self", ".", "rnn", ".", "get_dim", "(", "name", ")", "\n", "for", "name", "in", "self", ".", "input_fork", ".", "output_names", "]", "\n", "self", ".", "attention", ".", "state_dims", "=", "[", "self", ".", "state_dim", "]", "\n", "self", ".", "attention", ".", "state_dim", "=", "self", ".", "state_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.model_with_l.SentenceEncoder.do_apply": [[151, 168], ["blocks.bricks.recurrent.recurrent", "model_with_l.SentenceEncoder.attention.take_glimpses", "toolz.merge", "model_with_l.SentenceEncoder.rnn.apply", "model_with_l.SentenceEncoder.input_fork.apply"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.AttentionRecurrent.take_glimpses", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.match_functions.GeneralMatchFunction.apply", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.match_functions.GeneralMatchFunction.apply"], ["", "@", "recurrent", "(", "sequences", "=", "[", "'attended'", ",", "'preprocessed_attended'", ",", "'attended_mask'", ",", "'mask'", "]", ",", "\n", "states", "=", "[", "'states'", "]", ",", "outputs", "=", "[", "'states'", "]", ",", "contexts", "=", "[", "'decoder_states'", "]", ")", "\n", "def", "do_apply", "(", "self", ",", "attended", ",", "preprocessed_attended", ",", "attended_mask", ",", "decoder_states", ",", "states", ",", "mask", "=", "None", ")", ":", "\n", "        ", "current_glimpses", "=", "self", ".", "attention", ".", "take_glimpses", "(", "\n", "attended", ",", "\n", "states", ",", "\n", "preprocessed_attended", ",", "\n", "attended_mask", ",", "\n", "states", ",", "\n", "**", "{", "'states'", ":", "decoder_states", "}", ")", ";", "\n", "inputs", "=", "merge", "(", "self", ".", "input_fork", ".", "apply", "(", "current_glimpses", "[", "0", "]", ",", "as_dict", "=", "True", ")", ",", "{", "'states'", ":", "states", "}", ")", ";", "\n", "\n", "next_states", "=", "self", ".", "rnn", ".", "apply", "(", "iterate", "=", "False", ",", "**", "inputs", ")", "\n", "if", "mask", ":", "\n", "            ", "next_states", "=", "(", "mask", "[", ":", ",", "None", "]", "*", "next_states", "+", "\n", "(", "1", "-", "mask", "[", ":", ",", "None", "]", ")", "*", "states", ")", "\n", "", "return", "next_states", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.model_with_l.SentenceEncoder.apply": [[170, 178], ["blocks.bricks.base.application", "model_with_l.SentenceEncoder.do_apply"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.AttentionRecurrent.do_apply"], ["", "@", "application", "(", "inputs", "=", "[", "'attended'", ",", "'preprocessed_attended'", ",", "'attended_mask'", ",", "'decoder_states'", ",", "'mask'", "]", ",", "\n", "outputs", "=", "[", "'cxt_representation'", "]", ")", "\n", "def", "apply", "(", "self", ",", "attended", ",", "preprocessed_attended", ",", "attended_mask", ",", "decoder_states", ",", "mask", "=", "None", ")", ":", "\n", "# Time as first dimension", "\n", "        ", "mask", "=", "mask", ".", "T", "\n", "cxt_representation", "=", "self", ".", "do_apply", "(", "attended", ",", "preprocessed_attended", ",", "attended_mask", ",", "decoder_states", ",", "mask", "=", "mask", ")", "\n", "\n", "return", "cxt_representation", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.model_with_l.SentenceEncoder.get_dim": [[179, 184], ["None"], "methods", ["None"], ["", "def", "get_dim", "(", "self", ",", "name", ")", ":", "\n", "        ", "if", "name", "==", "'mask'", ":", "\n", "            ", "return", "0", "\n", "", "if", "name", "in", "[", "'states'", "]", ":", "\n", "            ", "return", "self", ".", "state_dim", "\n", "", "", "@", "application", "(", "inputs", "=", "[", "'attended'", "]", ",", "outputs", "=", "[", "'preprocessed_attended'", "]", ")", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.model_with_l.SentenceEncoder.preprocess": [[184, 195], ["blocks.bricks.base.application", "model_with_l.SentenceEncoder.attention.preprocess"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.SequenceContentAttention_withExInput_3d.preprocess"], ["", "", "@", "application", "(", "inputs", "=", "[", "'attended'", "]", ",", "outputs", "=", "[", "'preprocessed_attended'", "]", ")", "\n", "def", "preprocess", "(", "self", ",", "attended", ")", ":", "\n", "        ", "\"\"\"Preprocess the sequence for computing attention weights.\n\n        Parameters\n        ----------\n        attended : :class:`~tensor.TensorVariable`\n            The attended sequence, time is the 1-st dimension.\n\n        \"\"\"", "\n", "return", "self", ".", "attention", ".", "preprocess", "(", "attended", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.model_with_l.SentenceEncoder.initial_states": [[196, 201], ["blocks.bricks.base.application"], "methods", ["None"], ["", "@", "application", "(", "outputs", "=", "do_apply", ".", "states", ")", "\n", "def", "initial_states", "(", "self", ",", "batch_size", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "attended", "=", "kwargs", "[", "'attended'", "]", "\n", "initial_state", "=", "attended", "[", "0", ",", "0", ",", ":", ",", "-", "self", ".", "state_dim", ":", "]", ";", "\n", "return", "initial_state", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.model_with_l.Decoder.__init__": [[205, 271], ["blocks.bricks.Initializable.__init__", "GRU.GRU.GRU", "model_with_l.SentenceEncoder", "attention.SequenceContentAttention", "blocks.bricks.sequence_generators.Readout", "SequenceGenerator.SequenceGenerator.SequenceGenerator", "blocks.bricks.Tanh", "globals", "blocks.bricks.sequence_generators.SoftmaxEmitter", "model_with_l.LookupFeedbackWMT15", "model_with_l.InitializableFeedforwardSequence", "blocks.bricks.parallel.Fork", "blocks.bricks.Linear", "blocks.bricks.Bias", "blocks.bricks.Maxout", "blocks.bricks.Linear", "blocks.bricks.Linear"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.sampling.ModelInfo.__init__"], ["def", "__init__", "(", "self", ",", "vocab_size", ",", "embedding_dim", ",", "state_dim", ",", "\n", "representation_dim", ",", "match_function", "=", "'SumMacthFunction'", ",", "\n", "use_doubly_stochastic", "=", "False", ",", "lambda_ds", "=", "0.001", ",", "\n", "use_local_attention", "=", "False", ",", "window_size", "=", "10", ",", "\n", "use_step_decay_cost", "=", "False", ",", "\n", "use_concentration_cost", "=", "False", ",", "lambda_ct", "=", "10", ",", "\n", "use_stablilizer", "=", "False", ",", "lambda_st", "=", "50", ",", "\n", "theano_seed", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Decoder", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "vocab_size", "=", "vocab_size", "\n", "self", ".", "embedding_dim", "=", "embedding_dim", "\n", "self", ".", "state_dim", "=", "state_dim", "\n", "self", ".", "representation_dim", "=", "representation_dim", "\n", "self", ".", "theano_seed", "=", "theano_seed", "\n", "\n", "# Initialize gru with special initial state", "\n", "self", ".", "transition", "=", "GRU", "(", "\n", "attended_dim", "=", "state_dim", ",", "dim", "=", "state_dim", ",", "\n", "activation", "=", "Tanh", "(", ")", ",", "name", "=", "'decoder'", ")", "\n", "\n", "self", ".", "context_transition", "=", "SentenceEncoder", "(", "embedding_dim", "=", "2", "*", "self", ".", "state_dim", ",", "state_dim", "=", "self", ".", "state_dim", ",", "name", "=", "'context_transition'", ")", "\n", "\n", "self", ".", "energy_computer", "=", "globals", "(", ")", "[", "match_function", "]", "(", "name", "=", "'energy_comp'", ")", "\n", "\n", "# Initialize the attention mechanism", "\n", "self", ".", "attention", "=", "SequenceContentAttention", "(", "\n", "state_names", "=", "self", ".", "transition", ".", "apply", ".", "states", ",", "\n", "attended_dim", "=", "state_dim", ",", "\n", "match_dim", "=", "state_dim", ",", "\n", "energy_computer", "=", "self", ".", "energy_computer", ",", "\n", "use_local_attention", "=", "use_local_attention", ",", "\n", "window_size", "=", "window_size", ",", "\n", "name", "=", "\"attention\"", ")", "\n", "\n", "# Initialize the readout, note that SoftmaxEmitter emits -1 for", "\n", "# initial outputs which is used by LookupFeedBackWMT15", "\n", "readout", "=", "Readout", "(", "\n", "source_names", "=", "[", "'states'", ",", "'feedback'", ",", "\n", "self", ".", "attention", ".", "take_glimpses", ".", "outputs", "[", "0", "]", "]", ",", "\n", "readout_dim", "=", "self", ".", "vocab_size", ",", "\n", "emitter", "=", "SoftmaxEmitter", "(", "initial_output", "=", "-", "1", ",", "theano_seed", "=", "theano_seed", ")", ",", "\n", "feedback_brick", "=", "LookupFeedbackWMT15", "(", "vocab_size", ",", "embedding_dim", ")", ",", "\n", "post_merge", "=", "InitializableFeedforwardSequence", "(", "\n", "[", "Bias", "(", "dim", "=", "state_dim", ",", "name", "=", "'maxout_bias'", ")", ".", "apply", ",", "\n", "Maxout", "(", "num_pieces", "=", "2", ",", "name", "=", "'maxout'", ")", ".", "apply", ",", "\n", "Linear", "(", "input_dim", "=", "state_dim", "/", "2", ",", "output_dim", "=", "embedding_dim", ",", "\n", "use_bias", "=", "False", ",", "name", "=", "'softmax0'", ")", ".", "apply", ",", "\n", "Linear", "(", "input_dim", "=", "embedding_dim", ",", "name", "=", "'softmax1'", ")", ".", "apply", "]", ")", ",", "\n", "merged_dim", "=", "state_dim", ")", "\n", "\n", "# Build sequence generator accordingly", "\n", "self", ".", "sequence_generator", "=", "SequenceGenerator", "(", "\n", "representation_dim", "=", "self", ".", "representation_dim", ",", "\n", "readout", "=", "readout", ",", "\n", "transition", "=", "self", ".", "transition", ",", "\n", "context_transition", "=", "self", ".", "context_transition", ",", "\n", "attention", "=", "self", ".", "attention", ",", "\n", "use_step_decay_cost", "=", "use_step_decay_cost", ",", "\n", "use_doubly_stochastic", "=", "use_doubly_stochastic", ",", "lambda_ds", "=", "lambda_ds", ",", "\n", "use_concentration_cost", "=", "use_concentration_cost", ",", "lambda_ct", "=", "lambda_ct", ",", "\n", "use_stablilizer", "=", "use_stablilizer", ",", "lambda_st", "=", "lambda_st", ",", "\n", "fork", "=", "Fork", "(", "[", "name", "for", "name", "in", "self", ".", "transition", ".", "apply", ".", "sequences", "\n", "if", "name", "!=", "'mask'", "]", ",", "prototype", "=", "Linear", "(", ")", ")", "\n", ")", "\n", "\n", "self", ".", "children", "=", "[", "self", ".", "sequence_generator", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.model_with_l.Decoder.cost": [[297, 321], ["blocks.bricks.base.application", "model_with_l.Decoder.sequence_generator.cost_matrix"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.SequenceGenerator.SequenceGenerator.cost_matrix"], ["", "@", "application", "(", "inputs", "=", "[", "'representation_list'", ",", "'sentence_mask_list'", ",", "\n", "'target_sentence'", ",", "'target_sentence_mask'", "]", ",", "\n", "outputs", "=", "[", "'costs'", ",", "'weights'", "]", ")", "\n", "def", "cost", "(", "self", ",", "representation_list", ",", "sentence_mask_list", ",", "\n", "target_sentence", ",", "target_sentence_mask", ")", ":", "\n", "\n", "        ", "target_sentence", "=", "target_sentence", ".", "T", "\n", "target_sentence_mask", "=", "target_sentence_mask", ".", "T", "\n", "\n", "# Get the cost matrix", "\n", "cost", "=", "self", ".", "sequence_generator", ".", "cost_matrix", "(", "**", "{", "\n", "'mask'", ":", "target_sentence_mask", ",", "\n", "'outputs'", ":", "target_sentence", ",", "\n", "'attended_list'", ":", "representation_list", ",", "\n", "'attended_mask_list'", ":", "sentence_mask_list", "}", "\n", ")", "\n", "\n", "'''\n        return (cost * target_sentence_mask).sum() / \\\n            target_sentence_mask.shape[1]\n        '''", "\n", "\n", "#return (cost * target_sentence_mask).sum()/target_sentence_mask.sum();", "\n", "return", "(", "cost", "*", "target_sentence_mask", ")", ".", "sum", "(", ")", ";", "\n", "#return cost.sum()/tensor.sum(target_sentence_mask),tensor.sum(target_sentence_mask)", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.model_with_l.Decoder.generate": [[323, 331], ["model_with_l.Decoder.sequence_generator.generate"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.model_with_l.Decoder.generate"], ["", "@", "application", "\n", "def", "generate", "(", "self", ",", "representation", ",", "sentence_masks_list", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "sequence_generator", ".", "generate", "(", "\n", "n_steps", "=", "2", "*", "representation", ".", "shape", "[", "1", "]", ",", "\n", "batch_size", "=", "representation", ".", "shape", "[", "2", "]", ",", "\n", "attended_list", "=", "representation", ",", "\n", "attended_mask_list", "=", "sentence_masks_list", ",", "\n", "**", "kwargs", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.fake_attention_recurrent.FakeAttentionRecurrent.__init__": [[74, 116], ["blocks.bricks.attention.AbstractAttentionRecurrent.__init__", "list", "list", "list", "blocks.bricks.parallel.Distribute"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.sampling.ModelInfo.__init__"], ["def", "__init__", "(", "self", ",", "representationDim", ",", "transition", ",", "context_transition", ",", "distribute", "=", "None", ",", "\n", "add_contexts", "=", "True", ",", "\n", "attended_name", "=", "None", ",", "attended_mask_name", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "FakeAttentionRecurrent", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "_sequence_names", "=", "list", "(", "transition", ".", "apply", ".", "sequences", ")", "\n", "self", ".", "_state_names", "=", "list", "(", "transition", ".", "apply", ".", "states", ")", "\n", "self", ".", "_context_names", "=", "list", "(", "transition", ".", "apply", ".", "contexts", ")", "\n", "if", "add_contexts", ":", "\n", "            ", "if", "not", "attended_name", ":", "\n", "                ", "attended_name", "=", "'attended_list'", "\n", "", "if", "not", "attended_mask_name", ":", "\n", "                ", "attended_mask_name", "=", "'attended_mask_list'", "\n", "", "self", ".", "_context_names", "+=", "[", "attended_name", ",", "attended_mask_name", "]", "\n", "", "else", ":", "\n", "            ", "attended_name", "=", "self", ".", "_context_names", "[", "0", "]", "\n", "attended_mask_name", "=", "self", ".", "_context_names", "[", "1", "]", "\n", "", "if", "not", "distribute", ":", "\n", "            ", "normal_inputs", "=", "[", "name", "for", "name", "in", "self", ".", "_sequence_names", "\n", "if", "'mask'", "not", "in", "name", "]", "\n", "distribute", "=", "Distribute", "(", "normal_inputs", ",", "\n", "'weighted_averages'", ")", "\n", "", "self", ".", "representationDim", "=", "representationDim", ";", "\n", "self", ".", "transition", "=", "transition", "\n", "self", ".", "context_transition", "=", "context_transition", "\n", "self", ".", "distribute", "=", "distribute", "\n", "self", ".", "add_contexts", "=", "add_contexts", "\n", "self", ".", "attended_name", "=", "attended_name", "\n", "self", ".", "attended_mask_name", "=", "attended_mask_name", "\n", "\n", "self", ".", "preprocessed_attended_name", "=", "\"preprocessed_\"", "+", "self", ".", "attended_name", "\n", "\n", "self", ".", "_glimpse_names", "=", "[", "'weighted_averages'", "]", "#unchanged", "\n", "# We need to determine which glimpses are fed back.", "\n", "# Currently we extract it from `take_glimpses` signature.", "\n", "# self.previous_glimpses_needed = [", "\n", "#     name for name in self._glimpse_names", "\n", "#     if name in self.attention.take_glimpses.inputs]", "\n", "self", ".", "previous_glimpses_needed", "=", "[", "]", "\n", "\n", "\n", "self", ".", "children", "=", "[", "self", ".", "transition", ",", "self", ".", "context_transition", ",", "self", ".", "distribute", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.fake_attention_recurrent.FakeAttentionRecurrent._push_allocation_config": [[117, 121], ["fake_attention_recurrent.FakeAttentionRecurrent.get_dim", "fake_attention_recurrent.FakeAttentionRecurrent.transition.get_dims"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.AttentionRecurrent.get_dim"], ["", "def", "_push_allocation_config", "(", "self", ")", ":", "\n", "        ", "self", ".", "distribute", ".", "source_dim", "=", "self", ".", "get_dim", "(", "'states'", ")", "\n", "self", ".", "distribute", ".", "target_dims", "=", "self", ".", "transition", ".", "get_dims", "(", "\n", "self", ".", "distribute", ".", "target_names", ")", "\n", "", "@", "application", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.fake_attention_recurrent.FakeAttentionRecurrent.take_glimpses": [[121, 147], ["None"], "methods", ["None"], ["", "@", "application", "\n", "def", "take_glimpses", "(", "self", ",", "utterance_vector", ")", ":", "\n", "        ", "r\"\"\"Compute glimpses with the attention mechanism.\n\n        A thin wrapper over `self.attention.take_glimpses`: takes care\n        of choosing and renaming the necessary arguments.\n\n        Parameters\n        ----------\n        \\*\\*kwargs\n            Must contain the attended, previous step states and glimpses.\n            Can optionaly contain the attended mask and the preprocessed\n            attended.\n\n        Returns\n        -------\n        glimpses : list of :class:`~tensor.TensorVariable`\n            Current step glimpses.\n\n        \"\"\"", "\n", "\n", "result", "=", "utterance_vector", "[", "3", "]", ";", "\n", "\n", "# At this point kwargs may contain additional items.", "\n", "# e.g. AttentionRecurrent.transition.apply.contexts", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.fake_attention_recurrent.FakeAttentionRecurrent.take_glimpses_outputs": [[148, 151], ["take_glimpses.property"], "methods", ["None"], ["", "@", "take_glimpses", ".", "property", "(", "'outputs'", ")", "\n", "def", "take_glimpses_outputs", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_glimpse_names", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.fake_attention_recurrent.FakeAttentionRecurrent.compute_states": [[152, 190], ["blocks.utils.dict_subset", "blocks.utils.dict_subset", "blocks.utils.dict_subset.update", "fake_attention_recurrent.FakeAttentionRecurrent.transition.apply", "kwargs.pop", "kwargs.pop", "fake_attention_recurrent.FakeAttentionRecurrent.distribute.apply", "blocks.utils.dict_union", "blocks.utils.dict_subset", "blocks.utils.dict_union"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.match_functions.GeneralMatchFunction.apply", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.match_functions.GeneralMatchFunction.apply"], ["", "@", "application", "\n", "def", "compute_states", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "r\"\"\"Compute current states when glimpses have already been computed.\n\n        Combines an application of the `distribute` that alter the\n        sequential inputs of the wrapped transition and an application of\n        the wrapped transition. All unknown keyword arguments go to\n        the wrapped transition.\n\n        Parameters\n        ----------\n        \\*\\*kwargs\n            Should contain everything what `self.transition` needs\n            and in addition the current glimpses.\n\n        Returns\n        -------\n        current_states : list of :class:`~tensor.TensorVariable`\n            Current states computed by `self.transition`.\n\n        \"\"\"", "\n", "# make sure we are not popping the mask", "\n", "normal_inputs", "=", "[", "name", "for", "name", "in", "self", ".", "_sequence_names", "\n", "if", "'mask'", "not", "in", "name", "]", "\n", "sequences", "=", "dict_subset", "(", "kwargs", ",", "normal_inputs", ",", "pop", "=", "True", ")", "\n", "glimpses", "=", "dict_subset", "(", "kwargs", ",", "self", ".", "_glimpse_names", ",", "pop", "=", "True", ")", "\n", "if", "self", ".", "add_contexts", ":", "\n", "            ", "kwargs", ".", "pop", "(", "self", ".", "attended_name", ")", "\n", "# attended_mask_name can be optional", "\n", "kwargs", ".", "pop", "(", "self", ".", "attended_mask_name", ",", "None", ")", "\n", "\n", "", "sequences", ".", "update", "(", "self", ".", "distribute", ".", "apply", "(", "\n", "as_dict", "=", "True", ",", "**", "dict_subset", "(", "dict_union", "(", "sequences", ",", "glimpses", ")", ",", "\n", "self", ".", "distribute", ".", "apply", ".", "inputs", ")", ")", ")", "\n", "current_states", "=", "self", ".", "transition", ".", "apply", "(", "\n", "iterate", "=", "False", ",", "as_list", "=", "True", ",", "\n", "**", "dict_union", "(", "sequences", ",", "kwargs", ")", ")", "\n", "return", "current_states", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.fake_attention_recurrent.FakeAttentionRecurrent.compute_states_outputs": [[191, 194], ["compute_states.property"], "methods", ["None"], ["", "@", "compute_states", ".", "property", "(", "'outputs'", ")", "\n", "def", "compute_states_outputs", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_state_names", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.fake_attention_recurrent.FakeAttentionRecurrent.transform_context": [[195, 201], ["fake_attention_recurrent.FakeAttentionRecurrent.context_transition.preprocess", "fake_attention_recurrent.FakeAttentionRecurrent.context_transition.apply", "theano.tensor.ones"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.SequenceContentAttention_withExInput_3d.preprocess", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.match_functions.GeneralMatchFunction.apply"], ["", "@", "application", "\n", "def", "transform_context", "(", "self", ",", "attended_list", ",", "attended_mask_list", ",", "states", ")", ":", "\n", "        ", "preprocessed_attended_list", "=", "self", ".", "context_transition", ".", "preprocess", "(", "attended_list", ")", ";", "\n", "utterance_attended", "=", "self", ".", "context_transition", ".", "apply", "(", "attended_list", ",", "preprocessed_attended_list", ",", "attended_mask_list", ",", "states", ",", "mask", "=", "tensor", ".", "ones", "(", "[", "attended_list", ".", "shape", "[", "2", "]", ",", "attended_list", ".", "shape", "[", "0", "]", "]", ")", ")", ";", "\n", "\n", "return", "utterance_attended", ";", "\n", "", "@", "recurrent", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.fake_attention_recurrent.FakeAttentionRecurrent.do_apply": [[201, 236], ["kwargs.pop", "kwargs.get", "blocks.utils.dict_subset", "blocks.utils.dict_subset", "blocks.utils.dict_subset", "fake_attention_recurrent.FakeAttentionRecurrent.context_transition.apply", "fake_attention_recurrent.FakeAttentionRecurrent.take_glimpses", "fake_attention_recurrent.FakeAttentionRecurrent.compute_states", "theano.tensor.ones", "blocks.utils.dict_union"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.match_functions.GeneralMatchFunction.apply", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.AttentionRecurrent.take_glimpses", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.AttentionRecurrent.compute_states"], ["", "@", "recurrent", "\n", "def", "do_apply", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "r\"\"\"Process a sequence attending the attended context every step.\n\n        In addition to the original sequence this method also requires\n        its preprocessed version, the one computed by the `preprocess`\n        method of the attention mechanism. Unknown keyword arguments\n        are passed to the wrapped transition.\n\n        Parameters\n        ----------\n        \\*\\*kwargs\n            Should contain current inputs, previous step states, contexts,\n            the preprocessed attended context, previous step glimpses.\n\n        Returns\n        -------\n        outputs : list of :class:`~tensor.TensorVariable`\n            The current step states and glimpses.\n\n        \"\"\"", "\n", "attended_list", "=", "kwargs", "[", "self", ".", "attended_name", "]", "\n", "preprocessed_attended_list", "=", "kwargs", ".", "pop", "(", "self", ".", "preprocessed_attended_name", ")", "\n", "attended_mask_list", "=", "kwargs", ".", "get", "(", "self", ".", "attended_mask_name", ")", "\n", "glimpses", "=", "dict_subset", "(", "kwargs", ",", "self", ".", "_glimpse_names", ",", "pop", "=", "True", ")", "\n", "sequences", "=", "dict_subset", "(", "kwargs", ",", "self", ".", "_sequence_names", ",", "pop", "=", "True", ",", "\n", "must_have", "=", "False", ")", "\n", "states", "=", "dict_subset", "(", "kwargs", ",", "self", ".", "_state_names", ",", "pop", "=", "True", ")", "\n", "\n", "utterance_attended", "=", "self", ".", "context_transition", ".", "apply", "(", "attended_list", ",", "preprocessed_attended_list", ",", "attended_mask_list", ",", "states", "[", "'states'", "]", ",", "mask", "=", "tensor", ".", "ones", "(", "[", "attended_list", ".", "shape", "[", "2", "]", ",", "attended_list", ".", "shape", "[", "0", "]", "]", ")", ")", ";", "\n", "current_glimpses", "=", "self", ".", "take_glimpses", "(", "utterance_attended", ")", "#?", "\n", "current_states", "=", "self", ".", "compute_states", "(", "\n", "as_list", "=", "True", ",", "\n", "**", "dict_union", "(", "sequences", ",", "states", ",", "{", "'weighted_averages'", ":", "current_glimpses", "}", ",", "kwargs", ")", ")", "\n", "return", "current_states", "+", "[", "current_glimpses", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.fake_attention_recurrent.FakeAttentionRecurrent.do_apply_sequences": [[238, 241], ["do_apply.property"], "methods", ["None"], ["", "@", "do_apply", ".", "property", "(", "'sequences'", ")", "\n", "def", "do_apply_sequences", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_sequence_names", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.fake_attention_recurrent.FakeAttentionRecurrent.do_apply_contexts": [[242, 245], ["do_apply.property"], "methods", ["None"], ["", "@", "do_apply", ".", "property", "(", "'contexts'", ")", "\n", "def", "do_apply_contexts", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_context_names", "+", "[", "self", ".", "preprocessed_attended_name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.fake_attention_recurrent.FakeAttentionRecurrent.do_apply_states": [[246, 249], ["do_apply.property"], "methods", ["None"], ["", "@", "do_apply", ".", "property", "(", "'states'", ")", "\n", "def", "do_apply_states", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_state_names", "+", "self", ".", "_glimpse_names", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.fake_attention_recurrent.FakeAttentionRecurrent.do_apply_outputs": [[250, 253], ["do_apply.property"], "methods", ["None"], ["", "@", "do_apply", ".", "property", "(", "'outputs'", ")", "\n", "def", "do_apply_outputs", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_state_names", "+", "self", ".", "_glimpse_names", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.fake_attention_recurrent.FakeAttentionRecurrent.apply": [[254, 268], ["fake_attention_recurrent.FakeAttentionRecurrent.context_transition.preprocess", "fake_attention_recurrent.FakeAttentionRecurrent.do_apply", "blocks.utils.dict_union"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.SequenceContentAttention_withExInput_3d.preprocess", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.AttentionRecurrent.do_apply"], ["", "@", "application", "\n", "def", "apply", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Preprocess a sequence attending the attended context at every step.\n\n        Preprocesses the attended context and runs :meth:`do_apply`. See\n        :meth:`do_apply` documentation for further information.\n\n        \"\"\"", "\n", "attended_list", "=", "kwargs", "[", "self", ".", "attended_name", "]", ";", "\n", "preprocessed_attended_list", "=", "self", ".", "context_transition", ".", "preprocess", "(", "attended_list", ")", ";", "\n", "return", "self", ".", "do_apply", "(", "\n", "**", "dict_union", "(", "kwargs", ",", "\n", "{", "self", ".", "preprocessed_attended_name", ":", "\n", "preprocessed_attended_list", "}", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.fake_attention_recurrent.FakeAttentionRecurrent.apply_delegate": [[269, 273], ["fake_attention_recurrent.FakeAttentionRecurrent.do_apply.__get__"], "methods", ["None"], ["", "@", "apply", ".", "delegate", "\n", "def", "apply_delegate", "(", "self", ")", ":", "\n", "# TODO: Nice interface for this trick?", "\n", "        ", "return", "self", ".", "do_apply", ".", "__get__", "(", "self", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.fake_attention_recurrent.FakeAttentionRecurrent.apply_contexts": [[274, 277], ["apply.property"], "methods", ["None"], ["", "@", "apply", ".", "property", "(", "'contexts'", ")", "\n", "def", "apply_contexts", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_context_names", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.fake_attention_recurrent.FakeAttentionRecurrent.initial_states": [[278, 283], ["blocks.utils.pack", "blocks.utils.pack", "fake_attention_recurrent.FakeAttentionRecurrent.transition.initial_states", "theano.tensor.zeros"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.AttentionRecurrent.initial_states"], ["", "@", "application", "\n", "def", "initial_states", "(", "self", ",", "batch_size", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "(", "pack", "(", "self", ".", "transition", ".", "initial_states", "(", "\n", "batch_size", ",", "**", "kwargs", ")", ")", "+", "\n", "pack", "(", "[", "tensor", ".", "zeros", "(", "(", "batch_size", ",", "self", ".", "representationDim", "/", "2", ")", ")", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.fake_attention_recurrent.FakeAttentionRecurrent.initial_states_outputs": [[284, 287], ["initial_states.property"], "methods", ["None"], ["", "@", "initial_states", ".", "property", "(", "'outputs'", ")", "\n", "def", "initial_states_outputs", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "do_apply", ".", "states", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.fake_attention_recurrent.FakeAttentionRecurrent.get_dim": [[288, 302], ["fake_attention_recurrent.FakeAttentionRecurrent.transition.get_dim"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.AttentionRecurrent.get_dim"], ["", "def", "get_dim", "(", "self", ",", "name", ")", ":", "\n", "        ", "if", "name", "in", "self", ".", "_glimpse_names", ":", "\n", "            ", "return", "self", ".", "representationDim", "/", "2", "\n", "#     return self.attention.get_dim(name)", "\n", "# if name == self.preprocessed_attended_name:", "\n", "#     (original_name,) = self.attention.preprocess.outputs", "\n", "#     return self.attention.get_dim(original_name)", "\n", "# if self.add_contexts:", "\n", "#     if name == self.attended_name:", "\n", "#         return self.attention.get_dim(", "\n", "#             self.attention.take_glimpses.inputs[0])", "\n", "#     if name == self.attended_mask_name:", "\n", "#         return 0", "\n", "", "return", "self", ".", "transition", ".", "get_dim", "(", "name", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_l.SequenceContentAttention.__init__": [[65, 100], ["blocks.bricks.base.lazy", "blocks.bricks.attention.GenericSequenceAttention.__init__", "blocks.bricks.Linear", "blocks.bricks.Linear", "blocks.bricks.Linear", "blocks.bricks.Linear", "match_functions.SumMatchFunction"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.sampling.ModelInfo.__init__"], ["@", "lazy", "(", "allocation", "=", "[", "'match_dim'", "]", ")", "\n", "def", "__init__", "(", "self", ",", "match_dim", ",", "\n", "use_local_attention", "=", "False", ",", "window_size", "=", "10", ",", "sigma", "=", "None", ",", "\n", "state_transformer", "=", "None", ",", "local_state_transformer", "=", "None", ",", "\n", "local_predictor", "=", "None", ",", "attended_transformer", "=", "None", ",", "\n", "energy_computer", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "SequenceContentAttention", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "if", "not", "state_transformer", ":", "\n", "            ", "state_transformer", "=", "Linear", "(", "use_bias", "=", "False", ",", "name", "=", "\"state_trans\"", ")", "\n", "", "if", "not", "local_state_transformer", ":", "\n", "            ", "local_state_transformer", "=", "Linear", "(", "use_bias", "=", "False", ",", "\n", "name", "=", "\"local_state_trans\"", ")", "\n", "", "if", "not", "local_predictor", ":", "\n", "            ", "local_predictor", "=", "Linear", "(", "use_bias", "=", "False", ",", "name", "=", "\"local_pred\"", ")", "\n", "", "if", "sigma", "is", "None", ":", "\n", "            ", "sigma", "=", "window_size", "*", "1.0", "/", "2", "\n", "", "self", ".", "use_local_attention", "=", "use_local_attention", "\n", "self", ".", "sigma", "=", "sigma", "*", "sigma", "\n", "self", ".", "match_dim", "=", "match_dim", "\n", "self", ".", "state_name", "=", "self", ".", "state_names", "[", "0", "]", "\n", "\n", "self", ".", "state_transformer", "=", "state_transformer", "\n", "self", ".", "local_state_transformer", "=", "local_state_transformer", "\n", "self", ".", "local_predictor", "=", "local_predictor", "\n", "\n", "if", "not", "attended_transformer", ":", "\n", "            ", "attended_transformer", "=", "Linear", "(", "name", "=", "\"preprocess\"", ")", "\n", "", "if", "not", "energy_computer", ":", "\n", "            ", "energy_computer", "=", "SumMatchFunction", "(", "name", "=", "\"energy_comp\"", ")", "\n", "", "self", ".", "attended_transformer", "=", "attended_transformer", "\n", "self", ".", "energy_computer", "=", "energy_computer", "\n", "\n", "self", ".", "children", "=", "[", "self", ".", "state_transformer", ",", "self", ".", "local_state_transformer", ",", "\n", "self", ".", "local_predictor", ",", "self", ".", "attended_transformer", ",", "\n", "energy_computer", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_l.SequenceContentAttention._push_allocation_config": [[101, 118], ["None"], "methods", ["None"], ["", "def", "_push_allocation_config", "(", "self", ")", ":", "\n", "        ", "self", ".", "state_dim", "=", "self", ".", "state_dims", "[", "0", "]", "\n", "\n", "self", ".", "state_transformer", ".", "input_dim", "=", "self", ".", "state_dim", "\n", "self", ".", "state_transformer", ".", "output_dim", "=", "self", ".", "match_dim", "\n", "\n", "self", ".", "local_state_transformer", ".", "input_dim", "=", "self", ".", "state_dim", "\n", "self", ".", "local_state_transformer", ".", "output_dim", "=", "self", ".", "match_dim", "\n", "\n", "self", ".", "local_predictor", ".", "input_dim", "=", "self", ".", "state_dim", "\n", "self", ".", "local_predictor", ".", "output_dim", "=", "1", "\n", "\n", "self", ".", "attended_transformer", ".", "input_dim", "=", "self", ".", "attended_dim", "\n", "self", ".", "attended_transformer", ".", "output_dim", "=", "self", ".", "match_dim", "\n", "\n", "self", ".", "energy_computer", ".", "input_dim", "=", "self", ".", "match_dim", "\n", "self", ".", "energy_computer", ".", "output_dim", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_l.SequenceContentAttention.compute_energies": [[119, 133], ["attention_with_l.SequenceContentAttention.state_transformer.apply", "attention_with_l.SequenceContentAttention.energy_computer.apply", "attention_with_l.SequenceContentAttention.preprocess"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.match_functions.GeneralMatchFunction.apply", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.match_functions.GeneralMatchFunction.apply", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.SequenceContentAttention_withExInput_3d.preprocess"], ["", "@", "application", "\n", "def", "compute_energies", "(", "self", ",", "attended", ",", "preprocessed_attended", ",", "states", ")", ":", "\n", "        ", "if", "not", "preprocessed_attended", ":", "\n", "            ", "preprocessed_attended", "=", "self", ".", "preprocess", "(", "attended", ")", "\n", "", "_states", "=", "states", "[", "self", ".", "state_name", "]", "\n", "transformed_states", "=", "self", ".", "state_transformer", ".", "apply", "(", "_states", ")", "\n", "# Broadcasting of transformed states should be done automatically", "\n", "# match_vectors = sum(transformed_states.values(),", "\n", "#                     preprocessed_attended)", "\n", "# energies = self.energy_computer.apply(match_vectors).reshape(", "\n", "#     match_vectors.shape[:-1], ndim=match_vectors.ndim - 1)", "\n", "energies", "=", "self", ".", "energy_computer", ".", "apply", "(", "transformed_states", ",", "\n", "preprocessed_attended", ")", "\n", "return", "energies", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_l.SequenceContentAttention.get_local_predition": [[134, 147], ["attention_with_l.SequenceContentAttention.local_state_transformer.apply", "attention_with_l.SequenceContentAttention.local_predictor.apply().reshape", "theano.tensor.nnet.sigmoid", "theano.tensor.sum", "attention_with_l.SequenceContentAttention.local_predictor.apply", "theano.tensor.tanh"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.match_functions.GeneralMatchFunction.apply", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.match_functions.GeneralMatchFunction.apply"], ["", "@", "application", "\n", "def", "get_local_predition", "(", "self", ",", "states", ",", "attended", ",", "attended_mask", ")", ":", "\n", "        ", "_states", "=", "states", "[", "self", ".", "state_name", "]", "\n", "# local_states: [batch, features]", "\n", "local_states", "=", "self", ".", "local_state_transformer", ".", "apply", "(", "_states", ")", "\n", "# local_prediction is reshaped to [batch]", "\n", "local_prediction", "=", "self", ".", "local_predictor", ".", "apply", "(", "\n", "tensor", ".", "tanh", "(", "local_states", ")", ")", ".", "reshape", "(", "\n", "local_states", ".", "shape", "[", ":", "-", "1", "]", ",", "ndim", "=", "local_states", ".", "ndim", "-", "1", ")", "\n", "local_prediction", "=", "tensor", ".", "nnet", ".", "sigmoid", "(", "local_prediction", ")", "\n", "# attended_mask is [time, batch]", "\n", "_attended_mask", "=", "tensor", ".", "sum", "(", "attended_mask", ",", "axis", "=", "0", ")", "\n", "return", "_attended_mask", "*", "local_prediction", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_l.SequenceContentAttention.adjust_weights": [[148, 165], ["theano.tensor.arange().repeat().reshape().astype", "theano.tensor.exp", "theano.tensor.pow", "theano.tensor.arange().repeat().reshape", "theano.tensor.arange().repeat", "theano.tensor.arange"], "methods", ["None"], ["", "@", "application", "\n", "def", "adjust_weights", "(", "self", ",", "attended_mask", ",", "weights", ",", "local_prediction", ")", ":", "\n", "# weights: [time, batch]", "\n", "# local_prediction: [batch]", "\n", "# locations: [time, batch]", "\n", "        ", "locations", "=", "tensor", ".", "arange", "(", "\n", "attended_mask", ".", "shape", "[", "0", "]", ")", ".", "repeat", "(", "\n", "attended_mask", ".", "shape", "[", "1", "]", ")", ".", "reshape", "(", "\n", "attended_mask", ".", "shape", ")", ".", "astype", "(", "\n", "theano", ".", "config", ".", "floatX", ")", "\n", "# diff: [time, batch]", "\n", "diff", "=", "locations", "-", "local_prediction", "\n", "# gauss: [time, batch]", "\n", "gauss", "=", "tensor", ".", "pow", "(", "diff", ",", "2", ")", "/", "(", "2", "*", "self", ".", "sigma", ")", "\n", "gauss", "=", "tensor", ".", "exp", "(", "-", "gauss", ")", "\n", "weights", "=", "weights", "*", "gauss", "\n", "return", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_l.SequenceContentAttention.compute_weights": [[166, 199], ["theano.tensor.exp", "energies.max().dimshuffle", "theano.tensor.exp.sum().dimshuffle", "theano.tensor.all().dimshuffle", "energies.max", "theano.tensor.exp.sum", "theano.tensor.all"], "methods", ["None"], ["", "@", "application", "\n", "def", "compute_weights", "(", "self", ",", "energies", ",", "attended_mask", ")", ":", "\n", "        ", "\"\"\"Compute weights from energies in softmax-like fashion.\n\n        .. todo ::\n\n            Use :class:`~blocks.bricks.Softmax`.\n\n        Parameters\n        ----------\n        energies : :class:`~theano.Variable`\n            The energies. Must be of the same shape as the mask.\n        attended_mask : :class:`~theano.Variable`\n            The mask for the attended. The index in the sequence must be\n            the first dimension.\n\n        Returns\n        -------\n        weights : :class:`~theano.Variable`\n            Summing to 1 non-negative weights of the same shape\n            as `energies`.\n\n        \"\"\"", "\n", "# Stabilize energies first and then exponentiate", "\n", "energies", "=", "energies", "-", "energies", ".", "max", "(", "axis", "=", "1", ")", ".", "dimshuffle", "(", "[", "0", ",", "'x'", ",", "1", "]", ")", ";", "\n", "unnormalized_weights", "=", "tensor", ".", "exp", "(", "energies", ")", "\n", "if", "attended_mask", ":", "\n", "            ", "unnormalized_weights", "*=", "attended_mask", "\n", "#If mask consists of all zeros use 1 as the normalization coefficient", "\n", "", "normalization", "=", "(", "unnormalized_weights", ".", "sum", "(", "axis", "=", "1", ")", ".", "dimshuffle", "(", "[", "0", ",", "'x'", ",", "1", "]", ")", "+", "\n", "tensor", ".", "all", "(", "1", "-", "attended_mask", ",", "axis", "=", "1", ")", ".", "dimshuffle", "(", "[", "0", ",", "'x'", ",", "1", "]", ")", ")", "\n", "# normalization = unnormalized_weights.sum(axis=1).dimshuffle([0,'x',1])", "\n", "return", "unnormalized_weights", "/", "normalization", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_l.SequenceContentAttention.compute_weighted_averages": [[200, 222], ["theano.tensor.shape_padright"], "methods", ["None"], ["", "@", "application", "\n", "def", "compute_weighted_averages", "(", "self", ",", "weights", ",", "attended", ")", ":", "\n", "        ", "\"\"\"Compute weighted averages of the attended sequence vectors.\n\n        Parameters\n        ----------\n        weights : :class:`~theano.Variable`\n            The weights. The shape must be equal to the attended shape\n            without the last dimension.\n        attended : :class:`~theano.Variable`\n            The attended. The index in the sequence must be the first\n            dimension.\n\n        Returns\n        -------\n        weighted_averages : :class:`~theano.Variable`\n            The weighted averages of the attended elements. The shape\n            is equal to the attended shape with the first dimension\n            dropped.\n\n        \"\"\"", "\n", "return", "(", "tensor", ".", "shape_padright", "(", "weights", ")", "*", "attended", ")", ".", "sum", "(", "axis", "=", "1", ")", "\n", "#return (weights * attended).sum(axis=1)", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_l.SequenceContentAttention.take_glimpses": [[224, 264], ["blocks.bricks.base.application", "attention_with_l.SequenceContentAttention.compute_energies", "attention_with_l.SequenceContentAttention.compute_weights", "attention_with_l.SequenceContentAttention.compute_weighted_averages", "attention_with_l.SequenceContentAttention.get_local_predition", "attention_with_l.SequenceContentAttention.adjust_weights", "attention_with_l.SequenceContentAttention.transpose"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.SequenceContentAttention_withExInput_3d.compute_energies", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.SequenceContentAttention_withExInput_3d.compute_weights", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.SequenceContentAttention_withExInput_3d.compute_weighted_averages", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.SequenceContentAttention_withExInput_3d.get_local_predition", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.SequenceContentAttention_withExInput_3d.adjust_weights"], ["", "@", "application", "(", "outputs", "=", "[", "'weighted_averages'", ",", "'weights'", "]", ")", "\n", "def", "take_glimpses", "(", "self", ",", "attended", ",", "preprocessed_attended", "=", "None", ",", "\n", "attended_mask", "=", "None", ",", "**", "states", ")", ":", "\n", "        ", "r\"\"\"Compute attention weights and produce glimpses.\n\n        Parameters\n        ----------\n        attended : :class:`~tensor.TensorVariable`\n            The sequence, time is the 1-st dimension.\n        preprocessed_attended : :class:`~tensor.TensorVariable`\n            The preprocessed sequence. If ``None``, is computed by calling\n            :meth:`preprocess`.\n        attended_mask : :class:`~tensor.TensorVariable`\n            A 0/1 mask specifying available data. 0 means that the\n            corresponding sequence element is fake.\n        \\*\\*states\n            The states of the network.\n\n        Returns\n        -------\n        weighted_averages : :class:`~theano.Variable`\n            Linear combinations of sequence elements with the attention\n            weights.\n        weights : :class:`~theano.Variable`\n            The attention weights. The first dimension is batch, the second\n            is time.\n\n        \"\"\"", "\n", "energies", "=", "self", ".", "compute_energies", "(", "\n", "attended", ",", "preprocessed_attended", ",", "states", ")", "\n", "# weights has dimensions: [context_num,time (src), batch]", "\n", "weights", "=", "self", ".", "compute_weights", "(", "energies", ",", "attended_mask", ")", "\n", "if", "self", ".", "use_local_attention", ":", "\n", "# local_pred should have dimension: [batch],", "\n", "# the predicted position for each batch", "\n", "            ", "local_pred", "=", "self", ".", "get_local_predition", "(", "\n", "states", ",", "attended", ",", "attended_mask", ")", "\n", "weights", "=", "self", ".", "adjust_weights", "(", "attended_mask", ",", "weights", ",", "local_pred", ")", "\n", "", "weighted_averages", "=", "self", ".", "compute_weighted_averages", "(", "weights", ",", "attended", ")", "\n", "return", "weighted_averages", ",", "weights", ".", "transpose", "(", "(", "2", ",", "1", ",", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_l.SequenceContentAttention.take_glimpses_inputs": [[265, 269], ["take_glimpses.property"], "methods", ["None"], ["", "@", "take_glimpses", ".", "property", "(", "'inputs'", ")", "\n", "def", "take_glimpses_inputs", "(", "self", ")", ":", "\n", "        ", "return", "(", "[", "'attended'", ",", "'preprocessed_attended'", ",", "'attended_mask'", "]", "+", "\n", "self", ".", "state_names", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_l.SequenceContentAttention.initial_glimpses": [[270, 274], ["blocks.bricks.base.application", "theano.tensor.zeros", "theano.tensor.zeros"], "methods", ["None"], ["", "@", "application", "(", "outputs", "=", "[", "'weighted_averages'", ",", "'weights'", "]", ")", "\n", "def", "initial_glimpses", "(", "self", ",", "batch_size", ",", "attended", ")", ":", "\n", "        ", "return", "[", "tensor", ".", "zeros", "(", "(", "batch_size", ",", "self", ".", "attended_dim", ")", ")", ",", "\n", "tensor", ".", "zeros", "(", "(", "batch_size", ",", "attended", ".", "shape", "[", "1", "]", ",", "attended", ".", "shape", "[", "0", "]", ")", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_l.SequenceContentAttention.preprocess": [[275, 286], ["blocks.bricks.base.application", "attention_with_l.SequenceContentAttention.attended_transformer.apply"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.match_functions.GeneralMatchFunction.apply"], ["", "@", "application", "(", "inputs", "=", "[", "'attended'", "]", ",", "outputs", "=", "[", "'preprocessed_attended'", "]", ")", "\n", "def", "preprocess", "(", "self", ",", "attended", ")", ":", "\n", "        ", "\"\"\"Preprocess the sequence for computing attention weights.\n\n        Parameters\n        ----------\n        attended : :class:`~tensor.TensorVariable`\n            The attended sequence, time is the 1-st dimension.\n\n        \"\"\"", "\n", "return", "self", ".", "attended_transformer", ".", "apply", "(", "attended", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_l.SequenceContentAttention.get_dim": [[288, 294], ["super().get_dim"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.AttentionRecurrent.get_dim"], ["", "def", "get_dim", "(", "self", ",", "name", ")", ":", "\n", "        ", "if", "name", "in", "[", "'weighted_averages'", "]", ":", "\n", "            ", "return", "self", ".", "attended_dim", "\n", "", "if", "name", "in", "[", "'weights'", "]", ":", "\n", "            ", "return", "0", "\n", "", "return", "super", "(", "SequenceContentAttention", ",", "self", ")", ".", "get_dim", "(", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_l.AttentionRecurrent_withL.__init__": [[356, 399], ["blocks.bricks.attention.AbstractAttentionRecurrent.__init__", "list", "list", "list", "blocks.bricks.parallel.Distribute"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.sampling.ModelInfo.__init__"], ["def", "__init__", "(", "self", ",", "transition", ",", "context_transition", ",", "attention", ",", "distribute", "=", "None", ",", "\n", "add_contexts", "=", "True", ",", "\n", "attended_name", "=", "None", ",", "attended_mask_name", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "AttentionRecurrent_withL", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "_sequence_names", "=", "list", "(", "transition", ".", "apply", ".", "sequences", ")", "\n", "self", ".", "_state_names", "=", "list", "(", "transition", ".", "apply", ".", "states", ")", "\n", "self", ".", "_context_names", "=", "list", "(", "transition", ".", "apply", ".", "contexts", ")", "\n", "if", "add_contexts", ":", "\n", "            ", "if", "not", "attended_name", ":", "\n", "                ", "attended_name", "=", "'attended_list'", "\n", "", "if", "not", "attended_mask_name", ":", "\n", "                ", "attended_mask_name", "=", "'attended_mask_list'", "\n", "", "self", ".", "_context_names", "+=", "[", "attended_name", ",", "attended_mask_name", "]", "\n", "", "else", ":", "\n", "            ", "attended_name", "=", "self", ".", "_context_names", "[", "0", "]", "\n", "attended_mask_name", "=", "self", ".", "_context_names", "[", "1", "]", "\n", "", "if", "not", "distribute", ":", "\n", "            ", "normal_inputs", "=", "[", "name", "for", "name", "in", "self", ".", "_sequence_names", "\n", "if", "'mask'", "not", "in", "name", "]", "\n", "distribute", "=", "Distribute", "(", "normal_inputs", ",", "\n", "attention", ".", "take_glimpses", ".", "outputs", "[", "0", "]", ")", "\n", "\n", "", "self", ".", "transition", "=", "transition", "\n", "self", ".", "context_transition", "=", "context_transition", "\n", "self", ".", "attention", "=", "attention", "\n", "self", ".", "distribute", "=", "distribute", "\n", "self", ".", "add_contexts", "=", "add_contexts", "\n", "self", ".", "attended_name", "=", "attended_name", "\n", "self", ".", "attended_mask_name", "=", "attended_mask_name", "\n", "\n", "self", ".", "preprocessed_attended_name", "=", "\"preprocessed_\"", "+", "self", ".", "attended_name", "\n", "\n", "self", ".", "_glimpse_names", "=", "self", ".", "attention", ".", "take_glimpses", ".", "outputs", "#unchanged", "\n", "# We need to determine which glimpses are fed back.", "\n", "# Currently we extract it from `take_glimpses` signature.", "\n", "# self.previous_glimpses_needed = [", "\n", "#     name for name in self._glimpse_names", "\n", "#     if name in self.attention.take_glimpses.inputs]", "\n", "self", ".", "previous_glimpses_needed", "=", "[", "]", "\n", "\n", "\n", "self", ".", "children", "=", "[", "self", ".", "transition", ",", "self", ".", "context_transition", ",", "self", ".", "attention", ",", "self", ".", "distribute", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_l.AttentionRecurrent_withL._push_allocation_config": [[400, 408], ["attention_with_l.AttentionRecurrent_withL.transition.get_dims", "attention_with_l.AttentionRecurrent_withL.get_dim", "attention_with_l.AttentionRecurrent_withL.attention.get_dim", "attention_with_l.AttentionRecurrent_withL.transition.get_dims"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.AttentionRecurrent.get_dim", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.AttentionRecurrent.get_dim"], ["", "def", "_push_allocation_config", "(", "self", ")", ":", "\n", "        ", "self", ".", "attention", ".", "state_dims", "=", "self", ".", "transition", ".", "get_dims", "(", "\n", "self", ".", "attention", ".", "state_names", ")", "\n", "self", ".", "attention", ".", "attended_dim", "=", "self", ".", "get_dim", "(", "self", ".", "attended_name", ")", "\n", "self", ".", "distribute", ".", "source_dim", "=", "self", ".", "attention", ".", "get_dim", "(", "\n", "self", ".", "distribute", ".", "source_name", ")", "\n", "self", ".", "distribute", ".", "target_dims", "=", "self", ".", "transition", ".", "get_dims", "(", "\n", "self", ".", "distribute", ".", "target_names", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_l.AttentionRecurrent_withL.take_glimpses": [[409, 440], ["blocks.utils.dict_subset", "attention_with_l.AttentionRecurrent_withL.attention.take_glimpses", "kwargs.pop", "kwargs.pop", "kwargs.pop"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.AttentionRecurrent.take_glimpses"], ["", "@", "application", "\n", "def", "take_glimpses", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "r\"\"\"Compute glimpses with the attention mechanism.\n\n        A thin wrapper over `self.attention.take_glimpses`: takes care\n        of choosing and renaming the necessary arguments.\n\n        Parameters\n        ----------\n        \\*\\*kwargs\n            Must contain the attended, previous step states and glimpses.\n            Can optionaly contain the attended mask and the preprocessed\n            attended.\n\n        Returns\n        -------\n        glimpses : list of :class:`~tensor.TensorVariable`\n            Current step glimpses.\n\n        \"\"\"", "\n", "states", "=", "dict_subset", "(", "kwargs", ",", "self", ".", "_state_names", ",", "pop", "=", "True", ")", "\n", "# glimpses = dict_subset(kwargs, self._glimpse_names, pop=True)", "\n", "# glimpses_needed = dict_subset(glimpses, self.previous_glimpses_needed)", "\n", "result", "=", "self", ".", "attention", ".", "take_glimpses", "(", "\n", "kwargs", ".", "pop", "(", "self", ".", "attended_name", ")", ",", "\n", "kwargs", ".", "pop", "(", "self", ".", "preprocessed_attended_name", ",", "None", ")", ",", "\n", "kwargs", ".", "pop", "(", "self", ".", "attended_mask_name", ",", "None", ")", ",", "\n", "**", "states", ")", "\n", "# At this point kwargs may contain additional items.", "\n", "# e.g. AttentionRecurrent.transition.apply.contexts", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_l.AttentionRecurrent_withL.take_glimpses_outputs": [[441, 444], ["take_glimpses.property"], "methods", ["None"], ["", "@", "take_glimpses", ".", "property", "(", "'outputs'", ")", "\n", "def", "take_glimpses_outputs", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_glimpse_names", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_l.AttentionRecurrent_withL.compute_states": [[445, 483], ["blocks.utils.dict_subset", "blocks.utils.dict_subset", "blocks.utils.dict_subset.update", "attention_with_l.AttentionRecurrent_withL.transition.apply", "kwargs.pop", "kwargs.pop", "attention_with_l.AttentionRecurrent_withL.distribute.apply", "blocks.utils.dict_union", "blocks.utils.dict_subset", "blocks.utils.dict_union"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.match_functions.GeneralMatchFunction.apply", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.match_functions.GeneralMatchFunction.apply"], ["", "@", "application", "\n", "def", "compute_states", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "r\"\"\"Compute current states when glimpses have already been computed.\n\n        Combines an application of the `distribute` that alter the\n        sequential inputs of the wrapped transition and an application of\n        the wrapped transition. All unknown keyword arguments go to\n        the wrapped transition.\n\n        Parameters\n        ----------\n        \\*\\*kwargs\n            Should contain everything what `self.transition` needs\n            and in addition the current glimpses.\n\n        Returns\n        -------\n        current_states : list of :class:`~tensor.TensorVariable`\n            Current states computed by `self.transition`.\n\n        \"\"\"", "\n", "# make sure we are not popping the mask", "\n", "normal_inputs", "=", "[", "name", "for", "name", "in", "self", ".", "_sequence_names", "\n", "if", "'mask'", "not", "in", "name", "]", "\n", "sequences", "=", "dict_subset", "(", "kwargs", ",", "normal_inputs", ",", "pop", "=", "True", ")", "\n", "glimpses", "=", "dict_subset", "(", "kwargs", ",", "self", ".", "_glimpse_names", ",", "pop", "=", "True", ")", "\n", "if", "self", ".", "add_contexts", ":", "\n", "            ", "kwargs", ".", "pop", "(", "self", ".", "attended_name", ")", "\n", "# attended_mask_name can be optional", "\n", "kwargs", ".", "pop", "(", "self", ".", "attended_mask_name", ",", "None", ")", "\n", "\n", "", "sequences", ".", "update", "(", "self", ".", "distribute", ".", "apply", "(", "\n", "as_dict", "=", "True", ",", "**", "dict_subset", "(", "dict_union", "(", "sequences", ",", "glimpses", ")", ",", "\n", "self", ".", "distribute", ".", "apply", ".", "inputs", ")", ")", ")", "\n", "current_states", "=", "self", ".", "transition", ".", "apply", "(", "\n", "iterate", "=", "False", ",", "as_list", "=", "True", ",", "\n", "**", "dict_union", "(", "sequences", ",", "kwargs", ")", ")", "\n", "return", "current_states", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_l.AttentionRecurrent_withL.compute_states_outputs": [[484, 487], ["compute_states.property"], "methods", ["None"], ["", "@", "compute_states", ".", "property", "(", "'outputs'", ")", "\n", "def", "compute_states_outputs", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_state_names", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_l.AttentionRecurrent_withL.transform_context": [[488, 494], ["attention_with_l.AttentionRecurrent_withL.context_transition.preprocess", "attention_with_l.AttentionRecurrent_withL.context_transition.apply", "theano.tensor.ones"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.SequenceContentAttention_withExInput_3d.preprocess", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.match_functions.GeneralMatchFunction.apply"], ["", "@", "application", "\n", "def", "transform_context", "(", "self", ",", "attended_list", ",", "attended_mask_list", ",", "states", ")", ":", "\n", "        ", "preprocessed_attended_list", "=", "self", ".", "context_transition", ".", "preprocess", "(", "attended_list", ")", ";", "\n", "utterance_attended", "=", "self", ".", "context_transition", ".", "apply", "(", "attended_list", ",", "preprocessed_attended_list", ",", "attended_mask_list", ",", "states", ",", "mask", "=", "tensor", ".", "ones", "(", "[", "attended_list", ".", "shape", "[", "2", "]", ",", "attended_list", ".", "shape", "[", "0", "]", "]", ")", ")", ";", "\n", "\n", "return", "utterance_attended", ";", "\n", "", "@", "recurrent", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_l.AttentionRecurrent_withL.do_apply": [[494, 535], ["kwargs.pop", "kwargs.get", "blocks.utils.dict_subset", "blocks.utils.dict_subset", "blocks.utils.dict_subset", "attention_with_l.AttentionRecurrent_withL.context_transition.apply", "attention_with_l.AttentionRecurrent_withL.take_glimpses", "attention_with_l.AttentionRecurrent_withL.compute_states", "list", "theano.tensor.ones", "blocks.utils.dict_union", "blocks.utils.dict_union", "attention_with_l.AttentionRecurrent_withL.values", "theano.tensor.ones"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.match_functions.GeneralMatchFunction.apply", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.AttentionRecurrent.take_glimpses", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.AttentionRecurrent.compute_states"], ["", "@", "recurrent", "\n", "def", "do_apply", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "r\"\"\"Process a sequence attending the attended context every step.\n\n        In addition to the original sequence this method also requires\n        its preprocessed version, the one computed by the `preprocess`\n        method of the attention mechanism. Unknown keyword arguments\n        are passed to the wrapped transition.\n\n        Parameters\n        ----------\n        \\*\\*kwargs\n            Should contain current inputs, previous step states, contexts,\n            the preprocessed attended context, previous step glimpses.\n\n        Returns\n        -------\n        outputs : list of :class:`~tensor.TensorVariable`\n            The current step states and glimpses.\n\n        \"\"\"", "\n", "attended_list", "=", "kwargs", "[", "self", ".", "attended_name", "]", "\n", "preprocessed_attended_list", "=", "kwargs", ".", "pop", "(", "self", ".", "preprocessed_attended_name", ")", "\n", "attended_mask_list", "=", "kwargs", ".", "get", "(", "self", ".", "attended_mask_name", ")", "\n", "\n", "sequences", "=", "dict_subset", "(", "kwargs", ",", "self", ".", "_sequence_names", ",", "pop", "=", "True", ",", "\n", "must_have", "=", "False", ")", "\n", "states", "=", "dict_subset", "(", "kwargs", ",", "self", ".", "_state_names", ",", "pop", "=", "True", ")", "\n", "glimpses", "=", "dict_subset", "(", "kwargs", ",", "self", ".", "_glimpse_names", ",", "pop", "=", "True", ")", "\n", "\n", "utterance_attended", "=", "self", ".", "context_transition", ".", "apply", "(", "attended_list", ",", "preprocessed_attended_list", ",", "attended_mask_list", ",", "states", "[", "'states'", "]", ",", "mask", "=", "tensor", ".", "ones", "(", "[", "attended_list", ".", "shape", "[", "2", "]", ",", "attended_list", ".", "shape", "[", "0", "]", "]", ")", ")", ";", "\n", "current_glimpses", "=", "self", ".", "take_glimpses", "(", "\n", "as_dict", "=", "True", ",", "\n", "**", "dict_union", "(", "\n", "states", ",", "\n", "{", "self", ".", "attended_name", ":", "utterance_attended", ",", "\n", "self", ".", "attended_mask_name", ":", "tensor", ".", "ones", "(", "[", "attended_list", ".", "shape", "[", "0", "]", ",", "attended_list", ".", "shape", "[", "2", "]", "]", ")", "}", ")", ")", "\n", "current_states", "=", "self", ".", "compute_states", "(", "\n", "as_list", "=", "True", ",", "\n", "**", "dict_union", "(", "sequences", ",", "states", ",", "current_glimpses", ",", "kwargs", ")", ")", "\n", "return", "current_states", "+", "list", "(", "current_glimpses", ".", "values", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_l.AttentionRecurrent_withL.do_apply_sequences": [[537, 540], ["do_apply.property"], "methods", ["None"], ["", "@", "do_apply", ".", "property", "(", "'sequences'", ")", "\n", "def", "do_apply_sequences", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_sequence_names", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_l.AttentionRecurrent_withL.do_apply_contexts": [[541, 544], ["do_apply.property"], "methods", ["None"], ["", "@", "do_apply", ".", "property", "(", "'contexts'", ")", "\n", "def", "do_apply_contexts", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_context_names", "+", "[", "self", ".", "preprocessed_attended_name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_l.AttentionRecurrent_withL.do_apply_states": [[545, 548], ["do_apply.property"], "methods", ["None"], ["", "@", "do_apply", ".", "property", "(", "'states'", ")", "\n", "def", "do_apply_states", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_state_names", "+", "self", ".", "_glimpse_names", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_l.AttentionRecurrent_withL.do_apply_outputs": [[549, 552], ["do_apply.property"], "methods", ["None"], ["", "@", "do_apply", ".", "property", "(", "'outputs'", ")", "\n", "def", "do_apply_outputs", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_state_names", "+", "self", ".", "_glimpse_names", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_l.AttentionRecurrent_withL.apply": [[553, 567], ["attention_with_l.AttentionRecurrent_withL.context_transition.preprocess", "attention_with_l.AttentionRecurrent_withL.do_apply", "blocks.utils.dict_union"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.SequenceContentAttention_withExInput_3d.preprocess", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.AttentionRecurrent.do_apply"], ["", "@", "application", "\n", "def", "apply", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Preprocess a sequence attending the attended context at every step.\n\n        Preprocesses the attended context and runs :meth:`do_apply`. See\n        :meth:`do_apply` documentation for further information.\n\n        \"\"\"", "\n", "attended_list", "=", "kwargs", "[", "self", ".", "attended_name", "]", ";", "\n", "preprocessed_attended_list", "=", "self", ".", "context_transition", ".", "preprocess", "(", "attended_list", ")", ";", "\n", "return", "self", ".", "do_apply", "(", "\n", "**", "dict_union", "(", "kwargs", ",", "\n", "{", "self", ".", "preprocessed_attended_name", ":", "\n", "preprocessed_attended_list", "}", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_l.AttentionRecurrent_withL.apply_delegate": [[568, 572], ["attention_with_l.AttentionRecurrent_withL.do_apply.__get__"], "methods", ["None"], ["", "@", "apply", ".", "delegate", "\n", "def", "apply_delegate", "(", "self", ")", ":", "\n", "# TODO: Nice interface for this trick?", "\n", "        ", "return", "self", ".", "do_apply", ".", "__get__", "(", "self", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_l.AttentionRecurrent_withL.apply_contexts": [[573, 576], ["apply.property"], "methods", ["None"], ["", "@", "apply", ".", "property", "(", "'contexts'", ")", "\n", "def", "apply_contexts", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_context_names", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_l.AttentionRecurrent_withL.initial_states": [[577, 583], ["blocks.utils.pack", "blocks.utils.pack", "attention_with_l.AttentionRecurrent_withL.transition.initial_states", "attention_with_l.AttentionRecurrent_withL.attention.initial_glimpses"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.AttentionRecurrent.initial_states", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.SequenceContentAttention_withExInput_3d.initial_glimpses"], ["", "@", "application", "\n", "def", "initial_states", "(", "self", ",", "batch_size", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "(", "pack", "(", "self", ".", "transition", ".", "initial_states", "(", "\n", "batch_size", ",", "**", "kwargs", ")", ")", "+", "\n", "pack", "(", "self", ".", "attention", ".", "initial_glimpses", "(", "\n", "batch_size", ",", "kwargs", "[", "self", ".", "attended_name", "]", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_l.AttentionRecurrent_withL.initial_states_outputs": [[584, 587], ["initial_states.property"], "methods", ["None"], ["", "@", "initial_states", ".", "property", "(", "'outputs'", ")", "\n", "def", "initial_states_outputs", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "do_apply", ".", "states", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_l.AttentionRecurrent_withL.get_dim": [[588, 601], ["attention_with_l.AttentionRecurrent_withL.transition.get_dim", "attention_with_l.AttentionRecurrent_withL.attention.get_dim", "attention_with_l.AttentionRecurrent_withL.attention.get_dim", "attention_with_l.AttentionRecurrent_withL.attention.get_dim"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.AttentionRecurrent.get_dim", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.AttentionRecurrent.get_dim", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.AttentionRecurrent.get_dim", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.AttentionRecurrent.get_dim"], ["", "def", "get_dim", "(", "self", ",", "name", ")", ":", "\n", "        ", "if", "name", "in", "self", ".", "_glimpse_names", ":", "\n", "            ", "return", "self", ".", "attention", ".", "get_dim", "(", "name", ")", "\n", "", "if", "name", "==", "self", ".", "preprocessed_attended_name", ":", "\n", "            ", "(", "original_name", ",", ")", "=", "self", ".", "attention", ".", "preprocess", ".", "outputs", "\n", "return", "self", ".", "attention", ".", "get_dim", "(", "original_name", ")", "\n", "", "if", "self", ".", "add_contexts", ":", "\n", "            ", "if", "name", "==", "self", ".", "attended_name", ":", "\n", "                ", "return", "self", ".", "attention", ".", "get_dim", "(", "\n", "self", ".", "attention", ".", "take_glimpses", ".", "inputs", "[", "0", "]", ")", "\n", "", "if", "name", "==", "self", ".", "attended_mask_name", ":", "\n", "                ", "return", "0", "\n", "", "", "return", "self", ".", "transition", ".", "get_dim", "(", "name", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.learning_rate_halver.LearningRateHalver.__init__": [[22, 31], ["blocks.extensions.training.SharedVariableModifier.__init__"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.sampling.ModelInfo.__init__"], ["    ", "def", "__init__", "(", "self", ",", "record_name", ",", "comparator", ",", "learning_rate", ",", "\n", "patience_default", ",", "lower_threshold", "=", "0.001", ")", ":", "\n", "        ", "self", ".", "record_name", "=", "record_name", "\n", "self", ".", "comparator", "=", "comparator", "\n", "self", ".", "learning_rate", "=", "learning_rate", "\n", "self", ".", "patience_default", "=", "patience_default", "\n", "self", ".", "patience", "=", "patience_default", "\n", "self", ".", "lower_threshold", "=", "lower_threshold", "\n", "super", "(", "LearningRateHalver", ",", "self", ")", ".", "__init__", "(", "self", ".", "learning_rate", ",", "halver", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.learning_rate_halver.LearningRateHalver.do_half_nan": [[32, 36], ["learning_rate_halver.LearningRateHalver.main_loop.log.current_row[].tolist", "numpy.isnan"], "methods", ["None"], ["", "def", "do_half_nan", "(", "self", ")", ":", "\n", "        ", "if", "'perplexity'", "in", "self", ".", "main_loop", ".", "log", ".", "current_row", ":", "\n", "            ", "pepl", "=", "self", ".", "main_loop", ".", "log", ".", "current_row", "[", "'perplexity'", "]", ".", "tolist", "(", ")", "\n", "return", "numpy", ".", "isnan", "(", "pepl", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.learning_rate_halver.LearningRateHalver.do_half_patient": [[37, 56], ["sorted", "learning_rate_halver.LearningRateHalver.comparator", "learning_rate_halver.LearningRateHalver.main_loop.log.items", "len", "learning_rate_halver.LearningRateHalver.remove_old_models", "operator.itemgetter"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.learning_rate_halver.OldModelRemover.remove_old_models"], ["", "", "def", "do_half_patient", "(", "self", ")", ":", "\n", "        ", "logs", "=", "sorted", "(", "self", ".", "main_loop", ".", "log", ".", "items", "(", ")", ",", "\n", "key", "=", "operator", ".", "itemgetter", "(", "0", ")", ",", "\n", "reverse", "=", "True", ")", "\n", "bleu_values", "=", "[", "y", "[", "self", ".", "record_name", "]", "for", "x", ",", "y", "in", "logs", "\n", "if", "self", ".", "record_name", "in", "y", "]", "\n", "if", "len", "(", "bleu_values", ")", "<", "2", ":", "\n", "            ", "return", "False", "\n", "", "current_value", "=", "bleu_values", "[", "-", "1", "]", "\n", "previous_value", "=", "bleu_values", "[", "-", "2", "]", "\n", "if", "self", ".", "comparator", "(", "current_value", ",", "previous_value", ")", ":", "\n", "            ", "self", ".", "patience", "-=", "1", "\n", "if", "self", ".", "patience", "==", "0", ":", "\n", "                ", "self", ".", "patience", "=", "self", ".", "patience_default", "\n", "return", "True", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "patience", "=", "self", ".", "patience_default", "\n", "self", ".", "remove_old_models", "(", ")", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.learning_rate_halver.LearningRateHalver.reload_parameters": [[57, 60], ["learning_rate_halver.LearningRateHalver.load_parameter_values", "learning_rate_halver.LearningRateHalver.set_model_parameters"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.checkpoint.SaveLoadUtils.load_parameter_values", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.checkpoint.SaveLoadUtils.set_model_parameters"], ["", "def", "reload_parameters", "(", "self", ",", "path", ")", ":", "\n", "        ", "params", "=", "self", ".", "load_parameter_values", "(", "path", ")", "\n", "self", ".", "set_model_parameters", "(", "self", ".", "main_loop", ".", "model", ",", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.learning_rate_halver.LearningRateHalver.reload_iteration_state": [[61, 64], ["open", "blocks.serialization.load"], "methods", ["None"], ["", "def", "reload_iteration_state", "(", "self", ",", "path", ")", ":", "\n", "        ", "with", "open", "(", "path", ",", "'rb'", ")", "as", "source", ":", "\n", "            ", "self", ".", "main_loop", ".", "iteration_state", "=", "load", "(", "source", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.learning_rate_halver.LearningRateHalver.reload_log": [[65, 68], ["open", "cPickle.load"], "methods", ["None"], ["", "", "def", "reload_log", "(", "self", ",", "path", ")", ":", "\n", "        ", "with", "open", "(", "path", ",", "'rb'", ")", "as", "source", ":", "\n", "            ", "self", ".", "main_loop", ".", "log", "=", "cPickle", ".", "load", "(", "source", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.learning_rate_halver.LearningRateHalver.reload_previous_model": [[69, 87], ["sorted", "min", "logger.info", "learning_rate_halver.LearningRateHalver.reload_parameters", "learning_rate_halver.LearningRateHalver.reload_iteration_state", "learning_rate_halver.LearningRateHalver.reload_log", "int", "learning_rate_halver.LearningRateHalver.remove_models", "learning_rate_halver.LearningRateHalver.main_loop.log.items", "len", "path[].split", "operator.itemgetter", "all", "len", "os.path.exists"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.learning_rate_halver.LearningRateHalver.reload_parameters", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.learning_rate_halver.LearningRateHalver.reload_iteration_state", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.learning_rate_halver.LearningRateHalver.reload_log", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.learning_rate_halver.LearningRateHalver.remove_models"], ["", "", "def", "reload_previous_model", "(", "self", ",", "step_back", ")", ":", "\n", "        ", "paths", "=", "sorted", "(", "self", ".", "main_loop", ".", "log", ".", "items", "(", ")", ",", "\n", "key", "=", "operator", ".", "itemgetter", "(", "0", ")", ",", "\n", "reverse", "=", "True", ")", "\n", "paths", "=", "[", "y", "[", "'saved_to'", "]", "for", "x", ",", "y", "in", "paths", "if", "'saved_to'", "in", "y", "]", "\n", "paths", "=", "[", "path", "for", "path", "in", "paths", "if", "all", "(", "[", "os", ".", "path", ".", "exists", "(", "p", ")", "for", "p", "in", "path", "]", ")", "]", "\n", "if", "len", "(", "paths", ")", "<", "1", ":", "\n", "            ", "return", "\n", "", "idx", "=", "min", "(", "step_back", ",", "len", "(", "paths", ")", "-", "1", ")", "\n", "path", "=", "paths", "[", "idx", "]", "\n", "to_be_removed", "=", "paths", "[", ":", "idx", "]", "+", "paths", "[", "idx", "+", "1", ":", "]", "\n", "reload_from", "=", "path", "[", "0", "]", ".", "split", "(", "'.'", ")", "[", "-", "1", "]", "\n", "logger", ".", "info", "(", "'Reloading model from '", "+", "reload_from", ")", "\n", "self", ".", "reload_parameters", "(", "path", "[", "0", "]", ")", "\n", "self", ".", "reload_iteration_state", "(", "path", "[", "1", "]", ")", "\n", "self", ".", "reload_log", "(", "path", "[", "2", "]", ")", "\n", "self", ".", "main_loop", ".", "log", ".", "current_row", "[", "'reload_from'", "]", "=", "int", "(", "reload_from", ")", "\n", "self", ".", "remove_models", "(", "to_be_removed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.learning_rate_halver.LearningRateHalver.remove_models": [[88, 90], ["os.remove", "os.path.exists"], "methods", ["None"], ["", "def", "remove_models", "(", "self", ",", "paths", ")", ":", "\n", "        ", "[", "os", ".", "remove", "(", "p", ")", "for", "pp", "in", "paths", "for", "p", "in", "pp", "if", "os", ".", "path", ".", "exists", "(", "p", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.learning_rate_halver.LearningRateHalver.remove_old_models": [[91, 99], ["sorted", "learning_rate_halver.LearningRateHalver.remove_models", "learning_rate_halver.LearningRateHalver.main_loop.log.items", "operator.itemgetter", "all", "os.path.exists"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.learning_rate_halver.LearningRateHalver.remove_models"], ["", "def", "remove_old_models", "(", "self", ")", ":", "\n", "        ", "paths", "=", "sorted", "(", "self", ".", "main_loop", ".", "log", ".", "items", "(", ")", ",", "\n", "key", "=", "operator", ".", "itemgetter", "(", "0", ")", ",", "\n", "reverse", "=", "True", ")", "\n", "paths", "=", "[", "y", "[", "'saved_to'", "]", "for", "x", ",", "y", "in", "paths", "if", "'saved_to'", "in", "y", "]", "\n", "paths", "=", "[", "path", "for", "path", "in", "paths", "if", "all", "(", "[", "os", ".", "path", ".", "exists", "(", "p", ")", "for", "p", "in", "path", "]", ")", "]", "\n", "to_be_removed", "=", "paths", "[", ":", "-", "3", "]", "\n", "self", ".", "remove_models", "(", "to_be_removed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.learning_rate_halver.LearningRateHalver.do": [[100, 112], ["learning_rate_halver.LearningRateHalver.learning_rate.get_value().tolist", "learning_rate_halver.LearningRateHalver.do_half_nan", "learning_rate_halver.LearningRateHalver.do_half_patient", "learning_rate_halver.LearningRateHalver.learning_rate.get_value", "learning_rate_halver.LearningRateHalver.reload_previous_model", "super().do", "learning_rate_halver.LearningRateHalver.reload_previous_model", "super().do"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.learning_rate_halver.LearningRateHalver.do_half_nan", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.learning_rate_halver.LearningRateHalver.do_half_patient", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.learning_rate_halver.LearningRateHalver.reload_previous_model", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.sampling.BleuValidator.do", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.learning_rate_halver.LearningRateHalver.reload_previous_model", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.sampling.BleuValidator.do"], ["", "def", "do", "(", "self", ",", "which_callback", ",", "*", "args", ")", ":", "\n", "        ", "current_learning_rate", "=", "self", ".", "learning_rate", ".", "get_value", "(", ")", ".", "tolist", "(", ")", "\n", "self", ".", "main_loop", ".", "log", ".", "current_row", "[", "'learning_rate'", "]", "=", "current_learning_rate", "\n", "if", "current_learning_rate", "<", "self", ".", "lower_threshold", ":", "\n", "            ", "self", ".", "main_loop", ".", "log", ".", "current_row", "[", "'training_finish_requested'", "]", "=", "True", "\n", "", "if", "self", ".", "record_name", "in", "self", ".", "main_loop", ".", "log", ".", "current_row", ":", "\n", "            ", "if", "self", ".", "do_half_nan", "(", ")", ":", "\n", "                ", "self", ".", "reload_previous_model", "(", "1", ")", "\n", "super", "(", "LearningRateHalver", ",", "self", ")", ".", "do", "(", "which_callback", ",", "*", "args", ")", "\n", "", "if", "self", ".", "do_half_patient", "(", ")", ":", "\n", "                ", "self", ".", "reload_previous_model", "(", "self", ".", "patience_default", ")", "\n", "super", "(", "LearningRateHalver", ",", "self", ")", ".", "do", "(", "which_callback", ",", "*", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.learning_rate_halver.LearningRateDoubler.__init__": [[120, 127], ["blocks.extensions.training.SharedVariableModifier.__init__"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.sampling.ModelInfo.__init__"], ["    ", "def", "__init__", "(", "self", ",", "record_name", ",", "comparator", ",", "learning_rate", ",", "patience_default", ")", ":", "\n", "        ", "self", ".", "record_name", "=", "record_name", "\n", "self", ".", "comparator", "=", "comparator", "\n", "self", ".", "learning_rate", "=", "learning_rate", "\n", "self", ".", "patience_default", "=", "patience_default", "\n", "self", ".", "patience", "=", "patience_default", "\n", "super", "(", "LearningRateDoubler", ",", "self", ")", ".", "__init__", "(", "self", ".", "learning_rate", ",", "doubler", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.learning_rate_halver.LearningRateDoubler.do_double": [[128, 146], ["sorted", "learning_rate_halver.LearningRateDoubler.comparator", "learning_rate_halver.LearningRateDoubler.main_loop.log.items", "len", "operator.itemgetter"], "methods", ["None"], ["", "def", "do_double", "(", "self", ")", ":", "\n", "        ", "logs", "=", "sorted", "(", "self", ".", "main_loop", ".", "log", ".", "items", "(", ")", ",", "\n", "key", "=", "operator", ".", "itemgetter", "(", "0", ")", ",", "\n", "reverse", "=", "True", ")", "\n", "bleu_values", "=", "[", "y", "[", "self", ".", "record_name", "]", "for", "x", ",", "y", "in", "logs", "\n", "if", "self", ".", "record_name", "in", "y", "]", "\n", "if", "len", "(", "bleu_values", ")", "<", "2", ":", "\n", "            ", "return", "False", "\n", "", "current_value", "=", "bleu_values", "[", "-", "1", "]", "\n", "previous_value", "=", "bleu_values", "[", "-", "2", "]", "\n", "if", "self", ".", "comparator", "(", "current_value", ",", "previous_value", ")", ":", "\n", "            ", "self", ".", "patience", "-=", "1", "\n", "if", "self", ".", "patience", "==", "0", ":", "\n", "                ", "self", ".", "patience", "=", "self", ".", "patience_default", "\n", "return", "True", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "patience", "=", "self", ".", "patience_default", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.learning_rate_halver.LearningRateDoubler.do": [[147, 153], ["learning_rate_halver.LearningRateDoubler.learning_rate.get_value().tolist", "learning_rate_halver.LearningRateDoubler.do_double", "learning_rate_halver.LearningRateDoubler.learning_rate.get_value", "super().do"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.learning_rate_halver.LearningRateDoubler.do_double", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.sampling.BleuValidator.do"], ["", "def", "do", "(", "self", ",", "which_callback", ",", "*", "args", ")", ":", "\n", "        ", "self", ".", "main_loop", ".", "log", ".", "current_row", "[", "'learning_rate'", "]", "=", "self", ".", "learning_rate", ".", "get_value", "(", ")", ".", "tolist", "(", ")", "\n", "if", "self", ".", "record_name", "in", "self", ".", "main_loop", ".", "log", ".", "current_row", ":", "\n", "            ", "if", "self", ".", "do_double", "(", ")", ":", "\n", "                ", "super", "(", "LearningRateDoubler", ",", "self", ")", ".", "do", "(", "which_callback", ",", "*", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.learning_rate_halver.OldModelRemover.__init__": [[157, 160], ["blocks.extensions.training.SimpleExtension.__init__"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.sampling.ModelInfo.__init__"], ["    ", "def", "__init__", "(", "self", ",", "saveto", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "saveto", "=", "saveto", "\n", "super", "(", "OldModelRemover", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.learning_rate_halver.OldModelRemover.remove_old_models": [[161, 173], ["os.listdir", "int", "f.startswith", "f.startswith", "f.startswith", "os.remove", "f.split", "os.path.join"], "methods", ["None"], ["", "def", "remove_old_models", "(", "self", ")", ":", "\n", "        ", "params_prefix", "=", "'params.npz.'", "\n", "states_prefix", "=", "'iteration_states.pkl.'", "\n", "logs_prefix", "=", "'log.'", "\n", "fnames", "=", "os", ".", "listdir", "(", "self", ".", "saveto", ")", "\n", "params", "=", "[", "f", "for", "f", "in", "fnames", "if", "f", ".", "startswith", "(", "params_prefix", ")", "]", "\n", "states", "=", "[", "f", "for", "f", "in", "fnames", "if", "f", ".", "startswith", "(", "states_prefix", ")", "]", "\n", "logs", "=", "[", "f", "for", "f", "in", "fnames", "if", "f", ".", "startswith", "(", "log_prefix", ")", "]", "\n", "for", "f", "in", "params", "+", "states", "+", "logs", ":", "\n", "            ", "num", "=", "int", "(", "f", ".", "split", "(", "'.'", ")", "[", "-", "1", "]", ")", "\n", "if", "self", ".", "main_loop", ".", "status", "[", "'iterations_done'", "]", "-", "num", ">", "3000", ":", "\n", "                ", "os", ".", "remove", "(", "os", ".", "path", ".", "join", "(", "self", ".", "saveto", ",", "f", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.learning_rate_halver.OldModelRemover.do": [[174, 178], ["learning_rate_halver.OldModelRemover.remove_old_models"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.learning_rate_halver.OldModelRemover.remove_old_models"], ["", "", "", "def", "do", "(", "self", ",", "which_callback", ",", "*", "args", ")", ":", "\n", "        ", "current_row", "=", "self", ".", "main_loop", ".", "log", ".", "current_row", "\n", "if", "BLEU", "in", "current_row", "or", "COST", "in", "current_row", ":", "\n", "            ", "remove_old_models", "(", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.learning_rate_halver.halver": [[16, 18], ["None"], "function", ["None"], ["def", "halver", "(", "t", ",", "x", ")", ":", "\n", "    ", "return", "x", "/", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.learning_rate_halver.doubler": [[114, 116], ["None"], "function", ["None"], ["", "", "", "", "def", "doubler", "(", "t", ",", "x", ")", ":", "\n", "    ", "return", "x", "/", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.train.main": [[48, 450], ["logger.info", "model_with_l.BidirectionalEncoder", "model_with_l.Decoder", "logger.info", "range", "theano.tensor.lmatrix", "theano.tensor.matrix", "theano.tensor.lmatrix", "theano.tensor.matrix", "theano.tensor.lmatrix", "theano.tensor.lmatrix", "theano.tensor.lmatrix", "stream.get_tr_stream_withContext", "stream.get_dev_stream_with_grdTruth", "model_with_l.BidirectionalEncoder.apply", "tensor.concatenate.dimshuffle", "tensor.matrix.T.dimshuffle", "range", "model_with_l.Decoder.cost", "logger.info", "theano.tensor.exp", "theano.function", "blocks.graph.ComputationGraph", "logger.info", "blocks.initialization.IsotropicGaussian", "blocks.initialization.Constant", "model_with_l.BidirectionalEncoder.push_initialization_config", "model_with_l.Decoder.push_initialization_config", "blocks.initialization.Orthogonal", "blocks.initialization.Orthogonal", "model_with_l.BidirectionalEncoder.initialize", "model_with_l.Decoder.initialize", "logger.info", "collections.Counter().most_common", "logger.info", "toolz.merge", "logger.info", "toolz.merge.items", "logger.info", "logger.info", "blocks.model.Model", "logger.info", "logger.info", "extensions.append", "os.path.join", "logger.info", "blocks.algorithms.GradientDescent", "extensions.append", "logger.info", "blocks.main_loop.MainLoop", "blocks.main_loop.MainLoop.run", "context_sentences.append", "context_sentence_masks.append", "model_with_l.BidirectionalEncoder.apply", "tmp_rep.dimshuffle.dimshuffle", "theano.tensor.concatenate", "theano.tensor.concatenate", "logger.info", "blocks.graph.apply_dropout", "logger.info", "blocks.select.Selector().get_params().values", "blocks.select.Selector().get_params().values", "blocks.select.Selector().get_params().values", "blocks.select.Selector().get_params().values", "blocks.select.Selector().get_params().values", "blocks.select.Selector().get_params().values", "blocks.graph.apply_noise", "logger.info", "blocks.select.Selector().get_parameters", "blocks.select.Selector().get_parameters", "logger.info", "blocks.extensions.FinishAfter", "blocks.extensions.monitoring.TrainingDataMonitoring", "checkpoint.CheckpointNMT", "logger.info", "model_with_l.BidirectionalEncoder.apply", "model_with_l.Decoder.generate", "blocks.model.Model", "logger.info", "extensions.append", "logger.info", "extensions.append", "sampling.pplValidation", "extensions.append", "extensions.append", "os.path.exists", "extensions.append", "extensions.append", "extensions.append", "SimplePrinting.SimplePrinting", "logger.info", "range", "theano.tensor.lmatrix", "theano.tensor.matrix", "theano.tensor.lmatrix", "theano.tensor.matrix", "stream.get_dev_stream_withContext_grdTruth", "model_with_l.BidirectionalEncoder.apply", "tensor.concatenate.dimshuffle", "tensor.matrix.T.dimshuffle", "range", "model_with_l.Decoder.cost", "logger.info", "theano.function", "logger.info", "blocks.model.Model", "checkpoint.LoadNMT", "checkpoint.LoadNMT.set_model_parameters", "logger.info", "stream.get_dev_stream_withContext_grdTruth.get_epoch_iterator", "progressbar.ProgressBar().start", "enumerate", "ProgressBar().start.finish", "print", "theano.tensor.lmatrix", "theano.tensor.matrix", "param.get_value", "collections.Counter", "len", "len", "theano.tensor.ones", "blocks.filter.VariableFilter", "blocks.graph.ComputationGraph", "sampling.Sampler", "sampling.BleuValidator", "Plot", "checkpoint.LoadNMT", "open", "cPickle.load", "blocks.algorithms.CompositeRule", "learning_rate_halver.LearningRateHalver", "learning_rate_halver.OldModelRemover", "learning_rate_halver.LearningRateDoubler", "context_sentences.append", "context_sentence_masks.append", "model_with_l.BidirectionalEncoder.apply", "tmp_rep.dimshuffle.dimshuffle", "theano.tensor.concatenate", "theano.tensor.concatenate", "checkpoint.LoadNMT.load_parameters_default", "theano.function.", "costs_computer.sum", "trg_mask.sum", "ProgressBar().start.update", "logger.info", "range", "theano.tensor.lmatrix", "theano.tensor.matrix", "sampling.SamplingBase", "stream._ensure_special_tokens", "model_with_l.BidirectionalEncoder.apply", "tensor.concatenate.dimshuffle", "tensor.matrix.T.dimshuffle", "range", "model_with_l.Decoder.generate", "search.BeamSearch", "logger.info", "blocks.model.Model", "checkpoint.LoadNMT", "checkpoint.LoadNMT.set_model_parameters", "logger.info", "stream.get_dev_stream_withContext", "stream.get_dev_stream_withContext.get_epoch_iterator", "open().readlines", "open", "progressbar.ProgressBar().start", "enumerate", "ProgressBar().start.finish", "logger.info", "cPickle.dump", "open.close", "afterprocess.afterprocesser", "afterprocess.afterprocesser.main", "context_sentence_masks[].T.dimshuffle", "blocks.select.Selector().get_params", "blocks.select.Selector().get_params", "blocks.select.Selector().get_params", "blocks.select.Selector().get_params", "blocks.select.Selector().get_params", "blocks.select.Selector().get_params", "blocks.select.Selector", "blocks.select.Selector", "max", "theano.tensor.lmatrix", "theano.tensor.matrix", "progressbar.ProgressBar", "str", "context_sentences.append", "context_sentence_masks.append", "cPickle.load", "model_with_l.BidirectionalEncoder.apply", "tmp_rep.dimshuffle.dimshuffle", "theano.tensor.concatenate", "theano.tensor.concatenate", "blocks.filter.VariableFilter", "blocks.graph.ComputationGraph", "checkpoint.LoadNMT.load_parameters_default", "zip", "line_raw[].split", "range", "search.BeamSearch.search", "saved_weights.append", "print", "ProgressBar().start.update", "open", "str", "value.get_value", "cPickle.load.keys", "blocks.algorithms.Scale", "blocks.algorithms.StepClipping", "context_sentence_masks[].T.dimshuffle", "theano.tensor.lmatrix", "theano.tensor.matrix", "open", "stream._ensure_special_tokens.items", "open", "progressbar.ProgressBar", "seqs.append", "input_mask.append", "input_.append", "numpy.array", "numpy.argsort", "sampling.SamplingBase._idx_to_word", "str", "blocks.select.Selector", "blocks.select.Selector", "blocks.select.Selector", "blocks.select.Selector", "blocks.select.Selector", "blocks.select.Selector", "eval", "str", "context_sentence_masks[].T.dimshuffle", "sampling.SamplingBase._oov_to_unk", "numpy.tile", "numpy.tile", "len", "logger.info", "str", "str", "len", "len", "len", "str"], "function", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.match_functions.GeneralMatchFunction.apply", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.model_with_l.Decoder.cost", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.match_functions.GeneralMatchFunction.apply", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.match_functions.GeneralMatchFunction.apply", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.model_with_l.Decoder.generate", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.match_functions.GeneralMatchFunction.apply", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.model_with_l.Decoder.cost", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.checkpoint.SaveLoadUtils.set_model_parameters", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.match_functions.GeneralMatchFunction.apply", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.checkpoint.LoadNMT.load_parameters_default", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.match_functions.GeneralMatchFunction.apply", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.model_with_l.Decoder.generate", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.checkpoint.SaveLoadUtils.set_model_parameters", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.checkpoint.CheckpointNMT.dump", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.get_valid_status.main", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.match_functions.GeneralMatchFunction.apply", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.checkpoint.LoadNMT.load_parameters_default", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.search.BeamSearch.search", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.sampling.SamplingBase._idx_to_word", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.sampling.SamplingBase._oov_to_unk"], ["def", "main", "(", "mode", ",", "config", ",", "use_bokeh", "=", "False", ")", ":", "\n", "\n", "# Construct model", "\n", "    ", "logger", ".", "info", "(", "'Building RNN encoder-decoder'", ")", "\n", "encoder", "=", "BidirectionalEncoder", "(", "\n", "config", "[", "'src_vocab_size'", "]", ",", "config", "[", "'enc_embed'", "]", ",", "config", "[", "'enc_nhids'", "]", ",", "name", "=", "'word_encoder'", ")", "\n", "decoder", "=", "Decoder", "(", "vocab_size", "=", "config", "[", "'trg_vocab_size'", "]", ",", "\n", "embedding_dim", "=", "config", "[", "'dec_embed'", "]", ",", "\n", "state_dim", "=", "config", "[", "'dec_nhids'", "]", ",", "\n", "representation_dim", "=", "config", "[", "'enc_nhids'", "]", "*", "2", ",", "\n", "match_function", "=", "config", "[", "'match_function'", "]", ",", "\n", "use_doubly_stochastic", "=", "config", "[", "'use_doubly_stochastic'", "]", ",", "\n", "lambda_ds", "=", "config", "[", "'lambda_ds'", "]", ",", "\n", "use_local_attention", "=", "config", "[", "'use_local_attention'", "]", ",", "\n", "window_size", "=", "config", "[", "'window_size'", "]", ",", "\n", "use_step_decay_cost", "=", "config", "[", "'use_step_decay_cost'", "]", ",", "\n", "use_concentration_cost", "=", "config", "[", "'use_concentration_cost'", "]", ",", "\n", "lambda_ct", "=", "config", "[", "'lambda_ct'", "]", ",", "\n", "use_stablilizer", "=", "config", "[", "'use_stablilizer'", "]", ",", "\n", "lambda_st", "=", "config", "[", "'lambda_st'", "]", ")", "\n", "# here attended dim (representation_dim) of decoder is 2*enc_nhinds", "\n", "# because the context given by the encoder is a bidirectional context", "\n", "\n", "if", "mode", "==", "\"train\"", ":", "\n", "\n", "# Create Theano variables", "\n", "        ", "logger", ".", "info", "(", "'Creating theano variables'", ")", "\n", "context_sentences", "=", "[", "]", ";", "\n", "context_sentence_masks", "=", "[", "]", ";", "\n", "for", "i", "in", "range", "(", "config", "[", "'ctx_num'", "]", ")", ":", "\n", "            ", "context_sentences", ".", "append", "(", "tensor", ".", "lmatrix", "(", "'context_'", "+", "str", "(", "i", ")", ")", ")", ";", "\n", "context_sentence_masks", ".", "append", "(", "tensor", ".", "matrix", "(", "'context_'", "+", "str", "(", "i", ")", "+", "'_mask'", ")", ")", ";", "\n", "", "source_sentence", "=", "tensor", ".", "lmatrix", "(", "'source'", ")", "\n", "source_sentence_mask", "=", "tensor", ".", "matrix", "(", "'source_mask'", ")", "\n", "target_sentence", "=", "tensor", ".", "lmatrix", "(", "'target'", ")", "\n", "target_sentence_mask", "=", "tensor", ".", "matrix", "(", "'target_mask'", ")", "\n", "sampling_input", "=", "tensor", ".", "lmatrix", "(", "'input'", ")", "\n", "dev_source", "=", "tensor", ".", "lmatrix", "(", "'dev_source'", ")", "\n", "dev_target", "=", "tensor", ".", "lmatrix", "(", "'dev_target'", ")", "\n", "\n", "# Get training and development set streams", "\n", "tr_stream", "=", "get_tr_stream_withContext", "(", "**", "config", ")", "\n", "dev_stream", "=", "get_dev_stream_with_grdTruth", "(", "**", "config", ")", "\n", "\n", "# Get cost of the model", "\n", "sentence_representations_list", "=", "encoder", ".", "apply", "(", "source_sentence", ",", "source_sentence_mask", ")", ";", "\n", "sentence_representations_list", "=", "sentence_representations_list", ".", "dimshuffle", "(", "[", "'x'", ",", "0", ",", "1", ",", "2", "]", ")", ";", "\n", "sentence_masks_list", "=", "source_sentence_mask", ".", "T", ".", "dimshuffle", "(", "[", "'x'", ",", "0", ",", "1", "]", ")", ";", "\n", "for", "i", "in", "range", "(", "config", "[", "'ctx_num'", "]", ")", ":", "\n", "            ", "tmp_rep", "=", "encoder", ".", "apply", "(", "context_sentences", "[", "i", "]", ",", "context_sentence_masks", "[", "i", "]", ")", ";", "\n", "tmp_rep", "=", "tmp_rep", ".", "dimshuffle", "(", "[", "'x'", ",", "0", ",", "1", ",", "2", "]", ")", ";", "\n", "sentence_representations_list", "=", "tensor", ".", "concatenate", "(", "[", "sentence_representations_list", ",", "tmp_rep", "]", ",", "axis", "=", "0", ")", ";", "\n", "sentence_masks_list", "=", "tensor", ".", "concatenate", "(", "[", "sentence_masks_list", ",", "context_sentence_masks", "[", "i", "]", ".", "T", ".", "dimshuffle", "(", "[", "'x'", ",", "0", ",", "1", "]", ")", "]", ",", "axis", "=", "0", ")", ";", "\n", "\n", "\n", "", "cost", "=", "decoder", ".", "cost", "(", "sentence_representations_list", ",", "\n", "sentence_masks_list", ",", "\n", "target_sentence", ",", "\n", "target_sentence_mask", ")", "\n", "\n", "logger", ".", "info", "(", "'Creating computational graph'", ")", "\n", "perplexity", "=", "tensor", ".", "exp", "(", "cost", ")", "\n", "perplexity", ".", "name", "=", "'perplexity'", "\n", "costs_computer", "=", "function", "(", "context_sentences", "+", "context_sentence_masks", "+", "[", "target_sentence", ",", "\n", "target_sentence_mask", ",", "\n", "source_sentence", ",", "\n", "source_sentence_mask", "]", ",", "(", "perplexity", ")", ")", "\n", "cg", "=", "ComputationGraph", "(", "cost", ")", "\n", "\n", "# Initialize model", "\n", "logger", ".", "info", "(", "'Initializing model'", ")", "\n", "encoder", ".", "weights_init", "=", "decoder", ".", "weights_init", "=", "IsotropicGaussian", "(", "\n", "config", "[", "'weight_scale'", "]", ")", "\n", "encoder", ".", "biases_init", "=", "decoder", ".", "biases_init", "=", "Constant", "(", "0", ")", "\n", "encoder", ".", "push_initialization_config", "(", ")", "\n", "decoder", ".", "push_initialization_config", "(", ")", "\n", "encoder", ".", "bidir", ".", "prototype", ".", "weights_init", "=", "Orthogonal", "(", ")", "\n", "decoder", ".", "transition", ".", "weights_init", "=", "Orthogonal", "(", ")", "\n", "encoder", ".", "initialize", "(", ")", "\n", "decoder", ".", "initialize", "(", ")", "\n", "\n", "# apply dropout for regularization", "\n", "if", "config", "[", "'dropout'", "]", "<", "1.0", ":", "\n", "# dropout is applied to the output of maxout in ghog", "\n", "            ", "logger", ".", "info", "(", "'Applying dropout'", ")", "\n", "dropout_inputs", "=", "[", "x", "for", "x", "in", "cg", ".", "intermediary_variables", "\n", "if", "x", ".", "name", "==", "'maxout_apply_output'", "]", "\n", "cg", "=", "apply_dropout", "(", "cg", ",", "dropout_inputs", ",", "config", "[", "'dropout'", "]", ")", "\n", "\n", "# Apply weight noise for regularization", "\n", "", "if", "config", "[", "'weight_noise_ff'", "]", ">", "0.0", ":", "\n", "            ", "logger", ".", "info", "(", "'Applying weight noise to ff layers'", ")", "\n", "enc_params", "=", "Selector", "(", "encoder", ".", "lookup", ")", ".", "get_params", "(", ")", ".", "values", "(", ")", "\n", "enc_params", "+=", "Selector", "(", "encoder", ".", "fwd_fork", ")", ".", "get_params", "(", ")", ".", "values", "(", ")", "\n", "enc_params", "+=", "Selector", "(", "encoder", ".", "back_fork", ")", ".", "get_params", "(", ")", ".", "values", "(", ")", "\n", "dec_params", "=", "Selector", "(", "\n", "decoder", ".", "sequence_generator", ".", "readout", ")", ".", "get_params", "(", ")", ".", "values", "(", ")", "\n", "dec_params", "+=", "Selector", "(", "\n", "decoder", ".", "sequence_generator", ".", "fork", ")", ".", "get_params", "(", ")", ".", "values", "(", ")", "\n", "dec_params", "+=", "Selector", "(", "decoder", ".", "state_init", ")", ".", "get_params", "(", ")", ".", "values", "(", ")", "\n", "cg", "=", "apply_noise", "(", "\n", "cg", ",", "enc_params", "+", "dec_params", ",", "config", "[", "'weight_noise_ff'", "]", ")", "\n", "\n", "\n", "# Print shapes", "\n", "", "shapes", "=", "[", "param", ".", "get_value", "(", ")", ".", "shape", "for", "param", "in", "cg", ".", "parameters", "]", "\n", "logger", ".", "info", "(", "\"Parameter shapes: \"", ")", "\n", "for", "shape", ",", "count", "in", "Counter", "(", "shapes", ")", ".", "most_common", "(", ")", ":", "\n", "            ", "logger", ".", "info", "(", "'    {:15}: {}'", ".", "format", "(", "shape", ",", "count", ")", ")", "\n", "", "logger", ".", "info", "(", "\"Total number of parameters: {}\"", ".", "format", "(", "len", "(", "shapes", ")", ")", ")", "\n", "\n", "# Print parameter names", "\n", "enc_dec_param_dict", "=", "merge", "(", "Selector", "(", "encoder", ")", ".", "get_parameters", "(", ")", ",", "\n", "Selector", "(", "decoder", ")", ".", "get_parameters", "(", ")", ")", "\n", "logger", ".", "info", "(", "\"Parameter names: \"", ")", "\n", "for", "name", ",", "value", "in", "enc_dec_param_dict", ".", "items", "(", ")", ":", "\n", "            ", "logger", ".", "info", "(", "'    {:15}: {}'", ".", "format", "(", "value", ".", "get_value", "(", ")", ".", "shape", ",", "name", ")", ")", "\n", "", "logger", ".", "info", "(", "\"Total number of parameters: {}\"", "\n", ".", "format", "(", "len", "(", "enc_dec_param_dict", ")", ")", ")", "\n", "\n", "\n", "# Set up training model", "\n", "logger", ".", "info", "(", "\"Building model\"", ")", "\n", "training_model", "=", "Model", "(", "cost", ")", "\n", "\n", "# Set extensions", "\n", "logger", ".", "info", "(", "\"Initializing extensions\"", ")", "\n", "extensions", "=", "[", "\n", "FinishAfter", "(", "after_n_batches", "=", "config", "[", "'finish_after'", "]", ")", ",", "\n", "TrainingDataMonitoring", "(", "[", "perplexity", "]", ",", "after_batch", "=", "True", ")", ",", "\n", "CheckpointNMT", "(", "config", "[", "'saveto'", "]", ",", "\n", "config", "[", "'model_name'", "]", ",", "\n", "every_n_batches", "=", "config", "[", "'save_freq'", "]", ")", "\n", "]", "\n", "\n", "# Set up beam search and sampling computation graphs if necessary", "\n", "if", "config", "[", "'hook_samples'", "]", ">=", "1", "or", "config", "[", "'bleu_script'", "]", "is", "not", "None", ":", "\n", "            ", "logger", ".", "info", "(", "\"Building sampling model\"", ")", "\n", "sampling_representation", "=", "encoder", ".", "apply", "(", "\n", "sampling_input", ",", "tensor", ".", "ones", "(", "sampling_input", ".", "shape", ")", ")", "\n", "generated", "=", "decoder", ".", "generate", "(", "\n", "sampling_input", ",", "sampling_representation", ")", "\n", "search_model", "=", "Model", "(", "generated", ")", "\n", "_", ",", "samples", "=", "VariableFilter", "(", "\n", "bricks", "=", "[", "decoder", ".", "sequence_generator", "]", ",", "name", "=", "\"outputs\"", ")", "(", "\n", "ComputationGraph", "(", "generated", "[", "1", "]", ")", ")", "\n", "\n", "# Add sampling", "\n", "", "if", "config", "[", "'hook_samples'", "]", ">=", "1", ":", "\n", "            ", "logger", ".", "info", "(", "\"Building sampler\"", ")", "\n", "extensions", ".", "append", "(", "\n", "Sampler", "(", "model", "=", "search_model", ",", "data_stream", "=", "tr_stream", ",", "\n", "model_name", "=", "config", "[", "'model_name'", "]", ",", "\n", "hook_samples", "=", "config", "[", "'hook_samples'", "]", ",", "\n", "every_n_batches", "=", "config", "[", "'sampling_freq'", "]", ",", "\n", "src_vocab_size", "=", "config", "[", "'src_vocab_size'", "]", ")", ")", "\n", "\n", "# Add early stopping based on bleu", "\n", "", "if", "False", ":", "\n", "            ", "logger", ".", "info", "(", "\"Building bleu validator\"", ")", "\n", "extensions", ".", "append", "(", "\n", "BleuValidator", "(", "sampling_input", ",", "samples", "=", "samples", ",", "config", "=", "config", ",", "\n", "model", "=", "search_model", ",", "data_stream", "=", "dev_stream", ",", "\n", "normalize", "=", "config", "[", "'normalized_bleu'", "]", ",", "\n", "every_n_batches", "=", "config", "[", "'bleu_val_freq'", "]", ",", "\n", "n_best", "=", "3", ",", "\n", "track_n_models", "=", "6", ")", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"Building perplexity validator\"", ")", "\n", "extensions", ".", "append", "(", "\n", "pplValidation", "(", "dev_source", ",", "dev_target", ",", "config", "=", "config", ",", "\n", "model", "=", "costs_computer", ",", "data_stream", "=", "dev_stream", ",", "\n", "model_name", "=", "config", "[", "'model_name'", "]", ",", "\n", "every_n_batches", "=", "config", "[", "'sampling_freq'", "]", ")", ")", "\n", "\n", "\n", "# Plot cost in bokeh if necessary", "\n", "if", "use_bokeh", "and", "BOKEH_AVAILABLE", ":", "\n", "            ", "extensions", ".", "append", "(", "\n", "Plot", "(", "'Cs-En'", ",", "channels", "=", "[", "[", "'decoder_cost_cost'", "]", "]", ",", "\n", "after_batch", "=", "True", ")", ")", "\n", "\n", "# Reload model if necessary", "\n", "", "if", "config", "[", "'reload'", "]", ":", "\n", "            ", "extensions", ".", "append", "(", "LoadNMT", "(", "config", "[", "'saveto'", "]", ")", ")", "\n", "\n", "", "initial_learning_rate", "=", "config", "[", "'initial_learning_rate'", "]", "\n", "log_path", "=", "os", ".", "path", ".", "join", "(", "config", "[", "'saveto'", "]", ",", "'log'", ")", "\n", "if", "config", "[", "'reload'", "]", "and", "os", ".", "path", ".", "exists", "(", "log_path", ")", ":", "\n", "            ", "with", "open", "(", "log_path", ",", "'rb'", ")", "as", "source", ":", "\n", "                ", "log", "=", "cPickle", ".", "load", "(", "source", ")", "\n", "last", "=", "max", "(", "log", ".", "keys", "(", ")", ")", "-", "1", "\n", "if", "'learning_rate'", "in", "log", "[", "last", "]", ":", "\n", "                    ", "initial_learning_rate", "=", "log", "[", "last", "]", "[", "'learning_rate'", "]", "\n", "\n", "# Set up training algorithm", "\n", "", "", "", "logger", ".", "info", "(", "\"Initializing training algorithm\"", ")", "\n", "algorithm", "=", "GradientDescent", "(", "\n", "cost", "=", "cost", ",", "parameters", "=", "cg", ".", "parameters", ",", "\n", "step_rule", "=", "CompositeRule", "(", "[", "Scale", "(", "initial_learning_rate", ")", ",", "\n", "StepClipping", "(", "config", "[", "'step_clipping'", "]", ")", ",", "\n", "eval", "(", "config", "[", "'step_rule'", "]", ")", "(", ")", "]", ")", ")", "\n", "\n", "_learning_rate", "=", "algorithm", ".", "step_rule", ".", "components", "[", "0", "]", ".", "learning_rate", "\n", "if", "config", "[", "'learning_rate_decay'", "]", ":", "\n", "            ", "extensions", ".", "append", "(", "\n", "LearningRateHalver", "(", "record_name", "=", "'validation_cost'", ",", "\n", "comparator", "=", "lambda", "x", ",", "y", ":", "x", ">", "y", ",", "\n", "learning_rate", "=", "_learning_rate", ",", "\n", "patience_default", "=", "3", ")", ")", "\n", "", "else", ":", "\n", "            ", "extensions", ".", "append", "(", "OldModelRemover", "(", "saveto", "=", "config", "[", "'saveto'", "]", ")", ")", "\n", "\n", "", "if", "config", "[", "'learning_rate_grow'", "]", ":", "\n", "            ", "extensions", ".", "append", "(", "\n", "LearningRateDoubler", "(", "record_name", "=", "'validation_cost'", ",", "\n", "comparator", "=", "lambda", "x", ",", "y", ":", "x", "<", "y", ",", "\n", "learning_rate", "=", "_learning_rate", ",", "\n", "patience_default", "=", "3", ")", ")", "\n", "\n", "", "extensions", ".", "append", "(", "\n", "SimplePrinting", "(", "config", "[", "'model_name'", "]", ",", "after_batch", "=", "True", ")", ")", "\n", "\n", "# Initialize main loop", "\n", "logger", ".", "info", "(", "\"Initializing main loop\"", ")", "\n", "main_loop", "=", "MainLoop", "(", "\n", "model", "=", "training_model", ",", "\n", "algorithm", "=", "algorithm", ",", "\n", "data_stream", "=", "tr_stream", ",", "\n", "extensions", "=", "extensions", "\n", ")", "\n", "\n", "# Train!", "\n", "main_loop", ".", "run", "(", ")", "\n", "\n", "", "elif", "mode", "==", "'ppl'", ":", "\n", "# Create Theano variables", "\n", "# Create Theano variables", "\n", "        ", "logger", ".", "info", "(", "'Creating theano variables'", ")", "\n", "context_sentences", "=", "[", "]", ";", "\n", "context_sentence_masks", "=", "[", "]", ";", "\n", "for", "i", "in", "range", "(", "config", "[", "'ctx_num'", "]", ")", ":", "\n", "            ", "context_sentences", ".", "append", "(", "tensor", ".", "lmatrix", "(", "'context_'", "+", "str", "(", "i", ")", ")", ")", ";", "\n", "context_sentence_masks", ".", "append", "(", "tensor", ".", "matrix", "(", "'context_'", "+", "str", "(", "i", ")", "+", "'_mask'", ")", ")", ";", "\n", "", "source_sentence", "=", "tensor", ".", "lmatrix", "(", "'source'", ")", "\n", "source_sentence_mask", "=", "tensor", ".", "matrix", "(", "'source_mask'", ")", "\n", "target_sentence", "=", "tensor", ".", "lmatrix", "(", "'target'", ")", "\n", "target_sentence_mask", "=", "tensor", ".", "matrix", "(", "'target_mask'", ")", "\n", "\n", "# Get training and development set streams", "\n", "#tr_stream = get_tr_stream_withContext(**config)", "\n", "dev_stream", "=", "get_dev_stream_withContext_grdTruth", "(", "**", "config", ")", "\n", "\n", "# Get cost of the model", "\n", "sentence_representations_list", "=", "encoder", ".", "apply", "(", "source_sentence", ",", "source_sentence_mask", ")", ";", "\n", "sentence_representations_list", "=", "sentence_representations_list", ".", "dimshuffle", "(", "[", "'x'", ",", "0", ",", "1", ",", "2", "]", ")", ";", "\n", "sentence_masks_list", "=", "source_sentence_mask", ".", "T", ".", "dimshuffle", "(", "[", "'x'", ",", "0", ",", "1", "]", ")", ";", "\n", "for", "i", "in", "range", "(", "config", "[", "'ctx_num'", "]", ")", ":", "\n", "            ", "tmp_rep", "=", "encoder", ".", "apply", "(", "context_sentences", "[", "i", "]", ",", "context_sentence_masks", "[", "i", "]", ")", ";", "\n", "tmp_rep", "=", "tmp_rep", ".", "dimshuffle", "(", "[", "'x'", ",", "0", ",", "1", ",", "2", "]", ")", ";", "\n", "sentence_representations_list", "=", "tensor", ".", "concatenate", "(", "[", "sentence_representations_list", ",", "tmp_rep", "]", ",", "axis", "=", "0", ")", ";", "\n", "sentence_masks_list", "=", "tensor", ".", "concatenate", "(", "[", "sentence_masks_list", ",", "context_sentence_masks", "[", "i", "]", ".", "T", ".", "dimshuffle", "(", "[", "'x'", ",", "0", ",", "1", "]", ")", "]", ",", "axis", "=", "0", ")", ";", "\n", "\n", "\n", "", "cost", "=", "decoder", ".", "cost", "(", "sentence_representations_list", ",", "\n", "sentence_masks_list", ",", "\n", "target_sentence", ",", "\n", "target_sentence_mask", ")", "\n", "\n", "logger", ".", "info", "(", "'Creating computational graph'", ")", "\n", "costs_computer", "=", "function", "(", "context_sentences", "+", "context_sentence_masks", "+", "[", "target_sentence", ",", "\n", "target_sentence_mask", ",", "\n", "source_sentence", ",", "\n", "source_sentence_mask", "]", ",", "(", "cost", ")", ")", "\n", "\n", "\n", "logger", ".", "info", "(", "\"Loading the model..\"", ")", "\n", "model", "=", "Model", "(", "cost", ")", "\n", "#loader = LoadNMT(config['saveto'])", "\n", "loader", "=", "LoadNMT", "(", "config", "[", "'validation_load'", "]", ")", ";", "\n", "loader", ".", "set_model_parameters", "(", "model", ",", "loader", ".", "load_parameters_default", "(", ")", ")", "\n", "logger", ".", "info", "(", "\"Started Validation: \"", ")", "\n", "\n", "ts", "=", "dev_stream", ".", "get_epoch_iterator", "(", ")", "\n", "total_cost", "=", "0.0", "\n", "total_tokens", "=", "0.0", "\n", "#pbar = ProgressBar(max_value=len(ts)).start()#modified", "\n", "pbar", "=", "ProgressBar", "(", "max_value", "=", "10000", ")", ".", "start", "(", ")", ";", "\n", "for", "i", ",", "(", "ctx_0", ",", "ctx_0_mask", ",", "ctx_1", ",", "ctx_1_mask", ",", "ctx_2", ",", "ctx_2_mask", ",", "src", ",", "src_mask", ",", "trg", ",", "trg_mask", ")", "in", "enumerate", "(", "ts", ")", ":", "\n", "            ", "costs", "=", "costs_computer", "(", "*", "[", "ctx_0", ",", "ctx_1", ",", "ctx_2", ",", "ctx_0_mask", ",", "ctx_1_mask", ",", "ctx_2_mask", ",", "trg", ",", "trg_mask", ",", "src", ",", "src_mask", "]", ")", "\n", "cost", "=", "costs", ".", "sum", "(", ")", "\n", "total_cost", "+=", "cost", "\n", "total_tokens", "+=", "trg_mask", ".", "sum", "(", ")", "\n", "pbar", ".", "update", "(", "i", "+", "1", ")", "\n", "", "total_cost", "/=", "total_tokens", ";", "\n", "pbar", ".", "finish", "(", ")", "\n", "#dev_stream.reset()", "\n", "\n", "# run afterprocess", "\n", "# self.ap.main()", "\n", "total_cost", "=", "2", "**", "total_cost", ";", "\n", "print", "(", "\"Average validation cost: \"", "+", "str", "(", "total_cost", ")", ")", ";", "\n", "", "elif", "mode", "==", "'translate'", ":", "\n", "\n", "        ", "logger", ".", "info", "(", "'Creating theano variables'", ")", "\n", "context_sentences", "=", "[", "]", ";", "\n", "context_sentence_masks", "=", "[", "]", ";", "\n", "for", "i", "in", "range", "(", "config", "[", "'ctx_num'", "]", ")", ":", "\n", "            ", "context_sentences", ".", "append", "(", "tensor", ".", "lmatrix", "(", "'context_'", "+", "str", "(", "i", ")", ")", ")", ";", "\n", "context_sentence_masks", ".", "append", "(", "tensor", ".", "matrix", "(", "'context_'", "+", "str", "(", "i", ")", "+", "'_mask'", ")", ")", ";", "\n", "", "source_sentence", "=", "tensor", ".", "lmatrix", "(", "'source'", ")", "\n", "source_sentence_mask", "=", "tensor", ".", "matrix", "(", "'source_mask'", ")", "\n", "\n", "sutils", "=", "SamplingBase", "(", ")", "\n", "unk_idx", "=", "config", "[", "'unk_id'", "]", "\n", "src_eos_idx", "=", "config", "[", "'src_vocab_size'", "]", "-", "1", "\n", "trg_eos_idx", "=", "config", "[", "'trg_vocab_size'", "]", "-", "1", "\n", "trg_vocab", "=", "_ensure_special_tokens", "(", "\n", "cPickle", ".", "load", "(", "open", "(", "config", "[", "'trg_vocab'", "]", ",", "'rb'", ")", ")", ",", "bos_idx", "=", "0", ",", "\n", "eos_idx", "=", "trg_eos_idx", ",", "unk_idx", "=", "unk_idx", ")", "\n", "trg_ivocab", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "trg_vocab", ".", "items", "(", ")", "}", "\n", "config", "[", "'batch_size'", "]", "=", "1", "\n", "\n", "sentence_representations_list", "=", "encoder", ".", "apply", "(", "source_sentence", ",", "source_sentence_mask", ")", ";", "\n", "sentence_representations_list", "=", "sentence_representations_list", ".", "dimshuffle", "(", "[", "'x'", ",", "0", ",", "1", ",", "2", "]", ")", ";", "\n", "sentence_masks_list", "=", "source_sentence_mask", ".", "T", ".", "dimshuffle", "(", "[", "'x'", ",", "0", ",", "1", "]", ")", ";", "\n", "for", "i", "in", "range", "(", "config", "[", "'ctx_num'", "]", ")", ":", "\n", "            ", "tmp_rep", "=", "encoder", ".", "apply", "(", "context_sentences", "[", "i", "]", ",", "context_sentence_masks", "[", "i", "]", ")", ";", "\n", "tmp_rep", "=", "tmp_rep", ".", "dimshuffle", "(", "[", "'x'", ",", "0", ",", "1", ",", "2", "]", ")", ";", "\n", "sentence_representations_list", "=", "tensor", ".", "concatenate", "(", "[", "sentence_representations_list", ",", "tmp_rep", "]", ",", "axis", "=", "0", ")", ";", "\n", "sentence_masks_list", "=", "tensor", ".", "concatenate", "(", "[", "sentence_masks_list", ",", "context_sentence_masks", "[", "i", "]", ".", "T", ".", "dimshuffle", "(", "[", "'x'", ",", "0", ",", "1", "]", ")", "]", ",", "axis", "=", "0", ")", ";", "\n", "", "generated", "=", "decoder", ".", "generate", "(", "sentence_representations_list", ",", "sentence_masks_list", ")", "\n", "_", ",", "samples", "=", "VariableFilter", "(", "\n", "bricks", "=", "[", "decoder", ".", "sequence_generator", "]", ",", "name", "=", "\"outputs\"", ")", "(", "\n", "ComputationGraph", "(", "generated", "[", "1", "]", ")", ")", "# generated[1] is next_outputs", "\n", "beam_search", "=", "BeamSearch", "(", "samples", "=", "samples", ")", "\n", "\n", "logger", ".", "info", "(", "\"Loading the model..\"", ")", "\n", "model", "=", "Model", "(", "generated", ")", "\n", "#loader = LoadNMT(config['saveto'])", "\n", "loader", "=", "LoadNMT", "(", "config", "[", "'validation_load'", "]", ")", ";", "\n", "loader", ".", "set_model_parameters", "(", "model", ",", "loader", ".", "load_parameters_default", "(", ")", ")", "\n", "\n", "logger", ".", "info", "(", "\"Started translation: \"", ")", "\n", "test_stream", "=", "get_dev_stream_withContext", "(", "**", "config", ")", "\n", "ts", "=", "test_stream", ".", "get_epoch_iterator", "(", ")", "\n", "rts", "=", "open", "(", "config", "[", "'val_set_source'", "]", ")", ".", "readlines", "(", ")", "\n", "ftrans_original", "=", "open", "(", "config", "[", "'val_output_orig'", "]", ",", "'w'", ")", "\n", "saved_weights", "=", "[", "]", "\n", "total_cost", "=", "0.0", "\n", "\n", "pbar", "=", "ProgressBar", "(", "max_value", "=", "len", "(", "rts", ")", ")", ".", "start", "(", ")", "\n", "for", "i", ",", "(", "line", ",", "line_raw", ")", "in", "enumerate", "(", "zip", "(", "ts", ",", "rts", ")", ")", ":", "\n", "            ", "trans_in", "=", "line_raw", "[", "3", "]", ".", "split", "(", ")", "\n", "seqs", "=", "[", "]", ";", "\n", "input_", "=", "[", "]", ";", "\n", "input_mask", "=", "[", "]", ";", "\n", "for", "j", "in", "range", "(", "config", "[", "'ctx_num'", "]", "+", "1", ")", ":", "\n", "                ", "seqs", ".", "append", "(", "sutils", ".", "_oov_to_unk", "(", "\n", "line", "[", "2", "*", "j", "]", "[", "0", "]", ",", "config", "[", "'src_vocab_size'", "]", ",", "unk_idx", ")", ")", "\n", "input_mask", ".", "append", "(", "numpy", ".", "tile", "(", "line", "[", "2", "*", "j", "+", "1", "]", "[", "0", "]", ",", "(", "config", "[", "'beam_size'", "]", ",", "1", ")", ")", ")", "\n", "input_", ".", "append", "(", "numpy", ".", "tile", "(", "seqs", "[", "j", "]", ",", "(", "config", "[", "'beam_size'", "]", ",", "1", ")", ")", ")", "\n", "#v=costs_computer(input_[0]);", "\n", "# draw sample, checking to ensure we don't get an empty string back", "\n", "", "trans", ",", "costs", ",", "attendeds", ",", "weights", "=", "beam_search", ".", "search", "(", "\n", "input_values", "=", "{", "source_sentence", ":", "input_", "[", "3", "]", ",", "source_sentence_mask", ":", "input_mask", "[", "3", "]", ",", "\n", "context_sentences", "[", "0", "]", ":", "input_", "[", "0", "]", ",", "context_sentence_masks", "[", "0", "]", ":", "input_mask", "[", "0", "]", ",", "\n", "context_sentences", "[", "1", "]", ":", "input_", "[", "1", "]", ",", "context_sentence_masks", "[", "1", "]", ":", "input_mask", "[", "1", "]", ",", "\n", "context_sentences", "[", "2", "]", ":", "input_", "[", "2", "]", ",", "context_sentence_masks", "[", "2", "]", ":", "input_mask", "[", "2", "]", "}", ",", "\n", "max_length", "=", "3", "*", "len", "(", "seqs", "[", "2", "]", ")", ",", "eol_symbol", "=", "trg_eos_idx", ",", "\n", "ignore_first_eol", "=", "True", ")", "\n", "\n", "# normalize costs according to the sequence lengths", "\n", "if", "config", "[", "'normalized_bleu'", "]", ":", "\n", "                ", "lengths", "=", "numpy", ".", "array", "(", "[", "len", "(", "s", ")", "for", "s", "in", "trans", "]", ")", "\n", "costs", "=", "costs", "/", "lengths", "\n", "\n", "", "b", "=", "numpy", ".", "argsort", "(", "costs", ")", "[", "0", "]", "\n", "#best=numpy.argsort(costs)[0:config['beam_size']];", "\n", "#for b in best:", "\n", "try", ":", "\n", "                ", "total_cost", "+=", "costs", "[", "b", "]", "\n", "trans_out", "=", "trans", "[", "b", "]", "\n", "totalLen", "=", "4", "*", "len", "(", "line", "[", "0", "]", "[", "0", "]", ")", ";", "\n", "#weight = weights[b][:, :totalLen]", "\n", "weight", "=", "weights", "\n", "trans_out", "=", "sutils", ".", "_idx_to_word", "(", "trans_out", ",", "trg_ivocab", ")", "\n", "", "except", "ValueError", ":", "\n", "                ", "logger", ".", "info", "(", "\n", "\"Can NOT find a translation for line: {}\"", ".", "format", "(", "i", "+", "1", ")", ")", "\n", "trans_out", "=", "'<UNK>'", "\n", "", "saved_weights", ".", "append", "(", "weight", ")", "\n", "print", "(", "' '", ".", "join", "(", "trans_out", ")", ",", "file", "=", "ftrans_original", ")", "\n", "pbar", ".", "update", "(", "i", "+", "1", ")", "\n", "\n", "", "pbar", ".", "finish", "(", ")", "\n", "logger", ".", "info", "(", "\"Total cost of the test: {}\"", ".", "format", "(", "total_cost", ")", ")", "\n", "cPickle", ".", "dump", "(", "saved_weights", ",", "open", "(", "config", "[", "'attention_weights'", "]", ",", "'wb'", ")", ")", "\n", "ftrans_original", ".", "close", "(", ")", "\n", "ap", "=", "afterprocesser", "(", "config", ")", "\n", "ap", ".", "main", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention.SequenceContentAttention.__init__": [[64, 99], ["blocks.bricks.base.lazy", "blocks.bricks.attention.GenericSequenceAttention.__init__", "blocks.bricks.Linear", "blocks.bricks.Linear", "blocks.bricks.Linear", "blocks.bricks.Linear", "match_functions.SumMatchFunction"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.sampling.ModelInfo.__init__"], ["@", "lazy", "(", "allocation", "=", "[", "'match_dim'", "]", ")", "\n", "def", "__init__", "(", "self", ",", "match_dim", ",", "\n", "use_local_attention", "=", "False", ",", "window_size", "=", "10", ",", "sigma", "=", "None", ",", "\n", "state_transformer", "=", "None", ",", "local_state_transformer", "=", "None", ",", "\n", "local_predictor", "=", "None", ",", "attended_transformer", "=", "None", ",", "\n", "energy_computer", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "SequenceContentAttention", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "if", "not", "state_transformer", ":", "\n", "            ", "state_transformer", "=", "Linear", "(", "use_bias", "=", "False", ",", "name", "=", "\"state_trans\"", ")", "\n", "", "if", "not", "local_state_transformer", ":", "\n", "            ", "local_state_transformer", "=", "Linear", "(", "use_bias", "=", "False", ",", "\n", "name", "=", "\"local_state_trans\"", ")", "\n", "", "if", "not", "local_predictor", ":", "\n", "            ", "local_predictor", "=", "Linear", "(", "use_bias", "=", "False", ",", "name", "=", "\"local_pred\"", ")", "\n", "", "if", "sigma", "is", "None", ":", "\n", "            ", "sigma", "=", "window_size", "*", "1.0", "/", "2", "\n", "", "self", ".", "use_local_attention", "=", "use_local_attention", "\n", "self", ".", "sigma", "=", "sigma", "*", "sigma", "\n", "self", ".", "match_dim", "=", "match_dim", "\n", "self", ".", "state_name", "=", "self", ".", "state_names", "[", "0", "]", "\n", "\n", "self", ".", "state_transformer", "=", "state_transformer", "\n", "self", ".", "local_state_transformer", "=", "local_state_transformer", "\n", "self", ".", "local_predictor", "=", "local_predictor", "\n", "\n", "if", "not", "attended_transformer", ":", "\n", "            ", "attended_transformer", "=", "Linear", "(", "name", "=", "\"preprocess\"", ")", "\n", "", "if", "not", "energy_computer", ":", "\n", "            ", "energy_computer", "=", "SumMatchFunction", "(", "name", "=", "\"energy_comp\"", ")", "\n", "", "self", ".", "attended_transformer", "=", "attended_transformer", "\n", "self", ".", "energy_computer", "=", "energy_computer", "\n", "\n", "self", ".", "children", "=", "[", "self", ".", "state_transformer", ",", "self", ".", "local_state_transformer", ",", "\n", "self", ".", "local_predictor", ",", "self", ".", "attended_transformer", ",", "\n", "energy_computer", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention.SequenceContentAttention._push_allocation_config": [[100, 117], ["None"], "methods", ["None"], ["", "def", "_push_allocation_config", "(", "self", ")", ":", "\n", "        ", "self", ".", "state_dim", "=", "self", ".", "state_dims", "[", "0", "]", "\n", "\n", "self", ".", "state_transformer", ".", "input_dim", "=", "self", ".", "state_dim", "\n", "self", ".", "state_transformer", ".", "output_dim", "=", "self", ".", "match_dim", "\n", "\n", "self", ".", "local_state_transformer", ".", "input_dim", "=", "self", ".", "state_dim", "\n", "self", ".", "local_state_transformer", ".", "output_dim", "=", "self", ".", "match_dim", "\n", "\n", "self", ".", "local_predictor", ".", "input_dim", "=", "self", ".", "state_dim", "\n", "self", ".", "local_predictor", ".", "output_dim", "=", "1", "\n", "\n", "self", ".", "attended_transformer", ".", "input_dim", "=", "self", ".", "attended_dim", "\n", "self", ".", "attended_transformer", ".", "output_dim", "=", "self", ".", "match_dim", "\n", "\n", "self", ".", "energy_computer", ".", "input_dim", "=", "self", ".", "match_dim", "\n", "self", ".", "energy_computer", ".", "output_dim", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention.SequenceContentAttention.compute_energies": [[118, 132], ["attention.SequenceContentAttention.state_transformer.apply", "attention.SequenceContentAttention.energy_computer.apply", "attention.SequenceContentAttention.preprocess"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.match_functions.GeneralMatchFunction.apply", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.match_functions.GeneralMatchFunction.apply", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.SequenceContentAttention_withExInput_3d.preprocess"], ["", "@", "application", "\n", "def", "compute_energies", "(", "self", ",", "attended", ",", "preprocessed_attended", ",", "states", ")", ":", "\n", "        ", "if", "not", "preprocessed_attended", ":", "\n", "            ", "preprocessed_attended", "=", "self", ".", "preprocess", "(", "attended", ")", "\n", "", "_states", "=", "states", "[", "self", ".", "state_name", "]", "\n", "transformed_states", "=", "self", ".", "state_transformer", ".", "apply", "(", "_states", ")", "\n", "# Broadcasting of transformed states should be done automatically", "\n", "# match_vectors = sum(transformed_states.values(),", "\n", "#                     preprocessed_attended)", "\n", "# energies = self.energy_computer.apply(match_vectors).reshape(", "\n", "#     match_vectors.shape[:-1], ndim=match_vectors.ndim - 1)", "\n", "energies", "=", "self", ".", "energy_computer", ".", "apply", "(", "transformed_states", ",", "\n", "preprocessed_attended", ")", "\n", "return", "energies", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention.SequenceContentAttention.get_local_predition": [[133, 146], ["attention.SequenceContentAttention.local_state_transformer.apply", "attention.SequenceContentAttention.local_predictor.apply().reshape", "theano.tensor.nnet.sigmoid", "theano.tensor.sum", "attention.SequenceContentAttention.local_predictor.apply", "theano.tensor.tanh"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.match_functions.GeneralMatchFunction.apply", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.match_functions.GeneralMatchFunction.apply"], ["", "@", "application", "\n", "def", "get_local_predition", "(", "self", ",", "states", ",", "attended", ",", "attended_mask", ")", ":", "\n", "        ", "_states", "=", "states", "[", "self", ".", "state_name", "]", "\n", "# local_states: [batch, features]", "\n", "local_states", "=", "self", ".", "local_state_transformer", ".", "apply", "(", "_states", ")", "\n", "# local_prediction is reshaped to [batch]", "\n", "local_prediction", "=", "self", ".", "local_predictor", ".", "apply", "(", "\n", "tensor", ".", "tanh", "(", "local_states", ")", ")", ".", "reshape", "(", "\n", "local_states", ".", "shape", "[", ":", "-", "1", "]", ",", "ndim", "=", "local_states", ".", "ndim", "-", "1", ")", "\n", "local_prediction", "=", "tensor", ".", "nnet", ".", "sigmoid", "(", "local_prediction", ")", "\n", "# attended_mask is [time, batch]", "\n", "_attended_mask", "=", "tensor", ".", "sum", "(", "attended_mask", ",", "axis", "=", "0", ")", "\n", "return", "_attended_mask", "*", "local_prediction", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention.SequenceContentAttention.adjust_weights": [[147, 164], ["theano.tensor.arange().repeat().reshape().astype", "theano.tensor.exp", "theano.tensor.pow", "theano.tensor.arange().repeat().reshape", "theano.tensor.arange().repeat", "theano.tensor.arange"], "methods", ["None"], ["", "@", "application", "\n", "def", "adjust_weights", "(", "self", ",", "attended_mask", ",", "weights", ",", "local_prediction", ")", ":", "\n", "# weights: [time, batch]", "\n", "# local_prediction: [batch]", "\n", "# locations: [time, batch]", "\n", "        ", "locations", "=", "tensor", ".", "arange", "(", "\n", "attended_mask", ".", "shape", "[", "0", "]", ")", ".", "repeat", "(", "\n", "attended_mask", ".", "shape", "[", "1", "]", ")", ".", "reshape", "(", "\n", "attended_mask", ".", "shape", ")", ".", "astype", "(", "\n", "theano", ".", "config", ".", "floatX", ")", "\n", "# diff: [time, batch]", "\n", "diff", "=", "locations", "-", "local_prediction", "\n", "# gauss: [time, batch]", "\n", "gauss", "=", "tensor", ".", "pow", "(", "diff", ",", "2", ")", "/", "(", "2", "*", "self", ".", "sigma", ")", "\n", "gauss", "=", "tensor", ".", "exp", "(", "-", "gauss", ")", "\n", "weights", "=", "weights", "*", "gauss", "\n", "return", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention.SequenceContentAttention.take_glimpses": [[165, 205], ["blocks.bricks.base.application", "attention.SequenceContentAttention.compute_energies", "attention.SequenceContentAttention.compute_weights", "attention.SequenceContentAttention.compute_weighted_averages", "attention.SequenceContentAttention.get_local_predition", "attention.SequenceContentAttention.adjust_weights"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.SequenceContentAttention_withExInput_3d.compute_energies", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.SequenceContentAttention_withExInput_3d.compute_weights", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.SequenceContentAttention_withExInput_3d.compute_weighted_averages", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.SequenceContentAttention_withExInput_3d.get_local_predition", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.SequenceContentAttention_withExInput_3d.adjust_weights"], ["", "@", "application", "(", "outputs", "=", "[", "'weighted_averages'", ",", "'weights'", "]", ")", "\n", "def", "take_glimpses", "(", "self", ",", "attended", ",", "preprocessed_attended", "=", "None", ",", "\n", "attended_mask", "=", "None", ",", "**", "states", ")", ":", "\n", "        ", "r\"\"\"Compute attention weights and produce glimpses.\n\n        Parameters\n        ----------\n        attended : :class:`~tensor.TensorVariable`\n            The sequence, time is the 1-st dimension.\n        preprocessed_attended : :class:`~tensor.TensorVariable`\n            The preprocessed sequence. If ``None``, is computed by calling\n            :meth:`preprocess`.\n        attended_mask : :class:`~tensor.TensorVariable`\n            A 0/1 mask specifying available data. 0 means that the\n            corresponding sequence element is fake.\n        \\*\\*states\n            The states of the network.\n\n        Returns\n        -------\n        weighted_averages : :class:`~theano.Variable`\n            Linear combinations of sequence elements with the attention\n            weights.\n        weights : :class:`~theano.Variable`\n            The attention weights. The first dimension is batch, the second\n            is time.\n\n        \"\"\"", "\n", "energies", "=", "self", ".", "compute_energies", "(", "\n", "attended", ",", "preprocessed_attended", ",", "states", ")", "\n", "# weights has dimensions: [time (src), batch]", "\n", "weights", "=", "self", ".", "compute_weights", "(", "energies", ",", "attended_mask", ")", "\n", "if", "self", ".", "use_local_attention", ":", "\n", "# local_pred should have dimension: [batch],", "\n", "# the predicted position for each batch", "\n", "            ", "local_pred", "=", "self", ".", "get_local_predition", "(", "\n", "states", ",", "attended", ",", "attended_mask", ")", "\n", "weights", "=", "self", ".", "adjust_weights", "(", "attended_mask", ",", "weights", ",", "local_pred", ")", "\n", "", "weighted_averages", "=", "self", ".", "compute_weighted_averages", "(", "weights", ",", "attended", ")", "\n", "return", "weighted_averages", ",", "weights", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention.SequenceContentAttention.take_glimpses_inputs": [[206, 210], ["take_glimpses.property"], "methods", ["None"], ["", "@", "take_glimpses", ".", "property", "(", "'inputs'", ")", "\n", "def", "take_glimpses_inputs", "(", "self", ")", ":", "\n", "        ", "return", "(", "[", "'attended'", ",", "'preprocessed_attended'", ",", "'attended_mask'", "]", "+", "\n", "self", ".", "state_names", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention.SequenceContentAttention.initial_glimpses": [[211, 215], ["blocks.bricks.base.application", "theano.tensor.zeros", "theano.tensor.zeros"], "methods", ["None"], ["", "@", "application", "(", "outputs", "=", "[", "'weighted_averages'", ",", "'weights'", "]", ")", "\n", "def", "initial_glimpses", "(", "self", ",", "batch_size", ",", "attended", ")", ":", "\n", "        ", "return", "[", "tensor", ".", "zeros", "(", "(", "batch_size", ",", "self", ".", "attended_dim", ")", ")", ",", "\n", "tensor", ".", "zeros", "(", "(", "batch_size", ",", "attended", ".", "shape", "[", "0", "]", ")", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention.SequenceContentAttention.preprocess": [[216, 227], ["blocks.bricks.base.application", "attention.SequenceContentAttention.attended_transformer.apply"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.match_functions.GeneralMatchFunction.apply"], ["", "@", "application", "(", "inputs", "=", "[", "'attended'", "]", ",", "outputs", "=", "[", "'preprocessed_attended'", "]", ")", "\n", "def", "preprocess", "(", "self", ",", "attended", ")", ":", "\n", "        ", "\"\"\"Preprocess the sequence for computing attention weights.\n\n        Parameters\n        ----------\n        attended : :class:`~tensor.TensorVariable`\n            The attended sequence, time is the 1-st dimension.\n\n        \"\"\"", "\n", "return", "self", ".", "attended_transformer", ".", "apply", "(", "attended", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention.SequenceContentAttention.get_dim": [[228, 234], ["super().get_dim"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.AttentionRecurrent.get_dim"], ["", "def", "get_dim", "(", "self", ",", "name", ")", ":", "\n", "        ", "if", "name", "in", "[", "'weighted_averages'", "]", ":", "\n", "            ", "return", "self", ".", "attended_dim", "\n", "", "if", "name", "in", "[", "'weights'", "]", ":", "\n", "            ", "return", "0", "\n", "", "return", "super", "(", "SequenceContentAttention", ",", "self", ")", ".", "get_dim", "(", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention.SequenceContentAttention_3d.__init__": [[285, 320], ["blocks.bricks.base.lazy", "blocks.bricks.attention.GenericSequenceAttention.__init__", "blocks.bricks.Linear", "blocks.bricks.Linear", "blocks.bricks.Linear", "blocks.bricks.Linear", "match_functions.SumMatchFunction"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.sampling.ModelInfo.__init__"], ["@", "lazy", "(", "allocation", "=", "[", "'match_dim'", "]", ")", "\n", "def", "__init__", "(", "self", ",", "match_dim", ",", "\n", "use_local_attention", "=", "False", ",", "window_size", "=", "10", ",", "sigma", "=", "None", ",", "\n", "state_transformer", "=", "None", ",", "local_state_transformer", "=", "None", ",", "\n", "local_predictor", "=", "None", ",", "attended_transformer", "=", "None", ",", "\n", "energy_computer", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "SequenceContentAttention", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "if", "not", "state_transformer", ":", "\n", "            ", "state_transformer", "=", "Linear", "(", "use_bias", "=", "False", ",", "name", "=", "\"state_trans\"", ")", "\n", "", "if", "not", "local_state_transformer", ":", "\n", "            ", "local_state_transformer", "=", "Linear", "(", "use_bias", "=", "False", ",", "\n", "name", "=", "\"local_state_trans\"", ")", "\n", "", "if", "not", "local_predictor", ":", "\n", "            ", "local_predictor", "=", "Linear", "(", "use_bias", "=", "False", ",", "name", "=", "\"local_pred\"", ")", "\n", "", "if", "sigma", "is", "None", ":", "\n", "            ", "sigma", "=", "window_size", "*", "1.0", "/", "2", "\n", "", "self", ".", "use_local_attention", "=", "use_local_attention", "\n", "self", ".", "sigma", "=", "sigma", "*", "sigma", "\n", "self", ".", "match_dim", "=", "match_dim", "\n", "self", ".", "state_name", "=", "self", ".", "state_names", "[", "0", "]", "\n", "\n", "self", ".", "state_transformer", "=", "state_transformer", "\n", "self", ".", "local_state_transformer", "=", "local_state_transformer", "\n", "self", ".", "local_predictor", "=", "local_predictor", "\n", "\n", "if", "not", "attended_transformer", ":", "\n", "            ", "attended_transformer", "=", "Linear", "(", "name", "=", "\"preprocess\"", ")", "\n", "", "if", "not", "energy_computer", ":", "\n", "            ", "energy_computer", "=", "SumMatchFunction", "(", "name", "=", "\"energy_comp\"", ")", "\n", "", "self", ".", "attended_transformer", "=", "attended_transformer", "\n", "self", ".", "energy_computer", "=", "energy_computer", "\n", "\n", "self", ".", "children", "=", "[", "self", ".", "state_transformer", ",", "self", ".", "local_state_transformer", ",", "\n", "self", ".", "local_predictor", ",", "self", ".", "attended_transformer", ",", "\n", "energy_computer", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention.SequenceContentAttention_3d._push_allocation_config": [[321, 338], ["None"], "methods", ["None"], ["", "def", "_push_allocation_config", "(", "self", ")", ":", "\n", "        ", "self", ".", "state_dim", "=", "self", ".", "state_dims", "[", "0", "]", "\n", "\n", "self", ".", "state_transformer", ".", "input_dim", "=", "self", ".", "state_dim", "\n", "self", ".", "state_transformer", ".", "output_dim", "=", "self", ".", "match_dim", "\n", "\n", "self", ".", "local_state_transformer", ".", "input_dim", "=", "self", ".", "state_dim", "\n", "self", ".", "local_state_transformer", ".", "output_dim", "=", "self", ".", "match_dim", "\n", "\n", "self", ".", "local_predictor", ".", "input_dim", "=", "self", ".", "state_dim", "\n", "self", ".", "local_predictor", ".", "output_dim", "=", "1", "\n", "\n", "self", ".", "attended_transformer", ".", "input_dim", "=", "self", ".", "attended_dim", "\n", "self", ".", "attended_transformer", ".", "output_dim", "=", "self", ".", "match_dim", "\n", "\n", "self", ".", "energy_computer", ".", "input_dim", "=", "self", ".", "match_dim", "\n", "self", ".", "energy_computer", ".", "output_dim", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention.SequenceContentAttention_3d.compute_energies": [[339, 353], ["attention.SequenceContentAttention_3d.state_transformer.apply", "attention.SequenceContentAttention_3d.energy_computer.apply", "attention.SequenceContentAttention_3d.preprocess"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.match_functions.GeneralMatchFunction.apply", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.match_functions.GeneralMatchFunction.apply", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.SequenceContentAttention_withExInput_3d.preprocess"], ["", "@", "application", "\n", "def", "compute_energies", "(", "self", ",", "attended", ",", "preprocessed_attended", ",", "states", ")", ":", "\n", "        ", "if", "not", "preprocessed_attended", ":", "\n", "            ", "preprocessed_attended", "=", "self", ".", "preprocess", "(", "attended", ")", "\n", "", "_states", "=", "states", "[", "self", ".", "state_name", "]", "\n", "transformed_states", "=", "self", ".", "state_transformer", ".", "apply", "(", "_states", ")", "\n", "# Broadcasting of transformed states should be done automatically", "\n", "# match_vectors = sum(transformed_states.values(),", "\n", "#                     preprocessed_attended)", "\n", "# energies = self.energy_computer.apply(match_vectors).reshape(", "\n", "#     match_vectors.shape[:-1], ndim=match_vectors.ndim - 1)", "\n", "energies", "=", "self", ".", "energy_computer", ".", "apply", "(", "transformed_states", ",", "\n", "preprocessed_attended", ")", "\n", "return", "energies", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention.SequenceContentAttention_3d.get_local_predition": [[354, 367], ["attention.SequenceContentAttention_3d.local_state_transformer.apply", "attention.SequenceContentAttention_3d.local_predictor.apply().reshape", "theano.tensor.nnet.sigmoid", "theano.tensor.sum", "attention.SequenceContentAttention_3d.local_predictor.apply", "theano.tensor.tanh"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.match_functions.GeneralMatchFunction.apply", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.match_functions.GeneralMatchFunction.apply"], ["", "@", "application", "\n", "def", "get_local_predition", "(", "self", ",", "states", ",", "attended", ",", "attended_mask", ")", ":", "\n", "        ", "_states", "=", "states", "[", "self", ".", "state_name", "]", "\n", "# local_states: [batch, features]", "\n", "local_states", "=", "self", ".", "local_state_transformer", ".", "apply", "(", "_states", ")", "\n", "# local_prediction is reshaped to [batch]", "\n", "local_prediction", "=", "self", ".", "local_predictor", ".", "apply", "(", "\n", "tensor", ".", "tanh", "(", "local_states", ")", ")", ".", "reshape", "(", "\n", "local_states", ".", "shape", "[", ":", "-", "1", "]", ",", "ndim", "=", "local_states", ".", "ndim", "-", "1", ")", "\n", "local_prediction", "=", "tensor", ".", "nnet", ".", "sigmoid", "(", "local_prediction", ")", "\n", "# attended_mask is [time, batch]", "\n", "_attended_mask", "=", "tensor", ".", "sum", "(", "attended_mask", ",", "axis", "=", "0", ")", "\n", "return", "_attended_mask", "*", "local_prediction", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention.SequenceContentAttention_3d.adjust_weights": [[368, 385], ["theano.tensor.arange().repeat().reshape().astype", "theano.tensor.exp", "theano.tensor.pow", "theano.tensor.arange().repeat().reshape", "theano.tensor.arange().repeat", "theano.tensor.arange"], "methods", ["None"], ["", "@", "application", "\n", "def", "adjust_weights", "(", "self", ",", "attended_mask", ",", "weights", ",", "local_prediction", ")", ":", "\n", "# weights: [time, batch]", "\n", "# local_prediction: [batch]", "\n", "# locations: [time, batch]", "\n", "        ", "locations", "=", "tensor", ".", "arange", "(", "\n", "attended_mask", ".", "shape", "[", "0", "]", ")", ".", "repeat", "(", "\n", "attended_mask", ".", "shape", "[", "1", "]", ")", ".", "reshape", "(", "\n", "attended_mask", ".", "shape", ")", ".", "astype", "(", "\n", "theano", ".", "config", ".", "floatX", ")", "\n", "# diff: [time, batch]", "\n", "diff", "=", "locations", "-", "local_prediction", "\n", "# gauss: [time, batch]", "\n", "gauss", "=", "tensor", ".", "pow", "(", "diff", ",", "2", ")", "/", "(", "2", "*", "self", ".", "sigma", ")", "\n", "gauss", "=", "tensor", ".", "exp", "(", "-", "gauss", ")", "\n", "weights", "=", "weights", "*", "gauss", "\n", "return", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention.SequenceContentAttention_3d.compute_weights": [[386, 419], ["theano.tensor.exp", "energies.max().dimshuffle", "theano.tensor.exp.sum().dimshuffle", "theano.tensor.all().dimshuffle", "energies.max", "theano.tensor.exp.sum", "theano.tensor.all"], "methods", ["None"], ["", "@", "application", "\n", "def", "compute_weights", "(", "self", ",", "energies", ",", "attended_mask", ")", ":", "\n", "        ", "\"\"\"Compute weights from energies in softmax-like fashion.\n\n        .. todo ::\n\n            Use :class:`~blocks.bricks.Softmax`.\n\n        Parameters\n        ----------\n        energies : :class:`~theano.Variable`\n            The energies. Must be of the same shape as the mask.\n        attended_mask : :class:`~theano.Variable`\n            The mask for the attended. The index in the sequence must be\n            the first dimension.\n\n        Returns\n        -------\n        weights : :class:`~theano.Variable`\n            Summing to 1 non-negative weights of the same shape\n            as `energies`.\n\n        \"\"\"", "\n", "# Stabilize energies first and then exponentiate", "\n", "energies", "=", "energies", "-", "energies", ".", "max", "(", "axis", "=", "1", ")", ".", "dimshuffle", "(", "[", "0", ",", "'x'", ",", "1", "]", ")", ";", "\n", "unnormalized_weights", "=", "tensor", ".", "exp", "(", "energies", ")", "\n", "if", "attended_mask", ":", "\n", "            ", "unnormalized_weights", "*=", "attended_mask", "\n", "#If mask consists of all zeros use 1 as the normalization coefficient", "\n", "", "normalization", "=", "(", "unnormalized_weights", ".", "sum", "(", "axis", "=", "1", ")", ".", "dimshuffle", "(", "[", "0", ",", "'x'", ",", "1", "]", ")", "+", "\n", "tensor", ".", "all", "(", "1", "-", "attended_mask", ",", "axis", "=", "1", ")", ".", "dimshuffle", "(", "[", "0", ",", "'x'", ",", "1", "]", ")", ")", "\n", "# normalization = unnormalized_weights.sum(axis=1).dimshuffle([0,'x',1])", "\n", "return", "unnormalized_weights", "/", "normalization", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention.SequenceContentAttention_3d.compute_weighted_averages": [[420, 442], ["theano.tensor.shape_padright"], "methods", ["None"], ["", "@", "application", "\n", "def", "compute_weighted_averages", "(", "self", ",", "weights", ",", "attended", ")", ":", "\n", "        ", "\"\"\"Compute weighted averages of the attended sequence vectors.\n\n        Parameters\n        ----------\n        weights : :class:`~theano.Variable`\n            The weights. The shape must be equal to the attended shape\n            without the last dimension.\n        attended : :class:`~theano.Variable`\n            The attended. The index in the sequence must be the first\n            dimension.\n\n        Returns\n        -------\n        weighted_averages : :class:`~theano.Variable`\n            The weighted averages of the attended elements. The shape\n            is equal to the attended shape with the first dimension\n            dropped.\n\n        \"\"\"", "\n", "return", "(", "tensor", ".", "shape_padright", "(", "weights", ")", "*", "attended", ")", ".", "sum", "(", "axis", "=", "1", ")", "\n", "#return (weights * attended).sum(axis=1)", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention.SequenceContentAttention_3d.take_glimpses": [[444, 484], ["blocks.bricks.base.application", "attention.SequenceContentAttention_3d.compute_energies", "attention.SequenceContentAttention_3d.compute_weights", "attention.SequenceContentAttention_3d.compute_weighted_averages", "attention.SequenceContentAttention_3d.get_local_predition", "attention.SequenceContentAttention_3d.adjust_weights", "attention.SequenceContentAttention_3d.transpose"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.SequenceContentAttention_withExInput_3d.compute_energies", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.SequenceContentAttention_withExInput_3d.compute_weights", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.SequenceContentAttention_withExInput_3d.compute_weighted_averages", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.SequenceContentAttention_withExInput_3d.get_local_predition", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.SequenceContentAttention_withExInput_3d.adjust_weights"], ["", "@", "application", "(", "outputs", "=", "[", "'weighted_averages'", ",", "'weights'", "]", ")", "\n", "def", "take_glimpses", "(", "self", ",", "attended", ",", "preprocessed_attended", "=", "None", ",", "\n", "attended_mask", "=", "None", ",", "**", "states", ")", ":", "\n", "        ", "r\"\"\"Compute attention weights and produce glimpses.\n\n        Parameters\n        ----------\n        attended : :class:`~tensor.TensorVariable`\n            The sequence, time is the 1-st dimension.\n        preprocessed_attended : :class:`~tensor.TensorVariable`\n            The preprocessed sequence. If ``None``, is computed by calling\n            :meth:`preprocess`.\n        attended_mask : :class:`~tensor.TensorVariable`\n            A 0/1 mask specifying available data. 0 means that the\n            corresponding sequence element is fake.\n        \\*\\*states\n            The states of the network.\n\n        Returns\n        -------\n        weighted_averages : :class:`~theano.Variable`\n            Linear combinations of sequence elements with the attention\n            weights.\n        weights : :class:`~theano.Variable`\n            The attention weights. The first dimension is batch, the second\n            is time.\n\n        \"\"\"", "\n", "energies", "=", "self", ".", "compute_energies", "(", "\n", "attended", ",", "preprocessed_attended", ",", "states", ")", "\n", "# weights has dimensions: [context_num,time (src), batch]", "\n", "weights", "=", "self", ".", "compute_weights", "(", "energies", ",", "attended_mask", ")", "\n", "if", "self", ".", "use_local_attention", ":", "\n", "# local_pred should have dimension: [batch],", "\n", "# the predicted position for each batch", "\n", "            ", "local_pred", "=", "self", ".", "get_local_predition", "(", "\n", "states", ",", "attended", ",", "attended_mask", ")", "\n", "weights", "=", "self", ".", "adjust_weights", "(", "attended_mask", ",", "weights", ",", "local_pred", ")", "\n", "", "weighted_averages", "=", "self", ".", "compute_weighted_averages", "(", "weights", ",", "attended", ")", "\n", "return", "weighted_averages", ",", "weights", ".", "transpose", "(", "(", "2", ",", "1", ",", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention.SequenceContentAttention_3d.take_glimpses_inputs": [[485, 489], ["take_glimpses.property"], "methods", ["None"], ["", "@", "take_glimpses", ".", "property", "(", "'inputs'", ")", "\n", "def", "take_glimpses_inputs", "(", "self", ")", ":", "\n", "        ", "return", "(", "[", "'attended'", ",", "'preprocessed_attended'", ",", "'attended_mask'", "]", "+", "\n", "self", ".", "state_names", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention.SequenceContentAttention_3d.initial_glimpses": [[490, 494], ["blocks.bricks.base.application", "theano.tensor.zeros", "theano.tensor.zeros"], "methods", ["None"], ["", "@", "application", "(", "outputs", "=", "[", "'weighted_averages'", ",", "'weights'", "]", ")", "\n", "def", "initial_glimpses", "(", "self", ",", "batch_size", ",", "attended", ")", ":", "\n", "        ", "return", "[", "tensor", ".", "zeros", "(", "(", "batch_size", ",", "self", ".", "attended_dim", ")", ")", ",", "\n", "tensor", ".", "zeros", "(", "(", "batch_size", ",", "attended", ".", "shape", "[", "1", "]", ",", "attended", ".", "shape", "[", "0", "]", ")", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention.SequenceContentAttention_3d.preprocess": [[495, 506], ["blocks.bricks.base.application", "attention.SequenceContentAttention_3d.attended_transformer.apply"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.match_functions.GeneralMatchFunction.apply"], ["", "@", "application", "(", "inputs", "=", "[", "'attended'", "]", ",", "outputs", "=", "[", "'preprocessed_attended'", "]", ")", "\n", "def", "preprocess", "(", "self", ",", "attended", ")", ":", "\n", "        ", "\"\"\"Preprocess the sequence for computing attention weights.\n\n        Parameters\n        ----------\n        attended : :class:`~tensor.TensorVariable`\n            The attended sequence, time is the 1-st dimension.\n\n        \"\"\"", "\n", "return", "self", ".", "attended_transformer", ".", "apply", "(", "attended", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention.SequenceContentAttention_3d.get_dim": [[508, 514], ["super().get_dim"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.AttentionRecurrent.get_dim"], ["", "def", "get_dim", "(", "self", ",", "name", ")", ":", "\n", "        ", "if", "name", "in", "[", "'weighted_averages'", "]", ":", "\n", "            ", "return", "self", ".", "attended_dim", "\n", "", "if", "name", "in", "[", "'weights'", "]", ":", "\n", "            ", "return", "0", "\n", "", "return", "super", "(", "SequenceContentAttention", ",", "self", ")", ".", "get_dim", "(", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention.AttentionRecurrent.__init__": [[576, 617], ["blocks.bricks.attention.AbstractAttentionRecurrent.__init__", "list", "list", "list", "blocks.bricks.parallel.Distribute"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.sampling.ModelInfo.__init__"], ["def", "__init__", "(", "self", ",", "transition", ",", "context_transition", ",", "attention", ",", "distribute", "=", "None", ",", "\n", "add_contexts", "=", "True", ",", "\n", "attended_name", "=", "None", ",", "attended_mask_name", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "AttentionRecurrent", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "_sequence_names", "=", "list", "(", "transition", ".", "apply", ".", "sequences", ")", "\n", "self", ".", "_state_names", "=", "list", "(", "transition", ".", "apply", ".", "states", ")", "\n", "self", ".", "_context_names", "=", "list", "(", "transition", ".", "apply", ".", "contexts", ")", "\n", "if", "add_contexts", ":", "\n", "            ", "if", "not", "attended_name", ":", "\n", "                ", "attended_name", "=", "'attended_list'", "\n", "", "if", "not", "attended_mask_name", ":", "\n", "                ", "attended_mask_name", "=", "'attended_mask_list'", "\n", "", "self", ".", "_context_names", "+=", "[", "attended_name", ",", "attended_mask_name", "]", "\n", "", "else", ":", "\n", "            ", "attended_name", "=", "self", ".", "_context_names", "[", "0", "]", "\n", "attended_mask_name", "=", "self", ".", "_context_names", "[", "1", "]", "\n", "", "if", "not", "distribute", ":", "\n", "            ", "normal_inputs", "=", "[", "name", "for", "name", "in", "self", ".", "_sequence_names", "\n", "if", "'mask'", "not", "in", "name", "]", "\n", "distribute", "=", "Distribute", "(", "normal_inputs", ",", "\n", "attention", ".", "take_glimpses", ".", "outputs", "[", "0", "]", ")", "\n", "\n", "", "self", ".", "transition", "=", "transition", "\n", "self", ".", "context_transition", "=", "context_transition", "\n", "self", ".", "attention", "=", "attention", "\n", "self", ".", "distribute", "=", "distribute", "\n", "self", ".", "add_contexts", "=", "add_contexts", "\n", "self", ".", "attended_name", "=", "attended_name", "\n", "self", ".", "attended_mask_name", "=", "attended_mask_name", "\n", "\n", "self", ".", "preprocessed_attended_name", "=", "\"preprocessed_\"", "+", "self", ".", "attended_name", "\n", "\n", "self", ".", "_glimpse_names", "=", "self", ".", "attention", ".", "take_glimpses", ".", "outputs", "#unchanged", "\n", "# We need to determine which glimpses are fed back.", "\n", "# Currently we extract it from `take_glimpses` signature.", "\n", "self", ".", "previous_glimpses_needed", "=", "[", "\n", "name", "for", "name", "in", "self", ".", "_glimpse_names", "\n", "if", "name", "in", "self", ".", "attention", ".", "take_glimpses", ".", "inputs", "]", "\n", "\n", "self", ".", "children", "=", "[", "self", ".", "transition", ",", "self", ".", "context_transition", ",", "self", ".", "attention", ",", "self", ".", "distribute", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention.AttentionRecurrent._push_allocation_config": [[618, 626], ["attention.AttentionRecurrent.transition.get_dims", "attention.AttentionRecurrent.get_dim", "attention.AttentionRecurrent.attention.get_dim", "attention.AttentionRecurrent.transition.get_dims"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.AttentionRecurrent.get_dim", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.AttentionRecurrent.get_dim"], ["", "def", "_push_allocation_config", "(", "self", ")", ":", "\n", "        ", "self", ".", "attention", ".", "state_dims", "=", "self", ".", "transition", ".", "get_dims", "(", "\n", "self", ".", "attention", ".", "state_names", ")", "\n", "self", ".", "attention", ".", "attended_dim", "=", "self", ".", "get_dim", "(", "self", ".", "attended_name", ")", "\n", "self", ".", "distribute", ".", "source_dim", "=", "self", ".", "attention", ".", "get_dim", "(", "\n", "self", ".", "distribute", ".", "source_name", ")", "\n", "self", ".", "distribute", ".", "target_dims", "=", "self", ".", "transition", ".", "get_dims", "(", "\n", "self", ".", "distribute", ".", "target_names", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention.AttentionRecurrent.take_glimpses": [[627, 658], ["blocks.utils.dict_subset", "blocks.utils.dict_subset", "blocks.utils.dict_subset", "attention.AttentionRecurrent.attention.take_glimpses", "kwargs.pop", "kwargs.pop", "kwargs.pop", "blocks.utils.dict_union"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.AttentionRecurrent.take_glimpses"], ["", "@", "application", "\n", "def", "take_glimpses", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "r\"\"\"Compute glimpses with the attention mechanism.\n\n        A thin wrapper over `self.attention.take_glimpses`: takes care\n        of choosing and renaming the necessary arguments.\n\n        Parameters\n        ----------\n        \\*\\*kwargs\n            Must contain the attended, previous step states and glimpses.\n            Can optionaly contain the attended mask and the preprocessed\n            attended.\n\n        Returns\n        -------\n        glimpses : list of :class:`~tensor.TensorVariable`\n            Current step glimpses.\n\n        \"\"\"", "\n", "states", "=", "dict_subset", "(", "kwargs", ",", "self", ".", "_state_names", ",", "pop", "=", "True", ")", "\n", "glimpses", "=", "dict_subset", "(", "kwargs", ",", "self", ".", "_glimpse_names", ",", "pop", "=", "True", ")", "\n", "glimpses_needed", "=", "dict_subset", "(", "glimpses", ",", "self", ".", "previous_glimpses_needed", ")", "\n", "result", "=", "self", ".", "attention", ".", "take_glimpses", "(", "\n", "kwargs", ".", "pop", "(", "self", ".", "attended_name", ")", ",", "\n", "kwargs", ".", "pop", "(", "self", ".", "preprocessed_attended_name", ",", "None", ")", ",", "\n", "kwargs", ".", "pop", "(", "self", ".", "attended_mask_name", ",", "None", ")", ",", "\n", "**", "dict_union", "(", "states", ",", "glimpses_needed", ")", ")", "\n", "# At this point kwargs may contain additional items.", "\n", "# e.g. AttentionRecurrent.transition.apply.contexts", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention.AttentionRecurrent.take_glimpses_outputs": [[659, 662], ["take_glimpses.property"], "methods", ["None"], ["", "@", "take_glimpses", ".", "property", "(", "'outputs'", ")", "\n", "def", "take_glimpses_outputs", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_glimpse_names", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention.AttentionRecurrent.compute_states": [[663, 701], ["blocks.utils.dict_subset", "blocks.utils.dict_subset", "blocks.utils.dict_subset.update", "attention.AttentionRecurrent.transition.apply", "kwargs.pop", "kwargs.pop", "attention.AttentionRecurrent.distribute.apply", "blocks.utils.dict_union", "blocks.utils.dict_subset", "blocks.utils.dict_union"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.match_functions.GeneralMatchFunction.apply", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.match_functions.GeneralMatchFunction.apply"], ["", "@", "application", "\n", "def", "compute_states", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "r\"\"\"Compute current states when glimpses have already been computed.\n\n        Combines an application of the `distribute` that alter the\n        sequential inputs of the wrapped transition and an application of\n        the wrapped transition. All unknown keyword arguments go to\n        the wrapped transition.\n\n        Parameters\n        ----------\n        \\*\\*kwargs\n            Should contain everything what `self.transition` needs\n            and in addition the current glimpses.\n\n        Returns\n        -------\n        current_states : list of :class:`~tensor.TensorVariable`\n            Current states computed by `self.transition`.\n\n        \"\"\"", "\n", "# make sure we are not popping the mask", "\n", "normal_inputs", "=", "[", "name", "for", "name", "in", "self", ".", "_sequence_names", "\n", "if", "'mask'", "not", "in", "name", "]", "\n", "sequences", "=", "dict_subset", "(", "kwargs", ",", "normal_inputs", ",", "pop", "=", "True", ")", "\n", "glimpses", "=", "dict_subset", "(", "kwargs", ",", "self", ".", "_glimpse_names", ",", "pop", "=", "True", ")", "\n", "if", "self", ".", "add_contexts", ":", "\n", "            ", "kwargs", ".", "pop", "(", "self", ".", "attended_name", ")", "\n", "# attended_mask_name can be optional", "\n", "kwargs", ".", "pop", "(", "self", ".", "attended_mask_name", ",", "None", ")", "\n", "\n", "", "sequences", ".", "update", "(", "self", ".", "distribute", ".", "apply", "(", "\n", "as_dict", "=", "True", ",", "**", "dict_subset", "(", "dict_union", "(", "sequences", ",", "glimpses", ")", ",", "\n", "self", ".", "distribute", ".", "apply", ".", "inputs", ")", ")", ")", "\n", "current_states", "=", "self", ".", "transition", ".", "apply", "(", "\n", "iterate", "=", "False", ",", "as_list", "=", "True", ",", "\n", "**", "dict_union", "(", "sequences", ",", "kwargs", ")", ")", "\n", "return", "current_states", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention.AttentionRecurrent.compute_states_outputs": [[702, 705], ["compute_states.property"], "methods", ["None"], ["", "@", "compute_states", ".", "property", "(", "'outputs'", ")", "\n", "def", "compute_states_outputs", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_state_names", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention.AttentionRecurrent.transform_context": [[706, 709], ["attention.AttentionRecurrent.context_transition.apply", "theano.tensor.ones"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.match_functions.GeneralMatchFunction.apply"], ["", "@", "application", "\n", "def", "transform_context", "(", "self", ",", "weighted_averages", ")", ":", "\n", "        ", "return", "self", ".", "context_transition", ".", "apply", "(", "weighted_averages", ",", "tensor", ".", "ones", "(", "[", "weighted_averages", ".", "shape", "[", "1", "]", ",", "weighted_averages", ".", "shape", "[", "0", "]", "]", ")", ")", "[", "-", "1", "]", ";", "\n", "", "@", "recurrent", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention.AttentionRecurrent.do_apply": [[709, 752], ["kwargs.pop", "kwargs.get", "blocks.utils.dict_subset", "blocks.utils.dict_subset", "blocks.utils.dict_subset", "attention.AttentionRecurrent.take_glimpses", "attention.AttentionRecurrent.compute_states", "attention.AttentionRecurrent.context_transition.apply", "list", "blocks.utils.dict_union", "theano.tensor.ones", "blocks.utils.dict_union", "attention.AttentionRecurrent.values"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.AttentionRecurrent.take_glimpses", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.AttentionRecurrent.compute_states", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.match_functions.GeneralMatchFunction.apply"], ["", "@", "recurrent", "\n", "def", "do_apply", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "r\"\"\"Process a sequence attending the attended context every step.\n\n        In addition to the original sequence this method also requires\n        its preprocessed version, the one computed by the `preprocess`\n        method of the attention mechanism. Unknown keyword arguments\n        are passed to the wrapped transition.\n\n        Parameters\n        ----------\n        \\*\\*kwargs\n            Should contain current inputs, previous step states, contexts,\n            the preprocessed attended context, previous step glimpses.\n\n        Returns\n        -------\n        outputs : list of :class:`~tensor.TensorVariable`\n            The current step states and glimpses.\n\n        \"\"\"", "\n", "attended_list", "=", "kwargs", "[", "self", ".", "attended_name", "]", "\n", "preprocessed_attended_list", "=", "kwargs", ".", "pop", "(", "self", ".", "preprocessed_attended_name", ")", "\n", "attended_mask_list", "=", "kwargs", ".", "get", "(", "self", ".", "attended_mask_name", ")", "\n", "\n", "sequences", "=", "dict_subset", "(", "kwargs", ",", "self", ".", "_sequence_names", ",", "pop", "=", "True", ",", "\n", "must_have", "=", "False", ")", "\n", "states", "=", "dict_subset", "(", "kwargs", ",", "self", ".", "_state_names", ",", "pop", "=", "True", ")", "\n", "glimpses", "=", "dict_subset", "(", "kwargs", ",", "self", ".", "_glimpse_names", ",", "pop", "=", "True", ")", "\n", "current_glimpses", "=", "self", ".", "take_glimpses", "(", "\n", "as_dict", "=", "True", ",", "\n", "**", "dict_union", "(", "\n", "states", ",", "glimpses", ",", "\n", "{", "self", ".", "attended_name", ":", "attended_list", ",", "\n", "self", ".", "attended_mask_name", ":", "attended_mask_list", ",", "\n", "self", ".", "preprocessed_attended_name", ":", "preprocessed_attended_list", "}", ")", ")", "\n", "#the weighted averages to go through context transition GRU one by one.", "\n", "current_glimpses", "[", "'weighted_averages'", "]", "=", "self", ".", "context_transition", ".", "apply", "(", "current_glimpses", "[", "'weighted_averages'", "]", ",", "tensor", ".", "ones", "(", "[", "current_glimpses", "[", "'weighted_averages'", "]", ".", "shape", "[", "1", "]", ",", "\n", "current_glimpses", "[", "'weighted_averages'", "]", ".", "shape", "[", "0", "]", "]", ")", ")", "[", "-", "1", "]", ";", "\n", "current_states", "=", "self", ".", "compute_states", "(", "\n", "as_list", "=", "True", ",", "\n", "**", "dict_union", "(", "sequences", ",", "states", ",", "current_glimpses", ",", "kwargs", ")", ")", "\n", "return", "current_states", "+", "list", "(", "current_glimpses", ".", "values", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention.AttentionRecurrent.do_apply_sequences": [[754, 757], ["do_apply.property"], "methods", ["None"], ["", "@", "do_apply", ".", "property", "(", "'sequences'", ")", "\n", "def", "do_apply_sequences", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_sequence_names", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention.AttentionRecurrent.do_apply_contexts": [[758, 761], ["do_apply.property"], "methods", ["None"], ["", "@", "do_apply", ".", "property", "(", "'contexts'", ")", "\n", "def", "do_apply_contexts", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_context_names", "+", "[", "self", ".", "preprocessed_attended_name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention.AttentionRecurrent.do_apply_states": [[762, 765], ["do_apply.property"], "methods", ["None"], ["", "@", "do_apply", ".", "property", "(", "'states'", ")", "\n", "def", "do_apply_states", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_state_names", "+", "self", ".", "_glimpse_names", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention.AttentionRecurrent.do_apply_outputs": [[766, 769], ["do_apply.property"], "methods", ["None"], ["", "@", "do_apply", ".", "property", "(", "'outputs'", ")", "\n", "def", "do_apply_outputs", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_state_names", "+", "self", ".", "_glimpse_names", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention.AttentionRecurrent.apply": [[770, 784], ["attention.AttentionRecurrent.attention.preprocess", "attention.AttentionRecurrent.do_apply", "blocks.utils.dict_union"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.SequenceContentAttention_withExInput_3d.preprocess", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.AttentionRecurrent.do_apply"], ["", "@", "application", "\n", "def", "apply", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Preprocess a sequence attending the attended context at every step.\n\n        Preprocesses the attended context and runs :meth:`do_apply`. See\n        :meth:`do_apply` documentation for further information.\n\n        \"\"\"", "\n", "attended_list", "=", "kwargs", "[", "self", ".", "attended_name", "]", ";", "\n", "preprocessed_attended_list", "=", "self", ".", "attention", ".", "preprocess", "(", "attended_list", ")", ";", "\n", "return", "self", ".", "do_apply", "(", "\n", "**", "dict_union", "(", "kwargs", ",", "\n", "{", "self", ".", "preprocessed_attended_name", ":", "\n", "preprocessed_attended_list", "}", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention.AttentionRecurrent.apply_delegate": [[785, 789], ["attention.AttentionRecurrent.do_apply.__get__"], "methods", ["None"], ["", "@", "apply", ".", "delegate", "\n", "def", "apply_delegate", "(", "self", ")", ":", "\n", "# TODO: Nice interface for this trick?", "\n", "        ", "return", "self", ".", "do_apply", ".", "__get__", "(", "self", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention.AttentionRecurrent.apply_contexts": [[790, 793], ["apply.property"], "methods", ["None"], ["", "@", "apply", ".", "property", "(", "'contexts'", ")", "\n", "def", "apply_contexts", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_context_names", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention.AttentionRecurrent.initial_states": [[794, 800], ["blocks.utils.pack", "blocks.utils.pack", "attention.AttentionRecurrent.transition.initial_states", "attention.AttentionRecurrent.attention.initial_glimpses"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.AttentionRecurrent.initial_states", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.SequenceContentAttention_withExInput_3d.initial_glimpses"], ["", "@", "application", "\n", "def", "initial_states", "(", "self", ",", "batch_size", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "(", "pack", "(", "self", ".", "transition", ".", "initial_states", "(", "\n", "batch_size", ",", "**", "kwargs", ")", ")", "+", "\n", "pack", "(", "self", ".", "attention", ".", "initial_glimpses", "(", "\n", "batch_size", ",", "kwargs", "[", "self", ".", "attended_name", "]", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention.AttentionRecurrent.initial_states_outputs": [[801, 804], ["initial_states.property"], "methods", ["None"], ["", "@", "initial_states", ".", "property", "(", "'outputs'", ")", "\n", "def", "initial_states_outputs", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "do_apply", ".", "states", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention.AttentionRecurrent.get_dim": [[805, 818], ["attention.AttentionRecurrent.transition.get_dim", "attention.AttentionRecurrent.attention.get_dim", "attention.AttentionRecurrent.attention.get_dim", "attention.AttentionRecurrent.attention.get_dim"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.AttentionRecurrent.get_dim", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.AttentionRecurrent.get_dim", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.AttentionRecurrent.get_dim", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.AttentionRecurrent.get_dim"], ["", "def", "get_dim", "(", "self", ",", "name", ")", ":", "\n", "        ", "if", "name", "in", "self", ".", "_glimpse_names", ":", "\n", "            ", "return", "self", ".", "attention", ".", "get_dim", "(", "name", ")", "\n", "", "if", "name", "==", "self", ".", "preprocessed_attended_name", ":", "\n", "            ", "(", "original_name", ",", ")", "=", "self", ".", "attention", ".", "preprocess", ".", "outputs", "\n", "return", "self", ".", "attention", ".", "get_dim", "(", "original_name", ")", "\n", "", "if", "self", ".", "add_contexts", ":", "\n", "            ", "if", "name", "==", "self", ".", "attended_name", ":", "\n", "                ", "return", "self", ".", "attention", ".", "get_dim", "(", "\n", "self", ".", "attention", ".", "take_glimpses", ".", "inputs", "[", "0", "]", ")", "\n", "", "if", "name", "==", "self", ".", "attended_mask_name", ":", "\n", "                ", "return", "0", "\n", "", "", "return", "self", ".", "transition", ".", "get_dim", "(", "name", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.SequenceContentAttention_withExInput.__init__": [[65, 103], ["blocks.bricks.base.lazy", "blocks.bricks.attention.GenericSequenceAttention.__init__", "blocks.bricks.Linear", "blocks.bricks.Linear", "blocks.bricks.Linear", "blocks.bricks.Linear", "blocks.bricks.Linear", "match_functions.SumMatchFunction"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.sampling.ModelInfo.__init__"], ["@", "lazy", "(", "allocation", "=", "[", "'match_dim'", "]", ")", "\n", "def", "__init__", "(", "self", ",", "match_dim", ",", "posTag_dim", ",", "\n", "use_local_attention", "=", "False", ",", "window_size", "=", "10", ",", "sigma", "=", "None", ",", "\n", "state_transformer", "=", "None", ",", "local_state_transformer", "=", "None", ",", "\n", "local_predictor", "=", "None", ",", "attended_transformer", "=", "None", ",", "\n", "energy_computer", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "SequenceContentAttention_withExInput", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "if", "not", "state_transformer", ":", "\n", "            ", "state_transformer", "=", "Linear", "(", "use_bias", "=", "False", ",", "name", "=", "\"state_trans\"", ")", "\n", "", "if", "not", "local_state_transformer", ":", "\n", "            ", "local_state_transformer", "=", "Linear", "(", "use_bias", "=", "False", ",", "\n", "name", "=", "\"local_state_trans\"", ")", "\n", "", "if", "not", "local_predictor", ":", "\n", "            ", "local_predictor", "=", "Linear", "(", "use_bias", "=", "False", ",", "name", "=", "\"local_pred\"", ")", "\n", "", "if", "sigma", "is", "None", ":", "\n", "            ", "sigma", "=", "window_size", "*", "1.0", "/", "2", "\n", "", "self", ".", "use_local_attention", "=", "use_local_attention", "\n", "self", ".", "sigma", "=", "sigma", "*", "sigma", "\n", "self", ".", "match_dim", "=", "match_dim", "\n", "self", ".", "posTag_dim", "=", "posTag_dim", "\n", "self", ".", "state_name", "=", "self", ".", "state_names", "[", "0", "]", "\n", "\n", "self", ".", "state_transformer", "=", "state_transformer", "\n", "self", ".", "local_state_transformer", "=", "local_state_transformer", "\n", "self", ".", "local_predictor", "=", "local_predictor", "\n", "\n", "if", "not", "attended_transformer", ":", "\n", "            ", "attended_transformer", "=", "Linear", "(", "name", "=", "\"preprocess\"", ")", "\n", "posTag_transformer", "=", "Linear", "(", "name", "=", "\"posTag_preprocess\"", ")", "\n", "", "if", "not", "energy_computer", ":", "\n", "            ", "energy_computer", "=", "SumMatchFunction", "(", "name", "=", "\"energy_comp\"", ")", "\n", "", "self", ".", "attended_transformer", "=", "attended_transformer", "\n", "self", ".", "posTag_transformer", "=", "posTag_transformer", "\n", "self", ".", "energy_computer", "=", "energy_computer", "\n", "\n", "self", ".", "children", "=", "[", "self", ".", "state_transformer", ",", "self", ".", "local_state_transformer", ",", "\n", "self", ".", "local_predictor", ",", "self", ".", "attended_transformer", ",", "self", ".", "posTag_transformer", ",", "\n", "energy_computer", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.SequenceContentAttention_withExInput._push_allocation_config": [[104, 124], ["None"], "methods", ["None"], ["", "def", "_push_allocation_config", "(", "self", ")", ":", "\n", "        ", "self", ".", "state_dim", "=", "self", ".", "state_dims", "[", "0", "]", "\n", "\n", "self", ".", "state_transformer", ".", "input_dim", "=", "self", ".", "state_dim", "\n", "self", ".", "state_transformer", ".", "output_dim", "=", "self", ".", "match_dim", "\n", "\n", "self", ".", "local_state_transformer", ".", "input_dim", "=", "self", ".", "state_dim", "\n", "self", ".", "local_state_transformer", ".", "output_dim", "=", "self", ".", "match_dim", "\n", "\n", "self", ".", "local_predictor", ".", "input_dim", "=", "self", ".", "state_dim", "\n", "self", ".", "local_predictor", ".", "output_dim", "=", "1", "\n", "\n", "self", ".", "attended_transformer", ".", "input_dim", "=", "self", ".", "attended_dim", "\n", "self", ".", "attended_transformer", ".", "output_dim", "=", "self", ".", "match_dim", "\n", "\n", "self", ".", "posTag_transformer", ".", "input_dim", "=", "self", ".", "posTag_dim", "\n", "self", ".", "posTag_transformer", ".", "output_dim", "=", "self", ".", "match_dim", "\n", "\n", "self", ".", "energy_computer", ".", "input_dim", "=", "self", ".", "match_dim", "\n", "self", ".", "energy_computer", ".", "output_dim", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.SequenceContentAttention_withExInput.compute_energies": [[125, 141], ["attention_with_posTagging.SequenceContentAttention_withExInput.state_transformer.apply", "attention_with_posTagging.SequenceContentAttention_withExInput.energy_computer.apply", "attention_with_posTagging.SequenceContentAttention_withExInput.preprocess", "attention_with_posTagging.SequenceContentAttention_withExInput.posTag_preprocess"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.match_functions.GeneralMatchFunction.apply", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.match_functions.GeneralMatchFunction.apply", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.SequenceContentAttention_withExInput_3d.preprocess", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.SequenceContentAttention_withExInput_3d.posTag_preprocess"], ["", "@", "application", "\n", "def", "compute_energies", "(", "self", ",", "attended", ",", "preprocessed_attended", ",", "posTag", ",", "preprocessed_posTag", ",", "states", ")", ":", "\n", "        ", "if", "not", "preprocessed_attended", ":", "\n", "            ", "preprocessed_attended", "=", "self", ".", "preprocess", "(", "attended", ")", "\n", "", "if", "not", "preprocessed_posTag", ":", "\n", "            ", "preprocessed_posTag", "=", "self", ".", "posTag_preprocess", "(", "posTag", ")", "\n", "", "_states", "=", "states", "[", "self", ".", "state_name", "]", "\n", "transformed_states", "=", "self", ".", "state_transformer", ".", "apply", "(", "_states", ")", "\n", "# Broadcasting of transformed states should be done automatically", "\n", "# match_vectors = sum(transformed_states.values(),", "\n", "#                     preprocessed_attended)", "\n", "# energies = self.energy_computer.apply(match_vectors).reshape(", "\n", "#     match_vectors.shape[:-1], ndim=match_vectors.ndim - 1)", "\n", "energies", "=", "self", ".", "energy_computer", ".", "apply", "(", "transformed_states", ",", "\n", "preprocessed_attended", ",", "preprocessed_posTag", ")", "\n", "return", "energies", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.SequenceContentAttention_withExInput.get_local_predition": [[142, 155], ["attention_with_posTagging.SequenceContentAttention_withExInput.local_state_transformer.apply", "attention_with_posTagging.SequenceContentAttention_withExInput.local_predictor.apply().reshape", "theano.tensor.nnet.sigmoid", "theano.tensor.sum", "attention_with_posTagging.SequenceContentAttention_withExInput.local_predictor.apply", "theano.tensor.tanh"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.match_functions.GeneralMatchFunction.apply", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.match_functions.GeneralMatchFunction.apply"], ["", "@", "application", "\n", "def", "get_local_predition", "(", "self", ",", "states", ",", "attended", ",", "attended_mask", ")", ":", "\n", "        ", "_states", "=", "states", "[", "self", ".", "state_name", "]", "\n", "# local_states: [batch, features]", "\n", "local_states", "=", "self", ".", "local_state_transformer", ".", "apply", "(", "_states", ")", "\n", "# local_prediction is reshaped to [batch]", "\n", "local_prediction", "=", "self", ".", "local_predictor", ".", "apply", "(", "\n", "tensor", ".", "tanh", "(", "local_states", ")", ")", ".", "reshape", "(", "\n", "local_states", ".", "shape", "[", ":", "-", "1", "]", ",", "ndim", "=", "local_states", ".", "ndim", "-", "1", ")", "\n", "local_prediction", "=", "tensor", ".", "nnet", ".", "sigmoid", "(", "local_prediction", ")", "\n", "# attended_mask is [time, batch]", "\n", "_attended_mask", "=", "tensor", ".", "sum", "(", "attended_mask", ",", "axis", "=", "0", ")", "\n", "return", "_attended_mask", "*", "local_prediction", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.SequenceContentAttention_withExInput.adjust_weights": [[156, 173], ["theano.tensor.arange().repeat().reshape().astype", "theano.tensor.exp", "theano.tensor.pow", "theano.tensor.arange().repeat().reshape", "theano.tensor.arange().repeat", "theano.tensor.arange"], "methods", ["None"], ["", "@", "application", "\n", "def", "adjust_weights", "(", "self", ",", "attended_mask", ",", "weights", ",", "local_prediction", ")", ":", "\n", "# weights: [time, batch]", "\n", "# local_prediction: [batch]", "\n", "# locations: [time, batch]", "\n", "        ", "locations", "=", "tensor", ".", "arange", "(", "\n", "attended_mask", ".", "shape", "[", "0", "]", ")", ".", "repeat", "(", "\n", "attended_mask", ".", "shape", "[", "1", "]", ")", ".", "reshape", "(", "\n", "attended_mask", ".", "shape", ")", ".", "astype", "(", "\n", "theano", ".", "config", ".", "floatX", ")", "\n", "# diff: [time, batch]", "\n", "diff", "=", "locations", "-", "local_prediction", "\n", "# gauss: [time, batch]", "\n", "gauss", "=", "tensor", ".", "pow", "(", "diff", ",", "2", ")", "/", "(", "2", "*", "self", ".", "sigma", ")", "\n", "gauss", "=", "tensor", ".", "exp", "(", "-", "gauss", ")", "\n", "weights", "=", "weights", "*", "gauss", "\n", "return", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.SequenceContentAttention_withExInput.take_glimpses": [[174, 214], ["blocks.bricks.base.application", "attention_with_posTagging.SequenceContentAttention_withExInput.compute_energies", "attention_with_posTagging.SequenceContentAttention_withExInput.compute_weights", "attention_with_posTagging.SequenceContentAttention_withExInput.compute_weighted_averages", "attention_with_posTagging.SequenceContentAttention_withExInput.get_local_predition", "attention_with_posTagging.SequenceContentAttention_withExInput.adjust_weights"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.SequenceContentAttention_withExInput_3d.compute_energies", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.SequenceContentAttention_withExInput_3d.compute_weights", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.SequenceContentAttention_withExInput_3d.compute_weighted_averages", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.SequenceContentAttention_withExInput_3d.get_local_predition", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.SequenceContentAttention_withExInput_3d.adjust_weights"], ["", "@", "application", "(", "outputs", "=", "[", "'weighted_averages'", ",", "'weights'", "]", ")", "\n", "def", "take_glimpses", "(", "self", ",", "attended", ",", "posTag", ",", "preprocessed_attended", "=", "None", ",", "\n", "attended_mask", "=", "None", ",", "preprocessed_posTag", "=", "None", ",", "**", "states", ")", ":", "\n", "        ", "r\"\"\"Compute attention weights and produce glimpses.\n\n        Parameters\n        ----------\n        attended : :class:`~tensor.TensorVariable`\n            The sequence, time is the 1-st dimension.\n        preprocessed_attended : :class:`~tensor.TensorVariable`\n            The preprocessed sequence. If ``None``, is computed by calling\n            :meth:`preprocess`.\n        attended_mask : :class:`~tensor.TensorVariable`\n            A 0/1 mask specifying available data. 0 means that the\n            corresponding sequence element is fake.\n        \\*\\*states\n            The states of the network.\n\n        Returns\n        -------\n        weighted_averages : :class:`~theano.Variable`\n            Linear combinations of sequence elements with the attention\n            weights.\n        weights : :class:`~theano.Variable`\n            The attention weights. The first dimension is batch, the second\n            is time.\n\n        \"\"\"", "\n", "energies", "=", "self", ".", "compute_energies", "(", "\n", "attended", ",", "preprocessed_attended", ",", "posTag", ",", "preprocessed_posTag", ",", "states", ")", "\n", "# weights has dimensions: [context_num,time (src), batch]", "\n", "weights", "=", "self", ".", "compute_weights", "(", "energies", ",", "attended_mask", ")", "\n", "if", "self", ".", "use_local_attention", ":", "\n", "# local_pred should have dimension: [batch],", "\n", "# the predicted position for each batch", "\n", "            ", "local_pred", "=", "self", ".", "get_local_predition", "(", "\n", "states", ",", "attended", ",", "attended_mask", ")", "\n", "weights", "=", "self", ".", "adjust_weights", "(", "attended_mask", ",", "weights", ",", "local_pred", ")", "\n", "", "weighted_averages", "=", "self", ".", "compute_weighted_averages", "(", "weights", ",", "attended", ")", "\n", "return", "weighted_averages", ",", "weights", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.SequenceContentAttention_withExInput.take_glimpses_inputs": [[215, 219], ["take_glimpses.property"], "methods", ["None"], ["", "@", "take_glimpses", ".", "property", "(", "'inputs'", ")", "\n", "def", "take_glimpses_inputs", "(", "self", ")", ":", "\n", "        ", "return", "(", "[", "'attended'", ",", "'posTag'", ",", "'preprocessed_attended'", ",", "'attended_mask'", ",", "'preprocessed_posTag'", "]", "+", "\n", "self", ".", "state_names", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.SequenceContentAttention_withExInput.initial_glimpses": [[220, 224], ["blocks.bricks.base.application", "theano.tensor.zeros", "theano.tensor.zeros"], "methods", ["None"], ["", "@", "application", "(", "outputs", "=", "[", "'weighted_averages'", ",", "'weights'", "]", ")", "\n", "def", "initial_glimpses", "(", "self", ",", "batch_size", ",", "attended", ")", ":", "\n", "        ", "return", "[", "tensor", ".", "zeros", "(", "(", "batch_size", ",", "self", ".", "attended_dim", ")", ")", ",", "\n", "tensor", ".", "zeros", "(", "(", "batch_size", ",", "attended", ".", "shape", "[", "0", "]", ")", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.SequenceContentAttention_withExInput.preprocess": [[225, 236], ["blocks.bricks.base.application", "attention_with_posTagging.SequenceContentAttention_withExInput.attended_transformer.apply"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.match_functions.GeneralMatchFunction.apply"], ["", "@", "application", "(", "inputs", "=", "[", "'attended'", "]", ",", "outputs", "=", "[", "'preprocessed_attended'", "]", ")", "\n", "def", "preprocess", "(", "self", ",", "attended", ")", ":", "\n", "        ", "\"\"\"Preprocess the sequence for computing attention weights.\n\n        Parameters\n        ----------\n        attended : :class:`~tensor.TensorVariable`\n            The attended sequence, time is the 1-st dimension.\n\n        \"\"\"", "\n", "return", "self", ".", "attended_transformer", ".", "apply", "(", "attended", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.SequenceContentAttention_withExInput.posTag_preprocess": [[237, 240], ["blocks.bricks.base.application", "attention_with_posTagging.SequenceContentAttention_withExInput.posTag_transformer.apply"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.match_functions.GeneralMatchFunction.apply"], ["", "@", "application", "(", "inputs", "=", "[", "'posTag'", "]", ",", "outputs", "=", "[", "'preprocessed_posTag'", "]", ")", "\n", "def", "posTag_preprocess", "(", "self", ",", "posTag", ")", ":", "\n", "        ", "return", "self", ".", "posTag_transformer", ".", "apply", "(", "posTag", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.SequenceContentAttention_withExInput.get_dim": [[241, 247], ["super().get_dim"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.AttentionRecurrent.get_dim"], ["", "def", "get_dim", "(", "self", ",", "name", ")", ":", "\n", "        ", "if", "name", "in", "[", "'weighted_averages'", "]", ":", "\n", "            ", "return", "self", ".", "attended_dim", "\n", "", "if", "name", "in", "[", "'weights'", "]", ":", "\n", "            ", "return", "0", "\n", "", "return", "super", "(", "SequenceContentAttention_withExInput", ",", "self", ")", ".", "get_dim", "(", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.SequenceContentAttention_withExInput_3d.__init__": [[298, 336], ["blocks.bricks.base.lazy", "blocks.bricks.attention.GenericSequenceAttention.__init__", "blocks.bricks.Linear", "blocks.bricks.Linear", "blocks.bricks.Linear", "blocks.bricks.Linear", "blocks.bricks.Linear", "match_functions.SumMatchFunction"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.sampling.ModelInfo.__init__"], ["@", "lazy", "(", "allocation", "=", "[", "'match_dim'", "]", ")", "\n", "def", "__init__", "(", "self", ",", "match_dim", ",", "posTag_dim", ",", "\n", "use_local_attention", "=", "False", ",", "window_size", "=", "10", ",", "sigma", "=", "None", ",", "\n", "state_transformer", "=", "None", ",", "local_state_transformer", "=", "None", ",", "\n", "local_predictor", "=", "None", ",", "attended_transformer", "=", "None", ",", "\n", "energy_computer", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "SequenceContentAttention_withExInput_3d", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "if", "not", "state_transformer", ":", "\n", "            ", "state_transformer", "=", "Linear", "(", "use_bias", "=", "False", ",", "name", "=", "\"state_trans\"", ")", "\n", "", "if", "not", "local_state_transformer", ":", "\n", "            ", "local_state_transformer", "=", "Linear", "(", "use_bias", "=", "False", ",", "\n", "name", "=", "\"local_state_trans\"", ")", "\n", "", "if", "not", "local_predictor", ":", "\n", "            ", "local_predictor", "=", "Linear", "(", "use_bias", "=", "False", ",", "name", "=", "\"local_pred\"", ")", "\n", "", "if", "sigma", "is", "None", ":", "\n", "            ", "sigma", "=", "window_size", "*", "1.0", "/", "2", "\n", "", "self", ".", "use_local_attention", "=", "use_local_attention", "\n", "self", ".", "sigma", "=", "sigma", "*", "sigma", "\n", "self", ".", "match_dim", "=", "match_dim", "\n", "self", ".", "posTag_dim", "=", "posTag_dim", "\n", "self", ".", "state_name", "=", "self", ".", "state_names", "[", "0", "]", "\n", "\n", "self", ".", "state_transformer", "=", "state_transformer", "\n", "self", ".", "local_state_transformer", "=", "local_state_transformer", "\n", "self", ".", "local_predictor", "=", "local_predictor", "\n", "\n", "if", "not", "attended_transformer", ":", "\n", "            ", "attended_transformer", "=", "Linear", "(", "name", "=", "\"preprocess\"", ")", "\n", "posTag_transformer", "=", "Linear", "(", "name", "=", "\"posTag_preprocess\"", ")", "\n", "", "if", "not", "energy_computer", ":", "\n", "            ", "energy_computer", "=", "SumMatchFunction", "(", "name", "=", "\"energy_comp\"", ")", "\n", "", "self", ".", "attended_transformer", "=", "attended_transformer", "\n", "self", ".", "posTag_transformer", "=", "posTag_transformer", "\n", "self", ".", "energy_computer", "=", "energy_computer", "\n", "\n", "self", ".", "children", "=", "[", "self", ".", "state_transformer", ",", "self", ".", "local_state_transformer", ",", "\n", "self", ".", "local_predictor", ",", "self", ".", "attended_transformer", ",", "self", ".", "posTag_transformer", ",", "\n", "energy_computer", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.SequenceContentAttention_withExInput_3d._push_allocation_config": [[337, 357], ["None"], "methods", ["None"], ["", "def", "_push_allocation_config", "(", "self", ")", ":", "\n", "#self.state_dim = self.state_dims[0]", "\n", "\n", "        ", "self", ".", "state_transformer", ".", "input_dim", "=", "self", ".", "state_dim", "\n", "self", ".", "state_transformer", ".", "output_dim", "=", "self", ".", "match_dim", "\n", "\n", "self", ".", "local_state_transformer", ".", "input_dim", "=", "self", ".", "state_dim", "\n", "self", ".", "local_state_transformer", ".", "output_dim", "=", "self", ".", "match_dim", "\n", "\n", "self", ".", "local_predictor", ".", "input_dim", "=", "self", ".", "state_dim", "\n", "self", ".", "local_predictor", ".", "output_dim", "=", "1", "\n", "\n", "self", ".", "attended_transformer", ".", "input_dim", "=", "self", ".", "attended_dim", "\n", "self", ".", "attended_transformer", ".", "output_dim", "=", "self", ".", "match_dim", "\n", "\n", "self", ".", "posTag_transformer", ".", "input_dim", "=", "self", ".", "posTag_dim", "\n", "self", ".", "posTag_transformer", ".", "output_dim", "=", "self", ".", "match_dim", "\n", "\n", "self", ".", "energy_computer", ".", "input_dim", "=", "self", ".", "match_dim", "\n", "self", ".", "energy_computer", ".", "output_dim", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.SequenceContentAttention_withExInput_3d.compute_energies": [[358, 374], ["attention_with_posTagging.SequenceContentAttention_withExInput_3d.state_transformer.apply", "attention_with_posTagging.SequenceContentAttention_withExInput_3d.energy_computer.apply", "attention_with_posTagging.SequenceContentAttention_withExInput_3d.preprocess", "attention_with_posTagging.SequenceContentAttention_withExInput_3d.posTag_preprocess"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.match_functions.GeneralMatchFunction.apply", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.match_functions.GeneralMatchFunction.apply", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.SequenceContentAttention_withExInput_3d.preprocess", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.SequenceContentAttention_withExInput_3d.posTag_preprocess"], ["", "@", "application", "\n", "def", "compute_energies", "(", "self", ",", "attended", ",", "preprocessed_attended", ",", "posTag", ",", "preprocessed_posTag", ",", "states", ")", ":", "\n", "        ", "if", "not", "preprocessed_attended", ":", "\n", "            ", "preprocessed_attended", "=", "self", ".", "preprocess", "(", "attended", ")", "\n", "", "if", "not", "preprocessed_posTag", ":", "\n", "            ", "preprocessed_posTag", "=", "self", ".", "posTag_preprocess", "(", "posTag", ")", "\n", "", "_states", "=", "states", "[", "self", ".", "state_name", "]", "\n", "transformed_states", "=", "self", ".", "state_transformer", ".", "apply", "(", "_states", ")", "\n", "# Broadcasting of transformed states should be done automatically", "\n", "# match_vectors = sum(transformed_states.values(),", "\n", "#                     preprocessed_attended)", "\n", "# energies = self.energy_computer.apply(match_vectors).reshape(", "\n", "#     match_vectors.shape[:-1], ndim=match_vectors.ndim - 1)", "\n", "energies", "=", "self", ".", "energy_computer", ".", "apply", "(", "transformed_states", ",", "\n", "preprocessed_attended", ",", "preprocessed_posTag", ")", "\n", "return", "energies", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.SequenceContentAttention_withExInput_3d.get_local_predition": [[375, 388], ["attention_with_posTagging.SequenceContentAttention_withExInput_3d.local_state_transformer.apply", "attention_with_posTagging.SequenceContentAttention_withExInput_3d.local_predictor.apply().reshape", "theano.tensor.nnet.sigmoid", "theano.tensor.sum", "attention_with_posTagging.SequenceContentAttention_withExInput_3d.local_predictor.apply", "theano.tensor.tanh"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.match_functions.GeneralMatchFunction.apply", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.match_functions.GeneralMatchFunction.apply"], ["", "@", "application", "\n", "def", "get_local_predition", "(", "self", ",", "states", ",", "attended", ",", "attended_mask", ")", ":", "\n", "        ", "_states", "=", "states", "[", "self", ".", "state_name", "]", "\n", "# local_states: [batch, features]", "\n", "local_states", "=", "self", ".", "local_state_transformer", ".", "apply", "(", "_states", ")", "\n", "# local_prediction is reshaped to [batch]", "\n", "local_prediction", "=", "self", ".", "local_predictor", ".", "apply", "(", "\n", "tensor", ".", "tanh", "(", "local_states", ")", ")", ".", "reshape", "(", "\n", "local_states", ".", "shape", "[", ":", "-", "1", "]", ",", "ndim", "=", "local_states", ".", "ndim", "-", "1", ")", "\n", "local_prediction", "=", "tensor", ".", "nnet", ".", "sigmoid", "(", "local_prediction", ")", "\n", "# attended_mask is [time, batch]", "\n", "_attended_mask", "=", "tensor", ".", "sum", "(", "attended_mask", ",", "axis", "=", "0", ")", "\n", "return", "_attended_mask", "*", "local_prediction", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.SequenceContentAttention_withExInput_3d.adjust_weights": [[389, 406], ["theano.tensor.arange().repeat().reshape().astype", "theano.tensor.exp", "theano.tensor.pow", "theano.tensor.arange().repeat().reshape", "theano.tensor.arange().repeat", "theano.tensor.arange"], "methods", ["None"], ["", "@", "application", "\n", "def", "adjust_weights", "(", "self", ",", "attended_mask", ",", "weights", ",", "local_prediction", ")", ":", "\n", "# weights: [time, batch]", "\n", "# local_prediction: [batch]", "\n", "# locations: [time, batch]", "\n", "        ", "locations", "=", "tensor", ".", "arange", "(", "\n", "attended_mask", ".", "shape", "[", "0", "]", ")", ".", "repeat", "(", "\n", "attended_mask", ".", "shape", "[", "1", "]", ")", ".", "reshape", "(", "\n", "attended_mask", ".", "shape", ")", ".", "astype", "(", "\n", "theano", ".", "config", ".", "floatX", ")", "\n", "# diff: [time, batch]", "\n", "diff", "=", "locations", "-", "local_prediction", "\n", "# gauss: [time, batch]", "\n", "gauss", "=", "tensor", ".", "pow", "(", "diff", ",", "2", ")", "/", "(", "2", "*", "self", ".", "sigma", ")", "\n", "gauss", "=", "tensor", ".", "exp", "(", "-", "gauss", ")", "\n", "weights", "=", "weights", "*", "gauss", "\n", "return", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.SequenceContentAttention_withExInput_3d.compute_weights": [[407, 440], ["theano.tensor.exp", "energies.max().dimshuffle", "theano.tensor.exp.sum().dimshuffle", "theano.tensor.all().dimshuffle", "energies.max", "theano.tensor.exp.sum", "theano.tensor.all"], "methods", ["None"], ["", "@", "application", "\n", "def", "compute_weights", "(", "self", ",", "energies", ",", "attended_mask", ")", ":", "\n", "        ", "\"\"\"Compute weights from energies in softmax-like fashion.\n\n        .. todo ::\n\n            Use :class:`~blocks.bricks.Softmax`.\n\n        Parameters\n        ----------\n        energies : :class:`~theano.Variable`\n            The energies. Must be of the same shape as the mask.\n        attended_mask : :class:`~theano.Variable`\n            The mask for the attended. The index in the sequence must be\n            the first dimension.\n\n        Returns\n        -------\n        weights : :class:`~theano.Variable`\n            Summing to 1 non-negative weights of the same shape\n            as `energies`.\n\n        \"\"\"", "\n", "# Stabilize energies first and then exponentiate", "\n", "energies", "=", "energies", "-", "energies", ".", "max", "(", "axis", "=", "1", ")", ".", "dimshuffle", "(", "[", "0", ",", "'x'", ",", "1", "]", ")", ";", "\n", "unnormalized_weights", "=", "tensor", ".", "exp", "(", "energies", ")", "\n", "if", "attended_mask", ":", "\n", "            ", "unnormalized_weights", "*=", "attended_mask", "\n", "#If mask consists of all zeros use 1 as the normalization coefficient", "\n", "", "normalization", "=", "(", "unnormalized_weights", ".", "sum", "(", "axis", "=", "1", ")", ".", "dimshuffle", "(", "[", "0", ",", "'x'", ",", "1", "]", ")", "+", "\n", "tensor", ".", "all", "(", "1", "-", "attended_mask", ",", "axis", "=", "1", ")", ".", "dimshuffle", "(", "[", "0", ",", "'x'", ",", "1", "]", ")", ")", "\n", "# normalization = unnormalized_weights.sum(axis=1).dimshuffle([0,'x',1])", "\n", "return", "unnormalized_weights", "/", "normalization", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.SequenceContentAttention_withExInput_3d.compute_weighted_averages": [[441, 463], ["theano.tensor.shape_padright"], "methods", ["None"], ["", "@", "application", "\n", "def", "compute_weighted_averages", "(", "self", ",", "weights", ",", "attended", ")", ":", "\n", "        ", "\"\"\"Compute weighted averages of the attended sequence vectors.\n\n        Parameters\n        ----------\n        weights : :class:`~theano.Variable`\n            The weights. The shape must be equal to the attended shape\n            without the last dimension.\n        attended : :class:`~theano.Variable`\n            The attended. The index in the sequence must be the first\n            dimension.\n\n        Returns\n        -------\n        weighted_averages : :class:`~theano.Variable`\n            The weighted averages of the attended elements. The shape\n            is equal to the attended shape with the first dimension\n            dropped.\n\n        \"\"\"", "\n", "return", "(", "tensor", ".", "shape_padright", "(", "weights", ")", "*", "attended", ")", ".", "sum", "(", "axis", "=", "1", ")", "\n", "#return (weights * attended).sum(axis=1)", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.SequenceContentAttention_withExInput_3d.take_glimpses": [[465, 505], ["blocks.bricks.base.application", "attention_with_posTagging.SequenceContentAttention_withExInput_3d.compute_energies", "attention_with_posTagging.SequenceContentAttention_withExInput_3d.compute_weights", "attention_with_posTagging.SequenceContentAttention_withExInput_3d.compute_weighted_averages", "attention_with_posTagging.SequenceContentAttention_withExInput_3d.get_local_predition", "attention_with_posTagging.SequenceContentAttention_withExInput_3d.adjust_weights", "attention_with_posTagging.SequenceContentAttention_withExInput_3d.transpose"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.SequenceContentAttention_withExInput_3d.compute_energies", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.SequenceContentAttention_withExInput_3d.compute_weights", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.SequenceContentAttention_withExInput_3d.compute_weighted_averages", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.SequenceContentAttention_withExInput_3d.get_local_predition", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.SequenceContentAttention_withExInput_3d.adjust_weights"], ["", "@", "application", "(", "outputs", "=", "[", "'weighted_averages'", ",", "'weights'", "]", ")", "\n", "def", "take_glimpses", "(", "self", ",", "attended", ",", "posTag", ",", "preprocessed_attended", "=", "None", ",", "\n", "attended_mask", "=", "None", ",", "preprocessed_posTag", "=", "None", ",", "**", "states", ")", ":", "\n", "        ", "r\"\"\"Compute attention weights and produce glimpses.\n\n        Parameters\n        ----------\n        attended : :class:`~tensor.TensorVariable`\n            The sequence, time is the 1-st dimension.\n        preprocessed_attended : :class:`~tensor.TensorVariable`\n            The preprocessed sequence. If ``None``, is computed by calling\n            :meth:`preprocess`.\n        attended_mask : :class:`~tensor.TensorVariable`\n            A 0/1 mask specifying available data. 0 means that the\n            corresponding sequence element is fake.\n        \\*\\*states\n            The states of the network.\n\n        Returns\n        -------\n        weighted_averages : :class:`~theano.Variable`\n            Linear combinations of sequence elements with the attention\n            weights.\n        weights : :class:`~theano.Variable`\n            The attention weights. The first dimension is batch, the second\n            is time.\n\n        \"\"\"", "\n", "energies", "=", "self", ".", "compute_energies", "(", "\n", "attended", ",", "preprocessed_attended", ",", "posTag", ",", "preprocessed_posTag", ",", "states", ")", "\n", "# weights has dimensions: [context_num,time (src), batch]", "\n", "weights", "=", "self", ".", "compute_weights", "(", "energies", ",", "attended_mask", ")", "\n", "if", "self", ".", "use_local_attention", ":", "\n", "# local_pred should have dimension: [batch],", "\n", "# the predicted position for each batch", "\n", "            ", "local_pred", "=", "self", ".", "get_local_predition", "(", "\n", "states", ",", "attended", ",", "attended_mask", ")", "\n", "weights", "=", "self", ".", "adjust_weights", "(", "attended_mask", ",", "weights", ",", "local_pred", ")", "\n", "", "weighted_averages", "=", "self", ".", "compute_weighted_averages", "(", "weights", ",", "attended", ")", "\n", "return", "weighted_averages", ",", "weights", ".", "transpose", "(", "(", "2", ",", "1", ",", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.SequenceContentAttention_withExInput_3d.take_glimpses_inputs": [[506, 510], ["take_glimpses.property"], "methods", ["None"], ["", "@", "take_glimpses", ".", "property", "(", "'inputs'", ")", "\n", "def", "take_glimpses_inputs", "(", "self", ")", ":", "\n", "        ", "return", "(", "[", "'attended'", ",", "'posTag'", ",", "'preprocessed_attended'", ",", "'attended_mask'", ",", "'preprocessed_posTag'", "]", "+", "\n", "self", ".", "state_names", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.SequenceContentAttention_withExInput_3d.initial_glimpses": [[511, 515], ["blocks.bricks.base.application", "theano.tensor.zeros", "theano.tensor.zeros"], "methods", ["None"], ["", "@", "application", "(", "outputs", "=", "[", "'weighted_averages'", ",", "'weights'", "]", ")", "\n", "def", "initial_glimpses", "(", "self", ",", "batch_size", ",", "attended", ")", ":", "\n", "        ", "return", "[", "tensor", ".", "zeros", "(", "(", "batch_size", ",", "self", ".", "attended_dim", ")", ")", ",", "\n", "tensor", ".", "zeros", "(", "(", "batch_size", ",", "attended", ".", "shape", "[", "1", "]", ",", "attended", ".", "shape", "[", "0", "]", ")", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.SequenceContentAttention_withExInput_3d.preprocess": [[516, 527], ["blocks.bricks.base.application", "attention_with_posTagging.SequenceContentAttention_withExInput_3d.attended_transformer.apply"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.match_functions.GeneralMatchFunction.apply"], ["", "@", "application", "(", "inputs", "=", "[", "'attended'", "]", ",", "outputs", "=", "[", "'preprocessed_attended'", "]", ")", "\n", "def", "preprocess", "(", "self", ",", "attended", ")", ":", "\n", "        ", "\"\"\"Preprocess the sequence for computing attention weights.\n\n        Parameters\n        ----------\n        attended : :class:`~tensor.TensorVariable`\n            The attended sequence, time is the 1-st dimension.\n\n        \"\"\"", "\n", "return", "self", ".", "attended_transformer", ".", "apply", "(", "attended", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.SequenceContentAttention_withExInput_3d.posTag_preprocess": [[528, 531], ["blocks.bricks.base.application", "attention_with_posTagging.SequenceContentAttention_withExInput_3d.posTag_transformer.apply"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.match_functions.GeneralMatchFunction.apply"], ["", "@", "application", "(", "inputs", "=", "[", "'posTag'", "]", ",", "outputs", "=", "[", "'preprocessed_posTag'", "]", ")", "\n", "def", "posTag_preprocess", "(", "self", ",", "posTag", ")", ":", "\n", "        ", "return", "self", ".", "posTag_transformer", ".", "apply", "(", "posTag", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.SequenceContentAttention_withExInput_3d.get_dim": [[532, 538], ["super().get_dim"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.AttentionRecurrent.get_dim"], ["", "def", "get_dim", "(", "self", ",", "name", ")", ":", "\n", "        ", "if", "name", "in", "[", "'weighted_averages'", "]", ":", "\n", "            ", "return", "self", ".", "attended_dim", "\n", "", "if", "name", "in", "[", "'weights'", "]", ":", "\n", "            ", "return", "0", "\n", "", "return", "super", "(", "SequenceContentAttention_withExInput_3d", ",", "self", ")", ".", "get_dim", "(", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.AttentionRecurrent.__init__": [[601, 644], ["blocks.bricks.attention.AbstractAttentionRecurrent.__init__", "list", "list", "list", "blocks.bricks.parallel.Distribute"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.sampling.ModelInfo.__init__"], ["def", "__init__", "(", "self", ",", "transition", ",", "context_transition", ",", "attention", ",", "distribute", "=", "None", ",", "\n", "add_contexts", "=", "True", ",", "\n", "attended_name", "=", "None", ",", "attended_mask_name", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "AttentionRecurrent", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "_sequence_names", "=", "list", "(", "transition", ".", "apply", ".", "sequences", ")", "\n", "self", ".", "_state_names", "=", "list", "(", "transition", ".", "apply", ".", "states", ")", "\n", "self", ".", "_context_names", "=", "list", "(", "transition", ".", "apply", ".", "contexts", ")", "\n", "if", "add_contexts", ":", "\n", "            ", "if", "not", "attended_name", ":", "\n", "                ", "attended_name", "=", "'attended_list'", "\n", "", "if", "not", "attended_mask_name", ":", "\n", "                ", "attended_mask_name", "=", "'attended_mask_list'", "\n", "", "self", ".", "posTag_name", "=", "'posTag'", "\n", "self", ".", "_context_names", "+=", "[", "attended_name", ",", "attended_mask_name", ",", "self", ".", "posTag_name", "]", "\n", "", "else", ":", "\n", "            ", "attended_name", "=", "self", ".", "_context_names", "[", "0", "]", "\n", "attended_mask_name", "=", "self", ".", "_context_names", "[", "1", "]", "\n", "", "if", "not", "distribute", ":", "\n", "            ", "normal_inputs", "=", "[", "name", "for", "name", "in", "self", ".", "_sequence_names", "\n", "if", "'mask'", "not", "in", "name", "]", "\n", "distribute", "=", "Distribute", "(", "normal_inputs", ",", "\n", "attention", ".", "take_glimpses", ".", "outputs", "[", "0", "]", ")", "\n", "\n", "", "self", ".", "transition", "=", "transition", "\n", "self", ".", "context_transition", "=", "context_transition", "\n", "self", ".", "attention", "=", "attention", "\n", "self", ".", "distribute", "=", "distribute", "\n", "self", ".", "add_contexts", "=", "add_contexts", "\n", "self", ".", "attended_name", "=", "attended_name", "\n", "self", ".", "attended_mask_name", "=", "attended_mask_name", "\n", "\n", "self", ".", "preprocessed_attended_name", "=", "\"preprocessed_\"", "+", "self", ".", "attended_name", "\n", "self", ".", "preprocessed_posTag_name", "=", "'preprocessed_'", "+", "self", ".", "posTag_name", "\n", "\n", "self", ".", "_glimpse_names", "=", "self", ".", "attention", ".", "take_glimpses", ".", "outputs", "#unchanged", "\n", "# We need to determine which glimpses are fed back.", "\n", "# Currently we extract it from `take_glimpses` signature.", "\n", "self", ".", "previous_glimpses_needed", "=", "[", "\n", "name", "for", "name", "in", "self", ".", "_glimpse_names", "\n", "if", "name", "in", "self", ".", "attention", ".", "take_glimpses", ".", "inputs", "]", "\n", "\n", "self", ".", "children", "=", "[", "self", ".", "transition", ",", "self", ".", "context_transition", ",", "self", ".", "attention", ",", "self", ".", "distribute", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.AttentionRecurrent._push_allocation_config": [[645, 653], ["attention_with_posTagging.AttentionRecurrent.transition.get_dims", "attention_with_posTagging.AttentionRecurrent.get_dim", "attention_with_posTagging.AttentionRecurrent.attention.get_dim", "attention_with_posTagging.AttentionRecurrent.transition.get_dims"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.AttentionRecurrent.get_dim", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.AttentionRecurrent.get_dim"], ["", "def", "_push_allocation_config", "(", "self", ")", ":", "\n", "        ", "self", ".", "attention", ".", "state_dims", "=", "self", ".", "transition", ".", "get_dims", "(", "\n", "self", ".", "attention", ".", "state_names", ")", "\n", "self", ".", "attention", ".", "attended_dim", "=", "self", ".", "get_dim", "(", "self", ".", "attended_name", ")", "\n", "self", ".", "distribute", ".", "source_dim", "=", "self", ".", "attention", ".", "get_dim", "(", "\n", "self", ".", "distribute", ".", "source_name", ")", "\n", "self", ".", "distribute", ".", "target_dims", "=", "self", ".", "transition", ".", "get_dims", "(", "\n", "self", ".", "distribute", ".", "target_names", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.AttentionRecurrent.take_glimpses": [[654, 687], ["blocks.utils.dict_subset", "blocks.utils.dict_subset", "blocks.utils.dict_subset", "attention_with_posTagging.AttentionRecurrent.attention.take_glimpses", "kwargs.pop", "kwargs.pop", "kwargs.pop", "kwargs.pop", "kwargs.pop", "blocks.utils.dict_union"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.AttentionRecurrent.take_glimpses"], ["", "@", "application", "\n", "def", "take_glimpses", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "r\"\"\"Compute glimpses with the attention mechanism.\n\n        A thin wrapper over `self.attention.take_glimpses`: takes care\n        of choosing and renaming the necessary arguments.\n\n        Parameters\n        ----------\n        \\*\\*kwargs\n            Must contain the attended, previous step states and glimpses.\n            Can optionaly contain the attended mask and the preprocessed\n            attended.\n\n        Returns\n        -------\n        glimpses : list of :class:`~tensor.TensorVariable`\n            Current step glimpses.\n\n        \"\"\"", "\n", "states", "=", "dict_subset", "(", "kwargs", ",", "self", ".", "_state_names", ",", "pop", "=", "True", ")", "\n", "glimpses", "=", "dict_subset", "(", "kwargs", ",", "self", ".", "_glimpse_names", ",", "pop", "=", "True", ")", "\n", "glimpses_needed", "=", "dict_subset", "(", "glimpses", ",", "self", ".", "previous_glimpses_needed", ")", "\n", "result", "=", "self", ".", "attention", ".", "take_glimpses", "(", "\n", "kwargs", ".", "pop", "(", "self", ".", "attended_name", ")", ",", "\n", "kwargs", ".", "pop", "(", "self", ".", "posTag_name", ")", ",", "\n", "kwargs", ".", "pop", "(", "self", ".", "preprocessed_attended_name", ",", "None", ")", ",", "\n", "kwargs", ".", "pop", "(", "self", ".", "attended_mask_name", ",", "None", ")", ",", "\n", "kwargs", ".", "pop", "(", "self", ".", "preprocessed_posTag_name", ",", "None", ")", ",", "\n", "**", "dict_union", "(", "states", ",", "glimpses_needed", ")", ")", "\n", "# At this point kwargs may contain additional items.", "\n", "# e.g. AttentionRecurrent.transition.apply.contexts", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.AttentionRecurrent.take_glimpses_outputs": [[688, 691], ["take_glimpses.property"], "methods", ["None"], ["", "@", "take_glimpses", ".", "property", "(", "'outputs'", ")", "\n", "def", "take_glimpses_outputs", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_glimpse_names", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.AttentionRecurrent.compute_states": [[692, 731], ["blocks.utils.dict_subset", "blocks.utils.dict_subset", "blocks.utils.dict_subset.update", "attention_with_posTagging.AttentionRecurrent.transition.apply", "kwargs.pop", "kwargs.pop", "kwargs.pop", "attention_with_posTagging.AttentionRecurrent.distribute.apply", "blocks.utils.dict_union", "blocks.utils.dict_subset", "blocks.utils.dict_union"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.match_functions.GeneralMatchFunction.apply", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.match_functions.GeneralMatchFunction.apply"], ["", "@", "application", "\n", "def", "compute_states", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "r\"\"\"Compute current states when glimpses have already been computed.\n\n        Combines an application of the `distribute` that alter the\n        sequential inputs of the wrapped transition and an application of\n        the wrapped transition. All unknown keyword arguments go to\n        the wrapped transition.\n\n        Parameters\n        ----------\n        \\*\\*kwargs\n            Should contain everything what `self.transition` needs\n            and in addition the current glimpses.\n\n        Returns\n        -------\n        current_states : list of :class:`~tensor.TensorVariable`\n            Current states computed by `self.transition`.\n\n        \"\"\"", "\n", "# make sure we are not popping the mask", "\n", "normal_inputs", "=", "[", "name", "for", "name", "in", "self", ".", "_sequence_names", "\n", "if", "'mask'", "not", "in", "name", "]", "\n", "sequences", "=", "dict_subset", "(", "kwargs", ",", "normal_inputs", ",", "pop", "=", "True", ")", "\n", "glimpses", "=", "dict_subset", "(", "kwargs", ",", "self", ".", "_glimpse_names", ",", "pop", "=", "True", ")", "\n", "if", "self", ".", "add_contexts", ":", "\n", "            ", "kwargs", ".", "pop", "(", "self", ".", "attended_name", ")", "\n", "# attended_mask_name can be optional", "\n", "kwargs", ".", "pop", "(", "self", ".", "attended_mask_name", ",", "None", ")", "\n", "kwargs", ".", "pop", "(", "self", ".", "posTag_name", ",", "None", ")", "\n", "\n", "", "sequences", ".", "update", "(", "self", ".", "distribute", ".", "apply", "(", "\n", "as_dict", "=", "True", ",", "**", "dict_subset", "(", "dict_union", "(", "sequences", ",", "glimpses", ")", ",", "\n", "self", ".", "distribute", ".", "apply", ".", "inputs", ")", ")", ")", "\n", "current_states", "=", "self", ".", "transition", ".", "apply", "(", "\n", "iterate", "=", "False", ",", "as_list", "=", "True", ",", "\n", "**", "dict_union", "(", "sequences", ",", "kwargs", ")", ")", "\n", "return", "current_states", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.AttentionRecurrent.compute_states_outputs": [[732, 735], ["compute_states.property"], "methods", ["None"], ["", "@", "compute_states", ".", "property", "(", "'outputs'", ")", "\n", "def", "compute_states_outputs", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_state_names", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.AttentionRecurrent.transform_context": [[736, 739], ["attention_with_posTagging.AttentionRecurrent.context_transition.apply", "theano.tensor.ones"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.match_functions.GeneralMatchFunction.apply"], ["", "@", "application", "\n", "def", "transform_context", "(", "self", ",", "weighted_averages", ")", ":", "\n", "        ", "return", "self", ".", "context_transition", ".", "apply", "(", "weighted_averages", ",", "tensor", ".", "ones", "(", "[", "weighted_averages", ".", "shape", "[", "1", "]", ",", "weighted_averages", ".", "shape", "[", "0", "]", "]", ")", ")", "[", "-", "1", "]", ";", "\n", "", "@", "recurrent", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.AttentionRecurrent.do_apply": [[739, 786], ["kwargs.pop", "kwargs.get", "kwargs.pop", "blocks.utils.dict_subset", "blocks.utils.dict_subset", "blocks.utils.dict_subset", "attention_with_posTagging.AttentionRecurrent.take_glimpses", "attention_with_posTagging.AttentionRecurrent.compute_states", "attention_with_posTagging.AttentionRecurrent.context_transition.apply", "list", "blocks.utils.dict_union", "theano.tensor.ones", "blocks.utils.dict_union", "attention_with_posTagging.AttentionRecurrent.values"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.AttentionRecurrent.take_glimpses", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.AttentionRecurrent.compute_states", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.match_functions.GeneralMatchFunction.apply"], ["", "@", "recurrent", "\n", "def", "do_apply", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "r\"\"\"Process a sequence attending the attended context every step.\n\n        In addition to the original sequence this method also requires\n        its preprocessed version, the one computed by the `preprocess`\n        method of the attention mechanism. Unknown keyword arguments\n        are passed to the wrapped transition.\n\n        Parameters\n        ----------\n        \\*\\*kwargs\n            Should contain current inputs, previous step states, contexts,\n            the preprocessed attended context, previous step glimpses.\n\n        Returns\n        -------\n        outputs : list of :class:`~tensor.TensorVariable`\n            The current step states and glimpses.\n\n        \"\"\"", "\n", "attended_list", "=", "kwargs", "[", "self", ".", "attended_name", "]", "\n", "preprocessed_attended_list", "=", "kwargs", ".", "pop", "(", "self", ".", "preprocessed_attended_name", ")", "\n", "attended_mask_list", "=", "kwargs", ".", "get", "(", "self", ".", "attended_mask_name", ")", "\n", "\n", "posTag", "=", "kwargs", "[", "self", ".", "posTag_name", "]", ";", "\n", "preprocessed_posTag", "=", "kwargs", ".", "pop", "(", "self", ".", "preprocessed_posTag_name", ")", ";", "\n", "sequences", "=", "dict_subset", "(", "kwargs", ",", "self", ".", "_sequence_names", ",", "pop", "=", "True", ",", "\n", "must_have", "=", "False", ")", "\n", "states", "=", "dict_subset", "(", "kwargs", ",", "self", ".", "_state_names", ",", "pop", "=", "True", ")", "\n", "glimpses", "=", "dict_subset", "(", "kwargs", ",", "self", ".", "_glimpse_names", ",", "pop", "=", "True", ")", "\n", "current_glimpses", "=", "self", ".", "take_glimpses", "(", "\n", "as_dict", "=", "True", ",", "\n", "**", "dict_union", "(", "\n", "states", ",", "glimpses", ",", "\n", "{", "self", ".", "attended_name", ":", "attended_list", ",", "\n", "self", ".", "posTag_name", ":", "posTag", ",", "\n", "self", ".", "attended_mask_name", ":", "attended_mask_list", ",", "\n", "self", ".", "preprocessed_attended_name", ":", "preprocessed_attended_list", ",", "\n", "self", ".", "preprocessed_posTag_name", ":", "preprocessed_posTag", "}", ")", ")", "\n", "#the weighted averages to go through context transition GRU one by one.", "\n", "current_glimpses", "[", "'weighted_averages'", "]", "=", "self", ".", "context_transition", ".", "apply", "(", "current_glimpses", "[", "'weighted_averages'", "]", ",", "tensor", ".", "ones", "(", "[", "current_glimpses", "[", "'weighted_averages'", "]", ".", "shape", "[", "1", "]", ",", "\n", "current_glimpses", "[", "'weighted_averages'", "]", ".", "shape", "[", "0", "]", "]", ")", ")", "[", "-", "1", "]", ";", "\n", "current_states", "=", "self", ".", "compute_states", "(", "\n", "as_list", "=", "True", ",", "\n", "**", "dict_union", "(", "sequences", ",", "states", ",", "current_glimpses", ",", "kwargs", ")", ")", "\n", "return", "current_states", "+", "list", "(", "current_glimpses", ".", "values", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.AttentionRecurrent.do_apply_sequences": [[788, 791], ["do_apply.property"], "methods", ["None"], ["", "@", "do_apply", ".", "property", "(", "'sequences'", ")", "\n", "def", "do_apply_sequences", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_sequence_names", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.AttentionRecurrent.do_apply_contexts": [[792, 795], ["do_apply.property"], "methods", ["None"], ["", "@", "do_apply", ".", "property", "(", "'contexts'", ")", "\n", "def", "do_apply_contexts", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_context_names", "+", "[", "self", ".", "preprocessed_attended_name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.AttentionRecurrent.do_apply_states": [[796, 799], ["do_apply.property"], "methods", ["None"], ["", "@", "do_apply", ".", "property", "(", "'states'", ")", "\n", "def", "do_apply_states", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_state_names", "+", "self", ".", "_glimpse_names", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.AttentionRecurrent.do_apply_outputs": [[800, 803], ["do_apply.property"], "methods", ["None"], ["", "@", "do_apply", ".", "property", "(", "'outputs'", ")", "\n", "def", "do_apply_outputs", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_state_names", "+", "self", ".", "_glimpse_names", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.AttentionRecurrent.apply": [[804, 822], ["attention_with_posTagging.AttentionRecurrent.attention.preprocess", "attention_with_posTagging.AttentionRecurrent.attention.posTag_preprocess", "attention_with_posTagging.AttentionRecurrent.do_apply", "blocks.utils.dict_union"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.SequenceContentAttention_withExInput_3d.preprocess", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.SequenceContentAttention_withExInput_3d.posTag_preprocess", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.AttentionRecurrent.do_apply"], ["", "@", "application", "\n", "def", "apply", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Preprocess a sequence attending the attended context at every step.\n\n        Preprocesses the attended context and runs :meth:`do_apply`. See\n        :meth:`do_apply` documentation for further information.\n\n        \"\"\"", "\n", "attended_list", "=", "kwargs", "[", "self", ".", "attended_name", "]", ";", "\n", "posTag", "=", "kwargs", "[", "self", ".", "posTag_name", "]", "\n", "preprocessed_attended_list", "=", "self", ".", "attention", ".", "preprocess", "(", "attended_list", ")", ";", "\n", "preprocessed_posTag", "=", "self", ".", "attention", ".", "posTag_preprocess", "(", "posTag", ")", ";", "\n", "return", "self", ".", "do_apply", "(", "\n", "**", "dict_union", "(", "kwargs", ",", "\n", "{", "self", ".", "preprocessed_attended_name", ":", "\n", "preprocessed_attended_list", ",", "\n", "self", ".", "preprocessed_posTag_name", ":", "\n", "preprocessed_posTag", "}", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.AttentionRecurrent.apply_delegate": [[823, 827], ["attention_with_posTagging.AttentionRecurrent.do_apply.__get__"], "methods", ["None"], ["", "@", "apply", ".", "delegate", "\n", "def", "apply_delegate", "(", "self", ")", ":", "\n", "# TODO: Nice interface for this trick?", "\n", "        ", "return", "self", ".", "do_apply", ".", "__get__", "(", "self", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.AttentionRecurrent.apply_contexts": [[828, 831], ["apply.property"], "methods", ["None"], ["", "@", "apply", ".", "property", "(", "'contexts'", ")", "\n", "def", "apply_contexts", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_context_names", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.AttentionRecurrent.initial_states": [[832, 838], ["blocks.utils.pack", "blocks.utils.pack", "attention_with_posTagging.AttentionRecurrent.transition.initial_states", "attention_with_posTagging.AttentionRecurrent.attention.initial_glimpses"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.AttentionRecurrent.initial_states", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.SequenceContentAttention_withExInput_3d.initial_glimpses"], ["", "@", "application", "\n", "def", "initial_states", "(", "self", ",", "batch_size", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "(", "pack", "(", "self", ".", "transition", ".", "initial_states", "(", "\n", "batch_size", ",", "**", "kwargs", ")", ")", "+", "\n", "pack", "(", "self", ".", "attention", ".", "initial_glimpses", "(", "\n", "batch_size", ",", "kwargs", "[", "self", ".", "attended_name", "]", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.AttentionRecurrent.initial_states_outputs": [[839, 842], ["initial_states.property"], "methods", ["None"], ["", "@", "initial_states", ".", "property", "(", "'outputs'", ")", "\n", "def", "initial_states_outputs", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "do_apply", ".", "states", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.AttentionRecurrent.get_dim": [[843, 856], ["attention_with_posTagging.AttentionRecurrent.transition.get_dim", "attention_with_posTagging.AttentionRecurrent.attention.get_dim", "attention_with_posTagging.AttentionRecurrent.attention.get_dim", "attention_with_posTagging.AttentionRecurrent.attention.get_dim"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.AttentionRecurrent.get_dim", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.AttentionRecurrent.get_dim", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.AttentionRecurrent.get_dim", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.attention_with_posTagging.AttentionRecurrent.get_dim"], ["", "def", "get_dim", "(", "self", ",", "name", ")", ":", "\n", "        ", "if", "name", "in", "self", ".", "_glimpse_names", ":", "\n", "            ", "return", "self", ".", "attention", ".", "get_dim", "(", "name", ")", "\n", "", "if", "name", "==", "self", ".", "preprocessed_attended_name", ":", "\n", "            ", "(", "original_name", ",", ")", "=", "self", ".", "attention", ".", "preprocess", ".", "outputs", "\n", "return", "self", ".", "attention", ".", "get_dim", "(", "original_name", ")", "\n", "", "if", "self", ".", "add_contexts", ":", "\n", "            ", "if", "name", "==", "self", ".", "attended_name", ":", "\n", "                ", "return", "self", ".", "attention", ".", "get_dim", "(", "\n", "self", ".", "attention", ".", "take_glimpses", ".", "inputs", "[", "0", "]", ")", "\n", "", "if", "name", "==", "self", ".", "attended_mask_name", ":", "\n", "                ", "return", "0", "\n", "", "", "return", "self", ".", "transition", ".", "get_dim", "(", "name", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.preprocess.open_files": [[59, 78], ["enumerate", "os.path.split", "base_filenames.append", "filename.rstrip", "filename.rstrip.rstrip", "gzip.GzipFile", "filename.split", "filename.rstrip", "filename.rstrip.split", "filename.split", "bz2.BZ2File", "filename.split", "filename.split"], "function", ["None"], ["def", "open_files", "(", ")", ":", "\n", "    ", "base_filenames", "=", "[", "]", "\n", "for", "i", ",", "input_file", "in", "enumerate", "(", "args", ".", "input", ")", ":", "\n", "        ", "dirname", ",", "filename", "=", "os", ".", "path", ".", "split", "(", "input_file", ".", "name", ")", "\n", "if", "filename", ".", "split", "(", "os", ".", "extsep", ")", "[", "-", "1", "]", "==", "'gz'", ":", "\n", "            ", "base_filename", "=", "filename", ".", "rstrip", "(", "'.gz'", ")", "\n", "", "elif", "filename", ".", "split", "(", "os", ".", "extsep", ")", "[", "-", "1", "]", "==", "'bz2'", ":", "\n", "            ", "base_filename", "=", "filename", ".", "rstrip", "(", "'.bz2'", ")", "\n", "", "else", ":", "\n", "            ", "base_filename", "=", "filename", "\n", "", "if", "base_filename", ".", "split", "(", "os", ".", "extsep", ")", "[", "-", "1", "]", "==", "'txt'", ":", "\n", "            ", "base_filename", "=", "base_filename", ".", "rstrip", "(", "'.txt'", ")", "\n", "", "if", "filename", ".", "split", "(", "os", ".", "extsep", ")", "[", "-", "1", "]", "==", "'gz'", ":", "\n", "            ", "args", ".", "input", "[", "i", "]", "=", "gzip", ".", "GzipFile", "(", "input_file", ".", "name", ",", "input_file", ".", "mode", ",", "\n", "9", ",", "input_file", ")", "\n", "", "elif", "filename", ".", "split", "(", "os", ".", "extsep", ")", "[", "-", "1", "]", "==", "'bz2'", ":", "\n", "            ", "args", ".", "input", "[", "i", "]", "=", "bz2", ".", "BZ2File", "(", "input_file", ".", "name", ",", "input_file", ".", "mode", ")", "\n", "", "base_filenames", ".", "append", "(", "base_filename", ")", "\n", "", "return", "base_filenames", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.preprocess.safe_pickle": [[80, 90], ["os.path.isfile", "logger.warning", "os.path.isfile", "logger.info", "logger.info", "open", "cPickle.dump"], "function", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.checkpoint.CheckpointNMT.dump"], ["", "def", "safe_pickle", "(", "obj", ",", "filename", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "isfile", "(", "filename", ")", "and", "not", "args", ".", "overwrite", ":", "\n", "        ", "logger", ".", "warning", "(", "\"Not saving %s, already exists.\"", "%", "(", "filename", ")", ")", "\n", "", "else", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "filename", ")", ":", "\n", "            ", "logger", ".", "info", "(", "\"Overwriting %s.\"", "%", "filename", ")", "\n", "", "else", ":", "\n", "            ", "logger", ".", "info", "(", "\"Saving to %s.\"", "%", "filename", ")", "\n", "", "with", "open", "(", "filename", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "cPickle", ".", "dump", "(", "obj", ",", "f", ",", "protocol", "=", "cPickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.preprocess.safe_hdf": [[92, 106], ["os.path.isfile", "logger.warning", "os.path.isfile", "logger.info", "logger.info", "tables.openFile", "tables.Atom.from_dtype", "tables.Filters", "f.createCArray", "name.replace"], "function", ["None"], ["", "", "", "def", "safe_hdf", "(", "array", ",", "name", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "isfile", "(", "name", "+", "'.hdf'", ")", "and", "not", "args", ".", "overwrite", ":", "\n", "        ", "logger", ".", "warning", "(", "\"Not saving %s, already exists.\"", "%", "(", "name", "+", "'.hdf'", ")", ")", "\n", "", "else", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "name", "+", "'.hdf'", ")", ":", "\n", "            ", "logger", ".", "info", "(", "\"Overwriting %s.\"", "%", "(", "name", "+", "'.hdf'", ")", ")", "\n", "", "else", ":", "\n", "            ", "logger", ".", "info", "(", "\"Saving to %s.\"", "%", "(", "name", "+", "'.hdf'", ")", ")", "\n", "", "with", "tables", ".", "openFile", "(", "name", "+", "'.hdf'", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "atom", "=", "tables", ".", "Atom", ".", "from_dtype", "(", "array", ".", "dtype", ")", "\n", "filters", "=", "tables", ".", "Filters", "(", "complib", "=", "'blosc'", ",", "complevel", "=", "5", ")", "\n", "ds", "=", "f", ".", "createCArray", "(", "f", ".", "root", ",", "name", ".", "replace", "(", "'.'", ",", "''", ")", ",", "atom", ",", "\n", "array", ".", "shape", ",", "filters", "=", "filters", ")", "\n", "ds", "[", ":", "]", "=", "array", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.preprocess.create_dictionary": [[108, 174], ["collections.Counter", "zip", "logger.info", "enumerate", "preprocess.safe_pickle", "os.path.basename", "counters.append", "sentence_counts.append", "logger.info", "input_file.seek", "preprocess.safe_pickle", "combined_counter.most_common", "logger.info", "logger.info", "cPickle.load.most_common", "os.path.isfile", "logger.info", "sum", "logger.info", "collections.Counter", "preprocess.safe_pickle", "logger.info", "open", "cPickle.load", "cPickle.load.update", "collections.Counter.update", "len", "sum", "sum", "len", "line.lower.lower", "list", "line.lower.strip().split", "len", "sum", "combined_counter.values", "line.lower.strip().decode", "cPickle.load.values", "sum", "line.lower.strip", "sum", "combined_counter.values", "line.lower.strip"], "function", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.preprocess.safe_pickle", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.preprocess.safe_pickle", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.preprocess.safe_pickle"], ["", "", "", "def", "create_dictionary", "(", ")", ":", "\n", "# Part I: Counting the words", "\n", "    ", "counters", "=", "[", "]", "\n", "sentence_counts", "=", "[", "]", "\n", "global_counter", "=", "Counter", "(", ")", "\n", "\n", "for", "input_file", ",", "base_filename", "in", "zip", "(", "args", ".", "input", ",", "base_filenames", ")", ":", "\n", "        ", "count_filename", "=", "base_filename", "+", "'.count.pkl'", "\n", "input_filename", "=", "os", ".", "path", ".", "basename", "(", "input_file", ".", "name", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "count_filename", ")", "and", "not", "args", ".", "overwrite", ":", "\n", "            ", "logger", ".", "info", "(", "\"Loading word counts for %s from %s\"", "\n", "%", "(", "input_filename", ",", "count_filename", ")", ")", "\n", "with", "open", "(", "count_filename", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "counter", "=", "cPickle", ".", "load", "(", "f", ")", "\n", "", "sentence_count", "=", "sum", "(", "[", "1", "for", "line", "in", "input_file", "]", ")", "\n", "", "else", ":", "\n", "            ", "logger", ".", "info", "(", "\"Counting words in %s\"", "%", "input_filename", ")", "\n", "counter", "=", "Counter", "(", ")", "\n", "sentence_count", "=", "0", "\n", "for", "line", "in", "input_file", ":", "\n", "                ", "if", "args", ".", "lowercase", ":", "\n", "                    ", "line", "=", "line", ".", "lower", "(", ")", "\n", "", "words", "=", "None", "\n", "if", "args", ".", "char", ":", "\n", "                    ", "words", "=", "list", "(", "line", ".", "strip", "(", ")", ".", "decode", "(", "'utf-8'", ")", ")", "\n", "", "else", ":", "\n", "                    ", "words", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "\n", "", "counter", ".", "update", "(", "words", ")", "\n", "global_counter", ".", "update", "(", "words", ")", "\n", "sentence_count", "+=", "1", "\n", "", "", "counters", ".", "append", "(", "counter", ")", "\n", "sentence_counts", ".", "append", "(", "sentence_count", ")", "\n", "logger", ".", "info", "(", "\"%d unique words in %d sentences with a total of %d words.\"", "\n", "%", "(", "len", "(", "counter", ")", ",", "sentence_count", ",", "sum", "(", "counter", ".", "values", "(", ")", ")", ")", ")", "\n", "if", "args", ".", "each", "and", "args", ".", "count", ":", "\n", "            ", "safe_pickle", "(", "counter", ",", "count_filename", ")", "\n", "", "input_file", ".", "seek", "(", "0", ")", "\n", "\n", "# Part II: Combining the counts", "\n", "", "combined_counter", "=", "global_counter", "\n", "logger", ".", "info", "(", "\"Total: %d unique words in %d sentences with a total \"", "\n", "\"of %d words.\"", "\n", "%", "(", "len", "(", "combined_counter", ")", ",", "sum", "(", "sentence_counts", ")", ",", "\n", "sum", "(", "combined_counter", ".", "values", "(", ")", ")", ")", ")", "\n", "if", "args", ".", "count", ":", "\n", "        ", "safe_pickle", "(", "combined_counter", ",", "'combined.count.pkl'", ")", "\n", "\n", "# Part III: Creating the dictionary", "\n", "", "if", "args", ".", "vocab", "is", "not", "None", ":", "\n", "        ", "if", "args", ".", "vocab", "<=", "2", ":", "\n", "            ", "logger", ".", "info", "(", "'Building a dictionary with all unique words'", ")", "\n", "args", ".", "vocab", "=", "len", "(", "combined_counter", ")", "+", "2", "\n", "", "vocab_count", "=", "combined_counter", ".", "most_common", "(", "args", ".", "vocab", "-", "2", ")", "\n", "logger", ".", "info", "(", "\"Creating dictionary of %s most common words, covering \"", "\n", "\"%2.1f%% of the text.\"", "\n", "%", "(", "args", ".", "vocab", ",", "\n", "100.0", "*", "sum", "(", "[", "count", "for", "word", ",", "count", "in", "vocab_count", "]", ")", "/", "\n", "sum", "(", "combined_counter", ".", "values", "(", ")", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "logger", ".", "info", "(", "\"Creating dictionary of all words\"", ")", "\n", "vocab_count", "=", "counter", ".", "most_common", "(", ")", "\n", "", "vocab", "=", "{", "'UNK'", ":", "1", ",", "'<s>'", ":", "0", ",", "'</s>'", ":", "0", "}", "\n", "for", "i", ",", "(", "word", ",", "count", ")", "in", "enumerate", "(", "vocab_count", ")", ":", "\n", "        ", "vocab", "[", "word", "]", "=", "i", "+", "2", "\n", "", "safe_pickle", "(", "vocab", ",", "args", ".", "dictionary", ")", "\n", "return", "combined_counter", ",", "sentence_counts", ",", "counters", ",", "vocab", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.preprocess.binarize": [[176, 257], ["zip", "numpy.empty", "os.path.basename", "logger.info", "enumerate", "input_file.seek", "preprocess.safe_pickle", "logger.info", "numpy.random.choice", "preprocess.safe_hdf", "preprocess.safe_hdf", "len", "binarized_corpus.append", "int", "int", "preprocess.safe_hdf", "numpy.iinfo", "sentence.lower.lower", "list", "sentence.lower.strip().split", "vocab.get", "numpy.asarray", "numpy.lib.stride_tricks.as_strided", "len", "preprocess.safe_pickle", "logger.info", "numpy.random.choice", "preprocess.safe_hdf", "preprocess.safe_hdf", "sum", "sum", "sentence.lower.strip().decode", "int", "int", "logger.info", "preprocess.safe_hdf", "numpy.setdiff1d", "combined_counter.values", "sentence.lower.strip", "numpy.arange", "sentence.lower.strip", "len", "len", "numpy.setdiff1d", "numpy.arange"], "function", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.preprocess.safe_pickle", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.preprocess.safe_hdf", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.preprocess.safe_hdf", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.preprocess.safe_hdf", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.preprocess.safe_pickle", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.preprocess.safe_hdf", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.preprocess.safe_hdf", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.preprocess.safe_hdf"], ["", "def", "binarize", "(", ")", ":", "\n", "    ", "if", "args", ".", "ngram", ":", "\n", "        ", "assert", "numpy", ".", "iinfo", "(", "numpy", ".", "uint16", ")", ".", "max", ">", "len", "(", "vocab", ")", "\n", "ngrams", "=", "numpy", ".", "empty", "(", "(", "sum", "(", "combined_counter", ".", "values", "(", ")", ")", "+", "\n", "sum", "(", "sentence_counts", ")", ",", "args", ".", "ngram", ")", ",", "\n", "dtype", "=", "'uint16'", ")", "\n", "", "binarized_corpora", "=", "[", "]", "\n", "total_ngram_count", "=", "0", "\n", "for", "input_file", ",", "base_filename", ",", "sentence_count", "in", "zip", "(", "args", ".", "input", ",", "base_filenames", ",", "sentence_counts", ")", ":", "\n", "        ", "input_filename", "=", "os", ".", "path", ".", "basename", "(", "input_file", ".", "name", ")", "\n", "logger", ".", "info", "(", "\"Binarizing %s.\"", "%", "(", "input_filename", ")", ")", "\n", "binarized_corpus", "=", "[", "]", "\n", "ngram_count", "=", "0", "\n", "for", "sentence_count", ",", "sentence", "in", "enumerate", "(", "input_file", ")", ":", "\n", "            ", "if", "args", ".", "lowercase", ":", "\n", "                ", "sentence", "=", "sentence", ".", "lower", "(", ")", "\n", "", "if", "args", ".", "char", ":", "\n", "                ", "words", "=", "list", "(", "sentence", ".", "strip", "(", ")", ".", "decode", "(", "'utf-8'", ")", ")", "\n", "", "else", ":", "\n", "                ", "words", "=", "sentence", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "\n", "", "binarized_sentence", "=", "[", "vocab", ".", "get", "(", "word", ",", "1", ")", "for", "word", "in", "words", "]", "\n", "binarized_corpus", ".", "append", "(", "binarized_sentence", ")", "\n", "if", "args", ".", "ngram", ":", "\n", "                ", "padded_sentence", "=", "numpy", ".", "asarray", "(", "\n", "[", "0", "]", "*", "(", "args", ".", "ngram", "-", "1", ")", "+", "binarized_sentence", "+", "[", "0", "]", "\n", ")", "\n", "ngrams", "[", "total_ngram_count", "+", "ngram_count", ":", "\n", "total_ngram_count", "+", "ngram_count", "+", "len", "(", "words", ")", "+", "1", "]", "=", "as_strided", "(", "\n", "padded_sentence", ",", "\n", "shape", "=", "(", "len", "(", "words", ")", "+", "1", ",", "args", ".", "ngram", ")", ",", "\n", "strides", "=", "(", "padded_sentence", ".", "itemsize", ",", "\n", "padded_sentence", ".", "itemsize", ")", "\n", ")", "\n", "", "ngram_count", "+=", "len", "(", "words", ")", "+", "1", "\n", "# endfor sentence in input_file", "\n", "# Output", "\n", "", "if", "args", ".", "each", ":", "\n", "            ", "if", "args", ".", "pickle", ":", "\n", "                ", "safe_pickle", "(", "binarized_corpus", ",", "base_filename", "+", "'.pkl'", ")", "\n", "", "if", "args", ".", "ngram", "and", "args", ".", "split", ":", "\n", "                ", "if", "args", ".", "split", ">=", "1", ":", "\n", "                    ", "rows", "=", "int", "(", "args", ".", "split", ")", "\n", "", "else", ":", "\n", "                    ", "rows", "=", "int", "(", "ngram_count", "*", "args", ".", "split", ")", "\n", "", "logger", ".", "info", "(", "\"Saving training set (%d samples) and validation \"", "\n", "\"set (%d samples).\"", "\n", "%", "(", "ngram_count", "-", "rows", ",", "rows", ")", ")", "\n", "rows", "=", "numpy", ".", "random", ".", "choice", "(", "ngram_count", ",", "rows", ",", "replace", "=", "False", ")", "\n", "safe_hdf", "(", "ngrams", "[", "total_ngram_count", "+", "rows", "]", ",", "\n", "base_filename", "+", "'_valid'", ")", "\n", "safe_hdf", "(", "\n", "ngrams", "[", "total_ngram_count", "+", "numpy", ".", "setdiff1d", "(", "\n", "numpy", ".", "arange", "(", "ngram_count", ")", ",", "\n", "rows", ",", "True", "\n", ")", "]", ",", "base_filename", "+", "'_train'", "\n", ")", "\n", "", "elif", "args", ".", "ngram", ":", "\n", "                ", "logger", ".", "info", "(", "\"Saving n-grams to %s.\"", "%", "(", "base_filename", "+", "'.hdf'", ")", ")", "\n", "safe_hdf", "(", "ngrams", ",", "base_filename", ")", "\n", "", "", "binarized_corpora", "+=", "binarized_corpus", "\n", "total_ngram_count", "+=", "ngram_count", "\n", "input_file", ".", "seek", "(", "0", ")", "\n", "# endfor input_file in args.input", "\n", "", "if", "args", ".", "pickle", ":", "\n", "        ", "safe_pickle", "(", "binarized_corpora", ",", "args", ".", "binarized_text", ")", "\n", "", "if", "args", ".", "ngram", "and", "args", ".", "split", ":", "\n", "        ", "if", "args", ".", "split", ">=", "1", ":", "\n", "            ", "rows", "=", "int", "(", "args", ".", "split", ")", "\n", "", "else", ":", "\n", "            ", "rows", "=", "int", "(", "total_ngram_count", "*", "args", ".", "split", ")", "\n", "", "logger", ".", "info", "(", "\"Saving training set (%d samples) and validation set (%d \"", "\n", "\"samples).\"", "\n", "%", "(", "total_ngram_count", "-", "rows", ",", "rows", ")", ")", "\n", "rows", "=", "numpy", ".", "random", ".", "choice", "(", "total_ngram_count", ",", "rows", ",", "replace", "=", "False", ")", "\n", "safe_hdf", "(", "ngrams", "[", "rows", "]", ",", "'combined_valid'", ")", "\n", "safe_hdf", "(", "ngrams", "[", "numpy", ".", "setdiff1d", "(", "numpy", ".", "arange", "(", "total_ngram_count", ")", ",", "\n", "rows", ",", "True", ")", "]", ",", "'combined_train'", ")", "\n", "", "elif", "args", ".", "ngram", ":", "\n", "        ", "safe_hdf", "(", "ngrams", ",", "'combined'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.get_valid_status.get_log": [[15, 25], ["os.listdir", "max", "cPickle.load", "len", "int", "len", "cPickle.load", "open", "f.startswith", "open", "os.path.join", "l.split", "os.path.join", "str"], "function", ["None"], ["def", "get_log", "(", "path", ")", ":", "\n", "    ", "filenames", "=", "os", ".", "listdir", "(", "path", ")", "\n", "logs", "=", "[", "f", "for", "f", "in", "filenames", "if", "f", ".", "startswith", "(", "'log'", ")", "]", "\n", "if", "len", "(", "logs", ")", "==", "0", ":", "\n", "        ", "return", "None", "\n", "", "iterations", "=", "[", "int", "(", "l", ".", "split", "(", "'.'", ")", "[", "-", "1", "]", ")", "for", "l", "in", "logs", "if", "'.'", "in", "l", "]", "\n", "if", "len", "(", "iterations", ")", "==", "0", ":", "\n", "        ", "return", "cPickle", ".", "load", "(", "open", "(", "os", ".", "path", ".", "join", "(", "path", ",", "logs", "[", "0", "]", ")", ",", "'rb'", ")", ")", "\n", "", "x", "=", "max", "(", "iterations", ")", "\n", "return", "cPickle", ".", "load", "(", "open", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'log.'", "+", "str", "(", "x", ")", ")", ",", "'rb'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.get_valid_status.main": [[29, 63], ["os.listdir", "matplotlib.legend", "matplotlib.show", "model_name.endswith", "os.path.join", "get_valid_status.get_log", "sorted", "lines.append", "os.path.isdir", "sorted.items", "len", "matplotlib.plot", "names.append", "matplotlib.plot", "names.append", "operator.itemgetter", "zip", "zip"], "function", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.get_valid_status.get_log"], ["def", "main", "(", ")", ":", "\n", "    ", "for", "model_name", "in", "os", ".", "listdir", "(", "model_dir", ")", ":", "\n", "        ", "if", "model_name", ".", "endswith", "(", "'bk'", ")", ":", "\n", "            ", "continue", "\n", "", "model_path", "=", "os", ".", "path", ".", "join", "(", "model_dir", ",", "model_name", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "model_path", ")", ":", "\n", "            ", "continue", "\n", "", "log", "=", "get_log", "(", "model_path", ")", "\n", "if", "log", "is", "None", ":", "\n", "            ", "continue", "\n", "", "log", "=", "sorted", "(", "log", ".", "items", "(", ")", ",", "key", "=", "operator", ".", "itemgetter", "(", "0", ")", ")", "\n", "bleus", "=", "[", "(", "x", ",", "y", "[", "BLEU", "]", ")", "for", "x", ",", "y", "in", "log", "if", "BLEU", "in", "y", "]", "\n", "costs", "=", "[", "(", "x", ",", "y", "[", "COST", "]", ")", "for", "x", ",", "y", "in", "log", "if", "COST", "in", "y", "]", "\n", "if", "len", "(", "bleus", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "\n", "", "if", "PLOT_BLEU", ":", "\n", "            ", "line", ",", "=", "plt", ".", "plot", "(", "*", "zip", "(", "*", "bleus", ")", ",", "\n", "linewidth", "=", "2.0", ",", "\n", "label", "=", "model_name", "+", "' bleu'", ",", "\n", "marker", "=", "'+'", ")", "\n", "names", ".", "append", "(", "model_name", "+", "' bleu'", ")", "\n", "\n", "", "if", "PLOT_COST", ":", "\n", "            ", "line", ",", "=", "plt", ".", "plot", "(", "*", "zip", "(", "*", "costs", ")", ",", "\n", "linewidth", "=", "2.0", ",", "\n", "label", "=", "model_name", "+", "'cost'", ",", "\n", "marker", "=", "'+'", ")", "\n", "names", ".", "append", "(", "model_name", "+", "' cost'", ")", "\n", "", "lines", ".", "append", "(", "line", ")", "\n", "\n", "\n", "", "plt", ".", "legend", "(", "lines", ",", "names", ",", "loc", "=", "4", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.search.BeamSearch.__init__": [[52, 88], ["blocks.graph.ComputationGraph", "blocks.filter.get_brick", "blocks.filter.get_application_call", "blocks.graph.ComputationGraph", "isinstance", "blocks.filter.VariableFilter", "search.BeamSearch.input_state_names.append", "search.BeamSearch.input_states.append", "blocks.filter.VariableFilter"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "samples", ")", ":", "\n", "# Extracting information from the sampling computation graph", "\n", "        ", "self", ".", "cg", "=", "ComputationGraph", "(", "samples", ")", "\n", "self", ".", "inputs", "=", "self", ".", "cg", ".", "inputs", "\n", "self", ".", "generator", "=", "get_brick", "(", "samples", ")", "\n", "if", "not", "isinstance", "(", "self", ".", "generator", ",", "BaseSequenceGenerator", ")", ":", "\n", "            ", "raise", "ValueError", "\n", "", "self", ".", "generate_call", "=", "get_application_call", "(", "samples", ")", "\n", "if", "(", "not", "self", ".", "generate_call", ".", "application", "==", "\n", "self", ".", "generator", ".", "generate", ")", ":", "\n", "            ", "raise", "ValueError", "\n", "", "self", ".", "inner_cg", "=", "ComputationGraph", "(", "self", ".", "generate_call", ".", "inner_outputs", ")", "\n", "\n", "# Fetching names from the sequence generator", "\n", "self", ".", "context_names", "=", "self", ".", "generator", ".", "generate", ".", "contexts", "\n", "self", ".", "state_names", "=", "self", ".", "generator", ".", "generate", ".", "states", "\n", "\n", "# Parsing the inner computation graph of sampling scan", "\n", "self", ".", "contexts", "=", "[", "\n", "VariableFilter", "(", "bricks", "=", "[", "self", ".", "generator", "]", ",", "\n", "name", "=", "name", ",", "\n", "roles", "=", "[", "INPUT", "]", ")", "(", "self", ".", "inner_cg", ")", "[", "0", "]", "\n", "for", "name", "in", "self", ".", "context_names", "]", "\n", "self", ".", "input_states", "=", "[", "]", "\n", "# Includes only those state names that were actually used", "\n", "# in 'generate'", "\n", "self", ".", "input_state_names", "=", "[", "]", "\n", "for", "name", "in", "self", ".", "generator", ".", "generate", ".", "states", ":", "\n", "            ", "var", "=", "VariableFilter", "(", "\n", "bricks", "=", "[", "self", ".", "generator", "]", ",", "name", "=", "name", ",", "\n", "roles", "=", "[", "INPUT", "]", ")", "(", "self", ".", "inner_cg", ")", "\n", "if", "var", ":", "\n", "                ", "self", ".", "input_state_names", ".", "append", "(", "name", ")", "\n", "self", ".", "input_states", ".", "append", "(", "var", "[", "0", "]", ")", "\n", "\n", "", "", "self", ".", "compiled", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.search.BeamSearch._compile_initial_state_and_context_computer": [[89, 102], ["collections.OrderedDict", "blocks.utils.unpack", "picklable_itertools.extras.equizip", "theano.function", "blocks.filter.VariableFilter", "blocks.filter.VariableFilter"], "methods", ["None"], ["", "def", "_compile_initial_state_and_context_computer", "(", "self", ")", ":", "\n", "        ", "initial_states", "=", "VariableFilter", "(", "\n", "applications", "=", "[", "self", ".", "generator", ".", "initial_states", "]", ",", "\n", "roles", "=", "[", "OUTPUT", "]", ")", "(", "self", ".", "cg", ")", "\n", "outputs", "=", "OrderedDict", "(", "[", "(", "v", ".", "tag", ".", "name", ",", "v", ")", "for", "v", "in", "initial_states", "]", ")", "\n", "beam_size", "=", "unpack", "(", "\n", "VariableFilter", "(", "applications", "=", "[", "self", ".", "generator", ".", "initial_states", "]", ",", "\n", "name", "=", "'batch_size'", ")", "(", "self", ".", "cg", ")", ")", "\n", "for", "name", ",", "context", "in", "equizip", "(", "self", ".", "context_names", ",", "self", ".", "contexts", ")", ":", "\n", "            ", "outputs", "[", "name", "]", "=", "context", "\n", "", "outputs", "[", "'beam_size'", "]", "=", "beam_size", "\n", "self", ".", "initial_state_and_context_computer", "=", "function", "(", "\n", "self", ".", "inputs", ",", "outputs", ",", "on_unused_input", "=", "'ignore'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.search.BeamSearch._compile_next_state_computer": [[103, 115], ["theano.function", "blocks.filter.VariableFilter", "blocks.filter.VariableFilter"], "methods", ["None"], ["", "def", "_compile_next_state_computer", "(", "self", ")", ":", "\n", "        ", "next_states", "=", "[", "VariableFilter", "(", "bricks", "=", "[", "self", ".", "generator", "]", ",", "\n", "name", "=", "name", ",", "\n", "roles", "=", "[", "OUTPUT", "]", ")", "(", "self", ".", "inner_cg", ")", "[", "-", "1", "]", "\n", "for", "name", "in", "self", ".", "state_names", "]", "\n", "next_outputs", "=", "VariableFilter", "(", "\n", "applications", "=", "[", "self", ".", "generator", ".", "readout", ".", "emit", "]", ",", "roles", "=", "[", "OUTPUT", "]", ")", "(", "\n", "self", ".", "inner_cg", ".", "variables", ")", "\n", "self", ".", "next_state_computer", "=", "function", "(", "\n", "self", ".", "contexts", "+", "self", ".", "input_states", "+", "next_outputs", ",", "\n", "next_states", ",", "\n", "on_unused_input", "=", "'ignore'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.search.BeamSearch._compile_logprobs_computer": [[116, 127], ["theano.function", "theano.tensor.log", "blocks.filter.VariableFilter"], "methods", ["None"], ["", "def", "_compile_logprobs_computer", "(", "self", ")", ":", "\n", "# This filtering should return identical variables", "\n", "# (in terms of computations) variables, and we do not care", "\n", "# which to use.", "\n", "        ", "probs", "=", "VariableFilter", "(", "\n", "applications", "=", "[", "self", ".", "generator", ".", "readout", ".", "emitter", ".", "probs", "]", ",", "\n", "roles", "=", "[", "OUTPUT", "]", ")", "(", "self", ".", "inner_cg", ")", "[", "0", "]", "\n", "logprobs", "=", "-", "tensor", ".", "log", "(", "probs", ")", "\n", "self", ".", "logprobs_computer", "=", "function", "(", "\n", "self", ".", "contexts", "+", "self", ".", "input_states", ",", "logprobs", ",", "\n", "on_unused_input", "=", "'ignore'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.search.BeamSearch.compile": [[128, 134], ["search.BeamSearch._compile_initial_state_and_context_computer", "search.BeamSearch._compile_next_state_computer", "search.BeamSearch._compile_logprobs_computer"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.search.BeamSearch._compile_initial_state_and_context_computer", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.search.BeamSearch._compile_next_state_computer", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.search.BeamSearch._compile_logprobs_computer"], ["", "def", "compile", "(", "self", ")", ":", "\n", "        ", "\"\"\"Compile all Theano functions used.\"\"\"", "\n", "self", ".", "_compile_initial_state_and_context_computer", "(", ")", "\n", "self", ".", "_compile_next_state_computer", "(", ")", "\n", "self", ".", "_compile_logprobs_computer", "(", ")", "\n", "self", ".", "compiled", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.search.BeamSearch.compute_initial_states_and_contexts": [[135, 157], ["search.BeamSearch.initial_state_and_context_computer", "collections.OrderedDict", "search.BeamSearch.pop", "search.BeamSearch.pop"], "methods", ["None"], ["", "def", "compute_initial_states_and_contexts", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "\"\"\"Computes initial states and contexts from inputs.\n\n        Parameters\n        ----------\n        inputs : dict\n            Dictionary of input arrays.\n\n        Returns\n        -------\n        A tuple containing a {name: :class:`numpy.ndarray`} dictionary of\n        contexts ordered like `self.context_names` and a\n        {name: :class:`numpy.ndarray`} dictionary of states ordered like\n        `self.state_names`.\n\n        \"\"\"", "\n", "outputs", "=", "self", ".", "initial_state_and_context_computer", "(", "\n", "*", "[", "inputs", "[", "var", "]", "for", "var", "in", "self", ".", "inputs", "]", ")", "\n", "contexts", "=", "OrderedDict", "(", "(", "n", ",", "outputs", ".", "pop", "(", "n", ")", ")", "for", "n", "in", "self", ".", "context_names", ")", "\n", "beam_size", "=", "outputs", ".", "pop", "(", "'beam_size'", ")", "\n", "initial_states", "=", "outputs", "\n", "return", "contexts", ",", "initial_states", ",", "beam_size", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.search.BeamSearch.compute_logprobs": [[158, 177], ["search.BeamSearch.logprobs_computer", "list", "contexts.values"], "methods", ["None"], ["", "def", "compute_logprobs", "(", "self", ",", "contexts", ",", "states", ")", ":", "\n", "        ", "\"\"\"Compute log probabilities of all possible outputs.\n\n        Parameters\n        ----------\n        contexts : dict\n            A {name: :class:`numpy.ndarray`} dictionary of contexts.\n        states : dict\n            A {name: :class:`numpy.ndarray`} dictionary of states.\n\n        Returns\n        -------\n        A :class:`numpy.ndarray` of the (beam size, number of possible\n        outputs) shape.\n\n        \"\"\"", "\n", "input_states", "=", "[", "states", "[", "name", "]", "for", "name", "in", "self", ".", "input_state_names", "]", "\n", "return", "self", ".", "logprobs_computer", "(", "*", "(", "list", "(", "contexts", ".", "values", "(", ")", ")", "+", "\n", "input_states", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.search.BeamSearch.compute_next_states": [[178, 199], ["search.BeamSearch.next_state_computer", "collections.OrderedDict", "picklable_itertools.extras.equizip", "list", "contexts.values"], "methods", ["None"], ["", "def", "compute_next_states", "(", "self", ",", "contexts", ",", "states", ",", "outputs", ")", ":", "\n", "        ", "\"\"\"Computes next states.\n\n        Parameters\n        ----------\n        contexts : dict\n            A {name: :class:`numpy.ndarray`} dictionary of contexts.\n        states : dict\n            A {name: :class:`numpy.ndarray`} dictionary of states.\n        outputs : :class:`numpy.ndarray`\n            A :class:`numpy.ndarray` of this step outputs.\n\n        Returns\n        -------\n        A {name: numpy.array} dictionary of next states.\n\n        \"\"\"", "\n", "input_states", "=", "[", "states", "[", "name", "]", "for", "name", "in", "self", ".", "input_state_names", "]", "\n", "next_values", "=", "self", ".", "next_state_computer", "(", "*", "(", "list", "(", "contexts", ".", "values", "(", ")", ")", "+", "\n", "input_states", "+", "[", "outputs", "]", ")", ")", "\n", "return", "OrderedDict", "(", "equizip", "(", "self", ".", "state_names", ",", "next_values", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.search.BeamSearch._smallest": [[200, 225], ["matrix[].flatten", "matrix.flatten", "numpy.argpartition", "numpy.unravel_index", "numpy.argsort"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_smallest", "(", "matrix", ",", "k", ",", "only_first_row", "=", "False", ")", ":", "\n", "        ", "\"\"\"Find k smallest elements of a matrix.\n\n        Parameters\n        ----------\n        matrix : :class:`numpy.ndarray`\n            The matrix.\n        k : int\n            The number of smallest elements required.\n        only_first_row : bool, optional\n            Consider only elements of the first row.\n\n        Returns\n        -------\n        Tuple of ((row numbers, column numbers), values).\n\n        \"\"\"", "\n", "if", "only_first_row", ":", "\n", "            ", "flatten", "=", "matrix", "[", ":", "1", ",", ":", "]", ".", "flatten", "(", ")", "\n", "", "else", ":", "\n", "            ", "flatten", "=", "matrix", ".", "flatten", "(", ")", "\n", "", "args", "=", "numpy", ".", "argpartition", "(", "flatten", ",", "k", ")", "[", ":", "k", "]", "\n", "args", "=", "args", "[", "numpy", ".", "argsort", "(", "flatten", "[", "args", "]", ")", "]", "\n", "return", "numpy", ".", "unravel_index", "(", "args", ",", "matrix", ".", "shape", ")", ",", "flatten", "[", "args", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.search.BeamSearch.search": [[226, 354], ["search.BeamSearch.compute_initial_states_and_contexts", "numpy.ones_like", "numpy.zeros_like", "numpy.zeros_like", "six.moves.range", "numpy.array", "search.BeamSearch.result_to_lists", "search.BeamSearch.compile", "search.BeamSearch.compute_logprobs", "numpy.where", "search.BeamSearch._smallest", "states.update", "numpy.vstack", "numpy.vstack", "numpy.vstack", "all_masks[].sum", "search.BeamSearch.compute_next_states"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.search.BeamSearch.compute_initial_states_and_contexts", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.search.BeamSearch.result_to_lists", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.search.BeamSearch.compile", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.search.BeamSearch.compute_logprobs", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.search.BeamSearch._smallest", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.search.BeamSearch.compute_next_states"], ["", "def", "search", "(", "self", ",", "input_values", ",", "eol_symbol", ",", "max_length", ",", "\n", "ignore_first_eol", "=", "False", ",", "as_arrays", "=", "False", ")", ":", "\n", "        ", "\"\"\"Performs beam search.\n\n        If the beam search was not compiled, it also compiles it.\n\n        Parameters\n        ----------\n        input_values : dict\n            A {:class:`~theano.Variable`: :class:`~numpy.ndarray`}\n            dictionary of input values. The shapes should be\n            the same as if you ran sampling with batch size equal to\n            `beam_size`. Put it differently, the user is responsible\n            for duplicaling inputs necessary number of times, because\n            this class has insufficient information to do it properly.\n        eol_symbol : int\n            End of sequence symbol, the search stops when the symbol is\n            generated.\n        max_length : int\n            Maximum sequence length, the search stops when it is reached.\n        ignore_first_eol : bool, optional\n            When ``True``, the end if sequence symbol generated at the\n            first iteration are ignored. This useful when the sequence\n            generator was trained on data with identical symbols for\n            sequence start and sequence end.\n        as_arrays : bool, optional\n            If ``True``, the internal representation of search results\n            is returned, that is a (matrix of outputs, mask,\n            costs of all generated outputs) tuple.\n\n        Returns\n        -------\n        outputs : list of lists of ints\n            A list of the `beam_size` best sequences found in the order\n            of decreasing likelihood.\n        costs : list of floats\n            A list of the costs for the `outputs`, where cost is the\n            negative log-likelihood.\n\n        \"\"\"", "\n", "if", "not", "self", ".", "compiled", ":", "\n", "            ", "self", ".", "compile", "(", ")", "\n", "\n", "", "contexts", ",", "states", ",", "beam_size", "=", "self", ".", "compute_initial_states_and_contexts", "(", "\n", "input_values", ")", "\n", "\n", "# This array will store all generated outputs, including those from", "\n", "# previous step and those from already finished sequences.", "\n", "all_outputs", "=", "states", "[", "'outputs'", "]", "[", "None", ",", ":", "]", "\n", "all_masks", "=", "numpy", ".", "ones_like", "(", "all_outputs", ",", "dtype", "=", "config", ".", "floatX", ")", "\n", "all_costs", "=", "numpy", ".", "zeros_like", "(", "all_outputs", ",", "dtype", "=", "config", ".", "floatX", ")", "\n", "all_attended_source", "=", "numpy", ".", "zeros_like", "(", "all_outputs", ",", "dtype", "=", "int", ")", "\n", "\"\"\"\n        above arrays all have shape [time, beam_size] where time grows\n\n        states[weights] has shape [beam_size, len]\n        where len is the length of source sentence\n\n        outputs has shape (beam_size, )\n        \"\"\"", "\n", "# #all weights has shape: [time, beam_size, source_len]", "\n", "# _tmp_weight=states['weights'].transpose((0,2,1))", "\n", "# _tmp_weight=_tmp_weight.reshape((states['weights'].shape[0],states['weights'].shape[1]*states['weights'].shape[2]));", "\n", "# all_weights = numpy.hstack(", "\n", "#     [_tmp_weight,", "\n", "#      numpy.zeros([beam_size, 300-_tmp_weight.shape[1]])]", "\n", "# )[None, :, :]", "\n", "\n", "for", "i", "in", "range", "(", "max_length", ")", ":", "\n", "\n", "            ", "if", "all_masks", "[", "-", "1", "]", ".", "sum", "(", ")", "==", "0", ":", "\n", "                ", "break", "\n", "\n", "# We carefully hack values of the `logprobs` array to ensure", "\n", "# that all finished sequences are continued with `eos_symbol`.", "\n", "", "logprobs", "=", "self", ".", "compute_logprobs", "(", "contexts", ",", "states", ")", "\n", "next_costs", "=", "(", "all_costs", "[", "-", "1", ",", ":", ",", "None", "]", "+", "\n", "logprobs", "*", "all_masks", "[", "-", "1", ",", ":", ",", "None", "]", ")", "\n", "(", "finished", ",", ")", "=", "numpy", ".", "where", "(", "all_masks", "[", "-", "1", "]", "==", "0", ")", "\n", "next_costs", "[", "finished", ",", ":", "eol_symbol", "]", "=", "numpy", ".", "inf", "\n", "next_costs", "[", "finished", ",", "eol_symbol", "+", "1", ":", "]", "=", "numpy", ".", "inf", "\n", "\n", "# The `i == 0` is required because at the first step the beam", "\n", "# size is effectively only 1.", "\n", "(", "indexes", ",", "outputs", ")", ",", "chosen_costs", "=", "self", ".", "_smallest", "(", "\n", "next_costs", ",", "beam_size", ",", "only_first_row", "=", "i", "==", "0", ")", "\n", "\n", "# Rearrange everything", "\n", "for", "name", "in", "states", ":", "\n", "                ", "states", "[", "name", "]", "=", "states", "[", "name", "]", "[", "indexes", "]", "\n", "", "all_outputs", "=", "all_outputs", "[", ":", ",", "indexes", "]", "\n", "all_masks", "=", "all_masks", "[", ":", ",", "indexes", "]", "\n", "all_costs", "=", "all_costs", "[", ":", ",", "indexes", "]", "\n", "all_attended_source", "=", "all_attended_source", "[", ":", ",", "indexes", "]", "\n", "#all_weights = all_weights[:, indexes, :]", "\n", "\n", "# Record chosen output and compute new states", "\n", "states", ".", "update", "(", "self", ".", "compute_next_states", "(", "contexts", ",", "states", ",", "outputs", ")", ")", "\n", "\n", "all_outputs", "=", "numpy", ".", "vstack", "(", "[", "all_outputs", ",", "outputs", "[", "None", ",", ":", "]", "]", ")", "\n", "all_costs", "=", "numpy", ".", "vstack", "(", "[", "all_costs", ",", "chosen_costs", "[", "None", ",", ":", "]", "]", ")", "\n", "mask", "=", "outputs", "!=", "eol_symbol", "\n", "if", "ignore_first_eol", "and", "i", "==", "0", ":", "\n", "                ", "mask", "[", ":", "]", "=", "1", "\n", "", "all_masks", "=", "numpy", ".", "vstack", "(", "[", "all_masks", ",", "mask", "[", "None", ",", ":", "]", "]", ")", "\n", "\n", "# _tmp_weight=states['weights'].transpose((0,2,1))", "\n", "# _tmp_weight=_tmp_weight.reshape((states['weights'].shape[0],states['weights'].shape[1]*states['weights'].shape[2]));", "\n", "#", "\n", "# _weights = numpy.hstack(", "\n", "#     [_tmp_weight,", "\n", "#      numpy.zeros([beam_size, 300 - _tmp_weight.shape[1]])])", "\n", "#all_weights = numpy.vstack([all_weights, _weights[None, :, :]])", "\n", "# max_attended = numpy.argmax(_tmp_weight, axis=1)", "\n", "# all_attended_source = numpy.vstack(", "\n", "#     [all_attended_source, max_attended])", "\n", "\n", "", "all_outputs", "=", "all_outputs", "[", "1", ":", "]", "\n", "#all_attended_source = all_attended_source[1:]", "\n", "#all_weights = all_weights[1:]", "\n", "all_masks", "=", "all_masks", "[", ":", "-", "1", "]", "\n", "all_costs", "=", "all_costs", "[", "1", ":", "]", "-", "all_costs", "[", ":", "-", "1", "]", "\n", "all_attended_source", "=", "numpy", ".", "array", "(", "[", "]", ")", ";", "\n", "result", "=", "all_outputs", ",", "all_masks", ",", "all_costs", ",", "all_attended_source", "\n", "all_weights", "=", "[", "]", ";", "\n", "if", "as_arrays", ":", "\n", "            ", "return", "result", "\n", "", "return", "self", ".", "result_to_lists", "(", "result", ",", "all_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.search.BeamSearch.result_to_lists": [[355, 367], ["list", "list", "list.T.sum", "picklable_itertools.extras.equizip", "mask.sum"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "result_to_lists", "(", "result", ",", "weights", ")", ":", "\n", "        ", "outputs", ",", "masks", ",", "costs", ",", "attendeds", "=", "[", "array", ".", "T", "for", "array", "in", "result", "]", "\n", "#weights = numpy.swapaxes(weights, 0, 1)", "\n", "outputs", "=", "[", "list", "(", "output", "[", ":", "mask", ".", "sum", "(", ")", "]", ")", "\n", "for", "output", ",", "mask", "in", "equizip", "(", "outputs", ",", "masks", ")", "]", "\n", "# attendeds = [list(attended[:mask.sum()])", "\n", "#              for attended, mask in equizip(attendeds, masks)]", "\n", "#weights = [weight[:mask.sum()]", "\n", "#           for weight, mask in zip(weights, masks)]", "\n", "costs", "=", "list", "(", "costs", ".", "T", ".", "sum", "(", "axis", "=", "0", ")", ")", "\n", "return", "outputs", ",", "costs", ",", "attendeds", ",", "weights", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.match_functions.ShallowEnergyComputer.__init__": [[10, 16], ["blocks.bricks.base.lazy", "blocks.bricks.Initializable.__init__", "blocks.bricks.Tanh", "blocks.bricks.Linear"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.sampling.ModelInfo.__init__"], ["@", "lazy", "(", ")", "\n", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ShallowEnergyComputer", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "tanh", "=", "Tanh", "(", ")", "\n", "self", ".", "linear", "=", "Linear", "(", "use_bias", "=", "False", ")", "\n", "self", ".", "children", "=", "[", "self", ".", "tanh", ",", "self", ".", "linear", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.match_functions.ShallowEnergyComputer.apply": [[17, 23], ["match_functions.ShallowEnergyComputer.tanh.apply", "match_functions.ShallowEnergyComputer.linear.apply", "blocks.utils.pack", "blocks.utils.pack"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.match_functions.GeneralMatchFunction.apply", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.match_functions.GeneralMatchFunction.apply"], ["", "@", "application", "\n", "def", "apply", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "output", "=", "args", "\n", "output", "=", "self", ".", "tanh", ".", "apply", "(", "*", "pack", "(", "output", ")", ")", "\n", "output", "=", "self", ".", "linear", ".", "apply", "(", "*", "pack", "(", "output", ")", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.match_functions.ShallowEnergyComputer.input_dim": [[28, 31], ["None"], "methods", ["None"], ["", "@", "input_dim", ".", "setter", "\n", "def", "input_dim", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "children", "[", "1", "]", ".", "input_dim", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.match_functions.ShallowEnergyComputer.output_dim": [[36, 39], ["None"], "methods", ["None"], ["", "@", "output_dim", ".", "setter", "\n", "def", "output_dim", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "children", "[", "1", "]", ".", "output_dim", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.match_functions.SumMatchFunction.__init__": [[43, 48], ["blocks.bricks.base.lazy", "blocks.bricks.Initializable.__init__", "match_functions.ShallowEnergyComputer"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.sampling.ModelInfo.__init__"], ["    ", "@", "lazy", "(", ")", "\n", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "SumMatchFunction", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "shallow", "=", "ShallowEnergyComputer", "(", ")", "\n", "self", ".", "children", "=", "[", "self", ".", "shallow", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.match_functions.SumMatchFunction.apply": [[49, 56], ["match_functions.SumMatchFunction.shallow.apply", "energies.reshape.reshape.reshape", "blocks.utils.pack"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.match_functions.GeneralMatchFunction.apply"], ["", "@", "application", "\n", "def", "apply", "(", "self", ",", "states", ",", "attended", ")", ":", "\n", "        ", "match_vectors", "=", "states", "+", "attended", "\n", "energies", "=", "self", ".", "shallow", ".", "apply", "(", "*", "pack", "(", "match_vectors", ")", ")", "\n", "energies", "=", "energies", ".", "reshape", "(", "\n", "match_vectors", ".", "shape", "[", ":", "-", "1", "]", ",", "ndim", "=", "match_vectors", ".", "ndim", "-", "1", ")", "\n", "return", "energies", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.match_functions.SumMatchFunction.input_dim": [[61, 64], ["None"], "methods", ["None"], ["", "@", "input_dim", ".", "setter", "\n", "def", "input_dim", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "children", "[", "0", "]", ".", "input_dim", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.match_functions.SumMatchFunction.output_dim": [[69, 72], ["None"], "methods", ["None"], ["", "@", "output_dim", ".", "setter", "\n", "def", "output_dim", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "children", "[", "0", "]", ".", "output_dim", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.match_functions.SumMatchFunction_posTag.__init__": [[75, 80], ["blocks.bricks.base.lazy", "blocks.bricks.Initializable.__init__", "match_functions.ShallowEnergyComputer"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.sampling.ModelInfo.__init__"], ["    ", "@", "lazy", "(", ")", "\n", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "SumMatchFunction_posTag", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "shallow", "=", "ShallowEnergyComputer", "(", ")", "\n", "self", ".", "children", "=", "[", "self", ".", "shallow", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.match_functions.SumMatchFunction_posTag.apply": [[81, 88], ["match_functions.SumMatchFunction_posTag.shallow.apply", "energies.reshape.reshape.reshape", "blocks.utils.pack"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.match_functions.GeneralMatchFunction.apply"], ["", "@", "application", "\n", "def", "apply", "(", "self", ",", "states", ",", "attended", ",", "posTag", ")", ":", "\n", "        ", "match_vectors", "=", "states", "+", "attended", "+", "posTag", "\n", "energies", "=", "self", ".", "shallow", ".", "apply", "(", "*", "pack", "(", "match_vectors", ")", ")", "\n", "energies", "=", "energies", ".", "reshape", "(", "\n", "match_vectors", ".", "shape", "[", ":", "-", "1", "]", ",", "ndim", "=", "match_vectors", ".", "ndim", "-", "1", ")", "\n", "return", "energies", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.match_functions.SumMatchFunction_posTag.input_dim": [[93, 96], ["None"], "methods", ["None"], ["", "@", "input_dim", ".", "setter", "\n", "def", "input_dim", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "children", "[", "0", "]", ".", "input_dim", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.match_functions.SumMatchFunction_posTag.output_dim": [[101, 104], ["None"], "methods", ["None"], ["", "@", "output_dim", ".", "setter", "\n", "def", "output_dim", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "children", "[", "0", "]", ".", "output_dim", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.match_functions.CatMatchFunction.__init__": [[108, 113], ["blocks.bricks.base.lazy", "blocks.bricks.Initializable.__init__", "match_functions.ShallowEnergyComputer"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.sampling.ModelInfo.__init__"], ["    ", "@", "lazy", "(", ")", "\n", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "CatMatchFunction", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "shallow", "=", "ShallowEnergyComputer", "(", ")", "\n", "self", ".", "children", "=", "[", "self", ".", "shallow", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.match_functions.CatMatchFunction.apply": [[114, 122], ["theano.tensor.repeat", "theano.tensor.concatenate", "match_functions.CatMatchFunction.shallow.apply", "energies.reshape.reshape.reshape", "blocks.utils.pack"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.match_functions.GeneralMatchFunction.apply"], ["", "@", "application", "\n", "def", "apply", "(", "self", ",", "states", ",", "attended", ")", ":", "\n", "        ", "states", "=", "tensor", ".", "repeat", "(", "states", "[", "None", ",", ":", ",", ":", "]", ",", "attended", ".", "shape", "[", "0", "]", ",", "axis", "=", "0", ")", "\n", "match_vectors", "=", "tensor", ".", "concatenate", "(", "[", "states", ",", "attended", "]", ",", "axis", "=", "2", ")", "\n", "energies", "=", "self", ".", "shallow", ".", "apply", "(", "*", "pack", "(", "match_vectors", ")", ")", "\n", "energies", "=", "energies", ".", "reshape", "(", "\n", "match_vectors", ".", "shape", "[", ":", "-", "1", "]", ",", "ndim", "=", "match_vectors", ".", "ndim", "-", "1", ")", "\n", "return", "energies", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.match_functions.CatMatchFunction.input_dim": [[127, 131], ["None"], "methods", ["None"], ["", "@", "input_dim", ".", "setter", "\n", "def", "input_dim", "(", "self", ",", "value", ")", ":", "\n", "# because we concat to input_dim is match_dim * 2", "\n", "        ", "self", ".", "children", "[", "0", "]", ".", "input_dim", "=", "value", "*", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.match_functions.CatMatchFunction.output_dim": [[136, 139], ["None"], "methods", ["None"], ["", "@", "output_dim", ".", "setter", "\n", "def", "output_dim", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "children", "[", "0", "]", ".", "output_dim", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.match_functions.DotMatchFunction.__init__": [[143, 146], ["blocks.bricks.base.lazy", "blocks.bricks.Initializable.__init__"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.sampling.ModelInfo.__init__"], ["    ", "@", "lazy", "(", ")", "\n", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "DotMatchFunction", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.match_functions.DotMatchFunction.apply": [[147, 153], ["theano.tensor.exp", "theano.tensor.tensordot"], "methods", ["None"], ["", "@", "application", "\n", "def", "apply", "(", "self", ",", "states", ",", "attended", ")", ":", "\n", "        ", "match_vectors", "=", "tensor", ".", "tensordot", "(", "\n", "attended", ",", "states", ",", "axes", "=", "[", "2", ",", "1", "]", ")", "[", ":", ",", "0", ",", ":", "]", "\n", "energies", "=", "tensor", ".", "exp", "(", "match_vectors", ")", "\n", "return", "energies", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.match_functions.GeneralMatchFunction.__init__": [[157, 162], ["blocks.bricks.base.lazy", "blocks.bricks.Initializable.__init__", "blocks.bricks.Linear"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.sampling.ModelInfo.__init__"], ["    ", "@", "lazy", "(", ")", "\n", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "GeneralMatchFunction", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "linear", "=", "Linear", "(", "use_bias", "=", "False", ")", "\n", "self", ".", "children", "=", "[", "self", ".", "linear", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.match_functions.GeneralMatchFunction.apply": [[163, 170], ["match_functions.GeneralMatchFunction.linear.apply", "theano.tensor.exp", "theano.tensor.tensordot", "blocks.utils.pack"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.match_functions.GeneralMatchFunction.apply"], ["", "@", "application", "\n", "def", "apply", "(", "self", ",", "states", ",", "attended", ")", ":", "\n", "        ", "states", "=", "self", ".", "linear", ".", "apply", "(", "*", "pack", "(", "states", ")", ")", "\n", "match_vectors", "=", "tensor", ".", "tensordot", "(", "\n", "attended", ",", "states", ",", "axes", "=", "[", "2", ",", "1", "]", ")", "[", ":", ",", "0", ",", ":", "]", "\n", "energies", "=", "tensor", ".", "exp", "(", "match_vectors", ")", "\n", "return", "energies", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.match_functions.GeneralMatchFunction.input_dim": [[175, 179], ["None"], "methods", ["None"], ["", "@", "input_dim", ".", "setter", "\n", "def", "input_dim", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "children", "[", "0", "]", ".", "input_dim", "=", "value", "\n", "self", ".", "children", "[", "0", "]", ".", "output_dim", "=", "value", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.checkpoint.SaveLoadUtils.path_to_folder": [[18, 21], ["None"], "methods", ["None"], ["    ", "@", "property", "\n", "def", "path_to_folder", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "folder", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.checkpoint.SaveLoadUtils.path_to_parameters": [[22, 25], ["os.path.join"], "methods", ["None"], ["", "@", "property", "\n", "def", "path_to_parameters", "(", "self", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "self", ".", "folder", ",", "'params.npz'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.checkpoint.SaveLoadUtils.path_to_iter_state": [[26, 29], ["os.path.join"], "methods", ["None"], ["", "@", "property", "\n", "def", "path_to_iter_state", "(", "self", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "self", ".", "folder", ",", "'iterations_state.pkl'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.checkpoint.SaveLoadUtils.path_to_log": [[30, 33], ["os.path.join"], "methods", ["None"], ["", "@", "property", "\n", "def", "path_to_log", "(", "self", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "self", ".", "folder", ",", "'log'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.checkpoint.SaveLoadUtils.load_parameter_values": [[34, 44], ["contextlib.closing", "source.items", "numpy.load", "name.replace", "name.replace.startswith"], "methods", ["None"], ["", "def", "load_parameter_values", "(", "self", ",", "path", ")", ":", "\n", "        ", "with", "closing", "(", "numpy", ".", "load", "(", "path", ")", ")", "as", "source", ":", "\n", "            ", "param_values", "=", "{", "}", "\n", "for", "name", ",", "value", "in", "source", ".", "items", "(", ")", ":", "\n", "                ", "if", "name", "!=", "'pkl'", ":", "\n", "                    ", "name_", "=", "name", ".", "replace", "(", "BRICK_DELIMITER", ",", "'/'", ")", "\n", "if", "not", "name_", ".", "startswith", "(", "'/'", ")", ":", "\n", "                        ", "name_", "=", "'/'", "+", "name_", "\n", "", "param_values", "[", "name_", "]", "=", "value", "\n", "", "", "", "return", "param_values", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.checkpoint.SaveLoadUtils.save_parameter_values": [[45, 50], ["name.replace", "open", "numpy.savez", "param_values.items"], "methods", ["None"], ["", "def", "save_parameter_values", "(", "self", ",", "param_values", ",", "path", ")", ":", "\n", "        ", "param_values", "=", "{", "name", ".", "replace", "(", "\"/\"", ",", "\"-\"", ")", ":", "param", "\n", "for", "name", ",", "param", "in", "param_values", ".", "items", "(", ")", "}", "\n", "with", "open", "(", "path", ",", "'wb'", ")", "as", "outfile", ":", "\n", "            ", "numpy", ".", "savez", "(", "outfile", ",", "**", "param_values", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.checkpoint.SaveLoadUtils.set_model_parameters": [[51, 74], ["model.get_parameter_dict", "model.get_parameter_dict.keys", "logger.info", "set", "set", "model.get_parameter_dict.keys", "params.keys", "params_this[].set_value", "logger.warning", "logger.warning", "len", "len", "params_this[].get_value", "params_this[].get_value"], "methods", ["None"], ["", "", "def", "set_model_parameters", "(", "self", ",", "model", ",", "params", ")", ":", "\n", "        ", "params_this", "=", "model", ".", "get_parameter_dict", "(", ")", "\n", "missing", "=", "set", "(", "params_this", ".", "keys", "(", ")", ")", "-", "set", "(", "params", ".", "keys", "(", ")", ")", "\n", "for", "pname", "in", "params_this", ".", "keys", "(", ")", ":", "\n", "            ", "if", "pname", "in", "params", ":", "\n", "                ", "val", "=", "params", "[", "pname", "]", "\n", "if", "params_this", "[", "pname", "]", ".", "get_value", "(", ")", ".", "shape", "!=", "val", ".", "shape", ":", "\n", "                    ", "logger", ".", "warning", "(", "\n", "\" Dimension mismatch {}-{} for {}\"", "\n", ".", "format", "(", "params_this", "[", "pname", "]", ".", "get_value", "(", ")", ".", "shape", ",", "\n", "val", ".", "shape", ",", "pname", ")", ")", "\n", "\n", "", "params_this", "[", "pname", "]", ".", "set_value", "(", "val", ")", "\n", "'''\n                logger.info(\" Loaded to CG {:15}: {}\"\n                            .format(val.shape, pname))\n                '''", "\n", "", "else", ":", "\n", "                ", "logger", ".", "warning", "(", "\n", "\" Parameter does not exist: {}\"", ".", "format", "(", "pname", ")", ")", "\n", "", "", "logger", ".", "info", "(", "\n", "\" Number of parameters loaded for computation graph: {}\"", "\n", ".", "format", "(", "len", "(", "params_this", ")", "-", "len", "(", "missing", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.checkpoint.CheckpointNMT.__init__": [[78, 83], ["kwargs.setdefault", "blocks.extensions.SimpleExtension.__init__"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.sampling.ModelInfo.__init__"], ["    ", "def", "__init__", "(", "self", ",", "saveto", ",", "model_name", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "folder", "=", "saveto", "\n", "self", ".", "model_name", "=", "model_name", "\n", "kwargs", ".", "setdefault", "(", "\"after_training\"", ",", "True", ")", "\n", "super", "(", "CheckpointNMT", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.checkpoint.CheckpointNMT.enhance_path": [[84, 86], ["str"], "methods", ["None"], ["", "def", "enhance_path", "(", "self", ",", "main_loop", ",", "path", ")", ":", "\n", "        ", "return", "path", "+", "'.'", "+", "str", "(", "main_loop", ".", "status", "[", "'iterations_done'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.checkpoint.CheckpointNMT.dump_parameters": [[87, 92], ["main_loop.model.get_parameter_values", "checkpoint.CheckpointNMT.save_parameter_values", "checkpoint.CheckpointNMT.enhance_path"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.checkpoint.SaveLoadUtils.save_parameter_values", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.checkpoint.CheckpointNMT.enhance_path"], ["", "def", "dump_parameters", "(", "self", ",", "main_loop", ")", ":", "\n", "        ", "params_to_save", "=", "main_loop", ".", "model", ".", "get_parameter_values", "(", ")", "\n", "self", ".", "save_parameter_values", "(", "params_to_save", ",", "\n", "self", ".", "enhance_path", "(", "main_loop", ",", "\n", "self", ".", "path_to_parameters", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.checkpoint.CheckpointNMT.dump_iteration_state": [[93, 96], ["blocks.serialization.secure_dump", "checkpoint.CheckpointNMT.enhance_path"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.checkpoint.CheckpointNMT.enhance_path"], ["", "def", "dump_iteration_state", "(", "self", ",", "main_loop", ")", ":", "\n", "        ", "secure_dump", "(", "main_loop", ".", "iteration_state", ",", "\n", "self", ".", "enhance_path", "(", "main_loop", ",", "self", ".", "path_to_iter_state", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.checkpoint.CheckpointNMT.dump_log": [[97, 101], ["blocks.serialization.secure_dump", "checkpoint.CheckpointNMT.enhance_path"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.checkpoint.CheckpointNMT.enhance_path"], ["", "def", "dump_log", "(", "self", ",", "main_loop", ")", ":", "\n", "        ", "secure_dump", "(", "main_loop", ".", "log", ",", "\n", "self", ".", "enhance_path", "(", "main_loop", ",", "self", ".", "path_to_log", ")", ",", "\n", "cPickle", ".", "dump", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.checkpoint.CheckpointNMT.dump": [[102, 115], ["print", "logger.info", "time.time", "logger.info", "checkpoint.CheckpointNMT.dump_parameters", "logger.info", "checkpoint.CheckpointNMT.dump_iteration_state", "logger.info", "checkpoint.CheckpointNMT.dump_log", "logger.info", "os.path.exists", "os.mkdir", "time.time"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.sampling.BleuValidator.dump_parameters", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.checkpoint.CheckpointNMT.dump_iteration_state", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.checkpoint.CheckpointNMT.dump_log"], ["", "def", "dump", "(", "self", ",", "main_loop", ")", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "path_to_folder", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "self", ".", "path_to_folder", ")", "\n", "", "print", "(", "\"\"", ")", "\n", "logger", ".", "info", "(", "\" Saving model: \"", "+", "self", ".", "model_name", ")", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "info", "(", "\" Saving parameters\"", ")", "\n", "self", ".", "dump_parameters", "(", "main_loop", ")", "\n", "logger", ".", "info", "(", "\" Saving iteration state\"", ")", "\n", "self", ".", "dump_iteration_state", "(", "main_loop", ")", "\n", "logger", ".", "info", "(", "\" Saving log\"", ")", "\n", "self", ".", "dump_log", "(", "main_loop", ")", "\n", "logger", ".", "info", "(", "\" Model saved, took {} seconds.\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.checkpoint.CheckpointNMT.do": [[116, 132], ["checkpoint.CheckpointNMT.dump", "checkpoint.CheckpointNMT.enhance_path", "checkpoint.CheckpointNMT.enhance_path", "checkpoint.CheckpointNMT.enhance_path"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.checkpoint.CheckpointNMT.dump", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.checkpoint.CheckpointNMT.enhance_path", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.checkpoint.CheckpointNMT.enhance_path", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.checkpoint.CheckpointNMT.enhance_path"], ["", "def", "do", "(", "self", ",", "callback_name", ",", "*", "args", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "self", ".", "dump", "(", "self", ".", "main_loop", ")", "\n", "", "except", "Exception", ":", "\n", "            ", "raise", "\n", "", "finally", ":", "\n", "            ", "'''\n            already_saved_to = self.main_loop.log.current_row.get(SAVED_TO, ())\n            self.main_loop.log.current_row[SAVED_TO] = (already_saved_to +\n                                                        (self.path_to_folder +\n                                                            'params.npz',))\n            '''", "\n", "self", ".", "main_loop", ".", "log", ".", "current_row", "[", "SAVED_TO", "]", "=", "[", "\n", "self", ".", "enhance_path", "(", "self", ".", "main_loop", ",", "self", ".", "path_to_parameters", ")", ",", "\n", "self", ".", "enhance_path", "(", "self", ".", "main_loop", ",", "self", ".", "path_to_iter_state", ")", ",", "\n", "self", ".", "enhance_path", "(", "self", ".", "main_loop", ",", "self", ".", "path_to_log", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.checkpoint.LoadNMT.__init__": [[136, 139], ["blocks.extensions.TrainingExtension.__init__"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.sampling.ModelInfo.__init__"], ["    ", "def", "__init__", "(", "self", ",", "saveto", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "folder", "=", "saveto", "\n", "super", "(", "LoadNMT", ",", "self", ")", ".", "__init__", "(", "saveto", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.checkpoint.LoadNMT.before_training": [[140, 144], ["checkpoint.LoadNMT.load_last_model", "os.path.exists"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.checkpoint.LoadNMT.load_last_model"], ["", "def", "before_training", "(", "self", ")", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "path_to_folder", ")", ":", "\n", "            ", "return", "\n", "", "self", ".", "load_last_model", "(", "self", ".", "main_loop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.checkpoint.LoadNMT.load_parameters": [[145, 147], ["checkpoint.LoadNMT.load_parameter_values"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.checkpoint.SaveLoadUtils.load_parameter_values"], ["", "def", "load_parameters", "(", "self", ",", "path", ")", ":", "\n", "        ", "return", "self", ".", "load_parameter_values", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.checkpoint.LoadNMT.load_parameters_default": [[148, 150], ["checkpoint.LoadNMT.load_parameter_values"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.checkpoint.SaveLoadUtils.load_parameter_values"], ["", "def", "load_parameters_default", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "load_parameter_values", "(", "self", ".", "path_to_parameters", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.checkpoint.LoadNMT.load_iteration_state": [[151, 154], ["open", "blocks.serialization.load"], "methods", ["None"], ["", "def", "load_iteration_state", "(", "self", ",", "path", ")", ":", "\n", "        ", "with", "open", "(", "path", ",", "\"rb\"", ")", "as", "source", ":", "\n", "            ", "return", "load", "(", "source", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.checkpoint.LoadNMT.load_log": [[155, 158], ["open", "six.moves.cPickle.load"], "methods", ["None"], ["", "", "def", "load_log", "(", "self", ",", "path", ")", ":", "\n", "        ", "with", "open", "(", "path", ",", "\"rb\"", ")", "as", "source", ":", "\n", "            ", "return", "cPickle", ".", "load", "(", "source", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.checkpoint.LoadNMT.get_last_save": [[159, 166], ["len", "int", "str", "max", "len"], "methods", ["None"], ["", "", "def", "get_last_save", "(", "self", ",", "saves", ",", "prefix", ")", ":", "\n", "        ", "if", "len", "(", "saves", ")", "==", "0", ":", "\n", "            ", "return", "None", "\n", "", "if", "prefix", "in", "saves", ":", "\n", "            ", "return", "prefix", "\n", "", "nums", "=", "[", "int", "(", "s", "[", "len", "(", "prefix", ")", "+", "1", ":", "]", ")", "for", "s", "in", "saves", "]", "\n", "return", "prefix", "+", "'.'", "+", "str", "(", "max", "(", "nums", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.checkpoint.LoadNMT.load_last_model": [[167, 199], ["os.listdir", "checkpoint.LoadNMT.get_last_save", "checkpoint.LoadNMT.get_last_save", "checkpoint.LoadNMT.get_last_save", "logger.info", "checkpoint.LoadNMT.load_parameters", "checkpoint.LoadNMT.set_model_parameters", "logger.info", "checkpoint.LoadNMT.load_iteration_state", "logger.info", "checkpoint.LoadNMT.load_log", "int", "f.startswith", "f.startswith", "f.startswith", "os.path.join", "os.path.join", "os.path.join", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.checkpoint.LoadNMT.get_last_save", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.checkpoint.LoadNMT.get_last_save", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.checkpoint.LoadNMT.get_last_save", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.checkpoint.LoadNMT.load_parameters", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.checkpoint.SaveLoadUtils.set_model_parameters", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.checkpoint.LoadNMT.load_iteration_state", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.checkpoint.LoadNMT.load_log"], ["", "def", "load_last_model", "(", "self", ",", "main_loop", ")", ":", "\n", "        ", "param_prefix", "=", "'params.npz'", "\n", "state_prefix", "=", "'iterations_state.pkl'", "\n", "log_prefix", "=", "'log'", "\n", "\n", "files", "=", "os", ".", "listdir", "(", "self", ".", "folder", ")", "\n", "params", "=", "[", "f", "for", "f", "in", "files", "if", "f", ".", "startswith", "(", "param_prefix", ")", "]", "\n", "states", "=", "[", "f", "for", "f", "in", "files", "if", "f", ".", "startswith", "(", "state_prefix", ")", "]", "\n", "logs", "=", "[", "f", "for", "f", "in", "files", "if", "f", ".", "startswith", "(", "log_prefix", ")", "]", "\n", "\n", "param_name", "=", "self", ".", "get_last_save", "(", "params", ",", "param_prefix", ")", "\n", "if", "param_name", "is", "not", "None", ":", "\n", "            ", "logger", ".", "info", "(", "\" Loading params from \"", "+", "param_name", ")", "\n", "params_all", "=", "self", ".", "load_parameters", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "path_to_folder", ",", "param_name", ")", ")", "\n", "self", ".", "set_model_parameters", "(", "main_loop", ".", "model", ",", "params_all", ")", "\n", "\n", "", "state_name", "=", "self", ".", "get_last_save", "(", "states", ",", "state_prefix", ")", "\n", "if", "state_name", "is", "not", "None", ":", "\n", "            ", "logger", ".", "info", "(", "\" Loading state from \"", "+", "state_name", ")", "\n", "main_loop", ".", "iteration_state", "=", "self", ".", "load_iteration_state", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "path_to_folder", ",", "state_name", ")", ")", "\n", "\n", "", "log_name", "=", "self", ".", "get_last_save", "(", "logs", ",", "log_prefix", ")", "\n", "if", "log_name", "is", "not", "None", ":", "\n", "            ", "logger", ".", "info", "(", "\" Loading log from \"", "+", "log_name", ")", "\n", "main_loop", ".", "log", "=", "self", ".", "load_log", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "path_to_folder", ",", "log_name", ")", ")", "\n", "\n", "", "if", "param_name", "is", "not", "None", "and", "len", "(", "param_name", ")", "<", "len", "(", "param_prefix", ")", ":", "\n", "            ", "main_loop", ".", "log", ".", "current_row", "[", "LOADED_FROM", "]", "=", "int", "(", "param_name", "[", "len", "(", "param_prefix", ")", "+", "1", ":", "]", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.sampling.SamplingBase._get_attr_rec": [[25, 28], ["hasattr", "sampling.SamplingBase._get_attr_rec", "getattr"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.sampling.SamplingBase._get_attr_rec"], ["def", "_get_attr_rec", "(", "self", ",", "obj", ",", "attr", ")", ":", "\n", "        ", "return", "self", ".", "_get_attr_rec", "(", "getattr", "(", "obj", ",", "attr", ")", ",", "attr", ")", "if", "hasattr", "(", "obj", ",", "attr", ")", "else", "obj", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.sampling.SamplingBase._get_true_length": [[29, 34], ["seq.tolist().index", "len", "seq.tolist"], "methods", ["None"], ["", "def", "_get_true_length", "(", "self", ",", "seq", ",", "vocab", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "return", "seq", ".", "tolist", "(", ")", ".", "index", "(", "vocab", "[", "'</S>'", "]", ")", "+", "1", "\n", "", "except", "ValueError", ":", "\n", "            ", "return", "len", "(", "seq", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.sampling.SamplingBase._oov_to_unk": [[35, 37], ["None"], "methods", ["None"], ["", "", "def", "_oov_to_unk", "(", "self", ",", "seq", ",", "vocab_size", ",", "unk_idx", ")", ":", "\n", "        ", "return", "[", "x", "if", "x", "<", "vocab_size", "else", "unk_idx", "for", "x", "in", "seq", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.sampling.SamplingBase._idx_to_sent": [[38, 40], ["ivocab.get"], "methods", ["None"], ["", "def", "_idx_to_sent", "(", "self", ",", "seq", ",", "ivocab", ")", ":", "\n", "        ", "return", "\" \"", ".", "join", "(", "[", "ivocab", ".", "get", "(", "idx", ",", "\"<UNK>\"", ")", "for", "idx", "in", "seq", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.sampling.SamplingBase._idx_to_word": [[41, 44], ["ivocab.get"], "methods", ["None"], ["", "def", "_idx_to_word", "(", "self", ",", "seq", ",", "ivocab", ")", ":", "\n", "# return \" \".join([ivocab.get(idx, \"<UNK>\") for idx in seq])", "\n", "        ", "return", "[", "ivocab", ".", "get", "(", "idx", ",", "\"<UNK>\"", ")", "for", "idx", "in", "seq", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.sampling.Sampler.__init__": [[49, 64], ["blocks.extensions.SimpleExtension.__init__", "model.get_theano_function"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.sampling.ModelInfo.__init__"], ["def", "__init__", "(", "self", ",", "model", ",", "data_stream", ",", "model_name", ",", "hook_samples", "=", "1", ",", "\n", "src_vocab", "=", "None", ",", "trg_vocab", "=", "None", ",", "src_ivocab", "=", "None", ",", "\n", "trg_ivocab", "=", "None", ",", "src_vocab_size", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Sampler", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "hook_samples", "=", "hook_samples", "\n", "self", ".", "data_stream", "=", "data_stream", "\n", "self", ".", "model_name", "=", "model_name", "\n", "self", ".", "src_vocab", "=", "src_vocab", "\n", "self", ".", "trg_vocab", "=", "trg_vocab", "\n", "self", ".", "src_ivocab", "=", "src_ivocab", "\n", "self", ".", "trg_ivocab", "=", "trg_ivocab", "\n", "self", ".", "src_vocab_size", "=", "src_vocab_size", "\n", "self", ".", "is_synced", "=", "False", "\n", "self", ".", "sampling_fn", "=", "model", ".", "get_theano_function", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.sampling.Sampler.do": [[65, 123], ["sampling.Sampler._get_attr_rec", "min", "numpy.random.choice", "print", "range", "len", "sampling.Sampler._get_true_length", "sampling.Sampler._get_true_length", "sampling.Sampler.sampling_fn", "outputs.flatten.flatten.flatten", "sampling.Sampler._get_true_length", "print", "print", "print", "print", "print", "print", "sampling.Sampler._idx_to_sent", "sampling.Sampler._idx_to_sent", "sampling.Sampler._idx_to_sent", "costs[].sum", "sampling.Sampler.src_vocab.items", "sampling.Sampler.trg_vocab.items"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.sampling.SamplingBase._get_attr_rec", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.sampling.SamplingBase._get_true_length", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.sampling.SamplingBase._get_true_length", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.sampling.SamplingBase._get_true_length", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.sampling.SamplingBase._idx_to_sent", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.sampling.SamplingBase._idx_to_sent", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.sampling.SamplingBase._idx_to_sent"], ["", "def", "do", "(", "self", ",", "which_callback", ",", "*", "args", ")", ":", "\n", "\n", "# Get dictionaries, this may not be the practical way", "\n", "        ", "sources", "=", "self", ".", "_get_attr_rec", "(", "self", ".", "main_loop", ",", "'data_stream'", ")", "\n", "\n", "# Load vocabularies and invert if necessary", "\n", "# WARNING: Source and target indices from data stream", "\n", "#  can be different", "\n", "if", "not", "self", ".", "src_vocab", ":", "\n", "            ", "self", ".", "src_vocab", "=", "sources", ".", "data_streams", "[", "0", "]", ".", "dataset", ".", "dictionary", "\n", "", "if", "not", "self", ".", "trg_vocab", ":", "\n", "            ", "self", ".", "trg_vocab", "=", "sources", ".", "data_streams", "[", "1", "]", ".", "dataset", ".", "dictionary", "\n", "", "if", "not", "self", ".", "src_ivocab", ":", "\n", "            ", "self", ".", "src_ivocab", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "self", ".", "src_vocab", ".", "items", "(", ")", "}", "\n", "", "if", "not", "self", ".", "trg_ivocab", ":", "\n", "            ", "self", ".", "trg_ivocab", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "self", ".", "trg_vocab", ".", "items", "(", ")", "}", "\n", "", "if", "not", "self", ".", "src_vocab_size", ":", "\n", "            ", "self", ".", "src_vocab_size", "=", "len", "(", "self", ".", "src_vocab", ")", "\n", "\n", "# Randomly select source samples from the current batch", "\n", "# WARNING: Source and target indices from data stream", "\n", "#  can be different", "\n", "", "batch", "=", "args", "[", "0", "]", "\n", "batch_size", "=", "batch", "[", "'source'", "]", ".", "shape", "[", "0", "]", "\n", "hook_samples", "=", "min", "(", "batch_size", ",", "self", ".", "hook_samples", ")", "\n", "\n", "# TODO: this is problematic for boundary conditions, eg. last batch", "\n", "sample_idx", "=", "numpy", ".", "random", ".", "choice", "(", "\n", "batch_size", ",", "hook_samples", ",", "replace", "=", "False", ")", "\n", "src_batch", "=", "batch", "[", "self", ".", "main_loop", ".", "data_stream", ".", "mask_sources", "[", "0", "]", "]", "\n", "trg_batch", "=", "batch", "[", "self", ".", "main_loop", ".", "data_stream", ".", "mask_sources", "[", "1", "]", "]", "\n", "\n", "input_", "=", "src_batch", "[", "sample_idx", ",", ":", "]", "\n", "target_", "=", "trg_batch", "[", "sample_idx", ",", ":", "]", "\n", "\n", "# Sample", "\n", "print", "(", ")", "\n", "for", "i", "in", "range", "(", "hook_samples", ")", ":", "\n", "            ", "input_length", "=", "self", ".", "_get_true_length", "(", "input_", "[", "i", "]", ",", "self", ".", "src_vocab", ")", "\n", "target_length", "=", "self", ".", "_get_true_length", "(", "target_", "[", "i", "]", ",", "self", ".", "trg_vocab", ")", "\n", "\n", "inp", "=", "input_", "[", "i", ",", ":", "input_length", "]", "\n", "_1", ",", "outputs", ",", "_2", ",", "_3", ",", "costs", "=", "(", "self", ".", "sampling_fn", "(", "inp", "[", "None", ",", ":", "]", ")", ")", "\n", "outputs", "=", "outputs", ".", "flatten", "(", ")", "\n", "costs", "=", "costs", ".", "T", "\n", "\n", "sample_length", "=", "self", ".", "_get_true_length", "(", "outputs", ",", "self", ".", "trg_vocab", ")", "\n", "\n", "print", "(", "\"Sampling: \"", "+", "self", ".", "model_name", ")", "\n", "\n", "print", "(", "\"Input : \"", ",", "self", ".", "_idx_to_sent", "(", "input_", "[", "i", "]", "[", ":", "input_length", "]", ",", "\n", "self", ".", "src_ivocab", ")", ")", "\n", "print", "(", "\"Target: \"", ",", "self", ".", "_idx_to_sent", "(", "target_", "[", "i", "]", "[", ":", "target_length", "]", ",", "\n", "self", ".", "trg_ivocab", ")", ")", "\n", "print", "(", "\"Sample: \"", ",", "self", ".", "_idx_to_sent", "(", "outputs", "[", ":", "sample_length", "]", ",", "\n", "self", ".", "trg_ivocab", ")", ")", "\n", "print", "(", "\"Sample cost: \"", ",", "costs", "[", ":", "sample_length", "]", ".", "sum", "(", ")", ")", "\n", "print", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.sampling.perplexityValidation.__init__": [[127, 155], ["blocks.extensions.SimpleExtension.__init__", "model.get_theano_function", "search.BeamSearch"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.sampling.ModelInfo.__init__"], ["def", "__init__", "(", "self", ",", "source_sentence", ",", "samples", ",", "model", ",", "data_stream", ",", "model_name", ",", "config", ",", "\n", "src_vocab", "=", "None", ",", "n_best", "=", "1", ",", "track_n_models", "=", "1", ",", "trg_ivocab", "=", "None", ",", "\n", "patience", "=", "10", ",", "normalize", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "perplexityValidation", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "data_stream", "=", "data_stream", "\n", "self", ".", "model_name", "=", "model_name", "\n", "self", ".", "src_vocab", "=", "src_vocab", "\n", "self", ".", "trg_ivocab", "=", "trg_ivocab", "\n", "self", ".", "is_synced", "=", "False", "\n", "self", ".", "sampling_fn", "=", "model", ".", "get_theano_function", "(", ")", "\n", "\n", "self", ".", "source_sentence", "=", "source_sentence", "\n", "self", ".", "samples", "=", "samples", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "n_best", "=", "n_best", "\n", "self", ".", "normalize", "=", "normalize", "\n", "self", ".", "patience", "=", "patience", "\n", "\n", "# Helpers", "\n", "self", ".", "vocab", "=", "data_stream", ".", "dataset", ".", "dictionary", "\n", "self", ".", "trg_ivocab", "=", "trg_ivocab", "\n", "self", ".", "unk_sym", "=", "data_stream", ".", "dataset", ".", "unk_token", "\n", "self", ".", "eos_sym", "=", "data_stream", ".", "dataset", ".", "eos_token", "\n", "self", ".", "unk_idx", "=", "self", ".", "vocab", "[", "self", ".", "unk_sym", "]", "\n", "self", ".", "eos_idx", "=", "self", ".", "vocab", "[", "self", ".", "eos_sym", "]", "\n", "self", ".", "src_eos_idx", "=", "config", "[", "'src_vocab_size'", "]", "-", "1", "\n", "self", ".", "beam_search", "=", "BeamSearch", "(", "samples", "=", "samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.sampling.perplexityValidation.do": [[156, 162], ["print", "sampling.perplexityValidation._evaluate_model", "print", "str"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.sampling.BleuValidator._evaluate_model"], ["", "def", "do", "(", "self", ",", "which_callback", ",", "*", "args", ")", ":", "\n", "\n", "        ", "print", "(", ")", "\n", "# Evaluate and save if necessary", "\n", "cost", "=", "self", ".", "_evaluate_model", "(", ")", "\n", "print", "(", "\"Average validation cost: \"", "+", "str", "(", "cost", ")", ")", ";", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.sampling.perplexityValidation._evaluate_model": [[163, 214], ["logger.info", "sampling.perplexityValidation.data_stream.get_epoch_iterator", "progressbar.ProgressBar().start", "enumerate", "progressbar.ProgressBar().start.finish", "sampling.perplexityValidation.data_stream.reset", "sampling.perplexityValidation._get_attr_rec", "sampling.perplexityValidation._oov_to_unk", "numpy.tile", "sampling.perplexityValidation.beam_search.search", "progressbar.ProgressBar().start.update", "progressbar.ProgressBar", "numpy.array", "numpy.argsort", "sampling.perplexityValidation._idx_to_word", "trg_vocab.items", "logger.info", "len", "len"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.sampling.SamplingBase._get_attr_rec", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.sampling.SamplingBase._oov_to_unk", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.search.BeamSearch.search", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.sampling.SamplingBase._idx_to_word"], ["", "def", "_evaluate_model", "(", "self", ")", ":", "\n", "\n", "        ", "logger", ".", "info", "(", "\"Started Validation: \"", ")", "\n", "\n", "if", "not", "self", ".", "trg_ivocab", ":", "\n", "            ", "sources", "=", "self", ".", "_get_attr_rec", "(", "self", ".", "main_loop", ",", "'data_stream'", ")", "\n", "trg_vocab", "=", "sources", ".", "data_streams", "[", "1", "]", ".", "dataset", ".", "dictionary", "\n", "self", ".", "trg_ivocab", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "trg_vocab", ".", "items", "(", ")", "}", "\n", "\n", "", "ts", "=", "self", ".", "data_stream", ".", "get_epoch_iterator", "(", ")", "\n", "total_cost", "=", "0.0", "\n", "\n", "#pbar = ProgressBar(max_value=len(ts)).start()#modified", "\n", "pbar", "=", "ProgressBar", "(", "max_value", "=", "20036", ")", ".", "start", "(", ")", ";", "\n", "for", "i", ",", "line", "in", "enumerate", "(", "ts", ")", ":", "\n", "            ", "seq", "=", "self", ".", "_oov_to_unk", "(", "\n", "line", "[", "0", "]", ",", "self", ".", "config", "[", "'src_vocab_size'", "]", ",", "self", ".", "unk_idx", ")", "\n", "input_", "=", "numpy", ".", "tile", "(", "seq", ",", "(", "self", ".", "config", "[", "'beam_size'", "]", ",", "1", ")", ")", "\n", "\n", "# draw sample, checking to ensure we don't get an empty string back", "\n", "trans", ",", "costs", ",", "attendeds", ",", "weights", "=", "self", ".", "beam_search", ".", "search", "(", "\n", "input_values", "=", "{", "self", ".", "source_sentence", ":", "input_", "}", ",", "\n", "max_length", "=", "3", "*", "len", "(", "seq", ")", ",", "eol_symbol", "=", "self", ".", "src_eos_idx", ",", "\n", "ignore_first_eol", "=", "True", ")", "\n", "\n", "# normalize costs according to the sequence lengths", "\n", "if", "self", ".", "normalize", ":", "\n", "                ", "lengths", "=", "numpy", ".", "array", "(", "[", "len", "(", "s", ")", "for", "s", "in", "trans", "]", ")", "\n", "costs", "=", "costs", "/", "lengths", "\n", "\n", "", "best", "=", "numpy", ".", "argsort", "(", "costs", ")", "[", "0", "]", "\n", "try", ":", "\n", "                ", "total_cost", "+=", "costs", "[", "best", "]", "\n", "trans_out", "=", "trans", "[", "best", "]", "\n", "trans_out", "=", "self", ".", "_idx_to_word", "(", "trans_out", ",", "self", ".", "trg_ivocab", ")", "\n", "", "except", "ValueError", ":", "\n", "                ", "logger", ".", "info", "(", "\n", "\"Can NOT find a translation for line: {}\"", ".", "format", "(", "i", "+", "1", ")", ")", "\n", "trans_out", "=", "'<UNK>'", "\n", "\n", "", "pbar", ".", "update", "(", "i", "+", "1", ")", "\n", "\n", "", "pbar", ".", "finish", "(", ")", "\n", "self", ".", "data_stream", ".", "reset", "(", ")", "\n", "\n", "# run afterprocess", "\n", "# self.ap.main()", "\n", "self", ".", "main_loop", ".", "log", ".", "current_row", "[", "'validation_cost'", "]", "=", "total_cost", "\n", "\n", "return", "total_cost", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.sampling.pplValidation.__init__": [[218, 236], ["blocks.extensions.SimpleExtension.__init__"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.sampling.ModelInfo.__init__"], ["def", "__init__", "(", "self", ",", "source_sentence", ",", "target_sentence", ",", "model", ",", "data_stream", ",", "model_name", ",", "config", ",", "\n", "src_vocab", "=", "None", ",", "n_best", "=", "1", ",", "track_n_models", "=", "1", ",", "trg_ivocab", "=", "None", ",", "\n", "patience", "=", "10", ",", "normalize", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "pplValidation", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "data_stream", "=", "data_stream", "\n", "self", ".", "model_name", "=", "model_name", "\n", "self", ".", "src_vocab", "=", "src_vocab", "\n", "self", ".", "trg_ivocab", "=", "trg_ivocab", "\n", "self", ".", "is_synced", "=", "False", "\n", "self", ".", "sampling_fn", "=", "model", "\n", "\n", "self", ".", "source_sentence", "=", "source_sentence", "\n", "self", ".", "target_sentence", "=", "target_sentence", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "n_best", "=", "n_best", "\n", "self", ".", "normalize", "=", "normalize", "\n", "self", ".", "patience", "=", "patience", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.sampling.pplValidation.do": [[238, 244], ["print", "sampling.pplValidation._evaluate_model", "print", "str"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.sampling.BleuValidator._evaluate_model"], ["", "def", "do", "(", "self", ",", "which_callback", ",", "*", "args", ")", ":", "\n", "\n", "        ", "print", "(", ")", "\n", "# Evaluate and save if necessary", "\n", "cost", "=", "self", ".", "_evaluate_model", "(", ")", "\n", "print", "(", "\"Average validation cost: \"", "+", "str", "(", "cost", ")", ")", ";", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.sampling.pplValidation._evaluate_model": [[245, 268], ["logger.info", "sampling.pplValidation.data_stream.get_epoch_iterator", "progressbar.ProgressBar().start", "enumerate", "progressbar.ProgressBar().start.finish", "sampling.pplValidation.data_stream.reset", "sampling.pplValidation.model", "sampling.pplValidation.sum", "progressbar.ProgressBar().start.update", "progressbar.ProgressBar"], "methods", ["None"], ["", "def", "_evaluate_model", "(", "self", ")", ":", "\n", "\n", "        ", "logger", ".", "info", "(", "\"Started Validation: \"", ")", "\n", "\n", "ts", "=", "self", ".", "data_stream", ".", "get_epoch_iterator", "(", ")", "\n", "total_cost", "=", "0.0", "\n", "\n", "#pbar = ProgressBar(max_value=len(ts)).start()#modified", "\n", "pbar", "=", "ProgressBar", "(", "max_value", "=", "20050", ")", ".", "start", "(", ")", ";", "\n", "for", "i", ",", "(", "src", ",", "src_mask", ",", "trg", ",", "trg_mask", ")", "in", "enumerate", "(", "ts", ")", ":", "\n", "            ", "costs", "=", "self", ".", "model", "(", "*", "[", "trg", ",", "trg_mask", ",", "src", ",", "src_mask", "]", ")", "\n", "cost", "=", "costs", ".", "sum", "(", ")", "\n", "total_cost", "+=", "costs", "\n", "pbar", ".", "update", "(", "i", "+", "1", ")", "\n", "", "total_cost", "/=", "20050", ";", "\n", "pbar", ".", "finish", "(", ")", "\n", "self", ".", "data_stream", ".", "reset", "(", ")", "\n", "\n", "# run afterprocess", "\n", "# self.ap.main()", "\n", "self", ".", "main_loop", ".", "log", ".", "current_row", "[", "'validation_cost'", "]", "=", "total_cost", "\n", "\n", "return", "total_cost", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.sampling.BleuValidator.__init__": [[271, 305], ["blocks.extensions.SimpleExtension.__init__", "search.BeamSearch", "afterprocess.afterprocesser", "os.path.exists", "os.makedirs"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.sampling.ModelInfo.__init__"], ["    ", "def", "__init__", "(", "self", ",", "source_sentence", ",", "samples", ",", "model", ",", "data_stream", ",", "\n", "config", ",", "n_best", "=", "1", ",", "track_n_models", "=", "1", ",", "trg_ivocab", "=", "None", ",", "\n", "patience", "=", "10", ",", "normalize", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "BleuValidator", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "source_sentence", "=", "source_sentence", "\n", "self", ".", "samples", "=", "samples", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "data_stream", "=", "data_stream", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "n_best", "=", "n_best", "\n", "self", ".", "track_n_models", "=", "track_n_models", "\n", "self", ".", "normalize", "=", "normalize", "\n", "self", ".", "patience", "=", "patience", "\n", "\n", "# Helpers", "\n", "self", ".", "vocab", "=", "data_stream", ".", "dataset", ".", "dictionary", "\n", "self", ".", "trg_ivocab", "=", "trg_ivocab", "\n", "self", ".", "unk_sym", "=", "data_stream", ".", "dataset", ".", "unk_token", "\n", "self", ".", "eos_sym", "=", "data_stream", ".", "dataset", ".", "eos_token", "\n", "self", ".", "unk_idx", "=", "self", ".", "vocab", "[", "self", ".", "unk_sym", "]", "\n", "self", ".", "eos_idx", "=", "self", ".", "vocab", "[", "self", ".", "eos_sym", "]", "\n", "self", ".", "src_eos_idx", "=", "config", "[", "'src_vocab_size'", "]", "-", "1", "\n", "self", ".", "best_models", "=", "[", "]", "\n", "self", ".", "beam_search", "=", "BeamSearch", "(", "samples", "=", "samples", ")", "\n", "self", ".", "multibleu_cmd", "=", "[", "'perl'", ",", "self", ".", "config", "[", "'bleu_script'", "]", ",", "\n", "self", ".", "config", "[", "'val_set_target'", "]", ",", "'<'", "]", "\n", "self", ".", "compbleu_cmd", "=", "[", "self", ".", "config", "[", "'bleu_script_1'", "]", ",", "\n", "self", ".", "config", "[", "'val_set_target'", "]", ",", "\n", "self", ".", "config", "[", "'val_output_repl'", "]", "]", "\n", "self", ".", "ap", "=", "afterprocesser", "(", "config", ")", "\n", "\n", "# Create saving directory if it does not exist", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "config", "[", "'saveto'", "]", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "config", "[", "'saveto'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.sampling.BleuValidator.do": [[306, 317], ["sampling.BleuValidator._evaluate_model", "sampling.BleuValidator._save_model", "sampling.BleuValidator._stop"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.sampling.BleuValidator._evaluate_model", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.sampling.BleuValidator._save_model", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.sampling.BleuValidator._stop"], ["", "", "def", "do", "(", "self", ",", "which_callback", ",", "*", "args", ")", ":", "\n", "\n", "# Track validation burn in", "\n", "        ", "if", "self", ".", "main_loop", ".", "status", "[", "'iterations_done'", "]", "<=", "self", ".", "config", "[", "'val_burn_in'", "]", ":", "\n", "            ", "return", "\n", "\n", "# Evaluate and save if necessary", "\n", "", "bleu", ",", "cost", "=", "self", ".", "_evaluate_model", "(", ")", "\n", "self", ".", "_save_model", "(", "bleu", ",", "cost", ")", "\n", "self", ".", "_stop", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.sampling.BleuValidator._stop": [[318, 326], ["enumerate"], "methods", ["None"], ["", "def", "_stop", "(", "self", ")", ":", "\n", "        ", "def", "get_last_max", "(", "l", ")", ":", "\n", "            ", "t", "=", "0", "\n", "r", "=", "0", "\n", "for", "i", ",", "j", "in", "enumerate", "(", "l", ")", ":", "\n", "                ", "if", "j", ">=", "t", ":", "\n", "                    ", "r", "=", "i", "\n", "", "", "return", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.sampling.BleuValidator._evaluate_model": [[327, 404], ["logger.info", "sampling.BleuValidator.data_stream.get_epoch_iterator", "open().readlines", "open", "progressbar.ProgressBar().start", "enumerate", "progressbar.ProgressBar().start.finish", "open.close", "cPickle.dump", "sampling.BleuValidator.data_stream.reset", "subprocess.Popen", "subprocess.Popen.terminate", "re.match", "logger.info", "sampling.BleuValidator._get_attr_rec", "zip", "line_raw.split", "sampling.BleuValidator._oov_to_unk", "numpy.tile", "sampling.BleuValidator.beam_search.search", "saved_weights.append", "print", "progressbar.ProgressBar().start.update", "open", "subprocess.Popen.stdout.readline", "float", "open", "progressbar.ProgressBar", "numpy.array", "numpy.argsort", "sampling.BleuValidator._idx_to_word", "str", "trg_vocab.items", "logger.info", "re.match.group", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.checkpoint.CheckpointNMT.dump", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.sampling.SamplingBase._get_attr_rec", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.sampling.SamplingBase._oov_to_unk", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.search.BeamSearch.search", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.sampling.SamplingBase._idx_to_word"], ["", "", "def", "_evaluate_model", "(", "self", ")", ":", "\n", "\n", "        ", "logger", ".", "info", "(", "\"Started Validation: \"", ")", "\n", "\n", "if", "not", "self", ".", "trg_ivocab", ":", "\n", "            ", "sources", "=", "self", ".", "_get_attr_rec", "(", "self", ".", "main_loop", ",", "'data_stream'", ")", "\n", "trg_vocab", "=", "sources", ".", "data_streams", "[", "1", "]", ".", "dataset", ".", "dictionary", "\n", "self", ".", "trg_ivocab", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "trg_vocab", ".", "items", "(", ")", "}", "\n", "\n", "", "ts", "=", "self", ".", "data_stream", ".", "get_epoch_iterator", "(", ")", "\n", "rts", "=", "open", "(", "self", ".", "config", "[", "'val_set_source'", "]", ")", ".", "readlines", "(", ")", "\n", "ftrans_original", "=", "open", "(", "self", ".", "config", "[", "'val_output_orig'", "]", ",", "'w'", ")", "\n", "saved_weights", "=", "[", "]", "\n", "total_cost", "=", "0.0", "\n", "\n", "pbar", "=", "ProgressBar", "(", "max_value", "=", "len", "(", "rts", ")", ")", ".", "start", "(", ")", "\n", "for", "i", ",", "(", "line", ",", "line_raw", ")", "in", "enumerate", "(", "zip", "(", "ts", ",", "rts", ")", ")", ":", "\n", "            ", "trans_in", "=", "line_raw", ".", "split", "(", ")", "\n", "seq", "=", "self", ".", "_oov_to_unk", "(", "\n", "line", "[", "0", "]", ",", "self", ".", "config", "[", "'src_vocab_size'", "]", ",", "self", ".", "unk_idx", ")", "\n", "input_", "=", "numpy", ".", "tile", "(", "seq", ",", "(", "self", ".", "config", "[", "'beam_size'", "]", ",", "1", ")", ")", "\n", "\n", "# draw sample, checking to ensure we don't get an empty string back", "\n", "trans", ",", "costs", ",", "attendeds", ",", "weights", "=", "self", ".", "beam_search", ".", "search", "(", "\n", "input_values", "=", "{", "self", ".", "source_sentence", ":", "input_", "}", ",", "\n", "max_length", "=", "3", "*", "len", "(", "seq", ")", ",", "eol_symbol", "=", "self", ".", "src_eos_idx", ",", "\n", "ignore_first_eol", "=", "True", ")", "\n", "\n", "# normalize costs according to the sequence lengths", "\n", "if", "self", ".", "normalize", ":", "\n", "                ", "lengths", "=", "numpy", ".", "array", "(", "[", "len", "(", "s", ")", "for", "s", "in", "trans", "]", ")", "\n", "costs", "=", "costs", "/", "lengths", "\n", "\n", "", "best", "=", "numpy", ".", "argsort", "(", "costs", ")", "[", "0", "]", "\n", "try", ":", "\n", "                ", "total_cost", "+=", "costs", "[", "best", "]", "\n", "trans_out", "=", "trans", "[", "best", "]", "\n", "weight", "=", "weights", "[", "best", "]", "[", ":", ",", ":", "len", "(", "trans_in", ")", "]", "\n", "trans_out", "=", "self", ".", "_idx_to_word", "(", "trans_out", ",", "self", ".", "trg_ivocab", ")", "\n", "", "except", "ValueError", ":", "\n", "                ", "logger", ".", "info", "(", "\n", "\"Can NOT find a translation for line: {}\"", ".", "format", "(", "i", "+", "1", ")", ")", "\n", "trans_out", "=", "'<UNK>'", "\n", "\n", "", "saved_weights", ".", "append", "(", "weight", ")", "\n", "print", "(", "' '", ".", "join", "(", "trans_out", ")", ",", "file", "=", "ftrans_original", ")", "\n", "pbar", ".", "update", "(", "i", "+", "1", ")", "\n", "\n", "", "pbar", ".", "finish", "(", ")", "\n", "ftrans_original", ".", "close", "(", ")", "\n", "cPickle", ".", "dump", "(", "saved_weights", ",", "open", "(", "self", ".", "config", "[", "'attention_weights'", "]", ",", "'wb'", ")", ")", "\n", "self", ".", "data_stream", ".", "reset", "(", ")", "\n", "\n", "# run afterprocess", "\n", "# self.ap.main()", "\n", "\n", "# calculate bleu", "\n", "bleu_subproc", "=", "Popen", "(", "self", ".", "compbleu_cmd", ",", "stdout", "=", "PIPE", ")", "\n", "while", "True", ":", "\n", "            ", "line", "=", "bleu_subproc", ".", "stdout", ".", "readline", "(", ")", "\n", "if", "line", "!=", "''", ":", "\n", "                ", "if", "'BLEU'", "in", "line", ":", "\n", "                    ", "stdout", "=", "line", "\n", "", "", "else", ":", "\n", "                ", "break", "\n", "", "", "bleu_subproc", ".", "terminate", "(", ")", "\n", "out_parse", "=", "re", ".", "match", "(", "r'BLEU = [-.0-9]+'", ",", "stdout", ")", "\n", "assert", "out_parse", "is", "not", "None", "\n", "\n", "# extract the score", "\n", "bleu_score", "=", "float", "(", "out_parse", ".", "group", "(", ")", "[", "6", ":", "]", ")", "*", "100", "\n", "logger", ".", "info", "(", "'BLEU: '", "+", "str", "(", "bleu_score", ")", ")", "\n", "self", ".", "main_loop", ".", "log", ".", "current_row", "[", "'validation_bleu'", "]", "=", "bleu_score", "\n", "self", ".", "main_loop", ".", "log", ".", "current_row", "[", "'validation_cost'", "]", "=", "total_cost", "\n", "\n", "return", "bleu_score", ",", "total_cost", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.sampling.BleuValidator._is_valid_to_save": [[405, 410], ["min", "operator.attrgetter"], "methods", ["None"], ["", "def", "_is_valid_to_save", "(", "self", ",", "bleu_score", ")", ":", "\n", "        ", "if", "not", "self", ".", "best_models", "or", "min", "(", "self", ".", "best_models", ",", "\n", "key", "=", "operator", ".", "attrgetter", "(", "'score'", ")", ")", ".", "score", "<", "bleu_score", ":", "\n", "            ", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.sampling.BleuValidator._save_model": [[411, 431], ["sampling.BleuValidator._is_valid_to_save", "sampling.ModelInfo", "sampling.BleuValidator.best_models.append", "sampling.BleuValidator.best_models.sort", "signal.signal", "logger.info", "sampling.BleuValidator.dump_parameters", "signal.signal", "len", "sampling.BleuValidator.best_models.remove", "os.path.isfile", "logger.info", "os.remove", "operator.attrgetter"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.sampling.BleuValidator._is_valid_to_save", "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.sampling.BleuValidator.dump_parameters"], ["", "def", "_save_model", "(", "self", ",", "bleu_score", ",", "total_cost", ")", ":", "\n", "        ", "if", "self", ".", "_is_valid_to_save", "(", "bleu_score", ")", ":", "\n", "            ", "model", "=", "ModelInfo", "(", "bleu_score", ",", "'bleu'", ",", "self", ".", "config", "[", "'saveto'", "]", ")", "\n", "\n", "# Manage n-best model list first", "\n", "if", "len", "(", "self", ".", "best_models", ")", ">=", "self", ".", "track_n_models", ":", "\n", "                ", "old_model", "=", "self", ".", "best_models", "[", "0", "]", "\n", "if", "old_model", ".", "path", "and", "os", ".", "path", ".", "isfile", "(", "old_model", ".", "path", ")", ":", "\n", "                    ", "logger", ".", "info", "(", "\"Deleting old model %s\"", "%", "old_model", ".", "path", ")", "\n", "os", ".", "remove", "(", "old_model", ".", "path", ")", "\n", "", "self", ".", "best_models", ".", "remove", "(", "old_model", ")", "\n", "\n", "", "self", ".", "best_models", ".", "append", "(", "model", ")", "\n", "self", ".", "best_models", ".", "sort", "(", "key", "=", "operator", ".", "attrgetter", "(", "'score'", ")", ")", "\n", "\n", "# Save the model here", "\n", "s", "=", "signal", ".", "signal", "(", "signal", ".", "SIGINT", ",", "signal", ".", "SIG_IGN", ")", "\n", "logger", ".", "info", "(", "\"Saving new model {}\"", ".", "format", "(", "model", ".", "path", ")", ")", "\n", "self", ".", "dump_parameters", "(", "self", ".", "main_loop", ",", "model", ".", "path", ")", "\n", "signal", ".", "signal", "(", "signal", ".", "SIGINT", ",", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.sampling.BleuValidator.dump_parameters": [[432, 439], ["main_loop.model.get_parameter_values", "name.replace", "str", "open", "numpy.savez", "main_loop.model.get_parameter_values.items"], "methods", ["None"], ["", "", "def", "dump_parameters", "(", "self", ",", "main_loop", ",", "path", ")", ":", "\n", "        ", "params_to_save", "=", "main_loop", ".", "model", ".", "get_parameter_values", "(", ")", "\n", "param_values", "=", "{", "name", ".", "replace", "(", "\"/\"", ",", "\"-\"", ")", ":", "param", "\n", "for", "name", ",", "param", "in", "params_to_save", ".", "items", "(", ")", "}", "\n", "outfile_path", "=", "path", "+", "'.'", "+", "str", "(", "main_loop", ".", "status", "[", "'iterations_done'", "]", ")", "\n", "with", "open", "(", "outfile_path", ",", "'wb'", ")", "as", "outfile", ":", "\n", "            ", "numpy", ".", "savez", "(", "outfile", ",", "**", "param_values", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.sampling.ModelInfo.__init__": [[444, 447], ["sampling.ModelInfo._generate_path"], "methods", ["home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.sampling.ModelInfo._generate_path"], ["def", "__init__", "(", "self", ",", "score", ",", "name", ",", "path", "=", "None", ")", ":", "\n", "        ", "self", ".", "score", "=", "score", "\n", "self", ".", "path", "=", "self", ".", "_generate_path", "(", "path", ",", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LynetteXing1991_HRAN.None.sampling.ModelInfo._generate_path": [[448, 453], ["os.path.join"], "methods", ["None"], ["", "def", "_generate_path", "(", "self", ",", "path", ",", "name", ")", ":", "\n", "        ", "gen_path", "=", "os", ".", "path", ".", "join", "(", "\n", "path", ",", "name", "+", "'_%.2f'", "%", "\n", "(", "self", ".", "score", ")", "if", "path", "else", "None", ")", "\n", "return", "gen_path", "\n", "", "", ""]]}