{"home.repos.pwc.inspect_result.tgangwani_QDAgents.None.main.setup": [[13, 39], ["comm.Get_size", "comm.bcast", "qd_agents.utils.baselines_support.logger.update_output_formats", "torch.manual_seed", "numpy.random.seed", "random.seed", "args.env_name.split", "qd_agents.utils.common_utils.get_new_dir", "qd_agents.utils.baselines_support.logger.make_output_format", "qd_agents.utils.baselines_support.logger.make_output_format"], "function", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.update_output_formats", "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.common_utils.get_new_dir", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.make_output_format", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.make_output_format"], ["def", "setup", "(", "args", ")", ":", "\n", "    ", "comm", "=", "MPI", ".", "COMM_WORLD", "\n", "args", ".", "comm", "=", "comm", "\n", "args", ".", "comm_size", "=", "comm", ".", "Get_size", "(", ")", "\n", "env_name", "=", "args", ".", "env_name", ".", "split", "(", "\"-\"", ")", "[", "0", "]", "\n", "\n", "# new directory for storing logs and data-dumps", "\n", "if", "args", ".", "rank", "==", "0", ":", "\n", "        ", "mpi_logs_dir", "=", "get_new_dir", "(", "root", "=", "'MPILOGS/'", "+", "env_name", ")", "\n", "", "else", ":", "\n", "        ", "mpi_logs_dir", "=", "None", "\n", "\n", "", "mpi_logs_dir", "=", "comm", ".", "bcast", "(", "mpi_logs_dir", ",", "root", "=", "0", ")", "\n", "mpi_logs_dir", "+=", "'rank%d/'", "%", "args", ".", "rank", "\n", "\n", "# set logging - rank0 writes to log+stdout, all others write to log", "\n", "log_fmts", "=", "[", "logger", ".", "make_output_format", "(", "format", "=", "'log'", ",", "ev_dir", "=", "mpi_logs_dir", ")", "]", "\n", "if", "args", ".", "rank", "==", "0", ":", "\n", "        ", "log_fmts", "+=", "[", "logger", ".", "make_output_format", "(", "format", "=", "'stdout'", ",", "ev_dir", "=", "'/tmp/void'", ")", "]", "\n", "", "logger", ".", "update_output_formats", "(", "log_fmts", ")", "\n", "\n", "args", ".", "seed", "=", "args", ".", "seed", "+", "10000", "*", "args", ".", "rank", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "args", ".", "mpi_logs_dir", "=", "mpi_logs_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.None.main.main": [[40, 75], ["collections.deque", "qd_agents.rl.rl_agent.RLAgent", "NetworksManager", "range", "print", "qd_agents.rl.rl_agent.RLAgent.collect_rollout_batch", "NetworksManager.update", "qd_agents.rl.rl_agent.RLAgent.update", "args.comm.Barrier", "ValueError", "numpy.average", "print", "sys.stdout.flush", "round", "print", "list", "round", "float", "kernel_vals.values"], "function", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.rl.rl_agent.RLAgent.collect_rollout_batch", "home.repos.pwc.inspect_result.tgangwani_QDAgents.rl.ppo.PPO.update", "home.repos.pwc.inspect_result.tgangwani_QDAgents.rl.ppo.PPO.update"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "if", "args", ".", "rank", "==", "0", ":", "\n", "        ", "print", "(", "'++ QD-{}-{} :: MPI Info: [Comm-size {}, self-rank {}] ++'", ".", "format", "(", "\n", "args", ".", "dice_type", "if", "args", ".", "dre_type", "==", "'dice'", "else", "'nce'", ",", "args", ".", "divergence", ",", "args", ".", "comm_size", ",", "args", ".", "rank", ")", ")", "\n", "\n", "", "if", "args", ".", "dre_type", "==", "'nce'", ":", "\n", "        ", "from", "qd_agents", ".", "networks", ".", "nce_manager", "import", "NetworksManager", "\n", "", "elif", "args", ".", "dre_type", "==", "'dice'", ":", "\n", "        ", "from", "qd_agents", ".", "networks", ".", "dice_manager", "import", "NetworksManager", "\n", "", "else", ":", "raise", "ValueError", "(", "\"Unknown DRE type. Supported options: {nce, dice}\"", ")", "\n", "\n", "episode_returns", "=", "deque", "(", "maxlen", "=", "50", ")", "\n", "rl_agent", "=", "RLAgent", "(", "args", ")", "\n", "manager", "=", "NetworksManager", "(", "args", ",", "rl_agent", ")", "\n", "\n", "for", "j", "in", "range", "(", "args", ".", "num_iterations", ")", ":", "\n", "\n", "# collect agent-environment interaction data", "\n", "        ", "rl_agent", ".", "collect_rollout_batch", "(", "episode_returns", ")", "\n", "\n", "# update self-imitation discriminator and the density-ratio networks", "\n", "kernel_vals", ",", "ep_ret_all_ranks", "=", "manager", ".", "update", "(", "np", ".", "average", "(", "list", "(", "episode_returns", ")", "[", "-", "10", ":", "]", ")", ")", "\n", "\n", "# update actor-critic parameters with PPO", "\n", "value_loss", ",", "action_loss", "=", "rl_agent", ".", "update", "(", "kernel_vals", ",", "anneal_coef", "=", "(", "1", "-", "float", "(", "j", ")", "/", "args", ".", "num_iterations", ")", ")", "\n", "\n", "if", "args", ".", "rank", "==", "0", ":", "\n", "            ", "ep_ret_all_ranks", "=", "[", "round", "(", "x", ",", "2", ")", "for", "x", "in", "ep_ret_all_ranks", "]", "\n", "if", "args", ".", "debug_mode", ":", "\n", "                ", "kv", "=", "[", "round", "(", "x", ",", "2", ")", "for", "x", "in", "kernel_vals", ".", "values", "(", ")", "]", "\n", "print", "(", "\"<debug> Value-loss: {:.2f}, Action-loss: {:.2f}, Kernel-values:{}\"", ".", "format", "(", "value_loss", ",", "action_loss", ",", "kv", ")", ")", "\n", "", "print", "(", "\"[{}/{}] Episodic-returns (all ranks): {}\"", ".", "format", "(", "j", ",", "args", ".", "num_iterations", ",", "ep_ret_all_ranks", ")", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "", "args", ".", "comm", ".", "Barrier", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.common_utils.CustomMapDataset.__init__": [[8, 12], ["len", "set"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "*", "tnsrs", ")", ":", "\n", "        ", "self", ".", "tnsrs", "=", "tnsrs", "\n", "l", "=", "[", "x", ".", "shape", "[", "0", "]", "for", "x", "in", "self", ".", "tnsrs", "]", "\n", "assert", "len", "(", "set", "(", "l", ")", ")", "==", "1", ",", "\"All input tensors should have the same number of elements\"", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.common_utils.CustomMapDataset.__len__": [[13, 15], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "tnsrs", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.common_utils.CustomMapDataset.__getitem__": [[16, 18], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "[", "x", "[", "index", "]", "for", "x", "in", "self", ".", "tnsrs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.common_utils.OrderedDefaultDict.__missing__": [[20, 23], ["collections.defaultdict"], "methods", ["None"], ["    ", "def", "__missing__", "(", "self", ",", "key", ")", ":", "\n", "        ", "self", "[", "key", "]", "=", "defaultdict", "(", "list", ")", "\n", "return", "self", "[", "key", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.common_utils.RunningMeanStd.__init__": [[49, 53], ["numpy.zeros", "numpy.ones", "numpy.ones"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "epsilon", "=", "1e-4", ",", "shape", "=", "(", ")", ")", ":", "\n", "        ", "self", ".", "mean", "=", "np", ".", "zeros", "(", "shape", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "var", "=", "np", ".", "ones", "(", "shape", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "count", "=", "epsilon", "*", "np", ".", "ones", "(", "1", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.common_utils.RunningMeanStd.update": [[54, 59], ["numpy.mean", "numpy.var", "common_utils.RunningMeanStd.update_from_moments"], "methods", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.common_utils.RunningMeanStd.update_from_moments"], ["", "def", "update", "(", "self", ",", "x", ")", ":", "\n", "        ", "batch_mean", "=", "np", ".", "mean", "(", "x", ",", "axis", "=", "0", ")", "\n", "batch_var", "=", "np", ".", "var", "(", "x", ",", "axis", "=", "0", ")", "\n", "batch_count", "=", "x", ".", "shape", "[", "0", "]", "\n", "self", ".", "update_from_moments", "(", "batch_mean", ",", "batch_var", ",", "batch_count", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.common_utils.RunningMeanStd.update_from_moments": [[60, 63], ["common_utils.update_mean_var_count_from_moments"], "methods", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.common_utils.update_mean_var_count_from_moments"], ["", "def", "update_from_moments", "(", "self", ",", "batch_mean", ",", "batch_var", ",", "batch_count", ")", ":", "\n", "        ", "self", ".", "mean", ",", "self", ".", "var", ",", "self", ".", "count", "=", "update_mean_var_count_from_moments", "(", "\n", "self", ".", "mean", ",", "self", ".", "var", ",", "self", ".", "count", ",", "batch_mean", ",", "batch_var", ",", "batch_count", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.common_utils.get_dr_limits": [[24, 31], ["None"], "function", ["None"], ["", "", "def", "get_dr_limits", "(", ")", ":", "\n", "    ", "\"\"\"\n    Set the clipping range for the density ratio estimates\n    \"\"\"", "\n", "dr_min", "=", "0.05", "\n", "dr_max", "=", "10.", "\n", "return", "dr_min", ",", "dr_max", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.common_utils.obs_batch_normalize": [[32, 43], ["obs_tnsr.numpy", "numpy.clip", "torch.FloatTensor().view", "torch.FloatTensor().view", "rms_obj.update", "obs_tnsr.size", "numpy.sqrt", "torch.FloatTensor", "torch.FloatTensor"], "function", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.rl.ppo.PPO.update", "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.batch_fifo_dice.BatchFIFO.size"], ["", "def", "obs_batch_normalize", "(", "obs_tnsr", ",", "update_rms", ",", "rms_obj", ")", ":", "\n", "    ", "\"\"\"\n    Use this function for a batch of 1-D tensors only\n    \"\"\"", "\n", "obs_tnsr_np", "=", "obs_tnsr", ".", "numpy", "(", ")", "\n", "if", "update_rms", ":", "\n", "        ", "rms_obj", ".", "update", "(", "obs_tnsr_np", ")", "\n", "\n", "", "obs_normalized_np", "=", "np", ".", "clip", "(", "(", "obs_tnsr_np", "-", "rms_obj", ".", "mean", ")", "/", "np", ".", "sqrt", "(", "rms_obj", ".", "var", "+", "1e-8", ")", ",", "-", "10.", ",", "10.", ")", "\n", "obs_normalized_tnsr", "=", "torch", ".", "FloatTensor", "(", "obs_normalized_np", ")", ".", "view", "(", "obs_tnsr", ".", "size", "(", ")", ")", "\n", "return", "obs_normalized_tnsr", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.common_utils.update_mean_var_count_from_moments": [[64, 76], ["numpy.square"], "function", ["None"], ["", "", "def", "update_mean_var_count_from_moments", "(", "mean", ",", "var", ",", "count", ",", "batch_mean", ",", "batch_var", ",", "batch_count", ")", ":", "\n", "    ", "delta", "=", "batch_mean", "-", "mean", "\n", "tot_count", "=", "count", "+", "batch_count", "\n", "\n", "new_mean", "=", "mean", "+", "delta", "*", "batch_count", "/", "tot_count", "\n", "m_a", "=", "var", "*", "count", "\n", "m_b", "=", "batch_var", "*", "batch_count", "\n", "M2", "=", "m_a", "+", "m_b", "+", "np", ".", "square", "(", "delta", ")", "*", "count", "*", "batch_count", "/", "(", "count", "+", "batch_count", ")", "\n", "new_var", "=", "M2", "/", "(", "count", "+", "batch_count", ")", "\n", "new_count", "=", "batch_count", "+", "count", "\n", "\n", "return", "new_mean", ",", "new_var", ",", "new_count", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.common_utils.init": [[77, 82], ["weight_init", "bias_init"], "function", ["None"], ["", "def", "init", "(", "module", ",", "weight_init", ",", "bias_init", ",", "gain", "=", "1", ")", ":", "\n", "    ", "weight_init", "(", "module", ".", "weight", ".", "data", ",", "gain", "=", "gain", ")", "\n", "if", "module", ".", "bias", "is", "not", "None", ":", "\n", "        ", "bias_init", "(", "module", ".", "bias", ".", "data", ")", "\n", "", "return", "module", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.common_utils.get_new_dir": [[83, 90], ["os.makedirs", "str", "os.path.join", "os.makedirs", "len", "os.path.exists", "os.listdir"], "function", ["None"], ["", "def", "get_new_dir", "(", "root", ")", ":", "\n", "    ", "os", ".", "makedirs", "(", "root", ",", "exist_ok", "=", "True", ")", "\n", "numd", "=", "str", "(", "len", "(", "os", ".", "listdir", "(", "root", ")", ")", ")", "\n", "dst_dir", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'run'", "+", "numd", ")", "\n", "assert", "not", "os", ".", "path", ".", "exists", "(", "dst_dir", ")", ",", "'Directory already exists {}'", ".", "format", "(", "dst_dir", ")", "\n", "os", ".", "makedirs", "(", "dst_dir", ")", "\n", "return", "dst_dir", "+", "'/'", "\n", "", ""]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.arguments.get_args": [[3, 34], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "yaml.load", "delattr", "yaml.load.items", "open", "isinstance", "arg_dict[].append"], "function", ["None"], ["def", "get_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'QD-agents'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'random seed'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--env-name'", ",", "\n", "default", "=", "'Hopper-v2'", ",", "\n", "help", "=", "'environment to train on'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--log-dir'", ",", "\n", "default", "=", "'/tmp/gym/'", ",", "\n", "help", "=", "'directory to save agent logs (default: /tmp/gym)'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--config-file'", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "'optional yaml file with configuration parameters'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "if", "args", ".", "config_file", ":", "\n", "        ", "import", "yaml", "\n", "data", "=", "yaml", ".", "load", "(", "open", "(", "args", ".", "config_file", ")", ")", "\n", "delattr", "(", "args", ",", "'config_file'", ")", "\n", "arg_dict", "=", "args", ".", "__dict__", "\n", "for", "key", ",", "value", "in", "data", ".", "items", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "for", "v", "in", "value", ":", "\n", "                    ", "arg_dict", "[", "key", "]", ".", "append", "(", "v", ")", "\n", "", "", "else", ":", "\n", "                ", "arg_dict", "[", "key", "]", "=", "value", "\n", "\n", "", "", "", "return", "args", "\n", "", ""]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.envs.TimeLimitMask.step": [[53, 59], ["envs.TimeLimitMask.env.step"], "methods", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.monitor.Monitor.step"], ["def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "obs", ",", "rew", ",", "done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "if", "done", "and", "self", ".", "env", ".", "_max_episode_steps", "==", "self", ".", "env", ".", "_elapsed_steps", ":", "\n", "            ", "info", "[", "'bad_transition'", "]", "=", "True", "\n", "\n", "", "return", "obs", ",", "rew", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.envs.TimeLimitMask.reset": [[60, 62], ["envs.TimeLimitMask.env.reset"], "methods", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.monitor.Monitor.reset"], ["", "def", "reset", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "env", ".", "reset", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.envs.VecPyTorch.reset": [[64, 68], ["envs.VecPyTorch.venv.reset", "torch.from_numpy().float", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.monitor.Monitor.reset"], ["    ", "def", "reset", "(", "self", ")", ":", "\n", "        ", "obs", "=", "self", ".", "venv", ".", "reset", "(", ")", "\n", "obs", "=", "torch", ".", "from_numpy", "(", "obs", ")", ".", "float", "(", ")", "\n", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.envs.VecPyTorch.step_async": [[69, 75], ["isinstance", "actions.squeeze.squeeze.cpu().numpy", "envs.VecPyTorch.venv.step_async", "actions.squeeze.squeeze.squeeze", "actions.squeeze.squeeze.cpu"], "methods", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.vec_env.__init__.VecEnvWrapper.step_async"], ["", "def", "step_async", "(", "self", ",", "actions", ")", ":", "\n", "        ", "if", "isinstance", "(", "actions", ",", "torch", ".", "LongTensor", ")", ":", "\n", "# Squeeze the dimension for discrete actions", "\n", "            ", "actions", "=", "actions", ".", "squeeze", "(", "1", ")", "\n", "", "actions", "=", "actions", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "self", ".", "venv", ".", "step_async", "(", "actions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.envs.VecPyTorch.step_wait": [[76, 81], ["envs.VecPyTorch.venv.step_wait", "torch.from_numpy().float", "torch.from_numpy().unsqueeze().float", "torch.from_numpy", "torch.from_numpy().unsqueeze", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.vec_env.__init__.VecEnvWrapper.step_wait"], ["", "def", "step_wait", "(", "self", ")", ":", "\n", "        ", "obs", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "venv", ".", "step_wait", "(", ")", "\n", "obs", "=", "torch", ".", "from_numpy", "(", "obs", ")", ".", "float", "(", ")", "\n", "reward", "=", "torch", ".", "from_numpy", "(", "reward", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", ".", "float", "(", ")", "\n", "return", "obs", ",", "reward", ",", "done", ",", "info", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.envs.make_env": [[7, 28], ["gym.make", "baselines_support.Monitor.seed", "hasattr", "isinstance", "NotImplementedError", "str().find", "envs.TimeLimitMask", "qd_agents.utils.baselines_support.Monitor", "os.path.join", "str", "str"], "function", ["None"], ["def", "make_env", "(", "env_id", ",", "seed", ",", "rank", ",", "log_dir", ",", "allow_early_resets", ")", ":", "\n", "    ", "def", "_thunk", "(", ")", ":", "\n", "        ", "env", "=", "gym", ".", "make", "(", "env_id", ")", "\n", "env", ".", "seed", "(", "seed", "+", "rank", ")", "\n", "\n", "if", "hasattr", "(", "gym", ".", "envs", ",", "'atari'", ")", "and", "isinstance", "(", "\n", "env", ".", "unwrapped", ",", "gym", ".", "envs", ".", "atari", ".", "atari_env", ".", "AtariEnv", ")", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Code only tested for MuJoCo locomotion.\"", ")", "\n", "\n", "", "if", "str", "(", "env", ".", "__class__", ".", "__name__", ")", ".", "find", "(", "'TimeLimit'", ")", ">=", "0", ":", "\n", "            ", "env", "=", "TimeLimitMask", "(", "env", ")", "\n", "\n", "", "if", "log_dir", "is", "not", "None", ":", "\n", "            ", "env", "=", "baselines_support", ".", "Monitor", "(", "\n", "env", ",", "\n", "os", ".", "path", ".", "join", "(", "log_dir", ",", "str", "(", "rank", ")", ")", ",", "\n", "allow_early_resets", "=", "allow_early_resets", ")", "\n", "\n", "", "return", "env", "\n", "\n", "", "return", "_thunk", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.envs.make_vec_envs": [[29, 48], ["envs.VecPyTorch", "envs.make_env", "len", "ShmemVecEnv", "DummyVecEnv", "range"], "function", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.envs.make_env"], ["", "def", "make_vec_envs", "(", "env_name", ",", "\n", "seed", ",", "\n", "num_processes", ",", "\n", "log_dir", ",", "\n", "allow_early_resets", ")", ":", "\n", "    ", "envs", "=", "[", "\n", "make_env", "(", "env_name", ",", "seed", ",", "i", ",", "log_dir", ",", "allow_early_resets", ")", "\n", "for", "i", "in", "range", "(", "num_processes", ")", "\n", "]", "\n", "\n", "if", "len", "(", "envs", ")", ">", "1", ":", "\n", "        ", "from", "qd_agents", ".", "utils", ".", "vec_env", ".", "shmem_vec_env", "import", "ShmemVecEnv", "\n", "envs", "=", "ShmemVecEnv", "(", "envs", ",", "context", "=", "'fork'", ")", "\n", "", "else", ":", "\n", "        ", "from", "qd_agents", ".", "utils", ".", "vec_env", ".", "dummy_vec_env", "import", "DummyVecEnv", "\n", "envs", "=", "DummyVecEnv", "(", "envs", ")", "\n", "\n", "", "envs", "=", "VecPyTorch", "(", "envs", ")", "\n", "return", "envs", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.batch_fifo_nce.BatchFIFO.__init__": [[9, 13], ["collections.deque"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "capacity", ")", ":", "\n", "        ", "self", ".", "capacity", "=", "capacity", "\n", "self", ".", "num_batches", "=", "0", "\n", "self", ".", "buffer_", "=", "deque", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.batch_fifo_nce.BatchFIFO.get_sample": [[14, 21], ["batch_fifo_nce.BatchFIFO.process", "batch_fifo_nce.BatchFIFO.process", "random.sample", "random.sample"], "methods", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.batch_fifo_dice.BatchFIFO.process", "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.batch_fifo_dice.BatchFIFO.process", "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.distributions.TanhNormal.sample", "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.distributions.TanhNormal.sample"], ["", "def", "get_sample", "(", "self", ",", "nbatches", ")", ":", "\n", "        ", "if", "self", ".", "num_batches", "<", "nbatches", ":", "\n", "            ", "return", "self", ".", "process", "(", "random", ".", "sample", "(", "self", ".", "buffer_", ",", "self", ".", "num_batches", ")", ")", "\n", "\n", "# sampling w/o replacement. Always include the most recent batch!", "\n", "", "batches", "=", "[", "self", ".", "buffer_", "[", "-", "1", "]", "]", "+", "random", ".", "sample", "(", "self", ".", "buffer_", ",", "nbatches", "-", "1", ")", "\n", "return", "self", ".", "process", "(", "batches", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.batch_fifo_nce.BatchFIFO.process": [[22, 31], ["numpy.copy", "numpy.copy", "len", "numpy.concatenate", "numpy.concatenate", "torch.from_numpy", "torch.from_numpy"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "process", "(", "batches", ")", ":", "\n", "        ", "assert", "len", "(", "batches", ")", ">=", "1", "\n", "obs", "=", "np", ".", "copy", "(", "batches", "[", "0", "]", "[", "'obs'", "]", ")", "\n", "acs", "=", "np", ".", "copy", "(", "batches", "[", "0", "]", "[", "'acs'", "]", ")", "\n", "for", "batch", "in", "batches", "[", "1", ":", "]", ":", "\n", "            ", "obs", "=", "np", ".", "concatenate", "(", "(", "obs", ",", "batch", "[", "'obs'", "]", ")", ",", "axis", "=", "0", ")", "\n", "acs", "=", "np", ".", "concatenate", "(", "(", "acs", ",", "batch", "[", "'acs'", "]", ")", ",", "axis", "=", "0", ")", "\n", "", "return", "torch", ".", "from_numpy", "(", "obs", ")", ",", "torch", ".", "from_numpy", "(", "acs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.batch_fifo_nce.BatchFIFO.size": [[32, 34], ["None"], "methods", ["None"], ["", "def", "size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "capacity", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.batch_fifo_nce.BatchFIFO.add": [[35, 43], ["dict", "batch_fifo_nce.BatchFIFO.buffer_.append", "batch_fifo_nce.BatchFIFO.buffer_.popleft", "batch_fifo_nce.BatchFIFO.buffer_.append", "copy.deepcopy", "copy.deepcopy"], "methods", ["None"], ["", "def", "add", "(", "self", ",", "obs", ",", "acs", ")", ":", "\n", "        ", "batch", "=", "dict", "(", "obs", "=", "deepcopy", "(", "obs", ")", ",", "acs", "=", "deepcopy", "(", "acs", ")", ")", "\n", "if", "self", ".", "num_batches", "<", "self", ".", "capacity", ":", "\n", "            ", "self", ".", "buffer_", ".", "append", "(", "batch", ")", "\n", "self", ".", "num_batches", "+=", "1", "\n", "", "else", ":", "\n", "            ", "self", ".", "buffer_", ".", "popleft", "(", ")", "\n", "self", ".", "buffer_", ".", "append", "(", "batch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.batch_fifo_nce.BatchFIFO.count": [[44, 46], ["None"], "methods", ["None"], ["", "", "def", "count", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_batches", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.batch_fifo_nce.BatchFIFO.erase": [[47, 50], ["collections.deque"], "methods", ["None"], ["", "def", "erase", "(", "self", ")", ":", "\n", "        ", "self", ".", "buffer_", "=", "deque", "(", ")", "\n", "self", ".", "num_batches", "=", "0", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.distributions.TanhNormal.__init__": [[12, 14], ["torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "normal_mean", ",", "normal_std", ")", ":", "\n", "        ", "self", ".", "_wrapped_normal", "=", "torch", ".", "distributions", ".", "Normal", "(", "normal_mean", ",", "normal_std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.distributions.TanhNormal.log_probs": [[15, 24], ["distributions.TanhNormal._wrapped_normal.log_prob().sum", "offset.sum", "torch.nn.functional.softplus", "torch.nn.functional.softplus", "torch.nn.functional.softplus", "torch.nn.functional.softplus", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "distributions.TanhNormal._wrapped_normal.log_prob", "numpy.log"], "methods", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log"], ["", "def", "log_probs", "(", "self", ",", "arctanh_actions", ")", ":", "\n", "        ", "\"\"\"\n        We use a numerically stable formula for log(1 - tanh(x)^2), adapted from\n        https://github.com/tensorflow/probability/blob/master/tensorflow_probability/python/bijectors/tanh.py#L73\n        Formula: log(1 - tanh(x)^2) = 2 * (log(2) - x - softplus(-2x))\n        \"\"\"", "\n", "offset", "=", "2", "*", "(", "torch", ".", "from_numpy", "(", "np", ".", "log", "(", "[", "2", "]", ",", "dtype", "=", "np", ".", "float32", ")", ")", "-", "arctanh_actions", "-", "torch", ".", "nn", ".", "functional", ".", "softplus", "(", "-", "2.", "*", "arctanh_actions", ")", ")", "\n", "lp", "=", "self", ".", "_wrapped_normal", ".", "log_prob", "(", "arctanh_actions", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "-", "offset", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "return", "lp", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.distributions.TanhNormal.mode": [[25, 28], ["torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh"], "methods", ["None"], ["", "def", "mode", "(", "self", ")", ":", "\n", "        ", "m", "=", "self", ".", "_wrapped_normal", ".", "mean", "\n", "return", "m", ",", "torch", ".", "tanh", "(", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.distributions.TanhNormal.rsample": [[29, 35], ["distributions.TanhNormal._wrapped_normal.rsample", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh"], "methods", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.distributions.TanhNormal.rsample"], ["", "def", "rsample", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        sample w/ reparameterization\n        \"\"\"", "\n", "z", "=", "self", ".", "_wrapped_normal", ".", "rsample", "(", ")", "\n", "return", "z", ",", "torch", ".", "tanh", "(", "z", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.distributions.TanhNormal.sample": [[36, 42], ["distributions.TanhNormal._wrapped_normal.sample().detach", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "distributions.TanhNormal._wrapped_normal.sample"], "methods", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.distributions.TanhNormal.sample"], ["", "def", "sample", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        sample w/o reparameterization\n        \"\"\"", "\n", "z", "=", "self", ".", "_wrapped_normal", ".", "sample", "(", ")", ".", "detach", "(", ")", "\n", "return", "z", ",", "torch", ".", "tanh", "(", "z", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.distributions.DiagGaussian.__init__": [[44, 48], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Parameter", "torch.Parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.buffers.storage.RolloutStorage.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_inputs", ",", "num_outputs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fc_mean", "=", "nn", ".", "Linear", "(", "num_inputs", ",", "num_outputs", ")", "\n", "self", ".", "logstd", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "num_outputs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.distributions.DiagGaussian.forward": [[49, 54], ["distributions.DiagGaussian.fc_mean", "distributions.DiagGaussian.logstd.expand_as", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "distributions.TanhNormal", "torch.clamp.exp", "torch.clamp.exp"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "action_mean", "=", "self", ".", "fc_mean", "(", "x", ")", "\n", "action_logstd", "=", "self", ".", "logstd", ".", "expand_as", "(", "action_mean", ")", "\n", "action_logstd", "=", "torch", ".", "clamp", "(", "action_logstd", ",", "LOG_SIG_MIN", ",", "LOG_SIG_MAX", ")", "\n", "return", "TanhNormal", "(", "action_mean", ",", "action_logstd", ".", "exp", "(", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.batch_fifo_dice.BatchFIFO.__init__": [[10, 15], ["collections.deque", "qd_agents.utils.common_utils.RunningMeanStd"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "capacity", ",", "obs_dim", "=", "None", ")", ":", "\n", "        ", "self", ".", "capacity", "=", "capacity", "\n", "self", ".", "num_batches", "=", "0", "\n", "self", ".", "buffer_", "=", "deque", "(", ")", "\n", "self", ".", "obs_rms", "=", "RunningMeanStd", "(", "shape", "=", "obs_dim", ")", "if", "obs_dim", "is", "not", "None", "else", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.batch_fifo_dice.BatchFIFO.get_sample": [[16, 23], ["batch_fifo_dice.BatchFIFO.process", "batch_fifo_dice.BatchFIFO.process", "random.sample", "random.sample"], "methods", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.batch_fifo_dice.BatchFIFO.process", "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.batch_fifo_dice.BatchFIFO.process", "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.distributions.TanhNormal.sample", "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.distributions.TanhNormal.sample"], ["", "def", "get_sample", "(", "self", ",", "nbatches", ")", ":", "\n", "        ", "if", "self", ".", "num_batches", "<", "nbatches", ":", "\n", "            ", "return", "self", ".", "process", "(", "random", ".", "sample", "(", "self", ".", "buffer_", ",", "self", ".", "num_batches", ")", ")", "\n", "\n", "# sampling w/o replacement. Always include the most recent batch!", "\n", "", "batches", "=", "[", "self", ".", "buffer_", "[", "-", "1", "]", "]", "+", "random", ".", "sample", "(", "self", ".", "buffer_", ",", "nbatches", "-", "1", ")", "\n", "return", "self", ".", "process", "(", "batches", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.batch_fifo_dice.BatchFIFO.process": [[24, 37], ["numpy.copy", "numpy.copy", "numpy.copy", "numpy.copy", "len", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "process", "(", "batches", ")", ":", "\n", "        ", "assert", "len", "(", "batches", ")", ">=", "1", "\n", "obs", "=", "np", ".", "copy", "(", "batches", "[", "0", "]", "[", "'obs'", "]", ")", "\n", "acs", "=", "np", ".", "copy", "(", "batches", "[", "0", "]", "[", "'acs'", "]", ")", "\n", "next_obs", "=", "np", ".", "copy", "(", "batches", "[", "0", "]", "[", "'next_obs'", "]", ")", "\n", "masks", "=", "np", ".", "copy", "(", "batches", "[", "0", "]", "[", "'masks'", "]", ")", "\n", "for", "batch", "in", "batches", "[", "1", ":", "]", ":", "\n", "            ", "obs", "=", "np", ".", "concatenate", "(", "(", "obs", ",", "batch", "[", "'obs'", "]", ")", ",", "axis", "=", "0", ")", "\n", "acs", "=", "np", ".", "concatenate", "(", "(", "acs", ",", "batch", "[", "'acs'", "]", ")", ",", "axis", "=", "0", ")", "\n", "next_obs", "=", "np", ".", "concatenate", "(", "(", "next_obs", ",", "batch", "[", "'next_obs'", "]", ")", ",", "axis", "=", "0", ")", "\n", "masks", "=", "np", ".", "concatenate", "(", "(", "masks", ",", "batch", "[", "'masks'", "]", ")", ",", "axis", "=", "0", ")", "\n", "", "return", "torch", ".", "from_numpy", "(", "obs", ")", ",", "torch", ".", "from_numpy", "(", "acs", ")", ",", "torch", ".", "from_numpy", "(", "next_obs", ")", ",", "torch", ".", "from_numpy", "(", "masks", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.batch_fifo_dice.BatchFIFO.size": [[38, 40], ["None"], "methods", ["None"], ["", "def", "size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "capacity", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.batch_fifo_dice.BatchFIFO.add": [[41, 53], ["dict", "batch_fifo_dice.BatchFIFO.obs_rms.update", "batch_fifo_dice.BatchFIFO.buffer_.append", "batch_fifo_dice.BatchFIFO.buffer_.popleft", "batch_fifo_dice.BatchFIFO.buffer_.append", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy"], "methods", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.rl.ppo.PPO.update"], ["", "def", "add", "(", "self", ",", "obs", ",", "acs", ",", "masks", ")", ":", "\n", "\n", "        ", "if", "self", ".", "obs_rms", "is", "not", "None", ":", "\n", "            ", "self", ".", "obs_rms", ".", "update", "(", "obs", ")", "\n", "\n", "", "batch", "=", "dict", "(", "obs", "=", "deepcopy", "(", "obs", "[", ":", "-", "1", "]", ")", ",", "acs", "=", "deepcopy", "(", "acs", ")", ",", "next_obs", "=", "deepcopy", "(", "obs", "[", "1", ":", "]", ")", ",", "masks", "=", "deepcopy", "(", "masks", ")", ")", "\n", "if", "self", ".", "num_batches", "<", "self", ".", "capacity", ":", "\n", "            ", "self", ".", "buffer_", ".", "append", "(", "batch", ")", "\n", "self", ".", "num_batches", "+=", "1", "\n", "", "else", ":", "\n", "            ", "self", ".", "buffer_", ".", "popleft", "(", ")", "\n", "self", ".", "buffer_", ".", "append", "(", "batch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.batch_fifo_dice.BatchFIFO.count": [[54, 56], ["None"], "methods", ["None"], ["", "", "def", "count", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_batches", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.batch_fifo_dice.BatchFIFO.erase": [[57, 60], ["collections.deque"], "methods", ["None"], ["", "def", "erase", "(", "self", ")", ":", "\n", "        ", "self", ".", "buffer_", "=", "deque", "(", ")", "\n", "self", ".", "num_batches", "=", "0", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.vec_env.subproc_vec_env.SubprocVecEnv.__init__": [[39, 67], ["len", "zip", "VecEnv.__init__", "multiprocessing.Process", "p.start", "remote.close", "subproc_vec_env.SubprocVecEnv.remotes[].send", "subproc_vec_env.SubprocVecEnv.remotes[].recv", "numpy.array", "numpy.zeros", "len", "zip", "multiprocessing.Pipe", "range", "CloudpickleWrapper"], "methods", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.buffers.storage.RolloutStorage.__init__", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.monitor.Monitor.close"], ["    ", "def", "__init__", "(", "self", ",", "env_fns", ",", "spaces", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        envs: list of gym environments to run in subprocesses\n        \"\"\"", "\n", "self", ".", "waiting", "=", "False", "\n", "nenvs", "=", "len", "(", "env_fns", ")", "\n", "self", ".", "remotes", ",", "self", ".", "work_remotes", "=", "zip", "(", "*", "[", "Pipe", "(", ")", "for", "_", "in", "range", "(", "nenvs", ")", "]", ")", "\n", "self", ".", "ps", "=", "[", "Process", "(", "target", "=", "worker", ",", "args", "=", "(", "work_remote", ",", "remote", ",", "CloudpickleWrapper", "(", "env_fn", ")", ")", ")", "\n", "for", "(", "work_remote", ",", "remote", ",", "env_fn", ")", "in", "zip", "(", "self", ".", "work_remotes", ",", "self", ".", "remotes", ",", "env_fns", ")", "]", "\n", "for", "p", "in", "self", ".", "ps", ":", "\n", "            ", "p", ".", "daemon", "=", "True", "# if the main process crashes, we should not cause things to hang", "\n", "p", ".", "start", "(", ")", "\n", "", "for", "remote", "in", "self", ".", "work_remotes", ":", "\n", "            ", "remote", ".", "close", "(", ")", "\n", "\n", "", "if", "spaces", "==", "None", ":", "\n", "            ", "self", ".", "remotes", "[", "0", "]", ".", "send", "(", "(", "'get_spaces'", ",", "None", ")", ")", "\n", "observation_space", ",", "action_space", "=", "self", ".", "remotes", "[", "0", "]", ".", "recv", "(", ")", "\n", "", "else", ":", "\n", "            ", "observation_space", "=", "spaces", "[", "0", "]", ";", "action_space", "=", "spaces", "[", "1", "]", "\n", "\n", "", "if", "action_space", ".", "__class__", ".", "__name__", "==", "\"Discrete\"", ":", "\n", "            ", "self", ".", "nop", "=", "np", ".", "array", "(", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "nop", "=", "np", ".", "zeros", "(", "action_space", ".", "shape", ")", "\n", "\n", "", "self", ".", "viewer", "=", "None", "\n", "VecEnv", ".", "__init__", "(", "self", ",", "len", "(", "env_fns", ")", ",", "observation_space", ",", "action_space", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.vec_env.subproc_vec_env.SubprocVecEnv.step_async": [[68, 72], ["zip", "remote.send"], "methods", ["None"], ["", "def", "step_async", "(", "self", ",", "actions", ")", ":", "\n", "        ", "for", "remote", ",", "action", "in", "zip", "(", "self", ".", "remotes", ",", "actions", ")", ":", "\n", "            ", "remote", ".", "send", "(", "(", "'step'", ",", "action", ")", ")", "\n", "", "self", ".", "waiting", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.vec_env.subproc_vec_env.SubprocVecEnv.step_wait": [[73, 78], ["zip", "remote.recv", "numpy.stack", "numpy.stack", "numpy.stack"], "methods", ["None"], ["", "def", "step_wait", "(", "self", ")", ":", "\n", "        ", "results", "=", "[", "remote", ".", "recv", "(", ")", "for", "remote", "in", "self", ".", "remotes", "]", "\n", "self", ".", "waiting", "=", "False", "\n", "obs", ",", "rews", ",", "dones", ",", "infos", "=", "zip", "(", "*", "results", ")", "\n", "return", "np", ".", "stack", "(", "obs", ")", ",", "np", ".", "stack", "(", "rews", ")", ",", "np", ".", "stack", "(", "dones", ")", ",", "infos", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.vec_env.subproc_vec_env.SubprocVecEnv.reset": [[79, 83], ["numpy.stack", "remote.send", "remote.recv"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "for", "remote", "in", "self", ".", "remotes", ":", "\n", "            ", "remote", ".", "send", "(", "(", "'reset'", ",", "None", ")", ")", "\n", "", "return", "np", ".", "stack", "(", "[", "remote", ".", "recv", "(", ")", "for", "remote", "in", "self", ".", "remotes", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.vec_env.subproc_vec_env.SubprocVecEnv.expert_ac": [[84, 97], ["numpy.stack", "remote.send", "remote.recv", "acs.append"], "methods", ["None"], ["", "def", "expert_ac", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Get the expert action for the current observation (from the expert database). \n        For interactive Gym envs, this returns a nop (0) action.\n        \"\"\"", "\n", "for", "remote", "in", "self", ".", "remotes", ":", "\n", "            ", "remote", ".", "send", "(", "(", "'expert_ac'", ",", "None", ")", ")", "\n", "\n", "", "acs", "=", "[", "]", "\n", "for", "remote", "in", "self", ".", "remotes", ":", "\n", "            ", "x", "=", "remote", ".", "recv", "(", ")", "\n", "acs", ".", "append", "(", "x", "if", "x", "is", "not", "None", "else", "self", ".", "nop", ")", "\n", "", "return", "np", ".", "stack", "(", "acs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.vec_env.subproc_vec_env.SubprocVecEnv.close_extras": [[98, 106], ["remote.send", "p.join", "remote.recv"], "methods", ["None"], ["", "def", "close_extras", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "waiting", ":", "\n", "            ", "for", "remote", "in", "self", ".", "remotes", ":", "\n", "                ", "remote", ".", "recv", "(", ")", "\n", "", "", "for", "remote", "in", "self", ".", "remotes", ":", "\n", "            ", "remote", ".", "send", "(", "(", "'close'", ",", "None", ")", ")", "\n", "", "for", "p", "in", "self", ".", "ps", ":", "\n", "            ", "p", ".", "join", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.vec_env.subproc_vec_env.SubprocVecEnv.get_images": [[107, 112], ["pipe.send", "pipe.recv"], "methods", ["None"], ["", "", "def", "get_images", "(", "self", ")", ":", "\n", "        ", "for", "pipe", "in", "self", ".", "remotes", ":", "\n", "            ", "pipe", ".", "send", "(", "(", "'render'", ",", "None", ")", ")", "\n", "", "imgs", "=", "[", "pipe", ".", "recv", "(", ")", "for", "pipe", "in", "self", ".", "remotes", "]", "\n", "return", "imgs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.vec_env.subproc_vec_env.worker": [[5, 36], ["parent_remote.close", "env_fn_wrapper.x", "env_fn_wrapper.x.close", "remote.recv", "print", "env_fn_wrapper.x.step", "remote.send", "env_fn_wrapper.x.reset", "env_fn_wrapper.x.reset", "remote.send", "remote.send", "hasattr", "env_fn_wrapper.x.get_curr_ac", "remote.send", "env_fn_wrapper.x.render", "remote.close", "remote.send"], "function", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.monitor.Monitor.close", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.monitor.Monitor.close", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.monitor.Monitor.step", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.monitor.Monitor.reset", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.monitor.Monitor.reset", "home.repos.pwc.inspect_result.tgangwani_QDAgents.vec_env.__init__.VecEnvWrapper.render", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.monitor.Monitor.close"], ["def", "worker", "(", "remote", ",", "parent_remote", ",", "env_fn_wrapper", ")", ":", "\n", "    ", "parent_remote", ".", "close", "(", ")", "\n", "env", "=", "env_fn_wrapper", ".", "x", "(", ")", "\n", "\n", "try", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "cmd", ",", "data", "=", "remote", ".", "recv", "(", ")", "\n", "if", "cmd", "==", "'step'", ":", "\n", "                ", "ob", ",", "reward", ",", "done", ",", "info", "=", "env", ".", "step", "(", "data", ")", "\n", "if", "done", ":", "\n", "                    ", "ob", "=", "env", ".", "reset", "(", ")", "\n", "", "remote", ".", "send", "(", "(", "ob", ",", "reward", ",", "done", ",", "info", ")", ")", "\n", "", "elif", "cmd", "==", "'reset'", ":", "\n", "                ", "ob", "=", "env", ".", "reset", "(", ")", "\n", "remote", ".", "send", "(", "ob", ")", "\n", "", "elif", "cmd", "==", "'expert_ac'", ":", "\n", "                ", "ac", "=", "env", ".", "get_curr_ac", "(", ")", "if", "hasattr", "(", "env", ",", "'get_curr_ac'", ")", "else", "None", "\n", "remote", ".", "send", "(", "ac", ")", "\n", "", "elif", "cmd", "==", "'render'", ":", "\n", "                ", "remote", ".", "send", "(", "env", ".", "render", "(", "mode", "=", "'rgb_array'", ")", ")", "\n", "", "elif", "cmd", "==", "'close'", ":", "\n", "                ", "remote", ".", "close", "(", ")", "\n", "break", "\n", "", "elif", "cmd", "==", "'get_spaces'", ":", "\n", "                ", "remote", ".", "send", "(", "(", "env", ".", "observation_space", ",", "env", ".", "action_space", ")", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "", "", "", "except", "KeyboardInterrupt", ":", "\n", "        ", "print", "(", "'SubprocVecEnv worker: got KeyboardInterrupt'", ")", "\n", "", "finally", ":", "\n", "        ", "env", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.vec_env.dummy_vec_env.DummyVecEnv.__init__": [[7, 19], ["VecEnv.__init__", "util.obs_space_info", "numpy.zeros", "numpy.zeros", "fn", "len", "numpy.zeros", "range", "tuple"], "methods", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.buffers.storage.RolloutStorage.__init__", "home.repos.pwc.inspect_result.tgangwani_QDAgents.vec_env.util.obs_space_info"], ["    ", "def", "__init__", "(", "self", ",", "env_fns", ")", ":", "\n", "        ", "self", ".", "envs", "=", "[", "fn", "(", ")", "for", "fn", "in", "env_fns", "]", "\n", "env", "=", "self", ".", "envs", "[", "0", "]", "\n", "VecEnv", ".", "__init__", "(", "self", ",", "len", "(", "env_fns", ")", ",", "env", ".", "observation_space", ",", "env", ".", "action_space", ")", "\n", "obs_space", "=", "env", ".", "observation_space", "\n", "\n", "self", ".", "keys", ",", "shapes", ",", "dtypes", "=", "obs_space_info", "(", "obs_space", ")", "\n", "self", ".", "buf_obs", "=", "{", "k", ":", "np", ".", "zeros", "(", "(", "self", ".", "num_envs", ",", ")", "+", "tuple", "(", "shapes", "[", "k", "]", ")", ",", "dtype", "=", "dtypes", "[", "k", "]", ")", "for", "k", "in", "self", ".", "keys", "}", "\n", "self", ".", "buf_dones", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_envs", ",", ")", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "self", ".", "buf_rews", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_envs", ",", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "buf_infos", "=", "[", "{", "}", "for", "_", "in", "range", "(", "self", ".", "num_envs", ")", "]", "\n", "self", ".", "actions", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.vec_env.dummy_vec_env.DummyVecEnv.step_async": [[20, 33], ["len"], "methods", ["None"], ["", "def", "step_async", "(", "self", ",", "actions", ")", ":", "\n", "        ", "listify", "=", "True", "\n", "try", ":", "\n", "            ", "if", "len", "(", "actions", ")", "==", "self", ".", "num_envs", ":", "\n", "                ", "listify", "=", "False", "\n", "", "", "except", "TypeError", ":", "\n", "            ", "pass", "\n", "\n", "", "if", "not", "listify", ":", "\n", "            ", "self", ".", "actions", "=", "actions", "\n", "", "else", ":", "\n", "            ", "assert", "self", ".", "num_envs", "==", "1", ",", "\"actions {} is either not a list or has a wrong size - cannot match to {} environments\"", ".", "format", "(", "actions", ",", "self", ".", "num_envs", ")", "\n", "self", ".", "actions", "=", "[", "actions", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.vec_env.dummy_vec_env.DummyVecEnv.step_wait": [[34, 46], ["range", "isinstance", "dummy_vec_env.DummyVecEnv.envs[].step", "dummy_vec_env.DummyVecEnv._save_obs", "dummy_vec_env.DummyVecEnv._obs_from_buf", "numpy.copy", "numpy.copy", "dummy_vec_env.DummyVecEnv.buf_infos.copy", "int", "dummy_vec_env.DummyVecEnv.envs[].reset"], "methods", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.monitor.Monitor.step", "home.repos.pwc.inspect_result.tgangwani_QDAgents.vec_env.dummy_vec_env.DummyVecEnv._save_obs", "home.repos.pwc.inspect_result.tgangwani_QDAgents.vec_env.dummy_vec_env.DummyVecEnv._obs_from_buf", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.monitor.Monitor.reset"], ["", "", "def", "step_wait", "(", "self", ")", ":", "\n", "        ", "for", "e", "in", "range", "(", "self", ".", "num_envs", ")", ":", "\n", "            ", "action", "=", "self", ".", "actions", "[", "e", "]", "\n", "if", "isinstance", "(", "self", ".", "envs", "[", "e", "]", ".", "action_space", ",", "spaces", ".", "Discrete", ")", ":", "\n", "                ", "action", "=", "int", "(", "action", ")", "\n", "\n", "", "obs", ",", "self", ".", "buf_rews", "[", "e", "]", ",", "self", ".", "buf_dones", "[", "e", "]", ",", "self", ".", "buf_infos", "[", "e", "]", "=", "self", ".", "envs", "[", "e", "]", ".", "step", "(", "action", ")", "\n", "if", "self", ".", "buf_dones", "[", "e", "]", ":", "\n", "                ", "obs", "=", "self", ".", "envs", "[", "e", "]", ".", "reset", "(", ")", "\n", "", "self", ".", "_save_obs", "(", "e", ",", "obs", ")", "\n", "", "return", "(", "self", ".", "_obs_from_buf", "(", ")", ",", "np", ".", "copy", "(", "self", ".", "buf_rews", ")", ",", "np", ".", "copy", "(", "self", ".", "buf_dones", ")", ",", "\n", "self", ".", "buf_infos", ".", "copy", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.vec_env.dummy_vec_env.DummyVecEnv.reset": [[47, 52], ["range", "dummy_vec_env.DummyVecEnv._obs_from_buf", "dummy_vec_env.DummyVecEnv.envs[].reset", "dummy_vec_env.DummyVecEnv._save_obs"], "methods", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.vec_env.dummy_vec_env.DummyVecEnv._obs_from_buf", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.monitor.Monitor.reset", "home.repos.pwc.inspect_result.tgangwani_QDAgents.vec_env.dummy_vec_env.DummyVecEnv._save_obs"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "for", "e", "in", "range", "(", "self", ".", "num_envs", ")", ":", "\n", "            ", "obs", "=", "self", ".", "envs", "[", "e", "]", ".", "reset", "(", ")", "\n", "self", ".", "_save_obs", "(", "e", ",", "obs", ")", "\n", "", "return", "self", ".", "_obs_from_buf", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.vec_env.dummy_vec_env.DummyVecEnv.close": [[53, 55], ["None"], "methods", ["None"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.vec_env.dummy_vec_env.DummyVecEnv._save_obs": [[56, 62], ["None"], "methods", ["None"], ["", "def", "_save_obs", "(", "self", ",", "e", ",", "obs", ")", ":", "\n", "        ", "for", "k", "in", "self", ".", "keys", ":", "\n", "            ", "if", "k", "is", "None", ":", "\n", "                ", "self", ".", "buf_obs", "[", "k", "]", "[", "e", "]", "=", "obs", "\n", "", "else", ":", "\n", "                ", "self", ".", "buf_obs", "[", "k", "]", "[", "e", "]", "=", "obs", "[", "k", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.vec_env.dummy_vec_env.DummyVecEnv._obs_from_buf": [[63, 65], ["util.dict_to_obs", "util.copy_obs_dict"], "methods", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.vec_env.util.dict_to_obs", "home.repos.pwc.inspect_result.tgangwani_QDAgents.vec_env.util.copy_obs_dict"], ["", "", "", "def", "_obs_from_buf", "(", "self", ")", ":", "\n", "        ", "return", "dict_to_obs", "(", "copy_obs_dict", "(", "self", ".", "buf_obs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.vec_env.dummy_vec_env.DummyVecEnv.get_images": [[66, 68], ["env.render"], "methods", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.vec_env.__init__.VecEnvWrapper.render"], ["", "def", "get_images", "(", "self", ")", ":", "\n", "        ", "return", "[", "env", ".", "render", "(", "mode", "=", "'rgb_array'", ",", "width", "=", "1024", ",", "height", "=", "1024", ")", "for", "env", "in", "self", ".", "envs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.vec_env.__init__.AlreadySteppingError.__init__": [[9, 12], ["Exception.__init__"], "methods", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.buffers.storage.RolloutStorage.__init__"], []], "home.repos.pwc.inspect_result.tgangwani_QDAgents.vec_env.__init__.NotSteppingError.__init__": [[20, 23], ["Exception.__init__"], "methods", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.buffers.storage.RolloutStorage.__init__"], []], "home.repos.pwc.inspect_result.tgangwani_QDAgents.vec_env.__init__.VecEnv.__init__": [[30, 36], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.tgangwani_QDAgents.vec_env.__init__.VecEnv.reset": [[37, 48], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.tgangwani_QDAgents.vec_env.__init__.VecEnv.step_async": [[49, 60], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.tgangwani_QDAgents.vec_env.__init__.VecEnv.step_wait": [[61, 74], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.tgangwani_QDAgents.vec_env.__init__.VecEnv.close_extras": [[75, 81], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.tgangwani_QDAgents.vec_env.__init__.VecEnv.close": [[82, 89], ["__init__.VecEnv.close_extras", "__init__.VecEnv.viewer.close"], "methods", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.vec_env.__init__.VecEnv.close_extras", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.monitor.Monitor.close"], []], "home.repos.pwc.inspect_result.tgangwani_QDAgents.vec_env.__init__.VecEnv.step": [[90, 98], ["__init__.VecEnv.step_async", "__init__.VecEnv.step_wait"], "methods", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.vec_env.__init__.VecEnvWrapper.step_async", "home.repos.pwc.inspect_result.tgangwani_QDAgents.vec_env.__init__.VecEnvWrapper.step_wait"], []], "home.repos.pwc.inspect_result.tgangwani_QDAgents.vec_env.__init__.VecEnv.render": [[99, 101], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.tgangwani_QDAgents.vec_env.__init__.VecEnv.get_images": [[102, 107], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.tgangwani_QDAgents.vec_env.__init__.VecEnv.unwrapped": [[108, 114], ["isinstance"], "methods", ["None"], []], "home.repos.pwc.inspect_result.tgangwani_QDAgents.vec_env.__init__.VecEnv.get_viewer": [[115, 120], ["rendering.SimpleImageViewer"], "methods", ["None"], []], "home.repos.pwc.inspect_result.tgangwani_QDAgents.vec_env.__init__.VecEnvWrapper.__init__": [[128, 134], ["VecEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.buffers.storage.RolloutStorage.__init__"], []], "home.repos.pwc.inspect_result.tgangwani_QDAgents.vec_env.__init__.VecEnvWrapper.step_async": [[135, 137], ["__init__.VecEnvWrapper.venv.step_async"], "methods", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.vec_env.__init__.VecEnvWrapper.step_async"], []], "home.repos.pwc.inspect_result.tgangwani_QDAgents.vec_env.__init__.VecEnvWrapper.reset": [[138, 141], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.tgangwani_QDAgents.vec_env.__init__.VecEnvWrapper.step_wait": [[142, 145], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.tgangwani_QDAgents.vec_env.__init__.VecEnvWrapper.close": [[146, 148], ["__init__.VecEnvWrapper.venv.close"], "methods", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.monitor.Monitor.close"], []], "home.repos.pwc.inspect_result.tgangwani_QDAgents.vec_env.__init__.VecEnvWrapper.render": [[149, 151], ["__init__.VecEnvWrapper.venv.render"], "methods", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.vec_env.__init__.VecEnvWrapper.render"], []], "home.repos.pwc.inspect_result.tgangwani_QDAgents.vec_env.__init__.VecEnvWrapper.get_images": [[152, 154], ["__init__.VecEnvWrapper.venv.get_images"], "methods", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.vec_env.__init__.VecEnvWrapper.get_images"], []], "home.repos.pwc.inspect_result.tgangwani_QDAgents.vec_env.__init__.CloudpickleWrapper.__init__": [[160, 162], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.tgangwani_QDAgents.vec_env.__init__.CloudpickleWrapper.__getstate__": [[163, 166], ["cloudpickle.dumps"], "methods", ["None"], []], "home.repos.pwc.inspect_result.tgangwani_QDAgents.vec_env.__init__.CloudpickleWrapper.__setstate__": [[167, 170], ["pickle.loads"], "methods", ["None"], []], "home.repos.pwc.inspect_result.tgangwani_QDAgents.vec_env.util.copy_obs_dict": [[11, 16], ["numpy.copy", "obs.items"], "function", ["None"], ["def", "copy_obs_dict", "(", "obs", ")", ":", "\n", "    ", "\"\"\"\n    Deep-copy an observation dict.\n    \"\"\"", "\n", "return", "{", "k", ":", "np", ".", "copy", "(", "v", ")", "for", "k", ",", "v", "in", "obs", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.vec_env.util.dict_to_obs": [[18, 26], ["set", "obs_dict.keys"], "function", ["None"], ["", "def", "dict_to_obs", "(", "obs_dict", ")", ":", "\n", "    ", "\"\"\"\n    Convert an observation dict into a raw array if the\n    original observation space was not a Dict space.\n    \"\"\"", "\n", "if", "set", "(", "obs_dict", ".", "keys", "(", ")", ")", "==", "{", "None", "}", ":", "\n", "        ", "return", "obs_dict", "[", "None", "]", "\n", "", "return", "obs_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.vec_env.util.obs_space_info": [[28, 51], ["isinstance", "subspaces.items", "isinstance", "keys.append"], "function", ["None"], ["", "def", "obs_space_info", "(", "obs_space", ")", ":", "\n", "    ", "\"\"\"\n    Get dict-structured information about a gym.Space.\n\n    Returns:\n      A tuple (keys, shapes, dtypes):\n        keys: a list of dict keys.\n        shapes: a dict mapping keys to shapes.\n        dtypes: a dict mapping keys to dtypes.\n    \"\"\"", "\n", "if", "isinstance", "(", "obs_space", ",", "gym", ".", "spaces", ".", "Dict", ")", ":", "\n", "        ", "assert", "isinstance", "(", "obs_space", ".", "spaces", ",", "OrderedDict", ")", "\n", "subspaces", "=", "obs_space", ".", "spaces", "\n", "", "else", ":", "\n", "        ", "subspaces", "=", "{", "None", ":", "obs_space", "}", "\n", "", "keys", "=", "[", "]", "\n", "shapes", "=", "{", "}", "\n", "dtypes", "=", "{", "}", "\n", "for", "key", ",", "box", "in", "subspaces", ".", "items", "(", ")", ":", "\n", "        ", "keys", ".", "append", "(", "key", ")", "\n", "shapes", "[", "key", "]", "=", "box", ".", "shape", "\n", "dtypes", "[", "key", "]", "=", "box", ".", "dtype", "\n", "", "return", "keys", ",", "shapes", ",", "dtypes", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.vec_env.util.obs_to_dict": [[53, 60], ["isinstance"], "function", ["None"], ["", "def", "obs_to_dict", "(", "obs", ")", ":", "\n", "    ", "\"\"\"\n    Convert an observation into a dict.\n    \"\"\"", "\n", "if", "isinstance", "(", "obs", ",", "dict", ")", ":", "\n", "        ", "return", "obs", "\n", "", "return", "{", "None", ":", "obs", "}", "\n", "", ""]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.OutputFormat.writekvs": [[20, 25], ["None"], "methods", ["None"], ["    ", "def", "writekvs", "(", "self", ",", "kvs", ")", ":", "\n", "        ", "\"\"\"\n        Write key-value pairs\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.OutputFormat.writeseq": [[26, 31], ["None"], "methods", ["None"], ["", "def", "writeseq", "(", "self", ",", "args", ")", ":", "\n", "        ", "\"\"\"\n        Write a sequence of other data (e.g. a logging message)\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.OutputFormat.close": [[32, 34], ["None"], "methods", ["None"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.HumanOutputFormat.__init__": [[37, 39], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "file", ")", ":", "\n", "        ", "self", ".", "file", "=", "file", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.HumanOutputFormat.writekvs": [[40, 69], ["sorted", "max", "max", "sorted", "lines.append", "logger.HumanOutputFormat.file.write", "logger.HumanOutputFormat.file.flush", "kvs.items", "isinstance", "logger.HumanOutputFormat._truncate", "map", "map", "key2str.items", "lines.append", "str", "key2str.keys", "key2str.values", "logger.HumanOutputFormat._truncate", "len", "len"], "methods", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.HumanOutputFormat._truncate", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.HumanOutputFormat._truncate"], ["", "def", "writekvs", "(", "self", ",", "kvs", ")", ":", "\n", "# Create strings for printing", "\n", "        ", "key2str", "=", "{", "}", "\n", "for", "(", "key", ",", "val", ")", "in", "sorted", "(", "kvs", ".", "items", "(", ")", ")", ":", "\n", "            ", "if", "isinstance", "(", "val", ",", "float", ")", ":", "\n", "                ", "valstr", "=", "'%-8.3g'", "%", "(", "val", ",", ")", "\n", "", "else", ":", "\n", "                ", "valstr", "=", "str", "(", "val", ")", "\n", "", "key2str", "[", "self", ".", "_truncate", "(", "key", ")", "]", "=", "self", ".", "_truncate", "(", "valstr", ")", "\n", "\n", "# Find max widths", "\n", "", "keywidth", "=", "max", "(", "map", "(", "len", ",", "key2str", ".", "keys", "(", ")", ")", ")", "\n", "valwidth", "=", "max", "(", "map", "(", "len", ",", "key2str", ".", "values", "(", ")", ")", ")", "\n", "\n", "# Write out the data", "\n", "dashes", "=", "'-'", "*", "(", "keywidth", "+", "valwidth", "+", "7", ")", "\n", "lines", "=", "[", "dashes", "]", "\n", "for", "(", "key", ",", "val", ")", "in", "sorted", "(", "key2str", ".", "items", "(", ")", ")", ":", "\n", "            ", "lines", ".", "append", "(", "'| %s%s | %s%s |'", "%", "(", "\n", "key", ",", "\n", "' '", "*", "(", "keywidth", "-", "len", "(", "key", ")", ")", ",", "\n", "val", ",", "\n", "' '", "*", "(", "valwidth", "-", "len", "(", "val", ")", ")", ",", "\n", ")", ")", "\n", "", "lines", ".", "append", "(", "dashes", ")", "\n", "self", ".", "file", ".", "write", "(", "'\\n'", ".", "join", "(", "lines", ")", "+", "'\\n'", ")", "\n", "\n", "# Flush the output to the file", "\n", "self", ".", "file", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.HumanOutputFormat._truncate": [[70, 72], ["len"], "methods", ["None"], ["", "def", "_truncate", "(", "self", ",", "s", ")", ":", "\n", "        ", "return", "s", "[", ":", "20", "]", "+", "'...'", "if", "len", "(", "s", ")", ">", "23", "else", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.HumanOutputFormat.writeseq": [[73, 78], ["logger.HumanOutputFormat.file.write", "logger.HumanOutputFormat.file.flush", "logger.HumanOutputFormat.file.write"], "methods", ["None"], ["", "def", "writeseq", "(", "self", ",", "args", ")", ":", "\n", "        ", "for", "arg", "in", "args", ":", "\n", "            ", "self", ".", "file", ".", "write", "(", "arg", ")", "\n", "", "self", ".", "file", ".", "write", "(", "'\\n'", ")", "\n", "self", ".", "file", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.JSONOutputFormat.__init__": [[80, 82], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "file", ")", ":", "\n", "        ", "self", ".", "file", "=", "file", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.JSONOutputFormat.writekvs": [[83, 90], ["sorted", "logger.JSONOutputFormat.file.write", "logger.JSONOutputFormat.file.flush", "kvs.items", "hasattr", "v.tolist.tolist.tolist", "float", "json.dumps"], "methods", ["None"], ["", "def", "writekvs", "(", "self", ",", "kvs", ")", ":", "\n", "        ", "for", "k", ",", "v", "in", "sorted", "(", "kvs", ".", "items", "(", ")", ")", ":", "\n", "            ", "if", "hasattr", "(", "v", ",", "'dtype'", ")", ":", "\n", "                ", "v", "=", "v", ".", "tolist", "(", ")", "\n", "kvs", "[", "k", "]", "=", "float", "(", "v", ")", "\n", "", "", "self", ".", "file", ".", "write", "(", "json", ".", "dumps", "(", "kvs", ")", "+", "'\\n'", ")", "\n", "self", ".", "file", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.TensorBoardOutputFormat.__init__": [[95, 109], ["os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "os.join", "os.join", "pywrap_tensorflow.EventsWriter", "os.abspath", "os.abspath", "compat.as_bytes"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "dir", ",", "exist_ok", "=", "True", ")", "\n", "self", ".", "dir", "=", "dir", "\n", "self", ".", "step", "=", "1", "\n", "prefix", "=", "'events'", "\n", "path", "=", "osp", ".", "join", "(", "osp", ".", "abspath", "(", "dir", ")", ",", "prefix", ")", "\n", "import", "tensorflow", "as", "tf", "\n", "from", "tensorflow", ".", "python", "import", "pywrap_tensorflow", "\n", "from", "tensorflow", ".", "core", ".", "util", "import", "event_pb2", "\n", "from", "tensorflow", ".", "python", ".", "util", "import", "compat", "\n", "self", ".", "tf", "=", "tf", "\n", "self", ".", "event_pb2", "=", "event_pb2", "\n", "self", ".", "pywrap_tensorflow", "=", "pywrap_tensorflow", "\n", "self", ".", "writer", "=", "pywrap_tensorflow", ".", "EventsWriter", "(", "compat", ".", "as_bytes", "(", "path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.TensorBoardOutputFormat.writekvs": [[110, 120], ["logger.TensorBoardOutputFormat.tf.Summary", "logger.TensorBoardOutputFormat.event_pb2.Event", "logger.TensorBoardOutputFormat.writer.WriteEvent", "logger.TensorBoardOutputFormat.writer.Flush", "logger.TensorBoardOutputFormat.tf.Summary.Value", "float", "time.time", "logger.TensorBoardOutputFormat.writekvs.summary_val"], "methods", ["None"], ["", "def", "writekvs", "(", "self", ",", "kvs", ")", ":", "\n", "        ", "def", "summary_val", "(", "k", ",", "v", ")", ":", "\n", "            ", "kwargs", "=", "{", "'tag'", ":", "k", ",", "'simple_value'", ":", "float", "(", "v", ")", "}", "\n", "return", "self", ".", "tf", ".", "Summary", ".", "Value", "(", "**", "kwargs", ")", "\n", "", "summary", "=", "self", ".", "tf", ".", "Summary", "(", "value", "=", "[", "summary_val", "(", "k", ",", "v", ")", "for", "k", ",", "v", "in", "kvs", ".", "items", "(", ")", "]", ")", "\n", "event", "=", "self", ".", "event_pb2", ".", "Event", "(", "wall_time", "=", "time", ".", "time", "(", ")", ",", "summary", "=", "summary", ")", "\n", "event", ".", "step", "=", "self", ".", "step", "# is there any reason why you'd want to specify the step?", "\n", "self", ".", "writer", ".", "WriteEvent", "(", "event", ")", "\n", "self", ".", "writer", ".", "Flush", "(", ")", "\n", "self", ".", "step", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.TensorBoardOutputFormat.close": [[121, 125], ["logger.TensorBoardOutputFormat.writer.Close"], "methods", ["None"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "writer", ":", "\n", "            ", "self", ".", "writer", ".", "Close", "(", ")", "\n", "self", ".", "writer", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.Logger.__init__": [[223, 228], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "dir", ",", "output_formats", ")", ":", "\n", "        ", "self", ".", "name2val", "=", "{", "}", "# values this iteration", "\n", "self", ".", "level", "=", "INFO", "\n", "self", ".", "dir", "=", "dir", "\n", "self", ".", "output_formats", "=", "output_formats", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.Logger.logkv": [[231, 233], ["None"], "methods", ["None"], ["", "def", "logkv", "(", "self", ",", "key", ",", "val", ")", ":", "\n", "        ", "self", ".", "name2val", "[", "key", "]", "=", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.Logger.dumpkvs": [[234, 239], ["logger.Logger.name2val.clear", "fmt.writekvs"], "methods", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.TensorBoardOutputFormat.writekvs"], ["", "def", "dumpkvs", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "level", "==", "DISABLED", ":", "return", "\n", "for", "fmt", "in", "self", ".", "output_formats", ":", "\n", "            ", "fmt", ".", "writekvs", "(", "self", ".", "name2val", ")", "\n", "", "self", ".", "name2val", ".", "clear", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.Logger.log": [[240, 243], ["logger.Logger._do_log"], "methods", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.Logger._do_log"], ["", "def", "log", "(", "self", ",", "*", "args", ",", "level", "=", "INFO", ")", ":", "\n", "        ", "if", "self", ".", "level", "<=", "level", ":", "\n", "            ", "self", ".", "_do_log", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.Logger.update_output_formats": [[244, 246], ["None"], "methods", ["None"], ["", "", "def", "update_output_formats", "(", "self", ",", "new_op_formats", ")", ":", "\n", "      ", "self", ".", "output_formats", "=", "new_op_formats", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.Logger.set_level": [[249, 251], ["None"], "methods", ["None"], ["", "def", "set_level", "(", "self", ",", "level", ")", ":", "\n", "        ", "self", ".", "level", "=", "level", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.Logger.get_dir": [[252, 254], ["None"], "methods", ["None"], ["", "def", "get_dir", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "dir", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.Logger.close": [[255, 258], ["fmt.close"], "methods", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.monitor.Monitor.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "for", "fmt", "in", "self", ".", "output_formats", ":", "\n", "            ", "fmt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.Logger._do_log": [[261, 264], ["fmt.writeseq"], "methods", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.HumanOutputFormat.writeseq"], ["", "", "def", "_do_log", "(", "self", ",", "args", ")", ":", "\n", "        ", "for", "fmt", "in", "self", ".", "output_formats", ":", "\n", "            ", "fmt", ".", "writeseq", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.make_output_format": [[127, 141], ["os.makedirs", "os.makedirs", "logger.HumanOutputFormat", "open", "logger.HumanOutputFormat", "os.join", "open", "logger.JSONOutputFormat", "os.join", "logger.TensorBoardOutputFormat", "ValueError", "os.join"], "function", ["None"], ["", "", "", "def", "make_output_format", "(", "format", ",", "ev_dir", ")", ":", "\n", "    ", "os", ".", "makedirs", "(", "ev_dir", ",", "exist_ok", "=", "True", ")", "\n", "if", "format", "==", "'stdout'", ":", "\n", "        ", "return", "HumanOutputFormat", "(", "sys", ".", "stdout", ")", "\n", "", "elif", "format", "==", "'log'", ":", "\n", "        ", "log_file", "=", "open", "(", "osp", ".", "join", "(", "ev_dir", ",", "'log.txt'", ")", ",", "'wt'", ")", "\n", "return", "HumanOutputFormat", "(", "log_file", ")", "\n", "", "elif", "format", "==", "'json'", ":", "\n", "        ", "json_file", "=", "open", "(", "osp", ".", "join", "(", "ev_dir", ",", "'progress.json'", ")", ",", "'wt'", ")", "\n", "return", "JSONOutputFormat", "(", "json_file", ")", "\n", "", "elif", "format", "==", "'tensorboard'", ":", "\n", "        ", "return", "TensorBoardOutputFormat", "(", "osp", ".", "join", "(", "ev_dir", ",", "'tb'", ")", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Unknown format specified: %s'", "%", "(", "format", ",", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.logkv": [[146, 152], ["Logger.CURRENT.logkv"], "function", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.logkv"], ["", "", "def", "logkv", "(", "key", ",", "val", ")", ":", "\n", "    ", "\"\"\"\n    Log a value of some diagnostic\n    Call this once for each diagnostic quantity, each iteration\n    \"\"\"", "\n", "Logger", ".", "CURRENT", ".", "logkv", "(", "key", ",", "val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.logkvs": [[153, 159], ["d.items", "logger.logkv"], "function", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.logkv"], ["", "def", "logkvs", "(", "d", ")", ":", "\n", "    ", "\"\"\"\n    Log a dictionary of key-value pairs\n    \"\"\"", "\n", "for", "(", "k", ",", "v", ")", "in", "d", ".", "items", "(", ")", ":", "\n", "        ", "logkv", "(", "k", ",", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.dumpkvs": [[160, 168], ["Logger.CURRENT.dumpkvs"], "function", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.dumpkvs"], ["", "", "def", "dumpkvs", "(", ")", ":", "\n", "    ", "\"\"\"\n    Write all of the diagnostics from the current iteration\n\n    level: int. (see logger.py docs) If the global logger level is higher than\n                the level argument here, don't print to stdout.\n    \"\"\"", "\n", "Logger", ".", "CURRENT", ".", "dumpkvs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.getkvs": [[169, 171], ["None"], "function", ["None"], ["", "def", "getkvs", "(", ")", ":", "\n", "    ", "return", "Logger", ".", "CURRENT", ".", "name2val", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log": [[173, 178], ["Logger.CURRENT.log"], "function", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log"], ["", "def", "log", "(", "*", "args", ",", "level", "=", "INFO", ")", ":", "\n", "    ", "\"\"\"\n    Write the sequence of args, with no separators, to the console and output files (if you've configured an output file).\n    \"\"\"", "\n", "Logger", ".", "CURRENT", ".", "log", "(", "*", "args", ",", "level", "=", "level", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.debug": [[180, 182], ["logger.log"], "function", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log"], ["", "def", "debug", "(", "*", "args", ")", ":", "\n", "    ", "log", "(", "*", "args", ",", "level", "=", "DEBUG", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.info": [[184, 186], ["logger.log"], "function", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log"], ["", "def", "info", "(", "*", "args", ")", ":", "\n", "    ", "log", "(", "*", "args", ",", "level", "=", "INFO", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.warn": [[188, 190], ["logger.log"], "function", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log"], ["", "def", "warn", "(", "*", "args", ")", ":", "\n", "    ", "log", "(", "*", "args", ",", "level", "=", "WARN", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.error": [[192, 194], ["logger.log"], "function", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log"], ["", "def", "error", "(", "*", "args", ")", ":", "\n", "    ", "log", "(", "*", "args", ",", "level", "=", "ERROR", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.update_output_formats": [[195, 197], ["Logger.CURRENT.update_output_formats"], "function", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.update_output_formats"], ["", "def", "update_output_formats", "(", "new_op_fmts", ")", ":", "\n", "    ", "Logger", ".", "CURRENT", ".", "update_output_formats", "(", "new_op_fmts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.set_level": [[198, 203], ["Logger.CURRENT.set_level"], "function", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.set_level"], ["", "def", "set_level", "(", "level", ")", ":", "\n", "    ", "\"\"\"\n    Set logging threshold on current logger.\n    \"\"\"", "\n", "Logger", ".", "CURRENT", ".", "set_level", "(", "level", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.get_dir": [[204, 210], ["Logger.CURRENT.get_dir"], "function", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.get_dir"], ["", "def", "get_dir", "(", ")", ":", "\n", "    ", "\"\"\"\n    Get directory that log files are being written to.\n    will be None if there is no output directory (i.e., if you didn't call start)\n    \"\"\"", "\n", "return", "Logger", ".", "CURRENT", ".", "get_dir", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.configure": [[267, 281], ["logger.Logger", "logger.log", "os.getenv", "os.getenv", "os.join", "logger.make_output_format", "tempfile.gettempdir", "datetime.datetime.now().strftime", "datetime.datetime.now"], "function", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.make_output_format"], ["def", "configure", "(", "dir", "=", "None", ",", "format_strs", "=", "None", ")", ":", "\n", "    ", "assert", "Logger", ".", "CURRENT", "is", "Logger", ".", "DEFAULT", ",", "\"Only call logger.configure() when it's in the default state. Try calling logger.reset() first.\"", "\n", "prevlogger", "=", "Logger", ".", "CURRENT", "\n", "if", "dir", "is", "None", ":", "\n", "        ", "dir", "=", "os", ".", "getenv", "(", "'OPENAI_LOGDIR'", ")", "\n", "", "if", "dir", "is", "None", ":", "\n", "        ", "dir", "=", "osp", ".", "join", "(", "tempfile", ".", "gettempdir", "(", ")", ",", "\n", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"openai-%Y-%m-%d-%H-%M-%S-%f\"", ")", ")", "\n", "", "if", "format_strs", "is", "None", ":", "\n", "        ", "format_strs", "=", "LOG_OUTPUT_FORMATS", "\n", "", "output_formats", "=", "[", "make_output_format", "(", "f", ",", "dir", ")", "for", "f", "in", "format_strs", "]", "\n", "Logger", ".", "CURRENT", "=", "Logger", "(", "dir", "=", "dir", ",", "output_formats", "=", "output_formats", ")", "\n", "log", "(", "'Logging to %s'", "%", "dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.reset": [[288, 291], ["logger.log"], "function", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log"], ["", "def", "reset", "(", ")", ":", "\n", "    ", "Logger", ".", "CURRENT", "=", "Logger", ".", "DEFAULT", "\n", "log", "(", "'Reset logger'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger._demo": [[294, 316], ["logger.info", "logger.debug", "logger.set_level", "logger.debug", "os.path.exists", "os.path.exists", "logger.logkv", "logger.dumpkvs", "logger.logkv", "logger.dumpkvs", "shutil.rmtree", "session", "logger.logkv", "logger.logkv", "logger.dumpkvs", "logger.logkv", "logger.logkv", "logger.dumpkvs", "logger.info"], "function", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.info", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.debug", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.set_level", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.debug", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.logkv", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.dumpkvs", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.logkv", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.dumpkvs", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.logkv", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.logkv", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.dumpkvs", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.logkv", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.logkv", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.dumpkvs", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.info"], ["", "def", "_demo", "(", ")", ":", "\n", "    ", "info", "(", "\"hi\"", ")", "\n", "debug", "(", "\"shouldn't appear\"", ")", "\n", "set_level", "(", "DEBUG", ")", "\n", "debug", "(", "\"should appear\"", ")", "\n", "dir", "=", "\"/tmp/testlogging\"", "\n", "if", "os", ".", "path", ".", "exists", "(", "dir", ")", ":", "\n", "        ", "shutil", ".", "rmtree", "(", "dir", ")", "\n", "", "with", "session", "(", "dir", "=", "dir", ")", ":", "\n", "        ", "logkv", "(", "\"a\"", ",", "3", ")", "\n", "logkv", "(", "\"b\"", ",", "2.5", ")", "\n", "dumpkvs", "(", ")", "\n", "logkv", "(", "\"b\"", ",", "-", "2.5", ")", "\n", "logkv", "(", "\"a\"", ",", "5.5", ")", "\n", "dumpkvs", "(", ")", "\n", "info", "(", "\"^^^ should see a = 5.5\"", ")", "\n", "\n", "", "logkv", "(", "\"b\"", ",", "-", "2.5", ")", "\n", "dumpkvs", "(", ")", "\n", "\n", "logkv", "(", "\"a\"", ",", "\"longasslongasslongasslongasslongasslongassvalue\"", ")", "\n", "dumpkvs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.monitor.Monitor.__init__": [[16, 34], ["gym.core.Wrapper.__init__", "time.time", "monitor.ResultsWriter", "time.time"], "methods", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.buffers.storage.RolloutStorage.__init__"], ["def", "__init__", "(", "self", ",", "env", ",", "filename", ",", "allow_early_resets", "=", "False", ",", "reset_keywords", "=", "(", ")", ",", "info_keywords", "=", "(", ")", ")", ":", "\n", "        ", "Wrapper", ".", "__init__", "(", "self", ",", "env", "=", "env", ")", "\n", "self", ".", "tstart", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "results_writer", "=", "ResultsWriter", "(", "\n", "filename", ",", "\n", "header", "=", "{", "\"t_start\"", ":", "time", ".", "time", "(", ")", ",", "'env_id'", ":", "env", ".", "spec", "and", "env", ".", "spec", ".", "id", "}", ",", "\n", "extra_keys", "=", "reset_keywords", "+", "info_keywords", "\n", ")", "\n", "self", ".", "reset_keywords", "=", "reset_keywords", "\n", "self", ".", "info_keywords", "=", "info_keywords", "\n", "self", ".", "allow_early_resets", "=", "allow_early_resets", "\n", "self", ".", "rewards", "=", "None", "\n", "self", ".", "needs_reset", "=", "True", "\n", "self", ".", "episode_rewards", "=", "[", "]", "\n", "self", ".", "episode_lengths", "=", "[", "]", "\n", "self", ".", "episode_times", "=", "[", "]", "\n", "self", ".", "total_steps", "=", "0", "\n", "self", ".", "current_reset_info", "=", "{", "}", "# extra info about the current episode, that was passed in during reset()", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.monitor.Monitor.reset": [[35, 43], ["monitor.Monitor.reset_state", "monitor.Monitor.env.reset", "kwargs.get", "ValueError"], "methods", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.monitor.Monitor.reset_state", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.monitor.Monitor.reset"], ["", "def", "reset", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "reset_state", "(", ")", "\n", "for", "k", "in", "self", ".", "reset_keywords", ":", "\n", "            ", "v", "=", "kwargs", ".", "get", "(", "k", ")", "\n", "if", "v", "is", "None", ":", "\n", "                ", "raise", "ValueError", "(", "'Expected you to pass kwarg %s into reset'", "%", "k", ")", "\n", "", "self", ".", "current_reset_info", "[", "k", "]", "=", "v", "\n", "", "return", "self", ".", "env", ".", "reset", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.monitor.Monitor.reset_state": [[44, 49], ["RuntimeError"], "methods", ["None"], ["", "def", "reset_state", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "allow_early_resets", "and", "not", "self", ".", "needs_reset", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Tried to reset an environment before done. If you want to allow early resets, wrap your env with Monitor(env, path, allow_early_resets=True)\"", ")", "\n", "", "self", ".", "rewards", "=", "[", "]", "\n", "self", ".", "needs_reset", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.monitor.Monitor.step": [[51, 57], ["monitor.Monitor.env.step", "monitor.Monitor.update", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.monitor.Monitor.step", "home.repos.pwc.inspect_result.tgangwani_QDAgents.rl.ppo.PPO.update"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "if", "self", ".", "needs_reset", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Tried to step environment that needs reset\"", ")", "\n", "", "ob", ",", "rew", ",", "done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "self", ".", "update", "(", "ob", ",", "rew", ",", "done", ",", "info", ")", "\n", "return", "(", "ob", ",", "rew", ",", "done", ",", "info", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.monitor.Monitor.update": [[58, 77], ["monitor.Monitor.rewards.append", "sum", "len", "monitor.Monitor.episode_rewards.append", "monitor.Monitor.episode_lengths.append", "monitor.Monitor.episode_times.append", "epinfo.update", "monitor.Monitor.results_writer.write_row", "isinstance", "round", "round", "time.time", "time.time"], "methods", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.rl.ppo.PPO.update", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.monitor.ResultsWriter.write_row"], ["", "def", "update", "(", "self", ",", "ob", ",", "rew", ",", "done", ",", "info", ")", ":", "\n", "        ", "self", ".", "rewards", ".", "append", "(", "rew", ")", "\n", "if", "done", ":", "\n", "            ", "self", ".", "needs_reset", "=", "True", "\n", "eprew", "=", "sum", "(", "self", ".", "rewards", ")", "\n", "eplen", "=", "len", "(", "self", ".", "rewards", ")", "\n", "epinfo", "=", "{", "\"r\"", ":", "round", "(", "eprew", ",", "6", ")", ",", "\"l\"", ":", "eplen", ",", "\"t\"", ":", "round", "(", "time", ".", "time", "(", ")", "-", "self", ".", "tstart", ",", "6", ")", "}", "\n", "for", "k", "in", "self", ".", "info_keywords", ":", "\n", "                ", "epinfo", "[", "k", "]", "=", "info", "[", "k", "]", "\n", "", "self", ".", "episode_rewards", ".", "append", "(", "eprew", ")", "\n", "self", ".", "episode_lengths", ".", "append", "(", "eplen", ")", "\n", "self", ".", "episode_times", ".", "append", "(", "time", ".", "time", "(", ")", "-", "self", ".", "tstart", ")", "\n", "epinfo", ".", "update", "(", "self", ".", "current_reset_info", ")", "\n", "self", ".", "results_writer", ".", "write_row", "(", "epinfo", ")", "\n", "\n", "if", "isinstance", "(", "info", ",", "dict", ")", ":", "\n", "                ", "info", "[", "'episode'", "]", "=", "epinfo", "\n", "\n", "", "", "self", ".", "total_steps", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.monitor.Monitor.close": [[78, 81], ["monitor.Monitor.f.close"], "methods", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.monitor.Monitor.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "f", "is", "not", "None", ":", "\n", "            ", "self", ".", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.monitor.Monitor.get_total_steps": [[82, 84], ["None"], "methods", ["None"], ["", "", "def", "get_total_steps", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "total_steps", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.monitor.Monitor.get_episode_rewards": [[85, 87], ["None"], "methods", ["None"], ["", "def", "get_episode_rewards", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "episode_rewards", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.monitor.Monitor.get_episode_lengths": [[88, 90], ["None"], "methods", ["None"], ["", "def", "get_episode_lengths", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "episode_lengths", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.monitor.Monitor.get_episode_times": [[91, 93], ["None"], "methods", ["None"], ["", "def", "get_episode_times", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "episode_times", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.monitor.ResultsWriter.__init__": [[99, 117], ["open", "isinstance", "monitor.ResultsWriter.f.write", "csv.DictWriter", "monitor.ResultsWriter.logger.writeheader", "monitor.ResultsWriter.f.flush", "os.join.endswith", "os.isdir", "os.join", "json.dumps", "tuple"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "filename", "=", "None", ",", "header", "=", "''", ",", "extra_keys", "=", "(", ")", ")", ":", "\n", "        ", "self", ".", "extra_keys", "=", "extra_keys", "\n", "if", "filename", "is", "None", ":", "\n", "            ", "self", ".", "f", "=", "None", "\n", "self", ".", "logger", "=", "None", "\n", "", "else", ":", "\n", "            ", "if", "not", "filename", ".", "endswith", "(", "Monitor", ".", "EXT", ")", ":", "\n", "                ", "if", "osp", ".", "isdir", "(", "filename", ")", ":", "\n", "                    ", "filename", "=", "osp", ".", "join", "(", "filename", ",", "Monitor", ".", "EXT", ")", "\n", "", "else", ":", "\n", "                    ", "filename", "=", "filename", "+", "\".\"", "+", "Monitor", ".", "EXT", "\n", "", "", "self", ".", "f", "=", "open", "(", "filename", ",", "\"wt\"", ")", "\n", "if", "isinstance", "(", "header", ",", "dict", ")", ":", "\n", "                ", "header", "=", "'# {} \\n'", ".", "format", "(", "json", ".", "dumps", "(", "header", ")", ")", "\n", "", "self", ".", "f", ".", "write", "(", "header", ")", "\n", "self", ".", "logger", "=", "csv", ".", "DictWriter", "(", "self", ".", "f", ",", "fieldnames", "=", "(", "'r'", ",", "'l'", ",", "'t'", ")", "+", "tuple", "(", "extra_keys", ")", ")", "\n", "self", ".", "logger", ".", "writeheader", "(", ")", "\n", "self", ".", "f", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.monitor.ResultsWriter.write_row": [[118, 122], ["monitor.ResultsWriter.logger.writerow", "monitor.ResultsWriter.f.flush"], "methods", ["None"], ["", "", "def", "write_row", "(", "self", ",", "epinfo", ")", ":", "\n", "        ", "if", "self", ".", "logger", ":", "\n", "            ", "self", ".", "logger", ".", "writerow", "(", "epinfo", ")", "\n", "self", ".", "f", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.monitor.get_monitor_files": [[125, 127], ["glob.glob", "os.join"], "function", ["None"], ["", "", "", "def", "get_monitor_files", "(", "dir", ")", ":", "\n", "    ", "return", "glob", "(", "osp", ".", "join", "(", "dir", ",", "\"*\"", "+", "Monitor", ".", "EXT", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.monitor.load_results": [[128, 166], ["pandas.concat", "pandas.DataFrame.sort_values", "pandas.DataFrame.reset_index", "min", "glob.glob", "glob.glob", "monitor.LoadMonitorResultsError", "dfs.append", "os.join", "os.join", "open", "fname.endswith", "fh.readline", "json.loads", "pandas.read_csv", "headers.append", "fname.endswith", "fh.readlines", "json.loads", "headers.append", "pandas.DataFrame", "json.loads", "episodes.append"], "function", ["None"], ["", "def", "load_results", "(", "dir", ")", ":", "\n", "    ", "import", "pandas", "\n", "monitor_files", "=", "(", "\n", "glob", "(", "osp", ".", "join", "(", "dir", ",", "\"*monitor.json\"", ")", ")", "+", "\n", "glob", "(", "osp", ".", "join", "(", "dir", ",", "\"*monitor.csv\"", ")", ")", ")", "# get both csv and (old) json files", "\n", "if", "not", "monitor_files", ":", "\n", "        ", "raise", "LoadMonitorResultsError", "(", "\"no monitor files of the form *%s found in %s\"", "%", "(", "Monitor", ".", "EXT", ",", "dir", ")", ")", "\n", "", "dfs", "=", "[", "]", "\n", "headers", "=", "[", "]", "\n", "for", "fname", "in", "monitor_files", ":", "\n", "        ", "with", "open", "(", "fname", ",", "'rt'", ")", "as", "fh", ":", "\n", "            ", "if", "fname", ".", "endswith", "(", "'csv'", ")", ":", "\n", "                ", "firstline", "=", "fh", ".", "readline", "(", ")", "\n", "if", "not", "firstline", ":", "\n", "                    ", "continue", "\n", "", "assert", "firstline", "[", "0", "]", "==", "'#'", "\n", "header", "=", "json", ".", "loads", "(", "firstline", "[", "1", ":", "]", ")", "\n", "df", "=", "pandas", ".", "read_csv", "(", "fh", ",", "index_col", "=", "None", ")", "\n", "headers", ".", "append", "(", "header", ")", "\n", "", "elif", "fname", ".", "endswith", "(", "'json'", ")", ":", "# Deprecated json format", "\n", "                ", "episodes", "=", "[", "]", "\n", "lines", "=", "fh", ".", "readlines", "(", ")", "\n", "header", "=", "json", ".", "loads", "(", "lines", "[", "0", "]", ")", "\n", "headers", ".", "append", "(", "header", ")", "\n", "for", "line", "in", "lines", "[", "1", ":", "]", ":", "\n", "                    ", "episode", "=", "json", ".", "loads", "(", "line", ")", "\n", "episodes", ".", "append", "(", "episode", ")", "\n", "", "df", "=", "pandas", ".", "DataFrame", "(", "episodes", ")", "\n", "", "else", ":", "\n", "                ", "assert", "0", ",", "'unreachable'", "\n", "", "df", "[", "'t'", "]", "+=", "header", "[", "'t_start'", "]", "\n", "", "dfs", ".", "append", "(", "df", ")", "\n", "", "df", "=", "pandas", ".", "concat", "(", "dfs", ")", "\n", "df", ".", "sort_values", "(", "'t'", ",", "inplace", "=", "True", ")", "\n", "df", ".", "reset_index", "(", "inplace", "=", "True", ")", "\n", "df", "[", "'t'", "]", "-=", "min", "(", "header", "[", "'t_start'", "]", "for", "header", "in", "headers", ")", "\n", "df", ".", "headers", "=", "headers", "# HACK to preserve backwards compatibility", "\n", "return", "df", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.monitor.test_monitor": [[167, 190], ["gym.make", "gym.make.seed", "monitor.Monitor", "monitor.Monitor.reset", "range", "open", "open.readline", "f.readline.startswith", "json.loads", "pandas.read_csv", "open.close", "os.remove", "uuid.uuid4", "monitor.Monitor.step", "set", "set", "monitor.Monitor.reset", "json.loads.keys", "pandas.read_csv.keys"], "function", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.monitor.Monitor.reset", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.monitor.Monitor.close", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.monitor.Monitor.step", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.monitor.Monitor.reset"], ["", "def", "test_monitor", "(", ")", ":", "\n", "    ", "env", "=", "gym", ".", "make", "(", "\"CartPole-v1\"", ")", "\n", "env", ".", "seed", "(", "0", ")", "\n", "mon_file", "=", "\"/tmp/baselines-test-%s.monitor.csv\"", "%", "uuid", ".", "uuid4", "(", ")", "\n", "menv", "=", "Monitor", "(", "env", ",", "mon_file", ")", "\n", "menv", ".", "reset", "(", ")", "\n", "for", "_", "in", "range", "(", "1000", ")", ":", "\n", "        ", "_", ",", "_", ",", "done", ",", "_", "=", "menv", ".", "step", "(", "0", ")", "\n", "if", "done", ":", "\n", "            ", "menv", ".", "reset", "(", ")", "\n", "\n", "", "", "f", "=", "open", "(", "mon_file", ",", "'rt'", ")", "\n", "\n", "firstline", "=", "f", ".", "readline", "(", ")", "\n", "assert", "firstline", ".", "startswith", "(", "'#'", ")", "\n", "metadata", "=", "json", ".", "loads", "(", "firstline", "[", "1", ":", "]", ")", "\n", "assert", "metadata", "[", "'env_id'", "]", "==", "\"CartPole-v1\"", "\n", "assert", "set", "(", "metadata", ".", "keys", "(", ")", ")", "==", "{", "'env_id'", ",", "'gym_version'", ",", "'t_start'", "}", ",", "\"Incorrect keys in monitor metadata\"", "\n", "\n", "last_logline", "=", "pandas", ".", "read_csv", "(", "f", ",", "index_col", "=", "None", ")", "\n", "assert", "set", "(", "last_logline", ".", "keys", "(", ")", ")", "==", "{", "'l'", ",", "'t'", ",", "'r'", "}", ",", "\"Incorrect keys in monitor logline\"", "\n", "f", ".", "close", "(", ")", "\n", "os", ".", "remove", "(", "mon_file", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.networks.discriminator.Discriminator.__init__": [[7, 27], ["torch.Module.__init__", "torch.init.calculate_gain", "torch.init.calculate_gain", "torch.init.calculate_gain", "torch.Sequential", "torch.Sequential", "torch.Sequential", "qd_agents.utils.common_utils.RunningMeanStd", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "qd_agents.utils.common_utils.init", "init_", "actv", "init_", "actv", "init_", "discriminator.Discriminator.parameters", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.buffers.storage.RolloutStorage.__init__", "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.common_utils.init"], ["    ", "def", "__init__", "(", "self", ",", "ob_dim", ",", "ac_dim", ",", "hidden_dim", ",", "rank", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "rank", "=", "rank", "\n", "self", ".", "ob_dim", "=", "ob_dim", "\n", "self", ".", "ac_dim", "=", "ac_dim", "\n", "input_dim", "=", "ob_dim", "+", "ac_dim", "\n", "actv", "=", "nn", ".", "Tanh", "\n", "gain", "=", "nn", ".", "init", ".", "calculate_gain", "(", "'tanh'", ")", "\n", "\n", "init_", "=", "lambda", "m", ",", "bias", "=", "0", ":", "init", "(", "m", ",", "nn", ".", "init", ".", "xavier_normal_", ",", "lambda", "x", ":", "nn", ".", "init", ".", "\n", "constant_", "(", "x", ",", "bias", ")", ",", "gain", "=", "gain", ")", "\n", "\n", "self", ".", "tower", "=", "nn", ".", "Sequential", "(", "\n", "init_", "(", "nn", ".", "Linear", "(", "input_dim", ",", "hidden_dim", ")", ")", ",", "actv", "(", ")", ",", "\n", "init_", "(", "nn", ".", "Linear", "(", "hidden_dim", ",", "hidden_dim", ")", ")", ",", "actv", "(", ")", ",", "\n", "init_", "(", "nn", ".", "Linear", "(", "hidden_dim", ",", "1", ")", ")", ")", "\n", "\n", "self", ".", "input_rms", "=", "RunningMeanStd", "(", "shape", "=", "input_dim", ")", "\n", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "parameters", "(", ")", ",", "lr", "=", "1e-4", ",", "weight_decay", "=", "1e-3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.networks.discriminator.Discriminator.update": [[28, 66], ["discriminator.Discriminator.train", "pq_buffer.data_gen_finite", "rollouts.feed_forward_generator", "range", "next", "next", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "qd_agents.utils.common_utils.obs_batch_normalize", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "discriminator.Discriminator.tower", "discriminator.Discriminator.tower", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "loss.item", "discriminator.Discriminator.optimizer.zero_grad", "loss.backward", "torch.utils.clip_grad_norm_", "torch.utils.clip_grad_norm_", "torch.utils.clip_grad_norm_", "discriminator.Discriminator.optimizer.step", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "discriminator.Discriminator.parameters", "policy_state.size", "pqb_state.size"], "methods", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.buffers.priority_buffer.PriorityBuffer.data_gen_finite", "home.repos.pwc.inspect_result.tgangwani_QDAgents.buffers.storage.RolloutStorage.feed_forward_generator", "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.common_utils.obs_batch_normalize", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.monitor.Monitor.step", "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.batch_fifo_dice.BatchFIFO.size", "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.batch_fifo_dice.BatchFIFO.size"], ["", "def", "update", "(", "self", ",", "pq_buffer", ",", "rollouts", ",", "num_grad_steps", ")", ":", "\n", "        ", "self", ".", "train", "(", ")", "\n", "\n", "pqb_gen", "=", "pq_buffer", ".", "data_gen_finite", "(", "len", "(", "pq_buffer", ")", "//", "num_grad_steps", ")", "\n", "policy_data_gen", "=", "rollouts", ".", "feed_forward_generator", "(", "fetch_normalized", "=", "False", ",", "\n", "advantages", "=", "None", ",", "aux_advantages", "=", "None", ",", "mini_batch_size", "=", "rollouts", ".", "num_steps", "//", "num_grad_steps", ")", "\n", "\n", "loss_val", "=", "0", "\n", "n", "=", "0", "\n", "for", "_", "in", "range", "(", "num_grad_steps", ")", ":", "\n", "\n", "            ", "policy_batch", "=", "next", "(", "policy_data_gen", ")", "\n", "pqb_batch", "=", "next", "(", "pqb_gen", ")", "\n", "\n", "pqb_state", ",", "pqb_action", ",", "_", "=", "pqb_batch", "\n", "policy_state", ",", "policy_action", "=", "policy_batch", "[", "0", "]", ",", "policy_batch", "[", "2", "]", "\n", "\n", "policy_sa", "=", "torch", ".", "cat", "(", "[", "policy_state", ",", "policy_action", "]", ",", "dim", "=", "1", ")", "\n", "pqb_sa", "=", "torch", ".", "cat", "(", "[", "pqb_state", ",", "pqb_action", "]", ",", "dim", "=", "1", ")", "\n", "normalized_sa", "=", "obs_batch_normalize", "(", "torch", ".", "cat", "(", "[", "policy_sa", ",", "pqb_sa", "]", ",", "dim", "=", "0", ")", ",", "update_rms", "=", "True", ",", "rms_obj", "=", "self", ".", "input_rms", ")", "\n", "policy_sa", ",", "pqb_sa", "=", "torch", ".", "split", "(", "normalized_sa", ",", "[", "policy_state", ".", "size", "(", "0", ")", ",", "pqb_state", ".", "size", "(", "0", ")", "]", ",", "dim", "=", "0", ")", "\n", "\n", "policy_logits", "=", "self", ".", "tower", "(", "policy_sa", ")", "\n", "pqb_logits", "=", "self", ".", "tower", "(", "pqb_sa", ")", "\n", "\n", "pqb_loss", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "pqb_logits", ",", "torch", ".", "ones_like", "(", "pqb_logits", ")", ")", "\n", "policy_loss", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "policy_logits", ",", "torch", ".", "zeros_like", "(", "policy_logits", ")", ")", "\n", "loss", "=", "pqb_loss", "+", "policy_loss", "\n", "\n", "loss_val", "+=", "loss", ".", "item", "(", ")", "\n", "n", "+=", "1", "\n", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "parameters", "(", ")", ",", "max_norm", "=", "1.", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "return", "loss_val", "/", "n", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.networks.discriminator.Discriminator.predict_batch_rewards": [[67, 80], ["rollouts.raw_obs[].view", "rollouts.actions.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "qd_agents.utils.common_utils.obs_batch_normalize", "rollouts.aux_rewards[].copy_", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "discriminator.Discriminator.eval", "discriminator.Discriminator.tower().sigmoid", "rewards.view.view.view", "discriminator.Discriminator.tower"], "methods", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.common_utils.obs_batch_normalize"], ["", "def", "predict_batch_rewards", "(", "self", ",", "rollouts", ")", ":", "\n", "        ", "obs", "=", "rollouts", ".", "raw_obs", "[", ":", "-", "1", "]", ".", "view", "(", "-", "1", ",", "self", ".", "ob_dim", ")", "\n", "acs", "=", "rollouts", ".", "actions", ".", "view", "(", "-", "1", ",", "self", ".", "ac_dim", ")", "\n", "sa", "=", "torch", ".", "cat", "(", "[", "obs", ",", "acs", "]", ",", "dim", "=", "1", ")", "\n", "sa", "=", "obs_batch_normalize", "(", "sa", ",", "update_rms", "=", "False", ",", "rms_obj", "=", "self", ".", "input_rms", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "eval", "(", ")", "\n", "s", "=", "self", ".", "tower", "(", "sa", ")", ".", "sigmoid", "(", ")", "\n", "rewards", "=", "-", "(", "1", "-", "s", "+", "1e-6", ")", ".", "log", "(", ")", "\n", "rewards", "=", "rewards", ".", "view", "(", "rollouts", ".", "num_steps", ",", "-", "1", ",", "1", ")", "\n", "\n", "", "rollouts", ".", "aux_rewards", "[", "self", ".", "rank", "]", ".", "copy_", "(", "rewards", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.networks.pdf.PdfNetwork.__init__": [[14, 48], ["torch.Module.__init__", "torch.init.calculate_gain", "torch.init.calculate_gain", "torch.Sequential", "torch.Sequential", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "qd_agents.utils.common_utils.RunningMeanStd", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "next", "print", "qd_agents.utils.common_utils.init", "init_", "actv", "init_", "actv", "init_", "actv", "init_", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.init.constant_", "torch.init.constant_", "pdf.PdfNetwork.parameters"], "methods", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.buffers.storage.RolloutStorage.__init__", "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.common_utils.init"], ["def", "__init__", "(", "self", ",", "ob_dim", ",", "ac_dim", ",", "hidden_dim", ",", "args", ")", ":", "\n", "\n", "# only print on creation of the first instance", "\n", "        ", "if", "not", "next", "(", "self", ".", "_ids", ")", ":", "\n", "            ", "print", "(", "\"++ Density Ratio Estimation with PDF Networks ++\"", ")", "\n", "\n", "", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ob_dim", "=", "ob_dim", "\n", "self", ".", "ac_dim", "=", "ac_dim", "\n", "input_dim", "=", "ob_dim", "+", "ac_dim", "\n", "self", ".", "rank", "=", "args", ".", "rank", "\n", "self", ".", "divergence", "=", "args", ".", "divergence", "\n", "actv", "=", "nn", ".", "Tanh", "\n", "gain", "=", "nn", ".", "init", ".", "calculate_gain", "(", "'tanh'", ")", "\n", "\n", "init_", "=", "lambda", "m", ",", "bias", "=", "0", ":", "init", "(", "m", ",", "nn", ".", "init", ".", "xavier_normal_", ",", "lambda", "x", ":", "nn", ".", "init", ".", "\n", "constant_", "(", "x", ",", "bias", ")", ",", "gain", "=", "gain", ")", "\n", "\n", "self", ".", "tower", "=", "nn", ".", "Sequential", "(", "\n", "init_", "(", "nn", ".", "Linear", "(", "input_dim", ",", "hidden_dim", ")", ")", ",", "actv", "(", ")", ",", "\n", "init_", "(", "nn", ".", "Linear", "(", "hidden_dim", ",", "hidden_dim", ")", ")", ",", "actv", "(", ")", ",", "\n", "init_", "(", "nn", ".", "Linear", "(", "hidden_dim", ",", "hidden_dim", ")", ")", ",", "actv", "(", ")", ",", "\n", "init_", "(", "nn", ".", "Linear", "(", "hidden_dim", ",", "1", ",", "bias", "=", "False", ")", ")", ")", "\n", "\n", "# log partition function", "\n", "self", ".", "logZ", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "1", ")", ")", "\n", "\n", "# these three parameters are only used for sharing the normalization data across MPI ranks", "\n", "self", ".", "_nrml_mean", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "input_dim", ")", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "_nrml_var", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "input_dim", ")", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "_nrml_count", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ",", "requires_grad", "=", "False", ")", "\n", "\n", "self", ".", "input_rms", "=", "RunningMeanStd", "(", "shape", "=", "input_dim", ")", "\n", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "(", "p", "for", "p", "in", "self", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", ")", ",", "lr", "=", "5e-4", ",", "weight_decay", "=", "1e-3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.networks.pdf.PdfNetwork._modifier": [[49, 52], ["torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp.exp", "torch.clamp.exp"], "methods", ["None"], ["", "def", "_modifier", "(", "self", ",", "m", ")", ":", "\n", "        ", "m", "=", "torch", ".", "clamp", "(", "m", "-", "self", ".", "logZ", ",", "min", "=", "-", "5.", ",", "max", "=", "5.", ")", "\n", "return", "m", ".", "exp", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.networks.pdf.PdfNetwork._dr": [[53, 56], ["torch.div().clamp", "torch.div().clamp", "torch.div().clamp", "torch.div().clamp", "torch.div", "torch.div", "torch.div", "torch.div"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_dr", "(", "numer", ",", "denom", ")", ":", "\n", "        ", "return", "torch", ".", "div", "(", "numer", ",", "denom", ")", ".", "clamp", "(", "min", "=", "DR_MIN", ",", "max", "=", "DR_MAX", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.networks.pdf.PdfNetwork.mute_param_update": [[57, 60], ["pdf.PdfNetwork.parameters"], "methods", ["None"], ["", "def", "mute_param_update", "(", "self", ")", ":", "\n", "        ", "for", "p", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "p", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.networks.pdf.PdfNetwork.set_from_flat": [[61, 66], ["torch.nn.utils.vector_to_parameters", "torch.nn.utils.vector_to_parameters", "pdf.PdfNetwork._nrml_mean.data.numpy", "pdf.PdfNetwork._nrml_var.data.numpy", "pdf.PdfNetwork._nrml_count.data.numpy", "pdf.PdfNetwork.parameters"], "methods", ["None"], ["", "", "def", "set_from_flat", "(", "self", ",", "vector", ")", ":", "\n", "        ", "vector_to_parameters", "(", "vector", ",", "self", ".", "parameters", "(", ")", ")", "\n", "self", ".", "input_rms", ".", "mean", "=", "self", ".", "_nrml_mean", ".", "data", ".", "numpy", "(", ")", "\n", "self", ".", "input_rms", ".", "var", "=", "self", ".", "_nrml_var", ".", "data", ".", "numpy", "(", ")", "\n", "self", ".", "input_rms", ".", "count", "=", "self", ".", "_nrml_count", ".", "data", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.networks.pdf.PdfNetwork.get_flat": [[67, 72], ["pdf.PdfNetwork._nrml_mean.data.copy_", "pdf.PdfNetwork._nrml_var.data.copy_", "pdf.PdfNetwork._nrml_count.data.copy_", "torch.nn.utils.parameters_to_vector().detach", "torch.nn.utils.parameters_to_vector().detach", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.nn.utils.parameters_to_vector", "torch.nn.utils.parameters_to_vector", "pdf.PdfNetwork.parameters"], "methods", ["None"], ["", "def", "get_flat", "(", "self", ")", ":", "\n", "        ", "self", ".", "_nrml_mean", ".", "data", ".", "copy_", "(", "torch", ".", "tensor", "(", "self", ".", "input_rms", ".", "mean", ")", ")", "\n", "self", ".", "_nrml_var", ".", "data", ".", "copy_", "(", "torch", ".", "tensor", "(", "self", ".", "input_rms", ".", "var", ")", ")", "\n", "self", ".", "_nrml_count", ".", "data", ".", "copy_", "(", "torch", ".", "tensor", "(", "self", ".", "input_rms", ".", "count", ")", ")", "\n", "return", "parameters_to_vector", "(", "self", ".", "parameters", "(", ")", ")", ".", "detach", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.networks.pdf.PdfNetwork.compute_grad_pen": [[73, 93], ["torch.rand", "torch.rand", "torch.rand", "torch.rand", "alpha.expand_as.expand_as.expand_as", "pdf.PdfNetwork._modifier", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "m_sa.size", "pdf.PdfNetwork.tower", "pdf.PdfNetwork.size", "torch.autograd.grad", "torch.autograd.grad", "grad.norm"], "methods", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.dre.dd_density_ratio.DensityRatio._modifier", "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.batch_fifo_dice.BatchFIFO.size", "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.batch_fifo_dice.BatchFIFO.size"], ["", "def", "compute_grad_pen", "(", "self", ",", "m_sa", ",", "nb_sa", ",", "lambda_", ")", ":", "\n", "        ", "alpha", "=", "torch", ".", "rand", "(", "m_sa", ".", "size", "(", "0", ")", ",", "1", ")", "\n", "alpha", "=", "alpha", ".", "expand_as", "(", "m_sa", ")", "\n", "\n", "mixup_data", "=", "alpha", "*", "m_sa", "+", "(", "1", "-", "alpha", ")", "*", "nb_sa", "\n", "mixup_data", ".", "requires_grad", "=", "True", "\n", "\n", "out", "=", "self", ".", "_modifier", "(", "self", ".", "tower", "(", "mixup_data", ")", ")", "\n", "ones", "=", "torch", ".", "ones", "(", "out", ".", "size", "(", ")", ")", "\n", "\n", "grad", "=", "autograd", ".", "grad", "(", "\n", "outputs", "=", "out", ",", "\n", "inputs", "=", "mixup_data", ",", "\n", "grad_outputs", "=", "ones", ",", "\n", "create_graph", "=", "True", ",", "\n", "retain_graph", "=", "True", ",", "\n", "only_inputs", "=", "True", ")", "[", "0", "]", "\n", "\n", "grad_pen", "=", "lambda_", "*", "(", "grad", ".", "norm", "(", "2", ",", "dim", "=", "1", ")", "-", "1", ")", ".", "pow", "(", "2", ")", ".", "mean", "(", ")", "\n", "return", "grad_pen", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.networks.pdf.PdfNetwork.eval_neg_divergence": [[94, 127], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "nb_pdf_net.infer().detach", "nb_pdf_net.infer().detach", "qd_agents.utils.common_utils.obs_batch_normalize", "torch.split", "torch.split", "torch.split", "torch.split", "pdf.PdfNetwork._modifier", "pdf.PdfNetwork._modifier", "ValueError", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "pdf.PdfNetwork.tower", "pdf.PdfNetwork.tower", "pdf.PdfNetwork._dr", "pdf.PdfNetwork._dr", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp.item", "torch.clamp.item", "pdf.PdfNetwork._dr", "pdf.PdfNetwork._dr", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp.item", "torch.clamp.item", "nb_pdf_net.infer", "nb_pdf_net.infer", "m_states.size", "nb_states.size", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "output.mean", "torch.log", "torch.log", "torch.log", "torch.log", "output.mean", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.common_utils.obs_batch_normalize", "home.repos.pwc.inspect_result.tgangwani_QDAgents.dre.dd_density_ratio.DensityRatio._modifier", "home.repos.pwc.inspect_result.tgangwani_QDAgents.dre.dd_density_ratio.DensityRatio._modifier", "home.repos.pwc.inspect_result.tgangwani_QDAgents.networks.pdf.PdfNetwork._dr", "home.repos.pwc.inspect_result.tgangwani_QDAgents.networks.pdf.PdfNetwork._dr", "home.repos.pwc.inspect_result.tgangwani_QDAgents.networks.pdf.PdfNetwork._dr", "home.repos.pwc.inspect_result.tgangwani_QDAgents.networks.pdf.PdfNetwork._dr", "home.repos.pwc.inspect_result.tgangwani_QDAgents.networks.pdf.PdfNetwork.infer", "home.repos.pwc.inspect_result.tgangwani_QDAgents.networks.pdf.PdfNetwork.infer", "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.batch_fifo_dice.BatchFIFO.size", "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.batch_fifo_dice.BatchFIFO.size", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log"], ["", "def", "eval_neg_divergence", "(", "self", ",", "m_states", ",", "m_actions", ",", "nb_states", ",", "nb_actions", ",", "nb_pdf_net", ")", ":", "\n", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "m_sa", "=", "torch", ".", "cat", "(", "[", "m_states", ",", "m_actions", "]", ",", "dim", "=", "1", ")", "\n", "nb_sa", "=", "torch", ".", "cat", "(", "[", "nb_states", ",", "nb_actions", "]", ",", "dim", "=", "1", ")", "\n", "\n", "nb_pdf_m_data", "=", "nb_pdf_net", ".", "infer", "(", "m_sa", ")", ".", "detach", "(", ")", "\n", "nb_pdf_nb_data", "=", "nb_pdf_net", ".", "infer", "(", "nb_sa", ")", ".", "detach", "(", ")", "\n", "normalized_sa", "=", "obs_batch_normalize", "(", "torch", ".", "cat", "(", "[", "m_sa", ",", "nb_sa", "]", ",", "dim", "=", "0", ")", ",", "update_rms", "=", "False", ",", "rms_obj", "=", "self", ".", "input_rms", ")", "\n", "m_sa", ",", "nb_sa", "=", "torch", ".", "split", "(", "normalized_sa", ",", "[", "m_states", ".", "size", "(", "0", ")", ",", "nb_states", ".", "size", "(", "0", ")", "]", ",", "dim", "=", "0", ")", "\n", "\n", "m_pdf_m_data", "=", "self", ".", "_modifier", "(", "self", ".", "tower", "(", "m_sa", ")", ")", "\n", "m_pdf_nb_data", "=", "self", ".", "_modifier", "(", "self", ".", "tower", "(", "nb_sa", ")", ")", "\n", "\n", "if", "self", ".", "divergence", "==", "'js'", ":", "\n", "                ", "ratio1", "=", "self", ".", "_dr", "(", "nb_pdf_m_data", ",", "m_pdf_m_data", ")", "\n", "ratio2", "=", "self", ".", "_dr", "(", "m_pdf_nb_data", ",", "nb_pdf_nb_data", ")", "\n", "\n", "output", "=", "torch", ".", "log", "(", "1.", "/", "(", "1.", "+", "ratio1", ")", "+", "EPS", ")", "+", "torch", ".", "log", "(", "1.", "/", "(", "1.", "+", "ratio2", ")", "+", "EPS", ")", "\n", "neg_js", "=", "0.5", "*", "(", "-", "output", ".", "mean", "(", "0", ")", "-", "torch", ".", "log", "(", "torch", ".", "tensor", "(", "4.", ")", ")", ")", "\n", "neg_js", "=", "torch", ".", "clamp", "(", "neg_js", ",", "max", "=", "0", ")", "# clip the residual positive part (if any)", "\n", "return", "neg_js", ".", "item", "(", ")", "\n", "\n", "", "if", "self", ".", "divergence", "==", "'kls'", ":", "\n", "                ", "ratio1", "=", "self", ".", "_dr", "(", "m_pdf_m_data", ",", "nb_pdf_m_data", ")", "\n", "ratio2", "=", "self", ".", "_dr", "(", "nb_pdf_nb_data", ",", "m_pdf_nb_data", ")", "\n", "\n", "output", "=", "torch", ".", "log", "(", "ratio1", "+", "EPS", ")", "+", "torch", ".", "log", "(", "ratio2", "+", "EPS", ")", "\n", "neg_kls", "=", "-", "output", ".", "mean", "(", "0", ")", "\n", "neg_kls", "=", "torch", ".", "clamp", "(", "neg_kls", ",", "max", "=", "0", ")", "# clip the residual positive part (if any)", "\n", "return", "neg_kls", ".", "item", "(", ")", "\n", "\n", "", "raise", "ValueError", "(", "\"Unknown divergence\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.networks.pdf.PdfNetwork.update": [[128, 172], ["pdf.PdfNetwork.train", "m_buffer.get_sample", "nb_buffer.get_sample", "qd_agents.utils.common_utils.CustomMapDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "pdf.PdfNetwork.eval_neg_divergence", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "qd_agents.utils.common_utils.obs_batch_normalize", "torch.split", "torch.split", "torch.split", "torch.split", "pdf.PdfNetwork._modifier", "pdf.PdfNetwork._modifier", "pdf.PdfNetwork._dr", "pdf.PdfNetwork._dr", "pdf.PdfNetwork.compute_grad_pen", "loss.mean.mean.mean", "loss.mean.mean.item", "pdf.PdfNetwork.optimizer.zero_grad", "loss.mean.mean.backward", "torch.utils.clip_grad_norm_", "torch.utils.clip_grad_norm_", "pdf.PdfNetwork.optimizer.step", "all_pdf_nets[].infer().detach", "sum", "len", "all_pdf_nets[].infer().detach", "sum", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "pdf.PdfNetwork.tower", "pdf.PdfNetwork.tower", "pdf.PdfNetwork.parameters", "all_pdf_nets.keys", "all_pdf_nets.keys", "m_sa.size", "nb_sa.size", "torch.log", "torch.log", "torch.log", "torch.log", "all_pdf_nets[].infer", "all_pdf_nets[].infer", "torch.log", "torch.log", "torch.log", "torch.log"], "methods", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.batch_fifo_dice.BatchFIFO.get_sample", "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.batch_fifo_dice.BatchFIFO.get_sample", "home.repos.pwc.inspect_result.tgangwani_QDAgents.dre.vd_density_ratio.DensityRatio.eval_neg_divergence", "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.common_utils.obs_batch_normalize", "home.repos.pwc.inspect_result.tgangwani_QDAgents.dre.dd_density_ratio.DensityRatio._modifier", "home.repos.pwc.inspect_result.tgangwani_QDAgents.dre.dd_density_ratio.DensityRatio._modifier", "home.repos.pwc.inspect_result.tgangwani_QDAgents.networks.pdf.PdfNetwork._dr", "home.repos.pwc.inspect_result.tgangwani_QDAgents.networks.pdf.PdfNetwork._dr", "home.repos.pwc.inspect_result.tgangwani_QDAgents.dre.vd_density_ratio.DensityRatio.compute_grad_pen", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.monitor.Monitor.step", "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.batch_fifo_dice.BatchFIFO.size", "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.batch_fifo_dice.BatchFIFO.size", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.networks.pdf.PdfNetwork.infer", "home.repos.pwc.inspect_result.tgangwani_QDAgents.networks.pdf.PdfNetwork.infer", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log"], ["", "", "def", "update", "(", "self", ",", "m_buffer", ",", "nb_buffer", ",", "all_pdf_nets", ",", "nb_idx", ")", ":", "\n", "        ", "self", ".", "train", "(", ")", "\n", "\n", "m_states", ",", "m_actions", "=", "m_buffer", ".", "get_sample", "(", "nbatches", "=", "2", ")", "\n", "nb_states", ",", "nb_actions", "=", "nb_buffer", ".", "get_sample", "(", "nbatches", "=", "2", ")", "\n", "\n", "dset", "=", "CustomMapDataset", "(", "torch", ".", "cat", "(", "[", "m_states", ",", "m_actions", "]", ",", "dim", "=", "1", ")", ",", "torch", ".", "cat", "(", "[", "nb_states", ",", "nb_actions", "]", ",", "dim", "=", "1", ")", ")", "\n", "dset_generator", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dset", ",", "batch_size", "=", "512", ",", "shuffle", "=", "True", ")", "\n", "\n", "loss_val", "=", "0.", "\n", "n", "=", "0.", "\n", "for", "data", "in", "dset_generator", ":", "\n", "            ", "m_sa", ",", "nb_sa", "=", "data", "# get mini-batch", "\n", "\n", "# get PDF from the mixture distribution over the neighbors", "\n", "nb_pdf_m_data", "=", "[", "all_pdf_nets", "[", "i", "]", ".", "infer", "(", "m_sa", ")", ".", "detach", "(", ")", "for", "i", "in", "all_pdf_nets", ".", "keys", "(", ")", "if", "i", "!=", "self", ".", "rank", "]", "\n", "nb_pdf_m_data", "=", "sum", "(", "nb_pdf_m_data", ")", "/", "len", "(", "nb_pdf_m_data", ")", "\n", "\n", "nb_pdf_nb_data", "=", "[", "all_pdf_nets", "[", "i", "]", ".", "infer", "(", "nb_sa", ")", ".", "detach", "(", ")", "for", "i", "in", "all_pdf_nets", ".", "keys", "(", ")", "if", "i", "!=", "self", ".", "rank", "]", "\n", "nb_pdf_nb_data", "=", "sum", "(", "nb_pdf_nb_data", ")", "/", "len", "(", "nb_pdf_nb_data", ")", "\n", "\n", "normalized_sa", "=", "obs_batch_normalize", "(", "torch", ".", "cat", "(", "[", "m_sa", ",", "nb_sa", "]", ",", "dim", "=", "0", ")", ",", "update_rms", "=", "True", ",", "rms_obj", "=", "self", ".", "input_rms", ")", "\n", "m_sa", ",", "nb_sa", "=", "torch", ".", "split", "(", "normalized_sa", ",", "[", "m_sa", ".", "size", "(", "0", ")", ",", "nb_sa", ".", "size", "(", "0", ")", "]", ",", "dim", "=", "0", ")", "\n", "\n", "m_pdf_m_data", "=", "self", ".", "_modifier", "(", "self", ".", "tower", "(", "m_sa", ")", ")", "\n", "m_pdf_nb_data", "=", "self", ".", "_modifier", "(", "self", ".", "tower", "(", "nb_sa", ")", ")", "\n", "\n", "ratio1", "=", "self", ".", "_dr", "(", "nb_pdf_m_data", ",", "m_pdf_m_data", ")", "\n", "ratio2", "=", "self", ".", "_dr", "(", "m_pdf_nb_data", ",", "nb_pdf_nb_data", ")", "\n", "\n", "grad_penalty", "=", "self", ".", "compute_grad_pen", "(", "m_sa", ",", "nb_sa", ",", "lambda_", "=", "0.1", ")", "\n", "loss", "=", "-", "torch", ".", "log", "(", "1.", "/", "(", "1.", "+", "ratio1", ")", "+", "EPS", ")", "-", "torch", ".", "log", "(", "1.", "/", "(", "1.", "+", "ratio2", ")", "+", "EPS", ")", "+", "grad_penalty", "\n", "loss", "=", "loss", ".", "mean", "(", "0", ")", "\n", "\n", "loss_val", "+=", "loss", ".", "item", "(", ")", "\n", "n", "+=", "1", "\n", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "parameters", "(", ")", ",", "max_norm", "=", "1.", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "neg_divergence", "=", "self", ".", "eval_neg_divergence", "(", "m_states", ",", "m_actions", ",", "nb_states", ",", "nb_actions", ",", "all_pdf_nets", "[", "nb_idx", "]", ")", "\n", "return", "loss_val", "/", "n", ",", "neg_divergence", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.networks.pdf.PdfNetwork.infer": [[173, 179], ["pdf.PdfNetwork.PdfNetwork.eval", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "qd_agents.utils.common_utils.obs_batch_normalize", "pdf.PdfNetwork.PdfNetwork._modifier", "pdf.PdfNetwork.PdfNetwork.tower"], "methods", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.common_utils.obs_batch_normalize", "home.repos.pwc.inspect_result.tgangwani_QDAgents.dre.dd_density_ratio.DensityRatio._modifier"], ["", "def", "infer", "(", "self", ",", "sa", ")", ":", "\n", "        ", "self", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "sa", "=", "obs_batch_normalize", "(", "sa", ",", "update_rms", "=", "False", ",", "rms_obj", "=", "self", ".", "input_rms", ")", "\n", "pdf", "=", "self", ".", "_modifier", "(", "self", ".", "tower", "(", "sa", ")", ")", "\n", "", "return", "pdf", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.networks.pdf.PdfNetwork.predict_batch_rewards": [[180, 199], ["rollouts.raw_obs[].view", "rollouts.actions.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "pdf.PdfNetwork.PdfNetwork.infer", "rewards.view.view.view", "rollouts.aux_rewards[].copy_", "pdf.PdfNetwork.PdfNetwork._dr", "torch.log", "torch.log", "torch.log", "torch.log", "pdf.PdfNetwork.PdfNetwork._dr", "ValueError", "torch.log", "torch.log", "torch.log", "torch.log"], "methods", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.networks.pdf.PdfNetwork.infer", "home.repos.pwc.inspect_result.tgangwani_QDAgents.networks.pdf.PdfNetwork._dr", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.networks.pdf.PdfNetwork._dr", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log"], ["", "def", "predict_batch_rewards", "(", "self", ",", "idx", ",", "m_pdf", ",", "rollouts", ")", ":", "\n", "        ", "assert", "idx", "!=", "self", ".", "rank", "\n", "obs", "=", "rollouts", ".", "raw_obs", "[", ":", "-", "1", "]", ".", "view", "(", "-", "1", ",", "self", ".", "ob_dim", ")", "\n", "acs", "=", "rollouts", ".", "actions", ".", "view", "(", "-", "1", ",", "self", ".", "ac_dim", ")", "\n", "sa", "=", "torch", ".", "cat", "(", "[", "obs", ",", "acs", "]", ",", "dim", "=", "1", ")", "\n", "pdf", "=", "self", ".", "infer", "(", "sa", ")", "\n", "\n", "if", "self", ".", "divergence", "==", "'js'", ":", "\n", "            ", "ratio", "=", "self", ".", "_dr", "(", "m_pdf", ",", "pdf", ")", "\n", "rewards", "=", "-", "torch", ".", "log", "(", "1.", "/", "(", "1.", "+", "ratio", ")", "+", "EPS", ")", "\n", "\n", "", "elif", "self", ".", "divergence", "==", "'kls'", ":", "\n", "            ", "ratio", "=", "self", ".", "_dr", "(", "pdf", ",", "m_pdf", ")", "\n", "rewards", "=", "-", "ratio", "-", "torch", ".", "log", "(", "ratio", "+", "EPS", ")", "\n", "\n", "", "else", ":", "raise", "ValueError", "(", "\"Unknown divergence\"", ")", "\n", "\n", "rewards", "=", "rewards", ".", "view", "(", "rollouts", ".", "num_steps", ",", "-", "1", ",", "1", ")", "\n", "rollouts", ".", "aux_rewards", "[", "idx", "]", ".", "copy_", "(", "rewards", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.networks.dice_manager.NetworksManager.__init__": [[10, 60], ["print", "dice_manager.NetworksManager.rl_agent.sample_init_states", "qd_agents.utils.batch_fifo_dice.BatchFIFO", "importlib.import_module", "qd_agents.networks.discriminator.Discriminator", "qd_agents.buffers.super_pq.SuperPQ", "len", "dice_manager.NetworksManager.inverse_dratios[].mute_param_update", "dice_manager.NetworksManager.dratios[].get_flat", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "dict", "qd_agents.utils.batch_fifo_dice.BatchFIFO", "importlib.import_module.DensityRatio", "importlib.import_module.DensityRatio", "ValueError", "qd_agents.utils.batch_fifo_dice.BatchFIFO", "importlib.import_module.DensityRatio", "importlib.import_module.DensityRatio"], "methods", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.rl.rl_agent.RLAgent.sample_init_states", "home.repos.pwc.inspect_result.tgangwani_QDAgents.dre.vd_density_ratio.DensityRatio.mute_param_update", "home.repos.pwc.inspect_result.tgangwani_QDAgents.dre.vd_density_ratio.DensityRatio.get_flat"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "rl_agent", ")", ":", "\n", "        ", "print", "(", "\"++ Networks Manager for DICE ++\"", ")", "\n", "\n", "self", ".", "comm", "=", "args", ".", "comm", "\n", "self", ".", "rank", "=", "args", ".", "rank", "\n", "self", ".", "debug_mode", "=", "args", ".", "debug_mode", "\n", "self", ".", "neighbors", "=", "[", "i", "for", "i", "in", "range", "(", "args", ".", "comm_size", ")", "if", "i", "!=", "args", ".", "rank", "]", "\n", "\n", "self", ".", "obs_dim", "=", "rl_agent", ".", "obs_dim", "\n", "self", ".", "acs_dim", "=", "rl_agent", ".", "acs_dim", "\n", "self", ".", "rl_agent", "=", "rl_agent", "\n", "self", ".", "dice_type", "=", "args", ".", "dice_type", "\n", "\n", "init_states", "=", "self", ".", "rl_agent", ".", "sample_init_states", "(", "args", ".", "num_steps", ")", "\n", "self", ".", "m_batch_buffer", "=", "BatchFIFO", "(", "capacity", "=", "2", ")", "\n", "\n", "dre", "=", "importlib", ".", "import_module", "(", "dict", "(", "\n", "dual_dice", "=", "'qd_agents.networks.dre.dd_density_ratio'", ",", "\n", "gen_dice", "=", "'qd_agents.networks.dre.gd_density_ratio'", ",", "\n", "value_dice", "=", "'qd_agents.networks.dre.vd_density_ratio'", "\n", ")", "[", "self", ".", "dice_type", "]", ")", "\n", "\n", "if", "self", ".", "dice_type", "in", "[", "'dual_dice'", ",", "'gen_dice'", "]", ":", "\n", "            ", "self", ".", "nb_batch_buffer", "=", "{", "i", ":", "BatchFIFO", "(", "capacity", "=", "2", ")", "for", "i", "in", "self", ".", "neighbors", "}", "\n", "self", ".", "dratios", "=", "{", "i", ":", "dre", ".", "DensityRatio", "(", "self", ".", "obs_dim", ",", "self", ".", "acs_dim", ",", "hidden_dim", "=", "100", ",", "init_states", "=", "init_states", ",", "args", "=", "args", ")", "for", "i", "in", "self", ".", "neighbors", "}", "\n", "self", ".", "inverse_dratios", "=", "{", "i", ":", "dre", ".", "DensityRatio", "(", "self", ".", "obs_dim", ",", "self", ".", "acs_dim", ",", "hidden_dim", "=", "100", ",", "init_states", "=", "init_states", ",", "args", "=", "args", ")", "for", "i", "in", "self", ".", "neighbors", "}", "\n", "", "elif", "self", ".", "dice_type", "==", "'value_dice'", ":", "\n", "            ", "self", ".", "nb_batch_buffer", "=", "{", "i", ":", "BatchFIFO", "(", "capacity", "=", "2", ",", "obs_dim", "=", "self", ".", "obs_dim", ")", "for", "i", "in", "self", ".", "neighbors", "}", "\n", "self", ".", "dratios", "=", "{", "i", ":", "dre", ".", "DensityRatio", "(", "self", ".", "obs_dim", ",", "self", ".", "acs_dim", ",", "hidden_dim", "=", "100", ",", "init_states", "=", "init_states", ",", "rl_agent", "=", "rl_agent", ",", "nb_buffer", "=", "None", ",", "args", "=", "args", ")", "for", "i", "in", "self", ".", "neighbors", "}", "\n", "self", ".", "inverse_dratios", "=", "{", "i", ":", "dre", ".", "DensityRatio", "(", "self", ".", "obs_dim", ",", "self", ".", "acs_dim", ",", "hidden_dim", "=", "100", ",", "init_states", "=", "init_states", ",", "rl_agent", "=", "rl_agent", ",", "nb_buffer", "=", "self", ".", "nb_batch_buffer", "[", "i", "]", ",", "args", "=", "args", ")", "for", "i", "in", "self", ".", "neighbors", "}", "\n", "", "else", ":", "raise", "ValueError", "(", "\"Unknown DRE\"", ")", "\n", "\n", "for", "i", "in", "self", ".", "neighbors", ":", "\n", "            ", "self", ".", "inverse_dratios", "[", "i", "]", ".", "mute_param_update", "(", ")", "\n", "\n", "", "self", ".", "si_discriminator", "=", "Discriminator", "(", "self", ".", "obs_dim", ",", "self", ".", "acs_dim", ",", "hidden_dim", "=", "100", ",", "rank", "=", "args", ".", "rank", ")", "\n", "\n", "# high level wrapper around a class that can manage multiple priority queues (if needed)", "\n", "self", ".", "super_pq", "=", "SuperPQ", "(", "count", "=", "args", ".", "num_pqs", ",", "capacity", "=", "args", ".", "pq_capacity", ")", "\n", "\n", "pcnt", "=", "len", "(", "self", ".", "dratios", "[", "self", ".", "neighbors", "[", "0", "]", "]", ".", "get_flat", "(", ")", ")", "\n", "self", ".", "nb_idr_param_buffer", "=", "{", "i", ":", "np", ".", "zeros", "(", "pcnt", ",", "dtype", "=", "np", ".", "float32", ")", "for", "i", "in", "self", ".", "neighbors", "}", "\n", "\n", "self", ".", "nb_obs_buffer", "=", "{", "i", ":", "np", ".", "zeros", "(", "(", "args", ".", "num_steps", "+", "1", ",", "self", ".", "obs_dim", ")", ",", "dtype", "=", "np", ".", "float32", ")", "for", "i", "in", "self", ".", "neighbors", "}", "\n", "self", ".", "nb_acs_buffer", "=", "{", "i", ":", "np", ".", "zeros", "(", "(", "args", ".", "num_steps", ",", "self", ".", "acs_dim", ")", ",", "dtype", "=", "np", ".", "float32", ")", "for", "i", "in", "self", ".", "neighbors", "}", "\n", "self", ".", "nb_masks_buffer", "=", "{", "i", ":", "np", ".", "zeros", "(", "(", "args", ".", "num_steps", ",", "1", ")", ",", "dtype", "=", "np", ".", "float32", ")", "for", "i", "in", "self", ".", "neighbors", "}", "\n", "\n", "self", ".", "kernel_vals", "=", "{", "i", ":", "0", "for", "i", "in", "self", ".", "neighbors", "}", "\n", "self", ".", "temperature", "=", "args", ".", "temperature", "\n", "self", ".", "optim_params", "=", "{", "k", ":", "args", ".", "__dict__", "[", "k", "]", "for", "k", "in", "[", "'si_grad_steps'", "]", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.networks.dice_manager.NetworksManager.update": [[61, 133], ["dice_manager.NetworksManager.super_pq.random_select", "dice_manager.NetworksManager.si_discriminator.predict_batch_rewards", "dice_manager.NetworksManager.si_discriminator.update", "dice_manager.NetworksManager.comm.Barrier", "dice_manager.NetworksManager.rl_agent.rollouts.raw_obs.view", "dice_manager.NetworksManager.rl_agent.rollouts.actions.view", "dice_manager.NetworksManager.rl_agent.rollouts.masks[].view", "m_obs.numpy.numpy.numpy", "m_acs.numpy.numpy.numpy", "m_masks.numpy.numpy.numpy", "dice_manager.NetworksManager.m_batch_buffer.add", "dice_manager.NetworksManager.dratios[].predict_batch_rewards", "dice_manager.NetworksManager.comm.gather", "list", "len", "dice_manager.NetworksManager.add_traj", "list", "dice_manager.NetworksManager.super_pq.random_select", "numpy.copy", "dice_manager.NetworksManager.comm.Isend", "dice_manager.NetworksManager.comm.Recv", "dice_manager.NetworksManager.inverse_dratios[].set_from_flat", "dice_manager.NetworksManager.comm.Isend", "dice_manager.NetworksManager.comm.Isend", "dice_manager.NetworksManager.comm.Isend", "dice_manager.NetworksManager.comm.Recv", "dice_manager.NetworksManager.comm.Recv", "dice_manager.NetworksManager.comm.Recv", "dice_manager.NetworksManager.nb_batch_buffer[].add", "dice_manager.NetworksManager.dratios[].update", "losses.append", "dratios.append", "numpy.exp", "print", "dice_manager.NetworksManager.rl_agent.latest_trajs.values", "dice_manager.NetworksManager.rl_agent.latest_trajs.keys", "dice_manager.NetworksManager.dratios[].get_flat().numpy", "torch.from_numpy", "sum", "numpy.average", "numpy.max", "numpy.min", "numpy.average", "dice_manager.NetworksManager.dratios[].get_flat"], "methods", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.buffers.super_pq.SuperPQ.random_select", "home.repos.pwc.inspect_result.tgangwani_QDAgents.dre.vd_density_ratio.DensityRatio.predict_batch_rewards", "home.repos.pwc.inspect_result.tgangwani_QDAgents.rl.ppo.PPO.update", "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.batch_fifo_dice.BatchFIFO.add", "home.repos.pwc.inspect_result.tgangwani_QDAgents.dre.vd_density_ratio.DensityRatio.predict_batch_rewards", "home.repos.pwc.inspect_result.tgangwani_QDAgents.buffers.priority_buffer.PriorityBuffer.add_traj", "home.repos.pwc.inspect_result.tgangwani_QDAgents.buffers.super_pq.SuperPQ.random_select", "home.repos.pwc.inspect_result.tgangwani_QDAgents.dre.vd_density_ratio.DensityRatio.set_from_flat", "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.batch_fifo_dice.BatchFIFO.add", "home.repos.pwc.inspect_result.tgangwani_QDAgents.rl.ppo.PPO.update", "home.repos.pwc.inspect_result.tgangwani_QDAgents.dre.vd_density_ratio.DensityRatio.get_flat"], ["", "def", "update", "(", "self", ",", "ep_ret", ")", ":", "\n", "\n", "        ", "completed_trajs", "=", "list", "(", "self", ".", "rl_agent", ".", "latest_trajs", ".", "values", "(", ")", ")", "[", ":", "-", "1", "]", "\n", "assert", "len", "(", "completed_trajs", ")", ">", "0", ",", "\"No completed trajectory. Consider increasing args.num_steps\"", "\n", "\n", "# randomly select one of the pq-buffers, and add completed trajectories to it", "\n", "pqb", "=", "self", ".", "super_pq", ".", "random_select", "(", "ignore_empty", "=", "True", ")", "\n", "for", "traj", "in", "completed_trajs", ":", "\n", "            ", "pqb", ".", "add_traj", "(", "{", "**", "traj", ",", "'score'", ":", "sum", "(", "traj", "[", "'rewards'", "]", ")", "}", ")", "\n", "\n", "# pqb.add_traj() does a deepcopy, hence we can free some memory", "\n", "", "for", "i", "in", "list", "(", "self", ".", "rl_agent", ".", "latest_trajs", ".", "keys", "(", ")", ")", "[", ":", "-", "1", "]", ":", "\n", "            ", "del", "self", ".", "rl_agent", ".", "latest_trajs", "[", "i", "]", "\n", "\n", "# Update aux_rewards with values from the discriminator", "\n", "", "self", ".", "si_discriminator", ".", "predict_batch_rewards", "(", "self", ".", "rl_agent", ".", "rollouts", ")", "\n", "\n", "# Perform multiple updates of the discriminator classifier using rollouts and pq-buffer", "\n", "self", ".", "si_discriminator", ".", "update", "(", "self", ".", "super_pq", ".", "random_select", "(", ")", ",", "\n", "self", ".", "rl_agent", ".", "rollouts", ",", "num_grad_steps", "=", "self", ".", "optim_params", "[", "'si_grad_steps'", "]", ")", "\n", "\n", "# send density-ratio params to neighbors", "\n", "dr_params", "=", "{", "}", "\n", "for", "i", "in", "self", ".", "neighbors", ":", "\n", "            ", "dr_params", "[", "i", "]", "=", "np", ".", "copy", "(", "self", ".", "dratios", "[", "i", "]", ".", "get_flat", "(", ")", ".", "numpy", "(", ")", ")", "\n", "self", ".", "comm", ".", "Isend", "(", "dr_params", "[", "i", "]", ",", "dest", "=", "i", ",", "tag", "=", "5", ")", "\n", "\n", "# receive inverted density-ratio params from neighbors", "\n", "", "for", "i", "in", "self", ".", "neighbors", ":", "\n", "            ", "self", ".", "comm", ".", "Recv", "(", "self", ".", "nb_idr_param_buffer", "[", "i", "]", ",", "source", "=", "i", ",", "tag", "=", "5", ")", "\n", "self", ".", "inverse_dratios", "[", "i", "]", ".", "set_from_flat", "(", "torch", ".", "from_numpy", "(", "self", ".", "nb_idr_param_buffer", "[", "i", "]", ")", ")", "\n", "\n", "", "self", ".", "comm", ".", "Barrier", "(", ")", "\n", "\n", "m_obs", "=", "self", ".", "rl_agent", ".", "rollouts", ".", "raw_obs", ".", "view", "(", "-", "1", ",", "self", ".", "obs_dim", ")", "\n", "m_acs", "=", "self", ".", "rl_agent", ".", "rollouts", ".", "actions", ".", "view", "(", "-", "1", ",", "self", ".", "acs_dim", ")", "\n", "m_masks", "=", "self", ".", "rl_agent", ".", "rollouts", ".", "masks", "[", "1", ":", "]", ".", "view", "(", "-", "1", ",", "1", ")", "# note the indexing [1:], such that (s,a,mask=0) would mean the episode ended with this action", "\n", "m_obs", "=", "m_obs", ".", "numpy", "(", ")", ";", "m_acs", "=", "m_acs", ".", "numpy", "(", ")", ";", "m_masks", "=", "m_masks", ".", "numpy", "(", ")", "\n", "self", ".", "m_batch_buffer", ".", "add", "(", "m_obs", ",", "m_acs", ",", "m_masks", ")", "\n", "\n", "# Update aux_rewards with values from the density-ratio networks", "\n", "self", ".", "dratios", "[", "i", "]", ".", "predict_batch_rewards", "(", "i", ",", "self", ".", "rl_agent", ".", "rollouts", ",", "self", ".", "inverse_dratios", "[", "i", "]", ",", "self", ".", "rl_agent", ".", "get_action", ")", "\n", "\n", "# send (s,a, mask) data to all neighbors", "\n", "for", "i", "in", "self", ".", "neighbors", ":", "\n", "            ", "self", ".", "comm", ".", "Isend", "(", "m_obs", ",", "dest", "=", "i", ",", "tag", "=", "33", ")", "\n", "self", ".", "comm", ".", "Isend", "(", "m_acs", ",", "dest", "=", "i", ",", "tag", "=", "55", ")", "\n", "self", ".", "comm", ".", "Isend", "(", "m_masks", ",", "dest", "=", "i", ",", "tag", "=", "11", ")", "\n", "\n", "# receive (s,a, mask) data from all neighbors", "\n", "", "for", "i", "in", "self", ".", "neighbors", ":", "\n", "            ", "self", ".", "comm", ".", "Recv", "(", "self", ".", "nb_obs_buffer", "[", "i", "]", ",", "source", "=", "i", ",", "tag", "=", "33", ")", "\n", "self", ".", "comm", ".", "Recv", "(", "self", ".", "nb_acs_buffer", "[", "i", "]", ",", "source", "=", "i", ",", "tag", "=", "55", ")", "\n", "self", ".", "comm", ".", "Recv", "(", "self", ".", "nb_masks_buffer", "[", "i", "]", ",", "source", "=", "i", ",", "tag", "=", "11", ")", "\n", "self", ".", "nb_batch_buffer", "[", "i", "]", ".", "add", "(", "self", ".", "nb_obs_buffer", "[", "i", "]", ",", "self", ".", "nb_acs_buffer", "[", "i", "]", ",", "self", ".", "nb_masks_buffer", "[", "i", "]", ")", "\n", "\n", "", "losses", "=", "[", "]", "\n", "dratios", "=", "[", "]", "\n", "for", "i", "in", "self", ".", "neighbors", ":", "\n", "            ", "loss_val", ",", "dratio_val", ",", "neg_divergence", "=", "self", ".", "dratios", "[", "i", "]", ".", "update", "(", "self", ".", "m_batch_buffer", ",", "self", ".", "nb_batch_buffer", "[", "i", "]", ",", "self", ".", "rl_agent", ".", "get_action", ",", "self", ".", "inverse_dratios", "[", "i", "]", ")", "\n", "losses", ".", "append", "(", "loss_val", ")", "\n", "dratios", ".", "append", "(", "dratio_val", ")", "\n", "neg_divergence", "/=", "self", ".", "temperature", "\n", "self", ".", "kernel_vals", "[", "i", "]", "=", "np", ".", "exp", "(", "neg_divergence", ")", "\n", "\n", "", "if", "self", ".", "debug_mode", ":", "\n", "            ", "print", "(", "'<debug> Density Ratio stats: Avg:{0:.2f}, Max:{1:.2f}, Min:{2:.2f}, Avg-loss:{3:.2f}'", ".", "format", "(", "\n", "np", ".", "average", "(", "dratios", ")", ",", "np", ".", "max", "(", "dratios", ")", ",", "np", ".", "min", "(", "dratios", ")", ",", "np", ".", "average", "(", "losses", ")", ")", ")", "\n", "\n", "# sync!", "\n", "", "ep_ret_all_ranks", "=", "self", ".", "comm", ".", "gather", "(", "ep_ret", ",", "root", "=", "0", ")", "\n", "return", "self", ".", "kernel_vals", ",", "ep_ret_all_ranks", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.networks.nce_manager.NetworksManager.__init__": [[10, 42], ["print", "qd_agents.networks.discriminator.Discriminator", "qd_agents.buffers.super_pq.SuperPQ", "len", "qd_agents.utils.batch_fifo_nce.BatchFIFO", "qd_agents.networks.pdf.PdfNetwork", "nce_manager.NetworksManager.pdfs[].mute_param_update", "nce_manager.NetworksManager.pdfs[].get_flat", "numpy.zeros", "numpy.zeros", "numpy.zeros", "qd_agents.utils.batch_fifo_nce.BatchFIFO", "range", "range"], "methods", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.dre.vd_density_ratio.DensityRatio.mute_param_update", "home.repos.pwc.inspect_result.tgangwani_QDAgents.dre.vd_density_ratio.DensityRatio.get_flat"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "rl_agent", ")", ":", "\n", "        ", "print", "(", "\"++ Networks Manager for NCE ++\"", ")", "\n", "\n", "self", ".", "comm", "=", "args", ".", "comm", "\n", "self", ".", "rank", "=", "args", ".", "rank", "\n", "self", ".", "debug_mode", "=", "args", ".", "debug_mode", "\n", "self", ".", "neighbors", "=", "[", "i", "for", "i", "in", "range", "(", "args", ".", "comm_size", ")", "if", "i", "!=", "args", ".", "rank", "]", "\n", "\n", "self", ".", "obs_dim", "=", "rl_agent", ".", "obs_dim", "\n", "self", ".", "acs_dim", "=", "rl_agent", ".", "acs_dim", "\n", "self", ".", "rl_agent", "=", "rl_agent", "\n", "\n", "self", ".", "si_discriminator", "=", "Discriminator", "(", "self", ".", "obs_dim", ",", "self", ".", "acs_dim", ",", "hidden_dim", "=", "100", ",", "rank", "=", "args", ".", "rank", ")", "\n", "self", ".", "pdfs", "=", "{", "i", ":", "PdfNetwork", "(", "self", ".", "obs_dim", ",", "self", ".", "acs_dim", ",", "hidden_dim", "=", "100", ",", "args", "=", "args", ")", "for", "i", "in", "range", "(", "args", ".", "comm_size", ")", "}", "\n", "\n", "for", "i", "in", "self", ".", "neighbors", ":", "\n", "            ", "self", ".", "pdfs", "[", "i", "]", ".", "mute_param_update", "(", ")", "\n", "\n", "# high level wrapper around a class that can manage multiple priority queues (if needed)", "\n", "", "self", ".", "super_pq", "=", "SuperPQ", "(", "count", "=", "args", ".", "num_pqs", ",", "capacity", "=", "args", ".", "pq_capacity", ")", "\n", "\n", "pcnt", "=", "len", "(", "self", ".", "pdfs", "[", "self", ".", "rank", "]", ".", "get_flat", "(", ")", ")", "\n", "self", ".", "nb_pdf_param_buffer", "=", "{", "i", ":", "np", ".", "zeros", "(", "pcnt", ",", "dtype", "=", "np", ".", "float32", ")", "for", "i", "in", "self", ".", "neighbors", "}", "\n", "self", ".", "nb_obs_buffer", "=", "{", "i", ":", "np", ".", "zeros", "(", "(", "args", ".", "num_steps", ",", "self", ".", "obs_dim", ")", ",", "dtype", "=", "np", ".", "float32", ")", "for", "i", "in", "self", ".", "neighbors", "}", "\n", "self", ".", "nb_acs_buffer", "=", "{", "i", ":", "np", ".", "zeros", "(", "(", "args", ".", "num_steps", ",", "self", ".", "acs_dim", ")", ",", "dtype", "=", "np", ".", "float32", ")", "for", "i", "in", "self", ".", "neighbors", "}", "\n", "\n", "self", ".", "m_batch_buffer", "=", "BatchFIFO", "(", "capacity", "=", "2", ")", "\n", "self", ".", "nb_batch_buffer", "=", "{", "i", ":", "BatchFIFO", "(", "capacity", "=", "2", ")", "for", "i", "in", "self", ".", "neighbors", "}", "\n", "self", ".", "kernel_vals", "=", "{", "i", ":", "0", "for", "i", "in", "self", ".", "neighbors", "}", "\n", "\n", "self", ".", "temperature", "=", "args", ".", "temperature", "\n", "self", ".", "optim_params", "=", "{", "k", ":", "args", ".", "__dict__", "[", "k", "]", "for", "k", "in", "[", "'si_grad_steps'", "]", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.networks.nce_manager.NetworksManager.update": [[43, 111], ["nce_manager.NetworksManager.super_pq.random_select", "nce_manager.NetworksManager.si_discriminator.predict_batch_rewards", "nce_manager.NetworksManager.si_discriminator.update", "nce_manager.NetworksManager.comm.Barrier", "nce_manager.NetworksManager.pdfs[].get_flat().detach().numpy", "nce_manager.NetworksManager.rl_agent.rollouts.raw_obs[].view", "nce_manager.NetworksManager.rl_agent.rollouts.actions.view", "nce_manager.NetworksManager.pdfs[].infer", "m_obs.numpy.numpy.numpy", "m_acs.numpy.numpy.numpy", "nce_manager.NetworksManager.m_batch_buffer.add", "nce_manager.NetworksManager.comm.gather", "list", "len", "nce_manager.NetworksManager.add_traj", "list", "nce_manager.NetworksManager.super_pq.random_select", "nce_manager.NetworksManager.comm.Isend", "nce_manager.NetworksManager.comm.Recv", "nce_manager.NetworksManager.pdfs[].set_from_flat", "torch.cat", "nce_manager.NetworksManager.pdfs[].predict_batch_rewards", "nce_manager.NetworksManager.comm.Isend", "nce_manager.NetworksManager.comm.Isend", "nce_manager.NetworksManager.comm.Recv", "nce_manager.NetworksManager.comm.Recv", "nce_manager.NetworksManager.nb_batch_buffer[].add", "nce_manager.NetworksManager.pdfs[].update", "losses.append", "numpy.exp", "print", "nce_manager.NetworksManager.rl_agent.latest_trajs.values", "nce_manager.NetworksManager.rl_agent.latest_trajs.keys", "nce_manager.NetworksManager.pdfs[].get_flat().detach", "torch.from_numpy", "sum", "nce_manager.NetworksManager.mean().item", "[].item", "[].item", "numpy.average", "nce_manager.NetworksManager.pdfs[].get_flat", "nce_manager.NetworksManager.mean", "nce_manager.NetworksManager.max", "nce_manager.NetworksManager.min"], "methods", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.buffers.super_pq.SuperPQ.random_select", "home.repos.pwc.inspect_result.tgangwani_QDAgents.dre.vd_density_ratio.DensityRatio.predict_batch_rewards", "home.repos.pwc.inspect_result.tgangwani_QDAgents.rl.ppo.PPO.update", "home.repos.pwc.inspect_result.tgangwani_QDAgents.networks.pdf.PdfNetwork.infer", "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.batch_fifo_dice.BatchFIFO.add", "home.repos.pwc.inspect_result.tgangwani_QDAgents.buffers.priority_buffer.PriorityBuffer.add_traj", "home.repos.pwc.inspect_result.tgangwani_QDAgents.buffers.super_pq.SuperPQ.random_select", "home.repos.pwc.inspect_result.tgangwani_QDAgents.dre.vd_density_ratio.DensityRatio.set_from_flat", "home.repos.pwc.inspect_result.tgangwani_QDAgents.dre.vd_density_ratio.DensityRatio.predict_batch_rewards", "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.batch_fifo_dice.BatchFIFO.add", "home.repos.pwc.inspect_result.tgangwani_QDAgents.rl.ppo.PPO.update", "home.repos.pwc.inspect_result.tgangwani_QDAgents.dre.vd_density_ratio.DensityRatio.get_flat"], ["", "def", "update", "(", "self", ",", "ep_ret", ")", ":", "\n", "\n", "        ", "completed_trajs", "=", "list", "(", "self", ".", "rl_agent", ".", "latest_trajs", ".", "values", "(", ")", ")", "[", ":", "-", "1", "]", "\n", "assert", "len", "(", "completed_trajs", ")", ">", "0", ",", "\"No completed trajectory. Consider increasing args.num_steps\"", "\n", "\n", "# randomly select one of the pq-buffers, and add completed trajectories to it", "\n", "pqb", "=", "self", ".", "super_pq", ".", "random_select", "(", "ignore_empty", "=", "True", ")", "\n", "for", "traj", "in", "completed_trajs", ":", "\n", "            ", "pqb", ".", "add_traj", "(", "{", "**", "traj", ",", "'score'", ":", "sum", "(", "traj", "[", "'rewards'", "]", ")", "}", ")", "\n", "\n", "# pqb.add_traj() does a deepcopy, hence we can free some memory", "\n", "", "for", "i", "in", "list", "(", "self", ".", "rl_agent", ".", "latest_trajs", ".", "keys", "(", ")", ")", "[", ":", "-", "1", "]", ":", "\n", "            ", "del", "self", ".", "rl_agent", ".", "latest_trajs", "[", "i", "]", "\n", "\n", "# Update aux_rewards with values from the discriminator", "\n", "", "self", ".", "si_discriminator", ".", "predict_batch_rewards", "(", "self", ".", "rl_agent", ".", "rollouts", ")", "\n", "\n", "# Perform multiple updates of the discriminator classifier using rollouts and pq-buffer", "\n", "self", ".", "si_discriminator", ".", "update", "(", "self", ".", "super_pq", ".", "random_select", "(", ")", ",", "\n", "self", ".", "rl_agent", ".", "rollouts", ",", "num_grad_steps", "=", "self", ".", "optim_params", "[", "'si_grad_steps'", "]", ")", "\n", "\n", "self", ".", "comm", ".", "Barrier", "(", ")", "\n", "\n", "# send self-pdf parameters to all neighbors", "\n", "m_pdf_params", "=", "self", ".", "pdfs", "[", "self", ".", "rank", "]", ".", "get_flat", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "for", "i", "in", "self", ".", "neighbors", ":", "\n", "            ", "self", ".", "comm", ".", "Isend", "(", "m_pdf_params", ",", "dest", "=", "i", ",", "tag", "=", "11", ")", "\n", "\n", "# receive latest pdf parameters from neighbor ranks", "\n", "", "for", "i", "in", "self", ".", "neighbors", ":", "\n", "            ", "self", ".", "comm", ".", "Recv", "(", "self", ".", "nb_pdf_param_buffer", "[", "i", "]", ",", "source", "=", "i", ",", "tag", "=", "11", ")", "\n", "self", ".", "pdfs", "[", "i", "]", ".", "set_from_flat", "(", "torch", ".", "from_numpy", "(", "self", ".", "nb_pdf_param_buffer", "[", "i", "]", ")", ")", "\n", "\n", "", "m_obs", "=", "self", ".", "rl_agent", ".", "rollouts", ".", "raw_obs", "[", ":", "-", "1", "]", ".", "view", "(", "-", "1", ",", "self", ".", "obs_dim", ")", "\n", "m_acs", "=", "self", ".", "rl_agent", ".", "rollouts", ".", "actions", ".", "view", "(", "-", "1", ",", "self", ".", "acs_dim", ")", "\n", "m_pdf", "=", "self", ".", "pdfs", "[", "self", ".", "rank", "]", ".", "infer", "(", "torch", ".", "cat", "(", "[", "m_obs", ",", "m_acs", "]", ",", "dim", "=", "1", ")", ")", "\n", "m_obs", "=", "m_obs", ".", "numpy", "(", ")", ";", "m_acs", "=", "m_acs", ".", "numpy", "(", ")", "\n", "self", ".", "m_batch_buffer", ".", "add", "(", "m_obs", ",", "m_acs", ")", "\n", "\n", "# Update aux_rewards with values from the PDF networks", "\n", "for", "i", "in", "self", ".", "neighbors", ":", "\n", "            ", "self", ".", "pdfs", "[", "i", "]", ".", "predict_batch_rewards", "(", "i", ",", "m_pdf", ",", "self", ".", "rl_agent", ".", "rollouts", ")", "\n", "\n", "# send (s,a) data to all neighbors", "\n", "", "for", "i", "in", "self", ".", "neighbors", ":", "\n", "            ", "self", ".", "comm", ".", "Isend", "(", "m_obs", ",", "dest", "=", "i", ",", "tag", "=", "33", ")", "\n", "self", ".", "comm", ".", "Isend", "(", "m_acs", ",", "dest", "=", "i", ",", "tag", "=", "55", ")", "\n", "\n", "# receive (s,a) data from all neighbors", "\n", "", "for", "i", "in", "self", ".", "neighbors", ":", "\n", "            ", "self", ".", "comm", ".", "Recv", "(", "self", ".", "nb_obs_buffer", "[", "i", "]", ",", "source", "=", "i", ",", "tag", "=", "33", ")", "\n", "self", ".", "comm", ".", "Recv", "(", "self", ".", "nb_acs_buffer", "[", "i", "]", ",", "source", "=", "i", ",", "tag", "=", "55", ")", "\n", "self", ".", "nb_batch_buffer", "[", "i", "]", ".", "add", "(", "self", ".", "nb_obs_buffer", "[", "i", "]", ",", "self", ".", "nb_acs_buffer", "[", "i", "]", ")", "\n", "\n", "", "losses", "=", "[", "]", "\n", "for", "i", "in", "self", ".", "neighbors", ":", "\n", "            ", "loss_val", ",", "neg_divergence", "=", "self", ".", "pdfs", "[", "self", ".", "rank", "]", ".", "update", "(", "self", ".", "m_batch_buffer", ",", "self", ".", "nb_batch_buffer", "[", "i", "]", ",", "self", ".", "pdfs", ",", "i", ")", "\n", "losses", ".", "append", "(", "loss_val", ")", "\n", "neg_divergence", "/=", "self", ".", "temperature", "\n", "self", ".", "kernel_vals", "[", "i", "]", "=", "np", ".", "exp", "(", "neg_divergence", ")", "\n", "\n", "", "if", "self", ".", "debug_mode", ":", "\n", "            ", "print", "(", "'<debug> Pdf (unnormalized) stats: Avg:{0:.2f}, Max:{1:.2f}, Min:{2:.2f}, Avg-loss:{3:.2f}'", ".", "format", "(", "\n", "m_pdf", ".", "mean", "(", "0", ")", ".", "item", "(", ")", ",", "m_pdf", ".", "max", "(", "0", ")", "[", "0", "]", ".", "item", "(", ")", ",", "m_pdf", ".", "min", "(", "0", ")", "[", "0", "]", ".", "item", "(", ")", ",", "np", ".", "average", "(", "losses", ")", ")", ")", "\n", "\n", "# sync!", "\n", "", "ep_ret_all_ranks", "=", "self", ".", "comm", ".", "gather", "(", "ep_ret", ",", "root", "=", "0", ")", "\n", "return", "self", ".", "kernel_vals", ",", "ep_ret_all_ranks", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.networks.abstract_manager.AbstractManager.update": [[4, 7], ["None"], "methods", ["None"], ["    ", "@", "abc", ".", "abstractmethod", "\n", "def", "update", "(", "self", ",", "ep_ret", ":", "float", ")", ":", "\n", "        ", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.networks.actor_critic.ActorCritic.__init__": [[7, 16], ["torch.Module.__init__", "actor_critic.MLPBase", "qd_agents.utils.distributions.DiagGaussian"], "methods", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.buffers.storage.RolloutStorage.__init__"], ["    ", "def", "__init__", "(", "self", ",", "obs_shape", ",", "action_space", ",", "base_kwargs", "=", "None", ",", "kwargs", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "base_kwargs", "is", "None", ":", "\n", "            ", "base_kwargs", "=", "{", "}", "\n", "", "if", "kwargs", "is", "None", ":", "\n", "            ", "kwargs", "=", "{", "}", "\n", "\n", "", "self", ".", "base", "=", "MLPBase", "(", "obs_shape", "[", "0", "]", ",", "**", "base_kwargs", ")", "\n", "self", ".", "dist", "=", "DiagGaussian", "(", "self", ".", "base", ".", "output_size", ",", "action_space", ".", "shape", "[", "0", "]", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.networks.actor_critic.ActorCritic.is_recurrent": [[17, 20], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "is_recurrent", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "base", ".", "is_recurrent", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.networks.actor_critic.ActorCritic.recurrent_hidden_state_size": [[21, 25], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "recurrent_hidden_state_size", "(", "self", ")", ":", "\n", "        ", "\"\"\"Size of rnn_hx.\"\"\"", "\n", "return", "self", ".", "base", ".", "recurrent_hidden_state_size", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.networks.actor_critic.ActorCritic.forward": [[26, 28], ["NotImplementedError"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "rnn_hxs", ",", "masks", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.networks.actor_critic.ActorCritic.act": [[29, 35], ["actor_critic.ActorCritic.base", "actor_critic.ActorCritic.dist", "actor_critic.ActorCritic.mode", "actor_critic.ActorCritic.rsample", "actor_critic.ActorCritic.log_probs", "arctanh_action.detach"], "methods", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.distributions.TanhNormal.mode", "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.distributions.TanhNormal.rsample", "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.distributions.TanhNormal.log_probs"], ["", "def", "act", "(", "self", ",", "inputs", ",", "rnn_hxs", ",", "masks", ",", "deterministic", "=", "False", ")", ":", "\n", "        ", "value", ",", "aux_value", ",", "actor_features", ",", "rnn_hxs", "=", "self", ".", "base", "(", "inputs", ",", "rnn_hxs", ",", "masks", ")", "\n", "dist", "=", "self", ".", "dist", "(", "actor_features", ")", "\n", "arctanh_action", ",", "action", "=", "dist", ".", "mode", "(", ")", "if", "deterministic", "else", "dist", ".", "rsample", "(", ")", "\n", "action_log_probs", "=", "None", "if", "deterministic", "else", "dist", ".", "log_probs", "(", "arctanh_action", ".", "detach", "(", ")", ")", "\n", "return", "value", ",", "aux_value", ",", "action", ",", "arctanh_action", ",", "action_log_probs", ",", "rnn_hxs", ",", "dist", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.networks.actor_critic.ActorCritic.get_value": [[36, 39], ["actor_critic.ActorCritic.base"], "methods", ["None"], ["", "def", "get_value", "(", "self", ",", "inputs", ",", "rnn_hxs", ",", "masks", ")", ":", "\n", "        ", "value", ",", "aux_value", ",", "_", ",", "_", "=", "self", ".", "base", "(", "inputs", ",", "rnn_hxs", ",", "masks", ")", "\n", "return", "value", ",", "aux_value", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.networks.actor_critic.ActorCritic.evaluate_actions": [[40, 45], ["actor_critic.ActorCritic.base", "actor_critic.ActorCritic.dist", "actor_critic.ActorCritic.log_probs"], "methods", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.distributions.TanhNormal.log_probs"], ["", "def", "evaluate_actions", "(", "self", ",", "inputs", ",", "rnn_hxs", ",", "masks", ",", "_action", ",", "arctanh_action", ")", ":", "\n", "        ", "value", ",", "aux_value", ",", "actor_features", ",", "rnn_hxs", "=", "self", ".", "base", "(", "inputs", ",", "rnn_hxs", ",", "masks", ")", "\n", "dist", "=", "self", ".", "dist", "(", "actor_features", ")", "\n", "action_log_probs", "=", "dist", ".", "log_probs", "(", "arctanh_action", ")", "\n", "return", "value", ",", "aux_value", ",", "action_log_probs", ",", "rnn_hxs", ",", "dist", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.networks.actor_critic.NNBase.__init__": [[47, 56], ["torch.Module.__init__", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.buffers.storage.RolloutStorage.__init__"], ["    ", "def", "__init__", "(", "self", ",", "recurrent", ",", "_recurrent_input_size", ",", "hidden_size", ",", "comm_size", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "_hidden_size", "=", "hidden_size", "\n", "self", ".", "_recurrent", "=", "recurrent", "\n", "self", ".", "comm_size", "=", "comm_size", "\n", "\n", "if", "recurrent", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Current implementation does not support recurrent policy architectures.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.networks.actor_critic.NNBase.is_recurrent": [[57, 60], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "is_recurrent", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_recurrent", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.networks.actor_critic.NNBase.recurrent_hidden_state_size": [[61, 66], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "recurrent_hidden_state_size", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_recurrent", ":", "\n", "            ", "return", "self", ".", "_hidden_size", "\n", "", "return", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.networks.actor_critic.NNBase.output_size": [[67, 70], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "output_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_hidden_size", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.networks.actor_critic.NNBase._forward_gru": [[71, 73], ["NotImplementedError"], "methods", ["None"], ["", "def", "_forward_gru", "(", "self", ",", "x", ",", "hxs", ",", "masks", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"Current implementation does not support recurrent policy architectures.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.networks.actor_critic.MLPBase.__init__": [[75, 106], ["actor_critic.NNBase.__init__", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "actor_critic.MLPBase.train", "NotImplementedError", "qd_agents.utils.common_utils.init", "init_", "torch.Tanh", "init_", "torch.Tanh", "init_", "torch.Tanh", "init_", "torch.Tanh", "init_", "numpy.sqrt", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.init.constant_", "init_", "torch.Tanh", "init_", "torch.Tanh", "init_", "range", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.buffers.storage.RolloutStorage.__init__", "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.common_utils.init"], ["    ", "def", "__init__", "(", "self", ",", "num_inputs", ",", "comm_size", ",", "recurrent", "=", "False", ",", "hidden_size", "=", "64", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "recurrent", ",", "num_inputs", ",", "hidden_size", ",", "comm_size", ")", "\n", "\n", "if", "recurrent", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Current implementation does not support recurrent policy architectures.\"", ")", "\n", "\n", "", "init_", "=", "lambda", "m", ":", "init", "(", "m", ",", "nn", ".", "init", ".", "orthogonal_", ",", "lambda", "x", ":", "nn", ".", "init", ".", "\n", "constant_", "(", "x", ",", "0", ")", ",", "np", ".", "sqrt", "(", "2", ")", ")", "\n", "\n", "self", ".", "actor", "=", "nn", ".", "Sequential", "(", "\n", "init_", "(", "nn", ".", "Linear", "(", "num_inputs", ",", "hidden_size", ")", ")", ",", "nn", ".", "Tanh", "(", ")", ",", "\n", "init_", "(", "nn", ".", "Linear", "(", "hidden_size", ",", "hidden_size", ")", ")", ",", "nn", ".", "Tanh", "(", ")", ")", "\n", "\n", "self", ".", "critic", "=", "nn", ".", "Sequential", "(", "\n", "init_", "(", "nn", ".", "Linear", "(", "num_inputs", ",", "hidden_size", ")", ")", ",", "nn", ".", "Tanh", "(", ")", ",", "\n", "init_", "(", "nn", ".", "Linear", "(", "hidden_size", ",", "hidden_size", ")", ")", ",", "nn", ".", "Tanh", "(", ")", ",", "\n", "init_", "(", "nn", ".", "Linear", "(", "hidden_size", ",", "1", ")", ")", ")", "\n", "\n", "# define auxiliary critic networks", "\n", "# for an MPI ensemble of size k, there are k auxiliary critics, one to", "\n", "# compute the state-value w/ the self-imitation rewards, and (k-1) to", "\n", "# compute the state-value w/ the SVPG exploration rewards", "\n", "self", ".", "aux_critics", "=", "nn", ".", "ModuleList", "(", "[", "\n", "nn", ".", "Sequential", "(", "\n", "init_", "(", "nn", ".", "Linear", "(", "num_inputs", ",", "hidden_size", ")", ")", ",", "nn", ".", "Tanh", "(", ")", ",", "\n", "init_", "(", "nn", ".", "Linear", "(", "hidden_size", ",", "hidden_size", ")", ")", ",", "nn", ".", "Tanh", "(", ")", ",", "\n", "init_", "(", "nn", ".", "Linear", "(", "hidden_size", ",", "1", ")", ")", ")", "\n", "for", "_", "in", "range", "(", "comm_size", ")", "\n", "]", ")", "\n", "\n", "self", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.networks.actor_critic.MLPBase.forward": [[107, 114], ["actor_critic.MLPBase._forward_gru", "actor_critic.MLPBase.critic", "actor_critic.MLPBase.actor", "range"], "methods", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.networks.actor_critic.NNBase._forward_gru"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "rnn_hxs", ",", "masks", ")", ":", "\n", "        ", "x", "=", "inputs", "\n", "if", "self", ".", "is_recurrent", ":", "\n", "            ", "x", ",", "rnn_hxs", "=", "self", ".", "_forward_gru", "(", "x", ",", "rnn_hxs", ",", "masks", ")", "\n", "\n", "", "aux_critics_vals", "=", "[", "self", ".", "aux_critics", "[", "i", "]", "(", "x", ")", "for", "i", "in", "range", "(", "self", ".", "comm_size", ")", "]", "\n", "return", "self", ".", "critic", "(", "x", ")", ",", "aux_critics_vals", ",", "self", ".", "actor", "(", "x", ")", ",", "rnn_hxs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.dre.gd_density_ratio.DensityRatio.__init__": [[13, 54], ["torch.Module.__init__", "torch.init.calculate_gain", "torch.init.calculate_gain", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "qd_agents.utils.common_utils.RunningMeanStd", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "next", "print", "qd_agents.utils.common_utils.init", "init_", "actv", "init_", "actv", "init_", "actv", "init_", "init_", "actv", "init_", "actv", "init_", "actv", "init_", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.init.constant_", "torch.init.constant_", "gd_density_ratio.DensityRatio.parameters"], "methods", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.buffers.storage.RolloutStorage.__init__", "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.common_utils.init"], ["def", "__init__", "(", "self", ",", "ob_dim", ",", "ac_dim", ",", "hidden_dim", ",", "init_states", ",", "args", ")", ":", "\n", "\n", "# only print on creation of the first instance", "\n", "        ", "if", "not", "next", "(", "self", ".", "_ids", ")", ":", "\n", "            ", "print", "(", "\"++ GenDICE Density Ratio Estimator ++\"", ")", "\n", "\n", "", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ob_dim", "=", "ob_dim", "\n", "self", ".", "ac_dim", "=", "ac_dim", "\n", "input_dim", "=", "ob_dim", "+", "ac_dim", "\n", "self", ".", "init_states", "=", "init_states", "\n", "self", ".", "rank", "=", "args", ".", "rank", "\n", "self", ".", "gamma", "=", "args", ".", "gamma", "\n", "self", ".", "divergence", "=", "args", ".", "divergence", "\n", "actv", "=", "nn", ".", "Tanh", "\n", "gain", "=", "nn", ".", "init", ".", "calculate_gain", "(", "'tanh'", ")", "\n", "\n", "init_", "=", "lambda", "m", ",", "bias", "=", "0", ":", "init", "(", "m", ",", "nn", ".", "init", ".", "xavier_normal_", ",", "lambda", "x", ":", "nn", ".", "init", ".", "\n", "constant_", "(", "x", ",", "bias", ")", ",", "gain", "=", "gain", ")", "\n", "\n", "self", ".", "tau", "=", "nn", ".", "Sequential", "(", "\n", "init_", "(", "nn", ".", "Linear", "(", "input_dim", ",", "hidden_dim", ")", ")", ",", "actv", "(", ")", ",", "\n", "init_", "(", "nn", ".", "Linear", "(", "hidden_dim", ",", "hidden_dim", ")", ")", ",", "actv", "(", ")", ",", "\n", "init_", "(", "nn", ".", "Linear", "(", "hidden_dim", ",", "hidden_dim", ")", ")", ",", "actv", "(", ")", ",", "\n", "init_", "(", "nn", ".", "Linear", "(", "hidden_dim", ",", "1", ")", ")", ")", "\n", "\n", "self", ".", "f", "=", "nn", ".", "Sequential", "(", "\n", "init_", "(", "nn", ".", "Linear", "(", "input_dim", ",", "hidden_dim", ")", ")", ",", "actv", "(", ")", ",", "\n", "init_", "(", "nn", ".", "Linear", "(", "hidden_dim", ",", "hidden_dim", ")", ")", ",", "actv", "(", ")", ",", "\n", "init_", "(", "nn", ".", "Linear", "(", "hidden_dim", ",", "hidden_dim", ")", ")", ",", "actv", "(", ")", ",", "\n", "init_", "(", "nn", ".", "Linear", "(", "hidden_dim", ",", "1", ")", ")", ")", "\n", "\n", "self", ".", "u", "=", "nn", ".", "Parameter", "(", "-", "1.", "*", "torch", ".", "ones", "(", "1", ")", ")", "\n", "\n", "# these three parameters are only used for sharing the normalization data across MPI ranks", "\n", "self", ".", "_nrml_mean", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "input_dim", ")", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "_nrml_var", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "input_dim", ")", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "_nrml_count", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ",", "requires_grad", "=", "False", ")", "\n", "\n", "self", ".", "input_rms", "=", "RunningMeanStd", "(", "shape", "=", "input_dim", ")", "\n", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "(", "p", "for", "p", "in", "self", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", ")", ",", "lr", "=", "5e-4", ",", "weight_decay", "=", "1e-3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.dre.gd_density_ratio.DensityRatio._modifier": [[55, 59], ["torch.functional.softplus().clamp", "torch.functional.softplus().clamp", "torch.functional.softplus", "torch.functional.softplus"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_modifier", "(", "x", ")", ":", "\n", "        ", "x", "=", "nn", ".", "functional", ".", "softplus", "(", "x", ",", "beta", "=", "1.", ",", "threshold", "=", "1.", ")", ".", "clamp", "(", "min", "=", "DR_MIN", ",", "max", "=", "DR_MAX", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.dre.gd_density_ratio.DensityRatio.eval_ratio": [[60, 66], ["gd_density_ratio.DensityRatio.eval", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "qd_agents.utils.common_utils.obs_batch_normalize", "gd_density_ratio.DensityRatio._modifier", "gd_density_ratio.DensityRatio.tau"], "methods", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.common_utils.obs_batch_normalize", "home.repos.pwc.inspect_result.tgangwani_QDAgents.dre.dd_density_ratio.DensityRatio._modifier"], ["", "def", "eval_ratio", "(", "self", ",", "sa", ")", ":", "\n", "        ", "self", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "sa", "=", "obs_batch_normalize", "(", "sa", ",", "update_rms", "=", "False", ",", "rms_obj", "=", "self", ".", "input_rms", ")", "\n", "ratio", "=", "self", ".", "_modifier", "(", "self", ".", "tau", "(", "sa", ")", ")", "\n", "", "return", "ratio", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.dre.gd_density_ratio.DensityRatio.mute_param_update": [[67, 70], ["gd_density_ratio.DensityRatio.parameters"], "methods", ["None"], ["", "def", "mute_param_update", "(", "self", ")", ":", "\n", "        ", "for", "p", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "p", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.dre.gd_density_ratio.DensityRatio.set_from_flat": [[71, 76], ["torch.nn.utils.vector_to_parameters", "torch.nn.utils.vector_to_parameters", "gd_density_ratio.DensityRatio._nrml_mean.data.numpy", "gd_density_ratio.DensityRatio._nrml_var.data.numpy", "gd_density_ratio.DensityRatio._nrml_count.data.numpy", "gd_density_ratio.DensityRatio.parameters"], "methods", ["None"], ["", "", "def", "set_from_flat", "(", "self", ",", "vector", ")", ":", "\n", "        ", "vector_to_parameters", "(", "vector", ",", "self", ".", "parameters", "(", ")", ")", "\n", "self", ".", "input_rms", ".", "mean", "=", "self", ".", "_nrml_mean", ".", "data", ".", "numpy", "(", ")", "\n", "self", ".", "input_rms", ".", "var", "=", "self", ".", "_nrml_var", ".", "data", ".", "numpy", "(", ")", "\n", "self", ".", "input_rms", ".", "count", "=", "self", ".", "_nrml_count", ".", "data", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.dre.gd_density_ratio.DensityRatio.get_flat": [[77, 82], ["gd_density_ratio.DensityRatio._nrml_mean.data.copy_", "gd_density_ratio.DensityRatio._nrml_var.data.copy_", "gd_density_ratio.DensityRatio._nrml_count.data.copy_", "torch.nn.utils.parameters_to_vector().detach", "torch.nn.utils.parameters_to_vector().detach", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.nn.utils.parameters_to_vector", "torch.nn.utils.parameters_to_vector", "gd_density_ratio.DensityRatio.parameters"], "methods", ["None"], ["", "def", "get_flat", "(", "self", ")", ":", "\n", "        ", "self", ".", "_nrml_mean", ".", "data", ".", "copy_", "(", "torch", ".", "tensor", "(", "self", ".", "input_rms", ".", "mean", ")", ")", "\n", "self", ".", "_nrml_var", ".", "data", ".", "copy_", "(", "torch", ".", "tensor", "(", "self", ".", "input_rms", ".", "var", ")", ")", "\n", "self", ".", "_nrml_count", ".", "data", ".", "copy_", "(", "torch", ".", "tensor", "(", "self", ".", "input_rms", ".", "count", ")", ")", "\n", "return", "parameters_to_vector", "(", "self", ".", "parameters", "(", ")", ")", ".", "detach", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.dre.gd_density_ratio.DensityRatio.eval_neg_divergence": [[83, 110], ["m_buffer.get_sample", "nb_buffer.get_sample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "ValueError", "gd_density_ratio.DensityRatio.eval_ratio", "nb_inverse_dr.eval_ratio", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp.item", "torch.clamp.item", "gd_density_ratio.DensityRatio.eval_ratio", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp.item", "torch.clamp.item", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "gd_density_ratio.DensityRatio.eval_ratio", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "output.mean", "torch.log", "torch.log", "torch.log", "torch.log", "output.mean", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.batch_fifo_dice.BatchFIFO.get_sample", "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.batch_fifo_dice.BatchFIFO.get_sample", "home.repos.pwc.inspect_result.tgangwani_QDAgents.dre.vd_density_ratio.DensityRatio.eval_ratio", "home.repos.pwc.inspect_result.tgangwani_QDAgents.dre.vd_density_ratio.DensityRatio.eval_ratio", "home.repos.pwc.inspect_result.tgangwani_QDAgents.dre.vd_density_ratio.DensityRatio.eval_ratio", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.dre.vd_density_ratio.DensityRatio.eval_ratio", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log"], ["", "def", "eval_neg_divergence", "(", "self", ",", "m_buffer", ",", "nb_buffer", ",", "nb_inverse_dr", ")", ":", "\n", "        ", "m_states", ",", "m_actions", ",", "*", "_", "=", "m_buffer", ".", "get_sample", "(", "nbatches", "=", "2", ")", "\n", "nb_states", ",", "nb_actions", ",", "*", "_", "=", "nb_buffer", ".", "get_sample", "(", "nbatches", "=", "2", ")", "\n", "m_sa", "=", "torch", ".", "cat", "(", "[", "m_states", ",", "m_actions", "]", ",", "dim", "=", "1", ")", "\n", "nb_sa", "=", "torch", ".", "cat", "(", "[", "nb_states", ",", "nb_actions", "]", ",", "dim", "=", "1", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\n", "            ", "if", "self", ".", "divergence", "==", "'js'", ":", "\n", "                ", "ratio1", "=", "self", ".", "eval_ratio", "(", "nb_sa", ")", "\n", "ratio2", "=", "nb_inverse_dr", ".", "eval_ratio", "(", "m_sa", ")", "\n", "\n", "output", "=", "torch", ".", "log", "(", "1.", "/", "(", "1.", "+", "ratio2", ")", "+", "EPS", ")", "+", "torch", ".", "log", "(", "1.", "/", "(", "1", "+", "ratio1", ")", "+", "EPS", ")", "\n", "neg_js", "=", "0.5", "*", "(", "-", "output", ".", "mean", "(", "0", ")", "-", "torch", ".", "log", "(", "torch", ".", "tensor", "(", "4.", ")", ")", ")", "\n", "neg_js", "=", "torch", ".", "clamp", "(", "neg_js", ",", "max", "=", "0", ")", "# clip the residual positive part (if any)", "\n", "return", "neg_js", ".", "item", "(", ")", "\n", "\n", "", "if", "self", ".", "divergence", "==", "'kls'", ":", "\n", "                ", "ratio1", "=", "self", ".", "eval_ratio", "(", "m_sa", ")", "\n", "ratio2", "=", "1.", "/", "self", ".", "eval_ratio", "(", "nb_sa", ")", "\n", "\n", "output", "=", "torch", ".", "log", "(", "ratio1", "+", "EPS", ")", "+", "torch", ".", "log", "(", "ratio2", "+", "EPS", ")", "\n", "neg_kls", "=", "-", "output", ".", "mean", "(", "0", ")", "\n", "neg_kls", "=", "torch", ".", "clamp", "(", "neg_kls", ",", "max", "=", "0", ")", "# clip the residual positive part (if any)", "\n", "return", "neg_kls", ".", "item", "(", ")", "\n", "\n", "", "raise", "ValueError", "(", "\"Unknown divergence\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.dre.gd_density_ratio.DensityRatio.update": [[111, 174], ["gd_density_ratio.DensityRatio.train", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "qd_agents.utils.common_utils.obs_batch_normalize", "nb_buffer.get_sample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "qd_agents.utils.common_utils.obs_batch_normalize", "qd_agents.utils.common_utils.obs_batch_normalize", "qd_agents.utils.common_utils.CustomMapDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "gd_density_ratio.DensityRatio.eval_neg_divergence", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "m_policy_act_fn", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "m_policy_act_fn", "qd_agents.utils.common_utils.obs_batch_normalize.size", "init_sa.repeat.repeat.size", "int", "init_sa.repeat.repeat.repeat", "loss_3.mean.mean.mean", "loss.item", "gd_density_ratio.DensityRatio.optimizer.zero_grad", "loss.backward", "gd_density_ratio.DensityRatio.f.parameters", "torch.utils.clip_grad_norm_", "torch.utils.clip_grad_norm_", "gd_density_ratio.DensityRatio.optimizer.step", "gd_density_ratio.DensityRatio.f().mean", "gd_density_ratio.DensityRatio.f", "gd_density_ratio.DensityRatio.parameters", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "gd_density_ratio.DensityRatio._modifier().mean().item", "qd_agents.utils.common_utils.obs_batch_normalize.size", "init_sa.repeat.repeat.size", "qd_agents.utils.common_utils.obs_batch_normalize.size", "init_sa.repeat.repeat.size", "gd_density_ratio.DensityRatio._modifier", "gd_density_ratio.DensityRatio.f", "gd_density_ratio.DensityRatio.u.pow", "gd_density_ratio.DensityRatio.f", "gd_density_ratio.DensityRatio.tau", "gd_density_ratio.DensityRatio._modifier", "gd_density_ratio.DensityRatio.f", "gd_density_ratio.DensityRatio._modifier", "gd_density_ratio.DensityRatio._modifier().mean", "gd_density_ratio.DensityRatio.tau", "gd_density_ratio.DensityRatio.tau", "gd_density_ratio.DensityRatio._modifier", "gd_density_ratio.DensityRatio.tau"], "methods", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.common_utils.obs_batch_normalize", "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.batch_fifo_dice.BatchFIFO.get_sample", "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.common_utils.obs_batch_normalize", "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.common_utils.obs_batch_normalize", "home.repos.pwc.inspect_result.tgangwani_QDAgents.dre.vd_density_ratio.DensityRatio.eval_neg_divergence", "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.batch_fifo_dice.BatchFIFO.size", "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.batch_fifo_dice.BatchFIFO.size", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.monitor.Monitor.step", "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.batch_fifo_dice.BatchFIFO.size", "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.batch_fifo_dice.BatchFIFO.size", "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.batch_fifo_dice.BatchFIFO.size", "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.batch_fifo_dice.BatchFIFO.size", "home.repos.pwc.inspect_result.tgangwani_QDAgents.dre.dd_density_ratio.DensityRatio._modifier", "home.repos.pwc.inspect_result.tgangwani_QDAgents.dre.dd_density_ratio.DensityRatio._modifier", "home.repos.pwc.inspect_result.tgangwani_QDAgents.dre.dd_density_ratio.DensityRatio._modifier", "home.repos.pwc.inspect_result.tgangwani_QDAgents.dre.dd_density_ratio.DensityRatio._modifier"], ["", "", "def", "update", "(", "self", ",", "m_buffer", ",", "nb_buffer", ",", "m_policy_act_fn", ",", "nb_inverse_dr", ")", ":", "\n", "        ", "self", ".", "train", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "init_actions", "=", "m_policy_act_fn", "(", "self", ".", "init_states", ",", "deterministic", "=", "False", ")", "\n", "", "init_sa", "=", "torch", ".", "cat", "(", "[", "self", ".", "init_states", ",", "init_actions", "]", ",", "dim", "=", "1", ")", "\n", "init_sa", "=", "obs_batch_normalize", "(", "init_sa", ",", "update_rms", "=", "True", ",", "rms_obj", "=", "self", ".", "input_rms", ")", "\n", "\n", "nb_states", ",", "nb_actions", ",", "nb_next_states", ",", "nb_masks", "=", "nb_buffer", ".", "get_sample", "(", "nbatches", "=", "2", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "next_actions", "=", "m_policy_act_fn", "(", "nb_next_states", ",", "deterministic", "=", "False", ")", "\n", "\n", "", "sa", "=", "torch", ".", "cat", "(", "[", "nb_states", ",", "nb_actions", "]", ",", "dim", "=", "1", ")", "\n", "next_sa", "=", "torch", ".", "cat", "(", "[", "nb_next_states", ",", "next_actions", "]", ",", "dim", "=", "1", ")", "\n", "sa", "=", "obs_batch_normalize", "(", "sa", ",", "update_rms", "=", "True", ",", "rms_obj", "=", "self", ".", "input_rms", ")", "\n", "next_sa", "=", "obs_batch_normalize", "(", "next_sa", ",", "update_rms", "=", "True", ",", "rms_obj", "=", "self", ".", "input_rms", ")", "\n", "\n", "if", "sa", ".", "size", "(", "0", ")", ">", "init_sa", ".", "size", "(", "0", ")", ":", "\n", "            ", "assert", "sa", ".", "size", "(", "0", ")", "%", "init_sa", ".", "size", "(", "0", ")", "==", "0", "\n", "repeat_fac", "=", "int", "(", "sa", ".", "size", "(", "0", ")", "/", "init_sa", ".", "size", "(", "0", ")", ")", "\n", "init_sa", "=", "init_sa", ".", "repeat", "(", "repeat_fac", ",", "1", ")", "\n", "\n", "", "dset", "=", "CustomMapDataset", "(", "init_sa", ",", "sa", ",", "next_sa", ",", "nb_masks", ")", "\n", "dset_generator", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dset", ",", "batch_size", "=", "512", ",", "shuffle", "=", "True", ")", "\n", "\n", "loss_val", "=", "0.", "\n", "n", "=", "0.", "\n", "dratio_val", "=", "0.", "\n", "for", "data", "in", "dset_generator", ":", "\n", "            ", "init_sa_mb", ",", "sa_mb", ",", "next_sa_mb", ",", "masks_mb", "=", "data", "\n", "\n", "loss_1", "=", "(", "1", "-", "self", ".", "gamma", ")", "*", "self", ".", "f", "(", "init_sa_mb", ")", ".", "mean", "(", "0", ")", "\n", "\n", "loss_2", "=", "self", ".", "gamma", "*", "self", ".", "_modifier", "(", "self", ".", "tau", "(", "sa_mb", ")", ")", "*", "self", ".", "f", "(", "next_sa_mb", ")", "\n", "loss_2", "=", "(", "loss_2", "*", "masks_mb", ")", ".", "mean", "(", "0", ")", "\n", "\n", "loss_3", "=", "-", "self", ".", "_modifier", "(", "self", ".", "tau", "(", "sa_mb", ")", ")", "*", "self", ".", "f", "(", "sa_mb", ")", "*", "(", "1", "+", "0.25", "*", "self", ".", "f", "(", "sa_mb", ")", ")", "\n", "loss_3", "=", "loss_3", ".", "mean", "(", "0", ")", "\n", "\n", "loss_4", "=", "self", ".", "_modifier", "(", "self", ".", "tau", "(", "sa_mb", ")", ")", "*", "self", ".", "u", "-", "self", ".", "u", "-", "0.5", "*", "self", ".", "u", ".", "pow", "(", "2", ")", "\n", "loss_4", "=", "(", "1.", "*", "loss_4", ")", ".", "mean", "(", "0", ")", "\n", "\n", "# gen-dice loss is computed as per the equations in [https://arxiv.org/abs/2002.09072]", "\n", "loss", "=", "loss_1", "+", "loss_2", "+", "loss_3", "+", "loss_4", "\n", "\n", "loss_val", "+=", "loss", ".", "item", "(", ")", "\n", "n", "+=", "1", "\n", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "for", "p", "in", "self", ".", "f", ".", "parameters", "(", ")", ":", "\n", "                ", "p", ".", "grad", ".", "data", "=", "-", "p", ".", "grad", ".", "data", "\n", "", "self", ".", "u", ".", "grad", ".", "data", "=", "-", "self", ".", "u", ".", "grad", ".", "data", "\n", "\n", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "parameters", "(", ")", ",", "max_norm", "=", "1.", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "dratio_val", "+=", "self", ".", "_modifier", "(", "self", ".", "tau", "(", "sa_mb", ")", ")", ".", "mean", "(", "0", ")", ".", "item", "(", ")", "\n", "\n", "", "", "neg_divergence", "=", "self", ".", "eval_neg_divergence", "(", "m_buffer", ",", "nb_buffer", ",", "nb_inverse_dr", ")", "\n", "return", "loss_val", "/", "n", ",", "dratio_val", "/", "n", ",", "neg_divergence", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.dre.gd_density_ratio.DensityRatio.predict_batch_rewards": [[175, 193], ["rollouts.raw_obs[].view", "rollouts.actions.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "rewards.view.view.view", "rollouts.aux_rewards[].copy_", "gd_density_ratio.DensityRatio.eval_ratio", "torch.log", "torch.log", "torch.log", "torch.log", "nb_inverse_dr.eval_ratio", "ValueError", "torch.log", "torch.log", "torch.log", "torch.log"], "methods", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.dre.vd_density_ratio.DensityRatio.eval_ratio", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.dre.vd_density_ratio.DensityRatio.eval_ratio", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log"], ["", "def", "predict_batch_rewards", "(", "self", ",", "idx", ",", "rollouts", ",", "nb_inverse_dr", ",", "*", "_", ")", ":", "\n", "        ", "assert", "idx", "!=", "self", ".", "rank", "\n", "obs", "=", "rollouts", ".", "raw_obs", "[", ":", "-", "1", "]", ".", "view", "(", "-", "1", ",", "self", ".", "ob_dim", ")", "\n", "acs", "=", "rollouts", ".", "actions", ".", "view", "(", "-", "1", ",", "self", ".", "ac_dim", ")", "\n", "sa", "=", "torch", ".", "cat", "(", "[", "obs", ",", "acs", "]", ",", "dim", "=", "1", ")", "\n", "\n", "if", "self", ".", "divergence", "==", "'js'", ":", "\n", "            ", "ratio", "=", "self", ".", "eval_ratio", "(", "sa", ")", "\n", "rewards", "=", "-", "torch", ".", "log", "(", "1.", "/", "(", "1.", "+", "ratio", ")", "+", "EPS", ")", "\n", "\n", "", "elif", "self", ".", "divergence", "==", "'kls'", ":", "\n", "            ", "inv_ratio", "=", "nb_inverse_dr", ".", "eval_ratio", "(", "sa", ")", "\n", "rewards", "=", "-", "inv_ratio", "-", "torch", ".", "log", "(", "inv_ratio", "+", "EPS", ")", "\n", "\n", "", "else", ":", "raise", "ValueError", "(", "\"Unknown divergence\"", ")", "\n", "\n", "rewards", "=", "rewards", ".", "view", "(", "rollouts", ".", "num_steps", ",", "-", "1", ",", "1", ")", "\n", "rollouts", ".", "aux_rewards", "[", "idx", "]", ".", "copy_", "(", "rewards", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.dre.dd_density_ratio.DensityRatio.__init__": [[13, 52], ["torch.Module.__init__", "torch.init.calculate_gain", "torch.init.calculate_gain", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "qd_agents.utils.common_utils.RunningMeanStd", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "next", "print", "qd_agents.utils.common_utils.init", "init_", "actv", "init_", "actv", "init_", "actv", "init_", "init_", "actv", "init_", "actv", "init_", "actv", "init_", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.init.constant_", "torch.init.constant_", "dd_density_ratio.DensityRatio.parameters"], "methods", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.buffers.storage.RolloutStorage.__init__", "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.common_utils.init"], ["def", "__init__", "(", "self", ",", "ob_dim", ",", "ac_dim", ",", "hidden_dim", ",", "init_states", ",", "args", ")", ":", "\n", "\n", "# only print on creation of the first instance", "\n", "        ", "if", "not", "next", "(", "self", ".", "_ids", ")", ":", "\n", "            ", "print", "(", "\"++ DualDICE Density Ratio Estimator ++\"", ")", "\n", "\n", "", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ob_dim", "=", "ob_dim", "\n", "self", ".", "ac_dim", "=", "ac_dim", "\n", "input_dim", "=", "ob_dim", "+", "ac_dim", "\n", "self", ".", "init_states", "=", "init_states", "\n", "self", ".", "rank", "=", "args", ".", "rank", "\n", "self", ".", "divergence", "=", "args", ".", "divergence", "\n", "self", ".", "gamma", "=", "args", ".", "gamma", "\n", "actv", "=", "nn", ".", "Tanh", "\n", "gain", "=", "nn", ".", "init", ".", "calculate_gain", "(", "'tanh'", ")", "\n", "\n", "init_", "=", "lambda", "m", ",", "bias", "=", "0", ":", "init", "(", "m", ",", "nn", ".", "init", ".", "xavier_normal_", ",", "lambda", "x", ":", "nn", ".", "init", ".", "\n", "constant_", "(", "x", ",", "bias", ")", ",", "gain", "=", "gain", ")", "\n", "\n", "self", ".", "tau", "=", "nn", ".", "Sequential", "(", "\n", "init_", "(", "nn", ".", "Linear", "(", "input_dim", ",", "hidden_dim", ")", ")", ",", "actv", "(", ")", ",", "\n", "init_", "(", "nn", ".", "Linear", "(", "hidden_dim", ",", "hidden_dim", ")", ")", ",", "actv", "(", ")", ",", "\n", "init_", "(", "nn", ".", "Linear", "(", "hidden_dim", ",", "hidden_dim", ")", ")", ",", "actv", "(", ")", ",", "\n", "init_", "(", "nn", ".", "Linear", "(", "hidden_dim", ",", "1", ")", ")", ")", "\n", "\n", "self", ".", "f", "=", "nn", ".", "Sequential", "(", "\n", "init_", "(", "nn", ".", "Linear", "(", "input_dim", ",", "hidden_dim", ")", ")", ",", "actv", "(", ")", ",", "\n", "init_", "(", "nn", ".", "Linear", "(", "hidden_dim", ",", "hidden_dim", ")", ")", ",", "actv", "(", ")", ",", "\n", "init_", "(", "nn", ".", "Linear", "(", "hidden_dim", ",", "hidden_dim", ")", ")", ",", "actv", "(", ")", ",", "\n", "init_", "(", "nn", ".", "Linear", "(", "hidden_dim", ",", "1", ")", ")", ")", "\n", "\n", "# these three parameters are only used for sharing the normalization data across MPI ranks", "\n", "self", ".", "_nrml_mean", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "input_dim", ")", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "_nrml_var", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "input_dim", ")", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "_nrml_count", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ",", "requires_grad", "=", "False", ")", "\n", "\n", "self", ".", "input_rms", "=", "RunningMeanStd", "(", "shape", "=", "input_dim", ")", "\n", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "(", "p", "for", "p", "in", "self", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", ")", ",", "lr", "=", "5e-4", ",", "weight_decay", "=", "1e-3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.dre.dd_density_ratio.DensityRatio._modifier": [[53, 57], ["torch.functional.softplus().clamp", "torch.functional.softplus().clamp", "torch.functional.softplus", "torch.functional.softplus"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_modifier", "(", "x", ")", ":", "\n", "        ", "x", "=", "nn", ".", "functional", ".", "softplus", "(", "x", ",", "beta", "=", "1.", ",", "threshold", "=", "1.", ")", ".", "clamp", "(", "min", "=", "DR_MIN", ",", "max", "=", "DR_MAX", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.dre.dd_density_ratio.DensityRatio.eval_ratio": [[58, 64], ["dd_density_ratio.DensityRatio.eval", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "qd_agents.utils.common_utils.obs_batch_normalize", "dd_density_ratio.DensityRatio._modifier", "dd_density_ratio.DensityRatio.tau"], "methods", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.common_utils.obs_batch_normalize", "home.repos.pwc.inspect_result.tgangwani_QDAgents.dre.dd_density_ratio.DensityRatio._modifier"], ["", "def", "eval_ratio", "(", "self", ",", "sa", ")", ":", "\n", "        ", "self", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "sa", "=", "obs_batch_normalize", "(", "sa", ",", "update_rms", "=", "False", ",", "rms_obj", "=", "self", ".", "input_rms", ")", "\n", "ratio", "=", "self", ".", "_modifier", "(", "self", ".", "tau", "(", "sa", ")", ")", "\n", "", "return", "ratio", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.dre.dd_density_ratio.DensityRatio.mute_param_update": [[65, 68], ["dd_density_ratio.DensityRatio.parameters"], "methods", ["None"], ["", "def", "mute_param_update", "(", "self", ")", ":", "\n", "        ", "for", "p", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "p", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.dre.dd_density_ratio.DensityRatio.set_from_flat": [[69, 74], ["torch.nn.utils.vector_to_parameters", "torch.nn.utils.vector_to_parameters", "dd_density_ratio.DensityRatio._nrml_mean.data.numpy", "dd_density_ratio.DensityRatio._nrml_var.data.numpy", "dd_density_ratio.DensityRatio._nrml_count.data.numpy", "dd_density_ratio.DensityRatio.parameters"], "methods", ["None"], ["", "", "def", "set_from_flat", "(", "self", ",", "vector", ")", ":", "\n", "        ", "vector_to_parameters", "(", "vector", ",", "self", ".", "parameters", "(", ")", ")", "\n", "self", ".", "input_rms", ".", "mean", "=", "self", ".", "_nrml_mean", ".", "data", ".", "numpy", "(", ")", "\n", "self", ".", "input_rms", ".", "var", "=", "self", ".", "_nrml_var", ".", "data", ".", "numpy", "(", ")", "\n", "self", ".", "input_rms", ".", "count", "=", "self", ".", "_nrml_count", ".", "data", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.dre.dd_density_ratio.DensityRatio.get_flat": [[75, 80], ["dd_density_ratio.DensityRatio._nrml_mean.data.copy_", "dd_density_ratio.DensityRatio._nrml_var.data.copy_", "dd_density_ratio.DensityRatio._nrml_count.data.copy_", "torch.nn.utils.parameters_to_vector().detach", "torch.nn.utils.parameters_to_vector().detach", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.nn.utils.parameters_to_vector", "torch.nn.utils.parameters_to_vector", "dd_density_ratio.DensityRatio.parameters"], "methods", ["None"], ["", "def", "get_flat", "(", "self", ")", ":", "\n", "        ", "self", ".", "_nrml_mean", ".", "data", ".", "copy_", "(", "torch", ".", "tensor", "(", "self", ".", "input_rms", ".", "mean", ")", ")", "\n", "self", ".", "_nrml_var", ".", "data", ".", "copy_", "(", "torch", ".", "tensor", "(", "self", ".", "input_rms", ".", "var", ")", ")", "\n", "self", ".", "_nrml_count", ".", "data", ".", "copy_", "(", "torch", ".", "tensor", "(", "self", ".", "input_rms", ".", "count", ")", ")", "\n", "return", "parameters_to_vector", "(", "self", ".", "parameters", "(", ")", ")", ".", "detach", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.dre.dd_density_ratio.DensityRatio.eval_neg_divergence": [[81, 108], ["m_buffer.get_sample", "nb_buffer.get_sample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "ValueError", "dd_density_ratio.DensityRatio.eval_ratio", "nb_inverse_dr.eval_ratio", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp.item", "torch.clamp.item", "dd_density_ratio.DensityRatio.eval_ratio", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp.item", "torch.clamp.item", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "dd_density_ratio.DensityRatio.eval_ratio", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "output.mean", "torch.log", "torch.log", "torch.log", "torch.log", "output.mean", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.batch_fifo_dice.BatchFIFO.get_sample", "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.batch_fifo_dice.BatchFIFO.get_sample", "home.repos.pwc.inspect_result.tgangwani_QDAgents.dre.vd_density_ratio.DensityRatio.eval_ratio", "home.repos.pwc.inspect_result.tgangwani_QDAgents.dre.vd_density_ratio.DensityRatio.eval_ratio", "home.repos.pwc.inspect_result.tgangwani_QDAgents.dre.vd_density_ratio.DensityRatio.eval_ratio", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.dre.vd_density_ratio.DensityRatio.eval_ratio", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log"], ["", "def", "eval_neg_divergence", "(", "self", ",", "m_buffer", ",", "nb_buffer", ",", "nb_inverse_dr", ")", ":", "\n", "        ", "m_states", ",", "m_actions", ",", "*", "_", "=", "m_buffer", ".", "get_sample", "(", "nbatches", "=", "2", ")", "\n", "nb_states", ",", "nb_actions", ",", "*", "_", "=", "nb_buffer", ".", "get_sample", "(", "nbatches", "=", "2", ")", "\n", "m_sa", "=", "torch", ".", "cat", "(", "[", "m_states", ",", "m_actions", "]", ",", "dim", "=", "1", ")", "\n", "nb_sa", "=", "torch", ".", "cat", "(", "[", "nb_states", ",", "nb_actions", "]", ",", "dim", "=", "1", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\n", "            ", "if", "self", ".", "divergence", "==", "'js'", ":", "\n", "                ", "ratio1", "=", "self", ".", "eval_ratio", "(", "nb_sa", ")", "\n", "ratio2", "=", "nb_inverse_dr", ".", "eval_ratio", "(", "m_sa", ")", "\n", "\n", "output", "=", "torch", ".", "log", "(", "1.", "/", "(", "1.", "+", "ratio2", ")", "+", "EPS", ")", "+", "torch", ".", "log", "(", "1.", "/", "(", "1", "+", "ratio1", ")", "+", "EPS", ")", "\n", "neg_js", "=", "0.5", "*", "(", "-", "output", ".", "mean", "(", "0", ")", "-", "torch", ".", "log", "(", "torch", ".", "tensor", "(", "4.", ")", ")", ")", "\n", "neg_js", "=", "torch", ".", "clamp", "(", "neg_js", ",", "max", "=", "0", ")", "# clip the residual positive part (if any)", "\n", "return", "neg_js", ".", "item", "(", ")", "\n", "\n", "", "if", "self", ".", "divergence", "==", "'kls'", ":", "\n", "                ", "ratio1", "=", "self", ".", "eval_ratio", "(", "m_sa", ")", "\n", "ratio2", "=", "1.", "/", "self", ".", "eval_ratio", "(", "nb_sa", ")", "\n", "\n", "output", "=", "torch", ".", "log", "(", "ratio1", "+", "EPS", ")", "+", "torch", ".", "log", "(", "ratio2", "+", "EPS", ")", "\n", "neg_kls", "=", "-", "output", ".", "mean", "(", "0", ")", "\n", "neg_kls", "=", "torch", ".", "clamp", "(", "neg_kls", ",", "max", "=", "0", ")", "# clip the residual positive part (if any)", "\n", "return", "neg_kls", ".", "item", "(", ")", "\n", "\n", "", "raise", "ValueError", "(", "\"Unknown divergence\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.dre.dd_density_ratio.DensityRatio.update": [[109, 168], ["dd_density_ratio.DensityRatio.train", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "qd_agents.utils.common_utils.obs_batch_normalize", "nb_buffer.get_sample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "qd_agents.utils.common_utils.obs_batch_normalize", "qd_agents.utils.common_utils.obs_batch_normalize", "qd_agents.utils.common_utils.CustomMapDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "dd_density_ratio.DensityRatio.eval_neg_divergence", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "m_policy_act_fn", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "m_policy_act_fn", "qd_agents.utils.common_utils.obs_batch_normalize.size", "init_sa.repeat.repeat.size", "int", "init_sa.repeat.repeat.repeat", "loss_2.mean.mean.mean", "loss.item", "dd_density_ratio.DensityRatio.optimizer.zero_grad", "loss.backward", "dd_density_ratio.DensityRatio.f.parameters", "torch.utils.clip_grad_norm_", "torch.utils.clip_grad_norm_", "dd_density_ratio.DensityRatio.optimizer.step", "dd_density_ratio.DensityRatio._modifier", "dd_density_ratio.DensityRatio._modifier().pow", "dd_density_ratio.DensityRatio.f().mean", "dd_density_ratio.DensityRatio.parameters", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "dd_density_ratio.DensityRatio._modifier().mean().item", "qd_agents.utils.common_utils.obs_batch_normalize.size", "init_sa.repeat.repeat.size", "qd_agents.utils.common_utils.obs_batch_normalize.size", "init_sa.repeat.repeat.size", "dd_density_ratio.DensityRatio.tau", "dd_density_ratio.DensityRatio.f", "dd_density_ratio.DensityRatio._modifier", "dd_density_ratio.DensityRatio.f", "dd_density_ratio.DensityRatio._modifier().mean", "dd_density_ratio.DensityRatio.f", "dd_density_ratio.DensityRatio.tau", "dd_density_ratio.DensityRatio._modifier", "dd_density_ratio.DensityRatio.tau"], "methods", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.common_utils.obs_batch_normalize", "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.batch_fifo_dice.BatchFIFO.get_sample", "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.common_utils.obs_batch_normalize", "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.common_utils.obs_batch_normalize", "home.repos.pwc.inspect_result.tgangwani_QDAgents.dre.vd_density_ratio.DensityRatio.eval_neg_divergence", "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.batch_fifo_dice.BatchFIFO.size", "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.batch_fifo_dice.BatchFIFO.size", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.monitor.Monitor.step", "home.repos.pwc.inspect_result.tgangwani_QDAgents.dre.dd_density_ratio.DensityRatio._modifier", "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.batch_fifo_dice.BatchFIFO.size", "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.batch_fifo_dice.BatchFIFO.size", "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.batch_fifo_dice.BatchFIFO.size", "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.batch_fifo_dice.BatchFIFO.size", "home.repos.pwc.inspect_result.tgangwani_QDAgents.dre.dd_density_ratio.DensityRatio._modifier", "home.repos.pwc.inspect_result.tgangwani_QDAgents.dre.dd_density_ratio.DensityRatio._modifier"], ["", "", "def", "update", "(", "self", ",", "m_buffer", ",", "nb_buffer", ",", "m_policy_act_fn", ",", "nb_inverse_dr", ")", ":", "\n", "        ", "self", ".", "train", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "init_actions", "=", "m_policy_act_fn", "(", "self", ".", "init_states", ",", "deterministic", "=", "False", ")", "\n", "", "init_sa", "=", "torch", ".", "cat", "(", "[", "self", ".", "init_states", ",", "init_actions", "]", ",", "dim", "=", "1", ")", "\n", "init_sa", "=", "obs_batch_normalize", "(", "init_sa", ",", "update_rms", "=", "True", ",", "rms_obj", "=", "self", ".", "input_rms", ")", "\n", "\n", "nb_states", ",", "nb_actions", ",", "nb_next_states", ",", "nb_masks", "=", "nb_buffer", ".", "get_sample", "(", "nbatches", "=", "2", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "next_actions", "=", "m_policy_act_fn", "(", "nb_next_states", ",", "deterministic", "=", "False", ")", "\n", "\n", "", "sa", "=", "torch", ".", "cat", "(", "[", "nb_states", ",", "nb_actions", "]", ",", "dim", "=", "1", ")", "\n", "next_sa", "=", "torch", ".", "cat", "(", "[", "nb_next_states", ",", "next_actions", "]", ",", "dim", "=", "1", ")", "\n", "sa", "=", "obs_batch_normalize", "(", "sa", ",", "update_rms", "=", "True", ",", "rms_obj", "=", "self", ".", "input_rms", ")", "\n", "next_sa", "=", "obs_batch_normalize", "(", "next_sa", ",", "update_rms", "=", "True", ",", "rms_obj", "=", "self", ".", "input_rms", ")", "\n", "\n", "if", "sa", ".", "size", "(", "0", ")", ">", "init_sa", ".", "size", "(", "0", ")", ":", "\n", "            ", "assert", "sa", ".", "size", "(", "0", ")", "%", "init_sa", ".", "size", "(", "0", ")", "==", "0", "\n", "repeat_fac", "=", "int", "(", "sa", ".", "size", "(", "0", ")", "/", "init_sa", ".", "size", "(", "0", ")", ")", "\n", "init_sa", "=", "init_sa", ".", "repeat", "(", "repeat_fac", ",", "1", ")", "\n", "\n", "", "dset", "=", "CustomMapDataset", "(", "init_sa", ",", "sa", ",", "next_sa", ",", "nb_masks", ")", "\n", "dset_generator", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dset", ",", "batch_size", "=", "512", ",", "shuffle", "=", "True", ")", "\n", "\n", "loss_val", "=", "0.", "\n", "n", "=", "0.", "\n", "dratio_val", "=", "0.", "\n", "for", "data", "in", "dset_generator", ":", "\n", "            ", "init_sa_mb", ",", "sa_mb", ",", "next_sa_mb", ",", "masks_mb", "=", "data", "\n", "\n", "loss_1", "=", "-", "1.", "*", "(", "self", ".", "f", "(", "sa_mb", ")", "-", "self", ".", "gamma", "*", "self", ".", "f", "(", "next_sa_mb", ")", ")", "*", "self", ".", "_modifier", "(", "self", ".", "tau", "(", "sa_mb", ")", ")", "\n", "loss_1", "=", "(", "loss_1", "*", "masks_mb", ")", ".", "mean", "(", "0", ")", "\n", "\n", "loss_2", "=", "0.5", "*", "self", ".", "_modifier", "(", "self", ".", "tau", "(", "sa_mb", ")", ")", ".", "pow", "(", "2", ")", "\n", "loss_2", "=", "loss_2", ".", "mean", "(", "0", ")", "\n", "\n", "loss_3", "=", "(", "1.", "-", "self", ".", "gamma", ")", "*", "self", ".", "f", "(", "init_sa_mb", ")", ".", "mean", "(", "0", ")", "\n", "\n", "# dual-dice loss is computed as per the equations in [https://arxiv.org/abs/1906.04733]", "\n", "loss", "=", "loss_1", "+", "loss_2", "+", "loss_3", "\n", "\n", "loss_val", "+=", "loss", ".", "item", "(", ")", "\n", "n", "+=", "1", "\n", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "for", "p", "in", "self", ".", "f", ".", "parameters", "(", ")", ":", "\n", "                ", "p", ".", "grad", ".", "data", "=", "-", "p", ".", "grad", ".", "data", "\n", "\n", "", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "parameters", "(", ")", ",", "max_norm", "=", "1.", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "dratio_val", "+=", "self", ".", "_modifier", "(", "self", ".", "tau", "(", "sa_mb", ")", ")", ".", "mean", "(", "0", ")", ".", "item", "(", ")", "\n", "\n", "", "", "neg_divergence", "=", "self", ".", "eval_neg_divergence", "(", "m_buffer", ",", "nb_buffer", ",", "nb_inverse_dr", ")", "\n", "return", "loss_val", "/", "n", ",", "dratio_val", "/", "n", ",", "neg_divergence", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.dre.dd_density_ratio.DensityRatio.predict_batch_rewards": [[169, 187], ["rollouts.raw_obs[].view", "rollouts.actions.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "rewards.view.view.view", "rollouts.aux_rewards[].copy_", "dd_density_ratio.DensityRatio.eval_ratio", "torch.log", "torch.log", "torch.log", "torch.log", "nb_inverse_dr.eval_ratio", "ValueError", "torch.log", "torch.log", "torch.log", "torch.log"], "methods", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.dre.vd_density_ratio.DensityRatio.eval_ratio", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.dre.vd_density_ratio.DensityRatio.eval_ratio", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log"], ["", "def", "predict_batch_rewards", "(", "self", ",", "idx", ",", "rollouts", ",", "nb_inverse_dr", ",", "*", "_", ")", ":", "\n", "        ", "assert", "idx", "!=", "self", ".", "rank", "\n", "obs", "=", "rollouts", ".", "raw_obs", "[", ":", "-", "1", "]", ".", "view", "(", "-", "1", ",", "self", ".", "ob_dim", ")", "\n", "acs", "=", "rollouts", ".", "actions", ".", "view", "(", "-", "1", ",", "self", ".", "ac_dim", ")", "\n", "sa", "=", "torch", ".", "cat", "(", "[", "obs", ",", "acs", "]", ",", "dim", "=", "1", ")", "\n", "\n", "if", "self", ".", "divergence", "==", "'js'", ":", "\n", "            ", "ratio", "=", "self", ".", "eval_ratio", "(", "sa", ")", "\n", "rewards", "=", "-", "torch", ".", "log", "(", "1.", "/", "(", "1.", "+", "ratio", ")", "+", "EPS", ")", "\n", "\n", "", "elif", "self", ".", "divergence", "==", "'kls'", ":", "\n", "            ", "inv_ratio", "=", "nb_inverse_dr", ".", "eval_ratio", "(", "sa", ")", "\n", "rewards", "=", "-", "inv_ratio", "-", "torch", ".", "log", "(", "inv_ratio", "+", "EPS", ")", "\n", "\n", "", "else", ":", "raise", "ValueError", "(", "\"Unknown divergence\"", ")", "\n", "\n", "rewards", "=", "rewards", ".", "view", "(", "rollouts", ".", "num_steps", ",", "-", "1", ",", "1", ")", "\n", "rollouts", ".", "aux_rewards", "[", "idx", "]", ".", "copy_", "(", "rewards", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.dre.vd_density_ratio.DensityRatio.__init__": [[17, 70], ["torch.Module.__init__", "torch.init.calculate_gain", "torch.init.calculate_gain", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "vd_density_ratio.DensityRatio.dr_policy.parameters", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "qd_agents.utils.common_utils.RunningMeanStd", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "next", "print", "qd_agents.utils.common_utils.init", "init_", "actv", "init_", "actv", "init_", "actv", "init_", "init_", "torch.Tanh", "torch.Tanh", "init_", "torch.Tanh", "torch.Tanh", "qd_agents.utils.distributions.DiagGaussian", "sum", "sum", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.init.constant_", "torch.init.constant_", "p.numel", "p.numel", "vd_density_ratio.DensityRatio.parameters", "vd_density_ratio.DensityRatio.dr_policy.parameters", "vd_density_ratio.DensityRatio.rl_agent.get_actor_params"], "methods", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.buffers.storage.RolloutStorage.__init__", "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.common_utils.init", "home.repos.pwc.inspect_result.tgangwani_QDAgents.rl.rl_agent.RLAgent.get_actor_params"], ["def", "__init__", "(", "self", ",", "ob_dim", ",", "ac_dim", ",", "hidden_dim", ",", "init_states", ",", "rl_agent", ",", "nb_buffer", ",", "args", ")", ":", "\n", "\n", "# only print on creation of the first instance", "\n", "        ", "if", "not", "next", "(", "self", ".", "_ids", ")", ":", "\n", "            ", "print", "(", "\"++ ValueDICE Density Ratio Estimator ++\"", ")", "\n", "\n", "", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ob_dim", "=", "ob_dim", "\n", "self", ".", "ac_dim", "=", "ac_dim", "\n", "input_dim", "=", "ob_dim", "+", "ac_dim", "\n", "self", ".", "gamma", "=", "args", ".", "gamma", "\n", "self", ".", "rl_agent", "=", "rl_agent", "\n", "self", ".", "nb_buffer", "=", "nb_buffer", "\n", "self", ".", "init_states", "=", "init_states", "\n", "self", ".", "rank", "=", "args", ".", "rank", "\n", "self", ".", "divergence", "=", "args", ".", "divergence", "\n", "actv", "=", "nn", ".", "Tanh", "\n", "gain", "=", "nn", ".", "init", ".", "calculate_gain", "(", "'tanh'", ")", "\n", "\n", "init_", "=", "lambda", "m", ",", "bias", "=", "0", ":", "init", "(", "m", ",", "nn", ".", "init", ".", "xavier_normal_", ",", "lambda", "x", ":", "nn", ".", "init", ".", "\n", "constant_", "(", "x", ",", "bias", ")", ",", "gain", "=", "gain", ")", "\n", "\n", "self", ".", "q", "=", "nn", ".", "Sequential", "(", "\n", "init_", "(", "nn", ".", "Linear", "(", "input_dim", ",", "hidden_dim", ")", ")", ",", "actv", "(", ")", ",", "\n", "init_", "(", "nn", ".", "Linear", "(", "hidden_dim", ",", "hidden_dim", ")", ")", ",", "actv", "(", ")", ",", "\n", "init_", "(", "nn", ".", "Linear", "(", "hidden_dim", ",", "hidden_dim", ")", ")", ",", "actv", "(", ")", ",", "\n", "init_", "(", "nn", ".", "Linear", "(", "hidden_dim", ",", "1", ")", ")", ")", "\n", "\n", "# for value-dice, we don't get the density ratio directly from a neural network, but", "\n", "# instead need to perform some calculation. Using notation of our paper, zeta_{ij}", "\n", "# computation requires the policy pi_i, similarly, zeta_{ji} requires pi_j.", "\n", "# self.dr_policy is this policy needed for that computation. This is used in the", "\n", "# inverse_dratios instantiations.", "\n", "self", ".", "dr_policy", "=", "nn", ".", "Sequential", "(", "\n", "init_", "(", "nn", ".", "Linear", "(", "ob_dim", ",", "64", ")", ")", ",", "nn", ".", "Tanh", "(", ")", ",", "\n", "init_", "(", "nn", ".", "Linear", "(", "64", ",", "64", ")", ")", ",", "nn", ".", "Tanh", "(", ")", ",", "\n", "DiagGaussian", "(", "64", ",", "ac_dim", ")", ")", "\n", "for", "p", "in", "self", ".", "dr_policy", ".", "parameters", "(", ")", ":", "\n", "            ", "p", ".", "requires_grad", "=", "False", "\n", "\n", "# TODO: Ideally, we should be creating a policy object of the same architecture as", "\n", "# used by the rl_class automatically, w/o hardcoded layers and sizes. So, the code above", "\n", "# needs to be cleaned up in the future. Currently we have this placeholder sanity check", "\n", "", "assert", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "self", ".", "dr_policy", ".", "parameters", "(", ")", ")", "==", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "self", ".", "rl_agent", ".", "get_actor_params", "(", ")", ")", "\n", "\n", "# these three parameters are only used for sharing the normalization data across MPI ranks", "\n", "self", ".", "_nrml_mean", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "input_dim", ")", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "_nrml_var", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "input_dim", ")", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "_nrml_count", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ",", "requires_grad", "=", "False", ")", "\n", "\n", "self", ".", "input_rms", "=", "RunningMeanStd", "(", "shape", "=", "input_dim", ")", "\n", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "(", "p", "for", "p", "in", "self", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", ")", ",", "lr", "=", "5e-4", ",", "weight_decay", "=", "1e-3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.dre.vd_density_ratio.DensityRatio.compute_grad_pen": [[71, 91], ["torch.rand", "torch.rand", "torch.rand", "torch.rand", "alpha.expand_as.expand_as.expand_as", "vd_density_ratio.DensityRatio.q", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "sa.size", "vd_density_ratio.DensityRatio.size", "torch.autograd.grad", "torch.autograd.grad", "grad.norm"], "methods", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.batch_fifo_dice.BatchFIFO.size", "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.batch_fifo_dice.BatchFIFO.size"], ["", "def", "compute_grad_pen", "(", "self", ",", "sa", ",", "next_sa", ",", "lambda_", ")", ":", "\n", "        ", "alpha", "=", "torch", ".", "rand", "(", "sa", ".", "size", "(", "0", ")", ",", "1", ")", "\n", "alpha", "=", "alpha", ".", "expand_as", "(", "sa", ")", "\n", "\n", "mixup_data", "=", "alpha", "*", "sa", "+", "(", "1", "-", "alpha", ")", "*", "next_sa", "\n", "mixup_data", ".", "requires_grad", "=", "True", "\n", "\n", "out", "=", "self", ".", "q", "(", "mixup_data", ")", "\n", "ones", "=", "torch", ".", "ones", "(", "out", ".", "size", "(", ")", ")", "\n", "\n", "grad", "=", "autograd", ".", "grad", "(", "\n", "outputs", "=", "out", ",", "\n", "inputs", "=", "mixup_data", ",", "\n", "grad_outputs", "=", "ones", ",", "\n", "create_graph", "=", "True", ",", "\n", "retain_graph", "=", "True", ",", "\n", "only_inputs", "=", "True", ")", "[", "0", "]", "\n", "\n", "grad_pen", "=", "lambda_", "*", "(", "grad", ".", "norm", "(", "2", ",", "dim", "=", "1", ")", "-", "1", ")", ".", "pow", "(", "2", ")", ".", "mean", "(", ")", "\n", "return", "grad_pen", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.dre.vd_density_ratio.DensityRatio.mute_param_update": [[92, 95], ["vd_density_ratio.DensityRatio.parameters"], "methods", ["None"], ["", "def", "mute_param_update", "(", "self", ")", ":", "\n", "        ", "for", "p", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "p", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.dre.vd_density_ratio.DensityRatio.set_from_flat": [[96, 101], ["torch.nn.utils.vector_to_parameters", "torch.nn.utils.vector_to_parameters", "vd_density_ratio.DensityRatio._nrml_mean.data.numpy", "vd_density_ratio.DensityRatio._nrml_var.data.numpy", "vd_density_ratio.DensityRatio._nrml_count.data.numpy", "vd_density_ratio.DensityRatio.parameters"], "methods", ["None"], ["", "", "def", "set_from_flat", "(", "self", ",", "vector", ")", ":", "\n", "        ", "vector_to_parameters", "(", "vector", ",", "self", ".", "parameters", "(", ")", ")", "\n", "self", ".", "input_rms", ".", "mean", "=", "self", ".", "_nrml_mean", ".", "data", ".", "numpy", "(", ")", "\n", "self", ".", "input_rms", ".", "var", "=", "self", ".", "_nrml_var", ".", "data", ".", "numpy", "(", ")", "\n", "self", ".", "input_rms", ".", "count", "=", "self", ".", "_nrml_count", ".", "data", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.dre.vd_density_ratio.DensityRatio.get_flat": [[102, 111], ["torch.nn.utils.parameters_to_vector().detach", "torch.nn.utils.parameters_to_vector().detach", "torch.nn.utils.vector_to_parameters", "torch.nn.utils.vector_to_parameters", "vd_density_ratio.DensityRatio._nrml_mean.data.copy_", "vd_density_ratio.DensityRatio._nrml_var.data.copy_", "vd_density_ratio.DensityRatio._nrml_count.data.copy_", "torch.nn.utils.parameters_to_vector().detach", "torch.nn.utils.parameters_to_vector().detach", "vd_density_ratio.DensityRatio.dr_policy.parameters", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.nn.utils.parameters_to_vector", "torch.nn.utils.parameters_to_vector", "torch.nn.utils.parameters_to_vector", "torch.nn.utils.parameters_to_vector", "vd_density_ratio.DensityRatio.rl_agent.get_actor_params", "vd_density_ratio.DensityRatio.parameters"], "methods", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.rl.rl_agent.RLAgent.get_actor_params"], ["", "def", "get_flat", "(", "self", ")", ":", "\n", "# update actor data", "\n", "        ", "actor_params", "=", "parameters_to_vector", "(", "self", ".", "rl_agent", ".", "get_actor_params", "(", ")", ")", ".", "detach", "(", ")", "\n", "vector_to_parameters", "(", "actor_params", ",", "self", ".", "dr_policy", ".", "parameters", "(", ")", ")", "\n", "# update normalization data", "\n", "self", ".", "_nrml_mean", ".", "data", ".", "copy_", "(", "torch", ".", "tensor", "(", "self", ".", "input_rms", ".", "mean", ")", ")", "\n", "self", ".", "_nrml_var", ".", "data", ".", "copy_", "(", "torch", ".", "tensor", "(", "self", ".", "input_rms", ".", "var", ")", ")", "\n", "self", ".", "_nrml_count", ".", "data", ".", "copy_", "(", "torch", ".", "tensor", "(", "self", ".", "input_rms", ".", "count", ")", ")", "\n", "return", "parameters_to_vector", "(", "self", ".", "parameters", "(", ")", ")", ".", "detach", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.dre.vd_density_ratio.DensityRatio.eval_neg_divergence": [[112, 143], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "ValueError", "vd_density_ratio.DensityRatio._log_ratio().exp", "m_buffer.get_sample", "nb_inverse_dr.eval_ratio", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp.item", "torch.clamp.item", "m_buffer.get_sample", "m_policy_act_fn", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "qd_agents.utils.common_utils.obs_batch_normalize", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "qd_agents.utils.common_utils.obs_batch_normalize", "vd_density_ratio.DensityRatio._log_ratio().exp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp.item", "torch.clamp.item", "vd_density_ratio.DensityRatio._log_ratio().exp", "output.mean", "vd_density_ratio.DensityRatio._log_ratio", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "vd_density_ratio.DensityRatio._log_ratio", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "output.mean", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "vd_density_ratio.DensityRatio._log_ratio"], "methods", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.batch_fifo_dice.BatchFIFO.get_sample", "home.repos.pwc.inspect_result.tgangwani_QDAgents.dre.vd_density_ratio.DensityRatio.eval_ratio", "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.batch_fifo_dice.BatchFIFO.get_sample", "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.common_utils.obs_batch_normalize", "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.common_utils.obs_batch_normalize", "home.repos.pwc.inspect_result.tgangwani_QDAgents.dre.vd_density_ratio.DensityRatio._log_ratio", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.dre.vd_density_ratio.DensityRatio._log_ratio", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.dre.vd_density_ratio.DensityRatio._log_ratio"], ["", "def", "eval_neg_divergence", "(", "self", ",", "sa", ",", "next_sa", ",", "masks", ",", "m_buffer", ",", "nb_inverse_dr", ",", "m_policy_act_fn", ")", ":", "\n", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "if", "self", ".", "divergence", "==", "'js'", ":", "\n", "                ", "ratio1", "=", "self", ".", "_log_ratio", "(", "sa", ",", "next_sa", ")", ".", "exp", "(", ")", "\n", "m_states", ",", "m_actions", ",", "m_next_states", ",", "m_masks", "=", "m_buffer", ".", "get_sample", "(", "nbatches", "=", "2", ")", "\n", "ratio2", "=", "nb_inverse_dr", ".", "eval_ratio", "(", "m_states", ",", "m_actions", ",", "m_next_states", ")", "\n", "\n", "output", "=", "torch", ".", "log", "(", "1.", "/", "(", "1", "+", "ratio1", ")", "+", "EPS", ")", "*", "masks", "+", "torch", ".", "log", "(", "1.", "/", "(", "1.", "+", "ratio2", ")", "+", "EPS", ")", "*", "m_masks", "\n", "neg_js", "=", "0.5", "*", "(", "-", "output", ".", "mean", "(", "0", ")", "-", "torch", ".", "log", "(", "torch", ".", "tensor", "(", "4.", ")", ")", ")", "\n", "neg_js", "=", "torch", ".", "clamp", "(", "neg_js", ",", "max", "=", "0", ")", "# clip the residual positive part (if any)", "\n", "return", "neg_js", ".", "item", "(", ")", "\n", "\n", "", "if", "self", ".", "divergence", "==", "'kls'", ":", "\n", "                ", "m_states", ",", "m_actions", ",", "m_next_states", ",", "m_masks", "=", "m_buffer", ".", "get_sample", "(", "nbatches", "=", "2", ")", "\n", "m_next_actions", "=", "m_policy_act_fn", "(", "m_next_states", ",", "deterministic", "=", "False", ")", "\n", "m_sa", "=", "torch", ".", "cat", "(", "[", "m_states", ",", "m_actions", "]", ",", "dim", "=", "1", ")", "\n", "m_sa", "=", "obs_batch_normalize", "(", "m_sa", ",", "update_rms", "=", "False", ",", "rms_obj", "=", "self", ".", "input_rms", ")", "\n", "\n", "m_next_sa", "=", "torch", ".", "cat", "(", "[", "m_next_states", ",", "m_next_actions", "]", ",", "dim", "=", "1", ")", "\n", "m_next_sa", "=", "obs_batch_normalize", "(", "m_next_sa", ",", "update_rms", "=", "False", ",", "rms_obj", "=", "self", ".", "input_rms", ")", "\n", "\n", "ratio1", "=", "self", ".", "_log_ratio", "(", "m_sa", ",", "m_next_sa", ")", ".", "exp", "(", ")", "\n", "ratio2", "=", "1.", "/", "self", ".", "_log_ratio", "(", "sa", ",", "next_sa", ")", ".", "exp", "(", ")", "\n", "\n", "output", "=", "torch", ".", "log", "(", "ratio1", "+", "EPS", ")", "*", "m_masks", "+", "torch", ".", "log", "(", "ratio2", "+", "EPS", ")", "*", "masks", "\n", "neg_kls", "=", "-", "output", ".", "mean", "(", "0", ")", "\n", "neg_kls", "=", "torch", ".", "clamp", "(", "neg_kls", ",", "max", "=", "0", ")", "# clip the residual positive part (if any)", "\n", "return", "neg_kls", ".", "item", "(", ")", "\n", "\n", "", "raise", "ValueError", "(", "\"Unknown divergence\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.dre.vd_density_ratio.DensityRatio._log_ratio": [[144, 146], ["vd_density_ratio.DensityRatio.q", "vd_density_ratio.DensityRatio.q"], "methods", ["None"], ["", "", "def", "_log_ratio", "(", "self", ",", "sa", ",", "next_sa", ")", ":", "\n", "        ", "return", "(", "self", ".", "q", "(", "sa", ")", "-", "self", ".", "gamma", "*", "self", ".", "q", "(", "next_sa", ")", ")", ".", "clamp", "(", "min", "=", "LOG_DR_MIN", ",", "max", "=", "LOG_DR_MAX", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.dre.vd_density_ratio.DensityRatio.eval_ratio": [[147, 162], ["vd_density_ratio.DensityRatio.eval", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "qd_agents.utils.common_utils.obs_batch_normalize", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "vd_density_ratio.DensityRatio.dr_policy", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "qd_agents.utils.common_utils.obs_batch_normalize", "qd_agents.utils.common_utils.obs_batch_normalize", "vd_density_ratio.DensityRatio._log_ratio().exp", "vd_density_ratio.DensityRatio.sample", "vd_density_ratio.DensityRatio.mode", "vd_density_ratio.DensityRatio._log_ratio"], "methods", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.common_utils.obs_batch_normalize", "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.common_utils.obs_batch_normalize", "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.common_utils.obs_batch_normalize", "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.distributions.TanhNormal.sample", "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.distributions.TanhNormal.mode", "home.repos.pwc.inspect_result.tgangwani_QDAgents.dre.vd_density_ratio.DensityRatio._log_ratio"], ["", "def", "eval_ratio", "(", "self", ",", "states", ",", "actions", ",", "next_states", ",", "deterministic", "=", "False", ")", ":", "\n", "        ", "self", ".", "eval", "(", ")", "\n", "sa", "=", "torch", ".", "cat", "(", "[", "states", ",", "actions", "]", ",", "dim", "=", "1", ")", "\n", "# (approximation) normalize states using the rms-object from the corresponding nb-batch-buffer", "\n", "normalized_next_states", "=", "obs_batch_normalize", "(", "next_states", ",", "update_rms", "=", "False", ",", "rms_obj", "=", "self", ".", "nb_buffer", ".", "obs_rms", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "next_actions_distr", "=", "self", ".", "dr_policy", "(", "normalized_next_states", ")", "\n", "next_actions", "=", "next_actions_distr", ".", "sample", "(", ")", "[", "1", "]", "if", "not", "deterministic", "else", "next_actions_distr", ".", "mode", "(", ")", "[", "1", "]", "\n", "next_sa", "=", "torch", ".", "cat", "(", "[", "next_states", ",", "next_actions", "]", ",", "dim", "=", "1", ")", "\n", "sa", "=", "obs_batch_normalize", "(", "sa", ",", "update_rms", "=", "False", ",", "rms_obj", "=", "self", ".", "input_rms", ")", "\n", "next_sa", "=", "obs_batch_normalize", "(", "next_sa", ",", "update_rms", "=", "False", ",", "rms_obj", "=", "self", ".", "input_rms", ")", "\n", "ratio", "=", "self", ".", "_log_ratio", "(", "sa", ",", "next_sa", ")", ".", "exp", "(", ")", "\n", "\n", "", "return", "ratio", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.dre.vd_density_ratio.DensityRatio.update": [[163, 214], ["vd_density_ratio.DensityRatio.train", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "qd_agents.utils.common_utils.obs_batch_normalize", "nb_buffer.get_sample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "qd_agents.utils.common_utils.obs_batch_normalize", "qd_agents.utils.common_utils.obs_batch_normalize", "qd_agents.utils.common_utils.CustomMapDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "vd_density_ratio.DensityRatio.eval_neg_divergence", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "m_policy_act_fn", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "m_policy_act_fn", "qd_agents.utils.common_utils.obs_batch_normalize.size", "init_sa.repeat.repeat.size", "int", "init_sa.repeat.repeat.repeat", "vd_density_ratio.DensityRatio._log_ratio().exp", "torch.log", "torch.log", "torch.log", "torch.log", "vd_density_ratio.DensityRatio.compute_grad_pen", "loss.item", "vd_density_ratio.DensityRatio.optimizer.zero_grad", "loss.backward", "torch.utils.clip_grad_norm_", "torch.utils.clip_grad_norm_", "vd_density_ratio.DensityRatio.optimizer.step", "vd_density_ratio.DensityRatio.q().mean", "vd_density_ratio.DensityRatio.parameters", "qd_agents.utils.common_utils.obs_batch_normalize.size", "init_sa.repeat.repeat.size", "qd_agents.utils.common_utils.obs_batch_normalize.size", "init_sa.repeat.repeat.size", "vd_density_ratio.DensityRatio._log_ratio", "vd_density_ratio.DensityRatio.q"], "methods", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.common_utils.obs_batch_normalize", "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.batch_fifo_dice.BatchFIFO.get_sample", "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.common_utils.obs_batch_normalize", "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.common_utils.obs_batch_normalize", "home.repos.pwc.inspect_result.tgangwani_QDAgents.dre.vd_density_ratio.DensityRatio.eval_neg_divergence", "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.batch_fifo_dice.BatchFIFO.size", "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.batch_fifo_dice.BatchFIFO.size", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.dre.vd_density_ratio.DensityRatio.compute_grad_pen", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.monitor.Monitor.step", "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.batch_fifo_dice.BatchFIFO.size", "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.batch_fifo_dice.BatchFIFO.size", "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.batch_fifo_dice.BatchFIFO.size", "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.batch_fifo_dice.BatchFIFO.size", "home.repos.pwc.inspect_result.tgangwani_QDAgents.dre.vd_density_ratio.DensityRatio._log_ratio"], ["", "def", "update", "(", "self", ",", "m_buffer", ",", "nb_buffer", ",", "m_policy_act_fn", ",", "nb_inverse_dr", ")", ":", "\n", "        ", "self", ".", "train", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "init_actions", "=", "m_policy_act_fn", "(", "self", ".", "init_states", ",", "deterministic", "=", "False", ")", "\n", "", "init_sa", "=", "torch", ".", "cat", "(", "[", "self", ".", "init_states", ",", "init_actions", "]", ",", "dim", "=", "1", ")", "\n", "init_sa", "=", "obs_batch_normalize", "(", "init_sa", ",", "update_rms", "=", "True", ",", "rms_obj", "=", "self", ".", "input_rms", ")", "\n", "\n", "nb_states", ",", "nb_actions", ",", "nb_next_states", ",", "nb_masks", "=", "nb_buffer", ".", "get_sample", "(", "nbatches", "=", "2", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "next_actions", "=", "m_policy_act_fn", "(", "nb_next_states", ",", "deterministic", "=", "False", ")", "\n", "\n", "", "sa", "=", "torch", ".", "cat", "(", "[", "nb_states", ",", "nb_actions", "]", ",", "dim", "=", "1", ")", "\n", "next_sa", "=", "torch", ".", "cat", "(", "[", "nb_next_states", ",", "next_actions", "]", ",", "dim", "=", "1", ")", "\n", "sa", "=", "obs_batch_normalize", "(", "sa", ",", "update_rms", "=", "True", ",", "rms_obj", "=", "self", ".", "input_rms", ")", "\n", "next_sa", "=", "obs_batch_normalize", "(", "next_sa", ",", "update_rms", "=", "True", ",", "rms_obj", "=", "self", ".", "input_rms", ")", "\n", "\n", "if", "sa", ".", "size", "(", "0", ")", ">", "init_sa", ".", "size", "(", "0", ")", ":", "\n", "            ", "assert", "sa", ".", "size", "(", "0", ")", "%", "init_sa", ".", "size", "(", "0", ")", "==", "0", "\n", "repeat_fac", "=", "int", "(", "sa", ".", "size", "(", "0", ")", "/", "init_sa", ".", "size", "(", "0", ")", ")", "\n", "init_sa", "=", "init_sa", ".", "repeat", "(", "repeat_fac", ",", "1", ")", "\n", "\n", "", "dset", "=", "CustomMapDataset", "(", "init_sa", ",", "sa", ",", "next_sa", ",", "nb_masks", ")", "\n", "dset_generator", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dset", ",", "batch_size", "=", "512", ",", "shuffle", "=", "True", ")", "\n", "\n", "loss_val", "=", "0.", "\n", "n", "=", "0.", "\n", "for", "data", "in", "dset_generator", ":", "\n", "            ", "init_sa_mb", ",", "sa_mb", ",", "next_sa_mb", ",", "masks_mb", "=", "data", "\n", "\n", "td_err_exp", "=", "self", ".", "_log_ratio", "(", "sa_mb", ",", "next_sa_mb", ")", ".", "exp", "(", ")", "\n", "td_err_exp", "=", "(", "td_err_exp", "*", "masks_mb", ")", ".", "mean", "(", "0", ")", "\n", "loss_1", "=", "torch", ".", "log", "(", "td_err_exp", "+", "EPS", ")", "\n", "\n", "loss_2", "=", "-", "1.", "*", "(", "1", "-", "self", ".", "gamma", ")", "*", "self", ".", "q", "(", "init_sa_mb", ")", ".", "mean", "(", "0", ")", "\n", "\n", "grad_penalty", "=", "self", ".", "compute_grad_pen", "(", "sa_mb", ",", "next_sa_mb", ",", "lambda_", "=", "1.", ")", "\n", "\n", "# value-dice loss is computed as per the equations in [https://arxiv.org/abs/1912.05032]", "\n", "loss", "=", "loss_1", "+", "loss_2", "+", "grad_penalty", "\n", "\n", "loss_val", "+=", "loss", ".", "item", "(", ")", "\n", "n", "+=", "1", "\n", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "parameters", "(", ")", ",", "max_norm", "=", "1.", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "neg_divergence", "=", "self", ".", "eval_neg_divergence", "(", "sa", ",", "next_sa", ",", "nb_masks", ",", "m_buffer", ",", "nb_inverse_dr", ",", "m_policy_act_fn", ")", "\n", "return", "loss_val", "/", "n", ",", "-", "42.", ",", "neg_divergence", "# -42 proxy for None", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.dre.vd_density_ratio.DensityRatio.predict_batch_rewards": [[215, 243], ["vd_density_ratio.DensityRatio.eval", "rollouts.raw_obs[].view", "rollouts.actions.view", "rollouts.raw_obs[].view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "m_policy_act_fn", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "qd_agents.utils.common_utils.obs_batch_normalize", "qd_agents.utils.common_utils.obs_batch_normalize", "rollouts.masks[].view", "rewards.view.view.view", "rollouts.aux_rewards[].copy_", "vd_density_ratio.DensityRatio._log_ratio().exp", "torch.log", "torch.log", "torch.log", "torch.log", "nb_inverse_dr.eval_ratio", "ValueError", "vd_density_ratio.DensityRatio._log_ratio", "torch.log", "torch.log", "torch.log", "torch.log"], "methods", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.common_utils.obs_batch_normalize", "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.common_utils.obs_batch_normalize", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.dre.vd_density_ratio.DensityRatio.eval_ratio", "home.repos.pwc.inspect_result.tgangwani_QDAgents.dre.vd_density_ratio.DensityRatio._log_ratio", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.logger.log"], ["", "def", "predict_batch_rewards", "(", "self", ",", "idx", ",", "rollouts", ",", "nb_inverse_dr", ",", "m_policy_act_fn", ")", ":", "\n", "        ", "self", ".", "eval", "(", ")", "\n", "assert", "idx", "!=", "self", ".", "rank", "\n", "obs", "=", "rollouts", ".", "raw_obs", "[", ":", "-", "1", "]", ".", "view", "(", "-", "1", ",", "self", ".", "ob_dim", ")", "\n", "acs", "=", "rollouts", ".", "actions", ".", "view", "(", "-", "1", ",", "self", ".", "ac_dim", ")", "\n", "next_obs", "=", "rollouts", ".", "raw_obs", "[", "1", ":", "]", ".", "view", "(", "-", "1", ",", "self", ".", "ob_dim", ")", "\n", "sa", "=", "torch", ".", "cat", "(", "[", "obs", ",", "acs", "]", ",", "dim", "=", "1", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "next_acs", "=", "m_policy_act_fn", "(", "next_obs", ",", "deterministic", "=", "True", ")", "\n", "next_sa", "=", "torch", ".", "cat", "(", "[", "next_obs", ",", "next_acs", "]", ",", "dim", "=", "1", ")", "\n", "sa", "=", "obs_batch_normalize", "(", "sa", ",", "update_rms", "=", "False", ",", "rms_obj", "=", "self", ".", "input_rms", ")", "\n", "next_sa", "=", "obs_batch_normalize", "(", "next_sa", ",", "update_rms", "=", "False", ",", "rms_obj", "=", "self", ".", "input_rms", ")", "\n", "\n", "if", "self", ".", "divergence", "==", "'js'", ":", "\n", "                ", "ratio", "=", "self", ".", "_log_ratio", "(", "sa", ",", "next_sa", ")", ".", "exp", "(", ")", "\n", "rewards", "=", "-", "torch", ".", "log", "(", "1.", "/", "(", "1.", "+", "ratio", ")", "+", "EPS", ")", "\n", "\n", "", "elif", "self", ".", "divergence", "==", "'kls'", ":", "\n", "                ", "ratio", "=", "nb_inverse_dr", ".", "eval_ratio", "(", "obs", ",", "acs", ",", "next_obs", ",", "deterministic", "=", "True", ")", "\n", "rewards", "=", "-", "ratio", "-", "torch", ".", "log", "(", "ratio", "+", "EPS", ")", "\n", "\n", "", "else", ":", "raise", "ValueError", "(", "\"Unknown divergence\"", ")", "\n", "\n", "masks", "=", "rollouts", ".", "masks", "[", "1", ":", "]", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "rewards", "=", "rewards", "*", "masks", "\n", "rewards", "=", "rewards", ".", "view", "(", "rollouts", ".", "num_steps", ",", "-", "1", ",", "1", ")", "\n", "rollouts", ".", "aux_rewards", "[", "idx", "]", ".", "copy_", "(", "rewards", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.rl.rl_agent.RLAgent.__init__": [[9, 52], ["qd_agents.utils.envs.make_vec_envs", "qd_agents.networks.actor_critic.ActorCritic", "qd_agents.rl.ppo.PPO", "qd_agents.buffers.storage.RolloutStorage", "qd_agents.utils.common_utils.OrderedDefaultDict", "rl_agent.RLAgent.envs.reset", "rl_agent.RLAgent.rollouts.raw_obs[].copy_", "rl_agent.RLAgent.rollouts.normalized_obs[].copy_", "len", "len"], "methods", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.envs.make_vec_envs", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.monitor.Monitor.reset"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "\n", "        ", "self", ".", "envs", "=", "make_vec_envs", "(", "args", ".", "env_name", ",", "args", ".", "seed", ",", "args", ".", "num_processes", ",", "\n", "args", ".", "log_dir", ",", "allow_early_resets", "=", "True", ")", "\n", "assert", "len", "(", "self", ".", "envs", ".", "observation_space", ".", "shape", ")", "==", "1", "and", "len", "(", "self", ".", "envs", ".", "action_space", ".", "shape", ")", "==", "1", ",", "\"Expected flat observation and action spaces. Consider adding a wrapper.\"", "\n", "assert", "self", ".", "envs", ".", "action_space", ".", "__class__", ".", "__name__", "==", "\"Box\"", ",", "\"Continous action-space expected.\"", "\n", "\n", "self", ".", "obs_dim", "=", "self", ".", "envs", ".", "observation_space", ".", "shape", "[", "0", "]", "\n", "self", ".", "acs_dim", "=", "self", ".", "envs", ".", "action_space", ".", "shape", "[", "0", "]", "\n", "\n", "self", ".", "actor_critic_ntwk", "=", "ActorCritic", "(", "\n", "self", ".", "envs", ".", "observation_space", ".", "shape", ",", "\n", "self", ".", "envs", ".", "action_space", ",", "\n", "base_kwargs", "=", "{", "'comm_size'", ":", "args", ".", "comm_size", "}", ")", "\n", "\n", "self", ".", "rl_algo", "=", "PPO", "(", "\n", "args", ".", "rank", ",", "\n", "args", ".", "comm", ",", "\n", "args", ".", "comm_size", ",", "\n", "self", ".", "actor_critic_ntwk", ",", "\n", "args", ".", "ppo_clip_param", ",", "\n", "args", ".", "ppo_epochs", ",", "\n", "args", ".", "num_mini_batch", ",", "\n", "args", ".", "value_loss_coef", ",", "\n", "args", ".", "si_wt", ",", "\n", "args", ".", "svpg_expl_wt", ",", "\n", "lr", "=", "args", ".", "policy_lr", ",", "\n", "max_grad_norm", "=", "args", ".", "max_grad_norm", ")", "\n", "\n", "self", ".", "num_steps", "=", "args", ".", "num_steps", "\n", "self", ".", "rollouts", "=", "RolloutStorage", "(", "self", ".", "num_steps", ",", "args", ".", "num_processes", ",", "\n", "self", ".", "envs", ".", "observation_space", ".", "shape", ",", "self", ".", "envs", ".", "action_space", ",", "\n", "self", ".", "actor_critic_ntwk", ".", "recurrent_hidden_state_size", ",", "\n", "args", ".", "gamma", ",", "args", ".", "gae_lambda", ",", "args", ".", "comm_size", ")", "\n", "\n", "self", ".", "latest_trajs", "=", "OrderedDefaultDict", "(", ")", "\n", "self", ".", "num_finished_trajs", "=", "0", "\n", "\n", "obs", "=", "self", ".", "envs", ".", "reset", "(", ")", "\n", "self", ".", "rollouts", ".", "raw_obs", "[", "0", "]", ".", "copy_", "(", "obs", ")", "\n", "self", ".", "rollouts", ".", "normalized_obs", "[", "0", "]", ".", "copy_", "(", "obs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.rl.rl_agent.RLAgent.sample_init_states": [[53, 58], ["torch.zeros", "range", "rl_agent.RLAgent.envs.reset"], "methods", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.monitor.Monitor.reset"], ["", "def", "sample_init_states", "(", "self", ",", "num", ")", ":", "\n", "        ", "states", "=", "torch", ".", "zeros", "(", "(", "num", ",", "self", ".", "obs_dim", ")", ")", "\n", "for", "i", "in", "range", "(", "num", ")", ":", "\n", "            ", "states", "[", "i", "]", "=", "self", ".", "envs", ".", "reset", "(", ")", "\n", "", "return", "states", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.rl.rl_agent.RLAgent.collect_rollout_batch": [[59, 85], ["range", "rl_agent.RLAgent.envs.step", "[].append", "[].append", "[].append", "[].append", "torch.FloatTensor", "torch.FloatTensor", "rl_agent.RLAgent.rollouts.insert", "torch.no_grad", "rl_agent.RLAgent.actor_critic_ntwk.act", "dones.sum", "info.keys", "episode_returns.append", "info.keys"], "methods", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.monitor.Monitor.step", "home.repos.pwc.inspect_result.tgangwani_QDAgents.buffers.storage.RolloutStorage.insert", "home.repos.pwc.inspect_result.tgangwani_QDAgents.networks.actor_critic.ActorCritic.act"], ["", "def", "collect_rollout_batch", "(", "self", ",", "episode_returns", ")", ":", "\n", "        ", "for", "step", "in", "range", "(", "self", ".", "num_steps", ")", ":", "\n", "# Sample actions", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "value", ",", "aux_value", ",", "action", ",", "arctanh_action", ",", "action_log_prob", ",", "recurrent_hidden_states", ",", "_", "=", "self", ".", "actor_critic_ntwk", ".", "act", "(", "\n", "self", ".", "rollouts", ".", "normalized_obs", "[", "step", "]", ",", "self", ".", "rollouts", ".", "recurrent_hidden_states", "[", "step", "]", ",", "\n", "self", ".", "rollouts", ".", "masks", "[", "step", "]", ")", "\n", "\n", "", "obs", ",", "reward", ",", "dones", ",", "infos", "=", "self", ".", "envs", ".", "step", "(", "action", ")", "\n", "\n", "self", ".", "latest_trajs", "[", "self", ".", "num_finished_trajs", "]", "[", "'states'", "]", ".", "append", "(", "self", ".", "rollouts", ".", "raw_obs", "[", "step", "]", ")", "\n", "self", ".", "latest_trajs", "[", "self", ".", "num_finished_trajs", "]", "[", "'actions'", "]", ".", "append", "(", "action", ")", "\n", "self", ".", "latest_trajs", "[", "self", ".", "num_finished_trajs", "]", "[", "'arctanh_actions'", "]", ".", "append", "(", "arctanh_action", ")", "\n", "self", ".", "latest_trajs", "[", "self", ".", "num_finished_trajs", "]", "[", "'rewards'", "]", ".", "append", "(", "reward", ")", "\n", "\n", "if", "dones", ".", "sum", "(", ")", ">", "0", ":", "\n", "                ", "for", "info", "in", "infos", ":", "\n", "                    ", "if", "'episode'", "in", "info", ".", "keys", "(", ")", ":", "\n", "                        ", "episode_returns", ".", "append", "(", "info", "[", "'episode'", "]", "[", "'r'", "]", ")", "\n", "self", ".", "num_finished_trajs", "+=", "1", "\n", "\n", "", "", "", "masks", "=", "torch", ".", "FloatTensor", "(", "[", "[", "0.0", "]", "if", "done", "else", "[", "1.0", "]", "for", "done", "in", "dones", "]", ")", "\n", "bad_masks", "=", "torch", ".", "FloatTensor", "(", "[", "[", "0.0", "]", "if", "'bad_transition'", "in", "info", ".", "keys", "(", ")", "else", "[", "1.0", "]", "for", "info", "in", "infos", "]", ")", "\n", "\n", "self", ".", "rollouts", ".", "insert", "(", "obs", ",", "recurrent_hidden_states", ",", "action", ",", "arctanh_action", ",", "\n", "action_log_prob", ",", "value", ",", "aux_value", ",", "reward", ",", "masks", ",", "bad_masks", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.rl.rl_agent.RLAgent.update": [[86, 97], ["rl_agent.RLAgent.rollouts.compute_adv_tdlam", "rl_agent.RLAgent.rl_algo.update", "rl_agent.RLAgent.rollouts.after_update", "torch.no_grad", "rl_agent.RLAgent.actor_critic_ntwk.get_value"], "methods", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.buffers.storage.RolloutStorage.compute_adv_tdlam", "home.repos.pwc.inspect_result.tgangwani_QDAgents.rl.ppo.PPO.update", "home.repos.pwc.inspect_result.tgangwani_QDAgents.buffers.storage.RolloutStorage.after_update", "home.repos.pwc.inspect_result.tgangwani_QDAgents.networks.actor_critic.ActorCritic.get_value"], ["", "", "def", "update", "(", "self", ",", "kernel_vals", ",", "anneal_coef", ")", ":", "\n", "#  Compute GAE and TD-lambda estimates, and then update actor-critic parameters", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "next_value", ",", "next_aux_value", "=", "self", ".", "actor_critic_ntwk", ".", "get_value", "(", "\n", "self", ".", "rollouts", ".", "normalized_obs", "[", "-", "1", "]", ",", "self", ".", "rollouts", ".", "recurrent_hidden_states", "[", "-", "1", "]", ",", "\n", "self", ".", "rollouts", ".", "masks", "[", "-", "1", "]", ")", "\n", "", "self", ".", "rollouts", ".", "compute_adv_tdlam", "(", "next_value", ",", "next_aux_value", ")", "\n", "\n", "value_loss", ",", "action_loss", "=", "self", ".", "rl_algo", ".", "update", "(", "self", ".", "rollouts", ",", "kernel_vals", ",", "anneal_coef", ")", "\n", "self", ".", "rollouts", ".", "after_update", "(", ")", "\n", "return", "value_loss", ",", "action_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.rl.rl_agent.RLAgent.get_action": [[98, 102], ["torch.no_grad", "qd_agents.utils.common_utils.obs_batch_normalize", "[].detach", "rl_agent.RLAgent.actor_critic_ntwk.act"], "methods", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.common_utils.obs_batch_normalize", "home.repos.pwc.inspect_result.tgangwani_QDAgents.networks.actor_critic.ActorCritic.act"], ["", "def", "get_action", "(", "self", ",", "states", ",", "deterministic", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "normalized_states", "=", "obs_batch_normalize", "(", "states", ",", "update_rms", "=", "False", ",", "rms_obj", "=", "self", ".", "rollouts", ".", "ob_rms", ")", "\n", "return", "self", ".", "actor_critic_ntwk", ".", "act", "(", "normalized_states", ",", "rnn_hxs", "=", "None", ",", "masks", "=", "None", ",", "deterministic", "=", "deterministic", ")", "[", "2", "]", ".", "detach", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.rl.rl_agent.RLAgent.get_actor_params": [[103, 105], ["rl_agent.RLAgent.actor_critic_ntwk.named_parameters", "n.__contains__"], "methods", ["None"], ["", "", "def", "get_actor_params", "(", "self", ")", ":", "\n", "        ", "return", "(", "p", "for", "n", ",", "p", "in", "self", ".", "actor_critic_ntwk", ".", "named_parameters", "(", ")", "if", "not", "n", ".", "__contains__", "(", "'critic'", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.rl.ppo.PPO.__init__": [[8, 44], ["torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "sum", "numpy.zeros", "range", "ppo.PPO.actor_critic.named_parameters", "ppo.PPO.actor_critic.named_parameters", "n.__contains__", "p.numel", "n.__contains__"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "rank", ",", "comm", ",", "comm_size", ",", "\n", "actor_critic", ",", "\n", "clip_param", ",", "\n", "ppo_epoch", ",", "\n", "num_mini_batch", ",", "\n", "value_loss_coef", ",", "\n", "si_wt", ",", "svpg_expl_wt", ",", "\n", "lr", "=", "None", ",", "\n", "max_grad_norm", "=", "None", ")", ":", "\n", "\n", "        ", "self", ".", "rank", "=", "rank", "\n", "self", ".", "comm", "=", "comm", "\n", "self", ".", "comm_size", "=", "comm_size", "\n", "self", ".", "neighbors", "=", "[", "i", "for", "i", "in", "range", "(", "self", ".", "comm_size", ")", "if", "i", "!=", "self", ".", "rank", "]", "\n", "\n", "self", ".", "actor_critic", "=", "actor_critic", "\n", "self", ".", "clip_param", "=", "clip_param", "\n", "self", ".", "ppo_epoch", "=", "ppo_epoch", "\n", "self", ".", "num_mini_batch", "=", "num_mini_batch", "\n", "\n", "self", ".", "value_loss_coef", "=", "value_loss_coef", "\n", "self", ".", "max_grad_norm", "=", "max_grad_norm", "\n", "\n", "# weight coefficients", "\n", "self", ".", "si_wt", "=", "si_wt", "#  weight on the self-imitation term in the policy-gradient", "\n", "self", ".", "svpg_expl_wt", "=", "svpg_expl_wt", "# weight on the exploration term in SVPG", "\n", "\n", "self", ".", "actor_params", "=", "[", "p", "for", "n", ",", "p", "in", "self", ".", "actor_critic", ".", "named_parameters", "(", ")", "if", "not", "n", ".", "__contains__", "(", "'critic'", ")", "]", "\n", "self", ".", "critic_params", "=", "[", "p", "for", "n", ",", "p", "in", "self", ".", "actor_critic", ".", "named_parameters", "(", ")", "if", "n", ".", "__contains__", "(", "'critic'", ")", "]", "\n", "self", ".", "actor_optimizer", "=", "optim", ".", "Adam", "(", "self", ".", "actor_params", ",", "lr", "=", "lr", ",", "eps", "=", "1e-5", ")", "\n", "self", ".", "critic_optimizer", "=", "optim", ".", "Adam", "(", "self", ".", "critic_params", ",", "lr", "=", "lr", ",", "eps", "=", "1e-5", ")", "\n", "\n", "# buffer to store the gradient (policy parameters) from neighbors", "\n", "self", ".", "actor_pcnt", "=", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "self", ".", "actor_params", "if", "p", ".", "requires_grad", ")", "\n", "self", ".", "nb_grad_buffer", "=", "{", "i", ":", "np", ".", "zeros", "(", "self", ".", "actor_pcnt", ",", "dtype", "=", "np", ".", "float32", ")", "for", "i", "in", "self", ".", "neighbors", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.rl.ppo.PPO.update": [[45, 148], ["range", "range", "rollouts.feed_forward_generator", "range", "advantages.mean", "advantages.std", "ppo.PPO.actor_critic.evaluate_actions", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "action_loss.item", "ppo.PPO.actor_optimizer.zero_grad", "action_loss.backward", "torch.nn.utils.parameters_to_vector().detach", "torch.nn.utils.parameters_to_vector().detach", "torch.nn.utils.parameters_to_vector().detach", "ppo.PPO.actor_optimizer.zero_grad", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.nn.utils.parameters_to_vector().detach.clone", "enumerate", "ppo.PPO.comm.Barrier", "ppo.PPO.actor_optimizer.zero_grad", "torch.nn.utils.vector_to_parameters", "torch.nn.utils.vector_to_parameters", "torch.nn.utils.vector_to_parameters", "torch.utils.clip_grad_norm_", "torch.utils.clip_grad_norm_", "torch.utils.clip_grad_norm_", "ppo.PPO.actor_optimizer.step", "range", "value_loss.item", "ppo.PPO.critic_optimizer.zero_grad", "value_loss.backward", "torch.utils.clip_grad_norm_", "torch.utils.clip_grad_norm_", "torch.utils.clip_grad_norm_", "ppo.PPO.critic_optimizer.step", "aux_advantages[].mean", "aux_advantages[].std", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.min().mean", "torch.min().mean", "torch.min().mean", "torch.min().mean", "torch.min().mean", "torch.min().mean", "torch.min().mean", "torch.min().mean", "torch.min().mean", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.nn.utils.parameters_to_vector().detach.size", "ppo.PPO.actor_optimizer.zero_grad", "action_loss.backward", "torch.nn.utils.parameters_to_vector().detach", "torch.nn.utils.parameters_to_vector().detach", "torch.nn.utils.parameters_to_vector().detach", "ppo.PPO.actor_optimizer.zero_grad", "ppo.PPO.comm.Isend", "ppo.PPO.comm.Recv", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "sum", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max().mean", "torch.max().mean", "torch.max().mean", "torch.max().mean", "torch.max().mean", "torch.max().mean", "torch.max().mean", "torch.max().mean", "torch.max().mean", "torch.nn.utils.parameters_to_vector", "torch.nn.utils.parameters_to_vector", "torch.nn.utils.parameters_to_vector", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.min().mean", "torch.min().mean", "torch.min().mean", "torch.min().mean", "torch.min().mean", "torch.min().mean", "torch.min().mean", "torch.min().mean", "torch.min().mean", "torch.nn.utils.parameters_to_vector().detach.numpy", "torch.from_numpy.size", "torch.from_numpy.size", "torch.from_numpy.size", "kernel_vals.values", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max().mean", "torch.max().mean", "torch.max().mean", "torch.max().mean", "torch.max().mean", "torch.max().mean", "torch.max().mean", "torch.max().mean", "torch.max().mean", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min().mean", "torch.min().mean", "torch.min().mean", "torch.min().mean", "torch.min().mean", "torch.min().mean", "torch.min().mean", "torch.min().mean", "torch.min().mean", "torch.nn.utils.parameters_to_vector", "torch.nn.utils.parameters_to_vector", "torch.nn.utils.parameters_to_vector", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "len", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs"], "methods", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.buffers.storage.RolloutStorage.feed_forward_generator", "home.repos.pwc.inspect_result.tgangwani_QDAgents.networks.actor_critic.ActorCritic.evaluate_actions", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.monitor.Monitor.step", "home.repos.pwc.inspect_result.tgangwani_QDAgents.baselines_support.monitor.Monitor.step", "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.batch_fifo_dice.BatchFIFO.size", "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.batch_fifo_dice.BatchFIFO.size", "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.batch_fifo_dice.BatchFIFO.size", "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.batch_fifo_dice.BatchFIFO.size"], ["", "def", "update", "(", "self", ",", "rollouts", ",", "kernel_vals", ",", "anneal_coef", ")", ":", "\n", "        ", "advantages", "=", "rollouts", ".", "returns", "[", ":", "-", "1", "]", "-", "rollouts", ".", "value_preds", "[", ":", "-", "1", "]", "\n", "aux_advantages", "=", "[", "rollouts", ".", "aux_returns", "[", "i", "]", "[", ":", "-", "1", "]", "-", "rollouts", ".", "aux_value_preds", "[", "i", "]", "[", ":", "-", "1", "]", "for", "i", "in", "range", "(", "self", ".", "comm_size", ")", "]", "\n", "\n", "# normalize advantages", "\n", "advantages", "=", "(", "advantages", "-", "advantages", ".", "mean", "(", ")", ")", "/", "(", "advantages", ".", "std", "(", ")", "+", "1e-5", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "comm_size", ")", ":", "\n", "            ", "aux_advantages", "[", "i", "]", "=", "(", "aux_advantages", "[", "i", "]", "-", "aux_advantages", "[", "i", "]", ".", "mean", "(", ")", ")", "/", "(", "aux_advantages", "[", "i", "]", ".", "std", "(", ")", "+", "1e-5", ")", "\n", "\n", "", "value_loss_epoch", "=", "0", "\n", "action_loss_epoch", "=", "0", "\n", "\n", "for", "_", "in", "range", "(", "self", ".", "ppo_epoch", ")", ":", "\n", "            ", "data_generator", "=", "rollouts", ".", "feed_forward_generator", "(", "fetch_normalized", "=", "True", ",", "\n", "advantages", "=", "advantages", ",", "aux_advantages", "=", "aux_advantages", ",", "num_mini_batch", "=", "self", ".", "num_mini_batch", ")", "\n", "\n", "for", "sample", "in", "data_generator", ":", "\n", "                ", "obs_batch", ",", "recurrent_hidden_states_batch", ",", "actions_batch", ",", "arctanh_actions_batch", ",", "value_preds_batch", ",", "return_batch", ",", "masks_batch", ",", "old_action_log_probs_batch", ",", "adv_targ", ",", "aux_value_preds_batch_list", ",", "aux_return_batch_list", ",", "aux_adv_targ_list", "=", "sample", "\n", "\n", "# Reshape to do in a single forward pass for all steps", "\n", "values", ",", "aux_values", ",", "action_log_probs", ",", "_", ",", "_", "=", "self", ".", "actor_critic", ".", "evaluate_actions", "(", "\n", "obs_batch", ",", "recurrent_hidden_states_batch", ",", "masks_batch", ",", "actions_batch", ",", "arctanh_actions_batch", ")", "\n", "\n", "logratio", "=", "torch", ".", "clamp", "(", "action_log_probs", "-", "old_action_log_probs_batch", ",", "min", "=", "-", "10.", ",", "max", "=", "10.", ")", "\n", "ratio", "=", "torch", ".", "exp", "(", "logratio", ")", "\n", "surr1", "=", "ratio", "*", "adv_targ", "\n", "surr2", "=", "torch", ".", "clamp", "(", "ratio", ",", "1.0", "-", "self", ".", "clip_param", ",", "1.0", "+", "self", ".", "clip_param", ")", "*", "adv_targ", "\n", "action_loss", "=", "-", "torch", ".", "min", "(", "surr1", ",", "surr2", ")", ".", "mean", "(", ")", "\n", "\n", "surr1", "=", "ratio", "*", "aux_adv_targ_list", "[", "self", ".", "rank", "]", "\n", "surr2", "=", "torch", ".", "clamp", "(", "ratio", ",", "1.0", "-", "self", ".", "clip_param", ",", "1.0", "+", "self", ".", "clip_param", ")", "*", "aux_adv_targ_list", "[", "self", ".", "rank", "]", "\n", "action_loss", "=", "-", "torch", ".", "min", "(", "surr1", ",", "surr2", ")", ".", "mean", "(", ")", "*", "self", ".", "si_wt", "+", "action_loss", "*", "(", "1", "-", "self", ".", "si_wt", ")", "\n", "action_loss_epoch", "+=", "action_loss", ".", "item", "(", ")", "\n", "\n", "self", ".", "actor_optimizer", ".", "zero_grad", "(", ")", "\n", "action_loss", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "grad_si", "=", "parameters_to_vector", "(", "(", "p", ".", "grad", "for", "p", "in", "self", ".", "actor_params", ")", ")", ".", "detach", "(", ")", "# self-imitation gradient", "\n", "assert", "grad_si", ".", "size", "(", "0", ")", "==", "self", ".", "actor_pcnt", "\n", "self", ".", "actor_optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "grad_exploration", "=", "torch", ".", "zeros", "(", "self", ".", "actor_pcnt", ")", "\n", "grad_exploitation", "=", "grad_si", ".", "clone", "(", ")", "\n", "\n", "for", "count", ",", "i", "in", "enumerate", "(", "self", ".", "neighbors", ")", ":", "\n", "                    ", "surr1", "=", "ratio", "*", "aux_adv_targ_list", "[", "i", "]", "\n", "surr2", "=", "torch", ".", "clamp", "(", "ratio", ",", "1.0", "-", "self", ".", "clip_param", ",", "1.0", "+", "self", ".", "clip_param", ")", "*", "aux_adv_targ_list", "[", "i", "]", "\n", "action_loss", "=", "-", "torch", ".", "min", "(", "surr1", ",", "surr2", ")", ".", "mean", "(", ")", "\n", "self", ".", "actor_optimizer", ".", "zero_grad", "(", ")", "\n", "action_loss", ".", "backward", "(", "retain_graph", "=", "(", "count", "!=", "len", "(", "self", ".", "neighbors", ")", "-", "1", ")", ")", "\n", "grad_jsd", "=", "parameters_to_vector", "(", "(", "p", ".", "grad", "for", "p", "in", "self", ".", "actor_params", ")", ")", ".", "detach", "(", ")", "\n", "self", ".", "actor_optimizer", ".", "zero_grad", "(", ")", "\n", "grad_exploration", "+=", "kernel_vals", "[", "i", "]", "*", "grad_jsd", "\n", "self", ".", "comm", ".", "Isend", "(", "grad_si", ".", "numpy", "(", ")", ",", "dest", "=", "i", ",", "tag", "=", "77", ")", "\n", "\n", "", "for", "i", "in", "self", ".", "neighbors", ":", "\n", "                    ", "self", ".", "comm", ".", "Recv", "(", "self", ".", "nb_grad_buffer", "[", "i", "]", ",", "source", "=", "i", ",", "tag", "=", "77", ")", "\n", "grad_nb", "=", "torch", ".", "from_numpy", "(", "self", ".", "nb_grad_buffer", "[", "i", "]", ")", "\n", "assert", "grad_nb", ".", "size", "(", "0", ")", "==", "self", ".", "actor_pcnt", "\n", "grad_exploitation", "+=", "kernel_vals", "[", "i", "]", "*", "grad_nb", "\n", "\n", "", "self", ".", "comm", ".", "Barrier", "(", ")", "\n", "\n", "# gradient averaging", "\n", "omega", "=", "anneal_coef", "if", "self", ".", "svpg_expl_wt", "is", "None", "else", "self", ".", "svpg_expl_wt", "\n", "grad_avg", "=", "grad_exploration", "*", "omega", "+", "grad_exploitation", "*", "(", "1", "-", "omega", ")", "\n", "grad_avg", "/=", "(", "sum", "(", "kernel_vals", ".", "values", "(", ")", ")", "+", "1", ")", "\n", "\n", "# actor-update", "\n", "self", ".", "actor_optimizer", ".", "zero_grad", "(", ")", "\n", "vector_to_parameters", "(", "grad_avg", ",", "(", "p", ".", "grad", "for", "p", "in", "self", ".", "actor_params", ")", ")", "\n", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "actor_params", ",", "self", ".", "max_grad_norm", ")", "\n", "self", ".", "actor_optimizer", ".", "step", "(", ")", "\n", "\n", "value_pred_clipped", "=", "value_preds_batch", "+", "torch", ".", "max", "(", "torch", ".", "min", "(", "values", "-", "value_preds_batch", ",", "self", ".", "clip_param", "*", "torch", ".", "abs", "(", "value_preds_batch", ")", ")", ",", "-", "self", ".", "clip_param", "*", "torch", ".", "abs", "(", "value_preds_batch", ")", ")", "\n", "value_losses", "=", "(", "values", "-", "return_batch", ")", ".", "pow", "(", "2", ")", "\n", "value_losses_clipped", "=", "(", "value_pred_clipped", "-", "return_batch", ")", ".", "pow", "(", "2", ")", "\n", "value_loss", "=", "0.5", "*", "torch", ".", "max", "(", "value_losses", ",", "value_losses_clipped", ")", ".", "mean", "(", ")", "\n", "\n", "# add losses from auxiliary critics", "\n", "for", "i", "in", "range", "(", "self", ".", "comm_size", ")", ":", "\n", "                    ", "aux_value_pred_clipped", "=", "aux_value_preds_batch_list", "[", "i", "]", "+", "torch", ".", "max", "(", "torch", ".", "min", "(", "aux_values", "[", "i", "]", "-", "aux_value_preds_batch_list", "[", "i", "]", ",", "self", ".", "clip_param", "*", "torch", ".", "abs", "(", "aux_value_preds_batch_list", "[", "i", "]", ")", ")", ",", "-", "self", ".", "clip_param", "*", "torch", ".", "abs", "(", "aux_value_preds_batch_list", "[", "i", "]", ")", ")", "\n", "aux_value_losses", "=", "(", "aux_values", "[", "i", "]", "-", "aux_return_batch_list", "[", "i", "]", ")", ".", "pow", "(", "2", ")", "\n", "aux_value_losses_clipped", "=", "(", "aux_value_pred_clipped", "-", "aux_return_batch_list", "[", "i", "]", ")", ".", "pow", "(", "2", ")", "\n", "value_loss", "+=", "0.5", "*", "torch", ".", "max", "(", "aux_value_losses", ",", "aux_value_losses_clipped", ")", ".", "mean", "(", ")", "\n", "\n", "", "value_loss", "=", "value_loss", "*", "self", ".", "value_loss_coef", "\n", "value_loss_epoch", "+=", "value_loss", ".", "item", "(", ")", "\n", "\n", "self", ".", "critic_optimizer", ".", "zero_grad", "(", ")", "\n", "value_loss", ".", "backward", "(", ")", "\n", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "critic_params", ",", "(", "1", "+", "self", ".", "comm_size", ")", "*", "self", ".", "max_grad_norm", ")", "\n", "self", ".", "critic_optimizer", ".", "step", "(", ")", "\n", "\n", "", "", "num_updates", "=", "self", ".", "ppo_epoch", "*", "self", ".", "num_mini_batch", "\n", "value_loss_epoch", "/=", "num_updates", "\n", "action_loss_epoch", "/=", "num_updates", "\n", "\n", "return", "value_loss_epoch", ",", "action_loss_epoch", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.buffers.super_pq.SuperPQ.__init__": [[8, 12], ["range", "super_pq.SuperPQ.pq_buffers.append", "qd_agents.buffers.priority_buffer.PriorityBuffer"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "count", ",", "capacity", ")", ":", "\n", "        ", "self", ".", "pq_buffers", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "count", ")", ":", "\n", "            ", "self", ".", "pq_buffers", ".", "append", "(", "PriorityBuffer", "(", "capacity", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.buffers.super_pq.SuperPQ.is_empty": [[13, 22], ["all", "check.append"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "is_empty", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        check if all queues are empty\n        \"\"\"", "\n", "check", "=", "[", "]", "\n", "for", "pqb", "in", "self", ".", "pq_buffers", ":", "\n", "            ", "check", ".", "append", "(", "pqb", ".", "is_empty", ")", "\n", "", "return", "all", "(", "check", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.buffers.super_pq.SuperPQ.random_select": [[23, 33], ["random.choice", "len"], "methods", ["None"], ["", "def", "random_select", "(", "self", ",", "ignore_empty", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        return one queue at random\n        \"\"\"", "\n", "candidates", "=", "[", "pqb", "for", "pqb", "in", "self", ".", "pq_buffers", "if", "not", "pqb", ".", "is_empty", "]", "\n", "if", "len", "(", "candidates", ")", "==", "0", ":", "\n", "            ", "assert", "ignore_empty", ",", "\"All priority buffer are unexpectedly empty\"", "\n", "return", "self", ".", "pq_buffers", "[", "0", "]", "\n", "\n", "", "return", "random", ".", "choice", "(", "candidates", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.buffers.priority_buffer.BufferEntry.__init__": [[13, 17], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "r", ",", "l", ",", "_id", ")", ":", "\n", "        ", "self", ".", "r", "=", "r", "\n", "self", ".", "l", "=", "l", "\n", "self", ".", "_id", "=", "_id", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.buffers.priority_buffer.BufferEntry.__eq__": [[18, 20], ["None"], "methods", ["None"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.buffers.priority_buffer.BufferEntry.__gt__": [[21, 28], ["isinstance", "type"], "methods", ["None"], ["", "def", "__gt__", "(", "self", ",", "other", ")", ":", "\n", "        ", "assert", "isinstance", "(", "other", ",", "type", "(", "self", ")", ")", "\n", "if", "self", ".", "r", ">", "other", ".", "r", "and", "self", ".", "l", ">", "other", ".", "l", ":", "return", "True", "\n", "if", "other", ".", "r", ">", "self", ".", "r", "and", "other", ".", "l", ">", "self", ".", "l", ":", "return", "False", "\n", "if", "self", ".", "r", "/", "self", ".", "l", ">", "other", ".", "r", "/", "other", ".", "l", ":", "return", "True", "\n", "if", "(", "self", ".", "r", "==", "other", ".", "r", ")", "and", "(", "self", ".", "l", "==", "other", ".", "l", ")", "and", "(", "self", ".", "_id", ">", "other", ".", "_id", ")", ":", "return", "True", "\n", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.buffers.priority_buffer.PriorityBuffer.__init__": [[30, 36], ["dict", "list", "itertools.count"], "methods", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.batch_fifo_dice.BatchFIFO.count"], ["    ", "def", "__init__", "(", "self", ",", "capacity", ")", ":", "\n", "        ", "self", ".", "capacity", "=", "capacity", "\n", "self", ".", "traj_info", "=", "dict", "(", ")", "\n", "self", ".", "heap_list", "=", "list", "(", ")", "\n", "self", ".", "counter", "=", "itertools", ".", "count", "(", ")", "\n", "self", ".", "pointer", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.buffers.priority_buffer.PriorityBuffer.add_traj": [[37, 66], ["next", "torch.stack().squeeze", "torch.stack().squeeze", "torch.stack().squeeze", "priority_buffer.BufferEntry", "heapq.heappush", "priority_buffer.PriorityBuffer._sync", "len", "len", "copy.deepcopy", "torch.stack", "torch.stack", "torch.stack", "heapq.heappop"], "methods", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.buffers.priority_buffer.PriorityBuffer._sync"], ["", "def", "add_traj", "(", "self", ",", "traj", ")", ":", "\n", "        ", "\"\"\"\n        Add a new trajectory to the queue, after checking the necessary conditions\n        \"\"\"", "\n", "\n", "uid", "=", "next", "(", "self", ".", "counter", ")", "\n", "\n", "# Convert lists to tensors", "\n", "traj", "[", "'states'", "]", "=", "torch", ".", "stack", "(", "traj", "[", "'states'", "]", ")", ".", "squeeze", "(", "dim", "=", "1", ")", "\n", "traj", "[", "'actions'", "]", "=", "torch", ".", "stack", "(", "traj", "[", "'actions'", "]", ")", ".", "squeeze", "(", "dim", "=", "1", ")", "\n", "traj", "[", "'arctanh_actions'", "]", "=", "torch", ".", "stack", "(", "traj", "[", "'arctanh_actions'", "]", ")", ".", "squeeze", "(", "dim", "=", "1", ")", "\n", "\n", "# Create a priority queue entry", "\n", "pqe", "=", "BufferEntry", "(", "traj", "[", "'score'", "]", ",", "len", "(", "traj", "[", "'states'", "]", ")", ",", "uid", ")", "\n", "\n", "# if at capacity, check if the reward for this traj is greater than the min in the replay currently", "\n", "if", "len", "(", "self", ".", "traj_info", ")", "==", "self", ".", "capacity", ":", "\n", "            ", "min_pqe", ",", "*", "_", "=", "self", ".", "heap_list", "[", "0", "]", "\n", "if", "pqe", ">", "min_pqe", ":", "\n", "                ", "_", ",", "min_uid", ",", "*", "_", "=", "heapq", ".", "heappop", "(", "self", ".", "heap_list", ")", "\n", "del", "self", ".", "traj_info", "[", "min_uid", "]", "#  clear memory for the expunged entry", "\n", "", "else", ":", "\n", "                ", "return", "\n", "\n", "# success, add to replay", "\n", "", "", "full_entry", "=", "[", "pqe", ",", "uid", ",", "deepcopy", "(", "traj", ")", "]", "# deepcopy since we delete the traj outside this fn call", "\n", "self", ".", "traj_info", "[", "uid", "]", "=", "full_entry", "\n", "heapq", ".", "heappush", "(", "self", ".", "heap_list", ",", "full_entry", ")", "\n", "self", ".", "_sync", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.buffers.priority_buffer.PriorityBuffer._sync": [[67, 72], ["torch.cat", "torch.cat", "torch.cat", "priority_buffer.PriorityBuffer.traj_info.values", "priority_buffer.PriorityBuffer.traj_info.values", "priority_buffer.PriorityBuffer.traj_info.values"], "methods", ["None"], ["", "def", "_sync", "(", "self", ")", ":", "\n", "        ", "self", ".", "obs", "=", "torch", ".", "cat", "(", "[", "e", "[", "2", "]", "[", "'states'", "]", "for", "e", "in", "self", ".", "traj_info", ".", "values", "(", ")", "]", ")", "\n", "self", ".", "acs", "=", "torch", ".", "cat", "(", "[", "e", "[", "2", "]", "[", "'actions'", "]", "for", "e", "in", "self", ".", "traj_info", ".", "values", "(", ")", "]", ")", "\n", "self", ".", "arctanh_acs", "=", "torch", ".", "cat", "(", "[", "e", "[", "2", "]", "[", "'arctanh_actions'", "]", "for", "e", "in", "self", ".", "traj_info", ".", "values", "(", ")", "]", ")", "\n", "self", ".", "pointer", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.buffers.priority_buffer.PriorityBuffer.is_empty": [[73, 76], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "is_empty", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "heap_list", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.buffers.priority_buffer.PriorityBuffer._shuffle": [[77, 83], ["numpy.arange", "numpy.random.shuffle", "priority_buffer.PriorityBuffer.obs.size"], "methods", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.batch_fifo_dice.BatchFIFO.size"], ["", "def", "_shuffle", "(", "self", ")", ":", "\n", "        ", "idx", "=", "np", ".", "arange", "(", "self", ".", "obs", ".", "size", "(", "0", ")", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "idx", ")", "\n", "self", ".", "obs", "=", "self", ".", "obs", "[", "idx", ",", ":", "]", "\n", "self", ".", "acs", "=", "self", ".", "acs", "[", "idx", ",", ":", "]", "\n", "self", ".", "arctanh_acs", "=", "self", ".", "arctanh_acs", "[", "idx", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.buffers.priority_buffer.PriorityBuffer.data_gen_infinite": [[84, 97], ["priority_buffer.PriorityBuffer.data_gen_finite", "next", "priority_buffer.PriorityBuffer.data_gen_finite", "next"], "methods", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.buffers.priority_buffer.PriorityBuffer.data_gen_finite", "home.repos.pwc.inspect_result.tgangwani_QDAgents.buffers.priority_buffer.PriorityBuffer.data_gen_finite"], ["", "def", "data_gen_infinite", "(", "self", ",", "batch_sz", ")", ":", "\n", "        ", "\"\"\"\n        data generator (infinite). It goes over the data infinite times\n        \"\"\"", "\n", "gen", "=", "self", ".", "data_gen_finite", "(", "batch_sz", ")", "\n", "while", "True", ":", "\n", "            ", "try", ":", "\n", "                ", "*", "ret", ",", "=", "next", "(", "gen", ")", "\n", "", "except", "StopIteration", ":", "\n", "# restart generator", "\n", "                ", "gen", "=", "self", ".", "data_gen_finite", "(", "batch_sz", ")", "\n", "*", "ret", ",", "=", "next", "(", "gen", ")", "\n", "", "yield", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.buffers.priority_buffer.PriorityBuffer.data_gen_finite": [[98, 112], ["priority_buffer.PriorityBuffer._shuffle", "priority_buffer.PriorityBuffer._next_mb", "len", "priority_buffer.PriorityBuffer._next_mb"], "methods", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.buffers.priority_buffer.PriorityBuffer._shuffle", "home.repos.pwc.inspect_result.tgangwani_QDAgents.buffers.priority_buffer.PriorityBuffer._next_mb", "home.repos.pwc.inspect_result.tgangwani_QDAgents.buffers.priority_buffer.PriorityBuffer._next_mb"], ["", "", "def", "data_gen_finite", "(", "self", ",", "batch_sz", ")", ":", "\n", "        ", "\"\"\"\n        data generator (finite). It goes over the data only once\n        \"\"\"", "\n", "self", ".", "_shuffle", "(", ")", "\n", "self", ".", "pointer", "=", "0", "\n", "assert", "len", "(", "self", ")", ">=", "batch_sz", ",", "\"Not enough entries in priority buffer.\"", "\n", "\n", "obs", ",", "acs", ",", "arctanh_acs", ",", "done", "=", "self", ".", "_next_mb", "(", "batch_sz", ")", "\n", "yield", "(", "obs", ",", "acs", ",", "arctanh_acs", ")", "\n", "\n", "while", "not", "done", ":", "\n", "            ", "obs", ",", "acs", ",", "arctanh_acs", ",", "done", "=", "self", ".", "_next_mb", "(", "batch_sz", ")", "\n", "yield", "(", "obs", ",", "acs", ",", "arctanh_acs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.buffers.priority_buffer.PriorityBuffer.__len__": [[113, 115], ["priority_buffer.PriorityBuffer.obs.size"], "methods", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.batch_fifo_dice.BatchFIFO.size"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "obs", ".", "size", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.buffers.priority_buffer.PriorityBuffer._next_mb": [[116, 127], ["len"], "methods", ["None"], ["", "def", "_next_mb", "(", "self", ",", "mb_size", ")", ":", "\n", "        ", "\"\"\"\n        Return a mini-batch\n        \"\"\"", "\n", "end", "=", "self", ".", "pointer", "+", "mb_size", "\n", "obs", "=", "self", ".", "obs", "[", "self", ".", "pointer", ":", "end", ",", ":", "]", "\n", "acs", "=", "self", ".", "acs", "[", "self", ".", "pointer", ":", "end", ",", ":", "]", "\n", "arctanh_acs", "=", "self", ".", "arctanh_acs", "[", "self", ".", "pointer", ":", "end", ",", ":", "]", "\n", "self", ".", "pointer", "=", "end", "\n", "\n", "return", "obs", ",", "acs", ",", "arctanh_acs", ",", "(", "self", ".", "pointer", "+", "mb_size", ">", "len", "(", "self", ".", "obs", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.buffers.storage.RolloutStorage.__init__": [[9, 42], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "qd_agents.utils.common_utils.RunningMeanStd"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "num_steps", ",", "num_processes", ",", "obs_shape", ",", "action_space", ",", "\n", "recurrent_hidden_state_size", ",", "gamma", ",", "gae_lambda", ",", "comm_size", ")", ":", "\n", "        ", "self", ".", "raw_obs", "=", "torch", ".", "zeros", "(", "num_steps", "+", "1", ",", "num_processes", ",", "*", "obs_shape", ")", "\n", "self", ".", "normalized_obs", "=", "torch", ".", "zeros", "(", "num_steps", "+", "1", ",", "num_processes", ",", "*", "obs_shape", ")", "\n", "self", ".", "recurrent_hidden_states", "=", "torch", ".", "zeros", "(", "\n", "num_steps", "+", "1", ",", "num_processes", ",", "recurrent_hidden_state_size", ")", "\n", "\n", "self", ".", "rewards", "=", "torch", ".", "zeros", "(", "num_steps", ",", "num_processes", ",", "1", ")", "\n", "self", ".", "aux_rewards", "=", "torch", ".", "zeros", "(", "comm_size", ",", "num_steps", ",", "num_processes", ",", "1", ")", "\n", "\n", "self", ".", "value_preds", "=", "torch", ".", "zeros", "(", "num_steps", "+", "1", ",", "num_processes", ",", "1", ")", "\n", "self", ".", "aux_value_preds", "=", "torch", ".", "zeros", "(", "comm_size", ",", "num_steps", "+", "1", ",", "num_processes", ",", "1", ")", "\n", "\n", "self", ".", "returns", "=", "torch", ".", "zeros", "(", "num_steps", "+", "1", ",", "num_processes", ",", "1", ")", "\n", "self", ".", "aux_returns", "=", "torch", ".", "zeros", "(", "comm_size", ",", "num_steps", "+", "1", ",", "num_processes", ",", "1", ")", "\n", "\n", "self", ".", "action_log_probs", "=", "torch", ".", "zeros", "(", "num_steps", ",", "num_processes", ",", "1", ")", "\n", "action_shape", "=", "action_space", ".", "shape", "[", "0", "]", "\n", "self", ".", "actions", "=", "torch", ".", "zeros", "(", "num_steps", ",", "num_processes", ",", "action_shape", ")", "\n", "self", ".", "arctanh_actions", "=", "torch", ".", "zeros", "(", "num_steps", ",", "num_processes", ",", "action_shape", ")", "\n", "self", ".", "masks", "=", "torch", ".", "ones", "(", "num_steps", "+", "1", ",", "num_processes", ",", "1", ")", "\n", "\n", "# Masks that indicate whether it's a true terminal state", "\n", "# or time limit end state", "\n", "self", ".", "bad_masks", "=", "torch", ".", "ones", "(", "num_steps", "+", "1", ",", "num_processes", ",", "1", ")", "\n", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "gae_lambda", "=", "gae_lambda", "\n", "self", ".", "comm_size", "=", "comm_size", "\n", "\n", "self", ".", "ob_rms", "=", "RunningMeanStd", "(", "shape", "=", "obs_shape", ")", "\n", "self", ".", "num_steps", "=", "num_steps", "\n", "self", ".", "step", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.buffers.storage.RolloutStorage.insert": [[43, 64], ["storage.RolloutStorage.raw_obs[].copy_", "storage.RolloutStorage.normalized_obs[].copy_", "storage.RolloutStorage.recurrent_hidden_states[].copy_", "storage.RolloutStorage.actions[].copy_", "storage.RolloutStorage.arctanh_actions[].copy_", "storage.RolloutStorage.action_log_probs[].copy_", "storage.RolloutStorage.value_preds[].copy_", "range", "storage.RolloutStorage.rewards[].copy_", "storage.RolloutStorage.masks[].copy_", "storage.RolloutStorage.bad_masks[].copy_", "qd_agents.utils.common_utils.obs_batch_normalize", "storage.RolloutStorage.aux_value_preds[].copy_", "storage.RolloutStorage.aux_value_preds[].size", "aux_value_preds[].size"], "methods", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.common_utils.obs_batch_normalize", "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.batch_fifo_dice.BatchFIFO.size", "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.batch_fifo_dice.BatchFIFO.size"], ["", "def", "insert", "(", "self", ",", "obs", ",", "recurrent_hidden_states", ",", "actions", ",", "arctanh_actions", ",", "action_log_probs", ",", "\n", "value_preds", ",", "aux_value_preds", ",", "rewards", ",", "masks", ",", "bad_masks", ")", ":", "\n", "        ", "self", ".", "raw_obs", "[", "self", ".", "step", "+", "1", "]", ".", "copy_", "(", "obs", ")", "\n", "self", ".", "normalized_obs", "[", "self", ".", "step", "+", "1", "]", ".", "copy_", "(", "\n", "obs_batch_normalize", "(", "obs", ",", "update_rms", "=", "True", ",", "rms_obj", "=", "self", ".", "ob_rms", ")", ")", "\n", "self", ".", "recurrent_hidden_states", "[", "self", ".", "step", "+", "\n", "1", "]", ".", "copy_", "(", "recurrent_hidden_states", ")", "\n", "self", ".", "actions", "[", "self", ".", "step", "]", ".", "copy_", "(", "actions", ")", "\n", "self", ".", "arctanh_actions", "[", "self", ".", "step", "]", ".", "copy_", "(", "arctanh_actions", ")", "\n", "self", ".", "action_log_probs", "[", "self", ".", "step", "]", ".", "copy_", "(", "action_log_probs", ")", "\n", "self", ".", "value_preds", "[", "self", ".", "step", "]", ".", "copy_", "(", "value_preds", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "comm_size", ")", ":", "\n", "            ", "assert", "self", ".", "aux_value_preds", "[", "i", ",", "self", ".", "step", "]", ".", "size", "(", ")", "==", "aux_value_preds", "[", "i", "]", ".", "size", "(", ")", "\n", "self", ".", "aux_value_preds", "[", "i", ",", "self", ".", "step", "]", ".", "copy_", "(", "aux_value_preds", "[", "i", "]", ")", "\n", "\n", "", "self", ".", "rewards", "[", "self", ".", "step", "]", ".", "copy_", "(", "rewards", ")", "\n", "self", ".", "masks", "[", "self", ".", "step", "+", "1", "]", ".", "copy_", "(", "masks", ")", "\n", "self", ".", "bad_masks", "[", "self", ".", "step", "+", "1", "]", ".", "copy_", "(", "bad_masks", ")", "\n", "\n", "self", ".", "step", "=", "(", "self", ".", "step", "+", "1", ")", "%", "self", ".", "num_steps", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.buffers.storage.RolloutStorage.after_update": [[65, 71], ["storage.RolloutStorage.raw_obs[].copy_", "storage.RolloutStorage.normalized_obs[].copy_", "storage.RolloutStorage.recurrent_hidden_states[].copy_", "storage.RolloutStorage.masks[].copy_", "storage.RolloutStorage.bad_masks[].copy_"], "methods", ["None"], ["", "def", "after_update", "(", "self", ")", ":", "\n", "        ", "self", ".", "raw_obs", "[", "0", "]", ".", "copy_", "(", "self", ".", "raw_obs", "[", "-", "1", "]", ")", "\n", "self", ".", "normalized_obs", "[", "0", "]", ".", "copy_", "(", "self", ".", "normalized_obs", "[", "-", "1", "]", ")", "\n", "self", ".", "recurrent_hidden_states", "[", "0", "]", ".", "copy_", "(", "self", ".", "recurrent_hidden_states", "[", "-", "1", "]", ")", "\n", "self", ".", "masks", "[", "0", "]", ".", "copy_", "(", "self", ".", "masks", "[", "-", "1", "]", ")", "\n", "self", ".", "bad_masks", "[", "0", "]", ".", "copy_", "(", "self", ".", "bad_masks", "[", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.buffers.storage.RolloutStorage.compute_adv_tdlam": [[72, 81], ["storage.RolloutStorage._compute_adv_tdlam_aux", "reversed", "range", "storage.RolloutStorage.rewards.size"], "methods", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.buffers.storage.RolloutStorage._compute_adv_tdlam_aux", "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.batch_fifo_dice.BatchFIFO.size"], ["", "def", "compute_adv_tdlam", "(", "self", ",", "next_value", ",", "next_aux_value", ")", ":", "\n", "        ", "self", ".", "_compute_adv_tdlam_aux", "(", "next_aux_value", ")", "\n", "self", ".", "value_preds", "[", "-", "1", "]", "=", "next_value", "\n", "gae", "=", "0", "\n", "for", "step", "in", "reversed", "(", "range", "(", "self", ".", "rewards", ".", "size", "(", "0", ")", ")", ")", ":", "\n", "            ", "delta", "=", "self", ".", "rewards", "[", "step", "]", "+", "self", ".", "gamma", "*", "self", ".", "value_preds", "[", "step", "+", "1", "]", "*", "self", ".", "masks", "[", "step", "+", "1", "]", "-", "self", ".", "value_preds", "[", "step", "]", "\n", "gae", "=", "delta", "+", "self", ".", "gamma", "*", "self", ".", "gae_lambda", "*", "self", ".", "masks", "[", "step", "+", "1", "]", "*", "gae", "\n", "gae", "=", "gae", "*", "self", ".", "bad_masks", "[", "step", "+", "1", "]", "\n", "self", ".", "returns", "[", "step", "]", "=", "gae", "+", "self", ".", "value_preds", "[", "step", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.buffers.storage.RolloutStorage._compute_adv_tdlam_aux": [[82, 91], ["range", "reversed", "range", "storage.RolloutStorage.aux_rewards[].size"], "methods", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.batch_fifo_dice.BatchFIFO.size"], ["", "", "def", "_compute_adv_tdlam_aux", "(", "self", ",", "next_aux_value", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "self", ".", "comm_size", ")", ":", "\n", "            ", "self", ".", "aux_value_preds", "[", "i", "]", "[", "-", "1", "]", "=", "next_aux_value", "[", "i", "]", "\n", "gae", "=", "0", "\n", "for", "step", "in", "reversed", "(", "range", "(", "self", ".", "aux_rewards", "[", "i", "]", ".", "size", "(", "0", ")", ")", ")", ":", "\n", "                ", "delta", "=", "self", ".", "aux_rewards", "[", "i", "]", "[", "step", "]", "+", "self", ".", "gamma", "*", "self", ".", "aux_value_preds", "[", "i", "]", "[", "step", "+", "1", "]", "*", "self", ".", "masks", "[", "step", "+", "1", "]", "-", "self", ".", "aux_value_preds", "[", "i", "]", "[", "step", "]", "\n", "gae", "=", "delta", "+", "self", ".", "gamma", "*", "self", ".", "gae_lambda", "*", "self", ".", "masks", "[", "step", "+", "1", "]", "*", "gae", "\n", "gae", "=", "gae", "*", "self", ".", "bad_masks", "[", "step", "+", "1", "]", "\n", "self", ".", "aux_returns", "[", "i", "]", "[", "step", "]", "=", "gae", "+", "self", ".", "aux_value_preds", "[", "i", "]", "[", "step", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.buffers.storage.RolloutStorage.feed_forward_generator": [[92, 141], ["torch.utils.data.sampler.BatchSampler", "storage.RolloutStorage.rewards.size", "torch.utils.data.sampler.SubsetRandomSampler", "range", "storage.RolloutStorage.recurrent_hidden_states[].view", "storage.RolloutStorage.actions.view", "storage.RolloutStorage.arctanh_actions.view", "storage.RolloutStorage.value_preds[].view", "storage.RolloutStorage.returns[].view", "storage.RolloutStorage.masks[].view", "storage.RolloutStorage.action_log_probs.view", "storage.RolloutStorage.normalized_obs[].view", "storage.RolloutStorage.raw_obs[].view", "storage.RolloutStorage.recurrent_hidden_states.size", "storage.RolloutStorage.actions.size", "storage.RolloutStorage.arctanh_actions.size", "[].view", "range", "[].view", "range", "advantages.view", "aux_advantages[].view", "range", "storage.RolloutStorage.normalized_obs.size", "storage.RolloutStorage.raw_obs.size"], "methods", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.batch_fifo_dice.BatchFIFO.size", "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.batch_fifo_dice.BatchFIFO.size", "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.batch_fifo_dice.BatchFIFO.size", "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.batch_fifo_dice.BatchFIFO.size", "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.batch_fifo_dice.BatchFIFO.size", "home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.batch_fifo_dice.BatchFIFO.size"], ["", "", "", "def", "feed_forward_generator", "(", "self", ",", "\n", "fetch_normalized", ",", "\n", "advantages", ",", "\n", "aux_advantages", ",", "\n", "num_mini_batch", "=", "None", ",", "\n", "mini_batch_size", "=", "None", ")", ":", "\n", "        ", "num_steps", ",", "num_processes", "=", "self", ".", "rewards", ".", "size", "(", ")", "[", "0", ":", "2", "]", "\n", "batch_size", "=", "num_processes", "*", "num_steps", "\n", "\n", "if", "mini_batch_size", "is", "None", ":", "\n", "            ", "assert", "batch_size", ">=", "num_mini_batch", ",", "(", "\n", "\"PPO requires the number of processes ({}) \"", "\n", "\"* number of steps ({}) = {} \"", "\n", "\"to be greater than or equal to the number of PPO mini batches ({}).\"", "\n", "\"\"", ".", "format", "(", "num_processes", ",", "num_steps", ",", "num_processes", "*", "num_steps", ",", "\n", "num_mini_batch", ")", ")", "\n", "mini_batch_size", "=", "batch_size", "//", "num_mini_batch", "\n", "", "sampler", "=", "BatchSampler", "(", "\n", "SubsetRandomSampler", "(", "range", "(", "batch_size", ")", ")", ",", "\n", "mini_batch_size", ",", "\n", "drop_last", "=", "True", ")", "\n", "for", "indices", "in", "sampler", ":", "\n", "\n", "            ", "if", "fetch_normalized", ":", "\n", "                ", "obs_batch", "=", "self", ".", "normalized_obs", "[", ":", "-", "1", "]", ".", "view", "(", "-", "1", ",", "*", "self", ".", "normalized_obs", ".", "size", "(", ")", "[", "2", ":", "]", ")", "[", "indices", "]", "\n", "", "else", ":", "\n", "                ", "obs_batch", "=", "self", ".", "raw_obs", "[", ":", "-", "1", "]", ".", "view", "(", "-", "1", ",", "*", "self", ".", "raw_obs", ".", "size", "(", ")", "[", "2", ":", "]", ")", "[", "indices", "]", "\n", "\n", "", "recurrent_hidden_states_batch", "=", "self", ".", "recurrent_hidden_states", "[", ":", "-", "1", "]", ".", "view", "(", "\n", "-", "1", ",", "self", ".", "recurrent_hidden_states", ".", "size", "(", "-", "1", ")", ")", "[", "indices", "]", "\n", "actions_batch", "=", "self", ".", "actions", ".", "view", "(", "-", "1", ",", "self", ".", "actions", ".", "size", "(", "-", "1", ")", ")", "[", "indices", "]", "\n", "arctanh_actions_batch", "=", "self", ".", "arctanh_actions", ".", "view", "(", "-", "1", ",", "self", ".", "arctanh_actions", ".", "size", "(", "-", "1", ")", ")", "[", "indices", "]", "\n", "value_preds_batch", "=", "self", ".", "value_preds", "[", ":", "-", "1", "]", ".", "view", "(", "-", "1", ",", "1", ")", "[", "indices", "]", "\n", "aux_value_preds_batch_list", "=", "[", "self", ".", "aux_value_preds", "[", "i", "]", "[", ":", "-", "1", "]", ".", "view", "(", "-", "1", ",", "1", ")", "[", "indices", "]", "for", "i", "in", "range", "(", "self", ".", "comm_size", ")", "]", "\n", "return_batch", "=", "self", ".", "returns", "[", ":", "-", "1", "]", ".", "view", "(", "-", "1", ",", "1", ")", "[", "indices", "]", "\n", "aux_return_batch_list", "=", "[", "self", ".", "aux_returns", "[", "i", "]", "[", ":", "-", "1", "]", ".", "view", "(", "-", "1", ",", "1", ")", "[", "indices", "]", "for", "i", "in", "range", "(", "self", ".", "comm_size", ")", "]", "\n", "masks_batch", "=", "self", ".", "masks", "[", ":", "-", "1", "]", ".", "view", "(", "-", "1", ",", "1", ")", "[", "indices", "]", "\n", "old_action_log_probs_batch", "=", "self", ".", "action_log_probs", ".", "view", "(", "-", "1", ",", "1", ")", "[", "indices", "]", "\n", "\n", "if", "advantages", "is", "None", ":", "\n", "                ", "adv_targ", "=", "None", "\n", "aux_adv_targ_list", "=", "None", "\n", "", "else", ":", "\n", "                ", "adv_targ", "=", "advantages", ".", "view", "(", "-", "1", ",", "1", ")", "[", "indices", "]", "\n", "aux_adv_targ_list", "=", "[", "aux_advantages", "[", "i", "]", ".", "view", "(", "-", "1", ",", "1", ")", "[", "indices", "]", "for", "i", "in", "range", "(", "self", ".", "comm_size", ")", "]", "\n", "\n", "", "yield", "obs_batch", ",", "recurrent_hidden_states_batch", ",", "actions_batch", ",", "arctanh_actions_batch", ",", "value_preds_batch", ",", "return_batch", ",", "masks_batch", ",", "old_action_log_probs_batch", ",", "adv_targ", ",", "aux_value_preds_batch_list", ",", "aux_return_batch_list", ",", "aux_adv_targ_list", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.tgangwani_QDAgents.buffers.storage._flatten_helper": [[5, 7], ["_tensor.view", "_tensor.size"], "function", ["home.repos.pwc.inspect_result.tgangwani_QDAgents.utils.batch_fifo_dice.BatchFIFO.size"], ["def", "_flatten_helper", "(", "T", ",", "N", ",", "_tensor", ")", ":", "\n", "    ", "return", "_tensor", ".", "view", "(", "T", "*", "N", ",", "*", "_tensor", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "\n"]]}