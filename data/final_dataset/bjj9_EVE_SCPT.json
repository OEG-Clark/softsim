{"home.repos.pwc.inspect_result.bjj9_EVE_SCPT.src.inference.run_inference": [[40, 300], ["core.config_default.DefaultConfig", "logging.getLogger", "core.script_init_common", "core.init_dataset", "core.model_setup", "os.path.isfile", "os.path.dirname", "core.iterator", "models.eve.EVE().cuda", "EVEC().cuda.load_subject_memory", "print", "os.makedirs", "pickle.dump", "models.evec.EVEC().cuda", "print", "format", "outputs.keys", "open", "ffmpeg.input().output().overwrite_output().run_async.stdin.close", "ffmpeg.input().output().overwrite_output().run_async.wait", "print", "models.eve.EVE", "all_screen.astype.astype", "range", "models.evec.EVEC", "final_out_frames.items", "numpy.copy", "numpy.copy", "suffix.startswith", "numpy.ones", "numpy.copy", "numpy.copy", "numpy.copy", "numpy.copy", "numpy.copy", "numpy.copy", "list", "range", "ffmpeg.input().output().overwrite_output().run_async", "ffmpeg.input().output().overwrite_output().run_async.stdin.write", "range", "numpy.ascontiguousarray", "suffix.split", "enumerate", "list", "frame.astype().tobytes", "numpy.fliplr", "to_draw.append", "enumerate", "cv2.putText", "cv2.putText", "cv2.resize", "suffix.split", "enumerate", "ffmpeg.input().output().overwrite_output", "to_draw.append", "cv2.circle", "cv2.circle", "to_draw.append", "cv2.arrowedLine", "cv2.arrowedLine", "frame.astype", "ValueError", "cv2.line", "cv2.line", "numpy.sin", "numpy.sin", "int", "int", "tuple", "tuple", "ffmpeg.input().output", "to_draw.append", "to_draw.append", "to_draw.append", "ValueError", "numpy.cos", "numpy.round().astype", "numpy.round().astype", "ffmpeg.input", "numpy.round", "numpy.round"], "function", ["home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.training.script_init_common", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.eval_codalab.init_dataset", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.eval_codalab.model_setup", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.eval_codalab.iterator", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.evec.EVEC.load_subject_memory"], ["def", "run_inference", "(", "default_model_config", ",", "input_path", ",", "output_path", ",", "memory_path", ",", "online_refinement_starts_from", ",", "fixed_history_len", ",", "input_memory_path", ",", "\n", "one_video_to_select", "=", "None", ",", "one_sample_to_plot", "=", "None", ")", ":", "\n", "# Default singleton config object", "\n", "    ", "config", "=", "DefaultConfig", "(", ")", "\n", "\n", "# Setup logger", "\n", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "\n", "# Run some routines from the training setup pipeline", "\n", "inference", ".", "script_init_common", "(", "default_model_config", ",", "input_path", ",", "output_path", ")", "# hwfjojfj src/inference.py", "\n", "\n", "# Initialize dataset and dataloader", "\n", "dataset", ",", "dataloader", "=", "inference", ".", "init_dataset", "(", ")", "\n", "\n", "# Define and set up model", "\n", "if", "config", ".", "model_used", "==", "'EVE'", ":", "\n", "        ", "model", "=", "EVE", "(", "output_predictions", "=", "True", ")", ".", "cuda", "(", ")", "\n", "", "elif", "config", ".", "model_used", "==", "'EVEC'", ":", "\n", "        ", "model", "=", "EVEC", "(", "output_predictions", "=", "True", ",", "online_refinement_starts_from", "=", "online_refinement_starts_from", ",", "\n", "fixed_history_len", "=", "fixed_history_len", ",", "input_memory_path", "=", "input_memory_path", ",", "\n", "one_video_to_select", "=", "one_video_to_select", ",", "one_sample_to_plot", "=", "one_sample_to_plot", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "\n", "#print(model.eye_net.state_dict()['fc_to_gaze.0.weight'], model.eye_net.state_dict()['fc_to_gaze.0.weight'].size(), '---kdddfsf before check src/inference.py')", "\n", "\n", "", "model", "=", "inference", ".", "model_setup", "(", "model", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "memory_path", ")", ":", "\n", "        ", "model", ".", "load_subject_memory", "(", "memory_path", ")", "\n", "print", "(", "'load subject memories from'", ",", "memory_path", ",", "'---jjeiojj src/inference.py'", ")", "\n", "#print(model.eye_net.state_dict()['fc_to_gaze.0.weight'], model.eye_net.state_dict()['fc_to_gaze.0.weight'].size(), '---kefdfsf after check src/inference.py')", "\n", "#raise", "\n", "\n", "# Prepare output dir.", "\n", "", "output_dir", "=", "os", ".", "path", ".", "dirname", "(", "config", ".", "output_path", ")", "\n", "if", "output_dir", ">", "''", ":", "\n", "        ", "os", ".", "makedirs", "(", "output_dir", ",", "exist_ok", "=", "True", ")", "\n", "", "video_handle", "=", "None", "\n", "\n", "# Do inference", "\n", "count", "=", "0", "\n", "for", "step", ",", "inputs", ",", "outputs", "in", "inference", ".", "iterator", "(", "model", ",", "dataloader", ",", "create_images", "=", "True", ")", ":", "\n", "        ", "if", "model", ".", "plotted", ":", "\n", "            ", "print", "(", "'plotting material already prepared'", ",", "'---jfowoijef inference.py'", ")", "\n", "break", "\n", "# store results", "\n", "# outputs_stats_dir = config.output_path[:-4] + '_stats'", "\n", "# createDir(outputs_stats_dir)", "\n", "", "outputs_stats_path", "=", "config", ".", "output_path", "[", ":", "-", "4", "]", "+", "'stats_frame_'", "+", "format", "(", "count", ",", "'06d'", ")", "\n", "# torch.save(outputs, outputs_stats_path)", "\n", "del", "outputs", "[", "'screen_frame'", "]", "\n", "if", "'both_eye_patch'", "in", "outputs", ".", "keys", "(", ")", ":", "\n", "            ", "del", "outputs", "[", "'both_eye_patch'", "]", "# to save space", "\n", "\n", "", "pickle", ".", "dump", "(", "outputs", ",", "open", "(", "outputs_stats_path", ",", "'wb'", ")", ")", "\n", "#print(model.eye_net.state_dict()['fc_to_gaze.0.bias'], '---kkeijjjf inference.py')", "\n", "#print(outputs_stats_path, outputs['PoG_px_initial'], '---wwweeedf inference.py')", "\n", "#raise", "\n", "count", "+=", "1", "\n", "\n", "# Visualize", "\n", "if", "not", "config", ".", "mute_visualization", ":", "\n", "            ", "we_have_gt", "=", "'left_g_gt'", "in", "outputs", "\n", "all_g_init", "=", "outputs", "[", "'left_g_initial'", "]", "\n", "# if config.load_full_frame_for_visualization:", "\n", "#     all_eyes = outputs['both_eye_patch']", "\n", "#     all_eyes = (all_eyes + 1.0) * (255.0 / 2.0)", "\n", "#     all_eyes = all_eyes.astype(np.uint8)", "\n", "#     all_eyes = np.transpose(all_eyes, [0, 1, 3, 4, 2])[:, :, :, :, ::-1]", "\n", "if", "'screen_full_frame'", "in", "inputs", ":", "\n", "                ", "all_screen", "=", "inputs", "[", "'screen_full_frame'", "]", "\n", "all_screen", "=", "all_screen", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "all_screen", "=", "all_screen", "[", ":", ",", ":", ",", ":", ",", ":", ",", ":", ":", "-", "1", "]", "# TODO: RGB to BGR", "\n", "", "all_PoG_init", "=", "outputs", "[", "'PoG_px_initial'", "]", "\n", "if", "config", ".", "refine_net_enabled", "and", "config", ".", "load_screen_content", ":", "\n", "                ", "all_g_final", "=", "outputs", "[", "'g_final'", "]", "\n", "all_PoG_final", "=", "outputs", "[", "'PoG_px_final'", "]", "\n", "", "if", "we_have_gt", ":", "\n", "                ", "all_g_gt", "=", "outputs", "[", "'left_g_gt'", "]", "\n", "all_PoG_gt", "=", "outputs", "[", "'PoG_px_gt'", "]", "\n", "all_PoG_gt_validity", "=", "outputs", "[", "'PoG_px_gt_validity'", "]", "\n", "", "num_entries", "=", "all_g_init", ".", "shape", "[", "0", "]", "\n", "sequence_len", "=", "all_g_init", ".", "shape", "[", "1", "]", "\n", "if", "config", ".", "refine_net_enabled", ":", "# if refine net is used, do visualization, skip this if only eye net is used", "\n", "                ", "for", "index", "in", "range", "(", "num_entries", ")", ":", "\n", "# if config.load_full_frame_for_visualization:", "\n", "#       eyes = all_eyes[index, :]", "\n", "                    ", "if", "'screen_full_frame'", "in", "inputs", ":", "\n", "                        ", "screen", "=", "all_screen", "[", "index", ",", ":", "]", "\n", "", "g_init", "=", "all_g_init", "[", "index", ",", ":", "]", "\n", "PoG_init", "=", "all_PoG_init", "[", "index", ",", ":", "]", "\n", "if", "config", ".", "load_screen_content", ":", "\n", "                        ", "g_final", "=", "all_g_final", "[", "index", ",", ":", "]", "\n", "PoG_final", "=", "all_PoG_final", "[", "index", ",", ":", "]", "\n", "", "if", "we_have_gt", ":", "\n", "                        ", "g_gt", "=", "all_g_gt", "[", "index", ",", ":", "]", "\n", "PoG_gt", "=", "all_PoG_gt", "[", "index", ",", ":", "]", "\n", "gt_validity", "=", "all_PoG_gt_validity", "[", "index", ",", ":", "]", "\n", "", "final_out_frames", "=", "{", "\n", "# 'mirrored_eye_y': [eyes[t, :, 128:, :] for t in range(sequence_len)],", "\n", "# 'mirrored_eye_r': [eyes[t, :, 128:, :] for t in range(sequence_len)],", "\n", "# 'mirrored_eye_g': [eyes[t, :, 128:, :] for t in range(sequence_len)],", "\n", "# 'eye_y': [eyes[t, :, 128:, :] for t in range(sequence_len)],", "\n", "# 'eye_r': [eyes[t, :, 128:, :] for t in range(sequence_len)],", "\n", "# 'eye_g': [eyes[t, :, 128:, :] for t in range(sequence_len)],", "\n", "# 'eye_rg': [eyes[t, :, 128:, :] for t in range(sequence_len)],", "\n", "# 'eye_ry': [eyes[t, :, 128:, :] for t in range(sequence_len)],", "\n", "# 'mirrored_screen_r': [screen[t, :] for t in range(sequence_len)],", "\n", "# 'mirrored_screen_y': [screen[t, :] for t in range(sequence_len)],", "\n", "# 'mirrored_screen_g': [screen[t, :] for t in range(sequence_len)],", "\n", "# 'screen_r': [screen[t, :] for t in range(sequence_len)],", "\n", "# 'screen_y': [screen[t, :] for t in range(sequence_len)],", "\n", "# 'screen_g': [screen[t, :] for t in range(sequence_len)],", "\n", "# 'screen_yr': [screen[t, :] for t in range(sequence_len)],", "\n", "'screen_yrg'", ":", "[", "screen", "[", "t", ",", ":", "]", "for", "t", "in", "range", "(", "sequence_len", ")", "]", ",", "\n", "}", "\n", "\n", "for", "suffix", ",", "frames", "in", "final_out_frames", ".", "items", "(", ")", ":", "\n", "                        ", "frames", "=", "[", "np", ".", "copy", "(", "frame", ")", "for", "frame", "in", "frames", "]", "\n", "\n", "# Choose whether to mirror frame", "\n", "_g_init", "=", "np", ".", "copy", "(", "g_init", ")", "\n", "_PoG_init", "=", "np", ".", "copy", "(", "PoG_init", ")", "\n", "if", "config", ".", "load_screen_content", ":", "\n", "                            ", "_g_final", "=", "np", ".", "copy", "(", "g_final", ")", "\n", "_PoG_final", "=", "np", ".", "copy", "(", "PoG_final", ")", "\n", "", "if", "we_have_gt", ":", "\n", "                            ", "_g_gt", "=", "np", ".", "copy", "(", "g_gt", ")", "\n", "_PoG_gt", "=", "np", ".", "copy", "(", "PoG_gt", ")", "\n", "_gt_validity", "=", "np", ".", "copy", "(", "gt_validity", ")", "\n", "", "if", "suffix", ".", "startswith", "(", "'mirrored_'", ")", ":", "\n", "                            ", "frames", "=", "[", "np", ".", "ascontiguousarray", "(", "np", ".", "fliplr", "(", "frame", ")", ")", "for", "frame", "in", "frames", "]", "\n", "if", "config", ".", "load_screen_content", ":", "\n", "                                ", "_PoG_final", "[", ":", ",", "0", "]", "=", "1920.0", "-", "_PoG_final", "[", ":", ",", "0", "]", "\n", "_g_final", "[", ":", ",", "1", "]", "=", "-", "_g_final", "[", ":", ",", "1", "]", "\n", "", "_PoG_init", "[", ":", ",", "0", "]", "=", "1920.0", "-", "_PoG_init", "[", ":", ",", "0", "]", "\n", "_g_init", "[", ":", ",", "1", "]", "=", "-", "_g_init", "[", ":", ",", "1", "]", "\n", "if", "we_have_gt", ":", "\n", "                                ", "_PoG_gt", "[", ":", ",", "0", "]", "=", "1920.0", "-", "_PoG_gt", "[", ":", ",", "0", "]", "\n", "_g_gt", "[", ":", ",", "1", "]", "=", "-", "_g_gt", "[", ":", ",", "1", "]", "\n", "", "", "_all_valid", "=", "np", ".", "ones", "(", "(", "sequence_len", ",", ")", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "\n", "if", "'screen'", "in", "suffix", ":", "\n", "# Choose what to draw", "\n", "                            ", "to_draw", "=", "[", "]", "\n", "last_bit", "=", "suffix", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", "\n", "is_drawing_gt", "=", "'r'", "in", "last_bit", "\n", "for", "char", "in", "list", "(", "last_bit", ")", ":", "\n", "                                ", "if", "char", "==", "'y'", ":", "\n", "                                    ", "to_draw", ".", "append", "(", "(", "'Initial Estimate'", ",", "_PoG_init", ",", "_all_valid", ",", "\n", "[", "0", ",", "180", ",", "180", "]", ")", ")", "\n", "", "elif", "char", "==", "'g'", ":", "\n", "                                    ", "to_draw", ".", "append", "(", "(", "'After Refinement (Ours)'", ",", "_PoG_final", ",", "_all_valid", ",", "\n", "[", "0", ",", "180", ",", "0", "]", ")", ")", "\n", "", "elif", "char", "==", "'r'", ":", "\n", "                                    ", "if", "we_have_gt", ":", "\n", "                                        ", "to_draw", ".", "append", "(", "(", "'Tobii Data (Groundtruth)'", ",", "_PoG_gt", ",", "_gt_validity", ",", "\n", "[", "0", ",", "0", ",", "180", "]", ")", ")", "\n", "", "", "else", ":", "\n", "                                    ", "raise", "ValueError", "(", "'Invalid thing to draw: %s'", "%", "char", ")", "\n", "\n", "# # Inset eye image", "\n", "# if not suffix.startswith('mirrored_'):", "\n", "#     for t in range(sequence_len):", "\n", "#         eyes = cv.resize(all_eyes[index, t, :], (256, 128))", "\n", "#         eh, ew, _ = eyes.shape", "\n", "#         frames[t][-eh:, -ew:, :] = np.fliplr(eyes)", "\n", "\n", "", "", "if", "we_have_gt", "and", "is_drawing_gt", ":", "\n", "# Draw error/residual \"labels\"", "\n", "                                ", "for", "label", ",", "PoG_list", ",", "validity", ",", "colour", "in", "to_draw", ":", "\n", "                                    ", "for", "t", ",", "(", "x", ",", "y", ")", "in", "enumerate", "(", "PoG_list", ")", ":", "\n", "                                        ", "if", "'Groundtruth'", "not", "in", "label", "and", "_gt_validity", "[", "t", "]", "==", "1", ":", "\n", "                                            ", "x_gt", ",", "y_gt", "=", "_PoG_gt", "[", "t", ",", ":", "]", "\n", "cv", ".", "line", "(", "frames", "[", "t", "]", ",", "(", "x", ",", "y", ")", ",", "(", "x_gt", ",", "y_gt", ")", ",", "color", "=", "[", "0", ",", "0", ",", "0", "]", ",", "\n", "thickness", "=", "5", ",", "lineType", "=", "cv", ".", "LINE_AA", ")", "\n", "cv", ".", "line", "(", "frames", "[", "t", "]", ",", "(", "x", ",", "y", ")", ",", "(", "x_gt", ",", "y_gt", ")", ",", "color", "=", "colour", ",", "\n", "thickness", "=", "2", ",", "lineType", "=", "cv", ".", "LINE_AA", ")", "\n", "\n", "# Draw fixation circles", "\n", "", "", "", "", "for", "_", ",", "PoG_list", ",", "validity", ",", "colour", "in", "to_draw", ":", "\n", "                                ", "for", "t", ",", "(", "x", ",", "y", ")", "in", "enumerate", "(", "PoG_list", ")", ":", "\n", "                                    ", "if", "validity", "[", "t", "]", "==", "1", ":", "\n", "                                        ", "cv", ".", "circle", "(", "frames", "[", "t", "]", ",", "(", "x", ",", "y", ")", ",", "radius", "=", "14", ",", "color", "=", "[", "0", ",", "0", ",", "0", "]", ",", "\n", "thickness", "=", "-", "1", ",", "lineType", "=", "cv", ".", "LINE_AA", ")", "\n", "cv", ".", "circle", "(", "frames", "[", "t", "]", ",", "(", "x", ",", "y", ")", ",", "radius", "=", "10", ",", "color", "=", "colour", ",", "\n", "thickness", "=", "-", "1", ",", "lineType", "=", "cv", ".", "LINE_AA", ")", "\n", "\n", "# Now label with a \"legend\"", "\n", "", "", "", "for", "t", "in", "range", "(", "sequence_len", ")", ":", "\n", "                                ", "offset_dy", "=", "0", "\n", "for", "label", ",", "_", ",", "_", ",", "colour", "in", "to_draw", ":", "\n", "                                    ", "offset_x", "=", "50", "\n", "offset_y", "=", "90", "+", "offset_dy", "\n", "cv", ".", "putText", "(", "frames", "[", "t", "]", ",", "label", ",", "org", "=", "(", "offset_x", ",", "offset_y", ")", ",", "\n", "fontFace", "=", "cv", ".", "FONT_HERSHEY_DUPLEX", ",", "fontScale", "=", "1.6", ",", "\n", "color", "=", "[", "0", ",", "0", ",", "0", "]", ",", "thickness", "=", "9", ",", "lineType", "=", "cv", ".", "LINE_AA", ")", "\n", "cv", ".", "putText", "(", "frames", "[", "t", "]", ",", "label", ",", "org", "=", "(", "offset_x", ",", "offset_y", ")", ",", "\n", "fontFace", "=", "cv", ".", "FONT_HERSHEY_DUPLEX", ",", "fontScale", "=", "1.6", ",", "\n", "color", "=", "colour", ",", "thickness", "=", "2", ",", "lineType", "=", "cv", ".", "LINE_AA", ")", "\n", "offset_dy", "+=", "80", "\n", "\n", "", "", "", "elif", "'eye'", "in", "suffix", ":", "\n", "                            ", "ow", ",", "oh", "=", "512", ",", "512", "\n", "frames", "=", "[", "cv", ".", "resize", "(", "frame", ",", "(", "ow", ",", "oh", ")", ")", "for", "frame", "in", "frames", "]", "\n", "\n", "# Choose what to draw", "\n", "to_draw", "=", "[", "]", "\n", "last_bit", "=", "suffix", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", "\n", "for", "char", "in", "list", "(", "last_bit", ")", ":", "\n", "                                ", "if", "char", "==", "'y'", ":", "\n", "                                    ", "to_draw", ".", "append", "(", "(", "_g_init", ",", "_all_valid", ",", "[", "0", ",", "180", ",", "180", "]", ")", ")", "\n", "", "elif", "char", "==", "'r'", ":", "\n", "                                    ", "if", "we_have_gt", ":", "\n", "                                        ", "to_draw", ".", "append", "(", "(", "_g_gt", ",", "_gt_validity", ",", "[", "0", ",", "0", ",", "180", "]", ")", ")", "\n", "", "", "elif", "char", "==", "'g'", ":", "\n", "                                    ", "to_draw", ".", "append", "(", "(", "_g_final", ",", "_all_valid", ",", "[", "0", ",", "180", ",", "0", "]", ")", ")", "\n", "", "else", ":", "\n", "                                    ", "raise", "ValueError", "(", "'Invalid thing to draw: %s'", "%", "char", ")", "\n", "\n", "# Draw the rays", "\n", "", "", "for", "g_list", ",", "validity", ",", "colour", "in", "to_draw", ":", "\n", "                                ", "for", "t", ",", "(", "pitch", ",", "yaw", ")", "in", "enumerate", "(", "g_list", ")", ":", "\n", "                                    ", "if", "validity", "[", "t", "]", "==", "0", ":", "\n", "                                        ", "continue", "\n", "", "length", "=", "200.0", "\n", "dx", "=", "-", "length", "*", "np", ".", "cos", "(", "pitch", ")", "*", "np", ".", "sin", "(", "yaw", ")", "\n", "dy", "=", "-", "length", "*", "np", ".", "sin", "(", "pitch", ")", "\n", "hw", ",", "hh", "=", "int", "(", "ow", "/", "2", ")", ",", "int", "(", "oh", "/", "2", ")", "\n", "cv", ".", "arrowedLine", "(", "frames", "[", "t", "]", ",", "(", "hw", ",", "hh", ")", ",", "\n", "tuple", "(", "np", ".", "round", "(", "[", "hw", "+", "dx", ",", "hh", "+", "dy", "]", ")", ".", "astype", "(", "int", ")", ")", ",", "\n", "[", "0", ",", "0", ",", "0", "]", ",", "thickness", "=", "10", ",", "line_type", "=", "cv", ".", "LINE_AA", ",", "\n", "tipLength", "=", "0.2", ")", "\n", "cv", ".", "arrowedLine", "(", "frames", "[", "t", "]", ",", "(", "hw", ",", "hh", ")", ",", "\n", "tuple", "(", "np", ".", "round", "(", "[", "hw", "+", "dx", ",", "hh", "+", "dy", "]", ")", ".", "astype", "(", "int", ")", ")", ",", "\n", "colour", ",", "thickness", "=", "4", ",", "line_type", "=", "cv", ".", "LINE_AA", ",", "\n", "tipLength", "=", "0.2", ")", "\n", "\n", "# Now write video file", "\n", "", "", "", "oh", ",", "ow", ",", "_", "=", "frames", "[", "0", "]", ".", "shape", "\n", "if", "video_handle", "is", "None", ":", "\n", "                            ", "video_handle", "=", "(", "\n", "ffmpeg", "\n", ".", "input", "(", "'pipe:'", ",", "format", "=", "'rawvideo'", ",", "pix_fmt", "=", "'bgr24'", ",", "s", "=", "'%dx%d'", "%", "(", "ow", ",", "oh", ")", ",", "\n", "framerate", "=", "10", ")", "\n", ".", "output", "(", "config", ".", "output_path", ",", "pix_fmt", "=", "'yuv420p'", ",", "r", "=", "10", ",", "loglevel", "=", "'quiet'", ")", "\n", ".", "overwrite_output", "(", ")", "\n", ".", "run_async", "(", "pipe_stdin", "=", "True", ",", "quiet", "=", "True", ")", "\n", ")", "\n", "# print(config.output_path, '---nweufhuh')", "\n", "", "for", "frame", "in", "frames", ":", "\n", "                            ", "video_handle", ".", "stdin", ".", "write", "(", "frame", ".", "astype", "(", "np", ".", "uint8", ")", ".", "tobytes", "(", ")", ")", "\n", "\n", "# We are done now, let's close the output file", "\n", "", "", "", "", "", "", "if", "config", ".", "refine_net_enabled", ":", "# if refine net is used, do visualization, skip this if only eye net is used", "\n", "        ", "if", "not", "config", ".", "mute_visualization", ":", "\n", "            ", "video_handle", ".", "stdin", ".", "close", "(", ")", "\n", "video_handle", ".", "wait", "(", ")", "\n", "print", "(", "'> Wrote %s'", "%", "config", ".", "output_path", ")", "\n", "\n", "", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.src.inference.createDir": [[304, 307], ["os.path.exists", "os.makedirs"], "function", ["None"], ["", "def", "createDir", "(", "dstDir", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "dstDir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "dstDir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.src.eval_codalab_basic.eval_codalab_basic": [[38, 130], ["core.config_default.DefaultConfig", "torch.device", "os.path.isfile", "print", "core.script_init_common", "core.init_dataset", "set", "core.iterator", "os.path.join", "print", "pickle.dump", "print", "models.evec.EVEC().to", "models.evec.EVEC().to", "core.model_setup", "range", "eval_codalab.model_setup.save_subject_memory", "print", "print", "os.path.exists", "os.makedirs", "gzip.open", "pickle.dump", "open", "torch.cuda.is_available", "models.evec.EVEC", "models.evec.EVEC", "next", "print", "set.add", "iter", "numpy.concatenate", "time.strftime", "outputs.values"], "function", ["home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.training.script_init_common", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.eval_codalab.init_dataset", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.eval_codalab.iterator", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.eval_codalab.model_setup", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.evec.EVEC.save_subject_memory"], ["def", "eval_codalab_basic", "(", "output_suffix", ",", "skip_first_round_if_memory_is_ready", "=", "False", ")", ":", "\n", "# Default singleton config object", "\n", "    ", "config", "=", "DefaultConfig", "(", ")", "\n", "\n", "# Set device", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "\n", "# Check memory: If there is no memory stored, this is the online evaluation or first round; Memory will be stored after online evaluation.", "\n", "# Offline evaluation can be performed only when memory has been stored.", "\n", "memory_is_ready", "=", "os", ".", "path", ".", "isfile", "(", "memory_path", ")", "# if there is no first round memory", "\n", "first_round", "=", "not", "memory_is_ready", "\n", "print", "(", "'is first round (online) or not (offline)'", ",", "first_round", ",", "'---jjjeiiif'", ")", "\n", "if", "skip_first_round_if_memory_is_ready", "and", "memory_is_ready", ":", "\n", "        ", "print", "(", "'Memory is ready. Skip first round and do offline evaluation directly.'", ",", "'---jdkjdffjk'", ")", "\n", "return", "\n", "# do change the config_id of this json for setting up a new storage place", "\n", "", "default_model_config", "=", "WORKING_DIR_ROOT", "+", "'/src/configs/'", "+", "json_file_mark", "+", "'.json'", "\n", "eval_codalab", ".", "script_init_common", "(", "default_model_config", ")", "\n", "\n", "# Initialize dataset and dataloader", "\n", "dataset", ",", "dataloader", "=", "eval_codalab", ".", "init_dataset", "(", ")", "\n", "\n", "# # Define and set up model", "\n", "if", "first_round", ":", "\n", "# # ## online model", "\n", "        ", "online_refinement_starts_from", "=", "2000", "# tested by fixed randome history length # 18% of average data length for one subject one camera", "\n", "model", "=", "EVEC", "(", "output_predictions", "=", "True", ",", "online_refinement_starts_from", "=", "online_refinement_starts_from", ")", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "# fixed memory length model (load from existing memory)", "\n", "        ", "input_memory_path", "=", "memory_path", "\n", "model", "=", "EVEC", "(", "output_predictions", "=", "True", ",", "\n", "fixed_history_len", "=", "'full'", ",", "input_memory_path", "=", "input_memory_path", ")", ".", "to", "(", "device", ")", "\n", "\n", "", "if", "config", ".", "resume_from", "!=", "''", ":", "\n", "        ", "model", "=", "eval_codalab", ".", "model_setup", "(", "model", ")", "\n", "\n", "# Do eval_codalab", "\n", "", "processed_so_far", "=", "set", "(", ")", "\n", "outputs_to_write", "=", "{", "}", "\n", "for", "step", ",", "inputs", ",", "outputs", "in", "eval_codalab", ".", "iterator", "(", "model", ",", "dataloader", ")", ":", "\n", "        ", "batch_size", "=", "next", "(", "iter", "(", "outputs", ".", "values", "(", ")", ")", ")", ".", "shape", "[", "0", "]", "\n", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "participant", "=", "inputs", "[", "'participant'", "]", "[", "i", "]", "\n", "subfolder", "=", "inputs", "[", "'subfolder'", "]", "[", "i", "]", "\n", "camera", "=", "inputs", "[", "'camera'", "]", "[", "i", "]", "\n", "\n", "# Ensure that the sub-dicts exist.", "\n", "if", "participant", "not", "in", "outputs_to_write", ":", "\n", "                ", "outputs_to_write", "[", "participant", "]", "=", "{", "}", "\n", "", "if", "subfolder", "not", "in", "outputs_to_write", "[", "participant", "]", ":", "\n", "                ", "outputs_to_write", "[", "participant", "]", "[", "subfolder", "]", "=", "{", "}", "\n", "\n", "# Store back to output structure", "\n", "", "keys_to_store", "=", "[", "\n", "'timestamps'", ",", "\n", "'left_pupil_size'", ",", "\n", "'right_pupil_size'", ",", "\n", "'PoG_px_initial'", ",", "\n", "'PoG_px_final'", ",", "\n", "#'predicted_tracking_validity_final',", "\n", "]", "\n", "sub_dict", "=", "outputs_to_write", "[", "participant", "]", "[", "subfolder", "]", "\n", "if", "camera", "in", "sub_dict", ":", "\n", "                ", "for", "key", "in", "keys_to_store", ":", "\n", "                    ", "sub_dict", "[", "camera", "]", "[", "key", "]", "=", "np", ".", "concatenate", "(", "[", "sub_dict", "[", "camera", "]", "[", "key", "]", ",", "\n", "outputs", "[", "key", "]", "[", "i", ",", ":", "]", "]", ",", "axis", "=", "0", ")", "\n", "", "", "else", ":", "\n", "                ", "sub_dict", "[", "camera", "]", "=", "{", "}", "\n", "for", "key", "in", "keys_to_store", ":", "\n", "                    ", "sub_dict", "[", "camera", "]", "[", "key", "]", "=", "outputs", "[", "key", "]", "[", "i", ",", ":", "]", "\n", "\n", "", "", "sequence_key", "=", "(", "participant", ",", "subfolder", ",", "camera", ")", "\n", "if", "sequence_key", "not", "in", "processed_so_far", ":", "\n", "                ", "print", "(", "'Handling %s/%s/%s'", "%", "sequence_key", ")", "\n", "processed_so_far", ".", "add", "(", "sequence_key", ")", "\n", "\n", "# Write output file", "\n", "", "", "", "if", "first_round", ":", "\n", "        ", "model", ".", "save_subject_memory", "(", "memory_path", ")", "\n", "print", "(", "'model memory saved'", ",", "memory_path", ",", "'---ejfjdsf eval_codalab.py'", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'memory not changed, read only'", ",", "memory_path", ",", "'---vjjeiioj'", ")", "\n", "", "output_fname", "=", "'for_codalab_%s'", "%", "time", ".", "strftime", "(", "'%y%m%d_%H%M%S'", ")", "+", "'_'", "+", "output_suffix", "+", "'.pkl.gz'", "\n", "output_path", "=", "output_dir", "+", "'eval_codalab_'", "+", "config", ".", "config_id", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "output_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "output_path", ")", "\n", "", "final_output_path", "=", "os", ".", "path", ".", "join", "(", "output_path", ",", "output_fname", ")", "\n", "print", "(", "final_output_path", ",", "'---ejfoijijd src/eval_codalab.py'", ")", "\n", "with", "gzip", ".", "open", "(", "final_output_path", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "outputs_to_write", ",", "f", ",", "protocol", "=", "3", ")", "\n", "", "pickle", ".", "dump", "(", "outputs_to_write", ",", "open", "(", "final_output_path", "+", "'.p'", ",", "'wb'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.utils.load_model.load_weights_for_instance": [[35, 72], ["isinstance", "torch.utils.model_zoo.load_url", "model_instance.load_state_dict", "logger.info", "model_instance.load_state_dict", "logger.info", "isinstance", "ValueError"], "function", ["None"], ["def", "load_weights_for_instance", "(", "model_instance", ",", "state_dict", "=", "None", ")", ":", "\n", "# beufhuhdjij utils/load_model.py", "\n", "    ", "from", "models", ".", "eye_net", "import", "EyeNet", "\n", "from", "models", ".", "refine_net", "import", "RefineNet", "\n", "if", "state_dict", "is", "None", ":", "\n", "        ", "if", "isinstance", "(", "model_instance", ",", "EyeNet", ")", ":", "\n", "            ", "model_fname", "=", "'eve_eyenet_'", "\n", "model_fname", "+=", "config", ".", "eye_net_rnn_type", "if", "config", ".", "eye_net_use_rnn", "else", "'static'", "\n", "model_fname", "+=", "'.pt'", "\n", "", "elif", "isinstance", "(", "model_instance", ",", "RefineNet", ")", ":", "\n", "            ", "model_fname", "=", "'eve_refinenet_'", "\n", "model_fname", "+=", "config", ".", "refine_net_rnn_type", "if", "config", ".", "refine_net_use_rnn", "else", "'static'", "\n", "model_fname", "+=", "'_oa'", "if", "config", ".", "refine_net_do_offset_augmentation", "else", "''", "\n", "model_fname", "+=", "'_skip'", "if", "config", ".", "refine_net_use_skip_connections", "else", "''", "\n", "model_fname", "+=", "'.pt'", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Cannot load weights for given model instance: %s'", "%", "\n", "model_instance", ".", "__class__", ")", "\n", "\n", "", "model_url", "=", "model_url_pre", "+", "model_fname", "\n", "\n", "# Load the weights", "\n", "state_dict_from_url", "=", "torch", ".", "utils", ".", "model_zoo", ".", "load_url", "(", "model_url", ",", "map_location", "=", "device", ")", "\n", "\n", "# print(list(state_dict_from_url.keys()), '---jefioji')", "\n", "# state_dict_from_url = torch.load('/samba/room/codespace/pythonWorkingSpace/Bji/outputs/EVE/210114_053532.390cad/checkpoints/0075801.pt/eye_net.pt')", "\n", "# ta = {}", "\n", "# for k, v in state_dict_from_url.items():", "\n", "#     ta[k[8:]] = v", "\n", "# state_dict_from_url = ta", "\n", "\n", "model_instance", ".", "load_state_dict", "(", "state_dict_from_url", ")", "\n", "\n", "logger", ".", "info", "(", "'---weofnjj utils/load_model Loaded model weights from: %s'", "%", "model_url", ")", "\n", "", "else", ":", "\n", "        ", "model_instance", ".", "load_state_dict", "(", "state_dict", ")", "\n", "logger", ".", "info", "(", "'---weofnjj utils/load_model Loaded model weights from specified locations'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.utils.stats.getAllFilenames": [[5, 17], ["os.listdir", "file.endswith", "str", "file.startswith", "str", "os.path.join", "os.path.isdir", "fileList.append", "os.path.join"], "function", ["None"], ["def", "getAllFilenames", "(", "directory", ",", "endsWith", "=", "''", ",", "startsWith", "=", "''", ",", "containsStr", "=", "''", ",", "containsNot", "=", "None", ",", "returnWithFullDir", "=", "False", ",", "dirOnly", "=", "False", ")", ":", "\n", "    ", "''' from Bj utilities '''", "\n", "fileList", "=", "[", "]", "\n", "for", "file", "in", "os", ".", "listdir", "(", "directory", ")", ":", "\n", "        ", "if", "file", ".", "endswith", "(", "str", "(", "endsWith", ")", ")", ":", "\n", "            ", "if", "file", ".", "startswith", "(", "str", "(", "startsWith", ")", ")", ":", "\n", "                ", "if", "containsStr", "in", "file", ":", "\n", "                    ", "ta", "=", "file", "if", "not", "returnWithFullDir", "else", "os", ".", "path", ".", "join", "(", "directory", ",", "file", ")", "\n", "if", "(", "containsNot", "is", "None", ")", "or", "(", "containsNot", "not", "in", "file", ")", ":", "\n", "                        ", "if", "(", "not", "dirOnly", ")", "or", "(", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "directory", ",", "file", ")", ")", ")", ":", "\n", "                            ", "fileList", ".", "append", "(", "ta", ")", "\n", "", "", "", "", "", "", "return", "fileList", "\n", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.utils.stats.getAllSubjectFolder": [[18, 33], ["print", "stats.getAllFilenames", "stats.getAllFilenames", "len", "sample_paths.items"], "function", ["home.repos.pwc.inspect_result.bjj9_EVE_SCPT.utils.stats.getAllFilenames", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.utils.stats.getAllFilenames"], ["", "def", "getAllSubjectFolder", "(", "main_dir", ",", "split", "=", "''", ")", ":", "\n", "    ", "assert", "split", "in", "[", "''", ",", "'val'", ",", "'train'", ",", "'test'", "]", "\n", "# main_dir = 'E:/datasets/eve_dataset'", "\n", "# main_dir = 'E://codespace//pythonWorkingSpace//Bji//outputs//inference_output_refine_net_inference_30Hz'", "\n", "sample_paths", "=", "{", "}", "\n", "validataion_subjects", "=", "[", "]", "\n", "all_split", "=", "[", "'val'", ",", "'train'", ",", "'test'", "]", "if", "split", "==", "''", "else", "[", "split", ",", "]", "\n", "for", "ss", "in", "all_split", ":", "\n", "        ", "validataion_subjects", "=", "validataion_subjects", "+", "getAllFilenames", "(", "main_dir", ",", "startsWith", "=", "ss", ",", "returnWithFullDir", "=", "False", ")", "\n", "", "for", "sub", "in", "validataion_subjects", ":", "\n", "        ", "sub_dir", "=", "main_dir", "+", "'/'", "+", "sub", "\n", "sample_dirs", "=", "getAllFilenames", "(", "sub_dir", ",", "startsWith", "=", "'step'", ",", "containsNot", "=", "'eye_tracker_calibration'", ",", "returnWithFullDir", "=", "True", ",", "dirOnly", "=", "True", ")", "\n", "sample_paths", "[", "sub", "]", "=", "sample_dirs", "\n", "", "print", "(", "'number of samples:'", ",", "[", "(", "k", ",", "len", "(", "v", ")", ")", "for", "k", ",", "v", "in", "sample_paths", ".", "items", "(", ")", "]", ",", "'---refweddd'", ")", "\n", "return", "sample_paths", "\n", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.utils.stats.eulerAnglesToRotationMatrix": [[34, 49], ["numpy.array", "numpy.array", "numpy.array", "numpy.dot", "numpy.dot", "math.cos", "math.sin", "math.cos", "math.cos", "math.sin", "math.cos", "math.cos", "math.sin", "math.cos", "math.sin", "math.sin", "math.sin"], "function", ["None"], ["", "def", "eulerAnglesToRotationMatrix", "(", "theta", ")", ":", "\n", "    ", "R_x", "=", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "math", ".", "cos", "(", "theta", "[", "0", "]", ")", ",", "-", "math", ".", "sin", "(", "theta", "[", "0", "]", ")", "]", ",", "\n", "[", "0", ",", "math", ".", "sin", "(", "theta", "[", "0", "]", ")", ",", "math", ".", "cos", "(", "theta", "[", "0", "]", ")", "]", "\n", "]", ")", "\n", "R_y", "=", "np", ".", "array", "(", "[", "[", "math", ".", "cos", "(", "theta", "[", "1", "]", ")", ",", "0", ",", "math", ".", "sin", "(", "theta", "[", "1", "]", ")", "]", ",", "\n", "[", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "-", "math", ".", "sin", "(", "theta", "[", "1", "]", ")", ",", "0", ",", "math", ".", "cos", "(", "theta", "[", "1", "]", ")", "]", "\n", "]", ")", "\n", "R_z", "=", "np", ".", "array", "(", "[", "[", "math", ".", "cos", "(", "theta", "[", "2", "]", ")", ",", "-", "math", ".", "sin", "(", "theta", "[", "2", "]", ")", ",", "0", "]", ",", "\n", "[", "math", ".", "sin", "(", "theta", "[", "2", "]", ")", ",", "math", ".", "cos", "(", "theta", "[", "2", "]", ")", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", "\n", "]", ")", "\n", "R", "=", "np", ".", "dot", "(", "R_z", ",", "np", ".", "dot", "(", "R_y", ",", "R_x", ")", ")", "\n", "return", "R", "\n", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.utils.stats.isRotationMatrix": [[51, 57], ["numpy.transpose", "numpy.dot", "numpy.identity", "numpy.linalg.norm"], "function", ["None"], ["", "def", "isRotationMatrix", "(", "R", ")", ":", "\n", "    ", "Rt", "=", "np", ".", "transpose", "(", "R", ")", "\n", "shouldBeIdentity", "=", "np", ".", "dot", "(", "Rt", ",", "R", ")", "\n", "I", "=", "np", ".", "identity", "(", "3", ",", "dtype", "=", "R", ".", "dtype", ")", "\n", "n", "=", "np", ".", "linalg", ".", "norm", "(", "I", "-", "shouldBeIdentity", ")", "\n", "return", "n", "<", "1e-6", "\n", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.utils.stats.rotationMatrixToEulerAngles": [[61, 74], ["stats.isRotationMatrix", "math.sqrt", "numpy.array", "math.atan2", "math.atan2", "math.atan2", "math.atan2", "math.atan2"], "function", ["home.repos.pwc.inspect_result.bjj9_EVE_SCPT.utils.stats.isRotationMatrix"], ["", "def", "rotationMatrixToEulerAngles", "(", "R", ")", ":", "\n", "    ", "assert", "(", "isRotationMatrix", "(", "R", ")", ")", "\n", "sy", "=", "math", ".", "sqrt", "(", "R", "[", "0", ",", "0", "]", "*", "R", "[", "0", ",", "0", "]", "+", "R", "[", "1", ",", "0", "]", "*", "R", "[", "1", ",", "0", "]", ")", "\n", "singular", "=", "sy", "<", "1e-6", "\n", "if", "not", "singular", ":", "\n", "        ", "x", "=", "math", ".", "atan2", "(", "R", "[", "2", ",", "1", "]", ",", "R", "[", "2", ",", "2", "]", ")", "\n", "y", "=", "math", ".", "atan2", "(", "-", "R", "[", "2", ",", "0", "]", ",", "sy", ")", "\n", "z", "=", "math", ".", "atan2", "(", "R", "[", "1", ",", "0", "]", ",", "R", "[", "0", ",", "0", "]", ")", "\n", "", "else", ":", "\n", "        ", "x", "=", "math", ".", "atan2", "(", "-", "R", "[", "1", ",", "2", "]", ",", "R", "[", "1", ",", "1", "]", ")", "\n", "y", "=", "math", ".", "atan2", "(", "-", "R", "[", "2", ",", "0", "]", ",", "sy", ")", "\n", "z", "=", "0", "\n", "", "return", "np", ".", "array", "(", "[", "x", ",", "y", ",", "z", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.utils.stats.metric_euc_initXY": [[76, 78], ["stats.metric_euc"], "function", ["home.repos.pwc.inspect_result.bjj9_EVE_SCPT.utils.stats.metric_euc"], ["", "def", "metric_euc_initXY", "(", "D_ta", ",", "to_angle", "=", "False", ")", ":", "\n", "    ", "return", "metric_euc", "(", "D_ta", ",", "(", "'gt_x'", ",", "'gt_y'", ",", "'hat_x_init'", ",", "'hat_y_init'", ")", ",", "to_angle", ")", "\n", "", "def", "metric_euc", "(", "D_ta", ",", "cols_to_compare", ",", "to_angle", "=", "False", ")", ":", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.utils.stats.metric_euc": [[78, 92], ["D_ta.keys", "round", "print", "print", "stats.metric_euc_for_one_subject", "round", "numpy.mean", "errs.items"], "function", ["home.repos.pwc.inspect_result.bjj9_EVE_SCPT.utils.stats.metric_euc_for_one_subject"], ["", "def", "metric_euc", "(", "D_ta", ",", "cols_to_compare", ",", "to_angle", "=", "False", ")", ":", "\n", "    ", "''' example: cols_to_compare = ('gt_x', 'gt_y', 'hat_x_init', 'hat_y_init')'''", "\n", "gt_x", ",", "gt_y", ",", "hat_x", ",", "hat_y", "=", "cols_to_compare", "\n", "errs", "=", "{", "}", "\n", "for", "subject", "in", "D_ta", ".", "keys", "(", ")", ":", "\n", "        ", "eee", "=", "D_ta", "[", "subject", "]", "\n", "err", "=", "metric_euc_for_one_subject", "(", "eee", "[", "gt_x", "]", ",", "eee", "[", "gt_y", "]", ",", "eee", "[", "hat_x", "]", ",", "eee", "[", "hat_y", "]", ")", "\n", "if", "to_angle", ":", "\n", "            ", "err", "/=", "38", "\n", "", "errs", "[", "subject", "]", "=", "round", "(", "err", ",", "4", ")", "\n", "", "avg_err", "=", "round", "(", "np", ".", "mean", "(", "[", "v", "for", "k", ",", "v", "in", "errs", ".", "items", "(", ")", "]", ")", ",", "4", ")", "\n", "print", "(", "'errs for each subject'", ",", "errs", ",", "'---wiefj'", ")", "\n", "print", "(", "'overall err (averaged by subject)'", ",", "avg_err", ",", "'---nejskkk'", ")", "\n", "return", "avg_err", ",", "errs", "\n", "", "def", "metric_euc_for_one_subject", "(", "gt_x", ",", "gt_y", ",", "hat_x", ",", "hat_y", ")", ":", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.utils.stats.metric_euc_for_one_subject": [[92, 96], ["numpy.sqrt", "numpy.mean", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "function", ["None"], ["", "def", "metric_euc_for_one_subject", "(", "gt_x", ",", "gt_y", ",", "hat_x", ",", "hat_y", ")", ":", "\n", "    ", "gt_x", ",", "gt_y", ",", "hat_x", ",", "hat_y", "=", "np", ".", "array", "(", "gt_x", ")", ",", "np", ".", "array", "(", "gt_y", ")", ",", "np", ".", "array", "(", "hat_x", ")", ",", "np", ".", "array", "(", "hat_y", ")", "\n", "euc_error", "=", "np", ".", "sqrt", "(", "(", "hat_x", "-", "gt_x", ")", "**", "2", "+", "(", "hat_y", "-", "gt_y", ")", "**", "2", ")", "\n", "return", "np", ".", "mean", "(", "euc_error", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.utils.heatmap.gaussian_2d": [[31, 38], ["numpy.arange", "numpy.expand_dims", "numpy.exp", "numpy.arange"], "function", ["None"], ["def", "gaussian_2d", "(", "shape", ",", "centre", ",", "sigma", "=", "1.0", ")", ":", "\n", "    ", "\"\"\"Generate heatmap with single 2D gaussian.\"\"\"", "\n", "xs", "=", "np", ".", "arange", "(", "0.5", ",", "shape", "[", "1", "]", "+", "0.5", ",", "step", "=", "1.0", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "ys", "=", "np", ".", "expand_dims", "(", "np", ".", "arange", "(", "0.5", ",", "shape", "[", "0", "]", "+", "0.5", ",", "step", "=", "1.0", ",", "dtype", "=", "np", ".", "float32", ")", ",", "-", "1", ")", "\n", "alpha", "=", "-", "0.5", "/", "(", "sigma", "**", "2", ")", "\n", "heatmap", "=", "np", ".", "exp", "(", "alpha", "*", "(", "(", "xs", "-", "centre", "[", "0", "]", ")", "**", "2", "+", "(", "ys", "-", "centre", "[", "1", "]", ")", "**", "2", ")", ")", "\n", "return", "heatmap", "\n", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.utils.heatmap.onehot_from_values": [[40, 48], ["heatmap.gaussian_2d", "hmap.flatten.flatten", "numpy.clip", "numpy.sum"], "function", ["home.repos.pwc.inspect_result.bjj9_EVE_SCPT.utils.heatmap.gaussian_2d"], ["", "def", "onehot_from_values", "(", "v", ",", "v_min", ",", "v_max", ",", "n_bins", ",", "clipped", "=", "False", ")", ":", "\n", "    ", "if", "clipped", ":", "\n", "        ", "v", "=", "np", ".", "clip", "(", "v", ",", "a_min", "=", "v_min", "+", "1e-6", ",", "a_max", "=", "v_max", "-", "1e-6", ")", "\n", "", "v", "=", "(", "(", "v", "-", "(", "v_min", "+", "1e-6", ")", ")", "/", "(", "v_max", "-", "v_min", ")", ")", "# values in [0, 1]", "\n", "hmap", "=", "gaussian_2d", "(", "[", "n_bins", ",", "n_bins", "]", ",", "v", "*", "n_bins", ",", "sigma", "=", "config", ".", "onehot_sigma", ")", "\n", "hmap", "=", "hmap", ".", "flatten", "(", ")", "\n", "hmap", "*=", "1.0", "/", "np", ".", "sum", "(", "hmap", ")", "\n", "return", "hmap", "\n", "", ""]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.datasources.common.VideoReader.__init__": [[66, 81], ["common.VideoReader.video_path.endswith", "os.path.isfile", "os.path.isfile", "video_path.replace", "common.VideoReader.video_path.endswith", "video_path.replace", "common.VideoReader.video_path.endswith", "video_path.replace", "video_path.replace"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "video_path", ",", "frame_indices", "=", "None", ",", "is_async", "=", "True", ",", "output_size", "=", "None", ")", ":", "\n", "        ", "self", ".", "is_async", "=", "is_async", "\n", "self", ".", "video_path", "=", "video_path", "\n", "self", ".", "output_size", "=", "output_size", "\n", "self", ".", "frame_indices", "=", "frame_indices", "\n", "if", "self", ".", "video_path", ".", "endswith", "(", "'_eyes.mp4'", ")", ":", "\n", "            ", "self", ".", "timestamps_path", "=", "video_path", ".", "replace", "(", "'_eyes.mp4'", ",", "'.timestamps.txt'", ")", "\n", "", "elif", "self", ".", "video_path", ".", "endswith", "(", "'_face.mp4'", ")", ":", "\n", "            ", "self", ".", "timestamps_path", "=", "video_path", ".", "replace", "(", "'_eyes.mp4'", ",", "'.timestamps.txt'", ")", "\n", "", "elif", "self", ".", "video_path", ".", "endswith", "(", "'.128x72.mp4'", ")", ":", "\n", "            ", "self", ".", "timestamps_path", "=", "video_path", ".", "replace", "(", "'.128x72.mp4'", ",", "'.timestamps.txt'", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "timestamps_path", "=", "video_path", ".", "replace", "(", "'.mp4'", ",", "'.timestamps.txt'", ")", "\n", "", "assert", "(", "os", ".", "path", ".", "isfile", "(", "self", ".", "video_path", ")", ")", "\n", "assert", "(", "os", ".", "path", ".", "isfile", "(", "self", ".", "timestamps_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.datasources.common.VideoReader.get_frames": [[82, 107], ["common.VideoReader.preparations", "common.VideoReader.get_params", "ffmpeg.input().output().run", "numpy.frombuffer().reshape", "ffmpeg.input().output", "numpy.frombuffer", "ffmpeg.input"], "methods", ["home.repos.pwc.inspect_result.bjj9_EVE_SCPT.datasources.common.VideoReader.preparations", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.datasources.common.VideoReader.get_params"], ["", "def", "get_frames", "(", "self", ")", ":", "\n", "# print('common.VideoReader.get_frames() procede 0', '---biuwfheh')", "\n", "        ", "assert", "(", "self", ".", "is_async", "is", "False", ")", "\n", "\n", "# Get frames", "\n", "self", ".", "preparations", "(", ")", "\n", "input_params", ",", "output_params", "=", "self", ".", "get_params", "(", ")", "\n", "# print('common.VideoReader.get_frames() procede 1', '---oijuhg')", "\n", "buffer", ",", "_", "=", "(", "\n", "ffmpeg", ".", "input", "(", "self", ".", "video_path", ",", "**", "input_params", ")", "\n", ".", "output", "(", "'pipe:'", ",", "format", "=", "'rawvideo'", ",", "pix_fmt", "=", "'rgb24'", ",", "loglevel", "=", "\"quiet\"", ",", "\n", "**", "output_params", ")", "\n", ".", "run", "(", "capture_stdout", "=", "True", ",", "quiet", "=", "True", ")", "\n", ")", "\n", "# print('common.VideoReader.get_frames() procede 2', '---btrgwerw')", "\n", "frames", "=", "np", ".", "frombuffer", "(", "buffer", ",", "np", ".", "uint8", ")", ".", "reshape", "(", "-", "1", ",", "self", ".", "height", ",", "self", ".", "width", ",", "3", ")", "\n", "\n", "# print('common.VideoReader.get_frames() procede 3', '---kjhgfd')", "\n", "# Get timestamps", "\n", "timestamps", "=", "self", ".", "timestamps", "\n", "if", "self", ".", "frame_indices", "is", "not", "None", ":", "\n", "            ", "timestamps", "=", "self", ".", "timestamps", "[", "self", ".", "frame_indices", "]", "\n", "# print('common.VideoReader.get_frames() procede 4', '---verewrw')", "\n", "\n", "", "return", "timestamps", ",", "frames", "\n", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.datasources.common.VideoReader.preparations": [[108, 128], ["ffmpeg.probe", "next", "numpy.loadtxt().astype", "numpy.loadtxt"], "methods", ["None"], ["", "def", "preparations", "(", "self", ")", ":", "\n", "# Read video file tags", "\n", "# video_path_bj = '\\\\\\\\'.join(self.video_path.split('/'))", "\n", "# print(self.video_path, str(video_path_bj), os.path.exists(self.video_path), os.path.exists(video_path_bj), '---mijijijef')", "\n", "# # probe = ffmpeg.probe(video_path_bj)", "\n", "# probe = ffmpeg.probe('C:/Users/hp/Desktop/basler_eyes.mp4')", "\n", "# print('src.datasources.common.VideoReader.preparations() procede 0', self.video_path, '---ewrwerwe')", "\n", "        ", "probe", "=", "ffmpeg", ".", "probe", "(", "self", ".", "video_path", ")", "# conda install ffmpeg if this does not work", "\n", "# print('src.datasources.common.VideoReader.preparations() procede 1', '---qfqwef')", "\n", "video_stream", "=", "next", "(", "(", "stream", "for", "stream", "in", "probe", "[", "'streams'", "]", "\n", "if", "stream", "[", "'codec_type'", "]", "==", "'video'", ")", ",", "None", ")", "\n", "self", ".", "width", "=", "video_stream", "[", "'width'", "]", "\n", "self", ".", "height", "=", "video_stream", "[", "'height'", "]", "\n", "assert", "self", ".", "height", "!=", "0", "\n", "assert", "self", ".", "width", "!=", "0", "\n", "if", "self", ".", "output_size", "is", "not", "None", ":", "\n", "            ", "self", ".", "width", ",", "self", ".", "height", "=", "self", ".", "output_size", "\n", "# print('src.datasources.common.VideoReader.preparations() procede 2', '---dddddwef')", "\n", "# Read timestamps file", "\n", "", "self", ".", "timestamps", "=", "np", ".", "loadtxt", "(", "self", ".", "timestamps_path", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "# print('src.datasources.common.VideoReader.preparations() procede 3', '---xxxxxfef')", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.datasources.common.VideoReader.__enter__": [[130, 134], ["common.VideoReader.preparations"], "methods", ["home.repos.pwc.inspect_result.bjj9_EVE_SCPT.datasources.common.VideoReader.preparations"], ["", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "assert", "(", "self", ".", "is_async", ")", "\n", "self", ".", "preparations", "(", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.datasources.common.VideoReader.get_params": [[135, 166], ["len"], "methods", ["None"], ["", "def", "get_params", "(", "self", ")", ":", "\n", "# Input params (specifically, selection of decoder)", "\n", "        ", "input_params", "=", "{", "}", "\n", "if", "config", ".", "video_decoder_codec", "==", "'nvdec'", ":", "\n", "            ", "input_params", "=", "{", "\n", "'hwaccel'", ":", "'nvdec'", ",", "\n", "'vcodec'", ":", "'h264_cuvid'", ",", "\n", "'c:v'", ":", "'h264_cuvid'", ",", "\n", "}", "\n", "", "else", ":", "\n", "            ", "assert", "(", "config", ".", "video_decoder_codec", "==", "'libx264'", ")", "\n", "", "input_params", "[", "'vsync'", "]", "=", "0", "\n", "\n", "# Set output params (resize frame here)", "\n", "output_params", "=", "{", "}", "\n", "if", "self", ".", "frame_indices", "is", "not", "None", ":", "\n", "# Index picking for range [start_index, end_index)", "\n", "            ", "assert", "(", "len", "(", "self", ".", "frame_indices", ")", ">", "1", ")", "\n", "cmd", "=", "'select=\\'%s\\''", "%", "'+'", ".", "join", "(", "[", "\n", "(", "'eq(n,%d)'", "%", "index", ")", "\n", "for", "index", "in", "self", ".", "frame_indices", "\n", "]", ")", "\n", "output_params", "[", "'vf'", "]", "=", "(", "output_params", "[", "'vf'", "]", "+", "','", "+", "cmd", "\n", "if", "'vf'", "in", "output_params", "else", "cmd", ")", "\n", "", "if", "self", ".", "output_size", "is", "not", "None", ":", "\n", "            ", "ow", ",", "oh", "=", "self", ".", "output_size", "\n", "cmd", "=", "'scale=%d:%d'", "%", "(", "ow", ",", "oh", ")", "\n", "output_params", "[", "'vf'", "]", "=", "(", "output_params", "[", "'vf'", "]", "+", "','", "+", "cmd", "\n", "if", "'vf'", "in", "output_params", "else", "cmd", ")", "\n", "\n", "", "return", "input_params", ",", "output_params", "\n", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.datasources.common.VideoReader.__iter__": [[167, 180], ["common.VideoReader.get_params", "ffmpeg.input().output().run_async", "ffmpeg.input().output", "ffmpeg.input"], "methods", ["home.repos.pwc.inspect_result.bjj9_EVE_SCPT.datasources.common.VideoReader.get_params"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "assert", "(", "self", ".", "is_async", ")", "\n", "input_params", ",", "output_params", "=", "self", ".", "get_params", "(", ")", "\n", "\n", "# Make the actual call", "\n", "self", ".", "ffmpeg_call", "=", "(", "\n", "ffmpeg", "\n", ".", "input", "(", "self", ".", "video_path", ",", "**", "input_params", ")", "\n", ".", "output", "(", "'pipe:'", ",", "format", "=", "'rawvideo'", ",", "pix_fmt", "=", "'bgr24'", ",", "loglevel", "=", "\"quiet\"", ",", "**", "output_params", ")", "\n", ".", "run_async", "(", "pipe_stdout", "=", "True", ")", "\n", ")", "\n", "self", ".", "index", "=", "self", ".", "start_index", "if", "self", ".", "start_index", "is", "not", "None", "else", "0", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.datasources.common.VideoReader.__next__": [[181, 193], ["common.VideoReader.ffmpeg_call.stdout.read", "len", "numpy.frombuffer().reshape", "numpy.frombuffer"], "methods", ["None"], ["", "def", "__next__", "(", "self", ")", ":", "\n", "        ", "assert", "(", "self", ".", "is_async", ")", "\n", "in_bytes", "=", "self", ".", "ffmpeg_call", ".", "stdout", ".", "read", "(", "self", ".", "height", "*", "self", ".", "width", "*", "3", ")", "\n", "if", "not", "in_bytes", ":", "\n", "            ", "raise", "StopIteration", "\n", "", "if", "self", ".", "index", ">=", "len", "(", "self", ".", "timestamps", ")", ":", "\n", "            ", "raise", "StopIteration", "\n", "", "current_timestamp", "=", "self", ".", "timestamps", "[", "self", ".", "index", "]", "\n", "self", ".", "index", "+=", "1", "\n", "return", "(", "\n", "current_timestamp", ",", "\n", "np", ".", "frombuffer", "(", "in_bytes", ",", "dtype", "=", "np", ".", "uint8", ")", ".", "reshape", "(", "self", ".", "height", ",", "self", ".", "width", ",", "3", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.datasources.common.VideoReader.__exit__": [[195, 199], ["common.VideoReader.ffmpeg_call.stdout.close", "common.VideoReader.ffmpeg_call.wait"], "methods", ["None"], ["", "def", "__exit__", "(", "self", ",", "type", ",", "value", ",", "traceback", ")", ":", "\n", "        ", "if", "self", ".", "is_async", ":", "\n", "            ", "self", ".", "ffmpeg_call", ".", "stdout", ".", "close", "(", ")", "\n", "self", ".", "ffmpeg_call", ".", "wait", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.datasources.common.stimulus_type_from_folder_name": [[55, 62], ["folder_name.split", "ValueError"], "function", ["None"], ["def", "stimulus_type_from_folder_name", "(", "folder_name", ")", ":", "\n", "    ", "parts", "=", "folder_name", ".", "split", "(", "'_'", ")", "\n", "if", "parts", "[", "1", "]", "in", "(", "'image'", ",", "'video'", ",", "'wikipedia'", ")", ":", "\n", "        ", "return", "parts", "[", "1", "]", "\n", "", "elif", "parts", "[", "1", "]", "==", "'eye'", ":", "\n", "        ", "return", "'points'", "\n", "", "raise", "ValueError", "(", "'Given folder name unexpected: %s'", "%", "folder_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.datasources.eve_sequences.EVESequencesBase.__init__": [[57, 102], ["eve_sequences.EVESequencesBase.select_sequences", "logger.info", "len", "os.path.isfile", "eve_sequences.EVESequencesBase.build_segmentation_cache", "os.path.isfile", "open", "pickle.load"], "methods", ["home.repos.pwc.inspect_result.bjj9_EVE_SCPT.datasources.eve_sequences.EVESequencesBase.select_sequences", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.datasources.eve_sequences.EVESequencesBase.build_segmentation_cache"], ["    ", "def", "__init__", "(", "self", ",", "dataset_path", ":", "str", ",", "\n", "participants_to_use", ":", "List", "[", "str", "]", "=", "None", ",", "\n", "cameras_to_use", ":", "List", "[", "str", "]", "=", "None", ",", "\n", "types_of_stimuli", ":", "List", "[", "str", "]", "=", "None", ",", "\n", "stimulus_name_includes", ":", "str", "=", "''", ",", "\n", "live_validation", ":", "bool", "=", "False", ",", "\n", "is_final_test", ":", "bool", "=", "False", ")", ":", "\n", "        ", "if", "types_of_stimuli", "is", "None", ":", "\n", "            ", "types_of_stimuli", "=", "[", "'image'", ",", "'video'", ",", "'wikipedia'", "]", "\n", "", "if", "cameras_to_use", "is", "None", ":", "\n", "            ", "cameras_to_use", "=", "[", "'basler'", ",", "'webcam_l'", ",", "'webcam_c'", ",", "'webcam_r'", "]", "\n", "", "assert", "(", "'points'", "not", "in", "types_of_stimuli", ")", "# NOTE: deal with this in another way", "\n", "\n", "self", ".", "path", "=", "dataset_path", "\n", "self", ".", "types_of_stimuli", "=", "types_of_stimuli", "\n", "self", ".", "stimulus_name_includes", "=", "stimulus_name_includes", "\n", "self", ".", "participants_to_use", "=", "participants_to_use", "\n", "self", ".", "cameras_to_use", "=", "cameras_to_use", "\n", "self", ".", "live_validation", "=", "live_validation", "\n", "self", ".", "is_final_test", "=", "is_final_test", "\n", "self", ".", "validation_data_cache", "=", "{", "}", "\n", "\n", "# Some sanity checks", "\n", "assert", "(", "len", "(", "self", ".", "participants_to_use", ")", ">", "0", ")", "\n", "assert", "(", "30", ">=", "config", ".", "assumed_frame_rate", ")", "\n", "assert", "(", "30", "%", "config", ".", "assumed_frame_rate", "==", "0", ")", "\n", "\n", "# Load or calculate sequence segmentations (start/end indices)", "\n", "global", "cache_pkl_path", ",", "sequence_segmentations", "\n", "cache_pkl_path", "=", "(", "\n", "'./segmentation_cache/%dHz_seqlen%d.pkl'", "%", "(", "\n", "config", ".", "assumed_frame_rate", ",", "config", ".", "max_sequence_len", ",", "\n", ")", "\n", ")", "\n", "if", "sequence_segmentations", "is", "None", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "isfile", "(", "cache_pkl_path", ")", ":", "\n", "                ", "self", ".", "build_segmentation_cache", "(", ")", "\n", "assert", "(", "os", ".", "path", ".", "isfile", "(", "cache_pkl_path", ")", ")", "\n", "\n", "", "with", "open", "(", "cache_pkl_path", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "sequence_segmentations", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "# Register entries", "\n", "", "", "self", ".", "select_sequences", "(", ")", "\n", "logger", ".", "info", "(", "'Initialized dataset class for: %s'", "%", "self", ".", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.datasources.eve_sequences.EVESequencesBase.build_segmentation_cache": [[103, 160], ["sorted", "logger.info", "os.path.isdir", "sorted", "open", "pickle.dump", "os.listdir", "os.path.isdir", "numpy.loadtxt", "len", "int.is_integer", "int", "int", "os.listdir", "min", "list", "current_outputs.append", "len", "os.path.isdir", "[].startswith", "range", "os.path.join", "p.split"], "methods", ["None"], ["", "def", "build_segmentation_cache", "(", "self", ")", ":", "\n", "        ", "\"\"\"Create support data structure for knowing how to segment (cut up) time sequences.\"\"\"", "\n", "all_folders", "=", "sorted", "(", "[", "d", "for", "d", "in", "os", ".", "listdir", "(", "self", ".", "path", ")", "if", "os", ".", "path", ".", "isdir", "(", "self", ".", "path", "+", "'/'", "+", "d", ")", "]", ")", "\n", "output_to_cache", "=", "{", "}", "\n", "for", "folder_name", "in", "all_folders", ":", "\n", "            ", "participant_path", "=", "'%s/%s'", "%", "(", "self", ".", "path", ",", "folder_name", ")", "\n", "assert", "(", "os", ".", "path", ".", "isdir", "(", "participant_path", ")", ")", "\n", "output_to_cache", "[", "folder_name", "]", "=", "{", "}", "\n", "\n", "subfolders", "=", "sorted", "(", "[", "\n", "p", "for", "p", "in", "os", ".", "listdir", "(", "participant_path", ")", "\n", "if", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "participant_path", ",", "p", ")", ")", "\n", "and", "p", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "startswith", "(", "'step'", ")", "\n", "and", "'eye_tracker_calibration'", "not", "in", "p", "\n", "]", ")", "\n", "for", "subfolder", "in", "subfolders", ":", "\n", "                ", "subfolder_path", "=", "'%s/%s'", "%", "(", "participant_path", ",", "subfolder", ")", "\n", "output_to_cache", "[", "folder_name", "]", "[", "subfolder", "]", "=", "{", "}", "\n", "\n", "# NOTE: We assume that the videos are synchronized and have the same length in time.", "\n", "#       This should be the case for the publicly released EVE dataset.", "\n", "for", "source", "in", "(", "'screen'", ",", "'basler'", ",", "'webcam_l'", ",", "'webcam_c'", ",", "'webcam_r'", ")", ":", "\n", "                    ", "current_outputs", "=", "[", "]", "\n", "source_path_pre", "=", "'%s/%s'", "%", "(", "subfolder_path", ",", "source", ")", "\n", "available_indices", "=", "np", ".", "loadtxt", "(", "'%s.timestamps.txt'", "%", "source_path_pre", ")", "\n", "num_available_indices", "=", "len", "(", "available_indices", ")", "\n", "# print('building video segmentation cache for', source_path_pre, 'available frames:', num_available_indices, '---huiefij')", "\n", "\n", "# Determine desired length and skips", "\n", "fps", "=", "source_to_fps", "[", "source", "]", "\n", "target_len_in_s", "=", "config", ".", "max_sequence_len", "/", "config", ".", "assumed_frame_rate", "\n", "num_original_indices_in_sequence", "=", "fps", "*", "target_len_in_s", "\n", "assert", "(", "num_original_indices_in_sequence", ".", "is_integer", "(", ")", ")", "\n", "num_original_indices_in_sequence", "=", "int", "(", "num_original_indices_in_sequence", ")", "\n", "index_interval", "=", "int", "(", "fps", "/", "config", ".", "assumed_frame_rate", ")", "\n", "start_index", "=", "0", "\n", "while", "start_index", "<", "num_available_indices", ":", "\n", "                        ", "end_index", "=", "min", "(", "\n", "start_index", "+", "num_original_indices_in_sequence", ",", "\n", "num_available_indices", "\n", ")", "\n", "picked_indices", "=", "list", "(", "range", "(", "start_index", ",", "end_index", ",", "index_interval", ")", ")", "\n", "current_outputs", ".", "append", "(", "picked_indices", ")", "\n", "\n", "# Move along sequence", "\n", "start_index", "+=", "num_original_indices_in_sequence", "\n", "\n", "# Store back indices", "\n", "", "if", "len", "(", "current_outputs", ")", ">", "0", ":", "\n", "                        ", "output_to_cache", "[", "folder_name", "]", "[", "subfolder", "]", "[", "source", "]", "=", "current_outputs", "\n", "# print('%s: %d' % (source_path_pre, len(current_outputs)))", "\n", "\n", "# Do the caching", "\n", "", "", "", "", "with", "open", "(", "cache_pkl_path", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "output_to_cache", ",", "f", ")", "\n", "\n", "", "logger", ".", "info", "(", "'> Stored indices of sequences to: %s'", "%", "cache_pkl_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.datasources.eve_sequences.EVESequencesBase.select_sequences": [[161, 192], ["sequence_segmentations.items", "eve_sequences.EVESequencesBase.rearrange_all_fubfolders", "participant_data.items", "common.stimulus_type_from_folder_name", "stimulus_segments.items", "len", "enumerate", "eve_sequences.EVESequencesBase.all_subfolders.append"], "methods", ["home.repos.pwc.inspect_result.bjj9_EVE_SCPT.datasources.eve_sequences.EVESequencesBase.rearrange_all_fubfolders", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.datasources.common.stimulus_type_from_folder_name"], ["", "def", "select_sequences", "(", "self", ")", ":", "\n", "        ", "\"\"\"Select sequences (start/end indices) for the selected participants/cameras/stimuli.\"\"\"", "\n", "self", ".", "all_subfolders", "=", "[", "]", "\n", "for", "participant_name", ",", "participant_data", "in", "sequence_segmentations", ".", "items", "(", ")", ":", "\n", "            ", "if", "participant_name", "not", "in", "self", ".", "participants_to_use", ":", "\n", "                ", "continue", "\n", "#if participant_name not in ['val02', ]: continue", "\n", "\n", "", "for", "stimulus_name", ",", "stimulus_segments", "in", "participant_data", ".", "items", "(", ")", ":", "\n", "                ", "current_stimulus_type", "=", "stimulus_type_from_folder_name", "(", "stimulus_name", ")", "\n", "if", "current_stimulus_type", "not", "in", "self", ".", "types_of_stimuli", ":", "\n", "                    ", "continue", "\n", "", "if", "len", "(", "self", ".", "stimulus_name_includes", ")", ">", "0", ":", "\n", "                    ", "if", "self", ".", "stimulus_name_includes", "not", "in", "stimulus_name", ":", "\n", "                        ", "continue", "\n", "\n", "", "", "for", "camera", ",", "all_indices", "in", "stimulus_segments", ".", "items", "(", ")", ":", "\n", "                    ", "if", "camera", "not", "in", "self", ".", "cameras_to_use", ":", "\n", "                        ", "continue", "\n", "\n", "", "for", "i", ",", "indices", "in", "enumerate", "(", "all_indices", ")", ":", "\n", "                        ", "self", ".", "all_subfolders", ".", "append", "(", "{", "\n", "'camera_name'", ":", "camera", ",", "\n", "'participant'", ":", "participant_name", ",", "\n", "'subfolder'", ":", "stimulus_name", ",", "\n", "'partial_path'", ":", "'%s/%s'", "%", "(", "participant_name", ",", "stimulus_name", ")", ",", "\n", "'full_path'", ":", "'%s/%s/%s'", "%", "(", "self", ".", "path", ",", "participant_name", ",", "stimulus_name", ")", ",", "\n", "'indices'", ":", "indices", ",", "\n", "'screen_indices'", ":", "stimulus_segments", "[", "'screen'", "]", "[", "i", "]", ",", "\n", "}", ")", "\n", "", "", "", "", "self", ".", "rearrange_all_fubfolders", "(", ")", "# so that the dataloader will present videos in subject+camera continuously", "\n", "#print(self.all_subfolders[:100])", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.datasources.eve_sequences.EVESequencesBase.rearrange_all_fubfolders": [[195, 197], ["sorted"], "methods", ["None"], ["", "def", "rearrange_all_fubfolders", "(", "self", ")", ":", "\n", "        ", "self", ".", "all_subfolders", "=", "sorted", "(", "self", ".", "all_subfolders", ",", "key", "=", "lambda", "x", ":", "(", "x", "[", "'participant'", "]", ",", "x", "[", "'camera_name'", "]", ",", "x", "[", "'subfolder'", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.datasources.eve_sequences.EVESequencesBase.__len__": [[198, 200], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "all_subfolders", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.datasources.eve_sequences.EVESequencesBase.preprocess_frames": [[201, 209], ["numpy.transpose", "frames.astype.astype.astype"], "methods", ["None"], ["", "def", "preprocess_frames", "(", "self", ",", "frames", ")", ":", "\n", "# Expected input:  N x H x W x C", "\n", "# Expected output: N x C x H x W", "\n", "        ", "frames", "=", "np", ".", "transpose", "(", "frames", ",", "[", "0", ",", "3", ",", "1", ",", "2", "]", ")", "\n", "frames", "=", "frames", ".", "astype", "(", "np", ".", "float32", ")", "\n", "frames", "*=", "2.0", "/", "255.0", "\n", "frames", "-=", "1.0", "\n", "return", "frames", "\n", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.datasources.eve_sequences.EVESequencesBase.preprocess_screen_frames": [[210, 217], ["numpy.transpose", "frames.astype.astype.astype"], "methods", ["None"], ["", "def", "preprocess_screen_frames", "(", "self", ",", "frames", ")", ":", "\n", "# Expected input:  N x H x W x C", "\n", "# Expected output: N x C x H x W", "\n", "        ", "frames", "=", "np", ".", "transpose", "(", "frames", ",", "[", "0", ",", "3", ",", "1", ",", "2", "]", ")", "\n", "frames", "=", "frames", ".", "astype", "(", "np", ".", "float32", ")", "\n", "frames", "*=", "1.0", "/", "255.0", "\n", "return", "frames", "\n", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.datasources.eve_sequences.EVESequencesBase.load_all_from_source": [[220, 347], ["numpy.asarray", "subentry.items", "path.replace", "pickle.load", "numpy.stack", "common.VideoReader().get_frames", "common.VideoReader().get_frames", "eve_sequences.EVESequencesBase.preprocess_screen_frames", "eve_sequences.EVESequencesBase.preprocess_frames", "open", "h5py.File", "hdf.items", "len", "common.VideoReader().get_frames", "isinstance", "common.VideoReader", "common.VideoReader", "numpy.pad", "numpy.copy", "numpy.copy", "numpy.repeat", "numpy.isnan", "numpy.isnan", "print", "print", "print", "cv2.Rodrigues", "ValueError", "common.VideoReader", "numpy.reshape", "numpy.sum", "numpy.sum", "numpy.isnan", "torch.isnan", "eve_sequences.EVESequencesBase.load_all_from_source.mask_nan_one_row"], "methods", ["home.repos.pwc.inspect_result.bjj9_EVE_SCPT.datasources.common.VideoReader.get_frames", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.datasources.common.VideoReader.get_frames", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.datasources.eve_sequences.EVESequencesBase.preprocess_screen_frames", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.datasources.eve_sequences.EVESequencesBase.preprocess_frames", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.datasources.common.VideoReader.get_frames"], ["def", "load_all_from_source", "(", "self", ",", "path", ",", "source", ",", "selected_indices", ")", ":", "\n", "# print('src.datasources.eve_sequences.load_all_from_source() procedes 1', '---ejfoijdij')", "\n", "        ", "assert", "(", "source", "in", "(", "'basler'", ",", "'webcam_l'", ",", "'webcam_c'", ",", "'webcam_r'", ",", "'screen'", ")", ")", "\n", "# read jiugong weights", "\n", "if", "config", ".", "jiugong_enabled", ":", "\n", "            ", "storage_jiugong_weights_path", "=", "path", ".", "replace", "(", "'datasets'", ",", "'storage'", ")", "\n", "D_path_to_store", "=", "pickle", ".", "load", "(", "open", "(", "storage_jiugong_weights_path", "+", "'/jiugong_weights'", ",", "'rb'", ")", ")", "\n", "# Read HDF", "\n", "", "subentry", "=", "{", "}", "# to output", "\n", "if", "source", "!=", "'screen'", ":", "\n", "            ", "with", "h5py", ".", "File", "(", "'%s/%s.h5'", "%", "(", "path", ",", "source", ")", ",", "'r'", ")", "as", "hdf", ":", "\n", "# print('hdf items', (path, source), list(hdf.keys()), hdf['left_PoG_tobii'], '---iejfiiii')", "\n", "                ", "if", "config", ".", "jiugong_enabled", ":", "\n", "                    ", "left_jiugong_weight_whole_video", "=", "D_path_to_store", "[", "source", "]", "[", "'left_jiugong_weight_normalized_whole_video'", "]", "\n", "right_jiugong_weight_whole_video", "=", "D_path_to_store", "[", "source", "]", "[", "'right_jiugong_weight_normalized_whole_video'", "]", "\n", "# print(right_PoG_tobii_whole_video, left_PoG_tobii_whole_video.shape, left_jiugong_weight_whole_video.shape,  average_jiugong_weight_whole_video.shape, '---nbiejfij')", "\n", "", "for", "k1", ",", "v1", "in", "hdf", ".", "items", "(", ")", ":", "\n", "                    ", "if", "isinstance", "(", "v1", ",", "h5py", ".", "Group", ")", ":", "\n", "                        ", "subentry", "[", "k1", "]", "=", "np", ".", "copy", "(", "v1", "[", "'data'", "]", "[", "selected_indices", "]", ")", "\n", "subentry", "[", "k1", "+", "'_validity'", "]", "=", "np", ".", "copy", "(", "v1", "[", "'validity'", "]", "[", "selected_indices", "]", ")", "\n", "# print('retreive by h5py', k1, v1, subentry[k1], subentry[k1].shape, '---ehfwjidef')", "\n", "", "else", ":", "\n", "# print('retreive by numpy', k1, v1, '---eqwrwreer')", "\n", "                        ", "shape", "=", "v1", ".", "shape", "\n", "subentry", "[", "k1", "]", "=", "np", ".", "repeat", "(", "np", ".", "reshape", "(", "v1", ",", "(", "1", ",", "*", "shape", ")", ")", ",", "\n", "repeats", "=", "config", ".", "max_sequence_len", ",", "axis", "=", "0", ")", "\n", "", "", "num_selected", "=", "len", "(", "selected_indices", ")", "\n", "\n", "\n", "# mask_nan = lambda arr: arr if not np.isnan(np.sum(arr)) else np.ones(len(arr))", "\n", "if", "config", ".", "jiugong_enabled", ":", "\n", "                    ", "subentry", "[", "'left_jiugong_weight_normalized'", "]", "=", "left_jiugong_weight_whole_video", "[", "selected_indices", "]", "\n", "subentry", "[", "'right_jiugong_weight_normalized'", "]", "=", "right_jiugong_weight_whole_video", "[", "selected_indices", "]", "\n", "\n", "if", "np", ".", "isnan", "(", "np", ".", "sum", "(", "subentry", "[", "'left_jiugong_weight_normalized'", "]", ")", ")", "or", "np", ".", "isnan", "(", "np", ".", "sum", "(", "subentry", "[", "'left_jiugong_weight_normalized'", "]", ")", ")", ":", "\n", "                        ", "print", "(", "'if sum() works'", ",", "np", ".", "isnan", "(", "sum", "(", "subentry", "[", "'left_jiugong_weight_normalized'", "]", ")", ")", ",", "'---nvwfjei eve_sequences.py'", ")", "\n", "print", "(", "subentry", "[", "'left_jiugong_weight_normalized'", "]", ",", "subentry", "[", "'right_jiugong_weight_normalized'", "]", ",", "'--neijifd eve_sequences.py'", ")", "\n", "\n", "def", "mask_nan_one_row", "(", "tsr", ")", ":", "\n", "                            ", "xx", "=", "tsr", "\n", "if", "torch", ".", "isnan", "(", "torch", ".", "sum", "(", "xx", ")", ")", ":", "\n", "                                ", "xx", "=", "torch", ".", "ones", "(", "len", "(", "xx", ")", ")", "\n", "", "return", "xx", "\n", "", "print", "(", "mask_nan_one_row", "(", "subentry", "[", "'left_jiugong_weight_normalized'", "]", ")", ",", "mask_nan_one_row", "(", "subentry", "[", "'right_jiugong_weight_normalized'", "]", ")", ",", "'--befeffedf eve_sequences.py'", ")", "\n", "\n", "# Compute rotation matrices from rvec values", "\n", "", "", "", "subentry", "[", "'head_R'", "]", "=", "np", ".", "stack", "(", "[", "cv", ".", "Rodrigues", "(", "rvec", ")", "[", "0", "]", "for", "rvec", "in", "subentry", "[", "'head_rvec'", "]", "]", ")", "\n", "\n", "# print('load_all_from_source() procedes 2', '---mytred')", "\n", "", "if", "config", ".", "load_full_frame_for_visualization", "and", "source", "==", "'screen'", ":", "\n", "            ", "_", ",", "full_frames", "=", "VideoReader", "(", "path", "+", "'/'", "+", "source", "+", "'.mp4'", ",", "\n", "frame_indices", "=", "selected_indices", ",", "\n", "is_async", "=", "False", ")", ".", "get_frames", "(", ")", "\n", "subentry", "[", "'full_frame'", "]", "=", "full_frames", "\n", "\n", "# print('load_all_from_source() procedes 3', '---refgtg')", "\n", "# Get frames", "\n", "", "video_path", "=", "'%s/%s'", "%", "(", "path", ",", "source", ")", "\n", "\n", "# print('video_path', video_path, '---neijfijf eve_sequences.py')", "\n", "\n", "output_size", "=", "None", "\n", "if", "source", "==", "'screen'", ":", "\n", "            ", "video_path", "+=", "'.128x72.mp4'", "\n", "output_size", "=", "config", ".", "screen_size", "\n", "", "else", ":", "\n", "            ", "if", "config", ".", "camera_frame_type", "==", "'full'", ":", "\n", "                ", "video_path", "+=", "'.mp4'", "\n", "", "elif", "config", ".", "camera_frame_type", "==", "'face'", ":", "\n", "                ", "video_path", "+=", "'_face.mp4'", "\n", "output_size", "=", "(", "config", ".", "face_size", "[", "0", "]", ",", "config", ".", "face_size", "[", "1", "]", ")", "\n", "", "elif", "config", ".", "camera_frame_type", "==", "'eyes'", ":", "\n", "                ", "video_path", "+=", "'_eyes.mp4'", "\n", "output_size", "=", "(", "2", "*", "config", ".", "eyes_size", "[", "0", "]", ",", "config", ".", "eyes_size", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "'Unknown camera frame type: %s'", "%", "config", ".", "camera_frame_type", ")", "\n", "\n", "\n", "# print('load_all_from_source() procedes 4', video_path, output_size, config.camera_frame_type, self.is_final_test, '---bgrgeret')", "\n", "", "", "if", "self", ".", "is_final_test", ":", "\n", "            ", "if", "path", "not", "in", "self", ".", "screen_frames_cache", ":", "\n", "                ", "self", ".", "screen_frames_cache", "=", "{", "path", ":", "{", "}", "}", "\n", "", "if", "source", "not", "in", "self", ".", "screen_frames_cache", "[", "path", "]", ":", "\n", "                ", "self", ".", "screen_frames_cache", "[", "path", "]", "[", "source", "]", "=", "VideoReader", "(", "video_path", ",", "is_async", "=", "False", ",", "output_size", "=", "output_size", ")", ".", "get_frames", "(", ")", "\n", "", "timestamps", ",", "frames", "=", "self", ".", "screen_frames_cache", "[", "path", "]", "[", "source", "]", "\n", "timestamps", "=", "timestamps", "[", "selected_indices", "]", "\n", "frames", "=", "frames", "[", "selected_indices", "]", "\n", "", "else", ":", "\n", "# print('src.datasources.eve_sequences.load_all_from_source()\uff0csnap before load_all_from_source(), VideoReader()', video_path, selected_indices, output_size, '---nhfeuhuhd')", "\n", "            ", "timestamps", ",", "frames", "=", "VideoReader", "(", "video_path", ",", "frame_indices", "=", "selected_indices", ",", "\n", "is_async", "=", "False", ",", "output_size", "=", "output_size", ")", ".", "get_frames", "(", ")", "\n", "\n", "# print('load_all_from_source() procedes 5', '---gtwtert')", "\n", "# Collect and return", "\n", "", "subentry", "[", "'timestamps'", "]", "=", "np", ".", "asarray", "(", "timestamps", ",", "dtype", "=", "np", ".", "int", ")", "\n", "\n", "\n", "\n", "frames", "=", "(", "\n", "self", ".", "preprocess_screen_frames", "(", "frames", ")", "\n", "if", "source", "==", "'screen'", "else", "\n", "self", ".", "preprocess_frames", "(", "frames", ")", "\n", ")", "\n", "if", "source", "==", "'screen'", ":", "\n", "            ", "subentry", "[", "'frame'", "]", "=", "frames", "\n", "", "else", ":", "\n", "            ", "ew", ",", "eh", "=", "config", ".", "eyes_size", "\n", "subentry", "[", "'left_eye_patch'", "]", "=", "frames", "[", ":", ",", ":", ",", ":", ",", "ew", ":", "]", "\n", "subentry", "[", "'right_eye_patch'", "]", "=", "frames", "[", ":", ",", ":", ",", ":", ",", ":", "ew", "]", "\n", "\n", "\n", "\n", "# print('load_all_from_source() procedes 6', '---rbgtgfeew')", "\n", "# Pad as necessary with zero value and zero validity", "\n", "", "for", "key", ",", "value", "in", "subentry", ".", "items", "(", ")", ":", "\n", "            ", "if", "value", ".", "shape", "[", "0", "]", "<", "config", ".", "max_sequence_len", ":", "\n", "                ", "pad_len", "=", "config", ".", "max_sequence_len", "-", "value", ".", "shape", "[", "0", "]", "\n", "if", "pad_len", ">", "0", ":", "\n", "                    ", "subentry", "[", "key", "]", "=", "np", ".", "pad", "(", "\n", "value", ",", "\n", "pad_width", "=", "[", "(", "0", ",", "pad_len", "if", "i", "==", "0", "else", "0", ")", "for", "i", "in", "range", "(", "value", ".", "ndim", ")", "]", ",", "\n", "mode", "=", "'constant'", ",", "\n", "constant_values", "=", "(", "False", "if", "value", ".", "dtype", "is", "np", ".", "bool", "else", "0.0", ")", ",", "\n", ")", "\n", "# print('load_all_from_source() procedes 7', '---fewrterrf')", "\n", "", "", "", "return", "subentry", "\n", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.datasources.eve_sequences.EVESequencesBase.__getitem__": [[348, 393], ["eve_sequences.EVESequencesBase.load_all_from_source", "dict", "eve_sequences.EVESequencesBase.load_all_from_source", "eve_sequences.EVESequencesBase.items", "isinstance", "eve_sequences.EVESequencesBase.items", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.bjj9_EVE_SCPT.datasources.eve_sequences.EVESequencesBase.load_all_from_source", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.datasources.eve_sequences.EVESequencesBase.load_all_from_source"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "# print('eve_sequences.EVESequencesBase().__getitem__(idx) problem here?', idx, '---oioiejfjf')", "\n", "# Retrieve sub-folder specification", "\n", "# print('self.all_subfolders', len(self.all_subfolders), self.all_subfolders[0], idx, '---mvoijefj')", "\n", "        ", "spec", "=", "self", ".", "all_subfolders", "[", "idx", "]", "\n", "path", "=", "spec", "[", "'full_path'", "]", "\n", "source", "=", "spec", "[", "'camera_name'", "]", "\n", "indices", "=", "spec", "[", "'indices'", "]", "\n", "screen_indices", "=", "spec", "[", "'screen_indices'", "]", "\n", "# print('__get_item__ procede 1', (path, source, indices, screen_indices), '---mejfiijri')", "\n", "\n", "# Check cache if requested", "\n", "# NOTE: this only works with num_workers=0 as otherwise memory is not shared nor persisted.", "\n", "if", "self", ".", "live_validation", ":", "\n", "            ", "cache_key", "=", "'%s/%s'", "%", "(", "path", ",", "source", ")", "\n", "if", "cache_key", "in", "self", ".", "validation_data_cache", ":", "\n", "                ", "return", "self", ".", "validation_data_cache", "[", "cache_key", "]", "\n", "\n", "# Grab all data", "\n", "# print('__get_item__ procede 2', 'grabbing all data', '---mmjjifie')", "\n", "", "", "entry", "=", "self", ".", "load_all_from_source", "(", "path", ",", "source", ",", "indices", ")", "\n", "# print('__get_item__ procede 3', 'video grabbed', '---bsfsfasfd')", "\n", "if", "config", ".", "load_screen_content", ":", "\n", "            ", "sub_entry", "=", "self", ".", "load_all_from_source", "(", "path", ",", "'screen'", ",", "screen_indices", ")", "\n", "for", "k", ",", "v", "in", "sub_entry", ".", "items", "(", ")", ":", "# Add to full output dict", "\n", "                ", "entry", "[", "'screen_%s'", "%", "k", "]", "=", "v", "\n", "# print('__get_item__ procede 4', 'screen content grabbed', '---gaaefdfd')", "\n", "\n", "# Add meta data", "\n", "", "", "entry", "[", "'participant'", "]", "=", "spec", "[", "'participant'", "]", "\n", "entry", "[", "'subfolder'", "]", "=", "spec", "[", "'subfolder'", "]", "\n", "entry", "[", "'camera'", "]", "=", "spec", "[", "'camera_name'", "]", "\n", "# # add float validity", "\n", "# entry['left_PoG_tobii_validity_float'] = np.array(entry['left_PoG_tobii_validity'])", "\n", "# entry['right_PoG_tobii_validity_float'] = np.array(entry['right_PoG_tobii_validity'])", "\n", "\n", "torch_entry", "=", "dict", "(", "[", "\n", "(", "k", ",", "torch", ".", "from_numpy", "(", "a", ")", ")", "if", "isinstance", "(", "a", ",", "np", ".", "ndarray", ")", "else", "(", "k", ",", "a", ")", "\n", "for", "k", ",", "a", "in", "entry", ".", "items", "(", ")", "\n", "]", ")", "\n", "\n", "if", "self", ".", "live_validation", ":", "\n", "            ", "self", ".", "validation_data_cache", "[", "cache_key", "]", "=", "torch_entry", "\n", "# print(list(torch_entry.keys()), torch_entry['right_PoG_tobii'].size(), '---ejijijfe')", "\n", "", "return", "torch_entry", "\n", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.datasources.eve_sequences.EVESequences_train.__init__": [[396, 401], ["eve_sequences.EVESequencesBase.__init__"], "methods", ["home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.checkpoint_manager.CheckpointManager.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dataset_path", ":", "str", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "EVESequences_train", ",", "self", ")", ".", "__init__", "(", "\n", "dataset_path", ",", "\n", "participants_to_use", "=", "predefined_splits", "[", "'train'", "]", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.datasources.eve_sequences.EVESequences_val.__init__": [[405, 410], ["eve_sequences.EVESequencesBase.__init__"], "methods", ["home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.checkpoint_manager.CheckpointManager.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dataset_path", ":", "str", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "EVESequences_val", ",", "self", ")", ".", "__init__", "(", "\n", "dataset_path", ",", "\n", "participants_to_use", "=", "predefined_splits", "[", "'val'", "]", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.datasources.eve_sequences.EVESequences_test.__init__": [[414, 419], ["eve_sequences.EVESequencesBase.__init__"], "methods", ["home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.checkpoint_manager.CheckpointManager.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dataset_path", ":", "str", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "EVESequences_test", ",", "self", ")", ".", "__init__", "(", "\n", "dataset_path", ",", "\n", "participants_to_use", "=", "predefined_splits", "[", "'test'", "]", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.datasources.eve_sequences.getJiuGongWeights": [[459, 461], ["numpy.ones", "len"], "function", ["None"], ["", "", "def", "getJiuGongWeights", "(", "PoG_gts", ",", "bin_num_each_axis", "=", "3", ",", "use_screen_dim", "=", "False", ")", ":", "\n", "    ", "return", "np", ".", "ones", "(", "len", "(", "PoG_gts", ")", ")", "", "", ""]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.refine_net.BasicBlock.__init__": [[42, 66], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.InstanceNorm2d", "act_func", "torch.nn.Conv2d", "torch.nn.InstanceNorm2d", "act_func", "torch.nn.Conv2d", "torch.nn.Sequential", "torch.nn.InstanceNorm2d", "act_func", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.checkpoint_manager.CheckpointManager.__init__"], ["def", "__init__", "(", "self", ",", "in_shape", ",", "out_shape", ",", "act_func", "=", "nn", ".", "ReLU", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "ic", ",", "ih", ",", "iw", "=", "in_shape", "\n", "oc", ",", "oh", ",", "ow", "=", "out_shape", "\n", "assert", "(", "ih", "==", "oh", "and", "iw", "==", "ow", ")", "\n", "\n", "# Main layers", "\n", "self", ".", "layers", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "InstanceNorm2d", "(", "ic", ",", "affine", "=", "True", ")", ",", "\n", "act_func", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "ic", ",", "oc", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "\n", "nn", ".", "InstanceNorm2d", "(", "oc", ",", "affine", "=", "True", ")", ",", "\n", "act_func", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "oc", ",", "oc", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", ")", "\n", "\n", "# Skip layer", "\n", "self", ".", "skip_layer", "=", "None", "\n", "if", "ic", "!=", "oc", ":", "\n", "            ", "self", ".", "skip_layer", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "InstanceNorm2d", "(", "ic", ",", "affine", "=", "True", ")", ",", "\n", "act_func", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "ic", ",", "oc", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.refine_net.BasicBlock.forward": [[68, 72], ["refine_net.BasicBlock.layers", "refine_net.BasicBlock.skip_layer"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "output_dict", ",", "previous_output_dict", ")", ":", "\n", "        ", "skip", "=", "self", ".", "skip_layer", "(", "x", ")", "if", "self", ".", "skip_layer", "else", "x", "\n", "x", "=", "self", ".", "layers", "(", "x", ")", "\n", "return", "x", "+", "skip", "\n", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.refine_net.WrapEncoderDecoder.__init__": [[75, 118], ["torch.nn.Module.__init__", "torch.nn.ModuleList", "torch.nn.ModuleList", "range", "torch.nn.AdaptiveMaxPool2d", "torch.nn.Upsample", "range", "refine_net.BasicBlock", "refine_net.WrapEncoderDecoder.encoder_blocks.append", "refine_net.BasicBlock", "refine_net.WrapEncoderDecoder.decoder_blocks.append", "refine_net.BasicBlock", "refine_net.BasicBlock"], "methods", ["home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.checkpoint_manager.CheckpointManager.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_shape", ",", "out_shape", ",", "module_to_wrap", ",", "add_skip_connection", "=", "False", ",", "\n", "num_encoder_blocks", "=", "1", ",", "num_decoder_blocks", "=", "1", ")", ":", "\n", "        ", "super", "(", "WrapEncoderDecoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "ic", ",", "ih", ",", "iw", "=", "in_shape", "\n", "oc", ",", "oh", ",", "ow", "=", "out_shape", "\n", "assert", "(", "ih", "==", "oh", "and", "iw", "==", "ow", ")", "\n", "self", ".", "in_shape", "=", "in_shape", "\n", "self", ".", "out_shape", "=", "out_shape", "\n", "b_ic", ",", "bh", ",", "bw", "=", "module_to_wrap", ".", "in_shape", "\n", "b_oc", "=", "module_to_wrap", ".", "out_shape", "[", "0", "]", "\n", "\n", "self", ".", "add_skip_connection", "=", "add_skip_connection", "\n", "\n", "# Define encoder layer blocks", "\n", "self", ".", "encoder_blocks", "=", "nn", ".", "ModuleList", "(", "[", "BasicBlock", "(", "[", "ic", ",", "ih", ",", "iw", "]", ",", "[", "b_ic", ",", "ih", ",", "iw", "]", ")", "]", ")", "\n", "if", "num_encoder_blocks", ">", "1", ":", "\n", "            ", "for", "_", "in", "range", "(", "num_encoder_blocks", "-", "1", ")", ":", "\n", "                ", "self", ".", "encoder_blocks", ".", "append", "(", "BasicBlock", "(", "[", "b_ic", ",", "ih", ",", "iw", "]", ",", "[", "b_ic", ",", "ih", ",", "iw", "]", ")", ")", "\n", "\n", "# Maybe downsample", "\n", "", "", "self", ".", "downsample", "=", "None", "\n", "if", "ih", "!=", "bh", "or", "iw", "!=", "bw", ":", "\n", "            ", "self", ".", "downsample", "=", "nn", ".", "AdaptiveMaxPool2d", "(", "[", "bh", ",", "bw", "]", ")", "\n", "\n", "# Reference to in-between module", "\n", "", "self", ".", "between_module", "=", "module_to_wrap", "\n", "\n", "# Maybe upsample", "\n", "self", ".", "upsample", "=", "None", "\n", "if", "bh", "!=", "oh", "or", "bw", "!=", "ow", ":", "\n", "            ", "self", ".", "upsample", "=", "nn", ".", "Upsample", "(", "size", "=", "[", "oh", ",", "ow", "]", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "\n", "# Decide on features to concatenate, then decode", "\n", "", "features_to_decode", "=", "b_oc", "\n", "if", "add_skip_connection", ":", "\n", "            ", "features_to_decode", "+=", "b_ic", "\n", "", "self", ".", "decoder_blocks", "=", "nn", ".", "ModuleList", "(", "[", "\n", "BasicBlock", "(", "[", "features_to_decode", ",", "oh", ",", "ow", "]", ",", "[", "oc", ",", "oh", ",", "ow", "]", ",", "nn", ".", "LeakyReLU", ")", "\n", "]", ")", "\n", "if", "num_decoder_blocks", ">", "1", ":", "\n", "            ", "for", "_", "in", "range", "(", "num_decoder_blocks", "-", "1", ")", ":", "\n", "                ", "self", ".", "decoder_blocks", ".", "append", "(", "\n", "BasicBlock", "(", "[", "oc", ",", "oh", ",", "ow", "]", ",", "[", "oc", ",", "oh", ",", "ow", "]", ",", "nn", ".", "LeakyReLU", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.refine_net.WrapEncoderDecoder.forward": [[119, 134], ["refine_net.WrapEncoderDecoder.between_module", "encoder_block", "refine_net.WrapEncoderDecoder.downsample", "refine_net.WrapEncoderDecoder.upsample", "torch.cat", "decoder_block"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "input_features", ",", "output_dict", ",", "previous_output_dict", ")", ":", "\n", "        ", "x", "=", "input_features", "\n", "for", "encoder_block", "in", "self", ".", "encoder_blocks", ":", "\n", "            ", "x", "=", "encoder_block", "(", "x", ",", "output_dict", ",", "previous_output_dict", ")", "\n", "", "encoded_features", "=", "x", "\n", "if", "self", ".", "downsample", ":", "\n", "            ", "x", "=", "self", ".", "downsample", "(", "x", ")", "\n", "", "x", "=", "self", ".", "between_module", "(", "x", ",", "output_dict", ",", "previous_output_dict", ")", "\n", "if", "self", ".", "upsample", ":", "\n", "            ", "x", "=", "self", ".", "upsample", "(", "x", ")", "\n", "", "if", "self", ".", "add_skip_connection", ":", "\n", "            ", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "encoded_features", "]", ",", "axis", "=", "1", ")", "\n", "", "for", "decoder_block", "in", "self", ".", "decoder_blocks", ":", "\n", "            ", "x", "=", "decoder_block", "(", "x", ",", "output_dict", ",", "previous_output_dict", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.refine_net.Bottleneck.__init__": [[137, 157], ["torch.nn.Module.__init__", "range", "torch.nn.ModuleList", "rnn_cells.append", "common.CRNNCell", "rnn_cells.append", "common.CLSTMCell", "rnn_cells.append", "common.CGRUCell"], "methods", ["home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.checkpoint_manager.CheckpointManager.__init__"], ["    ", "def", "__init__", "(", "self", ",", "tensor_shape", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "c", ",", "h", ",", "w", "=", "tensor_shape", "\n", "self", ".", "in_shape", "=", "tensor_shape", "\n", "self", ".", "out_shape", "=", "tensor_shape", "\n", "\n", "# Define RNN cell", "\n", "if", "config", ".", "refine_net_use_rnn", ":", "\n", "            ", "rnn_cells", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "config", ".", "refine_net_rnn_num_cells", ")", ":", "\n", "                ", "if", "config", ".", "refine_net_rnn_type", "==", "'CRNN'", ":", "\n", "                    ", "rnn_cells", ".", "append", "(", "CRNNCell", "(", "input_size", "=", "config", ".", "refine_net_num_features", ",", "\n", "hidden_size", "=", "config", ".", "refine_net_num_features", ")", ")", "\n", "", "elif", "config", ".", "refine_net_rnn_type", "==", "'CLSTM'", ":", "\n", "                    ", "rnn_cells", ".", "append", "(", "CLSTMCell", "(", "input_size", "=", "config", ".", "refine_net_num_features", ",", "\n", "hidden_size", "=", "config", ".", "refine_net_num_features", ")", ")", "\n", "", "elif", "config", ".", "refine_net_rnn_type", "==", "'CGRU'", ":", "\n", "                    ", "rnn_cells", ".", "append", "(", "CGRUCell", "(", "input_size", "=", "config", ".", "refine_net_num_features", ",", "\n", "hidden_size", "=", "config", ".", "refine_net_num_features", ")", ")", "\n", "", "", "self", ".", "rnn_cells", "=", "nn", ".", "ModuleList", "(", "rnn_cells", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.refine_net.Bottleneck.forward": [[158, 181], ["enumerate", "rnn_cell", "isinstance"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "bottleneck_features", ",", "output_dict", ",", "previous_output_dict", ")", ":", "\n", "        ", "if", "config", ".", "refine_net_use_rnn", ":", "\n", "            ", "for", "i", ",", "rnn_cell", "in", "enumerate", "(", "self", ".", "rnn_cells", ")", ":", "\n", "                ", "suffix", "=", "'_%d'", "%", "i", "\n", "\n", "# Retrieve previous hidden/cell states if any", "\n", "previous_states", "=", "None", "\n", "if", "previous_output_dict", "is", "not", "None", ":", "\n", "                    ", "previous_states", "=", "previous_output_dict", "[", "'refinenet_rnn_states'", "+", "suffix", "]", "\n", "\n", "# Inference through RNN cell", "\n", "", "states", "=", "rnn_cell", "(", "bottleneck_features", ",", "previous_states", ")", "\n", "\n", "# Decide what the output is and store back current states", "\n", "if", "isinstance", "(", "states", ",", "tuple", ")", ":", "\n", "                    ", "rnn_features", "=", "states", "[", "0", "]", "\n", "output_dict", "[", "'refinenet_rnn_states'", "+", "suffix", "]", "=", "states", "\n", "", "else", ":", "\n", "                    ", "rnn_features", "=", "states", "\n", "output_dict", "[", "'refinenet_rnn_states'", "+", "suffix", "]", "=", "states", "\n", "bottleneck_features", "=", "rnn_features", "\n", "\n", "", "", "", "return", "bottleneck_features", "\n", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.refine_net.RefineNet.__init__": [[184, 240], ["torch.nn.Module.__init__", "refine_net.Bottleneck", "refine_net.WrapEncoderDecoder", "refine_net.WrapEncoderDecoder", "refine_net.WrapEncoderDecoder", "refine_net.WrapEncoderDecoder", "refine_net.WrapEncoderDecoder", "torch.nn.Sequential", "torch.nn.Sequential", "refine_net.RefineNet.modules", "torch.nn.init.zeros_", "torch.nn.Conv2d", "torch.nn.InstanceNorm2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.Sigmoid", "isinstance", "torch.nn.init.kaiming_normal_", "isinstance", "torch.nn.init.zeros_", "torch.nn.init.constant_", "torch.nn.init.constant_"], "methods", ["home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.checkpoint_manager.CheckpointManager.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "RefineNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "in_c", "=", "4", "if", "config", ".", "load_screen_content", "else", "1", "\n", "do_skip", "=", "config", ".", "refine_net_use_skip_connections", "\n", "\n", "# CNN backbone (ResNet-based)", "\n", "# - Replace first layer to take 5-channel input", "\n", "bottleneck", "=", "Bottleneck", "(", "(", "config", ".", "refine_net_num_features", ",", "5", ",", "8", ")", ")", "\n", "wrapped", "=", "WrapEncoderDecoder", "(", "in_shape", "=", "[", "256", ",", "5", ",", "8", "]", ",", "\n", "out_shape", "=", "[", "256", ",", "5", ",", "8", "]", ",", "\n", "module_to_wrap", "=", "bottleneck", ",", "\n", "num_encoder_blocks", "=", "2", ",", "\n", "add_skip_connection", "=", "do_skip", ")", "\n", "wrapped", "=", "WrapEncoderDecoder", "(", "in_shape", "=", "[", "128", ",", "9", ",", "16", "]", ",", "\n", "out_shape", "=", "[", "128", ",", "9", ",", "16", "]", ",", "\n", "module_to_wrap", "=", "wrapped", ",", "\n", "num_encoder_blocks", "=", "2", ",", "\n", "add_skip_connection", "=", "do_skip", ")", "\n", "wrapped", "=", "WrapEncoderDecoder", "(", "in_shape", "=", "[", "64", ",", "18", ",", "32", "]", ",", "\n", "out_shape", "=", "[", "64", ",", "18", ",", "32", "]", ",", "\n", "module_to_wrap", "=", "wrapped", ",", "\n", "num_encoder_blocks", "=", "2", ",", "\n", "add_skip_connection", "=", "do_skip", ")", "\n", "wrapped", "=", "WrapEncoderDecoder", "(", "in_shape", "=", "[", "32", ",", "36", ",", "64", "]", ",", "\n", "out_shape", "=", "[", "32", ",", "36", ",", "64", "]", ",", "\n", "module_to_wrap", "=", "wrapped", ",", "\n", "num_encoder_blocks", "=", "2", ",", "\n", "add_skip_connection", "=", "do_skip", ")", "\n", "wrapped", "=", "WrapEncoderDecoder", "(", "in_shape", "=", "[", "16", ",", "72", ",", "128", "]", ",", "\n", "out_shape", "=", "[", "16", ",", "72", ",", "128", "]", ",", "\n", "module_to_wrap", "=", "wrapped", ",", "\n", "add_skip_connection", "=", "do_skip", ")", "\n", "self", ".", "initial", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_c", ",", "16", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "16", ",", "affine", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "16", ",", "16", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", ")", "\n", "self", ".", "network", "=", "wrapped", "\n", "self", ".", "final", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "16", ",", "16", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "nn", ".", "LeakyReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "16", ",", "1", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ",", "\n", ")", "\n", "\n", "# Initializations", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "InstanceNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "nn", ".", "init", ".", "zeros_", "(", "self", ".", "final", "[", "-", "2", "]", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.refine_net.RefineNet.forward": [[241, 260], ["torch.nn.functional.interpolate", "refine_net.RefineNet.initial", "refine_net.RefineNet.final", "torch.cat", "refine_net.RefineNet.network"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_dict", ",", "output_dict", ",", "previous_output_dict", "=", "None", ")", ":", "\n", "# Form input image by concatenating (channel-wise) the screen frame and heatmap.", "\n", "        ", "input_heatmap", "=", "output_dict", "[", "'heatmap_initial'", "]", "\n", "scaled_heatmap", "=", "F", ".", "interpolate", "(", "\n", "input_heatmap", ",", "(", "config", ".", "screen_size", "[", "1", "]", ",", "config", ".", "screen_size", "[", "0", "]", ")", ",", "\n", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ",", "\n", ")", "\n", "\n", "if", "config", ".", "load_screen_content", ":", "\n", "            ", "input_image", "=", "torch", ".", "cat", "(", "[", "input_dict", "[", "'screen_frame'", "]", ",", "scaled_heatmap", "]", ",", "axis", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "input_image", "=", "scaled_heatmap", "\n", "\n", "# Run through network", "\n", "", "input_features", "=", "self", ".", "initial", "(", "input_image", ")", "\n", "final_heatmap", "=", "self", ".", "final", "(", "\n", "self", ".", "network", "(", "input_features", ",", "output_dict", ",", "previous_output_dict", ")", "\n", ")", "\n", "output_dict", "[", "'heatmap_final'", "]", "=", "final_heatmap", "\n", "", "", ""]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.eye_net.EyeNet.__init__": [[50, 116], ["torch.nn.Module.__init__", "torchvision.models.resnet.ResNet", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.init.zeros_", "torch.nn.Linear", "torch.nn.SELU", "torch.nn.Linear", "range", "torch.nn.ModuleList", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.SELU", "torch.nn.Linear", "torch.nn.Tanh", "torch.nn.Linear", "torch.nn.SELU", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.SELU", "rnn_cells.append", "torch.nn.RNNCell", "rnn_cells.append", "torch.nn.LSTMCell", "rnn_cells.append", "ValueError", "torch.nn.GRUCell"], "methods", ["home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.checkpoint_manager.CheckpointManager.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "EyeNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "num_features", "=", "(", "\n", "config", ".", "eye_net_rnn_num_features", "\n", "if", "config", ".", "eye_net_use_rnn", "\n", "else", "config", ".", "eye_net_static_num_features", "\n", ")", "\n", "\n", "# CNN backbone (ResNet-18 with instance normalization)", "\n", "self", ".", "cnn_layers", "=", "ResNet", "(", "block", "=", "BasicBlock", ",", "layers", "=", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "\n", "num_classes", "=", "num_features", ",", "\n", "norm_layer", "=", "nn", ".", "InstanceNorm2d", ")", "\n", "self", ".", "fc_common", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "num_features", "+", "(", "2", "if", "config", ".", "eye_net_use_head_pose_input", "else", "0", ")", ",", "\n", "num_features", ")", ",", "\n", "nn", ".", "SELU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "num_features", ",", "num_features", ")", ",", "\n", ")", "\n", "\n", "if", "config", ".", "eye_net_use_rnn", ":", "\n", "# Define RNN cell", "\n", "            ", "rnn_cells", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "config", ".", "eye_net_rnn_num_cells", ")", ":", "\n", "                ", "if", "config", ".", "eye_net_rnn_type", "==", "'RNN'", ":", "\n", "                    ", "rnn_cells", ".", "append", "(", "nn", ".", "RNNCell", "(", "input_size", "=", "config", ".", "eye_net_rnn_num_features", ",", "\n", "hidden_size", "=", "config", ".", "eye_net_rnn_num_features", ")", ")", "\n", "", "elif", "config", ".", "eye_net_rnn_type", "==", "'LSTM'", ":", "\n", "                    ", "rnn_cells", ".", "append", "(", "nn", ".", "LSTMCell", "(", "input_size", "=", "config", ".", "eye_net_rnn_num_features", ",", "\n", "hidden_size", "=", "config", ".", "eye_net_rnn_num_features", ")", ")", "\n", "", "elif", "config", ".", "eye_net_rnn_type", "==", "'GRU'", ":", "\n", "                    ", "rnn_cells", ".", "append", "(", "nn", ".", "GRUCell", "(", "input_size", "=", "config", ".", "eye_net_rnn_num_features", ",", "\n", "hidden_size", "=", "config", ".", "eye_net_rnn_num_features", ")", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "ValueError", "(", "'Unknown RNN type for EyeNet: %s'", "%", "config", ".", "eye_net_rnn_type", ")", "\n", "", "", "self", ".", "rnn_cells", "=", "nn", ".", "ModuleList", "(", "rnn_cells", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "static_fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "num_features", ",", "num_features", ")", ",", "\n", "nn", ".", "SELU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "\n", "# FC layers", "\n", "", "self", ".", "fc_to_gaze", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "num_features", ",", "num_features", ")", ",", "\n", "nn", ".", "SELU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "num_features", ",", "2", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", ")", "\n", "self", ".", "fc_to_pupil", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "num_features", ",", "num_features", ")", ",", "\n", "nn", ".", "SELU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "num_features", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "\n", "# self.fc_to_validity = nn.Sequential(", "\n", "#     nn.Linear(num_features, num_features),", "\n", "#     nn.SELU(inplace=True),", "\n", "#     nn.Linear(num_features, 1),", "\n", "#     nn.Tanh(),", "\n", "# )", "\n", "\n", "# Set gaze layer weights to zero as otherwise this can", "\n", "# explode early in training", "\n", "nn", ".", "init", ".", "zeros_", "(", "self", ".", "fc_to_gaze", "[", "-", "2", "]", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.eye_net.EyeNet.forward": [[118, 193], ["eye_net.EyeNet.cnn_layers", "eye_net.EyeNet.fc_common", "eye_net.EyeNet.fc_to_pupil", "eye_net.EyeNet.reshape", "torch.cat", "enumerate", "eye_net.EyeNet.static_fc", "eye_net.EyeNet.fc_to_gaze", "output_dict[].detach", "rnn_cell", "isinstance"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_dict", ",", "output_dict", "=", "None", ",", "previous_output_dict", "=", "None", ",", "side", "=", "None", ")", ":", "\n", "# ee0 = time.time()", "\n", "# Pick input image", "\n", "        ", "if", "(", "side", "+", "'_eye_patch'", ")", "in", "output_dict", ":", "\n", "            ", "input_image", "=", "output_dict", "[", "side", "+", "'_eye_patch'", "]", "\n", "", "else", ":", "\n", "            ", "input_image", "=", "input_dict", "[", "side", "+", "'_eye_patch'", "]", "\n", "\n", "# ee1 = time.time()", "\n", "# Compute CNN features", "\n", "", "initial_features", "=", "self", ".", "cnn_layers", "(", "input_image", ")", "\n", "\n", "# ee2 = time.time()", "\n", "# Process head pose input if asked for", "\n", "if", "config", ".", "eye_net_use_head_pose_input", ":", "\n", "            ", "initial_features", "=", "torch", ".", "cat", "(", "[", "initial_features", ",", "input_dict", "[", "side", "+", "'_h'", "]", "]", ",", "axis", "=", "1", ")", "\n", "", "initial_features", "=", "self", ".", "fc_common", "(", "initial_features", ")", "\n", "\n", "# ee3 = time.time()", "\n", "# Apply RNN cells", "\n", "if", "config", ".", "eye_net_use_rnn", ":", "\n", "\n", "            ", "rnn_features", "=", "initial_features", "\n", "for", "i", ",", "rnn_cell", "in", "enumerate", "(", "self", ".", "rnn_cells", ")", ":", "\n", "# em0 = time.time()", "\n", "                ", "suffix", "=", "'_%d'", "%", "i", "\n", "\n", "# Retrieve previous hidden/cell states if any", "\n", "previous_states", "=", "None", "\n", "if", "previous_output_dict", "is", "not", "None", ":", "\n", "                    ", "previous_states", "=", "previous_output_dict", "[", "side", "+", "'_eye_rnn_states'", "+", "suffix", "]", "\n", "\n", "# em1 = time.time()", "\n", "# Inference through RNN cell", "\n", "", "states", "=", "rnn_cell", "(", "rnn_features", ",", "previous_states", ")", "\n", "# em2 = time.time()", "\n", "\n", "# Decide what the output is and store back current states", "\n", "if", "isinstance", "(", "states", ",", "tuple", ")", ":", "\n", "                    ", "rnn_features", "=", "states", "[", "0", "]", "\n", "output_dict", "[", "side", "+", "'_eye_rnn_states'", "+", "suffix", "]", "=", "states", "\n", "", "else", ":", "\n", "                    ", "rnn_features", "=", "states", "\n", "output_dict", "[", "side", "+", "'_eye_rnn_states'", "+", "suffix", "]", "=", "states", "\n", "# em3 = time.time()", "\n", "# timeMarks = np.array([em0, em1, em2, em3,])", "\n", "# timePeriodsStr = ['em' + str(i) + '.em' + str(i + 1) for i in range(len(timeMarks) - 1)]", "\n", "# timePeriods = timeMarks[1:] - timeMarks[:-1]", "\n", "# if i == 0:", "\n", "#     print('eye_net rnn cell', list(zip(timePeriodsStr, timePeriods)), '---bfefddd eye_net.py')", "\n", "", "", "features", "=", "rnn_features", "\n", "", "else", ":", "\n", "            ", "features", "=", "self", ".", "static_fc", "(", "initial_features", ")", "\n", "# ee4 = time.time()", "\n", "\n", "# Final prediction", "\n", "#print('rnn_features size:', features.shape, 'initial_features size:', initial_features.shape, '---jjijijfe eye_net')", "\n", "#raise", "\n", "", "gaze_prediction", "=", "half_pi", "*", "self", ".", "fc_to_gaze", "(", "features", ")", "\n", "pupil_size", "=", "self", ".", "fc_to_pupil", "(", "features", ")", "\n", "#tracking_validity = torch.sigmoid(self.fc_to_validity(initial_features)) # use features from single frame to estimate validity", "\n", "# ee5 = time.time()", "\n", "\n", "# For gaze, the range of output values are limited by a tanh and scaling", "\n", "output_dict", "[", "side", "+", "'_g_initial'", "]", "=", "gaze_prediction", "\n", "\n", "# Estimate of pupil size", "\n", "output_dict", "[", "side", "+", "'_pupil_size'", "]", "=", "pupil_size", ".", "reshape", "(", "-", "1", ")", "\n", "\n", "# Estimate of tracking validity", "\n", "#output_dict[side + '_tracking_validity'] = tracking_validity.reshape(-1)", "\n", "# ee6 = time.time()", "\n", "# If network frozen, we're gonna detach gradients here", "\n", "if", "config", ".", "eye_net_frozen", ":", "\n", "            ", "output_dict", "[", "side", "+", "'_g_initial'", "]", "=", "output_dict", "[", "side", "+", "'_g_initial'", "]", ".", "detach", "(", ")", "\n", "# ee7 = time.time()", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.evec.EVEC.__init__": [[82, 143], ["torch.Module.__init__", "eye_net.EyeNet", "st_refine_net.StRefine", "evec.EVEC.write_empty_memories", "evec.EVEC.eye_net.parameters", "evec.EVEC.collect_fixed_length_history", "refine_net.RefineNet", "torch.load", "torch.load", "torch.load", "torch.load", "dict", "utils.load_model.load_weights_for_instance", "print", "utils.load_model.load_weights_for_instance", "print", "print", "utils.load_model.load_weights_for_instance", "dict.items"], "methods", ["home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.checkpoint_manager.CheckpointManager.__init__", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.evec.EVEC.write_empty_memories", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.evec.EVEC.collect_fixed_length_history", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.utils.load_model.load_weights_for_instance", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.utils.load_model.load_weights_for_instance", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.utils.load_model.load_weights_for_instance"], ["    ", "def", "__init__", "(", "self", ",", "output_predictions", "=", "False", ",", "online_refinement_starts_from", "=", "2", ",", "\n", "fixed_history_len", "=", "None", ",", "input_memory_path", "=", "''", ",", "\n", "one_video_to_select", "=", "None", ",", "one_sample_to_plot", "=", "None", ")", ":", "\n", "        ", "super", "(", "EVEC", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "output_predictions", "=", "output_predictions", "\n", "\n", "# 1. Network to estimate gaze direction and pupil size (mm)", "\n", "self", ".", "eye_net", "=", "EyeNet", "(", ")", "\n", "if", "config", ".", "eye_net_load_pretrained", ":", "\n", "            ", "if", "config", ".", "eye_net_load_from_specified_location", "!=", "''", ":", "\n", "                ", "state_dict", "=", "torch", ".", "load", "(", "config", ".", "eye_net_load_from_specified_location", ",", "map_location", "=", "device", ")", "\n", "state_dict", "=", "dict", "(", "[", "(", "k", "[", "8", ":", "]", ",", "v", ")", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", "]", ")", "# there is 'eye_net.' infront every key, remove it", "\n", "load_weights_for_instance", "(", "self", ".", "eye_net", ",", "state_dict", ")", "\n", "print", "(", "'eye_net loaded from'", ",", "config", ".", "eye_net_load_from_specified_location", ",", "'---nwefji evec.py'", ")", "\n", "", "else", ":", "\n", "                ", "load_weights_for_instance", "(", "self", ".", "eye_net", ")", "\n", "print", "(", "'eye_net loaded from default url'", ",", "'---nwefji evec.py'", ")", "\n", "\n", "# ##################################", "\n", "# print(self.eye_net.state_dict()['fc_to_gaze.0.weight'], self.eye_net.state_dict()['fc_to_gaze.0.weight'].size(), '---bwefdfdf evec.py')", "\n", "# ############################################################", "\n", "\n", "", "", "if", "config", ".", "eye_net_frozen", ":", "\n", "            ", "for", "param", "in", "self", ".", "eye_net", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "\n", "# 2. Network to refine gaze by spatical tranforming", "\n", "", "", "state_path", "=", "'./models/trained_model_params/spatical_transform_model_fake_eyetracking_dataset_1kg_128_72_error00_valid_random_ii_in_sequence_person_gt_lr_0.1_99_full.pt'", "\n", "self", ".", "st_refine_net", "=", "StRefine", "(", "StNet_path", "=", "state_path", ")", "\n", "self", ".", "fixed_history_len", "=", "fixed_history_len", "\n", "if", "self", ".", "fixed_history_len", "is", "not", "None", ":", "\n", "            ", "assert", "input_memory_path", "!=", "''", "\n", "self", ".", "fixed_length_history", "=", "self", ".", "collect_fixed_length_history", "(", "input_memory_path", ",", "one_video_to_select", "=", "one_video_to_select", ")", "\n", "self", ".", "running_memory_version", "=", "'not initiated'", "\n", "", "self", ".", "st_transform_enabled", "=", "True", "\n", "self", ".", "write_empty_memories", "(", ")", "\n", "\n", "# 3. Network to refine estimated gaze based on:", "\n", "#   a) history of point of gaze (PoG)", "\n", "#   b) screen content", "\n", "self", ".", "refine_net", "=", "RefineNet", "(", ")", "if", "config", ".", "refine_net_enabled", "else", "None", "\n", "if", "config", ".", "refine_net_enabled", "and", "config", ".", "refine_net_load_pretrained", ":", "\n", "            ", "if", "config", ".", "refine_net_load_from_specified_location", "!=", "''", ":", "\n", "                ", "print", "(", "'add refine net'", ")", "\n", "raise", "\n", "", "else", ":", "\n", "                ", "load_weights_for_instance", "(", "self", ".", "refine_net", ")", "\n", "\n", "", "", "self", ".", "eye_side", "=", "config", ".", "eye_side", "# hwiojefoiwjef eve.py", "\n", "self", ".", "jiugong_enabled", "=", "config", ".", "jiugong_enabled", "\n", "self", ".", "memory_in_stable_thresh", "=", "999", "\n", "self", ".", "memory_center_calculation_out_outlier_thresh", "=", "1", "\n", "self", ".", "center_drag", "=", "3", "\n", "self", ".", "online_refinement_starts_from", "=", "online_refinement_starts_from", "# (540, 1081, 2163, 3245) # at least 2 for building history heatmap", "\n", "self", ".", "count_memory_update", "=", "0", "\n", "\n", "# plotting", "\n", "self", ".", "one_sample_to_plot", "=", "one_sample_to_plot", "\n", "self", ".", "plotting_materials_one_sample", "=", "{", "}", "\n", "self", ".", "frame_count", "=", "0", "\n", "self", ".", "plotted", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.evec.EVEC.collect_fixed_length_history": [[147, 202], ["pickle.load", "sorted", "open", "memory_pi_star.keys", "sorted", "memory_pi_star[].keys", "numpy.array", "numpy.array", "numpy.array", "numpy.unique", "sorted", "random.shuffle", "print", "H[].append", "len", "v.split", "list", "list", "video_id_curr.split", "vi.split"], "methods", ["None"], ["", "def", "collect_fixed_length_history", "(", "self", ",", "memory_path", ",", "one_video_to_select", "=", "None", ")", ":", "\n", "        ", "if", "one_video_to_select", "is", "not", "None", ":", "\n", "            ", "subject_to_select", ",", "cam_pos_to_select", ",", "video_name_to_select", "=", "one_video_to_select", "\n", "\n", "", "subject_memories", "=", "pickle", ".", "load", "(", "open", "(", "memory_path", ",", "'rb'", ")", ")", "\n", "memory_pi", ",", "memory_bi", ",", "memory_pi_star", ",", "memory_pi_mean_std", ",", "memory_pi_mean_after_outlier_removal", ",", "memory_video_id", ",", "memory_last_update_at", "=", "subject_memories", "\n", "his_len", "=", "self", ".", "fixed_history_len", "\n", "if", "his_len", "==", "'full'", ":", "his_len", "=", "np", ".", "inf", "\n", "fixed_length_history", "=", "{", "}", "\n", "for", "subject", "in", "sorted", "(", "memory_pi_star", ".", "keys", "(", ")", ")", ":", "\n", "            ", "if", "one_video_to_select", "is", "not", "None", ":", "\n", "                ", "if", "subject", "!=", "subject_to_select", ":", "continue", "\n", "#if subject not in ['val02',]: continue", "\n", "", "fixed_length_history", "[", "subject", "]", "=", "{", "}", "\n", "for", "cam_pos", "in", "sorted", "(", "memory_pi_star", "[", "subject", "]", ".", "keys", "(", ")", ")", ":", "\n", "                ", "if", "one_video_to_select", "is", "not", "None", ":", "\n", "                    ", "if", "cam_pos", "!=", "cam_pos_to_select", ":", "continue", "\n", "# prepare memory materials", "\n", "", "ps", "=", "np", ".", "array", "(", "memory_pi", "[", "subject", "]", "[", "cam_pos", "]", ")", "\n", "bs", "=", "np", ".", "array", "(", "memory_bi", "[", "subject", "]", "[", "cam_pos", "]", ")", "\n", "vids", "=", "np", ".", "array", "(", "[", "v", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "for", "v", "in", "memory_video_id", "[", "subject", "]", "[", "cam_pos", "]", "]", ")", "\n", "all_video_ids", "=", "np", ".", "unique", "(", "vids", ")", "\n", "fixed_length_history", "[", "subject", "]", "[", "cam_pos", "]", "=", "{", "}", "\n", "for", "video_id_curr", "in", "sorted", "(", "all_video_ids", ")", ":", "\n", "                    ", "if", "one_video_to_select", "is", "not", "None", ":", "\n", "                        ", "if", "video_id_curr", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "!=", "video_name_to_select", ":", "continue", "\n", "", "H", "=", "{", "'pi'", ":", "[", "]", ",", "'bi'", ":", "[", "]", ",", "'vis'", ":", "[", "]", ",", "'total'", ":", "0", "}", "\n", "videos_random", "=", "all_video_ids", "[", ":", "]", "\n", "random", ".", "shuffle", "(", "videos_random", ")", "\n", "for", "vi", "in", "videos_random", ":", "\n", "                        ", "if", "vi", "==", "video_id_curr", ":", "continue", "\n", "H", "[", "'vis'", "]", ".", "append", "(", "vi", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "[", "4", ":", "7", "]", ")", "\n", "select", "=", "(", "vids", "==", "vi", ")", "\n", "ps_selected", "=", "ps", "[", "select", "]", "\n", "bs_selected", "=", "bs", "[", "select", "]", "\n", "H", "[", "'pi'", "]", "=", "H", "[", "'pi'", "]", "+", "list", "(", "ps_selected", ")", "\n", "H", "[", "'bi'", "]", "=", "H", "[", "'bi'", "]", "+", "list", "(", "bs_selected", ")", "\n", "H", "[", "'total'", "]", "+=", "len", "(", "ps_selected", ")", "\n", "if", "H", "[", "'total'", "]", ">=", "his_len", ":", "\n", "                            ", "num_to_delete", "=", "H", "[", "'total'", "]", "-", "his_len", "\n", "H", "[", "'pi'", "]", "=", "H", "[", "'pi'", "]", "[", ":", "-", "num_to_delete", "]", "\n", "H", "[", "'bi'", "]", "=", "H", "[", "'bi'", "]", "[", ":", "-", "num_to_delete", "]", "\n", "H", "[", "'total'", "]", "-=", "num_to_delete", "\n", "break", "\n", "", "", "assert", "H", "[", "'total'", "]", "<=", "his_len", "# there could be cases when there are not enough frames for this his_len", "\n", "print", "(", "subject", ",", "cam_pos", ",", "video_id_curr", ",", "H", "[", "'vis'", "]", ",", "H", "[", "'total'", "]", ",", "'---jjfiejrjjf'", ")", "\n", "fixed_length_history", "[", "subject", "]", "[", "cam_pos", "]", "[", "video_id_curr", "]", "=", "H", "\n", "# plt.plot(np.array(H['pi'])[:, 0], np.array(H['pi'])[:, 1])", "\n", "# plt.show()", "\n", "# check_dict(memory_pi_star)", "\n", "# check_dict(fixed_length_history)", "\n", "# print(one_video_to_select, '---jfejijij evec.py')", "\n", "# st()", "\n", "", "", "", "return", "fixed_length_history", "\n", "", "def", "write_empty_memories", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.evec.EVEC.write_empty_memories": [[202, 210], ["None"], "methods", ["None"], ["", "def", "write_empty_memories", "(", "self", ")", ":", "\n", "        ", "self", ".", "memory_pi", "=", "{", "}", "\n", "self", ".", "memory_bi", "=", "{", "}", "\n", "self", ".", "memory_pi_star", "=", "{", "}", "\n", "self", ".", "memory_pi_mean_std", "=", "{", "}", "\n", "self", ".", "memory_pi_mean_after_outlier_removal", "=", "{", "}", "\n", "self", ".", "memory_video_id", "=", "{", "}", "# for memory augemented results", "\n", "self", ".", "memory_last_update_at", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.evec.EVEC.forward": [[211, 622], ["evec.EVEC.calculate_additional_labels", "range", "intermediate_dicts[].keys", "full_intermediate_dict.keys", "evec.EVEC.calculate_losses_and_metrics", "next", "next.items", "evec.EVEC.from_g_to_PoG_history", "intermediate_dicts.append", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "k.startswith", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "len", "iter", "next", "isinstance", "evec.EVEC.eye_net", "evec.EVEC.eye_net", "evec.EVEC.from_g_to_PoG_history", "evec.EVEC.from_g_to_PoG_history", "evec.EVEC.refine_net", "refined_heatmap_history.append", "common.soft_argmax", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "common.calculate_combined_gaze_direction", "isinstance", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "next.values", "iter", "len", "sub_input_dict[].detach().cpu().numpy", "sub_input_dict[].detach().cpu().numpy", "common.apply_offset_augmentation", "common.batch_make_gaze_history_maps", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "common.calculate_combined_gaze_direction", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "next.values", "range", "sub_input_dict[].detach().cpu", "sub_input_dict[].detach().cpu", "sub_input_dict[].detach", "sub_input_dict[].detach"], "methods", ["home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.eve.EVE.calculate_additional_labels", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.eve.EVE.calculate_losses_and_metrics", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.eve.EVE.from_g_to_PoG_history", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.eve.EVE.from_g_to_PoG_history", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.eve.EVE.from_g_to_PoG_history", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.common.soft_argmax", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.common.calculate_combined_gaze_direction", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.common.apply_offset_augmentation", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.common.batch_make_gaze_history_maps", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.common.calculate_combined_gaze_direction"], ["", "def", "forward", "(", "self", ",", "full_input_dict", ",", "create_images", "=", "False", ",", "current_epoch", "=", "None", ")", ":", "\n", "# tt0 = time.time()", "\n", "        ", "if", "self", ".", "training", ":", "# pick first source", "\n", "            ", "assert", "len", "(", "full_input_dict", ")", "==", "1", "# for now say there's 1 training data source", "\n", "full_input_dict", "=", "next", "(", "iter", "(", "full_input_dict", ".", "values", "(", ")", ")", ")", "\n", "\n", "# There are some labels that we need to calculate ourselves", "\n", "# print(device, current_epoch, create_images, '---nbiefiko eve.py')", "\n", "", "self", ".", "calculate_additional_labels", "(", "full_input_dict", ",", "current_epoch", "=", "current_epoch", ")", "\n", "\n", "# NOTE: In general, parts of the architecture will read from `input_dict`", "\n", "#       and write to `output_dict`. However, as we want some modularity,", "\n", "#       the routines will always look for previous-step estimates first,", "\n", "#       which will exist in `output_dict`.", "\n", "#", "\n", "#       For example, if the key `left_gaze_origin` exists in `output_dict`,", "\n", "#       the following routines will use this estimate instead of the", "\n", "#       ground-truth existing in `input_dict`.", "\n", "\n", "# self.peek_dict(full_input_dict, '---ejijioj')", "\n", "\n", "intermediate_dicts", "=", "[", "]", "# One entry per time step in sequence", "\n", "initial_heatmap_history", "=", "[", "]", "\n", "refined_heatmap_history", "=", "[", "]", "\n", "\n", "sequence_len", "=", "next", "(", "iter", "(", "full_input_dict", ".", "values", "(", ")", ")", ")", ".", "shape", "[", "1", "]", "\n", "# print('jiugong enabled', self.jiugong_enabled, '---nbuhjefi eve.py')", "\n", "# tt1 = time.time()", "\n", "#memory_visual_center = self.retrieve_memory_visual_center(full_input_dict)", "\n", "\n", "for", "t", "in", "range", "(", "sequence_len", ")", ":", "\n", "\n", "# tm0 = time.time()", "\n", "# Create new dict formed only of the specific camera view's data", "\n", "            ", "sub_input_dict", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "full_input_dict", ".", "items", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "v", ",", "torch", ".", "Tensor", ")", ":", "\n", "                    ", "sub_v", "=", "v", "[", ":", ",", "t", ",", ":", "]", "if", "v", ".", "ndim", ">", "2", "else", "v", "[", ":", ",", "t", "]", "\n", "sub_input_dict", "[", "k", "]", "=", "sub_v", "\n", "\n", "# if t == 0:", "\n", "#     suffix = '_'+full_input_dict['participant'][0]+'_'+full_input_dict['subfolder'][0]+'_'+full_input_dict['camera'][0]", "\n", "#     save_image_to_temp(sub_input_dict['left_eye_patch'][0], 'left_eye_patch'+suffix)", "\n", "#     save_image_to_temp(sub_input_dict['right_eye_patch'][0], 'right_eye_patch'+suffix)", "\n", "\n", "# Step 0) Define output structure that will hold", "\n", "#         - intermediate outputs", "\n", "#         - final outputs", "\n", "#         - individual loss terms", "\n", "", "", "sub_output_dict", "=", "{", "}", "\n", "\n", "# Step 1a) From each eye patch, estimate gaze direction and pupil size", "\n", "previous_output_dict", "=", "(", "intermediate_dicts", "[", "-", "1", "]", "if", "len", "(", "intermediate_dicts", ")", ">", "0", "else", "None", ")", "\n", "#sub_input_dict['previous_output_dict'] = previous_output_dict", "\n", "\n", "self", ".", "plot_this_sample", "=", "False", "\n", "\n", "subject", "=", "full_input_dict", "[", "'participant'", "]", "[", "0", "]", "\n", "video_id", "=", "full_input_dict", "[", "'subfolder'", "]", "[", "0", "]", "\n", "cam_pos", "=", "full_input_dict", "[", "'camera'", "]", "[", "0", "]", "\n", "if", "self", ".", "one_sample_to_plot", "is", "not", "None", ":", "\n", "                ", "sub_to_plot", ",", "video_id_to_plot", ",", "cam_pos_to_plot", ",", "i_to_plot", ",", "region_to_plot", "=", "self", ".", "one_sample_to_plot", "\n", "self", ".", "plot_this_sample", "=", "(", "subject", "==", "sub_to_plot", ")", "and", "(", "video_id", "==", "video_id_to_plot", ")", "and", "(", "cam_pos", "==", "cam_pos_to_plot", ")", "and", "(", "i_to_plot", "==", "self", ".", "frame_count", ")", "\n", "", "if", "self", ".", "plot_this_sample", ":", "\n", "                ", "self", ".", "plotted", "=", "True", "\n", "self", ".", "plotting_materials_one_sample", "[", "'subject'", "]", "=", "subject", "\n", "self", ".", "plotting_materials_one_sample", "[", "'video_id'", "]", "=", "video_id", "\n", "self", ".", "plotting_materials_one_sample", "[", "'camera'", "]", "=", "cam_pos", "\n", "self", ".", "plotting_materials_one_sample", "[", "'ii'", "]", "=", "i_to_plot", "\n", "pass", "\n", "#st()", "\n", "\n", "# tm1 = time.time()", "\n", "", "if", "config", ".", "eye_side", "in", "[", "'left'", ",", "'binocular'", "]", ":", "\n", "#self.eye_net.forward_kwargs['side'] = 'left'", "\n", "# sub_output_dict_left =  self.eye_net(sub_input_dict, side='left') # nboiwjfoij", "\n", "# sub_output_dict = sub_output_dict_left", "\n", "                ", "self", ".", "eye_net", "(", "sub_input_dict", ",", "output_dict", "=", "sub_output_dict", ",", "previous_output_dict", "=", "previous_output_dict", ",", "side", "=", "'left'", ")", "# nboiwjfoij", "\n", "# self.peek_dict(sub_output_dict_left, '---nejifj eve.py')", "\n", "# tm2 = time.time()", "\n", "", "if", "config", ".", "eye_side", "in", "[", "'right'", ",", "'binocular'", "]", ":", "\n", "#self.eye_net.forward_kwargs['side'] = 'right'", "\n", "# sub_output_dict_right =  self.eye_net(sub_input_dict, side='right') # nboiwjfoij", "\n", "# sub_output_dict = dict(list(sub_output_dict.items()) + list(sub_output_dict_right.items()))", "\n", "                ", "self", ".", "eye_net", "(", "sub_input_dict", ",", "output_dict", "=", "sub_output_dict", ",", "previous_output_dict", "=", "previous_output_dict", ",", "side", "=", "'right'", ")", "# nwfeeeoij", "\n", "\n", "", "if", "self", ".", "plot_this_sample", ":", "\n", "                ", "self", ".", "plotting_materials_one_sample", "[", "'left_eye_patch'", "]", "=", "sub_input_dict", "[", "'left_eye_patch'", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", "\n", "self", ".", "plotting_materials_one_sample", "[", "'right_eye_patch'", "]", "=", "sub_input_dict", "[", "'right_eye_patch'", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", "\n", "\n", "# self.peek_dict(sub_output_dict_right, '---jfeifjoij eve.py')", "\n", "# self.peek_dict(sub_output_dict, '---jctvybu eve.py')", "\n", "# tm3 = time.time()", "\n", "\n", "# self.eye_net(sub_input_dict, sub_output_dict, side='right',", "\n", "#              previous_output_dict=previous_output_dict)", "\n", "#st()", "\n", "# During training: add random offsets to gaze directions", "\n", "\n", "", "if", "self", ".", "training", "and", "config", ".", "refine_net_do_offset_augmentation", ":", "\n", "#st()", "\n", "# eye_list = self.generate_eye_list()", "\n", "                ", "for", "side", "in", "[", "'left'", ",", "'right'", "]", ":", "\n", "                    ", "sub_output_dict", "[", "side", "+", "'_g_initial_unaugmented'", "]", "=", "sub_output_dict", "[", "side", "+", "'_g_initial'", "]", "\n", "\n", "# print(sub_input_dict[side + '_kappa_fake'], '--w-fijijd eve.py')", "\n", "# print(sub_input_dict['head_R'], '--weeffffjd')", "\n", "# print(sub_output_dict[side + '_g_initial'], '--w-efjoij eve.py')", "\n", "\n", "sub_output_dict", "[", "side", "+", "'_g_initial'", "]", "=", "apply_offset_augmentation", "(", "\n", "sub_output_dict", "[", "side", "+", "'_g_initial'", "]", ",", "\n", "sub_input_dict", "[", "'head_R'", "]", ",", "\n", "sub_input_dict", "[", "side", "+", "'_kappa_fake'", "]", ",", "\n", ")", "\n", "\n", "", "self", ".", "from_g_to_PoG_history", "(", "full_input_dict", ",", "sub_input_dict", ",", "sub_output_dict", ",", "\n", "input_suffix", "=", "'initial'", ",", "\n", "output_suffix", "=", "'initial_unaugmented'", ",", "\n", "heatmap_history", "=", "None", ",", "\n", "gaze_heatmap_sigma", "=", "config", ".", "gaze_heatmap_sigma_initial", ",", "\n", "history_heatmap_sigma", "=", "config", ".", "gaze_heatmap_sigma_history", ")", "\n", "\n", "self", ".", "from_g_to_PoG_history", "(", "full_input_dict", ",", "sub_input_dict", ",", "sub_output_dict", ",", "\n", "input_suffix", "=", "'initial'", ",", "\n", "output_suffix", "=", "'initial_augmented'", ",", "\n", "heatmap_history", "=", "None", ",", "\n", "gaze_heatmap_sigma", "=", "config", ".", "gaze_heatmap_sigma_initial", ",", "\n", "history_heatmap_sigma", "=", "config", ".", "gaze_heatmap_sigma_history", ")", "\n", "\n", "# Step 1b) Estimate PoG, create heatmaps, and heatmap history", "\n", "# look for right_POG_cm_initial", "\n", "", "self", ".", "from_g_to_PoG_history", "(", "full_input_dict", ",", "sub_input_dict", ",", "sub_output_dict", ",", "\n", "input_suffix", "=", "'initial'", ",", "\n", "output_suffix", "=", "'initial'", ",", "\n", "heatmap_history", "=", "initial_heatmap_history", ",", "\n", "gaze_heatmap_sigma", "=", "config", ".", "gaze_heatmap_sigma_initial", ",", "\n", "history_heatmap_sigma", "=", "config", ".", "gaze_heatmap_sigma_history", ")", "\n", "\n", "# Step 2) Digest screen content frame", "\n", "if", "self", ".", "refine_net", ":", "\n", "                ", "self", ".", "refine_net", "(", "sub_input_dict", ",", "sub_output_dict", ",", "previous_output_dict", "=", "previous_output_dict", ")", "\n", "\n", "# Step 2b) Update refined heatmap history", "\n", "refined_heatmap_history", ".", "append", "(", "sub_output_dict", "[", "'heatmap_final'", "]", ")", "\n", "refined_gaze_history_maps", "=", "batch_make_gaze_history_maps", "(", "\n", "full_input_dict", "[", "'timestamps'", "]", ",", "refined_heatmap_history", ",", "\n", "full_input_dict", "[", "'PoG_px_tobii_validity'", "]", ",", "\n", ")", "if", "'PoG_px_tobii'", "in", "full_input_dict", "else", "None", "\n", "\n", "# Step 3) Yield refined final PoG estimate(s)", "\n", "sub_output_dict", "[", "'PoG_px_final'", "]", "=", "soft_argmax", "(", "sub_output_dict", "[", "'heatmap_final'", "]", ")", "\n", "cm_per_px", "=", "0.1", "*", "sub_input_dict", "[", "'millimeters_per_pixel'", "]", "\n", "sub_output_dict", "[", "'PoG_cm_final'", "]", "=", "torch", ".", "mul", "(", "\n", "sub_output_dict", "[", "'PoG_px_final'", "]", ",", "cm_per_px", ",", "\n", ")", "\n", "\n", "# and gaze direction '---bwejijjd eve.py'", "\n", "sub_output_dict", "[", "'g_final'", "]", "=", "calculate_combined_gaze_direction", "(", "\n", "sub_input_dict", "[", "'o'", "]", ",", "\n", "10.0", "*", "sub_output_dict", "[", "'PoG_cm_final'", "]", ",", "\n", "sub_input_dict", "[", "'left_R'", "]", ",", "# by definition, 'left_R' == 'right_R'", "\n", "sub_input_dict", "[", "'camera_transformation'", "]", ",", "\n", ")", "\n", "", "else", ":", "\n", "                ", "if", "not", "self", ".", "training", ":", "# do memory center correction during inference only", "\n", "# if there is no refine net, we still want to have a final result entry in output dict", "\n", "                    ", "sub_output_dict", "[", "'PoG_px_final'", "]", "=", "sub_output_dict", "[", "'PoG_px_initial'", "]", "\n", "cm_per_px", "=", "0.1", "*", "sub_input_dict", "[", "'millimeters_per_pixel'", "]", "\n", "sub_output_dict", "[", "'PoG_cm_final'", "]", "=", "torch", ".", "mul", "(", "sub_output_dict", "[", "'PoG_px_final'", "]", ",", "cm_per_px", ")", "\n", "sub_output_dict", "[", "'g_final'", "]", "=", "calculate_combined_gaze_direction", "(", "\n", "sub_input_dict", "[", "'o'", "]", ",", "\n", "10.0", "*", "sub_output_dict", "[", "'PoG_cm_final'", "]", ",", "\n", "sub_input_dict", "[", "'left_R'", "]", ",", "# by definition, 'left_R' == 'right_R'", "\n", "sub_input_dict", "[", "'camera_transformation'", "]", ",", "\n", ")", "\n", "# if config.central_calibration_enabled:", "\n", "#     sub_output_dict['predicted_tracking_validity_final'] = sub_output_dict['predicted_tracking_validity_initial']", "\n", "#print('g_final added')", "\n", "#raise", "\n", "\n", "# Store back outputs", "\n", "", "", "intermediate_dicts", ".", "append", "(", "sub_output_dict", ")", "\n", "# tm4 = time.time()", "\n", "# timeMarks = np.array([tm0, tm1, tm2, tm3, tm4,])", "\n", "# timePeriodsStr = ['tm' + str(i) + '.tm' + str(i + 1) for i in range(len(timeMarks) - 1)]", "\n", "# timePeriods = timeMarks[1:] - timeMarks[:-1]", "\n", "# if t == 45:", "\n", "#     print('seqence', t, list(zip(timePeriodsStr, timePeriods)), '---fekfokekof eve.py')", "\n", "\n", "self", ".", "frame_count", "+=", "1", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "# tt2 = time.time()", "\n", "# Merge intermediate outputs over time steps to yield BxTxF tensors", "\n", "", "full_intermediate_dict", "=", "{", "}", "\n", "for", "k", "in", "intermediate_dicts", "[", "0", "]", ".", "keys", "(", ")", ":", "\n", "            ", "sample", "=", "intermediate_dicts", "[", "0", "]", "[", "k", "]", "\n", "if", "not", "isinstance", "(", "sample", ",", "torch", ".", "Tensor", ")", ":", "\n", "                ", "continue", "\n", "", "full_intermediate_dict", "[", "k", "]", "=", "torch", ".", "stack", "(", "[", "\n", "intermediate_dicts", "[", "i", "]", "[", "k", "]", "for", "i", "in", "range", "(", "sequence_len", ")", "\n", "]", ",", "axis", "=", "1", ")", "\n", "# print(self.peek_dict(full_intermediate_dict), '---hhuefij eve.py')", "\n", "\n", "# Copy over some values that we want to yield as NN output", "\n", "", "output_dict", "=", "{", "}", "\n", "for", "k", "in", "full_intermediate_dict", ".", "keys", "(", ")", ":", "\n", "            ", "if", "k", ".", "startswith", "(", "'output_'", ")", ":", "\n", "                ", "output_dict", "[", "k", "]", "=", "full_intermediate_dict", "[", "k", "]", "\n", "# print(self.peek_dict(output_dict), '---wfefddfsdf eve.py')", "\n", "\n", "", "", "if", "self", ".", "eye_side", "in", "[", "'left'", ",", "'binocular'", "]", ":", "\n", "            ", "output_dict", "[", "'left_pupil_size'", "]", "=", "full_intermediate_dict", "[", "'left_pupil_size'", "]", "\n", "if", "config", ".", "eye_validity_net_enabled", ":", "\n", "                ", "output_dict", "[", "'left_tracking_validity'", "]", "=", "full_intermediate_dict", "[", "'left_tracking_validity'", "]", "\n", "", "", "if", "self", ".", "eye_side", "in", "[", "'right'", ",", "'binocular'", "]", ":", "\n", "            ", "output_dict", "[", "'right_pupil_size'", "]", "=", "full_intermediate_dict", "[", "'right_pupil_size'", "]", "\n", "if", "config", ".", "eye_validity_net_enabled", ":", "\n", "                ", "output_dict", "[", "'right_tracking_validity'", "]", "=", "full_intermediate_dict", "[", "'right_tracking_validity'", "]", "\n", "\n", "", "", "if", "config", ".", "load_full_frame_for_visualization", ":", "\n", "# Copy over some values manually", "\n", "            ", "if", "'left_g_tobii'", "in", "full_input_dict", ":", "\n", "                ", "output_dict", "[", "'left_g_gt'", "]", "=", "full_input_dict", "[", "'left_g_tobii'", "]", "\n", "", "if", "'right_g_tobii'", "in", "full_input_dict", ":", "\n", "                ", "output_dict", "[", "'right_g_gt'", "]", "=", "full_input_dict", "[", "'right_g_tobii'", "]", "\n", "\n", "", "output_dict", "[", "'PoG_px_gt'", "]", "=", "full_input_dict", "[", "'PoG_px_tobii'", "]", "\n", "# print('lenth of PoG_px_gt', len(output_dict['PoG_px_gt']), '---nbjjfjef eye.py')", "\n", "output_dict", "[", "'PoG_px_gt_validity'", "]", "=", "full_input_dict", "[", "'PoG_px_tobii_validity'", "]", "\n", "\n", "if", "self", ".", "eye_side", "in", "[", "'left'", ",", "'binocular'", "]", ":", "\n", "                ", "output_dict", "[", "'left_g_initial'", "]", "=", "full_intermediate_dict", "[", "'left_g_initial'", "]", "\n", "", "if", "self", ".", "eye_side", "in", "[", "'right'", ",", "'binocular'", "]", ":", "\n", "                ", "output_dict", "[", "'right_g_initial'", "]", "=", "full_intermediate_dict", "[", "'right_g_initial'", "]", "\n", "", "output_dict", "[", "'PoG_px_initial'", "]", "=", "full_intermediate_dict", "[", "'PoG_px_initial'", "]", "\n", "if", "config", ".", "refine_net_enabled", ":", "\n", "                ", "output_dict", "[", "'g_final'", "]", "=", "full_intermediate_dict", "[", "'g_final'", "]", "\n", "output_dict", "[", "'PoG_px_final'", "]", "=", "full_intermediate_dict", "[", "'PoG_px_final'", "]", "\n", "\n", "", "", "if", "self", ".", "output_predictions", ":", "\n", "            ", "output_dict", "[", "'timestamps'", "]", "=", "full_input_dict", "[", "'timestamps'", "]", "\n", "output_dict", "[", "'o'", "]", "=", "full_input_dict", "[", "'o'", "]", "\n", "output_dict", "[", "'left_R'", "]", "=", "full_input_dict", "[", "'left_R'", "]", "\n", "output_dict", "[", "'head_R'", "]", "=", "full_input_dict", "[", "'head_R'", "]", "\n", "output_dict", "[", "'g_initial'", "]", "=", "full_intermediate_dict", "[", "'g_initial'", "]", "\n", "output_dict", "[", "'PoG_px_initial'", "]", "=", "full_intermediate_dict", "[", "'PoG_px_initial'", "]", "\n", "output_dict", "[", "'PoG_cm_initial'", "]", "=", "full_intermediate_dict", "[", "'PoG_cm_initial'", "]", "\n", "output_dict", "[", "'left_PoG_cm_initial'", "]", "=", "full_intermediate_dict", "[", "'left_PoG_cm_initial'", "]", "\n", "output_dict", "[", "'right_PoG_cm_initial'", "]", "=", "full_intermediate_dict", "[", "'right_PoG_cm_initial'", "]", "\n", "\n", "if", "config", ".", "central_calibration_enabled", ":", "\n", "                ", "output_dict", "[", "'PoG_px_initial_for_memory'", "]", "=", "full_intermediate_dict", "[", "'PoG_px_initial_for_memory'", "]", "\n", "output_dict", "[", "'PoG_cm_initial_for_memory'", "]", "=", "full_intermediate_dict", "[", "'PoG_cm_initial_for_memory'", "]", "\n", "", "output_dict", "[", "'millimeters_per_pixel'", "]", "=", "full_input_dict", "[", "'millimeters_per_pixel'", "]", "\n", "output_dict", "[", "'pixels_per_millimeter'", "]", "=", "full_input_dict", "[", "'pixels_per_millimeter'", "]", "\n", "output_dict", "[", "'camera_transformation'", "]", "=", "full_input_dict", "[", "'camera_transformation'", "]", "\n", "output_dict", "[", "'inv_camera_transformation'", "]", "=", "full_input_dict", "[", "'inv_camera_transformation'", "]", "\n", "\n", "if", "self", ".", "refine_net", ":", "\n", "                ", "output_dict", "[", "'g_final'", "]", "=", "full_intermediate_dict", "[", "'g_final'", "]", "\n", "output_dict", "[", "'PoG_px_final'", "]", "=", "full_intermediate_dict", "[", "'PoG_px_final'", "]", "\n", "output_dict", "[", "'PoG_cm_final'", "]", "=", "full_intermediate_dict", "[", "'PoG_cm_final'", "]", "\n", "\n", "", "if", "(", "not", "self", ".", "training", ")", "and", "config", ".", "central_calibration_enabled", ":", "# do central calibration only during inference", "\n", "#output_dict['predicted_tracking_validity_final'] = full_intermediate_dict['predicted_tracking_validity_final']", "\n", "                ", "output_dict", "[", "'g_final'", "]", "=", "full_intermediate_dict", "[", "'g_final'", "]", "\n", "output_dict", "[", "'PoG_px_final'", "]", "=", "full_intermediate_dict", "[", "'PoG_px_final'", "]", "\n", "output_dict", "[", "'PoG_cm_final'", "]", "=", "full_intermediate_dict", "[", "'PoG_cm_final'", "]", "\n", "\n", "# Ground-truth related data", "\n", "", "if", "'g'", "in", "full_input_dict", ":", "\n", "                ", "output_dict", "[", "'g'", "]", "=", "full_input_dict", "[", "'g'", "]", "\n", "output_dict", "[", "'validity'", "]", "=", "full_input_dict", "[", "'PoG_px_tobii_validity'", "]", "\n", "output_dict", "[", "'PoG_cm'", "]", "=", "full_input_dict", "[", "'PoG_cm_tobii'", "]", "\n", "output_dict", "[", "'PoG_px'", "]", "=", "full_input_dict", "[", "'PoG_px_tobii'", "]", "\n", "\n", "\n", "# Calculate all loss terms and metrics (scores)", "\n", "", "", "self", ".", "calculate_losses_and_metrics", "(", "full_input_dict", ",", "full_intermediate_dict", ",", "output_dict", ")", "\n", "\n", "# Calculate the final combined (and weighted) loss", "\n", "if", "not", "config", ".", "multi_gpu", ":", "\n", "# full_loss = torch.zeros(()).to(device)", "\n", "            ", "full_loss", "=", "torch", ".", "zeros", "(", "(", ")", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "            ", "full_loss", "=", "torch", ".", "zeros", "(", "(", ")", ")", ".", "cuda", "(", ")", "\n", "\n", "# Add all losses for the eye network", "\n", "#if self.eye_side == 'binocular':", "\n", "", "if", "'loss_ang_left_g_initial'", "in", "output_dict", ":", "\n", "            ", "full_loss", "+=", "config", ".", "loss_coeff_g_ang_initial", "*", "(", "\n", "output_dict", "[", "'loss_ang_left_g_initial'", "]", "+", "\n", "output_dict", "[", "'loss_ang_right_g_initial'", "]", "\n", ")", "\n", "", "if", "'loss_mse_left_PoG_cm_initial'", "in", "output_dict", "and", "config", ".", "loss_coeff_PoG_cm_initial", ">", "0.0", ":", "\n", "            ", "full_loss", "+=", "config", ".", "loss_coeff_PoG_cm_initial", "*", "(", "\n", "output_dict", "[", "'loss_mse_left_PoG_cm_initial'", "]", "+", "\n", "output_dict", "[", "'loss_mse_right_PoG_cm_initial'", "]", "\n", ")", "\n", "", "if", "'loss_l1_left_pupil_size'", "in", "output_dict", ":", "\n", "            ", "full_loss", "+=", "config", ".", "loss_coeff_pupil_size", "*", "(", "\n", "output_dict", "[", "'loss_l1_left_pupil_size'", "]", "+", "\n", "output_dict", "[", "'loss_l1_right_pupil_size'", "]", "\n", ")", "\n", "\n", "", "if", "(", "'loss_bce_left_tracking_validity'", "in", "output_dict", ")", ":", "\n", "            ", "full_loss", "+=", "config", ".", "loss_coeff_tracking_validity", "*", "(", "\n", "output_dict", "[", "'loss_bce_left_tracking_validity'", "]", "+", "\n", "output_dict", "[", "'loss_bce_right_tracking_validity'", "]", "\n", ")", "\n", "\n", "# tt3 = time.time()", "\n", "# Add all losses for the eye network", "\n", "", "if", "'loss_ang_left_g_initial'", "in", "output_dict", ":", "\n", "            ", "full_loss", "+=", "config", ".", "loss_coeff_g_ang_initial", "*", "(", "\n", "output_dict", "[", "'loss_ang_left_g_initial'", "]", "+", "\n", "output_dict", "[", "'loss_ang_right_g_initial'", "]", "\n", ")", "\n", "", "if", "'loss_mse_left_PoG_cm_initial'", "in", "output_dict", "and", "config", ".", "loss_coeff_PoG_cm_initial", ">", "0.0", ":", "\n", "            ", "full_loss", "+=", "config", ".", "loss_coeff_PoG_cm_initial", "*", "(", "\n", "output_dict", "[", "'loss_mse_left_PoG_cm_initial'", "]", "+", "\n", "output_dict", "[", "'loss_mse_right_PoG_cm_initial'", "]", "\n", ")", "\n", "", "if", "'loss_l1_left_pupil_size'", "in", "output_dict", ":", "\n", "            ", "full_loss", "+=", "config", ".", "loss_coeff_pupil_size", "*", "(", "\n", "output_dict", "[", "'loss_l1_left_pupil_size'", "]", "+", "\n", "output_dict", "[", "'loss_l1_right_pupil_size'", "]", "\n", ")", "\n", "\n", "\n", "# # Add all losses for the eye network", "\n", "# if ('loss_ang_left_g_initial' in output_dict) or ('loss_ang_right_g_initial' in output_dict):", "\n", "#     full_loss += config.loss_coeff_g_ang_initial * (", "\n", "#         (output_dict['loss_ang_left_g_initial'] if 'loss_ang_left_g_initial' in output_dict else 0) * left_weight +", "\n", "#         (output_dict['loss_ang_right_g_initial'] if 'loss_ang_right_g_initial' in output_dict else 0) * right_weight", "\n", "#         # output_dict['loss_ang_left_g_initial'] * 2", "\n", "#     )", "\n", "# if ('loss_mse_left_PoG_cm_initial' in output_dict) or ('loss_mse_right_PoG_cm_initial' in output_dict) \\", "\n", "#         and config.loss_coeff_PoG_cm_initial > 0.0:", "\n", "#     full_loss += config.loss_coeff_PoG_cm_initial * (", "\n", "#             (output_dict['loss_mse_left_PoG_cm_initial'] if 'loss_mse_left_PoG_cm_initial' in output_dict else 0) * left_weight +", "\n", "#             (output_dict['loss_mse_right_PoG_cm_initial'] if 'loss_mse_right_PoG_cm_initial' in output_dict else 0) * right_weight", "\n", "#         # output_dict['loss_mse_right_PoG_cm_initial']", "\n", "#     )", "\n", "# if ('loss_l1_left_pupil_size' in output_dict) or ('loss_l1_right_pupil_size' in output_dict):", "\n", "#     full_loss += config.loss_coeff_pupil_size * (", "\n", "#             (output_dict['loss_l1_left_pupil_size'] if 'loss_l1_left_pupil_size' in output_dict else 0) * left_weight +", "\n", "#             (output_dict['loss_l1_right_pupil_size'] if 'loss_l1_right_pupil_size' in output_dict else 0) * right_weight", "\n", "#         # output_dict['loss_l1_right_pupil_size']", "\n", "#     )", "\n", "\n", "# Add all losses for the GazeRefineNet", "\n", "", "if", "'loss_mse_PoG_cm_final'", "in", "output_dict", ":", "\n", "            ", "full_loss", "+=", "config", ".", "loss_coeff_PoG_cm_final", "*", "output_dict", "[", "'loss_mse_PoG_cm_final'", "]", "\n", "", "if", "'loss_ce_heatmap_initial'", "in", "output_dict", ":", "\n", "            ", "full_loss", "+=", "config", ".", "loss_coeff_heatmap_ce_initial", "*", "output_dict", "[", "'loss_ce_heatmap_initial'", "]", "\n", "", "if", "'loss_ce_heatmap_final'", "in", "output_dict", ":", "\n", "            ", "full_loss", "+=", "config", ".", "loss_coeff_heatmap_ce_final", "*", "output_dict", "[", "'loss_ce_heatmap_final'", "]", "\n", "", "if", "'loss_mse_heatmap_final'", "in", "output_dict", ":", "\n", "            ", "full_loss", "+=", "config", ".", "loss_coeff_heatmap_mse_final", "*", "output_dict", "[", "'loss_mse_heatmap_final'", "]", "\n", "\n", "# print('full_loss size', full_loss.size(), output_dict['loss_ang_left_g_initial'], '---nbejijijfjf eve.py')", "\n", "", "output_dict", "[", "'full_loss'", "]", "=", "full_loss", "\n", "\n", "# Store away tensors for visualization", "\n", "# tt4 = time.time()", "\n", "if", "create_images", ":", "\n", "            ", "if", "config", ".", "load_full_frame_for_visualization", ":", "\n", "                ", "output_dict", "[", "'both_eye_patch'", "]", "=", "torch", ".", "cat", "(", "[", "\n", "full_input_dict", "[", "'right_eye_patch'", "]", ",", "full_input_dict", "[", "'left_eye_patch'", "]", ",", "\n", "]", ",", "axis", "=", "4", ")", "\n", "", "if", "config", ".", "load_screen_content", ":", "\n", "                ", "output_dict", "[", "'screen_frame'", "]", "=", "full_input_dict", "[", "'screen_frame'", "]", "[", ":", ",", "-", "1", ",", ":", "]", "\n", "", "if", "'history_initial'", "in", "full_intermediate_dict", ":", "\n", "                ", "output_dict", "[", "'initial_gaze_history'", "]", "=", "full_intermediate_dict", "[", "'history_initial'", "]", "[", ":", ",", "-", "1", ",", ":", "]", "# noqa", "\n", "", "if", "'heatmap_initial'", "in", "full_intermediate_dict", ":", "\n", "                ", "output_dict", "[", "'initial_heatmap'", "]", "=", "full_intermediate_dict", "[", "'heatmap_initial'", "]", "[", ":", ",", "-", "1", ",", ":", "]", "\n", "", "if", "'heatmap_final'", "in", "full_intermediate_dict", ":", "\n", "                ", "output_dict", "[", "'final_heatmap'", "]", "=", "full_intermediate_dict", "[", "'heatmap_final'", "]", "[", ":", ",", "-", "1", ",", ":", "]", "\n", "output_dict", "[", "'refined_gaze_history'", "]", "=", "refined_gaze_history_maps", "\n", "", "if", "'heatmap_final'", "in", "full_input_dict", ":", "\n", "                ", "output_dict", "[", "'gt_heatmap'", "]", "=", "full_input_dict", "[", "'heatmap_final'", "]", "[", ":", ",", "-", "1", ",", ":", "]", "\n", "\n", "# self.peek_dict(output_dict, '---fhfweohih eve.py')", "\n", "# tt5 = time.time()", "\n", "# timeMarks = np.array([tt0, tt1, tt2, tt3, tt4, tt5,])", "\n", "# timePeriodsStr = ['tt' + str(i) + '.tt' + str(i + 1) for i in range(len(timeMarks) - 1)]", "\n", "# timePeriods = timeMarks[1:] - timeMarks[:-1]", "\n", "# print('seqence', t, list(zip(timePeriodsStr, timePeriods)), '---mnjiiytgyuj eve.py')", "\n", "\n", "# if 'participant' in full_input_dict.keys():", "\n", "", "", "participant", "=", "full_input_dict", "[", "'participant'", "]", "[", "0", "]", "\n", "subfolder", "=", "full_input_dict", "[", "'subfolder'", "]", "[", "0", "]", "\n", "camera", "=", "full_input_dict", "[", "'camera'", "]", "[", "0", "]", "\n", "str_prefix", "=", "participant", "+", "'_'", "+", "camera", "\n", "# else:", "\n", "#     str_prefix = 'unknown participant'", "\n", "\n", "if", "config", ".", "central_calibration_enabled", ":", "\n", "            ", "memory_bi", "=", "self", ".", "memory_bi", "[", "participant", "]", "[", "camera", "]", "\n", "#print('memory:', str_prefix, 'valid percent:', '{:.2%}'.format(np.sum(memory_bi)/len(memory_bi) if len(memory_bi) > 0 else 0), '---kkejjood evec.py')", "\n", "", "return", "output_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.evec.EVEC.calculate_losses_and_metrics": [[624, 821], ["mse_loss", "euclidean_loss", "cross_entropy_loss", "cross_entropy_loss", "mse_loss", "mse_loss", "euclidean_loss", "mse_loss", "euclidean_loss", "angular_loss", "mse_loss", "euclidean_loss", "mse_loss", "euclidean_loss", "angular_loss", "angular_loss", "mse_loss", "euclidean_loss", "euclidean_loss", "l1_loss", "euclidean_loss", "euclidean_loss", "angular_loss", "bec_loss_without_validity_check", "bec_loss_without_validity_check", "input_dict[].type().cuda", "input_dict[].type().cuda", "input_dict[].type", "input_dict[].type"], "methods", ["None"], ["", "def", "calculate_losses_and_metrics", "(", "self", ",", "input_dict", ",", "intermediate_dict", ",", "output_dict", ")", ":", "\n", "# Initial estimates of gaze direction and PoG", "\n", "        ", "for", "side", "in", "(", "'left'", ",", "'right'", ")", ":", "\n", "            ", "input_key", "=", "side", "+", "'_g_tobii'", "\n", "interm_key", "=", "(", "side", "+", "'_g_initial_unaugmented'", "\n", "if", "self", ".", "training", "and", "config", ".", "refine_net_do_offset_augmentation", "\n", "else", "side", "+", "'_g_initial'", ")", "\n", "output_key", "=", "side", "+", "'_g_initial'", "\n", "if", "interm_key", "in", "intermediate_dict", "and", "input_key", "in", "input_dict", ":", "\n", "                ", "output_dict", "[", "'loss_ang_'", "+", "output_key", "]", "=", "angular_loss", "(", "\n", "intermediate_dict", "[", "interm_key", "]", ",", "input_key", ",", "input_dict", ",", "\n", ")", "\n", "\n", "", "input_key", "=", "side", "+", "'_PoG_cm_tobii'", "\n", "interm_key", "=", "(", "side", "+", "'_PoG_cm_initial_unaugmented'", "\n", "if", "self", ".", "training", "and", "config", ".", "refine_net_do_offset_augmentation", "\n", "else", "side", "+", "'_PoG_cm_initial'", ")", "\n", "output_key", "=", "side", "+", "'_PoG_cm_initial'", "\n", "if", "interm_key", "in", "intermediate_dict", "and", "input_key", "in", "input_dict", ":", "\n", "                ", "output_dict", "[", "'loss_mse_'", "+", "output_key", "]", "=", "mse_loss", "(", "\n", "intermediate_dict", "[", "interm_key", "]", ",", "input_key", ",", "input_dict", ",", "\n", ")", "\n", "output_dict", "[", "'metric_euc_'", "+", "output_key", "]", "=", "euclidean_loss", "(", "\n", "intermediate_dict", "[", "interm_key", "]", ",", "input_key", ",", "input_dict", ",", "\n", ")", "\n", "\n", "", "input_key", "=", "side", "+", "'_PoG_tobii'", "\n", "interm_key", "=", "side", "+", "'_PoG_px_initial'", "\n", "if", "interm_key", "in", "intermediate_dict", "and", "input_key", "in", "input_dict", ":", "\n", "                ", "output_dict", "[", "'metric_euc_'", "+", "interm_key", "]", "=", "euclidean_loss", "(", "\n", "intermediate_dict", "[", "interm_key", "]", ",", "input_key", ",", "input_dict", ",", "\n", ")", "\n", "\n", "# Pupil size in mm", "\n", "", "input_key", "=", "side", "+", "'_p'", "\n", "interm_key", "=", "side", "+", "'_pupil_size'", "\n", "if", "interm_key", "in", "intermediate_dict", "and", "input_key", "in", "input_dict", ":", "\n", "                ", "output_dict", "[", "'loss_l1_'", "+", "interm_key", "]", "=", "l1_loss", "(", "\n", "intermediate_dict", "[", "interm_key", "]", ",", "input_key", ",", "input_dict", ",", "\n", ")", "\n", "\n", "# tracking validity [0,1]", "\n", "", "if", "config", ".", "eye_validity_net_enabled", ":", "\n", "                ", "input_key", "=", "side", "+", "'_PoG_tobii_validity'", "\n", "interm_key", "=", "side", "+", "'_tracking_validity'", "\n", "#print(intermediate_dict[interm_key].shape, input_dict[input_key].shape, '---jkejoij evec.py')", "\n", "# print(bec_loss_without_validity_check(", "\n", "#     intermediate_dict[interm_key], input_dict[input_key].type(torch.FloatTensor).cuda(),", "\n", "# ), '---evfejmmm evec.py')", "\n", "# raise", "\n", "if", "interm_key", "in", "intermediate_dict", "and", "input_key", "in", "input_dict", ":", "\n", "                    ", "output_dict", "[", "'loss_bce_'", "+", "interm_key", "]", "=", "bec_loss_without_validity_check", "(", "\n", "intermediate_dict", "[", "interm_key", "]", ",", "input_dict", "[", "input_key", "]", ".", "type", "(", "torch", ".", "FloatTensor", ")", ".", "cuda", "(", ")", ",", "\n", ")", "# loss_bce_left_tracking_validity", "\n", "#print('loss_bce_' + interm_key, intermediate_dict[interm_key], '---ejjjdj evec.py xxxxxxxxxxxxxxxxx' )", "\n", "\n", "# print(input_dict[side + '_eye_patch'][0], '---kweijouij evec.py')", "\n", "# print(intermediate_dict[side + '_PoG_px_initial'], '---dfefdf evec')", "\n", "# print(intermediate_dict[side + '_pupil_size'], '---wejfioj evec')", "\n", "# print(intermediate_dict[interm_key], input_dict[input_key].type(torch.FloatTensor).cuda(), '---jejjii evec')", "\n", "# print('image dimensions', torch.min(input_dict[side + '_eye_patch']), torch.max(input_dict[side + '_eye_patch']), '---efjijii')", "\n", "# print('loss_bce_' + interm_key, output_dict['loss_bce_' + interm_key], '---kkjjkk evec')", "\n", "\n", "\n", "# print(self.peek_dict(input_dict), '---jfjeiejj eve.py')", "\n", "# print(self.peek_dict(intermediate_dict), '---bjejijrfir eve.py')", "\n", "# print(self.peek_dict(output_dict), '---egewfrfr eve.py')", "\n", "\n", "# Left-right consistency", "\n", "#if self.eye_side == 'binocular':", "\n", "", "", "", "if", "'left_PoG_tobii'", "in", "input_dict", "and", "'right_PoG_tobii'", "in", "input_dict", ":", "\n", "            ", "intermediate_dict", "[", "'PoG_cm_initial_validity'", "]", "=", "(", "\n", "input_dict", "[", "'left_PoG_tobii_validity'", "]", "&", "\n", "input_dict", "[", "'right_PoG_tobii_validity'", "]", "\n", ")", "\n", "# set the right_ so that it complies to base_loss_with_validity.py function where validity is retreived", "\n", "# from validity of the second argument (left, right), 'right_..._validity' in this case)", "\n", "intermediate_dict", "[", "'right_PoG_cm_initial_validity'", "]", "=", "intermediate_dict", "[", "'PoG_cm_initial_validity'", "]", "\n", "\n", "# print(('right_PoG_cm_initial' in intermediate_dict.keys()), list(intermediate_dict.keys()), '---njgjeifjij eve.py')", "\n", "# print('line 688 mark', '---jfeijjfd eve.py')", "\n", "output_dict", "[", "'loss_mse_lr_consistency'", "]", "=", "mse_loss", "(", "\n", "intermediate_dict", "[", "'left_PoG_cm_initial'", "]", ",", "\n", "'right_PoG_cm_initial'", ",", "intermediate_dict", ",", "\n", ")", "\n", "output_dict", "[", "'metric_euc_lr_consistency'", "]", "=", "euclidean_loss", "(", "\n", "intermediate_dict", "[", "'left_PoG_cm_initial'", "]", ",", "\n", "'right_PoG_cm_initial'", ",", "intermediate_dict", ",", "\n", ")", "\n", "\n", "\n", "# Initial heatmap CE loss", "\n", "", "input_key", "=", "output_key", "=", "'heatmap_initial'", "\n", "interm_key", "=", "(", "'heatmap_initial_unaugmented'", "\n", "if", "self", ".", "training", "and", "config", ".", "refine_net_do_offset_augmentation", "\n", "else", "'heatmap_initial'", ")", "\n", "if", "interm_key", "in", "intermediate_dict", "and", "input_key", "in", "input_dict", ":", "\n", "            ", "output_dict", "[", "'loss_ce_'", "+", "output_key", "]", "=", "cross_entropy_loss", "(", "\n", "intermediate_dict", "[", "interm_key", "]", ",", "input_key", ",", "input_dict", ",", "\n", ")", "\n", "\n", "# Refined heatmap MSE loss", "\n", "", "input_key", "=", "interm_key", "=", "'heatmap_final'", "\n", "if", "interm_key", "in", "intermediate_dict", "and", "input_key", "in", "input_dict", ":", "\n", "            ", "output_dict", "[", "'loss_ce_'", "+", "interm_key", "]", "=", "cross_entropy_loss", "(", "\n", "intermediate_dict", "[", "interm_key", "]", ",", "input_key", ",", "input_dict", ",", "\n", ")", "\n", "output_dict", "[", "'loss_mse_'", "+", "interm_key", "]", "=", "mse_loss", "(", "\n", "intermediate_dict", "[", "interm_key", "]", ",", "input_key", ",", "input_dict", ",", "\n", ")", "\n", "\n", "# Metrics after applying kappa augmentation", "\n", "", "if", "config", ".", "refine_net_do_offset_augmentation", ":", "\n", "            ", "input_key", "=", "'PoG_px_tobii'", "\n", "interm_key", "=", "'PoG_px_initial_unaugmented'", "\n", "if", "interm_key", "in", "intermediate_dict", "and", "input_key", "in", "input_dict", ":", "\n", "                ", "output_dict", "[", "'metric_euc_'", "+", "interm_key", "]", "=", "euclidean_loss", "(", "\n", "intermediate_dict", "[", "interm_key", "]", ",", "input_key", ",", "input_dict", ",", "\n", ")", "\n", "\n", "", "input_key", "=", "'PoG_cm_tobii'", "\n", "interm_key", "=", "'PoG_cm_initial_unaugmented'", "\n", "if", "interm_key", "in", "intermediate_dict", "and", "input_key", "in", "input_dict", ":", "\n", "                ", "output_dict", "[", "'metric_euc_'", "+", "interm_key", "]", "=", "euclidean_loss", "(", "\n", "intermediate_dict", "[", "interm_key", "]", ",", "input_key", ",", "input_dict", ",", "\n", ")", "\n", "\n", "", "input_key", "=", "'g'", "\n", "interm_key", "=", "'g_initial_unaugmented'", "\n", "if", "interm_key", "in", "intermediate_dict", "and", "input_key", "in", "input_dict", ":", "\n", "                ", "output_dict", "[", "'metric_ang_'", "+", "interm_key", "]", "=", "angular_loss", "(", "\n", "intermediate_dict", "[", "interm_key", "]", ",", "input_key", ",", "input_dict", ",", "\n", ")", "\n", "\n", "# Initial gaze", "\n", "", "", "input_key", "=", "'PoG_px_tobii'", "\n", "interm_key", "=", "'PoG_px_initial'", "\n", "if", "interm_key", "in", "intermediate_dict", "and", "input_key", "in", "input_dict", ":", "\n", "            ", "output_dict", "[", "'loss_mse_'", "+", "interm_key", "]", "=", "mse_loss", "(", "\n", "intermediate_dict", "[", "interm_key", "]", ",", "input_key", ",", "input_dict", ",", "\n", ")", "\n", "output_dict", "[", "'metric_euc_'", "+", "interm_key", "]", "=", "euclidean_loss", "(", "\n", "intermediate_dict", "[", "interm_key", "]", ",", "input_key", ",", "input_dict", ",", "\n", ")", "\n", "\n", "", "input_key", "=", "'PoG_cm_tobii'", "\n", "interm_key", "=", "'PoG_cm_initial'", "\n", "if", "interm_key", "in", "intermediate_dict", "and", "input_key", "in", "input_dict", ":", "\n", "            ", "output_dict", "[", "'loss_mse_'", "+", "interm_key", "]", "=", "mse_loss", "(", "\n", "intermediate_dict", "[", "interm_key", "]", ",", "input_key", ",", "input_dict", ",", "\n", ")", "\n", "output_dict", "[", "'metric_euc_'", "+", "interm_key", "]", "=", "euclidean_loss", "(", "\n", "intermediate_dict", "[", "interm_key", "]", ",", "input_key", ",", "input_dict", ",", "\n", ")", "\n", "\n", "", "input_key", "=", "'g'", "\n", "interm_key", "=", "'g_initial'", "\n", "if", "interm_key", "in", "intermediate_dict", "and", "input_key", "in", "input_dict", ":", "\n", "            ", "output_dict", "[", "'metric_ang_'", "+", "interm_key", "]", "=", "angular_loss", "(", "\n", "intermediate_dict", "[", "interm_key", "]", ",", "input_key", ",", "input_dict", ",", "\n", ")", "\n", "\n", "# Refine gaze", "\n", "", "input_key", "=", "'PoG_px_tobii'", "\n", "interm_key", "=", "'PoG_px_final'", "\n", "if", "interm_key", "in", "intermediate_dict", "and", "input_key", "in", "input_dict", ":", "\n", "            ", "output_dict", "[", "'loss_mse_'", "+", "interm_key", "]", "=", "mse_loss", "(", "\n", "intermediate_dict", "[", "interm_key", "]", ",", "input_key", ",", "input_dict", ",", "\n", ")", "\n", "output_dict", "[", "'metric_euc_'", "+", "interm_key", "]", "=", "euclidean_loss", "(", "\n", "intermediate_dict", "[", "interm_key", "]", ",", "input_key", ",", "input_dict", ",", "\n", ")", "\n", "\n", "", "input_key", "=", "'PoG_cm_tobii'", "\n", "interm_key", "=", "'PoG_cm_final'", "\n", "if", "interm_key", "in", "intermediate_dict", "and", "input_key", "in", "input_dict", ":", "\n", "            ", "output_dict", "[", "'loss_mse_'", "+", "interm_key", "]", "=", "mse_loss", "(", "\n", "intermediate_dict", "[", "interm_key", "]", ",", "input_key", ",", "input_dict", ",", "\n", ")", "\n", "output_dict", "[", "'metric_euc_'", "+", "interm_key", "]", "=", "euclidean_loss", "(", "\n", "intermediate_dict", "[", "interm_key", "]", ",", "input_key", ",", "input_dict", ",", "\n", ")", "\n", "\n", "", "input_key", "=", "'g'", "\n", "interm_key", "=", "'g_final'", "\n", "if", "interm_key", "in", "intermediate_dict", "and", "input_key", "in", "input_dict", ":", "\n", "            ", "output_dict", "[", "'metric_ang_'", "+", "interm_key", "]", "=", "angular_loss", "(", "\n", "intermediate_dict", "[", "interm_key", "]", ",", "input_key", ",", "input_dict", ",", "\n", ")", "\n", "\n", "", "if", "config", ".", "eye_validity_net_enabled", ":", "\n", "            ", "for", "side", "in", "[", "'left'", ",", "'right'", "]", ":", "\n", "                ", "input_key", "=", "side", "+", "'_PoG_tobii_validity'", "\n", "interm_key", "=", "side", "+", "'_tracking_validity'", "\n", "if", "interm_key", "in", "intermediate_dict", "and", "input_key", "in", "input_dict", ":", "\n", "                    ", "output_dict", "[", "'metric_bce_'", "+", "interm_key", "]", "=", "bec_loss_without_validity_check", "(", "\n", "intermediate_dict", "[", "interm_key", "]", ",", "input_dict", "[", "input_key", "]", ".", "type", "(", "torch", ".", "FloatTensor", ")", ".", "cuda", "(", ")", ",", "\n", ")", "# loss_bce_left_tracking_validity", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.evec.EVEC.calculate_additional_labels": [[822, 930], ["next", "iter", "isinstance", "numpy.radians", "numpy.random.normal", "numpy.random.normal", "torch.mean().detach", "torch.mean().detach", "torch.mean().detach", "torch.mean().detach", "torch.mean().detach", "torch.mean().detach", "torch.mean().detach", "torch.mean().detach", "torch.mean().detach", "torch.mean().detach", "torch.mean().detach", "torch.mean().detach", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "full_input_dict.values", "torch.mul().detach", "torch.mul().detach", "torch.mul().detach", "torch.mul().detach", "numpy.repeat", "numpy.repeat", "torch.stack().detach", "torch.stack().detach", "torch.stack().detach", "torch.stack().detach", "torch.stack().detach", "torch.stack().detach", "torch.stack().detach", "torch.stack().detach", "torch.stack().detach", "torch.stack().detach", "torch.stack().detach", "torch.stack().detach", "numpy.expand_dims", "numpy.expand_dims", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "common.calculate_combined_gaze_direction", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "full_input_dict[].bool", "full_input_dict[].bool", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "range", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "kappas_side.astype", "kappas_side.astype", "common.batch_make_heatmaps", "[].float().view", "range", "common.batch_make_heatmaps", "[].float().view", "range", "common.batch_make_heatmaps", "[].float().view", "range", "[].float", "[].float", "[].float"], "methods", ["home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.common.calculate_combined_gaze_direction", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.common.batch_make_heatmaps", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.common.batch_make_heatmaps", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.common.batch_make_heatmaps"], ["", "", "", "", "def", "calculate_additional_labels", "(", "self", ",", "full_input_dict", ",", "current_epoch", "=", "None", ")", ":", "\n", "        ", "sample_entry", "=", "next", "(", "iter", "(", "full_input_dict", ".", "values", "(", ")", ")", ")", "\n", "batch_size", "=", "sample_entry", ".", "shape", "[", "0", "]", "\n", "sequence_len", "=", "sample_entry", ".", "shape", "[", "1", "]", "\n", "\n", "# PoG in mm", "\n", "for", "side", "in", "(", "'left'", ",", "'right'", ")", ":", "\n", "            ", "if", "(", "side", "+", "'_PoG_tobii'", ")", "in", "full_input_dict", ":", "\n", "                ", "full_input_dict", "[", "side", "+", "'_PoG_cm_tobii'", "]", "=", "torch", ".", "mul", "(", "\n", "full_input_dict", "[", "side", "+", "'_PoG_tobii'", "]", ",", "\n", "0.1", "*", "full_input_dict", "[", "'millimeters_per_pixel'", "]", ",", "\n", ")", ".", "detach", "(", ")", "\n", "full_input_dict", "[", "side", "+", "'_PoG_cm_tobii_validity'", "]", "=", "full_input_dict", "[", "side", "+", "'_PoG_tobii_validity'", "]", "\n", "\n", "# Fake kappa to be used during training", "\n", "# Mirror the yaw angle to handle different eyes", "\n", "", "", "if", "self", ".", "training", "and", "config", ".", "refine_net_do_offset_augmentation", ":", "\n", "\n", "# Curriculum learning on kappa", "\n", "# print(device, self.forward_kwargs['current_epoch'], current_epoch, '---nbwvffrf eve.py')", "\n", "            ", "assert", "(", "current_epoch", "is", "not", "None", ")", "\n", "assert", "(", "isinstance", "(", "current_epoch", ",", "float", ")", ")", "\n", "kappa_std", "=", "config", ".", "refine_net_offset_augmentation_sigma", "\n", "kappa_std", "=", "np", ".", "radians", "(", "kappa_std", ")", "\n", "\n", "# Create systematic noise", "\n", "# This is consistent throughout a given sequence", "\n", "left_kappas", "=", "np", ".", "random", ".", "normal", "(", "size", "=", "(", "batch_size", ",", "2", ")", ",", "loc", "=", "0.0", ",", "scale", "=", "kappa_std", ")", "\n", "right_kappas", "=", "np", ".", "random", ".", "normal", "(", "size", "=", "(", "batch_size", ",", "2", ")", ",", "loc", "=", "0.0", ",", "scale", "=", "kappa_std", ")", "\n", "kappas", "=", "{", "\n", "'left'", ":", "np", ".", "repeat", "(", "np", ".", "expand_dims", "(", "left_kappas", ",", "axis", "=", "1", ")", ",", "sequence_len", ",", "axis", "=", "1", ")", ",", "\n", "'right'", ":", "np", ".", "repeat", "(", "np", ".", "expand_dims", "(", "right_kappas", ",", "axis", "=", "1", ")", ",", "sequence_len", ",", "axis", "=", "1", ")", ",", "\n", "}", "\n", "\n", "for", "side", "in", "(", "'left'", ",", "'right'", ")", ":", "\n", "# Store kappa", "\n", "                ", "kappas_side", "=", "kappas", "[", "side", "]", "\n", "if", "not", "config", ".", "multi_gpu", ":", "\n", "                    ", "kappa_tensor", "=", "torch", ".", "tensor", "(", "kappas_side", ".", "astype", "(", "np", ".", "float32", ")", ")", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "                    ", "kappa_tensor", "=", "torch", ".", "tensor", "(", "kappas_side", ".", "astype", "(", "np", ".", "float32", ")", ")", ".", "cuda", "(", ")", "\n", "", "full_input_dict", "[", "side", "+", "'_kappa_fake'", "]", "=", "kappa_tensor", "\n", "\n", "# 3D origin for L/R combined gaze", "\n", "", "", "if", "'left_o'", "in", "full_input_dict", ":", "\n", "            ", "full_input_dict", "[", "'o'", "]", "=", "torch", ".", "mean", "(", "torch", ".", "stack", "(", "[", "\n", "full_input_dict", "[", "'left_o'", "]", ",", "full_input_dict", "[", "'right_o'", "]", ",", "\n", "]", ",", "axis", "=", "-", "1", ")", ",", "axis", "=", "-", "1", ")", ".", "detach", "(", ")", "\n", "full_input_dict", "[", "'o_validity'", "]", "=", "full_input_dict", "[", "'left_o_validity'", "]", "\n", "\n", "#print(list(full_input_dict.keys()), '---jefjiji, eve.py')", "\n", "", "if", "'left_PoG_tobii'", "in", "full_input_dict", ":", "\n", "# Average of left/right PoG values", "\n", "            ", "full_input_dict", "[", "'PoG_px_tobii'", "]", "=", "torch", ".", "mean", "(", "torch", ".", "stack", "(", "[", "\n", "full_input_dict", "[", "'left_PoG_tobii'", "]", ",", "\n", "full_input_dict", "[", "'right_PoG_tobii'", "]", ",", "\n", "]", ",", "axis", "=", "-", "1", ")", ",", "axis", "=", "-", "1", ")", ".", "detach", "(", ")", "\n", "full_input_dict", "[", "'PoG_cm_tobii'", "]", "=", "torch", ".", "mean", "(", "torch", ".", "stack", "(", "[", "\n", "full_input_dict", "[", "'left_PoG_cm_tobii'", "]", ",", "\n", "full_input_dict", "[", "'right_PoG_cm_tobii'", "]", ",", "\n", "]", ",", "axis", "=", "-", "1", ")", ",", "axis", "=", "-", "1", ")", ".", "detach", "(", ")", "\n", "full_input_dict", "[", "'PoG_px_tobii_validity'", "]", "=", "(", "\n", "full_input_dict", "[", "'left_PoG_tobii_validity'", "]", ".", "bool", "(", ")", "&", "\n", "full_input_dict", "[", "'right_PoG_tobii_validity'", "]", ".", "bool", "(", ")", "\n", ")", ".", "detach", "(", ")", "\n", "full_input_dict", "[", "'PoG_cm_tobii_validity'", "]", "=", "full_input_dict", "[", "'PoG_px_tobii_validity'", "]", "\n", "\n", "if", "config", ".", "refine_net_enabled", ":", "\n", "# Heatmaps (both initial and final)", "\n", "# NOTE: input is B x T x F", "\n", "                ", "full_input_dict", "[", "'heatmap_initial'", "]", "=", "torch", ".", "stack", "(", "[", "\n", "batch_make_heatmaps", "(", "full_input_dict", "[", "'PoG_px_tobii'", "]", "[", "b", ",", ":", "]", ",", "\n", "config", ".", "gaze_heatmap_sigma_initial", ")", "\n", "*", "full_input_dict", "[", "'PoG_px_tobii_validity'", "]", "[", "b", ",", ":", "]", ".", "float", "(", ")", ".", "view", "(", "-", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "for", "b", "in", "range", "(", "batch_size", ")", "\n", "]", ",", "axis", "=", "0", ")", ".", "detach", "(", ")", "\n", "full_input_dict", "[", "'heatmap_history'", "]", "=", "torch", ".", "stack", "(", "[", "\n", "batch_make_heatmaps", "(", "full_input_dict", "[", "'PoG_px_tobii'", "]", "[", "b", ",", ":", "]", ",", "\n", "config", ".", "gaze_heatmap_sigma_history", ")", "\n", "*", "full_input_dict", "[", "'PoG_px_tobii_validity'", "]", "[", "b", ",", ":", "]", ".", "float", "(", ")", ".", "view", "(", "-", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "for", "b", "in", "range", "(", "batch_size", ")", "\n", "]", ",", "axis", "=", "0", ")", ".", "detach", "(", ")", "\n", "full_input_dict", "[", "'heatmap_final'", "]", "=", "torch", ".", "stack", "(", "[", "\n", "batch_make_heatmaps", "(", "full_input_dict", "[", "'PoG_px_tobii'", "]", "[", "b", ",", ":", "]", ",", "\n", "config", ".", "gaze_heatmap_sigma_final", ")", "\n", "*", "full_input_dict", "[", "'PoG_px_tobii_validity'", "]", "[", "b", ",", ":", "]", ".", "float", "(", ")", ".", "view", "(", "-", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "for", "b", "in", "range", "(", "batch_size", ")", "\n", "]", ",", "axis", "=", "0", ")", ".", "detach", "(", ")", "\n", "full_input_dict", "[", "'heatmap_initial_validity'", "]", "=", "full_input_dict", "[", "'PoG_px_tobii_validity'", "]", "\n", "full_input_dict", "[", "'heatmap_history_validity'", "]", "=", "full_input_dict", "[", "'PoG_px_tobii_validity'", "]", "\n", "full_input_dict", "[", "'heatmap_final_validity'", "]", "=", "full_input_dict", "[", "'PoG_px_tobii_validity'", "]", "\n", "\n", "# 3D gaze direction for L/R combined gaze", "\n", "", "", "if", "'PoG_cm_tobii'", "in", "full_input_dict", ":", "\n", "            ", "full_input_dict", "[", "'g'", "]", "=", "torch", ".", "stack", "(", "[", "\n", "calculate_combined_gaze_direction", "(", "\n", "full_input_dict", "[", "'o'", "]", "[", "b", ",", ":", "]", ",", "\n", "10.0", "*", "full_input_dict", "[", "'PoG_cm_tobii'", "]", "[", "b", ",", ":", "]", ",", "\n", "full_input_dict", "[", "'left_R'", "]", "[", "b", ",", ":", "]", ",", "\n", "full_input_dict", "[", "'camera_transformation'", "]", "[", "b", ",", ":", "]", ",", "\n", ")", "\n", "for", "b", "in", "range", "(", "batch_size", ")", "\n", "]", ",", "axis", "=", "0", ")", "\n", "full_input_dict", "[", "'g_validity'", "]", "=", "full_input_dict", "[", "'PoG_cm_tobii_validity'", "]", "\n", "", "", "def", "from_g_to_PoG_history", "(", "self", ",", "full_input_dict", ",", "sub_input_dict", ",", "sub_output_dict", ",", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.evec.EVEC.from_g_to_PoG_history": [[930, 1038], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "common.calculate_combined_gaze_direction", "common.to_screen_coordinates", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "rk", "rk", "evec.EVEC.rearrange_memory_if_needed", "evec.EVEC.center_calibration_and_st_refine", "evec.EVEC.PoG_cm_to_px_on_screen", "common.batch_make_heatmaps", "[].detach().cpu().numpy", "len", "cms[].detach().cpu().numpy", "cms_center_calibrated[].detach().cpu().numpy", "cms_st_refined[].detach().cpu().numpy", "heatmap_history.append", "common.batch_make_heatmaps", "common.batch_make_gaze_history_maps", "[].detach().cpu", "cms[].detach().cpu", "cms_center_calibrated[].detach().cpu", "cms_st_refined[].detach().cpu", "[].detach", "cms[].detach", "cms_center_calibrated[].detach", "cms_st_refined[].detach"], "methods", ["home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.common.calculate_combined_gaze_direction", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.common.to_screen_coordinates", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.evec.EVEC.rearrange_memory_if_needed", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.evec.EVEC.center_calibration_and_st_refine", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.evec.EVEC.PoG_cm_to_px_on_screen", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.common.batch_make_heatmaps", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.common.batch_make_heatmaps", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.common.batch_make_gaze_history_maps"], ["", "", "def", "from_g_to_PoG_history", "(", "self", ",", "full_input_dict", ",", "sub_input_dict", ",", "sub_output_dict", ",", "\n", "input_suffix", ",", "output_suffix", ",", "\n", "heatmap_history", ",", "gaze_heatmap_sigma", ",", "history_heatmap_sigma", ")", ":", "\n", "\n", "# Handle case for GazeCapture and MPIIGaze", "\n", "        ", "if", "'inv_camera_transformation'", "not", "in", "full_input_dict", ":", "\n", "            ", "return", "\n", "\n", "# Step 1a) Calculate PoG from given gaze", "\n", "# print('self.eye_side', self.eye_side, '---ejjijfje eve.py --from_g_to_PoG_history')", "\n", "#if self.eye_side == 'binocular':", "\n", "", "for", "side", "in", "(", "'left'", ",", "'right'", ")", ":", "\n", "            ", "origin", "=", "(", "sub_output_dict", "[", "side", "+", "'_o'", "]", "\n", "if", "side", "+", "'_o'", "in", "sub_output_dict", "else", "sub_input_dict", "[", "side", "+", "'_o'", "]", ")", "\n", "direction", "=", "sub_output_dict", "[", "side", "+", "'_g_'", "+", "input_suffix", "]", "\n", "rotation", "=", "(", "sub_output_dict", "[", "side", "+", "'_R'", "]", "\n", "if", "side", "+", "'_R'", "in", "sub_output_dict", "else", "sub_input_dict", "[", "side", "+", "'_R'", "]", ")", "\n", "cc", "=", "[", "x", ".", "device", ".", "index", "for", "x", "in", "(", "origin", ",", "direction", ",", "rotation", ",", "sub_input_dict", "[", "side", "+", "'_R'", "]", ")", "]", "\n", "# print('divice', torch.cuda.current_device(), cc, '---ejfjijiij eve.py')", "\n", "# if not all([xx == cc[0] for xx in cc]):", "\n", "#     print('divice', torch.cuda.current_device(), cc, '---vjjfjjje eve.py')", "\n", "PoG_mm", ",", "PoG_px", "=", "to_screen_coordinates", "(", "origin", ",", "direction", ",", "rotation", ",", "sub_input_dict", ")", "\n", "sub_output_dict", "[", "side", "+", "'_PoG_cm_'", "+", "output_suffix", "]", "=", "0.1", "*", "PoG_mm", "\n", "sub_output_dict", "[", "side", "+", "'_PoG_px_'", "+", "output_suffix", "]", "=", "PoG_px", "\n", "# print(self.peek_dict(sub_output_dict), '---bhjejfijie eve.py')", "\n", "# print(list(sub_output_dict.keys()), '---ngwefrdsf eve.py')", "\n", "\n", "# Step 1b) Calculate average PoG", "\n", "", "sub_output_dict", "[", "'PoG_px_'", "+", "output_suffix", "]", "=", "torch", ".", "mean", "(", "torch", ".", "stack", "(", "[", "\n", "sub_output_dict", "[", "'left_PoG_px_'", "+", "output_suffix", "]", ",", "\n", "sub_output_dict", "[", "'right_PoG_px_'", "+", "output_suffix", "]", ",", "\n", "]", ",", "axis", "=", "-", "1", ")", ",", "axis", "=", "-", "1", ")", "\n", "sub_output_dict", "[", "'PoG_cm_'", "+", "output_suffix", "]", "=", "torch", ".", "mean", "(", "torch", ".", "stack", "(", "[", "\n", "sub_output_dict", "[", "'left_PoG_cm_'", "+", "output_suffix", "]", ",", "\n", "sub_output_dict", "[", "'right_PoG_cm_'", "+", "output_suffix", "]", ",", "\n", "]", ",", "axis", "=", "-", "1", ")", ",", "axis", "=", "-", "1", ")", "\n", "\n", "############################################################################################", "\n", "# 1. store original eye_net output to build memory", "\n", "sub_output_dict", "[", "'PoG_px_'", "+", "output_suffix", "+", "'_for_memory'", "]", "=", "sub_output_dict", "[", "'PoG_px_'", "+", "output_suffix", "]", "[", ":", "]", "\n", "sub_output_dict", "[", "'PoG_cm_'", "+", "output_suffix", "+", "'_for_memory'", "]", "=", "sub_output_dict", "[", "'PoG_cm_'", "+", "output_suffix", "]", "[", ":", "]", "\n", "#pxs, cms = sub_output_dict['PoG_px_' + output_suffix], sub_output_dict['PoG_cm_' + output_suffix]", "\n", "cms", "=", "sub_output_dict", "[", "'PoG_cm_'", "+", "output_suffix", "]", "\n", "rk", "=", "lambda", "k", ":", "sub_output_dict", "[", "k", "]", "[", ":", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", "\n", "cm_np_l", ",", "cm_np_r", "=", "rk", "(", "'left'", "+", "'_PoG_cm_'", "+", "output_suffix", ")", ",", "rk", "(", "'right'", "+", "'_PoG_cm_'", "+", "output_suffix", ")", "\n", "\n", "if", "config", ".", "central_calibration_enabled", ":", "\n", "# centers are calculated by averaging the ground truth PoG_px, PoG_cm in all samples in training set (in Metric 00. eval inference output + retrieve screen center)", "\n", "#print(sub_output_dict['PoG_px_' + output_suffix], '---jeiiiii evec.py')", "\n", "# 2. reteive memory visual center", "\n", "# memory = self.retrieve_memory_visual_center()", "\n", "#st()", "\n", "            ", "assert", "len", "(", "full_input_dict", "[", "'participant'", "]", ")", "==", "1", "\n", "participant", ",", "cam_pos", ",", "video_id", "=", "full_input_dict", "[", "'participant'", "]", "[", "0", "]", ",", "full_input_dict", "[", "'camera'", "]", "[", "0", "]", ",", "full_input_dict", "[", "'subfolder'", "]", "[", "0", "]", "\n", "\n", "self", ".", "rearrange_memory_if_needed", "(", "participant", ",", "cam_pos", ",", "video_id", ")", "\n", "cms_center_calibrated", ",", "cms_st_refined", ",", "is_valid", "=", "self", ".", "center_calibration_and_st_refine", "(", "participant", ",", "cam_pos", ",", "video_id", ",", "cms", ",", "cm_np_l", ",", "cm_np_r", ")", "\n", "\n", "if", "self", ".", "plot_this_sample", ":", "\n", "                ", "self", ".", "plotting_materials_one_sample", "[", "'PoG_cm_initial'", "]", "=", "cms", "[", "0", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "self", ".", "plotting_materials_one_sample", "[", "'PoG_cm_after_sc'", "]", "=", "cms_center_calibrated", "[", "0", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "self", ".", "plotting_materials_one_sample", "[", "'PoG_cm_after_sc_st'", "]", "=", "cms_st_refined", "[", "0", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "#st()", "\n", "\n", "#sub_output_dict['PoG_cm_' + output_suffix] = cms_center_calibrated", "\n", "", "sub_output_dict", "[", "'PoG_cm_'", "+", "output_suffix", "]", "=", "cms_st_refined", "\n", "# calculate PoG_px from PoG_cm", "\n", "sub_output_dict", "[", "'PoG_px_'", "+", "output_suffix", "]", "=", "self", ".", "PoG_cm_to_px_on_screen", "(", "sub_output_dict", "[", "'PoG_cm_'", "+", "output_suffix", "]", ",", "sub_input_dict", ")", "\n", "# sub_output_dict['predicted_tracking_validity_' + output_suffix] = torch.from_numpy(np.array([is_valid,]))", "\n", "\n", "######################################################################################################", "\n", "\n", "# if datetime.datetime.now().strftime('%Y%m%d%H%M%S') > '20210220192900':", "\n", "#     torch.save(sub_output_dict['PoG_px_' + output_suffix], '/samba/room/storage/eve_dataset/temp_pog')", "\n", "#     raise", "\n", "\n", "\n", "", "sub_output_dict", "[", "'PoG_mm_'", "+", "output_suffix", "]", "=", "10.0", "*", "sub_output_dict", "[", "'PoG_cm_'", "+", "output_suffix", "]", "\n", "\n", "# Step 1c) Calculate the combined gaze (L/R)", "\n", "sub_output_dict", "[", "'g_'", "+", "output_suffix", "]", "=", "calculate_combined_gaze_direction", "(", "\n", "sub_input_dict", "[", "'o'", "]", ",", "\n", "sub_output_dict", "[", "'PoG_mm_'", "+", "output_suffix", "]", ",", "\n", "sub_input_dict", "[", "'left_R'", "]", ",", "# by definition, 'left_R' == 'right_R'", "\n", "sub_input_dict", "[", "'camera_transformation'", "]", ",", "\n", ")", "\n", "\n", "if", "config", ".", "refine_net_enabled", ":", "\n", "# Step 2) Create heatmaps from PoG estimates", "\n", "            ", "sub_output_dict", "[", "'heatmap_'", "+", "output_suffix", "]", "=", "batch_make_heatmaps", "(", "sub_output_dict", "[", "'PoG_px_'", "+", "output_suffix", "]", ",", "gaze_heatmap_sigma", ")", "\n", "\n", "if", "heatmap_history", "is", "not", "None", ":", "\n", "# Step 3) Create gaze history maps", "\n", "                ", "heatmap_history", ".", "append", "(", "\n", "batch_make_heatmaps", "(", "sub_output_dict", "[", "'PoG_px_'", "+", "output_suffix", "]", ",", "\n", "history_heatmap_sigma", ")", "\n", ")", "\n", "if", "'PoG_px_tobii'", "in", "full_input_dict", ":", "\n", "                    ", "gaze_history_maps", "=", "batch_make_gaze_history_maps", "(", "\n", "full_input_dict", "[", "'timestamps'", "]", ",", "heatmap_history", ",", "\n", "full_input_dict", "[", "'PoG_px_tobii_validity'", "]", ",", "\n", ")", "\n", "sub_output_dict", "[", "'history_'", "+", "output_suffix", "]", "=", "gaze_history_maps", "\n", "", "", "", "", "def", "PoG_cm_to_px_on_screen", "(", "self", ",", "PoG_cm", ",", "input_dict", ")", ":", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.evec.EVEC.PoG_cm_to_px_on_screen": [[1038, 1050], ["torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "float", "float"], "methods", ["None"], ["", "", "", "", "def", "PoG_cm_to_px_on_screen", "(", "self", ",", "PoG_cm", ",", "input_dict", ")", ":", "\n", "        ", "PoG_mm", "=", "PoG_cm", "*", "10.0", "\n", "# Convert back from mm to pixels", "\n", "ppm_w", "=", "input_dict", "[", "'pixels_per_millimeter'", "]", "[", ":", ",", "0", "]", "\n", "ppm_h", "=", "input_dict", "[", "'pixels_per_millimeter'", "]", "[", ":", ",", "1", "]", "\n", "PoG_px", "=", "torch", ".", "stack", "(", "[", "\n", "torch", ".", "clamp", "(", "PoG_mm", "[", ":", ",", "0", "]", "*", "ppm_w", ",", "\n", "0.0", ",", "float", "(", "config", ".", "actual_screen_size", "[", "0", "]", ")", ")", ",", "\n", "torch", ".", "clamp", "(", "PoG_mm", "[", ":", ",", "1", "]", "*", "ppm_h", ",", "\n", "0.0", ",", "float", "(", "config", ".", "actual_screen_size", "[", "1", "]", ")", ")", "\n", "]", ",", "axis", "=", "-", "1", ")", "\n", "return", "PoG_px", "\n", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.evec.EVEC.rearrange_memory_if_needed": [[1054, 1064], ["evec.EVEC.initiate_fixed_length_memory_for_video"], "methods", ["home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.evec.EVEC.initiate_fixed_length_memory_for_video"], ["", "def", "rearrange_memory_if_needed", "(", "self", ",", "subject", ",", "cam_pos", ",", "video_id", ")", ":", "\n", "        ", "if", "self", ".", "fixed_history_len", "is", "None", ":", "#", "\n", "            ", "return", "\n", "", "else", ":", "\n", "#print(subject, cam_pos, video_id, '--efjijoi evec')", "\n", "            ", "expected_memory_version", "=", "'##'", ".", "join", "(", "[", "subject", ",", "cam_pos", ",", "video_id", ",", "'initiated'", "]", ")", "\n", "#st()", "\n", "if", "self", ".", "running_memory_version", "!=", "expected_memory_version", ":", "\n", "                ", "self", ".", "initiate_fixed_length_memory_for_video", "(", "subject", ",", "cam_pos", ",", "video_id", ")", "\n", "self", ".", "running_memory_version", "=", "expected_memory_version", "\n", "# level 2 methods for rearrange_memory_if_needed", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.evec.EVEC.initiate_fixed_length_memory_for_video": [[1065, 1077], ["evec.EVEC.write_empty_memories", "len", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "range", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "evec.EVEC.center_calibration_and_st_refine", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "cm_np.reshape"], "methods", ["home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.evec.EVEC.write_empty_memories", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.evec.EVEC.center_calibration_and_st_refine"], ["", "", "", "def", "initiate_fixed_length_memory_for_video", "(", "self", ",", "subject", ",", "cam_pos", ",", "video_id", ")", ":", "\n", "#st()", "\n", "        ", "history_pi", "=", "self", ".", "fixed_length_history", "[", "subject", "]", "[", "cam_pos", "]", "[", "video_id", "]", "[", "'pi'", "]", "\n", "history_bi", "=", "self", ".", "fixed_length_history", "[", "subject", "]", "[", "cam_pos", "]", "[", "video_id", "]", "[", "'bi'", "]", "\n", "self", ".", "write_empty_memories", "(", ")", "\n", "N", "=", "len", "(", "history_pi", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "idx", "in", "range", "(", "N", ")", ":", "# run through history pi in order to accmulate memory based on pi", "\n", "                ", "cm_np", "=", "history_pi", "[", "idx", "]", "\n", "pre_validity", "=", "history_bi", "[", "idx", "]", "\n", "cms", "=", "torch", ".", "from_numpy", "(", "cm_np", ".", "reshape", "(", "-", "1", ",", "2", ")", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "cms_center_calibrated", ",", "cms_st_refined", ",", "is_valid", "=", "self", ".", "center_calibration_and_st_refine", "(", "subject", ",", "cam_pos", ",", "video_id", ",", "cms", ",", "mute_st", "=", "True", ")", "\n", "#print('memory initiated for', subject, cam_pos, video_id, '---ekjiij do_st_refine.py')", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.evec.EVEC.center_calibration_and_st_refine": [[1081, 1136], ["evec.EVEC.retrieve_memory_for_participant", "evec.EVEC.update_subject_memory", "evec.EVEC.calibrate_to_center", "cms.detach().cpu().numpy", "evec.EVEC.detach().cpu().numpy", "evec.EVEC.check_eye_tracking_validity", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "numpy.array", "torch.isfinite", "torch.isfinite", "torch.isfinite", "torch.isfinite", "torch.isfinite", "torch.isfinite", "torch.isfinite", "torch.isfinite", "cms.detach().cpu", "evec.EVEC.detach().cpu", "evec.EVEC.PoG_cm_to_px_without_clampping", "evec.EVEC.PoG_cm_to_px_without_clampping", "evec.EVEC.st_refine_net.refine", "PoG_px_refined.reshape", "evec.EVEC.PoG_px_to_cm", "len", "numpy.sum", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.array", "numpy.array", "cms.detach", "evec.EVEC.detach", "zip", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.evec.EVEC.retrieve_memory_for_participant", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.evec.EVEC.update_subject_memory", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.evec.EVEC.calibrate_to_center", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.evec.EVEC.check_eye_tracking_validity", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.evec.EVEC.PoG_cm_to_px_without_clampping", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.evec.EVEC.PoG_cm_to_px_without_clampping", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.st_refine_net.StRefine.refine", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.evec.EVEC.PoG_px_to_cm"], ["", "", "", "def", "center_calibration_and_st_refine", "(", "self", ",", "participant", ",", "cam_pos", ",", "video_id", ",", "cms", ",", "cm_np_l", "=", "None", ",", "cm_np_r", "=", "None", ",", "pre_validity", "=", "None", ",", "mute_st", "=", "False", ")", ":", "\n", "        ", "memory_pi", ",", "memory_bi", ",", "memory_pi_star", ",", "memory_pi_m_std", ",", "center", "=", "self", ".", "retrieve_memory_for_participant", "(", "participant", ",", "cam_pos", ")", "\n", "\n", "memory_visual_center", "=", "center", "# updated after every 1% new data added", "\n", "#print(center, '---jfjoijej evec.py')", "\n", "\n", "cms_center_calibrated", "=", "None", "\n", "cms_st_refined", "=", "None", "\n", "if", "memory_visual_center", "is", "not", "None", ":", "\n", "# 1. center calibration", "\n", "# sub_output_dict['PoG_px_' + output_suffix] = \\", "\n", "#     self.calibrate_to_center(pxs, subject_memory_center=memory['PoG_px'][0], avg_center=np.array([909.6951, 529.9885]))", "\n", "            ", "cms_center_calibrated", "=", "self", ".", "calibrate_to_center", "(", "cms", ",", "subject_memory_center", "=", "memory_visual_center", ",", "\n", "avg_center", "=", "np", ".", "array", "(", "[", "SCREEN_CENTER_CM_X", ",", "SCREEN_CENTER_CM_Y", "]", ")", ")", "\n", "\n", "# 2. do spacial transform before clamping px", "\n", "if", "config", ".", "st_transform_enabled", ":", "\n", "                ", "if", "not", "mute_st", ":", "\n", "#if len(memory_pi_star) >= 3000: # st should fail when gaze path shape is not complete", "\n", "                    ", "if", "len", "(", "memory_bi", ")", ">", "0", "and", "np", ".", "sum", "(", "memory_bi", ")", ">=", "self", ".", "online_refinement_starts_from", ":", "# at least 0s memory is required for spatial transform", "\n", "                        ", "PoG_pxs", "=", "self", ".", "PoG_cm_to_px_without_clampping", "(", "cms_center_calibrated", ")", "\n", "assert", "PoG_pxs", ".", "shape", "[", "0", "]", "==", "1", "\n", "PoG_cm_history", "=", "[", "pi_star", "for", "pi_star", ",", "bi", "in", "zip", "(", "memory_pi_star", ",", "memory_bi", ")", "if", "bi", ">", "0.5", "]", "# select valid pi_stars for history heatmap", "\n", "PoG_px_history", "=", "self", ".", "PoG_cm_to_px_without_clampping", "(", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "PoG_cm_history", ")", ")", ")", "\n", "PoG_px_refined", ",", "is_refined", ",", "input_combmap", ",", "output_combmap", "=", "self", ".", "st_refine_net", ".", "refine", "(", "PoG_pxs", "[", "0", "]", ",", "PoG_px_history", ",", "return_full", "=", "True", ")", "\n", "PoG_pxs_refined", "=", "PoG_px_refined", ".", "reshape", "(", "-", "1", ",", "2", ")", "\n", "cms_st_refined", "=", "self", ".", "PoG_px_to_cm", "(", "PoG_pxs_refined", ")", "\n", "#print(cms_st_refined, '---ejjiisdkj evec.py')", "\n", "#sub_output_dict['PoG_cm_' + output_suffix] = PoG_cm_refined", "\n", "#print('refined from', PoG_pxs[0], 'to', PoG_px_refined[0], 'is_refined', is_refined, '---jjfjiijjd')", "\n", "if", "self", ".", "plot_this_sample", ":", "\n", "                            ", "self", ".", "plotting_materials_one_sample", "[", "'PoG_cm_history'", "]", "=", "np", ".", "array", "(", "PoG_cm_history", ")", "\n", "self", ".", "plotting_materials_one_sample", "[", "'PoG_px_history'", "]", "=", "np", ".", "array", "(", "PoG_px_history", ")", "\n", "self", ".", "plotting_materials_one_sample", "[", "'ST_input_combmap'", "]", "=", "input_combmap", "\n", "if", "output_combmap", "is", "not", "None", ":", "\n", "                                ", "self", ".", "plotting_materials_one_sample", "[", "'ST_output_combmap'", "]", "=", "output_combmap", "[", "0", "]", "\n", "", "else", ":", "\n", "                                ", "self", ".", "plotting_materials_one_sample", "[", "'ST_output_combmap'", "]", "=", "None", "\n", "\n", "", "", "", "", "", "", "if", "(", "cms_center_calibrated", "is", "None", ")", "or", "not", "torch", ".", "all", "(", "torch", ".", "isfinite", "(", "cms_center_calibrated", ")", ")", ":", "\n", "            ", "cms_center_calibrated", "=", "cms", "# when center calibration has not started to work, pass pi_intial to memory_pi_star", "\n", "", "if", "(", "cms_st_refined", "is", "None", ")", "or", "not", "torch", ".", "all", "(", "torch", ".", "isfinite", "(", "cms_st_refined", ")", ")", ":", "\n", "            ", "cms_st_refined", "=", "cms_center_calibrated", "\n", "\n", "# 4. update memory for each frame passed", "\n", "#pxs_np, cms_np = pxs.detach().cpu().numpy(), cms.detach().cpu().numpy()", "\n", "", "cm_np", "=", "cms", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", "# the cms is a torch array of shape (1, 2), i.e. [[cm_x, cm_y]] with one datum only", "\n", "center_calibrated_cm_np", "=", "cms_center_calibrated", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", "# when center calibration has not started to work, pass pi_intial to memory_pi_star", "\n", "if", "pre_validity", "is", "None", ":", "\n", "            ", "is_valid", "=", "self", ".", "check_eye_tracking_validity", "(", "cm_np", ",", "cm_np_l", ",", "cm_np_r", ",", "memory_pi_m_std", ")", "\n", "", "else", ":", "\n", "            ", "is_valid", "=", "pre_validity", "\n", "", "self", ".", "update_subject_memory", "(", "participant", ",", "cam_pos", ",", "video_id", ",", "is_valid", ",", "cm_np", ",", "center_calibrated_cm_np", ")", "\n", "#print(cms_center_calibrated, cms_st_refined, '---fjeofijrji evec.py')", "\n", "return", "cms_center_calibrated", ",", "cms_st_refined", ",", "is_valid", "\n", "", "def", "save_subject_memory", "(", "self", ",", "storage_file_path", ")", ":", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.evec.EVEC.save_subject_memory": [[1136, 1139], ["pickle.dump", "open"], "methods", ["None"], ["", "def", "save_subject_memory", "(", "self", ",", "storage_file_path", ")", ":", "\n", "        ", "ta", "=", "(", "self", ".", "memory_pi", ",", "self", ".", "memory_bi", ",", "self", ".", "memory_pi_star", ",", "self", ".", "memory_pi_mean_std", ",", "self", ".", "memory_pi_mean_after_outlier_removal", ",", "self", ".", "memory_video_id", ",", "self", ".", "memory_last_update_at", ")", "\n", "pickle", ".", "dump", "(", "ta", ",", "open", "(", "storage_file_path", ",", "'wb'", ")", ")", "\n", "", "def", "load_subject_memory", "(", "self", ",", "storage_file_path", ")", ":", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.evec.EVEC.load_subject_memory": [[1139, 1142], ["pickle.load", "open"], "methods", ["None"], ["", "def", "load_subject_memory", "(", "self", ",", "storage_file_path", ")", ":", "\n", "        ", "ta", "=", "pickle", ".", "load", "(", "open", "(", "storage_file_path", ",", "'rb'", ")", ")", "\n", "self", ".", "memory_pi", ",", "self", ".", "memory_bi", ",", "self", ".", "memory_pi_star", ",", "self", ".", "memory_pi_mean_std", ",", "self", ".", "memory_pi_mean_after_outlier_removal", ",", "self", ".", "memory_video_id", ",", "self", ".", "memory_last_update_at", "=", "ta", "\n", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.evec.EVEC.retrieve_memory_for_participant": [[1144, 1171], ["evec.EVEC.memory_pi.keys", "evec.EVEC.memory_pi[].keys"], "methods", ["None"], ["", "def", "retrieve_memory_for_participant", "(", "self", ",", "participant", ",", "cam_pos", ")", ":", "\n", "        ", "if", "participant", "not", "in", "self", ".", "memory_pi", ".", "keys", "(", ")", ":", "\n", "            ", "self", ".", "memory_pi", "[", "participant", "]", "=", "{", "}", "\n", "self", ".", "memory_bi", "[", "participant", "]", "=", "{", "}", "\n", "self", ".", "memory_pi_star", "[", "participant", "]", "=", "{", "}", "\n", "self", ".", "memory_pi_mean_std", "[", "participant", "]", "=", "{", "}", "\n", "self", ".", "memory_pi_mean_after_outlier_removal", "[", "participant", "]", "=", "{", "}", "\n", "self", ".", "memory_video_id", "[", "participant", "]", "=", "{", "}", "\n", "self", ".", "memory_last_update_at", "[", "participant", "]", "=", "{", "}", "\n", "\n", "", "if", "cam_pos", "not", "in", "self", ".", "memory_pi", "[", "participant", "]", ".", "keys", "(", ")", ":", "\n", "#st()", "\n", "            ", "self", ".", "memory_pi", "[", "participant", "]", "[", "cam_pos", "]", "=", "[", "]", "\n", "self", ".", "memory_bi", "[", "participant", "]", "[", "cam_pos", "]", "=", "[", "]", "\n", "self", ".", "memory_pi_star", "[", "participant", "]", "[", "cam_pos", "]", "=", "[", "]", "\n", "self", ".", "memory_pi_mean_after_outlier_removal", "[", "participant", "]", "[", "cam_pos", "]", "=", "None", "\n", "self", ".", "memory_pi_mean_std", "[", "participant", "]", "[", "cam_pos", "]", "=", "(", "(", "None", ",", "None", ")", ",", "(", "None", ",", "None", ")", ")", "# ((mean_x, std_x), (mean_y, std_y))", "\n", "self", ".", "memory_video_id", "[", "participant", "]", "[", "cam_pos", "]", "=", "[", "]", "\n", "self", ".", "memory_last_update_at", "[", "participant", "]", "[", "cam_pos", "]", "=", "-", "1", "\n", "#st()", "\n", "# print(self.memory_pi[participant][cam_pos], self.memory_bi[participant][cam_pos], \\", "\n", "#       self.memory_pi_star[participant][cam_pos], self.memory_pi_mean_std[participant][cam_pos], '---ejkfjjeoi evec.py')", "\n", "#st()", "\n", "#print(self.memory_pi_mean_after_outlier_removal, '---kfeijijij evec.py')", "\n", "", "return", "self", ".", "memory_pi", "[", "participant", "]", "[", "cam_pos", "]", ",", "self", ".", "memory_bi", "[", "participant", "]", "[", "cam_pos", "]", ",", "self", ".", "memory_pi_star", "[", "participant", "]", "[", "cam_pos", "]", ",", "self", ".", "memory_pi_mean_std", "[", "participant", "]", "[", "cam_pos", "]", ",", "self", ".", "memory_pi_mean_after_outlier_removal", "[", "participant", "]", "[", "cam_pos", "]", "\n", "", "def", "calibrate_to_center", "(", "self", ",", "pxs", ",", "subject_memory_center", ",", "avg_center", ")", ":", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.evec.EVEC.calibrate_to_center": [[1171, 1177], ["torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["None"], ["", "def", "calibrate_to_center", "(", "self", ",", "pxs", ",", "subject_memory_center", ",", "avg_center", ")", ":", "\n", "#print(pxs, subject_memory_center, avg_center, '---jejiffjjj evec.py')", "\n", "        ", "error", "=", "torch", ".", "from_numpy", "(", "subject_memory_center", "-", "avg_center", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "pxs", "=", "pxs", "-", "error", "\n", "#print(pxs, '---bvvhfuej evec.py')", "\n", "return", "pxs", "\n", "", "def", "check_eye_tracking_validity", "(", "self", ",", "cm_np", ",", "cm_np_l", ",", "cm_np_r", ",", "memory_pi_m_std", ")", ":", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.evec.EVEC.check_eye_tracking_validity": [[1177, 1194], ["tuple", "numpy.isfinite", "evec.EVEC.check_if_PoG_cm_within_screen", "tuple", "evec.EVEC.check_if_PoG_cm_within_screen", "evec.EVEC.check_if_PoG_cm_within_screen", "abs", "abs"], "methods", ["home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.evec.EVEC.check_if_PoG_cm_within_screen", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.evec.EVEC.check_if_PoG_cm_within_screen", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.evec.EVEC.check_if_PoG_cm_within_screen"], ["", "def", "check_eye_tracking_validity", "(", "self", ",", "cm_np", ",", "cm_np_l", ",", "cm_np_r", ",", "memory_pi_m_std", ")", ":", "\n", "        ", "xx", ",", "yy", "=", "tuple", "(", "cm_np", ")", "\n", "(", "mean_x", ",", "std_x", ")", ",", "(", "mean_y", ",", "std_y", ")", "=", "memory_pi_m_std", "\n", "if", "(", "cm_np_l", "is", "not", "None", ")", "and", "(", "np", ".", "isfinite", "(", "cm_np_l", "[", "0", "]", ")", ")", ":", "\n", "            ", "with_in_screen", "=", "self", ".", "check_if_PoG_cm_within_screen", "(", "cm_np_l", ")", "and", "self", ".", "check_if_PoG_cm_within_screen", "(", "cm_np_r", ")", "\n", "", "else", ":", "\n", "            ", "with_in_screen", "=", "self", ".", "check_if_PoG_cm_within_screen", "(", "cm_np", ")", "\n", "\n", "# calculate if cm_np is not an outlier of existing data points in memory", "\n", "", "if", "mean_x", "is", "not", "None", ":", "\n", "            ", "xx", ",", "yy", "=", "tuple", "(", "cm_np", ")", "\n", "with_in_center", "=", "(", "abs", "(", "xx", "-", "mean_x", ")", "<", "std_x", "*", "self", ".", "center_drag", ")", "and", "(", "abs", "(", "yy", "-", "mean_y", ")", "<", "std_y", "*", "self", ".", "center_drag", ")", "\n", "", "else", ":", "\n", "            ", "with_in_center", "=", "False", "\n", "\n", "", "validity", "=", "with_in_screen", "or", "with_in_center", "\n", "return", "validity", "\n", "", "def", "update_subject_memory", "(", "self", ",", "participant", ",", "cam_pos", ",", "video_id", ",", "is_valid", ",", "cm_np", ",", "center_calibrated_cm_np", ")", ":", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.evec.EVEC.update_subject_memory": [[1194, 1215], ["[].append", "[].append", "[].append", "[].append", "len", "int", "numpy.array", "len", "evec.EVEC.calculate_memory_center", "numpy.isfinite", "zip", "print"], "methods", ["home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.evec.EVEC.calculate_memory_center"], ["", "def", "update_subject_memory", "(", "self", ",", "participant", ",", "cam_pos", ",", "video_id", ",", "is_valid", ",", "cm_np", ",", "center_calibrated_cm_np", ")", ":", "\n", "# 1. store data points", "\n", "        ", "self", ".", "memory_pi", "[", "participant", "]", "[", "cam_pos", "]", ".", "append", "(", "cm_np", ")", "\n", "self", ".", "memory_bi", "[", "participant", "]", "[", "cam_pos", "]", ".", "append", "(", "int", "(", "is_valid", ")", ")", "\n", "self", ".", "memory_pi_star", "[", "participant", "]", "[", "cam_pos", "]", ".", "append", "(", "center_calibrated_cm_np", ")", "\n", "self", ".", "memory_video_id", "[", "participant", "]", "[", "cam_pos", "]", ".", "append", "(", "video_id", ")", "\n", "# 2. update mean and std for memory_pi", "\n", "mii", "=", "len", "(", "self", ".", "memory_bi", "[", "participant", "]", "[", "cam_pos", "]", ")", "\n", "mii_pre", "=", "self", ".", "memory_last_update_at", "[", "participant", "]", "[", "cam_pos", "]", "\n", "if", "(", "mii_pre", "==", "-", "1", ")", "or", "(", "(", "mii", "-", "mii_pre", ")", "/", "(", "mii_pre", "+", "1", ")", ">=", "0.01", ")", ":", "# skip, if number of uncalculated new memory is more than 1% of the calculated ones, update", "\n", "#st()", "\n", "            ", "memory_pi_valid", "=", "np", ".", "array", "(", "[", "pi", "for", "pi", ",", "bi", "in", "zip", "(", "self", ".", "memory_pi", "[", "participant", "]", "[", "cam_pos", "]", ",", "self", ".", "memory_bi", "[", "participant", "]", "[", "cam_pos", "]", ")", "if", "bi", ">", "0.5", "]", ")", "\n", "if", "len", "(", "memory_pi_valid", ")", ">", "0", ":", "\n", "                ", "center", ",", "(", "m_x", ",", "std_x", ",", "m_y", ",", "std_y", ")", "=", "self", ".", "calculate_memory_center", "(", "memory_pi_valid", ",", "num_std", "=", "self", ".", "memory_center_calculation_out_outlier_thresh", ")", "\n", "if", "(", "center", "is", "not", "None", ")", "and", "(", "np", ".", "isfinite", "(", "center", "[", "0", "]", ")", ")", ":", "\n", "                    ", "self", ".", "memory_pi_mean_after_outlier_removal", "[", "participant", "]", "[", "cam_pos", "]", "=", "center", "\n", "self", ".", "memory_pi_mean_std", "[", "participant", "]", "[", "cam_pos", "]", "=", "(", "(", "m_x", ",", "std_x", ")", ",", "(", "m_y", ",", "std_y", ")", ")", "\n", "self", ".", "memory_last_update_at", "[", "participant", "]", "[", "cam_pos", "]", "=", "mii", "\n", "self", ".", "count_memory_update", "+=", "1", "\n", "if", "self", ".", "count_memory_update", "%", "1000", "==", "0", ":", "\n", "                        ", "print", "(", "participant", ",", "cam_pos", ",", "'memory updated at'", ",", "mii", ",", "'update percent'", ",", "'{:.3%}'", ".", "format", "(", "(", "mii", "-", "mii_pre", ")", "/", "(", "mii_pre", "+", "1", ")", ")", "if", "mii_pre", ">", "-", "1", "else", "'not applicable'", ",", "'---kekjfj evec.py'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.evec.EVEC.PoG_px_to_cm": [[1216, 1219], ["torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["None"], ["", "", "", "", "", "def", "PoG_px_to_cm", "(", "self", ",", "PoG_px", ")", ":", "\n", "        ", "PoG_cm", "=", "torch", ".", "stack", "(", "[", "PoG_px", "[", ":", ",", "0", "]", "*", "CM_PER_PIXEL_X", ",", "PoG_px", "[", ":", ",", "1", "]", "*", "CM_PER_PIXEL_Y", "]", ",", "axis", "=", "-", "1", ")", "\n", "return", "PoG_cm", "\n", "", "def", "PoG_cm_to_px_without_clampping", "(", "self", ",", "PoG_cm", ")", ":", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.evec.EVEC.PoG_cm_to_px_without_clampping": [[1219, 1222], ["torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["None"], ["", "def", "PoG_cm_to_px_without_clampping", "(", "self", ",", "PoG_cm", ")", ":", "\n", "        ", "PoG_px", "=", "torch", ".", "stack", "(", "[", "PoG_cm", "[", ":", ",", "0", "]", "/", "CM_PER_PIXEL_X", ",", "PoG_cm", "[", ":", ",", "1", "]", "/", "CM_PER_PIXEL_Y", "]", ",", "axis", "=", "-", "1", ")", "\n", "return", "PoG_px", "\n", "# level 2 method for check_eye_tracking_validity()", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.evec.EVEC.check_if_PoG_cm_within_screen": [[1223, 1236], ["tuple"], "methods", ["None"], ["", "def", "check_if_PoG_cm_within_screen", "(", "self", ",", "cm", ")", ":", "\n", "# PIXEL_PER_DEGREE = 42.082546   # calculated by averaging the 'metric_euc_PoG_px_intial'/'metric_ang_g_initial' for each clip in eye_net results on validation data", "\n", "# MARGIN_CM_ONE_DEGREE = 1.212 # calculated by PIXEL_PER_ANGLE * 1.0 * m2p_x or _y / 10.0", "\n", "# SCREEN_W_CM, SCREEN_H_CM = 55.3000, 31.1000", "\n", "# print(cm, '---efiiiijd')", "\n", "        ", "x", ",", "y", "=", "tuple", "(", "cm", ")", "\n", "# enlarged valid area (fixation outside screen can be valid for eye tracker as long as the pupil is not missing in camera)", "\n", "validity_x", "=", "(", "0", "-", "MARGIN_CM_ONE_DEGREE", ")", "<", "x", "<", "(", "SCREEN_W_CM", "+", "MARGIN_CM_ONE_DEGREE", ")", "\n", "validity_y", "=", "(", "0", "-", "MARGIN_CM_ONE_DEGREE", ")", "<", "y", "<", "(", "SCREEN_H_CM", "+", "MARGIN_CM_ONE_DEGREE", ")", "\n", "validity", "=", "validity_x", "and", "validity_y", "\n", "#print(x, y, validity, '---ejjjiidi evec.py')", "\n", "#if not validity: print('invalid cm predicted', cm, '---jjiejoij evec.py')", "\n", "return", "validity", "\n", "# level 2 method for update_subject_memory()", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.evec.EVEC.calculate_memory_center": [[1237, 1244], ["evec.EVEC.remove_outliers_for_two_arrs", "numpy.array", "numpy.mean", "numpy.mean"], "methods", ["home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.evec.EVEC.remove_outliers_for_two_arrs"], ["", "def", "calculate_memory_center", "(", "self", ",", "xys", ",", "num_std", ")", ":", "\n", "        ", "xs", ",", "ys", "=", "xys", "[", ":", ",", "0", "]", ",", "xys", "[", ":", ",", "1", "]", "\n", "xs_good", ",", "ys_good", ",", "(", "m1", ",", "std1", ",", "m2", ",", "std2", ")", "=", "self", ".", "remove_outliers_for_two_arrs", "(", "xs", ",", "ys", ",", "num_std", ")", "\n", "center", "=", "np", ".", "array", "(", "[", "np", ".", "mean", "(", "xs_good", ")", ",", "np", ".", "mean", "(", "ys_good", ")", "]", ")", "\n", "#print(xys, xs_good, ys_good, center, (m1, std1, m2, std2), '---ejfijoij')", "\n", "#print(self.memory_pi, self.memory_bi, '---ejfiojoi')", "\n", "return", "center", ",", "(", "m1", ",", "std1", ",", "m2", ",", "std2", ")", "\n", "# level 3 method for calculate_memory_center()", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.evec.EVEC.remove_outliers_for_two_arrs": [[1245, 1250], ["evec.EVEC.generate_outlier_mark", "evec.EVEC.generate_outlier_mark", "zip"], "methods", ["home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.evec.EVEC.generate_outlier_mark", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.evec.EVEC.generate_outlier_mark"], ["", "def", "remove_outliers_for_two_arrs", "(", "self", ",", "arr1", ",", "arr2", ",", "num_std", "=", "3", ")", ":", "\n", "        ", "marks1", ",", "m1", ",", "std1", "=", "self", ".", "generate_outlier_mark", "(", "arr1", ",", "num_std", ")", "\n", "marks2", ",", "m2", ",", "std2", "=", "self", ".", "generate_outlier_mark", "(", "arr2", ",", "num_std", ")", "\n", "marks", "=", "[", "a", "and", "b", "for", "a", ",", "b", "in", "zip", "(", "marks1", ",", "marks2", ")", "]", "\n", "return", "arr1", "[", "marks", "]", ",", "arr2", "[", "marks", "]", ",", "(", "m1", ",", "std1", ",", "m2", ",", "std2", ")", "\n", "# level 4 method for remove_outliers_for_two_arrs()", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.evec.EVEC.generate_outlier_mark": [[1251, 1255], ["numpy.mean", "numpy.std", "abs"], "methods", ["None"], ["", "def", "generate_outlier_mark", "(", "self", ",", "arr", ",", "num_std", ")", ":", "\n", "        ", "m", ",", "std", "=", "np", ".", "mean", "(", "arr", ")", ",", "np", ".", "std", "(", "arr", ")", "\n", "marks_keep", "=", "abs", "(", "arr", "-", "m", ")", "<", "num_std", "*", "std", "\n", "return", "marks_keep", ",", "m", ",", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.evec.EVEC.retrieve_memory_visual_center": [[1257, 1269], ["evec.EVEC.get_memory_visual_center_path", "os.path.isfile", "pickle.load", "open"], "methods", ["home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.evec.EVEC.get_memory_visual_center_path"], ["", "def", "retrieve_memory_visual_center", "(", "self", ",", "full_input_dict", ")", ":", "\n", "        ", "memory_path", "=", "self", ".", "get_memory_visual_center_path", "(", "full_input_dict", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "memory_path", ")", ":", "\n", "            ", "memory", "=", "pickle", ".", "load", "(", "open", "(", "memory_path", ",", "'rb'", ")", ")", "\n", "", "else", ":", "\n", "#memory = {'PoG_cm': None, 'PoG_px': None}", "\n", "            ", "memory", "=", "{", "'PoG_cm_x_list'", ":", "[", "]", ",", "'PoG_cm_y_list'", ":", "[", "]", ",", "'PoG_cm_memory_after_center_calibration'", ":", "[", "]", ",", "\n", "'PoG_cm'", ":", "None", ",", "'PoG_cm_m_std'", ":", "None", ",", "\n", "'num_valid'", ":", "0", ",", "'num_invalid'", ":", "0", ",", "'last_update_point_num_valid'", ":", "0", ",", "'drag_in_count'", ":", "0", ",", "\n", "'PoG_cm_l_curr'", ":", "None", ",", "'PoG_cm_l_pre1'", ":", "None", ",", "'pupil_l_curr'", ":", "None", ",", "'pupil_l_pre1'", ":", "None", ",", "\n", "'PoG_cm_r_curr'", ":", "None", ",", "'PoG_cm_r_pre1'", ":", "None", ",", "'pupil_r_curr'", ":", "None", ",", "'pupil_r_pre1'", ":", "None", "}", "\n", "", "return", "memory", "\n", "", "def", "get_memory_visual_center_path", "(", "self", ",", "full_input_dict", ")", ":", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.evec.EVEC.get_memory_visual_center_path": [[1269, 1287], ["config.output_path.split"], "methods", ["None"], ["", "def", "get_memory_visual_center_path", "(", "self", ",", "full_input_dict", ")", ":", "\n", "        ", "if", "config", ".", "output_path", "!=", "''", ":", "\n", "            ", "path_tokens", "=", "config", ".", "output_path", ".", "split", "(", "'/'", ")", "# when running inference with src/inference.py", "\n", "#print(path_tokens, '---fjjijjdf evec.py')", "\n", "subject", "=", "path_tokens", "[", "-", "3", "]", "\n", "camera_pos", "=", "path_tokens", "[", "-", "1", "]", "[", ":", "-", "5", "]", "\n", "memory_path", "=", "'/'", ".", "join", "(", "path_tokens", "[", ":", "-", "2", "]", ")", "+", "'/'", "+", "'memory_visual_center_'", "+", "camera_pos", "\n", "# print(memory_path, '---ejiji evec.py')", "\n", "", "else", ":", "\n", "#print(list(full_input_dict.keys()), '---ejfjiji evec.py')", "\n", "# '/samba/room/storage/Bji//network_outputs/inference_day22_inference_eye_net_test/val01/memory_visual_center_basler'", "\n", "# /samba/room/storage/Bji/ test07 step096_image_MIT-i1064228254 webcam_l", "\n", "            ", "participant", "=", "full_input_dict", "[", "'participant'", "]", "[", "0", "]", "\n", "subfolder", "=", "full_input_dict", "[", "'subfolder'", "]", "[", "0", "]", "\n", "camera", "=", "full_input_dict", "[", "'camera'", "]", "[", "0", "]", "\n", "memory_path", "=", "config", ".", "output_dir", "+", "'network_outputs/eval_codalab_'", "+", "config", ".", "config_id", "+", "'/'", "+", "participant", "+", "'/'", "+", "'memory_visual_center_'", "+", "camera", "\n", "", "return", "memory_path", "\n", "", "def", "calculate_memory_visual_center", "(", "self", ",", "memory_pi", ",", "memory_bi", ")", ":", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.evec.EVEC.calculate_memory_visual_center": [[1287, 1295], ["len", "len", "len", "numpy.multiply", "numpy.array", "numpy.array().reshape", "numpy.sum", "numpy.sum", "numpy.array"], "methods", ["None"], ["", "def", "calculate_memory_visual_center", "(", "self", ",", "memory_pi", ",", "memory_bi", ")", ":", "\n", "        ", "assert", "len", "(", "memory_bi", ")", "==", "len", "(", "memory_pi", ")", "\n", "if", "len", "(", "memory_pi", ")", "==", "0", ":", "\n", "            ", "return", "None", "\n", "", "else", ":", "\n", "            ", "he", "=", "np", ".", "multiply", "(", "np", ".", "array", "(", "memory_pi", ")", ",", "np", ".", "array", "(", "memory_bi", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", ")", "\n", "avg", "=", "np", ".", "sum", "(", "he", ",", "axis", "=", "0", ")", "/", "np", ".", "sum", "(", "memory_bi", ")", "\n", "return", "avg", "\n", "", "", "def", "check_tracking_validity", "(", "self", ",", "sub_output_dict", ",", "output_suffix", ",", "memory_visual_center", ")", ":", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.evec.EVEC.check_tracking_validity": [[1295, 1329], ["evec.EVEC.get_binocular_PoG_history", "evec.EVEC.check_if_PoG_cm_within_screen", "evec.EVEC.check_if_PoG_cm_within_screen", "print", "abs", "abs"], "methods", ["home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.evec.EVEC.get_binocular_PoG_history", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.evec.EVEC.check_if_PoG_cm_within_screen", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.evec.EVEC.check_if_PoG_cm_within_screen"], ["", "", "def", "check_tracking_validity", "(", "self", ",", "sub_output_dict", ",", "output_suffix", ",", "memory_visual_center", ")", ":", "\n", "\n", "# retrive curr data", "\n", "        ", "md", "=", "self", ".", "get_binocular_PoG_history", "(", "sub_output_dict", ",", "output_suffix", ",", "memory_visual_center", ")", "\n", "\n", "# calculate validity", "\n", "with_in_screen", "=", "self", ".", "check_if_PoG_cm_within_screen", "(", "md", "[", "'cm_l'", "]", ")", "and", "self", ".", "check_if_PoG_cm_within_screen", "(", "md", "[", "'cm_r'", "]", ")", "\n", "# pupil_on = (md['pupil_l'] > 1.0) and (md['pupil_r'] > 1.0) # predicted pupil size below 1.0 coinsides with invalid tobii data", "\n", "\n", "# calculate exempt", "\n", "if", "memory_visual_center", "[", "'PoG_cm_m_std'", "]", "is", "not", "None", ":", "\n", "            ", "m1", ",", "std1", ",", "m2", ",", "std2", "=", "memory_visual_center", "[", "'PoG_cm_m_std'", "]", "\n", "xx", ",", "yy", "=", "(", "md", "[", "'cm_l'", "]", "[", "0", "]", "+", "md", "[", "'cm_r'", "]", "[", "0", "]", ")", "/", "2", ",", "(", "md", "[", "'cm_l'", "]", "[", "1", "]", "+", "md", "[", "'cm_r'", "]", "[", "1", "]", ")", "/", "2", ",", "\n", "with_in_center", "=", "(", "abs", "(", "xx", "-", "m1", ")", "<", "std1", "*", "self", ".", "center_drag", ")", "and", "(", "abs", "(", "yy", "-", "m2", ")", "<", "std2", "*", "self", ".", "center_drag", ")", "\n", "", "else", ":", "\n", "            ", "with_in_center", "=", "False", "\n", "\n", "# when memory is large enough, should include samples that are close to meomory center, even if they are outof screen", "\n", "", "if", "memory_visual_center", "[", "'num_valid'", "]", "<", "1000", ":", "\n", "            ", "validity", "=", "with_in_screen", "\n", "", "else", ":", "\n", "            ", "validity", "=", "with_in_screen", "or", "with_in_center", "\n", "if", "with_in_center", "and", "not", "with_in_screen", ":", "\n", "                ", "print", "(", "'out of screen but close to memory center, stay in memory'", ",", "'l'", ",", "md", "[", "'cm_l'", "]", ",", "'r'", ",", "md", "[", "'cm_r'", "]", ",", "'---jifjij evec'", ")", "\n", "memory_visual_center", "[", "'drag_in_count'", "]", "+=", "1", "\n", "\n", "# if md['cm_l_pre2'] is not None: # (stability check disabled)", "\n", "#     is_near = lambda a, b: np.sqrt(np.sum((a - b)**2)) < CM_PER_DEGREE * self.memory_in_stable_thresh # we mark PoG pairs less than 3 degrees apart as near", "\n", "#     # if a PoG is near to its two predecessors, we mark it as stable", "\n", "#     is_stable = is_near(md['cm_l'], md['cm_l_pre1']) and is_near(md['cm_l'], md['cm_l_pre2']) and \\", "\n", "#                 is_near(md['cm_r'], md['cm_r_pre1']) and is_near(md['cm_r'], md['cm_r_pre2'])", "\n", "#     validity = validity and is_stable", "\n", "\n", "", "", "return", "validity", ",", "md", "\n", "", "def", "get_memory_visual_center", "(", "self", ",", "participant", ",", "cam_pos", ")", ":", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.evec.EVEC.get_memory_visual_center": [[1329, 1332], ["None"], "methods", ["None"], ["", "def", "get_memory_visual_center", "(", "self", ",", "participant", ",", "cam_pos", ")", ":", "\n", "        ", "center", "=", "self", ".", "memory_pi_mean_after_outlier_removal", "[", "participant", "]", "[", "cam_pos", "]", "\n", "return", "center", "\n", "", "def", "get_binocular_PoG_history", "(", "self", ",", "sub_output_dict", ",", "output_suffix", ",", "memory_visual_center", ")", ":", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.evec.EVEC.get_binocular_PoG_history": [[1332, 1350], ["rk", "rk", "rk", "rk", "[].detach().cpu().numpy", "[].detach().cpu", "[].detach"], "methods", ["None"], ["", "def", "get_binocular_PoG_history", "(", "self", ",", "sub_output_dict", ",", "output_suffix", ",", "memory_visual_center", ")", ":", "\n", "        ", "rk", "=", "lambda", "k", ":", "sub_output_dict", "[", "k", "]", "[", ":", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", "\n", "dd", "=", "{", "}", "\n", "dd", "[", "'cm_l'", "]", "=", "rk", "(", "'left'", "+", "'_PoG_cm_'", "+", "output_suffix", ")", "\n", "dd", "[", "'cm_r'", "]", "=", "rk", "(", "'right'", "+", "'_PoG_cm_'", "+", "output_suffix", ")", "\n", "dd", "[", "'pupil_l'", "]", "=", "rk", "(", "'left_pupil_size'", ")", "\n", "dd", "[", "'pupil_r'", "]", "=", "rk", "(", "'right_pupil_size'", ")", "\n", "\n", "# retrive previous data", "\n", "dd", "[", "'cm_l_pre1'", "]", "=", "memory_visual_center", "[", "'PoG_cm_l_curr'", "]", "\n", "dd", "[", "'cm_r_pre1'", "]", "=", "memory_visual_center", "[", "'PoG_cm_r_curr'", "]", "\n", "dd", "[", "'cm_l_pre2'", "]", "=", "memory_visual_center", "[", "'PoG_cm_l_pre1'", "]", "\n", "dd", "[", "'cm_r_pre2'", "]", "=", "memory_visual_center", "[", "'PoG_cm_r_pre1'", "]", "\n", "dd", "[", "'pupil_l_pre1'", "]", "=", "memory_visual_center", "[", "'pupil_l_curr'", "]", "\n", "dd", "[", "'pupil_r_pre1'", "]", "=", "memory_visual_center", "[", "'pupil_r_curr'", "]", "\n", "dd", "[", "'pupil_l_pre2'", "]", "=", "memory_visual_center", "[", "'pupil_l_pre1'", "]", "\n", "dd", "[", "'pupil_r_pre2'", "]", "=", "memory_visual_center", "[", "'pupil_r_pre1'", "]", "\n", "return", "dd", "\n", "", "def", "clear_memory_visual_center", "(", "self", ",", "output_path", ")", ":", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.evec.EVEC.clear_memory_visual_center": [[1350, 1352], ["None"], "methods", ["None"], ["", "def", "clear_memory_visual_center", "(", "self", ",", "output_path", ")", ":", "\n", "        ", "pass", "\n", "", "def", "combine_avg", "(", "self", ",", "avg1", ",", "cnt1", ",", "avg2", ",", "cnt2", ")", ":", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.evec.EVEC.combine_avg": [[1352, 1357], ["None"], "methods", ["None"], ["", "def", "combine_avg", "(", "self", ",", "avg1", ",", "cnt1", ",", "avg2", ",", "cnt2", ")", ":", "\n", "        ", "cnt", "=", "cnt1", "+", "cnt2", "\n", "assert", "cnt", ">", "0", "\n", "avg", "=", "(", "avg1", "*", "cnt1", "+", "avg2", "*", "cnt2", ")", "/", "cnt", "\n", "return", "avg", ",", "cnt", "\n", "", "def", "generate_eye_list", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.evec.EVEC.generate_eye_list": [[1357, 1365], ["None"], "methods", ["None"], ["", "def", "generate_eye_list", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "eye_side", "in", "[", "'left'", ",", "'right'", "]", ":", "\n", "            ", "eye_list", "=", "[", "self", ".", "eye_side", ",", "]", "\n", "", "elif", "self", ".", "eye_side", "==", "'binocular'", ":", "\n", "            ", "eye_list", "=", "[", "'left'", ",", "'right'", "]", "\n", "", "else", ":", "\n", "            ", "raise", "\n", "", "return", "eye_list", "\n", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.evec.EVEC.peek_dict": [[1367, 1379], ["dd.items", "reports.append", "type", "len", "type", "evec.EVEC.peek_dict", "v.size"], "methods", ["home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.eve.EVE.peek_dict"], ["", "def", "peek_dict", "(", "self", ",", "dd", ",", "suffix", "=", "''", ")", ":", "\n", "        ", "reports", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "dd", ".", "items", "(", ")", ":", "\n", "            ", "if", "type", "(", "v", ")", "==", "list", ":", "\n", "                ", "rr", "=", "(", "(", "k", ",", "len", "(", "v", ")", ")", ")", "\n", "", "elif", "type", "(", "v", ")", "==", "dict", ":", "\n", "                ", "rr", "=", "(", "(", "k", ",", "self", ".", "peek_dict", "(", "v", ")", ")", ")", "\n", "", "else", ":", "\n", "                ", "rr", "=", "(", "(", "k", ",", "v", ".", "size", "(", ")", ")", ")", "\n", "", "reports", ".", "append", "(", "rr", ")", "\n", "# print(reports, '---fuefjj', suffix)", "\n", "", "return", "reports", "\n", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.evec.createDir": [[1381, 1384], ["os.path.exists", "os.makedirs"], "function", ["None"], ["", "", "def", "createDir", "(", "dstDir", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "dstDir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "dstDir", ")", "\n", "", "", "def", "check_dict", "(", "d", ",", "indent", "=", "0", ")", ":", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.evec.check_dict": [[1384, 1392], ["list", "print", "isinstance", "d.items", "evec.check_dict", "print", "str", "len", "str", "str", "list", "d.keys"], "function", ["home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.evec.check_dict"], ["", "", "def", "check_dict", "(", "d", ",", "indent", "=", "0", ")", ":", "\n", "    ", "for", "key", ",", "value", "in", "list", "(", "d", ".", "items", "(", ")", ")", "[", ":", "1", "]", ":", "\n", "        ", "print", "(", "'\\t'", "*", "indent", "+", "str", "(", "key", ")", "+", "' --- '", "+", "str", "(", "len", "(", "d", ")", ")", ")", "\n", "if", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "            ", "check_dict", "(", "value", ",", "indent", "+", "1", ")", "\n", "", "else", ":", "\n", "#print('\\t' * (indent+1) + str(value))", "\n", "            ", "print", "(", "'\\t'", "*", "(", "indent", ")", "+", "'ENDs with keys: '", "+", "str", "(", "list", "(", "d", ".", "keys", "(", ")", ")", ")", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.st_refine_net.StNet.__init__": [[20, 55], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "st_refine_net.StNet.fc_loc[].weight.data.zero_", "st_refine_net.StNet.fc_loc[].bias.data.copy_", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.checkpoint_manager.CheckpointManager.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "StNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "1", ",", "10", ",", "kernel_size", "=", "5", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "10", ",", "20", ",", "kernel_size", "=", "5", ")", "\n", "self", ".", "conv2_drop", "=", "nn", ".", "Dropout2d", "(", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "320", ",", "50", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "50", ",", "10", ")", "\n", "\n", "# Spatial transformer localization-network", "\n", "self", ".", "localization", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "2", ",", "8", ",", "kernel_size", "=", "7", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "8", ",", "12", ",", "kernel_size", "=", "5", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "12", ",", "16", ",", "kernel_size", "=", "5", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n", "\n", "# Regressor for the 3 * 2 affine matrix", "\n", "self", ".", "fc_loc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "16", "*", "5", "*", "12", ",", "32", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "32", ",", "3", "*", "2", ")", "\n", ")", "\n", "\n", "# Initialize the weights/bias with identity transformation", "\n", "self", ".", "fc_loc", "[", "2", "]", ".", "weight", ".", "data", ".", "zero_", "(", ")", "\n", "self", ".", "fc_loc", "[", "2", "]", ".", "bias", ".", "data", ".", "copy_", "(", "torch", ".", "tensor", "(", "[", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "dtype", "=", "torch", ".", "float", ")", ")", "\n", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.st_refine_net.StNet.stn": [[57, 86], ["st_refine_net.StNet.localization", "xs.view.view.view", "st_refine_net.StNet.fc_loc", "theta.view.view.view", "torch.affine_grid", "torch.affine_grid", "torch.affine_grid", "torch.affine_grid", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample.size"], "methods", ["None"], ["", "def", "stn", "(", "self", ",", "x", ")", ":", "\n", "# print('before stn', x.size(), '---jjdiief spacial_transform_tutorial.py')", "\n", "        ", "xs", "=", "self", ".", "localization", "(", "x", ")", "\n", "\n", "# st()", "\n", "# x = nn.Conv2d(2, 8, kernel_size=7).cuda()(x)", "\n", "# x = nn.MaxPool2d(2, stride=2).cuda()(x)", "\n", "# x = nn.ReLU(True).cuda()(x)", "\n", "#", "\n", "# x = nn.Conv2d(8, 12, kernel_size=5).cuda()(x)", "\n", "# x = nn.MaxPool2d(2, stride=2).cuda()(x)", "\n", "# x = nn.ReLU(True).cuda()(x)", "\n", "#", "\n", "# x = nn.Conv2d(12, 16, kernel_size=5).cuda()(x)", "\n", "# x = nn.MaxPool2d(2, stride=2).cuda()(x)", "\n", "# x = nn.ReLU(True).cuda()(x)", "\n", "\n", "# print(count_parameters(self.localization), count_parameters(self.fc_loc))", "\n", "# print('after stn', xs.size(), '---rgffdfg spacial_transform_tutorial.py')", "\n", "# raise", "\n", "\n", "xs", "=", "xs", ".", "view", "(", "-", "1", ",", "16", "*", "5", "*", "12", ")", "\n", "theta", "=", "self", ".", "fc_loc", "(", "xs", ")", "\n", "theta", "=", "theta", ".", "view", "(", "-", "1", ",", "2", ",", "3", ")", "\n", "\n", "grid", "=", "F", ".", "affine_grid", "(", "theta", ",", "x", ".", "size", "(", ")", ")", "\n", "x", "=", "F", ".", "grid_sample", "(", "x", ",", "grid", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.st_refine_net.StNet.forward": [[97, 116], ["st_refine_net.StNet.stn", "st_refine_net.StNet.sigmoid"], "methods", ["home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.st_refine_net.StNet.stn"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# transform the input", "\n", "\n", "        ", "x", "=", "self", ".", "stn", "(", "x", ")", "\n", "heatmap", "=", "self", ".", "sigmoid", "(", "x", ")", "# convert to [0, 1] to be compared with ground truth heatmap", "\n", "\n", "\n", "#print(x.shape, '---ewfjoijdf')", "\n", "#raise", "\n", "\n", "\n", "# Perform the usual forward pass", "\n", "# x = F.relu(F.max_pool2d(self.conv1(x), 2))", "\n", "# x = F.relu(F.max_pool2d(self.conv2_drop(self.conv2(x)), 2))", "\n", "# x = x.view(-1, 320)", "\n", "# x = F.relu(self.fc1(x))", "\n", "# x = F.dropout(x, training=self.training)", "\n", "# x = self.fc2(x)", "\n", "return", "heatmap", "\n", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.st_refine_net.StRefine.__init__": [[118, 131], ["StNet().cuda", "st_refine_net.StRefine.StNet.load_state_dict", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "st_refine_net.StNet"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "StNet_path", ",", "stnet_heatmap_size", "=", "(", "128", ",", "72", ")", ",", "full_screen_size", "=", "(", "1920", ",", "1080", ")", ",", "heatmap_blur", "=", "(", "15", ",", "15", ")", ")", ":", "\n", "        ", "if", "StNet_path", "is", "None", ":", "\n", "            ", "self", ".", "StNet", "=", "None", "\n", "", "else", ":", "\n", "            ", "self", ".", "StNet", "=", "StNet", "(", ")", ".", "cuda", "(", ")", "\n", "self", ".", "StNet", ".", "load_state_dict", "(", "torch", ".", "load", "(", "StNet_path", ")", ")", "\n", "print", "(", "'StRefine loaded from'", ",", "StNet_path", ",", "'---jfejoij st_refine_net.py'", ")", "\n", "\n", "", "self", ".", "full_screen_size", "=", "full_screen_size", "\n", "self", ".", "stnet_heatmap_size", "=", "stnet_heatmap_size", "\n", "self", ".", "heatmap_guassian_blur", "=", "heatmap_blur", "\n", "self", ".", "softargmax_xs", "=", "None", "\n", "self", ".", "softargmax_ys", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.st_refine_net.StRefine.refine": [[132, 165], ["st_refine_net.StRefine.creat_combmap", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "st_refine_net.StRefine.StNet", "st_refine_net.StRefine.soft_argmax", "PoG_px.detach().cpu().numpy", "PoG_history.detach().cpu().numpy", "torch.from_numpy().cuda.reshape", "torch.from_numpy().cuda.reshape", "torch.from_numpy().cuda.reshape", "torch.from_numpy().cuda.reshape", "gaze_heatmap.reshape", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "st_refine_net.StRefine.detach().cpu().numpy", "PoG_px.detach().cpu", "PoG_history.detach().cpu", "copy.deepcopy", "copy.deepcopy", "st_refine_net.StRefine.detach().cpu", "PoG_px.detach", "PoG_history.detach", "st_refine_net.StRefine.detach"], "methods", ["home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.st_refine_net.StRefine.creat_combmap", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.common.soft_argmax"], ["", "def", "refine", "(", "self", ",", "PoG_px", ",", "PoG_history", ",", "return_full", "=", "False", ")", ":", "\n", "        ", "''' PoG_pxs, PoG_histories are type np array'''", "\n", "# 1. get combmap  in torch", "\n", "# try:", "\n", "combmap", ",", "is_valid", "=", "self", ".", "creat_combmap", "(", "PoG_px", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "PoG_history", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "# except:", "\n", "#     st()", "\n", "\n", "if", "not", "is_valid", ":", "\n", "            ", "if", "not", "return_full", ":", "\n", "                ", "return", "copy", ".", "deepcopy", "(", "PoG_px", ")", ",", "is_valid", "\n", "", "else", ":", "\n", "                ", "return", "copy", ".", "deepcopy", "(", "PoG_px", ")", ",", "is_valid", ",", "None", ",", "None", "\n", "\n", "", "", "combmap_tensor", "=", "torch", ".", "from_numpy", "(", "combmap", ")", ".", "cuda", "(", ")", "\n", "\n", "# 2. run stnet", "\n", "c", ",", "h", ",", "w", "=", "combmap_tensor", ".", "shape", "\n", "output_combmap_tensor", "=", "self", ".", "StNet", "(", "combmap_tensor", ".", "reshape", "(", "-", "1", ",", "c", ",", "h", ",", "w", ")", ")", "\n", "\n", "# 3. retreive refined gaze", "\n", "#st()", "\n", "n", ",", "_", ",", "h", ",", "w", "=", "output_combmap_tensor", ".", "shape", "\n", "gaze_heatmap", "=", "output_combmap_tensor", "[", ":", ",", "0", ",", ":", ",", ":", "]", "\n", "PoG_pxs_refined", "=", "self", ".", "soft_argmax", "(", "gaze_heatmap", ".", "reshape", "(", "n", ",", "1", ",", "h", ",", "w", ")", ")", "\n", "\n", "# 4. record refined PoGs conditioned on validity", "\n", "PoG_px_refined", "=", "PoG_pxs_refined", "[", "0", "]", "\n", "\n", "if", "not", "return_full", ":", "\n", "            ", "return", "PoG_px_refined", ",", "is_valid", "\n", "", "else", ":", "\n", "            ", "return", "PoG_px_refined", ",", "is_valid", ",", "combmap", ",", "output_combmap_tensor", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.st_refine_net.StRefine.creat_combmap": [[167, 177], ["in_screen", "st_refine_net.StRefine.create_gaze_and_history_combmap", "st_refine_net.StRefine.numpy_arr_normalised"], "methods", ["home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.st_refine_net.StRefine.create_gaze_and_history_combmap", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.st_refine_net.StRefine.numpy_arr_normalised"], ["", "", "def", "creat_combmap", "(", "self", ",", "PoG_px", ",", "PoG_history", ")", ":", "\n", "        ", "in_screen", "=", "lambda", "xy", ":", "(", "0", "<=", "xy", "[", "0", "]", "<=", "self", ".", "full_screen_size", "[", "0", "]", ")", "and", "(", "0", "<=", "xy", "[", "1", "]", "<=", "self", ".", "full_screen_size", "[", "1", "]", ")", "\n", "is_valid", "=", "in_screen", "(", "PoG_px", ")", "\n", "#st()", "\n", "if", "is_valid", ":", "\n", "            ", "combmap", "=", "self", ".", "create_gaze_and_history_combmap", "(", "PoG_px", ",", "PoG_history", ")", "\n", "combmap", "=", "self", ".", "numpy_arr_normalised", "(", "combmap", ")", "\n", "return", "combmap", ",", "is_valid", "\n", "", "else", ":", "\n", "            ", "return", "None", ",", "is_valid", "\n", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.st_refine_net.StRefine.numpy_arr_normalised": [[178, 182], ["numpy.transpose", "numpy.transpose.astype"], "methods", ["None"], ["", "", "def", "numpy_arr_normalised", "(", "self", ",", "arr", ",", "mean", "=", "0.5", ",", "std", "=", "0.5", ")", ":", "\n", "        ", "arr", "=", "np", ".", "transpose", "(", "arr", ".", "astype", "(", "np", ".", "float32", ")", ",", "(", "2", ",", "0", ",", "1", ")", ")", "# convert to float32, move from H x W x C to C x H x W", "\n", "arr", "=", "(", "arr", "-", "mean", ")", "/", "std", "\n", "return", "arr", "\n", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.st_refine_net.StRefine.numpy_arr_2_normalised_tensor": [[183, 187], ["st_refine_net.StRefine.numpy_arr_normalised", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.st_refine_net.StRefine.numpy_arr_normalised"], ["", "def", "numpy_arr_2_normalised_tensor", "(", "self", ",", "arr", ",", "mean", "=", "0.5", ",", "std", "=", "0.5", ")", ":", "\n", "        ", "arr", "=", "self", ".", "numpy_arr_normalised", "(", "arr", ",", "mean", ",", "std", ")", "\n", "tens", "=", "torch", ".", "from_numpy", "(", "arr", ")", "\n", "return", "tens", "\n", "", "def", "soft_argmax", "(", "self", ",", "heatmaps", ")", ":", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.st_refine_net.StRefine.soft_argmax": [[187, 219], ["heatmaps.view", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "numpy.meshgrid", "numpy.reshape", "numpy.reshape", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "numpy.linspace", "numpy.linspace", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "numpy.reshape.astype", "numpy.reshape.astype"], "methods", ["None"], ["", "def", "soft_argmax", "(", "self", ",", "heatmaps", ")", ":", "\n", "        ", "if", "self", ".", "softargmax_xs", "is", "None", ":", "\n", "# Assume normalized coordinate [0, 1] for numeric stability", "\n", "            ", "w", ",", "h", "=", "self", ".", "stnet_heatmap_size", "\n", "ref_xs", ",", "ref_ys", "=", "np", ".", "meshgrid", "(", "np", ".", "linspace", "(", "0", ",", "1.0", ",", "num", "=", "w", ",", "endpoint", "=", "True", ")", ",", "\n", "np", ".", "linspace", "(", "0", ",", "1.0", ",", "num", "=", "h", ",", "endpoint", "=", "True", ")", ",", "\n", "indexing", "=", "'xy'", ")", "\n", "ref_xs", "=", "np", ".", "reshape", "(", "ref_xs", ",", "[", "1", ",", "h", "*", "w", "]", ")", "\n", "ref_ys", "=", "np", ".", "reshape", "(", "ref_ys", ",", "[", "1", ",", "h", "*", "w", "]", ")", "\n", "# softargmax_xs = torch.tensor(ref_xs.astype(np.float32)).to(device)", "\n", "# softargmax_ys = torch.tensor(ref_ys.astype(np.float32)).to(device)", "\n", "self", ".", "softargmax_xs", "=", "torch", ".", "tensor", "(", "ref_xs", ".", "astype", "(", "np", ".", "float32", ")", ")", ".", "cuda", "(", ")", "\n", "self", ".", "softargmax_ys", "=", "torch", ".", "tensor", "(", "ref_ys", ".", "astype", "(", "np", ".", "float32", ")", ")", ".", "cuda", "(", ")", "\n", "", "ref_xs", ",", "ref_ys", "=", "self", ".", "softargmax_xs", ",", "self", ".", "softargmax_ys", "\n", "\n", "# Yield softmax+integrated coordinates in [0, 1]", "\n", "n", ",", "_", ",", "h", ",", "w", "=", "heatmaps", ".", "shape", "\n", "assert", "(", "w", "==", "self", ".", "stnet_heatmap_size", "[", "0", "]", ")", "\n", "assert", "(", "h", "==", "self", ".", "stnet_heatmap_size", "[", "1", "]", ")", "\n", "beta", "=", "1e2", "\n", "x", "=", "heatmaps", ".", "view", "(", "-", "1", ",", "h", "*", "w", ")", "\n", "x", "=", "F", ".", "softmax", "(", "beta", "*", "x", ",", "dim", "=", "-", "1", ")", "\n", "\n", "#print(ref_xs.shape, ref_ys.shape, x.shape, '---ejfioji')", "\n", "\n", "lmrk_xs", "=", "torch", ".", "sum", "(", "ref_xs", "*", "x", ",", "dim", "=", "-", "1", ")", "\n", "lmrk_ys", "=", "torch", ".", "sum", "(", "ref_ys", "*", "x", ",", "dim", "=", "-", "1", ")", "\n", "\n", "# Return to actual coordinates ranges", "\n", "pixel_xs", "=", "torch", ".", "clamp", "(", "self", ".", "full_screen_size", "[", "0", "]", "*", "lmrk_xs", ",", "0.0", ",", "self", ".", "full_screen_size", "[", "0", "]", ")", "\n", "pixel_ys", "=", "torch", ".", "clamp", "(", "self", ".", "full_screen_size", "[", "1", "]", "*", "lmrk_ys", ",", "0.0", ",", "self", ".", "full_screen_size", "[", "1", "]", ")", "\n", "return", "torch", ".", "stack", "(", "[", "pixel_xs", ",", "pixel_ys", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.st_refine_net.StRefine.create_gaze_and_history_combmap": [[221, 231], ["st_refine_net.StRefine.create_gaze_heatmap", "st_refine_net.StRefine.create_history_gaze_path_map", "numpy.stack"], "methods", ["home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.st_refine_net.StRefine.create_gaze_heatmap", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.st_refine_net.StRefine.create_history_gaze_path_map"], ["", "def", "create_gaze_and_history_combmap", "(", "self", ",", "PoG_px", ",", "PoG_history", ")", ":", "\n", "        ", "gazemap", "=", "self", ".", "create_gaze_heatmap", "(", "PoG_px", ",", "sigma", "=", "10.0", ",", "gaze_heatmap_size", "=", "self", ".", "stnet_heatmap_size", ",", "\n", "actual_screen_size", "=", "self", ".", "full_screen_size", ",", "\n", "guassian_blur", "=", "self", ".", "heatmap_guassian_blur", ")", "\n", "trajmap", "=", "self", ".", "create_history_gaze_path_map", "(", "PoG_history", ",", "history_trajectory_map_size", "=", "self", ".", "stnet_heatmap_size", ",", "\n", "actual_screen_size", "=", "self", ".", "full_screen_size", ",", "\n", "guassian_blur", "=", "self", ".", "heatmap_guassian_blur", ")", "\n", "combmap", "=", "np", ".", "stack", "(", "[", "gazemap", ",", "trajmap", "]", ",", "axis", "=", "2", ")", "\n", "#combmap = np.stack([trajmap, ], axis=2)", "\n", "return", "combmap", "\n", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.st_refine_net.StRefine.create_gaze_heatmap": [[233, 262], ["numpy.arange", "numpy.expand_dims", "numpy.exp", "cv2.GaussianBlur", "st_refine_net.StRefine.normalise_arr", "numpy.arange", "cv2.resize"], "methods", ["home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.st_refine_net.StRefine.normalise_arr"], ["", "def", "create_gaze_heatmap", "(", "self", ",", "centre", ",", "sigma", "=", "10.0", ",", "gaze_heatmap_size", "=", "(", "256", ",", "144", ")", ",", "actual_screen_size", "=", "(", "1920", ",", "1080", ")", ",", "guassian_blur", "=", "(", "15", ",", "15", ")", ")", ":", "\n", "#centre, sigma = (1300, 690), 10.0", "\n", "#gaze_heatmap_size = 256, 144", "\n", "#actual_screen_size = 1920, 1080", "\n", "\n", "        ", "w", ",", "h", "=", "256", ",", "144", "# initial heatmap size", "\n", "xs", "=", "np", ".", "arange", "(", "0", ",", "w", ",", "step", "=", "1", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "ys", "=", "np", ".", "expand_dims", "(", "np", ".", "arange", "(", "0", ",", "h", ",", "step", "=", "1", ",", "dtype", "=", "np", ".", "float32", ")", ",", "-", "1", ")", "\n", "heatmap_xs", "=", "xs", "\n", "heatmap_ys", "=", "ys", "\n", "#heatmap_xs = torch.tensor(xs).cuda()", "\n", "#heatmap_ys = torch.tensor(ys).cuda()", "\n", "\n", "heatmap_alpha", "=", "-", "0.5", "/", "(", "sigma", "**", "2", ")", "\n", "cx", "=", "(", "w", "/", "actual_screen_size", "[", "0", "]", ")", "*", "centre", "[", "0", "]", "\n", "cy", "=", "(", "h", "/", "actual_screen_size", "[", "1", "]", ")", "*", "centre", "[", "1", "]", "\n", "#st()", "\n", "heatmap", "=", "np", ".", "exp", "(", "heatmap_alpha", "*", "(", "(", "heatmap_xs", "-", "cx", ")", "**", "2", "+", "(", "heatmap_ys", "-", "cy", ")", "**", "2", ")", ")", "\n", "heatmap", "=", "cv", ".", "GaussianBlur", "(", "heatmap", ",", "guassian_blur", ",", "3", ")", "\n", "if", "(", "w", ",", "h", ")", "!=", "gaze_heatmap_size", ":", "\n", "            ", "heatmap", "=", "cv", ".", "resize", "(", "heatmap", ",", "gaze_heatmap_size", ")", "\n", "", "heatmap", "=", "self", ".", "normalise_arr", "(", "heatmap", ")", "\n", "#heatmap = 1e-8 + heatmap  # Make the zeros non-zero (remove collapsing issue)", "\n", "# heatmap_on = torch.tensor(heatmap).cuda()", "\n", "# heatmap.unsqueeze(0)", "\n", "# plt.imshow(heatmap, origin='upper')", "\n", "# plt.show()", "\n", "# heatmap.shape", "\n", "return", "heatmap", "\n", "", "def", "create_history_gaze_path_map", "(", "self", ",", "PoG_pxs", ",", "history_trajectory_map_size", "=", "(", "256", ",", "144", ")", ",", "actual_screen_size", "=", "(", "1920", ",", "1080", ")", ",", "guassian_blur", "=", "(", "15", ",", "15", ")", ")", ":", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.st_refine_net.StRefine.create_history_gaze_path_map": [[262, 285], ["numpy.zeros", "copy.deepcopy", "numpy.array().reshape", "cv2.polylines", "cv2.GaussianBlur", "st_refine_net.StRefine.normalise_arr", "cv2.resize", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.st_refine_net.StRefine.normalise_arr"], ["", "def", "create_history_gaze_path_map", "(", "self", ",", "PoG_pxs", ",", "history_trajectory_map_size", "=", "(", "256", ",", "144", ")", ",", "actual_screen_size", "=", "(", "1920", ",", "1080", ")", ",", "guassian_blur", "=", "(", "15", ",", "15", ")", ")", ":", "\n", "#xys = sample['PoG_history_gt'][sample['PoG_history_gt_validity']]", "\n", "        ", "xys", "=", "PoG_pxs", "\n", "#history_trajectory_map_size = 256, 144", "\n", "#actual_screen_size = 1920, 1080", "\n", "w", ",", "h", "=", "256", ",", "144", "\n", "\n", "trajmap", "=", "np", ".", "zeros", "(", "(", "h", ",", "w", ")", ")", "\n", "xys_copy", "=", "copy", ".", "deepcopy", "(", "xys", ")", "\n", "\n", "xys_copy", "[", ":", ",", "0", "]", "*=", "(", "w", "/", "actual_screen_size", "[", "0", "]", ")", "\n", "xys_copy", "[", ":", ",", "1", "]", "*=", "(", "h", "/", "actual_screen_size", "[", "1", "]", ")", "\n", "arrPt", "=", "np", ".", "array", "(", "xys_copy", ",", "np", ".", "int32", ")", ".", "reshape", "(", "(", "-", "1", ",", "1", ",", "2", ")", ")", "\n", "\n", "trajmap", "=", "cv", ".", "polylines", "(", "trajmap", ",", "[", "arrPt", "]", ",", "isClosed", "=", "False", ",", "color", "=", "(", "1.0", ",", ")", ",", "thickness", "=", "2", ")", "\n", "trajmap", "=", "cv", ".", "GaussianBlur", "(", "trajmap", ",", "guassian_blur", ",", "3", ")", "\n", "if", "(", "w", ",", "h", ")", "!=", "history_trajectory_map_size", ":", "\n", "            ", "trajmap", "=", "cv", ".", "resize", "(", "trajmap", ",", "history_trajectory_map_size", ")", "\n", "", "trajmap", "=", "self", ".", "normalise_arr", "(", "trajmap", ")", "\n", "# plt.imshow(trajmap, origin='upper')", "\n", "# plt.show()", "\n", "# heatmap.shape", "\n", "return", "trajmap", "\n", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.st_refine_net.StRefine.normalise_arr": [[287, 292], ["numpy.max", "numpy.min"], "methods", ["None"], ["", "def", "normalise_arr", "(", "self", ",", "arr", ")", ":", "\n", "        ", "mmax", ",", "mmin", "=", "np", ".", "max", "(", "arr", ")", ",", "np", ".", "min", "(", "arr", ")", "\n", "assert", "mmax", ">", "mmin", "\n", "arr", "=", "(", "arr", "-", "mmin", "+", "1e-8", ")", "/", "(", "mmax", "-", "mmin", "+", "2e-8", ")", "\n", "return", "arr", "\n", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.common.Flatten.forward": [[362, 364], ["x.view", "x.size"], "methods", ["None"], []], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.common.CRNNCell.__init__": [[367, 375], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.checkpoint_manager.CheckpointManager.__init__"], []], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.common.CRNNCell.forward": [[376, 391], ["common.CRNNCell.cell", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "list", "torch.autograd.Variable().to", "torch.autograd.Variable().to", "torch.autograd.Variable().to", "torch.autograd.Variable().to", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], []], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.common.CLSTMCell.__init__": [[394, 402], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.checkpoint_manager.CheckpointManager.__init__"], []], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.common.CLSTMCell.forward": [[403, 428], ["common.CLSTMCell.gates", "common.CLSTMCell.chunk", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "list", "torch.autograd.Variable().to", "torch.autograd.Variable().to", "torch.autograd.Variable().to", "torch.autograd.Variable().to", "torch.autograd.Variable().to", "torch.autograd.Variable().to", "torch.autograd.Variable().to", "torch.autograd.Variable().to", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], []], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.common.CGRUCell.__init__": [[431, 441], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.checkpoint_manager.CheckpointManager.__init__"], []], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.common.CGRUCell.forward": [[442, 461], ["common.CGRUCell.gates_1", "torch.sigmoid().chunk", "torch.sigmoid().chunk", "torch.sigmoid().chunk", "torch.sigmoid().chunk", "common.CGRUCell.gate_2", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "list", "torch.autograd.Variable().to", "torch.autograd.Variable().to", "torch.autograd.Variable().to", "torch.autograd.Variable().to", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], []], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.common.pitchyaw_to_vector": [[39, 48], ["torch.sin", "torch.sin", "torch.cos", "torch.cos", "torch.stack", "torch.stack", "torch.nn.functional.normalize", "ValueError"], "function", ["None"], ["\n", "# #TODO: overwrite data split for training and testing (a temporary dataset split to test ideas, will be replaced by 5-fold cross validation)", "\n", "# ############################################################################################", "\n", "# sample_all = predefined_splits['train'] + predefined_splits['val']", "\n", "# from sklearn.model_selection import train_test_split", "\n", "# train_set, test_set = train_test_split(sample_all, test_size=0.3, random_state=66)", "\n", "# val_set, test_set = train_test_split(test_set, test_size=0.5, random_state=88)", "\n", "# predefined_splits = {", "\n", "#     'train': train_set,", "\n", "#     'val': val_set,", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.common.vector_to_pitchyaw": [[50, 62], ["a.view.view", "torch.div", "torch.div", "torch.stack", "torch.stack", "ValueError", "torch.norm().view", "torch.norm().view", "torch.asin", "torch.asin", "torch.atan2", "torch.atan2", "torch.norm", "torch.norm"], "function", ["None"], ["# }", "\n", "# print(predefined_splits, '---noijfei')", "\n", "# ############################################################################################", "\n", "\n", "\n", "def", "stimulus_type_from_folder_name", "(", "folder_name", ")", ":", "\n", "    ", "parts", "=", "folder_name", ".", "split", "(", "'_'", ")", "\n", "if", "parts", "[", "1", "]", "in", "(", "'image'", ",", "'video'", ",", "'wikipedia'", ")", ":", "\n", "        ", "return", "parts", "[", "1", "]", "\n", "", "elif", "parts", "[", "1", "]", "==", "'eye'", ":", "\n", "        ", "return", "'points'", "\n", "", "raise", "ValueError", "(", "'Given folder name unexpected: %s'", "%", "folder_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.common.pitchyaw_to_rotation": [[64, 84], ["torch.cos", "torch.cos", "torch.sin", "torch.sin", "torch.ones_like", "torch.ones_like", "torch.zeros_like", "torch.zeros_like", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "matrices_1.view.view", "matrices_2.view.view", "torch.matmul", "torch.matmul", "common.vector_to_pitchyaw"], "function", ["home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.gaze.vector_to_pitchyaw"], ["", "class", "VideoReader", "(", "object", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "video_path", ",", "frame_indices", "=", "None", ",", "is_async", "=", "True", ",", "output_size", "=", "None", ")", ":", "\n", "        ", "self", ".", "is_async", "=", "is_async", "\n", "self", ".", "video_path", "=", "video_path", "\n", "self", ".", "output_size", "=", "output_size", "\n", "self", ".", "frame_indices", "=", "frame_indices", "\n", "if", "self", ".", "video_path", ".", "endswith", "(", "'_eyes.mp4'", ")", ":", "\n", "            ", "self", ".", "timestamps_path", "=", "video_path", ".", "replace", "(", "'_eyes.mp4'", ",", "'.timestamps.txt'", ")", "\n", "", "elif", "self", ".", "video_path", ".", "endswith", "(", "'_face.mp4'", ")", ":", "\n", "            ", "self", ".", "timestamps_path", "=", "video_path", ".", "replace", "(", "'_eyes.mp4'", ",", "'.timestamps.txt'", ")", "\n", "", "elif", "self", ".", "video_path", ".", "endswith", "(", "'.128x72.mp4'", ")", ":", "\n", "            ", "self", ".", "timestamps_path", "=", "video_path", ".", "replace", "(", "'.128x72.mp4'", ",", "'.timestamps.txt'", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "timestamps_path", "=", "video_path", ".", "replace", "(", "'.mp4'", ",", "'.timestamps.txt'", ")", "\n", "", "assert", "(", "os", ".", "path", ".", "isfile", "(", "self", ".", "video_path", ")", ")", "\n", "assert", "(", "os", ".", "path", ".", "isfile", "(", "self", ".", "timestamps_path", ")", ")", "\n", "\n", "", "def", "get_frames", "(", "self", ")", ":", "\n", "# print('common.VideoReader.get_frames() procede 0', '---biuwfheh')", "\n", "        ", "assert", "(", "self", ".", "is_async", "is", "False", ")", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.common.rotation_to_vector": [[86, 94], ["torch.cat", "torch.cat", "torch.matmul", "torch.matmul", "torch.zeros_like().reshape", "torch.zeros_like().reshape", "torch.ones_like().reshape", "torch.ones_like().reshape", "torch.zeros_like", "torch.zeros_like", "torch.ones_like", "torch.ones_like"], "function", ["None"], ["# Get frames", "\n", "self", ".", "preparations", "(", ")", "\n", "input_params", ",", "output_params", "=", "self", ".", "get_params", "(", ")", "\n", "# print('common.VideoReader.get_frames() procede 1', '---oijuhg')", "\n", "buffer", ",", "_", "=", "(", "\n", "ffmpeg", ".", "input", "(", "self", ".", "video_path", ",", "**", "input_params", ")", "\n", ".", "output", "(", "'pipe:'", ",", "format", "=", "'rawvideo'", ",", "pix_fmt", "=", "'rgb24'", ",", "loglevel", "=", "\"quiet\"", ",", "\n", "**", "output_params", ")", "\n", ".", "run", "(", "capture_stdout", "=", "True", ",", "quiet", "=", "True", ")", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.common.apply_transformation": [[96, 102], ["pitchyaw_to_vector.reshape", "torch.nn.functional.pad", "common.pitchyaw_to_vector", "torch.matmul", "torch.matmul"], "function", ["home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.gaze.pitchyaw_to_vector"], ["# print('common.VideoReader.get_frames() procede 2', '---btrgwerw')", "\n", "frames", "=", "np", ".", "frombuffer", "(", "buffer", ",", "np", ".", "uint8", ")", ".", "reshape", "(", "-", "1", ",", "self", ".", "height", ",", "self", ".", "width", ",", "3", ")", "\n", "\n", "# print('common.VideoReader.get_frames() procede 3', '---kjhgfd')", "\n", "# Get timestamps", "\n", "timestamps", "=", "self", ".", "timestamps", "\n", "if", "self", ".", "frame_indices", "is", "not", "None", ":", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.common.apply_rotation": [[104, 110], ["pitchyaw_to_vector.reshape", "torch.matmul().reshape", "torch.matmul().reshape", "common.pitchyaw_to_vector", "torch.matmul", "torch.matmul"], "function", ["home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.gaze.pitchyaw_to_vector"], ["# print('common.VideoReader.get_frames() procede 4', '---verewrw')", "\n", "\n", "", "return", "timestamps", ",", "frames", "\n", "\n", "", "def", "preparations", "(", "self", ")", ":", "\n", "# Read video file tags", "\n", "# video_path_bj = '\\\\\\\\'.join(self.video_path.split('/'))", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.common.get_intersect_with_zero": [[116, 140], ["g.view.view", "o.view.view", "torch.sum", "torch.sum", "torch.div().view", "torch.div().view", "torch.mul", "torch.mul", "torch.sum", "torch.sum", "torch.mul", "torch.mul", "torch.div", "torch.div", "torch.mul", "torch.mul"], "function", ["None"], ["# print('src.datasources.common.VideoReader.preparations() procede 1', '---qfqwef')", "\n", "video_stream", "=", "next", "(", "(", "stream", "for", "stream", "in", "probe", "[", "'streams'", "]", "\n", "if", "stream", "[", "'codec_type'", "]", "==", "'video'", ")", ",", "None", ")", "\n", "self", ".", "width", "=", "video_stream", "[", "'width'", "]", "\n", "self", ".", "height", "=", "video_stream", "[", "'height'", "]", "\n", "assert", "self", ".", "height", "!=", "0", "\n", "assert", "self", ".", "width", "!=", "0", "\n", "if", "self", ".", "output_size", "is", "not", "None", ":", "\n", "            ", "self", ".", "width", ",", "self", ".", "height", "=", "self", ".", "output_size", "\n", "# print('src.datasources.common.VideoReader.preparations() procede 2', '---dddddwef')", "\n", "# Read timestamps file", "\n", "", "self", ".", "timestamps", "=", "np", ".", "loadtxt", "(", "self", ".", "timestamps_path", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "# print('src.datasources.common.VideoReader.preparations() procede 3', '---xxxxxfef')", "\n", "\n", "", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "assert", "(", "self", ".", "is_async", ")", "\n", "self", ".", "preparations", "(", ")", "\n", "return", "self", "\n", "\n", "", "def", "get_params", "(", "self", ")", ":", "\n", "# Input params (specifically, selection of decoder)", "\n", "        ", "input_params", "=", "{", "}", "\n", "if", "config", ".", "video_decoder_codec", "==", "'nvdec'", ":", "\n", "            ", "input_params", "=", "{", "\n", "'hwaccel'", ":", "'nvdec'", ",", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.common.calculate_combined_gaze_direction": [[142, 159], ["torch.nn.functional.pad", "common.apply_transformation", "vector_to_pitchyaw.reshape", "torch.matmul", "torch.matmul", "common.vector_to_pitchyaw"], "function", ["home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.common.apply_transformation", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.gaze.vector_to_pitchyaw"], ["'c:v'", ":", "'h264_cuvid'", ",", "\n", "}", "\n", "", "else", ":", "\n", "            ", "assert", "(", "config", ".", "video_decoder_codec", "==", "'libx264'", ")", "\n", "", "input_params", "[", "'vsync'", "]", "=", "0", "\n", "\n", "# Set output params (resize frame here)", "\n", "output_params", "=", "{", "}", "\n", "if", "self", ".", "frame_indices", "is", "not", "None", ":", "\n", "# Index picking for range [start_index, end_index)", "\n", "            ", "assert", "(", "len", "(", "self", ".", "frame_indices", ")", ">", "1", ")", "\n", "cmd", "=", "'select=\\'%s\\''", "%", "'+'", ".", "join", "(", "[", "\n", "(", "'eq(n,%d)'", "%", "index", ")", "\n", "for", "index", "in", "self", ".", "frame_indices", "\n", "]", ")", "\n", "output_params", "[", "'vf'", "]", "=", "(", "output_params", "[", "'vf'", "]", "+", "','", "+", "cmd", "\n", "if", "'vf'", "in", "output_params", "else", "cmd", ")", "\n", "", "if", "self", ".", "output_size", "is", "not", "None", ":", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.common.to_screen_coordinates": [[161, 204], ["common.pitchyaw_to_vector", "torch.transpose", "torch.transpose", "apply_rotation.reshape", "torch.matmul", "torch.matmul", "common.apply_rotation", "common.apply_transformation", "common.get_intersect_with_zero", "torch.stack", "torch.stack", "torch.tensor().to().view", "torch.tensor().to().view", "torch.tensor().to().view", "torch.tensor().to().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "float", "float", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "function", ["home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.gaze.pitchyaw_to_vector", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.common.apply_rotation", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.common.apply_transformation", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.common.get_intersect_with_zero"], ["cmd", "=", "'scale=%d:%d'", "%", "(", "ow", ",", "oh", ")", "\n", "output_params", "[", "'vf'", "]", "=", "(", "output_params", "[", "'vf'", "]", "+", "','", "+", "cmd", "\n", "if", "'vf'", "in", "output_params", "else", "cmd", ")", "\n", "\n", "", "return", "input_params", ",", "output_params", "\n", "\n", "", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "assert", "(", "self", ".", "is_async", ")", "\n", "input_params", ",", "output_params", "=", "self", ".", "get_params", "(", ")", "\n", "\n", "# Make the actual call", "\n", "self", ".", "ffmpeg_call", "=", "(", "\n", "ffmpeg", "\n", ".", "input", "(", "self", ".", "video_path", ",", "**", "input_params", ")", "\n", ".", "output", "(", "'pipe:'", ",", "format", "=", "'rawvideo'", ",", "pix_fmt", "=", "'bgr24'", ",", "loglevel", "=", "\"quiet\"", ",", "**", "output_params", ")", "\n", ".", "run_async", "(", "pipe_stdout", "=", "True", ")", "\n", ")", "\n", "self", ".", "index", "=", "self", ".", "start_index", "if", "self", ".", "start_index", "is", "not", "None", "else", "0", "\n", "return", "self", "\n", "\n", "", "def", "__next__", "(", "self", ")", ":", "\n", "        ", "assert", "(", "self", ".", "is_async", ")", "\n", "in_bytes", "=", "self", ".", "ffmpeg_call", ".", "stdout", ".", "read", "(", "self", ".", "height", "*", "self", ".", "width", "*", "3", ")", "\n", "if", "not", "in_bytes", ":", "\n", "            ", "raise", "StopIteration", "\n", "", "if", "self", ".", "index", ">=", "len", "(", "self", ".", "timestamps", ")", ":", "\n", "            ", "raise", "StopIteration", "\n", "", "current_timestamp", "=", "self", ".", "timestamps", "[", "self", ".", "index", "]", "\n", "self", ".", "index", "+=", "1", "\n", "return", "(", "\n", "current_timestamp", ",", "\n", "np", ".", "frombuffer", "(", "in_bytes", ",", "dtype", "=", "np", ".", "uint8", ")", ".", "reshape", "(", "self", ".", "height", ",", "self", ".", "width", ",", "3", ")", "\n", ")", "\n", "\n", "", "def", "__exit__", "(", "self", ",", "type", ",", "value", ",", "traceback", ")", ":", "\n", "        ", "if", "self", ".", "is_async", ":", "\n", "            ", "self", ".", "ffmpeg_call", ".", "stdout", ".", "close", "(", ")", "\n", "self", ".", "ffmpeg_call", ".", "wait", "(", ")", "\n", "\n", "\n", "# Basic test to see that frames-slice grabbing works", "\n", "", "", "", "if", "__name__", "==", "'__main__'", ":", "\n", "    ", "import", "argparse", "# noqa", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Merge individual videos into one.'", ")", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.common.apply_offset_augmentation": [[206, 244], ["common.pitchyaw_to_vector", "torch.transpose", "torch.transpose", "vector_to_pitchyaw.reshape", "torch.matmul", "torch.matmul", "pitchyaw_to_vector().reshape", "common.pitchyaw_to_rotation", "torch.matmul", "torch.matmul", "vector_to_pitchyaw.reshape", "torch.matmul", "torch.matmul", "common.vector_to_pitchyaw", "torch.cat", "torch.cat", "common.vector_to_pitchyaw", "common.pitchyaw_to_vector", "kappa_vector[].reshape"], "function", ["home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.gaze.pitchyaw_to_vector", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.common.pitchyaw_to_rotation", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.gaze.vector_to_pitchyaw", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.gaze.vector_to_pitchyaw", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.gaze.pitchyaw_to_vector"], ["args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "assert", "(", "os", ".", "path", ".", "isfile", "(", "args", ".", "video_file", ")", ")", "\n", "timestamps", ",", "frames", "=", "VideoReader", "(", "args", ".", "video_file", ",", "is_async", "=", "False", ",", "\n", "start_index", "=", "10", ",", "end_index", "=", "60", ")", ".", "get_frames", "(", ")", "\n", "import", "cv2", "as", "cv", "# noqa", "\n", "for", "timestamp", ",", "frame", "in", "zip", "(", "timestamps", ",", "frames", ")", ":", "\n", "        ", "print", "(", "timestamp", ")", "\n", "cv", ".", "imshow", "(", "'frame'", ",", "cv", ".", "resize", "(", "frame", ",", "None", ",", "fx", "=", "0.5", ",", "fy", "=", "0.5", ")", ")", "\n", "cv", ".", "waitKey", "(", "100", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.common.make_heatmap": [[251, 269], ["torch.exp", "torch.exp", "torch.exp.unsqueeze", "numpy.arange", "numpy.expand_dims", "numpy.arange", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "function", ["None"], []], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.common.batch_make_heatmaps": [[271, 273], ["torch.stack", "torch.stack", "common.make_heatmap"], "function", ["home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.common.make_heatmap"], []], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.common.make_gaze_history_map": [[278, 305], ["torch.zeros_like", "torch.zeros_like", "zip", "torch.pow().view", "torch.pow().view", "torch.tensor().to", "torch.tensor().to", "torch.tensor().cuda", "torch.tensor().cuda", "torch.nonzero", "torch.nonzero", "torch.pow", "torch.pow", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "validity.float", "torch.pow().view.detach"], "function", ["None"], []], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.common.batch_make_gaze_history_maps": [[307, 319], ["len", "torch.stack", "torch.stack", "common.make_gaze_history_map", "range"], "function", ["home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.common.make_gaze_history_map"], []], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.common.soft_argmax": [[325, 359], ["heatmaps.view", "torch.nn.functional.softmax", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.stack", "torch.stack", "numpy.meshgrid", "numpy.reshape", "numpy.reshape", "numpy.linspace", "numpy.linspace", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "np.reshape.astype", "np.reshape.astype", "np.reshape.astype", "np.reshape.astype"], "function", ["None"], []], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.eve.EVE.__init__": [[57, 80], ["torch.Module.__init__", "eye_net.EyeNet", "refine_net.RefineNet", "utils.load_model.load_weights_for_instance", "torch.load", "torch.load", "torch.load", "torch.load", "dict", "utils.load_model.load_weights_for_instance", "utils.load_model.load_weights_for_instance", "dict.items"], "methods", ["home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.checkpoint_manager.CheckpointManager.__init__", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.utils.load_model.load_weights_for_instance", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.utils.load_model.load_weights_for_instance", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.utils.load_model.load_weights_for_instance"], ["    ", "def", "__init__", "(", "self", ",", "output_predictions", "=", "False", ")", ":", "\n", "        ", "super", "(", "EVE", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "output_predictions", "=", "output_predictions", "\n", "\n", "# Network to estimate gaze direction and pupil size (mm)", "\n", "self", ".", "eye_net", "=", "EyeNet", "(", ")", "\n", "if", "config", ".", "eye_net_load_pretrained", ":", "\n", "            ", "if", "config", ".", "eye_net_load_from_specified_location", "!=", "''", ":", "\n", "                ", "state_dict", "=", "torch", ".", "load", "(", "config", ".", "eye_net_load_from_specified_location", ",", "map_location", "=", "device", ")", "\n", "state_dict", "=", "dict", "(", "[", "(", "k", "[", "8", ":", "]", ",", "v", ")", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", "]", ")", "# there is 'eye_net.' infront every key, remove it,", "\n", "load_weights_for_instance", "(", "self", ".", "eye_net", ",", "state_dict", ")", "\n", "", "else", ":", "\n", "                ", "load_weights_for_instance", "(", "self", ".", "eye_net", ")", "\n", "\n", "# Network to refine estimated gaze based on:", "\n", "#   a) history of point of gaze (PoG)", "\n", "#   b) screen content", "\n", "", "", "self", ".", "refine_net", "=", "RefineNet", "(", ")", "if", "config", ".", "refine_net_enabled", "else", "None", "\n", "if", "config", ".", "refine_net_enabled", "and", "config", ".", "refine_net_load_pretrained", ":", "\n", "            ", "load_weights_for_instance", "(", "self", ".", "refine_net", ")", "\n", "\n", "", "self", ".", "eye_side", "=", "config", ".", "eye_side", "# hwiojefoiwjef eve.py", "\n", "self", ".", "jiugong_enabled", "=", "config", ".", "jiugong_enabled", "\n", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.eve.EVE.forward": [[334, 682], ["eve.EVE.calculate_additional_labels", "range", "intermediate_dicts[].keys", "full_intermediate_dict.keys", "eve.EVE.calculate_losses_and_metrics", "next", "next.items", "eve.EVE.from_g_to_PoG_history", "intermediate_dicts.append", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "k.startswith", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "len", "iter", "next", "isinstance", "eve.EVE.eye_net", "eve.EVE.eye_net", "eve.EVE.generate_eye_list", "eve.EVE.from_g_to_PoG_history", "eve.EVE.from_g_to_PoG_history", "eve.EVE.refine_net", "refined_heatmap_history.append", "common.soft_argmax", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "common.calculate_combined_gaze_direction", "isinstance", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "next.values", "iter", "len", "common.apply_offset_augmentation", "common.batch_make_gaze_history_maps", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "next.values", "range"], "methods", ["home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.eve.EVE.calculate_additional_labels", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.eve.EVE.calculate_losses_and_metrics", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.eve.EVE.from_g_to_PoG_history", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.eve.EVE.generate_eye_list", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.eve.EVE.from_g_to_PoG_history", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.eve.EVE.from_g_to_PoG_history", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.common.soft_argmax", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.common.calculate_combined_gaze_direction", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.common.apply_offset_augmentation", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.common.batch_make_gaze_history_maps"], ["", "def", "forward", "(", "self", ",", "full_input_dict", ",", "create_images", "=", "False", ",", "current_epoch", "=", "None", ")", ":", "\n", "# tt0 = time.time()", "\n", "        ", "if", "self", ".", "training", ":", "# pick first source", "\n", "            ", "assert", "len", "(", "full_input_dict", ")", "==", "1", "# for now say there's 1 training data source", "\n", "full_input_dict", "=", "next", "(", "iter", "(", "full_input_dict", ".", "values", "(", ")", ")", ")", "\n", "\n", "# There are some labels that we need to calculate ourselves", "\n", "# print(device, current_epoch, create_images, '---nbiefiko eve.py')", "\n", "", "self", ".", "calculate_additional_labels", "(", "full_input_dict", ",", "current_epoch", "=", "current_epoch", ")", "\n", "\n", "# NOTE: In general, parts of the architecture will read from `input_dict`", "\n", "#       and write to `output_dict`. However, as we want some modularity,", "\n", "#       the routines will always look for previous-step estimates first,", "\n", "#       which will exist in `output_dict`.", "\n", "#", "\n", "#       For example, if the key `left_gaze_origin` exists in `output_dict`,", "\n", "#       the following routines will use this estimate instead of the", "\n", "#       ground-truth existing in `input_dict`.", "\n", "\n", "# self.peek_dict(full_input_dict, '---ejijioj')", "\n", "\n", "intermediate_dicts", "=", "[", "]", "# One entry per time step in sequence", "\n", "initial_heatmap_history", "=", "[", "]", "\n", "refined_heatmap_history", "=", "[", "]", "\n", "\n", "sequence_len", "=", "next", "(", "iter", "(", "full_input_dict", ".", "values", "(", ")", ")", ")", ".", "shape", "[", "1", "]", "\n", "# print('jiugong enabled', self.jiugong_enabled, '---nbuhjefi eve.py')", "\n", "# tt1 = time.time()", "\n", "for", "t", "in", "range", "(", "sequence_len", ")", ":", "\n", "# tm0 = time.time()", "\n", "# Create new dict formed only of the specific camera view's data", "\n", "            ", "sub_input_dict", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "full_input_dict", ".", "items", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "v", ",", "torch", ".", "Tensor", ")", ":", "\n", "                    ", "sub_v", "=", "v", "[", ":", ",", "t", ",", ":", "]", "if", "v", ".", "ndim", ">", "2", "else", "v", "[", ":", ",", "t", "]", "\n", "sub_input_dict", "[", "k", "]", "=", "sub_v", "\n", "\n", "# Step 0) Define output structure that will hold", "\n", "#         - intermediate outputs", "\n", "#         - final outputs", "\n", "#         - individual loss terms", "\n", "", "", "sub_output_dict", "=", "{", "}", "\n", "\n", "# Step 1a) From each eye patch, estimate gaze direction and pupil size", "\n", "previous_output_dict", "=", "(", "intermediate_dicts", "[", "-", "1", "]", "if", "len", "(", "intermediate_dicts", ")", ">", "0", "else", "None", ")", "\n", "#sub_input_dict['previous_output_dict'] = previous_output_dict", "\n", "\n", "# tm1 = time.time()", "\n", "if", "config", ".", "eye_side", "in", "[", "'left'", ",", "'binocular'", "]", ":", "\n", "#self.eye_net.forward_kwargs['side'] = 'left'", "\n", "# sub_output_dict_left =  self.eye_net(sub_input_dict, side='left') # nboiwjfoij", "\n", "# sub_output_dict = sub_output_dict_left", "\n", "                ", "self", ".", "eye_net", "(", "sub_input_dict", ",", "output_dict", "=", "sub_output_dict", ",", "previous_output_dict", "=", "previous_output_dict", ",", "side", "=", "'left'", ")", "# nboiwjfoij", "\n", "# self.peek_dict(sub_output_dict_left, '---nejifj eve.py')", "\n", "# tm2 = time.time()", "\n", "", "if", "config", ".", "eye_side", "in", "[", "'right'", ",", "'binocular'", "]", ":", "\n", "#self.eye_net.forward_kwargs['side'] = 'right'", "\n", "# sub_output_dict_right =  self.eye_net(sub_input_dict, side='right') # nboiwjfoij", "\n", "# sub_output_dict = dict(list(sub_output_dict.items()) + list(sub_output_dict_right.items()))", "\n", "                ", "self", ".", "eye_net", "(", "sub_input_dict", ",", "output_dict", "=", "sub_output_dict", ",", "previous_output_dict", "=", "previous_output_dict", ",", "side", "=", "'right'", ")", "# nwfeeeoij", "\n", "# self.peek_dict(sub_output_dict_right, '---jfeifjoij eve.py')", "\n", "# self.peek_dict(sub_output_dict, '---jctvybu eve.py')", "\n", "# tm3 = time.time()", "\n", "\n", "# self.eye_net(sub_input_dict, sub_output_dict, side='right',", "\n", "#              previous_output_dict=previous_output_dict)", "\n", "#st()", "\n", "# During training: add random offsets to gaze directions", "\n", "\n", "", "if", "self", ".", "training", "and", "config", ".", "refine_net_do_offset_augmentation", ":", "\n", "#st()", "\n", "                ", "eye_list", "=", "self", ".", "generate_eye_list", "(", ")", "\n", "for", "side", "in", "eye_list", ":", "\n", "                    ", "sub_output_dict", "[", "side", "+", "'_g_initial_unaugmented'", "]", "=", "sub_output_dict", "[", "side", "+", "'_g_initial'", "]", "\n", "\n", "# print(sub_input_dict[side + '_kappa_fake'], '--w-fijijd eve.py')", "\n", "# print(sub_input_dict['head_R'], '--weeffffjd')", "\n", "# print(sub_output_dict[side + '_g_initial'], '--w-efjoij eve.py')", "\n", "\n", "sub_output_dict", "[", "side", "+", "'_g_initial'", "]", "=", "apply_offset_augmentation", "(", "\n", "sub_output_dict", "[", "side", "+", "'_g_initial'", "]", ",", "\n", "sub_input_dict", "[", "'head_R'", "]", ",", "\n", "sub_input_dict", "[", "side", "+", "'_kappa_fake'", "]", ",", "\n", ")", "\n", "\n", "", "self", ".", "from_g_to_PoG_history", "(", "full_input_dict", ",", "sub_input_dict", ",", "sub_output_dict", ",", "\n", "input_suffix", "=", "'initial'", ",", "\n", "output_suffix", "=", "'initial_unaugmented'", ",", "\n", "heatmap_history", "=", "None", ",", "\n", "gaze_heatmap_sigma", "=", "config", ".", "gaze_heatmap_sigma_initial", ",", "\n", "history_heatmap_sigma", "=", "config", ".", "gaze_heatmap_sigma_history", ")", "\n", "\n", "self", ".", "from_g_to_PoG_history", "(", "full_input_dict", ",", "sub_input_dict", ",", "sub_output_dict", ",", "\n", "input_suffix", "=", "'initial'", ",", "\n", "output_suffix", "=", "'initial_augmented'", ",", "\n", "heatmap_history", "=", "None", ",", "\n", "gaze_heatmap_sigma", "=", "config", ".", "gaze_heatmap_sigma_initial", ",", "\n", "history_heatmap_sigma", "=", "config", ".", "gaze_heatmap_sigma_history", ")", "\n", "\n", "# Step 1b) Estimate PoG, create heatmaps, and heatmap history", "\n", "# look for right_POG_cm_initial", "\n", "", "self", ".", "from_g_to_PoG_history", "(", "full_input_dict", ",", "sub_input_dict", ",", "sub_output_dict", ",", "\n", "input_suffix", "=", "'initial'", ",", "\n", "output_suffix", "=", "'initial'", ",", "\n", "heatmap_history", "=", "initial_heatmap_history", ",", "\n", "gaze_heatmap_sigma", "=", "config", ".", "gaze_heatmap_sigma_initial", ",", "\n", "history_heatmap_sigma", "=", "config", ".", "gaze_heatmap_sigma_history", ")", "\n", "\n", "# Step 2) Digest screen content frame", "\n", "if", "self", ".", "refine_net", ":", "\n", "                ", "self", ".", "refine_net", "(", "sub_input_dict", ",", "sub_output_dict", ",", "\n", "previous_output_dict", "=", "previous_output_dict", ")", "\n", "\n", "# Step 2b) Update refined heatmap history", "\n", "refined_heatmap_history", ".", "append", "(", "sub_output_dict", "[", "'heatmap_final'", "]", ")", "\n", "refined_gaze_history_maps", "=", "batch_make_gaze_history_maps", "(", "\n", "full_input_dict", "[", "'timestamps'", "]", ",", "refined_heatmap_history", ",", "\n", "full_input_dict", "[", "'PoG_px_tobii_validity'", "]", ",", "\n", ")", "if", "'PoG_px_tobii'", "in", "full_input_dict", "else", "None", "\n", "\n", "# Step 3) Yield refined final PoG estimate(s)", "\n", "sub_output_dict", "[", "'PoG_px_final'", "]", "=", "soft_argmax", "(", "sub_output_dict", "[", "'heatmap_final'", "]", ")", "\n", "cm_per_px", "=", "0.1", "*", "sub_input_dict", "[", "'millimeters_per_pixel'", "]", "\n", "sub_output_dict", "[", "'PoG_cm_final'", "]", "=", "torch", ".", "mul", "(", "\n", "sub_output_dict", "[", "'PoG_px_final'", "]", ",", "cm_per_px", ",", "\n", ")", "\n", "\n", "# and gaze direction '---bwejijjd eve.py'", "\n", "sub_output_dict", "[", "'g_final'", "]", "=", "calculate_combined_gaze_direction", "(", "\n", "sub_input_dict", "[", "'o'", "]", ",", "\n", "10.0", "*", "sub_output_dict", "[", "'PoG_cm_final'", "]", ",", "\n", "sub_input_dict", "[", "'left_R'", "]", ",", "# by definition, 'left_R' == 'right_R'", "\n", "sub_input_dict", "[", "'camera_transformation'", "]", ",", "\n", ")", "\n", "\n", "# Store back outputs", "\n", "", "intermediate_dicts", ".", "append", "(", "sub_output_dict", ")", "\n", "# tm4 = time.time()", "\n", "# timeMarks = np.array([tm0, tm1, tm2, tm3, tm4,])", "\n", "# timePeriodsStr = ['tm' + str(i) + '.tm' + str(i + 1) for i in range(len(timeMarks) - 1)]", "\n", "# timePeriods = timeMarks[1:] - timeMarks[:-1]", "\n", "# if t == 45:", "\n", "#     print('seqence', t, list(zip(timePeriodsStr, timePeriods)), '---fekfokekof eve.py')", "\n", "\n", "# tt2 = time.time()", "\n", "# Merge intermediate outputs over time steps to yield BxTxF tensors", "\n", "", "full_intermediate_dict", "=", "{", "}", "\n", "for", "k", "in", "intermediate_dicts", "[", "0", "]", ".", "keys", "(", ")", ":", "\n", "            ", "sample", "=", "intermediate_dicts", "[", "0", "]", "[", "k", "]", "\n", "if", "not", "isinstance", "(", "sample", ",", "torch", ".", "Tensor", ")", ":", "\n", "                ", "continue", "\n", "", "full_intermediate_dict", "[", "k", "]", "=", "torch", ".", "stack", "(", "[", "\n", "intermediate_dicts", "[", "i", "]", "[", "k", "]", "for", "i", "in", "range", "(", "sequence_len", ")", "\n", "]", ",", "axis", "=", "1", ")", "\n", "# print(self.peek_dict(full_intermediate_dict), '---hhuefij eve.py')", "\n", "\n", "# Copy over some values that we want to yield as NN output", "\n", "", "output_dict", "=", "{", "}", "\n", "for", "k", "in", "full_intermediate_dict", ".", "keys", "(", ")", ":", "\n", "            ", "if", "k", ".", "startswith", "(", "'output_'", ")", ":", "\n", "                ", "output_dict", "[", "k", "]", "=", "full_intermediate_dict", "[", "k", "]", "\n", "# print(self.peek_dict(output_dict), '---wfefddfsdf eve.py')", "\n", "\n", "", "", "if", "config", ".", "load_full_frame_for_visualization", ":", "\n", "# Copy over some values manually", "\n", "            ", "if", "'left_g_tobii'", "in", "full_input_dict", ":", "\n", "                ", "output_dict", "[", "'left_g_gt'", "]", "=", "full_input_dict", "[", "'left_g_tobii'", "]", "\n", "", "if", "'right_g_tobii'", "in", "full_input_dict", ":", "\n", "                ", "output_dict", "[", "'right_g_gt'", "]", "=", "full_input_dict", "[", "'right_g_tobii'", "]", "\n", "\n", "", "output_dict", "[", "'PoG_px_gt'", "]", "=", "full_input_dict", "[", "'PoG_px_tobii'", "]", "\n", "# print('lenth of PoG_px_gt', len(output_dict['PoG_px_gt']), '---nbjjfjef eye.py')", "\n", "output_dict", "[", "'PoG_px_gt_validity'", "]", "=", "full_input_dict", "[", "'PoG_px_tobii_validity'", "]", "\n", "\n", "if", "self", ".", "eye_side", "in", "[", "'left'", ",", "'binocular'", "]", ":", "\n", "                ", "output_dict", "[", "'left_g_initial'", "]", "=", "full_intermediate_dict", "[", "'left_g_initial'", "]", "\n", "output_dict", "[", "'left_pupil_size'", "]", "=", "full_intermediate_dict", "[", "'left_pupil_size'", "]", "\n", "", "if", "self", ".", "eye_side", "in", "[", "'right'", ",", "'binocular'", "]", ":", "\n", "                ", "output_dict", "[", "'right_g_initial'", "]", "=", "full_intermediate_dict", "[", "'right_g_initial'", "]", "\n", "output_dict", "[", "'right_pupil_size'", "]", "=", "full_intermediate_dict", "[", "'right_pupil_size'", "]", "\n", "", "output_dict", "[", "'PoG_px_initial'", "]", "=", "full_intermediate_dict", "[", "'PoG_px_initial'", "]", "\n", "if", "config", ".", "refine_net_enabled", ":", "\n", "                ", "output_dict", "[", "'g_final'", "]", "=", "full_intermediate_dict", "[", "'g_final'", "]", "\n", "output_dict", "[", "'PoG_px_final'", "]", "=", "full_intermediate_dict", "[", "'PoG_px_final'", "]", "\n", "\n", "", "", "if", "self", ".", "output_predictions", ":", "\n", "            ", "output_dict", "[", "'timestamps'", "]", "=", "full_input_dict", "[", "'timestamps'", "]", "\n", "output_dict", "[", "'o'", "]", "=", "full_input_dict", "[", "'o'", "]", "\n", "output_dict", "[", "'left_R'", "]", "=", "full_input_dict", "[", "'left_R'", "]", "\n", "output_dict", "[", "'head_R'", "]", "=", "full_input_dict", "[", "'head_R'", "]", "\n", "output_dict", "[", "'g_initial'", "]", "=", "full_intermediate_dict", "[", "'g_initial'", "]", "\n", "output_dict", "[", "'PoG_px_initial'", "]", "=", "full_intermediate_dict", "[", "'PoG_px_initial'", "]", "\n", "output_dict", "[", "'PoG_cm_initial'", "]", "=", "full_intermediate_dict", "[", "'PoG_cm_initial'", "]", "\n", "output_dict", "[", "'millimeters_per_pixel'", "]", "=", "full_input_dict", "[", "'millimeters_per_pixel'", "]", "\n", "output_dict", "[", "'pixels_per_millimeter'", "]", "=", "full_input_dict", "[", "'pixels_per_millimeter'", "]", "\n", "output_dict", "[", "'camera_transformation'", "]", "=", "full_input_dict", "[", "'camera_transformation'", "]", "\n", "output_dict", "[", "'inv_camera_transformation'", "]", "=", "full_input_dict", "[", "'inv_camera_transformation'", "]", "\n", "\n", "# Ground-truth related data", "\n", "if", "'g'", "in", "full_input_dict", ":", "\n", "                ", "output_dict", "[", "'g'", "]", "=", "full_input_dict", "[", "'g'", "]", "\n", "output_dict", "[", "'validity'", "]", "=", "full_input_dict", "[", "'PoG_px_tobii_validity'", "]", "\n", "output_dict", "[", "'PoG_cm'", "]", "=", "full_input_dict", "[", "'PoG_cm_tobii'", "]", "\n", "output_dict", "[", "'PoG_px'", "]", "=", "full_input_dict", "[", "'PoG_px_tobii'", "]", "\n", "\n", "", "if", "self", ".", "refine_net", ":", "\n", "                ", "output_dict", "[", "'g_final'", "]", "=", "full_intermediate_dict", "[", "'g_final'", "]", "\n", "output_dict", "[", "'PoG_px_final'", "]", "=", "full_intermediate_dict", "[", "'PoG_px_final'", "]", "\n", "output_dict", "[", "'PoG_cm_final'", "]", "=", "full_intermediate_dict", "[", "'PoG_cm_final'", "]", "\n", "\n", "# Calculate all loss terms and metrics (scores)", "\n", "", "", "self", ".", "calculate_losses_and_metrics", "(", "full_input_dict", ",", "full_intermediate_dict", ",", "output_dict", ")", "\n", "\n", "# Calculate the final combined (and weighted) loss", "\n", "if", "not", "config", ".", "multi_gpu", ":", "\n", "            ", "full_loss", "=", "torch", ".", "zeros", "(", "(", ")", ")", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "            ", "full_loss", "=", "torch", ".", "zeros", "(", "(", ")", ")", ".", "cuda", "(", ")", "\n", "\n", "# Add all losses for the eye network", "\n", "", "if", "self", ".", "eye_side", "==", "'binocular'", ":", "\n", "            ", "if", "'loss_ang_left_g_initial'", "in", "output_dict", ":", "\n", "                ", "full_loss", "+=", "config", ".", "loss_coeff_g_ang_initial", "*", "(", "\n", "output_dict", "[", "'loss_ang_left_g_initial'", "]", "+", "\n", "output_dict", "[", "'loss_ang_right_g_initial'", "]", "\n", ")", "\n", "", "if", "'loss_mse_left_PoG_cm_initial'", "in", "output_dict", "and", "config", ".", "loss_coeff_PoG_cm_initial", ">", "0.0", ":", "\n", "                ", "full_loss", "+=", "config", ".", "loss_coeff_PoG_cm_initial", "*", "(", "\n", "output_dict", "[", "'loss_mse_left_PoG_cm_initial'", "]", "+", "\n", "output_dict", "[", "'loss_mse_right_PoG_cm_initial'", "]", "\n", ")", "\n", "", "if", "'loss_l1_left_pupil_size'", "in", "output_dict", ":", "\n", "                ", "full_loss", "+=", "config", ".", "loss_coeff_pupil_size", "*", "(", "\n", "output_dict", "[", "'loss_l1_left_pupil_size'", "]", "+", "\n", "output_dict", "[", "'loss_l1_right_pupil_size'", "]", "\n", ")", "\n", "", "", "elif", "self", ".", "eye_side", "==", "'left'", ":", "\n", "            ", "if", "'loss_ang_left_g_initial'", "in", "output_dict", ":", "\n", "                ", "full_loss", "+=", "config", ".", "loss_coeff_g_ang_initial", "*", "(", "\n", "output_dict", "[", "'loss_ang_left_g_initial'", "]", "\n", ")", "\n", "", "if", "'loss_mse_left_PoG_cm_initial'", "in", "output_dict", "and", "config", ".", "loss_coeff_PoG_cm_initial", ">", "0.0", ":", "\n", "                ", "full_loss", "+=", "config", ".", "loss_coeff_PoG_cm_initial", "*", "(", "\n", "output_dict", "[", "'loss_mse_left_PoG_cm_initial'", "]", "\n", ")", "\n", "", "if", "'loss_l1_left_pupil_size'", "in", "output_dict", ":", "\n", "                ", "full_loss", "+=", "config", ".", "loss_coeff_pupil_size", "*", "(", "\n", "output_dict", "[", "'loss_l1_left_pupil_size'", "]", "\n", ")", "\n", "", "", "elif", "self", ".", "eye_side", "==", "'right'", ":", "\n", "            ", "if", "'loss_ang_left_g_initial'", "in", "output_dict", ":", "\n", "                ", "full_loss", "+=", "config", ".", "loss_coeff_g_ang_initial", "*", "(", "\n", "output_dict", "[", "'loss_ang_right_g_initial'", "]", "\n", ")", "\n", "", "if", "'loss_mse_left_PoG_cm_initial'", "in", "output_dict", "and", "config", ".", "loss_coeff_PoG_cm_initial", ">", "0.0", ":", "\n", "                ", "full_loss", "+=", "config", ".", "loss_coeff_PoG_cm_initial", "*", "(", "\n", "output_dict", "[", "'loss_mse_right_PoG_cm_initial'", "]", "\n", ")", "\n", "", "if", "'loss_l1_left_pupil_size'", "in", "output_dict", ":", "\n", "                ", "full_loss", "+=", "config", ".", "loss_coeff_pupil_size", "*", "(", "\n", "output_dict", "[", "'loss_l1_right_pupil_size'", "]", "\n", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "\n", "\n", "# tt3 = time.time()", "\n", "# Add all losses for the eye network", "\n", "", "if", "'loss_ang_left_g_initial'", "in", "output_dict", ":", "\n", "            ", "full_loss", "+=", "config", ".", "loss_coeff_g_ang_initial", "*", "(", "\n", "output_dict", "[", "'loss_ang_left_g_initial'", "]", "+", "\n", "output_dict", "[", "'loss_ang_right_g_initial'", "]", "\n", ")", "\n", "", "if", "'loss_mse_left_PoG_cm_initial'", "in", "output_dict", "and", "config", ".", "loss_coeff_PoG_cm_initial", ">", "0.0", ":", "\n", "            ", "full_loss", "+=", "config", ".", "loss_coeff_PoG_cm_initial", "*", "(", "\n", "output_dict", "[", "'loss_mse_left_PoG_cm_initial'", "]", "+", "\n", "output_dict", "[", "'loss_mse_right_PoG_cm_initial'", "]", "\n", ")", "\n", "", "if", "'loss_l1_left_pupil_size'", "in", "output_dict", ":", "\n", "            ", "full_loss", "+=", "config", ".", "loss_coeff_pupil_size", "*", "(", "\n", "output_dict", "[", "'loss_l1_left_pupil_size'", "]", "+", "\n", "output_dict", "[", "'loss_l1_right_pupil_size'", "]", "\n", ")", "\n", "\n", "# # Add all losses for the eye network", "\n", "# if ('loss_ang_left_g_initial' in output_dict) or ('loss_ang_right_g_initial' in output_dict):", "\n", "#     full_loss += config.loss_coeff_g_ang_initial * (", "\n", "#         (output_dict['loss_ang_left_g_initial'] if 'loss_ang_left_g_initial' in output_dict else 0) * left_weight +", "\n", "#         (output_dict['loss_ang_right_g_initial'] if 'loss_ang_right_g_initial' in output_dict else 0) * right_weight", "\n", "#         # output_dict['loss_ang_left_g_initial'] * 2", "\n", "#     )", "\n", "# if ('loss_mse_left_PoG_cm_initial' in output_dict) or ('loss_mse_right_PoG_cm_initial' in output_dict) \\", "\n", "#         and config.loss_coeff_PoG_cm_initial > 0.0:", "\n", "#     full_loss += config.loss_coeff_PoG_cm_initial * (", "\n", "#             (output_dict['loss_mse_left_PoG_cm_initial'] if 'loss_mse_left_PoG_cm_initial' in output_dict else 0) * left_weight +", "\n", "#             (output_dict['loss_mse_right_PoG_cm_initial'] if 'loss_mse_right_PoG_cm_initial' in output_dict else 0) * right_weight", "\n", "#         # output_dict['loss_mse_right_PoG_cm_initial']", "\n", "#     )", "\n", "# if ('loss_l1_left_pupil_size' in output_dict) or ('loss_l1_right_pupil_size' in output_dict):", "\n", "#     full_loss += config.loss_coeff_pupil_size * (", "\n", "#             (output_dict['loss_l1_left_pupil_size'] if 'loss_l1_left_pupil_size' in output_dict else 0) * left_weight +", "\n", "#             (output_dict['loss_l1_right_pupil_size'] if 'loss_l1_right_pupil_size' in output_dict else 0) * right_weight", "\n", "#         # output_dict['loss_l1_right_pupil_size']", "\n", "#     )", "\n", "\n", "# Add all losses for the GazeRefineNet", "\n", "", "if", "'loss_mse_PoG_cm_final'", "in", "output_dict", ":", "\n", "            ", "full_loss", "+=", "config", ".", "loss_coeff_PoG_cm_final", "*", "output_dict", "[", "'loss_mse_PoG_cm_final'", "]", "\n", "", "if", "'loss_ce_heatmap_initial'", "in", "output_dict", ":", "\n", "            ", "full_loss", "+=", "config", ".", "loss_coeff_heatmap_ce_initial", "*", "output_dict", "[", "'loss_ce_heatmap_initial'", "]", "\n", "", "if", "'loss_ce_heatmap_final'", "in", "output_dict", ":", "\n", "            ", "full_loss", "+=", "config", ".", "loss_coeff_heatmap_ce_final", "*", "output_dict", "[", "'loss_ce_heatmap_final'", "]", "\n", "", "if", "'loss_mse_heatmap_final'", "in", "output_dict", ":", "\n", "            ", "full_loss", "+=", "config", ".", "loss_coeff_heatmap_mse_final", "*", "output_dict", "[", "'loss_mse_heatmap_final'", "]", "\n", "\n", "# print('full_loss size', full_loss.size(), output_dict['loss_ang_left_g_initial'], '---nbejijijfjf eve.py')", "\n", "", "output_dict", "[", "'full_loss'", "]", "=", "full_loss", "\n", "\n", "# Store away tensors for visualization", "\n", "# tt4 = time.time()", "\n", "if", "create_images", ":", "\n", "            ", "if", "config", ".", "load_full_frame_for_visualization", ":", "\n", "                ", "output_dict", "[", "'both_eye_patch'", "]", "=", "torch", ".", "cat", "(", "[", "\n", "full_input_dict", "[", "'right_eye_patch'", "]", ",", "full_input_dict", "[", "'left_eye_patch'", "]", ",", "\n", "]", ",", "axis", "=", "4", ")", "\n", "", "if", "config", ".", "load_screen_content", ":", "\n", "                ", "output_dict", "[", "'screen_frame'", "]", "=", "full_input_dict", "[", "'screen_frame'", "]", "[", ":", ",", "-", "1", ",", ":", "]", "\n", "", "if", "'history_initial'", "in", "full_intermediate_dict", ":", "\n", "                ", "output_dict", "[", "'initial_gaze_history'", "]", "=", "full_intermediate_dict", "[", "'history_initial'", "]", "[", ":", ",", "-", "1", ",", ":", "]", "# noqa", "\n", "", "if", "'heatmap_initial'", "in", "full_intermediate_dict", ":", "\n", "                ", "output_dict", "[", "'initial_heatmap'", "]", "=", "full_intermediate_dict", "[", "'heatmap_initial'", "]", "[", ":", ",", "-", "1", ",", ":", "]", "\n", "", "if", "'heatmap_final'", "in", "full_intermediate_dict", ":", "\n", "                ", "output_dict", "[", "'final_heatmap'", "]", "=", "full_intermediate_dict", "[", "'heatmap_final'", "]", "[", ":", ",", "-", "1", ",", ":", "]", "\n", "output_dict", "[", "'refined_gaze_history'", "]", "=", "refined_gaze_history_maps", "\n", "", "if", "'heatmap_final'", "in", "full_input_dict", ":", "\n", "                ", "output_dict", "[", "'gt_heatmap'", "]", "=", "full_input_dict", "[", "'heatmap_final'", "]", "[", ":", ",", "-", "1", ",", ":", "]", "\n", "\n", "# self.peek_dict(output_dict, '---fhfweohih eve.py')", "\n", "# tt5 = time.time()", "\n", "# timeMarks = np.array([tt0, tt1, tt2, tt3, tt4, tt5,])", "\n", "# timePeriodsStr = ['tt' + str(i) + '.tt' + str(i + 1) for i in range(len(timeMarks) - 1)]", "\n", "# timePeriods = timeMarks[1:] - timeMarks[:-1]", "\n", "# print('seqence', t, list(zip(timePeriodsStr, timePeriods)), '---mnjiiytgyuj eve.py')", "\n", "", "", "return", "output_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.eve.EVE.calculate_losses_and_metrics": [[683, 872], ["cross_entropy_loss", "cross_entropy_loss", "mse_loss", "mse_loss", "euclidean_loss", "mse_loss", "euclidean_loss", "angular_loss", "mse_loss", "euclidean_loss", "mse_loss", "euclidean_loss", "angular_loss", "angular_loss", "mse_loss", "euclidean_loss", "euclidean_loss", "l1_loss", "mse_loss", "euclidean_loss", "euclidean_loss", "euclidean_loss", "angular_loss", "mse_loss", "euclidean_loss", "mse_loss", "euclidean_loss"], "methods", ["None"], ["", "def", "calculate_losses_and_metrics", "(", "self", ",", "input_dict", ",", "intermediate_dict", ",", "output_dict", ")", ":", "\n", "# Initial estimates of gaze direction and PoG", "\n", "        ", "for", "side", "in", "(", "'left'", ",", "'right'", ")", ":", "\n", "            ", "input_key", "=", "side", "+", "'_g_tobii'", "\n", "interm_key", "=", "(", "side", "+", "'_g_initial_unaugmented'", "\n", "if", "self", ".", "training", "and", "config", ".", "refine_net_do_offset_augmentation", "\n", "else", "side", "+", "'_g_initial'", ")", "\n", "output_key", "=", "side", "+", "'_g_initial'", "\n", "if", "interm_key", "in", "intermediate_dict", "and", "input_key", "in", "input_dict", ":", "\n", "                ", "output_dict", "[", "'loss_ang_'", "+", "output_key", "]", "=", "angular_loss", "(", "\n", "intermediate_dict", "[", "interm_key", "]", ",", "input_key", ",", "input_dict", ",", "\n", ")", "\n", "\n", "", "input_key", "=", "side", "+", "'_PoG_cm_tobii'", "\n", "interm_key", "=", "(", "side", "+", "'_PoG_cm_initial_unaugmented'", "\n", "if", "self", ".", "training", "and", "config", ".", "refine_net_do_offset_augmentation", "\n", "else", "side", "+", "'_PoG_cm_initial'", ")", "\n", "output_key", "=", "side", "+", "'_PoG_cm_initial'", "\n", "if", "interm_key", "in", "intermediate_dict", "and", "input_key", "in", "input_dict", ":", "\n", "                ", "output_dict", "[", "'loss_mse_'", "+", "output_key", "]", "=", "mse_loss", "(", "\n", "intermediate_dict", "[", "interm_key", "]", ",", "input_key", ",", "input_dict", ",", "\n", ")", "\n", "output_dict", "[", "'metric_euc_'", "+", "output_key", "]", "=", "euclidean_loss", "(", "\n", "intermediate_dict", "[", "interm_key", "]", ",", "input_key", ",", "input_dict", ",", "\n", ")", "\n", "\n", "", "input_key", "=", "side", "+", "'_PoG_tobii'", "\n", "interm_key", "=", "side", "+", "'_PoG_px_initial'", "\n", "if", "interm_key", "in", "intermediate_dict", "and", "input_key", "in", "input_dict", ":", "\n", "                ", "output_dict", "[", "'metric_euc_'", "+", "interm_key", "]", "=", "euclidean_loss", "(", "\n", "intermediate_dict", "[", "interm_key", "]", ",", "input_key", ",", "input_dict", ",", "\n", ")", "\n", "\n", "# Pupil size in mm", "\n", "", "input_key", "=", "side", "+", "'_p'", "\n", "interm_key", "=", "side", "+", "'_pupil_size'", "\n", "if", "interm_key", "in", "intermediate_dict", "and", "input_key", "in", "input_dict", ":", "\n", "                ", "output_dict", "[", "'loss_l1_'", "+", "interm_key", "]", "=", "l1_loss", "(", "\n", "intermediate_dict", "[", "interm_key", "]", ",", "input_key", ",", "input_dict", ",", "\n", ")", "\n", "# print(self.peek_dict(input_dict), '---jfjeiejj eve.py')", "\n", "# print(self.peek_dict(intermediate_dict), '---bjejijrfir eve.py')", "\n", "# print(self.peek_dict(output_dict), '---egewfrfr eve.py')", "\n", "\n", "# Left-right consistency", "\n", "", "", "if", "self", ".", "eye_side", "==", "'binocular'", ":", "\n", "            ", "if", "'left_PoG_tobii'", "in", "input_dict", "and", "'right_PoG_tobii'", "in", "input_dict", ":", "\n", "                ", "intermediate_dict", "[", "'PoG_cm_initial_validity'", "]", "=", "(", "\n", "input_dict", "[", "'left_PoG_tobii_validity'", "]", "&", "\n", "input_dict", "[", "'right_PoG_tobii_validity'", "]", "\n", ")", "\n", "# set the right_ so that it complies to base_loss_with_validity.py function where validity is retreived", "\n", "# from validity of the second argument (left, right), 'right_..._validity' in this case)", "\n", "intermediate_dict", "[", "'right_PoG_cm_initial_validity'", "]", "=", "intermediate_dict", "[", "'PoG_cm_initial_validity'", "]", "\n", "\n", "# print(('right_PoG_cm_initial' in intermediate_dict.keys()), list(intermediate_dict.keys()), '---njgjeifjij eve.py')", "\n", "# print('line 688 mark', '---jfeijjfd eve.py')", "\n", "output_dict", "[", "'loss_mse_lr_consistency'", "]", "=", "mse_loss", "(", "\n", "intermediate_dict", "[", "'left_PoG_cm_initial'", "]", ",", "\n", "'right_PoG_cm_initial'", ",", "intermediate_dict", ",", "\n", ")", "\n", "output_dict", "[", "'metric_euc_lr_consistency'", "]", "=", "euclidean_loss", "(", "\n", "intermediate_dict", "[", "'left_PoG_cm_initial'", "]", ",", "\n", "'right_PoG_cm_initial'", ",", "intermediate_dict", ",", "\n", ")", "\n", "", "", "elif", "self", ".", "eye_side", "==", "'left'", ":", "\n", "            ", "if", "'left_PoG_tobii'", "in", "input_dict", ":", "\n", "                ", "intermediate_dict", "[", "'left_PoG_cm_initial_validity'", "]", "=", "input_dict", "[", "'left_PoG_tobii_validity'", "]", "\n", "output_dict", "[", "'loss_mse_lr_consistency'", "]", "=", "mse_loss", "(", "\n", "intermediate_dict", "[", "'left_PoG_cm_initial'", "]", ",", "\n", "'left_PoG_cm_initial'", ",", "intermediate_dict", ",", "\n", ")", "\n", "output_dict", "[", "'metric_euc_lr_consistency'", "]", "=", "euclidean_loss", "(", "\n", "intermediate_dict", "[", "'left_PoG_cm_initial'", "]", ",", "\n", "'left_PoG_cm_initial'", ",", "intermediate_dict", ",", "\n", ")", "\n", "", "", "elif", "self", ".", "eye_side", "==", "'right'", ":", "\n", "            ", "if", "'right_PoG_tobii'", "in", "input_dict", ":", "\n", "                ", "intermediate_dict", "[", "'right_PoG_cm_initial_validity'", "]", "=", "input_dict", "[", "'right_PoG_tobii_validity'", "]", "\n", "\n", "output_dict", "[", "'loss_mse_lr_consistency'", "]", "=", "mse_loss", "(", "\n", "intermediate_dict", "[", "'right_PoG_cm_initial'", "]", ",", "\n", "'right_PoG_cm_initial'", ",", "intermediate_dict", ",", "\n", ")", "\n", "output_dict", "[", "'metric_euc_lr_consistency'", "]", "=", "euclidean_loss", "(", "\n", "intermediate_dict", "[", "'right_PoG_cm_initial'", "]", ",", "\n", "'right_PoG_cm_initial'", ",", "intermediate_dict", ",", "\n", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "\n", "\n", "\n", "# Initial heatmap CE loss", "\n", "", "input_key", "=", "output_key", "=", "'heatmap_initial'", "\n", "interm_key", "=", "(", "'heatmap_initial_unaugmented'", "\n", "if", "self", ".", "training", "and", "config", ".", "refine_net_do_offset_augmentation", "\n", "else", "'heatmap_initial'", ")", "\n", "if", "interm_key", "in", "intermediate_dict", "and", "input_key", "in", "input_dict", ":", "\n", "            ", "output_dict", "[", "'loss_ce_'", "+", "output_key", "]", "=", "cross_entropy_loss", "(", "\n", "intermediate_dict", "[", "interm_key", "]", ",", "input_key", ",", "input_dict", ",", "\n", ")", "\n", "\n", "# Refined heatmap MSE loss", "\n", "", "input_key", "=", "interm_key", "=", "'heatmap_final'", "\n", "if", "interm_key", "in", "intermediate_dict", "and", "input_key", "in", "input_dict", ":", "\n", "            ", "output_dict", "[", "'loss_ce_'", "+", "interm_key", "]", "=", "cross_entropy_loss", "(", "\n", "intermediate_dict", "[", "interm_key", "]", ",", "input_key", ",", "input_dict", ",", "\n", ")", "\n", "output_dict", "[", "'loss_mse_'", "+", "interm_key", "]", "=", "mse_loss", "(", "\n", "intermediate_dict", "[", "interm_key", "]", ",", "input_key", ",", "input_dict", ",", "\n", ")", "\n", "\n", "# Metrics after applying kappa augmentation", "\n", "", "if", "config", ".", "refine_net_do_offset_augmentation", ":", "\n", "            ", "input_key", "=", "'PoG_px_tobii'", "\n", "interm_key", "=", "'PoG_px_initial_unaugmented'", "\n", "if", "interm_key", "in", "intermediate_dict", "and", "input_key", "in", "input_dict", ":", "\n", "                ", "output_dict", "[", "'metric_euc_'", "+", "interm_key", "]", "=", "euclidean_loss", "(", "\n", "intermediate_dict", "[", "interm_key", "]", ",", "input_key", ",", "input_dict", ",", "\n", ")", "\n", "\n", "", "input_key", "=", "'PoG_cm_tobii'", "\n", "interm_key", "=", "'PoG_cm_initial_unaugmented'", "\n", "if", "interm_key", "in", "intermediate_dict", "and", "input_key", "in", "input_dict", ":", "\n", "                ", "output_dict", "[", "'metric_euc_'", "+", "interm_key", "]", "=", "euclidean_loss", "(", "\n", "intermediate_dict", "[", "interm_key", "]", ",", "input_key", ",", "input_dict", ",", "\n", ")", "\n", "\n", "", "input_key", "=", "'g'", "\n", "interm_key", "=", "'g_initial_unaugmented'", "\n", "if", "interm_key", "in", "intermediate_dict", "and", "input_key", "in", "input_dict", ":", "\n", "                ", "output_dict", "[", "'metric_ang_'", "+", "interm_key", "]", "=", "angular_loss", "(", "\n", "intermediate_dict", "[", "interm_key", "]", ",", "input_key", ",", "input_dict", ",", "\n", ")", "\n", "\n", "# Initial gaze", "\n", "", "", "input_key", "=", "'PoG_px_tobii'", "\n", "interm_key", "=", "'PoG_px_initial'", "\n", "if", "interm_key", "in", "intermediate_dict", "and", "input_key", "in", "input_dict", ":", "\n", "            ", "output_dict", "[", "'loss_mse_'", "+", "interm_key", "]", "=", "mse_loss", "(", "\n", "intermediate_dict", "[", "interm_key", "]", ",", "input_key", ",", "input_dict", ",", "\n", ")", "\n", "output_dict", "[", "'metric_euc_'", "+", "interm_key", "]", "=", "euclidean_loss", "(", "\n", "intermediate_dict", "[", "interm_key", "]", ",", "input_key", ",", "input_dict", ",", "\n", ")", "\n", "\n", "", "input_key", "=", "'PoG_cm_tobii'", "\n", "interm_key", "=", "'PoG_cm_initial'", "\n", "if", "interm_key", "in", "intermediate_dict", "and", "input_key", "in", "input_dict", ":", "\n", "            ", "output_dict", "[", "'loss_mse_'", "+", "interm_key", "]", "=", "mse_loss", "(", "\n", "intermediate_dict", "[", "interm_key", "]", ",", "input_key", ",", "input_dict", ",", "\n", ")", "\n", "output_dict", "[", "'metric_euc_'", "+", "interm_key", "]", "=", "euclidean_loss", "(", "\n", "intermediate_dict", "[", "interm_key", "]", ",", "input_key", ",", "input_dict", ",", "\n", ")", "\n", "\n", "", "input_key", "=", "'g'", "\n", "interm_key", "=", "'g_initial'", "\n", "if", "interm_key", "in", "intermediate_dict", "and", "input_key", "in", "input_dict", ":", "\n", "            ", "output_dict", "[", "'metric_ang_'", "+", "interm_key", "]", "=", "angular_loss", "(", "\n", "intermediate_dict", "[", "interm_key", "]", ",", "input_key", ",", "input_dict", ",", "\n", ")", "\n", "\n", "# Refine gaze", "\n", "", "input_key", "=", "'PoG_px_tobii'", "\n", "interm_key", "=", "'PoG_px_final'", "\n", "if", "interm_key", "in", "intermediate_dict", "and", "input_key", "in", "input_dict", ":", "\n", "            ", "output_dict", "[", "'loss_mse_'", "+", "interm_key", "]", "=", "mse_loss", "(", "\n", "intermediate_dict", "[", "interm_key", "]", ",", "input_key", ",", "input_dict", ",", "\n", ")", "\n", "output_dict", "[", "'metric_euc_'", "+", "interm_key", "]", "=", "euclidean_loss", "(", "\n", "intermediate_dict", "[", "interm_key", "]", ",", "input_key", ",", "input_dict", ",", "\n", ")", "\n", "\n", "", "input_key", "=", "'PoG_cm_tobii'", "\n", "interm_key", "=", "'PoG_cm_final'", "\n", "if", "interm_key", "in", "intermediate_dict", "and", "input_key", "in", "input_dict", ":", "\n", "            ", "output_dict", "[", "'loss_mse_'", "+", "interm_key", "]", "=", "mse_loss", "(", "\n", "intermediate_dict", "[", "interm_key", "]", ",", "input_key", ",", "input_dict", ",", "\n", ")", "\n", "output_dict", "[", "'metric_euc_'", "+", "interm_key", "]", "=", "euclidean_loss", "(", "\n", "intermediate_dict", "[", "interm_key", "]", ",", "input_key", ",", "input_dict", ",", "\n", ")", "\n", "\n", "", "input_key", "=", "'g'", "\n", "interm_key", "=", "'g_final'", "\n", "if", "interm_key", "in", "intermediate_dict", "and", "input_key", "in", "input_dict", ":", "\n", "            ", "output_dict", "[", "'metric_ang_'", "+", "interm_key", "]", "=", "angular_loss", "(", "\n", "intermediate_dict", "[", "interm_key", "]", ",", "input_key", ",", "input_dict", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.eve.EVE.calculate_additional_labels": [[874, 982], ["next", "iter", "isinstance", "numpy.radians", "numpy.random.normal", "numpy.random.normal", "torch.mean().detach", "torch.mean().detach", "torch.mean().detach", "torch.mean().detach", "torch.mean().detach", "torch.mean().detach", "torch.mean().detach", "torch.mean().detach", "torch.mean().detach", "torch.mean().detach", "torch.mean().detach", "torch.mean().detach", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "full_input_dict.values", "torch.mul().detach", "torch.mul().detach", "torch.mul().detach", "torch.mul().detach", "numpy.repeat", "numpy.repeat", "torch.stack().detach", "torch.stack().detach", "torch.stack().detach", "torch.stack().detach", "torch.stack().detach", "torch.stack().detach", "torch.stack().detach", "torch.stack().detach", "torch.stack().detach", "torch.stack().detach", "torch.stack().detach", "torch.stack().detach", "numpy.expand_dims", "numpy.expand_dims", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "common.calculate_combined_gaze_direction", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "full_input_dict[].bool", "full_input_dict[].bool", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "range", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "kappas_side.astype", "kappas_side.astype", "common.batch_make_heatmaps", "[].float().view", "range", "common.batch_make_heatmaps", "[].float().view", "range", "common.batch_make_heatmaps", "[].float().view", "range", "[].float", "[].float", "[].float"], "methods", ["home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.common.calculate_combined_gaze_direction", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.common.batch_make_heatmaps", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.common.batch_make_heatmaps", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.common.batch_make_heatmaps"], ["", "", "def", "calculate_additional_labels", "(", "self", ",", "full_input_dict", ",", "current_epoch", "=", "None", ")", ":", "\n", "        ", "sample_entry", "=", "next", "(", "iter", "(", "full_input_dict", ".", "values", "(", ")", ")", ")", "\n", "batch_size", "=", "sample_entry", ".", "shape", "[", "0", "]", "\n", "sequence_len", "=", "sample_entry", ".", "shape", "[", "1", "]", "\n", "\n", "# PoG in mm", "\n", "for", "side", "in", "(", "'left'", ",", "'right'", ")", ":", "\n", "            ", "if", "(", "side", "+", "'_PoG_tobii'", ")", "in", "full_input_dict", ":", "\n", "                ", "full_input_dict", "[", "side", "+", "'_PoG_cm_tobii'", "]", "=", "torch", ".", "mul", "(", "\n", "full_input_dict", "[", "side", "+", "'_PoG_tobii'", "]", ",", "\n", "0.1", "*", "full_input_dict", "[", "'millimeters_per_pixel'", "]", ",", "\n", ")", ".", "detach", "(", ")", "\n", "full_input_dict", "[", "side", "+", "'_PoG_cm_tobii_validity'", "]", "=", "full_input_dict", "[", "side", "+", "'_PoG_tobii_validity'", "]", "\n", "\n", "# Fake kappa to be used during training", "\n", "# Mirror the yaw angle to handle different eyes", "\n", "", "", "if", "self", ".", "training", "and", "config", ".", "refine_net_do_offset_augmentation", ":", "\n", "\n", "# Curriculum learning on kappa", "\n", "# print(device, self.forward_kwargs['current_epoch'], current_epoch, '---nbwvffrf eve.py')", "\n", "            ", "assert", "(", "current_epoch", "is", "not", "None", ")", "\n", "assert", "(", "isinstance", "(", "current_epoch", ",", "float", ")", ")", "\n", "kappa_std", "=", "config", ".", "refine_net_offset_augmentation_sigma", "\n", "kappa_std", "=", "np", ".", "radians", "(", "kappa_std", ")", "\n", "\n", "# Create systematic noise", "\n", "# This is consistent throughout a given sequence", "\n", "left_kappas", "=", "np", ".", "random", ".", "normal", "(", "size", "=", "(", "batch_size", ",", "2", ")", ",", "loc", "=", "0.0", ",", "scale", "=", "kappa_std", ")", "\n", "right_kappas", "=", "np", ".", "random", ".", "normal", "(", "size", "=", "(", "batch_size", ",", "2", ")", ",", "loc", "=", "0.0", ",", "scale", "=", "kappa_std", ")", "\n", "kappas", "=", "{", "\n", "'left'", ":", "np", ".", "repeat", "(", "np", ".", "expand_dims", "(", "left_kappas", ",", "axis", "=", "1", ")", ",", "sequence_len", ",", "axis", "=", "1", ")", ",", "\n", "'right'", ":", "np", ".", "repeat", "(", "np", ".", "expand_dims", "(", "right_kappas", ",", "axis", "=", "1", ")", ",", "sequence_len", ",", "axis", "=", "1", ")", ",", "\n", "}", "\n", "\n", "for", "side", "in", "(", "'left'", ",", "'right'", ")", ":", "\n", "# Store kappa", "\n", "                ", "kappas_side", "=", "kappas", "[", "side", "]", "\n", "if", "not", "config", ".", "multi_gpu", ":", "\n", "                    ", "kappa_tensor", "=", "torch", ".", "tensor", "(", "kappas_side", ".", "astype", "(", "np", ".", "float32", ")", ")", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "                    ", "kappa_tensor", "=", "torch", ".", "tensor", "(", "kappas_side", ".", "astype", "(", "np", ".", "float32", ")", ")", ".", "cuda", "(", ")", "\n", "", "full_input_dict", "[", "side", "+", "'_kappa_fake'", "]", "=", "kappa_tensor", "\n", "\n", "# 3D origin for L/R combined gaze", "\n", "", "", "if", "'left_o'", "in", "full_input_dict", ":", "\n", "            ", "full_input_dict", "[", "'o'", "]", "=", "torch", ".", "mean", "(", "torch", ".", "stack", "(", "[", "\n", "full_input_dict", "[", "'left_o'", "]", ",", "full_input_dict", "[", "'right_o'", "]", ",", "\n", "]", ",", "axis", "=", "-", "1", ")", ",", "axis", "=", "-", "1", ")", ".", "detach", "(", ")", "\n", "full_input_dict", "[", "'o_validity'", "]", "=", "full_input_dict", "[", "'left_o_validity'", "]", "\n", "\n", "#print(list(full_input_dict.keys()), '---jefjiji, eve.py')", "\n", "", "if", "'left_PoG_tobii'", "in", "full_input_dict", ":", "\n", "# Average of left/right PoG values", "\n", "            ", "full_input_dict", "[", "'PoG_px_tobii'", "]", "=", "torch", ".", "mean", "(", "torch", ".", "stack", "(", "[", "\n", "full_input_dict", "[", "'left_PoG_tobii'", "]", ",", "\n", "full_input_dict", "[", "'right_PoG_tobii'", "]", ",", "\n", "]", ",", "axis", "=", "-", "1", ")", ",", "axis", "=", "-", "1", ")", ".", "detach", "(", ")", "\n", "full_input_dict", "[", "'PoG_cm_tobii'", "]", "=", "torch", ".", "mean", "(", "torch", ".", "stack", "(", "[", "\n", "full_input_dict", "[", "'left_PoG_cm_tobii'", "]", ",", "\n", "full_input_dict", "[", "'right_PoG_cm_tobii'", "]", ",", "\n", "]", ",", "axis", "=", "-", "1", ")", ",", "axis", "=", "-", "1", ")", ".", "detach", "(", ")", "\n", "full_input_dict", "[", "'PoG_px_tobii_validity'", "]", "=", "(", "\n", "full_input_dict", "[", "'left_PoG_tobii_validity'", "]", ".", "bool", "(", ")", "&", "\n", "full_input_dict", "[", "'right_PoG_tobii_validity'", "]", ".", "bool", "(", ")", "\n", ")", ".", "detach", "(", ")", "\n", "full_input_dict", "[", "'PoG_cm_tobii_validity'", "]", "=", "full_input_dict", "[", "'PoG_px_tobii_validity'", "]", "\n", "\n", "if", "config", ".", "refine_net_enabled", ":", "\n", "# Heatmaps (both initial and final)", "\n", "# NOTE: input is B x T x F", "\n", "                ", "full_input_dict", "[", "'heatmap_initial'", "]", "=", "torch", ".", "stack", "(", "[", "\n", "batch_make_heatmaps", "(", "full_input_dict", "[", "'PoG_px_tobii'", "]", "[", "b", ",", ":", "]", ",", "\n", "config", ".", "gaze_heatmap_sigma_initial", ")", "\n", "*", "full_input_dict", "[", "'PoG_px_tobii_validity'", "]", "[", "b", ",", ":", "]", ".", "float", "(", ")", ".", "view", "(", "-", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "for", "b", "in", "range", "(", "batch_size", ")", "\n", "]", ",", "axis", "=", "0", ")", ".", "detach", "(", ")", "\n", "full_input_dict", "[", "'heatmap_history'", "]", "=", "torch", ".", "stack", "(", "[", "\n", "batch_make_heatmaps", "(", "full_input_dict", "[", "'PoG_px_tobii'", "]", "[", "b", ",", ":", "]", ",", "\n", "config", ".", "gaze_heatmap_sigma_history", ")", "\n", "*", "full_input_dict", "[", "'PoG_px_tobii_validity'", "]", "[", "b", ",", ":", "]", ".", "float", "(", ")", ".", "view", "(", "-", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "for", "b", "in", "range", "(", "batch_size", ")", "\n", "]", ",", "axis", "=", "0", ")", ".", "detach", "(", ")", "\n", "full_input_dict", "[", "'heatmap_final'", "]", "=", "torch", ".", "stack", "(", "[", "\n", "batch_make_heatmaps", "(", "full_input_dict", "[", "'PoG_px_tobii'", "]", "[", "b", ",", ":", "]", ",", "\n", "config", ".", "gaze_heatmap_sigma_final", ")", "\n", "*", "full_input_dict", "[", "'PoG_px_tobii_validity'", "]", "[", "b", ",", ":", "]", ".", "float", "(", ")", ".", "view", "(", "-", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "for", "b", "in", "range", "(", "batch_size", ")", "\n", "]", ",", "axis", "=", "0", ")", ".", "detach", "(", ")", "\n", "full_input_dict", "[", "'heatmap_initial_validity'", "]", "=", "full_input_dict", "[", "'PoG_px_tobii_validity'", "]", "\n", "full_input_dict", "[", "'heatmap_history_validity'", "]", "=", "full_input_dict", "[", "'PoG_px_tobii_validity'", "]", "\n", "full_input_dict", "[", "'heatmap_final_validity'", "]", "=", "full_input_dict", "[", "'PoG_px_tobii_validity'", "]", "\n", "\n", "# 3D gaze direction for L/R combined gaze", "\n", "", "", "if", "'PoG_cm_tobii'", "in", "full_input_dict", ":", "\n", "            ", "full_input_dict", "[", "'g'", "]", "=", "torch", ".", "stack", "(", "[", "\n", "calculate_combined_gaze_direction", "(", "\n", "full_input_dict", "[", "'o'", "]", "[", "b", ",", ":", "]", ",", "\n", "10.0", "*", "full_input_dict", "[", "'PoG_cm_tobii'", "]", "[", "b", ",", ":", "]", ",", "\n", "full_input_dict", "[", "'left_R'", "]", "[", "b", ",", ":", "]", ",", "\n", "full_input_dict", "[", "'camera_transformation'", "]", "[", "b", ",", ":", "]", ",", "\n", ")", "\n", "for", "b", "in", "range", "(", "batch_size", ")", "\n", "]", ",", "axis", "=", "0", ")", "\n", "full_input_dict", "[", "'g_validity'", "]", "=", "full_input_dict", "[", "'PoG_cm_tobii_validity'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.eve.EVE.from_g_to_PoG_history": [[983, 1081], ["common.calculate_combined_gaze_direction", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "common.batch_make_heatmaps", "common.to_screen_coordinates", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "heatmap_history.append", "common.to_screen_coordinates", "common.batch_make_heatmaps", "common.batch_make_gaze_history_maps", "common.to_screen_coordinates"], "methods", ["home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.common.calculate_combined_gaze_direction", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.common.batch_make_heatmaps", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.common.to_screen_coordinates", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.common.to_screen_coordinates", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.common.batch_make_heatmaps", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.common.batch_make_gaze_history_maps", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.common.to_screen_coordinates"], ["", "", "def", "from_g_to_PoG_history", "(", "self", ",", "full_input_dict", ",", "sub_input_dict", ",", "sub_output_dict", ",", "\n", "input_suffix", ",", "output_suffix", ",", "\n", "heatmap_history", ",", "gaze_heatmap_sigma", ",", "history_heatmap_sigma", ")", ":", "\n", "\n", "# Handle case for GazeCapture and MPIIGaze", "\n", "        ", "if", "'inv_camera_transformation'", "not", "in", "full_input_dict", ":", "\n", "            ", "return", "\n", "\n", "# Step 1a) Calculate PoG from given gaze", "\n", "# print('self.eye_side', self.eye_side, '---ejjijfje eve.py --from_g_to_PoG_history')", "\n", "", "if", "self", ".", "eye_side", "==", "'binocular'", ":", "\n", "            ", "for", "side", "in", "(", "'left'", ",", "'right'", ")", ":", "\n", "                ", "origin", "=", "(", "sub_output_dict", "[", "side", "+", "'_o'", "]", "\n", "if", "side", "+", "'_o'", "in", "sub_output_dict", "else", "sub_input_dict", "[", "side", "+", "'_o'", "]", ")", "\n", "direction", "=", "sub_output_dict", "[", "side", "+", "'_g_'", "+", "input_suffix", "]", "\n", "rotation", "=", "(", "sub_output_dict", "[", "side", "+", "'_R'", "]", "\n", "if", "side", "+", "'_R'", "in", "sub_output_dict", "else", "sub_input_dict", "[", "side", "+", "'_R'", "]", ")", "\n", "cc", "=", "[", "x", ".", "device", ".", "index", "for", "x", "in", "(", "origin", ",", "direction", ",", "rotation", ",", "sub_input_dict", "[", "side", "+", "'_R'", "]", ")", "]", "\n", "# print('divice', torch.cuda.current_device(), cc, '---ejfjijiij eve.py')", "\n", "# if not all([xx == cc[0] for xx in cc]):", "\n", "#     print('divice', torch.cuda.current_device(), cc, '---vjjfjjje eve.py')", "\n", "PoG_mm", ",", "PoG_px", "=", "to_screen_coordinates", "(", "origin", ",", "direction", ",", "rotation", ",", "sub_input_dict", ")", "\n", "sub_output_dict", "[", "side", "+", "'_PoG_cm_'", "+", "output_suffix", "]", "=", "0.1", "*", "PoG_mm", "\n", "sub_output_dict", "[", "side", "+", "'_PoG_px_'", "+", "output_suffix", "]", "=", "PoG_px", "\n", "# print(self.peek_dict(sub_output_dict), '---bhjejfijie eve.py')", "\n", "# print(list(sub_output_dict.keys()), '---ngwefrdsf eve.py')", "\n", "\n", "# Step 1b) Calculate average PoG", "\n", "", "sub_output_dict", "[", "'PoG_px_'", "+", "output_suffix", "]", "=", "torch", ".", "mean", "(", "torch", ".", "stack", "(", "[", "\n", "sub_output_dict", "[", "'left_PoG_px_'", "+", "output_suffix", "]", ",", "\n", "sub_output_dict", "[", "'right_PoG_px_'", "+", "output_suffix", "]", ",", "\n", "]", ",", "axis", "=", "-", "1", ")", ",", "axis", "=", "-", "1", ")", "\n", "sub_output_dict", "[", "'PoG_cm_'", "+", "output_suffix", "]", "=", "torch", ".", "mean", "(", "torch", ".", "stack", "(", "[", "\n", "sub_output_dict", "[", "'left_PoG_cm_'", "+", "output_suffix", "]", ",", "\n", "sub_output_dict", "[", "'right_PoG_cm_'", "+", "output_suffix", "]", ",", "\n", "]", ",", "axis", "=", "-", "1", ")", ",", "axis", "=", "-", "1", ")", "\n", "\n", "\n", "", "elif", "self", ".", "eye_side", "==", "'left'", ":", "\n", "            ", "for", "side", "in", "(", "'left'", ",", ")", ":", "\n", "                ", "origin", "=", "(", "sub_output_dict", "[", "side", "+", "'_o'", "]", "\n", "if", "side", "+", "'_o'", "in", "sub_output_dict", "else", "sub_input_dict", "[", "side", "+", "'_o'", "]", ")", "\n", "direction", "=", "sub_output_dict", "[", "side", "+", "'_g_'", "+", "input_suffix", "]", "\n", "rotation", "=", "(", "sub_output_dict", "[", "side", "+", "'_R'", "]", "\n", "if", "side", "+", "'_R'", "in", "sub_output_dict", "else", "sub_input_dict", "[", "side", "+", "'_R'", "]", ")", "\n", "PoG_mm", ",", "PoG_px", "=", "to_screen_coordinates", "(", "origin", ",", "direction", ",", "rotation", ",", "sub_input_dict", ")", "\n", "sub_output_dict", "[", "side", "+", "'_PoG_cm_'", "+", "output_suffix", "]", "=", "0.1", "*", "PoG_mm", "\n", "sub_output_dict", "[", "side", "+", "'_PoG_px_'", "+", "output_suffix", "]", "=", "PoG_px", "\n", "\n", "# Step 1b) Calculate average PoG", "\n", "", "sub_output_dict", "[", "'PoG_px_'", "+", "output_suffix", "]", "=", "sub_output_dict", "[", "'left_PoG_px_'", "+", "output_suffix", "]", "\n", "sub_output_dict", "[", "'PoG_cm_'", "+", "output_suffix", "]", "=", "sub_output_dict", "[", "'left_PoG_cm_'", "+", "output_suffix", "]", "\n", "", "elif", "self", ".", "eye_side", "==", "'right'", ":", "\n", "            ", "for", "side", "in", "(", "'right'", ",", ")", ":", "\n", "                ", "origin", "=", "(", "sub_output_dict", "[", "side", "+", "'_o'", "]", "\n", "if", "side", "+", "'_o'", "in", "sub_output_dict", "else", "sub_input_dict", "[", "side", "+", "'_o'", "]", ")", "\n", "direction", "=", "sub_output_dict", "[", "side", "+", "'_g_'", "+", "input_suffix", "]", "\n", "rotation", "=", "(", "sub_output_dict", "[", "side", "+", "'_R'", "]", "\n", "if", "side", "+", "'_R'", "in", "sub_output_dict", "else", "sub_input_dict", "[", "side", "+", "'_R'", "]", ")", "\n", "PoG_mm", ",", "PoG_px", "=", "to_screen_coordinates", "(", "origin", ",", "direction", ",", "rotation", ",", "sub_input_dict", ")", "\n", "sub_output_dict", "[", "side", "+", "'_PoG_cm_'", "+", "output_suffix", "]", "=", "0.1", "*", "PoG_mm", "\n", "sub_output_dict", "[", "side", "+", "'_PoG_px_'", "+", "output_suffix", "]", "=", "PoG_px", "\n", "\n", "# Step 1b) Calculate average PoG", "\n", "", "sub_output_dict", "[", "'PoG_px_'", "+", "output_suffix", "]", "=", "sub_output_dict", "[", "'right_PoG_px_'", "+", "output_suffix", "]", "\n", "sub_output_dict", "[", "'PoG_cm_'", "+", "output_suffix", "]", "=", "sub_output_dict", "[", "'right_PoG_cm_'", "+", "output_suffix", "]", "\n", "", "else", ":", "\n", "            ", "raise", "\n", "\n", "", "sub_output_dict", "[", "'PoG_mm_'", "+", "output_suffix", "]", "=", "10.0", "*", "sub_output_dict", "[", "'PoG_cm_'", "+", "output_suffix", "]", "\n", "\n", "# Step 1c) Calculate the combined gaze (L/R)", "\n", "sub_output_dict", "[", "'g_'", "+", "output_suffix", "]", "=", "calculate_combined_gaze_direction", "(", "\n", "sub_input_dict", "[", "'o'", "]", ",", "\n", "sub_output_dict", "[", "'PoG_mm_'", "+", "output_suffix", "]", ",", "\n", "sub_input_dict", "[", "'left_R'", "]", ",", "# by definition, 'left_R' == 'right_R'", "\n", "sub_input_dict", "[", "'camera_transformation'", "]", ",", "\n", ")", "\n", "\n", "if", "config", ".", "refine_net_enabled", ":", "\n", "# Step 2) Create heatmaps from PoG estimates", "\n", "            ", "sub_output_dict", "[", "'heatmap_'", "+", "output_suffix", "]", "=", "batch_make_heatmaps", "(", "sub_output_dict", "[", "'PoG_px_'", "+", "output_suffix", "]", ",", "gaze_heatmap_sigma", ")", "\n", "\n", "if", "heatmap_history", "is", "not", "None", ":", "\n", "# Step 3) Create gaze history maps", "\n", "                ", "heatmap_history", ".", "append", "(", "\n", "batch_make_heatmaps", "(", "sub_output_dict", "[", "'PoG_px_'", "+", "output_suffix", "]", ",", "\n", "history_heatmap_sigma", ")", "\n", ")", "\n", "if", "'PoG_px_tobii'", "in", "full_input_dict", ":", "\n", "                    ", "gaze_history_maps", "=", "batch_make_gaze_history_maps", "(", "\n", "full_input_dict", "[", "'timestamps'", "]", ",", "heatmap_history", ",", "\n", "full_input_dict", "[", "'PoG_px_tobii_validity'", "]", ",", "\n", ")", "\n", "sub_output_dict", "[", "'history_'", "+", "output_suffix", "]", "=", "gaze_history_maps", "\n", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.eve.EVE.peek_dict": [[1082, 1094], ["dd.items", "reports.append", "type", "len", "type", "eve.EVE.peek_dict", "v.size"], "methods", ["home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.eve.EVE.peek_dict"], ["", "", "", "", "def", "peek_dict", "(", "self", ",", "dd", ",", "suffix", "=", "''", ")", ":", "\n", "        ", "reports", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "dd", ".", "items", "(", ")", ":", "\n", "            ", "if", "type", "(", "v", ")", "==", "list", ":", "\n", "                ", "rr", "=", "(", "(", "k", ",", "len", "(", "v", ")", ")", ")", "\n", "", "elif", "type", "(", "v", ")", "==", "dict", ":", "\n", "                ", "rr", "=", "(", "(", "k", ",", "self", ".", "peek_dict", "(", "v", ")", ")", ")", "\n", "", "else", ":", "\n", "                ", "rr", "=", "(", "(", "k", ",", "v", ".", "size", "(", ")", ")", ")", "\n", "", "reports", ".", "append", "(", "rr", ")", "\n", "# print(reports, '---fuefjj', suffix)", "\n", "", "return", "reports", "\n", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.models.eve.EVE.generate_eye_list": [[1096, 1104], ["None"], "methods", ["None"], ["", "def", "generate_eye_list", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "eye_side", "in", "[", "'left'", ",", "'right'", "]", ":", "\n", "            ", "eye_list", "=", "[", "self", ".", "eye_side", ",", "]", "\n", "", "elif", "self", ".", "eye_side", "==", "'binocular'", ":", "\n", "            ", "eye_list", "=", "[", "'left'", ",", "'right'", "]", "\n", "", "else", ":", "\n", "            ", "raise", "\n", "", "return", "eye_list", "", "", "", ""]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.gsheet_logger.GoogleSheetLogger.__init__": [[47, 61], ["gsheet_logger.GoogleSheetLogger.fill_in_basic_info", "time.strftime", "gsheet_logger.GoogleSheetLogger.update_or_append_row", "traceback.print_exc"], "methods", ["home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.gsheet_logger.GoogleSheetLogger.fill_in_basic_info", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.gsheet_logger.GoogleSheetLogger.update_or_append_row"], ["def", "__init__", "(", "self", ",", "model", ")", ":", "\n", "        ", "self", ".", "__model", "=", "model", "\n", "to_write", "=", "self", ".", "fill_in_basic_info", "(", ")", "\n", "if", "config", ".", "resume_from", "==", "''", ":", "\n", "            ", "to_write", "[", "'Start Time'", "]", "=", "time", ".", "strftime", "(", "'%Y/%m/%d %H:%M:%S'", ")", "\n", "\n", "# Write experiment information to create row for future logging", "\n", "", "try", ":", "\n", "            ", "self", ".", "ready", "=", "True", "\n", "self", ".", "update_or_append_row", "(", "to_write", ")", "\n", "", "except", "Exception", ":", "\n", "            ", "self", ".", "ready", "=", "False", "\n", "traceback", ".", "print_exc", "(", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.gsheet_logger.GoogleSheetLogger.fill_in_basic_info": [[62, 85], ["collections.OrderedDict", "time.strftime", "config.get_all_key_values", "dict", "sorted", "socket.getfqdn", "list", "dict.keys", "dict.items", "k.startswith", "k.startswith"], "methods", ["home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.config_default.DefaultConfig.get_all_key_values"], ["", "", "def", "fill_in_basic_info", "(", "self", ")", ":", "\n", "        ", "to_write", "=", "OrderedDict", "(", ")", "\n", "to_write", "[", "'Identifier'", "]", "=", "self", ".", "__model", ".", "identifier", "\n", "to_write", "[", "'Last Updated'", "]", "=", "time", ".", "strftime", "(", "'%Y/%m/%d %H:%M:%S'", ")", "\n", "\n", "# Write config parameters", "\n", "config_kv", "=", "config", ".", "get_all_key_values", "(", ")", "\n", "config_kv", "=", "dict", "(", "[", "\n", "(", "k", ",", "v", ")", "for", "k", ",", "v", "in", "config_kv", ".", "items", "(", ")", "\n", "if", "not", "k", ".", "startswith", "(", "'datasrc_'", ")", "\n", "and", "not", "k", ".", "startswith", "(", "'gsheet_'", ")", "\n", "]", ")", "\n", "for", "k", "in", "sorted", "(", "list", "(", "config_kv", ".", "keys", "(", ")", ")", ")", ":", "\n", "            ", "to_write", "[", "k", "]", "=", "config_kv", "[", "k", "]", "\n", "\n", "# Get hostname", "\n", "", "to_write", "[", "'hostname'", "]", "=", "socket", ".", "getfqdn", "(", ")", "\n", "\n", "# Get LSF job ID if exists", "\n", "if", "'LSB_JOBID'", "in", "os", ".", "environ", ":", "\n", "            ", "to_write", "[", "'LSF Job ID'", "]", "=", "os", ".", "environ", "[", "'LSB_JOBID'", "]", "\n", "\n", "", "return", "to_write", "\n", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.gsheet_logger.GoogleSheetLogger.update_or_append_row": [[86, 207], ["isinstance", "gsheet_logger.GoogleSheetLogger.fill_in_basic_info", "gsheet_logger.GoogleSheetLogger.items", "gspread.authorize.open_by_key", "values.items", "os.path.isfile", "logger.info", "logger.info", "len", "logger.info", "logger.info", "oauth2client.service_account.ServiceAccountCredentials.from_json_keyfile_name", "gspread.authorize", "gsheet_logger.GoogleSheetLogger.__model.identifier.split", "gspread.authorize.open_by_key.worksheet", "client.open_by_key.add_worksheet.get_all_values", "len", "len", "header.index", "len", "logger.debug", "traceback.print_exc", "logger.debug", "traceback.print_exc", "client.open_by_key.add_worksheet.update_cell", "header.append", "new_row.append", "isinstance", "isinstance", "math.isnan", "isinstance", "gspread.models.Cell", "gspread.models.Cell", "client.open_by_key.add_worksheet.append_row", "client.open_by_key.add_worksheet.update_cells", "gspread.authorize.open_by_key.add_worksheet", "logger.debug", "traceback.print_exc", "numpy.any", "enumerate", "enumerate", "logger.debug", "traceback.print_exc", "logger.debug", "traceback.print_exc", "numpy.isnan", "numpy.isinf", "isinstance", "value.item", "numpy.asscalar", "hasattr", "str", "len"], "methods", ["home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.gsheet_logger.GoogleSheetLogger.fill_in_basic_info"], ["", "def", "update_or_append_row", "(", "self", ",", "values", ")", ":", "\n", "        ", "assert", "isinstance", "(", "values", ",", "dict", ")", "\n", "\n", "if", "not", "self", ".", "ready", ":", "# Silently skip if init failed", "\n", "            ", "return", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "isfile", "(", "config", ".", "gsheet_secrets_json_file", ")", ":", "\n", "            ", "logger", ".", "info", "(", "'Not logging to Google Sheets due to missing authentication information.'", ")", "\n", "logger", ".", "info", "(", "'> Please set the configuration entry: \"gsheet_secrets_json_file\".'", ")", "\n", "return", "\n", "\n", "", "if", "len", "(", "config", ".", "gsheet_workbook_key", ")", "==", "0", ":", "\n", "            ", "logger", ".", "info", "(", "'Not logging to Google Sheets due to missing workbook key.'", ")", "\n", "logger", ".", "info", "(", "'> Please set the configuration entry: \"gsheet_workbook_key\".'", ")", "\n", "return", "\n", "\n", "# Add some missing info automatically", "\n", "", "basic_info", "=", "self", ".", "fill_in_basic_info", "(", ")", "\n", "for", "k", ",", "v", "in", "basic_info", ".", "items", "(", ")", ":", "\n", "            ", "values", "[", "k", "]", "=", "v", "\n", "\n", "# Authenticate", "\n", "", "try", ":", "\n", "            ", "credentials", "=", "ServiceAccountCredentials", ".", "from_json_keyfile_name", "(", "\n", "filename", "=", "config", ".", "gsheet_secrets_json_file", ",", "\n", "scopes", "=", "[", "\n", "'https://www.googleapis.com/auth/spreadsheets'", ",", "\n", "]", ",", "\n", ")", "\n", "client", "=", "gspread", ".", "authorize", "(", "credentials", ")", "\n", "", "except", ":", "# noqa", "\n", "            ", "logger", ".", "debug", "(", "'Could not authenticate with Drive API.'", ")", "\n", "traceback", ".", "print_exc", "(", ")", "\n", "return", "\n", "\n", "# Decide on sheet name to select", "\n", "", "sheet_name", "=", "self", ".", "__model", ".", "identifier", ".", "split", "(", "'/'", ")", "[", "0", "]", "\n", "\n", "# Find a workbook by name.", "\n", "workbook", "=", "client", ".", "open_by_key", "(", "config", ".", "gsheet_workbook_key", ")", "\n", "try", ":", "\n", "            ", "sheet", "=", "workbook", ".", "worksheet", "(", "sheet_name", ")", "\n", "", "except", ":", "# noqa", "\n", "            ", "try", ":", "\n", "                ", "sheet", "=", "workbook", ".", "add_worksheet", "(", "title", "=", "sheet_name", ",", "\n", "rows", "=", "1000", ",", "cols", "=", "20", ")", "\n", "", "except", ":", "# noqa", "\n", "                ", "logger", ".", "debug", "(", "'Could not access/add worksheet.'", ")", "\n", "traceback", ".", "print_exc", "(", ")", "\n", "return", "\n", "", "", "try", ":", "\n", "            ", "current_values", "=", "sheet", ".", "get_all_values", "(", ")", "\n", "", "except", ":", "# noqa", "\n", "            ", "logger", ".", "debug", "(", "'Could not get values from worksheet.'", ")", "\n", "traceback", ".", "print_exc", "(", ")", "\n", "return", "\n", "", "if", "len", "(", "current_values", ")", "==", "0", ":", "\n", "            ", "try", ":", "\n", "                ", "sheet", ".", "update_cell", "(", "1", ",", "1", ",", "self", ".", "first_column_name", ")", "\n", "", "except", ":", "# noqa", "\n", "                ", "logger", ".", "debug", "(", "'Could not insert first cell.'", ")", "\n", "traceback", ".", "print_exc", "(", ")", "\n", "return", "\n", "", "header", "=", "[", "self", ".", "first_column_name", "]", "\n", "", "else", ":", "\n", "            ", "header", "=", "current_values", "[", "0", "]", "\n", "\n", "", "identifier", "=", "values", "[", "self", ".", "first_column_name", "]", "\n", "\n", "# Construct new row", "\n", "is_header_changed", "=", "False", "\n", "new_row", "=", "[", "None", "]", "*", "len", "(", "header", ")", "\n", "for", "key", ",", "value", "in", "values", ".", "items", "(", ")", ":", "\n", "            ", "if", "key", "not", "in", "header", ":", "\n", "                ", "header", ".", "append", "(", "key", ")", "\n", "new_row", ".", "append", "(", "None", ")", "\n", "is_header_changed", "=", "True", "\n", "", "index", "=", "header", ".", "index", "(", "key", ")", "\n", "new_row", "[", "index", "]", "=", "value", "\n", "if", "isinstance", "(", "value", ",", "float", ")", "or", "isinstance", "(", "value", ",", "int", ")", ":", "\n", "                ", "if", "math", ".", "isnan", "(", "value", ")", ":", "\n", "                    ", "new_row", "[", "index", "]", "=", "'NaN'", "\n", "", "", "elif", "isinstance", "(", "value", ",", "np", ".", "generic", ")", ":", "\n", "                ", "if", "np", ".", "any", "(", "np", ".", "isnan", "(", "value", ")", ")", ":", "\n", "                    ", "new_row", "[", "index", "]", "=", "'NaN'", "\n", "", "elif", "np", ".", "isinf", "(", "value", ")", ":", "\n", "                    ", "new_row", "[", "index", "]", "=", "'Inf'", "\n", "", "else", ":", "\n", "                    ", "new_row", "[", "index", "]", "=", "np", ".", "asscalar", "(", "value", ")", "\n", "", "", "elif", "isinstance", "(", "value", ",", "np", ".", "ndarray", ")", "and", "value", ".", "ndim", "==", "0", ":", "\n", "                ", "new_row", "[", "index", "]", "=", "value", ".", "item", "(", ")", "\n", "", "elif", "hasattr", "(", "value", ",", "'__len__'", ")", "and", "len", "(", "value", ")", ">", "0", ":", "\n", "                ", "new_row", "[", "index", "]", "=", "str", "(", "value", ")", "\n", "\n", "# Update header as necessary", "\n", "", "", "cells_to_update", "=", "[", "]", "\n", "if", "is_header_changed", ":", "\n", "            ", "cells_to_update", "+=", "[", "\n", "gspread", ".", "models", ".", "Cell", "(", "1", ",", "col", "+", "1", ",", "value", ")", "\n", "for", "col", ",", "value", "in", "enumerate", "(", "header", ")", "\n", "]", "\n", "\n", "# Either update an existing row or append new row", "\n", "", "try", ":", "\n", "            ", "row_index", "=", "[", "r", "[", "0", "]", "for", "r", "in", "current_values", "]", ".", "index", "(", "identifier", ")", "\n", "cells_to_update", "+=", "[", "\n", "gspread", ".", "models", ".", "Cell", "(", "row_index", "+", "1", ",", "col_index", "+", "1", ",", "value", "=", "value", ")", "\n", "for", "col_index", ",", "value", "in", "enumerate", "(", "new_row", ")", "\n", "if", "value", "is", "not", "None", "# Don't remove existing values", "\n", "]", "\n", "", "except", ":", "# noqa", "\n", "            ", "sheet", ".", "append_row", "(", "new_row", ")", "\n", "\n", "# Run all necessary update operations", "\n", "", "if", "len", "(", "cells_to_update", ")", ">", "0", ":", "\n", "            ", "try", ":", "\n", "                ", "sheet", ".", "update_cells", "(", "cells_to_update", ")", "\n", "", "except", ":", "# noqa", "\n", "                ", "logger", ".", "debug", "(", "'Error in API call to update cells.'", ")", "\n", "traceback", ".", "print_exc", "(", ")", "\n", "return", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.tensorboard.Tensorboard.__new__": [[36, 40], ["object.__new__"], "methods", ["home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.config_default.DefaultConfig.__new__"], ["def", "__new__", "(", "cls", ",", "*", "args", ")", ":", "\n", "        ", "if", "cls", ".", "__instance", "is", "None", ":", "\n", "            ", "cls", ".", "__instance", "=", "super", "(", ")", ".", "__new__", "(", "cls", ")", "\n", "", "return", "cls", ".", "__instance", "\n", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.tensorboard.Tensorboard.__init__": [[41, 46], ["tensorboardX.SummaryWriter", "tensorboard.Tensorboard.add_graph"], "methods", ["home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.tensorboard.Tensorboard.add_graph"], ["", "def", "__init__", "(", "self", ",", "output_dir", ",", "model", "=", "None", ",", "input_to_model", "=", "None", ")", ":", "\n", "        ", "self", ".", "__output_dir", "=", "output_dir", "\n", "self", ".", "__writer", "=", "SummaryWriter", "(", "output_dir", ")", "\n", "if", "model", "is", "not", "None", ":", "\n", "            ", "self", ".", "add_graph", "(", "model", ",", "input_to_model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.tensorboard.Tensorboard.__del__": [[47, 49], ["tensorboard.Tensorboard.__writer.close"], "methods", ["None"], ["", "", "def", "__del__", "(", "self", ")", ":", "\n", "        ", "self", ".", "__writer", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.tensorboard.Tensorboard.output_dir": [[50, 53], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "output_dir", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__output_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.tensorboard.Tensorboard.update_current_step": [[54, 56], ["None"], "methods", ["None"], ["", "def", "update_current_step", "(", "self", ",", "step", ")", ":", "\n", "        ", "self", ".", "__current_step", "=", "step", "\n", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.tensorboard.Tensorboard.add_graph": [[57, 59], ["tensorboard.Tensorboard.__writer.add_graph"], "methods", ["home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.tensorboard.Tensorboard.add_graph"], ["", "def", "add_graph", "(", "self", ",", "model", ",", "input_to_model", "=", "None", ")", ":", "\n", "        ", "self", ".", "__writer", ".", "add_graph", "(", "model", ",", "input_to_model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.tensorboard.Tensorboard.add_grid": [[60, 63], ["torchvision.utils.make_grid", "tensorboard.Tensorboard.__writer.add_image"], "methods", ["home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.tensorboard.Tensorboard.add_image"], ["", "def", "add_grid", "(", "self", ",", "tag", ",", "values", ")", ":", "\n", "        ", "grid", "=", "torchvision", ".", "utils", ".", "make_grid", "(", "values", ")", "\n", "self", ".", "__writer", ".", "add_image", "(", "tag", ",", "grid", ",", "self", ".", "__current_step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.tensorboard.Tensorboard.add_scalar": [[64, 66], ["tensorboard.Tensorboard.__writer.add_scalar"], "methods", ["home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.tensorboard.Tensorboard.add_scalar"], ["", "def", "add_scalar", "(", "self", ",", "tag", ",", "value", ")", ":", "\n", "        ", "self", ".", "__writer", ".", "add_scalar", "(", "tag", ",", "value", ",", "self", ".", "__current_step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.tensorboard.Tensorboard.add_image": [[67, 69], ["tensorboard.Tensorboard.__writer.add_image"], "methods", ["home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.tensorboard.Tensorboard.add_image"], ["", "def", "add_image", "(", "self", ",", "tag", ",", "value", ")", ":", "\n", "        ", "self", ".", "__writer", ".", "add_image", "(", "tag", ",", "value", ",", "self", ".", "__current_step", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.config_default.DefaultConfig.learning_rate": [[99, 102], ["None"], "methods", ["None"], ["@", "property", "\n", "def", "learning_rate", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "batch_size", "*", "self", ".", "base_learning_rate", "\n", "# Available strategies:", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.config_default.DefaultConfig.__new__": [[198, 205], ["object.__new__", "cls.__get_config_file_contents", "cls.__get_python_file_contents"], "methods", ["home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.config_default.DefaultConfig.__new__", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.config_default.DefaultConfig.__get_config_file_contents", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.config_default.DefaultConfig.__get_python_file_contents"], ["def", "__new__", "(", "cls", ")", ":", "\n", "        ", "if", "cls", ".", "__instance", "is", "None", ":", "\n", "            ", "cls", ".", "__instance", "=", "super", "(", ")", ".", "__new__", "(", "cls", ")", "\n", "cls", ".", "__filecontents", "=", "cls", ".", "__get_config_file_contents", "(", ")", "\n", "cls", ".", "__pycontents", "=", "cls", ".", "__get_python_file_contents", "(", ")", "\n", "cls", ".", "__immutable", "=", "True", "\n", "", "return", "cls", ".", "__instance", "\n", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.config_default.DefaultConfig.import_json": [[206, 216], ["os.path.isfile", "logger.info", "config_default.DefaultConfig.import_dict", "hasattr", "open", "f.read", "json.loads", "os.path.basename"], "methods", ["home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.config_default.DefaultConfig.import_dict"], ["", "def", "import_json", "(", "self", ",", "json_path", ",", "strict", "=", "True", ")", ":", "\n", "        ", "\"\"\"Import JSON config to over-write existing config entries.\"\"\"", "\n", "assert", "os", ".", "path", ".", "isfile", "(", "json_path", ")", "\n", "assert", "not", "hasattr", "(", "self", ".", "__class__", ",", "'__imported_json_path'", ")", "\n", "logger", ".", "info", "(", "'Loading '", "+", "json_path", ")", "\n", "with", "open", "(", "json_path", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "json_string", "=", "f", ".", "read", "(", ")", "\n", "", "self", ".", "import_dict", "(", "json", ".", "loads", "(", "json_string", ")", ",", "strict", "=", "strict", ")", "\n", "self", ".", "__class__", ".", "__imported_json_path", "=", "json_path", "\n", "self", ".", "__class__", ".", "__filecontents", "[", "os", ".", "path", ".", "basename", "(", "json_path", ")", "]", "=", "json_string", "\n", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.config_default.DefaultConfig.override": [[217, 221], ["setattr"], "methods", ["None"], ["", "def", "override", "(", "self", ",", "key", ",", "value", ")", ":", "\n", "        ", "self", ".", "__class__", ".", "__immutable", "=", "False", "\n", "setattr", "(", "self", ",", "key", ",", "value", ")", "\n", "self", ".", "__class__", ".", "__immutable", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.config_default.DefaultConfig.import_dict": [[222, 242], ["dictionary.items", "hasattr", "hasattr", "ValueError", "float", "isinstance", "setattr", "setattr", "type", "type", "type", "type", "getattr", "isinstance", "setattr", "getattr", "getattr", "getattr"], "methods", ["None"], ["", "def", "import_dict", "(", "self", ",", "dictionary", ",", "strict", "=", "True", ")", ":", "\n", "        ", "\"\"\"Import a set of key-value pairs from a dict to over-write existing config entries.\"\"\"", "\n", "self", ".", "__class__", ".", "__immutable", "=", "False", "\n", "for", "key", ",", "value", "in", "dictionary", ".", "items", "(", ")", ":", "\n", "            ", "if", "strict", "is", "True", ":", "\n", "                ", "if", "not", "hasattr", "(", "self", ",", "key", ")", ":", "\n", "                    ", "raise", "ValueError", "(", "'Unknown configuration key: '", "+", "key", ")", "\n", "", "if", "type", "(", "getattr", "(", "self", ",", "key", ")", ")", "is", "float", "and", "type", "(", "value", ")", "is", "int", ":", "\n", "                    ", "value", "=", "float", "(", "value", ")", "\n", "", "else", ":", "\n", "                    ", "assert", "type", "(", "getattr", "(", "self", ",", "key", ")", ")", "is", "type", "(", "value", ")", "\n", "", "if", "not", "isinstance", "(", "getattr", "(", "DefaultConfig", ",", "key", ")", ",", "property", ")", ":", "\n", "                    ", "setattr", "(", "self", ",", "key", ",", "value", ")", "\n", "", "", "else", ":", "\n", "                ", "if", "hasattr", "(", "DefaultConfig", ",", "key", ")", ":", "\n", "                    ", "if", "not", "isinstance", "(", "getattr", "(", "DefaultConfig", ",", "key", ")", ",", "property", ")", ":", "\n", "                        ", "setattr", "(", "self", ",", "key", ",", "value", ")", "\n", "", "", "else", ":", "\n", "                    ", "setattr", "(", "self", ",", "key", ",", "value", ")", "\n", "", "", "", "self", ".", "__class__", ".", "__immutable", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.config_default.DefaultConfig.__get_config_file_contents": [[243, 252], ["os.path.relpath", "os.path.isfile", "open", "f.read", "os.path.dirname", "os.path.basename"], "methods", ["None"], ["", "def", "__get_config_file_contents", "(", ")", ":", "\n", "        ", "\"\"\"Retrieve and cache default and user config file contents.\"\"\"", "\n", "out", "=", "{", "}", "\n", "for", "relpath", "in", "[", "'config_default.py'", "]", ":", "\n", "            ", "path", "=", "os", ".", "path", ".", "relpath", "(", "os", ".", "path", ".", "dirname", "(", "__file__", ")", "+", "'/'", "+", "relpath", ")", "\n", "assert", "os", ".", "path", ".", "isfile", "(", "path", ")", "\n", "with", "open", "(", "path", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "out", "[", "os", ".", "path", ".", "basename", "(", "path", ")", "]", "=", "f", ".", "read", "(", ")", "\n", "", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.config_default.DefaultConfig.__get_python_file_contents": [[253, 267], ["os.path.relpath", "os.path.relpath", "os.path.isfile", "os.path.dirname", "glob.glob", "open", "f.read", "p.startswith"], "methods", ["None"], ["", "def", "__get_python_file_contents", "(", ")", ":", "\n", "        ", "\"\"\"Retrieve and cache default and user config file contents.\"\"\"", "\n", "out", "=", "{", "}", "\n", "base_path", "=", "os", ".", "path", ".", "relpath", "(", "os", ".", "path", ".", "dirname", "(", "__file__", ")", "+", "'/../'", ")", "\n", "source_fpaths", "=", "[", "\n", "p", "for", "p", "in", "glob", ".", "glob", "(", "base_path", "+", "'/**/*.py'", ")", "\n", "if", "not", "p", ".", "startswith", "(", "'./3rdparty/'", ")", "\n", "]", "\n", "source_fpaths", "+=", "[", "os", ".", "path", ".", "relpath", "(", "sys", ".", "argv", "[", "0", "]", ")", "]", "\n", "for", "fpath", "in", "source_fpaths", ":", "\n", "            ", "assert", "os", ".", "path", ".", "isfile", "(", "fpath", ")", "\n", "with", "open", "(", "fpath", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "# with open(fpath, 'r') as f: (EVE original, generents UnicodeDecodeError 'gbk')", "\n", "                ", "out", "[", "fpath", "[", "2", ":", "]", "]", "=", "f", ".", "read", "(", ")", "\n", "", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.config_default.DefaultConfig.get_all_key_values": [[268, 275], ["dict", "getattr", "dir", "key.startswith", "key.startswith", "callable", "getattr"], "methods", ["None"], ["", "def", "get_all_key_values", "(", "self", ")", ":", "\n", "        ", "return", "dict", "(", "[", "\n", "(", "key", ",", "getattr", "(", "self", ",", "key", ")", ")", "\n", "for", "key", "in", "dir", "(", "self", ")", "\n", "if", "not", "key", ".", "startswith", "(", "'_DefaultConfig'", ")", "\n", "and", "not", "key", ".", "startswith", "(", "'__'", ")", "\n", "and", "not", "callable", "(", "getattr", "(", "self", ",", "key", ")", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.config_default.DefaultConfig.get_full_json": [[277, 279], ["json.dumps", "config_default.DefaultConfig.get_all_key_values"], "methods", ["home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.config_default.DefaultConfig.get_all_key_values"], ["", "def", "get_full_json", "(", "self", ")", ":", "\n", "        ", "return", "json", ".", "dumps", "(", "self", ".", "get_all_key_values", "(", ")", ",", "indent", "=", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.config_default.DefaultConfig.write_file_contents": [[280, 312], ["os.path.isdir", "outputs.update", "outputs.items", "os.path.relpath", "os.path.relpath", "logger.info", "os.path.isdir", "os.makedirs", "config_default.DefaultConfig.get_full_json", "os.path.relpath", "zipfile.ZipFile", "os.walk", "open", "f.write", "logger.info", "os.path.dirname", "x.endswith", "x.endswith", "os.path.relpath", "os.path.join", "os.path.isfile", "filter_", "zip_file.write", "os.path.join", "os.path.relpath", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.config_default.DefaultConfig.get_full_json"], ["", "def", "write_file_contents", "(", "self", ",", "target_base_dir", ")", ":", "\n", "        ", "\"\"\"Write cached config file contents to target directory.\"\"\"", "\n", "assert", "os", ".", "path", ".", "isdir", "(", "target_base_dir", ")", "\n", "\n", "# Write config file contents", "\n", "target_dir", "=", "target_base_dir", "+", "'/configs'", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "target_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "target_dir", ")", "\n", "", "outputs", "=", "{", "# Also output flattened config", "\n", "'combined.json'", ":", "self", ".", "get_full_json", "(", ")", ",", "\n", "}", "\n", "outputs", ".", "update", "(", "self", ".", "__class__", ".", "__filecontents", ")", "\n", "for", "fname", ",", "content", "in", "outputs", ".", "items", "(", ")", ":", "\n", "            ", "fpath", "=", "os", ".", "path", ".", "relpath", "(", "target_dir", "+", "'/'", "+", "fname", ")", "\n", "with", "open", "(", "fpath", ",", "'w'", ")", "as", "f", ":", "\n", "                ", "f", ".", "write", "(", "content", ")", "\n", "logger", ".", "info", "(", "'Written %s'", "%", "fpath", ")", "\n", "\n", "# Copy source folder contents over", "\n", "", "", "target_path", "=", "os", ".", "path", ".", "relpath", "(", "target_base_dir", "+", "'/src.zip'", ")", "\n", "source_path", "=", "os", ".", "path", ".", "relpath", "(", "os", ".", "path", ".", "dirname", "(", "__file__", ")", "+", "'/../'", ")", "\n", "filter_", "=", "lambda", "x", ":", "x", ".", "endswith", "(", "'.py'", ")", "or", "x", ".", "endswith", "(", "'.json'", ")", "# noqa", "\n", "with", "zipfile", ".", "ZipFile", "(", "target_path", ",", "'w'", ",", "zipfile", ".", "ZIP_DEFLATED", ")", "as", "zip_file", ":", "\n", "            ", "for", "root", ",", "dirs", ",", "files", "in", "os", ".", "walk", "(", "source_path", ")", ":", "\n", "                ", "for", "file_or_dir", "in", "files", "+", "dirs", ":", "\n", "                    ", "full_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "file_or_dir", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "full_path", ")", "and", "filter_", "(", "full_path", ")", ":", "\n", "                        ", "zip_file", ".", "write", "(", "\n", "os", ".", "path", ".", "join", "(", "root", ",", "file_or_dir", ")", ",", "\n", "os", ".", "path", ".", "relpath", "(", "os", ".", "path", ".", "join", "(", "root", ",", "file_or_dir", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "source_path", ",", "os", ".", "path", ".", "pardir", ")", ")", ")", "\n", "", "", "", "", "logger", ".", "info", "(", "'Written source folder to %s'", "%", "os", ".", "path", ".", "relpath", "(", "target_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.config_default.DefaultConfig.__setattr__": [[313, 319], ["AttributeError", "object.__setattr__"], "methods", ["home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.config_default.DefaultConfig.__setattr__"], ["", "def", "__setattr__", "(", "self", ",", "name", ",", "value", ")", ":", "\n", "        ", "\"\"\"Initial configs should not be overwritten!\"\"\"", "\n", "if", "self", ".", "__class__", ".", "__immutable", ":", "\n", "            ", "raise", "AttributeError", "(", "'DefaultConfig instance attributes are immutable.'", ")", "\n", "", "else", ":", "\n", "            ", "super", "(", ")", ".", "__setattr__", "(", "name", ",", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.config_default.DefaultConfig.__delattr__": [[320, 326], ["AttributeError", "object.__delattr__"], "methods", ["home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.config_default.DefaultConfig.__delattr__"], ["", "", "def", "__delattr__", "(", "self", ",", "name", ")", ":", "\n", "        ", "\"\"\"Initial configs should not be removed!\"\"\"", "\n", "if", "self", ".", "__class__", ".", "__immutable", ":", "\n", "            ", "raise", "AttributeError", "(", "'DefaultConfig instance attributes are immutable.'", ")", "\n", "", "else", ":", "\n", "            ", "super", "(", ")", ".", "__delattr__", "(", "name", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.inference.script_init_common": [[42, 58], ["config.override", "config.override", "config.override", "config.override", "core.script_init_common", "config.override", "config.override", "print", "os.path.isfile"], "function", ["home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.config_default.DefaultConfig.override", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.config_default.DefaultConfig.override", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.config_default.DefaultConfig.override", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.config_default.DefaultConfig.override", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.training.script_init_common", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.config_default.DefaultConfig.override", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.config_default.DefaultConfig.override"], ["# Default singleton config object", "\n", "    ", "config", "=", "DefaultConfig", "(", ")", "\n", "\n", "# Setup logger", "\n", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "\n", "# Run some routines from the training setup pipeline", "\n", "inference", ".", "script_init_common", "(", "default_model_config", ",", "input_path", ",", "output_path", ")", "# hwfjojfj src/inference.py", "\n", "\n", "# Initialize dataset and dataloader", "\n", "dataset", ",", "dataloader", "=", "inference", ".", "init_dataset", "(", ")", "\n", "\n", "# Define and set up model", "\n", "if", "config", ".", "model_used", "==", "'EVE'", ":", "\n", "        ", "model", "=", "EVE", "(", "output_predictions", "=", "True", ")", ".", "cuda", "(", ")", "\n", "", "elif", "config", ".", "model_used", "==", "'EVEC'", ":", "\n", "        ", "model", "=", "EVEC", "(", "output_predictions", "=", "True", ",", "online_refinement_starts_from", "=", "online_refinement_starts_from", ",", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.inference.init_dataset": [[60, 87], ["config.input_path.split", "datasources.EVESequencesBase", "torch.utils.data.DataLoader", "components[].split"], "function", ["None"], ["one_video_to_select", "=", "one_video_to_select", ",", "one_sample_to_plot", "=", "one_sample_to_plot", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "\n", "#print(model.eye_net.state_dict()['fc_to_gaze.0.weight'], model.eye_net.state_dict()['fc_to_gaze.0.weight'].size(), '---kdddfsf before check src/inference.py')", "\n", "\n", "", "model", "=", "inference", ".", "model_setup", "(", "model", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "memory_path", ")", ":", "\n", "        ", "model", ".", "load_subject_memory", "(", "memory_path", ")", "\n", "print", "(", "'load subject memories from'", ",", "memory_path", ",", "'---jjeiojj src/inference.py'", ")", "\n", "#print(model.eye_net.state_dict()['fc_to_gaze.0.weight'], model.eye_net.state_dict()['fc_to_gaze.0.weight'].size(), '---kefdfsf after check src/inference.py')", "\n", "#raise", "\n", "\n", "# Prepare output dir.", "\n", "", "output_dir", "=", "os", ".", "path", ".", "dirname", "(", "config", ".", "output_path", ")", "\n", "if", "output_dir", ">", "''", ":", "\n", "        ", "os", ".", "makedirs", "(", "output_dir", ",", "exist_ok", "=", "True", ")", "\n", "", "video_handle", "=", "None", "\n", "\n", "# Do inference", "\n", "count", "=", "0", "\n", "for", "step", ",", "inputs", ",", "outputs", "in", "inference", ".", "iterator", "(", "model", ",", "dataloader", ",", "create_images", "=", "True", ")", ":", "\n", "        ", "if", "model", ".", "plotted", ":", "\n", "            ", "print", "(", "'plotting material already prepared'", ",", "'---jfowoijef inference.py'", ")", "\n", "break", "\n", "# store results", "\n", "# outputs_stats_dir = config.output_path[:-4] + '_stats'", "\n", "# createDir(outputs_stats_dir)", "\n", "", "outputs_stats_path", "=", "config", ".", "output_path", "[", ":", "-", "4", "]", "+", "'stats_frame_'", "+", "format", "(", "count", ",", "'06d'", ")", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.inference.model_setup": [[89, 109], ["len", "os.path.isdir", "core.CheckpointManager", "model.checkpoint_manager.load_last_checkpoint", "logger.info", "load_weights_for_instance", "load_weights_for_instance"], "function", ["home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.checkpoint_manager.CheckpointManager.load_last_checkpoint", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.utils.load_model.load_weights_for_instance", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.utils.load_model.load_weights_for_instance"], ["del", "outputs", "[", "'screen_frame'", "]", "\n", "if", "'both_eye_patch'", "in", "outputs", ".", "keys", "(", ")", ":", "\n", "            ", "del", "outputs", "[", "'both_eye_patch'", "]", "# to save space", "\n", "\n", "", "pickle", ".", "dump", "(", "outputs", ",", "open", "(", "outputs_stats_path", ",", "'wb'", ")", ")", "\n", "#print(model.eye_net.state_dict()['fc_to_gaze.0.bias'], '---kkeijjjf inference.py')", "\n", "#print(outputs_stats_path, outputs['PoG_px_initial'], '---wwweeedf inference.py')", "\n", "#raise", "\n", "count", "+=", "1", "\n", "\n", "# Visualize", "\n", "if", "not", "config", ".", "mute_visualization", ":", "\n", "            ", "we_have_gt", "=", "'left_g_gt'", "in", "outputs", "\n", "all_g_init", "=", "outputs", "[", "'left_g_initial'", "]", "\n", "# if config.load_full_frame_for_visualization:", "\n", "#     all_eyes = outputs['both_eye_patch']", "\n", "#     all_eyes = (all_eyes + 1.0) * (255.0 / 2.0)", "\n", "#     all_eyes = all_eyes.astype(np.uint8)", "\n", "#     all_eyes = np.transpose(all_eyes, [0, 1, 3, 4, 2])[:, :, :, :, ::-1]", "\n", "if", "'screen_full_frame'", "in", "inputs", ":", "\n", "                ", "all_screen", "=", "inputs", "[", "'screen_full_frame'", "]", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.inference.iterator": [[110, 137], ["model.eval", "torch.no_grad", "enumerate", "input_data.items", "model", "isinstance", "v.detach().cpu().numpy", "v.detach().to", "isinstance", "v.numpy", "input_data.items", "model.items", "isinstance", "v.detach().cpu", "v.detach", "v.detach"], "function", ["None"], ["all_screen", "=", "all_screen", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "all_screen", "=", "all_screen", "[", ":", ",", ":", ",", ":", ",", ":", ",", ":", ":", "-", "1", "]", "# TODO: RGB to BGR", "\n", "", "all_PoG_init", "=", "outputs", "[", "'PoG_px_initial'", "]", "\n", "if", "config", ".", "refine_net_enabled", "and", "config", ".", "load_screen_content", ":", "\n", "                ", "all_g_final", "=", "outputs", "[", "'g_final'", "]", "\n", "all_PoG_final", "=", "outputs", "[", "'PoG_px_final'", "]", "\n", "", "if", "we_have_gt", ":", "\n", "                ", "all_g_gt", "=", "outputs", "[", "'left_g_gt'", "]", "\n", "all_PoG_gt", "=", "outputs", "[", "'PoG_px_gt'", "]", "\n", "all_PoG_gt_validity", "=", "outputs", "[", "'PoG_px_gt_validity'", "]", "\n", "", "num_entries", "=", "all_g_init", ".", "shape", "[", "0", "]", "\n", "sequence_len", "=", "all_g_init", ".", "shape", "[", "1", "]", "\n", "if", "config", ".", "refine_net_enabled", ":", "# if refine net is used, do visualization, skip this if only eye net is used", "\n", "                ", "for", "index", "in", "range", "(", "num_entries", ")", ":", "\n", "# if config.load_full_frame_for_visualization:", "\n", "#       eyes = all_eyes[index, :]", "\n", "                    ", "if", "'screen_full_frame'", "in", "inputs", ":", "\n", "                        ", "screen", "=", "all_screen", "[", "index", ",", ":", "]", "\n", "", "g_init", "=", "all_g_init", "[", "index", ",", ":", "]", "\n", "PoG_init", "=", "all_PoG_init", "[", "index", ",", ":", "]", "\n", "if", "config", ".", "load_screen_content", ":", "\n", "                        ", "g_final", "=", "all_g_final", "[", "index", ",", ":", "]", "\n", "PoG_final", "=", "all_PoG_final", "[", "index", ",", ":", "]", "\n", "", "if", "we_have_gt", ":", "\n", "                        ", "g_gt", "=", "all_g_gt", "[", "index", ",", ":", "]", "\n", "PoG_gt", "=", "all_PoG_gt", "[", "index", ",", ":", "]", "\n", "gt_validity", "=", "all_PoG_gt_validity", "[", "index", ",", ":", "]", "\n", "", "final_out_frames", "=", "{", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.gaze.pitchyaw_to_vector": [[25, 40], ["numpy.sin", "numpy.cos", "numpy.empty", "numpy.multiply", "numpy.multiply"], "function", ["None"], ["def", "pitchyaw_to_vector", "(", "pitchyaws", ")", ":", "\n", "    ", "r\"\"\"Convert given yaw (:math:`\\theta`) and pitch (:math:`\\phi`) angles to unit gaze vectors.\n    Args:\n        pitchyaws (:obj:`numpy.array`): yaw and pitch angles :math:`(n\\times 2)` in radians.\n    Returns:\n        :obj:`numpy.array` of shape :math:`(n\\times 3)` with 3D vectors per row.\n    \"\"\"", "\n", "n", "=", "pitchyaws", ".", "shape", "[", "0", "]", "\n", "sin", "=", "np", ".", "sin", "(", "pitchyaws", ")", "\n", "cos", "=", "np", ".", "cos", "(", "pitchyaws", ")", "\n", "out", "=", "np", ".", "empty", "(", "(", "n", ",", "3", ")", ")", "\n", "out", "[", ":", ",", "0", "]", "=", "np", ".", "multiply", "(", "cos", "[", ":", ",", "0", "]", ",", "sin", "[", ":", ",", "1", "]", ")", "\n", "out", "[", ":", ",", "1", "]", "=", "-", "sin", "[", ":", ",", "0", "]", "\n", "out", "[", ":", ",", "2", "]", "=", "np", ".", "multiply", "(", "cos", "[", ":", ",", "0", "]", ",", "cos", "[", ":", ",", "1", "]", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.gaze.vector_to_pitchyaw": [[42, 55], ["numpy.empty", "numpy.divide", "numpy.arctan2", "numpy.linalg.norm().reshape", "numpy.arcsin", "numpy.linalg.norm"], "function", ["None"], ["", "def", "vector_to_pitchyaw", "(", "vectors", ")", ":", "\n", "    ", "r\"\"\"Convert given gaze vectors to yaw (:math:`\\theta`) and pitch (:math:`\\phi`) angles.\n    Args:\n        vectors (:obj:`numpy.array`): gaze vectors in 3D :math:`(n\\times 3)`.\n    Returns:\n        :obj:`numpy.array` of shape :math:`(n\\times 2)` with values in radians.\n    \"\"\"", "\n", "n", "=", "vectors", ".", "shape", "[", "0", "]", "\n", "out", "=", "np", ".", "empty", "(", "(", "n", ",", "2", ")", ")", "\n", "vectors", "=", "np", ".", "divide", "(", "vectors", ",", "np", ".", "linalg", ".", "norm", "(", "vectors", ",", "axis", "=", "1", ")", ".", "reshape", "(", "n", ",", "1", ")", ")", "\n", "out", "[", ":", ",", "0", "]", "=", "-", "np", ".", "arcsin", "(", "vectors", "[", ":", ",", "1", "]", ")", "# theta", "\n", "out", "[", ":", ",", "1", "]", "=", "np", ".", "arctan2", "(", "vectors", "[", ":", ",", "0", "]", ",", "vectors", "[", ":", ",", "2", "]", ")", "# phi", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.gaze.angular_error": [[57, 73], ["numpy.sum", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.clip", "numpy.clip", "numpy.divide", "numpy.clip", "numpy.degrees", "gaze.pitchyaw_to_vector", "gaze.pitchyaw_to_vector", "numpy.multiply", "numpy.multiply", "numpy.arccos"], "function", ["home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.gaze.pitchyaw_to_vector", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.gaze.pitchyaw_to_vector"], ["", "def", "angular_error", "(", "a", ",", "b", ")", ":", "\n", "    ", "\"\"\"Calculate angular error (via cosine similarity).\"\"\"", "\n", "a", "=", "pitchyaw_to_vector", "(", "a", ")", "if", "a", ".", "shape", "[", "1", "]", "==", "2", "else", "a", "\n", "b", "=", "pitchyaw_to_vector", "(", "b", ")", "if", "b", ".", "shape", "[", "1", "]", "==", "2", "else", "b", "\n", "\n", "ab", "=", "np", ".", "sum", "(", "np", ".", "multiply", "(", "a", ",", "b", ")", ",", "axis", "=", "1", ")", "\n", "a_norm", "=", "np", ".", "linalg", ".", "norm", "(", "a", ",", "axis", "=", "1", ")", "\n", "b_norm", "=", "np", ".", "linalg", ".", "norm", "(", "b", ",", "axis", "=", "1", ")", "\n", "\n", "# Avoid zero-values (to avoid NaNs)", "\n", "a_norm", "=", "np", ".", "clip", "(", "a_norm", ",", "a_min", "=", "1e-8", ",", "a_max", "=", "None", ")", "\n", "b_norm", "=", "np", ".", "clip", "(", "b_norm", ",", "a_min", "=", "1e-8", ",", "a_max", "=", "None", ")", "\n", "\n", "similarity", "=", "np", ".", "divide", "(", "ab", ",", "np", ".", "multiply", "(", "a_norm", ",", "b_norm", ")", ")", "\n", "similarity", "=", "np", ".", "clip", "(", "similarity", ",", "a_min", "=", "-", "1.", "+", "1e-8", ",", "a_max", "=", "1.", "-", "1e-8", ")", "\n", "return", "np", ".", "degrees", "(", "np", ".", "arccos", "(", "similarity", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.gaze.mean_angular_error": [[75, 78], ["numpy.mean", "gaze.angular_error"], "function", ["home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.gaze.angular_error"], ["", "def", "mean_angular_error", "(", "a", ",", "b", ")", ":", "\n", "    ", "\"\"\"Calculate mean angular error (via cosine similarity).\"\"\"", "\n", "return", "np", ".", "mean", "(", "angular_error", "(", "a", ",", "b", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.gaze.draw_gaze": [[80, 91], ["cv2.arrowedLine", "cv2.cvtColor", "numpy.sin", "numpy.sin", "tuple", "tuple", "len", "numpy.round().astype", "numpy.round().astype", "numpy.round", "numpy.round"], "function", ["None"], ["", "def", "draw_gaze", "(", "image_in", ",", "eye_pos", ",", "pitchyaw", ",", "length", "=", "40.0", ",", "thickness", "=", "2", ",", "color", "=", "(", "0", ",", "0", ",", "255", ")", ")", ":", "\n", "    ", "\"\"\"Draw gaze angle on given image with a given eye positions.\"\"\"", "\n", "image_out", "=", "image_in", "\n", "if", "len", "(", "image_out", ".", "shape", ")", "==", "2", "or", "image_out", ".", "shape", "[", "2", "]", "==", "1", ":", "\n", "        ", "image_out", "=", "cv", ".", "cvtColor", "(", "image_out", ",", "cv", ".", "COLOR_GRAY2BGR", ")", "\n", "", "dx", "=", "-", "length", "*", "np", ".", "sin", "(", "pitchyaw", "[", "1", "]", ")", "\n", "dy", "=", "-", "length", "*", "np", ".", "sin", "(", "pitchyaw", "[", "0", "]", ")", "\n", "cv", ".", "arrowedLine", "(", "image_out", ",", "tuple", "(", "np", ".", "round", "(", "eye_pos", ")", ".", "astype", "(", "np", ".", "int32", ")", ")", ",", "\n", "tuple", "(", "np", ".", "round", "(", "[", "eye_pos", "[", "0", "]", "+", "dx", ",", "eye_pos", "[", "1", "]", "+", "dy", "]", ")", ".", "astype", "(", "int", ")", ")", ",", "color", ",", "\n", "thickness", ",", "cv", ".", "LINE_AA", ",", "tipLength", "=", "0.2", ")", "\n", "return", "image_out", "\n", "", ""]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.checkpoint_manager.CheckpointManager.__init__": [[46, 50], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "model", ",", "optimizers", ")", ":", "\n", "        ", "self", ".", "__model", "=", "model", "\n", "self", ".", "__optimizers", "=", "optimizers", "\n", "self", ".", "history_stats", "=", "{", "}", "# initialise history_stat as empty dict", "\n", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.checkpoint_manager.CheckpointManager.__save": [[51, 86], ["hasattr", "os.makedirs", "set", "checkpoint_manager.CheckpointManager.keys", "enumerate", "logger.info", "print", "os.path.isdir", "checkpoint_manager.CheckpointManager.__model.module.state_dict", "checkpoint_manager.CheckpointManager.__model.state_dict", "k.split", "set.add", "checkpoint_manager.CheckpointManager.items", "torch.save", "torch.save", "k.startswith", "optimizer.state_dict"], "methods", ["None"], ["", "def", "__save", "(", "self", ",", "ofdir", ")", ":", "\n", "        ", "assert", "not", "os", ".", "path", ".", "isdir", "(", "ofdir", ")", "\n", "if", "hasattr", "(", "self", ".", "__model", ",", "'module'", ")", ":", "# case where nn.DataParallel was used", "\n", "            ", "state_dict", "=", "self", ".", "__model", ".", "module", ".", "state_dict", "(", ")", "\n", "", "else", ":", "\n", "            ", "state_dict", "=", "self", ".", "__model", ".", "state_dict", "(", ")", "\n", "", "os", ".", "makedirs", "(", "ofdir", ")", "\n", "\n", "# Determine prefices", "\n", "prefices", "=", "set", "(", ")", "\n", "for", "k", "in", "state_dict", ".", "keys", "(", ")", ":", "\n", "            ", "words", "=", "k", ".", "split", "(", "'.'", ")", "\n", "prefices", ".", "add", "(", "words", "[", "0", "]", ")", "\n", "\n", "# Save each prefix into own file", "\n", "", "for", "prefix", "in", "prefices", ":", "\n", "            ", "sub_state_dict", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "                ", "if", "k", ".", "startswith", "(", "prefix", "+", "'.'", ")", ":", "\n", "                    ", "sub_state_dict", "[", "k", "]", "=", "v", "\n", "", "", "torch", ".", "save", "(", "sub_state_dict", ",", "'%s/%s%s'", "%", "(", "ofdir", ",", "prefix", ",", "self", ".", "__suffix", ")", ")", "\n", "\n", "# Save each optimizer's state", "\n", "", "for", "i", ",", "optimizer", "in", "enumerate", "(", "self", ".", "__optimizers", ")", ":", "\n", "            ", "output_path", "=", "'%s/optimizer_%d%s'", "%", "(", "ofdir", ",", "i", ",", "self", ".", "__suffix", ")", "\n", "torch", ".", "save", "(", "optimizer", ".", "state_dict", "(", ")", ",", "output_path", ")", "\n", "\n", "# # Save history stats and clear slot", "\n", "# history_stats_dir = '%s/history_stats_%s' % (ofdir, self.__suffix)", "\n", "# torch.save(self.history_stats, history_stats_dir)", "\n", "# print('history_stats stored in', history_stats_dir, '---woejfuhfu')", "\n", "# self.history_stats = {}", "\n", "\n", "", "logger", ".", "info", "(", "'> Saved parameters to: %s'", "%", "ofdir", ")", "\n", "print", "(", "'check point saved at step'", ",", "ofdir", ",", "'---urghiufj'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.checkpoint_manager.CheckpointManager.__load": [[87, 128], ["os.path.isdir", "checkpoint_manager.CheckpointManager.__model.load_state_dict", "int", "torch.load", "torch.load.items", "logger.info", "int", "glob.glob", "glob.glob", "os.path.isfile", "len", "checkpoint_manager.CheckpointManager.__optimizers[].load_state_dict", "logger.info", "os.path.isfile", "[].split", "torch.load", "os.path.split", "os.path.basename().startswith", "os.path.basename", "os.path.basename().split", "os.path.basename"], "methods", ["None"], ["", "def", "__load", "(", "self", ",", "ifdir", ")", ":", "\n", "        ", "assert", "os", ".", "path", ".", "isdir", "(", "ifdir", ")", "\n", "full_state_dict", "=", "{", "}", "\n", "\n", "# Gather state_dicts from directory", "\n", "ifpaths", "=", "[", "\n", "p", "for", "p", "in", "glob", ".", "glob", "(", "ifdir", "+", "'/*'", "+", "self", ".", "__suffix", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "p", ")", "and", "not", "os", ".", "path", ".", "basename", "(", "p", ")", ".", "startswith", "(", "'optimizer_'", ")", "\n", "]", "\n", "for", "ifpath", "in", "ifpaths", ":", "\n", "            ", "sub_state_dict", "=", "torch", ".", "load", "(", "ifpath", ",", "map_location", "=", "device", ")", "\n", "for", "k", ",", "v", "in", "sub_state_dict", ".", "items", "(", ")", ":", "\n", "                ", "full_state_dict", "[", "k", "]", "=", "v", "\n", "", "logger", ".", "info", "(", "'> Loaded model parameters from: %s'", "%", "ifpath", ")", "\n", "\n", "# Do the actual loading", "\n", "# print(full_state_dict['fc_to_gaze.0.weight'], full_state_dict['fc_to_gaze.0.weight'].size(), '---bwfrffd checkpoint_manager.py')", "\n", "", "self", ".", "__model", ".", "load_state_dict", "(", "full_state_dict", ",", "strict", "=", "False", ")", "# allow other dictionary and keys to be stored in checkpoint", "\n", "# print(self.__model.state_dict()['fc_to_gaze.0.weight'],", "\n", "#       self.__model.state_dict()['fc_to_gaze.0.weight'].size(), '---nbvdwfrfrfe checkpoint_manager.py')", "\n", "#raise", "\n", "\n", "\n", "# Load each optimizer's state", "\n", "optimizer_checkpoint_paths", "=", "[", "\n", "p", "for", "p", "in", "glob", ".", "glob", "(", "ifdir", "+", "'/optimizer_*'", "+", "self", ".", "__suffix", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "p", ")", "\n", "]", "\n", "for", "checkpoint_path", "in", "optimizer_checkpoint_paths", ":", "\n", "            ", "optimizer_index", "=", "int", "(", "os", ".", "path", ".", "basename", "(", "checkpoint_path", ")", ".", "split", "(", "'.'", ")", "[", "0", "]", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", ")", "\n", "if", "optimizer_index", "<", "len", "(", "self", ".", "__optimizers", ")", ":", "\n", "                ", "self", ".", "__optimizers", "[", "optimizer_index", "]", ".", "load_state_dict", "(", "\n", "torch", ".", "load", "(", "checkpoint_path", ",", "map_location", "=", "device", ")", "\n", ")", "\n", "logger", ".", "info", "(", "'> Loaded optimizer parameters from: %s'", "%", "checkpoint_path", ")", "\n", "\n", "# load history stats #TODO: no need to load history to model or checkpoint manager", "\n", "# self.history_stats = torch.load('%s/history_stats_%s' % (ifdir, self.__suffix))", "\n", "\n", "", "", "step", "=", "int", "(", "os", ".", "path", ".", "split", "(", "ifdir", ")", "[", "-", "1", "]", "[", ":", "-", "3", "]", ")", "\n", "return", "step", "\n", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.checkpoint_manager.CheckpointManager.__output_dir": [[129, 133], ["os.path.relpath", "os.path.join"], "methods", ["None"], ["", "def", "__output_dir", "(", "self", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "relpath", "(", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "__model", ".", "output_dir", ",", "\n", "'checkpoints'", ",", "\n", ")", ")", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.checkpoint_manager.CheckpointManager.__output_fpath": [[135, 139], ["os.path.relpath", "os.path.join", "checkpoint_manager.CheckpointManager.__output_dir"], "methods", ["home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.checkpoint_manager.CheckpointManager.__output_dir"], ["", "def", "__output_fpath", "(", "self", ",", "current_step", ",", "is_final_step", "=", "False", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "relpath", "(", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "__output_dir", "(", ")", ",", "\n", "(", "'%07d'", "%", "current_step", "if", "not", "is_final_step", "else", "'final_checkpoint'", ")", "+", "self", ".", "__suffix", ",", "\n", ")", ")", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.checkpoint_manager.CheckpointManager.save_at_step": [[141, 144], ["checkpoint_manager.CheckpointManager.__save", "checkpoint_manager.CheckpointManager.__only_keep_n_checkpoints", "checkpoint_manager.CheckpointManager.__output_fpath"], "methods", ["home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.checkpoint_manager.CheckpointManager.__save", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.checkpoint_manager.CheckpointManager.__only_keep_n_checkpoints", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.checkpoint_manager.CheckpointManager.__output_fpath"], ["", "def", "save_at_step", "(", "self", ",", "current_step", ",", "is_final_step", "=", "False", ")", ":", "\n", "        ", "self", ".", "__save", "(", "self", ".", "__output_fpath", "(", "current_step", ",", "is_final_step", ")", ")", "\n", "self", ".", "__only_keep_n_checkpoints", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.checkpoint_manager.CheckpointManager.save_at_step_training_results": [[145, 154], ["checkpoint_manager.CheckpointManager.__output_fpath", "torch.save", "os.path.isdir", "os.makedirs"], "methods", ["home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.checkpoint_manager.CheckpointManager.__output_fpath"], ["", "def", "save_at_step_training_results", "(", "self", ",", "current_step", ",", "training_results", ")", ":", "\n", "        ", "ofdir", "=", "self", ".", "__output_fpath", "(", "current_step", ")", "\n", "# ofdir example: '..\\outputs\\EVE\\201202_102954.20b18b\\checkpoints\\0000005.pt'", "\n", "step_str", "=", "ofdir", "[", "-", "10", ":", "-", "3", "]", "\n", "checkpoints_dir", "=", "ofdir", "[", ":", "-", "11", "]", "\n", "training_results_dir", "=", "checkpoints_dir", "+", "'/training_results'", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "training_results_dir", ")", ":", "os", ".", "makedirs", "(", "training_results_dir", ")", "\n", "step_train_results_dir", "=", "training_results_dir", "+", "'/training_results_'", "+", "step_str", "+", "''", "+", "self", ".", "__suffix", "\n", "torch", ".", "save", "(", "training_results", ",", "step_train_results_dir", ")", "\n", "# print('traing result list saved at step', current_step, 'in', step_train_results_dir, '---rgwfwefd')", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.checkpoint_manager.CheckpointManager.save_at_step_testing_results": [[156, 165], ["checkpoint_manager.CheckpointManager.__output_fpath", "torch.save", "os.path.isdir", "os.makedirs"], "methods", ["home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.checkpoint_manager.CheckpointManager.__output_fpath"], ["", "def", "save_at_step_testing_results", "(", "self", ",", "current_step", ",", "testing_results", ")", ":", "\n", "        ", "ofdir", "=", "self", ".", "__output_fpath", "(", "current_step", ")", "\n", "# ofdir example: '..\\outputs\\EVE\\201202_102954.20b18b\\checkpoints\\0000005.pt'", "\n", "step_str", "=", "ofdir", "[", "-", "10", ":", "-", "3", "]", "\n", "checkpoints_dir", "=", "ofdir", "[", ":", "-", "11", "]", "\n", "test_results_dir", "=", "checkpoints_dir", "+", "'/test_results'", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "test_results_dir", ")", ":", "os", ".", "makedirs", "(", "test_results_dir", ")", "\n", "step_test_results_dir", "=", "test_results_dir", "+", "'/test_results_'", "+", "step_str", "+", "''", "+", "self", ".", "__suffix", "\n", "torch", ".", "save", "(", "testing_results", ",", "step_test_results_dir", ")", "\n", "# print('test results saved at step', current_step, 'in', step_test_results_dir, '---aefwedffd')", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.checkpoint_manager.CheckpointManager.__get_available_checkpoints": [[167, 173], ["checkpoint_manager.CheckpointManager.__output_dir", "sorted", "int", "glob.glob", "os.path.join", "fn.endswith", "os.path.isdir", "[].split", "os.path.split"], "methods", ["home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.checkpoint_manager.CheckpointManager.__output_dir"], ["", "def", "__get_available_checkpoints", "(", "self", ")", ":", "\n", "        ", "output_dir", "=", "self", ".", "__output_dir", "(", ")", "\n", "return", "sorted", "(", "[", "\n", "(", "int", "(", "os", ".", "path", ".", "split", "(", "fn", ")", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", ",", "fn", ")", "\n", "for", "fn", "in", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'*'", "+", "self", ".", "__suffix", ")", ")", "\n", "if", "fn", ".", "endswith", "(", "self", ".", "__suffix", ")", "and", "os", ".", "path", ".", "isdir", "(", "fn", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.checkpoint_manager.CheckpointManager.__only_keep_n_checkpoints": [[175, 181], ["checkpoint_manager.CheckpointManager.__get_available_checkpoints", "len", "shutil.rmtree", "logger.info"], "methods", ["home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.checkpoint_manager.CheckpointManager.__get_available_checkpoints"], ["", "def", "__only_keep_n_checkpoints", "(", "self", ")", ":", "\n", "        ", "available", "=", "self", ".", "__get_available_checkpoints", "(", ")", "\n", "if", "len", "(", "available", ")", ">", "config", ".", "checkpoints_keep_n", ":", "\n", "            ", "for", "step", ",", "fpath", "in", "available", "[", ":", "-", "config", ".", "checkpoints_keep_n", "]", ":", "\n", "                ", "shutil", ".", "rmtree", "(", "fpath", ")", "\n", "logger", ".", "info", "(", "'> Removing parameters folder at: %s'", "%", "fpath", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.checkpoint_manager.CheckpointManager.load_last_checkpoint": [[182, 184], ["checkpoint_manager.CheckpointManager.__load_last_checkpoint"], "methods", ["home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.checkpoint_manager.CheckpointManager.__load_last_checkpoint"], ["", "", "", "def", "load_last_checkpoint", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__load_last_checkpoint", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.checkpoint_manager.CheckpointManager.__load_last_checkpoint": [[185, 191], ["checkpoint_manager.CheckpointManager.__get_available_checkpoints", "len", "checkpoint_manager.CheckpointManager.__load"], "methods", ["home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.checkpoint_manager.CheckpointManager.__get_available_checkpoints", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.checkpoint_manager.CheckpointManager.__load"], ["", "def", "__load_last_checkpoint", "(", "self", ")", ":", "\n", "        ", "available", "=", "self", ".", "__get_available_checkpoints", "(", ")", "\n", "if", "len", "(", "available", ")", ">", "0", ":", "\n", "            ", "return", "self", ".", "__load", "(", "available", "[", "-", "1", "]", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "return", "0", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.eval_codalab.script_init_common": [[37, 46], ["config.override", "config.override", "config.override", "config.override", "core.script_init_common"], "function", ["home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.config_default.DefaultConfig.override", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.config_default.DefaultConfig.override", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.config_default.DefaultConfig.override", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.config_default.DefaultConfig.override", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.training.script_init_common"], ["def", "script_init_common", "(", "default_model_config", ")", ":", "\n", "# Set inference-specific overrides", "\n", "    ", "config", ".", "override", "(", "'fully_reproducible'", ",", "True", ")", "\n", "config", ".", "override", "(", "'refine_net_enabled'", ",", "True", ")", "\n", "config", ".", "override", "(", "'load_screen_content'", ",", "True", ")", "\n", "config", ".", "override", "(", "'load_full_frame_for_visualization'", ",", "False", ")", "\n", "\n", "# Run the remaining routines from the training mode", "\n", "training", ".", "script_init_common", "(", "default_model_config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.eval_codalab.init_dataset": [[48, 65], ["datasources.EVESequences_test", "torch.utils.data.DataLoader"], "function", ["None"], ["", "def", "init_dataset", "(", ")", ":", "\n", "\n", "# Initialize dataset and dataloader", "\n", "    ", "dataset", "=", "EVESequences_test", "(", "\n", "config", ".", "datasrc_eve", ",", "\n", "is_final_test", "=", "True", ",", "\n", ")", "\n", "dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset", ",", "\n", "batch_size", "=", "config", ".", "codalab_eval_batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "drop_last", "=", "False", ",", "\n", "num_workers", "=", "config", ".", "codalab_eval_data_workers", ",", "\n", "pin_memory", "=", "True", ",", "\n", ")", "\n", "\n", "return", "dataset", ",", "dataloader", "\n", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.eval_codalab.model_setup": [[67, 78], ["os.path.isdir", "core.CheckpointManager", "model.checkpoint_manager.load_last_checkpoint", "len"], "function", ["home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.checkpoint_manager.CheckpointManager.load_last_checkpoint"], ["", "def", "model_setup", "(", "model", ")", ":", "\n", "    ", "assert", "len", "(", "config", ".", "resume_from", ")", ">", "0", "\n", "assert", "os", ".", "path", ".", "isdir", "(", "config", ".", "resume_from", ")", "\n", "\n", "# Load pre-trained model weights", "\n", "model", ".", "checkpoint_manager", "=", "CheckpointManager", "(", "model", ",", "[", "]", ")", "\n", "model", ".", "output_dir", "=", "config", ".", "resume_from", "\n", "model", ".", "last_step", "=", "model", ".", "checkpoint_manager", ".", "load_last_checkpoint", "(", ")", "\n", "assert", "model", ".", "last_step", ">", "0", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.eval_codalab.iterator": [[80, 109], ["model.eval", "torch.no_grad", "enumerate", "input_data.items", "model", "isinstance", "v.detach().cpu().numpy", "v.detach().to", "isinstance", "v.numpy", "input_data.items", "model.items", "isinstance", "v.detach().cpu", "v.detach", "v.detach"], "function", ["None"], ["", "def", "iterator", "(", "model", ",", "dataloader", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "current_step", ",", "input_data", "in", "enumerate", "(", "dataloader", ")", ":", "\n", "#print(list(input_data.keys()), '---jfijijid core/eval_codalab.py')", "\n", "\n", "# Move tensors to device", "\n", "            ", "input_data_gpu", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "input_data", ".", "items", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "v", ",", "torch", ".", "Tensor", ")", ":", "\n", "                    ", "input_data_gpu", "[", "k", "]", "=", "v", ".", "detach", "(", ")", ".", "to", "(", "device", ",", "non_blocking", "=", "True", ")", "\n", "", "", "input_data_gpu", "[", "'participant'", "]", "=", "input_data", "[", "'participant'", "]", "\n", "input_data_gpu", "[", "'subfolder'", "]", "=", "input_data", "[", "'subfolder'", "]", "\n", "input_data_gpu", "[", "'camera'", "]", "=", "input_data", "[", "'camera'", "]", "\n", "\n", "# Forward pass and yield", "\n", "outputs", "=", "model", "(", "input_data_gpu", ",", "**", "kwargs", ")", "\n", "\n", "# Convert data", "\n", "inputs_np", "=", "{", "\n", "k", ":", "v", ".", "numpy", "(", ")", "if", "isinstance", "(", "v", ",", "torch", ".", "Tensor", ")", "else", "v", "\n", "for", "k", ",", "v", "in", "input_data", ".", "items", "(", ")", "\n", "}", "\n", "outputs_np", "=", "{", "\n", "k", ":", "v", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "for", "k", ",", "v", "in", "outputs", ".", "items", "(", ")", "\n", "if", "isinstance", "(", "v", ",", "torch", ".", "Tensor", ")", "\n", "}", "\n", "yield", "current_step", ",", "inputs_np", ",", "outputs_np", "", "", "", "", ""]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.training._convert_cli_arg_type": [[54, 65], ["type", "getattr", "type.", "value.lower", "ValueError", "value.lower"], "function", ["None"], ["def", "_convert_cli_arg_type", "(", "key", ",", "value", ")", ":", "\n", "    ", "config_type", "=", "type", "(", "getattr", "(", "config", ",", "key", ")", ")", "\n", "if", "config_type", "==", "bool", ":", "\n", "        ", "if", "value", ".", "lower", "(", ")", "in", "(", "'true'", ",", "'yes'", ",", "'y'", ")", "or", "value", "==", "'1'", ":", "\n", "            ", "return", "True", "\n", "", "elif", "value", ".", "lower", "(", ")", "in", "(", "'false'", ",", "'no'", ",", "'n'", ")", "or", "value", "==", "'0'", ":", "\n", "            ", "return", "False", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Invalid input for bool config \"%s\": %s'", "%", "(", "key", ",", "value", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "return", "config_type", "(", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.training.script_init_common": [[67, 139], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "dir", "argparse.ArgumentParser.parse_args", "torch.cuda.current_device", "torch.cuda.current_device", "coloredlogs.install", "config.import_dict", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "numpy.random.seed", "print", "getattr", "type", "callable", "argparse.ArgumentParser.add_argument", "print", "config.import_json", "print", "print", "print", "config.import_json", "print", "key.startswith", "key.startswith", "isinstance", "parser.parse_args.v.upper", "key.replace", "training._convert_cli_arg_type", "vars", "key.replace", "vars().items", "vars", "hasattr", "vars"], "function", ["home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.config_default.DefaultConfig.import_dict", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.config_default.DefaultConfig.import_json", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.config_default.DefaultConfig.import_json", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.training._convert_cli_arg_type"], ["", "", "def", "script_init_common", "(", "default_model_config", ")", ":", "\n", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Train a gaze estimation model.'", ")", "\n", "parser", ".", "add_argument", "(", "'-v'", ",", "type", "=", "str", ",", "help", "=", "'Desired logging level.'", ",", "default", "=", "'info'", ",", "\n", "choices", "=", "[", "'debug'", ",", "'info'", ",", "'warning'", ",", "'error'", ",", "'critical'", "]", ")", "\n", "parser", ".", "add_argument", "(", "'config_json'", ",", "type", "=", "str", ",", "nargs", "=", "'*'", ",", "help", "=", "(", "'Path to config in JSON format. '", "\n", "'Multiple configs will be parsed in the specified order.'", ")", ")", "\n", "for", "key", "in", "dir", "(", "config", ")", ":", "# nwifjijej training.py", "\n", "        ", "if", "key", ".", "startswith", "(", "'_DefaultConfig'", ")", "or", "key", ".", "startswith", "(", "'__'", ")", ":", "\n", "            ", "continue", "\n", "", "if", "key", "in", "vars", "(", "DefaultConfig", ")", "and", "isinstance", "(", "vars", "(", "DefaultConfig", ")", "[", "key", "]", ",", "property", ")", ":", "\n", "            ", "continue", "\n", "", "value", "=", "getattr", "(", "config", ",", "key", ")", "\n", "value_type", "=", "type", "(", "value", ")", "\n", "arg_type", "=", "value_type", "\n", "if", "value_type", "==", "bool", ":", "\n", "# Handle booleans separately, otherwise arbitrary values become `True`", "\n", "            ", "arg_type", "=", "str", "\n", "", "if", "callable", "(", "value", ")", ":", "\n", "            ", "continue", "\n", "", "parser", ".", "add_argument", "(", "'--'", "+", "key", ".", "replace", "(", "'_'", ",", "'-'", ")", ",", "type", "=", "arg_type", ",", "metavar", "=", "value", ",", "\n", "help", "=", "'Expected type is `%s`.'", "%", "value_type", ".", "__name__", ")", "\n", "", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "# Set device", "\n", "curr_device_index", "=", "torch", ".", "cuda", ".", "current_device", "(", ")", "\n", "# device = torch.device('cuda:' + str(curr_device_index) if torch.cuda.is_available() else \"cpu\")", "\n", "# device = torch.device((\"cuda:0\" if config.use_one_gpu is None else 'cuda:'+str(config.use_one_gpu) )  if torch.cuda.is_available() else \"cpu\")", "\n", "\n", "# Set logger format and verbosity level", "\n", "coloredlogs", ".", "install", "(", "\n", "datefmt", "=", "'%d/%m %H:%M:%S'", ",", "\n", "fmt", "=", "'%(asctime)s %(levelname)s %(message)s'", ",", "\n", "level", "=", "args", ".", "v", ".", "upper", "(", ")", ",", "\n", ")", "\n", "\n", "# Parse configs in order specified by user", "\n", "if", "default_model_config", ":", "\n", "        ", "training_defaul_json_dir", "=", "default_model_config", "\n", "print", "(", "'before json import default_model_config configurations'", ",", "\n", "'batch_size'", ",", "config", ".", "batch_size", ",", "'config id'", ",", "config", ".", "config_id", ",", "'output_dir'", ",", "config", ".", "output_dir", ",", "'---neagfsfdf'", ")", "\n", "config", ".", "import_json", "(", "training_defaul_json_dir", ")", "# bwbiufhjef training.py", "\n", "print", "(", "'import configuration in'", ",", "training_defaul_json_dir", ",", "'to cover config_default, as new default in training.py and inference.py'", ",", "'---ijodjoijfe'", ")", "\n", "print", "(", "'after json import default_model_config configurations'", ",", "'batch_size'", ",", "\n", "config", ".", "batch_size", ",", "'config id'", ",", "config", ".", "config_id", ",", "'output_dir'", ",", "config", ".", "output_dir", ",", "'---enreagfrfddf'", ")", "\n", "\n", "", "for", "json_path", "in", "args", ".", "config_json", ":", "\n", "        ", "print", "(", "'before json import args.config_json'", ",", "\n", "'batch_size'", ",", "config", ".", "batch_size", ",", "'config id'", ",", "config", ".", "config_id", ",", "'resume_from'", ",", "config", ".", "resume_from", ",", "'output_dir'", ",", "config", ".", "output_dir", ",", "'---nrgewwf'", ")", "\n", "config", ".", "import_json", "(", "json_path", ")", "\n", "print", "(", "'after json import args.config_json'", ",", "\n", "'batch_size'", ",", "config", ".", "batch_size", ",", "'config id'", ",", "config", ".", "config_id", ",", "'resume_from'", ",", "config", ".", "resume_from", ",", "'output_dir'", ",", "config", ".", "output_dir", ",", "'---aegvwefdwef'", ")", "\n", "\n", "# Apply configs passed through command line", "\n", "", "config", ".", "import_dict", "(", "{", "\n", "key", ".", "replace", "(", "'-'", ",", "'_'", ")", ":", "_convert_cli_arg_type", "(", "key", ",", "value", ")", "\n", "for", "key", ",", "value", "in", "vars", "(", "args", ")", ".", "items", "(", ")", "\n", "if", "value", "is", "not", "None", "and", "hasattr", "(", "config", ",", "key", ")", "\n", "}", ")", "\n", "\n", "# Improve reproducibility", "\n", "torch", ".", "manual_seed", "(", "0", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "0", ")", "\n", "if", "config", ".", "fully_reproducible", ":", "\n", "        ", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "", "np", ".", "random", ".", "seed", "(", "0", ")", "\n", "\n", "#print('\\nconfig', config.get_all_key_values(), '---efjjsjsj training.py')", "\n", "print", "(", "'final configurations'", ",", "'batch_size'", ",", "config", ".", "batch_size", ",", "\n", "'config id'", ",", "config", ".", "config_id", ",", "'resume_from'", ",", "config", ".", "resume_from", ",", "config", ".", "refine_net_enabled", ",", "'output_dir'", ",", "config", ".", "output_dir", ",", "'---eafefwefr training.py'", ")", "\n", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.training.init_datasets": [[141, 196], ["collections.OrderedDict", "collections.OrderedDict", "dataset_class", "torch.utils.data.DataLoader", "logger.info", "logger.info", "dataset_class", "torch.utils.data.DataLoader", "logger.info", "logger.info", "len", "torch.utils.data.Subset", "logger.info", "len", "sorted", "len", "len", "numpy.random.permutation", "len"], "function", ["None"], ["", "def", "init_datasets", "(", "train_specs", ",", "test_specs", ")", ":", "\n", "\n", "# Initialize training datasets", "\n", "    ", "train_data", "=", "OrderedDict", "(", ")", "\n", "for", "tag", ",", "dataset_class", ",", "path", ",", "stimuli", ",", "cameras", "in", "train_specs", ":", "\n", "        ", "dataset", "=", "dataset_class", "(", "path", ",", "\n", "cameras_to_use", "=", "cameras", ",", "\n", "types_of_stimuli", "=", "stimuli", ")", "\n", "dataset", ".", "original_full_dataset", "=", "dataset", "\n", "dataloader", "=", "DataLoader", "(", "dataset", ",", "\n", "batch_size", "=", "config", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "drop_last", "=", "True", ",", "\n", "num_workers", "=", "config", ".", "train_data_workers", ",", "\n", "pin_memory", "=", "True", ",", "\n", ")", "\n", "train_data", "[", "tag", "]", "=", "{", "\n", "'dataset'", ":", "dataset", ",", "\n", "'dataloader'", ":", "dataloader", ",", "\n", "}", "\n", "logger", ".", "info", "(", "'> Ready to use training dataset: %s'", "%", "tag", ")", "\n", "logger", ".", "info", "(", "'          with number of videos: %d'", "%", "len", "(", "dataset", ")", ")", "\n", "\n", "# Initialize test datasets", "\n", "", "test_data", "=", "OrderedDict", "(", ")", "\n", "for", "tag", ",", "dataset_class", ",", "path", ",", "stimuli", ",", "cameras", "in", "test_specs", ":", "\n", "# Get the full dataset", "\n", "        ", "dataset", "=", "dataset_class", "(", "path", ",", "\n", "cameras_to_use", "=", "cameras", ",", "\n", "types_of_stimuli", "=", "stimuli", ",", "\n", "live_validation", "=", "True", ")", "\n", "dataset", ".", "original_full_dataset", "=", "dataset", "\n", "# then subsample datasets for quicker testing", "\n", "num_subset", "=", "config", ".", "test_num_samples", "\n", "if", "len", "(", "dataset", ")", ">", "num_subset", ":", "\n", "            ", "subset", "=", "Subset", "(", "dataset", ",", "sorted", "(", "np", ".", "random", ".", "permutation", "(", "len", "(", "dataset", ")", ")", "[", ":", "num_subset", "]", ")", ")", "\n", "subset", ".", "original_full_dataset", "=", "dataset", "\n", "dataset", "=", "subset", "\n", "", "dataloader", "=", "DataLoader", "(", "dataset", ",", "\n", "batch_size", "=", "config", ".", "test_batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "config", ".", "test_data_workers", ",", "\n", "pin_memory", "=", "True", ",", "\n", ")", "\n", "test_data", "[", "tag", "]", "=", "{", "\n", "'dataset'", ":", "dataset", ",", "\n", "'dataset_class'", ":", "dataset_class", ",", "\n", "'dataset_path'", ":", "path", ",", "\n", "'dataloader'", ":", "dataloader", ",", "\n", "}", "\n", "logger", ".", "info", "(", "'> Ready to use evaluation dataset: %s'", "%", "tag", ")", "\n", "logger", ".", "info", "(", "'           with number of entries: %d'", "%", "len", "(", "dataset", ".", "original_full_dataset", ")", ")", "\n", "if", "dataset", ".", "original_full_dataset", "!=", "dataset", ":", "\n", "            ", "logger", ".", "info", "(", "'     of which we evaluate on just: %d'", "%", "len", "(", "dataset", ")", ")", "\n", "", "", "return", "train_data", ",", "test_data", "\n", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.training.setup_common": [[197, 256], ["print", "core.Tensorboard", "logging.getLogger", "logging.FileHandler", "logging.FileHandler.setFormatter", "logging.getLogger.addHandler", "sum", "logger.info", "core.CheckpointManager", "len", "os.path.isdir", "os.makedirs", "len", "config.write_file_contents", "logging.getLogger.removeHandler", "len", "model.checkpoint_manager.load_last_checkpoint", "numpy.prod", "config.resume_from.split", "p.size", "filter", "hashlib.md5().hexdigest", "model.parameters", "time.strftime", "hashlib.md5", "config.get_full_json().encode", "config.get_full_json"], "function", ["home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.config_default.DefaultConfig.write_file_contents", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.checkpoint_manager.CheckpointManager.load_last_checkpoint", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.config_default.DefaultConfig.get_full_json"], ["", "def", "setup_common", "(", "model", ",", "optimizers", ")", ":", "\n", "    ", "identifier", "=", "(", "model", ".", "__class__", ".", "__name__", "+", "\n", "config", ".", "identifier_suffix", "+", "'/'", "+", "\n", "time", ".", "strftime", "(", "'%y%m%d_%H%M%S'", ")", "+", "'.'", "+", "\n", "hashlib", ".", "md5", "(", "config", ".", "get_full_json", "(", ")", ".", "encode", "(", "'utf-8'", ")", ")", ".", "hexdigest", "(", ")", "[", ":", "6", "]", "+", "'.'", "+", "\n", "config", ".", "training_version", "\n", ")", "# wjeoijoiji training.py", "\n", "\n", "if", "len", "(", "config", ".", "resume_from", ")", ">", "0", ":", "\n", "        ", "identifier", "=", "'/'", ".", "join", "(", "config", ".", "resume_from", ".", "split", "(", "'/'", ")", "[", "-", "2", ":", "]", ")", "\n", "output_dir", "=", "config", ".", "resume_from", "\n", "", "else", ":", "\n", "        ", "output_dir", "=", "'../outputs/'", "+", "identifier", "\n", "\n", "", "print", "(", "identifier", ",", "output_dir", ",", "'---noiwjfioj'", ")", "\n", "\n", "# Initialize tensorboard", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "output_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "output_dir", ")", "\n", "", "tensorboard", "=", "Tensorboard", "(", "output_dir", ")", "\n", "\n", "# Write source code to output dir", "\n", "# NOTE: do not over-write if resuming from an output directory", "\n", "if", "len", "(", "config", ".", "resume_from", ")", "==", "0", ":", "\n", "        ", "config", ".", "write_file_contents", "(", "output_dir", ")", "\n", "\n", "# Log messages to file", "\n", "", "root_logger", "=", "logging", ".", "getLogger", "(", ")", "\n", "file_handler", "=", "logging", ".", "FileHandler", "(", "output_dir", "+", "'/messages.log'", ")", "\n", "file_handler", ".", "setFormatter", "(", "root_logger", ".", "handlers", "[", "0", "]", ".", "formatter", ")", "\n", "for", "handler", "in", "root_logger", ".", "handlers", "[", "1", ":", "]", ":", "# all except stdout", "\n", "        ", "root_logger", ".", "removeHandler", "(", "handler", ")", "\n", "", "root_logger", ".", "addHandler", "(", "file_handler", ")", "\n", "\n", "# Print model details", "\n", "num_params", "=", "sum", "(", "[", "\n", "np", ".", "prod", "(", "p", ".", "size", "(", ")", ")", "\n", "for", "p", "in", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "model", ".", "parameters", "(", ")", ")", "\n", "]", ")", "\n", "logger", ".", "info", "(", "'\\nThere are %d trainable parameters.\\n'", "%", "num_params", ")", "\n", "\n", "# Cache base and target learning rate for each optimizer", "\n", "for", "optimizer", "in", "optimizers", ":", "\n", "        ", "optimizer", ".", "target_lr", "=", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "\n", "optimizer", ".", "base_lr", "=", "optimizer", ".", "target_lr", "/", "config", ".", "batch_size", "\n", "\n", "# Sneak in some extra information into the model class instance", "\n", "", "model", ".", "identifier", "=", "identifier", "\n", "model", ".", "output_dir", "=", "output_dir", "\n", "model", ".", "checkpoint_manager", "=", "CheckpointManager", "(", "model", ",", "optimizers", ")", "\n", "# model.gsheet_logger = GoogleSheetLogger(model)", "\n", "model", ".", "last_epoch", "=", "0.0", "\n", "model", ".", "last_step", "=", "0", "\n", "\n", "# Load pre-trained model weights if available", "\n", "if", "len", "(", "config", ".", "resume_from", ")", ">", "0", ":", "\n", "        ", "model", ".", "last_step", "=", "model", ".", "checkpoint_manager", ".", "load_last_checkpoint", "(", ")", "\n", "\n", "", "return", "model", ",", "optimizers", ",", "tensorboard", "\n", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.training.salvage_memory": [[258, 262], ["torch.cuda.empty_cache", "torch.cuda.empty_cache", "gc.collect"], "function", ["None"], ["", "def", "salvage_memory", "(", ")", ":", "\n", "    ", "\"\"\"Try to free whatever memory that can be freed.\"\"\"", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "gc", ".", "collect", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.training.get_training_batches": [[264, 296], ["train_data_dicts.items", "out[].items", "iter", "isinstance", "next", "v.detach", "print", "training.salvage_memory", "iter", "[].to", "[].cuda"], "function", ["home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.training.salvage_memory"], ["", "def", "get_training_batches", "(", "train_data_dicts", ")", ":", "\n", "    ", "\"\"\"Get training batches of data from all training data sources.\"\"\"", "\n", "out", "=", "{", "}", "\n", "for", "tag", ",", "data_dict", "in", "train_data_dicts", ".", "items", "(", ")", ":", "\n", "        ", "if", "'data_iterator'", "not", "in", "data_dict", ":", "\n", "            ", "data_dict", "[", "'data_iterator'", "]", "=", "iter", "(", "data_dict", "[", "'dataloader'", "]", ")", "\n", "# Try to get data", "\n", "", "while", "True", ":", "\n", "            ", "try", ":", "\n", "# p0 = time.time()", "\n", "                ", "out", "[", "tag", "]", "=", "next", "(", "data_dict", "[", "'data_iterator'", "]", ")", "\n", "# p1 = time.time()", "\n", "# print('get_training_batches()', tag, 'costs', round(p1 - p0, 3), '---miejiojio')", "\n", "break", "\n", "", "except", "StopIteration", ":", "\n", "                ", "print", "(", "'get_training_batches() failed to get'", ",", "tag", ",", "'---nbijfjefu'", ")", "\n", "del", "data_dict", "[", "'data_iterator'", "]", "\n", "salvage_memory", "(", ")", "\n", "data_dict", "[", "'data_iterator'", "]", "=", "iter", "(", "data_dict", "[", "'dataloader'", "]", ")", "\n", "\n", "# Move tensors to GPU", "\n", "", "", "for", "k", ",", "v", "in", "out", "[", "tag", "]", ".", "items", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "v", ",", "torch", ".", "Tensor", ")", ":", "\n", "                ", "out", "[", "tag", "]", "[", "k", "]", "=", "v", ".", "detach", "(", ")", "\n", "if", "k", "!=", "'screen_full_frame'", ":", "\n", "                    ", "if", "not", "config", ".", "multi_gpu", ":", "\n", "                        ", "out", "[", "tag", "]", "[", "k", "]", "=", "out", "[", "tag", "]", "[", "k", "]", ".", "to", "(", "device", ",", "non_blocking", "=", "True", ")", "\n", "", "else", ":", "\n", "                        ", "out", "[", "tag", "]", "[", "k", "]", "=", "out", "[", "tag", "]", "[", "k", "]", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "", "", "", "else", ":", "\n", "                ", "out", "[", "tag", "]", "[", "k", "]", "=", "v", "\n", "", "", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.training.test_model_on_all": [[298, 365], ["model.eval", "training.salvage_memory", "test_data_dicts.items", "training.salvage_memory", "logger.info", "torch.no_grad", "torch.no_grad", "len", "enumerate", "tensorboard.update_current_step", "final_out[].items", "input_data.items", "model", "dict", "dict.items", "tensorboard.add_scalar", "isinstance", "dict", "next", "tensorboard.add_image", "iter", "v.detach().to", "v.detach().cuda", "model.items", "vutils.make_grid", "input_data.values", "v.detach().cpu().numpy", "v.dim", "dict.keys", "sorted", "v.detach", "v.detach", "batch_out[].detach", "final_out[].keys", "v.detach().cpu", "v.detach"], "function", ["home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.training.salvage_memory", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.training.salvage_memory", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.tensorboard.Tensorboard.update_current_step", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.tensorboard.Tensorboard.add_scalar", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.tensorboard.Tensorboard.add_image"], ["", "def", "test_model_on_all", "(", "model", ",", "test_data_dicts", ",", "current_step", ",", "tensorboard", "=", "None", ",", "log_key_prefix", "=", "'test'", ")", ":", "\n", "    ", "\"\"\"Get training batches of data from all training data sources.\"\"\"", "\n", "model", ".", "eval", "(", ")", "\n", "salvage_memory", "(", ")", "\n", "final_out", "=", "{", "}", "\n", "for", "tag", ",", "data_dict", "in", "test_data_dicts", ".", "items", "(", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "num_entries", "=", "len", "(", "data_dict", "[", "'dataset'", "]", ")", "\n", "for", "i", ",", "input_data", "in", "enumerate", "(", "data_dict", "[", "'dataloader'", "]", ")", ":", "\n", "                ", "batch_size", "=", "next", "(", "iter", "(", "input_data", ".", "values", "(", ")", ")", ")", ".", "shape", "[", "0", "]", "\n", "\n", "# Move tensors to GPU", "\n", "for", "k", ",", "v", "in", "input_data", ".", "items", "(", ")", ":", "\n", "                    ", "if", "isinstance", "(", "v", ",", "torch", ".", "Tensor", ")", ":", "\n", "                        ", "if", "not", "config", ".", "multi_gpu", ":", "\n", "                            ", "input_data", "[", "k", "]", "=", "v", ".", "detach", "(", ")", ".", "to", "(", "device", ",", "non_blocking", "=", "True", ")", "\n", "", "else", ":", "\n", "                            ", "input_data", "[", "k", "]", "=", "v", ".", "detach", "(", ")", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "# Inference", "\n", "", "", "", "batch_out", "=", "model", "(", "input_data", ",", "create_images", "=", "(", "i", "==", "0", ")", ")", "\n", "weighted_batch_out", "=", "dict", "(", "[", "\n", "(", "k", ",", "v", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "*", "(", "batch_size", "/", "num_entries", ")", ")", "\n", "for", "k", ",", "v", "in", "batch_out", ".", "items", "(", ")", "if", "v", ".", "dim", "(", ")", "==", "0", "\n", "]", ")", "\n", "if", "tag", "not", "in", "final_out", ":", "\n", "                    ", "final_out", "[", "tag", "]", "=", "dict", "(", "[", "(", "k", ",", "0.0", ")", "for", "k", "in", "weighted_batch_out", ".", "keys", "(", ")", "]", ")", "\n", "", "for", "k", ",", "v", "in", "weighted_batch_out", ".", "items", "(", ")", ":", "\n", "                    ", "final_out", "[", "tag", "]", "[", "k", "]", "+=", "v", "\n", "\n", "# Log images", "\n", "", "if", "i", "==", "0", ":", "\n", "                    ", "assert", "tensorboard", "\n", "if", "'images'", "in", "batch_out", ":", "\n", "                        ", "import", "torchvision", ".", "utils", "as", "vutils", "\n", "tensorboard", ".", "add_image", "(", "\n", "log_key_prefix", "+", "'_%s/images'", "%", "tag", ",", "\n", "vutils", ".", "make_grid", "(", "batch_out", "[", "'images'", "]", ".", "detach", "(", ")", "[", ":", "8", ",", ":", "]", ",", "\n", "nrow", "=", "1", ",", "# One entry per row", "\n", "padding", "=", "20", ",", "\n", "normalize", "=", "True", ",", "\n", "scale_each", "=", "True", ",", "\n", ")", "\n", ")", "\n", "\n", "# Calculate mean error over whole dataset", "\n", "", "", "", "", "logger", ".", "info", "(", "'%10s test: %s'", "%", "(", "'[%s]'", "%", "tag", ",", "\n", "', '", ".", "join", "(", "[", "'%s: %.4g'", "%", "(", "k", ",", "final_out", "[", "tag", "]", "[", "k", "]", ")", "\n", "for", "k", "in", "sorted", "(", "final_out", "[", "tag", "]", ".", "keys", "(", ")", ")", "]", ")", ")", ")", "\n", "\n", "# Write to tensorboard", "\n", "if", "tensorboard", ":", "\n", "            ", "tensorboard", ".", "update_current_step", "(", "current_step", ")", "\n", "for", "k", ",", "v", "in", "final_out", "[", "tag", "]", ".", "items", "(", ")", ":", "\n", "                ", "tensorboard", ".", "add_scalar", "(", "log_key_prefix", "+", "'_%s/%s'", "%", "(", "tag", ",", "k", ")", ",", "v", ")", "\n", "\n", "# Log training metrics to Google Sheets", "\n", "", "", "", "for_gsheet", "=", "None", "\n", "# if model.gsheet_logger.ready:", "\n", "#     for_gsheet = {}", "\n", "#     for tag, out in final_out.items():", "\n", "#         for k, v in out.items():", "\n", "#             for_gsheet[log_key_prefix + '/%s/%s' % (tag, k)] = v", "\n", "\n", "# Free up memory", "\n", "salvage_memory", "(", ")", "\n", "\n", "return", "final_out", ",", "for_gsheet", "\n", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.training.do_final_full_test": [[367, 412], ["test_data.items", "logger.info", "logger.info", "logger.info", "training.test_model_on_all", "test_data.items", "test_data.items", "training.salvage_memory", "torch.utils.data.DataLoader", "logger.info", "logger.info", "model.gsheet_logger.update_or_append_row", "len"], "function", ["home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.training.test_model_on_all", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.training.salvage_memory", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.gsheet_logger.GoogleSheetLogger.update_or_append_row"], ["", "def", "do_final_full_test", "(", "model", ",", "test_data", ",", "tensorboard", ")", ":", "\n", "    ", "previously_registered_dataset_classes", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "test_data", ".", "items", "(", ")", ":", "\n", "# Get the full dataset", "\n", "        ", "if", "'dataloader'", "in", "test_data", "[", "k", "]", ":", "\n", "            ", "del", "v", "[", "'dataloader'", "]", "\n", "", "full_original_dataset", "=", "v", "[", "'dataset'", "]", ".", "original_full_dataset", "\n", "previously_registered_dataset_classes", "[", "k", "]", "=", "v", "[", "'dataset'", "]", "\n", "new_dataset", "=", "v", "[", "'dataset_class'", "]", "(", "\n", "v", "[", "'dataset_path'", "]", ",", "\n", "cameras_to_use", "=", "full_original_dataset", ".", "cameras_to_use", ",", "\n", "types_of_stimuli", "=", "full_original_dataset", ".", "types_of_stimuli", ",", "\n", "is_final_test", "=", "True", ",", "\n", ")", "\n", "test_data", "[", "k", "]", "[", "'dataset'", "]", "=", "new_dataset", "\n", "test_data", "[", "k", "]", "[", "'dataloader'", "]", "=", "DataLoader", "(", "new_dataset", ",", "\n", "batch_size", "=", "config", ".", "full_test_batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "config", ".", "full_test_data_workers", ",", "\n", "pin_memory", "=", "True", ",", "\n", ")", "\n", "logger", ".", "info", "(", "'> Ready to do full test on dataset: %s'", "%", "k", ")", "\n", "logger", ".", "info", "(", "'          with number of sequences: %d'", "%", "len", "(", "new_dataset", ")", ")", "\n", "\n", "", "logger", ".", "info", "(", "'# Now beginning full test on all evaluation sets.'", ")", "\n", "logger", ".", "info", "(", "'# Hold on tight, this might take a while.'", ")", "\n", "logger", ".", "info", "(", "'#'", ")", "\n", "final_out", ",", "for_gsheet", "=", "test_model_on_all", "(", "model", ",", "test_data", ",", "model", ".", "last_step", "+", "2", ",", "\n", "tensorboard", "=", "tensorboard", ",", "\n", "log_key_prefix", "=", "'full_test'", ")", "\n", "\n", "# Restore dataset class", "\n", "for", "k", ",", "v", "in", "test_data", ".", "items", "(", ")", ":", "\n", "        ", "test_data", "[", "k", "]", "[", "'dataset'", "]", "=", "previously_registered_dataset_classes", "[", "k", "]", "\n", "\n", "# Clean up dataloaders", "\n", "", "for", "k", ",", "v", "in", "test_data", ".", "items", "(", ")", ":", "\n", "        ", "del", "v", "[", "'dataloader'", "]", "\n", "\n", "# Log training metrics to Google Sheets", "\n", "", "if", "for_gsheet", "is", "not", "None", ":", "\n", "        ", "model", ".", "gsheet_logger", ".", "update_or_append_row", "(", "for_gsheet", ")", "\n", "\n", "# Free memory", "\n", "", "salvage_memory", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.training.learning_rate_schedule": [[414, 451], ["int", "training.step_modulo", "int", "tensorboard_log_func", "float", "float", "numpy.power", "numpy.power"], "function", ["home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.training.step_modulo"], ["", "def", "learning_rate_schedule", "(", "optimizer", ",", "epoch_len", ",", "tensorboard_log_func", ",", "step", ")", ":", "\n", "    ", "num_warmup_steps", "=", "int", "(", "epoch_len", "*", "config", ".", "num_warmup_epochs", ")", "\n", "selected_lr", "=", "None", "\n", "if", "step", "<", "num_warmup_steps", ":", "\n", "        ", "b", "=", "optimizer", ".", "base_lr", "\n", "a", "=", "(", "optimizer", ".", "target_lr", "-", "b", ")", "/", "float", "(", "num_warmup_steps", ")", "\n", "selected_lr", "=", "a", "*", "step", "+", "b", "\n", "", "else", ":", "\n", "# Decay learning rate with step function and exponential decrease?", "\n", "        ", "new_step", "=", "step", "-", "num_warmup_steps", "\n", "epoch", "=", "new_step", "/", "float", "(", "epoch_len", ")", "\n", "current_interval", "=", "int", "(", "epoch", "/", "config", ".", "lr_decay_epoch_interval", ")", "\n", "if", "config", ".", "lr_decay_strategy", "==", "'exponential'", ":", "\n", "# Step function decay", "\n", "            ", "selected_lr", "=", "optimizer", ".", "target_lr", "*", "np", ".", "power", "(", "config", ".", "lr_decay_factor", ",", "current_interval", ")", "\n", "", "elif", "config", ".", "lr_decay_strategy", "==", "'cyclic'", ":", "\n", "# Note, we start from the up state (due to previous warmup stage)", "\n", "# so each period consists of down-up (not up-down)", "\n", "            ", "peak_a", "=", "optimizer", ".", "target_lr", "*", "np", ".", "power", "(", "config", ".", "lr_decay_factor", ",", "current_interval", ")", "\n", "peak_b", "=", "peak_a", "*", "config", ".", "lr_decay_factor", "\n", "half_interval", "=", "0.5", "*", "config", ".", "lr_decay_epoch_interval", "\n", "current_interval_start", "=", "current_interval", "*", "config", ".", "lr_decay_epoch_interval", "\n", "current_interval_half", "=", "current_interval_start", "+", "half_interval", "\n", "if", "epoch", "<", "current_interval_half", ":", "\n", "# negative slope (down from peak_a)", "\n", "                ", "slope", "=", "-", "(", "peak_a", "-", "optimizer", ".", "base_lr", ")", "/", "half_interval", "\n", "", "else", ":", "\n", "# positive slope (up to peak_b)", "\n", "                ", "slope", "=", "(", "peak_b", "-", "optimizer", ".", "base_lr", ")", "/", "half_interval", "\n", "", "selected_lr", "=", "slope", "*", "(", "epoch", "-", "current_interval_half", ")", "+", "optimizer", ".", "base_lr", "\n", "", "else", ":", "\n", "            ", "selected_lr", "=", "optimizer", ".", "target_lr", "\n", "\n", "# Log to Tensorboard and return", "\n", "", "", "if", "step_modulo", "(", "step", ",", "config", ".", "tensorboard_learning_rate_every_n_steps", ")", ":", "\n", "        ", "tensorboard_log_func", "(", "selected_lr", ")", "\n", "", "return", "selected_lr", "\n", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.training.step_modulo": [[453, 455], ["None"], "function", ["None"], ["", "def", "step_modulo", "(", "current", ",", "interval_size", ")", ":", "\n", "    ", "return", "current", "%", "interval_size", "==", "(", "interval_size", "-", "1", ")", "\n", "# return current % interval_size == 0", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.training.main_loop_iterator": [[458, 742], ["print", "numpy.amax", "int", "int", "model.train", "print", "time.time", "range", "model.checkpoint_manager.save_at_step", "model.checkpoint_manager.save_at_step", "training.salvage_memory", "list", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "time.time", "tensorboard.update_current_step", "time.time", "training.get_training_batches", "time.time", "model.train", "time.time", "training.step_modulo", "time.time", "model", "torch.cuda.device_count", "torch.cuda.device_count", "time.time", "print", "zip", "enumerate", "training.step_modulo", "training.step_modulo", "training.step_modulo", "tensorboard.update_current_step", "list", "list", "train_data.keys", "len", "functools.partial", "enumerate", "optimizer.zero_grad", "do_before_forward_pass", "round", "round", "round", "round", "round", "round", "len", "len", "zip", "print", "torch.mean.backward", "clip_func", "optimizer.step", "dict", "model.checkpoint_manager.save_at_step_training_results", "enumerate", "logger.info", "training.step_modulo", "dict.items", "model.checkpoint_manager.save_at_step", "training.test_model_on_all", "model.checkpoint_manager.save_at_step_testing_results", "training.salvage_memory", "lr_scheduler.step", "train_data.items", "test_data.items", "v[].__del__", "train_data.values", "functools.partial", "valid_loss_terms.append", "valid_optimizers.append", "isinstance", "torch.mean", "torch.mean", "model.parameters", "dict.items", "tensorboard.add_scalar", "training.step_modulo", "numpy.any", "training.cleanup_and_quit", "dict.items", "len", "torch.mean().detach().cpu().numpy", "torch.mean().detach().cpu().numpy", "key.startswith", "images_to_log_to_tensorboard.items", "numpy.isnan", "logger.error", "torch.mean().detach().cpu().numpy", "torch.mean().detach().cpu().numpy", "model.items", "tensorboard.add_scalar", "key.startswith", "tensorboard.add_image", "v.dim", "torch.mean().detach().cpu", "torch.mean().detach().cpu", "tensorboard.add_scalar", "tensorboard.add_scalar", "torch.mean().detach().cpu", "torch.mean().detach().cpu", "dict.keys", "len", "torch.mean().detach", "torch.mean().detach", "len", "torch.mean().detach", "torch.mean().detach", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "function", ["home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.checkpoint_manager.CheckpointManager.save_at_step", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.checkpoint_manager.CheckpointManager.save_at_step", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.training.salvage_memory", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.tensorboard.Tensorboard.update_current_step", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.training.get_training_batches", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.training.step_modulo", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.training.step_modulo", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.training.step_modulo", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.training.step_modulo", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.tensorboard.Tensorboard.update_current_step", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.checkpoint_manager.CheckpointManager.save_at_step_training_results", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.training.step_modulo", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.checkpoint_manager.CheckpointManager.save_at_step", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.training.test_model_on_all", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.checkpoint_manager.CheckpointManager.save_at_step_testing_results", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.training.salvage_memory", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.tensorboard.Tensorboard.__del__", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.tensorboard.Tensorboard.add_scalar", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.training.step_modulo", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.training.cleanup_and_quit", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.tensorboard.Tensorboard.add_scalar", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.tensorboard.Tensorboard.add_image", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.tensorboard.Tensorboard.add_scalar", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.tensorboard.Tensorboard.add_scalar"], ["", "def", "main_loop_iterator", "(", "model", ",", "optimizers", ",", "train_data", ",", "test_data", ",", "tensorboard", "=", "None", ",", "do_before_forward_pass", "=", "None", ")", ":", "\n", "# Skip this entirely if requested", "\n", "    ", "if", "config", ".", "skip_training", ":", "\n", "        ", "return", "\n", "", "print", "(", "'main loop entered'", ",", "config", ".", "skip_training", ",", "tensorboard", "is", "None", ",", "list", "(", "train_data", ".", "keys", "(", ")", ")", ",", "'---jjjieiiid'", ")", "\n", "assert", "tensorboard", "is", "not", "None", "# We assume this exists in LR schedule logging", "\n", "initial_step", "=", "model", ".", "last_step", "# Allow resuming", "\n", "max_dataset_len", "=", "np", ".", "amax", "(", "[", "len", "(", "data_dict", "[", "'dataset'", "]", ")", "for", "data_dict", "in", "train_data", ".", "values", "(", ")", "]", ")", "\n", "num_steps_per_epoch", "=", "int", "(", "max_dataset_len", "/", "config", ".", "batch_size", ")", "\n", "num_training_steps", "=", "int", "(", "config", ".", "num_epochs", "*", "num_steps_per_epoch", ")", "\n", "lr_schedulers", "=", "[", "\n", "torch", ".", "optim", ".", "lr_scheduler", ".", "LambdaLR", "(", "\n", "optimizer", ",", "\n", "functools", ".", "partial", "(", "learning_rate_schedule", ",", "optimizer", ",", "num_steps_per_epoch", ",", "\n", "functools", ".", "partial", "(", "tensorboard", ".", "add_scalar", ",", "'lr/optim_%d'", "%", "i", ")", ")", ",", "\n", ")", "for", "i", ",", "optimizer", "in", "enumerate", "(", "optimizers", ")", "\n", "]", "\n", "model", ".", "train", "(", ")", "\n", "current_step", "=", "0", "\n", "# training_result_list = []", "\n", "print", "(", "'main_loop_iterator'", ",", "max_dataset_len", ",", "num_steps_per_epoch", ",", "'starts training from'", ",", "initial_step", ",", "'to'", ",", "num_training_steps", ",", "'---nvjjieijj'", ")", "\n", "p_training_start", "=", "time", ".", "time", "(", ")", "\n", "for", "current_step", "in", "range", "(", "initial_step", ",", "num_training_steps", ")", ":", "\n", "        ", "p0", "=", "time", ".", "time", "(", ")", "\n", "# print('main_loop_iterator() enter training loop', current_step, '---jiojijfj')", "\n", "current_epoch", "=", "(", "current_step", "*", "config", ".", "batch_size", ")", "/", "max_dataset_len", "# fractional value", "\n", "tensorboard", ".", "update_current_step", "(", "current_step", "+", "1", ")", "\n", "# print('main_loop_iterator() enter training loop, snap before get_training_batches(train_data)', current_step, current_epoch, '---uhgujfeij')", "\n", "#monitor_ram(landmark='before loading input data ---fhwiuhieu')", "\n", "pdata0", "=", "time", ".", "time", "(", ")", "\n", "input_data", "=", "get_training_batches", "(", "train_data", ")", "\n", "pdata1", "=", "time", ".", "time", "(", ")", "\n", "# print('get_training_batches()', tag, 'costs', round(pdata1 - pdata0, 3), '---miejiojio')", "\n", "#monitor_ram(landmark='step ' + str(current_step) + ' after loading input data ---ncounjfed')", "\n", "\n", "# Set correct states before training iteration", "\n", "# print('main_loop_iterator() enter training loop, snap before model.train()', 'to be added', '---nbfjiej')", "\n", "model", ".", "train", "(", ")", "\n", "# print('main_loop_iterator() enter training loop, snap after model.train()', '---waragff')", "\n", "for", "optimizer", "in", "optimizers", ":", "\n", "            ", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "# If routine defined for before forward pass, do it", "\n", "", "if", "do_before_forward_pass", ":", "\n", "            ", "do_before_forward_pass", "(", "current_step", ")", "\n", "\n", "# Prepare keyword arguments to model inference", "\n", "\n", "\n", "# Forward pass and yield", "\n", "", "loss_terms", "=", "[", "]", "\n", "images_to_log_to_tensorboard", "=", "{", "}", "\n", "pp0", "=", "time", ".", "time", "(", ")", "\n", "\n", "\n", "# model.forward_kwargs = forward_kwargs", "\n", "# forward_kwargs = {", "\n", "#     'create_images': step_modulo(current_step, config.tensorboard_images_every_n_steps),", "\n", "#     'current_epoch': current_epoch,", "\n", "# }", "\n", "create_images", "=", "step_modulo", "(", "current_step", ",", "config", ".", "tensorboard_images_every_n_steps", ")", "\n", "# print(device, current_epoch, create_images, '---njfiejffj training.py')", "\n", "\n", "pp1", "=", "time", ".", "time", "(", ")", "\n", "outputs", "=", "model", "(", "input_data", ",", "current_epoch", "=", "current_epoch", ",", "create_images", "=", "create_images", ")", "\n", "# if not config.multi_gpu:", "\n", "#     model.forward_kwargs = forward_kwargs", "\n", "#     outputs = model(input_data)", "\n", "# else:", "\n", "#     device_ids = config.device_ids", "\n", "#     output_device = device_ids[0]", "\n", "#     model.forward_kwargs = forward_kwargs #TODO: add forward keyword arguments as model attribute", "\n", "#     replicas = nn.parallel.replicate(model, device_ids)", "\n", "#", "\n", "#     #input_all = (input_data, **forward_kwargs)", "\n", "#     inputs = nn.parallel.scatter(input_data, device_ids)", "\n", "#", "\n", "#", "\n", "#     replicas = replicas[:len(inputs)]", "\n", "#     print([type(r) for r in replicas], '---bjefeoijij')", "\n", "#     print(model.peek_dict(input_data, '---efjij'), '---nnjjiejfi')", "\n", "#     for ii, inp in enumerate(inputs):", "\n", "#         print('input', ii, model.peek_dict(inp, '---nxxxxj'), '---w0fijrifj')", "\n", "#     #raise", "\n", "#", "\n", "#     ta = nn.parallel.parallel_apply(replicas, inputs)", "\n", "#     outputs = nn.parallel.gather(ta, output_device)", "\n", "\n", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "\n", "# print('main_loop_iterator() enter training loop,', 'snap before yield', loss_terms, '    |||||||     ', outputs, '---jiwejfi')", "\n", "# Time monitoring", "\n", "p1", "=", "time", ".", "time", "(", ")", "\n", "\n", "# print('get_training_batches()', tag, 'costs', round(pdata1 - pdata0, 3), '---miejiojio')", "\n", "# print('step', current_step, 'model forward costs', round(p1 - pp0, 3), '---nbfhujeij')", "\n", "time_cost_this_step", "=", "p1", "-", "p0", "\n", "time_cost_till_now", "=", "p1", "-", "p_training_start", "\n", "steps_remaining", "=", "num_training_steps", "-", "current_step", "\n", "time_remaining", "=", "time_cost_till_now", "/", "(", "current_step", "-", "initial_step", "+", "1", ")", "*", "steps_remaining", "\n", "time_cost_fetch_batch", "=", "pdata1", "-", "pdata0", "\n", "time_cost_model_forward", "=", "p1", "-", "pp0", "\n", "\n", "## store results aside tensorboard", "\n", "# outputs_key_str = 'losses_and_metrics'", "\n", "# if outputs_key_str not in model.checkpoint_manager.history_stats.keys(): model.checkpoint_manager.history_stats[outputs_key_str] = {}", "\n", "# model.checkpoint_manager.history_stats[outputs_key_str][current_step] = outputs", "\n", "# training_result_list.append((current_step, outputs.items()))", "\n", "# print('loss term size before yield', len(loss_terms), loss_terms, '---jgqwewr')", "\n", "# print('monitor history_stats()', current_step, list(model.checkpoint_manager.history_stats['losses_and_metrics'].keys()), '---nwfiuuiuii')", "\n", "\n", "yield", "current_step", ",", "loss_terms", ",", "outputs", ",", "images_to_log_to_tensorboard", ",", "time_cost_this_step", ",", "steps_remaining", ",", "time_remaining", ",", "time_cost_fetch_batch", ",", "time_cost_model_forward", "\n", "\n", "print", "(", "'step'", ",", "current_step", ",", "'costs time'", ",", "round", "(", "time_cost_this_step", ",", "2", ")", ",", "\n", "'(get_data_batch()'", ",", "round", "(", "time_cost_fetch_batch", ",", "2", ")", ",", "'+ forward()'", ",", "round", "(", "time_cost_model_forward", ",", "2", ")", ",", "round", "(", "pp1", "-", "pp0", ",", "2", ")", ",", "round", "(", "p1", "-", "pp1", ",", "2", ")", ",", "')    '", ",", "\n", "'steps remaining:'", ",", "steps_remaining", ",", "', time remaining:'", ",", "round", "(", "time_remaining", "/", "3600", ",", "1", ")", ",", "\n", "'hours'", ",", "'---gerefrf training.py'", ")", "# ; loss:', outputs['full_loss'], '---kfijhguehf')", "\n", "\n", "# There should be as many loss terms as there are optimizers!", "\n", "assert", "len", "(", "loss_terms", ")", "==", "len", "(", "optimizers", ")", "\n", "# print('loss term size after yield (loss[full_loss] already added in train.py)', len(loss_terms), loss_terms, '---j23rwefij')", "\n", "\n", "# Prune out None values", "\n", "valid_loss_terms", "=", "[", "]", "\n", "valid_optimizers", "=", "[", "]", "\n", "for", "loss_term", ",", "optimizer", "in", "zip", "(", "loss_terms", ",", "optimizers", ")", ":", "\n", "            ", "if", "loss_term", "is", "not", "None", ":", "\n", "#print('loss term', loss_term, '---jjejjieii training.py')", "\n", "                ", "valid_loss_terms", ".", "append", "(", "loss_term", ")", "\n", "valid_optimizers", ".", "append", "(", "optimizer", ")", "\n", "# print('main_loop_iterator() proceed y1.3', valid_loss_terms, valid_optimizers, '---ergrgr')", "\n", "# Perform gradient calculations for each loss term", "\n", "", "", "for", "i", ",", "(", "loss", ",", "optimizer", ")", "in", "enumerate", "(", "zip", "(", "valid_loss_terms", ",", "valid_optimizers", ")", ")", ":", "\n", "            ", "not_last", "=", "i", "<", "(", "len", "(", "optimizers", ")", "-", "1", ")", "\n", "# print('main_loop_iterator() proceed y1.4', i, (loss, optimizer), not_last, isinstance(loss, torch.Tensor), '---bewfdsd')", "\n", "if", "not", "isinstance", "(", "loss", ",", "torch", ".", "Tensor", ")", ":", "\n", "                ", "continue", "\n", "# print('main_loop_iterator() proceed y1.45', type(loss), loss, '---mmiejji')", "\n", "#monitor_gpu_usage(landmark='before backward ---wnfjeifij')", "\n", "#monitor_ram(landmark='before backward ---agwwerwerr')", "\n", "# print('loss size', loss.size(), loss, loss.ndim, '---jwejijijj training.py')", "\n", "", "if", "loss", ".", "ndim", ">", "0", ":", "# if it's not a scaler", "\n", "                ", "loss", "=", "torch", ".", "mean", "(", "loss", ")", "\n", "", "print", "(", "'loss size'", ",", "loss", ",", "loss", ".", "ndim", ",", "'---vehuj training.py'", ")", "\n", "loss", ".", "backward", "(", "retain_graph", "=", "not_last", ")", "\n", "#monitor_gpu_usage(landmark='after backward ---jejfijioj')", "\n", "#monitor_ram(landmark='after backward ---vubiniowf')", "\n", "# print('main_loop_iterator() proceed y1.5', '---bewfdsd')", "\n", "# print('main_loop_iterator() proceed y1.6', '---jafsdf')", "\n", "# Maybe clip gradients", "\n", "", "if", "config", ".", "do_gradient_clipping", ":", "\n", "            ", "if", "config", ".", "gradient_clip_by", "==", "'norm'", ":", "\n", "                ", "clip_func", "=", "nn", ".", "utils", ".", "clip_grad_norm_", "\n", "", "elif", "config", ".", "gradient_clip_by", "==", "'value'", ":", "\n", "                ", "clip_func", "=", "nn", ".", "utils", ".", "clip_grad_value_", "\n", "", "clip_amount", "=", "config", ".", "gradient_clip_amount", "\n", "clip_func", "(", "model", ".", "parameters", "(", ")", ",", "clip_amount", ")", "\n", "# print('main_loop_iterator() proceed y2', '---gwfsfs')", "\n", "# Apply gradients", "\n", "", "for", "optimizer", "in", "valid_optimizers", ":", "\n", "            ", "optimizer", ".", "step", "(", ")", "\n", "\n", "# Print outputs", "\n", "", "if", "step_modulo", "(", "current_step", ",", "config", ".", "log_every_n_steps", ")", ":", "\n", "            ", "metrics", "=", "dict", "(", "[", "(", "k", ",", "torch", ".", "mean", "(", "v", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "for", "k", ",", "v", "in", "outputs", ".", "items", "(", ")", "\n", "if", "v", ".", "dim", "(", ")", "==", "0", "]", ")", "# wifjiojwjejfj training.py", "\n", "# seave training results", "\n", "model", ".", "checkpoint_manager", ".", "save_at_step_training_results", "(", "current_step", "+", "1", ",", "metrics", ")", "# jwijoijfeijff training.py", "\n", "for", "i", ",", "loss", "in", "enumerate", "(", "loss_terms", ")", ":", "# Add loss terms", "\n", "                ", "if", "loss", "is", "not", "None", ":", "\n", "                    ", "metrics", "[", "'loss_%d'", "%", "(", "i", "+", "1", ")", "]", "=", "torch", ".", "mean", "(", "loss", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "# if (current_step + 1 < 10) or (current_step + 1 % 10 == 0):", "\n", "# log = ('Step %d, Epoch %.2f> ' % (current_step + 1, current_epoch)", "\n", "#        + ', '.join(['%s: %.4g' % (k, metrics[k]) for k in sorted(metrics.keys())]))", "\n", "", "", "log", "=", "(", "'Step %d, Epoch %.2f> '", "%", "(", "current_step", "+", "1", ",", "current_epoch", ")", "# nvoijefoij", "\n", "+", "', '", ".", "join", "(", "[", "'%s: %.4g'", "%", "(", "k", ",", "metrics", "[", "k", "]", ")", "for", "k", "in", "\n", "[", "'full_loss'", ",", "'metric_ang_g_initial'", ",", "'metric_ang_g_final'", ",", "'metric_bce_left_tracking_validity'", ",", "'metric_bce_right_tracking_validity'", "]", "\n", "if", "k", "in", "metrics", ".", "keys", "(", ")", "]", ")", ")", "\n", "# log = ('Step %d, Epoch %.2f> ' % (current_step + 1, current_epoch)  # nvoijefoij", "\n", "#        + ', '.join(['%s: %.4g' % (k, metrics[k]) for k in ['full_loss', 'metric_ang_g_initial', 'metric_ang_g_final'] if k in metrics.keys()]))", "\n", "logger", ".", "info", "(", "log", ")", "\n", "# print(metrics, '---jjiejjjdkkaa training.py')", "\n", "'''\n            log = ('Step %d, Epoch %.2f> ' % (current_step + 1, current_epoch)\n                   + ', '.join(['%s: %.4g' % (k, metrics[k]) for k in sorted(metrics.keys()) if k in ['full_loss', 'metric_ang_g_initial', 'metric_ang_g_final']]))\n            \n            # all loss and metric terms:\n            full_loss: 0.7607, loss_1: 0.7607, loss_ang_left_g_initial: 1.663, loss_ang_right_g_initial: 1.714, loss_ce_heatmap_final: 0.692,\n            loss_ce_heatmap_initial: 0.1284, loss_l1_left_pupil_size: 0.1755, loss_l1_right_pupil_size: 0.153, loss_mse_PoG_cm_final: 68.71,\n            loss_mse_PoG_cm_initial: 9.655, loss_mse_PoG_px_final: 8.283e+04, loss_mse_PoG_px_initial: 1.16e+04, loss_mse_heatmap_final: 0.2409,\n            loss_mse_left_PoG_cm_initial: 4.973, loss_mse_lr_consistency: 21.69, loss_mse_right_PoG_cm_initial: 5.625, metric_ang_g_final: 8.964,\n            metric_ang_g_initial: 3.18, metric_ang_g_initial_unaugmented: 1.579, metric_euc_PoG_cm_final: 9.902, metric_euc_PoG_cm_initial: 3.631,\n            metric_euc_PoG_cm_initial_unaugmented: 1.764, metric_euc_PoG_px_final: 343.8, metric_euc_PoG_px_initial: 125.8,\n            metric_euc_PoG_px_initial_unaugmented: 61.25, metric_euc_left_PoG_cm_initial: 1.875, metric_euc_left_PoG_px_initial: 167.3,\n            metric_euc_lr_consistency: 6.32, metric_euc_right_PoG_cm_initial: 1.911, metric_euc_right_PoG_px_initial: 159'''", "\n", "\n", "# Log to Tensorboard", "\n", "if", "step_modulo", "(", "current_step", ",", "config", ".", "tensorboard_scalars_every_n_steps", ")", ":", "\n", "                ", "for", "key", ",", "metric", "in", "metrics", ".", "items", "(", ")", ":", "\n", "                    ", "if", "key", ".", "startswith", "(", "'loss_'", ")", ":", "\n", "                        ", "key", "=", "key", "[", "len", "(", "'loss_'", ")", ":", "]", "\n", "tensorboard", ".", "add_scalar", "(", "'train_losses/%s'", "%", "key", ",", "metric", ")", "\n", "", "elif", "key", ".", "startswith", "(", "'metric_'", ")", ":", "\n", "                        ", "key", "=", "key", "[", "len", "(", "'metric_'", ")", ":", "]", "\n", "tensorboard", ".", "add_scalar", "(", "'train_metrics/%s'", "%", "key", ",", "metric", ")", "\n", "", "else", ":", "\n", "                        ", "tensorboard", ".", "add_scalar", "(", "'train/%s'", "%", "key", ",", "metric", ")", "\n", "\n", "", "", "tensorboard", ".", "add_scalar", "(", "'lr/epoch'", ",", "current_epoch", ")", "\n", "\n", "if", "step_modulo", "(", "current_step", ",", "config", ".", "tensorboard_images_every_n_steps", ")", ":", "\n", "                    ", "for", "k", ",", "img", "in", "images_to_log_to_tensorboard", ".", "items", "(", ")", ":", "\n", "                        ", "tensorboard", ".", "add_image", "(", "k", ",", "img", ")", "\n", "\n", "# Quit if NaNs", "\n", "", "", "", "there_are_NaNs", "=", "False", "\n", "for", "k", ",", "v", "in", "metrics", ".", "items", "(", ")", ":", "\n", "                ", "if", "np", ".", "any", "(", "np", ".", "isnan", "(", "v", ")", ")", ":", "\n", "                    ", "logger", ".", "error", "(", "'NaN encountered during training at value: %s'", "%", "k", ")", "\n", "there_are_NaNs", "=", "True", "\n", "", "", "if", "there_are_NaNs", ":", "\n", "                ", "cleanup_and_quit", "(", "train_data", ",", "test_data", ",", "tensorboard", ")", "\n", "\n", "# We're done with the previous outputs", "\n", "# print(metrics, '---waefsfds training.py')", "\n", "", "", "del", "input_data", ",", "outputs", ",", "loss_terms", ",", "images_to_log_to_tensorboard", "\n", "\n", "# Save checkpoint", "\n", "if", "step_modulo", "(", "current_step", ",", "config", ".", "checkpoints_save_every_n_steps", ")", ":", "\n", "            ", "model", ".", "checkpoint_manager", ".", "save_at_step", "(", "current_step", "+", "1", ")", "\n", "# model.checkpoint_manager.save_at_step_training_results(current_step + 1, training_result_list)", "\n", "# del training_result_list", "\n", "# training_result_list = []", "\n", "\n", "# print('main_loop_iterator() proceed y3', '---wefwe')", "\n", "\n", "# Full test over all evaluation datasets", "\n", "", "if", "step_modulo", "(", "current_step", ",", "config", ".", "test_every_n_steps", ")", ":", "\n", "# Do test on subset of validation datasets", "\n", "            ", "final_out", ",", "for_gsheet", "=", "test_model_on_all", "(", "model", ",", "test_data", ",", "current_step", "+", "1", ",", "tensorboard", "=", "tensorboard", ")", "\n", "# store results aside tensorboard", "\n", "model", ".", "checkpoint_manager", ".", "save_at_step_testing_results", "(", "current_step", "+", "1", ",", "final_out", ")", "\n", "# outputs_key_str = 'intermediate_test_results'", "\n", "# if outputs_key_str not in model.checkpoint_manager.history_stats.keys(): model.checkpoint_manager.history_stats[outputs_key_str] = {}", "\n", "# model.checkpoint_manager.history_stats[outputs_key_str][current_step] = final_out", "\n", "\n", "# Log training metrics to Google Sheets", "\n", "if", "for_gsheet", "is", "not", "None", ":", "\n", "                ", "for_gsheet", "[", "'Step'", "]", "=", "current_step", "+", "1", "\n", "for_gsheet", "[", "'Epoch'", "]", "=", "current_epoch", "\n", "for", "k", ",", "v", "in", "metrics", ".", "items", "(", ")", ":", "\n", "                    ", "for_gsheet", "[", "'train/'", "+", "k", "]", "=", "v", "\n", "# model.gsheet_logger.update_or_append_row(for_gsheet)", "\n", "\n", "# Free memory", "\n", "", "", "salvage_memory", "(", ")", "\n", "\n", "# Remember what the last step/epoch were", "\n", "", "model", ".", "last_epoch", "=", "current_epoch", "\n", "model", ".", "last_step", "=", "current_step", "\n", "\n", "# Update learning rate", "\n", "# NOTE: should be last", "\n", "tensorboard", ".", "update_current_step", "(", "current_step", "+", "2", ")", "\n", "for", "lr_scheduler", "in", "lr_schedulers", ":", "\n", "            ", "lr_scheduler", ".", "step", "(", "current_step", "+", "1", ")", "\n", "# dprint('main_loop_iterator() proceed y4', '---erafdfsd')", "\n", "\n", "# We're out of the training loop now, make a checkpoint", "\n", "", "", "current_step", "+=", "1", "\n", "model", ".", "checkpoint_manager", ".", "save_at_step", "(", "current_step", "+", "1", ")", "\n", "model", ".", "checkpoint_manager", ".", "save_at_step", "(", "current_step", "+", "1", ",", "is_final_step", "=", "True", ")", "\n", "\n", "# Close all dataloaders", "\n", "for", "k", ",", "v", "in", "list", "(", "train_data", ".", "items", "(", ")", ")", "+", "list", "(", "test_data", ".", "items", "(", ")", ")", ":", "\n", "        ", "if", "'data_iterator'", "in", "v", ":", "\n", "            ", "v", "[", "'data_iterator'", "]", ".", "__del__", "(", ")", "\n", "del", "v", "[", "'data_iterator'", "]", "\n", "", "v", "[", "'dataloader'", "]", "\n", "del", "v", "[", "'dataloader'", "]", "\n", "\n", "# Clear memory where possible", "\n", "", "salvage_memory", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.training.eval_loop_iterator": [[744, 772], ["model.eval", "training.salvage_memory", "training.salvage_memory", "torch.no_grad", "torch.no_grad", "enumerate", "input_data.items", "model", "isinstance", "v.detach().to", "v.detach().cuda", "v.detach", "v.detach"], "function", ["home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.training.salvage_memory", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.training.salvage_memory"], ["", "def", "eval_loop_iterator", "(", "model", ",", "dataset", ",", "dataloader", ",", "create_images", "=", "False", ")", ":", "\n", "    ", "\"\"\"Iterate through and evaluate for a dataset.\"\"\"", "\n", "model", ".", "eval", "(", ")", "\n", "salvage_memory", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# num_entries = len(dataset)", "\n", "        ", "for", "current_step", ",", "input_data", "in", "enumerate", "(", "dataloader", ")", ":", "\n", "# batch_size = next(iter(input_data.values())).shape[0]", "\n", "\n", "# Move tensors to GPU", "\n", "            ", "input_data_gpu", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "input_data", ".", "items", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "v", ",", "torch", ".", "Tensor", ")", ":", "\n", "                    ", "if", "not", "config", ".", "multi_gpu", ":", "\n", "                        ", "input_data_gpu", "[", "k", "]", "=", "v", ".", "detach", "(", ")", ".", "to", "(", "device", ",", "non_blocking", "=", "True", ")", "\n", "", "else", ":", "\n", "                        ", "input_data_gpu", "[", "k", "]", "=", "v", ".", "detach", "(", ")", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "", "", "", "forward_kwargs", "=", "{", "\n", "'create_images'", ":", "create_images", ",", "\n", "}", "\n", "\n", "# Forward pass and yield", "\n", "outputs", "=", "model", "(", "input_data_gpu", ",", "**", "forward_kwargs", ")", "\n", "yield", "current_step", ",", "input_data", ",", "outputs", "\n", "\n", "# Free up memory", "\n", "", "", "salvage_memory", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.training.cleanup_and_quit": [[774, 791], ["sys.exit", "tensorboard.__del__", "list", "list", "train_data.items", "test_data.items", "v[].__del__"], "function", ["home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.tensorboard.Tensorboard.__del__", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.tensorboard.Tensorboard.__del__"], ["", "def", "cleanup_and_quit", "(", "train_data", ",", "test_data", ",", "tensorboard", ")", ":", "\n", "# Close tensorboard", "\n", "    ", "if", "tensorboard", ":", "\n", "        ", "tensorboard", ".", "__del__", "(", ")", "\n", "\n", "# Close all dataloaders and datasets", "\n", "", "for", "k", ",", "v", "in", "list", "(", "train_data", ".", "items", "(", ")", ")", "+", "list", "(", "test_data", ".", "items", "(", ")", ")", ":", "\n", "        ", "if", "'data_iterator'", "in", "v", ":", "\n", "            ", "v", "[", "'data_iterator'", "]", ".", "__del__", "(", ")", "\n", "# if 'dataset' in v:", "\n", "#     v['dataset'].original_full_dataset.__del__()", "\n", "", "for", "item", "in", "[", "'data_iterator'", ",", "'dataloader'", ",", "'dataset'", "]", ":", "\n", "            ", "if", "item", "in", "v", ":", "\n", "                ", "del", "v", "[", "item", "]", "\n", "\n", "# Finally exit", "\n", "", "", "", "sys", ".", "exit", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.training.monitor_gpu_usage": [[792, 799], ["torch.cuda.memory_cached", "torch.cuda.memory_cached", "torch.cuda.memory_allocated", "torch.cuda.memory_allocated", "print", "torch.cuda.get_device_properties", "torch.cuda.get_device_properties", "round", "scaleGB", "scaleGB", "scaleGB", "scaleGB"], "function", ["None"], ["", "def", "monitor_gpu_usage", "(", "device_num", "=", "0", ",", "landmark", "=", "''", ")", ":", "\n", "    ", "t", "=", "torch", ".", "cuda", ".", "get_device_properties", "(", "device_num", ")", ".", "total_memory", "\n", "c", "=", "torch", ".", "cuda", ".", "memory_cached", "(", "device_num", ")", "\n", "a", "=", "torch", ".", "cuda", ".", "memory_allocated", "(", "device_num", ")", "\n", "f", "=", "c", "-", "a", "# free inside cache", "\n", "scaleGB", "=", "lambda", "x", ":", "round", "(", "x", "/", "1000000000", ",", "2", ")", "# GB", "\n", "print", "(", "'GPU memory usage'", ",", "'--'", ",", "'total:'", ",", "scaleGB", "(", "t", ")", ",", "', cached:'", ",", "scaleGB", "(", "c", ")", ",", "', allocated:'", ",", "scaleGB", "(", "a", ")", ",", "', free:'", ",", "scaleGB", "(", "f", ")", ",", "landmark", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.training.monitor_ram": [[800, 808], ["dict", "sorted", "print", "psutil.virtual_memory()._asdict", "psutil.virtual_memory", "round", "dict.items"], "function", ["None"], ["", "def", "monitor_ram", "(", "landmark", "=", "''", ")", ":", "\n", "# import psutil", "\n", "    ", "di", "=", "dict", "(", "psutil", ".", "virtual_memory", "(", ")", ".", "_asdict", "(", ")", ")", "\n", "del", "di", "[", "'percent'", "]", "\n", "ta", "=", "sorted", "(", "[", "(", "k", ",", "round", "(", "v", "/", "1000", "/", "1000", "/", "1000", ",", "2", ")", ")", "for", "k", ",", "v", "in", "di", ".", "items", "(", ")", "]", ",", "key", "=", "lambda", "item", ":", "item", "[", "0", "]", ")", "\n", "print", "(", "'Ram usage --'", ",", "ta", ",", "landmark", ")", "\n", "# ta['percent_used'] = psutil.virtual_memory().percent", "\n", "return", "ta", "\n", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.losses.angular.AngularLoss.calculate_loss": [[33, 39], ["models.common.pitchyaw_to_vector", "models.common.pitchyaw_to_vector", "torch.cosine_similarity", "torch.cosine_similarity", "torch.hardtanh_", "torch.hardtanh_", "torch.acos", "torch.acos", "torch.acos", "torch.acos"], "methods", ["home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.gaze.pitchyaw_to_vector", "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.core.gaze.pitchyaw_to_vector"], ["def", "calculate_loss", "(", "self", ",", "a", ",", "b", ")", ":", "\n", "        ", "a", "=", "pitchyaw_to_vector", "(", "a", ")", "\n", "b", "=", "pitchyaw_to_vector", "(", "b", ")", "\n", "sim", "=", "F", ".", "cosine_similarity", "(", "a", ",", "b", ",", "dim", "=", "1", ",", "eps", "=", "1e-8", ")", "\n", "sim", "=", "F", ".", "hardtanh_", "(", "sim", ",", "min_val", "=", "-", "1", "+", "1e-8", ",", "max_val", "=", "1", "-", "1e-8", ")", "\n", "return", "torch", ".", "acos", "(", "sim", ")", "*", "self", ".", "_to_degrees", "\n", "", "", ""]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.losses.euclidean.EuclideanLoss.calculate_loss": [[28, 34], ["torch.pow", "torch.sum", "torch.sqrt", "tuple", "range"], "methods", ["None"], ["    ", "def", "calculate_loss", "(", "self", ",", "a", ",", "b", ")", ":", "\n", "        ", "assert", "(", "a", ".", "ndim", "==", "b", ".", "ndim", ")", "\n", "assert", "(", "a", ".", "ndim", ">", "1", ")", "\n", "squared_difference", "=", "torch", ".", "pow", "(", "a", "-", "b", ",", "2", ")", "\n", "ssd", "=", "torch", ".", "sum", "(", "squared_difference", ",", "axis", "=", "tuple", "(", "range", "(", "1", ",", "a", ".", "ndim", ")", ")", ")", "\n", "return", "torch", ".", "sqrt", "(", "ssd", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.losses.base_loss_with_validity.BaseLossWithValidity.calculate_loss": [[26, 28], ["NotImplementedError"], "methods", ["None"], ["    ", "def", "calculate_loss", "(", "self", ",", "predictions", ",", "ground_truth", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'Must implement BaseLossWithValidity::calculate_loss'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.losses.base_loss_with_validity.BaseLossWithValidity.calculate_mean_loss": [[29, 31], ["torch.mean", "base_loss_with_validity.BaseLossWithValidity.calculate_loss"], "methods", ["home.repos.pwc.inspect_result.bjj9_EVE_SCPT.losses.l1.L1Loss.calculate_loss"], ["", "def", "calculate_mean_loss", "(", "self", ",", "predictions", ",", "ground_truth", ")", ":", "\n", "        ", "return", "torch", ".", "mean", "(", "self", ".", "calculate_loss", "(", "predictions", ",", "ground_truth", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.losses.base_loss_with_validity.BaseLossWithValidity.__call__": [[32, 81], ["range", "[].float", "base_loss_with_validity.BaseLossWithValidity.calculate_loss", "torch.sum", "torch.sum", "individual_entry_losses.append", "torch.sum", "float", "torch.stack"], "methods", ["home.repos.pwc.inspect_result.bjj9_EVE_SCPT.losses.l1.L1Loss.calculate_loss"], ["", "def", "__call__", "(", "self", ",", "predictions", ",", "gt_key", ",", "reference_dict", ",", "sample_weights", "=", "None", ")", ":", "\n", "# Since we deal with sequence data, assume B x T x F (if ndim == 3)", "\n", "        ", "batch_size", "=", "predictions", ".", "shape", "[", "0", "]", "\n", "\n", "individual_entry_losses", "=", "[", "]", "\n", "num_valid_entries", "=", "0", "\n", "\n", "for", "b", "in", "range", "(", "batch_size", ")", ":", "\n", "# Get sequence data for predictions and GT", "\n", "            ", "entry_predictions", "=", "predictions", "[", "b", "]", "\n", "entry_ground_truth", "=", "reference_dict", "[", "gt_key", "]", "[", "b", "]", "\n", "\n", "# If validity values do not exist, return simple mean", "\n", "# NOTE: We assert for now to catch unintended errors,", "\n", "#       as we do not expect a situation where these flags do not exist.", "\n", "validity_key", "=", "gt_key", "+", "'_validity'", "\n", "assert", "(", "validity_key", "in", "reference_dict", ")", "\n", "# if validity_key not in reference_dict:", "\n", "#     individual_entry_losses.append(torch.mean(", "\n", "#         self.calculate_mean_loss(entry_predictions, entry_ground_truth)", "\n", "#     ))", "\n", "#     continue", "\n", "\n", "# Otherwise, we need to set invalid entries to zero", "\n", "validity", "=", "reference_dict", "[", "validity_key", "]", "[", "b", "]", ".", "float", "(", ")", "\n", "losses", "=", "self", ".", "calculate_loss", "(", "entry_predictions", ",", "entry_ground_truth", ")", "\n", "\n", "# apply jiugong loss weight", "\n", "if", "sample_weights", "is", "not", "None", ":", "# wnvneueh src/losses/base_loss_with_validity.py", "\n", "                ", "jg_weights_one_sample", "=", "sample_weights", "[", "b", "]", "\n", "#st()", "\n", "losses", "=", "losses", "*", "jg_weights_one_sample", "# invalid (out of screen) PoGs have weight 0", "\n", "\n", "# Some checks to make sure that broadcasting is not hiding errors", "\n", "# in terms of consistency in return values", "\n", "", "assert", "(", "validity", ".", "ndim", "==", "losses", ".", "ndim", ")", "\n", "assert", "(", "validity", ".", "shape", "[", "0", "]", "==", "losses", ".", "shape", "[", "0", "]", ")", "\n", "\n", "# Make sure to scale the accumulated loss correctly", "\n", "num_valid", "=", "torch", ".", "sum", "(", "validity", ")", "\n", "accumulated_loss", "=", "torch", ".", "sum", "(", "validity", "*", "losses", ")", "\n", "if", "num_valid", ">", "1", ":", "\n", "                ", "accumulated_loss", "/=", "num_valid", "\n", "", "num_valid_entries", "+=", "1", "\n", "individual_entry_losses", ".", "append", "(", "accumulated_loss", ")", "\n", "\n", "# Merge all loss terms to yield final single scalar", "\n", "#st()", "\n", "", "return", "torch", ".", "sum", "(", "torch", ".", "stack", "(", "individual_entry_losses", ")", ")", "/", "float", "(", "num_valid_entries", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.losses.cross_entropy.CrossEntropyLoss.calculate_loss": [[29, 35], ["torch.stack", "torch.nn.functional.binary_cross_entropy", "range"], "methods", ["None"], ["    ", "def", "calculate_loss", "(", "self", ",", "a", ",", "b", ")", ":", "\n", "        ", "assert", "(", "a", ".", "ndim", "==", "b", ".", "ndim", ")", "\n", "sequence_len", "=", "a", ".", "shape", "[", "0", "]", "\n", "return", "torch", ".", "stack", "(", "[", "\n", "F", ".", "binary_cross_entropy", "(", "a", "[", "t", ",", ":", "]", ",", "b", "[", "t", ",", ":", "]", ")", "\n", "for", "t", "in", "range", "(", "sequence_len", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.losses.mse.MSELoss.calculate_loss": [[28, 34], ["torch.mean", "tuple", "range"], "methods", ["None"], ["    ", "def", "calculate_loss", "(", "self", ",", "a", ",", "b", ")", ":", "\n", "        ", "assert", "(", "a", ".", "ndim", "==", "b", ".", "ndim", ")", "\n", "if", "a", ".", "ndim", ">", "1", ":", "\n", "            ", "return", "torch", ".", "mean", "(", "(", "a", "-", "b", ")", "**", "2", ",", "axis", "=", "tuple", "(", "range", "(", "1", ",", "a", ".", "ndim", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "(", "a", "-", "b", ")", "**", "2", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.bjj9_EVE_SCPT.losses.l1.L1Loss.calculate_loss": [[28, 34], ["torch.mean", "torch.abs", "torch.abs", "tuple", "range"], "methods", ["None"], ["    ", "def", "calculate_loss", "(", "self", ",", "a", ",", "b", ")", ":", "\n", "        ", "assert", "(", "a", ".", "ndim", "==", "b", ".", "ndim", ")", "\n", "if", "a", ".", "ndim", ">", "1", ":", "\n", "            ", "return", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "a", "-", "b", ")", ",", "axis", "=", "tuple", "(", "range", "(", "1", ",", "a", ".", "ndim", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "abs", "(", "a", "-", "b", ")", "\n", "", "", "", ""]]}