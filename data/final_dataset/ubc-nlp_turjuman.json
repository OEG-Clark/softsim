{"home.repos.pwc.inspect_result.ubc-nlp_turjuman.turjuman.translation.translate_from_file.__init__": [[9, 17], ["accelerate.Accelerator"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "tokenizer", ",", "cache_dir", ",", "logger", ")", ":", "\n", "        ", "self", ".", "logger", "=", "logger", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "tokenizer", "=", "tokenizer", "\n", "self", ".", "cache_dir", "=", "cache_dir", "\n", "self", ".", "data_collator", "=", "default_data_collator", "\n", "self", ".", "accelerator", "=", "Accelerator", "(", ")", "\n", "self", ".", "gen_kwargs", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.ubc-nlp_turjuman.turjuman.translation.translate_from_file.preprocess_function": [[21, 25], ["translation.translate_from_file.tokenizer"], "methods", ["None"], ["", "def", "preprocess_function", "(", "self", ",", "examples", ")", ":", "\n", "        ", "input", "=", "[", "ex", "for", "ex", "in", "examples", "[", "\"text\"", "]", "]", "\n", "model_inputs", "=", "self", ".", "tokenizer", "(", "input", ",", "max_length", "=", "self", ".", "gen_kwargs", "[", "'max_length'", "]", ",", "padding", "=", "True", ",", "truncation", "=", "True", ")", "\n", "return", "model_inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.ubc-nlp_turjuman.turjuman.translation.translate_from_file.get_file_data": [[26, 36], ["translation.translate_from_file.logger.info", "datasets.load_dataset", "translation.translate_from_file.logger.info", "translation.translate_from_file.accelerator.main_process_first", "datasets.load_dataset.map"], "methods", ["None"], ["", "def", "get_file_data", "(", "self", ",", "filepath", ")", ":", "\n", "        ", "self", ".", "logger", ".", "info", "(", "\"Loading source text from file ({})\"", ".", "format", "(", "filepath", ")", ")", "\n", "raw_datasets", "=", "load_dataset", "(", "'text'", ",", "data_files", "=", "{", "'source'", ":", "filepath", "}", ",", "cache_dir", "=", "self", ".", "cache_dir", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"Running tokenizer on source text\"", ")", "\n", "with", "self", ".", "accelerator", ".", "main_process_first", "(", ")", ":", "\n", "            ", "processed_datasets", "=", "raw_datasets", ".", "map", "(", "\n", "self", ".", "preprocess_function", ",", "\n", "batched", "=", "True", ",", "\n", ")", "\n", "", "return", "processed_datasets", "[", "\"source\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ubc-nlp_turjuman.turjuman.translation.translate_from_file.translate": [[37, 75], ["translation.translate_from_file.get_file_data", "torch.utils.data.DataLoader", "translation.translate_from_file.logger.info", "translation.translate_from_file.model.eval", "len", "tqdm.tqdm.tqdm", "translation.translate_from_file.logger.info", "enumerate", "tqdm.tqdm.tqdm.close", "extract_output", "torch.cuda.is_available", "v.to", "torch.no_grad", "translation.translate_from_file.accelerator.unwrap_model().generate", "translation.translate_from_file.accelerator.pad_across_processes", "translation.translate_from_file.accelerator.gather().cpu().numpy", "translation.translate_from_file.tokenizer.batch_decode", "generated_text.extend", "tqdm.tqdm.tqdm.update", "batch.items", "pred.strip", "translation.translate_from_file.accelerator.unwrap_model", "translation.translate_from_file.accelerator.gather().cpu", "len", "translation.translate_from_file.accelerator.gather", "len"], "methods", ["home.repos.pwc.inspect_result.ubc-nlp_turjuman.turjuman.translation.translate_from_file.get_file_data", "home.repos.pwc.inspect_result.ubc-nlp_turjuman.turjuman.helper.extract_output"], ["", "def", "translate", "(", "self", ",", "filepath", ",", "batch_size", ",", "gen_kwargs", ")", ":", "\n", "        ", "self", ".", "gen_kwargs", "=", "gen_kwargs", "\n", "sources", "=", "self", ".", "get_file_data", "(", "filepath", ")", "\n", "generated_text", "=", "[", "]", "\n", "sources_dataloader", "=", "DataLoader", "(", "sources", ",", "collate_fn", "=", "self", ".", "data_collator", ",", "batch_size", "=", "batch_size", ")", "\n", "device", "=", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "self", ".", "logger", ".", "info", "(", "\">>>>>Working on {}\"", ".", "format", "(", "device", ")", ")", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "samples_seen", "=", "0", "\n", "num_batches", "=", "len", "(", "sources_dataloader", ")", "\n", "pbar", "=", "tqdm", "(", "total", "=", "num_batches", ",", "desc", "=", "\"translate\"", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"Translating with batch_size {} and #samples = {}\"", ".", "format", "(", "batch_size", ",", "num_batches", ")", ")", "\n", "for", "step", ",", "batch", "in", "enumerate", "(", "sources_dataloader", ")", ":", "\n", "            ", "batch", "=", "{", "k", ":", "v", ".", "to", "(", "device", ")", "for", "k", ",", "v", "in", "batch", ".", "items", "(", ")", "}", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "generated_tokens", "=", "self", ".", "accelerator", ".", "unwrap_model", "(", "self", ".", "model", ")", ".", "generate", "(", "\n", "batch", "[", "\"input_ids\"", "]", ",", "\n", "attention_mask", "=", "batch", "[", "\"attention_mask\"", "]", ",", "\n", "**", "gen_kwargs", ",", "\n", ")", "\n", "generated_tokens", "=", "self", ".", "accelerator", ".", "pad_across_processes", "(", "\n", "generated_tokens", ",", "dim", "=", "1", ",", "pad_index", "=", "self", ".", "tokenizer", ".", "pad_token_id", "\n", ")", "\n", "generated_tokens", "=", "self", ".", "accelerator", ".", "gather", "(", "generated_tokens", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "decoded_preds", "=", "self", ".", "tokenizer", ".", "batch_decode", "(", "generated_tokens", ",", "skip_special_tokens", "=", "True", ")", "\n", "decoded_preds", "=", "[", "pred", ".", "strip", "(", ")", "for", "pred", "in", "decoded_preds", "]", "\n", "# If we are in a multiprocess environment, the last batch has duplicates", "\n", "if", "self", ".", "accelerator", ".", "num_processes", ">", "1", ":", "\n", "                    ", "if", "step", "==", "len", "(", "sources_dataloader", ")", ":", "\n", "                        ", "decoded_preds", "=", "decoded_preds", "[", ":", "len", "(", "sources_dataloader", ".", "dataset", ")", "-", "samples_seen", "]", "\n", "", "", "generated_text", ".", "extend", "(", "decoded_preds", ")", "\n", "pbar", ".", "update", "(", "1", ")", "\n", "#------------------------------------------------------------------------------", "\n", "", "", "pbar", ".", "close", "(", ")", "\n", "sources_text", "=", "[", "src", "[", "'text'", "]", "for", "src", "in", "sources", "]", "\n", "outputs", "=", "extract_output", "(", "sources_text", ",", "generated_text", ",", "gen_kwargs", "[", "'num_return_sequences'", "]", ",", "self", ".", "logger", ")", "\n", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.ubc-nlp_turjuman.turjuman.metrics.bleu_score": [[5, 15], ["open().read().splitlines", "open().read().splitlines", "len", "len", "print", "sacrebleu.corpus_bleu", "open().read", "open().read", "open", "open"], "function", ["None"], ["def", "bleu_score", "(", "hyp_file", ",", "ref_file", ")", ":", "\n", "    ", "decoded_preds", "=", "open", "(", "hyp_file", ",", "'r'", ")", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "decoded_labels", "=", "open", "(", "ref_file", ",", "'r'", ")", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "if", "len", "(", "decoded_preds", ")", "!=", "len", "(", "decoded_labels", ")", ":", "\n", "        ", "print", "(", "\"[Error] The number of hypothesis (predicted) and references (labels) samples should be equaled \"", ")", "\n", "", "else", ":", "\n", "        ", "bleu_results", "=", "sacrebleu", ".", "corpus_bleu", "(", "decoded_preds", ",", "[", "decoded_labels", "]", ")", "\n", "bleu_score", "=", "bleu_results", ".", "score", "\n", "result", "=", "{", "\"bleu\"", ":", "bleu_score", "}", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.ubc-nlp_turjuman.turjuman.turjuman.turjuman.__init__": [[9, 13], ["turjuman.turjuman.load_model"], "methods", ["home.repos.pwc.inspect_result.ubc-nlp_turjuman.turjuman.turjuman.turjuman.load_model"], ["    ", "def", "__init__", "(", "self", ",", "logger", ",", "cache_dir", ",", "model_path", "=", "None", ")", ":", "\n", "        ", "self", ".", "logger", "=", "logger", "\n", "self", ".", "cache_dir", "=", "cache_dir", "\n", "self", ".", "model", ",", "self", ".", "tokenizer", "=", "self", ".", "load_model", "(", "model_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ubc-nlp_turjuman.turjuman.turjuman.turjuman.load_model": [[14, 37], ["turjuman.turjuman.logger.info", "transformers.AutoTokenizer.from_pretrained", "transformers.AutoModelForSeq2SeqLM.from_pretrained", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "turjuman.turjuman.logger.info", "turjuman.turjuman.logger.info", "torch.DataParallel.to", "turjuman.turjuman.logger.info", "torch.DataParallel.to", "torch.DataParallel", "torch.DataParallel", "range", "str", "str"], "methods", ["None"], ["", "def", "load_model", "(", "self", ",", "model_path", ")", ":", "\n", "        ", "model_path", "=", "model_path", "if", "model_path", "else", "\"UBC-NLP/turjuman\"", "\n", "self", ".", "logger", ".", "info", "(", "\"Loading model from {}\"", ".", "format", "(", "model_path", ")", ")", "\n", "tokenizer", "=", "AutoTokenizer", ".", "from_pretrained", "(", "model_path", ",", "cache_dir", "=", "self", ".", "cache_dir", ")", "\n", "model", "=", "AutoModelForSeq2SeqLM", ".", "from_pretrained", "(", "model_path", ",", "cache_dir", "=", "self", ".", "cache_dir", ")", "\n", "##### GPU check ####", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "device", "=", "\"cuda\"", "\n", "n_gpu", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "device_ids", "=", "[", "i", "for", "i", "in", "range", "(", "0", ",", "n_gpu", ")", "]", "#GPUtil.getAvailable(limit = 8)", "\n", "if", "n_gpu", "==", "1", ":", "\n", "               ", "self", ".", "logger", ".", "info", "(", "\"Run the model with one-GPU {}\"", ".", "format", "(", "n_gpu", ",", "str", "(", "device_ids", ")", ")", ")", "\n", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "logger", ".", "info", "(", "\"Run the model with {} GPUs {}\"", ".", "format", "(", "n_gpu", ",", "str", "(", "device_ids", ")", ")", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "model", "=", "nn", ".", "DataParallel", "(", "model", ",", "device_ids", "=", "device_ids", ")", "\n", "", "", "else", ":", "\n", "            ", "device", "=", "\"cpu\"", "\n", "self", ".", "logger", ".", "info", "(", "\"Run the model with CPU\"", ")", "\n", "model", "=", "model", "\n", "", "return", "model", ",", "tokenizer", "\n", "\n"]], "home.repos.pwc.inspect_result.ubc-nlp_turjuman.turjuman.turjuman.turjuman.validate": [[38, 48], ["turjuman.turjuman.logger.error", "turjuman.turjuman.logger.error"], "methods", ["None"], ["", "def", "validate", "(", "self", ",", "search_method", ",", "max_outputs", ",", "num_beams", ")", ":", "\n", "        ", "validattion_results", "=", "None", "\n", "if", "max_outputs", ">", "num_beams", "and", "search_method", "==", "\"beam\"", ":", "\n", "            ", "self", ".", "logger", ".", "error", "(", "\"For `beam search`: `--max_outputs` has to be smaller or equal to `--num_beams`\"", ")", "\n", "", "elif", "max_outputs", ">", "1", "and", "search_method", "==", "\"greedy\"", ":", "\n", "            ", "self", ".", "logger", ".", "error", "(", "\"For `greedy search`: `--max_outputs` should be 1\"", ")", "\n", "", "else", ":", "\n", "            ", "validattion_results", "=", "\"valid\"", "\n", "\n", "", "return", "validattion_results", "\n", "", "def", "translate", "(", "self", ",", "sources", ",", "search_method", ",", "seq_length", "=", "300", ",", "max_outputs", "=", "1", ",", "num_beams", "=", "5", ",", "no_repeat_ngram_size", "=", "2", ",", "top_p", "=", "0.95", ",", "top_k", "=", "50", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ubc-nlp_turjuman.turjuman.turjuman.turjuman.translate": [[48, 63], ["turjuman.turjuman.tokenizer", "get_gen_kwargs", "turjuman.turjuman.model.generate", "turjuman.turjuman.tokenizer.batch_decode"], "methods", ["home.repos.pwc.inspect_result.ubc-nlp_turjuman.turjuman.helper.get_gen_kwargs"], ["", "def", "translate", "(", "self", ",", "sources", ",", "search_method", ",", "seq_length", "=", "300", ",", "max_outputs", "=", "1", ",", "num_beams", "=", "5", ",", "no_repeat_ngram_size", "=", "2", ",", "top_p", "=", "0.95", ",", "top_k", "=", "50", ")", ":", "\n", "        ", "encoding", "=", "self", ".", "tokenizer", "(", "sources", ",", "padding", "=", "True", ",", "return_tensors", "=", "\"pt\"", ")", "\n", "input_ids", ",", "attention_masks", "=", "encoding", "[", "\"input_ids\"", "]", ",", "encoding", "[", "\"attention_mask\"", "]", "\n", "gen_kwargs", "=", "get_gen_kwargs", "(", "search_method", ",", "seq_length", ",", "max_outputs", ",", "num_beams", ",", "no_repeat_ngram_size", ",", "top_p", ",", "top_k", ",", "self", ".", "logger", ")", "\n", "\n", "outputs", "=", "self", ".", "model", ".", "generate", "(", "\n", "input_ids", "=", "input_ids", ",", "\n", "attention_mask", "=", "attention_masks", ",", "\n", "**", "gen_kwargs", ",", "\n", ")", "\n", "\n", "\n", "generated_text", "=", "self", ".", "tokenizer", ".", "batch_decode", "(", "outputs", ",", "skip_special_tokens", "=", "True", ")", "\n", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.ubc-nlp_turjuman.turjuman.turjuman.turjuman.translate_from_file": [[65, 80], ["get_file_content", "get_gen_kwargs", "turjuman.translation.translate_from_file", "turjuman.translation.translate_from_file.translate", "pandas.DataFrame.from_dict", "pandas.DataFrame.from_dict.to_json", "turjuman.turjuman.logger.info", "turjuman.turjuman.validate", "len", "turjuman.turjuman.logger.error", "str", "Path().with_suffix", "Path"], "methods", ["home.repos.pwc.inspect_result.ubc-nlp_turjuman.turjuman.helper.get_file_content", "home.repos.pwc.inspect_result.ubc-nlp_turjuman.turjuman.helper.get_gen_kwargs", "home.repos.pwc.inspect_result.ubc-nlp_turjuman.turjuman.turjuman.turjuman.translate_from_file", "home.repos.pwc.inspect_result.ubc-nlp_turjuman.turjuman.turjuman.turjuman.translate", "home.repos.pwc.inspect_result.ubc-nlp_turjuman.turjuman.turjuman.turjuman.validate"], ["", "def", "translate_from_file", "(", "self", ",", "input_file", ",", "search_method", ",", "seq_length", "=", "300", ",", "max_outputs", "=", "1", ",", "num_beams", "=", "5", ",", "no_repeat_ngram_size", "=", "2", ",", "top_p", "=", "0.95", ",", "top_k", "=", "50", ",", "batch_size", "=", "25", ")", ":", "\n", "        ", "if", "self", ".", "validate", "(", "search_method", ",", "max_outputs", ",", "num_beams", ")", "is", "None", ":", "\n", "            ", "return", "None", "\n", "", "sources", "=", "get_file_content", "(", "input_file", ",", "self", ".", "logger", ")", "\n", "if", "len", "(", "sources", ")", "<", "1", ":", "\n", "            ", "self", ".", "logger", ".", "error", "(", "\"The input file {} is empty\"", ".", "format", "(", "input_file", ")", ")", "\n", "", "output_file", "=", "str", "(", "Path", "(", "input_file", ")", ".", "with_suffix", "(", "''", ")", ")", "+", "\"_Turjuman_translate.json\"", "\n", "#-- create batches start--#", "\n", "\n", "gen_kwargs", "=", "get_gen_kwargs", "(", "search_method", ",", "seq_length", ",", "max_outputs", ",", "num_beams", ",", "no_repeat_ngram_size", ",", "top_p", ",", "top_k", ",", "self", ".", "logger", ")", "\n", "tf", "=", "translate_from_file", "(", "self", ".", "model", ",", "self", ".", "tokenizer", ",", "self", ".", "cache_dir", ",", "self", ".", "logger", ")", "\n", "outputs", "=", "tf", ".", "translate", "(", "input_file", ",", "batch_size", ",", "gen_kwargs", ")", "\n", "df", "=", "pd", ".", "DataFrame", ".", "from_dict", "(", "outputs", ")", "\n", "df", ".", "to_json", "(", "output_file", ",", "orient", "=", "'records'", ",", "lines", "=", "True", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"The translation are saved on {}\"", ".", "format", "(", "output_file", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ubc-nlp_turjuman.turjuman.turjuman.turjuman.translate_from_text": [[83, 101], ["turjuman.turjuman.translate", "turjuman.turjuman.validate", "len", "turjuman.turjuman.logger.info", "type", "enumerate", "print", "regex.sub", "print", "str"], "methods", ["home.repos.pwc.inspect_result.ubc-nlp_turjuman.turjuman.turjuman.turjuman.translate", "home.repos.pwc.inspect_result.ubc-nlp_turjuman.turjuman.turjuman.turjuman.validate"], ["", "def", "translate_from_text", "(", "self", ",", "text", ",", "search_method", ",", "seq_length", "=", "512", ",", "max_outputs", "=", "1", ",", "num_beams", "=", "5", ",", "no_repeat_ngram_size", "=", "2", ",", "top_p", "=", "0.95", ",", "top_k", "=", "50", ")", ":", "\n", "        ", "if", "self", ".", "validate", "(", "search_method", ",", "max_outputs", ",", "num_beams", ")", "is", "None", ":", "\n", "            ", "return", "None", "\n", "", "if", "len", "(", "regex", ".", "sub", "(", "'\\s+'", ",", "''", ",", "text", ")", ")", "<", "1", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "\"Source should be at least 2 characters\"", ")", "\n", "return", "None", "\n", "", "sources", "=", "[", "text", "]", "\n", "outputs", "=", "self", ".", "translate", "(", "sources", ",", "search_method", ",", "seq_length", ",", "max_outputs", ",", "num_beams", ",", "no_repeat_ngram_size", ",", "top_p", ",", "top_k", ")", "\n", "\n", "if", "max_outputs", "==", "1", ":", "\n", "            ", "targets", "=", "outputs", "[", "'target'", "]", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "targets", "=", "outputs", "[", "str", "(", "max_outputs", ")", "+", "'_targets'", "]", "[", "0", "]", "\n", "", "if", "type", "(", "targets", ")", "==", "list", ":", "\n", "            ", "for", "idx", ",", "target", "in", "enumerate", "(", "targets", ")", ":", "\n", "                 ", "print", "(", "\"target#{}: {}\"", ".", "format", "(", "idx", "+", "1", ",", "target", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "print", "(", "\"target: {}\"", ".", "format", "(", "targets", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ubc-nlp_turjuman.turjuman.helper.get_file_content": [[2, 10], ["pathlib.Path().is_file", "logger.error", "pathlib.Path", "open", "f.read().splitlines", "f.read"], "function", ["None"], ["def", "get_file_content", "(", "input_file", ",", "logger", ")", ":", "\n", "    ", "sources", "=", "[", "]", "\n", "if", "Path", "(", "input_file", ")", ".", "is_file", "(", ")", ":", "\n", "        ", "with", "open", "(", "input_file", ")", "as", "f", ":", "\n", "            ", "sources", "=", "f", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "", "", "else", ":", "\n", "        ", "logger", ".", "error", "(", "\"Can't open the input file {}\"", ".", "format", "(", "input_file", ")", ")", "\n", "", "return", "sources", "\n", "", "def", "get_gen_kwargs", "(", "search_method", ",", "seq_length", ",", "max_outputs", ",", "num_beams", ",", "no_repeat_ngram_size", ",", "top_p", ",", "top_k", ",", "logger", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ubc-nlp_turjuman.turjuman.helper.get_gen_kwargs": [[10, 21], ["logger.info", "logger.info", "logger.info"], "function", ["None"], ["", "def", "get_gen_kwargs", "(", "search_method", ",", "seq_length", ",", "max_outputs", ",", "num_beams", ",", "no_repeat_ngram_size", ",", "top_p", ",", "top_k", ",", "logger", ")", ":", "\n", "    ", "if", "search_method", "==", "\"greedy\"", ":", "\n", "        ", "logger", ".", "info", "(", "\"Using greedy search\"", ")", "\n", "gen_kwargs", "=", "{", "\"max_length\"", ":", "seq_length", ",", "\"num_return_sequences\"", ":", "1", ",", "'do_sample'", ":", "False", "}", "\n", "", "elif", "search_method", "==", "\"beam\"", ":", "\n", "        ", "logger", ".", "info", "(", "\"Using beam search\"", ")", "\n", "gen_kwargs", "=", "{", "\"max_length\"", ":", "seq_length", ",", "\"num_return_sequences\"", ":", "max_outputs", ",", "'do_sample'", ":", "False", ",", "'num_beams'", ":", "num_beams", ",", "'no_repeat_ngram_size'", ":", "no_repeat_ngram_size", ",", "'early_stopping'", ":", "True", "}", "\n", "", "elif", "search_method", "==", "\"sampling\"", ":", "\n", "        ", "logger", ".", "info", "(", "\"Using sampling search\"", ")", "\n", "gen_kwargs", "=", "{", "\"max_length\"", ":", "seq_length", ",", "\"num_return_sequences\"", ":", "max_outputs", ",", "'do_sample'", ":", "True", ",", "'top_k'", ":", "top_k", ",", "'top_p'", ":", "top_p", "}", "\n", "", "return", "gen_kwargs", "\n", "", "def", "extract_output", "(", "sources", ",", "generated_text", ",", "max_outputs", ",", "logger", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ubc-nlp_turjuman.turjuman.helper.extract_output": [[21, 37], ["logger.info", "range", "len", "range", "targets.append", "temp.append", "str"], "function", ["None"], ["", "def", "extract_output", "(", "sources", ",", "generated_text", ",", "max_outputs", ",", "logger", ")", ":", "\n", "    ", "logger", ".", "info", "(", "\"Extract outputs\"", ")", "\n", "targets", "=", "[", "]", "\n", "if", "max_outputs", "==", "1", ":", "\n", "        ", "targets", "=", "generated_text", "\n", "outputs", "=", "{", "'source'", ":", "sources", ",", "'target'", ":", "targets", "}", "\n", "", "else", ":", "\n", "        ", "for", "i", "in", "range", "(", "0", ",", "len", "(", "generated_text", ")", ",", "max_outputs", ")", ":", "\n", "            ", "translate_start_id", "=", "i", "\n", "translate_start_end", "=", "i", "+", "max_outputs", "\n", "temp", "=", "[", "]", "\n", "for", "t", "in", "range", "(", "translate_start_id", ",", "translate_start_end", ")", ":", "\n", "                ", "temp", ".", "append", "(", "generated_text", "[", "t", "]", ")", "\n", "", "targets", ".", "append", "(", "temp", ")", "\n", "", "outputs", "=", "{", "'source'", ":", "sources", ",", "str", "(", "max_outputs", ")", "+", "'_targets'", ":", "targets", "}", "\n", "", "return", "outputs", "", "", ""]], "home.repos.pwc.inspect_result.ubc-nlp_turjuman.turjuman_cli.translate.get_parser": [[23, 40], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["def", "get_parser", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "\"Turjuman Translate Command Line Interface (CLI)\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "'-t'", ",", "'--text'", ",", "type", "=", "str", ",", "help", "=", "'translate the input text into Arabic'", ")", "\n", "parser", ".", "add_argument", "(", "'-f'", ",", "'--input_file'", ",", "type", "=", "str", ",", "help", "=", "'path of input file'", ")", "\n", "parser", ".", "add_argument", "(", "'-m'", ",", "'--search_method'", ",", "type", "=", "str", ",", "default", "=", "'beam'", ",", "help", "=", "\"decoding method [\u2018greedy\u2019, \u2018beam\u2019, \u2018sampling\u2019] , default value is beam search\"", ")", "\n", "parser", ".", "add_argument", "(", "'-s'", ",", "'--seq_length'", ",", "type", "=", "int", ",", "default", "=", "300", ",", "help", "=", "'generate sequences of maximum length seq length, default vlaue is 300'", ")", "\n", "parser", ".", "add_argument", "(", "'-o'", ",", "'--max_outputs'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "help", "=", "'number of hypotheses to output, default vlaue is 1'", ")", "\n", "parser", ".", "add_argument", "(", "'-b'", ",", "'--num_beams'", ",", "default", "=", "5", ",", "type", "=", "int", ",", "help", "=", "'beam serach with a size of n beam, default vlaue is 5'", ")", "\n", "parser", ".", "add_argument", "(", "'-n'", ",", "'--no_repeat_ngram_size'", ",", "default", "=", "2", ",", "type", "=", "int", ",", "help", "=", "'ngram size cannot be repeated in the generation, default vlaue is 2'", ")", "\n", "parser", ".", "add_argument", "(", "'-k'", ",", "'--top_k'", ",", "default", "=", "50", ",", "type", "=", "int", ",", "help", "=", "'sampling using top-k, default vlaue is 50'", ")", "\n", "parser", ".", "add_argument", "(", "'-p'", ",", "'--top_p'", ",", "default", "=", "0.95", ",", "type", "=", "float", ",", "help", "=", "'sampling using top-p, default vlaue is 0.95'", ")", "\n", "parser", ".", "add_argument", "(", "'-c'", ",", "'--cache_dir'", ",", "default", "=", "\"./turjuman_cache\"", ",", "type", "=", "str", ",", "help", "=", "'path of the cache directory, default vlaue is turjuman_cache directory'", ")", "\n", "parser", ".", "add_argument", "(", "'-l'", ",", "'--logging_file'", ",", "default", "=", "None", ",", "type", "=", "str", ",", "help", "=", "'the logging file path, default vlaue is None'", ")", "\n", "parser", ".", "add_argument", "(", "'-bs'", ",", "'--batch_size'", ",", "default", "=", "25", ",", "type", "=", "int", ",", "help", "=", "'the number of sentences translated in one iteration'", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.ubc-nlp_turjuman.turjuman_cli.translate.translate_cli": [[42, 79], ["translate.get_parser", "get_parser.parse_args", "logger.info", "turjuman", "logger.addHandler", "logger.info", "logger.info", "turjuman.translate_from_text", "logging.FileHandler", "Path().is_file", "logger.info", "turjuman.translate_from_file", "logger.info", "logger.info", "Path"], "function", ["home.repos.pwc.inspect_result.ubc-nlp_turjuman.turjuman_cli.score.get_parser", "home.repos.pwc.inspect_result.ubc-nlp_turjuman.turjuman.turjuman.turjuman.translate_from_text", "home.repos.pwc.inspect_result.ubc-nlp_turjuman.turjuman.turjuman.turjuman.translate_from_file"], ["", "def", "translate_cli", "(", ")", ":", "\n", "    ", "search_methods", "=", "[", "'greedy'", ",", "'beam'", ",", "'sampling'", "]", "\n", "parser", "=", "get_parser", "(", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "if", "args", ".", "logging_file", "is", "not", "None", ":", "\n", "        ", "logger", ".", "addHandler", "(", "\n", "logging", ".", "FileHandler", "(", "\n", "filename", "=", "args", ".", "logging_file", ",", "\n", ")", "\n", ")", "\n", "", "logger", ".", "info", "(", "\"Turjuman Translate Command Line Interface\"", ")", "\n", "\n", "if", "args", ".", "search_method", "not", "in", "search_methods", ":", "\n", "        ", "logger", ".", "info", "(", "\"[Error] Translation search method  should be one of the follows [\"", "+", "\",\"", ".", "join", "(", "search_methods", ")", "+", "\"]\"", ")", "\n", "return", "None", "\n", "\n", "", "input_source", "=", "None", "\n", "if", "args", ".", "text", "is", "not", "None", "and", "args", ".", "input_file", "is", "None", ":", "\n", "        ", "logger", ".", "info", "(", "\"Translate from input sentence\"", ")", "\n", "input_source", "=", "\"text\"", "\n", "", "elif", "args", ".", "input_file", "is", "not", "None", "and", "args", ".", "text", "is", "None", ":", "\n", "        ", "if", "Path", "(", "args", ".", "input_file", ")", ".", "is_file", "(", ")", ":", "\n", "            ", "logger", ".", "info", "(", "\"Translate from input file {}\"", ".", "format", "(", "args", ".", "input_file", ")", ")", "\n", "input_source", "=", "\"file\"", "\n", "", "else", ":", "\n", "            ", "logger", ".", "info", "(", "\"[Error] Can't open the input file {}\"", ".", "format", "(", "args", ".", "input_file", ")", ")", "\n", "return", "None", "\n", "", "", "else", ":", "\n", "        ", "logger", ".", "info", "(", "\"[Error] You chould use one of the following options to input the source: `--text` or `--input_file`\"", ")", "\n", "return", "None", "\n", "\n", "\n", "", "torj", "=", "turjuman", "(", "logger", ",", "args", ".", "cache_dir", ")", "\n", "if", "input_source", "==", "\"text\"", ":", "\n", "        ", "torj", ".", "translate_from_text", "(", "args", ".", "text", ",", "args", ".", "search_method", ",", "args", ".", "seq_length", ",", "args", ".", "max_outputs", ",", "args", ".", "num_beams", ",", "args", ".", "no_repeat_ngram_size", ",", "args", ".", "top_p", ",", "args", ".", "top_k", ")", "\n", "", "elif", "input_source", "==", "\"file\"", ":", "\n", "        ", "torj", ".", "translate_from_file", "(", "args", ".", "input_file", ",", "args", ".", "search_method", ",", "args", ".", "seq_length", ",", "args", ".", "max_outputs", ",", "args", ".", "num_beams", ",", "args", ".", "no_repeat_ngram_size", ",", "args", ".", "top_p", ",", "args", ".", "top_k", ",", "args", ".", "batch_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ubc-nlp_turjuman.turjuman_cli.interactive.get_parser": [[15, 23], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["def", "get_parser", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "\"Turjuman Interactive CLI\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "'-c'", ",", "'--cache_dir'", ",", "default", "=", "\"./turjuman_cache\"", ",", "type", "=", "str", ",", "help", "=", "'The cache directory path, default vlaue is turjuman_cache directory'", ")", "\n", "\n", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.ubc-nlp_turjuman.turjuman_cli.interactive.interactive_cli": [[26, 41], ["interactive.get_parser", "get_parser.parse_args", "logger.info", "turjuman", "input", "turjuman.translate_from_text", "len", "logger.info", "regex.sub"], "function", ["home.repos.pwc.inspect_result.ubc-nlp_turjuman.turjuman_cli.score.get_parser", "home.repos.pwc.inspect_result.ubc-nlp_turjuman.turjuman.turjuman.turjuman.translate_from_text"], ["", "def", "interactive_cli", "(", ")", ":", "\n", "    ", "parser", "=", "get_parser", "(", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "#-------------------------", "\n", "\n", "logger", ".", "info", "(", "args", ")", "\n", "torj", "=", "turjuman", "(", "logger", ",", "\"./turjuman_cache\"", ")", "\n", "source", "=", "\"\"", "\n", "while", "source", "!=", "'q'", ":", "\n", "        ", "source", "=", "input", "(", "\"Type your source text or (q) to STOP: \"", ")", "\n", "if", "source", "!=", "'q'", ":", "\n", "            ", "if", "len", "(", "regex", ".", "sub", "(", "'\\s+'", ",", "''", ",", "source", ")", ")", "<", "1", ":", "\n", "                ", "logger", ".", "info", "(", "\"Source should be at least 2 characters\"", ")", "\n", "continue", "\n", "", "torj", ".", "translate_from_text", "(", "source", ",", "search_method", "=", "\"beam\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ubc-nlp_turjuman.turjuman_cli.score.get_parser": [[19, 29], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["def", "get_parser", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "\"Turjuman Score CLI\"", "\n", ")", "\n", "# fmt: off", "\n", "parser", ".", "add_argument", "(", "'-p'", ",", "'--hyp_file'", ",", "required", "=", "True", ",", "type", "=", "str", ",", "help", "=", "'The hypothesis file path (predicted data) '", ")", "\n", "parser", ".", "add_argument", "(", "'-g'", ",", "'--ref_file'", ",", "required", "=", "True", ",", "type", "=", "str", ",", "help", "=", "'The references file path (gold data)'", ")", "\n", "\n", "# fmt: on", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.ubc-nlp_turjuman.turjuman_cli.score.score_cli": [[31, 43], ["score.get_parser", "get_parser.parse_args", "logger.info", "bleu_score", "print"], "function", ["home.repos.pwc.inspect_result.ubc-nlp_turjuman.turjuman_cli.score.get_parser", "home.repos.pwc.inspect_result.ubc-nlp_turjuman.turjuman.metrics.bleu_score"], ["", "def", "score_cli", "(", ")", ":", "\n", "    ", "parser", "=", "get_parser", "(", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "#-------------------------", "\n", "\n", "\n", "logger", ".", "info", "(", "args", ")", "\n", "results", "=", "bleu_score", "(", "args", ".", "hyp_file", ",", "args", ".", "ref_file", ")", "\n", "results", "[", "'hyp_file'", "]", "=", "args", ".", "hyp_file", "\n", "results", "[", "'ref_file'", "]", "=", "args", ".", "ref_file", "\n", "\n", "print", "(", "results", ")", "\n", "\n"]]}