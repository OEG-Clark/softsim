{"home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.segmentation.eval.main": [[28, 61], ["cv2.setNumThreads", "utils.config.create_config", "print", "print", "print", "utils.common_config.get_model", "print", "model.cuda.cuda", "print", "print", "utils.common_config.get_val_transformations", "utils.common_config.get_val_dataset", "utils.common_config.get_val_dataset", "utils.common_config.get_val_dataloader", "print", "print", "model.cuda.load_state_dict", "utils.evaluate_utils.save_results_to_disk", "utils.evaluate_utils.eval_segmentation_supervised_offline", "termcolor.colored", "termcolor.colored", "termcolor.colored", "termcolor.colored", "termcolor.colored", "termcolor.colored", "torch.load", "os.path.abspath", "len"], "function", ["home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.config.create_config", "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.common_config.get_model", "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.common_config.get_val_transformations", "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.common_config.get_val_dataset", "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.common_config.get_val_dataset", "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.common_config.get_val_dataloader", "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.evaluate_utils.save_results_to_disk", "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.evaluate_utils.eval_segmentation_supervised_offline"], ["def", "main", "(", ")", ":", "\n", "    ", "cv2", ".", "setNumThreads", "(", "1", ")", "\n", "\n", "# Retrieve config file", "\n", "p", "=", "create_config", "(", "args", ".", "config_env", ",", "args", ".", "config_exp", ")", "\n", "print", "(", "'Python script is {}'", ".", "format", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", ")", "\n", "print", "(", "colored", "(", "p", ",", "'red'", ")", ")", "\n", "\n", "# Get model", "\n", "print", "(", "colored", "(", "'Retrieve model'", ",", "'blue'", ")", ")", "\n", "model", "=", "get_model", "(", "p", ")", "\n", "print", "(", "model", ")", "\n", "model", "=", "model", ".", "cuda", "(", ")", "\n", "\n", "# CUDNN", "\n", "print", "(", "colored", "(", "'Set CuDNN benchmark'", ",", "'blue'", ")", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "# Dataset", "\n", "print", "(", "colored", "(", "'Retrieve dataset'", ",", "'blue'", ")", ")", "\n", "\n", "# Transforms ", "\n", "val_transforms", "=", "get_val_transformations", "(", ")", "\n", "val_dataset", "=", "get_val_dataset", "(", "p", ",", "val_transforms", ")", "\n", "true_val_dataset", "=", "get_val_dataset", "(", "p", ",", "None", ")", "# True validation dataset without reshape ", "\n", "val_dataloader", "=", "get_val_dataloader", "(", "p", ",", "val_dataset", ")", "\n", "print", "(", "colored", "(", "'Val samples %d'", "%", "(", "len", "(", "val_dataset", ")", ")", ",", "'yellow'", ")", ")", "\n", "\n", "# Evaluate best model at the end", "\n", "print", "(", "colored", "(", "'Evaluating model at {}'", ".", "format", "(", "args", ".", "state_dict", ")", ",", "'blue'", ")", ")", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "args", ".", "state_dict", ",", "map_location", "=", "'cpu'", ")", ")", "\n", "save_results_to_disk", "(", "p", ",", "val_dataloader", ",", "model", ",", "crf_postprocess", "=", "args", ".", "crf_postprocess", ")", "\n", "eval_stats", "=", "eval_segmentation_supervised_offline", "(", "p", ",", "true_val_dataset", ",", "verbose", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.segmentation.linear_finetune.main": [[34, 139], ["cv2.setNumThreads", "utils.config.create_config", "utils.logger.Logger", "print", "print", "print", "utils.common_config.get_model", "print", "model.cuda.cuda", "model.cuda.named_parameters", "print", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.cuda", "print", "print", "print", "list", "utils.common_config.get_optimizer", "print", "print", "utils.common_config.get_train_transformations", "utils.common_config.get_val_transformations", "utils.common_config.get_train_dataset", "utils.common_config.get_val_dataset", "utils.common_config.get_val_dataset", "utils.common_config.get_train_dataloader", "utils.common_config.get_val_dataloader", "print", "os.path.exists", "print", "range", "print", "model.cuda.load_state_dict", "utils.evaluate_utils.save_results_to_disk", "utils.evaluate_utils.eval_segmentation_supervised_offline", "termcolor.colored", "termcolor.colored", "termcolor.colored", "termcolor.colored", "termcolor.colored", "filter", "len", "termcolor.colored", "termcolor.colored", "print", "torch.load", "utils.common_config.get_optimizer.load_state_dict", "model.cuda.load_state_dict", "model.cuda.cuda", "print", "model.cuda.cuda", "termcolor.colored", "print", "print", "utils.common_config.adjust_learning_rate", "print", "print", "utils.train_utils.train_segmentation_vanilla", "print", "utils.evaluate_utils.eval_segmentation_supervised_online", "print", "torch.save", "termcolor.colored", "torch.load", "os.path.abspath", "model.cuda.parameters", "termcolor.colored", "termcolor.colored", "termcolor.colored", "termcolor.colored", "print", "torch.save", "print", "print", "model.cuda.state_dict", "utils.common_config.get_optimizer.state_dict", "model.cuda.state_dict", "len", "len"], "function", ["home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.config.create_config", "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.common_config.get_model", "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.common_config.get_optimizer", "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.common_config.get_train_transformations", "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.common_config.get_val_transformations", "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.common_config.get_train_dataset", "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.common_config.get_val_dataset", "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.common_config.get_val_dataset", "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.common_config.get_train_dataloader", "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.common_config.get_val_dataloader", "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.evaluate_utils.save_results_to_disk", "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.evaluate_utils.eval_segmentation_supervised_offline", "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.common_config.adjust_learning_rate", "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.train_utils.train_segmentation_vanilla", "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.evaluate_utils.eval_segmentation_supervised_online"], ["def", "main", "(", ")", ":", "\n", "    ", "cv2", ".", "setNumThreads", "(", "1", ")", "\n", "# Retrieve config file", "\n", "p", "=", "create_config", "(", "args", ".", "config_env", ",", "args", ".", "config_exp", ")", "\n", "sys", ".", "stdout", "=", "Logger", "(", "p", "[", "'log_file'", "]", ")", "\n", "print", "(", "'Python script is {}'", ".", "format", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", ")", "\n", "print", "(", "colored", "(", "p", ",", "'red'", ")", ")", "\n", "\n", "# Get model", "\n", "print", "(", "colored", "(", "'Retrieve model'", ",", "'blue'", ")", ")", "\n", "model", "=", "get_model", "(", "p", ")", "\n", "print", "(", "model", ")", "\n", "model", "=", "model", ".", "cuda", "(", ")", "\n", "\n", "# Freeze all layers except final 1 by 1 convolutional layer", "\n", "for", "name", ",", "param", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "if", "name", "not", "in", "[", "'decoder.4.weight'", ",", "'decoder.4.bias'", "]", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "\n", "# Get criterion", "\n", "", "", "print", "(", "colored", "(", "'Get loss'", ",", "'blue'", ")", ")", "\n", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", "ignore_index", "=", "255", ")", "\n", "criterion", ".", "cuda", "(", ")", "\n", "print", "(", "criterion", ")", "\n", "\n", "# CUDNN", "\n", "print", "(", "colored", "(", "'Set CuDNN benchmark'", ",", "'blue'", ")", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "# Optimizer", "\n", "print", "(", "colored", "(", "'Retrieve optimizer'", ",", "'blue'", ")", ")", "\n", "parameters", "=", "list", "(", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "model", ".", "parameters", "(", ")", ")", ")", "\n", "assert", "len", "(", "parameters", ")", "==", "2", "# decoder.4.weight, decoder.4.bias", "\n", "optimizer", "=", "get_optimizer", "(", "p", ",", "parameters", ")", "\n", "print", "(", "optimizer", ")", "\n", "\n", "# Dataset", "\n", "print", "(", "colored", "(", "'Retrieve dataset'", ",", "'blue'", ")", ")", "\n", "train_transforms", "=", "get_train_transformations", "(", ")", "\n", "val_transforms", "=", "get_val_transformations", "(", ")", "\n", "train_dataset", "=", "get_train_dataset", "(", "p", ",", "train_transforms", ")", "\n", "val_dataset", "=", "get_val_dataset", "(", "p", ",", "val_transforms", ")", "\n", "true_val_dataset", "=", "get_val_dataset", "(", "p", ",", "None", ")", "# True validation dataset without reshape - For validation. ", "\n", "train_dataloader", "=", "get_train_dataloader", "(", "p", ",", "train_dataset", ")", "\n", "val_dataloader", "=", "get_val_dataloader", "(", "p", ",", "val_dataset", ")", "\n", "print", "(", "colored", "(", "'Train samples %d - Val samples %d'", "%", "(", "len", "(", "train_dataset", ")", ",", "len", "(", "val_dataset", ")", ")", ",", "'yellow'", ")", ")", "\n", "\n", "# Resume from checkpoint", "\n", "if", "os", ".", "path", ".", "exists", "(", "p", "[", "'checkpoint'", "]", ")", ":", "\n", "        ", "print", "(", "colored", "(", "'Restart from checkpoint {}'", ".", "format", "(", "p", "[", "'checkpoint'", "]", ")", ",", "'blue'", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "p", "[", "'checkpoint'", "]", ",", "map_location", "=", "'cpu'", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'model'", "]", ")", "\n", "model", ".", "cuda", "(", ")", "\n", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "best_epoch", "=", "checkpoint", "[", "'best_epoch'", "]", "\n", "best_iou", "=", "checkpoint", "[", "'best_iou'", "]", "\n", "\n", "", "else", ":", "\n", "        ", "print", "(", "colored", "(", "'No checkpoint file at {}'", ".", "format", "(", "p", "[", "'checkpoint'", "]", ")", ",", "'blue'", ")", ")", "\n", "start_epoch", "=", "0", "\n", "best_epoch", "=", "0", "\n", "best_iou", "=", "0", "\n", "model", "=", "model", ".", "cuda", "(", ")", "\n", "\n", "# Main loop", "\n", "", "print", "(", "colored", "(", "'Starting main loop'", ",", "'blue'", ")", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "start_epoch", ",", "p", "[", "'epochs'", "]", ")", ":", "\n", "        ", "print", "(", "colored", "(", "'Epoch %d/%d'", "%", "(", "epoch", "+", "1", ",", "p", "[", "'epochs'", "]", ")", ",", "'yellow'", ")", ")", "\n", "print", "(", "colored", "(", "'-'", "*", "10", ",", "'yellow'", ")", ")", "\n", "\n", "# Adjust lr", "\n", "lr", "=", "adjust_learning_rate", "(", "p", ",", "optimizer", ",", "epoch", ")", "\n", "print", "(", "'Adjusted learning rate to {:.5f}'", ".", "format", "(", "lr", ")", ")", "\n", "\n", "# Train ", "\n", "print", "(", "'Train ...'", ")", "\n", "eval_train", "=", "train_segmentation_vanilla", "(", "p", ",", "train_dataloader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "\n", "freeze_batchnorm", "=", "p", "[", "'freeze_batchnorm'", "]", ")", "\n", "\n", "# Evaluate online -> This will use batched eval where every image is resized to the same resolution.", "\n", "print", "(", "'Evaluate ...'", ")", "\n", "eval_val", "=", "eval_segmentation_supervised_online", "(", "p", ",", "val_dataloader", ",", "model", ")", "\n", "if", "eval_val", "[", "'mIoU'", "]", ">", "best_iou", ":", "\n", "            ", "print", "(", "'Found new best model: %.2f -> %.2f (mIoU)'", "%", "(", "100", "*", "best_iou", ",", "100", "*", "eval_val", "[", "'mIoU'", "]", ")", ")", "\n", "best_iou", "=", "eval_val", "[", "'mIoU'", "]", "\n", "best_epoch", "=", "epoch", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "p", "[", "'best_model'", "]", ")", "\n", "\n", "", "else", ":", "\n", "            ", "print", "(", "'No new best model: %.2f -> %.2f (mIoU)'", "%", "(", "100", "*", "best_iou", ",", "100", "*", "eval_val", "[", "'mIoU'", "]", ")", ")", "\n", "print", "(", "'Last best model was found in epoch %d'", "%", "(", "best_epoch", ")", ")", "\n", "\n", "# Checkpoint", "\n", "", "print", "(", "'Checkpoint ...'", ")", "\n", "torch", ".", "save", "(", "{", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "'model'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "'best_epoch'", ":", "best_epoch", ",", "'best_iou'", ":", "best_iou", "}", ",", "\n", "p", "[", "'checkpoint'", "]", ")", "\n", "\n", "# Evaluate best model at the end -> This will evaluate the predictions on the original resolution.", "\n", "", "print", "(", "colored", "(", "'Evaluating best model at the end'", ",", "'blue'", ")", ")", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "p", "[", "'best_model'", "]", ")", ")", "\n", "save_results_to_disk", "(", "p", ",", "val_dataloader", ",", "model", ",", "crf_postprocess", "=", "args", ".", "crf_postprocess", ")", "\n", "eval_stats", "=", "eval_segmentation_supervised_offline", "(", "p", ",", "true_val_dataset", ",", "verbose", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.segmentation.retrieval.main": [[31, 80], ["cv2.setNumThreads", "utils.config.create_config", "utils.logger.Logger", "print", "print", "print", "utils.common_config.get_model", "print", "model.cuda.cuda", "torch.load", "torch.load", "torch.load.items", "model.cuda.load_state_dict", "print", "print", "print", "utils.common_config.get_val_transformations", "print", "VOC12", "VOC12", "utils.common_config.get_val_dataloader", "utils.common_config.get_val_dataloader", "print", "print", "print", "utils.retrieval_utils.build_memory_bank", "utils.retrieval_utils.retrieval", "os.path.join", "termcolor.colored", "termcolor.colored", "torch.load.keys", "k.startswith", "termcolor.colored", "termcolor.colored", "termcolor.colored", "os.path.abspath", "str", "str", "len", "len", "k.rsplit"], "function", ["home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.config.create_config", "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.common_config.get_model", "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.common_config.get_val_transformations", "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.common_config.get_val_dataloader", "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.common_config.get_val_dataloader", "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.retrieval_utils.build_memory_bank", "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.retrieval_utils.retrieval"], ["def", "main", "(", ")", ":", "\n", "    ", "cv2", ".", "setNumThreads", "(", "1", ")", "\n", "\n", "# Retrieve config file", "\n", "p", "=", "create_config", "(", "args", ".", "config_env", ",", "args", ".", "config_exp", ")", "\n", "sys", ".", "stdout", "=", "Logger", "(", "os", ".", "path", ".", "join", "(", "p", "[", "'retrieval_dir'", "]", ",", "'log_file.txt'", ")", ")", "\n", "print", "(", "'Python script is {}'", ".", "format", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", ")", "\n", "print", "(", "colored", "(", "p", ",", "'red'", ")", ")", "\n", "\n", "# Get model", "\n", "print", "(", "colored", "(", "'Retrieve model'", ",", "'blue'", ")", ")", "\n", "model", "=", "get_model", "(", "p", ")", "\n", "print", "(", "model", ")", "\n", "model", "=", "model", ".", "cuda", "(", ")", "\n", "\n", "# Load pre-trained weights", "\n", "state_dict", "=", "torch", ".", "load", "(", "p", "[", "'pretraining'", "]", ",", "map_location", "=", "'cpu'", ")", "\n", "# State dict follows our lay-out", "\n", "if", "'model'", "in", "state_dict", ".", "keys", "(", ")", ":", "\n", "        ", "state_dict", "=", "state_dict", "[", "'model'", "]", "\n", "", "new_state", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "k", ".", "startswith", "(", "'module.model_q'", ")", ":", "\n", "            ", "new_state", "[", "k", ".", "rsplit", "(", "'module.model_q.'", ")", "[", "1", "]", "]", "=", "v", "\n", "", "", "msg", "=", "model", ".", "load_state_dict", "(", "new_state", ",", "strict", "=", "False", ")", "\n", "print", "(", "msg", ")", "\n", "\n", "# CUDNN", "\n", "print", "(", "colored", "(", "'Set CuDNN benchmark'", ",", "'blue'", ")", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "# Dataset", "\n", "print", "(", "colored", "(", "'Retrieve dataset'", ",", "'blue'", ")", ")", "\n", "\n", "# Transforms ", "\n", "from", "data", ".", "dataloaders", ".", "pascal_voc", "import", "VOC12", "\n", "val_transforms", "=", "get_val_transformations", "(", ")", "\n", "print", "(", "val_transforms", ")", "\n", "train_dataset", "=", "VOC12", "(", "split", "=", "'train'", ",", "transform", "=", "val_transforms", ",", "ignore_classes", "=", "p", "[", "'retrieval_kwargs'", "]", "[", "'ignore_classes'", "]", ")", "\n", "val_dataset", "=", "VOC12", "(", "split", "=", "'val'", ",", "transform", "=", "val_transforms", ",", "ignore_classes", "=", "p", "[", "'retrieval_kwargs'", "]", "[", "'ignore_classes'", "]", ")", "\n", "train_dataloader", "=", "get_val_dataloader", "(", "p", ",", "train_dataset", ")", "\n", "val_dataloader", "=", "get_val_dataloader", "(", "p", ",", "val_dataset", ")", "\n", "print", "(", "'Train dataset {} - Val dataset {}'", ".", "format", "(", "str", "(", "train_dataset", ")", ",", "str", "(", "val_dataset", ")", ")", ")", "\n", "print", "(", "'Train samples {} - Val samples {}'", ".", "format", "(", "len", "(", "train_dataset", ")", ",", "len", "(", "val_dataset", ")", ")", ")", "\n", "\n", "# Build memory bank", "\n", "print", "(", "colored", "(", "'Perform retrieval ...'", ",", "'blue'", ")", ")", "\n", "memory_bank", "=", "build_memory_bank", "(", "p", ",", "train_dataset", ",", "train_dataloader", ",", "model", ")", "\n", "results", "=", "retrieval", "(", "p", ",", "memory_bank", ",", "val_dataset", ",", "val_dataloader", ",", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.segmentation.kmeans.main": [[31, 82], ["cv2.setNumThreads", "utils.config.create_config", "print", "print", "print", "utils.common_config.get_model", "print", "model.cuda.cuda", "torch.load", "torch.load", "torch.load.items", "model.cuda.load_state_dict", "print", "print", "print", "utils.common_config.get_val_transformations", "print", "VOC12", "utils.common_config.get_val_dataloader", "VOC12", "print", "range", "print", "termcolor.colored", "termcolor.colored", "torch.load.keys", "k.startswith", "termcolor.colored", "termcolor.colored", "termcolor.colored", "utils.kmeans_utils.save_embeddings_to_disk", "utils.kmeans_utils.eval_kmeans", "results_miou.append", "termcolor.colored", "os.path.abspath", "len", "numpy.mean", "k.rsplit"], "function", ["home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.config.create_config", "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.common_config.get_model", "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.common_config.get_val_transformations", "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.common_config.get_val_dataloader", "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.kmeans_utils.save_embeddings_to_disk", "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.kmeans_utils.eval_kmeans"], ["def", "main", "(", ")", ":", "\n", "    ", "cv2", ".", "setNumThreads", "(", "1", ")", "\n", "\n", "# Retrieve config file", "\n", "p", "=", "create_config", "(", "args", ".", "config_env", ",", "args", ".", "config_exp", ")", "\n", "print", "(", "'Python script is {}'", ".", "format", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", ")", "\n", "print", "(", "colored", "(", "p", ",", "'red'", ")", ")", "\n", "\n", "# Get model", "\n", "print", "(", "colored", "(", "'Retrieve model'", ",", "'blue'", ")", ")", "\n", "model", "=", "get_model", "(", "p", ")", "\n", "print", "(", "model", ")", "\n", "model", "=", "model", ".", "cuda", "(", ")", "\n", "\n", "# Load pre-trained weights", "\n", "state_dict", "=", "torch", ".", "load", "(", "p", "[", "'pretraining'", "]", ",", "map_location", "=", "'cpu'", ")", "\n", "# State dict follows our lay-out", "\n", "if", "'model'", "in", "state_dict", ".", "keys", "(", ")", ":", "\n", "        ", "state_dict", "=", "state_dict", "[", "'model'", "]", "\n", "", "new_state", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "k", ".", "startswith", "(", "'module.model_q'", ")", ":", "\n", "            ", "new_state", "[", "k", ".", "rsplit", "(", "'module.model_q.'", ")", "[", "1", "]", "]", "=", "v", "\n", "", "", "msg", "=", "model", ".", "load_state_dict", "(", "new_state", ",", "strict", "=", "False", ")", "\n", "print", "(", "msg", ")", "\n", "\n", "# CUDNN", "\n", "print", "(", "colored", "(", "'Set CuDNN benchmark'", ",", "'blue'", ")", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "# Dataset", "\n", "print", "(", "colored", "(", "'Retrieve dataset'", ",", "'blue'", ")", ")", "\n", "\n", "# Transforms ", "\n", "from", "data", ".", "dataloaders", ".", "pascal_voc", "import", "VOC12", "\n", "val_transforms", "=", "get_val_transformations", "(", ")", "\n", "print", "(", "val_transforms", ")", "\n", "val_dataset", "=", "VOC12", "(", "split", "=", "'val'", ",", "transform", "=", "val_transforms", ")", "\n", "val_dataloader", "=", "get_val_dataloader", "(", "p", ",", "val_dataset", ")", "\n", "\n", "true_val_dataset", "=", "VOC12", "(", "split", "=", "'val'", ",", "transform", "=", "None", ")", "\n", "print", "(", "colored", "(", "'Val samples %d'", "%", "(", "len", "(", "true_val_dataset", ")", ")", ",", "'yellow'", ")", ")", "\n", "\n", "# Kmeans Clustering", "\n", "n_clusters", "=", "21", "\n", "results_miou", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "args", ".", "num_seeds", ")", ":", "\n", "        ", "save_embeddings_to_disk", "(", "p", ",", "val_dataloader", ",", "model", ",", "n_clusters", "=", "n_clusters", ",", "seed", "=", "1234", "+", "i", ")", "\n", "eval_stats", "=", "eval_kmeans", "(", "p", ",", "true_val_dataset", ",", "n_clusters", "=", "n_clusters", ",", "verbose", "=", "True", ")", "\n", "results_miou", ".", "append", "(", "eval_stats", "[", "'mIoU'", "]", ")", "\n", "", "print", "(", "colored", "(", "'Average mIoU is %2.1f'", "%", "(", "np", ".", "mean", "(", "results_miou", ")", "*", "100", ")", ",", "'green'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.collate.collate_custom": [[11, 39], ["isinstance", "isinstance", "TypeError", "numpy.stack", "torch.stack", "isinstance", "numpy.stack", "isinstance", "type", "torch.LongTensor", "isinstance", "torch.FloatTensor", "isinstance", "isinstance", "isinstance", "collate.collate_custom", "zip", "collate.collate_custom", "key.find"], "function", ["home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.collate.collate_custom", "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.collate.collate_custom"], ["\n", "def", "collate_custom", "(", "batch", ")", ":", "\n", "    ", "if", "isinstance", "(", "batch", "[", "0", "]", ",", "np", ".", "int64", ")", ":", "\n", "        ", "return", "np", ".", "stack", "(", "batch", ",", "0", ")", "\n", "\n", "", "if", "isinstance", "(", "batch", "[", "0", "]", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "return", "torch", ".", "stack", "(", "batch", ",", "0", ")", "\n", "\n", "", "elif", "isinstance", "(", "batch", "[", "0", "]", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "return", "np", ".", "stack", "(", "batch", ",", "0", ")", "\n", "\n", "", "elif", "isinstance", "(", "batch", "[", "0", "]", ",", "int_classes", ")", ":", "\n", "        ", "return", "torch", ".", "LongTensor", "(", "batch", ")", "\n", "\n", "", "elif", "isinstance", "(", "batch", "[", "0", "]", ",", "float", ")", ":", "\n", "        ", "return", "torch", ".", "FloatTensor", "(", "batch", ")", "\n", "\n", "", "elif", "isinstance", "(", "batch", "[", "0", "]", ",", "string_classes", ")", ":", "\n", "        ", "return", "batch", "\n", "\n", "", "elif", "isinstance", "(", "batch", "[", "0", "]", ",", "collections", ".", "Mapping", ")", ":", "\n", "        ", "batch_modified", "=", "{", "key", ":", "collate_custom", "(", "[", "d", "[", "key", "]", "for", "d", "in", "batch", "]", ")", "for", "key", "in", "batch", "[", "0", "]", "if", "key", ".", "find", "(", "'idx'", ")", "<", "0", "}", "\n", "return", "batch_modified", "\n", "\n", "", "elif", "isinstance", "(", "batch", "[", "0", "]", ",", "collections", ".", "Sequence", ")", ":", "\n", "        ", "transposed", "=", "zip", "(", "*", "batch", ")", "\n", "return", "[", "collate_custom", "(", "samples", ")", "for", "samples", "in", "transposed", "]", "\n", "\n", "", "raise", "TypeError", "(", "(", "'Type is {}'", ".", "format", "(", "type", "(", "batch", "[", "0", "]", ")", ")", ")", ")", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.config.load_config": [[11, 21], ["easydict.EasyDict", "yaml.safe_load.items", "open", "yaml.safe_load"], "function", ["None"], ["def", "load_config", "(", "config_file_exp", ")", ":", "\n", "    ", "with", "open", "(", "config_file_exp", ",", "'r'", ")", "as", "stream", ":", "\n", "        ", "config", "=", "yaml", ".", "safe_load", "(", "stream", ")", "\n", "\n", "", "cfg", "=", "EasyDict", "(", ")", "\n", "\n", "for", "k", ",", "v", "in", "config", ".", "items", "(", ")", ":", "\n", "        ", "cfg", "[", "k", "]", "=", "v", "\n", "\n", "", "return", "cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.config.create_config": [[23, 45], ["easydict.EasyDict", "yaml.safe_load.items", "os.path.join", "utils.utils.mkdir_if_missing", "os.path.join", "os.path.join", "open", "open", "yaml.safe_load", "yaml.safe_load", "os.path.basename().split", "os.path.basename"], "function", ["home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.utils.mkdir_if_missing"], ["", "def", "create_config", "(", "config_file_env", ",", "config_file_exp", ",", "run_idx", "=", "None", ")", ":", "\n", "# Config for environment path", "\n", "    ", "with", "open", "(", "config_file_env", ",", "'r'", ")", "as", "stream", ":", "\n", "        ", "root_dir", "=", "yaml", ".", "safe_load", "(", "stream", ")", "[", "'root_dir'", "]", "\n", "\n", "", "with", "open", "(", "config_file_exp", ",", "'r'", ")", "as", "stream", ":", "\n", "        ", "config", "=", "yaml", ".", "safe_load", "(", "stream", ")", "\n", "\n", "", "cfg", "=", "EasyDict", "(", ")", "\n", "\n", "# Copy", "\n", "for", "k", ",", "v", "in", "config", ".", "items", "(", ")", ":", "\n", "        ", "cfg", "[", "k", "]", "=", "v", "\n", "\n", "# Num classes", "\n", "", "if", "cfg", "[", "'train_db_name'", "]", "==", "'VOCSegmentation'", ":", "\n", "        ", "cfg", "[", "'num_classes'", "]", "=", "20", "\n", "cfg", "[", "'has_bg'", "]", "=", "True", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Invalid train db name {}'", ".", "format", "(", "cfg", "[", "'train_db_name'", "]", ")", ")", "\n", "\n", "# Paths ", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.retrieval_utils.build_memory_bank": [[11, 58], ["torch.no_grad", "torch.no_grad", "print", "model.eval", "torch.zeros().float", "torch.zeros().float", "torch.zeros().long", "torch.zeros().long", "enumerate", "model", "output.reshape.reshape", "sal.reshape().type", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.functional.normalize", "range", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "batch[].cuda", "numpy.unique", "set().issubset", "print", "len", "len", "sal.reshape", "torch.bmm", "torch.bmm", "torch.sum().item", "torch.sum().item", "semseg_jj[].numpy", "set", "max", "set", "len", "torch.sum", "torch.sum", "zip"], "function", ["None"], ["@", "torch", ".", "no_grad", "(", ")", "\n", "def", "build_memory_bank", "(", "p", ",", "dataset", ",", "loader", ",", "model", ")", ":", "\n", "    ", "print", "(", "'Building memory bank ...'", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "ptr", "=", "0", "\n", "\n", "all_prototypes", "=", "torch", ".", "zeros", "(", "len", "(", "dataset", ")", ",", "p", "[", "'model_kwargs'", "]", "[", "'ndim'", "]", ")", ".", "float", "(", ")", "\n", "all_labels", "=", "torch", ".", "zeros", "(", "len", "(", "dataset", ")", ")", ".", "long", "(", ")", "\n", "\n", "for", "i", ",", "batch", "in", "enumerate", "(", "loader", ")", ":", "\n", "        ", "semseg", "=", "batch", "[", "'semseg'", "]", "\n", "output", ",", "sal", "=", "model", "(", "batch", "[", "'image'", "]", ".", "cuda", "(", "non_blocking", "=", "True", ")", ")", "\n", "\n", "# compute prototype per salient object", "\n", "bs", ",", "dim", ",", "_", ",", "_", "=", "output", ".", "shape", "\n", "output", "=", "output", ".", "reshape", "(", "bs", ",", "dim", ",", "-", "1", ")", "# B x dim x H.W", "\n", "sal_proto", "=", "sal", ".", "reshape", "(", "bs", ",", "-", "1", ",", "1", ")", ".", "type", "(", "output", ".", "dtype", ")", "# B x H.W x 1", "\n", "prototypes", "=", "torch", ".", "bmm", "(", "output", ",", "sal_proto", "*", "(", "sal_proto", ">", "0.5", ")", ".", "float", "(", ")", ")", ".", "squeeze", "(", ")", "# B x dim", "\n", "prototypes", "=", "nn", ".", "functional", ".", "normalize", "(", "prototypes", ",", "dim", "=", "1", ")", "\n", "\n", "# compute majority vote per salient object", "\n", "sal", "=", "(", "sal", ">", "0.5", ")", ".", "cpu", "(", ")", "\n", "for", "jj", "in", "range", "(", "bs", ")", ":", "\n", "            ", "sal_jj", ",", "semseg_jj", "=", "sal", "[", "jj", "]", ",", "semseg", "[", "jj", "]", "\n", "\n", "# did we detect a salient object", "\n", "if", "torch", ".", "sum", "(", "sal_jj", ")", ".", "item", "(", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "\n", "# does the salient object contain a class of interest - Not all background/ignore index.", "\n", "# suggestion for improvement -> throw out image based upon gt.", "\n", "", "classes", ",", "counts", "=", "np", ".", "unique", "(", "semseg_jj", "[", "sal_jj", "]", ".", "numpy", "(", ")", ",", "return_counts", "=", "True", ")", "\n", "if", "set", "(", "classes", ")", ".", "issubset", "(", "set", "(", "{", "0", ",", "255", "}", ")", ")", ":", "\n", "                ", "continue", "\n", "\n", "# get majority vote", "\n", "", "majority_vote", "=", "max", "(", "[", "(", "count_", ",", "class_", ")", "for", "class_", ",", "count_", "in", "zip", "(", "classes", ",", "counts", ")", "if", "class_", "not", "in", "[", "0", ",", "255", "]", "]", ")", "[", "1", "]", "\n", "all_prototypes", "[", "ptr", "]", "=", "prototypes", "[", "jj", "]", "\n", "all_labels", "[", "ptr", "]", "=", "majority_vote", "\n", "ptr", "+=", "1", "\n", "\n", "# print progress", "\n", "", "if", "(", "i", "+", "1", ")", "%", "25", "==", "0", ":", "\n", "            ", "print", "(", "'Progress [{}/{}]'", ".", "format", "(", "i", "+", "1", ",", "len", "(", "loader", ")", ")", ")", "\n", "\n", "", "", "return", "{", "'prototypes'", ":", "all_prototypes", "[", ":", "ptr", "]", ",", "'labels'", ":", "all_labels", "[", ":", "ptr", "]", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.retrieval_utils.retrieval": [[60, 116], ["torch.no_grad", "torch.no_grad", "print", "model.eval", "memory_bank[].cuda", "memory_bank[].cuda", "utils.utils.SemsegMeter", "enumerate", "val_dataset.get_class_names", "batch[].cuda", "batch[].cuda.size", "model", "output.reshape.reshape", "sal.reshape().type", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.functional.normalize", "torch.matmul", "torch.matmul", "torch.argmax", "torch.argmax", "torch.index_select", "torch.index_select", "torch.LongTensor().zero_().cuda", "torch.LongTensor().zero_().cuda", "range", "utils.utils.SemsegMeter.update", "len", "utils.utils.SemsegMeter.return_score", "print", "utils.utils.SemsegMeter.return_score", "range", "print", "batch[].cuda", "memory_bank[].cuda.t", "print", "print", "iou.append", "sal.reshape", "torch.bmm", "torch.bmm", "torch.LongTensor().zero_", "torch.LongTensor().zero_", "len", "numpy.mean", "torch.LongTensor", "torch.LongTensor", "val_dataset.get_class_names"], "function", ["home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.dataloaders.pascal_voc.VOCSegmentation.get_class_names", "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.utils.SemsegMeter.return_score", "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.utils.SemsegMeter.return_score", "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.dataloaders.pascal_voc.VOCSegmentation.get_class_names"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "retrieval", "(", "p", ",", "memory_bank", ",", "val_dataset", ",", "val_loader", ",", "model", ")", ":", "\n", "    ", "print", "(", "'Performing retrieval ...'", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "memory_prototypes", "=", "memory_bank", "[", "'prototypes'", "]", ".", "cuda", "(", ")", "\n", "memory_labels", "=", "memory_bank", "[", "'labels'", "]", ".", "cuda", "(", ")", "\n", "\n", "meter", "=", "SemsegMeter", "(", "p", "[", "'num_classes'", "]", ",", "val_dataset", ".", "get_class_names", "(", ")", ",", "\n", "p", "[", "'has_bg'", "]", ",", "ignore_index", "=", "255", ")", "\n", "\n", "for", "i", ",", "batch", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "        ", "semseg", "=", "batch", "[", "'semseg'", "]", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "b", ",", "h", ",", "w", "=", "semseg", ".", "size", "(", ")", "\n", "output", ",", "sal", "=", "model", "(", "batch", "[", "'image'", "]", ".", "cuda", "(", "non_blocking", "=", "True", ")", ")", "\n", "\n", "# compute prototype per salient object", "\n", "bs", ",", "dim", ",", "_", ",", "_", "=", "output", ".", "shape", "\n", "output", "=", "output", ".", "reshape", "(", "bs", ",", "dim", ",", "-", "1", ")", "# B x dim x H.W", "\n", "sal_proto", "=", "sal", ".", "reshape", "(", "bs", ",", "-", "1", ",", "1", ")", ".", "type", "(", "output", ".", "dtype", ")", "# B x H.W x 1", "\n", "prototypes", "=", "torch", ".", "bmm", "(", "output", ",", "sal_proto", "*", "(", "sal_proto", ">", "0.5", ")", ".", "float", "(", ")", ")", ".", "squeeze", "(", ")", "# B x dim", "\n", "prototypes", "=", "nn", ".", "functional", ".", "normalize", "(", "prototypes", ",", "dim", "=", "1", ")", "\n", "\n", "# find nearest neighbor", "\n", "correlation", "=", "torch", ".", "matmul", "(", "prototypes", ",", "memory_prototypes", ".", "t", "(", ")", ")", "\n", "neighbors", "=", "torch", ".", "argmax", "(", "correlation", ",", "dim", "=", "1", ")", "\n", "class_pred", "=", "torch", ".", "index_select", "(", "memory_labels", ",", "0", ",", "neighbors", ")", "\n", "\n", "# construct prediction", "\n", "pred", "=", "torch", ".", "LongTensor", "(", "b", ",", "h", ",", "w", ")", ".", "zero_", "(", ")", ".", "cuda", "(", ")", "\n", "for", "jj", "in", "range", "(", "b", ")", ":", "\n", "            ", "pred", "[", "jj", "]", "[", "sal", "[", "jj", "]", ">", "0.5", "]", "=", "class_pred", "[", "jj", "]", "\n", "\n", "# update meter", "\n", "", "meter", ".", "update", "(", "pred", ",", "semseg", ")", "\n", "\n", "# print progress", "\n", "if", "(", "i", "+", "1", ")", "%", "25", "==", "0", ":", "\n", "            ", "print", "(", "'Progress [{}/{}]'", ".", "format", "(", "i", "+", "1", ",", "len", "(", "val_loader", ")", ")", ")", "\n", "\n", "\n", "", "", "if", "len", "(", "val_dataset", ".", "ignore_classes", ")", "==", "0", ":", "# We keep all classes", "\n", "        ", "eval_results", "=", "meter", ".", "return_score", "(", "verbose", "=", "True", ")", "\n", "\n", "", "else", ":", "# We defined classes to be ignored - Also remove background", "\n", "        ", "print", "(", "'Evaluation of semantic segmentation'", ")", "\n", "eval_results", "=", "meter", ".", "return_score", "(", "verbose", "=", "False", ")", "\n", "ignore_classes", "=", "[", "0", "]", "+", "val_dataset", ".", "ignore_classes", "\n", "iou", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "p", "[", "'num_classes'", "]", "+", "p", "[", "'has_bg'", "]", ")", ":", "\n", "            ", "if", "i", "in", "ignore_classes", ":", "\n", "                ", "continue", "\n", "\n", "", "print", "(", "'IoU class {} is {:.2f}'", ".", "format", "(", "val_dataset", ".", "get_class_names", "(", ")", "[", "i", "]", ",", "100", "*", "eval_results", "[", "'jaccards_all_categs'", "]", "[", "i", "]", ")", ")", "\n", "iou", ".", "append", "(", "eval_results", "[", "'jaccards_all_categs'", "]", "[", "i", "]", ")", "\n", "", "print", "(", "'Mean IoU is {:.2f}'", ".", "format", "(", "100", "*", "np", ".", "mean", "(", "iou", ")", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.crf.dense_crf": [[22, 46], ["cv2.imread().astype", "np.ascontiguousarray.astype", "numpy.ascontiguousarray", "torch.interpolate().squeeze", "torch.softmax().cpu().numpy", "pydensecrf.unary_from_softmax", "numpy.ascontiguousarray", "pydensecrf.DenseCRF2D", "dcrf.DenseCRF2D.setUnaryEnergy", "dcrf.DenseCRF2D.addPairwiseGaussian", "dcrf.DenseCRF2D.addPairwiseBilateral", "dcrf.DenseCRF2D.inference", "numpy.array().reshape", "cv2.imread", "torch.interpolate", "torch.softmax().cpu", "numpy.array", "F.interpolate().squeeze.unsqueeze", "torch.softmax"], "function", ["None"], ["def", "dense_crf", "(", "image_path", ":", "str", ",", "output_logits", ":", "torch", ".", "FloatTensor", ")", ":", "\n", "    ", "image", "=", "cv2", ".", "imread", "(", "image_path", ",", "cv2", ".", "IMREAD_COLOR", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "image", "=", "image", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "H", ",", "W", "=", "image", ".", "shape", "[", ":", "2", "]", "\n", "image", "=", "np", ".", "ascontiguousarray", "(", "image", ")", "\n", "\n", "output_logits", "=", "F", ".", "interpolate", "(", "output_logits", ".", "unsqueeze", "(", "0", ")", ",", "size", "=", "(", "H", ",", "W", ")", ",", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "False", ")", ".", "squeeze", "(", ")", "\n", "output_probs", "=", "F", ".", "softmax", "(", "output_logits", ",", "dim", "=", "0", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "c", "=", "output_probs", ".", "shape", "[", "0", "]", "\n", "h", "=", "output_probs", ".", "shape", "[", "1", "]", "\n", "w", "=", "output_probs", ".", "shape", "[", "2", "]", "\n", "\n", "U", "=", "utils", ".", "unary_from_softmax", "(", "output_probs", ")", "\n", "U", "=", "np", ".", "ascontiguousarray", "(", "U", ")", "\n", "\n", "d", "=", "dcrf", ".", "DenseCRF2D", "(", "w", ",", "h", ",", "c", ")", "\n", "d", ".", "setUnaryEnergy", "(", "U", ")", "\n", "d", ".", "addPairwiseGaussian", "(", "sxy", "=", "POS_XY_STD", ",", "compat", "=", "POS_W", ")", "\n", "d", ".", "addPairwiseBilateral", "(", "sxy", "=", "Bi_XY_STD", ",", "srgb", "=", "Bi_RGB_STD", ",", "rgbim", "=", "image", ",", "compat", "=", "Bi_W", ")", "\n", "\n", "Q", "=", "d", ".", "inference", "(", "MAX_ITER", ")", "\n", "Q", "=", "np", ".", "array", "(", "Q", ")", ".", "reshape", "(", "(", "c", ",", "h", ",", "w", ")", ")", "\n", "return", "Q", "\n", "", ""]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.common_config.load_pretrained_weights": [[14, 42], ["print", "load_state_dict_from_url", "model.load_state_dict", "print", "print", "load_state_dict_from_url.items", "model.load_state_dict", "all", "all", "ValueError", "torch.load", "k.startswith", "k.rsplit"], "function", ["None"], ["def", "load_pretrained_weights", "(", "p", ",", "model", ")", ":", "\n", "# Load weights from pre-training", "\n", "    ", "print", "(", "'Loading pre-trained weights from {}'", ".", "format", "(", "p", "[", "'pretraining'", "]", ")", ")", "\n", "state_dict", "=", "torch", ".", "load", "(", "p", "[", "'pretraining'", "]", ",", "map_location", "=", "'cpu'", ")", "[", "'model'", "]", "\n", "new_state", "=", "{", "}", "\n", "\n", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "k", ".", "startswith", "(", "'module.model_q.'", ")", ":", "\n", "            ", "new_state", "[", "k", ".", "rsplit", "(", "'module.model_q.'", ")", "[", "1", "]", "]", "=", "v", "\n", "\n", "", "else", ":", "\n", "            ", "pass", "\n", "\n", "", "", "msg", "=", "model", ".", "load_state_dict", "(", "new_state", ",", "strict", "=", "False", ")", "\n", "print", "(", "'Loading state dict from checkpoint'", ")", "\n", "print", "(", "'Warning: This piece of code was only tested for linear classification'", ")", "\n", "print", "(", "'Warning: Assertions should probably depend on model type (Segm/ContrastiveSegm)'", ")", "\n", "assert", "(", "set", "(", "msg", "[", "0", "]", ")", "==", "set", "(", "[", "'decoder.4.weight'", ",", "'decoder.4.bias'", "]", ")", ")", "\n", "assert", "(", "set", "(", "msg", "[", "1", "]", ")", "==", "set", "(", "[", "'head.weight'", ",", "'head.bias'", ",", "'classification_head.weight'", "]", ")", ")", "\n", "\n", "# Init final conv layer", "\n", "if", "'deeplab'", "in", "p", "[", "'head'", "]", ":", "\n", "        ", "model", ".", "decoder", "[", "4", "]", ".", "weight", ".", "data", ".", "normal_", "(", "mean", "=", "0.0", ",", "std", "=", "0.01", ")", "\n", "model", ".", "decoder", "[", "4", "]", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n", "\n", "", "", "def", "get_model", "(", "p", ")", ":", "\n", "# Get backbone", "\n", "    ", "if", "p", "[", "'backbone'", "]", "==", "'resnet18'", ":", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.common_config.get_model": [[43, 80], ["ContrastiveSegmentationModel", "common_config.load_pretrained_weights", "ResnetDilated", "DeepLabHead", "ValueError", "ValueError"], "function", ["home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.common_config.load_pretrained_weights"], ["        ", "import", "torchvision", ".", "models", ".", "resnet", "as", "resnet", "\n", "backbone", "=", "resnet", ".", "__dict__", "[", "'resnet18'", "]", "(", "pretrained", "=", "False", ")", "\n", "backbone_channels", "=", "512", "\n", "\n", "", "elif", "p", "[", "'backbone'", "]", "==", "'resnet50'", ":", "\n", "        ", "import", "torchvision", ".", "models", ".", "resnet", "as", "resnet", "\n", "backbone", "=", "resnet", ".", "__dict__", "[", "'resnet50'", "]", "(", "pretrained", "=", "False", ")", "\n", "backbone_channels", "=", "2048", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Invalid backbone {}'", ".", "format", "(", "p", "[", "'backbone'", "]", ")", ")", "\n", "\n", "", "if", "p", "[", "'backbone_kwargs'", "]", "[", "'dilated'", "]", ":", "\n", "        ", "from", "models", ".", "resnet_dilated", "import", "ResnetDilated", "\n", "backbone", "=", "ResnetDilated", "(", "backbone", ")", "\n", "\n", "# Get head", "\n", "", "if", "p", "[", "'head'", "]", "==", "'deeplab'", ":", "\n", "        ", "if", "not", "p", "[", "'kmeans_eval'", "]", ":", "\n", "            ", "nc", "=", "p", "[", "'num_classes'", "]", "+", "int", "(", "p", "[", "'has_bg'", "]", ")", "\n", "", "else", ":", "\n", "            ", "nc", "=", "p", "[", "'model_kwargs'", "]", "[", "'ndim'", "]", "\n", "\n", "", "from", "models", ".", "deeplab", "import", "DeepLabHead", "\n", "head", "=", "DeepLabHead", "(", "backbone_channels", ",", "nc", ")", "\n", "\n", "", "elif", "p", "[", "'head'", "]", "==", "'dim_reduction'", ":", "\n", "        ", "nc", "=", "p", "[", "'num_classes'", "]", "+", "int", "(", "p", "[", "'has_bg'", "]", ")", "\n", "import", "torch", ".", "nn", "as", "nn", "\n", "head", "=", "nn", ".", "Conv2d", "(", "backbone_channels", ",", "nc", ",", "1", ")", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Invalid head {}'", ".", "format", "(", "p", "[", "'head'", "]", ")", ")", "\n", "\n", "# Compose model from backbone and head", "\n", "", "if", "p", "[", "'kmeans_eval'", "]", ":", "\n", "        ", "from", "models", ".", "models", "import", "ContrastiveSegmentationModel", "\n", "import", "torch", ".", "nn", "as", "nn", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.common_config.get_train_dataset": [[82, 91], ["VOCSegmentation", "ValueError", "data.util.mypath.Path.db_root_dir"], "function", ["home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.util.mypath.Path.db_root_dir"], ["p", "[", "'model_kwargs'", "]", "[", "'upsample'", "]", ",", "\n", "p", "[", "'model_kwargs'", "]", "[", "'use_classification_head'", "]", ",", "p", "[", "'freeze_layer'", "]", ")", "\n", "", "else", ":", "\n", "        ", "from", "models", ".", "models", "import", "SimpleSegmentationModel", "\n", "model", "=", "SimpleSegmentationModel", "(", "backbone", ",", "head", ")", "\n", "\n", "# Load pretrained weights", "\n", "load_pretrained_weights", "(", "p", ",", "model", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.common_config.get_val_dataset": [[104, 113], ["VOC12", "ValueError"], "function", ["None"], ["", "def", "get_val_dataset", "(", "p", ",", "transform", "=", "None", ")", ":", "\n", "    ", "if", "p", "[", "'val_db_name'", "]", "==", "'VOCSegmentation'", ":", "\n", "        ", "from", "data", ".", "dataloaders", ".", "pascal_voc", "import", "VOC12", "\n", "dataset", "=", "VOC12", "(", "split", "=", "'val'", ",", "transform", "=", "transform", ")", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Invalid validation dataset {}'", ".", "format", "(", "p", "[", "'val_db_name'", "]", ")", ")", "\n", "\n", "", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.common_config.get_train_dataloader": [[93, 97], ["torch.utils.data.DataLoader"], "function", ["None"], ["", "def", "get_train_dataset", "(", "p", ",", "transform", "=", "None", ")", ":", "\n", "    ", "if", "p", "[", "'train_db_name'", "]", "==", "'VOCSegmentation'", ":", "\n", "        ", "from", "data", ".", "dataloaders", ".", "pascal_voc", "import", "VOC12", "\n", "dataset", "=", "VOC12", "(", "split", "=", "p", "[", "'train_db_kwargs'", "]", "[", "'split'", "]", ",", "transform", "=", "transform", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.common_config.get_val_dataloader": [[121, 125], ["torch.utils.data.DataLoader"], "function", ["None"], ["", "def", "get_val_dataloader", "(", "p", ",", "dataset", ")", ":", "\n", "    ", "return", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "num_workers", "=", "p", "[", "'num_workers'", "]", ",", "\n", "batch_size", "=", "p", "[", "'val_db_kwargs'", "]", "[", "'batch_size'", "]", ",", "pin_memory", "=", "True", ",", "\n", "collate_fn", "=", "collate_custom", ",", "drop_last", "=", "False", ",", "shuffle", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.common_config.get_train_transformations": [[99, 113], ["torchvision.transforms.Compose", "data.RandomResizedCrop", "torchvision.transforms.RandomApply", "data.RandomGrayscale", "data.RandomHorizontalFlip", "data.ToTensor", "data.Normalize", "data.ColorJitter"], "function", ["None"], ["        ", "raise", "ValueError", "(", "'Invalid train dataset {}'", ".", "format", "(", "p", "[", "'train_db_name'", "]", ")", ")", "\n", "\n", "", "return", "dataset", "\n", "\n", "\n", "", "def", "get_val_dataset", "(", "p", ",", "transform", "=", "None", ")", ":", "\n", "    ", "if", "p", "[", "'val_db_name'", "]", "==", "'VOCSegmentation'", ":", "\n", "        ", "from", "data", ".", "dataloaders", ".", "pascal_voc", "import", "VOC12", "\n", "dataset", "=", "VOC12", "(", "split", "=", "'val'", ",", "transform", "=", "transform", ")", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Invalid validation dataset {}'", ".", "format", "(", "p", "[", "'val_db_name'", "]", ")", ")", "\n", "\n", "", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.common_config.get_val_transformations": [[115, 124], ["torchvision.transforms.Compose", "data.Resize", "data.ToTensor", "data.Normalize"], "function", ["None"], ["", "def", "get_train_dataloader", "(", "p", ",", "dataset", ")", ":", "\n", "    ", "return", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "num_workers", "=", "p", "[", "'num_workers'", "]", ",", "\n", "batch_size", "=", "p", "[", "'train_db_kwargs'", "]", "[", "'batch_size'", "]", ",", "pin_memory", "=", "True", ",", "\n", "collate_fn", "=", "collate_custom", ",", "drop_last", "=", "True", ",", "shuffle", "=", "True", ")", "\n", "\n", "\n", "", "def", "get_val_dataloader", "(", "p", ",", "dataset", ")", ":", "\n", "    ", "return", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "num_workers", "=", "p", "[", "'num_workers'", "]", ",", "\n", "batch_size", "=", "p", "[", "'val_db_kwargs'", "]", "[", "'batch_size'", "]", ",", "pin_memory", "=", "True", ",", "\n", "collate_fn", "=", "collate_custom", ",", "drop_last", "=", "False", ",", "shuffle", "=", "False", ")", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.common_config.get_optimizer": [[126, 137], ["torch.optim.SGD", "torch.optim.Adam", "ValueError"], "function", ["None"], ["\n", "", "def", "get_train_transformations", "(", "augmentation_strategy", "=", "'pascal'", ")", ":", "\n", "    ", "return", "transforms", ".", "Compose", "(", "[", "custom_tr", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "custom_tr", ".", "ScaleNRotate", "(", "rots", "=", "(", "-", "5", ",", "5", ")", ",", "scales", "=", "(", ".75", ",", "1.25", ")", ",", "\n", "flagvals", "=", "{", "'semseg'", ":", "cv2", ".", "INTER_NEAREST", ",", "'image'", ":", "cv2", ".", "INTER_CUBIC", "}", ")", ",", "\n", "custom_tr", ".", "FixedResize", "(", "resolutions", "=", "{", "'image'", ":", "tuple", "(", "(", "512", ",", "512", ")", ")", ",", "'semseg'", ":", "tuple", "(", "(", "512", ",", "512", ")", ")", "}", ",", "\n", "flagvals", "=", "{", "'semseg'", ":", "cv2", ".", "INTER_NEAREST", ",", "'image'", ":", "cv2", ".", "INTER_CUBIC", "}", ")", ",", "\n", "custom_tr", ".", "ToTensor", "(", ")", ",", "\n", "custom_tr", ".", "Normalize", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "]", ")", "\n", "\n", "\n", "", "def", "get_val_transformations", "(", ")", ":", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.common_config.adjust_learning_rate": [[139, 165], ["numpy.sum", "pow", "numpy.array", "ValueError", "math.cos"], "function", ["None"], ["'semseg'", ":", "tuple", "(", "(", "512", ",", "512", ")", ")", "}", ",", "\n", "flagvals", "=", "{", "'image'", ":", "cv2", ".", "INTER_CUBIC", ",", "'semseg'", ":", "cv2", ".", "INTER_NEAREST", "}", ")", ",", "\n", "custom_tr", ".", "ToTensor", "(", ")", ",", "\n", "custom_tr", ".", "Normalize", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "]", ")", "\n", "\n", "\n", "", "def", "get_optimizer", "(", "p", ",", "parameters", ")", ":", "\n", "    ", "if", "p", "[", "'optimizer'", "]", "==", "'sgd'", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "parameters", ",", "**", "p", "[", "'optimizer_kwargs'", "]", ")", "\n", "\n", "", "elif", "p", "[", "'optimizer'", "]", "==", "'adam'", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "parameters", ",", "**", "p", "[", "'optimizer_kwargs'", "]", ")", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Invalid optimizer {}'", ".", "format", "(", "p", "[", "'optimizer'", "]", ")", ")", "\n", "\n", "", "return", "optimizer", "\n", "\n", "\n", "", "def", "adjust_learning_rate", "(", "p", ",", "optimizer", ",", "epoch", ")", ":", "\n", "    ", "lr", "=", "p", "[", "'optimizer_kwargs'", "]", "[", "'lr'", "]", "\n", "\n", "if", "p", "[", "'scheduler'", "]", "==", "'step'", ":", "\n", "        ", "steps", "=", "np", ".", "sum", "(", "epoch", ">", "np", ".", "array", "(", "p", "[", "'scheduler_kwargs'", "]", "[", "'lr_decay_epochs'", "]", ")", ")", "\n", "if", "steps", ">", "0", ":", "\n", "            ", "lr", "=", "lr", "*", "(", "p", "[", "'scheduler_kwargs'", "]", "[", "'lr_decay_rate'", "]", "**", "steps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.visualization.visualize_sample": [[12, 55], ["numpy.transpose().astype", "cv2.resize", "matplotlib.tight_layout", "sample.keys", "sample[].squeeze().numpy().astype", "cv2.resize", "visualization.color_map", "numpy.empty", "numpy.unique", "matplotlib.figure", "matplotlib.subplot", "matplotlib.axis", "matplotlib.imshow", "matplotlib.title", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.imshow", "matplotlib.axis", "matplotlib.title", "matplotlib.imshow", "matplotlib.title", "matplotlib.axis", "matplotlib.savefig", "matplotlib.show", "numpy.transpose", "sample[].squeeze().numpy", "cv2.resize.numpy", "sample[].squeeze"], "function", ["home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.visualization.color_map"], ["def", "visualize_sample", "(", "sample", ",", "filename", "=", "None", ")", ":", "\n", "# Visualize a sample and its segmentation map", "\n", "    ", "image", "=", "sample", "[", "'image'", "]", "\n", "meta", "=", "sample", "[", "'meta'", "]", "\n", "im_size", "=", "sample", "[", "'meta'", "]", "[", "'im_size'", "]", "\n", "\n", "image", "[", "0", "]", "=", "image", "[", "0", "]", "*", "0.229", "+", "0.485", "\n", "image", "[", "1", "]", "=", "image", "[", "1", "]", "*", "0.224", "+", "0.456", "\n", "image", "[", "2", "]", "=", "image", "[", "2", "]", "*", "0.225", "+", "0.406", "\n", "image", "=", "np", ".", "transpose", "(", "255", "*", "image", ".", "numpy", "(", ")", ",", "(", "1", ",", "2", ",", "0", ")", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "image", "=", "cv2", ".", "resize", "(", "image", ",", "im_size", ",", "interpolation", "=", "cv2", ".", "INTER_CUBIC", ")", "\n", "\n", "\n", "if", "'semseg'", "in", "sample", ".", "keys", "(", ")", ":", "\n", "        ", "sem", "=", "sample", "[", "'semseg'", "]", ".", "squeeze", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "sem", "=", "cv2", ".", "resize", "(", "sem", ",", "im_size", ",", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "cmap", "=", "color_map", "(", ")", "\n", "array", "=", "np", ".", "empty", "(", "(", "sem", ".", "shape", "[", "0", "]", ",", "sem", ".", "shape", "[", "1", "]", ",", "cmap", ".", "shape", "[", "1", "]", ")", ",", "dtype", "=", "cmap", ".", "dtype", ")", "\n", "for", "class_i", "in", "np", ".", "unique", "(", "sem", ")", ":", "\n", "            ", "array", "[", "sem", "==", "class_i", "]", "=", "cmap", "[", "class_i", "]", "\n", "", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "subplot", "(", "1", ",", "2", ",", "1", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "plt", ".", "imshow", "(", "image", ")", "\n", "plt", ".", "title", "(", "'RGB'", ")", "\n", "plt", ".", "subplot", "(", "1", ",", "2", ",", "2", ")", "\n", "plt", ".", "imshow", "(", "image", ")", "\n", "plt", ".", "imshow", "(", "array", ",", "alpha", "=", "0.6", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "plt", ".", "title", "(", "'GT'", ")", "\n", "\n", "", "else", ":", "\n", "        ", "fig", "=", "plt", ".", "imshow", "(", "image", ")", "\n", "plt", ".", "title", "(", "'RGB'", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "\n", "", "plt", ".", "tight_layout", "(", ")", "\n", "\n", "if", "filename", "is", "not", "None", ":", "\n", "        ", "plt", ".", "savefig", "(", "filename", ")", "\n", "\n", "", "else", ":", "\n", "        ", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.visualization.visualize_sample_with_saved_prediction": [[57, 106], ["visualization.color_map", "numpy.empty", "numpy.unique", "os.path.join", "numpy.array().astype", "numpy.empty", "numpy.unique", "matplotlib.figure", "matplotlib.subplot", "matplotlib.axis", "matplotlib.imshow", "matplotlib.title", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.imshow", "matplotlib.axis", "matplotlib.title", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.imshow", "matplotlib.axis", "matplotlib.title", "matplotlib.tight_layout", "matplotlib.savefig", "matplotlib.show", "numpy.array", "PIL.Image.open"], "function", ["home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.visualization.color_map"], ["", "", "def", "visualize_sample_with_saved_prediction", "(", "p", ",", "sample", ",", "filename", ")", ":", "\n", "# Visualize a sample with ground-truth and saved prediction", "\n", "# Input should come from the true validation dataset without any transformations being applied", "\n", "\n", "# Read sample", "\n", "    ", "image", "=", "sample", "[", "'image'", "]", "\n", "meta", "=", "sample", "[", "'meta'", "]", "\n", "sem", "=", "sample", "[", "'semseg'", "]", "\n", "cmap", "=", "color_map", "(", ")", "\n", "\n", "# Apply color map to visualize segmentation ground-truth", "\n", "array", "=", "np", ".", "empty", "(", "(", "sem", ".", "shape", "[", "0", "]", ",", "sem", ".", "shape", "[", "1", "]", ",", "cmap", ".", "shape", "[", "1", "]", ")", ",", "dtype", "=", "cmap", ".", "dtype", ")", "\n", "for", "class_i", "in", "np", ".", "unique", "(", "sem", ")", ":", "\n", "        ", "array", "[", "sem", "==", "class_i", "]", "=", "cmap", "[", "class_i", "]", "\n", "\n", "# Read and apply color map to visualize segmentation prediction", "\n", "", "mask", "=", "(", "os", ".", "path", ".", "join", "(", "p", "[", "'save_dir'", "]", ",", "meta", "[", "'image'", "]", "+", "'.png'", ")", ")", "\n", "mask", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "mask", ")", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "assert", "(", "mask", ".", "shape", "[", "0", "]", "==", "sem", ".", "shape", "[", "0", "]", "and", "mask", ".", "shape", "[", "1", "]", "==", "sem", ".", "shape", "[", "1", "]", ")", "\n", "array_pred", "=", "np", ".", "empty", "(", "(", "mask", ".", "shape", "[", "0", "]", ",", "mask", ".", "shape", "[", "1", "]", ",", "cmap", ".", "shape", "[", "1", "]", ")", ",", "dtype", "=", "cmap", ".", "dtype", ")", "\n", "for", "class_i", "in", "np", ".", "unique", "(", "mask", ")", ":", "\n", "        ", "array_pred", "[", "mask", "==", "class_i", "]", "=", "cmap", "[", "class_i", "]", "\n", "\n", "", "plt", ".", "figure", "(", ")", "\n", "\n", "plt", ".", "subplot", "(", "1", ",", "3", ",", "1", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "plt", ".", "imshow", "(", "image", ")", "\n", "plt", ".", "title", "(", "'RGB'", ")", "\n", "\n", "plt", ".", "subplot", "(", "1", ",", "3", ",", "2", ")", "\n", "plt", ".", "imshow", "(", "image", ")", "\n", "plt", ".", "imshow", "(", "array", ",", "alpha", "=", "0.6", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "plt", ".", "title", "(", "'GT'", ")", "\n", "\n", "plt", ".", "subplot", "(", "1", ",", "3", ",", "3", ")", "\n", "plt", ".", "imshow", "(", "image", ")", "\n", "plt", ".", "imshow", "(", "array_pred", ",", "alpha", "=", "0.6", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "plt", ".", "title", "(", "'Pred'", ")", "\n", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "\n", "if", "filename", "is", "not", "None", ":", "\n", "        ", "plt", ".", "savefig", "(", "filename", ")", "\n", "\n", "", "else", ":", "\n", "        ", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.visualization.visualize_sample_with_prediction": [[108, 143], ["visualization.color_map", "np.transpose().astype.cpu().numpy", "numpy.transpose().astype", "gt.cpu().numpy().astype.cpu().numpy().astype", "numpy.empty", "numpy.unique", "prediction.cpu().numpy().astype.cpu().numpy().astype", "numpy.empty", "numpy.unique", "matplotlib.subplots", "axes[].imshow", "axes[].imshow", "axes[].imshow", "matplotlib.axis", "matplotlib.tight_layout", "matplotlib.savefig", "matplotlib.show", "np.transpose().astype.cpu", "numpy.transpose", "gt.cpu().numpy().astype.cpu().numpy", "prediction.cpu().numpy().astype.cpu().numpy", "gt.cpu().numpy().astype.cpu", "prediction.cpu().numpy().astype.cpu"], "function", ["home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.visualization.color_map"], ["", "", "def", "visualize_sample_with_prediction", "(", "image", ",", "gt", ",", "prediction", ",", "filename", "=", "None", ")", ":", "\n", "# Visualize a sample, gt and the prediction", "\n", "    ", "cmap", "=", "color_map", "(", ")", "\n", "\n", "# Image", "\n", "image", "=", "image", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "image", "[", "0", "]", "=", "image", "[", "0", "]", "*", "0.229", "+", "0.485", "\n", "image", "[", "1", "]", "=", "image", "[", "1", "]", "*", "0.224", "+", "0.456", "\n", "image", "[", "2", "]", "=", "image", "[", "2", "]", "*", "0.225", "+", "0.406", "\n", "image", "=", "np", ".", "transpose", "(", "255", "*", "image", ",", "(", "1", ",", "2", ",", "0", ")", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "# Semantic gt", "\n", "gt", "=", "gt", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "array_gt", "=", "np", ".", "empty", "(", "(", "gt", ".", "shape", "[", "0", "]", ",", "gt", ".", "shape", "[", "1", "]", ",", "cmap", ".", "shape", "[", "1", "]", ")", ",", "dtype", "=", "cmap", ".", "dtype", ")", "\n", "for", "class_i", "in", "np", ".", "unique", "(", "gt", ")", ":", "\n", "        ", "array_gt", "[", "gt", "==", "class_i", "]", "=", "cmap", "[", "class_i", "]", "\n", "\n", "# Prediction", "\n", "", "prediction", "=", "prediction", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "array_pred", "=", "np", ".", "empty", "(", "(", "prediction", ".", "shape", "[", "0", "]", ",", "prediction", ".", "shape", "[", "1", "]", ",", "cmap", ".", "shape", "[", "1", "]", ")", ",", "dtype", "=", "cmap", ".", "dtype", ")", "\n", "for", "class_i", "in", "np", ".", "unique", "(", "prediction", ")", ":", "\n", "        ", "array_pred", "[", "prediction", "==", "class_i", "]", "=", "cmap", "[", "class_i", "]", "\n", "\n", "", "fig", ",", "axes", "=", "plt", ".", "subplots", "(", "3", ")", "\n", "axes", "[", "0", "]", ".", "imshow", "(", "image", ")", "\n", "axes", "[", "1", "]", ".", "imshow", "(", "array_gt", ")", "\n", "axes", "[", "2", "]", ".", "imshow", "(", "array_pred", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "\n", "if", "filename", "is", "not", "None", ":", "\n", "        ", "plt", ".", "savefig", "(", "filename", ")", "\n", "\n", "", "else", ":", "\n", "        ", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.visualization.color_map": [[146, 165], ["numpy.zeros", "range", "range", "numpy.array", "visualization.color_map.bitget"], "function", ["None"], ["", "", "def", "color_map", "(", "N", "=", "256", ",", "normalized", "=", "False", ")", ":", "\n", "    ", "def", "bitget", "(", "byteval", ",", "idx", ")", ":", "\n", "        ", "return", "(", "(", "byteval", "&", "(", "1", "<<", "idx", ")", ")", "!=", "0", ")", "\n", "\n", "", "dtype", "=", "'float32'", "if", "normalized", "else", "'uint8'", "\n", "cmap", "=", "np", ".", "zeros", "(", "(", "N", ",", "3", ")", ",", "dtype", "=", "dtype", ")", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "        ", "r", "=", "g", "=", "b", "=", "0", "\n", "c", "=", "i", "\n", "for", "j", "in", "range", "(", "8", ")", ":", "\n", "            ", "r", "=", "r", "|", "(", "bitget", "(", "c", ",", "0", ")", "<<", "7", "-", "j", ")", "\n", "g", "=", "g", "|", "(", "bitget", "(", "c", ",", "1", ")", "<<", "7", "-", "j", ")", "\n", "b", "=", "b", "|", "(", "bitget", "(", "c", ",", "2", ")", "<<", "7", "-", "j", ")", "\n", "c", "=", "c", ">>", "3", "\n", "\n", "", "cmap", "[", "i", "]", "=", "np", ".", "array", "(", "[", "r", ",", "g", ",", "b", "]", ")", "\n", "\n", "", "cmap", "=", "cmap", "/", "255", "if", "normalized", "else", "cmap", "\n", "return", "cmap", "\n", "", ""]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.logger.Logger.__init__": [[10, 20], ["os.path.exists", "os.makedirs", "open", "open", "os.path.dirname", "os.path.dirname"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "fpath", "=", "None", ")", ":", "\n", "        ", "self", ".", "console", "=", "sys", ".", "stdout", "\n", "self", ".", "file", "=", "None", "\n", "self", ".", "fpath", "=", "fpath", "\n", "if", "fpath", "is", "not", "None", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "dirname", "(", "fpath", ")", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "fpath", ")", ")", "\n", "self", ".", "file", "=", "open", "(", "fpath", ",", "'w'", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "file", "=", "open", "(", "fpath", ",", "'a'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.logger.Logger.__del__": [[21, 23], ["logger.Logger.close"], "methods", ["home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.logger.Logger.close"], ["", "", "", "def", "__del__", "(", "self", ")", ":", "\n", "        ", "self", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.logger.Logger.__enter__": [[24, 26], ["None"], "methods", ["None"], ["", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.logger.Logger.__exit__": [[27, 29], ["logger.Logger.close"], "methods", ["home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.logger.Logger.close"], ["", "def", "__exit__", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "self", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.logger.Logger.write": [[30, 34], ["logger.Logger.console.write", "logger.Logger.file.write"], "methods", ["home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.logger.Logger.write", "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.logger.Logger.write"], ["", "def", "write", "(", "self", ",", "msg", ")", ":", "\n", "        ", "self", ".", "console", ".", "write", "(", "msg", ")", "\n", "if", "self", ".", "file", "is", "not", "None", ":", "\n", "            ", "self", ".", "file", ".", "write", "(", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.logger.Logger.flush": [[35, 40], ["logger.Logger.console.flush", "logger.Logger.file.flush", "os.fsync", "logger.Logger.file.fileno"], "methods", ["home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.logger.Logger.flush", "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.logger.Logger.flush"], ["", "", "def", "flush", "(", "self", ")", ":", "\n", "        ", "self", ".", "console", ".", "flush", "(", ")", "\n", "if", "self", ".", "file", "is", "not", "None", ":", "\n", "            ", "self", ".", "file", ".", "flush", "(", ")", "\n", "os", ".", "fsync", "(", "self", ".", "file", ".", "fileno", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.logger.Logger.close": [[41, 45], ["logger.Logger.console.close", "logger.Logger.file.close"], "methods", ["home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.logger.Logger.close", "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.logger.Logger.close"], ["", "", "def", "close", "(", "self", ")", ":", "\n", "        ", "self", ".", "console", ".", "close", "(", ")", "\n", "if", "self", ".", "file", "is", "not", "None", ":", "\n", "            ", "self", ".", "file", ".", "close", "(", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.evaluate_utils.eval_segmentation_supervised_online": [[18, 41], ["torch.no_grad", "torch.no_grad", "utils.utils.SemsegMeter", "model.eval", "enumerate", "utils.utils.SemsegMeter.return_score", "val_loader.dataset.get_class_names", "batch[].cuda", "batch[].cuda", "model", "utils.utils.SemsegMeter.update", "torch.argmax", "torch.argmax"], "function", ["home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.utils.SemsegMeter.return_score", "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.dataloaders.pascal_voc.VOCSegmentation.get_class_names", "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.utils.AverageMeter.update"], ["@", "torch", ".", "no_grad", "(", ")", "\n", "def", "eval_segmentation_supervised_online", "(", "p", ",", "val_loader", ",", "model", ",", "verbose", "=", "True", ")", ":", "\n", "    ", "\"\"\" Evaluate a segmentation network \n        The evaluation is performed online, without storing the results.\n        \n        Important: All images are assumed to be rescaled to the same resolution.\n        As a consequence, the results might not exactly match with the true evaluation script\n        if every image had a different size. \n\n        Alternative: Use store_results_to_disk and then evaluate with eval_segmentation_supervised_offline.\n    \"\"\"", "\n", "semseg_meter", "=", "SemsegMeter", "(", "p", "[", "'num_classes'", "]", ",", "val_loader", ".", "dataset", ".", "get_class_names", "(", ")", ",", "\n", "p", "[", "'has_bg'", "]", ",", "ignore_index", "=", "255", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "for", "i", ",", "batch", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "        ", "images", "=", "batch", "[", "'image'", "]", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "targets", "=", "batch", "[", "'semseg'", "]", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "output", "=", "model", "(", "images", ")", "\n", "semseg_meter", ".", "update", "(", "torch", ".", "argmax", "(", "output", ",", "dim", "=", "1", ")", ",", "targets", ")", "\n", "\n", "", "eval_results", "=", "semseg_meter", ".", "return_score", "(", "verbose", "=", "True", ")", "\n", "return", "eval_results", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.evaluate_utils.eval_segmentation_supervised_offline": [[43, 94], ["enumerate", "range", "dict", "numpy.mean", "int", "os.path.join", "numpy.array().astype", "range", "print", "print", "val_dataset.get_class_names", "range", "print", "warning.warn", "cv2.resize", "numpy.sum", "numpy.sum", "numpy.sum", "float", "max", "print", "numpy.array", "float", "len", "PIL.Image.open"], "function", ["home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.dataloaders.pascal_voc.VOCSegmentation.get_class_names"], ["", "def", "eval_segmentation_supervised_offline", "(", "p", ",", "val_dataset", ",", "verbose", "=", "True", ")", ":", "\n", "    ", "\"\"\" Evaluate stored predictions from a segmentation network.\n        The semantic masks from the validation dataset are not supposed to change. \n    \"\"\"", "\n", "n_classes", "=", "p", "[", "'num_classes'", "]", "+", "int", "(", "p", "[", "'has_bg'", "]", ")", "\n", "\n", "# Iterate", "\n", "tp", "=", "[", "0", "]", "*", "n_classes", "\n", "fp", "=", "[", "0", "]", "*", "n_classes", "\n", "fn", "=", "[", "0", "]", "*", "n_classes", "\n", "\n", "for", "i", ",", "sample", "in", "enumerate", "(", "val_dataset", ")", ":", "\n", "        ", "if", "i", "%", "250", "==", "0", ":", "\n", "            ", "print", "(", "'Evaluating: {} of {} objects'", ".", "format", "(", "i", ",", "len", "(", "val_dataset", ")", ")", ")", "\n", "\n", "# Load result", "\n", "", "filename", "=", "os", ".", "path", ".", "join", "(", "p", "[", "'save_dir'", "]", ",", "sample", "[", "'meta'", "]", "[", "'image'", "]", "+", "'.png'", ")", "\n", "mask", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "filename", ")", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "gt", "=", "sample", "[", "'semseg'", "]", "\n", "valid", "=", "(", "gt", "!=", "255", ")", "\n", "\n", "if", "mask", ".", "shape", "!=", "gt", ".", "shape", ":", "\n", "            ", "warning", ".", "warn", "(", "'Prediction and ground truth have different size. Resizing Prediction ..'", ")", "\n", "mask", "=", "cv2", ".", "resize", "(", "mask", ",", "gt", ".", "shape", "[", ":", ":", "-", "1", "]", ",", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "\n", "# TP, FP, and FN evaluation", "\n", "", "for", "i_part", "in", "range", "(", "0", ",", "n_classes", ")", ":", "\n", "            ", "tmp_gt", "=", "(", "gt", "==", "i_part", ")", "\n", "tmp_pred", "=", "(", "mask", "==", "i_part", ")", "\n", "tp", "[", "i_part", "]", "+=", "np", ".", "sum", "(", "tmp_gt", "&", "tmp_pred", "&", "valid", ")", "\n", "fp", "[", "i_part", "]", "+=", "np", ".", "sum", "(", "~", "tmp_gt", "&", "tmp_pred", "&", "valid", ")", "\n", "fn", "[", "i_part", "]", "+=", "np", ".", "sum", "(", "tmp_gt", "&", "~", "tmp_pred", "&", "valid", ")", "\n", "\n", "", "", "jac", "=", "[", "0", "]", "*", "n_classes", "\n", "for", "i_part", "in", "range", "(", "0", ",", "n_classes", ")", ":", "\n", "        ", "jac", "[", "i_part", "]", "=", "float", "(", "tp", "[", "i_part", "]", ")", "/", "max", "(", "float", "(", "tp", "[", "i_part", "]", "+", "fp", "[", "i_part", "]", "+", "fn", "[", "i_part", "]", ")", ",", "1e-8", ")", "\n", "\n", "# Write results", "\n", "", "eval_result", "=", "dict", "(", ")", "\n", "eval_result", "[", "'jaccards_all_categs'", "]", "=", "jac", "\n", "eval_result", "[", "'mIoU'", "]", "=", "np", ".", "mean", "(", "jac", ")", "\n", "\n", "if", "verbose", ":", "\n", "        ", "print", "(", "'Evaluation of semantic segmentation '", ")", "\n", "print", "(", "'mIoU is %.2f'", "%", "(", "100", "*", "eval_result", "[", "'mIoU'", "]", ")", ")", "\n", "class_names", "=", "val_dataset", ".", "get_class_names", "(", ")", "\n", "for", "i_part", "in", "range", "(", "n_classes", ")", ":", "\n", "            ", "print", "(", "'IoU class %s is %.2f'", "%", "(", "class_names", "[", "i_part", "]", ",", "100", "*", "jac", "[", "i_part", "]", ")", ")", "\n", "\n", "", "", "return", "eval_result", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.evaluate_utils.save_results_to_disk": [[96, 128], ["torch.no_grad", "torch.no_grad", "print", "model.eval", "enumerate", "model", "range", "batch[].cuda", "cv2.resize", "imageio.imwrite", "print", "dense_crf", "numpy.argmax().astype", "torch.argmax().cpu().numpy().astype", "torch.argmax().cpu().numpy().astype", "os.path.join", "len", "numpy.argmax", "torch.argmax().cpu().numpy", "torch.argmax().cpu().numpy", "torch.argmax().cpu", "torch.argmax().cpu", "torch.argmax", "torch.argmax"], "function", ["home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.crf.dense_crf"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "save_results_to_disk", "(", "p", ",", "val_loader", ",", "model", ",", "crf_postprocess", "=", "False", ")", ":", "\n", "    ", "print", "(", "'Save results to disk ...'", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "# CRF", "\n", "if", "crf_postprocess", ":", "\n", "        ", "from", "utils", ".", "crf", "import", "dense_crf", "\n", "\n", "", "counter", "=", "0", "\n", "for", "i", ",", "batch", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "        ", "output", "=", "model", "(", "batch", "[", "'image'", "]", ".", "cuda", "(", "non_blocking", "=", "True", ")", ")", "\n", "meta", "=", "batch", "[", "'meta'", "]", "\n", "for", "jj", "in", "range", "(", "output", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "counter", "+=", "1", "\n", "image_file", "=", "meta", "[", "'image_file'", "]", "[", "jj", "]", "\n", "\n", "# CRF post-process", "\n", "if", "crf_postprocess", ":", "\n", "                ", "probs", "=", "dense_crf", "(", "meta", "[", "'image_file'", "]", "[", "jj", "]", ",", "output", "[", "jj", "]", ")", "\n", "pred", "=", "np", ".", "argmax", "(", "probs", ",", "axis", "=", "0", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "# Regular", "\n", "", "else", ":", "\n", "                ", "pred", "=", "torch", ".", "argmax", "(", "output", "[", "jj", "]", ",", "dim", "=", "0", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "", "result", "=", "cv2", ".", "resize", "(", "pred", ",", "dsize", "=", "(", "meta", "[", "'im_size'", "]", "[", "1", "]", "[", "jj", "]", ",", "meta", "[", "'im_size'", "]", "[", "0", "]", "[", "jj", "]", ")", ",", "\n", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "imageio", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "p", "[", "'save_dir'", "]", ",", "meta", "[", "'image'", "]", "[", "jj", "]", "+", "'.png'", ")", ",", "result", ")", "\n", "\n", "", "if", "counter", "%", "250", "==", "0", ":", "\n", "            ", "print", "(", "'Saving results: {} of {} objects'", ".", "format", "(", "counter", ",", "len", "(", "val_loader", ".", "dataset", ")", ")", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.kmeans_utils.eval_kmeans": [[21, 118], ["numpy.zeros", "numpy.zeros", "enumerate", "print", "numpy.zeros", "print", "range", "range", "dict", "numpy.mean", "print", "int", "os.path.join", "numpy.load", "numpy.sum", "termcolor.colored", "print", "kmeans_utils._hungarian_match", "print", "kmeans_utils._majority_vote", "int", "print", "sklearn.metrics.normalized_mutual_info_score", "sklearn.metrics.adjusted_rand_score", "termcolor.colored", "numpy.sum", "numpy.sum", "numpy.sum", "print", "print", "val_dataset.get_class_names", "range", "print", "cv2.resize", "int", "float", "float", "max", "print", "len", "len", "float", "len", "int"], "function", ["home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.kmeans_utils._hungarian_match", "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.kmeans_utils._majority_vote", "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.dataloaders.pascal_voc.VOCSegmentation.get_class_names"], ["def", "eval_kmeans", "(", "p", ",", "val_dataset", ",", "n_clusters", "=", "21", ",", "compute_metrics", "=", "False", ",", "verbose", "=", "True", ")", ":", "\n", "    ", "n_classes", "=", "p", "[", "'num_classes'", "]", "+", "int", "(", "p", "[", "'has_bg'", "]", ")", "\n", "\n", "# Iterate", "\n", "tp", "=", "[", "0", "]", "*", "n_classes", "\n", "fp", "=", "[", "0", "]", "*", "n_classes", "\n", "fn", "=", "[", "0", "]", "*", "n_classes", "\n", "\n", "# Load all pixel embeddings", "\n", "all_pixels", "=", "np", ".", "zeros", "(", "(", "len", "(", "val_dataset", ")", "*", "500", "*", "500", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "all_gt", "=", "np", ".", "zeros", "(", "(", "len", "(", "val_dataset", ")", "*", "500", "*", "500", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "offset_", "=", "0", "\n", "\n", "for", "i", ",", "sample", "in", "enumerate", "(", "val_dataset", ")", ":", "\n", "        ", "if", "i", "%", "300", "==", "0", ":", "\n", "            ", "print", "(", "'Evaluating: {} of {} objects'", ".", "format", "(", "i", ",", "len", "(", "val_dataset", ")", ")", ")", "\n", "\n", "# Load embedding", "\n", "", "filename", "=", "os", ".", "path", ".", "join", "(", "p", "[", "'embedding_dir'", "]", ",", "sample", "[", "'meta'", "]", "[", "'image'", "]", "+", "'.npy'", ")", "\n", "embedding", "=", "np", ".", "load", "(", "filename", ")", "\n", "\n", "# Check where ground-truth is valid. Append valid pixels to the array.", "\n", "gt", "=", "sample", "[", "'semseg'", "]", "\n", "valid", "=", "(", "gt", "!=", "255", ")", "\n", "n_valid", "=", "np", ".", "sum", "(", "valid", ")", "\n", "all_gt", "[", "offset_", ":", "offset_", "+", "n_valid", "]", "=", "gt", "[", "valid", "]", "\n", "\n", "# Possibly reshape embedding to match gt.", "\n", "if", "embedding", ".", "shape", "!=", "gt", ".", "shape", ":", "\n", "            ", "embedding", "=", "cv2", ".", "resize", "(", "embedding", ",", "gt", ".", "shape", "[", ":", ":", "-", "1", "]", ",", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "\n", "# Put the reshaped ground truth in the array", "\n", "", "all_pixels", "[", "offset_", ":", "offset_", "+", "n_valid", ",", "]", "=", "embedding", "[", "valid", "]", "\n", "all_gt", "[", "offset_", ":", "offset_", "+", "n_valid", ",", "]", "=", "gt", "[", "valid", "]", "\n", "\n", "# Update offset_", "\n", "offset_", "+=", "n_valid", "\n", "\n", "# All pixels, all ground-truth", "\n", "", "all_pixels", "=", "all_pixels", "[", ":", "offset_", ",", "]", "\n", "all_gt", "=", "all_gt", "[", ":", "offset_", ",", "]", "\n", "\n", "# Do hungarian matching", "\n", "print", "(", "colored", "(", "'Starting hungarian'", ",", "'green'", ")", ")", "\n", "num_elems", "=", "offset_", "\n", "if", "n_clusters", "==", "n_classes", ":", "\n", "        ", "print", "(", "'Using hungarian algorithm for matching'", ")", "\n", "match", "=", "_hungarian_match", "(", "all_pixels", ",", "all_gt", ",", "preds_k", "=", "n_clusters", ",", "targets_k", "=", "n_classes", ",", "metric", "=", "'iou'", ")", "\n", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Using majority voting for matching'", ")", "\n", "match", "=", "_majority_vote", "(", "all_pixels", ",", "all_gt", ",", "preds_k", "=", "n_clusters", ",", "targets_k", "=", "n_classes", ")", "\n", "\n", "# Remap predictions", "\n", "", "reordered_preds", "=", "np", ".", "zeros", "(", "num_elems", ",", "dtype", "=", "all_pixels", ".", "dtype", ")", "\n", "for", "pred_i", ",", "target_i", "in", "match", ":", "\n", "        ", "reordered_preds", "[", "all_pixels", "==", "int", "(", "pred_i", ")", "]", "=", "int", "(", "target_i", ")", "\n", "\n", "", "if", "compute_metrics", ":", "\n", "        ", "print", "(", "'Computing acc, nmi, ari ...'", ")", "\n", "acc", "=", "int", "(", "(", "reordered_preds", "==", "all_gt", ")", ".", "sum", "(", ")", ")", "/", "float", "(", "num_elems", ")", "\n", "nmi", "=", "metrics", ".", "normalized_mutual_info_score", "(", "all_gt", ",", "reordered_preds", ")", "\n", "ari", "=", "metrics", ".", "adjusted_rand_score", "(", "all_gt", ",", "reordered_preds", ")", "\n", "", "else", ":", "\n", "        ", "acc", ",", "nmi", ",", "ari", "=", "None", ",", "None", ",", "None", "\n", "\n", "# TP, FP, and FN evaluation", "\n", "", "print", "(", "colored", "(", "'Starting miou'", ",", "'green'", ")", ")", "\n", "for", "i_part", "in", "range", "(", "0", ",", "n_classes", ")", ":", "\n", "        ", "tmp_all_gt", "=", "(", "all_gt", "==", "i_part", ")", "\n", "tmp_pred", "=", "(", "reordered_preds", "==", "i_part", ")", "\n", "tp", "[", "i_part", "]", "+=", "np", ".", "sum", "(", "tmp_all_gt", "&", "tmp_pred", ")", "\n", "fp", "[", "i_part", "]", "+=", "np", ".", "sum", "(", "~", "tmp_all_gt", "&", "tmp_pred", ")", "\n", "fn", "[", "i_part", "]", "+=", "np", ".", "sum", "(", "tmp_all_gt", "&", "~", "tmp_pred", ")", "\n", "\n", "", "jac", "=", "[", "0", "]", "*", "n_classes", "\n", "for", "i_part", "in", "range", "(", "0", ",", "n_classes", ")", ":", "\n", "        ", "jac", "[", "i_part", "]", "=", "float", "(", "tp", "[", "i_part", "]", ")", "/", "max", "(", "float", "(", "tp", "[", "i_part", "]", "+", "fp", "[", "i_part", "]", "+", "fn", "[", "i_part", "]", ")", ",", "1e-8", ")", "\n", "\n", "# Write results", "\n", "", "eval_result", "=", "dict", "(", ")", "\n", "eval_result", "[", "'jaccards_all_categs'", "]", "=", "jac", "\n", "eval_result", "[", "'mIoU'", "]", "=", "np", ".", "mean", "(", "jac", ")", "\n", "eval_result", "[", "'acc'", "]", "=", "acc", "\n", "eval_result", "[", "'nmi'", "]", "=", "nmi", "\n", "eval_result", "[", "'ari'", "]", "=", "ari", "\n", "\n", "if", "verbose", ":", "\n", "        ", "print", "(", "'Evaluation of semantic segmentation '", ")", "\n", "print", "(", "'mIoU is %.2f'", "%", "(", "100", "*", "eval_result", "[", "'mIoU'", "]", ")", ")", "\n", "class_names", "=", "val_dataset", ".", "get_class_names", "(", ")", "\n", "for", "i_part", "in", "range", "(", "n_classes", ")", ":", "\n", "            ", "print", "(", "'IoU class %s is %.2f'", "%", "(", "class_names", "[", "i_part", "]", ",", "100", "*", "jac", "[", "i_part", "]", ")", ")", "\n", "\n", "", "", "print", "(", "eval_result", ")", "\n", "\n", "return", "eval_result", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.kmeans_utils.save_embeddings_to_disk": [[120, 168], ["torch.no_grad", "print", "model.eval", "torch.zeros().cuda", "torch.zeros().cuda", "enumerate", "pca.fit_transform.cpu().numpy", "all_sals.cpu().numpy.cpu().numpy", "print", "print", "sklearn.decomposition.PCA", "sklearn.decomposition.PCA.fit_transform", "sklearn.cluster.MiniBatchKMeans", "sklearn.cluster.MiniBatchKMeans.fit_predict", "zip", "model", "output.reshape.reshape", "sal.reshape().type", "torch.bmm().squeeze", "nn.functional.normalize", "termcolor.colored", "range", "all_sals[].copy", "numpy.save", "torch.zeros", "torch.zeros", "batch[].cuda", "names.append", "print", "pca.fit_transform.cpu", "all_sals.cpu().numpy.cpu", "len", "os.path.join", "print", "sal.reshape", "torch.bmm", "len", "len", "len"], "function", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "save_embeddings_to_disk", "(", "p", ",", "val_loader", ",", "model", ",", "n_clusters", "=", "21", ",", "seed", "=", "1234", ")", ":", "\n", "    ", "import", "torch", ".", "nn", "as", "nn", "\n", "print", "(", "'Save embeddings to disk ...'", ")", "\n", "model", ".", "eval", "(", ")", "\n", "ptr", "=", "0", "\n", "\n", "all_prototypes", "=", "torch", ".", "zeros", "(", "(", "len", "(", "val_loader", ".", "sampler", ")", ",", "32", ")", ")", ".", "cuda", "(", ")", "\n", "all_sals", "=", "torch", ".", "zeros", "(", "(", "len", "(", "val_loader", ".", "sampler", ")", ",", "512", ",", "512", ")", ")", ".", "cuda", "(", ")", "\n", "names", "=", "[", "]", "\n", "for", "i", ",", "batch", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "        ", "output", ",", "sal", "=", "model", "(", "batch", "[", "'image'", "]", ".", "cuda", "(", "non_blocking", "=", "True", ")", ")", "\n", "meta", "=", "batch", "[", "'meta'", "]", "\n", "\n", "# compute prototypes", "\n", "bs", ",", "dim", ",", "_", ",", "_", "=", "output", ".", "shape", "\n", "output", "=", "output", ".", "reshape", "(", "bs", ",", "dim", ",", "-", "1", ")", "# B x dim x H.W", "\n", "sal_proto", "=", "sal", ".", "reshape", "(", "bs", ",", "-", "1", ",", "1", ")", ".", "type", "(", "output", ".", "dtype", ")", "# B x H.W x 1", "\n", "prototypes", "=", "torch", ".", "bmm", "(", "output", ",", "sal_proto", "*", "(", "sal_proto", ">", "0.5", ")", ".", "float", "(", ")", ")", ".", "squeeze", "(", ")", "# B x dim", "\n", "prototypes", "=", "nn", ".", "functional", ".", "normalize", "(", "prototypes", ",", "dim", "=", "1", ")", "\n", "all_prototypes", "[", "ptr", ":", "ptr", "+", "bs", "]", "=", "prototypes", "\n", "all_sals", "[", "ptr", ":", "ptr", "+", "bs", ",", ":", ",", ":", "]", "=", "(", "sal", ">", "0.5", ")", ".", "float", "(", ")", "\n", "ptr", "+=", "bs", "\n", "for", "name", "in", "meta", "[", "'image'", "]", ":", "\n", "            ", "names", ".", "append", "(", "name", ")", "\n", "\n", "", "if", "ptr", "%", "300", "==", "0", ":", "\n", "            ", "print", "(", "'Computing prototype {}'", ".", "format", "(", "ptr", ")", ")", "\n", "\n", "# perform kmeans", "\n", "", "", "all_prototypes", "=", "all_prototypes", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "all_sals", "=", "all_sals", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "n_clusters", "=", "n_clusters", "-", "1", "\n", "print", "(", "'Kmeans clustering to {} clusters'", ".", "format", "(", "n_clusters", ")", ")", "\n", "\n", "print", "(", "colored", "(", "'Starting kmeans with scikit'", ",", "'green'", ")", ")", "\n", "pca", "=", "PCA", "(", "n_components", "=", "32", ",", "whiten", "=", "True", ")", "\n", "all_prototypes", "=", "pca", ".", "fit_transform", "(", "all_prototypes", ")", "\n", "kmeans", "=", "MiniBatchKMeans", "(", "n_clusters", "=", "n_clusters", ",", "batch_size", "=", "1000", ",", "random_state", "=", "seed", ")", "\n", "prediction_kmeans", "=", "kmeans", ".", "fit_predict", "(", "all_prototypes", ")", "\n", "\n", "# save predictions", "\n", "for", "i", ",", "fname", ",", "pred", "in", "zip", "(", "range", "(", "len", "(", "val_loader", ".", "sampler", ")", ")", ",", "names", ",", "prediction_kmeans", ")", ":", "\n", "        ", "prediction", "=", "all_sals", "[", "i", "]", ".", "copy", "(", ")", "\n", "prediction", "[", "prediction", "==", "1", "]", "=", "pred", "+", "1", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "p", "[", "'embedding_dir'", "]", ",", "fname", "+", "'.npy'", ")", ",", "prediction", ")", "\n", "if", "i", "%", "300", "==", "0", ":", "\n", "            ", "print", "(", "'Saving results: {} of {} objects'", ".", "format", "(", "i", ",", "len", "(", "val_loader", ".", "dataset", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.kmeans_utils._hungarian_match": [[170, 186], ["print", "numpy.array", "scipy.optimize.linear_sum_assignment", "numpy.array", "joblib.Parallel", "np.array.reshape", "list", "res.append", "zip", "joblib.delayed", "range", "range"], "function", ["None"], ["", "", "", "def", "_hungarian_match", "(", "flat_preds", ",", "flat_targets", ",", "preds_k", ",", "targets_k", ",", "metric", "=", "'acc'", ")", ":", "\n", "    ", "assert", "(", "preds_k", "==", "targets_k", ")", "# one to one", "\n", "num_k", "=", "preds_k", "\n", "\n", "# perform hungarian matching", "\n", "print", "(", "'Using iou as metric'", ")", "\n", "results", "=", "Parallel", "(", "n_jobs", "=", "N_JOBS", ",", "backend", "=", "'multiprocessing'", ")", "(", "delayed", "(", "get_iou", ")", "(", "flat_preds", ",", "flat_targets", ",", "c1", ",", "c2", ")", "for", "c2", "in", "range", "(", "num_k", ")", "for", "c1", "in", "range", "(", "num_k", ")", ")", "\n", "results", "=", "np", ".", "array", "(", "results", ")", "\n", "results", "=", "results", ".", "reshape", "(", "(", "num_k", ",", "num_k", ")", ")", ".", "T", "\n", "match", "=", "linear_sum_assignment", "(", "flat_targets", ".", "shape", "[", "0", "]", "-", "results", ")", "\n", "match", "=", "np", ".", "array", "(", "list", "(", "zip", "(", "*", "match", ")", ")", ")", "\n", "res", "=", "[", "]", "\n", "for", "out_c", ",", "gt_c", "in", "match", ":", "\n", "        ", "res", ".", "append", "(", "(", "out_c", ",", "gt_c", ")", ")", "\n", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.kmeans_utils._majority_vote": [[187, 194], ["numpy.array", "numpy.argmax", "numpy.array", "joblib.Parallel", "np.array.reshape", "list", "zip", "joblib.delayed", "range", "range", "range"], "function", ["None"], ["", "def", "_majority_vote", "(", "flat_preds", ",", "flat_targets", ",", "preds_k", ",", "targets_k", ")", ":", "\n", "    ", "iou_mat", "=", "Parallel", "(", "n_jobs", "=", "N_JOBS", ",", "backend", "=", "'multiprocessing'", ")", "(", "delayed", "(", "get_iou", ")", "(", "flat_preds", ",", "flat_targets", ",", "c1", ",", "c2", ")", "for", "c2", "in", "range", "(", "targets_k", ")", "for", "c1", "in", "range", "(", "preds_k", ")", ")", "\n", "iou_mat", "=", "np", ".", "array", "(", "iou_mat", ")", "\n", "results", "=", "iou_mat", ".", "reshape", "(", "(", "targets_k", ",", "preds_k", ")", ")", ".", "T", "\n", "results", "=", "np", ".", "argmax", "(", "results", ",", "axis", "=", "1", ")", "\n", "match", "=", "np", ".", "array", "(", "list", "(", "zip", "(", "range", "(", "preds_k", ")", ",", "results", ")", ")", ")", "\n", "return", "match", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.kmeans_utils.get_iou": [[196, 207], ["numpy.sum", "numpy.sum", "numpy.sum", "float", "max", "float"], "function", ["None"], ["", "def", "get_iou", "(", "flat_preds", ",", "flat_targets", ",", "c1", ",", "c2", ")", ":", "\n", "    ", "tp", "=", "0", "\n", "fn", "=", "0", "\n", "fp", "=", "0", "\n", "tmp_all_gt", "=", "(", "flat_preds", "==", "c1", ")", "\n", "tmp_pred", "=", "(", "flat_targets", "==", "c2", ")", "\n", "tp", "+=", "np", ".", "sum", "(", "tmp_all_gt", "&", "tmp_pred", ")", "\n", "fp", "+=", "np", ".", "sum", "(", "~", "tmp_all_gt", "&", "tmp_pred", ")", "\n", "fn", "+=", "np", ".", "sum", "(", "tmp_all_gt", "&", "~", "tmp_pred", ")", "\n", "jac", "=", "float", "(", "tp", ")", "/", "max", "(", "float", "(", "tp", "+", "fp", "+", "fn", ")", ",", "1e-8", ")", "\n", "return", "jac", "\n", "", ""]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.train_utils.train_segmentation_vanilla": [[10, 54], ["utils.utils.AverageMeter", "utils.utils.SemsegMeter", "utils.utils.ProgressMeter", "model.train", "enumerate", "utils.utils.SemsegMeter.return_score", "train_loader.dataset.get_class_names", "len", "print", "batch[].cuda", "batch[].cuda", "model", "criterion", "utils.utils.AverageMeter.update", "utils.utils.SemsegMeter.update", "optimizer.zero_grad", "criterion.backward", "optimizer.step", "print", "model.backbone.eval", "criterion.item", "torch.argmax", "utils.utils.ProgressMeter.display", "print", "model.eval", "ValueError"], "function", ["home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.train_utils.train", "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.utils.SemsegMeter.return_score", "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.dataloaders.pascal_voc.VOCSegmentation.get_class_names", "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.utils.ProgressMeter.display"], ["def", "train_segmentation_vanilla", "(", "p", ",", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "freeze_batchnorm", "=", "'none'", ")", ":", "\n", "    ", "\"\"\" Train a segmentation model in a fully-supervised manner \"\"\"", "\n", "losses", "=", "AverageMeter", "(", "'Loss'", ",", "':.4e'", ")", "\n", "semseg_meter", "=", "SemsegMeter", "(", "p", "[", "'num_classes'", "]", ",", "train_loader", ".", "dataset", ".", "get_class_names", "(", ")", ",", "\n", "p", "[", "'has_bg'", "]", ",", "ignore_index", "=", "255", ")", "\n", "progress", "=", "ProgressMeter", "(", "len", "(", "train_loader", ")", ",", "\n", "[", "losses", "]", ",", "\n", "prefix", "=", "\"Epoch: [{}]\"", ".", "format", "(", "epoch", ")", ")", "\n", "\n", "model", ".", "train", "(", ")", "\n", "\n", "if", "freeze_batchnorm", "==", "'none'", ":", "\n", "        ", "print", "(", "'BatchNorm tracks running stats - model put to train mode.'", ")", "\n", "pass", "\n", "\n", "", "elif", "freeze_batchnorm", "==", "'backbone'", ":", "\n", "        ", "print", "(", "'Freeze BatchNorm in the backbone - backbone put to eval mode.'", ")", "\n", "model", ".", "backbone", ".", "eval", "(", ")", "# Put encoder to eval", "\n", "\n", "", "elif", "freeze_batchnorm", "==", "'all'", ":", "# Put complete model to eval", "\n", "        ", "print", "(", "'Freeze BatchNorm - model put to eval mode.'", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Invalid value freeze batchnorm {}'", ".", "format", "(", "freeze_batchnorm", ")", ")", "\n", "\n", "", "for", "i", ",", "batch", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "images", "=", "batch", "[", "'image'", "]", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "targets", "=", "batch", "[", "'semseg'", "]", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "output", "=", "model", "(", "images", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "targets", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ")", "\n", "semseg_meter", ".", "update", "(", "torch", ".", "argmax", "(", "output", ",", "dim", "=", "1", ")", ",", "targets", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "if", "i", "%", "100", "==", "0", ":", "\n", "            ", "progress", ".", "display", "(", "i", ")", "\n", "\n", "", "", "eval_results", "=", "semseg_meter", ".", "return_score", "(", "verbose", "=", "True", ")", "\n", "return", "eval_results", "\n", "", ""]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.utils.SemsegMeter.__init__": [[21, 29], ["int"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ",", "class_names", ",", "has_bg", "=", "True", ",", "ignore_index", "=", "255", ")", ":", "\n", "        ", "self", ".", "num_classes", "=", "num_classes", "+", "int", "(", "has_bg", ")", "\n", "self", ".", "class_names", "=", "class_names", "\n", "self", ".", "tp", "=", "[", "0", "]", "*", "self", ".", "num_classes", "\n", "self", ".", "fp", "=", "[", "0", "]", "*", "self", ".", "num_classes", "\n", "self", ".", "fn", "=", "[", "0", "]", "*", "self", ".", "num_classes", "\n", "assert", "(", "ignore_index", "==", "255", ")", "\n", "self", ".", "ignore_index", "=", "ignore_index", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.utils.SemsegMeter.update": [[30, 39], ["range", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "pred", ",", "gt", ")", ":", "\n", "        ", "valid", "=", "(", "gt", "!=", "self", ".", "ignore_index", ")", "\n", "\n", "for", "i_part", "in", "range", "(", "0", ",", "self", ".", "num_classes", ")", ":", "\n", "            ", "tmp_gt", "=", "(", "gt", "==", "i_part", ")", "\n", "tmp_pred", "=", "(", "pred", "==", "i_part", ")", "\n", "self", ".", "tp", "[", "i_part", "]", "+=", "torch", ".", "sum", "(", "tmp_gt", "&", "tmp_pred", "&", "valid", ")", ".", "item", "(", ")", "\n", "self", ".", "fp", "[", "i_part", "]", "+=", "torch", ".", "sum", "(", "~", "tmp_gt", "&", "tmp_pred", "&", "valid", ")", ".", "item", "(", ")", "\n", "self", ".", "fn", "[", "i_part", "]", "+=", "torch", ".", "sum", "(", "tmp_gt", "&", "~", "tmp_pred", "&", "valid", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.utils.SemsegMeter.reset": [[40, 44], ["None"], "methods", ["None"], ["", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "tp", "=", "[", "0", "]", "*", "self", ".", "num_classes", "\n", "self", ".", "fp", "=", "[", "0", "]", "*", "self", ".", "num_classes", "\n", "self", ".", "fn", "=", "[", "0", "]", "*", "self", ".", "num_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.utils.SemsegMeter.return_score": [[45, 61], ["range", "dict", "numpy.mean", "print", "print", "range", "float", "max", "print", "float"], "methods", ["None"], ["", "def", "return_score", "(", "self", ",", "verbose", "=", "True", ")", ":", "\n", "        ", "jac", "=", "[", "0", "]", "*", "self", ".", "num_classes", "\n", "for", "i_part", "in", "range", "(", "self", ".", "num_classes", ")", ":", "\n", "            ", "jac", "[", "i_part", "]", "=", "float", "(", "self", ".", "tp", "[", "i_part", "]", ")", "/", "max", "(", "float", "(", "self", ".", "tp", "[", "i_part", "]", "+", "self", ".", "fp", "[", "i_part", "]", "+", "self", ".", "fn", "[", "i_part", "]", ")", ",", "1e-8", ")", "\n", "\n", "", "eval_result", "=", "dict", "(", ")", "\n", "eval_result", "[", "'jaccards_all_categs'", "]", "=", "jac", "\n", "eval_result", "[", "'mIoU'", "]", "=", "np", ".", "mean", "(", "jac", ")", "\n", "\n", "if", "verbose", ":", "\n", "            ", "print", "(", "'Evaluation of semantic segmentation '", ")", "\n", "print", "(", "'mIoU is %.2f'", "%", "(", "100", "*", "eval_result", "[", "'mIoU'", "]", ")", ")", "\n", "for", "i_part", "in", "range", "(", "self", ".", "num_classes", ")", ":", "\n", "                ", "print", "(", "'IoU class %s is %.2f'", "%", "(", "self", ".", "class_names", "[", "i_part", "]", ",", "100", "*", "jac", "[", "i_part", "]", ")", ")", "\n", "\n", "", "", "return", "eval_result", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.utils.AverageMeter.__init__": [[19, 23], ["utils.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.utils.AverageMeter.reset"], ["\n", "", "", "", "", "class", "SemsegMeter", "(", "object", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "num_classes", ",", "class_names", ",", "has_bg", "=", "True", ",", "ignore_index", "=", "255", ")", ":", "\n", "        ", "self", ".", "num_classes", "=", "num_classes", "+", "int", "(", "has_bg", ")", "\n", "self", ".", "class_names", "=", "class_names", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.utils.AverageMeter.reset": [[24, 29], ["None"], "methods", ["None"], ["self", ".", "tp", "=", "[", "0", "]", "*", "self", ".", "num_classes", "\n", "self", ".", "fp", "=", "[", "0", "]", "*", "self", ".", "num_classes", "\n", "self", ".", "fn", "=", "[", "0", "]", "*", "self", ".", "num_classes", "\n", "assert", "(", "ignore_index", "==", "255", ")", "\n", "self", ".", "ignore_index", "=", "ignore_index", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.utils.AverageMeter.update": [[30, 35], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "pred", ",", "gt", ")", ":", "\n", "        ", "valid", "=", "(", "gt", "!=", "self", ".", "ignore_index", ")", "\n", "\n", "for", "i_part", "in", "range", "(", "0", ",", "self", ".", "num_classes", ")", ":", "\n", "            ", "tmp_gt", "=", "(", "gt", "==", "i_part", ")", "\n", "tmp_pred", "=", "(", "pred", "==", "i_part", ")", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.utils.AverageMeter.__str__": [[36, 39], ["fmtstr.format"], "methods", ["None"], ["self", ".", "tp", "[", "i_part", "]", "+=", "torch", ".", "sum", "(", "tmp_gt", "&", "tmp_pred", "&", "valid", ")", ".", "item", "(", ")", "\n", "self", ".", "fp", "[", "i_part", "]", "+=", "torch", ".", "sum", "(", "~", "tmp_gt", "&", "tmp_pred", "&", "valid", ")", ".", "item", "(", ")", "\n", "self", ".", "fn", "[", "i_part", "]", "+=", "torch", ".", "sum", "(", "tmp_gt", "&", "~", "tmp_pred", "&", "valid", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.utils.ProgressMeter.__init__": [[42, 46], ["utils.ProgressMeter._get_batch_fmtstr"], "methods", ["home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.utils.ProgressMeter._get_batch_fmtstr"], ["self", ".", "fp", "=", "[", "0", "]", "*", "self", ".", "num_classes", "\n", "self", ".", "fn", "=", "[", "0", "]", "*", "self", ".", "num_classes", "\n", "\n", "", "def", "return_score", "(", "self", ",", "verbose", "=", "True", ")", ":", "\n", "        ", "jac", "=", "[", "0", "]", "*", "self", ".", "num_classes", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.utils.ProgressMeter.display": [[47, 51], ["print", "str", "utils.ProgressMeter.batch_fmtstr.format"], "methods", ["None"], ["for", "i_part", "in", "range", "(", "self", ".", "num_classes", ")", ":", "\n", "            ", "jac", "[", "i_part", "]", "=", "float", "(", "self", ".", "tp", "[", "i_part", "]", ")", "/", "max", "(", "float", "(", "self", ".", "tp", "[", "i_part", "]", "+", "self", ".", "fp", "[", "i_part", "]", "+", "self", ".", "fn", "[", "i_part", "]", ")", ",", "1e-8", ")", "\n", "\n", "", "eval_result", "=", "dict", "(", ")", "\n", "eval_result", "[", "'jaccards_all_categs'", "]", "=", "jac", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.utils.ProgressMeter._get_batch_fmtstr": [[52, 56], ["len", "str", "str", "fmt.format"], "methods", ["None"], ["eval_result", "[", "'mIoU'", "]", "=", "np", ".", "mean", "(", "jac", ")", "\n", "\n", "if", "verbose", ":", "\n", "            ", "print", "(", "'Evaluation of semantic segmentation '", ")", "\n", "print", "(", "'mIoU is %.2f'", "%", "(", "100", "*", "eval_result", "[", "'mIoU'", "]", ")", ")", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.utils.mkdir_if_missing": [[9, 16], ["os.path.exists", "os.makedirs"], "function", ["None"], ["\n", "\n", "def", "mkdir_if_missing", "(", "directory", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "directory", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "os", ".", "makedirs", "(", "directory", ")", "\n", "", "except", "OSError", "as", "e", ":", "\n", "            ", "if", "e", ".", "errno", "!=", "errno", ".", "EEXIST", ":", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.train_utils.train": [[10, 65], ["utils.utils.AverageMeter", "utils.utils.AverageMeter", "utils.utils.AverageMeter", "utils.utils.AverageMeter", "utils.utils.AverageMeter", "utils.utils.ProgressMeter", "utils.utils.freeze_layers.train", "enumerate", "len", "utils.utils.freeze_layers", "[].cuda", "[].cuda", "[].cuda", "[].cuda", "utils.utils.freeze_layers.", "torch.unique", "torch.zeros().cuda", "torch.nn.functional.cross_entropy", "utils.utils.AverageMeter.update", "utils.utils.AverageMeter.update", "utils.utils.AverageMeter.update", "train_utils.accuracy", "utils.utils.AverageMeter.update", "utils.utils.AverageMeter.update", "optimizer.zero_grad", "optimizer.step", "freq.float", "labels.numel", "torch.log", "torch.nn.functional.cross_entropy.item", "saliency_loss.item", "loss.item", "[].cuda.size", "[].cuda.size", "loss.backward", "utils.utils.ProgressMeter.display", "torch.zeros", "amp.scale_loss", "scaled_loss.backward"], "function", ["home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.train_utils.train", "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.utils.freeze_layers", "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.train_utils.accuracy", "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.utils.ProgressMeter.display"], ["def", "train_segmentation_vanilla", "(", "p", ",", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "freeze_batchnorm", "=", "'none'", ")", ":", "\n", "    ", "\"\"\" Train a segmentation model in a fully-supervised manner \"\"\"", "\n", "losses", "=", "AverageMeter", "(", "'Loss'", ",", "':.4e'", ")", "\n", "semseg_meter", "=", "SemsegMeter", "(", "p", "[", "'num_classes'", "]", ",", "train_loader", ".", "dataset", ".", "get_class_names", "(", ")", ",", "\n", "p", "[", "'has_bg'", "]", ",", "ignore_index", "=", "255", ")", "\n", "progress", "=", "ProgressMeter", "(", "len", "(", "train_loader", ")", ",", "\n", "[", "losses", "]", ",", "\n", "prefix", "=", "\"Epoch: [{}]\"", ".", "format", "(", "epoch", ")", ")", "\n", "\n", "model", ".", "train", "(", ")", "\n", "\n", "if", "freeze_batchnorm", "==", "'none'", ":", "\n", "        ", "print", "(", "'BatchNorm tracks running stats - model put to train mode.'", ")", "\n", "pass", "\n", "\n", "", "elif", "freeze_batchnorm", "==", "'backbone'", ":", "\n", "        ", "print", "(", "'Freeze BatchNorm in the backbone - backbone put to eval mode.'", ")", "\n", "model", ".", "backbone", ".", "eval", "(", ")", "# Put encoder to eval", "\n", "\n", "", "elif", "freeze_batchnorm", "==", "'all'", ":", "# Put complete model to eval", "\n", "        ", "print", "(", "'Freeze BatchNorm - model put to eval mode.'", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Invalid value freeze batchnorm {}'", ".", "format", "(", "freeze_batchnorm", ")", ")", "\n", "\n", "", "for", "i", ",", "batch", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "images", "=", "batch", "[", "'image'", "]", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "targets", "=", "batch", "[", "'semseg'", "]", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "output", "=", "model", "(", "images", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "targets", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ")", "\n", "semseg_meter", ".", "update", "(", "torch", ".", "argmax", "(", "output", ",", "dim", "=", "1", ")", ",", "targets", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "if", "i", "%", "100", "==", "0", ":", "\n", "            ", "progress", ".", "display", "(", "i", ")", "\n", "\n", "", "", "eval_results", "=", "semseg_meter", ".", "return_score", "(", "verbose", "=", "True", ")", "\n", "return", "eval_results", "\n", "", ""]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.train_utils.accuracy": [[67, 79], ["torch.no_grad", "max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["None"], []], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.utils.freeze_layers": [[58, 85], ["model.module.model_q.backbone.conv1.eval", "model.module.model_q.backbone.bn1.eval", "model.module.model_k.backbone.conv1.eval", "model.module.model_k.backbone.bn1.eval", "model.module.model_q.backbone.layer1.eval", "model.module.model_k.backbone.layer1.eval", "model.module.model_q.backbone.layer2.eval", "model.module.model_k.backbone.layer2.eval", "model.module.model_q.backbone.conv1.named_parameters", "model.module.model_q.backbone.bn1.named_parameters", "model.module.model_k.backbone.conv1.named_parameters", "model.module.model_k.backbone.bn1.named_parameters", "model.module.model_q.backbone.layer1.named_parameters", "model.module.model_q.backbone.layer2.named_parameters", "model.module.model_k.backbone.layer1.named_parameters", "model.module.model_k.backbone.layer2.named_parameters"], "function", ["None"], ["                ", "print", "(", "'IoU class %s is %.2f'", "%", "(", "self", ".", "class_names", "[", "i_part", "]", ",", "100", "*", "jac", "[", "i_part", "]", ")", ")", "\n", "\n", "", "", "return", "eval_result", "\n", "\n", "\n", "", "", "class", "AverageMeter", "(", "object", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "name", ",", "fmt", "=", "':f'", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "fmt", "=", "fmt", "\n", "self", ".", "reset", "(", ")", "\n", "\n", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n", "", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n", "", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "fmtstr", "=", "'{name} {val'", "+", "self", ".", "fmt", "+", "'} ({avg'", "+", "self", ".", "fmt", "+", "'})'", "\n", "return", "fmtstr", ".", "format", "(", "**", "self", ".", "__dict__", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.models.models.SimpleSegmentationModel.__init__": [[14, 18], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.moco.builder.ContrastiveModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "backbone", ",", "decoder", ")", ":", "\n", "        ", "super", "(", "SimpleSegmentationModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "backbone", "=", "backbone", "\n", "self", ".", "decoder", "=", "decoder", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.models.models.SimpleSegmentationModel.forward": [[19, 25], ["models.SimpleSegmentationModel.backbone", "models.SimpleSegmentationModel.decoder", "torch.nn.functional.interpolate"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "input_shape", "=", "x", ".", "shape", "[", "-", "2", ":", "]", "\n", "x", "=", "self", ".", "backbone", "(", "x", ")", "\n", "x", "=", "self", ".", "decoder", "(", "x", ")", "\n", "x", "=", "F", ".", "interpolate", "(", "x", ",", "size", "=", "input_shape", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.models.models.ContrastiveSegmentationModel.__init__": [[27, 46], ["torch.nn.Module.__init__", "torch.nn.Identity", "NotImplementedError", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.moco.builder.ContrastiveModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "backbone", ",", "decoder", ",", "head", ",", "upsample", ",", "use_classification_head", "=", "False", ",", "freeze_batchnorm", "=", "'none'", ")", ":", "\n", "        ", "super", "(", "ContrastiveSegmentationModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "backbone", "=", "backbone", "\n", "self", ".", "upsample", "=", "upsample", "\n", "self", ".", "use_classification_head", "=", "use_classification_head", "\n", "\n", "if", "head", "==", "'linear'", ":", "\n", "# Head is linear.", "\n", "# We can just use regular decoder since final conv is 1 x 1.", "\n", "            ", "self", ".", "head", "=", "decoder", "[", "-", "1", "]", "\n", "decoder", "[", "-", "1", "]", "=", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "decoder", "=", "decoder", "\n", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'Head {} is currently not supported'", ".", "format", "(", "head", ")", ")", "\n", "\n", "\n", "", "if", "self", ".", "use_classification_head", ":", "# Add classification head for saliency prediction", "\n", "            ", "self", ".", "classification_head", "=", "nn", ".", "Conv2d", "(", "self", ".", "head", ".", "in_channels", ",", "1", ",", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.models.models.ContrastiveSegmentationModel.forward": [[47, 69], ["models.ContrastiveSegmentationModel.backbone", "models.ContrastiveSegmentationModel.decoder", "models.ContrastiveSegmentationModel.head", "models.ContrastiveSegmentationModel.classification_head", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate.squeeze"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# Standard model", "\n", "        ", "input_shape", "=", "x", ".", "shape", "[", "-", "2", ":", "]", "\n", "x", "=", "self", ".", "backbone", "(", "x", ")", "\n", "embedding", "=", "self", ".", "decoder", "(", "x", ")", "\n", "\n", "# Head", "\n", "x", "=", "self", ".", "head", "(", "embedding", ")", "\n", "if", "self", ".", "use_classification_head", ":", "\n", "            ", "sal", "=", "self", ".", "classification_head", "(", "embedding", ")", "\n", "\n", "# Upsample to input resolution", "\n", "", "if", "self", ".", "upsample", ":", "\n", "            ", "x", "=", "F", ".", "interpolate", "(", "x", ",", "size", "=", "input_shape", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "if", "self", ".", "use_classification_head", ":", "\n", "                ", "sal", "=", "F", ".", "interpolate", "(", "sal", ",", "size", "=", "input_shape", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "\n", "# Return outputs", "\n", "", "", "if", "self", ".", "use_classification_head", ":", "\n", "            ", "return", "x", ",", "sal", ".", "squeeze", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "x", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.models.deeplab.DeepLabHead.__init__": [[9, 16], ["torch.Sequential.__init__", "deeplab.ASPP", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.moco.builder.ContrastiveModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", "DeepLabHead", ",", "self", ")", ".", "__init__", "(", "\n", "ASPP", "(", "in_channels", ",", "[", "12", ",", "24", ",", "36", "]", ")", ",", "\n", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "256", ",", "num_classes", ",", "1", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.models.deeplab.ASPPConv.__init__": [[20, 27], ["torch.Sequential.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.moco.builder.ContrastiveModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "dilation", ")", ":", "\n", "        ", "modules", "=", "[", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "3", ",", "padding", "=", "dilation", ",", "dilation", "=", "dilation", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", "]", "\n", "super", "(", "ASPPConv", ",", "self", ")", ".", "__init__", "(", "*", "modules", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.models.deeplab.ASPPPooling.__init__": [[30, 36], ["torch.Sequential.__init__", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.moco.builder.ContrastiveModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ")", ":", "\n", "        ", "super", "(", "ASPPPooling", ",", "self", ")", ".", "__init__", "(", "\n", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.models.deeplab.ASPPPooling.forward": [[37, 42], ["torch.interpolate", "torch.interpolate", "torch.interpolate", "mod"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "size", "=", "x", ".", "shape", "[", "-", "2", ":", "]", "\n", "for", "mod", "in", "self", ":", "\n", "            ", "x", "=", "mod", "(", "x", ")", "\n", "", "return", "F", ".", "interpolate", "(", "x", ",", "size", "=", "size", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.models.deeplab.ASPP.__init__": [[45, 66], ["torch.Module.__init__", "modules.append", "tuple", "modules.append", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "modules.append", "deeplab.ASPPPooling", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "deeplab.ASPPConv"], "methods", ["home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.moco.builder.ContrastiveModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "atrous_rates", ",", "out_channels", "=", "256", ")", ":", "\n", "        ", "super", "(", "ASPP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "modules", "=", "[", "]", "\n", "modules", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", ")", "\n", "\n", "rates", "=", "tuple", "(", "atrous_rates", ")", "\n", "for", "rate", "in", "rates", ":", "\n", "            ", "modules", ".", "append", "(", "ASPPConv", "(", "in_channels", ",", "out_channels", ",", "rate", ")", ")", "\n", "\n", "", "modules", ".", "append", "(", "ASPPPooling", "(", "in_channels", ",", "out_channels", ")", ")", "\n", "\n", "self", ".", "convs", "=", "nn", ".", "ModuleList", "(", "modules", ")", "\n", "\n", "self", ".", "project", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "5", "*", "out_channels", ",", "out_channels", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "0.5", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.models.deeplab.ASPP.forward": [[67, 73], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "deeplab.ASPP.project", "torch.cat.append", "torch.cat.append", "torch.cat.append", "conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "res", "=", "[", "]", "\n", "for", "conv", "in", "self", ".", "convs", ":", "\n", "            ", "res", ".", "append", "(", "conv", "(", "x", ")", ")", "\n", "", "res", "=", "torch", ".", "cat", "(", "res", ",", "dim", "=", "1", ")", "\n", "return", "self", ".", "project", "(", "res", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.models.resnet_dilated.ResnetDilated.__init__": [[8, 30], ["torch.Module.__init__", "orig_resnet.layer3.apply", "orig_resnet.layer4.apply", "partial", "partial", "orig_resnet.layer4.apply", "partial"], "methods", ["home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.moco.builder.ContrastiveModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "orig_resnet", ",", "dilate_scale", "=", "8", ")", ":", "\n", "        ", "super", "(", "ResnetDilated", ",", "self", ")", ".", "__init__", "(", ")", "\n", "from", "functools", "import", "partial", "\n", "\n", "if", "dilate_scale", "==", "8", ":", "\n", "            ", "orig_resnet", ".", "layer3", ".", "apply", "(", "\n", "partial", "(", "self", ".", "_nostride_dilate", ",", "dilate", "=", "2", ")", ")", "\n", "orig_resnet", ".", "layer4", ".", "apply", "(", "\n", "partial", "(", "self", ".", "_nostride_dilate", ",", "dilate", "=", "4", ")", ")", "\n", "", "elif", "dilate_scale", "==", "16", ":", "\n", "            ", "orig_resnet", ".", "layer4", ".", "apply", "(", "\n", "partial", "(", "self", ".", "_nostride_dilate", ",", "dilate", "=", "2", ")", ")", "\n", "\n", "", "self", ".", "conv1", "=", "orig_resnet", ".", "conv1", "\n", "self", ".", "bn1", "=", "orig_resnet", ".", "bn1", "\n", "self", ".", "relu", "=", "orig_resnet", ".", "relu", "\n", "\n", "self", ".", "maxpool", "=", "orig_resnet", ".", "maxpool", "\n", "self", ".", "layer1", "=", "orig_resnet", ".", "layer1", "\n", "self", ".", "layer2", "=", "orig_resnet", ".", "layer2", "\n", "self", ".", "layer3", "=", "orig_resnet", ".", "layer3", "\n", "self", ".", "layer4", "=", "orig_resnet", ".", "layer4", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.models.resnet_dilated.ResnetDilated._nostride_dilate": [[31, 45], ["classname.find"], "methods", ["None"], ["", "def", "_nostride_dilate", "(", "self", ",", "m", ",", "dilate", ")", ":", "\n", "        ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "# the convolution with stride", "\n", "            ", "if", "m", ".", "stride", "==", "(", "2", ",", "2", ")", ":", "\n", "                ", "m", ".", "stride", "=", "(", "1", ",", "1", ")", "\n", "if", "m", ".", "kernel_size", "==", "(", "3", ",", "3", ")", ":", "\n", "                    ", "m", ".", "dilation", "=", "(", "dilate", "//", "2", ",", "dilate", "//", "2", ")", "\n", "m", ".", "padding", "=", "(", "dilate", "//", "2", ",", "dilate", "//", "2", ")", "\n", "# other convoluions", "\n", "", "", "else", ":", "\n", "                ", "if", "m", ".", "kernel_size", "==", "(", "3", ",", "3", ")", ":", "\n", "                    ", "m", ".", "dilation", "=", "(", "dilate", ",", "dilate", ")", "\n", "m", ".", "padding", "=", "(", "dilate", ",", "dilate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.models.resnet_dilated.ResnetDilated.forward": [[46, 56], ["resnet_dilated.ResnetDilated.relu", "resnet_dilated.ResnetDilated.maxpool", "resnet_dilated.ResnetDilated.layer1", "resnet_dilated.ResnetDilated.layer2", "resnet_dilated.ResnetDilated.layer3", "resnet_dilated.ResnetDilated.layer4", "resnet_dilated.ResnetDilated.bn1", "resnet_dilated.ResnetDilated.conv1"], "methods", ["None"], ["", "", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.util.mypath.Path.db_root_dir": [[9, 22], ["os.path.join", "ValueError"], "methods", ["None"], ["    ", "\"\"\"\n    User-specific path configuration.\n    \"\"\"", "\n", "@", "staticmethod", "\n", "def", "db_root_dir", "(", "database", "=", "''", ")", ":", "\n", "        ", "db_root", "=", "'/path/to/PASCAL_VOC/'", "# VOC will be automatically downloaded", "\n", "db_names", "=", "[", "'VOCSegmentation'", "]", "\n", "\n", "if", "database", "==", "''", ":", "\n", "            ", "return", "db_root", "\n", "\n", "", "if", "database", "in", "db_names", ":", "\n", "            ", "return", "os", ".", "path", ".", "join", "(", "db_root", ",", "database", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.util.google_drive.download_file_from_google_drive": [[9, 28], ["requests.Session", "requests.Session.get", "session.get.cookies.items", "key.startswith", "requests.Session.get", "open", "session.get.iter_content", "f.write"], "function", ["home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.logger.Logger.write"], ["def", "download_file_from_google_drive", "(", "id", ",", "destination", ")", ":", "\n", "    ", "URL", "=", "\"https://drive.google.com/u/1/uc?export=download\"", "\n", "\n", "session", "=", "requests", ".", "Session", "(", ")", "\n", "\n", "response", "=", "session", ".", "get", "(", "URL", ",", "params", "=", "{", "'id'", ":", "id", "}", ",", "stream", "=", "True", ")", "\n", "\n", "for", "key", ",", "value", "in", "response", ".", "cookies", ".", "items", "(", ")", ":", "\n", "        ", "if", "key", ".", "startswith", "(", "'download_warning'", ")", ":", "\n", "            ", "token", "=", "value", "\n", "\n", "", "", "if", "token", ":", "\n", "        ", "params", "=", "{", "'id'", ":", "id", ",", "'confirm'", ":", "token", "}", "\n", "response", "=", "session", ".", "get", "(", "URL", ",", "params", "=", "params", ",", "stream", "=", "True", ")", "\n", "\n", "", "with", "open", "(", "destination", ",", "\"wb\"", ")", "as", "f", ":", "\n", "        ", "for", "chunk", "in", "response", ".", "iter_content", "(", "CHUNK_SIZE", ")", ":", "\n", "            ", "if", "chunk", ":", "# filter out keep-alive new chunks", "\n", "                ", "f", ".", "write", "(", "chunk", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.util.helpers.tens2image": [[11, 22], ["tens.numpy", "numpy.squeeze", "im.transpose.transpose"], "function", ["None"], ["def", "tens2image", "(", "tens", ")", ":", "\n", "    ", "\"\"\"Converts tensor with 2 or 3 dimensions to numpy array\"\"\"", "\n", "im", "=", "tens", ".", "numpy", "(", ")", "\n", "\n", "if", "im", ".", "shape", "[", "0", "]", "==", "1", ":", "\n", "        ", "im", "=", "np", ".", "squeeze", "(", "im", ",", "axis", "=", "0", ")", "\n", "\n", "", "if", "im", ".", "ndim", "==", "3", ":", "\n", "        ", "im", "=", "im", ".", "transpose", "(", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "\n", "", "return", "im", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.util.helpers.pascal_color_map": [[24, 49], ["numpy.zeros", "range", "range", "numpy.array", "helpers.pascal_color_map.bitget"], "function", ["None"], ["", "def", "pascal_color_map", "(", "N", "=", "256", ",", "normalized", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Python implementation of the color map function for the PASCAL VOC data set.\n    Official Matlab version can be found in the PASCAL VOC devkit\n    http://host.robots.ox.ac.uk/pascal/VOC/voc2012/index.html#devkit\n    \"\"\"", "\n", "\n", "def", "bitget", "(", "byteval", ",", "idx", ")", ":", "\n", "        ", "return", "(", "byteval", "&", "(", "1", "<<", "idx", ")", ")", "!=", "0", "\n", "\n", "", "dtype", "=", "'float32'", "if", "normalized", "else", "'uint8'", "\n", "cmap", "=", "np", ".", "zeros", "(", "(", "N", ",", "3", ")", ",", "dtype", "=", "dtype", ")", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "        ", "r", "=", "g", "=", "b", "=", "0", "\n", "c", "=", "i", "\n", "for", "j", "in", "range", "(", "8", ")", ":", "\n", "            ", "r", "=", "r", "|", "(", "bitget", "(", "c", ",", "0", ")", "<<", "7", "-", "j", ")", "\n", "g", "=", "g", "|", "(", "bitget", "(", "c", ",", "1", ")", "<<", "7", "-", "j", ")", "\n", "b", "=", "b", "|", "(", "bitget", "(", "c", ",", "2", ")", "<<", "7", "-", "j", ")", "\n", "c", "=", "c", ">>", "3", "\n", "\n", "", "cmap", "[", "i", "]", "=", "np", ".", "array", "(", "[", "r", ",", "g", ",", "b", "]", ")", "\n", "\n", "", "cmap", "=", "cmap", "/", "255", "if", "normalized", "else", "cmap", "\n", "return", "cmap", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.util.helpers.fixed_resize": [[51, 77], ["isinstance", "int", "tuple", "cv2.resize", "numpy.zeros", "range", "round", "numpy.append", "cv2.resize", "int", "numpy.argmax", "numpy.max", "float", "numpy.min"], "function", ["None"], ["", "def", "fixed_resize", "(", "sample", ",", "resolution", ",", "flagval", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Fixed resize to\n    resolution (tuple): resize image to size specified by tuple eg. (512, 512).\n    resolution (int): bring smaller side to resolution eg. image of shape 321 x 481 -> 512 x 767\n    \"\"\"", "\n", "if", "flagval", "is", "None", ":", "\n", "        ", "if", "(", "(", "sample", "==", "0", ")", "|", "(", "sample", "==", "1", ")", ")", ".", "all", "(", ")", ":", "\n", "            ", "flagval", "=", "cv2", ".", "INTER_NEAREST", "\n", "", "else", ":", "\n", "            ", "flagval", "=", "cv2", ".", "INTER_CUBIC", "\n", "\n", "", "", "if", "isinstance", "(", "resolution", ",", "int", ")", ":", "\n", "        ", "tmp", "=", "[", "resolution", ",", "resolution", "]", "\n", "tmp", "[", "int", "(", "np", ".", "argmax", "(", "sample", ".", "shape", "[", ":", "2", "]", ")", ")", "]", "=", "int", "(", "\n", "round", "(", "float", "(", "resolution", ")", "/", "np", ".", "min", "(", "sample", ".", "shape", "[", ":", "2", "]", ")", "*", "np", ".", "max", "(", "sample", ".", "shape", "[", ":", "2", "]", ")", ")", ")", "\n", "resolution", "=", "tuple", "(", "tmp", ")", "\n", "\n", "", "if", "sample", ".", "ndim", "==", "2", "or", "(", "sample", ".", "ndim", "==", "3", "and", "sample", ".", "shape", "[", "2", "]", "==", "3", ")", ":", "\n", "        ", "sample", "=", "cv2", ".", "resize", "(", "sample", ",", "resolution", "[", ":", ":", "-", "1", "]", ",", "interpolation", "=", "flagval", ")", "\n", "", "else", ":", "\n", "        ", "tmp", "=", "sample", "\n", "sample", "=", "np", ".", "zeros", "(", "np", ".", "append", "(", "resolution", ",", "tmp", ".", "shape", "[", "2", "]", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "ii", "in", "range", "(", "sample", ".", "shape", "[", "2", "]", ")", ":", "\n", "            ", "sample", "[", ":", ",", ":", ",", "ii", "]", "=", "cv2", ".", "resize", "(", "tmp", "[", ":", ",", ":", ",", "ii", "]", ",", "resolution", "[", ":", ":", "-", "1", "]", ",", "interpolation", "=", "flagval", ")", "\n", "", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.util.helpers.im_normalize": [[79, 85], ["max", "im.min", "im.max", "im.min"], "function", ["None"], ["", "def", "im_normalize", "(", "im", ",", "max_value", "=", "1", ")", ":", "\n", "    ", "\"\"\"\n    Normalize image to range 0 - max_value\n    \"\"\"", "\n", "imn", "=", "max_value", "*", "(", "im", "-", "im", ".", "min", "(", ")", ")", "/", "max", "(", "(", "im", ".", "max", "(", ")", "-", "im", ".", "min", "(", ")", ")", ",", "1e-8", ")", "\n", "return", "imn", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.util.helpers.ind2sub": [[87, 95], ["range", "len", "cols.append", "rows.append", "inds[].astype", "inds[].astype"], "function", ["None"], ["", "def", "ind2sub", "(", "array_shape", ",", "inds", ")", ":", "\n", "    ", "rows", ",", "cols", "=", "[", "]", ",", "[", "]", "\n", "for", "k", "in", "range", "(", "len", "(", "inds", ")", ")", ":", "\n", "        ", "if", "inds", "[", "k", "]", "==", "0", ":", "\n", "            ", "continue", "\n", "", "cols", ".", "append", "(", "(", "inds", "[", "k", "]", ".", "astype", "(", "'int'", ")", "//", "array_shape", "[", "1", "]", ")", ")", "\n", "rows", ".", "append", "(", "(", "inds", "[", "k", "]", ".", "astype", "(", "'int'", ")", "%", "array_shape", "[", "1", "]", ")", ")", "\n", "", "return", "rows", ",", "cols", "\n", "", ""]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.dataloaders.custom_transforms.ScaleNRotate.__init__": [[22, 28], ["isinstance", "type"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "rots", "=", "(", "-", "30", ",", "30", ")", ",", "scales", "=", "(", ".75", ",", "1.25", ")", ",", "semseg", "=", "False", ",", "flagvals", "=", "None", ")", ":", "\n", "        ", "assert", "(", "isinstance", "(", "rots", ",", "type", "(", "scales", ")", ")", ")", "\n", "self", ".", "rots", "=", "rots", "\n", "self", ".", "scales", "=", "scales", "\n", "self", ".", "semseg", "=", "semseg", "\n", "self", ".", "flagvals", "=", "flagvals", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.dataloaders.custom_transforms.ScaleNRotate.__call__": [[29, 76], ["sample.keys", "type", "cv2.getRotationMatrix2D", "cv2.warpAffine", "type", "numpy.arctan2", "numpy.arctan2", "numpy.sqrt", "numpy.sqrt", "numpy.random", "numpy.random", "numpy.sin", "numpy.sin", "numpy.cos", "numpy.cos", "numpy.random", "numpy.random", "numpy.randint", "numpy.randint", "numpy.randint", "numpy.randint", "len", "len"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "\n", "        ", "if", "type", "(", "self", ".", "rots", ")", "==", "tuple", ":", "\n", "# Continuous range of scales and rotations", "\n", "            ", "rot", "=", "(", "self", ".", "rots", "[", "1", "]", "-", "self", ".", "rots", "[", "0", "]", ")", "*", "random", ".", "random", "(", ")", "-", "(", "self", ".", "rots", "[", "1", "]", "-", "self", ".", "rots", "[", "0", "]", ")", "/", "2", "\n", "\n", "sc", "=", "(", "self", ".", "scales", "[", "1", "]", "-", "self", ".", "scales", "[", "0", "]", ")", "*", "random", ".", "random", "(", ")", "-", "(", "self", ".", "scales", "[", "1", "]", "-", "self", ".", "scales", "[", "0", "]", ")", "/", "2", "+", "1", "\n", "", "elif", "type", "(", "self", ".", "rots", ")", "==", "list", ":", "\n", "# Fixed range of scales and rotations", "\n", "            ", "rot", "=", "self", ".", "rots", "[", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "rots", ")", ")", "]", "\n", "sc", "=", "self", ".", "scales", "[", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "scales", ")", ")", "]", "\n", "\n", "", "for", "elem", "in", "sample", ".", "keys", "(", ")", ":", "\n", "            ", "if", "'meta'", "in", "elem", ":", "\n", "                ", "continue", "\n", "\n", "", "tmp", "=", "sample", "[", "elem", "]", "\n", "\n", "h", ",", "w", "=", "tmp", ".", "shape", "[", ":", "2", "]", "\n", "center", "=", "(", "w", "/", "2", ",", "h", "/", "2", ")", "\n", "assert", "(", "center", "!=", "0", ")", "# Strange behaviour warpAffine", "\n", "M", "=", "cv2", ".", "getRotationMatrix2D", "(", "center", ",", "rot", ",", "sc", ")", "\n", "if", "self", ".", "flagvals", "is", "None", ":", "\n", "                ", "if", "(", "(", "tmp", "==", "0", ")", "|", "(", "tmp", "==", "1", ")", ")", ".", "all", "(", ")", ":", "\n", "                    ", "flagval", "=", "cv2", ".", "INTER_NEAREST", "\n", "", "elif", "'gt'", "in", "elem", "and", "self", ".", "semseg", ":", "\n", "                    ", "flagval", "=", "cv2", ".", "INTER_NEAREST", "\n", "", "else", ":", "\n", "                    ", "flagval", "=", "cv2", ".", "INTER_CUBIC", "\n", "", "", "else", ":", "\n", "                ", "flagval", "=", "self", ".", "flagvals", "[", "elem", "]", "\n", "\n", "", "if", "elem", "==", "'normals'", ":", "\n", "# Rotate Normals properly", "\n", "                ", "in_plane", "=", "np", ".", "arctan2", "(", "tmp", "[", ":", ",", ":", ",", "0", "]", ",", "tmp", "[", ":", ",", ":", ",", "1", "]", ")", "\n", "nrm_0", "=", "np", ".", "sqrt", "(", "tmp", "[", ":", ",", ":", ",", "0", "]", "**", "2", "+", "tmp", "[", ":", ",", ":", ",", "1", "]", "**", "2", ")", "\n", "rot_rad", "=", "rot", "*", "2", "*", "math", ".", "pi", "/", "360", "\n", "tmp", "[", ":", ",", ":", ",", "0", "]", "=", "np", ".", "sin", "(", "in_plane", "+", "rot_rad", ")", "*", "nrm_0", "\n", "tmp", "[", ":", ",", ":", ",", "1", "]", "=", "np", ".", "cos", "(", "in_plane", "+", "rot_rad", ")", "*", "nrm_0", "\n", "\n", "", "tmp", "=", "cv2", ".", "warpAffine", "(", "tmp", ",", "M", ",", "(", "w", ",", "h", ")", ",", "flags", "=", "flagval", ")", "\n", "\n", "sample", "[", "elem", "]", "=", "tmp", "\n", "\n", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.dataloaders.custom_transforms.ScaleNRotate.__str__": [[77, 79], ["str", "str"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "'ScaleNRotate:(rot='", "+", "str", "(", "self", ".", "rots", ")", "+", "',scale='", "+", "str", "(", "self", ".", "scales", ")", "+", "')'", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.dataloaders.custom_transforms.FixedResize.__init__": [[86, 91], ["len", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "resolutions", "=", "None", ",", "flagvals", "=", "None", ")", ":", "\n", "        ", "self", ".", "resolutions", "=", "resolutions", "\n", "self", ".", "flagvals", "=", "flagvals", "\n", "if", "self", ".", "flagvals", "is", "not", "None", ":", "\n", "            ", "assert", "(", "len", "(", "self", ".", "resolutions", ")", "==", "len", "(", "self", ".", "flagvals", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.dataloaders.custom_transforms.FixedResize.__call__": [[92, 132], ["list", "sample.keys", "isinstance", "numpy.zeros", "numpy.zeros", "enumerate", "numpy.append", "numpy.append", "numpy.append", "numpy.append", "data.fixed_resize", "data.fixed_resize", "len", "data.fixed_resize", "data.fixed_resize", "numpy.sqrt", "numpy.sqrt", "len", "numpy.finfo", "numpy.finfo"], "methods", ["home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.util.helpers.fixed_resize", "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.util.helpers.fixed_resize", "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.util.helpers.fixed_resize", "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.util.helpers.fixed_resize"], ["", "", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "\n", "# Fixed range of scales", "\n", "        ", "if", "self", ".", "resolutions", "is", "None", ":", "\n", "            ", "return", "sample", "\n", "\n", "", "elems", "=", "list", "(", "sample", ".", "keys", "(", ")", ")", "\n", "for", "elem", "in", "elems", ":", "\n", "            ", "if", "'meta'", "in", "elem", "or", "'bbox'", "in", "elem", ":", "\n", "                ", "continue", "\n", "\n", "", "if", "elem", "in", "self", ".", "resolutions", ":", "\n", "                ", "if", "self", ".", "resolutions", "[", "elem", "]", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "if", "isinstance", "(", "sample", "[", "elem", "]", ",", "list", ")", ":", "\n", "                    ", "if", "sample", "[", "elem", "]", "[", "0", "]", ".", "ndim", "==", "3", ":", "\n", "                        ", "output_size", "=", "np", ".", "append", "(", "self", ".", "resolutions", "[", "elem", "]", ",", "[", "3", ",", "len", "(", "sample", "[", "elem", "]", ")", "]", ")", "\n", "", "else", ":", "\n", "                        ", "output_size", "=", "np", ".", "append", "(", "self", ".", "resolutions", "[", "elem", "]", ",", "len", "(", "sample", "[", "elem", "]", ")", ")", "\n", "", "tmp", "=", "sample", "[", "elem", "]", "\n", "sample", "[", "elem", "]", "=", "np", ".", "zeros", "(", "output_size", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "ii", ",", "crop", "in", "enumerate", "(", "tmp", ")", ":", "\n", "                        ", "if", "self", ".", "flagvals", "is", "None", ":", "\n", "                            ", "sample", "[", "elem", "]", "[", "...", ",", "ii", "]", "=", "helpers", ".", "fixed_resize", "(", "crop", ",", "self", ".", "resolutions", "[", "elem", "]", ")", "\n", "", "else", ":", "\n", "                            ", "sample", "[", "elem", "]", "[", "...", ",", "ii", "]", "=", "helpers", ".", "fixed_resize", "(", "crop", ",", "self", ".", "resolutions", "[", "elem", "]", ",", "flagval", "=", "self", ".", "flagvals", "[", "elem", "]", ")", "\n", "", "", "", "else", ":", "\n", "                    ", "if", "self", ".", "flagvals", "is", "None", ":", "\n", "                        ", "sample", "[", "elem", "]", "=", "helpers", ".", "fixed_resize", "(", "sample", "[", "elem", "]", ",", "self", ".", "resolutions", "[", "elem", "]", ")", "\n", "", "else", ":", "\n", "                        ", "sample", "[", "elem", "]", "=", "helpers", ".", "fixed_resize", "(", "sample", "[", "elem", "]", ",", "self", ".", "resolutions", "[", "elem", "]", ",", "flagval", "=", "self", ".", "flagvals", "[", "elem", "]", ")", "\n", "\n", "", "if", "elem", "==", "'normals'", ":", "\n", "                        ", "N1", ",", "N2", ",", "N3", "=", "sample", "[", "elem", "]", "[", ":", ",", ":", ",", "0", "]", ",", "sample", "[", "elem", "]", "[", ":", ",", ":", ",", "1", "]", ",", "sample", "[", "elem", "]", "[", ":", ",", ":", ",", "2", "]", "\n", "Nn", "=", "np", ".", "sqrt", "(", "N1", "**", "2", "+", "N2", "**", "2", "+", "N3", "**", "2", ")", "+", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "eps", "\n", "sample", "[", "elem", "]", "[", ":", ",", ":", ",", "0", "]", ",", "sample", "[", "elem", "]", "[", ":", ",", ":", ",", "1", "]", ",", "sample", "[", "elem", "]", "[", ":", ",", ":", ",", "2", "]", "=", "N1", "/", "Nn", ",", "N2", "/", "Nn", ",", "N3", "/", "Nn", "\n", "", "", "", "else", ":", "\n", "                ", "del", "sample", "[", "elem", "]", "\n", "\n", "", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.dataloaders.custom_transforms.FixedResize.__str__": [[133, 135], ["str"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "'FixedResize:'", "+", "str", "(", "self", ".", "resolutions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.dataloaders.custom_transforms.RandomResize.__init__": [[142, 144], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "scales", "=", "[", "0.5", ",", "0.8", ",", "1", "]", ")", ":", "\n", "        ", "self", ".", "scales", "=", "scales", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.dataloaders.custom_transforms.RandomResize.__call__": [[145, 166], ["sample.keys", "cv2.resize", "numpy.randint", "numpy.randint", "len"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "\n", "# Fixed range of scales", "\n", "        ", "sc", "=", "self", ".", "scales", "[", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "scales", ")", ")", "]", "\n", "\n", "for", "elem", "in", "sample", ".", "keys", "(", ")", ":", "\n", "            ", "if", "'meta'", "in", "elem", "or", "'bbox'", "in", "elem", ":", "\n", "                ", "continue", "\n", "\n", "", "tmp", "=", "sample", "[", "elem", "]", "\n", "\n", "if", "(", "(", "tmp", "==", "0", ")", "|", "(", "tmp", "==", "1", ")", ")", ".", "all", "(", ")", ":", "\n", "                ", "flagval", "=", "cv2", ".", "INTER_NEAREST", "\n", "", "else", ":", "\n", "                ", "flagval", "=", "cv2", ".", "INTER_CUBIC", "\n", "\n", "", "tmp", "=", "cv2", ".", "resize", "(", "tmp", ",", "None", ",", "fx", "=", "sc", ",", "fy", "=", "sc", ",", "interpolation", "=", "flagval", ")", "\n", "\n", "sample", "[", "elem", "]", "=", "tmp", "\n", "\n", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.dataloaders.custom_transforms.RandomResize.__str__": [[167, 169], ["str"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "'RandomResize:'", "+", "str", "(", "self", ".", "scales", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.dataloaders.custom_transforms.FixedResizeRatio.__init__": [[176, 179], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "scale", "=", "None", ",", "flagvals", "=", "None", ")", ":", "\n", "        ", "self", ".", "scale", "=", "scale", "\n", "self", ".", "flagvals", "=", "flagvals", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.dataloaders.custom_transforms.FixedResizeRatio.__call__": [[180, 196], ["sample.keys", "cv2.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "\n", "        ", "for", "elem", "in", "sample", ".", "keys", "(", ")", ":", "\n", "            ", "if", "'meta'", "in", "elem", ":", "\n", "                ", "continue", "\n", "\n", "", "if", "elem", "in", "self", ".", "flagvals", ":", "\n", "                ", "if", "self", ".", "flagvals", "[", "elem", "]", "is", "None", ":", "\n", "                    ", "continue", "\n", "\n", "", "tmp", "=", "sample", "[", "elem", "]", "\n", "tmp", "=", "cv2", ".", "resize", "(", "tmp", ",", "None", ",", "fx", "=", "self", ".", "scale", ",", "fy", "=", "self", ".", "scale", ",", "interpolation", "=", "self", ".", "flagvals", "[", "elem", "]", ")", "\n", "\n", "sample", "[", "elem", "]", "=", "tmp", "\n", "\n", "", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.dataloaders.custom_transforms.FixedResizeRatio.__str__": [[197, 199], ["str"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "'FixedResizeRatio: '", "+", "str", "(", "self", ".", "scale", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.dataloaders.custom_transforms.RandomHorizontalFlip.__call__": [[204, 219], ["numpy.random", "numpy.random", "sample.keys", "cv2.flip"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "            ", "for", "elem", "in", "sample", ".", "keys", "(", ")", ":", "\n", "                ", "if", "'meta'", "in", "elem", ":", "\n", "                    ", "continue", "\n", "", "else", ":", "\n", "                    ", "tmp", "=", "sample", "[", "elem", "]", "\n", "tmp", "=", "cv2", ".", "flip", "(", "tmp", ",", "flipCode", "=", "1", ")", "\n", "sample", "[", "elem", "]", "=", "tmp", "\n", "\n", "", "if", "elem", "==", "'normals'", ":", "\n", "                    ", "sample", "[", "elem", "]", "[", ":", ",", ":", ",", "0", "]", "*=", "-", "1", "\n", "\n", "", "", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.dataloaders.custom_transforms.RandomHorizontalFlip.__str__": [[220, 222], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "'RandomHorizontalFlip'", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.dataloaders.custom_transforms.ToTensor.__init__": [[226, 228], ["torchvision.transforms.ToTensor"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "to_tensor", "=", "torchvision", ".", "transforms", ".", "ToTensor", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.dataloaders.custom_transforms.ToTensor.__call__": [[229, 245], ["sample.keys", "custom_transforms.ToTensor.to_tensor", "torch.from_numpy().long", "torch.from_numpy"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "\n", "        ", "for", "elem", "in", "sample", ".", "keys", "(", ")", ":", "\n", "            ", "if", "'meta'", "in", "elem", ":", "\n", "                ", "continue", "\n", "\n", "", "elif", "elem", "==", "'image'", ":", "\n", "                ", "sample", "[", "elem", "]", "=", "self", ".", "to_tensor", "(", "sample", "[", "elem", "]", ")", "# Regular ToTensor operation ", "\n", "\n", "", "elif", "elem", "in", "[", "'semseg'", "]", ":", "\n", "                ", "sample", "[", "elem", "]", "=", "torch", ".", "from_numpy", "(", "sample", "[", "elem", "]", ")", ".", "long", "(", ")", "# Torch Long", "\n", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "\n", "", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.dataloaders.custom_transforms.ToTensor.__str__": [[246, 248], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "'ToTensor'", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.dataloaders.custom_transforms.Normalize.__init__": [[252, 254], ["torchvision.transforms.Normalize"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "mean", ",", "std", ")", ":", "\n", "        ", "self", ".", "normalize", "=", "torchvision", ".", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.dataloaders.custom_transforms.Normalize.__call__": [[255, 258], ["custom_transforms.Normalize.normalize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "sample", "[", "'image'", "]", "=", "self", ".", "normalize", "(", "sample", "[", "'image'", "]", ")", "\n", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.dataloaders.custom_transforms.Normalize.__str__": [[259, 261], ["custom_transforms.Normalize.normalize.__str__"], "methods", ["home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.dataloaders.pascal_voc.VOCSegmentation.__str__"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "normalize", ".", "__str__", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.dataloaders.pascal_voc.VOC12.__init__": [[35, 86], ["torch.util.mypath.Path.db_root_dir", "os.path.join", "print", "os.path.join", "enumerate", "print", "os.path.join", "os.path.join", "pascal_voc.VOC12._download", "open", "f.read().splitlines", "os.path.join", "os.path.isfile", "pascal_voc.VOC12.images.append", "os.path.join", "os.path.isfile", "pascal_voc.VOC12.semsegs.append", "len", "len", "pascal_voc.VOC12.VOC_CATEGORY_NAMES.index", "len", "f.read"], "methods", ["home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.util.mypath.Path.db_root_dir", "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.dataloaders.pascal_voc.VOCSegmentation._download"], ["def", "__init__", "(", "self", ",", "root", "=", "Path", ".", "db_root_dir", "(", "'VOCSegmentation'", ")", ",", "\n", "split", "=", "'val'", ",", "transform", "=", "None", ",", "download", "=", "True", ",", "ignore_classes", "=", "[", "]", ")", ":", "\n", "# Set paths", "\n", "        ", "self", ".", "root", "=", "root", "\n", "valid_splits", "=", "[", "'trainaug'", ",", "'train'", ",", "'val'", "]", "\n", "assert", "(", "split", "in", "valid_splits", ")", "\n", "self", ".", "split", "=", "split", "\n", "\n", "if", "split", "==", "'trainaug'", ":", "\n", "            ", "_semseg_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'SegmentationClassAug'", ")", "\n", "", "else", ":", "\n", "            ", "_semseg_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'SegmentationClass'", ")", "\n", "\n", "", "_image_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'images'", ")", "\n", "\n", "\n", "# Download", "\n", "if", "download", ":", "\n", "            ", "self", ".", "_download", "(", ")", "\n", "\n", "# Transform", "\n", "", "self", ".", "transform", "=", "transform", "\n", "\n", "# Splits are pre-cut", "\n", "print", "(", "\"Initializing dataloader for PASCAL VOC12 {} set\"", ".", "format", "(", "''", ".", "join", "(", "self", ".", "split", ")", ")", ")", "\n", "split_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'sets'", ",", "self", ".", "split", "+", "'.txt'", ")", "\n", "self", ".", "images", "=", "[", "]", "\n", "self", ".", "semsegs", "=", "[", "]", "\n", "\n", "with", "open", "(", "split_file", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "lines", "=", "f", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "\n", "", "for", "ii", ",", "line", "in", "enumerate", "(", "lines", ")", ":", "\n", "# Images", "\n", "            ", "_image", "=", "os", ".", "path", ".", "join", "(", "_image_dir", ",", "line", "+", "\".jpg\"", ")", "\n", "assert", "os", ".", "path", ".", "isfile", "(", "_image", ")", "\n", "self", ".", "images", ".", "append", "(", "_image", ")", "\n", "\n", "# Semantic Segmentation", "\n", "_semseg", "=", "os", ".", "path", ".", "join", "(", "_semseg_dir", ",", "line", "+", "'.png'", ")", "\n", "assert", "os", ".", "path", ".", "isfile", "(", "_semseg", ")", "\n", "self", ".", "semsegs", ".", "append", "(", "_semseg", ")", "\n", "\n", "", "assert", "(", "len", "(", "self", ".", "images", ")", "==", "len", "(", "self", ".", "semsegs", ")", ")", "\n", "\n", "# Display stats", "\n", "print", "(", "'Number of dataset images: {:d}'", ".", "format", "(", "len", "(", "self", ".", "images", ")", ")", ")", "\n", "\n", "# List of classes which are remapped to ignore index.", "\n", "# This option is used for comparing with other works that consider only a subset of the pascal classes.", "\n", "self", ".", "ignore_classes", "=", "[", "self", ".", "VOC_CATEGORY_NAMES", ".", "index", "(", "class_name", ")", "for", "class_name", "in", "ignore_classes", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.dataloaders.pascal_voc.VOC12.__getitem__": [[87, 108], ["pascal_voc.VOC12._load_img", "pascal_voc.VOC12._load_semseg", "cv2.resize", "pascal_voc.VOC12.transform", "os.path.basename().split", "os.path.basename"], "methods", ["home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.dataloaders.pascal_voc.VOCSegmentation._load_img", "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.dataloaders.pascal_voc.VOC12._load_semseg"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "sample", "=", "{", "}", "\n", "\n", "# Load image", "\n", "_img", "=", "self", ".", "_load_img", "(", "index", ")", "\n", "sample", "[", "'image'", "]", "=", "_img", "\n", "\n", "# Load pixel-level annotations", "\n", "_semseg", "=", "self", ".", "_load_semseg", "(", "index", ")", "\n", "if", "_semseg", ".", "shape", "!=", "_img", ".", "shape", "[", ":", "2", "]", ":", "\n", "            ", "_semseg", "=", "cv2", ".", "resize", "(", "_semseg", ",", "_img", ".", "shape", "[", ":", "2", "]", "[", ":", ":", "-", "1", "]", ",", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "", "sample", "[", "'semseg'", "]", "=", "_semseg", "\n", "\n", "sample", "[", "'meta'", "]", "=", "{", "'im_size'", ":", "(", "_img", ".", "shape", "[", "0", "]", ",", "_img", ".", "shape", "[", "1", "]", ")", ",", "\n", "'image_file'", ":", "self", ".", "images", "[", "index", "]", ",", "\n", "'image'", ":", "os", ".", "path", ".", "basename", "(", "self", ".", "semsegs", "[", "index", "]", ")", ".", "split", "(", "'.'", ")", "[", "0", "]", "}", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "sample", "=", "self", ".", "transform", "(", "sample", ")", "\n", "\n", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.dataloaders.pascal_voc.VOC12.__len__": [[109, 111], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "images", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.dataloaders.pascal_voc.VOC12._load_img": [[112, 115], ["numpy.array", "PIL.Image.open().convert", "PIL.Image.open"], "methods", ["None"], ["", "def", "_load_img", "(", "self", ",", "index", ")", ":", "\n", "        ", "_img", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "self", ".", "images", "[", "index", "]", ")", ".", "convert", "(", "'RGB'", ")", ")", "\n", "return", "_img", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.dataloaders.pascal_voc.VOC12._load_semseg": [[116, 122], ["numpy.array", "PIL.Image.open"], "methods", ["None"], ["", "def", "_load_semseg", "(", "self", ",", "index", ")", ":", "\n", "        ", "_semseg", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "self", ".", "semsegs", "[", "index", "]", ")", ")", "\n", "\n", "for", "ignore_class", "in", "self", ".", "ignore_classes", ":", "\n", "            ", "_semseg", "[", "_semseg", "==", "ignore_class", "]", "=", "255", "\n", "", "return", "_semseg", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.dataloaders.pascal_voc.VOC12.get_img_size": [[123, 126], ["PIL.Image.open", "list", "os.path.join", "reversed"], "methods", ["None"], ["", "def", "get_img_size", "(", "self", ",", "idx", "=", "0", ")", ":", "\n", "        ", "img", "=", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'JPEGImages'", ",", "self", ".", "images", "[", "idx", "]", "+", "'.jpg'", ")", ")", "\n", "return", "list", "(", "reversed", "(", "img", ".", "size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.dataloaders.pascal_voc.VOC12.__str__": [[127, 129], ["str"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "'VOC12(split='", "+", "str", "(", "self", ".", "split", ")", "+", "')'", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.dataloaders.pascal_voc.VOC12.get_class_names": [[130, 132], ["None"], "methods", ["None"], ["", "def", "get_class_names", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "VOC_CATEGORY_NAMES", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.dataloaders.pascal_voc.VOC12._download": [[133, 153], ["os.path.join", "os.path.isfile", "os.getcwd", "print", "tarfile.open", "os.chdir", "tarfile.open.extractall", "tarfile.open.close", "os.chdir", "print", "torch.util.mypath.Path.db_root_dir", "print", "print", "utils.utils.mkdir_if_missing", "torch.util.google_drive.download_file_from_google_drive", "torch.util.mypath.Path.db_root_dir", "os.path.dirname"], "methods", ["home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.logger.Logger.close", "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.util.mypath.Path.db_root_dir", "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.utils.mkdir_if_missing", "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.util.google_drive.download_file_from_google_drive", "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.util.mypath.Path.db_root_dir"], ["", "def", "_download", "(", "self", ")", ":", "\n", "        ", "_fpath", "=", "os", ".", "path", ".", "join", "(", "Path", ".", "db_root_dir", "(", ")", ",", "self", ".", "FILE", ")", "\n", "\n", "if", "os", ".", "path", ".", "isfile", "(", "_fpath", ")", ":", "\n", "            ", "print", "(", "'Files already downloaded'", ")", "\n", "return", "\n", "", "else", ":", "\n", "            ", "print", "(", "'Downloading dataset from google drive'", ")", "\n", "mkdir_if_missing", "(", "os", ".", "path", ".", "dirname", "(", "_fpath", ")", ")", "\n", "download_file_from_google_drive", "(", "self", ".", "GOOGLE_DRIVE_ID", ",", "_fpath", ")", "\n", "\n", "# extract file", "\n", "", "cwd", "=", "os", ".", "getcwd", "(", ")", "\n", "print", "(", "'\\nExtracting tar file'", ")", "\n", "tar", "=", "tarfile", ".", "open", "(", "_fpath", ")", "\n", "os", ".", "chdir", "(", "Path", ".", "db_root_dir", "(", ")", ")", "\n", "tar", ".", "extractall", "(", ")", "\n", "tar", ".", "close", "(", ")", "\n", "os", ".", "chdir", "(", "cwd", ")", "\n", "print", "(", "'Done!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.dataloaders.transforms.RandomResizedCrop.__init__": [[14, 18], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.moco.builder.ContrastiveModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "scale", "=", "(", "0.08", ",", "1.0", ")", ",", "ratio", "=", "(", "3.", "/", "4.", ",", "4.", "/", "3.", ")", ")", ":", "\n", "        ", "super", "(", "RandomResizedCrop", ",", "self", ")", ".", "__init__", "(", "size", ",", "scale", "=", "scale", ",", "ratio", "=", "ratio", ")", "\n", "self", ".", "interpolation_img", "=", "Image", ".", "BILINEAR", "\n", "self", ".", "interpolation_sal", "=", "Image", ".", "NEAREST", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.dataloaders.transforms.RandomResizedCrop.__call__": [[19, 27], ["transforms.RandomResizedCrop.get_params", "torchvision.resized_crop", "torchvision.resized_crop", "torchvision.resized_crop", "torchvision.resized_crop"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "img", "=", "sample", "[", "'image'", "]", "\n", "sal", "=", "sample", "[", "'sal'", "]", "\n", "\n", "i", ",", "j", ",", "h", ",", "w", "=", "self", ".", "get_params", "(", "img", ",", "self", ".", "scale", ",", "self", ".", "ratio", ")", "\n", "sample", "[", "'image'", "]", "=", "F", ".", "resized_crop", "(", "img", ",", "i", ",", "j", ",", "h", ",", "w", ",", "self", ".", "size", ",", "self", ".", "interpolation_img", ")", "\n", "sample", "[", "'sal'", "]", "=", "F", ".", "resized_crop", "(", "sal", ",", "i", ",", "j", ",", "h", ",", "w", ",", "self", ".", "size", ",", "self", ".", "interpolation_sal", ")", "\n", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.dataloaders.transforms.Resize.__init__": [[30, 40], ["isinstance", "torchvision.transforms.Resize", "torchvision.transforms.Resize", "torchvision.transforms.Resize", "torchvision.transforms.Resize", "torchvision.transforms.Resize", "torchvision.transforms.Resize", "torchvision.transforms.Resize", "torchvision.transforms.Resize", "isinstance", "ValueError", "type"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "if", "isinstance", "(", "size", ",", "int", ")", ":", "\n", "            ", "self", ".", "size", "=", "(", "size", ",", "size", ")", "\n", "", "elif", "isinstance", "(", "size", ",", "tuple", ")", ":", "\n", "            ", "self", ".", "size", "=", "size", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Invalid type size {}'", ".", "format", "(", "type", "(", "size", ")", ")", ")", "\n", "\n", "", "self", ".", "resize_img", "=", "torchvision", ".", "transforms", ".", "Resize", "(", "self", ".", "size", ",", "interpolation", "=", "Image", ".", "BILINEAR", ")", "\n", "self", ".", "resize_sal", "=", "torchvision", ".", "transforms", ".", "Resize", "(", "self", ".", "size", ",", "interpolation", "=", "Image", ".", "NEAREST", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.dataloaders.transforms.Resize.__call__": [[41, 45], ["transforms.Resize.resize_img", "transforms.Resize.resize_sal"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "sample", "[", "'image'", "]", "=", "self", ".", "resize_img", "(", "sample", "[", "'image'", "]", ")", "\n", "sample", "[", "'sal'", "]", "=", "self", ".", "resize_sal", "(", "sample", "[", "'sal'", "]", ")", "\n", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.dataloaders.transforms.ColorJitter.__init__": [[48, 50], ["torchvision.transforms.ColorJitter", "torchvision.transforms.ColorJitter", "torchvision.transforms.ColorJitter", "torchvision.transforms.ColorJitter"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "jitter", ")", ":", "\n", "        ", "self", ".", "jitter", "=", "torchvision", ".", "transforms", ".", "ColorJitter", "(", "jitter", "[", "0", "]", ",", "jitter", "[", "1", "]", ",", "jitter", "[", "2", "]", ",", "jitter", "[", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.dataloaders.transforms.ColorJitter.__call__": [[51, 54], ["transforms.ColorJitter.jitter"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "sample", "[", "'image'", "]", "=", "self", ".", "jitter", "(", "sample", "[", "'image'", "]", ")", "\n", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.dataloaders.transforms.ColorJitter.__str__": [[55, 57], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "'ColorJitter'", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.dataloaders.transforms.RandomHorizontalFlip.__call__": [[60, 67], ["numpy.random", "numpy.random", "sample[].transpose", "sample[].transpose"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "            ", "sample", "[", "'image'", "]", "=", "sample", "[", "'image'", "]", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "sample", "[", "'sal'", "]", "=", "sample", "[", "'sal'", "]", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "\n", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.dataloaders.transforms.RandomHorizontalFlip.__str__": [[68, 70], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "'RandomHorizontalFlip'", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.dataloaders.transforms.RandomGrayscale.__init__": [[73, 75], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "p", "=", "0.2", ")", ":", "\n", "        ", "self", ".", "p", "=", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.dataloaders.transforms.RandomGrayscale.__call__": [[76, 82], ["numpy.random", "numpy.random", "torchvision.to_grayscale", "torchvision.to_grayscale"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "img", "=", "sample", "[", "'image'", "]", "\n", "num_output_channels", "=", "1", "if", "img", ".", "mode", "==", "'L'", "else", "3", "\n", "if", "random", ".", "random", "(", ")", "<", "self", ".", "p", ":", "\n", "            ", "sample", "[", "'image'", "]", "=", "F", ".", "to_grayscale", "(", "img", ",", "num_output_channels", "=", "num_output_channels", ")", "\n", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.dataloaders.transforms.RandomGrayscale.__str__": [[83, 85], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "'RandomGrayscale'", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.dataloaders.transforms.ToTensor.__init__": [[87, 89], ["torchvision.transforms.ToTensor", "torchvision.transforms.ToTensor", "torchvision.transforms.ToTensor", "torchvision.transforms.ToTensor"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "to_tensor", "=", "torchvision", ".", "transforms", ".", "ToTensor", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.dataloaders.transforms.ToTensor.__call__": [[90, 99], ["transforms.ToTensor.to_tensor", "transforms.ToTensor.to_tensor().squeeze().long", "len", "transforms.ToTensor.to_tensor().squeeze", "transforms.ToTensor.to_tensor"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "sample", "[", "'image'", "]", "=", "self", ".", "to_tensor", "(", "sample", "[", "'image'", "]", ")", "\n", "sal_", "=", "self", ".", "to_tensor", "(", "sample", "[", "'sal'", "]", ")", ".", "squeeze", "(", ")", ".", "long", "(", ")", "\n", "if", "len", "(", "sal_", ".", "shape", ")", "==", "3", ":", "\n", "            ", "sample", "[", "'sal'", "]", "=", "sal_", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "sample", "[", "'sal'", "]", "=", "sal_", "\n", "\n", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.dataloaders.transforms.ToTensor.__str__": [[100, 102], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "'ToTensor'", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.dataloaders.transforms.Normalize.__init__": [[105, 107], ["torchvision.transforms.Normalize", "torchvision.transforms.Normalize", "torchvision.transforms.Normalize", "torchvision.transforms.Normalize"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "mean", ",", "std", ")", ":", "\n", "        ", "self", ".", "normalize", "=", "torchvision", ".", "transforms", ".", "Normalize", "(", "mean", "=", "mean", ",", "std", "=", "std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.dataloaders.transforms.Normalize.__call__": [[108, 111], ["transforms.Normalize.normalize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "sample", "[", "'image'", "]", "=", "self", ".", "normalize", "(", "sample", "[", "'image'", "]", ")", "\n", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.dataloaders.transforms.Normalize.__str__": [[112, 114], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "'Normalize'", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.dataloaders.dataset.Dataset.__init__": [[14, 28], ["torch.Dataset.__init__", "isinstance"], "methods", ["home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.moco.builder.ContrastiveModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "base_dataset", ",", "train_transform", ",", "downsample_sal", "=", "False", ",", "\n", "scale_factor_sal", "=", "0.125", ",", "min_area", "=", "0.01", ",", "max_area", "=", "0.99", ")", ":", "\n", "        ", "super", "(", "Dataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "base_dataset", "=", "base_dataset", "\n", "self", ".", "train_transform", "=", "train_transform", "\n", "self", ".", "downsample_sal", "=", "downsample_sal", "\n", "\n", "if", "isinstance", "(", "scale_factor_sal", ",", "float", ")", ":", "\n", "            ", "self", ".", "scale_factor_sal", "=", "(", "scale_factor_sal", ",", "scale_factor_sal", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "scale_factor_sal", "=", "scale_factor_sal", "\n", "\n", "", "self", ".", "min_area", "=", "min_area", "\n", "self", ".", "max_area", "=", "max_area", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.dataloaders.dataset.Dataset.__len__": [[29, 31], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "base_dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.dataloaders.dataset.Dataset.__getitem__": [[32, 58], ["dataset.Dataset.base_dataset.__getitem__", "dataset.Dataset.train_transform", "dataset.Dataset.base_dataset.__getitem__", "copy.deepcopy", "torch.nn.functional.interpolate().squeeze().long", "sample[].float().sum", "sample[].numel", "random.randint", "torch.nn.functional.interpolate().squeeze", "sample[].float", "dataset.Dataset.__len__", "torch.nn.functional.interpolate", "[].float"], "methods", ["home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.dataloaders.pascal_voc.VOCSegmentation.__getitem__", "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.dataloaders.pascal_voc.VOCSegmentation.__getitem__", "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.dataloaders.pascal_voc.VOCSegmentation.__len__"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "sample_", "=", "self", ".", "base_dataset", ".", "__getitem__", "(", "index", ")", "\n", "count", "=", "0", "\n", "\n", "while", "True", ":", "\n", "            ", "if", "count", ">", "1", ":", "# Warning", "\n", "#warnings.warn('Need to re-apply transform for image {}'.format(sample['meta']['image']))", "\n", "                ", "pass", "\n", "\n", "", "if", "count", ">", "2", ":", "# Failed to load image two times in a row. Try a different one.", "\n", "#warnings.warn('Try loading a different image. Failed to load {}'.format(sample['meta']['image']))", "\n", "                ", "sample_", "=", "self", ".", "base_dataset", ".", "__getitem__", "(", "random", ".", "randint", "(", "0", ",", "self", ".", "__len__", "(", ")", "-", "1", ")", ")", "\n", "count", "=", "100", "\n", "\n", "", "sample", "=", "self", ".", "train_transform", "(", "deepcopy", "(", "sample_", ")", ")", "\n", "\n", "if", "self", ".", "downsample_sal", ":", "# Downsample", "\n", "                ", "sample", "[", "'sal'", "]", "=", "interpolate", "(", "sample", "[", "'sal'", "]", "[", "None", ",", "None", ",", ":", ",", ":", "]", ".", "float", "(", ")", ",", "\n", "scale_factor", "=", "self", ".", "scale_factor_sal", ",", "mode", "=", "'nearest'", ")", ".", "squeeze", "(", ")", ".", "long", "(", ")", "\n", "", "area", "=", "sample", "[", "'sal'", "]", ".", "float", "(", ")", ".", "sum", "(", ")", "/", "sample", "[", "'sal'", "]", ".", "numel", "(", ")", "\n", "\n", "if", "area", "<", "self", ".", "max_area", "and", "area", ">", "self", ".", "min_area", ":", "# Ok. Foreground/Background has proper ratio.", "\n", "                ", "return", "sample", "\n", "\n", "", "else", ":", "\n", "                ", "count", "+=", "1", "# Try again. Areas of foreground/background to small.", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.dataloaders.dataset.DatasetKeyQuery.__init__": [[61, 75], ["torch.Dataset.__init__", "isinstance"], "methods", ["home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.moco.builder.ContrastiveModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "base_dataset", ",", "transform", ",", "downsample_sal", "=", "False", ",", "\n", "scale_factor_sal", "=", "0.125", ",", "min_area", "=", "0.01", ",", "max_area", "=", "0.99", ")", ":", "\n", "        ", "super", "(", "DatasetKeyQuery", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "base_dataset", "=", "base_dataset", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "downsample_sal", "=", "downsample_sal", "\n", "\n", "if", "isinstance", "(", "scale_factor_sal", ",", "float", ")", ":", "\n", "            ", "self", ".", "scale_factor_sal", "=", "(", "scale_factor_sal", ",", "scale_factor_sal", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "scale_factor_sal", "=", "scale_factor_sal", "\n", "\n", "", "self", ".", "min_area", "=", "min_area", "\n", "self", ".", "max_area", "=", "max_area", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.dataloaders.dataset.DatasetKeyQuery.__len__": [[76, 78], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "base_dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.dataloaders.dataset.DatasetKeyQuery.__getitem__": [[79, 109], ["dataset.DatasetKeyQuery.base_dataset.__getitem__", "dataset.DatasetKeyQuery.transform", "dataset.DatasetKeyQuery.transform", "dataset.DatasetKeyQuery.base_dataset.__getitem__", "copy.deepcopy", "copy.deepcopy", "torch.nn.functional.interpolate().squeeze().long", "torch.nn.functional.interpolate().squeeze().long", "key_sample[].float().sum", "key_sample[].numel", "query_sample[].float().sum", "query_sample[].numel", "random.randint", "torch.nn.functional.interpolate().squeeze", "torch.nn.functional.interpolate().squeeze", "key_sample[].float", "query_sample[].float", "dataset.DatasetKeyQuery.__len__", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "[].float", "[].float"], "methods", ["home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.dataloaders.pascal_voc.VOCSegmentation.__getitem__", "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.dataloaders.pascal_voc.VOCSegmentation.__getitem__", "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.dataloaders.pascal_voc.VOCSegmentation.__len__"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "sample_", "=", "self", ".", "base_dataset", ".", "__getitem__", "(", "index", ")", "\n", "count", "=", "0", "\n", "\n", "while", "True", ":", "\n", "            ", "if", "count", ">", "1", ":", "# Warning", "\n", "#warnings.warn('Need to re-apply transform for image {}'.format(sample['meta']['image']))", "\n", "                ", "pass", "\n", "\n", "", "if", "count", ">", "2", ":", "# Failed to load image two times in a row. Try a different one.", "\n", "#warnings.warn('Try loading a different image. Failed to load {}'.format(sample['meta']['image']))", "\n", "                ", "sample_", "=", "self", ".", "base_dataset", ".", "__getitem__", "(", "random", ".", "randint", "(", "0", ",", "self", ".", "__len__", "(", ")", "-", "1", ")", ")", "\n", "count", "=", "100", "\n", "\n", "", "key_sample", "=", "self", ".", "transform", "(", "deepcopy", "(", "sample_", ")", ")", "\n", "query_sample", "=", "self", ".", "transform", "(", "deepcopy", "(", "sample_", ")", ")", "\n", "\n", "if", "self", ".", "downsample_sal", ":", "# Downsample", "\n", "                ", "key_sample", "[", "'sal'", "]", "=", "interpolate", "(", "key_sample", "[", "'sal'", "]", "[", "None", ",", "None", ",", ":", ",", ":", "]", ".", "float", "(", ")", ",", "\n", "scale_factor", "=", "self", ".", "scale_factor_sal", ",", "mode", "=", "'nearest'", ")", ".", "squeeze", "(", ")", ".", "long", "(", ")", "\n", "query_sample", "[", "'sal'", "]", "=", "interpolate", "(", "query_sample", "[", "'sal'", "]", "[", "None", ",", "None", ",", ":", ",", ":", "]", ".", "float", "(", ")", ",", "\n", "scale_factor", "=", "self", ".", "scale_factor_sal", ",", "mode", "=", "'nearest'", ")", ".", "squeeze", "(", ")", ".", "long", "(", ")", "\n", "", "key_area", "=", "key_sample", "[", "'sal'", "]", ".", "float", "(", ")", ".", "sum", "(", ")", "/", "key_sample", "[", "'sal'", "]", ".", "numel", "(", ")", "\n", "query_area", "=", "query_sample", "[", "'sal'", "]", ".", "float", "(", ")", ".", "sum", "(", ")", "/", "query_sample", "[", "'sal'", "]", ".", "numel", "(", ")", "\n", "\n", "if", "key_area", "<", "self", ".", "max_area", "and", "key_area", ">", "self", ".", "min_area", "and", "query_area", "<", "self", ".", "max_area", "and", "query_area", ">", "self", ".", "min_area", ":", "# Ok. Foreground/Background has proper ratio.", "\n", "                ", "return", "{", "'key'", ":", "key_sample", ",", "'query'", ":", "query_sample", "}", "\n", "\n", "", "else", ":", "\n", "                ", "count", "+=", "1", "# Try again. Areas of foreground/background to small.", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.dataloaders.pascal_voc.VOCSegmentation.__init__": [[26, 65], ["torch.util.mypath.Path.db_root_dir", "torch.Dataset.__init__", "os.path.join", "os.path.join", "print", "pascal_voc.VOCSegmentation._download", "open", "f.read().splitlines", "os.path.join", "os.path.join", "len", "len", "os.path.join", "os.path.isfile", "os.path.isfile", "pascal_voc.VOCSegmentation.images.append", "pascal_voc.VOCSegmentation.sal.append", "len", "f.read"], "methods", ["home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.util.mypath.Path.db_root_dir", "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.moco.builder.ContrastiveModel.__init__", "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.dataloaders.pascal_voc.VOCSegmentation._download"], ["\n", "FILE", "=", "'PASCAL_VOC.tgz'", "\n", "\n", "VOC_CATEGORY_NAMES", "=", "[", "'background'", ",", "\n", "'aeroplane'", ",", "'bicycle'", ",", "'bird'", ",", "'boat'", ",", "'bottle'", ",", "\n", "'bus'", ",", "'car'", ",", "'cat'", ",", "'chair'", ",", "'cow'", ",", "\n", "'diningtable'", ",", "'dog'", ",", "'horse'", ",", "'motorbike'", ",", "'person'", ",", "\n", "'pottedplant'", ",", "'sheep'", ",", "'sofa'", ",", "'train'", ",", "'tvmonitor'", "]", "\n", "\n", "def", "__init__", "(", "self", ",", "root", "=", "Path", ".", "db_root_dir", "(", "'VOCSegmentation'", ")", ",", "\n", "split", "=", "'val'", ",", "transform", "=", "None", ",", "download", "=", "True", ",", "ignore_classes", "=", "[", "]", ")", ":", "\n", "# Set paths", "\n", "        ", "self", ".", "root", "=", "root", "\n", "valid_splits", "=", "[", "'trainaug'", ",", "'train'", ",", "'val'", "]", "\n", "assert", "(", "split", "in", "valid_splits", ")", "\n", "self", ".", "split", "=", "split", "\n", "\n", "if", "split", "==", "'trainaug'", ":", "\n", "            ", "_semseg_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'SegmentationClassAug'", ")", "\n", "", "else", ":", "\n", "            ", "_semseg_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'SegmentationClass'", ")", "\n", "\n", "", "_image_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'images'", ")", "\n", "\n", "\n", "# Download", "\n", "if", "download", ":", "\n", "            ", "self", ".", "_download", "(", ")", "\n", "\n", "# Transform", "\n", "", "self", ".", "transform", "=", "transform", "\n", "\n", "# Splits are pre-cut", "\n", "print", "(", "\"Initializing dataloader for PASCAL VOC12 {} set\"", ".", "format", "(", "''", ".", "join", "(", "self", ".", "split", ")", ")", ")", "\n", "split_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'sets'", ",", "self", ".", "split", "+", "'.txt'", ")", "\n", "self", ".", "images", "=", "[", "]", "\n", "self", ".", "semsegs", "=", "[", "]", "\n", "\n", "with", "open", "(", "split_file", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "lines", "=", "f", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.dataloaders.pascal_voc.VOCSegmentation.__getitem__": [[66, 78], ["pascal_voc.VOCSegmentation._load_img", "pascal_voc.VOCSegmentation._load_sal", "pascal_voc.VOCSegmentation.transform", "str"], "methods", ["home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.dataloaders.pascal_voc.VOCSegmentation._load_img", "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.dataloaders.pascal_voc.VOCSegmentation._load_sal"], ["\n", "", "for", "ii", ",", "line", "in", "enumerate", "(", "lines", ")", ":", "\n", "# Images", "\n", "            ", "_image", "=", "os", ".", "path", ".", "join", "(", "_image_dir", ",", "line", "+", "\".jpg\"", ")", "\n", "assert", "os", ".", "path", ".", "isfile", "(", "_image", ")", "\n", "self", ".", "images", ".", "append", "(", "_image", ")", "\n", "\n", "# Semantic Segmentation", "\n", "_semseg", "=", "os", ".", "path", ".", "join", "(", "_semseg_dir", ",", "line", "+", "'.png'", ")", "\n", "assert", "os", ".", "path", ".", "isfile", "(", "_semseg", ")", "\n", "self", ".", "semsegs", ".", "append", "(", "_semseg", ")", "\n", "\n", "", "assert", "(", "len", "(", "self", ".", "images", ")", "==", "len", "(", "self", ".", "semsegs", ")", ")", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.dataloaders.pascal_voc.VOCSegmentation.__len__": [[79, 81], ["len"], "methods", ["None"], ["\n", "# Display stats", "\n", "print", "(", "'Number of dataset images: {:d}'", ".", "format", "(", "len", "(", "self", ".", "images", ")", ")", ")", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.dataloaders.pascal_voc.VOCSegmentation._load_img": [[82, 85], ["PIL.Image.open().convert", "PIL.Image.open"], "methods", ["None"], ["\n", "# List of classes which are remapped to ignore index.", "\n", "# This option is used for comparing with other works that consider only a subset of the pascal classes.", "\n", "self", ".", "ignore_classes", "=", "[", "self", ".", "VOC_CATEGORY_NAMES", ".", "index", "(", "class_name", ")", "for", "class_name", "in", "ignore_classes", "]", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.dataloaders.pascal_voc.VOCSegmentation._load_sal": [[86, 89], ["PIL.Image.open"], "methods", ["None"], ["\n", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "sample", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.dataloaders.pascal_voc.VOCSegmentation.__str__": [[90, 92], ["None"], "methods", ["None"], ["# Load image", "\n", "_img", "=", "self", ".", "_load_img", "(", "index", ")", "\n", "sample", "[", "'image'", "]", "=", "_img", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.dataloaders.pascal_voc.VOCSegmentation.get_class_names": [[93, 96], ["None"], "methods", ["None"], ["\n", "# Load pixel-level annotations", "\n", "_semseg", "=", "self", ".", "_load_semseg", "(", "index", ")", "\n", "if", "_semseg", ".", "shape", "!=", "_img", ".", "shape", "[", ":", "2", "]", ":", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.dataloaders.pascal_voc.VOCSegmentation._download": [[97, 117], ["os.path.join", "os.path.isfile", "os.getcwd", "print", "tarfile.open", "os.chdir", "tarfile.open.extractall", "tarfile.open.close", "os.chdir", "print", "torch.util.mypath.Path.db_root_dir", "print", "print", "utils.utils.mkdir_if_missing", "torch.util.google_drive.download_file_from_google_drive", "torch.util.mypath.Path.db_root_dir", "os.path.dirname"], "methods", ["home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.logger.Logger.close", "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.util.mypath.Path.db_root_dir", "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.utils.mkdir_if_missing", "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.util.google_drive.download_file_from_google_drive", "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.util.mypath.Path.db_root_dir"], ["            ", "_semseg", "=", "cv2", ".", "resize", "(", "_semseg", ",", "_img", ".", "shape", "[", ":", "2", "]", "[", ":", ":", "-", "1", "]", ",", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "", "sample", "[", "'semseg'", "]", "=", "_semseg", "\n", "\n", "sample", "[", "'meta'", "]", "=", "{", "'im_size'", ":", "(", "_img", ".", "shape", "[", "0", "]", ",", "_img", ".", "shape", "[", "1", "]", ")", ",", "\n", "'image_file'", ":", "self", ".", "images", "[", "index", "]", ",", "\n", "'image'", ":", "os", ".", "path", ".", "basename", "(", "self", ".", "semsegs", "[", "index", "]", ")", ".", "split", "(", "'.'", ")", "[", "0", "]", "}", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "sample", "=", "self", ".", "transform", "(", "sample", ")", "\n", "\n", "", "return", "sample", "\n", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "images", ")", "\n", "\n", "", "def", "_load_img", "(", "self", ",", "index", ")", ":", "\n", "        ", "_img", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "self", ".", "images", "[", "index", "]", ")", ".", "convert", "(", "'RGB'", ")", ")", "\n", "return", "_img", "\n", "\n", "", "def", "_load_semseg", "(", "self", ",", "index", ")", ":", "\n", "        ", "_semseg", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "self", ".", "semsegs", "[", "index", "]", ")", ")", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.pretrain.main.main": [[53, 66], ["parser.parse_args", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.spawn"], "function", ["None"], ["def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "args", ".", "multiprocessing_distributed", "=", "True", "\n", "assert", "args", ".", "multiprocessing_distributed", "\n", "args", ".", "distributed", "=", "args", ".", "world_size", ">", "1", "or", "args", ".", "multiprocessing_distributed", "\n", "ngpus_per_node", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "\n", "# Since we have ngpus_per_node processes per node, the total world_size", "\n", "# needs to be adjusted accordingly", "\n", "args", ".", "world_size", "=", "ngpus_per_node", "*", "args", ".", "world_size", "\n", "# Use torch.multiprocessing.spawn to launch distributed processes: the", "\n", "# main_worker process function", "\n", "mp", ".", "spawn", "(", "main_worker", ",", "nprocs", "=", "ngpus_per_node", ",", "args", "=", "(", "ngpus_per_node", ",", "args", ")", ")", "\n", "# main_worker(0, ngpus_per_node, args=args)", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.pretrain.main.main_worker": [[69, 184], ["utils.config.create_config", "torch.init_process_group", "print", "print", "print", "modules.moco.builder.ContrastiveModel", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "model.cuda.cuda", "print", "utils.common_config.get_optimizer", "print", "int", "int", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "print", "print", "utils.common_config.get_train_transformations", "print", "data.dataloaders.dataset.DatasetKeyQuery", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "print", "os.path.exists", "print", "range", "utils.logger.Logger", "int", "termcolor.colored", "termcolor.colored", "termcolor.colored", "model.cuda.parameters", "print", "amp.initialize", "termcolor.colored", "termcolor.colored", "utils.common_config.get_train_dataset", "termcolor.colored", "termcolor.colored", "print", "torch.load", "torch.load", "torch.load", "torch.load", "utils.common_config.get_optimizer.load_state_dict", "model.cuda.load_state_dict", "print", "model.cuda.cuda", "termcolor.colored", "print", "print", "utils.common_config.adjust_learning_rate", "print", "print", "utils.train_utils.train", "os.path.join", "os.path.abspath", "termcolor.colored", "termcolor.colored", "amp.load_state_dict", "termcolor.colored", "termcolor.colored", "termcolor.colored", "print", "len", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "utils.common_config.get_optimizer.state_dict", "model.cuda.state_dict", "amp.state_dict", "utils.common_config.get_optimizer.state_dict", "model.cuda.state_dict"], "function", ["home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.config.create_config", "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.common_config.get_optimizer", "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.common_config.get_train_transformations", "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.common_config.get_train_dataset", "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.common_config.adjust_learning_rate", "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.train_utils.train"], ["", "def", "main_worker", "(", "gpu", ",", "ngpus_per_node", ",", "args", ")", ":", "\n", "# Retrieve config file", "\n", "    ", "p", "=", "create_config", "(", "args", ".", "config_env", ",", "args", ".", "config_exp", ")", "\n", "\n", "# Check gpu id", "\n", "args", ".", "gpu", "=", "gpu", "\n", "p", "[", "'gpu'", "]", "=", "gpu", "\n", "if", "args", ".", "gpu", "!=", "0", ":", "\n", "        ", "def", "print_pass", "(", "*", "args", ")", ":", "\n", "            ", "pass", "\n", "", "builtins", ".", "print", "=", "print_pass", "\n", "", "else", ":", "\n", "        ", "sys", ".", "stdout", "=", "Logger", "(", "os", ".", "path", ".", "join", "(", "p", "[", "'output_dir'", "]", ",", "'log_file.txt'", ")", ")", "\n", "\n", "", "if", "args", ".", "dist_url", "==", "\"env://\"", "and", "args", ".", "rank", "==", "-", "1", ":", "\n", "        ", "args", ".", "rank", "=", "int", "(", "os", ".", "environ", "[", "\"RANK\"", "]", ")", "\n", "\n", "# For multiprocessing distributed training, rank needs to be the", "\n", "# global rank among all the processes", "\n", "", "args", ".", "rank", "=", "args", ".", "rank", "*", "ngpus_per_node", "+", "gpu", "\n", "dist", ".", "init_process_group", "(", "backend", "=", "args", ".", "dist_backend", ",", "init_method", "=", "args", ".", "dist_url", ",", "\n", "world_size", "=", "args", ".", "world_size", ",", "rank", "=", "args", ".", "rank", ")", "\n", "\n", "print", "(", "'Python script is {}'", ".", "format", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", ")", "\n", "print", "(", "colored", "(", "p", ",", "'red'", ")", ")", "\n", "\n", "# Get model", "\n", "print", "(", "colored", "(", "'Retrieve model'", ",", "'blue'", ")", ")", "\n", "model", "=", "ContrastiveModel", "(", "p", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "model", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "\n", "# Optimizer", "\n", "print", "(", "colored", "(", "'Retrieve optimizer'", ",", "'blue'", ")", ")", "\n", "optimizer", "=", "get_optimizer", "(", "p", ",", "model", ".", "parameters", "(", ")", ")", "\n", "print", "(", "optimizer", ")", "\n", "\n", "# Nvidia-apex", "\n", "if", "args", ".", "nvidia_apex", ":", "\n", "        ", "print", "(", "colored", "(", "'Using mixed precision training'", ",", "'blue'", ")", ")", "\n", "from", "apex", "import", "amp", "\n", "model", ",", "optimizer", "=", "amp", ".", "initialize", "(", "model", ",", "optimizer", ",", "opt_level", "=", "\"O2\"", ",", "\n", "keep_batchnorm_fp32", "=", "True", ",", "loss_scale", "=", "\"dynamic\"", ")", "\n", "", "else", ":", "\n", "        ", "amp", "=", "None", "\n", "\n", "# When using a single GPU per process and per", "\n", "# DistributedDataParallel, we need to divide the batch size", "\n", "# ourselves based on the total number of GPUs we have", "\n", "", "p", "[", "'train_batch_size'", "]", "=", "int", "(", "p", "[", "'train_batch_size'", "]", "/", "ngpus_per_node", ")", "\n", "p", "[", "'num_workers'", "]", "=", "int", "(", "(", "p", "[", "'num_workers'", "]", "+", "ngpus_per_node", "-", "1", ")", "/", "ngpus_per_node", ")", "\n", "model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "model", ",", "device_ids", "=", "[", "args", ".", "gpu", "]", ",", "find_unused_parameters", "=", "True", ")", "\n", "\n", "# CUDNN", "\n", "print", "(", "colored", "(", "'Set CuDNN benchmark'", ",", "'blue'", ")", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "# Dataset", "\n", "print", "(", "colored", "(", "'Retrieve dataset'", ",", "'blue'", ")", ")", "\n", "\n", "# Transforms ", "\n", "train_transform", "=", "get_train_transformations", "(", ")", "\n", "print", "(", "train_transform", ")", "\n", "train_dataset", "=", "DatasetKeyQuery", "(", "get_train_dataset", "(", "p", ",", "transform", "=", "None", ")", ",", "train_transform", ",", "\n", "downsample_sal", "=", "not", "p", "[", "'model_kwargs'", "]", "[", "'upsample'", "]", ")", "\n", "train_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "train_dataset", ")", "\n", "train_dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "train_dataset", ",", "batch_size", "=", "p", "[", "'train_batch_size'", "]", ",", "shuffle", "=", "(", "train_sampler", "is", "None", ")", ",", "\n", "num_workers", "=", "p", "[", "'num_workers'", "]", ",", "pin_memory", "=", "True", ",", "sampler", "=", "train_sampler", ",", "drop_last", "=", "True", ",", "collate_fn", "=", "collate_custom", ")", "\n", "print", "(", "colored", "(", "'Train samples %d'", "%", "(", "len", "(", "train_dataset", ")", ")", ",", "'yellow'", ")", ")", "\n", "print", "(", "colored", "(", "train_dataset", ",", "'yellow'", ")", ")", "\n", "\n", "# Resume from checkpoint", "\n", "if", "os", ".", "path", ".", "exists", "(", "p", "[", "'checkpoint'", "]", ")", ":", "\n", "        ", "print", "(", "colored", "(", "'Restart from checkpoint {}'", ".", "format", "(", "p", "[", "'checkpoint'", "]", ")", ",", "'blue'", ")", ")", "\n", "loc", "=", "'cuda:{}'", ".", "format", "(", "args", ".", "gpu", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "p", "[", "'checkpoint'", "]", ",", "map_location", "=", "loc", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'model'", "]", ")", "\n", "if", "args", ".", "nvidia_apex", ":", "\n", "            ", "amp", ".", "load_state_dict", "(", "checkpoint", "[", "'amp'", "]", ")", "\n", "", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "\n", "", "else", ":", "\n", "        ", "print", "(", "colored", "(", "'No checkpoint file at {}'", ".", "format", "(", "p", "[", "'checkpoint'", "]", ")", ",", "'blue'", ")", ")", "\n", "start_epoch", "=", "0", "\n", "model", "=", "model", ".", "cuda", "(", ")", "\n", "\n", "# Main loop", "\n", "", "print", "(", "colored", "(", "'Starting main loop'", ",", "'blue'", ")", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "start_epoch", ",", "p", "[", "'epochs'", "]", ")", ":", "\n", "        ", "print", "(", "colored", "(", "'Epoch %d/%d'", "%", "(", "epoch", "+", "1", ",", "p", "[", "'epochs'", "]", ")", ",", "'yellow'", ")", ")", "\n", "print", "(", "colored", "(", "'-'", "*", "10", ",", "'yellow'", ")", ")", "\n", "\n", "# Adjust lr", "\n", "lr", "=", "adjust_learning_rate", "(", "p", ",", "optimizer", ",", "epoch", ")", "\n", "print", "(", "'Adjusted learning rate to {:.5f}'", ".", "format", "(", "lr", ")", ")", "\n", "\n", "# Train ", "\n", "print", "(", "'Train ...'", ")", "\n", "eval_train", "=", "train", "(", "p", ",", "train_dataloader", ",", "model", ",", "\n", "optimizer", ",", "epoch", ",", "amp", ")", "\n", "\n", "# Checkpoint", "\n", "if", "args", ".", "rank", "%", "ngpus_per_node", "==", "0", ":", "\n", "            ", "print", "(", "'Checkpoint ...'", ")", "\n", "if", "args", ".", "nvidia_apex", ":", "\n", "                ", "torch", ".", "save", "(", "{", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "'model'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'amp'", ":", "amp", ".", "state_dict", "(", ")", ",", "'epoch'", ":", "epoch", "+", "1", "}", ",", "\n", "p", "[", "'checkpoint'", "]", ")", "\n", "\n", "", "else", ":", "\n", "                ", "torch", ".", "save", "(", "{", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "'model'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'epoch'", ":", "epoch", "+", "1", "}", ",", "\n", "p", "[", "'checkpoint'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.modules.models.ContrastiveSegmentationModel.__init__": [[14, 33], ["torch.nn.Module.__init__", "torch.nn.Identity", "NotImplementedError", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.moco.builder.ContrastiveModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "backbone", ",", "decoder", ")", ":", "\n", "        ", "super", "(", "SimpleSegmentationModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "backbone", "=", "backbone", "\n", "self", ".", "decoder", "=", "decoder", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "input_shape", "=", "x", ".", "shape", "[", "-", "2", ":", "]", "\n", "x", "=", "self", ".", "backbone", "(", "x", ")", "\n", "x", "=", "self", ".", "decoder", "(", "x", ")", "\n", "x", "=", "F", ".", "interpolate", "(", "x", ",", "size", "=", "input_shape", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "return", "x", "\n", "\n", "", "", "class", "ContrastiveSegmentationModel", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "backbone", ",", "decoder", ",", "head", ",", "upsample", ",", "use_classification_head", "=", "False", ",", "freeze_batchnorm", "=", "'none'", ")", ":", "\n", "        ", "super", "(", "ContrastiveSegmentationModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "backbone", "=", "backbone", "\n", "self", ".", "upsample", "=", "upsample", "\n", "self", ".", "use_classification_head", "=", "use_classification_head", "\n", "\n", "if", "head", "==", "'linear'", ":", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.modules.models.ContrastiveSegmentationModel.forward": [[34, 56], ["models.ContrastiveSegmentationModel.backbone", "models.ContrastiveSegmentationModel.decoder", "models.ContrastiveSegmentationModel.head", "models.ContrastiveSegmentationModel.classification_head", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate.squeeze"], "methods", ["None"], ["# Head is linear.", "\n", "# We can just use regular decoder since final conv is 1 x 1.", "\n", "            ", "self", ".", "head", "=", "decoder", "[", "-", "1", "]", "\n", "decoder", "[", "-", "1", "]", "=", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "decoder", "=", "decoder", "\n", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'Head {} is currently not supported'", ".", "format", "(", "head", ")", ")", "\n", "\n", "\n", "", "if", "self", ".", "use_classification_head", ":", "# Add classification head for saliency prediction", "\n", "            ", "self", ".", "classification_head", "=", "nn", ".", "Conv2d", "(", "self", ".", "head", ".", "in_channels", ",", "1", ",", "1", ",", "bias", "=", "False", ")", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# Standard model", "\n", "        ", "input_shape", "=", "x", ".", "shape", "[", "-", "2", ":", "]", "\n", "x", "=", "self", ".", "backbone", "(", "x", ")", "\n", "embedding", "=", "self", ".", "decoder", "(", "x", ")", "\n", "\n", "# Head", "\n", "x", "=", "self", ".", "head", "(", "embedding", ")", "\n", "if", "self", ".", "use_classification_head", ":", "\n", "            ", "sal", "=", "self", ".", "classification_head", "(", "embedding", ")", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.modules.deeplab.DeepLabHead.__init__": [[10, 17], ["torch.Sequential.__init__", "deeplab.ASPP", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.moco.builder.ContrastiveModel.__init__"], ["        ", "super", "(", "DeepLabHead", ",", "self", ")", ".", "__init__", "(", "\n", "ASPP", "(", "in_channels", ",", "[", "12", ",", "24", ",", "36", "]", ")", ",", "\n", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "256", ",", "num_classes", ",", "1", ")", "\n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.modules.deeplab.ASPPConv.__init__": [[21, 28], ["torch.Sequential.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.moco.builder.ContrastiveModel.__init__"], ["        ", "modules", "=", "[", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "3", ",", "padding", "=", "dilation", ",", "dilation", "=", "dilation", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", "]", "\n", "super", "(", "ASPPConv", ",", "self", ")", ".", "__init__", "(", "*", "modules", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.modules.deeplab.ASPPPooling.__init__": [[31, 37], ["torch.Sequential.__init__", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.moco.builder.ContrastiveModel.__init__"], ["        ", "super", "(", "ASPPPooling", ",", "self", ")", ".", "__init__", "(", "\n", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.modules.deeplab.ASPPPooling.forward": [[38, 43], ["torch.interpolate", "torch.interpolate", "torch.interpolate", "mod"], "methods", ["None"], ["        ", "size", "=", "x", ".", "shape", "[", "-", "2", ":", "]", "\n", "for", "mod", "in", "self", ":", "\n", "            ", "x", "=", "mod", "(", "x", ")", "\n", "", "return", "F", ".", "interpolate", "(", "x", ",", "size", "=", "size", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.modules.deeplab.ASPP.__init__": [[46, 67], ["torch.Module.__init__", "modules.append", "tuple", "modules.append", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "modules.append", "deeplab.ASPPPooling", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "deeplab.ASPPConv"], "methods", ["home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.moco.builder.ContrastiveModel.__init__"], ["        ", "super", "(", "ASPP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "modules", "=", "[", "]", "\n", "modules", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", ")", "\n", "\n", "rates", "=", "tuple", "(", "atrous_rates", ")", "\n", "for", "rate", "in", "rates", ":", "\n", "            ", "modules", ".", "append", "(", "ASPPConv", "(", "in_channels", ",", "out_channels", ",", "rate", ")", ")", "\n", "\n", "", "modules", ".", "append", "(", "ASPPPooling", "(", "in_channels", ",", "out_channels", ")", ")", "\n", "\n", "self", ".", "convs", "=", "nn", ".", "ModuleList", "(", "modules", ")", "\n", "\n", "self", ".", "project", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "5", "*", "out_channels", ",", "out_channels", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "0.5", ")", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.modules.deeplab.ASPP.forward": [[68, 74], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "deeplab.ASPP.project", "torch.cat.append", "torch.cat.append", "torch.cat.append", "conv"], "methods", ["None"], ["        ", "res", "=", "[", "]", "\n", "for", "conv", "in", "self", ".", "convs", ":", "\n", "            ", "res", ".", "append", "(", "conv", "(", "x", ")", ")", "\n", "", "res", "=", "torch", ".", "cat", "(", "res", ",", "dim", "=", "1", ")", "\n", "return", "self", ".", "project", "(", "res", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.modules.resnet_dilated.ResnetDilated.__init__": [[9, 31], ["torch.Module.__init__", "orig_resnet.layer3.apply", "orig_resnet.layer4.apply", "partial", "partial", "orig_resnet.layer4.apply", "partial"], "methods", ["home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.moco.builder.ContrastiveModel.__init__"], ["        ", "super", "(", "ResnetDilated", ",", "self", ")", ".", "__init__", "(", ")", "\n", "from", "functools", "import", "partial", "\n", "\n", "if", "dilate_scale", "==", "8", ":", "\n", "            ", "orig_resnet", ".", "layer3", ".", "apply", "(", "\n", "partial", "(", "self", ".", "_nostride_dilate", ",", "dilate", "=", "2", ")", ")", "\n", "orig_resnet", ".", "layer4", ".", "apply", "(", "\n", "partial", "(", "self", ".", "_nostride_dilate", ",", "dilate", "=", "4", ")", ")", "\n", "", "elif", "dilate_scale", "==", "16", ":", "\n", "            ", "orig_resnet", ".", "layer4", ".", "apply", "(", "\n", "partial", "(", "self", ".", "_nostride_dilate", ",", "dilate", "=", "2", ")", ")", "\n", "\n", "", "self", ".", "conv1", "=", "orig_resnet", ".", "conv1", "\n", "self", ".", "bn1", "=", "orig_resnet", ".", "bn1", "\n", "self", ".", "relu", "=", "orig_resnet", ".", "relu", "\n", "\n", "self", ".", "maxpool", "=", "orig_resnet", ".", "maxpool", "\n", "self", ".", "layer1", "=", "orig_resnet", ".", "layer1", "\n", "self", ".", "layer2", "=", "orig_resnet", ".", "layer2", "\n", "self", ".", "layer3", "=", "orig_resnet", ".", "layer3", "\n", "self", ".", "layer4", "=", "orig_resnet", ".", "layer4", "\n", "\n", "", "def", "_nostride_dilate", "(", "self", ",", "m", ",", "dilate", ")", ":", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.modules.resnet_dilated.ResnetDilated._nostride_dilate": [[32, 46], ["classname.find"], "methods", ["None"], ["        ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "# the convolution with stride", "\n", "            ", "if", "m", ".", "stride", "==", "(", "2", ",", "2", ")", ":", "\n", "                ", "m", ".", "stride", "=", "(", "1", ",", "1", ")", "\n", "if", "m", ".", "kernel_size", "==", "(", "3", ",", "3", ")", ":", "\n", "                    ", "m", ".", "dilation", "=", "(", "dilate", "//", "2", ",", "dilate", "//", "2", ")", "\n", "m", ".", "padding", "=", "(", "dilate", "//", "2", ",", "dilate", "//", "2", ")", "\n", "# other convoluions", "\n", "", "", "else", ":", "\n", "                ", "if", "m", ".", "kernel_size", "==", "(", "3", ",", "3", ")", ":", "\n", "                    ", "m", ".", "dilation", "=", "(", "dilate", ",", "dilate", ")", "\n", "m", ".", "padding", "=", "(", "dilate", ",", "dilate", ")", "\n", "\n", "", "", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.modules.resnet_dilated.ResnetDilated.forward": [[47, 57], ["resnet_dilated.ResnetDilated.relu", "resnet_dilated.ResnetDilated.maxpool", "resnet_dilated.ResnetDilated.layer1", "resnet_dilated.ResnetDilated.layer2", "resnet_dilated.ResnetDilated.layer3", "resnet_dilated.ResnetDilated.layer4", "resnet_dilated.ResnetDilated.bn1", "resnet_dilated.ResnetDilated.conv1"], "methods", ["None"], ["        ", "x", "=", "self", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.modules.losses.BalancedCrossEntropyLoss.__init__": [[15, 20], ["torch.nn.modules.module.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.moco.builder.ContrastiveModel.__init__"], ["def", "__init__", "(", "self", ",", "size_average", "=", "True", ",", "batch_average", "=", "True", ",", "pos_weight", "=", "None", ")", ":", "\n", "        ", "super", "(", "BalancedCrossEntropyLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "size_average", "=", "size_average", "\n", "self", ".", "batch_average", "=", "batch_average", "\n", "self", ".", "pos_weight", "=", "pos_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.modules.losses.BalancedCrossEntropyLoss.forward": [[21, 58], ["torch.ge().float", "torch.ge().float", "torch.ge().float", "torch.ge().float", "torch.ge().float", "torch.ge().float", "torch.ge().float", "torch.ge().float", "torch.ge().float", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "output.size", "labels.size", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.le().float", "torch.le().float", "torch.le().float", "torch.le().float", "torch.le().float", "torch.le().float", "torch.le().float", "torch.le().float", "torch.le().float", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "float", "torch.ge", "torch.ge", "torch.ge", "torch.ge", "torch.ge", "torch.ge", "torch.ge", "torch.ge", "torch.ge", "torch.ge().float().sum", "torch.ge().float().sum", "torch.ge().float().sum", "torch.ge().float().sum", "torch.ge().float().sum", "torch.ge().float().sum", "torch.ge().float().sum", "torch.ge().float().sum", "torch.ge().float().sum", "numpy.prod", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.le", "torch.le", "torch.le", "torch.le", "torch.le", "torch.le", "torch.le", "torch.le", "torch.le", "labels.size", "labels.size", "torch.ge().float", "torch.ge().float", "torch.ge().float", "torch.ge().float", "torch.ge().float", "torch.ge().float", "torch.ge().float", "torch.ge().float", "torch.ge().float", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.ge", "torch.ge", "torch.ge", "torch.ge", "torch.ge", "torch.ge", "torch.ge", "torch.ge", "torch.ge"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "output", ",", "labels", ",", "void_pixels", "=", "None", ")", ":", "\n", "        ", "assert", "(", "output", ".", "size", "(", ")", "==", "labels", ".", "size", "(", ")", ")", "\n", "\n", "# Weighting of the loss, default is HED-style", "\n", "if", "self", ".", "pos_weight", "is", "None", ":", "\n", "            ", "num_labels_pos", "=", "torch", ".", "sum", "(", "labels", ")", "\n", "num_labels_neg", "=", "torch", ".", "sum", "(", "1.0", "-", "labels", ")", "\n", "num_total", "=", "num_labels_pos", "+", "num_labels_neg", "\n", "w", "=", "num_labels_neg", "/", "num_total", "\n", "", "else", ":", "\n", "            ", "w", "=", "self", ".", "pos_weight", "\n", "\n", "", "output_gt_zero", "=", "torch", ".", "ge", "(", "output", ",", "0", ")", ".", "float", "(", ")", "\n", "loss_val", "=", "torch", ".", "mul", "(", "output", ",", "(", "labels", "-", "output_gt_zero", ")", ")", "-", "torch", ".", "log", "(", "\n", "1", "+", "torch", ".", "exp", "(", "output", "-", "2", "*", "torch", ".", "mul", "(", "output", ",", "output_gt_zero", ")", ")", ")", "\n", "\n", "loss_pos_pix", "=", "-", "torch", ".", "mul", "(", "labels", ",", "loss_val", ")", "\n", "loss_neg_pix", "=", "-", "torch", ".", "mul", "(", "1.0", "-", "labels", ",", "loss_val", ")", "\n", "\n", "if", "void_pixels", "is", "not", "None", "and", "not", "self", ".", "pos_weight", ":", "\n", "            ", "w_void", "=", "torch", ".", "le", "(", "void_pixels", ",", "0.5", ")", ".", "float", "(", ")", "\n", "loss_pos_pix", "=", "torch", ".", "mul", "(", "w_void", ",", "loss_pos_pix", ")", "\n", "loss_neg_pix", "=", "torch", ".", "mul", "(", "w_void", ",", "loss_neg_pix", ")", "\n", "num_total", "=", "num_total", "-", "torch", ".", "ge", "(", "void_pixels", ",", "0.5", ")", ".", "float", "(", ")", ".", "sum", "(", ")", "\n", "w", "=", "num_labels_neg", "/", "num_total", "\n", "\n", "", "loss_pos", "=", "torch", ".", "sum", "(", "loss_pos_pix", ")", "\n", "loss_neg", "=", "torch", ".", "sum", "(", "loss_neg_pix", ")", "\n", "\n", "final_loss", "=", "w", "*", "loss_pos", "+", "(", "1", "-", "w", ")", "*", "loss_neg", "\n", "\n", "if", "self", ".", "size_average", ":", "\n", "            ", "final_loss", "/=", "float", "(", "np", ".", "prod", "(", "labels", ".", "size", "(", ")", ")", ")", "\n", "", "elif", "self", ".", "batch_average", ":", "\n", "            ", "final_loss", "/=", "labels", ".", "size", "(", ")", "[", "0", "]", "\n", "\n", "", "return", "final_loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.moco.builder.ContrastiveModel.__init__": [[18, 45], ["torch.Module.__init__", "utils.common_config.get_model", "utils.common_config.get_model", "zip", "builder.ContrastiveModel.register_buffer", "torch.functional.normalize", "torch.functional.normalize", "torch.functional.normalize", "builder.ContrastiveModel.register_buffer", "modules.losses.BalancedCrossEntropyLoss", "builder.ContrastiveModel.model_q.parameters", "builder.ContrastiveModel.model_k.parameters", "param_k.data.copy_", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.moco.builder.ContrastiveModel.__init__", "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.common_config.get_model", "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.utils.common_config.get_model"], ["    ", "def", "__init__", "(", "self", ",", "p", ")", ":", "\n", "        ", "\"\"\"\n        p: configuration dict\n        \"\"\"", "\n", "super", "(", "ContrastiveModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "K", "=", "p", "[", "'moco_kwargs'", "]", "[", "'K'", "]", "\n", "self", ".", "m", "=", "p", "[", "'moco_kwargs'", "]", "[", "'m'", "]", "\n", "self", ".", "T", "=", "p", "[", "'moco_kwargs'", "]", "[", "'T'", "]", "\n", "\n", "# create the model ", "\n", "self", ".", "model_q", "=", "get_model", "(", "p", ")", "\n", "self", ".", "model_k", "=", "get_model", "(", "p", ")", "\n", "\n", "for", "param_q", ",", "param_k", "in", "zip", "(", "self", ".", "model_q", ".", "parameters", "(", ")", ",", "self", ".", "model_k", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "param_k", ".", "data", ".", "copy_", "(", "param_q", ".", "data", ")", "# initialize", "\n", "param_k", ".", "requires_grad", "=", "False", "# not update by gradient", "\n", "\n", "# create the queue", "\n", "", "self", ".", "dim", "=", "p", "[", "'model_kwargs'", "]", "[", "'ndim'", "]", "\n", "self", ".", "register_buffer", "(", "\"queue\"", ",", "torch", ".", "randn", "(", "self", ".", "dim", ",", "self", ".", "K", ")", ")", "\n", "self", ".", "queue", "=", "nn", ".", "functional", ".", "normalize", "(", "self", ".", "queue", ",", "dim", "=", "0", ")", "\n", "\n", "self", ".", "register_buffer", "(", "\"queue_ptr\"", ",", "torch", ".", "zeros", "(", "1", ",", "dtype", "=", "torch", ".", "long", ")", ")", "\n", "\n", "# balanced cross-entropy loss", "\n", "self", ".", "bce", "=", "BalancedCrossEntropyLoss", "(", "size_average", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.moco.builder.ContrastiveModel._momentum_update_key_encoder": [[46, 53], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "zip", "builder.ContrastiveModel.model_q.parameters", "builder.ContrastiveModel.model_k.parameters"], "methods", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_momentum_update_key_encoder", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Momentum update of the key encoder\n        \"\"\"", "\n", "for", "param_q", ",", "param_k", "in", "zip", "(", "self", ".", "model_q", ".", "parameters", "(", ")", ",", "self", ".", "model_k", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "param_k", ".", "data", "=", "param_k", ".", "data", "*", "self", ".", "m", "+", "param_q", ".", "data", "*", "(", "1.", "-", "self", ".", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.moco.builder.ContrastiveModel._dequeue_and_enqueue": [[54, 69], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "builder.concat_all_gather", "int"], "methods", ["home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.moco.builder.concat_all_gather"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_dequeue_and_enqueue", "(", "self", ",", "keys", ")", ":", "\n", "# gather keys before updating queue", "\n", "        ", "keys", "=", "concat_all_gather", "(", "keys", ")", "\n", "\n", "batch_size", "=", "keys", ".", "shape", "[", "0", "]", "\n", "\n", "ptr", "=", "int", "(", "self", ".", "queue_ptr", ")", "\n", "assert", "self", ".", "K", "%", "batch_size", "==", "0", "# for simplicity", "\n", "\n", "# replace the keys at ptr (dequeue and enqueue)", "\n", "self", ".", "queue", "[", ":", ",", "ptr", ":", "ptr", "+", "batch_size", "]", "=", "keys", ".", "T", "\n", "ptr", "=", "(", "ptr", "+", "batch_size", ")", "%", "self", ".", "K", "# move pointer", "\n", "\n", "self", ".", "queue_ptr", "[", "0", "]", "=", "ptr", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.moco.builder.ContrastiveModel._batch_shuffle_ddp": [[70, 97], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "builder.concat_all_gather", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.distributed.broadcast", "torch.distributed.broadcast", "torch.distributed.broadcast", "torch.distributed.broadcast", "torch.distributed.broadcast", "torch.distributed.broadcast", "torch.distributed.broadcast", "torch.distributed.broadcast", "torch.distributed.broadcast", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.randperm().cuda.view", "torch.randperm().cuda.view", "torch.randperm().cuda.view", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm"], "methods", ["home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.moco.builder.concat_all_gather"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_batch_shuffle_ddp", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        Batch shuffle, for making use of BatchNorm.\n        *** Only support DistributedDataParallel (DDP) model. ***\n        \"\"\"", "\n", "# gather from all gpus", "\n", "batch_size_this", "=", "x", ".", "shape", "[", "0", "]", "\n", "x_gather", "=", "concat_all_gather", "(", "x", ")", "\n", "batch_size_all", "=", "x_gather", ".", "shape", "[", "0", "]", "\n", "\n", "num_gpus", "=", "batch_size_all", "//", "batch_size_this", "\n", "\n", "# random shuffle index", "\n", "idx_shuffle", "=", "torch", ".", "randperm", "(", "batch_size_all", ")", ".", "cuda", "(", ")", "\n", "\n", "# broadcast to all gpus", "\n", "torch", ".", "distributed", ".", "broadcast", "(", "idx_shuffle", ",", "src", "=", "0", ")", "\n", "\n", "# index for restoring", "\n", "idx_unshuffle", "=", "torch", ".", "argsort", "(", "idx_shuffle", ")", "\n", "\n", "# shuffled index for this gpu", "\n", "gpu_idx", "=", "torch", ".", "distributed", ".", "get_rank", "(", ")", "\n", "idx_this", "=", "idx_shuffle", ".", "view", "(", "num_gpus", ",", "-", "1", ")", "[", "gpu_idx", "]", "\n", "\n", "return", "x_gather", "[", "idx_this", "]", ",", "idx_unshuffle", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.moco.builder.ContrastiveModel._batch_unshuffle_ddp": [[98, 116], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "builder.concat_all_gather", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "idx_unshuffle.view"], "methods", ["home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.moco.builder.concat_all_gather"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_batch_unshuffle_ddp", "(", "self", ",", "x", ",", "idx_unshuffle", ")", ":", "\n", "        ", "\"\"\"\n        Undo batch shuffle.\n        *** Only support DistributedDataParallel (DDP) model. ***\n        \"\"\"", "\n", "# gather from all gpus", "\n", "batch_size_this", "=", "x", ".", "shape", "[", "0", "]", "\n", "x_gather", "=", "concat_all_gather", "(", "x", ")", "\n", "batch_size_all", "=", "x_gather", ".", "shape", "[", "0", "]", "\n", "\n", "num_gpus", "=", "batch_size_all", "//", "batch_size_this", "\n", "\n", "# restored index for this gpu", "\n", "gpu_idx", "=", "torch", ".", "distributed", ".", "get_rank", "(", ")", "\n", "idx_this", "=", "idx_unshuffle", ".", "view", "(", "num_gpus", ",", "-", "1", ")", "[", "gpu_idx", "]", "\n", "\n", "return", "x_gather", "[", "idx_this", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.moco.builder.ContrastiveModel.forward": [[117, 177], ["im_q.size", "builder.ContrastiveModel.model_q", "torch.functional.normalize", "torch.functional.normalize", "torch.functional.normalize", "torch.index_select.permute", "torch.index_select.permute", "torch.index_select.permute", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "builder.ContrastiveModel.bce", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "builder.ContrastiveModel.queue.clone().detach", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "builder.ContrastiveModel._dequeue_and_enqueue", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "sal_q.view.view.view", "torch.nonzero().view().squeeze", "torch.nonzero().view().squeeze", "torch.nonzero().view().squeeze", "torch.nonzero().view().squeeze", "torch.nonzero().view().squeeze", "torch.nonzero().view().squeeze", "torch.nonzero().view().squeeze", "torch.nonzero().view().squeeze", "torch.nonzero().view().squeeze", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "builder.ContrastiveModel._momentum_update_key_encoder", "builder.ContrastiveModel._batch_shuffle_ddp", "builder.ContrastiveModel.model_k", "torch.functional.normalize", "torch.functional.normalize", "torch.functional.normalize", "builder.ContrastiveModel._batch_unshuffle_ddp", "k.reshape.reshape.reshape", "sal_k.reshape().type.reshape().type.reshape().type", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.functional.normalize", "torch.functional.normalize", "torch.functional.normalize", "torch.functional.normalize.t", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "builder.ContrastiveModel.queue.clone", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "sal_k.reshape().type.reshape().type.reshape", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero"], "methods", ["home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.moco.builder.ContrastiveModel._dequeue_and_enqueue", "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.moco.builder.ContrastiveModel._momentum_update_key_encoder", "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.moco.builder.ContrastiveModel._batch_shuffle_ddp", "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.moco.builder.ContrastiveModel._batch_unshuffle_ddp"], ["", "def", "forward", "(", "self", ",", "im_q", ",", "im_k", ",", "sal_q", ",", "sal_k", ")", ":", "\n", "        ", "\"\"\"\n        Input:\n            images: a batch of images (B x 3 x H x W) \n            sal: a batch of saliency masks (B x H x W)\n        Output:\n            logits, targets\n        \"\"\"", "\n", "batch_size", "=", "im_q", ".", "size", "(", "0", ")", "\n", "\n", "q", ",", "q_bg", "=", "self", ".", "model_q", "(", "im_q", ")", "# queries: B x dim x H x W", "\n", "q", "=", "nn", ".", "functional", ".", "normalize", "(", "q", ",", "dim", "=", "1", ")", "\n", "q", "=", "q", ".", "permute", "(", "(", "0", ",", "2", ",", "3", ",", "1", ")", ")", "# queries: B x H x W x dim ", "\n", "q", "=", "torch", ".", "reshape", "(", "q", ",", "[", "-", "1", ",", "self", ".", "dim", "]", ")", "# queries: pixels x dim", "\n", "\n", "# compute saliency loss", "\n", "sal_loss", "=", "self", ".", "bce", "(", "q_bg", ",", "sal_q", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "offset", "=", "torch", ".", "arange", "(", "0", ",", "2", "*", "batch_size", ",", "2", ")", ".", "to", "(", "sal_q", ".", "device", ")", "\n", "sal_q", "=", "(", "sal_q", "+", "torch", ".", "reshape", "(", "offset", ",", "[", "-", "1", ",", "1", ",", "1", "]", ")", ")", "*", "sal_q", "# all bg's to 0", "\n", "sal_q", "=", "sal_q", ".", "view", "(", "-", "1", ")", "\n", "mask_indexes", "=", "torch", ".", "nonzero", "(", "(", "sal_q", ")", ")", ".", "view", "(", "-", "1", ")", ".", "squeeze", "(", ")", "\n", "sal_q", "=", "torch", ".", "index_select", "(", "sal_q", ",", "index", "=", "mask_indexes", ",", "dim", "=", "0", ")", "//", "2", "\n", "\n", "# compute key prototypes", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "# no gradient to keys", "\n", "            ", "self", ".", "_momentum_update_key_encoder", "(", ")", "# update the key encoder", "\n", "\n", "# shuffle for making use of BN", "\n", "im_k", ",", "idx_unshuffle", "=", "self", ".", "_batch_shuffle_ddp", "(", "im_k", ")", "\n", "\n", "k", ",", "_", "=", "self", ".", "model_k", "(", "im_k", ")", "# keys: N x C x H x W", "\n", "k", "=", "nn", ".", "functional", ".", "normalize", "(", "k", ",", "dim", "=", "1", ")", "\n", "\n", "# undo shuffle", "\n", "k", "=", "self", ".", "_batch_unshuffle_ddp", "(", "k", ",", "idx_unshuffle", ")", "\n", "\n", "# prototypes k", "\n", "k", "=", "k", ".", "reshape", "(", "batch_size", ",", "self", ".", "dim", ",", "-", "1", ")", "# B x dim x H.W", "\n", "sal_k", "=", "sal_k", ".", "reshape", "(", "batch_size", ",", "-", "1", ",", "1", ")", ".", "type", "(", "k", ".", "dtype", ")", "# B x H.W x 1", "\n", "prototypes_foreground", "=", "torch", ".", "bmm", "(", "k", ",", "sal_k", ")", ".", "squeeze", "(", ")", "# B x dim", "\n", "prototypes", "=", "nn", ".", "functional", ".", "normalize", "(", "prototypes_foreground", ",", "dim", "=", "1", ")", "\n", "\n", "# q: pixels x dim", "\n", "# k: pixels x dim", "\n", "# prototypes_k: proto x dim", "\n", "", "q", "=", "torch", ".", "index_select", "(", "q", ",", "index", "=", "mask_indexes", ",", "dim", "=", "0", ")", "\n", "l_batch", "=", "torch", ".", "matmul", "(", "q", ",", "prototypes", ".", "t", "(", ")", ")", "# shape: pixels x proto", "\n", "negatives", "=", "self", ".", "queue", ".", "clone", "(", ")", ".", "detach", "(", ")", "# shape: dim x negatives", "\n", "l_mem", "=", "torch", ".", "matmul", "(", "q", ",", "negatives", ")", "# shape: pixels x negatives (Memory bank)", "\n", "logits", "=", "torch", ".", "cat", "(", "[", "l_batch", ",", "l_mem", "]", ",", "dim", "=", "1", ")", "# pixels x (proto + negatives)", "\n", "\n", "# apply temperature", "\n", "logits", "/=", "self", ".", "T", "\n", "\n", "# dequeue and enqueue", "\n", "self", ".", "_dequeue_and_enqueue", "(", "prototypes", ")", "\n", "\n", "return", "logits", ",", "sal_q", ",", "sal_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.wvangansbeke_Unsupervised-Semantic-Segmentation.moco.builder.concat_all_gather": [[180, 192], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.distributed.all_gather", "torch.distributed.all_gather", "torch.distributed.all_gather", "torch.cat", "torch.cat", "torch.cat", "torch.ones_like", "torch.ones_like", "torch.ones_like", "range", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size"], "function", ["None"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "concat_all_gather", "(", "tensor", ")", ":", "\n", "    ", "\"\"\"\n    Performs all_gather operation on the provided tensors.\n    *** Warning ***: torch.distributed.all_gather has no gradient.\n    \"\"\"", "\n", "tensors_gather", "=", "[", "torch", ".", "ones_like", "(", "tensor", ")", "\n", "for", "_", "in", "range", "(", "torch", ".", "distributed", ".", "get_world_size", "(", ")", ")", "]", "\n", "torch", ".", "distributed", ".", "all_gather", "(", "tensors_gather", ",", "tensor", ",", "async_op", "=", "False", ")", "\n", "\n", "output", "=", "torch", ".", "cat", "(", "tensors_gather", ",", "dim", "=", "0", ")", "\n", "return", "output", "\n", "", ""]]}