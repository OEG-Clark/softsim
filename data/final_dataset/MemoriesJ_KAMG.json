{"home.repos.pwc.inspect_result.MemoriesJ_KAMG.NeuralNLP-NeuralClassifier-KAMG.config.Config.__init__": [[22, 30], ["json.load.Config._update", "open", "json.load"], "methods", ["home.repos.pwc.inspect_result.MemoriesJ_KAMG.NeuralNLP-NeuralClassifier-KAMG.config.Config._update"], ["def", "__init__", "(", "self", ",", "config", "=", "None", ",", "config_file", "=", "None", ")", ":", "\n", "        ", "if", "config_file", ":", "\n", "            ", "with", "open", "(", "config_file", ",", "'r'", ")", "as", "fin", ":", "\n", "                ", "config", "=", "json", ".", "load", "(", "fin", ")", "\n", "\n", "", "", "self", ".", "dict", "=", "config", "\n", "if", "config", ":", "\n", "            ", "self", ".", "_update", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.NeuralNLP-NeuralClassifier-KAMG.config.Config.__getitem__": [[31, 33], ["None"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "key", ")", ":", "\n", "        ", "return", "self", ".", "dict", "[", "key", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.NeuralNLP-NeuralClassifier-KAMG.config.Config.__contains__": [[34, 36], ["None"], "methods", ["None"], ["", "def", "__contains__", "(", "self", ",", "item", ")", ":", "\n", "        ", "return", "item", "in", "self", ".", "dict", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.NeuralNLP-NeuralClassifier-KAMG.config.Config.items": [[37, 39], ["config.Config.dict.items"], "methods", ["home.repos.pwc.inspect_result.MemoriesJ_KAMG.NeuralNLP-NeuralClassifier-KAMG.config.Config.items"], ["", "def", "items", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "dict", ".", "items", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.NeuralNLP-NeuralClassifier-KAMG.config.Config.add": [[40, 44], ["None"], "methods", ["None"], ["", "def", "add", "(", "self", ",", "key", ",", "value", ")", ":", "\n", "        ", "\"\"\"Add key value pair\n        \"\"\"", "\n", "self", ".", "__dict__", "[", "key", "]", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.NeuralNLP-NeuralClassifier-KAMG.config.Config._update": [[45, 58], ["config.Config.__dict__.update", "isinstance", "isinstance", "isinstance", "config.Config", "isinstance", "config.Config"], "methods", ["None"], ["", "def", "_update", "(", "self", ",", "config", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "config", ",", "dict", ")", ":", "\n", "            ", "return", "\n", "\n", "", "for", "key", "in", "config", ":", "\n", "            ", "if", "isinstance", "(", "config", "[", "key", "]", ",", "dict", ")", ":", "\n", "                ", "config", "[", "key", "]", "=", "Config", "(", "config", "[", "key", "]", ")", "\n", "\n", "", "if", "isinstance", "(", "config", "[", "key", "]", ",", "list", ")", ":", "\n", "                ", "config", "[", "key", "]", "=", "[", "Config", "(", "x", ")", "if", "isinstance", "(", "x", ",", "dict", ")", "else", "x", "for", "x", "in", "\n", "config", "[", "key", "]", "]", "\n", "\n", "", "", "self", ".", "__dict__", ".", "update", "(", "config", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.NeuralNLP-NeuralClassifier-KAMG.predict.Predictor.__init__": [[52, 64], ["config.device.startswith", "predict.Predictor._get_classification_model", "predict.Predictor._load_checkpoint", "predict.Predictor.model.eval", "len", "globals", "globals"], "methods", ["home.repos.pwc.inspect_result.MemoriesJ_KAMG.NeuralNLP-NeuralClassifier-KAMG.predict.Predictor._get_classification_model", "home.repos.pwc.inspect_result.MemoriesJ_KAMG.NeuralNLP-NeuralClassifier-KAMG.predict.Predictor._load_checkpoint", "home.repos.pwc.inspect_result.MemoriesJ_KAMG.NeuralNLP-NeuralClassifier-KAMG.train.ClassificationTrainer.eval"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "self", ".", "config", "=", "config", "\n", "self", ".", "model_name", "=", "config", ".", "model_name", "\n", "self", ".", "use_cuda", "=", "config", ".", "device", ".", "startswith", "(", "\"cuda\"", ")", "\n", "self", ".", "dataset_name", "=", "\"ClassificationDataset\"", "\n", "self", ".", "collate_name", "=", "\"FastTextCollator\"", "if", "self", ".", "model_name", "==", "\"FastText\"", "else", "\"ClassificationCollator\"", "\n", "self", ".", "dataset", "=", "globals", "(", ")", "[", "self", ".", "dataset_name", "]", "(", "config", ",", "[", "]", ",", "mode", "=", "\"infer\"", ")", "\n", "self", ".", "collate_fn", "=", "globals", "(", ")", "[", "self", ".", "collate_name", "]", "(", "config", ",", "len", "(", "self", ".", "dataset", ".", "label_map", ")", ")", "\n", "self", ".", "model", "=", "Predictor", ".", "_get_classification_model", "(", "self", ".", "model_name", ",", "self", ".", "dataset", ",", "config", ")", "\n", "Predictor", ".", "_load_checkpoint", "(", "config", ".", "eval", ".", "model_dir", ",", "self", ".", "model", ",", "self", ".", "use_cuda", ")", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.NeuralNLP-NeuralClassifier-KAMG.predict.Predictor._get_classification_model": [[65, 70], ["conf.device.startswith", "model.cuda", "globals"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_get_classification_model", "(", "model_name", ",", "dataset", ",", "conf", ")", ":", "\n", "        ", "model", "=", "globals", "(", ")", "[", "model_name", "]", "(", "dataset", ",", "conf", ")", "\n", "model", "=", "model", ".", "cuda", "(", "conf", ".", "device", ")", "if", "conf", ".", "device", ".", "startswith", "(", "\"cuda\"", ")", "else", "model", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.NeuralNLP-NeuralClassifier-KAMG.predict.Predictor._load_checkpoint": [[71, 78], ["model.load_state_dict", "torch.load", "torch.load"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_load_checkpoint", "(", "file_name", ",", "model", ",", "use_cuda", ")", ":", "\n", "        ", "if", "use_cuda", ":", "\n", "            ", "checkpoint", "=", "torch", ".", "load", "(", "file_name", ")", "\n", "", "else", ":", "\n", "            ", "checkpoint", "=", "torch", ".", "load", "(", "file_name", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "", "model", ".", "load_state_dict", "(", "checkpoint", "[", "\"state_dict\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.NeuralNLP-NeuralClassifier-KAMG.predict.Predictor.predict": [[79, 93], ["torch.no_grad", "predict.Predictor.collate_fn", "predict.Predictor.model", "torch.sigmoid.detach().cpu().tolist", "numpy.array", "predict.Predictor.dataset._get_vocab_id_list", "torch.softmax", "torch.sigmoid", "json.loads", "torch.sigmoid.detach().cpu", "torch.sigmoid.detach"], "methods", ["home.repos.pwc.inspect_result.MemoriesJ_KAMG.dataset.dataset.DatasetBase._get_vocab_id_list"], ["", "def", "predict", "(", "self", ",", "texts", ")", ":", "\n", "        ", "\"\"\"\n        input texts should be json objects\n        \"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "batch_texts", "=", "[", "self", ".", "dataset", ".", "_get_vocab_id_list", "(", "json", ".", "loads", "(", "text", ")", ")", "for", "text", "in", "texts", "]", "\n", "batch_texts", "=", "self", ".", "collate_fn", "(", "batch_texts", ")", "\n", "logits", "=", "self", ".", "model", "(", "batch_texts", ")", "\n", "if", "self", ".", "config", ".", "task_info", ".", "label_type", "!=", "ClassificationType", ".", "MULTI_LABEL", ":", "\n", "                ", "probs", "=", "torch", ".", "softmax", "(", "logits", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "                ", "probs", "=", "torch", ".", "sigmoid", "(", "logits", ")", "\n", "", "probs", "=", "probs", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "tolist", "(", ")", "\n", "return", "np", ".", "array", "(", "probs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.NeuralNLP-NeuralClassifier-KAMG.eval.get_classification_model": [[52, 56], ["conf.device.startswith", "model.cuda", "globals"], "function", ["None"], ["def", "get_classification_model", "(", "model_name", ",", "dataset", ",", "conf", ")", ":", "\n", "    ", "model", "=", "globals", "(", ")", "[", "model_name", "]", "(", "dataset", ",", "conf", ")", "\n", "model", "=", "model", ".", "cuda", "(", "conf", ".", "device", ")", "if", "conf", ".", "device", ".", "startswith", "(", "\"cuda\"", ")", "else", "model", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.NeuralNLP-NeuralClassifier-KAMG.eval.load_checkpoint": [[58, 63], ["torch.load", "model.load_state_dict", "optimizer.load_state_dict"], "function", ["None"], ["", "def", "load_checkpoint", "(", "file_name", ",", "conf", ",", "model", ",", "optimizer", ")", ":", "\n", "    ", "checkpoint", "=", "torch", ".", "load", "(", "file_name", ")", "\n", "conf", ".", "train", ".", "start_epoch", "=", "checkpoint", "[", "\"epoch\"", "]", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "\"state_dict\"", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "\"optimizer\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.NeuralNLP-NeuralClassifier-KAMG.eval.eval": [[65, 153], ["util.Logger", "torch.utils.data.DataLoader", "eval.get_classification_model", "model.model_util.get_optimizer", "eval.load_checkpoint", "get_classification_model.eval", "evaluate.classification_evaluate.ClassificationEvaluator", "evaluate.classification_evaluate.ClassificationEvaluator.save", "len", "torch.sigmoid.detach().cpu().tolist", "predict_probs.extend", "standard_labels.extend", "evaluate.classification_evaluate.ClassificationEvaluator.evaluate", "range", "util.Logger.warn", "evaluate.classification_evaluate.ClassificationEvaluator.evaluate", "util.Logger.warn", "globals", "globals", "globals", "torch.no_grad", "get_classification_model.", "torch.nn.functional.softmax", "torch.sigmoid", "torch.sigmoid.detach().cpu", "os.path.join", "message.format", "os.path.join", "torch.sigmoid.detach"], "function", ["home.repos.pwc.inspect_result.MemoriesJ_KAMG.NeuralNLP-NeuralClassifier-KAMG.train.get_classification_model", "home.repos.pwc.inspect_result.MemoriesJ_KAMG.model.model_util.get_optimizer", "home.repos.pwc.inspect_result.MemoriesJ_KAMG.NeuralNLP-NeuralClassifier-KAMG.train.load_checkpoint", "home.repos.pwc.inspect_result.MemoriesJ_KAMG.NeuralNLP-NeuralClassifier-KAMG.train.ClassificationTrainer.eval", "home.repos.pwc.inspect_result.MemoriesJ_KAMG.evaluate.classification_evaluate.ClassificationEvaluator.save", "home.repos.pwc.inspect_result.MemoriesJ_KAMG.evaluate.classification_evaluate.ClassificationEvaluator.evaluate", "home.repos.pwc.inspect_result.MemoriesJ_KAMG.NeuralNLP-NeuralClassifier-KAMG.util.Logger.warn", "home.repos.pwc.inspect_result.MemoriesJ_KAMG.evaluate.classification_evaluate.ClassificationEvaluator.evaluate", "home.repos.pwc.inspect_result.MemoriesJ_KAMG.NeuralNLP-NeuralClassifier-KAMG.util.Logger.warn"], ["", "def", "eval", "(", "conf", ")", ":", "\n", "    ", "logger", "=", "util", ".", "Logger", "(", "conf", ")", "\n", "model_name", "=", "conf", ".", "model_name", "\n", "dataset_name", "=", "\"ClassificationDataset\"", "\n", "collate_name", "=", "\"FastTextCollator\"", "if", "model_name", "==", "\"FastText\"", "else", "\"ClassificationCollator\"", "\n", "\n", "test_dataset", "=", "globals", "(", ")", "[", "dataset_name", "]", "(", "conf", ",", "conf", ".", "data", ".", "test_json_files", ")", "\n", "collate_fn", "=", "globals", "(", ")", "[", "collate_name", "]", "(", "conf", ",", "len", "(", "test_dataset", ".", "label_map", ")", ")", "\n", "test_data_loader", "=", "DataLoader", "(", "\n", "test_dataset", ",", "batch_size", "=", "conf", ".", "eval", ".", "batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "conf", ".", "data", ".", "num_worker", ",", "collate_fn", "=", "collate_fn", ",", "\n", "pin_memory", "=", "True", ")", "\n", "\n", "empty_dataset", "=", "globals", "(", ")", "[", "dataset_name", "]", "(", "conf", ",", "[", "]", ")", "\n", "model", "=", "get_classification_model", "(", "model_name", ",", "empty_dataset", ",", "conf", ")", "\n", "optimizer", "=", "get_optimizer", "(", "conf", ",", "model", ")", "\n", "load_checkpoint", "(", "conf", ".", "eval", ".", "model_dir", ",", "conf", ",", "model", ",", "optimizer", ")", "\n", "model", ".", "eval", "(", ")", "\n", "is_multi", "=", "False", "\n", "if", "conf", ".", "task_info", ".", "label_type", "==", "ClassificationType", ".", "MULTI_LABEL", ":", "\n", "        ", "is_multi", "=", "True", "\n", "", "predict_probs", "=", "[", "]", "\n", "standard_labels", "=", "[", "]", "\n", "evaluator", "=", "cEvaluator", "(", "conf", ".", "eval", ".", "dir", ")", "\n", "for", "batch", "in", "test_data_loader", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "logits", "=", "model", "(", "batch", ")", "\n", "", "if", "not", "is_multi", ":", "\n", "            ", "result", "=", "torch", ".", "nn", ".", "functional", ".", "softmax", "(", "logits", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "result", "=", "torch", ".", "sigmoid", "(", "logits", ")", "\n", "", "result", "=", "result", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "tolist", "(", ")", "\n", "predict_probs", ".", "extend", "(", "result", ")", "\n", "standard_labels", ".", "extend", "(", "batch", "[", "ClassificationDataset", ".", "DOC_LABEL_LIST", "]", ")", "\n", "", "if", "conf", ".", "eval", ".", "is_flat", ":", "\n", "        ", "(", "_", ",", "precision_list", ",", "recall_list", ",", "fscore_list", ",", "right_list", ",", "\n", "predict_list", ",", "standard_list", ",", "pak_dict", ",", "rak_dict", ",", "rpak_dict", ",", "ndcgak_dict", ")", "=", "evaluator", ".", "evaluate", "(", "\n", "predict_probs", ",", "standard_label_ids", "=", "standard_labels", ",", "label_map", "=", "empty_dataset", ".", "label_map", ",", "\n", "threshold", "=", "conf", ".", "eval", ".", "threshold", ",", "top_k", "=", "conf", ".", "eval", ".", "top_k", ",", "\n", "is_flat", "=", "conf", ".", "eval", ".", "is_flat", ",", "is_multi", "=", "is_multi", ",", "\n", "debug_file_name", "=", "conf", ".", "eval", ".", "debug_file_name", ",", "\n", "is_label_split", "=", "conf", ".", "data", ".", "generate_label_group", ",", "\n", "label_split_json_file", "=", "os", ".", "path", ".", "join", "(", "conf", ".", "data", ".", "dict_dir", ",", "\n", "\"{}.json\"", ".", "format", "(", "ClassificationDataset", ".", "DOC_LABEL_GROUP", ")", ")", ",", "\n", "instance_remove", "=", "conf", ".", "eval", ".", "instance_remove", "\n", ")", "\n", "sup_message", "=", "\"\"", "\n", "for", "i", "in", "range", "(", "1", ",", "conf", ".", "eval", ".", "top_k", "+", "1", ")", ":", "\n", "            ", "for", "group", "in", "pak_dict", "[", "i", "]", ":", "\n", "                ", "sup_message", "+=", "\"Precision at {} of {} group: {}, \"", ".", "format", "(", "i", ",", "group", ",", "pak_dict", "[", "i", "]", "[", "group", "]", ")", "\n", "sup_message", "+=", "\"Recall at {} of {} group: {}, \"", ".", "format", "(", "i", ",", "group", ",", "rak_dict", "[", "i", "]", "[", "group", "]", ")", "\n", "sup_message", "+=", "\"R-Precision at {} of {} group: {}, \"", ".", "format", "(", "i", ",", "group", ",", "rpak_dict", "[", "i", "]", "[", "group", "]", ")", "\n", "sup_message", "+=", "\"nDCG at {} of {} group: {}, \"", ".", "format", "(", "i", ",", "group", ",", "ndcgak_dict", "[", "i", "]", "[", "group", "]", ")", "\n", "\n", "", "", "message", "=", "\"Performance is precision: {}, recall: {}, fscore: {}, \"", "+", "\"macro-fscore: {}, right: {}, predict: {}, standard: {}, \"", "\n", "logger", ".", "warn", "(", "message", ".", "format", "(", "\n", "precision_list", "[", "0", "]", "[", "cEvaluator", ".", "MICRO_AVERAGE", "]", ",", "\n", "recall_list", "[", "0", "]", "[", "cEvaluator", ".", "MICRO_AVERAGE", "]", ",", "\n", "fscore_list", "[", "0", "]", "[", "cEvaluator", ".", "MICRO_AVERAGE", "]", ",", "\n", "fscore_list", "[", "0", "]", "[", "cEvaluator", ".", "MACRO_AVERAGE", "]", ",", "\n", "right_list", "[", "0", "]", "[", "cEvaluator", ".", "MICRO_AVERAGE", "]", ",", "\n", "predict_list", "[", "0", "]", "[", "cEvaluator", ".", "MICRO_AVERAGE", "]", ",", "\n", "standard_list", "[", "0", "]", "[", "cEvaluator", ".", "MICRO_AVERAGE", "]", ")", "+", "\n", "sup_message", ")", "\n", "", "else", ":", "\n", "        ", "(", "_", ",", "precision_list", ",", "recall_list", ",", "fscore_list", ",", "right_list", ",", "\n", "predict_list", ",", "standard_list", ")", "=", "evaluator", ".", "evaluate", "(", "\n", "predict_probs", ",", "standard_label_ids", "=", "standard_labels", ",", "label_map", "=", "empty_dataset", ".", "label_map", ",", "\n", "threshold", "=", "conf", ".", "eval", ".", "threshold", ",", "top_k", "=", "conf", ".", "eval", ".", "top_k", ",", "\n", "is_flat", "=", "conf", ".", "eval", ".", "is_flat", ",", "is_multi", "=", "is_multi", ",", "\n", "is_label_split", "=", "conf", ".", "data", ".", "generate_label_group", ",", "\n", "label_split_json_file", "=", "os", ".", "path", ".", "join", "(", "conf", ".", "data", ".", "dict_dir", ",", "\n", "\"{}.json\"", ".", "format", "(", "ClassificationDataset", ".", "DOC_LABEL_GROUP", ")", ")", "\n", ")", "\n", "logger", ".", "warn", "(", "\n", "\"Performance is precision: %f, \"", "\n", "\"recall: %f, fscore: %f, right: %d, predict: %d, standard: %d.\"", "%", "(", "\n", "precision_list", "[", "0", "]", "[", "cEvaluator", ".", "MICRO_AVERAGE", "]", ",", "\n", "recall_list", "[", "0", "]", "[", "cEvaluator", ".", "MICRO_AVERAGE", "]", ",", "\n", "fscore_list", "[", "0", "]", "[", "cEvaluator", ".", "MICRO_AVERAGE", "]", ",", "\n", "right_list", "[", "0", "]", "[", "cEvaluator", ".", "MICRO_AVERAGE", "]", ",", "\n", "predict_list", "[", "0", "]", "[", "cEvaluator", ".", "MICRO_AVERAGE", "]", ",", "\n", "standard_list", "[", "0", "]", "[", "cEvaluator", ".", "MICRO_AVERAGE", "]", ")", ")", "\n", "", "evaluator", ".", "save", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.NeuralNLP-NeuralClassifier-KAMG.train.ClassificationTrainer.__init__": [[93, 102], ["model.model_util.get_hierar_relations"], "methods", ["home.repos.pwc.inspect_result.MemoriesJ_KAMG.model.model_util.get_hierar_relations"], ["    ", "def", "__init__", "(", "self", ",", "label_map", ",", "logger", ",", "evaluator", ",", "conf", ",", "loss_fn", ")", ":", "\n", "        ", "self", ".", "label_map", "=", "label_map", "\n", "self", ".", "logger", "=", "logger", "\n", "self", ".", "evaluator", "=", "evaluator", "\n", "self", ".", "conf", "=", "conf", "\n", "self", ".", "loss_fn", "=", "loss_fn", "\n", "if", "self", ".", "conf", ".", "task_info", ".", "hierarchical", ":", "\n", "            ", "self", ".", "hierar_relations", "=", "get_hierar_relations", "(", "\n", "self", ".", "conf", ".", "task_info", ".", "hierar_taxonomy", ",", "label_map", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.NeuralNLP-NeuralClassifier-KAMG.train.ClassificationTrainer.train": [[103, 108], ["model.update_lr", "model.train", "train.ClassificationTrainer.run"], "methods", ["home.repos.pwc.inspect_result.MemoriesJ_KAMG.classification.classifier.Classifier.update_lr", "home.repos.pwc.inspect_result.MemoriesJ_KAMG.NeuralNLP-NeuralClassifier-KAMG.train.train", "home.repos.pwc.inspect_result.MemoriesJ_KAMG.NeuralNLP-NeuralClassifier-KAMG.train.ClassificationTrainer.run"], ["", "", "def", "train", "(", "self", ",", "data_loader", ",", "model", ",", "optimizer", ",", "stage", ",", "epoch", ")", ":", "\n", "        ", "model", ".", "update_lr", "(", "optimizer", ",", "epoch", ")", "\n", "model", ".", "train", "(", ")", "\n", "return", "self", ".", "run", "(", "data_loader", ",", "model", ",", "optimizer", ",", "stage", ",", "epoch", ",", "\n", "ModeType", ".", "TRAIN", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.NeuralNLP-NeuralClassifier-KAMG.train.ClassificationTrainer.eval": [[109, 113], ["model.eval", "torch.no_grad", "train.ClassificationTrainer.run"], "methods", ["home.repos.pwc.inspect_result.MemoriesJ_KAMG.NeuralNLP-NeuralClassifier-KAMG.train.ClassificationTrainer.eval", "home.repos.pwc.inspect_result.MemoriesJ_KAMG.NeuralNLP-NeuralClassifier-KAMG.train.ClassificationTrainer.run"], ["", "def", "eval", "(", "self", ",", "data_loader", ",", "model", ",", "optimizer", ",", "stage", ",", "epoch", ",", "show_evaluation", "=", "False", ")", ":", "\n", "        ", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "return", "self", ".", "run", "(", "data_loader", ",", "model", ",", "optimizer", ",", "stage", ",", "epoch", ",", "show_evaluation", "=", "show_evaluation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.NeuralNLP-NeuralClassifier-KAMG.train.ClassificationTrainer.run": [[114, 224], ["len", "model", "train.ClassificationTrainer.detach().cpu().item", "torch.sigmoid.detach().cpu().tolist", "predict_probs.extend", "standard_labels.extend", "torch.cuda.empty_cache", "train.ClassificationTrainer.loss_fn", "train.ClassificationTrainer.loss_fn", "optimizer.zero_grad", "train.ClassificationTrainer.backward", "optimizer.step", "torch.nn.functional.softmax", "torch.sigmoid", "train.ClassificationTrainer.logger.warn", "batch[].to", "batch[].to", "train.ClassificationTrainer.detach().cpu", "torch.sigmoid.detach().cpu", "train.ClassificationTrainer.evaluator.evaluate", "range", "train.ClassificationTrainer.logger.warn", "train.ClassificationTrainer.evaluator.evaluate", "train.ClassificationTrainer.logger.warn", "train.ClassificationTrainer.detach", "torch.sigmoid.detach", "os.path.join", "message.format"], "methods", ["home.repos.pwc.inspect_result.MemoriesJ_KAMG.model.optimizer.BertAdam.step", "home.repos.pwc.inspect_result.MemoriesJ_KAMG.NeuralNLP-NeuralClassifier-KAMG.util.Logger.warn", "home.repos.pwc.inspect_result.MemoriesJ_KAMG.evaluate.classification_evaluate.ClassificationEvaluator.evaluate", "home.repos.pwc.inspect_result.MemoriesJ_KAMG.NeuralNLP-NeuralClassifier-KAMG.util.Logger.warn", "home.repos.pwc.inspect_result.MemoriesJ_KAMG.evaluate.classification_evaluate.ClassificationEvaluator.evaluate", "home.repos.pwc.inspect_result.MemoriesJ_KAMG.NeuralNLP-NeuralClassifier-KAMG.util.Logger.warn"], ["", "", "def", "run", "(", "self", ",", "data_loader", ",", "model", ",", "optimizer", ",", "stage", ",", "\n", "epoch", ",", "mode", "=", "ModeType", ".", "EVAL", ",", "show_evaluation", "=", "False", ")", ":", "\n", "        ", "is_multi", "=", "False", "\n", "# multi-label classifcation", "\n", "if", "self", ".", "conf", ".", "task_info", ".", "label_type", "==", "ClassificationType", ".", "MULTI_LABEL", ":", "\n", "            ", "is_multi", "=", "True", "\n", "", "predict_probs", "=", "[", "]", "\n", "standard_labels", "=", "[", "]", "\n", "num_batch", "=", "len", "(", "data_loader", ")", "\n", "total_loss", "=", "0.", "\n", "for", "batch", "in", "data_loader", ":", "\n", "            ", "logits", "=", "model", "(", "batch", ")", "\n", "# hierarchical classification", "\n", "if", "self", ".", "conf", ".", "task_info", ".", "hierarchical", ":", "\n", "                ", "linear_paras", "=", "model", ".", "linear", ".", "weight", "\n", "is_hierar", "=", "True", "\n", "used_argvs", "=", "(", "self", ".", "conf", ".", "task_info", ".", "hierar_penalty", ",", "linear_paras", ",", "self", ".", "hierar_relations", ")", "\n", "loss", "=", "self", ".", "loss_fn", "(", "\n", "logits", ",", "\n", "batch", "[", "ClassificationDataset", ".", "DOC_LABEL", "]", ".", "to", "(", "self", ".", "conf", ".", "device", ")", ",", "\n", "is_hierar", ",", "\n", "is_multi", ",", "\n", "*", "used_argvs", ")", "\n", "", "else", ":", "# flat classification", "\n", "                ", "loss", "=", "self", ".", "loss_fn", "(", "\n", "logits", ",", "\n", "batch", "[", "ClassificationDataset", ".", "DOC_LABEL", "]", ".", "to", "(", "self", ".", "conf", ".", "device", ")", ",", "\n", "False", ",", "\n", "is_multi", ")", "\n", "", "if", "mode", "==", "ModeType", ".", "TRAIN", ":", "\n", "                ", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "continue", "\n", "", "total_loss", "+=", "loss", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "item", "(", ")", "\n", "if", "not", "is_multi", ":", "\n", "                ", "result", "=", "torch", ".", "nn", ".", "functional", ".", "softmax", "(", "logits", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "                ", "result", "=", "torch", ".", "sigmoid", "(", "logits", ")", "\n", "", "result", "=", "result", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "tolist", "(", ")", "\n", "predict_probs", ".", "extend", "(", "result", ")", "\n", "standard_labels", ".", "extend", "(", "batch", "[", "ClassificationDataset", ".", "DOC_LABEL_LIST", "]", ")", "\n", "", "if", "mode", "==", "ModeType", ".", "EVAL", ":", "\n", "            ", "total_loss", "=", "total_loss", "/", "num_batch", "\n", "if", "show_evaluation", ":", "\n", "                ", "if", "self", ".", "conf", ".", "eval", ".", "is_flat", ":", "\n", "                    ", "(", "_", ",", "precision_list", ",", "recall_list", ",", "fscore_list", ",", "right_list", ",", "\n", "predict_list", ",", "standard_list", ",", "pak_dict", ",", "rak_dict", ",", "rpak_dict", ",", "ndcgak_dict", ")", "=", "self", ".", "evaluator", ".", "evaluate", "(", "\n", "predict_probs", ",", "standard_label_ids", "=", "standard_labels", ",", "label_map", "=", "self", ".", "label_map", ",", "\n", "threshold", "=", "self", ".", "conf", ".", "eval", ".", "threshold", ",", "top_k", "=", "self", ".", "conf", ".", "eval", ".", "top_k", ",", "\n", "is_flat", "=", "self", ".", "conf", ".", "eval", ".", "is_flat", ",", "is_multi", "=", "is_multi", ",", "\n", "debug_file_name", "=", "self", ".", "conf", ".", "eval", ".", "debug_file_name", ",", "\n", "is_label_split", "=", "self", ".", "conf", ".", "data", ".", "generate_label_group", ",", "\n", "label_split_json_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "conf", ".", "data", ".", "dict_dir", ",", "\n", "\"{}.json\"", ".", "format", "(", "ClassificationDataset", ".", "DOC_LABEL_GROUP", ")", ")", ",", "\n", "instance_remove", "=", "self", ".", "conf", ".", "eval", ".", "instance_remove", "\n", ")", "\n", "sup_message", "=", "\"\"", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "conf", ".", "eval", ".", "top_k", "+", "1", ")", ":", "\n", "                        ", "for", "group", "in", "pak_dict", "[", "i", "]", ":", "\n", "                            ", "sup_message", "+=", "\"Precision at {} of {} group: {}, \"", ".", "format", "(", "i", ",", "group", ",", "pak_dict", "[", "i", "]", "[", "group", "]", ")", "\n", "sup_message", "+=", "\"Recall at {} of {} group: {}, \"", ".", "format", "(", "i", ",", "group", ",", "rak_dict", "[", "i", "]", "[", "group", "]", ")", "\n", "sup_message", "+=", "\"R-Precision at {} of {} group: {}, \"", ".", "format", "(", "i", ",", "group", ",", "rpak_dict", "[", "i", "]", "[", "group", "]", ")", "\n", "sup_message", "+=", "\"nDCG at {} of {} group: {}, \"", ".", "format", "(", "i", ",", "group", ",", "ndcgak_dict", "[", "i", "]", "[", "group", "]", ")", "\n", "\n", "", "", "message", "=", "\"{} performance at epoch {} is precision: {}, recall: {}, fscore: {}, \"", "+", "\"macro-fscore: {}, right: {}, predict: {}, standard: {}, \"", "\n", "self", ".", "logger", ".", "warn", "(", "message", ".", "format", "(", "\n", "stage", ",", "epoch", ",", "precision_list", "[", "0", "]", "[", "cEvaluator", ".", "MICRO_AVERAGE", "]", ",", "\n", "recall_list", "[", "0", "]", "[", "cEvaluator", ".", "MICRO_AVERAGE", "]", ",", "\n", "fscore_list", "[", "0", "]", "[", "cEvaluator", ".", "MICRO_AVERAGE", "]", ",", "\n", "fscore_list", "[", "0", "]", "[", "cEvaluator", ".", "MACRO_AVERAGE", "]", ",", "\n", "right_list", "[", "0", "]", "[", "cEvaluator", ".", "MICRO_AVERAGE", "]", ",", "\n", "predict_list", "[", "0", "]", "[", "cEvaluator", ".", "MICRO_AVERAGE", "]", ",", "\n", "standard_list", "[", "0", "]", "[", "cEvaluator", ".", "MICRO_AVERAGE", "]", ")", "+", "\n", "sup_message", "+", "\"Loss is: {}.\"", ".", "format", "(", "total_loss", ")", ")", "\n", "del", "precision_list", ",", "recall_list", ",", "fscore_list", ",", "right_list", ",", "predict_list", ",", "standard_list", ",", "pak_dict", ",", "rak_dict", ",", "rpak_dict", ",", "ndcgak_dict", "\n", "", "else", ":", "\n", "                    ", "(", "_", ",", "precision_list", ",", "recall_list", ",", "fscore_list", ",", "right_list", ",", "\n", "predict_list", ",", "standard_list", ")", "=", "self", ".", "evaluator", ".", "evaluate", "(", "\n", "predict_probs", ",", "standard_label_ids", "=", "standard_labels", ",", "label_map", "=", "self", ".", "label_map", ",", "\n", "threshold", "=", "self", ".", "conf", ".", "eval", ".", "threshold", ",", "top_k", "=", "self", ".", "conf", ".", "eval", ".", "top_k", ",", "\n", "is_flat", "=", "self", ".", "conf", ".", "eval", ".", "is_flat", ",", "is_multi", "=", "is_multi", ",", "\n", "debug_file_name", "=", "self", ".", "conf", ".", "eval", ".", "debug_file_name", ")", "\n", "# precision_list[0] save metrics of flat classification", "\n", "# precision_list[1:] save metrices of hierarchical classification", "\n", "self", ".", "logger", ".", "warn", "(", "\n", "\"%s performance at epoch %d is precision: %f, \"", "\n", "\"recall: %f, fscore: %f, macro-fscore: %f, right: %d, predict: %d, standard: %d.\\n\"", "\n", "\"Loss is: %f.\"", "%", "(", "\n", "stage", ",", "epoch", ",", "precision_list", "[", "0", "]", "[", "cEvaluator", ".", "MICRO_AVERAGE", "]", ",", "\n", "recall_list", "[", "0", "]", "[", "cEvaluator", ".", "MICRO_AVERAGE", "]", ",", "\n", "fscore_list", "[", "0", "]", "[", "cEvaluator", ".", "MICRO_AVERAGE", "]", ",", "\n", "fscore_list", "[", "0", "]", "[", "cEvaluator", ".", "MACRO_AVERAGE", "]", ",", "\n", "right_list", "[", "0", "]", "[", "cEvaluator", ".", "MICRO_AVERAGE", "]", ",", "\n", "predict_list", "[", "0", "]", "[", "cEvaluator", ".", "MICRO_AVERAGE", "]", ",", "\n", "standard_list", "[", "0", "]", "[", "cEvaluator", ".", "MICRO_AVERAGE", "]", ",", "total_loss", ")", ")", "\n", "del", "precision_list", ",", "recall_list", ",", "fscore_list", ",", "right_list", ",", "predict_list", ",", "standard_list", "\n", "", "", "else", ":", "\n", "                ", "self", ".", "logger", ".", "warn", "(", "\n", "f\"{stage} performance at epoch {epoch}, \"", "\n", "f\"Loss is: {total_loss}.\"", "\n", ")", "\n", "", "del", "result", ",", "predict_probs", ",", "standard_labels", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "return", "total_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.NeuralNLP-NeuralClassifier-KAMG.train.get_data_loader": [[56, 82], ["torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "len", "globals", "globals", "globals", "globals"], "function", ["None"], ["def", "get_data_loader", "(", "dataset_name", ",", "collate_name", ",", "conf", ")", ":", "\n", "    ", "\"\"\"Get data loader: Train, Validate, Test\n    \"\"\"", "\n", "train_dataset", "=", "globals", "(", ")", "[", "dataset_name", "]", "(", "\n", "conf", ",", "conf", ".", "data", ".", "train_json_files", ",", "generate_dict", "=", "True", ")", "\n", "collate_fn", "=", "globals", "(", ")", "[", "collate_name", "]", "(", "conf", ",", "len", "(", "train_dataset", ".", "label_map", ")", ")", "\n", "\n", "train_data_loader", "=", "DataLoader", "(", "\n", "train_dataset", ",", "batch_size", "=", "conf", ".", "train", ".", "batch_size", ",", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "conf", ".", "data", ".", "num_worker", ",", "collate_fn", "=", "collate_fn", ",", "\n", "pin_memory", "=", "True", ")", "\n", "\n", "validate_dataset", "=", "globals", "(", ")", "[", "dataset_name", "]", "(", "\n", "conf", ",", "conf", ".", "data", ".", "validate_json_files", ")", "\n", "validate_data_loader", "=", "DataLoader", "(", "\n", "validate_dataset", ",", "batch_size", "=", "conf", ".", "eval", ".", "batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "conf", ".", "data", ".", "num_worker", ",", "collate_fn", "=", "collate_fn", ",", "\n", "pin_memory", "=", "True", ")", "\n", "\n", "test_dataset", "=", "globals", "(", ")", "[", "dataset_name", "]", "(", "conf", ",", "conf", ".", "data", ".", "test_json_files", ")", "\n", "test_data_loader", "=", "DataLoader", "(", "\n", "test_dataset", ",", "batch_size", "=", "conf", ".", "eval", ".", "batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "conf", ".", "data", ".", "num_worker", ",", "collate_fn", "=", "collate_fn", ",", "\n", "pin_memory", "=", "True", ")", "\n", "\n", "return", "train_data_loader", ",", "validate_data_loader", ",", "test_data_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.NeuralNLP-NeuralClassifier-KAMG.train.get_classification_model": [[84, 90], ["conf.device.startswith", "model.cuda", "globals"], "function", ["None"], ["", "def", "get_classification_model", "(", "model_name", ",", "dataset", ",", "conf", ")", ":", "\n", "    ", "\"\"\"Get classification model from configuration\n    \"\"\"", "\n", "model", "=", "globals", "(", ")", "[", "model_name", "]", "(", "dataset", ",", "conf", ")", "\n", "model", "=", "model", ".", "cuda", "(", "conf", ".", "device", ")", "if", "conf", ".", "device", ".", "startswith", "(", "\"cuda\"", ")", "else", "model", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.NeuralNLP-NeuralClassifier-KAMG.train.load_checkpoint": [[226, 233], ["torch.load", "model.load_state_dict", "optimizer.load_state_dict"], "function", ["None"], ["", "", "", "def", "load_checkpoint", "(", "file_name", ",", "conf", ",", "model", ",", "optimizer", ")", ":", "\n", "    ", "checkpoint", "=", "torch", ".", "load", "(", "file_name", ")", "\n", "conf", ".", "train", ".", "start_epoch", "=", "checkpoint", "[", "\"epoch\"", "]", "\n", "best_performance", "=", "checkpoint", "[", "\"best_performance\"", "]", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "\"state_dict\"", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "\"optimizer\"", "]", ")", "\n", "return", "best_performance", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.NeuralNLP-NeuralClassifier-KAMG.train.save_checkpoint": [[235, 238], ["torch.save", "str"], "function", ["home.repos.pwc.inspect_result.MemoriesJ_KAMG.evaluate.classification_evaluate.ClassificationEvaluator.save", "home.repos.pwc.inspect_result.MemoriesJ_KAMG.classification.attentive_convolution.AttentionType.str"], ["", "def", "save_checkpoint", "(", "state", ",", "file_prefix", ")", ":", "\n", "    ", "file_name", "=", "file_prefix", "+", "\"_\"", "+", "str", "(", "state", "[", "\"epoch\"", "]", ")", "\n", "torch", ".", "save", "(", "state", ",", "file_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.NeuralNLP-NeuralClassifier-KAMG.train.train": [[240, 295], ["util.Logger", "train.get_data_loader", "train.get_classification_model", "model.model_util.get_optimizer", "evaluate.classification_evaluate.ClassificationEvaluator", "os.path.join", "range", "shutil.copyfile", "train.load_checkpoint", "trainer.eval", "os.path.exists", "os.makedirs", "time.time", "trainer.train", "trainer.eval", "train.save_checkpoint", "util.Logger.info", "torch.cuda.empty_cache", "str", "globals", "globals", "len", "globals", "time.time", "str", "get_classification_model.state_dict", "model.model_util.get_optimizer.state_dict"], "function", ["home.repos.pwc.inspect_result.MemoriesJ_KAMG.NeuralNLP-NeuralClassifier-KAMG.train.get_data_loader", "home.repos.pwc.inspect_result.MemoriesJ_KAMG.NeuralNLP-NeuralClassifier-KAMG.train.get_classification_model", "home.repos.pwc.inspect_result.MemoriesJ_KAMG.model.model_util.get_optimizer", "home.repos.pwc.inspect_result.MemoriesJ_KAMG.NeuralNLP-NeuralClassifier-KAMG.train.load_checkpoint", "home.repos.pwc.inspect_result.MemoriesJ_KAMG.NeuralNLP-NeuralClassifier-KAMG.train.ClassificationTrainer.eval", "home.repos.pwc.inspect_result.MemoriesJ_KAMG.NeuralNLP-NeuralClassifier-KAMG.train.train", "home.repos.pwc.inspect_result.MemoriesJ_KAMG.NeuralNLP-NeuralClassifier-KAMG.train.ClassificationTrainer.eval", "home.repos.pwc.inspect_result.MemoriesJ_KAMG.NeuralNLP-NeuralClassifier-KAMG.train.save_checkpoint", "home.repos.pwc.inspect_result.MemoriesJ_KAMG.NeuralNLP-NeuralClassifier-KAMG.util.Logger.info", "home.repos.pwc.inspect_result.MemoriesJ_KAMG.classification.attentive_convolution.AttentionType.str", "home.repos.pwc.inspect_result.MemoriesJ_KAMG.classification.attentive_convolution.AttentionType.str"], ["", "def", "train", "(", "conf", ")", ":", "\n", "    ", "logger", "=", "util", ".", "Logger", "(", "conf", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "conf", ".", "checkpoint_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "conf", ".", "checkpoint_dir", ")", "\n", "", "model_name", "=", "conf", ".", "model_name", "\n", "dataset_name", "=", "\"ClassificationDataset\"", "\n", "collate_name", "=", "\"FastTextCollator\"", "if", "model_name", "==", "\"FastText\"", "else", "\"ClassificationCollator\"", "\n", "train_data_loader", ",", "validate_data_loader", ",", "test_data_loader", "=", "get_data_loader", "(", "dataset_name", ",", "collate_name", ",", "conf", ")", "\n", "empty_dataset", "=", "globals", "(", ")", "[", "dataset_name", "]", "(", "conf", ",", "[", "]", ",", "mode", "=", "\"train\"", ")", "\n", "model", "=", "get_classification_model", "(", "model_name", ",", "empty_dataset", ",", "conf", ")", "\n", "loss_fn", "=", "globals", "(", ")", "[", "\"ClassificationLoss\"", "]", "(", "\n", "label_size", "=", "len", "(", "empty_dataset", ".", "label_map", ")", ",", "loss_type", "=", "conf", ".", "train", ".", "loss_type", ")", "\n", "optimizer", "=", "get_optimizer", "(", "conf", ",", "model", ")", "\n", "evaluator", "=", "cEvaluator", "(", "conf", ".", "eval", ".", "dir", ")", "\n", "trainer", "=", "globals", "(", ")", "[", "\"ClassificationTrainer\"", "]", "(", "\n", "empty_dataset", ".", "label_map", ",", "logger", ",", "evaluator", ",", "conf", ",", "loss_fn", ")", "\n", "\n", "best_epoch", "=", "-", "1", "\n", "best_performance", "=", "math", ".", "inf", "\n", "model_file_prefix", "=", "os", ".", "path", ".", "join", "(", "conf", ".", "checkpoint_dir", ",", "model_name", ")", "\n", "# trainer.eval(", "\n", "#         validate_data_loader, model, optimizer, \"Validate\", 'Pre')", "\n", "for", "epoch", "in", "range", "(", "conf", ".", "train", ".", "start_epoch", ",", "\n", "conf", ".", "train", ".", "start_epoch", "+", "conf", ".", "train", ".", "num_epochs", ")", ":", "\n", "        ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "trainer", ".", "train", "(", "train_data_loader", ",", "model", ",", "optimizer", ",", "\"Train\"", ",", "epoch", ")", "\n", "# trainer.eval(train_data_loader, model, optimizer, \"Train\", epoch)", "\n", "performance", "=", "trainer", ".", "eval", "(", "\n", "validate_data_loader", ",", "model", ",", "optimizer", ",", "\"Validate\"", ",", "epoch", ")", "\n", "# trainer.eval(test_data_loader, model, optimizer, \"Test\", epoch)", "\n", "if", "performance", "<", "best_performance", ":", "# record the best model", "\n", "            ", "best_epoch", "=", "epoch", "\n", "best_performance", "=", "performance", "\n", "", "save_checkpoint", "(", "{", "\n", "'epoch'", ":", "epoch", ",", "\n", "'model_name'", ":", "model_name", ",", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'best_performance'", ":", "best_performance", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "model_file_prefix", ")", "\n", "time_used", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "logger", ".", "info", "(", "\"Epoch %d cost time: %d second\"", "%", "(", "epoch", ",", "time_used", ")", ")", "\n", "del", "performance", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n", "# best model on validateion set", "\n", "", "best_epoch_file_name", "=", "model_file_prefix", "+", "\"_\"", "+", "str", "(", "best_epoch", ")", "\n", "best_file_name", "=", "model_file_prefix", "+", "\"_best\"", "\n", "shutil", ".", "copyfile", "(", "best_epoch_file_name", ",", "best_file_name", ")", "\n", "\n", "load_checkpoint", "(", "model_file_prefix", "+", "\"_\"", "+", "str", "(", "best_epoch", ")", ",", "conf", ",", "model", ",", "\n", "optimizer", ")", "\n", "trainer", ".", "eval", "(", "test_data_loader", ",", "model", ",", "optimizer", ",", "\"Best test\"", ",", "best_epoch", ",", "show_evaluation", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.NeuralNLP-NeuralClassifier-KAMG.util.Type.str": [[27, 30], ["None"], "methods", ["None"], ["    ", "@", "classmethod", "\n", "def", "str", "(", "cls", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.NeuralNLP-NeuralClassifier-KAMG.util.ModeType.str": [[43, 46], ["None"], "methods", ["None"], ["@", "classmethod", "\n", "def", "str", "(", "cls", ")", ":", "\n", "        ", "return", "\",\"", ".", "join", "(", "[", "cls", ".", "TRAIN", ",", "cls", ".", "EVAL", ",", "cls", ".", "PREDICT", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.NeuralNLP-NeuralClassifier-KAMG.util.Logger.__new__": [[51, 55], ["object.__new__"], "methods", ["home.repos.pwc.inspect_result.MemoriesJ_KAMG.NeuralNLP-NeuralClassifier-KAMG.util.Logger.__new__"], ["def", "__new__", "(", "cls", ",", "*", "args", ",", "**", "kw", ")", ":", "\n", "        ", "if", "not", "cls", ".", "_instance", ":", "\n", "            ", "cls", ".", "_instance", "=", "super", "(", "Logger", ",", "cls", ")", ".", "__new__", "(", "cls", ")", "\n", "", "return", "cls", ".", "_instance", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.NeuralNLP-NeuralClassifier-KAMG.util.Logger.__init__": [[56, 74], ["logging.basicConfig", "os.path.exists", "os.makedirs", "os.path.join", "TypeError"], "methods", ["None"], ["", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "if", "config", ".", "log", ".", "log_level", "==", "\"debug\"", ":", "\n", "            ", "logging_level", "=", "logging", ".", "DEBUG", "\n", "", "elif", "config", ".", "log", ".", "log_level", "==", "\"info\"", ":", "\n", "            ", "logging_level", "=", "logging", ".", "INFO", "\n", "", "elif", "config", ".", "log", ".", "log_level", "==", "\"warn\"", ":", "\n", "            ", "logging_level", "=", "logging", ".", "WARN", "\n", "", "elif", "config", ".", "log", ".", "log_level", "==", "\"error\"", ":", "\n", "            ", "logging_level", "=", "logging", ".", "ERROR", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "\n", "\"No logging type named %s, candidate is: info, debug, error\"", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "config", ".", "log", ".", "logger_file_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "config", ".", "log", ".", "logger_file_dir", ")", "\n", "", "logging", ".", "basicConfig", "(", "filename", "=", "os", ".", "path", ".", "join", "(", "config", ".", "log", ".", "logger_file_dir", ",", "config", ".", "log", ".", "logger_file", ")", ",", "\n", "level", "=", "logging_level", ",", "\n", "format", "=", "'%(asctime)s : %(levelname)s  %(message)s'", ",", "\n", "filemode", "=", "\"a\"", ",", "datefmt", "=", "'%Y-%m-%d %H:%M:%S'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.NeuralNLP-NeuralClassifier-KAMG.util.Logger.debug": [[75, 82], ["logging.debug", "sys.stdout.write"], "methods", ["home.repos.pwc.inspect_result.MemoriesJ_KAMG.NeuralNLP-NeuralClassifier-KAMG.util.Logger.debug"], ["", "@", "staticmethod", "\n", "def", "debug", "(", "msg", ")", ":", "\n", "        ", "\"\"\"Log debug message\n            msg: Message to log\n        \"\"\"", "\n", "logging", ".", "debug", "(", "msg", ")", "\n", "sys", ".", "stdout", ".", "write", "(", "msg", "+", "\"\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.NeuralNLP-NeuralClassifier-KAMG.util.Logger.info": [[83, 90], ["logging.info", "sys.stdout.write"], "methods", ["home.repos.pwc.inspect_result.MemoriesJ_KAMG.NeuralNLP-NeuralClassifier-KAMG.util.Logger.info"], ["", "@", "staticmethod", "\n", "def", "info", "(", "msg", ")", ":", "\n", "        ", "\"\"\"\"Log info message\n            msg: Message to log\n        \"\"\"", "\n", "logging", ".", "info", "(", "msg", ")", "\n", "sys", ".", "stdout", ".", "write", "(", "msg", "+", "\"\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.NeuralNLP-NeuralClassifier-KAMG.util.Logger.warn": [[91, 98], ["logging.warning", "sys.stdout.write"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "warn", "(", "msg", ")", ":", "\n", "        ", "\"\"\"Log warn message\n            msg: Message to log\n        \"\"\"", "\n", "logging", ".", "warning", "(", "msg", ")", "\n", "sys", ".", "stdout", ".", "write", "(", "msg", "+", "\"\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.NeuralNLP-NeuralClassifier-KAMG.util.Logger.error": [[99, 106], ["logging.error", "sys.stderr.write"], "methods", ["home.repos.pwc.inspect_result.MemoriesJ_KAMG.NeuralNLP-NeuralClassifier-KAMG.util.Logger.error"], ["", "@", "staticmethod", "\n", "def", "error", "(", "msg", ")", ":", "\n", "        ", "\"\"\"Log error message\n            msg: Message to log\n        \"\"\"", "\n", "logging", ".", "error", "(", "msg", ")", "\n", "sys", ".", "stderr", ".", "write", "(", "msg", "+", "\"\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.NeuralNLP-NeuralClassifier-KAMG.util.seed_all": [[108, 116], ["torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed_all", "numpy.random.seed", "random.seed"], "function", ["None"], ["", "", "def", "seed_all", "(", "seed", ")", ":", "\n", "    ", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "", ""]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.dataset.classification_dataset.ClassificationDataset.__init__": [[58, 62], ["dataset.dataset.DatasetBase.__init__"], "methods", ["home.repos.pwc.inspect_result.MemoriesJ_KAMG.evaluate.classification_evaluate.ClassificationEvaluator.__init__"], ["def", "__init__", "(", "self", ",", "config", ",", "json_files", ",", "generate_dict", "=", "False", ",", "\n", "mode", "=", "ModeType", ".", "EVAL", ")", ":", "\n", "        ", "super", "(", "ClassificationDataset", ",", "self", ")", ".", "__init__", "(", "\n", "config", ",", "json_files", ",", "generate_dict", "=", "generate_dict", ",", "mode", "=", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.dataset.classification_dataset.ClassificationDataset._init_dict": [[63, 134], ["dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "classification_dataset.ClassificationDataset.dict_files.append"], "methods", ["None"], ["", "def", "_init_dict", "(", "self", ")", ":", "\n", "        ", "self", ".", "dict_names", "=", "[", "self", ".", "DOC_LABEL", ",", "self", ".", "DOC_TOKEN", ",", "self", ".", "DOC_CHAR", ",", "\n", "self", ".", "DOC_TOKEN_NGRAM", ",", "self", ".", "DOC_KEYWORD", ",", "self", ".", "DOC_TOPIC", "]", "\n", "\n", "self", ".", "dict_files", "=", "[", "]", "\n", "for", "dict_name", "in", "self", ".", "dict_names", ":", "\n", "            ", "self", ".", "dict_files", ".", "append", "(", "\n", "self", ".", "config", ".", "data", ".", "dict_dir", "+", "\"/\"", "+", "dict_name", "+", "\".dict\"", ")", "\n", "", "self", ".", "label_dict_file", "=", "self", ".", "dict_files", "[", "0", "]", "\n", "\n", "# By default keep all labels", "\n", "self", ".", "min_count", "=", "[", "0", ",", "\n", "self", ".", "config", ".", "feature", ".", "min_token_count", ",", "\n", "self", ".", "config", ".", "feature", ".", "min_char_count", ",", "\n", "self", ".", "config", ".", "feature", ".", "min_token_ngram_count", ",", "\n", "self", ".", "config", ".", "feature", ".", "min_keyword_count", ",", "\n", "self", ".", "config", ".", "feature", ".", "min_topic_count", "]", "\n", "\n", "# By default keep all labels", "\n", "self", ".", "max_dict_size", "=", "[", "self", ".", "BIG_VALUE", ",", "\n", "self", ".", "config", ".", "feature", ".", "max_token_dict_size", ",", "\n", "self", ".", "config", ".", "feature", ".", "max_char_dict_size", ",", "\n", "self", ".", "config", ".", "feature", ".", "max_token_ngram_dict_size", ",", "\n", "self", ".", "config", ".", "feature", ".", "max_keyword_dict_size", ",", "\n", "self", ".", "config", ".", "feature", ".", "max_topic_dict_size", "]", "\n", "\n", "self", ".", "max_sequence_length", "=", "[", "\n", "self", ".", "config", ".", "feature", ".", "max_token_len", ",", "\n", "self", ".", "config", ".", "feature", ".", "max_char_len", "]", "\n", "\n", "# When generating dict, the following map store vocab count.", "\n", "# Then clear dict and load vocab of word index", "\n", "self", ".", "label_map", "=", "dict", "(", ")", "\n", "self", ".", "token_map", "=", "dict", "(", ")", "\n", "self", ".", "char_map", "=", "dict", "(", ")", "\n", "self", ".", "token_ngram_map", "=", "dict", "(", ")", "\n", "self", ".", "keyword_map", "=", "dict", "(", ")", "\n", "self", ".", "topic_map", "=", "dict", "(", ")", "\n", "self", ".", "dicts", "=", "[", "self", ".", "label_map", ",", "self", ".", "token_map", ",", "self", ".", "char_map", ",", "\n", "self", ".", "token_ngram_map", ",", "self", ".", "keyword_map", ",", "self", ".", "topic_map", "]", "\n", "\n", "# Save sorted dict according to the count", "\n", "self", ".", "label_count_list", "=", "[", "]", "\n", "self", ".", "token_count_list", "=", "[", "]", "\n", "self", ".", "char_count_list", "=", "[", "]", "\n", "self", ".", "token_ngram_count_list", "=", "[", "]", "\n", "self", ".", "keyword_count_list", "=", "[", "]", "\n", "self", ".", "topic_count_list", "=", "[", "]", "\n", "self", ".", "count_list", "=", "[", "self", ".", "label_count_list", ",", "self", ".", "token_count_list", ",", "\n", "self", ".", "char_count_list", ",", "self", ".", "token_ngram_count_list", ",", "\n", "self", ".", "keyword_count_list", ",", "self", ".", "topic_count_list", "]", "\n", "\n", "self", ".", "id_to_label_map", "=", "dict", "(", ")", "\n", "self", ".", "id_to_token_map", "=", "dict", "(", ")", "\n", "self", ".", "id_to_char_map", "=", "dict", "(", ")", "\n", "self", ".", "id_to_token_gram_map", "=", "dict", "(", ")", "\n", "self", ".", "id_to_keyword_map", "=", "dict", "(", ")", "\n", "self", ".", "id_to_topic_map", "=", "dict", "(", ")", "\n", "self", ".", "id_to_vocab_dict_list", "=", "[", "\n", "self", ".", "id_to_label_map", ",", "self", ".", "id_to_token_map", ",", "self", ".", "id_to_char_map", ",", "\n", "self", ".", "id_to_token_gram_map", ",", "self", ".", "id_to_keyword_map", ",", "\n", "self", ".", "id_to_topic_map", "]", "\n", "\n", "self", ".", "pretrained_dict_names", "=", "[", "self", ".", "DOC_TOKEN", ",", "self", ".", "DOC_KEYWORD", "]", "\n", "self", ".", "pretrained_dict_files", "=", "[", "self", ".", "config", ".", "feature", ".", "token_pretrained_file", ",", "\n", "self", ".", "config", ".", "feature", ".", "keyword_pretrained_file", "]", "\n", "self", ".", "pretrained_min_count", "=", "[", "self", ".", "config", ".", "feature", ".", "min_token_count", ",", "\n", "self", ".", "config", ".", "feature", ".", "min_keyword_count", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.dataset.classification_dataset.ClassificationDataset._insert_vocab": [[135, 152], ["classification_dataset.ClassificationDataset._insert_sequence_vocab", "classification_dataset.ClassificationDataset._insert_sequence_tokens", "classification_dataset.ClassificationDataset._insert_sequence_vocab", "classification_dataset.ClassificationDataset._insert_sequence_vocab"], "methods", ["home.repos.pwc.inspect_result.MemoriesJ_KAMG.dataset.dataset.DatasetBase._insert_sequence_vocab", "home.repos.pwc.inspect_result.MemoriesJ_KAMG.dataset.dataset.DatasetBase._insert_sequence_tokens", "home.repos.pwc.inspect_result.MemoriesJ_KAMG.dataset.dataset.DatasetBase._insert_sequence_vocab", "home.repos.pwc.inspect_result.MemoriesJ_KAMG.dataset.dataset.DatasetBase._insert_sequence_vocab"], ["", "def", "_insert_vocab", "(", "self", ",", "json_obj", ",", "mode", "=", "InsertVocabMode", ".", "ALL", ")", ":", "\n", "        ", "\"\"\"Insert vocab to dict\n        \"\"\"", "\n", "if", "mode", "==", "InsertVocabMode", ".", "ALL", "or", "mode", "==", "InsertVocabMode", ".", "LABEL", ":", "\n", "            ", "doc_labels", "=", "json_obj", "[", "self", ".", "DOC_LABEL", "]", "\n", "self", ".", "_insert_sequence_vocab", "(", "doc_labels", ",", "self", ".", "label_map", ")", "\n", "", "if", "mode", "==", "InsertVocabMode", ".", "ALL", "or", "mode", "==", "InsertVocabMode", ".", "OTHER", ":", "\n", "            ", "doc_tokens", "=", "json_obj", "[", "self", ".", "DOC_TOKEN", "]", "[", "0", ":", "self", ".", "config", ".", "feature", ".", "max_token_len", "]", "\n", "doc_keywords", "=", "json_obj", "[", "self", ".", "DOC_KEYWORD", "]", "\n", "doc_topics", "=", "json_obj", "[", "self", ".", "DOC_TOPIC", "]", "\n", "\n", "self", ".", "_insert_sequence_tokens", "(", "\n", "doc_tokens", ",", "self", ".", "token_map", ",", "self", ".", "token_ngram_map", ",", "self", ".", "char_map", ",", "\n", "self", ".", "config", ".", "feature", ".", "token_ngram", ")", "\n", "self", ".", "_insert_sequence_vocab", "(", "doc_keywords", ",", "self", ".", "keyword_map", ")", "\n", "self", ".", "_insert_sequence_vocab", "(", "doc_topics", ",", "self", ".", "topic_map", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.dataset.classification_dataset.ClassificationDataset._get_vocab_id_list": [[153, 175], ["classification_dataset.ClassificationDataset._token_to_id", "classification_dataset.ClassificationDataset._vocab_to_id", "classification_dataset.ClassificationDataset._vocab_to_id", "classification_dataset.ClassificationDataset._label_to_id"], "methods", ["home.repos.pwc.inspect_result.MemoriesJ_KAMG.dataset.dataset.DatasetBase._token_to_id", "home.repos.pwc.inspect_result.MemoriesJ_KAMG.dataset.dataset.DatasetBase._vocab_to_id", "home.repos.pwc.inspect_result.MemoriesJ_KAMG.dataset.dataset.DatasetBase._vocab_to_id", "home.repos.pwc.inspect_result.MemoriesJ_KAMG.dataset.dataset.DatasetBase._label_to_id"], ["", "", "def", "_get_vocab_id_list", "(", "self", ",", "json_obj", ")", ":", "\n", "        ", "\"\"\"Use dict to convert all vocabs to ids\n        \"\"\"", "\n", "doc_labels", "=", "json_obj", "[", "self", ".", "DOC_LABEL", "]", "\n", "doc_tokens", "=", "json_obj", "[", "self", ".", "DOC_TOKEN", "]", "[", "0", ":", "self", ".", "config", ".", "feature", ".", "max_token_len", "]", "\n", "doc_keywords", "=", "json_obj", "[", "self", ".", "DOC_KEYWORD", "]", "\n", "doc_topics", "=", "json_obj", "[", "self", ".", "DOC_TOPIC", "]", "\n", "\n", "token_ids", ",", "char_ids", ",", "char_in_token_ids", ",", "token_ngram_ids", "=", "self", ".", "_token_to_id", "(", "doc_tokens", ",", "self", ".", "token_map", ",", "self", ".", "char_map", ",", "\n", "self", ".", "config", ".", "feature", ".", "token_ngram", ",", "\n", "self", ".", "token_ngram_map", ",", "\n", "self", ".", "config", ".", "feature", ".", "max_char_len", ",", "\n", "self", ".", "config", ".", "feature", ".", "max_char_len_per_token", ")", "\n", "return", "{", "self", ".", "DOC_LABEL", ":", "self", ".", "_label_to_id", "(", "doc_labels", ",", "self", ".", "label_map", ")", "if", "self", ".", "model_mode", "!=", "ModeType", ".", "PREDICT", "else", "[", "0", "]", ",", "\n", "self", ".", "DOC_TOKEN", ":", "token_ids", ",", "self", ".", "DOC_CHAR", ":", "char_ids", ",", "\n", "self", ".", "DOC_CHAR_IN_TOKEN", ":", "char_in_token_ids", ",", "\n", "self", ".", "DOC_TOKEN_NGRAM", ":", "token_ngram_ids", ",", "\n", "self", ".", "DOC_KEYWORD", ":", "\n", "self", ".", "_vocab_to_id", "(", "doc_keywords", ",", "self", ".", "keyword_map", ")", ",", "\n", "self", ".", "DOC_TOPIC", ":", "self", ".", "_vocab_to_id", "(", "doc_topics", ",", "self", ".", "topic_map", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.dataset.classification_dataset.ClassificationDataset._group_label": [[176, 213], ["os.path.join", "classification_dataset.ClassificationDataset.logger.info", "classification_dataset.ClassificationDataset.logger.info", "classification_dataset.ClassificationDataset.logger.info", "os.path.exists", "open", "json.loads", "list", "open", "f_out.write", "os.path.exists", "os.makedirs", "open", "f_out.write", "f_in.read", "freq_few_labels.extend", "set().difference", "json.dumps", "json.dumps", "len", "label_group_dict[].append", "label_group_dict[].append", "set"], "methods", ["home.repos.pwc.inspect_result.MemoriesJ_KAMG.NeuralNLP-NeuralClassifier-KAMG.util.Logger.info", "home.repos.pwc.inspect_result.MemoriesJ_KAMG.NeuralNLP-NeuralClassifier-KAMG.util.Logger.info", "home.repos.pwc.inspect_result.MemoriesJ_KAMG.NeuralNLP-NeuralClassifier-KAMG.util.Logger.info"], ["", "def", "_group_label", "(", "self", ",", "is_zero", "=", "False", ")", ":", "\n", "\n", "        ", "file_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "config", ".", "data", ".", "dict_dir", ",", "\"{}.json\"", ".", "format", "(", "self", ".", "DOC_LABEL_GROUP", ")", ")", "\n", "if", "is_zero", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "exists", "(", "file_path", ")", ":", "\n", "                ", "raise", "FileNotFoundError", "\n", "", "with", "open", "(", "file_path", ",", "mode", "=", "'r'", ")", "as", "f_in", ":", "\n", "                ", "freq_few_label_group_dict", "=", "json", ".", "loads", "(", "f_in", ".", "read", "(", ")", ")", "\n", "freq_few_labels", "=", "[", "]", "\n", "label_group_dict", "=", "{", "}", "\n", "for", "k", "in", "[", "self", ".", "config", ".", "data", ".", "label_groups", ".", "frequent", ",", "self", ".", "config", ".", "data", ".", "label_groups", ".", "few", "]", ":", "\n", "                    ", "freq_few_labels", ".", "extend", "(", "freq_few_label_group_dict", "[", "k", "]", ")", "\n", "label_group_dict", "[", "k", "]", "=", "freq_few_label_group_dict", "[", "k", "]", "\n", "", "label_group_dict", "[", "self", ".", "config", ".", "data", ".", "label_groups", ".", "zero", "]", "=", "list", "(", "set", "(", "self", ".", "label_map", ")", ".", "difference", "(", "freq_few_labels", ")", ")", "\n", "", "with", "open", "(", "file_path", ",", "mode", "=", "'w'", ")", "as", "f_out", ":", "\n", "                ", "f_out", ".", "write", "(", "json", ".", "dumps", "(", "label_group_dict", ")", ")", "\n", "\n", "", "self", ".", "logger", ".", "info", "(", "\"Generating zero label groups. \"", ")", "\n", "\n", "", "else", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "config", ".", "data", ".", "dict_dir", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "self", ".", "config", ".", "data", ".", "dict_dir", ")", "\n", "", "with", "open", "(", "file_path", ",", "mode", "=", "'w'", ")", "as", "f_out", ":", "\n", "                ", "label_group_dict", "=", "{", "self", ".", "config", ".", "data", ".", "label_groups", ".", "frequent", ":", "[", "]", ",", "\n", "self", ".", "config", ".", "data", ".", "label_groups", ".", "few", ":", "[", "]", "}", "\n", "for", "label", "in", "self", ".", "label_map", ":", "\n", "                    ", "if", "self", ".", "label_map", "[", "label", "]", ">", "self", ".", "config", ".", "data", ".", "label_group_threshold", ":", "\n", "                        ", "label_group_dict", "[", "self", ".", "config", ".", "data", ".", "label_groups", ".", "frequent", "]", ".", "append", "(", "label", ")", "\n", "", "else", ":", "\n", "                        ", "label_group_dict", "[", "self", ".", "config", ".", "data", ".", "label_groups", ".", "few", "]", ".", "append", "(", "label", ")", "\n", "", "", "f_out", ".", "write", "(", "json", ".", "dumps", "(", "label_group_dict", ")", ")", "\n", "\n", "", "self", ".", "logger", ".", "info", "(", "\"Generating frequent and few label groups. \"", ")", "\n", "\n", "", "for", "k", "in", "label_group_dict", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "\"Number of labels of {} group is: {}. \"", ".", "format", "(", "k", ",", "len", "(", "label_group_dict", "[", "k", "]", ")", ")", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.dataset.data_preprocessor.clean_str": [[25, 47], ["re.sub.strip().strip", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub.strip().lower", "re.sub.strip", "re.sub.strip"], "function", ["None"], ["def", "clean_str", "(", "string", ")", ":", "\n", "    ", "\"\"\"\n    Tokenization/string cleaning for all datasets except for SST.\n    Original taken from https://github.com/yoonkim/CNN_sentence/blob/master/process_data.py\n    \"\"\"", "\n", "string", "=", "string", ".", "strip", "(", ")", ".", "strip", "(", "'\"'", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"[^A-Za-z0-9(),!?\\.\\'\\`]\"", ",", "\" \"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\'s\"", ",", "\" \\'s\"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\'ve\"", ",", "\" \\'ve\"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"n\\'t\"", ",", "\" n\\'t\"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\'re\"", ",", "\" \\'re\"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\'d\"", ",", "\" \\'d\"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\'ll\"", ",", "\" \\'ll\"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\",\"", ",", "\" , \"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\.\"", ",", "\" \\. \"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\\"\"", ",", "\" , \"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"!\"", ",", "\" ! \"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\(\"", ",", "\" \\( \"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\)\"", ",", "\" \\) \"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\?\"", ",", "\" \\? \"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\s{2,}\"", ",", "\" \"", ",", "string", ")", "\n", "return", "string", ".", "strip", "(", ")", ".", "lower", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.dataset.data_preprocessor.convert_multi_slots_to_single_slots": [[49, 57], ["len"], "function", ["None"], ["", "def", "convert_multi_slots_to_single_slots", "(", "slots", ")", ":", "\n", "    ", "\"\"\"\n    covert the data which text_data are saved as multi-slots, e.g()\n    \"\"\"", "\n", "if", "len", "(", "slots", ")", "==", "1", ":", "\n", "        ", "return", "slots", "[", "0", "]", "\n", "", "else", ":", "\n", "        ", "return", "' '", ".", "join", "(", "slots", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.dataset.data_preprocessor.preprocess": [[59, 73], ["open", "open", "csv.reader", "data_preprocessor.convert_multi_slots_to_single_slots", "data_preprocessor.clean_str", "dict", "clean_str.split", "json.dumps", "fout.write"], "function", ["home.repos.pwc.inspect_result.MemoriesJ_KAMG.dataset.data_preprocessor.convert_multi_slots_to_single_slots", "home.repos.pwc.inspect_result.MemoriesJ_KAMG.dataset.data_preprocessor.clean_str"], ["", "", "def", "preprocess", "(", "csv_file", ",", "json_file", ")", ":", "\n", "    ", "with", "open", "(", "json_file", ",", "\"w\"", ")", "as", "fout", ":", "\n", "        ", "with", "open", "(", "csv_file", ",", "'rb'", ")", "as", "fin", ":", "\n", "            ", "lines", "=", "csv", ".", "reader", "(", "fin", ")", "\n", "for", "items", "in", "lines", ":", "\n", "                ", "text_data", "=", "convert_multi_slots_to_single_slots", "(", "items", "[", "1", ":", "]", ")", "\n", "text_data", "=", "clean_str", "(", "text_data", ")", "\n", "sample", "=", "dict", "(", ")", "\n", "sample", "[", "'doc_label'", "]", "=", "[", "items", "[", "0", "]", "]", "\n", "sample", "[", "'doc_token'", "]", "=", "text_data", ".", "split", "(", "\" \"", ")", "\n", "sample", "[", "'doc_keyword'", "]", "=", "[", "]", "\n", "sample", "[", "'doc_topic'", "]", "=", "[", "]", "\n", "json_str", "=", "json", ".", "dumps", "(", "sample", ",", "ensure_ascii", "=", "False", ")", "\n", "fout", ".", "write", "(", "json_str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.dataset.collator.Collator.__init__": [[24, 26], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "device", ")", ":", "\n", "        ", "self", ".", "device", "=", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.dataset.collator.Collator.__call__": [[27, 29], ["None"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "batch", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.dataset.collator.ClassificationType.str": [[35, 38], ["None"], "methods", ["None"], ["@", "classmethod", "\n", "def", "str", "(", "cls", ")", ":", "\n", "        ", "return", "\",\"", ".", "join", "(", "[", "cls", ".", "SINGLE_LABEL", ",", "cls", ".", "MULTI_LABEL", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.dataset.collator.ClassificationCollator.__init__": [[41, 57], ["collator.Collator.__init__", "collator.ClassificationCollator._get_label_id", "collator.ClassificationCollator._get_graph_dataset"], "methods", ["home.repos.pwc.inspect_result.MemoriesJ_KAMG.evaluate.classification_evaluate.ClassificationEvaluator.__init__", "home.repos.pwc.inspect_result.MemoriesJ_KAMG.dataset.collator.ClassificationCollator._get_label_id", "home.repos.pwc.inspect_result.MemoriesJ_KAMG.dataset.collator.ClassificationCollator._get_graph_dataset"], ["    ", "def", "__init__", "(", "self", ",", "conf", ",", "label_size", ")", ":", "\n", "        ", "super", "(", "ClassificationCollator", ",", "self", ")", ".", "__init__", "(", "conf", ".", "device", ")", "\n", "self", ".", "classification_type", "=", "conf", ".", "task_info", ".", "label_type", "\n", "min_seq", "=", "1", "\n", "if", "conf", ".", "model_name", "==", "\"TextCNN\"", ":", "\n", "            ", "min_seq", "=", "conf", ".", "TextCNN", ".", "top_k_max_pooling", "\n", "", "elif", "conf", ".", "model_name", "==", "\"DPCNN\"", ":", "\n", "            ", "min_seq", "=", "conf", ".", "DPCNN", ".", "kernel_size", "*", "2", "**", "conf", ".", "DPCNN", ".", "blocks", "\n", "", "elif", "conf", ".", "model_name", "==", "\"RegionEmbedding\"", ":", "\n", "            ", "min_seq", "=", "conf", ".", "feature", ".", "max_token_len", "\n", "", "self", ".", "min_token_max_len", "=", "min_seq", "\n", "self", ".", "min_char_max_len", "=", "min_seq", "\n", "self", ".", "label_size", "=", "label_size", "\n", "self", ".", "conf", "=", "conf", "\n", "self", ".", "_get_label_id", "(", ")", "\n", "self", ".", "_get_graph_dataset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.dataset.collator.ClassificationCollator._get_label_id": [[58, 61], ["torch.arange"], "methods", ["None"], ["", "def", "_get_label_id", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "conf", ".", "label_embedding", ".", "use_label_embedding", ":", "\n", "            ", "self", ".", "label_id", "=", "torch", ".", "arange", "(", "0", ",", "self", ".", "label_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.dataset.collator.ClassificationCollator._get_graph_dataset": [[62, 68], ["dataset.graph_dataset.GraphDataSet"], "methods", ["None"], ["", "", "def", "_get_graph_dataset", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "conf", ".", "data", ".", "label_relation_files", ":", "\n", "            ", "self", ".", "graph_dataset", "=", "GraphDataSet", "(", "\n", "adj_path", "=", "[", "self", ".", "conf", ".", "data", ".", "label_relation_candidate_files", "[", "f", "]", "for", "f", "in", "self", ".", "conf", ".", "data", ".", "label_relation_files", "]", ",", "\n", "node_emb_path", "=", "''", ",", "\n", "conf", "=", "self", ".", "conf", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.dataset.collator.ClassificationCollator._get_multi_hot_label": [[69, 84], ["len", "max", "range", "torch.Tensor().long", "torch.zeros().scatter_", "len", "range", "torch.Tensor", "torch.zeros", "range", "len"], "methods", ["None"], ["", "", "def", "_get_multi_hot_label", "(", "self", ",", "doc_labels", ")", ":", "\n", "        ", "\"\"\"For multi-label classification\n        Generate multi-hot for input labels\n        e.g. input: [[0,1], [2]]\n             output: [[1,1,0], [0,0,1]]\n        \"\"\"", "\n", "batch_size", "=", "len", "(", "doc_labels", ")", "\n", "max_label_num", "=", "max", "(", "[", "len", "(", "x", ")", "for", "x", "in", "doc_labels", "]", ")", "\n", "doc_labels_extend", "=", "[", "[", "doc_labels", "[", "i", "]", "[", "0", "]", "for", "_", "in", "range", "(", "max_label_num", ")", "]", "for", "i", "in", "range", "(", "batch_size", ")", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "batch_size", ")", ":", "\n", "            ", "doc_labels_extend", "[", "i", "]", "[", "0", ":", "len", "(", "doc_labels", "[", "i", "]", ")", "]", "=", "doc_labels", "[", "i", "]", "\n", "", "y", "=", "torch", ".", "Tensor", "(", "doc_labels_extend", ")", ".", "long", "(", ")", "\n", "y_onehot", "=", "torch", ".", "zeros", "(", "batch_size", ",", "self", ".", "label_size", ")", ".", "scatter_", "(", "1", ",", "y", ",", "1", ")", "\n", "return", "y_onehot", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.dataset.collator.ClassificationCollator._append_label": [[85, 96], ["doc_labels.extend", "len", "doc_labels.append", "TypeError", "collator.ClassificationType.str"], "methods", ["home.repos.pwc.inspect_result.MemoriesJ_KAMG.classification.attentive_convolution.AttentionType.str"], ["", "def", "_append_label", "(", "self", ",", "doc_labels", ",", "sample", ")", ":", "\n", "        ", "if", "self", ".", "classification_type", "==", "ClassificationType", ".", "SINGLE_LABEL", ":", "\n", "            ", "assert", "len", "(", "sample", "[", "cDataset", ".", "DOC_LABEL", "]", ")", "==", "1", "\n", "doc_labels", ".", "extend", "(", "sample", "[", "cDataset", ".", "DOC_LABEL", "]", ")", "\n", "", "elif", "self", ".", "classification_type", "==", "ClassificationType", ".", "MULTI_LABEL", ":", "\n", "            ", "doc_labels", ".", "append", "(", "sample", "[", "cDataset", ".", "DOC_LABEL", "]", ")", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "\n", "\"Unsupported classification type: %s. Supported \"", "\n", "\"classification type is: %s\"", "%", "\n", "(", "self", ".", "classification_type", ",", "ClassificationType", ".", "str", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.dataset.collator.ClassificationCollator.__call__": [[97, 195], ["enumerate", "enumerate", "vocabs.append", "max", "max", "collator.ClassificationCollator._append_label", "collator.ClassificationCollator.__call__._append_vocab"], "methods", ["home.repos.pwc.inspect_result.MemoriesJ_KAMG.dataset.collator.ClassificationCollator._append_label"], ["", "", "def", "__call__", "(", "self", ",", "batch", ")", ":", "\n", "        ", "def", "_append_vocab", "(", "ori_vocabs", ",", "vocabs", ",", "max_len", ")", ":", "\n", "            ", "padding", "=", "[", "cDataset", ".", "VOCAB_PADDING", "]", "*", "(", "max_len", "-", "len", "(", "ori_vocabs", ")", ")", "\n", "vocabs", ".", "append", "(", "ori_vocabs", "+", "padding", ")", "\n", "\n", "", "doc_labels", "=", "[", "]", "\n", "\n", "doc_token", "=", "[", "]", "\n", "doc_char", "=", "[", "]", "\n", "doc_char_in_token", "=", "[", "]", "\n", "\n", "doc_token_len", "=", "[", "]", "\n", "doc_char_len", "=", "[", "]", "\n", "doc_char_in_token_len", "=", "[", "]", "\n", "\n", "doc_token_max_len", "=", "self", ".", "min_token_max_len", "\n", "doc_char_max_len", "=", "self", ".", "min_char_max_len", "\n", "doc_char_in_token_max_len", "=", "0", "\n", "\n", "for", "_", ",", "value", "in", "enumerate", "(", "batch", ")", ":", "\n", "            ", "doc_token_max_len", "=", "max", "(", "doc_token_max_len", ",", "\n", "len", "(", "value", "[", "cDataset", ".", "DOC_TOKEN", "]", ")", ")", "\n", "doc_char_max_len", "=", "max", "(", "doc_char_max_len", ",", "\n", "len", "(", "value", "[", "cDataset", ".", "DOC_CHAR", "]", ")", ")", "\n", "for", "char_in_token", "in", "value", "[", "cDataset", ".", "DOC_CHAR_IN_TOKEN", "]", ":", "\n", "                ", "doc_char_in_token_max_len", "=", "max", "(", "doc_char_in_token_max_len", ",", "\n", "len", "(", "char_in_token", ")", ")", "\n", "\n", "", "", "for", "_", ",", "value", "in", "enumerate", "(", "batch", ")", ":", "\n", "            ", "self", ".", "_append_label", "(", "doc_labels", ",", "value", ")", "\n", "_append_vocab", "(", "value", "[", "cDataset", ".", "DOC_TOKEN", "]", ",", "doc_token", ",", "\n", "doc_token_max_len", ")", "\n", "doc_token_len", ".", "append", "(", "len", "(", "value", "[", "cDataset", ".", "DOC_TOKEN", "]", ")", ")", "\n", "_append_vocab", "(", "value", "[", "cDataset", ".", "DOC_CHAR", "]", ",", "doc_char", ",", "doc_char_max_len", ")", "\n", "doc_char_len", ".", "append", "(", "len", "(", "value", "[", "cDataset", ".", "DOC_CHAR", "]", ")", ")", "\n", "\n", "doc_char_in_token_len_tmp", "=", "[", "]", "\n", "for", "char_in_token", "in", "value", "[", "cDataset", ".", "DOC_CHAR_IN_TOKEN", "]", ":", "\n", "                ", "_append_vocab", "(", "char_in_token", ",", "doc_char_in_token", ",", "\n", "doc_char_in_token_max_len", ")", "\n", "doc_char_in_token_len_tmp", ".", "append", "(", "len", "(", "char_in_token", ")", ")", "\n", "\n", "", "padding", "=", "[", "cDataset", ".", "VOCAB_PADDING", "]", "*", "doc_char_in_token_max_len", "\n", "for", "_", "in", "range", "(", "\n", "len", "(", "value", "[", "cDataset", ".", "DOC_CHAR_IN_TOKEN", "]", ")", ",", "doc_token_max_len", ")", ":", "\n", "                ", "doc_char_in_token", ".", "append", "(", "padding", ")", "\n", "doc_char_in_token_len_tmp", ".", "append", "(", "0", ")", "\n", "", "doc_char_in_token_len", ".", "append", "(", "doc_char_in_token_len_tmp", ")", "\n", "\n", "", "if", "self", ".", "classification_type", "==", "ClassificationType", ".", "SINGLE_LABEL", ":", "\n", "            ", "tensor_doc_labels", "=", "torch", ".", "tensor", "(", "doc_labels", ")", "\n", "doc_label_list", "=", "[", "[", "x", "]", "for", "x", "in", "doc_labels", "]", "\n", "", "elif", "self", ".", "classification_type", "==", "ClassificationType", ".", "MULTI_LABEL", ":", "\n", "            ", "tensor_doc_labels", "=", "self", ".", "_get_multi_hot_label", "(", "doc_labels", ")", "\n", "doc_label_list", "=", "doc_labels", "\n", "\n", "", "batch_map", "=", "{", "\n", "cDataset", ".", "DOC_LABEL", ":", "tensor_doc_labels", ",", "\n", "cDataset", ".", "DOC_LABEL_LIST", ":", "doc_label_list", ",", "\n", "\n", "cDataset", ".", "DOC_TOKEN", ":", "torch", ".", "tensor", "(", "doc_token", ")", ",", "\n", "cDataset", ".", "DOC_CHAR", ":", "torch", ".", "tensor", "(", "doc_char", ")", ",", "\n", "cDataset", ".", "DOC_CHAR_IN_TOKEN", ":", "torch", ".", "tensor", "(", "doc_char_in_token", ")", ",", "\n", "\n", "cDataset", ".", "DOC_TOKEN_MASK", ":", "torch", ".", "tensor", "(", "doc_token", ")", ".", "gt", "(", "0", ")", ".", "float", "(", ")", ",", "\n", "cDataset", ".", "DOC_CHAR_MASK", ":", "torch", ".", "tensor", "(", "doc_char", ")", ".", "gt", "(", "0", ")", ".", "float", "(", ")", ",", "\n", "cDataset", ".", "DOC_CHAR_IN_TOKEN_MASK", ":", "\n", "torch", ".", "tensor", "(", "doc_char_in_token", ")", ".", "gt", "(", "0", ")", ".", "float", "(", ")", ",", "\n", "\n", "cDataset", ".", "DOC_TOKEN_LEN", ":", "torch", ".", "tensor", "(", "\n", "doc_token_len", ",", "dtype", "=", "torch", ".", "float32", ")", ",", "\n", "cDataset", ".", "DOC_CHAR_LEN", ":", "torch", ".", "tensor", "(", "\n", "doc_char_len", ",", "dtype", "=", "torch", ".", "float32", ")", ",", "\n", "cDataset", ".", "DOC_CHAR_IN_TOKEN_LEN", ":", "torch", ".", "tensor", "(", "\n", "doc_char_in_token_len", ",", "dtype", "=", "torch", ".", "float32", ")", ",", "\n", "\n", "cDataset", ".", "DOC_TOKEN_MAX_LEN", ":", "\n", "torch", ".", "tensor", "(", "[", "doc_token_max_len", "]", ",", "dtype", "=", "torch", ".", "float32", ")", ",", "\n", "cDataset", ".", "DOC_CHAR_MAX_LEN", ":", "\n", "torch", ".", "tensor", "(", "[", "doc_char_max_len", "]", ",", "dtype", "=", "torch", ".", "float32", ")", ",", "\n", "cDataset", ".", "DOC_CHAR_IN_TOKEN_MAX_LEN", ":", "\n", "torch", ".", "tensor", "(", "[", "doc_char_in_token_max_len", "]", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "}", "\n", "\n", "if", "self", ".", "conf", ".", "label_embedding", ".", "use_label_embedding", ":", "\n", "            ", "batch_map", "[", "cDataset", ".", "DOC_LABEL_ID", "]", "=", "self", ".", "label_id", "\n", "try", ":", "\n", "                ", "self", ".", "conf", "[", "self", ".", "conf", ".", "model_name", "]", ".", "use_gcn", "\n", "", "except", "AttributeError", ":", "\n", "                ", "if", "'ZSJL'", "in", "self", ".", "conf", ".", "model_name", ":", "\n", "                    ", "batch_map", "[", "cDataset", ".", "DOC_LABEL_RELATION", "]", "=", "self", ".", "graph_dataset", ".", "adj", "\n", "", "else", ":", "\n", "                    ", "print", "(", "f\"current model {self.conf.model_name} does not support join learning with GCN. \"", ")", "\n", "", "", "else", ":", "\n", "                ", "if", "self", ".", "conf", "[", "self", ".", "conf", ".", "model_name", "]", ".", "use_gcn", ":", "\n", "                    ", "batch_map", "[", "cDataset", ".", "DOC_LABEL_RELATION", "]", "=", "self", ".", "graph_dataset", ".", "adj", "\n", "\n", "", "", "", "return", "batch_map", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.dataset.collator.FastTextCollator.__call__": [[201, 274], ["enumerate", "doc_tokens_offset.pop", "doc_token_ngrams_offset.pop", "doc_keywords_offset.pop", "doc_topics_offset.pop", "vocabs.extend", "offsets.append", "lens.append", "collator.FastTextCollator._append_label", "collator.FastTextCollator.__call__._append_vocab"], "methods", ["home.repos.pwc.inspect_result.MemoriesJ_KAMG.dataset.collator.ClassificationCollator._append_label"], ["def", "__call__", "(", "self", ",", "batch", ")", ":", "\n", "        ", "def", "_append_vocab", "(", "sample", ",", "vocabs", ",", "offsets", ",", "lens", ",", "name", ")", ":", "\n", "            ", "filtered_vocab", "=", "[", "x", "for", "x", "in", "sample", "[", "name", "]", "if", "\n", "x", "is", "not", "cDataset", ".", "VOCAB_UNKNOWN", "]", "\n", "vocabs", ".", "extend", "(", "filtered_vocab", ")", "\n", "offsets", ".", "append", "(", "offsets", "[", "-", "1", "]", "+", "len", "(", "filtered_vocab", ")", ")", "\n", "lens", ".", "append", "(", "len", "(", "filtered_vocab", ")", ")", "\n", "\n", "", "doc_labels", "=", "[", "]", "\n", "\n", "doc_tokens", "=", "[", "]", "\n", "doc_token_ngrams", "=", "[", "]", "\n", "doc_keywords", "=", "[", "]", "\n", "doc_topics", "=", "[", "]", "\n", "\n", "doc_tokens_offset", "=", "[", "0", "]", "\n", "doc_token_ngrams_offset", "=", "[", "0", "]", "\n", "doc_keywords_offset", "=", "[", "0", "]", "\n", "doc_topics_offset", "=", "[", "0", "]", "\n", "\n", "doc_tokens_len", "=", "[", "]", "\n", "doc_token_ngrams_len", "=", "[", "]", "\n", "doc_keywords_len", "=", "[", "]", "\n", "doc_topics_len", "=", "[", "]", "\n", "for", "_", ",", "value", "in", "enumerate", "(", "batch", ")", ":", "\n", "            ", "self", ".", "_append_label", "(", "doc_labels", ",", "value", ")", "\n", "_append_vocab", "(", "value", ",", "doc_tokens", ",", "doc_tokens_offset", ",", "\n", "doc_tokens_len", ",", "\n", "cDataset", ".", "DOC_TOKEN", ")", "\n", "_append_vocab", "(", "value", ",", "doc_token_ngrams", ",", "doc_token_ngrams_offset", ",", "\n", "doc_token_ngrams_len", ",", "\n", "cDataset", ".", "DOC_TOKEN_NGRAM", ")", "\n", "_append_vocab", "(", "value", ",", "doc_keywords", ",", "doc_keywords_offset", ",", "\n", "doc_keywords_len", ",", "cDataset", ".", "DOC_KEYWORD", ")", "\n", "_append_vocab", "(", "value", ",", "doc_topics", ",", "doc_topics_offset", ",", "\n", "doc_topics_len", ",", "cDataset", ".", "DOC_TOPIC", ")", "\n", "", "doc_tokens_offset", ".", "pop", "(", ")", "\n", "doc_token_ngrams_offset", ".", "pop", "(", ")", "\n", "doc_keywords_offset", ".", "pop", "(", ")", "\n", "doc_topics_offset", ".", "pop", "(", ")", "\n", "\n", "if", "self", ".", "classification_type", "==", "ClassificationType", ".", "SINGLE_LABEL", ":", "\n", "            ", "tensor_doc_labels", "=", "torch", ".", "tensor", "(", "doc_labels", ")", "\n", "doc_label_list", "=", "[", "[", "x", "]", "for", "x", "in", "doc_labels", "]", "\n", "", "elif", "self", ".", "classification_type", "==", "ClassificationType", ".", "MULTI_LABEL", ":", "\n", "            ", "tensor_doc_labels", "=", "self", ".", "_get_multi_hot_label", "(", "doc_labels", ")", "\n", "doc_label_list", "=", "doc_labels", "\n", "\n", "", "batch_map", "=", "{", "\n", "cDataset", ".", "DOC_LABEL", ":", "tensor_doc_labels", ",", "\n", "cDataset", ".", "DOC_LABEL_LIST", ":", "doc_label_list", ",", "\n", "\n", "cDataset", ".", "DOC_TOKEN", ":", "torch", ".", "tensor", "(", "doc_tokens", ")", ",", "\n", "cDataset", ".", "DOC_TOKEN_NGRAM", ":", "torch", ".", "tensor", "(", "doc_token_ngrams", ")", ",", "\n", "cDataset", ".", "DOC_KEYWORD", ":", "torch", ".", "tensor", "(", "doc_keywords", ")", ",", "\n", "cDataset", ".", "DOC_TOPIC", ":", "torch", ".", "tensor", "(", "doc_topics", ")", ",", "\n", "\n", "cDataset", ".", "DOC_TOKEN_OFFSET", ":", "torch", ".", "tensor", "(", "doc_tokens_offset", ")", ",", "\n", "cDataset", ".", "DOC_TOKEN_NGRAM_OFFSET", ":", "\n", "torch", ".", "tensor", "(", "doc_token_ngrams_offset", ")", ",", "\n", "cDataset", ".", "DOC_KEYWORD_OFFSET", ":", "torch", ".", "tensor", "(", "doc_keywords_offset", ")", ",", "\n", "cDataset", ".", "DOC_TOPIC_OFFSET", ":", "torch", ".", "tensor", "(", "doc_topics_offset", ")", ",", "\n", "\n", "cDataset", ".", "DOC_TOKEN_LEN", ":", "\n", "torch", ".", "tensor", "(", "doc_tokens_len", ",", "dtype", "=", "torch", ".", "float32", ")", ",", "\n", "cDataset", ".", "DOC_TOKEN_NGRAM_LEN", ":", "\n", "torch", ".", "tensor", "(", "doc_token_ngrams_len", ",", "dtype", "=", "torch", ".", "float32", ")", ",", "\n", "cDataset", ".", "DOC_KEYWORD_LEN", ":", "\n", "torch", ".", "tensor", "(", "doc_keywords_len", ",", "dtype", "=", "torch", ".", "float32", ")", ",", "\n", "cDataset", ".", "DOC_TOPIC_LEN", ":", "\n", "torch", ".", "tensor", "(", "doc_topics_len", ",", "dtype", "=", "torch", ".", "float32", ")", "}", "\n", "\n", "return", "batch_map", "\n", "", "", ""]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.dataset.graph_dataset.GraphDataSet.__init__": [[14, 24], ["isinstance", "isinstance", "util.Logger", "graph_dataset.GraphDataSet._load_node_emb", "graph_dataset.GraphDataSet._load_adj"], "methods", ["home.repos.pwc.inspect_result.MemoriesJ_KAMG.dataset.graph_dataset.GraphDataSet._load_node_emb", "home.repos.pwc.inspect_result.MemoriesJ_KAMG.dataset.graph_dataset.GraphDataSet._load_adj"], ["    ", "def", "__init__", "(", "self", ",", "adj_path", ",", "node_emb_path", ",", "conf", ")", ":", "\n", "        ", "assert", "isinstance", "(", "adj_path", ",", "list", ")", ",", "\"Adjancency path should be list\"", "\n", "assert", "isinstance", "(", "node_emb_path", ",", "str", ")", ",", "\"Node embedding path should be str\"", "\n", "\n", "self", ".", "adj_path", "=", "adj_path", "\n", "self", ".", "node_emb_path", "=", "node_emb_path", "\n", "self", ".", "conf", "=", "conf", "\n", "self", ".", "logger", "=", "Logger", "(", "conf", ")", "\n", "self", ".", "_load_node_emb", "(", ")", "\n", "self", ".", "_load_adj", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.dataset.graph_dataset.GraphDataSet._load_adj": [[25, 66], ["graph_dataset.GraphDataSet.logger.info", "dict", "dataset.classification_dataset.ClassificationDataset", "range", "len", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "open", "len", "order.append", "graph_dataset.GraphDataSet.normalize().todense", "line.strip().split", "int", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.ix_", "graph_dataset.GraphDataSet.normalize", "graph_dataset.GraphDataSet.normalize().todense", "line.strip", "scipy.coo_matrix().astype", "graph_dataset.GraphDataSet.normalize", "scipy.coo_matrix", "scipy.coo_matrix().astype", "graph_dataset.GraphDataSet._load_adj.rearrange"], "methods", ["home.repos.pwc.inspect_result.MemoriesJ_KAMG.NeuralNLP-NeuralClassifier-KAMG.util.Logger.info", "home.repos.pwc.inspect_result.MemoriesJ_KAMG.dataset.graph_dataset.GraphDataSet.normalize", "home.repos.pwc.inspect_result.MemoriesJ_KAMG.dataset.graph_dataset.GraphDataSet.normalize"], ["", "def", "_load_adj", "(", "self", ")", ":", "\n", "\n", "        ", "order", "=", "[", "]", "\n", "if", "self", ".", "conf", ".", "data", ".", "label_map_of_relation_files", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "\"this step is necessary to re-order the adj matrix\"", ")", "\n", "# get source label map", "\n", "source_label_map", "=", "dict", "(", ")", "\n", "with", "open", "(", "self", ".", "conf", ".", "data", ".", "label_map_of_relation_files", ",", "mode", "=", "'r'", ")", "as", "fin", ":", "\n", "                ", "for", "line", "in", "fin", ":", "\n", "# star from idx 0", "\n", "                    ", "label", ",", "idx", "=", "line", ".", "strip", "(", "'\\n'", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "source_label_map", "[", "label", "]", "=", "int", "(", "idx", ")", "\n", "\n", "", "", "empty_dataset", "=", "cDataset", "(", "self", ".", "conf", ",", "[", "]", ",", "mode", "=", "'train'", ")", "\n", "target_id_to_label_map", "=", "empty_dataset", ".", "id_to_label_map", "\n", "for", "i", "in", "range", "(", "len", "(", "target_id_to_label_map", ")", ")", ":", "\n", "                ", "label", "=", "target_id_to_label_map", "[", "i", "]", "\n", "order", ".", "append", "(", "source_label_map", "[", "label", "]", ")", "\n", "\n", "", "", "def", "rearrange", "(", "_np_mat", ",", "_order", ")", ":", "\n", "            ", "if", "_order", ":", "\n", "                ", "return", "_np_mat", "[", "np", ".", "ix_", "(", "_order", ",", "_order", ")", "]", "\n", "", "return", "_np_mat", "\n", "\n", "", "if", "len", "(", "self", ".", "adj_path", ")", "==", "1", ":", "\n", "            ", "self", ".", "adj", "=", "torch", ".", "from_numpy", "(", "\n", "self", ".", "normalize", "(", "\n", "sp", ".", "coo_matrix", "(", "\n", "rearrange", "(", "\n", "sp", ".", "load_npz", "(", "self", ".", "adj_path", "[", "0", "]", ")", ".", "todense", "(", ")", ",", "order", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", ")", ".", "todense", "(", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "adj", "=", "torch", ".", "stack", "(", "[", "\n", "torch", ".", "from_numpy", "(", "\n", "self", ".", "normalize", "(", "\n", "sp", ".", "coo_matrix", "(", "\n", "rearrange", "(", "sp", ".", "load_npz", "(", "path", ")", ".", "todense", "(", ")", ",", "order", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", ")", ".", "todense", "(", ")", "\n", ")", "\n", "for", "path", "in", "self", ".", "adj_path", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.dataset.graph_dataset.GraphDataSet._load_node_emb": [[67, 72], ["None"], "methods", ["None"], ["", "", "def", "_load_node_emb", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "node_emb_path", ":", "\n", "            ", "self", ".", "node_emb", "=", "None", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.dataset.graph_dataset.GraphDataSet.normalize": [[73, 91], ["numpy.array", "numpy.power().flatten", "scipy.diags", "scipy.diags.dot", "numpy.array", "numpy.power().flatten", "scipy.diags", "mx.dot().transpose().dot.dot().transpose().dot.dot().transpose().dot", "mx.dot().transpose().dot.dot().transpose().dot.sum", "mx.dot().transpose().dot.dot().transpose().dot.sum", "numpy.power", "numpy.isinf", "numpy.power", "numpy.isinf", "mx.dot().transpose().dot.dot().transpose().dot.dot().transpose", "mx.dot().transpose().dot.dot().transpose().dot.dot"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "normalize", "(", "mx", ",", "method", "=", "\"sys\"", ")", ":", "\n", "        ", "\"\"\"same as Rethinking knowledge graph propagation for zero-shot learning\n        https://github.com/cyvius96/DGP/blob/master/utils.py\"\"\"", "\n", "\n", "if", "method", "==", "\"inv\"", ":", "\n", "            ", "rowsum", "=", "np", ".", "array", "(", "mx", ".", "sum", "(", "0", ")", ")", "\n", "r_inv", "=", "np", ".", "power", "(", "rowsum", ",", "-", "1", ")", ".", "flatten", "(", ")", "\n", "r_inv", "[", "np", ".", "isinf", "(", "r_inv", ")", "]", "=", "0.", "\n", "r_mat_inv", "=", "sp", ".", "diags", "(", "r_inv", ")", "\n", "mx", "=", "r_mat_inv", ".", "dot", "(", "mx", ")", "\n", "", "if", "method", "==", "\"sys\"", ":", "\n", "            ", "rowsum", "=", "np", ".", "array", "(", "mx", ".", "sum", "(", "1", ")", ")", "\n", "r_inv", "=", "np", ".", "power", "(", "rowsum", ",", "-", "0.5", ")", ".", "flatten", "(", ")", "\n", "r_inv", "[", "np", ".", "isinf", "(", "r_inv", ")", "]", "=", "0.", "\n", "r_mat_inv", "=", "sp", ".", "diags", "(", "r_inv", ")", "\n", "mx", "=", "mx", ".", "dot", "(", "r_mat_inv", ")", ".", "transpose", "(", ")", ".", "dot", "(", "r_mat_inv", ")", "\n", "", "return", "mx", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.dataset.graph_dataset.GraphDataSet.spm_to_spt": [[92, 101], ["sparse_mx.tocoo.tocoo.tocoo", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.vstack"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "spm_to_spt", "(", "sparse_mx", ")", ":", "\n", "        ", "\"\"\"same as Rethinking knowledge graph propagation for zero-shot learning\n        https://github.com/cyvius96/DGP/blob/master/utils.py\"\"\"", "\n", "sparse_mx", "=", "sparse_mx", ".", "tocoo", "(", ")", "\n", "indices", "=", "torch", ".", "from_numpy", "(", "np", ".", "vstack", "(", "(", "sparse_mx", ".", "row", ",", "sparse_mx", ".", "col", ")", ")", ")", ".", "long", "(", ")", "\n", "values", "=", "torch", ".", "from_numpy", "(", "sparse_mx", ".", "data", ")", "\n", "shape", "=", "torch", ".", "Size", "(", "sparse_mx", ".", "shape", ")", "\n", "return", "torch", ".", "sparse", ".", "FloatTensor", "(", "indices", ",", "values", ",", "shape", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.dataset.dataset.InsertVocabMode.str": [[40, 43], ["None"], "methods", ["None"], ["def", "str", "(", "self", ")", ":", "\n", "        ", "return", "\",\"", ".", "join", "(", "\n", "[", "self", ".", "ALL", ",", "self", ".", "LABEL", ",", "self", ".", "OTHER", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.dataset.dataset.DatasetBase.__init__": [[56, 141], ["util.Logger", "dataset.DatasetBase._init_dict", "enumerate", "dataset.DatasetBase._load_dict", "enumerate", "dataset.DatasetBase._insert_vocab"], "methods", ["home.repos.pwc.inspect_result.MemoriesJ_KAMG.dataset.dataset.DatasetBase._init_dict", "home.repos.pwc.inspect_result.MemoriesJ_KAMG.dataset.dataset.DatasetBase._load_dict", "home.repos.pwc.inspect_result.MemoriesJ_KAMG.dataset.dataset.DatasetBase._insert_vocab"], ["def", "__init__", "(", "self", ",", "config", ",", "json_files", ",", "generate_dict", "=", "False", ",", "\n", "mode", "=", "ModeType", ".", "EVAL", ")", ":", "\n", "        ", "\"\"\"\n        Another way to do this is keep the file handler. But when DataLoader's\n            num_worker bigger than 1, error will occur.\n        Args:\n            config:\n        \"\"\"", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "logger", "=", "Logger", "(", "config", ")", "\n", "self", ".", "_init_dict", "(", ")", "\n", "self", ".", "sample_index", "=", "[", "]", "\n", "self", ".", "sample_size", "=", "0", "\n", "self", ".", "model_mode", "=", "mode", "\n", "\n", "self", ".", "files", "=", "json_files", "\n", "for", "i", ",", "json_file", "in", "enumerate", "(", "json_files", ")", ":", "\n", "            ", "with", "open", "(", "json_file", ")", "as", "fin", ":", "\n", "                ", "self", ".", "sample_index", ".", "append", "(", "[", "i", ",", "0", "]", ")", "\n", "while", "True", ":", "\n", "                    ", "json_str", "=", "fin", ".", "readline", "(", ")", "\n", "if", "not", "json_str", ":", "\n", "                        ", "self", ".", "sample_index", ".", "pop", "(", ")", "\n", "break", "\n", "", "self", ".", "sample_size", "+=", "1", "\n", "self", ".", "sample_index", ".", "append", "(", "[", "i", ",", "fin", ".", "tell", "(", ")", "]", ")", "\n", "\n", "", "", "", "def", "_insert_vocab", "(", "files", ",", "_mode", "=", "InsertVocabMode", ".", "ALL", ")", ":", "\n", "            ", "for", "_i", ",", "_json_file", "in", "enumerate", "(", "files", ")", ":", "\n", "                ", "with", "open", "(", "_json_file", ")", "as", "_fin", ":", "\n", "                    ", "for", "_json_str", "in", "_fin", ":", "\n", "                        ", "try", ":", "\n", "                            ", "self", ".", "_insert_vocab", "(", "json", ".", "loads", "(", "_json_str", ")", ",", "_mode", ")", "\n", "", "except", ":", "\n", "                            ", "print", "(", "_json_str", ")", "\n", "\n", "# Dict can be generated using:", "\n", "# json files or/and pretrained embedding", "\n", "", "", "", "", "", "if", "generate_dict", ":", "\n", "# Use train json files to generate dict", "\n", "# If generate_dict_using_json_files is true, then all vocab in train", "\n", "# will be used, else only part vocab will be used. e.g. label", "\n", "            ", "vocab_json_files", "=", "self", ".", "config", ".", "data", ".", "train_json_files", "\n", "mode", "=", "InsertVocabMode", ".", "LABEL", "\n", "if", "self", ".", "config", ".", "data", ".", "generate_dict_using_json_files", ":", "\n", "                ", "mode", "=", "InsertVocabMode", ".", "ALL", "\n", "self", ".", "logger", ".", "info", "(", "\"Use dataset to generate dict.\"", ")", "\n", "", "_insert_vocab", "(", "vocab_json_files", ",", "mode", ")", "\n", "\n", "if", "self", ".", "config", ".", "data", ".", "generate_dict_using_all_json_files", ":", "\n", "                ", "vocab_json_files", "+=", "self", ".", "config", ".", "data", ".", "validate_json_files", "+", "self", ".", "config", ".", "data", ".", "test_json_files", "\n", "_insert_vocab", "(", "vocab_json_files", ",", "InsertVocabMode", ".", "OTHER", ")", "\n", "\n", "", "if", "self", ".", "config", ".", "data", ".", "generate_dict_using_pretrained_embedding", ":", "\n", "                ", "self", ".", "logger", ".", "info", "(", "\"Use pretrained embedding to generate dict.\"", ")", "\n", "self", ".", "_load_pretrained_dict", "(", ")", "\n", "\n", "# assert not(self.config.label_embedding.use_label_embedding is False and", "\n", "#            self.config.data.generate_label_group is True)", "\n", "# get freq/few group labels", "\n", "", "if", "self", ".", "config", ".", "data", ".", "generate_label_group", ":", "\n", "                ", "self", ".", "_group_label", "(", "is_zero", "=", "False", ")", "\n", "# when label embedding is used in model", "\n", "# all unique labels including train/dev/test should be used to", "\n", "# generate label map", "\n", "", "if", "self", ".", "config", ".", "task_info", ".", "zsl", ":", "\n", "                ", "vocab_json_files", "=", "self", ".", "config", ".", "data", ".", "validate_json_files", "+", "self", ".", "config", ".", "data", ".", "test_json_files", "\n", "_insert_vocab", "(", "vocab_json_files", ",", "InsertVocabMode", ".", "LABEL", ")", "\n", "\n", "# get zero group labels", "\n", "# no zero group labels when above condition is not satisfied", "\n", "if", "self", ".", "config", ".", "data", ".", "generate_label_group", ":", "\n", "                    ", "self", ".", "_group_label", "(", "is_zero", "=", "True", ")", "\n", "\n", "", "", "self", ".", "_print_dict_info", "(", ")", "\n", "\n", "self", ".", "_shrink_dict", "(", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"Shrink dict over.\"", ")", "\n", "self", ".", "_print_dict_info", "(", "True", ")", "\n", "\n", "self", ".", "_save_dict", "(", ")", "\n", "self", ".", "_clear_dict", "(", ")", "\n", "", "self", ".", "_load_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.dataset.dataset.DatasetBase.__len__": [[142, 144], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "sample_size", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.dataset.dataset.DatasetBase.__getitem__": [[145, 153], ["dataset.DatasetBase._get_vocab_id_list", "open", "fin.seek", "fin.readline", "json.loads"], "methods", ["home.repos.pwc.inspect_result.MemoriesJ_KAMG.dataset.dataset.DatasetBase._get_vocab_id_list"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "if", "idx", ">=", "self", ".", "sample_size", ":", "\n", "            ", "raise", "IndexError", "\n", "", "index", "=", "self", ".", "sample_index", "[", "idx", "]", "\n", "with", "open", "(", "self", ".", "files", "[", "index", "[", "0", "]", "]", ")", "as", "fin", ":", "\n", "            ", "fin", ".", "seek", "(", "index", "[", "1", "]", ")", "\n", "json_str", "=", "fin", ".", "readline", "(", ")", "\n", "", "return", "self", ".", "_get_vocab_id_list", "(", "json", ".", "loads", "(", "json_str", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.dataset.dataset.DatasetBase._group_label": [[154, 156], ["None"], "methods", ["None"], ["", "def", "_group_label", "(", "self", ",", "is_zero", "=", "False", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.dataset.dataset.DatasetBase._init_dict": [[157, 161], ["None"], "methods", ["None"], ["", "def", "_init_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Init all dict\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.dataset.dataset.DatasetBase._save_dict": [[162, 182], ["dataset.DatasetBase.dict_names.index", "open", "open.close", "os.path.exists", "os.makedirs", "dataset.DatasetBase._save_dict", "open.write"], "methods", ["home.repos.pwc.inspect_result.MemoriesJ_KAMG.dataset.dataset.DatasetBase._save_dict"], ["", "def", "_save_dict", "(", "self", ",", "dict_name", "=", "None", ")", ":", "\n", "        ", "\"\"\"Save vocab to file and generate id_to_vocab_dict_map\n        Args:\n            dict_name: Dict name, if None save all dict. Default None.\n        \"\"\"", "\n", "if", "dict_name", "is", "None", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "config", ".", "data", ".", "dict_dir", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "self", ".", "config", ".", "data", ".", "dict_dir", ")", "\n", "", "for", "name", "in", "self", ".", "dict_names", ":", "\n", "                ", "self", ".", "_save_dict", "(", "name", ")", "\n", "", "", "else", ":", "\n", "            ", "dict_idx", "=", "self", ".", "dict_names", ".", "index", "(", "dict_name", ")", "\n", "dict_file", "=", "open", "(", "self", ".", "dict_files", "[", "dict_idx", "]", ",", "\"w\"", ")", "\n", "id_to_vocab_dict_map", "=", "self", ".", "id_to_vocab_dict_list", "[", "dict_idx", "]", "\n", "index", "=", "0", "\n", "for", "vocab", ",", "count", "in", "self", ".", "count_list", "[", "dict_idx", "]", ":", "\n", "                ", "id_to_vocab_dict_map", "[", "index", "]", "=", "vocab", "\n", "index", "+=", "1", "\n", "dict_file", ".", "write", "(", "\"%s\\t%d\\n\"", "%", "(", "vocab", ",", "count", ")", ")", "\n", "", "dict_file", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.dataset.dataset.DatasetBase._load_dict": [[183, 214], ["dataset.DatasetBase.dict_names.index", "dataset.DatasetBase._load_dict", "os.path.exists", "dataset.DatasetBase.logger.warn", "open", "line.strip().split", "len", "line.strip"], "methods", ["home.repos.pwc.inspect_result.MemoriesJ_KAMG.dataset.dataset.DatasetBase._load_dict", "home.repos.pwc.inspect_result.MemoriesJ_KAMG.NeuralNLP-NeuralClassifier-KAMG.util.Logger.warn"], ["", "", "def", "_load_dict", "(", "self", ",", "dict_name", "=", "None", ")", ":", "\n", "        ", "\"\"\"Load dict from file.\n        Args:\n            dict_name: Dict name, if None load all dict. Default None.\n        Returns:\n            dict.\n        \"\"\"", "\n", "if", "dict_name", "is", "None", ":", "\n", "            ", "for", "name", "in", "self", ".", "dict_names", ":", "\n", "                ", "self", ".", "_load_dict", "(", "name", ")", "\n", "", "", "else", ":", "\n", "            ", "dict_idx", "=", "self", ".", "dict_names", ".", "index", "(", "dict_name", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "dict_files", "[", "dict_idx", "]", ")", ":", "\n", "                ", "self", ".", "logger", ".", "warn", "(", "\"Not exists %s for %s\"", "%", "(", "\n", "self", ".", "dict_files", "[", "dict_idx", "]", ",", "dict_name", ")", ")", "\n", "", "else", ":", "\n", "                ", "dict_map", "=", "self", ".", "dicts", "[", "dict_idx", "]", "\n", "id_to_vocab_dict_map", "=", "self", ".", "id_to_vocab_dict_list", "[", "dict_idx", "]", "\n", "if", "dict_name", "!=", "self", ".", "DOC_LABEL", ":", "\n", "                    ", "dict_map", "[", "self", ".", "VOCAB_PADDING", "]", "=", "0", "\n", "dict_map", "[", "self", ".", "VOCAB_UNKNOWN", "]", "=", "1", "\n", "dict_map", "[", "self", ".", "VOCAB_PADDING_LEARNABLE", "]", "=", "2", "\n", "id_to_vocab_dict_map", "[", "0", "]", "=", "self", ".", "VOCAB_PADDING", "\n", "id_to_vocab_dict_map", "[", "1", "]", "=", "self", ".", "VOCAB_UNKNOWN", "\n", "id_to_vocab_dict_map", "[", "2", "]", "=", "self", ".", "VOCAB_PADDING_LEARNABLE", "\n", "\n", "", "for", "line", "in", "open", "(", "self", ".", "dict_files", "[", "dict_idx", "]", ",", "\"r\"", ")", ":", "\n", "                    ", "vocab", "=", "line", ".", "strip", "(", "\"\\n\"", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "dict_idx", "=", "len", "(", "dict_map", ")", "\n", "dict_map", "[", "vocab", "[", "0", "]", "]", "=", "dict_idx", "\n", "id_to_vocab_dict_map", "[", "dict_idx", "]", "=", "vocab", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.dataset.dataset.DatasetBase._load_pretrained_dict": [[215, 239], ["enumerate", "dataset.DatasetBase.dict_names.index", "dataset.DatasetBase._load_pretrained_dict", "open", "line.strip().split", "len", "line.strip"], "methods", ["home.repos.pwc.inspect_result.MemoriesJ_KAMG.dataset.dataset.DatasetBase._load_pretrained_dict"], ["", "", "", "", "def", "_load_pretrained_dict", "(", "self", ",", "dict_name", "=", "None", ",", "\n", "pretrained_file", "=", "None", ",", "min_count", "=", "0", ")", ":", "\n", "        ", "\"\"\"Use pretrained embedding to generate dict\n        \"\"\"", "\n", "if", "dict_name", "is", "None", ":", "\n", "            ", "for", "i", ",", "_", "in", "enumerate", "(", "self", ".", "pretrained_dict_names", ")", ":", "\n", "                ", "self", ".", "_load_pretrained_dict", "(", "\n", "self", ".", "pretrained_dict_names", "[", "i", "]", ",", "\n", "self", ".", "pretrained_dict_files", "[", "i", "]", ",", "\n", "self", ".", "pretrained_min_count", "[", "i", "]", ")", "\n", "\n", "", "", "else", ":", "\n", "            ", "if", "pretrained_file", "is", "None", "or", "pretrained_file", "==", "\"\"", ":", "\n", "                ", "return", "\n", "", "index", "=", "self", ".", "dict_names", ".", "index", "(", "dict_name", ")", "\n", "dict_map", "=", "self", ".", "dicts", "[", "index", "]", "\n", "with", "open", "(", "pretrained_file", ")", "as", "fin", ":", "\n", "                ", "for", "line", "in", "fin", ":", "\n", "                    ", "data", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "\n", "if", "len", "(", "data", ")", "==", "2", ":", "\n", "                        ", "continue", "\n", "", "if", "data", "[", "0", "]", "not", "in", "dict_map", ":", "\n", "                        ", "dict_map", "[", "data", "[", "0", "]", "]", "=", "0", "\n", "", "dict_map", "[", "data", "[", "0", "]", "]", "+=", "min_count", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.dataset.dataset.DatasetBase._insert_vocab": [[240, 244], ["None"], "methods", ["None"], ["", "", "", "", "def", "_insert_vocab", "(", "self", ",", "json_obj", ",", "mode", "=", "InsertVocabMode", ".", "ALL", ")", ":", "\n", "        ", "\"\"\"Insert vocab to dict\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.dataset.dataset.DatasetBase._shrink_dict": [[245, 257], ["dataset.DatasetBase.dict_names.index", "sorted", "dataset.DatasetBase._shrink_dict", "dataset.DatasetBase.dicts[].items"], "methods", ["home.repos.pwc.inspect_result.MemoriesJ_KAMG.dataset.dataset.DatasetBase._shrink_dict", "home.repos.pwc.inspect_result.MemoriesJ_KAMG.NeuralNLP-NeuralClassifier-KAMG.config.Config.items"], ["", "def", "_shrink_dict", "(", "self", ",", "dict_name", "=", "None", ")", ":", "\n", "        ", "if", "dict_name", "is", "None", ":", "\n", "            ", "for", "name", "in", "self", ".", "dict_names", ":", "\n", "                ", "self", ".", "_shrink_dict", "(", "name", ")", "\n", "", "", "else", ":", "\n", "            ", "dict_idx", "=", "self", ".", "dict_names", ".", "index", "(", "dict_name", ")", "\n", "self", ".", "count_list", "[", "dict_idx", "]", "=", "sorted", "(", "self", ".", "dicts", "[", "dict_idx", "]", ".", "items", "(", ")", ",", "\n", "key", "=", "lambda", "x", ":", "(", "x", "[", "1", "]", ",", "x", "[", "0", "]", ")", ",", "\n", "reverse", "=", "True", ")", "\n", "self", ".", "count_list", "[", "dict_idx", "]", "=", "[", "(", "k", ",", "v", ")", "for", "k", ",", "v", "in", "self", ".", "count_list", "[", "dict_idx", "]", "if", "\n", "v", ">=", "self", ".", "min_count", "[", "dict_idx", "]", "]", "[", "0", ":", "self", ".", "max_dict_size", "[", "dict_idx", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.dataset.dataset.DatasetBase._clear_dict": [[258, 265], ["dict_map.clear", "id_to_vocab_dict.clear"], "methods", ["None"], ["", "", "def", "_clear_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Clear all dict\n        \"\"\"", "\n", "for", "dict_map", "in", "self", ".", "dicts", ":", "\n", "            ", "dict_map", ".", "clear", "(", ")", "\n", "", "for", "id_to_vocab_dict", "in", "self", ".", "id_to_vocab_dict_list", ":", "\n", "            ", "id_to_vocab_dict", ".", "clear", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.dataset.dataset.DatasetBase._print_dict_info": [[266, 277], ["enumerate", "dataset.DatasetBase.logger.info", "dataset.DatasetBase.logger.info", "len", "len"], "methods", ["home.repos.pwc.inspect_result.MemoriesJ_KAMG.NeuralNLP-NeuralClassifier-KAMG.util.Logger.info", "home.repos.pwc.inspect_result.MemoriesJ_KAMG.NeuralNLP-NeuralClassifier-KAMG.util.Logger.info"], ["", "", "def", "_print_dict_info", "(", "self", ",", "count_list", "=", "False", ")", ":", "\n", "        ", "\"\"\"Print dict info\n        \"\"\"", "\n", "for", "i", ",", "dict_name", "in", "enumerate", "(", "self", ".", "dict_names", ")", ":", "\n", "            ", "if", "count_list", ":", "\n", "                ", "self", ".", "logger", ".", "info", "(", "\n", "\"Size of %s dict is %d\"", "%", "(", "\n", "dict_name", ",", "len", "(", "self", ".", "count_list", "[", "i", "]", ")", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "logger", ".", "info", "(", "\n", "\"Size of %s dict is %d\"", "%", "(", "dict_name", ",", "len", "(", "self", ".", "dicts", "[", "i", "]", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.dataset.dataset.DatasetBase._insert_sequence_tokens": [[278, 290], ["dataset.DatasetBase._add_vocab_to_dict", "range", "dataset.DatasetBase._add_vocab_to_dict", "dataset.DatasetBase._add_vocab_to_dict", "range", "len"], "methods", ["home.repos.pwc.inspect_result.MemoriesJ_KAMG.dataset.dataset.DatasetBase._add_vocab_to_dict", "home.repos.pwc.inspect_result.MemoriesJ_KAMG.dataset.dataset.DatasetBase._add_vocab_to_dict", "home.repos.pwc.inspect_result.MemoriesJ_KAMG.dataset.dataset.DatasetBase._add_vocab_to_dict"], ["", "", "", "def", "_insert_sequence_tokens", "(", "self", ",", "sequence_tokens", ",", "token_map", ",", "\n", "token_ngram_map", ",", "char_map", ",", "ngram", "=", "0", ")", ":", "\n", "        ", "for", "token", "in", "sequence_tokens", ":", "\n", "            ", "for", "char", "in", "token", ":", "\n", "                ", "self", ".", "_add_vocab_to_dict", "(", "char_map", ",", "char", ")", "\n", "", "self", ".", "_add_vocab_to_dict", "(", "token_map", ",", "token", ")", "\n", "", "if", "ngram", ">", "1", ":", "\n", "            ", "for", "j", "in", "range", "(", "2", ",", "ngram", "+", "1", ")", ":", "\n", "                ", "for", "token_ngram", "in", "[", "\"\"", ".", "join", "(", "sequence_tokens", "[", "k", ":", "k", "+", "j", "]", ")", "for", "k", "in", "\n", "range", "(", "len", "(", "sequence_tokens", ")", "-", "j", "+", "1", ")", "]", ":", "\n", "                    ", "self", ".", "_add_vocab_to_dict", "(", "token_ngram_map", ",", "\n", "token_ngram", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.dataset.dataset.DatasetBase._insert_sequence_vocab": [[291, 294], ["dataset.DatasetBase._add_vocab_to_dict"], "methods", ["home.repos.pwc.inspect_result.MemoriesJ_KAMG.dataset.dataset.DatasetBase._add_vocab_to_dict"], ["", "", "", "", "def", "_insert_sequence_vocab", "(", "self", ",", "sequence_vocabs", ",", "dict_map", ")", ":", "\n", "        ", "for", "vocab", "in", "sequence_vocabs", ":", "\n", "            ", "self", ".", "_add_vocab_to_dict", "(", "dict_map", ",", "vocab", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.dataset.dataset.DatasetBase._add_vocab_to_dict": [[295, 300], ["None"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "_add_vocab_to_dict", "(", "dict_map", ",", "vocab", ")", ":", "\n", "        ", "if", "vocab", "not", "in", "dict_map", ":", "\n", "            ", "dict_map", "[", "vocab", "]", "=", "0", "\n", "", "dict_map", "[", "vocab", "]", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.dataset.dataset.DatasetBase._get_vocab_id_list": [[301, 305], ["None"], "methods", ["None"], ["", "def", "_get_vocab_id_list", "(", "self", ",", "json_obj", ")", ":", "\n", "        ", "\"\"\"Use dict to convert all vocabs to ids\n        \"\"\"", "\n", "return", "json_obj", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.dataset.dataset.DatasetBase._label_to_id": [[306, 319], ["dataset.DatasetBase.logger.warn", "label_id_list.append"], "methods", ["home.repos.pwc.inspect_result.MemoriesJ_KAMG.NeuralNLP-NeuralClassifier-KAMG.util.Logger.warn"], ["", "def", "_label_to_id", "(", "self", ",", "sequence_labels", ",", "dict_map", ")", ":", "\n", "        ", "\"\"\"Convert label to id. The reason that label is not in label map may be\n        label is filtered or label in validate/test does not occur in train set\n        \"\"\"", "\n", "label_id_list", "=", "[", "]", "\n", "for", "label", "in", "sequence_labels", ":", "\n", "            ", "if", "label", "not", "in", "dict_map", ":", "\n", "                ", "self", ".", "logger", ".", "warn", "(", "\"Label not in label map: %s\"", "%", "label", ")", "\n", "", "else", ":", "\n", "                ", "label_id_list", ".", "append", "(", "self", ".", "label_map", "[", "label", "]", ")", "\n", "", "", "assert", "label_id_list", ",", "\"Label is empty: %s\"", "%", "\" \"", ".", "join", "(", "sequence_labels", ")", "\n", "\n", "return", "label_id_list", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.dataset.dataset.DatasetBase._token_to_id": [[320, 352], ["char_id_list.extend", "char_in_token_id_list.append", "token_id_list.append", "range", "token_id_list.append", "char_id_list.append", "char_in_token_id_list.append", "ngram_id_list.append", "char_map.get", "char_map.get", "token_map.get", "ngram_id_list.extend", "range", "len"], "methods", ["None"], ["", "def", "_token_to_id", "(", "self", ",", "sequence_tokens", ",", "token_map", ",", "char_map", ",", "ngram", "=", "0", ",", "\n", "token_ngram_map", "=", "None", ",", "max_char_sequence_length", "=", "-", "1", ",", "\n", "max_char_length_per_token", "=", "-", "1", ")", ":", "\n", "        ", "\"\"\"Convert token to id. Vocab not in dict map will be map to _UNK\n        \"\"\"", "\n", "token_id_list", "=", "[", "]", "\n", "char_id_list", "=", "[", "]", "\n", "char_in_token_id_list", "=", "[", "]", "\n", "ngram_id_list", "=", "[", "]", "\n", "for", "token", "in", "sequence_tokens", ":", "\n", "            ", "char_id", "=", "[", "char_map", ".", "get", "(", "x", ",", "self", ".", "VOCAB_UNKNOWN", ")", "for", "x", "in", "token", "]", "\n", "char_id_list", ".", "extend", "(", "char_id", "[", "0", ":", "max_char_sequence_length", "]", ")", "\n", "char_in_token", "=", "[", "char_map", ".", "get", "(", "x", ",", "self", ".", "VOCAB_UNKNOWN", ")", "\n", "for", "x", "in", "token", "[", "0", ":", "max_char_length_per_token", "]", "]", "\n", "char_in_token_id_list", ".", "append", "(", "char_in_token", ")", "\n", "\n", "token_id_list", ".", "append", "(", "\n", "token_map", ".", "get", "(", "token", ",", "token_map", "[", "self", ".", "VOCAB_UNKNOWN", "]", ")", ")", "\n", "", "if", "ngram", ">", "1", ":", "\n", "            ", "for", "j", "in", "range", "(", "2", ",", "ngram", "+", "1", ")", ":", "\n", "                ", "ngram_id_list", ".", "extend", "(", "\n", "token_ngram_map", "[", "x", "]", "for", "x", "in", "\n", "[", "\"\"", ".", "join", "(", "sequence_tokens", "[", "k", ":", "k", "+", "j", "]", ")", "for", "k", "in", "\n", "range", "(", "len", "(", "sequence_tokens", ")", "-", "j", "+", "1", ")", "]", "if", "x", "in", "\n", "token_ngram_map", ")", "\n", "", "", "if", "not", "sequence_tokens", ":", "\n", "            ", "token_id_list", ".", "append", "(", "self", ".", "VOCAB_PADDING", ")", "\n", "char_id_list", ".", "append", "(", "self", ".", "VOCAB_PADDING", ")", "\n", "char_in_token_id_list", ".", "append", "(", "[", "self", ".", "VOCAB_PADDING", "]", ")", "\n", "", "if", "not", "ngram_id_list", ":", "\n", "            ", "ngram_id_list", ".", "append", "(", "token_ngram_map", "[", "self", ".", "VOCAB_PADDING", "]", ")", "\n", "", "return", "token_id_list", ",", "char_id_list", ",", "char_in_token_id_list", ",", "ngram_id_list", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.dataset.dataset.DatasetBase._vocab_to_id": [[353, 361], ["dict_map.get", "vocab_id_list.append"], "methods", ["None"], ["", "def", "_vocab_to_id", "(", "self", ",", "sequence_vocabs", ",", "dict_map", ")", ":", "\n", "        ", "\"\"\"Convert vocab to id. Vocab not in dict map will be map to _UNK\n        \"\"\"", "\n", "vocab_id_list", "=", "[", "dict_map", ".", "get", "(", "x", ",", "self", ".", "VOCAB_UNKNOWN", ")", "for", "x", "in", "sequence_vocabs", "]", "\n", "if", "not", "vocab_id_list", ":", "\n", "            ", "vocab_id_list", ".", "append", "(", "self", ".", "VOCAB_PADDING", ")", "\n", "", "return", "vocab_id_list", "\n", "", "", ""]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.dataset.generate_graph_data.get_hier_adj": [[29, 40], ["numpy.zeros", "numpy.maximum().astype", "scipy.coo_matrix", "sp.coo_matrix.setdiag", "len", "len", "numpy.maximum"], "function", ["None"], ["def", "get_hier_adj", "(", "parent_child_map", ",", "label_map", ")", ":", "\n", "\n", "    ", "adj", "=", "np", ".", "zeros", "(", "(", "len", "(", "label_map", ")", ",", "len", "(", "label_map", ")", ")", ")", "\n", "for", "parent", "in", "parent_child_map", ":", "\n", "        ", "adj", "[", "label_map", "[", "parent", "]", ",", "[", "label_map", "[", "child", "]", "for", "child", "in", "parent_child_map", "[", "parent", "]", "]", "]", "=", "1", "\n", "\n", "", "adj", "=", "np", ".", "maximum", "(", "adj", ",", "adj", ".", "T", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "adj", "=", "sp", ".", "coo_matrix", "(", "adj", ")", "\n", "adj", ".", "setdiag", "(", "1", ")", "\n", "\n", "return", "adj", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.dataset.generate_graph_data.get_cooc_corr_adj": [[42, 84], ["sklearn.preprocessing.MultiLabelBinarizer", "sklearn.preprocessing.MultiLabelBinarizer.fit_transform", "scipy.coo_matrix", "sp.coo_matrix.transpose().dot().astype", "binary_train_labels.transpose().dot().astype.diagonal", "numpy.asarray", "numpy.fill_diagonal", "int", "scipy.coo_matrix", "sp.coo_matrix.setdiag", "numpy.asarray", "numpy.fill_diagonal", "numpy.repeat", "numpy.fill_diagonal", "scipy.coo_matrix", "binary_train_labels.transpose().dot().astype.todense", "numpy.sort", "numpy.sum", "open", "range", "sp.coo_matrix.transpose().dot", "sp.coo_matrix.flatten", "numpy.isnan", "numpy.isinf", "numpy.isnan", "numpy.isinf", "train_labels.append", "len", "sp.coo_matrix.transpose", "json.loads"], "function", ["None"], ["", "def", "get_cooc_corr_adj", "(", "reverse_label_map", ",", "config", ",", "cooc_threshold", ",", "tau", "=", "0.4", ",", "p", "=", "0.2", ")", ":", "\n", "\n", "# binarize the training labels for get corr adj", "\n", "    ", "train_labels", "=", "[", "]", "\n", "for", "f", "in", "config", ".", "data", ".", "train_json_files", ":", "\n", "        ", "with", "open", "(", "f", ")", "as", "fin", ":", "\n", "            ", "for", "json_str", "in", "fin", ":", "\n", "                ", "train_labels", ".", "append", "(", "json", ".", "loads", "(", "json_str", ")", "[", "\"doc_label\"", "]", ")", "\n", "\n", "", "", "", "full_labels", "=", "[", "reverse_label_map", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "reverse_label_map", ")", ")", "]", "\n", "mlb", "=", "MultiLabelBinarizer", "(", "classes", "=", "full_labels", ")", "\n", "binary_train_labels", "=", "mlb", ".", "fit_transform", "(", "train_labels", ")", "\n", "binary_train_labels", "=", "sp", ".", "coo_matrix", "(", "binary_train_labels", ")", "\n", "\n", "oc_cooc", "=", "binary_train_labels", ".", "transpose", "(", ")", ".", "dot", "(", "binary_train_labels", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "oc", "=", "oc_cooc", ".", "diagonal", "(", ")", "\n", "corr", "=", "oc_cooc", "/", "oc", "\n", "\n", "cooc_adj", "=", "np", ".", "asarray", "(", "oc_cooc", ".", "todense", "(", ")", ")", "\n", "np", ".", "fill_diagonal", "(", "cooc_adj", ",", "0", ")", "\n", "idx", "=", "int", "(", "(", "cooc_adj", ".", "shape", "[", "0", "]", "**", "2", ")", "*", "cooc_threshold", ")", "\n", "threshold_value", "=", "np", ".", "sort", "(", "cooc_adj", ".", "flatten", "(", ")", ")", "[", "-", "idx", "]", "\n", "cooc_adj", "=", "(", "cooc_adj", ">", "threshold_value", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "cooc_adj", "=", "sp", ".", "coo_matrix", "(", "cooc_adj", ")", "\n", "cooc_adj", ".", "setdiag", "(", "1", ")", "\n", "\n", "# correlation graph", "\n", "corr", "=", "np", ".", "asarray", "(", "corr", ")", "\n", "corr", "[", "np", ".", "isnan", "(", "corr", ")", "]", "=", "0.", "\n", "corr", "[", "np", ".", "isinf", "(", "corr", ")", "]", "=", "0.", "\n", "corr_adj", "=", "(", "corr", ">=", "tau", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "# corr over smooth", "\n", "np", ".", "fill_diagonal", "(", "corr_adj", ",", "0.", ")", "\n", "corr_adj", "=", "p", "/", "np", ".", "sum", "(", "corr_adj", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "corr_adj", "[", "np", ".", "isnan", "(", "corr_adj", ")", "]", "=", "0.", "\n", "corr_adj", "[", "np", ".", "isinf", "(", "corr_adj", ")", "]", "=", "0.", "\n", "corr_adj", "=", "np", ".", "repeat", "(", "corr_adj", ",", "corr", ".", "shape", "[", "0", "]", ",", "axis", "=", "1", ")", "\n", "np", ".", "fill_diagonal", "(", "corr_adj", ",", "1", "-", "p", ")", "\n", "corr_adj", "=", "sp", ".", "coo_matrix", "(", "corr_adj", ")", "\n", "\n", "return", "cooc_adj", ",", "corr_adj", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.dataset.generate_graph_data.get_simi_adj": [[86, 105], ["int", "scipy.spatial.distance.squareform().astype", "scipy.coo_matrix", "sp.coo_matrix.setdiag", "scipy.spatial.distance.pdist", "numpy.sort", "numpy.isnan", "similarity.flatten", "scipy.spatial.distance.squareform"], "function", ["None"], ["", "def", "get_simi_adj", "(", "sorted_label_emb", ",", "simi_threshold", ")", ":", "\n", "\n", "# https://icml2020-submission.github.io/MAGCN/", "\n", "    ", "similarity", "=", "1", "-", "pdist", "(", "sorted_label_emb", ",", "'cosine'", ")", "\n", "similarity", "[", "np", ".", "isnan", "(", "similarity", ")", "]", "=", "0.", "\n", "\n", "idx", "=", "int", "(", "(", "sorted_label_emb", ".", "shape", "[", "0", "]", "**", "2", ")", "*", "simi_threshold", "/", "2", ")", "\n", "threshold_value", "=", "np", ".", "sort", "(", "similarity", ".", "flatten", "(", ")", ")", "[", "-", "idx", "]", "\n", "similarity", "[", "similarity", ">", "threshold_value", "]", "=", "1.", "\n", "similarity", "[", "similarity", "<=", "threshold_value", "]", "=", "0.", "\n", "\n", "# similarity[similarity > simi_threshold] = 1", "\n", "# similarity[similarity <= simi_threshold] = 0", "\n", "\n", "adj", "=", "squareform", "(", "similarity", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "adj", "=", "sp", ".", "coo_matrix", "(", "adj", ")", "\n", "adj", ".", "setdiag", "(", "1", ")", "\n", "\n", "return", "adj", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.dataset.generate_graph_data.impose_adjs": [[107, 116], ["scipy.coo_matrix", "numpy.identity"], "function", ["None"], ["", "def", "impose_adjs", "(", "adj1", ",", "adj2", ",", "lamb", "=", "0.4", ",", "tau", "=", "0.02", ",", "eta", "=", "0.4", ")", ":", "\n", "\n", "    ", "adj", "=", "(", "1", "-", "lamb", ")", "*", "adj1", "+", "lamb", "*", "adj2", "\n", "# adj = (adj >= tau).astype(np.int)", "\n", "adj", "[", "adj", "<", "tau", "]", "=", "0.", "\n", "adj", "=", "eta", "*", "adj", "+", "(", "1", "-", "eta", ")", "*", "np", ".", "identity", "(", "adj", ".", "shape", "[", "0", "]", ")", "\n", "adj", "=", "sp", ".", "coo_matrix", "(", "adj", ")", "\n", "\n", "return", "adj", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.dataset.generate_graph_data.main": [[118, 244], ["set", "print", "sklearn.feature_extraction.text.TfidfVectorizer", "sklearn.feature_extraction.text.TfidfVectorizer.fit_transform", "sklearn.feature_extraction.text.TfidfVectorizer.get_feature_names", "numpy.array", "numpy.einsum", "print", "[].strip", "generate_graph_data.get_hier_adj", "print", "print", "scipy.save_npz", "generate_graph_data.get_cooc_corr_adj", "print", "print", "scipy.save_npz", "print", "print", "scipy.save_npz", "print", "print", "scipy.save_npz", "generate_graph_data.impose_adjs", "print", "print", "scipy.save_npz", "generate_graph_data.impose_adjs", "print", "print", "scipy.save_npz", "generate_graph_data.impose_adjs", "print", "print", "scipy.save_npz", "open", "open", "open", "open", "vectorizer.fit_transform.todense", "open", "open", "range", "generate_graph_data.get_simi_adj", "generate_graph_data.get_simi_adj", "open", "line.strip().split", "fout.write", "line.strip().split", "numpy.array", "json.loads", "numpy.mean().astype", "range", "fout.write", "fout.write", "numpy.array", "used_labels.union.union", "len", "len", "emb.get", "range", "[].split", "set", "line.strip", "line.strip", "int", "float", "numpy.mean", "numpy.zeros", "len", "len", "parent_child_map[].append", "label_emb[].astype", "tf_idf_label_emb[].astype", "range", "json.loads", "emb.get", "conf.data.label_map_of_relation_files.split", "len", "len", "numpy.zeros"], "function", ["home.repos.pwc.inspect_result.MemoriesJ_KAMG.dataset.generate_graph_data.get_hier_adj", "home.repos.pwc.inspect_result.MemoriesJ_KAMG.dataset.generate_graph_data.get_cooc_corr_adj", "home.repos.pwc.inspect_result.MemoriesJ_KAMG.dataset.generate_graph_data.impose_adjs", "home.repos.pwc.inspect_result.MemoriesJ_KAMG.dataset.generate_graph_data.impose_adjs", "home.repos.pwc.inspect_result.MemoriesJ_KAMG.dataset.generate_graph_data.impose_adjs", "home.repos.pwc.inspect_result.MemoriesJ_KAMG.dataset.generate_graph_data.get_simi_adj", "home.repos.pwc.inspect_result.MemoriesJ_KAMG.dataset.generate_graph_data.get_simi_adj"], ["", "def", "main", "(", "conf", ",", "args", ")", ":", "\n", "\n", "# get the label map / reverse label map / parent child map", "\n", "# only labels appear in train/validate/test will be stored", "\n", "    ", "used_labels", "=", "set", "(", ")", "\n", "for", "f", "in", "conf", ".", "data", ".", "train_json_files", "+", "conf", ".", "data", ".", "validate_json_files", "+", "conf", ".", "data", ".", "test_json_files", ":", "\n", "        ", "with", "open", "(", "f", ")", "as", "fin", ":", "\n", "            ", "for", "line", "in", "fin", ":", "\n", "                ", "used_labels", "=", "used_labels", ".", "union", "(", "set", "(", "json", ".", "loads", "(", "line", ")", "[", "\"doc_label\"", "]", ")", ")", "\n", "\n", "", "", "", "label_map", "=", "{", "}", "\n", "id2label", "=", "{", "}", "\n", "parent_child_map", "=", "{", "}", "\n", "with", "open", "(", "conf", ".", "task_info", ".", "hierar_taxonomy", ")", "as", "fin", ":", "\n", "        ", "for", "line", "in", "fin", ":", "\n", "            ", "parent", "=", "None", "\n", "for", "label", "in", "line", ".", "strip", "(", "'\\n'", ")", ".", "split", "(", "'\\t'", ")", ":", "\n", "                ", "if", "label", "==", "'Root'", ":", "\n", "                    ", "break", "\n", "", "if", "label", "in", "used_labels", ":", "\n", "                    ", "if", "label", "not", "in", "label_map", ":", "\n", "                        ", "label_map", "[", "label", "]", "=", "len", "(", "label_map", ")", "\n", "id2label", "[", "len", "(", "id2label", ")", "]", "=", "label", "\n", "", "if", "parent", "is", "None", ":", "\n", "                        ", "parent_child_map", "[", "label", "]", "=", "[", "]", "\n", "parent", "=", "label", "\n", "continue", "\n", "", "else", ":", "\n", "                        ", "parent_child_map", "[", "parent", "]", ".", "append", "(", "label", ")", "\n", "\n", "# get original label map", "\n", "", "", "", "", "", "print", "(", "\"saving label map of adjacency files. \"", ")", "\n", "with", "open", "(", "conf", ".", "data", ".", "label_map_of_relation_files", ",", "mode", "=", "'w'", ")", "as", "fout", ":", "\n", "        ", "for", "k", "in", "label_map", ":", "\n", "            ", "fout", ".", "write", "(", "\"{}\\t{}\\n\"", ".", "format", "(", "k", ",", "label_map", "[", "k", "]", ")", ")", "\n", "\n", "# load pretrained token embedding", "\n", "", "", "emb", "=", "{", "}", "\n", "with", "open", "(", "conf", ".", "feature", ".", "token_pretrained_file", ")", "as", "fin", ":", "\n", "        ", "for", "line", "in", "fin", ":", "\n", "            ", "data", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "\n", "# Check embedding info", "\n", "if", "len", "(", "data", ")", "==", "2", ":", "\n", "                ", "assert", "int", "(", "data", "[", "1", "]", ")", "==", "conf", ".", "label_embedding", ".", "dimension", ",", "\"Pretrained embedding dim not matching: %s, %d\"", "%", "(", "\n", "data", "[", "1", "]", ",", "conf", ".", "label_embedding", ".", "dimension", ")", "\n", "continue", "\n", "", "emb", "[", "data", "[", "0", "]", "]", "=", "np", ".", "array", "(", "[", "float", "(", "i", ")", "for", "i", "in", "data", "[", "1", ":", "]", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "# get label embedding", "\n", "", "", "label_emb", "=", "{", "}", "\n", "label_tokens", "=", "{", "}", "\n", "with", "open", "(", "conf", ".", "data", ".", "label_token_file", ")", "as", "fin", ":", "\n", "        ", "for", "line", "in", "fin", ":", "\n", "            ", "content", "=", "json", ".", "loads", "(", "line", ")", "\n", "label", "=", "content", "[", "\"label\"", "]", "\n", "tokens", "=", "content", "[", "\"label_token\"", "]", "\n", "if", "label", "not", "in", "label_map", ":", "\n", "                ", "continue", "\n", "", "label_tokens", "[", "label", "]", "=", "tokens", "\n", "label_emb", "[", "label", "]", "=", "np", ".", "mean", "(", "[", "emb", ".", "get", "(", "token", ",", "np", ".", "zeros", "(", "conf", ".", "embedding", ".", "dimension", ")", ")", "\n", "for", "token", "in", "tokens", "]", ",", "axis", "=", "0", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "", "", "vectorizer", "=", "TfidfVectorizer", "(", "stop_words", "=", "'english'", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "label_tokens_str", "=", "[", "\" \"", ".", "join", "(", "label_tokens", "[", "id2label", "[", "i", "]", "]", ")", "for", "i", "in", "range", "(", "len", "(", "id2label", ")", ")", "]", "\n", "label_tokens_tfidf", "=", "vectorizer", ".", "fit_transform", "(", "label_tokens_str", ")", "\n", "ordered_tokens", "=", "vectorizer", ".", "get_feature_names", "(", ")", "\n", "label_ordered_tokens_emb", "=", "np", ".", "array", "(", "[", "[", "emb", ".", "get", "(", "token", ",", "np", ".", "zeros", "(", "conf", ".", "embedding", ".", "dimension", ")", ")", "\n", "for", "token", "in", "ordered_tokens", "]", "\n", "for", "_", "in", "range", "(", "len", "(", "id2label", ")", ")", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "tf_idf_label_emb", "=", "np", ".", "einsum", "(", "'ikl,ik->il'", ",", "label_ordered_tokens_emb", ",", "label_tokens_tfidf", ".", "todense", "(", ")", ")", "\n", "\n", "print", "(", "\"saving pretrained label embedding. \"", ")", "\n", "prefix", "=", "conf", ".", "data", ".", "label_map_of_relation_files", ".", "split", "(", "'/'", ")", "[", "1", "]", ".", "split", "(", "'_'", ")", "[", "0", "]", ".", "strip", "(", ")", "\n", "with", "open", "(", "\"data/{}_label_avg_embedding.txt\"", ".", "format", "(", "prefix", ")", ",", "mode", "=", "'w'", ")", "as", "fout", ":", "\n", "        ", "for", "label", "in", "label_emb", ":", "\n", "            ", "fout", ".", "write", "(", "\"{} {}\\n\"", ".", "format", "(", "label", ",", "\" \"", ".", "join", "(", "label_emb", "[", "label", "]", ".", "astype", "(", "np", ".", "str", ")", ")", ")", ")", "\n", "", "", "with", "open", "(", "\"data/{}_label_tfidf_embedding.txt\"", ".", "format", "(", "prefix", ")", ",", "mode", "=", "'w'", ")", "as", "fout", ":", "\n", "        ", "for", "i", "in", "range", "(", "tf_idf_label_emb", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "label", "=", "id2label", "[", "i", "]", "\n", "fout", ".", "write", "(", "\"{} {}\\n\"", ".", "format", "(", "label", ",", "\" \"", ".", "join", "(", "tf_idf_label_emb", "[", "i", "]", ".", "astype", "(", "np", ".", "str", ")", ")", ")", ")", "\n", "\n", "# get hierarchy graph", "\n", "", "", "hier_adj", "=", "get_hier_adj", "(", "parent_child_map", ",", "label_map", ")", "\n", "print", "(", "\"Number of edges in hierarchy graph:\"", ",", "hier_adj", ".", "nnz", ")", "\n", "print", "(", "\"save hierarchy adj file. \"", ")", "\n", "sp", ".", "save_npz", "(", "conf", ".", "data", ".", "label_relation_candidate_files", "[", "\"hierarchy\"", "]", ",", "hier_adj", ")", "\n", "\n", "# get cooc & corr adj", "\n", "cooc_adj", ",", "corr_adj", "=", "get_cooc_corr_adj", "(", "id2label", ",", "conf", ",", "cooc_threshold", "=", "args", ".", "cooc_threshold", ")", "\n", "\n", "print", "(", "\"Number of edges in co-occurrence graph:\"", ",", "cooc_adj", ".", "nnz", ")", "\n", "print", "(", "\"save co-occurrence adj file. \"", ")", "\n", "sp", ".", "save_npz", "(", "conf", ".", "data", ".", "label_relation_candidate_files", "[", "\"cooccurrence\"", "]", ",", "cooc_adj", ")", "\n", "\n", "print", "(", "\"Number of edges in correlation graph:\"", ",", "corr_adj", ".", "nnz", ")", "\n", "print", "(", "\"save correlation adj file. \"", ")", "\n", "sp", ".", "save_npz", "(", "conf", ".", "data", ".", "label_relation_candidate_files", "[", "\"correlation\"", "]", ",", "corr_adj", ")", "\n", "\n", "# get simi adj", "\n", "if", "args", ".", "tfidf_simi", ":", "\n", "        ", "simi_adj", "=", "get_simi_adj", "(", "tf_idf_label_emb", ",", "simi_threshold", "=", "args", ".", "simi_threshold", ")", "\n", "", "else", ":", "\n", "        ", "simi_adj", "=", "get_simi_adj", "(", "np", ".", "array", "(", "[", "label_emb", "[", "id2label", "[", "i", "]", "]", "for", "i", "in", "range", "(", "len", "(", "id2label", ")", ")", "]", ")", ",", "\n", "simi_threshold", "=", "args", ".", "simi_threshold", ")", "\n", "", "print", "(", "\"Number of edges in similarity graph:\"", ",", "simi_adj", ".", "nnz", ")", "\n", "print", "(", "\"save similarity adj file. \"", ")", "\n", "sp", ".", "save_npz", "(", "conf", ".", "data", ".", "label_relation_candidate_files", "[", "\"similarity\"", "]", ",", "simi_adj", ")", "\n", "\n", "# impose hier-cooc", "\n", "hier_cooc_impose_adj", "=", "impose_adjs", "(", "hier_adj", ",", "cooc_adj", ")", "\n", "print", "(", "\"Number of edges in imposed graph of hierarchy and co-occurrence:\"", ",", "hier_cooc_impose_adj", ".", "nnz", ")", "\n", "print", "(", "\"save hierarchy and co-occurrence imposed adj file. \"", ")", "\n", "sp", ".", "save_npz", "(", "conf", ".", "data", ".", "label_relation_candidate_files", "[", "\"hierarchy_cooccurrence_impose\"", "]", ",", "hier_cooc_impose_adj", ")", "\n", "\n", "# impose hier-corr", "\n", "hier_corr_impose_adj", "=", "impose_adjs", "(", "hier_adj", ",", "corr_adj", ")", "\n", "print", "(", "\"Number of edges in imposed graph of hierarchy and correlation:\"", ",", "hier_corr_impose_adj", ".", "nnz", ")", "\n", "print", "(", "\"save hierarchy and correlation imposed adj file. \"", ")", "\n", "sp", ".", "save_npz", "(", "conf", ".", "data", ".", "label_relation_candidate_files", "[", "\"hierarchy_correlation_impose\"", "]", ",", "hier_corr_impose_adj", ")", "\n", "\n", "# impose hier-simi", "\n", "hier_simi_impose_adj", "=", "impose_adjs", "(", "hier_adj", ",", "simi_adj", ")", "\n", "print", "(", "\"Number of edges in imposed graph of hierarchy and similarity:\"", ",", "hier_simi_impose_adj", ".", "nnz", ")", "\n", "print", "(", "\"save hierarchy and similarity imposed adj file. \"", ")", "\n", "sp", ".", "save_npz", "(", "conf", ".", "data", ".", "label_relation_candidate_files", "[", "\"hierarchy_similarity_impose\"", "]", ",", "hier_simi_impose_adj", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.model.rnn.RNNType.str": [[25, 28], ["None"], "methods", ["None"], ["@", "classmethod", "\n", "def", "str", "(", "cls", ")", ":", "\n", "        ", "return", "\",\"", ".", "join", "(", "[", "cls", ".", "RNN", ",", "cls", ".", "LSTM", ",", "cls", ".", "GRU", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.model.rnn.RNN.__init__": [[35, 62], ["super().__init__", "torch.nn.LSTM", "torch.nn.GRU", "torch.nn.RNN", "TypeError", "rnn.RNNType.str"], "methods", ["home.repos.pwc.inspect_result.MemoriesJ_KAMG.evaluate.classification_evaluate.ClassificationEvaluator.__init__", "home.repos.pwc.inspect_result.MemoriesJ_KAMG.classification.attentive_convolution.AttentionType.str"], ["def", "__init__", "(", "self", ",", "input_size", ",", "hidden_size", ",", "num_layers", "=", "1", ",", "\n", "nonlinearity", "=", "\"tanh\"", ",", "bias", "=", "True", ",", "batch_first", "=", "False", ",", "dropout", "=", "0", ",", "\n", "bidirectional", "=", "False", ",", "rnn_type", "=", "RNNType", ".", "GRU", ")", ":", "\n", "        ", "super", "(", "RNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "rnn_type", "=", "rnn_type", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "batch_first", "=", "batch_first", "\n", "self", ".", "bidirectional", "=", "bidirectional", "\n", "if", "rnn_type", "==", "RNNType", ".", "LSTM", ":", "\n", "            ", "self", ".", "rnn", "=", "torch", ".", "nn", ".", "LSTM", "(", "\n", "input_size", ",", "hidden_size", ",", "num_layers", "=", "num_layers", ",", "bias", "=", "bias", ",", "\n", "batch_first", "=", "batch_first", ",", "dropout", "=", "dropout", ",", "\n", "bidirectional", "=", "bidirectional", ")", "\n", "", "elif", "rnn_type", "==", "RNNType", ".", "GRU", ":", "\n", "            ", "self", ".", "rnn", "=", "torch", ".", "nn", ".", "GRU", "(", "\n", "input_size", ",", "hidden_size", ",", "num_layers", "=", "num_layers", ",", "bias", "=", "bias", ",", "\n", "batch_first", "=", "batch_first", ",", "dropout", "=", "dropout", ",", "\n", "bidirectional", "=", "bidirectional", ")", "\n", "", "elif", "rnn_type", "==", "RNNType", ".", "RNN", ":", "\n", "            ", "self", ".", "rnn", "=", "torch", ".", "nn", ".", "RNN", "(", "\n", "input_size", ",", "hidden_size", ",", "nonlinearity", "=", "nonlinearity", ",", "bias", "=", "bias", ",", "\n", "batch_first", "=", "batch_first", ",", "dropout", "=", "dropout", ",", "\n", "bidirectional", "=", "bidirectional", ")", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "\n", "\"Unsupported rnn init type: %s. Supported rnn type is: %s\"", "%", "(", "\n", "rnn_type", ",", "RNNType", ".", "str", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.model.rnn.RNN.forward": [[63, 127], ["rnn.RNN.rnn", "rnn.RNN.rnn", "torch.nn.utils.rnn.pack_padded_sequence", "seq_lengths.int.int.int", "torch.sort", "torch.nn.utils.rnn.pack_padded_sequence", "torch.cat", "torch.nn.utils.rnn.pad_packed_sequence", "torch.sort", "torch.nn.utils.rnn.pad_packed_sequence"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "inputs", ",", "seq_lengths", "=", "None", ",", "init_state", "=", "None", ",", "\n", "ori_state", "=", "False", ",", "enforce_sorted", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            inputs:\n            seq_lengths:\n            init_state:\n            ori_state: If true, will return ori state generate by rnn. Else will\n                       will return formatted state\n        :return:\n        \"\"\"", "\n", "if", "seq_lengths", "is", "not", "None", ":", "\n", "\n", "            ", "if", "not", "enforce_sorted", ":", "\n", "                ", "packed_inputs", "=", "torch", ".", "nn", ".", "utils", ".", "rnn", ".", "pack_padded_sequence", "(", "\n", "inputs", ",", "seq_lengths", ",", "batch_first", "=", "self", ".", "batch_first", ",", "enforce_sorted", "=", "enforce_sorted", ")", "\n", "", "else", ":", "\n", "                ", "seq_lengths", "=", "seq_lengths", ".", "int", "(", ")", "\n", "sorted_seq_lengths", ",", "indices", "=", "torch", ".", "sort", "(", "seq_lengths", ",", "\n", "descending", "=", "True", ")", "\n", "if", "self", ".", "batch_first", ":", "\n", "                    ", "sorted_inputs", "=", "inputs", "[", "indices", "]", "\n", "", "else", ":", "\n", "                    ", "sorted_inputs", "=", "inputs", "[", ":", ",", "indices", "]", "\n", "\n", "", "packed_inputs", "=", "torch", ".", "nn", ".", "utils", ".", "rnn", ".", "pack_padded_sequence", "(", "\n", "sorted_inputs", ",", "sorted_seq_lengths", ",", "batch_first", "=", "self", ".", "batch_first", ",", "enforce_sorted", "=", "enforce_sorted", ")", "\n", "\n", "", "outputs", ",", "state", "=", "self", ".", "rnn", "(", "packed_inputs", ",", "init_state", ")", "\n", "\n", "", "else", ":", "\n", "            ", "outputs", ",", "state", "=", "self", ".", "rnn", "(", "inputs", ",", "init_state", ")", "\n", "\n", "", "if", "ori_state", ":", "\n", "            ", "return", "outputs", ",", "state", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "rnn_type", "==", "RNNType", ".", "LSTM", ":", "\n", "                ", "state", "=", "state", "[", "0", "]", "\n", "\n", "", "if", "self", ".", "bidirectional", ":", "\n", "                ", "last_layers_hn", "=", "state", "[", "2", "*", "(", "self", ".", "num_layers", "-", "1", ")", ":", "]", "\n", "last_layers_hn", "=", "torch", ".", "cat", "(", "\n", "(", "last_layers_hn", "[", "0", "]", ",", "last_layers_hn", "[", "1", "]", ")", ",", "1", ")", "\n", "", "else", ":", "\n", "                ", "last_layers_hn", "=", "state", "[", "self", ".", "num_layers", "-", "1", ":", "]", "\n", "last_layers_hn", "=", "last_layers_hn", "[", "0", "]", "\n", "\n", "", "", "if", "seq_lengths", "is", "not", "None", ":", "\n", "\n", "            ", "if", "not", "enforce_sorted", ":", "\n", "                ", "pad_output", ",", "_", "=", "torch", ".", "nn", ".", "utils", ".", "rnn", ".", "pad_packed_sequence", "(", "\n", "outputs", ",", "batch_first", "=", "self", ".", "batch_first", ")", "\n", "", "else", ":", "\n", "                ", "_", ",", "revert_indices", "=", "torch", ".", "sort", "(", "indices", ",", "descending", "=", "False", ")", "\n", "last_layers_hn", "=", "last_layers_hn", "[", "revert_indices", "]", "\n", "pad_output", ",", "_", "=", "torch", ".", "nn", ".", "utils", ".", "rnn", ".", "pad_packed_sequence", "(", "\n", "outputs", ",", "batch_first", "=", "self", ".", "batch_first", ")", "\n", "if", "self", ".", "batch_first", ":", "\n", "                    ", "pad_output", "=", "pad_output", "[", "revert_indices", "]", "\n", "", "else", ":", "\n", "                    ", "pad_output", "=", "pad_output", "[", ":", ",", "revert_indices", "]", "\n", "", "", "outputs", "=", "pad_output", "\n", "\n", "", "return", "outputs", ",", "last_layers_hn", "\n", "", "", ""]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.model.transformer_encoder.PositionwiseFeedForward.__init__": [[31, 37], ["torch.Module.__init__", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.LayerNorm", "torch.LayerNorm", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.MemoriesJ_KAMG.evaluate.classification_evaluate.ClassificationEvaluator.__init__"], ["def", "__init__", "(", "self", ",", "d_in", ",", "d_hid", ",", "dropout", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "PositionwiseFeedForward", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "w_1", "=", "nn", ".", "Conv1d", "(", "d_in", ",", "d_hid", ",", "1", ")", "# position-wise", "\n", "self", ".", "w_2", "=", "nn", ".", "Conv1d", "(", "d_hid", ",", "d_in", ",", "1", ")", "# position-wise", "\n", "self", ".", "layer_norm", "=", "nn", ".", "LayerNorm", "(", "d_in", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.model.transformer_encoder.PositionwiseFeedForward.forward": [[38, 46], ["x.transpose", "transformer_encoder.PositionwiseFeedForward.w_2", "transformer_encoder.PositionwiseFeedForward.transpose", "transformer_encoder.PositionwiseFeedForward.dropout", "transformer_encoder.PositionwiseFeedForward.layer_norm", "torch.relu_", "torch.relu_", "torch.relu_", "torch.relu_", "transformer_encoder.PositionwiseFeedForward.w_1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "output", "=", "x", ".", "transpose", "(", "1", ",", "2", ")", "\n", "output", "=", "self", ".", "w_2", "(", "torch", ".", "relu_", "(", "self", ".", "w_1", "(", "output", ")", ")", ")", "\n", "output", "=", "output", ".", "transpose", "(", "1", ",", "2", ")", "\n", "output", "=", "self", ".", "dropout", "(", "output", ")", "\n", "output", "=", "self", ".", "layer_norm", "(", "output", "+", "residual", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.model.transformer_encoder.EncoderLayer.__init__": [[51, 56], ["torch.Module.__init__", "model.attention.MultiHeadAttention", "transformer_encoder.PositionwiseFeedForward"], "methods", ["home.repos.pwc.inspect_result.MemoriesJ_KAMG.evaluate.classification_evaluate.ClassificationEvaluator.__init__"], ["def", "__init__", "(", "self", ",", "d_model", ",", "d_inner", ",", "n_head", ",", "d_k", ",", "d_v", ",", "dropout", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "EncoderLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "slf_attn", "=", "MultiHeadAttention", "(", "\n", "n_head", ",", "d_model", ",", "d_k", ",", "d_v", ",", "dropout", "=", "dropout", ")", "\n", "self", ".", "pos_ffn", "=", "PositionwiseFeedForward", "(", "d_model", ",", "d_inner", ",", "dropout", "=", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.model.transformer_encoder.EncoderLayer.forward": [[57, 66], ["transformer_encoder.EncoderLayer.slf_attn", "transformer_encoder.EncoderLayer.pos_ffn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "enc_input", ",", "non_pad_mask", "=", "None", ",", "slf_attn_mask", "=", "None", ")", ":", "\n", "        ", "enc_output", ",", "enc_slf_attn", "=", "self", ".", "slf_attn", "(", "\n", "enc_input", ",", "enc_input", ",", "enc_input", ",", "mask", "=", "slf_attn_mask", ")", "\n", "enc_output", "*=", "non_pad_mask", "\n", "\n", "enc_output", "=", "self", ".", "pos_ffn", "(", "enc_output", ")", "\n", "enc_output", "*=", "non_pad_mask", "\n", "\n", "return", "enc_output", ",", "enc_slf_attn", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.model.transformer_encoder.StarEncoderLayer.__init__": [[71, 77], ["torch.Module.__init__", "model.attention.MultiHeadAttention", "model.attention.MultiHeadAttention"], "methods", ["home.repos.pwc.inspect_result.MemoriesJ_KAMG.evaluate.classification_evaluate.ClassificationEvaluator.__init__"], ["def", "__init__", "(", "self", ",", "d_model", ",", "n_head", ",", "d_k", ",", "d_v", ",", "dropout", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "StarEncoderLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "slf_attn_satellite", "=", "MultiHeadAttention", "(", "\n", "n_head", ",", "d_model", ",", "d_k", ",", "d_v", ",", "use_star", "=", "True", ",", "dropout", "=", "dropout", ")", "\n", "self", ".", "slf_attn_relay", "=", "MultiHeadAttention", "(", "\n", "n_head", ",", "d_model", ",", "d_k", ",", "d_v", ",", "use_star", "=", "True", ",", "dropout", "=", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.model.transformer_encoder.StarEncoderLayer.forward": [[78, 107], ["torch.squeeze().reshape.size", "torch.squeeze().reshape.size", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.squeeze.reshape", "torch.squeeze.reshape", "torch.squeeze.expand", "torch.squeeze.expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "context.reshape.reshape.reshape", "torch.squeeze().reshape.reshape", "torch.squeeze().reshape.reshape", "transformer_encoder.StarEncoderLayer.slf_attn_satellite", "torch.squeeze().reshape", "torch.squeeze().reshape", "torch.squeeze().reshape", "torch.squeeze().reshape", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "transformer_encoder.StarEncoderLayer.slf_attn_relay", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "h", ",", "e", ",", "s", ",", "non_pad_mask", "=", "None", ",", "slf_attn_mask", "=", "None", ")", ":", "\n", "# satellite node", "\n", "        ", "batch_size", ",", "seq_len", ",", "d_model", "=", "h", ".", "size", "(", ")", "\n", "h_extand", "=", "torch", ".", "zeros", "(", "batch_size", ",", "seq_len", "+", "2", ",", "d_model", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "h", ".", "device", ")", "\n", "h_extand", "[", ":", ",", "1", ":", "seq_len", "+", "1", ",", ":", "]", "=", "h", "# head and tail padding(not cycle)", "\n", "s", "=", "s", ".", "reshape", "(", "[", "batch_size", ",", "1", ",", "d_model", "]", ")", "\n", "s_expand", "=", "s", ".", "expand", "(", "[", "batch_size", ",", "seq_len", ",", "d_model", "]", ")", "\n", "context", "=", "torch", ".", "cat", "(", "(", "h_extand", "[", ":", ",", "0", ":", "seq_len", ",", ":", "]", ",", "\n", "h_extand", "[", ":", ",", "1", ":", "seq_len", "+", "1", ",", ":", "]", ",", "\n", "h_extand", "[", ":", ",", "2", ":", "seq_len", "+", "2", ",", ":", "]", ",", "\n", "e", ",", "\n", "s_expand", ")", ",", "\n", "2", ")", "\n", "context", "=", "context", ".", "reshape", "(", "[", "batch_size", "*", "seq_len", ",", "5", ",", "d_model", "]", ")", "\n", "h", "=", "h", ".", "reshape", "(", "[", "batch_size", "*", "seq_len", ",", "1", ",", "d_model", "]", ")", "\n", "\n", "h", ",", "_", "=", "self", ".", "slf_attn_satellite", "(", "\n", "h", ",", "context", ",", "context", ",", "mask", "=", "slf_attn_mask", ")", "\n", "h", "=", "torch", ".", "squeeze", "(", "h", ",", "1", ")", ".", "reshape", "(", "[", "batch_size", ",", "seq_len", ",", "d_model", "]", ")", "\n", "if", "non_pad_mask", "is", "not", "None", ":", "\n", "            ", "h", "*=", "non_pad_mask", "\n", "\n", "# virtual relay node", "\n", "", "s_h", "=", "torch", ".", "cat", "(", "(", "s", ",", "h", ")", ",", "1", ")", "\n", "s", ",", "_", "=", "self", ".", "slf_attn_relay", "(", "\n", "s", ",", "s_h", ",", "s_h", ",", "mask", "=", "slf_attn_mask", ")", "\n", "s", "=", "torch", ".", "squeeze", "(", "s", ",", "1", ")", "\n", "\n", "return", "h", ",", "s", "\n", "", "", ""]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.model.fusion.FusionType.str": [[16, 19], ["None"], "methods", ["None"], ["@", "classmethod", "\n", "def", "str", "(", "cls", ")", ":", "\n", "        ", "return", "\",\"", ".", "join", "(", "[", "cls", ".", "ATTACH", ",", "cls", ".", "CONCATENATION", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.model.fusion.FusionConcatenation.__init__": [[23, 29], ["super().__init__", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.MemoriesJ_KAMG.evaluate.classification_evaluate.ClassificationEvaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ",", "bias", ")", ":", "\n", "        ", "super", "(", "FusionConcatenation", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "linear", "=", "torch", ".", "nn", ".", "Linear", "(", "\n", "in_features", "=", "in_features", ",", "\n", "out_features", "=", "out_features", ",", "\n", "bias", "=", "bias", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.model.fusion.FusionConcatenation.forward": [[31, 34], ["torch.cat", "fusion.FusionConcatenation.linear"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "tuple_of_tensors", ")", ":", "\n", "        ", "out", "=", "torch", ".", "cat", "(", "tuple_of_tensors", ",", "dim", "=", "-", "1", ")", "\n", "return", "self", ".", "linear", "(", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.model.fusion.Fusion.__init__": [[38, 49], ["super().__init__", "fusion.FusionConcatenation", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.MemoriesJ_KAMG.evaluate.classification_evaluate.ClassificationEvaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "Fusion", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "config", ".", "fusion", ".", "fusion_type", "==", "FusionType", ".", "ATTACH", ":", "\n", "            ", "self", ".", "fuse", "=", "lambda", "x", ":", "torch", ".", "cat", "(", "x", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "if", "config", ".", "fusion", ".", "fusion_type", "==", "FusionType", ".", "CONCATENATION", ":", "\n", "            ", "self", ".", "fuse", "=", "FusionConcatenation", "(", "\n", "in_features", "=", "config", ".", "fusion", ".", "in_features", ",", "\n", "out_features", "=", "config", ".", "fusion", ".", "out_features", ",", "\n", "bias", "=", "config", ".", "fusion", ".", "bias", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.model.fusion.Fusion.forward": [[51, 53], ["fusion.Fusion.fuse"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "tuple_of_tensors", ")", ":", "\n", "        ", "return", "self", ".", "fuse", "(", "tuple_of_tensors", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.model.layers.SumAttention.__init__": [[27, 35], ["super().__init__", "torch.nn.Linear().to", "torch.nn.Linear().to", "model.model_util.init_tensor", "model.model_util.init_tensor", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.MemoriesJ_KAMG.evaluate.classification_evaluate.ClassificationEvaluator.__init__", "home.repos.pwc.inspect_result.MemoriesJ_KAMG.model.model_util.init_tensor", "home.repos.pwc.inspect_result.MemoriesJ_KAMG.model.model_util.init_tensor"], ["def", "__init__", "(", "self", ",", "input_dimension", ",", "attention_dimension", ",", "device", ",", "dropout", "=", "0", ")", ":", "\n", "        ", "super", "(", "SumAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "attention_matrix", "=", "torch", ".", "nn", ".", "Linear", "(", "input_dimension", ",", "attention_dimension", ")", ".", "to", "(", "device", ")", "\n", "self", ".", "attention_vector", "=", "torch", ".", "nn", ".", "Linear", "(", "attention_dimension", ",", "1", ",", "bias", "=", "False", ")", ".", "to", "(", "device", ")", "\n", "init_tensor", "(", "self", ".", "attention_matrix", ".", "weight", ")", "\n", "init_tensor", "(", "self", ".", "attention_vector", ".", "weight", ")", "\n", "self", ".", "dropout", "=", "torch", ".", "nn", ".", "Dropout", "(", "p", "=", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.model.layers.SumAttention.forward": [[36, 43], ["torch.tanh", "layers.SumAttention.attention_vector", "torch.nn.functional.softmax().squeeze().unsqueeze", "layers.SumAttention.dropout", "inputs.size", "layers.SumAttention.dropout", "layers.SumAttention.attention_matrix", "torch.matmul().squeeze", "inputs.squeeze", "torch.nn.functional.softmax().squeeze", "torch.matmul", "torch.nn.functional.softmax"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "if", "inputs", ".", "size", "(", "1", ")", "==", "1", ":", "\n", "            ", "return", "self", ".", "dropout", "(", "inputs", ".", "squeeze", "(", ")", ")", "\n", "", "u", "=", "torch", ".", "tanh", "(", "self", ".", "attention_matrix", "(", "inputs", ")", ")", "\n", "v", "=", "self", ".", "attention_vector", "(", "u", ")", "\n", "alpha", "=", "torch", ".", "nn", ".", "functional", ".", "softmax", "(", "v", ",", "1", ")", ".", "squeeze", "(", ")", ".", "unsqueeze", "(", "1", ")", "\n", "return", "self", ".", "dropout", "(", "torch", ".", "matmul", "(", "alpha", ",", "inputs", ")", ".", "squeeze", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.model.layers.AdditiveAttention.__init__": [[51, 58], ["super().__init__", "model.model_util.init_tensor", "model.model_util.init_tensor", "model.model_util.init_tensor", "torch.nn.Dropout", "torch.empty", "torch.empty", "torch.empty"], "methods", ["home.repos.pwc.inspect_result.MemoriesJ_KAMG.evaluate.classification_evaluate.ClassificationEvaluator.__init__", "home.repos.pwc.inspect_result.MemoriesJ_KAMG.model.model_util.init_tensor", "home.repos.pwc.inspect_result.MemoriesJ_KAMG.model.model_util.init_tensor", "home.repos.pwc.inspect_result.MemoriesJ_KAMG.model.model_util.init_tensor"], ["def", "__init__", "(", "self", ",", "dim", ",", "dropout", "=", "0", ")", ":", "\n", "        ", "super", "(", "AdditiveAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "w_attention_matrix", "=", "init_tensor", "(", "torch", ".", "empty", "(", "dim", ",", "dim", ")", ")", "\n", "self", ".", "u_attention_matrix", "=", "init_tensor", "(", "torch", ".", "empty", "(", "dim", ",", "dim", ")", ")", "\n", "self", ".", "v_attention_vector", "=", "init_tensor", "(", "torch", ".", "empty", "(", "dim", ",", "1", ")", ")", "\n", "\n", "self", ".", "dropout", "=", "torch", ".", "nn", ".", "Dropout", "(", "p", "=", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.model.layers.AdditiveAttention.forward": [[59, 61], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "s", ",", "h", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.model.layers.AdditiveAttention1D.forward": [[69, 76], ["s.matmul().unsqueeze", "h.matmul", "torch.tanh", "attention.matmul().squeeze.matmul().squeeze.matmul().squeeze", "torch.nn.functional.softmax", "layers.AdditiveAttention1D.dropout", "torch.nn.functional.softmax.unsqueeze().matmul().squeeze", "s.matmul", "attention.matmul().squeeze.matmul().squeeze.matmul", "torch.nn.functional.softmax.unsqueeze().matmul", "torch.nn.functional.softmax.unsqueeze"], "methods", ["None"], ["def", "forward", "(", "self", ",", "s", ",", "h", ")", ":", "\n", "        ", "s_attention", "=", "s", ".", "matmul", "(", "self", ".", "w_attention_matrix", ")", ".", "unsqueeze", "(", "1", ")", "\n", "h_attention", "=", "h", ".", "matmul", "(", "self", ".", "u_attention_matrix", ")", "\n", "attention", "=", "torch", ".", "tanh", "(", "s_attention", "+", "h_attention", ")", "\n", "attention", "=", "attention", ".", "matmul", "(", "self", ".", "v_attention_vector", ")", ".", "squeeze", "(", ")", "\n", "attention_weight", "=", "torch", ".", "nn", ".", "functional", ".", "softmax", "(", "attention", ",", "-", "1", ")", "\n", "return", "self", ".", "dropout", "(", "attention_weight", ".", "unsqueeze", "(", "1", ")", ".", "matmul", "(", "h", ")", ".", "squeeze", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.model.layers.AdditiveAttention2D.forward": [[84, 93], ["s.matmul().unsqueeze", "h.matmul().unsqueeze", "h.size", "h_attention.expand.expand.expand", "torch.nn.functional.tanh", "attention.matmul().squeeze.matmul().squeeze.matmul().squeeze", "torch.nn.functional.softmax", "layers.AdditiveAttention2D.dropout", "torch.nn.functional.softmax.unsqueeze().matmul().squeeze", "s.matmul", "h.matmul", "attention.matmul().squeeze.matmul().squeeze.matmul", "torch.nn.functional.softmax.unsqueeze().matmul", "torch.nn.functional.softmax.unsqueeze"], "methods", ["None"], ["def", "forward", "(", "self", ",", "s", ",", "h", ")", ":", "\n", "        ", "s_attention", "=", "s", ".", "matmul", "(", "self", ".", "w_attention_matrix", ")", ".", "unsqueeze", "(", "2", ")", "\n", "h_attention", "=", "h", ".", "matmul", "(", "self", ".", "u_attention_matrix", ")", ".", "unsqueeze", "(", "1", ")", "\n", "seq_len", "=", "h", ".", "size", "(", "1", ")", "\n", "h_attention", "=", "h_attention", ".", "expand", "(", "-", "1", ",", "seq_len", ",", "-", "1", ",", "-", "1", ")", "\n", "attention", "=", "torch", ".", "nn", ".", "functional", ".", "tanh", "(", "s_attention", "+", "h_attention", ")", "\n", "attention", "=", "attention", ".", "matmul", "(", "self", ".", "v_attention_vector", ")", ".", "squeeze", "(", ")", "\n", "attention_weight", "=", "torch", ".", "nn", ".", "functional", ".", "softmax", "(", "attention", ",", "-", "1", ")", "\n", "return", "self", ".", "dropout", "(", "attention_weight", ".", "unsqueeze", "(", "2", ")", ".", "matmul", "(", "h", ")", ".", "squeeze", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.model.layers.DotProductAttention.__init__": [[103, 107], ["super().__init__", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.MemoriesJ_KAMG.evaluate.classification_evaluate.ClassificationEvaluator.__init__"], ["def", "__init__", "(", "self", ",", "scaling_factor", "=", "None", ",", "dropout", "=", "0", ")", ":", "\n", "        ", "super", "(", "DotProductAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "scaling_factor", "=", "scaling_factor", "\n", "self", ".", "dropout", "=", "torch", ".", "nn", ".", "Dropout", "(", "p", "=", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.model.layers.DotProductAttention.forward": [[108, 114], ["torch.nn.functional.softmax", "layers.DotProductAttention.dropout", "q.matmul", "torch.nn.functional.softmax.matmul", "math.sqrt", "k.permute", "q.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "q", ",", "k", ",", "v", ")", ":", "\n", "        ", "if", "self", ".", "scaling_factor", "is", "None", ":", "\n", "            ", "self", ".", "scaling_factor", "=", "1", "/", "math", ".", "sqrt", "(", "q", ".", "size", "(", "2", ")", ")", "\n", "", "e", "=", "q", ".", "matmul", "(", "k", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", "/", "self", ".", "scaling_factor", "\n", "attention_weight", "=", "torch", ".", "nn", ".", "functional", ".", "softmax", "(", "e", ",", "-", "1", ")", "\n", "return", "self", ".", "dropout", "(", "attention_weight", ".", "matmul", "(", "v", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.model.layers.MultiHeadAttention.__init__": [[121, 132], ["super().__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.MemoriesJ_KAMG.evaluate.classification_evaluate.ClassificationEvaluator.__init__"], ["def", "__init__", "(", "self", ",", "dimension", ",", "dk", ",", "dv", ",", "head_number", ",", "\n", "scaling_factor", ",", "dropout", "=", "0", ")", ":", "\n", "        ", "super", "(", "MultiHeadAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dk", "=", "dk", "\n", "self", ".", "dv", "=", "dv", "\n", "self", ".", "head_number", "=", "head_number", "\n", "self", ".", "q_linear", "=", "torch", ".", "nn", ".", "Linear", "(", "dimension", ",", "head_number", "*", "dk", ")", "\n", "self", ".", "k_linear", "=", "torch", ".", "nn", ".", "Linear", "(", "dimension", ",", "head_number", "*", "dk", ")", "\n", "self", ".", "v_linear", "=", "torch", ".", "nn", ".", "Linear", "(", "dimension", ",", "head_number", "*", "dv", ")", "\n", "self", ".", "scaling_factor", "=", "scaling_factor", "\n", "self", ".", "dropout", "=", "torch", ".", "nn", ".", "Dropout", "(", "p", "=", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.model.layers.MultiHeadAttention.forward": [[133, 148], ["layers.MultiHeadAttention.forward._reshape_permute"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "q", ",", "k", ",", "v", ")", ":", "\n", "        ", "def", "_reshape_permute", "(", "x", ",", "d", ",", "head_number", ")", ":", "\n", "            ", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "x", ".", "size", "(", "1", ")", ",", "head_number", ",", "d", ")", "\n", "return", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "\n", "\n", "", "q_trans", "=", "_reshape_permute", "(", "self", ".", "q_linear", "(", "q", ")", ",", "self", ".", "dk", ",", "self", ".", "head_number", ")", "\n", "k_trans", "=", "_reshape_permute", "(", "self", ".", "k_linear", "(", "k", ")", ",", "self", ".", "dk", ",", "self", ".", "head_number", ")", "\n", "v_trans", "=", "_reshape_permute", "(", "self", ".", "v_linear", "(", "v", ")", ",", "self", ".", "dv", ",", "self", ".", "head_number", ")", "\n", "\n", "e", "=", "q_trans", ".", "matmul", "(", "k_trans", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ")", ")", "/", "self", ".", "scaling_factor", "\n", "attention_weight", "=", "torch", ".", "nn", ".", "functional", ".", "softmax", "(", "e", ",", "-", "1", ")", "\n", "output", "=", "attention_weight", ".", "matmul", "(", "v_trans", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "\n", "output", "=", "output", ".", "view", "(", "output", ".", "size", "(", "0", ")", ",", "output", ".", "size", "(", "1", ")", ",", "\n", "output", ".", "size", "(", "2", ")", "*", "output", ".", "size", "(", "3", ")", ")", "\n", "return", "self", ".", "dropout", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.model.layers.Highway.__init__": [[158, 162], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.MemoriesJ_KAMG.evaluate.classification_evaluate.ClassificationEvaluator.__init__"], ["def", "__init__", "(", "self", ",", "transformer_gate", ",", "transformer_forward", ")", ":", "\n", "        ", "super", "(", "Highway", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "transformer_forward", "=", "transformer_forward", "\n", "self", ".", "transformer_gate", "=", "transformer_gate", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.model.layers.Highway.forward": [[163, 171], ["layers.Highway.transformer_gate", "layers.Highway.transformer_forward"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "gate_input", "=", "None", ",", "forward_input", "=", "None", ")", ":", "\n", "        ", "if", "gate_input", "is", "None", ":", "\n", "            ", "gate_input", "=", "x", "\n", "", "if", "forward_input", "is", "None", ":", "\n", "            ", "forward_input", "=", "x", "\n", "", "gate", "=", "self", ".", "transformer_gate", "(", "gate_input", ")", "\n", "forward", "=", "self", ".", "transformer_forward", "(", "forward_input", ")", "\n", "return", "gate", "*", "forward", "+", "(", "1", "-", "gate", ")", "*", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.model.loss.LossType.str": [[29, 35], ["None"], "methods", ["None"], ["@", "classmethod", "\n", "def", "str", "(", "cls", ")", ":", "\n", "        ", "return", "\",\"", ".", "join", "(", "[", "cls", ".", "SOFTMAX_CROSS_ENTROPY", ",", "\n", "cls", ".", "SOFTMAX_FOCAL_CROSS_ENTROPY", ",", "\n", "cls", ".", "SIGMOID_FOCAL_CROSS_ENTROPY", ",", "\n", "cls", ".", "BCE_WITH_LOGITS", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.model.loss.ActivationType.str": [[43, 47], ["None"], "methods", ["None"], ["@", "classmethod", "\n", "def", "str", "(", "cls", ")", ":", "\n", "        ", "return", "\",\"", ".", "join", "(", "[", "cls", ".", "SOFTMAX", ",", "\n", "cls", ".", "SIGMOID", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.model.loss.FocalLoss.__init__": [[55, 63], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.MemoriesJ_KAMG.evaluate.classification_evaluate.ClassificationEvaluator.__init__"], ["def", "__init__", "(", "self", ",", "label_size", ",", "activation_type", "=", "ActivationType", ".", "SOFTMAX", ",", "\n", "gamma", "=", "2.0", ",", "alpha", "=", "0.25", ",", "epsilon", "=", "1.e-9", ")", ":", "\n", "        ", "super", "(", "FocalLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_cls", "=", "label_size", "\n", "self", ".", "activation_type", "=", "activation_type", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.model.loss.FocalLoss.forward": [[64, 98], ["loss.sum.sum.mean", "target.view().long", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "one_hot_key.scatter_.scatter_.scatter_", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "loss.sum.sum.sum", "target.view().long.size", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "TypeError", "target.view", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "loss.sum.ActivationType.str"], "methods", ["home.repos.pwc.inspect_result.MemoriesJ_KAMG.classification.attentive_convolution.AttentionType.str"], ["", "def", "forward", "(", "self", ",", "logits", ",", "target", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            logits: model's output, shape of [batch_size, num_cls]\n            target: ground truth labels, shape of [batch_size]\n        Returns:\n            shape of [batch_size]\n        \"\"\"", "\n", "if", "self", ".", "activation_type", "==", "ActivationType", ".", "SOFTMAX", ":", "\n", "            ", "idx", "=", "target", ".", "view", "(", "-", "1", ",", "1", ")", ".", "long", "(", ")", "\n", "one_hot_key", "=", "torch", ".", "zeros", "(", "idx", ".", "size", "(", "0", ")", ",", "self", ".", "num_cls", ",", "\n", "dtype", "=", "torch", ".", "float", ",", "\n", "device", "=", "idx", ".", "device", ")", "\n", "one_hot_key", "=", "one_hot_key", ".", "scatter_", "(", "1", ",", "idx", ",", "1", ")", "\n", "logits", "=", "torch", ".", "softmax", "(", "logits", ",", "dim", "=", "-", "1", ")", "\n", "loss", "=", "-", "self", ".", "alpha", "*", "one_hot_key", "*", "torch", ".", "pow", "(", "(", "1", "-", "logits", ")", ",", "self", ".", "gamma", ")", "*", "(", "logits", "+", "self", ".", "epsilon", ")", ".", "log", "(", ")", "\n", "loss", "=", "loss", ".", "sum", "(", "1", ")", "\n", "", "elif", "self", ".", "activation_type", "==", "ActivationType", ".", "SIGMOID", ":", "\n", "            ", "multi_hot_key", "=", "target", "\n", "logits", "=", "torch", ".", "sigmoid", "(", "logits", ")", "\n", "zero_hot_key", "=", "1", "-", "multi_hot_key", "\n", "loss", "=", "-", "self", ".", "alpha", "*", "multi_hot_key", "*", "torch", ".", "pow", "(", "(", "1", "-", "logits", ")", ",", "self", ".", "gamma", ")", "*", "(", "logits", "+", "self", ".", "epsilon", ")", ".", "log", "(", ")", "\n", "loss", "+=", "-", "(", "1", "-", "self", ".", "alpha", ")", "*", "zero_hot_key", "*", "torch", ".", "pow", "(", "logits", ",", "self", ".", "gamma", ")", "*", "(", "1", "-", "logits", "+", "self", ".", "epsilon", ")", ".", "log", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "\"Unknown activation type: \"", "+", "self", ".", "activation_type", "\n", "+", "\"Supported activation types: \"", "+", "\n", "ActivationType", ".", "str", "(", ")", ")", "\n", "", "return", "loss", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.model.loss.ClassificationLoss.__init__": [[101, 118], ["super().__init__", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "loss.FocalLoss", "loss.FocalLoss", "torch.nn.BCEWithLogitsLoss", "torch.nn.BCEWithLogitsLoss", "torch.nn.BCEWithLogitsLoss", "torch.nn.BCEWithLogitsLoss", "TypeError", "loss.LossType.str"], "methods", ["home.repos.pwc.inspect_result.MemoriesJ_KAMG.evaluate.classification_evaluate.ClassificationEvaluator.__init__", "home.repos.pwc.inspect_result.MemoriesJ_KAMG.classification.attentive_convolution.AttentionType.str"], ["    ", "def", "__init__", "(", "self", ",", "label_size", ",", "class_weight", "=", "None", ",", "\n", "loss_type", "=", "LossType", ".", "SOFTMAX_CROSS_ENTROPY", ")", ":", "\n", "        ", "super", "(", "ClassificationLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "label_size", "=", "label_size", "\n", "self", ".", "loss_type", "=", "loss_type", "\n", "if", "loss_type", "==", "LossType", ".", "SOFTMAX_CROSS_ENTROPY", ":", "\n", "            ", "self", ".", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", "class_weight", ")", "\n", "", "elif", "loss_type", "==", "LossType", ".", "SOFTMAX_FOCAL_CROSS_ENTROPY", ":", "\n", "            ", "self", ".", "criterion", "=", "FocalLoss", "(", "label_size", ",", "ActivationType", ".", "SOFTMAX", ")", "\n", "", "elif", "loss_type", "==", "LossType", ".", "SIGMOID_FOCAL_CROSS_ENTROPY", ":", "\n", "            ", "self", ".", "criterion", "=", "FocalLoss", "(", "label_size", ",", "ActivationType", ".", "SIGMOID", ")", "\n", "", "elif", "loss_type", "==", "LossType", ".", "BCE_WITH_LOGITS", ":", "\n", "            ", "self", ".", "criterion", "=", "torch", ".", "nn", ".", "BCEWithLogitsLoss", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "\n", "\"Unsupported loss type: %s. Supported loss type is: %s\"", "%", "(", "\n", "loss_type", ",", "LossType", ".", "str", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.model.loss.ClassificationLoss.forward": [[119, 143], ["loss.ClassificationLoss.criterion", "[].to", "loss.ClassificationLoss.criterion", "loss.ClassificationLoss.cal_recursive_regularize", "[].to", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye"], "methods", ["home.repos.pwc.inspect_result.MemoriesJ_KAMG.model.loss.ClassificationLoss.cal_recursive_regularize"], ["", "", "def", "forward", "(", "self", ",", "logits", ",", "target", ",", "\n", "use_hierar", "=", "False", ",", "\n", "is_multi", "=", "False", ",", "\n", "*", "argvs", ")", ":", "\n", "        ", "device", "=", "logits", ".", "device", "\n", "if", "use_hierar", ":", "\n", "            ", "assert", "self", ".", "loss_type", "in", "[", "LossType", ".", "BCE_WITH_LOGITS", ",", "\n", "LossType", ".", "SIGMOID_FOCAL_CROSS_ENTROPY", "]", "\n", "if", "not", "is_multi", ":", "\n", "                ", "target", "=", "torch", ".", "eye", "(", "self", ".", "label_size", ")", "[", "target", "]", ".", "to", "(", "device", ")", "\n", "", "hierar_penalty", ",", "hierar_paras", ",", "hierar_relations", "=", "argvs", "[", "0", ":", "3", "]", "\n", "return", "self", ".", "criterion", "(", "logits", ",", "target", ")", "+", "hierar_penalty", "*", "self", ".", "cal_recursive_regularize", "(", "hierar_paras", ",", "\n", "hierar_relations", ",", "\n", "device", ")", "\n", "", "else", ":", "\n", "            ", "if", "is_multi", ":", "\n", "                ", "assert", "self", ".", "loss_type", "in", "[", "LossType", ".", "BCE_WITH_LOGITS", ",", "\n", "LossType", ".", "SIGMOID_FOCAL_CROSS_ENTROPY", "]", "\n", "", "else", ":", "\n", "                ", "if", "self", ".", "loss_type", "not", "in", "[", "LossType", ".", "SOFTMAX_CROSS_ENTROPY", ",", "\n", "LossType", ".", "SOFTMAX_FOCAL_CROSS_ENTROPY", "]", ":", "\n", "                    ", "target", "=", "torch", ".", "eye", "(", "self", ".", "label_size", ")", "[", "target", "]", ".", "to", "(", "device", ")", "\n", "", "", "return", "self", ".", "criterion", "(", "logits", ",", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.model.loss.ClassificationLoss.cal_recursive_regularize": [[144, 166], ["range", "len", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "parent_para.repeat.repeat.repeat", "diff_paras.view.view.view", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor().to.size", "torch.tensor().to.size", "diff_paras.view.view.size", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["None"], ["", "", "def", "cal_recursive_regularize", "(", "self", ",", "paras", ",", "hierar_relations", ",", "device", "=", "\"cpu\"", ")", ":", "\n", "        ", "\"\"\" Only support hierarchical text classification with BCELoss\n        references: http://www.cse.ust.hk/~yqsong/papers/2018-WWW-Text-GraphCNN.pdf\n                    http://www.cs.cmu.edu/~sgopal1/papers/KDD13.pdf\n        \"\"\"", "\n", "recursive_loss", "=", "0.0", "\n", "for", "i", "in", "range", "(", "len", "(", "paras", ")", ")", ":", "\n", "            ", "if", "i", "not", "in", "hierar_relations", ":", "\n", "                ", "continue", "\n", "", "children_ids", "=", "hierar_relations", "[", "i", "]", "\n", "if", "not", "children_ids", ":", "\n", "                ", "continue", "\n", "", "children_ids_list", "=", "torch", ".", "tensor", "(", "children_ids", ",", "dtype", "=", "torch", ".", "long", ")", ".", "to", "(", "\n", "device", ")", "\n", "children_paras", "=", "torch", ".", "index_select", "(", "paras", ",", "0", ",", "children_ids_list", ")", "\n", "parent_para", "=", "torch", ".", "index_select", "(", "paras", ",", "0", ",", "\n", "torch", ".", "tensor", "(", "i", ")", ".", "to", "(", "device", ")", ")", "\n", "parent_para", "=", "parent_para", ".", "repeat", "(", "children_ids_list", ".", "size", "(", ")", "[", "0", "]", ",", "1", ")", "\n", "diff_paras", "=", "parent_para", "-", "children_paras", "\n", "diff_paras", "=", "diff_paras", ".", "view", "(", "diff_paras", ".", "size", "(", ")", "[", "0", "]", ",", "-", "1", ")", "\n", "recursive_loss", "+=", "1.0", "/", "2", "*", "torch", ".", "norm", "(", "diff_paras", ",", "p", "=", "2", ")", "**", "2", "\n", "", "return", "recursive_loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.model.embedding.EmbeddingType.str": [[37, 40], ["None"], "methods", ["None"], ["@", "classmethod", "\n", "def", "str", "(", "cls", ")", ":", "\n", "        ", "return", "\",\"", ".", "join", "(", "[", "cls", ".", "EMBEDDING", ",", "cls", ".", "REGION_EMBEDDING", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.model.embedding.EmbeddingProcessType.str": [[57, 60], ["None"], "methods", ["None"], ["@", "classmethod", "\n", "def", "str", "(", "cls", ")", ":", "\n", "        ", "return", "\",\"", ".", "join", "(", "[", "cls", ".", "FLAT", ",", "cls", ".", "MEAN", ",", "cls", ".", "SUM", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.model.embedding.Embedding.__init__": [[63, 94], ["super().__init__", "util.Logger", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "model.model_util.init_tensor", "embedding.Embedding.embedding.weight.data.copy_", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.EmbeddingBag", "torch.nn.EmbeddingBag", "torch.nn.EmbeddingBag", "torch.nn.EmbeddingBag", "embedding.Embedding.load_pretrained_embedding", "len", "len", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "len"], "methods", ["home.repos.pwc.inspect_result.MemoriesJ_KAMG.evaluate.classification_evaluate.ClassificationEvaluator.__init__", "home.repos.pwc.inspect_result.MemoriesJ_KAMG.model.model_util.init_tensor", "home.repos.pwc.inspect_result.MemoriesJ_KAMG.model.embedding.Embedding.load_pretrained_embedding"], ["    ", "def", "__init__", "(", "self", ",", "dict_map", ",", "embedding_dim", ",", "name", ",", "config", ",", "padding_idx", "=", "None", ",", "\n", "pretrained_embedding_file", "=", "None", ",", "mode", "=", "EmbeddingProcessType", ".", "FLAT", ",", "\n", "dropout", "=", "0", ",", "init_type", "=", "InitType", ".", "XAVIER_UNIFORM", ",", "low", "=", "0", ",", "high", "=", "1", ",", "\n", "mean", "=", "0", ",", "std", "=", "1", ",", "activation_type", "=", "ActivationType", ".", "NONE", ",", "\n", "fan_mode", "=", "FAN_MODE", ".", "FAN_IN", ",", "negative_slope", "=", "0", ",", "\n", "model_mode", "=", "ModeType", ".", "TRAIN", ",", "trainable", "=", "True", ")", ":", "\n", "        ", "super", "(", "Embedding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "logger", "=", "Logger", "(", "config", ")", "\n", "self", ".", "dropout", "=", "torch", ".", "nn", ".", "Dropout", "(", "p", "=", "dropout", ")", "\n", "self", ".", "mode", "=", "mode", "\n", "if", "self", ".", "mode", "==", "EmbeddingProcessType", ".", "FLAT", ":", "\n", "            ", "self", ".", "embedding", "=", "torch", ".", "nn", ".", "Embedding", "(", "\n", "len", "(", "dict_map", ")", ",", "embedding_dim", ",", "padding_idx", "=", "padding_idx", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "embedding", "=", "torch", ".", "nn", ".", "EmbeddingBag", "(", "\n", "len", "(", "dict_map", ")", ",", "embedding_dim", ",", "mode", "=", "mode", ")", "\n", "", "embedding_lookup_table", "=", "init_tensor", "(", "\n", "tensor", "=", "torch", ".", "empty", "(", "len", "(", "dict_map", ")", ",", "embedding_dim", ")", ",", "\n", "init_type", "=", "init_type", ",", "low", "=", "low", ",", "high", "=", "high", ",", "mean", "=", "mean", ",", "std", "=", "std", ",", "\n", "activation_type", "=", "activation_type", ",", "fan_mode", "=", "fan_mode", ",", "\n", "negative_slope", "=", "negative_slope", ")", "\n", "if", "model_mode", "==", "ModeType", ".", "TRAIN", "and", "pretrained_embedding_file", "is", "not", "None", "and", "pretrained_embedding_file", "!=", "\"\"", ":", "\n", "            ", "self", ".", "load_pretrained_embedding", "(", "\n", "embedding_lookup_table", ",", "dict_map", ",", "embedding_dim", ",", "name", ",", "\n", "pretrained_embedding_file", ")", "\n", "", "if", "padding_idx", "is", "not", "None", ":", "\n", "            ", "embedding_lookup_table", "[", "padding_idx", "]", "=", "0.0", "\n", "", "self", ".", "embedding", ".", "weight", ".", "data", ".", "copy_", "(", "embedding_lookup_table", ")", "\n", "self", ".", "embedding", ".", "weight", ".", "requires_grad", "=", "trainable", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.model.embedding.Embedding.forward": [[95, 101], ["embedding.Embedding.Embedding.dropout", "embedding.Embedding.Embedding.embedding", "embedding.Embedding.Embedding.embedding"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "vocab_ids", ",", "offset", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "mode", "==", "EmbeddingProcessType", ".", "FLAT", ":", "\n", "            ", "embedding", "=", "self", ".", "embedding", "(", "vocab_ids", ")", "\n", "", "else", ":", "\n", "            ", "embedding", "=", "self", ".", "embedding", "(", "vocab_ids", ",", "offset", ")", "\n", "", "return", "self", ".", "dropout", "(", "embedding", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.model.embedding.Embedding.load_pretrained_embedding": [[102, 129], ["torch.FloatTensor.Embedding.logger.warn", "torch.FloatTensor.Embedding.logger.warn", "torch.FloatTensor.Embedding.logger.warn", "torch.FloatTensor.Embedding.logger.warn", "open", "line.strip().split", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "len", "len", "line.strip", "int", "float", "len"], "methods", ["home.repos.pwc.inspect_result.MemoriesJ_KAMG.NeuralNLP-NeuralClassifier-KAMG.util.Logger.warn", "home.repos.pwc.inspect_result.MemoriesJ_KAMG.NeuralNLP-NeuralClassifier-KAMG.util.Logger.warn", "home.repos.pwc.inspect_result.MemoriesJ_KAMG.NeuralNLP-NeuralClassifier-KAMG.util.Logger.warn", "home.repos.pwc.inspect_result.MemoriesJ_KAMG.NeuralNLP-NeuralClassifier-KAMG.util.Logger.warn"], ["", "def", "load_pretrained_embedding", "(", "\n", "self", ",", "embedding_lookup_table", ",", "dict_map", ",", "embedding_dim", ",", "name", ",", "\n", "pretrained_embedding_file", ")", ":", "\n", "        ", "self", ".", "logger", ".", "warn", "(", "\n", "\"Load %s embedding from %s\"", "%", "(", "name", ",", "pretrained_embedding_file", ")", ")", "\n", "with", "open", "(", "pretrained_embedding_file", ")", "as", "fin", ":", "\n", "            ", "num_pretrained", "=", "0", "\n", "for", "line", "in", "fin", ":", "\n", "                ", "data", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "\n", "# Check embedding info", "\n", "if", "len", "(", "data", ")", "==", "2", ":", "\n", "                    ", "assert", "int", "(", "data", "[", "1", "]", ")", "==", "embedding_dim", ",", "\"Pretrained embedding dim not matching: %s, %d\"", "%", "(", "\n", "data", "[", "1", "]", ",", "embedding_dim", ")", "\n", "continue", "\n", "", "if", "data", "[", "0", "]", "not", "in", "dict_map", ":", "\n", "                    ", "continue", "\n", "", "embedding", "=", "torch", ".", "FloatTensor", "(", "[", "float", "(", "i", ")", "for", "i", "in", "data", "[", "1", ":", "]", "]", ")", "\n", "embedding_lookup_table", "[", "dict_map", "[", "data", "[", "0", "]", "]", "]", "=", "embedding", "\n", "num_pretrained", "+=", "1", "\n", "", "", "self", ".", "logger", ".", "warn", "(", "\n", "\"Total dict size of %s is %d\"", "%", "(", "name", ",", "len", "(", "dict_map", ")", ")", ")", "\n", "self", ".", "logger", ".", "warn", "(", "\"Size of pretrained %s embedding is %d\"", "%", "(", "\n", "name", ",", "num_pretrained", ")", ")", "\n", "self", ".", "logger", ".", "warn", "(", "\n", "\"Size of randomly initialize %s embedding is %d\"", "%", "(", "\n", "name", ",", "len", "(", "dict_map", ")", "-", "num_pretrained", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.model.embedding.RegionEmbeddingType.str": [[137, 140], ["None"], "methods", ["None"], ["@", "classmethod", "\n", "def", "str", "(", "cls", ")", ":", "\n", "        ", "return", "\",\"", ".", "join", "(", "[", "cls", ".", "WC", ",", "cls", ".", "CW", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.model.embedding.RegionEmbeddingLayer.__init__": [[147, 169], ["super().__init__", "int", "embedding.Embedding", "embedding.Embedding"], "methods", ["home.repos.pwc.inspect_result.MemoriesJ_KAMG.evaluate.classification_evaluate.ClassificationEvaluator.__init__"], ["def", "__init__", "(", "self", ",", "dict_map", ",", "embedding_dim", ",", "region_size", ",", "name", ",", "config", ",", "\n", "padding", "=", "None", ",", "pretrained_embedding_file", "=", "None", ",", "dropout", "=", "0", ",", "\n", "init_type", "=", "InitType", ".", "XAVIER_UNIFORM", ",", "low", "=", "0", ",", "high", "=", "1", ",", "mean", "=", "0", ",", "\n", "std", "=", "1", ",", "fan_mode", "=", "FAN_MODE", ".", "FAN_IN", ",", "model_mode", "=", "ModeType", ".", "TRAIN", ",", "\n", "region_embedding_type", "=", "RegionEmbeddingType", ".", "WC", ")", ":", "\n", "        ", "super", "(", "RegionEmbeddingLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "region_embedding_type", "=", "region_embedding_type", "\n", "self", ".", "region_size", "=", "region_size", "\n", "assert", "self", ".", "region_size", "%", "2", "==", "1", "\n", "self", ".", "radius", "=", "int", "(", "region_size", "/", "2", ")", "\n", "self", ".", "embedding_dim", "=", "embedding_dim", "\n", "self", ".", "embedding", "=", "Embedding", "(", "\n", "dict_map", ",", "embedding_dim", ",", "\"RegionWord\"", "+", "name", ",", "config", "=", "config", ",", "\n", "padding_idx", "=", "padding", ",", "\n", "pretrained_embedding_file", "=", "pretrained_embedding_file", ",", "\n", "dropout", "=", "dropout", ",", "init_type", "=", "init_type", ",", "low", "=", "low", ",", "high", "=", "high", ",", "mean", "=", "mean", ",", "\n", "std", "=", "std", ",", "fan_mode", "=", "fan_mode", ",", "model_mode", "=", "model_mode", ")", "\n", "self", ".", "context_embedding", "=", "Embedding", "(", "\n", "dict_map", ",", "embedding_dim", "*", "region_size", ",", "\"RegionContext\"", "+", "name", ",", "\n", "config", "=", "config", ",", "padding_idx", "=", "padding", ",", "dropout", "=", "dropout", ",", "\n", "init_type", "=", "init_type", ",", "low", "=", "low", ",", "high", "=", "high", ",", "mean", "=", "mean", ",", "std", "=", "std", ",", "\n", "fan_mode", "=", "fan_mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.model.embedding.RegionEmbeddingLayer.forward": [[170, 213], ["vocab_ids.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "slice_vocabs.view.view.view", "vocab_ids.size", "embedding.RegionEmbeddingLayer.embedding", "embedding.RegionEmbeddingLayer.context_embedding", "context_embedding.view.view.view", "region_embedding.max", "range", "embedding.RegionEmbeddingLayer.embedding().unsqueeze", "embedding.RegionEmbeddingLayer.context_embedding", "context_embedding.view.view.size", "context_embedding.view.view.view", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "range", "mask.unsqueeze().unsqueeze.unsqueeze().unsqueeze.le().float", "mask.unsqueeze().unsqueeze.unsqueeze().unsqueeze.unsqueeze().unsqueeze", "context_embedding.view.view.max", "region_embedding.max", "TypeError", "embedding.RegionEmbeddingLayer.embedding", "mask.unsqueeze().unsqueeze.unsqueeze().unsqueeze.le", "mask.unsqueeze().unsqueeze.unsqueeze().unsqueeze.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "vocab_ids", ")", ":", "\n", "        ", "seq_length", "=", "vocab_ids", ".", "size", "(", "1", ")", "\n", "actual_length", "=", "vocab_ids", ".", "size", "(", "1", ")", "-", "self", ".", "radius", "*", "2", "\n", "trim_vocab_id", "=", "vocab_ids", "[", ":", ",", "self", ".", "radius", ":", "seq_length", "-", "self", ".", "radius", "]", "\n", "slice_vocabs", "=", "[", "vocab_ids", "[", ":", ",", "i", ":", "i", "+", "self", ".", "region_size", "]", "for", "i", "in", "\n", "range", "(", "actual_length", ")", "]", "\n", "slice_vocabs", "=", "torch", ".", "cat", "(", "slice_vocabs", ",", "1", ")", "\n", "slice_vocabs", "=", "slice_vocabs", ".", "view", "(", "-", "1", ",", "actual_length", ",", "self", ".", "region_size", ")", "\n", "\n", "if", "self", ".", "region_embedding_type", "==", "RegionEmbeddingType", ".", "WC", ":", "\n", "            ", "vocab_embedding", "=", "self", ".", "embedding", "(", "slice_vocabs", ")", "\n", "context_embedding", "=", "self", ".", "context_embedding", "(", "trim_vocab_id", ")", "\n", "context_embedding", "=", "context_embedding", ".", "view", "(", "\n", "-", "1", ",", "actual_length", ",", "self", ".", "region_size", ",", "self", ".", "embedding_dim", ")", "\n", "region_embedding", "=", "vocab_embedding", "*", "context_embedding", "\n", "region_embedding", ",", "_", "=", "region_embedding", ".", "max", "(", "2", ")", "\n", "", "elif", "self", ".", "region_embedding_type", "==", "RegionEmbeddingType", ".", "CW", ":", "\n", "            ", "vocab_embedding", "=", "self", ".", "embedding", "(", "trim_vocab_id", ")", ".", "unsqueeze", "(", "2", ")", "\n", "context_embedding", "=", "self", ".", "context_embedding", "(", "slice_vocabs", ")", "\n", "size", "=", "context_embedding", ".", "size", "(", ")", "\n", "context_embedding", "=", "context_embedding", ".", "view", "(", "\n", "size", "[", "0", "]", ",", "size", "[", "1", "]", ",", "size", "[", "2", "]", ",", "self", ".", "region_size", ",", "self", ".", "embedding_dim", ")", "\n", "mask", "=", "torch", ".", "ones", "(", "\n", "[", "self", ".", "region_size", ",", "self", ".", "region_size", ",", "self", ".", "embedding_dim", "]", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "region_size", ")", ":", "\n", "                ", "mask", "[", "i", "]", "[", "self", ".", "region_size", "-", "i", "-", "1", "]", "=", "0.", "\n", "", "neg_mask", "=", "mask", "*", "-", "65500.0", "\n", "mask", "=", "mask", ".", "le", "(", "0", ")", ".", "float", "(", ")", "\n", "mask", "=", "mask", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "context_embedding", "=", "context_embedding", "*", "mask", "\n", "context_embedding", "=", "context_embedding", "+", "neg_mask", "\n", "context_embedding", ",", "_", "=", "context_embedding", ".", "max", "(", "3", ")", "\n", "region_embedding", "=", "vocab_embedding", "*", "context_embedding", "\n", "region_embedding", ",", "_", "=", "region_embedding", ".", "max", "(", "2", ")", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "\n", "\"Unsupported region embedding type: %s.\"", "%", "\n", "self", ".", "region_embedding_type", ")", "\n", "\n", "", "return", "region_embedding", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.model.embedding.PositionEmbedding.__init__": [[218, 226], ["super().__init__", "torch.Embedding.from_pretrained", "torch.Embedding.from_pretrained", "embedding.PositionEmbedding.get_sinusoid_encoding_table"], "methods", ["home.repos.pwc.inspect_result.MemoriesJ_KAMG.evaluate.classification_evaluate.ClassificationEvaluator.__init__", "home.repos.pwc.inspect_result.MemoriesJ_KAMG.model.embedding.PositionEmbedding.get_sinusoid_encoding_table"], ["def", "__init__", "(", "self", ",", "seq_max_len", ",", "embedding_dim", ",", "padding_idx", ")", ":", "\n", "        ", "super", "(", "PositionEmbedding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "position_enc", "=", "nn", ".", "Embedding", ".", "from_pretrained", "(", "\n", "self", ".", "get_sinusoid_encoding_table", "(", "seq_max_len", "+", "1", ",", "\n", "embedding_dim", ",", "\n", "padding_idx", "=", "padding_idx", ")", ",", "\n", "freeze", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.model.embedding.PositionEmbedding.forward": [[227, 229], ["embedding.PositionEmbedding.position_enc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "src_pos", ")", ":", "\n", "        ", "return", "self", ".", "position_enc", "(", "src_pos", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.model.embedding.PositionEmbedding.get_sinusoid_encoding_table": [[230, 250], ["numpy.array", "numpy.sin", "numpy.cos", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "numpy.power", "embedding.PositionEmbedding.get_sinusoid_encoding_table.cal_angle"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_sinusoid_encoding_table", "(", "n_position", ",", "d_hid", ",", "padding_idx", "=", "None", ")", ":", "\n", "\n", "        ", "def", "cal_angle", "(", "position", ",", "hid_idx", ")", ":", "\n", "            ", "return", "position", "/", "np", ".", "power", "(", "10000", ",", "2", "*", "(", "hid_idx", "//", "2", ")", "/", "d_hid", ")", "\n", "\n", "", "def", "get_posi_angle_vec", "(", "position", ")", ":", "\n", "            ", "return", "[", "cal_angle", "(", "position", ",", "hid_j", ")", "for", "hid_j", "in", "range", "(", "d_hid", ")", "]", "\n", "\n", "", "sinusoid_table", "=", "np", ".", "array", "(", "\n", "[", "get_posi_angle_vec", "(", "pos_i", ")", "for", "pos_i", "in", "range", "(", "n_position", ")", "]", ")", "\n", "\n", "sinusoid_table", "[", ":", ",", "0", ":", ":", "2", "]", "=", "np", ".", "sin", "(", "sinusoid_table", "[", ":", ",", "0", ":", ":", "2", "]", ")", "# dim 2i", "\n", "sinusoid_table", "[", ":", ",", "1", ":", ":", "2", "]", "=", "np", ".", "cos", "(", "sinusoid_table", "[", ":", ",", "1", ":", ":", "2", "]", ")", "# dim 2i+1", "\n", "\n", "if", "padding_idx", "is", "not", "None", ":", "\n", "# zero vector for padding dimension", "\n", "            ", "sinusoid_table", "[", "padding_idx", "]", "=", "0.", "\n", "\n", "", "return", "torch", ".", "FloatTensor", "(", "sinusoid_table", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.model.attention.ScaledDotProductAttention.__init__": [[23, 28], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "torch.Softmax", "torch.Softmax"], "methods", ["home.repos.pwc.inspect_result.MemoriesJ_KAMG.evaluate.classification_evaluate.ClassificationEvaluator.__init__"], ["def", "__init__", "(", "self", ",", "temperature", ",", "attn_dropout", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "ScaledDotProductAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "temperature", "=", "temperature", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "attn_dropout", ")", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.model.attention.ScaledDotProductAttention.forward": [[29, 42], ["torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "attention.ScaledDotProductAttention.softmax", "attention.ScaledDotProductAttention.dropout", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "k.transpose", "attn.masked_fill.masked_fill.masked_fill"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "q", ",", "k", ",", "v", ",", "mask", "=", "None", ")", ":", "\n", "\n", "        ", "attn", "=", "torch", ".", "bmm", "(", "q", ",", "k", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "attn", "=", "attn", "/", "self", ".", "temperature", "\n", "\n", "if", "mask", "is", "not", "None", ":", "\n", "            ", "attn", "=", "attn", ".", "masked_fill", "(", "mask", ",", "-", "np", ".", "inf", ")", "\n", "\n", "", "attn", "=", "self", ".", "softmax", "(", "attn", ")", "\n", "attn", "=", "self", ".", "dropout", "(", "attn", ")", "\n", "output", "=", "torch", ".", "bmm", "(", "attn", ",", "v", ")", "\n", "\n", "return", "output", ",", "attn", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.model.attention.MultiHeadAttention.__init__": [[47, 69], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "attention.ScaledDotProductAttention", "torch.LayerNorm", "torch.LayerNorm", "torch.Linear", "torch.Linear", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.Dropout", "torch.Dropout", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.power"], "methods", ["home.repos.pwc.inspect_result.MemoriesJ_KAMG.evaluate.classification_evaluate.ClassificationEvaluator.__init__"], ["def", "__init__", "(", "self", ",", "n_head", ",", "d_model", ",", "d_k", ",", "d_v", ",", "use_star", "=", "False", ",", "dropout", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "MultiHeadAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "n_head", "=", "n_head", "\n", "self", ".", "d_k", "=", "d_k", "\n", "self", ".", "d_v", "=", "d_v", "\n", "self", ".", "use_star", "=", "use_star", "\n", "\n", "self", ".", "w_qs", "=", "nn", ".", "Linear", "(", "d_model", ",", "n_head", "*", "d_k", ")", "\n", "self", ".", "w_ks", "=", "nn", ".", "Linear", "(", "d_model", ",", "n_head", "*", "d_k", ")", "\n", "self", ".", "w_vs", "=", "nn", ".", "Linear", "(", "d_model", ",", "n_head", "*", "d_v", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "w_qs", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "np", ".", "sqrt", "(", "2.0", "/", "(", "d_model", "+", "d_k", ")", ")", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "w_ks", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "np", ".", "sqrt", "(", "2.0", "/", "(", "d_model", "+", "d_k", ")", ")", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "w_vs", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "np", ".", "sqrt", "(", "2.0", "/", "(", "d_model", "+", "d_v", ")", ")", ")", "\n", "\n", "self", ".", "attention", "=", "ScaledDotProductAttention", "(", "temperature", "=", "np", ".", "power", "(", "d_k", ",", "0.5", ")", ")", "\n", "self", ".", "layer_norm", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "n_head", "*", "d_v", ",", "d_model", ")", "\n", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "fc", ".", "weight", ")", "\n", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.model.attention.MultiHeadAttention.forward": [[70, 103], ["q.permute().contiguous().view.permute().contiguous().view.size", "k.permute().contiguous().view.permute().contiguous().view.size", "v.permute().contiguous().view.permute().contiguous().view.size", "attention.MultiHeadAttention.w_qs().view", "attention.MultiHeadAttention.w_ks().view", "attention.MultiHeadAttention.w_vs().view", "q.permute().contiguous().view.permute().contiguous().view.permute().contiguous().view", "k.permute().contiguous().view.permute().contiguous().view.permute().contiguous().view", "v.permute().contiguous().view.permute().contiguous().view.permute().contiguous().view", "attention.MultiHeadAttention.attention", "attention.MultiHeadAttention.view", "attention.MultiHeadAttention.permute().contiguous().view", "mask.repeat.repeat.repeat", "attention.MultiHeadAttention.dropout", "attention.MultiHeadAttention.layer_norm", "attention.MultiHeadAttention.dropout", "attention.MultiHeadAttention.layer_norm", "attention.MultiHeadAttention.w_qs", "attention.MultiHeadAttention.w_ks", "attention.MultiHeadAttention.w_vs", "q.permute().contiguous().view.permute().contiguous().view.permute().contiguous", "k.permute().contiguous().view.permute().contiguous().view.permute().contiguous", "v.permute().contiguous().view.permute().contiguous().view.permute().contiguous", "attention.MultiHeadAttention.permute().contiguous", "torch.relu_", "torch.relu_", "torch.relu_", "torch.relu_", "attention.MultiHeadAttention.fc", "attention.MultiHeadAttention.fc", "q.permute().contiguous().view.permute().contiguous().view.permute", "k.permute().contiguous().view.permute().contiguous().view.permute", "v.permute().contiguous().view.permute().contiguous().view.permute", "attention.MultiHeadAttention.permute"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "q", ",", "k", ",", "v", ",", "mask", "=", "None", ")", ":", "\n", "\n", "        ", "d_k", ",", "d_v", ",", "n_head", "=", "self", ".", "d_k", ",", "self", ".", "d_v", ",", "self", ".", "n_head", "\n", "\n", "sz_b", ",", "len_q", ",", "_", "=", "q", ".", "size", "(", ")", "\n", "sz_b", ",", "len_k", ",", "_", "=", "k", ".", "size", "(", ")", "\n", "sz_b", ",", "len_v", ",", "_", "=", "v", ".", "size", "(", ")", "\n", "\n", "residual", "=", "q", "\n", "\n", "q", "=", "self", ".", "w_qs", "(", "q", ")", ".", "view", "(", "sz_b", ",", "len_q", ",", "n_head", ",", "d_k", ")", "\n", "k", "=", "self", ".", "w_ks", "(", "k", ")", ".", "view", "(", "sz_b", ",", "len_k", ",", "n_head", ",", "d_k", ")", "\n", "v", "=", "self", ".", "w_vs", "(", "v", ")", ".", "view", "(", "sz_b", ",", "len_v", ",", "n_head", ",", "d_v", ")", "\n", "\n", "q", "=", "q", ".", "permute", "(", "2", ",", "0", ",", "1", ",", "3", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "len_q", ",", "d_k", ")", "# (n*b) x lq x dk", "\n", "k", "=", "k", ".", "permute", "(", "2", ",", "0", ",", "1", ",", "3", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "len_k", ",", "d_k", ")", "# (n*b) x lk x dk", "\n", "v", "=", "v", ".", "permute", "(", "2", ",", "0", ",", "1", ",", "3", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "len_v", ",", "d_v", ")", "# (n*b) x lv x dv", "\n", "\n", "if", "mask", "is", "not", "None", ":", "\n", "            ", "mask", "=", "mask", ".", "repeat", "(", "n_head", ",", "1", ",", "1", ")", "# (n*b) x .. x ..", "\n", "", "output", ",", "attn", "=", "self", ".", "attention", "(", "q", ",", "k", ",", "v", ",", "mask", "=", "mask", ")", "\n", "\n", "output", "=", "output", ".", "view", "(", "n_head", ",", "sz_b", ",", "len_q", ",", "d_v", ")", "\n", "output", "=", "output", ".", "permute", "(", "1", ",", "2", ",", "0", ",", "3", ")", ".", "contiguous", "(", ")", ".", "view", "(", "sz_b", ",", "len_q", ",", "-", "1", ")", "# b x lq x (n*dv)", "\n", "\n", "if", "self", ".", "use_star", ":", "\n", "            ", "output", "=", "self", ".", "dropout", "(", "torch", ".", "relu_", "(", "self", ".", "fc", "(", "output", ")", ")", ")", "\n", "output", "=", "self", ".", "layer_norm", "(", "output", ")", "\n", "", "else", ":", "\n", "            ", "output", "=", "self", ".", "dropout", "(", "self", ".", "fc", "(", "output", ")", ")", "\n", "output", "=", "self", ".", "layer_norm", "(", "output", "+", "residual", ")", "\n", "\n", "", "return", "output", ",", "attn", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.model.attention.LabelWiseAttention.__init__": [[107, 116], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.MemoriesJ_KAMG.evaluate.classification_evaluate.ClassificationEvaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "feat_dim", ",", "label_emb_dim", ",", "store_attention_score", "=", "True", ")", ":", "\n", "\n", "        ", "super", "(", "LabelWiseAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "transform", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "feat_dim", ",", "label_emb_dim", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", ")", "\n", "self", ".", "store_attention_score", "=", "store_attention_score", "\n", "self", ".", "attention_score", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.model.attention.LabelWiseAttention.forward": [[117, 133], ["attention.LabelWiseAttention.transform", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.softmax.transpose", "torch.softmax.transpose", "torch.softmax.clone().detach", "torch.softmax.clone().detach", "label_emb.transpose", "torch.softmax.clone", "torch.softmax.clone"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "doc_feat", ",", "label_emb", ")", ":", "\n", "        ", "\"\"\"\n\n        :param doc_feat: B * ngrams * filter_size/hidden_dimension\n        :param label_emb: n_labels * label_emb_dim\n        :return:\n        \"\"\"", "\n", "doc_feat_trans", "=", "self", ".", "transform", "(", "doc_feat", ")", "\n", "# dim 1 is n-gram dim", "\n", "attention_score", "=", "torch", ".", "softmax", "(", "torch", ".", "matmul", "(", "doc_feat_trans", ",", "label_emb", ".", "transpose", "(", "0", ",", "1", ")", ")", ",", "dim", "=", "1", ")", "\n", "attend_doc_feat", "=", "torch", ".", "matmul", "(", "attention_score", ".", "transpose", "(", "1", ",", "2", ")", ",", "doc_feat", ")", "\n", "\n", "if", "self", ".", "store_attention_score", ":", "\n", "            ", "self", ".", "attention_score", "=", "attention_score", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "\n", "", "return", "attend_doc_feat", "\n", "", "", ""]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.model.graph_convolution.GraphConvolution.__init__": [[9, 26], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "graph_convolution.GraphConvolution.reset_parameter", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "graph_convolution.GraphConvolution.register_parameter", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.MemoriesJ_KAMG.evaluate.classification_evaluate.ClassificationEvaluator.__init__", "home.repos.pwc.inspect_result.MemoriesJ_KAMG.model.graph_convolution.MultiGraphConvolution.reset_parameter"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ",", "bias", "=", "True", ",", "act", "=", "torch", ".", "relu_", ",", "featureless", "=", "False", ",", "dropout", "=", "0.0", ")", ":", "\n", "\n", "        ", "super", "(", "GraphConvolution", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "empty", "(", "in_features", ",", "out_features", ")", ",", "requires_grad", "=", "True", ")", "\n", "if", "bias", ":", "\n", "            ", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "out_features", ")", ",", "requires_grad", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'bias'", ",", "None", ")", "\n", "\n", "", "if", "dropout", ":", "\n", "            ", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "dropout", "=", "None", "\n", "\n", "", "self", ".", "featureless", "=", "featureless", "\n", "self", ".", "act", "=", "act", "\n", "self", ".", "reset_parameter", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.model.graph_convolution.GraphConvolution.reset_parameter": [[27, 29], ["torch.xavier_uniform_", "torch.xavier_uniform_", "torch.xavier_uniform_", "torch.xavier_uniform_"], "methods", ["None"], ["", "def", "reset_parameter", "(", "self", ")", ":", "\n", "        ", "init", ".", "xavier_uniform_", "(", "self", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.model.graph_convolution.GraphConvolution.forward": [[30, 49], ["torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "graph_convolution.GraphConvolution.dropout", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "graph_convolution.GraphConvolution.act"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inp", ",", "adj", ")", ":", "\n", "\n", "        ", "if", "self", ".", "dropout", "is", "not", "None", ":", "\n", "            ", "inp", "=", "self", ".", "dropout", "(", "inp", ")", "\n", "\n", "", "if", "not", "self", ".", "featureless", ":", "\n", "            ", "inp", "=", "torch", ".", "matmul", "(", "inp", ",", "self", ".", "weight", ")", "\n", "", "else", ":", "\n", "            ", "inp", "=", "self", ".", "weight", "\n", "\n", "", "inp", "=", "torch", ".", "matmul", "(", "adj", ",", "inp", ")", "\n", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "inp", "+=", "self", ".", "bias", "\n", "\n", "", "if", "self", ".", "act", "is", "not", "None", ":", "\n", "            ", "inp", "=", "self", ".", "act", "(", "inp", ")", "\n", "\n", "", "return", "inp", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.model.graph_convolution.MultiGraphConvolution.__init__": [[53, 74], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "graph_convolution.MultiGraphConvolution.reset_parameter", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "graph_convolution.MultiGraphConvolution.register_parameter", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.MemoriesJ_KAMG.evaluate.classification_evaluate.ClassificationEvaluator.__init__", "home.repos.pwc.inspect_result.MemoriesJ_KAMG.model.graph_convolution.MultiGraphConvolution.reset_parameter"], ["    ", "def", "__init__", "(", "self", ",", "n_adj", ",", "in_features", ",", "out_features", ",", "bias", "=", "False", ",", "act", "=", "torch", ".", "relu", ",", "featureless", "=", "False", ",", "dropout", "=", "0.0", ")", ":", "\n", "        ", "\"\"\"\n        used for vectorized computing for multi-adj GCN\n        \"\"\"", "\n", "assert", "n_adj", ">=", "2", "\n", "\n", "super", "(", "MultiGraphConvolution", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "empty", "(", "n_adj", ",", "in_features", ",", "out_features", ")", ",", "requires_grad", "=", "True", ")", "\n", "if", "bias", ":", "\n", "            ", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "out_features", ")", ",", "requires_grad", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'bias'", ",", "None", ")", "\n", "\n", "", "if", "dropout", ":", "\n", "            ", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "dropout", "=", "None", "\n", "\n", "", "self", ".", "act", "=", "act", "\n", "self", ".", "featureless", "=", "featureless", "\n", "self", ".", "reset_parameter", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.model.graph_convolution.MultiGraphConvolution.reset_parameter": [[75, 77], ["torch.xavier_uniform_", "torch.xavier_uniform_", "torch.xavier_uniform_", "torch.xavier_uniform_"], "methods", ["None"], ["", "def", "reset_parameter", "(", "self", ")", ":", "\n", "        ", "init", ".", "xavier_uniform_", "(", "self", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.model.graph_convolution.MultiGraphConvolution.forward": [[78, 105], ["torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "graph_convolution.MultiGraphConvolution.dropout", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "graph_convolution.MultiGraphConvolution.act"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inp", ",", "adj", ")", ":", "\n", "\n", "        ", "\"\"\"inp.ndim in [2, 3]\n        adj.ndim == 3\n        adj.shape[0] == self.n_adj\n        \"\"\"", "\n", "\n", "if", "self", ".", "dropout", "is", "not", "None", ":", "\n", "            ", "inp", "=", "self", ".", "dropout", "(", "inp", ")", "\n", "\n", "# adj = torch.unsqueeze(adj, dim=0) if inp.ndim == adj.ndim else adj", "\n", "# inp = torch.unsqueeze(inp, dim=inp.ndim - 2)", "\n", "\n", "", "if", "not", "self", ".", "featureless", ":", "\n", "            ", "inp", "=", "torch", ".", "matmul", "(", "inp", ",", "self", ".", "weight", ")", "\n", "", "else", ":", "\n", "            ", "inp", "=", "self", ".", "weight", "\n", "\n", "", "inp", "=", "torch", ".", "matmul", "(", "adj", ",", "inp", ")", "\n", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "inp", "+=", "self", ".", "bias", "\n", "\n", "", "if", "self", ".", "act", "is", "not", "None", ":", "\n", "            ", "inp", "=", "self", ".", "act", "(", "inp", ")", "\n", "\n", "", "return", "inp", "\n", "", "", ""]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.model.model_util.ActivationType.str": [[31, 35], ["None"], "methods", ["None"], ["@", "classmethod", "\n", "def", "str", "(", "cls", ")", ":", "\n", "        ", "return", "\",\"", ".", "join", "(", "\n", "[", "cls", ".", "SIGMOID", ",", "cls", ".", "TANH", ",", "cls", ".", "RELU", ",", "cls", ".", "LEAKY_RELU", ",", "cls", ".", "NONE", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.model.model_util.InitType.str": [[48, 52], ["None"], "methods", ["None"], ["def", "str", "(", "self", ")", ":", "\n", "        ", "return", "\",\"", ".", "join", "(", "\n", "[", "self", ".", "UNIFORM", ",", "self", ".", "NORMAL", ",", "self", ".", "XAVIER_UNIFORM", ",", "self", ".", "XAVIER_NORMAL", ",", "\n", "self", ".", "KAIMING_UNIFORM", ",", "self", ".", "KAIMING_NORMAL", ",", "self", ".", "ORTHOGONAL", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.model.model_util.FAN_MODE.str": [[60, 62], ["None"], "methods", ["None"], ["def", "str", "(", "self", ")", ":", "\n", "        ", "return", "\",\"", ".", "join", "(", "[", "self", ".", "FAN_IN", ",", "self", ".", "FAN_OUT", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.model.model_util.OptimizerType.str": [[120, 122], ["None"], "methods", ["None"], ["def", "str", "(", "self", ")", ":", "\n", "        ", "return", "\",\"", ".", "join", "(", "[", "self", ".", "ADAM", ",", "self", ".", "ADADELTA", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.model.model_util.init_tensor": [[64, 111], ["torch.nn.init.uniform_", "torch.nn.init.normal_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_normal_", "torch.nn.init.calculate_gain", "torch.nn.init.kaiming_uniform_", "torch.nn.init.calculate_gain", "torch.nn.init.kaiming_normal_", "torch.nn.init.orthogonal_", "TypeError", "torch.nn.init.calculate_gain", "model_util.InitType.str"], "function", ["home.repos.pwc.inspect_result.MemoriesJ_KAMG.classification.attentive_convolution.AttentionType.str"], ["", "", "def", "init_tensor", "(", "tensor", ",", "init_type", "=", "InitType", ".", "XAVIER_UNIFORM", ",", "low", "=", "0", ",", "high", "=", "1", ",", "\n", "mean", "=", "0", ",", "std", "=", "1", ",", "activation_type", "=", "ActivationType", ".", "NONE", ",", "\n", "fan_mode", "=", "FAN_MODE", ".", "FAN_IN", ",", "negative_slope", "=", "0", ")", ":", "\n", "    ", "\"\"\"Init torch.Tensor\n    Args:\n        tensor: Tensor to be initialized.\n        init_type: Init type, candidate can be found in InitType.\n        low: The lower bound of the uniform distribution,\n            useful when init_type is uniform.\n        high: The upper bound of the uniform distribution,\n            useful when init_type is uniform.\n        mean: The mean of the normal distribution,\n            useful when init_type is normal.\n        std: The standard deviation of the normal distribution,\n            useful when init_type is normal.\n        activation_type: For xavier and kaiming init,\n            coefficient is calculate according the activation_type.\n        fan_mode: For kaiming init, fan mode is needed\n        negative_slope: For kaiming init,\n            coefficient is calculate according the negative_slope.\n    Returns:\n    \"\"\"", "\n", "if", "init_type", "==", "InitType", ".", "UNIFORM", ":", "\n", "        ", "return", "torch", ".", "nn", ".", "init", ".", "uniform_", "(", "tensor", ",", "a", "=", "low", ",", "b", "=", "high", ")", "\n", "", "elif", "init_type", "==", "InitType", ".", "NORMAL", ":", "\n", "        ", "return", "torch", ".", "nn", ".", "init", ".", "normal_", "(", "tensor", ",", "mean", "=", "mean", ",", "std", "=", "std", ")", "\n", "", "elif", "init_type", "==", "InitType", ".", "XAVIER_UNIFORM", ":", "\n", "        ", "return", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "\n", "tensor", ",", "gain", "=", "torch", ".", "nn", ".", "init", ".", "calculate_gain", "(", "activation_type", ")", ")", "\n", "", "elif", "init_type", "==", "InitType", ".", "XAVIER_NORMAL", ":", "\n", "        ", "return", "torch", ".", "nn", ".", "init", ".", "xavier_normal_", "(", "\n", "tensor", ",", "gain", "=", "torch", ".", "nn", ".", "init", ".", "calculate_gain", "(", "activation_type", ")", ")", "\n", "", "elif", "init_type", "==", "InitType", ".", "KAIMING_UNIFORM", ":", "\n", "        ", "return", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform_", "(", "\n", "tensor", ",", "a", "=", "negative_slope", ",", "mode", "=", "fan_mode", ",", "\n", "nonlinearity", "=", "activation_type", ")", "\n", "", "elif", "init_type", "==", "InitType", ".", "KAIMING_NORMAL", ":", "\n", "        ", "return", "torch", ".", "nn", ".", "init", ".", "kaiming_normal_", "(", "\n", "tensor", ",", "a", "=", "negative_slope", ",", "mode", "=", "fan_mode", ",", "\n", "nonlinearity", "=", "activation_type", ")", "\n", "", "elif", "init_type", "==", "InitType", ".", "ORTHOGONAL", ":", "\n", "        ", "return", "torch", ".", "nn", ".", "init", ".", "orthogonal_", "(", "\n", "tensor", ",", "gain", "=", "torch", ".", "nn", ".", "init", ".", "calculate_gain", "(", "activation_type", ")", ")", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "\n", "\"Unsupported tensor init type: %s. Supported init type is: %s\"", "%", "(", "\n", "init_type", ",", "InitType", ".", "str", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.model.model_util.get_optimizer": [[124, 145], ["params.get_parameter_optimizer_dict.get_parameter_optimizer_dict", "torch.optim.Adam", "torch.optim.Adadelta", "model.optimizer.BertAdam", "TypeError", "model_util.OptimizerType.str"], "function", ["home.repos.pwc.inspect_result.MemoriesJ_KAMG.classification.classifier.Classifier.get_parameter_optimizer_dict", "home.repos.pwc.inspect_result.MemoriesJ_KAMG.classification.attentive_convolution.AttentionType.str"], ["", "", "def", "get_optimizer", "(", "config", ",", "params", ")", ":", "\n", "    ", "params", "=", "params", ".", "get_parameter_optimizer_dict", "(", ")", "\n", "if", "config", ".", "optimizer", ".", "optimizer_type", "==", "OptimizerType", ".", "ADAM", ":", "\n", "        ", "return", "torch", ".", "optim", ".", "Adam", "(", "lr", "=", "config", ".", "optimizer", ".", "learning_rate", ",", "\n", "params", "=", "params", ",", "\n", "weight_decay", "=", "config", ".", "optimizer", ".", "decay_rate", ")", "\n", "", "elif", "config", ".", "optimizer", ".", "optimizer_type", "==", "OptimizerType", ".", "ADADELTA", ":", "\n", "        ", "return", "torch", ".", "optim", ".", "Adadelta", "(", "\n", "lr", "=", "config", ".", "optimizer", ".", "learning_rate", ",", "\n", "rho", "=", "config", ".", "optimizer", ".", "adadelta_decay_rate", ",", "\n", "eps", "=", "config", ".", "optimizer", ".", "adadelta_epsilon", ",", "\n", "params", "=", "params", ",", "\n", "weight_decay", "=", "config", ".", "optimizer", ".", "decay_rate", ")", "\n", "", "elif", "config", ".", "optimizer", ".", "optimizer_type", "==", "OptimizerType", ".", "BERT_ADAM", ":", "\n", "        ", "return", "BertAdam", "(", "params", ",", "\n", "lr", "=", "config", ".", "optimizer", ".", "learning_rate", ",", "\n", "weight_decay", "=", "config", ".", "optimizer", ".", "decay_rate", ",", "max_grad_norm", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "\n", "\"Unsupported tensor optimizer type: %s.Supported optimizer \"", "\n", "\"type is: %s\"", "%", "(", "config", ".", "optimizer_type", ",", "OptimizerType", ".", "str", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.model.model_util.get_hierar_relations": [[147, 163], ["codecs.open", "line.strip().split", "line.strip"], "function", ["None"], ["", "", "def", "get_hierar_relations", "(", "hierar_taxonomy", ",", "label_map", ")", ":", "\n", "    ", "\"\"\" get parent-children relationships from given hierar_taxonomy\n        hierar_taxonomy: parent_label \\t child_label_0 \\t child_label_1 \\n\n    \"\"\"", "\n", "hierar_relations", "=", "{", "}", "\n", "with", "cs", ".", "open", "(", "hierar_taxonomy", ",", "\"r\"", ",", "\"utf8\"", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "line_split", "=", "line", ".", "strip", "(", "\"\\n\"", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "parent_label", ",", "children_label", "=", "line_split", "[", "0", "]", ",", "line_split", "[", "1", ":", "]", "\n", "if", "parent_label", "not", "in", "label_map", ":", "\n", "                ", "continue", "\n", "", "parent_label_id", "=", "label_map", "[", "parent_label", "]", "\n", "children_label_ids", "=", "[", "label_map", "[", "child_label", "]", "for", "child_label", "in", "children_label", "if", "child_label", "in", "label_map", "]", "\n", "hierar_relations", "[", "parent_label_id", "]", "=", "children_label_ids", "\n", "", "", "return", "hierar_relations", "\n", "", ""]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.model.optimizer.BertAdam.__init__": [[78, 105], ["dict", "torch.optim.Optimizer.__init__", "ValueError", "ValueError", "ValueError", "ValueError", "ValueError", "ValueError"], "methods", ["home.repos.pwc.inspect_result.MemoriesJ_KAMG.evaluate.classification_evaluate.ClassificationEvaluator.__init__"], ["def", "__init__", "(", "self", ",", "params", ",", "lr", "=", "required", ",", "warmup", "=", "-", "1", ",", "t_total", "=", "-", "1", ",", "\n", "schedule", "=", "'warmup_linear'", ",", "\n", "b1", "=", "0.9", ",", "b2", "=", "0.999", ",", "e", "=", "1e-6", ",", "weight_decay", "=", "0.01", ",", "\n", "max_grad_norm", "=", "1.0", ")", ":", "\n", "        ", "if", "lr", "is", "not", "required", "and", "lr", "<", "0.0", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Invalid learning rate: {} - should be >= 0.0\"", ".", "format", "(", "lr", ")", ")", "\n", "", "if", "schedule", "not", "in", "SCHEDULES", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid schedule parameter: {}\"", ".", "format", "(", "schedule", ")", ")", "\n", "", "if", "not", "0.0", "<=", "warmup", "<", "1.0", "and", "not", "warmup", "==", "-", "1", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Invalid warmup: {} - should be in [0.0, 1.0[ or -1\"", ".", "format", "(", "\n", "warmup", ")", ")", "\n", "", "if", "not", "0.0", "<=", "b1", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Invalid b1 parameter: {} - should be in [0.0, 1.0[\"", ".", "format", "(", "b1", ")", ")", "\n", "", "if", "not", "0.0", "<=", "b2", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Invalid b2 parameter: {} - should be in [0.0, 1.0[\"", ".", "format", "(", "b2", ")", ")", "\n", "", "if", "not", "e", ">=", "0.0", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Invalid epsilon value: {} - should be >= 0.0\"", ".", "format", "(", "e", ")", ")", "\n", "", "defaults", "=", "dict", "(", "lr", "=", "lr", ",", "schedule", "=", "schedule", ",", "warmup", "=", "warmup", ",", "\n", "t_total", "=", "t_total", ",", "\n", "b1", "=", "b1", ",", "b2", "=", "b2", ",", "e", "=", "e", ",", "weight_decay", "=", "weight_decay", ",", "\n", "max_grad_norm", "=", "max_grad_norm", ")", "\n", "super", "(", "BertAdam", ",", "self", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.model.optimizer.BertAdam.get_lr": [[106, 121], ["lr.append", "len", "schedule_fct"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "lr", "=", "[", "]", "\n", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "if", "len", "(", "state", ")", "==", "0", ":", "\n", "                    ", "return", "[", "0", "]", "\n", "", "if", "group", "[", "'t_total'", "]", "!=", "-", "1", ":", "\n", "                    ", "schedule_fct", "=", "SCHEDULES", "[", "group", "[", "'schedule'", "]", "]", "\n", "lr_scheduled", "=", "group", "[", "'lr'", "]", "*", "schedule_fct", "(", "\n", "state", "[", "'step'", "]", "/", "group", "[", "'t_total'", "]", ",", "group", "[", "'warmup'", "]", ")", "\n", "", "else", ":", "\n", "                    ", "lr_scheduled", "=", "group", "[", "'lr'", "]", "\n", "", "lr", ".", "append", "(", "lr_scheduled", ")", "\n", "", "", "return", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.model.optimizer.BertAdam.step": [[122, 220], ["closure", "next_m.mul_().add_", "next_v.mul_().addcmul_", "p.data.add_", "RuntimeError", "len", "torch.zeros_like", "torch.zeros_like", "torch.nn.utils.clip_grad_norm_", "step_size.unsqueeze.unsqueeze.unsqueeze", "torch.ge", "torch.where", "torch.where", "state[].mul_", "torch.where", "state[].mul_", "p.data.size", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.ones", "torch.ones", "next_m.mul_", "next_v.mul_", "next_v.sqrt", "schedule_fct", "torch.abs().sum", "torch.where.unsqueeze", "bias_correction2.sqrt", "torch.abs"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "        ", "\"\"\"Performs a single optimization step.\n        Arguments:\n            closure (callable, optional): A closure that reevaluates the model\n                and returns the loss.\n        \"\"\"", "\n", "loss", "=", "None", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "grad", "=", "p", ".", "grad", ".", "data", "\n", "if", "grad", ".", "is_sparse", ":", "\n", "                    ", "raise", "RuntimeError", "(", "\n", "'Adam does not support sparse gradients, please consider SparseAdam instead'", ")", "\n", "", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "device", "=", "p", ".", "device", "\n", "# State initialization", "\n", "if", "len", "(", "state", ")", "==", "0", ":", "\n", "                    ", "state", "[", "'step'", "]", "=", "0", "\n", "# Exponential moving average of gradient values", "\n", "state", "[", "'next_m'", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "# Exponential moving average of squared gradient values", "\n", "state", "[", "'next_v'", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "if", "'is_embedding'", "in", "group", "and", "group", "[", "'is_embedding'", "]", ":", "\n", "                        ", "vocab_size", "=", "p", ".", "data", ".", "size", "(", "0", ")", "\n", "state", "[", "'b1_correction'", "]", "=", "torch", ".", "ones", "(", "[", "vocab_size", "]", ",", "\n", "device", "=", "device", ")", "\n", "state", "[", "'b1_correction'", "]", "[", ":", "]", "=", "group", "[", "'b1'", "]", "\n", "state", "[", "'b2_correction'", "]", "=", "torch", ".", "ones", "(", "[", "vocab_size", "]", ",", "\n", "device", "=", "device", ")", "\n", "state", "[", "'b2_correction'", "]", "[", ":", "]", "=", "group", "[", "'b2'", "]", "\n", "state", "[", "'ones'", "]", "=", "torch", ".", "ones", "(", "[", "vocab_size", "]", ",", "device", "=", "device", ")", "\n", "state", "[", "'zeros'", "]", "=", "torch", ".", "zeros", "(", "[", "vocab_size", "]", ",", "\n", "device", "=", "device", ")", "\n", "\n", "state", "[", "'b1'", "]", "=", "torch", ".", "ones", "(", "[", "vocab_size", "]", ",", "device", "=", "device", ")", "\n", "state", "[", "'b1'", "]", "[", ":", "]", "=", "group", "[", "'b1'", "]", "\n", "state", "[", "'b2'", "]", "=", "torch", ".", "ones", "(", "[", "vocab_size", "]", ",", "device", "=", "device", ")", "\n", "state", "[", "'b2'", "]", "[", ":", "]", "=", "group", "[", "'b2'", "]", "\n", "\n", "", "", "next_m", ",", "next_v", "=", "state", "[", "'next_m'", "]", ",", "state", "[", "'next_v'", "]", "\n", "beta1", ",", "beta2", "=", "group", "[", "'b1'", "]", ",", "group", "[", "'b2'", "]", "\n", "\n", "# Add grad clipping", "\n", "if", "group", "[", "'max_grad_norm'", "]", ">", "0", ":", "\n", "                    ", "clip_grad_norm_", "(", "p", ",", "group", "[", "'max_grad_norm'", "]", ")", "\n", "\n", "# Decay the first and second moment running average coefficient", "\n", "# In-place operations to update the averages at the same time", "\n", "", "next_m", ".", "mul_", "(", "beta1", ")", ".", "add_", "(", "1", "-", "beta1", ",", "grad", ")", "\n", "next_v", ".", "mul_", "(", "beta2", ")", ".", "addcmul_", "(", "1", "-", "beta2", ",", "grad", ",", "grad", ")", "\n", "update", "=", "next_m", "/", "(", "next_v", ".", "sqrt", "(", ")", "+", "group", "[", "'e'", "]", ")", "\n", "\n", "# Just adding the square of the weights to the loss function is *not*", "\n", "# the correct way of using L2 regularization/weight decay with Adam,", "\n", "# since that will interact with the m and v parameters in strange ways.", "\n", "#", "\n", "# Instead we want to decay the weights in a manner that doesn't interact", "\n", "# with the m/v parameters. This is equivalent to adding the square", "\n", "# of the weights to the loss with plain (non-momentum) SGD.", "\n", "if", "group", "[", "'weight_decay'", "]", ">", "0.0", ":", "\n", "                    ", "update", "+=", "group", "[", "'weight_decay'", "]", "*", "p", ".", "data", "\n", "\n", "", "if", "group", "[", "'t_total'", "]", "!=", "-", "1", ":", "\n", "                    ", "schedule_fct", "=", "SCHEDULES", "[", "group", "[", "'schedule'", "]", "]", "\n", "lr_scheduled", "=", "group", "[", "'lr'", "]", "*", "schedule_fct", "(", "\n", "state", "[", "'step'", "]", "/", "group", "[", "'t_total'", "]", ",", "group", "[", "'warmup'", "]", ")", "\n", "", "else", ":", "\n", "                    ", "lr_scheduled", "=", "group", "[", "'lr'", "]", "\n", "\n", "", "if", "'is_embedding'", "in", "group", "and", "group", "[", "'is_embedding'", "]", ":", "\n", "                    ", "bias_correction1", "=", "1", "-", "state", "[", "'b1_correction'", "]", "\n", "bias_correction2", "=", "1", "-", "state", "[", "'b2_correction'", "]", "\n", "step_size", "=", "lr_scheduled", "*", "bias_correction2", ".", "sqrt", "(", ")", "/", "bias_correction1", "\n", "step_size", "=", "step_size", ".", "unsqueeze", "(", "1", ")", "\n", "lr_scheduled", "=", "lr_scheduled", "*", "step_size", "\n", "grad_condition", "=", "torch", ".", "ge", "(", "torch", ".", "abs", "(", "grad", ")", ".", "sum", "(", "1", ")", ",", "1e-6", ")", "\n", "\n", "update_embedding", "=", "torch", ".", "where", "(", "grad_condition", ",", "\n", "state", "[", "'ones'", "]", ",", "\n", "state", "[", "'zeros'", "]", ")", "\n", "lr_scheduled", "=", "lr_scheduled", "*", "update_embedding", ".", "unsqueeze", "(", "-", "1", ")", "\n", "beta1_tensor", "=", "torch", ".", "where", "(", "grad_condition", ",", "state", "[", "'ones'", "]", ",", "\n", "state", "[", "'b1'", "]", ")", "\n", "state", "[", "'b1_correction'", "]", ".", "mul_", "(", "beta1_tensor", ")", "\n", "beta2_tensor", "=", "torch", ".", "where", "(", "grad_condition", ",", "state", "[", "'ones'", "]", ",", "\n", "state", "[", "'b2'", "]", ")", "\n", "state", "[", "'b2_correction'", "]", ".", "mul_", "(", "beta2_tensor", ")", "\n", "\n", "", "update_with_lr", "=", "lr_scheduled", "*", "update", "\n", "p", ".", "data", ".", "add_", "(", "-", "update_with_lr", ")", "\n", "\n", "state", "[", "'step'", "]", "+=", "1", "\n", "", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.model.optimizer.warmup_cosine": [[38, 42], ["torch.cos"], "function", ["None"], ["def", "warmup_cosine", "(", "x", ",", "warmup", "=", "0.002", ")", ":", "\n", "    ", "if", "x", "<", "warmup", ":", "\n", "        ", "return", "x", "/", "warmup", "\n", "", "return", "0.5", "*", "(", "1.0", "+", "torch", ".", "cos", "(", "math", ".", "pi", "*", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.model.optimizer.warmup_constant": [[44, 48], ["None"], "function", ["None"], ["", "def", "warmup_constant", "(", "x", ",", "warmup", "=", "0.002", ")", ":", "\n", "    ", "if", "x", "<", "warmup", ":", "\n", "        ", "return", "x", "/", "warmup", "\n", "", "return", "1.0", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.model.optimizer.warmup_linear": [[50, 54], ["None"], "function", ["None"], ["", "def", "warmup_linear", "(", "x", ",", "warmup", "=", "0.002", ")", ":", "\n", "    ", "if", "x", "<", "warmup", ":", "\n", "        ", "return", "x", "/", "warmup", "\n", "", "return", "1.0", "-", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.classification.drnn.DRNN.__init__": [[25, 45], ["model.classification.classifier.Classifier.__init__", "model.rnn.RNN", "torch.nn.Dropout", "torch.nn.BatchNorm1d", "torch.nn.Linear", "torch.nn.Linear", "model.rnn.RNN", "len"], "methods", ["home.repos.pwc.inspect_result.MemoriesJ_KAMG.evaluate.classification_evaluate.ClassificationEvaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "config", ")", ":", "\n", "        ", "super", "(", "DRNN", ",", "self", ")", ".", "__init__", "(", "dataset", ",", "config", ")", "\n", "self", ".", "rnn_type", "=", "config", ".", "DRNN", ".", "rnn_type", "\n", "self", ".", "forward_rnn", "=", "RNN", "(", "\n", "config", ".", "embedding", ".", "dimension", ",", "config", ".", "DRNN", ".", "hidden_dimension", ",", "\n", "batch_first", "=", "True", ",", "rnn_type", "=", "config", ".", "DRNN", ".", "rnn_type", ")", "\n", "if", "config", ".", "DRNN", ".", "bidirectional", ":", "\n", "            ", "self", ".", "backward_rnn", "=", "RNN", "(", "\n", "config", ".", "embedding", ".", "dimension", ",", "config", ".", "DRNN", ".", "hidden_dimension", ",", "\n", "batch_first", "=", "True", ",", "rnn_type", "=", "config", ".", "DRNN", ".", "rnn_type", ")", "\n", "", "self", ".", "window_size", "=", "config", ".", "DRNN", ".", "window_size", "\n", "self", ".", "dropout", "=", "torch", ".", "nn", ".", "Dropout", "(", "p", "=", "config", ".", "DRNN", ".", "cell_hidden_dropout", ")", "\n", "self", ".", "hidden_dimension", "=", "config", ".", "DRNN", ".", "hidden_dimension", "\n", "if", "config", ".", "DRNN", ".", "bidirectional", ":", "\n", "            ", "self", ".", "hidden_dimension", "*=", "2", "\n", "", "self", ".", "batch_norm", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "self", ".", "hidden_dimension", ")", "\n", "\n", "self", ".", "mlp", "=", "torch", ".", "nn", ".", "Linear", "(", "self", ".", "hidden_dimension", ",", "self", ".", "hidden_dimension", ")", "\n", "self", ".", "linear", "=", "torch", ".", "nn", ".", "Linear", "(", "self", ".", "hidden_dimension", ",", "\n", "len", "(", "dataset", ".", "label_map", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.classification.drnn.DRNN.get_parameter_optimizer_dict": [[46, 55], ["super().get_parameter_optimizer_dict", "super().get_parameter_optimizer_dict.append", "super().get_parameter_optimizer_dict.append", "super().get_parameter_optimizer_dict.append", "super().get_parameter_optimizer_dict.append", "super().get_parameter_optimizer_dict.append", "drnn.DRNN.forward_rnn.parameters", "drnn.DRNN.batch_norm.parameters", "drnn.DRNN.mlp.parameters", "drnn.DRNN.linear.parameters", "drnn.DRNN.backward_rnn.parameters"], "methods", ["home.repos.pwc.inspect_result.MemoriesJ_KAMG.classification.classifier.Classifier.get_parameter_optimizer_dict"], ["", "def", "get_parameter_optimizer_dict", "(", "self", ")", ":", "\n", "        ", "params", "=", "super", "(", "DRNN", ",", "self", ")", ".", "get_parameter_optimizer_dict", "(", ")", "\n", "params", ".", "append", "(", "{", "'params'", ":", "self", ".", "forward_rnn", ".", "parameters", "(", ")", "}", ")", "\n", "if", "self", ".", "config", ".", "DRNN", ".", "bidirectional", ":", "\n", "            ", "params", ".", "append", "(", "{", "'params'", ":", "self", ".", "backward_rnn", ".", "parameters", "(", ")", "}", ")", "\n", "", "params", ".", "append", "(", "{", "'params'", ":", "self", ".", "batch_norm", ".", "parameters", "(", ")", "}", ")", "\n", "params", ".", "append", "(", "{", "'params'", ":", "self", ".", "mlp", ".", "parameters", "(", ")", "}", ")", "\n", "params", ".", "append", "(", "{", "'params'", ":", "self", ".", "linear", ".", "parameters", "(", ")", "}", ")", "\n", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.classification.drnn.DRNN.forward": [[56, 121], ["drnn.DRNN.get_embedding", "front_pad_embedding.size", "mask.unsqueeze.unsqueeze.unsqueeze", "torch.cat", "range", "front_state.transpose.transpose.transpose", "torch.cat", "torch.cat.transpose().contiguous", "drnn.DRNN.batch_norm().transpose", "drnn.DRNN.mlp", "torch.nn.functional.max_pool1d().squeeze", "drnn.DRNN.linear", "drnn.DRNN.get_embedding", "torch.cat.size", "drnn.DRNN.forward_rnn", "front_state.transpose.transpose.split", "list", "range", "torch.cat", "range", "tail_state.transpose.transpose.transpose", "torch.cat", "torch.cat", "drnn.DRNN.dropout", "range", "drnn.DRNN.dropout", "drnn.DRNN.dropout", "list.append", "torch.cat.size", "drnn.DRNN.backward_rnn", "tail_state.transpose.transpose.split", "torch.cat.transpose", "drnn.DRNN.batch_norm", "torch.nn.functional.max_pool1d", "drnn.DRNN.transpose", "drnn.DRNN.size", "tail_pad_embedding.size", "torch.cat.size", "drnn.DRNN.dropout", "drnn.DRNN.dropout", "front_pad_embedding.size"], "methods", ["home.repos.pwc.inspect_result.MemoriesJ_KAMG.classification.classifier.Classifier.get_embedding", "home.repos.pwc.inspect_result.MemoriesJ_KAMG.classification.classifier.Classifier.get_embedding"], ["", "def", "forward", "(", "self", ",", "batch", ")", ":", "\n", "        ", "front_pad_embedding", ",", "_", ",", "mask", "=", "self", ".", "get_embedding", "(", "\n", "batch", ",", "[", "self", ".", "window_size", "-", "1", ",", "0", "]", ",", "cDataset", ".", "VOCAB_PADDING_LEARNABLE", ")", "\n", "if", "self", ".", "config", ".", "DRNN", ".", "bidirectional", ":", "\n", "            ", "tail_pad_embedding", ",", "_", ",", "_", "=", "self", ".", "get_embedding", "(", "\n", "batch", ",", "[", "0", ",", "self", ".", "window_size", "-", "1", "]", ",", "\n", "cDataset", ".", "VOCAB_PADDING_LEARNABLE", ")", "\n", "", "batch_size", "=", "front_pad_embedding", ".", "size", "(", "0", ")", "\n", "mask", "=", "mask", ".", "unsqueeze", "(", "2", ")", "\n", "\n", "front_slice_embedding_list", "=", "[", "front_pad_embedding", "[", ":", ",", "i", ":", "i", "+", "self", ".", "window_size", ",", ":", "]", "for", "i", "in", "\n", "range", "(", "front_pad_embedding", ".", "size", "(", "1", ")", "-", "self", ".", "window_size", "+", "1", ")", "]", "\n", "\n", "front_slice_embedding", "=", "torch", ".", "cat", "(", "front_slice_embedding_list", ",", "dim", "=", "0", ")", "\n", "\n", "state", "=", "None", "\n", "for", "i", "in", "range", "(", "front_slice_embedding", ".", "size", "(", "1", ")", ")", ":", "\n", "            ", "_", ",", "state", "=", "self", ".", "forward_rnn", "(", "front_slice_embedding", "[", ":", ",", "i", ":", "i", "+", "1", ",", ":", "]", ",", "\n", "init_state", "=", "state", ",", "ori_state", "=", "True", ")", "\n", "if", "self", ".", "rnn_type", "==", "RNNType", ".", "LSTM", ":", "\n", "                ", "state", "[", "0", "]", "=", "self", ".", "dropout", "(", "state", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                ", "state", "=", "self", ".", "dropout", "(", "state", ")", "\n", "", "", "front_state", "=", "state", "[", "0", "]", "if", "self", ".", "rnn_type", "==", "RNNType", ".", "LSTM", "else", "state", "\n", "front_state", "=", "front_state", ".", "transpose", "(", "0", ",", "1", ")", "\n", "front_hidden", "=", "torch", ".", "cat", "(", "front_state", ".", "split", "(", "batch_size", ",", "dim", "=", "0", ")", ",", "dim", "=", "1", ")", "\n", "front_hidden", "=", "front_hidden", "*", "mask", "\n", "\n", "hidden", "=", "front_hidden", "\n", "if", "self", ".", "config", ".", "DRNN", ".", "bidirectional", ":", "\n", "            ", "tail_slice_embedding_list", "=", "list", "(", ")", "\n", "for", "i", "in", "range", "(", "tail_pad_embedding", ".", "size", "(", "1", ")", "-", "self", ".", "window_size", "+", "1", ")", ":", "\n", "                ", "slice_embedding", "=", "tail_pad_embedding", "[", ":", ",", "i", ":", "i", "+", "self", ".", "window_size", ",", ":", "]", "\n", "tail_slice_embedding_list", ".", "append", "(", "slice_embedding", ")", "\n", "", "tail_slice_embedding", "=", "torch", ".", "cat", "(", "tail_slice_embedding_list", ",", "dim", "=", "0", ")", "\n", "\n", "state", "=", "None", "\n", "for", "i", "in", "range", "(", "tail_slice_embedding", ".", "size", "(", "1", ")", ",", "0", ",", "-", "1", ")", ":", "\n", "                ", "_", ",", "state", "=", "self", ".", "backward_rnn", "(", "\n", "tail_slice_embedding", "[", ":", ",", "i", "-", "1", ":", "i", ",", ":", "]", ",", "\n", "init_state", "=", "state", ",", "ori_state", "=", "True", ")", "\n", "if", "i", "!=", "tail_slice_embedding", ".", "size", "(", "1", ")", "-", "1", ":", "\n", "                    ", "if", "self", ".", "rnn_type", "==", "RNNType", ".", "LSTM", ":", "\n", "                        ", "state", "[", "0", "]", "=", "self", ".", "dropout", "(", "state", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                        ", "state", "=", "self", ".", "dropout", "(", "state", ")", "\n", "", "", "", "tail_state", "=", "state", "[", "0", "]", "if", "self", ".", "rnn_type", "==", "RNNType", ".", "LSTM", "else", "state", "\n", "tail_state", "=", "tail_state", ".", "transpose", "(", "0", ",", "1", ")", "\n", "tail_hidden", "=", "torch", ".", "cat", "(", "tail_state", ".", "split", "(", "batch_size", ",", "dim", "=", "0", ")", ",", "dim", "=", "1", ")", "\n", "tail_hidden", "=", "tail_hidden", "*", "mask", "\n", "hidden", "=", "torch", ".", "cat", "(", "[", "hidden", ",", "tail_hidden", "]", ",", "dim", "=", "2", ")", "\n", "\n", "", "hidden", "=", "hidden", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "\n", "batch_normed", "=", "self", ".", "batch_norm", "(", "hidden", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "batch_normed", "=", "batch_normed", "*", "mask", "\n", "mlp_hidden", "=", "self", ".", "mlp", "(", "batch_normed", ")", "\n", "mlp_hidden", "=", "mlp_hidden", "*", "mask", "\n", "neg_mask", "=", "(", "mask", "-", "1", ")", "*", "65500.0", "\n", "mlp_hidden", "=", "mlp_hidden", "+", "neg_mask", "\n", "max_pooling", "=", "torch", ".", "nn", ".", "functional", ".", "max_pool1d", "(", "\n", "mlp_hidden", ".", "transpose", "(", "1", ",", "2", ")", ",", "mlp_hidden", ".", "size", "(", "1", ")", ")", ".", "squeeze", "(", ")", "\n", "return", "self", ".", "linear", "(", "self", ".", "dropout", "(", "max_pooling", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.classification.textrnn.DocEmbeddingType.str": [[31, 35], ["None"], "methods", ["None"], ["@", "classmethod", "\n", "def", "str", "(", "cls", ")", ":", "\n", "        ", "return", "\",\"", ".", "join", "(", "\n", "[", "cls", ".", "AVG", ",", "cls", ".", "ATTENTION", ",", "cls", ".", "LAST_HIDDEN", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.classification.textrnn.TextRNN.__init__": [[45, 61], ["model.classification.classifier.Classifier.__init__", "model.rnn.RNN", "model.layers.SumAttention", "torch.nn.Linear", "torch.nn.Dropout", "len"], "methods", ["home.repos.pwc.inspect_result.MemoriesJ_KAMG.evaluate.classification_evaluate.ClassificationEvaluator.__init__"], ["def", "__init__", "(", "self", ",", "dataset", ",", "config", ")", ":", "\n", "        ", "super", "(", "TextRNN", ",", "self", ")", ".", "__init__", "(", "dataset", ",", "config", ")", "\n", "self", ".", "doc_embedding_type", "=", "config", ".", "TextRNN", ".", "doc_embedding_type", "\n", "self", ".", "rnn", "=", "RNN", "(", "\n", "config", ".", "embedding", ".", "dimension", ",", "config", ".", "TextRNN", ".", "hidden_dimension", ",", "\n", "num_layers", "=", "config", ".", "TextRNN", ".", "num_layers", ",", "batch_first", "=", "True", ",", "\n", "bidirectional", "=", "config", ".", "TextRNN", ".", "bidirectional", ",", "\n", "rnn_type", "=", "config", ".", "TextRNN", ".", "rnn_type", ")", "\n", "hidden_dimension", "=", "config", ".", "TextRNN", ".", "hidden_dimension", "\n", "if", "config", ".", "TextRNN", ".", "bidirectional", ":", "\n", "            ", "hidden_dimension", "*=", "2", "\n", "", "self", ".", "sum_attention", "=", "SumAttention", "(", "hidden_dimension", ",", "\n", "config", ".", "TextRNN", ".", "attention_dimension", ",", "\n", "config", ".", "device", ")", "\n", "self", ".", "linear", "=", "torch", ".", "nn", ".", "Linear", "(", "hidden_dimension", ",", "len", "(", "dataset", ".", "label_map", ")", ")", "\n", "self", ".", "dropout", "=", "torch", ".", "nn", ".", "Dropout", "(", "p", "=", "config", ".", "train", ".", "hidden_layer_dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.classification.textrnn.TextRNN.get_parameter_optimizer_dict": [[62, 69], ["super().get_parameter_optimizer_dict", "super().get_parameter_optimizer_dict.append", "super().get_parameter_optimizer_dict.append", "super().get_parameter_optimizer_dict.append", "textrnn.TextRNN.rnn.parameters", "textrnn.TextRNN.linear.parameters", "textrnn.TextRNN.sum_attention.parameters"], "methods", ["home.repos.pwc.inspect_result.MemoriesJ_KAMG.classification.classifier.Classifier.get_parameter_optimizer_dict"], ["", "def", "get_parameter_optimizer_dict", "(", "self", ")", ":", "\n", "        ", "params", "=", "super", "(", "TextRNN", ",", "self", ")", ".", "get_parameter_optimizer_dict", "(", ")", "\n", "params", ".", "append", "(", "{", "'params'", ":", "self", ".", "rnn", ".", "parameters", "(", ")", "}", ")", "\n", "params", ".", "append", "(", "{", "'params'", ":", "self", ".", "linear", ".", "parameters", "(", ")", "}", ")", "\n", "if", "self", ".", "doc_embedding_type", "==", "DocEmbeddingType", ".", "ATTENTION", ":", "\n", "            ", "params", ".", "append", "(", "{", "'params'", ":", "self", ".", "sum_attention", ".", "parameters", "(", ")", "}", ")", "\n", "", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.classification.textrnn.TextRNN.update_lr": [[70, 77], ["None"], "methods", ["None"], ["", "def", "update_lr", "(", "self", ",", "optimizer", ",", "epoch", ")", ":", "\n", "        ", "if", "epoch", ">", "self", ".", "config", ".", "train", ".", "num_epochs_static_embedding", ":", "\n", "            ", "for", "param_group", "in", "optimizer", ".", "param_groups", "[", ":", "2", "]", ":", "\n", "                ", "param_group", "[", "\"lr\"", "]", "=", "self", ".", "config", ".", "optimizer", ".", "learning_rate", "\n", "", "", "else", ":", "\n", "            ", "for", "param_group", "in", "optimizer", ".", "param_groups", "[", ":", "2", "]", ":", "\n", "                ", "param_group", "[", "\"lr\"", "]", "=", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.classification.textrnn.TextRNN.forward": [[78, 101], ["textrnn.TextRNN.rnn", "textrnn.TextRNN.dropout", "textrnn.TextRNN.token_embedding", "batch[].to", "textrnn.TextRNN.char_embedding", "batch[].to", "textrnn.TextRNN.linear", "batch[].to", "batch[].to", "torch.sum", "batch[].to.unsqueeze", "textrnn.TextRNN.sum_attention", "TypeError", "textrnn.DocEmbeddingType.str"], "methods", ["home.repos.pwc.inspect_result.MemoriesJ_KAMG.classification.attentive_convolution.AttentionType.str"], ["", "", "", "def", "forward", "(", "self", ",", "batch", ")", ":", "\n", "        ", "if", "self", ".", "config", ".", "feature", ".", "feature_names", "[", "0", "]", "==", "\"token\"", ":", "\n", "            ", "embedding", "=", "self", ".", "token_embedding", "(", "\n", "batch", "[", "cDataset", ".", "DOC_TOKEN", "]", ".", "to", "(", "self", ".", "config", ".", "device", ")", ")", "\n", "length", "=", "batch", "[", "cDataset", ".", "DOC_TOKEN_LEN", "]", ".", "to", "(", "self", ".", "config", ".", "device", ")", "\n", "", "else", ":", "\n", "            ", "embedding", "=", "self", ".", "char_embedding", "(", "\n", "batch", "[", "cDataset", ".", "DOC_CHAR", "]", ".", "to", "(", "self", ".", "config", ".", "device", ")", ")", "\n", "length", "=", "batch", "[", "cDataset", ".", "DOC_CHAR_LEN", "]", ".", "to", "(", "self", ".", "config", ".", "device", ")", "\n", "", "output", ",", "last_hidden", "=", "self", ".", "rnn", "(", "embedding", ",", "length", ")", "\n", "\n", "if", "self", ".", "doc_embedding_type", "==", "DocEmbeddingType", ".", "AVG", ":", "\n", "            ", "doc_embedding", "=", "torch", ".", "sum", "(", "output", ",", "1", ")", "/", "length", ".", "unsqueeze", "(", "1", ")", "\n", "", "elif", "self", ".", "doc_embedding_type", "==", "DocEmbeddingType", ".", "ATTENTION", ":", "\n", "            ", "doc_embedding", "=", "self", ".", "sum_attention", "(", "output", ")", "\n", "", "elif", "self", ".", "doc_embedding_type", "==", "DocEmbeddingType", ".", "LAST_HIDDEN", ":", "\n", "            ", "doc_embedding", "=", "last_hidden", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "\n", "\"Unsupported rnn init type: %s. Supported rnn type is: %s\"", "%", "(", "\n", "self", ".", "doc_embedding_type", ",", "DocEmbeddingType", ".", "str", "(", ")", ")", ")", "\n", "\n", "", "return", "self", ".", "dropout", "(", "self", ".", "linear", "(", "doc_embedding", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.classification.attentive_convolution.AttentiveConvNetType.str": [[29, 32], ["None"], "methods", ["None"], ["@", "classmethod", "\n", "def", "str", "(", "cls", ")", ":", "\n", "        ", "return", "\",\"", ".", "join", "(", "cls", ".", "LIGHT", ",", "cls", ".", "ADVANCED", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.classification.attentive_convolution.AttentionType.str": [[39, 42], ["None"], "methods", ["None"], ["@", "classmethod", "\n", "def", "str", "(", "cls", ")", ":", "\n", "        ", "return", "\",\"", ".", "join", "(", "cls", ".", "DOT", ",", "cls", ".", "BILINEAR", ",", "cls", ".", "ADDITIVE_PROJECTION", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.classification.attentive_convolution.AttentiveConvNet.__init__": [[49, 99], ["model.classification.classifier.Classifier.__init__", "int", "model.model_util.init_tensor().to", "torch.nn.Sequential", "torch.zeros().to", "model.model_util.init_tensor().to", "model.model_util.init_tensor().to", "torch.nn.Linear", "attentive_convolution.AttentiveConvNet.get_highway", "attentive_convolution.AttentiveConvNet.get_highway", "attentive_convolution.AttentiveConvNet.get_highway", "attentive_convolution.AttentiveConvNet.get_highway", "attentive_convolution.AttentiveConvNet.get_highway", "model.layers.DotProductAttention", "torch.nn.Conv1d", "torch.nn.Tanh", "len", "model.model_util.init_tensor().to", "model.layers.DotProductAttention", "model.model_util.init_tensor", "torch.zeros", "model.model_util.init_tensor", "model.model_util.init_tensor", "model.layers.AdditiveAttention2D", "TypeError", "torch.empty", "torch.empty", "torch.empty", "model.model_util.init_tensor", "torch.empty"], "methods", ["home.repos.pwc.inspect_result.MemoriesJ_KAMG.evaluate.classification_evaluate.ClassificationEvaluator.__init__", "home.repos.pwc.inspect_result.MemoriesJ_KAMG.classification.attentive_convolution.AttentiveConvNet.get_highway", "home.repos.pwc.inspect_result.MemoriesJ_KAMG.classification.attentive_convolution.AttentiveConvNet.get_highway", "home.repos.pwc.inspect_result.MemoriesJ_KAMG.classification.attentive_convolution.AttentiveConvNet.get_highway", "home.repos.pwc.inspect_result.MemoriesJ_KAMG.classification.attentive_convolution.AttentiveConvNet.get_highway", "home.repos.pwc.inspect_result.MemoriesJ_KAMG.classification.attentive_convolution.AttentiveConvNet.get_highway", "home.repos.pwc.inspect_result.MemoriesJ_KAMG.model.model_util.init_tensor", "home.repos.pwc.inspect_result.MemoriesJ_KAMG.model.model_util.init_tensor", "home.repos.pwc.inspect_result.MemoriesJ_KAMG.model.model_util.init_tensor", "home.repos.pwc.inspect_result.MemoriesJ_KAMG.model.model_util.init_tensor"], ["def", "__init__", "(", "self", ",", "dataset", ",", "config", ")", ":", "\n", "        ", "super", "(", "AttentiveConvNet", ",", "self", ")", ".", "__init__", "(", "dataset", ",", "config", ")", "\n", "self", ".", "attentive_conv_net_type", "=", "config", ".", "AttentiveConvNet", ".", "type", "\n", "self", ".", "attention_type", "=", "config", ".", "AttentiveConvNet", ".", "attention_type", "\n", "self", ".", "dim", "=", "config", ".", "embedding", ".", "dimension", "\n", "self", ".", "attention_dim", "=", "self", ".", "dim", "\n", "self", ".", "margin_size", "=", "config", ".", "AttentiveConvNet", ".", "margin_size", "\n", "assert", "self", ".", "margin_size", "%", "2", "==", "1", ",", "\"AttentiveConvNet margin size should be odd!\"", "\n", "\n", "self", ".", "radius", "=", "int", "(", "self", ".", "margin_size", "/", "2", ")", "\n", "if", "self", ".", "attentive_conv_net_type", "==", "AttentiveConvNetType", ".", "ADVANCED", ":", "\n", "            ", "self", ".", "attention_dim", "*=", "2", "\n", "self", ".", "x_context_highway", "=", "self", ".", "get_highway", "(", "self", ".", "dim", ",", "\n", "self", ".", "margin_size", ")", "\n", "\n", "self", ".", "x_self_highway", "=", "self", ".", "get_highway", "(", "self", ".", "dim", ",", "1", ")", "\n", "\n", "self", ".", "a_context_highway", "=", "self", ".", "get_highway", "(", "self", ".", "dim", ",", "\n", "self", ".", "margin_size", ")", "\n", "self", ".", "a_self_highway", "=", "self", ".", "get_highway", "(", "self", ".", "dim", ",", "1", ")", "\n", "self", ".", "beneficiary_highway", "=", "self", ".", "get_highway", "(", "self", ".", "dim", ",", "1", ")", "\n", "\n", "", "if", "self", ".", "attention_type", "==", "AttentionType", ".", "DOT", ":", "\n", "            ", "self", ".", "dot_product_attention", "=", "DotProductAttention", "(", "1.0", ")", "\n", "", "elif", "self", ".", "attention_type", "==", "AttentionType", ".", "BILINEAR", ":", "\n", "            ", "self", ".", "bilinear_matrix", "=", "init_tensor", "(", "\n", "torch", ".", "empty", "(", "self", ".", "attention_dim", ",", "self", ".", "attention_dim", ")", ")", ".", "to", "(", "\n", "config", ".", "device", ")", "\n", "self", ".", "dot_product_attention", "=", "DotProductAttention", "(", "1.0", ")", "\n", "", "elif", "self", ".", "attention_type", "==", "AttentionType", ".", "ADDITIVE_PROJECTION", ":", "\n", "            ", "self", ".", "additive_projection", "=", "AdditiveAttention2D", "(", "self", ".", "attention_dim", ")", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "\n", "\"Unsupported AttentionType: %s.\"", "%", "self", ".", "attention_type", ")", "\n", "\n", "", "self", ".", "attentive_conv", "=", "init_tensor", "(", "\n", "torch", ".", "empty", "(", "self", ".", "attention_dim", ",", "self", ".", "dim", ")", ")", ".", "to", "(", "config", ".", "device", ")", "\n", "self", ".", "x_conv", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "torch", ".", "nn", ".", "Conv1d", "(", "self", ".", "dim", ",", "self", ".", "dim", ",", "self", ".", "margin_size", ",", "\n", "padding", "=", "self", ".", "radius", ")", ",", "\n", "torch", ".", "nn", ".", "Tanh", "(", ")", ")", "\n", "self", ".", "bias", "=", "torch", ".", "zeros", "(", "[", "self", ".", "dim", "]", ")", ".", "to", "(", "config", ".", "device", ")", "\n", "self", ".", "hidden_size", "=", "config", ".", "AttentiveConvNet", ".", "hidden_size", "\n", "self", ".", "hidden1_matrix", "=", "init_tensor", "(", "\n", "torch", ".", "empty", "(", "self", ".", "dim", ",", "self", ".", "hidden_size", ")", ")", ".", "to", "(", "config", ".", "device", ")", "\n", "self", ".", "hidden2_matrix", "=", "init_tensor", "(", "\n", "torch", ".", "empty", "(", "self", ".", "hidden_size", ",", "self", ".", "hidden_size", ")", ")", ".", "to", "(", "config", ".", "device", ")", "\n", "self", ".", "linear", "=", "torch", ".", "nn", ".", "Linear", "(", "self", ".", "dim", "+", "2", "*", "self", ".", "hidden_size", ",", "\n", "len", "(", "dataset", ".", "label_map", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.classification.attentive_convolution.AttentiveConvNet.get_highway": [[100, 110], ["int", "torch.nn.Sequential", "torch.nn.Sequential", "model.layers.Highway", "torch.nn.Conv1d", "torch.nn.Sigmoid", "torch.nn.Conv1d", "torch.nn.Tanh"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_highway", "(", "dimension", ",", "margin_size", ")", ":", "\n", "        ", "radius", "=", "int", "(", "margin_size", "/", "2", ")", "\n", "transformer_gate", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "torch", ".", "nn", ".", "Conv1d", "(", "dimension", ",", "dimension", ",", "margin_size", ",", "padding", "=", "radius", ")", ",", "\n", "torch", ".", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "transformer_forward", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "torch", ".", "nn", ".", "Conv1d", "(", "dimension", ",", "dimension", ",", "margin_size", ",", "padding", "=", "radius", ")", ",", "\n", "torch", ".", "nn", ".", "Tanh", "(", ")", ")", "\n", "return", "Highway", "(", "transformer_gate", ",", "transformer_forward", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.classification.attentive_convolution.AttentiveConvNet.get_parameter_optimizer_dict": [[111, 135], ["super().get_parameter_optimizer_dict", "super().get_parameter_optimizer_dict.append", "super().get_parameter_optimizer_dict.append", "super().get_parameter_optimizer_dict.append", "super().get_parameter_optimizer_dict.append", "super().get_parameter_optimizer_dict.append", "super().get_parameter_optimizer_dict.append", "super().get_parameter_optimizer_dict.append", "super().get_parameter_optimizer_dict.append", "super().get_parameter_optimizer_dict.append", "super().get_parameter_optimizer_dict.append", "super().get_parameter_optimizer_dict.append", "super().get_parameter_optimizer_dict.append", "super().get_parameter_optimizer_dict.append", "attentive_convolution.AttentiveConvNet.x_conv.parameters", "attentive_convolution.AttentiveConvNet.linear.parameters", "attentive_convolution.AttentiveConvNet.x_context_highway.parameters", "attentive_convolution.AttentiveConvNet.x_self_highway.parameters", "attentive_convolution.AttentiveConvNet.a_context_highway.parameters", "attentive_convolution.AttentiveConvNet.a_self_highway.parameters", "attentive_convolution.AttentiveConvNet.beneficiary_highway.parameters", "attentive_convolution.AttentiveConvNet.dot_product_attention.parameters", "super().get_parameter_optimizer_dict.append", "attentive_convolution.AttentiveConvNet.dot_product_attention.parameters", "attentive_convolution.AttentiveConvNet.additive_projection.parameters"], "methods", ["home.repos.pwc.inspect_result.MemoriesJ_KAMG.classification.classifier.Classifier.get_parameter_optimizer_dict"], ["", "def", "get_parameter_optimizer_dict", "(", "self", ")", ":", "\n", "        ", "params", "=", "super", "(", "AttentiveConvNet", ",", "\n", "self", ")", ".", "get_parameter_optimizer_dict", "(", ")", "\n", "if", "self", ".", "attentive_conv_net_type", "==", "AttentiveConvNetType", ".", "ADVANCED", ":", "\n", "            ", "params", ".", "append", "(", "{", "'params'", ":", "self", ".", "x_context_highway", ".", "parameters", "(", ")", "}", ")", "\n", "params", ".", "append", "(", "{", "'params'", ":", "self", ".", "x_self_highway", ".", "parameters", "(", ")", "}", ")", "\n", "params", ".", "append", "(", "{", "'params'", ":", "self", ".", "a_context_highway", ".", "parameters", "(", ")", "}", ")", "\n", "params", ".", "append", "(", "{", "'params'", ":", "self", ".", "a_self_highway", ".", "parameters", "(", ")", "}", ")", "\n", "params", ".", "append", "(", "{", "'params'", ":", "self", ".", "beneficiary_highway", ".", "parameters", "(", ")", "}", ")", "\n", "", "if", "self", ".", "attention_type", "==", "AttentionType", ".", "DOT", ":", "\n", "            ", "params", ".", "append", "(", "{", "'params'", ":", "self", ".", "dot_product_attention", ".", "parameters", "(", ")", "}", ")", "\n", "", "elif", "self", ".", "attention_type", "==", "AttentionType", ".", "BILINEAR", ":", "\n", "            ", "params", ".", "append", "(", "{", "'params'", ":", "self", ".", "bilinear_matrix", "}", ")", "\n", "params", ".", "append", "(", "{", "'params'", ":", "self", ".", "dot_product_attention", ".", "parameters", "(", ")", "}", ")", "\n", "", "elif", "self", ".", "attention_type", "==", "AttentionType", ".", "ADDITIVE_PROJECTION", ":", "\n", "            ", "params", ".", "append", "(", "{", "'params'", ":", "self", ".", "additive_projection", ".", "parameters", "(", ")", "}", ")", "\n", "\n", "", "params", ".", "append", "(", "{", "'params'", ":", "self", ".", "attentive_conv", "}", ")", "\n", "params", ".", "append", "(", "{", "'params'", ":", "self", ".", "x_conv", ".", "parameters", "(", ")", "}", ")", "\n", "params", ".", "append", "(", "{", "'params'", ":", "self", ".", "hidden1_matrix", "}", ")", "\n", "params", ".", "append", "(", "{", "'params'", ":", "self", ".", "hidden2_matrix", "}", ")", "\n", "params", ".", "append", "(", "{", "'params'", ":", "self", ".", "linear", ".", "parameters", "(", ")", "}", ")", "\n", "\n", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.classification.attentive_convolution.AttentiveConvNet.forward": [[136, 184], ["torch.tanh().permute.AttentiveConvNet.get_embedding", "torch.tanh().permute.AttentiveConvNet.matmul", "torch.tanh().permute.AttentiveConvNet.x_conv().permute", "torch.tanh().permute", "torch.nn.functional.max_pool1d().squeeze", "torch.nn.functional.max_pool1d().squeeze.matmul", "torch.nn.functional.max_pool1d().squeeze.matmul.matmul", "torch.cat", "torch.tanh().permute.AttentiveConvNet.dropout", "torch.tanh().permute.AttentiveConvNet.dot_product_attention", "torch.tanh().permute.AttentiveConvNet.linear", "embedding.permute.permute.permute", "torch.tanh().permute.AttentiveConvNet.x_context_highway", "torch.tanh().permute.AttentiveConvNet.x_self_highway", "torch.cat().permute", "torch.tanh().permute.AttentiveConvNet.a_context_highway", "torch.tanh().permute.AttentiveConvNet.a_self_highway", "torch.cat().permute", "torch.tanh().permute.AttentiveConvNet.beneficiary_highway().permute", "TypeError", "torch.cat().permute.matmul", "torch.tanh().permute.AttentiveConvNet.dot_product_attention", "torch.tanh().permute.AttentiveConvNet.x_conv", "torch.tanh", "torch.nn.functional.max_pool1d", "torch.tanh().permute.AttentiveConvNet.additive_projection", "torch.tanh().permute.AttentiveConvNet.permute", "torch.cat", "torch.cat", "torch.tanh().permute.AttentiveConvNet.beneficiary_highway", "torch.tanh().permute.size"], "methods", ["home.repos.pwc.inspect_result.MemoriesJ_KAMG.classification.classifier.Classifier.get_embedding"], ["", "def", "forward", "(", "self", ",", "batch", ")", ":", "\n", "\n", "        ", "embedding", ",", "_", ",", "_", "=", "self", ".", "get_embedding", "(", "batch", ")", "\n", "if", "self", ".", "attentive_conv_net_type", "==", "AttentiveConvNetType", ".", "LIGHT", ":", "\n", "            ", "x_multi_granularity", ",", "a_multi_granularity", ",", "x_beneficiary", "=", "embedding", ",", "embedding", ",", "embedding", "\n", "", "elif", "self", ".", "attentive_conv_net_type", "==", "AttentiveConvNetType", ".", "ADVANCED", ":", "\n", "            ", "embedding", "=", "embedding", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "source_context", "=", "self", ".", "x_context_highway", "(", "embedding", ")", "\n", "source_self", "=", "self", ".", "x_self_highway", "(", "embedding", ")", "\n", "x_multi_granularity", "=", "torch", ".", "cat", "(", "[", "source_context", ",", "source_self", "]", ",", "1", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "\n", "focus_context", "=", "self", ".", "a_context_highway", "(", "embedding", ")", "\n", "focus_self", "=", "self", ".", "a_self_highway", "(", "embedding", ")", "\n", "a_multi_granularity", "=", "torch", ".", "cat", "(", "[", "focus_context", ",", "focus_self", "]", ",", "1", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "\n", "x_beneficiary", "=", "self", ".", "beneficiary_highway", "(", "\n", "embedding", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "\n", "\"Unsupported AttentiveConvNetType: %s.\"", "%", "\n", "self", ".", "attentive_conv_net_type", ")", "\n", "\n", "", "if", "self", ".", "attention_type", "==", "AttentionType", ".", "DOT", ":", "\n", "            ", "attentive_context", "=", "self", ".", "dot_product_attention", "(", "\n", "x_multi_granularity", ",", "a_multi_granularity", ",", "a_multi_granularity", ")", "\n", "", "elif", "self", ".", "attention_type", "==", "AttentionType", ".", "BILINEAR", ":", "\n", "            ", "x_trans", "=", "x_multi_granularity", ".", "matmul", "(", "self", ".", "bilinear_matrix", ")", "\n", "attentive_context", "=", "self", ".", "dot_product_attention", "(", "\n", "x_trans", ",", "a_multi_granularity", ",", "a_multi_granularity", ")", "\n", "", "elif", "self", ".", "attention_type", "==", "AttentionType", ".", "ADDITIVE_PROJECTION", ":", "\n", "            ", "attentive_context", "=", "self", ".", "additive_projection", "(", "\n", "a_multi_granularity", ",", "x_multi_granularity", ")", "\n", "\n", "", "attentive_conv", "=", "attentive_context", ".", "matmul", "(", "self", ".", "attentive_conv", ")", "\n", "x_conv", "=", "self", ".", "x_conv", "(", "x_beneficiary", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "attentive_convolution", "=", "torch", ".", "tanh", "(", "attentive_conv", "+", "x_conv", "+", "self", ".", "bias", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "hidden", "=", "torch", ".", "nn", ".", "functional", ".", "max_pool1d", "(", "\n", "attentive_convolution", ",", "\n", "kernel_size", "=", "attentive_convolution", ".", "size", "(", ")", "[", "-", "1", "]", ")", ".", "squeeze", "(", ")", "\n", "hidden1", "=", "hidden", ".", "matmul", "(", "self", ".", "hidden1_matrix", ")", "\n", "hidden2", "=", "hidden1", ".", "matmul", "(", "self", ".", "hidden2_matrix", ")", "\n", "hidden_layer", "=", "torch", ".", "cat", "(", "[", "hidden", ",", "hidden1", ",", "hidden2", "]", ",", "1", ")", "\n", "\n", "return", "self", ".", "dropout", "(", "self", ".", "linear", "(", "hidden_layer", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.classification.textrcnn.TextRCNN.__init__": [[26, 50], ["model.classification.classifier.Classifier.__init__", "model.rnn.RNN", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "textrcnn.TextRCNN.convs.append", "len", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "len"], "methods", ["home.repos.pwc.inspect_result.MemoriesJ_KAMG.evaluate.classification_evaluate.ClassificationEvaluator.__init__"], ["def", "__init__", "(", "self", ",", "dataset", ",", "config", ")", ":", "\n", "        ", "super", "(", "TextRCNN", ",", "self", ")", ".", "__init__", "(", "dataset", ",", "config", ")", "\n", "self", ".", "rnn", "=", "RNN", "(", "\n", "config", ".", "embedding", ".", "dimension", ",", "config", ".", "TextRCNN", ".", "hidden_dimension", ",", "\n", "num_layers", "=", "config", ".", "TextRCNN", ".", "num_layers", ",", "\n", "batch_first", "=", "True", ",", "bidirectional", "=", "config", ".", "TextRCNN", ".", "bidirectional", ",", "\n", "rnn_type", "=", "config", ".", "TextRCNN", ".", "rnn_type", ")", "\n", "\n", "hidden_dimension", "=", "config", ".", "TextRCNN", ".", "hidden_dimension", "\n", "if", "config", ".", "TextRCNN", ".", "bidirectional", ":", "\n", "            ", "hidden_dimension", "*=", "2", "\n", "", "self", ".", "kernel_sizes", "=", "config", ".", "TextRCNN", ".", "kernel_sizes", "\n", "self", ".", "convs", "=", "torch", ".", "nn", ".", "ModuleList", "(", ")", "\n", "for", "kernel_size", "in", "self", ".", "kernel_sizes", ":", "\n", "            ", "self", ".", "convs", ".", "append", "(", "torch", ".", "nn", ".", "Conv1d", "(", "\n", "hidden_dimension", ",", "config", ".", "TextRCNN", ".", "num_kernels", ",", "\n", "kernel_size", ",", "padding", "=", "kernel_size", "-", "1", ")", ")", "\n", "\n", "", "self", ".", "top_k", "=", "self", ".", "config", ".", "TextRCNN", ".", "top_k_max_pooling", "\n", "hidden_size", "=", "len", "(", "config", ".", "TextRCNN", ".", "kernel_sizes", ")", "*", "config", ".", "TextRCNN", ".", "num_kernels", "*", "self", ".", "top_k", "\n", "\n", "self", ".", "linear", "=", "torch", ".", "nn", ".", "Linear", "(", "hidden_size", ",", "len", "(", "dataset", ".", "label_map", ")", ")", "\n", "self", ".", "dropout", "=", "torch", ".", "nn", ".", "Dropout", "(", "p", "=", "config", ".", "train", ".", "hidden_layer_dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.classification.textrcnn.TextRCNN.get_parameter_optimizer_dict": [[51, 59], ["list", "list.append", "list.append", "list.append", "list.append", "list.append", "textrcnn.TextRCNN.token_embedding.parameters", "textrcnn.TextRCNN.char_embedding.parameters", "textrcnn.TextRCNN.rnn.parameters", "textrcnn.TextRCNN.convs.parameters", "textrcnn.TextRCNN.linear.parameters"], "methods", ["None"], ["", "def", "get_parameter_optimizer_dict", "(", "self", ")", ":", "\n", "        ", "params", "=", "list", "(", ")", "\n", "params", ".", "append", "(", "{", "'params'", ":", "self", ".", "token_embedding", ".", "parameters", "(", ")", "}", ")", "\n", "params", ".", "append", "(", "{", "'params'", ":", "self", ".", "char_embedding", ".", "parameters", "(", ")", "}", ")", "\n", "params", ".", "append", "(", "{", "'params'", ":", "self", ".", "rnn", ".", "parameters", "(", ")", "}", ")", "\n", "params", ".", "append", "(", "{", "'params'", ":", "self", ".", "convs", ".", "parameters", "(", ")", "}", ")", "\n", "params", ".", "append", "(", "{", "'params'", ":", "self", ".", "linear", ".", "parameters", "(", ")", "}", ")", "\n", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.classification.textrcnn.TextRCNN.update_lr": [[60, 69], ["None"], "methods", ["None"], ["", "def", "update_lr", "(", "self", ",", "optimizer", ",", "epoch", ")", ":", "\n", "        ", "\"\"\"\n        \"\"\"", "\n", "if", "epoch", ">", "self", ".", "config", ".", "train", ".", "num_epochs_static_embedding", ":", "\n", "            ", "for", "param_group", "in", "optimizer", ".", "param_groups", "[", ":", "2", "]", ":", "\n", "                ", "param_group", "[", "\"lr\"", "]", "=", "self", ".", "config", ".", "optimizer", ".", "learning_rate", "\n", "", "", "else", ":", "\n", "            ", "for", "param_group", "in", "optimizer", ".", "param_groups", "[", ":", "2", "]", ":", "\n", "                ", "param_group", "[", "\"lr\"", "]", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.classification.textrcnn.TextRCNN.forward": [[70, 92], ["textrcnn.TextRCNN.rnn", "output.transpose", "enumerate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "textrcnn.TextRCNN.dropout", "textrcnn.TextRCNN.token_embedding", "batch[].to", "textrcnn.TextRCNN.char_embedding", "batch[].to", "torch.relu", "torch.relu", "[].view", "pooled_outputs.append", "textrcnn.TextRCNN.linear", "batch[].to", "batch[].to", "conv", "torch.relu.size", "torch.topk", "torch.topk", "torch.topk", "torch.topk"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "batch", ")", ":", "\n", "        ", "if", "self", ".", "config", ".", "feature", ".", "feature_names", "[", "0", "]", "==", "\"token\"", ":", "\n", "            ", "embedding", "=", "self", ".", "token_embedding", "(", "\n", "batch", "[", "cDataset", ".", "DOC_TOKEN", "]", ".", "to", "(", "self", ".", "config", ".", "device", ")", ")", "\n", "seq_length", "=", "batch", "[", "cDataset", ".", "DOC_TOKEN_LEN", "]", ".", "to", "(", "self", ".", "config", ".", "device", ")", "\n", "", "else", ":", "\n", "            ", "embedding", "=", "self", ".", "char_embedding", "(", "\n", "batch", "[", "cDataset", ".", "DOC_CHAR", "]", ".", "to", "(", "self", ".", "config", ".", "device", ")", ")", "\n", "seq_length", "=", "batch", "[", "cDataset", ".", "DOC_CHAR_LEN", "]", ".", "to", "(", "self", ".", "config", ".", "device", ")", "\n", "", "output", ",", "_", "=", "self", ".", "rnn", "(", "embedding", ",", "seq_length", ")", "\n", "\n", "doc_embedding", "=", "output", ".", "transpose", "(", "1", ",", "2", ")", "\n", "pooled_outputs", "=", "[", "]", "\n", "for", "_", ",", "conv", "in", "enumerate", "(", "self", ".", "convs", ")", ":", "\n", "            ", "convolution", "=", "F", ".", "relu", "(", "conv", "(", "doc_embedding", ")", ")", "\n", "pooled", "=", "torch", ".", "topk", "(", "convolution", ",", "self", ".", "top_k", ")", "[", "0", "]", ".", "view", "(", "\n", "convolution", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "pooled_outputs", ".", "append", "(", "pooled", ")", "\n", "\n", "", "doc_embedding", "=", "torch", ".", "cat", "(", "pooled_outputs", ",", "1", ")", "\n", "\n", "return", "self", ".", "dropout", "(", "self", ".", "linear", "(", "doc_embedding", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.classification.fasttext.FastText.__init__": [[28, 86], ["super().__init__", "model.embedding.Embedding", "torch.nn.Linear", "torch.nn.Dropout", "model.embedding.Embedding", "model.embedding.Embedding", "model.embedding.Embedding", "len"], "methods", ["home.repos.pwc.inspect_result.MemoriesJ_KAMG.evaluate.classification_evaluate.ClassificationEvaluator.__init__"], ["def", "__init__", "(", "self", ",", "dataset", ",", "config", ")", ":", "\n", "        ", "super", "(", "FastText", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "config", "=", "config", "\n", "assert", "\"token\"", "in", "self", ".", "config", ".", "feature", ".", "feature_names", "\n", "self", ".", "token_embedding", "=", "Embedding", "(", "dataset", ".", "token_map", ",", "\n", "config", ".", "embedding", ".", "dimension", ",", "\n", "cDataset", ".", "DOC_TOKEN", ",", "config", ",", "\n", "padding_idx", "=", "dataset", ".", "VOCAB_PADDING", ",", "\n", "pretrained_embedding_file", "=", "\n", "config", ".", "feature", ".", "token_pretrained_file", ",", "\n", "mode", "=", "EmbeddingProcessType", ".", "SUM", ",", "dropout", "=", "0", ",", "\n", "init_type", "=", "config", ".", "embedding", ".", "initializer", ",", "\n", "low", "=", "-", "config", ".", "embedding", ".", "uniform_bound", ",", "\n", "high", "=", "config", ".", "embedding", ".", "uniform_bound", ",", "\n", "std", "=", "config", ".", "embedding", ".", "random_stddev", ",", "\n", "activation_type", "=", "ActivationType", ".", "NONE", ")", "\n", "if", "self", ".", "config", ".", "feature", ".", "token_ngram", ">", "1", ":", "\n", "            ", "self", ".", "token_ngram_embedding", "=", "Embedding", "(", "dataset", ".", "token_ngram_map", ",", "\n", "config", ".", "embedding", ".", "dimension", ",", "\n", "cDataset", ".", "DOC_TOKEN_NGRAM", ",", "config", ",", "\n", "padding_idx", "=", "dataset", ".", "VOCAB_PADDING", ",", "\n", "mode", "=", "EmbeddingProcessType", ".", "SUM", ",", "dropout", "=", "0", ",", "\n", "init_type", "=", "config", ".", "embedding", ".", "initializer", ",", "\n", "low", "=", "-", "config", ".", "embedding", ".", "uniform_bound", ",", "\n", "high", "=", "config", ".", "embedding", ".", "uniform_bound", ",", "\n", "std", "=", "config", ".", "embedding", ".", "random_stddev", ",", "\n", "activation_type", "=", "ActivationType", ".", "NONE", ")", "\n", "", "if", "\"keyword\"", "in", "self", ".", "config", ".", "feature", ".", "feature_names", ":", "\n", "            ", "self", ".", "keyword_embedding", "=", "Embedding", "(", "dataset", ".", "keyword_map", ",", "\n", "config", ".", "embedding", ".", "dimension", ",", "\n", "cDataset", ".", "DOC_KEYWORD", ",", "config", ",", "\n", "padding_idx", "=", "dataset", ".", "VOCAB_PADDING", ",", "\n", "pretrained_embedding_file", "=", "\n", "config", ".", "feature", ".", "keyword_pretrained_file", ",", "\n", "mode", "=", "EmbeddingProcessType", ".", "SUM", ",", "dropout", "=", "0", ",", "\n", "init_type", "=", "config", ".", "embedding", ".", "initializer", ",", "\n", "low", "=", "-", "config", ".", "embedding", ".", "uniform_bound", ",", "\n", "high", "=", "config", ".", "embedding", ".", "uniform_bound", ",", "\n", "std", "=", "config", ".", "embedding", ".", "random_stddev", ",", "\n", "activation_type", "=", "ActivationType", ".", "NONE", ")", "\n", "", "if", "\"topic\"", "in", "self", ".", "config", ".", "feature", ".", "feature_names", ":", "\n", "            ", "self", ".", "topic_embedding", "=", "Embedding", "(", "dataset", ".", "topic_map", ",", "\n", "config", ".", "embedding", ".", "dimension", ",", "\n", "cDataset", ".", "DOC_TOPIC", ",", "config", ",", "\n", "padding_idx", "=", "dataset", ".", "VOCAB_PADDING", ",", "\n", "mode", "=", "EmbeddingProcessType", ".", "SUM", ",", "dropout", "=", "0", ",", "\n", "init_type", "=", "config", ".", "embedding", ".", "initializer", ",", "\n", "low", "=", "-", "config", ".", "embedding", ".", "uniform_bound", ",", "\n", "high", "=", "config", ".", "embedding", ".", "uniform_bound", ",", "\n", "std", "=", "config", ".", "embedding", ".", "random_stddev", ",", "\n", "activation_type", "=", "ActivationType", ".", "NONE", ")", "\n", "", "self", ".", "linear", "=", "torch", ".", "nn", ".", "Linear", "(", "\n", "config", ".", "embedding", ".", "dimension", ",", "len", "(", "dataset", ".", "label_map", ")", ")", "\n", "self", ".", "dropout", "=", "torch", ".", "nn", ".", "Dropout", "(", "p", "=", "config", ".", "train", ".", "hidden_layer_dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.classification.fasttext.FastText.get_parameter_optimizer_dict": [[87, 98], ["list", "list.append", "list.append", "list.append", "list.append", "list.append", "fasttext.FastText.token_embedding.parameters", "fasttext.FastText.linear.parameters", "fasttext.FastText.token_ngram_embedding.parameters", "fasttext.FastText.keyword_embedding.parameters", "fasttext.FastText.topic_embedding.parameters"], "methods", ["None"], ["", "def", "get_parameter_optimizer_dict", "(", "self", ")", ":", "\n", "        ", "params", "=", "list", "(", ")", "\n", "params", ".", "append", "(", "{", "'params'", ":", "self", ".", "token_embedding", ".", "parameters", "(", ")", "}", ")", "\n", "if", "self", ".", "config", ".", "feature", ".", "token_ngram", ">", "1", ":", "\n", "            ", "params", ".", "append", "(", "{", "'params'", ":", "self", ".", "token_ngram_embedding", ".", "parameters", "(", ")", "}", ")", "\n", "", "if", "\"keyword\"", "in", "self", ".", "config", ".", "feature", ".", "feature_names", ":", "\n", "            ", "params", ".", "append", "(", "{", "'params'", ":", "self", ".", "keyword_embedding", ".", "parameters", "(", ")", "}", ")", "\n", "", "if", "\"topic\"", "in", "self", ".", "config", ".", "feature", ".", "feature_names", ":", "\n", "            ", "params", ".", "append", "(", "{", "'params'", ":", "self", ".", "topic_embedding", ".", "parameters", "(", ")", "}", ")", "\n", "", "params", ".", "append", "(", "{", "'params'", ":", "self", ".", "linear", ".", "parameters", "(", ")", "}", ")", "\n", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.classification.fasttext.FastText.update_lr": [[99, 108], ["None"], "methods", ["None"], ["", "def", "update_lr", "(", "self", ",", "optimizer", ",", "epoch", ")", ":", "\n", "        ", "\"\"\"Update lr\n        \"\"\"", "\n", "if", "epoch", ">", "self", ".", "config", ".", "train", ".", "num_epochs_static_embedding", ":", "\n", "            ", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "                ", "param_group", "[", "\"lr\"", "]", "=", "self", ".", "config", ".", "optimizer", ".", "learning_rate", "\n", "", "", "else", ":", "\n", "            ", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "                ", "param_group", "[", "\"lr\"", "]", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.classification.fasttext.FastText.forward": [[109, 133], ["fasttext.FastText.token_embedding", "batch[].to", "batch[].to.resize_", "fasttext.FastText.dropout", "fasttext.FastText.linear", "batch[].to", "batch[].to", "fasttext.FastText.token_ngram_embedding", "batch[].to", "fasttext.FastText.keyword_embedding", "batch[].to", "fasttext.FastText.topic_embedding", "batch[].to", "batch[].to", "batch[].to", "batch[].to", "batch[].to", "batch[].to", "batch[].to", "fasttext.FastText.size"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "batch", ")", ":", "\n", "        ", "doc_embedding", "=", "self", ".", "token_embedding", "(", "\n", "batch", "[", "cDataset", ".", "DOC_TOKEN", "]", ".", "to", "(", "self", ".", "config", ".", "device", ")", ",", "\n", "batch", "[", "cDataset", ".", "DOC_TOKEN_OFFSET", "]", ".", "to", "(", "self", ".", "config", ".", "device", ")", ")", "\n", "length", "=", "batch", "[", "cDataset", ".", "DOC_TOKEN_LEN", "]", ".", "to", "(", "self", ".", "config", ".", "device", ")", "\n", "if", "self", ".", "config", ".", "feature", ".", "token_ngram", ">", "1", ":", "\n", "            ", "doc_embedding", "+=", "self", ".", "token_ngram_embedding", "(", "\n", "batch", "[", "cDataset", ".", "DOC_TOKEN_NGRAM", "]", ".", "to", "(", "self", ".", "config", ".", "device", ")", ",", "\n", "batch", "[", "cDataset", ".", "DOC_TOKEN_NGRAM_OFFSET", "]", ".", "to", "(", "self", ".", "config", ".", "device", ")", ")", "\n", "length", "+=", "batch", "[", "cDataset", ".", "DOC_TOKEN_NGRAM_LEN", "]", ".", "to", "(", "self", ".", "config", ".", "device", ")", "\n", "", "if", "\"keyword\"", "in", "self", ".", "config", ".", "feature", ".", "feature_names", ":", "\n", "            ", "doc_embedding", "+=", "self", ".", "keyword_embedding", "(", "\n", "batch", "[", "cDataset", ".", "DOC_KEYWORD", "]", ".", "to", "(", "self", ".", "config", ".", "device", ")", ",", "\n", "batch", "[", "cDataset", ".", "DOC_KEYWORD_OFFSET", "]", ".", "to", "(", "self", ".", "config", ".", "device", ")", ")", "\n", "length", "+=", "batch", "[", "cDataset", ".", "DOC_KEYWORD_LEN", "]", ".", "to", "(", "self", ".", "config", ".", "device", ")", "\n", "", "if", "\"topic\"", "in", "self", ".", "config", ".", "feature", ".", "feature_names", ":", "\n", "            ", "doc_embedding", "+=", "self", ".", "topic_embedding", "(", "\n", "batch", "[", "cDataset", ".", "DOC_TOPIC", "]", ".", "to", "(", "self", ".", "config", ".", "device", ")", ",", "\n", "batch", "[", "cDataset", ".", "DOC_TOPIC_OFFSET", "]", ".", "to", "(", "self", ".", "config", ".", "device", ")", ")", "\n", "length", "+=", "batch", "[", "cDataset", ".", "DOC_TOPIC_LEN", "]", ".", "to", "(", "self", ".", "config", ".", "device", ")", "\n", "\n", "", "doc_embedding", "/=", "length", ".", "resize_", "(", "doc_embedding", ".", "size", "(", ")", "[", "0", "]", ",", "1", ")", "\n", "doc_embedding", "=", "self", ".", "dropout", "(", "doc_embedding", ")", "\n", "return", "self", ".", "linear", "(", "doc_embedding", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.classification.textvdcnn.TextVDCNN.__init__": [[27, 70], ["model.classification.classifier.Classifier.__init__", "torch.nn.Conv1d", "torch.nn.ModuleList", "torch.nn.ModuleList", "enumerate", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Dropout", "torch.nn.ModuleList", "torch.nn.ModuleList", "range", "textvdcnn.TextVDCNN.convs.append", "textvdcnn.TextVDCNN.batch_norms.append", "len", "torch.nn.ModuleList.append", "torch.nn.ModuleList.append", "torch.nn.Conv1d", "torch.nn.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.MemoriesJ_KAMG.evaluate.classification_evaluate.ClassificationEvaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "config", ")", ":", "\n", "        ", "\"\"\"all convolutional blocks\n        4 kinds of conv blocks, which #feature_map are 64,128,256,512\n        Depth:             9  17 29 49\n        ------------------------------\n        conv block 512:    2  4  4  6\n        conv block 256:    2  4  4  10\n        conv block 128:    2  4  10 16\n        conv block 64:     2  4  10 16\n        First conv. layer: 1  1  1  1\n        \"\"\"", "\n", "super", "(", "TextVDCNN", ",", "self", ")", ".", "__init__", "(", "dataset", ",", "config", ")", "\n", "\n", "self", ".", "vdcnn_num_convs", "=", "{", "}", "\n", "self", ".", "vdcnn_num_convs", "[", "9", "]", "=", "[", "2", ",", "2", ",", "2", ",", "2", "]", "\n", "self", ".", "vdcnn_num_convs", "[", "17", "]", "=", "[", "4", ",", "4", ",", "4", ",", "4", "]", "\n", "self", ".", "vdcnn_num_convs", "[", "29", "]", "=", "[", "10", ",", "10", ",", "4", ",", "4", "]", "\n", "self", ".", "vdcnn_num_convs", "[", "49", "]", "=", "[", "16", ",", "16", ",", "10", ",", "6", "]", "\n", "self", ".", "num_kernels", "=", "[", "64", ",", "128", ",", "256", ",", "512", "]", "\n", "\n", "self", ".", "vdcnn_depth", "=", "config", ".", "TextVDCNN", ".", "vdcnn_depth", "\n", "self", ".", "first_conv", "=", "torch", ".", "nn", ".", "Conv1d", "(", "config", ".", "embedding", ".", "dimension", ",", "64", ",", "3", ",", "\n", "padding", "=", "2", ")", "\n", "last_num_kernel", "=", "64", "\n", "self", ".", "convs", "=", "torch", ".", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "batch_norms", "=", "torch", ".", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", ",", "num_kernel", "in", "enumerate", "(", "self", ".", "num_kernels", ")", ":", "\n", "            ", "tmp_convs", "=", "torch", ".", "nn", ".", "ModuleList", "(", ")", "\n", "tmp_batch_norms", "=", "torch", ".", "nn", ".", "ModuleList", "(", ")", "\n", "for", "_", "in", "range", "(", "0", ",", "self", ".", "vdcnn_num_convs", "[", "self", ".", "vdcnn_depth", "]", "[", "i", "]", ")", ":", "\n", "                ", "tmp_convs", ".", "append", "(", "\n", "torch", ".", "nn", ".", "Conv1d", "(", "last_num_kernel", ",", "num_kernel", ",", "3", ",", "padding", "=", "2", ")", ")", "\n", "tmp_batch_norms", ".", "append", "(", "torch", ".", "nn", ".", "BatchNorm1d", "(", "num_kernel", ")", ")", "\n", "", "last_num_kernel", "=", "num_kernel", "\n", "self", ".", "convs", ".", "append", "(", "tmp_convs", ")", "\n", "self", ".", "batch_norms", ".", "append", "(", "tmp_batch_norms", ")", "\n", "\n", "", "self", ".", "top_k", "=", "self", ".", "config", ".", "TextVDCNN", ".", "top_k_max_pooling", "\n", "hidden_size", "=", "self", ".", "num_kernels", "[", "-", "1", "]", "*", "self", ".", "top_k", "\n", "self", ".", "linear1", "=", "torch", ".", "nn", ".", "Linear", "(", "hidden_size", ",", "2048", ")", "\n", "self", ".", "linear2", "=", "torch", ".", "nn", ".", "Linear", "(", "2048", ",", "2048", ")", "\n", "self", ".", "linear", "=", "torch", ".", "nn", ".", "Linear", "(", "2048", ",", "len", "(", "dataset", ".", "label_map", ")", ")", "\n", "self", ".", "dropout", "=", "torch", ".", "nn", ".", "Dropout", "(", "p", "=", "config", ".", "train", ".", "hidden_layer_dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.classification.textvdcnn.TextVDCNN.get_parameter_optimizer_dict": [[71, 83], ["list", "list.append", "list.append", "list.append", "range", "list.append", "list.append", "list.append", "len", "list.append", "list.append", "textvdcnn.TextVDCNN.token_embedding.parameters", "textvdcnn.TextVDCNN.char_embedding.parameters", "textvdcnn.TextVDCNN.first_conv.parameters", "textvdcnn.TextVDCNN.linear1.parameters", "textvdcnn.TextVDCNN.linear2.parameters", "textvdcnn.TextVDCNN.linear.parameters", "textvdcnn.TextVDCNN.convs[].parameters", "textvdcnn.TextVDCNN.batch_norms[].parameters"], "methods", ["None"], ["", "def", "get_parameter_optimizer_dict", "(", "self", ")", ":", "\n", "        ", "params", "=", "list", "(", ")", "\n", "params", ".", "append", "(", "{", "'params'", ":", "self", ".", "token_embedding", ".", "parameters", "(", ")", "}", ")", "\n", "params", ".", "append", "(", "{", "'params'", ":", "self", ".", "char_embedding", ".", "parameters", "(", ")", "}", ")", "\n", "params", ".", "append", "(", "{", "'params'", ":", "self", ".", "first_conv", ".", "parameters", "(", ")", "}", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "self", ".", "num_kernels", ")", ")", ":", "\n", "            ", "params", ".", "append", "(", "{", "'params'", ":", "self", ".", "convs", "[", "i", "]", ".", "parameters", "(", ")", "}", ")", "\n", "params", ".", "append", "(", "{", "'params'", ":", "self", ".", "batch_norms", "[", "i", "]", ".", "parameters", "(", ")", "}", ")", "\n", "", "params", ".", "append", "(", "{", "'params'", ":", "self", ".", "linear1", ".", "parameters", "(", ")", "}", ")", "\n", "params", ".", "append", "(", "{", "'params'", ":", "self", ".", "linear2", ".", "parameters", "(", ")", "}", ")", "\n", "params", ".", "append", "(", "{", "'params'", ":", "self", ".", "linear", ".", "parameters", "(", ")", "}", ")", "\n", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.classification.textvdcnn.TextVDCNN.update_lr": [[84, 93], ["None"], "methods", ["None"], ["", "def", "update_lr", "(", "self", ",", "optimizer", ",", "epoch", ")", ":", "\n", "        ", "\"\"\"Update lr\n        \"\"\"", "\n", "if", "epoch", ">", "self", ".", "config", ".", "train", ".", "num_epochs_static_embedding", ":", "\n", "            ", "for", "param_group", "in", "optimizer", ".", "param_groups", "[", ":", "2", "]", ":", "\n", "                ", "param_group", "[", "\"lr\"", "]", "=", "self", ".", "config", ".", "optimizer", ".", "learning_rate", "\n", "", "", "else", ":", "\n", "            ", "for", "param_group", "in", "optimizer", ".", "param_groups", "[", ":", "2", "]", ":", "\n", "                ", "param_group", "[", "\"lr\"", "]", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.classification.textvdcnn.TextVDCNN.forward": [[94, 140], ["textvdcnn.TextVDCNN.transpose", "textvdcnn.TextVDCNN.first_conv", "torch.nn.functional.relu", "range", "int", "torch.reshape", "textvdcnn.TextVDCNN.linear1", "textvdcnn.TextVDCNN.linear2", "textvdcnn.TextVDCNN.dropout", "range", "textvdcnn.TextVDCNN.token_embedding", "textvdcnn.TextVDCNN.char_embedding", "len", "textvdcnn.TextVDCNN.forward.convolutional_block"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "batch", ")", ":", "\n", "        ", "def", "convolutional_block", "(", "inputs", ",", "num_layers", ",", "convs", ",", "batch_norms", ")", ":", "\n", "            ", "\"\"\"Convolutional Block of VDCNN\n            Convolutional block contains 2 conv layers, and can be repeated\n            Temp Conv-->Batch Norm-->ReLU-->Temp Conv-->Batch Norm-->ReLU\n            \"\"\"", "\n", "hidden_layer", "=", "inputs", "\n", "for", "i", "in", "range", "(", "0", ",", "num_layers", ")", ":", "\n", "                ", "batch_norm", "=", "batch_norms", "[", "i", "]", "(", "convs", "[", "i", "]", "(", "inputs", ")", ")", "\n", "hidden_layer", "=", "torch", ".", "nn", ".", "functional", ".", "relu", "(", "batch_norm", ")", "\n", "", "return", "hidden_layer", "\n", "\n", "", "if", "self", ".", "config", ".", "feature", ".", "feature_names", "[", "0", "]", "==", "\"token\"", ":", "\n", "            ", "embedding", "=", "self", ".", "token_embedding", "(", "\n", "batch", "[", "cDataset", ".", "DOC_TOKEN", "]", ".", "to", "(", "self", ".", "config", ".", "device", ")", ")", "\n", "", "else", ":", "\n", "            ", "embedding", "=", "self", ".", "char_embedding", "(", "\n", "batch", "[", "cDataset", ".", "DOC_CHAR", "]", ".", "to", "(", "self", ".", "config", ".", "device", ")", ")", "\n", "", "embedding", "=", "embedding", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n", "# first conv layer (kernel_size=3, #feature_map=64)", "\n", "first_conv", "=", "self", ".", "first_conv", "(", "embedding", ")", "\n", "first_conv", "=", "torch", ".", "nn", ".", "functional", ".", "relu", "(", "first_conv", ")", "\n", "\n", "# all convolutional blocks", "\n", "conv_block", "=", "first_conv", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "self", ".", "num_kernels", ")", ")", ":", "\n", "            ", "conv_block", "=", "convolutional_block", "(", "\n", "conv_block", ",", "\n", "num_layers", "=", "self", ".", "vdcnn_num_convs", "[", "self", ".", "vdcnn_depth", "]", "[", "i", "]", ",", "\n", "convs", "=", "self", ".", "convs", "[", "i", "]", ",", "\n", "batch_norms", "=", "self", ".", "batch_norms", "[", "i", "]", ")", "\n", "if", "i", "<", "len", "(", "self", ".", "num_kernels", ")", "-", "1", ":", "\n", "# max-pooling with stride=2", "\n", "                ", "pool", "=", "torch", ".", "nn", ".", "functional", ".", "max_pool1d", "(", "conv_block", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", "\n", "", "else", ":", "\n", "# k-max-pooling", "\n", "                ", "pool", "=", "torch", ".", "topk", "(", "conv_block", ",", "self", ".", "top_k", ")", "[", "0", "]", ".", "view", "(", "\n", "conv_block", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "", "", "pool_shape", "=", "int", "(", "np", ".", "prod", "(", "pool", ".", "size", "(", ")", "[", "1", ":", "]", ")", ")", "\n", "doc_embedding", "=", "torch", ".", "reshape", "(", "pool", ",", "(", "-", "1", ",", "pool_shape", ")", ")", "\n", "fc1", "=", "self", ".", "linear1", "(", "doc_embedding", ")", "\n", "fc2", "=", "self", ".", "linear2", "(", "fc1", ")", "\n", "return", "self", ".", "dropout", "(", "self", ".", "linear", "(", "fc2", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.classification.zsjlrnn.ZSJLRNN.__init__": [[16, 70], ["model.classification.classifier.Classifier.__init__", "model.rnn.RNN", "model.attention.LabelWiseAttention", "torch.nn.ModuleList", "model.fusion.Fusion", "torch.nn.Sequential", "len", "torch.nn.Linear", "torch.nn.ReLU", "model.graph_convolution.MultiGraphConvolution", "model.graph_convolution.MultiGraphConvolution", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.MemoriesJ_KAMG.evaluate.classification_evaluate.ClassificationEvaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "config", ")", ":", "\n", "\n", "        ", "assert", "config", ".", "label_embedding", ".", "dimension", "==", "config", ".", "ZSJLRNN", ".", "gcn_in_features", ",", "\"label embedding dimension should be same as gcn input feature dimension\"", "\n", "assert", "len", "(", "config", ".", "data", ".", "label_relation_files", ")", ">=", "2", ",", "\"this model should utilize at least 2 different graphs' adjacency\"", "\n", "\n", "super", "(", "ZSJLRNN", ",", "self", ")", ".", "__init__", "(", "dataset", ",", "config", ")", "\n", "\n", "self", ".", "rnn", "=", "RNN", "(", "\n", "config", ".", "embedding", ".", "dimension", ",", "config", ".", "ZSJLRNN", ".", "hidden_dimension", ",", "\n", "num_layers", "=", "config", ".", "ZSJLRNN", ".", "num_layers", ",", "batch_first", "=", "True", ",", "\n", "bidirectional", "=", "config", ".", "ZSJLRNN", ".", "bidirectional", ",", "\n", "rnn_type", "=", "config", ".", "ZSJLRNN", ".", "rnn_type", ")", "\n", "\n", "self", ".", "label_wise_attention", "=", "LabelWiseAttention", "(", "\n", "feat_dim", "=", "config", ".", "ZSJLRNN", ".", "hidden_dimension", "*", "2", "if", "config", ".", "ZSJLRNN", ".", "bidirectional", "else", "config", ".", "ZSJLRNN", ".", "hidden_dimension", ",", "\n", "label_emb_dim", "=", "config", ".", "label_embedding", ".", "dimension", ",", "\n", "store_attention_score", "=", "config", ".", "ZSJLRNN", ".", "store_attention_score", ")", "\n", "\n", "self", ".", "multi_gcn", "=", "torch", ".", "nn", ".", "ModuleList", "(", "[", "\n", "MultiGraphConvolution", "(", "\n", "n_adj", "=", "len", "(", "config", ".", "data", ".", "label_relation_files", ")", ",", "\n", "in_features", "=", "config", ".", "ZSJLRNN", ".", "gcn_in_features", ",", "\n", "out_features", "=", "config", ".", "ZSJLRNN", ".", "gcn_hidden_features", ",", "\n", "bias", "=", "True", ",", "\n", "act", "=", "torch", ".", "relu_", ",", "\n", "featureless", "=", "False", ",", "\n", "dropout", "=", "config", ".", "ZSJLRNN", ".", "gcn_dropout", ")", ",", "\n", "MultiGraphConvolution", "(", "\n", "n_adj", "=", "len", "(", "config", ".", "data", ".", "label_relation_files", ")", ",", "\n", "in_features", "=", "config", ".", "ZSJLRNN", ".", "gcn_hidden_features", ",", "\n", "out_features", "=", "config", ".", "ZSJLRNN", ".", "gcn_out_features", ",", "\n", "bias", "=", "True", ",", "\n", "act", "=", "torch", ".", "relu_", ",", "\n", "featureless", "=", "False", ",", "\n", "dropout", "=", "config", ".", "ZSJLRNN", ".", "gcn_dropout", ")", "\n", "]", ")", "\n", "\n", "self", ".", "multi_gcn_fuse", "=", "Fusion", "(", "config", ")", "\n", "\n", "if", "config", ".", "fusion", ".", "fusion_type", "==", "FusionType", ".", "CONCATENATION", ":", "\n", "            ", "out_tmp", "=", "config", ".", "ZSJLRNN", ".", "gcn_in_features", "+", "config", ".", "fusion", ".", "out_features", "\n", "", "elif", "config", ".", "fusion", ".", "fusion_type", "==", "FusionType", ".", "ATTACH", ":", "\n", "            ", "out_tmp", "=", "config", ".", "ZSJLRNN", ".", "gcn_in_features", "+", "config", ".", "ZSJLRNN", ".", "gcn_out_features", "*", "len", "(", "config", ".", "data", ".", "label_relation_files", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "self", ".", "doc_out_transform", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "torch", ".", "nn", ".", "Linear", "(", "\n", "in_features", "=", "config", ".", "ZSJLRNN", ".", "hidden_dimension", "*", "2", "if", "config", ".", "ZSJLRNN", ".", "bidirectional", "else", "config", ".", "ZSJLRNN", ".", "hidden_dimension", ",", "\n", "out_features", "=", "out_tmp", "\n", ")", ",", "\n", "torch", ".", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.classification.zsjlrnn.ZSJLRNN.get_parameter_optimizer_dict": [[72, 81], ["list", "list.append", "list.append", "list.append", "list.append", "list.append", "list.append", "zsjlrnn.ZSJLRNN.token_embedding.parameters", "zsjlrnn.ZSJLRNN.rnn.parameters", "zsjlrnn.ZSJLRNN.label_wise_attention.parameters", "zsjlrnn.ZSJLRNN.multi_gcn.parameters", "zsjlrnn.ZSJLRNN.multi_gcn_fuse.parameters", "zsjlrnn.ZSJLRNN.doc_out_transform.parameters"], "methods", ["None"], ["", "def", "get_parameter_optimizer_dict", "(", "self", ")", ":", "\n", "        ", "params", "=", "list", "(", ")", "\n", "params", ".", "append", "(", "{", "'params'", ":", "self", ".", "token_embedding", ".", "parameters", "(", ")", "}", ")", "\n", "params", ".", "append", "(", "{", "'params'", ":", "self", ".", "rnn", ".", "parameters", "(", ")", "}", ")", "\n", "params", ".", "append", "(", "{", "'params'", ":", "self", ".", "label_wise_attention", ".", "parameters", "(", ")", "}", ")", "\n", "params", ".", "append", "(", "{", "'params'", ":", "self", ".", "multi_gcn", ".", "parameters", "(", ")", "}", ")", "\n", "params", ".", "append", "(", "{", "'params'", ":", "self", ".", "multi_gcn_fuse", ".", "parameters", "(", ")", "}", ")", "\n", "params", ".", "append", "(", "{", "'params'", ":", "self", ".", "doc_out_transform", ".", "parameters", "(", ")", "}", ")", "\n", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.classification.zsjlrnn.ZSJLRNN.update_lr": [[82, 89], ["None"], "methods", ["None"], ["", "def", "update_lr", "(", "self", ",", "optimizer", ",", "epoch", ")", ":", "\n", "        ", "if", "epoch", ">", "self", ".", "config", ".", "train", ".", "num_epochs_static_embedding", ":", "\n", "            ", "for", "param_group", "in", "optimizer", ".", "param_groups", "[", ":", "2", "]", ":", "\n", "                ", "param_group", "[", "\"lr\"", "]", "=", "self", ".", "config", ".", "optimizer", ".", "learning_rate", "\n", "", "", "else", ":", "\n", "            ", "for", "param_group", "in", "optimizer", ".", "param_groups", "[", ":", "2", "]", ":", "\n", "                ", "param_group", "[", "\"lr\"", "]", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.classification.zsjlrnn.ZSJLRNN.forward": [[90, 111], ["zsjlrnn.ZSJLRNN.rnn", "zsjlrnn.ZSJLRNN.label_embedding", "zsjlrnn.ZSJLRNN.label_wise_attention", "torch.unsqueeze().repeat", "zsjlrnn.ZSJLRNN.multi_gcn_fuse", "torch.cat", "torch.sum", "zsjlrnn.ZSJLRNN.token_embedding", "batch[].to", "batch[].to", "len", "gcn_layer", "torch.unbind", "batch[].to", "torch.unsqueeze", "batch[].to", "zsjlrnn.ZSJLRNN.doc_out_transform"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "batch", ")", ":", "\n", "        ", "if", "self", ".", "config", ".", "feature", ".", "feature_names", "[", "0", "]", "==", "\"token\"", ":", "\n", "            ", "embedding", "=", "self", ".", "token_embedding", "(", "\n", "batch", "[", "cDataset", ".", "DOC_TOKEN", "]", ".", "to", "(", "self", ".", "config", ".", "device", ")", ")", "\n", "length", "=", "batch", "[", "cDataset", ".", "DOC_TOKEN_LEN", "]", ".", "to", "(", "self", ".", "config", ".", "device", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "doc_embedding", ",", "_", "=", "self", ".", "rnn", "(", "embedding", ",", "length", ")", "\n", "\n", "label_repr", "=", "self", ".", "label_embedding", "(", "\n", "batch", "[", "cDataset", ".", "DOC_LABEL_ID", "]", ".", "to", "(", "self", ".", "config", ".", "device", ")", ")", "\n", "attentive_doc_embedding", "=", "self", ".", "label_wise_attention", "(", "doc_embedding", ",", "label_repr", ")", "\n", "\n", "label_repr_gcn", "=", "torch", ".", "unsqueeze", "(", "label_repr", ",", "dim", "=", "0", ")", ".", "repeat", "(", "len", "(", "self", ".", "config", ".", "data", ".", "label_relation_files", ")", ",", "1", ",", "1", ")", "\n", "for", "gcn_layer", "in", "self", ".", "multi_gcn", ":", "\n", "            ", "label_repr_gcn", "=", "gcn_layer", "(", "label_repr_gcn", ",", "batch", "[", "cDataset", ".", "DOC_LABEL_RELATION", "]", ".", "to", "(", "self", ".", "config", ".", "device", ")", ")", "\n", "# do some other fusion operations", "\n", "", "label_repr_gcn", "=", "self", ".", "multi_gcn_fuse", "(", "torch", ".", "unbind", "(", "label_repr_gcn", ",", "dim", "=", "0", ")", ")", "\n", "label_repr", "=", "torch", ".", "cat", "(", "(", "label_repr", ",", "label_repr_gcn", ")", ",", "dim", "=", "1", ")", "\n", "\n", "return", "torch", ".", "sum", "(", "self", ".", "doc_out_transform", "(", "attentive_doc_embedding", ")", "*", "label_repr", ",", "dim", "=", "-", "1", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.classification.textcnn.TextCNN.__init__": [[22, 37], ["model.classification.classifier.Classifier.__init__", "torch.nn.ModuleList", "torch.nn.Linear", "torch.nn.Dropout", "textcnn.TextCNN.convs.append", "len", "torch.nn.Conv1d", "len"], "methods", ["home.repos.pwc.inspect_result.MemoriesJ_KAMG.evaluate.classification_evaluate.ClassificationEvaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "config", ")", ":", "\n", "        ", "super", "(", "TextCNN", ",", "self", ")", ".", "__init__", "(", "dataset", ",", "config", ")", "\n", "\n", "self", ".", "kernel_sizes", "=", "config", ".", "TextCNN", ".", "kernel_sizes", "\n", "self", ".", "convs", "=", "torch", ".", "nn", ".", "ModuleList", "(", ")", "\n", "for", "kernel_size", "in", "self", ".", "kernel_sizes", ":", "\n", "            ", "self", ".", "convs", ".", "append", "(", "torch", ".", "nn", ".", "Conv1d", "(", "\n", "config", ".", "embedding", ".", "dimension", ",", "config", ".", "TextCNN", ".", "num_kernels", ",", "\n", "kernel_size", ",", "padding", "=", "kernel_size", "-", "1", ")", ")", "\n", "\n", "", "self", ".", "top_k", "=", "self", ".", "config", ".", "TextCNN", ".", "top_k_max_pooling", "\n", "hidden_size", "=", "len", "(", "config", ".", "TextCNN", ".", "kernel_sizes", ")", "*", "config", ".", "TextCNN", ".", "num_kernels", "*", "self", ".", "top_k", "\n", "self", ".", "linear", "=", "torch", ".", "nn", ".", "Linear", "(", "hidden_size", ",", "len", "(", "dataset", ".", "label_map", ")", ")", "\n", "self", ".", "dropout", "=", "torch", ".", "nn", ".", "Dropout", "(", "p", "=", "config", ".", "train", ".", "hidden_layer_dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.classification.textcnn.TextCNN.get_parameter_optimizer_dict": [[38, 45], ["list", "list.append", "list.append", "list.append", "list.append", "textcnn.TextCNN.token_embedding.parameters", "textcnn.TextCNN.char_embedding.parameters", "textcnn.TextCNN.convs.parameters", "textcnn.TextCNN.linear.parameters"], "methods", ["None"], ["", "def", "get_parameter_optimizer_dict", "(", "self", ")", ":", "\n", "        ", "params", "=", "list", "(", ")", "\n", "params", ".", "append", "(", "{", "'params'", ":", "self", ".", "token_embedding", ".", "parameters", "(", ")", "}", ")", "\n", "params", ".", "append", "(", "{", "'params'", ":", "self", ".", "char_embedding", ".", "parameters", "(", ")", "}", ")", "\n", "params", ".", "append", "(", "{", "'params'", ":", "self", ".", "convs", ".", "parameters", "(", ")", "}", ")", "\n", "params", ".", "append", "(", "{", "'params'", ":", "self", ".", "linear", ".", "parameters", "(", ")", "}", ")", "\n", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.classification.textcnn.TextCNN.update_lr": [[46, 55], ["None"], "methods", ["None"], ["", "def", "update_lr", "(", "self", ",", "optimizer", ",", "epoch", ")", ":", "\n", "        ", "\"\"\"Update lr\n        \"\"\"", "\n", "if", "epoch", ">", "self", ".", "config", ".", "train", ".", "num_epochs_static_embedding", ":", "\n", "            ", "for", "param_group", "in", "optimizer", ".", "param_groups", "[", ":", "2", "]", ":", "\n", "                ", "param_group", "[", "\"lr\"", "]", "=", "self", ".", "config", ".", "optimizer", ".", "learning_rate", "\n", "", "", "else", ":", "\n", "            ", "for", "param_group", "in", "optimizer", ".", "param_groups", "[", ":", "2", "]", ":", "\n", "                ", "param_group", "[", "\"lr\"", "]", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.classification.textcnn.TextCNN.forward": [[56, 74], ["textcnn.TextCNN.transpose", "enumerate", "torch.cat", "textcnn.TextCNN.dropout", "textcnn.TextCNN.token_embedding", "textcnn.TextCNN.char_embedding", "torch.nn.functional.relu", "[].view", "pooled_outputs.append", "textcnn.TextCNN.linear", "batch[].to", "batch[].to", "conv", "torch.nn.functional.relu.size", "torch.topk"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "batch", ")", ":", "\n", "        ", "if", "self", ".", "config", ".", "feature", ".", "feature_names", "[", "0", "]", "==", "\"token\"", ":", "\n", "            ", "embedding", "=", "self", ".", "token_embedding", "(", "\n", "batch", "[", "cDataset", ".", "DOC_TOKEN", "]", ".", "to", "(", "self", ".", "config", ".", "device", ")", ")", "\n", "", "else", ":", "\n", "            ", "embedding", "=", "self", ".", "char_embedding", "(", "\n", "batch", "[", "cDataset", ".", "DOC_CHAR", "]", ".", "to", "(", "self", ".", "config", ".", "device", ")", ")", "\n", "", "embedding", "=", "embedding", ".", "transpose", "(", "1", ",", "2", ")", "\n", "pooled_outputs", "=", "[", "]", "\n", "for", "i", ",", "conv", "in", "enumerate", "(", "self", ".", "convs", ")", ":", "\n", "#convolution = torch.nn.ReLU()(conv(embedding))", "\n", "            ", "convolution", "=", "torch", ".", "nn", ".", "functional", ".", "relu", "(", "conv", "(", "embedding", ")", ")", "\n", "pooled", "=", "torch", ".", "topk", "(", "convolution", ",", "self", ".", "top_k", ")", "[", "0", "]", ".", "view", "(", "\n", "convolution", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "pooled_outputs", ".", "append", "(", "pooled", ")", "\n", "\n", "", "doc_embedding", "=", "torch", ".", "cat", "(", "pooled_outputs", ",", "1", ")", "\n", "return", "self", ".", "dropout", "(", "self", ".", "linear", "(", "doc_embedding", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.classification.zagrnn.ZAGRNN.__init__": [[15, 57], ["model.classification.classifier.Classifier.__init__", "model.rnn.RNN", "model.attention.LabelWiseAttention", "torch.nn.ModuleList", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.ReLU", "model.graph_convolution.GraphConvolution", "model.graph_convolution.GraphConvolution"], "methods", ["home.repos.pwc.inspect_result.MemoriesJ_KAMG.evaluate.classification_evaluate.ClassificationEvaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "config", ")", ":", "\n", "\n", "        ", "assert", "config", ".", "label_embedding", ".", "dimension", "==", "config", ".", "ZAGRNN", ".", "gcn_in_features", ",", "\"label embedding dimension should be same as gcn input feature dimension\"", "\n", "\n", "super", "(", "ZAGRNN", ",", "self", ")", ".", "__init__", "(", "dataset", ",", "config", ")", "\n", "\n", "self", ".", "rnn", "=", "RNN", "(", "\n", "config", ".", "embedding", ".", "dimension", ",", "config", ".", "ZAGRNN", ".", "hidden_dimension", ",", "\n", "num_layers", "=", "config", ".", "ZAGRNN", ".", "num_layers", ",", "batch_first", "=", "True", ",", "\n", "bidirectional", "=", "config", ".", "ZAGRNN", ".", "bidirectional", ",", "\n", "rnn_type", "=", "config", ".", "ZAGRNN", ".", "rnn_type", ")", "\n", "\n", "self", ".", "label_wise_attention", "=", "LabelWiseAttention", "(", "\n", "feat_dim", "=", "config", ".", "ZAGRNN", ".", "hidden_dimension", "*", "2", "if", "config", ".", "ZAGRNN", ".", "bidirectional", "else", "config", ".", "ZAGRNN", ".", "hidden_dimension", ",", "\n", "label_emb_dim", "=", "config", ".", "label_embedding", ".", "dimension", ",", "\n", "store_attention_score", "=", "config", ".", "ZAGRNN", ".", "store_attention_score", ")", "\n", "\n", "if", "config", ".", "ZAGRNN", ".", "use_gcn", ":", "\n", "            ", "self", ".", "gcn", "=", "torch", ".", "nn", ".", "ModuleList", "(", "[", "\n", "GraphConvolution", "(", "\n", "in_features", "=", "config", ".", "ZAGRNN", ".", "gcn_in_features", ",", "\n", "out_features", "=", "config", ".", "ZAGRNN", ".", "gcn_hidden_features", ",", "\n", "bias", "=", "True", ",", "\n", "act", "=", "torch", ".", "relu_", ",", "\n", "featureless", "=", "False", ",", "\n", "dropout", "=", "config", ".", "ZAGRNN", ".", "gcn_dropout", ")", ",", "\n", "GraphConvolution", "(", "\n", "in_features", "=", "config", ".", "ZAGRNN", ".", "gcn_hidden_features", ",", "\n", "out_features", "=", "config", ".", "ZAGRNN", ".", "gcn_out_features", ",", "\n", "bias", "=", "True", ",", "\n", "act", "=", "torch", ".", "relu_", ",", "\n", "featureless", "=", "False", ",", "\n", "dropout", "=", "config", ".", "ZAGRNN", ".", "gcn_dropout", ")", "\n", "]", ")", "\n", "\n", "self", ".", "doc_out_transform", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "torch", ".", "nn", ".", "Linear", "(", "\n", "in_features", "=", "config", ".", "ZAGRNN", ".", "hidden_dimension", "*", "2", "if", "config", ".", "ZAGRNN", ".", "bidirectional", "else", "config", ".", "ZAGRNN", ".", "hidden_dimension", ",", "\n", "out_features", "=", "config", ".", "ZAGRNN", ".", "gcn_in_features", "+", "config", ".", "ZAGRNN", ".", "gcn_out_features", "\n", ")", ",", "\n", "torch", ".", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.classification.zagrnn.ZAGRNN.get_parameter_optimizer_dict": [[59, 68], ["list", "list.append", "list.append", "list.append", "list.append", "list.append", "zagrnn.ZAGRNN.token_embedding.parameters", "zagrnn.ZAGRNN.rnn.parameters", "zagrnn.ZAGRNN.label_wise_attention.parameters", "zagrnn.ZAGRNN.gcn.parameters", "zagrnn.ZAGRNN.doc_out_transform.parameters"], "methods", ["None"], ["", "", "def", "get_parameter_optimizer_dict", "(", "self", ")", ":", "\n", "        ", "params", "=", "list", "(", ")", "\n", "params", ".", "append", "(", "{", "'params'", ":", "self", ".", "token_embedding", ".", "parameters", "(", ")", "}", ")", "\n", "params", ".", "append", "(", "{", "'params'", ":", "self", ".", "rnn", ".", "parameters", "(", ")", "}", ")", "\n", "params", ".", "append", "(", "{", "'params'", ":", "self", ".", "label_wise_attention", ".", "parameters", "(", ")", "}", ")", "\n", "if", "self", ".", "config", ".", "ZAGRNN", ".", "use_gcn", ":", "\n", "            ", "params", ".", "append", "(", "{", "'params'", ":", "self", ".", "gcn", ".", "parameters", "(", ")", "}", ")", "\n", "params", ".", "append", "(", "{", "'params'", ":", "self", ".", "doc_out_transform", ".", "parameters", "(", ")", "}", ")", "\n", "", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.classification.zagrnn.ZAGRNN.update_lr": [[69, 76], ["None"], "methods", ["None"], ["", "def", "update_lr", "(", "self", ",", "optimizer", ",", "epoch", ")", ":", "\n", "        ", "if", "epoch", ">", "self", ".", "config", ".", "train", ".", "num_epochs_static_embedding", ":", "\n", "            ", "for", "param_group", "in", "optimizer", ".", "param_groups", "[", ":", "2", "]", ":", "\n", "                ", "param_group", "[", "\"lr\"", "]", "=", "self", ".", "config", ".", "optimizer", ".", "learning_rate", "\n", "", "", "else", ":", "\n", "            ", "for", "param_group", "in", "optimizer", ".", "param_groups", "[", ":", "2", "]", ":", "\n", "                ", "param_group", "[", "\"lr\"", "]", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.classification.zagrnn.ZAGRNN.forward": [[77, 99], ["zagrnn.ZAGRNN.rnn", "zagrnn.ZAGRNN.label_embedding", "zagrnn.ZAGRNN.label_wise_attention", "torch.sum", "zagrnn.ZAGRNN.token_embedding", "batch[].to", "batch[].to", "torch.cat", "torch.sum", "batch[].to", "gcn_layer", "batch[].to", "zagrnn.ZAGRNN.doc_out_transform"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "batch", ")", ":", "\n", "        ", "if", "self", ".", "config", ".", "feature", ".", "feature_names", "[", "0", "]", "==", "\"token\"", ":", "\n", "            ", "embedding", "=", "self", ".", "token_embedding", "(", "\n", "batch", "[", "cDataset", ".", "DOC_TOKEN", "]", ".", "to", "(", "self", ".", "config", ".", "device", ")", ")", "\n", "length", "=", "batch", "[", "cDataset", ".", "DOC_TOKEN_LEN", "]", ".", "to", "(", "self", ".", "config", ".", "device", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "doc_embedding", ",", "_", "=", "self", ".", "rnn", "(", "embedding", ",", "length", ")", "\n", "\n", "label_repr", "=", "self", ".", "label_embedding", "(", "\n", "batch", "[", "cDataset", ".", "DOC_LABEL_ID", "]", ".", "to", "(", "self", ".", "config", ".", "device", ")", ")", "\n", "attentive_doc_embedding", "=", "self", ".", "label_wise_attention", "(", "doc_embedding", ",", "label_repr", ")", "\n", "\n", "if", "self", ".", "config", ".", "ZAGRNN", ".", "use_gcn", ":", "\n", "            ", "label_repr_gcn", "=", "label_repr", "\n", "for", "gcn_layer", "in", "self", ".", "gcn", ":", "\n", "                ", "label_repr_gcn", "=", "gcn_layer", "(", "label_repr_gcn", ",", "batch", "[", "cDataset", ".", "DOC_LABEL_RELATION", "]", ".", "to", "(", "self", ".", "config", ".", "device", ")", ")", "\n", "", "label_repr", "=", "torch", ".", "cat", "(", "(", "label_repr", ",", "label_repr_gcn", ")", ",", "dim", "=", "1", ")", "\n", "\n", "return", "torch", ".", "sum", "(", "self", ".", "doc_out_transform", "(", "attentive_doc_embedding", ")", "*", "label_repr", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "return", "torch", ".", "sum", "(", "attentive_doc_embedding", "*", "label_repr", ",", "dim", "=", "-", "1", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.classification.region_embedding.RegionEmbedding.__init__": [[28, 36], ["model.classification.classifier.Classifier.__init__", "int", "torch.nn.Linear", "model.model_util.init_tensor", "model.model_util.init_tensor", "len"], "methods", ["home.repos.pwc.inspect_result.MemoriesJ_KAMG.evaluate.classification_evaluate.ClassificationEvaluator.__init__", "home.repos.pwc.inspect_result.MemoriesJ_KAMG.model.model_util.init_tensor", "home.repos.pwc.inspect_result.MemoriesJ_KAMG.model.model_util.init_tensor"], ["def", "__init__", "(", "self", ",", "dataset", ",", "config", ")", ":", "\n", "        ", "super", "(", "RegionEmbedding", ",", "self", ")", ".", "__init__", "(", "dataset", ",", "config", ")", "\n", "self", ".", "region_size", "=", "config", ".", "embedding", ".", "region_size", "\n", "self", ".", "radius", "=", "int", "(", "self", ".", "region_size", "/", "2", ")", "\n", "self", ".", "linear", "=", "torch", ".", "nn", ".", "Linear", "(", "config", ".", "embedding", ".", "dimension", ",", "\n", "len", "(", "dataset", ".", "label_map", ")", ")", "\n", "init_tensor", "(", "self", ".", "linear", ".", "weight", ",", "init_type", "=", "InitType", ".", "XAVIER_UNIFORM", ")", "\n", "init_tensor", "(", "self", ".", "linear", ".", "bias", ",", "init_type", "=", "InitType", ".", "UNIFORM", ",", "low", "=", "0", ",", "high", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.classification.region_embedding.RegionEmbedding.get_parameter_optimizer_dict": [[37, 40], ["super().get_parameter_optimizer_dict"], "methods", ["home.repos.pwc.inspect_result.MemoriesJ_KAMG.classification.classifier.Classifier.get_parameter_optimizer_dict"], ["", "def", "get_parameter_optimizer_dict", "(", "self", ")", ":", "\n", "        ", "params", "=", "super", "(", "RegionEmbedding", ",", "self", ")", ".", "get_parameter_optimizer_dict", "(", ")", "\n", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.classification.region_embedding.RegionEmbedding.forward": [[41, 51], ["region_embedding.RegionEmbedding.get_embedding", "torch.nn.functional.pad", "mask.unsqueeze.unsqueeze.unsqueeze", "torch.sum", "region_embedding.RegionEmbedding.dropout", "region_embedding.RegionEmbedding.linear"], "methods", ["home.repos.pwc.inspect_result.MemoriesJ_KAMG.classification.classifier.Classifier.get_embedding"], ["", "def", "forward", "(", "self", ",", "batch", ")", ":", "\n", "        ", "embedding", ",", "_", ",", "mask", "=", "self", ".", "get_embedding", "(", "\n", "batch", ",", "[", "self", ".", "radius", ",", "self", ".", "radius", "]", ",", "cDataset", ".", "VOCAB_PADDING", ")", "\n", "# mask should have same dim with padded embedding", "\n", "mask", "=", "torch", ".", "nn", ".", "functional", ".", "pad", "(", "mask", ",", "(", "self", ".", "radius", ",", "self", ".", "radius", ",", "0", ",", "0", ")", ",", "\"constant\"", ",", "0", ")", "\n", "mask", "=", "mask", ".", "unsqueeze", "(", "2", ")", "\n", "embedding", "=", "embedding", "*", "mask", "\n", "doc_embedding", "=", "torch", ".", "sum", "(", "embedding", ",", "1", ")", "\n", "doc_embedding", "=", "self", ".", "dropout", "(", "doc_embedding", ")", "\n", "return", "self", ".", "linear", "(", "doc_embedding", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.classification.dpcnn.DPCNN.__init__": [[28, 53], ["model.classification.classifier.Classifier.__init__", "int", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "len", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "range"], "methods", ["home.repos.pwc.inspect_result.MemoriesJ_KAMG.evaluate.classification_evaluate.ClassificationEvaluator.__init__"], ["def", "__init__", "(", "self", ",", "dataset", ",", "config", ")", ":", "\n", "        ", "super", "(", "DPCNN", ",", "self", ")", ".", "__init__", "(", "dataset", ",", "config", ")", "\n", "self", ".", "num_kernels", "=", "config", ".", "DPCNN", ".", "num_kernels", "\n", "self", ".", "pooling_stride", "=", "config", ".", "DPCNN", ".", "pooling_stride", "\n", "self", ".", "kernel_size", "=", "config", ".", "DPCNN", ".", "kernel_size", "\n", "self", ".", "radius", "=", "int", "(", "self", ".", "kernel_size", "/", "2", ")", "\n", "assert", "self", ".", "kernel_size", "%", "2", "==", "1", ",", "\"DPCNN kernel should be odd!\"", "\n", "self", ".", "convert_conv", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "torch", ".", "nn", ".", "Conv1d", "(", "\n", "config", ".", "embedding", ".", "dimension", ",", "self", ".", "num_kernels", ",", "\n", "self", ".", "kernel_size", ",", "padding", "=", "self", ".", "radius", ")", "\n", ")", "\n", "\n", "self", ".", "convs", "=", "torch", ".", "nn", ".", "ModuleList", "(", "[", "torch", ".", "nn", ".", "Sequential", "(", "\n", "torch", ".", "nn", ".", "ReLU", "(", ")", ",", "\n", "torch", ".", "nn", ".", "Conv1d", "(", "\n", "self", ".", "num_kernels", ",", "self", ".", "num_kernels", ",", "\n", "self", ".", "kernel_size", ",", "padding", "=", "self", ".", "radius", ")", ",", "\n", "torch", ".", "nn", ".", "ReLU", "(", ")", ",", "\n", "torch", ".", "nn", ".", "Conv1d", "(", "\n", "self", ".", "num_kernels", ",", "self", ".", "num_kernels", ",", "\n", "self", ".", "kernel_size", ",", "padding", "=", "self", ".", "radius", ")", "\n", ")", "for", "_", "in", "range", "(", "config", ".", "DPCNN", ".", "blocks", "+", "1", ")", "]", ")", "\n", "\n", "self", ".", "linear", "=", "torch", ".", "nn", ".", "Linear", "(", "self", ".", "num_kernels", ",", "len", "(", "dataset", ".", "label_map", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.classification.dpcnn.DPCNN.get_parameter_optimizer_dict": [[54, 60], ["super().get_parameter_optimizer_dict", "super().get_parameter_optimizer_dict.append", "super().get_parameter_optimizer_dict.append", "super().get_parameter_optimizer_dict.append", "dpcnn.DPCNN.convert_conv.parameters", "dpcnn.DPCNN.convs.parameters", "dpcnn.DPCNN.linear.parameters"], "methods", ["home.repos.pwc.inspect_result.MemoriesJ_KAMG.classification.classifier.Classifier.get_parameter_optimizer_dict"], ["", "def", "get_parameter_optimizer_dict", "(", "self", ")", ":", "\n", "        ", "params", "=", "super", "(", "DPCNN", ",", "self", ")", ".", "get_parameter_optimizer_dict", "(", ")", "\n", "params", ".", "append", "(", "{", "'params'", ":", "self", ".", "convert_conv", ".", "parameters", "(", ")", "}", ")", "\n", "params", ".", "append", "(", "{", "'params'", ":", "self", ".", "convs", ".", "parameters", "(", ")", "}", ")", "\n", "params", ".", "append", "(", "{", "'params'", ":", "self", ".", "linear", ".", "parameters", "(", ")", "}", ")", "\n", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.classification.dpcnn.DPCNN.forward": [[61, 80], ["dpcnn.DPCNN.permute", "dpcnn.DPCNN.convert_conv", "range", "torch.max_pool1d().squeeze", "torch.max_pool1d().squeeze", "dpcnn.DPCNN.dropout", "dpcnn.DPCNN.token_embedding", "dpcnn.DPCNN.char_embedding().to", "len", "torch.max_pool1d", "torch.max_pool1d", "dpcnn.DPCNN.linear", "batch[].to", "torch.max_pool1d", "torch.max_pool1d", "dpcnn.DPCNN.char_embedding", "conv_features.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "batch", ")", ":", "\n", "        ", "if", "self", ".", "config", ".", "feature", ".", "feature_names", "[", "0", "]", "==", "\"token\"", ":", "\n", "            ", "embedding", "=", "self", ".", "token_embedding", "(", "\n", "batch", "[", "cDataset", ".", "DOC_TOKEN", "]", ".", "to", "(", "self", ".", "config", ".", "device", ")", ")", "\n", "", "else", ":", "\n", "            ", "embedding", "=", "self", ".", "char_embedding", "(", "\n", "batch", "[", "cDataset", ".", "DOC_CHAR", "]", ")", ".", "to", "(", "self", ".", "config", ".", "device", ")", "\n", "", "embedding", "=", "embedding", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "conv_embedding", "=", "self", ".", "convert_conv", "(", "embedding", ")", "\n", "conv_features", "=", "self", ".", "convs", "[", "0", "]", "(", "conv_embedding", ")", "\n", "conv_features", "=", "conv_embedding", "+", "conv_features", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "self", ".", "convs", ")", ")", ":", "\n", "            ", "block_features", "=", "F", ".", "max_pool1d", "(", "\n", "conv_features", ",", "self", ".", "kernel_size", ",", "self", ".", "pooling_stride", ")", "\n", "conv_features", "=", "self", ".", "convs", "[", "i", "]", "(", "block_features", ")", "\n", "conv_features", "=", "conv_features", "+", "block_features", "\n", "", "doc_embedding", "=", "F", ".", "max_pool1d", "(", "\n", "conv_features", ",", "conv_features", ".", "size", "(", "2", ")", ")", ".", "squeeze", "(", ")", "\n", "return", "self", ".", "dropout", "(", "self", ".", "linear", "(", "doc_embedding", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.classification.zsjlcnn.ZSJLCNN.__init__": [[15, 69], ["model.classification.classifier.Classifier.__init__", "torch.nn.Conv1d", "model.attention.LabelWiseAttention", "torch.nn.ModuleList", "model.fusion.Fusion", "torch.nn.Sequential", "len", "torch.nn.Linear", "torch.nn.ReLU", "int", "model.graph_convolution.MultiGraphConvolution", "model.graph_convolution.MultiGraphConvolution", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.MemoriesJ_KAMG.evaluate.classification_evaluate.ClassificationEvaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "config", ")", ":", "\n", "\n", "        ", "assert", "config", ".", "label_embedding", ".", "dimension", "==", "config", ".", "ZSJLCNN", ".", "gcn_in_features", ",", "\"label embedding dimension should be same as gcn input feature dimension\"", "\n", "assert", "len", "(", "config", ".", "data", ".", "label_relation_files", ")", ">=", "2", ",", "\"this model should utilize at least 2 different graphs' adjacency\"", "\n", "\n", "super", "(", "ZSJLCNN", ",", "self", ")", ".", "__init__", "(", "dataset", ",", "config", ")", "\n", "\n", "self", ".", "conv", "=", "torch", ".", "nn", ".", "Conv1d", "(", "\n", "in_channels", "=", "config", ".", "embedding", ".", "dimension", ",", "\n", "out_channels", "=", "config", ".", "ZSJLCNN", ".", "num_kernels", ",", "\n", "kernel_size", "=", "config", ".", "ZSJLCNN", ".", "kernel_size", ",", "\n", "padding", "=", "int", "(", "config", ".", "ZSJLCNN", ".", "kernel_size", "//", "2", ")", ")", "\n", "\n", "self", ".", "label_wise_attention", "=", "LabelWiseAttention", "(", "\n", "feat_dim", "=", "config", ".", "ZSJLCNN", ".", "num_kernels", ",", "\n", "label_emb_dim", "=", "config", ".", "label_embedding", ".", "dimension", ",", "\n", "store_attention_score", "=", "config", ".", "ZSJLCNN", ".", "store_attention_score", ")", "\n", "\n", "self", ".", "multi_gcn", "=", "torch", ".", "nn", ".", "ModuleList", "(", "[", "\n", "MultiGraphConvolution", "(", "\n", "n_adj", "=", "len", "(", "config", ".", "data", ".", "label_relation_files", ")", ",", "\n", "in_features", "=", "config", ".", "ZSJLCNN", ".", "gcn_in_features", ",", "\n", "out_features", "=", "config", ".", "ZSJLCNN", ".", "gcn_hidden_features", ",", "\n", "bias", "=", "True", ",", "\n", "act", "=", "torch", ".", "relu_", ",", "\n", "featureless", "=", "False", ",", "\n", "dropout", "=", "config", ".", "ZSJLCNN", ".", "gcn_dropout", ")", ",", "\n", "MultiGraphConvolution", "(", "\n", "n_adj", "=", "len", "(", "config", ".", "data", ".", "label_relation_files", ")", ",", "\n", "in_features", "=", "config", ".", "ZSJLCNN", ".", "gcn_hidden_features", ",", "\n", "out_features", "=", "config", ".", "ZSJLCNN", ".", "gcn_out_features", ",", "\n", "bias", "=", "True", ",", "\n", "act", "=", "torch", ".", "relu_", ",", "\n", "featureless", "=", "False", ",", "\n", "dropout", "=", "config", ".", "ZSJLCNN", ".", "gcn_dropout", ")", "\n", "]", ")", "\n", "\n", "self", ".", "multi_gcn_fuse", "=", "Fusion", "(", "config", ")", "\n", "\n", "if", "config", ".", "fusion", ".", "fusion_type", "==", "FusionType", ".", "CONCATENATION", ":", "\n", "            ", "out_tmp", "=", "config", ".", "ZSJLCNN", ".", "gcn_in_features", "+", "config", ".", "fusion", ".", "out_features", "\n", "", "elif", "config", ".", "fusion", ".", "fusion_type", "==", "FusionType", ".", "ATTACH", ":", "\n", "            ", "out_tmp", "=", "config", ".", "ZSJLCNN", ".", "gcn_in_features", "+", "config", ".", "ZSJLCNN", ".", "gcn_out_features", "*", "len", "(", "config", ".", "data", ".", "label_relation_files", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "self", ".", "doc_out_transform", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "torch", ".", "nn", ".", "Linear", "(", "\n", "in_features", "=", "config", ".", "ZSJLCNN", ".", "num_kernels", ",", "\n", "out_features", "=", "out_tmp", "\n", ")", ",", "\n", "torch", ".", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.classification.zsjlcnn.ZSJLCNN.get_parameter_optimizer_dict": [[71, 80], ["list", "list.append", "list.append", "list.append", "list.append", "list.append", "list.append", "zsjlcnn.ZSJLCNN.token_embedding.parameters", "zsjlcnn.ZSJLCNN.conv.parameters", "zsjlcnn.ZSJLCNN.label_wise_attention.parameters", "zsjlcnn.ZSJLCNN.multi_gcn.parameters", "zsjlcnn.ZSJLCNN.multi_gcn_fuse.parameters", "zsjlcnn.ZSJLCNN.doc_out_transform.parameters"], "methods", ["None"], ["", "def", "get_parameter_optimizer_dict", "(", "self", ")", ":", "\n", "        ", "params", "=", "list", "(", ")", "\n", "params", ".", "append", "(", "{", "'params'", ":", "self", ".", "token_embedding", ".", "parameters", "(", ")", "}", ")", "\n", "params", ".", "append", "(", "{", "'params'", ":", "self", ".", "conv", ".", "parameters", "(", ")", "}", ")", "\n", "params", ".", "append", "(", "{", "'params'", ":", "self", ".", "label_wise_attention", ".", "parameters", "(", ")", "}", ")", "\n", "params", ".", "append", "(", "{", "'params'", ":", "self", ".", "multi_gcn", ".", "parameters", "(", ")", "}", ")", "\n", "params", ".", "append", "(", "{", "'params'", ":", "self", ".", "multi_gcn_fuse", ".", "parameters", "(", ")", "}", ")", "\n", "params", ".", "append", "(", "{", "'params'", ":", "self", ".", "doc_out_transform", ".", "parameters", "(", ")", "}", ")", "\n", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.classification.zsjlcnn.ZSJLCNN.update_lr": [[81, 88], ["None"], "methods", ["None"], ["", "def", "update_lr", "(", "self", ",", "optimizer", ",", "epoch", ")", ":", "\n", "        ", "if", "epoch", ">", "self", ".", "config", ".", "train", ".", "num_epochs_static_embedding", ":", "\n", "            ", "for", "param_group", "in", "optimizer", ".", "param_groups", "[", ":", "2", "]", ":", "\n", "                ", "param_group", "[", "\"lr\"", "]", "=", "self", ".", "config", ".", "optimizer", ".", "learning_rate", "\n", "", "", "else", ":", "\n", "            ", "for", "param_group", "in", "optimizer", ".", "param_groups", "[", ":", "2", "]", ":", "\n", "                ", "param_group", "[", "\"lr\"", "]", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.classification.zsjlcnn.ZSJLCNN.forward": [[89, 112], ["zsjlcnn.ZSJLCNN.transpose", "torch.relu_", "doc_embedding.transpose.transpose.transpose", "zsjlcnn.ZSJLCNN.label_embedding", "zsjlcnn.ZSJLCNN.label_wise_attention", "torch.unsqueeze().repeat", "zsjlcnn.ZSJLCNN.multi_gcn_fuse", "torch.cat", "torch.sum", "zsjlcnn.ZSJLCNN.token_embedding", "zsjlcnn.ZSJLCNN.conv", "batch[].to", "len", "gcn_layer", "torch.unbind", "batch[].to", "torch.unsqueeze", "batch[].to", "zsjlcnn.ZSJLCNN.doc_out_transform"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "batch", ")", ":", "\n", "\n", "        ", "if", "self", ".", "config", ".", "feature", ".", "feature_names", "[", "0", "]", "==", "\"token\"", ":", "\n", "            ", "embedding", "=", "self", ".", "token_embedding", "(", "\n", "batch", "[", "cDataset", ".", "DOC_TOKEN", "]", ".", "to", "(", "self", ".", "config", ".", "device", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "embedding", "=", "embedding", ".", "transpose", "(", "1", ",", "2", ")", "\n", "doc_embedding", "=", "torch", ".", "relu_", "(", "self", ".", "conv", "(", "embedding", ")", ")", "\n", "doc_embedding", "=", "doc_embedding", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n", "label_repr", "=", "self", ".", "label_embedding", "(", "\n", "batch", "[", "cDataset", ".", "DOC_LABEL_ID", "]", ".", "to", "(", "self", ".", "config", ".", "device", ")", ")", "\n", "attentive_doc_embedding", "=", "self", ".", "label_wise_attention", "(", "doc_embedding", ",", "label_repr", ")", "\n", "\n", "label_repr_gcn", "=", "torch", ".", "unsqueeze", "(", "label_repr", ",", "dim", "=", "0", ")", ".", "repeat", "(", "len", "(", "self", ".", "config", ".", "data", ".", "label_relation_files", ")", ",", "1", ",", "1", ")", "\n", "for", "gcn_layer", "in", "self", ".", "multi_gcn", ":", "\n", "            ", "label_repr_gcn", "=", "gcn_layer", "(", "label_repr_gcn", ",", "batch", "[", "cDataset", ".", "DOC_LABEL_RELATION", "]", ".", "to", "(", "self", ".", "config", ".", "device", ")", ")", "\n", "# do some other fusion operations", "\n", "", "label_repr_gcn", "=", "self", ".", "multi_gcn_fuse", "(", "torch", ".", "unbind", "(", "label_repr_gcn", ",", "dim", "=", "0", ")", ")", "\n", "label_repr", "=", "torch", ".", "cat", "(", "(", "label_repr", ",", "label_repr_gcn", ")", ",", "dim", "=", "1", ")", "\n", "\n", "return", "torch", ".", "sum", "(", "self", ".", "doc_out_transform", "(", "attentive_doc_embedding", ")", "*", "label_repr", ",", "dim", "=", "-", "1", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.classification.transformer.Transformer.__init__": [[25, 59], ["model.classification.classifier.Classifier.__init__", "model.embedding.PositionEmbedding", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "len", "model.transformer_encoder.StarEncoderLayer", "model.transformer_encoder.EncoderLayer", "range", "range"], "methods", ["home.repos.pwc.inspect_result.MemoriesJ_KAMG.evaluate.classification_evaluate.ClassificationEvaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "config", ")", ":", "\n", "        ", "super", "(", "Transformer", ",", "self", ")", ".", "__init__", "(", "dataset", ",", "config", ")", "\n", "\n", "self", ".", "pad", "=", "dataset", ".", "token_map", "[", "dataset", ".", "VOCAB_PADDING", "]", "\n", "\n", "if", "config", ".", "feature", ".", "feature_names", "[", "0", "]", "==", "\"token\"", ":", "\n", "            ", "seq_max_len", "=", "config", ".", "feature", ".", "max_token_len", "\n", "", "else", ":", "\n", "            ", "seq_max_len", "=", "config", ".", "feature", ".", "max_char_len", "\n", "", "self", ".", "position_enc", "=", "PositionEmbedding", "(", "seq_max_len", ",", "\n", "config", ".", "embedding", ".", "dimension", ",", "\n", "self", ".", "pad", ")", "\n", "\n", "if", "config", ".", "Transformer", ".", "use_star", ":", "\n", "            ", "self", ".", "layer_stack", "=", "nn", ".", "ModuleList", "(", "[", "\n", "StarEncoderLayer", "(", "config", ".", "embedding", ".", "dimension", ",", "\n", "config", ".", "Transformer", ".", "n_head", ",", "\n", "config", ".", "Transformer", ".", "d_k", ",", "\n", "config", ".", "Transformer", ".", "d_v", ",", "\n", "dropout", "=", "config", ".", "Transformer", ".", "dropout", ")", "\n", "for", "_", "in", "range", "(", "config", ".", "Transformer", ".", "n_layers", ")", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "layer_stack", "=", "nn", ".", "ModuleList", "(", "[", "\n", "EncoderLayer", "(", "config", ".", "embedding", ".", "dimension", ",", "\n", "config", ".", "Transformer", ".", "d_inner", ",", "\n", "config", ".", "Transformer", ".", "n_head", ",", "\n", "config", ".", "Transformer", ".", "d_k", ",", "\n", "config", ".", "Transformer", ".", "d_v", ",", "\n", "dropout", "=", "config", ".", "Transformer", ".", "dropout", ")", "\n", "for", "_", "in", "range", "(", "config", ".", "Transformer", ".", "n_layers", ")", "]", ")", "\n", "\n", "", "hidden_size", "=", "config", ".", "embedding", ".", "dimension", "\n", "self", ".", "linear", "=", "torch", ".", "nn", ".", "Linear", "(", "hidden_size", ",", "len", "(", "dataset", ".", "label_map", ")", ")", "\n", "self", ".", "dropout", "=", "torch", ".", "nn", ".", "Dropout", "(", "p", "=", "config", ".", "train", ".", "hidden_layer_dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.classification.transformer.Transformer.get_parameter_optimizer_dict": [[60, 68], ["list", "list.append", "list.append", "range", "list.append", "len", "list.append", "transformer.Transformer.token_embedding.parameters", "transformer.Transformer.char_embedding.parameters", "transformer.Transformer.linear.parameters", "transformer.Transformer.layer_stack[].parameters"], "methods", ["None"], ["", "def", "get_parameter_optimizer_dict", "(", "self", ")", ":", "\n", "        ", "params", "=", "list", "(", ")", "\n", "params", ".", "append", "(", "{", "'params'", ":", "self", ".", "token_embedding", ".", "parameters", "(", ")", "}", ")", "\n", "params", ".", "append", "(", "{", "'params'", ":", "self", ".", "char_embedding", ".", "parameters", "(", ")", "}", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "self", ".", "layer_stack", ")", ")", ":", "\n", "            ", "params", ".", "append", "(", "{", "'params'", ":", "self", ".", "layer_stack", "[", "i", "]", ".", "parameters", "(", ")", "}", ")", "\n", "", "params", ".", "append", "(", "{", "'params'", ":", "self", ".", "linear", ".", "parameters", "(", ")", "}", ")", "\n", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.classification.transformer.Transformer.update_lr": [[69, 76], ["None"], "methods", ["None"], ["", "def", "update_lr", "(", "self", ",", "optimizer", ",", "epoch", ")", ":", "\n", "        ", "if", "epoch", ">", "self", ".", "config", ".", "train", ".", "num_epochs_static_embedding", ":", "\n", "            ", "for", "param_group", "in", "optimizer", ".", "param_groups", "[", ":", "2", "]", ":", "\n", "                ", "param_group", "[", "\"lr\"", "]", "=", "self", ".", "config", ".", "optimizer", ".", "learning_rate", "\n", "", "", "else", ":", "\n", "            ", "for", "param_group", "in", "optimizer", ".", "param_groups", "[", ":", "2", "]", ":", "\n", "                ", "param_group", "[", "\"lr\"", "]", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.classification.transformer.Transformer.forward": [[77, 127], ["transformer.Transformer.forward._get_attn_key_pad_mask"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "batch", ")", ":", "\n", "        ", "def", "_get_non_pad_mask", "(", "seq", ",", "pad", ")", ":", "\n", "            ", "assert", "seq", ".", "dim", "(", ")", "==", "2", "\n", "return", "seq", ".", "ne", "(", "pad", ")", ".", "type", "(", "torch", ".", "float", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n", "", "def", "_get_attn_key_pad_mask", "(", "seq_k", ",", "seq_q", ",", "pad", ")", ":", "\n", "            ", "''' For masking out the padding part of key sequence. '''", "\n", "\n", "# Expand to fit the shape of key query attention matrix.", "\n", "len_q", "=", "seq_q", ".", "size", "(", "1", ")", "\n", "padding_mask", "=", "seq_k", ".", "eq", "(", "pad", ")", "\n", "padding_mask", "=", "padding_mask", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "-", "1", ",", "len_q", ",", "-", "1", ")", "# b x lq x lk", "\n", "\n", "return", "padding_mask", "\n", "\n", "", "if", "self", ".", "config", ".", "feature", ".", "feature_names", "[", "0", "]", "==", "\"token\"", ":", "\n", "            ", "src_seq", "=", "batch", "[", "cDataset", ".", "DOC_TOKEN", "]", ".", "to", "(", "self", ".", "config", ".", "device", ")", "\n", "embedding", "=", "self", ".", "token_embedding", "(", "src_seq", ")", "\n", "", "else", ":", "\n", "            ", "src_seq", "=", "batch", "[", "cDataset", ".", "DOC_CHAR", "]", ".", "to", "(", "self", ".", "config", ".", "device", ")", "\n", "embedding", "=", "self", ".", "char_embedding", "(", "src_seq", ")", "\n", "\n", "# Prepare masks", "\n", "", "slf_attn_mask", "=", "_get_attn_key_pad_mask", "(", "seq_k", "=", "src_seq", ",", "seq_q", "=", "src_seq", ",", "pad", "=", "self", ".", "pad", ")", "\n", "non_pad_mask", "=", "_get_non_pad_mask", "(", "src_seq", ",", "self", ".", "pad", ")", "\n", "\n", "batch_lens", "=", "(", "src_seq", "!=", "self", ".", "pad", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "src_pos", "=", "torch", ".", "zeros_like", "(", "src_seq", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "for", "row", ",", "length", "in", "enumerate", "(", "batch_lens", ")", ":", "\n", "            ", "src_pos", "[", "row", "]", "[", ":", "length", "]", "=", "torch", ".", "arange", "(", "1", ",", "length", "+", "1", ")", "\n", "\n", "", "enc_output", "=", "embedding", "+", "self", ".", "position_enc", "(", "src_pos", ")", "\n", "\n", "if", "self", ".", "config", ".", "Transformer", ".", "use_star", ":", "\n", "            ", "s", "=", "torch", ".", "mean", "(", "embedding", ",", "1", ")", "# virtual relay node", "\n", "h", "=", "enc_output", "\n", "for", "enc_layer", "in", "self", ".", "layer_stack", ":", "\n", "                ", "h", ",", "s", "=", "enc_layer", "(", "h", ",", "embedding", ",", "s", ",", "\n", "non_pad_mask", "=", "non_pad_mask", ",", "\n", "slf_attn_mask", "=", "None", ")", "\n", "", "h_max", ",", "_", "=", "torch", ".", "max", "(", "h", ",", "1", ")", "\n", "enc_output", "=", "h_max", "+", "s", "\n", "", "else", ":", "\n", "            ", "for", "enc_layer", "in", "self", ".", "layer_stack", ":", "\n", "                ", "enc_output", ",", "_", "=", "enc_layer", "(", "enc_output", ",", "\n", "non_pad_mask", "=", "non_pad_mask", ",", "\n", "slf_attn_mask", "=", "slf_attn_mask", ")", "\n", "", "enc_output", "=", "torch", ".", "mean", "(", "enc_output", ",", "1", ")", "\n", "\n", "", "return", "self", ".", "dropout", "(", "self", ".", "linear", "(", "enc_output", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.classification.zagcnn.ZAGCNN.__init__": [[14, 57], ["model.classification.classifier.Classifier.__init__", "torch.nn.Conv1d", "model.attention.LabelWiseAttention", "torch.nn.ModuleList", "torch.nn.Sequential", "int", "torch.nn.Linear", "torch.nn.ReLU", "model.graph_convolution.GraphConvolution", "model.graph_convolution.GraphConvolution"], "methods", ["home.repos.pwc.inspect_result.MemoriesJ_KAMG.evaluate.classification_evaluate.ClassificationEvaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "config", ")", ":", "\n", "\n", "        ", "super", "(", "ZAGCNN", ",", "self", ")", ".", "__init__", "(", "dataset", ",", "config", ")", "\n", "\n", "self", ".", "conv", "=", "torch", ".", "nn", ".", "Conv1d", "(", "\n", "in_channels", "=", "config", ".", "embedding", ".", "dimension", ",", "\n", "out_channels", "=", "config", ".", "ZAGCNN", ".", "num_kernels", ",", "\n", "kernel_size", "=", "config", ".", "ZAGCNN", ".", "kernel_size", ",", "\n", "padding", "=", "int", "(", "config", ".", "ZAGCNN", ".", "kernel_size", "//", "2", ")", ")", "\n", "\n", "self", ".", "label_wise_attention", "=", "LabelWiseAttention", "(", "\n", "feat_dim", "=", "config", ".", "ZAGCNN", ".", "num_kernels", ",", "\n", "label_emb_dim", "=", "config", ".", "label_embedding", ".", "dimension", ",", "\n", "store_attention_score", "=", "config", ".", "ZAGCNN", ".", "store_attention_score", ")", "\n", "\n", "if", "config", ".", "ZAGCNN", ".", "use_gcn", ":", "\n", "\n", "            ", "assert", "config", ".", "label_embedding", ".", "dimension", "==", "config", ".", "ZAGCNN", ".", "gcn_in_features", ",", "\"label embedding dimension should be same as gcn input feature dimension\"", "\n", "\n", "self", ".", "gcn", "=", "torch", ".", "nn", ".", "ModuleList", "(", "[", "\n", "GraphConvolution", "(", "\n", "in_features", "=", "config", ".", "ZAGCNN", ".", "gcn_in_features", ",", "\n", "out_features", "=", "config", ".", "ZAGCNN", ".", "gcn_hidden_features", ",", "\n", "bias", "=", "True", ",", "\n", "act", "=", "torch", ".", "relu_", ",", "\n", "featureless", "=", "False", ",", "\n", "dropout", "=", "config", ".", "ZAGCNN", ".", "gcn_dropout", ")", ",", "\n", "GraphConvolution", "(", "\n", "in_features", "=", "config", ".", "ZAGCNN", ".", "gcn_hidden_features", ",", "\n", "out_features", "=", "config", ".", "ZAGCNN", ".", "gcn_out_features", ",", "\n", "bias", "=", "True", ",", "\n", "act", "=", "torch", ".", "relu_", ",", "\n", "featureless", "=", "False", ",", "\n", "dropout", "=", "config", ".", "ZAGCNN", ".", "gcn_dropout", ")", "\n", "]", ")", "\n", "\n", "self", ".", "doc_out_transform", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "torch", ".", "nn", ".", "Linear", "(", "\n", "in_features", "=", "config", ".", "ZAGCNN", ".", "num_kernels", ",", "\n", "out_features", "=", "config", ".", "ZAGCNN", ".", "gcn_in_features", "+", "config", ".", "ZAGCNN", ".", "gcn_out_features", "\n", ")", ",", "\n", "torch", ".", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.classification.zagcnn.ZAGCNN.get_parameter_optimizer_dict": [[59, 68], ["list", "list.append", "list.append", "list.append", "list.append", "list.append", "zagcnn.ZAGCNN.token_embedding.parameters", "zagcnn.ZAGCNN.conv.parameters", "zagcnn.ZAGCNN.label_wise_attention.parameters", "zagcnn.ZAGCNN.gcn.parameters", "zagcnn.ZAGCNN.doc_out_transform.parameters"], "methods", ["None"], ["", "", "def", "get_parameter_optimizer_dict", "(", "self", ")", ":", "\n", "        ", "params", "=", "list", "(", ")", "\n", "params", ".", "append", "(", "{", "'params'", ":", "self", ".", "token_embedding", ".", "parameters", "(", ")", "}", ")", "\n", "params", ".", "append", "(", "{", "'params'", ":", "self", ".", "conv", ".", "parameters", "(", ")", "}", ")", "\n", "params", ".", "append", "(", "{", "'params'", ":", "self", ".", "label_wise_attention", ".", "parameters", "(", ")", "}", ")", "\n", "if", "self", ".", "config", ".", "ZAGCNN", ".", "use_gcn", ":", "\n", "            ", "params", ".", "append", "(", "{", "'params'", ":", "self", ".", "gcn", ".", "parameters", "(", ")", "}", ")", "\n", "params", ".", "append", "(", "{", "'params'", ":", "self", ".", "doc_out_transform", ".", "parameters", "(", ")", "}", ")", "\n", "", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.classification.zagcnn.ZAGCNN.update_lr": [[69, 76], ["None"], "methods", ["None"], ["", "def", "update_lr", "(", "self", ",", "optimizer", ",", "epoch", ")", ":", "\n", "        ", "if", "epoch", ">", "self", ".", "config", ".", "train", ".", "num_epochs_static_embedding", ":", "\n", "            ", "for", "param_group", "in", "optimizer", ".", "param_groups", "[", ":", "2", "]", ":", "\n", "                ", "param_group", "[", "\"lr\"", "]", "=", "self", ".", "config", ".", "optimizer", ".", "learning_rate", "\n", "", "", "else", ":", "\n", "            ", "for", "param_group", "in", "optimizer", ".", "param_groups", "[", ":", "2", "]", ":", "\n", "                ", "param_group", "[", "\"lr\"", "]", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.classification.zagcnn.ZAGCNN.forward": [[77, 101], ["zagcnn.ZAGCNN.transpose", "torch.relu_", "doc_embedding.transpose.transpose.transpose", "zagcnn.ZAGCNN.label_embedding", "zagcnn.ZAGCNN.label_wise_attention", "torch.sum", "zagcnn.ZAGCNN.token_embedding", "zagcnn.ZAGCNN.conv", "batch[].to", "torch.cat", "torch.sum", "batch[].to", "gcn_layer", "batch[].to", "zagcnn.ZAGCNN.doc_out_transform"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "batch", ")", ":", "\n", "\n", "        ", "if", "self", ".", "config", ".", "feature", ".", "feature_names", "[", "0", "]", "==", "\"token\"", ":", "\n", "            ", "embedding", "=", "self", ".", "token_embedding", "(", "\n", "batch", "[", "cDataset", ".", "DOC_TOKEN", "]", ".", "to", "(", "self", ".", "config", ".", "device", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "embedding", "=", "embedding", ".", "transpose", "(", "1", ",", "2", ")", "\n", "doc_embedding", "=", "torch", ".", "relu_", "(", "self", ".", "conv", "(", "embedding", ")", ")", "\n", "doc_embedding", "=", "doc_embedding", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n", "label_repr", "=", "self", ".", "label_embedding", "(", "\n", "batch", "[", "cDataset", ".", "DOC_LABEL_ID", "]", ".", "to", "(", "self", ".", "config", ".", "device", ")", ")", "\n", "attentive_doc_embedding", "=", "self", ".", "label_wise_attention", "(", "doc_embedding", ",", "label_repr", ")", "\n", "\n", "if", "self", ".", "config", ".", "ZAGCNN", ".", "use_gcn", ":", "\n", "            ", "label_repr_gcn", "=", "label_repr", "\n", "for", "gcn_layer", "in", "self", ".", "gcn", ":", "\n", "                ", "label_repr_gcn", "=", "gcn_layer", "(", "label_repr_gcn", ",", "batch", "[", "cDataset", ".", "DOC_LABEL_RELATION", "]", ".", "to", "(", "self", ".", "config", ".", "device", ")", ")", "\n", "", "label_repr", "=", "torch", ".", "cat", "(", "(", "label_repr", ",", "label_repr_gcn", ")", ",", "dim", "=", "1", ")", "\n", "\n", "return", "torch", ".", "sum", "(", "self", ".", "doc_out_transform", "(", "attentive_doc_embedding", ")", "*", "label_repr", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "return", "torch", ".", "sum", "(", "attentive_doc_embedding", "*", "label_repr", ",", "dim", "=", "-", "1", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.classification.classifier.Classifier.__init__": [[26, 111], ["super().__init__", "torch.nn.Dropout", "len", "model.embedding.Embedding", "model.embedding.Embedding", "model.embedding.RegionEmbeddingLayer", "model.embedding.RegionEmbeddingLayer", "TypeError", "model.embedding.Embedding", "TypeError"], "methods", ["home.repos.pwc.inspect_result.MemoriesJ_KAMG.evaluate.classification_evaluate.ClassificationEvaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "config", ")", ":", "\n", "        ", "super", "(", "Classifier", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "config", "=", "config", "\n", "assert", "len", "(", "self", ".", "config", ".", "feature", ".", "feature_names", ")", "==", "1", "\n", "assert", "self", ".", "config", ".", "feature", ".", "feature_names", "[", "0", "]", "==", "\"token\"", "or", "self", ".", "config", ".", "feature", ".", "feature_names", "[", "0", "]", "==", "\"char\"", "\n", "if", "config", ".", "embedding", ".", "type", "==", "EmbeddingType", ".", "EMBEDDING", ":", "\n", "            ", "self", ".", "token_embedding", "=", "Embedding", "(", "dataset", ".", "token_map", ",", "config", ".", "embedding", ".", "dimension", ",", "\n", "cDataset", ".", "DOC_TOKEN", ",", "config", ",", "dataset", ".", "VOCAB_PADDING", ",", "\n", "pretrained_embedding_file", "=", "config", ".", "feature", ".", "token_pretrained_file", ",", "\n", "mode", "=", "EmbeddingProcessType", ".", "FLAT", ",", "\n", "dropout", "=", "self", ".", "config", ".", "embedding", ".", "dropout", ",", "\n", "init_type", "=", "self", ".", "config", ".", "embedding", ".", "initializer", ",", "\n", "low", "=", "-", "self", ".", "config", ".", "embedding", ".", "uniform_bound", ",", "\n", "high", "=", "self", ".", "config", ".", "embedding", ".", "uniform_bound", ",", "\n", "std", "=", "self", ".", "config", ".", "embedding", ".", "random_stddev", ",", "\n", "fan_mode", "=", "self", ".", "config", ".", "embedding", ".", "fan_mode", ",", "\n", "activation_type", "=", "ActivationType", ".", "NONE", ",", "\n", "model_mode", "=", "dataset", ".", "model_mode", ",", "\n", "trainable", "=", "self", ".", "config", ".", "embedding", ".", "trainable", ")", "\n", "self", ".", "char_embedding", "=", "Embedding", "(", "dataset", ".", "char_map", ",", "config", ".", "embedding", ".", "dimension", ",", "\n", "cDataset", ".", "DOC_CHAR", ",", "config", ",", "dataset", ".", "VOCAB_PADDING", ",", "\n", "mode", "=", "EmbeddingProcessType", ".", "FLAT", ",", "\n", "dropout", "=", "self", ".", "config", ".", "embedding", ".", "dropout", ",", "\n", "init_type", "=", "self", ".", "config", ".", "embedding", ".", "initializer", ",", "\n", "low", "=", "-", "self", ".", "config", ".", "embedding", ".", "uniform_bound", ",", "\n", "high", "=", "self", ".", "config", ".", "embedding", ".", "uniform_bound", ",", "\n", "std", "=", "self", ".", "config", ".", "embedding", ".", "random_stddev", ",", "\n", "fan_mode", "=", "self", ".", "config", ".", "embedding", ".", "fan_mode", ",", "\n", "activation_type", "=", "ActivationType", ".", "NONE", ",", "\n", "model_mode", "=", "dataset", ".", "model_mode", ",", "\n", "trainable", "=", "self", ".", "config", ".", "embedding", ".", "trainable", ")", "\n", "", "elif", "config", ".", "embedding", ".", "type", "==", "EmbeddingType", ".", "REGION_EMBEDDING", ":", "\n", "            ", "self", ".", "token_embedding", "=", "RegionEmbeddingLayer", "(", "\n", "dataset", ".", "token_map", ",", "config", ".", "embedding", ".", "dimension", ",", "\n", "config", ".", "embedding", ".", "region_size", ",", "cDataset", ".", "DOC_TOKEN", ",", "config", ",", "\n", "padding", "=", "dataset", ".", "VOCAB_PADDING", ",", "\n", "pretrained_embedding_file", "=", "config", ".", "feature", ".", "token_pretrained_file", ",", "\n", "dropout", "=", "self", ".", "config", ".", "embedding", ".", "dropout", ",", "\n", "init_type", "=", "self", ".", "config", ".", "embedding", ".", "initializer", ",", "\n", "low", "=", "-", "self", ".", "config", ".", "embedding", ".", "uniform_bound", ",", "\n", "high", "=", "self", ".", "config", ".", "embedding", ".", "uniform_bound", ",", "\n", "std", "=", "self", ".", "config", ".", "embedding", ".", "random_stddev", ",", "\n", "fan_mode", "=", "self", ".", "config", ".", "embedding", ".", "fan_mode", ",", "\n", "model_mode", "=", "dataset", ".", "model_mode", ",", "\n", "region_embedding_type", "=", "config", ".", "embedding", ".", "region_embedding_type", ")", "\n", "\n", "self", ".", "char_embedding", "=", "RegionEmbeddingLayer", "(", "\n", "dataset", ".", "char_map", ",", "config", ".", "embedding", ".", "dimension", ",", "\n", "config", ".", "embedding", ".", "region_size", ",", "cDataset", ".", "DOC_CHAR", ",", "config", ",", "\n", "padding", "=", "dataset", ".", "VOCAB_PADDING", ",", "\n", "dropout", "=", "self", ".", "config", ".", "embedding", ".", "dropout", ",", "\n", "init_type", "=", "self", ".", "config", ".", "embedding", ".", "initializer", ",", "\n", "low", "=", "-", "self", ".", "config", ".", "embedding", ".", "uniform_bound", ",", "\n", "high", "=", "self", ".", "config", ".", "embedding", ".", "uniform_bound", ",", "\n", "std", "=", "self", ".", "config", ".", "embedding", ".", "random_stddev", ",", "\n", "fan_mode", "=", "self", ".", "config", ".", "embedding", ".", "fan_mode", ",", "\n", "model_mode", "=", "dataset", ".", "model_mode", ",", "\n", "region_embedding_type", "=", "config", ".", "embedding", ".", "region_embedding_type", ")", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "\n", "\"Unsupported embedding type: %s. \"", "%", "config", ".", "embedding", ".", "type", ")", "\n", "\n", "", "if", "config", ".", "label_embedding", ".", "use_label_embedding", ":", "\n", "            ", "if", "config", ".", "label_embedding", ".", "type", "==", "EmbeddingType", ".", "EMBEDDING", ":", "\n", "                ", "self", ".", "label_embedding", "=", "Embedding", "(", "dataset", ".", "label_map", ",", "config", ".", "label_embedding", ".", "dimension", ",", "\n", "cDataset", ".", "DOC_LABEL", ",", "config", ",", "dataset", ".", "VOCAB_PADDING", ",", "\n", "pretrained_embedding_file", "=", "config", ".", "feature", ".", "label_embedding_pretrained_file", ",", "\n", "mode", "=", "EmbeddingProcessType", ".", "FLAT", ",", "\n", "dropout", "=", "self", ".", "config", ".", "label_embedding", ".", "dropout", ",", "\n", "init_type", "=", "self", ".", "config", ".", "label_embedding", ".", "initializer", ",", "\n", "low", "=", "-", "self", ".", "config", ".", "label_embedding", ".", "uniform_bound", ",", "\n", "high", "=", "self", ".", "config", ".", "label_embedding", ".", "uniform_bound", ",", "\n", "std", "=", "self", ".", "config", ".", "label_embedding", ".", "random_stddev", ",", "\n", "fan_mode", "=", "self", ".", "config", ".", "label_embedding", ".", "fan_mode", ",", "\n", "activation_type", "=", "ActivationType", ".", "NONE", ",", "\n", "model_mode", "=", "dataset", ".", "model_mode", ",", "\n", "trainable", "=", "self", ".", "config", ".", "label_embedding", ".", "trainable", ")", "\n", "", "else", ":", "\n", "                ", "raise", "TypeError", "(", "\"Unsupported embedding type: {}. \"", ".", "format", "(", "config", ".", "embedding", ".", "type", ")", ")", "\n", "\n", "", "", "self", ".", "dropout", "=", "torch", ".", "nn", ".", "Dropout", "(", "p", "=", "config", ".", "train", ".", "hidden_layer_dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.classification.classifier.Classifier.get_embedding": [[112, 130], ["batch[].to", "classifier.Classifier.token_embedding", "batch[].to", "batch[].to", "batch[].to", "classifier.Classifier.token_embedding", "batch[].to", "batch[].to", "torch.nn.functional.pad", "torch.nn.functional.pad"], "methods", ["None"], ["", "def", "get_embedding", "(", "self", ",", "batch", ",", "pad_shape", "=", "None", ",", "pad_value", "=", "0", ")", ":", "\n", "        ", "if", "self", ".", "config", ".", "feature", ".", "feature_names", "[", "0", "]", "==", "\"token\"", ":", "\n", "            ", "token_id", "=", "batch", "[", "cDataset", ".", "DOC_TOKEN", "]", ".", "to", "(", "self", ".", "config", ".", "device", ")", "\n", "if", "pad_shape", "is", "not", "None", ":", "\n", "                ", "token_id", "=", "torch", ".", "nn", ".", "functional", ".", "pad", "(", "\n", "token_id", ",", "pad_shape", ",", "mode", "=", "'constant'", ",", "value", "=", "pad_value", ")", "\n", "", "embedding", "=", "self", ".", "token_embedding", "(", "token_id", ")", "\n", "length", "=", "batch", "[", "cDataset", ".", "DOC_TOKEN_LEN", "]", ".", "to", "(", "self", ".", "config", ".", "device", ")", "\n", "mask", "=", "batch", "[", "cDataset", ".", "DOC_TOKEN_MASK", "]", ".", "to", "(", "self", ".", "config", ".", "device", ")", "\n", "", "else", ":", "\n", "            ", "char_id", "=", "batch", "[", "cDataset", ".", "DOC_TOKEN", "]", ".", "to", "(", "self", ".", "config", ".", "device", ")", "\n", "if", "pad_shape", "is", "not", "None", ":", "\n", "                ", "char_id", "=", "torch", ".", "nn", ".", "functional", ".", "pad", "(", "\n", "char_id", ",", "pad_shape", ",", "mode", "=", "'constant'", ",", "value", "=", "pad_value", ")", "\n", "", "embedding", "=", "self", ".", "token_embedding", "(", "char_id", ")", "\n", "length", "=", "batch", "[", "cDataset", ".", "DOC_CHAR_LEN", "]", ".", "to", "(", "self", ".", "config", ".", "device", ")", "\n", "mask", "=", "batch", "[", "cDataset", ".", "DOC_CHAR_MASK", "]", ".", "to", "(", "self", ".", "config", ".", "device", ")", "\n", "", "return", "embedding", ",", "length", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.classification.classifier.Classifier.get_parameter_optimizer_dict": [[131, 138], ["list", "list.append", "list.append", "classifier.Classifier.token_embedding.parameters", "classifier.Classifier.char_embedding.parameters"], "methods", ["None"], ["", "def", "get_parameter_optimizer_dict", "(", "self", ")", ":", "\n", "        ", "params", "=", "list", "(", ")", "\n", "params", ".", "append", "(", "\n", "{", "'params'", ":", "self", ".", "token_embedding", ".", "parameters", "(", ")", ",", "'is_embedding'", ":", "True", "}", ")", "\n", "params", ".", "append", "(", "\n", "{", "'params'", ":", "self", ".", "char_embedding", ".", "parameters", "(", ")", ",", "'is_embedding'", ":", "True", "}", ")", "\n", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.classification.classifier.Classifier.update_lr": [[139, 148], ["None"], "methods", ["None"], ["", "def", "update_lr", "(", "self", ",", "optimizer", ",", "epoch", ")", ":", "\n", "        ", "\"\"\"Update lr\n        \"\"\"", "\n", "if", "epoch", ">", "self", ".", "config", ".", "train", ".", "num_epochs_static_embedding", ":", "\n", "            ", "for", "param_group", "in", "optimizer", ".", "param_groups", "[", ":", "2", "]", ":", "\n", "                ", "param_group", "[", "\"lr\"", "]", "=", "self", ".", "config", ".", "optimizer", ".", "learning_rate", "\n", "", "", "else", ":", "\n", "            ", "for", "param_group", "in", "optimizer", ".", "param_groups", "[", ":", "2", "]", ":", "\n", "                ", "param_group", "[", "\"lr\"", "]", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.classification.classifier.Classifier.forward": [[149, 151], ["None"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "batch", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "", ""]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.evaluate.classification_evaluate.ClassificationEvaluator.__init__": [[33, 45], ["os.path.exists", "os.makedirs"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "eval_dir", ")", ":", "\n", "        ", "self", ".", "confusion_matrix_list", "=", "None", "\n", "self", ".", "precision_list", "=", "None", "\n", "self", ".", "recall_list", "=", "None", "\n", "self", ".", "fscore_list", "=", "None", "\n", "self", ".", "right_list", "=", "None", "\n", "self", ".", "predict_list", "=", "None", "\n", "self", ".", "standard_list", "=", "None", "\n", "\n", "self", ".", "eval_dir", "=", "eval_dir", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "eval_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "eval_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.evaluate.classification_evaluate.ClassificationEvaluator._calculate_prf": [[46, 65], ["None"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "_calculate_prf", "(", "right_count", ",", "predict_count", ",", "standard_count", ")", ":", "\n", "        ", "\"\"\"Calculate precision, recall, fscore\n        Args:\n            standard_count: Standard count\n            predict_count: Predict count\n            right_count: Right count\n        Returns:\n            precision, recall, f_score\n        \"\"\"", "\n", "precision", ",", "recall", ",", "f_score", "=", "0", ",", "0", ",", "0", "\n", "if", "predict_count", ">", "0", ":", "\n", "            ", "precision", "=", "right_count", "/", "predict_count", "\n", "", "if", "standard_count", ">", "0", ":", "\n", "            ", "recall", "=", "right_count", "/", "standard_count", "\n", "", "if", "precision", "+", "recall", ">", "0", ":", "\n", "            ", "f_score", "=", "precision", "*", "recall", "*", "2", "/", "(", "precision", "+", "recall", ")", "\n", "\n", "", "return", "precision", ",", "recall", ",", "f_score", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.evaluate.classification_evaluate.ClassificationEvaluator._judge_label_in": [[66, 75], ["range", "len", "len"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_judge_label_in", "(", "label_name", ",", "label_to_id_maps", ")", ":", "\n", "        ", "cnt", "=", "0", "\n", "for", "label", "in", "label_name", ":", "\n", "            ", "for", "i", "in", "range", "(", "0", ",", "len", "(", "label_to_id_maps", ")", ")", ":", "\n", "                ", "if", "label", "in", "label_to_id_maps", "[", "i", "]", ":", "\n", "                    ", "cnt", "+=", "1", "\n", "break", "\n", "", "", "", "return", "cnt", "==", "len", "(", "label_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.evaluate.classification_evaluate.ClassificationEvaluator.calculate_level_performance": [[76, 152], ["dict", "id_to_label_map.items", "dict", "dict", "dict", "id_to_label_map.items", "classification_evaluate.ClassificationEvaluator._calculate_prf", "classification_evaluate.ClassificationEvaluator._calculate_prf", "len", "len", "label_name.startswith", "TypeError"], "methods", ["home.repos.pwc.inspect_result.MemoriesJ_KAMG.NeuralNLP-NeuralClassifier-KAMG.config.Config.items", "home.repos.pwc.inspect_result.MemoriesJ_KAMG.NeuralNLP-NeuralClassifier-KAMG.config.Config.items", "home.repos.pwc.inspect_result.MemoriesJ_KAMG.evaluate.classification_evaluate.ClassificationEvaluator._calculate_prf", "home.repos.pwc.inspect_result.MemoriesJ_KAMG.evaluate.classification_evaluate.ClassificationEvaluator._calculate_prf"], ["", "def", "calculate_level_performance", "(", "\n", "self", ",", "id_to_label_map", ",", "right_count_category", ",", "predict_count_category", ",", "\n", "standard_count_category", ",", "other_text", "=", "'\u5176\u4ed6'", ",", "\n", "exclude_method", "=", "\"contain\"", ")", ":", "\n", "        ", "\"\"\"Calculate the level performance.\n        Args:\n            id_to_label_map: Label id to label name.\n            other_text: Text to judge the other label.\n            right_count_category: Right count.\n            predict_count_category: Predict count.\n            standard_count_category: Standard count.\n            exclude_method: The method to judge the other label. Can be\n                            contain(label_name contains other_text) or\n                            start(label_name start with other_text).\n        Returns:\n            precision_dict, recall_dict, fscore_dict.\n        \"\"\"", "\n", "other_label", "=", "dict", "(", ")", "\n", "for", "_", ",", "label_name", "in", "id_to_label_map", ".", "items", "(", ")", ":", "\n", "            ", "if", "exclude_method", "==", "\"contain\"", ":", "\n", "                ", "if", "other_text", "in", "label_name", ":", "\n", "                    ", "other_label", "[", "label_name", "]", "=", "1", "\n", "", "", "elif", "exclude_method", "==", "\"start\"", ":", "\n", "                ", "if", "label_name", ".", "startswith", "(", "other_text", ")", ":", "\n", "                    ", "other_label", "[", "label_name", "]", "=", "1", "\n", "", "", "else", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "\"Cannot find exclude_method: \"", "+", "\n", "exclude_method", ")", "\n", "\n", "", "", "precision_dict", "=", "dict", "(", ")", "\n", "recall_dict", "=", "dict", "(", ")", "\n", "fscore_dict", "=", "dict", "(", ")", "\n", "precision_dict", "[", "self", ".", "MACRO_AVERAGE", "]", "=", "0", "\n", "recall_dict", "[", "self", ".", "MACRO_AVERAGE", "]", "=", "0", "\n", "fscore_dict", "[", "self", ".", "MACRO_AVERAGE", "]", "=", "0", "\n", "right_total", "=", "0", "\n", "predict_total", "=", "0", "\n", "standard_total", "=", "0", "\n", "\n", "for", "_", ",", "label_name", "in", "id_to_label_map", ".", "items", "(", ")", ":", "\n", "            ", "if", "label_name", "in", "other_label", ":", "\n", "                ", "continue", "\n", "", "precision_dict", "[", "label_name", "]", ",", "recall_dict", "[", "label_name", "]", ",", "fscore_dict", "[", "label_name", "]", "=", "self", ".", "_calculate_prf", "(", "\n", "right_count_category", "[", "label_name", "]", ",", "\n", "predict_count_category", "[", "label_name", "]", ",", "\n", "standard_count_category", "[", "label_name", "]", ")", "\n", "right_total", "+=", "right_count_category", "[", "label_name", "]", "\n", "predict_total", "+=", "predict_count_category", "[", "label_name", "]", "\n", "standard_total", "+=", "standard_count_category", "[", "label_name", "]", "\n", "precision_dict", "[", "self", ".", "MACRO_AVERAGE", "]", "+=", "precision_dict", "[", "label_name", "]", "\n", "recall_dict", "[", "self", ".", "MACRO_AVERAGE", "]", "+=", "recall_dict", "[", "label_name", "]", "\n", "fscore_dict", "[", "self", ".", "MACRO_AVERAGE", "]", "+=", "fscore_dict", "[", "label_name", "]", "\n", "", "num_label_eval", "=", "len", "(", "id_to_label_map", ")", "-", "len", "(", "other_label", ")", "\n", "\n", "precision_dict", "[", "self", ".", "MACRO_AVERAGE", "]", "=", "precision_dict", "[", "self", ".", "MACRO_AVERAGE", "]", "/", "num_label_eval", "\n", "recall_dict", "[", "self", ".", "MACRO_AVERAGE", "]", "=", "recall_dict", "[", "self", ".", "MACRO_AVERAGE", "]", "/", "num_label_eval", "\n", "fscore_dict", "[", "self", ".", "MACRO_AVERAGE", "]", "=", "0", "if", "(", "recall_dict", "[", "self", ".", "MACRO_AVERAGE", "]", "+", "\n", "precision_dict", "[", "self", ".", "MACRO_AVERAGE", "]", ")", "==", "0", "else", "2", "*", "precision_dict", "[", "self", ".", "MACRO_AVERAGE", "]", "*", "recall_dict", "[", "self", ".", "MACRO_AVERAGE", "]", "/", "(", "recall_dict", "[", "self", ".", "MACRO_AVERAGE", "]", "\n", "+", "precision_dict", "[", "self", ".", "MACRO_AVERAGE", "]", ")", "\n", "\n", "right_count_category", "[", "self", ".", "MICRO_AVERAGE", "]", "=", "right_total", "\n", "predict_count_category", "[", "self", ".", "MICRO_AVERAGE", "]", "=", "predict_total", "\n", "standard_count_category", "[", "self", ".", "MICRO_AVERAGE", "]", "=", "standard_total", "\n", "\n", "(", "precision_dict", "[", "self", ".", "MICRO_AVERAGE", "]", ",", "recall_dict", "[", "self", ".", "MICRO_AVERAGE", "]", ",", "\n", "fscore_dict", "[", "self", ".", "MICRO_AVERAGE", "]", ")", "=", "self", ".", "_calculate_prf", "(", "right_total", ",", "predict_total", ",", "standard_total", ")", "\n", "return", "precision_dict", ",", "recall_dict", ",", "fscore_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.evaluate.classification_evaluate.ClassificationEvaluator.evaluate": [[153, 419], ["range", "dict.items", "range", "open", "open.close", "classification_evaluate.ClassificationEvaluator.calculate_level_performance", "precision_list.append", "recall_list.append", "fscore_list.append", "range", "dict", "dict.keys", "dict", "dict.keys", "dict", "dict.keys", "label_to_id_maps.append", "id_to_label_maps.append", "confusion_matrix_list.append", "right_category_count_list.append", "predict_category_count_list.append", "standard_category_count_list.append", "os.path.join", "classification_evaluate.ClassificationEvaluator.calculate_level_performance", "precision_list.append", "recall_list.append", "fscore_list.append", "numpy.zeros", "range", "numpy.array", "dict", "dict", "dict", "dict", "range", "dict", "dict.keys", "sep.join.split", "max", "dict", "dict", "label_name.split", "range", "classification_evaluate.ClassificationEvaluator.evaluate._init_confusion_matrix"], "methods", ["home.repos.pwc.inspect_result.MemoriesJ_KAMG.NeuralNLP-NeuralClassifier-KAMG.config.Config.items", "home.repos.pwc.inspect_result.MemoriesJ_KAMG.evaluate.classification_evaluate.ClassificationEvaluator.calculate_level_performance", "home.repos.pwc.inspect_result.MemoriesJ_KAMG.evaluate.classification_evaluate.ClassificationEvaluator.calculate_level_performance"], ["", "def", "evaluate", "(", "self", ",", "predicts", ",", "standard_label_names", "=", "None", ",", "\n", "standard_label_ids", "=", "None", ",", "label_map", "=", "None", ",", "threshold", "=", "0", ",", "top_k", "=", "3", ",", "\n", "is_prob", "=", "True", ",", "is_flat", "=", "False", ",", "is_multi", "=", "False", ",", "other_text", "=", "'\u5176\u4ed6'", ",", "debug_file_name", "=", "'probs.txt'", ",", "\n", "is_label_split", "=", "False", ",", "label_split_json_file", "=", "None", ",", "instance_remove", "=", "False", ")", ":", "\n", "        ", "\"\"\"Eval the predict result.\n        Args:\n            predicts: Predict probability or\n                      predict text label(is_prob is false)\n                      fmt:\n                      if is_multi: [[p1,p2],[p2],[p3], ...]\n                      else: [[p1], [p2], [p3], ...]\n            standard_label_names: Standard label names. If standard_label_names\n                is None, standard_label_ids should be given.\n            standard_label_ids: Standard label ids. If standard_label_ids\n                is None, standard_label_names should be given.\n            label_map: Label dict. If is_prob is false and label_map is None,\n                       label_map will be generated using labels.\n            threshold: Threshold to filter probs.\n            top_k: if is_multi true, top_k is used for truncating the predicts.\n            is_prob: The predict is prob list or label id.\n            is_flat: If true, only calculate flat result.\n                     Else, calculate hierarchical result.\n            is_multi: multi-label evaluation.\n            other_text: Label name contains other_text will not be calculate.\n            debug_file_name:\n            is_label_split: .\n            label_split_json_file: .\n            instance_remove: .\n        Returns:\n            confusion_matrix_list contain all result,\n            filtered_confusion_matrix_list contains result that max predict prob\n                is greater than threshold and will be used to calculate prf,\n            precision_list, recall_list, fscore_list,\n            right_count_list, predict_count_list, standard_count_list\n        \"\"\"", "\n", "\n", "def", "_init_confusion_matrix", "(", "label_map", ")", ":", "\n", "            ", "\"\"\"Init confusion matrix.\n            Args:\n                label_map: Label map.\n            Returns:\n                confusion_matrix.\n            \"\"\"", "\n", "confusion_matrix", "=", "dict", "(", ")", "\n", "for", "label_name", "in", "label_map", ".", "keys", "(", ")", ":", "\n", "                ", "confusion_matrix", "[", "label_name", "]", "=", "dict", "(", ")", "\n", "for", "label_name_other", "in", "label_map", ".", "keys", "(", ")", ":", "\n", "                    ", "confusion_matrix", "[", "label_name", "]", "[", "label_name_other", "]", "=", "0", "\n", "", "", "return", "confusion_matrix", "\n", "\n", "", "def", "_init_count_dict", "(", "label_map", ")", ":", "\n", "            ", "\"\"\"Init count dict.\n            Args:\n                label_map: Label map.\n            Returns:\n                count_dict.\n            \"\"\"", "\n", "count_dict", "=", "dict", "(", ")", "\n", "for", "label_name", "in", "label_map", ".", "keys", "(", ")", ":", "\n", "                ", "count_dict", "[", "label_name", "]", "=", "0", "\n", "", "return", "count_dict", "\n", "\n", "", "assert", "(", "standard_label_names", "is", "not", "None", "or", "\n", "standard_label_ids", "is", "not", "None", ")", "\n", "sep", "=", "cDataset", ".", "CLASSIFICATION_LABEL_SEPARATOR", "\n", "depth", "=", "0", "\n", "if", "not", "is_prob", "and", "label_map", "is", "None", ":", "\n", "            ", "assert", "standard_label_names", "is", "not", "None", "\n", "label_map", "=", "dict", "(", ")", "\n", "# Use standard_label_names to generate label_map", "\n", "for", "label_list", "in", "standard_label_names", ":", "\n", "                ", "for", "label", "in", "label_list", ":", "\n", "                    ", "if", "label", "not", "in", "label_map", ":", "\n", "                        ", "label_map", "[", "label", "]", "=", "len", "(", "label_map", ")", "\n", "", "", "", "", "if", "not", "is_flat", ":", "\n", "            ", "for", "label", "in", "label_map", ".", "keys", "(", ")", ":", "\n", "                ", "hierarchical_labels", "=", "label", ".", "split", "(", "sep", ")", "\n", "depth", "=", "max", "(", "len", "(", "hierarchical_labels", ")", ",", "depth", ")", "\n", "", "", "label_to_id_maps", "=", "[", "]", "\n", "id_to_label_maps", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "depth", "+", "1", ")", ":", "\n", "            ", "label_to_id_maps", ".", "append", "(", "dict", "(", ")", ")", "\n", "id_to_label_maps", ".", "append", "(", "dict", "(", ")", ")", "\n", "", "for", "label_name", ",", "label_id", "in", "label_map", ".", "items", "(", ")", ":", "\n", "            ", "label_to_id_maps", "[", "0", "]", "[", "label_name", "]", "=", "label_id", "\n", "id_to_label_maps", "[", "0", "]", "[", "label_id", "]", "=", "label_name", "\n", "if", "not", "is_flat", ":", "\n", "                ", "hierarchical_labels", "=", "label_name", ".", "split", "(", "sep", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "hierarchical_labels", ")", "+", "1", ")", ":", "\n", "                    ", "label", "=", "sep", ".", "join", "(", "hierarchical_labels", "[", ":", "i", "]", ")", "\n", "if", "label", "not", "in", "label_to_id_maps", "[", "i", "]", ":", "\n", "                        ", "index", "=", "len", "(", "label_to_id_maps", "[", "i", "]", ")", "\n", "label_to_id_maps", "[", "i", "]", "[", "label", "]", "=", "index", "\n", "id_to_label_maps", "[", "i", "]", "[", "index", "]", "=", "label", "\n", "\n", "", "", "", "", "confusion_matrix_list", "=", "[", "]", "\n", "right_category_count_list", "=", "[", "]", "\n", "predict_category_count_list", "=", "[", "]", "\n", "standard_category_count_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "depth", "+", "1", ")", ":", "\n", "            ", "confusion_matrix_list", ".", "append", "(", "\n", "_init_confusion_matrix", "(", "label_to_id_maps", "[", "i", "]", ")", ")", "\n", "right_category_count_list", ".", "append", "(", "\n", "_init_count_dict", "(", "label_to_id_maps", "[", "i", "]", ")", ")", "\n", "predict_category_count_list", ".", "append", "(", "\n", "_init_count_dict", "(", "label_to_id_maps", "[", "i", "]", ")", ")", "\n", "standard_category_count_list", ".", "append", "(", "\n", "_init_count_dict", "(", "label_to_id_maps", "[", "i", "]", ")", ")", "\n", "\n", "", "line_count", "=", "0", "\n", "debug_file", "=", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "eval_dir", ",", "debug_file_name", ")", ",", "\"w\"", ",", "encoding", "=", "cDataset", ".", "CHARSET", ")", "\n", "for", "predict", "in", "predicts", ":", "\n", "            ", "if", "is_prob", ":", "\n", "                ", "prob_np", "=", "np", ".", "array", "(", "predict", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "if", "not", "is_multi", ":", "\n", "                    ", "predict_label_ids", "=", "[", "prob_np", ".", "argmax", "(", ")", "]", "\n", "", "else", ":", "\n", "                    ", "predict_label_ids", "=", "[", "]", "\n", "predict_label_idx", "=", "np", ".", "argsort", "(", "-", "prob_np", ")", "\n", "for", "j", "in", "range", "(", "0", ",", "top_k", ")", ":", "\n", "                        ", "if", "prob_np", "[", "predict_label_idx", "[", "j", "]", "]", ">", "threshold", ":", "\n", "                            ", "predict_label_ids", ".", "append", "(", "predict_label_idx", "[", "j", "]", ")", "\n", "\n", "", "", "", "predict_label_name", "=", "[", "id_to_label_maps", "[", "0", "]", "[", "predict_label_id", "]", "for", "predict_label_id", "in", "predict_label_ids", "]", "\n", "debug_file", ".", "write", "(", "json", ".", "dumps", "(", "prob_np", ".", "tolist", "(", ")", ")", ")", "\n", "debug_file", ".", "write", "(", "\"\\n\"", ")", "\n", "", "else", ":", "\n", "                ", "predict_label_name", "=", "predict", "\n", "\n", "", "if", "standard_label_names", "is", "not", "None", ":", "\n", "                ", "standard_label_name", "=", "standard_label_names", "[", "line_count", "]", "\n", "", "else", ":", "\n", "                ", "standard_label_name", "=", "[", "id_to_label_maps", "[", "0", "]", "[", "standard_label_ids", "[", "line_count", "]", "[", "i", "]", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "standard_label_ids", "[", "line_count", "]", ")", ")", "]", "\n", "", "if", "(", "not", "self", ".", "_judge_label_in", "(", "predict_label_name", ",", "label_to_id_maps", ")", ")", "or", "(", "not", "self", ".", "_judge_label_in", "(", "standard_label_name", ",", "label_to_id_maps", ")", ")", ":", "\n", "                ", "line_count", "+=", "1", "\n", "continue", "\n", "", "for", "std_name", "in", "standard_label_name", ":", "\n", "                ", "for", "pred_name", "in", "predict_label_name", ":", "\n", "                    ", "confusion_matrix_list", "[", "0", "]", "[", "std_name", "]", "[", "pred_name", "]", "+=", "1", "\n", "", "", "for", "pred_name", "in", "predict_label_name", ":", "\n", "                ", "predict_category_count_list", "[", "0", "]", "[", "pred_name", "]", "+=", "1", "\n", "", "for", "std_name", "in", "standard_label_name", ":", "\n", "                ", "standard_category_count_list", "[", "0", "]", "[", "std_name", "]", "+=", "1", "\n", "for", "pred_name", "in", "predict_label_name", ":", "\n", "                    ", "if", "std_name", "==", "pred_name", ":", "\n", "                        ", "right_category_count_list", "[", "0", "]", "[", "pred_name", "]", "+=", "1", "\n", "\n", "", "", "", "if", "not", "is_flat", ":", "\n", "                ", "standard_hierarchical_labels", "=", "[", "std_name", ".", "split", "(", "sep", ")", "for", "std_name", "in", "standard_label_name", "]", "\n", "predict_hierarchical_labels", "=", "[", "pred_name", ".", "split", "(", "sep", ")", "for", "pred_name", "in", "predict_label_name", "]", "\n", "\n", "standard_label_map", "=", "{", "}", "\n", "predict_label_map", "=", "{", "}", "\n", "for", "std_label", "in", "standard_hierarchical_labels", ":", "\n", "                    ", "for", "i", "in", "range", "(", "0", ",", "len", "(", "std_label", ")", ")", ":", "\n", "                        ", "if", "i", "+", "1", "not", "in", "standard_label_map", ":", "\n", "                            ", "standard_label_map", "[", "i", "+", "1", "]", "=", "set", "(", ")", "\n", "", "standard_label_map", "[", "i", "+", "1", "]", ".", "add", "(", "sep", ".", "join", "(", "std_label", "[", ":", "i", "+", "1", "]", ")", ")", "\n", "", "", "for", "pred_label", "in", "predict_hierarchical_labels", ":", "\n", "                    ", "for", "i", "in", "range", "(", "0", ",", "len", "(", "pred_label", ")", ")", ":", "\n", "                        ", "if", "i", "+", "1", "not", "in", "predict_label_map", ":", "\n", "                            ", "predict_label_map", "[", "i", "+", "1", "]", "=", "set", "(", ")", "\n", "", "predict_label_map", "[", "i", "+", "1", "]", ".", "add", "(", "sep", ".", "join", "(", "pred_label", "[", ":", "i", "+", "1", "]", ")", ")", "\n", "", "", "for", "level", ",", "std_label_set", "in", "standard_label_map", ".", "items", "(", ")", ":", "\n", "                    ", "for", "std_label", "in", "std_label_set", ":", "\n", "                        ", "standard_category_count_list", "[", "level", "]", "[", "std_label", "]", "+=", "1", "\n", "", "", "for", "level", ",", "pred_label_set", "in", "predict_label_map", ".", "items", "(", ")", ":", "\n", "                    ", "for", "pred_label", "in", "pred_label_set", ":", "\n", "                        ", "predict_category_count_list", "[", "level", "]", "[", "pred_label", "]", "+=", "1", "\n", "", "", "for", "level", ",", "std_label_set", "in", "standard_label_map", ".", "items", "(", ")", ":", "\n", "                    ", "for", "std_label", "in", "std_label_set", ":", "\n", "                        ", "if", "level", "in", "predict_label_map", ":", "\n", "                            ", "for", "pred_label", "in", "predict_label_map", "[", "level", "]", ":", "\n", "                                ", "confusion_matrix_list", "[", "level", "]", "[", "std_label", "]", "[", "pred_label", "]", "+=", "1", "\n", "if", "std_label", "==", "pred_label", ":", "\n", "                                    ", "right_category_count_list", "[", "level", "]", "[", "pred_label", "]", "+=", "1", "\n", "\n", "", "", "", "", "", "", "line_count", "+=", "1", "\n", "", "debug_file", ".", "close", "(", ")", "\n", "precision_list", "=", "[", "]", "\n", "recall_list", "=", "[", "]", "\n", "fscore_list", "=", "[", "]", "\n", "precision_dict", ",", "recall_dict", ",", "fscore_dict", "=", "self", ".", "calculate_level_performance", "(", "\n", "id_to_label_maps", "[", "0", "]", ",", "right_category_count_list", "[", "0", "]", ",", "\n", "predict_category_count_list", "[", "0", "]", ",", "standard_category_count_list", "[", "0", "]", ",", "\n", "exclude_method", "=", "\"start\"", ")", "\n", "\n", "precision_list", ".", "append", "(", "precision_dict", ")", "\n", "recall_list", ".", "append", "(", "recall_dict", ")", "\n", "fscore_list", ".", "append", "(", "fscore_dict", ")", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "depth", "+", "1", ")", ":", "\n", "            ", "precision_dict", ",", "recall_dict", ",", "fscore_dict", "=", "self", ".", "calculate_level_performance", "(", "\n", "id_to_label_maps", "[", "i", "]", ",", "right_category_count_list", "[", "i", "]", ",", "\n", "predict_category_count_list", "[", "i", "]", ",", "\n", "standard_category_count_list", "[", "i", "]", ",", "other_text", ")", "\n", "precision_list", ".", "append", "(", "precision_dict", ")", "\n", "recall_list", ".", "append", "(", "recall_dict", ")", "\n", "fscore_list", ".", "append", "(", "fscore_dict", ")", "\n", "\n", "", "self", ".", "confusion_matrix_list", ",", "self", ".", "precision_list", ",", "self", ".", "recall_list", ",", "self", ".", "fscore_list", ",", "self", ".", "right_list", ",", "self", ".", "predict_list", ",", "self", ".", "standard_list", "=", "(", "\n", "confusion_matrix_list", ",", "precision_list", ",", "recall_list", ",", "fscore_list", ",", "\n", "right_category_count_list", ",", "predict_category_count_list", ",", "\n", "standard_category_count_list", ")", "\n", "\n", "if", "is_flat", ":", "\n", "            ", "ground_true", "=", "np", ".", "zeros", "(", "(", "len", "(", "predicts", ")", ",", "len", "(", "label_map", ")", ")", ")", "\n", "for", "row", "in", "range", "(", "len", "(", "predicts", ")", ")", ":", "\n", "                ", "ground_true", "[", "row", ",", "standard_label_ids", "[", "row", "]", "]", "=", "1.", "\n", "", "predicts", "=", "np", ".", "array", "(", "predicts", ")", "\n", "\n", "pak", "=", "dict", "(", ")", "\n", "rak", "=", "dict", "(", ")", "\n", "rpak", "=", "dict", "(", ")", "\n", "ndcgak", "=", "dict", "(", ")", "\n", "\n", "assert", "not", "(", "is_label_split", "is", "True", "and", "label_split_json_file", "is", "None", ")", "\n", "\n", "if", "is_label_split", ":", "\n", "                ", "with", "open", "(", "label_split_json_file", ",", "mode", "=", "'r'", ")", "as", "f", ":", "\n", "                    ", "label_split_dict", "=", "json", ".", "loads", "(", "f", ".", "read", "(", ")", ")", "\n", "\n", "", "", "for", "tmp_k", "in", "range", "(", "1", ",", "top_k", "+", "1", ")", ":", "\n", "                ", "if", "is_label_split", ":", "\n", "                    ", "pak", "[", "tmp_k", "]", "=", "dict", "(", ")", "\n", "rak", "[", "tmp_k", "]", "=", "dict", "(", ")", "\n", "rpak", "[", "tmp_k", "]", "=", "dict", "(", ")", "\n", "ndcgak", "[", "tmp_k", "]", "=", "dict", "(", ")", "\n", "\n", "for", "group", "in", "label_split_dict", ":", "\n", "                        ", "group_indices", "=", "[", "label_map", "[", "label", "]", "for", "label", "in", "label_split_dict", "[", "group", "]", "]", "\n", "\n", "if", "instance_remove", ":", "\n", "                            ", "row_mask", "=", "np", ".", "sum", "(", "ground_true", "[", ":", ",", "group_indices", "]", ",", "axis", "=", "1", ")", ".", "astype", "(", "np", ".", "bool", ")", "\n", "tmp_group_true", "=", "ground_true", "[", "row_mask", "]", "[", ":", ",", "group_indices", "]", "\n", "tmp_group_predicts", "=", "predicts", "[", "row_mask", "]", "[", ":", ",", "group_indices", "]", "\n", "", "else", ":", "\n", "                            ", "tmp_group_true", "=", "ground_true", "[", ":", ",", "group_indices", "]", "\n", "tmp_group_predicts", "=", "predicts", "[", ":", ",", "group_indices", "]", "\n", "\n", "", "pak", "[", "tmp_k", "]", "[", "group", "]", "=", "self", ".", "get_precision_at_k", "(", "tmp_group_true", ",", "tmp_group_predicts", ",", "tmp_k", ")", "\n", "rak", "[", "tmp_k", "]", "[", "group", "]", "=", "self", ".", "get_recall_at_k", "(", "tmp_group_true", ",", "tmp_group_predicts", ",", "tmp_k", ")", "\n", "rpak", "[", "tmp_k", "]", "[", "group", "]", "=", "self", ".", "get_r_precision_at_k", "(", "tmp_group_true", ",", "tmp_group_predicts", ",", "tmp_k", ")", "\n", "ndcgak", "[", "tmp_k", "]", "[", "group", "]", "=", "self", ".", "get_ndcg_at_k", "(", "tmp_group_true", ",", "tmp_group_predicts", ",", "tmp_k", ")", "\n", "\n", "", "", "pak", "[", "tmp_k", "]", "[", "\"overall\"", "]", "=", "self", ".", "get_precision_at_k", "(", "ground_true", ",", "predicts", ",", "tmp_k", ")", "\n", "rak", "[", "tmp_k", "]", "[", "\"overall\"", "]", "=", "self", ".", "get_recall_at_k", "(", "ground_true", ",", "predicts", ",", "tmp_k", ")", "\n", "rpak", "[", "tmp_k", "]", "[", "\"overall\"", "]", "=", "self", ".", "get_r_precision_at_k", "(", "ground_true", ",", "predicts", ",", "tmp_k", ")", "\n", "ndcgak", "[", "tmp_k", "]", "[", "\"overall\"", "]", "=", "self", ".", "get_ndcg_at_k", "(", "ground_true", ",", "predicts", ",", "tmp_k", ")", "\n", "\n", "", "return", "(", "confusion_matrix_list", ",", "precision_list", ",", "recall_list", ",", "fscore_list", ",", "\n", "right_category_count_list", ",", "predict_category_count_list", ",", "\n", "standard_category_count_list", ",", "pak", ",", "rak", ",", "rpak", ",", "ndcgak", ")", "\n", "\n", "", "return", "(", "confusion_matrix_list", ",", "precision_list", ",", "recall_list", ",", "fscore_list", ",", "\n", "right_category_count_list", ",", "predict_category_count_list", ",", "\n", "standard_category_count_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.evaluate.classification_evaluate.ClassificationEvaluator.save_confusion_matrix": [[420, 440], ["open", "cm_file.write", "sorted", "cm_file.write", "sorted", "confusion_matrix.keys", "cm_file.write", "confusion_matrix.keys", "cm_file.write", "sorted", "cm_file.write", "confusion_matrix.keys", "cm_file.write", "str"], "methods", ["home.repos.pwc.inspect_result.MemoriesJ_KAMG.classification.attentive_convolution.AttentionType.str"], ["", "@", "staticmethod", "\n", "def", "save_confusion_matrix", "(", "file_name", ",", "confusion_matrix", ")", ":", "\n", "        ", "\"\"\"Save confusion matrix\n        Args:\n            file_name: File to save to.\n            confusion_matrix: Confusion Matrix.\n        Returns:\n        \"\"\"", "\n", "with", "open", "(", "file_name", ",", "\"w\"", ",", "encoding", "=", "cDataset", ".", "CHARSET", ")", "as", "cm_file", ":", "\n", "            ", "cm_file", ".", "write", "(", "\"\\t\"", ")", "\n", "for", "category_fist", "in", "sorted", "(", "confusion_matrix", ".", "keys", "(", ")", ")", ":", "\n", "                ", "cm_file", ".", "write", "(", "category_fist", "+", "\"\\t\"", ")", "\n", "", "cm_file", ".", "write", "(", "\"\\n\"", ")", "\n", "for", "category_fist", "in", "sorted", "(", "confusion_matrix", ".", "keys", "(", ")", ")", ":", "\n", "                ", "cm_file", ".", "write", "(", "category_fist", "+", "\"\\t\"", ")", "\n", "for", "category_second", "in", "sorted", "(", "confusion_matrix", ".", "keys", "(", ")", ")", ":", "\n", "                    ", "cm_file", ".", "write", "(", "\n", "str", "(", "confusion_matrix", "[", "category_fist", "]", "[", "\n", "category_second", "]", ")", "+", "\"\\t\"", ")", "\n", "", "cm_file", ".", "write", "(", "\"\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.evaluate.classification_evaluate.ClassificationEvaluator.save_prf": [[441, 482], ["open", "prf_file.write", "prf_file.write", "prf_file.write", "classification_evaluate.ClassificationEvaluator.save_prf._format"], "methods", ["None"], ["", "", "", "def", "save_prf", "(", "self", ",", "file_name", ",", "precision_category", ",", "recall_category", ",", "\n", "fscore_category", ",", "right_category", ",", "predict_category", ",", "\n", "standard_category", ")", ":", "\n", "        ", "\"\"\"Save precision, recall, fscore\n        Args:\n            file_name: File to save to.\n            precision_category: Precision dict.\n            recall_category: Recall dict.\n            fscore_category: Fscore dict.\n            right_category: Right dict.\n            predict_category: Predict dict.\n            standard_category: Standard dict.\n        Returns:\n        \"\"\"", "\n", "\n", "def", "_format", "(", "category", ")", ":", "\n", "            ", "\"\"\"Format evaluation string.\n            Args:\n                category: Category evaluation to format.\n            Returns:\n            \"\"\"", "\n", "if", "category", "==", "self", ".", "MACRO_AVERAGE", ":", "\n", "                ", "return", "\"%s, precision: %f, recall: %f, fscore: %f, \"", "%", "(", "\n", "category", ",", "precision_category", "[", "category", "]", ",", "\n", "recall_category", "[", "category", "]", ",", "fscore_category", "[", "category", "]", ")", "\n", "", "return", "\"%s, precision: %f, recall: %f, fscore: %f, \"", "\"right_count: %d, predict_count: %d, \"", "\"standard_count: %d\"", "%", "(", "\n", "category", ",", "precision_category", "[", "category", "]", ",", "\n", "recall_category", "[", "category", "]", ",", "fscore_category", "[", "category", "]", ",", "\n", "right_category", "[", "category", "]", ",", "predict_category", "[", "category", "]", ",", "\n", "standard_category", "[", "category", "]", ")", "\n", "\n", "", "with", "open", "(", "file_name", ",", "\"w\"", ",", "encoding", "=", "cDataset", ".", "CHARSET", ")", "as", "prf_file", ":", "\n", "            ", "prf_file", ".", "write", "(", "_format", "(", "self", ".", "MACRO_AVERAGE", ")", "+", "\"\\n\"", ")", "\n", "prf_file", ".", "write", "(", "_format", "(", "self", ".", "MICRO_AVERAGE", ")", "+", "\"\\n\"", ")", "\n", "prf_file", ".", "write", "(", "\"\\n\"", ")", "\n", "for", "category", "in", "precision_category", ":", "\n", "                ", "if", "category", "!=", "self", ".", "MICRO_AVERAGE", "and", "category", "!=", "self", ".", "MACRO_AVERAGE", ":", "\n", "                    ", "prf_file", ".", "write", "(", "_format", "(", "category", ")", "+", "\"\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.evaluate.classification_evaluate.ClassificationEvaluator.save": [[483, 499], ["enumerate", "classification_evaluate.ClassificationEvaluator.save_confusion_matrix", "classification_evaluate.ClassificationEvaluator.save_prf"], "methods", ["home.repos.pwc.inspect_result.MemoriesJ_KAMG.evaluate.classification_evaluate.ClassificationEvaluator.save_confusion_matrix", "home.repos.pwc.inspect_result.MemoriesJ_KAMG.evaluate.classification_evaluate.ClassificationEvaluator.save_prf"], ["", "", "", "", "def", "save", "(", "self", ")", ":", "\n", "        ", "\"\"\"Save the latest evaluation.\n        \"\"\"", "\n", "for", "i", ",", "confusion_matrix", "in", "enumerate", "(", "self", ".", "confusion_matrix_list", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "eval_name", "=", "\"all\"", "\n", "", "else", ":", "\n", "                ", "eval_name", "=", "\"level_%s\"", "%", "i", "\n", "", "self", ".", "save_confusion_matrix", "(", "\n", "self", ".", "eval_dir", "+", "\"/\"", "+", "eval_name", "+", "\"_confusion_matrix\"", ",", "\n", "confusion_matrix", ")", "\n", "self", ".", "save_prf", "(", "\n", "self", ".", "eval_dir", "+", "\"/\"", "+", "eval_name", "+", "\"_prf\"", ",", "\n", "self", ".", "precision_list", "[", "i", "]", ",", "self", ".", "recall_list", "[", "i", "]", ",", "\n", "self", ".", "fscore_list", "[", "i", "]", ",", "self", ".", "right_list", "[", "i", "]", ",", "\n", "self", ".", "predict_list", "[", "i", "]", ",", "self", ".", "standard_list", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.evaluate.classification_evaluate.ClassificationEvaluator.ranking_precision_score": [[500, 529], ["numpy.unique", "numpy.take", "numpy.sum", "len", "ValueError", "numpy.argsort", "float", "len", "ValueError"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "ranking_precision_score", "(", "y_true", ",", "y_score", ",", "k", "=", "10", ")", ":", "\n", "        ", "\"\"\"Precision at rank k\n        Parameters\n        ----------\n        y_true : array-like, shape = [n_samples]\n            Ground truth (true relevance labels).\n        y_score : array-like, shape = [n_samples]\n            Predicted scores.\n        k : int\n            Rank.\n        Returns\n        -------\n        precision @k : float\n        \"\"\"", "\n", "unique_y", "=", "np", ".", "unique", "(", "y_true", ")", "\n", "\n", "if", "len", "(", "unique_y", ")", "==", "1", ":", "\n", "            ", "return", "ValueError", "(", "\"The score cannot be approximated.\"", ")", "\n", "", "elif", "len", "(", "unique_y", ")", ">", "2", ":", "\n", "            ", "raise", "ValueError", "(", "\"Only supported for two relevance levels.\"", ")", "\n", "\n", "", "pos_label", "=", "unique_y", "[", "1", "]", "\n", "\n", "order", "=", "np", ".", "argsort", "(", "y_score", ")", "[", ":", ":", "-", "1", "]", "\n", "y_true", "=", "np", ".", "take", "(", "y_true", ",", "order", "[", ":", "k", "]", ")", "\n", "n_relevant", "=", "np", ".", "sum", "(", "y_true", "==", "pos_label", ")", "\n", "\n", "return", "float", "(", "n_relevant", ")", "/", "k", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.evaluate.classification_evaluate.ClassificationEvaluator.get_precision_at_k": [[530, 551], ["zip", "numpy.mean", "numpy.sum", "p_ks.append", "classification_evaluate.ClassificationEvaluator.ranking_precision_score"], "methods", ["home.repos.pwc.inspect_result.MemoriesJ_KAMG.evaluate.classification_evaluate.ClassificationEvaluator.ranking_precision_score"], ["", "def", "get_precision_at_k", "(", "self", ",", "y_true", ",", "y_score", ",", "k", "=", "10", ")", ":", "\n", "        ", "\"\"\"Mean precision at rank k\n        Parameters\n        ----------\n        y_true : array-like, shape = [n_samples]\n            Ground truth (true relevance labels).\n        y_score : array-like, shape = [n_samples]\n            Predicted scores.\n        k : int\n            Rank.\n        Returns\n        -------\n        mean precision @k : float\n        \"\"\"", "\n", "\n", "p_ks", "=", "[", "]", "\n", "for", "y_t", ",", "y_s", "in", "zip", "(", "y_true", ",", "y_score", ")", ":", "\n", "            ", "if", "np", ".", "sum", "(", "y_t", "==", "1", ")", ":", "\n", "                ", "p_ks", ".", "append", "(", "self", ".", "ranking_precision_score", "(", "y_t", ",", "y_s", ",", "k", "=", "k", ")", ")", "\n", "\n", "", "", "return", "np", ".", "mean", "(", "p_ks", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.evaluate.classification_evaluate.ClassificationEvaluator.ranking_recall_score": [[552, 583], ["numpy.unique", "numpy.sum", "numpy.take", "numpy.sum", "len", "ValueError", "numpy.argsort", "float", "len", "ValueError"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "ranking_recall_score", "(", "y_true", ",", "y_score", ",", "k", "=", "10", ")", ":", "\n", "# https://ils.unc.edu/courses/2013_spring/inls509_001/lectures/10-EvaluationMetrics.pdf", "\n", "        ", "\"\"\"Recall at rank k\n        Parameters\n        ----------\n        y_true : array-like, shape = [n_samples]\n            Ground truth (true relevance labels).\n        y_score : array-like, shape = [n_samples]\n            Predicted scores.\n        k : int\n            Rank.\n        Returns\n        -------\n        precision @k : float\n        \"\"\"", "\n", "unique_y", "=", "np", ".", "unique", "(", "y_true", ")", "\n", "\n", "if", "len", "(", "unique_y", ")", "==", "1", ":", "\n", "            ", "return", "ValueError", "(", "\"The score cannot be approximated.\"", ")", "\n", "", "elif", "len", "(", "unique_y", ")", ">", "2", ":", "\n", "            ", "raise", "ValueError", "(", "\"Only supported for two relevance levels.\"", ")", "\n", "\n", "", "pos_label", "=", "unique_y", "[", "1", "]", "\n", "n_pos", "=", "np", ".", "sum", "(", "y_true", "==", "pos_label", ")", "\n", "\n", "order", "=", "np", ".", "argsort", "(", "y_score", ")", "[", ":", ":", "-", "1", "]", "\n", "y_true", "=", "np", ".", "take", "(", "y_true", ",", "order", "[", ":", "k", "]", ")", "\n", "n_relevant", "=", "np", ".", "sum", "(", "y_true", "==", "pos_label", ")", "\n", "\n", "return", "float", "(", "n_relevant", ")", "/", "n_pos", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.evaluate.classification_evaluate.ClassificationEvaluator.get_recall_at_k": [[584, 605], ["zip", "numpy.mean", "numpy.sum", "r_ks.append", "classification_evaluate.ClassificationEvaluator.ranking_recall_score"], "methods", ["home.repos.pwc.inspect_result.MemoriesJ_KAMG.evaluate.classification_evaluate.ClassificationEvaluator.ranking_recall_score"], ["", "def", "get_recall_at_k", "(", "self", ",", "y_true", ",", "y_score", ",", "k", "=", "10", ")", ":", "\n", "        ", "\"\"\"Mean recall at rank k\n        Parameters\n        ----------\n        y_true : array-like, shape = [n_samples]\n            Ground truth (true relevance labels).\n        y_score : array-like, shape = [n_samples]\n            Predicted scores.\n        k : int\n            Rank.\n        Returns\n        -------\n        mean recall @k : float\n        \"\"\"", "\n", "\n", "r_ks", "=", "[", "]", "\n", "for", "y_t", ",", "y_s", "in", "zip", "(", "y_true", ",", "y_score", ")", ":", "\n", "            ", "if", "np", ".", "sum", "(", "y_t", "==", "1", ")", ":", "\n", "                ", "r_ks", ".", "append", "(", "self", ".", "ranking_recall_score", "(", "y_t", ",", "y_s", ",", "k", "=", "k", ")", ")", "\n", "\n", "", "", "return", "np", ".", "mean", "(", "r_ks", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.evaluate.classification_evaluate.ClassificationEvaluator.ranking_rprecision_score": [[606, 637], ["numpy.unique", "numpy.sum", "numpy.take", "numpy.sum", "len", "ValueError", "numpy.argsort", "float", "min", "len", "ValueError"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "ranking_rprecision_score", "(", "y_true", ",", "y_score", ",", "k", "=", "10", ")", ":", "\n", "        ", "\"\"\"Precision at rank k\n        Parameters\n        ----------\n        y_true : array-like, shape = [n_samples]\n            Ground truth (true relevance labels).\n        y_score : array-like, shape = [n_samples]\n            Predicted scores.\n        k : int\n            Rank.\n        Returns\n        -------\n        precision @k : float\n        \"\"\"", "\n", "unique_y", "=", "np", ".", "unique", "(", "y_true", ")", "\n", "\n", "if", "len", "(", "unique_y", ")", "==", "1", ":", "\n", "            ", "return", "ValueError", "(", "\"The score cannot be approximated.\"", ")", "\n", "", "elif", "len", "(", "unique_y", ")", ">", "2", ":", "\n", "            ", "raise", "ValueError", "(", "\"Only supported for two relevance levels.\"", ")", "\n", "\n", "", "pos_label", "=", "unique_y", "[", "1", "]", "\n", "n_pos", "=", "np", ".", "sum", "(", "y_true", "==", "pos_label", ")", "\n", "\n", "order", "=", "np", ".", "argsort", "(", "y_score", ")", "[", ":", ":", "-", "1", "]", "\n", "y_true", "=", "np", ".", "take", "(", "y_true", ",", "order", "[", ":", "k", "]", ")", "\n", "n_relevant", "=", "np", ".", "sum", "(", "y_true", "==", "pos_label", ")", "\n", "\n", "# Divide by min(n_pos, k) such that the best achievable score is always 1.0.", "\n", "return", "float", "(", "n_relevant", ")", "/", "min", "(", "k", ",", "n_pos", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.evaluate.classification_evaluate.ClassificationEvaluator.get_r_precision_at_k": [[638, 659], ["zip", "numpy.mean", "numpy.sum", "p_ks.append", "classification_evaluate.ClassificationEvaluator.ranking_rprecision_score"], "methods", ["home.repos.pwc.inspect_result.MemoriesJ_KAMG.evaluate.classification_evaluate.ClassificationEvaluator.ranking_rprecision_score"], ["", "def", "get_r_precision_at_k", "(", "self", ",", "y_true", ",", "y_score", ",", "k", "=", "10", ")", ":", "\n", "        ", "\"\"\"Mean precision at rank k\n        Parameters\n        ----------\n        y_true : array-like, shape = [n_samples]\n            Ground truth (true relevance labels).\n        y_score : array-like, shape = [n_samples]\n            Predicted scores.\n        k : int\n            Rank.\n        Returns\n        -------\n        mean precision @k : float\n        \"\"\"", "\n", "\n", "p_ks", "=", "[", "]", "\n", "for", "y_t", ",", "y_s", "in", "zip", "(", "y_true", ",", "y_score", ")", ":", "\n", "            ", "if", "np", ".", "sum", "(", "y_t", "==", "1", ")", ":", "\n", "                ", "p_ks", ".", "append", "(", "self", ".", "ranking_rprecision_score", "(", "y_t", ",", "y_s", ",", "k", "=", "k", ")", ")", "\n", "\n", "", "", "return", "np", ".", "mean", "(", "p_ks", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.evaluate.classification_evaluate.ClassificationEvaluator.dcg_score": [[660, 690], ["numpy.take", "numpy.log2", "numpy.sum", "numpy.argsort", "ValueError", "numpy.arange", "len"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "dcg_score", "(", "y_true", ",", "y_score", ",", "k", "=", "10", ",", "gains", "=", "\"exponential\"", ")", ":", "\n", "        ", "\"\"\"Discounted cumulative gain (DCG) at rank k\n        Parameters\n        ----------\n        y_true : array-like, shape = [n_samples]\n            Ground truth (true relevance labels).\n        y_score : array-like, shape = [n_samples]\n            Predicted scores.\n        k : int\n            Rank.\n        gains : str\n            Whether gains should be \"exponential\" (default) or \"linear\".\n        Returns\n        -------\n        DCG @k : float\n        \"\"\"", "\n", "order", "=", "np", ".", "argsort", "(", "y_score", ")", "[", ":", ":", "-", "1", "]", "\n", "y_true", "=", "np", ".", "take", "(", "y_true", ",", "order", "[", ":", "k", "]", ")", "\n", "\n", "if", "gains", "==", "\"exponential\"", ":", "\n", "            ", "gains", "=", "2", "**", "y_true", "-", "1", "\n", "", "elif", "gains", "==", "\"linear\"", ":", "\n", "            ", "gains", "=", "y_true", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid gains option.\"", ")", "\n", "\n", "# highest rank is 1 so +2 instead of +1", "\n", "", "discounts", "=", "np", ".", "log2", "(", "np", ".", "arange", "(", "len", "(", "y_true", ")", ")", "+", "2", ")", "\n", "return", "np", ".", "sum", "(", "gains", "/", "discounts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.evaluate.classification_evaluate.ClassificationEvaluator.ndcg_score": [[691, 710], ["classification_evaluate.ClassificationEvaluator.dcg_score", "classification_evaluate.ClassificationEvaluator.dcg_score"], "methods", ["home.repos.pwc.inspect_result.MemoriesJ_KAMG.evaluate.classification_evaluate.ClassificationEvaluator.dcg_score", "home.repos.pwc.inspect_result.MemoriesJ_KAMG.evaluate.classification_evaluate.ClassificationEvaluator.dcg_score"], ["", "def", "ndcg_score", "(", "self", ",", "y_true", ",", "y_score", ",", "k", "=", "10", ",", "gains", "=", "\"exponential\"", ")", ":", "\n", "        ", "\"\"\"Normalized discounted cumulative gain (NDCG) at rank k\n        Parameters\n        ----------\n        y_true : array-like, shape = [n_samples]\n            Ground truth (true relevance labels).\n        y_score : array-like, shape = [n_samples]\n            Predicted scores.\n        k : int\n            Rank.\n        gains : str\n            Whether gains should be \"exponential\" (default) or \"linear\".\n        Returns\n        -------\n        NDCG @k : float\n        \"\"\"", "\n", "best", "=", "self", ".", "dcg_score", "(", "y_true", ",", "y_true", ",", "k", ",", "gains", ")", "\n", "actual", "=", "self", ".", "dcg_score", "(", "y_true", ",", "y_score", ",", "k", ",", "gains", ")", "\n", "return", "actual", "/", "best", "\n", "\n"]], "home.repos.pwc.inspect_result.MemoriesJ_KAMG.evaluate.classification_evaluate.ClassificationEvaluator.get_ndcg_at_k": [[711, 735], ["zip", "numpy.mean", "numpy.sum", "ndcg_s.append", "classification_evaluate.ClassificationEvaluator.ndcg_score"], "methods", ["home.repos.pwc.inspect_result.MemoriesJ_KAMG.evaluate.classification_evaluate.ClassificationEvaluator.ndcg_score"], ["", "def", "get_ndcg_at_k", "(", "self", ",", "y_true", ",", "y_predict_score", ",", "k", ",", "gains", "=", "\"exponential\"", ")", ":", "\n", "\n", "        ", "\"\"\"Normalized discounted cumulative gain (NDCG) at rank k\n            Parameters\n            ----------\n            y_true : array-like, shape = [n_samples]\n                Ground truth (true relevance labels).\n            y_predict_score : array-like, shape = [n_samples]\n                Predicted scores.\n            k : int\n                Rank.\n            gains : str\n                Whether gains should be \"exponential\" (default) or \"linear\".\n            Returns\n            -------\n            Mean NDCG @k : float\n            \"\"\"", "\n", "\n", "ndcg_s", "=", "[", "]", "\n", "for", "y_t", ",", "y_s", "in", "zip", "(", "y_true", ",", "y_predict_score", ")", ":", "\n", "            ", "if", "np", ".", "sum", "(", "y_t", "==", "1", ")", ":", "\n", "                ", "ndcg_s", ".", "append", "(", "self", ".", "ndcg_score", "(", "y_t", ",", "y_s", ",", "k", "=", "k", ",", "gains", "=", "gains", ")", ")", "\n", "\n", "", "", "return", "np", ".", "mean", "(", "ndcg_s", ")", "\n", "", "", ""]]}