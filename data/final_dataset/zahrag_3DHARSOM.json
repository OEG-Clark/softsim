{"home.repos.pwc.inspect_result.zahrag_3DHARSOM.codes.SNN.SNN.__init__": [[13, 27], ["numpy.random.rand", "numpy.linalg.norm", "numpy.expand_dims"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "learning", ",", "outputsize_x", ",", "outputsize_y", ",", "inputsize", ")", ":", "\n", "\n", "        ", "self", ".", "name", "=", "'SNN'", "\n", "self", ".", "learning", "=", "learning", "\n", "self", ".", "outputsize_x", "=", "outputsize_x", "\n", "self", ".", "outputsize_y", "=", "outputsize_y", "\n", "self", ".", "inputsize", "=", "inputsize", "\n", "self", ".", "normalize_input", "=", "True", "\n", "self", ".", "beta", "=", "0.35", "\n", "self", ".", "weights", "=", "np", ".", "random", ".", "rand", "(", "outputsize_x", ",", "outputsize_y", ",", "inputsize", ")", "# Rows, Columns, Depth", "\n", "\n", "# Normalize native weights", "\n", "w_n", "=", "LA", ".", "norm", "(", "self", ".", "weights", ",", "axis", "=", "2", ")", "\n", "self", ".", "weights", "/=", "np", ".", "expand_dims", "(", "w_n", ",", "axis", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zahrag_3DHARSOM.codes.SNN.SNN.normalize": [[28, 34], ["numpy.linalg.norm", "numpy.linalg.norm", "numpy.expand_dims"], "methods", ["None"], ["", "def", "normalize", "(", "self", ",", "state", ")", ":", "\n", "\n", "        ", "if", "self", ".", "normalize_input", "and", "LA", ".", "norm", "(", "state", ")", "!=", "0", ":", "\n", "            ", "state", "/=", "LA", ".", "norm", "(", "np", ".", "expand_dims", "(", "state", ",", "axis", "=", "0", ")", ")", "\n", "\n", "", "return", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.zahrag_3DHARSOM.codes.SNN.SNN.set_activity": [[35, 41], ["mat_mul.sum"], "methods", ["None"], ["", "def", "set_activity", "(", "self", ",", "state", ")", ":", "\n", "\n", "        ", "mat_mul", "=", "self", ".", "weights", "*", "state", "\n", "activity", "=", "mat_mul", ".", "sum", "(", "axis", "=", "2", ")", "\n", "\n", "return", "activity", "\n", "\n"]], "home.repos.pwc.inspect_result.zahrag_3DHARSOM.codes.SNN.SNN.find_winning_neuron": [[42, 47], ["numpy.unravel_index", "numpy.argmax"], "methods", ["None"], ["", "def", "find_winning_neuron", "(", "self", ",", "activity", ")", ":", "\n", "\n", "        ", "winner_x", ",", "winner_y", "=", "np", ".", "unravel_index", "(", "np", ".", "argmax", "(", "activity", ",", "axis", "=", "None", ")", ",", "activity", ".", "shape", ")", "\n", "\n", "return", "winner_x", ",", "winner_y", "\n", "\n"]], "home.repos.pwc.inspect_result.zahrag_3DHARSOM.codes.SNN.SNN.learn": [[48, 58], ["numpy.expand_dims", "numpy.linalg.norm", "numpy.expand_dims"], "methods", ["None"], ["", "def", "learn", "(", "self", ",", "input_data", ",", "activity", ",", "desired_output", ")", ":", "\n", "\n", "        ", "if", "self", ".", "learning", ":", "\n", "            ", "err", "=", "desired_output", "-", "activity", "\n", "err", "=", "np", ".", "expand_dims", "(", "err", ",", "axis", "=", "2", ")", "\n", "self", ".", "weights", "+=", "self", ".", "beta", "*", "input_data", "*", "err", "\n", "\n", "# normalize weights", "\n", "w_n", "=", "LA", ".", "norm", "(", "self", ".", "weights", ",", "axis", "=", "2", ")", "\n", "self", ".", "weights", "/=", "np", ".", "expand_dims", "(", "w_n", ",", "axis", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zahrag_3DHARSOM.codes.SNN.SNN.run_SNN": [[59, 87], ["numpy.zeros", "SNN.SNN.find_winning_neuron", "SNN.SNN.normalize", "SNN.SNN.set_activity", "SNN.SNN.find_winning_neuron", "SNN.SNN.learn", "numpy.expand_dims", "numpy.expand_dims"], "methods", ["home.repos.pwc.inspect_result.zahrag_3DHARSOM.codes.SNN.SNN.find_winning_neuron", "home.repos.pwc.inspect_result.zahrag_3DHARSOM.codes.SOM.SOM.normalize", "home.repos.pwc.inspect_result.zahrag_3DHARSOM.codes.SOM.SOM.set_activity", "home.repos.pwc.inspect_result.zahrag_3DHARSOM.codes.SNN.SNN.find_winning_neuron", "home.repos.pwc.inspect_result.zahrag_3DHARSOM.codes.SOM.SOM.learn"], ["", "", "def", "run_SNN", "(", "self", ",", "input_data", ",", "index_class", ")", ":", "\n", "\n", "# get the correct action", "\n", "        ", "desired_output", "=", "np", ".", "zeros", "(", "(", "self", ".", "outputsize_x", ",", "1", ")", ")", "\n", "desired_output", "[", "index_class", ",", "0", "]", "=", "1.0", "\n", "max_desired_x", ",", "max_desired_y", "=", "self", ".", "find_winning_neuron", "(", "desired_output", ")", "\n", "\n", "# normalize input", "\n", "input_data", "=", "self", ".", "normalize", "(", "np", ".", "expand_dims", "(", "input_data", ",", "axis", "=", "0", ")", ")", "\n", "\n", "# set the activity", "\n", "activity", "=", "self", ".", "set_activity", "(", "np", ".", "expand_dims", "(", "input_data", ",", "axis", "=", "0", ")", ")", "\n", "\n", "# get the system chosen action", "\n", "max_activity_x", ",", "max_activity_y", "=", "self", ".", "find_winning_neuron", "(", "activity", ")", "\n", "\n", "# compare and set the recognition result", "\n", "if", "max_activity_x", "==", "max_desired_x", "and", "max_activity_y", "==", "max_desired_y", ":", "\n", "            ", "result", "=", "1.0", "\n", "", "else", ":", "\n", "            ", "result", "=", "0.0", "\n", "\n", "# learning", "\n", "", "self", ".", "learn", "(", "input_data", ",", "activity", ",", "desired_output", ")", "\n", "\n", "# print('\\n activity', activity)", "\n", "\n", "return", "activity", ",", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.zahrag_3DHARSOM.codes.SOM.SOM.__init__": [[13, 40], ["numpy.zeros", "numpy.random.rand", "range", "range"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "learning", ",", "outputsize_x", ",", "outputsize_y", ",", "inputsize", ",", "sigma", ",", "softmax_exponent", ",", "max_epoch", ")", ":", "\n", "\n", "        ", "self", ".", "name", "=", "'SOM'", "\n", "self", ".", "learning", "=", "learning", "\n", "self", ".", "outputsize_x", "=", "outputsize_x", "\n", "self", ".", "outputsize_y", "=", "outputsize_y", "\n", "self", ".", "inputsize", "=", "inputsize", "\n", "self", ".", "sigma", "=", "sigma", "\n", "self", ".", "softmax_exponent", "=", "softmax_exponent", "\n", "self", ".", "max_epoch", "=", "max_epoch", "\n", "self", ".", "metric", "=", "'Euclidean'", "\n", "self", ".", "normalize_input", "=", "False", "\n", "self", ".", "normalize_weights", "=", "False", "\n", "self", ".", "softmax_normalization", "=", "True", "\n", "self", ".", "neighborhood_decay", "=", "0.9999", "\n", "self", ".", "neighborhood_min", "=", "1", "\n", "self", ".", "learningRate", "=", "0.1", "\n", "self", ".", "learningRate_decay", "=", "0.9999", "\n", "self", ".", "learningRate_min", "=", "0.01", "\n", "self", ".", "neighborhood_radius", "=", "outputsize_x", "\n", "self", ".", "node_map", "=", "np", ".", "zeros", "(", "(", "outputsize_x", ",", "outputsize_y", ",", "2", ")", ")", "\n", "self", ".", "weights", "=", "np", ".", "random", ".", "rand", "(", "outputsize_x", ",", "outputsize_y", ",", "inputsize", ")", "# Rows, Columns, Depth", "\n", "\n", "for", "i", "in", "range", "(", "outputsize_x", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "outputsize_y", ")", ":", "\n", "                ", "self", ".", "node_map", "[", "i", ",", "j", ",", "0", "]", "=", "i", "\n", "self", ".", "node_map", "[", "i", ",", "j", ",", "1", "]", "=", "j", "\n", "\n"]], "home.repos.pwc.inspect_result.zahrag_3DHARSOM.codes.SOM.SOM.normalize": [[41, 47], ["numpy.linalg.norm", "numpy.expand_dims"], "methods", ["None"], ["", "", "", "def", "normalize", "(", "self", ",", "state", ")", ":", "\n", "\n", "        ", "if", "self", ".", "normalize_input", ":", "\n", "            ", "state", "/=", "LA", ".", "norm", "(", "np", ".", "expand_dims", "(", "state", ",", "axis", "=", "0", ")", ")", "\n", "\n", "", "return", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.zahrag_3DHARSOM.codes.SOM.SOM.soft_max_normalization": [[48, 55], ["numpy.max"], "methods", ["None"], ["", "def", "soft_max_normalization", "(", "self", ",", "state", ")", ":", "\n", "\n", "        ", "m", "=", "np", ".", "max", "(", "state", ")", "\n", "if", "m", "!=", "0", ":", "\n", "            ", "state", "/=", "m", "\n", "\n", "", "return", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.zahrag_3DHARSOM.codes.SOM.SOM.set_activity": [[56, 74], ["numpy.sum", "numpy.exp", "mat_mul.sum", "SOM.SOM.soft_max_normalization"], "methods", ["home.repos.pwc.inspect_result.zahrag_3DHARSOM.codes.SOM.SOM.soft_max_normalization"], ["", "def", "set_activity", "(", "self", ",", "state", ")", ":", "\n", "\n", "        ", "if", "self", ".", "metric", "==", "'Euclidean'", ":", "\n", "            ", "dist", "=", "np", ".", "sum", "(", "(", "state", "-", "self", ".", "weights", ")", "**", "2", ",", "axis", "=", "2", ")", "\n", "activity", "=", "np", ".", "exp", "(", "-", "dist", "/", "self", ".", "sigma", ")", "\n", "\n", "", "else", ":", "\n", "# Scalar Product", "\n", "            ", "mat_mul", "=", "state", "*", "self", ".", "weights", "\n", "activity", "=", "mat_mul", ".", "sum", "(", "axis", "=", "2", ")", "\n", "\n", "", "if", "self", ".", "softmax_exponent", "!=", "1", ":", "\n", "            ", "activity", "=", "activity", "**", "self", ".", "softmax_exponent", "\n", "\n", "", "if", "self", ".", "softmax_normalization", ":", "\n", "            ", "activity", "=", "self", ".", "soft_max_normalization", "(", "activity", ")", "\n", "\n", "", "return", "activity", "\n", "\n"]], "home.repos.pwc.inspect_result.zahrag_3DHARSOM.codes.SOM.SOM.find_winning_node": [[75, 81], ["numpy.unravel_index", "numpy.array", "numpy.argmax"], "methods", ["None"], ["", "def", "find_winning_node", "(", "self", ",", "activity", ")", ":", "\n", "\n", "        ", "winner_x", ",", "winner_y", "=", "np", ".", "unravel_index", "(", "np", ".", "argmax", "(", "activity", ",", "axis", "=", "None", ")", ",", "activity", ".", "shape", ")", "\n", "winning_node", "=", "np", ".", "array", "(", "[", "winner_x", ",", "winner_y", "]", ")", "\n", "\n", "return", "winning_node", "\n", "\n"]], "home.repos.pwc.inspect_result.zahrag_3DHARSOM.codes.SOM.SOM.learn": [[82, 88], ["numpy.sum", "numpy.exp"], "methods", ["None"], ["", "def", "learn", "(", "self", ",", "state", ",", "winner", ")", ":", "\n", "\n", "        ", "dis", "=", "np", ".", "sum", "(", "(", "self", ".", "node_map", "-", "winner", ")", "**", "2", ",", "axis", "=", "2", ")", "\n", "gus", "=", "np", ".", "exp", "(", "-", "dis", "/", "(", "2", "*", "self", ".", "neighborhood_radius", "**", "2", ")", ")", "\n", "err", "=", "state", "-", "self", ".", "weights", "\n", "self", ".", "weights", "+=", "self", ".", "learningRate", "*", "(", "err", ".", "T", "*", "gus", ".", "T", ")", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.zahrag_3DHARSOM.codes.SOM.SOM.learning_decay": [[89, 98], ["None"], "methods", ["None"], ["", "def", "learning_decay", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "learningRate", "*=", "self", ".", "learningRate_decay", "\n", "if", "self", ".", "learningRate", "<", "self", ".", "learningRate_min", ":", "\n", "            ", "self", ".", "learningRate", "=", "self", ".", "learningRate_min", "\n", "\n", "", "self", ".", "neighborhood_radius", "*=", "self", ".", "neighborhood_decay", "\n", "if", "self", ".", "neighborhood_radius", "<", "self", ".", "neighborhood_min", ":", "\n", "            ", "self", ".", "neighborhood_radius", "=", "self", ".", "neighborhood_min", "\n", "\n"]], "home.repos.pwc.inspect_result.zahrag_3DHARSOM.codes.SOM.SOM.run_SOM": [[99, 112], ["SOM.SOM.normalize", "SOM.SOM.set_activity", "SOM.SOM.find_winning_node", "SOM.SOM.learn", "SOM.SOM.learning_decay"], "methods", ["home.repos.pwc.inspect_result.zahrag_3DHARSOM.codes.SOM.SOM.normalize", "home.repos.pwc.inspect_result.zahrag_3DHARSOM.codes.SOM.SOM.set_activity", "home.repos.pwc.inspect_result.zahrag_3DHARSOM.codes.SOM.SOM.find_winning_node", "home.repos.pwc.inspect_result.zahrag_3DHARSOM.codes.SOM.SOM.learn", "home.repos.pwc.inspect_result.zahrag_3DHARSOM.codes.SOM.SOM.learning_decay"], ["", "", "def", "run_SOM", "(", "self", ",", "state", ")", ":", "\n", "\n", "        ", "state", "=", "self", ".", "normalize", "(", "state", ")", "\n", "\n", "activity", "=", "self", ".", "set_activity", "(", "state", ")", "\n", "\n", "winner", "=", "self", ".", "find_winning_node", "(", "activity", ")", "\n", "\n", "if", "self", ".", "learning", ":", "\n", "            ", "self", ".", "learn", "(", "state", ",", "winner", ")", "\n", "self", ".", "learning_decay", "(", ")", "\n", "\n", "", "return", "activity", ",", "winner", "\n", "\n"]], "home.repos.pwc.inspect_result.zahrag_3DHARSOM.codes.som_agent.somagent_phase_I.__init__": [[14, 25], ["SOM.SOM.SOM"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "learning", ",", "l_x", ",", "l_y", ",", "input_size", ",", "sigma", ",", "softmax_exponent", ",", "max_epoch", ",", "dyn_as_input", ")", ":", "\n", "\n", "        ", "self", ".", "net_1", "=", "SOM", "(", "learning", "=", "learning", ",", "\n", "outputsize_x", "=", "l_x", ",", "\n", "outputsize_y", "=", "l_y", ",", "\n", "inputsize", "=", "input_size", ",", "\n", "sigma", "=", "sigma", ",", "\n", "softmax_exponent", "=", "softmax_exponent", ",", "\n", "max_epoch", "=", "max_epoch", ")", "\n", "\n", "self", ".", "dyn_as_input", "=", "dyn_as_input", "\n", "\n"]], "home.repos.pwc.inspect_result.zahrag_3DHARSOM.codes.som_agent.somagent_phase_I.run": [[26, 81], ["numpy.random.permutation", "range", "len", "len", "numpy.zeros", "range", "all_activity_pattern.append", "print", "print", "int", "int", "numpy.concatenate", "numpy.size", "som_agent.somagent_phase_I.net_1.run_SOM", "numpy.concatenate", "numpy.concatenate", "numpy.size", "numpy.size", "numpy.size"], "methods", ["home.repos.pwc.inspect_result.zahrag_3DHARSOM.codes.SOM.SOM.run_SOM"], ["", "def", "run", "(", "self", ",", "data", ",", "data_d1", ",", "data_d2", ",", "data_index", ",", "learning", "=", "None", ")", ":", "\n", "\n", "        ", "self", ".", "net_1", ".", "learning", "=", "learning", "\n", "\n", "all_activity_pattern", "=", "[", "]", "\n", "iteration", "=", "0", "\n", "epoch", "=", "0", "\n", "run", "=", "True", "\n", "while", "run", ":", "\n", "\n", "            ", "epoch", "+=", "1", "\n", "\n", "# Random selection", "\n", "rseq", "=", "np", ".", "random", ".", "permutation", "(", "len", "(", "data_index", ")", ")", "\n", "all_activity_pattern", "=", "[", "]", "\n", "for", "nseq", "in", "range", "(", "len", "(", "data_index", ")", ")", ":", "# Sequences", "\n", "\n", "                ", "if", "learning", "is", "False", ":", "\n", "                    ", "ind_seq", "=", "int", "(", "data_index", "[", "nseq", "]", ")", "\n", "", "else", ":", "\n", "                    ", "ind_seq", "=", "int", "(", "data_index", "[", "rseq", "[", "nseq", "]", "]", ")", "\n", "\n", "", "data_seq_d0", "=", "data", "[", "ind_seq", "]", "\n", "data_seq_d1", "=", "data_d1", "[", "ind_seq", "]", "\n", "data_seq_d2", "=", "data_d2", "[", "ind_seq", "]", "\n", "if", "self", ".", "dyn_as_input", "==", "1", ":", "\n", "                    ", "data_seq_d0", "=", "np", ".", "concatenate", "(", "(", "data_seq_d0", ",", "data_seq_d1", ")", ",", "axis", "=", "1", ")", "\n", "\n", "", "elif", "self", ".", "dyn_as_input", "==", "2", ":", "\n", "                    ", "data_seq_d0", "=", "np", ".", "concatenate", "(", "(", "data_seq_d0", ",", "data_seq_d1", ")", ",", "axis", "=", "1", ")", "\n", "data_seq_d0", "=", "np", ".", "concatenate", "(", "(", "data_seq_d0", ",", "data_seq_d2", ")", ",", "axis", "=", "1", ")", "\n", "\n", "", "activity_pattern", "=", "np", ".", "zeros", "(", "(", "np", ".", "size", "(", "data_seq_d0", ",", "0", ")", ",", "2", ")", ")", "\n", "for", "nfr", "in", "range", "(", "np", ".", "size", "(", "data_seq_d0", ",", "0", ")", ")", ":", "# Frames per sequence", "\n", "                    ", "iteration", "+=", "1", "\n", "\n", "# running first-layer SOM", "\n", "# print('input dim phase_I:', len(data_seq_d0[nfr, :]))", "\n", "activity", ",", "winner", "=", "self", ".", "net_1", ".", "run_SOM", "(", "data_seq_d0", "[", "nfr", ",", ":", "]", ")", "\n", "# print(\"\\nInput:\\n\", data_seq_d0[nfr, :])", "\n", "# print(\"\\nWinner:\", winner)", "\n", "# print(\"\\nmin_actinity:\", np.min(activity), \"\\t max_actinity:\", np.max(activity))", "\n", "activity_pattern", "[", "nfr", ",", "0", "]", "=", "winner", "[", "0", "]", "\n", "activity_pattern", "[", "nfr", ",", "1", "]", "=", "winner", "[", "1", "]", "\n", "\n", "", "all_activity_pattern", ".", "append", "(", "activity_pattern", ")", "\n", "\n", "", "if", "learning", ":", "\n", "                ", "print", "(", "\"\"", ",", "end", "=", "'\\r'", ")", "\n", "print", "(", "\"Phase:{}  \\t Epoch:{} \\t Row:{} \\t Column:{}\"", ".", "format", "(", "2", ",", "epoch", ",", "np", ".", "size", "(", "self", ".", "net_1", ".", "weights", ",", "0", ")", ",", "\n", "np", ".", "size", "(", "self", ".", "net_1", ".", "weights", ",", "1", ")", ")", ",", "end", "=", "\"\"", ",", "flush", "=", "True", ")", "\n", "", "if", "epoch", "==", "self", ".", "net_1", ".", "max_epoch", "or", "learning", "is", "False", ":", "\n", "                ", "run", "=", "False", "\n", "\n", "", "", "return", "all_activity_pattern", "\n", "\n"]], "home.repos.pwc.inspect_result.zahrag_3DHARSOM.codes.som_agent.somagent_phase_II.__init__": [[85, 99], ["SOM.SOM.SOM", "SNN.SNN.SNN"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "learning", ",", "l_x", ",", "l_y", ",", "input_size", ",", "sigma", ",", "softmax_exponent", ",", "max_epoch", ",", "class_number", ")", ":", "\n", "\n", "        ", "self", ".", "net_2", "=", "SOM", "(", "learning", "=", "learning", ",", "\n", "outputsize_x", "=", "l_x", ",", "\n", "outputsize_y", "=", "l_y", ",", "\n", "inputsize", "=", "input_size", ",", "\n", "sigma", "=", "sigma", ",", "\n", "softmax_exponent", "=", "softmax_exponent", ",", "\n", "max_epoch", "=", "max_epoch", ")", "\n", "\n", "self", ".", "net_3", "=", "SNN", "(", "learning", "=", "learning", ",", "\n", "outputsize_x", "=", "class_number", ",", "\n", "outputsize_y", "=", "1", ",", "\n", "inputsize", "=", "l_x", "*", "l_y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zahrag_3DHARSOM.codes.som_agent.somagent_phase_II.run": [[100, 144], ["numpy.zeros", "numpy.random.permutation", "range", "len", "len", "som_agent.somagent_phase_II.net_2.run_SOM", "som_agent.somagent_phase_II.net_3.run_SNN", "print", "print", "int", "int", "activity.flatten", "int", "snn_activity_map.append", "numpy.size", "numpy.size", "int", "len"], "methods", ["home.repos.pwc.inspect_result.zahrag_3DHARSOM.codes.SOM.SOM.run_SOM", "home.repos.pwc.inspect_result.zahrag_3DHARSOM.codes.SNN.SNN.run_SNN"], ["", "def", "run", "(", "self", ",", "data", ",", "data_index", ",", "data_class_info", ",", "learning", "=", "None", ")", ":", "\n", "\n", "        ", "self", ".", "net_2", ".", "learning", "=", "learning", "\n", "self", ".", "net_3", ".", "learning", "=", "learning", "\n", "# Performance results", "\n", "result_per_class", "=", "np", ".", "zeros", "(", "(", "1", ",", "self", ".", "net_3", ".", "outputsize_x", ")", ")", "\n", "snn_activity_map", "=", "[", "]", "\n", "epoch", "=", "0", "\n", "run", "=", "True", "\n", "while", "run", ":", "\n", "\n", "            ", "epoch", "+=", "1", "\n", "\n", "rseq", "=", "np", ".", "random", ".", "permutation", "(", "len", "(", "data_index", ")", ")", "\n", "t_res", "=", "0", "\n", "for", "nseq", "in", "range", "(", "len", "(", "data_index", ")", ")", ":", "\n", "\n", "                ", "if", "learning", "is", "False", ":", "\n", "                    ", "ind_seq", "=", "int", "(", "data_index", "[", "nseq", "]", ")", "\n", "", "else", ":", "\n", "                    ", "ind_seq", "=", "int", "(", "data_index", "[", "rseq", "[", "nseq", "]", "]", ")", "\n", "\n", "# class label", "\n", "", "class_seq", "=", "data_class_info", "[", "ind_seq", "]", "\n", "# print('input dim phase_II:', len(data[ind_seq]))", "\n", "activity", ",", "winner", "=", "self", ".", "net_2", ".", "run_SOM", "(", "data", "[", "ind_seq", "]", ")", "\n", "snn_activity", ",", "snn_result", "=", "self", ".", "net_3", ".", "run_SNN", "(", "activity", ".", "flatten", "(", ")", ",", "int", "(", "class_seq", "[", "2", "]", ")", ")", "\n", "result_per_class", "[", "0", ",", "int", "(", "class_seq", "[", "2", "]", ")", "]", "+=", "snn_result", "\n", "t_res", "+=", "snn_result", "\n", "\n", "# get third-layer activation maps for Test sequences", "\n", "if", "learning", "is", "False", ":", "\n", "                    ", "snn_activity_map", ".", "append", "(", "snn_activity", ".", "T", ")", "\n", "\n", "", "", "if", "learning", ":", "\n", "                ", "print", "(", "\"\"", ",", "end", "=", "'\\r'", ")", "\n", "print", "(", "\"Phase:{}  \\t Epoch:{} \\t Row:{} \\t Column:{} \\t Result:{}\"", ".", "format", "(", "2", ",", "epoch", ",", "\n", "np", ".", "size", "(", "self", ".", "net_2", ".", "weights", ",", "0", ")", ",", "\n", "np", ".", "size", "(", "self", ".", "net_2", ".", "weights", ",", "1", ")", ",", "\n", "100", "*", "t_res", "/", "len", "(", "data_index", ")", ")", ",", "end", "=", "\"\"", ",", "flush", "=", "True", ")", "\n", "", "if", "epoch", "==", "self", ".", "net_2", ".", "max_epoch", "or", "learning", "is", "False", ":", "\n", "                ", "run", "=", "False", "\n", "\n", "", "", "return", "result_per_class", ",", "snn_activity_map", "\n", "\n"]], "home.repos.pwc.inspect_result.zahrag_3DHARSOM.codes.run_architecture.Architecture.__init__": [[20, 42], ["som_agent.somagent_phase_I", "som_agent.somagent_phase_II"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "input_dim", "=", "1", ",", "output_dim", "=", "1", ",", "Dyn", "=", "0", ")", ":", "\n", "\n", "# ****************************************************** Initialize Phase I:", "\n", "        ", "self", ".", "phase_I", "=", "som_agent", ".", "somagent_phase_I", "(", "learning", "=", "True", ",", "\n", "l_x", "=", "30", ",", "l_y", "=", "30", ",", "\n", "input_size", "=", "input_dim", "*", "(", "Dyn", "+", "1", ")", ",", "\n", "sigma", "=", "10", "**", "6", ",", "\n", "softmax_exponent", "=", "10", ",", "\n", "max_epoch", "=", "100", ",", "\n", "dyn_as_input", "=", "Dyn", ")", "\n", "\n", "# ****************************************************** Initialize Phase II:", "\n", "self", ".", "phase_II", "=", "som_agent", ".", "somagent_phase_II", "(", "learning", "=", "True", ",", "\n", "l_x", "=", "35", ",", "l_y", "=", "35", ",", "\n", "input_size", "=", "1", ",", "\n", "sigma", "=", "10", "**", "3", ",", "\n", "softmax_exponent", "=", "10", ",", "\n", "max_epoch", "=", "1000", ",", "\n", "class_number", "=", "output_dim", ")", "\n", "\n", "self", ".", "original_patterns", "=", "[", "]", "\n", "self", ".", "new_patterns", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zahrag_3DHARSOM.codes.run_architecture.Architecture.train": [[43, 82], ["run_architecture.Architecture.phase_I.run", "run_architecture.Architecture.phase_I.run", "Superimposition.get_activations.superimposition", "numpy.random.rand", "run_architecture.Architecture.phase_II.run", "numpy.vstack"], "methods", ["home.repos.pwc.inspect_result.zahrag_3DHARSOM.codes.som_agent.somagent_phase_II.run", "home.repos.pwc.inspect_result.zahrag_3DHARSOM.codes.som_agent.somagent_phase_II.run", "home.repos.pwc.inspect_result.zahrag_3DHARSOM.Superimposition.get_activations.superimposition", "home.repos.pwc.inspect_result.zahrag_3DHARSOM.codes.som_agent.somagent_phase_II.run"], ["", "def", "train", "(", "self", ",", "data", ",", "rs", ")", ":", "\n", "        ", "\"\"\"\n        This function is to train the architecture in phase_I and phase_II consecutively.\n        Trained architecture of phase_I is used to create input of phase_II though superimposition module.\n\n            Args:\n                data: training data sequences and labels\n                rs: random selector object\n\n            Returns:\n                patterns: Original pattern vectors of the whole dataset\n                new_patterns: Ordered vector represented patterns of the whole dataset\n            \"\"\"", "\n", "\n", "# ----------- Phase_I:", "\n", "_", "=", "self", ".", "phase_I", ".", "run", "(", "data", ".", "pos_all_n", ",", "data", ".", "vel_all", ",", "data", ".", "acc_all", ",", "rs", ".", "tr_set", ",", "learning", "=", "True", ")", "\n", "\n", "# Original patterns extraction for the whole dataset (train, validation & test sets)", "\n", "self", ".", "original_patterns", "=", "self", ".", "phase_I", ".", "run", "(", "data", ".", "pos_all_n", ",", "\n", "data", ".", "vel_all", ",", "\n", "data", ".", "acc_all", ",", "\n", "np", ".", "vstack", "(", "data", ".", "class_all", ")", "[", ":", ",", "0", "]", ",", "\n", "learning", "=", "False", ")", "\n", "\n", "# Ordered Vector Representation", "\n", "self", ".", "new_patterns", ",", "L_max", "=", "superimposition", "(", "self", ".", "original_patterns", ")", "\n", "# print('L_Max:', L_max)", "\n", "\n", "# ----------- Phase_II:", "\n", "# Weights Initialization", "\n", "self", ".", "phase_II", ".", "net_2", ".", "inputsize", "=", "2", "*", "L_max", "\n", "self", ".", "phase_II", ".", "net_2", ".", "weights", "=", "np", ".", "random", ".", "rand", "(", "self", ".", "phase_II", ".", "net_2", ".", "outputsize_x", ",", "\n", "self", ".", "phase_II", ".", "net_2", ".", "outputsize_y", ",", "\n", "2", "*", "L_max", ")", "\n", "\n", "# Training:", "\n", "_", "=", "self", ".", "phase_II", ".", "run", "(", "self", ".", "new_patterns", ",", "rs", ".", "tr_set", ",", "data", ".", "class_all", ",", "learning", "=", "True", ")", "\n", "\n", "return", "self", ".", "original_patterns", ",", "self", ".", "new_patterns", "\n", "\n"]], "home.repos.pwc.inspect_result.zahrag_3DHARSOM.codes.run_architecture.Architecture.test": [[83, 103], ["run_architecture.Architecture.phase_II.run", "float", "numpy.sum", "len"], "methods", ["home.repos.pwc.inspect_result.zahrag_3DHARSOM.codes.som_agent.somagent_phase_II.run"], ["", "def", "test", "(", "self", ",", "patterns", ",", "data", ",", "rs_set", ")", ":", "\n", "        ", "\"\"\"\n            This function runs phase_II in test mode. Since the result of running phase_I is\n            represented by action pattern vectors received as the input, running phase_I is test mode\n            is not required anymore!\n\n                Args:\n                    patterns: ordered vector represented patterns\n                    data: input data information\n                    rs_set: random selector set corresponds to train, validation or test sets\n\n                Returns:\n                    result_perc: recognition result percentage of the data sequences\n                    snn_map: SNN activity map for the corresponding data sequences\n                \"\"\"", "\n", "\n", "result_per_class", ",", "snn_map", "=", "self", ".", "phase_II", ".", "run", "(", "patterns", ",", "rs_set", ",", "data", ".", "class_all", ",", "learning", "=", "False", ")", "\n", "result_perc", "=", "100", "*", "np", ".", "sum", "(", "result_per_class", ")", "/", "float", "(", "len", "(", "rs_set", ")", ")", "\n", "\n", "return", "result_perc", ",", "snn_map", "\n", "\n"]], "home.repos.pwc.inspect_result.zahrag_3DHARSOM.codes.run_architecture.Architecture.print_results_per_seed": [[104, 111], ["print"], "methods", ["None"], ["", "def", "print_results_per_seed", "(", "self", ",", "seed", ",", "tr_result", ",", "val_result", ")", ":", "\n", "\n", "# Printing performance results", "\n", "        ", "print", "(", "'\\n\\n\\n Seed:'", ",", "seed", ",", "\n", "'\\n HAR Train-Accuracy:'", ",", "tr_result", ",", "\n", "'\\n HAR Validation-Accuracy:'", ",", "val_result", ",", "\n", "'\\n\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zahrag_3DHARSOM.InputData.RandomSelection.RS.__init__": [[16, 31], ["numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "nbr_of_class", "=", "10", ",", "nbr_of_folds", "=", "10", ",", "ratio", "=", "0.25", ")", ":", "\n", "\n", "        ", "self", ".", "nbr_fold", "=", "nbr_of_folds", "\n", "self", ".", "nbr_class", "=", "nbr_of_class", "\n", "self", ".", "ratio", "=", "ratio", "\n", "self", ".", "tr_set", "=", "[", "]", "\n", "self", ".", "val_set", "=", "[", "]", "\n", "self", ".", "ts_set", "=", "[", "]", "\n", "self", ".", "tr_val_set", "=", "[", "]", "\n", "self", ".", "n_trseq_per_act", "=", "np", ".", "zeros", "(", "(", "1", ",", "nbr_of_class", ")", ")", "\n", "self", ".", "n_valseq_per_act", "=", "np", ".", "zeros", "(", "(", "1", ",", "nbr_of_class", ")", ")", "\n", "self", ".", "n_tsseq_per_act", "=", "np", ".", "zeros", "(", "(", "1", ",", "nbr_of_class", ")", ")", "\n", "self", ".", "n_trvalseq_per_act", "=", "np", ".", "zeros", "(", "(", "1", ",", "nbr_of_class", ")", ")", "\n", "self", ".", "fold", "=", "[", "]", "\n", "self", ".", "nfr_tr", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.zahrag_3DHARSOM.InputData.RandomSelection.RS.random_test_selector": [[32, 63], ["numpy.zeros", "numpy.zeros", "range", "range", "range", "len", "int", "int", "int", "seq_per_act.append", "numpy.random.permutation", "round", "range", "int", "len", "len", "RandomSelection.RS.ts_set.append", "RandomSelection.RS.tr_val_set.append"], "methods", ["None"], ["", "def", "random_test_selector", "(", "self", ",", "class_all", ")", ":", "\n", "        ", "\"\"\"\n            This function creates the randomly selected test data set based on a ratio predefined by the user.\n\n            \"\"\"", "\n", "sum_seq_per_act", "=", "np", ".", "zeros", "(", "(", "1", ",", "self", ".", "nbr_class", ")", ")", "\n", "seq_per", "=", "np", ".", "zeros", "(", "(", "self", ".", "nbr_class", ",", "50", ")", ")", "\n", "for", "nseq", "in", "range", "(", "len", "(", "class_all", ")", ")", ":", "\n", "            ", "info_seq", "=", "class_all", "[", "nseq", "]", "\n", "cnt_act", "=", "int", "(", "info_seq", "[", "2", "]", ")", "\n", "cnt_seq", "=", "int", "(", "sum_seq_per_act", "[", "0", ",", "cnt_act", "]", ")", "\n", "seq_per", "[", "cnt_act", ",", "cnt_seq", "]", "=", "nseq", "\n", "sum_seq_per_act", "[", "0", ",", "cnt_act", "]", "+=", "1", "\n", "\n", "", "seq_per_act", "=", "[", "]", "\n", "for", "na", "in", "range", "(", "self", ".", "nbr_class", ")", ":", "\n", "            ", "cnt_seq", "=", "int", "(", "sum_seq_per_act", "[", "0", ",", "na", "]", ")", "\n", "vec", "=", "seq_per", "[", "na", ",", "0", ":", "cnt_seq", "]", "\n", "seq_per_act", ".", "append", "(", "vec", ")", "\n", "\n", "", "for", "na", "in", "range", "(", "self", ".", "nbr_class", ")", ":", "\n", "            ", "ract", "=", "np", ".", "random", ".", "permutation", "(", "int", "(", "sum_seq_per_act", "[", "0", ",", "na", "]", ")", ")", "\n", "info_seq", "=", "seq_per_act", "[", "na", "]", "\n", "n_ts", "=", "round", "(", "self", ".", "ratio", "*", "len", "(", "info_seq", ")", ")", "\n", "for", "nseq", "in", "range", "(", "len", "(", "info_seq", ")", ")", ":", "\n", "                ", "if", "nseq", "<", "n_ts", ":", "\n", "                    ", "self", ".", "ts_set", ".", "append", "(", "info_seq", "[", "ract", "[", "nseq", "]", "]", ")", "\n", "self", ".", "n_tsseq_per_act", "[", "0", ",", "na", "]", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "self", ".", "tr_val_set", ".", "append", "(", "info_seq", "[", "ract", "[", "nseq", "]", "]", ")", "\n", "self", ".", "n_trvalseq_per_act", "[", "0", ",", "na", "]", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.zahrag_3DHARSOM.InputData.RandomSelection.RS.n_fold_selector": [[64, 86], ["RandomSelection.RS.random_test_selector", "numpy.random.permutation", "int", "range", "int", "numpy.round", "range", "RandomSelection.RS.fold.append", "len", "len", "len", "vec.append"], "methods", ["home.repos.pwc.inspect_result.zahrag_3DHARSOM.InputData.RandomSelection.RS.random_test_selector"], ["", "", "", "", "def", "n_fold_selector", "(", "self", ",", "class_all", ")", ":", "\n", "        ", "\"\"\"\n            Once in the start of running HAR architecture,\n            this function randomly divides the whole dataset into one test set and n-folds for training.\n            The number of folds is pre-defined by the user.\n\n            \"\"\"", "\n", "self", ".", "random_test_selector", "(", "class_all", ")", "\n", "\n", "r_seq", "=", "np", ".", "random", ".", "permutation", "(", "int", "(", "len", "(", "self", ".", "tr_val_set", ")", ")", ")", "# Randomization", "\n", "\n", "n_val", "=", "int", "(", "np", ".", "round", "(", "(", "1", "/", "self", ".", "nbr_fold", ")", "*", "len", "(", "self", ".", "tr_val_set", ")", ")", ")", "\n", "\n", "for", "cnt1", "in", "range", "(", "self", ".", "nbr_fold", ")", ":", "\n", "            ", "vec", "=", "[", "]", "\n", "for", "cnt2", "in", "range", "(", "n_val", "*", "cnt1", ",", "n_val", "*", "(", "cnt1", "+", "1", ")", ")", ":", "\n", "                ", "if", "cnt2", "<", "len", "(", "self", ".", "tr_val_set", ")", ":", "\n", "                    ", "cnt_seq", "=", "self", ".", "tr_val_set", "[", "r_seq", "[", "cnt2", "]", "]", "\n", "vec", ".", "append", "(", "cnt_seq", ")", "\n", "", "", "self", ".", "fold", ".", "append", "(", "vec", ")", "\n", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.zahrag_3DHARSOM.InputData.RandomSelection.RS.random_selector_nfold": [[87, 121], ["numpy.zeros", "range", "range", "list", "numpy.zeros", "range", "int", "len", "len", "itertools.chain.from_iterable", "len", "numpy.size", "tr_set.append", "len", "int", "int", "int", "int", "int"], "methods", ["None"], ["", "def", "random_selector_nfold", "(", "self", ",", "input_all", ",", "class_all", ",", "seed", ")", ":", "\n", "        ", "\"\"\"\n            For each running seeds,\n            this function randomly creates training and validation sets based on n-fold cross validation approach.\n\n            \"\"\"", "\n", "# fold number", "\n", "if", "seed", ">", "self", ".", "nbr_fold", ":", "\n", "            ", "nfold", "=", "int", "(", "seed", "%", "len", "(", "self", ".", "fold", ")", ")", "\n", "", "else", ":", "\n", "            ", "nfold", "=", "seed", "\n", "\n", "# validation set", "\n", "", "self", ".", "val_set", "=", "self", ".", "fold", "[", "nfold", "]", "\n", "self", ".", "n_valseq_per_act", "=", "np", ".", "zeros", "(", "(", "1", ",", "self", ".", "nbr_class", ")", ")", "\n", "for", "nseq", "in", "range", "(", "len", "(", "self", ".", "val_set", ")", ")", ":", "\n", "            ", "info", "=", "class_all", "[", "int", "(", "self", ".", "val_set", "[", "nseq", "]", ")", "]", "\n", "self", ".", "n_valseq_per_act", "[", "0", ",", "int", "(", "info", "[", "2", "]", ")", "]", "+=", "1", "\n", "\n", "# training set", "\n", "", "tr_set", "=", "[", "]", "\n", "for", "nf", "in", "range", "(", "len", "(", "self", ".", "fold", ")", ")", ":", "\n", "            ", "if", "nf", "!=", "nfold", ":", "\n", "                ", "tr_set", ".", "append", "(", "self", ".", "fold", "[", "nf", "]", ")", "\n", "", "", "self", ".", "tr_set", "=", "list", "(", "itertools", ".", "chain", ".", "from_iterable", "(", "tr_set", ")", ")", "\n", "\n", "# number of sequence per action \u00a5 frames", "\n", "self", ".", "nfr_tr", "=", "0", "\n", "self", ".", "n_trseq_per_act", "=", "np", ".", "zeros", "(", "(", "1", ",", "self", ".", "nbr_class", ")", ")", "\n", "for", "nseq", "in", "range", "(", "len", "(", "self", ".", "tr_set", ")", ")", ":", "\n", "            ", "data_mat", "=", "input_all", "[", "int", "(", "self", ".", "tr_set", "[", "nseq", "]", ")", "]", "\n", "self", ".", "nfr_tr", "+=", "np", ".", "size", "(", "data_mat", ",", "0", ")", "\n", "info", "=", "class_all", "[", "int", "(", "self", ".", "tr_set", "[", "nseq", "]", ")", "]", "\n", "self", ".", "n_trseq_per_act", "[", "0", ",", "int", "(", "info", "[", "2", "]", ")", "]", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.zahrag_3DHARSOM.InputData.RandomSelection.RS.random_selector_basic": [[122, 142], ["RandomSelection.RS.random_test_selector", "range", "len", "numpy.size", "int"], "methods", ["home.repos.pwc.inspect_result.zahrag_3DHARSOM.InputData.RandomSelection.RS.random_test_selector"], ["", "", "def", "random_selector_basic", "(", "self", ",", "input_all", ",", "class_all", ")", ":", "\n", "        ", "\"\"\"\n            For each running seeds,\n            this function randomly creates training and validation sets,\n            without applying  n-fold cross validation approach.\n\n            \"\"\"", "\n", "self", ".", "random_test_selector", "(", "class_all", ")", "\n", "\n", "self", ".", "tr_set", "=", "self", ".", "tr_val_set", "\n", "self", ".", "val_set", "=", "self", ".", "tr_val_set", "\n", "\n", "self", ".", "n_trseq_per_act", "=", "self", ".", "n_trvalseq_per_act", "\n", "self", ".", "n_valseq_per_act", "=", "self", ".", "n_trvalseq_per_act", "\n", "\n", "# self.tr_set = list(itertools.chain.from_iterable(tr_set))", "\n", "self", ".", "nfr_tr", "=", "0", "\n", "for", "nseq", "in", "range", "(", "len", "(", "self", ".", "tr_set", ")", ")", ":", "\n", "            ", "data_mat", "=", "input_all", "[", "int", "(", "self", ".", "tr_set", "[", "nseq", "]", ")", "]", "\n", "self", ".", "nfr_tr", "+=", "np", ".", "size", "(", "data_mat", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zahrag_3DHARSOM.InputData.read_files.read_MSR": [[11, 77], ["range", "range", "range", "read_files.get_MSR_filename", "pathlib.Path", "pathlib.Path.is_file", "open", "open.readlines", "open.close", "numpy.array", "numpy.zeros", "numpy.zeros", "range", "len", "range", "range", "len", "class_all.append", "input_all.append", "input_all_n.append", "len", "len", "len", "float"], "function", ["home.repos.pwc.inspect_result.zahrag_3DHARSOM.InputData.read_files.get_MSR_filename"], ["def", "read_MSR", "(", "mainpath", ",", "input_all_n", ",", "class_all", ",", "set", "=", "0", ")", ":", "\n", "\n", "    ", "'''\n        Read MSRAction3D datasets of 3D actions generate by Kinect type sensor.\n        '''", "\n", "\n", "input_all", "=", "[", "]", "\n", "\n", "nseq", "=", "0", "\n", "for", "na", "in", "range", "(", "10", ")", ":", "\n", "        ", "for", "ns", "in", "range", "(", "10", ")", ":", "\n", "            ", "for", "ne", "in", "range", "(", "3", ")", ":", "\n", "\n", "                ", "path", "=", "get_MSR_filename", "(", "na", ",", "ns", ",", "ne", ",", "mainpath", ",", "set", "=", "set", ")", "\n", "\n", "file", "=", "Path", "(", "path", ")", "\n", "if", "file", ".", "is_file", "(", ")", ":", "\n", "                    ", "f", "=", "open", "(", "path", ",", "'r'", ")", "\n", "lines", "=", "f", ".", "readlines", "(", ")", "# frames", "\n", "f", ".", "close", "(", ")", "\n", "info", "=", "np", ".", "array", "(", "[", "nseq", ",", "ns", ",", "na", ",", "ne", "]", ")", "\n", "nseq", "+=", "1", "\n", "\n", "data_all", "=", "np", ".", "zeros", "(", "(", "len", "(", "lines", ")", ",", "80", ")", ")", "\n", "data_all_n", "=", "np", ".", "zeros", "(", "(", "len", "(", "lines", ")", ",", "60", ")", ")", "\n", "cnt_1_zero", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "lines", ")", ")", ":", "# number of frames per sequence", "\n", "                        ", "var", "=", "[", "]", "\n", "k", "=", "0", "\n", "for", "j", "in", "range", "(", "len", "(", "lines", "[", "i", "]", ")", ")", ":", "# number of characters per frame", "\n", "                            ", "if", "lines", "[", "i", "]", "[", "j", "]", "!=", "'\\t'", "and", "lines", "[", "i", "]", "[", "j", "]", "!=", "'\\n'", ":", "\n", "                                ", "var", "+=", "lines", "[", "i", "]", "[", "j", "]", "\n", "\n", "", "else", ":", "\n", "                                ", "if", "lines", "[", "i", "]", "[", "j", "]", "!=", "'\\n'", ":", "\n", "                                    ", "str", "=", "''", ".", "join", "(", "var", ")", "\n", "data", "=", "float", "(", "str", ")", "\n", "# print(data)", "\n", "data_all", "[", "i", ",", "k", "]", "=", "data", "\n", "del", "var", "\n", "del", "data", "\n", "var", "=", "[", "]", "\n", "k", "+=", "1", "\n", "", "", "", "cnt_2_zero", "=", "0", "\n", "for", "id", "in", "range", "(", "20", ")", ":", "\n", "                            ", "data_all_n", "[", "i", ",", "3", "*", "id", "+", "0", "]", "=", "data_all", "[", "i", ",", "4", "*", "id", "+", "0", "]", "\n", "data_all_n", "[", "i", ",", "3", "*", "id", "+", "1", "]", "=", "0.25", "*", "data_all", "[", "i", ",", "4", "*", "id", "+", "2", "]", "\n", "data_all_n", "[", "i", ",", "3", "*", "id", "+", "2", "]", "=", "400", "-", "data_all", "[", "i", ",", "4", "*", "id", "+", "1", "]", "\n", "if", "data_all_n", "[", "i", ",", "3", "*", "id", "+", "0", "]", "==", "0.", "and", "data_all_n", "[", "i", ",", "3", "*", "id", "+", "1", "]", "==", "0.", "and", "data_all_n", "[", "i", ",", "3", "*", "id", "+", "2", "]", "==", "400.", ":", "\n", "                                ", "cnt_2_zero", "+=", "1", "\n", "\n", "", "", "if", "cnt_2_zero", "==", "20", ":", "\n", "                            ", "cnt_1_zero", "+=", "1", "\n", "\n", "", "", "if", "cnt_1_zero", "==", "len", "(", "lines", ")", ":", "\n", "                        ", "pass", "\n", "", "else", ":", "\n", "# Collection of information for each action sequence (sequence, actor, action, event)", "\n", "                        ", "class_all", ".", "append", "(", "info", ")", "\n", "# Collection of raw sensor information 4 values per joint (dim=80)", "\n", "input_all", ".", "append", "(", "data_all", ")", "\n", "# Collection of processed 3D information 3 Cartesian coordinate parameters per joint (dim=60)", "\n", "input_all_n", ".", "append", "(", "data_all_n", ")", "\n", "\n", "", "", "", "", "", "return", "input_all_n", ",", "class_all", "\n", "\n"]], "home.repos.pwc.inspect_result.zahrag_3DHARSOM.InputData.read_files.get_MSR_filename": [[79, 104], ["None"], "function", ["None"], ["", "def", "get_MSR_filename", "(", "na", ",", "ns", ",", "ne", ",", "mainpath", ",", "set", ")", ":", "\n", "\n", "    ", "dataset", "=", "\"MSRAction3DDataset_{:d}\"", ".", "format", "(", "set", ")", "\n", "\n", "if", "na", "+", "1", ">=", "10", "and", "ns", "+", "1", "<", "10", ":", "\n", "\n", "        ", "filename", "=", "\"a{:d}_s0{:d}_e0{:d}\"", ".", "format", "(", "na", "+", "1", ",", "ns", "+", "1", ",", "ne", "+", "1", ")", "\n", "\n", "", "elif", "na", "+", "1", "<", "10", "and", "ns", "+", "1", ">=", "10", ":", "\n", "\n", "        ", "filename", "=", "\"a0{:d}_s{:d}_e0{:d}\"", ".", "format", "(", "na", "+", "1", ",", "ns", "+", "1", ",", "ne", "+", "1", ")", "\n", "\n", "", "elif", "na", "+", "1", ">=", "10", "and", "ns", "+", "1", ">=", "10", ":", "\n", "\n", "        ", "filename", "=", "\"a{:d}_s{:d}_e0{:d}\"", ".", "format", "(", "na", "+", "1", ",", "ns", "+", "1", ",", "ne", "+", "1", ")", "\n", "\n", "", "else", ":", "\n", "\n", "        ", "filename", "=", "\"a0{:d}_s0{:d}_e0{:d}\"", ".", "format", "(", "na", "+", "1", ",", "ns", "+", "1", ",", "ne", "+", "1", ")", "\n", "\n", "", "if", "set", "==", "2", ":", "\n", "        ", "return", "mainpath", "+", "\"/\"", "+", "dataset", "+", "\"/\"", "+", "filename", "+", "\"_2nd.txt\"", "\n", "\n", "", "else", ":", "\n", "        ", "return", "mainpath", "+", "\"/\"", "+", "dataset", "+", "\"/\"", "+", "filename", "+", "\".txt\"", "\n", "\n"]], "home.repos.pwc.inspect_result.zahrag_3DHARSOM.InputData.Input.DATA.__init__": [[21, 98], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "input_dim", "=", "60", ",", "mainpath", "=", "None", ",", "dataset", "=", "None", ")", ":", "\n", "\n", "        ", "self", ".", "mainpath", "=", "mainpath", "\n", "self", ".", "Dataset", "=", "dataset", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "\n", "self", ".", "actionSet", "=", "[", "]", "\n", "if", "self", ".", "Dataset", "==", "'MSR_Action3D_1'", ":", "\n", "            ", "self", ".", "actionSet", "=", "[", "'High-Wave'", ",", "\n", "'Front-Wave'", ",", "\n", "'Using-Hammer'", ",", "\n", "'Hand-Catch'", ",", "\n", "'Forward-Punch'", ",", "\n", "'High-Throw'", ",", "\n", "'Draw-Xsign'", ",", "\n", "'Draw-TickSign'", ",", "\n", "'Draw-Circle'", ",", "\n", "'Tennis-Swing'", ",", "\n", "]", "\n", "\n", "self", ".", "prepro_attention", "=", "True", "\n", "self", ".", "prepro_ego", "=", "True", "\n", "self", ".", "prepro_norm", "=", "False", "\n", "self", ".", "prepro_scaling", "=", "True", "\n", "self", ".", "prepro_dyn", "=", "True", "\n", "\n", "", "elif", "self", ".", "Dataset", "==", "'MSR_Action3D_2'", ":", "\n", "            ", "self", ".", "actionSet", "=", "[", "'Hand_Clap'", ",", "\n", "'Two-Hand-Wave'", ",", "\n", "'Side-Boxing'", ",", "\n", "'Forward-Bend'", ",", "\n", "'Forward-Kick'", ",", "\n", "'Side-Kick'", ",", "\n", "'Still-Jogging'", ",", "\n", "'Tennis-Serve'", ",", "\n", "'Golf-Swing'", ",", "\n", "'PickUp-Throw'", ",", "\n", "]", "\n", "self", ".", "prepro_attention", "=", "True", "\n", "self", ".", "prepro_ego", "=", "True", "\n", "self", ".", "prepro_norm", "=", "False", "\n", "self", ".", "prepro_scaling", "=", "False", "\n", "self", ".", "prepro_dyn", "=", "True", "\n", "\n", "", "elif", "self", ".", "Dataset", "==", "'MSR_Action3D_all'", ":", "\n", "            ", "self", ".", "actionSet", "=", "[", "'High-Wave'", ",", "\n", "'Front-Wave'", ",", "\n", "'Using-Hammer'", ",", "\n", "'Hand-Catch'", ",", "\n", "'Forward-Punch'", ",", "\n", "'High-Throw'", ",", "\n", "'Draw-Xsign'", ",", "\n", "'Draw-TickSign'", ",", "\n", "'Draw-Circle'", ",", "\n", "'Tennis-Swing'", ",", "\n", "'Hand_Clap'", ",", "\n", "'Two-Hand-Wave'", ",", "\n", "'Side-Boxing'", ",", "\n", "'Forward-Bend'", ",", "\n", "'Forward-Kick'", ",", "\n", "'Side-Kick'", ",", "\n", "'Still-Jogging'", ",", "\n", "'Tennis-Serve'", ",", "\n", "'Golf-Swing'", ",", "\n", "'PickUp-Throw'", ",", "\n", "]", "\n", "self", ".", "prepro_attention", "=", "True", "\n", "self", ".", "prepro_ego", "=", "True", "\n", "self", ".", "prepro_norm", "=", "False", "\n", "self", ".", "prepro_scaling", "=", "True", "\n", "self", ".", "prepro_dyn", "=", "True", "\n", "\n", "", "self", ".", "pos_all", "=", "[", "]", "\n", "self", ".", "pos_all_n", "=", "[", "]", "\n", "self", ".", "vel_all", "=", "[", "]", "\n", "self", ".", "acc_all", "=", "[", "]", "\n", "self", ".", "class_all", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zahrag_3DHARSOM.InputData.Input.DATA.read_data": [[99, 120], ["InputData.read_files.read_MSR", "InputData.read_files.read_MSR", "InputData.read_files.read_MSR", "InputData.read_files.read_MSR", "l_act.append", "l_act.append", "numpy.array", "range", "numpy.array", "range", "range", "len", "len"], "methods", ["home.repos.pwc.inspect_result.zahrag_3DHARSOM.InputData.read_files.read_MSR", "home.repos.pwc.inspect_result.zahrag_3DHARSOM.InputData.read_files.read_MSR", "home.repos.pwc.inspect_result.zahrag_3DHARSOM.InputData.read_files.read_MSR", "home.repos.pwc.inspect_result.zahrag_3DHARSOM.InputData.read_files.read_MSR"], ["", "def", "read_data", "(", "self", ")", ":", "\n", "\n", "        ", "\"\"\"\n           This function reads data from files.\n\n           \"\"\"", "\n", "\n", "if", "self", ".", "Dataset", "==", "'MSR_Action3D_1'", ":", "\n", "            ", "self", ".", "pos_all", ",", "self", ".", "class_all", "=", "read_MSR", "(", "self", ".", "mainpath", ",", "self", ".", "pos_all", ",", "self", ".", "class_all", ",", "set", "=", "1", ")", "\n", "\n", "", "elif", "self", ".", "Dataset", "==", "'MSR_Action3D_2'", ":", "\n", "            ", "self", ".", "pos_all", ",", "self", ".", "class_all", "=", "read_MSR", "(", "self", ".", "mainpath", ",", "self", ".", "pos_all", ",", "self", ".", "class_all", ",", "set", "=", "2", ")", "\n", "\n", "", "elif", "self", ".", "Dataset", "==", "'MSR_Action3D_all'", ":", "\n", "            ", "self", ".", "pos_all", ",", "self", ".", "class_all", "=", "read_MSR", "(", "self", ".", "mainpath", ",", "self", ".", "pos_all", ",", "self", ".", "class_all", ",", "set", "=", "1", ")", "\n", "self", ".", "pos_all", ",", "self", ".", "class_all", "=", "read_MSR", "(", "self", ".", "mainpath", ",", "self", ".", "pos_all", ",", "self", ".", "class_all", ",", "set", "=", "2", ")", "\n", "\n", "l_act", "=", "[", "]", "\n", "[", "l_act", ".", "append", "(", "np", ".", "array", "(", "[", "0", ",", "0", ",", "0", ",", "0", "]", ")", ")", "for", "k", "in", "range", "(", "276", ")", "]", "\n", "[", "l_act", ".", "append", "(", "np", ".", "array", "(", "[", "276", ",", "0", ",", "10", ",", "0", "]", ")", ")", "for", "k", "in", "range", "(", "276", ",", "len", "(", "self", ".", "class_all", ")", ")", "]", "\n", "self", ".", "class_all", "=", "[", "self", ".", "class_all", "[", "k", "]", "+", "l_act", "[", "k", "]", "for", "k", "in", "range", "(", "len", "(", "self", ".", "class_all", ")", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zahrag_3DHARSOM.InputData.Input.DATA.make_preprocessing": [[121, 159], ["range", "len", "numpy.zeros", "range", "Preprocessing.Dynamics.get_dynamics", "numpy.size", "Input.DATA.pos_all_n.append", "Input.DATA.pos_all_n.append", "numpy.size", "Preprocessing.Nomalization.make_normalization", "Preprocessing.Ego_Transfromation.make_egoCenteredCoordinateT", "Preprocessing.Attection.make_attention"], "methods", ["home.repos.pwc.inspect_result.zahrag_3DHARSOM.Preprocessing.Dynamics.get_dynamics", "home.repos.pwc.inspect_result.zahrag_3DHARSOM.Preprocessing.Nomalization.make_normalization", "home.repos.pwc.inspect_result.zahrag_3DHARSOM.Preprocessing.Ego_Transfromation.make_egoCenteredCoordinateT", "home.repos.pwc.inspect_result.zahrag_3DHARSOM.Preprocessing.Attection.make_attention"], ["", "", "def", "make_preprocessing", "(", "self", ")", ":", "\n", "\n", "        ", "\"\"\"\n           This function runs pre-processing module consists of:\n           (1) Normalization\n           (2) Ego-Centered Coordinate Transformation\n           (3) Scaling Transformation\n           (4) Attention Mechanisms\n           (5) Dynamics Extraction\n\n           \"\"\"", "\n", "\n", "for", "nseq", "in", "range", "(", "len", "(", "self", ".", "pos_all", ")", ")", ":", "# sequence", "\n", "\n", "            ", "data_seq", "=", "self", ".", "pos_all", "[", "nseq", "]", "\n", "class_seq", "=", "self", ".", "class_all", "[", "nseq", "]", "\n", "n_act", "=", "class_seq", "[", "2", "]", "\n", "\n", "data_seq_n", "=", "np", ".", "zeros", "(", "(", "np", ".", "size", "(", "data_seq", ",", "0", ")", ",", "self", ".", "input_dim", ")", ")", "\n", "for", "nfr", "in", "range", "(", "np", ".", "size", "(", "data_seq", ",", "0", ")", ")", ":", "# frame", "\n", "\n", "                ", "if", "self", ".", "prepro_norm", ":", "\n", "                    ", "data_seq", "[", "nfr", ",", ":", "]", "=", "make_normalization", "(", "data_seq", "[", "nfr", ",", ":", "]", ")", "\n", "\n", "", "if", "self", ".", "prepro_ego", ":", "\n", "                    ", "data_seq", "[", "nfr", ",", ":", "]", "=", "make_egoCenteredCoordinateT", "(", "data_seq", "[", "nfr", ",", ":", "]", ",", "self", ".", "Dataset", ")", "\n", "\n", "", "if", "self", ".", "prepro_attention", ":", "\n", "                    ", "vec", "=", "make_attention", "(", "data_seq", "[", "nfr", ",", ":", "]", ",", "n_act", ",", "self", ".", "Dataset", ")", "\n", "data_seq_n", "[", "nfr", ",", ":", "]", "=", "vec", "[", "0", ",", ":", "]", "\n", "\n", "", "", "if", "self", ".", "prepro_attention", ":", "\n", "                ", "self", ".", "pos_all_n", ".", "append", "(", "data_seq_n", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "pos_all_n", ".", "append", "(", "data_seq", ")", "\n", "\n", "", "", "if", "self", ".", "prepro_dyn", ":", "\n", "            ", "self", ".", "vel_all", ",", "self", ".", "acc_all", "=", "get_dynamics", "(", "self", ".", "pos_all_n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zahrag_3DHARSOM.InputData.Input.DATA.get_input": [[160, 167], ["Input.DATA.read_data", "Input.DATA.make_preprocessing"], "methods", ["home.repos.pwc.inspect_result.zahrag_3DHARSOM.InputData.Input.DATA.read_data", "home.repos.pwc.inspect_result.zahrag_3DHARSOM.InputData.Input.DATA.make_preprocessing"], ["", "", "def", "get_input", "(", "self", ")", ":", "\n", "\n", "# Read data from files", "\n", "        ", "self", ".", "read_data", "(", ")", "\n", "\n", "# Do the pre-processing", "\n", "self", ".", "make_preprocessing", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zahrag_3DHARSOM.Superimposition.get_activations.extract_unique_activation": [[12, 40], ["numpy.size", "numpy.zeros", "range", "numpy.max", "range", "pattern_vector.append", "numpy.ones", "numpy.size", "numpy.array", "numpy.vstack", "numpy.size", "numpy.array", "numpy.vstack", "numpy.size"], "function", ["None"], ["def", "extract_unique_activation", "(", "all_activity_pattern", ")", ":", "\n", "\n", "    ", "pattern_vector", "=", "[", "]", "\n", "pat_num", "=", "np", ".", "size", "(", "all_activity_pattern", ",", "0", ")", "\n", "lp", "=", "np", ".", "zeros", "(", "(", "1", ",", "pat_num", ")", ")", "\n", "for", "nseq", "in", "range", "(", "pat_num", ")", ":", "\n", "        ", "mat", "=", "all_activity_pattern", "[", "nseq", "]", "\n", "winner_x", "=", "mat", "[", "0", ",", "0", "]", "\n", "winner_y", "=", "mat", "[", "0", ",", "1", "]", "\n", "mat_n", "=", "1000", "*", "np", ".", "ones", "(", "(", "1", ",", "2", ")", ")", "\n", "for", "nfr", "in", "range", "(", "np", ".", "size", "(", "mat", ",", "0", ")", ")", ":", "\n", "            ", "if", "mat", "[", "nfr", ",", "0", "]", "!=", "winner_x", "or", "mat", "[", "nfr", ",", "1", "]", "!=", "winner_y", ":", "\n", "                ", "vec", "=", "np", ".", "array", "(", "[", "[", "winner_x", ",", "winner_y", "]", "]", ")", "\n", "mat_n", "=", "np", ".", "vstack", "(", "(", "mat_n", ",", "vec", ")", ")", "\n", "winner_x", "=", "mat", "[", "nfr", ",", "0", "]", "\n", "winner_y", "=", "mat", "[", "nfr", ",", "1", "]", "\n", "\n", "", "", "if", "mat_n", "[", "-", "1", ",", "0", "]", "!=", "winner_x", "or", "mat_n", "[", "-", "1", ",", "1", "]", "!=", "winner_y", ":", "\n", "            ", "vec", "=", "np", ".", "array", "(", "[", "[", "winner_x", ",", "winner_y", "]", "]", ")", "\n", "mat_n", "=", "np", ".", "vstack", "(", "(", "mat_n", ",", "vec", ")", ")", "\n", "\n", "", "pattern_vector", ".", "append", "(", "mat_n", "[", "1", ":", "np", ".", "size", "(", "mat_n", ",", "0", ")", ",", ":", "]", ")", "\n", "lp", "[", "0", ",", "nseq", "]", "=", "np", ".", "size", "(", "mat_n", ",", "0", ")", "-", "1", "\n", "del", "mat_n", "\n", "\n", "", "l_max", "=", "np", ".", "max", "(", "lp", ")", "\n", "\n", "return", "pattern_vector", ",", "l_max", "\n", "\n"]], "home.repos.pwc.inspect_result.zahrag_3DHARSOM.Superimposition.get_activations.place_new_node": [[42, 69], ["numpy.linalg.norm", "numpy.array", "numpy.linalg.norm", "math.sqrt", "numpy.linalg.norm", "numpy.array", "numpy.linalg.norm", "numpy.linalg.norm", "print", "numpy.linalg.norm", "math.sqrt"], "function", ["None"], ["", "def", "place_new_node", "(", "p1", ",", "p2", ",", "p3", ",", "delta", ")", ":", "\n", "\n", "    ", "if", "LA", ".", "norm", "(", "p2", "-", "p1", ")", ">", "delta", ":", "\n", "        ", "n", "=", "(", "p2", "-", "p1", ")", "/", "LA", ".", "norm", "(", "p2", "-", "p1", ")", "\n", "t", "=", "delta", "/", "math", ".", "sqrt", "(", "n", "[", "0", "]", "**", "2", "+", "n", "[", "1", "]", "**", "2", ")", "\n", "Pn", "=", "np", ".", "array", "(", "[", "n", "[", "0", "]", "*", "t", "+", "p1", "[", "0", "]", ",", "n", "[", "1", "]", "*", "t", "+", "p1", "[", "1", "]", "]", ")", "\n", "com", "=", "True", "\n", "\n", "", "elif", "LA", ".", "norm", "(", "p2", "-", "p1", ")", "<", "delta", ":", "\n", "\n", "        ", "delta1", "=", "delta", "-", "LA", ".", "norm", "(", "p2", "-", "p1", ")", "\n", "if", "LA", ".", "norm", "(", "p3", "-", "p2", ")", "==", "0", ":", "\n", "            ", "print", "(", "'p1, p2, p3, delta:'", ",", "p1", ",", "p2", ",", "p3", ",", "delta", ")", "\n", "\n", "", "n", "=", "(", "p3", "-", "p2", ")", "/", "LA", ".", "norm", "(", "p3", "-", "p2", ")", "\n", "\n", "t", "=", "delta1", "/", "math", ".", "sqrt", "(", "n", "[", "0", "]", "**", "2", "+", "n", "[", "1", "]", "**", "2", ")", "\n", "Pn", "=", "np", ".", "array", "(", "[", "n", "[", "0", "]", "*", "t", "+", "p1", "[", "0", "]", ",", "n", "[", "1", "]", "*", "t", "+", "p1", "[", "1", "]", "]", ")", "\n", "\n", "com", "=", "False", "\n", "\n", "", "else", ":", "\n", "\n", "        ", "Pn", "=", "p2", "\n", "com", "=", "False", "\n", "\n", "", "return", "Pn", ",", "com", "\n", "\n"]], "home.repos.pwc.inspect_result.zahrag_3DHARSOM.Superimposition.get_activations.superimposition": [[71, 122], ["get_activations.extract_unique_activation", "numpy.size", "int", "range", "numpy.size", "all_pmat_n.append", "range", "range", "np.insert.flatten", "numpy.insert", "numpy.linalg.norm", "numpy.insert", "numpy.size", "get_activations.place_new_node", "numpy.size", "numpy.insert", "numpy.delete", "numpy.insert"], "function", ["home.repos.pwc.inspect_result.zahrag_3DHARSOM.Superimposition.get_activations.extract_unique_activation", "home.repos.pwc.inspect_result.zahrag_3DHARSOM.Superimposition.get_activations.place_new_node"], ["", "def", "superimposition", "(", "all_activity_pattern", ")", ":", "\n", "\n", "    ", "all_pmat", ",", "l_m", "=", "extract_unique_activation", "(", "all_activity_pattern", ")", "\n", "\n", "pat_num", "=", "np", ".", "size", "(", "all_activity_pattern", ",", "0", ")", "\n", "l_max", "=", "int", "(", "l_m", ")", "\n", "all_pmat_n", "=", "[", "]", "\n", "for", "nseq", "in", "range", "(", "pat_num", ")", ":", "\n", "\n", "        ", "pmat", "=", "all_pmat", "[", "nseq", "]", "\n", "pmat0", "=", "pmat", "\n", "l_seq", "=", "np", ".", "size", "(", "pmat", ",", "0", ")", "\n", "if", "l_seq", "==", "1", ":", "\n", "            ", "for", "nl", "in", "range", "(", "l_max", "-", "1", ")", ":", "\n", "                ", "pmat", "=", "np", ".", "insert", "(", "pmat", ",", "-", "1", ",", "pmat", "[", "0", ",", ":", "]", ",", "axis", "=", "0", ")", "\n", "\n", "", "", "else", ":", "\n", "\n", "            ", "L", "=", "0", "\n", "for", "cnt1", "in", "range", "(", "l_seq", "-", "1", ")", ":", "\n", "                ", "L", "+=", "LA", ".", "norm", "(", "pmat", "[", "cnt1", "+", "1", ",", ":", "]", "-", "pmat", "[", "cnt1", ",", ":", "]", ")", "\n", "\n", "", "delta", "=", "L", "/", "l_max", "\n", "\n", "ip", "=", "0", "\n", "stop", "=", "False", "\n", "while", "not", "stop", ":", "\n", "\n", "                ", "if", "ip", "==", "np", ".", "size", "(", "pmat", ",", "0", ")", "-", "2", ":", "\n", "                    ", "Pn", "=", "0.5", "*", "(", "pmat", "[", "ip", ",", ":", "]", "+", "pmat", "[", "ip", "+", "1", ",", ":", "]", ")", "\n", "pmat", "=", "np", ".", "insert", "(", "pmat", ",", "ip", "+", "1", ",", "Pn", ",", "axis", "=", "0", ")", "\n", "\n", "", "if", "np", ".", "size", "(", "pmat", ",", "0", ")", "==", "l_max", ":", "\n", "                    ", "stop", "=", "True", "\n", "\n", "", "else", ":", "\n", "                    ", "Pn", ",", "com", "=", "place_new_node", "(", "pmat", "[", "ip", ",", ":", "]", ",", "pmat", "[", "ip", "+", "1", ",", ":", "]", ",", "pmat", "[", "ip", "+", "2", ",", ":", "]", ",", "delta", ")", "\n", "if", "com", ":", "\n", "                        ", "pmat", "=", "np", ".", "insert", "(", "pmat", ",", "ip", "+", "1", ",", "Pn", ",", "axis", "=", "0", ")", "\n", "", "else", ":", "\n", "                        ", "pmat", "=", "np", ".", "delete", "(", "pmat", ",", "ip", "+", "1", ",", "axis", "=", "0", ")", "\n", "pmat", "=", "np", ".", "insert", "(", "pmat", ",", "ip", "+", "1", ",", "Pn", ",", "axis", "=", "0", ")", "\n", "\n", "", "ip", "+=", "1", "\n", "\n", "", "", "", "all_pmat_n", ".", "append", "(", "pmat", ".", "flatten", "(", ")", ")", "\n", "\n", "del", "pmat", "\n", "del", "pmat0", "\n", "\n", "", "return", "all_pmat_n", ",", "l_max", "\n", "\n"]], "home.repos.pwc.inspect_result.zahrag_3DHARSOM.Superimposition.get_activations.get_snn_activations": [[124, 163], ["numpy.zeros", "range", "len", "range", "all_true.append", "numpy.argmax", "all_pred_ave.append", "numpy.argmax", "all_pred_max.append", "numpy.argmax", "all_pred_mean.append", "len", "len", "len", "numpy.max", "numpy.mean", "numpy.sum", "numpy.sum", "int"], "function", ["None"], ["", "def", "get_snn_activations", "(", "all_snn_activity", ",", "data_index", ",", "data_class", ",", "nbr_of_class", ",", "max_seed", ")", ":", "\n", "\n", "    ", "activity_map_seq", "=", "np", ".", "zeros", "(", "(", "max_seed", ",", "nbr_of_class", ")", ")", "\n", "result_max", "=", "0.0", "\n", "result_mean", "=", "0.0", "\n", "all_pred_max", "=", "[", "]", "\n", "all_pred_mean", "=", "[", "]", "\n", "all_pred_ave", "=", "[", "]", "\n", "all_true", "=", "[", "]", "\n", "for", "cnt_seq", "in", "range", "(", "len", "(", "data_index", ")", ")", ":", "\n", "        ", "for", "cnt_models", "in", "range", "(", "max_seed", ")", ":", "\n", "            ", "activity_map_seq", "[", "cnt_models", ",", ":", "]", "=", "all_snn_activity", "[", "cnt_models", "]", "[", "cnt_seq", "]", "\n", "\n", "# True Action", "\n", "", "a_true", "=", "data_class", "[", "int", "(", "data_index", "[", "cnt_seq", "]", ")", "]", "[", "2", "]", "\n", "all_true", ".", "append", "(", "a_true", ")", "\n", "\n", "# Approach1:", "\n", "a_pred", "=", "np", ".", "argmax", "(", "activity_map_seq", ",", "axis", "=", "1", ")", "\n", "pred_seq", "=", "a_pred", "==", "a_true", "\n", "all_pred_ave", ".", "append", "(", "np", ".", "sum", "(", "pred_seq", ")", "/", "max_seed", ")", "\n", "\n", "# Approach2 (Max-Operator): Predicted Action", "\n", "a_pred_max", "=", "np", ".", "argmax", "(", "np", ".", "max", "(", "activity_map_seq", ",", "axis", "=", "0", ")", ")", "\n", "if", "a_pred_max", "==", "a_true", ":", "\n", "            ", "result_max", "+=", "1", "\n", "", "all_pred_max", ".", "append", "(", "a_pred_max", ")", "\n", "\n", "# Approach3 (Mean-Operator): Predicted Action", "\n", "a_pred_mean", "=", "np", ".", "argmax", "(", "np", ".", "mean", "(", "activity_map_seq", ",", "axis", "=", "0", ")", ")", "\n", "if", "a_pred_mean", "==", "a_true", ":", "\n", "            ", "result_mean", "+=", "1", "\n", "", "all_pred_mean", ".", "append", "(", "a_pred_mean", ")", "\n", "\n", "", "result_max_operator", "=", "100", "*", "result_max", "/", "len", "(", "data_index", ")", "\n", "result_mean_operator", "=", "100", "*", "result_mean", "/", "len", "(", "data_index", ")", "\n", "result", "=", "100", "*", "np", ".", "sum", "(", "all_pred_ave", ")", "/", "len", "(", "data_index", ")", "\n", "\n", "return", "result", ",", "result_max_operator", ",", "result_mean_operator", ",", "all_true", ",", "all_pred_ave", ",", "all_pred_max", ",", "all_pred_mean", "\n", "\n"]], "home.repos.pwc.inspect_result.zahrag_3DHARSOM.Illustration.make_illusteration.plot_activation_pattern": [[12, 44], ["int", "make_illusteration.make_plots", "make_illusteration.make_plots", "os.path.exists", "os.makedirs", "numpy.size"], "function", ["home.repos.pwc.inspect_result.zahrag_3DHARSOM.Illustration.make_illusteration.make_plots", "home.repos.pwc.inspect_result.zahrag_3DHARSOM.Illustration.make_illusteration.make_plots"], ["def", "plot_activation_pattern", "(", "pattern", ",", "pattern_n", ",", "net", ",", "rs", ",", "datainfo", ",", "seed", ",", "path", ",", "illus", "=", "None", ",", "save_figs", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n       This function plots the action pattern vectors.\n       Args:\n            pattern: Original action pattern vectors.\n            pattern_n: Generated action pattern vectors by applying superimposition layer.\n            net: Network designed and built for phase_I.\n            rs: Random selector module.\n            datainfo: Input dataset information.\n            seed: Current running seed.\n            path: Path to save patterns.\n            illus: Flag to permit illustration.\n            save_figs: Flag to permit saving patterns.\n\n        \"\"\"", "\n", "\n", "if", "illus", ":", "\n", "        ", "patt_path", "=", "path", "+", "'/'", "+", "'model{}/'", ".", "format", "(", "seed", "+", "1", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "patt_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "patt_path", ")", "\n", "\n", "", "l_x", "=", "net", ".", "outputsize_x", "\n", "l_y", "=", "net", ".", "outputsize_y", "\n", "L_max", "=", "int", "(", "np", ".", "size", "(", "pattern_n", ",", "1", ")", "/", "2", ")", "\n", "\n", "# Train & Validation sets", "\n", "make_plots", "(", "pattern", ",", "pattern_n", ",", "datainfo", ".", "class_all", ",", "L_max", ",", "l_x", ",", "l_y", ",", "rs", ".", "nbr_class", ",", "rs", ".", "tr_val_set", ",", "patt_path", ",", "\n", "train", "=", "True", ",", "save_figs", "=", "save_figs", ")", "\n", "\n", "# Test set", "\n", "make_plots", "(", "pattern", ",", "pattern_n", ",", "datainfo", ".", "class_all", ",", "L_max", ",", "l_x", ",", "l_y", ",", "rs", ".", "nbr_class", ",", "rs", ".", "ts_set", ",", "patt_path", ",", "\n", "train", "=", "False", ",", "save_figs", "=", "save_figs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zahrag_3DHARSOM.Illustration.make_illusteration.make_plots": [[46, 92], ["range", "range", "range", "matplotlib.show", "vec_pat.append", "vec_pat_n.append", "len", "int", "int", "vec_pat[].append", "pattern_n[].resize", "vec_pat_n[].append", "matplotlib.subplots", "range", "int", "int", "len", "len", "axs[].plot", "axs[].set_xlim", "axs[].set_ylim", "int", "axs[].plot", "axs[].set_xlim", "axs[].set_ylim", "matplotlib.savefig", "matplotlib.savefig", "len", "len"], "function", ["None"], ["", "", "def", "make_plots", "(", "pattern", ",", "pattern_n", ",", "class_info", ",", "L_max", ",", "l_x", ",", "l_y", ",", "nbr_of_class", ",", "set_index", ",", "path", ",", "\n", "train", "=", "None", ",", "save_figs", "=", "None", ")", ":", "\n", "\n", "    ", "vec_pat", "=", "[", "]", "\n", "vec_pat_n", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "nbr_of_class", ")", ":", "\n", "        ", "vec_pat", ".", "append", "(", "[", "]", ")", "\n", "vec_pat_n", ".", "append", "(", "[", "]", ")", "\n", "", "for", "nseq", "in", "range", "(", "len", "(", "set_index", ")", ")", ":", "\n", "        ", "seq_index", "=", "int", "(", "set_index", "[", "nseq", "]", ")", "\n", "class_label", "=", "int", "(", "class_info", "[", "seq_index", "]", "[", "2", "]", ")", "\n", "vec_pat", "[", "class_label", "]", ".", "append", "(", "pattern", "[", "seq_index", "]", ")", "\n", "pattern_n", "[", "seq_index", "]", ".", "resize", "(", "L_max", ",", "2", ")", "\n", "vec_pat_n", "[", "class_label", "]", ".", "append", "(", "pattern_n", "[", "seq_index", "]", ")", "\n", "\n", "", "for", "na", "in", "range", "(", "nbr_of_class", ")", ":", "\n", "        ", "if", "len", "(", "vec_pat", "[", "na", "]", ")", "%", "2", "==", "0", ":", "\n", "            ", "n_cols", "=", "int", "(", "len", "(", "vec_pat", "[", "na", "]", ")", "/", "2", ")", "\n", "", "else", ":", "\n", "            ", "n_cols", "=", "int", "(", "(", "len", "(", "vec_pat", "[", "na", "]", ")", "+", "1", ")", "/", "2", ")", "\n", "", "fig", ",", "axs", "=", "plt", ".", "subplots", "(", "2", ",", "n_cols", ",", "figsize", "=", "(", "15", ",", "6", ")", ",", "facecolor", "=", "'w'", ",", "edgecolor", "=", "'k'", ")", "\n", "# axs.set_title('Action:{}'.format(na))", "\n", "\n", "for", "ns", "in", "range", "(", "len", "(", "vec_pat", "[", "na", "]", ")", ")", ":", "\n", "            ", "vec", "=", "vec_pat", "[", "na", "]", "[", "ns", "]", "\n", "vec_n", "=", "vec_pat_n", "[", "na", "]", "[", "ns", "]", "\n", "if", "ns", "<", "n_cols", ":", "\n", "                ", "axs", "[", "0", ",", "ns", "]", ".", "plot", "(", "vec", "[", ":", ",", "0", "]", ",", "vec", "[", ":", ",", "1", "]", ",", "'k--'", ",", "\n", "vec_n", "[", ":", ",", "0", "]", ",", "vec_n", "[", ":", ",", "1", "]", ",", "'ko'", ")", "\n", "axs", "[", "0", ",", "ns", "]", ".", "set_xlim", "(", "[", "0", ",", "l_x", "]", ")", "\n", "axs", "[", "0", ",", "ns", "]", ".", "set_ylim", "(", "[", "0", ",", "l_y", "]", ")", "\n", "\n", "", "else", ":", "\n", "                ", "ns_", "=", "int", "(", "ns", "%", "n_cols", ")", "\n", "axs", "[", "1", ",", "ns_", "]", ".", "plot", "(", "vec", "[", ":", ",", "0", "]", ",", "vec", "[", ":", ",", "1", "]", ",", "'k--'", ",", "\n", "vec_n", "[", ":", ",", "0", "]", ",", "vec_n", "[", ":", ",", "1", "]", ",", "'ko'", ")", "\n", "axs", "[", "1", ",", "ns_", "]", ".", "set_xlim", "(", "[", "0", ",", "l_x", "]", ")", "\n", "axs", "[", "1", ",", "ns_", "]", ".", "set_ylim", "(", "[", "0", ",", "l_y", "]", ")", "\n", "\n", "", "", "if", "save_figs", ":", "\n", "            ", "if", "train", ":", "\n", "                ", "plt", ".", "savefig", "(", "'{}Train_Action{}.pdf'", ".", "format", "(", "path", ",", "na", ")", ",", "bbox_inches", "=", "'tight'", ")", "\n", "", "else", ":", "\n", "                ", "plt", ".", "savefig", "(", "'{}Test_Action{}.pdf'", ".", "format", "(", "path", ",", "na", ")", ",", "bbox_inches", "=", "'tight'", ")", "\n", "\n", "", "", "", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zahrag_3DHARSOM.Save_Load_Data.save_load_data.save_models": [[12, 18], ["os.getcwd", "open", "pickle.dump"], "function", ["None"], ["def", "save_models", "(", "path", ",", "model", ",", "save", "=", "None", ")", ":", "\n", "\n", "    ", "if", "save", ":", "\n", "        ", "os", ".", "getcwd", "(", ")", "\n", "with", "open", "(", "path", ",", "'wb'", ")", "as", "handle", ":", "\n", "            ", "pickle", ".", "dump", "(", "model", ",", "handle", ",", "protocol", "=", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zahrag_3DHARSOM.Save_Load_Data.save_load_data.load_models": [[20, 26], ["open", "pickle.load"], "function", ["None"], ["", "", "", "def", "load_models", "(", "path", ")", ":", "\n", "\n", "    ", "with", "open", "(", "path", ",", "'rb'", ")", "as", "handle", ":", "\n", "        ", "model", "=", "pickle", ".", "load", "(", "handle", ")", "\n", "\n", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.zahrag_3DHARSOM.Preprocessing.Nomalization.make_normalization": [[10, 27], ["input_data.reshape", "numpy.max", "numpy.max", "numpy.max", "input_data.reshape.reshape", "numpy.min", "numpy.min"], "function", ["None"], ["def", "make_normalization", "(", "input_data", ")", ":", "\n", "\n", "    ", "'''\n         This function normalizes 3D joints positions\n        '''", "\n", "\n", "mat", "=", "input_data", ".", "reshape", "(", "15", ",", "3", ")", "\n", "mat", "[", ":", ",", "0", "]", "/=", "np", ".", "max", "(", "mat", "[", ":", ",", "0", "]", ")", "\n", "mat", "[", ":", ",", "1", "]", "/=", "np", ".", "max", "(", "mat", "[", ":", ",", "1", "]", ")", "\n", "mat", "[", ":", ",", "2", "]", "/=", "np", ".", "max", "(", "mat", "[", ":", ",", "2", "]", ")", "\n", "\n", "if", "np", ".", "min", "(", "mat", ")", "<", "0", ":", "\n", "        ", "mat", "=", "mat", "-", "np", ".", "min", "(", "mat", ")", "\n", "\n", "", "output_data", "=", "mat", ".", "reshape", "(", "1", ",", "45", ")", "\n", "\n", "return", "output_data", "\n", "", ""]], "home.repos.pwc.inspect_result.zahrag_3DHARSOM.Preprocessing.Attection.make_attention": [[10, 204], ["numpy.expand_dims", "numpy.zeros", "numpy.zeros", "numpy.zeros"], "function", ["None"], ["def", "make_attention", "(", "input_data", ",", "n_act", ",", "dataset", ")", ":", "\n", "\n", "    ", "'''\n        This function applies an attention mechanism as a pre-processing layer based on the joint velocity while acting.\n        Attention mechanism is applied in running experiments using MSR-Actio3D datasets only.\n\n        MSR_Action3D_1: The actions of this dataset are all performed using left arm, and the motion velocities of\n        4 joints of the left arms were averagely superior compared to all other joints. We applied\n        two different attention approaches in joints selection but the results reported in the papers are based on app1.\n\n        MSR_Action3D_2: The actions of this dataset are performed by the joints of arms as well as legs.\n        Based on the joints velocity, we made selection of 4 joints with averagely maximum motion velocity while acting.\n        Further investigations of joints selection playing bigger role in acting could be done in future studies.\n\n        MSR_Action3D_all: This set is composed of the actions of MSR_Action3D_1 and MSR_Action3D_2.\n\n        '''", "\n", "\n", "output_data", "=", "input_data", "\n", "input_data", "=", "np", ".", "expand_dims", "(", "input_data", ",", "1", ")", "\n", "\n", "# MSR", "\n", "# Body and Head: J7(stomach/center of hips), J4(torso), J3(neck), J20(head)", "\n", "# Right Arm: (J3) J1, J8, J10, J12", "\n", "# Left Arm:  (J3) J2, J9, J11, J13", "\n", "# Right Leg: (J7) J5, J14, J16, J18", "\n", "# Left Leg:  (J7) J6, J15, J17, J19", "\n", "\n", "if", "dataset", "==", "'MSR_Action3D_1'", ":", "\n", "\n", "        ", "output_data", "=", "np", ".", "zeros", "(", "(", "1", ",", "12", ")", ")", "\n", "app", "=", "1", "\n", "if", "app", "==", "1", ":", "\n", "# Left Arm (J2, J9, J11, J13)", "\n", "            ", "output_data", "[", "0", ",", "0", "]", "=", "input_data", "[", "3", ",", "0", "]", "\n", "output_data", "[", "0", ",", "1", "]", "=", "input_data", "[", "4", ",", "0", "]", "\n", "output_data", "[", "0", ",", "2", "]", "=", "input_data", "[", "5", ",", "0", "]", "\n", "output_data", "[", "0", ",", "3", "]", "=", "input_data", "[", "24", ",", "0", "]", "\n", "output_data", "[", "0", ",", "4", "]", "=", "input_data", "[", "25", ",", "0", "]", "\n", "output_data", "[", "0", ",", "5", "]", "=", "input_data", "[", "26", ",", "0", "]", "\n", "output_data", "[", "0", ",", "6", "]", "=", "input_data", "[", "30", ",", "0", "]", "\n", "output_data", "[", "0", ",", "7", "]", "=", "input_data", "[", "31", ",", "0", "]", "\n", "output_data", "[", "0", ",", "8", "]", "=", "input_data", "[", "32", ",", "0", "]", "\n", "output_data", "[", "0", ",", "9", "]", "=", "input_data", "[", "36", ",", "0", "]", "\n", "output_data", "[", "0", ",", "10", "]", "=", "input_data", "[", "37", ",", "0", "]", "\n", "output_data", "[", "0", ",", "11", "]", "=", "input_data", "[", "38", ",", "0", "]", "\n", "\n", "", "elif", "app", "==", "2", ":", "\n", "# Left Arm (J9, J11)", "\n", "            ", "output_data", "[", "0", ",", "0", "]", "=", "input_data", "[", "24", ",", "0", "]", "\n", "output_data", "[", "0", ",", "1", "]", "=", "input_data", "[", "25", ",", "0", "]", "\n", "output_data", "[", "0", ",", "2", "]", "=", "input_data", "[", "26", ",", "0", "]", "\n", "output_data", "[", "0", ",", "3", "]", "=", "input_data", "[", "30", ",", "0", "]", "\n", "output_data", "[", "0", ",", "4", "]", "=", "input_data", "[", "31", ",", "0", "]", "\n", "output_data", "[", "0", ",", "5", "]", "=", "input_data", "[", "32", ",", "0", "]", "\n", "# Right Arm (J8, J10)", "\n", "output_data", "[", "0", ",", "6", "]", "=", "input_data", "[", "21", ",", "0", "]", "\n", "output_data", "[", "0", ",", "7", "]", "=", "input_data", "[", "22", ",", "0", "]", "\n", "output_data", "[", "0", ",", "8", "]", "=", "input_data", "[", "23", ",", "0", "]", "\n", "output_data", "[", "0", ",", "9", "]", "=", "input_data", "[", "27", ",", "0", "]", "\n", "output_data", "[", "0", ",", "10", "]", "=", "input_data", "[", "28", ",", "0", "]", "\n", "output_data", "[", "0", ",", "11", "]", "=", "input_data", "[", "29", ",", "0", "]", "\n", "\n", "", "", "elif", "dataset", "==", "'MSR_Action3D_2'", ":", "\n", "        ", "output_data", "=", "np", ".", "zeros", "(", "(", "1", ",", "12", ")", ")", "\n", "if", "n_act", "in", "[", "0", ",", "1", ",", "2", ",", "7", ",", "8", ",", "9", "]", ":", "\n", "            ", "output_data", "[", "0", ",", "0", "]", "=", "input_data", "[", "21", ",", "0", "]", "\n", "output_data", "[", "0", ",", "1", "]", "=", "input_data", "[", "22", ",", "0", "]", "\n", "output_data", "[", "0", ",", "2", "]", "=", "input_data", "[", "23", ",", "0", "]", "\n", "output_data", "[", "0", ",", "3", "]", "=", "input_data", "[", "27", ",", "0", "]", "\n", "output_data", "[", "0", ",", "4", "]", "=", "input_data", "[", "28", ",", "0", "]", "\n", "output_data", "[", "0", ",", "5", "]", "=", "input_data", "[", "29", ",", "0", "]", "\n", "output_data", "[", "0", ",", "6", "]", "=", "input_data", "[", "24", ",", "0", "]", "\n", "output_data", "[", "0", ",", "7", "]", "=", "input_data", "[", "25", ",", "0", "]", "\n", "output_data", "[", "0", ",", "8", "]", "=", "input_data", "[", "26", ",", "0", "]", "\n", "output_data", "[", "0", ",", "9", "]", "=", "input_data", "[", "30", ",", "0", "]", "\n", "output_data", "[", "0", ",", "10", "]", "=", "input_data", "[", "31", ",", "0", "]", "\n", "output_data", "[", "0", ",", "11", "]", "=", "input_data", "[", "32", ",", "0", "]", "\n", "\n", "", "if", "n_act", "==", "3", ":", "\n", "            ", "output_data", "[", "0", ",", "0", "]", "=", "input_data", "[", "57", ",", "0", "]", "\n", "output_data", "[", "0", ",", "1", "]", "=", "input_data", "[", "58", ",", "0", "]", "\n", "output_data", "[", "0", ",", "2", "]", "=", "input_data", "[", "59", ",", "0", "]", "\n", "output_data", "[", "0", ",", "3", "]", "=", "input_data", "[", "6", ",", "0", "]", "\n", "output_data", "[", "0", ",", "4", "]", "=", "input_data", "[", "7", ",", "0", "]", "\n", "output_data", "[", "0", ",", "5", "]", "=", "input_data", "[", "8", ",", "0", "]", "\n", "output_data", "[", "0", ",", "6", "]", "=", "input_data", "[", "9", ",", "0", "]", "\n", "output_data", "[", "0", ",", "7", "]", "=", "input_data", "[", "10", ",", "0", "]", "\n", "output_data", "[", "0", ",", "8", "]", "=", "input_data", "[", "11", ",", "0", "]", "\n", "output_data", "[", "0", ",", "9", "]", "=", "input_data", "[", "18", ",", "0", "]", "\n", "output_data", "[", "0", ",", "10", "]", "=", "input_data", "[", "19", ",", "0", "]", "\n", "output_data", "[", "0", ",", "11", "]", "=", "input_data", "[", "20", ",", "0", "]", "\n", "\n", "", "if", "n_act", "in", "[", "4", ",", "5", "]", ":", "\n", "            ", "output_data", "[", "0", ",", "0", "]", "=", "input_data", "[", "39", ",", "0", "]", "\n", "output_data", "[", "0", ",", "1", "]", "=", "input_data", "[", "40", ",", "0", "]", "\n", "output_data", "[", "0", ",", "2", "]", "=", "input_data", "[", "41", ",", "0", "]", "\n", "output_data", "[", "0", ",", "3", "]", "=", "input_data", "[", "45", ",", "0", "]", "\n", "output_data", "[", "0", ",", "4", "]", "=", "input_data", "[", "46", ",", "0", "]", "\n", "output_data", "[", "0", ",", "5", "]", "=", "input_data", "[", "47", ",", "0", "]", "\n", "output_data", "[", "0", ",", "6", "]", "=", "input_data", "[", "42", ",", "0", "]", "\n", "output_data", "[", "0", ",", "7", "]", "=", "input_data", "[", "43", ",", "0", "]", "\n", "output_data", "[", "0", ",", "8", "]", "=", "input_data", "[", "44", ",", "0", "]", "\n", "output_data", "[", "0", ",", "9", "]", "=", "input_data", "[", "48", ",", "0", "]", "\n", "output_data", "[", "0", ",", "10", "]", "=", "input_data", "[", "49", ",", "0", "]", "\n", "output_data", "[", "0", ",", "11", "]", "=", "input_data", "[", "50", ",", "0", "]", "\n", "\n", "", "if", "n_act", "==", "6", ":", "\n", "            ", "output_data", "[", "0", ",", "0", "]", "=", "input_data", "[", "27", ",", "0", "]", "\n", "output_data", "[", "0", ",", "1", "]", "=", "input_data", "[", "28", ",", "0", "]", "\n", "output_data", "[", "0", ",", "2", "]", "=", "input_data", "[", "29", ",", "0", "]", "\n", "output_data", "[", "0", ",", "3", "]", "=", "input_data", "[", "30", ",", "0", "]", "\n", "output_data", "[", "0", ",", "4", "]", "=", "input_data", "[", "31", ",", "0", "]", "\n", "output_data", "[", "0", ",", "5", "]", "=", "input_data", "[", "32", ",", "0", "]", "\n", "output_data", "[", "0", ",", "6", "]", "=", "input_data", "[", "45", ",", "0", "]", "\n", "output_data", "[", "0", ",", "7", "]", "=", "input_data", "[", "46", ",", "0", "]", "\n", "output_data", "[", "0", ",", "8", "]", "=", "input_data", "[", "47", ",", "0", "]", "\n", "output_data", "[", "0", ",", "9", "]", "=", "input_data", "[", "48", ",", "0", "]", "\n", "output_data", "[", "0", ",", "10", "]", "=", "input_data", "[", "49", ",", "0", "]", "\n", "output_data", "[", "0", ",", "11", "]", "=", "input_data", "[", "50", ",", "0", "]", "\n", "\n", "", "", "elif", "dataset", "==", "'MSR_Action3D_all'", ":", "\n", "        ", "output_data", "=", "np", ".", "zeros", "(", "(", "1", ",", "12", ")", ")", "\n", "if", "n_act", "<", "10", ":", "\n", "            ", "output_data", "[", "0", ",", "0", "]", "=", "input_data", "[", "3", ",", "0", "]", "\n", "output_data", "[", "0", ",", "1", "]", "=", "input_data", "[", "4", ",", "0", "]", "\n", "output_data", "[", "0", ",", "2", "]", "=", "input_data", "[", "5", ",", "0", "]", "\n", "output_data", "[", "0", ",", "3", "]", "=", "input_data", "[", "24", ",", "0", "]", "\n", "output_data", "[", "0", ",", "4", "]", "=", "input_data", "[", "25", ",", "0", "]", "\n", "output_data", "[", "0", ",", "5", "]", "=", "input_data", "[", "26", ",", "0", "]", "\n", "output_data", "[", "0", ",", "6", "]", "=", "input_data", "[", "30", ",", "0", "]", "\n", "output_data", "[", "0", ",", "7", "]", "=", "input_data", "[", "31", ",", "0", "]", "\n", "output_data", "[", "0", ",", "8", "]", "=", "input_data", "[", "32", ",", "0", "]", "\n", "output_data", "[", "0", ",", "9", "]", "=", "input_data", "[", "36", ",", "0", "]", "\n", "output_data", "[", "0", ",", "10", "]", "=", "input_data", "[", "37", ",", "0", "]", "\n", "output_data", "[", "0", ",", "11", "]", "=", "input_data", "[", "38", ",", "0", "]", "\n", "\n", "", "if", "n_act", "in", "[", "0", "+", "10", ",", "1", "+", "10", ",", "2", "+", "10", ",", "7", "+", "10", ",", "8", "+", "10", ",", "9", "+", "10", "]", ":", "\n", "            ", "output_data", "[", "0", ",", "0", "]", "=", "input_data", "[", "21", ",", "0", "]", "\n", "output_data", "[", "0", ",", "1", "]", "=", "input_data", "[", "22", ",", "0", "]", "\n", "output_data", "[", "0", ",", "2", "]", "=", "input_data", "[", "23", ",", "0", "]", "\n", "output_data", "[", "0", ",", "3", "]", "=", "input_data", "[", "27", ",", "0", "]", "\n", "output_data", "[", "0", ",", "4", "]", "=", "input_data", "[", "28", ",", "0", "]", "\n", "output_data", "[", "0", ",", "5", "]", "=", "input_data", "[", "29", ",", "0", "]", "\n", "output_data", "[", "0", ",", "6", "]", "=", "input_data", "[", "24", ",", "0", "]", "\n", "output_data", "[", "0", ",", "7", "]", "=", "input_data", "[", "25", ",", "0", "]", "\n", "output_data", "[", "0", ",", "8", "]", "=", "input_data", "[", "26", ",", "0", "]", "\n", "output_data", "[", "0", ",", "9", "]", "=", "input_data", "[", "30", ",", "0", "]", "\n", "output_data", "[", "0", ",", "10", "]", "=", "input_data", "[", "31", ",", "0", "]", "\n", "output_data", "[", "0", ",", "11", "]", "=", "input_data", "[", "32", ",", "0", "]", "\n", "\n", "", "if", "n_act", "==", "3", "+", "10", ":", "\n", "            ", "output_data", "[", "0", ",", "0", "]", "=", "input_data", "[", "57", ",", "0", "]", "\n", "output_data", "[", "0", ",", "1", "]", "=", "input_data", "[", "58", ",", "0", "]", "\n", "output_data", "[", "0", ",", "2", "]", "=", "input_data", "[", "59", ",", "0", "]", "\n", "output_data", "[", "0", ",", "3", "]", "=", "input_data", "[", "6", ",", "0", "]", "\n", "output_data", "[", "0", ",", "4", "]", "=", "input_data", "[", "7", ",", "0", "]", "\n", "output_data", "[", "0", ",", "5", "]", "=", "input_data", "[", "8", ",", "0", "]", "\n", "output_data", "[", "0", ",", "6", "]", "=", "input_data", "[", "9", ",", "0", "]", "\n", "output_data", "[", "0", ",", "7", "]", "=", "input_data", "[", "10", ",", "0", "]", "\n", "output_data", "[", "0", ",", "8", "]", "=", "input_data", "[", "11", ",", "0", "]", "\n", "output_data", "[", "0", ",", "9", "]", "=", "input_data", "[", "18", ",", "0", "]", "\n", "output_data", "[", "0", ",", "10", "]", "=", "input_data", "[", "19", ",", "0", "]", "\n", "output_data", "[", "0", ",", "11", "]", "=", "input_data", "[", "20", ",", "0", "]", "\n", "\n", "", "if", "n_act", "in", "[", "4", "+", "10", ",", "5", "+", "10", "]", ":", "\n", "            ", "output_data", "[", "0", ",", "0", "]", "=", "input_data", "[", "39", ",", "0", "]", "\n", "output_data", "[", "0", ",", "1", "]", "=", "input_data", "[", "40", ",", "0", "]", "\n", "output_data", "[", "0", ",", "2", "]", "=", "input_data", "[", "41", ",", "0", "]", "\n", "output_data", "[", "0", ",", "3", "]", "=", "input_data", "[", "45", ",", "0", "]", "\n", "output_data", "[", "0", ",", "4", "]", "=", "input_data", "[", "46", ",", "0", "]", "\n", "output_data", "[", "0", ",", "5", "]", "=", "input_data", "[", "47", ",", "0", "]", "\n", "output_data", "[", "0", ",", "6", "]", "=", "input_data", "[", "42", ",", "0", "]", "\n", "output_data", "[", "0", ",", "7", "]", "=", "input_data", "[", "43", ",", "0", "]", "\n", "output_data", "[", "0", ",", "8", "]", "=", "input_data", "[", "44", ",", "0", "]", "\n", "output_data", "[", "0", ",", "9", "]", "=", "input_data", "[", "48", ",", "0", "]", "\n", "output_data", "[", "0", ",", "10", "]", "=", "input_data", "[", "49", ",", "0", "]", "\n", "output_data", "[", "0", ",", "11", "]", "=", "input_data", "[", "50", ",", "0", "]", "\n", "\n", "", "if", "n_act", "==", "6", "+", "10", ":", "\n", "            ", "output_data", "[", "0", ",", "0", "]", "=", "input_data", "[", "27", ",", "0", "]", "\n", "output_data", "[", "0", ",", "1", "]", "=", "input_data", "[", "28", ",", "0", "]", "\n", "output_data", "[", "0", ",", "2", "]", "=", "input_data", "[", "29", ",", "0", "]", "\n", "output_data", "[", "0", ",", "3", "]", "=", "input_data", "[", "30", ",", "0", "]", "\n", "output_data", "[", "0", ",", "4", "]", "=", "input_data", "[", "31", ",", "0", "]", "\n", "output_data", "[", "0", ",", "5", "]", "=", "input_data", "[", "32", ",", "0", "]", "\n", "output_data", "[", "0", ",", "6", "]", "=", "input_data", "[", "45", ",", "0", "]", "\n", "output_data", "[", "0", ",", "7", "]", "=", "input_data", "[", "46", ",", "0", "]", "\n", "output_data", "[", "0", ",", "8", "]", "=", "input_data", "[", "47", ",", "0", "]", "\n", "output_data", "[", "0", ",", "9", "]", "=", "input_data", "[", "48", ",", "0", "]", "\n", "output_data", "[", "0", ",", "10", "]", "=", "input_data", "[", "49", ",", "0", "]", "\n", "output_data", "[", "0", ",", "11", "]", "=", "input_data", "[", "50", ",", "0", "]", "\n", "\n", "", "", "return", "output_data", "\n", "", ""]], "home.repos.pwc.inspect_result.zahrag_3DHARSOM.Preprocessing.Dynamics.get_dynamics": [[10, 48], ["range", "len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "vel.append", "acc.append", "numpy.size", "numpy.size", "numpy.size", "numpy.size", "numpy.size", "numpy.size", "numpy.size", "numpy.size"], "function", ["None"], ["def", "get_dynamics", "(", "data", ")", ":", "\n", "\n", "    ", "'''\n        This function extracts first and second orders of dynamic representing velocity and acceleration of joints.\n       '''", "\n", "\n", "vel", "=", "[", "]", "\n", "acc", "=", "[", "]", "\n", "\n", "for", "nseq", "in", "range", "(", "len", "(", "data", ")", ")", ":", "# sequence counter", "\n", "\n", "        ", "data_seq", "=", "data", "[", "nseq", "]", "\n", "\n", "vel_seq", "=", "np", ".", "zeros", "(", "(", "np", ".", "size", "(", "data_seq", ",", "0", ")", ",", "np", ".", "size", "(", "data_seq", ",", "1", ")", ")", ")", "\n", "acc_seq", "=", "np", ".", "zeros", "(", "(", "np", ".", "size", "(", "data_seq", ",", "0", ")", ",", "np", ".", "size", "(", "data_seq", ",", "1", ")", ")", ")", "\n", "\n", "pos_0", "=", "np", ".", "zeros", "(", "(", "1", ",", "np", ".", "size", "(", "data_seq", ",", "1", ")", ")", ")", "\n", "pos_1", "=", "np", ".", "zeros", "(", "(", "1", ",", "np", ".", "size", "(", "data_seq", ",", "1", ")", ")", ")", "\n", "pos_2", "=", "np", ".", "zeros", "(", "(", "1", ",", "np", ".", "size", "(", "data_seq", ",", "1", ")", ")", ")", "\n", "\n", "for", "nfr", "in", "range", "(", "np", ".", "size", "(", "data_seq", ",", "0", ")", ")", ":", "# frame counter", "\n", "\n", "            ", "pos_2", "=", "pos_1", "\n", "pos_1", "=", "pos_0", "\n", "pos_0", "=", "data_seq", "[", "nfr", ",", ":", "]", "\n", "\n", "if", "nfr", ">", "0", ":", "\n", "                ", "vel_seq", "[", "nfr", ",", ":", "]", "=", "pos_0", "-", "pos_1", "\n", "\n", "", "if", "nfr", ">", "1", ":", "\n", "                ", "vel_0", "=", "pos_0", "-", "pos_1", "\n", "vel_1", "=", "pos_1", "-", "pos_2", "\n", "acc_seq", "[", "nfr", ",", ":", "]", "=", "vel_0", "-", "vel_1", "\n", "\n", "", "", "vel", ".", "append", "(", "vel_seq", ")", "\n", "acc", ".", "append", "(", "acc_seq", ")", "\n", "\n", "", "return", "vel", ",", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.zahrag_3DHARSOM.Preprocessing.Scaling.scaling": [[11, 108], ["numpy.zeros", "Scaling.get_scaled_position", "Scaling.get_scaled_position", "Scaling.get_scaled_position", "Scaling.get_scaled_position", "Scaling.get_scaled_position", "Scaling.get_scaled_position", "Scaling.get_scaled_position", "Scaling.get_scaled_position", "Scaling.get_scaled_position", "Scaling.get_scaled_position", "Scaling.get_scaled_position", "Scaling.get_scaled_position", "Scaling.get_scaled_position", "Scaling.get_scaled_position", "Scaling.get_scaled_position", "Scaling.get_scaled_position", "Scaling.get_scaled_position", "Scaling.get_scaled_position", "Scaling.get_scaled_position", "numpy.size"], "function", ["home.repos.pwc.inspect_result.zahrag_3DHARSOM.Preprocessing.Scaling.get_scaled_position", "home.repos.pwc.inspect_result.zahrag_3DHARSOM.Preprocessing.Scaling.get_scaled_position", "home.repos.pwc.inspect_result.zahrag_3DHARSOM.Preprocessing.Scaling.get_scaled_position", "home.repos.pwc.inspect_result.zahrag_3DHARSOM.Preprocessing.Scaling.get_scaled_position", "home.repos.pwc.inspect_result.zahrag_3DHARSOM.Preprocessing.Scaling.get_scaled_position", "home.repos.pwc.inspect_result.zahrag_3DHARSOM.Preprocessing.Scaling.get_scaled_position", "home.repos.pwc.inspect_result.zahrag_3DHARSOM.Preprocessing.Scaling.get_scaled_position", "home.repos.pwc.inspect_result.zahrag_3DHARSOM.Preprocessing.Scaling.get_scaled_position", "home.repos.pwc.inspect_result.zahrag_3DHARSOM.Preprocessing.Scaling.get_scaled_position", "home.repos.pwc.inspect_result.zahrag_3DHARSOM.Preprocessing.Scaling.get_scaled_position", "home.repos.pwc.inspect_result.zahrag_3DHARSOM.Preprocessing.Scaling.get_scaled_position", "home.repos.pwc.inspect_result.zahrag_3DHARSOM.Preprocessing.Scaling.get_scaled_position", "home.repos.pwc.inspect_result.zahrag_3DHARSOM.Preprocessing.Scaling.get_scaled_position", "home.repos.pwc.inspect_result.zahrag_3DHARSOM.Preprocessing.Scaling.get_scaled_position", "home.repos.pwc.inspect_result.zahrag_3DHARSOM.Preprocessing.Scaling.get_scaled_position", "home.repos.pwc.inspect_result.zahrag_3DHARSOM.Preprocessing.Scaling.get_scaled_position", "home.repos.pwc.inspect_result.zahrag_3DHARSOM.Preprocessing.Scaling.get_scaled_position", "home.repos.pwc.inspect_result.zahrag_3DHARSOM.Preprocessing.Scaling.get_scaled_position", "home.repos.pwc.inspect_result.zahrag_3DHARSOM.Preprocessing.Scaling.get_scaled_position"], ["def", "scaling", "(", "input_data", ")", ":", "\n", "\n", "    ", "'''\n        This functions applies an scaling mechanism to re-scale links connecting the two consecutive joints based on an\n        standard measure set by user.\n        :param input_data:\n        :return: Re-scaled skeleton\n        '''", "\n", "\n", "# MSR", "\n", "# Body and Head: J7, J4, J3, J20", "\n", "# Right Arm: J3, J1, J8, J10, J12", "\n", "# Left Arm:  J3, J2, J9, J11, J13", "\n", "# Right Leg: J7, J5, J14, J16, J18", "\n", "# Left Leg:  J7, J6, J15, J17, J19", "\n", "\n", "out", "=", "np", ".", "zeros", "(", "np", ".", "size", "(", "input_data", ")", ")", "\n", "st_lint", "=", "42.0951", "\n", "out", "[", "18", "]", "=", "input_data", "[", "18", "]", "\n", "out", "[", "19", "]", "=", "input_data", "[", "19", "]", "\n", "out", "[", "20", "]", "=", "input_data", "[", "20", "]", "\n", "ind", "=", "[", "18", ",", "9", "]", "\n", "out", "=", "get_scaled_position", "(", "input_data", ",", "ind", ",", "st_lint", "-", "0.35", "*", "st_lint", ")", "\n", "\n", "st_lint", "=", "53.6656", "\n", "ind", "=", "[", "9", ",", "6", "]", "\n", "out", "=", "get_scaled_position", "(", "input_data", ",", "ind", ",", "st_lint", "-", "0.35", "*", "st_lint", ")", "\n", "\n", "st_lint", "=", "58.2087", "\n", "ind", "=", "[", "6", ",", "57", "]", "\n", "out", "=", "get_scaled_position", "(", "input_data", ",", "ind", ",", "st_lint", "-", "0.35", "*", "st_lint", ")", "\n", "\n", "st_lint", "=", "40.9420", "\n", "ind", "=", "[", "6", ",", "0", "]", "\n", "out", "=", "get_scaled_position", "(", "input_data", ",", "ind", ",", "st_lint", "-", "0.35", "*", "st_lint", ")", "\n", "\n", "st_lint", "=", "57.2800", "\n", "ind", "=", "[", "0", ",", "21", "]", "\n", "out", "=", "get_scaled_position", "(", "input_data", ",", "ind", ",", "st_lint", "-", "0.35", "*", "st_lint", ")", "\n", "\n", "st_lint", "=", "62.4197", "\n", "ind", "=", "[", "21", ",", "27", "]", "\n", "out", "=", "get_scaled_position", "(", "input_data", ",", "ind", ",", "st_lint", "-", "0.35", "*", "st_lint", ")", "\n", "\n", "st_lint", "=", "14.2215", "\n", "ind", "=", "[", "27", ",", "33", "]", "\n", "out", "=", "get_scaled_position", "(", "input_data", ",", "ind", ",", "st_lint", "-", "0.35", "*", "st_lint", ")", "\n", "\n", "st_lint", "=", "42.2374", "\n", "ind", "=", "[", "6", ",", "3", "]", "\n", "out", "=", "get_scaled_position", "(", "input_data", ",", "ind", ",", "st_lint", "-", "0.35", "*", "st_lint", ")", "\n", "\n", "st_lint", "=", "57.2735", "\n", "ind", "=", "[", "3", ",", "24", "]", "\n", "out", "=", "get_scaled_position", "(", "input_data", ",", "ind", ",", "st_lint", "-", "0.35", "*", "st_lint", ")", "\n", "\n", "st_lint", "=", "62.7077", "\n", "ind", "=", "[", "24", ",", "30", "]", "\n", "out", "=", "get_scaled_position", "(", "input_data", ",", "ind", ",", "st_lint", "-", "0.35", "*", "st_lint", ")", "\n", "\n", "st_lint", "=", "14.0089", "\n", "ind", "=", "[", "30", ",", "36", "]", "\n", "out", "=", "get_scaled_position", "(", "input_data", ",", "ind", ",", "st_lint", "-", "0.35", "*", "st_lint", ")", "\n", "\n", "st_lint", "=", "35.1888", "\n", "ind", "=", "[", "18", ",", "12", "]", "\n", "out", "=", "get_scaled_position", "(", "input_data", ",", "ind", ",", "st_lint", "-", "0.35", "*", "st_lint", ")", "\n", "\n", "st_lint", "=", "122.3575", "\n", "ind", "=", "[", "12", ",", "39", "]", "\n", "out", "=", "get_scaled_position", "(", "input_data", ",", "ind", ",", "st_lint", "-", "0.35", "*", "st_lint", ")", "\n", "\n", "st_lint", "=", "82.8312", "\n", "ind", "=", "[", "39", ",", "45", "]", "\n", "out", "=", "get_scaled_position", "(", "input_data", ",", "ind", ",", "st_lint", "-", "0.35", "*", "st_lint", ")", "\n", "\n", "st_lint", "=", "30.0832", "\n", "ind", "=", "[", "45", ",", "51", "]", "\n", "out", "=", "get_scaled_position", "(", "input_data", ",", "ind", ",", "st_lint", "-", "0.35", "*", "st_lint", ")", "\n", "\n", "st_lint", "=", "32.4962", "\n", "ind", "=", "[", "18", ",", "15", "]", "\n", "out", "=", "get_scaled_position", "(", "input_data", ",", "ind", ",", "st_lint", "-", "0.35", "*", "st_lint", ")", "\n", "\n", "st_lint", "=", "120.3536", "\n", "ind", "=", "[", "15", ",", "42", "]", "\n", "out", "=", "get_scaled_position", "(", "input_data", ",", "ind", ",", "st_lint", "-", "0.35", "*", "st_lint", ")", "\n", "\n", "st_lint", "=", "86.1409", "\n", "ind", "=", "[", "42", ",", "48", "]", "\n", "out", "=", "get_scaled_position", "(", "input_data", ",", "ind", ",", "st_lint", "-", "0.35", "*", "st_lint", ")", "\n", "\n", "st_lint", "=", "27.7308", "\n", "ind", "=", "[", "48", ",", "54", "]", "\n", "out", "=", "get_scaled_position", "(", "input_data", ",", "ind", ",", "st_lint", "-", "0.35", "*", "st_lint", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zahrag_3DHARSOM.Preprocessing.Scaling.get_scaled_position": [[110, 133], ["int", "input_data.reshape", "input_data.reshape.flatten", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.sum", "numpy.size", "numpy.linalg.norm", "numpy.linalg.norm"], "function", ["None"], ["", "def", "get_scaled_position", "(", "input_data", ",", "ind", ",", "L", ")", ":", "\n", "\n", "    ", "n_joints", "=", "int", "(", "np", ".", "size", "(", "input_data", ")", "/", "3", ")", "\n", "mat", "=", "input_data", ".", "reshape", "(", "n_joints", ",", "3", ")", "\n", "N", "=", "(", "mat", "[", "ind", "[", "1", "]", ",", ":", "]", "-", "mat", "[", "ind", "[", "0", "]", ",", ":", "]", ")", "/", "LA", ".", "norm", "(", "mat", "[", "ind", "[", "1", "]", ",", ":", "]", "-", "mat", "[", "ind", "[", "0", "]", ",", ":", "]", ")", "\n", "\n", "t1", "=", "L", "/", "LA", ".", "norm", "(", "N", ")", "\n", "t2", "=", "-", "L", "/", "LA", ".", "norm", "(", "N", ")", "\n", "\n", "J0", "=", "mat", "[", "ind", "[", "0", "]", ",", ":", "]", "\n", "J1", "=", "N", "*", "t1", "+", "J0", "\n", "\n", "N1", "=", "(", "J1", "-", "J0", ")", "/", "LA", ".", "norm", "(", "J1", "-", "J0", ")", "\n", "\n", "cos_theta", "=", "np", ".", "sum", "(", "N", "*", "N1", ")", "/", "(", "LA", ".", "norm", "(", "N", ")", "*", "LA", ".", "norm", "(", "N1", ")", ")", "\n", "\n", "if", "cos_theta", "<", "0", ":", "\n", "        ", "J1", "=", "N", "*", "t2", "+", "J0", "\n", "\n", "", "mat", "[", "ind", "[", "1", "]", ",", ":", "]", "=", "J1", "\n", "out", "=", "mat", ".", "flatten", "(", ")", "\n", "\n", "return", "out", "", "", ""]], "home.repos.pwc.inspect_result.zahrag_3DHARSOM.Preprocessing.Ego_Transfromation.make_egoCenteredCoordinateT": [[11, 103], ["numpy.expand_dims", "numpy.sum", "numpy.sum", "numpy.zeros", "numpy.array", "numpy.array", "numpy.array", "numpy.zeros", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.array", "numpy.array", "numpy.array", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.linalg.det", "numpy.linalg.inv", "range", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "function", ["None"], ["def", "make_egoCenteredCoordinateT", "(", "input_vec", ",", "dataset", ")", ":", "\n", "\n", "    ", "'''\n        This function maps all 3D joints position into a new right-hand coordinate system centered at the joint stomach\n        '''", "\n", "\n", "input_vec", "=", "np", ".", "expand_dims", "(", "input_vec", ",", "0", ")", "\n", "\n", "if", "dataset", "==", "'MSR_Action3D_2'", "or", "dataset", "==", "'MSR_Action3D_1'", ":", "\n", "        ", "p_1", "=", "np", ".", "array", "(", "[", "[", "input_vec", "[", "0", ",", "12", "]", ",", "input_vec", "[", "0", ",", "13", "]", ",", "input_vec", "[", "0", ",", "14", "]", "]", "]", ")", "# Right Hip", "\n", "p_2", "=", "np", ".", "array", "(", "[", "[", "input_vec", "[", "0", ",", "15", "]", ",", "input_vec", "[", "0", ",", "16", "]", ",", "input_vec", "[", "0", ",", "17", "]", "]", "]", ")", "# Left Hip", "\n", "p_3", "=", "np", ".", "array", "(", "[", "[", "input_vec", "[", "0", ",", "18", "]", ",", "input_vec", "[", "0", ",", "19", "]", ",", "input_vec", "[", "0", ",", "20", "]", "]", "]", ")", "# Stomach", "\n", "nbr_joint", "=", "20", "\n", "\n", "", "elif", "dataset", "==", "'UTKinect'", ":", "\n", "        ", "p_1", "=", "np", ".", "array", "(", "[", "[", "input_vec", "[", "0", ",", "36", "]", ",", "input_vec", "[", "0", ",", "37", "]", ",", "input_vec", "[", "0", ",", "38", "]", "]", "]", ")", "# Right Hip", "\n", "p_2", "=", "np", ".", "array", "(", "[", "[", "input_vec", "[", "0", ",", "48", "]", ",", "input_vec", "[", "0", ",", "49", "]", ",", "input_vec", "[", "0", ",", "50", "]", "]", "]", ")", "# Left Hip", "\n", "p_3", "=", "np", ".", "array", "(", "[", "[", "input_vec", "[", "0", ",", "0", "]", ",", "input_vec", "[", "0", ",", "1", "]", ",", "input_vec", "[", "0", ",", "2", "]", "]", "]", ")", "# Stomach", "\n", "nbr_joint", "=", "20", "\n", "\n", "", "else", ":", "# Florence", "\n", "        ", "p_1", "=", "np", ".", "array", "(", "[", "[", "input_vec", "[", "0", ",", "27", "]", ",", "input_vec", "[", "0", ",", "28", "]", ",", "input_vec", "[", "0", ",", "29", "]", "]", "]", ")", "# Right Hip", "\n", "p_2", "=", "np", ".", "array", "(", "[", "[", "input_vec", "[", "0", ",", "36", "]", ",", "input_vec", "[", "0", ",", "37", "]", ",", "input_vec", "[", "0", ",", "38", "]", "]", "]", ")", "# Left Hip", "\n", "p_3", "=", "np", ".", "array", "(", "[", "[", "input_vec", "[", "0", ",", "6", "]", ",", "input_vec", "[", "0", ",", "7", "]", ",", "input_vec", "[", "0", ",", "8", "]", "]", "]", ")", "# Stomach", "\n", "nbr_joint", "=", "15", "\n", "\n", "", "d_p12", "=", "p_2", "-", "p_1", "\n", "\n", "d_p12_n", "=", "d_p12", "/", "LA", ".", "norm", "(", "d_p12", ")", "\n", "\n", "d_p31", "=", "p_1", "-", "p_3", "\n", "\n", "num", "=", "np", ".", "sum", "(", "d_p12", "*", "d_p31", ")", "\n", "den", "=", "np", ".", "sum", "(", "d_p12", "*", "d_p12_n", ")", "\n", "t", "=", "-", "num", "/", "den", "\n", "\n", "# p4: stomach (p3) projection on line connecting p1 to p2", "\n", "p_4", "=", "d_p12_n", "*", "t", "+", "p_1", "\n", "\n", "# Y-axis", "\n", "d_p42", "=", "p_2", "-", "p_4", "\n", "\n", "# Z-axis", "\n", "d_p43", "=", "p_3", "-", "p_4", "\n", "\n", "# X-axis", "\n", "c_p", "=", "np", ".", "zeros", "(", "(", "1", ",", "3", ")", ")", "\n", "c_p", "[", "0", ",", "0", "]", "=", "d_p42", "[", "0", ",", "1", "]", "*", "d_p43", "[", "0", ",", "2", "]", "-", "d_p42", "[", "0", ",", "2", "]", "*", "d_p43", "[", "0", ",", "1", "]", "\n", "c_p", "[", "0", ",", "1", "]", "=", "d_p42", "[", "0", ",", "2", "]", "*", "d_p43", "[", "0", ",", "0", "]", "-", "d_p42", "[", "0", ",", "0", "]", "*", "d_p43", "[", "0", ",", "2", "]", "\n", "c_p", "[", "0", ",", "2", "]", "=", "d_p42", "[", "0", ",", "0", "]", "*", "d_p43", "[", "0", ",", "1", "]", "-", "d_p42", "[", "0", ",", "1", "]", "*", "d_p43", "[", "0", ",", "0", "]", "\n", "\n", "# normalized axises", "\n", "yB", "=", "d_p42", "/", "LA", ".", "norm", "(", "d_p42", ")", "\n", "zB", "=", "d_p43", "/", "LA", ".", "norm", "(", "d_p43", ")", "\n", "xB", "=", "c_p", "/", "LA", ".", "norm", "(", "c_p", ")", "\n", "\n", "xA", "=", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "0", "]", "]", ")", "\n", "yA", "=", "np", ".", "array", "(", "[", "[", "0", ",", "1", ",", "0", "]", "]", ")", "\n", "zA", "=", "np", ".", "array", "(", "[", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "\n", "A_R_B", "=", "np", ".", "zeros", "(", "(", "4", ",", "4", ")", ")", "\n", "A_R_B", "[", "0", ",", "0", "]", "=", "np", ".", "sum", "(", "xB", "*", "xA", ")", "\n", "A_R_B", "[", "0", ",", "1", "]", "=", "np", ".", "sum", "(", "yB", "*", "xA", ")", "\n", "A_R_B", "[", "0", ",", "2", "]", "=", "np", ".", "sum", "(", "zB", "*", "xA", ")", "\n", "A_R_B", "[", "0", ",", "3", "]", "=", "p_3", "[", "0", ",", "0", "]", "\n", "\n", "A_R_B", "[", "1", ",", "0", "]", "=", "np", ".", "sum", "(", "xB", "*", "yA", ")", "\n", "A_R_B", "[", "1", ",", "1", "]", "=", "np", ".", "sum", "(", "yB", "*", "yA", ")", "\n", "A_R_B", "[", "1", ",", "2", "]", "=", "np", ".", "sum", "(", "zB", "*", "yA", ")", "\n", "A_R_B", "[", "1", ",", "3", "]", "=", "p_3", "[", "0", ",", "1", "]", "\n", "\n", "A_R_B", "[", "2", ",", "0", "]", "=", "np", ".", "sum", "(", "xB", "*", "zA", ")", "\n", "A_R_B", "[", "2", ",", "1", "]", "=", "np", ".", "sum", "(", "yB", "*", "zA", ")", "\n", "A_R_B", "[", "2", ",", "2", "]", "=", "np", ".", "sum", "(", "zB", "*", "zA", ")", "\n", "A_R_B", "[", "2", ",", "3", "]", "=", "p_3", "[", "0", ",", "2", "]", "\n", "\n", "A_R_B", "[", "3", ",", "0", "]", "=", "0", "\n", "A_R_B", "[", "3", ",", "1", "]", "=", "0", "\n", "A_R_B", "[", "3", ",", "2", "]", "=", "0", "\n", "A_R_B", "[", "3", ",", "3", "]", "=", "1", "\n", "\n", "if", "LA", ".", "det", "(", "A_R_B", ")", "!=", "0", ":", "\n", "        ", "iT", "=", "LA", ".", "inv", "(", "A_R_B", ")", "\n", "\n", "for", "id", "in", "range", "(", "nbr_joint", ")", ":", "\n", "            ", "p_id", "=", "np", ".", "array", "(", "[", "[", "input_vec", "[", "0", ",", "3", "*", "id", "+", "0", "]", "]", ",", "[", "input_vec", "[", "0", ",", "3", "*", "id", "+", "1", "]", "]", ",", "[", "input_vec", "[", "0", ",", "3", "*", "id", "+", "2", "]", "]", ",", "[", "1", "]", "]", ")", "\n", "p_id_n", "=", "iT", "@", "p_id", "\n", "input_vec", "[", "0", ",", "3", "*", "id", "+", "0", "]", "=", "p_id_n", "[", "0", ",", "0", "]", "\n", "input_vec", "[", "0", ",", "3", "*", "id", "+", "1", "]", "=", "p_id_n", "[", "1", ",", "0", "]", "\n", "input_vec", "[", "0", ",", "3", "*", "id", "+", "2", "]", "=", "p_id_n", "[", "2", ",", "0", "]", "\n", "\n", "", "", "return", "input_vec", "\n", "", ""]]}