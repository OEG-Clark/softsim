{"home.repos.pwc.inspect_result.alirezaseif_nonmarkovian_learning.None.models.gen_model_AR": [[4, 18], ["tensorflow.keras.models.Sequential", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.layers.Conv1D", "tensorflow.keras.layers.Flatten", "int"], "function", ["None"], ["def", "gen_model_AR", "(", "w", ",", "n_steps_in", ")", ":", "\n", "    ", "\"\"\"Generate the basic auto-regressive model\n\n    Args:\n        w (int): the window size\n        n_steps_in (int): the dimension of the input\n\n    Returns:\n        object: the AR(w) model\n    \"\"\"", "\n", "modelAR", "=", "Sequential", "(", ")", "\n", "modelAR", ".", "add", "(", "Conv1D", "(", "filters", "=", "1", ",", "kernel_size", "=", "int", "(", "w", ")", ",", "activation", "=", "'sigmoid'", ",", "input_shape", "=", "(", "n_steps_in", ",", "1", ")", ")", ")", "\n", "modelAR", ".", "add", "(", "Flatten", "(", ")", ")", "\n", "return", "modelAR", "\n", "\n"]], "home.repos.pwc.inspect_result.alirezaseif_nonmarkovian_learning.None.models.gen_model_RNN": [[19, 34], ["tensorflow.keras.models.Sequential", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.layers.GRU", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Flatten"], "function", ["None"], ["", "def", "gen_model_RNN", "(", "w", ",", "n_steps_in", ")", ":", "\n", "    ", "\"\"\"Generate the GRU model\n\n    Args:\n        w (int): the number of units in the GRU layer\n        n_steps_in (int): the dimension of the input\n\n    Returns:\n        object: the GRU(w) model\n    \"\"\"", "\n", "model", "=", "Sequential", "(", ")", "\n", "model", ".", "add", "(", "GRU", "(", "w", ",", "return_sequences", "=", "True", ",", "input_shape", "=", "(", "n_steps_in", ",", "1", ")", ")", ")", "\n", "model", ".", "add", "(", "Dense", "(", "1", ",", "activation", "=", "'sigmoid'", ")", ")", "\n", "model", ".", "add", "(", "Flatten", "(", ")", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.alirezaseif_nonmarkovian_learning.None.models.gen_model_CNN": [[35, 51], ["tensorflow.keras.models.Sequential", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.layers.Conv1D", "tensorflow.keras.layers.Conv1D", "tensorflow.keras.layers.Flatten", "int", "int"], "function", ["None"], ["", "def", "gen_model_CNN", "(", "w", ",", "n_steps_in", ",", "n_filters", "=", "10", ")", ":", "\n", "    ", "\"\"\"Generate the CNN model\n\n    Args:\n        w (int): the number of units in the GRU layer\n        n_steps_in (int): the dimension of the input\n        n_filters (int, optional): Number of filters in the first convolutional layer. Defaults to 10.\n\n    Returns:\n        object: the CNN(w) model\n    \"\"\"", "\n", "modelCNN", "=", "Sequential", "(", ")", "\n", "modelCNN", ".", "add", "(", "Conv1D", "(", "filters", "=", "n_filters", ",", "kernel_size", "=", "int", "(", "w", ")", ",", "activation", "=", "'relu'", ",", "input_shape", "=", "(", "n_steps_in", ",", "1", ")", ")", ")", "\n", "modelCNN", ".", "add", "(", "Conv1D", "(", "filters", "=", "1", ",", "kernel_size", "=", "int", "(", "1", ")", ",", "activation", "=", "'sigmoid'", ")", ")", "\n", "modelCNN", ".", "add", "(", "Flatten", "(", ")", ")", "\n", "return", "modelCNN", "", "", ""]], "home.repos.pwc.inspect_result.alirezaseif_nonmarkovian_learning.None.data_gen.generate_forward": [[3, 25], ["numpy.zeros", "numpy.sqrt", "range", "numpy.random.randn", "numpy.random.randn"], "function", ["None"], ["def", "generate_forward", "(", "lambda_list", ",", "t_list", ",", "diff_const", "=", "0.5", ",", "k_spring", "=", "2", ")", ":", "\n", "    ", "\"\"\"Generate particle trajectories (X_t) given the control sequence (C_t)\n\n    Args:\n        lambda_list (array): the array containing the control sequence for different samples\n        t_list (array): the array containg the simulation times \n        diff_const (float, optional): diffusion constant. Defaults to 0.5.\n        k_spring (int, optional): spring constant. Defaults to 2.\n\n    Returns:\n        array: Trajectories for each control sequence. \n    \"\"\"", "\n", "num_particles", "=", "lambda_list", ".", "shape", "[", "0", "]", "\n", "num_steps", "=", "lambda_list", ".", "shape", "[", "1", "]", "-", "1", "\n", "xs", "=", "np", ".", "zeros", "(", "(", "num_particles", ",", "num_steps", "+", "1", ")", ")", "\n", "xs", "[", ":", ",", "0", "]", "=", "diff_const", "/", "k_spring", "*", "np", ".", "random", ".", "randn", "(", "num_particles", ")", "\n", "dt", "=", "t_list", "[", "1", "]", "\n", "std", "=", "np", ".", "sqrt", "(", "2", "*", "diff_const", "*", "dt", ")", "\n", "for", "i", "in", "range", "(", "num_steps", ")", ":", "\n", "        ", "delta_w", "=", "std", "*", "np", ".", "random", ".", "randn", "(", "num_particles", ")", "\n", "xs", "[", ":", ",", "i", "+", "1", "]", "=", "xs", "[", ":", ",", "i", "]", "*", "(", "1", "-", "k_spring", "*", "dt", ")", "+", "k_spring", "*", "lambda_list", "[", ":", ",", "i", "+", "1", "]", "*", "dt", "+", "delta_w", "\n", "", "return", "xs", "\n", "", "def", "gen_rand_lambda", "(", "t_list", ",", "num_trajs", ",", "k_gamma", "=", "1.", ",", "t_gamma", "=", "1.", ")", ":", "\n"]], "home.repos.pwc.inspect_result.alirezaseif_nonmarkovian_learning.None.data_gen.gen_rand_lambda": [[25, 51], ["numpy.zeros", "numpy.random.choice", "numpy.zeros", "numpy.min", "numpy.min", "range", "numpy.random.gamma"], "function", ["None"], ["", "def", "gen_rand_lambda", "(", "t_list", ",", "num_trajs", ",", "k_gamma", "=", "1.", ",", "t_gamma", "=", "1.", ")", ":", "\n", "    ", "\"\"\"Generate control sequences with switching times drawn from the gamma distribution\n\n    Args:\n        t_list (array): the array containg the simulation times .\n        num_trajs (int): number of sample sequences\n        k_gamma (float, optional): the shape of the Gamma distribution. Defaults to 1.\n        t_gamma (float, optional): the mean switching time. Defaults to 1.\n\n    Returns:\n        _type_: _description_\n    \"\"\"", "\n", "tau", "=", "t_list", "[", "1", "]", "-", "t_list", "[", "0", "]", "\n", "num_t", "=", "t_list", ".", "shape", "[", "0", "]", "\n", "lambda_t", "=", "np", ".", "zeros", "(", "(", "num_trajs", ",", "num_t", ")", ")", "\n", "flag", "=", "np", ".", "random", ".", "choice", "(", "[", "-", "1", ",", "1", "]", ",", "num_trajs", ")", "\n", "lambda_t", "[", ":", ",", "0", "]", "=", "flag", "\n", "current_t", "=", "np", ".", "zeros", "(", "num_trajs", ",", "dtype", "=", "'int'", ")", "\n", "while", "np", ".", "min", "(", "current_t", ")", "!=", "num_t", ":", "\n", "        ", "ind_jump", "=", "np", ".", "min", "(", "[", "(", "np", ".", "random", ".", "gamma", "(", "k_gamma", ",", "t_gamma", "/", "k_gamma", ",", "num_trajs", ")", "\n", "/", "tau", ")", ".", "astype", "(", "'int'", ")", ",", "(", "num_t", "-", "current_t", ")", "]", ",", "axis", "=", "0", ")", "\n", "for", "i", "in", "range", "(", "num_trajs", ")", ":", "\n", "            ", "lambda_t", "[", "i", ",", "current_t", "[", "i", "]", ":", "current_t", "[", "i", "]", "+", "ind_jump", "[", "i", "]", "]", "=", "flag", "[", "i", "]", "\n", "", "current_t", "+=", "ind_jump", "\n", "flag", "*=", "-", "1", "\n", "", "return", "lambda_t", "", "", ""]]}