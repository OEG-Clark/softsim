{"home.repos.pwc.inspect_result.ZeweiChu_EntEval.enteval.esr.WikiSRSEval.__init__": [[13, 25], ["logging.debug", "esr.WikiSRSEval.loadFile", "esr.WikiSRSEval.loadFile", "numpy.array", "numpy.array", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.ZeweiChu_EntEval.enteval.efp.EFPEval.loadFile", "home.repos.pwc.inspect_result.ZeweiChu_EntEval.enteval.efp.EFPEval.loadFile"], ["    ", "def", "__init__", "(", "self", ",", "taskpath", ",", "use_name", "=", "False", ",", "seed", "=", "1111", ")", ":", "\n", "        ", "logging", ".", "debug", "(", "'***** Transfer task : Entity Similarity and Relatedness *****\\n\\n'", ")", "\n", "self", ".", "seed", "=", "seed", "\n", "self", ".", "use_name", "=", "use_name", "\n", "\n", "self", ".", "relate_labels", ",", "self", ".", "relate_entity1", ",", "self", ".", "relate_entity2", "=", "self", ".", "loadFile", "(", "os", ".", "path", ".", "join", "(", "taskpath", ",", "\"WikiSRS_relatedness.csv.pro\"", ")", ")", "\n", "self", ".", "sim_labels", ",", "self", ".", "sim_entity1", ",", "self", ".", "sim_entity2", "=", "self", ".", "loadFile", "(", "os", ".", "path", ".", "join", "(", "taskpath", ",", "\"WikiSRS_similarity.csv.pro\"", ")", ")", "\n", "\n", "self", ".", "relate_labels", "=", "np", ".", "array", "(", "self", ".", "relate_labels", ")", "\n", "self", ".", "sim_labels", "=", "np", ".", "array", "(", "self", ".", "sim_labels", ")", "\n", "\n", "self", ".", "samples", "=", "self", ".", "sim_entity1", "+", "self", ".", "sim_entity2", "+", "self", ".", "relate_entity1", "+", "self", ".", "relate_entity2", "\n", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.enteval.esr.WikiSRSEval.loadFile": [[26, 39], ["codecs.open", "line.strip().split", "labels.append", "float", "entities1.append", "entities2.append", "entities1.append", "entities2.append", "line.strip", "entity1.split", "entity2.split", "entity_desc1.split", "entity_desc2.split"], "methods", ["None"], ["", "def", "loadFile", "(", "self", ",", "fpath", ")", ":", "\n", "        ", "labels", ",", "entities1", ",", "entities2", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "with", "codecs", ".", "open", "(", "fpath", ",", "'rb'", ",", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ":", "\n", "                ", "label", ",", "entity1", ",", "entity2", ",", "entity_desc1", ",", "entity_desc2", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "labels", ".", "append", "(", "float", "(", "label", ")", ")", "\n", "if", "self", ".", "use_name", ":", "\n", "                    ", "entities1", ".", "append", "(", "entity1", ".", "split", "(", ")", ")", "\n", "entities2", ".", "append", "(", "entity2", ".", "split", "(", ")", ")", "\n", "", "else", ":", "\n", "                    ", "entities1", ".", "append", "(", "entity_desc1", ".", "split", "(", ")", ")", "\n", "entities2", ".", "append", "(", "entity_desc2", ".", "split", "(", ")", ")", "\n", "", "", "", "return", "labels", ",", "entities1", ",", "entities2", "\n", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.enteval.esr.WikiSRSEval.do_prepare": [[41, 47], ["prepare", "numpy.nan_to_num", "enteval.utils.cosine", "numpy.nan_to_num", "numpy.nan_to_num"], "methods", ["home.repos.pwc.inspect_result.ZeweiChu_EntEval.examples.eval_elmo.prepare", "home.repos.pwc.inspect_result.ZeweiChu_EntEval.enteval.utils.cosine"], ["", "def", "do_prepare", "(", "self", ",", "params", ",", "prepare", ")", ":", "\n", "        ", "if", "'similarity'", "in", "params", ":", "\n", "            ", "self", ".", "similarity", "=", "params", ".", "similarity", "\n", "", "else", ":", "# Default similarity is cosine", "\n", "            ", "self", ".", "similarity", "=", "lambda", "s1", ",", "s2", ":", "np", ".", "nan_to_num", "(", "cosine", "(", "np", ".", "nan_to_num", "(", "s1", ")", ",", "np", ".", "nan_to_num", "(", "s2", ")", ")", ")", "\n", "", "return", "prepare", "(", "params", ",", "self", ".", "samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.enteval.esr.WikiSRSEval.calculate_similarity": [[48, 72], ["len", "range", "numpy.vstack", "numpy.vstack", "numpy.sum", "numpy.sqrt", "numpy.sqrt", "cosine_similarities.reshape.reshape.reshape", "len", "len", "batcher", "batcher", "numpy.vstack.append", "numpy.vstack.append", "numpy.sum", "numpy.sum"], "methods", ["home.repos.pwc.inspect_result.ZeweiChu_EntEval.examples.eval_elmo.batcher", "home.repos.pwc.inspect_result.ZeweiChu_EntEval.examples.eval_elmo.batcher"], ["", "def", "calculate_similarity", "(", "self", ",", "params", ",", "batcher", ",", "ent1", ",", "ent2", ")", ":", "\n", "        ", "assert", "len", "(", "ent1", ")", "==", "len", "(", "ent2", ")", ",", "\"entity 1 and entity 2 must have the same length\"", "\n", "ent1", "=", "[", "[", "None", ",", "None", ",", "None", "]", "+", "[", "item", "]", "for", "item", "in", "ent1", "]", "\n", "ent2", "=", "[", "[", "None", ",", "None", ",", "None", "]", "+", "[", "item", "]", "for", "item", "in", "ent2", "]", "\n", "length", "=", "len", "(", "ent1", ")", "\n", "\n", "ent1_enc", "=", "[", "]", "\n", "ent2_enc", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "length", ",", "params", ".", "batch_size", ")", ":", "\n", "            ", "_", ",", "enc1", "=", "batcher", "(", "params", ",", "ent1", "[", "i", ":", "i", "+", "params", ".", "batch_size", "]", ")", "\n", "_", ",", "enc2", "=", "batcher", "(", "params", ",", "ent2", "[", "i", ":", "i", "+", "params", ".", "batch_size", "]", ")", "\n", "ent1_enc", ".", "append", "(", "enc1", ")", "\n", "ent2_enc", ".", "append", "(", "enc2", ")", "\n", "\n", "", "ent1_enc", "=", "np", ".", "vstack", "(", "ent1_enc", ")", "\n", "ent2_enc", "=", "np", ".", "vstack", "(", "ent2_enc", ")", "\n", "\n", "dot_prod", "=", "np", ".", "sum", "(", "ent1_enc", "*", "ent2_enc", ",", "-", "1", ")", "\n", "ent1_norm", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "ent1_enc", "**", "2", ",", "1", ")", ")", "\n", "ent2_norm", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "ent2_enc", "**", "2", ",", "1", ")", ")", "\n", "cosine_similarities", "=", "dot_prod", "/", "(", "ent1_norm", "+", "1e-9", ")", "/", "(", "ent2_norm", "+", "1e-9", ")", "\n", "cosine_similarities", "=", "cosine_similarities", ".", "reshape", "(", "-", "1", ")", "\n", "\n", "return", "cosine_similarities", "\n", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.enteval.esr.WikiSRSEval.run": [[74, 88], ["esr.WikiSRSEval.calculate_similarity", "esr.WikiSRSEval.calculate_similarity", "logging.debug", "scipy.stats.pearsonr", "scipy.stats.spearmanr", "scipy.stats.pearsonr", "scipy.stats.spearmanr"], "methods", ["home.repos.pwc.inspect_result.ZeweiChu_EntEval.enteval.esr.WikiSRSEval.calculate_similarity", "home.repos.pwc.inspect_result.ZeweiChu_EntEval.enteval.esr.WikiSRSEval.calculate_similarity"], ["", "def", "run", "(", "self", ",", "params", ",", "batcher", ")", ":", "\n", "        ", "relate_preds", "=", "self", ".", "calculate_similarity", "(", "params", ",", "batcher", ",", "self", ".", "relate_entity1", ",", "self", ".", "relate_entity2", ")", "\n", "sim_preds", "=", "self", ".", "calculate_similarity", "(", "params", ",", "batcher", ",", "self", ".", "sim_entity1", ",", "self", ".", "sim_entity2", ")", "\n", "\n", "\n", "results", "=", "{", "'relate_pearson'", ":", "pearsonr", "(", "relate_preds", ",", "self", ".", "relate_labels", ")", ",", "\n", "'relate_spearman'", ":", "spearmanr", "(", "relate_preds", ",", "self", ".", "relate_labels", ")", ",", "\n", "'sim_pearson'", ":", "pearsonr", "(", "sim_preds", ",", "self", ".", "sim_labels", ")", ",", "\n", "'sim_spearman'", ":", "spearmanr", "(", "sim_preds", ",", "self", ".", "sim_labels", ")", "}", "\n", "logging", ".", "debug", "(", "'Wiki SRS dataset, Relatedness Pearson = %.4f, \\\n            Spearman = %.4f\\n, Similarity Pearson = %.4f, \\\n            Spearman = %.4f\\n'", "%", "(", "results", "[", "\"relate_pearson\"", "]", "[", "0", "]", ",", "results", "[", "\"relate_spearman\"", "]", "[", "0", "]", ",", "results", "[", "\"sim_pearson\"", "]", "[", "0", "]", ",", "results", "[", "\"sim_spearman\"", "]", "[", "0", "]", ")", ")", "\n", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.enteval.esr.KOREEval.__init__": [[90, 94], ["logging.debug", "esr.KOREEval.loadFile"], "methods", ["home.repos.pwc.inspect_result.ZeweiChu_EntEval.enteval.efp.EFPEval.loadFile"], ["    ", "def", "__init__", "(", "self", ",", "taskpath", ",", "seed", "=", "1111", ")", ":", "\n", "        ", "logging", ".", "debug", "(", "'***** Transfer task : KORE *****\\n\\n'", ")", "\n", "self", ".", "seed", "=", "seed", "\n", "self", ".", "loadFile", "(", "taskpath", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.enteval.esr.KOREEval.loadFile": [[95, 117], ["esr.KOREEval.head_entities.copy", "io.open", "line.split", "len", "esr.KOREEval.compare_entities.append", "esr.KOREEval.head_entities.append", "compare.append", "len", "esr.KOREEval.compare_entities.append", "desc.split", "desc.split"], "methods", ["None"], ["", "def", "loadFile", "(", "self", ",", "fpath", ")", ":", "\n", "        ", "self", ".", "data", "=", "{", "}", "\n", "self", ".", "samples", "=", "[", "]", "\n", "\n", "self", ".", "head_entities", "=", "[", "]", "\n", "self", ".", "compare_entities", "=", "[", "]", "\n", "compare", "=", "[", "]", "\n", "with", "io", ".", "open", "(", "fpath", "+", "'/all.txt'", ",", "encoding", "=", "'utf8'", ")", "as", "fin", ":", "\n", "            ", "for", "line", "in", "fin", ":", "\n", "                ", "start", ",", "entity", ",", "desc", "=", "line", ".", "split", "(", "\"\\t\"", ")", "\n", "if", "start", "==", "\"@@\"", ":", "\n", "                    ", "if", "len", "(", "compare", ")", ">", "0", ":", "\n", "                        ", "self", ".", "compare_entities", ".", "append", "(", "compare", ")", "\n", "", "self", ".", "head_entities", ".", "append", "(", "desc", ".", "split", "(", ")", ")", "\n", "compare", "=", "[", "]", "\n", "", "else", ":", "\n", "                    ", "compare", ".", "append", "(", "desc", ".", "split", "(", ")", ")", "\n", "", "", "if", "len", "(", "compare", ")", ">", "0", ":", "\n", "                ", "self", ".", "compare_entities", ".", "append", "(", "compare", ")", "\n", "", "", "self", ".", "samples", "=", "self", ".", "head_entities", ".", "copy", "(", ")", "\n", "for", "entity", "in", "self", ".", "compare_entities", ":", "\n", "            ", "self", ".", "samples", "+=", "entity", "\n", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.enteval.esr.KOREEval.do_prepare": [[119, 125], ["prepare", "numpy.nan_to_num", "enteval.utils.cosine", "numpy.nan_to_num", "numpy.nan_to_num"], "methods", ["home.repos.pwc.inspect_result.ZeweiChu_EntEval.examples.eval_elmo.prepare", "home.repos.pwc.inspect_result.ZeweiChu_EntEval.enteval.utils.cosine"], ["", "", "def", "do_prepare", "(", "self", ",", "params", ",", "prepare", ")", ":", "\n", "        ", "if", "'similarity'", "in", "params", ":", "\n", "            ", "self", ".", "similarity", "=", "params", ".", "similarity", "\n", "", "else", ":", "# Default similarity is cosine", "\n", "            ", "self", ".", "similarity", "=", "lambda", "s1", ",", "s2", ":", "np", ".", "nan_to_num", "(", "cosine", "(", "np", ".", "nan_to_num", "(", "s1", ")", ",", "np", ".", "nan_to_num", "(", "s2", ")", ")", ")", "\n", "", "return", "prepare", "(", "params", ",", "self", ".", "samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.enteval.esr.KOREEval.run": [[126, 150], ["numpy.concatenate", "numpy.sum", "numpy.sqrt", "numpy.sqrt", "cosine_similarities.reshape.reshape.reshape", "numpy.concatenate().reshape", "logging.debug", "numpy.concatenate.append", "numpy.sum", "numpy.sum", "scipy.stats.pearsonr", "scipy.stats.spearmanr", "batcher", "numpy.concatenate", "batcher", "numpy.arange", "range"], "methods", ["home.repos.pwc.inspect_result.ZeweiChu_EntEval.examples.eval_elmo.batcher", "home.repos.pwc.inspect_result.ZeweiChu_EntEval.examples.eval_elmo.batcher"], ["", "def", "run", "(", "self", ",", "params", ",", "batcher", ")", ":", "\n", "        ", "self", ".", "head_entities", "=", "[", "[", "None", ",", "None", ",", "None", "]", "+", "[", "item", "]", "for", "item", "in", "self", ".", "head_entities", "]", "\n", "head_entities_embedding", "=", "batcher", "(", "params", ",", "self", ".", "head_entities", ")", "[", "1", "]", "[", ":", ",", "None", ",", ":", "]", "\n", "compare_entities_embedding", "=", "[", "]", "\n", "for", "compare_entities", "in", "self", ".", "compare_entities", ":", "\n", "            ", "compare_entities_embedding", ".", "append", "(", "batcher", "(", "params", ",", "[", "[", "None", ",", "None", ",", "None", "]", "+", "[", "item", "]", "for", "item", "in", "compare_entities", "]", ")", "[", "1", "]", "[", "None", ",", ":", ",", ":", "]", ")", "\n", "", "compare_entities_embedding", "=", "np", ".", "concatenate", "(", "compare_entities_embedding", ",", "0", ")", "\n", "\n", "dot_prod", "=", "np", ".", "sum", "(", "head_entities_embedding", "*", "compare_entities_embedding", ",", "-", "1", ")", "# num_head * num_compare", "\n", "head_entities_norm", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "head_entities_embedding", "*", "head_entities_embedding", ",", "2", ")", ")", "\n", "compare_entities_norm", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "compare_entities_embedding", "*", "compare_entities_embedding", ",", "2", ")", ")", "\n", "cosine_similarities", "=", "dot_prod", "/", "(", "head_entities_norm", "+", "1e-9", ")", "/", "(", "compare_entities_norm", "+", "1e-9", ")", "\n", "cosine_similarities", "=", "cosine_similarities", ".", "reshape", "(", "-", "1", ")", "\n", "\n", "head_entities_count", ",", "compare_entities_count", "=", "compare_entities_norm", ".", "shape", "\n", "gold_scores", "=", "np", ".", "concatenate", "(", "[", "np", ".", "arange", "(", "compare_entities_count", ")", "[", "None", ",", ":", ":", "-", "1", "]", "for", "i", "in", "range", "(", "head_entities_count", ")", "]", ",", "0", ")", ".", "reshape", "(", "-", "1", ")", "\n", "\n", "\n", "results", "=", "{", "'pearson'", ":", "pearsonr", "(", "cosine_similarities", ",", "gold_scores", ")", ",", "\n", "'spearman'", ":", "spearmanr", "(", "cosine_similarities", ",", "gold_scores", ")", "}", "\n", "logging", ".", "debug", "(", "'KORE relatedness dataset, Pearson = %.4f, \\\n            Spearman = %.4f\\n'", "%", "(", "results", "[", "\"pearson\"", "]", "[", "0", "]", ",", "results", "[", "\"spearman\"", "]", "[", "0", "]", ")", ")", "\n", "\n", "return", "results", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.enteval.engine.SE.__init__": [[26, 48], ["enteval.utils.dotdict"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "params", ",", "batcher", ",", "prepare", "=", "None", ")", ":", "\n", "# parameters", "\n", "        ", "params", "=", "utils", ".", "dotdict", "(", "params", ")", "\n", "params", ".", "usepytorch", "=", "True", "if", "'usepytorch'", "not", "in", "params", "else", "params", ".", "usepytorch", "\n", "params", ".", "seed", "=", "1111", "if", "'seed'", "not", "in", "params", "else", "params", ".", "seed", "\n", "\n", "params", ".", "batch_size", "=", "128", "if", "'batch_size'", "not", "in", "params", "else", "params", ".", "batch_size", "\n", "params", ".", "nhid", "=", "0", "if", "'nhid'", "not", "in", "params", "else", "params", ".", "nhid", "\n", "params", ".", "kfold", "=", "5", "if", "'kfold'", "not", "in", "params", "else", "params", ".", "kfold", "\n", "\n", "if", "'classifier'", "not", "in", "params", "or", "not", "params", "[", "'classifier'", "]", ":", "\n", "            ", "params", ".", "classifier", "=", "{", "'nhid'", ":", "0", "}", "\n", "\n", "", "assert", "'nhid'", "in", "params", ".", "classifier", ",", "'Set number of hidden units in classifier config!!'", "\n", "\n", "self", ".", "params", "=", "params", "\n", "\n", "# batcher and prepare", "\n", "self", ".", "batcher", "=", "batcher", "\n", "self", ".", "prepare", "=", "prepare", "if", "prepare", "else", "lambda", "x", ",", "y", ":", "None", "\n", "\n", "self", ".", "list_tasks", "=", "[", "'CAPsame'", ",", "'CAPnext'", ",", "'ERT'", ",", "'EFP'", ",", "'ET'", ",", "'CERP'", ",", "'Rare'", ",", "'ConllYago'", ",", "'WikiSRS'", ",", "'KORE'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.enteval.engine.SE.eval": [[49, 86], ["isinstance", "engine.SE.evaluation.do_prepare", "engine.SE.evaluation.run", "str", "enteval.cap.CAPEval", "engine.SE.eval", "str", "enteval.cap.CAPEval", "enteval.ert.ERTEval", "enteval.efp.EFPEval", "enteval.et.ETEval", "enteval.cerp.CERPEval", "enteval.ed.RareEval", "enteval.ed.ConllYagoEval", "enteval.esr.KOREEval", "enteval.esr.WikiSRSEval"], "methods", ["home.repos.pwc.inspect_result.ZeweiChu_EntEval.enteval.efp.EFPEval.do_prepare", "home.repos.pwc.inspect_result.ZeweiChu_EntEval.tools.validation.SplitMultiClassClassifier.run", "home.repos.pwc.inspect_result.ZeweiChu_EntEval.enteval.engine.SE.eval"], ["", "def", "eval", "(", "self", ",", "name", ")", ":", "\n", "# evaluate on evaluation [name], either takes string or list of strings", "\n", "        ", "if", "(", "isinstance", "(", "name", ",", "list", ")", ")", ":", "\n", "            ", "self", ".", "results", "=", "{", "x", ":", "self", ".", "eval", "(", "x", ")", "for", "x", "in", "name", "}", "\n", "return", "self", ".", "results", "\n", "\n", "", "tpath", "=", "self", ".", "params", ".", "task_path", "\n", "assert", "name", "in", "self", ".", "list_tasks", ",", "str", "(", "name", ")", "+", "' not in '", "+", "str", "(", "self", ".", "list_tasks", ")", "\n", "\n", "# Entity Evaluation Tasks", "\n", "if", "name", "==", "'CAPsame'", ":", "\n", "            ", "self", ".", "evaluation", "=", "CAPEval", "(", "tpath", "+", "'/CAP/same'", ",", "seed", "=", "self", ".", "params", ".", "seed", ")", "\n", "", "elif", "name", "==", "'CAPnext'", ":", "\n", "            ", "self", ".", "evaluation", "=", "CAPEval", "(", "tpath", "+", "'/CAP/next'", ",", "seed", "=", "self", ".", "params", ".", "seed", ")", "\n", "", "elif", "name", "==", "'ERT'", ":", "\n", "            ", "self", ".", "evaluation", "=", "ERTEval", "(", "tpath", "+", "'/ERT/'", ",", "seed", "=", "self", ".", "params", ".", "seed", ")", "\n", "", "elif", "name", "==", "'EFP'", ":", "\n", "            ", "self", ".", "evaluation", "=", "EFPEval", "(", "tpath", "+", "'/EFP/'", ",", "use_ctx", "=", "False", ",", "seed", "=", "self", ".", "params", ".", "seed", ")", "\n", "", "elif", "name", "==", "'ET'", ":", "\n", "            ", "self", ".", "evaluation", "=", "ETEval", "(", "tpath", "+", "'/ET/'", ",", "seed", "=", "self", ".", "params", ".", "seed", ")", "\n", "", "elif", "name", "==", "'CERP'", ":", "\n", "            ", "self", ".", "evaluation", "=", "CERPEval", "(", "tpath", "+", "'/CERP/'", ",", "seed", "=", "self", ".", "params", ".", "seed", ")", "\n", "", "elif", "name", "==", "'Rare'", ":", "\n", "            ", "self", ".", "evaluation", "=", "RareEval", "(", "tpath", "+", "'/rare/'", ",", "seed", "=", "self", ".", "params", ".", "seed", ")", "\n", "", "elif", "name", "==", "'ConllYago'", ":", "\n", "            ", "self", ".", "evaluation", "=", "ConllYagoEval", "(", "tpath", "+", "'/conll-yago/'", ",", "seed", "=", "self", ".", "params", ".", "seed", ")", "\n", "", "elif", "name", "==", "'KORE'", ":", "\n", "            ", "self", ".", "evaluation", "=", "KOREEval", "(", "tpath", "+", "'/KORE/'", ",", "seed", "=", "self", ".", "params", ".", "seed", ")", "\n", "", "elif", "name", "==", "'WikiSRS'", ":", "\n", "            ", "self", ".", "evaluation", "=", "WikiSRSEval", "(", "tpath", "+", "'/wikisrs/'", ",", "seed", "=", "self", ".", "params", ".", "seed", ")", "\n", "\n", "", "self", ".", "params", ".", "current_task", "=", "name", "\n", "self", ".", "evaluation", ".", "do_prepare", "(", "self", ".", "params", ",", "self", ".", "prepare", ")", "\n", "\n", "self", ".", "results", "=", "self", ".", "evaluation", ".", "run", "(", "self", ".", "params", ",", "self", ".", "batcher", ")", "\n", "\n", "return", "self", ".", "results", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.enteval.ed.RareEval.__init__": [[26, 47], ["logging.debug", "ed.RareEval.loadFile", "ed.RareEval.loadFile", "ed.RareEval.loadFile", "logging.debug", "logging.debug", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.ZeweiChu_EntEval.enteval.efp.EFPEval.loadFile", "home.repos.pwc.inspect_result.ZeweiChu_EntEval.enteval.efp.EFPEval.loadFile", "home.repos.pwc.inspect_result.ZeweiChu_EntEval.enteval.efp.EFPEval.loadFile"], ["    ", "def", "__init__", "(", "self", ",", "taskpath", ",", "use_name", "=", "False", ",", "seed", "=", "1111", ")", ":", "\n", "        ", "logging", ".", "debug", "(", "'***** Transfer task : Entity Disembiguation prediction *****\\n\\n'", ")", "\n", "self", ".", "seed", "=", "seed", "\n", "self", ".", "use_name", "=", "use_name", "\n", "if", "self", ".", "use_name", ":", "\n", "            ", "logging", ".", "debug", "(", "\"***** Use entity names to compute embedding *****\"", ")", "\n", "", "else", ":", "\n", "            ", "logging", ".", "debug", "(", "\"***** Use entity descriptions to compute embedding *****\"", ")", "\n", "\n", "", "train_labels", ",", "train_context", ",", "train_desc", "=", "self", ".", "loadFile", "(", "os", ".", "path", ".", "join", "(", "taskpath", ",", "'train.txt'", ")", ")", "\n", "valid_labels", ",", "valid_context", ",", "valid_desc", "=", "self", ".", "loadFile", "(", "os", ".", "path", ".", "join", "(", "taskpath", ",", "'valid.txt'", ")", ")", "\n", "test_labels", ",", "test_context", ",", "test_desc", "=", "self", ".", "loadFile", "(", "os", ".", "path", ".", "join", "(", "taskpath", ",", "'test.txt'", ")", ")", "\n", "self", ".", "data", "=", "{", "'train'", ":", "(", "train_labels", ",", "train_context", ",", "train_desc", ")", ",", "\n", "'valid'", ":", "(", "valid_labels", ",", "valid_context", ",", "valid_desc", ")", ",", "\n", "'test'", ":", "(", "test_labels", ",", "test_context", ",", "test_desc", ")", "}", "\n", "self", ".", "samples", "=", "[", "sent", "[", "0", "]", "for", "sents", "in", "train_context", "for", "sent", "in", "sents", "]", "+", "[", "sent", "for", "sents", "in", "train_desc", "for", "sent", "in", "sents", "]", "+", "[", "sent", "[", "0", "]", "for", "sents", "in", "valid_context", "for", "sent", "in", "sents", "]", "+", "[", "sent", "for", "sents", "in", "valid_desc", "for", "sent", "in", "sents", "]", "+", "[", "sent", "[", "0", "]", "for", "sents", "in", "test_context", "for", "sent", "in", "sents", "]", "+", "[", "sent", "for", "sents", "in", "test_desc", "for", "sent", "in", "sents", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.enteval.ed.RareEval.do_prepare": [[50, 52], ["prepare"], "methods", ["home.repos.pwc.inspect_result.ZeweiChu_EntEval.examples.eval_elmo.prepare"], ["", "def", "do_prepare", "(", "self", ",", "params", ",", "prepare", ")", ":", "\n", "        ", "return", "prepare", "(", "params", ",", "self", ".", "samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.enteval.ed.RareEval.process_desc": [[53, 64], ["desc.split", "sent.split.index", "sent.split.index", "sent.split", "max"], "methods", ["None"], ["", "def", "process_desc", "(", "self", ",", "desc", ")", ":", "\n", "        ", "sents", "=", "desc", ".", "split", "(", "\"\\t\"", ")", "\n", "for", "sent", "in", "sents", ":", "\n", "            ", "if", "\"**blank**\"", "in", "sent", ":", "\n", "                ", "words", "=", "sent", ".", "split", "(", ")", "\n", "break", "\n", "\n", "", "", "index", "=", "words", ".", "index", "(", "\"**blank**\"", ")", "\n", "words", "=", "words", "[", "max", "(", "0", ",", "index", "-", "150", ")", ":", "index", "+", "150", "]", "\n", "index", "=", "words", ".", "index", "(", "\"**blank**\"", ")", "\n", "return", "words", ",", "index", "\n", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.enteval.ed.RareEval.loadFile": [[65, 91], ["open", "line.strip", "contexts.append", "descs.append", "ed.RareEval.process_desc", "labels.append", "data.append", "context.split", "entity.split.split.split", "desc.split.split.split", "contexts[].append", "int", "line.strip", "descs[].append", "descs[].append", "len"], "methods", ["home.repos.pwc.inspect_result.ZeweiChu_EntEval.enteval.ed.RareEval.process_desc"], ["", "def", "loadFile", "(", "self", ",", "fpath", ")", ":", "\n", "        ", "labels", ",", "contexts", ",", "descs", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "data", "=", "[", "]", "\n", "with", "open", "(", "fpath", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ":", "\n", "                ", "if", "line", ".", "strip", "(", ")", "==", "\"\"", ":", "\n", "# code.interact(local=locals())", "\n", "                    ", "contexts", ".", "append", "(", "[", "]", ")", "\n", "descs", ".", "append", "(", "[", "]", ")", "\n", "words", ",", "index", "=", "self", ".", "process_desc", "(", "data", "[", "0", "]", ")", "\n", "for", "context", "in", "data", "[", "1", ":", "5", "]", ":", "\n", "# print(context)", "\n", "                        ", "entity", ",", "desc", "=", "context", ".", "split", "(", "\"\\t\"", ")", "\n", "entity", "=", "entity", ".", "split", "(", ")", "\n", "desc", "=", "desc", ".", "split", "(", ")", "\n", "new_words", "=", "words", "[", ":", "index", "]", "+", "entity", "+", "words", "[", "index", "+", "1", ":", "]", "\n", "contexts", "[", "-", "1", "]", ".", "append", "(", "[", "new_words", ",", "index", ",", "index", "+", "len", "(", "entity", ")", "]", ")", "\n", "if", "self", ".", "use_name", ":", "\n", "                            ", "descs", "[", "-", "1", "]", ".", "append", "(", "entity", ")", "\n", "", "else", ":", "\n", "                            ", "descs", "[", "-", "1", "]", ".", "append", "(", "desc", ")", "\n", "", "", "labels", ".", "append", "(", "int", "(", "data", "[", "5", "]", ")", ")", "\n", "data", "=", "[", "]", "\n", "", "else", ":", "\n", "                    ", "data", ".", "append", "(", "line", ".", "strip", "(", ")", ")", "\n", "", "", "", "return", "labels", ",", "contexts", ",", "descs", "\n", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.enteval.ed.RareEval.run": [[92, 137], ["logging.debug", "copy.deepcopy", "enteval.tools.validation.SplitMultiClassClassifier", "enteval.tools.validation.SplitMultiClassClassifier.run", "logging.debug", "len", "range", "numpy.vstack", "ed.RareEval.X[].reshape", "numpy.array", "len", "len", "len", "batcher", "enc_input.append", "logging.info", "zip", "numpy.hstack", "numpy.abs"], "methods", ["home.repos.pwc.inspect_result.ZeweiChu_EntEval.tools.validation.SplitMultiClassClassifier.run", "home.repos.pwc.inspect_result.ZeweiChu_EntEval.examples.eval_elmo.batcher"], ["", "def", "run", "(", "self", ",", "params", ",", "batcher", ")", ":", "\n", "        ", "self", ".", "X", ",", "self", ".", "y", "=", "{", "}", ",", "{", "}", "\n", "for", "key", "in", "self", ".", "data", ":", "\n", "            ", "if", "key", "not", "in", "self", ".", "X", ":", "\n", "                ", "self", ".", "X", "[", "key", "]", "=", "[", "]", "\n", "", "if", "key", "not", "in", "self", ".", "y", ":", "\n", "                ", "self", ".", "y", "[", "key", "]", "=", "[", "]", "\n", "\n", "", "labels", ",", "contexts", ",", "descs", "=", "self", ".", "data", "[", "key", "]", "\n", "enc_input", "=", "[", "]", "\n", "n_labels", "=", "len", "(", "labels", ")", "\n", "for", "ii", "in", "range", "(", "0", ",", "n_labels", ",", "params", ".", "batch_size", ")", ":", "\n", "                ", "batch_context", "=", "[", "b", "for", "batch", "in", "contexts", "[", "ii", ":", "ii", "+", "params", ".", "batch_size", "]", "for", "b", "in", "batch", "]", "\n", "batch_desc", "=", "[", "b", "for", "batch", "in", "descs", "[", "ii", ":", "ii", "+", "params", ".", "batch_size", "]", "for", "b", "in", "batch", "]", "\n", "batch", "=", "[", "a", "+", "[", "b", "]", "for", "a", ",", "b", "in", "zip", "(", "batch_context", ",", "batch_desc", ")", "]", "\n", "if", "len", "(", "batch", ")", ">", "0", ":", "#== params.batch_size:", "\n", "                    ", "context_enc", ",", "desc_enc", "=", "batcher", "(", "params", ",", "batch", ")", "\n", "# code.interact(local=locals())", "\n", "enc_input", ".", "append", "(", "np", ".", "hstack", "(", "(", "context_enc", ",", "desc_enc", ",", "context_enc", "*", "desc_enc", ",", "np", ".", "abs", "(", "context_enc", "-", "desc_enc", ")", ")", ")", ")", "\n", "", "if", "(", "ii", ")", "%", "(", "20000", "*", "params", ".", "batch_size", ")", "==", "0", ":", "\n", "                    ", "logging", ".", "info", "(", "\"PROGRESS (encoding): %.2f%%\"", "%", "\n", "(", "100", "*", "ii", "/", "n_labels", ")", ")", "\n", "", "", "self", ".", "X", "[", "key", "]", "=", "np", ".", "vstack", "(", "enc_input", ")", "\n", "self", ".", "X", "[", "key", "]", "=", "self", ".", "X", "[", "key", "]", ".", "reshape", "(", "-", "1", ",", "4", ",", "self", ".", "X", "[", "key", "]", ".", "shape", "[", "-", "1", "]", ")", "\n", "self", ".", "y", "[", "key", "]", "=", "np", ".", "array", "(", "labels", ")", "#[:len(self.X[key])])", "\n", "# code.interact(local=locals())", "\n", "", "logging", ".", "debug", "(", "\"Training data shape: {}\"", ".", "format", "(", "self", ".", "X", "[", "\"train\"", "]", ".", "shape", ")", ")", "\n", "config", "=", "{", "'nclasses'", ":", "4", ",", "'seed'", ":", "self", ".", "seed", ",", "\n", "'usepytorch'", ":", "params", ".", "usepytorch", ",", "\n", "'cudaEfficient'", ":", "True", ",", "\n", "'nhid'", ":", "2000", ",", "'noreg'", ":", "False", "}", "\n", "\n", "config_classifier", "=", "copy", ".", "deepcopy", "(", "params", ".", "classifier", ")", "\n", "config_classifier", "[", "'max_epoch'", "]", "=", "15", "\n", "config_classifier", "[", "'epoch_size'", "]", "=", "1", "\n", "config_classifier", "[", "'nhid'", "]", "=", "0", "#2000", "\n", "config", "[", "'classifier'", "]", "=", "config_classifier", "\n", "\n", "clf", "=", "SplitMultiClassClassifier", "(", "self", ".", "X", ",", "self", ".", "y", ",", "config", ")", "\n", "devacc", ",", "testacc", "=", "clf", ".", "run", "(", ")", "\n", "logging", ".", "debug", "(", "'Dev acc : {0} Test acc : {1} for Rare Entity Prediction\\n'", "\n", ".", "format", "(", "devacc", ",", "testacc", ")", ")", "\n", "return", "{", "'devacc'", ":", "devacc", ",", "'acc'", ":", "testacc", ",", "\n", "'ndev'", ":", "len", "(", "self", ".", "data", "[", "'valid'", "]", "[", "0", "]", ")", ",", "\n", "'ntest'", ":", "len", "(", "self", ".", "data", "[", "'test'", "]", "[", "0", "]", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.enteval.ed.ConllYagoEval.__init__": [[142, 163], ["logging.debug", "ed.ConllYagoEval.loadFile", "ed.ConllYagoEval.loadFile", "ed.ConllYagoEval.loadFile", "logging.debug", "logging.debug", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.ZeweiChu_EntEval.enteval.efp.EFPEval.loadFile", "home.repos.pwc.inspect_result.ZeweiChu_EntEval.enteval.efp.EFPEval.loadFile", "home.repos.pwc.inspect_result.ZeweiChu_EntEval.enteval.efp.EFPEval.loadFile"], ["    ", "def", "__init__", "(", "self", ",", "taskpath", ",", "use_name", "=", "False", ",", "seed", "=", "1111", ")", ":", "\n", "        ", "logging", ".", "debug", "(", "'***** Transfer task : Conll Yago Entity Linking *****\\n\\n'", ")", "\n", "self", ".", "seed", "=", "seed", "\n", "self", ".", "use_name", "=", "use_name", "\n", "if", "self", ".", "use_name", ":", "\n", "            ", "logging", ".", "debug", "(", "\"***** Use entity names to compute embedding *****\"", ")", "\n", "", "else", ":", "\n", "            ", "logging", ".", "debug", "(", "\"***** Use entity descriptions to compute embedding *****\"", ")", "\n", "\n", "", "train_context", ",", "train_desc", "=", "self", ".", "loadFile", "(", "os", ".", "path", ".", "join", "(", "taskpath", ",", "'train.final.txt'", ")", ")", "\n", "valid_context", ",", "valid_desc", "=", "self", ".", "loadFile", "(", "os", ".", "path", ".", "join", "(", "taskpath", ",", "'testa.final.txt'", ")", ")", "\n", "test_context", ",", "test_desc", "=", "self", ".", "loadFile", "(", "os", ".", "path", ".", "join", "(", "taskpath", ",", "'testb.final.txt'", ")", ")", "\n", "self", ".", "data", "=", "{", "'train'", ":", "(", "train_context", ",", "train_desc", ")", ",", "\n", "'valid'", ":", "(", "valid_context", ",", "valid_desc", ")", ",", "\n", "'test'", ":", "(", "test_context", ",", "test_desc", ")", "}", "\n", "self", ".", "samples", "=", "[", "ins", "[", "0", "]", "for", "ins", "in", "train_context", "]", "+", "[", "ins", "[", "0", "]", "for", "ins", "in", "valid_context", "]", "+", "[", "ins", "[", "0", "]", "for", "ins", "in", "test_context", "]", "+", "[", "cand", "[", "0", "]", "for", "cands", "in", "train_desc", "for", "cand", "in", "cands", "]", "+", "[", "cand", "[", "0", "]", "for", "cands", "in", "valid_desc", "for", "cand", "in", "cands", "]", "+", "[", "cand", "[", "0", "]", "for", "cands", "in", "test_desc", "for", "cand", "in", "cands", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.enteval.ed.ConllYagoEval.do_prepare": [[164, 166], ["prepare"], "methods", ["home.repos.pwc.inspect_result.ZeweiChu_EntEval.examples.eval_elmo.prepare"], ["", "def", "do_prepare", "(", "self", ",", "params", ",", "prepare", ")", ":", "\n", "        ", "return", "prepare", "(", "params", ",", "self", ".", "samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.enteval.ed.ConllYagoEval.loadFile": [[167, 192], ["open", "line.strip().split", "entities.split.split.split", "contexts.append", "descs.append", "entity.split", "line.strip", "entity_name.split.split.split", "_descs.append", "desc.split.split.split", "_descs.append", "sent.split", "int", "int", "float", "float"], "methods", ["None"], ["", "def", "loadFile", "(", "self", ",", "fpath", ")", ":", "\n", "        ", "contexts", ",", "descs", "=", "[", "]", ",", "[", "]", "\n", "with", "open", "(", "fpath", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ":", "\n", "                ", "s", ",", "e", ",", "sent", ",", "_", ",", "entities", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "\"\\t\"", ",", "4", ")", "\n", "entities", "=", "entities", ".", "split", "(", "\"\\t\"", ")", "\n", "# code.interact(local=locals())", "\n", "_descs", "=", "[", "]", "\n", "for", "entity", "in", "entities", ":", "\n", "# print(entity)", "\n", "                    ", "prior", ",", "entity_name", ",", "desc", "=", "entity", ".", "split", "(", "\"|||\"", ",", "2", ")", "\n", "if", "self", ".", "use_name", ":", "\n", "                        ", "entity_name", "=", "entity_name", ".", "split", "(", "\"_\"", ")", "\n", "_descs", ".", "append", "(", "[", "entity_name", ",", "float", "(", "prior", ")", ",", "0", "]", ")", "\n", "", "else", ":", "\n", "                        ", "desc", "=", "desc", ".", "split", "(", ")", "\n", "_descs", ".", "append", "(", "[", "desc", ",", "float", "(", "prior", ")", ",", "0", "]", ")", "\n", "", "", "_descs", "[", "0", "]", "[", "-", "1", "]", "=", "1", "\n", "\n", "contexts", ".", "append", "(", "[", "sent", ".", "split", "(", ")", ",", "int", "(", "s", ")", ",", "int", "(", "e", ")", "]", ")", "\n", "descs", ".", "append", "(", "_descs", ")", "\n", "\n", "# context: [[sent, s, e] * N]", "\n", "# descs: [[[desc, prior, 0/1] * M] * N]", "\n", "", "", "return", "contexts", ",", "descs", "\n", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.enteval.ed.ConllYagoEval.run": [[193, 272], ["copy.deepcopy", "enteval.tools.validation.SplitClassifier", "enteval.tools.validation.SplitClassifier.run", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "logging.debug", "len", "range", "numpy.vstack", "len", "range", "numpy.vstack", "numpy.vstack", "numpy.array().astype", "numpy.array().astype", "print", "numpy.concatenate", "len", "numpy.cumsum().tolist", "len", "len", "len", "len", "len", "len", "batcher", "numpy.vstack.append", "len", "batcher", "numpy.vstack.append", "numpy.argmax", "numpy.argmax", "numpy.argmax", "numpy.argmax", "range", "range", "numpy.array", "numpy.array", "numpy.abs", "numpy.cumsum", "range", "range", "range", "range", "len", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.ZeweiChu_EntEval.tools.validation.SplitMultiClassClassifier.run", "home.repos.pwc.inspect_result.ZeweiChu_EntEval.examples.eval_elmo.batcher", "home.repos.pwc.inspect_result.ZeweiChu_EntEval.examples.eval_elmo.batcher"], ["", "def", "run", "(", "self", ",", "params", ",", "batcher", ")", ":", "\n", "        ", "self", ".", "X", ",", "self", ".", "y", ",", "self", ".", "priors", "=", "{", "}", ",", "{", "}", ",", "{", "}", "\n", "for", "key", "in", "self", ".", "data", ":", "\n", "            ", "if", "key", "not", "in", "self", ".", "X", ":", "\n", "                ", "self", ".", "X", "[", "key", "]", "=", "[", "]", "\n", "", "if", "key", "not", "in", "self", ".", "y", ":", "\n", "                ", "self", ".", "y", "[", "key", "]", "=", "[", "]", "\n", "\n", "", "contexts", ",", "descs", "=", "self", ".", "data", "[", "key", "]", "\n", "n_contexts", "=", "len", "(", "contexts", ")", "\n", "enc_contexts", "=", "[", "]", "\n", "for", "ii", "in", "range", "(", "0", ",", "n_contexts", ",", "params", ".", "batch_size", ")", ":", "\n", "                ", "batch_context", "=", "[", "item", "+", "[", "None", "]", "for", "item", "in", "contexts", "[", "ii", ":", "ii", "+", "params", ".", "batch_size", "]", "]", "\n", "# code.interact(local=locals())", "\n", "enc_context", ",", "_", "=", "batcher", "(", "params", ",", "batch_context", ")", "\n", "enc_contexts", ".", "append", "(", "enc_context", ")", "\n", "", "enc_contexts", "=", "np", ".", "vstack", "(", "enc_contexts", ")", "\n", "\n", "enc_descs", "=", "[", "]", "\n", "labels", "=", "[", "desc", "[", "-", "1", "]", "for", "_descs", "in", "descs", "for", "desc", "in", "_descs", "]", "\n", "priors", "=", "[", "desc", "[", "-", "2", "]", "for", "_descs", "in", "descs", "for", "desc", "in", "_descs", "]", "\n", "num_descs", "=", "[", "len", "(", "_descs", ")", "for", "_descs", "in", "descs", "]", "\n", "descs", "=", "[", "desc", "[", "0", "]", "for", "_descs", "in", "descs", "for", "desc", "in", "_descs", "]", "\n", "n_descs", "=", "len", "(", "descs", ")", "\n", "for", "ii", "in", "range", "(", "0", ",", "n_descs", ",", "params", ".", "batch_size", ")", ":", "\n", "                ", "batch_descs", "=", "[", "[", "None", ",", "None", ",", "None", "]", "+", "[", "item", "]", "for", "item", "in", "descs", "[", "ii", ":", "ii", "+", "params", ".", "batch_size", "]", "]", "\n", "\n", "_", ",", "enc_desc", "=", "batcher", "(", "params", ",", "batch_descs", ")", "\n", "enc_descs", ".", "append", "(", "enc_desc", ")", "\n", "", "enc_descs", "=", "np", ".", "vstack", "(", "enc_descs", ")", "\n", "\n", "enc_contexts", "=", "[", "enc_contexts", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "num_descs", ")", ")", "for", "j", "in", "range", "(", "num_descs", "[", "i", "]", ")", "]", "\n", "enc_contexts", "=", "np", ".", "vstack", "(", "enc_contexts", ")", "\n", "labels", "=", "np", ".", "array", "(", "labels", ")", ".", "astype", "(", "\"int64\"", ")", "\n", "priors", "=", "np", ".", "array", "(", "priors", ")", ".", "astype", "(", "\"float32\"", ")", "\n", "print", "(", "enc_contexts", ".", "shape", ",", "enc_descs", ".", "shape", ")", "\n", "#            self.X[key][\"context\"] = enc_contexts.reshape(enc_descs.shape)", "\n", "#            self.X[key][\"desc\"] = enc_descs", "\n", "\n", "self", ".", "X", "[", "key", "]", "=", "np", ".", "concatenate", "(", "[", "enc_contexts", ",", "enc_descs", ",", "enc_contexts", "*", "enc_descs", ",", "np", ".", "abs", "(", "enc_contexts", "-", "enc_descs", ")", "]", ",", "1", ")", "\n", "self", ".", "y", "[", "key", "]", "=", "labels", "\n", "self", ".", "priors", "[", "key", "]", "=", "priors", "\n", "\n", "", "config", "=", "{", "'nclasses'", ":", "2", ",", "'seed'", ":", "self", ".", "seed", ",", "\n", "'usepytorch'", ":", "params", ".", "usepytorch", ",", "\n", "'cudaEfficient'", ":", "True", ",", "\n", "'noreg'", ":", "False", "}", "\n", "\n", "config_classifier", "=", "copy", ".", "deepcopy", "(", "params", ".", "classifier", ")", "\n", "config_classifier", "[", "'max_epoch'", "]", "=", "15", "\n", "config_classifier", "[", "'epoch_size'", "]", "=", "1", "\n", "config", "[", "'classifier'", "]", "=", "config_classifier", "\n", "\n", "clf", "=", "SplitClassifier", "(", "self", ".", "X", ",", "self", ".", "y", ",", "config", ")", "\n", "devacc", ",", "testacc", "=", "clf", ".", "run", "(", "return_score", "=", "True", ")", "\n", "testacc", ",", "all_logits", "=", "testacc", "\n", "_", ",", "descs", "=", "self", ".", "data", "[", "key", "]", "\n", "num_descs", "=", "[", "len", "(", "_descs", ")", "for", "_descs", "in", "descs", "]", "\n", "cums", "=", "[", "0", "]", "+", "np", ".", "cumsum", "(", "num_descs", ")", ".", "tolist", "(", ")", "\n", "all_logits_v1", "=", "all_logits", "+", "self", ".", "priors", "[", "\"test\"", "]", "-", "all_logits", "*", "self", ".", "priors", "[", "\"test\"", "]", "\n", "# code.interact(local=locals()) ", "\n", "preds_v1", "=", "np", ".", "array", "(", "[", "np", ".", "argmax", "(", "all_logits_v1", "[", "cums", "[", "i", "]", ":", "cums", "[", "i", "+", "1", "]", "]", ")", "for", "i", "in", "range", "(", "len", "(", "cums", ")", "-", "1", ")", "]", ")", "\n", "testacc_v1", "=", "(", "preds_v1", "==", "0", ")", ".", "sum", "(", ")", "/", "len", "(", "preds_v1", ")", "\n", "all_logits_v2", "=", "all_logits", "+", "self", ".", "priors", "[", "\"test\"", "]", "\n", "preds_v2", "=", "np", ".", "array", "(", "[", "np", ".", "argmax", "(", "all_logits_v2", "[", "cums", "[", "i", "]", ":", "cums", "[", "i", "+", "1", "]", "]", ")", "for", "i", "in", "range", "(", "len", "(", "cums", ")", "-", "1", ")", "]", ")", "\n", "testacc_v2", "=", "(", "preds_v2", "==", "0", ")", ".", "sum", "(", ")", "/", "len", "(", "preds_v2", ")", "\n", "all_logits_v3", "=", "all_logits", "*", "self", ".", "priors", "[", "\"test\"", "]", "\n", "preds_v3", "=", "np", ".", "array", "(", "[", "np", ".", "argmax", "(", "all_logits_v3", "[", "cums", "[", "i", "]", ":", "cums", "[", "i", "+", "1", "]", "]", ")", "for", "i", "in", "range", "(", "len", "(", "cums", ")", "-", "1", ")", "]", ")", "\n", "testacc_v3", "=", "(", "preds_v3", "==", "0", ")", ".", "sum", "(", ")", "/", "len", "(", "preds_v3", ")", "\n", "all_logits_prior", "=", "self", ".", "priors", "[", "\"test\"", "]", "\n", "preds_prior", "=", "np", ".", "array", "(", "[", "np", ".", "argmax", "(", "all_logits_prior", "[", "cums", "[", "i", "]", ":", "cums", "[", "i", "+", "1", "]", "]", ")", "for", "i", "in", "range", "(", "len", "(", "cums", ")", "-", "1", ")", "]", ")", "\n", "testacc_prior", "=", "(", "preds_prior", "==", "0", ")", ".", "sum", "(", ")", "/", "len", "(", "preds_prior", ")", "\n", "\n", "logging", ".", "debug", "(", "'Dev acc : {0} Test acc v1: {1} Test acc v2: {2} Test acc v3: {3} Test acc prior: {4} for ConNLL Yago Entity Linking\\n'", "\n", ".", "format", "(", "devacc", ",", "testacc_v1", ",", "testacc_v2", ",", "testacc_v3", ",", "testacc_prior", ")", ")", "\n", "return", "{", "'devacc'", ":", "devacc", ",", "'binarytestacc'", ":", "testacc", ",", "'testaccv1'", ":", "testacc_v1", ",", "\n", "'testaccv2'", ":", "testacc_v2", ",", "'testaccv3'", ":", "testacc_v3", ",", "'testacc_prior'", ":", "testacc_prior", ",", "\n", "'ndev'", ":", "len", "(", "self", ".", "data", "[", "'valid'", "]", "[", "0", "]", ")", ",", "\n", "'ntest'", ":", "len", "(", "self", ".", "data", "[", "'test'", "]", "[", "0", "]", ")", "}", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.enteval.cerp.CERPEval.__init__": [[25, 36], ["logging.debug", "cerp.CERPEval.loadFile", "cerp.CERPEval.loadFile", "cerp.CERPEval.loadFile", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.ZeweiChu_EntEval.enteval.efp.EFPEval.loadFile", "home.repos.pwc.inspect_result.ZeweiChu_EntEval.enteval.efp.EFPEval.loadFile", "home.repos.pwc.inspect_result.ZeweiChu_EntEval.enteval.efp.EFPEval.loadFile"], ["    ", "def", "__init__", "(", "self", ",", "taskpath", ",", "seed", "=", "1111", ")", ":", "\n", "        ", "logging", ".", "debug", "(", "'***** Transfer task : Contexualized Entity Relationship Prediction *****\\n\\n'", ")", "\n", "self", ".", "seed", "=", "seed", "\n", "trainlabels", ",", "train1", ",", "train2", "=", "self", ".", "loadFile", "(", "os", ".", "path", ".", "join", "(", "taskpath", ",", "'train.txt'", ")", ")", "\n", "validlabels", ",", "valid1", ",", "valid2", "=", "self", ".", "loadFile", "(", "os", ".", "path", ".", "join", "(", "taskpath", ",", "'dev.txt'", ")", ")", "\n", "testlabels", ",", "test1", ",", "test2", "=", "self", ".", "loadFile", "(", "os", ".", "path", ".", "join", "(", "taskpath", ",", "'test.txt'", ")", ")", "\n", "\n", "self", ".", "samples", "=", "[", "data", "[", "0", "]", "for", "data", "in", "train1", "]", "+", "[", "data", "[", "0", "]", "for", "data", "in", "train2", "]", "+", "[", "data", "[", "0", "]", "for", "data", "in", "valid1", "]", "+", "[", "data", "[", "0", "]", "for", "data", "in", "valid2", "]", "+", "[", "data", "[", "0", "]", "for", "data", "in", "test1", "]", "+", "[", "data", "[", "0", "]", "for", "data", "in", "test2", "]", "\n", "self", ".", "data", "=", "{", "'train'", ":", "(", "train1", ",", "train2", ",", "trainlabels", ")", ",", "\n", "'valid'", ":", "(", "valid1", ",", "valid2", ",", "validlabels", ")", ",", "\n", "'test'", ":", "(", "test1", ",", "test2", ",", "testlabels", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.enteval.cerp.CERPEval.do_prepare": [[38, 40], ["prepare"], "methods", ["home.repos.pwc.inspect_result.ZeweiChu_EntEval.examples.eval_elmo.prepare"], ["", "def", "do_prepare", "(", "self", ",", "params", ",", "prepare", ")", ":", "\n", "        ", "return", "prepare", "(", "params", ",", "self", ".", "samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.enteval.cerp.CERPEval.loadFile": [[41, 54], ["codecs.open", "line.strip().split", "sentence.split.split.split", "labels.append", "entities1.append", "entities2.append", "int", "line.strip", "int", "int", "int", "int"], "methods", ["None"], ["", "def", "loadFile", "(", "self", ",", "fpath", ")", ":", "\n", "        ", "labels", ",", "entities1", ",", "entities2", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "with", "codecs", ".", "open", "(", "fpath", ",", "'rb'", ",", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ":", "\n", "\n", "                ", "label", ",", "s1", ",", "e1", ",", "s2", ",", "e2", ",", "sentence", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "sentence", "=", "sentence", ".", "split", "(", ")", "\n", "# print(line)", "\n", "labels", ".", "append", "(", "int", "(", "label", ")", ")", "\n", "entities1", ".", "append", "(", "[", "sentence", ",", "int", "(", "s1", ")", ",", "int", "(", "e1", ")", ",", "None", "]", ")", "\n", "entities2", ".", "append", "(", "[", "sentence", ",", "int", "(", "s2", ")", ",", "int", "(", "e2", ")", ",", "None", "]", ")", "\n", "\n", "", "", "return", "labels", ",", "entities1", ",", "entities2", "\n", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.enteval.cerp.CERPEval.run": [[56, 99], ["copy.deepcopy", "enteval.tools.validation.SplitClassifier", "enteval.tools.validation.SplitClassifier.run", "logging.debug", "len", "range", "numpy.vstack", "numpy.array", "len", "len", "batcher", "batcher", "enc_input.append", "logging.info", "len", "len", "len", "numpy.hstack", "numpy.abs"], "methods", ["home.repos.pwc.inspect_result.ZeweiChu_EntEval.tools.validation.SplitMultiClassClassifier.run", "home.repos.pwc.inspect_result.ZeweiChu_EntEval.examples.eval_elmo.batcher", "home.repos.pwc.inspect_result.ZeweiChu_EntEval.examples.eval_elmo.batcher"], ["", "def", "run", "(", "self", ",", "params", ",", "batcher", ")", ":", "\n", "        ", "self", ".", "X", ",", "self", ".", "y", "=", "{", "}", ",", "{", "}", "\n", "for", "key", "in", "self", ".", "data", ":", "\n", "            ", "if", "key", "not", "in", "self", ".", "X", ":", "\n", "                ", "self", ".", "X", "[", "key", "]", "=", "[", "]", "\n", "", "if", "key", "not", "in", "self", ".", "y", ":", "\n", "                ", "self", ".", "y", "[", "key", "]", "=", "[", "]", "\n", "\n", "", "input1", ",", "input2", ",", "mylabels", "=", "self", ".", "data", "[", "key", "]", "\n", "enc_input", "=", "[", "]", "\n", "n_labels", "=", "len", "(", "mylabels", ")", "\n", "for", "ii", "in", "range", "(", "0", ",", "n_labels", ",", "params", ".", "batch_size", ")", ":", "\n", "                ", "batch1", "=", "input1", "[", "ii", ":", "ii", "+", "params", ".", "batch_size", "]", "\n", "batch2", "=", "input2", "[", "ii", ":", "ii", "+", "params", ".", "batch_size", "]", "\n", "\n", "if", "len", "(", "batch1", ")", "==", "len", "(", "batch2", ")", "and", "len", "(", "batch1", ")", ">", "0", ":", "\n", "                    ", "enc1", ",", "_", "=", "batcher", "(", "params", ",", "batch1", ")", "\n", "enc2", ",", "_", "=", "batcher", "(", "params", ",", "batch2", ")", "\n", "enc_input", ".", "append", "(", "np", ".", "hstack", "(", "(", "enc1", ",", "enc2", ",", "enc1", "*", "enc2", ",", "\n", "np", ".", "abs", "(", "enc1", "-", "enc2", ")", ")", ")", ")", "\n", "", "if", "(", "ii", "*", "params", ".", "batch_size", ")", "%", "(", "20000", "*", "params", ".", "batch_size", ")", "==", "0", ":", "\n", "                    ", "logging", ".", "info", "(", "\"PROGRESS (encoding): %.2f%%\"", "%", "\n", "(", "100", "*", "ii", "/", "n_labels", ")", ")", "\n", "", "", "self", ".", "X", "[", "key", "]", "=", "np", ".", "vstack", "(", "enc_input", ")", "\n", "self", ".", "y", "[", "key", "]", "=", "np", ".", "array", "(", "mylabels", ")", "\n", "\n", "", "config", "=", "{", "'nclasses'", ":", "2", ",", "'seed'", ":", "self", ".", "seed", ",", "\n", "'usepytorch'", ":", "params", ".", "usepytorch", ",", "\n", "'cudaEfficient'", ":", "True", ",", "\n", "'nhid'", ":", "params", ".", "nhid", ",", "'noreg'", ":", "True", "}", "\n", "\n", "config_classifier", "=", "copy", ".", "deepcopy", "(", "params", ".", "classifier", ")", "\n", "config_classifier", "[", "'max_epoch'", "]", "=", "15", "\n", "config_classifier", "[", "'epoch_size'", "]", "=", "1", "\n", "config", "[", "'classifier'", "]", "=", "config_classifier", "\n", "\n", "clf", "=", "SplitClassifier", "(", "self", ".", "X", ",", "self", ".", "y", ",", "config", ")", "\n", "devacc", ",", "testacc", "=", "clf", ".", "run", "(", ")", "\n", "logging", ".", "debug", "(", "'Dev acc : {0} Test acc : {1} for Contexualized Entity Relationship Prediction \\n'", "\n", ".", "format", "(", "devacc", ",", "testacc", ")", ")", "\n", "return", "{", "'devacc'", ":", "devacc", ",", "'acc'", ":", "testacc", ",", "\n", "'ndev'", ":", "len", "(", "self", ".", "data", "[", "'valid'", "]", "[", "0", "]", ")", ",", "\n", "'ntest'", ":", "len", "(", "self", ".", "data", "[", "'test'", "]", "[", "0", "]", ")", "}", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.enteval.cap.CAPEval.__init__": [[24, 42], ["logging.debug", "logging.debug", "cap.CAPEval.loadFile", "cap.CAPEval.loadFile", "cap.CAPEval.loadFile", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.ZeweiChu_EntEval.enteval.efp.EFPEval.loadFile", "home.repos.pwc.inspect_result.ZeweiChu_EntEval.enteval.efp.EFPEval.loadFile", "home.repos.pwc.inspect_result.ZeweiChu_EntEval.enteval.efp.EFPEval.loadFile"], ["    ", "def", "__init__", "(", "self", ",", "taskpath", ",", "seed", "=", "1111", ")", ":", "\n", "        ", "logging", ".", "debug", "(", "'***** Transfer task : Coreference Arc Prediction binary Classification*****'", ")", "\n", "self", ".", "seed", "=", "seed", "\n", "logging", ".", "debug", "(", "'***** Task path: {}*****\\n\\n'", ".", "format", "(", "taskpath", ")", ")", "\n", "train", "=", "self", ".", "loadFile", "(", "os", ".", "path", ".", "join", "(", "taskpath", ",", "'train.txt'", ")", ")", "\n", "valid", "=", "self", ".", "loadFile", "(", "os", ".", "path", ".", "join", "(", "taskpath", ",", "'dev.txt'", ")", ")", "\n", "test", "=", "self", ".", "loadFile", "(", "os", ".", "path", ".", "join", "(", "taskpath", ",", "'test.txt'", ")", ")", "\n", "\n", "\n", "self", ".", "samples", "=", "[", "item", "[", "0", "]", "[", "0", "]", "for", "item", "in", "train", "]", "+", "[", "item", "[", "1", "]", "[", "0", "]", "for", "item", "in", "train", "]", "+", "[", "item", "[", "0", "]", "[", "0", "]", "for", "item", "in", "valid", "]", "+", "[", "item", "[", "1", "]", "[", "0", "]", "for", "item", "in", "valid", "]", "+", "[", "item", "[", "0", "]", "[", "0", "]", "for", "item", "in", "test", "]", "+", "[", "item", "[", "1", "]", "[", "0", "]", "for", "item", "in", "test", "]", "\n", "self", ".", "data", "=", "{", "'train'", ":", "train", ",", "\n", "'valid'", ":", "valid", ",", "\n", "'test'", ":", "test", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.enteval.cap.CAPEval.do_prepare": [[43, 45], ["prepare"], "methods", ["home.repos.pwc.inspect_result.ZeweiChu_EntEval.examples.eval_elmo.prepare"], ["", "def", "do_prepare", "(", "self", ",", "params", ",", "prepare", ")", ":", "\n", "        ", "return", "prepare", "(", "params", ",", "self", ".", "samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.enteval.cap.CAPEval.loadFile": [[46, 68], ["codecs.open", "line.strip", "data.append", "line.strip().split", "int", "int", "sentence.split", "item.append", "item.append", "int", "line.strip", "line.strip"], "methods", ["None"], ["", "def", "loadFile", "(", "self", ",", "fpath", ")", ":", "\n", "        ", "data", "=", "[", "]", "\n", "item", "=", "[", "]", "\n", "i", "=", "1", "\n", "with", "codecs", ".", "open", "(", "fpath", ",", "'rb'", ",", "'utf-8'", ")", "as", "fin", ":", "\n", "            ", "for", "line", "in", "fin", ":", "\n", "                ", "if", "line", ".", "strip", "(", ")", "==", "\"\"", ":", "\n", "                    ", "data", ".", "append", "(", "item", ")", "\n", "item", "=", "[", "]", "\n", "i", "=", "0", "\n", "", "else", ":", "\n", "                    ", "if", "i", "<", "3", ":", "\n", "# print(line)", "\n", "                        ", "sentence", ",", "start", ",", "end", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "start", "=", "int", "(", "start", ")", "\n", "end", "=", "int", "(", "end", ")", "\n", "words", "=", "sentence", ".", "split", "(", ")", "\n", "item", ".", "append", "(", "[", "words", ",", "start", ",", "end", "]", ")", "\n", "", "else", ":", "\n", "                        ", "item", ".", "append", "(", "int", "(", "line", ".", "strip", "(", ")", ")", ")", "\n", "", "", "i", "+=", "1", "\n", "", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.enteval.cap.CAPEval.run": [[70, 116], ["copy.deepcopy", "enteval.tools.validation.SplitClassifier", "enteval.tools.validation.SplitClassifier.run", "logging.debug", "numpy.array", "len", "range", "numpy.vstack", "len", "len", "batcher", "batcher", "enc_input.append", "logging.info", "len", "len", "len", "numpy.hstack", "numpy.abs"], "methods", ["home.repos.pwc.inspect_result.ZeweiChu_EntEval.tools.validation.SplitMultiClassClassifier.run", "home.repos.pwc.inspect_result.ZeweiChu_EntEval.examples.eval_elmo.batcher", "home.repos.pwc.inspect_result.ZeweiChu_EntEval.examples.eval_elmo.batcher"], ["", "def", "run", "(", "self", ",", "params", ",", "batcher", ")", ":", "\n", "        ", "self", ".", "X", ",", "self", ".", "y", "=", "{", "}", ",", "{", "}", "\n", "for", "key", "in", "self", ".", "data", ":", "\n", "            ", "if", "key", "not", "in", "self", ".", "X", ":", "\n", "                ", "self", ".", "X", "[", "key", "]", "=", "[", "]", "\n", "", "if", "key", "not", "in", "self", ".", "y", ":", "\n", "                ", "self", ".", "y", "[", "key", "]", "=", "[", "]", "\n", "\n", "", "input1", "=", "[", "item", "[", "0", "]", "+", "[", "None", "]", "for", "item", "in", "self", ".", "data", "[", "key", "]", "]", "\n", "input2", "=", "[", "item", "[", "1", "]", "+", "[", "None", "]", "for", "item", "in", "self", ".", "data", "[", "key", "]", "]", "\n", "labels", "=", "np", ".", "array", "(", "[", "item", "[", "2", "]", "for", "item", "in", "self", ".", "data", "[", "key", "]", "]", ")", "\n", "\n", "enc_input", "=", "[", "]", "\n", "n_labels", "=", "len", "(", "labels", ")", "\n", "for", "ii", "in", "range", "(", "0", ",", "n_labels", ",", "params", ".", "batch_size", ")", ":", "\n", "                ", "batch1", "=", "input1", "[", "ii", ":", "ii", "+", "params", ".", "batch_size", "]", "\n", "batch2", "=", "input2", "[", "ii", ":", "ii", "+", "params", ".", "batch_size", "]", "\n", "\n", "if", "len", "(", "batch1", ")", "==", "len", "(", "batch2", ")", "and", "len", "(", "batch1", ")", ">", "0", ":", "\n", "                    ", "enc1", ",", "_", "=", "batcher", "(", "params", ",", "batch1", ")", "\n", "enc2", ",", "_", "=", "batcher", "(", "params", ",", "batch2", ")", "\n", "enc_input", ".", "append", "(", "np", ".", "hstack", "(", "(", "enc1", ",", "enc2", ",", "enc1", "*", "enc2", ",", "\n", "np", ".", "abs", "(", "enc1", "-", "enc2", ")", ")", ")", ")", "\n", "", "if", "(", "ii", "*", "params", ".", "batch_size", ")", "%", "(", "20000", "*", "params", ".", "batch_size", ")", "==", "0", ":", "\n", "                    ", "logging", ".", "info", "(", "\"PROGRESS (encoding): %.2f%%\"", "%", "\n", "(", "100", "*", "ii", "/", "n_labels", ")", ")", "\n", "", "", "self", ".", "X", "[", "key", "]", "=", "np", ".", "vstack", "(", "enc_input", ")", "\n", "self", ".", "y", "[", "key", "]", "=", "labels", "\n", "\n", "", "config", "=", "{", "'nclasses'", ":", "2", ",", "'seed'", ":", "self", ".", "seed", ",", "\n", "'usepytorch'", ":", "params", ".", "usepytorch", ",", "\n", "'cudaEfficient'", ":", "True", ",", "\n", "'nhid'", ":", "params", ".", "nhid", ",", "'noreg'", ":", "True", "}", "\n", "\n", "config_classifier", "=", "copy", ".", "deepcopy", "(", "params", ".", "classifier", ")", "\n", "config_classifier", "[", "'max_epoch'", "]", "=", "15", "\n", "config_classifier", "[", "'epoch_size'", "]", "=", "1", "\n", "config", "[", "'classifier'", "]", "=", "config_classifier", "\n", "\n", "clf", "=", "SplitClassifier", "(", "self", ".", "X", ",", "self", ".", "y", ",", "config", ")", "\n", "devacc", ",", "testacc", "=", "clf", ".", "run", "(", ")", "\n", "logging", ".", "debug", "(", "'Dev acc : {0} Test acc : {1} for PreCo\\n'", "\n", ".", "format", "(", "devacc", ",", "testacc", ")", ")", "\n", "return", "{", "'devacc'", ":", "devacc", ",", "'acc'", ":", "testacc", ",", "\n", "'ndev'", ":", "len", "(", "self", ".", "data", "[", "'valid'", "]", ")", ",", "\n", "'ntest'", ":", "len", "(", "self", ".", "data", "[", "'test'", "]", ")", "}", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.enteval.ert.ERTEval.__init__": [[24, 61], ["logging.debug", "logging.debug", "ert.ERTEval.loadFile", "ert.ERTEval.loadFile", "ert.ERTEval.loadFile", "list", "sorted", "map", "sorted", "map", "sorted", "map", "logging.debug", "logging.debug", "os.path.join", "os.path.join", "os.path.join", "set", "zip", "zip", "zip", "zip", "zip", "zip", "enumerate", "len", "len", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.ZeweiChu_EntEval.enteval.efp.EFPEval.loadFile", "home.repos.pwc.inspect_result.ZeweiChu_EntEval.enteval.efp.EFPEval.loadFile", "home.repos.pwc.inspect_result.ZeweiChu_EntEval.enteval.efp.EFPEval.loadFile"], ["    ", "def", "__init__", "(", "self", ",", "taskpath", ",", "use_name", "=", "False", ",", "seed", "=", "1111", ")", ":", "\n", "        ", "logging", ".", "debug", "(", "'***** Transfer task : Entity Relationship prediction *****'", ")", "\n", "logging", ".", "debug", "(", "'***** task path: {} *****\\n\\n'", ".", "format", "(", "taskpath", ")", ")", "\n", "self", ".", "seed", "=", "seed", "\n", "self", ".", "use_name", "=", "use_name", "\n", "if", "self", ".", "use_name", ":", "\n", "            ", "logging", ".", "debug", "(", "\"***** Use entity names to compute embedding *****\"", ")", "\n", "", "else", ":", "\n", "            ", "logging", ".", "debug", "(", "\"***** Use entity descriptions to compute embedding *****\"", ")", "\n", "", "trainlabels", ",", "train1", ",", "train2", "=", "self", ".", "loadFile", "(", "os", ".", "path", ".", "join", "(", "taskpath", ",", "'train.txt'", ")", ")", "\n", "validlabels", ",", "valid1", ",", "valid2", "=", "self", ".", "loadFile", "(", "os", ".", "path", ".", "join", "(", "taskpath", ",", "'dev.txt'", ")", ")", "\n", "testlabels", ",", "test1", ",", "test2", "=", "self", ".", "loadFile", "(", "os", ".", "path", ".", "join", "(", "taskpath", ",", "'test.txt'", ")", ")", "\n", "\n", "self", ".", "id2label", "=", "list", "(", "set", "(", "trainlabels", ")", ")", "\n", "self", ".", "label2id", "=", "{", "label", ":", "i", "for", "i", ",", "label", "in", "enumerate", "(", "self", ".", "id2label", ")", "}", "\n", "trainlabels", "=", "[", "self", ".", "label2id", "[", "l", "]", "for", "l", "in", "trainlabels", "]", "\n", "validlabels", "=", "[", "self", ".", "label2id", "[", "l", "]", "for", "l", "in", "validlabels", "]", "\n", "testlabels", "=", "[", "self", ".", "label2id", "[", "l", "]", "for", "l", "in", "testlabels", "]", "\n", "\n", "\n", "# sort data (by s2 first) to reduce padding", "\n", "sorted_train", "=", "sorted", "(", "zip", "(", "train2", ",", "train1", ",", "trainlabels", ")", ",", "\n", "key", "=", "lambda", "z", ":", "(", "len", "(", "z", "[", "0", "]", ")", ",", "len", "(", "z", "[", "1", "]", ")", ",", "z", "[", "2", "]", ")", ")", "\n", "train2", ",", "train1", ",", "trainlabels", "=", "map", "(", "list", ",", "zip", "(", "*", "sorted_train", ")", ")", "\n", "\n", "sorted_valid", "=", "sorted", "(", "zip", "(", "valid2", ",", "valid1", ",", "validlabels", ")", ",", "\n", "key", "=", "lambda", "z", ":", "(", "len", "(", "z", "[", "0", "]", ")", ",", "len", "(", "z", "[", "1", "]", ")", ",", "z", "[", "2", "]", ")", ")", "\n", "valid2", ",", "valid1", ",", "validlabels", "=", "map", "(", "list", ",", "zip", "(", "*", "sorted_valid", ")", ")", "\n", "\n", "sorted_test", "=", "sorted", "(", "zip", "(", "test2", ",", "test1", ",", "testlabels", ")", ",", "\n", "key", "=", "lambda", "z", ":", "(", "len", "(", "z", "[", "0", "]", ")", ",", "len", "(", "z", "[", "1", "]", ")", ",", "z", "[", "2", "]", ")", ")", "\n", "test2", ",", "test1", ",", "testlabels", "=", "map", "(", "list", ",", "zip", "(", "*", "sorted_test", ")", ")", "\n", "\n", "self", ".", "samples", "=", "train1", "+", "train2", "+", "valid1", "+", "valid2", "+", "test1", "+", "test2", "\n", "self", ".", "data", "=", "{", "'train'", ":", "(", "train1", ",", "train2", ",", "trainlabels", ")", ",", "\n", "'valid'", ":", "(", "valid1", ",", "valid2", ",", "validlabels", ")", ",", "\n", "'test'", ":", "(", "test1", ",", "test2", ",", "testlabels", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.enteval.ert.ERTEval.do_prepare": [[63, 65], ["prepare"], "methods", ["home.repos.pwc.inspect_result.ZeweiChu_EntEval.examples.eval_elmo.prepare"], ["", "def", "do_prepare", "(", "self", ",", "params", ",", "prepare", ")", ":", "\n", "        ", "return", "prepare", "(", "params", ",", "self", ".", "samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.enteval.ert.ERTEval.loadFile": [[66, 79], ["codecs.open", "line.strip().split", "labels.append", "entities1.append", "entities2.append", "entities1.append", "entities2.append", "line.strip", "entity1.split", "entity2.split", "entity_desc1.split", "entity_desc2.split"], "methods", ["None"], ["", "def", "loadFile", "(", "self", ",", "fpath", ")", ":", "\n", "        ", "labels", ",", "entities1", ",", "entities2", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "with", "codecs", ".", "open", "(", "fpath", ",", "'rb'", ",", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ":", "\n", "                ", "label", ",", "entity1", ",", "entity2", ",", "entity_desc1", ",", "entity_desc2", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "labels", ".", "append", "(", "label", ")", "\n", "if", "self", ".", "use_name", ":", "\n", "                    ", "entities1", ".", "append", "(", "entity1", ".", "split", "(", ")", ")", "\n", "entities2", ".", "append", "(", "entity2", ".", "split", "(", ")", ")", "\n", "", "else", ":", "\n", "                    ", "entities1", ".", "append", "(", "entity_desc1", ".", "split", "(", ")", ")", "\n", "entities2", ".", "append", "(", "entity_desc2", ".", "split", "(", ")", ")", "\n", "", "", "", "return", "labels", ",", "entities1", ",", "entities2", "\n", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.enteval.ert.ERTEval.run": [[81, 127], ["copy.deepcopy", "enteval.tools.validation.SplitClassifier", "enteval.tools.validation.SplitClassifier.run", "logging.debug", "len", "range", "numpy.vstack", "numpy.array", "len", "len", "len", "batcher", "batcher", "enc_input.append", "logging.info", "len", "len", "len", "numpy.hstack", "numpy.abs"], "methods", ["home.repos.pwc.inspect_result.ZeweiChu_EntEval.tools.validation.SplitMultiClassClassifier.run", "home.repos.pwc.inspect_result.ZeweiChu_EntEval.examples.eval_elmo.batcher", "home.repos.pwc.inspect_result.ZeweiChu_EntEval.examples.eval_elmo.batcher"], ["", "def", "run", "(", "self", ",", "params", ",", "batcher", ")", ":", "\n", "        ", "self", ".", "X", ",", "self", ".", "y", "=", "{", "}", ",", "{", "}", "\n", "for", "key", "in", "self", ".", "data", ":", "\n", "            ", "if", "key", "not", "in", "self", ".", "X", ":", "\n", "                ", "self", ".", "X", "[", "key", "]", "=", "[", "]", "\n", "", "if", "key", "not", "in", "self", ".", "y", ":", "\n", "                ", "self", ".", "y", "[", "key", "]", "=", "[", "]", "\n", "\n", "", "input1", ",", "input2", ",", "mylabels", "=", "self", ".", "data", "[", "key", "]", "\n", "enc_input", "=", "[", "]", "\n", "n_labels", "=", "len", "(", "mylabels", ")", "\n", "for", "ii", "in", "range", "(", "0", ",", "n_labels", ",", "params", ".", "batch_size", ")", ":", "\n", "                ", "batch1", "=", "input1", "[", "ii", ":", "ii", "+", "params", ".", "batch_size", "]", "\n", "batch2", "=", "input2", "[", "ii", ":", "ii", "+", "params", ".", "batch_size", "]", "\n", "\n", "batch1", "=", "[", "[", "None", ",", "None", ",", "None", "]", "+", "[", "item", "]", "for", "item", "in", "batch1", "]", "\n", "batch2", "=", "[", "[", "None", ",", "None", ",", "None", "]", "+", "[", "item", "]", "for", "item", "in", "batch2", "]", "\n", "\n", "if", "len", "(", "batch1", ")", "==", "len", "(", "batch2", ")", "and", "len", "(", "batch1", ")", ">", "0", ":", "\n", "                    ", "_", ",", "enc1", "=", "batcher", "(", "params", ",", "batch1", ")", "\n", "_", ",", "enc2", "=", "batcher", "(", "params", ",", "batch2", ")", "\n", "enc_input", ".", "append", "(", "np", ".", "hstack", "(", "(", "enc1", ",", "enc2", ",", "enc1", "*", "enc2", ",", "\n", "np", ".", "abs", "(", "enc1", "-", "enc2", ")", ")", ")", ")", "\n", "", "if", "(", "ii", "*", "params", ".", "batch_size", ")", "%", "(", "20000", "*", "params", ".", "batch_size", ")", "==", "0", ":", "\n", "                    ", "logging", ".", "info", "(", "\"PROGRESS (encoding): %.2f%%\"", "%", "\n", "(", "100", "*", "ii", "/", "n_labels", ")", ")", "\n", "", "", "self", ".", "X", "[", "key", "]", "=", "np", ".", "vstack", "(", "enc_input", ")", "\n", "self", ".", "y", "[", "key", "]", "=", "np", ".", "array", "(", "mylabels", ")", "\n", "\n", "", "config", "=", "{", "'nclasses'", ":", "len", "(", "self", ".", "id2label", ")", ",", "'seed'", ":", "self", ".", "seed", ",", "\n", "'usepytorch'", ":", "params", ".", "usepytorch", ",", "\n", "'cudaEfficient'", ":", "True", ",", "\n", "'nhid'", ":", "params", ".", "nhid", ",", "'noreg'", ":", "True", "}", "\n", "\n", "config_classifier", "=", "copy", ".", "deepcopy", "(", "params", ".", "classifier", ")", "\n", "config_classifier", "[", "'max_epoch'", "]", "=", "15", "\n", "config_classifier", "[", "'epoch_size'", "]", "=", "1", "\n", "config", "[", "'classifier'", "]", "=", "config_classifier", "\n", "\n", "clf", "=", "SplitClassifier", "(", "self", ".", "X", ",", "self", ".", "y", ",", "config", ")", "\n", "devacc", ",", "testacc", "=", "clf", ".", "run", "(", ")", "\n", "logging", ".", "debug", "(", "'Dev acc : {0} Test acc : {1} for Entity Relationship\\n'", "\n", ".", "format", "(", "devacc", ",", "testacc", ")", ")", "\n", "return", "{", "'devacc'", ":", "devacc", ",", "'acc'", ":", "testacc", ",", "\n", "'ndev'", ":", "len", "(", "self", ".", "data", "[", "'valid'", "]", "[", "0", "]", ")", ",", "\n", "'ntest'", ":", "len", "(", "self", ".", "data", "[", "'test'", "]", "[", "0", "]", ")", "}", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.enteval.et.ETEval.__init__": [[25, 41], ["logging.debug", "et.ETEval.load_labels", "et.ETEval.loadFile", "et.ETEval.loadFile", "et.ETEval.loadFile", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.ZeweiChu_EntEval.enteval.et.ETEval.load_labels", "home.repos.pwc.inspect_result.ZeweiChu_EntEval.enteval.efp.EFPEval.loadFile", "home.repos.pwc.inspect_result.ZeweiChu_EntEval.enteval.efp.EFPEval.loadFile", "home.repos.pwc.inspect_result.ZeweiChu_EntEval.enteval.efp.EFPEval.loadFile"], ["    ", "def", "__init__", "(", "self", ",", "task_path", ",", "nclasses", "=", "2", ",", "seed", "=", "1111", ")", ":", "\n", "        ", "logging", ".", "debug", "(", "'***** Transfer task : Entity Typing classification *****\\n\\n'", ")", "\n", "self", ".", "nclasses", "=", "nclasses", "\n", "self", ".", "task_name", "=", "\"ET\"", "\n", "self", ".", "seed", "=", "seed", "\n", "self", ".", "task_path", "=", "task_path", "\n", "\n", "self", ".", "load_labels", "(", ")", "\n", "traindata", "=", "self", ".", "loadFile", "(", "os", ".", "path", ".", "join", "(", "task_path", ",", "'train.txt'", ")", ")", "\n", "devdata", "=", "self", ".", "loadFile", "(", "os", ".", "path", ".", "join", "(", "task_path", ",", "'valid.txt'", ")", ")", "\n", "testdata", "=", "self", ".", "loadFile", "(", "os", ".", "path", ".", "join", "(", "task_path", ",", "'test.txt'", ")", ")", "\n", "\n", "self", ".", "data", "=", "{", "'train'", ":", "traindata", ",", "'dev'", ":", "devdata", ",", "'test'", ":", "testdata", "}", "\n", "self", ".", "samples", "=", "[", "item", "[", "0", "]", "for", "item", "in", "traindata", "]", "+", "[", "item", "[", "0", "]", "for", "item", "in", "devdata", "]", "+", "[", "item", "[", "0", "]", "for", "item", "in", "testdata", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.enteval.et.ETEval.do_prepare": [[42, 44], ["prepare"], "methods", ["home.repos.pwc.inspect_result.ZeweiChu_EntEval.examples.eval_elmo.prepare"], ["", "def", "do_prepare", "(", "self", ",", "params", ",", "prepare", ")", ":", "\n", "        ", "return", "prepare", "(", "params", ",", "self", ".", "samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.enteval.et.ETEval.load_labels": [[45, 51], ["open", "os.path.join", "et.ETEval.id2label.append", "enumerate", "line.strip"], "methods", ["None"], ["", "def", "load_labels", "(", "self", ")", ":", "\n", "        ", "self", ".", "id2label", "=", "[", "]", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "task_path", ",", "'labels.txt'", ")", ")", "as", "fin", ":", "\n", "            ", "for", "line", "in", "fin", ":", "\n", "                ", "self", ".", "id2label", ".", "append", "(", "line", ".", "strip", "(", ")", ")", "\n", "", "", "self", ".", "label2id", "=", "{", "label", ":", "i", "for", "i", ",", "label", "in", "enumerate", "(", "self", ".", "id2label", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.enteval.et.ETEval.loadFile": [[53, 71], ["io.open", "line.strip().split.strip().split.strip().split", "line[].split", "int", "int", "data.append", "list", "data.append", "set().difference", "line.strip().split.strip().split.strip", "set", "set"], "methods", ["None"], ["", "def", "loadFile", "(", "self", ",", "fpath", ")", ":", "\n", "        ", "data", "=", "[", "]", "\n", "\n", "with", "io", ".", "open", "(", "fpath", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "fin", ":", "\n", "            ", "for", "line", "in", "fin", ":", "\n", "                ", "line", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "entity", "=", "line", "[", "0", "]", ".", "split", "(", ")", "\n", "s", "=", "int", "(", "line", "[", "1", "]", ")", "\n", "e", "=", "int", "(", "line", "[", "2", "]", ")", "\n", "pos_labels", "=", "line", "[", "3", ":", "]", "\n", "\n", "data", ".", "append", "(", "[", "entity", ",", "s", ",", "e", ",", "None", ",", "[", "self", ".", "label2id", "[", "label", "]", "for", "label", "in", "pos_labels", "]", ",", "1", "]", ")", "\n", "\n", "neg_labels", "=", "list", "(", "set", "(", "self", ".", "id2label", ")", ".", "difference", "(", "set", "(", "pos_labels", ")", ")", ")", "\n", "\n", "data", ".", "append", "(", "[", "entity", ",", "s", ",", "e", ",", "None", ",", "[", "self", ".", "label2id", "[", "label", "]", "for", "label", "in", "neg_labels", "]", ",", "0", "]", ")", "\n", "\n", "", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.enteval.et.ETEval.run": [[72, 123], ["et.MLPClassifier", "et.MLPClassifier.run", "logging.debug", "logging.info", "range", "numpy.vstack", "enumerate", "numpy.vstack().astype", "numpy.array().astype", "numpy.array().astype", "logging.info", "len", "len", "len", "batcher", "[].append", "len", "len", "numpy.vstack", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.ZeweiChu_EntEval.tools.validation.SplitMultiClassClassifier.run", "home.repos.pwc.inspect_result.ZeweiChu_EntEval.examples.eval_elmo.batcher"], ["", "def", "run", "(", "self", ",", "params", ",", "batcher", ")", ":", "\n", "        ", "ultra_embed", "=", "{", "'train'", ":", "{", "}", ",", "'dev'", ":", "{", "}", ",", "'test'", ":", "{", "}", "}", "\n", "bsize", "=", "params", ".", "batch_size", "\n", "\n", "for", "key", "in", "self", ".", "data", ":", "\n", "            ", "logging", ".", "info", "(", "'Computing embedding for {0}'", ".", "format", "(", "key", ")", ")", "\n", "\n", "ultra_embed", "[", "key", "]", "[", "'X'", "]", "=", "[", "]", "\n", "for", "ii", "in", "range", "(", "0", ",", "len", "(", "self", ".", "data", "[", "key", "]", ")", ",", "bsize", ")", ":", "\n", "                ", "batch", "=", "[", "d", "[", ":", "4", "]", "for", "d", "in", "self", ".", "data", "[", "key", "]", "[", "ii", ":", "ii", "+", "bsize", "]", "]", "\n", "embeddings", ",", "_", "=", "batcher", "(", "params", ",", "batch", ")", "\n", "ultra_embed", "[", "key", "]", "[", "'X'", "]", ".", "append", "(", "embeddings", ")", "\n", "\n", "", "ultra_embed", "[", "key", "]", "[", "'X'", "]", "=", "np", ".", "vstack", "(", "ultra_embed", "[", "key", "]", "[", "'X'", "]", ")", "\n", "X", "=", "[", "]", "\n", "labels", "=", "[", "]", "\n", "ys", "=", "[", "]", "\n", "# repeat len(label) times", "\n", "for", "i", ",", "(", "entity", ",", "s", ",", "e", ",", "_", ",", "label", ",", "y", ")", "in", "enumerate", "(", "self", ".", "data", "[", "key", "]", ")", ":", "\n", "                ", "X", "+=", "[", "ultra_embed", "[", "key", "]", "[", "'X'", "]", "[", "i", "]", "]", "*", "len", "(", "label", ")", "\n", "labels", "+=", "label", "\n", "ys", "+=", "[", "y", "]", "*", "len", "(", "label", ")", "\n", "\n", "", "ultra_embed", "[", "key", "]", "[", "'X'", "]", "=", "np", ".", "vstack", "(", "X", ")", ".", "astype", "(", "\"float32\"", ")", "\n", "ultra_embed", "[", "key", "]", "[", "'label'", "]", "=", "np", ".", "array", "(", "labels", ")", ".", "astype", "(", "\"int64\"", ")", "\n", "ultra_embed", "[", "key", "]", "[", "'y'", "]", "=", "np", ".", "array", "(", "ys", ")", ".", "astype", "(", "\"float32\"", ")", "\n", "# code.interact(local=locals())", "\n", "logging", ".", "info", "(", "'Computed {0} embeddings'", ".", "format", "(", "key", ")", ")", "\n", "\n", "# code.interact(local=locals())", "\n", "", "input_dim", "=", "ultra_embed", "[", "'train'", "]", "[", "'X'", "]", ".", "shape", "[", "1", "]", "\n", "clf", "=", "MLPClassifier", "(", "input_dim", "=", "input_dim", ",", "\n", "label2id", "=", "self", ".", "label2id", ",", "\n", "X", "=", "{", "'train'", ":", "ultra_embed", "[", "'train'", "]", "[", "'X'", "]", ",", "\n", "'dev'", ":", "ultra_embed", "[", "'dev'", "]", "[", "'X'", "]", ",", "\n", "'test'", ":", "ultra_embed", "[", "'test'", "]", "[", "'X'", "]", "}", ",", "\n", "label", "=", "{", "'train'", ":", "ultra_embed", "[", "'train'", "]", "[", "'label'", "]", ",", "\n", "'dev'", ":", "ultra_embed", "[", "'dev'", "]", "[", "'label'", "]", ",", "\n", "'test'", ":", "ultra_embed", "[", "'test'", "]", "[", "'label'", "]", "}", ",", "\n", "y", "=", "{", "'train'", ":", "ultra_embed", "[", "'train'", "]", "[", "'y'", "]", ",", "\n", "'dev'", ":", "ultra_embed", "[", "'dev'", "]", "[", "'y'", "]", ",", "\n", "'test'", ":", "ultra_embed", "[", "'test'", "]", "[", "'y'", "]", "}", ")", "\n", "\n", "dev_f1", ",", "testacc", ",", "prec", ",", "recall", ",", "f1", "=", "clf", ".", "run", "(", ")", "\n", "logging", ".", "debug", "(", "'\\nDev f1 : {} Test acc : {} Precision: {} Recall: {} F1 score: {} '", "\n", "'{} classification\\n'", ".", "format", "(", "dev_f1", ",", "testacc", ",", "prec", ",", "recall", ",", "f1", ",", "self", ".", "task_name", ")", ")", "\n", "\n", "return", "{", "'dev_f1'", ":", "dev_f1", ",", "'acc'", ":", "testacc", ",", "'precision'", ":", "prec", ",", "\n", "\"recall\"", ":", "recall", ",", "\"f1\"", ":", "f1", ",", "\n", "'ndev'", ":", "len", "(", "ultra_embed", "[", "'dev'", "]", "[", "'X'", "]", ")", ",", "\n", "'ntest'", ":", "len", "(", "ultra_embed", "[", "'test'", "]", "[", "'X'", "]", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.enteval.et.Model.__init__": [[126, 130], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "len"], "methods", ["home.repos.pwc.inspect_result.ZeweiChu_EntEval.examples.elmo.ELMoTokenCharactersIndexer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ",", "label2id", ")", ":", "\n", "        ", "super", "(", "Model", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "label2id", "=", "label2id", "\n", "self", ".", "labelembed", "=", "nn", ".", "Embedding", "(", "len", "(", "label2id", ")", ",", "input_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.enteval.et.Model.forward": [[131, 135], ["et.Model.labelembed", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "label", ")", ":", "\n", "        ", "embeddings", "=", "self", ".", "labelembed", "(", "label", ")", "\n", "scores", "=", "torch", ".", "sum", "(", "x", "*", "embeddings", ",", "1", ")", "\n", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.enteval.et.MLPClassifier.__init__": [[137, 161], ["torch.device", "torch.device", "torch.device", "torch.device", "Model().to", "torch.BCEWithLogitsLoss().to", "torch.BCEWithLogitsLoss().to", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "filter", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "et.Model", "torch.BCEWithLogitsLoss", "torch.BCEWithLogitsLoss", "et.MLPClassifier.model.parameters"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ",", "label2id", ",", "X", ",", "label", ",", "y", ")", ":", "\n", "        ", "self", ".", "trainX", "=", "X", "[", "\"train\"", "]", "\n", "self", ".", "trainlabel", "=", "label", "[", "\"train\"", "]", "\n", "self", ".", "trainy", "=", "y", "[", "\"train\"", "]", "\n", "self", ".", "devX", "=", "X", "[", "\"dev\"", "]", "\n", "self", ".", "devlabel", "=", "label", "[", "\"dev\"", "]", "\n", "self", ".", "devy", "=", "y", "[", "\"dev\"", "]", "\n", "self", ".", "testX", "=", "X", "[", "\"test\"", "]", "\n", "self", ".", "testlabel", "=", "label", "[", "\"test\"", "]", "\n", "self", ".", "testy", "=", "y", "[", "\"test\"", "]", "\n", "\n", "self", ".", "max_epoch", "=", "15", "\n", "self", ".", "epoch_size", "=", "4", "\n", "self", ".", "tenacity", "=", "5", "\n", "self", ".", "batch_size", "=", "64", "\n", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "\n", "self", ".", "model", "=", "Model", "(", "input_dim", ",", "label2id", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "self", ".", "loss_fn", "=", "nn", ".", "BCEWithLogitsLoss", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "loss_fn", ".", "size_average", "=", "False", "\n", "# self.model.labelembed.weight.requires_grad = False", "\n", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "self", ".", "model", ".", "parameters", "(", ")", ")", ",", "weight_decay", "=", "1e-9", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.enteval.et.MLPClassifier.fit": [[162, 180], ["et.MLPClassifier.trainepoch", "et.MLPClassifier.evaluate", "logging.debug", "copy.deepcopy"], "methods", ["home.repos.pwc.inspect_result.ZeweiChu_EntEval.tools.classifier.PyTorchClassifier.trainepoch", "home.repos.pwc.inspect_result.ZeweiChu_EntEval.enteval.et.MLPClassifier.evaluate"], ["", "def", "fit", "(", "self", ",", "trainX", ",", "trainlabel", ",", "trainy", ",", "early_stop", "=", "True", ")", ":", "\n", "        ", "best_f1", "=", "-", "1.", "\n", "early_stop_count", "=", "0", "\n", "stop_train", "=", "False", "\n", "self", ".", "nepoch", "=", "0", "\n", "while", "not", "stop_train", "and", "self", ".", "nepoch", "<=", "self", ".", "max_epoch", ":", "\n", "            ", "self", ".", "trainepoch", "(", "trainX", ",", "trainlabel", ",", "trainy", ",", "epoch_size", "=", "self", ".", "epoch_size", ")", "\n", "acc", ",", "prec", ",", "recall", ",", "f1", "=", "self", ".", "evaluate", "(", "self", ".", "devX", ",", "self", ".", "devlabel", ",", "self", ".", "devy", ",", "istest", "=", "True", ")", "\n", "logging", ".", "debug", "(", "\"epoch {} accuracy {} precition {} recall {} f1 {}\\n\"", ".", "format", "(", "self", ".", "nepoch", ",", "acc", ",", "prec", ",", "recall", ",", "f1", ")", ")", "\n", "if", "f1", ">", "best_f1", ":", "\n", "                ", "best_f1", "=", "f1", "\n", "bestmodel", "=", "copy", ".", "deepcopy", "(", "self", ".", "model", ")", "\n", "", "elif", "early_stop", ":", "\n", "                ", "if", "early_stop_count", ">=", "self", ".", "tenacity", ":", "\n", "                    ", "stop_train", "=", "True", "\n", "", "early_stop_count", "+=", "1", "\n", "", "", "self", ".", "model", "=", "bestmodel", "\n", "return", "best_f1", "\n", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.enteval.et.MLPClassifier.evaluate": [[181, 212], ["et.MLPClassifier.model.eval", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "range", "numpy.concatenate", "sklearn.metrics.precision_score", "sklearn.metrics.recall_score", "sklearn.metrics.f1_score", "len", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid.long().eq().sum().item", "torch.sigmoid.long().eq().sum().item", "numpy.concatenate.append", "et.MLPClassifier.model", "torch.sigmoid.data.cpu().numpy", "torch.sigmoid.data.cpu().numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.sigmoid.long().eq().sum", "torch.sigmoid.long().eq().sum", "torch.sigmoid.data.cpu", "torch.sigmoid.data.cpu", "torch.sigmoid.long().eq", "torch.sigmoid.long().eq", "torch.from_numpy().to.data.long", "torch.from_numpy().to.data.long", "torch.sigmoid.long", "torch.sigmoid.long"], "methods", ["home.repos.pwc.inspect_result.ZeweiChu_EntEval.enteval.engine.SE.eval"], ["", "def", "evaluate", "(", "self", ",", "devX", ",", "devlabels", ",", "devy", ",", "threshold", "=", "0.5", ",", "istest", "=", "False", ")", ":", "\n", "        ", "self", ".", "model", ".", "eval", "(", ")", "\n", "correct", "=", "0", "\n", "all_outputs", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "0", ",", "len", "(", "devX", ")", ",", "self", ".", "batch_size", ")", ":", "\n", "                ", "Xbatch", "=", "devX", "[", "i", ":", "i", "+", "self", ".", "batch_size", "]", "\n", "labelbatch", "=", "devlabels", "[", "i", ":", "i", "+", "self", ".", "batch_size", "]", "\n", "ybatch", "=", "devy", "[", "i", ":", "i", "+", "self", ".", "batch_size", "]", "\n", "\n", "Xbatch", "=", "torch", ".", "from_numpy", "(", "Xbatch", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "labelbatch", "=", "torch", ".", "from_numpy", "(", "labelbatch", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "ybatch", "=", "torch", ".", "from_numpy", "(", "ybatch", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "output", "=", "torch", ".", "sigmoid", "(", "self", ".", "model", "(", "Xbatch", ",", "labelbatch", ")", ")", "\n", "# code.interact(local=locals())", "\n", "output", "[", "output", ">=", "threshold", "]", "=", "1", "\n", "output", "[", "output", "<", "threshold", "]", "=", "0", "\n", "correct", "+=", "output", ".", "long", "(", ")", ".", "eq", "(", "ybatch", ".", "data", ".", "long", "(", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "all_outputs", ".", "append", "(", "output", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "accuracy", "=", "1.0", "*", "correct", "/", "devX", ".", "shape", "[", "0", "]", "\n", "\n", "", "if", "istest", ":", "\n", "            ", "all_outputs", "=", "np", ".", "concatenate", "(", "all_outputs", ",", "0", ")", "\n", "prec", "=", "precision_score", "(", "devy", ",", "all_outputs", ")", "\n", "recall", "=", "recall_score", "(", "devy", ",", "all_outputs", ")", "\n", "f1", "=", "f1_score", "(", "devy", ",", "all_outputs", ")", "\n", "\n", "return", "accuracy", ",", "prec", ",", "recall", ",", "f1", "\n", "", "else", ":", "\n", "            ", "return", "accuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.enteval.et.MLPClassifier.trainepoch": [[213, 235], ["et.MLPClassifier.model.train", "range", "numpy.random.permutation().astype", "range", "len", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "et.MLPClassifier.model", "et.MLPClassifier.loss_fn", "all_costs.append", "et.MLPClassifier.optimizer.zero_grad", "et.MLPClassifier.backward", "et.MLPClassifier.optimizer.step", "numpy.random.permutation", "et.MLPClassifier.data.item", "len", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["None"], ["", "", "def", "trainepoch", "(", "self", ",", "X", ",", "labels", ",", "y", ",", "epoch_size", "=", "1", ")", ":", "\n", "        ", "self", ".", "model", ".", "train", "(", ")", "\n", "for", "_", "in", "range", "(", "self", ".", "nepoch", ",", "self", ".", "nepoch", "+", "epoch_size", ")", ":", "\n", "            ", "permutation", "=", "np", ".", "random", ".", "permutation", "(", "len", "(", "X", ")", ")", ".", "astype", "(", "\"int64\"", ")", "\n", "all_costs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "X", ")", ",", "self", ".", "batch_size", ")", ":", "\n", "# forward", "\n", "                ", "idx", "=", "permutation", "[", "i", ":", "i", "+", "self", ".", "batch_size", "]", "\n", "Xbatch", "=", "torch", ".", "from_numpy", "(", "X", "[", "idx", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "labelbatch", "=", "torch", ".", "from_numpy", "(", "labels", "[", "idx", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "ybatch", "=", "torch", ".", "from_numpy", "(", "y", "[", "idx", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "output", "=", "self", ".", "model", "(", "Xbatch", ",", "labelbatch", ")", "\n", "# loss", "\n", "loss", "=", "self", ".", "loss_fn", "(", "output", ",", "ybatch", ")", "\n", "all_costs", ".", "append", "(", "loss", ".", "data", ".", "item", "(", ")", ")", "\n", "# backward", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "# Update parameters", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "", "", "self", ".", "nepoch", "+=", "epoch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.enteval.et.MLPClassifier.run": [[236, 252], ["et.MLPClassifier.fit", "logging.debug", "range", "logging.debug", "et.MLPClassifier.evaluate", "et.MLPClassifier.evaluate", "logging.debug"], "methods", ["home.repos.pwc.inspect_result.ZeweiChu_EntEval.tools.classifier.PyTorchClassifier.fit", "home.repos.pwc.inspect_result.ZeweiChu_EntEval.enteval.et.MLPClassifier.evaluate", "home.repos.pwc.inspect_result.ZeweiChu_EntEval.enteval.et.MLPClassifier.evaluate"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "best_model", "=", "self", ".", "fit", "(", "self", ".", "trainX", ",", "self", ".", "trainlabel", ",", "self", ".", "trainy", ")", "\n", "best_dev_f1", "=", "-", "1", "\n", "best_threshold", "=", "0.", "\n", "logging", ".", "debug", "(", "\"Tuning the optimal threshold on the dev set\"", ")", "\n", "num_to_tune", "=", "20", "\n", "for", "i", "in", "range", "(", "num_to_tune", "+", "1", ")", ":", "\n", "            ", "threshold", "=", "i", "/", "num_to_tune", "\n", "acc", ",", "prec", ",", "recall", ",", "f1", "=", "self", ".", "evaluate", "(", "self", ".", "devX", ",", "self", ".", "devlabel", ",", "self", ".", "devy", ",", "threshold", "=", "threshold", ",", "istest", "=", "True", ")", "\n", "logging", ".", "debug", "(", "\"threshold {} accuracy {} precition {} recall {} f1 {}\\n\"", ".", "format", "(", "threshold", ",", "acc", ",", "prec", ",", "recall", ",", "f1", ")", ")", "\n", "if", "f1", ">", "best_dev_f1", ":", "\n", "                ", "best_dev_f1", "=", "f1", "\n", "best_threshold", "=", "threshold", "\n", "", "", "logging", ".", "debug", "(", "\"best threshold: {}\"", ".", "format", "(", "best_threshold", ")", ")", "\n", "acc", ",", "prec", ",", "recall", ",", "f1", "=", "self", ".", "evaluate", "(", "self", ".", "testX", ",", "self", ".", "testlabel", ",", "self", ".", "testy", ",", "best_threshold", ",", "istest", "=", "True", ")", "\n", "return", "best_dev_f1", ",", "acc", ",", "prec", ",", "recall", ",", "f1", "\n", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.enteval.efp.EFPEval.__init__": [[22, 47], ["logging.debug", "efp.EFPEval.loadFile", "efp.EFPEval.loadFile", "efp.EFPEval.loadFile", "list", "os.path.join", "os.path.join", "os.path.join", "set", "enumerate"], "methods", ["home.repos.pwc.inspect_result.ZeweiChu_EntEval.enteval.efp.EFPEval.loadFile", "home.repos.pwc.inspect_result.ZeweiChu_EntEval.enteval.efp.EFPEval.loadFile", "home.repos.pwc.inspect_result.ZeweiChu_EntEval.enteval.efp.EFPEval.loadFile"], ["    ", "def", "__init__", "(", "self", ",", "task_path", ",", "use_ctx", "=", "True", ",", "nclasses", "=", "2", ",", "seed", "=", "1111", ")", ":", "\n", "        ", "logging", ".", "debug", "(", "'***** Transfer task : Entity Factuality Prediction classification *****\\n\\n'", ")", "\n", "self", ".", "nclasses", "=", "nclasses", "\n", "self", ".", "task_name", "=", "\"Fever\"", "\n", "self", ".", "seed", "=", "seed", "\n", "self", ".", "use_ctx", "=", "use_ctx", "\n", "\n", "trainlabels", ",", "traintext", "=", "self", ".", "loadFile", "(", "os", ".", "path", ".", "join", "(", "task_path", ",", "'train.txt'", ")", ")", "\n", "devlabels", ",", "devtext", "=", "self", ".", "loadFile", "(", "os", ".", "path", ".", "join", "(", "task_path", ",", "'dev.txt'", ")", ")", "\n", "testlabels", ",", "testtext", "=", "self", ".", "loadFile", "(", "os", ".", "path", ".", "join", "(", "task_path", ",", "'test.txt'", ")", ")", "\n", "self", ".", "id2label", "=", "list", "(", "set", "(", "trainlabels", ")", ")", "\n", "self", ".", "label2id", "=", "{", "label", ":", "i", "for", "i", ",", "label", "in", "enumerate", "(", "self", ".", "id2label", ")", "}", "\n", "trainlabels", "=", "[", "self", ".", "label2id", "[", "l", "]", "for", "l", "in", "trainlabels", "]", "\n", "devlabels", "=", "[", "self", ".", "label2id", "[", "l", "]", "for", "l", "in", "devlabels", "]", "\n", "testlabels", "=", "[", "self", ".", "label2id", "[", "l", "]", "for", "l", "in", "testlabels", "]", "\n", "self", ".", "data", "=", "{", "'train'", ":", "[", "trainlabels", ",", "traintext", "]", ",", "'dev'", ":", "[", "devlabels", ",", "devtext", "]", ",", "'test'", ":", "[", "testlabels", ",", "testtext", "]", "}", "\n", "\n", "if", "self", ".", "use_ctx", ":", "\n", "            ", "self", ".", "samples", "=", "[", "item", "[", "0", "]", "for", "item", "in", "traintext", "]", "+", "[", "item", "[", "0", "]", "for", "item", "in", "devtext", "]", "+", "[", "item", "[", "0", "]", "for", "item", "in", "testtext", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "samples", "=", "[", "item", "[", "-", "1", "]", "for", "item", "in", "traintext", "]", "+", "[", "item", "[", "-", "1", "]", "for", "item", "in", "devtext", "]", "+", "[", "item", "[", "-", "1", "]", "for", "item", "in", "testtext", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.enteval.efp.EFPEval.do_prepare": [[48, 50], ["prepare"], "methods", ["home.repos.pwc.inspect_result.ZeweiChu_EntEval.examples.eval_elmo.prepare"], ["", "", "def", "do_prepare", "(", "self", ",", "params", ",", "prepare", ")", ":", "\n", "        ", "return", "prepare", "(", "params", ",", "self", ".", "samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.enteval.efp.EFPEval.loadFile": [[51, 63], ["io.open", "line.strip().split", "labels.append", "data.append", "data.append", "line.strip", "entity.split", "int", "int", "entity.split"], "methods", ["None"], ["", "def", "loadFile", "(", "self", ",", "fpath", ")", ":", "\n", "        ", "labels", "=", "[", "]", "\n", "data", "=", "[", "]", "\n", "with", "io", ".", "open", "(", "fpath", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "fin", ":", "\n", "            ", "for", "line", "in", "fin", ":", "\n", "                ", "label", ",", "entity", ",", "s", ",", "e", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "labels", ".", "append", "(", "label", ")", "\n", "if", "self", ".", "use_ctx", ":", "\n", "                    ", "data", ".", "append", "(", "[", "entity", ".", "split", "(", ")", ",", "int", "(", "s", ")", ",", "int", "(", "e", ")", ",", "None", "]", ")", "\n", "", "else", ":", "\n", "                    ", "data", ".", "append", "(", "[", "None", ",", "None", ",", "None", ",", "entity", ".", "split", "(", ")", "]", ")", "\n", "", "", "", "return", "labels", ",", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.enteval.efp.EFPEval.run": [[65, 103], ["enteval.tools.validation.SplitClassifier", "enteval.tools.validation.SplitClassifier.run", "logging.debug", "logging.info", "range", "numpy.vstack", "numpy.array", "logging.info", "len", "len", "len", "[].append", "batcher", "batcher"], "methods", ["home.repos.pwc.inspect_result.ZeweiChu_EntEval.tools.validation.SplitMultiClassClassifier.run", "home.repos.pwc.inspect_result.ZeweiChu_EntEval.examples.eval_elmo.batcher", "home.repos.pwc.inspect_result.ZeweiChu_EntEval.examples.eval_elmo.batcher"], ["", "def", "run", "(", "self", ",", "params", ",", "batcher", ")", ":", "\n", "        ", "fever_embed", "=", "{", "'train'", ":", "{", "}", ",", "'dev'", ":", "{", "}", ",", "'test'", ":", "{", "}", "}", "\n", "bsize", "=", "params", ".", "batch_size", "\n", "\n", "for", "key", "in", "self", ".", "data", ":", "\n", "            ", "logging", ".", "info", "(", "'Computing embedding for {0}'", ".", "format", "(", "key", ")", ")", "\n", "\n", "fever_embed", "[", "key", "]", "[", "'X'", "]", "=", "[", "]", "\n", "for", "ii", "in", "range", "(", "0", ",", "len", "(", "self", ".", "data", "[", "key", "]", "[", "1", "]", ")", ",", "bsize", ")", ":", "\n", "                ", "batch", "=", "self", ".", "data", "[", "key", "]", "[", "1", "]", "[", "ii", ":", "ii", "+", "bsize", "]", "\n", "if", "self", ".", "use_ctx", ":", "\n", "                    ", "embeddings", ",", "_", "=", "batcher", "(", "params", ",", "batch", ")", "\n", "", "else", ":", "\n", "                    ", "_", ",", "embeddings", "=", "batcher", "(", "params", ",", "batch", ")", "\n", "", "fever_embed", "[", "key", "]", "[", "'X'", "]", ".", "append", "(", "embeddings", ")", "\n", "", "fever_embed", "[", "key", "]", "[", "'X'", "]", "=", "np", ".", "vstack", "(", "fever_embed", "[", "key", "]", "[", "'X'", "]", ")", "\n", "fever_embed", "[", "key", "]", "[", "'y'", "]", "=", "np", ".", "array", "(", "self", ".", "data", "[", "key", "]", "[", "0", "]", ")", "\n", "logging", ".", "info", "(", "'Computed {0} embeddings'", ".", "format", "(", "key", ")", ")", "\n", "\n", "", "config_classifier", "=", "{", "'nclasses'", ":", "self", ".", "nclasses", ",", "'seed'", ":", "self", ".", "seed", ",", "\n", "'usepytorch'", ":", "params", ".", "usepytorch", ",", "\n", "'classifier'", ":", "params", ".", "classifier", "}", "\n", "\n", "clf", "=", "SplitClassifier", "(", "X", "=", "{", "'train'", ":", "fever_embed", "[", "'train'", "]", "[", "'X'", "]", ",", "\n", "'valid'", ":", "fever_embed", "[", "'dev'", "]", "[", "'X'", "]", ",", "\n", "'test'", ":", "fever_embed", "[", "'test'", "]", "[", "'X'", "]", "}", ",", "\n", "y", "=", "{", "'train'", ":", "fever_embed", "[", "'train'", "]", "[", "'y'", "]", ",", "\n", "'valid'", ":", "fever_embed", "[", "'dev'", "]", "[", "'y'", "]", ",", "\n", "'test'", ":", "fever_embed", "[", "'test'", "]", "[", "'y'", "]", "}", ",", "\n", "config", "=", "config_classifier", ")", "\n", "\n", "devacc", ",", "testacc", "=", "clf", ".", "run", "(", ")", "\n", "logging", ".", "debug", "(", "'\\nDev acc : {0} Test acc : {1} for \\\n            {2} classification with {3} encoder \\n'", ".", "format", "(", "devacc", ",", "testacc", ",", "self", ".", "task_name", ",", "\"context\"", "if", "self", ".", "use_ctx", "else", "\"description\"", ")", ")", "\n", "\n", "return", "{", "'devacc'", ":", "devacc", ",", "'acc'", ":", "testacc", ",", "\n", "'ndev'", ":", "len", "(", "fever_embed", "[", "'dev'", "]", "[", "'X'", "]", ")", ",", "\n", "'ntest'", ":", "len", "(", "fever_embed", "[", "'test'", "]", "[", "'X'", "]", ")", "}", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.enteval.utils.create_dictionary": [[16, 36], ["sorted", "enumerate", "words.items", "id2word.append"], "function", ["None"], ["def", "create_dictionary", "(", "sentences", ")", ":", "\n", "    ", "words", "=", "{", "}", "\n", "for", "s", "in", "sentences", ":", "\n", "        ", "for", "word", "in", "s", ":", "\n", "            ", "if", "word", "in", "words", ":", "\n", "                ", "words", "[", "word", "]", "+=", "1", "\n", "", "else", ":", "\n", "                ", "words", "[", "word", "]", "=", "1", "\n", "", "", "", "words", "[", "'<s>'", "]", "=", "1e9", "+", "4", "\n", "words", "[", "'</s>'", "]", "=", "1e9", "+", "3", "\n", "words", "[", "'<p>'", "]", "=", "1e9", "+", "2", "\n", "# words['<UNK>'] = 1e9 + 1", "\n", "sorted_words", "=", "sorted", "(", "words", ".", "items", "(", ")", ",", "key", "=", "lambda", "x", ":", "-", "x", "[", "1", "]", ")", "# inverse sort", "\n", "id2word", "=", "[", "]", "\n", "word2id", "=", "{", "}", "\n", "for", "i", ",", "(", "w", ",", "_", ")", "in", "enumerate", "(", "sorted_words", ")", ":", "\n", "        ", "id2word", ".", "append", "(", "w", ")", "\n", "word2id", "[", "w", "]", "=", "i", "\n", "\n", "", "return", "id2word", ",", "word2id", "\n", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.enteval.utils.cosine": [[38, 40], ["numpy.dot", "numpy.linalg.norm", "numpy.linalg.norm"], "function", ["None"], ["", "def", "cosine", "(", "u", ",", "v", ")", ":", "\n", "    ", "return", "np", ".", "dot", "(", "u", ",", "v", ")", "/", "(", "np", ".", "linalg", ".", "norm", "(", "u", ")", "*", "np", ".", "linalg", ".", "norm", "(", "v", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.enteval.utils.get_optimizer": [[49, 96], ["s[].split", "inspect.getargspec", "all", "Exception", "x.split", "float", "s.find", "len", "re.match", "optim_params.keys", "str", "str", "optim_params.keys", "s.find", "Exception"], "function", ["None"], ["", "def", "get_optimizer", "(", "s", ")", ":", "\n", "    ", "\"\"\"\n    Parse optimizer parameters.\n    Input should be of the form:\n        - \"sgd,lr=0.01\"\n        - \"adagrad,lr=0.1,lr_decay=0.05\"\n    \"\"\"", "\n", "if", "\",\"", "in", "s", ":", "\n", "        ", "method", "=", "s", "[", ":", "s", ".", "find", "(", "','", ")", "]", "\n", "optim_params", "=", "{", "}", "\n", "for", "x", "in", "s", "[", "s", ".", "find", "(", "','", ")", "+", "1", ":", "]", ".", "split", "(", "','", ")", ":", "\n", "            ", "split", "=", "x", ".", "split", "(", "'='", ")", "\n", "assert", "len", "(", "split", ")", "==", "2", "\n", "assert", "re", ".", "match", "(", "\"^[+-]?(\\d+(\\.\\d*)?|\\.\\d+)$\"", ",", "split", "[", "1", "]", ")", "is", "not", "None", "\n", "optim_params", "[", "split", "[", "0", "]", "]", "=", "float", "(", "split", "[", "1", "]", ")", "\n", "", "", "else", ":", "\n", "        ", "method", "=", "s", "\n", "optim_params", "=", "{", "}", "\n", "\n", "", "if", "method", "==", "'adadelta'", ":", "\n", "        ", "optim_fn", "=", "optim", ".", "Adadelta", "\n", "", "elif", "method", "==", "'adagrad'", ":", "\n", "        ", "optim_fn", "=", "optim", ".", "Adagrad", "\n", "", "elif", "method", "==", "'adam'", ":", "\n", "        ", "optim_fn", "=", "optim", ".", "Adam", "\n", "", "elif", "method", "==", "'adamax'", ":", "\n", "        ", "optim_fn", "=", "optim", ".", "Adamax", "\n", "", "elif", "method", "==", "'asgd'", ":", "\n", "        ", "optim_fn", "=", "optim", ".", "ASGD", "\n", "", "elif", "method", "==", "'rmsprop'", ":", "\n", "        ", "optim_fn", "=", "optim", ".", "RMSprop", "\n", "", "elif", "method", "==", "'rprop'", ":", "\n", "        ", "optim_fn", "=", "optim", ".", "Rprop", "\n", "", "elif", "method", "==", "'sgd'", ":", "\n", "        ", "optim_fn", "=", "optim", ".", "SGD", "\n", "assert", "'lr'", "in", "optim_params", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "'Unknown optimization method: \"%s\"'", "%", "method", ")", "\n", "\n", "# check that we give good parameters to the optimizer", "\n", "", "expected_args", "=", "inspect", ".", "getargspec", "(", "optim_fn", ".", "__init__", ")", "[", "0", "]", "\n", "assert", "expected_args", "[", ":", "2", "]", "==", "[", "'self'", ",", "'params'", "]", "\n", "if", "not", "all", "(", "k", "in", "expected_args", "[", "2", ":", "]", "for", "k", "in", "optim_params", ".", "keys", "(", ")", ")", ":", "\n", "        ", "raise", "Exception", "(", "'Unexpected parameters: expected \"%s\", got \"%s\"'", "%", "(", "\n", "str", "(", "expected_args", "[", "2", ":", "]", ")", ",", "str", "(", "optim_params", ".", "keys", "(", ")", ")", ")", ")", "\n", "\n", "", "return", "optim_fn", ",", "optim_params", "\n", "", ""]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.tools.multiclassclassifier.PyTorchClassifier.__init__": [[26, 38], ["numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "inputdim", ",", "nclasses", ",", "l2reg", "=", "0.", ",", "batch_size", "=", "64", ",", "seed", "=", "1111", ",", "\n", "cudaEfficient", "=", "False", ")", ":", "\n", "# fix seed", "\n", "        ", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "\n", "self", ".", "inputdim", "=", "inputdim", "\n", "self", ".", "nclasses", "=", "nclasses", "\n", "self", ".", "l2reg", "=", "l2reg", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "cudaEfficient", "=", "cudaEfficient", "\n", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.tools.multiclassclassifier.PyTorchClassifier.prepare_split": [[39, 60], ["torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "numpy.random.permutation", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "len", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "int", "int", "len", "len"], "methods", ["None"], ["", "def", "prepare_split", "(", "self", ",", "X", ",", "y", ",", "validation_data", "=", "None", ",", "validation_split", "=", "None", ")", ":", "\n", "# Preparing validation data", "\n", "        ", "assert", "validation_split", "or", "validation_data", "\n", "if", "validation_data", "is", "not", "None", ":", "\n", "            ", "trainX", ",", "trainy", "=", "X", ",", "y", "\n", "devX", ",", "devy", "=", "validation_data", "\n", "", "else", ":", "\n", "            ", "permutation", "=", "np", ".", "random", ".", "permutation", "(", "len", "(", "X", ")", ")", "\n", "trainidx", "=", "permutation", "[", "int", "(", "validation_split", "*", "len", "(", "X", ")", ")", ":", "]", "\n", "devidx", "=", "permutation", "[", "0", ":", "int", "(", "validation_split", "*", "len", "(", "X", ")", ")", "]", "\n", "trainX", ",", "trainy", "=", "X", "[", "trainidx", "]", ",", "y", "[", "trainidx", "]", "\n", "devX", ",", "devy", "=", "X", "[", "devidx", "]", ",", "y", "[", "devidx", "]", "\n", "\n", "", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "if", "self", ".", "cudaEfficient", "else", "torch", ".", "device", "(", "'cuda'", ")", "\n", "\n", "trainX", "=", "torch", ".", "from_numpy", "(", "trainX", ")", ".", "to", "(", "device", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "trainy", "=", "torch", ".", "from_numpy", "(", "trainy", ")", ".", "to", "(", "device", ",", "dtype", "=", "torch", ".", "int64", ")", "\n", "devX", "=", "torch", ".", "from_numpy", "(", "devX", ")", ".", "to", "(", "device", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "devy", "=", "torch", ".", "from_numpy", "(", "devy", ")", ".", "to", "(", "device", ",", "dtype", "=", "torch", ".", "int64", ")", "\n", "\n", "return", "trainX", ",", "trainy", ",", "devX", ",", "devy", "\n", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.tools.multiclassclassifier.PyTorchClassifier.fit": [[61, 85], ["multiclassclassifier.PyTorchClassifier.prepare_split", "multiclassclassifier.PyTorchClassifier.trainepoch", "multiclassclassifier.PyTorchClassifier.score", "copy.deepcopy"], "methods", ["home.repos.pwc.inspect_result.ZeweiChu_EntEval.tools.classifier.PyTorchClassifier.prepare_split", "home.repos.pwc.inspect_result.ZeweiChu_EntEval.tools.classifier.PyTorchClassifier.trainepoch", "home.repos.pwc.inspect_result.ZeweiChu_EntEval.tools.classifier.PyTorchClassifier.score"], ["", "def", "fit", "(", "self", ",", "X", ",", "y", ",", "validation_data", "=", "None", ",", "validation_split", "=", "None", ",", "\n", "early_stop", "=", "True", ")", ":", "\n", "        ", "self", ".", "nepoch", "=", "0", "\n", "bestaccuracy", "=", "-", "1", "\n", "stop_train", "=", "False", "\n", "early_stop_count", "=", "0", "\n", "\n", "# Preparing validation data", "\n", "trainX", ",", "trainy", ",", "devX", ",", "devy", "=", "self", ".", "prepare_split", "(", "X", ",", "y", ",", "validation_data", ",", "\n", "validation_split", ")", "\n", "\n", "# Training", "\n", "while", "not", "stop_train", "and", "self", ".", "nepoch", "<=", "self", ".", "max_epoch", ":", "\n", "            ", "self", ".", "trainepoch", "(", "trainX", ",", "trainy", ",", "epoch_size", "=", "self", ".", "epoch_size", ")", "\n", "accuracy", "=", "self", ".", "score", "(", "devX", ",", "devy", ")", "\n", "if", "accuracy", ">", "bestaccuracy", ":", "\n", "                ", "bestaccuracy", "=", "accuracy", "\n", "bestmodel", "=", "copy", ".", "deepcopy", "(", "self", ".", "model", ")", "\n", "", "elif", "early_stop", ":", "\n", "                ", "if", "early_stop_count", ">=", "self", ".", "tenacity", ":", "\n", "                    ", "stop_train", "=", "True", "\n", "", "early_stop_count", "+=", "1", "\n", "", "", "self", ".", "model", "=", "bestmodel", "\n", "return", "bestaccuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.tools.multiclassclassifier.PyTorchClassifier.trainepoch": [[86, 115], ["multiclassclassifier.PyTorchClassifier.model.train", "range", "numpy.random.permutation", "range", "len", "len", "torch.from_numpy().long().to", "torch.from_numpy().long().to", "torch.from_numpy().long().to", "torch.from_numpy().long().to", "Xbatch.cuda.cuda.view", "multiclassclassifier.PyTorchClassifier.model", "output.view.view.view", "multiclassclassifier.PyTorchClassifier.loss_fn", "all_costs.append", "multiclassclassifier.PyTorchClassifier.optimizer.zero_grad", "multiclassclassifier.PyTorchClassifier.backward", "multiclassclassifier.PyTorchClassifier.optimizer.step", "Xbatch.cuda.cuda.cuda", "ybatch.cuda.cuda.cuda", "multiclassclassifier.PyTorchClassifier.data.item", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["None"], ["", "def", "trainepoch", "(", "self", ",", "X", ",", "y", ",", "epoch_size", "=", "1", ")", ":", "\n", "        ", "self", ".", "model", ".", "train", "(", ")", "\n", "for", "_", "in", "range", "(", "self", ".", "nepoch", ",", "self", ".", "nepoch", "+", "epoch_size", ")", ":", "\n", "            ", "permutation", "=", "np", ".", "random", ".", "permutation", "(", "len", "(", "X", ")", ")", "\n", "all_costs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "X", ")", ",", "self", ".", "batch_size", ")", ":", "\n", "# forward", "\n", "                ", "idx", "=", "torch", ".", "from_numpy", "(", "permutation", "[", "i", ":", "i", "+", "self", ".", "batch_size", "]", ")", ".", "long", "(", ")", ".", "to", "(", "X", ".", "device", ")", "\n", "\n", "Xbatch", "=", "X", "[", "idx", "]", "\n", "ybatch", "=", "y", "[", "idx", "]", "\n", "\n", "if", "self", ".", "cudaEfficient", ":", "\n", "                    ", "Xbatch", "=", "Xbatch", ".", "cuda", "(", ")", "\n", "ybatch", "=", "ybatch", ".", "cuda", "(", ")", "\n", "\n", "", "batch_size", "=", "Xbatch", ".", "shape", "[", "0", "]", "\n", "Xbatch", "=", "Xbatch", ".", "view", "(", "batch_size", ",", "self", ".", "nclasses", ",", "-", "1", ")", "\n", "output", "=", "self", ".", "model", "(", "Xbatch", ")", "\n", "output", "=", "output", ".", "view", "(", "batch_size", ",", "self", ".", "nclasses", ")", "\n", "# loss", "\n", "loss", "=", "self", ".", "loss_fn", "(", "output", ",", "ybatch", ")", "\n", "all_costs", ".", "append", "(", "loss", ".", "data", ".", "item", "(", ")", ")", "\n", "# backward", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "# Update parameters", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "", "", "self", ".", "nepoch", "+=", "epoch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.tools.multiclassclassifier.PyTorchClassifier.score": [[116, 140], ["multiclassclassifier.PyTorchClassifier.model.eval", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "range", "isinstance", "len", "Xbatch.cuda.cuda.view", "multiclassclassifier.PyTorchClassifier.model", "output.view.view.view", "pred.long().eq().sum().item", "len", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "Xbatch.cuda.cuda.cuda", "ybatch.cuda.cuda.cuda", "output.view.view.data.max", "pred.long().eq().sum", "pred.long().eq", "ybatch.cuda.cuda.data.long", "pred.long"], "methods", ["home.repos.pwc.inspect_result.ZeweiChu_EntEval.enteval.engine.SE.eval"], ["", "def", "score", "(", "self", ",", "devX", ",", "devy", ")", ":", "\n", "        ", "self", ".", "model", ".", "eval", "(", ")", "\n", "correct", "=", "0", "\n", "if", "not", "isinstance", "(", "devX", ",", "torch", ".", "cuda", ".", "FloatTensor", ")", "or", "self", ".", "cudaEfficient", ":", "\n", "            ", "devX", "=", "torch", ".", "FloatTensor", "(", "devX", ")", ".", "cuda", "(", ")", "\n", "devy", "=", "torch", ".", "LongTensor", "(", "devy", ")", ".", "cuda", "(", ")", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "0", ",", "len", "(", "devX", ")", ",", "self", ".", "batch_size", ")", ":", "\n", "                ", "Xbatch", "=", "devX", "[", "i", ":", "i", "+", "self", ".", "batch_size", "]", "\n", "ybatch", "=", "devy", "[", "i", ":", "i", "+", "self", ".", "batch_size", "]", "\n", "if", "self", ".", "cudaEfficient", ":", "\n", "                    ", "Xbatch", "=", "Xbatch", ".", "cuda", "(", ")", "\n", "ybatch", "=", "ybatch", ".", "cuda", "(", ")", "\n", "\n", "", "batch_size", "=", "Xbatch", ".", "shape", "[", "0", "]", "\n", "Xbatch", "=", "Xbatch", ".", "view", "(", "batch_size", ",", "self", ".", "nclasses", ",", "-", "1", ")", "\n", "output", "=", "self", ".", "model", "(", "Xbatch", ")", "\n", "output", "=", "output", ".", "view", "(", "batch_size", ",", "self", ".", "nclasses", ")", "\n", "\n", "pred", "=", "output", ".", "data", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "# code.interact(local=locals())", "\n", "correct", "+=", "pred", ".", "long", "(", ")", ".", "eq", "(", "ybatch", ".", "data", ".", "long", "(", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "", "accuracy", "=", "1.0", "*", "correct", "/", "len", "(", "devX", ")", "\n", "", "return", "accuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.tools.multiclassclassifier.PyTorchClassifier.predict": [[141, 157], ["multiclassclassifier.PyTorchClassifier.model.eval", "numpy.array", "numpy.vstack", "isinstance", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "range", "len", "Xbatch.view.view.view", "multiclassclassifier.PyTorchClassifier.model", "output.view.view.view", "numpy.append", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "[].cpu().numpy", "[].cpu", "output.view.view.data.max"], "methods", ["home.repos.pwc.inspect_result.ZeweiChu_EntEval.enteval.engine.SE.eval"], ["", "def", "predict", "(", "self", ",", "devX", ")", ":", "\n", "        ", "self", ".", "model", ".", "eval", "(", ")", "\n", "if", "not", "isinstance", "(", "devX", ",", "torch", ".", "cuda", ".", "FloatTensor", ")", ":", "\n", "            ", "devX", "=", "torch", ".", "FloatTensor", "(", "devX", ")", ".", "cuda", "(", ")", "\n", "", "yhat", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "0", ",", "len", "(", "devX", ")", ",", "self", ".", "batch_size", ")", ":", "\n", "                ", "Xbatch", "=", "devX", "[", "i", ":", "i", "+", "self", ".", "batch_size", "]", "\n", "batch_size", "=", "Xbatch", ".", "shape", "[", "0", "]", "\n", "Xbatch", "=", "Xbatch", ".", "view", "(", "batch_size", ",", "self", ".", "nclasses", ",", "-", "1", ")", "\n", "output", "=", "self", ".", "model", "(", "Xbatch", ")", "\n", "output", "=", "output", ".", "view", "(", "batch_size", ",", "self", ".", "nclasses", ")", "\n", "yhat", "=", "np", ".", "append", "(", "yhat", ",", "\n", "output", ".", "data", ".", "max", "(", "1", ")", "[", "1", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "", "yhat", "=", "np", ".", "vstack", "(", "yhat", ")", "\n", "return", "yhat", "\n", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.tools.multiclassclassifier.PyTorchClassifier.predict_proba": [[158, 176], ["multiclassclassifier.PyTorchClassifier.model.eval", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "range", "len", "Xbatch.view.view.view", "multiclassclassifier.PyTorchClassifier.model", "output.view.view.view", "torch.softmax", "torch.softmax", "output.view.view.data.cpu().numpy", "numpy.concatenate", "output.view.view.data.cpu"], "methods", ["home.repos.pwc.inspect_result.ZeweiChu_EntEval.enteval.engine.SE.eval"], ["", "def", "predict_proba", "(", "self", ",", "devX", ")", ":", "\n", "        ", "self", ".", "model", ".", "eval", "(", ")", "\n", "probas", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "0", ",", "len", "(", "devX", ")", ",", "self", ".", "batch_size", ")", ":", "\n", "                ", "Xbatch", "=", "devX", "[", "i", ":", "i", "+", "self", ".", "batch_size", "]", "\n", "\n", "batch_size", "=", "Xbatch", ".", "shape", "[", "0", "]", "\n", "Xbatch", "=", "Xbatch", ".", "view", "(", "batch_size", ",", "self", ".", "nclasses", ",", "-", "1", ")", "\n", "output", "=", "self", ".", "model", "(", "Xbatch", ")", "\n", "output", "=", "output", ".", "view", "(", "batch_size", ",", "self", ".", "nclasses", ")", "\n", "\n", "vals", "=", "F", ".", "softmax", "(", "output", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "if", "not", "probas", ":", "\n", "                    ", "probas", "=", "vals", "\n", "", "else", ":", "\n", "                    ", "probas", "=", "np", ".", "concatenate", "(", "probas", ",", "vals", ",", "axis", "=", "0", ")", "\n", "", "", "", "return", "probas", "\n", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.tools.multiclassclassifier.MLP.__init__": [[182, 222], ["multiclassclassifier.PyTorchClassifier.__init__", "torch.nn.CrossEntropyLoss().cuda", "torch.nn.CrossEntropyLoss().cuda", "enteval.utils.get_optimizer", "optim_fn", "torch.nn.Sequential().cuda", "torch.nn.Sequential().cuda", "torch.nn.Sequential().cuda", "torch.nn.Sequential().cuda", "multiclassclassifier.MLP.model.parameters", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.ZeweiChu_EntEval.examples.elmo.ELMoTokenCharactersIndexer.__init__", "home.repos.pwc.inspect_result.ZeweiChu_EntEval.enteval.utils.get_optimizer"], ["    ", "def", "__init__", "(", "self", ",", "params", ",", "inputdim", ",", "nclasses", ",", "l2reg", "=", "0.", ",", "batch_size", "=", "64", ",", "\n", "seed", "=", "1111", ",", "cudaEfficient", "=", "False", ")", ":", "\n", "        ", "super", "(", "self", ".", "__class__", ",", "self", ")", ".", "__init__", "(", "inputdim", ",", "nclasses", ",", "l2reg", ",", "\n", "batch_size", ",", "seed", ",", "cudaEfficient", ")", "\n", "\"\"\"\n        PARAMETERS:\n        -nhid:       number of hidden units (0: Logistic Regression)\n        -optim:      optimizer (\"sgd,lr=0.1\", \"adam\", \"rmsprop\" ..)\n        -tenacity:   how many times dev acc does not increase before stopping\n        -epoch_size: each epoch corresponds to epoch_size pass on the train set\n        -max_epoch:  max number of epoches\n        -dropout:    dropout for MLP\n        \"\"\"", "\n", "\n", "self", ".", "nhid", "=", "0", "if", "\"nhid\"", "not", "in", "params", "else", "params", "[", "\"nhid\"", "]", "\n", "self", ".", "optim", "=", "\"adam\"", "if", "\"optim\"", "not", "in", "params", "else", "params", "[", "\"optim\"", "]", "\n", "self", ".", "tenacity", "=", "5", "if", "\"tenacity\"", "not", "in", "params", "else", "params", "[", "\"tenacity\"", "]", "\n", "self", ".", "epoch_size", "=", "4", "if", "\"epoch_size\"", "not", "in", "params", "else", "params", "[", "\"epoch_size\"", "]", "\n", "self", ".", "max_epoch", "=", "200", "if", "\"max_epoch\"", "not", "in", "params", "else", "params", "[", "\"max_epoch\"", "]", "\n", "self", ".", "dropout", "=", "0.", "if", "\"dropout\"", "not", "in", "params", "else", "params", "[", "\"dropout\"", "]", "\n", "self", ".", "batch_size", "=", "64", "if", "\"batch_size\"", "not", "in", "params", "else", "params", "[", "\"batch_size\"", "]", "\n", "\n", "if", "params", "[", "\"nhid\"", "]", "==", "0", ":", "\n", "            ", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "inputdim", ",", "1", ")", ",", "\n", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "inputdim", ",", "params", "[", "\"nhid\"", "]", ")", ",", "\n", "nn", ".", "Dropout", "(", "p", "=", "self", ".", "dropout", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "params", "[", "\"nhid\"", "]", ",", "1", ")", ",", "\n", ")", ".", "cuda", "(", ")", "\n", "\n", "", "self", ".", "loss_fn", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "cuda", "(", ")", "\n", "self", ".", "loss_fn", ".", "size_average", "=", "False", "\n", "\n", "optim_fn", ",", "optim_params", "=", "utils", ".", "get_optimizer", "(", "self", ".", "optim", ")", "\n", "self", ".", "optimizer", "=", "optim_fn", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "**", "optim_params", ")", "\n", "self", ".", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'weight_decay'", "]", "=", "self", ".", "l2reg", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.tools.ranking.COCOProjNet.__init__": [[24, 34], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.ZeweiChu_EntEval.examples.elmo.ELMoTokenCharactersIndexer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "COCOProjNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "imgdim", "=", "config", "[", "'imgdim'", "]", "\n", "self", ".", "sentdim", "=", "config", "[", "'sentdim'", "]", "\n", "self", ".", "projdim", "=", "config", "[", "'projdim'", "]", "\n", "self", ".", "imgproj", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "imgdim", ",", "self", ".", "projdim", ")", ",", "\n", ")", "\n", "self", ".", "sentproj", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "sentdim", ",", "self", ".", "projdim", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.tools.ranking.COCOProjNet.forward": [[36, 65], ["img.view.view.unsqueeze().expand_as().contiguous", "img.view.view.view", "imgc.view.view.view", "sent.view.view.unsqueeze().expand_as().contiguous", "sent.view.view.view", "sentc.view.view.view", "ranking.COCOProjNet.imgproj", "ranking.COCOProjNet.imgproj", "ranking.COCOProjNet.sentproj", "ranking.COCOProjNet.sentproj", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sqrt().expand_as", "torch.sqrt().expand_as", "torch.sqrt().expand_as", "torch.sqrt().expand_as", "torch.sqrt().expand_as", "torch.sqrt().expand_as", "torch.sqrt().expand_as", "torch.sqrt().expand_as", "torch.sqrt().expand_as", "torch.sqrt().expand_as", "torch.sqrt().expand_as", "torch.sqrt().expand_as", "torch.sqrt().expand_as", "torch.sqrt().expand_as", "torch.sqrt().expand_as", "torch.sqrt().expand_as", "img.view.view.unsqueeze().expand_as", "sent.view.view.unsqueeze().expand_as", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "img.view.view.unsqueeze", "sent.view.view.unsqueeze", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "img", ",", "sent", ",", "imgc", ",", "sentc", ")", ":", "\n", "# imgc : (bsize, ncontrast, imgdim)", "\n", "# sentc : (bsize, ncontrast, sentdim)", "\n", "# img : (bsize, imgdim)", "\n", "# sent : (bsize, sentdim)", "\n", "        ", "img", "=", "img", ".", "unsqueeze", "(", "1", ")", ".", "expand_as", "(", "imgc", ")", ".", "contiguous", "(", ")", "\n", "img", "=", "img", ".", "view", "(", "-", "1", ",", "self", ".", "imgdim", ")", "\n", "imgc", "=", "imgc", ".", "view", "(", "-", "1", ",", "self", ".", "imgdim", ")", "\n", "sent", "=", "sent", ".", "unsqueeze", "(", "1", ")", ".", "expand_as", "(", "sentc", ")", ".", "contiguous", "(", ")", "\n", "sent", "=", "sent", ".", "view", "(", "-", "1", ",", "self", ".", "sentdim", ")", "\n", "sentc", "=", "sentc", ".", "view", "(", "-", "1", ",", "self", ".", "sentdim", ")", "\n", "\n", "imgproj", "=", "self", ".", "imgproj", "(", "img", ")", "\n", "imgproj", "=", "imgproj", "/", "torch", ".", "sqrt", "(", "torch", ".", "pow", "(", "imgproj", ",", "2", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ")", ".", "expand_as", "(", "imgproj", ")", "\n", "imgcproj", "=", "self", ".", "imgproj", "(", "imgc", ")", "\n", "imgcproj", "=", "imgcproj", "/", "torch", ".", "sqrt", "(", "torch", ".", "pow", "(", "imgcproj", ",", "2", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ")", ".", "expand_as", "(", "imgcproj", ")", "\n", "sentproj", "=", "self", ".", "sentproj", "(", "sent", ")", "\n", "sentproj", "=", "sentproj", "/", "torch", ".", "sqrt", "(", "torch", ".", "pow", "(", "sentproj", ",", "2", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ")", ".", "expand_as", "(", "sentproj", ")", "\n", "sentcproj", "=", "self", ".", "sentproj", "(", "sentc", ")", "\n", "sentcproj", "=", "sentcproj", "/", "torch", ".", "sqrt", "(", "torch", ".", "pow", "(", "sentcproj", ",", "2", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ")", ".", "expand_as", "(", "sentcproj", ")", "\n", "# (bsize*ncontrast, projdim)", "\n", "\n", "anchor1", "=", "torch", ".", "sum", "(", "(", "imgproj", "*", "sentproj", ")", ",", "1", ")", "\n", "anchor2", "=", "torch", ".", "sum", "(", "(", "sentproj", "*", "imgproj", ")", ",", "1", ")", "\n", "img_sentc", "=", "torch", ".", "sum", "(", "(", "imgproj", "*", "sentcproj", ")", ",", "1", ")", "\n", "sent_imgc", "=", "torch", ".", "sum", "(", "(", "sentproj", "*", "imgcproj", ")", ",", "1", ")", "\n", "\n", "# (bsize*ncontrast)", "\n", "return", "anchor1", ",", "anchor2", ",", "img_sentc", ",", "sent_imgc", "\n", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.tools.ranking.COCOProjNet.proj_sentence": [[66, 70], ["ranking.COCOProjNet.sentproj", "torch.sqrt().expand_as", "torch.sqrt().expand_as", "torch.sqrt().expand_as", "torch.sqrt().expand_as", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "methods", ["None"], ["", "def", "proj_sentence", "(", "self", ",", "sent", ")", ":", "\n", "        ", "output", "=", "self", ".", "sentproj", "(", "sent", ")", "\n", "output", "=", "output", "/", "torch", ".", "sqrt", "(", "torch", ".", "pow", "(", "output", ",", "2", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ")", ".", "expand_as", "(", "output", ")", "\n", "return", "output", "# (bsize, projdim)", "\n", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.tools.ranking.COCOProjNet.proj_image": [[71, 75], ["ranking.COCOProjNet.imgproj", "torch.sqrt().expand_as", "torch.sqrt().expand_as", "torch.sqrt().expand_as", "torch.sqrt().expand_as", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "methods", ["None"], ["", "def", "proj_image", "(", "self", ",", "img", ")", ":", "\n", "        ", "output", "=", "self", ".", "imgproj", "(", "img", ")", "\n", "output", "=", "output", "/", "torch", ".", "sqrt", "(", "torch", ".", "pow", "(", "output", ",", "2", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ")", ".", "expand_as", "(", "output", ")", "\n", "return", "output", "# (bsize, projdim)", "\n", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.tools.ranking.PairwiseRankingLoss.__init__": [[81, 84], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.ZeweiChu_EntEval.examples.elmo.ELMoTokenCharactersIndexer.__init__"], ["def", "__init__", "(", "self", ",", "margin", ")", ":", "\n", "        ", "super", "(", "PairwiseRankingLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "margin", "=", "margin", "\n", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.tools.ranking.PairwiseRankingLoss.forward": [[85, 93], ["torch.clamp().sum", "torch.clamp().sum", "torch.clamp().sum", "torch.clamp().sum", "torch.clamp().sum", "torch.clamp().sum", "torch.clamp().sum", "torch.clamp().sum", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "anchor1", ",", "anchor2", ",", "img_sentc", ",", "sent_imgc", ")", ":", "\n", "\n", "        ", "cost_sent", "=", "torch", ".", "clamp", "(", "self", ".", "margin", "-", "anchor1", "+", "img_sentc", ",", "\n", "min", "=", "0.0", ")", ".", "sum", "(", ")", "\n", "cost_img", "=", "torch", ".", "clamp", "(", "self", ".", "margin", "-", "anchor2", "+", "sent_imgc", ",", "\n", "min", "=", "0.0", ")", ".", "sum", "(", ")", "\n", "loss", "=", "cost_sent", "+", "cost_img", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.tools.ranking.ImageSentenceRankingPytorch.__init__": [[97, 125], ["numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "len", "len", "COCOProjNet().cuda", "PairwiseRankingLoss().cuda", "torch.Adam", "torch.Adam", "ranking.ImageSentenceRankingPytorch.model.parameters", "ranking.COCOProjNet", "ranking.PairwiseRankingLoss"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "train", ",", "valid", ",", "test", ",", "config", ")", ":", "\n", "# fix seed", "\n", "        ", "self", ".", "seed", "=", "config", "[", "'seed'", "]", "\n", "np", ".", "random", ".", "seed", "(", "self", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "self", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "self", ".", "seed", ")", "\n", "\n", "self", ".", "train", "=", "train", "\n", "self", ".", "valid", "=", "valid", "\n", "self", ".", "test", "=", "test", "\n", "\n", "self", ".", "imgdim", "=", "len", "(", "train", "[", "'imgfeat'", "]", "[", "0", "]", ")", "\n", "self", ".", "sentdim", "=", "len", "(", "train", "[", "'sentfeat'", "]", "[", "0", "]", ")", "\n", "self", ".", "projdim", "=", "config", "[", "'projdim'", "]", "\n", "self", ".", "margin", "=", "config", "[", "'margin'", "]", "\n", "\n", "self", ".", "batch_size", "=", "128", "\n", "self", ".", "ncontrast", "=", "30", "\n", "self", ".", "maxepoch", "=", "20", "\n", "self", ".", "early_stop", "=", "True", "\n", "\n", "config_model", "=", "{", "'imgdim'", ":", "self", ".", "imgdim", ",", "'sentdim'", ":", "self", ".", "sentdim", ",", "\n", "'projdim'", ":", "self", ".", "projdim", "}", "\n", "self", ".", "model", "=", "COCOProjNet", "(", "config_model", ")", ".", "cuda", "(", ")", "\n", "\n", "self", ".", "loss_fn", "=", "PairwiseRankingLoss", "(", "margin", "=", "self", ".", "margin", ")", ".", "cuda", "(", ")", "\n", "\n", "self", ".", "optimizer", "=", "optim", ".", "Adam", "(", "self", ".", "model", ".", "parameters", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.tools.ranking.ImageSentenceRankingPytorch.prepare_data": [[126, 136], ["torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["None"], ["", "def", "prepare_data", "(", "self", ",", "trainTxt", ",", "trainImg", ",", "devTxt", ",", "devImg", ",", "\n", "testTxt", ",", "testImg", ")", ":", "\n", "        ", "trainTxt", "=", "torch", ".", "FloatTensor", "(", "trainTxt", ")", "\n", "trainImg", "=", "torch", ".", "FloatTensor", "(", "trainImg", ")", "\n", "devTxt", "=", "torch", ".", "FloatTensor", "(", "devTxt", ")", ".", "cuda", "(", ")", "\n", "devImg", "=", "torch", ".", "FloatTensor", "(", "devImg", ")", ".", "cuda", "(", ")", "\n", "testTxt", "=", "torch", ".", "FloatTensor", "(", "testTxt", ")", ".", "cuda", "(", ")", "\n", "testImg", "=", "torch", ".", "FloatTensor", "(", "testImg", ")", ".", "cuda", "(", ")", "\n", "\n", "return", "trainTxt", ",", "trainImg", ",", "devTxt", ",", "devImg", ",", "testTxt", ",", "testImg", "\n", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.tools.ranking.ImageSentenceRankingPytorch.run": [[137, 225], ["logging.info", "ranking.ImageSentenceRankingPytorch.prepare_data", "range", "logging.info", "ranking.ImageSentenceRankingPytorch.trainepoch", "logging.info", "range", "logging.info", "logging.info", "ranking.ImageSentenceRankingPytorch.i2t", "ranking.ImageSentenceRankingPytorch.t2i", "ranking.ImageSentenceRankingPytorch.i2t", "logging.info", "ranking.ImageSentenceRankingPytorch.t2i", "logging.info", "copy.deepcopy"], "methods", ["home.repos.pwc.inspect_result.ZeweiChu_EntEval.tools.relatedness.RelatednessPytorch.prepare_data", "home.repos.pwc.inspect_result.ZeweiChu_EntEval.tools.classifier.PyTorchClassifier.trainepoch", "home.repos.pwc.inspect_result.ZeweiChu_EntEval.tools.ranking.ImageSentenceRankingPytorch.i2t", "home.repos.pwc.inspect_result.ZeweiChu_EntEval.tools.ranking.ImageSentenceRankingPytorch.t2i", "home.repos.pwc.inspect_result.ZeweiChu_EntEval.tools.ranking.ImageSentenceRankingPytorch.i2t", "home.repos.pwc.inspect_result.ZeweiChu_EntEval.tools.ranking.ImageSentenceRankingPytorch.t2i"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "self", ".", "nepoch", "=", "0", "\n", "bestdevscore", "=", "-", "1", "\n", "early_stop_count", "=", "0", "\n", "stop_train", "=", "False", "\n", "\n", "# Preparing data", "\n", "logging", ".", "info", "(", "'prepare data'", ")", "\n", "trainTxt", ",", "trainImg", ",", "devTxt", ",", "devImg", ",", "testTxt", ",", "testImg", "=", "self", ".", "prepare_data", "(", "self", ".", "train", "[", "'sentfeat'", "]", ",", "self", ".", "train", "[", "'imgfeat'", "]", ",", "\n", "self", ".", "valid", "[", "'sentfeat'", "]", ",", "self", ".", "valid", "[", "'imgfeat'", "]", ",", "\n", "self", ".", "test", "[", "'sentfeat'", "]", ",", "self", ".", "test", "[", "'imgfeat'", "]", ")", "\n", "\n", "# Training", "\n", "while", "not", "stop_train", "and", "self", ".", "nepoch", "<=", "self", ".", "maxepoch", ":", "\n", "            ", "logging", ".", "info", "(", "'start epoch'", ")", "\n", "self", ".", "trainepoch", "(", "trainTxt", ",", "trainImg", ",", "devTxt", ",", "devImg", ",", "nepoches", "=", "1", ")", "\n", "logging", ".", "info", "(", "'Epoch {0} finished'", ".", "format", "(", "self", ".", "nepoch", ")", ")", "\n", "\n", "results", "=", "{", "'i2t'", ":", "{", "'r1'", ":", "0", ",", "'r5'", ":", "0", ",", "'r10'", ":", "0", ",", "'medr'", ":", "0", "}", ",", "\n", "'t2i'", ":", "{", "'r1'", ":", "0", ",", "'r5'", ":", "0", ",", "'r10'", ":", "0", ",", "'medr'", ":", "0", "}", ",", "\n", "'dev'", ":", "bestdevscore", "}", "\n", "score", "=", "0", "\n", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "                ", "devTxt_i", "=", "devTxt", "[", "i", "*", "5000", ":", "(", "i", "+", "1", ")", "*", "5000", "]", "\n", "devImg_i", "=", "devImg", "[", "i", "*", "5000", ":", "(", "i", "+", "1", ")", "*", "5000", "]", "\n", "# Compute dev ranks img2txt", "\n", "r1_i2t", ",", "r5_i2t", ",", "r10_i2t", ",", "medr_i2t", "=", "self", ".", "i2t", "(", "devImg_i", ",", "\n", "devTxt_i", ")", "\n", "results", "[", "'i2t'", "]", "[", "'r1'", "]", "+=", "r1_i2t", "/", "5", "\n", "results", "[", "'i2t'", "]", "[", "'r5'", "]", "+=", "r5_i2t", "/", "5", "\n", "results", "[", "'i2t'", "]", "[", "'r10'", "]", "+=", "r10_i2t", "/", "5", "\n", "results", "[", "'i2t'", "]", "[", "'medr'", "]", "+=", "medr_i2t", "/", "5", "\n", "logging", ".", "info", "(", "\"Image to text: {0}, {1}, {2}, {3}\"", "\n", ".", "format", "(", "r1_i2t", ",", "r5_i2t", ",", "r10_i2t", ",", "medr_i2t", ")", ")", "\n", "# Compute dev ranks txt2img", "\n", "r1_t2i", ",", "r5_t2i", ",", "r10_t2i", ",", "medr_t2i", "=", "self", ".", "t2i", "(", "devImg_i", ",", "\n", "devTxt_i", ")", "\n", "results", "[", "'t2i'", "]", "[", "'r1'", "]", "+=", "r1_t2i", "/", "5", "\n", "results", "[", "'t2i'", "]", "[", "'r5'", "]", "+=", "r5_t2i", "/", "5", "\n", "results", "[", "'t2i'", "]", "[", "'r10'", "]", "+=", "r10_t2i", "/", "5", "\n", "results", "[", "'t2i'", "]", "[", "'medr'", "]", "+=", "medr_t2i", "/", "5", "\n", "logging", ".", "info", "(", "\"Text to Image: {0}, {1}, {2}, {3}\"", "\n", ".", "format", "(", "r1_t2i", ",", "r5_t2i", ",", "r10_t2i", ",", "medr_t2i", ")", ")", "\n", "score", "+=", "(", "r1_i2t", "+", "r5_i2t", "+", "r10_i2t", "+", "\n", "r1_t2i", "+", "r5_t2i", "+", "r10_t2i", ")", "/", "5", "\n", "\n", "", "logging", ".", "info", "(", "\"Dev mean Text to Image: {0}, {1}, {2}, {3}\"", ".", "format", "(", "\n", "results", "[", "'t2i'", "]", "[", "'r1'", "]", ",", "results", "[", "'t2i'", "]", "[", "'r5'", "]", ",", "\n", "results", "[", "'t2i'", "]", "[", "'r10'", "]", ",", "results", "[", "'t2i'", "]", "[", "'medr'", "]", ")", ")", "\n", "logging", ".", "info", "(", "\"Dev mean Image to text: {0}, {1}, {2}, {3}\"", ".", "format", "(", "\n", "results", "[", "'i2t'", "]", "[", "'r1'", "]", ",", "results", "[", "'i2t'", "]", "[", "'r5'", "]", ",", "\n", "results", "[", "'i2t'", "]", "[", "'r10'", "]", ",", "results", "[", "'i2t'", "]", "[", "'medr'", "]", ")", ")", "\n", "\n", "# early stop on Pearson", "\n", "if", "score", ">", "bestdevscore", ":", "\n", "                ", "bestdevscore", "=", "score", "\n", "bestmodel", "=", "copy", ".", "deepcopy", "(", "self", ".", "model", ")", "\n", "", "elif", "self", ".", "early_stop", ":", "\n", "                ", "if", "early_stop_count", ">=", "3", ":", "\n", "                    ", "stop_train", "=", "True", "\n", "", "early_stop_count", "+=", "1", "\n", "", "", "self", ".", "model", "=", "bestmodel", "\n", "\n", "# Compute test for the 5 splits", "\n", "results", "=", "{", "'i2t'", ":", "{", "'r1'", ":", "0", ",", "'r5'", ":", "0", ",", "'r10'", ":", "0", ",", "'medr'", ":", "0", "}", ",", "\n", "'t2i'", ":", "{", "'r1'", ":", "0", ",", "'r5'", ":", "0", ",", "'r10'", ":", "0", ",", "'medr'", ":", "0", "}", ",", "\n", "'dev'", ":", "bestdevscore", "}", "\n", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "            ", "testTxt_i", "=", "testTxt", "[", "i", "*", "5000", ":", "(", "i", "+", "1", ")", "*", "5000", "]", "\n", "testImg_i", "=", "testImg", "[", "i", "*", "5000", ":", "(", "i", "+", "1", ")", "*", "5000", "]", "\n", "# Compute test ranks img2txt", "\n", "r1_i2t", ",", "r5_i2t", ",", "r10_i2t", ",", "medr_i2t", "=", "self", ".", "i2t", "(", "testImg_i", ",", "testTxt_i", ")", "\n", "results", "[", "'i2t'", "]", "[", "'r1'", "]", "+=", "r1_i2t", "/", "5", "\n", "results", "[", "'i2t'", "]", "[", "'r5'", "]", "+=", "r5_i2t", "/", "5", "\n", "results", "[", "'i2t'", "]", "[", "'r10'", "]", "+=", "r10_i2t", "/", "5", "\n", "results", "[", "'i2t'", "]", "[", "'medr'", "]", "+=", "medr_i2t", "/", "5", "\n", "# Compute test ranks txt2img", "\n", "r1_t2i", ",", "r5_t2i", ",", "r10_t2i", ",", "medr_t2i", "=", "self", ".", "t2i", "(", "testImg_i", ",", "testTxt_i", ")", "\n", "results", "[", "'t2i'", "]", "[", "'r1'", "]", "+=", "r1_t2i", "/", "5", "\n", "results", "[", "'t2i'", "]", "[", "'r5'", "]", "+=", "r5_t2i", "/", "5", "\n", "results", "[", "'t2i'", "]", "[", "'r10'", "]", "+=", "r10_t2i", "/", "5", "\n", "results", "[", "'t2i'", "]", "[", "'medr'", "]", "+=", "medr_t2i", "/", "5", "\n", "\n", "", "return", "bestdevscore", ",", "results", "[", "'i2t'", "]", "[", "'r1'", "]", ",", "results", "[", "'i2t'", "]", "[", "'r5'", "]", ",", "results", "[", "'i2t'", "]", "[", "'r10'", "]", ",", "results", "[", "'i2t'", "]", "[", "'medr'", "]", ",", "results", "[", "'t2i'", "]", "[", "'r1'", "]", ",", "results", "[", "'t2i'", "]", "[", "'r5'", "]", ",", "results", "[", "'t2i'", "]", "[", "'r10'", "]", ",", "results", "[", "'t2i'", "]", "[", "'medr'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.tools.ranking.ImageSentenceRankingPytorch.trainepoch": [[226, 273], ["ranking.ImageSentenceRankingPytorch.model.train", "range", "list", "range", "numpy.random.permutation", "len", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "numpy.random.choice", "numpy.random.choice", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.autograd.Variable().view().cuda", "torch.autograd.Variable().view().cuda", "torch.autograd.Variable().view().cuda", "torch.autograd.Variable().view().cuda", "ranking.ImageSentenceRankingPytorch.model", "ranking.ImageSentenceRankingPytorch.loss_fn", "all_costs.append", "ranking.ImageSentenceRankingPytorch.optimizer.zero_grad", "ranking.ImageSentenceRankingPytorch.backward", "ranking.ImageSentenceRankingPytorch.optimizer.step", "len", "logging.info", "ranking.ImageSentenceRankingPytorch.i2t", "logging.info", "ranking.ImageSentenceRankingPytorch.t2i", "logging.info", "ranking.ImageSentenceRankingPytorch.data.item", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.LongTensor.size", "torch.LongTensor.size", "torch.LongTensor.size", "torch.LongTensor.size", "torch.autograd.Variable().view", "torch.autograd.Variable().view", "torch.autograd.Variable().view", "torch.autograd.Variable().view", "trainImg.index_select", "trainTxt.index_select", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "trainImg.index_select", "trainTxt.index_select"], "methods", ["home.repos.pwc.inspect_result.ZeweiChu_EntEval.tools.ranking.ImageSentenceRankingPytorch.i2t", "home.repos.pwc.inspect_result.ZeweiChu_EntEval.tools.ranking.ImageSentenceRankingPytorch.t2i"], ["", "def", "trainepoch", "(", "self", ",", "trainTxt", ",", "trainImg", ",", "devTxt", ",", "devImg", ",", "nepoches", "=", "1", ")", ":", "\n", "        ", "self", ".", "model", ".", "train", "(", ")", "\n", "for", "_", "in", "range", "(", "self", ".", "nepoch", ",", "self", ".", "nepoch", "+", "nepoches", ")", ":", "\n", "            ", "permutation", "=", "list", "(", "np", ".", "random", ".", "permutation", "(", "len", "(", "trainTxt", ")", ")", ")", "\n", "all_costs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "trainTxt", ")", ",", "self", ".", "batch_size", ")", ":", "\n", "# forward", "\n", "                ", "if", "i", "%", "(", "self", ".", "batch_size", "*", "500", ")", "==", "0", "and", "i", ">", "0", ":", "\n", "                    ", "logging", ".", "info", "(", "'samples : {0}'", ".", "format", "(", "i", ")", ")", "\n", "r1_i2t", ",", "r5_i2t", ",", "r10_i2t", ",", "medr_i2t", "=", "self", ".", "i2t", "(", "devImg", ",", "\n", "devTxt", ")", "\n", "logging", ".", "info", "(", "\"Image to text: {0}, {1}, {2}, {3}\"", ".", "format", "(", "\n", "r1_i2t", ",", "r5_i2t", ",", "r10_i2t", ",", "medr_i2t", ")", ")", "\n", "# Compute test ranks txt2img", "\n", "r1_t2i", ",", "r5_t2i", ",", "r10_t2i", ",", "medr_t2i", "=", "self", ".", "t2i", "(", "devImg", ",", "\n", "devTxt", ")", "\n", "logging", ".", "info", "(", "\"Text to Image: {0}, {1}, {2}, {3}\"", ".", "format", "(", "\n", "r1_t2i", ",", "r5_t2i", ",", "r10_t2i", ",", "medr_t2i", ")", ")", "\n", "", "idx", "=", "torch", ".", "LongTensor", "(", "permutation", "[", "i", ":", "i", "+", "self", ".", "batch_size", "]", ")", "\n", "imgbatch", "=", "Variable", "(", "trainImg", ".", "index_select", "(", "0", ",", "idx", ")", ")", ".", "cuda", "(", ")", "\n", "sentbatch", "=", "Variable", "(", "trainTxt", ".", "index_select", "(", "0", ",", "idx", ")", ")", ".", "cuda", "(", ")", "\n", "\n", "idximgc", "=", "np", ".", "random", ".", "choice", "(", "permutation", "[", ":", "i", "]", "+", "\n", "permutation", "[", "i", "+", "self", ".", "batch_size", ":", "]", ",", "\n", "self", ".", "ncontrast", "*", "idx", ".", "size", "(", "0", ")", ")", "\n", "idxsentc", "=", "np", ".", "random", ".", "choice", "(", "permutation", "[", ":", "i", "]", "+", "\n", "permutation", "[", "i", "+", "self", ".", "batch_size", ":", "]", ",", "\n", "self", ".", "ncontrast", "*", "idx", ".", "size", "(", "0", ")", ")", "\n", "idximgc", "=", "torch", ".", "LongTensor", "(", "idximgc", ")", "\n", "idxsentc", "=", "torch", ".", "LongTensor", "(", "idxsentc", ")", "\n", "# Get indexes for contrastive images and sentences", "\n", "imgcbatch", "=", "Variable", "(", "trainImg", ".", "index_select", "(", "0", ",", "idximgc", ")", ")", ".", "view", "(", "\n", "-", "1", ",", "self", ".", "ncontrast", ",", "self", ".", "imgdim", ")", ".", "cuda", "(", ")", "\n", "sentcbatch", "=", "Variable", "(", "trainTxt", ".", "index_select", "(", "0", ",", "idxsentc", ")", ")", ".", "view", "(", "\n", "-", "1", ",", "self", ".", "ncontrast", ",", "self", ".", "sentdim", ")", ".", "cuda", "(", ")", "\n", "\n", "anchor1", ",", "anchor2", ",", "img_sentc", ",", "sent_imgc", "=", "self", ".", "model", "(", "\n", "imgbatch", ",", "sentbatch", ",", "imgcbatch", ",", "sentcbatch", ")", "\n", "# loss", "\n", "loss", "=", "self", ".", "loss_fn", "(", "anchor1", ",", "anchor2", ",", "img_sentc", ",", "sent_imgc", ")", "\n", "all_costs", ".", "append", "(", "loss", ".", "data", ".", "item", "(", ")", ")", "\n", "# backward", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "# Update parameters", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "", "", "self", ".", "nepoch", "+=", "nepoches", "\n", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.tools.ranking.ImageSentenceRankingPytorch.t2i": [[274, 313], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "range", "int", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "img_embed.index_select", "numpy.zeros", "range", "len", "img_embed.append", "sent_embed.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "range", "torch.mm().cpu().numpy", "torch.mm().cpu().numpy", "torch.mm().cpu().numpy", "torch.mm().cpu().numpy", "numpy.zeros", "range", "len", "len", "len", "numpy.floor", "ranking.ImageSentenceRankingPytorch.model.proj_image", "ranking.ImageSentenceRankingPytorch.model.proj_sentence", "img_embed.size", "len", "len", "len", "len", "len", "numpy.median", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.mm().cpu", "torch.mm().cpu", "torch.mm().cpu", "torch.mm().cpu", "numpy.argsort", "numpy.where", "numpy.where", "numpy.where", "numpy.where", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "img_embed.index_select.transpose"], "methods", ["home.repos.pwc.inspect_result.ZeweiChu_EntEval.tools.ranking.COCOProjNet.proj_image", "home.repos.pwc.inspect_result.ZeweiChu_EntEval.tools.ranking.COCOProjNet.proj_sentence"], ["", "def", "t2i", "(", "self", ",", "images", ",", "captions", ")", ":", "\n", "        ", "\"\"\"\n        Images: (5N, imgdim) matrix of images\n        Captions: (5N, sentdim) matrix of captions\n        \"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# Project images and captions", "\n", "            ", "img_embed", ",", "sent_embed", "=", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "images", ")", ",", "self", ".", "batch_size", ")", ":", "\n", "                ", "img_embed", ".", "append", "(", "self", ".", "model", ".", "proj_image", "(", "\n", "Variable", "(", "images", "[", "i", ":", "i", "+", "self", ".", "batch_size", "]", ")", ")", ")", "\n", "sent_embed", ".", "append", "(", "self", ".", "model", ".", "proj_sentence", "(", "\n", "Variable", "(", "captions", "[", "i", ":", "i", "+", "self", ".", "batch_size", "]", ")", ")", ")", "\n", "", "img_embed", "=", "torch", ".", "cat", "(", "img_embed", ",", "0", ")", ".", "data", "\n", "sent_embed", "=", "torch", ".", "cat", "(", "sent_embed", ",", "0", ")", ".", "data", "\n", "\n", "npts", "=", "int", "(", "img_embed", ".", "size", "(", "0", ")", "/", "5", ")", "\n", "idxs", "=", "torch", ".", "cuda", ".", "LongTensor", "(", "range", "(", "0", ",", "len", "(", "img_embed", ")", ",", "5", ")", ")", "\n", "ims", "=", "img_embed", ".", "index_select", "(", "0", ",", "idxs", ")", "\n", "\n", "ranks", "=", "np", ".", "zeros", "(", "5", "*", "npts", ")", "\n", "for", "index", "in", "range", "(", "npts", ")", ":", "\n", "\n", "# Get query captions", "\n", "                ", "queries", "=", "sent_embed", "[", "5", "*", "index", ":", "5", "*", "index", "+", "5", "]", "\n", "\n", "# Compute scores", "\n", "scores", "=", "torch", ".", "mm", "(", "queries", ",", "ims", ".", "transpose", "(", "0", ",", "1", ")", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "inds", "=", "np", ".", "zeros", "(", "scores", ".", "shape", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "inds", ")", ")", ":", "\n", "                    ", "inds", "[", "i", "]", "=", "np", ".", "argsort", "(", "scores", "[", "i", "]", ")", "[", ":", ":", "-", "1", "]", "\n", "ranks", "[", "5", "*", "index", "+", "i", "]", "=", "np", ".", "where", "(", "inds", "[", "i", "]", "==", "index", ")", "[", "0", "]", "[", "0", "]", "\n", "\n", "# Compute metrics", "\n", "", "", "r1", "=", "100.0", "*", "len", "(", "np", ".", "where", "(", "ranks", "<", "1", ")", "[", "0", "]", ")", "/", "len", "(", "ranks", ")", "\n", "r5", "=", "100.0", "*", "len", "(", "np", ".", "where", "(", "ranks", "<", "5", ")", "[", "0", "]", ")", "/", "len", "(", "ranks", ")", "\n", "r10", "=", "100.0", "*", "len", "(", "np", ".", "where", "(", "ranks", "<", "10", ")", "[", "0", "]", ")", "/", "len", "(", "ranks", ")", "\n", "medr", "=", "np", ".", "floor", "(", "np", ".", "median", "(", "ranks", ")", ")", "+", "1", "\n", "return", "(", "r1", ",", "r5", ",", "r10", ",", "medr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.tools.ranking.ImageSentenceRankingPytorch.i2t": [[314, 360], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "range", "int", "numpy.zeros", "range", "len", "img_embed.append", "sent_embed.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "scores.cpu().numpy.cpu().numpy.cpu().numpy", "index_list.append", "range", "len", "len", "len", "numpy.floor", "ranking.ImageSentenceRankingPytorch.model.proj_image", "ranking.ImageSentenceRankingPytorch.model.proj_sentence", "img_embed.size", "numpy.argsort", "len", "len", "len", "numpy.median", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "scores.cpu().numpy.cpu().numpy.cpu", "query_img.view", "sent_embed.transpose", "numpy.where", "numpy.where", "numpy.where", "numpy.where"], "methods", ["home.repos.pwc.inspect_result.ZeweiChu_EntEval.tools.ranking.COCOProjNet.proj_image", "home.repos.pwc.inspect_result.ZeweiChu_EntEval.tools.ranking.COCOProjNet.proj_sentence"], ["", "", "def", "i2t", "(", "self", ",", "images", ",", "captions", ")", ":", "\n", "        ", "\"\"\"\n        Images: (5N, imgdim) matrix of images\n        Captions: (5N, sentdim) matrix of captions\n        \"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# Project images and captions", "\n", "            ", "img_embed", ",", "sent_embed", "=", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "images", ")", ",", "self", ".", "batch_size", ")", ":", "\n", "                ", "img_embed", ".", "append", "(", "self", ".", "model", ".", "proj_image", "(", "\n", "Variable", "(", "images", "[", "i", ":", "i", "+", "self", ".", "batch_size", "]", ")", ")", ")", "\n", "sent_embed", ".", "append", "(", "self", ".", "model", ".", "proj_sentence", "(", "\n", "Variable", "(", "captions", "[", "i", ":", "i", "+", "self", ".", "batch_size", "]", ")", ")", ")", "\n", "", "img_embed", "=", "torch", ".", "cat", "(", "img_embed", ",", "0", ")", ".", "data", "\n", "sent_embed", "=", "torch", ".", "cat", "(", "sent_embed", ",", "0", ")", ".", "data", "\n", "\n", "npts", "=", "int", "(", "img_embed", ".", "size", "(", "0", ")", "/", "5", ")", "\n", "index_list", "=", "[", "]", "\n", "\n", "ranks", "=", "np", ".", "zeros", "(", "npts", ")", "\n", "for", "index", "in", "range", "(", "npts", ")", ":", "\n", "\n", "# Get query image", "\n", "                ", "query_img", "=", "img_embed", "[", "5", "*", "index", "]", "\n", "\n", "# Compute scores", "\n", "scores", "=", "torch", ".", "mm", "(", "query_img", ".", "view", "(", "1", ",", "-", "1", ")", ",", "\n", "sent_embed", ".", "transpose", "(", "0", ",", "1", ")", ")", ".", "view", "(", "-", "1", ")", "\n", "scores", "=", "scores", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "inds", "=", "np", ".", "argsort", "(", "scores", ")", "[", ":", ":", "-", "1", "]", "\n", "index_list", ".", "append", "(", "inds", "[", "0", "]", ")", "\n", "\n", "# Score", "\n", "rank", "=", "1e20", "\n", "for", "i", "in", "range", "(", "5", "*", "index", ",", "5", "*", "index", "+", "5", ",", "1", ")", ":", "\n", "                    ", "tmp", "=", "np", ".", "where", "(", "inds", "==", "i", ")", "[", "0", "]", "[", "0", "]", "\n", "if", "tmp", "<", "rank", ":", "\n", "                        ", "rank", "=", "tmp", "\n", "", "", "ranks", "[", "index", "]", "=", "rank", "\n", "\n", "# Compute metrics", "\n", "", "r1", "=", "100.0", "*", "len", "(", "np", ".", "where", "(", "ranks", "<", "1", ")", "[", "0", "]", ")", "/", "len", "(", "ranks", ")", "\n", "r5", "=", "100.0", "*", "len", "(", "np", ".", "where", "(", "ranks", "<", "5", ")", "[", "0", "]", ")", "/", "len", "(", "ranks", ")", "\n", "r10", "=", "100.0", "*", "len", "(", "np", ".", "where", "(", "ranks", "<", "10", ")", "[", "0", "]", ")", "/", "len", "(", "ranks", ")", "\n", "medr", "=", "np", ".", "floor", "(", "np", ".", "median", "(", "ranks", ")", ")", "+", "1", "\n", "return", "(", "r1", ",", "r5", ",", "r10", ",", "medr", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.tools.relatedness.RelatednessPytorch.__init__": [[25, 58], ["numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.Adam", "torch.Adam", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Softmax", "torch.nn.Softmax", "relatedness.RelatednessPytorch.model.cuda", "relatedness.RelatednessPytorch.loss_fn.cuda", "relatedness.RelatednessPytorch.model.parameters"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "train", ",", "valid", ",", "test", ",", "devscores", ",", "config", ")", ":", "\n", "# fix seed", "\n", "        ", "np", ".", "random", ".", "seed", "(", "config", "[", "'seed'", "]", ")", "\n", "torch", ".", "manual_seed", "(", "config", "[", "'seed'", "]", ")", "\n", "assert", "torch", ".", "cuda", ".", "is_available", "(", ")", ",", "'torch.cuda required for Relatedness'", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "config", "[", "'seed'", "]", ")", "\n", "\n", "self", ".", "train", "=", "train", "\n", "self", ".", "valid", "=", "valid", "\n", "self", ".", "test", "=", "test", "\n", "self", ".", "devscores", "=", "devscores", "\n", "\n", "self", ".", "inputdim", "=", "train", "[", "'X'", "]", ".", "shape", "[", "1", "]", "\n", "self", ".", "nclasses", "=", "config", "[", "'nclasses'", "]", "\n", "self", ".", "seed", "=", "config", "[", "'seed'", "]", "\n", "self", ".", "l2reg", "=", "0.", "\n", "self", ".", "batch_size", "=", "64", "\n", "self", ".", "maxepoch", "=", "1000", "\n", "self", ".", "early_stop", "=", "True", "\n", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "inputdim", ",", "self", ".", "nclasses", ")", ",", "\n", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", ",", "\n", ")", "\n", "self", ".", "loss_fn", "=", "nn", ".", "MSELoss", "(", ")", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "self", ".", "model", "=", "self", ".", "model", ".", "cuda", "(", ")", "\n", "self", ".", "loss_fn", "=", "self", ".", "loss_fn", ".", "cuda", "(", ")", "\n", "\n", "", "self", ".", "loss_fn", ".", "size_average", "=", "False", "\n", "self", ".", "optimizer", "=", "optim", ".", "Adam", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "\n", "weight_decay", "=", "self", ".", "l2reg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.tools.relatedness.RelatednessPytorch.prepare_data": [[59, 69], ["torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["None"], ["", "def", "prepare_data", "(", "self", ",", "trainX", ",", "trainy", ",", "devX", ",", "devy", ",", "testX", ",", "testy", ")", ":", "\n", "# Transform probs to log-probs for KL-divergence", "\n", "        ", "trainX", "=", "torch", ".", "from_numpy", "(", "trainX", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "trainy", "=", "torch", ".", "from_numpy", "(", "trainy", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "devX", "=", "torch", ".", "from_numpy", "(", "devX", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "devy", "=", "torch", ".", "from_numpy", "(", "devy", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "testX", "=", "torch", ".", "from_numpy", "(", "testX", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "testY", "=", "torch", ".", "from_numpy", "(", "testy", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "return", "trainX", ",", "trainy", ",", "devX", ",", "devy", ",", "testX", ",", "testy", "\n", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.tools.relatedness.RelatednessPytorch.run": [[70, 102], ["numpy.arange", "relatedness.RelatednessPytorch.prepare_data", "numpy.dot", "relatedness.RelatednessPytorch.trainepoch", "numpy.dot", "relatedness.RelatednessPytorch.predict_proba", "relatedness.RelatednessPytorch.predict_proba", "scipy.stats.pearsonr", "copy.deepcopy"], "methods", ["home.repos.pwc.inspect_result.ZeweiChu_EntEval.tools.relatedness.RelatednessPytorch.prepare_data", "home.repos.pwc.inspect_result.ZeweiChu_EntEval.tools.classifier.PyTorchClassifier.trainepoch", "home.repos.pwc.inspect_result.ZeweiChu_EntEval.tools.classifier.PyTorchClassifier.predict_proba", "home.repos.pwc.inspect_result.ZeweiChu_EntEval.tools.classifier.PyTorchClassifier.predict_proba"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "self", ".", "nepoch", "=", "0", "\n", "bestpr", "=", "-", "1", "\n", "early_stop_count", "=", "0", "\n", "r", "=", "np", ".", "arange", "(", "1", ",", "6", ")", "\n", "stop_train", "=", "False", "\n", "\n", "# Preparing data", "\n", "trainX", ",", "trainy", ",", "devX", ",", "devy", ",", "testX", ",", "testy", "=", "self", ".", "prepare_data", "(", "\n", "self", ".", "train", "[", "'X'", "]", ",", "self", ".", "train", "[", "'y'", "]", ",", "\n", "self", ".", "valid", "[", "'X'", "]", ",", "self", ".", "valid", "[", "'y'", "]", ",", "\n", "self", ".", "test", "[", "'X'", "]", ",", "self", ".", "test", "[", "'y'", "]", ")", "\n", "\n", "# Training", "\n", "while", "not", "stop_train", "and", "self", ".", "nepoch", "<=", "self", ".", "maxepoch", ":", "\n", "            ", "self", ".", "trainepoch", "(", "trainX", ",", "trainy", ",", "nepoches", "=", "50", ")", "\n", "yhat", "=", "np", ".", "dot", "(", "self", ".", "predict_proba", "(", "devX", ")", ",", "r", ")", "\n", "pr", "=", "pearsonr", "(", "yhat", ",", "self", ".", "devscores", ")", "[", "0", "]", "\n", "pr", "=", "0", "if", "pr", "!=", "pr", "else", "pr", "# if NaN bc std=0", "\n", "# early stop on Pearson", "\n", "if", "pr", ">", "bestpr", ":", "\n", "                ", "bestpr", "=", "pr", "\n", "bestmodel", "=", "copy", ".", "deepcopy", "(", "self", ".", "model", ")", "\n", "", "elif", "self", ".", "early_stop", ":", "\n", "                ", "if", "early_stop_count", ">=", "3", ":", "\n", "                    ", "stop_train", "=", "True", "\n", "", "early_stop_count", "+=", "1", "\n", "", "", "self", ".", "model", "=", "bestmodel", "\n", "\n", "yhat", "=", "np", ".", "dot", "(", "self", ".", "predict_proba", "(", "testX", ")", ",", "r", ")", "\n", "\n", "return", "bestpr", ",", "yhat", "\n", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.tools.relatedness.RelatednessPytorch.trainepoch": [[103, 123], ["relatedness.RelatednessPytorch.model.train", "range", "numpy.random.permutation", "range", "len", "len", "torch.from_numpy().long().cuda", "torch.from_numpy().long().cuda", "torch.from_numpy().long().cuda", "torch.from_numpy().long().cuda", "relatedness.RelatednessPytorch.model", "relatedness.RelatednessPytorch.loss_fn", "all_costs.append", "relatedness.RelatednessPytorch.optimizer.zero_grad", "relatedness.RelatednessPytorch.backward", "relatedness.RelatednessPytorch.optimizer.step", "relatedness.RelatednessPytorch.item", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["None"], ["", "def", "trainepoch", "(", "self", ",", "X", ",", "y", ",", "nepoches", "=", "1", ")", ":", "\n", "        ", "self", ".", "model", ".", "train", "(", ")", "\n", "for", "_", "in", "range", "(", "self", ".", "nepoch", ",", "self", ".", "nepoch", "+", "nepoches", ")", ":", "\n", "            ", "permutation", "=", "np", ".", "random", ".", "permutation", "(", "len", "(", "X", ")", ")", "\n", "all_costs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "X", ")", ",", "self", ".", "batch_size", ")", ":", "\n", "# forward", "\n", "                ", "idx", "=", "torch", ".", "from_numpy", "(", "permutation", "[", "i", ":", "i", "+", "self", ".", "batch_size", "]", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "Xbatch", "=", "X", "[", "idx", "]", "\n", "ybatch", "=", "y", "[", "idx", "]", "\n", "output", "=", "self", ".", "model", "(", "Xbatch", ")", "\n", "# loss", "\n", "loss", "=", "self", ".", "loss_fn", "(", "output", ",", "ybatch", ")", "\n", "all_costs", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "# backward", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "# Update parameters", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "", "", "self", ".", "nepoch", "+=", "nepoches", "\n", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.tools.relatedness.RelatednessPytorch.predict_proba": [[124, 135], ["relatedness.RelatednessPytorch.model.eval", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "range", "len", "len", "relatedness.RelatednessPytorch.model().data.cpu().numpy", "numpy.concatenate", "relatedness.RelatednessPytorch.model().data.cpu", "relatedness.RelatednessPytorch.model().data.cpu().numpy", "relatedness.RelatednessPytorch.model().data.cpu", "relatedness.RelatednessPytorch.model", "relatedness.RelatednessPytorch.model"], "methods", ["home.repos.pwc.inspect_result.ZeweiChu_EntEval.enteval.engine.SE.eval"], ["", "def", "predict_proba", "(", "self", ",", "devX", ")", ":", "\n", "        ", "self", ".", "model", ".", "eval", "(", ")", "\n", "probas", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "0", ",", "len", "(", "devX", ")", ",", "self", ".", "batch_size", ")", ":", "\n", "                ", "Xbatch", "=", "devX", "[", "i", ":", "i", "+", "self", ".", "batch_size", "]", "\n", "if", "len", "(", "probas", ")", "==", "0", ":", "\n", "                    ", "probas", "=", "self", ".", "model", "(", "Xbatch", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "                    ", "probas", "=", "np", ".", "concatenate", "(", "(", "probas", ",", "self", ".", "model", "(", "Xbatch", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ",", "axis", "=", "0", ")", "\n", "", "", "", "return", "probas", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.tools.validation.InnerKFoldClassifier.__init__": [[44, 57], ["validation.get_classif_name"], "methods", ["home.repos.pwc.inspect_result.ZeweiChu_EntEval.tools.validation.get_classif_name"], ["def", "__init__", "(", "self", ",", "X", ",", "y", ",", "config", ")", ":", "\n", "        ", "self", ".", "X", "=", "X", "\n", "self", ".", "y", "=", "y", "\n", "self", ".", "featdim", "=", "X", ".", "shape", "[", "1", "]", "\n", "self", ".", "nclasses", "=", "config", "[", "'nclasses'", "]", "\n", "self", ".", "seed", "=", "config", "[", "'seed'", "]", "\n", "self", ".", "devresults", "=", "[", "]", "\n", "self", ".", "testresults", "=", "[", "]", "\n", "self", ".", "usepytorch", "=", "config", "[", "'usepytorch'", "]", "\n", "self", ".", "classifier_config", "=", "config", "[", "'classifier'", "]", "\n", "self", ".", "modelname", "=", "get_classif_name", "(", "self", ".", "classifier_config", ",", "self", ".", "usepytorch", ")", "\n", "\n", "self", ".", "k", "=", "5", "if", "'kfold'", "not", "in", "config", "else", "config", "[", "'kfold'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.tools.validation.InnerKFoldClassifier.run": [[58, 109], ["logging.info", "sklearn.model_selection.StratifiedKFold", "sklearn.model_selection.StratifiedKFold", "sklearn.model_selection.StratifiedKFold.split", "round", "round", "logging.info", "validation.InnerKFoldClassifier.devresults.append", "validation.InnerKFoldClassifier.testresults.append", "numpy.mean", "numpy.mean", "sklearn.model_selection.StratifiedKFold.split", "scores.append", "numpy.max", "enteval.tools.classifier.MLP", "sklearn.linear_model.LogisticRegression.fit", "sklearn.linear_model.LogisticRegression", "sklearn.linear_model.LogisticRegression.fit", "round", "range", "range", "regscores.append", "round", "numpy.argmax", "numpy.max", "enteval.tools.classifier.MLP", "sklearn.linear_model.LogisticRegression.fit", "sklearn.linear_model.LogisticRegression", "sklearn.linear_model.LogisticRegression.fit", "sklearn.linear_model.LogisticRegression.score", "sklearn.linear_model.LogisticRegression.score", "numpy.mean"], "methods", ["home.repos.pwc.inspect_result.ZeweiChu_EntEval.tools.classifier.PyTorchClassifier.fit", "home.repos.pwc.inspect_result.ZeweiChu_EntEval.tools.classifier.PyTorchClassifier.fit", "home.repos.pwc.inspect_result.ZeweiChu_EntEval.tools.classifier.PyTorchClassifier.fit", "home.repos.pwc.inspect_result.ZeweiChu_EntEval.tools.classifier.PyTorchClassifier.fit", "home.repos.pwc.inspect_result.ZeweiChu_EntEval.tools.classifier.PyTorchClassifier.score", "home.repos.pwc.inspect_result.ZeweiChu_EntEval.tools.classifier.PyTorchClassifier.score"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "logging", ".", "info", "(", "'Training {0} with (inner) {1}-fold cross-validation'", "\n", ".", "format", "(", "self", ".", "modelname", ",", "self", ".", "k", ")", ")", "\n", "\n", "regs", "=", "[", "10", "**", "t", "for", "t", "in", "range", "(", "-", "5", ",", "-", "1", ")", "]", "if", "self", ".", "usepytorch", "else", "[", "2", "**", "t", "for", "t", "in", "range", "(", "-", "2", ",", "4", ",", "1", ")", "]", "\n", "skf", "=", "StratifiedKFold", "(", "n_splits", "=", "self", ".", "k", ",", "shuffle", "=", "True", ",", "random_state", "=", "1111", ")", "\n", "innerskf", "=", "StratifiedKFold", "(", "n_splits", "=", "self", ".", "k", ",", "shuffle", "=", "True", ",", "\n", "random_state", "=", "1111", ")", "\n", "count", "=", "0", "\n", "for", "train_idx", ",", "test_idx", "in", "skf", ".", "split", "(", "self", ".", "X", ",", "self", ".", "y", ")", ":", "\n", "            ", "count", "+=", "1", "\n", "X_train", ",", "X_test", "=", "self", ".", "X", "[", "train_idx", "]", ",", "self", ".", "X", "[", "test_idx", "]", "\n", "y_train", ",", "y_test", "=", "self", ".", "y", "[", "train_idx", "]", ",", "self", ".", "y", "[", "test_idx", "]", "\n", "scores", "=", "[", "]", "\n", "for", "reg", "in", "regs", ":", "\n", "                ", "regscores", "=", "[", "]", "\n", "for", "inner_train_idx", ",", "inner_test_idx", "in", "innerskf", ".", "split", "(", "X_train", ",", "y_train", ")", ":", "\n", "                    ", "X_in_train", ",", "X_in_test", "=", "X_train", "[", "inner_train_idx", "]", ",", "X_train", "[", "inner_test_idx", "]", "\n", "y_in_train", ",", "y_in_test", "=", "y_train", "[", "inner_train_idx", "]", ",", "y_train", "[", "inner_test_idx", "]", "\n", "if", "self", ".", "usepytorch", ":", "\n", "                        ", "clf", "=", "MLP", "(", "self", ".", "classifier_config", ",", "inputdim", "=", "self", ".", "featdim", ",", "\n", "nclasses", "=", "self", ".", "nclasses", ",", "l2reg", "=", "reg", ",", "\n", "seed", "=", "self", ".", "seed", ")", "\n", "clf", ".", "fit", "(", "X_in_train", ",", "y_in_train", ",", "\n", "validation_data", "=", "(", "X_in_test", ",", "y_in_test", ")", ")", "\n", "", "else", ":", "\n", "                        ", "clf", "=", "LogisticRegression", "(", "C", "=", "reg", ",", "random_state", "=", "self", ".", "seed", ")", "\n", "clf", ".", "fit", "(", "X_in_train", ",", "y_in_train", ")", "\n", "", "regscores", ".", "append", "(", "clf", ".", "score", "(", "X_in_test", ",", "y_in_test", ")", ")", "\n", "", "scores", ".", "append", "(", "round", "(", "100", "*", "np", ".", "mean", "(", "regscores", ")", ",", "2", ")", ")", "\n", "", "optreg", "=", "regs", "[", "np", ".", "argmax", "(", "scores", ")", "]", "\n", "logging", ".", "info", "(", "'Best param found at split {0}: l2reg = {1} \\\n                with score {2}'", ".", "format", "(", "count", ",", "optreg", ",", "np", ".", "max", "(", "scores", ")", ")", ")", "\n", "self", ".", "devresults", ".", "append", "(", "np", ".", "max", "(", "scores", ")", ")", "\n", "\n", "if", "self", ".", "usepytorch", ":", "\n", "                ", "clf", "=", "MLP", "(", "self", ".", "classifier_config", ",", "inputdim", "=", "self", ".", "featdim", ",", "\n", "nclasses", "=", "self", ".", "nclasses", ",", "l2reg", "=", "optreg", ",", "\n", "seed", "=", "self", ".", "seed", ")", "\n", "\n", "clf", ".", "fit", "(", "X_train", ",", "y_train", ",", "validation_split", "=", "0.05", ")", "\n", "", "else", ":", "\n", "                ", "clf", "=", "LogisticRegression", "(", "C", "=", "optreg", ",", "random_state", "=", "self", ".", "seed", ")", "\n", "clf", ".", "fit", "(", "X_train", ",", "y_train", ")", "\n", "\n", "", "self", ".", "testresults", ".", "append", "(", "round", "(", "100", "*", "clf", ".", "score", "(", "X_test", ",", "y_test", ")", ",", "2", ")", ")", "\n", "\n", "", "devaccuracy", "=", "round", "(", "np", ".", "mean", "(", "self", ".", "devresults", ")", ",", "2", ")", "\n", "testaccuracy", "=", "round", "(", "np", ".", "mean", "(", "self", ".", "testresults", ")", ",", "2", ")", "\n", "return", "devaccuracy", ",", "testaccuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.tools.validation.KFoldClassifier.__init__": [[115, 126], ["validation.get_classif_name"], "methods", ["home.repos.pwc.inspect_result.ZeweiChu_EntEval.tools.validation.get_classif_name"], ["def", "__init__", "(", "self", ",", "train", ",", "test", ",", "config", ")", ":", "\n", "        ", "self", ".", "train", "=", "train", "\n", "self", ".", "test", "=", "test", "\n", "self", ".", "featdim", "=", "self", ".", "train", "[", "'X'", "]", ".", "shape", "[", "1", "]", "\n", "self", ".", "nclasses", "=", "config", "[", "'nclasses'", "]", "\n", "self", ".", "seed", "=", "config", "[", "'seed'", "]", "\n", "self", ".", "usepytorch", "=", "config", "[", "'usepytorch'", "]", "\n", "self", ".", "classifier_config", "=", "config", "[", "'classifier'", "]", "\n", "self", ".", "modelname", "=", "get_classif_name", "(", "self", ".", "classifier_config", ",", "self", ".", "usepytorch", ")", "\n", "\n", "self", ".", "k", "=", "5", "if", "'kfold'", "not", "in", "config", "else", "config", "[", "'kfold'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.tools.validation.KFoldClassifier.run": [[127, 183], ["logging.info", "sklearn.model_selection.StratifiedKFold", "logging.info", "numpy.max", "logging.info", "logging.info", "sklearn.linear_model.LogisticRegression.predict", "sklearn.linear_model.LogisticRegression.score", "round", "sklearn.model_selection.StratifiedKFold.split", "scores.append", "enteval.tools.classifier.MLP", "sklearn.linear_model.LogisticRegression.fit", "sklearn.linear_model.LogisticRegression", "sklearn.linear_model.LogisticRegression.fit", "sklearn.linear_model.LogisticRegression.score", "scanscores.append", "round", "numpy.argmax", "range", "range", "enteval.tools.classifier.MLP", "sklearn.linear_model.LogisticRegression.fit", "sklearn.linear_model.LogisticRegression", "sklearn.linear_model.LogisticRegression.fit", "range", "numpy.mean", "str", "len"], "methods", ["home.repos.pwc.inspect_result.ZeweiChu_EntEval.tools.classifier.PyTorchClassifier.predict", "home.repos.pwc.inspect_result.ZeweiChu_EntEval.tools.classifier.PyTorchClassifier.score", "home.repos.pwc.inspect_result.ZeweiChu_EntEval.tools.classifier.PyTorchClassifier.fit", "home.repos.pwc.inspect_result.ZeweiChu_EntEval.tools.classifier.PyTorchClassifier.fit", "home.repos.pwc.inspect_result.ZeweiChu_EntEval.tools.classifier.PyTorchClassifier.score", "home.repos.pwc.inspect_result.ZeweiChu_EntEval.tools.classifier.PyTorchClassifier.fit", "home.repos.pwc.inspect_result.ZeweiChu_EntEval.tools.classifier.PyTorchClassifier.fit"], ["", "def", "run", "(", "self", ")", ":", "\n", "# cross-validation", "\n", "        ", "logging", ".", "info", "(", "'Training {0} with {1}-fold cross-validation'", "\n", ".", "format", "(", "self", ".", "modelname", ",", "self", ".", "k", ")", ")", "\n", "regs", "=", "[", "10", "**", "t", "for", "t", "in", "range", "(", "-", "5", ",", "-", "1", ")", "]", "if", "self", ".", "usepytorch", "else", "[", "2", "**", "t", "for", "t", "in", "range", "(", "-", "1", ",", "6", ",", "1", ")", "]", "\n", "skf", "=", "StratifiedKFold", "(", "n_splits", "=", "self", ".", "k", ",", "shuffle", "=", "True", ",", "\n", "random_state", "=", "self", ".", "seed", ")", "\n", "scores", "=", "[", "]", "\n", "\n", "for", "reg", "in", "regs", ":", "\n", "            ", "scanscores", "=", "[", "]", "\n", "for", "train_idx", ",", "test_idx", "in", "skf", ".", "split", "(", "self", ".", "train", "[", "'X'", "]", ",", "\n", "self", ".", "train", "[", "'y'", "]", ")", ":", "\n", "# Split data", "\n", "                ", "X_train", ",", "y_train", "=", "self", ".", "train", "[", "'X'", "]", "[", "train_idx", "]", ",", "self", ".", "train", "[", "'y'", "]", "[", "train_idx", "]", "\n", "\n", "X_test", ",", "y_test", "=", "self", ".", "train", "[", "'X'", "]", "[", "test_idx", "]", ",", "self", ".", "train", "[", "'y'", "]", "[", "test_idx", "]", "\n", "\n", "# Train classifier", "\n", "if", "self", ".", "usepytorch", ":", "\n", "                    ", "clf", "=", "MLP", "(", "self", ".", "classifier_config", ",", "inputdim", "=", "self", ".", "featdim", ",", "\n", "nclasses", "=", "self", ".", "nclasses", ",", "l2reg", "=", "reg", ",", "\n", "seed", "=", "self", ".", "seed", ")", "\n", "clf", ".", "fit", "(", "X_train", ",", "y_train", ",", "validation_data", "=", "(", "X_test", ",", "y_test", ")", ")", "\n", "", "else", ":", "\n", "                    ", "clf", "=", "LogisticRegression", "(", "C", "=", "reg", ",", "random_state", "=", "self", ".", "seed", ")", "\n", "clf", ".", "fit", "(", "X_train", ",", "y_train", ")", "\n", "", "score", "=", "clf", ".", "score", "(", "X_test", ",", "y_test", ")", "\n", "scanscores", ".", "append", "(", "score", ")", "\n", "# Append mean score", "\n", "", "scores", ".", "append", "(", "round", "(", "100", "*", "np", ".", "mean", "(", "scanscores", ")", ",", "2", ")", ")", "\n", "\n", "# evaluation", "\n", "", "logging", ".", "info", "(", "[", "(", "'reg:'", "+", "str", "(", "regs", "[", "idx", "]", ")", ",", "scores", "[", "idx", "]", ")", "\n", "for", "idx", "in", "range", "(", "len", "(", "scores", ")", ")", "]", ")", "\n", "optreg", "=", "regs", "[", "np", ".", "argmax", "(", "scores", ")", "]", "\n", "devaccuracy", "=", "np", ".", "max", "(", "scores", ")", "\n", "logging", ".", "info", "(", "'Cross-validation : best param found is reg = {0} \\\n            with score {1}'", ".", "format", "(", "optreg", ",", "devaccuracy", ")", ")", "\n", "\n", "logging", ".", "info", "(", "'Evaluating...'", ")", "\n", "if", "self", ".", "usepytorch", ":", "\n", "            ", "clf", "=", "MLP", "(", "self", ".", "classifier_config", ",", "inputdim", "=", "self", ".", "featdim", ",", "\n", "nclasses", "=", "self", ".", "nclasses", ",", "l2reg", "=", "optreg", ",", "\n", "seed", "=", "self", ".", "seed", ")", "\n", "clf", ".", "fit", "(", "self", ".", "train", "[", "'X'", "]", ",", "self", ".", "train", "[", "'y'", "]", ",", "validation_split", "=", "0.05", ")", "\n", "", "else", ":", "\n", "            ", "clf", "=", "LogisticRegression", "(", "C", "=", "optreg", ",", "random_state", "=", "self", ".", "seed", ")", "\n", "clf", ".", "fit", "(", "self", ".", "train", "[", "'X'", "]", ",", "self", ".", "train", "[", "'y'", "]", ")", "\n", "", "yhat", "=", "clf", ".", "predict", "(", "self", ".", "test", "[", "'X'", "]", ")", "\n", "\n", "testaccuracy", "=", "clf", ".", "score", "(", "self", ".", "test", "[", "'X'", "]", ",", "self", ".", "test", "[", "'y'", "]", ")", "\n", "testaccuracy", "=", "round", "(", "100", "*", "testaccuracy", ",", "2", ")", "\n", "\n", "return", "devaccuracy", ",", "testaccuracy", ",", "yhat", "\n", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.tools.validation.SplitClassifier.__init__": [[189, 202], ["validation.get_classif_name"], "methods", ["home.repos.pwc.inspect_result.ZeweiChu_EntEval.tools.validation.get_classif_name"], ["def", "__init__", "(", "self", ",", "X", ",", "y", ",", "config", ")", ":", "\n", "        ", "self", ".", "X", "=", "X", "\n", "self", ".", "y", "=", "y", "\n", "self", ".", "nclasses", "=", "config", "[", "'nclasses'", "]", "\n", "self", ".", "featdim", "=", "self", ".", "X", "[", "'train'", "]", ".", "shape", "[", "1", "]", "\n", "self", ".", "seed", "=", "config", "[", "'seed'", "]", "\n", "self", ".", "usepytorch", "=", "config", "[", "'usepytorch'", "]", "\n", "self", ".", "classifier_config", "=", "config", "[", "'classifier'", "]", "\n", "self", ".", "cudaEfficient", "=", "False", "if", "'cudaEfficient'", "not", "in", "config", "else", "config", "[", "'cudaEfficient'", "]", "\n", "self", ".", "modelname", "=", "get_classif_name", "(", "self", ".", "classifier_config", ",", "self", ".", "usepytorch", ")", "\n", "self", ".", "noreg", "=", "False", "if", "'noreg'", "not", "in", "config", "else", "config", "[", "'noreg'", "]", "\n", "self", ".", "config", "=", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.tools.validation.SplitClassifier.run": [[203, 250], ["logging.info", "logging.info", "numpy.max", "logging.info", "sklearn.linear_model.LogisticRegression", "logging.info", "logging.info", "sklearn.linear_model.LogisticRegression.score", "scores.append", "enteval.tools.classifier.MLP", "sklearn.linear_model.LogisticRegression.fit", "sklearn.linear_model.LogisticRegression", "sklearn.linear_model.LogisticRegression.fit", "round", "enteval.tools.classifier.MLP", "sklearn.linear_model.LogisticRegression.fit", "sklearn.linear_model.LogisticRegression", "sklearn.linear_model.LogisticRegression.fit", "round", "numpy.argmax", "range", "range", "range", "sklearn.linear_model.LogisticRegression.score", "str", "len"], "methods", ["home.repos.pwc.inspect_result.ZeweiChu_EntEval.tools.classifier.PyTorchClassifier.score", "home.repos.pwc.inspect_result.ZeweiChu_EntEval.tools.classifier.PyTorchClassifier.fit", "home.repos.pwc.inspect_result.ZeweiChu_EntEval.tools.classifier.PyTorchClassifier.fit", "home.repos.pwc.inspect_result.ZeweiChu_EntEval.tools.classifier.PyTorchClassifier.fit", "home.repos.pwc.inspect_result.ZeweiChu_EntEval.tools.classifier.PyTorchClassifier.fit", "home.repos.pwc.inspect_result.ZeweiChu_EntEval.tools.classifier.PyTorchClassifier.score"], ["", "def", "run", "(", "self", ",", "return_score", "=", "False", ")", ":", "\n", "        ", "logging", ".", "info", "(", "'Training {0} with standard validation..'", "\n", ".", "format", "(", "self", ".", "modelname", ")", ")", "\n", "regs", "=", "[", "10", "**", "t", "for", "t", "in", "range", "(", "-", "5", ",", "-", "1", ")", "]", "if", "self", ".", "usepytorch", "else", "[", "2", "**", "t", "for", "t", "in", "range", "(", "-", "2", ",", "4", ",", "1", ")", "]", "\n", "if", "self", ".", "noreg", ":", "\n", "            ", "regs", "=", "[", "1e-9", "if", "self", ".", "usepytorch", "else", "1e9", "]", "\n", "", "scores", "=", "[", "]", "\n", "for", "reg", "in", "regs", ":", "\n", "            ", "if", "self", ".", "usepytorch", ":", "\n", "                ", "clf", "=", "MLP", "(", "self", ".", "classifier_config", ",", "inputdim", "=", "self", ".", "featdim", ",", "\n", "nclasses", "=", "self", ".", "nclasses", ",", "l2reg", "=", "reg", ",", "\n", "seed", "=", "self", ".", "seed", ",", "cudaEfficient", "=", "self", ".", "cudaEfficient", ")", "\n", "\n", "# TODO: Find a hack for reducing nb epoches in SNLI", "\n", "clf", ".", "fit", "(", "self", ".", "X", "[", "'train'", "]", ",", "self", ".", "y", "[", "'train'", "]", ",", "\n", "validation_data", "=", "(", "self", ".", "X", "[", "'valid'", "]", ",", "self", ".", "y", "[", "'valid'", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "clf", "=", "LogisticRegression", "(", "C", "=", "reg", ",", "random_state", "=", "self", ".", "seed", ")", "\n", "clf", ".", "fit", "(", "self", ".", "X", "[", "'train'", "]", ",", "self", ".", "y", "[", "'train'", "]", ")", "\n", "", "scores", ".", "append", "(", "round", "(", "100", "*", "clf", ".", "score", "(", "self", ".", "X", "[", "'valid'", "]", ",", "\n", "self", ".", "y", "[", "'valid'", "]", ")", ",", "2", ")", ")", "\n", "", "logging", ".", "info", "(", "[", "(", "'reg:'", "+", "str", "(", "regs", "[", "idx", "]", ")", ",", "scores", "[", "idx", "]", ")", "\n", "for", "idx", "in", "range", "(", "len", "(", "scores", ")", ")", "]", ")", "\n", "optreg", "=", "regs", "[", "np", ".", "argmax", "(", "scores", ")", "]", "\n", "devaccuracy", "=", "np", ".", "max", "(", "scores", ")", "\n", "logging", ".", "info", "(", "'Validation : best param found is reg = {0} with score \\\n            {1}'", ".", "format", "(", "optreg", ",", "devaccuracy", ")", ")", "\n", "clf", "=", "LogisticRegression", "(", "C", "=", "optreg", ",", "random_state", "=", "self", ".", "seed", ")", "\n", "logging", ".", "info", "(", "'Evaluating...'", ")", "\n", "if", "self", ".", "usepytorch", ":", "\n", "            ", "clf", "=", "MLP", "(", "self", ".", "classifier_config", ",", "inputdim", "=", "self", ".", "featdim", ",", "\n", "nclasses", "=", "self", ".", "nclasses", ",", "l2reg", "=", "optreg", ",", "\n", "seed", "=", "self", ".", "seed", ",", "cudaEfficient", "=", "self", ".", "cudaEfficient", ")", "\n", "\n", "# TODO: Find a hack for reducing nb epoches in SNLI", "\n", "clf", ".", "fit", "(", "self", ".", "X", "[", "'train'", "]", ",", "self", ".", "y", "[", "'train'", "]", ",", "\n", "validation_data", "=", "(", "self", ".", "X", "[", "'valid'", "]", ",", "self", ".", "y", "[", "'valid'", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "clf", "=", "LogisticRegression", "(", "C", "=", "optreg", ",", "random_state", "=", "self", ".", "seed", ")", "\n", "clf", ".", "fit", "(", "self", ".", "X", "[", "'train'", "]", ",", "self", ".", "y", "[", "'train'", "]", ")", "\n", "\n", "", "logging", ".", "info", "(", "\"start predicting on test\"", ")", "\n", "testaccuracy", "=", "clf", ".", "score", "(", "self", ".", "X", "[", "'test'", "]", ",", "self", ".", "y", "[", "'test'", "]", ",", "test", "=", "True", ",", "return_score", "=", "return_score", ")", "\n", "if", "not", "return_score", ":", "\n", "            ", "testaccuracy", "=", "round", "(", "100", "*", "testaccuracy", ",", "2", ")", "\n", "", "return", "devaccuracy", ",", "testaccuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.tools.validation.SplitMultiClassClassifier.__init__": [[257, 270], ["validation.get_classif_name"], "methods", ["home.repos.pwc.inspect_result.ZeweiChu_EntEval.tools.validation.get_classif_name"], ["def", "__init__", "(", "self", ",", "X", ",", "y", ",", "config", ")", ":", "\n", "        ", "self", ".", "X", "=", "X", "\n", "self", ".", "y", "=", "y", "\n", "self", ".", "nclasses", "=", "config", "[", "'nclasses'", "]", "\n", "self", ".", "featdim", "=", "self", ".", "X", "[", "'train'", "]", ".", "shape", "[", "-", "1", "]", "\n", "self", ".", "seed", "=", "config", "[", "'seed'", "]", "\n", "self", ".", "usepytorch", "=", "config", "[", "'usepytorch'", "]", "\n", "self", ".", "classifier_config", "=", "config", "[", "'classifier'", "]", "\n", "self", ".", "cudaEfficient", "=", "False", "if", "'cudaEfficient'", "not", "in", "config", "else", "config", "[", "'cudaEfficient'", "]", "\n", "self", ".", "modelname", "=", "get_classif_name", "(", "self", ".", "classifier_config", ",", "self", ".", "usepytorch", ")", "\n", "self", ".", "noreg", "=", "False", "if", "'noreg'", "not", "in", "config", "else", "config", "[", "'noreg'", "]", "\n", "self", ".", "config", "=", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.tools.validation.SplitMultiClassClassifier.run": [[271, 316], ["logging.info", "logging.info", "numpy.max", "logging.info", "sklearn.linear_model.LogisticRegression", "logging.info", "sklearn.linear_model.LogisticRegression.score", "round", "scores.append", "enteval.MLP", "sklearn.linear_model.LogisticRegression.fit", "loggint.info", "exit", "enteval.MLP", "sklearn.linear_model.LogisticRegression.fit", "sklearn.linear_model.LogisticRegression", "sklearn.linear_model.LogisticRegression.fit", "round", "numpy.argmax", "range", "range", "range", "sklearn.linear_model.LogisticRegression.score", "str", "len"], "methods", ["home.repos.pwc.inspect_result.ZeweiChu_EntEval.tools.classifier.PyTorchClassifier.score", "home.repos.pwc.inspect_result.ZeweiChu_EntEval.tools.classifier.PyTorchClassifier.fit", "home.repos.pwc.inspect_result.ZeweiChu_EntEval.tools.classifier.PyTorchClassifier.fit", "home.repos.pwc.inspect_result.ZeweiChu_EntEval.tools.classifier.PyTorchClassifier.fit", "home.repos.pwc.inspect_result.ZeweiChu_EntEval.tools.classifier.PyTorchClassifier.score"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "logging", ".", "info", "(", "'Training {0} with standard validation..'", "\n", ".", "format", "(", "self", ".", "modelname", ")", ")", "\n", "regs", "=", "[", "10", "**", "t", "for", "t", "in", "range", "(", "-", "5", ",", "-", "1", ")", "]", "if", "self", ".", "usepytorch", "else", "[", "2", "**", "t", "for", "t", "in", "range", "(", "-", "2", ",", "4", ",", "1", ")", "]", "\n", "if", "self", ".", "noreg", ":", "\n", "            ", "regs", "=", "[", "1e-9", "if", "self", ".", "usepytorch", "else", "1e9", "]", "\n", "", "scores", "=", "[", "]", "\n", "for", "reg", "in", "regs", ":", "\n", "            ", "if", "self", ".", "usepytorch", ":", "\n", "                ", "clf", "=", "multiclassclassifier", ".", "MLP", "(", "self", ".", "classifier_config", ",", "inputdim", "=", "self", ".", "featdim", ",", "\n", "nclasses", "=", "self", ".", "nclasses", ",", "l2reg", "=", "reg", ",", "\n", "seed", "=", "self", ".", "seed", ",", "cudaEfficient", "=", "self", ".", "cudaEfficient", ")", "\n", "\n", "# TODO: Find a hack for reducing nb epoches in SNLI", "\n", "clf", ".", "fit", "(", "self", ".", "X", "[", "'train'", "]", ",", "self", ".", "y", "[", "'train'", "]", ",", "\n", "validation_data", "=", "(", "self", ".", "X", "[", "'valid'", "]", ",", "self", ".", "y", "[", "'valid'", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "clf", "=", "LogisticRegression", "(", "C", "=", "reg", ",", "random_state", "=", "self", ".", "seed", ")", "\n", "clf", ".", "fit", "(", "self", ".", "X", "[", "'train'", "]", ",", "self", ".", "y", "[", "'train'", "]", ")", "\n", "", "scores", ".", "append", "(", "round", "(", "100", "*", "clf", ".", "score", "(", "self", ".", "X", "[", "'valid'", "]", ",", "\n", "self", ".", "y", "[", "'valid'", "]", ")", ",", "2", ")", ")", "\n", "", "logging", ".", "info", "(", "[", "(", "'reg:'", "+", "str", "(", "regs", "[", "idx", "]", ")", ",", "scores", "[", "idx", "]", ")", "\n", "for", "idx", "in", "range", "(", "len", "(", "scores", ")", ")", "]", ")", "\n", "optreg", "=", "regs", "[", "np", ".", "argmax", "(", "scores", ")", "]", "\n", "devaccuracy", "=", "np", ".", "max", "(", "scores", ")", "\n", "logging", ".", "info", "(", "'Validation : best param found is reg = {0} with score \\\n            {1}'", ".", "format", "(", "optreg", ",", "devaccuracy", ")", ")", "\n", "clf", "=", "LogisticRegression", "(", "C", "=", "optreg", ",", "random_state", "=", "self", ".", "seed", ")", "\n", "logging", ".", "info", "(", "'Evaluating...'", ")", "\n", "if", "self", ".", "usepytorch", ":", "\n", "            ", "clf", "=", "multiclassclassifier", ".", "MLP", "(", "self", ".", "classifier_config", ",", "inputdim", "=", "self", ".", "featdim", ",", "\n", "nclasses", "=", "self", ".", "nclasses", ",", "l2reg", "=", "optreg", ",", "\n", "seed", "=", "self", ".", "seed", ",", "cudaEfficient", "=", "self", ".", "cudaEfficient", ")", "\n", "\n", "# TODO: Find a hack for reducing nb epoches in SNLI", "\n", "clf", ".", "fit", "(", "self", ".", "X", "[", "'train'", "]", ",", "self", ".", "y", "[", "'train'", "]", ",", "\n", "validation_data", "=", "(", "self", ".", "X", "[", "'valid'", "]", ",", "self", ".", "y", "[", "'valid'", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "loggint", ".", "info", "(", "\"have to use pytorch with the SplitMultiClassClassifier.\"", ")", "\n", "exit", "(", "-", "1", ")", "\n", "\n", "", "testaccuracy", "=", "clf", ".", "score", "(", "self", ".", "X", "[", "'test'", "]", ",", "self", ".", "y", "[", "'test'", "]", ")", "\n", "testaccuracy", "=", "round", "(", "100", "*", "testaccuracy", ",", "2", ")", "\n", "return", "devaccuracy", ",", "testaccuracy", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.tools.validation.get_classif_name": [[29, 38], ["None"], "function", ["None"], ["def", "get_classif_name", "(", "classifier_config", ",", "usepytorch", ")", ":", "\n", "    ", "if", "not", "usepytorch", ":", "\n", "        ", "modelname", "=", "'sklearn-LogReg'", "\n", "", "else", ":", "\n", "        ", "nhid", "=", "classifier_config", "[", "'nhid'", "]", "\n", "optim", "=", "'adam'", "if", "'optim'", "not", "in", "classifier_config", "else", "classifier_config", "[", "'optim'", "]", "\n", "bs", "=", "64", "if", "'batch_size'", "not", "in", "classifier_config", "else", "classifier_config", "[", "'batch_size'", "]", "\n", "modelname", "=", "'pytorch-MLP-nhid%s-%s-bs%s'", "%", "(", "nhid", ",", "optim", ",", "bs", ")", "\n", "", "return", "modelname", "\n", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.tools.classifier.PyTorchClassifier.__init__": [[26, 38], ["numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "inputdim", ",", "nclasses", ",", "l2reg", "=", "0.", ",", "batch_size", "=", "64", ",", "seed", "=", "1111", ",", "\n", "cudaEfficient", "=", "False", ")", ":", "\n", "# fix seed", "\n", "        ", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "\n", "self", ".", "inputdim", "=", "inputdim", "\n", "self", ".", "nclasses", "=", "nclasses", "\n", "self", ".", "l2reg", "=", "l2reg", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "cudaEfficient", "=", "cudaEfficient", "\n", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.tools.classifier.PyTorchClassifier.prepare_split": [[39, 60], ["torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "numpy.random.permutation", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "len", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "int", "int", "len", "len"], "methods", ["None"], ["", "def", "prepare_split", "(", "self", ",", "X", ",", "y", ",", "validation_data", "=", "None", ",", "validation_split", "=", "None", ")", ":", "\n", "# Preparing validation data", "\n", "        ", "assert", "validation_split", "or", "validation_data", "\n", "if", "validation_data", "is", "not", "None", ":", "\n", "            ", "trainX", ",", "trainy", "=", "X", ",", "y", "\n", "devX", ",", "devy", "=", "validation_data", "\n", "", "else", ":", "\n", "            ", "permutation", "=", "np", ".", "random", ".", "permutation", "(", "len", "(", "X", ")", ")", "\n", "trainidx", "=", "permutation", "[", "int", "(", "validation_split", "*", "len", "(", "X", ")", ")", ":", "]", "\n", "devidx", "=", "permutation", "[", "0", ":", "int", "(", "validation_split", "*", "len", "(", "X", ")", ")", "]", "\n", "trainX", ",", "trainy", "=", "X", "[", "trainidx", "]", ",", "y", "[", "trainidx", "]", "\n", "devX", ",", "devy", "=", "X", "[", "devidx", "]", ",", "y", "[", "devidx", "]", "\n", "\n", "", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "if", "self", ".", "cudaEfficient", "else", "torch", ".", "device", "(", "'cuda'", ")", "\n", "\n", "trainX", "=", "torch", ".", "from_numpy", "(", "trainX", ")", ".", "to", "(", "device", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "trainy", "=", "torch", ".", "from_numpy", "(", "trainy", ")", ".", "to", "(", "device", ",", "dtype", "=", "torch", ".", "int64", ")", "\n", "devX", "=", "torch", ".", "from_numpy", "(", "devX", ")", ".", "to", "(", "device", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "devy", "=", "torch", ".", "from_numpy", "(", "devy", ")", ".", "to", "(", "device", ",", "dtype", "=", "torch", ".", "int64", ")", "\n", "\n", "return", "trainX", ",", "trainy", ",", "devX", ",", "devy", "\n", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.tools.classifier.PyTorchClassifier.fit": [[61, 85], ["classifier.PyTorchClassifier.prepare_split", "classifier.PyTorchClassifier.trainepoch", "classifier.PyTorchClassifier.score", "copy.deepcopy"], "methods", ["home.repos.pwc.inspect_result.ZeweiChu_EntEval.tools.classifier.PyTorchClassifier.prepare_split", "home.repos.pwc.inspect_result.ZeweiChu_EntEval.tools.classifier.PyTorchClassifier.trainepoch", "home.repos.pwc.inspect_result.ZeweiChu_EntEval.tools.classifier.PyTorchClassifier.score"], ["", "def", "fit", "(", "self", ",", "X", ",", "y", ",", "validation_data", "=", "None", ",", "validation_split", "=", "None", ",", "\n", "early_stop", "=", "True", ")", ":", "\n", "        ", "self", ".", "nepoch", "=", "0", "\n", "bestaccuracy", "=", "-", "1", "\n", "stop_train", "=", "False", "\n", "early_stop_count", "=", "0", "\n", "\n", "# Preparing validation data", "\n", "trainX", ",", "trainy", ",", "devX", ",", "devy", "=", "self", ".", "prepare_split", "(", "X", ",", "y", ",", "validation_data", ",", "\n", "validation_split", ")", "\n", "\n", "# Training", "\n", "while", "not", "stop_train", "and", "self", ".", "nepoch", "<=", "self", ".", "max_epoch", ":", "\n", "            ", "self", ".", "trainepoch", "(", "trainX", ",", "trainy", ",", "epoch_size", "=", "self", ".", "epoch_size", ")", "\n", "accuracy", "=", "self", ".", "score", "(", "devX", ",", "devy", ")", "\n", "if", "accuracy", ">", "bestaccuracy", ":", "\n", "                ", "bestaccuracy", "=", "accuracy", "\n", "bestmodel", "=", "copy", ".", "deepcopy", "(", "self", ".", "model", ")", "\n", "", "elif", "early_stop", ":", "\n", "                ", "if", "early_stop_count", ">=", "self", ".", "tenacity", ":", "\n", "                    ", "stop_train", "=", "True", "\n", "", "early_stop_count", "+=", "1", "\n", "", "", "self", ".", "model", "=", "bestmodel", "\n", "return", "bestaccuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.tools.classifier.PyTorchClassifier.trainepoch": [[86, 111], ["classifier.PyTorchClassifier.model.train", "range", "numpy.random.permutation", "range", "len", "len", "torch.from_numpy().long().to", "torch.from_numpy().long().to", "torch.from_numpy().long().to", "torch.from_numpy().long().to", "classifier.PyTorchClassifier.model", "classifier.PyTorchClassifier.loss_fn", "all_costs.append", "classifier.PyTorchClassifier.optimizer.zero_grad", "classifier.PyTorchClassifier.backward", "classifier.PyTorchClassifier.optimizer.step", "Xbatch.cuda.cuda.cuda", "ybatch.cuda.cuda.cuda", "classifier.PyTorchClassifier.data.item", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["None"], ["", "def", "trainepoch", "(", "self", ",", "X", ",", "y", ",", "epoch_size", "=", "1", ")", ":", "\n", "        ", "self", ".", "model", ".", "train", "(", ")", "\n", "for", "_", "in", "range", "(", "self", ".", "nepoch", ",", "self", ".", "nepoch", "+", "epoch_size", ")", ":", "\n", "            ", "permutation", "=", "np", ".", "random", ".", "permutation", "(", "len", "(", "X", ")", ")", "\n", "all_costs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "X", ")", ",", "self", ".", "batch_size", ")", ":", "\n", "# forward", "\n", "                ", "idx", "=", "torch", ".", "from_numpy", "(", "permutation", "[", "i", ":", "i", "+", "self", ".", "batch_size", "]", ")", ".", "long", "(", ")", ".", "to", "(", "X", ".", "device", ")", "\n", "\n", "Xbatch", "=", "X", "[", "idx", "]", "\n", "ybatch", "=", "y", "[", "idx", "]", "\n", "\n", "if", "self", ".", "cudaEfficient", ":", "\n", "                    ", "Xbatch", "=", "Xbatch", ".", "cuda", "(", ")", "\n", "ybatch", "=", "ybatch", ".", "cuda", "(", ")", "\n", "", "output", "=", "self", ".", "model", "(", "Xbatch", ")", "\n", "# loss", "\n", "loss", "=", "self", ".", "loss_fn", "(", "output", ",", "ybatch", ")", "\n", "all_costs", ".", "append", "(", "loss", ".", "data", ".", "item", "(", ")", ")", "\n", "# backward", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "# Update parameters", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "", "", "self", ".", "nepoch", "+=", "epoch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.tools.classifier.PyTorchClassifier.score": [[112, 146], ["classifier.PyTorchClassifier.model.eval", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "range", "numpy.concatenate", "torch.LongTensor().cuda.data.cpu().numpy().reshape", "torch.LongTensor().cuda.data.cpu().numpy().reshape", "sklearn.metrics.confusion_matrix", "print", "print", "numpy.concatenate", "isinstance", "len", "classifier.PyTorchClassifier.model", "pred.long().eq().sum().item", "numpy.concatenate.append", "numpy.concatenate.append", "len", "len", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "Xbatch.cuda.cuda.cuda", "ybatch.cuda.cuda.cuda", "classifier.PyTorchClassifier.data.max", "pred.long().data.cpu().numpy().reshape", "[].numpy().reshape", "torch.LongTensor().cuda.data.cpu().numpy", "torch.LongTensor().cuda.data.cpu().numpy", "range", "pred.long().eq().sum", "len", "pred.long().data.cpu().numpy", "[].numpy", "torch.LongTensor().cuda.data.cpu", "torch.LongTensor().cuda.data.cpu", "pred.long().eq", "ybatch.cuda.cuda.data.long", "pred.long().data.cpu", "pred.long", "torch.softmax().data.cpu", "torch.softmax().data.cpu", "pred.long", "torch.softmax", "torch.softmax"], "methods", ["home.repos.pwc.inspect_result.ZeweiChu_EntEval.enteval.engine.SE.eval"], ["", "def", "score", "(", "self", ",", "devX", ",", "devy", ",", "test", "=", "False", ",", "return_score", "=", "False", ")", ":", "\n", "        ", "self", ".", "model", ".", "eval", "(", ")", "\n", "correct", "=", "0", "\n", "if", "not", "isinstance", "(", "devX", ",", "torch", ".", "cuda", ".", "FloatTensor", ")", "or", "self", ".", "cudaEfficient", ":", "\n", "            ", "devX", "=", "torch", ".", "FloatTensor", "(", "devX", ")", ".", "cuda", "(", ")", "\n", "devy", "=", "torch", ".", "LongTensor", "(", "devy", ")", ".", "cuda", "(", ")", "\n", "\n", "", "all_preds", "=", "[", "]", "\n", "all_logits", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "0", ",", "len", "(", "devX", ")", ",", "self", ".", "batch_size", ")", ":", "\n", "                ", "Xbatch", "=", "devX", "[", "i", ":", "i", "+", "self", ".", "batch_size", "]", "\n", "ybatch", "=", "devy", "[", "i", ":", "i", "+", "self", ".", "batch_size", "]", "\n", "if", "self", ".", "cudaEfficient", ":", "\n", "                    ", "Xbatch", "=", "Xbatch", ".", "cuda", "(", ")", "\n", "ybatch", "=", "ybatch", ".", "cuda", "(", ")", "\n", "", "output", "=", "self", ".", "model", "(", "Xbatch", ")", "\n", "pred", "=", "output", ".", "data", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "correct", "+=", "pred", ".", "long", "(", ")", ".", "eq", "(", "ybatch", ".", "data", ".", "long", "(", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "all_preds", ".", "append", "(", "pred", ".", "long", "(", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "reshape", "(", "-", "1", ")", ")", "\n", "all_logits", ".", "append", "(", "F", ".", "softmax", "(", "output", ",", "-", "1", ")", ".", "data", ".", "cpu", "(", ")", "[", ":", ",", "-", "1", "]", ".", "numpy", "(", ")", ".", "reshape", "(", "-", "1", ")", ")", "\n", "", "accuracy", "=", "1.0", "*", "correct", "/", "len", "(", "devX", ")", "\n", "", "if", "test", ":", "\n", "            ", "all_preds", "=", "np", ".", "concatenate", "(", "all_preds", ",", "0", ")", "\n", "golden_labels", "=", "devy", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "reshape", "(", "-", "1", ")", "\n", "cm", "=", "confusion_matrix", "(", "golden_labels", ",", "all_preds", ")", "\n", "diag", "=", "[", "cm", "[", "i", ",", "i", "]", "for", "i", "in", "range", "(", "len", "(", "cm", ")", ")", "]", "\n", "print", "(", "diag", ")", "\n", "print", "(", "\"number of instances\"", ",", "len", "(", "all_preds", ")", ")", "\n", "", "if", "return_score", ":", "\n", "            ", "all_logits", "=", "np", ".", "concatenate", "(", "all_logits", ",", "0", ")", "\n", "return", "accuracy", ",", "all_logits", "\n", "", "else", ":", "\n", "            ", "return", "accuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.tools.classifier.PyTorchClassifier.predict": [[147, 160], ["classifier.PyTorchClassifier.model.eval", "numpy.array", "numpy.vstack", "isinstance", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "range", "len", "classifier.PyTorchClassifier.model", "numpy.append", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "[].cpu().numpy", "[].cpu", "classifier.PyTorchClassifier.data.max"], "methods", ["home.repos.pwc.inspect_result.ZeweiChu_EntEval.enteval.engine.SE.eval"], ["", "", "def", "predict", "(", "self", ",", "devX", ")", ":", "\n", "        ", "self", ".", "model", ".", "eval", "(", ")", "\n", "if", "not", "isinstance", "(", "devX", ",", "torch", ".", "cuda", ".", "FloatTensor", ")", ":", "\n", "            ", "devX", "=", "torch", ".", "FloatTensor", "(", "devX", ")", ".", "cuda", "(", ")", "\n", "", "yhat", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "0", ",", "len", "(", "devX", ")", ",", "self", ".", "batch_size", ")", ":", "\n", "                ", "Xbatch", "=", "devX", "[", "i", ":", "i", "+", "self", ".", "batch_size", "]", "\n", "output", "=", "self", ".", "model", "(", "Xbatch", ")", "\n", "yhat", "=", "np", ".", "append", "(", "yhat", ",", "\n", "output", ".", "data", ".", "max", "(", "1", ")", "[", "1", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "", "yhat", "=", "np", ".", "vstack", "(", "yhat", ")", "\n", "return", "yhat", "\n", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.tools.classifier.PyTorchClassifier.predict_proba": [[161, 173], ["classifier.PyTorchClassifier.model.eval", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "range", "len", "torch.softmax", "torch.softmax", "classifier.PyTorchClassifier.model().data.cpu().numpy", "numpy.concatenate", "classifier.PyTorchClassifier.model().data.cpu", "classifier.PyTorchClassifier.model"], "methods", ["home.repos.pwc.inspect_result.ZeweiChu_EntEval.enteval.engine.SE.eval"], ["", "def", "predict_proba", "(", "self", ",", "devX", ")", ":", "\n", "        ", "self", ".", "model", ".", "eval", "(", ")", "\n", "probas", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "0", ",", "len", "(", "devX", ")", ",", "self", ".", "batch_size", ")", ":", "\n", "                ", "Xbatch", "=", "devX", "[", "i", ":", "i", "+", "self", ".", "batch_size", "]", "\n", "vals", "=", "F", ".", "softmax", "(", "self", ".", "model", "(", "Xbatch", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "if", "not", "probas", ":", "\n", "                    ", "probas", "=", "vals", "\n", "", "else", ":", "\n", "                    ", "probas", "=", "np", ".", "concatenate", "(", "probas", ",", "vals", ",", "axis", "=", "0", ")", "\n", "", "", "", "return", "probas", "\n", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.tools.classifier.MLP.__init__": [[180, 220], ["classifier.PyTorchClassifier.__init__", "torch.nn.CrossEntropyLoss().cuda", "torch.nn.CrossEntropyLoss().cuda", "enteval.utils.get_optimizer", "optim_fn", "torch.nn.Sequential().cuda", "torch.nn.Sequential().cuda", "torch.nn.Sequential().cuda", "torch.nn.Sequential().cuda", "classifier.MLP.model.parameters", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.ZeweiChu_EntEval.examples.elmo.ELMoTokenCharactersIndexer.__init__", "home.repos.pwc.inspect_result.ZeweiChu_EntEval.enteval.utils.get_optimizer"], ["    ", "def", "__init__", "(", "self", ",", "params", ",", "inputdim", ",", "nclasses", ",", "l2reg", "=", "0.", ",", "batch_size", "=", "64", ",", "\n", "seed", "=", "1111", ",", "cudaEfficient", "=", "False", ")", ":", "\n", "        ", "super", "(", "self", ".", "__class__", ",", "self", ")", ".", "__init__", "(", "inputdim", ",", "nclasses", ",", "l2reg", ",", "\n", "batch_size", ",", "seed", ",", "cudaEfficient", ")", "\n", "\"\"\"\n        PARAMETERS:\n        -nhid:       number of hidden units (0: Logistic Regression)\n        -optim:      optimizer (\"sgd,lr=0.1\", \"adam\", \"rmsprop\" ..)\n        -tenacity:   how many times dev acc does not increase before stopping\n        -epoch_size: each epoch corresponds to epoch_size pass on the train set\n        -max_epoch:  max number of epoches\n        -dropout:    dropout for MLP\n        \"\"\"", "\n", "\n", "self", ".", "nhid", "=", "0", "if", "\"nhid\"", "not", "in", "params", "else", "params", "[", "\"nhid\"", "]", "\n", "self", ".", "optim", "=", "\"adam\"", "if", "\"optim\"", "not", "in", "params", "else", "params", "[", "\"optim\"", "]", "\n", "self", ".", "tenacity", "=", "5", "if", "\"tenacity\"", "not", "in", "params", "else", "params", "[", "\"tenacity\"", "]", "\n", "self", ".", "epoch_size", "=", "4", "if", "\"epoch_size\"", "not", "in", "params", "else", "params", "[", "\"epoch_size\"", "]", "\n", "self", ".", "max_epoch", "=", "200", "if", "\"max_epoch\"", "not", "in", "params", "else", "params", "[", "\"max_epoch\"", "]", "\n", "self", ".", "dropout", "=", "0.", "if", "\"dropout\"", "not", "in", "params", "else", "params", "[", "\"dropout\"", "]", "\n", "self", ".", "batch_size", "=", "64", "if", "\"batch_size\"", "not", "in", "params", "else", "params", "[", "\"batch_size\"", "]", "\n", "\n", "if", "params", "[", "\"nhid\"", "]", "==", "0", ":", "\n", "            ", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "inputdim", ",", "self", ".", "nclasses", ")", ",", "\n", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "inputdim", ",", "params", "[", "\"nhid\"", "]", ")", ",", "\n", "nn", ".", "Dropout", "(", "p", "=", "self", ".", "dropout", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "params", "[", "\"nhid\"", "]", ",", "self", ".", "nclasses", ")", ",", "\n", ")", ".", "cuda", "(", ")", "\n", "\n", "", "self", ".", "loss_fn", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "cuda", "(", ")", "\n", "self", ".", "loss_fn", ".", "size_average", "=", "False", "\n", "\n", "optim_fn", ",", "optim_params", "=", "utils", ".", "get_optimizer", "(", "self", ".", "optim", ")", "\n", "self", ".", "optimizer", "=", "optim_fn", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "**", "optim_params", ")", "\n", "self", ".", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'weight_decay'", "]", "=", "self", ".", "l2reg", "\n", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.tools.classifier.MultiClassMLP.__init__": [[227, 267], ["classifier.PyTorchClassifier.__init__", "torch.nn.CrossEntropyLoss().cuda", "torch.nn.CrossEntropyLoss().cuda", "enteval.utils.get_optimizer", "optim_fn", "torch.nn.Sequential().cuda", "torch.nn.Sequential().cuda", "torch.nn.Sequential().cuda", "torch.nn.Sequential().cuda", "classifier.MultiClassMLP.model.parameters", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.ZeweiChu_EntEval.examples.elmo.ELMoTokenCharactersIndexer.__init__", "home.repos.pwc.inspect_result.ZeweiChu_EntEval.enteval.utils.get_optimizer"], ["    ", "def", "__init__", "(", "self", ",", "params", ",", "inputdim", ",", "nclasses", ",", "l2reg", "=", "0.", ",", "batch_size", "=", "64", ",", "\n", "seed", "=", "1111", ",", "cudaEfficient", "=", "False", ")", ":", "\n", "        ", "super", "(", "self", ".", "__class__", ",", "self", ")", ".", "__init__", "(", "inputdim", ",", "nclasses", ",", "l2reg", ",", "\n", "batch_size", ",", "seed", ",", "cudaEfficient", ")", "\n", "\"\"\"\n        PARAMETERS:\n        -nhid:       number of hidden units (0: Logistic Regression)\n        -optim:      optimizer (\"sgd,lr=0.1\", \"adam\", \"rmsprop\" ..)\n        -tenacity:   how many times dev acc does not increase before stopping\n        -epoch_size: each epoch corresponds to epoch_size pass on the train set\n        -max_epoch:  max number of epoches\n        -dropout:    dropout for MLP\n        \"\"\"", "\n", "\n", "self", ".", "nhid", "=", "0", "if", "\"nhid\"", "not", "in", "params", "else", "params", "[", "\"nhid\"", "]", "\n", "self", ".", "optim", "=", "\"adam\"", "if", "\"optim\"", "not", "in", "params", "else", "params", "[", "\"optim\"", "]", "\n", "self", ".", "tenacity", "=", "5", "if", "\"tenacity\"", "not", "in", "params", "else", "params", "[", "\"tenacity\"", "]", "\n", "self", ".", "epoch_size", "=", "4", "if", "\"epoch_size\"", "not", "in", "params", "else", "params", "[", "\"epoch_size\"", "]", "\n", "self", ".", "max_epoch", "=", "200", "if", "\"max_epoch\"", "not", "in", "params", "else", "params", "[", "\"max_epoch\"", "]", "\n", "self", ".", "dropout", "=", "0.", "if", "\"dropout\"", "not", "in", "params", "else", "params", "[", "\"dropout\"", "]", "\n", "self", ".", "batch_size", "=", "64", "if", "\"batch_size\"", "not", "in", "params", "else", "params", "[", "\"batch_size\"", "]", "\n", "\n", "if", "params", "[", "\"nhid\"", "]", "==", "0", ":", "\n", "            ", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "inputdim", ",", "self", ".", "nclasses", ")", ",", "\n", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "inputdim", ",", "params", "[", "\"nhid\"", "]", ")", ",", "\n", "nn", ".", "Dropout", "(", "p", "=", "self", ".", "dropout", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "params", "[", "\"nhid\"", "]", ",", "self", ".", "nclasses", ")", ",", "\n", ")", ".", "cuda", "(", ")", "\n", "\n", "", "self", ".", "loss_fn", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "cuda", "(", ")", "\n", "self", ".", "loss_fn", ".", "size_average", "=", "False", "\n", "\n", "optim_fn", ",", "optim_params", "=", "utils", ".", "get_optimizer", "(", "self", ".", "optim", ")", "\n", "self", ".", "optimizer", "=", "optim_fn", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "**", "optim_params", ")", "\n", "self", ".", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'weight_decay'", "]", "=", "self", ".", "l2reg", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.examples.elmo.Elmo.__init__": [[87, 123], ["super().__init__", "logger.info", "torch.nn.modules.Dropout", "range", "elmo._ElmoBiLm", "allennlp.modules.scalar_mix.ScalarMix", "elmo.Elmo.add_module", "elmo.Elmo._scalar_mixes.append", "allennlp.common.checks.ConfigurationError"], "methods", ["home.repos.pwc.inspect_result.ZeweiChu_EntEval.examples.elmo.ELMoTokenCharactersIndexer.__init__"], ["def", "__init__", "(", "self", ",", "\n", "options_file", ":", "str", ",", "\n", "weight_file", ":", "str", ",", "\n", "num_output_representations", ":", "int", ",", "\n", "requires_grad", ":", "bool", "=", "False", ",", "\n", "do_layer_norm", ":", "bool", "=", "False", ",", "\n", "dropout", ":", "float", "=", "0.5", ",", "\n", "vocab_to_cache", ":", "List", "[", "str", "]", "=", "None", ",", "\n", "keep_sentence_boundaries", ":", "bool", "=", "False", ",", "\n", "scalar_mix_parameters", ":", "List", "[", "float", "]", "=", "None", ",", "\n", "module", ":", "torch", ".", "nn", ".", "Module", "=", "None", ")", "->", "None", ":", "\n", "        ", "super", "(", "Elmo", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "logger", ".", "info", "(", "\"Initializing ELMo\"", ")", "\n", "if", "module", "is", "not", "None", ":", "\n", "            ", "if", "options_file", "is", "not", "None", "or", "weight_file", "is", "not", "None", ":", "\n", "                ", "raise", "ConfigurationError", "(", "\n", "\"Don't provide options_file or weight_file with module\"", ")", "\n", "", "self", ".", "_elmo_lstm", "=", "module", "\n", "", "else", ":", "\n", "            ", "self", ".", "_elmo_lstm", "=", "_ElmoBiLm", "(", "options_file", ",", "\n", "weight_file", ",", "\n", "requires_grad", "=", "requires_grad", ",", "\n", "vocab_to_cache", "=", "vocab_to_cache", ")", "\n", "", "self", ".", "_has_cached_vocab", "=", "vocab_to_cache", "is", "not", "None", "\n", "self", ".", "_keep_sentence_boundaries", "=", "keep_sentence_boundaries", "\n", "self", ".", "_dropout", "=", "Dropout", "(", "p", "=", "dropout", ")", "\n", "self", ".", "_scalar_mixes", ":", "Any", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "num_output_representations", ")", ":", "\n", "            ", "scalar_mix", "=", "ScalarMix", "(", "\n", "self", ".", "_elmo_lstm", ".", "num_layers", ",", "\n", "do_layer_norm", "=", "do_layer_norm", ",", "\n", "initial_scalar_parameters", "=", "scalar_mix_parameters", ",", "\n", "trainable", "=", "scalar_mix_parameters", "is", "None", ")", "\n", "self", ".", "add_module", "(", "'scalar_mix_{}'", ".", "format", "(", "k", ")", ",", "scalar_mix", ")", "\n", "self", ".", "_scalar_mixes", ".", "append", "(", "scalar_mix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.examples.elmo.Elmo.get_output_dim": [[124, 126], ["elmo.Elmo._elmo_lstm.get_output_dim"], "methods", ["home.repos.pwc.inspect_result.ZeweiChu_EntEval.examples.elmo._ElmoBiLm.get_output_dim"], ["", "", "def", "get_output_dim", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_elmo_lstm", ".", "get_output_dim", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.examples.elmo.Elmo.forward": [[127, 203], ["inputs.size", "elmo.Elmo._elmo_lstm", "range", "len", "inputs.view", "word_inputs.size", "len", "getattr", "getattr.", "representations.append", "processed_mask.view", "word_inputs.view", "allennlp.nn.util.remove_sentence_boundaries", "elmo.Elmo._dropout", "len", "representation.view", "len", "processed_mask.view", "len", "logger.warning", "representation.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "# pylint: disable=arguments-differ", "\n", "inputs", ":", "torch", ".", "Tensor", ",", "\n", "if_context", ":", "bool", ",", "\n", "word_inputs", ":", "torch", ".", "Tensor", "=", "None", ")", "->", "Dict", "[", "str", ",", "Union", "[", "torch", ".", "Tensor", ",", "List", "[", "torch", ".", "Tensor", "]", "]", "]", ":", "\n", "        ", "\"\"\"\n        Parameters\n        ----------\n        inputs: ``torch.Tensor``, required.\n        Shape ``(batch_size, timesteps, 50)`` of character ids representing the current batch.\n        word_inputs : ``torch.Tensor``, required.\n            If you passed a cached vocab, you can in addition pass a tensor of shape\n            ``(batch_size, timesteps)``, which represent word ids which have been pre-cached.\n\n        Returns\n        -------\n        Dict with keys:\n        ``'elmo_representations'``: ``List[torch.Tensor]``\n            A ``num_output_representations`` list of ELMo representations for the input sequence.\n            Each representation is shape ``(batch_size, timesteps, embedding_dim)``\n        ``'mask'``:  ``torch.Tensor``\n            Shape ``(batch_size, timesteps)`` long tensor with sequence mask.\n        \"\"\"", "\n", "# reshape the input if needed", "\n", "original_shape", "=", "inputs", ".", "size", "(", ")", "\n", "if", "len", "(", "original_shape", ")", ">", "3", ":", "\n", "            ", "timesteps", ",", "num_characters", "=", "original_shape", "[", "-", "2", ":", "]", "\n", "reshaped_inputs", "=", "inputs", ".", "view", "(", "-", "1", ",", "timesteps", ",", "num_characters", ")", "\n", "", "else", ":", "\n", "            ", "reshaped_inputs", "=", "inputs", "\n", "\n", "", "if", "word_inputs", "is", "not", "None", ":", "\n", "            ", "original_word_size", "=", "word_inputs", ".", "size", "(", ")", "\n", "if", "self", ".", "_has_cached_vocab", "and", "len", "(", "original_word_size", ")", ">", "2", ":", "\n", "                ", "reshaped_word_inputs", "=", "word_inputs", ".", "view", "(", "-", "1", ",", "original_word_size", "[", "-", "1", "]", ")", "\n", "", "elif", "not", "self", ".", "_has_cached_vocab", ":", "\n", "                ", "logger", ".", "warning", "(", "\"Word inputs were passed to ELMo but it does not have a cached vocab.\"", ")", "\n", "reshaped_word_inputs", "=", "None", "\n", "", "else", ":", "\n", "                ", "reshaped_word_inputs", "=", "word_inputs", "\n", "", "", "else", ":", "\n", "            ", "reshaped_word_inputs", "=", "word_inputs", "\n", "\n", "# run the biLM", "\n", "", "bilm_output", "=", "self", ".", "_elmo_lstm", "(", "reshaped_inputs", ",", "if_context", ",", "reshaped_word_inputs", ")", "\n", "layer_activations", "=", "bilm_output", "[", "'activations'", "]", "\n", "mask_with_bos_eos", "=", "bilm_output", "[", "'mask'", "]", "\n", "\n", "# compute the elmo representations", "\n", "representations", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "_scalar_mixes", ")", ")", ":", "\n", "            ", "scalar_mix", "=", "getattr", "(", "self", ",", "'scalar_mix_{}'", ".", "format", "(", "i", ")", ")", "\n", "representation_with_bos_eos", "=", "scalar_mix", "(", "layer_activations", ",", "mask_with_bos_eos", ")", "\n", "if", "self", ".", "_keep_sentence_boundaries", ":", "\n", "                ", "processed_representation", "=", "representation_with_bos_eos", "\n", "processed_mask", "=", "mask_with_bos_eos", "\n", "", "else", ":", "\n", "                ", "representation_without_bos_eos", ",", "mask_without_bos_eos", "=", "remove_sentence_boundaries", "(", "\n", "representation_with_bos_eos", ",", "mask_with_bos_eos", ")", "\n", "processed_representation", "=", "representation_without_bos_eos", "\n", "processed_mask", "=", "mask_without_bos_eos", "\n", "", "representations", ".", "append", "(", "self", ".", "_dropout", "(", "processed_representation", ")", ")", "\n", "\n", "# reshape if necessary", "\n", "", "if", "word_inputs", "is", "not", "None", "and", "len", "(", "original_word_size", ")", ">", "2", ":", "\n", "            ", "mask", "=", "processed_mask", ".", "view", "(", "original_word_size", ")", "\n", "elmo_representations", "=", "[", "representation", ".", "view", "(", "original_word_size", "+", "(", "-", "1", ",", ")", ")", "\n", "for", "representation", "in", "representations", "]", "\n", "", "elif", "len", "(", "original_shape", ")", ">", "3", ":", "\n", "            ", "mask", "=", "processed_mask", ".", "view", "(", "original_shape", "[", ":", "-", "1", "]", ")", "\n", "elmo_representations", "=", "[", "representation", ".", "view", "(", "original_shape", "[", ":", "-", "1", "]", "+", "(", "-", "1", ",", ")", ")", "\n", "for", "representation", "in", "representations", "]", "\n", "", "else", ":", "\n", "            ", "mask", "=", "processed_mask", "\n", "elmo_representations", "=", "representations", "\n", "\n", "", "return", "{", "'elmo_representations'", ":", "elmo_representations", ",", "'mask'", ":", "mask", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.examples.elmo.Elmo.from_params": [[205, 229], ["params.add_file_to_archive", "params.add_file_to_archive", "params.pop", "params.pop", "params.pop", "params.pop", "params.pop_bool", "params.pop_bool", "params.pop_float", "params.pop", "params.assert_empty", "cls"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "from_params", "(", "cls", ",", "params", ":", "Params", ")", "->", "'Elmo'", ":", "\n", "# Add files to archive", "\n", "        ", "params", ".", "add_file_to_archive", "(", "'options_file'", ")", "\n", "params", ".", "add_file_to_archive", "(", "'weight_file'", ")", "\n", "\n", "options_file", "=", "params", ".", "pop", "(", "'options_file'", ")", "\n", "weight_file", "=", "params", ".", "pop", "(", "'weight_file'", ")", "\n", "requires_grad", "=", "params", ".", "pop", "(", "'requires_grad'", ",", "False", ")", "\n", "num_output_representations", "=", "params", ".", "pop", "(", "'num_output_representations'", ")", "\n", "do_layer_norm", "=", "params", ".", "pop_bool", "(", "'do_layer_norm'", ",", "False", ")", "\n", "keep_sentence_boundaries", "=", "params", ".", "pop_bool", "(", "'keep_sentence_boundaries'", ",", "False", ")", "\n", "dropout", "=", "params", ".", "pop_float", "(", "'dropout'", ",", "0.5", ")", "\n", "scalar_mix_parameters", "=", "params", ".", "pop", "(", "'scalar_mix_parameters'", ",", "None", ")", "\n", "params", ".", "assert_empty", "(", "cls", ".", "__name__", ")", "\n", "\n", "return", "cls", "(", "options_file", "=", "options_file", ",", "\n", "weight_file", "=", "weight_file", ",", "\n", "num_output_representations", "=", "num_output_representations", ",", "\n", "requires_grad", "=", "requires_grad", ",", "\n", "do_layer_norm", "=", "do_layer_norm", ",", "\n", "keep_sentence_boundaries", "=", "keep_sentence_boundaries", ",", "\n", "dropout", "=", "dropout", ",", "\n", "scalar_mix_parameters", "=", "scalar_mix_parameters", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.examples.elmo._ElmoCharacterEncoder.__init__": [[298, 321], ["super().__init__", "elmo._ElmoCharacterEncoder._load_weights", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "open", "json.load", "allennlp.common.file_utils.cached_path", "numpy.array", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.ZeweiChu_EntEval.examples.elmo.ELMoTokenCharactersIndexer.__init__", "home.repos.pwc.inspect_result.ZeweiChu_EntEval.examples.elmo._ElmoCharacterEncoder._load_weights"], ["def", "__init__", "(", "self", ",", "\n", "options_file", ":", "str", ",", "\n", "weight_file", ":", "str", ",", "\n", "requires_grad", ":", "bool", "=", "False", ")", "->", "None", ":", "\n", "        ", "super", "(", "_ElmoCharacterEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "with", "open", "(", "cached_path", "(", "options_file", ")", ",", "'r'", ")", "as", "fin", ":", "\n", "            ", "self", ".", "_options", "=", "json", ".", "load", "(", "fin", ")", "\n", "", "self", ".", "_weight_file", "=", "weight_file", "\n", "\n", "self", ".", "output_dim", "=", "self", ".", "_options", "[", "'lstm'", "]", "[", "'projection_dim'", "]", "\n", "self", ".", "requires_grad", "=", "requires_grad", "\n", "\n", "self", ".", "_load_weights", "(", ")", "\n", "\n", "# Cache the arrays for use in forward -- +1 due to masking.", "\n", "self", ".", "_beginning_of_description_characters", "=", "torch", ".", "from_numpy", "(", "\n", "numpy", ".", "array", "(", "ELMoCharacterMapper", ".", "beginning_of_description_characters", ")", "+", "1", "\n", ")", "\n", "self", ".", "_beginning_of_context_characters", "=", "torch", ".", "from_numpy", "(", "\n", "numpy", ".", "array", "(", "ELMoCharacterMapper", ".", "beginning_of_context_characters", ")", "+", "1", "\n", ")", "\n", "self", ".", "_end_of_sentence_characters", "=", "torch", ".", "from_numpy", "(", "\n", "numpy", ".", "array", "(", "ELMoCharacterMapper", ".", "end_of_sentence_characters", ")", "+", "1", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.examples.elmo._ElmoCharacterEncoder.get_output_dim": [[323, 325], ["None"], "methods", ["None"], ["", "def", "get_output_dim", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "output_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.examples.elmo._ElmoCharacterEncoder.forward": [[326, 398], ["allennlp.nn.util.add_sentence_boundary_token_ids", "torch.nn.functional.embedding", "torch.transpose", "range", "torch.cat", "elmo._ElmoCharacterEncoder._highways", "elmo._ElmoCharacterEncoder._projection", "character_ids_with_bos_eos.size", "character_ids_with_bos_eos.view", "len", "getattr", "getattr.", "torch.max", "activation", "convs.append", "elmo._ElmoCharacterEncoder.view", "allennlp.common.checks.ConfigurationError"], "methods", ["None"], ["", "@", "overrides", "\n", "def", "forward", "(", "self", ",", "inputs", ":", "torch", ".", "Tensor", ",", "if_context", ":", "bool", ")", "->", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", ":", "# pylint: disable=arguments-differ", "\n", "        ", "\"\"\"\n        Compute context insensitive token embeddings for ELMo representations.\n\n        Parameters\n        ----------\n        inputs: ``torch.Tensor``\n            Shape ``(batch_size, sequence_length, 50)`` of character ids representing the\n            current batch.\n\n        Returns\n        -------\n        Dict with keys:\n        ``'token_embedding'``: ``torch.Tensor``\n            Shape ``(batch_size, sequence_length + 2, embedding_dim)`` tensor with context\n            insensitive token representations.\n        ``'mask'``:  ``torch.Tensor``\n            Shape ``(batch_size, sequence_length + 2)`` long tensor with sequence mask.\n        \"\"\"", "\n", "# Add BOS/EOS", "\n", "mask", "=", "(", "(", "inputs", ">", "0", ")", ".", "long", "(", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", ">", "0", ")", ".", "long", "(", ")", "\n", "character_ids_with_bos_eos", ",", "mask_with_bos_eos", "=", "add_sentence_boundary_token_ids", "(", "\n", "inputs", ",", "\n", "mask", ",", "\n", "self", ".", "_beginning_of_context_characters", "if", "if_context", "else", "self", ".", "_beginning_of_description_characters", ",", "\n", "self", ".", "_end_of_sentence_characters", "\n", ")", "\n", "\n", "# the character id embedding", "\n", "max_chars_per_token", "=", "self", ".", "_options", "[", "'char_cnn'", "]", "[", "'max_characters_per_token'", "]", "\n", "# (batch_size * sequence_length, max_chars_per_token, embed_dim)", "\n", "character_embedding", "=", "torch", ".", "nn", ".", "functional", ".", "embedding", "(", "\n", "character_ids_with_bos_eos", ".", "view", "(", "-", "1", ",", "max_chars_per_token", ")", ",", "\n", "self", ".", "_char_embedding_weights", "\n", ")", "\n", "\n", "# run convolutions", "\n", "cnn_options", "=", "self", ".", "_options", "[", "'char_cnn'", "]", "\n", "if", "cnn_options", "[", "'activation'", "]", "==", "'tanh'", ":", "\n", "            ", "activation", "=", "torch", ".", "tanh", "\n", "", "elif", "cnn_options", "[", "'activation'", "]", "==", "'relu'", ":", "\n", "            ", "activation", "=", "torch", ".", "nn", ".", "functional", ".", "relu", "\n", "", "else", ":", "\n", "            ", "raise", "ConfigurationError", "(", "\"Unknown activation\"", ")", "\n", "\n", "# (batch_size * sequence_length, embed_dim, max_chars_per_token)", "\n", "", "character_embedding", "=", "torch", ".", "transpose", "(", "character_embedding", ",", "1", ",", "2", ")", "\n", "convs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "_convolutions", ")", ")", ":", "\n", "            ", "conv", "=", "getattr", "(", "self", ",", "'char_conv_{}'", ".", "format", "(", "i", ")", ")", "\n", "convolved", "=", "conv", "(", "character_embedding", ")", "\n", "# (batch_size * sequence_length, n_filters for this width)", "\n", "convolved", ",", "_", "=", "torch", ".", "max", "(", "convolved", ",", "dim", "=", "-", "1", ")", "\n", "convolved", "=", "activation", "(", "convolved", ")", "\n", "convs", ".", "append", "(", "convolved", ")", "\n", "\n", "# (batch_size * sequence_length, n_filters)", "\n", "", "token_embedding", "=", "torch", ".", "cat", "(", "convs", ",", "dim", "=", "-", "1", ")", "\n", "\n", "# apply the highway layers (batch_size * sequence_length, n_filters)", "\n", "token_embedding", "=", "self", ".", "_highways", "(", "token_embedding", ")", "\n", "\n", "# final projection  (batch_size * sequence_length, embedding_dim)", "\n", "token_embedding", "=", "self", ".", "_projection", "(", "token_embedding", ")", "\n", "\n", "# reshape to (batch_size, sequence_length, embedding_dim)", "\n", "batch_size", ",", "sequence_length", ",", "_", "=", "character_ids_with_bos_eos", ".", "size", "(", ")", "\n", "\n", "return", "{", "\n", "'mask'", ":", "mask_with_bos_eos", ",", "\n", "'token_embedding'", ":", "token_embedding", ".", "view", "(", "batch_size", ",", "sequence_length", ",", "-", "1", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.examples.elmo._ElmoCharacterEncoder._load_weights": [[400, 405], ["elmo._ElmoCharacterEncoder._load_char_embedding", "elmo._ElmoCharacterEncoder._load_cnn_weights", "elmo._ElmoCharacterEncoder._load_highway", "elmo._ElmoCharacterEncoder._load_projection"], "methods", ["home.repos.pwc.inspect_result.ZeweiChu_EntEval.examples.elmo._ElmoCharacterEncoder._load_char_embedding", "home.repos.pwc.inspect_result.ZeweiChu_EntEval.examples.elmo._ElmoCharacterEncoder._load_cnn_weights", "home.repos.pwc.inspect_result.ZeweiChu_EntEval.examples.elmo._ElmoCharacterEncoder._load_highway", "home.repos.pwc.inspect_result.ZeweiChu_EntEval.examples.elmo._ElmoCharacterEncoder._load_projection"], ["", "def", "_load_weights", "(", "self", ")", ":", "\n", "        ", "self", ".", "_load_char_embedding", "(", ")", "\n", "self", ".", "_load_cnn_weights", "(", ")", "\n", "self", ".", "_load_highway", "(", ")", "\n", "self", ".", "_load_projection", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.examples.elmo._ElmoCharacterEncoder._load_char_embedding": [[406, 418], ["numpy.zeros", "torch.nn.Parameter", "h5py.File", "torch.FloatTensor", "allennlp.common.file_utils.cached_path"], "methods", ["None"], ["", "def", "_load_char_embedding", "(", "self", ")", ":", "\n", "        ", "with", "h5py", ".", "File", "(", "cached_path", "(", "self", ".", "_weight_file", ")", ",", "'r'", ")", "as", "fin", ":", "\n", "            ", "char_embed_weights", "=", "fin", "[", "'char_embed'", "]", "[", "...", "]", "\n", "\n", "", "weights", "=", "numpy", ".", "zeros", "(", "\n", "(", "char_embed_weights", ".", "shape", "[", "0", "]", "+", "1", ",", "char_embed_weights", ".", "shape", "[", "1", "]", ")", ",", "\n", "dtype", "=", "'float32'", "\n", ")", "\n", "weights", "[", "1", ":", ",", ":", "]", "=", "char_embed_weights", "\n", "\n", "self", ".", "_char_embedding_weights", "=", "torch", ".", "nn", ".", "Parameter", "(", "\n", "torch", ".", "FloatTensor", "(", "weights", ")", ",", "requires_grad", "=", "self", ".", "requires_grad", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.examples.elmo._ElmoCharacterEncoder._load_cnn_weights": [[420, 451], ["enumerate", "torch.nn.Conv1d", "numpy.transpose", "torch.nn.Conv1d.weight.data.copy_", "torch.nn.Conv1d.bias.data.copy_", "convolutions.append", "elmo._ElmoCharacterEncoder.add_module", "h5py.File", "weight.squeeze", "tuple", "ValueError", "torch.FloatTensor", "torch.FloatTensor", "allennlp.common.file_utils.cached_path"], "methods", ["None"], ["", "def", "_load_cnn_weights", "(", "self", ")", ":", "\n", "        ", "cnn_options", "=", "self", ".", "_options", "[", "'char_cnn'", "]", "\n", "filters", "=", "cnn_options", "[", "'filters'", "]", "\n", "char_embed_dim", "=", "cnn_options", "[", "'embedding'", "]", "[", "'dim'", "]", "\n", "\n", "convolutions", "=", "[", "]", "\n", "for", "i", ",", "(", "width", ",", "num", ")", "in", "enumerate", "(", "filters", ")", ":", "\n", "            ", "conv", "=", "torch", ".", "nn", ".", "Conv1d", "(", "\n", "in_channels", "=", "char_embed_dim", ",", "\n", "out_channels", "=", "num", ",", "\n", "kernel_size", "=", "width", ",", "\n", "bias", "=", "True", "\n", ")", "\n", "# load the weights", "\n", "with", "h5py", ".", "File", "(", "cached_path", "(", "self", ".", "_weight_file", ")", ",", "'r'", ")", "as", "fin", ":", "\n", "                ", "weight", "=", "fin", "[", "'CNN'", "]", "[", "'W_cnn_{}'", ".", "format", "(", "i", ")", "]", "[", "...", "]", "\n", "bias", "=", "fin", "[", "'CNN'", "]", "[", "'b_cnn_{}'", ".", "format", "(", "i", ")", "]", "[", "...", "]", "\n", "\n", "", "w_reshaped", "=", "numpy", ".", "transpose", "(", "weight", ".", "squeeze", "(", "axis", "=", "0", ")", ",", "axes", "=", "(", "2", ",", "1", ",", "0", ")", ")", "\n", "if", "w_reshaped", ".", "shape", "!=", "tuple", "(", "conv", ".", "weight", ".", "data", ".", "shape", ")", ":", "\n", "                ", "raise", "ValueError", "(", "\"Invalid weight file\"", ")", "\n", "", "conv", ".", "weight", ".", "data", ".", "copy_", "(", "torch", ".", "FloatTensor", "(", "w_reshaped", ")", ")", "\n", "conv", ".", "bias", ".", "data", ".", "copy_", "(", "torch", ".", "FloatTensor", "(", "bias", ")", ")", "\n", "\n", "conv", ".", "weight", ".", "requires_grad", "=", "self", ".", "requires_grad", "\n", "conv", ".", "bias", ".", "requires_grad", "=", "self", ".", "requires_grad", "\n", "\n", "convolutions", ".", "append", "(", "conv", ")", "\n", "self", ".", "add_module", "(", "'char_conv_{}'", ".", "format", "(", "i", ")", ",", "conv", ")", "\n", "\n", "", "self", ".", "_convolutions", "=", "convolutions", "\n", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.examples.elmo._ElmoCharacterEncoder._load_highway": [[452, 480], ["sum", "allennlp.modules.highway.Highway", "range", "h5py.File", "numpy.transpose", "numpy.concatenate", "elmo._ElmoCharacterEncoder._highways._layers[].weight.data.copy_", "numpy.concatenate", "elmo._ElmoCharacterEncoder._highways._layers[].bias.data.copy_", "allennlp.common.file_utils.cached_path", "numpy.transpose", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["None"], ["", "def", "_load_highway", "(", "self", ")", ":", "\n", "# pylint: disable=protected-access", "\n", "# the highway layers have same dimensionality as the number of cnn filters", "\n", "        ", "cnn_options", "=", "self", ".", "_options", "[", "'char_cnn'", "]", "\n", "filters", "=", "cnn_options", "[", "'filters'", "]", "\n", "n_filters", "=", "sum", "(", "f", "[", "1", "]", "for", "f", "in", "filters", ")", "\n", "n_highway", "=", "cnn_options", "[", "'n_highway'", "]", "\n", "\n", "# create the layers, and load the weights", "\n", "self", ".", "_highways", "=", "Highway", "(", "n_filters", ",", "n_highway", ",", "activation", "=", "torch", ".", "nn", ".", "functional", ".", "relu", ")", "\n", "for", "k", "in", "range", "(", "n_highway", ")", ":", "\n", "# The AllenNLP highway is one matrix multplication with concatenation of", "\n", "# transform and carry weights.", "\n", "            ", "with", "h5py", ".", "File", "(", "cached_path", "(", "self", ".", "_weight_file", ")", ",", "'r'", ")", "as", "fin", ":", "\n", "# The weights are transposed due to multiplication order assumptions in tf", "\n", "# vs pytorch (tf.matmul(X, W) vs pytorch.matmul(W, X))", "\n", "                ", "w_transform", "=", "numpy", ".", "transpose", "(", "fin", "[", "'CNN_high_{}'", ".", "format", "(", "k", ")", "]", "[", "'W_transform'", "]", "[", "...", "]", ")", "\n", "# -1.0 since AllenNLP is g * x + (1 - g) * f(x) but tf is (1 - g) * x + g * f(x)", "\n", "w_carry", "=", "-", "1.0", "*", "numpy", ".", "transpose", "(", "fin", "[", "'CNN_high_{}'", ".", "format", "(", "k", ")", "]", "[", "'W_carry'", "]", "[", "...", "]", ")", "\n", "weight", "=", "numpy", ".", "concatenate", "(", "[", "w_transform", ",", "w_carry", "]", ",", "axis", "=", "0", ")", "\n", "self", ".", "_highways", ".", "_layers", "[", "k", "]", ".", "weight", ".", "data", ".", "copy_", "(", "torch", ".", "FloatTensor", "(", "weight", ")", ")", "\n", "self", ".", "_highways", ".", "_layers", "[", "k", "]", ".", "weight", ".", "requires_grad", "=", "self", ".", "requires_grad", "\n", "\n", "b_transform", "=", "fin", "[", "'CNN_high_{}'", ".", "format", "(", "k", ")", "]", "[", "'b_transform'", "]", "[", "...", "]", "\n", "b_carry", "=", "-", "1.0", "*", "fin", "[", "'CNN_high_{}'", ".", "format", "(", "k", ")", "]", "[", "'b_carry'", "]", "[", "...", "]", "\n", "bias", "=", "numpy", ".", "concatenate", "(", "[", "b_transform", ",", "b_carry", "]", ",", "axis", "=", "0", ")", "\n", "self", ".", "_highways", ".", "_layers", "[", "k", "]", ".", "bias", ".", "data", ".", "copy_", "(", "torch", ".", "FloatTensor", "(", "bias", ")", ")", "\n", "self", ".", "_highways", ".", "_layers", "[", "k", "]", ".", "bias", ".", "requires_grad", "=", "self", ".", "requires_grad", "\n", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.examples.elmo._ElmoCharacterEncoder._load_projection": [[481, 495], ["sum", "torch.nn.Linear", "h5py.File", "elmo._ElmoCharacterEncoder._projection.weight.data.copy_", "elmo._ElmoCharacterEncoder._projection.bias.data.copy_", "allennlp.common.file_utils.cached_path", "torch.FloatTensor", "torch.FloatTensor", "numpy.transpose"], "methods", ["None"], ["", "", "", "def", "_load_projection", "(", "self", ")", ":", "\n", "        ", "cnn_options", "=", "self", ".", "_options", "[", "'char_cnn'", "]", "\n", "filters", "=", "cnn_options", "[", "'filters'", "]", "\n", "n_filters", "=", "sum", "(", "f", "[", "1", "]", "for", "f", "in", "filters", ")", "\n", "\n", "self", ".", "_projection", "=", "torch", ".", "nn", ".", "Linear", "(", "n_filters", ",", "self", ".", "output_dim", ",", "bias", "=", "True", ")", "\n", "with", "h5py", ".", "File", "(", "cached_path", "(", "self", ".", "_weight_file", ")", ",", "'r'", ")", "as", "fin", ":", "\n", "            ", "weight", "=", "fin", "[", "'CNN_proj'", "]", "[", "'W_proj'", "]", "[", "...", "]", "\n", "bias", "=", "fin", "[", "'CNN_proj'", "]", "[", "'b_proj'", "]", "[", "...", "]", "\n", "self", ".", "_projection", ".", "weight", ".", "data", ".", "copy_", "(", "torch", ".", "FloatTensor", "(", "numpy", ".", "transpose", "(", "weight", ")", ")", ")", "\n", "self", ".", "_projection", ".", "bias", ".", "data", ".", "copy_", "(", "torch", ".", "FloatTensor", "(", "bias", ")", ")", "\n", "\n", "self", ".", "_projection", ".", "weight", ".", "requires_grad", "=", "self", ".", "requires_grad", "\n", "self", ".", "_projection", ".", "bias", ".", "requires_grad", "=", "self", ".", "requires_grad", "\n", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.examples.elmo._ElmoBiLm.__init__": [[520, 561], ["super().__init__", "elmo._ElmoCharacterEncoder", "allennlp.modules.elmo_lstm.ElmoLstm", "elmo._ElmoBiLm._elmo_lstm.load_weights", "logging.warning", "logging.info", "elmo._ElmoBiLm.create_cached_cnn_embeddings", "open", "json.load", "options[].get", "allennlp.common.checks.ConfigurationError", "allennlp.common.file_utils.cached_path"], "methods", ["home.repos.pwc.inspect_result.ZeweiChu_EntEval.examples.elmo.ELMoTokenCharactersIndexer.__init__", "home.repos.pwc.inspect_result.ZeweiChu_EntEval.examples.elmo._ElmoBiLm.create_cached_cnn_embeddings"], ["def", "__init__", "(", "self", ",", "\n", "options_file", ":", "str", ",", "\n", "weight_file", ":", "str", ",", "\n", "requires_grad", ":", "bool", "=", "False", ",", "\n", "vocab_to_cache", ":", "List", "[", "str", "]", "=", "None", ")", "->", "None", ":", "\n", "        ", "super", "(", "_ElmoBiLm", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "_token_embedder", "=", "_ElmoCharacterEncoder", "(", "\n", "options_file", ",", "weight_file", ",", "requires_grad", "=", "requires_grad", ")", "\n", "\n", "self", ".", "_requires_grad", "=", "requires_grad", "\n", "if", "requires_grad", "and", "vocab_to_cache", ":", "\n", "            ", "logging", ".", "warning", "(", "\"You are fine tuning ELMo and caching char CNN word vectors. \"", "\n", "\"This behaviour is not guaranteed to be well defined, particularly. \"", "\n", "\"if not all of your inputs will occur in the vocabulary cache.\"", ")", "\n", "# This is an embedding, used to look up cached", "\n", "# word vectors built from character level cnn embeddings.", "\n", "", "self", ".", "_word_embedding", "=", "None", "\n", "self", ".", "_bos_embedding", ":", "torch", ".", "Tensor", "=", "None", "\n", "self", ".", "_eos_embedding", ":", "torch", ".", "Tensor", "=", "None", "\n", "if", "vocab_to_cache", ":", "\n", "            ", "logging", ".", "info", "(", "\"Caching character cnn layers for words in vocabulary.\"", ")", "\n", "# This sets 3 attributes, _word_embedding, _bos_embedding and _eos_embedding.", "\n", "# They are set in the method so they can be accessed from outside the", "\n", "# constructor.", "\n", "self", ".", "create_cached_cnn_embeddings", "(", "vocab_to_cache", ")", "\n", "\n", "", "with", "open", "(", "cached_path", "(", "options_file", ")", ",", "'r'", ")", "as", "fin", ":", "\n", "            ", "options", "=", "json", ".", "load", "(", "fin", ")", "\n", "", "if", "not", "options", "[", "'lstm'", "]", ".", "get", "(", "'use_skip_connections'", ")", ":", "\n", "            ", "raise", "ConfigurationError", "(", "'We only support pretrained biLMs with residual connections'", ")", "\n", "", "self", ".", "_elmo_lstm", "=", "ElmoLstm", "(", "input_size", "=", "options", "[", "'lstm'", "]", "[", "'projection_dim'", "]", ",", "\n", "hidden_size", "=", "options", "[", "'lstm'", "]", "[", "'projection_dim'", "]", ",", "\n", "cell_size", "=", "options", "[", "'lstm'", "]", "[", "'dim'", "]", ",", "\n", "num_layers", "=", "options", "[", "'lstm'", "]", "[", "'n_layers'", "]", ",", "\n", "memory_cell_clip_value", "=", "options", "[", "'lstm'", "]", "[", "'cell_clip'", "]", ",", "\n", "state_projection_clip_value", "=", "options", "[", "'lstm'", "]", "[", "'proj_clip'", "]", ",", "\n", "requires_grad", "=", "requires_grad", ")", "\n", "self", ".", "_elmo_lstm", ".", "load_weights", "(", "weight_file", ")", "\n", "# Number of representation layers including context independent layer", "\n", "self", ".", "num_layers", "=", "options", "[", "'lstm'", "]", "[", "'n_layers'", "]", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.examples.elmo._ElmoBiLm.get_output_dim": [[562, 564], ["elmo._ElmoBiLm._token_embedder.get_output_dim"], "methods", ["home.repos.pwc.inspect_result.ZeweiChu_EntEval.examples.elmo._ElmoBiLm.get_output_dim"], ["", "def", "get_output_dim", "(", "self", ")", ":", "\n", "        ", "return", "2", "*", "self", ".", "_token_embedder", ".", "get_output_dim", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.examples.elmo._ElmoBiLm.forward": [[565, 631], ["elmo._ElmoBiLm._elmo_lstm", "torch.chunk", "ValueError", "elmo._ElmoBiLm._token_embedder", "elmo._ElmoBiLm.size", "output_tensors.append", "elmo._ElmoBiLm._word_embedding", "allennlp.nn.util.add_sentence_boundary_token_ids", "torch.cat", "mask.float().unsqueeze", "layer_activations.squeeze", "elmo._ElmoBiLm._token_embedder", "mask.float"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "# pylint: disable=arguments-differ", "\n", "inputs", ":", "torch", ".", "Tensor", ",", "\n", "if_context", ":", "bool", ",", "\n", "word_inputs", ":", "torch", ".", "Tensor", "=", "None", ")", "->", "Dict", "[", "str", ",", "Union", "[", "torch", ".", "Tensor", ",", "List", "[", "torch", ".", "Tensor", "]", "]", "]", ":", "\n", "        ", "\"\"\"\n        Parameters\n        ----------\n        inputs: ``torch.Tensor``, required.\n            Shape ``(batch_size, timesteps, 50)`` of character ids representing the current batch.\n        word_inputs : ``torch.Tensor``, required.\n            If you passed a cached vocab, you can in addition pass a tensor of shape ``(batch_size, timesteps)``,\n            which represent word ids which have been pre-cached.\n\n        Returns\n        -------\n        Dict with keys:\n\n        ``'activations'``: ``List[torch.Tensor]``\n            A list of activations at each layer of the network, each of shape\n            ``(batch_size, timesteps + 2, embedding_dim)``\n        ``'mask'``:  ``torch.Tensor``\n            Shape ``(batch_size, timesteps + 2)`` long tensor with sequence mask.\n\n        Note that the output tensors all include additional special begin and end of sequence\n        markers.\n        \"\"\"", "\n", "if", "self", ".", "_word_embedding", "is", "not", "None", "and", "word_inputs", "is", "not", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"unexpected -- Mingda\"", ")", "\n", "try", ":", "\n", "                ", "mask_without_bos_eos", "=", "(", "word_inputs", ">", "0", ")", ".", "long", "(", ")", "\n", "# The character cnn part is cached - just look it up.", "\n", "embedded_inputs", "=", "self", ".", "_word_embedding", "(", "word_inputs", ")", "# type: ignore", "\n", "# shape (batch_size, timesteps + 2, embedding_dim)", "\n", "type_representation", ",", "mask", "=", "add_sentence_boundary_token_ids", "(", "\n", "embedded_inputs", ",", "\n", "mask_without_bos_eos", ",", "\n", "self", ".", "_bos_embedding", ",", "\n", "self", ".", "_eos_embedding", "\n", ")", "\n", "", "except", "RuntimeError", ":", "\n", "# Back off to running the character convolutions,", "\n", "# as we might not have the words in the cache.", "\n", "                ", "token_embedding", "=", "self", ".", "_token_embedder", "(", "inputs", ",", "if_context", ")", "\n", "mask", "=", "token_embedding", "[", "'mask'", "]", "\n", "type_representation", "=", "token_embedding", "[", "'token_embedding'", "]", "\n", "", "", "else", ":", "\n", "            ", "token_embedding", "=", "self", ".", "_token_embedder", "(", "inputs", ",", "if_context", ")", "\n", "mask", "=", "token_embedding", "[", "'mask'", "]", "\n", "type_representation", "=", "token_embedding", "[", "'token_embedding'", "]", "\n", "", "lstm_outputs", "=", "self", ".", "_elmo_lstm", "(", "type_representation", ",", "mask", ")", "\n", "\n", "# Prepare the output.  The first layer is duplicated.", "\n", "# Because of minor differences in how masking is applied depending", "\n", "# on whether the char cnn layers are cached, we'll be defensive and", "\n", "# multiply by the mask here. It's not strictly necessary, as the", "\n", "# mask passed on is correct, but the values in the padded areas", "\n", "# of the char cnn representations can change.", "\n", "output_tensors", "=", "[", "\n", "torch", ".", "cat", "(", "[", "type_representation", ",", "type_representation", "]", ",", "dim", "=", "-", "1", ")", "*", "mask", ".", "float", "(", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "]", "\n", "for", "layer_activations", "in", "torch", ".", "chunk", "(", "lstm_outputs", ",", "lstm_outputs", ".", "size", "(", "0", ")", ",", "dim", "=", "0", ")", ":", "\n", "            ", "output_tensors", ".", "append", "(", "layer_activations", ".", "squeeze", "(", "0", ")", ")", "\n", "\n", "", "return", "{", "\n", "'activations'", ":", "output_tensors", ",", "\n", "'mask'", ":", "mask", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.examples.elmo._ElmoBiLm.create_cached_cnn_embeddings": [[633, 692], ["allennlp.common.util.lazy_groups_of", "allennlp.nn.util.get_device_of", "allennlp.common.util.lazy_groups_of", "torch.cat", "list", "Embedding", "iter", "next", "elmo.batch_to_ids", "elmo._ElmoBiLm._token_embedder", "allennlp.nn.util.remove_sentence_boundaries", "all_embeddings.append", "embedding.size", "elmo._ElmoBiLm.parameters", "batched_tensor.cuda.cuda.cuda", "token_embedding.view", "token_embedding.size", "len", "len"], "methods", ["home.repos.pwc.inspect_result.ZeweiChu_EntEval.examples.elmo.batch_to_ids"], ["", "def", "create_cached_cnn_embeddings", "(", "self", ",", "tokens", ":", "List", "[", "str", "]", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Given a list of tokens, this method precomputes word representations\n        by running just the character convolutions and highway layers of elmo,\n        essentially creating uncontextual word vectors. On subsequent forward passes,\n        the word ids are looked up from an embedding, rather than being computed on\n        the fly via the CNN encoder.\n\n        This function sets 3 attributes:\n\n        _word_embedding : ``torch.Tensor``\n            The word embedding for each word in the tokens passed to this method.\n        _bos_embedding : ``torch.Tensor``\n            The embedding for the BOS token.\n        _eos_embedding : ``torch.Tensor``\n            The embedding for the EOS token.\n\n        Parameters\n        ----------\n        tokens : ``List[str]``, required.\n            A list of tokens to precompute character convolutions for.\n        \"\"\"", "\n", "tokens", "=", "[", "ELMoCharacterMapper", ".", "bos_token", ",", "ELMoCharacterMapper", ".", "eos_token", "]", "+", "tokens", "\n", "timesteps", "=", "32", "\n", "batch_size", "=", "32", "\n", "chunked_tokens", "=", "lazy_groups_of", "(", "iter", "(", "tokens", ")", ",", "timesteps", ")", "\n", "\n", "all_embeddings", "=", "[", "]", "\n", "device", "=", "get_device_of", "(", "next", "(", "self", ".", "parameters", "(", ")", ")", ")", "\n", "for", "batch", "in", "lazy_groups_of", "(", "chunked_tokens", ",", "batch_size", ")", ":", "\n", "# Shape (batch_size, timesteps, 50)", "\n", "            ", "batched_tensor", "=", "batch_to_ids", "(", "batch", ")", "\n", "# NOTE: This device check is for when a user calls this method having", "\n", "# already placed the model on a device. If this is called in the", "\n", "# constructor, it will probably happen on the CPU. This isn't too bad,", "\n", "# because it's only a few convolutions and will likely be very fast.", "\n", "if", "device", ">=", "0", ":", "\n", "                ", "batched_tensor", "=", "batched_tensor", ".", "cuda", "(", "device", ")", "\n", "", "output", "=", "self", ".", "_token_embedder", "(", "batched_tensor", ")", "\n", "token_embedding", "=", "output", "[", "\"token_embedding\"", "]", "\n", "mask", "=", "output", "[", "\"mask\"", "]", "\n", "token_embedding", ",", "_", "=", "remove_sentence_boundaries", "(", "token_embedding", ",", "mask", ")", "\n", "all_embeddings", ".", "append", "(", "token_embedding", ".", "view", "(", "-", "1", ",", "token_embedding", ".", "size", "(", "-", "1", ")", ")", ")", "\n", "", "full_embedding", "=", "torch", ".", "cat", "(", "all_embeddings", ",", "0", ")", "\n", "\n", "# We might have some trailing embeddings from padding in the batch, so", "\n", "# we clip the embedding and lookup to the right size.", "\n", "full_embedding", "=", "full_embedding", "[", ":", "len", "(", "tokens", ")", ",", ":", "]", "\n", "embedding", "=", "full_embedding", "[", "2", ":", "len", "(", "tokens", ")", ",", ":", "]", "\n", "vocab_size", ",", "embedding_dim", "=", "list", "(", "embedding", ".", "size", "(", ")", ")", "\n", "\n", "from", "allennlp", ".", "modules", ".", "token_embedders", "import", "Embedding", "# type: ignore", "\n", "self", ".", "_bos_embedding", "=", "full_embedding", "[", "0", ",", ":", "]", "\n", "self", ".", "_eos_embedding", "=", "full_embedding", "[", "1", ",", ":", "]", "\n", "self", ".", "_word_embedding", "=", "Embedding", "(", "vocab_size", ",", "# type: ignore", "\n", "embedding_dim", ",", "\n", "weight", "=", "embedding", ".", "data", ",", "\n", "trainable", "=", "self", ".", "_requires_grad", ",", "\n", "padding_index", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.examples.elmo.ELMoCharacterMapper.__init__": [[763, 765], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "tokens_to_add", ":", "Dict", "[", "str", ",", "int", "]", "=", "None", ")", "->", "None", ":", "\n", "        ", "self", ".", "tokens_to_add", "=", "tokens_to_add", "or", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.examples.elmo.ELMoCharacterMapper.convert_word_to_char_ids": [[766, 788], ["enumerate", "word.encode", "len"], "methods", ["None"], ["", "def", "convert_word_to_char_ids", "(", "self", ",", "word", ":", "str", ")", "->", "List", "[", "int", "]", ":", "\n", "        ", "if", "word", "in", "self", ".", "tokens_to_add", ":", "\n", "            ", "char_ids", "=", "[", "ELMoCharacterMapper", ".", "padding_character", "]", "*", "ELMoCharacterMapper", ".", "max_word_length", "\n", "char_ids", "[", "0", "]", "=", "ELMoCharacterMapper", ".", "beginning_of_word_character", "\n", "char_ids", "[", "1", "]", "=", "self", ".", "tokens_to_add", "[", "word", "]", "\n", "char_ids", "[", "2", "]", "=", "ELMoCharacterMapper", ".", "end_of_word_character", "\n", "", "elif", "word", "==", "ELMoCharacterMapper", ".", "bod_token", ":", "\n", "            ", "char_ids", "=", "ELMoCharacterMapper", ".", "beginning_of_description_characters", "\n", "", "elif", "word", "==", "ELMoCharacterMapper", ".", "boc_token", ":", "\n", "            ", "char_ids", "=", "ELMoCharacterMapper", ".", "beginning_of_context_characters", "\n", "", "elif", "word", "==", "ELMoCharacterMapper", ".", "eos_token", ":", "\n", "            ", "char_ids", "=", "ELMoCharacterMapper", ".", "end_of_sentence_characters", "\n", "", "else", ":", "\n", "            ", "word_encoded", "=", "word", ".", "encode", "(", "'utf-8'", ",", "'ignore'", ")", "[", ":", "(", "ELMoCharacterMapper", ".", "max_word_length", "-", "2", ")", "]", "\n", "char_ids", "=", "[", "ELMoCharacterMapper", ".", "padding_character", "]", "*", "ELMoCharacterMapper", ".", "max_word_length", "\n", "char_ids", "[", "0", "]", "=", "ELMoCharacterMapper", ".", "beginning_of_word_character", "\n", "for", "k", ",", "chr_id", "in", "enumerate", "(", "word_encoded", ",", "start", "=", "1", ")", ":", "\n", "                ", "char_ids", "[", "k", "]", "=", "chr_id", "\n", "", "char_ids", "[", "len", "(", "word_encoded", ")", "+", "1", "]", "=", "ELMoCharacterMapper", ".", "end_of_word_character", "\n", "\n", "# +1 one for masking", "\n", "", "return", "[", "c", "+", "1", "for", "c", "in", "char_ids", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.examples.elmo.ELMoTokenCharactersIndexer.__init__": [[804, 809], ["elmo.ELMoCharacterMapper"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "namespace", ":", "str", "=", "'elmo_characters'", ",", "\n", "tokens_to_add", ":", "Dict", "[", "str", ",", "int", "]", "=", "None", ")", "->", "None", ":", "\n", "        ", "self", ".", "_namespace", "=", "namespace", "\n", "self", ".", "_mapper", "=", "ELMoCharacterMapper", "(", "tokens_to_add", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.examples.elmo.ELMoTokenCharactersIndexer.count_vocab_items": [[810, 813], ["None"], "methods", ["None"], ["", "@", "overrides", "\n", "def", "count_vocab_items", "(", "self", ",", "token", ":", "Token", ",", "counter", ":", "Dict", "[", "str", ",", "Dict", "[", "str", ",", "int", "]", "]", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.examples.elmo.ELMoTokenCharactersIndexer.tokens_to_indices": [[814, 830], ["any", "allennlp.common.checks.ConfigurationError", "elmo.ELMoTokenCharactersIndexer._mapper.convert_word_to_char_ids"], "methods", ["home.repos.pwc.inspect_result.ZeweiChu_EntEval.examples.elmo.ELMoCharacterMapper.convert_word_to_char_ids"], ["", "@", "overrides", "\n", "def", "tokens_to_indices", "(", "self", ",", "\n", "tokens", ":", "List", "[", "Token", "]", ",", "\n", "vocabulary", ":", "Vocabulary", ",", "\n", "index_name", ":", "str", ")", "->", "Dict", "[", "str", ",", "List", "[", "List", "[", "int", "]", "]", "]", ":", "\n", "# TODO(brendanr): Retain the token to index mappings in the vocabulary and remove this", "\n", "# pylint pragma. See:", "\n", "# https://github.com/allenai/allennlp/blob/master/allennlp/data/token_indexers/wordpiece_indexer.py#L113", "\n", "\n", "# pylint: disable=unused-argument", "\n", "        ", "texts", "=", "[", "token", ".", "text", "for", "token", "in", "tokens", "]", "\n", "\n", "if", "any", "(", "text", "is", "None", "for", "text", "in", "texts", ")", ":", "\n", "            ", "raise", "ConfigurationError", "(", "'ELMoTokenCharactersIndexer needs a tokenizer '", "\n", "'that retains text'", ")", "\n", "", "return", "{", "index_name", ":", "[", "self", ".", "_mapper", ".", "convert_word_to_char_ids", "(", "text", ")", "for", "text", "in", "texts", "]", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.examples.elmo.ELMoTokenCharactersIndexer.get_padding_lengths": [[831, 835], ["None"], "methods", ["None"], ["", "@", "overrides", "\n", "def", "get_padding_lengths", "(", "self", ",", "token", ":", "List", "[", "int", "]", ")", "->", "Dict", "[", "str", ",", "int", "]", ":", "\n", "# pylint: disable=unused-argument", "\n", "        ", "return", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.examples.elmo.ELMoTokenCharactersIndexer.get_padding_token": [[836, 839], ["None"], "methods", ["None"], ["", "@", "overrides", "\n", "def", "get_padding_token", "(", "self", ")", "->", "List", "[", "int", "]", ":", "\n", "        ", "return", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.examples.elmo.ELMoTokenCharactersIndexer._default_value_for_padding": [[840, 843], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_default_value_for_padding", "(", ")", ":", "\n", "        ", "return", "[", "0", "]", "*", "ELMoCharacterMapper", ".", "max_word_length", "\n", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.examples.elmo.ELMoTokenCharactersIndexer.pad_token_sequence": [[844, 853], ["allennlp.common.util.pad_sequence_to_length", "tokens.items"], "methods", ["None"], ["", "@", "overrides", "\n", "def", "pad_token_sequence", "(", "self", ",", "\n", "tokens", ":", "Dict", "[", "str", ",", "List", "[", "List", "[", "int", "]", "]", "]", ",", "\n", "desired_num_tokens", ":", "Dict", "[", "str", ",", "int", "]", ",", "\n", "padding_lengths", ":", "Dict", "[", "str", ",", "int", "]", ")", "->", "Dict", "[", "str", ",", "List", "[", "List", "[", "int", "]", "]", "]", ":", "\n", "# pylint: disable=unused-argument", "\n", "        ", "return", "{", "key", ":", "pad_sequence_to_length", "(", "val", ",", "desired_num_tokens", "[", "key", "]", ",", "\n", "default_value", "=", "self", ".", "_default_value_for_padding", ")", "\n", "for", "key", ",", "val", "in", "tokens", ".", "items", "(", ")", "}", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.examples.elmo.batch_to_ids": [[231, 258], ["elmo.ELMoTokenCharactersIndexer", "allennlp.data.dataset.Batch", "allennlp.data.Vocabulary", "allennlp.data.dataset.Batch.index_instances", "allennlp.data.fields.TextField", "allennlp.data.Instance", "instances.append", "allennlp.data.Token", "allennlp.data.dataset.Batch.as_tensor_dict"], "function", ["None"], ["", "", "def", "batch_to_ids", "(", "batch", ":", "List", "[", "List", "[", "str", "]", "]", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"\n    Converts a batch of tokenized sentences to a tensor representing the sentences with encoded characters\n    (len(batch), max sentence length, max word length).\n\n    Parameters\n    ----------\n    batch : ``List[List[str]]``, required\n        A list of tokenized sentences.\n\n    Returns\n    -------\n        A tensor of padded character ids.\n    \"\"\"", "\n", "instances", "=", "[", "]", "\n", "indexer", "=", "ELMoTokenCharactersIndexer", "(", ")", "\n", "for", "sentence", "in", "batch", ":", "\n", "        ", "tokens", "=", "[", "Token", "(", "token", ")", "for", "token", "in", "sentence", "]", "\n", "field", "=", "TextField", "(", "tokens", ",", "\n", "{", "'character_ids'", ":", "indexer", "}", ")", "\n", "instance", "=", "Instance", "(", "{", "\"elmo\"", ":", "field", "}", ")", "\n", "instances", ".", "append", "(", "instance", ")", "\n", "\n", "", "dataset", "=", "Batch", "(", "instances", ")", "\n", "vocab", "=", "Vocabulary", "(", ")", "\n", "dataset", ".", "index_instances", "(", "vocab", ")", "\n", "return", "dataset", ".", "as_tensor_dict", "(", ")", "[", "'elmo'", "]", "[", "'character_ids'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.examples.elmo._make_bos_eos": [[704, 716], ["None"], "function", ["None"], ["def", "_make_bos_eos", "(", "\n", "character", ":", "int", ",", "\n", "padding_character", ":", "int", ",", "\n", "beginning_of_word_character", ":", "int", ",", "\n", "end_of_word_character", ":", "int", ",", "\n", "max_word_length", ":", "int", "\n", ")", ":", "\n", "    ", "char_ids", "=", "[", "padding_character", "]", "*", "max_word_length", "\n", "char_ids", "[", "0", "]", "=", "beginning_of_word_character", "\n", "char_ids", "[", "1", "]", "=", "character", "\n", "char_ids", "[", "2", "]", "=", "end_of_word_character", "\n", "return", "char_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.examples.eval_elmo.prepare": [[37, 39], ["None"], "function", ["None"], ["def", "prepare", "(", "params", ",", "samples", ")", ":", "\n", "    ", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.ZeweiChu_EntEval.examples.eval_elmo.batcher": [[40, 82], ["enumerate", "max", "numpy.zeros().astype", "torch.no_grad", "batch_contexts.append", "batch_desc.append", "elmo.batch_to_ids().cuda().contiguous", "elmo", "torch.from_numpy().cuda().unsqueeze", "embeddings.cpu().data.numpy", "elmo.batch_to_ids().cuda().contiguous", "elmo", "elmo_outputs[].unsqueeze().float", "embeddings.data.cpu().numpy", "len", "numpy.zeros", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "elmo.batch_to_ids().cuda", "torch.from_numpy().cuda", "elmo.batch_to_ids().cuda", "elmo_outputs[].unsqueeze", "embeddings.data.cpu", "len", "w.lower", "w.lower", "embeddings.cpu", "elmo.batch_to_ids", "torch.from_numpy", "elmo.batch_to_ids"], "function", ["home.repos.pwc.inspect_result.ZeweiChu_EntEval.examples.elmo.batch_to_ids", "home.repos.pwc.inspect_result.ZeweiChu_EntEval.examples.elmo.batch_to_ids"], ["", "def", "batcher", "(", "params", ",", "batch", ")", ":", "\n", "    ", "use_ctx", "=", "False", "\n", "use_def", "=", "False", "\n", "if", "batch", "[", "0", "]", "[", "0", "]", "is", "not", "None", ":", "\n", "        ", "use_ctx", "=", "True", "\n", "", "if", "batch", "[", "0", "]", "[", "3", "]", "is", "not", "None", ":", "\n", "        ", "use_def", "=", "True", "\n", "\n", "", "if", "use_ctx", ":", "\n", "        ", "max_context_len", "=", "max", "(", "[", "len", "(", "item", "[", "0", "]", ")", "for", "item", "in", "batch", "]", ")", "\n", "batch_contexts", "=", "[", "]", "\n", "batch_context_span_mask", "=", "np", ".", "zeros", "(", "(", "len", "(", "batch", ")", ",", "max_context_len", ")", ")", ".", "astype", "(", "\"float32\"", ")", "\n", "", "if", "use_def", ":", "\n", "        ", "batch_desc", "=", "[", "]", "\n", "\n", "", "for", "i", ",", "(", "ctx", ",", "s", ",", "e", ",", "desc", ")", "in", "enumerate", "(", "batch", ")", ":", "\n", "        ", "if", "use_ctx", ":", "\n", "            ", "batch_contexts", ".", "append", "(", "[", "w", ".", "lower", "(", ")", "for", "w", "in", "ctx", "]", "if", "ctx", "!=", "[", "]", "else", "[", "'.'", "]", ")", "\n", "batch_context_span_mask", "[", "i", ",", "s", ":", "]", "=", "1.", "\n", "batch_context_span_mask", "[", "i", ",", "e", ":", "]", "=", "0.", "\n", "", "if", "use_def", ":", "\n", "            ", "batch_desc", ".", "append", "(", "[", "w", ".", "lower", "(", ")", "for", "w", "in", "desc", "]", "if", "desc", "!=", "[", "]", "else", "[", "'.'", "]", ")", "\n", "\n", "", "", "context_embedding", "=", "None", "\n", "def_embedding", "=", "None", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "if", "use_ctx", ":", "\n", "            ", "char_ids", "=", "batch_to_ids", "(", "batch_contexts", ")", ".", "cuda", "(", ")", ".", "contiguous", "(", ")", "\n", "elmo_outputs", "=", "elmo", "(", "char_ids", ",", "if_context", "=", "True", ")", "\n", "embeddings", "=", "elmo_outputs", "[", "\"elmo_representations\"", "]", "[", "0", "]", "\n", "mask", "=", "torch", ".", "from_numpy", "(", "batch_context_span_mask", ")", ".", "cuda", "(", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "embeddings", "=", "torch", ".", "sum", "(", "embeddings", "*", "mask", ",", "1", ")", "/", "torch", ".", "sum", "(", "mask", ",", "1", ")", "\n", "context_embedding", "=", "embeddings", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "", "if", "use_def", ":", "\n", "            ", "char_ids", "=", "batch_to_ids", "(", "batch_desc", ")", ".", "cuda", "(", ")", ".", "contiguous", "(", ")", "\n", "elmo_outputs", "=", "elmo", "(", "char_ids", ",", "if_context", "=", "False", ")", "\n", "embeddings", "=", "elmo_outputs", "[", "\"elmo_representations\"", "]", "[", "0", "]", "\n", "mask", "=", "elmo_outputs", "[", "\"mask\"", "]", ".", "unsqueeze", "(", "-", "1", ")", ".", "float", "(", ")", "\n", "embeddings", "=", "torch", ".", "sum", "(", "embeddings", "*", "mask", ",", "1", ")", "/", "torch", ".", "sum", "(", "mask", ",", "1", ")", "\n", "def_embedding", "=", "embeddings", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "", "return", "context_embedding", ",", "def_embedding", "\n", "\n"]]}