{"home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.src.config_parser.Config.__init__": [[11, 20], ["config_dict.items", "isinstance", "config_parser.Config"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "config_dict", ":", "dict", ")", ":", "\n", "        ", "\"\"\"\n        Initialize configuration item using a dictionary.\n        :param d:\n        \"\"\"", "\n", "for", "k", ",", "v", "in", "config_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "v", ",", "dict", ")", ":", "\n", "                ", "v", "=", "Config", "(", "v", ")", "\n", "", "self", ".", "__dict__", "[", "k", "]", "=", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.src.config_parser.Config.__getitem__": [[21, 23], ["None"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "key", ")", ":", "\n", "        ", "return", "self", ".", "__dict__", "[", "key", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.src.config_parser.parse_config": [[25, 40], ["isinstance", "os.exists", "logging.warning", "open", "json.loads", "config_parser.Config", "f.read"], "function", ["None"], ["", "", "def", "parse_config", "(", "config_path", ":", "str", ")", ":", "\n", "    ", "\"\"\"\n    Parses a json config file into a Config object.\n    :param config_path: Path to the json config file.\n    \"\"\"", "\n", "if", "not", "osp", ".", "exists", "(", "config_path", ")", ":", "\n", "        ", "logging", ".", "warning", "(", "f\"Config file not found: {config_path}\"", ")", "\n", "return", "None", "\n", "\n", "", "with", "open", "(", "config_path", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "config_dict", "=", "json", ".", "loads", "(", "f", ".", "read", "(", ")", ")", "\n", "", "if", "isinstance", "(", "config_dict", ",", "dict", ")", ":", "\n", "        ", "return", "Config", "(", "config_dict", ")", "\n", "", "else", ":", "\n", "        ", "return", "config_dict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.plan2scene.config_manager.ConfigManager.__init__": [[19, 37], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Initialize config manager.\n        \"\"\"", "\n", "self", ".", "args", "=", "None", "# Contains command line arguments passed in.", "\n", "self", ".", "surfaces", "=", "None", "# List of surfaces of a room.", "\n", "self", ".", "room_types", "=", "None", "# List of supported room types.", "\n", "self", ".", "data_paths", "=", "None", "# Configuration of paths to useful data.", "\n", "self", ".", "house_gen", "=", "None", "# Configuration used to parse house architectures.", "\n", "self", ".", "texture_gen", "=", "None", "# Configuration used to synthesize textures for observed surfaces.", "\n", "self", ".", "texture_prop", "=", "None", "# Configuration used to propagate textures for unobserved surfaces.", "\n", "self", ".", "metrics", "=", "None", "# Configuration of different metrics used.", "\n", "self", ".", "num_workers", "=", "None", "# Number of workers used by data loders.", "\n", "self", ".", "output_path", "=", "None", "# Output path to store results of the script.", "\n", "self", ".", "seed", "=", "None", "# Random seed used.", "\n", "self", ".", "drop_fraction", "=", "None", "# Fraction of surfaces synthetically unobserved.", "\n", "self", ".", "render_config", "=", "None", "# Configuration used to render houses using scene toolkit.", "\n", "self", ".", "seam_correct_config", "=", "None", "# Configuration used for seam correction of textures.", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.plan2scene.config_manager.ConfigManager.setup_seed": [[38, 48], ["torch.manual_seed", "numpy.random.seed", "random.seed", "logging.info"], "methods", ["None"], ["", "def", "setup_seed", "(", "self", ",", "seed", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Update random seed.\n        :param seed: New seed.\n        \"\"\"", "\n", "self", ".", "seed", "=", "seed", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "logging", ".", "info", "(", "\"Using seed: %d\"", "%", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.plan2scene.config_manager.ConfigManager.load_default_args": [[49, 57], ["argparse.ArgumentParser", "config_manager.ConfigManager.add_args", "argparse.ArgumentParser.parse_known_args", "config_manager.ConfigManager.process_args"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.plan2scene.config_manager.ConfigManager.add_args", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.plan2scene.config_manager.ConfigManager.process_args"], ["", "def", "load_default_args", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Load default arguments. Useful for loading plan2scene in a jupyter notebook.\n        \"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "self", ".", "add_args", "(", "parser", ")", "\n", "args", ",", "_", "=", "parser", ".", "parse_known_args", "(", ")", "\n", "self", ".", "process_args", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.plan2scene.config_manager.ConfigManager.copy_config_to_output": [[58, 66], ["shutil.copyfile", "shutil.copyfile", "os.exists", "os.exists", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join"], "methods", ["None"], ["", "def", "copy_config_to_output", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Copy texture genration and texture propagation configuration to the output directory.\n        \"\"\"", "\n", "if", "not", "osp", ".", "exists", "(", "osp", ".", "join", "(", "self", ".", "output_path", ",", "\"conf\"", ")", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "osp", ".", "join", "(", "self", ".", "output_path", ",", "\"conf\"", ")", ")", "\n", "", "shutil", ".", "copyfile", "(", "self", ".", "args", ".", "texture_prop", ",", "osp", ".", "join", "(", "self", ".", "output_path", ",", "\"conf\"", ",", "\"texture_prop.json\"", ")", ")", "\n", "shutil", ".", "copyfile", "(", "self", ".", "args", ".", "texture_gen", ",", "osp", ".", "join", "(", "self", ".", "output_path", ",", "\"conf\"", ",", "\"texture_gen.json\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.plan2scene.config_manager.ConfigManager.process_args": [[67, 108], ["config_manager.ConfigManager.setup_seed", "config_parser.parse_config", "config_parser.parse_config", "config_parser.parse_config", "config_parser.parse_config", "config_parser.parse_config", "config_parser.parse_config", "config_parser.parse_config", "config_parser.parse_config", "config_parser.parse_config", "logging.info", "isinstance", "logging.basicConfig", "int", "os.join", "os.join", "os.join", "os.join", "len", "logging.basicConfig", "logging.basicConfig", "str", "os.exists", "os.exists", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "logging.getLevelName", "logging.getLevelName", "logging.getLevelName", "logging.StreamHandler", "logging.FileHandler", "os.join", "os.join"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.plan2scene.config_manager.ConfigManager.setup_seed", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.src.config_parser.parse_config", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.src.config_parser.parse_config", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.src.config_parser.parse_config", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.src.config_parser.parse_config", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.src.config_parser.parse_config", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.src.config_parser.parse_config", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.src.config_parser.parse_config", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.src.config_parser.parse_config", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.src.config_parser.parse_config", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len"], ["", "def", "process_args", "(", "self", ",", "args", ",", "output_is_dir", "=", "False", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Process command line arguments.\n        :param args: Command line arguments.\n        :param output_is_dir: Specify true to create a directory at the output path. A log fill will be created automatically in this directory.\n        \"\"\"", "\n", "self", ".", "args", "=", "args", "\n", "if", "\"output_path\"", "in", "self", ".", "args", ".", "__dict__", ":", "\n", "            ", "if", "isinstance", "(", "self", ".", "args", ".", "output_path", ",", "str", ")", ":", "\n", "                ", "self", ".", "output_path", "=", "self", ".", "args", ".", "output_path", "\n", "", "else", ":", "\n", "                ", "self", ".", "output_path", "=", "self", ".", "args", ".", "output_path", "[", "0", "]", "\n", "", "if", "output_is_dir", ":", "\n", "                ", "if", "not", "osp", ".", "exists", "(", "self", ".", "output_path", ")", ":", "\n", "                    ", "os", ".", "makedirs", "(", "self", ".", "output_path", ")", "\n", "", "logging", ".", "basicConfig", "(", "level", "=", "logging", ".", "getLevelName", "(", "args", ".", "log_level", ")", ",", "handlers", "=", "[", "\n", "logging", ".", "StreamHandler", "(", ")", ",", "\n", "logging", ".", "FileHandler", "(", "osp", ".", "join", "(", "self", ".", "output_path", ",", "\"log.out\"", ")", ")", "]", ")", "\n", "", "else", ":", "\n", "                ", "logging", ".", "basicConfig", "(", "level", "=", "logging", ".", "getLevelName", "(", "args", ".", "log_level", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "logging", ".", "basicConfig", "(", "level", "=", "logging", ".", "getLevelName", "(", "args", ".", "log_level", ")", ")", "\n", "\n", "", "self", ".", "setup_seed", "(", "int", "(", "args", ".", "seed", ")", ")", "\n", "self", ".", "num_workers", "=", "args", ".", "num_workers", "\n", "self", ".", "data_paths", "=", "parse_config", "(", "args", ".", "data_paths", ")", "\n", "self", ".", "house_gen", "=", "parse_config", "(", "args", ".", "house_gen", ")", "\n", "self", ".", "texture_gen", "=", "parse_config", "(", "args", ".", "texture_gen", ")", "\n", "self", ".", "texture_prop", "=", "parse_config", "(", "args", ".", "texture_prop", ")", "\n", "self", ".", "metrics", "=", "parse_config", "(", "args", ".", "metric_conf", ")", "\n", "self", ".", "render_config", "=", "parse_config", "(", "args", ".", "render_config", ")", "\n", "self", ".", "seam_correct_config", "=", "parse_config", "(", "args", ".", "seam_correct_config", ")", "\n", "\n", "self", ".", "surfaces", "=", "parse_config", "(", "osp", ".", "join", "(", "args", ".", "labels_path", ",", "\"surfaces.json\"", ")", ")", "\n", "self", ".", "room_types", "=", "parse_config", "(", "osp", ".", "join", "(", "args", ".", "labels_path", ",", "\"room_types.json\"", ")", ")", "\n", "\n", "self", ".", "texture_prop", ".", "node_embedding_dim", "=", "len", "(", "self", ".", "room_types", ")", "+", "3", "*", "(", "self", ".", "texture_gen", ".", "combined_emb_dim", "+", "1", ")", "\n", "self", ".", "texture_prop", ".", "node_target_dim", "=", "3", "*", "(", "self", ".", "texture_gen", ".", "combined_emb_dim", ")", "\n", "\n", "self", ".", "drop_fraction", "=", "args", ".", "drop", "\n", "logging", ".", "info", "(", "\"Args: %s\"", "%", "str", "(", "self", ".", "args", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.plan2scene.config_manager.ConfigManager.get_data_list": [[109, 120], ["open", "config_manager.ConfigManager.data_paths.data_list_path_spec.format", "results.append", "line.strip"], "methods", ["None"], ["", "def", "get_data_list", "(", "self", ",", "split", ":", "str", ")", "->", "list", ":", "\n", "        ", "\"\"\"\n        Return a train/val/test data list.\n        :param split: Data split.\n        :return: Data list.\n        \"\"\"", "\n", "results", "=", "[", "]", "\n", "with", "open", "(", "self", ".", "data_paths", ".", "data_list_path_spec", ".", "format", "(", "split", "=", "split", ")", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ":", "\n", "                ", "results", ".", "append", "(", "line", ".", "strip", "(", ")", ")", "\n", "", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.plan2scene.config_manager.ConfigManager.add_args": [[121, 148], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "methods", ["None"], ["", "def", "add_args", "(", "self", ",", "parser", ":", "argparse", ".", "ArgumentParser", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Add optional arguments to an argument parser.\n        :param parser: Argument parser.\n        \"\"\"", "\n", "parser", ".", "add_argument", "(", "\"--seed\"", ",", "help", "=", "\"Default seed value to use.\"", ",", "default", "=", "12415", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\"--data-paths\"", ",", "help", "=", "\"Path to data_paths.json file\"", ",", "\n", "default", "=", "\"./conf/plan2scene/data_paths.json\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--house-gen\"", ",", "help", "=", "\"Path to house_gen.json file\"", ",", "\n", "default", "=", "\"./conf/plan2scene/house_gen.json\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--metric-conf\"", ",", "help", "=", "\"Path to metric.json.\"", ",", "default", "=", "\"./conf/plan2scene/metric.json\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--texture-gen\"", ",", "help", "=", "\"Path to texture_gen.json file\"", ",", "\n", "default", "=", "\"./conf/plan2scene/texture_gen.json\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--texture-prop\"", ",", "help", "=", "\"Path to texture_prop.json file\"", ",", "\n", "default", "=", "\"./conf/plan2scene/texture_prop_conf/default.json\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--render-config\"", ",", "help", "=", "\"Path to ./conf/plan2scene/render.json file\"", ",", "\n", "default", "=", "\"./conf/plan2scene/render.json\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--seam-correct-config\"", ",", "help", "=", "\"Path to ./conf/plan2scene/seam_correct.json\"", ",", "default", "=", "\"./conf/plan2scene/seam_correct.json\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--labels-path\"", ",", "help", "=", "\"Path to directory which contains surfaces.json and room_types.json\"", ",", "\n", "default", "=", "\"./conf/plan2scene/labels\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-l\"", ",", "\"--log-level\"", ",", "choices", "=", "[", "'DEBUG'", ",", "'INFO'", ",", "'WARNING'", ",", "'ERROR'", ",", "'CRITICAL'", "]", ",", "\n", "default", "=", "\"INFO\"", ",", "\n", "help", "=", "\"Set the log level\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--drop\"", ",", "help", "=", "\"Drop fraction used\"", ",", "default", "=", "\"0.0\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--num-workers\"", ",", "default", "=", "4", ",", "type", "=", "int", ",", "help", "=", "\"Number of workers used by a data loader.\"", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.plan2scene.preview_houses.preview_house": [[40, 131], ["os.exists", "os.mkdir", "os.mkdir", "os.exists", "os.mkdir", "os.mkdir", "os.exists", "os.mkdir", "os.mkdir", "open", "f.write", "f.write", "f.write", "f.write", "os.exists", "f.write", "columns.extend", "columns.append", "f.write", "house.rooms.items", "f.write", "f.write", "f.write", "os.join", "os.join", "os.join", "os.join", "os.join", "f.write", "f.write", "isinstance", "isinstance", "f.write", "f.write", "f.write", "house.sketch_house().save", "f.write", "f.write", "f.write", "f.write", "os.exists", "os.symlink", "os.symlink", "os.exists", "os.mkdir", "os.mkdir", "os.join", "f.write", "f.write", "f.write", "os.splitext", "os.join", "os.abspath", "os.join", "os.join", "os.join", "str", "str", "house.sketch_house", "isinstance", "texture_img.save", "f.write", "f.write", "f.write", "os.exists", "os.symlink", "os.symlink", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.splitext", "os.join"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.common.image_description.ImageDescription.save", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.models.house.House.sketch_house", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.common.image_description.ImageDescription.save"], ["def", "preview_house", "(", "house", ":", "House", ",", "gt_house", ":", "House", ",", "house_json_path", ":", "str", ",", "photos_path", ":", "str", ",", "output_path", ":", "str", ")", "->", "None", ":", "\n", "    ", "\"\"\"\n    Create a HTML page that previews predictions for a house.\n    :param house: House with synthesized texture. Unobserved photos are not present.\n    :param gt_house: House having all the photos.\n    :param house_json_path: Path to scene.json file.\n    :param photos_path: Path to raw photos.\n    :param output_path: Path to save the preview page.\n    \"\"\"", "\n", "if", "not", "osp", ".", "exists", "(", "output_path", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "output_path", ")", "\n", "", "if", "not", "osp", ".", "exists", "(", "osp", ".", "join", "(", "output_path", ",", "\"rooms\"", ")", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "osp", ".", "join", "(", "output_path", ",", "\"rooms\"", ")", ")", "\n", "\n", "", "if", "not", "osp", ".", "exists", "(", "osp", ".", "join", "(", "output_path", ",", "\"photos\"", ")", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "osp", ".", "join", "(", "output_path", ",", "\"photos\"", ")", ")", "\n", "\n", "", "with", "open", "(", "osp", ".", "join", "(", "output_path", ",", "\"report.html\"", ")", ",", "\"w\"", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "\"<html>\\n\"", ")", "\n", "f", ".", "write", "(", "HTML_HEADER", ")", "\n", "f", ".", "write", "(", "\"<body>\\n\"", ")", "\n", "f", ".", "write", "(", "\"<h1 style='text-align:center;' >House: {house_id}</h1>\"", ".", "format", "(", "house_id", "=", "house", ".", "house_key", ")", ")", "\n", "# Preview house", "\n", "if", "osp", ".", "exists", "(", "osp", ".", "splitext", "(", "house_json_path", ")", "[", "0", "]", "+", "\".png\"", ")", ":", "\n", "            ", "if", "not", "osp", ".", "exists", "(", "osp", ".", "join", "(", "output_path", ",", "\"render.png\"", ")", ")", ":", "\n", "                ", "os", ".", "symlink", "(", "osp", ".", "abspath", "(", "osp", ".", "splitext", "(", "house_json_path", ")", "[", "0", "]", "+", "\".png\"", ")", ",", "osp", ".", "join", "(", "output_path", ",", "\"render.png\"", ")", ")", "\n", "", "f", ".", "write", "(", "\"<img class='center' style='width:{render_size}px' src='{render_path}'/>\\n\"", ".", "format", "(", "render_path", "=", "\"render.png\"", ",", "render_size", "=", "RENDER_SIZE", ")", ")", "\n", "", "else", ":", "\n", "            ", "f", ".", "write", "(", "\"<p style='text-align:center;'>3D rendering not found.</p>\\n\"", ")", "\n", "", "f", ".", "write", "(", "\"<table>\\n\"", ")", "\n", "# Table header", "\n", "columns", "=", "[", "\"Room Id\"", ",", "\"Room Types\"", ",", "\"Sketch<br>Room indicated in green.\"", "]", "\n", "columns", ".", "extend", "(", "conf", ".", "surfaces", ")", "\n", "columns", ".", "append", "(", "\"Photos<br>Red outline: Photo unobserved<br>Green outline: Photo observed\"", ")", "\n", "f", ".", "write", "(", "\"<tr>%s</tr>\\n\"", "%", "\"\"", ".", "join", "(", "[", "\"<th>%s</th>\"", "%", "s", "for", "s", "in", "columns", "]", ")", ")", "\n", "\n", "# Row per room", "\n", "for", "room_id", ",", "room", "in", "house", ".", "rooms", ".", "items", "(", ")", ":", "\n", "            ", "gt_room", "=", "gt_house", ".", "rooms", "[", "room_id", "]", "\n", "assert", "isinstance", "(", "room", ",", "Room", ")", "\n", "assert", "isinstance", "(", "gt_room", ",", "Room", ")", "\n", "assert", "gt_room", ".", "room_id", "==", "room", ".", "room_id", "\n", "\n", "if", "not", "osp", ".", "exists", "(", "osp", ".", "join", "(", "output_path", ",", "\"rooms\"", ",", "room", ".", "room_id", ")", ")", ":", "\n", "                ", "os", ".", "mkdir", "(", "osp", ".", "join", "(", "output_path", ",", "\"rooms\"", ",", "room", ".", "room_id", ")", ")", "\n", "\n", "", "f", ".", "write", "(", "\"<tr>\\n\"", ")", "\n", "f", ".", "write", "(", "\"<td>%s</td>\\n\"", "%", "str", "(", "room", ".", "room_id", ")", ")", "\n", "f", ".", "write", "(", "\"<td>%s</td>\\n\"", "%", "str", "(", "room", ".", "types", ")", ")", "\n", "\n", "# Sketch house with room highlighted", "\n", "house", ".", "sketch_house", "(", "focused_room_id", "=", "room", ".", "room_id", ")", ".", "save", "(", "osp", ".", "join", "(", "output_path", ",", "\"rooms\"", ",", "room", ".", "room_id", ",", "\"sketch.png\"", ")", ")", "\n", "f", ".", "write", "(", "\"<td><img src='{sketch_path}'/></td>\\n\"", ".", "format", "(", "sketch_path", "=", "osp", ".", "join", "(", "\"rooms\"", ",", "room", ".", "room_id", ",", "\"sketch.png\"", ")", ")", ")", "\n", "\n", "# Preview textures", "\n", "for", "surface", "in", "conf", ".", "surfaces", ":", "\n", "                ", "f", ".", "write", "(", "\"<td>\\n\"", ")", "\n", "if", "\"prop\"", "in", "room", ".", "surface_textures", "[", "surface", "]", ":", "\n", "                    ", "texture_img", "=", "room", ".", "surface_textures", "[", "surface", "]", "[", "\"prop\"", "]", "\n", "assert", "isinstance", "(", "texture_img", ",", "ImageDescription", ")", "\n", "texture_img", ".", "save", "(", "osp", ".", "join", "(", "output_path", ",", "\"rooms\"", ",", "room", ".", "room_id", ",", "\"{surface}_texture.png\"", ".", "format", "(", "surface", "=", "surface", ")", ")", ")", "\n", "f", ".", "write", "(", "\"<img src='{texture_path}' />\"", ".", "format", "(", "texture_path", "=", "osp", ".", "join", "(", "\"rooms\"", ",", "room", ".", "room_id", ",", "\n", "\"{surface}_texture.png\"", ".", "format", "(", "surface", "=", "surface", ")", ")", ")", ")", "\n", "f", ".", "write", "(", "\"<br\\n>\"", ")", "\n", "observed", "=", "\"\"", "\n", "if", "texture_img", ".", "source", ".", "observed", "is", "not", "None", ":", "\n", "                        ", "if", "texture_img", ".", "source", ".", "observed", ":", "\n", "                            ", "observed", "=", "\"Observed\"", "\n", "", "else", ":", "\n", "                            ", "observed", "=", "\"Unobserved\"", "\n", "\n", "", "", "f", ".", "write", "(", "\"<span>{observed} {generator}</span>\"", ".", "format", "(", "observed", "=", "observed", ",", "generator", "=", "texture_img", ".", "source", ".", "name", ")", ")", "\n", "", "f", ".", "write", "(", "\"</td>\\n\"", ")", "\n", "\n", "# Preview photos", "\n", "", "f", ".", "write", "(", "\"<td>\\n\"", ")", "\n", "for", "photo", "in", "gt_room", ".", "photos", ":", "\n", "                ", "if", "not", "osp", ".", "exists", "(", "osp", ".", "join", "(", "output_path", ",", "\"photos\"", ",", "photo", "+", "\".jpg\"", ")", ")", ":", "\n", "                    ", "os", ".", "symlink", "(", "osp", ".", "join", "(", "photos_path", ",", "photo", "+", "\".jpg\"", ")", ",", "osp", ".", "join", "(", "output_path", ",", "\"photos\"", ",", "photo", "+", "\".jpg\"", ")", ")", "\n", "\n", "", "border_color", "=", "\"green\"", "\n", "if", "photo", "not", "in", "room", ".", "photos", ":", "\n", "                    ", "border_color", "=", "\"red\"", "\n", "", "f", ".", "write", "(", "\"<img style='border: solid 5px {border_color};' src='{image_path}'/>\"", ".", "format", "(", "image_path", "=", "osp", ".", "join", "(", "\"photos\"", ",", "photo", "+", "\".jpg\"", ")", ",", "\n", "border_color", "=", "border_color", ")", ")", "\n", "", "f", ".", "write", "(", "\"</td>\"", ")", "\n", "\n", "f", ".", "write", "(", "\"</tr>\\n\"", ")", "\n", "", "f", ".", "write", "(", "\"</table>\\n\"", ")", "\n", "f", ".", "write", "(", "\"</body>\\n\"", ")", "\n", "f", ".", "write", "(", "\"</html>\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.plan2scene.compute_fid.calculate_fid_given_files": [[18, 52], ["pytorch_fid.fid_score.InceptionV3().to", "pytorch_fid.fid_score.calculate_activation_statistics", "pytorch_fid.fid_score.calculate_activation_statistics", "pytorch_fid.fid_score.calculate_frechet_distance", "pathlib.Path", "pathlib.Path", "len", "logging.info", "torch.tensor", "len", "logging.info", "torch.tensor", "pytorch_fid.fid_score.InceptionV3"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len"], ["def", "calculate_fid_given_files", "(", "conf", ":", "ConfigManager", ",", "gt_files", ":", "list", ",", "pred_files", ":", "list", ",", "batch_size", ":", "int", ")", ":", "\n", "    ", "\"\"\"\n    Compute FID score between two image lists specified.\n    :param conf: Config Manager\n    :param gt_files: List of ground truth images\n    :param pred_files: List of predicted images\n    :param batch_size: Batch size used for computation\n    :return: FID score.\n    \"\"\"", "\n", "device", "=", "conf", ".", "metrics", ".", "fid", ".", "device", "\n", "dims", "=", "conf", ".", "metrics", ".", "fid", ".", "dims", "\n", "\n", "gt_files", "=", "[", "pathlib", ".", "Path", "(", "a", ")", "for", "a", "in", "gt_files", "]", "\n", "pred_files", "=", "[", "pathlib", ".", "Path", "(", "a", ")", "for", "a", "in", "pred_files", "]", "\n", "\n", "if", "len", "(", "pred_files", ")", "==", "0", ":", "\n", "        ", "logging", ".", "info", "(", "\"Skipping due to no predictions\"", ")", "\n", "return", "torch", ".", "tensor", "(", "-", "1.0", ")", "\n", "\n", "", "if", "len", "(", "gt_files", ")", "==", "0", ":", "\n", "        ", "logging", ".", "info", "(", "\"Skipping due to no gt\"", ")", "\n", "return", "torch", ".", "tensor", "(", "-", "1.0", ")", "\n", "\n", "", "block_idx", "=", "fid_score", ".", "InceptionV3", ".", "BLOCK_INDEX_BY_DIM", "[", "dims", "]", "\n", "\n", "model", "=", "fid_score", ".", "InceptionV3", "(", "[", "block_idx", "]", ")", ".", "to", "(", "device", ")", "\n", "\n", "m1", ",", "s1", "=", "fid_score", ".", "calculate_activation_statistics", "(", "gt_files", ",", "model", ",", "batch_size", ",", "\n", "dims", ",", "device", ")", "\n", "m2", ",", "s2", "=", "fid_score", ".", "calculate_activation_statistics", "(", "pred_files", ",", "model", ",", "batch_size", ",", "\n", "dims", ",", "device", ")", "\n", "fid_value", "=", "fid_score", ".", "calculate_frechet_distance", "(", "m1", ",", "s1", ",", "m2", ",", "s2", ")", "\n", "\n", "return", "fid_value", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.plan2scene.compute_fid.compute_FID_for_houses": [[54, 141], ["os.abspath", "str().replace", "os.join", "houses.items", "compute_fid.calculate_fid_given_files", "shutil.rmtree", "os.exists", "os.makedirs", "os.makedirs", "os.mkdir", "os.mkdir", "house.rooms.items", "logging.info", "logging.info", "len", "logging.warning", "len", "logging.warning", "logging.info", "calculate_fid_given_files.item", "len", "len", "str", "os.join", "isinstance", "isinstance", "os.mkdir", "os.mkdir", "len", "logging.warning", "numpy.random.choice", "gt_crop_paths.extend", "uuid.uuid4", "os.join", "len", "len", "len", "len", "str", "len", "len", "len", "len", "set().intersection", "os.mkdir", "os.mkdir", "enumerate", "len", "set", "os.join", "gt_crops.items", "gt_crop.image.save", "gt_crop_paths.append", "range", "set", "str", "os.join", "os.join", "prediction_crops[].image.save", "pred_crop_paths.append", "str", "str", "os.join", "os.join", "prediction_crops[].image.save", "pred_crop_paths.append", "str", "str", "os.join", "os.join", "str", "str"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.plan2scene.compute_fid.calculate_fid_given_files", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.common.image_description.ImageDescription.save", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.common.image_description.ImageDescription.save", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.common.image_description.ImageDescription.save"], ["", "def", "compute_FID_for_houses", "(", "conf", ":", "ConfigManager", ",", "houses", ":", "dict", ",", "gt_houses", ":", "dict", ",", "allowed_room_types", ":", "list", "=", "None", ",", "allowed_surface_types", ":", "list", "=", "None", ",", "\n", "log", ":", "bool", "=", "False", ",", "multiprop_count", ":", "int", "=", "0", ")", "->", "dict", ":", "\n", "    ", "\"\"\"\n    Compute FID score given houses with ground truth surface crops and predicted textures.\n    Computation is restricted to the surfaces that match the specified criteria.\n    :param conf: Config Manager\n    :param houses: Houses with predicted textures\n    :param gt_houses: Houses with ground truth crops assigned.\n    :param allowed_room_types: Room types included in the computation.\n    :param allowed_surface_types: Surface types included in the computation.\n    :param log: Specify true to log.\n    :param multiprop_count: Texture synthesis repeat count per surface.\n    :return: FID results\n    \"\"\"", "\n", "# FID library we use require images to be saved in the disk.", "\n", "temp_location", "=", "osp", ".", "abspath", "(", "\"./tmp/fid\"", ")", "\n", "random_key", "=", "str", "(", "uuid", ".", "uuid4", "(", ")", ")", ".", "replace", "(", "\"-\"", ",", "\"\"", ")", "\n", "temp_location", "=", "osp", ".", "join", "(", "temp_location", ",", "random_key", ")", "\n", "\n", "if", "not", "osp", ".", "exists", "(", "temp_location", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "temp_location", ")", "\n", "\n", "", "gt_crop_paths", "=", "[", "]", "\n", "pred_crop_paths", "=", "[", "]", "\n", "\n", "# Save all prediction crops", "\n", "for", "house_key", ",", "house", "in", "houses", ".", "items", "(", ")", ":", "\n", "        ", "gt_house", "=", "gt_houses", "[", "house_key", "]", "\n", "os", ".", "mkdir", "(", "osp", ".", "join", "(", "temp_location", ",", "house_key", ")", ")", "\n", "for", "room_index", ",", "room", "in", "house", ".", "rooms", ".", "items", "(", ")", ":", "\n", "            ", "gt_room", "=", "gt_house", ".", "rooms", "[", "room_index", "]", "\n", "assert", "isinstance", "(", "room", ",", "Room", ")", "\n", "assert", "isinstance", "(", "gt_room", ",", "Room", ")", "\n", "\n", "os", ".", "mkdir", "(", "osp", ".", "join", "(", "temp_location", ",", "house_key", ",", "str", "(", "room_index", ")", ")", ")", "\n", "\n", "if", "allowed_room_types", "is", "None", "or", "len", "(", "set", "(", "room", ".", "types", ")", ".", "intersection", "(", "set", "(", "allowed_room_types", ")", ")", ")", ">", "0", ":", "\n", "                ", "for", "surface", "in", "conf", ".", "surfaces", ":", "\n", "                    ", "if", "allowed_surface_types", "is", "None", "or", "surface", "in", "allowed_surface_types", ":", "\n", "                        ", "prediction_crops", "=", "room", ".", "surface_textures", "[", "surface", "]", "\n", "gt_crops", "=", "gt_room", ".", "surface_textures", "[", "surface", "]", "\n", "\n", "os", ".", "mkdir", "(", "osp", ".", "join", "(", "temp_location", ",", "house_key", ",", "str", "(", "room_index", ")", ",", "surface", ")", ")", "\n", "\n", "# Save GT Crop", "\n", "for", "gt_index", ",", "(", "gt_key", ",", "gt_crop", ")", "in", "enumerate", "(", "gt_crops", ".", "items", "(", ")", ")", ":", "\n", "                            ", "gt_crop", ".", "image", ".", "save", "(", "osp", ".", "join", "(", "temp_location", ",", "house_key", ",", "str", "(", "room_index", ")", ",", "surface", ",", "f\"gt_{gt_index}.png\"", ")", ")", "\n", "gt_crop_paths", ".", "append", "(", "osp", ".", "join", "(", "temp_location", ",", "house_key", ",", "str", "(", "room_index", ")", ",", "surface", ",", "f\"gt_{gt_index}.png\"", ")", ")", "\n", "\n", "# Save Prediction Crop", "\n", "", "if", "multiprop_count", "==", "0", ":", "\n", "                            ", "if", "\"prop\"", "in", "prediction_crops", ":", "\n", "                                ", "prediction_crops", "[", "\"prop\"", "]", ".", "image", ".", "save", "(", "osp", ".", "join", "(", "temp_location", ",", "house_key", ",", "str", "(", "room_index", ")", ",", "surface", ",", "\"pred.png\"", ")", ")", "\n", "pred_crop_paths", ".", "append", "(", "osp", ".", "join", "(", "temp_location", ",", "house_key", ",", "str", "(", "room_index", ")", ",", "surface", ",", "\"pred.png\"", ")", ")", "\n", "", "", "else", ":", "\n", "                            ", "for", "prop_index", "in", "range", "(", "multiprop_count", ")", ":", "\n", "                                ", "if", "f\"prop_{prop_index}\"", "in", "prediction_crops", ":", "\n", "                                    ", "prediction_crops", "[", "f\"prop_{prop_index}\"", "]", ".", "image", ".", "save", "(", "\n", "osp", ".", "join", "(", "temp_location", ",", "house_key", ",", "str", "(", "room_index", ")", ",", "surface", ",", "f\"pred_{prop_index}.png\"", ")", ")", "\n", "pred_crop_paths", ".", "append", "(", "osp", ".", "join", "(", "temp_location", ",", "house_key", ",", "str", "(", "room_index", ")", ",", "surface", ",", "f\"pred_{prop_index}.png\"", ")", ")", "\n", "\n", "", "", "", "", "", "", "", "", "if", "log", ":", "\n", "        ", "logging", ".", "info", "(", "\"Method Crop Count: %d\"", "%", "(", "len", "(", "pred_crop_paths", ")", ")", ")", "\n", "logging", ".", "info", "(", "\"GT Crop Count: %d\"", "%", "(", "len", "(", "gt_crop_paths", ")", ")", ")", "\n", "\n", "# Check whether we have sufficient GT crops.", "\n", "", "if", "len", "(", "gt_crop_paths", ")", "<", "conf", ".", "metrics", ".", "fid", ".", "minimum_crop_count", "/", "2", ":", "\n", "        ", "logging", ".", "warning", "(", "\"Insufficient GT crops. You have only %d crops.\"", "%", "(", "len", "(", "gt_crop_paths", ")", ")", ")", "\n", "", "elif", "len", "(", "gt_crop_paths", ")", "<", "conf", ".", "metrics", ".", "fid", ".", "minimum_crop_count", ":", "\n", "        ", "logging", ".", "warning", "(", "\"Insufficient GT crops. Sampled %d more crops with replacement.\"", "%", "(", "conf", ".", "metrics", ".", "fid", ".", "minimum_crop_count", "-", "len", "(", "gt_crop_paths", ")", ")", ")", "\n", "new_gt_crop_paths", "=", "np", ".", "random", ".", "choice", "(", "gt_crop_paths", ",", "(", "conf", ".", "metrics", ".", "fid", ".", "minimum_crop_count", "-", "len", "(", "gt_crop_paths", ")", ")", ")", "\n", "gt_crop_paths", ".", "extend", "(", "new_gt_crop_paths", ")", "\n", "\n", "# Check whether we have sufficient predictions", "\n", "", "if", "len", "(", "pred_crop_paths", ")", "<", "conf", ".", "metrics", ".", "fid", ".", "minimum_crop_count", ":", "\n", "        ", "logging", ".", "warning", "(", "\"Insufficient prediction crops. You have %d crops.\"", "%", "(", "len", "(", "pred_crop_paths", ")", ")", ")", "\n", "\n", "", "fid_score", "=", "calculate_fid_given_files", "(", "conf", ",", "gt_files", "=", "gt_crop_paths", ",", "pred_files", "=", "pred_crop_paths", ",", "batch_size", "=", "conf", ".", "metrics", ".", "fid", ".", "batch_size", ")", "\n", "\n", "# when done, delete", "\n", "shutil", ".", "rmtree", "(", "temp_location", ")", "\n", "if", "log", ":", "\n", "        ", "logging", ".", "info", "(", "\"FID: %.5f [%d/%d]\"", "%", "(", "fid_score", ",", "len", "(", "pred_crop_paths", ")", ",", "len", "(", "gt_crop_paths", ")", ")", ")", "\n", "", "return", "{", "\n", "\"score\"", ":", "fid_score", ".", "item", "(", ")", ",", "\n", "\"pred_crop_count\"", ":", "len", "(", "pred_crop_paths", ")", ",", "\n", "\"gt_crop_count\"", ":", "len", "(", "gt_crop_paths", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.plan2scene.compute_fid.compute_FID_scores": [[144, 201], ["compute_fid.compute_FID_for_houses", "logging.info", "compute_fid.compute_FID_for_houses", "compute_fid.compute_FID_for_houses", "logging.info", "logging.info", "logging.info", "logging.info", "logging.info", "logging.info", "logging.info", "logging.info", "room_typed_fid_scores.items", "surface_typed_fid_scores.items"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.plan2scene.compute_fid.compute_FID_for_houses", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.plan2scene.compute_fid.compute_FID_for_houses", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.plan2scene.compute_fid.compute_FID_for_houses"], ["", "def", "compute_FID_scores", "(", "conf", ":", "ConfigManager", ",", "gt_houses", ":", "dict", ",", "pred_houses", ":", "dict", ",", "log", ":", "bool", "=", "False", ",", "multiprop_count", ":", "int", "=", "0", ")", "->", "dict", ":", "\n", "    ", "\"\"\"\n    Compute FID scores between textures assigned to pred_houses and gt_houses. We consider various criteria such as all surfaces FID score,\n    room type conditioned FID score, surface type conditioned FID score.\n    :param conf: Config manager.\n    :param gt_houses: Houses having ground truth reference crops assigned.\n    :param pred_houses: Houses having predicted textures.\n    :param log: Specify true to log.\n    :param multiprop_count: Texture synthesis repeat count per surface.\n    :return: FID report\n    \"\"\"", "\n", "# All Surfaces", "\n", "if", "log", ":", "\n", "        ", "logging", ".", "info", "(", "\"For all surfaces:\"", ")", "\n", "", "all_surfaces_fid_score", "=", "compute_FID_for_houses", "(", "conf", ",", "pred_houses", ",", "gt_houses", ",", "allowed_room_types", "=", "None", ",", "\n", "allowed_surface_types", "=", "None", ",", "log", "=", "log", ",", "multiprop_count", "=", "multiprop_count", ")", "\n", "# For different surface types", "\n", "surface_typed_fid_scores", "=", "{", "}", "\n", "for", "surface_type", "in", "conf", ".", "surfaces", ":", "\n", "        ", "if", "log", ":", "\n", "            ", "logging", ".", "info", "(", "f\"For {surface_type}:\"", ")", "\n", "", "surface_typed_fid_scores", "[", "surface_type", "]", "=", "compute_FID_for_houses", "(", "conf", ",", "pred_houses", ",", "gt_houses", ",", "\n", "allowed_room_types", "=", "None", ",", "allowed_surface_types", "=", "[", "surface_type", "]", ",", "log", "=", "log", ",", "\n", "multiprop_count", "=", "multiprop_count", ")", "\n", "# For different room types", "\n", "", "room_typed_fid_scores", "=", "{", "}", "\n", "for", "room_type", "in", "conf", ".", "room_types", ":", "\n", "        ", "if", "log", ":", "\n", "            ", "logging", ".", "info", "(", "f\"For {room_type}:\"", ")", "\n", "", "room_typed_fid_scores", "[", "room_type", "]", "=", "compute_FID_for_houses", "(", "conf", ",", "pred_houses", ",", "gt_houses", ",", "\n", "allowed_room_types", "=", "[", "room_type", "]", ",", "allowed_surface_types", "=", "None", ",", "log", "=", "log", ",", "\n", "multiprop_count", "=", "multiprop_count", ")", "\n", "\n", "", "if", "log", ":", "\n", "# Log results", "\n", "        ", "logging", ".", "info", "(", "\"\"", ")", "\n", "logging", ".", "info", "(", "\"Results\"", ")", "\n", "logging", ".", "info", "(", "\"MultiProp Count: %d\"", "%", "(", "multiprop_count", ")", ")", "\n", "for", "surface_type", "in", "conf", ".", "surfaces", ":", "\n", "            ", "logging", ".", "info", "(", "\"%s FID: %.6f\\t [Pred: %d\\t GT: %d]\"", "%", "(", "\n", "\n", "surface_type", ",", "surface_typed_fid_scores", "[", "surface_type", "]", "[", "\"score\"", "]", ",", "surface_typed_fid_scores", "[", "surface_type", "]", "[", "\"pred_crop_count\"", "]", ",", "\n", "surface_typed_fid_scores", "[", "surface_type", "]", "[", "\"gt_crop_count\"", "]", ")", ")", "\n", "\n", "", "for", "room_type", "in", "conf", ".", "room_types", ":", "\n", "            ", "logging", ".", "info", "(", "\"%s FID: %.6f\\t [Pred: %d\\t GT: %d]\"", "%", "(", "\n", "room_type", ",", "room_typed_fid_scores", "[", "room_type", "]", "[", "\"score\"", "]", ",", "room_typed_fid_scores", "[", "room_type", "]", "[", "\"pred_crop_count\"", "]", ",", "\n", "room_typed_fid_scores", "[", "room_type", "]", "[", "\"gt_crop_count\"", "]", ")", ")", "\n", "\n", "", "logging", ".", "info", "(", "\"All surfaces FID: %.6f\\t [Pred: %d\\t GT: %d]\"", "%", "(", "\n", "all_surfaces_fid_score", "[", "\"score\"", "]", ",", "all_surfaces_fid_score", "[", "\"pred_crop_count\"", "]", ",", "all_surfaces_fid_score", "[", "\"gt_crop_count\"", "]", ")", ")", "\n", "\n", "", "return", "{", "\n", "\"multiprop_count\"", ":", "multiprop_count", ",", "\n", "\"all_surfaces_fid\"", ":", "all_surfaces_fid_score", ",", "\n", "\"room_typed_fid_scores\"", ":", "{", "k", ":", "v", "for", "k", ",", "v", "in", "room_typed_fid_scores", ".", "items", "(", ")", "}", ",", "\n", "\"surface_typed_fid_scores\"", ":", "{", "k", ":", "v", "for", "k", ",", "v", "in", "surface_typed_fid_scores", ".", "items", "(", ")", "}", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.plan2scene.compute_fid.process": [[204, 261], ["conf.get_data_list", "plan2scene.common.house_parser.parse_houses", "plan2scene.common.house_parser.parse_houses", "enumerate", "enumerate", "compute_fid.compute_FID_scores", "logging.info", "plan2scene.common.house_parser.parse_houses.items", "plan2scene.common.house_parser.load_house_crops", "plan2scene.common.house_parser.parse_houses.items", "plan2scene.common.house_parser.load_house_crops", "os.exists", "os.makedirs", "os.makedirs", "open", "json.dump", "conf.data_paths.arch_path_spec.format", "conf.data_paths.photoroom_path_spec.format", "conf.data_paths.arch_path_spec.format", "conf.data_paths.photoroom_path_spec.format", "logging.info", "os.join", "logging.info", "os.join", "os.join", "os.join", "os.join", "os.join", "len", "len"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.plan2scene.config_manager.ConfigManager.get_data_list", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.common.house_parser.parse_houses", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.common.house_parser.parse_houses", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.plan2scene.compute_fid.compute_FID_scores", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.common.house_parser.load_house_crops", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.common.house_parser.load_house_crops", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len"], ["", "def", "process", "(", "conf", ":", "ConfigManager", ",", "output_path", ":", "str", ",", "pred_textures_path", ":", "str", ",", "gt_crops_path", ":", "str", ",", "split", ":", "str", ",", "exclude_prior_predictions_path", ":", "str", ",", "\n", "restrict_prior_predictions_path", ":", "str", ",", "log", ":", "bool", ",", "multiprop_count", ":", "int", ")", "->", "None", ":", "\n", "    ", "\"\"\"\n    Compute FID scores for specified surfaces of a house.\n    :param conf: Config Manager\n    :param output_path: Path to output results directory.\n    :param pred_textures_path: Path containing predicted textures for houses.\n    :param gt_crops_path: Path containing rectified crops assigned to houses.\n    :param split: Val/test\n    :param exclude_prior_predictions_path: Surfaces that has texture predictions at this path are excluded from the evaluation.\n    :param restrict_prior_predictions_path: Evaluation is exclusive to the surface that has a texture prediction at this path.\n    :param log: Specify true to log.\n    :param multiprop_count: Texture synthesis repeat count per surface.\n    \"\"\"", "\n", "# Load houses", "\n", "house_keys", "=", "conf", ".", "get_data_list", "(", "split", ")", "\n", "gt_houses", "=", "parse_houses", "(", "conf", ",", "house_keys", ",", "house_path_spec", "=", "conf", ".", "data_paths", ".", "arch_path_spec", ".", "format", "(", "split", "=", "split", ",", "\n", "house_key", "=", "\"{house_key}\"", ")", ",", "\n", "photoroom_csv_path_spec", "=", "conf", ".", "data_paths", ".", "photoroom_path_spec", ".", "format", "(", "split", "=", "split", ",", "\n", "drop_fraction", "=", "conf", ".", "drop_fraction", ",", "\n", "house_key", "=", "\"{house_key}\"", ")", ")", "\n", "\n", "pred_houses", "=", "parse_houses", "(", "conf", ",", "house_keys", ",", "house_path_spec", "=", "conf", ".", "data_paths", ".", "arch_path_spec", ".", "format", "(", "split", "=", "split", ",", "\n", "house_key", "=", "\"{house_key}\"", ")", ",", "\n", "photoroom_csv_path_spec", "=", "conf", ".", "data_paths", ".", "photoroom_path_spec", ".", "format", "(", "split", "=", "split", ",", "\n", "drop_fraction", "=", "conf", ".", "drop_fraction", ",", "\n", "house_key", "=", "\"{house_key}\"", ")", ")", "\n", "\n", "# Load ground truth crops", "\n", "for", "i", ",", "(", "house_key", ",", "house", ")", "in", "enumerate", "(", "gt_houses", ".", "items", "(", ")", ")", ":", "\n", "        ", "if", "log", ":", "\n", "            ", "logging", ".", "info", "(", "\"[%d/%d] Loading GT House %s\"", "%", "(", "i", ",", "len", "(", "gt_houses", ")", ",", "house_key", ")", ")", "\n", "", "load_house_crops", "(", "conf", ",", "house", ",", "osp", ".", "join", "(", "gt_crops_path", ",", "house_key", ")", ")", "\n", "\n", "# Load predictions", "\n", "", "for", "i", ",", "(", "house_key", ",", "house", ")", "in", "enumerate", "(", "pred_houses", ".", "items", "(", ")", ")", ":", "\n", "        ", "if", "log", ":", "\n", "            ", "logging", ".", "info", "(", "\"[%d/%d] Loading Prediction House %s\"", "%", "(", "i", ",", "len", "(", "pred_houses", ")", ",", "house_key", ")", ")", "\n", "", "exclude_prior_predictions_house_path", "=", "None", "\n", "restrict_prior_predictions_house_path", "=", "None", "\n", "if", "restrict_prior_predictions_path", "is", "not", "None", ":", "\n", "            ", "restrict_prior_predictions_house_path", "=", "osp", ".", "join", "(", "restrict_prior_predictions_path", ",", "house_key", ")", "\n", "", "if", "exclude_prior_predictions_path", "is", "not", "None", ":", "\n", "            ", "exclude_prior_predictions_house_path", "=", "osp", ".", "join", "(", "exclude_prior_predictions_path", ",", "house_key", ")", "\n", "\n", "", "load_house_crops", "(", "conf", ",", "house", ",", "\n", "osp", ".", "join", "(", "pred_textures_path", ",", "house_key", ")", ",", "exclude_prior_path", "=", "exclude_prior_predictions_house_path", ",", "\n", "restrict_prior_path", "=", "restrict_prior_predictions_house_path", ")", "\n", "\n", "", "results", "=", "compute_FID_scores", "(", "conf", "=", "conf", ",", "pred_houses", "=", "pred_houses", ",", "gt_houses", "=", "gt_houses", ",", "log", "=", "log", ",", "\n", "multiprop_count", "=", "multiprop_count", ")", "\n", "\n", "if", "not", "osp", ".", "exists", "(", "output_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "output_path", ")", "\n", "", "with", "open", "(", "osp", ".", "join", "(", "output_path", ",", "\"fid_results.json\"", ")", ",", "\"w\"", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "results", ",", "f", ",", "indent", "=", "4", ")", "\n", "", "logging", ".", "info", "(", "\"Saved {path}\"", ".", "format", "(", "path", "=", "osp", ".", "join", "(", "output_path", ",", "\"fid_results.json\"", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.plan2scene.place_object_cad_models.compute_object_rotation": [[23, 96], ["abs", "abs", "len", "len", "wall_outlines.append", "plan2scene.house_gen.geom_util.point_line_seg_distance", "hole_walls.append", "list", "polygonize", "numpy.degrees", "plan2scene.house_gen.geom_util.ray_test", "plan2scene.house_gen.geom_util.ray_test", "plan2scene.house_gen.geom_util.ray_test", "plan2scene.house_gen.geom_util.ray_test", "math.atan2", "plan2scene.house_gen.geom_util.ray_test", "plan2scene.house_gen.geom_util.ray_test", "plan2scene.house_gen.geom_util.ray_test", "plan2scene.house_gen.geom_util.ray_test"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.house_gen.geom_util.point_line_seg_distance", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.house_gen.geom_util.ray_test", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.house_gen.geom_util.ray_test", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.house_gen.geom_util.ray_test", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.house_gen.geom_util.ray_test", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.house_gen.geom_util.ray_test", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.house_gen.geom_util.ray_test", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.house_gen.geom_util.ray_test", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.house_gen.geom_util.ray_test"], ["def", "compute_object_rotation", "(", "p1", ",", "p2", ",", "ratio", ":", "str", ",", "face_hole", ":", "bool", ",", "room_walls", ":", "list", ",", "full_wall_mask", ")", "->", "float", ":", "\n", "    ", "\"\"\"\n    Compute YAW rotation angle of an object.\n    :param p1: Position AABB start point\n    :param p2: Position AABB end point\n    :param ratio: wide or narrow. Wide object examples: TVs, Cabinets. Narrow object example: Toilets.\n    :param face_hole: Should the object face the wall with a door?\n    :param room_walls: Walls of the room\n    :param full_wall_mask: Mask of the room boundary\n    :return: Angle in degrees\n    \"\"\"", "\n", "from", "shapely", ".", "ops", "import", "polygonize", "\n", "assert", "ratio", "in", "[", "\"wide\"", ",", "\"narrow\"", "]", "\n", "assert", "len", "(", "p1", ")", "==", "2", "\n", "assert", "len", "(", "p2", ")", "==", "2", "\n", "\n", "dx", "=", "abs", "(", "p2", "[", "0", "]", "-", "p1", "[", "0", "]", ")", "\n", "dz", "=", "abs", "(", "p2", "[", "1", "]", "-", "p1", "[", "1", "]", ")", "\n", "p", "=", "(", "(", "p1", "[", "0", "]", "+", "p2", "[", "0", "]", ")", "/", "2", ",", "(", "p1", "[", "1", "]", "+", "p2", "[", "1", "]", ")", "/", "2", ")", "\n", "\n", "wall_outlines", "=", "[", "]", "\n", "hole_walls", "=", "[", "]", "\n", "for", "wall", "in", "room_walls", ":", "\n", "        ", "if", "wall", ".", "holes", ":", "\n", "            ", "hole_walls", ".", "append", "(", "wall", ")", "\n", "", "wall_outlines", ".", "append", "(", "(", "wall", ".", "p1", ",", "wall", ".", "p2", ")", ")", "\n", "\n", "", "if", "face_hole", "and", "hole_walls", ":", "\n", "# Old heuristic method for closets. No longer used.", "\n", "        ", "hole_wall", "=", "hole_walls", "[", "0", "]", "\n", "\n", "wall_polygon", "=", "list", "(", "polygonize", "(", "wall_outlines", ")", ")", "[", "0", "]", "\n", "room_center", "=", "wall_polygon", ".", "centroid", ".", "coords", "[", ":", "]", "[", "0", "]", "\n", "_", ",", "closest_point", "=", "point_line_seg_distance", "(", "(", "hole_wall", ".", "p1", "[", "0", "]", ",", "hole_wall", ".", "p1", "[", "2", "]", ")", ",", "(", "hole_wall", ".", "p2", "[", "0", "]", ",", "hole_wall", ".", "p2", "[", "2", "]", ")", ",", "room_center", ",", "extend_line", "=", "True", ")", "\n", "degree", "=", "(", "np", ".", "degrees", "(", "math", ".", "atan2", "(", "closest_point", "[", "1", "]", "-", "room_center", "[", "1", "]", ",", "closest_point", "[", "0", "]", "-", "room_center", "[", "0", "]", ")", ")", "-", "90", ")", "%", "360", "\n", "return", "degree", "\n", "", "else", ":", "\n", "        ", "if", "ratio", "==", "\"wide\"", ":", "\n", "# The object is wide. (Length parallel to the wall facing side is greater than the length perpendicular to wall facing side)", "\n", "# E.g. Televisions, cupboards", "\n", "            ", "if", "dx", ">", "dz", ":", "\n", "                ", "d_plus", ",", "_", "=", "ray_test", "(", "full_wall_mask", ",", "p", ",", "(", "0", ",", "1", ")", ",", "10000", ")", "\n", "d_minus", ",", "_", "=", "ray_test", "(", "full_wall_mask", ",", "p", ",", "(", "0", ",", "-", "1", ")", ",", "10000", ")", "\n", "if", "d_plus", ">", "d_minus", ":", "\n", "                    ", "return", "0", "\n", "", "else", ":", "\n", "                    ", "return", "180", "\n", "", "", "else", ":", "\n", "                ", "d_plus", ",", "_", "=", "ray_test", "(", "full_wall_mask", ",", "p", ",", "(", "1", ",", "0", ")", ",", "10000", ")", "\n", "d_minus", ",", "_", "=", "ray_test", "(", "full_wall_mask", ",", "p", ",", "(", "-", "1", ",", "0", ")", ",", "10000", ")", "\n", "if", "d_plus", ">", "d_minus", ":", "\n", "                    ", "return", "270", "\n", "", "else", ":", "\n", "                    ", "return", "90", "\n", "", "", "", "elif", "ratio", "==", "\"narrow\"", ":", "\n", "# The object is narrow. (Length parallel to the wall facing side is shorter than the length perpendicular to wall facing side)", "\n", "# E.g. Toilet", "\n", "            ", "if", "dx", ">", "dz", ":", "# TODO: Need to verify this case", "\n", "                ", "d_plus", ",", "_", "=", "ray_test", "(", "full_wall_mask", ",", "p", ",", "(", "1", ",", "0", ")", ",", "10000", ")", "\n", "d_minus", ",", "_", "=", "ray_test", "(", "full_wall_mask", ",", "p", ",", "(", "-", "1", ",", "0", ")", ",", "10000", ")", "\n", "if", "d_plus", ">", "d_minus", ":", "\n", "                    ", "return", "270", "\n", "", "else", ":", "\n", "                    ", "return", "90", "\n", "", "", "else", ":", "\n", "                ", "d_plus", ",", "_", "=", "ray_test", "(", "full_wall_mask", ",", "p", ",", "(", "0", ",", "1", ")", ",", "10000", ")", "\n", "d_minus", ",", "_", "=", "ray_test", "(", "full_wall_mask", ",", "p", ",", "(", "0", ",", "-", "1", ")", ",", "10000", ")", "\n", "if", "d_plus", ">", "d_minus", ":", "\n", "                    ", "return", "0", "\n", "", "else", ":", "\n", "                    ", "return", "180", "\n", "# return 0 #or 180", "\n", "", "", "", "", "assert", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.plan2scene.place_object_cad_models.assign_objects_to_rooms": [[98, 128], ["rooms.items", "sorted", "room.get_polyline", "shapely.geometry.Polygon", "shapely.geometry.Polygon", "room_key_objects_map[].append", "assigned_objects.append", "sorted.append", "shapely.geometry.Polygon.intersection", "shapely.geometry.Polygon.intersection"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.models.room.Room.get_polyline"], ["", "def", "assign_objects_to_rooms", "(", "rooms", ":", "dict", ",", "objects", ":", "list", ",", "arch_defaults", ":", "Config", ")", "->", "dict", ":", "\n", "    ", "\"\"\"\n    Assign objects to rooms.\n    :param rooms: Dictionary of rooms of a house\n    :param objects: List of ObjectAnnotations\n    :param arch_defaults: conf.house_gen\n    :return: Dictionary mapping from room_id to a list of objects assigned to the room.\n    \"\"\"", "\n", "room_key_obj", "=", "[", "]", "\n", "room_key_objects_map", "=", "{", "}", "\n", "for", "room_key", ",", "room", "in", "rooms", ".", "items", "(", ")", ":", "\n", "# room.objects = []", "\n", "        ", "room_key_objects_map", "[", "room_key", "]", "=", "[", "]", "\n", "polyline", "=", "room", ".", "get_polyline", "(", ")", "\n", "room_polygon", "=", "Polygon", "(", "[", "(", "a", "[", "0", "]", ",", "a", "[", "2", "]", ")", "for", "a", "in", "polyline", "]", ")", "\n", "for", "obj", "in", "objects", ":", "\n", "            ", "obj_box", "=", "Polygon", "(", "[", "(", "obj", ".", "p1", "[", "0", "]", ",", "obj", ".", "p1", "[", "1", "]", ")", ",", "(", "obj", ".", "p2", "[", "0", "]", ",", "obj", ".", "p1", "[", "1", "]", ")", ",", "(", "obj", ".", "p2", "[", "0", "]", ",", "obj", ".", "p2", "[", "1", "]", ")", ",", "(", "obj", ".", "p1", "[", "0", "]", ",", "obj", ".", "p2", "[", "1", "]", ")", "]", ")", "\n", "if", "obj_box", ".", "intersection", "(", "room_polygon", ")", ".", "area", ">", "obj_box", ".", "area", "*", "arch_defaults", ".", "object_aabb_room_intersection_threshold", ":", "\n", "                ", "room_key_obj", ".", "append", "(", "(", "obj_box", ".", "intersection", "(", "room_polygon", ")", ".", "area", "/", "obj_box", ".", "area", ",", "room_key", ",", "obj", ")", ")", "\n", "\n", "", "", "", "room_key_obj", "=", "sorted", "(", "room_key_obj", ",", "key", "=", "lambda", "a", ":", "a", "[", "0", "]", ",", "reverse", "=", "True", ")", "\n", "assigned_objects", "=", "[", "]", "\n", "for", "overlap", ",", "room_key", ",", "obj", "in", "room_key_obj", ":", "\n", "        ", "if", "obj", "not", "in", "assigned_objects", ":", "\n", "            ", "room", "=", "rooms", "[", "room_key", "]", "\n", "room_key_objects_map", "[", "room_key", "]", ".", "append", "(", "obj", ")", "\n", "assigned_objects", ".", "append", "(", "obj", ")", "\n", "# logging.info(\"Assigned: %s => %s\" % (str(obj), str(room.types)))", "\n", "\n", "", "", "return", "room_key_objects_map", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.plan2scene.place_object_cad_models.find_closest_wall": [[130, 157], ["plan2scene.house_gen.geom_util.point_line_seg_distance", "plan2scene.house_gen.geom_util.hole_to_line", "plan2scene.house_gen.geom_util.point_line_seg_distance"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.house_gen.geom_util.point_line_seg_distance", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.house_gen.geom_util.hole_to_line", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.house_gen.geom_util.point_line_seg_distance"], ["", "def", "find_closest_wall", "(", "candidate_points", ",", "candidate_walls", ",", "house_gen_conf", ":", "Config", ")", "->", "Wall", ":", "\n", "    ", "\"\"\"\n    Find closest wall to candidate points\n    :param candidate_points: Candidate points\n    :param candidate_walls: Candidate walls\n    :param house_gen_conf: house_gen_conf\n    :return: \n    \"\"\"", "\n", "shortest_distance", "=", "LARGE_VALUE", "\n", "closest_wall", "=", "None", "\n", "for", "p", "in", "candidate_points", ":", "\n", "        ", "for", "wall", "in", "candidate_walls", ":", "\n", "            ", "dist", ",", "c_point", "=", "point_line_seg_distance", "(", "(", "wall", ".", "p1", "[", "0", "]", ",", "wall", ".", "p1", "[", "2", "]", ")", ",", "(", "wall", ".", "p2", "[", "0", "]", ",", "wall", ".", "p2", "[", "2", "]", ")", ",", "p", ")", "\n", "# c_point should not lay in a hole", "\n", "in_hole", "=", "False", "\n", "for", "hole", "in", "wall", ".", "holes", ":", "\n", "                ", "if", "hole", ".", "hole_type", "!=", "\"Door\"", ":", "\n", "                    ", "continue", "\n", "", "hole_start", ",", "hole_end", "=", "hole_to_line", "(", "(", "wall", ".", "p1", "[", "0", "]", ",", "wall", ".", "p1", "[", "2", "]", ")", ",", "(", "wall", ".", "p2", "[", "0", "]", ",", "wall", ".", "p2", "[", "2", "]", ")", ",", "hole", ".", "start", ",", "hole", ".", "end", ")", "\n", "if", "point_line_seg_distance", "(", "hole_start", ",", "hole_end", ",", "c_point", ")", "[", "0", "]", "<=", "house_gen_conf", ".", "in_hole_distance_threshold", ":", "\n", "                    ", "in_hole", "=", "True", "\n", "break", "\n", "", "", "if", "not", "in_hole", "and", "dist", "<", "shortest_distance", ":", "\n", "                ", "shortest_distance", "=", "dist", "\n", "closest_wall", "=", "wall", "\n", "\n", "", "", "", "return", "closest_wall", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.plan2scene.place_object_cad_models.get_object_json": [[159, 305], ["abs", "abs", "place_object_cad_models.find_closest_wall", "sorted", "place_object_cad_models.find_suitable_cad_model", "plan2scene.house_gen.geom_util.get_transform", "plan2scene.house_gen.geom_util.point_line_seg_distance", "logging.error", "plan2scene.house_gen.geom_util.get_room_mask", "place_object_cad_models.compute_object_rotation", "max", "max", "min", "min", "sorted.append", "max", "plan2scene.house_gen.geom_util.find_angle", "max", "min", "min", "min", "abs", "abs", "abs", "abs", "len", "abs"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.plan2scene.place_object_cad_models.find_closest_wall", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.plan2scene.place_object_cad_models.find_suitable_cad_model", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.house_gen.geom_util.get_transform", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.house_gen.geom_util.point_line_seg_distance", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.house_gen.geom_util.get_room_mask", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.plan2scene.place_object_cad_models.compute_object_rotation", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.house_gen.geom_util.find_angle", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len"], ["", "def", "get_object_json", "(", "obj", ":", "ObjectAnnotation", ",", "house", ":", "House", ",", "contained_room_id", ":", "str", ",", "house_gen_conf", ":", "Config", ",", "index", ":", "int", ")", "->", "tuple", ":", "\n", "    ", "\"\"\"\n    Generate Scene JSON representation of an object.\n    :param obj: Object Annotation\n    :param house: House containing the object\n    :param contained_room_id: Room id of the room containing obj\n    :param house_gen_conf: house_gen_conf from config\n    :param index: Index of object\n    :return: tuple (scene json entry for the object, index of next object)\n    \"\"\"", "\n", "# logging.info(\"Processing object: {object}\".format(object=obj.type))", "\n", "room_walls", "=", "[", "a", ".", "wall", "for", "a", "in", "house", ".", "rooms", "[", "contained_room_id", "]", ".", "walls", "]", "\n", "\n", "p", "=", "(", "obj", ".", "p1", "[", "0", "]", "+", "obj", ".", "p2", "[", "0", "]", ")", "/", "2.0", ",", "(", "obj", ".", "p1", "[", "1", "]", "+", "obj", ".", "p2", "[", "1", "]", ")", "/", "2.0", "\n", "dx", "=", "abs", "(", "obj", ".", "p1", "[", "0", "]", "-", "obj", ".", "p2", "[", "0", "]", ")", "\n", "dz", "=", "abs", "(", "obj", ".", "p1", "[", "1", "]", "-", "obj", ".", "p2", "[", "1", "]", ")", "\n", "scale_x", "=", "1.0", "\n", "scale_z", "=", "1.0", "\n", "\n", "if", "obj", ".", "type", "in", "house_gen_conf", ".", "object_type_specific_rules", ".", "use_centroid_as_corners", ":", "\n", "        ", "corner_points", "=", "[", "(", "(", "obj", ".", "p1", "[", "0", "]", "+", "obj", ".", "p2", "[", "0", "]", ")", "/", "2", ",", "(", "obj", ".", "p1", "[", "1", "]", "+", "obj", ".", "p2", "[", "1", "]", ")", "/", "2", ")", "]", "\n", "", "else", ":", "\n", "        ", "corner_points", "=", "[", "(", "obj", ".", "p1", "[", "0", "]", ",", "obj", ".", "p1", "[", "1", "]", ")", ",", "(", "obj", ".", "p2", "[", "0", "]", ",", "obj", ".", "p1", "[", "1", "]", ")", ",", "(", "obj", ".", "p2", "[", "0", "]", ",", "obj", ".", "p2", "[", "1", "]", ")", ",", "(", "obj", ".", "p1", "[", "0", "]", ",", "obj", ".", "p2", "[", "1", "]", ")", "]", "\n", "\n", "# Find closest wall", "\n", "", "closest_wall", "=", "find_closest_wall", "(", "corner_points", ",", "room_walls", ",", "house_gen_conf", ")", "\n", "\n", "# Calculate shortest_distance and closest point using the center of annotation", "\n", "shortest_distance", "=", "None", "\n", "closest_point", "=", "None", "\n", "available_wall_length", "=", "None", "\n", "closest_wall_length", "=", "None", "\n", "if", "closest_wall", "is", "not", "None", ":", "\n", "        ", "shortest_distance", ",", "closest_point", "=", "point_line_seg_distance", "(", "(", "closest_wall", ".", "p1", "[", "0", "]", ",", "closest_wall", ".", "p1", "[", "2", "]", ")", ",", "(", "closest_wall", ".", "p2", "[", "0", "]", ",", "closest_wall", ".", "p2", "[", "2", "]", ")", ",", "p", ",", "\n", "extend_line", "=", "True", ")", "\n", "\n", "# Distance to corners of the closest wall from the projection of object center to the wall can be a factor in determining CAD model", "\n", "dist_to_corner1", "=", "(", "(", "closest_point", "[", "0", "]", "-", "closest_wall", ".", "p1", "[", "0", "]", ")", "**", "2", "+", "(", "closest_point", "[", "1", "]", "-", "closest_wall", ".", "p1", "[", "2", "]", ")", "**", "2", ")", "**", "0.5", "\n", "dist_to_corner2", "=", "(", "(", "closest_point", "[", "0", "]", "-", "closest_wall", ".", "p2", "[", "0", "]", ")", "**", "2", "+", "(", "closest_point", "[", "1", "]", "-", "closest_wall", ".", "p2", "[", "2", "]", ")", "**", "2", ")", "**", "0.5", "\n", "available_wall_length", "=", "min", "(", "dist_to_corner1", ",", "dist_to_corner2", ")", "*", "2", "\n", "closest_wall_length", "=", "(", "(", "closest_wall", ".", "p1", "[", "0", "]", "-", "closest_wall", ".", "p2", "[", "0", "]", ")", "**", "2", "+", "(", "closest_wall", ".", "p1", "[", "2", "]", "-", "closest_wall", ".", "p2", "[", "2", "]", ")", "**", "2", ")", "**", "0.5", "\n", "\n", "# Size of the largest hole in room can be a criteria in determining model", "\n", "", "hole_sizes", "=", "[", "]", "\n", "for", "wall", "in", "room_walls", ":", "\n", "        ", "wall_length", "=", "(", "(", "wall", ".", "p2", "[", "0", "]", "-", "wall", ".", "p1", "[", "0", "]", ")", "**", "2", "+", "(", "wall", ".", "p2", "[", "2", "]", "-", "wall", ".", "p1", "[", "2", "]", ")", "**", "2", ")", "**", "0.5", "\n", "for", "hole", "in", "wall", ".", "holes", ":", "\n", "            ", "hole_sizes", ".", "append", "(", "abs", "(", "hole", ".", "end", "-", "hole", ".", "start", ")", "*", "wall_length", ")", "\n", "", "", "hole_sizes", "=", "sorted", "(", "hole_sizes", ",", "reverse", "=", "True", ")", "\n", "\n", "# Room types is a criteria in determining suitable CAD model", "\n", "room_types", "=", "house", ".", "rooms", "[", "contained_room_id", "]", ".", "types", "\n", "\n", "# Obtain the most suitable CAD model for the object", "\n", "object_model", "=", "find_suitable_cad_model", "(", "obj", ",", "closest_wall", "=", "closest_wall", ",", "house", "=", "house", ",", "house_gen_conf", "=", "house_gen_conf", ",", "room_types", "=", "room_types", ",", "\n", "room_walls", "=", "room_walls", ",", "\n", "hole_sizes", "=", "hole_sizes", ",", "available_wall_length", "=", "available_wall_length", ",", "max_box_length", "=", "max", "(", "dx", ",", "dz", ")", ")", "\n", "if", "object_model", "is", "None", ":", "\n", "        ", "logging", ".", "error", "(", "\"No model for object type: {type}\"", ".", "format", "(", "type", "=", "obj", ".", "type", ")", ")", "\n", "if", "obj", ".", "type", "!=", "\"shower\"", ":", "\n", "            ", "assert", "False", "\n", "", "return", "None", ",", "index", "\n", "\n", "", "lift", "=", "0", "# Vertical displacement", "\n", "if", "\"lift\"", "in", "object_model", ":", "\n", "        ", "lift", "=", "object_model", "[", "\"lift\"", "]", "\n", "\n", "", "if", "\"clamp_wall\"", "in", "object_model", "and", "object_model", "[", "\"clamp_wall\"", "]", "and", "closest_point", "is", "not", "None", "and", "shortest_distance", "is", "not", "None", ":", "\n", "# The CAD model is clamped to the closest wall", "\n", "        ", "correction_direction", "=", "(", "(", "closest_point", "[", "0", "]", "-", "p", "[", "0", "]", ")", "/", "shortest_distance", ",", "(", "closest_point", "[", "1", "]", "-", "p", "[", "1", "]", ")", "/", "shortest_distance", ")", "\n", "clamp_clearance", "=", "object_model", "[", "\"clamp_clearance\"", "]", "+", "house_gen_conf", ".", "def_wall_depth", "/", "2", "\n", "movement", "=", "shortest_distance", "-", "clamp_clearance", "\n", "new_p", "=", "(", "p", "[", "0", "]", "+", "movement", "*", "correction_direction", "[", "0", "]", ",", "p", "[", "1", "]", "+", "movement", "*", "correction_direction", "[", "1", "]", ")", "\n", "\n", "if", "\"closest_wall_sized\"", "in", "object_model", "and", "object_model", "[", "\"closest_wall_sized\"", "]", "and", "available_wall_length", "is", "not", "None", ":", "\n", "# The CAD model may be scaled to fit the size of closest wall", "\n", "            ", "if", "(", "closest_wall_length", "-", "available_wall_length", ")", "/", "closest_wall_length", "<", "house_gen_conf", ".", "def_object_fit_entire_wall_ratio", ":", "\n", "# We are almost fitting the entire wall. So why not fit the entire wall?", "\n", "\n", "                ", "scale_x", "=", "(", "closest_wall_length", "-", "house_gen_conf", ".", "def_wall_depth", ")", "/", "object_model", "[", "\"dx\"", "]", "\n", "scale_x", "=", "min", "(", "scale_x", ",", "1", ")", "\n", "closest_wall_center", "=", "(", "(", "closest_wall", ".", "p1", "[", "0", "]", "+", "closest_wall", ".", "p2", "[", "0", "]", ")", "/", "2", ",", "(", "closest_wall", ".", "p1", "[", "2", "]", "+", "closest_wall", ".", "p2", "[", "2", "]", ")", "/", "2", ")", "\n", "center_movement", "=", "(", "closest_wall_center", "[", "0", "]", "-", "closest_point", "[", "0", "]", ",", "closest_wall_center", "[", "1", "]", "-", "closest_point", "[", "1", "]", ")", "\n", "new_p", "=", "(", "new_p", "[", "0", "]", "+", "center_movement", "[", "0", "]", ",", "new_p", "[", "1", "]", "+", "center_movement", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "                ", "scale_x", "=", "available_wall_length", "/", "object_model", "[", "\"dx\"", "]", "\n", "scale_x", "=", "min", "(", "scale_x", ",", "1", ")", "\n", "\n", "# Compute rotation of object", "\n", "", "", "object_angle", "=", "find_angle", "(", "(", "correction_direction", "[", "0", "]", ",", "-", "correction_direction", "[", "1", "]", ")", ")", "+", "90.0", "\n", "object_pos_x", "=", "new_p", "[", "0", "]", "\n", "object_pos_z", "=", "new_p", "[", "1", "]", "\n", "", "else", ":", "# No clamp wall", "\n", "        ", "if", "\"fit_box\"", "in", "object_model", "and", "object_model", "[", "\"fit_box\"", "]", ":", "\n", "# CAD model should fit the AABB bounding box", "\n", "            ", "box_long", "=", "max", "(", "abs", "(", "obj", ".", "p1", "[", "0", "]", "-", "obj", ".", "p2", "[", "0", "]", ")", ",", "abs", "(", "obj", ".", "p1", "[", "1", "]", "-", "obj", ".", "p2", "[", "1", "]", ")", ")", "\n", "box_short", "=", "min", "(", "abs", "(", "obj", ".", "p1", "[", "0", "]", "-", "obj", ".", "p2", "[", "0", "]", ")", ",", "abs", "(", "obj", ".", "p1", "[", "1", "]", "-", "obj", ".", "p2", "[", "1", "]", ")", ")", "\n", "if", "object_model", "[", "\"ratio\"", "]", "==", "\"wide\"", ":", "\n", "                ", "scale_x", "=", "box_long", "/", "object_model", "[", "\"dx\"", "]", "\n", "scale_z", "=", "box_short", "/", "object_model", "[", "\"dz\"", "]", "\n", "", "else", ":", "\n", "                ", "scale_x", "=", "box_short", "/", "object_model", "[", "\"dx\"", "]", "\n", "scale_z", "=", "box_long", "/", "object_model", "[", "\"dz\"", "]", "\n", "\n", "", "", "if", "\"hole_sized\"", "in", "object_model", "and", "object_model", "[", "\"hole_sized\"", "]", ":", "\n", "# CAD model should be scaled to fit the size of hole in wall", "\n", "            ", "if", "len", "(", "hole_sizes", ")", ">", "0", ":", "\n", "                ", "scale_x", "=", "hole_sizes", "[", "0", "]", "/", "object_model", "[", "\"dx\"", "]", "\n", "\n", "", "", "wall_mask", "=", "get_room_mask", "(", "house", ".", "rooms", "[", "contained_room_id", "]", ")", "\n", "object_angle", "=", "compute_object_rotation", "(", "obj", ".", "p1", ",", "obj", ".", "p2", ",", "\n", "object_model", "[", "\"ratio\"", "]", ",", "\n", "object_model", "[", "\"face_hole\"", "]", ",", "\n", "room_walls", ",", "\n", "wall_mask", ")", "\n", "object_pos_x", "=", "(", "obj", ".", "p1", "[", "0", "]", "+", "obj", ".", "p2", "[", "0", "]", ")", "/", "2", "\n", "object_pos_z", "=", "(", "obj", ".", "p1", "[", "1", "]", "+", "obj", ".", "p2", "[", "1", "]", ")", "/", "2", "\n", "\n", "# Apply Scale bounds", "\n", "", "if", "\"min_scale_x\"", "in", "object_model", ":", "\n", "        ", "scale_x", "=", "max", "(", "object_model", "[", "\"min_scale_x\"", "]", ",", "scale_x", ")", "\n", "\n", "", "if", "\"min_scale_z\"", "in", "object_model", ":", "\n", "        ", "scale_z", "=", "max", "(", "object_model", "[", "\"min_scale_z\"", "]", ",", "scale_z", ")", "\n", "\n", "# Apply uniform scale", "\n", "", "if", "\"uniform_scale\"", "in", "object_model", "and", "object_model", "[", "\"uniform_scale\"", "]", ":", "\n", "        ", "scale_x", "=", "min", "(", "scale_x", ",", "scale_z", ")", "\n", "scale_z", "=", "scale_x", "\n", "\n", "# Compute transform matrix", "\n", "", "object_transform", "=", "get_transform", "(", "object_pos_x", ",", "lift", ",", "object_pos_z", ",", "object_angle", ",", "\n", "scale_x", "=", "scale_x", ",", "scale_z", "=", "scale_z", ")", "\n", "\n", "object_json", "=", "{", "\n", "\"modelId\"", ":", "object_model", "[", "\"model\"", "]", ",", "\n", "\"index\"", ":", "index", ",", "\n", "\"parentIndex\"", ":", "-", "1", ",", "\n", "\"transform\"", ":", "{", "\n", "\"rows\"", ":", "4", ",", "\n", "\"cols\"", ":", "4", ",", "\n", "\"data\"", ":", "object_transform", ",", "\n", "}", "\n", "}", "\n", "index", "+=", "1", "\n", "return", "object_json", ",", "index", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.plan2scene.place_object_cad_models.find_suitable_cad_model": [[307, 344], ["len", "len", "sorted", "len", "abs", "set().intersection", "set", "set"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len"], ["", "def", "find_suitable_cad_model", "(", "obj", ":", "ObjectAnnotation", ",", "closest_wall", ":", "Wall", ",", "house", ":", "House", ",", "house_gen_conf", ":", "Config", ",", "\n", "room_types", ":", "list", ",", "room_walls", ":", "list", ",", "hole_sizes", ":", "list", ",", "available_wall_length", ":", "float", ",", "max_box_length", ":", "float", ")", "->", "dict", ":", "\n", "    ", "\"\"\"\n    Find suitable CAD model for an object annotation.\n    :param obj: Object Annotation\n    :param closest_wall: Closest wall to the object\n    :param house: House\n    :param house_gen_conf: Default configurations\n    :param room_types: Room types\n    :param room_walls: Walls of the room\n    :param hole_sizes: Sizes of holes in the room\n    :param available_wall_length: Length available to closest edge of clamped wall\n    :param max_box_length: Maximum length of object AABB\n    :return: Suitable CAD model or None\n    \"\"\"", "\n", "\n", "# Extend this method to improve the CAD model selection logic", "\n", "\n", "if", "obj", ".", "type", "not", "in", "house_gen_conf", ".", "fixed_object_model_defaults", ".", "__dict__", ":", "\n", "        ", "return", "None", "\n", "\n", "", "original_candidates", "=", "house_gen_conf", ".", "fixed_object_model_defaults", "[", "obj", ".", "type", "]", "\n", "candidates", "=", "[", "a", "for", "a", "in", "original_candidates", "if", "\n", "\"allowed_rooms\"", "in", "a", "and", "a", "[", "\"allowed_rooms\"", "]", "is", "not", "None", "and", "len", "(", "set", "(", "room_types", ")", ".", "intersection", "(", "set", "(", "a", "[", "\"allowed_rooms\"", "]", ")", ")", ")", ">", "0", "]", "\n", "if", "len", "(", "candidates", ")", "==", "0", ":", "\n", "# No specific candidates. Try general candidates", "\n", "        ", "candidates", "=", "[", "a", "for", "a", "in", "original_candidates", "if", "\"allowed_rooms\"", "not", "in", "a", "or", "a", "[", "\"allowed_rooms\"", "]", "is", "None", "]", "\n", "", "if", "len", "(", "candidates", ")", "==", "0", ":", "\n", "        ", "return", "None", "\n", "\n", "# Specific rules", "\n", "", "if", "obj", ".", "type", "in", "house_gen_conf", ".", "object_type_specific_rules", ".", "sort_candidates_using_dx_max_aabb_length_difference", ":", "\n", "# Among candidates, select candidate with closest dx to the annotation max length", "\n", "        ", "candidates", "=", "sorted", "(", "candidates", ",", "key", "=", "lambda", "a", ":", "abs", "(", "a", "[", "\"dx\"", "]", "-", "max_box_length", ")", ")", "\n", "return", "candidates", "[", "0", "]", "\n", "\n", "", "return", "candidates", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.plan2scene.place_object_cad_models.place_object_models": [[346, 369], ["place_object_cad_models.assign_objects_to_rooms", "[].extend", "len", "len", "place_object_cad_models.get_object_json", "max", "len", "new_object_jsons.append", "house.rooms.items"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.plan2scene.place_object_cad_models.assign_objects_to_rooms", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.plan2scene.place_object_cad_models.get_object_json", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len"], ["", "def", "place_object_models", "(", "house", ":", "House", ",", "object_annotations", ":", "list", ",", "scene_json", ",", "house_gen_conf", ":", "Config", ")", "->", "None", ":", "\n", "    ", "\"\"\"\n    Add CAD models of objects to the scene.json\n    :param house: House considered\n    :param object_annotations: Object annotations for the house\n    :param scene_json: Scene.json of the house\n    :param house_gen_conf: house_gen config used\n    \"\"\"", "\n", "room_key_objects_map", "=", "assign_objects_to_rooms", "(", "house", ".", "rooms", ",", "object_annotations", ",", "arch_defaults", "=", "house_gen_conf", ")", "\n", "\n", "index", "=", "0", "\n", "if", "len", "(", "scene_json", "[", "\"scene\"", "]", "[", "\"object\"", "]", ")", ">", "0", ":", "\n", "        ", "index", "=", "max", "(", "[", "a", "[", "\"index\"", "]", "for", "a", "in", "scene_json", "[", "\"scene\"", "]", "[", "\"object\"", "]", "]", ")", "+", "1", "\n", "\n", "", "new_object_jsons", "=", "[", "]", "\n", "for", "obj", "in", "object_annotations", ":", "\n", "        ", "contained_rooms", "=", "[", "a", "for", "a", ",", "v", "in", "house", ".", "rooms", ".", "items", "(", ")", "if", "obj", "in", "room_key_objects_map", "[", "v", ".", "room_id", "]", "]", "\n", "assert", "len", "(", "contained_rooms", ")", "==", "1", ",", "len", "(", "contained_rooms", ")", "\n", "\n", "object_json", ",", "index", "=", "get_object_json", "(", "obj", ",", "house", ",", "contained_rooms", "[", "0", "]", ",", "house_gen_conf", ",", "index", ")", "\n", "if", "object_json", "is", "not", "None", ":", "\n", "            ", "new_object_jsons", ".", "append", "(", "object_json", ")", "\n", "", "", "scene_json", "[", "\"scene\"", "]", "[", "\"object\"", "]", ".", "extend", "(", "new_object_jsons", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.plan2scene.place_object_cad_models.parse_object_annotations_json": [[371, 387], ["open", "json.load", "results.append", "arch_parser.models.object.ObjectAnnotation"], "function", ["None"], ["", "def", "parse_object_annotations_json", "(", "object_annotations_json_path", ")", "->", "list", ":", "\n", "    ", "\"\"\"\n    Parse an objectaabb.json file\n    :param object_annotations_json_path:\n    :return:\n    \"\"\"", "\n", "with", "open", "(", "object_annotations_json_path", ")", "as", "f", ":", "\n", "        ", "objects_json", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "results", "=", "[", "]", "\n", "for", "object_json", "in", "objects_json", "[", "\"objects\"", "]", ":", "\n", "        ", "bound_box", "=", "(", "object_json", "[", "\"bound_box\"", "]", "[", "\"p1\"", "]", "[", "0", "]", ",", "object_json", "[", "\"bound_box\"", "]", "[", "\"p1\"", "]", "[", "1", "]", ",", "object_json", "[", "\"bound_box\"", "]", "[", "\"p2\"", "]", "[", "0", "]", ",", "object_json", "[", "\"bound_box\"", "]", "[", "\"p2\"", "]", "[", "1", "]", ")", "\n", "object_type", "=", "object_json", "[", "\"type\"", "]", "\n", "results", ".", "append", "(", "ObjectAnnotation", "(", "bound_box", ",", "object_type", ")", ")", "\n", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.plan2scene.predict_textures.load_house_with_photos": [[20, 45], ["arch_parser.parser.parse_scene_json_from_file", "plan2scene.common.residence.House.from_arch_house", "House.from_arch_house.rooms.items", "range", "range", "os.exists", "os.join", "plan2scene.utils.io.load_image", "plan2scene.common.image_description.ImageDescription", "os.join"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.arch_parser.parser.parse_scene_json_from_file", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.common.residence.House.from_arch_house", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.io.load_image"], ["def", "load_house_with_photos", "(", "conf", ":", "ConfigManager", ",", "scene_json_path", ":", "str", ",", "photoroom_csv_path", ":", "str", ",", "surface_crops_path", ":", "str", ")", "->", "House", ":", "\n", "    ", "\"\"\"\n    Load scene.json file and its associated photos.\n    :param conf: Config manager\n    :param scene_json_path: Path to scene.json file.\n    :param photoroom_csv_path: Path to photoroom.csv file indicating photo to room assignments.\n    :param surface_crops_path: Path to directory containing rectified surface crops.\n    :return: House\n    \"\"\"", "\n", "arch_house", "=", "parse_scene_json_from_file", "(", "scene_json_path", ",", "photoroom_csv_path", ")", "\n", "house", "=", "House", ".", "from_arch_house", "(", "arch_house", ",", "surfaces", "=", "conf", ".", "surfaces", ")", "\n", "\n", "# Load associated crops", "\n", "for", "room_index", ",", "room", "in", "house", ".", "rooms", ".", "items", "(", ")", ":", "\n", "        ", "for", "photo", "in", "room", ".", "photos", ":", "\n", "            ", "for", "surface", "in", "conf", ".", "surfaces", ":", "\n", "                ", "surface_instances", "=", "[", "i", "for", "i", "in", "range", "(", "conf", ".", "texture_gen", ".", "masks_per_surface", "[", "surface", "]", ")", "]", "\n", "for", "surface_instance", "in", "surface_instances", ":", "\n", "                    ", "for", "crop_instance", "in", "range", "(", "conf", ".", "texture_gen", ".", "crops_per_mask", ")", ":", "\n", "                        ", "candidate_key", "=", "\"%s_%d_crop%d\"", "%", "(", "photo", ",", "surface_instance", ",", "crop_instance", ")", "\n", "if", "osp", ".", "exists", "(", "osp", ".", "join", "(", "surface_crops_path", ",", "surface", ",", "candidate_key", "+", "\".png\"", ")", ")", ":", "\n", "                            ", "image", "=", "load_image", "(", "\n", "osp", ".", "join", "(", "surface_crops_path", ",", "surface", ",", "candidate_key", "+", "\".png\"", ")", ")", "\n", "room", ".", "surface_textures", "[", "surface", "]", "[", "candidate_key", "]", "=", "ImageDescription", "(", "image", ",", "ImageSource", ".", "NEURAL_SYNTH", ")", "\n", "", "", "", "", "", "", "return", "house", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.plan2scene.predict_textures.process_observed_surfaces": [[47, 64], ["plan2scene.texture_gen.predictor.TextureGenPredictor", "plan2scene.texture_gen.predictor.TextureGenPredictor.load_checkpoint", "plan2scene.crop_select.util.fill_texture_embeddings", "plan2scene.crop_select.util.vgg_crop_select", "plan2scene.texture_gen.utils.io.load_conf_eval"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.predictor.TexturePropPredictor.load_checkpoint", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.crop_select.util.fill_texture_embeddings", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.crop_select.util.vgg_crop_select", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.io.load_conf_eval"], ["", "def", "process_observed_surfaces", "(", "conf", ":", "ConfigManager", ",", "house", ":", "House", ")", "->", "None", ":", "\n", "    ", "\"\"\"\n    Synthesize textures for observed surfaces\n    :param conf: Config Manager\n    :param house: House processed\n    \"\"\"", "\n", "# Load texture synthesis network", "\n", "tg_predictor", "=", "TextureGenPredictor", "(", "\n", "conf", "=", "load_conf_eval", "(", "config_path", "=", "conf", ".", "texture_gen", ".", "texture_synth_conf", ")", ",", "\n", "rgb_median_emb", "=", "conf", ".", "texture_gen", ".", "rgb_median_emb", ")", "\n", "tg_predictor", ".", "load_checkpoint", "(", "checkpoint_path", "=", "conf", ".", "texture_gen", ".", "checkpoint_path", ")", "\n", "\n", "# Compute texture embeddings for observed surfaces (Code adapted from ./code/scripts/preprocessing/fill_room_embeddigs.py)", "\n", "fill_texture_embeddings", "(", "conf", ",", "house", ",", "tg_predictor", ")", "\n", "\n", "# Synthesize textures for observed surfaces using the most suitable crop identified by VGG textureness score.", "\n", "vgg_crop_select", "(", "conf", ",", "house", ",", "tg_predictor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.plan2scene.predict_textures.process_unobserved_surfaces": [[66, 85], ["plan2scene.texture_gen.predictor.TextureGenPredictor", "plan2scene.texture_gen.predictor.TextureGenPredictor.load_checkpoint", "plan2scene.texture_prop.predictor.TexturePropPredictor", "plan2scene.texture_prop.predictor.TexturePropPredictor.load_checkpoint", "plan2scene.texture_prop.gnn_prop.propagate_textures", "plan2scene.texture_gen.utils.io.load_conf_eval"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.predictor.TexturePropPredictor.load_checkpoint", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.predictor.TexturePropPredictor.load_checkpoint", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.gnn_prop.propagate_textures", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.io.load_conf_eval"], ["", "def", "process_unobserved_surfaces", "(", "conf", ":", "ConfigManager", ",", "house", ":", "House", ",", "prop_checkpoint_path", ")", "->", "None", ":", "\n", "    ", "\"\"\"\n    Synthesize textures for unobserved surfaces\n    :param conf: Config manager\n    :param house: House\n    :param prop_checkpoint_path: Path to GNN checkpoint\n    \"\"\"", "\n", "# Load GNN and graph generator", "\n", "tg_predictor", "=", "TextureGenPredictor", "(", "\n", "conf", "=", "load_conf_eval", "(", "config_path", "=", "conf", ".", "texture_gen", ".", "texture_synth_conf", ")", ",", "\n", "rgb_median_emb", "=", "conf", ".", "texture_gen", ".", "rgb_median_emb", ")", "\n", "tg_predictor", ".", "load_checkpoint", "(", "checkpoint_path", "=", "conf", ".", "texture_gen", ".", "checkpoint_path", ")", "\n", "\n", "tp_predictor", "=", "TexturePropPredictor", "(", "conf", ",", "conf", ".", "texture_prop", ")", "\n", "tp_predictor", ".", "load_checkpoint", "(", "checkpoint_path", "=", "prop_checkpoint_path", ")", "\n", "\n", "# Graph dataset", "\n", "houses", "=", "{", "house", ".", "house_key", ":", "house", "}", "\n", "propagate_textures", "(", "conf", ",", "houses", ",", "tg_predictor", ",", "tp_predictor", ",", "keep_existing_predictions", "=", "True", ",", "use_train_graph_generator", "=", "False", ",", "use_val_graph_generator", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.plan2scene.place_hole_cad_models.get_hole_model": [[18, 50], ["sorted", "len", "len", "len", "len", "abs", "len", "len"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len"], ["def", "get_hole_model", "(", "conf", ":", "ConfigManager", ",", "hole_type", ",", "length", ",", "adjacent_rooms", ")", ":", "\n", "    ", "\"\"\"\n    Identify the most suitable CAD model to fill a hole (door/window).\n    :param conf: ConfigManager\n    :param hole_type: Window or Door\n    :param length: Length of the hole\n    :param adjacent_rooms: Adjacent rooms\n    :return: Description of a hole model as specified by conf.house_gen.hole_model_defaults\n    \"\"\"", "\n", "# TODO: Improve logic here", "\n", "if", "hole_type", "in", "conf", ".", "house_gen", ".", "hole_model_defaults", ".", "__dict__", ":", "\n", "        ", "entrance", "=", "False", "\n", "\n", "if", "len", "(", "adjacent_rooms", ")", "<=", "1", ":", "\n", "            ", "entrance", "=", "True", "\n", "\n", "", "balcony", "=", "False", "\n", "if", "len", "(", "[", "a", "for", "a", "in", "adjacent_rooms", "if", "len", "(", "[", "b", "for", "b", "in", "a", ".", "types", "if", "b", "in", "conf", ".", "house_gen", ".", "outdoor_room_types", "]", ")", ">", "0", "]", ")", ">", "0", ":", "\n", "            ", "balcony", "=", "True", "\n", "\n", "", "bathroom", "=", "False", "\n", "if", "len", "(", "[", "a", "for", "a", "in", "adjacent_rooms", "if", "len", "(", "[", "b", "for", "b", "in", "a", ".", "types", "if", "b", "in", "conf", ".", "house_gen", ".", "bathroom_room_types", "]", ")", ">", "0", "]", ")", ">", "0", ":", "\n", "            ", "bathroom", "=", "True", "\n", "\n", "", "candidates", "=", "conf", ".", "house_gen", ".", "hole_model_defaults", ".", "__dict__", "[", "hole_type", "]", "\n", "candidates", "=", "[", "a", "for", "a", "in", "candidates", "if", "entrance", "in", "a", "[", "\"entrance\"", "]", "]", "\n", "candidates", "=", "[", "a", "for", "a", "in", "candidates", "if", "balcony", "in", "a", "[", "\"balcony\"", "]", "]", "\n", "candidates", "=", "[", "a", "for", "a", "in", "candidates", "if", "bathroom", "in", "a", "[", "\"bathroom\"", "]", "]", "\n", "length_sorted", "=", "sorted", "(", "candidates", ",", "key", "=", "lambda", "a", ":", "abs", "(", "a", "[", "\"length\"", "]", "-", "length", ")", ")", "\n", "if", "len", "(", "length_sorted", ")", ">", "0", ":", "\n", "            ", "return", "length_sorted", "[", "0", "]", "\n", "", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.plan2scene.place_hole_cad_models.generate_hole_cad_placements": [[52, 131], ["house.rooms.items", "isinstance", "enumerate", "isinstance", "math.sqrt", "enumerate", "isinstance", "min", "max", "adjacent_rooms.extend", "adjacent_rooms.extend", "place_hole_cad_models.get_hole_model", "float", "float", "plan2scene.house_gen.geom_util.hole_to_line", "arch_parser.models.cad_model.CADModel", "cad_models.append", "float", "math.atan", "plan2scene.house_gen.geom_util.get_transform"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.plan2scene.place_hole_cad_models.get_hole_model", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.house_gen.geom_util.hole_to_line", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.house_gen.geom_util.get_transform"], ["", "def", "generate_hole_cad_placements", "(", "conf", ":", "ConfigManager", ",", "house", ":", "House", ",", "start_index", ":", "int", ")", ":", "\n", "    ", "\"\"\"\n    Obtain list of CADModels that should be placed for holes of the house.\n    :param conf: Config Manager\n    :param house: House populated\n    :param start_index: CAD models will be indexed starting from start_index\n    :return: List of CADModel\n    \"\"\"", "\n", "cad_models", "=", "[", "]", "\n", "index", "=", "start_index", "\n", "for", "room_key", ",", "room", "in", "house", ".", "rooms", ".", "items", "(", ")", ":", "\n", "        ", "assert", "isinstance", "(", "room", ",", "Room", ")", "\n", "for", "i_wall", ",", "wall_assignment", "in", "enumerate", "(", "room", ".", "walls", ")", ":", "\n", "            ", "assert", "isinstance", "(", "wall_assignment", ",", "WallRoomAssignment", ")", "\n", "wall", "=", "wall_assignment", ".", "wall", "\n", "new_wall_width", "=", "math", ".", "sqrt", "(", "(", "wall", ".", "p2", "[", "1", "]", "-", "wall", ".", "p1", "[", "1", "]", ")", "**", "2", "+", "(", "wall", ".", "p2", "[", "0", "]", "-", "wall", ".", "p1", "[", "0", "]", ")", "**", "2", ")", "\n", "\n", "for", "hole_index", ",", "hole", "in", "enumerate", "(", "wall", ".", "holes", ")", ":", "\n", "                ", "assert", "isinstance", "(", "hole", ",", "Hole", ")", "\n", "hole_min_x", "=", "min", "(", "hole", ".", "start", ",", "hole", ".", "end", ")", "\n", "hole_max_x", "=", "max", "(", "hole", ".", "start", ",", "hole", ".", "end", ")", "\n", "hole_length", "=", "hole_max_x", "-", "hole_min_x", "\n", "assert", "hole_length", ">", "0", "\n", "\n", "adjacent_rooms", "=", "[", "room", "]", "\n", "# Find other adjacent room using door_connected_room_pairs map", "\n", "adjacent_candidates", "=", "[", "house", ".", "rooms", "[", "a", "[", "2", "]", "]", "for", "a", "in", "house", ".", "door_connected_room_pairs", "if", "\n", "a", "[", "1", "]", "==", "hole", ".", "hole_id", "and", "a", "[", "0", "]", "==", "room", ".", "room_id", "and", "a", "[", "2", "]", "is", "not", "None", "]", "\n", "adjacent_rooms", ".", "extend", "(", "adjacent_candidates", ")", "\n", "\n", "adjacent_candidates", "=", "[", "house", ".", "rooms", "[", "a", "[", "0", "]", "]", "for", "a", "in", "house", ".", "door_connected_room_pairs", "if", "\n", "a", "[", "1", "]", "==", "hole", ".", "hole_id", "and", "a", "[", "2", "]", "==", "room", ".", "room_id", "and", "a", "[", "0", "]", "is", "not", "None", "]", "\n", "adjacent_rooms", ".", "extend", "(", "adjacent_candidates", ")", "\n", "\n", "# Identify suitable CAD model", "\n", "hole_model", "=", "get_hole_model", "(", "conf", ",", "hole", ".", "hole_type", ",", "hole_length", ",", "adjacent_rooms", ")", "\n", "\n", "# Identify placement of CAD model", "\n", "if", "hole_model", "is", "not", "None", ":", "\n", "                    ", "model_id", "=", "hole_model", "[", "\"model\"", "]", "\n", "\n", "# Adjust hole to fit the CAD model", "\n", "hole", ".", "min_height", "=", "float", "(", "hole_model", "[", "\"hole_min_y\"", "]", ")", "\n", "hole", ".", "max_height", "=", "float", "(", "hole_model", "[", "\"hole_max_y\"", "]", ")", "\n", "\n", "model_length", "=", "hole_model", "[", "\"length\"", "]", "\n", "model_lift", "=", "hole_model", "[", "\"lift\"", "]", "\n", "\n", "# Identify position", "\n", "wall_p1", "=", "(", "wall", ".", "p1", "[", "0", "]", ",", "wall", ".", "p1", "[", "2", "]", ")", "\n", "wall_p2", "=", "(", "wall", ".", "p2", "[", "0", "]", ",", "wall", ".", "p2", "[", "2", "]", ")", "\n", "(", "start_x", ",", "start_z", ")", ",", "(", "end_x", ",", "end_z", ")", "=", "hole_to_line", "(", "wall_p1", ",", "wall_p2", ",", "hole", ".", "start", ",", "hole", ".", "end", ")", "\n", "door_x", "=", "(", "start_x", "+", "end_x", ")", "/", "2", "\n", "door_z", "=", "(", "start_z", "+", "end_z", ")", "/", "2", "\n", "\n", "# Identify angle", "\n", "object_angle", "=", "90.0", "\n", "if", "start_x", "!=", "end_x", ":", "\n", "                        ", "object_angle", "=", "math", ".", "atan", "(", "(", "end_z", "-", "start_z", ")", "/", "(", "end_x", "-", "start_x", ")", ")", "/", "math", ".", "pi", "*", "180.0", "\n", "\n", "", "if", "\"rotate180\"", "in", "hole_model", "and", "hole_model", "[", "\"rotate180\"", "]", ":", "\n", "                        ", "object_angle", "+=", "180.0", "\n", "", "object_angle", "=", "object_angle", "%", "360", "\n", "\n", "# Identify scale", "\n", "scale_x", "=", "float", "(", "hole_length", ")", "/", "model_length", "\n", "\n", "# Generate CAD model placement", "\n", "cad_model", "=", "CADModel", "(", "model_id", "=", "model_id", ",", "index", "=", "index", ",", "parent_index", "=", "-", "1", ",", "transform", "=", "{", "\n", "\"rows\"", ":", "4", ",", "\n", "\"cols\"", ":", "4", ",", "\n", "\"data\"", ":", "get_transform", "(", "door_x", ",", "model_lift", ",", "door_z", ",", "object_angle", ",", "\n", "scale_x", "=", "scale_x", ")", ",", "\n", "}", ")", "\n", "\n", "index", "+=", "1", "\n", "cad_models", ".", "append", "(", "cad_model", ")", "\n", "\n", "", "", "", "", "return", "cad_models", ",", "index", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.plan2scene.place_hole_cad_models.process_house": [[133, 144], ["place_hole_cad_models.generate_hole_cad_placements", "house.cad_models.extend", "len", "max"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.plan2scene.place_hole_cad_models.generate_hole_cad_placements", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len"], ["", "def", "process_house", "(", "conf", ":", "ConfigManager", ",", "house", ":", "House", ")", "->", "None", ":", "\n", "    ", "\"\"\"\n    Place hole CAD models for the given house.\n    :param conf: Config Manager\n    :param house: House processed.\n    \"\"\"", "\n", "index", "=", "0", "\n", "if", "len", "(", "house", ".", "cad_models", ")", ">", "0", ":", "\n", "        ", "index", "=", "max", "(", "[", "a", ".", "index", "for", "a", "in", "house", ".", "cad_models", "]", ")", "+", "1", "\n", "", "cad_models", ",", "index", "=", "generate_hole_cad_placements", "(", "conf", ",", "house", ",", "index", ")", "\n", "house", ".", "cad_models", ".", "extend", "(", "cad_models", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.image_util.get_medoid_key": [[4, 21], ["textures.items", "torch.cat", "torch.cat.mean", "distances.min", "key_list.append", "torch.cat.append", "texture_vectors.mean.unsqueeze().repeat", "texture_vectors.mean.unsqueeze", "torchvision.transforms.ToTensor"], "function", ["None"], ["def", "get_medoid_key", "(", "textures", ":", "dict", ")", "->", "str", ":", "\n", "    ", "\"\"\"\n    Given a dictionary of keys and images, return the key of the medoid image.\n    :param textures: Dictionary of keys and images\n    :return: Medoid key\n    \"\"\"", "\n", "texture_vectors", "=", "[", "]", "\n", "key_list", "=", "[", "]", "\n", "for", "crop_key", ",", "crop_image", "in", "textures", ".", "items", "(", ")", ":", "\n", "        ", "key_list", ".", "append", "(", "crop_key", ")", "\n", "texture_vectors", ".", "append", "(", "torchvision", ".", "transforms", ".", "ToTensor", "(", ")", "(", "crop_image", ".", "image", ")", ".", "view", "(", "1", ",", "-", "1", ")", ")", "\n", "", "texture_vectors", "=", "torch", ".", "cat", "(", "texture_vectors", ",", "dim", "=", "0", ")", "\n", "mean_vector", "=", "texture_vectors", ".", "mean", "(", "dim", "=", "0", ")", "\n", "delta_vectors", "=", "texture_vectors", "-", "mean_vector", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "texture_vectors", ".", "shape", "[", "0", "]", ",", "1", ")", "\n", "distances", "=", "(", "delta_vectors", "**", "2", ")", ".", "sum", "(", "dim", "=", "1", ")", "**", "0.5", "\n", "min_distance", ",", "min_index", "=", "distances", ".", "min", "(", "dim", "=", "0", ")", "\n", "return", "key_list", "[", "min_index", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.io.load_smt_dataset": [[6, 22], ["os.listdir", "os.listdir", "os.join", "texture_name.endswith", "io.load_image", "tex.resize.resize", "os.join", "os.join"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.io.load_image"], ["def", "load_smt_dataset", "(", "smt_path", ":", "str", ",", "image_size", ")", ":", "\n", "    ", "\"\"\"\n    Load substance mapped textures dataset\n    :param smt_path: Path to SMT dataset\n    :return: Dictionary mapping from texture key to texture    \"\"\"", "\n", "\n", "textures", "=", "{", "}", "\n", "# for substance_type in os.listdir(smt_path):", "\n", "#     if osp.isdir(osp.join(smt_path, substance_type)):", "\n", "for", "texture_name", "in", "os", ".", "listdir", "(", "osp", ".", "join", "(", "smt_path", ")", ")", ":", "\n", "        ", "if", "texture_name", ".", "endswith", "(", "\".jpg\"", ")", ":", "\n", "            ", "tex", "=", "load_image", "(", "osp", ".", "join", "(", "smt_path", ",", "texture_name", ")", ")", "\n", "tex", "=", "tex", ".", "resize", "(", "(", "image_size", ",", "image_size", ")", ")", "\n", "textures", "[", "osp", ".", "join", "(", "smt_path", ",", "texture_name", ")", "]", "=", "tex", "\n", "# textures.append(tex)", "\n", "", "", "return", "textures", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.io.load_image": [[24, 36], ["PIL.Image.open", "sample_image.convert.load", "sample_image.convert.convert"], "function", ["None"], ["", "def", "load_image", "(", "image_path", ":", "str", ")", "->", "Image", ".", "Image", ":", "\n", "    ", "\"\"\"\n    Loads an image as RGB/RGBA PIL Image\n    :param image_path: Path to Image\n    :return: loaded image\n    \"\"\"", "\n", "sample_image", "=", "Image", ".", "open", "(", "image_path", ")", "\n", "if", "sample_image", ".", "mode", "not", "in", "[", "\"RGB\"", ",", "\"RGBA\"", "]", ":", "\n", "        ", "sample_image", "=", "sample_image", ".", "convert", "(", "\"RGB\"", ")", "\n", "\n", "", "sample_image", ".", "load", "(", ")", "\n", "return", "sample_image", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.io.fraction_str": [[37, 48], ["float"], "function", ["None"], ["", "def", "fraction_str", "(", "numerator", ",", "denominator", ")", "->", "str", ":", "\n", "    ", "\"\"\"\n    Formats a fraction to the format %.5f [numerator/deniminator]\n    :param numerator:\n    :param denominator:\n    :return: Formatted string\n    \"\"\"", "\n", "if", "denominator", ">", "0", ":", "\n", "        ", "return", "\"%.5f [%.5f/%d]\"", "%", "(", "float", "(", "numerator", ")", "/", "denominator", ",", "numerator", ",", "denominator", ")", "\n", "", "else", ":", "\n", "        ", "return", "\"No Data\"", "", "", "", ""]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.tile_util.tile_image": [[15, 42], ["isinstance", "tempfile.mkdtemp", "os.abspath", "os.dirname", "image.save", "plan2scene.utils.io.load_image", "shutil.rmtree", "uuid.uuid4", "os.join", "subprocess.call", "subprocess.call", "os.join", "os.abspath", "os.join", "os.join"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.common.image_description.ImageDescription.save", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.io.load_image"], ["def", "tile_image", "(", "image", ":", "Image", ".", "Image", ",", "embark_texture_synthesis_path", ":", "str", ",", "seam_mask_path", ":", "str", ")", ":", "\n", "    ", "\"\"\"\n    Correct seams of a texture so it can be tiled\n    :param image: Texture to be seam corrected\n    :param embark_texture_synthesis_path: Path to texture-synthesis project.\n    :param seam_mask_path: Path to texture-synthesis/imgs/masks/1_tile.jpg\n    :return: Seam corrected image\n    \"\"\"", "\n", "assert", "isinstance", "(", "image", ",", "Image", ".", "Image", ")", "\n", "temp_location", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "try", ":", "\n", "        ", "prefix", "=", "uuid", ".", "uuid4", "(", ")", ".", "hex", "\n", "script_path", "=", "osp", ".", "abspath", "(", "embark_texture_synthesis_path", ")", "\n", "script_dir_path", "=", "osp", ".", "dirname", "(", "script_path", ")", "\n", "image", ".", "save", "(", "osp", ".", "join", "(", "temp_location", ",", "prefix", "+", "\"_to_tile.png\"", ")", ")", "\n", "command", "=", "\"%s --inpaint %s --out-size %d --tiling -o %s generate %s\"", "%", "(", "\n", "script_path", ",", "osp", ".", "abspath", "(", "seam_mask_path", ")", ",", "\n", "image", ".", "width", ",", "\n", "osp", ".", "join", "(", "temp_location", ",", "prefix", "+", "\"_tiled.png\"", ")", ",", "\n", "osp", ".", "join", "(", "temp_location", ",", "prefix", "+", "\"_to_tile.png\"", ")", ",", "\n", ")", "\n", "\n", "assert", "subprocess", ".", "call", "(", "command", ",", "shell", "=", "True", ")", "==", "0", "\n", "tiled_image", "=", "load_image", "(", "osp", ".", "join", "(", "temp_location", ",", "prefix", "+", "\"_tiled.png\"", ")", ")", "\n", "return", "tiled_image", "\n", "", "finally", ":", "\n", "        ", "shutil", ".", "rmtree", "(", "temp_location", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.tile_util.seam_correct_surface": [[44, 58], ["isinstance", "tile_util.tile_image"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.tile_util.tile_image"], ["", "", "def", "seam_correct_surface", "(", "textures_map", ":", "dict", ",", "embark_texture_synthesis_path", ":", "str", ",", "seam_mask_path", ":", "str", ",", "key", ":", "str", "=", "\"prop\"", ")", "->", "None", ":", "\n", "    ", "\"\"\"\n    Correct seams of textures of a surface.\n    :param textures_map: Surface textures dictionary of a surface\n    :param embark_texture_synthesis_path:  Path to embark studios texture synthesis library.\n    :param seam_mask_path: Path to the mask used for seam correction.\n    :param key: Key denoting predicted texture. We seam correct this entry.\n    \"\"\"", "\n", "if", "key", "in", "textures_map", ":", "\n", "        ", "texture_description", "=", "textures_map", "[", "key", "]", "\n", "assert", "isinstance", "(", "texture_description", ",", "ImageDescription", ")", "\n", "texture", "=", "texture_description", ".", "image", "\n", "texture", "=", "tile_image", "(", "texture", ",", "embark_texture_synthesis_path", ",", "seam_mask_path", ")", "\n", "texture_description", ".", "image", "=", "texture", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.tile_util.seam_correct_house": [[60, 71], ["house.rooms.items", "isinstance", "tile_util.seam_correct_surface"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.tile_util.seam_correct_surface"], ["", "", "def", "seam_correct_house", "(", "house", ":", "House", ",", "embark_texture_synthesis_path", ":", "str", ",", "seam_mask_path", ":", "str", ")", "->", "None", ":", "\n", "    ", "\"\"\"\n    Correct seams of predicted textures assigned to a house.\n    :param house: House considered\n    :param embark_texture_synthesis_path: Path to embark studios texture synthesis library.\n    :param seam_mask_path: Path to the mask used for seam correction.\n    \"\"\"", "\n", "for", "room_index", ",", "room", "in", "house", ".", "rooms", ".", "items", "(", ")", ":", "\n", "        ", "assert", "isinstance", "(", "room", ",", "Room", ")", "\n", "for", "surface", "in", "room", ".", "surface_textures", ":", "\n", "            ", "seam_correct_surface", "(", "room", ".", "surface_textures", "[", "surface", "]", ",", "embark_texture_synthesis_path", ",", "seam_mask_path", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.io.load_config_train": [[13, 29], ["io.load_config", "torch.manual_seed", "numpy.random.seed", "random.seed", "io._update_config_common"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.io.load_config", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.io._update_config_common"], ["# for substance_type in os.listdir(smt_path):", "\n", "#     if osp.isdir(osp.join(smt_path, substance_type)):", "\n", "for", "texture_name", "in", "os", ".", "listdir", "(", "osp", ".", "join", "(", "smt_path", ")", ")", ":", "\n", "        ", "if", "texture_name", ".", "endswith", "(", "\".jpg\"", ")", ":", "\n", "            ", "tex", "=", "load_image", "(", "osp", ".", "join", "(", "smt_path", ",", "texture_name", ")", ")", "\n", "tex", "=", "tex", ".", "resize", "(", "(", "image_size", ",", "image_size", ")", ")", "\n", "textures", "[", "osp", ".", "join", "(", "smt_path", ",", "texture_name", ")", "]", "=", "tex", "\n", "# textures.append(tex)", "\n", "", "", "return", "textures", "\n", "\n", "\n", "", "def", "load_image", "(", "image_path", ":", "str", ")", "->", "Image", ".", "Image", ":", "\n", "    ", "\"\"\"\n    Loads an image as RGB/RGBA PIL Image\n    :param image_path: Path to Image\n    :return: loaded image\n    \"\"\"", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.io._update_config_common": [[31, 57], ["Exception", "torch.cuda.is_available"], "function", ["None"], ["if", "sample_image", ".", "mode", "not", "in", "[", "\"RGB\"", ",", "\"RGBA\"", "]", ":", "\n", "        ", "sample_image", "=", "sample_image", ".", "convert", "(", "\"RGB\"", ")", "\n", "\n", "", "sample_image", ".", "load", "(", ")", "\n", "return", "sample_image", "\n", "\n", "", "def", "fraction_str", "(", "numerator", ",", "denominator", ")", "->", "str", ":", "\n", "    ", "\"\"\"\n    Formats a fraction to the format %.5f [numerator/deniminator]\n    :param numerator:\n    :param denominator:\n    :return: Formatted string\n    \"\"\"", "\n", "if", "denominator", ">", "0", ":", "\n", "        ", "return", "\"%.5f [%.5f/%d]\"", "%", "(", "float", "(", "numerator", ")", "/", "denominator", ",", "numerator", ",", "denominator", ")", "\n", "", "else", ":", "\n", "        ", "return", "\"No Data\"", "", "", "", ""]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.io.load_conf_eval": [[59, 70], ["io.load_config", "io._update_config_common"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.io.load_config", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.io._update_config_common"], []], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.io.load_config": [[72, 83], ["logging.info", "logging.info", "yaml.load", "open", "str"], "function", ["None"], []], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.io.preview_images": [[85, 95], ["images.clone.clone", "torchvision.utils.make_grid"], "function", ["None"], []], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.io.preview_deltas": [[97, 116], ["range", "signed_delta_image[].repeat().permute", "torch.cat", "pallet.permute.permute", "outputs.append", "signed_delta_image[].repeat", "pallet[].cpu", "torch.zeros", "pallet[].cpu"], "function", ["None"], []], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.hsv_utils.rgb_decompose_median": [[7, 33], ["[].detach", "[].detach.unsqueeze().unsqueeze().expand", "[].detach", "[].detach.unsqueeze().unsqueeze().expand", "[].detach", "[].detach.unsqueeze().unsqueeze().expand", "rgb_tensors.clone", "len", "[].detach.unsqueeze().unsqueeze", "[].detach.unsqueeze().unsqueeze", "[].detach.unsqueeze().unsqueeze", "rgb_tensors[].view().median", "rgb_tensors[].view().median", "rgb_tensors[].view().median", "[].detach.unsqueeze", "[].detach.unsqueeze", "[].detach.unsqueeze", "rgb_tensors[].view", "rgb_tensors[].view", "rgb_tensors[].view"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len"], ["def", "rgb_decompose_median", "(", "rgb_tensors", ":", "torch", ".", "Tensor", ")", "->", "tuple", ":", "\n", "    ", "\"\"\"\n    Separate median color from given RGB images.\n    :param rgb_tensors: RGB images [batch_size, 3, height, width].\n    :return: tuple(Delta RGB image [batch_size, 3, height, width], median R [batch_size], median G [batch_size], median B [batch_size])\n    \"\"\"", "\n", "assert", "len", "(", "rgb_tensors", ".", "shape", ")", "==", "4", "and", "rgb_tensors", ".", "shape", "[", "1", "]", "==", "3", "\n", "\n", "_median_r", "=", "rgb_tensors", "[", ":", ",", "0", ",", ":", ",", ":", "]", ".", "view", "(", "rgb_tensors", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ".", "median", "(", "dim", "=", "1", ")", "[", "0", "]", ".", "detach", "(", ")", "\n", "median_r", "=", "_median_r", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", ".", "expand", "(", "\n", "[", "rgb_tensors", ".", "shape", "[", "0", "]", ",", "rgb_tensors", ".", "shape", "[", "2", "]", ",", "rgb_tensors", ".", "shape", "[", "3", "]", "]", ")", "\n", "\n", "_median_g", "=", "rgb_tensors", "[", ":", ",", "1", ",", ":", ",", ":", "]", ".", "view", "(", "rgb_tensors", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ".", "median", "(", "dim", "=", "1", ")", "[", "0", "]", ".", "detach", "(", ")", "\n", "median_g", "=", "_median_g", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", ".", "expand", "(", "\n", "[", "rgb_tensors", ".", "shape", "[", "0", "]", ",", "rgb_tensors", ".", "shape", "[", "2", "]", ",", "rgb_tensors", ".", "shape", "[", "3", "]", "]", ")", "\n", "\n", "_median_b", "=", "rgb_tensors", "[", ":", ",", "2", ",", ":", ",", ":", "]", ".", "view", "(", "rgb_tensors", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ".", "median", "(", "dim", "=", "1", ")", "[", "0", "]", ".", "detach", "(", ")", "\n", "median_b", "=", "_median_b", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", ".", "expand", "(", "\n", "[", "rgb_tensors", ".", "shape", "[", "0", "]", ",", "rgb_tensors", ".", "shape", "[", "2", "]", ",", "rgb_tensors", ".", "shape", "[", "3", "]", "]", ")", "\n", "\n", "updated_rgb_tensors", "=", "rgb_tensors", ".", "clone", "(", ")", "\n", "updated_rgb_tensors", "[", ":", ",", "0", ",", ":", ",", ":", "]", "-=", "median_r", "\n", "updated_rgb_tensors", "[", ":", ",", "1", ",", ":", ",", ":", "]", "-=", "median_g", "\n", "updated_rgb_tensors", "[", ":", ",", "2", ",", ":", ",", ":", "]", "-=", "median_b", "\n", "\n", "return", "updated_rgb_tensors", ",", "_median_r", ",", "_median_g", ",", "_median_b", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.hsv_utils.rgb_recombine_median": [[35, 64], ["d_rgb_tensors.clone", "median_r.unsqueeze().unsqueeze().expand.unsqueeze().unsqueeze().expand", "median_g.unsqueeze().unsqueeze().expand.unsqueeze().unsqueeze().expand", "median_b.unsqueeze().unsqueeze().expand.unsqueeze().unsqueeze().expand", "updated_rgb_tensors.clamp.clamp", "len", "len", "len", "len", "median_r.unsqueeze().unsqueeze().expand.unsqueeze().unsqueeze", "median_g.unsqueeze().unsqueeze().expand.unsqueeze().unsqueeze", "median_b.unsqueeze().unsqueeze().expand.unsqueeze().unsqueeze", "median_r.unsqueeze().unsqueeze().expand.unsqueeze", "median_g.unsqueeze().unsqueeze().expand.unsqueeze", "median_b.unsqueeze().unsqueeze().expand.unsqueeze"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len"], ["", "def", "rgb_recombine_median", "(", "d_rgb_tensors", ":", "torch", ".", "Tensor", ",", "median_r", ":", "torch", ".", "Tensor", ",", "median_g", ":", "torch", ".", "Tensor", ",", "median_b", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"\n    Recombine separated median RGB to the delta RGB tensor.\n    :param d_rgb_tensors: Delta RGB tensor [batch_size, 3, height, width].\n    :param median_r: Median R [batch_size]\n    :param median_g: Median G [batch_size]\n    :param median_b: Median B [batch_size]\n    :return: Recombined RGB texture [batch_size, 3, height, width]. Outputs in the range 0..1\n    \"\"\"", "\n", "assert", "len", "(", "d_rgb_tensors", ".", "shape", ")", "==", "4", "and", "d_rgb_tensors", ".", "shape", "[", "1", "]", "==", "3", "\n", "assert", "len", "(", "median_r", ".", "shape", ")", "==", "1", "\n", "assert", "len", "(", "median_g", ".", "shape", ")", "==", "1", "\n", "assert", "len", "(", "median_b", ".", "shape", ")", "==", "1", "\n", "\n", "updated_rgb_tensors", "=", "d_rgb_tensors", ".", "clone", "(", ")", "\n", "median_r", "=", "median_r", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", ".", "expand", "(", "\n", "[", "updated_rgb_tensors", ".", "shape", "[", "0", "]", ",", "updated_rgb_tensors", ".", "shape", "[", "2", "]", ",", "updated_rgb_tensors", ".", "shape", "[", "3", "]", "]", ")", "\n", "median_g", "=", "median_g", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", ".", "expand", "(", "\n", "[", "updated_rgb_tensors", ".", "shape", "[", "0", "]", ",", "updated_rgb_tensors", ".", "shape", "[", "2", "]", ",", "updated_rgb_tensors", ".", "shape", "[", "3", "]", "]", ")", "\n", "median_b", "=", "median_b", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", ".", "expand", "(", "\n", "[", "updated_rgb_tensors", ".", "shape", "[", "0", "]", ",", "updated_rgb_tensors", ".", "shape", "[", "2", "]", ",", "updated_rgb_tensors", ".", "shape", "[", "3", "]", "]", ")", "\n", "\n", "updated_rgb_tensors", "[", ":", ",", "0", ",", ":", ",", ":", "]", "+=", "median_r", "\n", "updated_rgb_tensors", "[", ":", ",", "1", ",", ":", ",", ":", "]", "+=", "median_g", "\n", "updated_rgb_tensors", "[", ":", ",", "2", ",", ":", ",", ":", "]", "+=", "median_b", "\n", "\n", "updated_rgb_tensors", "=", "updated_rgb_tensors", ".", "clamp", "(", "0", ",", "1", ")", "\n", "\n", "return", "updated_rgb_tensors", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.hsv_utils.hsv_decompose_median": [[66, 105], ["hsv_utils.hsv_to_rgb", "[].detach", "[].detach", "[].detach", "rgb_to_hsv().squeeze().squeeze", "_median_h.unsqueeze().unsqueeze().expand", "_median_s.unsqueeze().unsqueeze().expand", "_median_v.unsqueeze().unsqueeze().expand", "hsv_tensors.clone", "len", "rgb_to_hsv().squeeze", "_median_h.unsqueeze().unsqueeze", "_median_s.unsqueeze().unsqueeze", "_median_v.unsqueeze().unsqueeze", "rgb_tensors[].view().median", "rgb_tensors[].view().median", "rgb_tensors[].view().median", "hsv_utils.rgb_to_hsv", "_median_h.unsqueeze", "_median_s.unsqueeze", "_median_v.unsqueeze", "rgb_tensors[].view", "rgb_tensors[].view", "rgb_tensors[].view", "torch.cat", "[].detach.view().unsqueeze().unsqueeze", "[].detach.view().unsqueeze().unsqueeze", "[].detach.view().unsqueeze().unsqueeze", "[].detach.view().unsqueeze", "[].detach.view().unsqueeze", "[].detach.view().unsqueeze", "[].detach.view", "[].detach.view", "[].detach.view"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.hsv_utils.hsv_to_rgb", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.hsv_utils.rgb_to_hsv"], ["", "def", "hsv_decompose_median", "(", "hsv_tensors", ":", "torch", ".", "Tensor", ")", ":", "\n", "    ", "\"\"\"\n    Separate median color from given HSV images.\n    :param hsv_tensors: HSV images [batch_size, 3, height, width]\n    :return: tuple(Delta HSV image [batch_size, 3, height, width], median H [batch_size], median S [batch_size], median V [batch_size]).\n            Output values are approximately in the range -0.5 to 0.5\n    \"\"\"", "\n", "assert", "len", "(", "hsv_tensors", ".", "shape", ")", "==", "4", "and", "hsv_tensors", ".", "shape", "[", "1", "]", "==", "3", "\n", "\n", "# Compute the median color in RGB. HSV is tricky due to circular nature of hue.", "\n", "rgb_tensors", "=", "hsv_to_rgb", "(", "hsv_tensors", ")", "\n", "_median_r", "=", "rgb_tensors", "[", ":", ",", "0", ",", ":", ",", ":", "]", ".", "view", "(", "hsv_tensors", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ".", "median", "(", "dim", "=", "1", ")", "[", "0", "]", ".", "detach", "(", ")", "\n", "_median_g", "=", "rgb_tensors", "[", ":", ",", "1", ",", ":", ",", ":", "]", ".", "view", "(", "hsv_tensors", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ".", "median", "(", "dim", "=", "1", ")", "[", "0", "]", ".", "detach", "(", ")", "\n", "_median_b", "=", "rgb_tensors", "[", ":", ",", "2", ",", ":", ",", ":", "]", ".", "view", "(", "hsv_tensors", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ".", "median", "(", "dim", "=", "1", ")", "[", "0", "]", ".", "detach", "(", ")", "\n", "\n", "# Convert median color to HSV.", "\n", "_median_hsv", "=", "rgb_to_hsv", "(", "torch", ".", "cat", "(", "\n", "[", "_median_r", ".", "view", "(", "-", "1", ",", "1", ")", ".", "unsqueeze", "(", "2", ")", ".", "unsqueeze", "(", "3", ")", ",", "_median_g", ".", "view", "(", "-", "1", ",", "1", ")", ".", "unsqueeze", "(", "2", ")", ".", "unsqueeze", "(", "3", ")", ",", "\n", "_median_b", ".", "view", "(", "-", "1", ",", "1", ")", ".", "unsqueeze", "(", "2", ")", ".", "unsqueeze", "(", "3", ")", "]", ",", "dim", "=", "1", ")", ")", ".", "squeeze", "(", "3", ")", ".", "squeeze", "(", "2", ")", "\n", "\n", "_median_h", "=", "_median_hsv", "[", ":", ",", "0", "]", "\n", "_median_s", "=", "_median_hsv", "[", ":", ",", "1", "]", "\n", "_median_v", "=", "_median_hsv", "[", ":", ",", "2", "]", "\n", "\n", "median_h", "=", "_median_h", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", ".", "expand", "(", "\n", "[", "hsv_tensors", ".", "shape", "[", "0", "]", ",", "hsv_tensors", ".", "shape", "[", "2", "]", ",", "hsv_tensors", ".", "shape", "[", "3", "]", "]", ")", "\n", "median_s", "=", "_median_s", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", ".", "expand", "(", "\n", "[", "hsv_tensors", ".", "shape", "[", "0", "]", ",", "hsv_tensors", ".", "shape", "[", "2", "]", ",", "hsv_tensors", ".", "shape", "[", "3", "]", "]", ")", "\n", "median_v", "=", "_median_v", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", ".", "expand", "(", "\n", "[", "hsv_tensors", ".", "shape", "[", "0", "]", ",", "hsv_tensors", ".", "shape", "[", "2", "]", ",", "hsv_tensors", ".", "shape", "[", "3", "]", "]", ")", "\n", "\n", "updated_hsv_tensors", "=", "hsv_tensors", ".", "clone", "(", ")", "\n", "updated_hsv_tensors", "[", ":", ",", "0", ",", ":", ",", ":", "]", "-=", "median_h", "\n", "updated_hsv_tensors", "[", ":", ",", "0", ",", ":", ",", ":", "]", "=", "(", "updated_hsv_tensors", "[", ":", ",", "0", ",", ":", ",", ":", "]", "+", "1.5", ")", "%", "1.0", "-", "0.5", "\n", "\n", "updated_hsv_tensors", "[", ":", ",", "1", ",", ":", ",", ":", "]", "-=", "median_s", "\n", "updated_hsv_tensors", "[", ":", ",", "2", ",", ":", ",", ":", "]", "-=", "median_v", "\n", "\n", "return", "updated_hsv_tensors", ",", "_median_h", ",", "_median_s", ",", "_median_v", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.hsv_utils.hsv_recombine_median": [[107, 140], ["d_hsv_tensors.clone", "median_h.unsqueeze().unsqueeze().expand.unsqueeze().unsqueeze().expand", "median_s.unsqueeze().unsqueeze().expand.unsqueeze().unsqueeze().expand", "median_v.unsqueeze().unsqueeze().expand.unsqueeze().unsqueeze().expand", "updated_hsv_tensors.clamp.clamp", "len", "len", "len", "len", "median_h.unsqueeze().unsqueeze().expand.unsqueeze().unsqueeze", "median_s.unsqueeze().unsqueeze().expand.unsqueeze().unsqueeze", "median_v.unsqueeze().unsqueeze().expand.unsqueeze().unsqueeze", "median_h.unsqueeze().unsqueeze().expand.unsqueeze", "median_s.unsqueeze().unsqueeze().expand.unsqueeze", "median_v.unsqueeze().unsqueeze().expand.unsqueeze"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len"], ["", "def", "hsv_recombine_median", "(", "d_hsv_tensors", ",", "median_h", ",", "median_s", ",", "median_v", ")", ":", "\n", "    ", "\"\"\"\n    Recombine separated median HSV to the delta HSV tensor.\n    :param d_hsv_tensors: Delta HSV tensor [batch_size, 3, height, width].\n    :param median_h: Median H [batch_size]\n    :param median_s: Median S [batch_size]\n    :param median_v: Median V [batch_size]\n    :return: Recombined HSV texture [batch_size, 3, height, width]. Outputs in the range 0..1\n    \"\"\"", "\n", "assert", "len", "(", "d_hsv_tensors", ".", "shape", ")", "==", "4", "and", "d_hsv_tensors", ".", "shape", "[", "1", "]", "==", "3", "\n", "assert", "len", "(", "median_h", ".", "shape", ")", "==", "1", "\n", "assert", "len", "(", "median_s", ".", "shape", ")", "==", "1", "\n", "assert", "len", "(", "median_v", ".", "shape", ")", "==", "1", "\n", "\n", "updated_hsv_tensors", "=", "d_hsv_tensors", ".", "clone", "(", ")", "\n", "\n", "median_h", "=", "median_h", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", ".", "expand", "(", "\n", "[", "updated_hsv_tensors", ".", "shape", "[", "0", "]", ",", "updated_hsv_tensors", ".", "shape", "[", "2", "]", ",", "updated_hsv_tensors", ".", "shape", "[", "3", "]", "]", ")", "\n", "median_s", "=", "median_s", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", ".", "expand", "(", "\n", "[", "updated_hsv_tensors", ".", "shape", "[", "0", "]", ",", "updated_hsv_tensors", ".", "shape", "[", "2", "]", ",", "updated_hsv_tensors", ".", "shape", "[", "3", "]", "]", ")", "\n", "median_v", "=", "median_v", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", ".", "expand", "(", "\n", "[", "updated_hsv_tensors", ".", "shape", "[", "0", "]", ",", "updated_hsv_tensors", ".", "shape", "[", "2", "]", ",", "updated_hsv_tensors", ".", "shape", "[", "3", "]", "]", ")", "\n", "\n", "updated_hsv_tensors", "[", ":", ",", "0", ",", ":", ",", ":", "]", "+=", "0.5", "\n", "updated_hsv_tensors", "[", ":", ",", "0", ",", ":", ",", ":", "]", "+=", "median_h", "\n", "updated_hsv_tensors", "[", ":", ",", "0", ",", ":", ",", ":", "]", "=", "(", "updated_hsv_tensors", "[", ":", ",", "0", ",", ":", ",", ":", "]", "+", "1.5", ")", "%", "1.0", "\n", "\n", "updated_hsv_tensors", "[", ":", ",", "1", ",", ":", ",", ":", "]", "+=", "median_s", "\n", "updated_hsv_tensors", "[", ":", ",", "2", ",", ":", ",", ":", "]", "+=", "median_v", "\n", "\n", "updated_hsv_tensors", "=", "updated_hsv_tensors", ".", "clamp", "(", "0", ",", "1", ")", "\n", "\n", "return", "updated_hsv_tensors", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.hsv_utils.rgb_to_hsv": [[142, 172], ["torch.Tensor().to", "hue.unsqueeze.unsqueeze", "saturation.unsqueeze.unsqueeze", "value.unsqueeze.unsqueeze", "torch.cat", "img.max", "len", "torch.Tensor", "img.max", "img.min", "img.max", "img.max", "img.max", "img.max", "img.min", "img.max", "img.max", "img.max", "img.max", "img.max", "img.min", "img.max", "img.min", "img.max", "img.max", "img.min"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len"], ["", "def", "rgb_to_hsv", "(", "img", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"\n    RGB to HSV conversion function.\n    :param img: Batch of RGB images [batch_size, 3, height, width]\n    :return: Batch of HSV images [batch_size, 3, height, width]\n    \"\"\"", "\n", "assert", "len", "(", "img", ".", "shape", ")", "==", "4", "and", "img", ".", "shape", "[", "1", "]", "==", "3", "\n", "eps", "=", "1e-7", "\n", "hue", "=", "torch", ".", "Tensor", "(", "img", ".", "shape", "[", "0", "]", ",", "img", ".", "shape", "[", "2", "]", ",", "img", ".", "shape", "[", "3", "]", ")", ".", "to", "(", "img", ".", "device", ")", "\n", "\n", "hue", "[", "img", "[", ":", ",", "2", "]", "==", "img", ".", "max", "(", "1", ")", "[", "0", "]", "]", "=", "4.0", "+", "(", "(", "img", "[", ":", ",", "0", "]", "-", "img", "[", ":", ",", "1", "]", ")", "/", "(", "img", ".", "max", "(", "1", ")", "[", "0", "]", "-", "img", ".", "min", "(", "1", ")", "[", "0", "]", "+", "eps", ")", ")", "[", "\n", "img", "[", ":", ",", "2", "]", "==", "img", ".", "max", "(", "1", ")", "[", "0", "]", "]", "\n", "hue", "[", "img", "[", ":", ",", "1", "]", "==", "img", ".", "max", "(", "1", ")", "[", "0", "]", "]", "=", "2.0", "+", "(", "(", "img", "[", ":", ",", "2", "]", "-", "img", "[", ":", ",", "0", "]", ")", "/", "(", "img", ".", "max", "(", "1", ")", "[", "0", "]", "-", "img", ".", "min", "(", "1", ")", "[", "0", "]", "+", "eps", ")", ")", "[", "\n", "img", "[", ":", ",", "1", "]", "==", "img", ".", "max", "(", "1", ")", "[", "0", "]", "]", "\n", "hue", "[", "img", "[", ":", ",", "0", "]", "==", "img", ".", "max", "(", "1", ")", "[", "0", "]", "]", "=", "(", "0.0", "+", "(", "(", "img", "[", ":", ",", "1", "]", "-", "img", "[", ":", ",", "2", "]", ")", "/", "(", "img", ".", "max", "(", "1", ")", "[", "0", "]", "-", "img", ".", "min", "(", "1", ")", "[", "0", "]", "+", "eps", ")", ")", "[", "\n", "img", "[", ":", ",", "0", "]", "==", "img", ".", "max", "(", "1", ")", "[", "0", "]", "]", ")", "%", "6", "\n", "\n", "hue", "[", "img", ".", "min", "(", "1", ")", "[", "0", "]", "==", "img", ".", "max", "(", "1", ")", "[", "0", "]", "]", "=", "0.0", "\n", "hue", "=", "hue", "/", "6", "\n", "\n", "saturation", "=", "(", "img", ".", "max", "(", "1", ")", "[", "0", "]", "-", "img", ".", "min", "(", "1", ")", "[", "0", "]", ")", "/", "(", "img", ".", "max", "(", "1", ")", "[", "0", "]", "+", "eps", ")", "\n", "saturation", "[", "img", ".", "max", "(", "1", ")", "[", "0", "]", "==", "0", "]", "=", "0", "\n", "\n", "value", "=", "img", ".", "max", "(", "1", ")", "[", "0", "]", "\n", "\n", "hue", "=", "hue", ".", "unsqueeze", "(", "1", ")", "\n", "saturation", "=", "saturation", ".", "unsqueeze", "(", "1", ")", "\n", "value", "=", "value", ".", "unsqueeze", "(", "1", ")", "\n", "hsv", "=", "torch", ".", "cat", "(", "[", "hue", ",", "saturation", ",", "value", "]", ",", "dim", "=", "1", ")", "\n", "return", "hsv", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.hsv_utils.hsv_to_rgb": [[174, 246], ["torch.zeros_like", "hues.clone", "torch.zeros_like", "hues.clone", "torch.zeros_like", "hues.clone", "torch.cat", "len", "torch.abs"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len"], ["", "def", "hsv_to_rgb", "(", "input_hsv_tensor", ")", ":", "\n", "    ", "\"\"\"\n    Differentiable HSV to RGB conversion function.\n    :param input_hsv_tensor: Batch of HSV images [batch_size, 3, height, width]\n    :return: Batch of RGB images [batch_size, 3, height, width]\n    \"\"\"", "\n", "assert", "len", "(", "input_hsv_tensor", ".", "shape", ")", "==", "4", "and", "input_hsv_tensor", ".", "shape", "[", "1", "]", "==", "3", "\n", "hues", "=", "input_hsv_tensor", "[", ":", ",", "0", ",", ":", ",", ":", "]", "\n", "sats", "=", "input_hsv_tensor", "[", ":", ",", "1", ",", ":", ",", ":", "]", "\n", "vals", "=", "input_hsv_tensor", "[", ":", ",", "2", ",", ":", ",", ":", "]", "\n", "c", "=", "sats", "*", "vals", "\n", "\n", "x", "=", "c", "*", "(", "1", "-", "torch", ".", "abs", "(", "(", "hues", "*", "6.0", ")", "%", "2.0", "-", "1.0", ")", ")", "\n", "m", "=", "vals", "-", "c", "\n", "\n", "# Compute R", "\n", "r_hat", "=", "torch", ".", "zeros_like", "(", "hues", ")", "\n", "filter_hues", "=", "hues", ".", "clone", "(", ")", "\n", "r_hat", "[", "filter_hues", "<", "1.0", "/", "6.0", "]", "=", "c", "[", "filter_hues", "<", "1.0", "/", "6.0", "]", "\n", "filter_hues", "[", "filter_hues", "<", "1.0", "/", "6.0", "]", "+=", "10.0", "\n", "r_hat", "[", "filter_hues", "<", "2.0", "/", "6.0", "]", "=", "x", "[", "filter_hues", "<", "2.0", "/", "6.0", "]", "\n", "filter_hues", "[", "filter_hues", "<", "2.0", "/", "6.0", "]", "+=", "10.0", "\n", "r_hat", "[", "filter_hues", "<", "3.0", "/", "6.0", "]", "=", "0", "\n", "filter_hues", "[", "filter_hues", "<", "3.0", "/", "6.0", "]", "+=", "10.0", "\n", "r_hat", "[", "filter_hues", "<", "4.0", "/", "6.0", "]", "=", "0", "\n", "filter_hues", "[", "filter_hues", "<", "4.0", "/", "6.0", "]", "+=", "10.0", "\n", "r_hat", "[", "filter_hues", "<", "5.0", "/", "6.0", "]", "=", "x", "[", "filter_hues", "<", "5.0", "/", "6.0", "]", "\n", "filter_hues", "[", "filter_hues", "<", "5.0", "/", "6.0", "]", "+=", "10.0", "\n", "r_hat", "[", "filter_hues", "<=", "6.0", "/", "6.0", "]", "=", "c", "[", "filter_hues", "<=", "6.0", "/", "6.0", "]", "\n", "filter_hues", "[", "filter_hues", "<=", "6.0", "/", "6.0", "]", "+=", "10.0", "\n", "\n", "# Compute G", "\n", "g_hat", "=", "torch", ".", "zeros_like", "(", "hues", ")", "\n", "filter_hues", "=", "hues", ".", "clone", "(", ")", "\n", "g_hat", "[", "filter_hues", "<", "1.0", "/", "6.0", "]", "=", "x", "[", "filter_hues", "<", "1.0", "/", "6.0", "]", "\n", "filter_hues", "[", "filter_hues", "<", "1.0", "/", "6.0", "]", "+=", "10.0", "\n", "g_hat", "[", "filter_hues", "<", "2.0", "/", "6.0", "]", "=", "c", "[", "filter_hues", "<", "2.0", "/", "6.0", "]", "\n", "filter_hues", "[", "filter_hues", "<", "2.0", "/", "6.0", "]", "+=", "10.0", "\n", "g_hat", "[", "filter_hues", "<", "3.0", "/", "6.0", "]", "=", "c", "[", "filter_hues", "<", "3.0", "/", "6.0", "]", "\n", "filter_hues", "[", "filter_hues", "<", "3.0", "/", "6.0", "]", "+=", "10.0", "\n", "g_hat", "[", "filter_hues", "<", "4.0", "/", "6.0", "]", "=", "x", "[", "filter_hues", "<", "4.0", "/", "6.0", "]", "\n", "filter_hues", "[", "filter_hues", "<", "4.0", "/", "6.0", "]", "+=", "10.0", "\n", "g_hat", "[", "filter_hues", "<", "5.0", "/", "6.0", "]", "=", "0", "\n", "filter_hues", "[", "filter_hues", "<", "5.0", "/", "6.0", "]", "+=", "10.0", "\n", "g_hat", "[", "filter_hues", "<=", "6.0", "/", "6.0", "]", "=", "0", "\n", "filter_hues", "[", "filter_hues", "<=", "6.0", "/", "6.0", "]", "+=", "10.0", "\n", "\n", "# Compute B", "\n", "b_hat", "=", "torch", ".", "zeros_like", "(", "hues", ")", "\n", "filter_hues", "=", "hues", ".", "clone", "(", ")", "\n", "b_hat", "[", "filter_hues", "<", "1.0", "/", "6.0", "]", "=", "0", "\n", "filter_hues", "[", "filter_hues", "<", "1.0", "/", "6.0", "]", "+=", "10.0", "\n", "b_hat", "[", "filter_hues", "<", "2.0", "/", "6.0", "]", "=", "0", "\n", "filter_hues", "[", "filter_hues", "<", "2.0", "/", "6.0", "]", "+=", "10.0", "\n", "b_hat", "[", "filter_hues", "<", "3.0", "/", "6.0", "]", "=", "x", "[", "filter_hues", "<", "3.0", "/", "6.0", "]", "\n", "filter_hues", "[", "filter_hues", "<", "3.0", "/", "6.0", "]", "+=", "10.0", "\n", "b_hat", "[", "filter_hues", "<", "4.0", "/", "6.0", "]", "=", "c", "[", "filter_hues", "<", "4.0", "/", "6.0", "]", "\n", "filter_hues", "[", "filter_hues", "<", "4.0", "/", "6.0", "]", "+=", "10.0", "\n", "b_hat", "[", "filter_hues", "<", "5.0", "/", "6.0", "]", "=", "c", "[", "filter_hues", "<", "5.0", "/", "6.0", "]", "\n", "filter_hues", "[", "filter_hues", "<", "5.0", "/", "6.0", "]", "+=", "10.0", "\n", "b_hat", "[", "filter_hues", "<=", "6.0", "/", "6.0", "]", "=", "x", "[", "filter_hues", "<=", "6.0", "/", "6.0", "]", "\n", "filter_hues", "[", "filter_hues", "<=", "6.0", "/", "6.0", "]", "+=", "10.0", "\n", "\n", "r", "=", "(", "r_hat", "+", "m", ")", ".", "view", "(", "input_hsv_tensor", ".", "shape", "[", "0", "]", ",", "1", ",", "input_hsv_tensor", ".", "shape", "[", "2", "]", ",", "\n", "input_hsv_tensor", ".", "shape", "[", "3", "]", ")", "\n", "g", "=", "(", "g_hat", "+", "m", ")", ".", "view", "(", "input_hsv_tensor", ".", "shape", "[", "0", "]", ",", "1", ",", "input_hsv_tensor", ".", "shape", "[", "2", "]", ",", "\n", "input_hsv_tensor", ".", "shape", "[", "3", "]", ")", "\n", "b", "=", "(", "b_hat", "+", "m", ")", ".", "view", "(", "input_hsv_tensor", ".", "shape", "[", "0", "]", ",", "1", ",", "input_hsv_tensor", ".", "shape", "[", "2", "]", ",", "\n", "input_hsv_tensor", ".", "shape", "[", "3", "]", ")", "\n", "\n", "rgb", "=", "torch", ".", "cat", "(", "[", "r", ",", "g", ",", "b", "]", ",", "dim", "=", "1", ")", "\n", "return", "rgb", "\n", "", ""]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.neural_texture_helper.VGGFeatures.__init__": [[11, 34], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "range", "range", "range", "range", "range", "neural_texture_helper.VGGFeatures.parameters", "plan2scene.texture_gen.nets.vgg.vgg19", "neural_texture_helper.VGGFeatures.slice1.add_module", "neural_texture_helper.VGGFeatures.slice2.add_module", "neural_texture_helper.VGGFeatures.slice3.add_module", "neural_texture_helper.VGGFeatures.slice4.add_module", "neural_texture_helper.VGGFeatures.slice5.add_module", "str", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.models.ceiling.Ceiling.__init__", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.nets.vgg.vgg19"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "torch", ".", "nn", ".", "Module", ".", "__init__", "(", "self", ")", "\n", "\n", "vgg_pretrained_features", "=", "vgg19", "(", "pretrained", "=", "True", ")", ".", "features", "\n", "\n", "self", ".", "slice1", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice2", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice3", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice4", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice5", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "\n", "for", "x", "in", "range", "(", "4", ")", ":", "# relu_1_1", "\n", "            ", "self", ".", "slice1", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "4", ",", "9", ")", ":", "# relu_2_1", "\n", "            ", "self", ".", "slice2", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "9", ",", "18", ")", ":", "# relu_3_1", "\n", "            ", "self", ".", "slice3", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "18", ",", "27", ")", ":", "# relu_4_1", "\n", "            ", "self", ".", "slice4", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "27", ",", "36", ")", ":", "# relu_5_1", "\n", "            ", "self", ".", "slice5", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.neural_texture_helper.VGGFeatures.forward": [[35, 59], ["torch.as_tensor().view", "torch.as_tensor().view", "x.div.div.sub", "x.div.div.div", "neural_texture_helper.VGGFeatures.slice1", "neural_texture_helper.VGGFeatures.slice2", "neural_texture_helper.VGGFeatures.slice3", "neural_texture_helper.VGGFeatures.slice4", "neural_texture_helper.VGGFeatures.slice5", "torch.as_tensor", "torch.as_tensor"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "## normalize", "\n", "        ", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", "\n", "device", "=", "'cuda'", "if", "x", ".", "is_cuda", "else", "'cpu'", "\n", "mean", "=", "torch", ".", "as_tensor", "(", "mean", ",", "device", "=", "device", ")", ".", "view", "(", "1", ",", "3", ",", "1", ",", "1", ")", "\n", "std", "=", "torch", ".", "as_tensor", "(", "std", ",", "device", "=", "device", ")", ".", "view", "(", "1", ",", "3", ",", "1", ",", "1", ")", "\n", "x", "=", "x", ".", "sub", "(", "mean", ")", "\n", "x", "=", "x", ".", "div", "(", "std", ")", "\n", "\n", "# get features", "\n", "h1", "=", "self", ".", "slice1", "(", "x", ")", "\n", "h_relu1_1", "=", "h1", "\n", "h2", "=", "self", ".", "slice2", "(", "h1", ")", "\n", "h_relu2_1", "=", "h2", "\n", "h3", "=", "self", ".", "slice3", "(", "h2", ")", "\n", "h_relu3_1", "=", "h3", "\n", "h4", "=", "self", ".", "slice4", "(", "h3", ")", "\n", "h_relu4_1", "=", "h4", "\n", "h5", "=", "self", ".", "slice5", "(", "h4", ")", "\n", "h_relu5_1", "=", "h5", "\n", "\n", "return", "[", "h_relu1_1", ",", "h_relu2_1", ",", "h_relu3_1", ",", "h_relu4_1", ",", "h_relu5_1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.neural_texture_helper.GramMatrix.forward": [[63, 70], ["input.size", "input.view", "torch.bmm", "torch.bmm.div_", "input.view.transpose"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "b", ",", "c", ",", "h", ",", "w", "=", "input", ".", "size", "(", ")", "\n", "features", "=", "input", ".", "view", "(", "b", ",", "c", ",", "h", "*", "w", ")", "\n", "gram_matrix", "=", "torch", ".", "bmm", "(", "features", ",", "features", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "\n", "gram_matrix", ".", "div_", "(", "h", "*", "w", ")", "\n", "return", "gram_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.neural_texture_helper.get_position": [[72, 100], ["kornia.utils.create_meshgrid().permute", "torch.cat.expand", "torch.split", "torch.split", "torch.randint().item", "torch.cat", "kornia.utils.create_meshgrid", "torch.randint", "torch.device", "torch.ones_like", "torch.rand"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.abstract_trainer.AbstractTrainer.device"], ["", "", "def", "get_position", "(", "size", ",", "dim", ",", "device", ",", "batch_size", ")", ":", "\n", "    ", "height", ",", "width", "=", "size", "\n", "aspect_ratio", "=", "width", "/", "height", "\n", "position", "=", "kornia", ".", "utils", ".", "create_meshgrid", "(", "height", ",", "width", ",", "device", "=", "torch", ".", "device", "(", "device", ")", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "position", "[", ":", ",", "1", "]", "=", "-", "position", "[", ":", ",", "1", "]", "*", "aspect_ratio", "# flip y axis", "\n", "\n", "if", "dim", "==", "1", ":", "\n", "        ", "x", ",", "y", "=", "torch", ".", "split", "(", "position", ",", "1", ",", "dim", "=", "1", ")", "\n", "position", "=", "x", "\n", "", "if", "dim", "==", "3", ":", "\n", "\n", "        ", "x", ",", "y", "=", "torch", ".", "split", "(", "position", ",", "1", ",", "dim", "=", "1", ")", "\n", "\n", "z", "=", "torch", ".", "ones_like", "(", "x", ")", "*", "torch", ".", "rand", "(", "1", ",", "device", "=", "device", ")", "*", "2", "-", "1", "\n", "\n", "a", "=", "torch", ".", "randint", "(", "0", ",", "3", ",", "(", "1", ",", ")", ")", ".", "item", "(", ")", "\n", "if", "a", "==", "0", ":", "\n", "            ", "xyz", "=", "[", "x", ",", "y", ",", "z", "]", "\n", "", "elif", "a", "==", "1", ":", "\n", "            ", "xyz", "=", "[", "z", ",", "x", ",", "y", "]", "\n", "", "else", ":", "\n", "            ", "xyz", "=", "[", "x", ",", "z", ",", "y", "]", "\n", "\n", "", "position", "=", "torch", ".", "cat", "(", "xyz", ",", "dim", "=", "1", ")", "\n", "\n", "", "position", "=", "position", ".", "expand", "(", "batch_size", ",", "dim", ",", "height", ",", "width", ")", "\n", "\n", "return", "position", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.neural_texture_helper.transform_coord": [[102, 130], ["torch.nn.init.eye_", "coord.reshape.size", "t_coeff.expand.reshape", "torch.nn.init.eye_.expand", "transform_matrix.reshape.unsqueeze().unsqueeze", "transform_matrix.reshape.expand", "transform_matrix.reshape.reshape", "coord.reshape.reshape", "torch.bmm().squeeze", "coord_transformed.reshape.reshape", "torch.empty", "t_coeff.expand.reshape", "t_coeff.expand.permute", "t_coeff.expand.reshape().unsqueeze().unsqueeze", "t_coeff.expand.expand", "transform_matrix.reshape.unsqueeze", "torch.bmm", "t_coeff.expand.reshape().unsqueeze", "t_coeff.expand.reshape"], "function", ["None"], ["", "def", "transform_coord", "(", "coord", ",", "t_coeff", ",", "dim", ")", ":", "\n", "    ", "device", "=", "'cuda'", "if", "coord", ".", "is_cuda", "else", "'cpu'", "\n", "identity_matrix", "=", "torch", ".", "nn", ".", "init", ".", "eye_", "(", "torch", ".", "empty", "(", "dim", ",", "dim", ",", "device", "=", "device", ")", ")", "\n", "\n", "bs", ",", "octaves", ",", "h", ",", "w", ",", "dim", "=", "coord", ".", "size", "(", ")", "\n", "\n", "inter", "=", "(", "t_coeff", ".", "shape", "[", "2", "]", "!=", "1", ")", "\n", "if", "inter", ":", "\n", "        ", "t_coeff", "=", "t_coeff", ".", "reshape", "(", "bs", ",", "octaves", ",", "dim", ",", "dim", ",", "h", ",", "w", ")", "\n", "t_coeff", "=", "t_coeff", ".", "permute", "(", "0", ",", "1", ",", "4", ",", "5", ",", "2", ",", "3", ")", "\n", "", "else", ":", "\n", "        ", "t_coeff", "=", "t_coeff", ".", "reshape", "(", "bs", ",", "octaves", ",", "dim", ",", "dim", ")", ".", "unsqueeze", "(", "2", ")", ".", "unsqueeze", "(", "2", ")", "\n", "\n", "t_coeff", "=", "t_coeff", ".", "expand", "(", "bs", ",", "octaves", ",", "h", ",", "w", ",", "dim", ",", "dim", ")", "\n", "", "t_coeff", "=", "t_coeff", ".", "reshape", "(", "bs", "*", "octaves", ",", "h", ",", "w", ",", "dim", ",", "dim", ")", "\n", "\n", "transform_matrix", "=", "identity_matrix", ".", "expand", "(", "bs", "*", "octaves", ",", "dim", ",", "dim", ")", "\n", "transform_matrix", "=", "transform_matrix", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "1", ")", "\n", "transform_matrix", "=", "transform_matrix", ".", "expand", "(", "bs", "*", "octaves", ",", "h", ",", "w", ",", "dim", ",", "dim", ")", "\n", "\n", "transform_matrix", "=", "transform_matrix", "+", "t_coeff", "\n", "transform_matrix", "=", "transform_matrix", ".", "reshape", "(", "h", "*", "w", "*", "bs", "*", "octaves", ",", "dim", ",", "dim", ")", "\n", "\n", "coord", "=", "coord", ".", "reshape", "(", "h", "*", "w", "*", "bs", "*", "octaves", ",", "dim", ",", "1", ")", "\n", "coord_transformed", "=", "torch", ".", "bmm", "(", "transform_matrix", ",", "coord", ")", ".", "squeeze", "(", "2", ")", "\n", "coord_transformed", "=", "coord_transformed", ".", "reshape", "(", "bs", ",", "octaves", ",", "h", ",", "w", ",", "dim", ")", "\n", "\n", "return", "coord_transformed", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.neural_texture_helper.get_loss_no_reduce": [[132, 148], ["vgg_features.eval", "gram_matrix.eval", "torch.zeros", "vgg_features", "vgg_features", "list", "list", "zip", "plan2scene.signed_to_unsigned", "plan2scene.signed_to_unsigned", "map", "map", "criterion().view().mean", "criterion().view", "criterion"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.utils.signed_to_unsigned", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.utils.signed_to_unsigned"], ["", "def", "get_loss_no_reduce", "(", "image_gt", ",", "image_out", ",", "param", ",", "vgg_features", ",", "gram_matrix", ",", "criterion", ")", ":", "\n", "    ", "vgg_features", ".", "eval", "(", ")", "\n", "gram_matrix", ".", "eval", "(", ")", "\n", "\n", "loss_style", "=", "torch", ".", "zeros", "(", "(", "image_gt", ".", "shape", "[", "0", "]", ")", ",", "device", "=", "param", ".", "device", ")", "\n", "vgg_features_out", "=", "vgg_features", "(", "util", ".", "signed_to_unsigned", "(", "image_out", ")", ")", "\n", "vgg_features_gt", "=", "vgg_features", "(", "util", ".", "signed_to_unsigned", "(", "image_gt", ")", ")", "\n", "\n", "gram_matrices_gt", "=", "list", "(", "map", "(", "gram_matrix", ",", "vgg_features_gt", ")", ")", "\n", "gram_matrices_out", "=", "list", "(", "map", "(", "gram_matrix", ",", "vgg_features_out", ")", ")", "\n", "\n", "for", "gram_matrix_gt", ",", "gram_matrix_out", "in", "zip", "(", "gram_matrices_gt", ",", "gram_matrices_out", ")", ":", "\n", "        ", "loss_style", "+=", "param", ".", "system", ".", "loss_params", ".", "style_weight", "*", "criterion", "(", "gram_matrix_out", ",", "gram_matrix_gt", ")", ".", "view", "(", "\n", "image_gt", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ".", "mean", "(", "dim", "=", "1", ")", "\n", "\n", "", "return", "loss_style", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.neural_texture_helper.get_loss": [[150, 166], ["vgg_features.eval", "gram_matrix.eval", "torch.tensor", "vgg_features", "vgg_features", "list", "list", "zip", "plan2scene.signed_to_unsigned", "plan2scene.signed_to_unsigned", "map", "map", "criterion"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.utils.signed_to_unsigned", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.utils.signed_to_unsigned"], ["", "def", "get_loss", "(", "image_gt", ",", "image_out", ",", "param", ",", "vgg_features", ",", "gram_matrix", ",", "criterion", ")", ":", "\n", "# Switching the VGG Network and Gram Matrix to EVAL mode.", "\n", "    ", "vgg_features", ".", "eval", "(", ")", "\n", "gram_matrix", ".", "eval", "(", ")", "\n", "\n", "loss_style", "=", "torch", ".", "tensor", "(", "0.0", ",", "device", "=", "param", ".", "device", ")", "\n", "vgg_features_out", "=", "vgg_features", "(", "util", ".", "signed_to_unsigned", "(", "image_out", ")", ")", "\n", "vgg_features_gt", "=", "vgg_features", "(", "util", ".", "signed_to_unsigned", "(", "image_gt", ")", ")", "\n", "\n", "gram_matrices_gt", "=", "list", "(", "map", "(", "gram_matrix", ",", "vgg_features_gt", ")", ")", "\n", "gram_matrices_out", "=", "list", "(", "map", "(", "gram_matrix", ",", "vgg_features_out", ")", ")", "\n", "\n", "for", "gram_matrix_gt", ",", "gram_matrix_out", "in", "zip", "(", "gram_matrices_gt", ",", "gram_matrices_out", ")", ":", "\n", "        ", "loss_style", "+=", "param", ".", "system", ".", "loss_params", ".", "style_weight", "*", "criterion", "(", "gram_matrix_out", ",", "gram_matrix_gt", ")", "\n", "\n", "", "return", "loss_style", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.utils.get_grid_coords_2d": [[8, 12], ["torch.meshgrid", "torch.stack"], "function", ["None"], ["def", "get_grid_coords_2d", "(", "y", ",", "x", ",", "coord_dim", "=", "-", "1", ")", ":", "\n", "    ", "y", ",", "x", "=", "torch", ".", "meshgrid", "(", "y", ",", "x", ")", "\n", "coords", "=", "torch", ".", "stack", "(", "[", "x", ",", "y", "]", ",", "dim", "=", "coord_dim", ")", "\n", "return", "coords", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.utils.get_grid_coords_3d": [[14, 18], ["torch.meshgrid", "torch.stack"], "function", ["None"], ["", "def", "get_grid_coords_3d", "(", "z", ",", "y", ",", "x", ",", "coord_dim", "=", "-", "1", ")", ":", "\n", "    ", "z", ",", "y", ",", "x", "=", "torch", ".", "meshgrid", "(", "z", ",", "y", ",", "x", ")", "\n", "coords", "=", "torch", ".", "stack", "(", "[", "x", ",", "y", ",", "z", "]", ",", "dim", "=", "coord_dim", ")", "\n", "return", "coords", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.utils.signed_to_unsigned": [[20, 27], ["None"], "function", ["None"], ["", "def", "signed_to_unsigned", "(", "array", ")", ":", "\n", "    ", "\"\"\"\n    Converts a signed tensor to unsigned.\n    :param array:\n    :return:\n    \"\"\"", "\n", "return", "(", "array", "+", "1", ")", "/", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.utils.unsigned_to_signed": [[29, 36], ["None"], "function", ["None"], ["", "def", "unsigned_to_signed", "(", "array", ")", ":", "\n", "    ", "\"\"\"\n    Converts an unsigned tensor to signed.\n    :param array:\n    :return:\n    \"\"\"", "\n", "return", "(", "array", "-", "0.5", ")", "/", "0.5", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.utils.pytorch_to_numpy": [[38, 47], ["np.moveaxis.detach().cpu().numpy", "numpy.moveaxis", "np.moveaxis.detach().cpu", "np.moveaxis.detach"], "function", ["None"], ["", "def", "pytorch_to_numpy", "(", "array", ",", "is_batch", "=", "True", ",", "flip", "=", "True", ")", ":", "\n", "    ", "array", "=", "array", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "if", "flip", ":", "\n", "        ", "source", "=", "1", "if", "is_batch", "else", "0", "\n", "dest", "=", "array", ".", "ndim", "-", "1", "\n", "array", "=", "np", ".", "moveaxis", "(", "array", ",", "source", ",", "dest", ")", "\n", "\n", "", "return", "array", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.utils.numpy_to_pytorch": [[49, 59], ["torch.from_numpy", "np.moveaxis.float", "numpy.moveaxis"], "function", ["None"], ["", "def", "numpy_to_pytorch", "(", "array", ",", "is_batch", "=", "False", ",", "flip", "=", "True", ")", ":", "\n", "    ", "if", "flip", ":", "\n", "        ", "dest", "=", "1", "if", "is_batch", "else", "0", "\n", "source", "=", "array", ".", "ndim", "-", "1", "\n", "array", "=", "np", ".", "moveaxis", "(", "array", ",", "source", ",", "dest", ")", "\n", "\n", "", "array", "=", "torch", ".", "from_numpy", "(", "array", ")", "\n", "array", "=", "array", ".", "float", "(", ")", "\n", "\n", "return", "array", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.utils.convert_to_int": [[61, 72], ["array.astype", "type", "array.byte", "type"], "function", ["None"], ["", "def", "convert_to_int", "(", "array", ")", ":", "\n", "    ", "array", "*=", "255", "\n", "array", "[", "array", ">", "255", "]", "=", "255.0", "\n", "\n", "if", "type", "(", "array", ")", ".", "__module__", "==", "'numpy'", ":", "\n", "        ", "return", "array", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "", "elif", "type", "(", "array", ")", ".", "__module__", "==", "'torch'", ":", "\n", "        ", "return", "array", ".", "byte", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.utils.convert_to_float": [[74, 85], ["numpy.iinfo", "type", "array.astype", "type", "array.float"], "function", ["None"], ["", "", "def", "convert_to_float", "(", "array", ")", ":", "\n", "    ", "max_value", "=", "np", ".", "iinfo", "(", "array", ".", "dtype", ")", ".", "max", "\n", "array", "[", "array", ">", "max_value", "]", "=", "max_value", "\n", "\n", "if", "type", "(", "array", ")", ".", "__module__", "==", "'numpy'", ":", "\n", "        ", "return", "array", ".", "astype", "(", "np", ".", "float32", ")", "/", "max_value", "\n", "\n", "", "elif", "type", "(", "array", ")", ".", "__module__", "==", "'torch'", ":", "\n", "        ", "return", "array", ".", "float", "(", ")", "/", "max_value", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.utils.metric_mse": [[87, 89], ["torch.nn.functional.mse_loss().mean().item", "torch.nn.functional.mse_loss().mean", "torch.nn.functional.mse_loss"], "function", ["None"], ["", "", "def", "metric_mse", "(", "output", ",", "target", ")", ":", "\n", "    ", "return", "torch", ".", "nn", ".", "functional", ".", "mse_loss", "(", "output", ",", "target", ")", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.utils.dict_to_keyvalue": [[91, 107], ["params.items", "isinstance", "hparams.update", "utils.dict_to_keyvalue"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.utils.dict_to_keyvalue"], ["", "def", "dict_to_keyvalue", "(", "params", ",", "prefix", "=", "''", ")", ":", "\n", "    ", "hparams", "=", "{", "}", "\n", "\n", "for", "key", ",", "value", "in", "params", ".", "items", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "            ", "if", "not", "prefix", "==", "''", ":", "\n", "                ", "new_prefix", "=", "'{}.{}'", ".", "format", "(", "prefix", ",", "key", ")", "\n", "", "else", ":", "\n", "                ", "new_prefix", "=", "key", "\n", "", "hparams", ".", "update", "(", "dict_to_keyvalue", "(", "value", ",", "prefix", "=", "new_prefix", ")", ")", "\n", "", "else", ":", "\n", "            ", "if", "not", "prefix", "==", "''", ":", "\n", "                ", "key", "=", "'{}.{}'", ".", "format", "(", "prefix", ",", "key", ")", "\n", "", "hparams", "[", "key", "]", "=", "value", "\n", "\n", "", "", "return", "hparams", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.utils.dict_mean": [[109, 122], ["dict_list[].keys", "isinstance", "dict_item[].keys", "sum", "len", "mean_dict.__contains__", "sum", "len"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len"], ["", "def", "dict_mean", "(", "dict_list", ")", ":", "\n", "    ", "mean_dict", "=", "{", "}", "\n", "dict_item", "=", "dict_list", "[", "0", "]", "\n", "\n", "for", "key", "in", "dict_list", "[", "0", "]", ".", "keys", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "dict_item", "[", "key", "]", ",", "dict", ")", ":", "\n", "            ", "for", "key2", "in", "dict_item", "[", "key", "]", ".", "keys", "(", ")", ":", "\n", "                ", "if", "not", "mean_dict", ".", "__contains__", "(", "key", ")", ":", "\n", "                    ", "mean_dict", "[", "key", "]", "=", "{", "}", "\n", "", "mean_dict", "[", "key", "]", "[", "key2", "]", "=", "sum", "(", "d", "[", "key", "]", "[", "key2", "]", "for", "d", "in", "dict_list", ")", "/", "len", "(", "dict_list", ")", "\n", "", "", "else", ":", "\n", "            ", "mean_dict", "[", "key", "]", "=", "sum", "(", "d", "[", "key", "]", "for", "d", "in", "dict_list", ")", "/", "len", "(", "dict_list", ")", "\n", "", "", "return", "mean_dict", "\n", "", ""]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_gen.predictor.TextureGenPredictor.__init__": [[28, 50], ["plan2scene.texture_gen.nets.neural_texture.texture_gen.TextureGen().to", "plan2scene.texture_gen.nets.neural_texture.texture_gen.TextureGen().to", "predictor.TextureGenPredictor.update_seed", "plan2scene.VGGFeatures().to", "plan2scene.VGGFeatures().to", "plan2scene.GramMatrix().to", "plan2scene.GramMatrix().to", "torch.nn.MSELoss", "plan2scene.texture_gen.nets.neural_texture.texture_gen.TextureGen", "plan2scene.texture_gen.nets.neural_texture.texture_gen.TextureGen", "plan2scene.VGGFeatures", "plan2scene.VGGFeatures", "plan2scene.GramMatrix", "plan2scene.GramMatrix"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_gen.predictor.TextureGenPredictor.update_seed"], ["def", "__init__", "(", "self", ",", "conf", ",", "rgb_median_emb", ":", "bool", ")", ":", "\n", "        ", "\"\"\"\n        Initializes predictor\n        :param conf: Model config used by neural texture synthesis.\n        :param rgb_median_emb: Should the color component of the median embedding be converted back to RGB?\n        \"\"\"", "\n", "self", ".", "conf", "=", "conf", "\n", "self", ".", "rgb_median_emb", "=", "rgb_median_emb", "\n", "\n", "# Modified neural texture network", "\n", "self", ".", "net", "=", "TextureGen", "(", "conf", ")", ".", "to", "(", "conf", ".", "device", ")", "\n", "\n", "# Load substance labels if supported", "\n", "self", ".", "substances", "=", "None", "\n", "if", "\"substances\"", "in", "conf", ".", "dataset", "and", "conf", ".", "system", ".", "arch", ".", "model_substance_classifier", ".", "model_params", ".", "available", ":", "\n", "            ", "self", ".", "substances", "=", "conf", ".", "dataset", ".", "substances", "\n", "\n", "", "self", ".", "update_seed", "(", ")", "\n", "\n", "self", ".", "vgg_features", "=", "utils_nt", ".", "VGGFeatures", "(", ")", ".", "to", "(", "conf", ".", "device", ")", "\n", "self", ".", "gram_matrix", "=", "utils_nt", ".", "GramMatrix", "(", ")", ".", "to", "(", "conf", ".", "device", ")", "\n", "self", ".", "criterion", "=", "nn", ".", "MSELoss", "(", "reduction", "=", "\"none\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_gen.predictor.TextureGenPredictor.load_checkpoint": [[51, 59], ["torch.load", "logging.info", "predictor.TextureGenPredictor.net.load_state_dict"], "methods", ["None"], ["", "def", "load_checkpoint", "(", "self", ",", "checkpoint_path", ":", "str", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Load saved checkpoint\n        :param checkpoint_path: Path to checkpoint\n        \"\"\"", "\n", "ckpt", "=", "torch", ".", "load", "(", "checkpoint_path", ")", "\n", "logging", ".", "info", "(", "\n", "\"Loading Checkpoint %s: %s\"", "%", "(", "checkpoint_path", ",", "self", ".", "net", ".", "load_state_dict", "(", "ckpt", "[", "\"model_state_dict\"", "]", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_gen.predictor.TextureGenPredictor.get_position": [[60, 68], ["plan2scene.get_position", "plan2scene.get_position"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_gen.predictor.TextureGenPredictor.get_position", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_gen.predictor.TextureGenPredictor.get_position"], ["", "def", "get_position", "(", "self", ")", "->", "Tensor", ":", "\n", "        ", "\"\"\"\n        Return the position tensor\n        :return: position tensor\n        \"\"\"", "\n", "sample_pos", "=", "utils_nt", ".", "get_position", "(", "(", "self", ".", "conf", ".", "image", ".", "image_res", ",", "self", ".", "conf", ".", "image", ".", "image_res", ")", ",", "self", ".", "conf", ".", "dim", ",", "\n", "self", ".", "conf", ".", "device", ",", "self", ".", "conf", ".", "train", ".", "bs", ")", "\n", "return", "sample_pos", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_gen.predictor.TextureGenPredictor.predict_embs": [[69, 89], ["torch.no_grad", "torch.cat", "torch.cat", "predictor.TextureGenPredictor.predict", "plan2scene.texture_gen.utils.neural_texture_helper.get_loss_no_reduce", "plan2scene.texture_gen.utils.neural_texture_helper.get_loss_no_reduce", "torch.cat.to", "torch.cat.to", "predictor.TextureGenPredictor.get_position", "plan2scene.unsigned_to_signed().to", "plan2scene.unsigned_to_signed().to", "predictor.TextureGenPredictor.combined_emb.cpu", "plan2scene.texture_gen.utils.neural_texture_helper.get_loss_no_reduce.cpu", "plan2scene.texture_gen.utils.neural_texture_helper.get_loss_no_reduce.cpu", "plan2scene.unsigned_to_signed", "plan2scene.unsigned_to_signed", "torchvision.transforms.ToTensor", "torchvision.transforms.ToTensor", "plan2scene.texture_gen.custom_transforms.hsv_transforms.ToHSV", "plan2scene.texture_gen.custom_transforms.hsv_transforms.ToHSV"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.predictor.TexturePropPredictor.predict", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.neural_texture_helper.get_loss_no_reduce", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.neural_texture_helper.get_loss_no_reduce", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_gen.predictor.TextureGenPredictor.get_position", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.utils.unsigned_to_signed", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.utils.unsigned_to_signed"], ["", "def", "predict_embs", "(", "self", ",", "sample_image_crops", ":", "list", ")", ":", "\n", "        ", "\"\"\"\n        Predict latent embeddings and VGG losses for the given crops using the encoder.\n        :param sample_image_crops: List of PIL Image crops\n        :return: Tuple (embeddings tensor, losses tensor)\n        \"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "unsigned_images", "=", "torch", ".", "cat", "(", "[", "tfs", ".", "ToTensor", "(", ")", "(", "a", ")", ".", "unsqueeze", "(", "0", ")", "for", "a", "in", "sample_image_crops", "]", ",", "dim", "=", "0", ")", "\n", "unsigned_hsv_images", "=", "torch", ".", "cat", "(", "[", "tfs", ".", "ToTensor", "(", ")", "(", "ToHSV", "(", ")", "(", "a", ")", ")", ".", "unsqueeze", "(", "0", ")", "for", "a", "in", "sample_image_crops", "]", ",", "\n", "dim", "=", "0", ")", "\n", "\n", "# Predict using the network", "\n", "predictor_result", "=", "self", ".", "predict", "(", "unsigned_images", ".", "to", "(", "self", ".", "conf", ".", "device", ")", ",", "\n", "unsigned_hsv_images", ".", "to", "(", "self", ".", "conf", ".", "device", ")", ",", "\n", "self", ".", "get_position", "(", ")", ",", "combined_emb", "=", "None", ",", "train", "=", "False", ")", "\n", "\n", "# Compute loss between synthesized texture and conditioned image", "\n", "losses", "=", "get_loss_no_reduce", "(", "util", ".", "unsigned_to_signed", "(", "unsigned_images", ")", ".", "to", "(", "self", ".", "conf", ".", "device", ")", ",", "predictor_result", ".", "image_out", ",", "\n", "self", ".", "conf", ",", "self", ".", "vgg_features", ",", "self", ".", "gram_matrix", ",", "self", ".", "criterion", ")", "\n", "return", "predictor_result", ".", "combined_emb", ".", "cpu", "(", ")", ",", "losses", ".", "cpu", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_gen.predictor.TextureGenPredictor.predict_textures": [[90, 145], ["isinstance", "torch.no_grad", "isinstance", "predictor.TextureGenPredictor.predict", "predictor.TextureGenPredictor.get_position", "range", "torch.cat", "plan2scene.signed_to_unsigned", "plan2scene.signed_to_unsigned", "torch.cat", "predictor.TextureGenPredictor.substance_out.cpu", "predictor.TextureGenPredictor.substance_out.cpu.max", "torch.cat", "range", "torch.cat", "plan2scene.signed_to_unsigned.append", "predictor.TextureGenPredictor.get_position", "torch.cat", "predictor.TextureGenPredictor.predict", "torch.cat.append", "torchvision.transforms.ToPILImage", "range", "predictor.TextureGenPredictor.image_out.cpu", "a.item"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.predictor.TexturePropPredictor.predict", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_gen.predictor.TextureGenPredictor.get_position", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.utils.signed_to_unsigned", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.utils.signed_to_unsigned", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_gen.predictor.TextureGenPredictor.get_position", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.predictor.TexturePropPredictor.predict"], ["", "", "def", "predict_textures", "(", "self", ",", "combined_embs", ":", "Tensor", ",", "multiplier", ":", "int", ")", "->", "tuple", ":", "\n", "        ", "\"\"\"\n        Synthesize a texture given the latent embedding.\n        :param combined_embs: Latent embedding used to condition texture synthesis\n        :param multiplier: Multiplier on output size. We make multiple predictions and stitch. (E.g. if multiplier is 2, we stitch a 2x2 texture)\n        :return: Tuple of (Predicted textures as a list of PIL images, List of predicted substance labels, extra)\n        \"\"\"", "\n", "assert", "isinstance", "(", "multiplier", ",", "int", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "combined_embs", ",", "list", ")", ":", "\n", "                ", "combined_embs", "=", "torch", ".", "cat", "(", "[", "a", "for", "a", "in", "combined_embs", "]", ",", "dim", "=", "0", ")", "\n", "\n", "# Identify substance prediction", "\n", "", "predictor_result", "=", "self", ".", "predict", "(", "unsigned_images", "=", "None", ",", "unsigned_hsv_images", "=", "None", ",", "\n", "sample_pos", "=", "self", ".", "get_position", "(", ")", ",", "train", "=", "False", ",", "\n", "combined_emb", "=", "combined_embs", ")", "\n", "\n", "substance_names", "=", "None", "\n", "if", "predictor_result", ".", "substance_out", "is", "not", "None", ":", "\n", "                ", "substance_out", "=", "predictor_result", ".", "substance_out", ".", "cpu", "(", ")", "\n", "_", ",", "substance_preds", "=", "substance_out", ".", "max", "(", "dim", "=", "1", ")", "\n", "substance_names", "=", "[", "self", ".", "substances", "[", "a", ".", "item", "(", ")", "]", "for", "a", "in", "substance_preds", "]", "\n", "", "else", ":", "\n", "# No substance prediction", "\n", "                ", "substance_names", "=", "[", "None", "for", "a", "in", "range", "(", "combined_embs", ".", "shape", "[", "0", "]", ")", "]", "\n", "\n", "# Generate a large texture by stitching multiple texture predictions", "\n", "", "base_position_stripe", "=", "self", ".", "get_position", "(", ")", "\n", "y_stripe", "=", "[", "]", "\n", "# Loop for stitching along y axis", "\n", "for", "y", "in", "range", "(", "multiplier", ")", ":", "\n", "                ", "y_position_stripe", "=", "torch", ".", "cat", "(", "\n", "[", "base_position_stripe", "[", ":", ",", "0", ":", "1", "]", ",", "base_position_stripe", "[", ":", ",", "1", ":", "2", "]", "-", "2.0", "*", "y", ",", "base_position_stripe", "[", ":", ",", "2", ":", "]", "]", ",", "\n", "dim", "=", "1", ")", "\n", "x_stripe", "=", "[", "]", "\n", "for", "x", "in", "range", "(", "multiplier", ")", ":", "\n", "# Loop for stitching along x axis", "\n", "                    ", "position_stripe", "=", "torch", ".", "cat", "(", "\n", "[", "y_position_stripe", "[", ":", ",", "0", ":", "0", "]", ",", "y_position_stripe", "[", ":", ",", "0", ":", "1", "]", "+", "2.0", "*", "x", ",", "y_position_stripe", "[", ":", ",", "1", ":", "]", "]", ",", "\n", "dim", "=", "1", ")", "\n", "\n", "# Prediction of a texture crop", "\n", "texture_pred_results", "=", "self", ".", "predict", "(", "unsigned_images", "=", "None", ",", "unsigned_hsv_images", "=", "None", ",", "\n", "sample_pos", "=", "position_stripe", ",", "train", "=", "False", ",", "\n", "combined_emb", "=", "combined_embs", ")", "\n", "x_stripe", ".", "append", "(", "texture_pred_results", ".", "image_out", ".", "cpu", "(", ")", ")", "\n", "\n", "", "x_stripe", "=", "torch", ".", "cat", "(", "x_stripe", ",", "dim", "=", "3", ")", "# Merge along x axis", "\n", "y_stripe", ".", "append", "(", "x_stripe", ")", "\n", "\n", "", "y_stripe", "=", "torch", ".", "cat", "(", "y_stripe", ",", "dim", "=", "2", ")", "# Merge along y axis", "\n", "y_stripe", "=", "util", ".", "signed_to_unsigned", "(", "y_stripe", ")", "\n", "y_stripe", "=", "[", "tfs", ".", "ToPILImage", "(", ")", "(", "a", ")", "for", "a", "in", "y_stripe", "]", "# Convert to PIL images", "\n", "\n", "return", "y_stripe", ",", "substance_names", ",", "predictor_result", ".", "extra", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_gen.predictor.TextureGenPredictor._compute_network_input": [[146, 189], ["plan2scene.texture_gen.utils.hsv_utils.hsv_decompose_median", "plan2scene.texture_gen.utils.hsv_utils.hsv_decompose_median", "plan2scene.common.color_description.Color", "plan2scene.common.color_description.Color", "int", "unsigned_hsv_images.to", "plan2scene.unsigned_to_signed", "plan2scene.unsigned_to_signed", "plan2scene.texture_gen.utils.hsv_utils.rgb_decompose_median", "plan2scene.texture_gen.utils.hsv_utils.rgb_decompose_median", "additional_params.extend", "plan2scene.common.color_description.Color", "plan2scene.common.color_description.Color", "plan2scene.unsigned_to_signed().to", "plan2scene.unsigned_to_signed().to", "int", "int", "unsigned_hsv_images.to", "plan2scene.texture_gen.utils.hsv_utils.hsv_to_rgb", "plan2scene.texture_gen.utils.hsv_utils.hsv_to_rgb", "additional_params.extend", "additional_params.extend", "unsigned_images.to", "torch.cat().unsqueeze().unsqueeze", "plan2scene.unsigned_to_signed", "plan2scene.unsigned_to_signed", "torch.cat().unsqueeze", "torch.cat", "median_h.unsqueeze", "median_s.unsqueeze", "median_v.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.hsv_utils.hsv_decompose_median", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.hsv_utils.hsv_decompose_median", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.utils.unsigned_to_signed", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.utils.unsigned_to_signed", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.hsv_utils.rgb_decompose_median", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.hsv_utils.rgb_decompose_median", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.hsv_utils.hsv_to_rgb", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.hsv_utils.hsv_to_rgb", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.utils.unsigned_to_signed", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.utils.unsigned_to_signed"], ["", "", "def", "_compute_network_input", "(", "self", ",", "unsigned_images", ":", "Tensor", ",", "unsigned_hsv_images", ":", "Tensor", ",", "additional_params", ")", "->", "tuple", ":", "\n", "        ", "\"\"\"\n        Compute network input and base color\n        :param unsigned_images: Tensor of unsigned RGB images\n        :param unsigned_hsv_images: Tensor of unsigned HSV images\n        :param additional_params: Additional params to merge to latent embedding. This method may update this.\n        :return: Tuple (network input, base_color)\n        \"\"\"", "\n", "assert", "int", "(", "self", ".", "conf", ".", "image", ".", "hsv_decomp", ")", "+", "int", "(", "self", ".", "conf", ".", "image", ".", "hsv", ")", "+", "int", "(", "self", ".", "conf", ".", "image", ".", "rgb_decomp", ")", "<=", "1", "\n", "\n", "if", "self", ".", "conf", ".", "image", ".", "hsv_decomp", "or", "self", ".", "conf", ".", "image", ".", "hsv", ":", "\n", "# HSV_DECOMP: Convert input to HSV and separate median color. (Paper method)", "\n", "# HSV: Convert input to HSV. (Ablation reported in paper)", "\n", "\n", "            ", "image_gt_decomposed", ",", "median_h", ",", "median_s", ",", "median_v", "=", "hsv_decompose_median", "(", "\n", "unsigned_hsv_images", ".", "to", "(", "self", ".", "conf", ".", "device", ")", ")", "\n", "base_color", "=", "Color", "(", "color_space", "=", "ColorSpace", ".", "HSV", ",", "components", "=", "[", "median_h", ",", "median_s", ",", "median_v", "]", ")", "\n", "\n", "if", "self", ".", "conf", ".", "image", ".", "hsv", "and", "not", "self", ".", "conf", ".", "image", ".", "hsv_decomp", ":", "\n", "                ", "network_input", "=", "util", ".", "unsigned_to_signed", "(", "unsigned_hsv_images", ".", "to", "(", "self", ".", "conf", ".", "device", ")", ")", "\n", "", "else", ":", "\n", "                ", "if", "self", ".", "rgb_median_emb", ":", "# Should the color info of combined emb be in RGB?", "\n", "                    ", "rgb_median", "=", "hsv_to_rgb", "(", "\n", "torch", ".", "cat", "(", "[", "median_h", ".", "unsqueeze", "(", "1", ")", ",", "median_s", ".", "unsqueeze", "(", "1", ")", ",", "median_v", ".", "unsqueeze", "(", "1", ")", "]", ",", "\n", "dim", "=", "1", ")", ".", "unsqueeze", "(", "2", ")", ".", "unsqueeze", "(", "3", ")", ")", "\n", "additional_params", ".", "extend", "(", "\n", "[", "rgb_median", "[", ":", ",", "0", ",", "0", ",", "0", "]", ",", "rgb_median", "[", ":", ",", "1", ",", "0", ",", "0", "]", ",", "rgb_median", "[", ":", ",", "2", ",", "0", ",", "0", "]", "]", ")", "\n", "", "else", ":", "\n", "                    ", "additional_params", ".", "extend", "(", "[", "median_h", ",", "median_s", ",", "median_v", "]", ")", "\n", "", "network_input", "=", "image_gt_decomposed", "\n", "", "", "elif", "self", ".", "conf", ".", "image", ".", "rgb_decomp", ":", "\n", "# RGB_DECOMP: Keep network input in RGB. But separate median color.", "\n", "\n", "            ", "image_gt_decomposed", ",", "median_r", ",", "median_g", ",", "median_b", "=", "rgb_decompose_median", "(", "\n", "unsigned_images", ".", "to", "(", "self", ".", "conf", ".", "device", ")", ")", "\n", "additional_params", ".", "extend", "(", "[", "median_r", ",", "median_g", ",", "median_b", "]", ")", "\n", "base_color", "=", "Color", "(", "color_space", "=", "ColorSpace", ".", "RGB", ",", "components", "=", "[", "median_r", ",", "median_g", ",", "median_b", "]", ")", "\n", "network_input", "=", "image_gt_decomposed", "\n", "", "else", ":", "\n", "# Use RGB tensor as the network input", "\n", "            ", "base_color", "=", "None", "\n", "network_input", "=", "util", ".", "unsigned_to_signed", "(", "unsigned_images", ")", ".", "to", "(", "self", ".", "conf", ".", "device", ")", "\n", "", "return", "network_input", ",", "base_color", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_gen.predictor.TextureGenPredictor._compute_network_emb": [[190, 225], ["plan2scene.common.color_description.Color", "plan2scene.common.color_description.Color", "plan2scene.texture_gen.utils.hsv_utils.rgb_to_hsv", "plan2scene.texture_gen.utils.hsv_utils.rgb_to_hsv", "additional_params.extend", "additional_params.extend", "combined_emb[].unsqueeze().unsqueeze", "additional_params.extend", "plan2scene.common.color_description.Color", "plan2scene.common.color_description.Color", "combined_emb[].unsqueeze"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.hsv_utils.rgb_to_hsv", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.hsv_utils.rgb_to_hsv"], ["", "def", "_compute_network_emb", "(", "self", ",", "combined_emb", ":", "Tensor", ",", "additional_params", ":", "list", ")", "->", "tuple", ":", "\n", "        ", "\"\"\"\n        Compute network embedding given the combined embedding\n        :param combined_emb: Combined embedding including the network embedding and base color\n        :return: tuple (Network embedding, base_colour)\n        \"\"\"", "\n", "if", "self", ".", "conf", ".", "image", ".", "hsv_decomp", ":", "\n", "            ", "if", "self", ".", "rgb_median_emb", ":", "\n", "                ", "hsv_median", "=", "rgb_to_hsv", "(", "combined_emb", "[", ":", ",", "-", "3", ":", "]", ".", "unsqueeze", "(", "2", ")", ".", "unsqueeze", "(", "3", ")", ")", "\n", "median_h", "=", "hsv_median", "[", ":", ",", "0", ",", "0", ",", "0", "]", "\n", "median_s", "=", "hsv_median", "[", ":", ",", "1", ",", "0", ",", "0", "]", "\n", "median_v", "=", "hsv_median", "[", ":", ",", "2", ",", "0", ",", "0", "]", "\n", "additional_params", ".", "extend", "(", "[", "combined_emb", "[", ":", ",", "-", "3", "]", ",", "combined_emb", "[", ":", ",", "-", "2", "]", ",", "combined_emb", "[", ":", ",", "-", "1", "]", "]", ")", "\n", "", "else", ":", "\n", "                ", "median_h", "=", "combined_emb", "[", ":", ",", "-", "3", "]", "\n", "median_s", "=", "combined_emb", "[", ":", ",", "-", "2", "]", "\n", "median_v", "=", "combined_emb", "[", ":", ",", "-", "1", "]", "\n", "additional_params", ".", "extend", "(", "[", "median_h", ",", "median_s", ",", "median_v", "]", ")", "\n", "", "embedding", "=", "combined_emb", "[", ":", ",", ":", "-", "3", "]", "\n", "base_color", "=", "Color", "(", "color_space", "=", "ColorSpace", ".", "HSV", ",", "components", "=", "[", "median_h", ",", "median_s", ",", "median_v", "]", ")", "\n", "", "elif", "self", ".", "conf", ".", "image", ".", "hsv", ":", "\n", "            ", "embedding", "=", "combined_emb", "[", ":", ",", ":", "]", "\n", "base_color", "=", "None", "\n", "", "elif", "self", ".", "conf", ".", "image", ".", "rgb_decomp", ":", "\n", "            ", "median_r", "=", "combined_emb", "[", ":", ",", "-", "3", "]", "\n", "median_g", "=", "combined_emb", "[", ":", ",", "-", "2", "]", "\n", "median_b", "=", "combined_emb", "[", ":", ",", "-", "1", "]", "\n", "additional_params", ".", "extend", "(", "[", "median_r", ",", "median_g", ",", "median_b", "]", ")", "\n", "embedding", "=", "combined_emb", "[", ":", ",", ":", "-", "3", "]", "\n", "base_color", "=", "Color", "(", "color_space", "=", "ColorSpace", ".", "RGB", ",", "components", "=", "[", "median_r", ",", "median_g", ",", "median_b", "]", ")", "\n", "", "else", ":", "\n", "# RGB", "\n", "            ", "embedding", "=", "combined_emb", "[", ":", ",", ":", "]", "\n", "base_color", "=", "None", "\n", "", "return", "embedding", ",", "base_color", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_gen.predictor.TextureGenPredictor._compute_image_from_net_output": [[226, 250], ["plan2scene.texture_gen.utils.hsv_utils.hsv_to_rgb", "plan2scene.texture_gen.utils.hsv_utils.hsv_to_rgb", "plan2scene.unsigned_to_signed", "plan2scene.unsigned_to_signed", "plan2scene.signed_to_unsigned", "plan2scene.signed_to_unsigned", "plan2scene.texture_gen.utils.hsv_utils.hsv_recombine_median", "plan2scene.texture_gen.utils.hsv_utils.hsv_recombine_median", "plan2scene.texture_gen.utils.hsv_utils.rgb_recombine_median", "plan2scene.texture_gen.utils.hsv_utils.rgb_recombine_median", "plan2scene.unsigned_to_signed", "plan2scene.unsigned_to_signed"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.hsv_utils.hsv_to_rgb", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.hsv_utils.hsv_to_rgb", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.utils.unsigned_to_signed", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.utils.unsigned_to_signed", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.utils.signed_to_unsigned", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.utils.signed_to_unsigned", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.hsv_utils.hsv_recombine_median", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.hsv_utils.hsv_recombine_median", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.hsv_utils.rgb_recombine_median", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.hsv_utils.rgb_recombine_median", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.utils.unsigned_to_signed", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.utils.unsigned_to_signed"], ["", "def", "_compute_image_from_net_output", "(", "self", ",", "network_out", ":", "Tensor", ",", "base_color", ":", "Color", ")", "->", "Tensor", ":", "\n", "        ", "\"\"\"\n        Compute output image given the network output and the base colour\n        :param network_out: Output from the network\n        :param base_colour: Base colour\n        :return: Output image as a signed tensor\n        \"\"\"", "\n", "if", "self", ".", "conf", ".", "image", ".", "hsv_decomp", "or", "self", ".", "conf", ".", "image", ".", "hsv", ":", "\n", "            ", "assert", "base_color", ".", "color_space", "==", "ColorSpace", ".", "HSV", "\n", "median_h", ",", "median_s", ",", "median_v", "=", "base_color", ".", "components", "\n", "if", "self", ".", "conf", ".", "image", ".", "hsv", "and", "not", "self", ".", "conf", ".", "image", ".", "hsv_decomp", ":", "\n", "                ", "image_out", "=", "util", ".", "signed_to_unsigned", "(", "network_out", ")", "\n", "", "else", ":", "\n", "                ", "image_out", "=", "hsv_recombine_median", "(", "network_out", ",", "median_h", ",", "median_s", ",", "median_v", ")", "\n", "", "image_out", "=", "hsv_to_rgb", "(", "image_out", ")", "# Differentiable HSV to RGB layer", "\n", "image_out", "=", "util", ".", "unsigned_to_signed", "(", "image_out", ")", "\n", "", "elif", "self", ".", "conf", ".", "image", ".", "rgb_decomp", ":", "\n", "            ", "assert", "base_color", ".", "color_space", "==", "ColorSpace", ".", "RGB", "\n", "median_r", ",", "median_g", ",", "median_b", "=", "base_color", ".", "components", "\n", "image_out", "=", "rgb_recombine_median", "(", "network_out", ",", "median_r", ",", "median_g", ",", "median_b", ")", "\n", "image_out", "=", "util", ".", "unsigned_to_signed", "(", "image_out", ")", "\n", "", "else", ":", "\n", "            ", "image_out", "=", "network_out", "\n", "", "return", "image_out", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_gen.predictor.TextureGenPredictor.predict": [[251, 300], ["predictor.TextureGenPredictor._compute_image_from_net_output", "plan2scene.texture_gen.predictor_result.TextureGenPredictorResult", "plan2scene.texture_gen.predictor_result.TextureGenPredictorResult", "predictor.TextureGenPredictor.net.train", "predictor.TextureGenPredictor.net.eval", "predictor.TextureGenPredictor._compute_network_input", "predictor.TextureGenPredictor.net", "torch.cat.to", "predictor.TextureGenPredictor._compute_network_emb", "predictor.TextureGenPredictor.net", "len", "torch.cat", "torch.cat", "sample_pos.to", "sample_pos.to", "a.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_gen.predictor.TextureGenPredictor._compute_image_from_net_output", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.abstract_trainer.AbstractTrainer.train", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_gen.predictor.TextureGenPredictor._compute_network_input", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.abstract_trainer.AbstractTrainer.net", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_gen.predictor.TextureGenPredictor._compute_network_emb", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.abstract_trainer.AbstractTrainer.net", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len"], ["", "def", "predict", "(", "self", ",", "unsigned_images", ":", "Tensor", ",", "unsigned_hsv_images", ":", "Tensor", ",", "sample_pos", ":", "Tensor", ",", "train", ":", "bool", ",", "\n", "combined_emb", ":", "Tensor", "=", "None", ")", "->", "TextureGenPredictorResult", ":", "\n", "        ", "\"\"\"\n        Predict textures and embeddings given input crops.\n        :param unsigned_images: Input crops in unsigned RGB\n        :param unsigned_hsv_images: Input crops in unsigned HSV\n        :param sample_pos: Position tensor\n        :param train: Is train mode?\n        :param combined_emb: If provided, we skip the encoder and directly pass the embedding to the decoder.\n        :return: Predictor results\n        \"\"\"", "\n", "if", "train", ":", "\n", "            ", "self", ".", "net", ".", "train", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "net", ".", "eval", "(", ")", "\n", "\n", "# Additional params gets concatenated to the latent embedding given by the encoder", "\n", "", "additional_params", "=", "[", "]", "\n", "\n", "if", "combined_emb", "is", "None", ":", "\n", "# Predict using the image input. Use encoder.", "\n", "            ", "network_input", ",", "base_color", "=", "self", ".", "_compute_network_input", "(", "unsigned_images", ",", "unsigned_hsv_images", ",", "additional_params", ")", "\n", "network_out", ",", "network_emb", ",", "substance_out", "=", "self", ".", "net", "(", "network_input", ",", "sample_pos", ".", "to", "(", "self", ".", "conf", ".", "device", ")", ",", "\n", "self", ".", "seed", ")", "\n", "", "else", ":", "\n", "# Predict using the combined_emb. Skip encoder.", "\n", "            ", "network_input", "=", "None", "\n", "combined_emb", "=", "combined_emb", ".", "to", "(", "self", ".", "conf", ".", "device", ")", "\n", "network_emb", ",", "base_color", "=", "self", ".", "_compute_network_emb", "(", "combined_emb", ",", "additional_params", ")", "\n", "\n", "network_out", ",", "network_emb", ",", "substance_out", "=", "self", ".", "net", "(", "None", ",", "sample_pos", ".", "to", "(", "self", ".", "conf", ".", "device", ")", ",", "self", ".", "seed", ",", "\n", "weights_bottleneck", "=", "network_emb", ")", "\n", "\n", "# Compute network output", "\n", "", "image_out", "=", "self", ".", "_compute_image_from_net_output", "(", "network_out", ",", "base_color", ")", "\n", "\n", "extra", "=", "{", "\n", "\"network_input\"", ":", "network_input", ",", "\n", "\"network_output\"", ":", "network_out", ",", "\n", "\"network_emb\"", ":", "network_emb", ",", "\n", "\"base_color\"", ":", "base_color", "\n", "}", "\n", "\n", "# Compute combined_emb", "\n", "combined_emb", "=", "network_emb", "\n", "if", "len", "(", "additional_params", ")", ">", "0", ":", "\n", "            ", "additional_params_emb", "=", "torch", ".", "cat", "(", "[", "a", ".", "unsqueeze", "(", "1", ")", "for", "a", "in", "additional_params", "]", ",", "dim", "=", "1", ")", "\n", "combined_emb", "=", "torch", ".", "cat", "(", "[", "combined_emb", ",", "additional_params_emb", "]", ",", "dim", "=", "1", ")", "\n", "", "return", "TextureGenPredictorResult", "(", "image_out", "=", "image_out", ",", "combined_emb", "=", "combined_emb", ",", "substance_out", "=", "substance_out", ",", "extra", "=", "extra", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_gen.predictor.TextureGenPredictor.update_seed": [[301, 307], ["torch.rand"], "methods", ["None"], ["", "def", "update_seed", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Update seed used to synthesize textures\n        \"\"\"", "\n", "self", ".", "seed", "=", "torch", ".", "rand", "(", "(", "self", ".", "conf", ".", "train", ".", "bs", ",", "self", ".", "conf", ".", "noise", ".", "octaves", ",", "self", ".", "conf", ".", "texture", ".", "channels", ")", ",", "\n", "device", "=", "self", ".", "conf", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_gen.predictor.TextureGenPredictor.save_checkpoint": [[308, 325], ["torch.save", "os.exists", "os.exists", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "predictor.TextureGenPredictor.net.state_dict", "opt.state_dict", "os.dirname", "os.dirname", "os.dirname", "os.dirname"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.common.image_description.ImageDescription.save"], ["", "def", "save_checkpoint", "(", "self", ",", "opt", ":", "optim", ".", "Adam", ",", "epoch", ":", "int", ",", "stats", ":", "dict", ",", "save_path", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Save model checkpoint\n        :param opt: optimizer\n        :param epoch: epoch\n        :param stats: Stats dictionary\n        :param save_path: Save path\n        \"\"\"", "\n", "if", "not", "osp", ".", "exists", "(", "osp", ".", "dirname", "(", "save_path", ")", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "osp", ".", "dirname", "(", "save_path", ")", ")", "\n", "", "payload", "=", "{", "\n", "\"model_state_dict\"", ":", "self", ".", "net", ".", "state_dict", "(", ")", ",", "\n", "\"epoch\"", ":", "epoch", ",", "\n", "\"stats\"", ":", "stats", ",", "\n", "\"optimizer_state_dict\"", ":", "opt", ".", "state_dict", "(", ")", "\n", "}", "\n", "torch", ".", "save", "(", "payload", ",", "save_path", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_gen.predictor_result.TextureGenPredictorResult.__init__": [[9, 14], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "image_out", ":", "Tensor", ",", "combined_emb", ":", "Tensor", ",", "substance_out", ":", "Tensor", ",", "extra", ":", "dict", ")", ":", "\n", "        ", "self", ".", "_image_out", "=", "image_out", "\n", "self", ".", "_combined_emb", "=", "combined_emb", "\n", "self", ".", "_substance_out", "=", "substance_out", "\n", "self", ".", "_extra", "=", "extra", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_gen.predictor_result.TextureGenPredictorResult.image_out": [[15, 21], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "image_out", "(", "self", ")", "->", "Tensor", ":", "\n", "        ", "\"\"\"\n        Texture prediction\n        \"\"\"", "\n", "return", "self", ".", "_image_out", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_gen.predictor_result.TextureGenPredictorResult.combined_emb": [[22, 28], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "combined_emb", "(", "self", ")", "->", "Tensor", ":", "\n", "        ", "\"\"\"\n        Latent embedding from encoder\n        \"\"\"", "\n", "return", "self", ".", "_combined_emb", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_gen.predictor_result.TextureGenPredictorResult.substance_out": [[29, 35], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "substance_out", "(", "self", ")", "->", "Tensor", ":", "\n", "        ", "\"\"\"\n        Substance prediction\n        \"\"\"", "\n", "return", "self", ".", "_substance_out", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_gen.predictor_result.TextureGenPredictorResult.extra": [[36, 39], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "extra", "(", "self", ")", "->", "dict", ":", "\n", "        ", "return", "self", ".", "_extra", "\n", "", "", ""]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.custom_ops.noise.NoiseFunction.forward": [[13, 18], ["ctx.save_for_backward", "noise_cuda.forward"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.tp_models.simple_gated_gnn.SimpleGatedGNN.forward"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "position", ",", "seed", ")", ":", "\n", "        ", "ctx", ".", "save_for_backward", "(", "position", ",", "seed", ")", "\n", "noise", "=", "noise_cuda", ".", "forward", "(", "position", ",", "seed", ")", "\n", "return", "noise", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.custom_ops.noise.NoiseFunction.backward": [[19, 27], ["noise_cuda.backward", "torch.stack", "torch.zeros_like", "grad_noise.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.custom_ops.noise.NoiseFunction.backward"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_noise", ")", ":", "\n", "        ", "position", ",", "seed", "=", "ctx", ".", "saved_tensors", "\n", "d_position_bilinear", "=", "noise_cuda", ".", "backward", "(", "position", ",", "seed", ")", "\n", "\n", "d_position", "=", "torch", ".", "stack", "(", "[", "torch", ".", "zeros_like", "(", "d_position_bilinear", ")", ",", "d_position_bilinear", "]", ",", "dim", "=", "0", ")", "\n", "\n", "return", "grad_noise", ".", "unsqueeze", "(", "2", ")", "*", "d_position", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.custom_ops.noise.Noise.__init__": [[30, 32], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.models.ceiling.Ceiling.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Noise", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.custom_ops.noise.Noise.forward": [[33, 36], ["NoiseFunction.apply", "position.contiguous", "seed.contiguous"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "position", ",", "seed", ")", ":", "\n", "        ", "noise", "=", "NoiseFunction", ".", "apply", "(", "position", ".", "contiguous", "(", ")", ",", "seed", ".", "contiguous", "(", ")", ")", "\n", "return", "noise", "\n", "", "", ""]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.image_dataset.ImageDataset.__init__": [[18, 44], ["torchvision.transforms.Compose", "image_dataset.ImageDataset._get_samples", "plan2scene.texture_gen.custom_transforms.random_crop.RandomCropAndDropAlpha", "torchvision.transforms.Resize", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.RandomVerticalFlip"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.image_dataset.ImageDataset._get_samples"], ["def", "__init__", "(", "self", ",", "data_path", ":", "str", ",", "image_res", ":", "tuple", ",", "resample_count", ":", "int", ",", "scale_factor", ":", "float", ",", "substances", ":", "list", ")", ":", "\n", "        ", "\"\"\"\n        Initializes dataset.\n        :param data_path: Path to dataset image.\n        :param image_res: Size of output crops in the format (width, height)\n        :param resample_count: Number of times to re-sample an image.\n        :param scale_factor: Scale factor used to determine the random crop size.\n        :param substances: List of substance labels.\n        \"\"\"", "\n", "self", ".", "data_path", "=", "data_path", "\n", "self", ".", "image_res", "=", "image_res", "\n", "self", ".", "resample_count", "=", "resample_count", "\n", "self", ".", "scale_factor", "=", "scale_factor", "\n", "self", ".", "substances", "=", "substances", "\n", "\n", "transforms", "=", "[", "\n", "RandomCropAndDropAlpha", "(", "(", "self", ".", "image_res", "[", "0", "]", "*", "self", ".", "scale_factor", ",", "\n", "self", ".", "image_res", "[", "1", "]", "*", "self", ".", "scale_factor", ")", ",", "100000", ")", ",", "\n", "tfs", ".", "Resize", "(", "(", "self", ".", "image_res", "[", "0", "]", ",", "self", ".", "image_res", "[", "1", "]", ")", ")", ",", "\n", "tfs", ".", "RandomHorizontalFlip", "(", "p", "=", "0.5", ")", ",", "\n", "tfs", ".", "RandomVerticalFlip", "(", "p", "=", "0.5", ")", ",", "\n", "]", "\n", "\n", "self", ".", "transforms", "=", "tfs", ".", "Compose", "(", "transforms", ")", "\n", "\n", "self", ".", "samples", "=", "self", ".", "_get_samples", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.image_dataset.ImageDataset._get_samples": [[45, 63], ["os.listdir", "os.listdir", "os.listdir", "os.listdir", "samples.sort", "plan2scene.utils.io.load_image", "os.join", "os.join", "samples.append", "os.join", "os.join", "os.splitext", "os.splitext"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.io.load_image"], ["", "def", "_get_samples", "(", "self", ")", "->", "list", ":", "\n", "        ", "\"\"\"\n        Load dataset entries.\n        :return: list of dataset entries\n        \"\"\"", "\n", "samples", "=", "[", "]", "\n", "types", "=", "{", "'.jpeg'", ",", "'.jpg'", ",", "'.png'", "}", "\n", "\n", "files", "=", "os", ".", "listdir", "(", "self", ".", "data_path", ")", "\n", "files", "=", "[", "a", "for", "a", "in", "files", "if", "osp", ".", "splitext", "(", "a", ")", "[", "1", "]", "in", "types", "]", "\n", "for", "file", "in", "files", ":", "\n", "            ", "img", "=", "load_image", "(", "osp", ".", "join", "(", "self", ".", "data_path", ",", "file", ")", ")", "\n", "if", "img", ".", "width", ">", "self", ".", "image_res", "[", "0", "]", "*", "self", ".", "scale_factor", "and", "img", ".", "height", ">", "self", ".", "image_res", "[", "1", "]", "*", "self", ".", "scale_factor", ":", "\n", "                ", "samples", ".", "append", "(", "osp", ".", "join", "(", "self", ".", "data_path", ",", "file", ")", ")", "\n", "\n", "", "", "samples", ".", "sort", "(", ")", "\n", "samples", "=", "samples", "*", "self", ".", "resample_count", "\n", "return", "samples", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.image_dataset.ImageDataset.__len__": [[64, 66], ["len"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.image_dataset.ImageDataset.__getitem__": [[67, 89], ["PIL.Image.open", "image.convert.convert.load", "image_dataset.ImageDataset.transforms", "image_dataset.ImageDataset.substances.index", "image.convert.convert.convert", "torchvision.transforms.ToTensor", "plan2scene.texture_gen.custom_transforms.hsv_transforms.ToHSV", "torchvision.transforms.ToTensor", "[].split", "filepath.split"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.models.cad_model.CADModel.index"], ["", "def", "__getitem__", "(", "self", ",", "idx", ":", "int", ")", "->", "tuple", ":", "\n", "        ", "\"\"\"\n        Return dataset entry.\n        :param idx: Index\n        :return: tuple(RGB tensor, file path, substance label index, HSV tensor)\n        \"\"\"", "\n", "filepath", "=", "self", ".", "samples", "[", "idx", "]", "\n", "substance", "=", "-", "1", "\n", "if", "self", ".", "substances", "is", "not", "None", ":", "\n", "            ", "substance", "=", "filepath", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ".", "split", "(", "\"_\"", ")", "[", "0", "]", "\n", "substance", "=", "self", ".", "substances", ".", "index", "(", "substance", ")", "\n", "\n", "", "image", "=", "Image", ".", "open", "(", "filepath", ")", "\n", "image", ".", "load", "(", ")", "\n", "if", "image", ".", "mode", "not", "in", "[", "\"RGB\"", ",", "\"RGBA\"", "]", ":", "\n", "            ", "image", "=", "image", ".", "convert", "(", "\"RGB\"", ")", "\n", "\n", "", "image_transformed", "=", "self", ".", "transforms", "(", "image", ")", "\n", "image_tensor", "=", "tfs", ".", "ToTensor", "(", ")", "(", "image_transformed", ")", "\n", "image_hsv", "=", "ToHSV", "(", ")", "(", "image_transformed", ")", "\n", "image_hsv_tensor", "=", "tfs", ".", "ToTensor", "(", ")", "(", "image_hsv", ")", "\n", "return", "image_tensor", ",", "filepath", ",", "substance", ",", "image_hsv_tensor", "\n", "", "", ""]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.epoch_summary.TextureGenEpochSummary.__init__": [[9, 24], ["plan2scene.common.trainer.epoch_summary.EpochSummary.__init__", "isinstance", "isinstance", "isinstance"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.models.ceiling.Ceiling.__init__"], ["def", "__init__", "(", "self", ",", "epoch_style_loss", ":", "float", ",", "epoch_substance_loss", ":", "float", ",", "epoch_substance_passed", ":", "int", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Initializes TextureGenEpochSummary.\n        :param epoch_style_loss: VGG style loss for epoch\n        :param epoch_substance_loss:  Substance loss for epoch\n        :param epoch_substance_passed: Number of crops that were correctly classified.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "assert", "isinstance", "(", "epoch_style_loss", ",", "float", ")", "\n", "assert", "isinstance", "(", "epoch_substance_loss", ",", "float", ")", "\n", "assert", "isinstance", "(", "epoch_substance_passed", ",", "int", ")", "\n", "\n", "self", ".", "_epoch_style_loss", "=", "epoch_style_loss", "\n", "self", ".", "_epoch_substance_loss", "=", "epoch_substance_loss", "\n", "self", ".", "_epoch_substance_passed", "=", "epoch_substance_passed", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.epoch_summary.TextureGenEpochSummary.epoch_style_loss": [[33, 41], ["isinstance"], "methods", ["None"], ["", "@", "epoch_style_loss", ".", "setter", "\n", "def", "epoch_style_loss", "(", "self", ",", "value", ":", "float", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Set VGG style loss computed for an epoch.\n        :param value: VGG style loss computed for an epoch.\n        \"\"\"", "\n", "assert", "isinstance", "(", "value", ",", "float", ")", "\n", "self", ".", "_epoch_style_loss", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.epoch_summary.TextureGenEpochSummary.epoch_substance_loss": [[50, 58], ["isinstance"], "methods", ["None"], ["", "@", "epoch_substance_loss", ".", "setter", "\n", "def", "epoch_substance_loss", "(", "self", ",", "value", ":", "float", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Set substance classification loss\n        :param value: Substance classification loss\n        \"\"\"", "\n", "assert", "isinstance", "(", "value", ",", "float", ")", "\n", "self", ".", "_epoch_substance_loss", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.epoch_summary.TextureGenEpochSummary.epoch_substance_passed": [[67, 75], ["isinstance"], "methods", ["None"], ["", "@", "epoch_substance_passed", ".", "setter", "\n", "def", "epoch_substance_passed", "(", "self", ",", "value", ":", "int", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Set the count of entries that received correct substance prediction.\n        :param value: Count of entries that received correct substance prediction.\n        \"\"\"", "\n", "assert", "isinstance", "(", "value", ",", "int", ")", "\n", "self", ".", "_epoch_substance_passed", "=", "value", "\n", "", "", ""]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.train_util.get_loss": [[6, 17], ["torch.nn.MSELoss", "torch.nn.CrossEntropyLoss"], "function", ["None"], ["def", "get_loss", "(", "loss_params", ")", ":", "\n", "    ", "\"\"\"\n    Returns loss function.\n    :param loss_params: Configuration of loss function.\n    :return: Loss function\n    \"\"\"", "\n", "if", "loss_params", ".", "kind", "==", "\"mse\"", ":", "\n", "        ", "return", "nn", ".", "MSELoss", "(", ")", "\n", "", "elif", "loss_params", ".", "kind", "==", "\"cross_entropy\"", ":", "\n", "        ", "return", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "", "assert", "False", ",", "\"Unsupported loss\"", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.train_util.get_optim": [[19, 30], ["torch.optim.Adam"], "function", ["None"], ["", "def", "get_optim", "(", "optimizer_params", ",", "model_parameters", ")", ":", "\n", "    ", "\"\"\"\n    Returns optimizer.\n    :param optimizer_params: Parameters used to configure the optimizer.\n    :param model_parameters: Parameters of the network.\n    :return:\n    \"\"\"", "\n", "if", "optimizer_params", ".", "kind", "==", "\"adam\"", ":", "\n", "        ", "return", "optim", ".", "Adam", "(", "model_parameters", ",", "lr", "=", "optimizer_params", ".", "lr", ",", "\n", "weight_decay", "=", "optimizer_params", ".", "weight_decay", ")", "\n", "", "assert", "False", ",", "\"Unsupported optimizer\"", "\n", "", ""]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.texture_gen_trainer.TextureGenTrainer.__init__": [[29, 33], ["plan2scene.texture_gen.trainer.abstract_trainer.AbstractTrainer.__init__"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.models.ceiling.Ceiling.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "_style_criterion", "=", "None", "\n", "self", ".", "_substance_criterion", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.texture_gen_trainer.TextureGenTrainer._setup_datasets": [[34, 59], ["logging.info", "plan2scene.texture_gen.trainer.image_dataset.ImageDataset", "plan2scene.texture_gen.trainer.image_dataset.ImageDataset", "torch.utils.data.DataLoader", "logging.info", "plan2scene.texture_gen.trainer.image_dataset.ImageDataset", "plan2scene.texture_gen.trainer.image_dataset.ImageDataset", "torch.utils.data.DataLoader", "os.join", "os.join", "os.join", "os.join"], "methods", ["None"], ["", "def", "_setup_datasets", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Setup datasets and data loaders\n        \"\"\"", "\n", "logging", ".", "info", "(", "\"Train Data: %s\"", "%", "osp", ".", "join", "(", "self", ".", "train_params", ".", "dataset", ".", "path", ",", "\"train\"", ")", ")", "\n", "self", ".", "_train_dataset", "=", "ImageDataset", "(", "osp", ".", "join", "(", "self", ".", "train_params", ".", "dataset", ".", "path", ",", "\"train\"", ")", ",", "\n", "image_res", "=", "(", "\n", "self", ".", "train_params", ".", "image", ".", "image_res", ",", "self", ".", "train_params", ".", "image", ".", "image_res", ")", ",", "\n", "resample_count", "=", "self", ".", "train_params", ".", "train", ".", "resample_count", "*", "self", ".", "train_params", ".", "train", ".", "bs", ",", "\n", "scale_factor", "=", "self", ".", "train_params", ".", "image", ".", "scale_factor", ",", "\n", "substances", "=", "self", ".", "_predictor", ".", "substances", ")", "\n", "self", ".", "_train_dataloader", "=", "DataLoader", "(", "self", ".", "_train_dataset", ",", "batch_size", "=", "self", ".", "train_params", ".", "train", ".", "bs", ",", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "self", ".", "train_params", ".", "num_workers", ",", "\n", "drop_last", "=", "True", ")", "\n", "\n", "logging", ".", "info", "(", "\"Val Data: %s\"", "%", "osp", ".", "join", "(", "self", ".", "train_params", ".", "dataset", ".", "path", ",", "\"val\"", ")", ")", "\n", "self", ".", "_val_dataset", "=", "ImageDataset", "(", "osp", ".", "join", "(", "self", ".", "train_params", ".", "dataset", ".", "path", ",", "\"val\"", ")", ",", "\n", "image_res", "=", "(", "\n", "self", ".", "train_params", ".", "image", ".", "image_res", ",", "self", ".", "train_params", ".", "image", ".", "image_res", ")", ",", "\n", "resample_count", "=", "1", ",", "\n", "scale_factor", "=", "self", ".", "train_params", ".", "image", ".", "scale_factor", ",", "\n", "substances", "=", "self", ".", "_predictor", ".", "substances", ")", "\n", "self", ".", "_val_dataloader", "=", "DataLoader", "(", "self", ".", "_val_dataset", ",", "batch_size", "=", "self", ".", "train_params", ".", "train", ".", "bs", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "self", ".", "train_params", ".", "num_workers", ",", "\n", "drop_last", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.texture_gen_trainer.TextureGenTrainer._setup_predictor": [[60, 65], ["plan2scene.texture_gen.predictor.TextureGenPredictor", "plan2scene.texture_gen.predictor.TextureGenPredictor"], "methods", ["None"], ["", "def", "_setup_predictor", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Setup predictor\n        \"\"\"", "\n", "self", ".", "_predictor", "=", "TextureGenPredictor", "(", "conf", "=", "self", ".", "train_params", ",", "rgb_median_emb", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.texture_gen_trainer.TextureGenTrainer._setup_loss_function": [[66, 76], ["plan2scene.texture_gen.trainer.train_util.get_loss", "plan2scene.texture_gen.trainer.train_util.get_loss", "plan2scene.VGGFeatures().to", "plan2scene.VGGFeatures().to", "plan2scene.GramMatrix().to", "plan2scene.GramMatrix().to", "plan2scene.texture_gen.trainer.train_util.get_loss", "plan2scene.texture_gen.trainer.train_util.get_loss", "plan2scene.VGGFeatures", "plan2scene.VGGFeatures", "plan2scene.GramMatrix", "plan2scene.GramMatrix"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.train_util.get_loss", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.train_util.get_loss", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.train_util.get_loss", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.train_util.get_loss"], ["", "def", "_setup_loss_function", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Setup loss function\n        \"\"\"", "\n", "self", ".", "_style_criterion", "=", "train_util", ".", "get_loss", "(", "self", ".", "train_params", ".", "system", ".", "loss_params", ".", "style_loss", ")", "\n", "if", "self", ".", "predictor", ".", "substances", "is", "not", "None", ":", "\n", "            ", "self", ".", "_substance_criterion", "=", "train_util", ".", "get_loss", "(", "self", ".", "train_params", ".", "system", ".", "loss_params", ".", "substance_loss", ")", "\n", "\n", "", "self", ".", "_vgg_features", "=", "utils_nt", ".", "VGGFeatures", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "_gram_matrix", "=", "utils_nt", ".", "GramMatrix", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.texture_gen_trainer.TextureGenTrainer._setup_optimizer": [[77, 84], ["plan2scene.texture_gen.trainer.train_util.get_optim", "plan2scene.texture_gen.trainer.train_util.get_optim", "texture_gen_trainer.TextureGenTrainer.predictor.net.parameters"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.utils.get_optim", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.utils.get_optim"], ["", "def", "_setup_optimizer", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Setup optimizer\n        :return:\n        \"\"\"", "\n", "self", ".", "_optimizer", "=", "train_util", ".", "get_optim", "(", "self", ".", "train_params", ".", "system", ".", "optimizer_params", ",", "\n", "self", ".", "predictor", ".", "net", ".", "parameters", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.texture_gen_trainer.TextureGenTrainer._train_epoch": [[85, 173], ["plan2scene.texture_gen.trainer.epoch_summary.TextureGenEpochSummary", "plan2scene.texture_gen.trainer.epoch_summary.TextureGenEpochSummary", "config_parser.Config", "enumerate", "dict", "sub_targets.to.to.to", "plan2scene.unsigned_to_signed().to", "plan2scene.unsigned_to_signed().to", "texture_gen_trainer.TextureGenTrainer.optimizer.zero_grad", "texture_gen_trainer.TextureGenTrainer.predictor.update_seed", "texture_gen_trainer.TextureGenTrainer.predictor.get_position", "texture_gen_trainer.TextureGenTrainer.predictor.predict", "plan2scene.get_loss", "plan2scene.get_loss", "loss.backward", "texture_gen_trainer.TextureGenTrainer.optimizer.step", "loss.item", "plan2scene.get_loss.item", "loss.item", "plan2scene.get_loss.item", "substance_loss.item", "substance_loss.item", "substance_out.max", "substance_pass.item", "torch.no_grad", "logging.info", "plan2scene.unsigned_to_signed", "plan2scene.unsigned_to_signed", "texture_gen_trainer.TextureGenTrainer._substance_criterion", "plan2scene.texture_gen.utils.io.preview_images", "plan2scene.texture_gen.utils.io.preview_images", "texture_gen_trainer.TextureGenTrainer.summary_writer.add_image", "torch.cat", "plan2scene.signed_to_unsigned", "plan2scene.signed_to_unsigned", "plan2scene.signed_to_unsigned", "plan2scene.signed_to_unsigned"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_gen.predictor.TextureGenPredictor.update_seed", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_gen.predictor.TextureGenPredictor.get_position", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.predictor.TexturePropPredictor.predict", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.train_util.get_loss", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.train_util.get_loss", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.custom_ops.noise.NoiseFunction.backward", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.utils.unsigned_to_signed", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.utils.unsigned_to_signed", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.io.preview_images", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.io.preview_images", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.utils.signed_to_unsigned", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.utils.signed_to_unsigned", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.utils.signed_to_unsigned", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.utils.signed_to_unsigned"], ["", "def", "_train_epoch", "(", "self", ",", "epoch", ":", "int", ")", "->", "TextureGenEpochSummary", ":", "\n", "        ", "\"\"\"\n        Train an epoch\n        :param epoch: Epoch index\n        :return: Epoch train summary\n        \"\"\"", "\n", "# Metrics setup", "\n", "epoch_metrics", "=", "TextureGenEpochSummary", "(", "epoch_loss", "=", "0.0", ",", "\n", "epoch_style_loss", "=", "0.0", ",", "\n", "epoch_substance_loss", "=", "0.0", ",", "\n", "epoch_substance_passed", "=", "0", ",", "\n", "epoch_entry_count", "=", "0", ",", "\n", "epoch_batch_count", "=", "0", ")", "\n", "\n", "running_metrics", "=", "Config", "(", "dict", "(", "loss", "=", "0", ",", "substance_loss", "=", "0", ",", "style_loss", "=", "0", ")", ")", "\n", "\n", "# Iterate data", "\n", "for", "i", ",", "batch", "in", "enumerate", "(", "self", ".", "train_dataloader", ")", ":", "\n", "            ", "unsigned_images", ",", "filenames", ",", "sub_targets", ",", "unsigned_hsv_images", "=", "batch", "\n", "\n", "sub_targets", "=", "sub_targets", ".", "to", "(", "self", ".", "device", ")", "\n", "image_gt", "=", "util", ".", "unsigned_to_signed", "(", "unsigned_images", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "self", ".", "predictor", ".", "update_seed", "(", ")", "\n", "\n", "sample_pos", "=", "self", ".", "predictor", ".", "get_position", "(", ")", "\n", "\n", "predictor_result", "=", "self", ".", "predictor", ".", "predict", "(", "unsigned_images", "=", "unsigned_images", ",", "\n", "unsigned_hsv_images", "=", "unsigned_hsv_images", ",", "\n", "sample_pos", "=", "sample_pos", ",", "train", "=", "True", ")", "\n", "image_out", "=", "predictor_result", ".", "image_out", "\n", "substance_out", "=", "predictor_result", ".", "substance_out", "\n", "\n", "style_loss", "=", "utils_nt", ".", "get_loss", "(", "image_gt", ",", "image_out", ",", "self", ".", "train_params", ",", "self", ".", "_vgg_features", ",", "\n", "self", ".", "_gram_matrix", ",", "self", ".", "_style_criterion", ")", "\n", "\n", "substance_loss", "=", "None", "\n", "if", "self", ".", "predictor", ".", "substances", "is", "not", "None", ":", "\n", "                ", "substance_loss", "=", "self", ".", "_substance_criterion", "(", "substance_out", ",", "\n", "sub_targets", ")", "*", "self", ".", "train_params", ".", "system", ".", "loss_params", ".", "substance_weight", "\n", "loss", "=", "style_loss", "+", "substance_loss", "\n", "", "else", ":", "\n", "                ", "loss", "=", "style_loss", "\n", "\n", "", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "# Compute metrics", "\n", "running_metrics", ".", "loss", "+=", "loss", ".", "item", "(", ")", "\n", "running_metrics", ".", "style_loss", "+=", "style_loss", ".", "item", "(", ")", "\n", "\n", "epoch_metrics", ".", "epoch_loss", "+=", "loss", ".", "item", "(", ")", "\n", "epoch_metrics", ".", "epoch_style_loss", "+=", "style_loss", ".", "item", "(", ")", "\n", "\n", "# Compute substance metrics", "\n", "if", "self", ".", "predictor", ".", "substances", "is", "not", "None", ":", "\n", "                ", "running_metrics", ".", "substance_loss", "+=", "substance_loss", ".", "item", "(", ")", "\n", "epoch_metrics", ".", "epoch_substance_loss", "+=", "substance_loss", ".", "item", "(", ")", "\n", "\n", "_", ",", "substance_preds", "=", "substance_out", ".", "max", "(", "dim", "=", "1", ")", "\n", "substance_pass", "=", "(", "substance_preds", "==", "sub_targets", ")", ".", "sum", "(", "dim", "=", "0", ")", "\n", "\n", "epoch_metrics", ".", "epoch_substance_passed", "+=", "substance_pass", ".", "item", "(", ")", "\n", "\n", "", "epoch_metrics", ".", "epoch_entry_count", "+=", "image_out", ".", "shape", "[", "0", "]", "\n", "epoch_metrics", ".", "epoch_batch_count", "+=", "1", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# Save first batch of train images to compare with val", "\n", "                ", "if", "i", "==", "0", ":", "\n", "                    ", "preview_train_imgs", "=", "preview_images", "(", "\n", "torch", ".", "cat", "(", "[", "util", ".", "signed_to_unsigned", "(", "image_gt", ")", ",", "util", ".", "signed_to_unsigned", "(", "image_out", ")", "]", ",", "dim", "=", "0", ")", ",", "\n", "self", ".", "train_params", ".", "train", ".", "bs", ")", "\n", "self", ".", "summary_writer", ".", "add_image", "(", "\"epoch_train_batch%d_results\"", "%", "(", "i", "+", "1", ")", ",", "preview_train_imgs", ",", "\n", "global_step", "=", "epoch", ")", "\n", "\n", "# Print running loss", "\n", "", "", "if", "i", "%", "RUN_SIZE", "==", "RUN_SIZE", "-", "1", ":", "\n", "                ", "logging", ".", "info", "(", "\"[%d, %d] loss: %.5f\\t substance-loss: %.5f\\t texture-loss: %.5f\"", "%", "\n", "(", "epoch", ",", "i", "+", "1", ",", "running_metrics", ".", "loss", "/", "RUN_SIZE", ",", "running_metrics", ".", "substance_loss", "/", "RUN_SIZE", ",", "\n", "running_metrics", ".", "style_loss", "/", "RUN_SIZE", ")", ")", "\n", "\n", "running_metrics", ".", "loss", "=", "0", "\n", "running_metrics", ".", "style_loss", "=", "0", "\n", "running_metrics", ".", "substance_loss", "=", "0", "\n", "\n", "", "", "return", "epoch_metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.texture_gen_trainer.TextureGenTrainer._preview_base_color": [[174, 199], ["torch.ones_like", "isinstance", "base_color.components[].unsqueeze().unsqueeze().expand", "base_color.components[].unsqueeze().unsqueeze().expand", "base_color.components[].unsqueeze().unsqueeze().expand", "plan2scene.texture_gen.utils.hsv_utils.hsv_to_rgb", "plan2scene.texture_gen.utils.hsv_utils.hsv_to_rgb", "base_color.components[].unsqueeze().unsqueeze", "base_color.components[].unsqueeze().unsqueeze", "base_color.components[].unsqueeze().unsqueeze", "base_color.components[].unsqueeze", "base_color.components[].unsqueeze", "base_color.components[].unsqueeze"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.hsv_utils.hsv_to_rgb", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.hsv_utils.hsv_to_rgb"], ["", "def", "_preview_base_color", "(", "self", ",", "val_unsigned_images", ",", "extra", ")", ":", "\n", "        ", "\"\"\"\n        Create preview image for base color\n        :param val_unsigned_images: Synthesized textures\n        :param extra: Extra info\n        :return: Base color image as a array\n        \"\"\"", "\n", "base_color_val", "=", "torch", ".", "ones_like", "(", "val_unsigned_images", ")", "\n", "\n", "if", "extra", "[", "\"base_color\"", "]", "is", "not", "None", ":", "\n", "            ", "base_color", "=", "extra", "[", "\"base_color\"", "]", "\n", "assert", "isinstance", "(", "base_color", ",", "Color", ")", "\n", "base_color_val", "[", ":", ",", "0", ",", ":", ",", ":", "]", "=", "base_color", ".", "components", "[", "0", "]", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "\n", "2", ")", ".", "expand", "(", "\n", "[", "base_color_val", ".", "shape", "[", "0", "]", ",", "base_color_val", ".", "shape", "[", "2", "]", ",", "base_color_val", ".", "shape", "[", "3", "]", "]", ")", "\n", "base_color_val", "[", ":", ",", "1", ",", ":", ",", ":", "]", "=", "base_color", ".", "components", "[", "1", "]", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "\n", "2", ")", ".", "expand", "(", "\n", "[", "base_color_val", ".", "shape", "[", "0", "]", ",", "base_color_val", ".", "shape", "[", "2", "]", ",", "base_color_val", ".", "shape", "[", "3", "]", "]", ")", "\n", "base_color_val", "[", ":", ",", "2", ",", ":", ",", ":", "]", "=", "base_color", ".", "components", "[", "2", "]", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "\n", "2", ")", ".", "expand", "(", "\n", "[", "base_color_val", ".", "shape", "[", "0", "]", ",", "base_color_val", ".", "shape", "[", "2", "]", ",", "base_color_val", ".", "shape", "[", "3", "]", "]", ")", "\n", "if", "base_color", ".", "color_space", "==", "ColorSpace", ".", "HSV", ":", "\n", "                ", "base_color_val", "=", "hsv_to_rgb", "(", "base_color_val", ")", "\n", "\n", "", "", "return", "base_color_val", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.texture_gen_trainer.TextureGenTrainer._preview_substance_labels": [[200, 215], ["range", "PIL.ImageDraw.Draw", "PIL.ImageDraw.Draw.text", "plan2scene.unsigned_to_signed().to", "plan2scene.unsigned_to_signed().to", "torchvision.transforms.ToPILImage", "plan2scene.signed_to_unsigned().cpu", "plan2scene.signed_to_unsigned().cpu", "plan2scene.unsigned_to_signed", "plan2scene.unsigned_to_signed", "plan2scene.signed_to_unsigned", "plan2scene.signed_to_unsigned", "val_substance_preds[].item", "torchvision.transforms.ToTensor"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.utils.unsigned_to_signed", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.utils.unsigned_to_signed", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.utils.signed_to_unsigned", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.utils.signed_to_unsigned"], ["", "def", "_preview_substance_labels", "(", "self", ",", "val_substance_preds", ",", "image_gt_val_for_preview", ")", ":", "\n", "        ", "\"\"\"\n        Preview substance labels\n        :param val_substance_preds: Substance predictions\n        :param image_gt_val_for_preview: Ground truth preview image\n        :return:\n        \"\"\"", "\n", "for", "j", "in", "range", "(", "val_substance_preds", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "img", "=", "torchvision", ".", "transforms", ".", "ToPILImage", "(", ")", "(", "\n", "util", ".", "signed_to_unsigned", "(", "image_gt_val_for_preview", "[", "j", "]", ")", ".", "cpu", "(", ")", ")", "\n", "img_draw", "=", "ImageDraw", ".", "Draw", "(", "img", ")", "\n", "img_draw", ".", "text", "(", "(", "0", ",", "0", ")", ",", "self", ".", "predictor", ".", "substances", "[", "val_substance_preds", "[", "j", "]", ".", "item", "(", ")", "]", ",", "\n", "fill", "=", "(", "255", ",", "0", ",", "0", ")", ")", "\n", "image_gt_val_for_preview", "[", "j", "]", "=", "util", ".", "unsigned_to_signed", "(", "\n", "torchvision", ".", "transforms", ".", "ToTensor", "(", ")", "(", "img", ")", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.texture_gen_trainer.TextureGenTrainer._update_eval_metrics": [[216, 276], ["plan2scene.unsigned_to_signed().to", "plan2scene.unsigned_to_signed().to", "plan2scene.texture_gen.utils.io.preview_deltas", "plan2scene.texture_gen.utils.io.preview_deltas", "plan2scene.texture_gen.utils.io.preview_deltas", "plan2scene.texture_gen.utils.io.preview_deltas", "texture_gen_trainer.TextureGenTrainer._preview_base_color", "plan2scene.get_loss", "plan2scene.get_loss", "plan2scene.unsigned_to_signed().to.clone", "plan2scene.texture_gen.utils.io.preview_images", "plan2scene.texture_gen.utils.io.preview_images", "texture_gen_trainer.TextureGenTrainer.summary_writer.add_image", "val_loss.item", "plan2scene.get_loss.item", "val_substance_loss.item", "substance_out_val.max", "texture_gen_trainer.TextureGenTrainer._preview_substance_labels", "val_substance_pass.item", "torch.cat", "plan2scene.unsigned_to_signed", "plan2scene.unsigned_to_signed", "texture_gen_trainer.TextureGenTrainer._substance_criterion", "plan2scene.signed_to_unsigned().cpu", "plan2scene.signed_to_unsigned().cpu", "texture_gen_trainer.TextureGenTrainer.cpu", "delta_c1_input.cpu", "delta_c2_input.cpu", "delta_c3_input.cpu", "plan2scene.signed_to_unsigned().cpu", "plan2scene.signed_to_unsigned().cpu", "delta_c1_output.cpu", "delta_c2_output.cpu", "delta_c3_output.cpu", "plan2scene.signed_to_unsigned", "plan2scene.signed_to_unsigned", "plan2scene.signed_to_unsigned", "plan2scene.signed_to_unsigned"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.io.preview_deltas", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.io.preview_deltas", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.io.preview_deltas", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.io.preview_deltas", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.texture_gen_trainer.TextureGenTrainer._preview_base_color", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.train_util.get_loss", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.train_util.get_loss", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.io.preview_images", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.io.preview_images", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.texture_gen_trainer.TextureGenTrainer._preview_substance_labels", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.utils.unsigned_to_signed", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.utils.unsigned_to_signed", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.utils.signed_to_unsigned", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.utils.signed_to_unsigned", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.utils.signed_to_unsigned", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.utils.signed_to_unsigned"], ["", "", "def", "_update_eval_metrics", "(", "self", ",", "epoch", ":", "int", ",", "val_i", ":", "int", ",", "epoch_metrics", ":", "TextureGenEpochSummary", ",", "val_unsigned_images", ",", "\n", "val_sub_targets", ",", "image_out_val", ",", "substance_out_val", ",", "extra", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Report epoch evaluations considering a new batch\n        :param epoch: Epoch\n        :param val_i: Batch idx\n        :param epoch_metrics: Epoch metric readings that get updated\n        :param val_unsigned_images: Unsigned crops used to condition synthesis\n        :param val_sub_targets: Ground truth substance labels\n        :param image_out_val: Synthesized textures\n        :param substance_out_val: Predicted substances\n        :param extra: Extra info\n        \"\"\"", "\n", "image_gt_val", "=", "util", ".", "unsigned_to_signed", "(", "val_unsigned_images", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "# Preview deltas", "\n", "delta_c1_input", ",", "delta_c2_input", ",", "delta_c3_input", "=", "preview_deltas", "(", "extra", "[", "\"network_input\"", "]", ")", "\n", "delta_c1_output", ",", "delta_c2_output", ",", "delta_c3_output", "=", "preview_deltas", "(", "extra", "[", "\"network_output\"", "]", ")", "\n", "\n", "# Preview base color", "\n", "base_color_val", "=", "self", ".", "_preview_base_color", "(", "val_unsigned_images", ",", "extra", ")", "\n", "\n", "# Style loss", "\n", "val_style_loss", "=", "utils_nt", ".", "get_loss", "(", "image_gt_val", ",", "image_out_val", ",", "self", ".", "train_params", ",", "self", ".", "_vgg_features", ",", "\n", "self", ".", "_gram_matrix", ",", "self", ".", "_style_criterion", ")", "\n", "\n", "image_gt_val_for_preview", "=", "image_gt_val", ".", "clone", "(", ")", "\n", "# Evaluate and preview substance", "\n", "if", "self", ".", "predictor", ".", "substances", "is", "not", "None", ":", "\n", "            ", "val_substance_loss", "=", "self", ".", "_substance_criterion", "(", "substance_out_val", ",", "\n", "val_sub_targets", ")", "*", "self", ".", "train_params", ".", "system", ".", "loss_params", ".", "substance_weight", "\n", "val_loss", "=", "val_style_loss", "+", "val_substance_loss", "\n", "epoch_metrics", ".", "epoch_substance_loss", "+=", "val_substance_loss", ".", "item", "(", ")", "\n", "\n", "_", ",", "val_substance_preds", "=", "substance_out_val", ".", "max", "(", "dim", "=", "1", ")", "\n", "val_substance_pass", "=", "(", "val_substance_preds", "==", "val_sub_targets", ")", ".", "sum", "(", "dim", "=", "0", ")", "\n", "\n", "self", ".", "_preview_substance_labels", "(", "val_substance_preds", ",", "image_gt_val_for_preview", ")", "\n", "\n", "epoch_metrics", ".", "epoch_substance_passed", "+=", "val_substance_pass", ".", "item", "(", ")", "\n", "", "else", ":", "\n", "            ", "val_loss", "=", "val_style_loss", "\n", "\n", "", "epoch_metrics", ".", "epoch_entry_count", "+=", "image_out_val", ".", "shape", "[", "0", "]", "\n", "\n", "# Write all previews", "\n", "preview_val_imgs", "=", "preview_images", "(", "\n", "torch", ".", "cat", "(", "[", "util", ".", "signed_to_unsigned", "(", "image_gt_val_for_preview", ")", ".", "cpu", "(", ")", ",", "base_color_val", ".", "cpu", "(", ")", ",", "\n", "delta_c1_input", ".", "cpu", "(", ")", ",", "delta_c2_input", ".", "cpu", "(", ")", ",", "delta_c3_input", ".", "cpu", "(", ")", ",", "\n", "util", ".", "signed_to_unsigned", "(", "image_out_val", ")", ".", "cpu", "(", ")", ",", "\n", "delta_c1_output", ".", "cpu", "(", ")", ",", "delta_c2_output", ".", "cpu", "(", ")", ",", "delta_c3_output", ".", "cpu", "(", ")", "]", ",", "dim", "=", "0", ")", ",", "\n", "self", ".", "train_params", ".", "train", ".", "bs", ")", "\n", "\n", "self", ".", "summary_writer", ".", "add_image", "(", "\"epoch_val_batch%d_results\"", "%", "(", "val_i", "+", "1", ")", ",", "preview_val_imgs", ",", "\n", "global_step", "=", "epoch", ")", "\n", "\n", "# Update metrics", "\n", "epoch_metrics", ".", "epoch_loss", "+=", "val_loss", ".", "item", "(", ")", "\n", "epoch_metrics", ".", "epoch_style_loss", "+=", "val_style_loss", ".", "item", "(", ")", "\n", "epoch_metrics", ".", "epoch_batch_count", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.texture_gen_trainer.TextureGenTrainer._eval_epoch": [[277, 307], ["plan2scene.texture_gen.trainer.epoch_summary.TextureGenEpochSummary", "plan2scene.texture_gen.trainer.epoch_summary.TextureGenEpochSummary", "torch.no_grad", "enumerate", "val_sub_targets.to.to.to", "texture_gen_trainer.TextureGenTrainer.predictor.update_seed", "texture_gen_trainer.TextureGenTrainer.predictor.get_position", "texture_gen_trainer.TextureGenTrainer.predictor.predict", "texture_gen_trainer.TextureGenTrainer._update_eval_metrics"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_gen.predictor.TextureGenPredictor.update_seed", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_gen.predictor.TextureGenPredictor.get_position", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.predictor.TexturePropPredictor.predict", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.texture_gen_trainer.TextureGenTrainer._update_eval_metrics"], ["", "def", "_eval_epoch", "(", "self", ",", "epoch", ":", "int", ")", "->", "TextureGenEpochSummary", ":", "\n", "        ", "\"\"\"\n        Evaluate model after an epoch\n        :param epoch: Epoch id\n        :return: Eval summary\n        \"\"\"", "\n", "epoch_metrics", "=", "TextureGenEpochSummary", "(", "epoch_loss", "=", "0.0", ",", "epoch_style_loss", "=", "0.0", ",", "\n", "epoch_substance_loss", "=", "0.0", ",", "\n", "epoch_batch_count", "=", "0", ",", "epoch_entry_count", "=", "0", ",", "\n", "epoch_substance_passed", "=", "0", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "val_i", ",", "val_batch", "in", "enumerate", "(", "self", ".", "val_dataloader", ")", ":", "\n", "                ", "val_unsigned_images", ",", "val_filenames", ",", "val_sub_targets", ",", "val_unsigned_hsv_images", "=", "val_batch", "\n", "\n", "val_sub_targets", "=", "val_sub_targets", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "self", ".", "predictor", ".", "update_seed", "(", ")", "\n", "\n", "val_sample_pos", "=", "self", ".", "predictor", ".", "get_position", "(", ")", "\n", "\n", "predictor_result", "=", "self", ".", "predictor", ".", "predict", "(", "val_unsigned_images", ",", "\n", "val_unsigned_hsv_images", ",", "\n", "val_sample_pos", ",", "\n", "train", "=", "False", ")", "\n", "\n", "self", ".", "_update_eval_metrics", "(", "epoch", ",", "val_i", ",", "epoch_metrics", ",", "val_unsigned_images", ",", "\n", "val_sub_targets", ",", "predictor_result", ".", "image_out", ",", "predictor_result", ".", "substance_out", ",", "predictor_result", ".", "extra", ")", "\n", "\n", "", "", "return", "epoch_metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.texture_gen_trainer.TextureGenTrainer._get_checkpoint_metric_value": [[308, 310], ["None"], "methods", ["None"], ["", "def", "_get_checkpoint_metric_value", "(", "self", ",", "eval_stats", ":", "TextureGenEpochSummary", ")", "->", "float", ":", "\n", "        ", "return", "eval_stats", ".", "epoch_style_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.texture_gen_trainer.TextureGenTrainer._report": [[311, 369], ["texture_gen_trainer.TextureGenTrainer.summary_writer.add_scalar", "texture_gen_trainer.TextureGenTrainer.summary_writer.add_scalar", "texture_gen_trainer.TextureGenTrainer.summary_writer.add_scalar", "texture_gen_trainer.TextureGenTrainer.summary_writer.add_scalar", "texture_gen_trainer.TextureGenTrainer.summary_writer.add_scalar", "texture_gen_trainer.TextureGenTrainer.summary_writer.add_scalar", "texture_gen_trainer.TextureGenTrainer.summary_writer.add_scalar", "texture_gen_trainer.TextureGenTrainer.summary_writer.add_scalar", "logging.info", "logging.info", "float", "float", "float", "float"], "methods", ["None"], ["", "def", "_report", "(", "self", ",", "epoch", ":", "int", ",", "train_stats", ":", "TextureGenEpochSummary", ",", "val_stats", ":", "TextureGenEpochSummary", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Report epoch train/val stats.\n        :param epoch: Epoch index\n        :param train_stats: Train summary\n        :param val_stats: Val summary\n        \"\"\"", "\n", "self", ".", "summary_writer", ".", "add_scalar", "(", "\"epoch_training_loss\"", ",", "train_stats", ".", "epoch_loss", "/", "train_stats", ".", "epoch_batch_count", ",", "\n", "epoch", ")", "\n", "self", ".", "summary_writer", ".", "add_scalar", "(", "\"epoch_training_texture_loss\"", ",", "\n", "train_stats", ".", "epoch_style_loss", "/", "train_stats", ".", "epoch_batch_count", ",", "\n", "epoch", ")", "\n", "self", ".", "summary_writer", ".", "add_scalar", "(", "\"epoch_training_substance_loss\"", ",", "\n", "train_stats", ".", "epoch_substance_loss", "/", "train_stats", ".", "epoch_batch_count", ",", "epoch", ")", "\n", "\n", "if", "self", ".", "predictor", ".", "substances", "is", "not", "None", ":", "\n", "            ", "self", ".", "summary_writer", ".", "add_scalar", "(", "\"epoch_training_substance_acc\"", ",", "\n", "float", "(", "\n", "train_stats", ".", "epoch_substance_passed", ")", "/", "train_stats", ".", "epoch_entry_count", ",", "\n", "epoch", ")", "\n", "self", ".", "summary_writer", ".", "add_scalar", "(", "\"epoch_val_substance_acc\"", ",", "\n", "float", "(", "val_stats", ".", "epoch_substance_passed", ")", "/", "val_stats", ".", "epoch_entry_count", ",", "\n", "epoch", ")", "\n", "\n", "", "self", ".", "summary_writer", ".", "add_scalar", "(", "\"epoch_val_loss\"", ",", "val_stats", ".", "epoch_loss", "/", "val_stats", ".", "epoch_batch_count", ",", "\n", "epoch", ")", "\n", "self", ".", "summary_writer", ".", "add_scalar", "(", "\"epoch_val_texture_loss\"", ",", "\n", "val_stats", ".", "epoch_style_loss", "/", "val_stats", ".", "epoch_batch_count", ",", "epoch", ")", "\n", "self", ".", "summary_writer", ".", "add_scalar", "(", "\"epoch_val_substance_loss\"", ",", "\n", "val_stats", ".", "epoch_substance_loss", "/", "val_stats", ".", "epoch_batch_count", ",", "\n", "epoch", ")", "\n", "\n", "if", "self", ".", "predictor", ".", "substances", "is", "not", "None", ":", "\n", "            ", "logging", ".", "info", "(", "\n", "\"[Epoch %d] train-loss: %.5f\\t [sub: %.5f\\t tex: %.5f]\\t train-sub-acc: %.4f (%d/%d)\\t \"", "\n", "\"val-loss: %.5f\\t [sub: %.5f\\t tex: %.5f]\\t val-sub-ac: %.4f (%d/%d)\"", "%", "(", "\n", "epoch", ",", "\n", "train_stats", ".", "epoch_loss", "/", "train_stats", ".", "epoch_batch_count", ",", "\n", "train_stats", ".", "epoch_substance_loss", "/", "train_stats", ".", "epoch_batch_count", ",", "\n", "train_stats", ".", "epoch_style_loss", "/", "train_stats", ".", "epoch_batch_count", ",", "\n", "float", "(", "train_stats", ".", "epoch_substance_passed", ")", "/", "train_stats", ".", "epoch_entry_count", ",", "\n", "train_stats", ".", "epoch_substance_passed", ",", "\n", "train_stats", ".", "epoch_entry_count", ",", "\n", "val_stats", ".", "epoch_loss", "/", "val_stats", ".", "epoch_batch_count", ",", "\n", "val_stats", ".", "epoch_substance_loss", "/", "val_stats", ".", "epoch_batch_count", ",", "\n", "val_stats", ".", "epoch_style_loss", "/", "val_stats", ".", "epoch_batch_count", ",", "\n", "float", "(", "val_stats", ".", "epoch_substance_passed", ")", "/", "val_stats", ".", "epoch_entry_count", ",", "\n", "val_stats", ".", "epoch_substance_passed", ",", "\n", "val_stats", ".", "epoch_entry_count", ",", "\n", ")", ")", "\n", "", "else", ":", "\n", "            ", "logging", ".", "info", "(", "\n", "\"[Epoch %d] train-loss: %.5f\\t [tex: %.5f]\\t val-loss: %.5f\\t [tex: %.5f]\"", "%", "(", "\n", "epoch", ",", "\n", "train_stats", ".", "epoch_loss", "/", "train_stats", ".", "epoch_batch_count", ",", "\n", "train_stats", ".", "epoch_substance_loss", "/", "train_stats", ".", "epoch_batch_count", ",", "\n", "val_stats", ".", "epoch_loss", "/", "val_stats", ".", "epoch_batch_count", ",", "\n", "val_stats", ".", "epoch_style_loss", "/", "val_stats", ".", "epoch_batch_count", ",", "\n", ")", ")", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.texture_gen_trainer.TextureGenTrainer._save_checkpoint": [[371, 397], ["logging.info", "texture_gen_trainer.TextureGenTrainer.predictor.save_checkpoint", "logging.info", "texture_gen_trainer.TextureGenTrainer.predictor.save_checkpoint", "os.join", "os.join"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.substance_classifier.util.save_checkpoint", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.substance_classifier.util.save_checkpoint"], ["", "", "def", "_save_checkpoint", "(", "self", ",", "epoch", ":", "int", ",", "reason", ":", "SaveReason", ",", "train_stats", ",", "val_stats", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Saves a checkpoint\n        :param epoch: Epoch\n        :param reason: Save reason\n        :param train_stats: Train stats\n        :param val_stats: Val stats\n        \"\"\"", "\n", "if", "reason", "==", "SaveReason", ".", "BEST_MODEL", ":", "\n", "# Save best model", "\n", "            ", "logging", ".", "info", "(", "\"Best Style Loss\"", ")", "\n", "self", ".", "predictor", ".", "save_checkpoint", "(", "self", ".", "optimizer", ",", "epoch", ",", "self", ".", "epoch_stats", "[", "epoch", "]", ",", "\n", "save_path", "=", "osp", ".", "join", "(", "self", ".", "output_path", ",", "\"best_models\"", ",", "\n", "\"best-tex-val-loss-%.5f-epoch-%d.ckpt\"", "%", "(", "\n", "val_stats", ".", "epoch_style_loss", "/", "val_stats", ".", "epoch_batch_count", ",", "\n", "epoch", "+", "1", ")", ")", ")", "\n", "", "elif", "reason", "==", "SaveReason", ".", "INTERVAL", ":", "\n", "            ", "logging", ".", "info", "(", "\"Saving Checkpoint\"", ")", "\n", "self", ".", "predictor", ".", "save_checkpoint", "(", "self", ".", "optimizer", ",", "epoch", ",", "self", ".", "epoch_stats", "[", "epoch", "]", ",", "\n", "save_path", "=", "osp", ".", "join", "(", "self", ".", "output_path", ",", "\"checkpoints\"", ",", "\n", "\"loss-%.5f-epoch-%d.ckpt\"", "%", "(", "\n", "val_stats", ".", "epoch_style_loss", "/", "val_stats", ".", "epoch_batch_count", ",", "\n", "epoch", ")", ")", ")", "\n", "\n", "", "else", ":", "\n", "            ", "assert", "False", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.abstract_trainer.AbstractTrainer.__init__": [[17, 45], ["None"], "methods", ["None"], ["\n", "self", ".", "_train_params", "=", "train_params", "\n", "self", ".", "_output_path", "=", "output_path", "\n", "self", ".", "_save_model_interval", "=", "save_model_interval", "\n", "self", ".", "_summary_writer", "=", "summary_writer", "\n", "\n", "self", ".", "_predictor", "=", "None", "\n", "self", ".", "_train_dataset", "=", "None", "\n", "self", ".", "_train_dataloader", "=", "None", "\n", "self", ".", "_val_dataset", "=", "None", "\n", "self", ".", "_val_dataloader", "=", "None", "\n", "self", ".", "_optimizer", "=", "None", "\n", "self", ".", "_device", "=", "None", "\n", "self", ".", "_epoch_stats", "=", "{", "}", "\n", "self", ".", "_max_epoch", "=", "0", "\n", "\n", "self", ".", "_best_checkpoint_metric_value", "=", "None", "\n", "\n", "pass", "\n", "\n", "", "@", "abc", ".", "abstractmethod", "\n", "def", "_setup_predictor", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.abstract_trainer.AbstractTrainer._setup_predictor": [[42, 45], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "_setup_predictor", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.abstract_trainer.AbstractTrainer._setup_datasets": [[50, 53], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "epoch_stats", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_epoch_stats", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.abstract_trainer.AbstractTrainer.epoch_stats": [[125, 128], ["None"], "methods", ["None"], ["\n", "", "@", "abc", ".", "abstractmethod", "\n", "def", "_eval_epoch", "(", "self", ",", "epoch", ")", "->", "EpochSummary", ":", "\n", "        ", "pass", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.abstract_trainer.AbstractTrainer.setup": [[54, 82], ["abstract_trainer.AbstractTrainer.conf.setup_seed", "abstract_trainer.AbstractTrainer._setup_datasets", "logging.info", "logging.info", "abstract_trainer.AbstractTrainer._setup_network().to", "logging.info", "abstract_trainer.AbstractTrainer._setup_crit", "logging.info", "abstract_trainer.AbstractTrainer._setup_optim", "logging.info", "abstract_trainer.AbstractTrainer._setup_metrics", "logging.info", "abstract_trainer.AbstractTrainer._setup_extra", "str", "os.exists", "os.exists", "os.mkdir", "os.mkdir", "os.mkdir", "os.mkdir", "len", "len", "abstract_trainer.AbstractTrainer._setup_network", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.plan2scene.config_manager.ConfigManager.setup_seed", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.texture_prop_trainer.TexturePropTrainer._setup_datasets", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.texture_prop_trainer.TexturePropTrainer._setup_crit", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.texture_prop_trainer.TexturePropTrainer._setup_optim", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.abstract_trainer.AbstractTrainer._setup_metrics", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.abstract_trainer.AbstractTrainer._setup_extra", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.texture_prop_trainer.TexturePropTrainer._setup_network"], ["", "def", "setup", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Setup the trainer.\n        \"\"\"", "\n", "self", ".", "_device", "=", "self", ".", "train_params", ".", "device", "\n", "\n", "self", ".", "_setup_predictor", "(", ")", "\n", "logging", ".", "info", "(", "\"Predictor: %s\"", "%", "self", ".", "_predictor", ")", "\n", "self", ".", "_setup_datasets", "(", ")", "\n", "logging", ".", "info", "(", "\"Train Data: %d\"", "%", "(", "len", "(", "self", ".", "train_dataset", ")", ")", ")", "\n", "logging", ".", "info", "(", "\"Val Data: %d\"", "%", "(", "len", "(", "self", ".", "val_dataset", ")", ")", ")", "\n", "\n", "self", ".", "_setup_loss_function", "(", ")", "\n", "self", ".", "_setup_optimizer", "(", ")", "\n", "self", ".", "_max_epoch", "=", "self", ".", "train_params", ".", "train", ".", "epochs", "\n", "\n", "", "@", "property", "\n", "def", "device", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_device", "\n", "\n", "", "@", "property", "\n", "def", "max_epoch", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_max_epoch", "\n", "\n", "", "def", "train", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Start training\n        \"\"\"", "\n", "for", "epoch", "in", "range", "(", "1", ",", "self", ".", "max_epoch", "+", "1", ")", ":", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.abstract_trainer.AbstractTrainer.device": [[201, 208], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.abstract_trainer.AbstractTrainer.max_epoch": [[145, 148], ["None"], "methods", ["None"], ["\n", "", "@", "property", "\n", "def", "predictor", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_predictor", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.abstract_trainer.AbstractTrainer.train": [[83, 108], ["range", "abstract_trainer.AbstractTrainer.net.train", "abstract_trainer.AbstractTrainer._train_epoch", "abstract_trainer.AbstractTrainer.net.eval", "abstract_trainer.AbstractTrainer._eval_epoch", "abstract_trainer.AbstractTrainer._report", "abstract_trainer.AbstractTrainer._deep_eval_epoch", "abstract_trainer.AbstractTrainer._save_checkpoint"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.abstract_trainer.AbstractTrainer.train", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.texture_prop_trainer.TexturePropTrainer._train_epoch", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.texture_prop_trainer.TexturePropTrainer._eval_epoch", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.texture_prop_trainer.TexturePropTrainer._report", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.abstract_trainer.AbstractTrainer._deep_eval_epoch", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.texture_prop_trainer.TexturePropTrainer._save_checkpoint"], ["            ", "train_stats", "=", "self", ".", "_train_epoch", "(", "epoch", ")", "\n", "val_stats", "=", "self", ".", "_eval_epoch", "(", "epoch", ")", "\n", "\n", "self", ".", "epoch_stats", "[", "epoch", "]", "=", "{", "\n", "\"epoch\"", ":", "epoch", ",", "\n", "\"train_stats\"", ":", "train_stats", ",", "\n", "\"val_stats\"", ":", "val_stats", "\n", "}", "\n", "\n", "self", ".", "_report", "(", "epoch", ",", "train_stats", ",", "val_stats", ")", "\n", "\n", "checkpoint_metric_value", "=", "self", ".", "_get_checkpoint_metric_value", "(", "val_stats", ")", "\n", "if", "self", ".", "_best_checkpoint_metric_value", "is", "None", "or", "checkpoint_metric_value", "<", "self", ".", "_best_checkpoint_metric_value", ":", "\n", "                ", "self", ".", "_best_checkpoint_metric_value", "=", "checkpoint_metric_value", "\n", "self", ".", "_save_checkpoint", "(", "epoch", ",", "SaveReason", ".", "BEST_MODEL", ",", "train_stats", ",", "val_stats", ")", "\n", "\n", "", "if", "epoch", "%", "self", ".", "save_model_interval", "==", "0", ":", "\n", "                ", "self", ".", "_save_checkpoint", "(", "epoch", ",", "SaveReason", ".", "INTERVAL", ",", "train_stats", ",", "val_stats", ")", "\n", "\n", "", "", "", "@", "abc", ".", "abstractmethod", "\n", "def", "_get_checkpoint_metric_value", "(", "self", ",", "eval_stats", ":", "EpochSummary", ")", "->", "float", ":", "\n", "        "]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.abstract_trainer.AbstractTrainer._get_checkpoint_metric_value": [[102, 111], ["None"], "methods", ["None"], ["", "", "", "@", "abc", ".", "abstractmethod", "\n", "def", "_get_checkpoint_metric_value", "(", "self", ",", "eval_stats", ":", "EpochSummary", ")", "->", "float", ":", "\n", "        ", "\"\"\"\n        Returns the overall goodness value given the evaluation results on the validation set.\n        This value is used to identify the best checkpoints for the purpose of saving them.\n        :param eval_stats: Evaluation stats on the validation set for the current epoch.\n        :return: Overall goodness value considering eval_stats\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.abstract_trainer.AbstractTrainer._save_checkpoint": [[109, 112], ["None"], "methods", ["None"], ["\n", "pass", "\n", "\n", "", "@", "abc", ".", "abstractmethod", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.abstract_trainer.AbstractTrainer._report": [[117, 120], ["None"], "methods", ["None"], ["def", "_report", "(", "self", ",", "epoch", ":", "int", ",", "train_stats", ":", "EpochSummary", ",", "val_stats", ":", "EpochSummary", ")", "->", "None", ":", "\n", "        "]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.abstract_trainer.AbstractTrainer._eval_epoch": [[129, 132], ["None"], "methods", ["None"], ["\n", "", "@", "abc", ".", "abstractmethod", "\n", "def", "_train_epoch", "(", "self", ",", "epoch", ")", "->", "EpochSummary", ":", "\n", "        ", "pass", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.abstract_trainer.AbstractTrainer._train_epoch": [[133, 136], ["None"], "methods", ["None"], ["\n", "", "@", "abc", ".", "abstractmethod", "\n", "def", "_setup_optimizer", "(", "self", ")", ":", "\n", "        ", "pass", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.abstract_trainer.AbstractTrainer._setup_optimizer": [[134, 137], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "_setup_optimizer", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.abstract_trainer.AbstractTrainer._setup_loss_function": [[138, 141], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "_setup_loss_function", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.abstract_trainer.AbstractTrainer.optimizer": [[142, 145], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "optimizer", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.abstract_trainer.AbstractTrainer.predictor": [[146, 149], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "predictor", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_predictor", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.abstract_trainer.AbstractTrainer.train_dataset": [[173, 176], ["None"], "methods", ["None"], ["\n", "", "@", "property", "\n", "def", "save_model_interval", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_save_model_interval", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.abstract_trainer.AbstractTrainer.val_dataset": [[177, 180], ["None"], "methods", ["None"], ["\n", "", "@", "property", "\n", "def", "summary_writer", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_summary_writer", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.abstract_trainer.AbstractTrainer.train_dataloader": [[181, 184], ["None"], "methods", ["None"], ["", "", ""]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.abstract_trainer.AbstractTrainer.val_dataloader": [[185, 188], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.abstract_trainer.AbstractTrainer.train_params": [[166, 169], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "train_params", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_train_params", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.abstract_trainer.AbstractTrainer.output_path": [[197, 200], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.abstract_trainer.AbstractTrainer.save_model_interval": [[174, 177], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "save_model_interval", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_save_model_interval", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.abstract_trainer.AbstractTrainer.summary_writer": [[209, 212], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.epoch_summary.SubstanceClassifierEpochSummary.__init__": [[8, 27], ["plan2scene.common.trainer.epoch_summary.EpochSummary.__init__"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.models.ceiling.Ceiling.__init__"], ["\n", "def", "__init__", "(", "self", ",", "epoch_style_loss", ":", "float", ",", "epoch_substance_loss", ":", "float", ",", "epoch_substance_passed", ":", "int", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Initializes TextureGenEpochSummary.\n        :param epoch_style_loss: VGG style loss for epoch\n        :param epoch_substance_loss:  Substance loss for epoch\n        :param epoch_substance_passed: Number of crops that were correctly classified.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "assert", "isinstance", "(", "epoch_style_loss", ",", "float", ")", "\n", "assert", "isinstance", "(", "epoch_substance_loss", ",", "float", ")", "\n", "assert", "isinstance", "(", "epoch_substance_passed", ",", "int", ")", "\n", "\n", "self", ".", "_epoch_style_loss", "=", "epoch_style_loss", "\n", "self", ".", "_epoch_substance_loss", "=", "epoch_substance_loss", "\n", "self", ".", "_epoch_substance_passed", "=", "epoch_substance_passed", "\n", "\n", "", "@", "property", "\n", "def", "epoch_style_loss", "(", "self", ")", "->", "float", ":", "\n", "        "]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.epoch_summary.SubstanceClassifierEpochSummary.per_substance_correct_count_map": [[28, 35], ["None"], "methods", ["None"], ["\n", "return", "self", ".", "_epoch_style_loss", "\n", "\n", "", "@", "epoch_style_loss", ".", "setter", "\n", "def", "epoch_style_loss", "(", "self", ",", "value", ":", "float", ")", "->", "None", ":", "\n", "        "]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.epoch_summary.SubstanceClassifierEpochSummary.per_substance_count_map": [[36, 43], ["None"], "methods", ["None"], ["\n", "assert", "isinstance", "(", "value", ",", "float", ")", "\n", "self", ".", "_epoch_style_loss", "=", "value", "\n", "\n", "", "@", "property", "\n", "def", "epoch_substance_loss", "(", "self", ")", "->", "float", ":", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.epoch_summary.SubstanceClassifierEpochSummary.correct_predictions": [[44, 51], ["None"], "methods", ["None"], ["        ", "\"\"\"\n        Return substance classification loss.\n        :return: Substance classification loss\n        \"\"\"", "\n", "return", "self", ".", "_epoch_substance_loss", "\n", "\n", "", "@", "epoch_substance_loss", ".", "setter", "\n", "def", "epoch_substance_loss", "(", "self", ",", "value", ":", "float", ")", "->", "None", ":", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.epoch_summary.SubstanceClassifierEpochSummary.mistakes": [[52, 59], ["None"], "methods", ["None"], ["        ", "\"\"\"\n        Set substance classification loss\n        :param value: Substance classification loss\n        \"\"\"", "\n", "assert", "isinstance", "(", "value", ",", "float", ")", "\n", "self", ".", "_epoch_substance_loss", "=", "value", "\n", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.epoch_summary.SubstanceClassifierEpochSummary.passed_count": [[68, 75], ["isinstance"], "methods", ["None"], ["def", "epoch_substance_passed", "(", "self", ",", "value", ":", "int", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Set the count of entries that received correct substance prediction.\n        :param value: Count of entries that received correct substance prediction.\n        \"\"\"", "\n", "assert", "isinstance", "(", "value", ",", "int", ")", "\n", "self", ".", "_epoch_substance_passed", "=", "value", "\n", "", "", ""]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.substance_classifier_trainer.SubstanceClassifierTrainer.__init__": [[25, 38], ["plan2scene.evaluation.metric_impl.substance_classifier.trainer.abstract_trainer.AbstractTrainer.__init__"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.models.ceiling.Ceiling.__init__"], ["def", "__init__", "(", "self", ",", "conf", ":", "ConfigManager", ",", "system_conf", ":", "Config", ",", "output_path", ":", "str", ",", "summary_writer", ":", "SummaryWriter", ",", "save_model_interval", ":", "int", ",", "\n", "preview_results", ":", "bool", ")", ":", "\n", "        ", "\"\"\"\n        Initializes trainer.\n        :param conf: Config manager\n        :param system_conf: Configuration of the trained model.\n        :param output_path: Output path to save train outputs.\n        :param summary_writer: Summary writer used for logging.\n        :param save_model_interval: Frequency of saving checkpoints.\n        :param preview_results: Specify true to save previews of correct predictions and mistakes.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "conf", ",", "system_conf", ",", "output_path", "=", "output_path", ",", "summary_writer", "=", "summary_writer", ",", "save_model_interval", "=", "save_model_interval", ")", "\n", "self", ".", "should_preview_results", "=", "preview_results", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.substance_classifier_trainer.SubstanceClassifierTrainer._setup_network": [[39, 41], ["plan2scene.evaluation.metric_impl.substance_classifier.util.get_model"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.substance_classifier.util.get_model"], ["", "def", "_setup_network", "(", "self", ")", ":", "\n", "        ", "return", "get_model", "(", "self", ".", "system_conf", ".", "arch", ",", "self", ".", "system_conf", ".", "substances", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.substance_classifier_trainer.SubstanceClassifierTrainer._setup_crit": [[42, 44], ["plan2scene.evaluation.metric_impl.substance_classifier.util.get_crit"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.utils.get_crit"], ["", "def", "_setup_crit", "(", "self", ")", ":", "\n", "        ", "return", "get_crit", "(", "self", ".", "system_conf", ".", "train", ".", "crit", ",", "self", ".", "system_conf", ".", "train", ".", "weight_loss_classes", ",", "self", ".", "train_dataset", ",", "self", ".", "system_conf", ".", "substances", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.substance_classifier_trainer.SubstanceClassifierTrainer._setup_optim": [[45, 47], ["plan2scene.evaluation.metric_impl.substance_classifier.util.get_optim", "substance_classifier_trainer.SubstanceClassifierTrainer.net.parameters"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.utils.get_optim"], ["", "def", "_setup_optim", "(", "self", ")", ":", "\n", "        ", "return", "get_optim", "(", "self", ".", "system_conf", ".", "train", ".", "optim", ",", "lr", "=", "self", ".", "system_conf", ".", "train", ".", "lr", ",", "params", "=", "self", ".", "net", ".", "parameters", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.substance_classifier_trainer.SubstanceClassifierTrainer._preview_results": [[48, 78], ["os.join", "os.join", "os.exists", "os.exists", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "os.exists", "os.exists", "os.mkdir", "os.mkdir", "os.mkdir", "os.mkdir", "open", "f.write", "f.write", "enumerate", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.exists", "os.exists", "os.symlink", "os.symlink", "os.symlink", "os.symlink", "f.write", "os.join", "os.join", "os.remove", "os.remove", "os.remove", "os.remove", "os.abspath", "os.abspath", "os.join", "os.join", "float", "os.join", "os.join"], "methods", ["None"], ["", "def", "_preview_results", "(", "self", ",", "out_path", ",", "preview_entries", ",", "epoch", ",", "split", ",", "correct_count", ",", "total_count", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Save predictions to disk.\n        :param out_path: Path to save results.\n        :param preview_entries: Entries to save.\n        :param epoch: Epoch\n        :param split: train or val\n        :param correct_count: Correct predictions count.\n        :param total_count: Total predictions count.\n        \"\"\"", "\n", "for", "source", "in", "[", "\"textures\"", ",", "\"os\"", "]", ":", "\n", "            ", "output_path", "=", "osp", ".", "join", "(", "out_path", ",", "source", ")", "\n", "if", "not", "osp", ".", "exists", "(", "output_path", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "output_path", ")", "\n", "", "if", "not", "osp", ".", "exists", "(", "osp", ".", "join", "(", "output_path", ",", "\"crops\"", ")", ")", ":", "\n", "                ", "os", ".", "mkdir", "(", "osp", ".", "join", "(", "output_path", ",", "\"crops\"", ")", ")", "\n", "\n", "", "with", "open", "(", "osp", ".", "join", "(", "output_path", ",", "\"index.htm\"", ")", ",", "\"w\"", ")", "as", "f", ":", "\n", "                ", "f", ".", "write", "(", "\"<h1>%s: Epoch %d</h1>\"", "%", "(", "split", ",", "epoch", ")", ")", "\n", "f", ".", "write", "(", "\"<h2>Accuracy: %.5f [%d/%d]</h2>\"", "%", "(", "float", "(", "correct_count", ")", "/", "total_count", ",", "correct_count", ",", "total_count", ")", ")", "\n", "for", "i", ",", "mistake", "in", "enumerate", "(", "preview_entries", ")", ":", "\n", "                    ", "if", "mistake", "[", "\"source\"", "]", "==", "source", ":", "\n", "                        ", "file_path", "=", "mistake", "[", "\"file_path\"", "]", "\n", "if", "osp", ".", "exists", "(", "osp", ".", "join", "(", "output_path", ",", "\"crops\"", ",", "\"%d.png\"", "%", "i", ")", ")", ":", "\n", "                            ", "os", ".", "remove", "(", "osp", ".", "join", "(", "output_path", ",", "\"crops\"", ",", "\"%d.png\"", "%", "i", ")", ")", "\n", "", "os", ".", "symlink", "(", "osp", ".", "abspath", "(", "file_path", ")", ",", "osp", ".", "join", "(", "output_path", ",", "\"crops\"", ",", "\"%d.png\"", "%", "i", ")", ")", "\n", "pred", "=", "mistake", "[", "\"pred\"", "]", "\n", "truth", "=", "mistake", "[", "\"truth\"", "]", "\n", "f", ".", "write", "(", "\"<div style='float:left; margin:5px;'><img src='%s'/><br><small>%s</small><br><small>%s</small></div>\"", "%", "(", "\n", "\"crops/%d.png\"", "%", "(", "i", ")", ",", "\"pred_\"", "+", "pred", ",", "\"truth_\"", "+", "truth", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.substance_classifier_trainer.SubstanceClassifierTrainer._setup_dataset": [[79, 94], ["plan2scene.evaluation.metric_impl.substance_classifier.dataset.SubstanceCropDataset", "torch.utils.data.DataLoader", "plan2scene.evaluation.metric_impl.substance_classifier.dataset.SubstanceCropDataset", "torch.utils.data.DataLoader", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join"], "methods", ["None"], ["", "", "", "", "", "def", "_setup_dataset", "(", "self", ")", ":", "\n", "        ", "self", ".", "_train_dataset", "=", "SubstanceCropDataset", "(", "os_dataset_path", "=", "osp", ".", "join", "(", "self", ".", "system_conf", ".", "datasets", ".", "os", ",", "\"train\"", ")", ",", "\n", "texture_dataset_path", "=", "osp", ".", "join", "(", "self", ".", "system_conf", ".", "datasets", ".", "textures", ",", "\"train\"", ")", ",", "\n", "label_mapping", "=", "self", ".", "system_conf", ".", "datasets", ".", "label_mapping", ".", "__dict__", ",", "\n", "substances", "=", "self", ".", "system_conf", ".", "substances", ",", "\n", "train", "=", "True", ")", "\n", "self", ".", "_train_dataloader", "=", "DataLoader", "(", "self", ".", "train_dataset", ",", "batch_size", "=", "self", ".", "system_conf", ".", "train", ".", "bs", ",", "shuffle", "=", "self", ".", "system_conf", ".", "train", ".", "shuffle", ",", "\n", "drop_last", "=", "self", ".", "system_conf", ".", "train", ".", "drop_last", ")", "\n", "\n", "self", ".", "_val_dataset", "=", "SubstanceCropDataset", "(", "os_dataset_path", "=", "osp", ".", "join", "(", "self", ".", "system_conf", ".", "datasets", ".", "os", ",", "\"val\"", ")", ",", "\n", "texture_dataset_path", "=", "osp", ".", "join", "(", "self", ".", "system_conf", ".", "datasets", ".", "textures", ",", "\"val\"", ")", ",", "\n", "label_mapping", "=", "self", ".", "system_conf", ".", "datasets", ".", "label_mapping", ".", "__dict__", ",", "substances", "=", "self", ".", "system_conf", ".", "substances", ",", "\n", "train", "=", "False", ")", "\n", "self", ".", "_val_dataloader", "=", "DataLoader", "(", "self", ".", "val_dataset", ",", "batch_size", "=", "self", ".", "system_conf", ".", "train", ".", "val", ".", "bs", ",", "shuffle", "=", "self", ".", "system_conf", ".", "train", ".", "val", ".", "shuffle", ",", "\n", "drop_last", "=", "self", ".", "system_conf", ".", "train", ".", "val", ".", "drop_last", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.substance_classifier_trainer.SubstanceClassifierTrainer._train_epoch": [[95, 171], ["plan2scene.evaluation.metric_impl.substance_classifier.trainer.epoch_summary.SubstanceClassifierEpochSummary", "enumerate", "input_tensor.to.to.to", "target.to.to.to", "substance_classifier_trainer.SubstanceClassifierTrainer.optim.zero_grad", "substance_classifier_trainer.SubstanceClassifierTrainer.net", "substance_classifier_trainer.SubstanceClassifierTrainer.crit", "substance_classifier_trainer.SubstanceClassifierTrainer.backward", "substance_classifier_trainer.SubstanceClassifierTrainer.optim.step", "substance_classifier_trainer.SubstanceClassifierTrainer.item", "torch.max", "torch.sum().item", "enumerate", "enumerate", "logging.info", "substance_classifier_trainer.SubstanceClassifierTrainer.item", "torch.sum", "plan2scene.evaluation.metric_impl.substance_classifier.trainer.epoch_summary.SubstanceClassifierEpochSummary.correct_predictions.append", "plan2scene.evaluation.metric_impl.substance_classifier.trainer.epoch_summary.SubstanceClassifierEpochSummary.mistakes.append"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.abstract_trainer.AbstractTrainer.net", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.abstract_trainer.AbstractTrainer.crit", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.custom_ops.noise.NoiseFunction.backward"], ["", "def", "_train_epoch", "(", "self", ",", "epoch", ":", "int", ")", "->", "SubstanceClassifierEpochSummary", ":", "\n", "        ", "\"\"\"\n        Train for an epoch.\n        :param epoch: Epoch number\n        :return: Epoch summary.\n        \"\"\"", "\n", "substances", "=", "self", ".", "system_conf", ".", "substances", "\n", "epoch_metrics", "=", "SubstanceClassifierEpochSummary", "(", "epoch_loss", "=", "0.0", ",", "\n", "passed_count", "=", "0", ",", "\n", "epoch_entry_count", "=", "0", ",", "\n", "epoch_batch_count", "=", "0", ",", "\n", "mistakes", "=", "[", "]", ",", "correct_predictions", "=", "[", "]", ",", "\n", "per_substance_count_map", "=", "{", "k", ":", "0", "for", "k", "in", "(", "substances", ")", "}", ",", "\n", "per_substance_correct_count_map", "=", "{", "k", ":", "0", "for", "k", "in", "(", "substances", ")", "}", ")", "\n", "running_loss", "=", "0", "\n", "\n", "for", "batch_id", ",", "(", "input_tensor", ",", "target", ",", "meta", ")", "in", "enumerate", "(", "self", ".", "train_dataloader", ")", ":", "\n", "            ", "input_tensor", "=", "input_tensor", ".", "to", "(", "self", ".", "device", ")", "\n", "target", "=", "target", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "self", ".", "optim", ".", "zero_grad", "(", ")", "\n", "outputs", "=", "self", ".", "net", "(", "input_tensor", ")", "\n", "loss", "=", "self", ".", "crit", "(", "outputs", ",", "target", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optim", ".", "step", "(", ")", "\n", "\n", "running_loss", "+=", "loss", ".", "item", "(", ")", "\n", "epoch_metrics", ".", "epoch_loss", "+=", "loss", ".", "item", "(", ")", "*", "self", ".", "system_conf", ".", "train", ".", "bs", "/", "input_tensor", ".", "shape", "[", "0", "]", "\n", "epoch_metrics", ".", "epoch_batch_count", "+=", "1", "\n", "\n", "_", ",", "preds", "=", "torch", ".", "max", "(", "outputs", ",", "dim", "=", "1", ")", "\n", "matched", "=", "preds", "==", "target", "\n", "\n", "epoch_metrics", ".", "passed_count", "+=", "torch", ".", "sum", "(", "matched", ",", "dim", "=", "0", ")", ".", "item", "(", ")", "\n", "epoch_metrics", ".", "epoch_entry_count", "+=", "input_tensor", ".", "shape", "[", "0", "]", "\n", "\n", "if", "batch_id", "%", "RUN_SIZE", "==", "RUN_SIZE", "-", "1", ":", "\n", "                ", "logging", ".", "info", "(", "\"[%d, %d] Loss: %.5f\"", "%", "(", "epoch", ",", "batch_id", "+", "1", ",", "running_loss", "/", "RUN_SIZE", ")", ")", "\n", "running_loss", "=", "0", "\n", "\n", "", "for", "i", ",", "substance", "in", "enumerate", "(", "meta", "[", "\"substance\"", "]", ")", ":", "\n", "                ", "epoch_metrics", ".", "per_substance_count_map", "[", "substance", "]", "+=", "1", "\n", "if", "matched", "[", "i", "]", ":", "\n", "                    ", "epoch_metrics", ".", "per_substance_correct_count_map", "[", "substance", "]", "+=", "1", "\n", "epoch_metrics", ".", "correct_predictions", ".", "append", "(", "{", "\n", "\"file_path\"", ":", "meta", "[", "\"file_path\"", "]", "[", "i", "]", ",", "\n", "\"pred\"", ":", "substances", "[", "preds", "[", "i", "]", "]", ",", "\n", "\"truth\"", ":", "meta", "[", "\"substance\"", "]", "[", "i", "]", ",", "\n", "\"source\"", ":", "meta", "[", "\"source\"", "]", "[", "i", "]", "\n", "}", ")", "\n", "", "else", ":", "\n", "                    ", "epoch_metrics", ".", "mistakes", ".", "append", "(", "{", "\n", "\"file_path\"", ":", "meta", "[", "\"file_path\"", "]", "[", "i", "]", ",", "\n", "\"pred\"", ":", "substances", "[", "preds", "[", "i", "]", "]", ",", "\n", "\"truth\"", ":", "meta", "[", "\"substance\"", "]", "[", "i", "]", ",", "\n", "\"source\"", ":", "meta", "[", "\"source\"", "]", "[", "i", "]", "\n", "}", ")", "\n", "\n", "", "", "for", "i", ",", "source", "in", "enumerate", "(", "meta", "[", "\"source\"", "]", ")", ":", "\n", "# Record correct predictions and predictions per source (opensurfaces vs. textures dataset).", "\n", "                ", "if", "source", "not", "in", "epoch_metrics", ".", "per_substance_count_map", ":", "\n", "                    ", "epoch_metrics", ".", "per_substance_count_map", "[", "source", "]", "=", "0", "\n", "epoch_metrics", ".", "per_substance_correct_count_map", "[", "source", "]", "=", "0", "\n", "\n", "", "substance", "=", "meta", "[", "\"substance\"", "]", "[", "i", "]", "\n", "if", "source", "+", "\"_\"", "+", "substance", "not", "in", "epoch_metrics", ".", "per_substance_count_map", ":", "\n", "                    ", "epoch_metrics", ".", "per_substance_count_map", "[", "source", "+", "\"_\"", "+", "substance", "]", "=", "0", "\n", "epoch_metrics", ".", "per_substance_correct_count_map", "[", "source", "+", "\"_\"", "+", "substance", "]", "=", "0", "\n", "\n", "", "epoch_metrics", ".", "per_substance_count_map", "[", "source", "]", "+=", "1", "\n", "epoch_metrics", ".", "per_substance_count_map", "[", "source", "+", "\"_\"", "+", "substance", "]", "+=", "1", "\n", "\n", "if", "matched", "[", "i", "]", ":", "\n", "                    ", "epoch_metrics", ".", "per_substance_correct_count_map", "[", "source", "]", "+=", "1", "\n", "epoch_metrics", ".", "per_substance_correct_count_map", "[", "source", "+", "\"_\"", "+", "substance", "]", "+=", "1", "\n", "", "", "", "return", "epoch_metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.substance_classifier_trainer.SubstanceClassifierTrainer._eval_epoch": [[172, 240], ["plan2scene.evaluation.metric_impl.substance_classifier.trainer.epoch_summary.SubstanceClassifierEpochSummary", "torch.no_grad", "enumerate", "input_tensor.to.to.to", "target.to.to.to", "substance_classifier_trainer.SubstanceClassifierTrainer.net", "torch.max", "torch.sum().item", "enumerate", "enumerate", "substance_classifier_trainer.SubstanceClassifierTrainer.crit().item", "torch.sum", "plan2scene.evaluation.metric_impl.substance_classifier.trainer.epoch_summary.SubstanceClassifierEpochSummary.correct_predictions.append", "plan2scene.evaluation.metric_impl.substance_classifier.trainer.epoch_summary.SubstanceClassifierEpochSummary.mistakes.append", "substance_classifier_trainer.SubstanceClassifierTrainer.crit"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.abstract_trainer.AbstractTrainer.net", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.abstract_trainer.AbstractTrainer.crit"], ["", "def", "_eval_epoch", "(", "self", ",", "epoch", ":", "int", ")", "->", "SubstanceClassifierEpochSummary", ":", "\n", "        ", "\"\"\"\n        Evaluate the model on validation set.\n        :param epoch: Epoch.\n        :return: Eval epoch summary.\n        \"\"\"", "\n", "substances", "=", "self", ".", "system_conf", ".", "substances", "\n", "\n", "epoch_metrics", "=", "SubstanceClassifierEpochSummary", "(", "epoch_loss", "=", "0.0", ",", "\n", "passed_count", "=", "0", ",", "\n", "epoch_entry_count", "=", "0", ",", "\n", "epoch_batch_count", "=", "0", ",", "\n", "mistakes", "=", "[", "]", ",", "correct_predictions", "=", "[", "]", ",", "\n", "per_substance_count_map", "=", "{", "k", ":", "0", "for", "k", "in", "(", "substances", ")", "}", ",", "\n", "per_substance_correct_count_map", "=", "{", "k", ":", "0", "for", "k", "in", "(", "substances", ")", "}", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "batch_id", ",", "(", "input_tensor", ",", "target", ",", "meta", ")", "in", "enumerate", "(", "self", ".", "val_dataloader", ")", ":", "\n", "                ", "input_tensor", "=", "input_tensor", ".", "to", "(", "self", ".", "device", ")", "\n", "target", "=", "target", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "outputs", "=", "self", ".", "net", "(", "input_tensor", ")", "\n", "_", ",", "preds", "=", "torch", ".", "max", "(", "outputs", ",", "dim", "=", "1", ")", "\n", "matched", "=", "preds", "==", "target", "\n", "\n", "val_loss", "=", "self", ".", "crit", "(", "outputs", ",", "target", ")", ".", "item", "(", ")", "/", "input_tensor", ".", "shape", "[", "0", "]", "*", "self", ".", "system_conf", ".", "train", ".", "val", ".", "bs", "\n", "epoch_metrics", ".", "epoch_loss", "+=", "val_loss", "\n", "epoch_metrics", ".", "epoch_batch_count", "+=", "1", "\n", "\n", "epoch_metrics", ".", "passed_count", "+=", "torch", ".", "sum", "(", "matched", ",", "dim", "=", "0", ")", ".", "item", "(", ")", "\n", "epoch_metrics", ".", "epoch_entry_count", "+=", "input_tensor", ".", "shape", "[", "0", "]", "\n", "\n", "for", "i", ",", "substance", "in", "enumerate", "(", "meta", "[", "\"substance\"", "]", ")", ":", "\n", "                    ", "epoch_metrics", ".", "per_substance_count_map", "[", "substance", "]", "+=", "1", "\n", "if", "matched", "[", "i", "]", ":", "\n", "                        ", "epoch_metrics", ".", "per_substance_correct_count_map", "[", "substance", "]", "+=", "1", "\n", "epoch_metrics", ".", "correct_predictions", ".", "append", "(", "{", "\n", "\"file_path\"", ":", "meta", "[", "\"file_path\"", "]", "[", "i", "]", ",", "\n", "\"pred\"", ":", "substances", "[", "preds", "[", "i", "]", "]", ",", "\n", "\"truth\"", ":", "meta", "[", "\"substance\"", "]", "[", "i", "]", ",", "\n", "\"source\"", ":", "meta", "[", "\"source\"", "]", "[", "i", "]", "\n", "}", ")", "\n", "", "else", ":", "\n", "                        ", "epoch_metrics", ".", "mistakes", ".", "append", "(", "{", "\n", "\"file_path\"", ":", "meta", "[", "\"file_path\"", "]", "[", "i", "]", ",", "\n", "\"pred\"", ":", "substances", "[", "preds", "[", "i", "]", "]", ",", "\n", "\"truth\"", ":", "meta", "[", "\"substance\"", "]", "[", "i", "]", ",", "\n", "\"source\"", ":", "meta", "[", "\"source\"", "]", "[", "i", "]", "\n", "}", ")", "\n", "\n", "", "", "for", "i", ",", "source", "in", "enumerate", "(", "meta", "[", "\"source\"", "]", ")", ":", "\n", "                    ", "if", "source", "not", "in", "epoch_metrics", ".", "per_substance_count_map", ":", "\n", "                        ", "epoch_metrics", ".", "per_substance_count_map", "[", "source", "]", "=", "0", "\n", "epoch_metrics", ".", "per_substance_correct_count_map", "[", "source", "]", "=", "0", "\n", "\n", "", "substance", "=", "meta", "[", "\"substance\"", "]", "[", "i", "]", "\n", "if", "source", "+", "\"_\"", "+", "substance", "not", "in", "epoch_metrics", ".", "per_substance_count_map", ":", "\n", "                        ", "epoch_metrics", ".", "per_substance_count_map", "[", "source", "+", "\"_\"", "+", "substance", "]", "=", "0", "\n", "epoch_metrics", ".", "per_substance_correct_count_map", "[", "source", "+", "\"_\"", "+", "substance", "]", "=", "0", "\n", "\n", "", "epoch_metrics", ".", "per_substance_count_map", "[", "source", "+", "\"_\"", "+", "substance", "]", "+=", "1", "\n", "epoch_metrics", ".", "per_substance_count_map", "[", "source", "]", "+=", "1", "\n", "\n", "if", "matched", "[", "i", "]", ":", "\n", "                        ", "epoch_metrics", ".", "per_substance_correct_count_map", "[", "source", "]", "+=", "1", "\n", "epoch_metrics", ".", "per_substance_correct_count_map", "[", "source", "+", "\"_\"", "+", "substance", "]", "+=", "1", "\n", "\n", "", "", "", "", "return", "epoch_metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.substance_classifier_trainer.SubstanceClassifierTrainer._report": [[241, 271], ["logging.info", "substance_classifier_trainer.SubstanceClassifierTrainer.summary_writer.add_scalar", "substance_classifier_trainer.SubstanceClassifierTrainer.summary_writer.add_scalar", "substance_classifier_trainer.SubstanceClassifierTrainer.summary_writer.add_scalar", "substance_classifier_trainer.SubstanceClassifierTrainer.summary_writer.add_scalar", "substance_classifier_trainer.SubstanceClassifierTrainer._preview_results", "substance_classifier_trainer.SubstanceClassifierTrainer._preview_results", "float", "float", "os.join", "os.join", "os.join", "os.join", "float", "float"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.substance_classifier_trainer.SubstanceClassifierTrainer._preview_results", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.substance_classifier_trainer.SubstanceClassifierTrainer._preview_results"], ["", "def", "_report", "(", "self", ",", "epoch", ":", "int", ",", "train_stats", ":", "SubstanceClassifierEpochSummary", ",", "val_stats", ":", "SubstanceClassifierEpochSummary", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Store epoch summary in the disk. (E.g. report to tensorboard.).\n        :param epoch: Epoch\n        :param train_stats: Validation set summary.\n        :param val_stats: Train set summary.\n        \"\"\"", "\n", "logging", ".", "info", "(", "\"[Epoch %d] train-loss: %.5f\\t train-acc: %.4f [%d/%d]\\t val-loss: %.5f\\t val-acc: %.4f [%d/%d]\"", "%", "(", "\n", "epoch", ",", "train_stats", ".", "epoch_loss", "/", "train_stats", ".", "epoch_batch_count", ",", "\n", "float", "(", "train_stats", ".", "passed_count", ")", "/", "train_stats", ".", "epoch_entry_count", ",", "train_stats", ".", "passed_count", ",", "train_stats", ".", "epoch_entry_count", ",", "\n", "val_stats", ".", "epoch_loss", "/", "val_stats", ".", "epoch_batch_count", ",", "\n", "float", "(", "val_stats", ".", "passed_count", ")", "/", "val_stats", ".", "epoch_entry_count", ",", "val_stats", ".", "passed_count", ",", "val_stats", ".", "epoch_entry_count", ",", "\n", ")", ")", "\n", "\n", "self", ".", "summary_writer", ".", "add_scalar", "(", "\"loss/train\"", ",", "train_stats", ".", "epoch_loss", "/", "train_stats", ".", "epoch_batch_count", ",", "epoch", ")", "\n", "self", ".", "summary_writer", ".", "add_scalar", "(", "\"loss/val\"", ",", "val_stats", ".", "epoch_loss", "/", "val_stats", ".", "epoch_batch_count", ",", "epoch", ")", "\n", "\n", "self", ".", "summary_writer", ".", "add_scalar", "(", "\"overall_accuracy/train\"", ",", "float", "(", "train_stats", ".", "passed_count", ")", "/", "train_stats", ".", "epoch_entry_count", ",", "epoch", ")", "\n", "self", ".", "summary_writer", ".", "add_scalar", "(", "\"overall_accuracy/val\"", ",", "float", "(", "val_stats", ".", "passed_count", ")", "/", "val_stats", ".", "epoch_entry_count", ",", "epoch", ")", "\n", "\n", "if", "self", ".", "should_preview_results", ":", "\n", "# Uncomment to preview correct predictions and mistakes made on the training set", "\n", "# self.preview_results(osp.join(self.output_path, \"train_mistakes\", \"epoch_%d\" % (epoch)), train_stats.mistakes, epoch, \"train\",", "\n", "#                      train_stats.passed_count, train_stats.epoch_entry_count)", "\n", "# self.preview_results(osp.join(self.output_path, \"train_correct_predictions\", \"epoch_%d\" % (epoch)), train_stats.correct_predictions, epoch,", "\n", "#                      \"train\", train_stats.passed_count, train_stats.epoch_entry_count)", "\n", "            ", "self", ".", "_preview_results", "(", "osp", ".", "join", "(", "self", ".", "output_path", ",", "\"val_mistakes\"", ",", "\"epoch_%d\"", "%", "(", "epoch", ")", ")", ",", "val_stats", ".", "mistakes", ",", "epoch", ",", "\"val\"", ",", "\n", "val_stats", ".", "passed_count", ",", "val_stats", ".", "epoch_entry_count", ")", "\n", "self", ".", "_preview_results", "(", "osp", ".", "join", "(", "self", ".", "output_path", ",", "\"val_correct_predictions\"", ",", "\"epoch_%d\"", "%", "(", "epoch", ")", ")", ",", "val_stats", ".", "correct_predictions", ",", "epoch", ",", "\"val\"", ",", "\n", "val_stats", ".", "passed_count", ",", "val_stats", ".", "epoch_entry_count", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.substance_classifier_trainer.SubstanceClassifierTrainer._save_checkpoint": [[272, 274], ["plan2scene.evaluation.metric_impl.substance_classifier.util.save_checkpoint"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.substance_classifier.util.save_checkpoint"], ["", "", "def", "_save_checkpoint", "(", "self", ",", "epoch", ":", "int", ",", "save_reason", ":", "SaveReason", ",", "train_stats", ":", "SubstanceClassifierEpochSummary", ",", "val_stats", ":", "SubstanceClassifierEpochSummary", ")", ":", "\n", "        ", "save_checkpoint", "(", "self", ".", "output_path", ",", "self", ".", "net", ",", "self", ".", "optim", ",", "save_reason", ",", "epoch", ",", "val_stats", ".", "passed_count", ",", "val_stats", ".", "epoch_entry_count", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.abstract_trainer.AbstractTrainer.net": [[169, 172], ["None"], "methods", ["None"], ["\n", "", "@", "property", "\n", "def", "output_path", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_output_path", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.abstract_trainer.AbstractTrainer._setup_optim": [[149, 152], ["None"], "methods", ["None"], ["\n", "", "@", "property", "\n", "def", "train_dataset", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_train_dataset", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.abstract_trainer.AbstractTrainer.optim": [[153, 156], ["None"], "methods", ["None"], ["\n", "", "@", "property", "\n", "def", "val_dataset", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_val_dataset", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.abstract_trainer.AbstractTrainer.crit": [[157, 160], ["None"], "methods", ["None"], ["\n", "", "@", "property", "\n", "def", "train_dataloader", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_train_dataloader", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.abstract_trainer.AbstractTrainer._setup_crit": [[165, 168], ["None"], "methods", ["None"], ["\n", "", "@", "property", "\n", "def", "train_params", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_train_params", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.abstract_trainer.AbstractTrainer._setup_network": [[161, 164], ["None"], "methods", ["None"], ["\n", "", "@", "property", "\n", "def", "val_dataloader", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_val_dataloader", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.abstract_trainer.AbstractTrainer._setup_dataset": [[113, 116], ["None"], "methods", ["None"], ["def", "_save_checkpoint", "(", "self", ",", "epoch", ":", "int", ",", "reason", ":", "SaveReason", ",", "train_stats", ",", "val_stats", ")", ":", "\n", "        ", "pass", "\n", "\n", "", "@", "abc", ".", "abstractmethod", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.abstract_trainer.AbstractTrainer.conf": [[189, 192], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.abstract_trainer.AbstractTrainer.system_conf": [[193, 196], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.texture_prop_trainer.TexturePropTrainer.__init__": [[32, 40], ["plan2scene.texture_prop.trainer.abstract_trainer.AbstractTrainer.__init__", "multiprocessing.Value"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.models.ceiling.Ceiling.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Initialize trainer.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "_epoch_counter", "=", "multiprocessing", ".", "Value", "(", "\"i\"", ",", "0", ")", "# Used to inform the dataloaders to refresh data.", "\n", "self", ".", "_combined_emb_dim", "=", "None", "\n", "self", ".", "_tg_predictor", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.texture_prop_trainer.TexturePropTrainer._setup_datasets": [[41, 69], ["plan2scene.texture_prop.utils.get_graph_generator", "plan2scene.texture_prop.utils.get_graph_generator", "plan2scene.texture_prop.utils.get_graph_generator", "plan2scene.texture_prop.houses_dataset.HouseDataset", "torch_geometric.data.DataLoader", "plan2scene.texture_prop.houses_dataset.HouseDataset", "torch_geometric.data.DataLoader", "plan2scene.texture_prop.houses_dataset.HouseDataset", "torch_geometric.data.DataLoader", "plan2scene.common.house_parser.load_houses_with_embeddings", "plan2scene.common.house_parser.load_houses_with_embeddings", "plan2scene.common.house_parser.load_houses_with_embeddings", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.utils.get_graph_generator", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.utils.get_graph_generator", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.utils.get_graph_generator", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.common.house_parser.load_houses_with_embeddings", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.common.house_parser.load_houses_with_embeddings", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.common.house_parser.load_houses_with_embeddings"], ["", "def", "_setup_datasets", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Setup datasets and data loders.\n        \"\"\"", "\n", "train_graph_generator", "=", "get_graph_generator", "(", "self", ".", "conf", ",", "self", ".", "system_conf", ".", "train_graph_generator", ",", "include_target", "=", "True", ")", "\n", "val_graph_generator", "=", "get_graph_generator", "(", "self", ".", "conf", ",", "self", ".", "system_conf", ".", "val_graph_generator", ",", "\n", "include_target", "=", "True", ")", "# Used for crude evaluation at every epoch", "\n", "nt_graph_generator", "=", "get_graph_generator", "(", "self", ".", "conf", ",", "self", ".", "system_conf", ".", "val_graph_generator", ",", "\n", "include_target", "=", "False", ")", "# Used for slow/proper evaluation at specified interval", "\n", "\n", "self", ".", "_train_dataset", "=", "HouseDataset", "(", "load_houses_with_embeddings", "(", "self", ".", "conf", ",", "data_split", "=", "\"train\"", ",", "drop_fraction", "=", "\"0.0\"", ",", "\n", "embeddings_path", "=", "osp", ".", "join", "(", "self", ".", "conf", ".", "data_paths", ".", "train_texture_prop_train_data", ",", "\n", "\"surface_texture_embeddings\"", ")", ")", ",", "\n", "graph_generator", "=", "train_graph_generator", ",", "epoch_counter", "=", "self", ".", "_epoch_counter", ")", "\n", "self", ".", "_train_dataloader", "=", "DataLoader", "(", "self", ".", "_train_dataset", ",", "batch_size", "=", "self", ".", "system_conf", ".", "train", ".", "bs", ",", "shuffle", "=", "self", ".", "system_conf", ".", "train", ".", "shuffle_trainset", ",", "\n", "num_workers", "=", "self", ".", "num_workers", ")", "\n", "\n", "self", ".", "_val_dataset", "=", "HouseDataset", "(", "load_houses_with_embeddings", "(", "self", ".", "conf", ",", "data_split", "=", "\"val\"", ",", "drop_fraction", "=", "\"0.0\"", ",", "\n", "embeddings_path", "=", "osp", ".", "join", "(", "self", ".", "conf", ".", "data_paths", ".", "train_texture_prop_val_data", ",", "\n", "\"surface_texture_embeddings\"", ")", ")", ",", "\n", "graph_generator", "=", "val_graph_generator", ")", "\n", "self", ".", "_val_dataloader", "=", "DataLoader", "(", "self", ".", "_val_dataset", ",", "batch_size", "=", "self", ".", "system_conf", ".", "train", ".", "bs", ")", "\n", "\n", "self", ".", "_val_nt_dataset", "=", "HouseDataset", "(", "load_houses_with_embeddings", "(", "self", ".", "conf", ",", "data_split", "=", "\"val\"", ",", "drop_fraction", "=", "\"0.0\"", ",", "\n", "embeddings_path", "=", "osp", ".", "join", "(", "self", ".", "conf", ".", "data_paths", ".", "train_texture_prop_val_data", ",", "\n", "\"surface_texture_embeddings\"", ")", ")", ",", "\n", "graph_generator", "=", "nt_graph_generator", ")", "\n", "self", ".", "_val_nt_dataloader", "=", "DataLoader", "(", "self", ".", "_val_nt_dataset", ",", "batch_size", "=", "self", ".", "system_conf", ".", "train", ".", "bs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.texture_prop_trainer.TexturePropTrainer._setup_extra": [[70, 80], ["plan2scene.texture_gen.predictor.TextureGenPredictor", "texture_prop_trainer.TexturePropTrainer._tg_predictor.load_checkpoint", "plan2scene.texture_gen.utils.io.load_conf_eval"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.predictor.TexturePropPredictor.load_checkpoint", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.io.load_conf_eval"], ["", "def", "_setup_extra", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Setup additional items such as texture predictor and graph generator.\n        \"\"\"", "\n", "self", ".", "_tg_predictor", "=", "TextureGenPredictor", "(", "conf", "=", "load_conf_eval", "(", "config_path", "=", "self", ".", "conf", ".", "texture_gen", ".", "texture_synth_conf", ")", ",", "\n", "rgb_median_emb", "=", "self", ".", "conf", ".", "texture_gen", ".", "rgb_median_emb", ")", "\n", "self", ".", "_tg_predictor", ".", "load_checkpoint", "(", "checkpoint_path", "=", "self", ".", "conf", ".", "texture_gen", ".", "checkpoint_path", ")", "\n", "self", ".", "_combined_emb_dim", "=", "self", ".", "conf", ".", "texture_gen", ".", "combined_emb_dim", "\n", "if", "self", ".", "system_conf", ".", "graph_generator", ".", "include_enable_in_target", ":", "\n", "            ", "self", ".", "_combined_emb_dim", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.texture_prop_trainer.TexturePropTrainer._setup_metrics": [[81, 91], ["plan2scene.texture_prop.trainer.metric_description.MetricDescription", "plan2scene.texture_prop.trainer.metric_description.MetricDescription", "plan2scene.texture_prop.trainer.metric_description.MetricDescription", "plan2scene.texture_prop.trainer.metric_description.MetricDescription", "plan2scene.evaluation.matchers.PairedMatcher", "plan2scene.evaluation.matchers.PairedMatcher", "plan2scene.evaluation.matchers.PairedMatcher", "plan2scene.evaluation.matchers.UnpairedMatcher", "plan2scene.evaluation.metrics.HSLHistL1", "plan2scene.evaluation.metrics.ClassificationError", "plan2scene.evaluation.metrics.FreqHistL1", "plan2scene.evaluation.metrics.TileabilityMean", "plan2scene.evaluation.metric_impl.substance_classifier.classifier.SubstanceClassifier"], "methods", ["None"], ["", "", "def", "_setup_metrics", "(", "self", ")", "->", "list", ":", "\n", "        ", "\"\"\"\n        Setup metrics used for deep evaluation purpose.\n        :return: List of metric descriptions\n        \"\"\"", "\n", "return", "[", "\n", "MetricDescription", "(", "\"color\"", ",", "PairedMatcher", "(", "HSLHistL1", "(", ")", ")", ")", ",", "\n", "MetricDescription", "(", "\"subs\"", ",", "PairedMatcher", "(", "ClassificationError", "(", "SubstanceClassifier", "(", "classifier_conf", "=", "self", ".", "conf", ".", "metrics", ".", "substance_classifier", ")", ")", ")", ")", ",", "\n", "MetricDescription", "(", "\"freq\"", ",", "PairedMatcher", "(", "FreqHistL1", "(", ")", ")", ")", ",", "\n", "MetricDescription", "(", "\"tile\"", ",", "UnpairedMatcher", "(", "TileabilityMean", "(", "metric_param", "=", "self", ".", "conf", ".", "metrics", ".", "tileability_mean_metric", ")", ")", ")", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.texture_prop_trainer.TexturePropTrainer._setup_network": [[93, 99], ["plan2scene.texture_prop.utils.get_network"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.utils.get_network"], ["", "def", "_setup_network", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Setup network to be trained.\n        :return: Network to be trained.\n        \"\"\"", "\n", "return", "get_network", "(", "conf", "=", "self", ".", "conf", ",", "network_arch", "=", "self", ".", "system_conf", ".", "network_arch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.texture_prop_trainer.TexturePropTrainer._setup_crit": [[100, 106], ["plan2scene.texture_prop.utils.get_crit"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.utils.get_crit"], ["", "def", "_setup_crit", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Setup the loss function.\n        :return: Loss function.\n        \"\"\"", "\n", "return", "get_crit", "(", "self", ".", "conf", ",", "self", ".", "system_conf", ".", "train", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.texture_prop_trainer.TexturePropTrainer._setup_optim": [[107, 113], ["plan2scene.texture_prop.utils.get_optim", "texture_prop_trainer.TexturePropTrainer.net.parameters"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.utils.get_optim"], ["", "def", "_setup_optim", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Setup the optimizier.\n        :return: Optimizer.\n        \"\"\"", "\n", "return", "get_optim", "(", "self", ".", "conf", ",", "self", ".", "system_conf", ".", "train", ",", "self", ".", "net", ".", "parameters", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.texture_prop_trainer.TexturePropTrainer._train_epoch": [[114, 138], ["plan2scene.common.trainer.epoch_summary.EpochSummary", "enumerate", "texture_prop_trainer.TexturePropTrainer.optim.zero_grad", "texture_prop_trainer.TexturePropTrainer.net", "batch.y_mask.unsqueeze().repeat", "texture_prop_trainer.TexturePropTrainer.crit", "texture_prop_trainer.TexturePropTrainer.backward", "texture_prop_trainer.TexturePropTrainer.optim.step", "texture_prop_trainer.TexturePropTrainer.item", "batch.to", "batch.y_mask.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.abstract_trainer.AbstractTrainer.net", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.abstract_trainer.AbstractTrainer.crit", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.custom_ops.noise.NoiseFunction.backward"], ["", "def", "_train_epoch", "(", "self", ",", "epoch", ":", "int", ")", "->", "EpochSummary", ":", "\n", "        ", "\"\"\"\n        Train for an epoch.\n        :param epoch: Epoch index.\n        :return: Evaluation summary for the epoch on the train set.\n        \"\"\"", "\n", "self", ".", "_epoch_counter", ".", "value", "=", "epoch", "\n", "# Eval summary setup", "\n", "epoch_summary", "=", "EpochSummary", "(", "epoch_loss", "=", "0.0", ",", "epoch_entry_count", "=", "0", ",", "epoch_batch_count", "=", "0", ")", "\n", "for", "i", ",", "batch", "in", "enumerate", "(", "self", ".", "train_dataloader", ")", ":", "\n", "            ", "self", ".", "optim", ".", "zero_grad", "(", ")", "\n", "\n", "output", "=", "self", ".", "net", "(", "batch", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "mask_repeated", "=", "batch", ".", "y_mask", ".", "unsqueeze", "(", "-", "1", ")", ".", "repeat", "(", "[", "1", ",", "1", ",", "self", ".", "_combined_emb_dim", "]", ")", "\n", "loss", "=", "self", ".", "crit", "(", "output", "[", "mask_repeated", "]", ",", "batch", ".", "y", "[", "mask_repeated", "]", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optim", ".", "step", "(", ")", "\n", "\n", "epoch_summary", ".", "epoch_loss", "+=", "loss", ".", "item", "(", ")", "\n", "epoch_summary", ".", "epoch_entry_count", "+=", "batch", ".", "x", ".", "shape", "[", "0", "]", "\n", "epoch_summary", ".", "epoch_batch_count", "+=", "1", "\n", "\n", "", "return", "epoch_summary", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.texture_prop_trainer.TexturePropTrainer._eval_epoch": [[139, 157], ["plan2scene.common.trainer.epoch_summary.EpochSummary", "torch.no_grad", "enumerate", "texture_prop_trainer.TexturePropTrainer.net", "batch.y_mask.unsqueeze().repeat", "texture_prop_trainer.TexturePropTrainer.crit", "texture_prop_trainer.TexturePropTrainer.item", "batch.to", "batch.y_mask.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.abstract_trainer.AbstractTrainer.net", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.abstract_trainer.AbstractTrainer.crit"], ["", "def", "_eval_epoch", "(", "self", ",", "epoch", ":", "int", ")", "->", "EpochSummary", ":", "\n", "        ", "\"\"\"\n        Evaluate the current model on validation set.\n        :param epoch: Epoch index.\n        :return: Evaluation results\n        \"\"\"", "\n", "epoch_summary", "=", "EpochSummary", "(", "epoch_loss", "=", "0.0", ",", "epoch_entry_count", "=", "0", ",", "epoch_batch_count", "=", "0", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "i", ",", "batch", "in", "enumerate", "(", "self", ".", "val_dataloader", ")", ":", "\n", "                ", "output", "=", "self", ".", "net", "(", "batch", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "mask_repeated", "=", "batch", ".", "y_mask", ".", "unsqueeze", "(", "-", "1", ")", ".", "repeat", "(", "[", "1", ",", "1", ",", "self", ".", "_combined_emb_dim", "]", ")", "\n", "loss", "=", "self", ".", "crit", "(", "output", "[", "mask_repeated", "]", ",", "batch", ".", "y", "[", "mask_repeated", "]", ")", "\n", "epoch_summary", ".", "epoch_loss", "+=", "loss", ".", "item", "(", ")", "\n", "epoch_summary", ".", "epoch_entry_count", "+=", "batch", ".", "x", ".", "shape", "[", "0", "]", "\n", "epoch_summary", ".", "epoch_batch_count", "+=", "1", "\n", "\n", "", "", "return", "epoch_summary", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.texture_prop_trainer.TexturePropTrainer._deep_eval_epoch": [[158, 190], ["texture_prop_trainer.TexturePropTrainer.conf.get_data_list", "plan2scene.common.house_parser.parse_houses", "enumerate", "plan2scene.crop_select.util.fill_textures", "plan2scene.common.house_parser.load_houses_with_textures", "texture_prop_trainer.TexturePropTrainer.net", "plan2scene.texture_prop.utils.update_embeddings", "isinstance", "plan2scene.evaluation.evaluator.evaluate", "eval_results.append", "texture_prop_trainer.TexturePropTrainer.conf.data_paths.arch_path_spec.format", "texture_prop_trainer.TexturePropTrainer.conf.data_paths.photoroom_path_spec.format", "batch.to", "plan2scene.texture_prop.trainer.metric_description.MetricResult"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.plan2scene.config_manager.ConfigManager.get_data_list", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.common.house_parser.parse_houses", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.crop_select.util.fill_textures", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.common.house_parser.load_houses_with_textures", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.abstract_trainer.AbstractTrainer.net", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.utils.update_embeddings", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.evaluation.evaluator.evaluate"], ["", "def", "_deep_eval_epoch", "(", "self", ",", "epoch", ")", "->", "list", ":", "\n", "        ", "\"\"\"\n        Slow/accurate evaluation by synthesizing final texture.\n        :param epoch: Epoch number.\n        :return: List of MetricResult items.\n        \"\"\"", "\n", "# Load untextured houses", "\n", "house_keys", "=", "self", ".", "conf", ".", "get_data_list", "(", "\"val\"", ")", "\n", "pred_houses", "=", "parse_houses", "(", "self", ".", "conf", ",", "house_keys", ",", "house_path_spec", "=", "self", ".", "conf", ".", "data_paths", ".", "arch_path_spec", ".", "format", "(", "split", "=", "\"val\"", ",", "\n", "house_key", "=", "\"{house_key}\"", ")", ",", "\n", "photoroom_csv_path_spec", "=", "self", ".", "conf", ".", "data_paths", ".", "photoroom_path_spec", ".", "format", "(", "split", "=", "\"val\"", ",", "\n", "drop_fraction", "=", "\"0.0\"", ",", "\n", "house_key", "=", "\"{house_key}\"", ")", ")", "\n", "\n", "# Predict textures for houses", "\n", "for", "i", ",", "batch", "in", "enumerate", "(", "self", ".", "_val_nt_dataloader", ")", ":", "\n", "            ", "output", "=", "self", ".", "net", "(", "batch", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "update_embeddings", "(", "self", ".", "conf", ",", "pred_houses", ",", "batch", ",", "output", ")", "\n", "\n", "", "fill_textures", "(", "self", ".", "conf", ",", "pred_houses", ",", "log", "=", "False", ",", "predictor", "=", "self", ".", "_tg_predictor", ",", "image_source", "=", "ImageSource", ".", "GNN_PROP", ",", "skip_existing_textures", "=", "False", ")", "\n", "\n", "# Load ground truth", "\n", "gt_houses", "=", "load_houses_with_textures", "(", "self", ".", "conf", ",", "\"val\"", ",", "\"0.0\"", ",", "self", ".", "conf", ".", "data_paths", ".", "gt_reference_crops_val", ")", "\n", "\n", "# Evaluate", "\n", "eval_results", "=", "[", "]", "\n", "for", "metric", "in", "self", ".", "metrics", ":", "\n", "            ", "assert", "isinstance", "(", "metric", ",", "MetricDescription", ")", "\n", "# logging.info(\"Evaluating metric: %s\" % str(metric.name))", "\n", "result", "=", "evaluate", "(", "self", ".", "conf", ",", "pred_houses", "=", "pred_houses", ",", "gt_houses", "=", "gt_houses", ",", "matcher", "=", "metric", ".", "evaluator", ",", "log", "=", "False", ")", "\n", "eval_results", ".", "append", "(", "MetricResult", "(", "metric", ",", "result", ")", ")", "\n", "", "return", "eval_results", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.texture_prop_trainer.TexturePropTrainer._report": [[191, 219], ["logging.info", "texture_prop_trainer.TexturePropTrainer.summary_writer.add_scalar", "texture_prop_trainer.TexturePropTrainer.summary_writer.add_scalar", "isinstance", "texture_prop_trainer.TexturePropTrainer.summary_writer.add_scalar", "str", "str"], "methods", ["None"], ["", "def", "_report", "(", "self", ",", "epoch", ":", "int", ",", "train_stats", ":", "EpochSummary", ",", "val_stats", ":", "EpochSummary", ",", "deep_eval_results", ":", "list", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Write train progress to the log after completing an epoch.\n        :param epoch: Epoch index.\n        :param train_stats: Train set epoch evaluation summary.\n        :param val_stats: Validation set epoch evaluation summary.\n        :param deep_eval_results: Deep evaluation results if a deep evaluation was undertaken.\n        \"\"\"", "\n", "# Log detail report if available", "\n", "additional", "=", "\"\"", "\n", "if", "deep_eval_results", ":", "\n", "            ", "for", "deep_eval_result", "in", "deep_eval_results", ":", "\n", "                ", "isinstance", "(", "deep_eval_result", ",", "MetricResult", ")", "\n", "additional", "+=", "\"%s: %.7f [%.7f/%d]\\t\"", "%", "(", "\n", "str", "(", "deep_eval_result", ".", "metric", ")", ",", "\n", "deep_eval_result", ".", "eval_result", ".", "total_texture_loss", "/", "deep_eval_result", ".", "eval_result", ".", "surface_count", ",", "\n", "deep_eval_result", ".", "eval_result", ".", "total_texture_loss", ",", "deep_eval_result", ".", "eval_result", ".", "surface_count", "\n", ")", "\n", "self", ".", "summary_writer", ".", "add_scalar", "(", "\"epoch_val_\"", "+", "str", "(", "deep_eval_result", ".", "metric", ")", ",", "\n", "deep_eval_result", ".", "eval_result", ".", "total_texture_loss", "/", "deep_eval_result", ".", "eval_result", ".", "surface_count", ",", "epoch", ")", "\n", "\n", "# Frequent log", "\n", "", "", "logging", ".", "info", "(", "\"[Epoch %d]\\t Train Loss: %.7f\\t Val Loss: %.7f\\t %s \"", "%", "(", "epoch", ",", "\n", "train_stats", ".", "epoch_loss", "/", "train_stats", ".", "epoch_batch_count", ",", "\n", "val_stats", ".", "epoch_loss", "/", "val_stats", ".", "epoch_batch_count", ",", "\n", "additional", ")", ")", "\n", "self", ".", "summary_writer", ".", "add_scalar", "(", "\"epoch_train_loss\"", ",", "train_stats", ".", "epoch_loss", "/", "train_stats", ".", "epoch_batch_count", ",", "epoch", ")", "\n", "self", ".", "summary_writer", ".", "add_scalar", "(", "\"epoch_val_loss\"", ",", "val_stats", ".", "epoch_loss", "/", "val_stats", ".", "epoch_batch_count", ",", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.texture_prop_trainer.TexturePropTrainer._save_checkpoint": [[220, 257], ["torch.save", "logging.info", "os.join", "os.join", "os.exists", "os.exists", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "texture_prop_trainer.TexturePropTrainer.net.state_dict", "texture_prop_trainer.TexturePropTrainer.optim.state_dict", "os.join", "os.join", "os.dirname", "os.dirname", "os.dirname", "os.dirname"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.common.image_description.ImageDescription.save"], ["", "def", "_save_checkpoint", "(", "self", ",", "epoch", ":", "int", ",", "reason", ":", "SaveReason", ",", "train_stats", ":", "EpochSummary", ",", "val_stats", ":", "EpochSummary", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Saves a model checkpoint.\n        :param epoch: Epoch index.\n        :param reason: Save reason.\n        :param train_stats: Train set epoch evaluation summary.\n        :param val_stats: Validation set epoch evaluation summary.\n        \"\"\"", "\n", "save_path", "=", "None", "\n", "if", "reason", "==", "SaveReason", ".", "BEST_MODEL", ":", "\n", "# Save best model", "\n", "            ", "logging", ".", "info", "(", "\"Saving Best Model\"", ")", "\n", "save_path", "=", "osp", ".", "join", "(", "self", ".", "output_path", ",", "\"best_models\"", ",", "\n", "\"best-tex-val-loss-%.5f-epoch-%d.ckpt\"", "%", "(", "\n", "val_stats", ".", "epoch_loss", "/", "val_stats", ".", "epoch_batch_count", ",", "\n", "epoch", ")", ")", "\n", "\n", "", "elif", "reason", "==", "SaveReason", ".", "INTERVAL", ":", "\n", "# logging.info(\"Saving Checkpoint\")", "\n", "            ", "save_path", "=", "osp", ".", "join", "(", "self", ".", "output_path", ",", "\"checkpoints\"", ",", "\n", "\"loss-%.5f-epoch-%d.ckpt\"", "%", "(", "\n", "val_stats", ".", "epoch_loss", "/", "val_stats", ".", "epoch_batch_count", ",", "\n", "epoch", ")", ")", "\n", "", "else", ":", "\n", "            ", "assert", "False", "\n", "\n", "", "if", "not", "osp", ".", "exists", "(", "osp", ".", "dirname", "(", "save_path", ")", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "osp", ".", "dirname", "(", "save_path", ")", ")", "\n", "\n", "", "payload", "=", "{", "\n", "\"model_state_dict\"", ":", "self", ".", "net", ".", "state_dict", "(", ")", ",", "\n", "\"epoch\"", ":", "epoch", ",", "\n", "\"train_stats\"", ":", "train_stats", ",", "\n", "\"val_stats\"", ":", "val_stats", ",", "\n", "\"optimizer_state_dict\"", ":", "self", ".", "optim", ".", "state_dict", "(", ")", "\n", "}", "\n", "torch", ".", "save", "(", "payload", ",", "save_path", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.abstract_trainer.AbstractTrainer.num_workers": [[46, 49], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "_setup_datasets", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.abstract_trainer.AbstractTrainer._deep_eval_epoch": [[113, 116], ["None"], "methods", ["None"], ["def", "_save_checkpoint", "(", "self", ",", "epoch", ":", "int", ",", "reason", ":", "SaveReason", ",", "train_stats", ",", "val_stats", ")", ":", "\n", "        ", "pass", "\n", "\n", "", "@", "abc", ".", "abstractmethod", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.abstract_trainer.AbstractTrainer._setup_extra": [[121, 124], ["None"], "methods", ["None"], ["\n", "pass", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.abstract_trainer.AbstractTrainer.metrics": [[137, 140], ["None"], "methods", ["None"], ["\n", "", "@", "abc", ".", "abstractmethod", "\n", "def", "_setup_loss_function", "(", "self", ")", ":", "\n", "        ", "pass", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.abstract_trainer.AbstractTrainer._setup_metrics": [[141, 144], ["None"], "methods", ["None"], ["\n", "", "@", "property", "\n", "def", "optimizer", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_optimizer", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.metric_description.MetricDescription.__init__": [[9, 17], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "name", ":", "str", ",", "evaluator", ":", "AbstractMatcher", ")", ":", "\n", "        ", "\"\"\"\n        Initialize metric description.\n        :param name: Metric name.\n        :param evaluator: Matcher used to evaluate the metric.\n        \"\"\"", "\n", "self", ".", "_name", "=", "name", "\n", "self", ".", "_evaluator", "=", "evaluator", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.metric_description.MetricDescription.name": [[18, 25], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "name", "(", "self", ")", "->", "str", ":", "\n", "        ", "\"\"\"\n        Return metric name.\n        :return: Metric name.\n        \"\"\"", "\n", "return", "self", ".", "_name", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.metric_description.MetricDescription.evaluator": [[26, 33], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "evaluator", "(", "self", ")", "->", "AbstractMatcher", ":", "\n", "        ", "\"\"\"\n        Return metric evaluator.\n        :return: Metric evaluator.\n        \"\"\"", "\n", "return", "self", ".", "_evaluator", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.metric_description.MetricDescription.__repr__": [[34, 36], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.metric_description.MetricResult.__init__": [[42, 50], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "metric", ":", "MetricDescription", ",", "eval_result", ":", "EvalResult", ")", ":", "\n", "        ", "\"\"\"\n        Initialize metric result.\n        :param metric: Metric considered.\n        :param eval_result: Evaluation result reported by the metric.\n        \"\"\"", "\n", "self", ".", "_metric", "=", "metric", "\n", "self", ".", "_eval_result", "=", "eval_result", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.metric_description.MetricResult.metric": [[51, 58], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "metric", "(", "self", ")", "->", "MetricDescription", ":", "\n", "        ", "\"\"\"\n        Return metric description.\n        :return: Metric description.\n        \"\"\"", "\n", "return", "self", ".", "_metric", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.metric_description.MetricResult.eval_result": [[59, 66], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "eval_result", "(", "self", ")", "->", "EvalResult", ":", "\n", "        ", "\"\"\"\n        Return evaluation result.\n        :return: Evaluation result.\n        \"\"\"", "\n", "return", "self", ".", "_eval_result", "\n", "", "", ""]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.epoch_summary.EpochSummary.__init__": [[6, 20], ["isinstance", "isinstance", "isinstance"], "methods", ["None"], ["\n", "\n", "def", "__init__", "(", "self", ",", "epoch_style_loss", ":", "float", ",", "epoch_substance_loss", ":", "float", ",", "epoch_substance_passed", ":", "int", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Initializes TextureGenEpochSummary.\n        :param epoch_style_loss: VGG style loss for epoch\n        :param epoch_substance_loss:  Substance loss for epoch\n        :param epoch_substance_passed: Number of crops that were correctly classified.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "assert", "isinstance", "(", "epoch_style_loss", ",", "float", ")", "\n", "assert", "isinstance", "(", "epoch_substance_loss", ",", "float", ")", "\n", "assert", "isinstance", "(", "epoch_substance_passed", ",", "int", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.epoch_summary.EpochSummary.epoch_loss": [[29, 36], ["isinstance"], "methods", ["None"], ["\n", "return", "self", ".", "_epoch_style_loss", "\n", "\n", "", "@", "epoch_style_loss", ".", "setter", "\n", "def", "epoch_style_loss", "(", "self", ",", "value", ":", "float", ")", "->", "None", ":", "\n", "        "]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.epoch_summary.EpochSummary.epoch_batch_count": [[45, 52], ["isinstance"], "methods", ["None"], ["\n", "return", "self", ".", "_epoch_substance_loss", "\n", "\n", "", "@", "epoch_substance_loss", ".", "setter", "\n", "def", "epoch_substance_loss", "(", "self", ",", "value", ":", "float", ")", "->", "None", ":", "\n", "        "]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.epoch_summary.EpochSummary.epoch_entry_count": [[60, 67], ["isinstance"], "methods", ["None"], ["def", "epoch_substance_passed", "(", "self", ")", "->", "int", ":", "\n", "        ", "\"\"\"\n        Returns count of entries that received correct substance prediction.\n        :return: Count of entries that received correct substance prediction.\n        \"\"\"", "\n", "return", "self", ".", "_epoch_substance_passed", "\n", "\n", "", "@", "epoch_substance_passed", ".", "setter", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.custom_transforms.hsv_transforms.ToHSV.__init__": [[5, 7], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.custom_transforms.hsv_transforms.ToHSV.__call__": [[8, 10], ["img.convert"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "return", "img", ".", "convert", "(", "\"HSV\"", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.custom_transforms.random_crop.RandomCropAndDropAlpha.__init__": [[12, 23], ["isinstance", "int", "int"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ",", "iter_count", ":", "int", ")", ":", "\n", "        ", "\"\"\"\n        Initializes transform.\n        :param size: Size of the crop.\n        :param iter_count: Maximum number of attempts made to take an opaque crop.\n        \"\"\"", "\n", "if", "isinstance", "(", "size", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "self", ".", "size", "=", "(", "int", "(", "size", ")", ",", "int", "(", "size", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "size", "=", "size", "\n", "", "self", ".", "iter_count", "=", "iter_count", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.custom_transforms.random_crop.RandomCropAndDropAlpha.__call__": [[24, 44], ["range", "len", "torchvision.transforms.RandomCrop.get_params", "img.crop", "torchvision.transforms.RandomCrop.get_params", "img.crop", "img.getextrema", "img.crop.convert", "img.crop.getextrema"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len"], ["", "def", "__call__", "(", "self", ",", "img", ":", "Image", ")", "->", "Image", ".", "Image", ":", "\n", "        ", "\"\"\"\n        Obtains a random opaque crop from an alpha masked image.\n        :param img: Image considered.\n        :return: Crop if success or None.\n        \"\"\"", "\n", "if", "img", ".", "width", "<", "self", ".", "size", "[", "0", "]", "or", "img", ".", "height", "<", "self", ".", "size", "[", "1", "]", ":", "\n", "            ", "return", "None", "\n", "\n", "", "if", "len", "(", "img", ".", "getextrema", "(", ")", ")", "==", "3", ":", "\n", "# RGB", "\n", "            ", "i", ",", "j", ",", "h", ",", "w", "=", "transforms", ".", "RandomCrop", ".", "get_params", "(", "img", ",", "self", ".", "size", ")", "\n", "crop", "=", "img", ".", "crop", "(", "(", "j", ",", "i", ",", "w", "+", "j", ",", "i", "+", "h", ")", ")", "\n", "return", "crop", "\n", "\n", "", "for", "i", "in", "range", "(", "self", ".", "iter_count", ")", ":", "\n", "            ", "i", ",", "j", ",", "h", ",", "w", "=", "transforms", ".", "RandomCrop", ".", "get_params", "(", "img", ",", "self", ".", "size", ")", "\n", "crop", "=", "img", ".", "crop", "(", "(", "j", ",", "i", ",", "w", "+", "j", ",", "i", "+", "h", ")", ")", "\n", "if", "crop", ".", "getextrema", "(", ")", "[", "3", "]", "[", "0", "]", "==", "255", ":", "\n", "                ", "return", "crop", ".", "convert", "(", "\"RGB\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.custom_transforms.random_crop.RandomResizedCropAndDropAlpha.__init__": [[51, 66], ["isinstance", "int", "int"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ",", "iter_count", ",", "scale", ":", "tuple", "=", "(", "0.08", ",", "1.0", ")", ",", "ratio", "=", "(", "3.", "/", "4.", ",", "4.", "/", "3.", ")", ")", ":", "\n", "        ", "\"\"\"\n        Initialize transform.\n        :param size: Size of the output crop.\n        :param iter_count: Max number of attempts to make an opaque crop.\n        :param scale: Range of size of the origin size cropped.\n        :param ratio: Range of aspect ratio of the origin aspect ratio cropped.\n        \"\"\"", "\n", "if", "isinstance", "(", "size", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "self", ".", "size", "=", "(", "int", "(", "size", ")", ",", "int", "(", "size", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "size", "=", "size", "\n", "", "self", ".", "iter_count", "=", "iter_count", "\n", "self", ".", "scale", "=", "scale", "\n", "self", ".", "ratio", "=", "ratio", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.custom_transforms.random_crop.RandomResizedCropAndDropAlpha.__call__": [[67, 88], ["range", "len", "torchvision.transforms.RandomResizedCrop.get_params", "img.crop", "crop.resize.resize.resize", "torchvision.transforms.RandomResizedCrop.get_params", "img.crop", "crop.resize.resize.resize", "img.getextrema", "crop.resize.resize.convert", "crop.resize.resize.getextrema"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\"\n        Takes an opaque random resized crop and drop the alpha channel.\n        :param img: Input image considered.\n        :return: RGB crop.\n        \"\"\"", "\n", "if", "img", ".", "width", "<", "self", ".", "size", "[", "0", "]", "or", "img", ".", "height", "<", "self", ".", "size", "[", "1", "]", ":", "\n", "            ", "return", "None", "\n", "", "if", "len", "(", "img", ".", "getextrema", "(", ")", ")", "==", "3", ":", "\n", "# RGB", "\n", "            ", "i", ",", "j", ",", "h", ",", "w", "=", "transforms", ".", "RandomResizedCrop", ".", "get_params", "(", "img", ",", "self", ".", "scale", ",", "self", ".", "ratio", ")", "\n", "crop", "=", "img", ".", "crop", "(", "(", "j", ",", "i", ",", "w", "+", "j", ",", "i", "+", "h", ")", ")", "\n", "crop", "=", "crop", ".", "resize", "(", "self", ".", "size", ")", "\n", "return", "crop", "\n", "\n", "", "for", "i", "in", "range", "(", "self", ".", "iter_count", ")", ":", "\n", "            ", "i", ",", "j", ",", "h", ",", "w", "=", "transforms", ".", "RandomResizedCrop", ".", "get_params", "(", "img", ",", "self", ".", "scale", ",", "self", ".", "ratio", ")", "\n", "crop", "=", "img", ".", "crop", "(", "(", "j", ",", "i", ",", "w", "+", "j", ",", "i", "+", "h", ")", ")", "\n", "crop", "=", "crop", ".", "resize", "(", "self", ".", "size", ")", "\n", "if", "crop", ".", "getextrema", "(", ")", "[", "3", "]", "[", "0", "]", "==", "255", ":", "\n", "                ", "return", "crop", ".", "convert", "(", "\"RGB\"", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.nets.vgg.VGG.__init__": [[26, 41], ["torch.Module.__init__", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "vgg.VGG._initialize_weights"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.models.ceiling.Ceiling.__init__", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.nets.vgg.VGG._initialize_weights"], ["    ", "def", "__init__", "(", "self", ",", "features", ",", "num_classes", "=", "1000", ",", "init_weights", "=", "True", ")", ":", "\n", "        ", "super", "(", "VGG", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "features", "=", "features", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "7", ",", "7", ")", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "512", "*", "7", "*", "7", ",", "4096", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "4096", ",", "4096", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "4096", ",", "num_classes", ")", ",", "\n", ")", "\n", "if", "init_weights", ":", "\n", "            ", "self", ".", "_initialize_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.nets.vgg.VGG.forward": [[42, 48], ["vgg.VGG.features", "vgg.VGG.avgpool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "vgg.VGG.classifier"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "1", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.nets.vgg.VGG._initialize_weights": [[49, 61], ["vgg.VGG.modules", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.normal_", "torch.init.normal_", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["", "def", "_initialize_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "0", ",", "0.01", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.nets.vgg.make_layers": [[63, 77], ["torch.Sequential", "torch.Conv2d", "torch.MaxPool2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "function", ["None"], ["", "", "", "", "def", "make_layers", "(", "cfg", ",", "batch_norm", "=", "False", ")", ":", "\n", "    ", "layers", "=", "[", "]", "\n", "in_channels", "=", "3", "\n", "for", "v", "in", "cfg", ":", "\n", "        ", "if", "v", "==", "'M'", ":", "\n", "            ", "layers", "+=", "[", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "]", "\n", "", "else", ":", "\n", "            ", "conv2d", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "v", ",", "kernel_size", "=", "3", ",", "padding", "=", "2", ",", "padding_mode", "=", "'circular'", ")", "\n", "if", "batch_norm", ":", "\n", "                ", "layers", "+=", "[", "conv2d", ",", "nn", ".", "BatchNorm2d", "(", "v", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "", "else", ":", "\n", "                ", "layers", "+=", "[", "conv2d", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "", "in_channels", "=", "v", "\n", "", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.nets.vgg._vgg": [[87, 96], ["vgg.VGG", "vgg.make_layers", "torchvision.models.utils.load_state_dict_from_url", "VGG.load_state_dict"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.nets.vgg.make_layers"], ["def", "_vgg", "(", "arch", ",", "cfg", ",", "batch_norm", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "pretrained", ":", "\n", "        ", "kwargs", "[", "'init_weights'", "]", "=", "False", "\n", "", "model", "=", "VGG", "(", "make_layers", "(", "cfgs", "[", "cfg", "]", ",", "batch_norm", "=", "batch_norm", ")", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "state_dict", "=", "load_state_dict_from_url", "(", "model_urls", "[", "arch", "]", ",", "\n", "progress", "=", "progress", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.nets.vgg.vgg11": [[98, 106], ["vgg._vgg"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.nets.vgg._vgg"], ["", "def", "vgg11", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"VGG 11-layer model (configuration \"A\") from\n    `\"Very Deep Convolutional Networks For Large-Scale Image Recognition\" <https://arxiv.org/pdf/1409.1556.pdf>`_\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_vgg", "(", "'vgg11'", ",", "'A'", ",", "False", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.nets.vgg.vgg11_bn": [[108, 116], ["vgg._vgg"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.nets.vgg._vgg"], ["", "def", "vgg11_bn", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"VGG 11-layer model (configuration \"A\") with batch normalization\n    `\"Very Deep Convolutional Networks For Large-Scale Image Recognition\" <https://arxiv.org/pdf/1409.1556.pdf>`_\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_vgg", "(", "'vgg11_bn'", ",", "'A'", ",", "True", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.nets.vgg.vgg13": [[118, 126], ["vgg._vgg"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.nets.vgg._vgg"], ["", "def", "vgg13", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"VGG 13-layer model (configuration \"B\")\n    `\"Very Deep Convolutional Networks For Large-Scale Image Recognition\" <https://arxiv.org/pdf/1409.1556.pdf>`_\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_vgg", "(", "'vgg13'", ",", "'B'", ",", "False", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.nets.vgg.vgg13_bn": [[128, 136], ["vgg._vgg"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.nets.vgg._vgg"], ["", "def", "vgg13_bn", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"VGG 13-layer model (configuration \"B\") with batch normalization\n    `\"Very Deep Convolutional Networks For Large-Scale Image Recognition\" <https://arxiv.org/pdf/1409.1556.pdf>`_\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_vgg", "(", "'vgg13_bn'", ",", "'B'", ",", "True", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.nets.vgg.vgg16": [[138, 146], ["vgg._vgg"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.nets.vgg._vgg"], ["", "def", "vgg16", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"VGG 16-layer model (configuration \"D\")\n    `\"Very Deep Convolutional Networks For Large-Scale Image Recognition\" <https://arxiv.org/pdf/1409.1556.pdf>`_\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_vgg", "(", "'vgg16'", ",", "'D'", ",", "False", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.nets.vgg.vgg16_bn": [[148, 156], ["vgg._vgg"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.nets.vgg._vgg"], ["", "def", "vgg16_bn", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"VGG 16-layer model (configuration \"D\") with batch normalization\n    `\"Very Deep Convolutional Networks For Large-Scale Image Recognition\" <https://arxiv.org/pdf/1409.1556.pdf>`_\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_vgg", "(", "'vgg16_bn'", ",", "'D'", ",", "True", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.nets.vgg.vgg19": [[158, 166], ["vgg._vgg"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.nets.vgg._vgg"], ["", "def", "vgg19", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"VGG 19-layer model (configuration \"E\")\n    `\"Very Deep Convolutional Networks For Large-Scale Image Recognition\" <https://arxiv.org/pdf/1409.1556.pdf>`_\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_vgg", "(", "'vgg19'", ",", "'E'", ",", "False", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.nets.vgg.vgg19_bn": [[168, 176], ["vgg._vgg"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.nets.vgg._vgg"], ["", "def", "vgg19_bn", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"VGG 19-layer model (configuration 'E') with batch normalization\n    `\"Very Deep Convolutional Networks For Large-Scale Image Recognition\" <https://arxiv.org/pdf/1409.1556.pdf>`_\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_vgg", "(", "'vgg19_bn'", ",", "'E'", ",", "True", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.nets.core_layers.normalization": [[7, 22], ["functools.partial", "functools.partial", "functools.partial", "functools.partial", "functools.partial", "NotImplementedError"], "function", ["None"], ["def", "normalization", "(", "type", ")", ":", "\n", "    ", "if", "type", "==", "'batch2d'", ":", "\n", "        ", "return", "functools", ".", "partial", "(", "torch", ".", "nn", ".", "BatchNorm2d", ")", "\n", "", "elif", "type", "==", "'batch3d'", ":", "\n", "        ", "return", "functools", ".", "partial", "(", "torch", ".", "nn", ".", "BatchNorm3d", ")", "\n", "", "elif", "type", "==", "'inst2d'", ":", "\n", "        ", "return", "functools", ".", "partial", "(", "torch", ".", "nn", ".", "InstanceNorm2d", ")", "\n", "", "elif", "type", "==", "'inst3d'", ":", "\n", "        ", "return", "functools", ".", "partial", "(", "torch", ".", "nn", ".", "InstanceNorm3d", ")", "\n", "", "elif", "type", "==", "'spectral'", ":", "\n", "        ", "return", "torch", ".", "nn", ".", "utils", ".", "spectral_norm", "\n", "", "elif", "type", "==", "'none'", "or", "type", "is", "None", ":", "\n", "        ", "return", "functools", ".", "partial", "(", "torch", ".", "nn", ".", "Identity", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'Normalization {} is not implemented'", ".", "format", "(", "type", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.nets.core_layers.non_linearity": [[24, 35], ["functools.partial", "functools.partial", "functools.partial", "functools.partial", "NotImplementedError"], "function", ["None"], ["", "", "def", "non_linearity", "(", "type", ")", ":", "\n", "    ", "if", "type", "==", "'relu'", ":", "\n", "        ", "return", "functools", ".", "partial", "(", "torch", ".", "nn", ".", "ReLU", ")", "\n", "", "elif", "type", "==", "'lrelu'", ":", "\n", "        ", "return", "functools", ".", "partial", "(", "torch", ".", "nn", ".", "LeakyReLU", ",", "negative_slope", "=", "0.2", ")", "\n", "", "elif", "type", "==", "'elu'", ":", "\n", "        ", "return", "functools", ".", "partial", "(", "torch", ".", "nn", ".", "ELU", ")", "\n", "", "elif", "type", "==", "'none'", "or", "type", "is", "None", ":", "\n", "        ", "return", "functools", ".", "partial", "(", "torch", ".", "nn", ".", "Identity", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'Nonlinearity {} is not implemented'", ".", "format", "(", "type", ")", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.neural_texture.encoder.BasicBlock.__init__": [[39, 56], ["torch.Module.__init__", "encoder.conv3x3", "norm_layer", "torch.ReLU", "torch.ReLU", "encoder.conv3x3", "norm_layer", "ValueError", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.models.ceiling.Ceiling.__init__", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.neural_texture.encoder.conv3x3", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.neural_texture.encoder.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "groups", "=", "1", ",", "\n", "base_width", "=", "64", ",", "dilation", "=", "1", ",", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "InstanceNorm2d", "\n", "", "if", "groups", "!=", "1", "or", "base_width", "!=", "64", ":", "\n", "            ", "raise", "ValueError", "(", "'BasicBlock only supports groups=1 and base_width=64'", ")", "\n", "", "if", "dilation", ">", "1", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Dilation > 1 not supported in BasicBlock\"", ")", "\n", "# Both self.conv1 and self.downsample layers downsample the input when stride != 1", "\n", "", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.neural_texture.encoder.BasicBlock.forward": [[57, 74], ["encoder.BasicBlock.conv1", "encoder.BasicBlock.bn1", "encoder.BasicBlock.relu", "encoder.BasicBlock.conv2", "encoder.BasicBlock.bn2", "encoder.BasicBlock.relu", "encoder.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.neural_texture.encoder.ResNet.__init__": [[78, 139], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "encoder.ResNet._make_layer", "encoder.ResNet._make_layer", "encoder.ResNet._make_layer", "encoder.ResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "encoder.ResNet.modules", "len", "ValueError", "isinstance", "encoder.ResNet.modules", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.models.ceiling.Ceiling.__init__", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.neural_texture.encoder.ResNet._make_layer", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.neural_texture.encoder.ResNet._make_layer", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.neural_texture.encoder.ResNet._make_layer", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.neural_texture.encoder.ResNet._make_layer", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len"], ["    ", "def", "__init__", "(", "self", ",", "param", ",", "model_param", ")", ":", "\n", "\n", "        ", "block", "=", "BasicBlock", "\n", "layers", "=", "[", "2", ",", "2", ",", "2", ",", "2", "]", "\n", "z_size", "=", "model_param", ".", "z", "\n", "bottleneck_size", "=", "model_param", ".", "bottleneck_size", "\n", "# bottleneck_size = 8", "\n", "# bottleneck_size = model_param.z", "\n", "\n", "zero_init_residual", "=", "False", ",", "\n", "groups", "=", "1", "\n", "width_per_group", "=", "64", "\n", "replace_stride_with_dilation", "=", "None", "\n", "norm_layer", "=", "nn", ".", "InstanceNorm2d", "\n", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "_norm_layer", "=", "norm_layer", "\n", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "dilation", "=", "1", "\n", "if", "replace_stride_with_dilation", "is", "None", ":", "\n", "# each element in the tuple indicates if we should replace", "\n", "# the 2x2 stride with a dilated convolution instead", "\n", "            ", "replace_stride_with_dilation", "=", "[", "False", ",", "False", ",", "False", "]", "\n", "", "if", "len", "(", "replace_stride_with_dilation", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "\"replace_stride_with_dilation should be None \"", "\n", "\"or a 3-element tuple, got {}\"", ".", "format", "(", "replace_stride_with_dilation", ")", ")", "\n", "", "self", ".", "groups", "=", "groups", "\n", "self", ".", "base_width", "=", "width_per_group", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "self", ".", "inplanes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "0", "]", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "1", "]", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "2", "]", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "fc_bottleneck", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "bottleneck_size", ")", "\n", "self", ".", "fc_final", "=", "nn", ".", "Linear", "(", "bottleneck_size", ",", "z_size", ")", "\n", "# self.fc = nn.Linear(512 * block.expansion, z_size)", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "# Zero-initialize the last BN in each residual branch,", "\n", "# so that the residual branch starts with zeros, and each residual block behaves like an identity.", "\n", "# This improves the model by 0.2~0.3% according to https://arxiv.org/abs/1706.02677", "\n", "", "", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "BasicBlock", ")", "and", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "\n", "# elif isinstance(m, Bottleneck) and isinstance(m, (nn.BatchNorm2d, nn.GroupNorm)):", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.neural_texture.encoder.ResNet._make_layer": [[143, 166], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "encoder.conv1x1", "norm_layer", "block"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.neural_texture.encoder.conv1x1"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilate", "=", "False", ")", ":", "\n", "        ", "norm_layer", "=", "self", ".", "_norm_layer", "\n", "downsample", "=", "None", "\n", "previous_dilation", "=", "self", ".", "dilation", "\n", "if", "dilate", ":", "\n", "            ", "self", ".", "dilation", "*=", "stride", "\n", "stride", "=", "1", "\n", "", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", ",", "\n", "norm_layer", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "self", ".", "groups", ",", "\n", "self", ".", "base_width", ",", "previous_dilation", ",", "norm_layer", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "groups", "=", "self", ".", "groups", ",", "\n", "base_width", "=", "self", ".", "base_width", ",", "dilation", "=", "self", ".", "dilation", ",", "\n", "norm_layer", "=", "norm_layer", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.neural_texture.encoder.ResNet.forward": [[167, 186], ["encoder.ResNet.conv1", "encoder.ResNet.bn1", "encoder.ResNet.relu", "encoder.ResNet.maxpool", "encoder.ResNet.layer1", "encoder.ResNet.layer2", "encoder.ResNet.layer3", "encoder.ResNet.layer4", "encoder.ResNet.avgpool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "encoder.ResNet.fc_bottleneck", "encoder.ResNet.fc_final"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "1", ")", "\n", "\n", "x_bottleneck", "=", "self", ".", "fc_bottleneck", "(", "x", ")", "\n", "x", "=", "self", ".", "fc_final", "(", "x_bottleneck", ")", "\n", "# x = self.fc(x)", "\n", "\n", "return", "x", ",", "x_bottleneck", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.neural_texture.encoder.conv3x3": [[25, 29], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "groups", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.neural_texture.encoder.conv1x1": [[31, 34], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.neural_texture.mlp.MLP.__init__": [[9, 31], ["torch.nn.Module.__init__", "plan2scene.texture_gen.nets.core_modules.standard_block.Conv2dBlock", "torch.nn.ModuleList", "range", "plan2scene.texture_gen.nets.core_modules.standard_block.Conv2dBlock", "plan2scene.texture_gen.nets.core_modules.standard_block.Conv2dBlock", "mlp.MLP.res_blocks.append"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.models.ceiling.Ceiling.__init__"], ["    ", "def", "__init__", "(", "self", ",", "param", ",", "model_param", ")", ":", "\n", "\n", "        ", "super", "(", "MLP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "param", "=", "param", "\n", "self", ".", "n_featutres", "=", "model_param", ".", "n_max_features", "\n", "self", ".", "encoding", "=", "model_param", ".", "encoding", "\n", "self", ".", "noise", "=", "model_param", ".", "noise", "\n", "\n", "self", ".", "nf_out", "=", "model_param", ".", "shape_out", "[", "0", "]", "[", "0", "]", "\n", "self", ".", "nf_in", "=", "model_param", ".", "shape_in", "[", "0", "]", "[", "0", "]", "\n", "self", ".", "n_blocks", "=", "model_param", ".", "n_blocks", "\n", "self", ".", "bias", "=", "model_param", ".", "bias", "\n", "\n", "self", ".", "first_conv", "=", "Conv2dBlock", "(", "self", ".", "nf_in", ",", "self", ".", "n_featutres", ",", "1", ",", "1", ",", "0", ",", "None", ",", "model_param", ".", "non_linearity", ",", "model_param", ".", "dropout_ratio", ",", "bias", "=", "self", ".", "bias", ")", "\n", "\n", "self", ".", "res_blocks", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "for", "idx", "in", "range", "(", "self", ".", "n_blocks", ")", ":", "\n", "            ", "block_i", "=", "Conv2dBlock", "(", "self", ".", "n_featutres", ",", "self", ".", "n_featutres", ",", "1", ",", "1", ",", "0", ",", "None", ",", "model_param", ".", "non_linearity", ",", "model_param", ".", "dropout_ratio", ",", "bias", "=", "self", ".", "bias", ")", "\n", "self", ".", "res_blocks", ".", "append", "(", "block_i", ")", "\n", "\n", "", "self", ".", "last_conv", "=", "Conv2dBlock", "(", "self", ".", "n_featutres", ",", "self", ".", "nf_out", ",", "1", ",", "1", ",", "0", ",", "None", ",", "None", ",", "model_param", ".", "dropout_ratio", ",", "bias", "=", "self", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.neural_texture.mlp.MLP.forward": [[32, 42], ["mlp.MLP.first_conv", "enumerate", "mlp.MLP.last_conv", "block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "\n", "        ", "input_z", "=", "self", ".", "first_conv", "(", "input", ")", "\n", "output", "=", "input_z", "\n", "for", "idx", ",", "block", "in", "enumerate", "(", "self", ".", "res_blocks", ")", ":", "\n", "            ", "output", "=", "block", "(", "output", ")", "\n", "\n", "", "output", "=", "self", ".", "last_conv", "(", "output", ")", "\n", "\n", "return", "output", "", "", "", ""]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.neural_texture.texture_gen.TextureGen.__init__": [[15, 32], ["torch.nn.Module.__init__", "plan2scene.texture_gen.nets.neural_texture.encoder.ResNet", "plan2scene.texture_gen.nets.neural_texture.mlp.MLP", "plan2scene.texture_gen.custom_ops.noise.Noise", "torch.nn.Linear", "len"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.models.ceiling.Ceiling.__init__", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len"], ["def", "__init__", "(", "self", ",", "param", ")", ":", "\n", "        ", "\"\"\"\n        Initializes module.\n        :param param: Parameters specified.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "param", "=", "param", "\n", "self", ".", "image_res", "=", "param", ".", "image", ".", "image_res", "\n", "self", ".", "encoder", "=", "ResNet", "(", "param", ",", "param", ".", "system", ".", "arch", ".", "model_texture_encoder", ".", "model_params", ")", "\n", "self", ".", "decoder", "=", "MLP", "(", "param", ",", "param", ".", "system", ".", "arch", ".", "model_texture_decoder", ".", "model_params", ")", "\n", "self", ".", "substance_layer", "=", "None", "\n", "if", "param", ".", "system", ".", "arch", ".", "model_substance_classifier", ".", "model_params", ".", "available", ":", "\n", "            ", "self", ".", "substance_layer", "=", "nn", ".", "Linear", "(", "\n", "in_features", "=", "param", ".", "system", ".", "arch", ".", "model_texture_encoder", ".", "model_params", ".", "bottleneck_size", ",", "\n", "out_features", "=", "len", "(", "param", ".", "dataset", ".", "substances", ")", ")", "\n", "\n", "", "self", ".", "noise_sampler", "=", "Noise", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.neural_texture.texture_gen.TextureGen.forward": [[33, 93], ["texture_gen.TextureGen.unsqueeze().unsqueeze", "texture_gen.TextureGen.size", "position.reshape.reshape.size", "torch.split", "position.reshape.reshape.unsqueeze().expand", "position.reshape.reshape.permute", "plan2scene.transform_coord", "torch.arange", "torch.pow.reshape", "torch.pow.expand", "torch.pow", "position.reshape.reshape.unsqueeze().expand", "seed.reshape.reshape.unsqueeze().unsqueeze().expand", "position.reshape.reshape.reshape", "seed.reshape.reshape.reshape", "texture_gen.TextureGen.noise_sampler().to", "noise.reshape.reshape.reshape", "noise.reshape.reshape.permute", "noise.reshape.reshape.reshape", "torch.cat", "texture_gen.TextureGen.decoder", "torch.tanh", "texture_gen.TextureGen.encoder", "texture_gen.TextureGen.encoder.fc_final", "texture_gen.TextureGen.substance_layer", "z_encoding.expand.expand.view", "z_encoding.expand.expand.expand", "texture_gen.TextureGen.unsqueeze", "position.reshape.reshape.unsqueeze", "position.reshape.reshape.unsqueeze", "seed.reshape.reshape.unsqueeze().unsqueeze", "texture_gen.TextureGen.noise_sampler", "seed.reshape.reshape.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.neural_texture_helper.transform_coord"], ["", "def", "forward", "(", "self", ",", "image_gt", ":", "torch", ".", "Tensor", ",", "position", ":", "torch", ".", "Tensor", ",", "seed", ":", "torch", ".", "Tensor", ",", "weights_bottleneck", ":", "torch", ".", "Tensor", "=", "None", ")", "->", "tuple", ":", "\n", "        ", "\"\"\"\n        Forward pass. Uses weights_bottleneck if specified. Otherwise uses image_gt.\n        :param image_gt: Conditioned image.\n        :param position: Position field.\n        :param seed: Seed tensor.\n        :param weights_bottleneck: Optional. Bottleneck layer embeddings.\n        :return: tuple (synthesized texture, bottleneck embeddings, substance layer output)\n        \"\"\"", "\n", "\n", "if", "weights_bottleneck", "is", "None", ":", "\n", "            ", "weights", ",", "weights_bottleneck", "=", "self", ".", "encoder", "(", "image_gt", ")", "\n", "", "else", ":", "\n", "            ", "assert", "image_gt", "is", "None", "\n", "weights", "=", "self", ".", "encoder", ".", "fc_final", "(", "weights_bottleneck", ")", "\n", "\n", "", "weights", "=", "weights", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "bs", ",", "_", ",", "w_h", ",", "w_w", "=", "weights", ".", "size", "(", ")", "\n", "_", ",", "_", ",", "h", ",", "w", "=", "position", ".", "size", "(", ")", "\n", "\n", "transform_coeff", ",", "z_encoding", "=", "torch", ".", "split", "(", "weights", ",", "[", "self", ".", "param", ".", "texture", ".", "t", ",", "self", ".", "param", ".", "texture", ".", "e", "]", ",", "dim", "=", "1", ")", "\n", "\n", "substance_output", "=", "None", "\n", "if", "self", ".", "substance_layer", "is", "not", "None", ":", "\n", "            ", "substance_output", "=", "self", ".", "substance_layer", "(", "weights_bottleneck", ")", "\n", "\n", "", "if", "z_encoding", ".", "shape", "[", "2", "]", "==", "1", ":", "\n", "            ", "z_encoding", "=", "z_encoding", ".", "view", "(", "bs", ",", "self", ".", "param", ".", "texture", ".", "e", ",", "1", ",", "1", ")", "\n", "z_encoding", "=", "z_encoding", ".", "expand", "(", "bs", ",", "self", ".", "param", ".", "texture", ".", "e", ",", "self", ".", "image_res", ",", "self", ".", "image_res", ")", "\n", "\n", "", "position", "=", "position", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "bs", ",", "self", ".", "param", ".", "noise", ".", "octaves", ",", "self", ".", "param", ".", "dim", ",", "h", ",", "w", ")", "\n", "position", "=", "position", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "4", ",", "2", ")", "\n", "\n", "position", "=", "utils_nt", ".", "transform_coord", "(", "position", ",", "transform_coeff", ",", "self", ".", "param", ".", "dim", ")", "\n", "\n", "# multiply with 2**i to initiate octaves", "\n", "octave_factor", "=", "torch", ".", "arange", "(", "0", ",", "self", ".", "param", ".", "noise", ".", "octaves", ",", "device", "=", "self", ".", "param", ".", "device", ")", "\n", "octave_factor", "=", "octave_factor", ".", "reshape", "(", "1", ",", "self", ".", "param", ".", "noise", ".", "octaves", ",", "1", ",", "1", ",", "1", ")", "\n", "octave_factor", "=", "octave_factor", ".", "expand", "(", "1", ",", "self", ".", "param", ".", "noise", ".", "octaves", ",", "1", ",", "1", ",", "self", ".", "param", ".", "dim", ")", "\n", "octave_factor", "=", "torch", ".", "pow", "(", "2", ",", "octave_factor", ")", "\n", "position", "=", "position", "*", "octave_factor", "\n", "\n", "# position", "\n", "position", "=", "position", ".", "unsqueeze", "(", "2", ")", ".", "expand", "(", "bs", ",", "self", ".", "param", ".", "noise", ".", "octaves", ",", "self", ".", "param", ".", "texture", ".", "channels", ",", "h", ",", "w", ",", "\n", "self", ".", "param", ".", "dim", ")", "\n", "seed", "=", "seed", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "expand", "(", "bs", ",", "self", ".", "param", ".", "noise", ".", "octaves", ",", "self", ".", "param", ".", "texture", ".", "channels", ",", "h", ",", "w", ")", "\n", "position", "=", "position", ".", "reshape", "(", "bs", "*", "self", ".", "param", ".", "noise", ".", "octaves", "*", "self", ".", "param", ".", "texture", ".", "channels", "*", "h", "*", "w", ",", "self", ".", "param", ".", "dim", ")", "\n", "seed", "=", "seed", ".", "reshape", "(", "bs", "*", "self", ".", "param", ".", "noise", ".", "octaves", "*", "self", ".", "param", ".", "texture", ".", "channels", "*", "h", "*", "w", ")", "\n", "\n", "noise", "=", "self", ".", "noise_sampler", "(", "position", ",", "seed", ")", ".", "to", "(", "self", ".", "param", ".", "device", ")", "\n", "noise", "=", "noise", ".", "reshape", "(", "-", "1", ",", "bs", ",", "self", ".", "param", ".", "noise", ".", "octaves", ",", "self", ".", "param", ".", "texture", ".", "channels", ",", "h", ",", "w", ")", "\n", "noise", "=", "noise", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ",", "4", ",", "5", ")", "\n", "noise", "=", "noise", ".", "reshape", "(", "bs", ",", "self", ".", "param", ".", "noise", ".", "octaves", "*", "self", ".", "param", ".", "texture", ".", "channels", "*", "2", ",", "\n", "self", ".", "param", ".", "image", ".", "image_res", ",", "self", ".", "param", ".", "image", ".", "image_res", ")", "\n", "\n", "input_mlp", "=", "torch", ".", "cat", "(", "[", "z_encoding", ",", "noise", "]", ",", "dim", "=", "1", ")", "\n", "image_out", "=", "self", ".", "decoder", "(", "input_mlp", ")", "\n", "image_out", "=", "torch", ".", "tanh", "(", "image_out", ")", "\n", "\n", "return", "image_out", ",", "weights_bottleneck", ",", "substance_output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.core_modules.standard_block.StandardBlock.__init__": [[9, 58], ["torch.nn.Module.__init__", "plan2scene.texture_gen.nets.core_layers.normalization", "plan2scene.texture_gen.nets.core_layers.non_linearity", "plan2scene.texture_gen.nets.core_layers.non_linearity.", "dropout", "layer", "plan2scene.texture_gen.nets.core_layers.normalization.", "plan2scene.texture_gen.nets.core_layers.normalization.", "layer", "layer", "layer", "layer"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.models.ceiling.Ceiling.__init__", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.nets.core_layers.normalization", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.nets.core_layers.non_linearity"], ["    ", "def", "__init__", "(", "self", ",", "type", ",", "nf_in", ",", "nf_out", ",", "kernel_size", ",", "stride", ",", "padding", ",", "norm_type", "=", "None", ",", "activation_type", "=", "None", ",", "\n", "dropout_ratio", "=", "0.0", ",", "bias", "=", "True", ",", "padding_mode", "=", "'zeros'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "# shortcut if features have different size", "\n", "self", ".", "n_features_in", "=", "nf_in", "\n", "self", ".", "n_features_out", "=", "nf_out", "\n", "\n", "self", ".", "norm_type", "=", "norm_type", "\n", "self", ".", "bias", "=", "bias", "\n", "norm", "=", "normalization", "(", "norm_type", ")", "\n", "activation", "=", "non_linearity", "(", "activation_type", ")", "\n", "\n", "if", "type", "==", "'linear'", ":", "\n", "            ", "layer", "=", "torch", ".", "nn", ".", "Linear", "\n", "dropout", "=", "torch", ".", "nn", ".", "Dropout", "\n", "self", ".", "layer", "=", "layer", "(", "nf_in", ",", "nf_out", ",", "bias", ")", "\n", "\n", "", "elif", "type", "==", "'conv_2d'", ":", "\n", "            ", "layer", "=", "torch", ".", "nn", ".", "Conv2d", "\n", "dropout", "=", "torch", ".", "nn", ".", "Dropout2d", "\n", "self", ".", "layer", "=", "layer", "(", "nf_in", ",", "nf_out", ",", "kernel_size", ",", "stride", ",", "padding", ",", "bias", ",", "padding_mode", "=", "padding_mode", ")", "\n", "\n", "", "elif", "type", "==", "'conv_transpose_2d'", ":", "\n", "            ", "layer", "=", "torch", ".", "nn", ".", "ConvTranspose2d", "\n", "dropout", "=", "torch", ".", "nn", ".", "Dropout2d", "\n", "self", ".", "layer", "=", "layer", "(", "nf_in", ",", "nf_out", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "bias", ",", "\n", "padding_mode", "=", "padding_mode", ")", "\n", "\n", "", "elif", "type", "==", "'conv_3d'", ":", "\n", "            ", "layer", "=", "torch", ".", "nn", ".", "Conv3d", "\n", "dropout", "=", "torch", ".", "nn", ".", "Dropout3d", "\n", "self", ".", "layer", "=", "layer", "(", "nf_in", ",", "nf_out", ",", "kernel_size", ",", "stride", ",", "padding", ",", "bias", ",", "padding_mode", "=", "padding_mode", ")", "\n", "\n", "", "elif", "type", "==", "'conv_transpose_3d'", ":", "\n", "            ", "layer", "=", "torch", ".", "nn", ".", "ConvTranspose3d", "\n", "dropout", "=", "torch", ".", "nn", ".", "Dropout3d", "\n", "self", ".", "layer", "=", "layer", "(", "nf_in", ",", "nf_out", ",", "kernel_size", ",", "stride", ",", "padding", ",", "biaspadding_mode", "=", "padding_mode", ")", "\n", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "self", ".", "activation", "=", "activation", "(", ")", "\n", "self", ".", "dropout", "=", "dropout", "(", "dropout_ratio", ")", "\n", "\n", "if", "self", ".", "norm_type", "==", "'specular'", ":", "\n", "            ", "self", ".", "norm", "=", "norm", "(", "self", ".", "conv", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "norm", "=", "norm", "(", "nf_out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.core_modules.standard_block.StandardBlock.forward": [[59, 77], ["standard_block.StandardBlock.activation", "standard_block.StandardBlock.dropout", "standard_block.StandardBlock.norm", "standard_block.StandardBlock.layer", "standard_block.StandardBlock.norm", "standard_block.StandardBlock.layer"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input", ",", "style", "=", "None", ")", ":", "\n", "\n", "        ", "if", "self", ".", "norm_type", "==", "'specular'", ":", "\n", "            ", "output", "=", "self", ".", "norm", "(", "input", ")", "\n", "\n", "", "elif", "self", ".", "norm_type", "==", "'adain'", ":", "\n", "            ", "output", "=", "self", ".", "layer", "(", "input", ")", "\n", "\n", "output", "=", "self", ".", "norm", "(", "output", ",", "style", ")", "\n", "", "else", ":", "\n", "            ", "output", "=", "self", ".", "layer", "(", "input", ")", "\n", "\n", "# output = self.norm(output)", "\n", "\n", "", "output", "=", "self", ".", "activation", "(", "output", ")", "\n", "output", "=", "self", ".", "dropout", "(", "output", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.core_modules.standard_block.Conv2dBlock.__init__": [[80, 84], ["standard_block.StandardBlock.__init__"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.models.ceiling.Ceiling.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nf_in", ",", "nf_out", ",", "kernel_size", ",", "stride", ",", "padding", ",", "norm_type", "=", "None", ",", "activation_type", "=", "None", ",", "\n", "dropout_ratio", "=", "0.0", ",", "bias", "=", "True", ",", "padding_mode", "=", "'zeros'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "'conv_2d'", ",", "nf_in", ",", "nf_out", ",", "kernel_size", ",", "stride", ",", "padding", ",", "norm_type", ",", "activation_type", ",", "\n", "dropout_ratio", ",", "bias", ",", "padding_mode", "=", "padding_mode", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.crop_select.util.fill_texture_embeddings": [[12, 35], ["house.rooms.items", "isinstance", "range", "range", "os.exists", "os.join", "plan2scene.utils.io.load_image", "predictor.predict_embs", "plan2scene.common.image_description.ImageDescription", "os.join"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.io.load_image", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_gen.predictor.TextureGenPredictor.predict_embs"], ["def", "fill_texture_embeddings", "(", "conf", ":", "ConfigManager", ",", "house", ":", "House", ",", "predictor", ":", "TextureGenPredictor", ")", "->", "None", ":", "\n", "    ", "\"\"\"\n    Compute surface texture embeddings of a house\n    :param conf: Config Manager\n    :param house: House processed\n    :param predictor: Predictor with loaded checkpoint\n    \"\"\"", "\n", "for", "room_index", ",", "room", "in", "house", ".", "rooms", ".", "items", "(", ")", ":", "\n", "        ", "assert", "isinstance", "(", "room", ",", "Room", ")", "\n", "for", "photo", "in", "room", ".", "photos", ":", "\n", "            ", "for", "surface", "in", "conf", ".", "surfaces", ":", "\n", "                ", "surface_instances", "=", "[", "i", "for", "i", "in", "range", "(", "conf", ".", "texture_gen", ".", "masks_per_surface", "[", "surface", "]", ")", "]", "\n", "for", "surface_instance", "in", "surface_instances", ":", "\n", "                    ", "for", "crop_instance", "in", "range", "(", "conf", ".", "texture_gen", ".", "crops_per_mask", ")", ":", "\n", "                        ", "candidate_key", "=", "\"%s_%d_crop%d\"", "%", "(", "photo", ",", "surface_instance", ",", "crop_instance", ")", "\n", "if", "osp", ".", "exists", "(", "osp", ".", "join", "(", "conf", ".", "data_paths", ".", "rectified_crops_path", ",", "surface", ",", "candidate_key", "+", "\".png\"", ")", ")", ":", "\n", "                            ", "image", "=", "load_image", "(", "\n", "osp", ".", "join", "(", "conf", ".", "data_paths", ".", "rectified_crops_path", ",", "surface", ",", "candidate_key", "+", "\".png\"", ")", ")", "\n", "\n", "emb", ",", "loss", "=", "predictor", ".", "predict_embs", "(", "[", "image", "]", ")", "\n", "room", ".", "surface_textures", "[", "surface", "]", "[", "candidate_key", "]", "=", "ImageDescription", "(", "image", ",", "ImageSource", ".", "NEURAL_SYNTH", ")", "\n", "room", ".", "surface_embeddings", "[", "surface", "]", "[", "candidate_key", "]", "=", "emb", "\n", "room", ".", "surface_losses", "[", "surface", "]", "[", "candidate_key", "]", "=", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.crop_select.util.fill_house_textures": [[37, 64], ["house.rooms.items", "plan2scene.texture_gen.predictor.TextureGenPredictor", "plan2scene.texture_gen.predictor.TextureGenPredictor.load_checkpoint", "isinstance", "plan2scene.texture_gen.utils.io.load_conf_eval", "plan2scene.texture_gen.predictor.TextureGenPredictor.predict_textures", "plan2scene.common.image_description.ImageDescription"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.predictor.TexturePropPredictor.load_checkpoint", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.io.load_conf_eval", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_gen.predictor.TextureGenPredictor.predict_textures"], ["", "", "", "", "", "", "", "def", "fill_house_textures", "(", "conf", ":", "ConfigManager", ",", "house", ":", "House", ",", "image_source", ":", "ImageSource", ",", "skip_existing_textures", ":", "bool", ",", "key", "=", "\"prop\"", ",", "\n", "predictor", ":", "TextureGenPredictor", "=", "None", ")", "->", "None", ":", "\n", "    ", "\"\"\"\n    Synthesize textures for a house using the assigned texture embeddings.\n    :param conf: Config Manager\n    :param house: House to populate textures\n    :param key: Key of candidate texture embeddings.\n    :param image_source: Generator of the images\n    :param predictor: Predictor used to synthesize textures\n    :param skip_existing_textures: Do no synthesize if a texture already exist\n    \"\"\"", "\n", "if", "predictor", "is", "None", ":", "\n", "        ", "predictor", "=", "TextureGenPredictor", "(", "\n", "conf", "=", "load_conf_eval", "(", "config_path", "=", "conf", ".", "texture_gen", ".", "texture_synth_conf", ")", ",", "\n", "rgb_median_emb", "=", "conf", ".", "texture_gen", ".", "rgb_median_emb", ")", "\n", "predictor", ".", "load_checkpoint", "(", "checkpoint_path", "=", "conf", ".", "texture_gen", ".", "checkpoint_path", ")", "\n", "\n", "", "for", "room_index", ",", "room", "in", "house", ".", "rooms", ".", "items", "(", ")", ":", "\n", "        ", "assert", "isinstance", "(", "room", ",", "Room", ")", "\n", "for", "surface", "in", "room", ".", "surface_embeddings", ":", "\n", "            ", "if", "key", "in", "room", ".", "surface_embeddings", "[", "surface", "]", ":", "\n", "                ", "if", "skip_existing_textures", "and", "key", "in", "room", ".", "surface_textures", "[", "surface", "]", ":", "\n", "                    ", "continue", "\n", "", "generated_crops", ",", "substance_names", ",", "extra", "=", "predictor", ".", "predict_textures", "(", "\n", "combined_embs", "=", "[", "room", ".", "surface_embeddings", "[", "surface", "]", "[", "key", "]", "]", ",", "\n", "multiplier", "=", "conf", ".", "texture_gen", ".", "output_multiplier", ")", "\n", "room", ".", "surface_textures", "[", "surface", "]", "[", "key", "]", "=", "ImageDescription", "(", "generated_crops", "[", "0", "]", ",", "image_source", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.crop_select.util.fill_textures": [[66, 88], ["enumerate", "plan2scene.texture_gen.predictor.TextureGenPredictor", "plan2scene.texture_gen.predictor.TextureGenPredictor.load_checkpoint", "houses.items", "util.fill_house_textures", "logging.info", "plan2scene.texture_gen.utils.io.load_conf_eval", "len"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.predictor.TexturePropPredictor.load_checkpoint", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.crop_select.util.fill_house_textures", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.io.load_conf_eval", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len"], ["", "", "", "", "def", "fill_textures", "(", "conf", ":", "ConfigManager", ",", "houses", ":", "dict", ",", "image_source", ":", "ImageSource", ",", "skip_existing_textures", ":", "bool", ",", "key", ":", "str", "=", "\"prop\"", ",", "log", ":", "bool", "=", "True", ",", "\n", "predictor", ":", "TextureGenPredictor", "=", "None", ")", "->", "None", ":", "\n", "    ", "\"\"\"\n    Synthesize textures for houses using the assigned texture embeddings.\n    :param conf: Config manager\n    :param houses: Dictionary of houses.\n    :param image_source: Image source specified to the synthesized textures\n    :param skip_existing_textures: Specify true to keep existing textures. Specify false to replace existing textures with new textures.\n    :param key: Key of embeddings used to synthesize textures.\n    :param log: Set true to enable logging.\n    :param predictor: Predictor used to synthesize textures.\n    \"\"\"", "\n", "if", "predictor", "is", "None", ":", "\n", "        ", "predictor", "=", "TextureGenPredictor", "(", "\n", "conf", "=", "load_conf_eval", "(", "config_path", "=", "conf", ".", "texture_gen", ".", "texture_synth_conf", ")", ",", "\n", "rgb_median_emb", "=", "conf", ".", "texture_gen", ".", "rgb_median_emb", ")", "\n", "predictor", ".", "load_checkpoint", "(", "checkpoint_path", "=", "conf", ".", "texture_gen", ".", "checkpoint_path", ")", "\n", "\n", "", "for", "i", ",", "(", "house_key", ",", "house", ")", "in", "enumerate", "(", "houses", ".", "items", "(", ")", ")", ":", "\n", "        ", "if", "log", ":", "\n", "            ", "logging", ".", "info", "(", "\"[%d/%d] Generating Textures %s\"", "%", "(", "i", ",", "len", "(", "houses", ")", ",", "house_key", ")", ")", "\n", "", "fill_house_textures", "(", "conf", ",", "house", ",", "skip_existing_textures", "=", "skip_existing_textures", ",", "key", "=", "key", ",", "predictor", "=", "predictor", ",", "image_source", "=", "image_source", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.crop_select.util.get_least_key": [[90, 104], ["kv.items", "v.item", "v.item"], "function", ["None"], ["", "", "def", "get_least_key", "(", "kv", ")", ":", "\n", "    ", "\"\"\"\n    Given a dictionary, returns the key with minimum value.\n    :param kv: Dictionary considered.\n    :return: Key with the minimum value.\n    \"\"\"", "\n", "min_k", "=", "None", "\n", "min_v", "=", "None", "\n", "for", "k", ",", "v", "in", "kv", ".", "items", "(", ")", ":", "\n", "        ", "if", "min_v", "is", "None", "or", "v", ".", "item", "(", ")", "<", "min_v", ":", "\n", "            ", "min_k", "=", "k", "\n", "min_v", "=", "v", ".", "item", "(", ")", "\n", "\n", "", "", "return", "min_k", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.crop_select.util.vgg_crop_select": [[106, 126], ["house.rooms.items", "util.fill_textures", "isinstance", "util.get_least_key"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.crop_select.util.fill_textures", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.crop_select.util.get_least_key"], ["", "def", "vgg_crop_select", "(", "conf", ":", "ConfigManager", ",", "house", ":", "House", ",", "predictor", ":", "TextureGenPredictor", ")", "->", "None", ":", "\n", "    ", "\"\"\"\n    Assigns the least VGG loss crop for each surface of the house.\n    :param conf: ConfigManager\n    :param house: House to update\n    :param predictor: Predictor used to synthesize textures\n    \"\"\"", "\n", "for", "room_index", ",", "room", "in", "house", ".", "rooms", ".", "items", "(", ")", ":", "\n", "        ", "assert", "isinstance", "(", "room", ",", "Room", ")", "\n", "# Calculate the least VGG loss embeddings", "\n", "for", "surface", "in", "room", ".", "surface_embeddings", ":", "\n", "            ", "least_key", "=", "get_least_key", "(", "room", ".", "surface_losses", "[", "surface", "]", ")", "\n", "if", "least_key", "is", "not", "None", ":", "\n", "                ", "room", ".", "surface_embeddings", "[", "surface", "]", "=", "{", "\"prop\"", ":", "room", ".", "surface_embeddings", "[", "surface", "]", "[", "least_key", "]", "}", "\n", "room", ".", "surface_losses", "[", "surface", "]", "=", "{", "\"prop\"", ":", "room", ".", "surface_losses", "[", "surface", "]", "[", "least_key", "]", "}", "\n", "", "else", ":", "\n", "                ", "room", ".", "surface_embeddings", "[", "surface", "]", "=", "{", "}", "\n", "room", ".", "surface_losses", "[", "surface", "]", "=", "{", "}", "\n", "\n", "", "", "", "fill_textures", "(", "conf", ",", "{", "house", ".", "house_key", ":", "house", "}", ",", "predictor", "=", "predictor", ",", "log", "=", "False", ",", "image_source", "=", "ImageSource", ".", "VGG_CROP_SELECT", ",", "skip_existing_textures", "=", "False", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.evaluation.matchers.AbstractMatcher.__call__": [[16, 25], ["None"], "methods", ["None"], ["    ", "@", "abstractmethod", "\n", "def", "__call__", "(", "self", ",", "pred", ":", "Image", ".", "Image", ",", "gt_textures", ":", "dict", ")", "->", "tuple", ":", "\n", "        ", "\"\"\"\n        Invokes matcher.\n        :param pred: Predicted texture for a surface.\n        :param gt_textures: Dictionary containing ground truth references for the surface.\n        :return: Tuple of (Metric value, Matched ground truth image, True if the texture should be included in the evaluation.)\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.evaluation.matchers.PairedMatcher.__init__": [[32, 39], ["abc.ABC.__init__"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.models.ceiling.Ceiling.__init__"], ["def", "__init__", "(", "self", ",", "metric", ":", "AbstractPairedMetric", ")", ":", "\n", "        ", "\"\"\"\n        Initializes paired matcher.\n        :param metric: Metric used to evaluate.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "metric", "=", "metric", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.evaluation.matchers.PairedMatcher.__repr__": [[40, 42], ["str"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "str", "(", "self", ".", "metric", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.evaluation.matchers.PairedMatcher.__call__": [[43, 64], ["isinstance", "torch.no_grad", "isinstance", "matchers.PairedMatcher.metric", "len", "len", "list", "gt_textures.values"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.metric_description.MetricResult.metric", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len"], ["", "def", "__call__", "(", "self", ",", "pred", ":", "Image", ".", "Image", ",", "gt_textures", ":", "dict", ")", "->", "tuple", ":", "\n", "        ", "\"\"\"\n        Evaluates prediction (crop) against the gt reference in gt_textures.\n        :param pred: Prediction\n        :param gt_textures: Dictionary containing the gt texture. Should only contain a single ground truth texture.\n        :return: If success, return Tuple of metric result, ground truth texture, True. Else return None, None, False.\n        \"\"\"", "\n", "pred_texture", "=", "pred", "\n", "if", "isinstance", "(", "pred_texture", ",", "ImageDescription", ")", ":", "\n", "            ", "pred_texture", "=", "pred_texture", ".", "image", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "if", "len", "(", "gt_textures", ")", "==", "0", ":", "\n", "                ", "return", "None", ",", "None", ",", "False", "\n", "\n", "", "assert", "len", "(", "gt_textures", ")", "==", "1", "\n", "gt_texture", "=", "list", "(", "gt_textures", ".", "values", "(", ")", ")", "[", "0", "]", "\n", "if", "isinstance", "(", "gt_texture", ",", "ImageDescription", ")", ":", "\n", "                ", "gt_texture", "=", "gt_texture", ".", "image", "\n", "", "loss", "=", "self", ".", "metric", "(", "pred_texture", ",", "gt_texture", ")", "\n", "\n", "return", "loss", ",", "gt_texture", ",", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.evaluation.matchers.UnpairedMatcher.__init__": [[71, 78], ["abc.ABC.__init__"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.models.ceiling.Ceiling.__init__"], ["def", "__init__", "(", "self", ",", "metric", ":", "AbstractUnpairedMetric", ")", ":", "\n", "        ", "\"\"\"\n        Initializes unpaired matcher.\n        :param metric: Metric used\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "metric", "=", "metric", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.evaluation.matchers.UnpairedMatcher.__repr__": [[79, 81], ["str"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "str", "(", "self", ".", "metric", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.evaluation.matchers.UnpairedMatcher.__call__": [[82, 95], ["isinstance", "torch.no_grad", "matchers.UnpairedMatcher.metric"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.metric_description.MetricResult.metric"], ["", "def", "__call__", "(", "self", ",", "pred", ":", "Image", ",", "gt_textures", ":", "dict", ")", ":", "\n", "        ", "\"\"\"\n        Evaluates prediction (crop).\n        :param pred: Prediction\n        :param gt_textures: Dictionary containing the gt texture. Not used.\n        :return: return Tuple of metric result, None, True.\n        \"\"\"", "\n", "pred_texture", "=", "pred", "\n", "if", "isinstance", "(", "pred_texture", ",", "ImageDescription", ")", ":", "\n", "            ", "pred_texture", "=", "pred_texture", ".", "image", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "loss", "=", "self", ".", "metric", "(", "pred_texture", ")", "\n", "return", "loss", ",", "None", ",", "True", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.evaluation.metrics.AbstractPairedMetric.__call__": [[16, 25], ["None"], "methods", ["None"], ["@", "abstractmethod", "\n", "def", "__call__", "(", "self", ",", "pred_texture", ":", "Image", ".", "Image", ",", "gt_texture", ":", "Image", ".", "Image", ")", "->", "float", ":", "\n", "        ", "\"\"\"\n        Invokes paired metric.\n        :param pred_texture: Predicted texture.\n        :param gt_texture: Ground truth image.\n        :return: Computed score.\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.evaluation.metrics.AbstractUnpairedMetric.__call__": [[32, 40], ["None"], "methods", ["None"], ["@", "abstractmethod", "\n", "def", "__call__", "(", "self", ",", "pred_texture", ":", "Image", ".", "Image", ")", "->", "float", ":", "\n", "        ", "\"\"\"\n        Invokes the metric.\n        :param pred_texture: Predicted texture\n        :return: Computed score.\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.evaluation.metrics.FreqHistL1.__init__": [[47, 49], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.evaluation.metrics.FreqHistL1.__repr__": [[50, 52], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"Freq\"", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.evaluation.metrics.FreqHistL1.__call__": [[53, 62], ["compute_freq_hist_l1"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.metric_impl.freq_hist.compute_freq_hist_l1"], ["", "def", "__call__", "(", "self", ",", "pred_texture", ":", "Image", ".", "Image", ",", "gt_texture", ":", "Image", ".", "Image", ")", "->", "float", ":", "\n", "        ", "\"\"\"\n        Evaluates the predicted texture using the FREQ metric.\n        :param pred_texture: Predicted texture.\n        :param gt_texture: Ground truth reference image.\n        :return: Metric loss.\n        \"\"\"", "\n", "from", "plan2scene", ".", "evaluation", ".", "metric_impl", ".", "freq_hist", "import", "compute_freq_hist_l1", "\n", "return", "compute_freq_hist_l1", "(", "pred", "=", "pred_texture", ",", "gt", "=", "gt_texture", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.evaluation.metrics.TileabilityMean.__init__": [[69, 78], ["get_gaussian"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.metric_impl.tileability_mean_metric.get_gaussian"], ["def", "__init__", "(", "self", ",", "metric_param", ":", "Config", ")", ":", "\n", "        ", "\"\"\"\n        Initializes metric.\n        :param metric_param: Specify configuration of the metric.\n        \"\"\"", "\n", "from", "plan2scene", ".", "evaluation", ".", "metric_impl", ".", "tileability_mean_metric", "import", "get_gaussian", "\n", "self", ".", "kernel_size", "=", "metric_param", ".", "kernel_size", "\n", "self", ".", "std", "=", "metric_param", ".", "gaussian_std", "\n", "self", ".", "gaus", "=", "get_gaussian", "(", "sig", "=", "self", ".", "std", ",", "size", "=", "self", ".", "kernel_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.evaluation.metrics.TileabilityMean.__repr__": [[79, 81], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"Tile (%d)\"", "%", "self", ".", "kernel_size", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.evaluation.metrics.TileabilityMean.__call__": [[82, 91], ["compute_mean_tileability"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.metric_impl.tileability_mean_metric.compute_mean_tileability"], ["", "def", "__call__", "(", "self", ",", "pred_texture", ":", "Image", ".", "Image", ")", "->", "float", ":", "\n", "        ", "\"\"\"\n        Evaluates predicted texture using the TILE metric.\n        :param pred_texture:\n        :return: Metric loss.\n        \"\"\"", "\n", "from", "plan2scene", ".", "evaluation", ".", "metric_impl", ".", "tileability_mean_metric", "import", "compute_mean_tileability", "\n", "score", "=", "compute_mean_tileability", "(", "img", "=", "pred_texture", ",", "gaus", "=", "self", ".", "gaus", ")", "\n", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.evaluation.metrics.HSLHistL1.__init__": [[98, 105], ["generate_bins"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.metric_impl.color_hist.generate_bins"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Initialize COLOR metric.\n        \"\"\"", "\n", "from", "plan2scene", ".", "evaluation", ".", "metric_impl", ".", "color_hist", "import", "generate_bins", "\n", "self", ".", "bins", "=", "generate_bins", "(", ")", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.evaluation.metrics.HSLHistL1.__repr__": [[106, 108], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"Color\"", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.evaluation.metrics.HSLHistL1.__call__": [[109, 118], ["hsl_hist_l1"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.metric_impl.color_hist.hsl_hist_l1"], ["", "def", "__call__", "(", "self", ",", "pred_texture", ":", "Image", ".", "Image", ",", "gt_texture", ":", "Image", ".", "Image", ")", "->", "float", ":", "\n", "        ", "\"\"\"\n        Evaluates predicted texture using the COLOR metric.\n        :param pred_texture: Predicted texture.\n        :param gt_texture: Ground truth reference image.\n        :return: Metric loss.\n        \"\"\"", "\n", "from", "plan2scene", ".", "evaluation", ".", "metric_impl", ".", "color_hist", "import", "hsl_hist_l1", "\n", "return", "hsl_hist_l1", "(", "pred", "=", "pred_texture", ",", "gt", "=", "gt_texture", ",", "bins", "=", "self", ".", "bins", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.evaluation.metrics.ClassificationError.__init__": [[125, 131], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "classifier", ":", "SubstanceClassifier", ")", ":", "\n", "        ", "\"\"\"\n        Initializes SUBS metric.\n        :param classifier: Substance classifier used for evaluation purpose.\n        \"\"\"", "\n", "self", ".", "classifier", "=", "classifier", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.evaluation.metrics.ClassificationError.__repr__": [[132, 134], ["str"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "str", "(", "self", ".", "classifier", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.evaluation.metrics.ClassificationError.__call__": [[135, 148], ["metrics.ClassificationError.classifier.predict", "metrics.ClassificationError.classifier.predict"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.predictor.TexturePropPredictor.predict", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.predictor.TexturePropPredictor.predict"], ["", "def", "__call__", "(", "self", ",", "pred_texture", ",", "gt_texture", ")", ":", "\n", "        ", "\"\"\"\n        Evaluates predicted texture using the SUBS metric.\n        :param pred_texture: Predicted texture.\n        :param gt_texture: Ground truth texture.\n        :return: Metric loss.\n        \"\"\"", "\n", "pred_class", "=", "self", ".", "classifier", ".", "predict", "(", "pred_texture", ")", "\n", "gt_class", "=", "self", ".", "classifier", ".", "predict", "(", "gt_texture", ")", "\n", "if", "pred_class", "==", "gt_class", ":", "\n", "            ", "return", "0", "\n", "", "else", ":", "\n", "            ", "return", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.evaluation.metrics.CorrespondingPixelL1.__init__": [[155, 157], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.evaluation.metrics.CorrespondingPixelL1.__repr__": [[158, 160], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"Corresponding Pixel L1\"", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.evaluation.metrics.CorrespondingPixelL1.__call__": [[161, 172], ["torch.functional.l1_loss().item", "torch.functional.l1_loss().item", "torch.functional.l1_loss", "torch.functional.l1_loss", "torchvision.ToTensor", "pred_texture.convert", "torchvision.ToTensor"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "pred_texture", ":", "Image", ".", "Image", ",", "gt_texture", ":", "Image", ".", "Image", ")", "->", "float", ":", "\n", "        ", "\"\"\"\n        Measures corresponding pixel L1 distance between predicted texture and the ground truth image.\n        :param pred_texture: Predicted texture.\n        :param gt_texture: Ground truth image.\n        :return: Metric loss\n        \"\"\"", "\n", "pred_tf_unsigned", "=", "tfs", ".", "ToTensor", "(", ")", "(", "pred_texture", ".", "convert", "(", "\"RGB\"", ")", ")", ".", "unsqueeze", "(", "0", ")", "\n", "gt_tf_unsigned", "=", "tfs", ".", "ToTensor", "(", ")", "(", "gt_texture", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "return", "nn", ".", "functional", ".", "l1_loss", "(", "pred_tf_unsigned", ",", "gt_tf_unsigned", ")", ".", "item", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.evaluation.evaluator.EvalResult.__init__": [[15, 31], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "total_texture_loss", ":", "float", ",", "surface_count", ":", "int", ",", "house_room_surface_texture_loss_map", ":", "dict", ",", "\n", "surface_total_texture_loss_map", ":", "dict", ",", "surface_count_map", ":", "dict", ")", ":", "\n", "        ", "\"\"\"\n        Initialize eval results.\n        :param total_texture_loss: Total texture loss\n        :param surface_count: Number of surfaces contributed to loss\n        :param house_room_surface_texture_loss_map: Mapping from house_key -> room_index -> surface -> loss\n        :param surface_total_texture_loss_map: Mapping from surface -> loss. This accumulates loss from all surfaces of a particular type.\n        :param surface_count_map: Mapping from surface -> surface count.\n        \"\"\"", "\n", "self", ".", "total_texture_loss", "=", "total_texture_loss", "\n", "self", ".", "surface_count", "=", "surface_count", "\n", "self", ".", "house_room_surface_texture_loss_map", "=", "house_room_surface_texture_loss_map", "\n", "self", ".", "surface_total_texture_loss_map", "=", "surface_total_texture_loss_map", "\n", "self", ".", "surface_count_map", "=", "surface_count_map", "\n", "self", ".", "entries", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.evaluation.evaluator.EvalResult.get_summary": [[32, 44], ["None"], "methods", ["None"], ["", "def", "get_summary", "(", "self", ")", "->", "dict", ":", "\n", "        ", "\"\"\"\n        Return summary dictionary\n        :return: Summary dictionary\n        \"\"\"", "\n", "return", "{", "\n", "\"total_texture_loss\"", ":", "self", ".", "total_texture_loss", ",", "\n", "\"surface_count\"", ":", "self", ".", "surface_count", ",", "\n", "\"house_room_surface_texture_loss_map\"", ":", "self", ".", "house_room_surface_texture_loss_map", ",", "\n", "\"surface_total_texture_loss_map\"", ":", "self", ".", "surface_total_texture_loss_map", ",", "\n", "\"surface_count_map\"", ":", "self", ".", "surface_count_map", ",", "\n", "\"entries\"", ":", "self", ".", "entries", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.evaluation.evaluator.EvalResult.__repr__": [[46, 57], ["numpy.abs", "len", "plan2scene.utils.io.fraction_str", "plan2scene.utils.io.fraction_str", "plan2scene.utils.io.fraction_str", "plan2scene.utils.io.fraction_str", "numpy.sum().item", "numpy.sum"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.io.fraction_str", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.io.fraction_str", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.io.fraction_str", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.io.fraction_str"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "# Verify Average", "\n", "        ", "losses", "=", "[", "a", "[", "\"loss\"", "]", "for", "a", "in", "self", ".", "entries", "]", "\n", "assert", "np", ".", "abs", "(", "np", ".", "sum", "(", "losses", ")", ".", "item", "(", ")", "-", "self", ".", "total_texture_loss", ")", "<", "0.00001", "\n", "assert", "len", "(", "losses", ")", "==", "self", ".", "surface_count", "\n", "\n", "return", "\"%s\\t Floor: %s\\t Wall: %s\\t Ceiling: %s\"", "%", "(", "\n", "fraction_str", "(", "self", ".", "total_texture_loss", ",", "self", ".", "surface_count", ")", ",", "\n", "fraction_str", "(", "self", ".", "surface_total_texture_loss_map", "[", "\"floor\"", "]", ",", "self", ".", "surface_count_map", "[", "\"floor\"", "]", ")", ",", "\n", "fraction_str", "(", "self", ".", "surface_total_texture_loss_map", "[", "\"wall\"", "]", ",", "self", ".", "surface_count_map", "[", "\"wall\"", "]", ")", ",", "\n", "fraction_str", "(", "self", ".", "surface_total_texture_loss_map", "[", "\"ceiling\"", "]", ",", "self", ".", "surface_count_map", "[", "\"ceiling\"", "]", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.evaluation.evaluator.EvalResult.get_house_results": [[59, 79], ["evaluator.EvalResult.new", "house_results.items", "room.items"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.evaluation.evaluator.EvalResult.new"], ["", "def", "get_house_results", "(", "self", ",", "house_key", ":", "str", ")", ":", "\n", "        ", "\"\"\"\n        Separate results specific to a house.\n        :param house_key: House key of the interested house.\n        :return: Results of the specified house.\n        \"\"\"", "\n", "eval_results", "=", "EvalResult", ".", "new", "(", ")", "\n", "if", "house_key", "not", "in", "self", ".", "house_room_surface_texture_loss_map", ":", "\n", "            ", "return", "None", "\n", "", "house_results", "=", "self", ".", "house_room_surface_texture_loss_map", "[", "house_key", "]", "\n", "eval_results", ".", "house_room_surface_texture_loss_map", "=", "{", "house_key", ":", "house_results", "}", "\n", "\n", "for", "room_index", ",", "room", "in", "house_results", ".", "items", "(", ")", ":", "\n", "            ", "for", "surface", ",", "loss", "in", "room", ".", "items", "(", ")", ":", "\n", "                ", "eval_results", ".", "total_texture_loss", "+=", "loss", "\n", "eval_results", ".", "surface_count", "+=", "1", "\n", "eval_results", ".", "surface_count_map", "[", "surface", "]", "+=", "1", "\n", "eval_results", ".", "surface_total_texture_loss_map", "[", "surface", "]", "+=", "loss", "\n", "", "", "eval_results", ".", "entries", "=", "[", "a", "for", "a", "in", "self", ".", "entries", "if", "a", "[", "\"house_key\"", "]", "==", "house_key", "]", "\n", "return", "eval_results", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.evaluation.evaluator.EvalResult.new": [[80, 89], ["evaluator.EvalResult"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "new", "(", "cls", ")", ":", "\n", "        ", "\"\"\"\n        Initializes a new EvalResults with empty data.\n        :return: EvalResults\n        \"\"\"", "\n", "return", "EvalResult", "(", "total_texture_loss", "=", "0", ",", "surface_count", "=", "0", ",", "house_room_surface_texture_loss_map", "=", "{", "}", ",", "\n", "surface_total_texture_loss_map", "=", "{", "\"floor\"", ":", "0", ",", "\"wall\"", ":", "0", ",", "\"ceiling\"", ":", "0", "}", ",", "\n", "surface_count_map", "=", "{", "\"floor\"", ":", "0", ",", "\"wall\"", ":", "0", ",", "\"ceiling\"", ":", "0", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.evaluation.evaluator.EvalResult.append_results": [[90, 119], ["evaluator.EvalResult.entries.append"], "methods", ["None"], ["", "def", "append_results", "(", "self", ",", "texture_loss", ",", "surface", ":", "str", ",", "house_key", ":", "str", ",", "room_index", ":", "int", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Append metrics of a room surface.\n        :param texture_loss: Loss computed for the surface\n        :param surface: Considered surface type.\n        :param house_key: House key of considered house.\n        :param room_index: Index of considered room.\n        \"\"\"", "\n", "self", ".", "total_texture_loss", "+=", "texture_loss", "\n", "self", ".", "surface_count", "+=", "1", "\n", "self", ".", "surface_count_map", "[", "surface", "]", "+=", "1", "\n", "self", ".", "surface_total_texture_loss_map", "[", "surface", "]", "+=", "texture_loss", "\n", "\n", "if", "house_key", "not", "in", "self", ".", "house_room_surface_texture_loss_map", ":", "\n", "            ", "self", ".", "house_room_surface_texture_loss_map", "[", "house_key", "]", "=", "{", "}", "\n", "", "room_surface_texture_loss_map", "=", "self", ".", "house_room_surface_texture_loss_map", "[", "house_key", "]", "\n", "\n", "if", "room_index", "not", "in", "room_surface_texture_loss_map", ":", "\n", "            ", "room_surface_texture_loss_map", "[", "room_index", "]", "=", "{", "}", "\n", "\n", "", "surface_texture_loss_map", "=", "room_surface_texture_loss_map", "[", "room_index", "]", "\n", "\n", "assert", "surface", "not", "in", "surface_texture_loss_map", "\n", "surface_texture_loss_map", "[", "surface", "]", "=", "texture_loss", "\n", "self", ".", "entries", ".", "append", "(", "{", "\n", "\"loss\"", ":", "texture_loss", ",", "\n", "\"surface\"", ":", "surface", ",", "\n", "\"house_key\"", ":", "house_key", ",", "\n", "\"room_index\"", ":", "room_index", "\n", "}", ")", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.evaluation.evaluator.evaluate_surface": [[122, 148], ["evaluator.EvalResult.new", "matcher", "EvalResult.new.append_results"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.evaluation.evaluator.EvalResult.new", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.evaluation.evaluator.EvalResult.append_results"], ["", "", "def", "evaluate_surface", "(", "house_key", ",", "room_index", ",", "surface_name", ":", "str", ",", "pred_textures", ":", "map", ",", "gt_textures", ":", "map", ",", "\n", "matcher", ":", "AbstractMatcher", ",", "eval_results", ":", "EvalResult", "=", "None", ",", "\n", "key", ":", "str", "=", "\"prop\"", ")", ":", "\n", "    ", "\"\"\"\n    Evaluates texture prediction of a surface. Update eval results (if specified). Return eval results.\n    :param house_key: Key of the concerned house.\n    :param room_index: Index of the concerned room.\n    :param surface_name: Surface name.\n    :param pred_textures: Predicted textures for the surface.\n    :param gt_textures: Ground truth textures for the surface.\n    :param matcher: Matcher used to match ground prediction with ground truth.\n    :param eval_results: Optional. Eval results to update.\n    :param key: Key used to identify the predictions.\n    :return: Updated eval results.\n    \"\"\"", "\n", "if", "eval_results", "is", "None", ":", "\n", "        ", "eval_results", "=", "EvalResult", ".", "new", "(", ")", "\n", "\n", "", "if", "key", "in", "pred_textures", ":", "\n", "        ", "pred", "=", "pred_textures", "[", "key", "]", "\n", "texture_loss", ",", "gt_match", ",", "matched", "=", "matcher", "(", "pred", ",", "gt_textures", ")", "\n", "if", "matched", ":", "\n", "            ", "eval_results", ".", "append_results", "(", "texture_loss", "=", "texture_loss", ",", "surface", "=", "surface_name", ",", "house_key", "=", "house_key", ",", "\n", "room_index", "=", "room_index", ")", "\n", "\n", "", "", "return", "eval_results", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.evaluation.evaluator.eval_room": [[150, 176], ["isinstance", "isinstance", "evaluator.EvalResult.new", "evaluator.evaluate_surface"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.evaluation.evaluator.EvalResult.new", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.evaluation.evaluator.evaluate_surface"], ["", "def", "eval_room", "(", "conf", ":", "ConfigManager", ",", "house_key", ":", "str", ",", "pred_room", ":", "Room", ",", "gt_room", ":", "Room", ",", "matcher", ":", "AbstractMatcher", ",", "\n", "eval_results", ":", "EvalResult", "=", "None", ",", "key", ":", "str", "=", "\"prop\"", ")", ":", "\n", "    ", "\"\"\"\n    Evaluate texture predictions of a given room. Update eval results (if specified). Return eval results.\n    :param conf: Config manager.\n    :param house_key: Key of the house.\n    :param pred_room: Room with predicted textures.\n    :param gt_room: Room with ground truth references.\n    :param matcher: Matcher used to match ground truth with predictions.\n    :param eval_results: Optional. Eval results to update.\n    :param key: Key used to identify predictions.\n    :return: Updated eval results\n    \"\"\"", "\n", "if", "eval_results", "is", "None", ":", "\n", "        ", "eval_results", "=", "EvalResult", ".", "new", "(", ")", "\n", "\n", "", "assert", "isinstance", "(", "pred_room", ",", "Room", ")", "\n", "assert", "isinstance", "(", "gt_room", ",", "Room", ")", "\n", "\n", "assert", "pred_room", ".", "room_index", "==", "gt_room", ".", "room_index", "\n", "\n", "for", "surf", "in", "conf", ".", "surfaces", ":", "\n", "        ", "evaluate_surface", "(", "house_key", ",", "pred_room", ".", "room_index", ",", "surf", ",", "pred_room", ".", "surface_textures", "[", "surf", "]", ",", "\n", "gt_room", ".", "surface_textures", "[", "surf", "]", ",", "\n", "matcher", ",", "eval_results", ",", "key", ")", "\n", "", "return", "eval_results", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.evaluation.evaluator.eval_house": [[178, 202], ["pred_house.rooms.items", "evaluator.EvalResult.new", "evaluator.eval_room"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.evaluation.evaluator.EvalResult.new", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.evaluation.evaluator.eval_room"], ["", "def", "eval_house", "(", "conf", ":", "ConfigManager", ",", "pred_house", ":", "House", ",", "gt_house", ":", "House", ",", "matcher", ":", "AbstractMatcher", ",", "\n", "eval_results", ":", "EvalResult", "=", "None", ",", "key", ":", "str", "=", "\"prop\"", ")", ":", "\n", "    ", "\"\"\"\n    Evaluate a house. Update eval results (if specified). Return eval results.\n    :param conf: Config manager\n    :param pred_house: House with predicted textures.\n    :param gt_house: House with ground truth reference crops.\n    :param matcher: Matcher used to match ground truth with predictions.\n    :param eval_results: Optional. Eval results to update.\n    :param key: Key used to identify predictions.\n    :return: Updated eval results.\n    \"\"\"", "\n", "if", "eval_results", "is", "None", ":", "\n", "        ", "eval_results", "=", "EvalResult", ".", "new", "(", ")", "\n", "\n", "", "assert", "pred_house", ".", "house_key", "==", "gt_house", ".", "house_key", "\n", "\n", "for", "room_index", ",", "pred_room", "in", "pred_house", ".", "rooms", ".", "items", "(", ")", ":", "\n", "        ", "gt_room", "=", "gt_house", ".", "rooms", "[", "room_index", "]", "\n", "\n", "eval_room", "(", "conf", "=", "conf", ",", "house_key", "=", "pred_house", ".", "house_key", ",", "pred_room", "=", "pred_room", ",", "gt_room", "=", "gt_room", ",", "matcher", "=", "matcher", ",", "\n", "eval_results", "=", "eval_results", ",", "key", "=", "key", ")", "\n", "\n", "", "return", "eval_results", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.evaluation.evaluator.evaluate": [[204, 226], ["evaluator.EvalResult.new", "enumerate", "pred_houses.items", "evaluator.eval_house", "logging.info", "len"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.evaluation.evaluator.EvalResult.new", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.evaluation.evaluator.eval_house", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len"], ["", "def", "evaluate", "(", "conf", ":", "ConfigManager", ",", "pred_houses", ":", "dict", ",", "gt_houses", ":", "dict", ",", "matcher", ":", "AbstractMatcher", ",", "key", ":", "str", "=", "\"prop\"", ",", "\n", "log", ":", "bool", "=", "True", ")", "->", "EvalResult", ":", "\n", "    ", "\"\"\"\n    Evaluate a list of houses.\n    :param conf: Config manager\n    :param pred_houses: Dictionary of houses with predicted textures.\n    :param gt_houses: Dictionary of houses with ground truth reference.\n    :param matcher: Matcher used to match ground truth with predictions.\n    :param key: Key used to identify predictions.\n    :param log: Specify true to log progress.\n    :return: Eval results.\n    \"\"\"", "\n", "eval_results", "=", "EvalResult", ".", "new", "(", ")", "\n", "\n", "for", "i", ",", "(", "house_key", ",", "pred_house", ")", "in", "enumerate", "(", "pred_houses", ".", "items", "(", ")", ")", ":", "\n", "        ", "if", "log", ":", "\n", "            ", "logging", ".", "info", "(", "\"[%d/%d] Evaluating %s\"", "%", "(", "i", ",", "len", "(", "pred_houses", ")", ",", "house_key", ")", ")", "\n", "", "gt_house", "=", "gt_houses", "[", "house_key", "]", "\n", "eval_house", "(", "conf", "=", "conf", ",", "pred_house", "=", "pred_house", ",", "gt_house", "=", "gt_house", ",", "matcher", "=", "matcher", ",", "key", "=", "key", ",", "\n", "eval_results", "=", "eval_results", ")", "\n", "\n", "", "return", "eval_results", "\n", "", ""]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.metric_impl.tileability_mean_metric.image_fft": [[9, 17], ["numpy.fft.fftshift", "numpy.fft.fft2"], "function", ["None"], ["def", "image_fft", "(", "image_np", ":", "np", ".", "ndarray", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "\"\"\"\n    Computes FFT of an image\n    :param image_np: Image to compute fft.\n    :return: FFT of the image.\n    \"\"\"", "\n", "image_fft_shift", "=", "np", ".", "fft", ".", "fftshift", "(", "np", ".", "fft", ".", "fft2", "(", "image_np", ")", ")", "\n", "return", "image_fft_shift", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.metric_impl.tileability_mean_metric.image_ifft": [[19, 26], ["numpy.abs", "numpy.fft.ifft2", "numpy.fft.ifftshift"], "function", ["None"], ["", "def", "image_ifft", "(", "image_fft", ":", "np", ".", "ndarray", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "\"\"\"\n    Compute inverse FFT of an image.\n    :param image_fft: FFT image\n    :return: Invert FFT image.\n    \"\"\"", "\n", "return", "np", ".", "abs", "(", "np", ".", "fft", ".", "ifft2", "(", "np", ".", "fft", ".", "ifftshift", "(", "image_fft", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.metric_impl.tileability_mean_metric.get_gaussian": [[28, 43], ["numpy.linspace", "numpy.meshgrid", "numpy.exp", "numpy.abs", "numpy.sum", "numpy.square", "numpy.square", "numpy.square"], "function", ["None"], ["", "def", "get_gaussian", "(", "sig", ":", "float", ",", "size", ":", "int", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "\"\"\"\n    Creates gaussian kernel with side length 'size' and a sigma of 'sig'.\n    Source: https://stackoverflow.com/questions/29731726/how-to-calculate-a-gaussian-kernel-matrix-efficiently-in-numpy\n    \"\"\"", "\n", "l", "=", "size", "\n", "ax", "=", "np", ".", "linspace", "(", "-", "(", "l", "-", "1", ")", "/", "2.", ",", "(", "l", "-", "1", ")", "/", "2.", ",", "l", ")", "\n", "xx", ",", "yy", "=", "np", ".", "meshgrid", "(", "ax", ",", "ax", ")", "\n", "\n", "kernel", "=", "np", ".", "exp", "(", "-", "0.5", "*", "(", "np", ".", "square", "(", "xx", ")", "+", "np", ".", "square", "(", "yy", ")", ")", "/", "np", ".", "square", "(", "sig", ")", ")", "\n", "kernel", "=", "kernel", "/", "np", ".", "sum", "(", "kernel", ")", "\n", "kernel", "[", "size", "//", "2", ",", "size", "//", "2", "]", "=", "0", "\n", "kernel", "=", "np", ".", "abs", "(", "kernel", ")", "\n", "\n", "return", "kernel", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.metric_impl.tileability_mean_metric.compute_mean_tileability": [[45, 59], ["img.convert", "tileability_mean_metric.image_fft", "numpy.linalg.norm", "numpy.array", "numpy.reshape"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.metric_impl.tileability_mean_metric.image_fft"], ["", "def", "compute_mean_tileability", "(", "img", ":", "Image", ".", "Image", ",", "gaus", ":", "np", ".", "ndarray", ")", ":", "\n", "    ", "\"\"\"\n    Computes TILE metric.\n    :param img: Predicted texture.\n    :param gaus: Gaussian kernel\n    :return: Metric value\n    \"\"\"", "\n", "img_gray", "=", "img", ".", "convert", "(", "\"L\"", ")", "\n", "\n", "img_fft", "=", "image_fft", "(", "np", ".", "array", "(", "img_gray", ")", ")", "\n", "image_fft_blured", "=", "img_fft", "*", "gaus", "\n", "score", "=", "np", ".", "linalg", ".", "norm", "(", "np", ".", "reshape", "(", "image_fft_blured", ",", "(", "image_fft_blured", ".", "shape", "[", "0", "]", "*", "image_fft_blured", ".", "shape", "[", "1", "]", ",", ")", ")", ",", "\n", "ord", "=", "2", ")", "\n", "return", "score", "\n", "", ""]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.metric_impl.color_hist.generate_bins": [[10, 25], ["range", "bins.append"], "function", ["None"], ["def", "generate_bins", "(", ")", "->", "list", ":", "\n", "    ", "\"\"\"\n    Generate color bins.\n    :return: List of bins\n    \"\"\"", "\n", "h_bins", "=", "[", "(", "x", "/", "10.0", ",", "(", "x", "+", "1", ")", "/", "10.0", ")", "for", "x", "in", "range", "(", "0", ",", "10", ")", "]", "\n", "h_bins", "[", "-", "1", "]", "=", "(", "h_bins", "[", "-", "1", "]", "[", "0", "]", ",", "1.1", ")", "\n", "s_bins", "=", "[", "(", "0.0", ",", "0.333", ")", ",", "(", "0.333", ",", "0.666", ")", ",", "(", "0.666", ",", "1.1", ")", "]", "\n", "l_bins", "=", "[", "(", "0.0", ",", "0.333", ")", ",", "(", "0.333", ",", "0.666", ")", ",", "(", "0.666", ",", "1.1", ")", "]", "\n", "bins", "=", "[", "]", "\n", "for", "h_bin", "in", "h_bins", ":", "\n", "        ", "for", "s_bin", "in", "s_bins", ":", "\n", "            ", "for", "l_bin", "in", "l_bins", ":", "\n", "                ", "bins", ".", "append", "(", "(", "h_bin", ",", "s_bin", ",", "l_bin", ")", ")", "\n", "", "", "", "return", "bins", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.metric_impl.color_hist.to_hsl": [[27, 39], ["img.convert", "numpy.vectorize", "np.vectorize.", "numpy.concatenate", "numpy.array", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims"], "function", ["None"], ["", "def", "to_hsl", "(", "img", ":", "Image", ".", "Image", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "\"\"\"\n    Converts an image to HSL format and return as a numpy array.\n    :param img: Image to convert\n    :return: Converted image.\n    \"\"\"", "\n", "img_rgb", "=", "img", ".", "convert", "(", "\"RGB\"", ")", "\n", "img_rgb_np", "=", "np", ".", "array", "(", "img_rgb", ")", "/", "255.0", "\n", "rgb_hls", "=", "np", ".", "vectorize", "(", "colorsys", ".", "rgb_to_hls", ")", "\n", "np_h", ",", "np_l", ",", "np_s", "=", "rgb_hls", "(", "r", "=", "img_rgb_np", "[", ":", ",", ":", ",", "0", "]", ",", "g", "=", "img_rgb_np", "[", ":", ",", ":", ",", "1", "]", ",", "b", "=", "img_rgb_np", "[", ":", ",", ":", ",", "2", "]", ")", "\n", "img_hsl_np", "=", "np", ".", "concatenate", "(", "[", "np", ".", "expand_dims", "(", "np_h", ",", "2", ")", ",", "np", ".", "expand_dims", "(", "np_s", ",", "2", ")", ",", "np", ".", "expand_dims", "(", "np_l", ",", "2", ")", "]", ",", "axis", "=", "2", ")", "\n", "return", "img_hsl_np", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.metric_impl.color_hist.compute_histogram": [[41, 57], ["numpy.array", "numpy.logical_and().sum", "freqs.append", "numpy.logical_and", "numpy.logical_and", "numpy.logical_and", "numpy.logical_and", "numpy.logical_and"], "function", ["None"], ["", "def", "compute_histogram", "(", "img_hsl_np", ":", "np", ".", "ndarray", ",", "bins", ":", "list", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "\"\"\"\n    Computes HSL histogram for a given image in HSL color space.\n    :param img_hsl_np: Image in HSL color space.\n    :param bins: Bin specification.\n    :return: Histogram\n    \"\"\"", "\n", "freqs", "=", "[", "]", "\n", "for", "h_bound", ",", "s_bound", ",", "l_bound", "in", "bins", ":", "\n", "        ", "count", "=", "np", ".", "logical_and", "(", "\n", "np", ".", "logical_and", "(", "\n", "np", ".", "logical_and", "(", "img_hsl_np", "[", ":", ",", ":", ",", "0", "]", ">=", "h_bound", "[", "0", "]", ",", "img_hsl_np", "[", ":", ",", ":", ",", "0", "]", "<", "h_bound", "[", "1", "]", ")", ",", "\n", "np", ".", "logical_and", "(", "img_hsl_np", "[", ":", ",", ":", ",", "1", "]", ">=", "s_bound", "[", "0", "]", ",", "img_hsl_np", "[", ":", ",", ":", ",", "1", "]", "<", "s_bound", "[", "1", "]", ")", ")", ",", "\n", "np", ".", "logical_and", "(", "img_hsl_np", "[", ":", ",", ":", ",", "2", "]", ">=", "l_bound", "[", "0", "]", ",", "img_hsl_np", "[", ":", ",", ":", ",", "2", "]", "<", "l_bound", "[", "1", "]", ")", ")", ".", "sum", "(", ")", "\n", "freqs", ".", "append", "(", "count", ")", "\n", "", "return", "np", ".", "array", "(", "freqs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.metric_impl.color_hist.hsl_hist_l1": [[59, 72], ["color_hist.compute_histogram", "color_hist.compute_histogram", "color_hist.to_hsl", "color_hist.to_hsl", "numpy.sum", "numpy.abs"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.metric_impl.freq_hist.compute_histogram", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.metric_impl.freq_hist.compute_histogram", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.metric_impl.color_hist.to_hsl", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.metric_impl.color_hist.to_hsl"], ["", "def", "hsl_hist_l1", "(", "pred", ":", "Image", ",", "gt", ":", "Image", ",", "bins", ":", "list", ")", ":", "\n", "    ", "\"\"\"\n    Compute COLOR metric between prediction and ground truth using the specified bins.\n    :param pred: Predicted texture\n    :param gt: Ground truth texture\n    :param bins: Bin specification returned from generate_bins\n    :return: Metric value.\n    \"\"\"", "\n", "pred_hist", "=", "compute_histogram", "(", "to_hsl", "(", "pred", ")", ",", "bins", ")", "\n", "gt_hist", "=", "compute_histogram", "(", "to_hsl", "(", "gt", ")", ",", "bins", ")", "\n", "dif", "=", "gt_hist", "-", "pred_hist", "\n", "score", "=", "np", ".", "sum", "(", "np", ".", "abs", "(", "dif", ")", ")", "/", "(", "2.0", "*", "pred", ".", "width", "*", "pred", ".", "height", ")", "\n", "return", "score", "\n", "", ""]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.metric_impl.freq_hist.getPSD1D": [[7, 25], ["numpy.hypot().astype", "scipy.ndimage.mean", "numpy.hypot", "numpy.arange"], "function", ["None"], ["def", "getPSD1D", "(", "psd2D", ":", "np", ".", "ndarray", ")", "->", "np", ".", "ndarray", ":", "\n", "# Source: https://medium.com/tangibit-studios/2d-spectrum-characterization-e288f255cc59", "\n", "    ", "h", "=", "psd2D", ".", "shape", "[", "0", "]", "\n", "w", "=", "psd2D", ".", "shape", "[", "1", "]", "\n", "wc", "=", "w", "//", "2", "\n", "hc", "=", "h", "//", "2", "\n", "\n", "# create an array of integer radial distances from the center", "\n", "Y", ",", "X", "=", "np", ".", "ogrid", "[", "0", ":", "h", ",", "0", ":", "w", "]", "\n", "r", "=", "np", ".", "hypot", "(", "X", "-", "wc", ",", "Y", "-", "hc", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "\n", "# SUM all psd2D pixels with label 'r' for 0<=r<=wc", "\n", "# NOTE: this will miss power contributions in 'corners' r>wc", "\n", "psd1D", "=", "ndimage", ".", "mean", "(", "psd2D", ",", "r", ",", "index", "=", "np", ".", "arange", "(", "0", ",", "wc", ")", ")", "\n", "\n", "# Set DC to zero", "\n", "psd1D", "[", "0", "]", "=", "0", "\n", "return", "psd1D", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.metric_impl.freq_hist.compute_histogram": [[27, 42], ["moisan2011.per", "numpy.abs().astype", "numpy.fft.fftshift", "freq_hist.getPSD1D", "numpy.array", "numpy.fft.fft2", "numpy.abs", "texture.convert", "numpy.abs"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.metric_impl.freq_hist.getPSD1D"], ["", "def", "compute_histogram", "(", "texture", ":", "Image", ".", "Image", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "\"\"\"\n    Compute frequency histogram for a given image.\n    :param texture: Image to compute the histogram.\n    :return: Frequency histogram computed on texture.\n    \"\"\"", "\n", "img", ",", "_", "=", "per", "(", "np", ".", "array", "(", "texture", ".", "convert", "(", "\"L\"", ")", ")", ")", "\n", "\n", "np_img", "=", "np", ".", "abs", "(", "img", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "np_img_c", "=", "np_img", "[", ":", ",", ":", "]", "\n", "f", "=", "np", ".", "fft", ".", "fft2", "(", "np_img_c", ",", "norm", "=", "None", ")", "/", "(", "texture", ".", "width", "*", "texture", ".", "height", ")", "\n", "f_shift", "=", "np", ".", "fft", ".", "fftshift", "(", "f", ")", "\n", "\n", "hist", "=", "getPSD1D", "(", "np", ".", "abs", "(", "f_shift", ")", ")", "\n", "return", "hist", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.metric_impl.freq_hist.compute_freq_hist_l1": [[44, 57], ["freq_hist.compute_histogram", "freq_hist.compute_histogram", "numpy.mean", "numpy.abs"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.metric_impl.freq_hist.compute_histogram", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.metric_impl.freq_hist.compute_histogram"], ["", "def", "compute_freq_hist_l1", "(", "pred", ":", "Image", ".", "Image", ",", "gt", ":", "Image", ".", "Image", ")", ":", "\n", "    ", "\"\"\"\n    Compute FREQ metric between given predicted image and the ground truth image.\n    :param pred: Prediction image\n    :param gt: Ground truth image\n    :return: FREQ metric.\n    \"\"\"", "\n", "pred_hist", "=", "compute_histogram", "(", "pred", ")", "\n", "gt_hist", "=", "compute_histogram", "(", "gt", ")", "\n", "\n", "dif_hist", "=", "gt_hist", "-", "pred_hist", "\n", "total_abs_difference_pos", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "dif_hist", ")", ")", "\n", "return", "total_abs_difference_pos", "\n", "", ""]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.substance_classifier.dataset.SubstanceCropDataset.__init__": [[21, 80], ["torchvision.transforms.Compose", "logging.info", "numpy.random.shuffle", "additional_transforms.append", "additional_transforms.append", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "logging.info", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.RandomVerticalFlip", "torchvision.transforms.Compose", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "dataset.SubstanceCropDataset.entries.append", "dataset.SubstanceCropDataset.entries.append", "file.split", "os.join", "os.join", "dataset.map_label", "file.split", "os.join", "os.join", "dataset.map_label", "[].endswith", "[].endswith", "os.splitext", "os.splitext", "os.splitext", "os.splitext"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.substance_classifier.dataset.map_label", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.substance_classifier.dataset.map_label"], ["def", "__init__", "(", "self", ",", "os_dataset_path", ",", "texture_dataset_path", ",", "label_mapping", ",", "substances", ",", "train", ":", "bool", ")", ":", "\n", "        ", "\"\"\"\n        Initializes the dataset.\n        :param os_dataset_path: Path to the open-surfaces dataset.\n        :param texture_dataset_path: Path to the textures dataset.\n        :param label_mapping: Label mapping used to merge different labels of two dataset.\n        :param substances: List of substance labels.\n        :param train: Specify true if the dataset is used for training. Specify false if the dataset is used for validation.\n        \"\"\"", "\n", "val_multicrop", "=", "False", "\n", "self", ".", "entries", "=", "[", "]", "\n", "self", ".", "train", "=", "train", "\n", "self", ".", "substances", "=", "substances", "\n", "additional_transforms", "=", "[", "]", "\n", "if", "train", ":", "\n", "            ", "additional_transforms", ".", "append", "(", "transforms", ".", "RandomHorizontalFlip", "(", ")", ")", "\n", "additional_transforms", ".", "append", "(", "transforms", ".", "RandomVerticalFlip", "(", ")", ")", "\n", "", "self", ".", "transforms", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Compose", "(", "additional_transforms", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "]", ")", "\n", "\n", "if", "os_dataset_path", "is", "not", "None", ":", "\n", "            ", "os_count", "=", "0", "\n", "for", "file", "in", "os", ".", "listdir", "(", "os_dataset_path", ")", ":", "\n", "                ", "if", "not", "train", "and", "not", "osp", ".", "splitext", "(", "file", ")", "[", "0", "]", ".", "endswith", "(", "\"_crop0\"", ")", ":", "# Validation uses crop0 only", "\n", "                    ", "continue", "\n", "", "if", "\".png\"", "not", "in", "file", ":", "\n", "                    ", "continue", "\n", "", "substance_part", "=", "file", ".", "split", "(", "\"_\"", ")", "[", "0", "]", "\n", "entry", "=", "{", "\n", "\"file_path\"", ":", "osp", ".", "join", "(", "os_dataset_path", ",", "file", ")", ",", "\n", "\"substance\"", ":", "map_label", "(", "substance_part", ",", "label_mapping", ")", ",", "\n", "\"source\"", ":", "\"os\"", "\n", "}", "\n", "self", ".", "entries", ".", "append", "(", "entry", ")", "\n", "os_count", "+=", "1", "\n", "", "logging", ".", "info", "(", "\"Loaded {count} images from OpenSurfaces.\"", ".", "format", "(", "count", "=", "os_count", ")", ")", "\n", "\n", "", "if", "texture_dataset_path", "is", "not", "None", ":", "\n", "            ", "tex_count", "=", "0", "\n", "for", "file", "in", "os", ".", "listdir", "(", "texture_dataset_path", ")", ":", "\n", "                ", "if", "not", "train", "and", "not", "osp", ".", "splitext", "(", "file", ")", "[", "0", "]", ".", "endswith", "(", "\"_crop0\"", ")", ":", "\n", "                    ", "continue", "# Validation should include crop0 only.", "\n", "", "if", "\".png\"", "not", "in", "file", ":", "\n", "                    ", "continue", "\n", "\n", "", "substance_part", "=", "file", ".", "split", "(", "\"_\"", ")", "[", "0", "]", "\n", "entry", "=", "{", "\n", "\"file_path\"", ":", "osp", ".", "join", "(", "texture_dataset_path", ",", "file", ")", ",", "\n", "\"substance\"", ":", "map_label", "(", "substance_part", ",", "label_mapping", ")", ",", "\n", "\"source\"", ":", "\"textures\"", "\n", "}", "\n", "self", ".", "entries", ".", "append", "(", "entry", ")", "\n", "tex_count", "+=", "1", "\n", "", "", "logging", ".", "info", "(", "\"Loaded {count} images from Textures dataset.\"", ".", "format", "(", "count", "=", "tex_count", ")", ")", "\n", "\n", "np", ".", "random", ".", "shuffle", "(", "self", ".", "entries", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.substance_classifier.dataset.SubstanceCropDataset.__len__": [[81, 83], ["len"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "entries", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.substance_classifier.dataset.SubstanceCropDataset.__getitem__": [[84, 92], ["dataset.SubstanceCropDataset.substances.index", "PIL.Image.open", "dataset.SubstanceCropDataset.transforms"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.models.cad_model.CADModel.index"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "entry", "=", "self", ".", "entries", "[", "idx", "]", "\n", "substance", "=", "entry", "[", "\"substance\"", "]", "\n", "substance_id", "=", "self", ".", "substances", ".", "index", "(", "substance", ")", "\n", "\n", "img", "=", "Image", ".", "open", "(", "entry", "[", "\"file_path\"", "]", ")", "\n", "img_transformed", "=", "self", ".", "transforms", "(", "img", ")", "\n", "return", "img_transformed", ",", "substance_id", ",", "entry", "", "", "", ""]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.substance_classifier.dataset.map_label": [[11, 15], ["None"], "function", ["None"], ["def", "map_label", "(", "label", ",", "mapping", ")", ":", "\n", "    ", "if", "label", "in", "mapping", ":", "\n", "        ", "return", "mapping", "[", "label", "]", "\n", "", "return", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.substance_classifier.util.save_checkpoint": [[12, 37], ["model.state_dict", "torch.optim.state_dict", "torch.save", "os.exists", "os.makedirs", "os.makedirs", "torch.save", "os.join", "os.join", "os.join", "os.exists", "os.makedirs", "os.makedirs", "os.join", "os.join", "os.join"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.common.image_description.ImageDescription.save", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.common.image_description.ImageDescription.save"], ["def", "fill_texture_embeddings", "(", "conf", ":", "ConfigManager", ",", "house", ":", "House", ",", "predictor", ":", "TextureGenPredictor", ")", "->", "None", ":", "\n", "    ", "\"\"\"\n    Compute surface texture embeddings of a house\n    :param conf: Config Manager\n    :param house: House processed\n    :param predictor: Predictor with loaded checkpoint\n    \"\"\"", "\n", "for", "room_index", ",", "room", "in", "house", ".", "rooms", ".", "items", "(", ")", ":", "\n", "        ", "assert", "isinstance", "(", "room", ",", "Room", ")", "\n", "for", "photo", "in", "room", ".", "photos", ":", "\n", "            ", "for", "surface", "in", "conf", ".", "surfaces", ":", "\n", "                ", "surface_instances", "=", "[", "i", "for", "i", "in", "range", "(", "conf", ".", "texture_gen", ".", "masks_per_surface", "[", "surface", "]", ")", "]", "\n", "for", "surface_instance", "in", "surface_instances", ":", "\n", "                    ", "for", "crop_instance", "in", "range", "(", "conf", ".", "texture_gen", ".", "crops_per_mask", ")", ":", "\n", "                        ", "candidate_key", "=", "\"%s_%d_crop%d\"", "%", "(", "photo", ",", "surface_instance", ",", "crop_instance", ")", "\n", "if", "osp", ".", "exists", "(", "osp", ".", "join", "(", "conf", ".", "data_paths", ".", "rectified_crops_path", ",", "surface", ",", "candidate_key", "+", "\".png\"", ")", ")", ":", "\n", "                            ", "image", "=", "load_image", "(", "\n", "osp", ".", "join", "(", "conf", ".", "data_paths", ".", "rectified_crops_path", ",", "surface", ",", "candidate_key", "+", "\".png\"", ")", ")", "\n", "\n", "emb", ",", "loss", "=", "predictor", ".", "predict_embs", "(", "[", "image", "]", ")", "\n", "room", ".", "surface_textures", "[", "surface", "]", "[", "candidate_key", "]", "=", "ImageDescription", "(", "image", ",", "ImageSource", ".", "NEURAL_SYNTH", ")", "\n", "room", ".", "surface_embeddings", "[", "surface", "]", "[", "candidate_key", "]", "=", "emb", "\n", "room", ".", "surface_losses", "[", "surface", "]", "[", "candidate_key", "]", "=", "loss", "\n", "\n", "\n", "", "", "", "", "", "", "", "def", "fill_house_textures", "(", "conf", ":", "ConfigManager", ",", "house", ":", "House", ",", "image_source", ":", "ImageSource", ",", "skip_existing_textures", ":", "bool", ",", "key", "=", "\"prop\"", ",", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.substance_classifier.util.get_crit": [[39, 60], ["torch.tensor", "weight.cuda.cuda", "logging.info", "torch.nn.CrossEntropyLoss", "substances.count", "weight.cuda.norm", "str"], "function", ["None"], ["    ", "\"\"\"\n    Synthesize textures for a house using the assigned texture embeddings.\n    :param conf: Config Manager\n    :param house: House to populate textures\n    :param key: Key of candidate texture embeddings.\n    :param image_source: Generator of the images\n    :param predictor: Predictor used to synthesize textures\n    :param skip_existing_textures: Do no synthesize if a texture already exist\n    \"\"\"", "\n", "if", "predictor", "is", "None", ":", "\n", "        ", "predictor", "=", "TextureGenPredictor", "(", "\n", "conf", "=", "load_conf_eval", "(", "config_path", "=", "conf", ".", "texture_gen", ".", "texture_synth_conf", ")", ",", "\n", "rgb_median_emb", "=", "conf", ".", "texture_gen", ".", "rgb_median_emb", ")", "\n", "predictor", ".", "load_checkpoint", "(", "checkpoint_path", "=", "conf", ".", "texture_gen", ".", "checkpoint_path", ")", "\n", "\n", "", "for", "room_index", ",", "room", "in", "house", ".", "rooms", ".", "items", "(", ")", ":", "\n", "        ", "assert", "isinstance", "(", "room", ",", "Room", ")", "\n", "for", "surface", "in", "room", ".", "surface_embeddings", ":", "\n", "            ", "if", "key", "in", "room", ".", "surface_embeddings", "[", "surface", "]", ":", "\n", "                ", "if", "skip_existing_textures", "and", "key", "in", "room", ".", "surface_textures", "[", "surface", "]", ":", "\n", "                    ", "continue", "\n", "", "generated_crops", ",", "substance_names", ",", "extra", "=", "predictor", ".", "predict_textures", "(", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.substance_classifier.util.get_model": [[62, 106], ["torchvision.models.resnet50", "torch.nn.Linear", "torch.nn.Linear", "torchvision.models.resnet18", "models.vgg16.parameters", "models.vgg16.classifier[].parameters", "len", "models.vgg16.parameters", "len", "torchvision.models.resnet34", "models.vgg16.classifier[].parameters", "models.vgg16.classifier[].parameters", "models.vgg16.classifier.parameters", "torchvision.models.vgg16"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.nets.vgg.vgg16"], ["multiplier", "=", "conf", ".", "texture_gen", ".", "output_multiplier", ")", "\n", "room", ".", "surface_textures", "[", "surface", "]", "[", "key", "]", "=", "ImageDescription", "(", "generated_crops", "[", "0", "]", ",", "image_source", ")", "\n", "\n", "\n", "", "", "", "", "def", "fill_textures", "(", "conf", ":", "ConfigManager", ",", "houses", ":", "dict", ",", "image_source", ":", "ImageSource", ",", "skip_existing_textures", ":", "bool", ",", "key", ":", "str", "=", "\"prop\"", ",", "log", ":", "bool", "=", "True", ",", "\n", "predictor", ":", "TextureGenPredictor", "=", "None", ")", "->", "None", ":", "\n", "    ", "\"\"\"\n    Synthesize textures for houses using the assigned texture embeddings.\n    :param conf: Config manager\n    :param houses: Dictionary of houses.\n    :param image_source: Image source specified to the synthesized textures\n    :param skip_existing_textures: Specify true to keep existing textures. Specify false to replace existing textures with new textures.\n    :param key: Key of embeddings used to synthesize textures.\n    :param log: Set true to enable logging.\n    :param predictor: Predictor used to synthesize textures.\n    \"\"\"", "\n", "if", "predictor", "is", "None", ":", "\n", "        ", "predictor", "=", "TextureGenPredictor", "(", "\n", "conf", "=", "load_conf_eval", "(", "config_path", "=", "conf", ".", "texture_gen", ".", "texture_synth_conf", ")", ",", "\n", "rgb_median_emb", "=", "conf", ".", "texture_gen", ".", "rgb_median_emb", ")", "\n", "predictor", ".", "load_checkpoint", "(", "checkpoint_path", "=", "conf", ".", "texture_gen", ".", "checkpoint_path", ")", "\n", "\n", "", "for", "i", ",", "(", "house_key", ",", "house", ")", "in", "enumerate", "(", "houses", ".", "items", "(", ")", ")", ":", "\n", "        ", "if", "log", ":", "\n", "            ", "logging", ".", "info", "(", "\"[%d/%d] Generating Textures %s\"", "%", "(", "i", ",", "len", "(", "houses", ")", ",", "house_key", ")", ")", "\n", "", "fill_house_textures", "(", "conf", ",", "house", ",", "skip_existing_textures", "=", "skip_existing_textures", ",", "key", "=", "key", ",", "predictor", "=", "predictor", ",", "image_source", "=", "image_source", ")", "\n", "\n", "\n", "", "", "def", "get_least_key", "(", "kv", ")", ":", "\n", "    ", "\"\"\"\n    Given a dictionary, returns the key with minimum value.\n    :param kv: Dictionary considered.\n    :return: Key with the minimum value.\n    \"\"\"", "\n", "min_k", "=", "None", "\n", "min_v", "=", "None", "\n", "for", "k", ",", "v", "in", "kv", ".", "items", "(", ")", ":", "\n", "        ", "if", "min_v", "is", "None", "or", "v", ".", "item", "(", ")", "<", "min_v", ":", "\n", "            ", "min_k", "=", "k", "\n", "min_v", "=", "v", ".", "item", "(", ")", "\n", "\n", "", "", "return", "min_k", "\n", "\n", "\n", "", "def", "vgg_crop_select", "(", "conf", ":", "ConfigManager", ",", "house", ":", "House", ",", "predictor", ":", "TextureGenPredictor", ")", "->", "None", ":", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.substance_classifier.util.get_optim": [[108, 119], ["torch.optim.Adam"], "function", ["None"], ["\n", "for", "room_index", ",", "room", "in", "house", ".", "rooms", ".", "items", "(", ")", ":", "\n", "        ", "assert", "isinstance", "(", "room", ",", "Room", ")", "\n", "# Calculate the least VGG loss embeddings", "\n", "for", "surface", "in", "room", ".", "surface_embeddings", ":", "\n", "            ", "least_key", "=", "get_least_key", "(", "room", ".", "surface_losses", "[", "surface", "]", ")", "\n", "if", "least_key", "is", "not", "None", ":", "\n", "                ", "room", ".", "surface_embeddings", "[", "surface", "]", "=", "{", "\"prop\"", ":", "room", ".", "surface_embeddings", "[", "surface", "]", "[", "least_key", "]", "}", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.substance_classifier.classifier.SubstanceClassifier.__init__": [[26, 51], ["config_parser.parse_config", "torchvision.transforms.Compose", "plan2scene.evaluation.metric_impl.substance_classifier.util.get_model().to", "classifier.load_checkpoint", "classifier.SubstanceClassifier.model.eval", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "plan2scene.evaluation.metric_impl.substance_classifier.util.get_model"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.src.config_parser.parse_config", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.predictor.TexturePropPredictor.load_checkpoint", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.substance_classifier.util.get_model"], ["def", "__init__", "(", "self", ",", "classifier_conf", ":", "Config", ",", "params_path", ":", "str", "=", "None", ",", "checkpoint_path", ":", "str", "=", "None", ",", "device", ":", "str", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Initialize the substance classification network\n        :param classifier_conf: Configuration of the substance classification metric.\n        :param params_path: Optional. Path to configuration of the classification network.\n        :param checkpoint_path: Optional. Path to checkpoints of the classification network.\n        :param device: Optional. Device to use.\n        \"\"\"", "\n", "if", "params_path", "is", "None", ":", "\n", "            ", "params_path", "=", "classifier_conf", ".", "conf_path", "\n", "", "if", "checkpoint_path", "is", "None", ":", "\n", "            ", "checkpoint_path", "=", "classifier_conf", ".", "checkpoint_path", "\n", "\n", "", "self", ".", "params", "=", "parse_config", "(", "params_path", ")", "\n", "if", "device", "is", "None", ":", "\n", "            ", "device", "=", "self", ".", "params", ".", "device", "\n", "", "self", ".", "device", "=", "device", "\n", "\n", "self", ".", "transforms", "=", "tfs", ".", "Compose", "(", "[", "tfs", ".", "ToTensor", "(", ")", ",", "\n", "tfs", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "]", ")", "\n", "self", ".", "model", "=", "get_model", "(", "self", ".", "params", ".", "arch", ",", "self", ".", "params", ".", "substances", ")", ".", "to", "(", "device", ")", "\n", "\n", "load_checkpoint", "(", "checkpoint_path", ",", "self", ".", "model", ")", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.substance_classifier.classifier.SubstanceClassifier.__repr__": [[52, 54], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"Subs\"", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.substance_classifier.classifier.SubstanceClassifier.predict": [[55, 66], ["torch.no_grad", "classifier.SubstanceClassifier.transforms().unsqueeze().to", "classifier.SubstanceClassifier.model", "torch.max", "classifier.SubstanceClassifier.transforms().unsqueeze", "pred.item", "classifier.SubstanceClassifier.transforms", "image.convert"], "methods", ["None"], ["", "def", "predict", "(", "self", ",", "image", ")", ":", "\n", "        ", "\"\"\"\n        Predict substance of a given image.\n        :param image: Image to make the prediction on.\n        :return: Predicted substance of the image.\n        \"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "image_tf", "=", "self", ".", "transforms", "(", "image", ".", "convert", "(", "\"RGB\"", ")", ")", ".", "unsqueeze", "(", "0", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "output", "=", "self", ".", "model", "(", "image_tf", ")", "\n", "_", ",", "pred", "=", "torch", ".", "max", "(", "output", ",", "dim", "=", "1", ")", "\n", "return", "self", ".", "params", ".", "substances", "[", "pred", ".", "item", "(", ")", "]", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.substance_classifier.classifier.load_checkpoint": [[10, 19], ["torch.load", "logging.info", "logging.info", "model.load_state_dict"], "function", ["None"], ["def", "load_checkpoint", "(", "checkpoint_path", ",", "model", ")", "->", "None", ":", "\n", "    ", "\"\"\"\n    Load checkpoint into the model.\n    :param checkpoint_path: Saved path of the checkpoint.\n    :param model: Model to load the checkpoint into.\n    \"\"\"", "\n", "ckpt", "=", "torch", ".", "load", "(", "checkpoint_path", ")", "\n", "logging", ".", "info", "(", "\"Loading checkpoint: %s\"", "%", "checkpoint_path", ")", "\n", "logging", ".", "info", "(", "model", ".", "load_state_dict", "(", "ckpt", "[", "\"model_params\"", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.house_gen.geom_util.ray_test": [[8, 44], ["LineString", "LineString.intersection", "isinstance", "len", "len", "math.sqrt", "hit_points.extend"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len"], ["def", "ray_test", "(", "mask", ",", "ray_origin", ":", "tuple", ",", "ray_direction", ":", "tuple", ",", "ray_length", ":", "float", ")", "->", "tuple", ":", "\n", "    ", "\"\"\"\n    Perform a ray-hit-test on the top-down view of the house geometry.\n    :param mask: Top down view mask of walls\n    :param ray_origin: Ray start point\n    :param ray_direction: Ray direction\n    :param ray_length: Maximum length of ray\n    :return: Tuple (min_distance, hit point)\n    \"\"\"", "\n", "assert", "len", "(", "ray_origin", ")", "==", "2", "\n", "assert", "len", "(", "ray_direction", ")", "==", "2", "\n", "from", "shapely", ".", "geometry", "import", "GeometryCollection", ",", "LineString", "\n", "ray", "=", "[", "ray_origin", ",", "(", "ray_origin", "[", "0", "]", "+", "ray_direction", "[", "0", "]", "*", "ray_length", ",", "ray_origin", "[", "1", "]", "+", "ray_direction", "[", "1", "]", "*", "ray_length", ")", "]", "\n", "\n", "ray_segment", "=", "LineString", "(", "ray", ")", "\n", "ray_intersection", "=", "ray_segment", ".", "intersection", "(", "mask", ")", "\n", "\n", "intersection_point", "=", "None", "\n", "min_distance", "=", "ray_length", "\n", "\n", "hit_points", "=", "[", "]", "\n", "if", "isinstance", "(", "ray_intersection", ",", "GeometryCollection", ")", ":", "\n", "        ", "if", "not", "ray_intersection", ".", "is_empty", ":", "\n", "            ", "for", "g", "in", "ray_intersection", ".", "geoms", ":", "\n", "                ", "hit_points", ".", "extend", "(", "[", "(", "r", ".", "x", ",", "r", ".", "y", ")", "for", "r", "in", "g", ".", "boundary", "]", ")", "\n", "", "", "", "else", ":", "\n", "        ", "if", "not", "ray_intersection", ".", "is_empty", ":", "\n", "            ", "hit_points", "=", "[", "(", "r", ".", "x", ",", "r", ".", "y", ")", "for", "r", "in", "ray_intersection", ".", "boundary", "]", "\n", "\n", "", "", "for", "hit_point", "in", "hit_points", ":", "\n", "        ", "d", "=", "math", ".", "sqrt", "(", "(", "hit_point", "[", "0", "]", "-", "ray_origin", "[", "0", "]", ")", "**", "2", "+", "(", "hit_point", "[", "1", "]", "-", "ray_origin", "[", "1", "]", ")", "**", "2", ")", "\n", "if", "min_distance", "is", "None", "or", "d", "<", "min_distance", ":", "\n", "            ", "min_distance", "=", "d", "\n", "intersection_point", "=", "hit_point", "\n", "\n", "", "", "return", "min_distance", ",", "intersection_point", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.house_gen.geom_util.get_room_mask": [[46, 79], ["cascaded_union", "isinstance", "LineString().buffer", "all_lines.append", "LineString().buffer", "ls.difference.difference", "LineString", "LineString"], "function", ["None"], ["", "def", "get_room_mask", "(", "room", ":", "Room", ")", ":", "\n", "    ", "\"\"\"\n    Compute top-down view wall mask of a room.\n    :param room: Room considered\n    :return Top down view wall mask as a shapely geometry:\n    \"\"\"", "\n", "from", "shapely", ".", "geometry", "import", "LineString", "\n", "processed_walls", "=", "[", "]", "\n", "all_lines", "=", "[", "]", "\n", "\n", "for", "wall_assignment", "in", "room", ".", "walls", ":", "\n", "        ", "assert", "isinstance", "(", "wall_assignment", ",", "WallRoomAssignment", ")", "\n", "wall", "=", "wall_assignment", ".", "wall", "\n", "\n", "if", "wall", "in", "processed_walls", ":", "\n", "            ", "continue", "\n", "\n", "", "ls", "=", "LineString", "(", "[", "(", "wall", ".", "p1", "[", "0", "]", ",", "wall", ".", "p1", "[", "2", "]", ")", ",", "(", "wall", ".", "p2", "[", "0", "]", ",", "wall", ".", "p2", "[", "2", "]", ")", "]", ")", ".", "buffer", "(", "1", ")", "\n", "\n", "for", "hole", "in", "wall", ".", "holes", ":", "\n", "            ", "h_start_x", "=", "(", "(", "wall", ".", "p2", "[", "0", "]", "-", "wall", ".", "p1", "[", "0", "]", ")", "*", "hole", ".", "start", ")", "+", "wall", ".", "p1", "[", "0", "]", "\n", "h_end_x", "=", "(", "(", "wall", ".", "p2", "[", "0", "]", "-", "wall", ".", "p1", "[", "0", "]", ")", "*", "hole", ".", "end", ")", "+", "wall", ".", "p1", "[", "0", "]", "\n", "h_start_y", "=", "(", "(", "wall", ".", "p2", "[", "2", "]", "-", "wall", ".", "p1", "[", "2", "]", ")", "*", "hole", ".", "start", ")", "+", "wall", ".", "p1", "[", "2", "]", "\n", "h_end_y", "=", "(", "(", "wall", ".", "p2", "[", "2", "]", "-", "wall", ".", "p1", "[", "2", "]", ")", "*", "hole", ".", "end", ")", "+", "wall", ".", "p1", "[", "2", "]", "\n", "\n", "hs", "=", "LineString", "(", "[", "(", "h_start_x", ",", "h_start_y", ")", ",", "(", "h_end_x", ",", "h_end_y", ")", "]", ")", ".", "buffer", "(", "1", ")", "\n", "ls", "=", "ls", ".", "difference", "(", "hs", ")", "\n", "\n", "", "all_lines", ".", "append", "(", "ls", ")", "\n", "\n", "", "from", "shapely", ".", "ops", "import", "cascaded_union", "\n", "u", "=", "cascaded_union", "(", "all_lines", ")", "\n", "return", "u", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.house_gen.geom_util.get_transform": [[81, 100], ["numpy.array", "R.from_rotvec", "R.from_rotvec.as_dcm", "numpy.vstack", "numpy.hstack", "numpy.matmul", "np.matmul.flatten().tolist", "numpy.transpose", "np.matmul.flatten", "numpy.array"], "function", ["None"], ["", "def", "get_transform", "(", "x", ":", "float", ",", "y", ":", "float", ",", "z", ":", "float", ",", "angle", ":", "float", ",", "scale_x", ":", "float", "=", "1", ",", "scale_z", ":", "float", "=", "1", ")", "->", "list", ":", "\n", "    ", "\"\"\"\n    Compute transformation matrix\n    :param x: X position of center\n    :param y: Y position of center\n    :param z: Z position of center\n    :param angle: Rotation of object about Y axis, in degrees.\n    :param scale_x: Scaling factor along X axis\n    :param scale_z: Scaling factor along Z axis\n    :return: Transformation matrix as a nested list\n    \"\"\"", "\n", "from", "scipy", ".", "spatial", ".", "transform", "import", "Rotation", "as", "R", "\n", "scale_mat", "=", "np", ".", "array", "(", "[", "[", "scale_x", ",", "0", ",", "0", ",", "0", "]", ",", "[", "0", ",", "1", ",", "0", ",", "0", "]", ",", "[", "0", ",", "0", ",", "scale_z", ",", "0", "]", ",", "[", "0", ",", "0", ",", "0", ",", "1", "]", "]", ",", "dtype", "=", "float", ")", "\n", "r", "=", "R", ".", "from_rotvec", "(", "(", "0", ",", "angle", "/", "180", "*", "np", ".", "pi", ",", "0", ")", ")", "\n", "m", "=", "r", ".", "as_dcm", "(", ")", "\n", "m", "=", "np", ".", "vstack", "(", "[", "m", ",", "[", "x", ",", "y", ",", "z", "]", "]", ")", "\n", "m", "=", "np", ".", "hstack", "(", "[", "m", ",", "np", ".", "transpose", "(", "np", ".", "array", "(", "[", "[", "0", ",", "0", ",", "0", ",", "1", "]", "]", ")", ")", "]", ")", "\n", "m", "=", "np", ".", "matmul", "(", "scale_mat", ",", "m", ")", "\n", "return", "m", ".", "flatten", "(", ")", ".", "tolist", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.house_gen.geom_util.find_angle": [[102, 115], ["math.sqrt", "len", "math.acos"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len"], ["", "def", "find_angle", "(", "p", ":", "tuple", ")", "->", "float", ":", "\n", "    ", "\"\"\"\n    Computes angle of a 2D vector.\n    Angles are measured with respect to positive x axis, on the counter clockwise direction. Negative y is considered up. Positive x is considered right.\n    :param p: Vector considered in the form (x, y)\n    :return: Angle in degrees.\n    \"\"\"", "\n", "assert", "len", "(", "p", ")", "==", "2", "\n", "h", "=", "math", ".", "sqrt", "(", "p", "[", "0", "]", "**", "2", "+", "p", "[", "1", "]", "**", "2", ")", "\n", "ang", "=", "math", ".", "acos", "(", "p", "[", "0", "]", "/", "h", ")", "*", "180", "/", "math", ".", "pi", "\n", "if", "p", "[", "1", "]", ">", "0", ":", "\n", "        ", "ang", "=", "-", "ang", "\n", "", "return", "ang", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.house_gen.geom_util.l2_dist_sq": [[117, 129], ["len", "len"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len"], ["", "def", "l2_dist_sq", "(", "p1", ":", "tuple", ",", "p2", ":", "tuple", ")", "->", "float", ":", "\n", "    ", "\"\"\"\n    Compute squared L2 distance between p1 and p2\n    :param p1: Point 1 in the form (x, y)\n    :param p2: Point 2 in the form (x, y)\n    :return: Squared L2 distance\n    \"\"\"", "\n", "assert", "len", "(", "p1", ")", "==", "2", "\n", "assert", "len", "(", "p2", ")", "==", "2", "\n", "dx", "=", "p1", "[", "0", "]", "-", "p2", "[", "0", "]", "\n", "dy", "=", "p1", "[", "1", "]", "-", "p2", "[", "1", "]", "\n", "return", "dx", "**", "2", "+", "dy", "**", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.house_gen.geom_util.hole_to_line": [[131, 151], ["math.sqrt", "len", "len", "geom_util.l2_dist_sq"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.house_gen.geom_util.l2_dist_sq"], ["", "def", "hole_to_line", "(", "wall_p1", ":", "tuple", ",", "wall_p2", ":", "tuple", ",", "hole_start", ":", "float", ",", "hole_end", ":", "float", ")", "->", "tuple", ":", "\n", "    ", "\"\"\"\n    Converts a 2D hole definition to a line segment.\n    :param wall_p1: Top-down x,y coordinate of wall start point\n    :param wall_p2: Top-down x,y coordinate of wall end point\n    :param hole_start: Distance from wall_p1 to start of hole\n    :param hole_end: Distance from wall_p1 to end of hole\n    :return: Line segment as tuple(tuple(x1,y1), tuple(x2,y2))\n    \"\"\"", "\n", "assert", "len", "(", "wall_p1", ")", "==", "2", "\n", "assert", "len", "(", "wall_p2", ")", "==", "2", "\n", "\n", "wall_length", "=", "math", ".", "sqrt", "(", "l2_dist_sq", "(", "wall_p1", ",", "wall_p2", ")", ")", "\n", "hole_start", "=", "hole_start", "/", "wall_length", "\n", "hole_end", "=", "hole_end", "/", "wall_length", "\n", "start_x", "=", "(", "wall_p2", "[", "0", "]", "-", "wall_p1", "[", "0", "]", ")", "*", "hole_start", "+", "wall_p1", "[", "0", "]", "\n", "start_y", "=", "(", "wall_p2", "[", "1", "]", "-", "wall_p1", "[", "1", "]", ")", "*", "hole_start", "+", "wall_p1", "[", "1", "]", "\n", "end_x", "=", "(", "wall_p2", "[", "0", "]", "-", "wall_p1", "[", "0", "]", ")", "*", "hole_end", "+", "wall_p1", "[", "0", "]", "\n", "end_y", "=", "(", "wall_p2", "[", "1", "]", "-", "wall_p1", "[", "1", "]", ")", "*", "hole_end", "+", "wall_p1", "[", "1", "]", "\n", "return", "(", "start_x", ",", "start_y", ")", ",", "(", "end_x", ",", "end_y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.house_gen.geom_util.point_line_seg_distance": [[153, 199], ["len", "len", "len", "float", "float", "float", "float", "float", "float", "float"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len"], ["", "def", "point_line_seg_distance", "(", "p1", ":", "tuple", ",", "p2", ":", "tuple", ",", "p", ":", "tuple", ",", "extend_line", ":", "bool", "=", "False", ")", "->", "tuple", ":", "\n", "    ", "\"\"\"\n    Compute distance from 2D point p to line segment (p1, p2).\n    :param p1: Start point of line in the form (x, y)\n    :param p2: End point of line in the form (x, y)\n    :param p: Point to compute distance to, in the form (x, y)\n    :param extend_line: Should the line be extended as necessary to reduce the distance.\n    :return: Tuple(Distance, (x,y) of closest point)\n    \"\"\"", "\n", "# Code adapted from https://stackoverflow.com/questions/849211/shortest-distance-between-a-point-and-a-line-segment", "\n", "assert", "len", "(", "p1", ")", "==", "2", "\n", "assert", "len", "(", "p2", ")", "==", "2", "\n", "assert", "len", "(", "p", ")", "==", "2", "\n", "\n", "x1", ",", "y1", "=", "p1", "\n", "x2", ",", "y2", "=", "p2", "\n", "x3", ",", "y3", "=", "p", "\n", "x1", ",", "x2", ",", "x3", ",", "y1", ",", "y2", ",", "y3", "=", "float", "(", "x1", ")", ",", "float", "(", "x2", ")", ",", "float", "(", "x3", ")", ",", "float", "(", "y1", ")", ",", "float", "(", "y2", ")", ",", "float", "(", "y3", ")", "\n", "px", "=", "x2", "-", "x1", "\n", "py", "=", "y2", "-", "y1", "\n", "\n", "norm", "=", "px", "*", "px", "+", "py", "*", "py", "\n", "if", "norm", "==", "0", ":", "\n", "        ", "dx", "=", "x1", "-", "x3", "\n", "dy", "=", "y1", "-", "y3", "\n", "\n", "dist", "=", "(", "dx", "*", "dx", "+", "dy", "*", "dy", ")", "**", ".5", "\n", "return", "dist", ",", "(", "x1", ",", "y1", ")", "\n", "\n", "", "u", "=", "(", "(", "x3", "-", "x1", ")", "*", "px", "+", "(", "y3", "-", "y1", ")", "*", "py", ")", "/", "float", "(", "norm", ")", "\n", "\n", "if", "not", "extend_line", ":", "\n", "        ", "if", "u", ">", "1", ":", "\n", "            ", "u", "=", "1", "\n", "", "elif", "u", "<", "0", ":", "\n", "            ", "u", "=", "0", "\n", "\n", "", "", "x", "=", "x1", "+", "u", "*", "px", "\n", "y", "=", "y1", "+", "u", "*", "py", "\n", "\n", "dx", "=", "x", "-", "x3", "\n", "dy", "=", "y", "-", "y3", "\n", "\n", "dist", "=", "(", "dx", "*", "dx", "+", "dy", "*", "dy", ")", "**", ".5", "\n", "\n", "return", "dist", ",", "(", "x", ",", "y", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.gnn_prop.propagate_textures": [[15, 56], ["plan2scene.texture_prop.houses_dataset.HouseDataset", "torch_geometric.data.DataLoader", "logging.info", "plan2scene.crop_select.util.fill_textures", "plan2scene.texture_prop.utils.get_graph_generator", "plan2scene.texture_prop.utils.clear_predictions", "torch.no_grad", "enumerate", "plan2scene.texture_prop.utils.get_graph_generator", "plan2scene.texture_prop.graph_generators.InferenceHGG", "logging.info", "tp_predictor.predict", "plan2scene.texture_prop.utils.update_embeddings", "batch.to", "len"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.crop_select.util.fill_textures", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.utils.get_graph_generator", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.utils.clear_predictions", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.utils.get_graph_generator", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.predictor.TexturePropPredictor.predict", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.utils.update_embeddings", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len"], ["def", "propagate_textures", "(", "conf", ":", "ConfigManager", ",", "houses", ":", "dict", ",", "tg_predictor", ":", "TextureGenPredictor", ",", "tp_predictor", ":", "TexturePropPredictor", ",", "\n", "keep_existing_predictions", ":", "bool", ",", "use_train_graph_generator", ":", "bool", ",", "\n", "use_val_graph_generator", ":", "bool", ")", "->", "None", ":", "\n", "    ", "\"\"\"\n    Propagate textures to (unobserved) surfaces of the given houses.\n    :param conf:\n    :param houses:\n    :param tg_predictor:\n    :param tp_predictor:\n    :param keep_existing_predictions:\n    :param use_train_graph_generator:\n    :param use_val_graph_generator:\n    :return:\n    \"\"\"", "\n", "device", "=", "conf", ".", "texture_prop", ".", "device", "\n", "\n", "assert", "not", "(", "use_train_graph_generator", "and", "use_val_graph_generator", ")", "# Cant use both together", "\n", "\n", "# Select a suitable graph generator", "\n", "if", "use_train_graph_generator", ":", "\n", "        ", "nt_graph_generator", "=", "get_graph_generator", "(", "conf", ",", "conf", ".", "texture_prop", ".", "train_graph_generator", ",", "include_target", "=", "False", ")", "\n", "", "elif", "use_val_graph_generator", ":", "\n", "        ", "nt_graph_generator", "=", "get_graph_generator", "(", "conf", ",", "conf", ".", "texture_prop", ".", "val_graph_generator", ",", "include_target", "=", "False", ")", "\n", "", "else", ":", "\n", "        ", "nt_graph_generator", "=", "InferenceHGG", "(", "conf", "=", "conf", ",", "include_target", "=", "False", ")", "\n", "\n", "", "val_nt_dataset", "=", "HouseDataset", "(", "houses", ",", "graph_generator", "=", "nt_graph_generator", ")", "\n", "val_nt_dataloader", "=", "DataLoader", "(", "val_nt_dataset", ",", "batch_size", "=", "conf", ".", "texture_prop", ".", "train", ".", "bs", ")", "\n", "\n", "if", "not", "keep_existing_predictions", ":", "\n", "        ", "clear_predictions", "(", "conf", ",", "houses", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "i", ",", "batch", "in", "enumerate", "(", "val_nt_dataloader", ")", ":", "\n", "            ", "logging", ".", "info", "(", "\"Batch [%d/%d] Graph Inference\"", "%", "(", "i", ",", "len", "(", "val_nt_dataloader", ")", ")", ")", "\n", "output", "=", "tp_predictor", ".", "predict", "(", "batch", ".", "to", "(", "device", ")", ")", "\n", "update_embeddings", "(", "conf", ",", "houses", ",", "batch", ",", "output", ",", "\n", "keep_existing_predictions", "=", "keep_existing_predictions", ")", "\n", "\n", "", "", "logging", ".", "info", "(", "\"Synthesizing textures\"", ")", "\n", "fill_textures", "(", "conf", ",", "houses", ",", "log", "=", "True", ",", "predictor", "=", "tg_predictor", ",", "image_source", "=", "ImageSource", ".", "GNN_PROP", ",", "skip_existing_textures", "=", "keep_existing_predictions", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.predictor.TexturePropPredictor.__init__": [[15, 23], ["plan2scene.texture_prop.utils.get_network().to", "plan2scene.texture_prop.utils.get_network"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.utils.get_network"], ["from", "plan2scene", ".", "texture_gen", ".", "utils", ".", "neural_texture_helper", "import", "get_loss_no_reduce", "\n", "import", "torch", "\n", "import", "plan2scene", ".", "texture_gen", ".", "utils", ".", "utils", "as", "util", "\n", "\n", "from", "plan2scene", ".", "texture_gen", ".", "custom_transforms", ".", "hsv_transforms", "import", "ToHSV", "\n", "from", "torchvision", "import", "transforms", "as", "tfs", "\n", "\n", "\n", "class", "TextureGenPredictor", ":", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.predictor.TexturePropPredictor.load_checkpoint": [[24, 32], ["torch.load", "logging.info", "logging.info", "predictor.TexturePropPredictor.net.load_state_dict"], "methods", ["None"], ["    ", "\"\"\"\n    Predicts textures using our modified neural texture synthesis approach.\n    \"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "conf", ",", "rgb_median_emb", ":", "bool", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.predictor.TexturePropPredictor.predict": [[33, 46], ["predictor.TexturePropPredictor.net", "predictor.TexturePropPredictor.net.train", "predictor.TexturePropPredictor.net.eval", "batch.to"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.abstract_trainer.AbstractTrainer.net", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.trainer.abstract_trainer.AbstractTrainer.train"], ["\n", "self", ".", "conf", "=", "conf", "\n", "self", ".", "rgb_median_emb", "=", "rgb_median_emb", "\n", "\n", "# Modified neural texture network", "\n", "self", ".", "net", "=", "TextureGen", "(", "conf", ")", ".", "to", "(", "conf", ".", "device", ")", "\n", "\n", "# Load substance labels if supported", "\n", "self", ".", "substances", "=", "None", "\n", "if", "\"substances\"", "in", "conf", ".", "dataset", "and", "conf", ".", "system", ".", "arch", ".", "model_substance_classifier", ".", "model_params", ".", "available", ":", "\n", "            ", "self", ".", "substances", "=", "conf", ".", "dataset", ".", "substances", "\n", "\n", "", "self", ".", "update_seed", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.graph_generators.HouseGraphGenerator.__init__": [[20, 28], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "conf", ":", "ConfigManager", ",", "include_target", ":", "bool", ")", ":", "\n", "        ", "\"\"\"\n        Initialize.\n        :param conf: Config manager.\n        :param include_target: Pass true to populate target embeddings of each node.\n        \"\"\"", "\n", "self", ".", "conf", "=", "conf", "\n", "self", ".", "include_target", "=", "include_target", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.graph_generators.HouseGraphGenerator.__call__": [[29, 32], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "__call__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.graph_generators.InferenceHGG.__init__": [[39, 46], ["graph_generators.HouseGraphGenerator.__init__"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.models.ceiling.Ceiling.__init__"], ["def", "__init__", "(", "self", ",", "conf", ":", "ConfigManager", ",", "include_target", ":", "bool", ")", ":", "\n", "        ", "\"\"\"\n        Initialize graph generator.\n        :param conf: Config Manager.\n        :param include_target: Pass true to populate target embeddings of each node.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "conf", ",", "include_target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.graph_generators.InferenceHGG.__call__": [[47, 49], ["graph_generators.generate_inference_graphs"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.graph_generators.generate_inference_graphs"], ["", "def", "__call__", "(", "self", ",", "house", ")", ":", "\n", "        ", "return", "generate_inference_graphs", "(", "conf", "=", "self", ".", "conf", ",", "house", "=", "house", ",", "include_target", "=", "self", ".", "include_target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.graph_generators.ExcludeTargetSurfaceHGG.__init__": [[57, 65], ["graph_generators.HouseGraphGenerator.__init__"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.models.ceiling.Ceiling.__init__"], ["def", "__init__", "(", "self", ",", "conf", ":", "ConfigManager", ",", "include_target", ":", "bool", ",", "params", ":", "Config", ")", ":", "\n", "        ", "\"\"\"\n        Initialize graph gnenerator.\n        :param conf: Config manager.\n        :param include_target: Pass true to populate target embeddings of each node.\n        :param params: Graph genrator config. Not used since this graph generator doesn't support custom configurations.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "conf", ",", "include_target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.graph_generators.ExcludeTargetSurfaceHGG.__call__": [[66, 68], ["graph_generators.generate_exclude_target_surface_graphs"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.graph_generators.generate_exclude_target_surface_graphs"], ["", "def", "__call__", "(", "self", ",", "house", ")", ":", "\n", "        ", "return", "generate_exclude_target_surface_graphs", "(", "conf", "=", "self", ".", "conf", ",", "house", "=", "house", ",", "include_target", "=", "self", ".", "include_target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.graph_generators.RandomDropExcludeTargetSurfaceHGG.__init__": [[76, 85], ["graph_generators.HouseGraphGenerator.__init__"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.models.ceiling.Ceiling.__init__"], ["def", "__init__", "(", "self", ",", "conf", ":", "ConfigManager", ",", "include_target", ":", "bool", ",", "params", ":", "Config", ")", ":", "\n", "        ", "\"\"\"\n        Initialize graph generator.\n        :param conf: Config manager\n        :param include_target: Pass true to populate target embeddings of each node.\n        :param params: Graph genrator config.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "conf", ",", "include_target", ")", "\n", "self", ".", "drop_fraction_frequency_map", "=", "{", "a", "[", "0", "]", ":", "a", "[", "1", "]", "for", "a", "in", "params", ".", "drop_fraction_frequencies", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.graph_generators.RandomDropExcludeTargetSurfaceHGG.__call__": [[86, 90], ["graph_generators.generate_random_drop_exclude_target_surface_graphs"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.graph_generators.generate_random_drop_exclude_target_surface_graphs"], ["", "def", "__call__", "(", "self", ",", "house", ")", ":", "\n", "        ", "return", "generate_random_drop_exclude_target_surface_graphs", "(", "conf", "=", "self", ".", "conf", ",", "house", "=", "house", ",", "\n", "include_target", "=", "self", ".", "include_target", ",", "\n", "drop_fraction_frequency_map", "=", "self", ".", "drop_fraction_frequency_map", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.graph_generators.generate_inference_graphs": [[92, 123], ["house.rooms.items", "plan2scene.texture_prop.graph_util.get_house_graph", "graphs.append", "plan2scene.texture_prop.graph_util.generate_target_and_mask", "torch_geometric.data.Data", "plan2scene.texture_prop.graph_util.generate_target_and_mask", "torch_geometric.data.Data", "edge_indices_t.t().contiguous", "edge_indices_t.t().contiguous", "edge_indices_t.t", "edge_indices_t.t"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.graph_util.get_house_graph", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.graph_util.generate_target_and_mask", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.graph_util.generate_target_and_mask"], ["", "", "def", "generate_inference_graphs", "(", "conf", ":", "ConfigManager", ",", "house", ":", "House", ",", "include_target", ":", "bool", ",", "key", ":", "str", "=", "\"prop\"", ")", "->", "list", ":", "\n", "    ", "\"\"\"\n    Returns list of graphs from a house where each graph has a single target surface that is to be predicted.\n    :param house: The house represented using graphs.\n    :param include_target: Pass true to populate target embeddings of each node.\n    :param key: Key used to identify active texture embeddings.\n    :return: List of graphs\n    \"\"\"", "\n", "assert", "include_target", "==", "False", "# We do not use target at inference time.", "\n", "\n", "graphs", "=", "[", "]", "\n", "for", "room_index", ",", "room", "in", "house", ".", "rooms", ".", "items", "(", ")", ":", "\n", "        ", "for", "surface", "in", "conf", ".", "surfaces", ":", "\n", "            ", "target_surface_map", "=", "{", "room_index", ":", "[", "surface", "]", "}", "\n", "node_embeddings_t", ",", "edge_indices_t", ",", "surface_embeddings_t", "=", "get_house_graph", "(", "conf", "=", "conf", ",", "house", "=", "house", ",", "\n", "surface_maskout_map", "=", "{", "}", ")", "\n", "if", "include_target", ":", "\n", "                ", "y_t", ",", "y_mask_t", "=", "generate_target_and_mask", "(", "conf", "=", "conf", ",", "house", "=", "house", ",", "target_surface_map", "=", "target_surface_map", ",", "\n", "include_target", "=", "True", ")", "\n", "graph", "=", "Data", "(", "x", "=", "node_embeddings_t", ",", "surfemb", "=", "surface_embeddings_t", ",", "\n", "edge_index", "=", "edge_indices_t", ".", "t", "(", ")", ".", "contiguous", "(", ")", ",", "y", "=", "y_t", ",", "y_mask", "=", "y_mask_t", ",", "\n", "key", "=", "[", "house", ".", "house_key", ",", "room_index", ",", "surface", "]", ")", "\n", "", "else", ":", "\n", "                ", "_", ",", "y_mask_t", "=", "generate_target_and_mask", "(", "conf", "=", "conf", ",", "house", "=", "house", ",", "target_surface_map", "=", "target_surface_map", ",", "\n", "include_target", "=", "False", ")", "\n", "graph", "=", "Data", "(", "x", "=", "node_embeddings_t", ",", "surfemb", "=", "surface_embeddings_t", ",", "\n", "edge_index", "=", "edge_indices_t", ".", "t", "(", ")", ".", "contiguous", "(", ")", ",", "y_mask", "=", "y_mask_t", ",", "\n", "key", "=", "[", "house", ".", "house_key", ",", "room_index", ",", "surface", "]", ")", "\n", "\n", "", "graphs", ".", "append", "(", "graph", ")", "\n", "", "", "return", "graphs", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.graph_generators._add_exclusion": [[125, 136], ["exclusion_map[].append"], "function", ["None"], ["", "def", "_add_exclusion", "(", "exclusion_map", ":", "dict", ",", "room_index", ":", "int", ",", "surface", ":", "str", ")", "->", "None", ":", "\n", "    ", "\"\"\"\n    Update exclusion map, indicating that the specified surface must be excluded.\n    :param exclusion_map: Exclusion map that gets updated.\n    :param room_index: Room index of the surface\n    :param surface: Surface type\n    \"\"\"", "\n", "if", "room_index", "not", "in", "exclusion_map", ":", "\n", "        ", "exclusion_map", "[", "room_index", "]", "=", "[", "]", "\n", "", "if", "surface", "not", "in", "exclusion_map", "[", "room_index", "]", ":", "\n", "        ", "exclusion_map", "[", "room_index", "]", ".", "append", "(", "surface", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.graph_generators.generate_random_drop_exclude_target_surface_graphs": [[138, 168], ["drop_fraction_frequency_map.items", "range", "house.rooms.items", "graph_generators.generate_exclude_target_surface_graphs", "all_graphs.extend", "isinstance", "torch.rand().item", "graph_generators._add_exclusion", "torch.rand"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.graph_generators.generate_exclude_target_surface_graphs", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.graph_generators._add_exclusion"], ["", "", "def", "generate_random_drop_exclude_target_surface_graphs", "(", "conf", ":", "ConfigManager", ",", "house", ":", "House", ",", "include_target", ":", "bool", ",", "\n", "key", ":", "str", "=", "\"prop\"", ",", "drop_fraction_frequency_map", ":", "dict", "=", "{", "}", ")", ":", "\n", "    ", "\"\"\"\n    Returns list of graphs from a house where in each graph, the target surface is dropped from the input.\n    Each graph has a single surface that is to be predicted.\n    We repeat graphs and drop additional texture embeddings at random from the input.\n\n    :param conf: Config manager used.\n    :param house: House represented as graphs.\n    :param include_target: Pass true to populate target embeddings of each node.\n    :param key: Key used to identify active texture embeddings.\n    :param drop_fraction_frequency_map: Schedule used for repeating graphs and random dropping (unobserving) of input texture embeddings.\n    :return: List of graphs.\n    \"\"\"", "\n", "all_graphs", "=", "[", "]", "\n", "for", "drop_fraction", ",", "frequency", "in", "drop_fraction_frequency_map", ".", "items", "(", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "frequency", ")", ":", "\n", "            ", "additional_exclusions", "=", "{", "}", "\n", "# Generate additional exclusions", "\n", "for", "room_index", ",", "room", "in", "house", ".", "rooms", ".", "items", "(", ")", ":", "\n", "                ", "assert", "isinstance", "(", "room", ",", "Room", ")", "\n", "for", "surf", "in", "conf", ".", "surfaces", ":", "\n", "                    ", "if", "torch", ".", "rand", "(", "1", ")", ".", "item", "(", ")", "<=", "drop_fraction", ":", "\n", "                        ", "if", "key", "in", "room", ".", "surface_embeddings", "[", "surf", "]", ":", "\n", "                            ", "_add_exclusion", "(", "additional_exclusions", ",", "room_index", ",", "surf", ")", "\n", "\n", "", "", "", "", "graphs", "=", "generate_exclude_target_surface_graphs", "(", "conf", ",", "house", ",", "include_target", "=", "include_target", ",", "key", "=", "key", ",", "\n", "additional_exclusions", "=", "additional_exclusions", ")", "\n", "all_graphs", ".", "extend", "(", "graphs", ")", "\n", "", "", "return", "all_graphs", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.graph_generators.generate_exclude_target_surface_graphs": [[170, 215], ["house.rooms.items", "plan2scene.texture_prop.graph_util.get_house_graph", "graphs.append", "additional_exclusions[].append", "plan2scene.texture_prop.graph_util.generate_target_and_mask", "torch_geometric.data.Data", "plan2scene.texture_prop.graph_util.generate_target_and_mask", "torch_geometric.data.Data", "edge_indices_t.t().contiguous", "edge_indices_t.t().contiguous", "edge_indices_t.t", "edge_indices_t.t"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.graph_util.get_house_graph", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.graph_util.generate_target_and_mask", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.graph_util.generate_target_and_mask"], ["", "def", "generate_exclude_target_surface_graphs", "(", "conf", ":", "ConfigManager", ",", "house", ":", "House", ",", "include_target", ":", "bool", ",", "key", "=", "\"prop\"", ",", "\n", "additional_exclusions", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Returns list of graphs from a house where in each graph, the target surface is dropped from the input.\n    Each graph has a single surface that is to be predicted.\n    :param conf: Config manager used.\n    :param house: House represented as graphs.\n    :param include_target: Pass true to populate target embeddings of each node.\n    :param key: Key used to identify active texture embeddings.\n    :param additional_exclusions: Dictionary indicating additional surfaces to unobserve from the input.\n    :return: List of graphs.\n    \"\"\"", "\n", "if", "additional_exclusions", "is", "None", ":", "\n", "        ", "additional_exclusions", "=", "{", "}", "\n", "", "graphs", "=", "[", "]", "\n", "for", "room_index", ",", "room", "in", "house", ".", "rooms", ".", "items", "(", ")", ":", "\n", "        ", "for", "surface", "in", "conf", ".", "surfaces", ":", "\n", "            ", "if", "include_target", ":", "\n", "# Skips surfaces we cannot calculate targets", "\n", "                ", "if", "key", "not", "in", "room", ".", "surface_embeddings", "[", "surface", "]", ":", "\n", "                    ", "continue", "\n", "\n", "", "", "target_surface_map", "=", "{", "room_index", ":", "[", "surface", "]", "}", "\n", "if", "room_index", "not", "in", "additional_exclusions", ":", "\n", "                ", "additional_exclusions", "[", "room_index", "]", "=", "[", "]", "\n", "", "if", "surface", "not", "in", "additional_exclusions", "[", "room_index", "]", ":", "\n", "                ", "additional_exclusions", "[", "room_index", "]", ".", "append", "(", "surface", ")", "\n", "\n", "", "node_embeddings_t", ",", "edge_indices_t", ",", "surface_embeddings_t", "=", "get_house_graph", "(", "conf", "=", "conf", ",", "house", "=", "house", ",", "\n", "surface_maskout_map", "=", "additional_exclusions", ")", "\n", "if", "include_target", ":", "\n", "                ", "y_t", ",", "y_mask_t", "=", "generate_target_and_mask", "(", "conf", "=", "conf", ",", "house", "=", "house", ",", "target_surface_map", "=", "target_surface_map", ",", "\n", "include_target", "=", "True", ")", "\n", "graph", "=", "Data", "(", "x", "=", "node_embeddings_t", ",", "surfemb", "=", "surface_embeddings_t", ",", "\n", "edge_index", "=", "edge_indices_t", ".", "t", "(", ")", ".", "contiguous", "(", ")", ",", "y", "=", "y_t", ",", "y_mask", "=", "y_mask_t", ",", "\n", "key", "=", "[", "house", ".", "house_key", ",", "room_index", ",", "surface", "]", ")", "\n", "", "else", ":", "\n", "                ", "_", ",", "y_mask_t", "=", "generate_target_and_mask", "(", "conf", "=", "conf", ",", "house", "=", "house", ",", "target_surface_map", "=", "target_surface_map", ",", "\n", "include_target", "=", "False", ")", "\n", "graph", "=", "Data", "(", "x", "=", "node_embeddings_t", ",", "surfemb", "=", "surface_embeddings_t", ",", "\n", "edge_index", "=", "edge_indices_t", ".", "t", "(", ")", ".", "contiguous", "(", ")", ",", "y_mask", "=", "y_mask_t", ",", "\n", "key", "=", "[", "house", ".", "house_key", ",", "room_index", ",", "surface", "]", ")", "\n", "\n", "", "graphs", ".", "append", "(", "graph", ")", "\n", "", "", "return", "graphs", "\n", "", ""]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.__init__": [[19, 33], ["torch_geometric.data.Dataset.__init__", "houses_dataset.HouseDataset._refresh"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.models.ceiling.Ceiling.__init__", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset._refresh"], ["def", "__init__", "(", "self", ",", "houses", ":", "dict", ",", "graph_generator", ":", "HouseGraphGenerator", ",", "epoch_counter", ":", "multiprocessing", ".", "Value", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Initializes dataset.\n        :param houses: Dictionary of houses.\n        :param graph_generator: Graph generator used to genrate graphs from the houses.\n        :param epoch_counter: Counter on epochs shared among multiple dataloder threads. We use this to re-generate graphs at the end of an epoch.\n        \"\"\"", "\n", "super", "(", "HouseDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "graph_generator", "=", "graph_generator", "\n", "self", ".", "houses", "=", "houses", "\n", "self", ".", "house_graphs", "=", "None", "\n", "self", ".", "epoch_counter", "=", "epoch_counter", "\n", "self", ".", "epoch", "=", "None", "\n", "self", ".", "_refresh", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset._refresh": [[34, 41], ["houses_dataset.HouseDataset.houses.items", "houses_dataset.HouseDataset.house_graphs.extend", "houses_dataset.HouseDataset.graph_generator"], "methods", ["None"], ["", "def", "_refresh", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Re-generate the graph representations using houses.\n        \"\"\"", "\n", "self", ".", "house_graphs", "=", "[", "]", "\n", "for", "house_key", ",", "house", "in", "self", ".", "houses", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "house_graphs", ".", "extend", "(", "self", ".", "graph_generator", "(", "house", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len": [[42, 48], ["houses_dataset.HouseDataset.len"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len"], ["", "", "def", "len", "(", "self", ")", "->", "int", ":", "\n", "        ", "\"\"\"\n        Returns length of the dataset.\n        :return: Dataset length.\n        \"\"\"", "\n", "return", "len", "(", "self", ".", "house_graphs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.get": [[49, 59], ["houses_dataset.HouseDataset._refresh"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset._refresh"], ["", "def", "get", "(", "self", ",", "idx", ":", "int", ")", "->", "Data", ":", "\n", "        ", "\"\"\"\n        Return graph at index idx.\n        :param idx: Dataset item index.\n        :return: graph.\n        \"\"\"", "\n", "if", "self", ".", "epoch_counter", "is", "not", "None", "and", "self", ".", "epoch_counter", ".", "value", "!=", "self", ".", "epoch", ":", "\n", "            ", "self", ".", "epoch", "=", "self", ".", "epoch_counter", ".", "value", "\n", "self", ".", "_refresh", "(", ")", "\n", "", "return", "self", ".", "house_graphs", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.graph_util.get_house_graph": [[6, 64], ["house.rooms.items", "torch.cat", "torch.cat", "torch.tensor", "isinstance", "torch.zeros", "node_embedding.append", "surface_embeddings.append", "torch.cat", "node_embeddings.append", "len", "torch.zeros.view", "torch.cat", "node_embedding.append", "short_embeddings.append", "torch.cat().unsqueeze", "edge_indices.append", "torch.zeros().view", "conf.room_types.index", "torch.zeros().view", "[].detach", "torch.tensor", "torch.cat", "torch.zeros", "torch.zeros"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.models.cad_model.CADModel.index"], ["def", "get_house_graph", "(", "conf", ":", "ConfigManager", ",", "house", ":", "House", ",", "surface_maskout_map", ":", "dict", ",", "key", "=", "\"prop\"", ")", ":", "\n", "    ", "\"\"\"\n    Generates node embeddings and edge pairs for a given house.\n    :param conf: ConfigManager\n    :param house: House to generate graph\n    :param surface_maskout_map: Dictionary of surfaces to be dropped from input. {room_index: [list of surfaces. e.g. 'floor', 'wall', 'ceiling']}\n    :return: Pair of node embeddings tensor and edge indices tensor\n    \"\"\"", "\n", "combined_emb_dim", "=", "conf", ".", "texture_gen", ".", "combined_emb_dim", "\n", "node_embeddings", "=", "[", "]", "\n", "surface_embeddings", "=", "[", "]", "\n", "for", "room_index", ",", "room", "in", "house", ".", "rooms", ".", "items", "(", ")", ":", "\n", "        ", "assert", "isinstance", "(", "room", ",", "Room", ")", "\n", "# Room Type", "\n", "node_embedding", "=", "[", "]", "\n", "rt_embedding", "=", "torch", ".", "zeros", "(", "len", "(", "conf", ".", "room_types", ")", ")", "\n", "for", "rt", "in", "room", ".", "types", ":", "\n", "            ", "rt_embedding", "[", "conf", ".", "room_types", ".", "index", "(", "rt", ")", "]", "=", "1.0", "\n", "", "node_embedding", ".", "append", "(", "rt_embedding", ".", "view", "(", "1", ",", "-", "1", ")", ")", "\n", "\n", "short_embeddings", "=", "[", "]", "\n", "for", "surf", "in", "conf", ".", "surfaces", ":", "\n", "            ", "if", "room_index", "in", "surface_maskout_map", "and", "surf", "in", "surface_maskout_map", "[", "room_index", "]", ":", "# Masked out", "\n", "                ", "short_surf_embedding", "=", "torch", ".", "zeros", "(", "(", "combined_emb_dim", ",", ")", ")", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "surf_present", "=", "False", "\n", "", "elif", "key", "not", "in", "room", ".", "surface_embeddings", "[", "surf", "]", ":", "# Unobserved", "\n", "                ", "short_surf_embedding", "=", "torch", ".", "zeros", "(", "(", "combined_emb_dim", ",", ")", ")", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "surf_present", "=", "False", "\n", "", "else", ":", "\n", "                ", "short_surf_embedding", "=", "room", ".", "surface_embeddings", "[", "surf", "]", "[", "key", "]", ".", "detach", "(", ")", "\n", "surf_present", "=", "True", "\n", "\n", "", "surf_embedding", "=", "torch", ".", "cat", "(", "[", "torch", ".", "tensor", "(", "[", "[", "surf_present", "]", "]", ",", "dtype", "=", "torch", ".", "float32", ")", ",", "short_surf_embedding", "]", ",", "\n", "dim", "=", "1", ")", "\n", "node_embedding", ".", "append", "(", "surf_embedding", ")", "\n", "short_embeddings", ".", "append", "(", "short_surf_embedding", ")", "\n", "del", "surf_embedding", "\n", "del", "surf_present", "\n", "del", "short_surf_embedding", "\n", "\n", "", "if", "conf", ".", "texture_prop", ".", "graph_generator", ".", "include_enable_in_target", ":", "\n", "            ", "assert", "False", "\n", "\n", "", "surface_embeddings", ".", "append", "(", "\n", "torch", ".", "cat", "(", "short_embeddings", ",", "dim", "=", "0", ")", ".", "unsqueeze", "(", "0", ")", ")", "\n", "node_embedding_tensor", "=", "torch", ".", "cat", "(", "node_embedding", ",", "dim", "=", "1", ")", "\n", "node_embeddings", ".", "append", "(", "node_embedding_tensor", ")", "\n", "\n", "", "node_embeddings_tensor", "=", "torch", ".", "cat", "(", "node_embeddings", ",", "dim", "=", "0", ")", "\n", "surface_embeddings_tensor", "=", "torch", ".", "cat", "(", "surface_embeddings", ",", "dim", "=", "0", ")", "\n", "\n", "edge_indices", "=", "[", "]", "\n", "for", "r1_index", ",", "r2_index", "in", "house", ".", "door_connected_room_pairs", ":", "\n", "        ", "if", "r2_index", ">=", "0", ":", "\n", "            ", "edge_indices", ".", "append", "(", "[", "r1_index", ",", "r2_index", "]", ")", "\n", "", "", "edge_indices_tensor", "=", "torch", ".", "tensor", "(", "edge_indices", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "\n", "return", "node_embeddings_tensor", ",", "edge_indices_tensor", ",", "surface_embeddings_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.graph_util.generate_target_and_mask": [[66, 130], ["house.rooms.items", "torch.cat", "torch.tensor().unsqueeze", "room_masks.append", "torch.cat", "room_masks.append", "room_mask.append", "torch.cat", "room_targets.append", "torch.zeros", "room_targets.append", "torch.zeros", "torch.zeros.append", "torch.tensor", "[].detach().unsqueeze", "torch.zeros", "torch.cat", "len", "len", "[].detach", "torch.tensor"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len"], ["", "def", "generate_target_and_mask", "(", "conf", ":", "ConfigManager", ",", "house", ":", "House", ",", "target_surface_map", ":", "dict", ",", "include_target", ":", "bool", ",", "key", "=", "\"prop\"", ")", "->", "tuple", ":", "\n", "    ", "\"\"\"\n    Generates y and y_mask tensors for a given house, targetting surfaces that are indicated.\n    :param conf: Config Manager\n    :param house: House\n    :param target_surface_map: Dictionary of room surfaces to include in mask and target. {room_index: [list of surfaces. e.g. 'floor', 'wall', 'ceiling']}\n    :param include_target: Pass true to populate target embeddings of each node.\n    :return: Pair of target tensor [node_count, surface_count, emb] and masks tensor [node_count, surface_count].\n    \"\"\"", "\n", "combined_emb_dim", "=", "conf", ".", "texture_gen", ".", "combined_emb_dim", "\n", "updated_combined_emb_dim", "=", "combined_emb_dim", "\n", "if", "conf", ".", "texture_prop", ".", "graph_generator", ".", "include_enable_in_target", ":", "\n", "        ", "updated_combined_emb_dim", "+=", "1", "\n", "\n", "", "if", "include_target", ":", "\n", "        ", "room_targets", "=", "[", "]", "\n", "", "else", ":", "\n", "        ", "room_targets", "=", "None", "\n", "", "room_masks", "=", "[", "]", "\n", "for", "room_index", ",", "room", "in", "house", ".", "rooms", ".", "items", "(", ")", ":", "\n", "        ", "if", "room_index", "not", "in", "target_surface_map", ":", "\n", "# Unlisted room", "\n", "            ", "if", "include_target", ":", "\n", "                ", "room_target", "=", "torch", ".", "zeros", "(", "[", "1", ",", "len", "(", "conf", ".", "surfaces", ")", ",", "updated_combined_emb_dim", "]", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "room_targets", ".", "append", "(", "room_target", ")", "\n", "", "room_masks", ".", "append", "(", "torch", ".", "zeros", "(", "[", "1", ",", "len", "(", "conf", ".", "surfaces", ")", "]", ",", "dtype", "=", "torch", ".", "bool", ")", ")", "\n", "continue", "\n", "\n", "", "if", "include_target", ":", "\n", "            ", "room_target", "=", "[", "]", "# surface_count * [1, 1, combined_dim]", "\n", "\n", "", "room_mask", "=", "[", "]", "# surface_count", "\n", "\n", "for", "surf", "in", "conf", ".", "surfaces", ":", "\n", "            ", "if", "room_index", "in", "target_surface_map", "and", "surf", "in", "target_surface_map", "[", "room_index", "]", ":", "\n", "                ", "if", "include_target", ":", "\n", "                    ", "surf_target", "=", "room", ".", "surface_embeddings", "[", "surf", "]", "[", "key", "]", ".", "detach", "(", ")", ".", "unsqueeze", "(", "0", ")", "\n", "", "surf_mask", "=", "True", "\n", "", "else", ":", "\n", "                ", "if", "include_target", ":", "\n", "                    ", "surf_target", "=", "torch", ".", "zeros", "(", "[", "1", ",", "1", ",", "combined_emb_dim", "]", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "", "surf_mask", "=", "False", "\n", "\n", "", "if", "include_target", ":", "\n", "                ", "if", "conf", ".", "texture_prop", ".", "graph_generator", ".", "include_enable_in_target", ":", "\n", "                    ", "surf_target", "=", "torch", ".", "cat", "(", "[", "torch", ".", "tensor", "(", "[", "[", "[", "surf_mask", "]", "]", "]", ",", "dtype", "=", "torch", ".", "float32", ")", ",", "surf_target", "]", ",", "dim", "=", "2", ")", "\n", "", "room_target", ".", "append", "(", "surf_target", ")", "\n", "", "room_mask", ".", "append", "(", "surf_mask", ")", "\n", "\n", "\n", "", "if", "include_target", ":", "\n", "            ", "room_target_tensor", "=", "torch", ".", "cat", "(", "room_target", ",", "dim", "=", "1", ")", "\n", "room_targets", ".", "append", "(", "room_target_tensor", ")", "\n", "\n", "", "room_mask_tensor", "=", "torch", ".", "tensor", "(", "room_mask", ",", "dtype", "=", "torch", ".", "bool", ")", ".", "unsqueeze", "(", "0", ")", "\n", "room_masks", ".", "append", "(", "room_mask_tensor", ")", "\n", "\n", "", "if", "include_target", ":", "\n", "        ", "room_targets_tensor", "=", "torch", ".", "cat", "(", "room_targets", ",", "dim", "=", "0", ")", "\n", "", "else", ":", "\n", "        ", "room_targets_tensor", "=", "None", "\n", "\n", "", "room_masks_tensor", "=", "torch", ".", "cat", "(", "room_masks", ",", "dim", "=", "0", ")", "\n", "return", "room_targets_tensor", ",", "room_masks_tensor", "", "", ""]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.utils.get_optim": [[8, 18], ["torch.optim.Adam"], "function", ["None"], ["def", "get_grid_coords_2d", "(", "y", ",", "x", ",", "coord_dim", "=", "-", "1", ")", ":", "\n", "    ", "y", ",", "x", "=", "torch", ".", "meshgrid", "(", "y", ",", "x", ")", "\n", "coords", "=", "torch", ".", "stack", "(", "[", "x", ",", "y", "]", ",", "dim", "=", "coord_dim", ")", "\n", "return", "coords", "\n", "\n", "\n", "", "def", "get_grid_coords_3d", "(", "z", ",", "y", ",", "x", ",", "coord_dim", "=", "-", "1", ")", ":", "\n", "    ", "z", ",", "y", ",", "x", "=", "torch", ".", "meshgrid", "(", "z", ",", "y", ",", "x", ")", "\n", "coords", "=", "torch", ".", "stack", "(", "[", "x", ",", "y", ",", "z", "]", ",", "dim", "=", "coord_dim", ")", "\n", "return", "coords", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.utils.get_crit": [[20, 32], ["torch.nn.MSELoss", "torch.nn.L1Loss"], "function", ["None"], ["", "def", "signed_to_unsigned", "(", "array", ")", ":", "\n", "    ", "\"\"\"\n    Converts a signed tensor to unsigned.\n    :param array:\n    :return:\n    \"\"\"", "\n", "return", "(", "array", "+", "1", ")", "/", "2", "\n", "\n", "\n", "", "def", "unsigned_to_signed", "(", "array", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.utils.get_network": [[34, 45], ["importlib.import_module", "getattr", "getattr."], "function", ["None"], ["\n", "return", "(", "array", "-", "0.5", ")", "/", "0.5", "\n", "\n", "\n", "", "def", "pytorch_to_numpy", "(", "array", ",", "is_batch", "=", "True", ",", "flip", "=", "True", ")", ":", "\n", "    ", "array", "=", "array", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "if", "flip", ":", "\n", "        ", "source", "=", "1", "if", "is_batch", "else", "0", "\n", "dest", "=", "array", ".", "ndim", "-", "1", "\n", "array", "=", "np", ".", "moveaxis", "(", "array", ",", "source", ",", "dest", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.utils.get_graph_generator": [[47, 59], ["getattr", "getattr."], "function", ["None"], ["\n", "\n", "", "def", "numpy_to_pytorch", "(", "array", ",", "is_batch", "=", "False", ",", "flip", "=", "True", ")", ":", "\n", "    ", "if", "flip", ":", "\n", "        ", "dest", "=", "1", "if", "is_batch", "else", "0", "\n", "source", "=", "array", ".", "ndim", "-", "1", "\n", "array", "=", "np", ".", "moveaxis", "(", "array", ",", "source", ",", "dest", ")", "\n", "\n", "", "array", "=", "torch", ".", "from_numpy", "(", "array", ")", "\n", "array", "=", "array", ".", "float", "(", ")", "\n", "\n", "return", "array", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.utils.clear_predictions": [[61, 79], ["houses.items", "isinstance", "house.rooms.items", "isinstance"], "function", ["None"], ["", "def", "convert_to_int", "(", "array", ")", ":", "\n", "    ", "array", "*=", "255", "\n", "array", "[", "array", ">", "255", "]", "=", "255.0", "\n", "\n", "if", "type", "(", "array", ")", ".", "__module__", "==", "'numpy'", ":", "\n", "        ", "return", "array", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "", "elif", "type", "(", "array", ")", ".", "__module__", "==", "'torch'", ":", "\n", "        ", "return", "array", ".", "byte", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "\n", "", "", "def", "convert_to_float", "(", "array", ")", ":", "\n", "    ", "max_value", "=", "np", ".", "iinfo", "(", "array", ".", "dtype", ")", ".", "max", "\n", "array", "[", "array", ">", "max_value", "]", "=", "max_value", "\n", "\n", "if", "type", "(", "array", ")", ".", "__module__", "==", "'numpy'", ":", "\n", "        ", "return", "array", ".", "astype", "(", "np", ".", "float32", ")", "/", "max_value", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.utils.update_embeddings": [[81, 99], ["range", "range", "isinstance", "predictions[].cpu().unsqueeze", "predictions[].cpu"], "function", ["None"], ["", "elif", "type", "(", "array", ")", ".", "__module__", "==", "'torch'", ":", "\n", "        ", "return", "array", ".", "float", "(", ")", "/", "max_value", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "\n", "", "", "def", "metric_mse", "(", "output", ",", "target", ")", ":", "\n", "    ", "return", "torch", ".", "nn", ".", "functional", ".", "mse_loss", "(", "output", ",", "target", ")", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "\n", "\n", "", "def", "dict_to_keyvalue", "(", "params", ",", "prefix", "=", "''", ")", ":", "\n", "    ", "hparams", "=", "{", "}", "\n", "\n", "for", "key", ",", "value", "in", "params", ".", "items", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "            ", "if", "not", "prefix", "==", "''", ":", "\n", "                ", "new_prefix", "=", "'{}.{}'", ".", "format", "(", "prefix", ",", "key", ")", "\n", "", "else", ":", "\n", "                ", "new_prefix", "=", "key", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.gnn_texture_prop.process": [[15, 35], ["plan2scene.texture_gen.predictor.TextureGenPredictor", "plan2scene.texture_gen.predictor.TextureGenPredictor.load_checkpoint", "plan2scene.texture_prop.predictor.TexturePropPredictor", "plan2scene.texture_prop.predictor.TexturePropPredictor.load_checkpoint", "plan2scene.texture_prop.gnn_prop.propagate_textures", "plan2scene.texture_gen.utils.io.load_conf_eval"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.predictor.TexturePropPredictor.load_checkpoint", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.predictor.TexturePropPredictor.load_checkpoint", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.gnn_prop.propagate_textures", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.io.load_conf_eval"], ["def", "process", "(", "conf", ":", "ConfigManager", ",", "houses", ":", "dict", ",", "checkpoint_path", ":", "str", ",", "keep_existing_predictions", ":", "bool", ",", "use_train_graph_generator", ":", "bool", ",", "\n", "use_val_graph_generator", ":", "bool", ")", "->", "None", ":", "\n", "    ", "\"\"\"\n    Propagate textures to (unobserved) surfaces of the given houses.\n    :param conf: Config manager.\n    :param houses: Dictionary of houses to process.\n    :param checkpoint_path: Path to GNN checkpoint.\n    :param keep_existing_predictions: Specify true to keep existing predictions of observed surfaces. Otherwise, replace them with propagated textures.\n    :param use_train_graph_generator: Specify true to use the graph generator used at train time.\n    :param use_val_graph_generator: Specify true to use the graph generator used at validation time.\n    :return:\n    \"\"\"", "\n", "tg_predictor", "=", "TextureGenPredictor", "(", "\n", "conf", "=", "load_conf_eval", "(", "config_path", "=", "conf", ".", "texture_gen", ".", "texture_synth_conf", ")", ",", "\n", "rgb_median_emb", "=", "conf", ".", "texture_gen", ".", "rgb_median_emb", ")", "\n", "tg_predictor", ".", "load_checkpoint", "(", "checkpoint_path", "=", "conf", ".", "texture_gen", ".", "checkpoint_path", ")", "\n", "\n", "tp_predictor", "=", "TexturePropPredictor", "(", "conf", ",", "conf", ".", "texture_prop", ")", "\n", "tp_predictor", ".", "load_checkpoint", "(", "checkpoint_path", "=", "checkpoint_path", ")", "\n", "propagate_textures", "(", "conf", ",", "houses", ",", "tg_predictor", ",", "tp_predictor", ",", "keep_existing_predictions", ",", "use_train_graph_generator", ",", "use_val_graph_generator", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.tp_models.simple_gated_gnn.SimpleGatedGNN.__init__": [[47, 68], ["super().__init__", "simple_gated_gnn.generate_extended_linear", "generate_extended_linear.", "torch_geometric.nn.GatedGraphConv", "generate_extended_linear."], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.models.ceiling.Ceiling.__init__", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.tp_models.simple_gated_gnn.generate_extended_linear"], ["def", "__init__", "(", "self", ",", "conf", ":", "ConfigManager", ",", "gated_layer_count", ":", "int", ",", "linear_count", ":", "int", "=", "1", ",", "linear_layer_multiplier", ":", "int", "=", "1", ")", ":", "\n", "        ", "\"\"\"\n        Initialize network.\n        :param conf: Config manager\n        :param gated_layer_count: Number of layers of the gated graph convolution operator from https://arxiv.org/abs/1511.05493.\n        :param linear_count: Number of linear layers at the front and back of the GNN.\n        :param linear_layer_multiplier: Multiplier on width of linear layers.\n        \"\"\"", "\n", "super", "(", "SimpleGatedGNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conf", "=", "conf", "\n", "linear_layer", "=", "generate_extended_linear", "(", "linear_count", ")", "\n", "\n", "self", ".", "linear1", "=", "linear_layer", "(", "conf", ".", "texture_prop", ".", "node_embedding_dim", ",", "\n", "conf", ".", "texture_prop", ".", "node_embedding_dim", "*", "linear_layer_multiplier", ",", "\n", "conf", ".", "texture_prop", ".", "node_embedding_dim", "*", "linear_layer_multiplier", ")", "\n", "self", ".", "conv1", "=", "GatedGraphConv", "(", "out_channels", "=", "conf", ".", "texture_prop", ".", "node_embedding_dim", "*", "linear_layer_multiplier", ",", "\n", "num_layers", "=", "gated_layer_count", ")", "\n", "\n", "self", ".", "linear2", "=", "linear_layer", "(", "conf", ".", "texture_prop", ".", "node_embedding_dim", "*", "linear_layer_multiplier", ",", "\n", "conf", ".", "texture_prop", ".", "node_embedding_dim", "*", "linear_layer_multiplier", ",", "\n", "conf", ".", "texture_prop", ".", "node_target_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.tp_models.simple_gated_gnn.SimpleGatedGNN.forward": [[69, 85], ["simple_gated_gnn.SimpleGatedGNN.linear1", "torch.relu", "torch.relu", "simple_gated_gnn.SimpleGatedGNN.conv1", "torch.relu", "torch.relu", "simple_gated_gnn.SimpleGatedGNN.linear2", "simple_gated_gnn.SimpleGatedGNN.view", "len"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len"], ["", "def", "forward", "(", "self", ",", "data", ":", "Batch", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Forward pass. Returns a tensor of embeddings. Each entry of the batch represent texture embeddings predicted for a room.\n        :param data: Batch of input data.\n        :return: tensor [batch_size, surface_count, embedding dim]\n        \"\"\"", "\n", "bs", ",", "_", "=", "data", ".", "x", ".", "shape", "\n", "x", ",", "edge_index", "=", "data", ".", "x", ",", "data", ".", "edge_index", "\n", "\n", "x", "=", "self", ".", "linear1", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv1", "(", "x", ",", "edge_index", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "linear2", "(", "x", ")", "\n", "return", "x", ".", "view", "(", "bs", ",", "len", "(", "self", ".", "conf", ".", "surfaces", ")", ",", "self", ".", "conf", ".", "texture_gen", ".", "combined_emb_dim", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.tp_models.simple_gated_gnn.generate_extended_linear": [[9, 40], ["range", "torch.nn.Sequential", "layers.append", "layers.append", "torch.nn.Linear", "torch.nn.ReLU"], "function", ["None"], ["def", "generate_extended_linear", "(", "count", ":", "int", ")", ":", "\n", "    ", "\"\"\"\n    Returns a helper method which generates a sequential network of linear layers.\n    :param count: Length of the chain\n    :return: Method that can generate a chain of linear layers.\n    \"\"\"", "\n", "\n", "def", "generate_linear", "(", "input_dim", ":", "int", ",", "body_dim", ":", "int", ",", "output_dim", ":", "int", ")", ":", "\n", "        ", "\"\"\"\n        Generates a sequential network of linear layers, having the specified input dim, hidden layer dim and output dim.\n        :param input_dim: Input dimensions of the chain\n        :param body_dim: Hidden layer dimensions of the chain\n        :param output_dim: Output dimensions of the chain\n        :return: Sequential network of linear layers.\n        \"\"\"", "\n", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "count", ")", ":", "\n", "            ", "if", "i", ">", "0", ":", "\n", "                ", "layers", ".", "append", "(", "nn", ".", "ReLU", "(", ")", ")", "\n", "", "if", "i", "==", "0", ":", "\n", "                ", "in_dim", "=", "input_dim", "\n", "", "else", ":", "\n", "                ", "in_dim", "=", "body_dim", "\n", "", "if", "i", "==", "count", "-", "1", ":", "\n", "                ", "out_dim", "=", "output_dim", "\n", "", "else", ":", "\n", "                ", "out_dim", "=", "body_dim", "\n", "", "layers", ".", "append", "(", "nn", ".", "Linear", "(", "in_dim", ",", "out_dim", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n", "", "return", "generate_linear", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.common.color_description.Color.__init__": [[13, 23], ["isinstance", "isinstance"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "color_space", ":", "ColorSpace", ",", "components", ":", "list", ")", ":", "\n", "        ", "\"\"\"\n        Initialize color.\n        :param color_space: Color space of the color.\n        :param components: Components of the color.\n        \"\"\"", "\n", "assert", "isinstance", "(", "color_space", ",", "ColorSpace", ")", "\n", "assert", "isinstance", "(", "components", ",", "list", ")", "\n", "self", ".", "_color_space", "=", "color_space", "\n", "self", ".", "_components", "=", "components", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.common.color_description.Color.color_space": [[24, 31], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "color_space", "(", "self", ")", "->", "ColorSpace", ":", "\n", "        ", "\"\"\"\n        Retrieve colorspace of the color.\n        :return: Colorspace of the color.\n        \"\"\"", "\n", "return", "self", ".", "_color_space", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.common.color_description.Color.components": [[32, 39], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "components", "(", "self", ")", "->", "list", ":", "\n", "        ", "\"\"\"\n        Retrieve color components.\n        :return: Color components.\n        \"\"\"", "\n", "return", "self", ".", "_components", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.common.color_description.Color.to_dict": [[40, 44], ["None"], "methods", ["None"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "return", "{", "\n", "\"color_space\"", ":", "self", ".", "color_space", ".", "name", ",", "\n", "\"components\"", ":", "self", ".", "components", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.common.image_description.ImageSource.__init__": [[23, 26], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "name", ",", "observed", ")", ":", "\n", "        ", "self", ".", "_name", "=", "name", "\n", "self", ".", "_observed", "=", "observed", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.common.image_description.ImageSource.name": [[27, 30], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "name", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "self", ".", "_name", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.common.image_description.ImageSource.observed": [[31, 39], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "observed", "(", "self", ")", "->", "bool", ":", "\n", "        ", "\"\"\"\n        Return true if the crop/texture is for an observed surface.\n        Return False if the crop/texture is for an unobserved surface.\n        Return None if unspecified.\n        \"\"\"", "\n", "return", "self", ".", "_observed", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.common.image_description.ImageSource.parse": [[40, 51], ["ImageSource.__members__.items"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "parse", "(", "cls", ",", "_str", ")", ":", "\n", "        ", "\"\"\"\n        Parse from string.\n        :param _str: String to parse.\n        :return: ImageSource\n        \"\"\"", "\n", "for", "member_key", ",", "member_value", "in", "ImageSource", ".", "__members__", ".", "items", "(", ")", ":", "\n", "            ", "if", "_str", "==", "member_value", ".", "name", ":", "\n", "                ", "return", "member_value", "\n", "", "", "assert", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.common.image_description.ImageDescription.__init__": [[57, 67], ["isinstance", "isinstance"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "image", ":", "Image", ".", "Image", ",", "source", ":", "ImageSource", ")", ":", "\n", "        ", "\"\"\"\n        Initialze image description.\n        :param image: PIL Image\n        :param source: Image source\n        \"\"\"", "\n", "assert", "isinstance", "(", "source", ",", "ImageSource", ")", "\n", "assert", "isinstance", "(", "image", ",", "Image", ".", "Image", ")", "\n", "self", ".", "_image", "=", "image", "\n", "self", ".", "_source", "=", "source", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.common.image_description.ImageDescription.image": [[76, 84], ["isinstance"], "methods", ["None"], ["", "@", "image", ".", "setter", "\n", "def", "image", "(", "self", ",", "value", ":", "Image", ".", "Image", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Set PIL Image\n        :param value: Image\n        \"\"\"", "\n", "assert", "isinstance", "(", "value", ",", "Image", ".", "Image", ")", "\n", "self", ".", "_image", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.common.image_description.ImageDescription.source": [[85, 92], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "source", "(", "self", ")", "->", "ImageSource", ":", "\n", "        ", "\"\"\"\n        Return source of the image.\n        :return: image source\n        \"\"\"", "\n", "return", "self", ".", "_source", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.common.image_description.ImageDescription.save": [[93, 104], ["image_description.ImageDescription.image.save", "os.splitext", "open", "json.dump"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.common.image_description.ImageDescription.save"], ["", "def", "save", "(", "self", ",", "path", ":", "str", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Save image to disk\n        :param path: Save path\n        \"\"\"", "\n", "self", ".", "image", ".", "save", "(", "path", ")", "\n", "crop_name", "=", "osp", ".", "splitext", "(", "path", ")", "[", "0", "]", "\n", "with", "open", "(", "crop_name", "+", "\".desc.json\"", ",", "\"w\"", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "{", "\n", "\"image_source\"", ":", "self", ".", "source", ".", "name", "\n", "}", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.common.image_description.ImageDescription.parse_image": [[105, 120], ["plan2scene.utils.io.load_image", "os.exists", "image_description.ImageDescription", "os.splitext", "image_description.ImageSource.parse", "open", "json.load"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.io.load_image", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.common.image_description.ImageSource.parse"], ["", "", "@", "classmethod", "\n", "def", "parse_image", "(", "cls", ",", "image_path", ":", "str", ")", ":", "\n", "        ", "\"\"\"\n        Loads an image description form the disk.\n        :param image_path: Saved path.\n        :return: Loaded image description\n        \"\"\"", "\n", "crop_image", "=", "load_image", "(", "image_path", ")", "\n", "crop_name", "=", "osp", ".", "splitext", "(", "image_path", ")", "[", "0", "]", "\n", "source", "=", "ImageSource", ".", "DIRECT_CROP", "\n", "if", "osp", ".", "exists", "(", "crop_name", "+", "\".desc.json\"", ")", ":", "\n", "            ", "with", "open", "(", "crop_name", "+", "\".desc.json\"", ")", "as", "f", ":", "\n", "                ", "desc_json", "=", "json", ".", "load", "(", "f", ")", "\n", "", "source", "=", "ImageSource", ".", "parse", "(", "desc_json", "[", "\"image_source\"", "]", ")", "\n", "", "return", "ImageDescription", "(", "crop_image", ",", "source", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.common.residence.Room.__init__": [[13, 40], ["isinstance", "isinstance"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "house_key", ":", "str", ",", "room_index", ":", "int", ",", "surfaces", ":", "list", ")", ":", "\n", "        ", "\"\"\"\n        Initialize room.\n        :param house_key: House key.\n        :param room_index: Room index\n        :param surfaces: List of surfaces of the room.\n        \"\"\"", "\n", "assert", "isinstance", "(", "house_key", ",", "str", ")", "\n", "assert", "isinstance", "(", "room_index", ",", "int", ")", "\n", "\n", "self", ".", "_house_key", "=", "house_key", "\n", "self", ".", "_room_index", "=", "room_index", "\n", "\n", "self", ".", "_arch_room", "=", "None", "\n", "self", ".", "_types", "=", "[", "]", "\n", "\n", "self", ".", "_photos", "=", "[", "]", "\n", "\n", "# Dictionary from crop path to embedding. (Computed for each surface type)", "\n", "self", ".", "_surface_embeddings", "=", "{", "surf", ":", "{", "}", "for", "surf", "in", "surfaces", "}", "\n", "\n", "# Dictionary of textures. (Computed for each surface type)", "\n", "self", ".", "_surface_textures", "=", "{", "surf", ":", "{", "}", "for", "surf", "in", "surfaces", "}", "\n", "\n", "# Dictionary storing VGG Style loss of generated crop from each embedding, compared to the gt crop used to \\", "\n", "# derive that embedding. (Computed per each surface)", "\n", "self", ".", "_surface_losses", "=", "{", "surf", ":", "{", "}", "for", "surf", "in", "surfaces", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.common.residence.Room.flush": [[41, 52], ["isinstance", "residence.Room._arch_room.assign_texture"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.models.room.Room.assign_texture"], ["", "def", "flush", "(", "self", ",", "flush_key", ":", "str", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Updates arch.json house using textures corresponding to the flush_key\n        :param flush_key: Key specified to textures that should be applied to surfaces\n        \"\"\"", "\n", "assert", "isinstance", "(", "self", ".", "_arch_room", ",", "arch_parser", ".", "models", ".", "room", ".", "Room", ")", "\n", "for", "surface", "in", "self", ".", "surface_textures", ":", "\n", "            ", "if", "flush_key", "in", "self", ".", "surface_textures", "[", "surface", "]", ":", "\n", "                ", "self", ".", "_arch_room", ".", "assign_texture", "(", "surface", ",", "self", ".", "surface_textures", "[", "surface", "]", "[", "flush_key", "]", ".", "image", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "_arch_room", ".", "textures", "[", "surface", "]", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.common.residence.Room.room_id": [[53, 60], ["None"], "methods", ["None"], ["", "", "", "@", "property", "\n", "def", "room_id", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Return room id\n        :return: Room id\n        \"\"\"", "\n", "return", "self", ".", "_arch_room", ".", "room_id", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.common.residence.Room.from_arch_room": [[61, 82], ["isinstance", "isinstance", "isinstance", "isinstance", "residence.Room"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "from_arch_room", "(", "cls", ",", "house_key", ":", "str", ",", "room_index", ":", "int", ",", "arch_room", ":", "arch_parser", ".", "models", ".", "room", ".", "Room", ",", "surfaces", ":", "list", ")", ":", "\n", "        ", "\"\"\"\n        Parses room object from an arch_room.\n        :param house_key: House key\n        :param room_index: Room index\n        :param arch_room: Arch room\n        :param surfaces: List of surfaces\n        :return: Room\n        \"\"\"", "\n", "assert", "isinstance", "(", "house_key", ",", "str", ")", "\n", "assert", "isinstance", "(", "arch_room", ",", "arch_parser", ".", "models", ".", "room", ".", "Room", ")", "\n", "assert", "isinstance", "(", "room_index", ",", "int", ")", "\n", "assert", "isinstance", "(", "surfaces", ",", "list", ")", "\n", "\n", "room", "=", "Room", "(", "house_key", "=", "house_key", ",", "room_index", "=", "room_index", ",", "surfaces", "=", "surfaces", ")", "\n", "room", ".", "_arch_room", "=", "arch_room", "\n", "\n", "room", ".", "_types", "=", "arch_room", ".", "types", "\n", "room", ".", "_photos", "=", "arch_room", ".", "photos", "\n", "return", "room", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.common.residence.Room.room_index": [[83, 90], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "room_index", "(", "self", ")", "->", "int", ":", "\n", "        ", "\"\"\"\n        Return room index\n        :return: room inde\n        \"\"\"", "\n", "return", "self", ".", "_room_index", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.common.residence.Room.photos": [[91, 98], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "photos", "(", "self", ")", "->", "list", ":", "\n", "        ", "\"\"\"\n        Return list of photos assigned to the room.\n        :return: List of photos.\n        \"\"\"", "\n", "return", "self", ".", "_photos", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.common.residence.Room.house_key": [[99, 106], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "house_key", "(", "self", ")", "->", "str", ":", "\n", "        ", "\"\"\"\n        Return house key.\n        :return:\n        \"\"\"", "\n", "return", "self", ".", "_house_key", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.common.residence.Room.types": [[107, 114], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "types", "(", "self", ")", "->", "list", ":", "\n", "        ", "\"\"\"\n        Return the list of room types\n        :return: room types\n        \"\"\"", "\n", "return", "self", ".", "_types", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.common.residence.Room.surface_embeddings": [[115, 122], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "surface_embeddings", "(", "self", ")", "->", "dict", ":", "\n", "        ", "\"\"\"\n        Returns a dictionary mapping from surface type to a dictionary of embeddings.\n        surface_type -> {texture_key -> embedding tensor}\n        \"\"\"", "\n", "return", "self", ".", "_surface_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.common.residence.Room.surface_textures": [[123, 130], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "surface_textures", "(", "self", ")", "->", "dict", ":", "\n", "        ", "\"\"\"\n        Returns a dictionary mapping from surface type to a dictionary of textures.\n        surface_type -> {texture_key -> texture image}\n        \"\"\"", "\n", "return", "self", ".", "_surface_textures", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.common.residence.Room.surface_losses": [[131, 138], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "surface_losses", "(", "self", ")", "->", "dict", ":", "\n", "        ", "\"\"\"\n        Returns a dictionary mapping from surface type to a dictionary of vgg style losses.\n        surface_type -> {texture_key -> vgg style loss between input image and synthesized texture}\n        \"\"\"", "\n", "return", "self", ".", "_surface_losses", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.common.residence.House.__init__": [[145, 158], ["isinstance"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "house_key", ":", "str", ")", ":", "\n", "        ", "\"\"\"\n        Initalize a house\n        :param house_key: House key\n        \"\"\"", "\n", "assert", "isinstance", "(", "house_key", ",", "str", ")", "\n", "self", ".", "_house_key", "=", "house_key", "\n", "self", ".", "_rooms", "=", "{", "}", "# Mapping from room_index to Room", "\n", "self", ".", "_arch_house", "=", "None", "\n", "\n", "# Tuples of room indices. Each edge is represented twice (on both directions), \\", "\n", "# except for edges linking to outside world (represented only once).", "\n", "self", ".", "_door_connected_room_pairs", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.common.residence.House.sketch_house": [[159, 165], ["residence.House._arch_house.sketch_house"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.models.house.House.sketch_house"], ["", "def", "sketch_house", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", "->", "Image", ".", "Image", ":", "\n", "        ", "\"\"\"\n        Preview house as a 2D drawing.\n        :return: Sketch of the house.\n        \"\"\"", "\n", "return", "self", ".", "_arch_house", ".", "sketch_house", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.common.residence.House.preferred_format": [[166, 173], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "preferred_format", "(", "self", ")", "->", "PreferredFormat", ":", "\n", "        ", "\"\"\"\n        Return the preferred format to save the house.\n        :return: Preferred format to save the house.\n        \"\"\"", "\n", "return", "self", ".", "_arch_house", ".", "preferred_format", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.common.residence.House.house_key": [[174, 181], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "house_key", "(", "self", ")", "->", "str", ":", "\n", "        ", "\"\"\"\n        Return house key\n        :return: house key\n        \"\"\"", "\n", "return", "self", ".", "_house_key", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.common.residence.House.rooms": [[182, 189], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "rooms", "(", "self", ")", "->", "dict", ":", "\n", "        ", "\"\"\"\n        Returns a dictionary mapping from the room_index to room.\n        :return: Dictionary mapping from the room_index to room.\n        \"\"\"", "\n", "return", "self", ".", "_rooms", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.common.residence.House.door_connected_room_pairs": [[190, 200], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "door_connected_room_pairs", "(", "self", ")", "->", "list", ":", "\n", "        ", "\"\"\"\n        Returns room pairs connected by doors.\n        Each entry is a tuple with two room indices that are connected.\n        Connections among rooms are represented twice (once in each direction).\n        Connections to outside world are represented only once. The second tuple element in this case is -1.\n        :return: List of room pairs connected by doors.\n        \"\"\"", "\n", "return", "self", ".", "_door_connected_room_pairs", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.common.residence.House.from_arch_house": [[201, 227], ["residence.House", "enumerate", "arch_house.rooms.items", "residence.Room.from_arch_room", "residence.House.door_connected_room_pairs", "residence.House.door_connected_room_pairs"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.common.residence.Room.from_arch_room", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.models.house.House.door_connected_room_pairs", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.models.house.House.door_connected_room_pairs"], ["", "@", "classmethod", "\n", "def", "from_arch_house", "(", "cls", ",", "arch_house", ":", "arch_parser", ".", "models", ".", "house", ".", "House", ",", "surfaces", ":", "list", ")", ":", "\n", "        ", "\"\"\"\n        Wraps an arch.json house.\n        :param arch_house: House to wrap\n        :param surfaces: List of surfaces of the house.\n        :return: Wrapped house\n        \"\"\"", "\n", "room_id_room_index_map", "=", "{", "}", "\n", "house", "=", "House", "(", "arch_house", ".", "house_key", ")", "\n", "house", ".", "_arch_house", "=", "arch_house", "\n", "\n", "for", "room_index", ",", "(", "room_id", ",", "arch_room", ")", "in", "enumerate", "(", "arch_house", ".", "rooms", ".", "items", "(", ")", ")", ":", "\n", "            ", "room", "=", "Room", ".", "from_arch_room", "(", "house_key", "=", "arch_house", ".", "house_key", ",", "room_index", "=", "room_index", ",", "\n", "arch_room", "=", "arch_room", ",", "surfaces", "=", "surfaces", ")", "\n", "house", ".", "_rooms", "[", "room_index", "]", "=", "room", "\n", "room_id_room_index_map", "[", "room_id", "]", "=", "room_index", "\n", "\n", "# Generate RDR", "\n", "", "for", "k1", ",", "_", ",", "k2", "in", "arch_house", ".", "door_connected_room_pairs", ":", "\n", "            ", "if", "k2", "is", "None", ":", "\n", "                ", "house", ".", "door_connected_room_pairs", ".", "append", "(", "(", "room_id_room_index_map", "[", "k1", "]", ",", "-", "1", ")", ")", "\n", "", "else", ":", "\n", "                ", "house", ".", "door_connected_room_pairs", ".", "append", "(", "(", "room_id_room_index_map", "[", "k1", "]", ",", "room_id_room_index_map", "[", "k2", "]", ")", ")", "\n", "# print(room_key_room_index_map[k1], k2)", "\n", "", "", "return", "house", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.common.residence.House.flush": [[228, 235], ["residence.House.rooms.items", "room.flush"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.common.residence.House.flush"], ["", "def", "flush", "(", "self", ",", "flush_key", ":", "str", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Update textures of the house using textures having the specified flush key.\n        :param flush_key: Key of textures applied to surfaces.\n        \"\"\"", "\n", "for", "room_index", ",", "room", "in", "self", ".", "rooms", ".", "items", "(", ")", ":", "\n", "            ", "room", ".", "flush", "(", "flush_key", "=", "flush_key", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.common.residence.House.to_arch_json": [[236, 245], ["residence.House.flush", "arch_parser.serializer.serialize_arch_json", "arch_parser.serializer.serialize_arch_json"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.common.residence.House.flush", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.arch_parser.serializer.serialize_arch_json", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.arch_parser.serializer.serialize_arch_json"], ["", "", "def", "to_arch_json", "(", "self", ",", "texture_both_sides_of_walls", ":", "bool", ",", "flush_key", ":", "str", "=", "\"prop\"", ")", "->", "dict", ":", "\n", "        ", "\"\"\"\n        Returns a dictionary describing the house in arch.json format.\n        :param texture_both_sides_of_walls: Both sides of all walls are textured, including walls with only one interior side. The interior side texture is copied to exterior side.\n        :param flush_key: Key used to specify the textures.\n        :return: Dictionary in arch.json format\n        \"\"\"", "\n", "self", ".", "flush", "(", "flush_key", ")", "\n", "return", "serialize_arch_json", "(", "self", ".", "_arch_house", ",", "texture_both_sides_of_walls", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.common.residence.House.to_scene_json": [[246, 255], ["residence.House.flush", "arch_parser.serializer.serialize_scene_json", "arch_parser.serializer.serialize_scene_json"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.common.residence.House.flush", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.arch_parser.serializer.serialize_scene_json", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.arch_parser.serializer.serialize_scene_json"], ["", "def", "to_scene_json", "(", "self", ",", "texture_both_sides_of_walls", ":", "bool", ",", "flush_key", ":", "str", "=", "\"prop\"", ")", "->", "dict", ":", "\n", "        ", "\"\"\"\n        Returns a dictionary describing the house in scene.json format.\n        :param texture_both_sides_of_walls: Both sides of all walls are textured, including walls with only one interior side. The interior side texture is copied to exterior side.\n        :param flush_key: Key used to specify the textures.\n        :return: Dictionary in scene.json format.\n        \"\"\"", "\n", "self", ".", "flush", "(", "flush_key", ")", "\n", "return", "serialize_scene_json", "(", "self", ".", "_arch_house", ",", "texture_both_sides_of_walls", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.common.house_parser.parse_houses": [[22, 38], ["arch_parser.parser.parse_house_json_file", "plan2scene.common.residence.House.from_arch_house", "house_path_spec.format", "photoroom_csv_path_spec.format"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.arch_parser.parser.parse_house_json_file", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.common.residence.House.from_arch_house"], ["def", "parse_houses", "(", "conf", ":", "ConfigManager", ",", "house_keys", ",", "house_path_spec", ":", "str", ",", "photoroom_csv_path_spec", ":", "str", ")", "->", "dict", ":", "\n", "    ", "\"\"\"\n    Parse house arch_jsons into houses\n    :param conf: Config Manager\n    :param house_keys: Keys of houses to be parsed\n    :param house_path_spec: Spec of path to a house\n    :param photoroom_csv_path_spec: Spec of path to photoroom csv file\n    :return: mapping from house_key to parsed house\n    \"\"\"", "\n", "results", "=", "{", "}", "\n", "for", "house_key", "in", "house_keys", ":", "\n", "        ", "arch_house", "=", "parse_house_json_file", "(", "house_path_spec", ".", "format", "(", "house_key", "=", "house_key", ")", ",", "\n", "photoroom_csv_path_spec", ".", "format", "(", "house_key", "=", "house_key", ")", ")", "\n", "results", "[", "house_key", "]", "=", "House", ".", "from_arch_house", "(", "arch_house", ",", "surfaces", "=", "conf", ".", "surfaces", ")", "\n", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.common.house_parser.map_surface_crops_to_house": [[40, 59], ["house.rooms.items", "isinstance", "range", "range", "os.exists", "os.join", "plan2scene.utils.io.load_image", "PIL.Image.fromarray", "plan2scene.common.image_description.ImageDescription", "os.join", "numpy.array"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.io.load_image"], ["", "def", "map_surface_crops_to_house", "(", "conf", ":", "ConfigManager", ",", "house", ":", "House", ")", "->", "None", ":", "\n", "    ", "\"\"\"\n    For each room of the given house, load the rectified crops belonging to assigned photos as textures.\n    :param conf: Config Manager\n    :param house: House processed\n    \"\"\"", "\n", "for", "room_index", ",", "room", "in", "house", ".", "rooms", ".", "items", "(", ")", ":", "\n", "        ", "assert", "isinstance", "(", "room", ",", "Room", ")", "\n", "for", "photo", "in", "room", ".", "photos", ":", "\n", "            ", "for", "surface", "in", "conf", ".", "surfaces", ":", "\n", "                ", "surface_instances", "=", "[", "i", "for", "i", "in", "range", "(", "conf", ".", "texture_gen", ".", "masks_per_surface", "[", "surface", "]", ")", "]", "\n", "for", "surface_instance", "in", "surface_instances", ":", "\n", "                    ", "for", "crop_instance", "in", "range", "(", "conf", ".", "texture_gen", ".", "crops_per_mask", ")", ":", "\n", "                        ", "candidate_key", "=", "\"%s_%d_crop%d\"", "%", "(", "photo", ",", "surface_instance", ",", "crop_instance", ")", "\n", "if", "osp", ".", "exists", "(", "osp", ".", "join", "(", "conf", ".", "data_paths", ".", "rectified_crops_path", ",", "surface", ",", "candidate_key", "+", "\".png\"", ")", ")", ":", "\n", "                            ", "image", "=", "load_image", "(", "\n", "osp", ".", "join", "(", "conf", ".", "data_paths", ".", "rectified_crops_path", ",", "surface", ",", "candidate_key", "+", "\".png\"", ")", ")", "\n", "image", "=", "Image", ".", "fromarray", "(", "np", ".", "array", "(", "image", ")", ")", "# Drop any file system links", "\n", "room", ".", "surface_textures", "[", "surface", "]", "[", "candidate_key", "]", "=", "ImageDescription", "(", "image", ",", "ImageSource", ".", "DIRECT_CROP", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.common.house_parser.map_surface_crops_to_houses": [[61, 69], ["enumerate", "houses.items", "house_parser.map_surface_crops_to_house"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.common.house_parser.map_surface_crops_to_house"], ["", "", "", "", "", "", "", "def", "map_surface_crops_to_houses", "(", "conf", ":", "ConfigManager", ",", "houses", ":", "dict", ")", "->", "None", ":", "\n", "    ", "\"\"\"\n    For each room of every house, load the rectified crops belonging to assigned photos as textures.\n    :param conf: Config Manager\n    :param houses: House processed\n    \"\"\"", "\n", "for", "i", ",", "(", "house_key", ",", "house", ")", "in", "enumerate", "(", "houses", ".", "items", "(", ")", ")", ":", "\n", "        ", "map_surface_crops_to_house", "(", "conf", ",", "house", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.common.house_parser.save_arch": [[71, 98], ["arch_path.endswith", "arch_path.endswith", "house.to_arch_json", "open", "json.dump", "house.to_scene_json"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.common.residence.House.to_arch_json", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.common.residence.House.to_scene_json"], ["", "", "def", "save_arch", "(", "conf", ":", "ConfigManager", ",", "house", ":", "House", ",", "arch_path", ":", "str", ",", "texture_both_sides_of_walls", ")", "->", "None", ":", "\n", "    ", "\"\"\"\n    Saves a house as an arch.json file or a scene.json file.\n    :param conf: Config Manager\n    :param house: House to save\n    :param arch_path: Save path. We determine save format based on extension specified here.\n    :param texture_both_sides_of_walls: Both sides of all walls are textured, including walls with only one interior side. The interior side texture is copied to exterior side.\n    :return:\n    \"\"\"", "\n", "save_format", "=", "PreferredFormat", ".", "NONE", "\n", "if", "arch_path", ".", "endswith", "(", "\".arch.json\"", ")", ":", "\n", "        ", "save_format", "=", "PreferredFormat", ".", "ARCH_JSON", "\n", "", "elif", "arch_path", ".", "endswith", "(", "\".scene.json\"", ")", ":", "\n", "        ", "save_format", "=", "PreferredFormat", ".", "SCENE_JSON", "\n", "", "else", ":", "\n", "        ", "save_format", "=", "house", ".", "preferred_format", "\n", "arch_path", "+=", "save_format", ".", "extension", "\n", "\n", "", "if", "save_format", "==", "PreferredFormat", ".", "ARCH_JSON", ":", "\n", "        ", "house_json", "=", "house", ".", "to_arch_json", "(", "texture_both_sides_of_walls", "=", "texture_both_sides_of_walls", ")", "\n", "", "elif", "save_format", "==", "PreferredFormat", ".", "SCENE_JSON", ":", "\n", "        ", "house_json", "=", "house", ".", "to_scene_json", "(", "texture_both_sides_of_walls", "=", "texture_both_sides_of_walls", ")", "\n", "", "else", ":", "\n", "        ", "assert", "False", ",", "\"Save format unspecified\"", "\n", "\n", "", "with", "open", "(", "arch_path", ",", "\"w\"", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "house_json", ",", "f", ",", "indent", "=", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.common.house_parser.save_house_crops": [[100, 122], ["house.rooms.items", "os.exists", "os.exists", "os.mkdir", "os.mkdir", "isinstance", "room.surface_textures.items", "os.exists", "os.mkdir", "os.mkdir", "crop_map.items", "os.join", "os.join", "os.exists", "os.mkdir", "os.mkdir", "isinstance", "crop_img_description.save", "os.join", "os.join", "os.join"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.common.image_description.ImageDescription.save"], ["", "", "def", "save_house_crops", "(", "house", ":", "House", ",", "save_path", ":", "str", ")", "->", "None", ":", "\n", "    ", "\"\"\"\n    Save textures/crops of a house to disk\n    :param house: House to save\n    :param save_path: Save path\n    \"\"\"", "\n", "assert", "not", "osp", ".", "exists", "(", "save_path", ")", ",", "f\"Already saved. Please delete {save_path}\"", "\n", "\n", "if", "not", "osp", ".", "exists", "(", "save_path", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "save_path", ")", "\n", "\n", "", "for", "room_index", ",", "room", "in", "house", ".", "rooms", ".", "items", "(", ")", ":", "\n", "        ", "assert", "isinstance", "(", "room", ",", "Room", ")", "\n", "if", "not", "osp", ".", "exists", "(", "osp", ".", "join", "(", "save_path", ",", "room", ".", "room_id", ")", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "osp", ".", "join", "(", "save_path", ",", "room", ".", "room_id", ")", ")", "\n", "\n", "", "for", "surface", ",", "crop_map", "in", "room", ".", "surface_textures", ".", "items", "(", ")", ":", "\n", "            ", "if", "not", "osp", ".", "exists", "(", "osp", ".", "join", "(", "save_path", ",", "room", ".", "room_id", ",", "surface", ")", ")", ":", "\n", "                ", "os", ".", "mkdir", "(", "osp", ".", "join", "(", "save_path", ",", "room", ".", "room_id", ",", "surface", ")", ")", "\n", "", "for", "crop_name", ",", "crop_img_description", "in", "crop_map", ".", "items", "(", ")", ":", "\n", "                ", "assert", "isinstance", "(", "crop_img_description", ",", "ImageDescription", ")", "\n", "crop_img_description", ".", "save", "(", "osp", ".", "join", "(", "save_path", ",", "room", ".", "room_id", ",", "surface", ",", "crop_name", "+", "\".png\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.common.house_parser.save_house_texture_embeddings": [[124, 151], ["house.rooms.items", "os.exists", "isinstance", "open", "json.dump", "emb.tolist", "room.surface_embeddings.items", "emb_loss.item", "room.surface_losses.items", "emb_map.items", "emb_loss_map.items"], "function", ["None"], ["", "", "", "", "def", "save_house_texture_embeddings", "(", "house", ":", "House", ",", "save_path", ":", "str", "=", "None", ")", "->", "dict", ":", "\n", "    ", "\"\"\"\n    Saves texture embeddings of a house to disk\n    :param house: House to save.\n    :param save_path: Optional. Path to save.\n    :return: Content to save as a dictionary.\n    \"\"\"", "\n", "assert", "not", "osp", ".", "exists", "(", "save_path", ")", ",", "f\"Already saved. Please delete {save_path}\"", "\n", "room_id_embeddings_map", "=", "{", "}", "\n", "for", "room_index", ",", "room", "in", "house", ".", "rooms", ".", "items", "(", ")", ":", "\n", "        ", "assert", "isinstance", "(", "room", ",", "Room", ")", "\n", "room_id", "=", "room", ".", "room_id", "\n", "room_id_embeddings_map", "[", "room_id", "]", "=", "{", "\n", "\"texture_embeddings\"", ":", "{", "surf", ":", "{", "emb_key", ":", "emb", ".", "tolist", "(", ")", "for", "emb_key", ",", "emb", "in", "emb_map", ".", "items", "(", ")", "}", "for", "surf", ",", "emb_map", "\n", "in", "room", ".", "surface_embeddings", ".", "items", "(", ")", "}", ",", "\n", "\"texture_loss\"", ":", "{", "surf", ":", "{", "emb_key", ":", "emb_loss", ".", "item", "(", ")", "for", "emb_key", ",", "emb_loss", "in", "emb_loss_map", ".", "items", "(", ")", "}", "for", "\n", "surf", ",", "emb_loss_map", "\n", "in", "room", ".", "surface_losses", ".", "items", "(", ")", "}", "\n", "}", "\n", "", "result", "=", "{", "\n", "\"house_key\"", ":", "house", ".", "house_key", ",", "\n", "\"rooms\"", ":", "room_id_embeddings_map", "\n", "}", "\n", "if", "save_path", "is", "not", "None", ":", "\n", "        ", "with", "open", "(", "save_path", ",", "\"w\"", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "result", ",", "f", ",", "indent", "=", "4", ")", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.common.house_parser.load_house_crops": [[153, 198], ["house.rooms.items", "isinstance", "os.exists", "os.join", "os.join", "os.exists", "os.join", "os.listdir", "os.listdir", "os.exists", "os.listdir", "os.listdir", "os.exists", "os.listdir", "os.listdir", "os.join", "plan2scene.common.image_description.ImageDescription.parse_image", "os.join", "os.join", "len", "len", "len", "os.join", "os.join", "len", "len", "len", "a.endswith", "os.path.splitext", "os.path.splitext", "os.join", "a.endswith", "a.endswith"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.common.image_description.ImageDescription.parse_image", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len"], ["", "def", "load_house_crops", "(", "conf", ":", "ConfigManager", ",", "house", ":", "House", ",", "save_path", ":", "str", ",", "exclude_prior_path", ":", "str", "=", "None", ",", "restrict_prior_path", ":", "str", "=", "None", ")", "->", "None", ":", "\n", "    ", "\"\"\"\n    Load texture crops of a house from disk\n    :param house: House to assign loaded texture crops\n    :param save_path: Save location of texture crops\n    :param exclude_prior_path: Specify prior prediction save path here to exclude surfaces that has a prior prediction.\n    :param restrict_prior_path: Specify prior prediction save path here to only load surfaces that has a prior prediction.\n    \"\"\"", "\n", "for", "room_index", ",", "room", "in", "house", ".", "rooms", ".", "items", "(", ")", ":", "\n", "        ", "assert", "isinstance", "(", "room", ",", "Room", ")", "\n", "# import pdb; pdb.set_trace()", "\n", "assert", "osp", ".", "exists", "(", "osp", ".", "join", "(", "save_path", ",", "room", ".", "room_id", ")", ")", ",", "\"Not exist %s\"", "%", "osp", ".", "join", "(", "save_path", ",", "room", ".", "room_id", ")", "\n", "\n", "for", "surface", "in", "conf", ".", "surfaces", ":", "\n", "# import pdb; pdb.set_trace()", "\n", "            ", "if", "osp", ".", "exists", "(", "osp", ".", "join", "(", "save_path", ",", "room", ".", "room_id", ",", "surface", ")", ")", ":", "\n", "                ", "if", "exclude_prior_path", "is", "not", "None", ":", "# Exclude prior predictions", "\n", "                    ", "assert", "osp", ".", "exists", "(", "osp", ".", "join", "(", "exclude_prior_path", ",", "room", ".", "room_id", ",", "surface", ")", ")", ",", "\"Prior path doesn't have a matching room surface.\"", "\n", "prior_files", "=", "os", ".", "listdir", "(", "osp", ".", "join", "(", "exclude_prior_path", ",", "room", ".", "room_id", ",", "surface", ")", ")", "\n", "prior_files", "=", "[", "a", "for", "a", "in", "prior_files", "if", "a", ".", "endswith", "(", "\".png\"", ")", "]", "\n", "assert", "len", "(", "prior_files", ")", "<=", "1", ",", "\"Multiple prior predictions.\"", "\n", "if", "len", "(", "prior_files", ")", "==", "1", ":", "\n", "                        ", "assert", "\"prop\"", "in", "prior_files", "[", "0", "]", ",", "\"Invalid prior prediction\"", "\n", "\n", "", "if", "len", "(", "prior_files", ")", ">", "0", ":", "\n", "# We have prior predictions. Therefore, exclude this surface.", "\n", "                        ", "continue", "\n", "\n", "", "", "if", "restrict_prior_path", "is", "not", "None", ":", "# Restrict to prior predictions", "\n", "                    ", "assert", "osp", ".", "exists", "(", "osp", ".", "join", "(", "restrict_prior_path", ",", "room", ".", "room_id", ",", "surface", ")", ")", ",", "\"Prior path doesn't have a matching room surface.\"", "\n", "prior_files", "=", "os", ".", "listdir", "(", "osp", ".", "join", "(", "restrict_prior_path", ",", "room", ".", "room_id", ",", "surface", ")", ")", "\n", "prior_files", "=", "[", "a", "for", "a", "in", "prior_files", "if", "a", ".", "endswith", "(", "\".png\"", ")", "]", "\n", "assert", "len", "(", "prior_files", ")", "<=", "1", ",", "\"Multiple prior predictions.\"", "\n", "if", "len", "(", "prior_files", ")", "==", "1", ":", "\n", "                        ", "assert", "\"prop\"", "in", "prior_files", "[", "0", "]", ",", "\"Invalid prior prediction\"", "\n", "", "if", "len", "(", "prior_files", ")", "==", "0", ":", "\n", "# We don't have prior predictions. Therefore, exclude this surface.", "\n", "                        ", "continue", "\n", "\n", "", "", "crop_files", "=", "os", ".", "listdir", "(", "osp", ".", "join", "(", "save_path", ",", "room", ".", "room_id", ",", "surface", ")", ")", "\n", "crop_files", "=", "[", "a", "for", "a", "in", "crop_files", "if", "a", ".", "endswith", "(", "\".png\"", ")", "]", "\n", "for", "crop_file", "in", "crop_files", ":", "\n", "                    ", "crop_name", "=", "os", ".", "path", ".", "splitext", "(", "crop_file", ")", "[", "0", "]", "\n", "crop_image_description", "=", "ImageDescription", ".", "parse_image", "(", "osp", ".", "join", "(", "save_path", ",", "room", ".", "room_id", ",", "surface", ",", "crop_file", ")", ")", "\n", "room", ".", "surface_textures", "[", "surface", "]", "[", "crop_name", "]", "=", "crop_image_description", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.common.house_parser.load_house_texture_embeddings": [[200, 222], ["house.rooms.items", "open", "json.load", "isinstance", "torch.tensor", "torch.tensor", "[].items", "[].items"], "function", ["None"], ["", "", "", "", "", "def", "load_house_texture_embeddings", "(", "house", ":", "House", ",", "save_path", ":", "str", ")", "->", "None", ":", "\n", "    ", "\"\"\"\n    Load texture embeddings (and losses) of a house from disk\n    :param house: House to assignn loaded embeddings\n    :param save_path: Save location of texture embeddings\n    \"\"\"", "\n", "with", "open", "(", "save_path", ")", "as", "f", ":", "\n", "        ", "embedding_json", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "assert", "embedding_json", "[", "\"house_key\"", "]", "==", "house", ".", "house_key", "\n", "room_id_embeddings_map", "=", "embedding_json", "[", "\"rooms\"", "]", "\n", "\n", "for", "room_index", ",", "room", "in", "house", ".", "rooms", ".", "items", "(", ")", ":", "\n", "        ", "assert", "isinstance", "(", "room", ",", "Room", ")", "\n", "room_id", "=", "room", ".", "room_id", "\n", "room_json", "=", "room_id_embeddings_map", "[", "room_id", "]", "\n", "for", "surface", "in", "room_json", "[", "\"texture_embeddings\"", "]", ":", "\n", "            ", "room", ".", "surface_embeddings", "[", "surface", "]", "=", "{", "k", ":", "torch", ".", "tensor", "(", "v", ",", "dtype", "=", "torch", ".", "float32", ")", "for", "k", ",", "v", "in", "\n", "room_json", "[", "\"texture_embeddings\"", "]", "[", "surface", "]", ".", "items", "(", ")", "}", "\n", "", "for", "surface", "in", "room_json", "[", "\"texture_loss\"", "]", ":", "\n", "            ", "room", ".", "surface_losses", "[", "surface", "]", "=", "{", "k", ":", "torch", ".", "tensor", "(", "v", ",", "dtype", "=", "torch", ".", "float32", ")", "for", "k", ",", "v", "in", "\n", "room_json", "[", "\"texture_loss\"", "]", "[", "surface", "]", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.common.house_parser.load_houses_with_textures": [[224, 244], ["conf.get_data_list", "house_parser.parse_houses", "enumerate", "parse_houses.items", "house_parser.load_house_crops", "conf.data_paths.arch_path_spec.format", "conf.data_paths.photoroom_path_spec.format", "os.join"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.plan2scene.config_manager.ConfigManager.get_data_list", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.common.house_parser.parse_houses", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.common.house_parser.load_house_crops"], ["", "", "", "def", "load_houses_with_textures", "(", "conf", ":", "ConfigManager", ",", "data_split", ":", "str", ",", "drop_fraction", ":", "str", ",", "textures_path", ":", "str", ")", "->", "dict", ":", "\n", "    ", "\"\"\"\n    Load houses for the specified data split and drop setting. Then, assign textures to them.\n    :param conf: Config Manager\n    :param data_split: Train/val/test.\n    :param drop_fraction: Photo unobserve setting.\n    :param textures_path: Path containing saved textures.\n    :return: Dictionary of houses\n    \"\"\"", "\n", "house_keys", "=", "conf", ".", "get_data_list", "(", "data_split", ")", "\n", "houses", "=", "parse_houses", "(", "conf", ",", "house_keys", ",", "house_path_spec", "=", "conf", ".", "data_paths", ".", "arch_path_spec", ".", "format", "(", "split", "=", "data_split", ",", "\n", "house_key", "=", "\"{house_key}\"", ")", ",", "\n", "photoroom_csv_path_spec", "=", "conf", ".", "data_paths", ".", "photoroom_path_spec", ".", "format", "(", "split", "=", "data_split", ",", "\n", "drop_fraction", "=", "drop_fraction", ",", "\n", "house_key", "=", "\"{house_key}\"", ")", ")", "\n", "for", "i", ",", "(", "house_key", ",", "house", ")", "in", "enumerate", "(", "houses", ".", "items", "(", ")", ")", ":", "\n", "        ", "load_house_crops", "(", "conf", ",", "house", ",", "\n", "osp", ".", "join", "(", "textures_path", ",", "house_key", ")", ")", "\n", "\n", "", "return", "houses", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.common.house_parser.load_houses_with_embeddings": [[246, 268], ["conf.get_data_list", "house_parser.parse_houses", "enumerate", "parse_houses.items", "house_parser.load_house_texture_embeddings", "conf.data_paths.arch_path_spec.format", "conf.data_paths.photoroom_path_spec.format", "os.join"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.plan2scene.config_manager.ConfigManager.get_data_list", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.common.house_parser.parse_houses", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.common.house_parser.load_house_texture_embeddings"], ["", "def", "load_houses_with_embeddings", "(", "conf", ":", "ConfigManager", ",", "data_split", ":", "str", ",", "drop_fraction", ":", "str", ",", "embeddings_path", ":", "str", ")", ":", "\n", "    ", "\"\"\"\n    Load houses for the specified data split and drop setting. Then, assign embeddings to them.\n    :param conf: Config Manager\n    :param data_split: Train/val/test.\n    :param drop_fraction: Photo unobserve setting.\n    :param embeddings_path: Path containing saved embedding files.\n    :return: Dictionary of houses\n    \"\"\"", "\n", "# Load houses", "\n", "house_keys", "=", "conf", ".", "get_data_list", "(", "data_split", ")", "\n", "houses", "=", "parse_houses", "(", "conf", ",", "house_keys", ",", "house_path_spec", "=", "conf", ".", "data_paths", ".", "arch_path_spec", ".", "format", "(", "split", "=", "data_split", ",", "\n", "house_key", "=", "\"{house_key}\"", ")", ",", "\n", "photoroom_csv_path_spec", "=", "conf", ".", "data_paths", ".", "photoroom_path_spec", ".", "format", "(", "split", "=", "data_split", ",", "\n", "drop_fraction", "=", "drop_fraction", ",", "\n", "house_key", "=", "\"{house_key}\"", ")", ")", "\n", "\n", "for", "i", ",", "(", "house_key", ",", "house", ")", "in", "enumerate", "(", "houses", ".", "items", "(", ")", ")", ":", "\n", "        ", "load_house_texture_embeddings", "(", "house", ",", "\n", "osp", ".", "join", "(", "embeddings_path", ",", "house_key", "+", "\".json\"", ")", ")", "\n", "\n", "", "return", "houses", "\n", "", ""]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.arch_parser.preferred_format.PreferredFormat.__init__": [[12, 15], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "name", ",", "extension", ")", ":", "\n", "        ", "self", ".", "_name", "=", "name", "\n", "self", ".", "_extension", "=", "extension", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.arch_parser.preferred_format.PreferredFormat.name": [[16, 19], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_name", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.arch_parser.preferred_format.PreferredFormat.extension": [[20, 23], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "extension", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_extension", "\n", "", "", ""]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.arch_parser.parser.parse_photo_assignments": [[17, 26], ["range", "len", "house.rooms[].photos.append"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len"], ["def", "parse_photo_assignments", "(", "photoroom_df", ":", "pd", ".", "DataFrame", ",", "house", ":", "House", ")", "->", "None", ":", "\n", "    ", "\"\"\"\n    Parses photo to room assignments.\n    :param photoroom_df: Dataframe defining photo room assignments.\n    :param house: House that gets updated.\n    \"\"\"", "\n", "for", "i", "in", "range", "(", "len", "(", "photoroom_df", ")", ")", ":", "\n", "        ", "entry", "=", "photoroom_df", ".", "iloc", "[", "i", "]", "\n", "house", ".", "rooms", "[", "entry", ".", "roomId", "]", ".", "photos", ".", "append", "(", "entry", ".", "photo", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.arch_parser.parser.parse_rdr": [[28, 36], ["house.door_connected_room_pairs.append"], "function", ["None"], ["", "", "def", "parse_rdr", "(", "rdr_json", ":", "list", ",", "house", ":", "House", ")", "->", "None", ":", "\n", "    ", "\"\"\"\n    Parses room-door-room connectivity graph.\n    :param rdr_json: List of room door room edges.\n    :param house: House that gets updated.\n    \"\"\"", "\n", "for", "from_room_id", ",", "hole_id", ",", "to_room_id", "in", "rdr_json", ":", "\n", "        ", "house", ".", "door_connected_room_pairs", ".", "append", "(", "(", "from_room_id", ",", "hole_id", ",", "to_room_id", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.arch_parser.parser.parse_rooms": [[38, 49], ["arch_parser.models.room.Room", "arch_parser.models.room.Room.types.append"], "function", ["None"], ["", "", "def", "parse_rooms", "(", "rooms_json", ":", "list", ",", "house", ":", "House", ")", "->", "None", ":", "\n", "    ", "\"\"\"\n    Parses room definitions of an arch.json.\n    :param rooms_json: List of room definition\n    :param house: House that gets updated.\n    \"\"\"", "\n", "for", "room_json", "in", "rooms_json", ":", "\n", "        ", "room", "=", "Room", "(", "house", ".", "house_key", ",", "room_json", "[", "\"id\"", "]", ")", "\n", "for", "room_type", "in", "room_json", "[", "\"types\"", "]", ":", "\n", "            ", "room", ".", "types", ".", "append", "(", "room_type", ")", "\n", "", "house", ".", "rooms", "[", "room", ".", "room_id", "]", "=", "room", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.arch_parser.parser.parse_material": [[51, 78], ["arch_parser.json_util.data_url_to_pil", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.arch_parser.json_util.data_url_to_pil", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len"], ["", "", "def", "parse_material", "(", "material_entry", ":", "dict", ",", "arch_json", ":", "dict", ")", "->", "Image", ".", "Image", ":", "\n", "    ", "\"\"\"\n    Parses a material assigned to an arch surface.\n    :param material_entry: Entry { name: '', materialId: '' } assigning a material to a surface.\n    :param arch_json: Arch json of the house.\n    :return: Parsed material as an Image\n    \"\"\"", "\n", "if", "\"materialId\"", "not", "in", "material_entry", ":", "\n", "        ", "return", "None", "\n", "\n", "# Parse material entry", "\n", "", "mat_entry", "=", "[", "a", "for", "a", "in", "arch_json", "[", "\"materials\"", "]", "if", "a", "[", "\"uuid\"", "]", "==", "material_entry", "[", "\"materialId\"", "]", "]", "\n", "assert", "len", "(", "mat_entry", ")", "==", "1", "\n", "mat_entry", "=", "mat_entry", "[", "0", "]", "\n", "\n", "# Parse texture entry", "\n", "texture_entry", "=", "[", "a", "for", "a", "in", "arch_json", "[", "\"textures\"", "]", "if", "a", "[", "\"uuid\"", "]", "==", "mat_entry", "[", "\"map\"", "]", "]", "\n", "assert", "len", "(", "texture_entry", ")", "==", "1", "\n", "texture_entry", "=", "texture_entry", "[", "0", "]", "\n", "\n", "# Parse image entry", "\n", "image_entry", "=", "[", "a", "for", "a", "in", "arch_json", "[", "\"images\"", "]", "if", "a", "[", "\"uuid\"", "]", "==", "texture_entry", "[", "\"image\"", "]", "]", "\n", "assert", "len", "(", "image_entry", ")", "==", "1", "\n", "image_entry", "=", "image_entry", "[", "0", "]", "\n", "\n", "image", "=", "data_url_to_pil", "(", "image_entry", "[", "\"url\"", "]", ")", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.arch_parser.parser.parse_floor_element": [[80, 100], ["arch_parser.models.floor.Floor", "isinstance", "tuple", "len", "parser.parse_material", "element_json.items"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.arch_parser.parser.parse_material"], ["", "def", "parse_floor_element", "(", "element_json", ":", "dict", ",", "arch_json", ":", "dict", ",", "house", ":", "House", ")", "->", "None", ":", "\n", "    ", "\"\"\"\n    Parses floor element.\n    :param element_json: Floor element json from arch.json.\n    :param arch_json: Arch json.\n    :param house: House that gets updated.\n    \"\"\"", "\n", "room_id", "=", "element_json", "[", "\"roomId\"", "]", "\n", "floor_points", "=", "[", "tuple", "(", "p", ")", "for", "p", "in", "element_json", "[", "\"points\"", "]", "[", "0", "]", "]", "\n", "extra_args", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "element_json", ".", "items", "(", ")", "if", "k", "not", "in", "[", "\"points\"", ",", "\"roomId\"", ",", "\"id\"", ",", "\"type\"", ",", "\"materials\"", "]", "}", "\n", "floor", "=", "Floor", "(", "floor_id", "=", "element_json", "[", "\"id\"", "]", ",", "points", "=", "floor_points", ",", "extra_args", "=", "extra_args", ")", "\n", "\n", "room", "=", "house", ".", "rooms", "[", "room_id", "]", "\n", "assert", "isinstance", "(", "room", ",", "Room", ")", "\n", "\n", "if", "len", "(", "element_json", "[", "\"materials\"", "]", ")", ">", "0", ":", "\n", "        ", "room", ".", "floor_texture", "=", "parse_material", "(", "element_json", "[", "\"materials\"", "]", "[", "0", "]", ",", "arch_json", ")", "\n", "\n", "", "assert", "room", ".", "floor", "is", "None", "\n", "house", ".", "rooms", "[", "room_id", "]", ".", "floor", "=", "floor", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.arch_parser.parser.parse_hole": [[102, 119], ["arch_parser.models.hole.Hole", "wall.holes.append", "hole_json.items"], "function", ["None"], ["", "def", "parse_hole", "(", "hole_json", ":", "dict", ",", "wall", ":", "Wall", ")", "->", "None", ":", "\n", "    ", "\"\"\"\n    Parses a hole in a wall.\n    :param hole_json: Hole json.\n    :param wall: Wall that gets updated.\n    \"\"\"", "\n", "hole_id", "=", "hole_json", "[", "\"id\"", "]", "\n", "hole_type", "=", "hole_json", "[", "\"type\"", "]", "\n", "min_height", "=", "hole_json", "[", "\"box\"", "]", "[", "\"min\"", "]", "[", "1", "]", "\n", "max_height", "=", "hole_json", "[", "\"box\"", "]", "[", "\"max\"", "]", "[", "1", "]", "\n", "start", "=", "hole_json", "[", "\"box\"", "]", "[", "\"min\"", "]", "[", "0", "]", "\n", "end", "=", "hole_json", "[", "\"box\"", "]", "[", "\"max\"", "]", "[", "0", "]", "\n", "extra_args", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "hole_json", ".", "items", "(", ")", "if", "k", "not", "in", "[", "\"box\"", ",", "\"id\"", ",", "\"type\"", "]", "}", "\n", "\n", "hole", "=", "Hole", "(", "hole_id", "=", "hole_id", ",", "hole_type", "=", "hole_type", ",", "start", "=", "start", ",", "end", "=", "end", ",", "min_height", "=", "min_height", ",", "max_height", "=", "max_height", ",", "\n", "extra_args", "=", "extra_args", ")", "\n", "wall", ".", "holes", ".", "append", "(", "hole", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.arch_parser.parser.parse_wall_element": [[121, 152], ["arch_parser.models.wall.Wall", "enumerate", "tuple", "len", "parser.parse_hole", "isinstance", "isinstance", "house.rooms[].walls.append", "element_json.items", "tuple", "tuple", "len", "parser.parse_material", "arch_parser.models.wall_room_assignment.WallRoomAssignment"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.arch_parser.parser.parse_hole", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.arch_parser.parser.parse_material"], ["", "def", "parse_wall_element", "(", "element_json", ":", "dict", ",", "arch_json", ":", "dict", ",", "house", ":", "House", ")", "->", "None", ":", "\n", "    ", "\"\"\"\n    Parses a wall element.\n    :param element_json: Wall element in arch.json file.\n    :param arch_json: Arch json\n    :param house: House that gets updated.\n    \"\"\"", "\n", "wall_points", "=", "[", "tuple", "(", "p", ")", "for", "p", "in", "element_json", "[", "\"points\"", "]", "]", "\n", "assert", "len", "(", "wall_points", ")", "==", "2", "\n", "\n", "extra_args", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "element_json", ".", "items", "(", ")", "if", "k", "not", "in", "[", "\"points\"", ",", "\"holes\"", ",", "\"roomId\"", ",", "\"id\"", ",", "\"type\"", ",", "\"materials\"", "]", "}", "\n", "wall", "=", "Wall", "(", "wall_id", "=", "element_json", "[", "\"id\"", "]", ",", "p1", "=", "tuple", "(", "wall_points", "[", "0", "]", ")", ",", "p2", "=", "tuple", "(", "wall_points", "[", "1", "]", ")", ",", "extra_args", "=", "extra_args", ")", "\n", "\n", "for", "hole_json", "in", "element_json", "[", "\"holes\"", "]", ":", "\n", "        ", "parse_hole", "(", "hole_json", ",", "wall", ")", "\n", "\n", "", "room_ids", "=", "element_json", "[", "\"roomId\"", "]", "\n", "if", "not", "isinstance", "(", "room_ids", ",", "list", ")", ":", "\n", "# Convert to two rooms per wall format", "\n", "        ", "room_ids", "=", "[", "None", ",", "room_ids", "]", "\n", "\n", "", "for", "i", ",", "room_id", "in", "enumerate", "(", "room_ids", ")", ":", "\n", "        ", "if", "room_id", "is", "None", ":", "\n", "            ", "continue", "\n", "\n", "", "room", "=", "house", ".", "rooms", "[", "room_id", "]", "\n", "assert", "isinstance", "(", "room", ",", "Room", ")", "\n", "if", "len", "(", "element_json", "[", "\"materials\"", "]", ")", ">", "0", ":", "\n", "            ", "room", ".", "wall_texture", "=", "parse_material", "(", "element_json", "[", "\"materials\"", "]", "[", "i", "]", ",", "arch_json", ")", "\n", "\n", "", "house", ".", "rooms", "[", "room_id", "]", ".", "walls", ".", "append", "(", "WallRoomAssignment", "(", "wall", ",", "i", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.arch_parser.parser.parse_ceiling_element": [[154, 174], ["arch_parser.models.ceiling.Ceiling", "isinstance", "tuple", "len", "parser.parse_material", "element_json.items"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.arch_parser.parser.parse_material"], ["", "", "def", "parse_ceiling_element", "(", "element_json", ":", "dict", ",", "arch_json", ":", "dict", ",", "house", ":", "House", ")", "->", "None", ":", "\n", "    ", "\"\"\"\n    Parses a ceiling element.\n    :param element_json: Ceiling element from arch.json.\n    :param arch_json: Arch json.\n    :param house: House that gets updated.\n    \"\"\"", "\n", "room_id", "=", "element_json", "[", "\"roomId\"", "]", "\n", "ceiling_points", "=", "[", "tuple", "(", "p", ")", "for", "p", "in", "element_json", "[", "\"points\"", "]", "[", "0", "]", "]", "\n", "extra_args", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "element_json", ".", "items", "(", ")", "if", "k", "not", "in", "[", "\"points\"", ",", "\"roomId\"", ",", "\"id\"", ",", "\"type\"", ",", "\"materials\"", "]", "}", "\n", "ceiling", "=", "Ceiling", "(", "ceiling_id", "=", "element_json", "[", "\"id\"", "]", ",", "points", "=", "ceiling_points", ",", "extra_args", "=", "extra_args", ")", "\n", "\n", "room", "=", "house", ".", "rooms", "[", "room_id", "]", "\n", "assert", "isinstance", "(", "room", ",", "Room", ")", "\n", "\n", "if", "len", "(", "element_json", "[", "\"materials\"", "]", ")", ">", "0", ":", "\n", "        ", "room", ".", "ceiling_texture", "=", "parse_material", "(", "element_json", "[", "\"materials\"", "]", "[", "0", "]", ",", "arch_json", ")", "\n", "\n", "", "assert", "house", ".", "rooms", "[", "room_id", "]", ".", "ceiling", "is", "None", "\n", "house", ".", "rooms", "[", "room_id", "]", ".", "ceiling", "=", "ceiling", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.arch_parser.parser.parse_elements": [[176, 190], ["parser.parse_floor_element", "parser.parse_ceiling_element", "parser.parse_wall_element"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.arch_parser.parser.parse_floor_element", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.arch_parser.parser.parse_ceiling_element", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.arch_parser.parser.parse_wall_element"], ["", "def", "parse_elements", "(", "elements_json", ":", "list", ",", "arch_json", ":", "dict", ",", "house", ":", "House", ")", "->", "None", ":", "\n", "    ", "\"\"\"\n    Parses elements list of an arch.json file. Updates house.\n    :param elements_json: List of elements to parse.\n    :param arch_json: Arch json of the house.\n    :param house: House that gets updated.\n    \"\"\"", "\n", "for", "element_json", "in", "elements_json", ":", "\n", "        ", "if", "element_json", "[", "\"type\"", "]", "==", "\"Floor\"", ":", "\n", "            ", "parse_floor_element", "(", "element_json", ",", "arch_json", ",", "house", ")", "\n", "", "elif", "element_json", "[", "\"type\"", "]", "==", "\"Ceiling\"", ":", "\n", "            ", "parse_ceiling_element", "(", "element_json", ",", "arch_json", ",", "house", ")", "\n", "", "elif", "element_json", "[", "\"type\"", "]", "==", "\"Wall\"", ":", "\n", "            ", "parse_wall_element", "(", "element_json", ",", "arch_json", ",", "house", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.arch_parser.parser.parse_arch_json_from_file": [[192, 211], ["parser.parse_arch_json", "open", "json.load", "open", "pandas.read_csv"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.arch_parser.parser.parse_arch_json"], ["", "", "", "def", "parse_arch_json_from_file", "(", "arch_json_path", ":", "str", ",", "photoroom_csv_path", ":", "str", ")", "->", "House", ":", "\n", "    ", "\"\"\"\n    Parses a house given the arch.json and the photoroom.csv\n    :param arch_json_path: str: Path to arch.json\n    :param photoroom_csv_path: str: Path to photoroom.csv\n    :return: Parsed house\n    \"\"\"", "\n", "\n", "with", "open", "(", "arch_json_path", ")", "as", "f", ":", "\n", "        ", "arch_json", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "photoroom_df", "=", "None", "\n", "if", "photoroom_csv_path", "is", "not", "None", ":", "\n", "        ", "with", "open", "(", "photoroom_csv_path", ")", "as", "f", ":", "\n", "            ", "photoroom_df", "=", "pd", ".", "read_csv", "(", "f", ")", "\n", "\n", "", "", "house", "=", "parse_arch_json", "(", "arch_json", ",", "photoroom_df", ")", "\n", "house", ".", "preferred_format", "=", "PreferredFormat", ".", "ARCH_JSON", "\n", "return", "house", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.arch_parser.parser.parse_arch_json": [[213, 238], ["arch_parser.models.house.House", "parser.parse_rooms", "parser.parse_elements", "parser.parse_rdr", "arch_json.items", "parser.parse_photo_assignments"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.arch_parser.parser.parse_rooms", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.arch_parser.parser.parse_elements", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.arch_parser.parser.parse_rdr", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.arch_parser.parser.parse_photo_assignments"], ["", "def", "parse_arch_json", "(", "arch_json", ":", "dict", ",", "photoroom_df", ":", "pd", ".", "DataFrame", ")", "->", "House", ":", "\n", "    ", "\"\"\"\n    Parses an arch_json to a house.\n    :param arch_json: Arch json as a dict.\n    :param photoroom_df: CSV describing photo room assignments.\n    :return: Parsed house.\n    \"\"\"", "\n", "house_key", "=", "arch_json", "[", "\"id\"", "]", "\n", "result", "=", "House", "(", "house_key", ")", "\n", "parse_rooms", "(", "arch_json", "[", "\"rooms\"", "]", ",", "result", ")", "\n", "parse_elements", "(", "arch_json", "[", "\"elements\"", "]", ",", "arch_json", ",", "result", ")", "\n", "parse_rdr", "(", "arch_json", "[", "\"rdr\"", "]", ",", "result", ")", "\n", "if", "photoroom_df", "is", "not", "None", ":", "\n", "        ", "parse_photo_assignments", "(", "photoroom_df", ",", "result", ")", "\n", "\n", "", "for", "k", ",", "v", "in", "arch_json", ".", "items", "(", ")", ":", "\n", "        ", "if", "k", "in", "[", "\"elements\"", ",", "\"rdr\"", ",", "\"rooms\"", ",", "\"id\"", "]", ":", "\n", "            ", "pass", "# Handled above", "\n", "", "elif", "k", "in", "[", "\"materials\"", ",", "\"textures\"", ",", "\"images\"", "]", ":", "\n", "            ", "pass", "# Already processed when the assigned element got processed", "\n", "", "else", ":", "\n", "# Just pass through", "\n", "            ", "result", ".", "arch_extra_metadata", "[", "k", "]", "=", "v", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.arch_parser.parser.parse_object_jsons": [[240, 252], ["arch_parser.models.cad_model.CADModel", "cad_models.append"], "function", ["None"], ["", "def", "parse_object_jsons", "(", "object_jsons", ":", "list", ")", "->", "list", ":", "\n", "    ", "\"\"\"\n    Parsed 'object' entries of a scene.json.\n    :param object_jsons: 'object' entries of a scene.json file.\n    :return: Parsed list of objects.\n    \"\"\"", "\n", "cad_models", "=", "[", "]", "\n", "for", "object_json", "in", "object_jsons", ":", "\n", "        ", "cad_model", "=", "CADModel", "(", "model_id", "=", "object_json", "[", "\"modelId\"", "]", ",", "index", "=", "object_json", "[", "\"index\"", "]", ",", "parent_index", "=", "object_json", "[", "\"parentIndex\"", "]", ",", "\n", "transform", "=", "object_json", "[", "\"transform\"", "]", ")", "\n", "cad_models", ".", "append", "(", "cad_model", ")", "\n", "", "return", "cad_models", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.arch_parser.parser.parse_scene_json": [[254, 280], ["parser.parse_arch_json", "parser.parse_object_jsons", "scene_json[].items"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.arch_parser.parser.parse_arch_json", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.arch_parser.parser.parse_object_jsons"], ["", "def", "parse_scene_json", "(", "scene_json", ":", "dict", ",", "photoroom_df", ":", "pd", ".", "DataFrame", ")", "->", "House", ":", "\n", "    ", "\"\"\"\n    Parses a scene.json file from memory.\n    :param scene_json: Scene json as a dictionary\n    :param photoroom_df: Photo room data-frame.\n    :return: Parsed house.\n    \"\"\"", "\n", "assert", "scene_json", "[", "\"format\"", "]", "==", "\"sceneState\"", "\n", "\n", "arch_json", "=", "scene_json", "[", "\"scene\"", "]", "[", "\"arch\"", "]", "\n", "object_jsons", "=", "scene_json", "[", "\"scene\"", "]", "[", "\"object\"", "]", "\n", "\n", "# Process arch.json", "\n", "result", "=", "parse_arch_json", "(", "arch_json", ",", "photoroom_df", ")", "\n", "result", ".", "cad_models", "=", "parse_object_jsons", "(", "object_jsons", ")", "\n", "\n", "result", ".", "preferred_format", "=", "PreferredFormat", ".", "SCENE_JSON", "\n", "\n", "# Backup extras", "\n", "for", "k", ",", "v", "in", "scene_json", "[", "\"scene\"", "]", ".", "items", "(", ")", ":", "\n", "        ", "if", "k", "in", "[", "\"arch\"", ",", "\"object\"", "]", ":", "\n", "            ", "pass", "# Handled separately above", "\n", "", "else", ":", "\n", "# Just pass through", "\n", "            ", "result", ".", "scene_extra_metadata", "[", "k", "]", "=", "v", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.arch_parser.parser.parse_scene_json_from_file": [[282, 297], ["parser.parse_scene_json", "open", "json.load", "open", "pandas.read_csv"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.arch_parser.parser.parse_scene_json"], ["", "def", "parse_scene_json_from_file", "(", "scene_json_path", ":", "str", ",", "photoroom_csv_path", ":", "str", ")", "->", "House", ":", "\n", "    ", "\"\"\"\n    Parses a scene.json file from disk.\n    :param scene_json_path: Path to scene.json file.\n    :param photoroom_csv_path: Path photoroom.csv file.\n    :return: Parsed house.\n    \"\"\"", "\n", "with", "open", "(", "scene_json_path", ")", "as", "f", ":", "\n", "        ", "scene_json", "=", "json", ".", "load", "(", "f", ")", "\n", "", "photoroom_df", "=", "None", "\n", "if", "photoroom_csv_path", "is", "not", "None", ":", "\n", "        ", "with", "open", "(", "photoroom_csv_path", ")", "as", "f", ":", "\n", "            ", "photoroom_df", "=", "pd", ".", "read_csv", "(", "f", ")", "\n", "\n", "", "", "return", "parse_scene_json", "(", "scene_json", ",", "photoroom_df", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.arch_parser.parser.parse_house_json_file": [[299, 311], ["house_json_path.endswith", "parser.parse_arch_json_from_file", "house_json_path.endswith", "parser.parse_scene_json_from_file"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.arch_parser.parser.parse_arch_json_from_file", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.arch_parser.parser.parse_scene_json_from_file"], ["", "def", "parse_house_json_file", "(", "house_json_path", ":", "str", ",", "photoroom_csv_path", ":", "str", ")", "->", "House", ":", "\n", "    ", "\"\"\"\n    Parses a scene.json file or an arch.json file. Identifies file type based on extension.\n    :param house_json_path: Path to arch.json / scene.json file.\n    :param photoroom_csv_path: Path to photoroom.csv file.\n    :return: Parsed house.\n    \"\"\"", "\n", "if", "house_json_path", ".", "endswith", "(", "\".arch.json\"", ")", ":", "\n", "        ", "return", "parse_arch_json_from_file", "(", "house_json_path", ",", "photoroom_csv_path", ")", "\n", "", "elif", "house_json_path", ".", "endswith", "(", "\".scene.json\"", ")", ":", "\n", "        ", "return", "parse_scene_json_from_file", "(", "house_json_path", ",", "photoroom_csv_path", ")", "\n", "", "assert", "False", "", "", ""]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.arch_parser.serializer.serialize_texture": [[13, 45], ["materials_json.append", "textures_json.append", "arch_parser.json_util.pil_to_data_url", "images_json.append"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.arch_parser.json_util.pil_to_data_url"], ["def", "serialize_texture", "(", "texture", ":", "Image", ",", "surface_id", ":", "str", ",", "materials_json", ":", "list", ",", "textures_json", ":", "list", ",", "\n", "images_json", ":", "list", ")", "->", "dict", ":", "\n", "    ", "\"\"\"\n    Serializes a given image as a texture. Updates materials_json, textures_json and images_json to register the texture.\n    Returns the texture material definition that should used to assign the texture.\n\n    :param texture: Texture to be serialized\n    :param surface_id: Surface id used to recognize texture\n    :param materials_json: Materials json which will get updated\n    :param textures_json: Textures json which will get updated\n    :param images_json: Images json which will get updated\n    :return: Material definition\n    \"\"\"", "\n", "if", "texture", "is", "None", ":", "\n", "        ", "return", "{", "\n", "\"name\"", ":", "\"surface\"", ",", "\n", "\"diffuse\"", ":", "NA_COLOR", "\n", "}", "\n", "\n", "", "mat_json", "=", "{", "\"uuid\"", ":", "f\"Material_{surface_id}\"", ",", "\"map\"", ":", "f\"Texture_{surface_id}\"", "}", "\n", "materials_json", ".", "append", "(", "mat_json", ")", "\n", "\n", "tex_json", "=", "{", "\"uuid\"", ":", "f\"Texture_{surface_id}\"", ",", "\"image\"", ":", "f\"Image_{surface_id}\"", "}", "\n", "textures_json", ".", "append", "(", "tex_json", ")", "\n", "\n", "image_data_url", "=", "json_util", ".", "pil_to_data_url", "(", "texture", ")", "\n", "image_json", "=", "{", "\"uuid\"", ":", "f\"Image_{surface_id}\"", ",", "\"url\"", ":", "image_data_url", "}", "\n", "images_json", ".", "append", "(", "image_json", ")", "\n", "\n", "return", "{", "\n", "\"name\"", ":", "\"surface\"", ",", "\n", "\"materialId\"", ":", "f\"Material_{surface_id}\"", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.arch_parser.serializer.serialize_room": [[48, 103], ["arch_parser.json_util.generate_floor_json", "elements.append", "arch_parser.json_util.generate_ceiling_json", "elements.append", "serializer.serialize_texture", "serializer.serialize_texture", "isinstance", "copy.deepcopy", "arch_parser.json_util.generate_wall_json", "elements.append", "serializer.serialize_texture", "serializer.serialize_texture", "serializer.serialize_texture"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.arch_parser.json_util.generate_floor_json", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.arch_parser.json_util.generate_ceiling_json", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.arch_parser.serializer.serialize_texture", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.arch_parser.serializer.serialize_texture", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.arch_parser.json_util.generate_wall_json", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.arch_parser.serializer.serialize_texture", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.arch_parser.serializer.serialize_texture", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.arch_parser.serializer.serialize_texture"], ["", "def", "serialize_room", "(", "room", ":", "Room", ",", "elements", ":", "list", ",", "materials_json", ":", "list", ",", "textures_json", ":", "list", ",", "images_json", ":", "list", ",", "added_walls", ":", "dict", ",", "\n", "texture_wall_both_sides", ":", "bool", ")", "->", "dict", ":", "\n", "    ", "\"\"\"\n    Serializes a room, updating the elements list, materials_json, textures_json and images_json\n    :param room: Room to be serialized\n    :param elements: List of elements to be updated\n    :param materials_json: List of materials to be updated\n    :param textures_json: List of textures to be updated\n    :param images_json: List of images to be updated\n    :param added_walls: Dictionary of already added walls\n    :param texture_wall_both_sides: Specify true to copy the texture to both inside and outside surface of a wall\n    :return: Serialized room json\n    \"\"\"", "\n", "\n", "floor_json", "=", "json_util", ".", "generate_floor_json", "(", "room", ".", "floor", ",", "room", ".", "room_id", ",", "\n", "serialize_texture", "(", "room", ".", "floor_texture", ",", "room", ".", "floor", ".", "id", ",", "materials_json", ",", "\n", "textures_json", ",", "images_json", ")", ")", "\n", "elements", ".", "append", "(", "floor_json", ")", "\n", "\n", "ceiling_json", "=", "json_util", ".", "generate_ceiling_json", "(", "room", ".", "ceiling", ",", "room", ".", "room_id", ",", "\n", "serialize_texture", "(", "room", ".", "ceiling_texture", ",", "room", ".", "ceiling", ".", "id", ",", "\n", "materials_json", ",", "\n", "textures_json", ",", "images_json", ")", ")", "\n", "elements", ".", "append", "(", "ceiling_json", ")", "\n", "\n", "for", "wall_assignment", "in", "room", ".", "walls", ":", "\n", "        ", "assert", "isinstance", "(", "wall_assignment", ",", "WallRoomAssignment", ")", "\n", "wall", "=", "wall_assignment", ".", "wall", "\n", "inner_surface_index", "=", "wall_assignment", ".", "inner_wall_index", "\n", "\n", "if", "wall", "in", "added_walls", ":", "\n", "# The wall is already added by another room. We update that wall by assigning the material to the appropriate side.", "\n", "            ", "assert", "added_walls", "[", "wall", "]", "[", "\"roomId\"", "]", "[", "inner_surface_index", "]", "is", "None", "\n", "added_walls", "[", "wall", "]", "[", "\"roomId\"", "]", "[", "inner_surface_index", "]", "=", "room", ".", "room_id", "\n", "surface_material", "=", "copy", ".", "deepcopy", "(", "serialize_texture", "(", "room", ".", "wall_texture", ",", "wall", ".", "wall_id", ",", "materials_json", ",", "\n", "textures_json", ",", "images_json", ")", ")", "\n", "surface_material", "[", "\"name\"", "]", "=", "\"surface%d\"", "%", "inner_surface_index", "\n", "added_walls", "[", "wall", "]", "[", "\"materials\"", "]", "[", "inner_surface_index", "]", "=", "surface_material", "\n", "", "else", ":", "\n", "# New wall", "\n", "            ", "wall_json", "=", "json_util", ".", "generate_wall_json", "(", "wall", ",", "room", ".", "room_id", ",", "inner_surface_index", ",", "\n", "material", "=", "serialize_texture", "(", "room", ".", "wall_texture", ",", "wall", ".", "wall_id", ",", "materials_json", ",", "\n", "textures_json", ",", "images_json", ")", ",", "\n", "outer_material", "=", "serialize_texture", "(", "None", ",", "wall", ".", "wall_id", ",", "materials_json", ",", "\n", "textures_json", ",", "images_json", ")", ",", "\n", "texture_both_sides", "=", "texture_wall_both_sides", "\n", ")", "\n", "added_walls", "[", "wall", "]", "=", "wall_json", "\n", "elements", ".", "append", "(", "wall_json", ")", "\n", "\n", "", "", "room_json", "=", "{", "\n", "\"id\"", ":", "room", ".", "room_id", ",", "\n", "\"types\"", ":", "room", ".", "types", "\n", "}", "\n", "return", "room_json", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.arch_parser.serializer.serialize_rdr": [[105, 115], ["results.append"], "function", ["None"], ["", "def", "serialize_rdr", "(", "house", ":", "House", ")", "->", "list", ":", "\n", "    ", "\"\"\"\n    Serializes RDR to json\n    :param house: House containing the rdr\n    :return: rdr json\n    \"\"\"", "\n", "results", "=", "[", "]", "\n", "for", "from_room_id", ",", "hole_id", ",", "to_room_id", "in", "house", ".", "door_connected_room_pairs", ":", "\n", "        ", "results", ".", "append", "(", "(", "from_room_id", ",", "hole_id", ",", "to_room_id", ")", ")", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.arch_parser.serializer.serialize_arch_json": [[117, 152], ["house.rooms.items", "rooms.append", "serializer.serialize_rdr", "serializer.serialize_room"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.arch_parser.serializer.serialize_rdr", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.arch_parser.serializer.serialize_room"], ["", "def", "serialize_arch_json", "(", "house", ":", "House", ",", "texture_both_sides_of_walls", ")", "->", "dict", ":", "\n", "    ", "\"\"\"\n    Serializes a house into a arch_json\n    :param house: House to be serialized\n    :param texture_both_sides_of_walls: Both sides of all walls are textured, including walls with only one interior side. The interior side texture is copied to exterior side.\n    :return: arch_json as a dict\n    \"\"\"", "\n", "elements", "=", "[", "]", "\n", "\n", "# Textures", "\n", "materials_json", "=", "[", "]", "\n", "textures_json", "=", "[", "]", "\n", "images_json", "=", "[", "]", "\n", "\n", "rooms", "=", "[", "]", "\n", "\n", "added_walls", "=", "{", "}", "\n", "for", "room_id", ",", "room", "in", "house", ".", "rooms", ".", "items", "(", ")", ":", "\n", "        ", "rooms", ".", "append", "(", "serialize_room", "(", "room", ",", "elements", ",", "materials_json", ",", "textures_json", ",", "images_json", ",", "added_walls", ",", "texture_both_sides_of_walls", ")", ")", "\n", "\n", "", "r", "=", "{", "\n", "\"id\"", ":", "house", ".", "house_key", ",", "\n", "\"elements\"", ":", "elements", ",", "\n", "\"rdr\"", ":", "serialize_rdr", "(", "house", ")", ",", "\n", "\"rooms\"", ":", "rooms", ",", "\n", "\"materials\"", ":", "materials_json", ",", "\n", "\"textures\"", ":", "textures_json", ",", "\n", "\"images\"", ":", "images_json", "\n", "}", "\n", "\n", "# Add extra fields", "\n", "for", "extra_meta", "in", "house", ".", "arch_extra_metadata", ":", "\n", "        ", "r", "[", "extra_meta", "]", "=", "house", ".", "arch_extra_metadata", "[", "extra_meta", "]", "\n", "\n", "", "return", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.arch_parser.serializer.serialize_cad_models": [[154, 170], ["isinstance", "object_jsons.append"], "function", ["None"], ["", "def", "serialize_cad_models", "(", "house", ":", "House", ")", "->", "list", ":", "\n", "    ", "\"\"\"\n    Serializes CAD models in a house.\n    :param house: House with CAD models.\n    :return: object list of the scene.json file.\n    \"\"\"", "\n", "object_jsons", "=", "[", "]", "\n", "for", "cad_model", "in", "house", ".", "cad_models", ":", "\n", "        ", "assert", "isinstance", "(", "cad_model", ",", "CADModel", ")", "\n", "object_jsons", ".", "append", "(", "{", "\n", "\"modelId\"", ":", "cad_model", ".", "model_id", ",", "\n", "\"index\"", ":", "cad_model", ".", "index", ",", "\n", "\"parentIndex\"", ":", "cad_model", ".", "parent_index", ",", "\n", "\"transform\"", ":", "cad_model", ".", "transform", "\n", "}", ")", "\n", "", "return", "object_jsons", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.arch_parser.serializer.serialize_scene_json": [[172, 206], ["serializer.serialize_arch_json", "serializer.serialize_cad_models"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.arch_parser.serializer.serialize_arch_json", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.arch_parser.serializer.serialize_cad_models"], ["", "def", "serialize_scene_json", "(", "house", ":", "House", ",", "texture_both_sides_of_walls", ")", "->", "dict", ":", "\n", "    ", "\"\"\"\n    Serializes a house into a arch_json\n    :param house: House to be serialized\n    :param texture_both_sides_of_walls: Both sides of all walls are textured, including walls with only one interior side. The interior side texture is copied to exterior side.\n    :return: arch_json as a dict\n    \"\"\"", "\n", "arch_json", "=", "serialize_arch_json", "(", "house", ",", "texture_both_sides_of_walls", ")", "\n", "object_jsons", "=", "serialize_cad_models", "(", "house", ")", "\n", "result", "=", "{", "\n", "\"format\"", ":", "\"sceneState\"", ",", "\n", "\"scene\"", ":", "{", "\n", "\"arch\"", ":", "arch_json", ",", "\n", "\n", "# Load defaults from arch", "\n", "\"object\"", ":", "object_jsons", ",", "\n", "\"up\"", ":", "{", "\n", "\"x\"", ":", "arch_json", "[", "\"up\"", "]", "[", "0", "]", "if", "\"up\"", "in", "arch_json", "else", "0.0", ",", "\n", "\"y\"", ":", "arch_json", "[", "\"up\"", "]", "[", "1", "]", "if", "\"up\"", "in", "arch_json", "else", "0.0", ",", "\n", "\"z\"", ":", "arch_json", "[", "\"up\"", "]", "[", "2", "]", "if", "\"up\"", "in", "arch_json", "else", "0.0", ",", "\n", "}", ",", "\n", "\"front\"", ":", "{", "\n", "\"x\"", ":", "arch_json", "[", "\"front\"", "]", "[", "0", "]", "if", "\"front\"", "in", "arch_json", "else", "0.0", ",", "\n", "\"y\"", ":", "arch_json", "[", "\"front\"", "]", "[", "1", "]", "if", "\"front\"", "in", "arch_json", "else", "0.0", ",", "\n", "\"z\"", ":", "arch_json", "[", "\"front\"", "]", "[", "2", "]", "if", "\"front\"", "in", "arch_json", "else", "0.0", ",", "\n", "}", ",", "\n", "\"unit\"", ":", "arch_json", "[", "\"scaleToMeters\"", "]", "if", "\"scaleToMeters\"", "in", "arch_json", "else", "0.0", "\n", "}", ",", "\n", "\"selected\"", ":", "[", "]", ",", "\n", "}", "\n", "for", "extra_meta", "in", "house", ".", "scene_extra_metadata", ":", "\n", "        ", "result", "[", "\"scene\"", "]", "[", "extra_meta", "]", "=", "house", ".", "scene_extra_metadata", "[", "extra_meta", "]", "\n", "\n", "", "return", "result", "\n", "", ""]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.arch_parser.json_util.data_url_to_pil": [[14, 28], ["data_url.startswith", "base64.b64decode.encode", "base64.b64decode", "io.BytesIO", "PIL.Image.open", "len"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len"], ["def", "data_url_to_pil", "(", "data_url", ":", "str", ")", "->", "Image", ".", "Image", ":", "\n", "    ", "\"\"\"\n    Converts a data url to a PIL Image\n    :param data_url: Data URL to parse.\n    :return: Parsed image\n    \"\"\"", "\n", "START_TOKEN", "=", "u'data:img/png;base64,'", "\n", "assert", "data_url", ".", "startswith", "(", "START_TOKEN", ")", "\n", "data64", "=", "data_url", "[", "len", "(", "START_TOKEN", ")", ":", "]", "\n", "data64", "=", "data64", ".", "encode", "(", "'utf-8'", ")", "\n", "data64", "=", "base64", ".", "b64decode", "(", "data64", ")", "\n", "data", "=", "io", ".", "BytesIO", "(", "data64", ")", "\n", "img", "=", "Image", ".", "open", "(", "data", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.arch_parser.json_util.pil_to_data_url": [[30, 44], ["io.BytesIO", "img.save", "base64.b64encode", "io.BytesIO.getvalue", "base64.b64encode.decode"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.common.image_description.ImageDescription.save"], ["", "def", "pil_to_data_url", "(", "img", ":", "Image", ".", "Image", ")", "->", "str", ":", "\n", "    ", "\"\"\"\n    Converts PIL image to data url\n    :param img: PIL Image to be converted\n    :return: Data URL\n    \"\"\"", "\n", "# From https://gist.github.com/ankitshekhawat/56f05d0fb0453a0cd143630ab5af5087", "\n", "\n", "# Converts PIL image to DataURL", "\n", "\n", "data", "=", "io", ".", "BytesIO", "(", ")", "\n", "img", ".", "save", "(", "data", ",", "\"PNG\"", ")", "\n", "data64", "=", "base64", ".", "b64encode", "(", "data", ".", "getvalue", "(", ")", ")", "\n", "return", "u'data:img/png;base64,'", "+", "data64", ".", "decode", "(", "'utf-8'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.arch_parser.json_util.generate_hole_json": [[46, 66], ["None"], "function", ["None"], ["", "def", "generate_hole_json", "(", "hole", ":", "Hole", ")", "->", "dict", ":", "\n", "    ", "\"\"\"\n    Generates json for a hole\n    :param hole: Hole to be processed\n    :return: hole json\n    \"\"\"", "\n", "hole_json", "=", "{", "\n", "\"id\"", ":", "hole", ".", "hole_id", ",", "# Node id of object creating hole in the wall", "\n", "\"type\"", ":", "hole", ".", "hole_type", ",", "# hole type (`Door` or `Window`)", "\n", "\"box\"", ":", "{", "# cutout of hole as box on the wall", "\n", "\"min\"", ":", "[", "hole", ".", "start", ",", "hole", ".", "min_height", "]", ",", "# minimum point", "\n", "# x is distance from points[0] (toward points[1])", "\n", "# y is height from wall bottom (goes from 0 to wall height)", "\n", "\"max\"", ":", "[", "hole", ".", "end", ",", "hole", ".", "max_height", "]", "# maximum point", "\n", "}", "\n", "}", "\n", "for", "extra_arg", "in", "hole", ".", "extra_args", ":", "\n", "        ", "hole_json", "[", "extra_arg", "]", "=", "hole", ".", "extra_args", "[", "extra_arg", "]", "\n", "\n", "", "return", "hole_json", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.arch_parser.json_util.generate_wall_json": [[68, 122], ["enumerate", "hole_jsons.append", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "json_util.generate_hole_json"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.arch_parser.json_util.generate_hole_json"], ["", "def", "generate_wall_json", "(", "wall", ":", "Wall", ",", "room_id", ":", "str", ",", "inner_surface_index", ":", "int", ",", "material", ":", "dict", ",", "outer_material", ":", "dict", ",", "texture_both_sides", ":", "bool", ")", "->", "dict", ":", "\n", "    ", "\"\"\"\n    Generates a json describing wall.\n    :param wall: Wall described\n    :param room_id: Assigned room\n    :param inner_surface_index: Index of the side facing the assigned room\n    :param material: Material assigned to the inner surface to the room.\n    :param outer_material: Material to use for the outer surface to the room.\n    :param texture_both_sides: Specify true to use the same material for both sides.\n    :return: Wall json\n    \"\"\"", "\n", "\n", "hole_jsons", "=", "[", "]", "\n", "\n", "for", "hole_index", ",", "hole", "in", "enumerate", "(", "wall", ".", "holes", ")", ":", "\n", "        ", "hole_jsons", ".", "append", "(", "generate_hole_json", "(", "hole", ")", ")", "\n", "\n", "", "if", "texture_both_sides", ":", "\n", "# Apply same material to both sides", "\n", "        ", "surface1_material", "=", "copy", ".", "deepcopy", "(", "material", ")", "\n", "surface1_material", "[", "\"name\"", "]", "=", "\"surface1\"", "\n", "\n", "surface2_material", "=", "copy", ".", "deepcopy", "(", "material", ")", "\n", "surface2_material", "[", "\"name\"", "]", "=", "\"surface2\"", "\n", "materials", "=", "[", "surface1_material", ",", "surface2_material", "]", "\n", "", "else", ":", "\n", "# Apply outer material to both sides", "\n", "        ", "surface1_material", "=", "copy", ".", "deepcopy", "(", "outer_material", ")", "\n", "surface1_material", "[", "\"name\"", "]", "=", "\"surface1\"", "\n", "\n", "surface2_material", "=", "copy", ".", "deepcopy", "(", "outer_material", ")", "\n", "surface2_material", "[", "\"name\"", "]", "=", "\"surface2\"", "\n", "\n", "# Update inner side with inner material", "\n", "materials", "=", "[", "surface1_material", ",", "surface2_material", "]", "\n", "materials", "[", "inner_surface_index", "]", "=", "copy", ".", "deepcopy", "(", "material", ")", "\n", "materials", "[", "inner_surface_index", "]", "[", "\"name\"", "]", "=", "\"surface%d\"", "%", "inner_surface_index", "\n", "\n", "", "room_id_list", "=", "[", "None", ",", "None", "]", "\n", "room_id_list", "[", "inner_surface_index", "]", "=", "room_id", "\n", "\n", "wall_json", "=", "{", "\n", "\"roomId\"", ":", "room_id_list", ",", "\n", "\"id\"", ":", "wall", ".", "wall_id", ",", "\n", "\"type\"", ":", "\"Wall\"", ",", "\n", "\"points\"", ":", "[", "wall", ".", "p1", ",", "wall", ".", "p2", "]", ",", "\n", "\"holes\"", ":", "hole_jsons", ",", "\n", "\"materials\"", ":", "materials", ",", "# inner and outer material", "\n", "}", "\n", "\n", "for", "extra_arg", "in", "wall", ".", "extra_args", ":", "\n", "        ", "wall_json", "[", "extra_arg", "]", "=", "wall", ".", "extra_args", "[", "extra_arg", "]", "\n", "\n", "", "return", "wall_json", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.arch_parser.json_util.generate_ceiling_json": [[124, 143], ["None"], "function", ["None"], ["", "def", "generate_ceiling_json", "(", "ceiling", ":", "Ceiling", ",", "room_id", ":", "str", ",", "material", ":", "dict", ")", "->", "dict", ":", "\n", "    ", "\"\"\"\n    Generate json for a ceiling of a house\n    :param ceiling: Ceiling to be parsed\n    :param room_id: room_id of associated room\n    :param material: Material dict\n    :return: Ceiling json\n    \"\"\"", "\n", "\n", "r", "=", "{", "\n", "\"id\"", ":", "ceiling", ".", "id", ",", "\n", "\"roomId\"", ":", "room_id", ",", "\n", "\"points\"", ":", "[", "[", "p", "for", "p", "in", "ceiling", ".", "points", "]", "]", ",", "\n", "\"type\"", ":", "\"Ceiling\"", ",", "\n", "\"materials\"", ":", "[", "material", "]", "\n", "}", "\n", "for", "extra_arg", "in", "ceiling", ".", "extra_args", ":", "\n", "        ", "r", "[", "extra_arg", "]", "=", "ceiling", ".", "extra_args", "[", "extra_arg", "]", "\n", "", "return", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.arch_parser.json_util.generate_floor_json": [[145, 164], ["None"], "function", ["None"], ["", "def", "generate_floor_json", "(", "floor", ":", "Floor", ",", "room_id", ":", "str", ",", "material", ":", "dict", ")", "->", "dict", ":", "\n", "    ", "\"\"\"\n    Generate json for a floor of a house\n    :param floor: Floor to be parsed\n    :param room_id: room_id of associated room\n    :param material: Material dict\n    :return: Floor json\n    \"\"\"", "\n", "\n", "r", "=", "{", "\n", "\"id\"", ":", "floor", ".", "id", ",", "\n", "\"roomId\"", ":", "room_id", ",", "\n", "\"points\"", ":", "[", "[", "p", "for", "p", "in", "floor", ".", "points", "]", "]", ",", "\n", "\"type\"", ":", "\"Floor\"", ",", "\n", "\"materials\"", ":", "[", "material", "]", "\n", "}", "\n", "for", "extra_arg", "in", "floor", ".", "extra_args", ":", "\n", "        ", "r", "[", "extra_arg", "]", "=", "floor", ".", "extra_args", "[", "extra_arg", "]", "\n", "", "return", "r", "\n", "", ""]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.models.floor.Floor.__init__": [[5, 12], ["isinstance", "isinstance", "all", "isinstance", "all", "len", "isinstance"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len"], ["def", "__init__", "(", "self", ",", "floor_id", ",", "points", ",", "extra_args", ")", ":", "\n", "        ", "assert", "isinstance", "(", "floor_id", ",", "str", ")", "\n", "assert", "isinstance", "(", "points", ",", "list", ")", "and", "all", "(", "\n", "[", "(", "isinstance", "(", "a", ",", "tuple", ")", "and", "len", "(", "a", ")", "==", "3", "and", "all", "(", "[", "isinstance", "(", "b", ",", "float", ")", "for", "b", "in", "a", "]", ")", ")", "for", "a", "in", "points", "]", ")", "\n", "self", ".", "_id", "=", "floor_id", "\n", "self", ".", "_points", "=", "points", "\n", "self", ".", "_extra_args", "=", "extra_args", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.models.floor.Floor.id": [[13, 16], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "id", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_id", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.models.floor.Floor.points": [[17, 20], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "points", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_points", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.models.floor.Floor.extra_args": [[21, 24], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "extra_args", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_extra_args", "\n", "", "", ""]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.models.cad_model.CADModel.__init__": [[2, 12], ["isinstance", "isinstance", "isinstance", "isinstance"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "model_id", ":", "str", ",", "index", ":", "int", ",", "parent_index", ":", "int", ",", "transform", ":", "dict", ")", ":", "\n", "        ", "assert", "isinstance", "(", "model_id", ",", "str", ")", "\n", "assert", "isinstance", "(", "index", ",", "int", ")", "\n", "assert", "isinstance", "(", "parent_index", ",", "int", ")", "\n", "assert", "isinstance", "(", "transform", ",", "dict", ")", "\n", "\n", "self", ".", "_model_id", "=", "model_id", "\n", "self", ".", "_index", "=", "index", "\n", "self", ".", "_parent_index", "=", "parent_index", "\n", "self", ".", "_transform", "=", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.models.cad_model.CADModel.model_id": [[13, 16], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "model_id", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_model_id", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.models.cad_model.CADModel.index": [[17, 20], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "index", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_index", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.models.cad_model.CADModel.parent_index": [[21, 24], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "parent_index", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_parent_index", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.models.cad_model.CADModel.transform": [[25, 28], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "transform", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_transform", "", "", "", ""]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.models.room.Room.__init__": [[13, 28], ["isinstance", "isinstance"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "house_key", ",", "room_id", ")", ":", "\n", "        ", "assert", "isinstance", "(", "room_id", ",", "str", ")", "\n", "assert", "isinstance", "(", "house_key", ",", "str", ")", "\n", "\n", "self", ".", "_types", "=", "[", "]", "\n", "self", ".", "_walls", "=", "[", "]", "\n", "self", ".", "_floor", "=", "None", "\n", "self", ".", "_ceiling", "=", "None", "\n", "self", ".", "_room_id", "=", "room_id", "\n", "self", ".", "_photos", "=", "[", "]", "\n", "self", ".", "_house_key", "=", "house_key", "\n", "\n", "self", ".", "_floor_texture", "=", "None", "\n", "self", ".", "_wall_texture", "=", "None", "\n", "self", ".", "_ceiling_texture", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.models.room.Room.assign_texture": [[29, 39], ["isinstance"], "methods", ["None"], ["", "def", "assign_texture", "(", "self", ",", "surface", ":", "str", ",", "texture", ":", "Image", ".", "Image", ")", ":", "\n", "        ", "assert", "surface", "in", "[", "\"floor\"", ",", "\"wall\"", ",", "\"ceiling\"", "]", "\n", "assert", "isinstance", "(", "texture", ",", "Image", ".", "Image", ")", "\n", "\n", "if", "surface", "==", "\"floor\"", ":", "\n", "            ", "self", ".", "floor_texture", "=", "texture", "\n", "", "elif", "surface", "==", "\"wall\"", ":", "\n", "            ", "self", ".", "wall_texture", "=", "texture", "\n", "", "elif", "surface", "==", "\"ceiling\"", ":", "\n", "            ", "self", ".", "ceiling_texture", "=", "texture", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.models.room.Room.textures": [[41, 44], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "textures", "(", "self", ")", ":", "\n", "        ", "return", "{", "\"floor\"", ":", "self", ".", "floor_texture", ",", "\"wall\"", ":", "self", ".", "wall_texture", ",", "\"ceiling\"", ":", "self", ".", "ceiling_texture", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.models.room.Room.floor": [[49, 53], ["isinstance"], "methods", ["None"], ["", "@", "floor", ".", "setter", "\n", "def", "floor", "(", "self", ",", "value", ")", ":", "\n", "        ", "assert", "isinstance", "(", "value", ",", "Floor", ")", "\n", "self", ".", "_floor", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.models.room.Room.ceiling": [[58, 62], ["isinstance"], "methods", ["None"], ["", "@", "ceiling", ".", "setter", "\n", "def", "ceiling", "(", "self", ",", "value", ")", ":", "\n", "        ", "assert", "isinstance", "(", "value", ",", "Ceiling", ")", "\n", "self", ".", "_ceiling", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.models.room.Room.floor_texture": [[67, 71], ["isinstance"], "methods", ["None"], ["", "@", "floor_texture", ".", "setter", "\n", "def", "floor_texture", "(", "self", ",", "value", ":", "Image", ")", ":", "\n", "        ", "assert", "value", "is", "None", "or", "isinstance", "(", "value", ",", "Image", ".", "Image", ")", "\n", "self", ".", "_floor_texture", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.models.room.Room.wall_texture": [[76, 80], ["isinstance"], "methods", ["None"], ["", "@", "wall_texture", ".", "setter", "\n", "def", "wall_texture", "(", "self", ",", "value", ":", "Image", ")", ":", "\n", "        ", "assert", "value", "is", "None", "or", "isinstance", "(", "value", ",", "Image", ".", "Image", ")", "\n", "self", ".", "_wall_texture", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.models.room.Room.ceiling_texture": [[85, 89], ["isinstance"], "methods", ["None"], ["", "@", "ceiling_texture", ".", "setter", "\n", "def", "ceiling_texture", "(", "self", ",", "value", ":", "Image", ".", "Image", ")", ":", "\n", "        ", "assert", "value", "is", "None", "or", "isinstance", "(", "value", ",", "Image", ".", "Image", ")", "\n", "self", ".", "_ceiling_texture", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.models.room.Room.photos": [[90, 93], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "photos", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_photos", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.models.room.Room.house_key": [[94, 97], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "house_key", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_house_key", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.models.room.Room.room_id": [[98, 101], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "room_id", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_room_id", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.models.room.Room.types": [[102, 105], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "types", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_types", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.models.room.Room.walls": [[106, 112], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "walls", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Return list of wall assignments.\n        \"\"\"", "\n", "return", "self", ".", "_walls", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.models.room.Room.get_centroid": [[113, 121], ["None"], "methods", ["None"], ["", "def", "get_centroid", "(", "self", ")", ":", "\n", "        ", "total_x", ",", "total_y", "=", "0.0", ",", "0.0", "\n", "count", "=", "0", "\n", "for", "wall", "in", "self", ".", "_walls", ":", "\n", "            ", "total_x", "+=", "wall", ".", "p1", "[", "0", "]", "+", "wall", ".", "p2", "[", "0", "]", "\n", "total_y", "+=", "wall", ".", "p1", "[", "1", "]", "+", "wall", ".", "p2", "[", "1", "]", "\n", "count", "+=", "2", "\n", "", "return", "total_x", "/", "count", ",", "total_y", "/", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.models.room.Room.add_wall": [[122, 125], ["isinstance", "room.Room._walls.append"], "methods", ["None"], ["", "def", "add_wall", "(", "self", ",", "wall", ":", "WallRoomAssignment", ")", ":", "\n", "        ", "assert", "isinstance", "(", "wall", ",", "WallRoomAssignment", ")", "\n", "self", ".", "_walls", ".", "append", "(", "wall", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.models.room.Room.get_polyline": [[126, 131], ["range", "len", "points.append"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len"], ["", "def", "get_polyline", "(", "self", ")", ":", "\n", "        ", "points", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "_floor", ".", "points", ")", ")", ":", "\n", "            ", "points", ".", "append", "(", "self", ".", "_floor", ".", "points", "[", "i", "]", ")", "\n", "", "return", "points", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.models.room.Room.__str__": [[132, 134], ["str"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "\"Room: %s\"", "%", "(", "str", "(", "self", ".", "_walls", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.models.room.Room.reverse": [[135, 137], ["room.Room._walls.reverse"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.models.wall.Wall.reverse"], ["", "def", "reverse", "(", "self", ")", ":", "\n", "        ", "self", ".", "_walls", ".", "reverse", "(", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.models.hole.Hole.__init__": [[6, 21], ["isinstance", "isinstance", "isinstance", "isinstance", "isinstance", "isinstance"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "hole_id", ",", "hole_type", ",", "start", ",", "end", ",", "min_height", ",", "max_height", ",", "extra_args", ")", ":", "\n", "        ", "assert", "isinstance", "(", "hole_type", ",", "str", ")", "and", "hole_type", "in", "[", "\"Window\"", ",", "\"Door\"", "]", "\n", "assert", "isinstance", "(", "start", ",", "float", ")", "\n", "assert", "isinstance", "(", "end", ",", "float", ")", "\n", "assert", "isinstance", "(", "hole_id", ",", "str", ")", "\n", "assert", "isinstance", "(", "min_height", ",", "float", ")", "\n", "assert", "isinstance", "(", "max_height", ",", "float", ")", "\n", "\n", "self", ".", "_hole_type", "=", "hole_type", "\n", "self", ".", "_start", "=", "start", "\n", "self", ".", "_end", "=", "end", "\n", "self", ".", "_hole_id", "=", "hole_id", "\n", "self", ".", "_min_height", "=", "min_height", "\n", "self", ".", "_max_height", "=", "max_height", "\n", "self", ".", "_extra_args", "=", "extra_args", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.models.hole.Hole.extra_args": [[22, 25], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "extra_args", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_extra_args", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.models.hole.Hole.min_height": [[30, 34], ["isinstance"], "methods", ["None"], ["", "@", "min_height", ".", "setter", "\n", "def", "min_height", "(", "self", ",", "value", ")", ":", "\n", "        ", "assert", "isinstance", "(", "value", ",", "float", ")", "\n", "self", ".", "_min_height", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.models.hole.Hole.max_height": [[39, 43], ["isinstance"], "methods", ["None"], ["", "@", "max_height", ".", "setter", "\n", "def", "max_height", "(", "self", ",", "value", ")", ":", "\n", "        ", "assert", "isinstance", "(", "value", ",", "float", ")", "\n", "self", ".", "_max_height", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.models.hole.Hole.hole_type": [[44, 47], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "hole_type", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "self", ".", "_hole_type", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.models.hole.Hole.start": [[48, 51], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "start", "(", "self", ")", "->", "float", ":", "\n", "        ", "return", "self", ".", "_start", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.models.hole.Hole.end": [[52, 55], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "end", "(", "self", ")", "->", "float", ":", "\n", "        ", "return", "self", ".", "_end", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.models.hole.Hole.hole_id": [[56, 59], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "hole_id", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "self", ".", "_hole_id", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.models.hole.Hole.reverse": [[60, 63], ["None"], "methods", ["None"], ["", "def", "reverse", "(", "self", ")", ":", "\n", "        ", "self", ".", "_start", "=", "1", "-", "self", ".", "_start", "\n", "self", ".", "_end", "=", "1", "-", "self", ".", "_end", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.models.hole.Hole.__str__": [[64, 66], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "\"H %s: %s : %f >> %f\"", "%", "(", "self", ".", "hole_id", ",", "self", ".", "hole_type", ",", "self", ".", "start", ",", "self", ".", "end", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.models.wall.Wall.__init__": [[5, 14], ["isinstance", "isinstance", "all", "isinstance", "all", "len", "len", "isinstance", "isinstance"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len"], ["def", "__init__", "(", "self", ",", "wall_id", ":", "str", ",", "p1", ":", "tuple", ",", "p2", ":", "tuple", ",", "extra_args", ")", ":", "\n", "        ", "assert", "isinstance", "(", "p1", ",", "tuple", ")", "and", "len", "(", "p1", ")", "==", "3", "and", "all", "(", "[", "isinstance", "(", "a", ",", "float", ")", "for", "a", "in", "p1", "]", ")", "\n", "assert", "isinstance", "(", "p2", ",", "tuple", ")", "and", "len", "(", "p2", ")", "==", "3", "and", "all", "(", "[", "isinstance", "(", "a", ",", "float", ")", "for", "a", "in", "p2", "]", ")", "\n", "assert", "isinstance", "(", "wall_id", ",", "str", ")", "\n", "self", ".", "_wall_id", "=", "wall_id", "\n", "self", ".", "_p1", "=", "p1", "\n", "self", ".", "_p2", "=", "p2", "\n", "self", ".", "_holes", "=", "[", "]", "\n", "self", ".", "_extra_args", "=", "extra_args", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.models.wall.Wall.extra_args": [[15, 18], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "extra_args", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_extra_args", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.models.wall.Wall.wall_id": [[19, 22], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "wall_id", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "self", ".", "_wall_id", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.models.wall.Wall.p1": [[23, 26], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "p1", "(", "self", ")", "->", "tuple", ":", "\n", "        ", "return", "self", ".", "_p1", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.models.wall.Wall.p2": [[27, 30], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "p2", "(", "self", ")", "->", "tuple", ":", "\n", "        ", "return", "self", ".", "_p2", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.models.wall.Wall.holes": [[31, 34], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "holes", "(", "self", ")", "->", "list", ":", "\n", "        ", "return", "self", ".", "_holes", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.models.wall.Wall.__hash__": [[35, 37], ["hash", "wall.Wall.__repr__"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.models.object.ObjectAnnotation.__repr__"], ["", "def", "__hash__", "(", "self", ")", ":", "\n", "        ", "return", "hash", "(", "self", ".", "__repr__", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.models.wall.Wall.reverse": [[38, 42], ["hole.reverse"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.models.wall.Wall.reverse"], ["", "def", "reverse", "(", "self", ")", ":", "\n", "        ", "self", ".", "_p1", ",", "self", ".", "_p2", "=", "self", ".", "_p2", ",", "self", ".", "_p1", "\n", "for", "hole", "in", "self", ".", "holes", ":", "\n", "            ", "hole", ".", "reverse", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.models.wall.Wall.__str__": [[43, 45], ["None"], "methods", ["None"], ["", "", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "\"Wall %s: (%f, %f, %f) >> (%f, %f, %f)\"", "%", "(", "self", ".", "wall_id", ",", "self", ".", "p1", "[", "0", "]", ",", "self", ".", "p1", "[", "1", "]", ",", "self", ".", "p1", "[", "2", "]", ",", "self", ".", "p2", "[", "0", "]", ",", "self", ".", "p2", "[", "1", "]", ",", "self", ".", "p2", "[", "2", "]", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.models.object.ObjectAnnotation.__init__": [[2, 7], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "bound_box", ",", "object_type", ")", ":", "\n", "        ", "self", ".", "type", "=", "object_type", "\n", "self", ".", "bound_box", "=", "bound_box", "\n", "self", ".", "p1", "=", "(", "bound_box", "[", "0", "]", ",", "bound_box", "[", "1", "]", ")", "\n", "self", ".", "p2", "=", "(", "bound_box", "[", "2", "]", ",", "bound_box", "[", "3", "]", ")", "\n", "", "def", "__repr__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.models.object.ObjectAnnotation.__repr__": [[7, 9], ["str"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "type", "+", "\" \"", "+", "str", "(", "self", ".", "bound_box", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.models.wall_room_assignment.WallRoomAssignment.__init__": [[9, 17], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "wall", ":", "Wall", ",", "inner_surface_index", ":", "int", ")", ":", "\n", "        ", "\"\"\"\n        Describes assignment of a wall to a room.\n        :param wall: Wall assigned to the room\n        :param inner_surface_index: Index of interior surface of the wall to the room.\n        \"\"\"", "\n", "self", ".", "_wall", "=", "wall", "\n", "self", ".", "_inner_surface_index", "=", "inner_surface_index", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.models.wall_room_assignment.WallRoomAssignment.wall": [[18, 21], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "wall", "(", "self", ")", "->", "Wall", ":", "\n", "        ", "return", "self", ".", "_wall", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.models.wall_room_assignment.WallRoomAssignment.inner_wall_index": [[22, 25], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "inner_wall_index", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "self", ".", "_inner_surface_index", "\n", "", "", ""]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.models.house.House.__init__": [[16, 26], ["isinstance"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "house_key", ")", ":", "\n", "        ", "assert", "isinstance", "(", "house_key", ",", "str", ")", "\n", "\n", "self", ".", "_rooms", "=", "{", "}", "# room_id: room", "\n", "self", ".", "_house_key", "=", "house_key", "# From the file name", "\n", "self", ".", "_door_connected_room_pairs", "=", "[", "]", "# Duplicates edges. The edges to outside world are not duplicated.", "\n", "self", ".", "_arch_extra_metadata", "=", "{", "}", "\n", "self", ".", "_scene_extra_metadata", "=", "{", "}", "\n", "self", ".", "_preferred_format", "=", "PreferredFormat", ".", "NONE", "\n", "self", ".", "_cad_models", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.models.house.House.cad_models": [[31, 39], ["isinstance", "list", "isinstance"], "methods", ["None"], ["", "@", "cad_models", ".", "setter", "\n", "def", "cad_models", "(", "self", ",", "value", ")", ":", "\n", "        ", "assert", "isinstance", "(", "value", ",", "Iterable", ")", "\n", "value", "=", "list", "(", "value", ")", "\n", "for", "cad_model", "in", "value", ":", "\n", "            ", "assert", "isinstance", "(", "cad_model", ",", "CADModel", ")", "\n", "\n", "", "self", ".", "_cad_models", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.models.house.House.preferred_format": [[44, 48], ["isinstance"], "methods", ["None"], ["", "@", "preferred_format", ".", "setter", "\n", "def", "preferred_format", "(", "self", ",", "value", ")", ":", "\n", "        ", "assert", "isinstance", "(", "value", ",", "PreferredFormat", ")", "\n", "self", ".", "_preferred_format", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.models.house.House.scene_extra_metadata": [[49, 52], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "scene_extra_metadata", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_scene_extra_metadata", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.models.house.House.arch_extra_metadata": [[53, 56], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "arch_extra_metadata", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_arch_extra_metadata", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.models.house.House.house_key": [[57, 60], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "house_key", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_house_key", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.models.house.House.rooms": [[61, 64], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "rooms", "(", "self", ")", "->", "dict", ":", "\n", "        ", "return", "self", ".", "_rooms", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.models.house.House.door_connected_room_pairs": [[65, 68], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "door_connected_room_pairs", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_door_connected_room_pairs", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.models.house.House.__str__": [[69, 71], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "\"House: %s\"", "%", "self", ".", "_house_key", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.models.house.House.compute_bounds": [[72, 89], ["float", "float", "float", "float", "house.House.rooms.items", "isinstance", "isinstance", "min", "max", "min", "max"], "methods", ["None"], ["", "def", "compute_bounds", "(", "self", ")", ":", "\n", "        ", "min_x", "=", "float", "(", "\"inf\"", ")", "\n", "min_y", "=", "float", "(", "\"inf\"", ")", "\n", "max_x", "=", "float", "(", "\"-inf\"", ")", "\n", "max_y", "=", "float", "(", "\"-inf\"", ")", "\n", "for", "room_id", ",", "room", "in", "self", ".", "rooms", ".", "items", "(", ")", ":", "\n", "            ", "assert", "isinstance", "(", "room", ",", "Room", ")", "\n", "for", "wall_assignment", "in", "room", ".", "walls", ":", "\n", "                ", "assert", "isinstance", "(", "wall_assignment", ",", "WallRoomAssignment", ")", "\n", "wall", "=", "wall_assignment", ".", "wall", "\n", "for", "(", "x", ",", "_", ",", "y", ")", "in", "[", "wall", ".", "p1", ",", "wall", ".", "p2", "]", ":", "\n", "                    ", "min_x", "=", "min", "(", "x", ",", "min_x", ")", "\n", "max_x", "=", "max", "(", "x", ",", "max_x", ")", "\n", "min_y", "=", "min", "(", "y", ",", "min_y", ")", "\n", "max_y", "=", "max", "(", "y", ",", "max_y", ")", "\n", "\n", "", "", "", "return", "min_x", ",", "min_y", ",", "max_x", ",", "max_y", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.models.house.House.sketch_house": [[90, 131], ["house.House.compute_bounds", "max", "PIL.Image.new", "PIL.ImageDraw.Draw", "house.House.rooms.items", "isinstance", "isinstance", "house.House.sketch_house.scale"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.models.house.House.compute_bounds", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.evaluation.evaluator.EvalResult.new"], ["", "def", "sketch_house", "(", "self", ",", "image_size", "=", "400", ",", "margin", "=", "10", ",", "wall_color", "=", "(", "255", ",", "0", ",", "0", ")", ",", "focused_color", "=", "(", "0", ",", "255", ",", "0", ")", ",", "focused_room_id", "=", "None", ")", "->", "Image", ".", "Image", ":", "\n", "        ", "\"\"\"\n        Generates a top-down sketch of the house.\n        :param focused_color: Color of highlighted room walls\n        :param wall_color: Default color of walls\n        :param margin: Margin to image boundary\n        :param image_size: Size of image\n        :param focused_room_id: Room id of room to highlight\n        :return: PIL Image\n        \"\"\"", "\n", "content_size", "=", "image_size", "-", "margin", "*", "2", "\n", "bounds", "=", "self", ".", "compute_bounds", "(", ")", "\n", "width", "=", "bounds", "[", "2", "]", "-", "bounds", "[", "0", "]", "\n", "height", "=", "bounds", "[", "3", "]", "-", "bounds", "[", "1", "]", "\n", "max_size", "=", "max", "(", "width", ",", "height", ")", "\n", "scale_multiplier", "=", "content_size", "/", "max_size", "\n", "\n", "offset_x", "=", "-", "bounds", "[", "0", "]", "\n", "offset_y", "=", "-", "bounds", "[", "1", "]", "\n", "\n", "img", "=", "Image", ".", "new", "(", "\"RGBA\"", ",", "(", "image_size", ",", "image_size", ")", ")", "\n", "img_draw", "=", "ImageDraw", ".", "Draw", "(", "img", ")", "\n", "\n", "def", "scale", "(", "p", ")", ":", "\n", "            ", "x", "=", "(", "p", "[", "0", "]", "+", "offset_x", ")", "*", "scale_multiplier", "+", "margin", "\n", "y", "=", "(", "p", "[", "2", "]", "+", "offset_y", ")", "*", "scale_multiplier", "+", "margin", "\n", "return", "x", ",", "y", "\n", "\n", "", "for", "room_id", ",", "room", "in", "self", ".", "rooms", ".", "items", "(", ")", ":", "\n", "            ", "assert", "isinstance", "(", "room", ",", "Room", ")", "\n", "for", "wall_assignment", "in", "room", ".", "walls", ":", "\n", "                ", "assert", "isinstance", "(", "wall_assignment", ",", "WallRoomAssignment", ")", "\n", "wall", "=", "wall_assignment", ".", "wall", "\n", "x1", ",", "y1", "=", "scale", "(", "wall", ".", "p1", ")", "\n", "x2", ",", "y2", "=", "scale", "(", "wall", ".", "p2", ")", "\n", "color", "=", "wall_color", "\n", "if", "focused_room_id", "==", "room_id", ":", "\n", "                    ", "color", "=", "focused_color", "\n", "", "img_draw", ".", "line", "(", "(", "(", "x1", ",", "y1", ")", ",", "(", "x2", ",", "y2", ")", ")", ",", "fill", "=", "color", ")", "\n", "\n", "", "", "return", "img", "\n", "", "", ""]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.models.ceiling.Ceiling.__init__": [[5, 10], ["isinstance", "all", "isinstance", "all", "len", "isinstance"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len"], ["def", "__init__", "(", "self", ",", "ceiling_id", ":", "str", ",", "points", ",", "extra_args", ")", ":", "\n", "        ", "assert", "isinstance", "(", "points", ",", "list", ")", "and", "all", "(", "[", "(", "isinstance", "(", "a", ",", "tuple", ")", "and", "len", "(", "a", ")", "==", "3", "and", "all", "(", "[", "isinstance", "(", "b", ",", "float", ")", "for", "b", "in", "a", "]", ")", ")", "for", "a", "in", "points", "]", ")", "\n", "self", ".", "_points", "=", "points", "\n", "self", ".", "_id", "=", "ceiling_id", "\n", "self", ".", "_extra_args", "=", "extra_args", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.models.ceiling.Ceiling.id": [[11, 14], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "id", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_id", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.models.ceiling.Ceiling.points": [[15, 18], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "points", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_points", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.models.ceiling.Ceiling.extra_args": [[19, 22], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "extra_args", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_extra_args", "\n", "", "", ""]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.preprocessing.fill_room_embeddings.process": [[16, 39], ["plan2scene.texture_gen.predictor.TextureGenPredictor", "plan2scene.texture_gen.predictor.TextureGenPredictor.load_checkpoint", "enumerate", "os.exists", "os.mkdir", "os.mkdir", "os.exists", "os.mkdir", "os.mkdir", "houses.items", "logging.info", "plan2scene.crop_select.util.fill_texture_embeddings", "plan2scene.common.house_parser.save_house_texture_embeddings", "plan2scene.common.house_parser.save_house_crops", "os.join", "os.join", "os.join", "os.join", "plan2scene.texture_gen.utils.io.load_conf_eval", "os.join", "os.join", "len"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.predictor.TexturePropPredictor.load_checkpoint", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.crop_select.util.fill_texture_embeddings", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.common.house_parser.save_house_texture_embeddings", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.common.house_parser.save_house_crops", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.io.load_conf_eval", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len"], ["def", "process", "(", "conf", ":", "ConfigManager", ",", "houses", ":", "dict", ",", "output_path", ":", "str", ")", "->", "None", ":", "\n", "    ", "\"\"\"\n    Parse surface crops of given houses. Then, compute texture embeddings.\n    :param conf: Config Manager\n    :param houses: Dictionary of houses.\n    :param output_path: Path to save surface crops and texture embeddings.\n    \"\"\"", "\n", "if", "not", "osp", ".", "exists", "(", "osp", ".", "join", "(", "output_path", ",", "\"surface_texture_embeddings\"", ")", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "osp", ".", "join", "(", "output_path", ",", "\"surface_texture_embeddings\"", ")", ")", "\n", "\n", "", "if", "not", "osp", ".", "exists", "(", "osp", ".", "join", "(", "output_path", ",", "\"texture_crops\"", ")", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "osp", ".", "join", "(", "output_path", ",", "\"texture_crops\"", ")", ")", "\n", "\n", "", "predictor", "=", "TextureGenPredictor", "(", "\n", "conf", "=", "load_conf_eval", "(", "config_path", "=", "conf", ".", "texture_gen", ".", "texture_synth_conf", ")", ",", "\n", "rgb_median_emb", "=", "conf", ".", "texture_gen", ".", "rgb_median_emb", ")", "\n", "predictor", ".", "load_checkpoint", "(", "checkpoint_path", "=", "conf", ".", "texture_gen", ".", "checkpoint_path", ")", "\n", "\n", "for", "i", ",", "(", "house_key", ",", "house", ")", "in", "enumerate", "(", "houses", ".", "items", "(", ")", ")", ":", "\n", "        ", "logging", ".", "info", "(", "\"[%d/%d] Processing %s\"", "%", "(", "i", ",", "len", "(", "houses", ")", ",", "house_key", ")", ")", "\n", "fill_texture_embeddings", "(", "conf", ",", "house", ",", "predictor", ")", "\n", "save_house_texture_embeddings", "(", "house", ",", "save_path", "=", "osp", ".", "join", "(", "output_path", ",", "\"surface_texture_embeddings\"", ",", "house_key", "+", "\".json\"", ")", ")", "\n", "save_house_crops", "(", "house", ",", "save_path", "=", "osp", ".", "join", "(", "output_path", ",", "\"texture_crops\"", ",", "house_key", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.postprocessing.multiprop.process_surface": [[17, 39], ["predictor.predict_textures", "plan2scene.common.image_description.ImageDescription", "plan2scene.utils.tile_util.tile_image"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_gen.predictor.TextureGenPredictor.predict_textures", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.tile_util.tile_image"], ["def", "process_surface", "(", "conf", ":", "ConfigManager", ",", "embeddings", ":", "dict", ",", "textures", ":", "dict", ",", "predictor", ":", "TextureGenPredictor", ",", "prop_index", ":", "int", ",", "seam_correct", ":", "bool", ",", "\n", "embark_texture_synthesis_path", ":", "str", ",", "seam_mask_path", ":", "str", ",", "\n", "key", "=", "\"prop\"", ")", "->", "None", ":", "\n", "    ", "\"\"\"\n    Synthesize texture prediction for a surface. Assign the key {key}_{prop_index} to the prediction.\n    :param conf:\n    :param embeddings: Surface texture embeddings of the surface\n    :param textures: Textures dictionary of the surface\n    :param predictor: Texture predictor\n    :param prop_index: Prop index\n    :param seam_correct: Should we correct seams?\n    :param embark_texture_synthesis_path: Path to texture synthesis package\n    :param seam_mask_path: Path to seam correction mask\n    :param key: Key used to identify embeddings\n    \"\"\"", "\n", "if", "key", "not", "in", "embeddings", ":", "\n", "        ", "return", "\n", "", "generated_crops", ",", "substance_names", ",", "extra", "=", "predictor", ".", "predict_textures", "(", "combined_embs", "=", "[", "embeddings", "[", "key", "]", "]", ",", "multiplier", "=", "conf", ".", "texture_gen", ".", "output_multiplier", ")", "\n", "if", "seam_correct", ":", "\n", "        ", "generated_crops", "[", "0", "]", "=", "tile_image", "(", "generated_crops", "[", "0", "]", ",", "embark_texture_synthesis_path", ",", "seam_mask_path", ")", "\n", "\n", "", "textures", "[", "f'{key}_{prop_index}'", "]", "=", "ImageDescription", "(", "generated_crops", "[", "0", "]", ",", "ImageSource", ".", "MULTI_PROP", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.baseline.retrieve_predict_observed.find_closest_match": [[16, 38], ["torch.no_grad", "torch.no_grad", "plan2scene.evaluation.metrics.CorrespondingPixelL1", "float", "textures.items", "plan2scene.common.image_description.ImageDescription", "plan2scene.evaluation.metrics.CorrespondingPixelL1."], "function", ["None"], ["def", "find_closest_match", "(", "conf", ":", "ConfigManager", ",", "reference_crop", ":", "ImageDescription", ",", "textures", ":", "dict", ")", "->", "ImageDescription", ":", "\n", "    ", "\"\"\"\n    Find the most similar texture to the reference crop using pixel l1 loss.\n    :param conf: Config Manager\n    :param reference_crop:  Reference image\n    :param textures: Dictionary of textures\n    :return: Selected texture\n    \"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "metric", "=", "CorrespondingPixelL1", "(", ")", "\n", "min_loss", "=", "float", "(", "\"inf\"", ")", "\n", "min_texture", "=", "None", "\n", "\n", "for", "texture_key", ",", "texture", "in", "textures", ".", "items", "(", ")", ":", "\n", "            ", "loss", "=", "metric", "(", "reference_crop", ".", "image", ",", "texture", ")", "\n", "\n", "if", "loss", "<=", "min_loss", ":", "\n", "                ", "min_loss", "=", "loss", "\n", "min_texture", "=", "texture", "\n", "\n", "", "", "assert", "min_texture", "is", "not", "None", "\n", "return", "ImageDescription", "(", "min_texture", ",", "ImageSource", ".", "RETRIEVE_OBSERVED", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.baseline.naivesynth_predict_observed.process_house": [[17, 34], ["house.rooms.items", "plan2scene.crop_select.util.fill_textures", "isinstance", "len", "torch.mean().unsqueeze", "torch.mean", "torch.cat", "list", "room.surface_embeddings[].values"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.crop_select.util.fill_textures", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len"], ["def", "process_house", "(", "conf", ":", "ConfigManager", ",", "house", ":", "House", ",", "predictor", ":", "TextureGenPredictor", ")", "->", "None", ":", "\n", "    ", "\"\"\"\n    Predicts textures for observed surface of a house using the mean embedding approach.\n    :param conf: Config manager\n    :param house: House applied with new textures\n    :param predictor: Predictor used to synthesize textures\n    \"\"\"", "\n", "for", "room_index", ",", "room", "in", "house", ".", "rooms", ".", "items", "(", ")", ":", "\n", "        ", "assert", "isinstance", "(", "room", ",", "Room", ")", "\n", "# Calculate the mean embs", "\n", "for", "surface", "in", "conf", ".", "surfaces", ":", "\n", "            ", "if", "len", "(", "room", ".", "surface_embeddings", "[", "surface", "]", ")", ">", "0", ":", "\n", "                ", "room", ".", "surface_embeddings", "[", "surface", "]", "=", "{", "\"prop\"", ":", "torch", ".", "mean", "(", "torch", ".", "cat", "(", "list", "(", "room", ".", "surface_embeddings", "[", "surface", "]", ".", "values", "(", ")", ")", ")", ",", "dim", "=", "0", ")", ".", "unsqueeze", "(", "0", ")", "}", "\n", "", "else", ":", "\n", "                ", "room", ".", "surface_embeddings", "[", "surface", "]", "=", "{", "}", "\n", "\n", "", "", "", "fill_textures", "(", "conf", ",", "{", "house", ".", "house_key", ":", "house", "}", ",", "predictor", "=", "predictor", ",", "log", "=", "False", ",", "image_source", "=", "ImageSource", ".", "MEAN_EMB", ",", "skip_existing_textures", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.baseline.direct_crop_predict_unobserved.load_houses_with_crops": [[13, 29], ["conf.get_data_list", "plan2scene.common.house_parser.parse_houses", "plan2scene.common.house_parser.map_surface_crops_to_houses", "conf.data_paths.arch_path_spec.format", "conf.data_paths.photoroom_path_spec.format"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.plan2scene.config_manager.ConfigManager.get_data_list", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.common.house_parser.parse_houses", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.common.house_parser.map_surface_crops_to_houses"], ["def", "load_houses_with_crops", "(", "conf", ":", "ConfigManager", ",", "split", ":", "str", ",", "drop", ":", "str", ")", "->", "dict", ":", "\n", "    ", "\"\"\"\n    Load houses populated with rectified surface crops extracted from photos.\n    :param conf: Config manager\n    :param split: Train/val/test split\n    :param drop: Drop fraction\n    :return: Dictionary of houses.\n    \"\"\"", "\n", "house_keys", "=", "conf", ".", "get_data_list", "(", "split", ")", "\n", "houses", "=", "parse_houses", "(", "conf", ",", "house_keys", ",", "house_path_spec", "=", "conf", ".", "data_paths", ".", "arch_path_spec", ".", "format", "(", "split", "=", "split", ",", "\n", "house_key", "=", "\"{house_key}\"", ")", ",", "\n", "photoroom_csv_path_spec", "=", "conf", ".", "data_paths", ".", "photoroom_path_spec", ".", "format", "(", "split", "=", "split", ",", "\n", "drop_fraction", "=", "drop", ",", "\n", "house_key", "=", "\"{house_key}\"", ")", ")", "\n", "map_surface_crops_to_houses", "(", "conf", ",", "houses", ")", "\n", "return", "houses", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.baseline.direct_crop_predict_unobserved.collect_house_crops": [[31, 57], ["house.rooms.items", "isinstance", "frozenset", "len", "[].append", "[].append", "plan2scene.utils.image_util.get_medoid_key", "room.surface_textures[].items"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.image_util.get_medoid_key"], ["", "def", "collect_house_crops", "(", "conf", ":", "ConfigManager", ",", "house", ":", "House", ",", "house_rs_crops", "=", "None", ")", "->", "dict", ":", "\n", "    ", "\"\"\"\n    Compute a nested dictionary for the mapping room_type->surface_type->list of crops.\n    :param conf: Config Manager\n    :param house: House to consider\n    :param house_rs_crops: If provided, update this mapping.\n    :return: Computed mapping\n    \"\"\"", "\n", "if", "house_rs_crops", "is", "None", ":", "\n", "        ", "house_rs_crops", "=", "{", "}", "\n", "", "for", "room_index", ",", "room", "in", "house", ".", "rooms", ".", "items", "(", ")", ":", "\n", "        ", "assert", "isinstance", "(", "room", ",", "Room", ")", "\n", "room_type", "=", "frozenset", "(", "room", ".", "types", ")", "\n", "\n", "if", "room_type", "not", "in", "house_rs_crops", ":", "\n", "            ", "house_rs_crops", "[", "room_type", "]", "=", "{", "v", ":", "[", "]", "for", "v", "in", "conf", ".", "surfaces", "}", "\n", "\n", "", "for", "surface", "in", "conf", ".", "surfaces", ":", "\n", "            ", "if", "len", "(", "room", ".", "surface_textures", "[", "surface", "]", ")", ">", "0", ":", "\n", "                ", "if", "\"prop\"", "in", "room", ".", "surface_textures", "[", "surface", "]", ":", "\n", "                    ", "house_rs_crops", "[", "room_type", "]", "[", "surface", "]", ".", "append", "(", "room", ".", "surface_textures", "[", "surface", "]", "[", "\"prop\"", "]", ")", "\n", "", "else", ":", "\n", "                    ", "house_rs_crops", "[", "room_type", "]", "[", "surface", "]", ".", "append", "(", "\n", "room", ".", "surface_textures", "[", "surface", "]", "[", "get_medoid_key", "(", "{", "k", ":", "v", "for", "k", ",", "v", "in", "room", ".", "surface_textures", "[", "surface", "]", ".", "items", "(", ")", "}", ")", "]", ")", "\n", "\n", "", "", "", "", "return", "house_rs_crops", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.baseline.direct_crop_predict_unobserved.collect_train_set_crops": [[59, 71], ["direct_crop_predict_unobserved.load_houses_with_crops", "enumerate", "load_houses_with_crops.items", "logging.info", "direct_crop_predict_unobserved.collect_house_crops", "len"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.baseline.retrieve_predict_unobserved.load_houses_with_crops", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.baseline.direct_crop_predict_unobserved.collect_house_crops", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len"], ["", "def", "collect_train_set_crops", "(", "conf", ":", "ConfigManager", ")", "->", "dict", ":", "\n", "    ", "\"\"\"\n    Collect crops from train set so we can use them in predictions.\n    :param conf: Config manager.\n    :return: Nested dictionary for the mapping room_type->surface_type->list of crops.\n    \"\"\"", "\n", "train_houses", "=", "load_houses_with_crops", "(", "conf", ",", "\"train\"", ",", "\"0.0\"", ")", "\n", "train_rs_crops", "=", "{", "}", "# {k:{v: [] for v in conf.surfaces} for k in conf.room_types}", "\n", "for", "i", ",", "(", "house_key", ",", "house", ")", "in", "enumerate", "(", "train_houses", ".", "items", "(", ")", ")", ":", "\n", "        ", "logging", ".", "info", "(", "\"[%d/%d] Processing TrainSet: %s\"", "%", "(", "i", ",", "len", "(", "train_houses", ")", ",", "house_key", ")", ")", "\n", "collect_house_crops", "(", "conf", ",", "house", ",", "train_rs_crops", ")", "\n", "", "return", "train_rs_crops", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.baseline.direct_crop_predict_unobserved.pick_texture": [[73, 96], ["numpy.random.randint", "len", "len", "numpy.random.randint", "numpy.random.randint", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len"], ["", "def", "pick_texture", "(", "train_rs_crops", ":", "dict", ",", "train_s_crops", ":", "dict", ",", "house_rs_crops", ":", "dict", ",", "room_type", ",", "surface_type", ")", ":", "\n", "    ", "\"\"\"\n    Pick a suitable texture given a room type and a surface type.\n    :param train_rs_crops: Room type -> surface type -> textures mapping from train set\n    :param train_s_crops: Surface type -> textures mapping from the train set\n    :param house_rs_crops: Room type -> surface type -> textures mapping from the observed surfaces of the house\n    :param room_type: Room type\n    :param surface_type: Surface type\n    :return: Selected texture\n    \"\"\"", "\n", "# First check whether we can pick a crop from the same house itself. For that, we need a similar RS surface with textures in the same house.", "\n", "if", "room_type", "in", "house_rs_crops", "and", "len", "(", "house_rs_crops", "[", "room_type", "]", "[", "surface_type", "]", ")", ">", "0", ":", "\n", "        ", "index", "=", "np", ".", "random", ".", "randint", "(", "len", "(", "house_rs_crops", "[", "room_type", "]", "[", "surface_type", "]", ")", ")", "\n", "return", "house_rs_crops", "[", "room_type", "]", "[", "surface_type", "]", "[", "index", "]", "\n", "\n", "", "elif", "room_type", "in", "train_rs_crops", "and", "len", "(", "train_rs_crops", "[", "room_type", "]", "[", "surface_type", "]", ")", ">", "0", ":", "\n", "# If we cant pick from the same house, try picking a similar RS surface from the train set.", "\n", "        ", "index", "=", "np", ".", "random", ".", "randint", "(", "len", "(", "train_rs_crops", "[", "room_type", "]", "[", "surface_type", "]", ")", ")", "\n", "return", "train_rs_crops", "[", "room_type", "]", "[", "surface_type", "]", "[", "index", "]", "\n", "", "else", ":", "\n", "# If we can't find a similar RS crop in the train set, just pick a similar S crop from the trainset", "\n", "        ", "index", "=", "np", ".", "random", ".", "randint", "(", "len", "(", "train_s_crops", "[", "surface_type", "]", ")", ")", "\n", "return", "train_s_crops", "[", "surface_type", "]", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.baseline.naivesynth_predict_unobserved.compute_rs_mean_embeddings": [[17, 40], ["enumerate", "train_houses.items", "isinstance", "logging.info", "house.rooms.items", "isinstance", "torch.mean().unsqueeze", "len", "torch.mean", "len", "[].extend", "torch.cat", "room.surface_embeddings[].values"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len"], ["def", "compute_rs_mean_embeddings", "(", "conf", ":", "ConfigManager", ",", "train_houses", ")", ":", "\n", "    ", "surface_type_rt_embs", "=", "{", "surface", ":", "{", "}", "for", "surface", "in", "conf", ".", "surfaces", "}", "# Mapping surface_type -> room_type -> list of embeddings", "\n", "\n", "for", "i", ",", "(", "house_key", ",", "house", ")", "in", "enumerate", "(", "train_houses", ".", "items", "(", ")", ")", ":", "\n", "        ", "assert", "isinstance", "(", "house", ",", "House", ")", "\n", "logging", ".", "info", "(", "\"[%d/%d] Computing RS Embedding %s\"", "%", "(", "i", ",", "len", "(", "train_houses", ")", ",", "house_key", ")", ")", "\n", "\n", "for", "room_index", ",", "room", "in", "house", ".", "rooms", ".", "items", "(", ")", ":", "\n", "            ", "assert", "isinstance", "(", "room", ",", "Room", ")", "\n", "# Calculate the mean embs", "\n", "for", "room_type", "in", "room", ".", "types", ":", "\n", "                ", "for", "surface", "in", "conf", ".", "surfaces", ":", "\n", "                    ", "if", "len", "(", "room", ".", "surface_embeddings", "[", "surface", "]", ")", ">", "0", ":", "\n", "                        ", "if", "room_type", "not", "in", "surface_type_rt_embs", "[", "surface", "]", ":", "\n", "                            ", "surface_type_rt_embs", "[", "surface", "]", "[", "room_type", "]", "=", "[", "]", "\n", "", "surface_type_rt_embs", "[", "surface", "]", "[", "room_type", "]", ".", "extend", "(", "[", "a", "for", "a", "in", "room", ".", "surface_embeddings", "[", "surface", "]", ".", "values", "(", ")", "]", ")", "\n", "\n", "", "", "", "", "", "surface_rt_emb_map", "=", "{", "surface", ":", "{", "}", "for", "surface", "in", "conf", ".", "surfaces", "}", "# Mapping surface_type -> room_type -> mean embedding", "\n", "for", "surface", "in", "conf", ".", "surfaces", ":", "\n", "        ", "for", "room_type", "in", "surface_type_rt_embs", "[", "surface", "]", ":", "\n", "            ", "surface_rt_emb_map", "[", "surface", "]", "[", "room_type", "]", "=", "torch", ".", "mean", "(", "torch", ".", "cat", "(", "surface_type_rt_embs", "[", "surface", "]", "[", "room_type", "]", ")", ",", "dim", "=", "0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "", "", "return", "surface_rt_emb_map", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.baseline.naivesynth_predict_unobserved.process_house": [[42, 60], ["house.rooms.items", "plan2scene.crop_select.util.fill_textures", "isinstance", "len", "torch.cat().mean().unsqueeze", "surface_emb_candidates.append", "torch.cat().mean", "torch.cat"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.crop_select.util.fill_textures", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len"], ["", "def", "process_house", "(", "conf", ":", "ConfigManager", ",", "house", ":", "House", ",", "predictor", ":", "TextureGenPredictor", ",", "rs_embeddings", ":", "dict", ")", ":", "\n", "    ", "for", "room_index", ",", "room", "in", "house", ".", "rooms", ".", "items", "(", ")", ":", "\n", "        ", "assert", "isinstance", "(", "room", ",", "Room", ")", "\n", "for", "surface", "in", "conf", ".", "surfaces", ":", "\n", "            ", "if", "\"prop\"", "in", "room", ".", "surface_embeddings", "[", "surface", "]", ":", "\n", "                ", "continue", "# Already has a prediction. Surface observed. Therefore, skip.", "\n", "\n", "# Collect candidates from different room type labels assigned to room", "\n", "", "surface_emb_candidates", "=", "[", "]", "\n", "for", "room_type", "in", "room", ".", "types", ":", "\n", "                ", "if", "room_type", "in", "rs_embeddings", "[", "surface", "]", ":", "\n", "                    ", "surface_emb_candidates", ".", "append", "(", "rs_embeddings", "[", "surface", "]", "[", "room_type", "]", ")", "\n", "\n", "", "", "if", "len", "(", "surface_emb_candidates", ")", ">", "0", ":", "\n", "                ", "surface_emb", "=", "torch", ".", "cat", "(", "surface_emb_candidates", ",", "dim", "=", "0", ")", ".", "mean", "(", "dim", "=", "0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "room", ".", "surface_embeddings", "[", "surface", "]", "=", "{", "\"prop\"", ":", "surface_emb", "}", "\n", "\n", "", "", "", "fill_textures", "(", "conf", ",", "{", "house", ".", "house_key", ":", "house", "}", ",", "predictor", "=", "predictor", ",", "log", "=", "False", ",", "image_source", "=", "ImageSource", ".", "RS_MEAN_EMB", ",", "skip_existing_textures", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.baseline.retrieve_predict_unobserved.load_houses_with_crops": [[18, 34], ["conf.get_data_list", "plan2scene.common.house_parser.parse_houses", "plan2scene.common.house_parser.map_surface_crops_to_houses", "conf.data_paths.arch_path_spec.format", "conf.data_paths.photoroom_path_spec.format"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.plan2scene.config_manager.ConfigManager.get_data_list", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.common.house_parser.parse_houses", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.common.house_parser.map_surface_crops_to_houses"], ["def", "load_houses_with_crops", "(", "conf", ":", "ConfigManager", ",", "split", ":", "str", ",", "drop", ":", "str", ")", "->", "dict", ":", "\n", "    ", "\"\"\"\n    Load houses populated with rectified surface crops extracted from photos.\n    :param conf: Config manager\n    :param split: Train/val/test split\n    :param drop: Drop fraction\n    :return: Dictionary of houses.\n    \"\"\"", "\n", "house_keys", "=", "conf", ".", "get_data_list", "(", "split", ")", "\n", "houses", "=", "parse_houses", "(", "conf", ",", "house_keys", ",", "house_path_spec", "=", "conf", ".", "data_paths", ".", "arch_path_spec", ".", "format", "(", "split", "=", "split", ",", "\n", "house_key", "=", "\"{house_key}\"", ")", ",", "\n", "photoroom_csv_path_spec", "=", "conf", ".", "data_paths", ".", "photoroom_path_spec", ".", "format", "(", "split", "=", "split", ",", "\n", "drop_fraction", "=", "drop", ",", "\n", "house_key", "=", "\"{house_key}\"", ")", ")", "\n", "map_surface_crops_to_houses", "(", "conf", ",", "houses", ")", "\n", "return", "houses", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.baseline.retrieve_predict_unobserved.house_rs_statistics": [[36, 60], ["house.rooms.items", "isinstance", "frozenset", "len", "[].append", "retrieve_predict_unobserved.find_closest_match_key", "plan2scene.utils.image_util.get_medoid_key"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.baseline.retrieve_predict_unobserved.find_closest_match_key", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.utils.image_util.get_medoid_key"], ["", "def", "house_rs_statistics", "(", "conf", ":", "ConfigManager", ",", "house", ":", "House", ",", "textures", ":", "dict", ",", "rs_closest_picks", ":", "dict", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Compute RS statistics on a house.\n    :param conf: Config manager\n    :param house: House considered\n    :param textures: Dictionary of textures\n    :param rs_closest_picks: Optional. A nested dictionary {room_type -> surface_type -> list of textures} which we update.\n    :return: Updated / new nested dictionary showing the mapping room_type -> surface_type -> list of textures.\n    \"\"\"", "\n", "if", "rs_closest_picks", "is", "None", ":", "\n", "        ", "rs_closest_picks", "=", "{", "}", "\n", "\n", "", "for", "room_index", ",", "room", "in", "house", ".", "rooms", ".", "items", "(", ")", ":", "\n", "        ", "isinstance", "(", "room", ",", "Room", ")", "\n", "room_type", "=", "frozenset", "(", "room", ".", "types", ")", "\n", "if", "room_type", "not", "in", "rs_closest_picks", ":", "\n", "            ", "rs_closest_picks", "[", "room_type", "]", "=", "{", "v", ":", "[", "]", "for", "v", "in", "conf", ".", "surfaces", "}", "\n", "\n", "", "for", "surface", "in", "conf", ".", "surfaces", ":", "\n", "            ", "if", "len", "(", "room", ".", "surface_textures", "[", "surface", "]", ")", ">", "0", ":", "\n", "                ", "rs_closest_picks", "[", "room_type", "]", "[", "surface", "]", ".", "append", "(", "\n", "find_closest_match_key", "(", "conf", ",", "room", ".", "surface_textures", "[", "surface", "]", "[", "get_medoid_key", "(", "room", ".", "surface_textures", "[", "surface", "]", ")", "]", ",", "textures", ")", ")", "\n", "\n", "", "", "", "return", "rs_closest_picks", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.baseline.retrieve_predict_unobserved.compute_rs_statistics": [[62, 78], ["retrieve_predict_unobserved.load_houses_with_crops", "enumerate", "load_houses_with_crops.items", "logging.info", "retrieve_predict_unobserved.house_rs_statistics", "len"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.baseline.retrieve_predict_unobserved.load_houses_with_crops", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.baseline.retrieve_predict_unobserved.house_rs_statistics", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len"], ["", "def", "compute_rs_statistics", "(", "conf", ":", "ConfigManager", ",", "textures", ":", "dict", ")", ":", "\n", "    ", "\"\"\"\n    Compute RS statistics on the train set.\n    :param conf: Config Manager\n    :param textures: Dictionary of textures.\n    :return: Nested dictionary depicting the mapping room type -> surface type -> list of textures.\n    \"\"\"", "\n", "# Compute statistics on the train set", "\n", "train_houses", "=", "load_houses_with_crops", "(", "conf", ",", "\"train\"", ",", "\"0.0\"", ")", "\n", "\n", "train_rs_closest_picks", "=", "{", "}", "# {k:{v: [] for v in conf.surfaces} for k in conf.room_types}", "\n", "for", "i", ",", "(", "house_key", ",", "house", ")", "in", "enumerate", "(", "train_houses", ".", "items", "(", ")", ")", ":", "\n", "        ", "logging", ".", "info", "(", "\"[%d/%d] Processing train set: %s\"", "%", "(", "i", ",", "len", "(", "train_houses", ")", ",", "house_key", ")", ")", "\n", "house_rs_statistics", "(", "conf", ",", "house", ",", "textures", ",", "train_rs_closest_picks", ")", "\n", "\n", "", "return", "train_rs_closest_picks", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.baseline.retrieve_predict_unobserved.find_closest_match_key": [[80, 102], ["torch.no_grad", "torch.no_grad", "plan2scene.evaluation.metrics.CorrespondingPixelL1", "float", "textures.items", "plan2scene.evaluation.metrics.CorrespondingPixelL1."], "function", ["None"], ["", "def", "find_closest_match_key", "(", "conf", ":", "ConfigManager", ",", "reference_crop", ":", "ImageDescription", ",", "textures", ":", "dict", ")", "->", "str", ":", "\n", "    ", "\"\"\"\n    Find the most similar texture to the reference crop using pixel l1 loss.\n    :param conf: Config Manager\n    :param reference_crop:  Reference image\n    :param textures: Dictionary of textures\n    :return: Key of closest matching texture\n    \"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "metric", "=", "CorrespondingPixelL1", "(", ")", "\n", "min_loss", "=", "float", "(", "\"inf\"", ")", "\n", "min_texture_key", "=", "None", "\n", "\n", "for", "texture_key", ",", "texture", "in", "textures", ".", "items", "(", ")", ":", "\n", "            ", "loss", "=", "metric", "(", "reference_crop", ".", "image", ",", "texture", ")", "\n", "\n", "if", "loss", "<=", "min_loss", ":", "\n", "                ", "min_loss", "=", "loss", "\n", "min_texture_key", "=", "texture_key", "\n", "\n", "", "", "assert", "min_texture_key", "is", "not", "None", "\n", "return", "min_texture_key", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.baseline.retrieve_predict_unobserved.pick": [[104, 114], ["numpy.unique", "numpy.argmax"], "function", ["None"], ["", "", "def", "pick", "(", "items", ":", "list", ")", ":", "\n", "    ", "\"\"\"\n    Pick the most frequent item in a list.\n    :param items: List of items.\n    :return: Most frequent item.\n    \"\"\"", "\n", "# Pick most frequent", "\n", "elements", ",", "counts", "=", "np", ".", "unique", "(", "items", ",", "return_counts", "=", "True", ")", "\n", "most_freq", "=", "elements", "[", "np", ".", "argmax", "(", "counts", ")", "]", "\n", "return", "most_freq", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.baseline.retrieve_predict_unobserved.pick_texture": [[116, 142], ["plan2scene.common.image_description.ImageDescription", "plan2scene.common.image_description.ImageDescription", "plan2scene.common.image_description.ImageDescription", "len", "len", "len", "retrieve_predict_unobserved.pick", "retrieve_predict_unobserved.pick", "retrieve_predict_unobserved.pick"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.texture_prop.houses_dataset.HouseDataset.len", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.baseline.retrieve_predict_unobserved.pick", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.baseline.retrieve_predict_unobserved.pick", "home.repos.pwc.inspect_result.3dlg-hcvc_plan2scene.baseline.retrieve_predict_unobserved.pick"], ["", "def", "pick_texture", "(", "train_rs_closest_picks", ":", "dict", ",", "train_s_closest_picks", ":", "dict", ",", "house_closest_picks", ":", "dict", ",", "room_type", ":", "frozenset", ",", "surface_type", ":", "str", ",", "\n", "textures", ":", "dict", ")", "->", "ImageDescription", ":", "\n", "    ", "\"\"\"\n    Pick a suitable texture for an unobserved surface.\n    :param train_rs_closest_picks: RS statistics computed on the train set.\n    :param train_s_closest_picks: S statistics computed on the train set.\n    :param house_closest_picks: RS statistics computed on the observed surfaces of the house considered.\n    :param room_type: Room type of the room containing the considered surface,\n    :param surface_type: Surface type of the surface considered.\n    :param textures: Textures dataset.\n    :return: Predicted texture for the considered surface.\n    \"\"\"", "\n", "# First, try to select a same RS surface from the same house", "\n", "if", "room_type", "in", "house_closest_picks", "and", "len", "(", "house_closest_picks", "[", "room_type", "]", "[", "surface_type", "]", ")", ">", "0", ":", "\n", "        ", "return", "ImageDescription", "(", "textures", "[", "pick", "(", "house_closest_picks", "[", "room_type", "]", "[", "surface_type", "]", ")", "]", ",", "ImageSource", ".", "RETRIEVE_UNOBSERVED", ")", "\n", "\n", "# If no match, try to pick from a same RS surface from the training set", "\n", "", "if", "room_type", "in", "train_rs_closest_picks", "and", "len", "(", "train_rs_closest_picks", "[", "room_type", "]", "[", "surface_type", "]", ")", ">", "0", ":", "\n", "        ", "return", "ImageDescription", "(", "textures", "[", "pick", "(", "train_rs_closest_picks", "[", "room_type", "]", "[", "surface_type", "]", ")", "]", ",", "ImageSource", ".", "RETRIEVE_UNOBSERVED", ")", "\n", "\n", "# If no match, relax room type matching, pick a same S surface from the training set", "\n", "", "if", "room_type", "not", "in", "train_rs_closest_picks", "or", "len", "(", "train_rs_closest_picks", "[", "room_type", "]", "[", "surface_type", "]", ")", "==", "0", ":", "\n", "# Search in entire pool of surface typed textures if no match can be done on RS.", "\n", "        ", "return", "ImageDescription", "(", "textures", "[", "pick", "(", "train_s_closest_picks", "[", "surface_type", "]", ")", "]", ",", "ImageSource", ".", "RETRIEVE_UNOBSERVED", ")", "\n", "\n", "", "assert", "False", "\n", "\n"]]}