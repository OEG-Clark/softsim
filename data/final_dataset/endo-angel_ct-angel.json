{"home.repos.pwc.inspect_result.endo-angel_ct-angel.unet_pp.utils.get_layer_number": [[5, 22], ["enumerate", "ValueError"], "function", ["None"], ["def", "get_layer_number", "(", "model", ",", "layer_name", ")", ":", "\n", "    ", "\"\"\"\n    Help find layer in Keras model by name\n    Args:\n        model: Keras `Model`\n        layer_name: str, name of layer\n\n    Returns:\n        index of layer\n\n    Raises:\n        ValueError: if model does not contains layer with such name\n    \"\"\"", "\n", "for", "i", ",", "l", "in", "enumerate", "(", "model", ".", "layers", ")", ":", "\n", "        ", "if", "l", ".", "name", "==", "layer_name", ":", "\n", "            ", "return", "i", "\n", "", "", "raise", "ValueError", "(", "'No layer with name {} in  model {}.'", ".", "format", "(", "layer_name", ",", "model", ".", "name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.endo-angel_ct-angel.unet_pp.utils.extract_outputs": [[24, 43], ["outputs.insert", "isinstance", "utils.get_layer_number"], "function", ["home.repos.pwc.inspect_result.endo-angel_ct-angel.unet_pp.utils.get_layer_number"], ["", "def", "extract_outputs", "(", "model", ",", "layers", ",", "include_top", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Help extract intermediate layer outputs from model\n    Args:\n        model: Keras `Model`\n        layer: list of integers/str, list of layers indexes or names to extract output\n        include_top: bool, include final model layer output\n\n    Returns:\n        list of tensors (outputs)\n    \"\"\"", "\n", "layers_indexes", "=", "(", "[", "get_layer_number", "(", "model", ",", "l", ")", "if", "isinstance", "(", "l", ",", "str", ")", "else", "l", "\n", "for", "l", "in", "layers", "]", ")", "\n", "outputs", "=", "[", "model", ".", "layers", "[", "i", "]", ".", "output", "for", "i", "in", "layers_indexes", "]", "\n", "\n", "if", "include_top", ":", "\n", "        ", "outputs", ".", "insert", "(", "0", ",", "model", ".", "output", ")", "\n", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.endo-angel_ct-angel.unet_pp.utils.reverse": [[45, 48], ["list", "reversed"], "function", ["None"], ["", "def", "reverse", "(", "l", ")", ":", "\n", "    ", "\"\"\"Reverse list\"\"\"", "\n", "return", "list", "(", "reversed", "(", "l", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.endo-angel_ct-angel.unet_pp.utils.add_docstring": [[51, 63], ["functools.wraps", "fn"], "function", ["None"], ["", "def", "add_docstring", "(", "doc_string", "=", "None", ")", ":", "\n", "    ", "def", "decorator", "(", "fn", ")", ":", "\n", "        ", "if", "fn", ".", "__doc__", ":", "\n", "            ", "fn", ".", "__doc__", "+=", "doc_string", "\n", "", "else", ":", "\n", "            ", "fn", ".", "__doc__", "=", "doc_string", "\n", "\n", "", "@", "wraps", "(", "fn", ")", "\n", "def", "wrapper", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "            ", "return", "fn", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "", "return", "wrapper", "\n", "", "return", "decorator", "\n", "\n"]], "home.repos.pwc.inspect_result.endo-angel_ct-angel.unet_pp.utils.recompile": [[65, 67], ["model.compile"], "function", ["None"], ["", "def", "recompile", "(", "model", ")", ":", "\n", "    ", "model", ".", "compile", "(", "model", ".", "optimizer", ",", "model", ".", "loss", ",", "model", ".", "metrics", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.endo-angel_ct-angel.unet_pp.utils.freeze_model": [[69, 73], ["None"], "function", ["None"], ["", "def", "freeze_model", "(", "model", ")", ":", "\n", "    ", "for", "layer", "in", "model", ".", "layers", ":", "\n", "        ", "layer", ".", "trainable", "=", "False", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.endo-angel_ct-angel.unet_pp.utils.set_trainable": [[75, 79], ["utils.recompile"], "function", ["home.repos.pwc.inspect_result.endo-angel_ct-angel.unet_pp.utils.recompile"], ["", "def", "set_trainable", "(", "model", ")", ":", "\n", "    ", "for", "layer", "in", "model", ".", "layers", ":", "\n", "        ", "layer", ".", "trainable", "=", "True", "\n", "", "recompile", "(", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.endo-angel_ct-angel.unet_pp.utils.to_tuple": [[81, 89], ["isinstance", "ValueError", "numpy.isscalar", "len"], "function", ["None"], ["", "def", "to_tuple", "(", "x", ")", ":", "\n", "    ", "if", "isinstance", "(", "x", ",", "tuple", ")", ":", "\n", "        ", "if", "len", "(", "x", ")", "==", "2", ":", "\n", "            ", "return", "x", "\n", "", "", "elif", "np", ".", "isscalar", "(", "x", ")", ":", "\n", "        ", "return", "(", "x", ",", "x", ")", "\n", "\n", "", "raise", "ValueError", "(", "'Value should be tuple of length 2 or int value, got \"{}\"'", ".", "format", "(", "x", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.endo-angel_ct-angel.xnet.blocks.handle_block_names": [[9, 16], ["None"], "function", ["None"], ["def", "handle_block_names", "(", "stage", ",", "cols", ")", ":", "\n", "    ", "conv_name", "=", "'decoder_stage{}-{}_conv'", ".", "format", "(", "stage", ",", "cols", ")", "\n", "bn_name", "=", "'decoder_stage{}-{}_bn'", ".", "format", "(", "stage", ",", "cols", ")", "\n", "relu_name", "=", "'decoder_stage{}-{}_relu'", ".", "format", "(", "stage", ",", "cols", ")", "\n", "up_name", "=", "'decoder_stage{}-{}_upsample'", ".", "format", "(", "stage", ",", "cols", ")", "\n", "merge_name", "=", "'merge_{}-{}'", ".", "format", "(", "stage", ",", "cols", ")", "\n", "return", "conv_name", ",", "bn_name", ",", "relu_name", ",", "up_name", ",", "merge_name", "\n", "\n"]], "home.repos.pwc.inspect_result.endo-angel_ct-angel.xnet.blocks.ConvRelu": [[18, 26], ["keras.layers.Conv2D", "keras.layers.Activation", "keras.layers.BatchNormalization"], "function", ["None"], ["", "def", "ConvRelu", "(", "filters", ",", "kernel_size", ",", "use_batchnorm", "=", "False", ",", "conv_name", "=", "'conv'", ",", "bn_name", "=", "'bn'", ",", "relu_name", "=", "'relu'", ")", ":", "\n", "    ", "def", "layer", "(", "x", ")", ":", "\n", "        ", "x", "=", "Conv2D", "(", "filters", ",", "kernel_size", ",", "padding", "=", "\"same\"", ",", "name", "=", "conv_name", ",", "use_bias", "=", "not", "(", "use_batchnorm", ")", ")", "(", "x", ")", "\n", "if", "use_batchnorm", ":", "\n", "            ", "x", "=", "BatchNormalization", "(", "name", "=", "bn_name", ")", "(", "x", ")", "\n", "", "x", "=", "Activation", "(", "'relu'", ",", "name", "=", "relu_name", ")", "(", "x", ")", "\n", "return", "x", "\n", "", "return", "layer", "\n", "\n"]], "home.repos.pwc.inspect_result.endo-angel_ct-angel.xnet.blocks.Upsample2D_block": [[28, 48], ["blocks.handle_block_names", "keras.layers.UpSampling2D", "blocks.ConvRelu", "blocks.ConvRelu", "keras.layers.Concatenate"], "function", ["home.repos.pwc.inspect_result.endo-angel_ct-angel.resnext.blocks.handle_block_names", "home.repos.pwc.inspect_result.endo-angel_ct-angel.xnet.blocks.ConvRelu", "home.repos.pwc.inspect_result.endo-angel_ct-angel.xnet.blocks.ConvRelu"], ["", "def", "Upsample2D_block", "(", "filters", ",", "stage", ",", "cols", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "upsample_rate", "=", "(", "2", ",", "2", ")", ",", "\n", "use_batchnorm", "=", "False", ",", "skip", "=", "None", ")", ":", "\n", "\n", "    ", "def", "layer", "(", "input_tensor", ")", ":", "\n", "\n", "        ", "conv_name", ",", "bn_name", ",", "relu_name", ",", "up_name", ",", "merge_name", "=", "handle_block_names", "(", "stage", ",", "cols", ")", "\n", "\n", "x", "=", "UpSampling2D", "(", "size", "=", "upsample_rate", ",", "name", "=", "up_name", ")", "(", "input_tensor", ")", "\n", "\n", "if", "skip", "is", "not", "None", ":", "\n", "            ", "x", "=", "Concatenate", "(", "name", "=", "merge_name", ")", "(", "[", "x", ",", "skip", "]", ")", "\n", "\n", "", "x", "=", "ConvRelu", "(", "filters", ",", "kernel_size", ",", "use_batchnorm", "=", "use_batchnorm", ",", "\n", "conv_name", "=", "conv_name", "+", "'1'", ",", "bn_name", "=", "bn_name", "+", "'1'", ",", "relu_name", "=", "relu_name", "+", "'1'", ")", "(", "x", ")", "\n", "\n", "x", "=", "ConvRelu", "(", "filters", ",", "kernel_size", ",", "use_batchnorm", "=", "use_batchnorm", ",", "\n", "conv_name", "=", "conv_name", "+", "'2'", ",", "bn_name", "=", "bn_name", "+", "'2'", ",", "relu_name", "=", "relu_name", "+", "'2'", ")", "(", "x", ")", "\n", "\n", "return", "x", "\n", "", "return", "layer", "\n", "\n"]], "home.repos.pwc.inspect_result.endo-angel_ct-angel.xnet.blocks.Transpose2D_block": [[50, 79], ["blocks.handle_block_names", "keras.layers.Conv2DTranspose", "keras.layers.Activation", "blocks.ConvRelu", "keras.layers.BatchNormalization", "type", "merge_list.append", "type", "type", "merge_list.append", "keras.layers.Concatenate", "keras.layers.Concatenate"], "function", ["home.repos.pwc.inspect_result.endo-angel_ct-angel.resnext.blocks.handle_block_names", "home.repos.pwc.inspect_result.endo-angel_ct-angel.xnet.blocks.ConvRelu"], ["", "def", "Transpose2D_block", "(", "filters", ",", "stage", ",", "cols", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "upsample_rate", "=", "(", "2", ",", "2", ")", ",", "\n", "transpose_kernel_size", "=", "(", "4", ",", "4", ")", ",", "use_batchnorm", "=", "False", ",", "skip", "=", "None", ")", ":", "\n", "\n", "    ", "def", "layer", "(", "input_tensor", ")", ":", "\n", "\n", "        ", "conv_name", ",", "bn_name", ",", "relu_name", ",", "up_name", ",", "merge_name", "=", "handle_block_names", "(", "stage", ",", "cols", ")", "\n", "\n", "x", "=", "Conv2DTranspose", "(", "filters", ",", "transpose_kernel_size", ",", "strides", "=", "upsample_rate", ",", "\n", "padding", "=", "'same'", ",", "name", "=", "up_name", ",", "use_bias", "=", "not", "(", "use_batchnorm", ")", ")", "(", "input_tensor", ")", "\n", "if", "use_batchnorm", ":", "\n", "            ", "x", "=", "BatchNormalization", "(", "name", "=", "bn_name", "+", "'1'", ")", "(", "x", ")", "\n", "", "x", "=", "Activation", "(", "'relu'", ",", "name", "=", "relu_name", "+", "'1'", ")", "(", "x", ")", "\n", "\n", "if", "(", "type", "(", "skip", ")", "!=", "list", "and", "skip", "is", "not", "None", ")", "or", "(", "type", "(", "skip", ")", "==", "list", "and", "None", "not", "in", "skip", ")", ":", "\n", "# print(\"\\nskip = {}\".format(skip))", "\n", "            ", "if", "type", "(", "skip", ")", "is", "list", ":", "\n", "                ", "merge_list", "=", "[", "]", "\n", "merge_list", ".", "append", "(", "x", ")", "\n", "for", "l", "in", "skip", ":", "\n", "                    ", "merge_list", ".", "append", "(", "l", ")", "\n", "", "x", "=", "Concatenate", "(", "name", "=", "merge_name", ")", "(", "merge_list", ")", "\n", "", "else", ":", "\n", "                ", "x", "=", "Concatenate", "(", "name", "=", "merge_name", ")", "(", "[", "x", ",", "skip", "]", ")", "\n", "\n", "", "", "x", "=", "ConvRelu", "(", "filters", ",", "kernel_size", ",", "use_batchnorm", "=", "use_batchnorm", ",", "\n", "conv_name", "=", "conv_name", "+", "'2'", ",", "bn_name", "=", "bn_name", "+", "'2'", ",", "relu_name", "=", "relu_name", "+", "'2'", ")", "(", "x", ")", "\n", "\n", "return", "x", "\n", "", "return", "layer", "", "", ""]], "home.repos.pwc.inspect_result.endo-angel_ct-angel.xnet.builder.build_xnet": [[12, 176], ["range", "range", "range", "keras.models.Model", "len", "len", "len", "range", "keras.layers.Conv2D", "keras.layers.Activation", "isinstance", "utils.get_layer_number", "range", "isinstance", "utils.get_layer_number", "range", "utils.to_tuple", "int", "int", "len", "len", "len", "len", "len", "up_block", "up_block"], "function", ["home.repos.pwc.inspect_result.endo-angel_ct-angel.unet_pp.utils.get_layer_number", "home.repos.pwc.inspect_result.endo-angel_ct-angel.unet_pp.utils.get_layer_number", "home.repos.pwc.inspect_result.endo-angel_ct-angel.unet_pp.utils.to_tuple"], ["def", "build_xnet", "(", "backbone", ",", "classes", ",", "skip_connection_layers", ",", "\n", "decoder_filters", "=", "(", "256", ",", "128", ",", "64", ",", "32", ",", "16", ")", ",", "\n", "upsample_rates", "=", "(", "2", ",", "2", ",", "2", ",", "2", ",", "2", ")", ",", "\n", "n_upsample_blocks", "=", "5", ",", "\n", "block_type", "=", "'upsampling'", ",", "\n", "activation", "=", "'sigmoid'", ",", "\n", "use_batchnorm", "=", "True", ")", ":", "\n", "\n", "    ", "input", "=", "backbone", ".", "input", "\n", "# print(n_upsample_blocks)", "\n", "\n", "if", "block_type", "==", "'transpose'", ":", "\n", "        ", "up_block", "=", "Transpose2D_block", "\n", "", "else", ":", "\n", "        ", "up_block", "=", "Upsample2D_block", "\n", "\n", "", "if", "len", "(", "skip_connection_layers", ")", ">", "n_upsample_blocks", ":", "\n", "        ", "downsampling_layers", "=", "skip_connection_layers", "[", "int", "(", "len", "(", "skip_connection_layers", ")", "/", "2", ")", ":", "]", "\n", "skip_connection_layers", "=", "skip_connection_layers", "[", ":", "int", "(", "len", "(", "skip_connection_layers", ")", "/", "2", ")", "]", "\n", "", "else", ":", "\n", "        ", "downsampling_layers", "=", "skip_connection_layers", "\n", "\n", "\n", "# convert layer names to indices", "\n", "", "skip_connection_idx", "=", "(", "[", "get_layer_number", "(", "backbone", ",", "l", ")", "if", "isinstance", "(", "l", ",", "str", ")", "else", "l", "\n", "for", "l", "in", "skip_connection_layers", "]", ")", "\n", "skip_layers_list", "=", "[", "backbone", ".", "layers", "[", "skip_connection_idx", "[", "i", "]", "]", ".", "output", "for", "i", "in", "range", "(", "len", "(", "skip_connection_idx", ")", ")", "]", "\n", "downsampling_idx", "=", "(", "[", "get_layer_number", "(", "backbone", ",", "l", ")", "if", "isinstance", "(", "l", ",", "str", ")", "else", "l", "\n", "for", "l", "in", "downsampling_layers", "]", ")", "\n", "downsampling_list", "=", "[", "backbone", ".", "layers", "[", "downsampling_idx", "[", "i", "]", "]", ".", "output", "for", "i", "in", "range", "(", "len", "(", "downsampling_idx", ")", ")", "]", "\n", "downterm", "=", "[", "None", "]", "*", "(", "n_upsample_blocks", "+", "1", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "downsampling_idx", ")", ")", ":", "\n", "# print(downsampling_list[0])", "\n", "# print(backbone.output)", "\n", "# print(\"\")", "\n", "        ", "if", "downsampling_list", "[", "0", "]", "==", "backbone", ".", "output", ":", "\n", "# print(\"VGG16 should be!\")", "\n", "            ", "downterm", "[", "n_upsample_blocks", "-", "i", "]", "=", "downsampling_list", "[", "i", "]", "\n", "", "else", ":", "\n", "            ", "downterm", "[", "n_upsample_blocks", "-", "i", "-", "1", "]", "=", "downsampling_list", "[", "i", "]", "\n", "", "", "downterm", "[", "-", "1", "]", "=", "backbone", ".", "output", "\n", "# print(\"downterm = {}\".format(downterm))", "\n", "\n", "interm", "=", "[", "None", "]", "*", "(", "n_upsample_blocks", "+", "1", ")", "*", "(", "n_upsample_blocks", "+", "1", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "skip_connection_idx", ")", ")", ":", "\n", "        ", "interm", "[", "-", "i", "*", "(", "n_upsample_blocks", "+", "1", ")", "+", "(", "n_upsample_blocks", "+", "1", ")", "*", "(", "n_upsample_blocks", "-", "1", ")", "]", "=", "skip_layers_list", "[", "i", "]", "\n", "", "interm", "[", "(", "n_upsample_blocks", "+", "1", ")", "*", "n_upsample_blocks", "]", "=", "backbone", ".", "output", "\n", "\n", "for", "j", "in", "range", "(", "n_upsample_blocks", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "n_upsample_blocks", "-", "j", ")", ":", "\n", "            ", "upsample_rate", "=", "to_tuple", "(", "upsample_rates", "[", "i", "]", ")", "\n", "# print(j, i)", "\n", "\n", "if", "i", "==", "0", "and", "j", "<", "n_upsample_blocks", "-", "1", "and", "len", "(", "skip_connection_layers", ")", "<", "n_upsample_blocks", ":", "\n", "                ", "interm", "[", "(", "n_upsample_blocks", "+", "1", ")", "*", "i", "+", "j", "+", "1", "]", "=", "None", "\n", "", "elif", "j", "==", "0", ":", "\n", "                ", "if", "downterm", "[", "i", "+", "1", "]", "is", "not", "None", ":", "\n", "                    ", "interm", "[", "(", "n_upsample_blocks", "+", "1", ")", "*", "i", "+", "j", "+", "1", "]", "=", "up_block", "(", "decoder_filters", "[", "n_upsample_blocks", "-", "i", "-", "2", "]", ",", "\n", "i", "+", "1", ",", "j", "+", "1", ",", "upsample_rate", "=", "upsample_rate", ",", "\n", "skip", "=", "interm", "[", "(", "n_upsample_blocks", "+", "1", ")", "*", "i", "+", "j", "]", ",", "\n", "use_batchnorm", "=", "use_batchnorm", ")", "(", "downterm", "[", "i", "+", "1", "]", ")", "\n", "", "else", ":", "\n", "                    ", "interm", "[", "(", "n_upsample_blocks", "+", "1", ")", "*", "i", "+", "j", "+", "1", "]", "=", "None", "\n", "# print(\"\\n{} = {} + {}\\n\".format(interm[(n_upsample_blocks+1)*i+j+1],", "\n", "#                             interm[(n_upsample_blocks+1)*i+j], ", "\n", "#                             downterm[i+1]))", "\n", "", "", "else", ":", "\n", "                ", "interm", "[", "(", "n_upsample_blocks", "+", "1", ")", "*", "i", "+", "j", "+", "1", "]", "=", "up_block", "(", "decoder_filters", "[", "n_upsample_blocks", "-", "i", "-", "2", "]", ",", "\n", "i", "+", "1", ",", "j", "+", "1", ",", "upsample_rate", "=", "upsample_rate", ",", "\n", "skip", "=", "interm", "[", "(", "n_upsample_blocks", "+", "1", ")", "*", "i", ":", "(", "n_upsample_blocks", "+", "1", ")", "*", "i", "+", "j", "+", "1", "]", ",", "\n", "use_batchnorm", "=", "use_batchnorm", ")", "(", "interm", "[", "(", "n_upsample_blocks", "+", "1", ")", "*", "(", "i", "+", "1", ")", "+", "j", "]", ")", "\n", "# print(\"\\n{} = {} + {}\\n\".format(interm[(n_upsample_blocks+1)*i+j+1],", "\n", "#                             interm[(n_upsample_blocks+1)*i : (n_upsample_blocks+1)*i+j+1], ", "\n", "#                             interm[(n_upsample_blocks+1)*(i+1)+j]))", "\n", "\n", "# print('\\n\\n\\n')", "\n", "# for x in range(n_upsample_blocks+1):", "\n", "#     for y in range(n_upsample_blocks+1):", "\n", "#         print(interm[x*(n_upsample_blocks+1)+y], end=' ', flush=True)", "\n", "#     print('\\n')", "\n", "# print('\\n\\n\\n')", "\n", "#print(interm)", "\n", "\n", "", "", "", "\"\"\"\n    for i in range(n_upsample_blocks-2):\n        interm = []\n        x = skip_layers_list[n_upsample_blocks-i-2]\n\n    \n    x = {}\n    for stage in range(n_upsample_blocks-1):\n        i = n_upsample_blocks - stage - 1\n        x = backbone.layers[skip_connection_idx[i-1]].output\n        for col in range(stage+1):\n            print(\"i = {}, col = {}, index = {}\".format(i, col, i+col))\n            skip_connection = None\n            if i-col < len(skip_connection_idx):\n                skip_connection = skip_layers_list[i-col]\n            upsample_rate = to_tuple(upsample_rates[i-col])\n            x = up_block(decoder_filters[i-col], stage-col+1, col+1, upsample_rate=upsample_rate,\n                         skip=skip_connection, use_batchnorm=use_batchnorm)(x)\n            skip_layers_list[i+col] = x\n\n    x = backbone.output\n    for i in range(n_upsample_blocks):\n\n        # check if there is a skip connection\n        skip_connection = None\n        if i < len(skip_connection_idx):\n            # skip_connection = backbone.layers[skip_connection_idx[i]].output\n            skip_connection = skip_layers_list[i]\n\n        upsample_rate = to_tuple(upsample_rates[i])\n\n        x = up_block(decoder_filters[i], n_upsample_blocks-i, 0, upsample_rate=upsample_rate,\n                     skip=skip_connection, use_batchnorm=use_batchnorm)(x)\n    \"\"\"", "\n", "\n", "\"\"\"\n    i = n_upsample_blocks - 1\n    xx = backbone.layers[skip_connection_idx[i-0-1]].output\n    skip_connection = skip_layers_list[i-0]\n    upsample_rate = to_tuple(upsample_rates[i-0])\n    xx = up_block(decoder_filters[i-0], n_upsample_blocks-i-0, 1+0, upsample_rate=upsample_rate,\n                 skip=skip_connection, use_batchnorm=use_batchnorm)(xx)\n    skip_layers_list[i-0] = xx\n\n    i = n_upsample_blocks - 2\n    xx = backbone.layers[skip_connection_idx[i-0-1]].output\n\n    skip_connection = skip_layers_list[i-0]\n    upsample_rate = to_tuple(upsample_rates[i-0])\n    xx = up_block(decoder_filters[i-0], n_upsample_blocks-i-0, 1+0, upsample_rate=upsample_rate,\n                 skip=skip_connection, use_batchnorm=use_batchnorm)(xx)\n    skip_layers_list[i-0] = xx\n\n    skip_connection = skip_layers_list[i-1]\n    upsample_rate = to_tuple(upsample_rates[i-1])\n    xx = up_block(decoder_filters[i-1], n_upsample_blocks-i-1, 1+1, upsample_rate=upsample_rate,\n                 skip=skip_connection, use_batchnorm=use_batchnorm)(xx)\n    skip_layers_list[i-1] = xx\n    \"\"\"", "\n", "\n", "\"\"\"\n    for i in range(n_upsample_blocks):\n\n        # check if there is a skip connection\n        skip_connection = None\n        if i < len(skip_connection_idx):\n            # skip_connection = backbone.layers[skip_connection_idx[i]].output\n            skip_connection = skip_layers_list[i]\n\n        upsample_rate = to_tuple(upsample_rates[i])\n\n        x = up_block(decoder_filters[i], n_upsample_blocks-i, 0, upsample_rate=upsample_rate,\n                     skip=skip_connection, use_batchnorm=use_batchnorm)(x)\n    \"\"\"", "\n", "\n", "x", "=", "Conv2D", "(", "classes", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "name", "=", "'final_conv'", ")", "(", "interm", "[", "n_upsample_blocks", "]", ")", "\n", "x", "=", "Activation", "(", "activation", ",", "name", "=", "activation", ")", "(", "x", ")", "\n", "\n", "model", "=", "Model", "(", "input", ",", "x", ")", "\n", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.endo-angel_ct-angel.xnet.model.Xnet": [[42, 109], ["backbones.get_backbone", "builder.build_xnet", "utils.freeze_model"], "function", ["home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.backbones.get_backbone", "home.repos.pwc.inspect_result.endo-angel_ct-angel.xnet.builder.build_xnet", "home.repos.pwc.inspect_result.endo-angel_ct-angel.unet_pp.utils.freeze_model"], ["def", "Xnet", "(", "backbone_name", "=", "'vgg16'", ",", "\n", "input_shape", "=", "(", "None", ",", "None", ",", "3", ")", ",", "\n", "input_tensor", "=", "None", ",", "\n", "encoder_weights", "=", "'imagenet'", ",", "\n", "freeze_encoder", "=", "False", ",", "\n", "skip_connections", "=", "'default'", ",", "\n", "decoder_block_type", "=", "'upsampling'", ",", "\n", "decoder_filters", "=", "(", "256", ",", "128", ",", "64", ",", "32", ",", "16", ")", ",", "\n", "decoder_use_batchnorm", "=", "True", ",", "\n", "n_upsample_blocks", "=", "5", ",", "\n", "upsample_rates", "=", "(", "2", ",", "2", ",", "2", ",", "2", ",", "2", ")", ",", "\n", "classes", "=", "1", ",", "\n", "activation", "=", "'sigmoid'", ")", ":", "\n", "    ", "\"\"\"\n\n    Args:\n        backbone_name: (str) look at list of available backbones.\n        input_shape:  (tuple) dimensions of input data (H, W, C)\n        input_tensor: keras tensor\n        encoder_weights: one of `None` (random initialization), \n            'imagenet' (pre-training on ImageNet), \n            'dof' (pre-training on DoF)\n        freeze_encoder: (bool) Set encoder layers weights as non-trainable. Useful for fine-tuning\n        skip_connections: if 'default' is used take default skip connections,\n            else provide a list of layer numbers or names starting from top of model\n        decoder_block_type: (str) one of 'upsampling' and 'transpose' (look at blocks.py)\n        decoder_filters: (int) number of convolution layer filters in decoder blocks\n        decoder_use_batchnorm: (bool) if True add batch normalisation layer between `Conv2D` ad `Activation` layers\n        n_upsample_blocks: (int) a number of upsampling blocks\n        upsample_rates: (tuple of int) upsampling rates decoder blocks\n        classes: (int) a number of classes for output\n        activation: (str) one of keras activations for last model layer\n\n    Returns:\n        keras.models.Model instance\n\n    \"\"\"", "\n", "\n", "\n", "\n", "backbone", "=", "get_backbone", "(", "backbone_name", ",", "\n", "input_shape", "=", "input_shape", ",", "\n", "input_tensor", "=", "input_tensor", ",", "\n", "weights", "=", "encoder_weights", ",", "\n", "include_top", "=", "False", ")", "\n", "\n", "if", "skip_connections", "==", "'default'", ":", "\n", "        ", "skip_connections", "=", "DEFAULT_SKIP_CONNECTIONS", "[", "backbone_name", "]", "\n", "# n_upsample_blocks = len(skip_connections)", "\n", "\n", "", "model", "=", "build_xnet", "(", "backbone", ",", "\n", "classes", ",", "\n", "skip_connections", ",", "\n", "decoder_filters", "=", "decoder_filters", ",", "\n", "block_type", "=", "decoder_block_type", ",", "\n", "activation", "=", "activation", ",", "\n", "n_upsample_blocks", "=", "n_upsample_blocks", ",", "\n", "upsample_rates", "=", "upsample_rates", ",", "\n", "use_batchnorm", "=", "decoder_use_batchnorm", ")", "\n", "\n", "# lock encoder weights for fine-tuning", "\n", "if", "freeze_encoder", ":", "\n", "        ", "freeze_model", "(", "backbone", ")", "\n", "\n", "", "model", ".", "name", "=", "'x-{}'", ".", "format", "(", "backbone_name", ")", "\n", "\n", "return", "model", "", "", ""]], "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_v3.conv2d_bn": [[45, 85], ["keras.backend.image_data_format", "keras.layers.Conv2D", "keras.layers.BatchNormalization", "keras.layers.Activation"], "function", ["None"], ["def", "conv2d_bn", "(", "x", ",", "\n", "filters", ",", "\n", "num_row", ",", "\n", "num_col", ",", "\n", "padding", "=", "'same'", ",", "\n", "strides", "=", "(", "1", ",", "1", ")", ",", "\n", "name", "=", "None", ")", ":", "\n", "    ", "\"\"\"Utility function to apply conv + BN.\n    # Arguments\n        x: input tensor.\n        filters: filters in `Conv2D`.\n        num_row: height of the convolution kernel.\n        num_col: width of the convolution kernel.\n        padding: padding mode in `Conv2D`.\n        strides: strides in `Conv2D`.\n        name: name of the ops; will become `name + '_conv'`\n            for the convolution and `name + '_bn'` for the\n            batch norm layer.\n    # Returns\n        Output tensor after applying `Conv2D` and `BatchNormalization`.\n    \"\"\"", "\n", "if", "name", "is", "not", "None", ":", "\n", "        ", "bn_name", "=", "name", "+", "'_bn'", "\n", "conv_name", "=", "name", "+", "'_conv'", "\n", "", "else", ":", "\n", "        ", "bn_name", "=", "None", "\n", "conv_name", "=", "None", "\n", "", "if", "K", ".", "image_data_format", "(", ")", "==", "'channels_first'", ":", "\n", "        ", "bn_axis", "=", "1", "\n", "", "else", ":", "\n", "        ", "bn_axis", "=", "3", "\n", "", "x", "=", "Conv2D", "(", "\n", "filters", ",", "(", "num_row", ",", "num_col", ")", ",", "\n", "strides", "=", "strides", ",", "\n", "padding", "=", "padding", ",", "\n", "use_bias", "=", "False", ",", "\n", "name", "=", "conv_name", ")", "(", "x", ")", "\n", "x", "=", "BatchNormalization", "(", "axis", "=", "bn_axis", ",", "scale", "=", "False", ",", "name", "=", "bn_name", ")", "(", "x", ")", "\n", "x", "=", "Activation", "(", "'relu'", ",", "name", "=", "name", ")", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_v3.InceptionV3": [[87, 393], ["_obtain_input_shape", "inception_v3.conv2d_bn", "inception_v3.conv2d_bn", "inception_v3.conv2d_bn", "inception_v3.conv2d_bn", "inception_v3.conv2d_bn", "inception_v3.conv2d_bn", "inception_v3.conv2d_bn", "inception_v3.conv2d_bn", "inception_v3.conv2d_bn", "inception_v3.conv2d_bn", "inception_v3.conv2d_bn", "inception_v3.conv2d_bn", "keras.layers.concatenate", "inception_v3.conv2d_bn", "inception_v3.conv2d_bn", "inception_v3.conv2d_bn", "inception_v3.conv2d_bn", "inception_v3.conv2d_bn", "inception_v3.conv2d_bn", "inception_v3.conv2d_bn", "keras.layers.concatenate", "inception_v3.conv2d_bn", "inception_v3.conv2d_bn", "inception_v3.conv2d_bn", "inception_v3.conv2d_bn", "inception_v3.conv2d_bn", "inception_v3.conv2d_bn", "inception_v3.conv2d_bn", "keras.layers.concatenate", "inception_v3.conv2d_bn", "inception_v3.conv2d_bn", "inception_v3.conv2d_bn", "inception_v3.conv2d_bn", "keras.layers.concatenate", "inception_v3.conv2d_bn", "inception_v3.conv2d_bn", "inception_v3.conv2d_bn", "inception_v3.conv2d_bn", "inception_v3.conv2d_bn", "inception_v3.conv2d_bn", "inception_v3.conv2d_bn", "inception_v3.conv2d_bn", "inception_v3.conv2d_bn", "inception_v3.conv2d_bn", "keras.layers.concatenate", "range", "inception_v3.conv2d_bn", "inception_v3.conv2d_bn", "inception_v3.conv2d_bn", "inception_v3.conv2d_bn", "inception_v3.conv2d_bn", "inception_v3.conv2d_bn", "inception_v3.conv2d_bn", "inception_v3.conv2d_bn", "inception_v3.conv2d_bn", "inception_v3.conv2d_bn", "keras.layers.concatenate", "inception_v3.conv2d_bn", "inception_v3.conv2d_bn", "inception_v3.conv2d_bn", "inception_v3.conv2d_bn", "inception_v3.conv2d_bn", "inception_v3.conv2d_bn", "keras.layers.concatenate", "range", "keras.models.Model", "ValueError", "ValueError", "keras.layers.Input", "keras.backend.image_data_format", "keras.layers.MaxPooling2D", "keras.layers.MaxPooling2D", "keras.layers.AveragePooling2D", "keras.layers.AveragePooling2D", "keras.layers.AveragePooling2D", "keras.layers.MaxPooling2D", "keras.layers.AveragePooling2D", "inception_v3.conv2d_bn", "inception_v3.conv2d_bn", "inception_v3.conv2d_bn", "inception_v3.conv2d_bn", "inception_v3.conv2d_bn", "inception_v3.conv2d_bn", "inception_v3.conv2d_bn", "inception_v3.conv2d_bn", "inception_v3.conv2d_bn", "inception_v3.conv2d_bn", "keras.layers.concatenate", "keras.layers.AveragePooling2D", "keras.layers.MaxPooling2D", "inception_v3.conv2d_bn", "inception_v3.conv2d_bn", "inception_v3.conv2d_bn", "inception_v3.conv2d_bn", "keras.layers.concatenate", "inception_v3.conv2d_bn", "inception_v3.conv2d_bn", "inception_v3.conv2d_bn", "inception_v3.conv2d_bn", "keras.layers.concatenate", "inception_v3.conv2d_bn", "keras.layers.concatenate", "keras.engine.topology.get_source_inputs", "keras.models.Model.load_weights", "os.path.exists", "keras.backend.image_data_format", "keras.backend.is_keras_tensor", "keras.layers.Input", "keras.layers.AveragePooling2D", "keras.layers.AveragePooling2D", "keras.layers.GlobalAveragePooling2D", "keras.layers.Dense", "keras.backend.image_data_format", "keras.utils.data_utils.get_file", "keras.utils.data_utils.get_file", "keras.models.Model.load_weights", "keras.layers.GlobalAveragePooling2D", "keras.backend.backend", "warnings.warn", "str", "str", "str", "keras.layers.GlobalMaxPooling2D"], "function", ["home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn"], ["", "def", "InceptionV3", "(", "include_top", "=", "True", ",", "\n", "weights", "=", "'imagenet'", ",", "\n", "input_tensor", "=", "None", ",", "\n", "input_shape", "=", "None", ",", "\n", "pooling", "=", "None", ",", "\n", "classes", "=", "1000", ")", ":", "\n", "    ", "\"\"\"Instantiates the Inception v3 architecture.\n    Optionally loads weights pre-trained\n    on ImageNet. Note that when using TensorFlow,\n    for best performance you should set\n    `image_data_format='channels_last'` in your Keras config\n    at ~/.keras/keras.json.\n    The model and the weights are compatible with both\n    TensorFlow and Theano. The data format\n    convention used by the model is the one\n    specified in your Keras config file.\n    Note that the default input image size for this model is 299x299.\n    # Arguments\n        include_top: whether to include the fully-connected\n            layer at the top of the network.\n        weights: one of `None` (random initialization),\n              'imagenet' (pre-training on ImageNet),\n              or the path to the weights file to be loaded.\n        input_tensor: optional Keras tensor (i.e. output of `layers.Input()`)\n            to use as image input for the model.\n        input_shape: optional shape tuple, only to be specified\n            if `include_top` is False (otherwise the input shape\n            has to be `(299, 299, 3)` (with `channels_last` data format)\n            or `(3, 299, 299)` (with `channels_first` data format).\n            It should have exactly 3 inputs channels,\n            and width and height should be no smaller than 139.\n            E.g. `(150, 150, 3)` would be one valid value.\n        pooling: Optional pooling mode for feature extraction\n            when `include_top` is `False`.\n            - `None` means that the output of the model will be\n                the 4D tensor output of the\n                last convolutional layer.\n            - `avg` means that global average pooling\n                will be applied to the output of the\n                last convolutional layer, and thus\n                the output of the model will be a 2D tensor.\n            - `max` means that global max pooling will\n                be applied.\n        classes: optional number of classes to classify images\n            into, only to be specified if `include_top` is True, and\n            if no `weights` argument is specified.\n    # Returns\n        A Keras model instance.\n    # Raises\n        ValueError: in case of invalid argument for `weights`,\n            or invalid input shape.\n    \"\"\"", "\n", "if", "not", "(", "weights", "in", "{", "'imagenet'", ",", "None", "}", "or", "os", ".", "path", ".", "exists", "(", "weights", ")", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'The `weights` argument should be either '", "\n", "'`None` (random initialization), `imagenet` '", "\n", "'(pre-training on ImageNet), '", "\n", "'or the path to the weights file to be loaded.'", ")", "\n", "\n", "", "if", "weights", "==", "'imagenet'", "and", "include_top", "and", "classes", "!=", "1000", ":", "\n", "        ", "raise", "ValueError", "(", "'If using `weights` as imagenet with `include_top`'", "\n", "' as true, `classes` should be 1000'", ")", "\n", "\n", "# Determine proper input shape", "\n", "", "input_shape", "=", "_obtain_input_shape", "(", "\n", "input_shape", ",", "\n", "default_size", "=", "299", ",", "\n", "min_size", "=", "139", ",", "\n", "data_format", "=", "K", ".", "image_data_format", "(", ")", ",", "\n", "require_flatten", "=", "False", ",", "\n", "weights", "=", "weights", ")", "\n", "\n", "if", "input_tensor", "is", "None", ":", "\n", "        ", "img_input", "=", "Input", "(", "shape", "=", "input_shape", ")", "\n", "", "else", ":", "\n", "        ", "if", "not", "K", ".", "is_keras_tensor", "(", "input_tensor", ")", ":", "\n", "            ", "img_input", "=", "Input", "(", "tensor", "=", "input_tensor", ",", "shape", "=", "input_shape", ")", "\n", "", "else", ":", "\n", "            ", "img_input", "=", "input_tensor", "\n", "\n", "", "", "if", "K", ".", "image_data_format", "(", ")", "==", "'channels_first'", ":", "\n", "        ", "channel_axis", "=", "1", "\n", "", "else", ":", "\n", "        ", "channel_axis", "=", "3", "\n", "\n", "", "x", "=", "conv2d_bn", "(", "img_input", ",", "32", ",", "3", ",", "3", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "'same'", ")", "\n", "x", "=", "conv2d_bn", "(", "x", ",", "32", ",", "3", ",", "3", ",", "padding", "=", "'same'", ")", "\n", "x", "=", "conv2d_bn", "(", "x", ",", "64", ",", "3", ",", "3", ")", "\n", "x", "=", "MaxPooling2D", "(", "(", "3", ",", "3", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "'same'", ")", "(", "x", ")", "\n", "\n", "x", "=", "conv2d_bn", "(", "x", ",", "80", ",", "1", ",", "1", ",", "padding", "=", "'same'", ")", "\n", "x", "=", "conv2d_bn", "(", "x", ",", "192", ",", "3", ",", "3", ",", "padding", "=", "'same'", ")", "\n", "x", "=", "MaxPooling2D", "(", "(", "3", ",", "3", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "'same'", ")", "(", "x", ")", "\n", "\n", "# mixed 0, 1, 2: 35 x 35 x 256", "\n", "branch1x1", "=", "conv2d_bn", "(", "x", ",", "64", ",", "1", ",", "1", ")", "\n", "\n", "branch5x5", "=", "conv2d_bn", "(", "x", ",", "48", ",", "1", ",", "1", ")", "\n", "branch5x5", "=", "conv2d_bn", "(", "branch5x5", ",", "64", ",", "5", ",", "5", ")", "\n", "\n", "branch3x3dbl", "=", "conv2d_bn", "(", "x", ",", "64", ",", "1", ",", "1", ")", "\n", "branch3x3dbl", "=", "conv2d_bn", "(", "branch3x3dbl", ",", "96", ",", "3", ",", "3", ")", "\n", "branch3x3dbl", "=", "conv2d_bn", "(", "branch3x3dbl", ",", "96", ",", "3", ",", "3", ")", "\n", "\n", "branch_pool", "=", "AveragePooling2D", "(", "(", "3", ",", "3", ")", ",", "strides", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "'same'", ")", "(", "x", ")", "\n", "branch_pool", "=", "conv2d_bn", "(", "branch_pool", ",", "32", ",", "1", ",", "1", ")", "\n", "x", "=", "layers", ".", "concatenate", "(", "\n", "[", "branch1x1", ",", "branch5x5", ",", "branch3x3dbl", ",", "branch_pool", "]", ",", "\n", "axis", "=", "channel_axis", ",", "\n", "name", "=", "'mixed0'", ")", "\n", "\n", "# mixed 1: 35 x 35 x 256", "\n", "branch1x1", "=", "conv2d_bn", "(", "x", ",", "64", ",", "1", ",", "1", ")", "\n", "\n", "branch5x5", "=", "conv2d_bn", "(", "x", ",", "48", ",", "1", ",", "1", ")", "\n", "branch5x5", "=", "conv2d_bn", "(", "branch5x5", ",", "64", ",", "5", ",", "5", ")", "\n", "\n", "branch3x3dbl", "=", "conv2d_bn", "(", "x", ",", "64", ",", "1", ",", "1", ")", "\n", "branch3x3dbl", "=", "conv2d_bn", "(", "branch3x3dbl", ",", "96", ",", "3", ",", "3", ")", "\n", "branch3x3dbl", "=", "conv2d_bn", "(", "branch3x3dbl", ",", "96", ",", "3", ",", "3", ")", "\n", "\n", "branch_pool", "=", "AveragePooling2D", "(", "(", "3", ",", "3", ")", ",", "strides", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "'same'", ")", "(", "x", ")", "\n", "branch_pool", "=", "conv2d_bn", "(", "branch_pool", ",", "64", ",", "1", ",", "1", ")", "\n", "x", "=", "layers", ".", "concatenate", "(", "\n", "[", "branch1x1", ",", "branch5x5", ",", "branch3x3dbl", ",", "branch_pool", "]", ",", "\n", "axis", "=", "channel_axis", ",", "\n", "name", "=", "'mixed1'", ")", "\n", "\n", "# mixed 2: 35 x 35 x 256", "\n", "branch1x1", "=", "conv2d_bn", "(", "x", ",", "64", ",", "1", ",", "1", ")", "\n", "\n", "branch5x5", "=", "conv2d_bn", "(", "x", ",", "48", ",", "1", ",", "1", ")", "\n", "branch5x5", "=", "conv2d_bn", "(", "branch5x5", ",", "64", ",", "5", ",", "5", ")", "\n", "\n", "branch3x3dbl", "=", "conv2d_bn", "(", "x", ",", "64", ",", "1", ",", "1", ")", "\n", "branch3x3dbl", "=", "conv2d_bn", "(", "branch3x3dbl", ",", "96", ",", "3", ",", "3", ")", "\n", "branch3x3dbl", "=", "conv2d_bn", "(", "branch3x3dbl", ",", "96", ",", "3", ",", "3", ")", "\n", "\n", "branch_pool", "=", "AveragePooling2D", "(", "(", "3", ",", "3", ")", ",", "strides", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "'same'", ")", "(", "x", ")", "\n", "branch_pool", "=", "conv2d_bn", "(", "branch_pool", ",", "64", ",", "1", ",", "1", ")", "\n", "x", "=", "layers", ".", "concatenate", "(", "\n", "[", "branch1x1", ",", "branch5x5", ",", "branch3x3dbl", ",", "branch_pool", "]", ",", "\n", "axis", "=", "channel_axis", ",", "\n", "name", "=", "'mixed2'", ")", "\n", "\n", "# mixed 3: 17 x 17 x 768", "\n", "branch3x3", "=", "conv2d_bn", "(", "x", ",", "384", ",", "3", ",", "3", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "'same'", ")", "\n", "\n", "branch3x3dbl", "=", "conv2d_bn", "(", "x", ",", "64", ",", "1", ",", "1", ")", "\n", "branch3x3dbl", "=", "conv2d_bn", "(", "branch3x3dbl", ",", "96", ",", "3", ",", "3", ")", "\n", "branch3x3dbl", "=", "conv2d_bn", "(", "\n", "branch3x3dbl", ",", "96", ",", "3", ",", "3", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "'same'", ")", "\n", "\n", "branch_pool", "=", "MaxPooling2D", "(", "(", "3", ",", "3", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "'same'", ")", "(", "x", ")", "\n", "x", "=", "layers", ".", "concatenate", "(", "\n", "[", "branch3x3", ",", "branch3x3dbl", ",", "branch_pool", "]", ",", "axis", "=", "channel_axis", ",", "name", "=", "'mixed3'", ")", "\n", "\n", "# mixed 4: 17 x 17 x 768", "\n", "branch1x1", "=", "conv2d_bn", "(", "x", ",", "192", ",", "1", ",", "1", ")", "\n", "\n", "branch7x7", "=", "conv2d_bn", "(", "x", ",", "128", ",", "1", ",", "1", ")", "\n", "branch7x7", "=", "conv2d_bn", "(", "branch7x7", ",", "128", ",", "1", ",", "7", ")", "\n", "branch7x7", "=", "conv2d_bn", "(", "branch7x7", ",", "192", ",", "7", ",", "1", ")", "\n", "\n", "branch7x7dbl", "=", "conv2d_bn", "(", "x", ",", "128", ",", "1", ",", "1", ")", "\n", "branch7x7dbl", "=", "conv2d_bn", "(", "branch7x7dbl", ",", "128", ",", "7", ",", "1", ")", "\n", "branch7x7dbl", "=", "conv2d_bn", "(", "branch7x7dbl", ",", "128", ",", "1", ",", "7", ")", "\n", "branch7x7dbl", "=", "conv2d_bn", "(", "branch7x7dbl", ",", "128", ",", "7", ",", "1", ")", "\n", "branch7x7dbl", "=", "conv2d_bn", "(", "branch7x7dbl", ",", "192", ",", "1", ",", "7", ")", "\n", "\n", "branch_pool", "=", "AveragePooling2D", "(", "(", "3", ",", "3", ")", ",", "strides", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "'same'", ")", "(", "x", ")", "\n", "branch_pool", "=", "conv2d_bn", "(", "branch_pool", ",", "192", ",", "1", ",", "1", ")", "\n", "x", "=", "layers", ".", "concatenate", "(", "\n", "[", "branch1x1", ",", "branch7x7", ",", "branch7x7dbl", ",", "branch_pool", "]", ",", "\n", "axis", "=", "channel_axis", ",", "\n", "name", "=", "'mixed4'", ")", "\n", "\n", "# mixed 5, 6: 17 x 17 x 768", "\n", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "        ", "branch1x1", "=", "conv2d_bn", "(", "x", ",", "192", ",", "1", ",", "1", ")", "\n", "\n", "branch7x7", "=", "conv2d_bn", "(", "x", ",", "160", ",", "1", ",", "1", ")", "\n", "branch7x7", "=", "conv2d_bn", "(", "branch7x7", ",", "160", ",", "1", ",", "7", ")", "\n", "branch7x7", "=", "conv2d_bn", "(", "branch7x7", ",", "192", ",", "7", ",", "1", ")", "\n", "\n", "branch7x7dbl", "=", "conv2d_bn", "(", "x", ",", "160", ",", "1", ",", "1", ")", "\n", "branch7x7dbl", "=", "conv2d_bn", "(", "branch7x7dbl", ",", "160", ",", "7", ",", "1", ")", "\n", "branch7x7dbl", "=", "conv2d_bn", "(", "branch7x7dbl", ",", "160", ",", "1", ",", "7", ")", "\n", "branch7x7dbl", "=", "conv2d_bn", "(", "branch7x7dbl", ",", "160", ",", "7", ",", "1", ")", "\n", "branch7x7dbl", "=", "conv2d_bn", "(", "branch7x7dbl", ",", "192", ",", "1", ",", "7", ")", "\n", "\n", "branch_pool", "=", "AveragePooling2D", "(", "\n", "(", "3", ",", "3", ")", ",", "strides", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "'same'", ")", "(", "x", ")", "\n", "branch_pool", "=", "conv2d_bn", "(", "branch_pool", ",", "192", ",", "1", ",", "1", ")", "\n", "x", "=", "layers", ".", "concatenate", "(", "\n", "[", "branch1x1", ",", "branch7x7", ",", "branch7x7dbl", ",", "branch_pool", "]", ",", "\n", "axis", "=", "channel_axis", ",", "\n", "name", "=", "'mixed'", "+", "str", "(", "5", "+", "i", ")", ")", "\n", "\n", "# mixed 7: 17 x 17 x 768", "\n", "", "branch1x1", "=", "conv2d_bn", "(", "x", ",", "192", ",", "1", ",", "1", ")", "\n", "\n", "branch7x7", "=", "conv2d_bn", "(", "x", ",", "192", ",", "1", ",", "1", ")", "\n", "branch7x7", "=", "conv2d_bn", "(", "branch7x7", ",", "192", ",", "1", ",", "7", ")", "\n", "branch7x7", "=", "conv2d_bn", "(", "branch7x7", ",", "192", ",", "7", ",", "1", ")", "\n", "\n", "branch7x7dbl", "=", "conv2d_bn", "(", "x", ",", "192", ",", "1", ",", "1", ")", "\n", "branch7x7dbl", "=", "conv2d_bn", "(", "branch7x7dbl", ",", "192", ",", "7", ",", "1", ")", "\n", "branch7x7dbl", "=", "conv2d_bn", "(", "branch7x7dbl", ",", "192", ",", "1", ",", "7", ")", "\n", "branch7x7dbl", "=", "conv2d_bn", "(", "branch7x7dbl", ",", "192", ",", "7", ",", "1", ")", "\n", "branch7x7dbl", "=", "conv2d_bn", "(", "branch7x7dbl", ",", "192", ",", "1", ",", "7", ")", "\n", "\n", "branch_pool", "=", "AveragePooling2D", "(", "(", "3", ",", "3", ")", ",", "strides", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "'same'", ")", "(", "x", ")", "\n", "branch_pool", "=", "conv2d_bn", "(", "branch_pool", ",", "192", ",", "1", ",", "1", ")", "\n", "x", "=", "layers", ".", "concatenate", "(", "\n", "[", "branch1x1", ",", "branch7x7", ",", "branch7x7dbl", ",", "branch_pool", "]", ",", "\n", "axis", "=", "channel_axis", ",", "\n", "name", "=", "'mixed7'", ")", "\n", "\n", "# mixed 8: 8 x 8 x 1280", "\n", "branch3x3", "=", "conv2d_bn", "(", "x", ",", "192", ",", "1", ",", "1", ")", "\n", "branch3x3", "=", "conv2d_bn", "(", "branch3x3", ",", "320", ",", "3", ",", "3", ",", "\n", "strides", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "'same'", ")", "\n", "\n", "branch7x7x3", "=", "conv2d_bn", "(", "x", ",", "192", ",", "1", ",", "1", ")", "\n", "branch7x7x3", "=", "conv2d_bn", "(", "branch7x7x3", ",", "192", ",", "1", ",", "7", ")", "\n", "branch7x7x3", "=", "conv2d_bn", "(", "branch7x7x3", ",", "192", ",", "7", ",", "1", ")", "\n", "branch7x7x3", "=", "conv2d_bn", "(", "\n", "branch7x7x3", ",", "192", ",", "3", ",", "3", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "'same'", ")", "\n", "\n", "branch_pool", "=", "MaxPooling2D", "(", "(", "3", ",", "3", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "'same'", ")", "(", "x", ")", "\n", "x", "=", "layers", ".", "concatenate", "(", "\n", "[", "branch3x3", ",", "branch7x7x3", ",", "branch_pool", "]", ",", "axis", "=", "channel_axis", ",", "name", "=", "'mixed8'", ")", "\n", "\n", "# mixed 9: 8 x 8 x 2048", "\n", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "        ", "branch1x1", "=", "conv2d_bn", "(", "x", ",", "320", ",", "1", ",", "1", ")", "\n", "\n", "branch3x3", "=", "conv2d_bn", "(", "x", ",", "384", ",", "1", ",", "1", ")", "\n", "branch3x3_1", "=", "conv2d_bn", "(", "branch3x3", ",", "384", ",", "1", ",", "3", ")", "\n", "branch3x3_2", "=", "conv2d_bn", "(", "branch3x3", ",", "384", ",", "3", ",", "1", ")", "\n", "branch3x3", "=", "layers", ".", "concatenate", "(", "\n", "[", "branch3x3_1", ",", "branch3x3_2", "]", ",", "axis", "=", "channel_axis", ",", "name", "=", "'mixed9_'", "+", "str", "(", "i", ")", ")", "\n", "\n", "branch3x3dbl", "=", "conv2d_bn", "(", "x", ",", "448", ",", "1", ",", "1", ")", "\n", "branch3x3dbl", "=", "conv2d_bn", "(", "branch3x3dbl", ",", "384", ",", "3", ",", "3", ")", "\n", "branch3x3dbl_1", "=", "conv2d_bn", "(", "branch3x3dbl", ",", "384", ",", "1", ",", "3", ")", "\n", "branch3x3dbl_2", "=", "conv2d_bn", "(", "branch3x3dbl", ",", "384", ",", "3", ",", "1", ")", "\n", "branch3x3dbl", "=", "layers", ".", "concatenate", "(", "\n", "[", "branch3x3dbl_1", ",", "branch3x3dbl_2", "]", ",", "axis", "=", "channel_axis", ")", "\n", "\n", "branch_pool", "=", "AveragePooling2D", "(", "\n", "(", "3", ",", "3", ")", ",", "strides", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "'same'", ")", "(", "x", ")", "\n", "branch_pool", "=", "conv2d_bn", "(", "branch_pool", ",", "192", ",", "1", ",", "1", ")", "\n", "x", "=", "layers", ".", "concatenate", "(", "\n", "[", "branch1x1", ",", "branch3x3", ",", "branch3x3dbl", ",", "branch_pool", "]", ",", "\n", "axis", "=", "channel_axis", ",", "\n", "name", "=", "'mixed'", "+", "str", "(", "9", "+", "i", ")", ")", "\n", "\n", "", "if", "include_top", ":", "\n", "# Classification block", "\n", "        ", "x", "=", "GlobalAveragePooling2D", "(", "name", "=", "'avg_pool'", ")", "(", "x", ")", "\n", "x", "=", "Dense", "(", "classes", ",", "activation", "=", "'softmax'", ",", "name", "=", "'predictions'", ")", "(", "x", ")", "\n", "", "else", ":", "\n", "        ", "if", "pooling", "==", "'avg'", ":", "\n", "            ", "x", "=", "GlobalAveragePooling2D", "(", ")", "(", "x", ")", "\n", "", "elif", "pooling", "==", "'max'", ":", "\n", "            ", "x", "=", "GlobalMaxPooling2D", "(", ")", "(", "x", ")", "\n", "\n", "# Ensure that the model takes into account", "\n", "# any potential predecessors of `input_tensor`.", "\n", "", "", "if", "input_tensor", "is", "not", "None", ":", "\n", "        ", "inputs", "=", "get_source_inputs", "(", "input_tensor", ")", "\n", "", "else", ":", "\n", "        ", "inputs", "=", "img_input", "\n", "# Create model.", "\n", "", "model", "=", "Model", "(", "inputs", ",", "x", ",", "name", "=", "'inception_v3'", ")", "\n", "\n", "# load weights", "\n", "if", "weights", "==", "'imagenet'", ":", "\n", "        ", "if", "K", ".", "image_data_format", "(", ")", "==", "'channels_first'", ":", "\n", "            ", "if", "K", ".", "backend", "(", ")", "==", "'tensorflow'", ":", "\n", "                ", "warnings", ".", "warn", "(", "'You are using the TensorFlow backend, yet you '", "\n", "'are using the Theano '", "\n", "'image data format convention '", "\n", "'(`image_data_format=\"channels_first\"`). '", "\n", "'For best performance, set '", "\n", "'`image_data_format=\"channels_last\"` in '", "\n", "'your Keras config '", "\n", "'at ~/.keras/keras.json.'", ")", "\n", "", "", "if", "include_top", ":", "\n", "            ", "weights_path", "=", "get_file", "(", "\n", "'inception_v3_weights_tf_dim_ordering_tf_kernels.h5'", ",", "\n", "WEIGHTS_PATH", ",", "\n", "cache_subdir", "=", "'models'", ",", "\n", "file_hash", "=", "'9a0d58056eeedaa3f26cb7ebd46da564'", ")", "\n", "", "else", ":", "\n", "            ", "weights_path", "=", "get_file", "(", "\n", "'inception_v3_weights_tf_dim_ordering_tf_kernels_notop.h5'", ",", "\n", "WEIGHTS_PATH_NO_TOP", ",", "\n", "cache_subdir", "=", "'models'", ",", "\n", "file_hash", "=", "'bcbd6486424b2319ff4ef7d526e38f63'", ")", "\n", "", "model", ".", "load_weights", "(", "weights_path", ")", "\n", "", "elif", "weights", "is", "not", "None", ":", "\n", "        ", "model", ".", "load_weights", "(", "weights", ")", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_v3.preprocess_input": [[395, 403], ["keras.applications.imagenet_utils.preprocess_input"], "function", ["home.repos.pwc.inspect_result.endo-angel_ct-angel.resnext.preprocessing.preprocess_input"], ["", "def", "preprocess_input", "(", "x", ")", ":", "\n", "    ", "\"\"\"Preprocesses a numpy array encoding a batch of images.\n    # Arguments\n        x: a 4D numpy array consists of RGB values within [0, 255].\n    # Returns\n        Preprocessed array.\n    \"\"\"", "\n", "return", "imagenet_utils", ".", "preprocess_input", "(", "x", ",", "mode", "=", "'tf'", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.preprocess_input": [[49, 57], ["keras.applications.imagenet_utils.preprocess_input"], "function", ["home.repos.pwc.inspect_result.endo-angel_ct-angel.resnext.preprocessing.preprocess_input"], ["def", "preprocess_input", "(", "x", ")", ":", "\n", "    ", "\"\"\"Preprocesses a numpy array encoding a batch of images.\n    # Arguments\n        x: a 4D numpy array consists of RGB values within [0, 255].\n    # Returns\n        Preprocessed array.\n    \"\"\"", "\n", "return", "imagenet_utils", ".", "preprocess_input", "(", "x", ",", "mode", "=", "'tf'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn": [[59, 95], ["keras.layers.Conv2D", "keras.layers.BatchNormalization", "keras.layers.Activation", "keras.backend.image_data_format"], "function", ["None"], ["", "def", "conv2d_bn", "(", "x", ",", "\n", "filters", ",", "\n", "kernel_size", ",", "\n", "strides", "=", "1", ",", "\n", "padding", "=", "'same'", ",", "\n", "activation", "=", "'relu'", ",", "\n", "use_bias", "=", "False", ",", "\n", "name", "=", "None", ")", ":", "\n", "    ", "\"\"\"Utility function to apply conv + BN.\n    # Arguments\n        x: input tensor.\n        filters: filters in `Conv2D`.\n        kernel_size: kernel size as in `Conv2D`.\n        strides: strides in `Conv2D`.\n        padding: padding mode in `Conv2D`.\n        activation: activation in `Conv2D`.\n        use_bias: whether to use a bias in `Conv2D`.\n        name: name of the ops; will become `name + '_ac'` for the activation\n            and `name + '_bn'` for the batch norm layer.\n    # Returns\n        Output tensor after applying `Conv2D` and `BatchNormalization`.\n    \"\"\"", "\n", "x", "=", "Conv2D", "(", "filters", ",", "\n", "kernel_size", ",", "\n", "strides", "=", "strides", ",", "\n", "padding", "=", "padding", ",", "\n", "use_bias", "=", "use_bias", ",", "\n", "name", "=", "name", ")", "(", "x", ")", "\n", "if", "not", "use_bias", ":", "\n", "        ", "bn_axis", "=", "1", "if", "K", ".", "image_data_format", "(", ")", "==", "'channels_first'", "else", "3", "\n", "bn_name", "=", "None", "if", "name", "is", "None", "else", "name", "+", "'_bn'", "\n", "x", "=", "BatchNormalization", "(", "axis", "=", "bn_axis", ",", "scale", "=", "False", ",", "name", "=", "bn_name", ")", "(", "x", ")", "\n", "", "if", "activation", "is", "not", "None", ":", "\n", "        ", "ac_name", "=", "None", "if", "name", "is", "None", "else", "name", "+", "'_ac'", "\n", "x", "=", "Activation", "(", "activation", ",", "name", "=", "ac_name", ")", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.inception_resnet_block": [[97, 171], ["inception_resnet_v2.conv2d_bn", "inception_resnet_v2.conv2d_bn", "inception_resnet_v2.conv2d_bn", "inception_resnet_v2.conv2d_bn", "inception_resnet_v2.conv2d_bn", "inception_resnet_v2.conv2d_bn", "inception_resnet_v2.conv2d_bn", "str", "keras.layers.Concatenate", "keras.layers.Lambda", "inception_resnet_v2.conv2d_bn", "inception_resnet_v2.conv2d_bn", "inception_resnet_v2.conv2d_bn", "inception_resnet_v2.conv2d_bn", "keras.backend.image_data_format", "keras.backend.int_shape", "keras.layers.Activation", "inception_resnet_v2.conv2d_bn", "inception_resnet_v2.conv2d_bn", "inception_resnet_v2.conv2d_bn", "inception_resnet_v2.conv2d_bn", "ValueError", "keras.backend.int_shape", "str"], "function", ["home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn"], ["", "def", "inception_resnet_block", "(", "x", ",", "scale", ",", "block_type", ",", "block_idx", ",", "activation", "=", "'relu'", ")", ":", "\n", "    ", "\"\"\"Adds a Inception-ResNet block.\n    This function builds 3 types of Inception-ResNet blocks mentioned\n    in the paper, controlled by the `block_type` argument (which is the\n    block name used in the official TF-slim implementation):\n        - Inception-ResNet-A: `block_type='block35'`\n        - Inception-ResNet-B: `block_type='block17'`\n        - Inception-ResNet-C: `block_type='block8'`\n    # Arguments\n        x: input tensor.\n        scale: scaling factor to scale the residuals (i.e., the output of\n            passing `x` through an inception module) before adding them\n            to the shortcut branch. Let `r` be the output from the residual branch,\n            the output of this block will be `x + scale * r`.\n        block_type: `'block35'`, `'block17'` or `'block8'`, determines\n            the network structure in the residual branch.\n        block_idx: an `int` used for generating layer names. The Inception-ResNet blocks\n            are repeated many times in this network. We use `block_idx` to identify\n            each of the repetitions. For example, the first Inception-ResNet-A block\n            will have `block_type='block35', block_idx=0`, ane the layer names will have\n            a common prefix `'block35_0'`.\n        activation: activation function to use at the end of the block\n            (see [activations](../activations.md)).\n            When `activation=None`, no activation is applied\n            (i.e., \"linear\" activation: `a(x) = x`).\n    # Returns\n        Output tensor for the block.\n    # Raises\n        ValueError: if `block_type` is not one of `'block35'`,\n            `'block17'` or `'block8'`.\n    \"\"\"", "\n", "if", "block_type", "==", "'block35'", ":", "\n", "        ", "branch_0", "=", "conv2d_bn", "(", "x", ",", "32", ",", "1", ")", "\n", "branch_1", "=", "conv2d_bn", "(", "x", ",", "32", ",", "1", ")", "\n", "branch_1", "=", "conv2d_bn", "(", "branch_1", ",", "32", ",", "3", ")", "\n", "branch_2", "=", "conv2d_bn", "(", "x", ",", "32", ",", "1", ")", "\n", "branch_2", "=", "conv2d_bn", "(", "branch_2", ",", "48", ",", "3", ")", "\n", "branch_2", "=", "conv2d_bn", "(", "branch_2", ",", "64", ",", "3", ")", "\n", "branches", "=", "[", "branch_0", ",", "branch_1", ",", "branch_2", "]", "\n", "", "elif", "block_type", "==", "'block17'", ":", "\n", "        ", "branch_0", "=", "conv2d_bn", "(", "x", ",", "192", ",", "1", ")", "\n", "branch_1", "=", "conv2d_bn", "(", "x", ",", "128", ",", "1", ")", "\n", "branch_1", "=", "conv2d_bn", "(", "branch_1", ",", "160", ",", "[", "1", ",", "7", "]", ")", "\n", "branch_1", "=", "conv2d_bn", "(", "branch_1", ",", "192", ",", "[", "7", ",", "1", "]", ")", "\n", "branches", "=", "[", "branch_0", ",", "branch_1", "]", "\n", "", "elif", "block_type", "==", "'block8'", ":", "\n", "        ", "branch_0", "=", "conv2d_bn", "(", "x", ",", "192", ",", "1", ")", "\n", "branch_1", "=", "conv2d_bn", "(", "x", ",", "192", ",", "1", ")", "\n", "branch_1", "=", "conv2d_bn", "(", "branch_1", ",", "224", ",", "[", "1", ",", "3", "]", ")", "\n", "branch_1", "=", "conv2d_bn", "(", "branch_1", ",", "256", ",", "[", "3", ",", "1", "]", ")", "\n", "branches", "=", "[", "branch_0", ",", "branch_1", "]", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Unknown Inception-ResNet block type. '", "\n", "'Expects \"block35\", \"block17\" or \"block8\", '", "\n", "'but got: '", "+", "str", "(", "block_type", ")", ")", "\n", "\n", "", "block_name", "=", "block_type", "+", "'_'", "+", "str", "(", "block_idx", ")", "\n", "channel_axis", "=", "1", "if", "K", ".", "image_data_format", "(", ")", "==", "'channels_first'", "else", "3", "\n", "mixed", "=", "Concatenate", "(", "axis", "=", "channel_axis", ",", "name", "=", "block_name", "+", "'_mixed'", ")", "(", "branches", ")", "\n", "up", "=", "conv2d_bn", "(", "mixed", ",", "\n", "K", ".", "int_shape", "(", "x", ")", "[", "channel_axis", "]", ",", "\n", "1", ",", "\n", "activation", "=", "None", ",", "\n", "use_bias", "=", "True", ",", "\n", "name", "=", "block_name", "+", "'_conv'", ")", "\n", "\n", "x", "=", "Lambda", "(", "lambda", "inputs", ",", "scale", ":", "inputs", "[", "0", "]", "+", "inputs", "[", "1", "]", "*", "scale", ",", "\n", "output_shape", "=", "K", ".", "int_shape", "(", "x", ")", "[", "1", ":", "]", ",", "\n", "arguments", "=", "{", "'scale'", ":", "scale", "}", ",", "\n", "name", "=", "block_name", ")", "(", "[", "x", ",", "up", "]", ")", "\n", "\n", "if", "activation", "is", "not", "None", ":", "\n", "        ", "x", "=", "Activation", "(", "activation", ",", "name", "=", "block_name", "+", "'_ac'", ")", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.InceptionResNetV2": [[173, 372], ["_obtain_input_shape", "inception_resnet_v2.conv2d_bn", "inception_resnet_v2.conv2d_bn", "inception_resnet_v2.conv2d_bn", "inception_resnet_v2.conv2d_bn", "inception_resnet_v2.conv2d_bn", "inception_resnet_v2.conv2d_bn", "inception_resnet_v2.conv2d_bn", "inception_resnet_v2.conv2d_bn", "inception_resnet_v2.conv2d_bn", "inception_resnet_v2.conv2d_bn", "inception_resnet_v2.conv2d_bn", "inception_resnet_v2.conv2d_bn", "range", "inception_resnet_v2.conv2d_bn", "inception_resnet_v2.conv2d_bn", "inception_resnet_v2.conv2d_bn", "inception_resnet_v2.conv2d_bn", "range", "inception_resnet_v2.conv2d_bn", "inception_resnet_v2.conv2d_bn", "inception_resnet_v2.conv2d_bn", "inception_resnet_v2.conv2d_bn", "inception_resnet_v2.conv2d_bn", "inception_resnet_v2.conv2d_bn", "inception_resnet_v2.conv2d_bn", "range", "inception_resnet_v2.inception_resnet_block", "inception_resnet_v2.conv2d_bn", "keras.models.Model", "ValueError", "ValueError", "keras.layers.Input", "keras.layers.MaxPooling2D", "keras.layers.MaxPooling2D", "keras.layers.AveragePooling2D", "keras.layers.Concatenate", "inception_resnet_v2.inception_resnet_block", "keras.layers.MaxPooling2D", "keras.layers.Concatenate", "inception_resnet_v2.inception_resnet_block", "keras.layers.MaxPooling2D", "keras.layers.Concatenate", "inception_resnet_v2.inception_resnet_block", "keras.engine.topology.get_source_inputs", "keras.models.Model.load_weights", "os.path.exists", "keras.backend.image_data_format", "keras.backend.is_keras_tensor", "keras.layers.Input", "keras.backend.image_data_format", "keras.layers.GlobalAveragePooling2D", "keras.layers.Dense", "keras.backend.image_data_format", "keras.utils.data_utils.get_file", "keras.utils.data_utils.get_file", "keras.models.Model.load_weights", "keras.layers.GlobalAveragePooling2D", "keras.backend.backend", "warnings.warn", "keras.layers.GlobalMaxPooling2D"], "function", ["home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.inception_resnet_block", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.conv2d_bn", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.inception_resnet_block", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.inception_resnet_block", "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.inception_resnet_v2.inception_resnet_block"], ["", "def", "InceptionResNetV2", "(", "include_top", "=", "True", ",", "\n", "weights", "=", "'imagenet'", ",", "\n", "input_tensor", "=", "None", ",", "\n", "input_shape", "=", "None", ",", "\n", "pooling", "=", "None", ",", "\n", "classes", "=", "1000", ")", ":", "\n", "    ", "\"\"\"Instantiates the Inception-ResNet v2 architecture.\n    Optionally loads weights pre-trained on ImageNet.\n    Note that when using TensorFlow, for best performance you should\n    set `\"image_data_format\": \"channels_last\"` in your Keras config\n    at `~/.keras/keras.json`.\n    The model and the weights are compatible with TensorFlow, Theano and\n    CNTK backends. The data format convention used by the model is\n    the one specified in your Keras config file.\n    Note that the default input image size for this model is 299x299, instead\n    of 224x224 as in the VGG16 and ResNet models. Also, the input preprocessing\n    function is different (i.e., do not use `imagenet_utils.preprocess_input()`\n    with this model. Use `preprocess_input()` defined in this module instead).\n    # Arguments\n        include_top: whether to include the fully-connected\n            layer at the top of the network.\n        weights: one of `None` (random initialization),\n              'imagenet' (pre-training on ImageNet),\n              or the path to the weights file to be loaded.\n        input_tensor: optional Keras tensor (i.e. output of `layers.Input()`)\n            to use as image input for the model.\n        input_shape: optional shape tuple, only to be specified\n            if `include_top` is `False` (otherwise the input shape\n            has to be `(299, 299, 3)` (with `'channels_last'` data format)\n            or `(3, 299, 299)` (with `'channels_first'` data format).\n            It should have exactly 3 inputs channels,\n            and width and height should be no smaller than 139.\n            E.g. `(150, 150, 3)` would be one valid value.\n        pooling: Optional pooling mode for feature extraction\n            when `include_top` is `False`.\n            - `None` means that the output of the model will be\n                the 4D tensor output of the last convolutional layer.\n            - `'avg'` means that global average pooling\n                will be applied to the output of the\n                last convolutional layer, and thus\n                the output of the model will be a 2D tensor.\n            - `'max'` means that global max pooling will be applied.\n        classes: optional number of classes to classify images\n            into, only to be specified if `include_top` is `True`, and\n            if no `weights` argument is specified.\n    # Returns\n        A Keras `Model` instance.\n    # Raises\n        ValueError: in case of invalid argument for `weights`,\n            or invalid input shape.\n    \"\"\"", "\n", "if", "not", "(", "weights", "in", "{", "'imagenet'", ",", "None", "}", "or", "os", ".", "path", ".", "exists", "(", "weights", ")", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'The `weights` argument should be either '", "\n", "'`None` (random initialization), `imagenet` '", "\n", "'(pre-training on ImageNet), '", "\n", "'or the path to the weights file to be loaded.'", ")", "\n", "\n", "", "if", "weights", "==", "'imagenet'", "and", "include_top", "and", "classes", "!=", "1000", ":", "\n", "        ", "raise", "ValueError", "(", "'If using `weights` as imagenet with `include_top`'", "\n", "' as true, `classes` should be 1000'", ")", "\n", "\n", "# Determine proper input shape", "\n", "", "input_shape", "=", "_obtain_input_shape", "(", "\n", "input_shape", ",", "\n", "default_size", "=", "299", ",", "\n", "min_size", "=", "139", ",", "\n", "data_format", "=", "K", ".", "image_data_format", "(", ")", ",", "\n", "require_flatten", "=", "False", ",", "\n", "weights", "=", "weights", ")", "\n", "\n", "if", "input_tensor", "is", "None", ":", "\n", "        ", "img_input", "=", "Input", "(", "shape", "=", "input_shape", ")", "\n", "", "else", ":", "\n", "        ", "if", "not", "K", ".", "is_keras_tensor", "(", "input_tensor", ")", ":", "\n", "            ", "img_input", "=", "Input", "(", "tensor", "=", "input_tensor", ",", "shape", "=", "input_shape", ")", "\n", "", "else", ":", "\n", "            ", "img_input", "=", "input_tensor", "\n", "\n", "# Stem block: 35 x 35 x 192", "\n", "", "", "x", "=", "conv2d_bn", "(", "img_input", ",", "32", ",", "3", ",", "strides", "=", "2", ",", "padding", "=", "'same'", ")", "\n", "x", "=", "conv2d_bn", "(", "x", ",", "32", ",", "3", ",", "padding", "=", "'same'", ")", "\n", "x", "=", "conv2d_bn", "(", "x", ",", "64", ",", "3", ")", "\n", "x", "=", "MaxPooling2D", "(", "3", ",", "strides", "=", "2", ",", "padding", "=", "'same'", ")", "(", "x", ")", "\n", "x", "=", "conv2d_bn", "(", "x", ",", "80", ",", "1", ",", "padding", "=", "'same'", ")", "\n", "x", "=", "conv2d_bn", "(", "x", ",", "192", ",", "3", ",", "padding", "=", "'same'", ")", "\n", "x", "=", "MaxPooling2D", "(", "3", ",", "strides", "=", "2", ",", "padding", "=", "'same'", ")", "(", "x", ")", "\n", "\n", "# Mixed 5b (Inception-A block): 35 x 35 x 320", "\n", "branch_0", "=", "conv2d_bn", "(", "x", ",", "96", ",", "1", ")", "\n", "branch_1", "=", "conv2d_bn", "(", "x", ",", "48", ",", "1", ")", "\n", "branch_1", "=", "conv2d_bn", "(", "branch_1", ",", "64", ",", "5", ")", "\n", "branch_2", "=", "conv2d_bn", "(", "x", ",", "64", ",", "1", ")", "\n", "branch_2", "=", "conv2d_bn", "(", "branch_2", ",", "96", ",", "3", ")", "\n", "branch_2", "=", "conv2d_bn", "(", "branch_2", ",", "96", ",", "3", ")", "\n", "branch_pool", "=", "AveragePooling2D", "(", "3", ",", "strides", "=", "1", ",", "padding", "=", "'same'", ")", "(", "x", ")", "\n", "branch_pool", "=", "conv2d_bn", "(", "branch_pool", ",", "64", ",", "1", ")", "\n", "branches", "=", "[", "branch_0", ",", "branch_1", ",", "branch_2", ",", "branch_pool", "]", "\n", "channel_axis", "=", "1", "if", "K", ".", "image_data_format", "(", ")", "==", "'channels_first'", "else", "3", "\n", "x", "=", "Concatenate", "(", "axis", "=", "channel_axis", ",", "name", "=", "'mixed_5b'", ")", "(", "branches", ")", "\n", "\n", "# 10x block35 (Inception-ResNet-A block): 35 x 35 x 320", "\n", "for", "block_idx", "in", "range", "(", "1", ",", "11", ")", ":", "\n", "        ", "x", "=", "inception_resnet_block", "(", "x", ",", "\n", "scale", "=", "0.17", ",", "\n", "block_type", "=", "'block35'", ",", "\n", "block_idx", "=", "block_idx", ")", "\n", "\n", "# Mixed 6a (Reduction-A block): 17 x 17 x 1088", "\n", "", "branch_0", "=", "conv2d_bn", "(", "x", ",", "384", ",", "3", ",", "strides", "=", "2", ",", "padding", "=", "'same'", ")", "\n", "branch_1", "=", "conv2d_bn", "(", "x", ",", "256", ",", "1", ")", "\n", "branch_1", "=", "conv2d_bn", "(", "branch_1", ",", "256", ",", "3", ")", "\n", "branch_1", "=", "conv2d_bn", "(", "branch_1", ",", "384", ",", "3", ",", "strides", "=", "2", ",", "padding", "=", "'same'", ")", "\n", "branch_pool", "=", "MaxPooling2D", "(", "3", ",", "strides", "=", "2", ",", "padding", "=", "'same'", ")", "(", "x", ")", "\n", "branches", "=", "[", "branch_0", ",", "branch_1", ",", "branch_pool", "]", "\n", "x", "=", "Concatenate", "(", "axis", "=", "channel_axis", ",", "name", "=", "'mixed_6a'", ")", "(", "branches", ")", "\n", "\n", "# 20x block17 (Inception-ResNet-B block): 17 x 17 x 1088", "\n", "for", "block_idx", "in", "range", "(", "1", ",", "21", ")", ":", "\n", "        ", "x", "=", "inception_resnet_block", "(", "x", ",", "\n", "scale", "=", "0.1", ",", "\n", "block_type", "=", "'block17'", ",", "\n", "block_idx", "=", "block_idx", ")", "\n", "\n", "# Mixed 7a (Reduction-B block): 8 x 8 x 2080", "\n", "", "branch_0", "=", "conv2d_bn", "(", "x", ",", "256", ",", "1", ")", "\n", "branch_0", "=", "conv2d_bn", "(", "branch_0", ",", "384", ",", "3", ",", "strides", "=", "2", ",", "padding", "=", "'same'", ")", "\n", "branch_1", "=", "conv2d_bn", "(", "x", ",", "256", ",", "1", ")", "\n", "branch_1", "=", "conv2d_bn", "(", "branch_1", ",", "288", ",", "3", ",", "strides", "=", "2", ",", "padding", "=", "'same'", ")", "\n", "branch_2", "=", "conv2d_bn", "(", "x", ",", "256", ",", "1", ")", "\n", "branch_2", "=", "conv2d_bn", "(", "branch_2", ",", "288", ",", "3", ")", "\n", "branch_2", "=", "conv2d_bn", "(", "branch_2", ",", "320", ",", "3", ",", "strides", "=", "2", ",", "padding", "=", "'same'", ")", "\n", "branch_pool", "=", "MaxPooling2D", "(", "3", ",", "strides", "=", "2", ",", "padding", "=", "'same'", ")", "(", "x", ")", "\n", "branches", "=", "[", "branch_0", ",", "branch_1", ",", "branch_2", ",", "branch_pool", "]", "\n", "x", "=", "Concatenate", "(", "axis", "=", "channel_axis", ",", "name", "=", "'mixed_7a'", ")", "(", "branches", ")", "\n", "\n", "# 10x block8 (Inception-ResNet-C block): 8 x 8 x 2080", "\n", "for", "block_idx", "in", "range", "(", "1", ",", "10", ")", ":", "\n", "        ", "x", "=", "inception_resnet_block", "(", "x", ",", "\n", "scale", "=", "0.2", ",", "\n", "block_type", "=", "'block8'", ",", "\n", "block_idx", "=", "block_idx", ")", "\n", "", "x", "=", "inception_resnet_block", "(", "x", ",", "\n", "scale", "=", "1.", ",", "\n", "activation", "=", "None", ",", "\n", "block_type", "=", "'block8'", ",", "\n", "block_idx", "=", "10", ")", "\n", "\n", "# Final convolution block: 8 x 8 x 1536", "\n", "x", "=", "conv2d_bn", "(", "x", ",", "1536", ",", "1", ",", "name", "=", "'conv_7b'", ")", "\n", "\n", "if", "include_top", ":", "\n", "# Classification block", "\n", "        ", "x", "=", "GlobalAveragePooling2D", "(", "name", "=", "'avg_pool'", ")", "(", "x", ")", "\n", "x", "=", "Dense", "(", "classes", ",", "activation", "=", "'softmax'", ",", "name", "=", "'predictions'", ")", "(", "x", ")", "\n", "", "else", ":", "\n", "        ", "if", "pooling", "==", "'avg'", ":", "\n", "            ", "x", "=", "GlobalAveragePooling2D", "(", ")", "(", "x", ")", "\n", "", "elif", "pooling", "==", "'max'", ":", "\n", "            ", "x", "=", "GlobalMaxPooling2D", "(", ")", "(", "x", ")", "\n", "\n", "# Ensure that the model takes into account", "\n", "# any potential predecessors of `input_tensor`", "\n", "", "", "if", "input_tensor", "is", "not", "None", ":", "\n", "        ", "inputs", "=", "get_source_inputs", "(", "input_tensor", ")", "\n", "", "else", ":", "\n", "        ", "inputs", "=", "img_input", "\n", "\n", "# Create model", "\n", "", "model", "=", "Model", "(", "inputs", ",", "x", ",", "name", "=", "'inception_resnet_v2'", ")", "\n", "\n", "# Load weights", "\n", "if", "weights", "==", "'imagenet'", ":", "\n", "        ", "if", "K", ".", "image_data_format", "(", ")", "==", "'channels_first'", ":", "\n", "            ", "if", "K", ".", "backend", "(", ")", "==", "'tensorflow'", ":", "\n", "                ", "warnings", ".", "warn", "(", "'You are using the TensorFlow backend, yet you '", "\n", "'are using the Theano '", "\n", "'image data format convention '", "\n", "'(`image_data_format=\"channels_first\"`). '", "\n", "'For best performance, set '", "\n", "'`image_data_format=\"channels_last\"` in '", "\n", "'your Keras config '", "\n", "'at ~/.keras/keras.json.'", ")", "\n", "", "", "if", "include_top", ":", "\n", "            ", "fname", "=", "'inception_resnet_v2_weights_tf_dim_ordering_tf_kernels.h5'", "\n", "weights_path", "=", "get_file", "(", "fname", ",", "\n", "BASE_WEIGHT_URL", "+", "fname", ",", "\n", "cache_subdir", "=", "'models'", ",", "\n", "file_hash", "=", "'e693bd0210a403b3192acc6073ad2e96'", ")", "\n", "", "else", ":", "\n", "            ", "fname", "=", "'inception_resnet_v2_weights_tf_dim_ordering_tf_kernels_notop.h5'", "\n", "weights_path", "=", "get_file", "(", "fname", ",", "\n", "BASE_WEIGHT_URL", "+", "fname", ",", "\n", "cache_subdir", "=", "'models'", ",", "\n", "file_hash", "=", "'d19885ff4a710c122648d3b5c3b684e4'", ")", "\n", "", "model", ".", "load_weights", "(", "weights_path", ")", "\n", "", "elif", "weights", "is", "not", "None", ":", "\n", "        ", "model", ".", "load_weights", "(", "weights", ")", "\n", "\n", "", "return", "model", "", "", ""]], "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.preprocessing.get_preprocessing": [[33, 35], ["None"], "function", ["None"], ["def", "get_preprocessing", "(", "backbone", ")", ":", "\n", "    ", "return", "models_preprocessing", "[", "backbone", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.endo-angel_ct-angel.backbones.backbones.get_backbone": [[31, 33], ["None"], "function", ["None"], ["def", "get_backbone", "(", "name", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "backbones", "[", "name", "]", "(", "*", "args", ",", "**", "kwargs", ")", "", "", ""]], "home.repos.pwc.inspect_result.endo-angel_ct-angel.classification_models.utils.find_weights": [[4, 9], ["list", "list", "list", "filter", "filter", "filter"], "function", ["None"], ["\n", "def", "get_layer_number", "(", "model", ",", "layer_name", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.endo-angel_ct-angel.classification_models.utils.load_model_weights": [[11, 32], ["utils.find_weights", "keras.utils.get_file", "model.load_weights", "ValueError", "ValueError"], "function", ["home.repos.pwc.inspect_result.endo-angel_ct-angel.classification_models.utils.find_weights"], ["\n", "for", "i", ",", "l", "in", "enumerate", "(", "model", ".", "layers", ")", ":", "\n", "        ", "if", "l", ".", "name", "==", "layer_name", ":", "\n", "            ", "return", "i", "\n", "", "", "raise", "ValueError", "(", "'No layer with name {} in  model {}.'", ".", "format", "(", "layer_name", ",", "model", ".", "name", ")", ")", "\n", "\n", "\n", "", "def", "extract_outputs", "(", "model", ",", "layers", ",", "include_top", "=", "False", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.endo-angel_ct-angel.resnet.models.ResNet18": [[6, 18], ["builder.build_resnet", "utils.load_model_weights"], "function", ["home.repos.pwc.inspect_result.endo-angel_ct-angel.resnet.builder.build_resnet", "home.repos.pwc.inspect_result.endo-angel_ct-angel.classification_models.utils.load_model_weights"], ["def", "ResNet18", "(", "input_shape", ",", "input_tensor", "=", "None", ",", "weights", "=", "None", ",", "classes", "=", "1000", ",", "include_top", "=", "True", ")", ":", "\n", "    ", "model", "=", "build_resnet", "(", "input_tensor", "=", "input_tensor", ",", "\n", "input_shape", "=", "input_shape", ",", "\n", "repetitions", "=", "(", "2", ",", "2", ",", "2", ",", "2", ")", ",", "\n", "classes", "=", "classes", ",", "\n", "include_top", "=", "include_top", ",", "\n", "block_type", "=", "'basic'", ")", "\n", "model", ".", "name", "=", "'resnet18'", "\n", "\n", "if", "weights", ":", "\n", "        ", "load_model_weights", "(", "weights_collection", ",", "model", ",", "weights", ",", "classes", ",", "include_top", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.endo-angel_ct-angel.resnet.models.ResNet34": [[20, 32], ["builder.build_resnet", "utils.load_model_weights"], "function", ["home.repos.pwc.inspect_result.endo-angel_ct-angel.resnet.builder.build_resnet", "home.repos.pwc.inspect_result.endo-angel_ct-angel.classification_models.utils.load_model_weights"], ["", "def", "ResNet34", "(", "input_shape", ",", "input_tensor", "=", "None", ",", "weights", "=", "None", ",", "classes", "=", "1000", ",", "include_top", "=", "True", ")", ":", "\n", "    ", "model", "=", "build_resnet", "(", "input_tensor", "=", "input_tensor", ",", "\n", "input_shape", "=", "input_shape", ",", "\n", "repetitions", "=", "(", "3", ",", "4", ",", "6", ",", "3", ")", ",", "\n", "classes", "=", "classes", ",", "\n", "include_top", "=", "include_top", ",", "\n", "block_type", "=", "'basic'", ")", "\n", "model", ".", "name", "=", "'resnet34'", "\n", "\n", "if", "weights", ":", "\n", "        ", "load_model_weights", "(", "weights_collection", ",", "model", ",", "weights", ",", "classes", ",", "include_top", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.endo-angel_ct-angel.resnet.models.ResNet50": [[34, 45], ["builder.build_resnet", "utils.load_model_weights"], "function", ["home.repos.pwc.inspect_result.endo-angel_ct-angel.resnet.builder.build_resnet", "home.repos.pwc.inspect_result.endo-angel_ct-angel.classification_models.utils.load_model_weights"], ["", "def", "ResNet50", "(", "input_shape", ",", "input_tensor", "=", "None", ",", "weights", "=", "None", ",", "classes", "=", "1000", ",", "include_top", "=", "True", ")", ":", "\n", "    ", "model", "=", "build_resnet", "(", "input_tensor", "=", "input_tensor", ",", "\n", "input_shape", "=", "input_shape", ",", "\n", "repetitions", "=", "(", "3", ",", "4", ",", "6", ",", "3", ")", ",", "\n", "classes", "=", "classes", ",", "\n", "include_top", "=", "include_top", ")", "\n", "model", ".", "name", "=", "'resnet50'", "\n", "\n", "if", "weights", ":", "\n", "        ", "load_model_weights", "(", "weights_collection", ",", "model", ",", "weights", ",", "classes", ",", "include_top", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.endo-angel_ct-angel.resnet.models.ResNet101": [[47, 58], ["builder.build_resnet", "utils.load_model_weights"], "function", ["home.repos.pwc.inspect_result.endo-angel_ct-angel.resnet.builder.build_resnet", "home.repos.pwc.inspect_result.endo-angel_ct-angel.classification_models.utils.load_model_weights"], ["", "def", "ResNet101", "(", "input_shape", ",", "input_tensor", "=", "None", ",", "weights", "=", "None", ",", "classes", "=", "1000", ",", "include_top", "=", "True", ")", ":", "\n", "    ", "model", "=", "build_resnet", "(", "input_tensor", "=", "input_tensor", ",", "\n", "input_shape", "=", "input_shape", ",", "\n", "repetitions", "=", "(", "3", ",", "4", ",", "23", ",", "3", ")", ",", "\n", "classes", "=", "classes", ",", "\n", "include_top", "=", "include_top", ")", "\n", "model", ".", "name", "=", "'resnet101'", "\n", "\n", "if", "weights", ":", "\n", "        ", "load_model_weights", "(", "weights_collection", ",", "model", ",", "weights", ",", "classes", ",", "include_top", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.endo-angel_ct-angel.resnet.models.ResNet152": [[60, 71], ["builder.build_resnet", "utils.load_model_weights"], "function", ["home.repos.pwc.inspect_result.endo-angel_ct-angel.resnet.builder.build_resnet", "home.repos.pwc.inspect_result.endo-angel_ct-angel.classification_models.utils.load_model_weights"], ["", "def", "ResNet152", "(", "input_shape", ",", "input_tensor", "=", "None", ",", "weights", "=", "None", ",", "classes", "=", "1000", ",", "include_top", "=", "True", ")", ":", "\n", "    ", "model", "=", "build_resnet", "(", "input_tensor", "=", "input_tensor", ",", "\n", "input_shape", "=", "input_shape", ",", "\n", "repetitions", "=", "(", "3", ",", "8", ",", "36", ",", "3", ")", ",", "\n", "classes", "=", "classes", ",", "\n", "include_top", "=", "include_top", ")", "\n", "model", ".", "name", "=", "'resnet152'", "\n", "\n", "if", "weights", ":", "\n", "        ", "load_model_weights", "(", "weights_collection", ",", "model", ",", "weights", ",", "classes", ",", "include_top", ")", "\n", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.endo-angel_ct-angel.resnet.blocks.handle_block_names": [[11, 18], ["None"], "function", ["None"], ["bn_name", "=", "'decoder_stage{}-{}_bn'", ".", "format", "(", "stage", ",", "cols", ")", "\n", "relu_name", "=", "'decoder_stage{}-{}_relu'", ".", "format", "(", "stage", ",", "cols", ")", "\n", "up_name", "=", "'decoder_stage{}-{}_upsample'", ".", "format", "(", "stage", ",", "cols", ")", "\n", "merge_name", "=", "'merge_{}-{}'", ".", "format", "(", "stage", ",", "cols", ")", "\n", "return", "conv_name", ",", "bn_name", ",", "relu_name", ",", "up_name", ",", "merge_name", "\n", "\n", "\n", "", "def", "ConvRelu", "(", "filters", ",", "kernel_size", ",", "use_batchnorm", "=", "False", ",", "conv_name", "=", "'conv'", ",", "bn_name", "=", "'bn'", ",", "relu_name", "=", "'relu'", ")", ":", "\n"]], "home.repos.pwc.inspect_result.endo-angel_ct-angel.resnet.blocks.basic_identity_block": [[20, 51], ["params.get_conv_params", "params.get_bn_params", "blocks.handle_block_names", "keras.layers.BatchNormalization", "keras.layers.Activation", "keras.layers.ZeroPadding2D", "keras.layers.Conv2D", "keras.layers.BatchNormalization", "keras.layers.Activation", "keras.layers.ZeroPadding2D", "keras.layers.Conv2D", "keras.layers.Add"], "function", ["home.repos.pwc.inspect_result.endo-angel_ct-angel.resnext.params.get_conv_params", "home.repos.pwc.inspect_result.endo-angel_ct-angel.resnext.params.get_bn_params", "home.repos.pwc.inspect_result.endo-angel_ct-angel.resnext.blocks.handle_block_names"], ["        ", "x", "=", "Conv2D", "(", "filters", ",", "kernel_size", ",", "padding", "=", "\"same\"", ",", "name", "=", "conv_name", ",", "use_bias", "=", "not", "(", "use_batchnorm", ")", ")", "(", "x", ")", "\n", "if", "use_batchnorm", ":", "\n", "            ", "x", "=", "BatchNormalization", "(", "name", "=", "bn_name", ")", "(", "x", ")", "\n", "", "x", "=", "Activation", "(", "'relu'", ",", "name", "=", "relu_name", ")", "(", "x", ")", "\n", "return", "x", "\n", "", "return", "layer", "\n", "\n", "\n", "", "def", "Upsample2D_block", "(", "filters", ",", "stage", ",", "cols", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "upsample_rate", "=", "(", "2", ",", "2", ")", ",", "\n", "use_batchnorm", "=", "False", ",", "skip", "=", "None", ")", ":", "\n", "\n", "    ", "def", "layer", "(", "input_tensor", ")", ":", "\n", "\n", "        ", "conv_name", ",", "bn_name", ",", "relu_name", ",", "up_name", ",", "merge_name", "=", "handle_block_names", "(", "stage", ",", "cols", ")", "\n", "\n", "x", "=", "UpSampling2D", "(", "size", "=", "upsample_rate", ",", "name", "=", "up_name", ")", "(", "input_tensor", ")", "\n", "\n", "if", "skip", "is", "not", "None", ":", "\n", "            ", "x", "=", "Concatenate", "(", "name", "=", "merge_name", ")", "(", "[", "x", ",", "skip", "]", ")", "\n", "\n", "", "x", "=", "ConvRelu", "(", "filters", ",", "kernel_size", ",", "use_batchnorm", "=", "use_batchnorm", ",", "\n", "conv_name", "=", "conv_name", "+", "'1'", ",", "bn_name", "=", "bn_name", "+", "'1'", ",", "relu_name", "=", "relu_name", "+", "'1'", ")", "(", "x", ")", "\n", "\n", "x", "=", "ConvRelu", "(", "filters", ",", "kernel_size", ",", "use_batchnorm", "=", "use_batchnorm", ",", "\n", "conv_name", "=", "conv_name", "+", "'2'", ",", "bn_name", "=", "bn_name", "+", "'2'", ",", "relu_name", "=", "relu_name", "+", "'2'", ")", "(", "x", ")", "\n", "\n", "return", "x", "\n", "", "return", "layer", "\n", "\n", "\n", "", "def", "Transpose2D_block", "(", "filters", ",", "stage", ",", "cols", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "upsample_rate", "=", "(", "2", ",", "2", ")", ",", "\n", "transpose_kernel_size", "=", "(", "4", ",", "4", ")", ",", "use_batchnorm", "=", "False", ",", "skip", "=", "None", ")", ":", "\n"]], "home.repos.pwc.inspect_result.endo-angel_ct-angel.resnet.blocks.basic_conv_block": [[53, 87], ["params.get_conv_params", "params.get_bn_params", "blocks.handle_block_names", "keras.layers.BatchNormalization", "keras.layers.Activation", "keras.layers.ZeroPadding2D", "keras.layers.Conv2D", "keras.layers.BatchNormalization", "keras.layers.Activation", "keras.layers.ZeroPadding2D", "keras.layers.Conv2D", "keras.layers.Conv2D", "keras.layers.Add"], "function", ["home.repos.pwc.inspect_result.endo-angel_ct-angel.resnext.params.get_conv_params", "home.repos.pwc.inspect_result.endo-angel_ct-angel.resnext.params.get_bn_params", "home.repos.pwc.inspect_result.endo-angel_ct-angel.resnext.blocks.handle_block_names"], ["    ", "def", "layer", "(", "input_tensor", ")", ":", "\n", "\n", "        ", "conv_name", ",", "bn_name", ",", "relu_name", ",", "up_name", ",", "merge_name", "=", "handle_block_names", "(", "stage", ",", "cols", ")", "\n", "\n", "x", "=", "Conv2DTranspose", "(", "filters", ",", "transpose_kernel_size", ",", "strides", "=", "upsample_rate", ",", "\n", "padding", "=", "'same'", ",", "name", "=", "up_name", ",", "use_bias", "=", "not", "(", "use_batchnorm", ")", ")", "(", "input_tensor", ")", "\n", "if", "use_batchnorm", ":", "\n", "            ", "x", "=", "BatchNormalization", "(", "name", "=", "bn_name", "+", "'1'", ")", "(", "x", ")", "\n", "", "x", "=", "Activation", "(", "'relu'", ",", "name", "=", "relu_name", "+", "'1'", ")", "(", "x", ")", "\n", "\n", "if", "(", "type", "(", "skip", ")", "!=", "list", "and", "skip", "is", "not", "None", ")", "or", "(", "type", "(", "skip", ")", "==", "list", "and", "None", "not", "in", "skip", ")", ":", "\n", "# print(\"\\nskip = {}\".format(skip))", "\n", "            ", "if", "type", "(", "skip", ")", "is", "list", ":", "\n", "                ", "merge_list", "=", "[", "]", "\n", "merge_list", ".", "append", "(", "x", ")", "\n", "for", "l", "in", "skip", ":", "\n", "                    ", "merge_list", ".", "append", "(", "l", ")", "\n", "", "x", "=", "Concatenate", "(", "name", "=", "merge_name", ")", "(", "merge_list", ")", "\n", "", "else", ":", "\n", "                ", "x", "=", "Concatenate", "(", "name", "=", "merge_name", ")", "(", "[", "x", ",", "skip", "]", ")", "\n", "\n", "", "", "x", "=", "ConvRelu", "(", "filters", ",", "kernel_size", ",", "use_batchnorm", "=", "use_batchnorm", ",", "\n", "conv_name", "=", "conv_name", "+", "'2'", ",", "bn_name", "=", "bn_name", "+", "'2'", ",", "relu_name", "=", "relu_name", "+", "'2'", ")", "(", "x", ")", "\n", "\n", "return", "x", "\n", "", "return", "layer", "", "", ""]], "home.repos.pwc.inspect_result.endo-angel_ct-angel.resnet.blocks.conv_block": [[89, 126], ["params.get_conv_params", "params.get_bn_params", "blocks.handle_block_names", "keras.layers.BatchNormalization", "keras.layers.Activation", "keras.layers.Conv2D", "keras.layers.BatchNormalization", "keras.layers.Activation", "keras.layers.ZeroPadding2D", "keras.layers.Conv2D", "keras.layers.BatchNormalization", "keras.layers.Activation", "keras.layers.Conv2D", "keras.layers.Conv2D", "keras.layers.Add"], "function", ["home.repos.pwc.inspect_result.endo-angel_ct-angel.resnext.params.get_conv_params", "home.repos.pwc.inspect_result.endo-angel_ct-angel.resnext.params.get_bn_params", "home.repos.pwc.inspect_result.endo-angel_ct-angel.resnext.blocks.handle_block_names"], []], "home.repos.pwc.inspect_result.endo-angel_ct-angel.resnet.blocks.identity_block": [[128, 162], ["params.get_conv_params", "params.get_bn_params", "blocks.handle_block_names", "keras.layers.BatchNormalization", "keras.layers.Activation", "keras.layers.Conv2D", "keras.layers.BatchNormalization", "keras.layers.Activation", "keras.layers.ZeroPadding2D", "keras.layers.Conv2D", "keras.layers.BatchNormalization", "keras.layers.Activation", "keras.layers.Conv2D", "keras.layers.Add"], "function", ["home.repos.pwc.inspect_result.endo-angel_ct-angel.resnext.params.get_conv_params", "home.repos.pwc.inspect_result.endo-angel_ct-angel.resnext.params.get_bn_params", "home.repos.pwc.inspect_result.endo-angel_ct-angel.resnext.blocks.handle_block_names"], []], "home.repos.pwc.inspect_result.endo-angel_ct-angel.resnet.params.get_conv_params": [[5, 13], ["default_conv_params.update"], "function", ["None"], ["def", "get_conv_params", "(", "**", "params", ")", ":", "\n", "    ", "default_conv_params", "=", "{", "\n", "'kernel_initializer'", ":", "'glorot_uniform'", ",", "\n", "'use_bias'", ":", "False", ",", "\n", "'padding'", ":", "'valid'", ",", "\n", "}", "\n", "default_conv_params", ".", "update", "(", "params", ")", "\n", "return", "default_conv_params", "\n", "\n"]], "home.repos.pwc.inspect_result.endo-angel_ct-angel.resnet.params.get_bn_params": [[15, 25], ["default_bn_params.update"], "function", ["None"], ["", "def", "get_bn_params", "(", "**", "params", ")", ":", "\n", "    ", "default_bn_params", "=", "{", "\n", "'axis'", ":", "3", ",", "\n", "'momentum'", ":", "0.99", ",", "\n", "'epsilon'", ":", "2e-5", ",", "\n", "'center'", ":", "True", ",", "\n", "'scale'", ":", "True", ",", "\n", "}", "\n", "default_bn_params", ".", "update", "(", "params", ")", "\n", "return", "default_bn_params", "\n", "", ""]], "home.repos.pwc.inspect_result.endo-angel_ct-angel.resnet.builder.build_resnet": [[28, 112], ["_obtain_input_shape", "params.get_bn_params", "params.get_bn_params", "params.get_conv_params", "enumerate", "keras.models.Model", "keras.layers.Input", "keras.layers.BatchNormalization", "keras.layers.ZeroPadding2D", "keras.layers.Conv2D", "keras.layers.BatchNormalization", "keras.layers.Activation", "keras.layers.ZeroPadding2D", "keras.layers.MaxPooling2D", "range", "keras.layers.BatchNormalization", "keras.layers.Activation", "keras.engine.get_source_inputs", "keras.is_keras_tensor", "keras.layers.Input", "keras.layers.GlobalAveragePooling2D", "keras.layers.Dense", "keras.layers.Activation", "blocks.conv_block", "blocks.conv_block", "blocks.identity_block"], "function", ["home.repos.pwc.inspect_result.endo-angel_ct-angel.resnext.params.get_bn_params", "home.repos.pwc.inspect_result.endo-angel_ct-angel.resnext.params.get_bn_params", "home.repos.pwc.inspect_result.endo-angel_ct-angel.resnext.params.get_conv_params", "home.repos.pwc.inspect_result.endo-angel_ct-angel.resnext.blocks.conv_block", "home.repos.pwc.inspect_result.endo-angel_ct-angel.resnext.blocks.conv_block", "home.repos.pwc.inspect_result.endo-angel_ct-angel.resnext.blocks.identity_block"], ["", "if", "len", "(", "skip_connection_layers", ")", ">", "n_upsample_blocks", ":", "\n", "        ", "downsampling_layers", "=", "skip_connection_layers", "[", "int", "(", "len", "(", "skip_connection_layers", ")", "/", "2", ")", ":", "]", "\n", "skip_connection_layers", "=", "skip_connection_layers", "[", ":", "int", "(", "len", "(", "skip_connection_layers", ")", "/", "2", ")", "]", "\n", "", "else", ":", "\n", "        ", "downsampling_layers", "=", "skip_connection_layers", "\n", "\n", "\n", "# convert layer names to indices", "\n", "", "skip_connection_idx", "=", "(", "[", "get_layer_number", "(", "backbone", ",", "l", ")", "if", "isinstance", "(", "l", ",", "str", ")", "else", "l", "\n", "for", "l", "in", "skip_connection_layers", "]", ")", "\n", "skip_layers_list", "=", "[", "backbone", ".", "layers", "[", "skip_connection_idx", "[", "i", "]", "]", ".", "output", "for", "i", "in", "range", "(", "len", "(", "skip_connection_idx", ")", ")", "]", "\n", "downsampling_idx", "=", "(", "[", "get_layer_number", "(", "backbone", ",", "l", ")", "if", "isinstance", "(", "l", ",", "str", ")", "else", "l", "\n", "for", "l", "in", "downsampling_layers", "]", ")", "\n", "downsampling_list", "=", "[", "backbone", ".", "layers", "[", "downsampling_idx", "[", "i", "]", "]", ".", "output", "for", "i", "in", "range", "(", "len", "(", "downsampling_idx", ")", ")", "]", "\n", "downterm", "=", "[", "None", "]", "*", "(", "n_upsample_blocks", "+", "1", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "downsampling_idx", ")", ")", ":", "\n", "# print(downsampling_list[0])", "\n", "# print(backbone.output)", "\n", "# print(\"\")", "\n", "        ", "if", "downsampling_list", "[", "0", "]", "==", "backbone", ".", "output", ":", "\n", "# print(\"VGG16 should be!\")", "\n", "            ", "downterm", "[", "n_upsample_blocks", "-", "i", "]", "=", "downsampling_list", "[", "i", "]", "\n", "", "else", ":", "\n", "            ", "downterm", "[", "n_upsample_blocks", "-", "i", "-", "1", "]", "=", "downsampling_list", "[", "i", "]", "\n", "", "", "downterm", "[", "-", "1", "]", "=", "backbone", ".", "output", "\n", "# print(\"downterm = {}\".format(downterm))", "\n", "\n", "interm", "=", "[", "None", "]", "*", "(", "n_upsample_blocks", "+", "1", ")", "*", "(", "n_upsample_blocks", "+", "1", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "skip_connection_idx", ")", ")", ":", "\n", "        ", "interm", "[", "-", "i", "*", "(", "n_upsample_blocks", "+", "1", ")", "+", "(", "n_upsample_blocks", "+", "1", ")", "*", "(", "n_upsample_blocks", "-", "1", ")", "]", "=", "skip_layers_list", "[", "i", "]", "\n", "", "interm", "[", "(", "n_upsample_blocks", "+", "1", ")", "*", "n_upsample_blocks", "]", "=", "backbone", ".", "output", "\n", "\n", "for", "j", "in", "range", "(", "n_upsample_blocks", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "n_upsample_blocks", "-", "j", ")", ":", "\n", "            ", "upsample_rate", "=", "to_tuple", "(", "upsample_rates", "[", "i", "]", ")", "\n", "# print(j, i)", "\n", "\n", "if", "i", "==", "0", "and", "j", "<", "n_upsample_blocks", "-", "1", "and", "len", "(", "skip_connection_layers", ")", "<", "n_upsample_blocks", ":", "\n", "                ", "interm", "[", "(", "n_upsample_blocks", "+", "1", ")", "*", "i", "+", "j", "+", "1", "]", "=", "None", "\n", "", "elif", "j", "==", "0", ":", "\n", "                ", "if", "downterm", "[", "i", "+", "1", "]", "is", "not", "None", ":", "\n", "                    ", "interm", "[", "(", "n_upsample_blocks", "+", "1", ")", "*", "i", "+", "j", "+", "1", "]", "=", "up_block", "(", "decoder_filters", "[", "n_upsample_blocks", "-", "i", "-", "2", "]", ",", "\n", "i", "+", "1", ",", "j", "+", "1", ",", "upsample_rate", "=", "upsample_rate", ",", "\n", "skip", "=", "interm", "[", "(", "n_upsample_blocks", "+", "1", ")", "*", "i", "+", "j", "]", ",", "\n", "use_batchnorm", "=", "use_batchnorm", ")", "(", "downterm", "[", "i", "+", "1", "]", ")", "\n", "", "else", ":", "\n", "                    ", "interm", "[", "(", "n_upsample_blocks", "+", "1", ")", "*", "i", "+", "j", "+", "1", "]", "=", "None", "\n", "# print(\"\\n{} = {} + {}\\n\".format(interm[(n_upsample_blocks+1)*i+j+1],", "\n", "#                             interm[(n_upsample_blocks+1)*i+j], ", "\n", "#                             downterm[i+1]))", "\n", "", "", "else", ":", "\n", "                ", "interm", "[", "(", "n_upsample_blocks", "+", "1", ")", "*", "i", "+", "j", "+", "1", "]", "=", "up_block", "(", "decoder_filters", "[", "n_upsample_blocks", "-", "i", "-", "2", "]", ",", "\n", "i", "+", "1", ",", "j", "+", "1", ",", "upsample_rate", "=", "upsample_rate", ",", "\n", "skip", "=", "interm", "[", "(", "n_upsample_blocks", "+", "1", ")", "*", "i", ":", "(", "n_upsample_blocks", "+", "1", ")", "*", "i", "+", "j", "+", "1", "]", ",", "\n", "use_batchnorm", "=", "use_batchnorm", ")", "(", "interm", "[", "(", "n_upsample_blocks", "+", "1", ")", "*", "(", "i", "+", "1", ")", "+", "j", "]", ")", "\n", "# print(\"\\n{} = {} + {}\\n\".format(interm[(n_upsample_blocks+1)*i+j+1],", "\n", "#                             interm[(n_upsample_blocks+1)*i : (n_upsample_blocks+1)*i+j+1], ", "\n", "#                             interm[(n_upsample_blocks+1)*(i+1)+j]))", "\n", "\n", "# print('\\n\\n\\n')", "\n", "# for x in range(n_upsample_blocks+1):", "\n", "#     for y in range(n_upsample_blocks+1):", "\n", "#         print(interm[x*(n_upsample_blocks+1)+y], end=' ', flush=True)", "\n", "#     print('\\n')", "\n", "# print('\\n\\n\\n')", "\n", "#print(interm)", "\n", "\n", "", "", ""]], "home.repos.pwc.inspect_result.endo-angel_ct-angel.resnet.preprocessing.preprocess_input": [[4, 19], ["skimage.transform.resize"], "function", ["None"], ["\n", "\n", "from", "keras", ".", "applications", "import", "vgg16", "\n", "from", "keras", ".", "applications", "import", "vgg19", "\n", "from", "keras", ".", "applications", "import", "densenet", "\n", "from", "keras", ".", "applications", "import", "inception_v3", "\n", "from", "keras", ".", "applications", "import", "inception_resnet_v2", "\n", "\n", "identical", "=", "lambda", "x", ":", "x", "\n", "bgr_transpose", "=", "lambda", "x", ":", "x", "[", "...", ",", ":", ":", "-", "1", "]", "\n", "\n", "models_preprocessing", "=", "{", "\n", "'vgg16'", ":", "vgg16", ".", "preprocess_input", ",", "\n", "'vgg19'", ":", "vgg19", ".", "preprocess_input", ",", "\n", "'resnet18'", ":", "bgr_transpose", ",", "\n", "'resnet34'", ":", "bgr_transpose", ",", "\n"]], "home.repos.pwc.inspect_result.endo-angel_ct-angel.resnext.models.ResNeXt50": [[6, 18], ["builder.build_resnext", "utils.load_model_weights"], "function", ["home.repos.pwc.inspect_result.endo-angel_ct-angel.resnext.builder.build_resnext", "home.repos.pwc.inspect_result.endo-angel_ct-angel.classification_models.utils.load_model_weights"], ["def", "ResNet18", "(", "input_shape", ",", "input_tensor", "=", "None", ",", "weights", "=", "None", ",", "classes", "=", "1000", ",", "include_top", "=", "True", ")", ":", "\n", "    ", "model", "=", "build_resnet", "(", "input_tensor", "=", "input_tensor", ",", "\n", "input_shape", "=", "input_shape", ",", "\n", "repetitions", "=", "(", "2", ",", "2", ",", "2", ",", "2", ")", ",", "\n", "classes", "=", "classes", ",", "\n", "include_top", "=", "include_top", ",", "\n", "block_type", "=", "'basic'", ")", "\n", "model", ".", "name", "=", "'resnet18'", "\n", "\n", "if", "weights", ":", "\n", "        ", "load_model_weights", "(", "weights_collection", ",", "model", ",", "weights", ",", "classes", ",", "include_top", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.endo-angel_ct-angel.resnext.models.ResNeXt101": [[20, 32], ["builder.build_resnext", "utils.load_model_weights"], "function", ["home.repos.pwc.inspect_result.endo-angel_ct-angel.resnext.builder.build_resnext", "home.repos.pwc.inspect_result.endo-angel_ct-angel.classification_models.utils.load_model_weights"], ["", "def", "ResNet34", "(", "input_shape", ",", "input_tensor", "=", "None", ",", "weights", "=", "None", ",", "classes", "=", "1000", ",", "include_top", "=", "True", ")", ":", "\n", "    ", "model", "=", "build_resnet", "(", "input_tensor", "=", "input_tensor", ",", "\n", "input_shape", "=", "input_shape", ",", "\n", "repetitions", "=", "(", "3", ",", "4", ",", "6", ",", "3", ")", ",", "\n", "classes", "=", "classes", ",", "\n", "include_top", "=", "include_top", ",", "\n", "block_type", "=", "'basic'", ")", "\n", "model", ".", "name", "=", "'resnet34'", "\n", "\n", "if", "weights", ":", "\n", "        ", "load_model_weights", "(", "weights_collection", ",", "model", ",", "weights", ",", "classes", ",", "include_top", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.endo-angel_ct-angel.resnext.blocks.handle_block_names": [[13, 20], ["None"], "function", ["None"], ["up_name", "=", "'decoder_stage{}-{}_upsample'", ".", "format", "(", "stage", ",", "cols", ")", "\n", "merge_name", "=", "'merge_{}-{}'", ".", "format", "(", "stage", ",", "cols", ")", "\n", "return", "conv_name", ",", "bn_name", ",", "relu_name", ",", "up_name", ",", "merge_name", "\n", "\n", "\n", "", "def", "ConvRelu", "(", "filters", ",", "kernel_size", ",", "use_batchnorm", "=", "False", ",", "conv_name", "=", "'conv'", ",", "bn_name", "=", "'bn'", ",", "relu_name", "=", "'relu'", ")", ":", "\n", "    ", "def", "layer", "(", "x", ")", ":", "\n", "        ", "x", "=", "Conv2D", "(", "filters", ",", "kernel_size", ",", "padding", "=", "\"same\"", ",", "name", "=", "conv_name", ",", "use_bias", "=", "not", "(", "use_batchnorm", ")", ")", "(", "x", ")", "\n"]], "home.repos.pwc.inspect_result.endo-angel_ct-angel.resnext.blocks.GroupConv2D": [[22, 39], ["range", "int", "blocks.append", "keras.layers.Concatenate", "keras.layers.Lambda", "str", "keras.layers.Conv2D"], "function", ["None"], ["            ", "x", "=", "BatchNormalization", "(", "name", "=", "bn_name", ")", "(", "x", ")", "\n", "", "x", "=", "Activation", "(", "'relu'", ",", "name", "=", "relu_name", ")", "(", "x", ")", "\n", "return", "x", "\n", "", "return", "layer", "\n", "\n", "\n", "", "def", "Upsample2D_block", "(", "filters", ",", "stage", ",", "cols", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "upsample_rate", "=", "(", "2", ",", "2", ")", ",", "\n", "use_batchnorm", "=", "False", ",", "skip", "=", "None", ")", ":", "\n", "\n", "    ", "def", "layer", "(", "input_tensor", ")", ":", "\n", "\n", "        ", "conv_name", ",", "bn_name", ",", "relu_name", ",", "up_name", ",", "merge_name", "=", "handle_block_names", "(", "stage", ",", "cols", ")", "\n", "\n", "x", "=", "UpSampling2D", "(", "size", "=", "upsample_rate", ",", "name", "=", "up_name", ")", "(", "input_tensor", ")", "\n", "\n", "if", "skip", "is", "not", "None", ":", "\n", "            ", "x", "=", "Concatenate", "(", "name", "=", "merge_name", ")", "(", "[", "x", ",", "skip", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.endo-angel_ct-angel.resnext.blocks.conv_block": [[41, 79], ["params.get_conv_params", "params.get_bn_params", "blocks.handle_block_names", "keras.layers.Conv2D", "keras.layers.BatchNormalization", "keras.layers.Activation", "keras.layers.ZeroPadding2D", "blocks.GroupConv2D", "keras.layers.BatchNormalization", "keras.layers.Activation", "keras.layers.Conv2D", "keras.layers.BatchNormalization", "keras.layers.Conv2D", "keras.layers.BatchNormalization", "keras.layers.Add", "keras.layers.Activation"], "function", ["home.repos.pwc.inspect_result.endo-angel_ct-angel.resnext.params.get_conv_params", "home.repos.pwc.inspect_result.endo-angel_ct-angel.resnext.params.get_bn_params", "home.repos.pwc.inspect_result.endo-angel_ct-angel.resnext.blocks.handle_block_names", "home.repos.pwc.inspect_result.endo-angel_ct-angel.resnext.blocks.GroupConv2D"], ["conv_name", "=", "conv_name", "+", "'1'", ",", "bn_name", "=", "bn_name", "+", "'1'", ",", "relu_name", "=", "relu_name", "+", "'1'", ")", "(", "x", ")", "\n", "\n", "x", "=", "ConvRelu", "(", "filters", ",", "kernel_size", ",", "use_batchnorm", "=", "use_batchnorm", ",", "\n", "conv_name", "=", "conv_name", "+", "'2'", ",", "bn_name", "=", "bn_name", "+", "'2'", ",", "relu_name", "=", "relu_name", "+", "'2'", ")", "(", "x", ")", "\n", "\n", "return", "x", "\n", "", "return", "layer", "\n", "\n", "\n", "", "def", "Transpose2D_block", "(", "filters", ",", "stage", ",", "cols", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "upsample_rate", "=", "(", "2", ",", "2", ")", ",", "\n", "transpose_kernel_size", "=", "(", "4", ",", "4", ")", ",", "use_batchnorm", "=", "False", ",", "skip", "=", "None", ")", ":", "\n", "\n", "    ", "def", "layer", "(", "input_tensor", ")", ":", "\n", "\n", "        ", "conv_name", ",", "bn_name", ",", "relu_name", ",", "up_name", ",", "merge_name", "=", "handle_block_names", "(", "stage", ",", "cols", ")", "\n", "\n", "x", "=", "Conv2DTranspose", "(", "filters", ",", "transpose_kernel_size", ",", "strides", "=", "upsample_rate", ",", "\n", "padding", "=", "'same'", ",", "name", "=", "up_name", ",", "use_bias", "=", "not", "(", "use_batchnorm", ")", ")", "(", "input_tensor", ")", "\n", "if", "use_batchnorm", ":", "\n", "            ", "x", "=", "BatchNormalization", "(", "name", "=", "bn_name", "+", "'1'", ")", "(", "x", ")", "\n", "", "x", "=", "Activation", "(", "'relu'", ",", "name", "=", "relu_name", "+", "'1'", ")", "(", "x", ")", "\n", "\n", "if", "(", "type", "(", "skip", ")", "!=", "list", "and", "skip", "is", "not", "None", ")", "or", "(", "type", "(", "skip", ")", "==", "list", "and", "None", "not", "in", "skip", ")", ":", "\n", "# print(\"\\nskip = {}\".format(skip))", "\n", "            ", "if", "type", "(", "skip", ")", "is", "list", ":", "\n", "                ", "merge_list", "=", "[", "]", "\n", "merge_list", ".", "append", "(", "x", ")", "\n", "for", "l", "in", "skip", ":", "\n", "                    ", "merge_list", ".", "append", "(", "l", ")", "\n", "", "x", "=", "Concatenate", "(", "name", "=", "merge_name", ")", "(", "merge_list", ")", "\n", "", "else", ":", "\n", "                ", "x", "=", "Concatenate", "(", "name", "=", "merge_name", ")", "(", "[", "x", ",", "skip", "]", ")", "\n", "\n", "", "", "x", "=", "ConvRelu", "(", "filters", ",", "kernel_size", ",", "use_batchnorm", "=", "use_batchnorm", ",", "\n", "conv_name", "=", "conv_name", "+", "'2'", ",", "bn_name", "=", "bn_name", "+", "'2'", ",", "relu_name", "=", "relu_name", "+", "'2'", ")", "(", "x", ")", "\n", "\n", "return", "x", "\n", "", "return", "layer", "", "", ""]], "home.repos.pwc.inspect_result.endo-angel_ct-angel.resnext.blocks.identity_block": [[81, 114], ["params.get_conv_params", "params.get_bn_params", "blocks.handle_block_names", "keras.layers.Conv2D", "keras.layers.BatchNormalization", "keras.layers.Activation", "keras.layers.ZeroPadding2D", "blocks.GroupConv2D", "keras.layers.BatchNormalization", "keras.layers.Activation", "keras.layers.Conv2D", "keras.layers.BatchNormalization", "keras.layers.Add", "keras.layers.Activation"], "function", ["home.repos.pwc.inspect_result.endo-angel_ct-angel.resnext.params.get_conv_params", "home.repos.pwc.inspect_result.endo-angel_ct-angel.resnext.params.get_bn_params", "home.repos.pwc.inspect_result.endo-angel_ct-angel.resnext.blocks.handle_block_names", "home.repos.pwc.inspect_result.endo-angel_ct-angel.resnext.blocks.GroupConv2D"], []], "home.repos.pwc.inspect_result.endo-angel_ct-angel.resnext.params.get_conv_params": [[5, 13], ["default_conv_params.update"], "function", ["None"], ["def", "get_conv_params", "(", "**", "params", ")", ":", "\n", "    ", "default_conv_params", "=", "{", "\n", "'kernel_initializer'", ":", "'glorot_uniform'", ",", "\n", "'use_bias'", ":", "False", ",", "\n", "'padding'", ":", "'valid'", ",", "\n", "}", "\n", "default_conv_params", ".", "update", "(", "params", ")", "\n", "return", "default_conv_params", "\n", "\n"]], "home.repos.pwc.inspect_result.endo-angel_ct-angel.resnext.params.get_bn_params": [[15, 25], ["default_bn_params.update"], "function", ["None"], ["", "def", "get_bn_params", "(", "**", "params", ")", ":", "\n", "    ", "default_bn_params", "=", "{", "\n", "'axis'", ":", "3", ",", "\n", "'momentum'", ":", "0.99", ",", "\n", "'epsilon'", ":", "2e-5", ",", "\n", "'center'", ":", "True", ",", "\n", "'scale'", ":", "True", ",", "\n", "}", "\n", "default_bn_params", ".", "update", "(", "params", ")", "\n", "return", "default_bn_params", "\n", "", ""]], "home.repos.pwc.inspect_result.endo-angel_ct-angel.resnext.builder.build_resnext": [[29, 104], ["_obtain_input_shape", "params.get_bn_params", "params.get_bn_params", "params.get_conv_params", "enumerate", "keras.models.Model", "keras.layers.Input", "keras.layers.BatchNormalization", "keras.layers.ZeroPadding2D", "keras.layers.Conv2D", "keras.layers.BatchNormalization", "keras.layers.Activation", "keras.layers.ZeroPadding2D", "keras.layers.MaxPooling2D", "range", "keras.engine.get_source_inputs", "keras.is_keras_tensor", "keras.layers.Input", "keras.layers.GlobalAveragePooling2D", "keras.layers.Dense", "keras.layers.Activation", "blocks.conv_block", "blocks.conv_block", "blocks.identity_block"], "function", ["home.repos.pwc.inspect_result.endo-angel_ct-angel.resnext.params.get_bn_params", "home.repos.pwc.inspect_result.endo-angel_ct-angel.resnext.params.get_bn_params", "home.repos.pwc.inspect_result.endo-angel_ct-angel.resnext.params.get_conv_params", "home.repos.pwc.inspect_result.endo-angel_ct-angel.resnext.blocks.conv_block", "home.repos.pwc.inspect_result.endo-angel_ct-angel.resnext.blocks.conv_block", "home.repos.pwc.inspect_result.endo-angel_ct-angel.resnext.blocks.identity_block"], ["        ", "downsampling_layers", "=", "skip_connection_layers", "[", "int", "(", "len", "(", "skip_connection_layers", ")", "/", "2", ")", ":", "]", "\n", "skip_connection_layers", "=", "skip_connection_layers", "[", ":", "int", "(", "len", "(", "skip_connection_layers", ")", "/", "2", ")", "]", "\n", "", "else", ":", "\n", "        ", "downsampling_layers", "=", "skip_connection_layers", "\n", "\n", "\n", "# convert layer names to indices", "\n", "", "skip_connection_idx", "=", "(", "[", "get_layer_number", "(", "backbone", ",", "l", ")", "if", "isinstance", "(", "l", ",", "str", ")", "else", "l", "\n", "for", "l", "in", "skip_connection_layers", "]", ")", "\n", "skip_layers_list", "=", "[", "backbone", ".", "layers", "[", "skip_connection_idx", "[", "i", "]", "]", ".", "output", "for", "i", "in", "range", "(", "len", "(", "skip_connection_idx", ")", ")", "]", "\n", "downsampling_idx", "=", "(", "[", "get_layer_number", "(", "backbone", ",", "l", ")", "if", "isinstance", "(", "l", ",", "str", ")", "else", "l", "\n", "for", "l", "in", "downsampling_layers", "]", ")", "\n", "downsampling_list", "=", "[", "backbone", ".", "layers", "[", "downsampling_idx", "[", "i", "]", "]", ".", "output", "for", "i", "in", "range", "(", "len", "(", "downsampling_idx", ")", ")", "]", "\n", "downterm", "=", "[", "None", "]", "*", "(", "n_upsample_blocks", "+", "1", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "downsampling_idx", ")", ")", ":", "\n", "# print(downsampling_list[0])", "\n", "# print(backbone.output)", "\n", "# print(\"\")", "\n", "        ", "if", "downsampling_list", "[", "0", "]", "==", "backbone", ".", "output", ":", "\n", "# print(\"VGG16 should be!\")", "\n", "            ", "downterm", "[", "n_upsample_blocks", "-", "i", "]", "=", "downsampling_list", "[", "i", "]", "\n", "", "else", ":", "\n", "            ", "downterm", "[", "n_upsample_blocks", "-", "i", "-", "1", "]", "=", "downsampling_list", "[", "i", "]", "\n", "", "", "downterm", "[", "-", "1", "]", "=", "backbone", ".", "output", "\n", "# print(\"downterm = {}\".format(downterm))", "\n", "\n", "interm", "=", "[", "None", "]", "*", "(", "n_upsample_blocks", "+", "1", ")", "*", "(", "n_upsample_blocks", "+", "1", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "skip_connection_idx", ")", ")", ":", "\n", "        ", "interm", "[", "-", "i", "*", "(", "n_upsample_blocks", "+", "1", ")", "+", "(", "n_upsample_blocks", "+", "1", ")", "*", "(", "n_upsample_blocks", "-", "1", ")", "]", "=", "skip_layers_list", "[", "i", "]", "\n", "", "interm", "[", "(", "n_upsample_blocks", "+", "1", ")", "*", "n_upsample_blocks", "]", "=", "backbone", ".", "output", "\n", "\n", "for", "j", "in", "range", "(", "n_upsample_blocks", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "n_upsample_blocks", "-", "j", ")", ":", "\n", "            ", "upsample_rate", "=", "to_tuple", "(", "upsample_rates", "[", "i", "]", ")", "\n", "# print(j, i)", "\n", "\n", "if", "i", "==", "0", "and", "j", "<", "n_upsample_blocks", "-", "1", "and", "len", "(", "skip_connection_layers", ")", "<", "n_upsample_blocks", ":", "\n", "                ", "interm", "[", "(", "n_upsample_blocks", "+", "1", ")", "*", "i", "+", "j", "+", "1", "]", "=", "None", "\n", "", "elif", "j", "==", "0", ":", "\n", "                ", "if", "downterm", "[", "i", "+", "1", "]", "is", "not", "None", ":", "\n", "                    ", "interm", "[", "(", "n_upsample_blocks", "+", "1", ")", "*", "i", "+", "j", "+", "1", "]", "=", "up_block", "(", "decoder_filters", "[", "n_upsample_blocks", "-", "i", "-", "2", "]", ",", "\n", "i", "+", "1", ",", "j", "+", "1", ",", "upsample_rate", "=", "upsample_rate", ",", "\n", "skip", "=", "interm", "[", "(", "n_upsample_blocks", "+", "1", ")", "*", "i", "+", "j", "]", ",", "\n", "use_batchnorm", "=", "use_batchnorm", ")", "(", "downterm", "[", "i", "+", "1", "]", ")", "\n", "", "else", ":", "\n", "                    ", "interm", "[", "(", "n_upsample_blocks", "+", "1", ")", "*", "i", "+", "j", "+", "1", "]", "=", "None", "\n", "# print(\"\\n{} = {} + {}\\n\".format(interm[(n_upsample_blocks+1)*i+j+1],", "\n", "#                             interm[(n_upsample_blocks+1)*i+j], ", "\n", "#                             downterm[i+1]))", "\n", "", "", "else", ":", "\n", "                ", "interm", "[", "(", "n_upsample_blocks", "+", "1", ")", "*", "i", "+", "j", "+", "1", "]", "=", "up_block", "(", "decoder_filters", "[", "n_upsample_blocks", "-", "i", "-", "2", "]", ",", "\n", "i", "+", "1", ",", "j", "+", "1", ",", "upsample_rate", "=", "upsample_rate", ",", "\n", "skip", "=", "interm", "[", "(", "n_upsample_blocks", "+", "1", ")", "*", "i", ":", "(", "n_upsample_blocks", "+", "1", ")", "*", "i", "+", "j", "+", "1", "]", ",", "\n", "use_batchnorm", "=", "use_batchnorm", ")", "(", "interm", "[", "(", "n_upsample_blocks", "+", "1", ")", "*", "(", "i", "+", "1", ")", "+", "j", "]", ")", "\n", "# print(\"\\n{} = {} + {}\\n\".format(interm[(n_upsample_blocks+1)*i+j+1],", "\n", "#                             interm[(n_upsample_blocks+1)*i : (n_upsample_blocks+1)*i+j+1], ", "\n", "#                             interm[(n_upsample_blocks+1)*(i+1)+j]))", "\n", "\n", "# print('\\n\\n\\n')", "\n", "# for x in range(n_upsample_blocks+1):", "\n", "#     for y in range(n_upsample_blocks+1):", "\n", "#         print(interm[x*(n_upsample_blocks+1)+y], end=' ', flush=True)", "\n", "#     print('\\n')", "\n", "# print('\\n\\n\\n')", "\n", "#print(interm)", "\n", "\n", "", "", ""]], "home.repos.pwc.inspect_result.endo-angel_ct-angel.resnext.preprocessing.preprocess_input": [[4, 16], ["skimage.transform.resize"], "function", ["None"], ["\n", "\n", "from", "keras", ".", "applications", "import", "vgg16", "\n", "from", "keras", ".", "applications", "import", "vgg19", "\n", "from", "keras", ".", "applications", "import", "densenet", "\n", "from", "keras", ".", "applications", "import", "inception_v3", "\n", "from", "keras", ".", "applications", "import", "inception_resnet_v2", "\n", "\n", "identical", "=", "lambda", "x", ":", "x", "\n", "bgr_transpose", "=", "lambda", "x", ":", "x", "[", "...", ",", ":", ":", "-", "1", "]", "\n", "\n", "models_preprocessing", "=", "{", "\n", "'vgg16'", ":", "vgg16", ".", "preprocess_input", ",", "\n"]], "home.repos.pwc.inspect_result.endo-angel_ct-angel.tests.test_imagenet.get_top": [[101, 107], ["y.squeeze.squeeze", "list", "y.squeeze.argsort", "zip"], "function", ["None"], ["def", "get_top", "(", "y", ",", "top", "=", "5", ")", ":", "\n", "    ", "y", "=", "y", ".", "squeeze", "(", ")", "\n", "idx", "=", "y", ".", "argsort", "(", ")", "[", ":", ":", "-", "1", "]", "\n", "top_idx", "=", "idx", "[", ":", "top", "]", "\n", "top_pred", "=", "y", "[", "top_idx", "]", "\n", "return", "list", "(", "zip", "(", "top_idx", ",", "top_pred", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.endo-angel_ct-angel.tests.test_imagenet.is_equal": [[109, 121], ["range", "len", "numpy.allclose"], "function", ["None"], ["", "def", "is_equal", "(", "gt", ",", "pr", ",", "eps", "=", "10e-5", ")", ":", "\n", "\n", "    ", "for", "i", "in", "range", "(", "len", "(", "gt", ")", ")", ":", "\n", "        ", "idx_gt", ",", "prob_gt", "=", "gt", "[", "i", "]", "\n", "idx_pr", ",", "prob_pr", "=", "pr", "[", "i", "]", "\n", "\n", "if", "idx_gt", "!=", "idx_pr", ":", "\n", "            ", "return", "False", "\n", "\n", "", "if", "not", "np", ".", "allclose", "(", "prob_gt", ",", "prob_pr", ",", "atol", "=", "eps", ")", ":", "\n", "            ", "return", "False", "\n", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.endo-angel_ct-angel.tests.test_imagenet.test_model": [[123, 139], ["preprocessing_func", "numpy.expand_dims", "model.predict", "print", "test_imagenet.get_top", "test_imagenet.is_equal", "keras.applications.imagenet_utils.decode_predictions", "print", "print", "print", "print", "print"], "function", ["home.repos.pwc.inspect_result.endo-angel_ct-angel.tests.test_imagenet.get_top", "home.repos.pwc.inspect_result.endo-angel_ct-angel.tests.test_imagenet.is_equal"], ["", "def", "test_model", "(", "model", ",", "preprocessing_func", ",", "sample", ",", "ground_truth", ")", ":", "\n", "\n", "    ", "x", "=", "preprocessing_func", "(", "sample", ")", "\n", "x", "=", "np", ".", "expand_dims", "(", "x", ",", "0", ")", "\n", "y", "=", "model", ".", "predict", "(", "x", ")", "\n", "\n", "print", "(", "'[INFO]'", ",", "decode_predictions", "(", "y", ")", ")", "\n", "\n", "pred", "=", "get_top", "(", "y", ")", "\n", "if", "is_equal", "(", "pred", ",", "ground_truth", ")", ":", "\n", "        ", "print", "(", "'[INFO] Test passed...\\n'", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'[WARN] TEST FAILED...'", ")", "\n", "print", "(", "'[WARN] PREDICTION'", ",", "pred", ")", "\n", "print", "(", "'[WARN] GROUND TRUTH'", ",", "ground_truth", ")", "\n", "print", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.endo-angel_ct-angel.tests.test_imagenet.main": [[141, 158], ["skimage.io.imread", "print", "model.", "test_imagenet.test_model"], "function", ["home.repos.pwc.inspect_result.endo-angel_ct-angel.tests.test_imagenet.test_model"], ["", "", "def", "main", "(", ")", ":", "\n", "\n", "    ", "path", "=", "(", "'../imgs/tests/seagull.jpg'", ")", "\n", "img", "=", "imread", "(", "path", ")", "\n", "for", "model_type", "in", "models_zoo", ":", "\n", "        ", "for", "params", "in", "models_zoo", "[", "model_type", "]", "[", "'params'", "]", ":", "\n", "\n", "            ", "input_shape", "=", "params", "[", "'input_shape'", "]", "\n", "dataset", "=", "params", "[", "'dataset'", "]", "\n", "preprocessing_function", "=", "params", "[", "'preprocessing_function'", "]", "\n", "groud_truth", "=", "params", "[", "'ground_truth'", "]", "\n", "\n", "print", "(", "'[INFO] Loading model {} with weights {}....'", ".", "format", "(", "model_type", ",", "dataset", ")", ")", "\n", "model", "=", "models_zoo", "[", "model_type", "]", "[", "'model'", "]", "\n", "model", "=", "model", "(", "input_shape", ",", "weights", "=", "dataset", ",", "classes", "=", "1000", ")", "\n", "\n", "test_model", "(", "model", ",", "preprocessing_function", ",", "img", ",", "groud_truth", ")", "\n", "\n"]]}