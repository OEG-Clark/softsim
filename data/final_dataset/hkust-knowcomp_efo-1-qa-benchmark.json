{"home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.None.data_helper.Task.__init__": [[21, 33], ["data_helper.Task._load", "numpy.random.permutation", "len"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.None.data_helper.BenchmarkFormManager._load"], ["    ", "def", "__init__", "(", "self", ",", "filename", ",", "task_betaname", ")", ":", "\n", "        ", "self", ".", "filename", "=", "filename", "\n", "self", ".", "device", "=", "None", "\n", "self", ".", "query_instance", "=", "None", "\n", "self", ".", "beta_name", "=", "task_betaname", "\n", "self", ".", "answer_set", "=", "None", "\n", "self", ".", "easy_answer_set", "=", "None", "\n", "self", ".", "hard_answer_set", "=", "None", "\n", "self", ".", "i", "=", "0", "\n", "self", ".", "length", "=", "0", "\n", "self", ".", "_load", "(", ")", "\n", "self", ".", "idxlist", "=", "np", ".", "random", ".", "permutation", "(", "len", "(", "self", ")", ")", "\n", "# self.idxlist = np.arange(len(self))", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.None.data_helper.Task.to": [[35, 38], ["data_helper.Task.query_instance.to"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.to"], ["", "def", "to", "(", "self", ",", "device", ")", ":", "\n", "        ", "self", ".", "query_instance", ".", "to", "(", "device", ")", "\n", "self", ".", "device", "=", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.None.data_helper.Task._load": [[39, 63], ["data_helper.Task.filename.replace().replace", "os.path.exists", "print", "pandas.read_csv", "fol.parse_formula", "data_helper.Task._parse", "data_helper.Task.filename.replace", "open", "pickle.load", "len", "os.makedirs", "print", "os.path.dirname", "open", "pickle.dump", "print"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.parse_formula", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.None.data_helper.Task._parse"], ["", "def", "_load", "(", "self", ")", ":", "\n", "        ", "dense", "=", "self", ".", "filename", ".", "replace", "(", "'data'", ",", "'tmp'", ")", ".", "replace", "(", "'csv'", ",", "'pickle'", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "dense", ")", ":", "\n", "            ", "print", "(", "\"load from existed files\"", ")", "\n", "with", "open", "(", "dense", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "data", "=", "pickle", ".", "load", "(", "f", ")", "\n", "self", ".", "query_instance", "=", "data", "[", "'query_instance'", "]", "\n", "self", ".", "answer_set", "=", "data", "[", "'answer_set'", "]", "\n", "self", ".", "easy_answer_set", "=", "data", "[", "'easy_answer_set'", "]", "\n", "self", ".", "hard_answer_set", "=", "data", "[", "'hard_answer_set'", "]", "\n", "self", ".", "length", "=", "len", "(", "self", ".", "query_instance", ")", "\n", "", "", "else", ":", "\n", "            ", "df", "=", "pd", ".", "read_csv", "(", "self", ".", "filename", ")", "\n", "self", ".", "query_instance", "=", "parse_formula", "(", "beta_query_v2", "[", "self", ".", "beta_name", "]", ")", "\n", "self", ".", "_parse", "(", "df", ")", "\n", "data", "=", "{", "'query_instance'", ":", "self", ".", "query_instance", ",", "'answer_set'", ":", "self", ".", "answer_set", ",", "\n", "'easy_answer_set'", ":", "self", ".", "easy_answer_set", ",", "'hard_answer_set'", ":", "self", ".", "hard_answer_set", "}", "\n", "try", ":", "\n", "                ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "dense", ")", ",", "exist_ok", "=", "True", ")", "\n", "print", "(", "f\"save to {dense}\"", ")", "\n", "with", "open", "(", "dense", ",", "'wb'", ")", "as", "f", ":", "\n", "                    ", "pickle", ".", "dump", "(", "data", ",", "f", ")", "\n", "", "", "except", ":", "\n", "                ", "print", "(", "f\"can't save to {dense}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.None.data_helper.Task.__len__": [[64, 66], ["None"], "methods", ["None"], ["", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.None.data_helper.Task.setup_iteration": [[67, 69], ["numpy.random.permutation", "len"], "methods", ["None"], ["", "def", "setup_iteration", "(", "self", ")", ":", "\n", "        ", "self", ".", "idxlist", "=", "np", ".", "random", ".", "permutation", "(", "len", "(", "self", ")", ")", "\n", "# self.idxlist = np.arange(len(self))", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.None.data_helper.Task.batch_estimation_iterator": [[71, 81], ["len", "data_helper.Task.idxlist[].tolist", "data_helper.Task.query_instance.embedding_estimation"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.embedding_estimation"], ["", "def", "batch_estimation_iterator", "(", "self", ",", "estimator", ",", "batch_size", ")", ":", "\n", "        ", "assert", "self", ".", "device", "==", "estimator", ".", "device", "\n", "i", "=", "0", "\n", "while", "i", "<", "len", "(", "self", ")", ":", "\n", "            ", "batch_indices", "=", "self", ".", "idxlist", "[", "i", ":", "i", "+", "batch_size", "]", ".", "tolist", "(", ")", "\n", "i", "+=", "batch_size", "\n", "batch_embedding", "=", "self", ".", "query_instance", ".", "embedding_estimation", "(", "\n", "estimator", "=", "estimator", ",", "\n", "batch_indices", "=", "batch_indices", ")", "\n", "yield", "batch_embedding", ",", "batch_indices", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.None.data_helper.Task._parse": [[82, 101], ["tqdm.tqdm.tqdm", "len", "data_helper.Task.query_instance.additive_ground", "df.answer_set.map().tolist", "df.easy_answer_set.map().tolist", "df.hard_answer_set.map().tolist", "json.loads", "len", "len", "len", "len", "len", "len", "df.answer_set.map", "df.easy_answer_set.map", "df.hard_answer_set.map", "list", "list", "list", "eval", "eval", "eval"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.additive_ground"], ["", "", "def", "_parse", "(", "self", ",", "df", ")", ":", "\n", "        ", "for", "q", "in", "tqdm", "(", "df", "[", "'query'", "]", ")", ":", "\n", "            ", "self", ".", "query_instance", ".", "additive_ground", "(", "json", ".", "loads", "(", "q", ")", ")", "\n", "\n", "", "if", "'answer_set'", "in", "df", ".", "columns", ":", "\n", "            ", "self", ".", "answer_set", "=", "df", ".", "answer_set", ".", "map", "(", "lambda", "x", ":", "list", "(", "eval", "(", "x", ")", ")", ")", ".", "tolist", "(", ")", "\n", "assert", "len", "(", "self", ".", "query_instance", ")", "==", "len", "(", "self", ".", "answer_set", ")", "\n", "\n", "", "if", "'easy_answer_set'", "in", "df", ".", "columns", ":", "\n", "            ", "self", ".", "easy_answer_set", "=", "df", ".", "easy_answer_set", ".", "map", "(", "\n", "lambda", "x", ":", "list", "(", "eval", "(", "x", ")", ")", ")", ".", "tolist", "(", ")", "\n", "assert", "len", "(", "self", ".", "query_instance", ")", "==", "len", "(", "self", ".", "easy_answer_set", ")", "\n", "\n", "", "if", "'hard_answer_set'", "in", "df", ".", "columns", ":", "\n", "            ", "self", ".", "hard_answer_set", "=", "df", ".", "hard_answer_set", ".", "map", "(", "\n", "lambda", "x", ":", "list", "(", "eval", "(", "x", ")", ")", ")", ".", "tolist", "(", ")", "\n", "assert", "len", "(", "self", ".", "query_instance", ")", "==", "len", "(", "self", ".", "hard_answer_set", ")", "\n", "\n", "", "self", ".", "length", "=", "len", "(", "self", ".", "query_instance", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.None.data_helper.TaskManager.__init__": [[104, 114], ["numpy.asarray", "data_helper.TaskManager.tasks[].to", "partition.append", "numpy.asarray.sum", "len"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.to"], ["    ", "def", "__init__", "(", "self", ",", "mode", ",", "tasks", ":", "List", "[", "Task", "]", ",", "device", ")", ":", "\n", "        ", "self", ".", "tasks", "=", "{", "t", ".", "query_instance", ".", "formula", ":", "t", "for", "t", "in", "tasks", "}", "\n", "self", ".", "task_iterators", "=", "{", "}", "\n", "self", ".", "mode", "=", "mode", "\n", "partition", "=", "[", "]", "\n", "for", "t", "in", "self", ".", "tasks", ":", "\n", "            ", "self", ".", "tasks", "[", "t", "]", ".", "to", "(", "device", ")", "\n", "partition", ".", "append", "(", "len", "(", "self", ".", "tasks", "[", "t", "]", ")", ")", "\n", "", "p", "=", "np", ".", "asarray", "(", "partition", ")", "\n", "self", ".", "partition", "=", "p", "/", "p", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.None.data_helper.TaskManager.build_iterators": [[115, 147], ["enumerate", "data_helper.TaskManager.tasks[].setup_iteration", "data_helper.TaskManager.tasks[].batch_estimation_iterator", "collections.defaultdict", "int", "len", "next"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.None.data_helper.BenchmarkTask.setup_iteration", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.None.data_helper.BenchmarkTask.batch_estimation_iterator"], ["", "def", "build_iterators", "(", "self", ",", "estimator", ",", "batch_size", ")", ":", "\n", "        ", "self", ".", "task_iterators", "=", "{", "}", "\n", "for", "i", ",", "tmf", "in", "enumerate", "(", "self", ".", "tasks", ")", ":", "\n", "            ", "self", ".", "tasks", "[", "tmf", "]", ".", "setup_iteration", "(", ")", "\n", "self", ".", "task_iterators", "[", "tmf", "]", "=", "self", ".", "tasks", "[", "tmf", "]", ".", "batch_estimation_iterator", "(", "\n", "estimator", ",", "\n", "int", "(", "batch_size", "*", "self", ".", "partition", "[", "i", "]", ")", ")", "\n", "\n", "", "while", "True", ":", "\n", "            ", "finish", "=", "0", "\n", "data", "=", "defaultdict", "(", "dict", ")", "\n", "for", "tmf", "in", "self", ".", "task_iterators", ":", "\n", "                ", "try", ":", "\n", "                    ", "emb", ",", "batch_id", "=", "next", "(", "self", ".", "task_iterators", "[", "tmf", "]", ")", "\n", "data", "[", "tmf", "]", "[", "'emb'", "]", "=", "emb", "\n", "if", "self", ".", "mode", "==", "'train'", ":", "\n", "                        ", "ans_sets", "=", "[", "self", ".", "tasks", "[", "tmf", "]", ".", "answer_set", "[", "j", "]", "for", "j", "in", "batch_id", "]", "\n", "data", "[", "tmf", "]", "[", "'answer_set'", "]", "=", "ans_sets", "\n", "", "else", ":", "\n", "                        ", "easy_ans_sets", "=", "[", "self", ".", "tasks", "[", "tmf", "]", ".", "easy_answer_set", "[", "j", "]", "for", "j", "in", "batch_id", "]", "\n", "data", "[", "tmf", "]", "[", "'easy_answer_set'", "]", "=", "easy_ans_sets", "\n", "hard_ans_sets", "=", "[", "self", ".", "tasks", "[", "tmf", "]", ".", "hard_answer_set", "[", "j", "]", "for", "j", "in", "batch_id", "]", "\n", "data", "[", "tmf", "]", "[", "'hard_answer_set'", "]", "=", "hard_ans_sets", "\n", "\n", "", "", "except", "StopIteration", ":", "\n", "                    ", "finish", "+=", "1", "\n", "\n", "", "", "if", "finish", "==", "len", "(", "self", ".", "tasks", ")", ":", "\n", "                ", "break", "\n", "\n", "", "yield", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.None.data_helper.TestDataset.__init__": [[150, 154], ["len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "flattened_queries", ")", ":", "\n", "# flattened_queries is a list of (query, easy_ans_set, hard_ans_set, query_structure) list", "\n", "        ", "self", ".", "len", "=", "len", "(", "flattened_queries", ")", "\n", "self", ".", "flattened_queries", "=", "flattened_queries", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.None.data_helper.TestDataset.__len__": [[155, 157], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "len", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.None.data_helper.TestDataset.__getitem__": [[158, 160], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "flattened_queries", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.None.data_helper.TestDataset.collate_fn": [[161, 168], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "collate_fn", "(", "flattened_queries", ")", ":", "\n", "        ", "query", "=", "[", "_", "[", "0", "]", "for", "_", "in", "flattened_queries", "]", "\n", "easy_ans_set", "=", "[", "_", "[", "1", "]", "for", "_", "in", "flattened_queries", "]", "\n", "hard_ans_set", "=", "[", "_", "[", "2", "]", "for", "_", "in", "flattened_queries", "]", "\n", "beta_name", "=", "[", "_", "[", "3", "]", "for", "_", "in", "flattened_queries", "]", "\n", "return", "query", ",", "easy_ans_set", ",", "hard_ans_set", ",", "beta_name", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.None.data_helper.MyDataIterator.__init__": [[171, 173], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "tasks", ")", "->", "None", ":", "\n", "        ", "self", ".", "tasks", "=", "tasks", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.None.data_helper.TrainDataset.__init__": [[176, 180], ["len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "flattened_queries", ")", ":", "\n", "# flattened_queries is a list of (query, ans_set, query_structure) list", "\n", "        ", "self", ".", "len", "=", "len", "(", "flattened_queries", ")", "\n", "self", ".", "flattened_queries", "=", "flattened_queries", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.None.data_helper.TrainDataset.__len__": [[181, 183], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "len", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.None.data_helper.TrainDataset.__getitem__": [[184, 186], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "flattened_queries", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.None.data_helper.TrainDataset.collate_fn": [[187, 193], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "collate_fn", "(", "flattened_queries", ")", ":", "\n", "        ", "query", "=", "[", "_", "[", "0", "]", "for", "_", "in", "flattened_queries", "]", "\n", "ans_set", "=", "[", "_", "[", "1", "]", "for", "_", "in", "flattened_queries", "]", "\n", "beta_name", "=", "[", "_", "[", "2", "]", "for", "_", "in", "flattened_queries", "]", "\n", "return", "query", ",", "ans_set", ",", "beta_name", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.None.data_helper.BenchmarkFormManager.__init__": [[196, 211], ["print", "data_helper.BenchmarkFormManager._load", "set", "set", "data_helper.BenchmarkFormManager.all_formula.add", "data_helper.BenchmarkFormManager.tasks[].set_up", "len", "range", "len"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.None.data_helper.BenchmarkFormManager._load", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.None.data_helper.BenchmarkTask.set_up"], ["    ", "def", "__init__", "(", "self", ",", "mode", ",", "query_inform_dict", ":", "dict", ",", "filename", ":", "str", ",", "device", ",", "model", ")", ":", "# type_str: type0001", "\n", "        ", "self", ".", "mode", "=", "mode", "\n", "self", ".", "query_inform_dict", "=", "query_inform_dict", "\n", "self", ".", "tasks", ",", "self", ".", "form2formula", "=", "{", "}", ",", "{", "}", "\n", "self", ".", "all_formula", ",", "self", ".", "allowed_formula", "=", "set", "(", ")", ",", "set", "(", ")", "\n", "for", "normal_form", "in", "all_normal_form", ":", "\n", "            ", "formula", "=", "query_inform_dict", "[", "normal_form", "]", "\n", "self", ".", "form2formula", "[", "normal_form", "]", "=", "formula", "\n", "self", ".", "all_formula", ".", "add", "(", "formula", ")", "\n", "", "print", "(", "f'[data] load query from file {filename}'", ")", "\n", "self", ".", "_load", "(", "filename", ",", "model", ")", "\n", "self", ".", "task_iterators", "=", "{", "}", "\n", "for", "t", "in", "self", ".", "tasks", ":", "\n", "            ", "self", ".", "tasks", "[", "t", "]", ".", "set_up", "(", "device", ",", "self", ".", "len", ")", "\n", "", "self", ".", "partition", "=", "[", "1", "/", "len", "(", "self", ".", "tasks", ")", "for", "i", "in", "range", "(", "len", "(", "self", ".", "tasks", ")", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.None.data_helper.BenchmarkFormManager._load": [[212, 291], ["filename.replace().replace", "os.path.exists", "print", "pandas.read_csv", "len", "filename.replace", "open", "pickle.load", "os.makedirs", "print", "len", "len", "pandas.read_csv.answer_set.map().tolist", "fol.parse_formula", "fol.parse_formula.to", "os.path.dirname", "open", "pickle.dump", "print", "fol.parse_formula.to", "fol.parse_formula.embedding_estimation", "data_helper.BenchmarkFormManager.allowed_formula.add", "data_helper.BenchmarkTask", "len", "fol.parse_formula.additive_ground", "fol.parse_formula.embedding_estimation", "data_helper.BenchmarkFormManager.allowed_formula.add", "data_helper.BenchmarkTask", "pandas.read_csv.answer_set.map", "pandas.read_csv.easy_answer_set.map().tolist", "pandas.read_csv.easy_answers.map().tolist", "len", "pandas.read_csv.hard_answer_set.map().tolist", "pandas.read_csv.hard_answers.map().tolist", "len", "json.loads", "list", "pandas.read_csv.easy_answer_set.map", "pandas.read_csv.easy_answers.map", "pandas.read_csv.hard_answer_set.map", "pandas.read_csv.hard_answers.map", "eval", "list", "list", "list", "list", "eval", "eval", "eval", "eval"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.parse_formula", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.to", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.to", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.embedding_estimation", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.additive_ground", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.embedding_estimation"], ["", "def", "_load", "(", "self", ",", "filename", ",", "model", ")", ":", "\n", "        ", "dense", "=", "filename", ".", "replace", "(", "'data'", ",", "'tmp'", ")", ".", "replace", "(", "'csv'", ",", "'pickle'", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "dense", ")", ":", "\n", "            ", "print", "(", "\"load from existed files\"", ")", "\n", "with", "open", "(", "dense", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "data", "=", "pickle", ".", "load", "(", "f", ")", "\n", "if", "self", ".", "mode", "==", "'train'", ":", "\n", "                    ", "self", ".", "answer_set", "=", "data", "[", "'answer_set'", "]", "\n", "self", ".", "len", "=", "len", "(", "self", ".", "answer_set", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "easy_answer_set", "=", "data", "[", "'easy_answer_set'", "]", "\n", "self", ".", "hard_answer_set", "=", "data", "[", "'hard_answer_set'", "]", "\n", "self", ".", "len", "=", "len", "(", "self", ".", "easy_answer_set", ")", "\n", "", "for", "formula", "in", "self", ".", "all_formula", ":", "\n", "                    ", "query_instance", "=", "data", "[", "formula", "]", "\n", "try", ":", "\n", "                        ", "query_instance", ".", "to", "(", "model", ".", "device", ")", "\n", "pred_emb", "=", "query_instance", ".", "embedding_estimation", "(", "estimator", "=", "model", ",", "batch_indices", "=", "[", "0", ",", "1", ",", "2", ",", "3", "]", ")", "\n", "assert", "pred_emb", ".", "ndim", "==", "2", "+", "(", "'u'", "in", "formula", "or", "'U'", "in", "formula", ")", "\n", "self", ".", "allowed_formula", ".", "add", "(", "formula", ")", "\n", "", "except", "(", "AssertionError", ",", "RuntimeError", ")", ":", "\n", "                        ", "pass", "\n", "", "if", "formula", "in", "self", ".", "allowed_formula", ":", "\n", "                        ", "self", ".", "tasks", "[", "formula", "]", "=", "BenchmarkTask", "(", "data", "[", "formula", "]", ")", "\n", "", "assert", "len", "(", "data", "[", "formula", "]", ")", "==", "self", ".", "len", "\n", "", "", "", "else", ":", "\n", "            ", "df", "=", "pd", ".", "read_csv", "(", "filename", ")", "\n", "self", ".", "len", "=", "len", "(", "df", ")", "\n", "loaded", "=", "{", "formula", ":", "False", "for", "formula", "in", "self", ".", "all_formula", "}", "\n", "data", "=", "{", "}", "\n", "# todo: 'easy_answers' all change to easy_answer_set, and so does hard answers", "\n", "if", "self", ".", "mode", "==", "'train'", ":", "\n", "                ", "if", "'answer_set'", "in", "df", ".", "columns", ":", "\n", "                    ", "self", ".", "answer_set", "=", "df", ".", "answer_set", ".", "map", "(", "lambda", "x", ":", "list", "(", "eval", "(", "x", ")", ")", ")", ".", "tolist", "(", ")", "\n", "data", "=", "{", "'answer_set'", ":", "self", ".", "answer_set", "}", "\n", "", "", "elif", "self", ".", "mode", "==", "'valid'", "or", "self", ".", "mode", "==", "'test'", ":", "\n", "                ", "if", "'easy_answers'", "in", "df", ".", "columns", "or", "'easy_answer_set'", "in", "df", ".", "columns", ":", "\n", "                    ", "if", "'easy_answer_set'", "in", "df", ".", "columns", ":", "\n", "                        ", "self", ".", "easy_answer_set", "=", "df", ".", "easy_answer_set", ".", "map", "(", "\n", "lambda", "x", ":", "list", "(", "eval", "(", "x", ")", ")", ")", ".", "tolist", "(", ")", "\n", "", "else", ":", "\n", "                        ", "self", ".", "easy_answer_set", "=", "df", ".", "easy_answers", ".", "map", "(", "\n", "lambda", "x", ":", "list", "(", "eval", "(", "x", ")", ")", ")", ".", "tolist", "(", ")", "\n", "", "assert", "self", ".", "len", "==", "len", "(", "self", ".", "easy_answer_set", ")", "\n", "", "if", "'hard_answers'", "in", "df", ".", "columns", "or", "'hard_answer_set'", "in", "df", ".", "columns", ":", "\n", "                    ", "if", "'hard_answer_set'", "in", "df", ".", "columns", ":", "\n", "                        ", "self", ".", "hard_answer_set", "=", "df", ".", "hard_answer_set", ".", "map", "(", "\n", "lambda", "x", ":", "list", "(", "eval", "(", "x", ")", ")", ")", ".", "tolist", "(", ")", "\n", "", "else", ":", "\n", "                        ", "self", ".", "hard_answer_set", "=", "df", ".", "hard_answers", ".", "map", "(", "\n", "lambda", "x", ":", "list", "(", "eval", "(", "x", ")", ")", ")", ".", "tolist", "(", ")", "\n", "", "assert", "self", ".", "len", "==", "len", "(", "self", ".", "hard_answer_set", ")", "\n", "data", "=", "{", "'easy_answer_set'", ":", "self", ".", "easy_answer_set", ",", "'hard_answer_set'", ":", "self", ".", "hard_answer_set", "}", "\n", "", "", "else", ":", "\n", "                ", "assert", "False", ",", "'not valid mode!'", "\n", "", "for", "normal_form", "in", "all_normal_form", ":", "\n", "                ", "formula", "=", "self", ".", "form2formula", "[", "normal_form", "]", "\n", "if", "not", "loaded", "[", "formula", "]", ":", "\n", "                    ", "query_instance", "=", "parse_formula", "(", "formula", ")", "\n", "for", "q", "in", "df", "[", "normal_form", "]", ":", "\n", "                        ", "query_instance", ".", "additive_ground", "(", "json", ".", "loads", "(", "q", ")", ")", "\n", "", "data", "[", "formula", "]", "=", "query_instance", "\n", "query_instance", ".", "to", "(", "model", ".", "device", ")", "\n", "try", ":", "\n", "                        ", "pred_emb", "=", "query_instance", ".", "embedding_estimation", "(", "estimator", "=", "model", ",", "batch_indices", "=", "[", "0", ",", "1", ",", "2", ",", "3", "]", ")", "\n", "assert", "pred_emb", ".", "ndim", "==", "2", "+", "(", "'u'", "in", "formula", "or", "'U'", "in", "formula", ")", "\n", "self", ".", "allowed_formula", ".", "add", "(", "formula", ")", "\n", "", "except", "(", "AssertionError", ",", "RuntimeError", ")", ":", "\n", "                        ", "pass", "\n", "", "if", "formula", "in", "self", ".", "allowed_formula", ":", "\n", "                        ", "self", ".", "tasks", "[", "formula", "]", "=", "BenchmarkTask", "(", "query_instance", ")", "\n", "", "loaded", "[", "formula", "]", "=", "True", "\n", "", "", "try", ":", "\n", "                ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "dense", ")", ",", "exist_ok", "=", "True", ")", "\n", "print", "(", "f\"save to {dense}\"", ")", "\n", "with", "open", "(", "dense", ",", "'wb'", ")", "as", "f", ":", "\n", "                    ", "pickle", ".", "dump", "(", "data", ",", "f", ")", "\n", "", "", "except", ":", "\n", "                ", "print", "(", "f\"can't save to {dense}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.None.data_helper.BenchmarkFormManager.build_iterators": [[292, 319], ["enumerate", "data_helper.BenchmarkFormManager.tasks[].batch_estimation_iterator", "collections.defaultdict", "int", "len", "next"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.None.data_helper.BenchmarkTask.batch_estimation_iterator"], ["", "", "", "def", "build_iterators", "(", "self", ",", "estimator", ",", "batch_size", ")", ":", "\n", "        ", "self", ".", "task_iterators", "=", "{", "}", "\n", "for", "i", ",", "tmf", "in", "enumerate", "(", "self", ".", "tasks", ")", ":", "\n", "            ", "self", ".", "task_iterators", "[", "tmf", "]", "=", "self", ".", "tasks", "[", "tmf", "]", ".", "batch_estimation_iterator", "(", "\n", "estimator", ",", "\n", "int", "(", "batch_size", "*", "self", ".", "partition", "[", "i", "]", ")", ")", "\n", "\n", "", "while", "True", ":", "\n", "            ", "finish", "=", "0", "\n", "data", "=", "defaultdict", "(", "dict", ")", "\n", "for", "tmf", "in", "self", ".", "task_iterators", ":", "\n", "                ", "try", ":", "\n", "                    ", "emb", ",", "batch_id", "=", "next", "(", "self", ".", "task_iterators", "[", "tmf", "]", ")", "\n", "data", "[", "tmf", "]", "[", "'emb'", "]", "=", "emb", "\n", "easy_ans_sets", "=", "[", "self", ".", "easy_answer_set", "[", "j", "]", "for", "j", "in", "batch_id", "]", "\n", "data", "[", "tmf", "]", "[", "'easy_answer_set'", "]", "=", "easy_ans_sets", "\n", "hard_ans_sets", "=", "[", "self", ".", "hard_answer_set", "[", "j", "]", "for", "j", "in", "batch_id", "]", "\n", "data", "[", "tmf", "]", "[", "'hard_answer_set'", "]", "=", "hard_ans_sets", "\n", "\n", "", "except", "StopIteration", ":", "\n", "                    ", "finish", "+=", "1", "\n", "\n", "", "", "if", "finish", "==", "len", "(", "self", ".", "tasks", ")", ":", "\n", "                ", "break", "\n", "\n", "", "yield", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.None.data_helper.BenchmarkTask.__init__": [[322, 331], ["numpy.arange", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "query_instance", ")", ":", "\n", "        ", "self", ".", "query_instance", "=", "query_instance", "\n", "self", ".", "device", "=", "None", "\n", "self", ".", "answer_set", "=", "None", "\n", "self", ".", "easy_answer_set", "=", "None", "\n", "self", ".", "hard_answer_set", "=", "None", "\n", "self", ".", "i", "=", "0", "\n", "self", ".", "length", "=", "0", "\n", "self", ".", "idxlist", "=", "np", ".", "arange", "(", "len", "(", "self", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.None.data_helper.BenchmarkTask.set_up": [[332, 337], ["data_helper.BenchmarkTask.query_instance.to", "numpy.arange", "len"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.to"], ["", "def", "set_up", "(", "self", ",", "device", ",", "length", ")", ":", "\n", "        ", "self", ".", "length", "=", "length", "\n", "self", ".", "query_instance", ".", "to", "(", "device", ")", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "idxlist", "=", "np", ".", "arange", "(", "len", "(", "self", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.None.data_helper.BenchmarkTask.setup_iteration": [[338, 340], ["numpy.random.permutation", "len"], "methods", ["None"], ["", "def", "setup_iteration", "(", "self", ")", ":", "\n", "        ", "self", ".", "idxlist", "=", "np", ".", "random", ".", "permutation", "(", "len", "(", "self", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.None.data_helper.BenchmarkTask.__len__": [[341, 343], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.None.data_helper.BenchmarkTask.batch_estimation_iterator": [[344, 354], ["len", "data_helper.BenchmarkTask.idxlist[].tolist", "data_helper.BenchmarkTask.query_instance.embedding_estimation"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.embedding_estimation"], ["", "def", "batch_estimation_iterator", "(", "self", ",", "estimator", ",", "batch_size", ")", ":", "\n", "        ", "assert", "self", ".", "device", "==", "estimator", ".", "device", "\n", "i", "=", "0", "\n", "while", "i", "<", "len", "(", "self", ")", ":", "\n", "            ", "batch_indices", "=", "self", ".", "idxlist", "[", "i", ":", "i", "+", "batch_size", "]", ".", "tolist", "(", ")", "\n", "i", "+=", "batch_size", "\n", "batch_embedding", "=", "self", ".", "query_instance", ".", "embedding_estimation", "(", "\n", "estimator", "=", "estimator", ",", "\n", "batch_indices", "=", "batch_indices", ")", "\n", "yield", "batch_embedding", ",", "batch_indices", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.None.data_helper.BenchmarkWholeManager.__init__": [[357, 385], ["enumerate", "os.path.join", "data_helper.BenchmarkFormManager", "set", "set.intersection", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "mode", ",", "formula_id_data", ",", "data_folder", ":", "str", ",", "interested_normal_form", ":", "list", ",", "device", ",", "model", ")", ":", "\n", "        ", "self", ".", "mode", "=", "mode", "\n", "self", ".", "formula_id_data", "=", "formula_id_data", "\n", "self", ".", "query_classes", "=", "{", "}", "\n", "self", ".", "partition", "=", "{", "}", "\n", "self", ".", "task_iterators", "=", "{", "}", "\n", "self", ".", "formula_to_type_str", "=", "{", "}", "\n", "self", ".", "all_task_length", "=", "0", "\n", "self", ".", "interested_normal_form", "=", "interested_normal_form", "\n", "for", "i", "in", "formula_id_data", ".", "index", ":", "\n", "            ", "type_str", "=", "formula_id_data", "[", "'formula_id'", "]", "[", "i", "]", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "data_folder", ",", "f'{mode}-{type_str}.csv'", ")", "\n", "# real_index = formula_id_data.loc[formula_id_data['formula_id'] == f'{type_str}'].index[0]", "\n", "# index != formula id", "\n", "query_class_dict", "=", "formula_id_data", ".", "loc", "[", "i", "]", "\n", "self", ".", "query_classes", "[", "type_str", "]", "=", "BenchmarkFormManager", "(", "mode", ",", "query_class_dict", ",", "filename", ",", "device", ",", "model", ")", "\n", "\n", "# all types of queries are sampled together", "\n", "", "for", "i", ",", "type_str", "in", "enumerate", "(", "self", ".", "query_classes", ")", ":", "\n", "            ", "interested_formulas", "=", "set", "(", "[", "self", ".", "query_classes", "[", "type_str", "]", ".", "form2formula", "[", "form", "]", "for", "form", "in", "\n", "self", ".", "interested_normal_form", "]", ")", "\n", "final_allowed_formulas", "=", "interested_formulas", ".", "intersection", "(", "self", ".", "query_classes", "[", "type_str", "]", ".", "allowed_formula", ")", "\n", "for", "specific_formula", "in", "final_allowed_formulas", ":", "\n", "                ", "self", ".", "formula_to_type_str", "[", "specific_formula", "]", "=", "type_str", "\n", "self", ".", "partition", "[", "specific_formula", "]", "=", "len", "(", "self", ".", "query_classes", "[", "type_str", "]", ".", "tasks", "[", "specific_formula", "]", ")", "\n", "self", ".", "all_task_length", "+=", "self", ".", "partition", "[", "specific_formula", "]", "\n", "", "", "for", "specific_formula", "in", "self", ".", "formula_to_type_str", ":", "\n", "            ", "self", ".", "partition", "[", "specific_formula", "]", "/=", "self", ".", "all_task_length", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.None.data_helper.BenchmarkWholeManager.build_iterators": [[386, 418], ["data_helper.BenchmarkWholeManager.query_classes[].tasks[].setup_iteration", "data_helper.BenchmarkWholeManager.query_classes[].tasks[].batch_estimation_iterator", "collections.defaultdict", "int", "len", "next"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.None.data_helper.BenchmarkTask.setup_iteration", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.None.data_helper.BenchmarkTask.batch_estimation_iterator"], ["", "", "def", "build_iterators", "(", "self", ",", "estimator", ",", "batch_size", ")", ":", "\n", "        ", "self", ".", "task_iterators", "=", "{", "}", "\n", "for", "specific_formula", "in", "self", ".", "formula_to_type_str", ":", "\n", "            ", "self", ".", "query_classes", "[", "self", ".", "formula_to_type_str", "[", "specific_formula", "]", "]", ".", "tasks", "[", "specific_formula", "]", ".", "setup_iteration", "(", ")", "\n", "self", ".", "task_iterators", "[", "specific_formula", "]", "=", "self", ".", "query_classes", "[", "self", ".", "formula_to_type_str", "[", "specific_formula", "]", "]", ".", "tasks", "[", "specific_formula", "]", ".", "batch_estimation_iterator", "(", "estimator", ",", "int", "(", "batch_size", "*", "self", ".", "partition", "[", "specific_formula", "]", ")", ")", "\n", "", "while", "True", ":", "\n", "            ", "finish", "=", "0", "\n", "data", "=", "defaultdict", "(", "dict", ")", "\n", "for", "task_formula", "in", "self", ".", "task_iterators", ":", "\n", "                ", "try", ":", "\n", "                    ", "emb", ",", "batch_id", "=", "next", "(", "self", ".", "task_iterators", "[", "task_formula", "]", ")", "\n", "data", "[", "task_formula", "]", "[", "'emb'", "]", "=", "emb", "\n", "if", "self", ".", "mode", "==", "'train'", ":", "\n", "                        ", "ans_sets", "=", "[", "self", ".", "query_classes", "[", "self", ".", "formula_to_type_str", "[", "task_formula", "]", "]", ".", "answer_set", "[", "j", "]", "\n", "for", "j", "in", "batch_id", "]", "\n", "data", "[", "task_formula", "]", "[", "'answer_set'", "]", "=", "ans_sets", "\n", "", "else", ":", "\n", "                        ", "easy_ans_sets", "=", "[", "self", ".", "query_classes", "[", "self", ".", "formula_to_type_str", "[", "task_formula", "]", "]", ".", "easy_answer_set", "[", "j", "]", "\n", "for", "j", "in", "batch_id", "]", "\n", "data", "[", "task_formula", "]", "[", "'easy_answer_set'", "]", "=", "easy_ans_sets", "\n", "hard_ans_sets", "=", "[", "self", ".", "query_classes", "[", "self", ".", "formula_to_type_str", "[", "task_formula", "]", "]", ".", "hard_answer_set", "[", "j", "]", "\n", "for", "j", "in", "batch_id", "]", "\n", "data", "[", "task_formula", "]", "[", "'hard_answer_set'", "]", "=", "hard_ans_sets", "\n", "", "", "except", "StopIteration", ":", "\n", "                    ", "finish", "+=", "1", "\n", "\n", "", "", "if", "finish", "==", "len", "(", "self", ".", "formula_to_type_str", ")", ":", "\n", "                ", "break", "\n", "\n", "", "yield", "data", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.None.main.train_step": [[22, 58], ["opt.zero_grad", "next", "torch.cat", "model.criterion", "range", "fol.appfoq.compute_final_loss", "loss.backward", "opt.step", "len", "model.criterion", "torch.cat", "torch.cat", "torch.cat", "positive_loss.item", "negative_loss.item", "loss.item", "union_emb_list.append", "union_answer_list.append", "emb_list.append", "answer_list.extend", "fol.order_bounds", "torch.clamp"], "function", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.BoxEstimator.criterion", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.appfoq.compute_final_loss", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.BoxEstimator.criterion", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_logic.order_bounds"], ["def", "train_step", "(", "model", ",", "opt", ",", "iterator", ")", ":", "\n", "    ", "opt", ".", "zero_grad", "(", ")", "\n", "data", "=", "next", "(", "iterator", ")", "\n", "emb_list", ",", "answer_list", "=", "[", "]", ",", "[", "]", "\n", "union_emb_list", ",", "union_answer_list", "=", "[", "]", ",", "[", "]", "\n", "for", "formula", "in", "data", ":", "\n", "        ", "if", "'u'", "in", "formula", "or", "'U'", "in", "formula", ":", "# TODO: consider 'evaluate_union' in the future", "\n", "            ", "union_emb_list", ".", "append", "(", "data", "[", "formula", "]", "[", "'emb'", "]", ")", "\n", "union_answer_list", ".", "append", "(", "data", "[", "formula", "]", "[", "'answer_set'", "]", ")", "\n", "", "else", ":", "\n", "            ", "emb_list", ".", "append", "(", "data", "[", "formula", "]", "[", "'emb'", "]", ")", "\n", "answer_list", ".", "extend", "(", "data", "[", "formula", "]", "[", "'answer_set'", "]", ")", "\n", "", "", "pred_embedding", "=", "torch", ".", "cat", "(", "emb_list", ",", "dim", "=", "0", ")", "\n", "all_positive_logit", ",", "all_negative_logit", ",", "all_subsampling_weight", "=", "model", ".", "criterion", "(", "pred_embedding", ",", "answer_list", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "union_emb_list", ")", ")", ":", "\n", "        ", "union_positive_logit", ",", "union_negative_logit", ",", "union_subsampling_weight", "=", "model", ".", "criterion", "(", "union_emb_list", "[", "i", "]", ",", "union_answer_list", "[", "i", "]", ",", "union", "=", "True", ")", "\n", "all_positive_logit", "=", "torch", ".", "cat", "(", "[", "all_positive_logit", ",", "union_positive_logit", "]", ",", "dim", "=", "0", ")", "\n", "all_negative_logit", "=", "torch", ".", "cat", "(", "[", "all_negative_logit", ",", "union_negative_logit", "]", ",", "dim", "=", "0", ")", "\n", "all_subsampling_weight", "=", "torch", ".", "cat", "(", "[", "all_subsampling_weight", ",", "union_subsampling_weight", "]", ",", "dim", "=", "0", ")", "\n", "", "positive_loss", ",", "negative_loss", "=", "compute_final_loss", "(", "all_positive_logit", ",", "all_negative_logit", ",", "all_subsampling_weight", ")", "\n", "loss", "=", "(", "positive_loss", "+", "negative_loss", ")", "/", "2", "\n", "loss", ".", "backward", "(", ")", "\n", "opt", ".", "step", "(", ")", "\n", "log", "=", "{", "\n", "'po'", ":", "positive_loss", ".", "item", "(", ")", ",", "\n", "'ne'", ":", "negative_loss", ".", "item", "(", ")", ",", "\n", "'loss'", ":", "loss", ".", "item", "(", ")", "\n", "}", "\n", "if", "model", ".", "name", "==", "'logic'", ":", "\n", "        ", "entity_embedding", "=", "model", ".", "entity_embeddings", ".", "weight", ".", "data", "\n", "if", "model", ".", "bounded", ":", "\n", "            ", "model", ".", "entity_embeddings", ".", "weight", ".", "data", "=", "order_bounds", "(", "entity_embedding", ")", "\n", "", "else", ":", "\n", "            ", "model", ".", "entity_embeddings", ".", "weight", ".", "data", "=", "torch", ".", "clamp", "(", "entity_embedding", ",", "0", ",", "1", ")", "\n", "", "", "return", "log", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.None.main.eval_step": [[60, 131], ["collections.defaultdict", "torch.no_grad", "tqdm.std.tqdm", "collections.defaultdict.keys", "collections.defaultdict", "logs[].keys", "model.compute_all_entity_logit", "torch.argsort", "torch.argsort.clone().to", "range", "torch.device", "ranking.scatter_.scatter_", "ranking.scatter_.scatter_", "len", "len", "torch.sort", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.arange().to().to", "torch.mean().item", "torch.argsort.clone", "torch.arange().to().repeat().to", "torch.arange().to().repeat", "len", "torch.device", "torch.arange().to().to", "torch.arange().to", "list", "set().intersection", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.arange().to", "torch.mean", "torch.arange().to().repeat", "torch.arange().to", "set().union", "set", "torch.arange().to", "torch.arange", "set", "set", "list", "list", "torch.arange", "torch.arange().to", "torch.arange", "set", "torch.arange", "torch.arange"], "function", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.BoxEstimator.compute_all_entity_logit", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.to", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.to", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.to", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.to", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.to", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.to", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.to", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.to", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.to"], ["", "def", "eval_step", "(", "model", ",", "eval_iterator", ",", "device", ",", "mode", ",", "allowed_easy_ans", "=", "False", ")", ":", "\n", "    ", "logs", "=", "collections", ".", "defaultdict", "(", "lambda", ":", "collections", ".", "defaultdict", "(", "float", ")", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "data", "in", "tqdm", "(", "eval_iterator", ")", ":", "\n", "            ", "for", "key", "in", "data", ":", "\n", "                ", "pred", "=", "data", "[", "key", "]", "[", "'emb'", "]", "\n", "all_logit", "=", "model", ".", "compute_all_entity_logit", "(", "pred", ",", "union", "=", "(", "'u'", "in", "key", "or", "'U'", "in", "key", ")", ")", "# batch*nentity", "\n", "argsort", "=", "torch", ".", "argsort", "(", "all_logit", ",", "dim", "=", "1", ",", "descending", "=", "True", ")", "\n", "ranking", "=", "argsort", ".", "clone", "(", ")", ".", "to", "(", "torch", ".", "float", ")", "\n", "#  create a new torch Tensor for batch_entity_range", "\n", "if", "device", "!=", "torch", ".", "device", "(", "'cpu'", ")", ":", "\n", "                    ", "ranking", "=", "ranking", ".", "scatter_", "(", "\n", "1", ",", "argsort", ",", "torch", ".", "arange", "(", "model", ".", "n_entity", ")", ".", "to", "(", "torch", ".", "float", ")", ".", "repeat", "(", "argsort", ".", "shape", "[", "0", "]", ",", "1", ")", ".", "to", "(", "\n", "device", ")", ")", "\n", "", "else", ":", "\n", "                    ", "ranking", "=", "ranking", ".", "scatter_", "(", "\n", "1", ",", "argsort", ",", "torch", ".", "arange", "(", "model", ".", "n_entity", ")", ".", "to", "(", "torch", ".", "float", ")", ".", "repeat", "(", "argsort", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "\n", "# achieve the ranking of all entities", "\n", "", "for", "i", "in", "range", "(", "all_logit", ".", "shape", "[", "0", "]", ")", ":", "\n", "                    ", "if", "mode", "==", "'train'", ":", "\n", "                        ", "easy_ans", "=", "[", "]", "\n", "hard_ans", "=", "data", "[", "key", "]", "[", "'answer_set'", "]", "[", "i", "]", "\n", "", "else", ":", "\n", "                        ", "if", "allowed_easy_ans", ":", "\n", "                            ", "easy_ans", "=", "[", "]", "\n", "hard_ans", "=", "list", "(", "set", "(", "data", "[", "key", "]", "[", "'hard_answer_set'", "]", "[", "i", "]", ")", ".", "union", "\n", "(", "set", "(", "data", "[", "key", "]", "[", "'easy_answer_set'", "]", "[", "i", "]", ")", ")", ")", "\n", "", "else", ":", "\n", "                            ", "easy_ans", "=", "data", "[", "key", "]", "[", "'easy_answer_set'", "]", "[", "i", "]", "\n", "hard_ans", "=", "data", "[", "key", "]", "[", "'hard_answer_set'", "]", "[", "i", "]", "\n", "\n", "", "", "num_hard", "=", "len", "(", "hard_ans", ")", "\n", "num_easy", "=", "len", "(", "easy_ans", ")", "\n", "assert", "len", "(", "set", "(", "hard_ans", ")", ".", "intersection", "(", "set", "(", "easy_ans", ")", ")", ")", "==", "0", "\n", "# only take those answers' rank", "\n", "cur_ranking", "=", "ranking", "[", "i", ",", "list", "(", "easy_ans", ")", "+", "list", "(", "hard_ans", ")", "]", "\n", "cur_ranking", ",", "indices", "=", "torch", ".", "sort", "(", "cur_ranking", ")", "\n", "masks", "=", "indices", ">=", "num_easy", "\n", "if", "device", "!=", "torch", ".", "device", "(", "'cpu'", ")", ":", "\n", "                        ", "answer_list", "=", "torch", ".", "arange", "(", "\n", "num_hard", "+", "num_easy", ")", ".", "to", "(", "torch", ".", "float", ")", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "                        ", "answer_list", "=", "torch", ".", "arange", "(", "\n", "num_hard", "+", "num_easy", ")", ".", "to", "(", "torch", ".", "float", ")", "\n", "\n", "", "cur_ranking", "=", "cur_ranking", "-", "answer_list", "+", "1", "\n", "# filtered setting: +1 for start at 0, -answer_list for ignore other answers", "\n", "\n", "cur_ranking", "=", "cur_ranking", "[", "masks", "]", "\n", "# only take indices that belong to the hard answers", "\n", "mrr", "=", "torch", ".", "mean", "(", "1.", "/", "cur_ranking", ")", ".", "item", "(", ")", "\n", "h1", "=", "torch", ".", "mean", "(", "(", "cur_ranking", "<=", "1", ")", ".", "to", "(", "torch", ".", "float", ")", ")", ".", "item", "(", ")", "\n", "h3", "=", "torch", ".", "mean", "(", "(", "cur_ranking", "<=", "3", ")", ".", "to", "(", "torch", ".", "float", ")", ")", ".", "item", "(", ")", "\n", "h10", "=", "torch", ".", "mean", "(", "\n", "(", "cur_ranking", "<=", "10", ")", ".", "to", "(", "torch", ".", "float", ")", ")", ".", "item", "(", ")", "\n", "add_hard_list", "=", "torch", ".", "arange", "(", "num_hard", ")", ".", "to", "(", "torch", ".", "float", ")", ".", "to", "(", "device", ")", "\n", "hard_ranking", "=", "cur_ranking", "+", "add_hard_list", "# for all hard answer, consider other hard answer", "\n", "logs", "[", "key", "]", "[", "'retrieval_accuracy'", "]", "+=", "torch", ".", "mean", "(", "\n", "(", "hard_ranking", "<=", "num_hard", ")", ".", "to", "(", "torch", ".", "float", ")", ")", ".", "item", "(", ")", "\n", "logs", "[", "key", "]", "[", "'MRR'", "]", "+=", "mrr", "\n", "logs", "[", "key", "]", "[", "'HITS1'", "]", "+=", "h1", "\n", "logs", "[", "key", "]", "[", "'HITS3'", "]", "+=", "h3", "\n", "logs", "[", "key", "]", "[", "'HITS10'", "]", "+=", "h10", "\n", "", "num_query", "=", "all_logit", ".", "shape", "[", "0", "]", "\n", "logs", "[", "key", "]", "[", "'num_queries'", "]", "+=", "num_query", "\n", "", "", "for", "key", "in", "logs", ".", "keys", "(", ")", ":", "\n", "            ", "for", "metric", "in", "logs", "[", "key", "]", ".", "keys", "(", ")", ":", "\n", "                ", "if", "metric", "!=", "'num_queries'", ":", "\n", "                    ", "logs", "[", "key", "]", "[", "metric", "]", "/=", "logs", "[", "key", "]", "[", "'num_queries'", "]", "\n", "# torch.cuda.empty_cache()", "\n", "", "", "", "", "return", "logs", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.None.main.save_eval": [[156, 161], ["writer.append_trace"], "function", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.util.Writer.append_trace"], ["", "def", "save_eval", "(", "log", ",", "mode", ",", "step", ",", "writer", ")", ":", "\n", "    ", "for", "t", "in", "log", ":", "\n", "        ", "logt", "=", "log", "[", "t", "]", "\n", "logt", "[", "'step'", "]", "=", "step", "\n", "writer", ".", "append_trace", "(", "f'eval_{mode}_{t}'", ",", "logt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.None.main.save_benchmark": [[163, 170], ["collections.defaultdict", "writer.save_dataframe", "collections.defaultdict"], "function", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.util.Writer.save_dataframe"], ["", "", "def", "save_benchmark", "(", "log", ",", "writer", ",", "step", ",", "taskmanger", ":", "BenchmarkFormManager", ")", ":", "\n", "    ", "form_log", "=", "collections", ".", "defaultdict", "(", "lambda", ":", "collections", ".", "defaultdict", "(", "float", ")", ")", "\n", "for", "normal_form", "in", "all_normal_form", ":", "\n", "        ", "formula", "=", "taskmanger", ".", "form2formula", "[", "normal_form", "]", "\n", "if", "formula", "in", "log", ":", "\n", "            ", "form_log", "[", "normal_form", "]", "=", "log", "[", "formula", "]", "\n", "", "", "writer", ".", "save_dataframe", "(", "form_log", ",", "f\"eval_{taskmanger.mode}_{step}_{taskmanger.query_inform_dict['formula_id']}.csv\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.None.main.save_whole_benchmark": [[172, 175], ["main.save_benchmark"], "function", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.None.main.save_benchmark"], ["", "def", "save_whole_benchmark", "(", "log", ",", "writer", ",", "step", ",", "whole_task_manager", ":", "BenchmarkWholeManager", ")", ":", "\n", "    ", "for", "type_str", "in", "whole_task_manager", ".", "query_classes", ":", "\n", "        ", "save_benchmark", "(", "log", ",", "writer", ",", "step", ",", "whole_task_manager", ".", "query_classes", "[", "type_str", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.None.main.load_beta_model": [[177, 187], ["print", "torch.load", "model.load_state_dict", "optimizer.load_state_dict", "os.path.join"], "function", ["None"], ["", "", "def", "load_beta_model", "(", "checkpoint_path", ",", "model", ",", "optimizer", ")", ":", "\n", "    ", "print", "(", "'Loading checkpoint %s...'", "%", "checkpoint_path", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "\n", "args", ".", "checkpoint_path", ",", "'checkpoint'", ")", ")", "\n", "init_step", "=", "checkpoint", "[", "'step'", "]", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'model_state_dict'", "]", ")", "\n", "current_learning_rate", "=", "checkpoint", "[", "'current_learning_rate'", "]", "\n", "warm_up_steps", "=", "checkpoint", "[", "'warm_up_steps'", "]", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer_state_dict'", "]", ")", "\n", "return", "current_learning_rate", ",", "warm_up_steps", ",", "init_step", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.None.main.load_model": [[189, 198], ["print", "torch.load", "model.load_state_dict", "opt.load_state_dict", "os.path.join"], "function", ["None"], ["", "def", "load_model", "(", "step", ",", "checkpoint_path", ",", "model", ",", "opt", ")", ":", "\n", "    ", "print", "(", "'Loading checkpoint %s...'", "%", "checkpoint_path", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "\n", "checkpoint_path", ",", "f'{step}.ckpt'", ")", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'model_parameter'", "]", ")", "\n", "opt", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer_parameter'", "]", ")", "\n", "learning_rate", "=", "checkpoint", "[", "'learning_rate'", "]", "\n", "warm_up_steps", "=", "checkpoint", "[", "'warm_up_steps'", "]", "\n", "return", "learning_rate", ",", "warm_up_steps", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.None.transform_beta_data.transform_json_query": [[90, 242], ["json.dumps"], "function", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.dumps"], ["def", "transform_json_query", "(", "query", ",", "meta_formula", ",", "option", "=", "None", ")", ":", "\n", "    ", "\"\"\" Prepare the dobject accordingly and then dump to json string\n    Only transform into original form.\n    \"\"\"", "\n", "if", "meta_formula", "==", "'1p'", ":", "\n", "        ", "e", ",", "r", "=", "query", "[", "0", "]", ",", "query", "[", "1", "]", "[", "0", "]", "\n", "dobject", "=", "{", "\"o\"", ":", "\"e\"", ",", "\"a\"", ":", "[", "e", "]", "}", "\n", "dobject", "=", "{", "\"o\"", ":", "\"p\"", ",", "\"a\"", ":", "[", "[", "r", "]", ",", "dobject", "]", "}", "\n", "", "elif", "meta_formula", "==", "'2p'", ":", "\n", "        ", "e1", ",", "r1", ",", "r2", "=", "query", "[", "0", "]", ",", "query", "[", "1", "]", "[", "0", "]", ",", "query", "[", "1", "]", "[", "1", "]", "\n", "dobject", "=", "{", "\"o\"", ":", "\"e\"", ",", "\"a\"", ":", "[", "e1", "]", "}", "\n", "dobject", "=", "{", "\"o\"", ":", "\"p\"", ",", "\"a\"", ":", "[", "[", "r1", "]", ",", "dobject", "]", "}", "\n", "dobject", "=", "{", "\"o\"", ":", "\"p\"", ",", "\"a\"", ":", "[", "[", "r2", "]", ",", "dobject", "]", "}", "\n", "", "elif", "meta_formula", "==", "'3p'", ":", "\n", "        ", "e1", ",", "r1", ",", "r2", ",", "r3", "=", "query", "[", "0", "]", ",", "query", "[", "1", "]", "[", "0", "]", ",", "query", "[", "1", "]", "[", "1", "]", ",", "query", "[", "1", "]", "[", "2", "]", "\n", "dobject", "=", "{", "\"o\"", ":", "\"e\"", ",", "\"a\"", ":", "[", "e1", "]", "}", "\n", "dobject", "=", "{", "\"o\"", ":", "\"p\"", ",", "\"a\"", ":", "[", "[", "r1", "]", ",", "dobject", "]", "}", "\n", "dobject", "=", "{", "\"o\"", ":", "\"p\"", ",", "\"a\"", ":", "[", "[", "r2", "]", ",", "dobject", "]", "}", "\n", "dobject", "=", "{", "\"o\"", ":", "\"p\"", ",", "\"a\"", ":", "[", "[", "r3", "]", ",", "dobject", "]", "}", "\n", "", "elif", "meta_formula", "==", "'2i'", ":", "\n", "        ", "e1", ",", "e2", ",", "r1", ",", "r2", "=", "query", "[", "0", "]", "[", "0", "]", ",", "query", "[", "1", "]", "[", "0", "]", ",", "query", "[", "0", "]", "[", "1", "]", "[", "0", "]", ",", "query", "[", "1", "]", "[", "1", "]", "[", "0", "]", "\n", "dobject1", "=", "{", "\"o\"", ":", "\"e\"", ",", "\"a\"", ":", "[", "e1", "]", "}", "\n", "dobject1", "=", "{", "\"o\"", ":", "\"p\"", ",", "\"a\"", ":", "[", "[", "r1", "]", ",", "dobject1", "]", "}", "\n", "dobject2", "=", "{", "\"o\"", ":", "\"e\"", ",", "\"a\"", ":", "[", "e2", "]", "}", "\n", "dobject2", "=", "{", "\"o\"", ":", "\"p\"", ",", "\"a\"", ":", "[", "[", "r2", "]", ",", "dobject2", "]", "}", "\n", "dobject", "=", "{", "\"o\"", ":", "\"i\"", ",", "\"a\"", ":", "[", "dobject1", ",", "dobject2", "]", "}", "\n", "", "elif", "meta_formula", "==", "'3i'", ":", "\n", "        ", "e1", ",", "e2", ",", "e3", ",", "r1", ",", "r2", ",", "r3", "=", "query", "[", "0", "]", "[", "0", "]", ",", "query", "[", "1", "]", "[", "0", "]", ",", "query", "[", "2", "]", "[", "0", "]", ",", "query", "[", "0", "]", "[", "1", "]", "[", "0", "]", ",", "query", "[", "1", "]", "[", "1", "]", "[", "0", "]", ",", "query", "[", "2", "]", "[", "1", "]", "[", "0", "]", "\n", "dobject1", "=", "{", "\"o\"", ":", "\"e\"", ",", "\"a\"", ":", "[", "e1", "]", "}", "\n", "dobject1", "=", "{", "\"o\"", ":", "\"p\"", ",", "\"a\"", ":", "[", "[", "r1", "]", ",", "dobject1", "]", "}", "\n", "dobject2", "=", "{", "\"o\"", ":", "\"e\"", ",", "\"a\"", ":", "[", "e2", "]", "}", "\n", "dobject2", "=", "{", "\"o\"", ":", "\"p\"", ",", "\"a\"", ":", "[", "[", "r2", "]", ",", "dobject2", "]", "}", "\n", "dobject3", "=", "{", "\"o\"", ":", "\"e\"", ",", "\"a\"", ":", "[", "e3", "]", "}", "\n", "dobject3", "=", "{", "\"o\"", ":", "\"p\"", ",", "\"a\"", ":", "[", "[", "r3", "]", ",", "dobject3", "]", "}", "\n", "if", "option", "==", "\"binary\"", ":", "\n", "            ", "dobject", "=", "{", "\"o\"", ":", "\"i\"", ",", "\"a\"", ":", "[", "dobject1", ",", "dobject2", "]", "}", "\n", "dobject", "=", "{", "\"o\"", ":", "\"i\"", ",", "\"a\"", ":", "[", "dobject", ",", "dobject3", "]", "}", "\n", "", "else", ":", "\n", "            ", "dobject", "=", "{", "\"o\"", ":", "\"I\"", ",", "\"a\"", ":", "[", "dobject1", ",", "dobject2", ",", "dobject3", "]", "}", "\n", "", "", "elif", "meta_formula", "==", "'ip'", ":", "\n", "        ", "e1", ",", "e2", ",", "r1", ",", "r2", ",", "r3", "=", "query", "[", "0", "]", "[", "0", "]", "[", "0", "]", ",", "query", "[", "0", "]", "[", "1", "]", "[", "0", "]", ",", "query", "[", "0", "]", "[", "0", "]", "[", "1", "]", "[", "0", "]", ",", "query", "[", "0", "]", "[", "1", "]", "[", "1", "]", "[", "0", "]", ",", "query", "[", "1", "]", "[", "0", "]", "\n", "dobject1", "=", "{", "\"o\"", ":", "\"e\"", ",", "\"a\"", ":", "[", "e1", "]", "}", "\n", "dobject1", "=", "{", "\"o\"", ":", "\"p\"", ",", "\"a\"", ":", "[", "[", "r1", "]", ",", "dobject1", "]", "}", "\n", "dobject2", "=", "{", "\"o\"", ":", "\"e\"", ",", "\"a\"", ":", "[", "e2", "]", "}", "\n", "dobject2", "=", "{", "\"o\"", ":", "\"p\"", ",", "\"a\"", ":", "[", "[", "r2", "]", ",", "dobject2", "]", "}", "\n", "dobject", "=", "{", "\"o\"", ":", "\"i\"", ",", "\"a\"", ":", "[", "dobject1", ",", "dobject2", "]", "}", "\n", "dobject", "=", "{", "\"o\"", ":", "\"p\"", ",", "\"a\"", ":", "[", "[", "r3", "]", ",", "dobject", "]", "}", "\n", "", "elif", "meta_formula", "==", "'pi'", ":", "\n", "        ", "e1", ",", "e2", ",", "r1", ",", "r2", ",", "r3", "=", "query", "[", "0", "]", "[", "0", "]", ",", "query", "[", "1", "]", "[", "0", "]", ",", "query", "[", "0", "]", "[", "1", "]", "[", "0", "]", ",", "query", "[", "0", "]", "[", "1", "]", "[", "1", "]", ",", "query", "[", "1", "]", "[", "1", "]", "[", "0", "]", "\n", "dobject1", "=", "{", "\"o\"", ":", "\"e\"", ",", "\"a\"", ":", "[", "e1", "]", "}", "\n", "dobject1", "=", "{", "\"o\"", ":", "\"p\"", ",", "\"a\"", ":", "[", "[", "r1", "]", ",", "dobject1", "]", "}", "\n", "dobject1", "=", "{", "\"o\"", ":", "\"p\"", ",", "\"a\"", ":", "[", "[", "r2", "]", ",", "dobject1", "]", "}", "\n", "dobject2", "=", "{", "\"o\"", ":", "\"e\"", ",", "\"a\"", ":", "[", "e2", "]", "}", "\n", "dobject2", "=", "{", "\"o\"", ":", "\"p\"", ",", "\"a\"", ":", "[", "[", "r3", "]", ",", "dobject2", "]", "}", "\n", "dobject", "=", "{", "\"o\"", ":", "\"i\"", ",", "\"a\"", ":", "[", "dobject2", ",", "dobject1", "]", "}", "\n", "", "elif", "meta_formula", "==", "'2in'", ":", "\n", "        ", "e1", ",", "e2", ",", "r1", ",", "r2", "=", "query", "[", "0", "]", "[", "0", "]", ",", "query", "[", "1", "]", "[", "0", "]", ",", "query", "[", "0", "]", "[", "1", "]", "[", "0", "]", ",", "query", "[", "1", "]", "[", "1", "]", "[", "0", "]", "\n", "dobject1", "=", "{", "\"o\"", ":", "\"e\"", ",", "\"a\"", ":", "[", "e1", "]", "}", "\n", "dobject1", "=", "{", "\"o\"", ":", "\"p\"", ",", "\"a\"", ":", "[", "[", "r1", "]", ",", "dobject1", "]", "}", "\n", "dobject2", "=", "{", "\"o\"", ":", "\"e\"", ",", "\"a\"", ":", "[", "e2", "]", "}", "\n", "dobject2", "=", "{", "\"o\"", ":", "\"p\"", ",", "\"a\"", ":", "[", "[", "r2", "]", ",", "dobject2", "]", "}", "\n", "dobject2", "=", "{", "\"o\"", ":", "\"n\"", ",", "\"a\"", ":", "dobject2", "}", "\n", "dobject", "=", "{", "\"o\"", ":", "\"i\"", ",", "\"a\"", ":", "[", "dobject2", ",", "dobject1", "]", "}", "\n", "", "elif", "meta_formula", "==", "'3in'", ":", "\n", "        ", "e1", ",", "e2", ",", "e3", ",", "r1", ",", "r2", ",", "r3", "=", "query", "[", "0", "]", "[", "0", "]", ",", "query", "[", "1", "]", "[", "0", "]", ",", "query", "[", "2", "]", "[", "0", "]", ",", "query", "[", "0", "]", "[", "1", "]", "[", "0", "]", ",", "query", "[", "1", "]", "[", "1", "]", "[", "0", "]", ",", "query", "[", "2", "]", "[", "1", "]", "[", "0", "]", "\n", "dobject1", "=", "{", "\"o\"", ":", "\"e\"", ",", "\"a\"", ":", "[", "e1", "]", "}", "\n", "dobject1", "=", "{", "\"o\"", ":", "\"p\"", ",", "\"a\"", ":", "[", "[", "r1", "]", ",", "dobject1", "]", "}", "\n", "dobject2", "=", "{", "\"o\"", ":", "\"e\"", ",", "\"a\"", ":", "[", "e2", "]", "}", "\n", "dobject2", "=", "{", "\"o\"", ":", "\"p\"", ",", "\"a\"", ":", "[", "[", "r2", "]", ",", "dobject2", "]", "}", "\n", "dobject3", "=", "{", "\"o\"", ":", "\"e\"", ",", "\"a\"", ":", "[", "e3", "]", "}", "\n", "dobject3", "=", "{", "\"o\"", ":", "\"p\"", ",", "\"a\"", ":", "[", "[", "r3", "]", ",", "dobject3", "]", "}", "\n", "dobject3", "=", "{", "\"o\"", ":", "\"n\"", ",", "\"a\"", ":", "dobject3", "}", "\n", "if", "option", "==", "\"binary\"", ":", "\n", "            ", "dobject", "=", "{", "\"o\"", ":", "\"i\"", ",", "\"a\"", ":", "[", "dobject1", ",", "dobject2", "]", "}", "\n", "dobject", "=", "{", "\"o\"", ":", "\"i\"", ",", "\"a\"", ":", "[", "dobject", ",", "dobject3", "]", "}", "\n", "", "else", ":", "\n", "            ", "dobject", "=", "{", "\"o\"", ":", "\"I\"", ",", "\"a\"", ":", "[", "dobject3", ",", "dobject1", ",", "dobject2", "]", "}", "\n", "", "", "elif", "meta_formula", "==", "'inp'", ":", "\n", "        ", "e1", ",", "e2", ",", "r1", ",", "r2", ",", "r3", "=", "query", "[", "0", "]", "[", "0", "]", "[", "0", "]", ",", "query", "[", "0", "]", "[", "1", "]", "[", "0", "]", ",", "query", "[", "0", "]", "[", "0", "]", "[", "1", "]", "[", "0", "]", ",", "query", "[", "0", "]", "[", "1", "]", "[", "1", "]", "[", "0", "]", ",", "query", "[", "1", "]", "[", "0", "]", "\n", "dobject1", "=", "{", "\"o\"", ":", "\"e\"", ",", "\"a\"", ":", "[", "e1", "]", "}", "\n", "dobject1", "=", "{", "\"o\"", ":", "\"p\"", ",", "\"a\"", ":", "[", "[", "r1", "]", ",", "dobject1", "]", "}", "\n", "dobject2", "=", "{", "\"o\"", ":", "\"e\"", ",", "\"a\"", ":", "[", "e2", "]", "}", "\n", "dobject2", "=", "{", "\"o\"", ":", "\"p\"", ",", "\"a\"", ":", "[", "[", "r2", "]", ",", "dobject2", "]", "}", "\n", "dobject2", "=", "{", "\"o\"", ":", "\"n\"", ",", "\"a\"", ":", "dobject2", "}", "\n", "dobject", "=", "{", "\"o\"", ":", "\"i\"", ",", "\"a\"", ":", "[", "dobject2", ",", "dobject1", "]", "}", "\n", "dobject", "=", "{", "\"o\"", ":", "\"p\"", ",", "\"a\"", ":", "[", "[", "r3", "]", ",", "dobject", "]", "}", "\n", "", "elif", "meta_formula", "==", "'pin'", ":", "\n", "        ", "e1", ",", "e2", ",", "r1", ",", "r2", ",", "r3", "=", "query", "[", "0", "]", "[", "0", "]", ",", "query", "[", "1", "]", "[", "0", "]", ",", "query", "[", "0", "]", "[", "1", "]", "[", "0", "]", ",", "query", "[", "0", "]", "[", "1", "]", "[", "1", "]", ",", "query", "[", "1", "]", "[", "1", "]", "[", "0", "]", "\n", "dobject1", "=", "{", "\"o\"", ":", "\"e\"", ",", "\"a\"", ":", "[", "e1", "]", "}", "\n", "dobject1", "=", "{", "\"o\"", ":", "\"p\"", ",", "\"a\"", ":", "[", "[", "r1", "]", ",", "dobject1", "]", "}", "\n", "dobject1", "=", "{", "\"o\"", ":", "\"p\"", ",", "\"a\"", ":", "[", "[", "r2", "]", ",", "dobject1", "]", "}", "\n", "dobject2", "=", "{", "\"o\"", ":", "\"e\"", ",", "\"a\"", ":", "[", "e2", "]", "}", "\n", "dobject2", "=", "{", "\"o\"", ":", "\"p\"", ",", "\"a\"", ":", "[", "[", "r3", "]", ",", "dobject2", "]", "}", "\n", "dobject2", "=", "{", "\"o\"", ":", "\"n\"", ",", "\"a\"", ":", "dobject2", "}", "\n", "dobject", "=", "{", "\"o\"", ":", "\"i\"", ",", "\"a\"", ":", "[", "dobject2", ",", "dobject1", "]", "}", "\n", "", "elif", "meta_formula", "==", "'pni'", ":", "\n", "        ", "e1", ",", "e2", ",", "r1", ",", "r2", ",", "r3", "=", "query", "[", "0", "]", "[", "0", "]", ",", "query", "[", "1", "]", "[", "0", "]", ",", "query", "[", "0", "]", "[", "1", "]", "[", "0", "]", ",", "query", "[", "0", "]", "[", "1", "]", "[", "1", "]", ",", "query", "[", "1", "]", "[", "1", "]", "[", "0", "]", "\n", "dobject1", "=", "{", "\"o\"", ":", "\"e\"", ",", "\"a\"", ":", "[", "e1", "]", "}", "\n", "dobject1", "=", "{", "\"o\"", ":", "\"p\"", ",", "\"a\"", ":", "[", "[", "r1", "]", ",", "dobject1", "]", "}", "\n", "dobject1", "=", "{", "\"o\"", ":", "\"p\"", ",", "\"a\"", ":", "[", "[", "r2", "]", ",", "dobject1", "]", "}", "\n", "dobject1", "=", "{", "\"o\"", ":", "\"n\"", ",", "\"a\"", ":", "dobject1", "}", "\n", "dobject2", "=", "{", "\"o\"", ":", "\"e\"", ",", "\"a\"", ":", "[", "e2", "]", "}", "\n", "dobject2", "=", "{", "\"o\"", ":", "\"p\"", ",", "\"a\"", ":", "[", "[", "r3", "]", ",", "dobject2", "]", "}", "\n", "dobject", "=", "{", "\"o\"", ":", "\"i\"", ",", "\"a\"", ":", "[", "dobject1", ",", "dobject2", "]", "}", "\n", "", "elif", "meta_formula", "==", "'2u-DNF'", "or", "meta_formula", "==", "'2u'", ":", "\n", "        ", "e1", ",", "e2", ",", "r1", ",", "r2", "=", "query", "[", "0", "]", "[", "0", "]", ",", "query", "[", "1", "]", "[", "0", "]", ",", "query", "[", "0", "]", "[", "1", "]", "[", "0", "]", ",", "query", "[", "1", "]", "[", "1", "]", "[", "0", "]", "\n", "dobject1", "=", "{", "\"o\"", ":", "\"e\"", ",", "\"a\"", ":", "[", "e1", "]", "}", "\n", "dobject1", "=", "{", "\"o\"", ":", "\"p\"", ",", "\"a\"", ":", "[", "[", "r1", "]", ",", "dobject1", "]", "}", "\n", "dobject2", "=", "{", "\"o\"", ":", "\"e\"", ",", "\"a\"", ":", "[", "e2", "]", "}", "\n", "dobject2", "=", "{", "\"o\"", ":", "\"p\"", ",", "\"a\"", ":", "[", "[", "r2", "]", ",", "dobject2", "]", "}", "\n", "dobject", "=", "{", "\"o\"", ":", "\"u\"", ",", "\"a\"", ":", "[", "dobject1", ",", "dobject2", "]", "}", "\n", "", "elif", "meta_formula", "==", "'up'", ":", "\n", "        ", "e1", ",", "e2", ",", "r1", ",", "r2", ",", "r3", "=", "query", "[", "0", "]", "[", "0", "]", "[", "0", "]", ",", "query", "[", "0", "]", "[", "1", "]", "[", "0", "]", ",", "query", "[", "0", "]", "[", "0", "]", "[", "1", "]", "[", "0", "]", ",", "query", "[", "0", "]", "[", "1", "]", "[", "1", "]", "[", "0", "]", ",", "query", "[", "1", "]", "[", "0", "]", "\n", "dobject1", "=", "{", "\"o\"", ":", "\"e\"", ",", "\"a\"", ":", "[", "e1", "]", "}", "\n", "dobject1", "=", "{", "\"o\"", ":", "\"p\"", ",", "\"a\"", ":", "[", "[", "r1", "]", ",", "dobject1", "]", "}", "\n", "dobject2", "=", "{", "\"o\"", ":", "\"e\"", ",", "\"a\"", ":", "[", "e2", "]", "}", "\n", "dobject2", "=", "{", "\"o\"", ":", "\"p\"", ",", "\"a\"", ":", "[", "[", "r2", "]", ",", "dobject2", "]", "}", "\n", "dobject", "=", "{", "\"o\"", ":", "\"u\"", ",", "\"a\"", ":", "[", "dobject1", ",", "dobject2", "]", "}", "\n", "dobject", "=", "{", "\"o\"", ":", "\"p\"", ",", "\"a\"", ":", "[", "[", "r3", "]", ",", "dobject", "]", "}", "\n", "", "elif", "meta_formula", "==", "'up-DNF'", ":", "\n", "        ", "e1", ",", "e2", ",", "r1", ",", "r2", ",", "r3", "=", "query", "[", "0", "]", "[", "0", "]", "[", "0", "]", ",", "query", "[", "0", "]", "[", "1", "]", "[", "0", "]", ",", "query", "[", "0", "]", "[", "0", "]", "[", "1", "]", "[", "0", "]", ",", "query", "[", "0", "]", "[", "1", "]", "[", "1", "]", "[", "0", "]", ",", "query", "[", "1", "]", "[", "0", "]", "\n", "dobject1", "=", "{", "\"o\"", ":", "\"e\"", ",", "\"a\"", ":", "[", "e1", "]", "}", "\n", "dobject1", "=", "{", "\"o\"", ":", "\"p\"", ",", "\"a\"", ":", "[", "[", "r1", "]", ",", "dobject1", "]", "}", "\n", "dobject1", "=", "{", "\"o\"", ":", "\"p\"", ",", "\"a\"", ":", "[", "[", "r3", "]", ",", "dobject1", "]", "}", "\n", "dobject2", "=", "{", "\"o\"", ":", "\"e\"", ",", "\"a\"", ":", "[", "e2", "]", "}", "\n", "dobject2", "=", "{", "\"o\"", ":", "\"p\"", ",", "\"a\"", ":", "[", "[", "r2", "]", ",", "dobject2", "]", "}", "\n", "dobject2", "=", "{", "\"o\"", ":", "\"p\"", ",", "\"a\"", ":", "[", "[", "r3", "]", ",", "dobject2", "]", "}", "\n", "dobject", "=", "{", "\"o\"", ":", "\"u\"", ",", "\"a\"", ":", "[", "dobject1", ",", "dobject2", "]", "}", "\n", "", "elif", "meta_formula", "==", "'2u-DM'", ":", "\n", "        ", "e1", ",", "e2", ",", "r1", ",", "r2", "=", "query", "[", "0", "]", "[", "0", "]", "[", "0", "]", ",", "query", "[", "0", "]", "[", "1", "]", "[", "0", "]", ",", "query", "[", "0", "]", "[", "0", "]", "[", "1", "]", "[", "0", "]", ",", "query", "[", "0", "]", "[", "1", "]", "[", "1", "]", "[", "0", "]", "\n", "dobject1", "=", "{", "\"o\"", ":", "\"e\"", ",", "\"a\"", ":", "[", "e1", "]", "}", "\n", "dobject1", "=", "{", "\"o\"", ":", "\"p\"", ",", "\"a\"", ":", "[", "[", "r1", "]", ",", "dobject1", "]", "}", "\n", "dobject1", "=", "{", "\"o\"", ":", "\"n\"", ",", "\"a\"", ":", "dobject1", "}", "\n", "dobject2", "=", "{", "\"o\"", ":", "\"e\"", ",", "\"a\"", ":", "[", "e2", "]", "}", "\n", "dobject2", "=", "{", "\"o\"", ":", "\"p\"", ",", "\"a\"", ":", "[", "[", "r2", "]", ",", "dobject2", "]", "}", "\n", "dobject2", "=", "{", "\"o\"", ":", "\"n\"", ",", "\"a\"", ":", "dobject2", "}", "\n", "dobject", "=", "{", "\"o\"", ":", "\"i\"", ",", "\"a\"", ":", "[", "dobject1", ",", "dobject2", "]", "}", "\n", "dobject", "=", "{", "\"o\"", ":", "\"n\"", ",", "\"a\"", ":", "dobject", "}", "\n", "", "elif", "meta_formula", "==", "'up-DM'", ":", "\n", "        ", "e1", ",", "e2", ",", "r1", ",", "r2", ",", "r3", "=", "query", "[", "0", "]", "[", "0", "]", "[", "0", "]", ",", "query", "[", "0", "]", "[", "1", "]", "[", "0", "]", ",", "query", "[", "0", "]", "[", "0", "]", "[", "1", "]", "[", "0", "]", ",", "query", "[", "0", "]", "[", "1", "]", "[", "1", "]", "[", "0", "]", ",", "query", "[", "1", "]", "[", "1", "]", "\n", "dobject1", "=", "{", "\"o\"", ":", "\"e\"", ",", "\"a\"", ":", "[", "e1", "]", "}", "\n", "dobject1", "=", "{", "\"o\"", ":", "\"p\"", ",", "\"a\"", ":", "[", "[", "r1", "]", ",", "dobject1", "]", "}", "\n", "dobject1", "=", "{", "\"o\"", ":", "\"n\"", ",", "\"a\"", ":", "dobject1", "}", "\n", "dobject2", "=", "{", "\"o\"", ":", "\"e\"", ",", "\"a\"", ":", "[", "e2", "]", "}", "\n", "dobject2", "=", "{", "\"o\"", ":", "\"p\"", ",", "\"a\"", ":", "[", "[", "r2", "]", ",", "dobject2", "]", "}", "\n", "dobject2", "=", "{", "\"o\"", ":", "\"n\"", ",", "\"a\"", ":", "dobject2", "}", "\n", "dobject", "=", "{", "\"o\"", ":", "\"i\"", ",", "\"a\"", ":", "[", "dobject1", ",", "dobject2", "]", "}", "\n", "dobject", "=", "{", "\"o\"", ":", "\"n\"", ",", "\"a\"", ":", "dobject", "}", "\n", "dobject", "=", "{", "\"o\"", ":", "\"p\"", ",", "\"a\"", ":", "[", "[", "r3", "]", ",", "dobject", "]", "}", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "return", "json", ".", "dumps", "(", "dobject", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.None.transform_beta_data.store_json_query_with_check": [[244, 294], ["queries.keys", "logging.info", "collections.defaultdict", "tqdm.tqdm", "pandas.DataFrame", "os.path.join", "logging.info", "pd.DataFrame.to_csv", "enumerate", "transform_beta_data.transform_json_query", "fol.parse_formula", "fol.parse_formula.additive_ground", "fol.parse_formula.deterministic_query", "my_train_data[].append", "my_train_data[].append", "json.loads", "fol.parse_formula.deterministic_query", "logging.error", "logging.error", "my_train_data[].append", "my_train_data[].append", "my_train_data[].append", "len"], "function", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.transform_beta_data.transform_json_query", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.parse_formula", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.additive_ground", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.deterministic_query", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.deterministic_query"], ["", "def", "store_json_query_with_check", "(", "\n", "queries", ",", "easy_answers", ",", "hard_answers", ",", "\n", "store_fold", ",", "projection_easy", ",", "projection_hard", ",", "\n", "mode", ",", "beta_names", "=", "None", ")", ":", "\n", "    ", "for", "beta_structure", "in", "queries", ".", "keys", "(", ")", ":", "\n", "        ", "beta_name", "=", "query_name_dict", "[", "beta_structure", "]", "\n", "if", "beta_names", "is", "not", "None", "and", "beta_name", "not", "in", "beta_names", ":", "\n", "            ", "continue", "\n", "", "meta_formula_v2", "=", "beta_query_v2", "[", "beta_name", "]", "\n", "\n", "logging", ".", "info", "(", "f\"handling {beta_structure}, ({beta_name})\"", "\n", "f\" with formula {beta_query_v2[beta_name]}\"", ")", "\n", "\n", "my_train_data", "=", "defaultdict", "(", "list", ")", "\n", "\n", "query_set", "=", "queries", "[", "beta_structure", "]", "\n", "\n", "for", "i", ",", "query", "in", "tqdm", "(", "enumerate", "(", "query_set", ")", ")", ":", "\n", "\n", "            ", "easy_ans", "=", "easy_answers", "[", "query", "]", "\n", "hard_ans", "=", "hard_answers", "[", "query", "]", "\n", "\n", "json_form_query", "=", "transform_json_query", "(", "query", ",", "beta_name", ")", "\n", "query_instance", "=", "parse_formula", "(", "meta_formula_v2", ")", "\n", "query_instance", ".", "additive_ground", "(", "json", ".", "loads", "(", "json_form_query", ")", ")", "\n", "easy_ans_check", "=", "query_instance", ".", "deterministic_query", "(", "\n", "projection_easy", ")", "\n", "hard_ans_check", "=", "query_instance", ".", "deterministic_query", "(", "\n", "projection_hard", ")", "-", "easy_ans_check", "\n", "\n", "if", "easy_ans_check", "!=", "easy_ans", ":", "\n", "                ", "logging", ".", "error", "(", "query", ",", "easy_ans", ",", "easy_ans_check", ")", "\n", "raise", "ValueError", "\n", "", "if", "hard_ans_check", "!=", "hard_ans", ":", "\n", "                ", "logging", ".", "error", "(", "query", ",", "hard_ans", ",", "hard_ans_check", ")", "\n", "raise", "ValueError", "\n", "\n", "", "my_train_data", "[", "'query'", "]", ".", "append", "(", "json_form_query", ")", "\n", "my_train_data", "[", "'id'", "]", ".", "append", "(", "i", ")", "\n", "\n", "if", "mode", "==", "'test'", "or", "mode", "==", "'valid'", ":", "\n", "                ", "my_train_data", "[", "'easy_answer_set'", "]", ".", "append", "(", "easy_ans", ")", "\n", "my_train_data", "[", "'hard_answer_set'", "]", ".", "append", "(", "hard_ans", ")", "\n", "", "elif", "mode", "==", "'train'", ":", "\n", "                ", "my_train_data", "[", "'answer_set'", "]", ".", "append", "(", "hard_ans", ")", "\n", "\n", "", "", "df", "=", "pd", ".", "DataFrame", "(", "data", "=", "my_train_data", ")", "\n", "storation_path", "=", "join", "(", "store_fold", ",", "f\"{mode}_{beta_name}.csv\"", ")", "\n", "logging", ".", "info", "(", "f\"{len(df)} queries is obtained\"", ")", "\n", "df", ".", "to_csv", "(", "storation_path", ",", "index", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.None.transform_beta_data.store_json_query_benchmark_form_with_check": [[296, 348], ["collections.defaultdict", "enumerate", "pandas.DataFrame", "pd.DataFrame.to_csv", "queries.keys", "formula_generation.normal_forms_generation", "formula_id_dict[].append", "formula_id_dict[].append", "logging.info", "collections.defaultdict", "tqdm.tqdm", "pandas.DataFrame", "os.path.join", "logging.info", "pd.DataFrame.to_csv", "os.path.join", "formula_id_dict[].append", "meta_formula_v2.count", "enumerate", "transform_beta_data.transform_json_query", "fol.parse_formula", "fol.parse_formula.additive_ground", "fol.parse_formula.deterministic_query", "benchmark_sampling.normal_forms_transformation", "json.loads", "fol.parse_formula.deterministic_query", "logging.error", "logging.error", "my_train_data[].append", "my_train_data[].append", "my_train_data[].append", "my_train_data[].append", "len"], "function", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.None.formula_generation.normal_forms_generation", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.transform_beta_data.transform_json_query", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.parse_formula", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.additive_ground", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.deterministic_query", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.None.benchmark_sampling.normal_forms_transformation", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.deterministic_query"], ["", "", "def", "store_json_query_benchmark_form_with_check", "(", "\n", "queries", ",", "easy_answers", ",", "hard_answers", ",", "\n", "store_fold", ",", "projection_easy", ",", "projection_hard", ",", "\n", "mode", ",", "str_length", "=", "4", ",", "beta_names", "=", "None", ")", ":", "\n", "    ", "formula_id_dict", "=", "defaultdict", "(", "list", ")", "\n", "for", "structure_index", ",", "beta_structure", "in", "enumerate", "(", "queries", ".", "keys", "(", ")", ")", ":", "\n", "        ", "if", "beta_structure", "not", "in", "query_name_dict", ":", "\n", "            ", "continue", "\n", "", "beta_name", "=", "query_name_dict", "[", "beta_structure", "]", "\n", "if", "beta_names", "is", "not", "None", "and", "beta_name", "not", "in", "beta_names", ":", "\n", "            ", "continue", "\n", "", "meta_formula_v2", "=", "beta_query_original_form", "[", "beta_name", "]", "\n", "result", "=", "normal_forms_generation", "(", "meta_formula_v2", ")", "\n", "for", "key", "in", "result", ":", "\n", "            ", "formula_id_dict", "[", "key", "]", ".", "append", "(", "result", "[", "key", "]", ")", "\n", "", "formula_id_dict", "[", "'num_anchor_nodes'", "]", ".", "append", "(", "meta_formula_v2", ".", "count", "(", "'e'", ")", ")", "\n", "formula_id_dict", "[", "'formula_id'", "]", ".", "append", "(", "f\"type{structure_index:0{str_length}d}\"", ")", "\n", "\n", "logging", ".", "info", "(", "f\"handling {beta_structure}, ({beta_name})\"", "\n", "f\" with formula {beta_query_original_form[beta_name]}\"", ")", "\n", "my_train_data", "=", "defaultdict", "(", "list", ")", "\n", "query_set", "=", "queries", "[", "beta_structure", "]", "\n", "for", "i", ",", "query", "in", "tqdm", "(", "enumerate", "(", "query_set", ")", ")", ":", "\n", "            ", "easy_ans", ",", "hard_ans", "=", "easy_answers", "[", "query", "]", ",", "hard_answers", "[", "query", "]", "\n", "json_form_query", "=", "transform_json_query", "(", "query", ",", "beta_name", ",", "option", "=", "'binary'", ")", "\n", "query_instance", "=", "parse_formula", "(", "meta_formula_v2", ")", "\n", "query_instance", ".", "additive_ground", "(", "json", ".", "loads", "(", "json_form_query", ")", ")", "\n", "assert", "query_instance", ".", "formula", "==", "meta_formula_v2", "\n", "easy_ans_check", "=", "query_instance", ".", "deterministic_query", "(", "projection_easy", ")", "\n", "hard_ans_check", "=", "query_instance", ".", "deterministic_query", "(", "projection_hard", ")", "-", "easy_ans_check", "\n", "if", "easy_ans_check", "!=", "easy_ans", ":", "\n", "                ", "logging", ".", "error", "(", "query", ",", "easy_ans", ",", "easy_ans_check", ")", "\n", "raise", "ValueError", "\n", "", "if", "hard_ans_check", "!=", "hard_ans", ":", "\n", "                ", "logging", ".", "error", "(", "query", ",", "hard_ans", ",", "hard_ans_check", ")", "\n", "raise", "ValueError", "\n", "", "if", "mode", "==", "'test'", "or", "mode", "==", "'valid'", ":", "\n", "                ", "my_train_data", "[", "'easy_answer_set'", "]", ".", "append", "(", "easy_ans", ")", "\n", "my_train_data", "[", "'hard_answer_set'", "]", ".", "append", "(", "hard_ans", ")", "\n", "", "elif", "mode", "==", "'train'", ":", "\n", "                ", "my_train_data", "[", "'answer_set'", "]", ".", "append", "(", "hard_ans", ")", "\n", "", "else", ":", "\n", "                ", "assert", "False", ",", "'Not valid mode!'", "\n", "", "results", "=", "normal_forms_transformation", "(", "query_instance", ")", "\n", "for", "normal_form", "in", "results", ":", "\n", "                ", "my_train_data", "[", "normal_form", "]", ".", "append", "(", "results", "[", "normal_form", "]", ".", "dumps", ")", "\n", "", "", "df", "=", "pd", ".", "DataFrame", "(", "data", "=", "my_train_data", ")", "\n", "storation_path", "=", "join", "(", "store_fold", ",", "f\"{mode}-type{structure_index:0{str_length}d}.csv\"", ")", "\n", "logging", ".", "info", "(", "f\"{len(df)} queries is obtained\"", ")", "\n", "df", ".", "to_csv", "(", "storation_path", ",", "index", "=", "False", ")", "\n", "", "df_formula", "=", "pd", ".", "DataFrame", "(", "data", "=", "formula_id_dict", ")", "\n", "df_formula", ".", "to_csv", "(", "join", "(", "store_fold", ",", "f\"{mode}_formulas.csv\"", ")", ",", "index", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.None.formula_generation.convert_log_to_csv": [[18, 63], ["os.path.exists", "set", "collections.defaultdict", "pandas.DataFrame", "df.append.drop_duplicates", "df.append.to_csv", "pandas.read_csv", "set", "set", "outfile.replace.replace", "open", "f.readlines", "df.append.append", "df.append.to_csv", "logging.info", "line.strip.strip", "line.strip.split", "dict", "outfile.replace.replace", "zip", "schema.split", "data.split", "v.strip", "int", "data_dict[].append", "len", "df[].unique", "k.strip", "set.add"], "function", ["None"], ["def", "convert_log_to_csv", "(", "logfile", ",", "outfile", ")", ":", "\n", "    ", "already", "=", "False", "\n", "if", "os", ".", "path", ".", "exists", "(", "outfile", ")", ":", "\n", "        ", "already", "=", "True", "\n", "already_df", "=", "pd", ".", "read_csv", "(", "outfile", ")", "\n", "formula_id_set", "=", "set", "(", "already_df", ".", "formula_id", ")", "\n", "original_set", "=", "set", "(", "already_df", ".", "original", ")", "\n", "outfile", "=", "outfile", ".", "replace", "(", "\".csv\"", ",", "\"_extend.csv\"", ")", "\n", "", "formula_id_set", "=", "set", "(", ")", "\n", "original_set", "=", "(", ")", "\n", "\n", "data_dict", "=", "defaultdict", "(", "list", ")", "\n", "with", "open", "(", "logfile", ",", "'rt'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "\n", "            ", "line", "=", "line", ".", "strip", "(", ")", "\n", "*", "_", ",", "rtype", ",", "schema", ",", "data", "=", "line", ".", "split", "(", "\":\"", ")", "\n", "row_data", "=", "dict", "(", ")", "\n", "if", "rtype", "==", "'record'", ":", "\n", "                ", "for", "k", ",", "v", "in", "zip", "(", "schema", ".", "split", "(", "'\\t'", ")", ",", "data", ".", "split", "(", "'\\t'", ")", ")", ":", "\n", "                    ", "row_data", "[", "k", ".", "strip", "(", ")", "]", "=", "v", ".", "strip", "(", ")", "\n", "\n", "", "if", "row_data", "[", "'original'", "]", "in", "original_set", ":", "\n", "                    ", "continue", "\n", "\n", "", "if", "row_data", "[", "'formula_id'", "]", "in", "formula_id_set", ":", "\n", "                    ", "num", "=", "int", "(", "row_data", "[", "'formula_id'", "]", "[", "-", "4", ":", "]", ")", "\n", "while", "True", ":", "\n", "                        ", "new_key", "=", "f\"type{num+1:04d}\"", "\n", "if", "new_key", "not", "in", "formula_id_set", ":", "\n", "                            ", "row_data", "[", "'formula_id'", "]", "=", "new_key", "\n", "formula_id_set", ".", "add", "(", "new_key", ")", "\n", "break", "\n", "", "num", "+=", "1", "\n", "\n", "", "", "for", "k", "in", "row_data", ":", "\n", "                    ", "data_dict", "[", "k", "]", ".", "append", "(", "row_data", "[", "k", "]", ")", "\n", "\n", "", "", "", "", "df", "=", "pd", ".", "DataFrame", "(", "data_dict", ")", "\n", "df", "=", "df", ".", "drop_duplicates", "(", "subset", "=", "[", "'original'", "]", ")", "\n", "df", ".", "to_csv", "(", "outfile", ",", "index", "=", "False", ")", "\n", "if", "already", ":", "\n", "        ", "df", "=", "df", ".", "append", "(", "already_df", ",", "ignore_index", "=", "True", ")", "\n", "df", ".", "to_csv", "(", "outfile", ".", "replace", "(", "\"extend\"", ",", "\"full\"", ")", ",", "index", "=", "False", ")", "\n", "", "for", "c", "in", "df", ".", "columns", ":", "\n", "        ", "logging", ".", "info", "(", "f\"{len(df[c].unique())} {c} unique formulas found\"", ")", "\n", "# for i, row in df.iterrows():", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.None.formula_generation.convert_to_dnf": [[68, 75], ["fol.foq_v2.transformation", "fol.foq_v2.union_bubble", "fol.foq_v2.concate_n_chains", "fol.foq_v2.negation_sink"], "function", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.transformation", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.union_bubble", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.concate_n_chains", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.negation_sink"], ["", "", "def", "convert_to_dnf", "(", "query", ")", ":", "\n", "# query = transformation(query, projection_sink)", "\n", "    ", "def", "dnf_step", "(", "query", ")", ":", "\n", "        ", "return", "union_bubble", "(", "concate_n_chains", "(", "negation_sink", "(", "query", ")", ")", ")", "\n", "\n", "", "query", "=", "transformation", "(", "query", ",", "dnf_step", ")", "\n", "return", "query", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.None.formula_generation.normal_forms_generation": [[77, 102], ["fol.foq_v2.parse_formula", "fol.foq_v2.count_query_depth", "fol.foq_v2.DeMorgan_replacement", "fol.foq_v2.concate_iu_chains", "formula_generation.convert_to_dnf", "fol.foq_v2.to_d", "fol.foq_v2.to_d", "fol.foq_v2.concate_iu_chains", "fol.foq_v2.to_D", "fol.foq_v2.parse_formula", "fol.foq_v2.copy_query", "fol.foq_v2.parse_formula", "fol.foq_v2.parse_formula", "fol.foq_v2.parse_formula", "fol.foq_v2.parse_formula", "fol.foq_v2.parse_formula", "fol.foq_v2.decompose_D", "fol.foq_v2.parse_formula"], "function", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.parse_formula", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.count_query_depth", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.DeMorgan_replacement", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.concate_iu_chains", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.None.formula_generation.convert_to_dnf", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.to_d", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.to_d", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.concate_iu_chains", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.to_D", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.parse_formula", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.copy_query", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.parse_formula", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.parse_formula", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.parse_formula", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.parse_formula", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.parse_formula", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.decompose_D", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.parse_formula"], ["", "def", "normal_forms_generation", "(", "formula", ")", ":", "\n", "    ", "result", "=", "{", "}", "\n", "query", "=", "parse_formula", "(", "formula", ")", "\n", "result", "[", "'original_depth'", "]", "=", "count_query_depth", "(", "query", ")", "\n", "formula", "=", "query", ".", "formula", "\n", "# proj, rproj = load_graph()", "\n", "# query.backward_sample()", "\n", "result", "[", "\"original\"", "]", "=", "formula", "\n", "query", "=", "DeMorgan_replacement", "(", "parse_formula", "(", "formula", ")", ")", "\n", "DM_MultiI", "=", "concate_iu_chains", "(", "copy_query", "(", "query", ",", "True", ")", ")", "\n", "result", "[", "\"DeMorgan\"", "]", "=", "query", ".", "formula", "\n", "result", "[", "\"DeMorgan+MultiI\"", "]", "=", "DM_MultiI", ".", "formula", "\n", "query_dnf", "=", "convert_to_dnf", "(", "parse_formula", "(", "formula", ")", ")", "\n", "result", "[", "\"DNF\"", "]", "=", "query_dnf", ".", "formula", "\n", "query", "=", "to_d", "(", "parse_formula", "(", "formula", ")", ")", "\n", "result", "[", "\"diff\"", "]", "=", "query", ".", "formula", "\n", "query", "=", "to_d", "(", "parse_formula", "(", "query_dnf", ".", "formula", ")", ")", "\n", "result", "[", "\"DNF+diff\"", "]", "=", "query", ".", "formula", "\n", "query_dnf_multiiu", "=", "concate_iu_chains", "(", "parse_formula", "(", "query_dnf", ".", "formula", ")", ")", "\n", "result", "[", "\"DNF+MultiIU\"", "]", "=", "query_dnf_multiiu", ".", "formula", "\n", "query", "=", "to_D", "(", "parse_formula", "(", "result", "[", "\"DNF+MultiIU\"", "]", ")", ")", "\n", "result", "[", "\"DNF+MultiIUD\"", "]", "=", "query", ".", "formula", "\n", "result", "[", "\"DNF+MultiIUd\"", "]", "=", "decompose_D", "(", "\n", "parse_formula", "(", "result", "[", "'DNF+MultiIUD'", "]", ")", ")", ".", "formula", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.None.append_new_normal_form.convert_query": [[26, 37], ["df[].map", "fol.foq_v2.parse_formula", "convert_functional"], "function", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.parse_formula"], ["def", "convert_query", "(", "df", ",", "\n", "old_form_name", "=", "'DNF+MultiIUD'", ",", "\n", "new_form_name", "=", "'DNF+MultiIUd'", ",", "\n", "convert_functional", "=", "decompose_D", ")", ":", "\n", "    ", "def", "convertor", "(", "f", ")", ":", "\n", "        ", "query_instance", "=", "parse_formula", "(", "f", ")", "\n", "query_instance", "=", "convert_functional", "(", "query_instance", ")", "\n", "return", "query_instance", ".", "formula", "\n", "\n", "", "df", "[", "new_form_name", "]", "=", "df", "[", "old_form_name", "]", ".", "map", "(", "convertor", ")", "\n", "return", "df", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.None.append_new_normal_form.convert_grounded_query": [[38, 54], ["df[].map", "fol.foq_v2.parse_formula", "convert_functional.additive_ground", "convert_functional", "json.loads"], "function", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.parse_formula", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.additive_ground"], ["", "def", "convert_grounded_query", "(", "df", ",", "\n", "old_form_name", "=", "'DNF+MultiIUD'", ",", "\n", "new_form_name", "=", "'DNF+MultiIUd'", ",", "\n", "old_form_formula", "=", "None", ",", "\n", "convert_functional", "=", "None", ")", ":", "\n", "    ", "assert", "old_form_formula", "is", "not", "None", "\n", "assert", "convert_functional", "is", "not", "None", "\n", "\n", "def", "grounded_convertor", "(", "f", ")", ":", "\n", "        ", "query_instance", "=", "parse_formula", "(", "old_form_formula", ")", "\n", "query_instance", ".", "additive_ground", "(", "json", ".", "loads", "(", "f", ")", ")", "\n", "query_instance", "=", "convert_functional", "(", "query_instance", ")", "\n", "return", "query_instance", ".", "dumps", "\n", "\n", "", "df", "[", "new_form_name", "]", "=", "df", "[", "old_form_name", "]", ".", "map", "(", "grounded_convertor", ")", "\n", "return", "df", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.None.benchmark_sampling.normal_forms_transformation": [[27, 42], ["fol.foq_v2.DeMorgan_replacement", "fol.foq_v2.concate_iu_chains", "formula_generation.convert_to_dnf", "fol.foq_v2.to_d", "fol.foq_v2.to_d", "fol.foq_v2.concate_iu_chains", "result[].sort_sub", "fol.foq_v2.to_D", "fol.foq_v2.decompose_D", "fol.foq_v2.copy_query", "fol.foq_v2.copy_query", "fol.foq_v2.copy_query", "fol.foq_v2.copy_query", "fol.foq_v2.copy_query", "fol.foq_v2.copy_query", "fol.foq_v2.copy_query", "fol.foq_v2.copy_query"], "function", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.DeMorgan_replacement", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.concate_iu_chains", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.None.formula_generation.convert_to_dnf", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.to_d", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.to_d", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.concate_iu_chains", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.sort_sub", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.to_D", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.decompose_D", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.copy_query", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.copy_query", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.copy_query", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.copy_query", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.copy_query", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.copy_query", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.copy_query", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.copy_query"], ["def", "normal_forms_transformation", "(", "query", ")", ":", "\n", "    ", "result", "=", "{", "}", "\n", "# proj, rproj = load_graph()", "\n", "# query.backward_sample()", "\n", "result", "[", "\"original\"", "]", "=", "query", "\n", "result", "[", "\"DeMorgan\"", "]", "=", "DeMorgan_replacement", "(", "copy_query", "(", "result", "[", "\"original\"", "]", ",", "True", ")", ")", "\n", "result", "[", "'DeMorgan+MultiI'", "]", "=", "concate_iu_chains", "(", "copy_query", "(", "result", "[", "\"DeMorgan\"", "]", ",", "True", ")", ")", "\n", "result", "[", "\"DNF\"", "]", "=", "convert_to_dnf", "(", "copy_query", "(", "result", "[", "\"original\"", "]", ",", "True", ")", ")", "\n", "result", "[", "\"diff\"", "]", "=", "to_d", "(", "copy_query", "(", "result", "[", "\"original\"", "]", ",", "True", ")", ")", "\n", "result", "[", "\"DNF+diff\"", "]", "=", "to_d", "(", "copy_query", "(", "result", "[", "\"DNF\"", "]", ",", "True", ")", ")", "\n", "result", "[", "\"DNF+MultiIU\"", "]", "=", "concate_iu_chains", "(", "copy_query", "(", "result", "[", "\"DNF\"", "]", ",", "True", ")", ")", "\n", "result", "[", "'DNF+MultiIU'", "]", ".", "sort_sub", "(", ")", "\n", "result", "[", "\"DNF+MultiIUD\"", "]", "=", "to_D", "(", "copy_query", "(", "result", "[", "\"DNF+MultiIU\"", "]", ",", "True", ")", ")", "\n", "result", "[", "\"DNF+MultiIUd\"", "]", "=", "decompose_D", "(", "copy_query", "(", "result", "[", "\"DNF+MultiIUD\"", "]", ",", "True", ")", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.None.benchmark_sampling.sample_by_row": [[44, 57], ["fol.foq_v2.parse_formula", "fol.foq_v2.parse_formula.backward_sample", "fol.foq_v2.parse_formula.deterministic_query", "query_instance.deterministic_query.difference", "benchmark_sampling.normal_forms_transformation", "results[].deterministic_query", "results[].deterministic_query", "list", "list"], "function", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.parse_formula", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.backward_sample", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.deterministic_query", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.None.benchmark_sampling.normal_forms_transformation", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.deterministic_query", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.deterministic_query"], ["", "def", "sample_by_row", "(", "row", ",", "easy_proj", ",", "easy_rproj", ",", "hard_proj", ",", "meaningful_difference", ":", "bool", "=", "False", ")", ":", "\n", "    ", "query_instance", "=", "parse_formula", "(", "row", ".", "original", ")", "\n", "easy_answers", "=", "query_instance", ".", "backward_sample", "(", "easy_proj", ",", "easy_rproj", ",", "meaningful_difference", "=", "meaningful_difference", ")", "\n", "full_answers", "=", "query_instance", ".", "deterministic_query", "(", "hard_proj", ")", "\n", "hard_answers", "=", "full_answers", ".", "difference", "(", "easy_answers", ")", "\n", "results", "=", "normal_forms_transformation", "(", "query_instance", ")", "\n", "for", "k", "in", "results", ":", "\n", "        ", "assert", "results", "[", "k", "]", ".", "formula", "==", "row", "[", "k", "]", "\n", "_full_answer", "=", "results", "[", "k", "]", ".", "deterministic_query", "(", "hard_proj", ")", "\n", "assert", "_full_answer", "==", "full_answers", "\n", "_easy_answer", "=", "results", "[", "k", "]", ".", "deterministic_query", "(", "easy_proj", ")", "\n", "assert", "_easy_answer", "==", "easy_answers", "\n", "", "return", "list", "(", "easy_answers", ")", ",", "list", "(", "hard_answers", ")", ",", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.None.benchmark_sampling.sample_by_row_final": [[59, 82], ["fol.foq_v2.parse_formula", "fol.foq_v2.parse_formula.backward_sample", "fol.foq_v2.parse_formula.deterministic_query", "query_instance.backward_sample.difference", "benchmark_sampling.normal_forms_transformation", "list", "list", "fol.foq_v2.parse_formula.deterministic_query", "len"], "function", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.parse_formula", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.backward_sample", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.deterministic_query", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.None.benchmark_sampling.normal_forms_transformation", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.deterministic_query"], ["", "def", "sample_by_row_final", "(", "row", ",", "easy_proj", ",", "hard_proj", ",", "hard_rproj", ",", "meaningful_difference_setting", ":", "str", "=", "'mixed'", ")", ":", "\n", "    ", "while", "True", ":", "\n", "        ", "query_instance", "=", "parse_formula", "(", "row", ".", "original", ")", "\n", "if", "meaningful_difference_setting", "==", "'mixed'", ":", "\n", "            ", "formula", "=", "query_instance", ".", "formula", "\n", "meaningful_difference", "=", "(", "'d'", "in", "formula", "or", "'D'", "in", "formula", "or", "'n'", "in", "formula", ")", "\n", "", "elif", "meaningful_difference_setting", "==", "'fixed_True'", ":", "\n", "            ", "meaningful_difference", "=", "True", "\n", "", "elif", "meaningful_difference_setting", "==", "'fixed_False'", ":", "\n", "            ", "meaningful_difference", "=", "False", "\n", "", "else", ":", "\n", "            ", "assert", "False", ",", "'Invalid setting!'", "\n", "", "full_answers", "=", "query_instance", ".", "backward_sample", "(", "hard_proj", ",", "hard_rproj", ",", "\n", "meaningful_difference", "=", "meaningful_difference", ")", "\n", "assert", "full_answers", "==", "query_instance", ".", "deterministic_query", "(", "hard_proj", ")", "\n", "easy_answers", "=", "query_instance", ".", "deterministic_query", "(", "easy_proj", ")", "\n", "hard_answers", "=", "full_answers", ".", "difference", "(", "easy_answers", ")", "\n", "results", "=", "normal_forms_transformation", "(", "query_instance", ")", "\n", "if", "0", "<", "len", "(", "hard_answers", ")", "<=", "100", ":", "\n", "            ", "break", "\n", "# for key in results:", "\n", "# parse_formula(row[key]).additive_ground(json.loads(results[key].dumps))", "\n", "", "", "return", "list", "(", "easy_answers", ")", ",", "list", "(", "hard_answers", ")", ",", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.None.validation.TensorCollector.__init__": [[73, 78], ["collections.OrderedDict", "collections.OrderedDict", "collections.defaultdict"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "tensor_dict", "=", "OrderedDict", "(", ")", "# ensure the registration follows the calling order", "\n", "self", ".", "grad_dict", "=", "OrderedDict", "(", ")", "\n", "self", ".", "key_counter", "=", "defaultdict", "(", "lambda", ":", "0", ")", "\n", "self", ".", "loss", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.None.validation.TensorCollector.__setitem__": [[79, 86], ["value.retain_grad", "logging.info", "value.register_hook", "logging.info"], "methods", ["None"], ["", "def", "__setitem__", "(", "self", ",", "name", ":", "str", ",", "value", ":", "torch", ".", "Tensor", ")", "->", "None", ":", "\n", "        ", "value", ".", "retain_grad", "(", ")", "\n", "logging", ".", "info", "(", "f\"collect {name} \"", ")", "\n", "self", ".", "tensor_dict", "[", "f\"{name}_{self.key_counter[name]}\"", "]", "=", "value", "\n", "value", ".", "register_hook", "(", "lambda", "grad", ":", "\n", "logging", ".", "info", "(", "f\" grad of {name}\"", ")", ")", "\n", "self", ".", "key_counter", "[", "name", "]", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.None.validation.TensorCollector.__getitem__": [[87, 89], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "name", ":", "str", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "return", "name", ",", "self", ".", "tensor_dict", "[", "name", "]", ",", "self", ".", "grad_dict", "[", "name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.None.validation.TensorCollector.set_loss": [[90, 95], ["torch.autograd.backward", "torch.autograd.backward"], "methods", ["None"], ["", "def", "set_loss", "(", "self", ",", "loss", ")", ":", "\n", "        ", "self", ".", "loss", "=", "loss", "\n", "backward", "(", "self", ".", "loss", ",", "retain_graph", "=", "True", ")", "\n", "for", "k", "in", "self", ".", "tensor_dict", ":", "\n", "            ", "self", ".", "grad_dict", "[", "k", "]", "=", "self", ".", "tensor_dict", "[", "k", "]", ".", "grad", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.None.validation.TensorCollector.iterator": [[96, 99], ["validation.TensorCollector.__getitem__"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.dataset.Subset.__getitem__"], ["", "", "def", "iterator", "(", "self", ")", ":", "\n", "        ", "for", "k", "in", "self", ".", "tensor_dict", ":", "\n", "            ", "yield", "self", ".", "__getitem__", "(", "k", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.None.validation.ref_train_step": [[101, 125], ["KGReasoning.dataloader.SingledirectionalOneShotIterator", "model.train_step", "torch.utils.data.dataloader.DataLoader", "KGReasoning.dataloader.TrainDataset", "len"], "function", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.None.main.train_step"], ["", "", "", "def", "ref_train_step", "(", "beta_train_queries", ":", "List", "[", "Tuple", "[", "str", ",", "Tuple", "]", "]", ",", "\n", "train_answers", ":", "Dict", "[", "Tuple", ",", "Set", "]", ",", "\n", "model", ":", "KGReasoning", ",", "\n", "optimizer", ",", "\n", "nentity", ",", "\n", "nrelation", ",", "\n", "negative_sample_size", ",", "\n", "tc", ")", "->", "Dict", ":", "\n", "    ", "\"\"\"\n    Conduct a train step from KG reasoning\n    \"\"\"", "\n", "train_iterator", "=", "SingledirectionalOneShotIterator", "(", "DataLoader", "(", "\n", "TrainDataset", "(", "beta_train_queries", ",", "\n", "nentity", ",", "\n", "nrelation", ",", "\n", "negative_sample_size", ",", "\n", "train_answers", ")", ",", "\n", "batch_size", "=", "len", "(", "beta_train_queries", ")", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "1", ",", "\n", "collate_fn", "=", "TrainDataset", ".", "collate_fn", "\n", ")", ")", "\n", "log", "=", "model", ".", "train_step", "(", "model", ",", "optimizer", ",", "train_iterator", ",", "args", ",", "tc", "=", "tc", ")", "\n", "return", "log", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.None.validation.our_train_step": [[127, 183], ["optimizer.zero_grad", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.logsigmoid", "torch.logsigmoid", "torch.mean", "torch.mean", "subsampling_weight.sum", "subsampling_weight.sum", "tc.set_loss", "optimizer.step", "fol.parse_formula", "fol.parse_formula.additive_ground", "fol.parse_formula.embedding_estimation", "torch.chunk", "torch.chunk", "torch.distributions.beta.Beta", "torch.distributions.beta.Beta", "model.get_entity_embedding", "model.compute_logit", "torch.cat.append", "model.get_entity_embedding", "model.compute_logit", "torch.cat.append", "json.loads", "pred_alpha.unsqueeze", "pred_beta.unsqueeze", "transform_beta_data.transform_json_query"], "function", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.None.validation.TensorCollector.set_loss", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.parse_formula", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.additive_ground", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.embedding_estimation", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.BoxEstimator.get_entity_embedding", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.BoxEstimator.compute_logit", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.BoxEstimator.get_entity_embedding", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.BoxEstimator.compute_logit", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.transform_beta_data.transform_json_query"], ["", "def", "our_train_step", "(", "batch_train_queries", ",", "\n", "positive_sample", ",", "\n", "negative_sample", ",", "\n", "subsampling_weight", ",", "\n", "model", ":", "BetaEstimator4V", ",", "\n", "optimizer", ",", "\n", "tc", ":", "TensorCollector", ")", "->", "Dict", ":", "\n", "    ", "optimizer", ".", "zero_grad", "(", ")", "\n", "positive_logits", ",", "negative_logits", "=", "[", "]", ",", "[", "]", "\n", "for", "query", ",", "query_structure", "in", "batch_train_queries", ":", "\n", "        ", "query_name", "=", "query_name_dict", "[", "query_structure", "]", "\n", "formula", "=", "beta_query_v2", "[", "query_name", "]", "\n", "query_instance", "=", "parse_formula", "(", "formula", ")", "\n", "query_instance", ".", "additive_ground", "(", "\n", "json", ".", "loads", "(", "\n", "transform_json_query", "(", "query", ",", "query_name", ")", ")", ")", "\n", "pred_embedding", "=", "query_instance", ".", "embedding_estimation", "(", "model", ")", "\n", "pred_alpha", ",", "pred_beta", "=", "torch", ".", "chunk", "(", "pred_embedding", ",", "2", ",", "dim", "=", "-", "1", ")", "\n", "tc", "[", "'pred_alpha'", "]", "=", "pred_alpha", "\n", "tc", "[", "'pred_beta'", "]", "=", "pred_beta", "\n", "pred_dist", "=", "Beta", "(", "pred_alpha", ",", "pred_beta", ")", "\n", "pred_dist_unsqueezed", "=", "Beta", "(", "pred_alpha", ".", "unsqueeze", "(", "1", ")", ",", "\n", "pred_beta", ".", "unsqueeze", "(", "1", ")", ")", "\n", "\n", "positive_embedding", "=", "model", ".", "get_entity_embedding", "(", "positive_sample", ")", "\n", "tc", "[", "'positive_embedding'", "]", "=", "positive_embedding", "\n", "positive_logit", "=", "model", ".", "compute_logit", "(", "positive_embedding", ",", "pred_dist", ")", "\n", "positive_logits", ".", "append", "(", "positive_logit", ")", "\n", "\n", "negative_embedding", "=", "model", ".", "get_entity_embedding", "(", "negative_sample", ")", "\n", "tc", "[", "'negative_embedding'", "]", "=", "negative_embedding", "\n", "\n", "negative_logit", "=", "model", ".", "compute_logit", "(", "negative_embedding", ",", "\n", "pred_dist_unsqueezed", ")", "\n", "negative_logits", ".", "append", "(", "negative_logit", ")", "\n", "\n", "", "positive_logits", "=", "torch", ".", "cat", "(", "positive_logits", ")", "\n", "negative_logits", "=", "torch", ".", "cat", "(", "negative_logits", ")", "\n", "\n", "tc", "[", "'positive_logits'", "]", "=", "positive_logits", "\n", "tc", "[", "'negative_logits'", "]", "=", "negative_logits", "\n", "\n", "positive_score", "=", "F", ".", "logsigmoid", "(", "positive_logits", ")", "\n", "negative_score", "=", "F", ".", "logsigmoid", "(", "-", "negative_logits", ")", "\n", "negative_score", "=", "torch", ".", "mean", "(", "negative_score", ",", "dim", "=", "1", ")", "\n", "pos_loss", "=", "-", "(", "positive_score", "*", "subsampling_weight", ")", ".", "sum", "(", ")", "\n", "neg_loss", "=", "-", "(", "negative_score", "*", "subsampling_weight", ")", ".", "sum", "(", ")", "\n", "pos_loss", "/=", "subsampling_weight", ".", "sum", "(", ")", "\n", "\n", "neg_loss", "/=", "subsampling_weight", ".", "sum", "(", ")", "\n", "\n", "loss", "=", "pos_loss", "+", "neg_loss", "\n", "loss", "/=", "2", "\n", "tc", ".", "set_loss", "(", "loss", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "return", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.None.validation.recursive_getattr": [[184, 190], ["k.split", "getattr"], "function", ["None"], ["", "def", "recursive_getattr", "(", "obj", ",", "k", ")", ":", "\n", "    ", "attr_list", "=", "k", ".", "split", "(", "'.'", ")", "\n", "_obj", "=", "obj", "\n", "for", "attr", "in", "attr_list", ":", "\n", "        ", "_obj", "=", "getattr", "(", "_obj", ",", "attr", ")", "\n", "", "return", "_obj", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.None.validation.model_compare": [[192, 208], ["ref_model.state_dict", "our_model.state_dict", "validation.recursive_getattr", "validation.recursive_getattr", "tensor_diff_keys.append", "grad_diff_keys.append"], "function", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.None.validation.recursive_getattr", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.None.validation.recursive_getattr"], ["", "def", "model_compare", "(", "ref_model", ",", "our_model", ")", ":", "\n", "    ", "ref_state_dict", "=", "ref_model", ".", "state_dict", "(", ")", "\n", "our_state_dict", "=", "our_model", ".", "state_dict", "(", ")", "\n", "tensor_diff_keys", "=", "[", "]", "\n", "grad_diff_keys", "=", "[", "]", "\n", "for", "k", "in", "ref_state_dict", ":", "\n", "        ", "tensor_ref", "=", "ref_state_dict", "[", "k", "]", "\n", "grad_ref", "=", "recursive_getattr", "(", "ref_model", ",", "k", ")", ".", "grad", "\n", "tensor_our", "=", "our_state_dict", "[", "k", "]", "\n", "grad_our", "=", "recursive_getattr", "(", "our_model", ",", "k", ")", ".", "grad", "\n", "if", "not", "(", "tensor_our", "==", "tensor_ref", ")", ".", "all", "(", ")", ":", "\n", "            ", "tensor_diff_keys", ".", "append", "(", "k", ")", "\n", "\n", "", "if", "grad_our", "is", "not", "None", "and", "not", "(", "grad_our", "==", "grad_ref", ")", ".", "all", "(", ")", ":", "\n", "            ", "grad_diff_keys", ".", "append", "(", "k", ")", "\n", "", "", "return", "tensor_diff_keys", ",", "grad_diff_keys", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.graph.print_loss": [[31, 41], ["os.path.join", "pandas.read_csv", "numpy.asarray", "numpy.asarray", "numpy.log", "matplotlib.plot", "matplotlib.ylabel", "matplotlib.xlabel", "matplotlib.show"], "function", ["None"], ["def", "print_loss", "(", "path", ")", ":", "\n", "    ", "data_file", "=", "os", ".", "path", ".", "join", "(", "path", ",", "'train.csv'", ")", "\n", "df", "=", "pd", ".", "read_csv", "(", "data_file", ")", "\n", "loss", "=", "np", ".", "asarray", "(", "df", "[", "'loss'", "]", ")", "\n", "step", "=", "np", ".", "asarray", "(", "df", "[", "'step'", "]", ")", "\n", "loss", "=", "np", ".", "log", "(", "loss", ")", "\n", "plt", ".", "plot", "(", "step", ",", "loss", ")", "\n", "plt", ".", "ylabel", "(", "'loss'", ")", "\n", "plt", ".", "xlabel", "(", "'step'", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.graph.compare_loss": [[43, 65], ["os.path.join", "os.path.join", "numpy.asarray", "min", "matplotlib.plot", "matplotlib.plot", "matplotlib.ylabel", "matplotlib.xlabel", "matplotlib.show", "pandas.read_csv", "pandas.read_csv", "numpy.asarray", "numpy.asarray", "len", "len", "len", "numpy.log", "numpy.log", "numpy.zeros_like"], "function", ["None"], ["", "def", "compare_loss", "(", "path", ",", "path2", ",", "choose_len", "=", "None", ")", ":", "\n", "    ", "data_file", "=", "os", ".", "path", ".", "join", "(", "path", ",", "'train.csv'", ")", "\n", "data_2", "=", "os", ".", "path", ".", "join", "(", "path2", ",", "'beta_train.csv'", ")", "\n", "df", ",", "df2", "=", "pd", ".", "read_csv", "(", "data_file", ")", ",", "pd", ".", "read_csv", "(", "data_2", ")", "\n", "loss", ",", "loss2", "=", "np", ".", "asarray", "(", "df", "[", "'loss'", "]", ")", ",", "np", ".", "asarray", "(", "df2", "[", "'loss'", "]", ")", "\n", "step", "=", "np", ".", "asarray", "(", "df", "[", "'step'", "]", ")", "\n", "minlen", "=", "min", "(", "len", "(", "loss", ")", ",", "len", "(", "loss2", ")", ")", "\n", "if", "choose_len", ":", "\n", "        ", "loss", "=", "loss", "[", ":", "choose_len", "]", "\n", "loss2", "=", "loss2", "[", ":", "choose_len", "]", "\n", "step", "=", "step", "[", ":", "choose_len", "]", "\n", "", "if", "len", "(", "loss", ")", ">", "minlen", ":", "\n", "        ", "loss", "=", "loss", "[", ":", "minlen", "]", "\n", "", "else", ":", "\n", "        ", "loss2", "=", "loss2", "[", ":", "minlen", "]", "\n", "\n", "", "compare", "=", "np", ".", "log", "(", "loss", ")", "-", "np", ".", "log", "(", "loss2", ")", "\n", "plt", ".", "plot", "(", "step", ",", "compare", ")", "\n", "plt", ".", "plot", "(", "step", ",", "np", ".", "zeros_like", "(", "compare", ")", ",", "color", "=", "'r'", ")", "\n", "plt", ".", "ylabel", "(", "'loss'", ")", "\n", "plt", ".", "xlabel", "(", "'step'", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.graph.log_all_metrics": [[67, 90], ["fol.beta_query_v2.values", "collections.defaultdict", "pandas.DataFrame.from_dict", "pd.DataFrame.from_dict.to_csv", "print", "print", "fol.parse_formula", "os.path.join", "pandas.read_csv", "numpy.asarray", "os.path.join", "collections.defaultdict", "numpy.where", "fol.parse_formula", "sum", "len"], "function", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.parse_formula", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.parse_formula"], ["", "def", "log_all_metrics", "(", "path", ",", "step", ",", "mode", ",", "log_meta_formula", "=", "beta_query_v2", ".", "values", "(", ")", ")", ":", "\n", "    ", "log", "=", "collections", ".", "defaultdict", "(", "lambda", ":", "collections", ".", "defaultdict", "(", "float", ")", ")", "\n", "\n", "for", "meta_formula", "in", "log_meta_formula", ":", "\n", "# if meta_formula != 'p(e)|p(e)' and meta_formula != 'p(p(e)|p(e))':", "\n", "        ", "foq_instance", "=", "parse_formula", "(", "meta_formula", ")", "\n", "foq_formula", "=", "foq_instance", ".", "formula", "\n", "data_file", "=", "os", ".", "path", ".", "join", "(", "path", ",", "f'eval_{mode}_{foq_formula}.csv'", ")", "\n", "df", "=", "pd", ".", "read_csv", "(", "data_file", ")", "\n", "step_range", "=", "np", ".", "asarray", "(", "df", "[", "'step'", "]", ")", "\n", "step_index", "=", "np", ".", "where", "(", "step_range", "==", "step", ")", "[", "0", "]", "\n", "for", "metric", "in", "df", ".", "columns", ":", "\n", "            ", "if", "metric", "!=", "'step'", ":", "\n", "                ", "log", "[", "metric", "]", "[", "foq_formula", "]", "=", "df", "[", "metric", "]", "[", "step_index", "]", ".", "values", "[", "0", "]", "\n", "", "", "", "averaged_metric", "=", "{", "}", "\n", "averaged_my_formula", "=", "[", "parse_formula", "(", "formula", ")", ".", "formula", "for", "formula", "in", "log_meta_formula", "]", "\n", "for", "metric", "in", "log", ":", "\n", "        ", "averaged_metric", "[", "metric", "]", "=", "sum", "(", "[", "log", "[", "metric", "]", "[", "foq_formula", "]", "for", "foq_formula", "in", "averaged_my_formula", "]", ")", "/", "len", "(", "averaged_my_formula", ")", "\n", "", "all_data", "=", "pd", ".", "DataFrame", ".", "from_dict", "(", "log", ")", "\n", "all_data", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "path", ",", "f'eval_{mode}_{step}_average.csv'", ")", ")", "\n", "print", "(", "all_data", ")", "\n", "print", "(", "averaged_metric", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.graph.read_beta_log": [[119, 179], ["fol.beta_query_v2.values", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "os.path.join", "pandas.DataFrame.from_dict", "pd.DataFrame.from_dict.to_csv", "eval", "print", "open", "f.readlines", "os.path.join", "pandas.DataFrame.from_dict", "pd.DataFrame.from_dict.to_csv", "pandas.DataFrame.from_dict", "pd.DataFrame.from_dict.to_csv", "print", "print", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "os.path.join", "os.path.join", "pandas.DataFrame.from_dict", "fol.parse_formula", "line[].split.split", "sum", "len", "collections.defaultdict", "collections.defaultdict", "eval", "eval", "line[].split.split", "eval", "eval", "line[].split.split", "eval", "eval", "line[].split", "eval", "eval", "fol.parse_formula", "[].append", "line[].split", "eval", "eval", "fol.parse_formula", "[].append"], "function", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.parse_formula", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.parse_formula", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.parse_formula"], ["def", "read_beta_log", "(", "path", ",", "mode", "=", "'test'", ",", "chosen_step", "=", "None", ",", "averaged_meta_formula", "=", "beta_query_v2", ".", "values", "(", ")", ")", ":", "\n", "    ", "train_log", "=", "collections", ".", "defaultdict", "(", "lambda", ":", "collections", ".", "defaultdict", "(", "float", ")", ")", "\n", "valid_log", "=", "collections", ".", "defaultdict", "(", "lambda", ":", "collections", ".", "defaultdict", "(", "lambda", ":", "collections", ".", "defaultdict", "(", "float", ")", ")", ")", "\n", "test_log", "=", "collections", ".", "defaultdict", "(", "lambda", ":", "collections", ".", "defaultdict", "(", "lambda", ":", "collections", ".", "defaultdict", "(", "float", ")", ")", ")", "\n", "beta_valid", "=", "collections", ".", "defaultdict", "(", "lambda", ":", "collections", ".", "defaultdict", "(", "list", ")", ")", "\n", "beta_test", "=", "collections", ".", "defaultdict", "(", "lambda", ":", "collections", ".", "defaultdict", "(", "list", ")", ")", "\n", "beta_log_path", "=", "os", ".", "path", ".", "join", "(", "path", ",", "'train.log'", ")", "\n", "with", "open", "(", "beta_log_path", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "\n", "            ", "if", "line", "[", "29", ":", "50", "]", "==", "'Training average loss'", ":", "\n", "                ", "info", "=", "line", "[", "58", ":", "]", "\n", "step", ",", "score", "=", "info", ".", "split", "(", "':'", ")", "\n", "step", ",", "score", "=", "eval", "(", "step", ")", ",", "eval", "(", "score", ")", "\n", "train_log", "[", "'loss'", "]", "[", "step", "]", "=", "score", "\n", "", "elif", "line", "[", "29", ":", "54", "]", "==", "'Training average positive'", ":", "\n", "                ", "info", "=", "line", "[", "75", ":", "]", "\n", "step", ",", "score", "=", "info", ".", "split", "(", "':'", ")", "\n", "step", ",", "score", "=", "eval", "(", "step", ")", ",", "eval", "(", "score", ")", "\n", "train_log", "[", "'positive_loss'", "]", "[", "step", "]", "=", "score", "\n", "", "elif", "line", "[", "29", ":", "54", "]", "==", "'Training average negative'", ":", "\n", "                ", "info", "=", "line", "[", "75", ":", "]", "\n", "step", ",", "score", "=", "info", ".", "split", "(", "':'", ")", "\n", "step", ",", "score", "=", "eval", "(", "step", ")", ",", "eval", "(", "score", ")", "\n", "train_log", "[", "'negative_loss'", "]", "[", "step", "]", "=", "score", "\n", "", "elif", "line", "[", "29", ":", "35", "]", "==", "'Valid '", ":", "\n", "                ", "info", "=", "line", "[", "35", ":", "]", ".", "split", "(", "' '", ")", "\n", "beta_name", ",", "metric", ",", "step", ",", "score", "=", "info", "[", "0", "]", ",", "info", "[", "1", "]", ",", "eval", "(", "info", "[", "4", "]", "[", ":", "-", "1", "]", ")", ",", "eval", "(", "info", "[", "5", "]", ")", "\n", "if", "beta_name", "in", "beta_query_v2", ":", "\n", "                    ", "foq_instance", "=", "parse_formula", "(", "beta_query_v2", "[", "beta_name", "]", ")", "\n", "foq_formula", "=", "foq_instance", ".", "formula", "\n", "valid_log", "[", "step", "]", "[", "metric", "]", "[", "foq_formula", "]", "=", "score", "\n", "beta_valid", "[", "foq_formula", "]", "[", "metric", "]", ".", "append", "(", "score", ")", "\n", "", "", "elif", "line", "[", "29", ":", "34", "]", "==", "'Test '", "and", "line", "[", "34", ":", "38", "]", "!=", "'info'", ":", "\n", "                ", "info", "=", "line", "[", "34", ":", "]", ".", "split", "(", "' '", ")", "\n", "beta_name", ",", "metric", ",", "step", ",", "score", "=", "info", "[", "0", "]", ",", "info", "[", "1", "]", ",", "eval", "(", "info", "[", "4", "]", "[", ":", "-", "1", "]", ")", ",", "eval", "(", "info", "[", "5", "]", ")", "\n", "if", "beta_name", "in", "beta_query_v2", ":", "\n", "                    ", "foq_instance", "=", "parse_formula", "(", "beta_query_v2", "[", "beta_name", "]", ")", "\n", "foq_formula", "=", "foq_instance", ".", "formula", "\n", "test_log", "[", "step", "]", "[", "metric", "]", "[", "foq_formula", "]", "=", "score", "\n", "beta_test", "[", "foq_formula", "]", "[", "metric", "]", ".", "append", "(", "score", ")", "\n", "", "", "", "", "train_data", "=", "pd", ".", "DataFrame", ".", "from_dict", "(", "train_log", ")", "\n", "train_data", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'beta_train.csv'", ")", ")", "\n", "# print(pd.DataFrame.from_dict(valid_log[chosen_step]))", "\n", "for", "step", "in", "eval", "(", "f'{mode}_log'", ")", ":", "\n", "        ", "valid_data", "=", "pd", ".", "DataFrame", ".", "from_dict", "(", "valid_log", "[", "step", "]", ")", "\n", "valid_data", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "path", ",", "f'beta_valid_{step}.csv'", ")", ")", "\n", "test_data", "=", "pd", ".", "DataFrame", ".", "from_dict", "(", "test_log", "[", "step", "]", ")", "\n", "test_data", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "path", ",", "f'beta_test_{step}.csv'", ")", ")", "\n", "", "if", "chosen_step", "is", "not", "None", ":", "\n", "        ", "print", "(", "pd", ".", "DataFrame", ".", "from_dict", "(", "test_log", "[", "chosen_step", "]", ")", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "test_data", ")", "\n", "", "averaged_metric", "=", "{", "}", "\n", "averaged_my_formula", "=", "[", "parse_formula", "(", "formula", ")", ".", "formula", "for", "formula", "in", "averaged_meta_formula", "]", "\n", "for", "metric", "in", "test_log", "[", "15000", "]", ":", "\n", "        ", "if", "chosen_step", "is", "not", "None", ":", "\n", "            ", "averaged_metric", "[", "metric", "]", "=", "sum", "(", "[", "test_log", "[", "chosen_step", "]", "[", "metric", "]", "[", "foq_formula", "]", "\n", "for", "foq_formula", "in", "averaged_my_formula", "]", ")", "/", "len", "(", "averaged_meta_formula", ")", "\n", "", "", "print", "(", "averaged_metric", ")", "\n", "return", "train_log", ",", "beta_valid", ",", "beta_test", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.graph.read_logic_log": [[181, 241], ["fol.beta_query_v2.values", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "os.path.join", "pandas.DataFrame.from_dict", "pd.DataFrame.from_dict.to_csv", "eval", "print", "open", "f.readlines", "os.path.join", "pandas.DataFrame.from_dict", "pd.DataFrame.from_dict.to_csv", "pandas.DataFrame.from_dict", "pd.DataFrame.from_dict.to_csv", "print", "print", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "os.path.join", "os.path.join", "pandas.DataFrame.from_dict", "fol.parse_formula", "line[].split.split", "sum", "len", "collections.defaultdict", "collections.defaultdict", "eval", "eval", "line[].split.split", "eval", "eval", "line[].split.split", "eval", "eval", "line[].split", "eval", "eval", "fol.parse_formula", "[].append", "line[].split", "eval", "eval", "fol.parse_formula", "[].append"], "function", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.parse_formula", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.parse_formula", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.parse_formula"], ["", "def", "read_logic_log", "(", "path", ",", "mode", "=", "'test'", ",", "chosen_step", "=", "None", ",", "averaged_meta_formula", "=", "beta_query_v2", ".", "values", "(", ")", ")", ":", "\n", "    ", "train_log", "=", "collections", ".", "defaultdict", "(", "lambda", ":", "collections", ".", "defaultdict", "(", "float", ")", ")", "\n", "valid_log", "=", "collections", ".", "defaultdict", "(", "lambda", ":", "collections", ".", "defaultdict", "(", "lambda", ":", "collections", ".", "defaultdict", "(", "float", ")", ")", ")", "\n", "test_log", "=", "collections", ".", "defaultdict", "(", "lambda", ":", "collections", ".", "defaultdict", "(", "lambda", ":", "collections", ".", "defaultdict", "(", "float", ")", ")", ")", "\n", "logic_valid", "=", "collections", ".", "defaultdict", "(", "lambda", ":", "collections", ".", "defaultdict", "(", "list", ")", ")", "\n", "logic_test", "=", "collections", ".", "defaultdict", "(", "lambda", ":", "collections", ".", "defaultdict", "(", "list", ")", ")", "\n", "beta_log_path", "=", "os", ".", "path", ".", "join", "(", "path", ",", "'train.log'", ")", "\n", "with", "open", "(", "beta_log_path", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "\n", "            ", "if", "line", "[", "29", ":", "50", "]", "==", "'Training average loss'", ":", "\n", "                ", "info", "=", "line", "[", "58", ":", "]", "\n", "step", ",", "score", "=", "info", ".", "split", "(", "':'", ")", "\n", "step", ",", "score", "=", "eval", "(", "step", ")", ",", "eval", "(", "score", ")", "\n", "train_log", "[", "'loss'", "]", "[", "step", "]", "=", "score", "\n", "", "elif", "line", "[", "29", ":", "61", "]", "==", "'Training average positive_sample'", ":", "\n", "                ", "info", "=", "line", "[", "75", ":", "]", "\n", "step", ",", "score", "=", "info", ".", "split", "(", "':'", ")", "\n", "step", ",", "score", "=", "eval", "(", "step", ")", ",", "eval", "(", "score", ")", "\n", "train_log", "[", "'positive_loss'", "]", "[", "step", "]", "=", "score", "\n", "", "elif", "line", "[", "29", ":", "61", "]", "==", "'Training average negative_sample'", ":", "\n", "                ", "info", "=", "line", "[", "75", ":", "]", "\n", "step", ",", "score", "=", "info", ".", "split", "(", "':'", ")", "\n", "step", ",", "score", "=", "eval", "(", "step", ")", ",", "eval", "(", "score", ")", "\n", "train_log", "[", "'negative_loss'", "]", "[", "step", "]", "=", "score", "\n", "", "elif", "line", "[", "29", ":", "35", "]", "==", "'Valid '", ":", "\n", "                ", "info", "=", "line", "[", "35", ":", "]", ".", "split", "(", "' '", ")", "\n", "beta_name", ",", "metric", ",", "step", ",", "score", "=", "info", "[", "0", "]", ",", "info", "[", "1", "]", ",", "eval", "(", "info", "[", "4", "]", "[", ":", "-", "1", "]", ")", ",", "eval", "(", "info", "[", "5", "]", ")", "\n", "if", "beta_name", "in", "beta_query_v2", ":", "\n", "                    ", "foq_instance", "=", "parse_formula", "(", "beta_query_v2", "[", "beta_name", "]", ")", "\n", "foq_formula", "=", "foq_instance", ".", "formula", "\n", "valid_log", "[", "step", "]", "[", "metric", "]", "[", "foq_formula", "]", "=", "score", "\n", "logic_valid", "[", "foq_formula", "]", "[", "metric", "]", ".", "append", "(", "score", ")", "\n", "", "", "elif", "line", "[", "29", ":", "34", "]", "==", "'Test '", "and", "line", "[", "34", ":", "38", "]", "!=", "'info'", ":", "\n", "                ", "info", "=", "line", "[", "34", ":", "]", ".", "split", "(", "' '", ")", "\n", "beta_name", ",", "metric", ",", "step", ",", "score", "=", "info", "[", "0", "]", ",", "info", "[", "1", "]", ",", "eval", "(", "info", "[", "4", "]", "[", ":", "-", "1", "]", ")", ",", "eval", "(", "info", "[", "5", "]", ")", "\n", "if", "beta_name", "in", "beta_query_v2", ":", "\n", "                    ", "foq_instance", "=", "parse_formula", "(", "beta_query_v2", "[", "beta_name", "]", ")", "\n", "foq_formula", "=", "foq_instance", ".", "formula", "\n", "test_log", "[", "step", "]", "[", "metric", "]", "[", "foq_formula", "]", "=", "score", "\n", "logic_test", "[", "foq_formula", "]", "[", "metric", "]", ".", "append", "(", "score", ")", "\n", "", "", "", "", "train_data", "=", "pd", ".", "DataFrame", ".", "from_dict", "(", "train_log", ")", "\n", "train_data", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'beta_train.csv'", ")", ")", "\n", "# print(pd.DataFrame.from_dict(valid_log[chosen_step]))", "\n", "for", "step", "in", "eval", "(", "f'{mode}_log'", ")", ":", "\n", "        ", "valid_data", "=", "pd", ".", "DataFrame", ".", "from_dict", "(", "valid_log", "[", "step", "]", ")", "\n", "valid_data", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "path", ",", "f'logic_valid_{step}.csv'", ")", ")", "\n", "test_data", "=", "pd", ".", "DataFrame", ".", "from_dict", "(", "test_log", "[", "step", "]", ")", "\n", "test_data", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "path", ",", "f'logic_test_{step}.csv'", ")", ")", "\n", "", "if", "chosen_step", "is", "not", "None", ":", "\n", "        ", "print", "(", "pd", ".", "DataFrame", ".", "from_dict", "(", "test_log", "[", "chosen_step", "]", ")", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "test_data", ")", "\n", "", "averaged_metric", "=", "{", "}", "\n", "averaged_my_formula", "=", "[", "parse_formula", "(", "formula", ")", ".", "formula", "for", "formula", "in", "averaged_meta_formula", "]", "\n", "for", "metric", "in", "test_log", "[", "15000", "]", ":", "\n", "        ", "if", "chosen_step", "is", "not", "None", ":", "\n", "            ", "averaged_metric", "[", "metric", "]", "=", "sum", "(", "[", "test_log", "[", "chosen_step", "]", "[", "metric", "]", "[", "foq_formula", "]", "\n", "for", "foq_formula", "in", "averaged_my_formula", "]", ")", "/", "len", "(", "averaged_meta_formula", ")", "\n", "", "", "print", "(", "averaged_metric", ")", "\n", "return", "train_log", ",", "logic_valid", ",", "logic_test", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.graph.plot_comparison": [[243, 258], ["matplotlib.title", "matplotlib.legend", "matplotlib.show", "fol.parse_formula", "numpy.asarray", "numpy.asarray", "len", "matplotlib.plot", "matplotlib.plot", "numpy.asarray"], "function", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.parse_formula"], ["", "def", "plot_comparison", "(", "beta_log", ",", "my_log", ",", "all_formula", ")", ":", "\n", "# metric in ['MRR', 'HITS1', 'HITS3', 'HITS10']:", "\n", "    ", "for", "metric", "in", "[", "'MRR'", "]", ":", "\n", "        ", "for", "meta_formula", "in", "all_formula", ":", "\n", "            ", "foq_instance", "=", "parse_formula", "(", "beta_query_v2", "[", "meta_formula", "]", ")", "\n", "foq_formula", "=", "foq_instance", ".", "formula", "\n", "beta_score", "=", "np", ".", "asarray", "(", "beta_log", "[", "foq_formula", "]", "[", "metric", "]", ")", "\n", "my_score", "=", "np", ".", "asarray", "(", "my_log", "[", "foq_formula", "]", "[", "metric", "]", ")", "\n", "n", "=", "len", "(", "my_score", ")", "\n", "beta_plot_step", "=", "np", ".", "asarray", "(", "beta_step", ")", "[", ":", "n", "]", "\n", "plt", ".", "plot", "(", "beta_plot_step", ",", "beta_score", "[", ":", "n", "]", ",", "color", "=", "'red'", ",", "label", "=", "f'{meta_formula}_beta'", ")", "\n", "plt", ".", "plot", "(", "beta_plot_step", ",", "my_score", ",", "linestyle", "=", "':'", ",", "color", "=", "'blue'", ",", "label", "=", "f'{meta_formula}_ours'", ")", "\n", "", "plt", ".", "title", "(", "all_formula", ")", "\n", "plt", ".", "legend", "(", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.graph.comparison": [[260, 278], ["pandas.read_csv", "collections.defaultdict", "collections.defaultdict", "graph.read_beta_log", "os.path.join", "graph.plot_comparison", "graph.plot_comparison", "collections.defaultdict", "collections.defaultdict", "fol.parse_formula", "pandas.read_csv", "eval", "eval", "eval", "eval", "os.path.join", "range", "len", "[].append", "eval"], "function", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.graph.read_beta_log", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.graph.plot_comparison", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.graph.plot_comparison", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.parse_formula"], ["", "", "def", "comparison", "(", "path", ",", "all_meta_formula", ")", ":", "\n", "    ", "our_train", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'train.csv'", ")", ")", "\n", "my_valid", "=", "collections", ".", "defaultdict", "(", "lambda", ":", "collections", ".", "defaultdict", "(", "list", ")", ")", "\n", "my_test", "=", "collections", ".", "defaultdict", "(", "lambda", ":", "collections", ".", "defaultdict", "(", "list", ")", ")", "\n", "beta_train", ",", "beta_valid", ",", "beta_test", "=", "read_beta_log", "(", "path", ")", "\n", "for", "mode", "in", "[", "'valid'", ",", "'test'", "]", ":", "\n", "        ", "for", "meta_formula", "in", "all_meta_formula", ":", "\n", "            ", "foq_instance", "=", "parse_formula", "(", "beta_query_v2", "[", "meta_formula", "]", ")", "\n", "foq_formula", "=", "foq_instance", ".", "formula", "\n", "df", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "path", ",", "f'eval_{mode}_{foq_formula}.csv'", ")", ")", "\n", "for", "metric", "in", "df", ".", "columns", ":", "\n", "                ", "if", "metric", "!=", "'step'", "and", "metric", "!=", "'num_queries'", ":", "\n", "                    ", "for", "i", "in", "range", "(", "len", "(", "df", "[", "metric", "]", ")", ")", ":", "\n", "                        ", "eval", "(", "f'my_{mode}'", ")", "[", "foq_formula", "]", "[", "metric", "]", ".", "append", "(", "df", "[", "metric", "]", "[", "i", "]", ")", "\n", "# plot_comparison(eval(f'beta_{mode}'), eval(f'my_{mode}'), ['1p', '2p', '3p'], mode)", "\n", "# plot_comparison(eval(f'beta_{mode}'), eval(f'my_{mode}'), ['2i', '3i'], mode)", "\n", "", "", "", "", "plot_comparison", "(", "eval", "(", "f'beta_{mode}'", ")", ",", "eval", "(", "f'my_{mode}'", ")", ",", "[", "'1p'", ",", "'2p'", ",", "'2i'", "]", ")", "\n", "plot_comparison", "(", "eval", "(", "f'beta_{mode}'", ")", ",", "eval", "(", "f'my_{mode}'", ")", ",", "[", "'3p'", ",", "'3i'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.graph.typestr2benchmarkname": [[280, 285], ["None"], "function", ["None"], ["", "", "def", "typestr2benchmarkname", "(", "type_str", ":", "str", ",", "mode", "=", "None", ",", "step", "=", "None", ")", ":", "\n", "    ", "if", "mode", ":", "\n", "        ", "return", "f'eval_{mode}_{step}_{type_str}.csv'", "\n", "", "else", ":", "\n", "        ", "return", "f'eval_{type_str}.csv'", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.graph.log_benchmark": [[287, 310], ["collections.defaultdict", "os.path.exists", "pandas.DataFrame.from_dict", "collections.defaultdict", "os.path.join", "pandas.read_csv", "pd.DataFrame.from_dict.to_csv", "pd.DataFrame.from_dict.to_csv", "os.path.join", "os.path.join", "os.path.join", "collections.defaultdict", "range", "len", "graph.typestr2benchmarkname"], "function", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.graph.typestr2benchmarkname"], ["", "", "def", "log_benchmark", "(", "folder_path", ",", "id_list", ",", "typestr2filename", ",", "percentage", "=", "False", ",", "mode", "=", "None", ",", "step", "=", "None", ")", ":", "\n", "    ", "all_log", "=", "collections", ".", "defaultdict", "(", "lambda", ":", "collections", ".", "defaultdict", "(", "lambda", ":", "collections", ".", "defaultdict", "(", "float", ")", ")", ")", "\n", "for", "task_id", "in", "id_list", ":", "\n", "        ", "type_str", "=", "f'type{task_id:04d}'", "\n", "filename", "=", "typestr2filename", "(", "type_str", ",", "mode", ",", "step", ")", "\n", "# real_index = all_formula.loc[all_formula['formula_id'] == f'type{id_str}'].index[0]", "\n", "if", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "folder_path", ",", "filename", ")", ")", ":", "\n", "            ", "single_log", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "folder_path", ",", "filename", ")", ")", "\n", "index2metrics", "=", "single_log", "[", "'Unnamed: 0'", "]", "\n", "for", "normal_form", "in", "single_log", ".", "columns", ":", "\n", "                ", "if", "normal_form", "!=", "'Unnamed: 0'", ":", "\n", "                    ", "for", "index", "in", "range", "(", "len", "(", "single_log", "[", "normal_form", "]", ")", ")", ":", "\n", "                        ", "if", "percentage", "and", "index2metrics", "[", "index", "]", "!=", "'num_queries'", ":", "\n", "                            ", "all_log", "[", "index2metrics", "[", "index", "]", "]", "[", "normal_form", "]", "[", "task_id", "]", "=", "single_log", "[", "normal_form", "]", "[", "index", "]", "*", "100", "\n", "", "else", ":", "\n", "                            ", "all_log", "[", "index2metrics", "[", "index", "]", "]", "[", "normal_form", "]", "[", "task_id", "]", "=", "single_log", "[", "normal_form", "]", "[", "index", "]", "\n", "", "", "", "", "", "", "for", "metric", "in", "all_log", ":", "\n", "        ", "data_metric", "=", "pd", ".", "DataFrame", ".", "from_dict", "(", "all_log", "[", "metric", "]", ")", "\n", "if", "mode", ":", "\n", "            ", "data_metric", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "folder_path", ",", "f'all_formula_{mode}_{step}_{metric}.csv'", ")", ")", "\n", "", "else", ":", "\n", "            ", "data_metric", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "folder_path", ",", "f'all_formula_{metric}.csv'", ")", ")", "\n", "", "", "return", "all_log", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.graph.normal_form_comparison": [[312, 374], ["set", "collections.defaultdict", "sum", "sum", "collections.defaultdict", "collections.defaultdict", "pandas.read_csv", "range", "len", "len", "len", "pandas.DataFrame.from_dict", "pd.DataFrame.from_dict.to_csv", "os.path.join", "len", "os.path.join", "collections.defaultdict", "collections.defaultdict", "str", "str", "str", "str", "set.add", "sum", "len", "sum", "len", "len", "len", "str", "str"], "function", ["None"], ["", "def", "normal_form_comparison", "(", "folder_path", ",", "form1", ",", "form2", ",", "metrics", ",", "save_csv", "=", "False", ",", "percentage", "=", "False", ")", ":", "\n", "    ", "unequal_task", "=", "set", "(", ")", "\n", "form1_log", ",", "form2_log", "=", "collections", ".", "defaultdict", "(", "lambda", ":", "collections", ".", "defaultdict", "(", "float", ")", ")", ",", "collections", ".", "defaultdict", "(", "lambda", ":", "collections", ".", "defaultdict", "(", "float", ")", ")", "\n", "comparison_log", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "for", "metric", "in", "metrics", ":", "\n", "        ", "metric_logging", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "folder_path", ",", "f'all_formula_{metric}.csv'", ")", ")", "\n", "index2taskid", "=", "metric_logging", "[", "'Unnamed: 0'", "]", "\n", "for", "index", "in", "range", "(", "len", "(", "index2taskid", ")", ")", ":", "\n", "            ", "taskid", "=", "index2taskid", "[", "index", "]", "\n", "id_str", "=", "'0'", "*", "(", "4", "-", "len", "(", "str", "(", "taskid", ")", ")", ")", "+", "str", "(", "taskid", ")", "\n", "formula_index", "=", "all_formula_data", ".", "loc", "[", "all_formula_data", "[", "'formula_id'", "]", "==", "f'type{id_str}'", "]", ".", "index", "[", "0", "]", "\n", "formula1", ",", "formula2", "=", "all_formula_data", "[", "form1", "]", "[", "formula_index", "]", ",", "all_formula_data", "[", "form2", "]", "[", "formula_index", "]", "\n", "score1", ",", "score2", "=", "metric_logging", "[", "form1", "]", "[", "index", "]", ",", "metric_logging", "[", "form2", "]", "[", "index", "]", "\n", "if", "formula1", "!=", "formula2", "and", "str", "(", "score1", ")", "!=", "'nan'", "and", "str", "(", "score2", ")", "!=", "'nan'", ":", "\n", "# what if two scores are same", "\n", "                ", "if", "taskid", "not", "in", "unequal_task", ":", "\n", "                    ", "assert", "metric", "==", "metrics", "[", "0", "]", "\n", "unequal_task", ".", "add", "(", "taskid", ")", "\n", "", "form1_log", "[", "metric", "]", "[", "taskid", "]", ",", "form2_log", "[", "metric", "]", "[", "taskid", "]", "=", "score1", ",", "score2", "\n", "", "", "", "if", "len", "(", "unequal_task", ")", ">", "0", ":", "\n", "        ", "for", "metric", "in", "metrics", ":", "\n", "            ", "averaged1", ",", "averaged2", "=", "sum", "(", "form1_log", "[", "metric", "]", "[", "taskid", "]", "for", "taskid", "in", "form1_log", "[", "metric", "]", ")", "/", "len", "(", "form1_log", "[", "metric", "]", ")", ",", "sum", "(", "form2_log", "[", "metric", "]", "[", "taskid", "]", "for", "taskid", "in", "form2_log", "[", "metric", "]", ")", "/", "len", "(", "form2_log", "[", "metric", "]", ")", "\n", "comparison_log", "[", "metric", "]", "=", "[", "averaged1", ",", "averaged2", "]", "\n", "", "", "else", ":", "\n", "        ", "for", "metric", "in", "metrics", ":", "\n", "            ", "comparison_log", "[", "metric", "]", "=", "[", "0", ",", "0", "]", "\n", "", "", "form1_win_rate", "=", "sum", "(", "form1_log", "[", "'MRR'", "]", "[", "taskid", "]", ">", "form2_log", "[", "'MRR'", "]", "[", "taskid", "]", "for", "taskid", "in", "unequal_task", ")", "\n", "form2_win_rate", "=", "sum", "(", "form1_log", "[", "'MRR'", "]", "[", "taskid", "]", "<", "form2_log", "[", "'MRR'", "]", "[", "taskid", "]", "for", "taskid", "in", "unequal_task", ")", "\n", "comparison_log", "[", "'win_rate'", "]", "=", "[", "form1_win_rate", ",", "form2_win_rate", "]", "\n", "comparison_log", "[", "'different_queries'", "]", "=", "[", "len", "(", "unequal_task", ")", ",", "len", "(", "unequal_task", ")", "]", "\n", "if", "save_csv", ":", "\n", "        ", "compare_taskid", "=", "{", "}", "\n", "for", "metric", "in", "metrics", ":", "\n", "            ", "compare_taskid", "[", "f'{form1}_{metric}'", "]", "=", "form1_log", "[", "metric", "]", "\n", "compare_taskid", "[", "f'{form2}_{metric}'", "]", "=", "form2_log", "[", "metric", "]", "\n", "", "compare_taskid", "[", "f'{form1}_formula'", "]", "=", "{", "}", "\n", "compare_taskid", "[", "f'{form2}_formula'", "]", "=", "{", "}", "\n", "compare_taskid", "[", "'winner'", "]", "=", "{", "}", "\n", "for", "taskid", "in", "unequal_task", ":", "\n", "            ", "id_str", "=", "'0'", "*", "(", "4", "-", "len", "(", "str", "(", "taskid", ")", ")", ")", "+", "str", "(", "taskid", ")", "\n", "formula_index", "=", "all_formula_data", ".", "loc", "[", "all_formula_data", "[", "'formula_id'", "]", "==", "f'type{id_str}'", "]", ".", "index", "[", "0", "]", "\n", "formula1", ",", "formula2", "=", "all_formula_data", "[", "form1", "]", "[", "formula_index", "]", ",", "all_formula_data", "[", "form2", "]", "[", "formula_index", "]", "\n", "compare_taskid", "[", "f'{form1}_formula'", "]", "[", "taskid", "]", "=", "formula1", "\n", "compare_taskid", "[", "f'{form2}_formula'", "]", "[", "taskid", "]", "=", "formula2", "\n", "if", "compare_taskid", "[", "f'{form1}_MRR'", "]", "[", "taskid", "]", ">", "compare_taskid", "[", "f'{form2}_MRR'", "]", "[", "taskid", "]", ":", "\n", "                ", "compare_taskid", "[", "'winner'", "]", "[", "taskid", "]", "=", "form1", "\n", "", "elif", "compare_taskid", "[", "f'{form1}_MRR'", "]", "[", "taskid", "]", "<", "compare_taskid", "[", "f'{form2}_MRR'", "]", "[", "taskid", "]", ":", "\n", "                ", "compare_taskid", "[", "'winner'", "]", "[", "taskid", "]", "=", "form2", "\n", "", "else", ":", "\n", "                ", "compare_taskid", "[", "'winner'", "]", "[", "taskid", "]", "=", "'draw'", "\n", "", "", "data", "=", "pd", ".", "DataFrame", ".", "from_dict", "(", "compare_taskid", ")", "\n", "data", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "folder_path", ",", "f'compare_detail_{form1}_{form2}.csv'", ")", ")", "\n", "\n", "", "'''\n    df = pd.DataFrame.from_dict(comparison_log)\n    df.to_csv(os.path.join(folder_path, f'compare_{form1}_{form2}.csv'))\n    '''", "\n", "return", "comparison_log", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.graph.compare_all_form": [[376, 405], ["collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "len", "range", "range", "dm.to_csv", "dn.to_csv", "dw.to_csv", "range", "range", "pandas.DataFrame.from_dict", "pandas.DataFrame.from_dict", "pandas.DataFrame.from_dict", "os.path.join", "os.path.join", "os.path.join", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "graph.normal_form_comparison"], "function", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.graph.normal_form_comparison"], ["", "def", "compare_all_form", "(", "folder_path", ",", "form_list", ",", "metrics", ",", "save_csv", "=", "False", ")", ":", "\n", "    ", "difference_mrr", "=", "collections", ".", "defaultdict", "(", "lambda", ":", "collections", ".", "defaultdict", "(", "list", ")", ")", "\n", "difference_number", "=", "collections", ".", "defaultdict", "(", "lambda", ":", "collections", ".", "defaultdict", "(", "int", ")", ")", "\n", "difference_win_rate", "=", "collections", ".", "defaultdict", "(", "lambda", ":", "collections", ".", "defaultdict", "(", "float", ")", ")", "\n", "n", "=", "len", "(", "form_list", ")", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "n", ")", ":", "\n", "            ", "difference_number", "[", "form_list", "[", "j", "]", "]", "[", "form_list", "[", "i", "]", "]", "=", "0", "\n", "difference_win_rate", "[", "form_list", "[", "j", "]", "]", "[", "form_list", "[", "i", "]", "]", "=", "0", "\n", "", "", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "i", "+", "1", ",", "n", ")", ":", "\n", "            ", "comparison_log", "=", "normal_form_comparison", "(", "folder_path", ",", "form_list", "[", "i", "]", ",", "form_list", "[", "j", "]", ",", "metrics", ",", "save_csv", ")", "\n", "difference_mrr", "[", "form_list", "[", "j", "]", "]", "[", "form_list", "[", "i", "]", "]", "=", "comparison_log", "[", "'MRR'", "]", "\n", "difference_number", "[", "form_list", "[", "j", "]", "]", "[", "form_list", "[", "i", "]", "]", "=", "comparison_log", "[", "'different_queries'", "]", "[", "0", "]", "\n", "difference_number", "[", "form_list", "[", "i", "]", "]", "[", "form_list", "[", "j", "]", "]", "=", "comparison_log", "[", "'different_queries'", "]", "[", "0", "]", "\n", "formj_win", ",", "formi_win", "=", "comparison_log", "[", "'win_rate'", "]", "\n", "if", "formj_win", "+", "formi_win", ">", "0", ":", "\n", "                ", "j_against_i", "=", "formj_win", "/", "(", "formj_win", "+", "formi_win", ")", "*", "100", "\n", "difference_win_rate", "[", "form_list", "[", "j", "]", "]", "[", "form_list", "[", "i", "]", "]", "=", "j_against_i", "\n", "difference_win_rate", "[", "form_list", "[", "i", "]", "]", "[", "form_list", "[", "j", "]", "]", "=", "100", "-", "j_against_i", "\n", "", "else", ":", "\n", "                ", "difference_win_rate", "[", "form_list", "[", "j", "]", "]", "[", "form_list", "[", "i", "]", "]", "=", "0", "\n", "difference_win_rate", "[", "form_list", "[", "i", "]", "]", "[", "form_list", "[", "j", "]", "]", "=", "0", "\n", "\n", "", "", "", "dm", ",", "dn", ",", "dw", "=", "pd", ".", "DataFrame", ".", "from_dict", "(", "difference_mrr", ")", ",", "pd", ".", "DataFrame", ".", "from_dict", "(", "difference_number", ")", ",", "pd", ".", "DataFrame", ".", "from_dict", "(", "difference_win_rate", ")", "\n", "dm", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "folder_path", ",", "f'allmrr_compare.csv'", ")", ")", "\n", "dn", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "folder_path", ",", "f'alllength_compare.csv'", ")", ")", "\n", "dw", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "folder_path", ",", "f'allwin_rate_compare.csv'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.graph.log_benchmark_depth_anchornode": [[407, 449], ["len", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "sum", "range", "pandas.read_csv", "range", "pandas.DataFrame.from_dict", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "range", "os.path.join", "len", "len", "sum", "pd.DataFrame.from_dict.to_csv", "pd.DataFrame.from_dict.to_csv", "str", "[].append", "os.path.join", "os.path.join", "collections.defaultdict", "collections.defaultdict", "sum", "len", "sum", "len", "str"], "function", ["None"], ["", "def", "log_benchmark_depth_anchornode", "(", "folder_path", ",", "support_normal_forms", ",", "metrics", ")", ":", "\n", "    ", "query_type_num", "=", "len", "(", "all_formula_data", "[", "'original'", "]", ")", "\n", "all_logging", "=", "collections", ".", "defaultdict", "(", "lambda", ":", "collections", ".", "defaultdict", "(", "lambda", ":", "collections", ".", "defaultdict", "(", "list", ")", ")", ")", "\n", "averaged_split", "=", "collections", ".", "defaultdict", "(", "lambda", ":", "collections", ".", "defaultdict", "(", "lambda", ":", "collections", ".", "defaultdict", "(", "float", ")", ")", ")", "\n", "averaged_all", "=", "collections", ".", "defaultdict", "(", "lambda", ":", "collections", ".", "defaultdict", "(", "float", ")", ")", "\n", "for", "normal_form", "in", "support_normal_forms", ":", "\n", "        ", "for", "i", "in", "range", "(", "1", ",", "4", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "1", ",", "4", ")", ":", "\n", "                ", "for", "metric", "in", "metrics", ":", "\n", "                    ", "averaged_split", "[", "normal_form", "]", "[", "(", "i", ",", "j", ")", "]", "[", "metric", "]", "=", "0", "\n", "", "", "", "", "for", "metric", "in", "metrics", ":", "\n", "        ", "metric_logging", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "folder_path", ",", "f'all_formula_{metric}.csv'", ")", ")", "\n", "index2taskid", "=", "metric_logging", "[", "'Unnamed: 0'", "]", "\n", "for", "index", "in", "range", "(", "len", "(", "index2taskid", ")", ")", ":", "\n", "            ", "taskid", "=", "index2taskid", "[", "index", "]", "\n", "id_str", "=", "'0'", "*", "(", "4", "-", "len", "(", "str", "(", "taskid", ")", ")", ")", "+", "str", "(", "taskid", ")", "\n", "formula_index", "=", "all_formula_data", ".", "loc", "[", "all_formula_data", "[", "'formula_id'", "]", "==", "f'type{id_str}'", "]", ".", "index", "[", "0", "]", "\n", "depth", "=", "all_formula_data", "[", "'original_depth'", "]", "[", "formula_index", "]", "\n", "anchornode_num", "=", "all_formula_data", "[", "'num_anchor_nodes'", "]", "[", "formula_index", "]", "\n", "for", "normal_form", "in", "support_normal_forms", ":", "\n", "                ", "query_scores", "=", "metric_logging", ".", "loc", "[", "index", "]", "[", "normal_form", "]", "\n", "all_logging", "[", "normal_form", "]", "[", "(", "anchornode_num", ",", "depth", ")", "]", "[", "metric", "]", ".", "append", "(", "query_scores", ")", "\n", "", "", "", "all_number", "=", "sum", "(", "len", "(", "all_logging", "[", "support_normal_forms", "[", "0", "]", "]", "[", "key", "]", "[", "metrics", "[", "0", "]", "]", ")", "\n", "for", "key", "in", "all_logging", "[", "support_normal_forms", "[", "0", "]", "]", ")", "\n", "assert", "all_number", "==", "query_type_num", "# all query type are included", "\n", "for", "normal_form", "in", "support_normal_forms", ":", "\n", "        ", "for", "key", "in", "all_logging", "[", "normal_form", "]", ":", "\n", "            ", "for", "metric", "in", "metrics", ":", "\n", "                ", "averaged_split", "[", "normal_form", "]", "[", "key", "]", "[", "metric", "]", "=", "sum", "(", "all_logging", "[", "normal_form", "]", "[", "key", "]", "[", "metric", "]", ")", "/", "len", "(", "all_logging", "[", "normal_form", "]", "[", "key", "]", "[", "metric", "]", ")", "\n", "", "", "", "for", "normal_form", "in", "support_normal_forms", ":", "\n", "        ", "for", "metric", "in", "metrics", ":", "\n", "            ", "averaged_all", "[", "normal_form", "]", "[", "metric", "]", "=", "sum", "(", "sum", "(", "all_logging", "[", "normal_form", "]", "[", "key", "]", "[", "metric", "]", ")", "\n", "for", "key", "in", "all_logging", "[", "normal_form", "]", ")", "\n", "averaged_all", "[", "normal_form", "]", "[", "metric", "]", "/=", "query_type_num", "\n", "averaged_split", "[", "normal_form", "]", "[", "'average'", "]", "[", "metric", "]", "=", "averaged_all", "[", "normal_form", "]", "[", "metric", "]", "\n", "", "df", "=", "pd", ".", "DataFrame", ".", "from_dict", "(", "averaged_split", "[", "normal_form", "]", ")", "\n", "if", "normal_form", "!=", "'DNF+MultiIUd'", ":", "\n", "            ", "df", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "folder_path", ",", "f'anchornode_depth_of_{normal_form}.csv'", ")", ")", "\n", "", "else", ":", "\n", "            ", "df", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "folder_path", ",", "f'anchornode_depth_of_new_form.csv'", ")", ")", "\n", "", "", "return", "averaged_split", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.graph.answer_statistic": [[451, 490], ["pandas.read_csv", "collections.defaultdict", "collections.defaultdict", "range", "pandas.DataFrame.from_dict", "pd.DataFrame.from_dict.to_csv", "range", "os.path.join", "os.path.join.replace().replace", "os.path.exists", "print", "os.path.join", "collections.defaultdict", "print", "pandas.read_csv", "statistis_grouping[].append", "sum", "len", "len", "os.path.join.replace", "open", "pickle.load", "statistis_grouping[].append", "pd.read_csv.easy_answers.map().tolist", "pd.read_csv.hard_answers.map().tolist", "sum", "len", "sum", "len", "sum", "len", "sum", "len", "pd.read_csv.easy_answers.map", "pd.read_csv.hard_answers.map", "len", "len", "len", "len", "list", "list", "eval", "eval"], "function", ["None"], ["", "def", "answer_statistic", "(", "data_folder", ",", "formula_id_file", ")", ":", "\n", "    ", "formula_id_data", "=", "pd", ".", "read_csv", "(", "formula_id_file", ")", "\n", "query_id_str_list", "=", "formula_id_data", "[", "'formula_id'", "]", "\n", "statistis_grouping", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "statistis_grouping_averaged", "=", "collections", ".", "defaultdict", "(", "lambda", ":", "collections", ".", "defaultdict", "(", "float", ")", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "4", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "1", ",", "4", ")", ":", "\n", "            ", "statistis_grouping", "[", "(", "i", ",", "j", ")", "]", "=", "[", "]", "\n", "", "", "for", "type_str", "in", "query_id_str_list", ":", "\n", "        ", "filename", "=", "os", ".", "path", ".", "join", "(", "data_folder", ",", "f'data-{type_str}.csv'", ")", "\n", "dense", "=", "filename", ".", "replace", "(", "'data'", ",", "'tmp'", ")", ".", "replace", "(", "'csv'", ",", "'pickle'", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "dense", ")", ":", "\n", "            ", "print", "(", "\"load from existed files\"", ",", "type_str", ")", "\n", "with", "open", "(", "dense", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "data", "=", "pickle", ".", "load", "(", "f", ")", "\n", "easy_answer_set", "=", "data", "[", "'easy_answer_set'", "]", "\n", "hard_answer_set", "=", "data", "[", "'hard_answer_set'", "]", "\n", "easy_ans_num", ",", "hard_ans_num", "=", "sum", "(", "len", "(", "easy", ")", "for", "easy", "in", "easy_answer_set", ")", "/", "len", "(", "easy_answer_set", ")", ",", "sum", "(", "len", "(", "hard", ")", "for", "hard", "in", "hard_answer_set", ")", "/", "len", "(", "hard_answer_set", ")", "\n", "formula_index", "=", "formula_id_data", ".", "loc", "[", "formula_id_data", "[", "'formula_id'", "]", "==", "f'{type_str}'", "]", ".", "index", "[", "0", "]", "\n", "depth", "=", "formula_id_data", "[", "'original_depth'", "]", "[", "formula_index", "]", "\n", "anchor_node_num", "=", "formula_id_data", "[", "'num_anchor_nodes'", "]", "[", "formula_index", "]", "\n", "statistis_grouping", "[", "(", "anchor_node_num", ",", "depth", ")", "]", ".", "append", "(", "hard_ans_num", ")", "\n", "", "", "else", ":", "\n", "            ", "query_data", "=", "pd", ".", "read_csv", "(", "filename", ")", "\n", "all_easy_ans", ",", "all_hard_ans", "=", "query_data", ".", "easy_answers", ".", "map", "(", "lambda", "x", ":", "list", "(", "eval", "(", "x", ")", ")", ")", ".", "tolist", "(", ")", ",", "query_data", ".", "hard_answers", ".", "map", "(", "lambda", "x", ":", "list", "(", "eval", "(", "x", ")", ")", ")", ".", "tolist", "(", ")", "\n", "easy_ans_num", ",", "hard_ans_num", "=", "sum", "(", "len", "(", "easy", ")", "for", "easy", "in", "all_easy_ans", ")", "/", "len", "(", "all_easy_ans", ")", ",", "sum", "(", "len", "(", "hard", ")", "for", "hard", "in", "all_hard_ans", ")", "/", "len", "(", "all_hard_ans", ")", "\n", "formula_index", "=", "formula_id_data", ".", "loc", "[", "formula_id_data", "[", "'formula_id'", "]", "==", "f'{type_str}'", "]", ".", "index", "[", "0", "]", "\n", "depth", "=", "formula_id_data", "[", "'original_depth'", "]", "[", "formula_index", "]", "\n", "anchor_node_num", "=", "formula_id_data", "[", "'num_anchor_nodes'", "]", "[", "formula_index", "]", "\n", "statistis_grouping", "[", "(", "anchor_node_num", ",", "depth", ")", "]", ".", "append", "(", "hard_ans_num", ")", "\n", "\n", "", "", "for", "key", "in", "statistis_grouping", ":", "\n", "        ", "statistis_grouping_averaged", "[", "key", "]", "[", "'hard'", "]", "=", "sum", "(", "statistis_grouping", "[", "key", "]", ")", "/", "len", "(", "statistis_grouping", "[", "key", "]", ")", "\n", "print", "(", "key", ",", "len", "(", "statistis_grouping", "[", "key", "]", ")", ")", "\n", "", "data_averaged", "=", "pd", ".", "DataFrame", ".", "from_dict", "(", "statistis_grouping_averaged", ")", "\n", "data_averaged", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "data_folder", ",", "'size_statistics_grouping_formhard.csv'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.transform_beta_data.transform_query": [[29, 82], ["print"], "function", ["None"], ["(", "(", "'e'", ",", "(", "'r'", ",", ")", ")", ",", "(", "'e'", ",", "(", "'r'", ",", ")", ")", ",", "(", "'u'", ",", ")", ")", ":", "'2u'", ",", "\n", "(", "(", "(", "'e'", ",", "(", "'r'", ",", ")", ")", ",", "(", "'e'", ",", "(", "'r'", ",", ")", ")", ",", "(", "'u'", ",", ")", ")", ",", "(", "'r'", ",", ")", ")", ":", "'up'", "\n", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.transform_beta_data.transform_json_query": [[84, 137], ["print"], "function", ["None"], ["\n", "\n", "\n", "def", "transform_json_query", "(", "query", ",", "meta_formula", ",", "option", "=", "None", ")", ":", "\n", "    ", "\"\"\" Prepare the dobject accordingly and then dump to json string\n    Only transform into original form.\n    \"\"\"", "\n", "if", "meta_formula", "==", "'1p'", ":", "\n", "        ", "e", ",", "r", "=", "query", "[", "0", "]", ",", "query", "[", "1", "]", "[", "0", "]", "\n", "dobject", "=", "{", "\"o\"", ":", "\"e\"", ",", "\"a\"", ":", "[", "e", "]", "}", "\n", "dobject", "=", "{", "\"o\"", ":", "\"p\"", ",", "\"a\"", ":", "[", "[", "r", "]", ",", "dobject", "]", "}", "\n", "", "elif", "meta_formula", "==", "'2p'", ":", "\n", "        ", "e1", ",", "r1", ",", "r2", "=", "query", "[", "0", "]", ",", "query", "[", "1", "]", "[", "0", "]", ",", "query", "[", "1", "]", "[", "1", "]", "\n", "dobject", "=", "{", "\"o\"", ":", "\"e\"", ",", "\"a\"", ":", "[", "e1", "]", "}", "\n", "dobject", "=", "{", "\"o\"", ":", "\"p\"", ",", "\"a\"", ":", "[", "[", "r1", "]", ",", "dobject", "]", "}", "\n", "dobject", "=", "{", "\"o\"", ":", "\"p\"", ",", "\"a\"", ":", "[", "[", "r2", "]", ",", "dobject", "]", "}", "\n", "", "elif", "meta_formula", "==", "'3p'", ":", "\n", "        ", "e1", ",", "r1", ",", "r2", ",", "r3", "=", "query", "[", "0", "]", ",", "query", "[", "1", "]", "[", "0", "]", ",", "query", "[", "1", "]", "[", "1", "]", ",", "query", "[", "1", "]", "[", "2", "]", "\n", "dobject", "=", "{", "\"o\"", ":", "\"e\"", ",", "\"a\"", ":", "[", "e1", "]", "}", "\n", "dobject", "=", "{", "\"o\"", ":", "\"p\"", ",", "\"a\"", ":", "[", "[", "r1", "]", ",", "dobject", "]", "}", "\n", "dobject", "=", "{", "\"o\"", ":", "\"p\"", ",", "\"a\"", ":", "[", "[", "r2", "]", ",", "dobject", "]", "}", "\n", "dobject", "=", "{", "\"o\"", ":", "\"p\"", ",", "\"a\"", ":", "[", "[", "r3", "]", ",", "dobject", "]", "}", "\n", "", "elif", "meta_formula", "==", "'2i'", ":", "\n", "        ", "e1", ",", "e2", ",", "r1", ",", "r2", "=", "query", "[", "0", "]", "[", "0", "]", ",", "query", "[", "1", "]", "[", "0", "]", ",", "query", "[", "0", "]", "[", "1", "]", "[", "0", "]", ",", "query", "[", "1", "]", "[", "1", "]", "[", "0", "]", "\n", "dobject1", "=", "{", "\"o\"", ":", "\"e\"", ",", "\"a\"", ":", "[", "e1", "]", "}", "\n", "dobject1", "=", "{", "\"o\"", ":", "\"p\"", ",", "\"a\"", ":", "[", "[", "r1", "]", ",", "dobject1", "]", "}", "\n", "dobject2", "=", "{", "\"o\"", ":", "\"e\"", ",", "\"a\"", ":", "[", "e2", "]", "}", "\n", "dobject2", "=", "{", "\"o\"", ":", "\"p\"", ",", "\"a\"", ":", "[", "[", "r2", "]", ",", "dobject2", "]", "}", "\n", "dobject", "=", "{", "\"o\"", ":", "\"i\"", ",", "\"a\"", ":", "[", "dobject1", ",", "dobject2", "]", "}", "\n", "", "elif", "meta_formula", "==", "'3i'", ":", "\n", "        ", "e1", ",", "e2", ",", "e3", ",", "r1", ",", "r2", ",", "r3", "=", "query", "[", "0", "]", "[", "0", "]", ",", "query", "[", "1", "]", "[", "0", "]", ",", "query", "[", "2", "]", "[", "0", "]", ",", "query", "[", "0", "]", "[", "1", "]", "[", "0", "]", ",", "query", "[", "1", "]", "[", "1", "]", "[", "0", "]", ",", "query", "[", "2", "]", "[", "1", "]", "[", "0", "]", "\n", "dobject1", "=", "{", "\"o\"", ":", "\"e\"", ",", "\"a\"", ":", "[", "e1", "]", "}", "\n", "dobject1", "=", "{", "\"o\"", ":", "\"p\"", ",", "\"a\"", ":", "[", "[", "r1", "]", ",", "dobject1", "]", "}", "\n", "dobject2", "=", "{", "\"o\"", ":", "\"e\"", ",", "\"a\"", ":", "[", "e2", "]", "}", "\n", "dobject2", "=", "{", "\"o\"", ":", "\"p\"", ",", "\"a\"", ":", "[", "[", "r2", "]", ",", "dobject2", "]", "}", "\n", "dobject3", "=", "{", "\"o\"", ":", "\"e\"", ",", "\"a\"", ":", "[", "e3", "]", "}", "\n", "dobject3", "=", "{", "\"o\"", ":", "\"p\"", ",", "\"a\"", ":", "[", "[", "r3", "]", ",", "dobject3", "]", "}", "\n", "if", "option", "==", "\"binary\"", ":", "\n", "            ", "dobject", "=", "{", "\"o\"", ":", "\"i\"", ",", "\"a\"", ":", "[", "dobject1", ",", "dobject2", "]", "}", "\n", "dobject", "=", "{", "\"o\"", ":", "\"i\"", ",", "\"a\"", ":", "[", "dobject", ",", "dobject3", "]", "}", "\n", "", "else", ":", "\n", "            ", "dobject", "=", "{", "\"o\"", ":", "\"I\"", ",", "\"a\"", ":", "[", "dobject1", ",", "dobject2", ",", "dobject3", "]", "}", "\n", "", "", "elif", "meta_formula", "==", "'ip'", ":", "\n", "        ", "e1", ",", "e2", ",", "r1", ",", "r2", ",", "r3", "=", "query", "[", "0", "]", "[", "0", "]", "[", "0", "]", ",", "query", "[", "0", "]", "[", "1", "]", "[", "0", "]", ",", "query", "[", "0", "]", "[", "0", "]", "[", "1", "]", "[", "0", "]", ",", "query", "[", "0", "]", "[", "1", "]", "[", "1", "]", "[", "0", "]", ",", "query", "[", "1", "]", "[", "0", "]", "\n", "dobject1", "=", "{", "\"o\"", ":", "\"e\"", ",", "\"a\"", ":", "[", "e1", "]", "}", "\n", "dobject1", "=", "{", "\"o\"", ":", "\"p\"", ",", "\"a\"", ":", "[", "[", "r1", "]", ",", "dobject1", "]", "}", "\n", "dobject2", "=", "{", "\"o\"", ":", "\"e\"", ",", "\"a\"", ":", "[", "e2", "]", "}", "\n", "dobject2", "=", "{", "\"o\"", ":", "\"p\"", ",", "\"a\"", ":", "[", "[", "r2", "]", ",", "dobject2", "]", "}", "\n", "dobject", "=", "{", "\"o\"", ":", "\"i\"", ",", "\"a\"", ":", "[", "dobject1", ",", "dobject2", "]", "}", "\n", "dobject", "=", "{", "\"o\"", ":", "\"p\"", ",", "\"a\"", ":", "[", "[", "r3", "]", ",", "dobject", "]", "}", "\n", "", "elif", "meta_formula", "==", "'pi'", ":", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.transform_beta_data.store_json_query_with_check": [[139, 171], ["queries.keys", "collections.defaultdict", "print", "enumerate", "pd.DataFrame", "os.path.join", "pd.DataFrame.to_csv", "transform_beta_data.transform_json_query", "fol.foq_v2.parse_formula", "fol.foq_v2.parse_formula.additive_ground", "fol.foq_v2.parse_formula.deterministic_query", "my_train_data[].append", "my_train_data[].append", "json.loads", "fol.foq_v2.parse_formula.deterministic_query", "print", "print", "my_train_data[].append", "my_train_data[].append", "my_train_data[].append"], "function", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.transform_beta_data.transform_json_query", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.parse_formula", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.additive_ground", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.deterministic_query", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.deterministic_query"], ["dobject1", "=", "{", "\"o\"", ":", "\"e\"", ",", "\"a\"", ":", "[", "e1", "]", "}", "\n", "dobject1", "=", "{", "\"o\"", ":", "\"p\"", ",", "\"a\"", ":", "[", "[", "r1", "]", ",", "dobject1", "]", "}", "\n", "dobject1", "=", "{", "\"o\"", ":", "\"p\"", ",", "\"a\"", ":", "[", "[", "r2", "]", ",", "dobject1", "]", "}", "\n", "dobject2", "=", "{", "\"o\"", ":", "\"e\"", ",", "\"a\"", ":", "[", "e2", "]", "}", "\n", "dobject2", "=", "{", "\"o\"", ":", "\"p\"", ",", "\"a\"", ":", "[", "[", "r3", "]", ",", "dobject2", "]", "}", "\n", "dobject", "=", "{", "\"o\"", ":", "\"i\"", ",", "\"a\"", ":", "[", "dobject2", ",", "dobject1", "]", "}", "\n", "", "elif", "meta_formula", "==", "'2in'", ":", "\n", "        ", "e1", ",", "e2", ",", "r1", ",", "r2", "=", "query", "[", "0", "]", "[", "0", "]", ",", "query", "[", "1", "]", "[", "0", "]", ",", "query", "[", "0", "]", "[", "1", "]", "[", "0", "]", ",", "query", "[", "1", "]", "[", "1", "]", "[", "0", "]", "\n", "dobject1", "=", "{", "\"o\"", ":", "\"e\"", ",", "\"a\"", ":", "[", "e1", "]", "}", "\n", "dobject1", "=", "{", "\"o\"", ":", "\"p\"", ",", "\"a\"", ":", "[", "[", "r1", "]", ",", "dobject1", "]", "}", "\n", "dobject2", "=", "{", "\"o\"", ":", "\"e\"", ",", "\"a\"", ":", "[", "e2", "]", "}", "\n", "dobject2", "=", "{", "\"o\"", ":", "\"p\"", ",", "\"a\"", ":", "[", "[", "r2", "]", ",", "dobject2", "]", "}", "\n", "dobject2", "=", "{", "\"o\"", ":", "\"n\"", ",", "\"a\"", ":", "dobject2", "}", "\n", "dobject", "=", "{", "\"o\"", ":", "\"i\"", ",", "\"a\"", ":", "[", "dobject2", ",", "dobject1", "]", "}", "\n", "", "elif", "meta_formula", "==", "'3in'", ":", "\n", "        ", "e1", ",", "e2", ",", "e3", ",", "r1", ",", "r2", ",", "r3", "=", "query", "[", "0", "]", "[", "0", "]", ",", "query", "[", "1", "]", "[", "0", "]", ",", "query", "[", "2", "]", "[", "0", "]", ",", "query", "[", "0", "]", "[", "1", "]", "[", "0", "]", ",", "query", "[", "1", "]", "[", "1", "]", "[", "0", "]", ",", "query", "[", "2", "]", "[", "1", "]", "[", "0", "]", "\n", "dobject1", "=", "{", "\"o\"", ":", "\"e\"", ",", "\"a\"", ":", "[", "e1", "]", "}", "\n", "dobject1", "=", "{", "\"o\"", ":", "\"p\"", ",", "\"a\"", ":", "[", "[", "r1", "]", ",", "dobject1", "]", "}", "\n", "dobject2", "=", "{", "\"o\"", ":", "\"e\"", ",", "\"a\"", ":", "[", "e2", "]", "}", "\n", "dobject2", "=", "{", "\"o\"", ":", "\"p\"", ",", "\"a\"", ":", "[", "[", "r2", "]", ",", "dobject2", "]", "}", "\n", "dobject3", "=", "{", "\"o\"", ":", "\"e\"", ",", "\"a\"", ":", "[", "e3", "]", "}", "\n", "dobject3", "=", "{", "\"o\"", ":", "\"p\"", ",", "\"a\"", ":", "[", "[", "r3", "]", ",", "dobject3", "]", "}", "\n", "dobject3", "=", "{", "\"o\"", ":", "\"n\"", ",", "\"a\"", ":", "dobject3", "}", "\n", "if", "option", "==", "\"binary\"", ":", "\n", "            ", "dobject", "=", "{", "\"o\"", ":", "\"i\"", ",", "\"a\"", ":", "[", "dobject1", ",", "dobject2", "]", "}", "\n", "dobject", "=", "{", "\"o\"", ":", "\"i\"", ",", "\"a\"", ":", "[", "dobject", ",", "dobject3", "]", "}", "\n", "", "else", ":", "\n", "            ", "dobject", "=", "{", "\"o\"", ":", "\"I\"", ",", "\"a\"", ":", "[", "dobject3", ",", "dobject1", ",", "dobject2", "]", "}", "\n", "", "", "elif", "meta_formula", "==", "'inp'", ":", "\n", "        ", "e1", ",", "e2", ",", "r1", ",", "r2", ",", "r3", "=", "query", "[", "0", "]", "[", "0", "]", "[", "0", "]", ",", "query", "[", "0", "]", "[", "1", "]", "[", "0", "]", ",", "query", "[", "0", "]", "[", "0", "]", "[", "1", "]", "[", "0", "]", ",", "query", "[", "0", "]", "[", "1", "]", "[", "1", "]", "[", "0", "]", ",", "query", "[", "1", "]", "[", "0", "]", "\n", "dobject1", "=", "{", "\"o\"", ":", "\"e\"", ",", "\"a\"", ":", "[", "e1", "]", "}", "\n", "dobject1", "=", "{", "\"o\"", ":", "\"p\"", ",", "\"a\"", ":", "[", "[", "r1", "]", ",", "dobject1", "]", "}", "\n", "dobject2", "=", "{", "\"o\"", ":", "\"e\"", ",", "\"a\"", ":", "[", "e2", "]", "}", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.transform_beta_data.store_query_with_check": [[173, 202], ["queries.keys", "collections.defaultdict", "enumerate", "pd.DataFrame", "os.path.join", "pd.DataFrame.to_csv", "transform_beta_data.transform_query", "fol.foq.parse_foq_formula", "fol.foq.parse_foq_formula.deterministic_query", "my_train_data[].append", "my_train_data[].append", "fol.foq.parse_foq_formula.deterministic_query", "print", "print", "my_train_data[].append", "my_train_data[].append", "my_train_data[].append"], "function", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.create_minidataset.transform_query", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.deterministic_query", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.deterministic_query"], ["dobject2", "=", "{", "\"o\"", ":", "\"n\"", ",", "\"a\"", ":", "dobject2", "}", "\n", "dobject", "=", "{", "\"o\"", ":", "\"i\"", ",", "\"a\"", ":", "[", "dobject2", ",", "dobject1", "]", "}", "\n", "dobject", "=", "{", "\"o\"", ":", "\"p\"", ",", "\"a\"", ":", "[", "[", "r3", "]", ",", "dobject", "]", "}", "\n", "", "elif", "meta_formula", "==", "'pin'", ":", "\n", "        ", "e1", ",", "e2", ",", "r1", ",", "r2", ",", "r3", "=", "query", "[", "0", "]", "[", "0", "]", ",", "query", "[", "1", "]", "[", "0", "]", ",", "query", "[", "0", "]", "[", "1", "]", "[", "0", "]", ",", "query", "[", "0", "]", "[", "1", "]", "[", "1", "]", ",", "query", "[", "1", "]", "[", "1", "]", "[", "0", "]", "\n", "dobject1", "=", "{", "\"o\"", ":", "\"e\"", ",", "\"a\"", ":", "[", "e1", "]", "}", "\n", "dobject1", "=", "{", "\"o\"", ":", "\"p\"", ",", "\"a\"", ":", "[", "[", "r1", "]", ",", "dobject1", "]", "}", "\n", "dobject1", "=", "{", "\"o\"", ":", "\"p\"", ",", "\"a\"", ":", "[", "[", "r2", "]", ",", "dobject1", "]", "}", "\n", "dobject2", "=", "{", "\"o\"", ":", "\"e\"", ",", "\"a\"", ":", "[", "e2", "]", "}", "\n", "dobject2", "=", "{", "\"o\"", ":", "\"p\"", ",", "\"a\"", ":", "[", "[", "r3", "]", ",", "dobject2", "]", "}", "\n", "dobject2", "=", "{", "\"o\"", ":", "\"n\"", ",", "\"a\"", ":", "dobject2", "}", "\n", "dobject", "=", "{", "\"o\"", ":", "\"i\"", ",", "\"a\"", ":", "[", "dobject2", ",", "dobject1", "]", "}", "\n", "", "elif", "meta_formula", "==", "'pni'", ":", "\n", "        ", "e1", ",", "e2", ",", "r1", ",", "r2", ",", "r3", "=", "query", "[", "0", "]", "[", "0", "]", ",", "query", "[", "1", "]", "[", "0", "]", ",", "query", "[", "0", "]", "[", "1", "]", "[", "0", "]", ",", "query", "[", "0", "]", "[", "1", "]", "[", "1", "]", ",", "query", "[", "1", "]", "[", "1", "]", "[", "0", "]", "\n", "dobject1", "=", "{", "\"o\"", ":", "\"e\"", ",", "\"a\"", ":", "[", "e1", "]", "}", "\n", "dobject1", "=", "{", "\"o\"", ":", "\"p\"", ",", "\"a\"", ":", "[", "[", "r1", "]", ",", "dobject1", "]", "}", "\n", "dobject1", "=", "{", "\"o\"", ":", "\"p\"", ",", "\"a\"", ":", "[", "[", "r2", "]", ",", "dobject1", "]", "}", "\n", "dobject1", "=", "{", "\"o\"", ":", "\"n\"", ",", "\"a\"", ":", "dobject1", "}", "\n", "dobject2", "=", "{", "\"o\"", ":", "\"e\"", ",", "\"a\"", ":", "[", "e2", "]", "}", "\n", "dobject2", "=", "{", "\"o\"", ":", "\"p\"", ",", "\"a\"", ":", "[", "[", "r3", "]", ",", "dobject2", "]", "}", "\n", "dobject", "=", "{", "\"o\"", ":", "\"i\"", ",", "\"a\"", ":", "[", "dobject1", ",", "dobject2", "]", "}", "\n", "", "elif", "meta_formula", "==", "'2u-DNF'", "or", "meta_formula", "==", "'2u'", ":", "\n", "        ", "e1", ",", "e2", ",", "r1", ",", "r2", "=", "query", "[", "0", "]", "[", "0", "]", ",", "query", "[", "1", "]", "[", "0", "]", ",", "query", "[", "0", "]", "[", "1", "]", "[", "0", "]", ",", "query", "[", "1", "]", "[", "1", "]", "[", "0", "]", "\n", "dobject1", "=", "{", "\"o\"", ":", "\"e\"", ",", "\"a\"", ":", "[", "e1", "]", "}", "\n", "dobject1", "=", "{", "\"o\"", ":", "\"p\"", ",", "\"a\"", ":", "[", "[", "r1", "]", ",", "dobject1", "]", "}", "\n", "dobject2", "=", "{", "\"o\"", ":", "\"e\"", ",", "\"a\"", ":", "[", "e2", "]", "}", "\n", "dobject2", "=", "{", "\"o\"", ":", "\"p\"", ",", "\"a\"", ":", "[", "[", "r2", "]", ",", "dobject2", "]", "}", "\n", "dobject", "=", "{", "\"o\"", ":", "\"u\"", ",", "\"a\"", ":", "[", "dobject1", ",", "dobject2", "]", "}", "\n", "", "elif", "meta_formula", "==", "'up'", ":", "\n", "        ", "e1", ",", "e2", ",", "r1", ",", "r2", ",", "r3", "=", "query", "[", "0", "]", "[", "0", "]", "[", "0", "]", ",", "query", "[", "0", "]", "[", "1", "]", "[", "0", "]", ",", "query", "[", "0", "]", "[", "0", "]", "[", "1", "]", "[", "0", "]", ",", "query", "[", "0", "]", "[", "1", "]", "[", "1", "]", "[", "0", "]", ",", "query", "[", "1", "]", "[", "0", "]", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.dataset.Dataset.__getitem__": [[31, 33], ["None"], "methods", ["None"], ["def", "__getitem__", "(", "self", ",", "index", ")", "->", "T_co", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.dataset.Dataset.__add__": [[34, 36], ["dataset.ConcatDataset"], "methods", ["None"], ["", "def", "__add__", "(", "self", ",", "other", ":", "'Dataset[T_co]'", ")", "->", "'ConcatDataset[T_co]'", ":", "\n", "        ", "return", "ConcatDataset", "(", "[", "self", ",", "other", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.dataset.IterableDataset.__iter__": [[145, 147], ["None"], "methods", ["None"], ["def", "__iter__", "(", "self", ")", "->", "Iterator", "[", "T_co", "]", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.dataset.IterableDataset.__add__": [[148, 150], ["dataset.ChainDataset"], "methods", ["None"], ["", "def", "__add__", "(", "self", ",", "other", ":", "Dataset", "[", "T_co", "]", ")", ":", "\n", "        ", "return", "ChainDataset", "(", "[", "self", ",", "other", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.dataset.TensorDataset.__init__": [[165, 168], ["all", "tensors[].size", "tensor.size"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "*", "tensors", ":", "Tensor", ")", "->", "None", ":", "\n", "        ", "assert", "all", "(", "tensors", "[", "0", "]", ".", "size", "(", "0", ")", "==", "tensor", ".", "size", "(", "0", ")", "for", "tensor", "in", "tensors", ")", "\n", "self", ".", "tensors", "=", "tensors", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.dataset.TensorDataset.__getitem__": [[169, 171], ["tuple"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "tuple", "(", "tensor", "[", "index", "]", "for", "tensor", "in", "self", ".", "tensors", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.dataset.TensorDataset.__len__": [[172, 174], ["dataset.TensorDataset.tensors[].size"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "tensors", "[", "0", "]", ".", "size", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.dataset.ConcatDataset.cumsum": [[187, 195], ["len", "r.append"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "cumsum", "(", "sequence", ")", ":", "\n", "        ", "r", ",", "s", "=", "[", "]", ",", "0", "\n", "for", "e", "in", "sequence", ":", "\n", "            ", "l", "=", "len", "(", "e", ")", "\n", "r", ".", "append", "(", "l", "+", "s", ")", "\n", "s", "+=", "l", "\n", "", "return", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.dataset.ConcatDataset.__init__": [[196, 204], ["super().__init__", "list", "dataset.ConcatDataset.cumsum", "len", "isinstance"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.BoxEstimator.__init__", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.dataset.ConcatDataset.cumsum"], ["", "def", "__init__", "(", "self", ",", "datasets", ":", "Iterable", "[", "Dataset", "]", ")", "->", "None", ":", "\n", "        ", "super", "(", "ConcatDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Cannot verify that datasets is Sized", "\n", "assert", "len", "(", "datasets", ")", ">", "0", ",", "'datasets should not be an empty iterable'", "# type: ignore", "\n", "self", ".", "datasets", "=", "list", "(", "datasets", ")", "\n", "for", "d", "in", "self", ".", "datasets", ":", "\n", "            ", "assert", "not", "isinstance", "(", "d", ",", "IterableDataset", ")", ",", "\"ConcatDataset does not support IterableDataset\"", "\n", "", "self", ".", "cumulative_sizes", "=", "self", ".", "cumsum", "(", "self", ".", "datasets", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.dataset.ConcatDataset.__len__": [[205, 207], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "cumulative_sizes", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.dataset.ConcatDataset.__getitem__": [[208, 219], ["bisect.bisect_right", "len", "ValueError", "len"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "if", "idx", "<", "0", ":", "\n", "            ", "if", "-", "idx", ">", "len", "(", "self", ")", ":", "\n", "                ", "raise", "ValueError", "(", "\"absolute value of index should not exceed dataset length\"", ")", "\n", "", "idx", "=", "len", "(", "self", ")", "+", "idx", "\n", "", "dataset_idx", "=", "bisect", ".", "bisect_right", "(", "self", ".", "cumulative_sizes", ",", "idx", ")", "\n", "if", "dataset_idx", "==", "0", ":", "\n", "            ", "sample_idx", "=", "idx", "\n", "", "else", ":", "\n", "            ", "sample_idx", "=", "idx", "-", "self", ".", "cumulative_sizes", "[", "dataset_idx", "-", "1", "]", "\n", "", "return", "self", ".", "datasets", "[", "dataset_idx", "]", "[", "sample_idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.dataset.ConcatDataset.cummulative_sizes": [[220, 225], ["warnings.warn"], "methods", ["None"], ["", "@", "property", "\n", "def", "cummulative_sizes", "(", "self", ")", ":", "\n", "        ", "warnings", ".", "warn", "(", "\"cummulative_sizes attribute is renamed to \"", "\n", "\"cumulative_sizes\"", ",", "DeprecationWarning", ",", "stacklevel", "=", "2", ")", "\n", "return", "self", ".", "cumulative_sizes", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.dataset.ChainDataset.__init__": [[237, 240], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.BoxEstimator.__init__"], ["def", "__init__", "(", "self", ",", "datasets", ":", "Iterable", "[", "Dataset", "]", ")", "->", "None", ":", "\n", "        ", "super", "(", "ChainDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "datasets", "=", "datasets", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.dataset.ChainDataset.__iter__": [[241, 246], ["isinstance"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "for", "d", "in", "self", ".", "datasets", ":", "\n", "            ", "assert", "isinstance", "(", "d", ",", "IterableDataset", ")", ",", "\"ChainDataset only supports IterableDataset\"", "\n", "for", "x", "in", "d", ":", "\n", "                ", "yield", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.dataset.ChainDataset.__len__": [[247, 254], ["isinstance", "len"], "methods", ["None"], ["", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "total", "=", "0", "\n", "for", "d", "in", "self", ".", "datasets", ":", "\n", "            ", "assert", "isinstance", "(", "d", ",", "IterableDataset", ")", ",", "\"ChainDataset only supports IterableDataset\"", "\n", "# Cannot verify that all self.datasets are Sized", "\n", "total", "+=", "len", "(", "d", ")", "# type: ignore", "\n", "", "return", "total", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.dataset.Subset.__init__": [[267, 270], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "dataset", ":", "Dataset", "[", "T_co", "]", ",", "indices", ":", "Sequence", "[", "int", "]", ")", "->", "None", ":", "\n", "        ", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "indices", "=", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.dataset.Subset.__getitem__": [[271, 273], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "dataset", "[", "self", ".", "indices", "[", "idx", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.dataset.Subset.__len__": [[274, 276], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.dataset.random_split": [[278, 297], ["torch.randperm().tolist", "sum", "len", "ValueError", "dataset.Subset", "torch.randperm", "zip", "sum", "torch._utils._accumulate"], "function", ["None"], ["", "", "def", "random_split", "(", "dataset", ":", "Dataset", "[", "T", "]", ",", "lengths", ":", "Sequence", "[", "int", "]", ",", "\n", "generator", ":", "Optional", "[", "Generator", "]", "=", "default_generator", ")", "->", "List", "[", "Subset", "[", "T", "]", "]", ":", "\n", "    ", "r\"\"\"\n    Randomly split a dataset into non-overlapping new datasets of given lengths.\n    Optionally fix the generator for reproducible results, e.g.:\n\n    >>> random_split(range(10), [3, 7], generator=torch.Generator().manual_seed(42))\n\n    Arguments:\n        dataset (Dataset): Dataset to be split\n        lengths (sequence): lengths of splits to be produced\n        generator (Generator): Generator used for the random permutation.\n    \"\"\"", "\n", "# Cannot verify that dataset is Sized", "\n", "if", "sum", "(", "lengths", ")", "!=", "len", "(", "dataset", ")", ":", "# type: ignore", "\n", "        ", "raise", "ValueError", "(", "\"Sum of input lengths does not equal the length of the input dataset!\"", ")", "\n", "\n", "", "indices", "=", "randperm", "(", "sum", "(", "lengths", ")", ",", "generator", "=", "generator", ")", ".", "tolist", "(", ")", "\n", "return", "[", "Subset", "(", "dataset", ",", "indices", "[", "offset", "-", "length", ":", "offset", "]", ")", "for", "offset", ",", "length", "in", "zip", "(", "_accumulate", "(", "lengths", ")", ",", "lengths", ")", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.sample_data.sampling_stored": [[8, 46], ["fol.parse_formula", "collections.defaultdict", "set", "int", "pandas.DataFrame", "os.path.join", "pd.DataFrame.to_csv", "fol.parse_formula.deterministic_query", "fol.parse_formula.lift", "fol.parse_formula.backward_sample", "fol.parse_formula.random_query", "fol.parse_formula.deterministic_query", "fol.parse_formula.lift", "save_data[].append", "set.add", "save_data[].append", "save_data[].append", "save_data[].append", "print", "len", "len", "len", "save_data[].append", "save_data[].append", "save_data[].append"], "function", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.parse_formula", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.deterministic_query", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.lift", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.backward_sample", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.random_query", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.deterministic_query", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.lift"], ["def", "sampling_stored", "(", "query_list", ",", "store_fold", ",", "num_queries", ",", "projs", ",", "projs_hard", ",", "rprojs_hard", ",", "mode", ",", "\n", "backward", ":", "bool", "=", "True", ")", ":", "\n", "    ", "for", "query_name", "in", "query_list", ":", "\n", "        ", "query_structure", "=", "beta_query_v2", "[", "query_name", "]", "\n", "query_instance", "=", "parse_formula", "(", "query_structure", ")", "\n", "save_data", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "all_query", "=", "set", "(", ")", "\n", "i", "=", "int", "(", "0", ")", "\n", "while", "i", "<", "num_queries", ":", "\n", "            ", "if", "backward", ":", "\n", "                ", "full_ans", "=", "query_instance", ".", "backward_sample", "(", "projs_hard", ",", "rprojs_hard", ")", "\n", "", "else", ":", "\n", "                ", "full_ans", "=", "query_instance", ".", "random_query", "(", "projs_hard", ")", "\n", "", "assert", "query_instance", ".", "deterministic_query", "(", "projs_hard", ")", "==", "full_ans", "\n", "easy_ans", "=", "query_instance", ".", "deterministic_query", "(", "projs", ")", "\n", "hard_ans", "=", "full_ans", "-", "easy_ans", "\n", "if", "len", "(", "hard_ans", ")", ">", "100", "or", "len", "(", "hard_ans", ")", "==", "0", "or", "query_instance", ".", "dumps", "in", "all_query", ":", "\n", "                ", "query_instance", ".", "lift", "(", ")", "\n", "continue", "\n", "", "if", "mode", "==", "'test'", "or", "mode", "==", "'valid'", ":", "\n", "                ", "save_data", "[", "'query'", "]", ".", "append", "(", "query_instance", ".", "dumps", ")", "\n", "all_query", ".", "add", "(", "query_instance", ".", "dumps", ")", "\n", "save_data", "[", "'id'", "]", ".", "append", "(", "i", ")", "\n", "i", "+=", "1", "\n", "save_data", "[", "'easy_answer_set'", "]", ".", "append", "(", "easy_ans", ")", "\n", "save_data", "[", "'hard_answer_set'", "]", ".", "append", "(", "hard_ans", ")", "\n", "", "elif", "mode", "==", "'train'", ":", "\n", "                ", "if", "len", "(", "full_ans", ")", ">", "0", ":", "\n", "                    ", "save_data", "[", "'query'", "]", ".", "append", "(", "query_instance", ".", "dumps", ")", "\n", "save_data", "[", "'id'", "]", ".", "append", "(", "i", ")", "\n", "i", "+=", "1", "\n", "save_data", "[", "'answer_set'", "]", ".", "append", "(", "full_ans", ")", "\n", "", "", "query_instance", ".", "lift", "(", ")", "\n", "if", "i", "%", "1000", "==", "0", ":", "\n", "                ", "print", "(", "f'{mode} split of {query_name} have sampled {i} queries'", ")", "\n", "", "", "df", "=", "pd", ".", "DataFrame", "(", "data", "=", "save_data", ")", "\n", "storation_path", "=", "os", ".", "path", ".", "join", "(", "store_fold", ",", "f\"{mode}_{query_name}.csv\"", ")", "\n", "df", ".", "to_csv", "(", "storation_path", ",", "index", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.create_minidataset.transform_query": [[8, 77], ["tuple", "tuple", "tuple", "print"], "function", ["None"], ["def", "transform_query", "(", "query", ",", "old_new_dict", ",", "old_new_relation_dict", ",", "name", ")", ":", "\n", "    ", "if", "name", "==", "'1p'", ":", "\n", "# print(query,type(query),type(query[0]),type(query[1]),query[1][0],type(query[1][0]))", "\n", "        ", "e", ",", "r", "=", "old_new_dict", "[", "query", "[", "0", "]", "]", ",", "old_new_relation_dict", "[", "query", "[", "1", "]", "[", "0", "]", "]", "\n", "new_query", "=", "tuple", "(", "[", "e", ",", "(", "r", ",", ")", "]", ")", "\n", "", "elif", "name", "==", "'2p'", ":", "\n", "        ", "e1", ",", "r1", ",", "r2", "=", "old_new_dict", "[", "query", "[", "0", "]", "]", ",", "query", "[", "1", "]", "[", "0", "]", ",", "query", "[", "1", "]", "[", "1", "]", "\n", "new_query", "=", "(", "e1", ",", "(", "r1", ",", "r2", ")", ")", "\n", "", "elif", "name", "==", "'3p'", ":", "\n", "        ", "e1", ",", "r1", ",", "r2", ",", "r3", "=", "old_new_dict", "[", "query", "[", "0", "]", "\n", "]", ",", "query", "[", "1", "]", "[", "0", "]", ",", "query", "[", "1", "]", "[", "1", "]", ",", "query", "[", "1", "]", "[", "2", "]", "\n", "new_query", "=", "(", "e1", ",", "(", "r1", ",", "r2", ",", "r3", ")", ")", "\n", "", "elif", "name", "==", "'2i'", ":", "\n", "        ", "e1", ",", "e2", ",", "r1", ",", "r2", "=", "old_new_dict", "[", "query", "[", "0", "]", "[", "0", "]", "]", ",", "old_new_dict", "[", "query", "[", "1", "]", "[", "0", "]", "\n", "]", ",", "old_new_relation_dict", "[", "query", "[", "0", "]", "[", "1", "]", "[", "0", "]", "]", ",", "old_new_relation_dict", "[", "query", "[", "1", "]", "[", "1", "]", "[", "0", "]", "]", "\n", "new_query", "=", "(", "tuple", "(", "[", "e1", ",", "(", "r1", ",", ")", "]", ")", ",", "tuple", "(", "[", "e2", ",", "(", "r2", ",", ")", "]", ")", ")", "\n", "", "elif", "name", "==", "'3i'", ":", "\n", "        ", "e1", ",", "e2", ",", "e3", ",", "r1", ",", "r2", ",", "r3", "=", "old_new_dict", "[", "query", "[", "0", "]", "[", "0", "]", "]", ",", "old_new_dict", "[", "query", "[", "1", "]", "[", "0", "]", "]", ",", "old_new_dict", "[", "query", "[", "2", "]", "[", "0", "]", "]", ",", "query", "[", "0", "]", "[", "1", "]", ",", "query", "[", "1", "]", "[", "1", "]", ",", "query", "[", "2", "]", "[", "1", "]", "\n", "new_query", "=", "(", "(", "e1", ",", "r1", ")", ",", "(", "e2", ",", "r2", ")", ",", "(", "e3", ",", "r3", ")", ")", "\n", "", "elif", "name", "==", "'ip'", ":", "\n", "        ", "e1", ",", "e2", ",", "r1", ",", "r2", ",", "r3", "=", "old_new_dict", "[", "query", "[", "0", "]", "[", "0", "]", "[", "0", "]", "]", ",", "old_new_dict", "[", "query", "[", "0", "]", "[", "1", "]", "[", "0", "]", "]", ",", "query", "[", "0", "]", "[", "0", "]", "[", "1", "]", ",", "query", "[", "0", "]", "[", "1", "]", "[", "1", "]", ",", "query", "[", "1", "]", "\n", "new_query", "=", "(", "(", "(", "e1", ",", "r1", ")", ",", "(", "e2", ",", "r2", ")", ")", ",", "r3", ")", "\n", "", "elif", "name", "==", "'pi'", ":", "\n", "        ", "e1", ",", "e2", ",", "r1", ",", "r2", ",", "r3", "=", "old_new_dict", "[", "query", "[", "0", "]", "[", "0", "]", "\n", "]", ",", "old_new_dict", "[", "1", "]", "[", "0", "]", ",", "query", "[", "0", "]", "[", "1", "]", "[", "0", "]", ",", "query", "[", "0", "]", "[", "1", "]", "[", "1", "]", ",", "query", "[", "1", "]", "[", "1", "]", "\n", "new_query", "=", "(", "(", "e1", ",", "(", "r1", ",", "r2", ")", ")", ",", "(", "e2", ",", "r2", ")", ")", "\n", "", "elif", "name", "==", "'2in'", ":", "\n", "        ", "e1", ",", "e2", ",", "r1", ",", "r2", "=", "old_new_dict", "[", "query", "[", "0", "]", "[", "0", "]", "\n", "]", ",", "old_new_dict", "[", "query", "[", "1", "]", "[", "0", "]", "]", ",", "query", "[", "0", "]", "[", "1", "]", ",", "query", "[", "1", "]", "[", "1", "]", "[", "0", "]", "\n", "new_query", "=", "(", "(", "e1", ",", "r1", ")", ",", "(", "e2", ",", "(", "r2", ",", "'n'", ")", ")", ")", "\n", "", "elif", "name", "==", "'3in'", ":", "\n", "        ", "e1", ",", "e2", ",", "e3", ",", "r1", ",", "r2", ",", "r3", "=", "old_new_dict", "[", "query", "[", "0", "]", "[", "0", "]", "]", ",", "old_new_dict", "[", "query", "[", "1", "]", "[", "0", "]", "]", ",", "old_new_dict", "[", "query", "[", "2", "]", "[", "0", "]", "]", ",", "query", "[", "0", "]", "[", "1", "]", ",", "query", "[", "1", "]", "[", "1", "]", ",", "query", "[", "2", "]", "[", "1", "]", "[", "0", "]", "\n", "new_query", "=", "(", "(", "e1", ",", "r1", ")", ",", "(", "e2", ",", "r2", ")", ",", "(", "e3", ",", "(", "r3", ",", "'n'", ")", ")", ")", "\n", "", "elif", "name", "==", "'inp'", ":", "\n", "        ", "e1", ",", "e2", ",", "r1", ",", "r2", ",", "r3", "=", "old_new_dict", "[", "query", "[", "0", "]", "[", "0", "]", "[", "0", "]", "]", ",", "old_new_dict", "[", "query", "[", "0", "]", "[", "1", "]", "[", "0", "]", "]", ",", "query", "[", "0", "]", "[", "0", "]", "[", "1", "]", ",", "query", "[", "0", "]", "[", "1", "]", "[", "0", "]", "[", "\n", "0", "]", ",", "query", "[", "2", "]", "\n", "new_query", "=", "(", "(", "(", "e1", ",", "r1", ")", ",", "(", "e2", ",", "(", "r2", ",", "'n'", ")", ")", ")", ",", "r3", ")", "\n", "", "elif", "name", "==", "'pin'", ":", "\n", "        ", "e1", ",", "e2", ",", "r1", ",", "r2", ",", "r3", "=", "old_new_dict", "[", "query", "[", "0", "]", "[", "0", "]", "]", ",", "old_new_dict", "[", "query", "[", "1", "]", "[", "0", "]", "]", ",", "query", "[", "0", "]", "[", "1", "]", "[", "0", "]", ",", "query", "[", "0", "]", "[", "1", "]", "[", "1", "]", ",", "query", "[", "1", "]", "[", "1", "]", "[", "0", "]", "\n", "new_query", "=", "(", "(", "e1", ",", "(", "r1", ",", "r2", ")", ")", ",", "(", "e2", ",", "(", "r3", ",", "'n'", ")", ")", ")", "\n", "", "elif", "name", "==", "'pni'", ":", "\n", "        ", "e1", ",", "e2", ",", "r1", ",", "r2", ",", "r3", "=", "old_new_dict", "[", "query", "[", "0", "]", "[", "0", "]", "]", ",", "old_new_dict", "[", "query", "[", "1", "]", "[", "0", "]", "]", ",", "query", "[", "0", "]", "[", "1", "]", "[", "0", "]", ",", "query", "[", "0", "]", "[", "1", "]", "[", "1", "]", ",", "query", "[", "1", "]", "[", "1", "]", "\n", "new_query", "=", "(", "(", "e1", ",", "(", "r1", ",", "r2", ",", "'n'", ")", ")", ",", "(", "e2", ",", "r3", ")", ")", "\n", "", "elif", "name", "==", "'2u-DNF'", ":", "\n", "        ", "e1", ",", "e2", ",", "r1", ",", "r2", "=", "old_new_dict", "[", "query", "[", "0", "]", "[", "0", "]", "\n", "]", ",", "old_new_dict", "[", "query", "[", "1", "]", "[", "0", "]", "]", ",", "query", "[", "0", "]", "[", "1", "]", ",", "query", "[", "1", "]", "[", "1", "]", "\n", "new_query", "=", "(", "(", "e1", ",", "r1", ")", ",", "(", "e2", ",", "r2", ")", ",", "(", "'u'", ",", ")", ")", "\n", "", "elif", "name", "==", "'up-DNF'", ":", "\n", "        ", "e1", ",", "e2", ",", "r1", ",", "r2", ",", "r3", "=", "old_new_dict", "[", "query", "[", "0", "]", "[", "0", "]", "[", "0", "]", "]", ",", "old_new_dict", "[", "query", "[", "0", "]", "[", "1", "]", "[", "0", "]", "]", ",", "query", "[", "0", "]", "[", "0", "]", "[", "1", "]", ",", "query", "[", "0", "]", "[", "1", "]", "[", "1", "]", ",", "query", "[", "1", "]", "\n", "new_query", "=", "(", "(", "(", "e1", ",", "r1", ")", ",", "(", "e2", ",", "r2", ")", ",", "(", "'u'", ",", ")", ")", ",", "r3", ")", "\n", "", "elif", "name", "==", "'2u-DM'", ":", "\n", "        ", "e1", ",", "e2", ",", "r1", ",", "r2", "=", "old_new_dict", "[", "query", "[", "0", "]", "[", "0", "]", "[", "0", "]", "]", ",", "old_new_dict", "[", "query", "[", "0", "]", "[", "1", "]", "[", "0", "]", "]", ",", "query", "[", "0", "]", "[", "0", "]", "[", "1", "]", "[", "0", "]", ",", "query", "[", "0", "]", "[", "1", "]", "[", "1", "]", "[", "\n", "0", "]", "\n", "new_query", "=", "(", "(", "(", "e1", ",", "(", "r1", ",", "'n'", ")", ")", ",", "(", "e2", ",", "(", "r2", ",", "'n'", ")", ")", ")", ",", "(", "'n'", ",", ")", ")", "\n", "", "elif", "name", "==", "'up-DM'", ":", "\n", "        ", "e1", ",", "e2", ",", "r1", ",", "r2", ",", "r3", "=", "old_new_dict", "[", "query", "[", "0", "]", "[", "0", "]", "[", "0", "]", "]", ",", "old_new_dict", "[", "query", "[", "0", "]", "[", "1", "]", "[", "0", "]", "]", ",", "query", "[", "0", "]", "[", "0", "]", "[", "1", "]", "[", "0", "]", ",", "query", "[", "0", "]", "[", "1", "]", "[", "1", "]", "[", "0", "]", ",", "query", "[", "1", "]", "[", "1", "]", "\n", "new_query", "=", "(", "(", "(", "e1", ",", "(", "r1", ",", "'n'", ")", ")", ",", "(", "e2", ",", "(", "r2", ",", "'n'", ")", ")", ")", ",", "(", "'n'", ",", "r3", ")", ")", "\n", "", "else", ":", "\n", "        ", "new_query", "=", "None", "\n", "print", "(", "'not valid name!'", ")", "\n", "", "return", "new_query", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.dataloader._DatasetKind.create_fetcher": [[46, 52], ["torch.utils.data._utils.fetch._MapDatasetFetcher", "torch.utils.data._utils.fetch._MapDatasetFetcher", "torch.utils.data._utils.fetch._IterableDatasetFetcher", "torch.utils.data._utils.fetch._IterableDatasetFetcher"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "create_fetcher", "(", "kind", ",", "dataset", ",", "auto_collation", ",", "collate_fn", ",", "drop_last", ")", ":", "\n", "        ", "if", "kind", "==", "_DatasetKind", ".", "Map", ":", "\n", "            ", "return", "_utils", ".", "fetch", ".", "_MapDatasetFetcher", "(", "dataset", ",", "auto_collation", ",", "collate_fn", ",", "drop_last", ")", "\n", "", "else", ":", "\n", "            ", "return", "_utils", ".", "fetch", ".", "_IterableDatasetFetcher", "(", "dataset", ",", "auto_collation", ",", "collate_fn", ",", "drop_last", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.dataloader._InfiniteConstantSampler.__init__": [[62, 64], ["torch.utils.data.Sampler.__init__"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.BoxEstimator.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "_InfiniteConstantSampler", ",", "self", ")", ".", "__init__", "(", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.dataloader._InfiniteConstantSampler.__iter__": [[65, 68], ["None"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "yield", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.dataloader.DataLoader.__init__": [[155, 290], ["torch._C._log_api_usage_once", "torch._C._log_api_usage_once", "torch._C._log_api_usage_once", "torch._C._log_api_usage_once", "isinstance", "ValueError", "ValueError", "ValueError", "ValueError", "ValueError", "torch.utils.data.BatchSampler", "torch.utils.data.BatchSampler", "ValueError", "ValueError", "dataloader._InfiniteConstantSampler", "ValueError", "ValueError", "torch.utils.data.RandomSampler", "torch.utils.data.RandomSampler", "torch.utils.data.SequentialSampler", "torch.utils.data.SequentialSampler", "ValueError"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "dataset", ":", "Dataset", "[", "T_co", "]", ",", "batch_size", ":", "Optional", "[", "int", "]", "=", "1", ",", "\n", "shuffle", ":", "bool", "=", "False", ",", "sampler", ":", "Optional", "[", "Sampler", "[", "int", "]", "]", "=", "None", ",", "\n", "batch_sampler", ":", "Optional", "[", "Sampler", "[", "Sequence", "[", "int", "]", "]", "]", "=", "None", ",", "\n", "num_workers", ":", "int", "=", "0", ",", "collate_fn", ":", "_collate_fn_t", "=", "None", ",", "\n", "pin_memory", ":", "bool", "=", "False", ",", "drop_last", ":", "bool", "=", "False", ",", "\n", "timeout", ":", "float", "=", "0", ",", "worker_init_fn", ":", "_worker_init_fn_t", "=", "None", ",", "\n", "multiprocessing_context", "=", "None", ",", "generator", "=", "None", ",", "\n", "*", ",", "prefetch_factor", ":", "int", "=", "2", ",", "\n", "persistent_workers", ":", "bool", "=", "False", ")", ":", "\n", "        ", "torch", ".", "_C", ".", "_log_api_usage_once", "(", "\"python.data_loader\"", ")", "# type: ignore", "\n", "\n", "if", "num_workers", "<", "0", ":", "\n", "            ", "raise", "ValueError", "(", "'num_workers option should be non-negative; '", "\n", "'use num_workers=0 to disable multiprocessing.'", ")", "\n", "\n", "", "if", "timeout", "<", "0", ":", "\n", "            ", "raise", "ValueError", "(", "'timeout option should be non-negative'", ")", "\n", "\n", "", "if", "num_workers", "==", "0", "and", "prefetch_factor", "!=", "2", ":", "\n", "            ", "raise", "ValueError", "(", "'prefetch_factor option could only be specified in multiprocessing.'", "\n", "'let num_workers > 0 to enable multiprocessing.'", ")", "\n", "", "assert", "prefetch_factor", ">", "0", "\n", "\n", "if", "persistent_workers", "and", "num_workers", "==", "0", ":", "\n", "            ", "raise", "ValueError", "(", "'persistent_workers option needs num_workers > 0'", ")", "\n", "\n", "", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "num_workers", "=", "num_workers", "\n", "self", ".", "prefetch_factor", "=", "prefetch_factor", "\n", "self", ".", "pin_memory", "=", "pin_memory", "\n", "self", ".", "timeout", "=", "timeout", "\n", "self", ".", "worker_init_fn", "=", "worker_init_fn", "\n", "self", ".", "multiprocessing_context", "=", "multiprocessing_context", "\n", "\n", "# Arg-check dataset related before checking samplers because we want to", "\n", "# tell users that iterable-style datasets are incompatible with custom", "\n", "# samplers first, so that they don't learn that this combo doesn't work", "\n", "# after spending time fixing the custom sampler errors.", "\n", "if", "isinstance", "(", "dataset", ",", "IterableDataset", ")", ":", "\n", "            ", "self", ".", "_dataset_kind", "=", "_DatasetKind", ".", "Iterable", "\n", "# NOTE [ Custom Samplers and IterableDataset ]", "\n", "#", "\n", "# `IterableDataset` does not support custom `batch_sampler` or", "\n", "# `sampler` since the key is irrelevant (unless we support", "\n", "# generator-style dataset one day...).", "\n", "#", "\n", "# For `sampler`, we always create a dummy sampler. This is an", "\n", "# infinite sampler even when the dataset may have an implemented", "\n", "# finite `__len__` because in multi-process data loading, naive", "\n", "# settings will return duplicated data (which may be desired), and", "\n", "# thus using a sampler with length matching that of dataset will", "\n", "# cause data lost (you may have duplicates of the first couple", "\n", "# batches, but never see anything afterwards). Therefore,", "\n", "# `Iterabledataset` always uses an infinite sampler, an instance of", "\n", "# `_InfiniteConstantSampler` defined above.", "\n", "#", "\n", "# A custom `batch_sampler` essentially only controls the batch size.", "\n", "# However, it is unclear how useful it would be since an iterable-style", "\n", "# dataset can handle that within itself. Moreover, it is pointless", "\n", "# in multi-process data loading as the assignment order of batches", "\n", "# to workers is an implementation detail so users can not control", "\n", "# how to batchify each worker's iterable. Thus, we disable this", "\n", "# option. If this turns out to be useful in future, we can re-enable", "\n", "# this, and support custom samplers that specify the assignments to", "\n", "# specific workers.", "\n", "if", "shuffle", "is", "not", "False", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "\"DataLoader with IterableDataset: expected unspecified \"", "\n", "\"shuffle option, but got shuffle={}\"", ".", "format", "(", "shuffle", ")", ")", "\n", "", "elif", "sampler", "is", "not", "None", ":", "\n", "# See NOTE [ Custom Samplers and IterableDataset ]", "\n", "                ", "raise", "ValueError", "(", "\n", "\"DataLoader with IterableDataset: expected unspecified \"", "\n", "\"sampler option, but got sampler={}\"", ".", "format", "(", "sampler", ")", ")", "\n", "", "elif", "batch_sampler", "is", "not", "None", ":", "\n", "# See NOTE [ Custom Samplers and IterableDataset ]", "\n", "                ", "raise", "ValueError", "(", "\n", "\"DataLoader with IterableDataset: expected unspecified \"", "\n", "\"batch_sampler option, but got batch_sampler={}\"", ".", "format", "(", "batch_sampler", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "_dataset_kind", "=", "_DatasetKind", ".", "Map", "\n", "\n", "", "if", "sampler", "is", "not", "None", "and", "shuffle", ":", "\n", "            ", "raise", "ValueError", "(", "'sampler option is mutually exclusive with '", "\n", "'shuffle'", ")", "\n", "\n", "", "if", "batch_sampler", "is", "not", "None", ":", "\n", "# auto_collation with custom batch_sampler", "\n", "            ", "if", "batch_size", "!=", "1", "or", "shuffle", "or", "sampler", "is", "not", "None", "or", "drop_last", ":", "\n", "                ", "raise", "ValueError", "(", "'batch_sampler option is mutually exclusive '", "\n", "'with batch_size, shuffle, sampler, and '", "\n", "'drop_last'", ")", "\n", "", "batch_size", "=", "None", "\n", "drop_last", "=", "False", "\n", "", "elif", "batch_size", "is", "None", ":", "\n", "# no auto_collation", "\n", "            ", "if", "drop_last", ":", "\n", "                ", "raise", "ValueError", "(", "'batch_size=None option disables auto-batching '", "\n", "'and is mutually exclusive with drop_last'", ")", "\n", "\n", "", "", "if", "sampler", "is", "None", ":", "# give default samplers", "\n", "            ", "if", "self", ".", "_dataset_kind", "==", "_DatasetKind", ".", "Iterable", ":", "\n", "# See NOTE [ Custom Samplers and IterableDataset ]", "\n", "                ", "sampler", "=", "_InfiniteConstantSampler", "(", ")", "\n", "", "else", ":", "# map-style", "\n", "                ", "if", "shuffle", ":", "\n", "# Cannot statically verify that dataset is Sized", "\n", "# Somewhat related: see NOTE [ Lack of Default `__len__` in Python Abstract Base Classes ]", "\n", "                    ", "sampler", "=", "RandomSampler", "(", "dataset", ",", "generator", "=", "generator", ")", "# type: ignore", "\n", "", "else", ":", "\n", "                    ", "sampler", "=", "SequentialSampler", "(", "dataset", ")", "\n", "\n", "", "", "", "if", "batch_size", "is", "not", "None", "and", "batch_sampler", "is", "None", ":", "\n", "# auto_collation without custom batch_sampler", "\n", "            ", "batch_sampler", "=", "BatchSampler", "(", "sampler", ",", "batch_size", ",", "drop_last", ")", "\n", "\n", "", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "drop_last", "=", "drop_last", "\n", "self", ".", "sampler", "=", "sampler", "\n", "self", ".", "batch_sampler", "=", "batch_sampler", "\n", "self", ".", "generator", "=", "generator", "\n", "\n", "if", "collate_fn", "is", "None", ":", "\n", "            ", "if", "self", ".", "_auto_collation", ":", "\n", "                ", "collate_fn", "=", "_utils", ".", "collate", ".", "default_collate", "\n", "", "else", ":", "\n", "                ", "collate_fn", "=", "_utils", ".", "collate", ".", "default_convert", "\n", "\n", "", "", "self", ".", "collate_fn", "=", "collate_fn", "\n", "self", ".", "persistent_workers", "=", "persistent_workers", "\n", "\n", "self", ".", "__initialized", "=", "True", "\n", "self", ".", "_IterableDataset_len_called", "=", "None", "# See NOTE [ IterableDataset and __len__ ]", "\n", "\n", "self", ".", "_iterator", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.dataloader.DataLoader._get_iterator": [[291, 296], ["dataloader._SingleProcessDataLoaderIter", "dataloader._MultiProcessingDataLoaderIter"], "methods", ["None"], ["", "def", "_get_iterator", "(", "self", ")", "->", "'_BaseDataLoaderIter'", ":", "\n", "        ", "if", "self", ".", "num_workers", "==", "0", ":", "\n", "            ", "return", "_SingleProcessDataLoaderIter", "(", "self", ")", "\n", "", "else", ":", "\n", "            ", "return", "_MultiProcessingDataLoaderIter", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.dataloader.DataLoader.multiprocessing_context": [[301, 329], ["isinstance", "ValueError", "ValueError", "multiprocessing.get_all_start_methods", "torch.get_all_start_methods", "torch.get_all_start_methods", "torch.get_all_start_methods", "multiprocessing.get_context", "torch.get_context", "torch.get_context", "torch.get_context", "isinstance", "TypeError", "ValueError"], "methods", ["None"], ["", "@", "multiprocessing_context", ".", "setter", "\n", "def", "multiprocessing_context", "(", "self", ",", "multiprocessing_context", ")", ":", "\n", "        ", "if", "multiprocessing_context", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "num_workers", ">", "0", ":", "\n", "                ", "if", "not", "multiprocessing", ".", "_supports_context", ":", "\n", "                    ", "raise", "ValueError", "(", "'multiprocessing_context relies on Python >= 3.4, with '", "\n", "'support for different start methods'", ")", "\n", "\n", "", "if", "isinstance", "(", "multiprocessing_context", ",", "string_classes", ")", ":", "\n", "                    ", "valid_start_methods", "=", "multiprocessing", ".", "get_all_start_methods", "(", ")", "\n", "if", "multiprocessing_context", "not", "in", "valid_start_methods", ":", "\n", "                        ", "raise", "ValueError", "(", "\n", "(", "'multiprocessing_context option '", "\n", "'should specify a valid start method in {!r}, but got '", "\n", "'multiprocessing_context={!r}'", ")", ".", "format", "(", "valid_start_methods", ",", "multiprocessing_context", ")", ")", "\n", "# error: Argument 1 to \"get_context\" has incompatible type \"Union[str, bytes]\"; expected \"str\"  [arg-type]", "\n", "", "multiprocessing_context", "=", "multiprocessing", ".", "get_context", "(", "multiprocessing_context", ")", "# type: ignore", "\n", "\n", "", "if", "not", "isinstance", "(", "multiprocessing_context", ",", "python_multiprocessing", ".", "context", ".", "BaseContext", ")", ":", "\n", "                    ", "raise", "TypeError", "(", "(", "'multiprocessing_context option should be a valid context '", "\n", "'object or a string specifying the start method, but got '", "\n", "'multiprocessing_context={}'", ")", ".", "format", "(", "multiprocessing_context", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "(", "'multiprocessing_context can only be used with '", "\n", "'multi-process loading (num_workers > 0), but got '", "\n", "'num_workers={}'", ")", ".", "format", "(", "self", ".", "num_workers", ")", ")", "\n", "\n", "", "", "self", ".", "__multiprocessing_context", "=", "multiprocessing_context", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.dataloader.DataLoader.__setattr__": [[330, 337], ["super().__setattr__", "ValueError"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.dataloader.DataLoader.__setattr__"], ["", "def", "__setattr__", "(", "self", ",", "attr", ",", "val", ")", ":", "\n", "        ", "if", "self", ".", "__initialized", "and", "attr", "in", "(", "\n", "'batch_size'", ",", "'batch_sampler'", ",", "'sampler'", ",", "'drop_last'", ",", "'dataset'", ",", "'persistent_workers'", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'{} attribute should not be set after {} is '", "\n", "'initialized'", ".", "format", "(", "attr", ",", "self", ".", "__class__", ".", "__name__", ")", ")", "\n", "\n", "", "super", "(", "DataLoader", ",", "self", ")", ".", "__setattr__", "(", "attr", ",", "val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.dataloader.DataLoader.__iter__": [[340, 354], ["dataloader.DataLoader._get_iterator", "dataloader.DataLoader._get_iterator", "dataloader.DataLoader._iterator._reset"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.dataloader.DataLoader._get_iterator", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.dataloader.DataLoader._get_iterator", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.dataloader._MultiProcessingDataLoaderIter._reset"], ["", "def", "__iter__", "(", "self", ")", "->", "'_BaseDataLoaderIter'", ":", "\n", "# When using a single worker the returned iterator should be", "\n", "# created everytime to avoid reseting its state", "\n", "# However, in the case of a multiple workers iterator", "\n", "# the iterator is only created once in the lifetime of the", "\n", "# DataLoader object so that workers can be reused", "\n", "        ", "if", "self", ".", "persistent_workers", "and", "self", ".", "num_workers", ">", "0", ":", "\n", "            ", "if", "self", ".", "_iterator", "is", "None", ":", "\n", "                ", "self", ".", "_iterator", "=", "self", ".", "_get_iterator", "(", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "_iterator", ".", "_reset", "(", "self", ")", "\n", "", "return", "self", ".", "_iterator", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "_get_iterator", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.dataloader.DataLoader._auto_collation": [[355, 358], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "_auto_collation", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "batch_sampler", "is", "not", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.dataloader.DataLoader._index_sampler": [[359, 370], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "_index_sampler", "(", "self", ")", ":", "\n", "# The actual sampler used for generating indices for `_DatasetFetcher`", "\n", "# (see _utils/fetch.py) to read data at each time. This would be", "\n", "# `.batch_sampler` if in auto-collation mode, and `.sampler` otherwise.", "\n", "# We can't change `.sampler` and `.batch_sampler` attributes for BC", "\n", "# reasons.", "\n", "        ", "if", "self", ".", "_auto_collation", ":", "\n", "            ", "return", "self", ".", "batch_sampler", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "sampler", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.dataloader.DataLoader.__len__": [[371, 399], ["len", "len", "ceil"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", "->", "int", ":", "\n", "        ", "if", "self", ".", "_dataset_kind", "==", "_DatasetKind", ".", "Iterable", ":", "\n", "# NOTE [ IterableDataset and __len__ ]", "\n", "#", "\n", "# For `IterableDataset`, `__len__` could be inaccurate when one naively", "\n", "# does multi-processing data loading, since the samples will be duplicated.", "\n", "# However, no real use case should be actually using that behavior, so", "\n", "# it should count as a user error. We should generally trust user", "\n", "# code to do the proper thing (e.g., configure each replica differently", "\n", "# in `__iter__`), and give us the correct `__len__` if they choose to", "\n", "# implement it (this will still throw if the dataset does not implement", "\n", "# a `__len__`).", "\n", "#", "\n", "# To provide a further warning, we track if `__len__` was called on the", "\n", "# `DataLoader`, save the returned value in `self._len_called`, and warn", "\n", "# if the iterator ends up yielding more than this number of samples.", "\n", "\n", "# Cannot statically verify that dataset is Sized", "\n", "            ", "length", "=", "self", ".", "_IterableDataset_len_called", "=", "len", "(", "self", ".", "dataset", ")", "# type: ignore", "\n", "if", "self", ".", "batch_size", "is", "not", "None", ":", "# IterableDataset doesn't allow custom sampler or batch_sampler", "\n", "                ", "from", "math", "import", "ceil", "\n", "if", "self", ".", "drop_last", ":", "\n", "                    ", "length", "=", "length", "//", "self", ".", "batch_size", "\n", "", "else", ":", "\n", "                    ", "length", "=", "ceil", "(", "length", "/", "self", ".", "batch_size", ")", "\n", "", "", "return", "length", "\n", "", "else", ":", "\n", "            ", "return", "len", "(", "self", ".", "_index_sampler", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.dataloader._BaseDataLoaderIter.__init__": [[402, 418], ["iter", "torch.empty().random_().item", "torch.empty().random_().item", "torch.empty().random_().item", "torch.empty().random_().item", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.empty().random_", "torch.empty().random_", "torch.empty().random_", "torch.empty().random_", "torch.empty", "torch.empty", "torch.empty", "torch.empty"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "loader", ":", "DataLoader", ")", "->", "None", ":", "\n", "        ", "self", ".", "_dataset", "=", "loader", ".", "dataset", "\n", "self", ".", "_dataset_kind", "=", "loader", ".", "_dataset_kind", "\n", "self", ".", "_IterableDataset_len_called", "=", "loader", ".", "_IterableDataset_len_called", "\n", "self", ".", "_auto_collation", "=", "loader", ".", "_auto_collation", "\n", "self", ".", "_drop_last", "=", "loader", ".", "drop_last", "\n", "self", ".", "_index_sampler", "=", "loader", ".", "_index_sampler", "\n", "self", ".", "_num_workers", "=", "loader", ".", "num_workers", "\n", "self", ".", "_prefetch_factor", "=", "loader", ".", "prefetch_factor", "\n", "self", ".", "_pin_memory", "=", "loader", ".", "pin_memory", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "self", ".", "_timeout", "=", "loader", ".", "timeout", "\n", "self", ".", "_collate_fn", "=", "loader", ".", "collate_fn", "\n", "self", ".", "_sampler_iter", "=", "iter", "(", "self", ".", "_index_sampler", ")", "\n", "self", ".", "_base_seed", "=", "torch", ".", "empty", "(", "(", ")", ",", "dtype", "=", "torch", ".", "int64", ")", ".", "random_", "(", "generator", "=", "loader", ".", "generator", ")", ".", "item", "(", ")", "\n", "self", ".", "_persistent_workers", "=", "loader", ".", "persistent_workers", "\n", "self", ".", "_num_yielded", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.dataloader._BaseDataLoaderIter.__iter__": [[419, 421], ["None"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", "->", "'_BaseDataLoaderIter'", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.dataloader._BaseDataLoaderIter._reset": [[422, 426], ["iter"], "methods", ["None"], ["", "def", "_reset", "(", "self", ",", "loader", ",", "first_iter", "=", "False", ")", ":", "\n", "        ", "self", ".", "_sampler_iter", "=", "iter", "(", "self", ".", "_index_sampler", ")", "\n", "self", ".", "_num_yielded", "=", "0", "\n", "self", ".", "_IterableDataset_len_called", "=", "loader", ".", "_IterableDataset_len_called", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.dataloader._BaseDataLoaderIter._next_index": [[427, 429], ["next"], "methods", ["None"], ["", "def", "_next_index", "(", "self", ")", ":", "\n", "        ", "return", "next", "(", "self", ".", "_sampler_iter", ")", "# may raise StopIteration", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.dataloader._BaseDataLoaderIter._next_data": [[430, 432], ["None"], "methods", ["None"], ["", "def", "_next_data", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.dataloader._BaseDataLoaderIter.__next__": [[433, 450], ["dataloader._BaseDataLoaderIter._next_data", "dataloader._BaseDataLoaderIter._reset", "warnings.warn"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.dataloader._MultiProcessingDataLoaderIter._next_data", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.dataloader._MultiProcessingDataLoaderIter._reset"], ["", "def", "__next__", "(", "self", ")", "->", "Any", ":", "\n", "        ", "if", "self", ".", "_sampler_iter", "is", "None", ":", "\n", "            ", "self", ".", "_reset", "(", ")", "\n", "", "data", "=", "self", ".", "_next_data", "(", ")", "\n", "self", ".", "_num_yielded", "+=", "1", "\n", "if", "self", ".", "_dataset_kind", "==", "_DatasetKind", ".", "Iterable", "and", "self", ".", "_IterableDataset_len_called", "is", "not", "None", "and", "self", ".", "_num_yielded", ">", "self", ".", "_IterableDataset_len_called", ":", "\n", "            ", "warn_msg", "=", "(", "\"Length of IterableDataset {} was reported to be {} (when accessing len(dataloader)), but {} \"", "\n", "\"samples have been fetched. \"", ")", ".", "format", "(", "self", ".", "_dataset", ",", "self", ".", "_IterableDataset_len_called", ",", "\n", "self", ".", "_num_yielded", ")", "\n", "if", "self", ".", "_num_workers", ">", "0", ":", "\n", "                ", "warn_msg", "+=", "(", "\"For multiprocessing data-loading, this could be caused by not properly configuring the \"", "\n", "\"IterableDataset replica at each worker. Please see \"", "\n", "\"https://pytorch.org/docs/stable/data.html#torch.utils.data.IterableDataset for examples.\"", ")", "\n", "", "warnings", ".", "warn", "(", "warn_msg", ")", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.dataloader._BaseDataLoaderIter.__len__": [[453, 455], ["len"], "methods", ["None"], ["def", "__len__", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "len", "(", "self", ".", "_index_sampler", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.dataloader._BaseDataLoaderIter.__getstate__": [[456, 463], ["NotImplementedError"], "methods", ["None"], ["", "def", "__getstate__", "(", "self", ")", ":", "\n", "# TODO: add limited pickling support for sharing an iterator", "\n", "# across multiple threads for HOGWILD.", "\n", "# Probably the best way to do this is by moving the sample pushing", "\n", "# to a separate thread and then just sharing the data queue", "\n", "# but signalling the end is tricky without a non-blocking API", "\n", "        ", "raise", "NotImplementedError", "(", "\"{} cannot be pickled\"", ",", "self", ".", "__class__", ".", "__name__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.dataloader._SingleProcessDataLoaderIter.__init__": [[466, 473], ["dataloader._BaseDataLoaderIter.__init__", "dataloader._DatasetKind.create_fetcher"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.BoxEstimator.__init__", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.dataloader._DatasetKind.create_fetcher"], ["    ", "def", "__init__", "(", "self", ",", "loader", ")", ":", "\n", "        ", "super", "(", "_SingleProcessDataLoaderIter", ",", "self", ")", ".", "__init__", "(", "loader", ")", "\n", "assert", "self", ".", "_timeout", "==", "0", "\n", "assert", "self", ".", "_num_workers", "==", "0", "\n", "\n", "self", ".", "_dataset_fetcher", "=", "_DatasetKind", ".", "create_fetcher", "(", "\n", "self", ".", "_dataset_kind", ",", "self", ".", "_dataset", ",", "self", ".", "_auto_collation", ",", "self", ".", "_collate_fn", ",", "self", ".", "_drop_last", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.dataloader._SingleProcessDataLoaderIter._next_data": [[474, 480], ["dataloader._SingleProcessDataLoaderIter._next_index", "dataloader._SingleProcessDataLoaderIter._dataset_fetcher.fetch", "torch.utils.data._utils.pin_memory.pin_memory", "torch.utils.data._utils.pin_memory.pin_memory"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.dataloader._BaseDataLoaderIter._next_index"], ["", "def", "_next_data", "(", "self", ")", ":", "\n", "        ", "index", "=", "self", ".", "_next_index", "(", ")", "# may raise StopIteration", "\n", "data", "=", "self", ".", "_dataset_fetcher", ".", "fetch", "(", "index", ")", "# may raise StopIteration", "\n", "if", "self", ".", "_pin_memory", ":", "\n", "            ", "data", "=", "_utils", ".", "pin_memory", ".", "pin_memory", "(", "data", ")", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.dataloader._MultiProcessingDataLoaderIter.__init__": [[763, 829], ["dataloader._BaseDataLoaderIter.__init__", "itertools.cycle", "multiprocessing_context.Queue", "multiprocessing_context.Event", "range", "torch.utils.data._utils.signal_handling._set_worker_pids", "torch.utils.data._utils.signal_handling._set_worker_pids", "torch.utils.data._utils.signal_handling._set_SIGCHLD_handler", "torch.utils.data._utils.signal_handling._set_SIGCHLD_handler", "dataloader._MultiProcessingDataLoaderIter._reset", "range", "multiprocessing_context.Queue", "multiprocessing_context.Process", "multiprocessing_context.Process.start", "dataloader._MultiProcessingDataLoaderIter._index_queues.append", "dataloader._MultiProcessingDataLoaderIter._workers.append", "threading.Event", "torch._six.queue.Queue", "torch._six.queue.Queue", "threading.Thread", "threading.Thread.start", "id", "tuple", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.BoxEstimator.__init__", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.dataloader._MultiProcessingDataLoaderIter._reset"], ["def", "__init__", "(", "self", ",", "loader", ")", ":", "\n", "        ", "super", "(", "_MultiProcessingDataLoaderIter", ",", "self", ")", ".", "__init__", "(", "loader", ")", "\n", "\n", "assert", "self", ".", "_num_workers", ">", "0", "\n", "assert", "self", ".", "_prefetch_factor", ">", "0", "\n", "\n", "if", "loader", ".", "multiprocessing_context", "is", "None", ":", "\n", "            ", "multiprocessing_context", "=", "multiprocessing", "\n", "", "else", ":", "\n", "            ", "multiprocessing_context", "=", "loader", ".", "multiprocessing_context", "\n", "\n", "", "self", ".", "_worker_init_fn", "=", "loader", ".", "worker_init_fn", "\n", "self", ".", "_worker_queue_idx_cycle", "=", "itertools", ".", "cycle", "(", "range", "(", "self", ".", "_num_workers", ")", ")", "\n", "# No certainty which module multiprocessing_context is", "\n", "self", ".", "_worker_result_queue", "=", "multiprocessing_context", ".", "Queue", "(", ")", "# type: ignore", "\n", "self", ".", "_worker_pids_set", "=", "False", "\n", "self", ".", "_shutdown", "=", "False", "\n", "self", ".", "_workers_done_event", "=", "multiprocessing_context", ".", "Event", "(", ")", "\n", "\n", "self", ".", "_index_queues", "=", "[", "]", "\n", "self", ".", "_workers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "_num_workers", ")", ":", "\n", "# No certainty which module multiprocessing_context is", "\n", "            ", "index_queue", "=", "multiprocessing_context", ".", "Queue", "(", ")", "# type: ignore", "\n", "# index_queue.cancel_join_thread()", "\n", "w", "=", "multiprocessing_context", ".", "Process", "(", "\n", "target", "=", "_utils", ".", "worker", ".", "_worker_loop", ",", "\n", "args", "=", "(", "self", ".", "_dataset_kind", ",", "self", ".", "_dataset", ",", "index_queue", ",", "\n", "self", ".", "_worker_result_queue", ",", "self", ".", "_workers_done_event", ",", "\n", "self", ".", "_auto_collation", ",", "self", ".", "_collate_fn", ",", "self", ".", "_drop_last", ",", "\n", "self", ".", "_base_seed", "+", "i", ",", "self", ".", "_worker_init_fn", ",", "i", ",", "self", ".", "_num_workers", ",", "\n", "self", ".", "_persistent_workers", ")", ")", "\n", "w", ".", "daemon", "=", "True", "\n", "# NB: Process.start() actually take some time as it needs to", "\n", "#     start a process and pass the arguments over via a pipe.", "\n", "#     Therefore, we only add a worker to self._workers list after", "\n", "#     it started, so that we do not call .join() if program dies", "\n", "#     before it starts, and __del__ tries to join but will get:", "\n", "#     AssertionError: can only join a started process.", "\n", "w", ".", "start", "(", ")", "\n", "self", ".", "_index_queues", ".", "append", "(", "index_queue", ")", "\n", "self", ".", "_workers", ".", "append", "(", "w", ")", "\n", "\n", "", "if", "self", ".", "_pin_memory", ":", "\n", "            ", "self", ".", "_pin_memory_thread_done_event", "=", "threading", ".", "Event", "(", ")", "\n", "\n", "# Queue is not type-annotated", "\n", "self", ".", "_data_queue", "=", "queue", ".", "Queue", "(", ")", "# type: ignore", "\n", "pin_memory_thread", "=", "threading", ".", "Thread", "(", "\n", "target", "=", "_utils", ".", "pin_memory", ".", "_pin_memory_loop", ",", "\n", "args", "=", "(", "self", ".", "_worker_result_queue", ",", "self", ".", "_data_queue", ",", "\n", "torch", ".", "cuda", ".", "current_device", "(", ")", ",", "\n", "self", ".", "_pin_memory_thread_done_event", ")", ")", "\n", "pin_memory_thread", ".", "daemon", "=", "True", "\n", "pin_memory_thread", ".", "start", "(", ")", "\n", "# Similar to workers (see comment above), we only register", "\n", "# pin_memory_thread once it is started.", "\n", "self", ".", "_pin_memory_thread", "=", "pin_memory_thread", "\n", "", "else", ":", "\n", "            ", "self", ".", "_data_queue", "=", "self", ".", "_worker_result_queue", "\n", "\n", "# .pid can be None only before process is spawned (not the case, so ignore)", "\n", "", "_utils", ".", "signal_handling", ".", "_set_worker_pids", "(", "id", "(", "self", ")", ",", "tuple", "(", "w", ".", "pid", "for", "w", "in", "self", ".", "_workers", ")", ")", "# type: ignore", "\n", "_utils", ".", "signal_handling", ".", "_set_SIGCHLD_handler", "(", ")", "\n", "self", ".", "_worker_pids_set", "=", "True", "\n", "self", ".", "_reset", "(", "loader", ",", "first_iter", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.dataloader._MultiProcessingDataLoaderIter._reset": [[830, 859], ["dataloader._BaseDataLoaderIter._reset", "range", "range", "dataloader._MultiProcessingDataLoaderIter._try_put_index", "range", "dataloader._MultiProcessingDataLoaderIter._index_queues[].put", "dataloader._MultiProcessingDataLoaderIter._get_data", "isinstance", "torch.utils.data._utils.worker._ResumeIteration", "torch.utils.data._utils.worker._ResumeIteration"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.dataloader._MultiProcessingDataLoaderIter._reset", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.dataloader._MultiProcessingDataLoaderIter._try_put_index", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.dataloader._MultiProcessingDataLoaderIter._get_data"], ["", "def", "_reset", "(", "self", ",", "loader", ",", "first_iter", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "_reset", "(", "loader", ",", "first_iter", ")", "\n", "self", ".", "_send_idx", "=", "0", "# idx of the next task to be sent to workers", "\n", "self", ".", "_rcvd_idx", "=", "0", "# idx of the next task to be returned in __next__", "\n", "# information about data not yet yielded, i.e., tasks w/ indices in range [rcvd_idx, send_idx).", "\n", "# map: task idx => - (worker_id,)        if data isn't fetched (outstanding)", "\n", "#                  \\ (worker_id, data)   if data is already fetched (out-of-order)", "\n", "self", ".", "_task_info", "=", "{", "}", "\n", "self", ".", "_tasks_outstanding", "=", "0", "# always equal to count(v for v in task_info.values() if len(v) == 1)", "\n", "# A list of booleans representing whether each worker still has work to", "\n", "# do, i.e., not having exhausted its iterable dataset object. It always", "\n", "# contains all `True`s if not using an iterable-style dataset", "\n", "# (i.e., if kind != Iterable).", "\n", "# Not that this indicates that a worker still has work to do *for this epoch*.", "\n", "# It does not mean that a worker is dead. In case of `_persistent_workers`,", "\n", "# the worker will be reset to available in the next epoch.", "\n", "self", ".", "_workers_status", "=", "[", "True", "for", "i", "in", "range", "(", "self", ".", "_num_workers", ")", "]", "\n", "# We resume the prefetching in case it was enabled", "\n", "if", "not", "first_iter", ":", "\n", "            ", "for", "idx", "in", "range", "(", "self", ".", "_num_workers", ")", ":", "\n", "                ", "self", ".", "_index_queues", "[", "idx", "]", ".", "put", "(", "_utils", ".", "worker", ".", "_ResumeIteration", "(", ")", ")", "\n", "", "resume_iteration_cnt", "=", "self", ".", "_num_workers", "\n", "while", "resume_iteration_cnt", ">", "0", ":", "\n", "                ", "data", "=", "self", ".", "_get_data", "(", ")", "\n", "if", "isinstance", "(", "data", ",", "_utils", ".", "worker", ".", "_ResumeIteration", ")", ":", "\n", "                    ", "resume_iteration_cnt", "-=", "1", "\n", "# prime the prefetch loop", "\n", "", "", "", "for", "_", "in", "range", "(", "self", ".", "_prefetch_factor", "*", "self", ".", "_num_workers", ")", ":", "\n", "            ", "self", ".", "_try_put_index", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.dataloader._MultiProcessingDataLoaderIter._try_get_data": [[860, 908], ["dataloader._MultiProcessingDataLoaderIter._data_queue.get", "enumerate", "isinstance", "len", "RuntimeError", "failed_workers.append", "dataloader._MultiProcessingDataLoaderIter._mark_worker_as_unavailable", "tempfile.NamedTemporaryFile", "w.is_alive", "str", "range", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.dataloader._MultiProcessingDataLoaderIter._mark_worker_as_unavailable"], ["", "", "def", "_try_get_data", "(", "self", ",", "timeout", "=", "_utils", ".", "MP_STATUS_CHECK_INTERVAL", ")", ":", "\n", "# Tries to fetch data from `self._data_queue` once for a given timeout.", "\n", "# This can also be used as inner loop of fetching without timeout, with", "\n", "# the sender status as the loop condition.", "\n", "#", "\n", "# This raises a `RuntimeError` if any worker died expectedly. This error", "\n", "# can come from either the SIGCHLD handler in `_utils/signal_handling.py`", "\n", "# (only for non-Windows platforms), or the manual check below on errors", "\n", "# and timeouts.", "\n", "#", "\n", "# Returns a 2-tuple:", "\n", "#   (bool: whether successfully get data, any: data if successful else None)", "\n", "        ", "try", ":", "\n", "            ", "data", "=", "self", ".", "_data_queue", ".", "get", "(", "timeout", "=", "timeout", ")", "\n", "return", "(", "True", ",", "data", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "# At timeout and error, we manually check whether any worker has", "\n", "# failed. Note that this is the only mechanism for Windows to detect", "\n", "# worker failures.", "\n", "            ", "failed_workers", "=", "[", "]", "\n", "for", "worker_id", ",", "w", "in", "enumerate", "(", "self", ".", "_workers", ")", ":", "\n", "                ", "if", "self", ".", "_workers_status", "[", "worker_id", "]", "and", "not", "w", ".", "is_alive", "(", ")", ":", "\n", "                    ", "failed_workers", ".", "append", "(", "w", ")", "\n", "self", ".", "_mark_worker_as_unavailable", "(", "worker_id", ")", "\n", "", "", "if", "len", "(", "failed_workers", ")", ">", "0", ":", "\n", "                ", "pids_str", "=", "', '", ".", "join", "(", "str", "(", "w", ".", "pid", ")", "for", "w", "in", "failed_workers", ")", "\n", "raise", "RuntimeError", "(", "'DataLoader worker (pid(s) {}) exited unexpectedly'", ".", "format", "(", "pids_str", ")", ")", "from", "e", "\n", "", "if", "isinstance", "(", "e", ",", "queue", ".", "Empty", ")", ":", "\n", "                ", "return", "(", "False", ",", "None", ")", "\n", "", "import", "tempfile", "\n", "import", "errno", "\n", "try", ":", "\n", "# Raise an exception if we are this close to the FDs limit.", "\n", "# Apparently, trying to open only one file is not a sufficient", "\n", "# test.", "\n", "# See NOTE [ DataLoader on Linux and open files limit ]", "\n", "                ", "fds_limit_margin", "=", "10", "\n", "fs", "=", "[", "tempfile", ".", "NamedTemporaryFile", "(", ")", "for", "i", "in", "range", "(", "fds_limit_margin", ")", "]", "\n", "", "except", "OSError", "as", "e", ":", "\n", "                ", "if", "e", ".", "errno", "==", "errno", ".", "EMFILE", ":", "\n", "                    ", "raise", "RuntimeError", "(", "\n", "\"Too many open files. Communication with the\"", "\n", "\" workers is no longer possible. Please increase the\"", "\n", "\" limit using `ulimit -n` in the shell or change the\"", "\n", "\" sharing strategy by calling\"", "\n", "\" `torch.multiprocessing.set_sharing_strategy('file_system')`\"", "\n", "\" at the beginning of your code\"", ")", "from", "None", "\n", "", "", "raise", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.dataloader._MultiProcessingDataLoaderIter._get_data": [[1006, 1038], ["dataloader._MultiProcessingDataLoaderIter._try_get_data", "RuntimeError", "dataloader._MultiProcessingDataLoaderIter._pin_memory_thread.is_alive", "dataloader._MultiProcessingDataLoaderIter._try_get_data", "RuntimeError", "dataloader._MultiProcessingDataLoaderIter._try_get_data"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.dataloader._MultiProcessingDataLoaderIter._try_get_data", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.dataloader._MultiProcessingDataLoaderIter._try_get_data", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.dataloader._MultiProcessingDataLoaderIter._try_get_data"], ["", "", "def", "_get_data", "(", "self", ")", ":", "\n", "# Fetches data from `self._data_queue`.", "\n", "#", "\n", "# We check workers' status every `MP_STATUS_CHECK_INTERVAL` seconds,", "\n", "# which we achieve by running `self._try_get_data(timeout=MP_STATUS_CHECK_INTERVAL)`", "\n", "# in a loop. This is the only mechanism to detect worker failures for", "\n", "# Windows. For other platforms, a SIGCHLD handler is also used for", "\n", "# worker failure detection.", "\n", "#", "\n", "# If `pin_memory=True`, we also need check if `pin_memory_thread` had", "\n", "# died at timeouts.", "\n", "        ", "if", "self", ".", "_timeout", ">", "0", ":", "\n", "            ", "success", ",", "data", "=", "self", ".", "_try_get_data", "(", "self", ".", "_timeout", ")", "\n", "if", "success", ":", "\n", "                ", "return", "data", "\n", "", "else", ":", "\n", "                ", "raise", "RuntimeError", "(", "'DataLoader timed out after {} seconds'", ".", "format", "(", "self", ".", "_timeout", ")", ")", "\n", "", "", "elif", "self", ".", "_pin_memory", ":", "\n", "            ", "while", "self", ".", "_pin_memory_thread", ".", "is_alive", "(", ")", ":", "\n", "                ", "success", ",", "data", "=", "self", ".", "_try_get_data", "(", ")", "\n", "if", "success", ":", "\n", "                    ", "return", "data", "\n", "", "", "else", ":", "\n", "# while condition is false, i.e., pin_memory_thread died.", "\n", "                ", "raise", "RuntimeError", "(", "'Pin memory thread exited unexpectedly'", ")", "\n", "# In this case, `self._data_queue` is a `queue.Queue`,. But we don't", "\n", "# need to call `.task_done()` because we don't use `.join()`.", "\n", "", "", "else", ":", "\n", "            ", "while", "True", ":", "\n", "                ", "success", ",", "data", "=", "self", ".", "_try_get_data", "(", ")", "\n", "if", "success", ":", "\n", "                    ", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.dataloader._MultiProcessingDataLoaderIter._next_data": [[1039, 1087], ["dataloader._MultiProcessingDataLoaderIter._get_data", "len", "dataloader._MultiProcessingDataLoaderIter._process_data", "isinstance", "dataloader._MultiProcessingDataLoaderIter._process_data", "dataloader._MultiProcessingDataLoaderIter._shutdown_workers", "dataloader._MultiProcessingDataLoaderIter._task_info.pop", "dataloader._MultiProcessingDataLoaderIter._try_put_index", "len", "dataloader._MultiProcessingDataLoaderIter._mark_worker_as_unavailable"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.dataloader._MultiProcessingDataLoaderIter._get_data", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.dataloader._MultiProcessingDataLoaderIter._process_data", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.dataloader._MultiProcessingDataLoaderIter._process_data", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.dataloader._MultiProcessingDataLoaderIter._shutdown_workers", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.dataloader._MultiProcessingDataLoaderIter._try_put_index", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.dataloader._MultiProcessingDataLoaderIter._mark_worker_as_unavailable"], ["", "", "", "", "def", "_next_data", "(", "self", ")", ":", "\n", "        ", "while", "True", ":", "\n", "# If the worker responsible for `self._rcvd_idx` has already ended", "\n", "# and was unable to fulfill this task (due to exhausting an `IterableDataset`),", "\n", "# we try to advance `self._rcvd_idx` to find the next valid index.", "\n", "#", "\n", "# This part needs to run in the loop because both the `self._get_data()`", "\n", "# call and `_IterableDatasetStopIteration` check below can mark", "\n", "# extra worker(s) as dead.", "\n", "            ", "while", "self", ".", "_rcvd_idx", "<", "self", ".", "_send_idx", ":", "\n", "                ", "info", "=", "self", ".", "_task_info", "[", "self", ".", "_rcvd_idx", "]", "\n", "worker_id", "=", "info", "[", "0", "]", "\n", "if", "len", "(", "info", ")", "==", "2", "or", "self", ".", "_workers_status", "[", "worker_id", "]", ":", "# has data or is still active", "\n", "                    ", "break", "\n", "", "del", "self", ".", "_task_info", "[", "self", ".", "_rcvd_idx", "]", "\n", "self", ".", "_rcvd_idx", "+=", "1", "\n", "", "else", ":", "\n", "# no valid `self._rcvd_idx` is found (i.e., didn't break)", "\n", "                ", "if", "not", "self", ".", "_persistent_workers", ":", "\n", "                    ", "self", ".", "_shutdown_workers", "(", ")", "\n", "", "raise", "StopIteration", "\n", "\n", "# Now `self._rcvd_idx` is the batch index we want to fetch", "\n", "\n", "# Check if the next sample has already been generated", "\n", "", "if", "len", "(", "self", ".", "_task_info", "[", "self", ".", "_rcvd_idx", "]", ")", "==", "2", ":", "\n", "                ", "data", "=", "self", ".", "_task_info", ".", "pop", "(", "self", ".", "_rcvd_idx", ")", "[", "1", "]", "\n", "return", "self", ".", "_process_data", "(", "data", ")", "\n", "\n", "", "assert", "not", "self", ".", "_shutdown", "and", "self", ".", "_tasks_outstanding", ">", "0", "\n", "idx", ",", "data", "=", "self", ".", "_get_data", "(", ")", "\n", "self", ".", "_tasks_outstanding", "-=", "1", "\n", "if", "self", ".", "_dataset_kind", "==", "_DatasetKind", ".", "Iterable", ":", "\n", "# Check for _IterableDatasetStopIteration", "\n", "                ", "if", "isinstance", "(", "data", ",", "_utils", ".", "worker", ".", "_IterableDatasetStopIteration", ")", ":", "\n", "                    ", "if", "self", ".", "_persistent_workers", ":", "\n", "                        ", "self", ".", "_workers_status", "[", "data", ".", "worker_id", "]", "=", "False", "\n", "", "else", ":", "\n", "                        ", "self", ".", "_mark_worker_as_unavailable", "(", "data", ".", "worker_id", ")", "\n", "", "self", ".", "_try_put_index", "(", ")", "\n", "continue", "\n", "\n", "", "", "if", "idx", "!=", "self", ".", "_rcvd_idx", ":", "\n", "# store out-of-order samples", "\n", "                ", "self", ".", "_task_info", "[", "idx", "]", "+=", "(", "data", ",", ")", "\n", "", "else", ":", "\n", "                ", "del", "self", ".", "_task_info", "[", "idx", "]", "\n", "return", "self", ".", "_process_data", "(", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.dataloader._MultiProcessingDataLoaderIter._try_put_index": [[1088, 1107], ["range", "dataloader._MultiProcessingDataLoaderIter._index_queues[].put", "dataloader._MultiProcessingDataLoaderIter._next_index", "next"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.dataloader._BaseDataLoaderIter._next_index"], ["", "", "", "def", "_try_put_index", "(", "self", ")", ":", "\n", "        ", "assert", "self", ".", "_tasks_outstanding", "<", "self", ".", "_prefetch_factor", "*", "self", ".", "_num_workers", "\n", "\n", "try", ":", "\n", "            ", "index", "=", "self", ".", "_next_index", "(", ")", "\n", "", "except", "StopIteration", ":", "\n", "            ", "return", "\n", "", "for", "_", "in", "range", "(", "self", ".", "_num_workers", ")", ":", "# find the next active worker, if any", "\n", "            ", "worker_queue_idx", "=", "next", "(", "self", ".", "_worker_queue_idx_cycle", ")", "\n", "if", "self", ".", "_workers_status", "[", "worker_queue_idx", "]", ":", "\n", "                ", "break", "\n", "", "", "else", ":", "\n", "# not found (i.e., didn't break)", "\n", "            ", "return", "\n", "\n", "", "self", ".", "_index_queues", "[", "worker_queue_idx", "]", ".", "put", "(", "(", "self", ".", "_send_idx", ",", "index", ")", ")", "\n", "self", ".", "_task_info", "[", "self", ".", "_send_idx", "]", "=", "(", "worker_queue_idx", ",", ")", "\n", "self", ".", "_tasks_outstanding", "+=", "1", "\n", "self", ".", "_send_idx", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.dataloader._MultiProcessingDataLoaderIter._process_data": [[1108, 1114], ["dataloader._MultiProcessingDataLoaderIter._try_put_index", "isinstance", "data.reraise"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.dataloader._MultiProcessingDataLoaderIter._try_put_index"], ["", "def", "_process_data", "(", "self", ",", "data", ")", ":", "\n", "        ", "self", ".", "_rcvd_idx", "+=", "1", "\n", "self", ".", "_try_put_index", "(", ")", "\n", "if", "isinstance", "(", "data", ",", "ExceptionWrapper", ")", ":", "\n", "            ", "data", ".", "reraise", "(", ")", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.dataloader._MultiProcessingDataLoaderIter._mark_worker_as_unavailable": [[1115, 1140], ["q.put", "dataloader._MultiProcessingDataLoaderIter._workers_done_event.is_set"], "methods", ["None"], ["", "def", "_mark_worker_as_unavailable", "(", "self", ",", "worker_id", ",", "shutdown", "=", "False", ")", ":", "\n", "# Mark a worker as having finished its work e.g., due to", "\n", "# exhausting an `IterableDataset`. This should be used only when this", "\n", "# `_MultiProcessingDataLoaderIter` is going to continue running.", "\n", "\n", "        ", "assert", "self", ".", "_workers_status", "[", "worker_id", "]", "or", "(", "self", ".", "_persistent_workers", "and", "shutdown", ")", "\n", "\n", "# Signal termination to that specific worker.", "\n", "q", "=", "self", ".", "_index_queues", "[", "worker_id", "]", "\n", "# Indicate that no more data will be put on this queue by the current", "\n", "# process.", "\n", "q", ".", "put", "(", "None", ")", "\n", "\n", "# Note that we don't actually join the worker here, nor do we remove the", "\n", "# worker's pid from C side struct because (1) joining may be slow, and", "\n", "# (2) since we don't join, the worker may still raise error, and we", "\n", "# prefer capturing those, rather than ignoring them, even though they", "\n", "# are raised after the worker has finished its job.", "\n", "# Joinning is deferred to `_shutdown_workers`, which it is called when", "\n", "# all workers finish their jobs (e.g., `IterableDataset` replicas) or", "\n", "# when this iterator is garbage collected.", "\n", "\n", "self", ".", "_workers_status", "[", "worker_id", "]", "=", "False", "\n", "\n", "assert", "self", ".", "_workers_done_event", ".", "is_set", "(", ")", "==", "shutdown", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.dataloader._MultiProcessingDataLoaderIter._shutdown_workers": [[1141, 1202], ["hasattr", "dataloader._MultiProcessingDataLoaderIter._workers_done_event.set", "range", "dataloader._MultiProcessingDataLoaderIter._pin_memory_thread_done_event.set", "dataloader._MultiProcessingDataLoaderIter._worker_result_queue.put", "dataloader._MultiProcessingDataLoaderIter._pin_memory_thread.join", "dataloader._MultiProcessingDataLoaderIter._worker_result_queue.cancel_join_thread", "dataloader._MultiProcessingDataLoaderIter._worker_result_queue.close", "len", "w.join", "w.is_alive", "q.cancel_join_thread", "q.close", "torch.utils.data._utils.signal_handling._remove_worker_pids", "torch.utils.data._utils.signal_handling._remove_worker_pids", "dataloader._MultiProcessingDataLoaderIter._mark_worker_as_unavailable", "w.terminate", "id"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.dataloader._MultiProcessingDataLoaderIter._mark_worker_as_unavailable"], ["", "def", "_shutdown_workers", "(", "self", ")", ":", "\n", "# Called when shutting down this `_MultiProcessingDataLoaderIter`.", "\n", "# See NOTE [ Data Loader Multiprocessing Shutdown Logic ] for details on", "\n", "# the logic of this function.", "\n", "        ", "python_exit_status", "=", "_utils", ".", "python_exit_status", "\n", "if", "python_exit_status", "is", "True", "or", "python_exit_status", "is", "None", ":", "\n", "# See (2) of the note. If Python is shutting down, do no-op.", "\n", "            ", "return", "\n", "# Normal exit when last reference is gone / iterator is depleted.", "\n", "# See (1) and the second half of the note.", "\n", "", "if", "not", "self", ".", "_shutdown", ":", "\n", "            ", "self", ".", "_shutdown", "=", "True", "\n", "try", ":", "\n", "# Exit `pin_memory_thread` first because exiting workers may leave", "\n", "# corrupted data in `worker_result_queue` which `pin_memory_thread`", "\n", "# reads from.", "\n", "                ", "if", "hasattr", "(", "self", ",", "'_pin_memory_thread'", ")", ":", "\n", "# Use hasattr in case error happens before we set the attribute.", "\n", "                    ", "self", ".", "_pin_memory_thread_done_event", ".", "set", "(", ")", "\n", "# Send something to pin_memory_thread in case it is waiting", "\n", "# so that it can wake up and check `pin_memory_thread_done_event`", "\n", "self", ".", "_worker_result_queue", ".", "put", "(", "(", "None", ",", "None", ")", ")", "\n", "self", ".", "_pin_memory_thread", ".", "join", "(", ")", "\n", "self", ".", "_worker_result_queue", ".", "cancel_join_thread", "(", ")", "\n", "self", ".", "_worker_result_queue", ".", "close", "(", ")", "\n", "\n", "# Exit workers now.", "\n", "", "self", ".", "_workers_done_event", ".", "set", "(", ")", "\n", "for", "worker_id", "in", "range", "(", "len", "(", "self", ".", "_workers", ")", ")", ":", "\n", "# Get number of workers from `len(self._workers)` instead of", "\n", "# `self._num_workers` in case we error before starting all", "\n", "# workers.", "\n", "# If we are using workers_status with persistent_workers", "\n", "# we have to shut it down because the worker is paused", "\n", "                    ", "if", "self", ".", "_persistent_workers", "or", "self", ".", "_workers_status", "[", "worker_id", "]", ":", "\n", "                        ", "self", ".", "_mark_worker_as_unavailable", "(", "worker_id", ",", "shutdown", "=", "True", ")", "\n", "", "", "for", "w", "in", "self", ".", "_workers", ":", "\n", "                    ", "w", ".", "join", "(", "timeout", "=", "_utils", ".", "MP_STATUS_CHECK_INTERVAL", ")", "\n", "if", "w", ".", "is_alive", "(", ")", ":", "\n", "# Existing mechanisms try to make the workers exit", "\n", "# peacefully, but in case that we unfortunately reach", "\n", "# here, which we shouldn't, (e.g., pytorch/pytorch#39570),", "\n", "# we kill the worker.", "\n", "                        ", "w", ".", "terminate", "(", ")", "\n", "", "", "for", "q", "in", "self", ".", "_index_queues", ":", "\n", "                    ", "q", ".", "cancel_join_thread", "(", ")", "\n", "q", ".", "close", "(", ")", "\n", "", "", "finally", ":", "\n", "# Even though all this function does is putting into queues that", "\n", "# we have called `cancel_join_thread` on, weird things can", "\n", "# happen when a worker is killed by a signal, e.g., hanging in", "\n", "# `Event.set()`. So we need to guard this with SIGCHLD handler,", "\n", "# and remove pids from the C side data structure only at the", "\n", "# end.", "\n", "#", "\n", "# FIXME: Unfortunately, for Windows, we are missing a worker", "\n", "#        error detection mechanism here in this function, as it", "\n", "#        doesn't provide a SIGCHLD handler.", "\n", "                ", "if", "self", ".", "_worker_pids_set", ":", "\n", "                    ", "_utils", ".", "signal_handling", ".", "_remove_worker_pids", "(", "id", "(", "self", ")", ")", "\n", "self", ".", "_worker_pids_set", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.dataloader._MultiProcessingDataLoaderIter.__del__": [[1203, 1205], ["dataloader._MultiProcessingDataLoaderIter._shutdown_workers"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.dataloader._MultiProcessingDataLoaderIter._shutdown_workers"], ["", "", "", "", "def", "__del__", "(", "self", ")", ":", "\n", "        ", "self", ".", "_shutdown_workers", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.util.Writer.__init__": [[108, 128], ["isinstance", "time.time", "os.path.exists", "os.makedirs", "vars", "shutil.rmtree", "open", "json.dump", "time.strftime", "time.localtime", "hashlib.sha1().hexdigest", "hashlib.sha1", "str().encode", "str"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "case_name", ",", "config", ",", "log_path", "=", "None", ",", "postfix", "=", "True", ",", "tb_writer", "=", "None", ")", ":", "\n", "        ", "if", "isinstance", "(", "config", ",", "dict", ")", ":", "\n", "            ", "self", ".", "meta", "=", "config", "\n", "", "else", ":", "\n", "            ", "self", ".", "meta", "=", "vars", "(", "config", ")", "\n", "", "self", ".", "time", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "meta", "[", "'time'", "]", "=", "self", ".", "time", "\n", "self", ".", "idstr", "=", "case_name", "\n", "self", ".", "column_name", "=", "{", "}", "\n", "if", "postfix", ":", "\n", "            ", "self", ".", "idstr", "+=", "time", ".", "strftime", "(", "\"%y%m%d.%H:%M:%S\"", ",", "time", ".", "localtime", "(", ")", ")", "+", "hashlib", ".", "sha1", "(", "str", "(", "self", ".", "meta", ")", ".", "encode", "(", "'UTF-8'", ")", ")", ".", "hexdigest", "(", ")", "[", ":", "8", "]", "\n", "\n", "", "self", ".", "log_path", "=", "log_path", "if", "log_path", "else", "self", ".", "_log_path", "\n", "if", "os", ".", "path", ".", "exists", "(", "self", ".", "case_dir", ")", ":", "\n", "            ", "rmtree", "(", "self", ".", "case_dir", ")", "\n", "", "os", ".", "makedirs", "(", "self", ".", "case_dir", ",", "exist_ok", "=", "False", ")", "\n", "\n", "with", "open", "(", "self", ".", "metaf", ",", "'wt'", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "self", ".", "meta", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.util.Writer.append_trace": [[129, 138], ["list", "os.path.exists", "open", "f.write", "data.keys", "len", "util.Writer.tracef", "open", "f.write", "util.Writer.tracef", "util.Writer.tracef", "str"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.util.Writer.tracef", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.util.Writer.tracef", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.util.Writer.tracef"], ["", "", "def", "append_trace", "(", "self", ",", "trace_name", ",", "data", ")", ":", "\n", "        ", "if", "trace_name", "not", "in", "self", ".", "column_name", ":", "\n", "            ", "self", ".", "column_name", "[", "trace_name", "]", "=", "list", "(", "data", ".", "keys", "(", ")", ")", "\n", "assert", "len", "(", "self", ".", "column_name", "[", "trace_name", "]", ")", ">", "0", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "tracef", "(", "trace_name", ")", ")", ":", "\n", "            ", "with", "open", "(", "self", ".", "tracef", "(", "trace_name", ")", ",", "'at'", ")", "as", "f", ":", "\n", "                ", "f", ".", "write", "(", "','", ".", "join", "(", "self", ".", "column_name", "[", "trace_name", "]", ")", "+", "'\\n'", ")", "\n", "", "", "with", "open", "(", "self", ".", "tracef", "(", "trace_name", ")", ",", "'at'", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "','", ".", "join", "(", "[", "str", "(", "data", "[", "c", "]", ")", "for", "c", "in", "self", ".", "column_name", "[", "trace_name", "]", "]", ")", "+", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.util.Writer.save_pickle": [[139, 142], ["open", "pickle.dump", "os.path.join"], "methods", ["None"], ["", "", "def", "save_pickle", "(", "self", ",", "obj", ",", "name", ")", ":", "\n", "        ", "with", "open", "(", "join", "(", "self", ".", "case_dir", ",", "name", ")", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "obj", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.util.Writer.save_array": [[143, 145], ["numpy.save", "os.path.join"], "methods", ["None"], ["", "", "def", "save_array", "(", "self", ",", "arr", ",", "name", ")", ":", "\n", "        ", "np", ".", "save", "(", "join", "(", "self", ".", "case_dir", ",", "name", ")", ",", "arr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.util.Writer.save_json": [[146, 151], ["name.endswith", "open", "json.dump", "os.path.join"], "methods", ["None"], ["", "def", "save_json", "(", "self", ",", "obj", ",", "name", ")", ":", "\n", "        ", "if", "not", "name", ".", "endswith", "(", "'json'", ")", ":", "\n", "            ", "name", "+=", "'.json'", "\n", "", "with", "open", "(", "join", "(", "self", ".", "case_dir", ",", "name", ")", ",", "'wt'", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "obj", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.util.Writer.save_dataframe": [[152, 157], ["pandas.DataFrame.from_dict", "pandas.DataFrame.from_dict.to_csv", "name.endswith", "os.path.join"], "methods", ["None"], ["", "", "def", "save_dataframe", "(", "self", ",", "obj", ",", "name", ")", ":", "\n", "        ", "if", "not", "name", ".", "endswith", "(", "'csv'", ")", ":", "\n", "            ", "name", "+=", "'.csv'", "\n", "", "df", "=", "pd", ".", "DataFrame", ".", "from_dict", "(", "data", "=", "obj", ")", "\n", "df", ".", "to_csv", "(", "join", "(", "self", ".", "case_dir", ",", "name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.util.Writer.save_model": [[158, 165], ["print", "torch.save", "model.to", "model.cpu().state_dict", "opt.state_dict", "util.Writer.modelf", "model.cpu"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.to", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.util.Writer.modelf"], ["", "def", "save_model", "(", "self", ",", "model", ":", "torch", ".", "nn", ".", "Module", ",", "opt", ",", "step", ",", "warm_up_step", ",", "lr", ")", ":", "\n", "        ", "print", "(", "\"saving model : \"", ",", "step", ")", "\n", "device", "=", "model", ".", "device", "\n", "save_data", "=", "{", "'model_parameter'", ":", "model", ".", "cpu", "(", ")", ".", "state_dict", "(", ")", ",", "'optimizer_parameter'", ":", "opt", ".", "state_dict", "(", ")", ",", "\n", "'warm_up_steps'", ":", "warm_up_step", ",", "'learning_rate'", ":", "lr", "}", "\n", "torch", ".", "save", "(", "save_data", ",", "self", ".", "modelf", "(", "step", ")", ")", "\n", "model", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.util.Writer.save_plot": [[166, 168], ["fig.savefig", "os.path.join"], "methods", ["None"], ["", "def", "save_plot", "(", "self", ",", "fig", ",", "name", ")", ":", "\n", "        ", "fig", ".", "savefig", "(", "join", "(", "self", ".", "case_dir", ",", "name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.util.Writer.case_dir": [[169, 172], ["os.path.join"], "methods", ["None"], ["", "@", "property", "\n", "def", "case_dir", "(", "self", ")", ":", "\n", "        ", "return", "join", "(", "self", ".", "log_path", ",", "self", ".", "idstr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.util.Writer.metaf": [[173, 176], ["os.path.join"], "methods", ["None"], ["", "@", "property", "\n", "def", "metaf", "(", "self", ")", ":", "\n", "        ", "return", "join", "(", "self", ".", "case_dir", ",", "'meta.json'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.util.Writer.tracef": [[177, 179], ["os.path.join"], "methods", ["None"], ["", "def", "tracef", "(", "self", ",", "name", ")", ":", "\n", "        ", "return", "join", "(", "self", ".", "case_dir", ",", "'{}.csv'", ".", "format", "(", "name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.util.Writer.modelf": [[180, 182], ["os.path.join"], "methods", ["None"], ["", "def", "modelf", "(", "self", ",", "e", ")", ":", "\n", "        ", "return", "join", "(", "self", ".", "case_dir", ",", "'{}.ckpt'", ".", "format", "(", "e", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.util.load_graph": [[22, 38], ["collections.defaultdict", "collections.defaultdict", "copy.deepcopy", "copy.deepcopy", "open", "infile.readlines", "collections.defaultdict", "collections.defaultdict", "line.strip().split", "int", "int", "int", "[].add", "[].add", "line.strip"], "function", ["None"], ["def", "load_graph", "(", "input_edge_file", ",", "\n", "projection_origin", "=", "defaultdict", "(", "lambda", ":", "defaultdict", "(", "set", ")", ")", ",", "\n", "reverse_origin", "=", "defaultdict", "(", "lambda", ":", "defaultdict", "(", "set", ")", ")", ")", ":", "\n", "\n", "    ", "projections", "=", "copy", ".", "deepcopy", "(", "projection_origin", ")", "\n", "reverse", "=", "copy", ".", "deepcopy", "(", "reverse_origin", ")", "\n", "with", "open", "(", "input_edge_file", ",", "'r'", ",", "errors", "=", "'ignore'", ")", "as", "infile", ":", "\n", "        ", "for", "line", "in", "infile", ".", "readlines", "(", ")", ":", "\n", "            ", "e1", ",", "r", ",", "e2", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "e1", "=", "int", "(", "e1", ")", "\n", "e2", "=", "int", "(", "e2", ")", "\n", "r", "=", "int", "(", "r", ")", "\n", "projections", "[", "e1", "]", "[", "r", "]", ".", "add", "(", "e2", ")", "\n", "reverse", "[", "e2", "]", "[", "r", "]", ".", "add", "(", "e1", ")", "\n", "\n", "", "", "return", "projections", ",", "reverse", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.util.read_indexing": [[234, 240], ["pickle.load", "pickle.load", "pickle.load", "pickle.load", "open", "open", "open", "open", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "function", ["None"], ["", "def", "read_indexing", "(", "data_path", ")", ":", "\n", "    ", "ent2id", "=", "pickle", ".", "load", "(", "open", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "\"ent2id.pkl\"", ")", ",", "'rb'", ")", ")", "\n", "rel2id", "=", "pickle", ".", "load", "(", "open", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "\"rel2id.pkl\"", ")", ",", "'rb'", ")", ")", "\n", "id2ent", "=", "pickle", ".", "load", "(", "open", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "\"id2ent.pkl\"", ")", ",", "'rb'", ")", ")", "\n", "id2rel", "=", "pickle", ".", "load", "(", "open", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "\"id2rel.pkl\"", ")", ",", "'rb'", ")", ")", "\n", "return", "ent2id", ",", "rel2id", ",", "id2ent", ",", "id2rel", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.util.list2tuple": [[52, 54], ["tuple", "util.list2tuple", "type"], "function", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.util.list2tuple"], ["", "def", "list2tuple", "(", "l", ")", ":", "\n", "    ", "return", "tuple", "(", "list2tuple", "(", "x", ")", "if", "type", "(", "x", ")", "==", "list", "else", "x", "for", "x", "in", "l", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.util.tuple2list": [[56, 58], ["list", "util.tuple2list", "type"], "function", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.util.tuple2list"], ["", "def", "tuple2list", "(", "t", ")", ":", "\n", "    ", "return", "list", "(", "tuple2list", "(", "x", ")", "if", "type", "(", "x", ")", "==", "tuple", "else", "x", "for", "x", "in", "t", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.util.flatten": [[60, 62], ["isinstance", "sum", "map"], "function", ["None"], ["", "def", "flatten", "(", "l", ")", ":", "return", "sum", "(", "map", "(", "flatten", ",", "l", ")", ",", "[", "]", "\n", ")", "if", "isinstance", "(", "l", ",", "tuple", ")", "else", "[", "l", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.util.parse_time": [[64, 66], ["time.strftime", "time.localtime"], "function", ["None"], ["def", "parse_time", "(", ")", ":", "\n", "    ", "return", "time", ".", "strftime", "(", "\"%Y.%m.%d-%H:%M:%S\"", ",", "time", ".", "localtime", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.util.set_global_seed": [[68, 74], ["torch.manual_seed", "torch.cuda.manual_seed", "numpy.random.seed", "random.seed"], "function", ["None"], ["", "def", "set_global_seed", "(", "seed", ")", ":", "\n", "    ", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.util.eval_tuple": [[76, 95], ["type", "eval", "arg_return[].split", "tuple", "List.append", "eval"], "function", ["None"], ["", "def", "eval_tuple", "(", "arg_return", ")", ":", "\n", "    ", "\"\"\"Evaluate a tuple string into a tuple.\"\"\"", "\n", "if", "type", "(", "arg_return", ")", "==", "tuple", ":", "\n", "        ", "return", "arg_return", "\n", "", "if", "arg_return", "[", "0", "]", "not", "in", "[", "\"(\"", ",", "\"[\"", "]", ":", "\n", "        ", "arg_return", "=", "eval", "(", "arg_return", ")", "\n", "", "else", ":", "\n", "        ", "splitted", "=", "arg_return", "[", "1", ":", "-", "1", "]", ".", "split", "(", "\",\"", ")", "\n", "List", "=", "[", "]", "\n", "for", "item", "in", "splitted", ":", "\n", "            ", "try", ":", "\n", "                ", "item", "=", "eval", "(", "item", ")", "\n", "", "except", ":", "\n", "                ", "pass", "\n", "", "if", "item", "==", "\"\"", ":", "\n", "                ", "continue", "\n", "", "List", ".", "append", "(", "item", ")", "\n", "", "arg_return", "=", "tuple", "(", "List", ")", "\n", "", "return", "arg_return", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.util.flatten_query": [[97, 103], ["list", "all_queries.extend"], "function", ["None"], ["", "def", "flatten_query", "(", "queries", ")", ":", "\n", "    ", "all_queries", "=", "[", "]", "\n", "for", "query_structure", "in", "queries", ":", "\n", "        ", "tmp_queries", "=", "list", "(", "queries", "[", "query_structure", "]", ")", "\n", "all_queries", ".", "extend", "(", "[", "(", "query", ",", "query_structure", ")", "for", "query", "in", "tmp_queries", "]", ")", "\n", "", "return", "all_queries", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.util.read_from_yaml": [[184, 188], ["open", "yaml.load"], "function", ["None"], ["", "", "def", "read_from_yaml", "(", "filepath", ")", ":", "\n", "    ", "with", "open", "(", "filepath", ",", "'r'", ")", "as", "fd", ":", "\n", "        ", "data", "=", "yaml", ".", "load", "(", "fd", ",", "Loader", "=", "yaml", ".", "FullLoader", ")", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.util.save_model": [[190, 205], ["vars", "torch.save", "open", "json.dump", "os.path.join", "os.path.join", "model.state_dict", "optimizer.state_dict"], "function", ["None"], ["", "def", "save_model", "(", "model", ",", "optimizer", ",", "save_variable_list", ",", "args", ")", ":", "\n", "    ", "'''\n    Save the parameters of the model and the optimizer,\n    as well as some other variables such as step and learning_rate\n    '''", "\n", "\n", "argparse_dict", "=", "vars", "(", "args", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "save_path", ",", "'config.json'", ")", ",", "'w'", ")", "as", "fjson", ":", "\n", "        ", "json", ".", "dump", "(", "argparse_dict", ",", "fjson", ")", "\n", "\n", "", "torch", ".", "save", "(", "{", "\n", "**", "save_variable_list", ",", "\n", "'model_state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer_state_dict'", ":", "optimizer", ".", "state_dict", "(", ")", "}", ",", "\n", "os", ".", "path", ".", "join", "(", "args", ".", "save_path", ",", "'checkpoint'", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.util.load_task_manager": [[242, 252], ["os.path.join", "print", "data_helper.Task", "tasks.append"], "function", ["None"], ["", "def", "load_task_manager", "(", "data_folder", ",", "mode", ",", "task_names", "=", "[", "]", ")", ":", "\n", "    ", "all_data", "=", "[", "]", "\n", "tasks", "=", "[", "]", "\n", "if", "task_names", ":", "\n", "        ", "for", "task_name", "in", "task_names", ":", "\n", "            ", "filename", "=", "os", ".", "path", ".", "join", "(", "data_folder", ",", "f'{mode}_{task_name}.csv'", ")", "\n", "print", "(", "f'[data] load query from file {filename}'", ")", "\n", "task", "=", "Task", "(", "filename", ",", "task_name", ")", "\n", "tasks", ".", "append", "(", "task", ")", "\n", "", "", "return", "tasks", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.util.parse_ans_set": [[254, 271], ["answer_set.strip().split", "len", "range", "answer_set.strip", "len", "int", "int", "len", "int", "int", "len"], "function", ["None"], ["", "def", "parse_ans_set", "(", "answer_set", ":", "str", ")", ":", "\n", "    ", "ans_list", "=", "answer_set", ".", "strip", "(", ")", ".", "split", "(", "','", ")", "\n", "if", "len", "(", "ans_list", ")", ">", "1", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "ans_list", ")", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "ans_list", "[", "i", "]", "=", "int", "(", "ans_list", "[", "i", "]", "[", "1", ":", "]", ")", "\n", "", "elif", "i", "==", "len", "(", "ans_list", ")", "-", "1", ":", "\n", "                ", "ans_list", "[", "i", "]", "=", "int", "(", "ans_list", "[", "i", "]", "[", ":", "-", "1", "]", ")", "\n", "", "else", ":", "\n", "                ", "ans_list", "[", "i", "]", "=", "int", "(", "ans_list", "[", "i", "]", ")", "\n", "", "", "", "elif", "len", "(", "ans_list", ")", "==", "1", "and", "ans_list", "[", "0", "]", "!=", "'set()'", ":", "\n", "        ", "ans_list", "[", "0", "]", "=", "int", "(", "ans_list", "[", "0", "]", "[", "1", ":", "-", "1", "]", ")", "\n", "", "else", ":", "\n", "        ", "assert", "ans_list", "[", "0", "]", "==", "'set()'", "\n", "ans_list", "=", "[", "]", "\n", "\n", "", "return", "ans_list", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.util.load_data_with_indexing": [[273, 290], ["util.read_indexing", "collections.defaultdict", "collections.defaultdict", "util.load_graph", "util.load_graph", "util.load_graph", "os.path.join", "os.path.join", "os.path.join", "collections.defaultdict", "collections.defaultdict"], "function", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.util.read_indexing", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.util.load_graph", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.util.load_graph", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.util.load_graph"], ["", "def", "load_data_with_indexing", "(", "data_path", ")", ":", "\n", "    ", "entity_dict", ",", "relation_dict", ",", "id2ent", ",", "id2rel", "=", "read_indexing", "(", "data_path", ")", "\n", "proj_none", "=", "defaultdict", "(", "lambda", ":", "defaultdict", "(", "set", ")", ")", "\n", "reverse_none", "=", "defaultdict", "(", "lambda", ":", "defaultdict", "(", "set", ")", ")", "\n", "proj_train", ",", "reverse_train", "=", "load_graph", "(", "join", "(", "data_path", ",", "\"train.txt\"", ")", ",", "\n", "proj_none", ",", "\n", "reverse_none", ")", "\n", "proj_valid", ",", "reverse_valid", "=", "load_graph", "(", "join", "(", "data_path", ",", "\"valid.txt\"", ")", ",", "\n", "proj_train", ",", "\n", "reverse_train", ")", "\n", "proj_test", ",", "reverse_test", "=", "load_graph", "(", "join", "(", "data_path", ",", "\"test.txt\"", ")", ",", "\n", "proj_valid", ",", "\n", "reverse_valid", ")", "\n", "return", "(", "entity_dict", ",", "relation_dict", ",", "\n", "proj_train", ",", "reverse_train", ",", "\n", "proj_valid", ",", "reverse_valid", ",", "\n", "proj_test", ",", "reverse_test", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.ans_statistic.count_ans": [[9, 20], ["pandas.read_csv", "pd.read_csv.easy_answer_set.map().tolist", "pd.read_csv.hard_answer_set.map().tolist", "len", "len", "numpy.asarray", "numpy.asarray", "pd.read_csv.easy_answer_set.map", "pd.read_csv.hard_answer_set.map", "list", "list", "eval", "eval"], "function", ["None"], ["def", "count_ans", "(", "csv_name", ":", "List", "[", "str", "]", ")", ":", "\n", "    ", "for", "name", "in", "csv_name", ":", "\n", "        ", "data", "=", "pd", ".", "read_csv", "(", "name", ")", "\n", "easy_ans_sets", "=", "data", ".", "easy_answer_set", ".", "map", "(", "\n", "lambda", "x", ":", "list", "(", "eval", "(", "x", ")", ")", ")", ".", "tolist", "(", ")", "\n", "hard_ans_sets", "=", "data", ".", "hard_answer_set", ".", "map", "(", "\n", "lambda", "x", ":", "list", "(", "eval", "(", "x", ")", ")", ")", ".", "tolist", "(", ")", "\n", "easy_ans_num", "=", "[", "len", "(", "easy_ans", ")", "for", "easy_ans", "in", "easy_ans_sets", "]", "\n", "hard_ans_num", "=", "[", "len", "(", "hard_ans", ")", "for", "hard_ans", "in", "hard_ans_sets", "]", "\n", "easy_ans_array", ",", "hard_ans_array", "=", "np", ".", "asarray", "(", "easy_ans_num", ")", ",", "np", ".", "asarray", "(", "hard_ans_num", ")", "\n", "return", "easy_ans_array", ",", "hard_ans_array", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.pre_process.preprocess": [[1, 19], ["open", "infile.readlines", "open", "line.strip().split", "len", "outfile.write", "r.split", "all_queries.append", "line.strip", "r.split", "all_queries.append", "all_queries.append", "print"], "function", ["None"], ["def", "preprocess", "(", "input_file", ",", "output_file", ")", ":", "\n", "    ", "all_queries", "=", "[", "]", "\n", "with", "open", "(", "input_file", ",", "'r'", ",", "errors", "=", "'ignore'", ")", "as", "infile", ":", "\n", "        ", "for", "line", "in", "infile", ".", "readlines", "(", ")", ":", "\n", "            ", "e1", ",", "r", ",", "e2", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "r_num", "=", "len", "(", "r", ".", "split", "(", "'.'", ")", ")", "\n", "if", "r_num", "==", "1", ":", "\n", "                ", "all_queries", ".", "append", "(", "[", "e1", ",", "r", ",", "e2", "]", ")", "\n", "", "elif", "r_num", "==", "2", ":", "\n", "                ", "r1", ",", "r2", "=", "r", ".", "split", "(", "'.'", ")", "\n", "all_queries", ".", "append", "(", "[", "e1", ",", "r1", ",", "e2", "]", ")", "\n", "all_queries", ".", "append", "(", "[", "e1", ",", "r2", ",", "e2", "]", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "r_num", ",", "r", ")", "\n", "", "", "", "with", "open", "(", "output_file", ",", "'w'", ")", "as", "outfile", ":", "\n", "        ", "for", "query", "in", "all_queries", ":", "\n", "            ", "e1", ",", "r", ",", "e2", "=", "query", "\n", "outfile", ".", "write", "(", "e1", "+", "'\\t'", "+", "r", "+", "'\\t'", "+", "e2", "+", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_newlook.TwoLayerNet.__init__": [[12, 18], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.BoxEstimator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "hidden_dim", ",", "output_dim", ")", ":", "\n", "        ", "super", "(", "TwoLayerNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layer1", "=", "nn", ".", "Linear", "(", "dim", ",", "hidden_dim", ")", "\n", "self", ".", "layer2", "=", "nn", ".", "Linear", "(", "hidden_dim", ",", "output_dim", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "layer1", ".", "weight", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "layer2", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_newlook.TwoLayerNet.forward": [[19, 21], ["estimator_newlook.TwoLayerNet.layer2", "torch.relu", "torch.relu", "estimator_newlook.TwoLayerNet.layer1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "emb", ")", ":", "\n", "        ", "return", "self", ".", "layer2", "(", "F", ".", "relu", "(", "self", ".", "layer1", "(", "emb", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_newlook.NLKProjection.__init__": [[24, 31], ["torch.nn.Module.__init__", "estimator_newlook.TwoLayerNet", "estimator_newlook.TwoLayerNet", "estimator_newlook.TwoLayerNet", "estimator_newlook.TwoLayerNet"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.BoxEstimator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "hidden_dim", ",", "group_num", ")", ":", "\n", "        ", "super", "(", "NLKProjection", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim", ",", "self", ".", "hidden_dim", ",", "self", ".", "concat_dim", "=", "dim", ",", "hidden_dim", ",", "2", "*", "dim", "+", "group_num", "\n", "self", ".", "MLP1", "=", "TwoLayerNet", "(", "dim", ",", "hidden_dim", ",", "dim", ")", "\n", "self", ".", "MLP2", "=", "TwoLayerNet", "(", "dim", ",", "hidden_dim", ",", "dim", ")", "\n", "self", ".", "MLP3", "=", "TwoLayerNet", "(", "self", ".", "concat_dim", ",", "hidden_dim", ",", "dim", ")", "\n", "self", ".", "MLP4", "=", "TwoLayerNet", "(", "self", ".", "concat_dim", ",", "hidden_dim", ",", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_newlook.NLKProjection.forward": [[32, 39], ["estimator_newlook.NLKProjection.MLP1", "estimator_newlook.NLKProjection.MLP2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "estimator_newlook.NLKProjection.MLP3", "estimator_newlook.NLKProjection.MLP4", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "origin_center", ",", "origin_offset", ",", "x_new", ")", ":", "\n", "        ", "z1", "=", "self", ".", "MLP1", "(", "origin_center", ")", "\n", "z2", "=", "self", ".", "MLP2", "(", "origin_offset", ")", "\n", "final_input", "=", "torch", ".", "cat", "(", "[", "z1", ",", "z2", ",", "x_new", "]", ",", "dim", "=", "-", "1", ")", "\n", "new_offset", "=", "self", ".", "MLP3", "(", "final_input", ")", "\n", "new_center", "=", "self", ".", "MLP4", "(", "final_input", ")", "\n", "return", "torch", ".", "cat", "(", "[", "new_center", ",", "new_offset", ",", "x_new", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_newlook.NLKOffsetIntersection.__init__": [[43, 51], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.BoxEstimator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "hidden_dim", ")", ":", "\n", "        ", "super", "(", "NLKOffsetIntersection", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "self", ".", "layer1", "=", "nn", ".", "Linear", "(", "2", "*", "self", ".", "dim", ",", "self", ".", "hidden_dim", ")", "\n", "self", ".", "layer2", "=", "nn", ".", "Linear", "(", "self", ".", "hidden_dim", ",", "self", ".", "dim", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "layer1", ".", "weight", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "layer2", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_newlook.NLKOffsetIntersection.forward": [[52, 59], ["torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.relu", "torch.relu", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.min", "torch.min", "torch.min", "torch.min", "estimator_newlook.NLKOffsetIntersection.layer1", "estimator_newlook.NLKOffsetIntersection.layer2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "embeddings", ")", ":", "\n", "        ", "center_embeddings", ",", "offset_embeddings", "=", "torch", ".", "chunk", "(", "embeddings", ",", "2", ",", "dim", "=", "-", "1", ")", "# conj*b*dim", "\n", "layer1_act", "=", "F", ".", "relu", "(", "self", ".", "layer1", "(", "embeddings", ")", ")", "\n", "layer1_mean", "=", "torch", ".", "mean", "(", "layer1_act", ",", "dim", "=", "0", ")", "\n", "gate", "=", "torch", ".", "sigmoid", "(", "self", ".", "layer2", "(", "layer1_mean", ")", ")", "\n", "offset", ",", "_", "=", "torch", ".", "min", "(", "offset_embeddings", ",", "dim", "=", "0", ")", "\n", "return", "offset", "*", "gate", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_newlook.NLKCenterIntersection.__init__": [[63, 71], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.BoxEstimator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "hidden_dim", ")", ":", "\n", "        ", "super", "(", "NLKCenterIntersection", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "self", ".", "layer1", "=", "nn", ".", "Linear", "(", "2", "*", "self", ".", "dim", ",", "self", ".", "hidden_dim", ")", "\n", "self", ".", "layer2", "=", "nn", ".", "Linear", "(", "self", ".", "hidden_dim", ",", "self", ".", "dim", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "layer1", ".", "weight", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "layer2", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_newlook.NLKCenterIntersection.forward": [[72, 78], ["torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "estimator_newlook.NLKCenterIntersection.layer2", "torch.softmax", "torch.softmax", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.relu", "torch.relu", "estimator_newlook.NLKCenterIntersection.layer1", "z.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "embeddings", ",", "z", ")", ":", "\n", "        ", "center_embeddings", ",", "offset_embeddings", "=", "torch", ".", "chunk", "(", "embeddings", ",", "2", ",", "dim", "=", "-", "1", ")", "\n", "layer2_act", "=", "self", ".", "layer2", "(", "F", ".", "relu", "(", "self", ".", "layer1", "(", "embeddings", ")", ")", ")", "# (num_conj, batch, dim)", "\n", "attention", "=", "F", ".", "softmax", "(", "z", ".", "unsqueeze", "(", "-", "1", ")", "*", "layer2_act", ",", "dim", "=", "0", ")", "# (num_conj, batch, dim)", "\n", "embedding", "=", "torch", ".", "sum", "(", "attention", "*", "center_embeddings", ",", "dim", "=", "0", ")", "\n", "return", "embedding", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_newlook.NLKDifferenceCenter.__init__": [[82, 90], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.BoxEstimator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "hidden_dim", ")", ":", "\n", "        ", "super", "(", "NLKDifferenceCenter", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "self", ".", "layer1", "=", "nn", ".", "Linear", "(", "self", ".", "dim", ",", "self", ".", "hidden_dim", ")", "\n", "self", ".", "layer2", "=", "nn", ".", "Linear", "(", "self", ".", "hidden_dim", ",", "self", ".", "dim", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "layer1", ".", "weight", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "layer2", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_newlook.NLKDifferenceCenter.forward": [[91, 94], ["torch.softmax", "torch.softmax", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "estimator_newlook.NLKDifferenceCenter.layer2", "torch.relu", "torch.relu", "estimator_newlook.NLKDifferenceCenter.layer1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "emb", ")", ":", "\n", "        ", "attention", "=", "F", ".", "softmax", "(", "self", ".", "layer2", "(", "F", ".", "relu", "(", "self", ".", "layer1", "(", "emb", ")", ")", ")", ",", "dim", "=", "0", ")", "\n", "return", "torch", ".", "sum", "(", "attention", "*", "emb", ",", "dim", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_newlook.NLKDifferenceOffset.__init__": [[98, 106], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.BoxEstimator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "hidden_dim", ")", ":", "\n", "        ", "super", "(", "NLKDifferenceOffset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "self", ".", "layer1", "=", "nn", ".", "Linear", "(", "self", ".", "dim", ",", "self", ".", "hidden_dim", ")", "\n", "self", ".", "layer2", "=", "nn", ".", "Linear", "(", "self", ".", "hidden_dim", ",", "self", ".", "dim", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "layer1", ".", "weight", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "layer2", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_newlook.NLKDifferenceOffset.forward": [[107, 111], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.softmax", "torch.softmax", "estimator_newlook.NLKDifferenceOffset.layer2", "loffset.unsqueeze", "torch.relu", "torch.relu", "estimator_newlook.NLKDifferenceOffset.layer1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "loffset", ",", "z", ")", ":", "\n", "        ", "all_emb", "=", "torch", ".", "cat", "(", "(", "loffset", ".", "unsqueeze", "(", "0", ")", ",", "z", ")", ",", "dim", "=", "0", ")", "\n", "attention", "=", "F", ".", "softmax", "(", "self", ".", "layer2", "(", "F", ".", "relu", "(", "self", ".", "layer1", "(", "all_emb", ")", ")", ")", ",", "dim", "=", "0", ")", "\n", "return", "attention", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_newlook.NLKEstimator.__init__": [[116, 157], ["appfoq.AppFOQEstimator.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.nn.init.uniform_", "torch.nn.init.uniform_", "torch.nn.init.uniform_", "torch.nn.init.uniform_", "torch.nn.init.uniform_", "torch.nn.init.uniform_", "estimator_newlook.NLKProjection", "estimator_newlook.NLKOffsetIntersection", "estimator_newlook.NLKCenterIntersection", "estimator_newlook.NLKDifferenceCenter", "estimator_newlook.NLKDifferenceOffset", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor().to.item", "torch.tensor().to.item", "torch.tensor().to.item", "torch.tensor().to.item", "torch.tensor().to.item", "torch.tensor().to.item", "torch.tensor().to.item", "torch.tensor().to.item", "torch.tensor().to.item", "torch.tensor().to.item", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "estimator_newlook.NLKEstimator.group_alignment.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.BoxEstimator.__init__", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.to", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.to", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.to", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.to"], ["def", "__init__", "(", "self", ",", "n_entity", ",", "n_relation", ",", "hidden_dim", ",", "\n", "gamma", ",", "entity_dim", ",", "relation_dim", ",", "center_reg", ",", "x_reg", ",", "\n", "negative_sample_size", ",", "group_number", ",", "device", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "name", "=", "'newlook'", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "n_entity", "=", "n_entity", "\n", "self", ".", "n_relation", "=", "n_relation", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "self", ".", "group_number", "=", "group_number", "\n", "self", ".", "gamma", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "Tensor", "(", "[", "gamma", "]", ")", ",", "\n", "requires_grad", "=", "False", "\n", ")", "\n", "self", ".", "epsilon", "=", "2.0", "\n", "self", ".", "negative_size", "=", "negative_sample_size", "\n", "self", ".", "cen_reg", "=", "center_reg", "\n", "self", ".", "x_reg", "=", "x_reg", "\n", "self", ".", "conj_reg", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "[", "0.01", "]", ")", ",", "requires_grad", "=", "False", ")", "# TODO: this is for avoid inf", "\n", "self", ".", "entity_dim", ",", "self", ".", "relation_dim", "=", "entity_dim", ",", "relation_dim", "\n", "self", ".", "entity_embeddings", "=", "nn", ".", "Embedding", "(", "num_embeddings", "=", "n_entity", ",", "\n", "embedding_dim", "=", "self", ".", "entity_dim", ")", "\n", "self", ".", "relation_embeddings", "=", "nn", ".", "Embedding", "(", "num_embeddings", "=", "n_relation", ",", "\n", "embedding_dim", "=", "self", ".", "relation_dim", ")", "\n", "self", ".", "offset_embeddings", "=", "nn", ".", "Embedding", "(", "num_embeddings", "=", "n_relation", ",", "embedding_dim", "=", "self", ".", "entity_dim", ")", "\n", "embedding_range", "=", "torch", ".", "tensor", "(", "[", "(", "self", ".", "gamma", "+", "self", ".", "epsilon", ")", "/", "entity_dim", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "nn", ".", "init", ".", "uniform_", "(", "tensor", "=", "self", ".", "entity_embeddings", ".", "weight", ",", "a", "=", "-", "embedding_range", ".", "item", "(", ")", ",", "b", "=", "embedding_range", ".", "item", "(", ")", ")", "\n", "nn", ".", "init", ".", "uniform_", "(", "tensor", "=", "self", ".", "relation_embeddings", ".", "weight", ",", "a", "=", "-", "embedding_range", ".", "item", "(", ")", ",", "b", "=", "embedding_range", ".", "item", "(", ")", ")", "\n", "nn", ".", "init", ".", "uniform_", "(", "tensor", "=", "self", ".", "offset_embeddings", ".", "weight", ",", "a", "=", "0", ",", "b", "=", "embedding_range", ".", "item", "(", ")", ")", "\n", "self", ".", "projection_net", "=", "NLKProjection", "(", "self", ".", "entity_dim", ",", "self", ".", "hidden_dim", ",", "self", ".", "group_number", ")", "\n", "self", ".", "intersection_offsetnet", "=", "NLKOffsetIntersection", "(", "self", ".", "entity_dim", ",", "self", ".", "hidden_dim", ")", "\n", "self", ".", "intersection_centernet", "=", "NLKCenterIntersection", "(", "self", ".", "entity_dim", ",", "self", ".", "hidden_dim", ")", "\n", "self", ".", "Difference_centernet", "=", "NLKDifferenceCenter", "(", "self", ".", "entity_dim", ",", "self", ".", "hidden_dim", ")", "\n", "self", ".", "Difference_offsetnet", "=", "NLKDifferenceOffset", "(", "self", ".", "entity_dim", ",", "self", ".", "hidden_dim", ")", "\n", "\n", "# setup group", "\n", "self", ".", "group_alignment", "=", "nn", ".", "Parameter", "(", "torch", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "group_number", ",", "size", "=", "(", "n_entity", ",", ")", ")", ",", "\n", "requires_grad", "=", "False", ")", "\n", "self", ".", "onehot_vector", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "(", "n_entity", ",", "group_number", ")", ")", ".", "scatter_", "(", "\n", "dim", "=", "1", ",", "index", "=", "self", ".", "group_alignment", ".", "unsqueeze", "(", "1", ")", ",", "value", "=", "1", ")", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "relation_adjacency", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "n_relation", ",", "group_number", ",", "group_number", ")", ",", "requires_grad", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_newlook.NLKEstimator.setup_relation_tensor": [[158, 163], ["range", "range"], "methods", ["None"], ["", "def", "setup_relation_tensor", "(", "self", ",", "projections", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "self", ".", "n_entity", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "self", ".", "n_relation", ")", ":", "\n", "                ", "for", "k", "in", "projections", "[", "i", "]", "[", "j", "]", ":", "\n", "                    ", "self", ".", "relation_adjacency", "[", "j", "]", "[", "self", ".", "group_alignment", "[", "i", "]", "]", "[", "self", ".", "group_alignment", "[", "k", "]", "]", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_newlook.NLKEstimator.get_entity_embedding": [[164, 169], ["estimator_newlook.NLKEstimator.entity_embeddings", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.to", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.to", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.to", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.to"], ["", "", "", "", "def", "get_entity_embedding", "(", "self", ",", "entity_ids", ":", "torch", ".", "LongTensor", ")", ":", "\n", "        ", "center_emb", "=", "self", ".", "entity_embeddings", "(", "entity_ids", ")", "\n", "offset_emb", "=", "torch", ".", "zeros_like", "(", "center_emb", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "x", "=", "self", ".", "onehot_vector", "[", "entity_ids", "]", "\n", "return", "torch", ".", "cat", "(", "(", "center_emb", ",", "offset_emb", ",", "x", ")", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_newlook.NLKEstimator.get_projection_embedding": [[170, 177], ["torch.split", "torch.split", "torch.split", "torch.split", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "estimator_newlook.NLKEstimator.projection_net", "len", "estimator_newlook.NLKEstimator.relation_embeddings", "estimator_newlook.NLKEstimator.offset_embeddings", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "x_query.unsqueeze"], "methods", ["None"], ["", "def", "get_projection_embedding", "(", "self", ",", "proj_ids", ":", "torch", ".", "Tensor", ",", "emb", ")", ":", "\n", "        ", "assert", "emb", ".", "shape", "[", "0", "]", "==", "len", "(", "proj_ids", ")", "\n", "query_center", ",", "query_offset", ",", "x_query", "=", "torch", ".", "split", "(", "emb", ",", "self", ".", "entity_dim", ",", "dim", "=", "-", "1", ")", "\n", "r_center", ",", "r_offset", "=", "self", ".", "relation_embeddings", "(", "proj_ids", ")", ",", "self", ".", "offset_embeddings", "(", "proj_ids", ")", "\n", "x_new", "=", "torch", ".", "clamp", "(", "torch", ".", "matmul", "(", "x_query", ".", "unsqueeze", "(", "1", ")", ",", "self", ".", "relation_adjacency", "[", "proj_ids", "]", ")", ".", "squeeze", "(", ")", ",", "0", ",", "1", ")", "\n", "final_emb", "=", "self", ".", "projection_net", "(", "query_center", "+", "r_center", ",", "r_offset", ",", "x_new", ")", "\n", "return", "final_emb", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_newlook.NLKEstimator.get_conjunction_embedding": [[178, 190], ["torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "estimator_newlook.NLKEstimator.intersection_centernet", "estimator_newlook.NLKEstimator.intersection_offsetnet", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.split", "torch.split", "torch.split", "torch.split", "box_list.append", "x_list.append", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.relu", "torch.relu", "torch.prod.unsqueeze", "torch.prod.unsqueeze"], "methods", ["None"], ["", "def", "get_conjunction_embedding", "(", "self", ",", "conj_emb", ":", "List", "[", "torch", ".", "Tensor", "]", ")", ":", "\n", "        ", "box_list", ",", "x_list", "=", "[", "]", ",", "[", "]", "\n", "for", "sub_emb", "in", "conj_emb", ":", "\n", "            ", "sub_box", ",", "sub_x", "=", "torch", ".", "split", "(", "sub_emb", ",", "2", "*", "self", ".", "entity_dim", ",", "dim", "=", "-", "1", ")", "\n", "box_list", ".", "append", "(", "sub_box", ")", "\n", "x_list", ".", "append", "(", "sub_x", ")", "\n", "", "x_batch", "=", "torch", ".", "stack", "(", "x_list", ",", "dim", "=", "0", ")", "\n", "x_new", "=", "torch", ".", "prod", "(", "x_batch", ",", "dim", "=", "0", ")", "\n", "z", "=", "1.", "/", "(", "torch", ".", "norm", "(", "F", ".", "relu", "(", "x_batch", "-", "x_new", ".", "unsqueeze", "(", "0", ")", ")", ",", "p", "=", "1", ",", "dim", "=", "-", "1", ")", "+", "self", ".", "conj_reg", ")", "\n", "new_center", "=", "self", ".", "intersection_centernet", "(", "torch", ".", "stack", "(", "box_list", ",", "dim", "=", "0", ")", ",", "z", ")", "\n", "new_offset", "=", "self", ".", "intersection_offsetnet", "(", "torch", ".", "stack", "(", "box_list", ",", "dim", "=", "0", ")", ")", "\n", "return", "torch", ".", "cat", "(", "[", "new_center", ",", "new_offset", ",", "x_new", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_newlook.NLKEstimator.get_disjunction_embedding": [[191, 193], ["torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["None"], ["", "def", "get_disjunction_embedding", "(", "self", ",", "disj_emb", ":", "List", "[", "torch", ".", "Tensor", "]", ")", ":", "\n", "        ", "return", "torch", ".", "stack", "(", "disj_emb", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_newlook.NLKEstimator.get_multiple_difference_embedding": [[194, 210], ["torch.split", "torch.split", "torch.split", "torch.split", "estimator_newlook.NLKEstimator.Difference_centernet", "estimator_newlook.NLKEstimator.Difference_offsetnet", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.split", "torch.split", "torch.split", "torch.split", "center_list.append", "offset_list.append", "x_list.append", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "lcenter.unsqueeze", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "lcenter.unsqueeze", "loffset.unsqueeze"], "methods", ["None"], ["", "def", "get_multiple_difference_embedding", "(", "self", ",", "emb", ":", "List", "[", "torch", ".", "Tensor", "]", ")", ":", "\n", "        ", "lemb", ",", "remb", "=", "emb", "[", "0", "]", ",", "emb", "[", "1", ":", "]", "\n", "lcenter", ",", "loffset", ",", "l_x", "=", "torch", ".", "split", "(", "lemb", ",", "self", ".", "entity_dim", ",", "dim", "=", "-", "1", ")", "\n", "center_list", ",", "offset_list", ",", "x_list", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "sub_emb", "in", "remb", ":", "\n", "            ", "sub_center", ",", "sub_offset", ",", "sub_x", "=", "torch", ".", "split", "(", "sub_emb", ",", "self", ".", "entity_dim", ",", "dim", "=", "-", "1", ")", "\n", "center_list", ".", "append", "(", "sub_center", ")", "\n", "offset_list", ".", "append", "(", "sub_offset", ")", "\n", "x_list", ".", "append", "(", "sub_x", ")", "\n", "", "rcenter", ",", "roffset", "=", "torch", ".", "stack", "(", "center_list", ",", "dim", "=", "0", ")", ",", "torch", ".", "stack", "(", "offset_list", ",", "dim", "=", "0", ")", "# diff*batch*group_num", "\n", "z", "=", "torch", ".", "abs", "(", "lcenter", ".", "unsqueeze", "(", "0", ")", "-", "rcenter", ")", "+", "loffset", "-", "roffset", "\n", "new_center", "=", "self", ".", "Difference_centernet", "(", "torch", ".", "cat", "(", "(", "lcenter", ".", "unsqueeze", "(", "0", ")", ",", "rcenter", ")", ",", "dim", "=", "0", ")", ")", "\n", "offset_attention", "=", "self", ".", "Difference_offsetnet", "(", "loffset", ",", "z", ")", "\n", "new_offset", "=", "torch", ".", "sum", "(", "offset_attention", "*", "torch", ".", "cat", "(", "(", "loffset", ".", "unsqueeze", "(", "0", ")", ",", "roffset", ")", ",", "dim", "=", "0", ")", ",", "dim", "=", "0", ")", "\n", "new_x", "=", "F", ".", "relu", "(", "l_x", "-", "torch", ".", "sum", "(", "torch", ".", "stack", "(", "x_list", ",", "dim", "=", "0", ")", ",", "dim", "=", "0", ")", ")", "# TODO: This is by intuition", "\n", "return", "torch", ".", "cat", "(", "[", "new_center", ",", "new_offset", ",", "new_x", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_newlook.NLKEstimator.get_difference_embedding": [[211, 213], ["estimator_newlook.NLKEstimator.get_multiple_difference_embedding"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.BoxEstimator.get_multiple_difference_embedding"], ["", "def", "get_difference_embedding", "(", "self", ",", "lemb", ":", "torch", ".", "Tensor", ",", "remb", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "return", "self", ".", "get_multiple_difference_embedding", "(", "[", "lemb", ",", "remb", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_newlook.NLKEstimator.get_negation_embedding": [[214, 216], ["None"], "methods", ["None"], ["", "def", "get_negation_embedding", "(", "self", ",", "emb", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "assert", "False", ",", "\"NewLook cannot handle negation\"", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_newlook.NLKEstimator.criterion": [[217, 233], ["pred_emb.unsqueeze.unsqueeze.unsqueeze", "appfoq.inclusion_sampling", "estimator_newlook.NLKEstimator.get_entity_embedding", "estimator_newlook.NLKEstimator.get_entity_embedding", "neg_embedding.view.view.view", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "estimator_newlook.NLKEstimator.compute_logit", "estimator_newlook.NLKEstimator.compute_logit", "estimator_newlook.NLKEstimator.compute_logit", "estimator_newlook.NLKEstimator.compute_logit", "subsampling_weight.to", "estimator_newlook.NLKEstimator.unsqueeze", "torch.max", "torch.max", "torch.max", "torch.max", "neg_embedding.view.view.unsqueeze", "torch.max", "torch.max", "torch.max", "torch.max", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.appfoq.inclusion_sampling", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.BoxEstimator.get_entity_embedding", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.BoxEstimator.get_entity_embedding", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.BoxEstimator.compute_logit", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.BoxEstimator.compute_logit", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.BoxEstimator.compute_logit", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.BoxEstimator.compute_logit", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.to"], ["", "def", "criterion", "(", "self", ",", "pred_emb", ":", "torch", ".", "Tensor", ",", "answer_set", ":", "List", "[", "IntList", "]", ",", "union", ":", "bool", "=", "False", ")", ":", "\n", "        ", "pred_emb", "=", "pred_emb", ".", "unsqueeze", "(", "dim", "=", "-", "2", ")", "\n", "chosen_answer", ",", "chosen_false_answer", ",", "subsampling_weight", "=", "inclusion_sampling", "(", "answer_set", ",", "negative_size", "=", "self", ".", "negative_size", ",", "entity_num", "=", "self", ".", "n_entity", ")", "\n", "positive_all_embedding", "=", "self", ".", "get_entity_embedding", "(", "torch", ".", "tensor", "(", "chosen_answer", ",", "device", "=", "self", ".", "device", ")", ")", "\n", "neg_embedding", "=", "self", ".", "get_entity_embedding", "(", "torch", ".", "tensor", "(", "chosen_false_answer", ",", "device", "=", "self", ".", "device", ")", ".", "view", "(", "-", "1", ")", ")", "\n", "neg_embedding", "=", "neg_embedding", ".", "view", "(", "-", "1", ",", "self", ".", "negative_size", ",", "2", "*", "self", ".", "entity_dim", "+", "self", ".", "group_number", ")", "# batch*n*dim", "\n", "if", "union", ":", "\n", "            ", "positive_union_logit", "=", "self", ".", "compute_logit", "(", "positive_all_embedding", ".", "unsqueeze", "(", "1", ")", ",", "pred_emb", ")", "\n", "positive_logit", "=", "torch", ".", "max", "(", "positive_union_logit", ",", "dim", "=", "1", ")", "[", "0", "]", "\n", "negative_union_logit", "=", "self", ".", "compute_logit", "(", "neg_embedding", ".", "unsqueeze", "(", "1", ")", ",", "pred_emb", ")", "\n", "negative_logit", "=", "torch", ".", "max", "(", "negative_union_logit", ",", "dim", "=", "1", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "positive_logit", "=", "self", ".", "compute_logit", "(", "positive_all_embedding", ",", "pred_emb", ")", "\n", "negative_logit", "=", "self", ".", "compute_logit", "(", "neg_embedding", ",", "pred_emb", ")", "\n", "", "return", "positive_logit", ",", "negative_logit", ",", "subsampling_weight", ".", "to", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_newlook.NLKEstimator.compute_logit": [[234, 244], ["torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.relu", "torch.relu", "torch.min", "torch.min", "torch.min", "torch.min", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.relu", "torch.relu"], "methods", ["None"], ["", "def", "compute_logit", "(", "self", ",", "entity_emb", ",", "query_emb", ")", ":", "\n", "        ", "entity_center", ",", "_", ",", "entity_x", "=", "torch", ".", "split", "(", "entity_emb", ",", "self", ".", "entity_dim", ",", "dim", "=", "-", "1", ")", "\n", "query_center_embedding", ",", "query_offset_embedding", ",", "query_x", "=", "torch", ".", "split", "(", "query_emb", ",", "self", ".", "entity_dim", ",", "dim", "=", "-", "1", ")", "\n", "delta", "=", "(", "entity_center", "-", "query_center_embedding", ")", ".", "abs", "(", ")", "\n", "distance_out", "=", "F", ".", "relu", "(", "delta", "-", "query_offset_embedding", ")", "\n", "distance_in", "=", "torch", ".", "min", "(", "delta", ",", "query_offset_embedding", ")", "\n", "logit", "=", "self", ".", "gamma", "-", "torch", ".", "norm", "(", "distance_out", ",", "p", "=", "1", ",", "dim", "=", "-", "1", ")", "-", "self", ".", "cen_reg", "*", "torch", ".", "norm", "(", "distance_in", ",", "p", "=", "1", ",", "dim", "=", "-", "1", ")", "-", "self", ".", "x_reg", "*", "torch", ".", "norm", "(", "F", ".", "relu", "(", "entity_x", "-", "query_x", ")", ",", "p", "=", "1", ",", "dim", "=", "-", "1", ")", "\n", "return", "logit", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_newlook.NLKEstimator.compute_all_entity_logit": [[245, 263], ["torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "estimator_newlook.NLKEstimator.get_entity_embedding", "pred_emb.unsqueeze.unsqueeze.unsqueeze", "appfoq.find_optimal_batch", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "logit_list.append", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "estimator_newlook.NLKEstimator.compute_logit", "estimator_newlook.NLKEstimator.compute_logit", "range", "answer_part.unsqueeze().unsqueeze", "torch.max", "torch.max", "torch.max", "torch.max", "answer_part.unsqueeze", "answer_part.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.to", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.to", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.to", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.to", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.BoxEstimator.get_entity_embedding", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.appfoq.find_optimal_batch", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.BoxEstimator.compute_logit", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.BoxEstimator.compute_logit"], ["", "def", "compute_all_entity_logit", "(", "self", ",", "pred_emb", ":", "torch", ".", "Tensor", ",", "union", ":", "bool", "=", "False", ")", ":", "\n", "        ", "all_entities", "=", "torch", ".", "LongTensor", "(", "range", "(", "self", ".", "n_entity", ")", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "all_embedding", "=", "self", ".", "get_entity_embedding", "(", "all_entities", ")", "\n", "pred_emb", "=", "pred_emb", ".", "unsqueeze", "(", "-", "2", ")", "\n", "batch_num", "=", "find_optimal_batch", "(", "all_embedding", ",", "query_dist", "=", "pred_emb", ",", "\n", "compute_logit", "=", "self", ".", "compute_logit", ",", "union", "=", "union", ")", "\n", "chunk_of_answer", "=", "torch", ".", "chunk", "(", "all_embedding", ",", "batch_num", ",", "dim", "=", "0", ")", "\n", "logit_list", "=", "[", "]", "\n", "for", "answer_part", "in", "chunk_of_answer", ":", "\n", "            ", "if", "union", ":", "\n", "                ", "union_part", "=", "self", ".", "compute_logit", "(", "answer_part", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", ",", "\n", "pred_emb", ")", "# b*disj*answer_part*dim", "\n", "logit_part", "=", "torch", ".", "max", "(", "union_part", ",", "dim", "=", "1", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "                ", "logit_part", "=", "self", ".", "compute_logit", "(", "answer_part", ".", "unsqueeze", "(", "dim", "=", "0", ")", ",", "pred_emb", ")", "# batch*answer_part*dim", "\n", "", "logit_list", ".", "append", "(", "logit_part", ")", "\n", "", "all_logit", "=", "torch", ".", "cat", "(", "logit_list", ",", "dim", "=", "1", ")", "\n", "return", "all_logit", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_logic.LogicIntersection.__init__": [[35, 53], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.BoxEstimator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "tnorm", ",", "bounded", ",", "use_att", ",", "use_gtrans", ")", ":", "\n", "        ", "super", "(", "LogicIntersection", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "tnorm", "=", "tnorm", "\n", "self", ".", "bounded", "=", "bounded", "\n", "self", ".", "use_att", "=", "use_att", "\n", "self", ".", "use_gtrans", "=", "use_gtrans", "# gradient transparency", "\n", "\n", "if", "use_att", ":", "# use attention with weighted t-norm", "\n", "            ", "self", ".", "layer1", "=", "nn", ".", "Linear", "(", "2", "*", "self", ".", "dim", ",", "2", "*", "self", ".", "dim", ")", "\n", "\n", "if", "bounded", ":", "\n", "                ", "self", ".", "layer2", "=", "nn", ".", "Linear", "(", "2", "*", "self", ".", "dim", ",", "self", ".", "dim", ")", "# same weight for bound pair", "\n", "", "else", ":", "\n", "                ", "self", ".", "layer2", "=", "nn", ".", "Linear", "(", "2", "*", "self", ".", "dim", ",", "2", "*", "self", ".", "dim", ")", "\n", "\n", "", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "layer1", ".", "weight", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "layer2", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_logic.LogicIntersection.forward": [[54, 99], ["torch.relu", "torch.relu", "torch.softmax", "torch.softmax", "estimator_logic.LogicIntersection.layer1", "estimator_logic.LogicIntersection.layer2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.max", "torch.max", "torch.max", "torch.max", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "estimator_logic.order_bounds", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "estimator_logic.order_bounds", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "estimator_logic.valclamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "estimator_logic.valclamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_logic.order_bounds", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_logic.order_bounds", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_logic.valclamp", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_logic.valclamp"], ["", "", "def", "forward", "(", "self", ",", "embeddings", ")", ":", "\n", "        ", "if", "self", ".", "use_att", ":", "# use attention with weighted t-norm", "\n", "            ", "layer1_act", "=", "F", ".", "relu", "(", "self", ".", "layer1", "(", "embeddings", ")", ")", "# (num_conj, batch_size, 2 * dim)", "\n", "attention", "=", "F", ".", "softmax", "(", "self", ".", "layer2", "(", "layer1_act", ")", ",", "dim", "=", "0", ")", "# (num_conj, batch_size, dim)", "\n", "attention", "=", "attention", "/", "torch", ".", "max", "(", "attention", ",", "dim", "=", "0", ",", "keepdim", "=", "True", ")", ".", "values", "\n", "\n", "if", "self", ".", "bounded", ":", "# same weight for bound pair", "\n", "                ", "attention", "=", "torch", ".", "cat", "(", "[", "attention", ",", "attention", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "if", "self", ".", "tnorm", "==", "'mins'", ":", "# minimum / Godel t-norm", "\n", "                ", "smooth_param", "=", "-", "10", "# smooth minimum", "\n", "min_weights", "=", "attention", "*", "torch", ".", "exp", "(", "smooth_param", "*", "embeddings", ")", "\n", "embedding", "=", "torch", ".", "sum", "(", "min_weights", "*", "embeddings", ",", "dim", "=", "0", ")", "/", "torch", ".", "sum", "(", "min_weights", ",", "dim", "=", "0", ")", "\n", "if", "self", ".", "bounded", ":", "\n", "                    ", "embedding", "=", "order_bounds", "(", "embedding", ")", "\n", "\n", "", "", "elif", "self", ".", "tnorm", "==", "'luk'", ":", "# Lukasiewicz t-norm", "\n", "                ", "embedding", "=", "1", "-", "torch", ".", "sum", "(", "attention", "*", "(", "1", "-", "embeddings", ")", ",", "dim", "=", "0", ")", "\n", "if", "self", ".", "use_gtrans", ":", "\n", "                    ", "embedding", "=", "valclamp", "(", "embedding", ",", "b", "=", "6.", "/", "embedding", ".", "shape", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                    ", "embedding", "=", "torch", ".", "clamp", "(", "embedding", ",", "0", ",", "1", ")", "\n", "\n", "", "", "elif", "self", ".", "tnorm", "==", "'prod'", ":", "# product t-norm", "\n", "                ", "embedding", "=", "torch", ".", "prod", "(", "torch", ".", "pow", "(", "torch", ".", "clamp", "(", "embeddings", ",", "0", ",", "1", ")", "+", "eps", ",", "attention", ")", ",", "dim", "=", "0", ")", "\n", "\n", "", "", "else", ":", "# no attention", "\n", "            ", "if", "self", ".", "tnorm", "==", "'mins'", ":", "# minimum / Godel t-norm", "\n", "                ", "smooth_param", "=", "-", "10", "# smooth minimum", "\n", "min_weights", "=", "torch", ".", "exp", "(", "smooth_param", "*", "embeddings", ")", "\n", "embedding", "=", "torch", ".", "sum", "(", "min_weights", "*", "embeddings", ",", "dim", "=", "0", ")", "/", "torch", ".", "sum", "(", "min_weights", ",", "dim", "=", "0", ")", "\n", "if", "self", ".", "bounded", ":", "\n", "                    ", "embedding", "=", "order_bounds", "(", "embedding", ")", "\n", "\n", "", "", "elif", "self", ".", "tnorm", "==", "'luk'", ":", "# Lukasiewicz t-norm", "\n", "                ", "embedding", "=", "1", "-", "torch", ".", "sum", "(", "1", "-", "embeddings", ",", "dim", "=", "0", ")", "\n", "if", "self", ".", "use_gtrans", ":", "\n", "                    ", "embedding", "=", "valclamp", "(", "embedding", ",", "b", "=", "6.", "/", "embedding", ".", "shape", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                    ", "embedding", "=", "torch", ".", "clamp", "(", "embedding", ",", "0", ",", "1", ")", "\n", "\n", "", "", "elif", "self", ".", "tnorm", "==", "'prod'", ":", "# product t-norm", "\n", "                ", "embedding", "=", "torch", ".", "prod", "(", "embeddings", ",", "dim", "=", "0", ")", "\n", "\n", "", "", "return", "embedding", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_logic.LogicProjection.__init__": [[102, 115], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "range", "range", "setattr", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.Linear", "torch.nn.Linear", "getattr"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.BoxEstimator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "entity_dim", ",", "relation_dim", ",", "hidden_dim", ",", "num_layers", ",", "bounded", ")", ":", "\n", "        ", "super", "(", "LogicProjection", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "entity_dim", "=", "entity_dim", "\n", "self", ".", "relation_dim", "=", "relation_dim", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "bounded", "=", "bounded", "\n", "self", ".", "layer1", "=", "nn", ".", "Linear", "(", "self", ".", "entity_dim", "+", "self", ".", "relation_dim", ",", "self", ".", "hidden_dim", ")", "# 1st layer", "\n", "self", ".", "layer0", "=", "nn", ".", "Linear", "(", "self", ".", "hidden_dim", ",", "self", ".", "entity_dim", ")", "# final layer", "\n", "for", "nl", "in", "range", "(", "2", ",", "num_layers", "+", "1", ")", ":", "\n", "            ", "setattr", "(", "self", ",", "\"layer{}\"", ".", "format", "(", "nl", ")", ",", "nn", ".", "Linear", "(", "self", ".", "hidden_dim", ",", "self", ".", "hidden_dim", ")", ")", "\n", "", "for", "nl", "in", "range", "(", "num_layers", "+", "1", ")", ":", "\n", "            ", "nn", ".", "init", ".", "xavier_uniform_", "(", "getattr", "(", "self", ",", "\"layer{}\"", ".", "format", "(", "nl", ")", ")", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_logic.LogicProjection.forward": [[116, 129], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "range", "estimator_logic.LogicProjection.layer0", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.relu", "torch.relu", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "getattr"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "e_embedding", ",", "r_embedding", ")", ":", "\n", "        ", "x", "=", "torch", ".", "cat", "(", "[", "e_embedding", ",", "r_embedding", "]", ",", "dim", "=", "-", "1", ")", "\n", "for", "nl", "in", "range", "(", "1", ",", "self", ".", "num_layers", "+", "1", ")", ":", "\n", "            ", "x", "=", "F", ".", "relu", "(", "getattr", "(", "self", ",", "\"layer{}\"", ".", "format", "(", "nl", ")", ")", "(", "x", ")", ")", "\n", "", "x", "=", "self", ".", "layer0", "(", "x", ")", "\n", "x", "=", "torch", ".", "sigmoid", "(", "x", ")", "\n", "\n", "if", "self", ".", "bounded", ":", "\n", "            ", "lower", ",", "upper", "=", "torch", ".", "chunk", "(", "x", ",", "2", ",", "dim", "=", "-", "1", ")", "\n", "upper", "=", "lower", "+", "upper", "*", "(", "1", "-", "lower", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "lower", ",", "upper", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_logic.SizePredict.__init__": [[132, 142], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.BoxEstimator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "entity_dim", ")", ":", "\n", "        ", "super", "(", "SizePredict", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "layer2", "=", "nn", ".", "Linear", "(", "entity_dim", ",", "entity_dim", "//", "4", ")", "\n", "self", ".", "layer1", "=", "nn", ".", "Linear", "(", "entity_dim", "//", "4", ",", "entity_dim", "//", "16", ")", "\n", "self", ".", "layer0", "=", "nn", ".", "Linear", "(", "entity_dim", "//", "16", ",", "1", ")", "\n", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "layer2", ".", "weight", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "layer1", ".", "weight", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "layer0", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_logic.SizePredict.forward": [[143, 152], ["estimator_logic.SizePredict.layer2", "torch.relu", "torch.relu", "estimator_logic.SizePredict.layer1", "torch.relu", "torch.relu", "estimator_logic.SizePredict.layer0", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid.squeeze", "torch.sigmoid.squeeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "entropy_embedding", ")", ":", "\n", "        ", "x", "=", "self", ".", "layer2", "(", "entropy_embedding", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "layer0", "(", "x", ")", "\n", "x", "=", "torch", ".", "sigmoid", "(", "x", ")", "\n", "\n", "return", "x", ".", "squeeze", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_logic.LogicEstimator.__init__": [[155, 183], ["appfoq.AppFOQEstimator.__init__", "torch.nn.Embedding", "torch.nn.Embedding", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.nn.init.uniform_", "torch.nn.init.uniform_", "estimator_logic.LogicIntersection", "estimator_logic.LogicProjection", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.nn.Embedding.from_pretrained", "torch.nn.Embedding.from_pretrained", "torch.nn.Embedding.from_pretrained", "torch.nn.Embedding.from_pretrained", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor().to.item", "torch.tensor().to.item", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.tensor().to.item", "torch.tensor().to.item"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.BoxEstimator.__init__", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.to", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.to", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.to", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.to"], ["    ", "def", "__init__", "(", "self", ",", "n_entity", ",", "n_relation", ",", "hidden_dim", ",", "\n", "gamma", ",", "entity_dim", ",", "relation_dim", ",", "num_layers", ",", "\n", "negative_sample_size", ",", "t_norm", ",", "bounded", ",", "use_att", ",", "use_gtrans", ",", "device", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "name", "=", "'logic'", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "n_entity", "=", "n_entity", "\n", "self", ".", "n_relation", "=", "n_relation", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "epsilon", "=", "2.0", "\n", "self", ".", "negative_size", "=", "negative_sample_size", "\n", "self", ".", "entity_dim", ",", "self", ".", "relation_dim", "=", "entity_dim", ",", "relation_dim", "\n", "self", ".", "t_norm", ",", "self", ".", "bounded", "=", "t_norm", ",", "bounded", "\n", "if", "self", ".", "bounded", ":", "\n", "            ", "lower", "=", "torch", ".", "rand", "(", "(", "n_entity", ",", "self", ".", "entity_dim", ")", ")", "\n", "upper", "=", "lower", "+", "torch", ".", "rand", "(", "(", "n_entity", ",", "self", ".", "entity_dim", ")", ")", "*", "(", "1", "-", "lower", ")", "\n", "self", ".", "entity_embeddings", "=", "nn", ".", "Embedding", ".", "from_pretrained", "(", "torch", ".", "cat", "(", "[", "lower", ",", "upper", "]", ",", "dim", "=", "-", "1", ")", ",", "freeze", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "entity_embeddings", "=", "nn", ".", "Embedding", ".", "from_pretrained", "(", "torch", ".", "rand", "(", "(", "n_entity", ",", "self", ".", "entity_dim", "*", "2", ")", ")", ",", "\n", "freeze", "=", "False", ")", "\n", "", "self", ".", "relation_embeddings", "=", "nn", ".", "Embedding", "(", "num_embeddings", "=", "n_relation", ",", "\n", "embedding_dim", "=", "self", ".", "relation_dim", ")", "\n", "embedding_range", "=", "torch", ".", "tensor", "(", "[", "(", "self", ".", "gamma", "+", "self", ".", "epsilon", ")", "/", "entity_dim", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "nn", ".", "init", ".", "uniform_", "(", "tensor", "=", "self", ".", "relation_embeddings", ".", "weight", ",", "a", "=", "-", "embedding_range", ".", "item", "(", ")", ",", "b", "=", "embedding_range", ".", "item", "(", ")", ")", "\n", "\n", "self", ".", "center_net", "=", "LogicIntersection", "(", "self", ".", "entity_dim", ",", "t_norm", ",", "bounded", ",", "use_att", ",", "use_gtrans", ")", "\n", "self", ".", "projection_net", "=", "LogicProjection", "(", "self", ".", "entity_dim", "*", "2", ",", "self", ".", "relation_dim", ",", "hidden_dim", ",", "num_layers", ",", "bounded", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_logic.LogicEstimator.get_entity_embedding": [[184, 187], ["estimator_logic.LogicEstimator.entity_embeddings"], "methods", ["None"], ["", "def", "get_entity_embedding", "(", "self", ",", "entity_ids", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "emb", "=", "self", ".", "entity_embeddings", "(", "entity_ids", ")", "\n", "return", "emb", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_logic.LogicEstimator.get_projection_embedding": [[188, 193], ["estimator_logic.LogicEstimator.relation_embeddings", "estimator_logic.LogicEstimator.projection_net", "len"], "methods", ["None"], ["", "def", "get_projection_embedding", "(", "self", ",", "proj_ids", ":", "torch", ".", "Tensor", ",", "emb", ")", ":", "\n", "        ", "assert", "emb", ".", "shape", "[", "0", "]", "==", "len", "(", "proj_ids", ")", "\n", "rel_emb", "=", "self", ".", "relation_embeddings", "(", "proj_ids", ")", "\n", "pro_emb", "=", "self", ".", "projection_net", "(", "emb", ",", "rel_emb", ")", "\n", "return", "pro_emb", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_logic.LogicEstimator.get_negation_embedding": [[194, 201], ["torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "get_negation_embedding", "(", "self", ",", "embedding", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "if", "self", ".", "bounded", ":", "\n", "            ", "lower_embedding", ",", "upper_embedding", "=", "torch", ".", "chunk", "(", "embedding", ",", "2", ",", "dim", "=", "-", "1", ")", "\n", "embedding", "=", "torch", ".", "cat", "(", "[", "1", "-", "upper_embedding", ",", "1", "-", "lower_embedding", "]", ",", "dim", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "embedding", "=", "1", "-", "embedding", "\n", "", "return", "embedding", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_logic.LogicEstimator.get_conjunction_embedding": [[202, 206], ["torch.stack", "torch.stack", "torch.stack", "torch.stack", "estimator_logic.LogicEstimator.center_net"], "methods", ["None"], ["", "def", "get_conjunction_embedding", "(", "self", ",", "conj_emb", ":", "List", "[", "torch", ".", "Tensor", "]", ")", ":", "\n", "        ", "all_emb", "=", "torch", ".", "stack", "(", "conj_emb", ")", "\n", "emb", "=", "self", ".", "center_net", "(", "all_emb", ")", "\n", "return", "emb", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_logic.LogicEstimator.get_disjunction_embedding": [[207, 209], ["torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["None"], ["", "def", "get_disjunction_embedding", "(", "self", ",", "disj_emb", ":", "List", "[", "torch", ".", "Tensor", "]", ")", ":", "\n", "        ", "return", "torch", ".", "stack", "(", "disj_emb", ",", "dim", "=", "1", ")", "\n", ""]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_logic.LogicEstimator.get_difference_embedding": [[222, 225], ["None"], "methods", ["None"], ["def", "get_difference_embedding", "(", "self", ",", "lemb", ":", "torch", ".", "Tensor", ",", "remb", ":", "torch", ".", "Tensor", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "assert", "False", ",", "'Do not use d in Logic'", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_logic.LogicEstimator.get_multiple_difference_embedding": [[226, 228], ["None"], "methods", ["None"], ["", "def", "get_multiple_difference_embedding", "(", "self", ",", "emb", ":", "List", "[", "torch", ".", "Tensor", "]", ",", "**", "kwargs", ")", ":", "\n", "        ", "assert", "False", ",", "'Do not use D in Logic'", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_logic.LogicEstimator.criterion": [[229, 246], ["pred_emb.unsqueeze.unsqueeze.unsqueeze", "appfoq.inclusion_sampling", "estimator_logic.LogicEstimator.get_entity_embedding", "estimator_logic.LogicEstimator.get_entity_embedding", "neg_embedding.view.view.view", "len", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "estimator_logic.LogicEstimator.compute_logit", "estimator_logic.LogicEstimator.compute_logit", "estimator_logic.LogicEstimator.compute_logit", "estimator_logic.LogicEstimator.compute_logit", "subsampling_weight.to", "estimator_logic.LogicEstimator.unsqueeze", "torch.max", "torch.max", "torch.max", "torch.max", "neg_embedding.view.view.unsqueeze", "torch.max", "torch.max", "torch.max", "torch.max", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.appfoq.inclusion_sampling", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.BoxEstimator.get_entity_embedding", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.BoxEstimator.get_entity_embedding", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.BoxEstimator.compute_logit", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.BoxEstimator.compute_logit", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.BoxEstimator.compute_logit", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.BoxEstimator.compute_logit", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.to"], ["", "def", "criterion", "(", "self", ",", "pred_emb", ":", "torch", ".", "Tensor", ",", "answer_set", ":", "List", "[", "IntList", "]", ",", "union", ":", "bool", "=", "False", ")", ":", "\n", "        ", "assert", "pred_emb", ".", "shape", "[", "0", "]", "==", "len", "(", "answer_set", ")", "\n", "pred_emb", "=", "pred_emb", ".", "unsqueeze", "(", "dim", "=", "-", "2", ")", "\n", "chosen_ans", ",", "chosen_false_ans", ",", "subsampling_weight", "=", "inclusion_sampling", "(", "answer_set", ",", "negative_size", "=", "self", ".", "negative_size", ",", "entity_num", "=", "self", ".", "n_entity", ")", "\n", "answer_embedding", "=", "self", ".", "get_entity_embedding", "(", "torch", ".", "tensor", "(", "chosen_ans", ",", "device", "=", "self", ".", "device", ")", ")", "\n", "neg_embedding", "=", "self", ".", "get_entity_embedding", "(", "torch", ".", "tensor", "(", "chosen_false_ans", ",", "device", "=", "self", ".", "device", ")", ".", "view", "(", "-", "1", ")", ")", "# n*dim", "\n", "neg_embedding", "=", "neg_embedding", ".", "view", "(", "-", "1", ",", "self", ".", "negative_size", ",", "2", "*", "self", ".", "entity_dim", ")", "# batch*negative*dim", "\n", "if", "union", ":", "\n", "            ", "positive_union_logit", "=", "self", ".", "compute_logit", "(", "answer_embedding", ".", "unsqueeze", "(", "1", ")", ",", "pred_emb", ")", "\n", "positive_logit", "=", "torch", ".", "max", "(", "positive_union_logit", ",", "dim", "=", "1", ")", "[", "0", "]", "\n", "negative_union_logit", "=", "self", ".", "compute_logit", "(", "neg_embedding", ".", "unsqueeze", "(", "1", ")", ",", "pred_emb", ")", "\n", "negative_logit", "=", "torch", ".", "max", "(", "negative_union_logit", ",", "dim", "=", "1", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "positive_logit", "=", "self", ".", "compute_logit", "(", "answer_embedding", ",", "pred_emb", ")", "\n", "negative_logit", "=", "self", ".", "compute_logit", "(", "neg_embedding", ",", "pred_emb", ")", "# b*negative", "\n", "", "return", "positive_logit", ",", "negative_logit", ",", "subsampling_weight", ".", "to", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_logic.LogicEstimator.compute_logit": [[247, 262], ["torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm"], "methods", ["None"], ["", "def", "compute_logit", "(", "self", ",", "entity_embedding", ",", "query_embedding", ")", ":", "\n", "        ", "if", "self", ".", "bounded", ":", "\n", "            ", "lower_embedding", ",", "upper_embedding", "=", "torch", ".", "chunk", "(", "entity_embedding", ",", "2", ",", "dim", "=", "-", "1", ")", "\n", "query_lower_embedding", ",", "query_upper_embedding", "=", "torch", ".", "chunk", "(", "query_embedding", ",", "2", ",", "dim", "=", "-", "1", ")", "\n", "\n", "lower_dist", "=", "torch", ".", "norm", "(", "lower_embedding", "-", "query_lower_embedding", ",", "p", "=", "1", ",", "dim", "=", "-", "1", ")", "\n", "upper_dist", "=", "torch", ".", "norm", "(", "query_upper_embedding", "-", "upper_embedding", ",", "p", "=", "1", ",", "dim", "=", "-", "1", ")", "\n", "\n", "logit", "=", "self", ".", "gamma", "-", "(", "lower_dist", "+", "upper_dist", ")", "/", "2", "/", "lower_embedding", ".", "shape", "[", "-", "1", "]", "\n", "", "else", ":", "\n", "            ", "logit", "=", "self", ".", "gamma", "-", "torch", ".", "norm", "(", "entity_embedding", "-", "query_embedding", ",", "p", "=", "1", ",", "dim", "=", "-", "1", ")", "/", "query_embedding", ".", "shape", "[", "-", "1", "]", "\n", "\n", "", "logit", "*=", "100", "# Todo: why *100", "\n", "\n", "return", "logit", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_logic.LogicEstimator.compute_all_entity_logit": [[263, 282], ["torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "estimator_logic.LogicEstimator.get_entity_embedding", "pred_emb.unsqueeze.unsqueeze.unsqueeze", "appfoq.find_optimal_batch", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "logit_list.append", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "estimator_logic.LogicEstimator.compute_logit", "estimator_logic.LogicEstimator.compute_logit", "range", "answer_part.unsqueeze().unsqueeze", "torch.max", "torch.max", "torch.max", "torch.max", "answer_part.unsqueeze", "answer_part.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.to", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.to", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.to", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.to", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.BoxEstimator.get_entity_embedding", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.appfoq.find_optimal_batch", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.BoxEstimator.compute_logit", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.BoxEstimator.compute_logit"], ["", "def", "compute_all_entity_logit", "(", "self", ",", "pred_emb", ":", "torch", ".", "Tensor", ",", "union", ":", "bool", "=", "False", ")", "->", "(", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "all_entities", "=", "torch", ".", "LongTensor", "(", "range", "(", "self", ".", "n_entity", ")", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "all_embedding", "=", "self", ".", "get_entity_embedding", "(", "all_entities", ")", "# nentity*dim", "\n", "pred_emb", "=", "pred_emb", ".", "unsqueeze", "(", "-", "2", ")", "# batch*(disj)*1*dim", "\n", "batch_num", "=", "find_optimal_batch", "(", "all_embedding", ",", "\n", "query_dist", "=", "pred_emb", ",", "\n", "compute_logit", "=", "self", ".", "compute_logit", ",", "\n", "union", "=", "union", ")", "\n", "chunk_of_answer", "=", "torch", ".", "chunk", "(", "all_embedding", ",", "batch_num", ",", "dim", "=", "0", ")", "\n", "logit_list", "=", "[", "]", "\n", "for", "answer_part", "in", "chunk_of_answer", ":", "\n", "            ", "if", "union", ":", "\n", "                ", "union_part", "=", "self", ".", "compute_logit", "(", "answer_part", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", ",", "pred_emb", ")", "\n", "logit_part", "=", "torch", ".", "max", "(", "union_part", ",", "dim", "=", "1", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "                ", "logit_part", "=", "self", ".", "compute_logit", "(", "answer_part", ".", "unsqueeze", "(", "dim", "=", "0", ")", ",", "pred_emb", ")", "# batch*answer_part*dim", "\n", "", "logit_list", ".", "append", "(", "logit_part", ")", "\n", "", "all_logit", "=", "torch", ".", "cat", "(", "logit_list", ",", "dim", "=", "1", ")", "\n", "return", "all_logit", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_logic.order_bounds": [[14, 24], ["torch.clamp", "torch.clamp", "torch.chunk", "torch.chunk", "contra.any", "torch.cat", "torch.cat", "torch.where", "torch.where", "torch.where", "torch.where"], "function", ["None"], ["def", "order_bounds", "(", "embedding", ")", ":", "# ensure lower < upper truth bound for logic embedding", "\n", "    ", "embedding", "=", "torch", ".", "clamp", "(", "embedding", ",", "0", ",", "1", ")", "\n", "lower", ",", "upper", "=", "torch", ".", "chunk", "(", "embedding", ",", "2", ",", "dim", "=", "-", "1", ")", "\n", "contra", "=", "lower", ">", "upper", "\n", "if", "contra", ".", "any", "(", ")", ":", "# contradiction", "\n", "        ", "mean", "=", "(", "lower", "+", "upper", ")", "/", "2", "\n", "lower", "=", "torch", ".", "where", "(", "lower", ">", "upper", ",", "mean", ",", "lower", ")", "\n", "upper", "=", "torch", ".", "where", "(", "lower", ">", "upper", ",", "mean", ",", "upper", ")", "\n", "", "ordered_embedding", "=", "torch", ".", "cat", "(", "[", "lower", ",", "upper", "]", ",", "dim", "=", "-", "1", ")", "\n", "return", "ordered_embedding", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_logic.valclamp": [[26, 31], ["torch.exp", "torch.exp", "elu_neg.detach"], "function", ["None"], ["", "def", "valclamp", "(", "x", ",", "a", "=", "1", ",", "b", "=", "6", ",", "lo", "=", "0", ",", "hi", "=", "1", ")", ":", "# relu1 with gradient-transparent clamp on negative", "\n", "    ", "elu_neg", "=", "a", "*", "(", "torch", ".", "exp", "(", "b", "*", "x", ")", "-", "1", ")", "\n", "return", "(", "(", "x", "<", "lo", ")", ".", "float", "(", ")", "*", "(", "lo", "+", "elu_neg", "-", "elu_neg", ".", "detach", "(", ")", ")", "+", "\n", "(", "lo", "<=", "x", ")", ".", "float", "(", ")", "*", "(", "x", "<=", "hi", ")", ".", "float", "(", ")", "*", "x", "+", "\n", "(", "hi", "<", "x", ")", ".", "float", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_beta.Regularizer.__init__": [[13, 17], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "base_add", ",", "min_val", ",", "max_val", ")", ":", "\n", "        ", "self", ".", "base_add", "=", "base_add", "\n", "self", ".", "min_val", "=", "min_val", "\n", "self", ".", "max_val", "=", "max_val", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_beta.Regularizer.__call__": [[18, 20], ["torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "entity_embedding", ")", ":", "\n", "        ", "return", "torch", ".", "clamp", "(", "entity_embedding", "+", "self", ".", "base_add", ",", "self", ".", "min_val", ",", "self", ".", "max_val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_beta.BetaProjection.__init__": [[23, 44], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "range", "range", "setattr", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.Linear", "torch.nn.Linear", "getattr"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.BoxEstimator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "entity_dim", ",", "\n", "relation_dim", ",", "\n", "hidden_dim", ",", "\n", "projection_regularizer", ",", "\n", "num_layers", ")", ":", "\n", "        ", "super", "(", "BetaProjection", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "entity_dim", "=", "entity_dim", "\n", "self", ".", "relation_dim", "=", "relation_dim", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "layer1", "=", "nn", ".", "Linear", "(", "\n", "self", ".", "entity_dim", "+", "self", ".", "relation_dim", ",", "self", ".", "hidden_dim", ")", "# 1st layer", "\n", "self", ".", "layer0", "=", "nn", ".", "Linear", "(", "\n", "self", ".", "hidden_dim", ",", "self", ".", "entity_dim", ")", "# final layer", "\n", "for", "nl", "in", "range", "(", "2", ",", "num_layers", "+", "1", ")", ":", "\n", "            ", "setattr", "(", "self", ",", "\"layer{}\"", ".", "format", "(", "nl", ")", ",", "nn", ".", "Linear", "(", "\n", "self", ".", "hidden_dim", ",", "self", ".", "hidden_dim", ")", ")", "\n", "", "for", "nl", "in", "range", "(", "num_layers", "+", "1", ")", ":", "\n", "            ", "nn", ".", "init", ".", "xavier_uniform_", "(", "getattr", "(", "self", ",", "\"layer{}\"", ".", "format", "(", "nl", ")", ")", ".", "weight", ")", "\n", "", "self", ".", "projection_regularizer", "=", "projection_regularizer", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_beta.BetaProjection.forward": [[45, 53], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "range", "estimator_beta.BetaProjection.layer0", "estimator_beta.BetaProjection.projection_regularizer", "torch.relu", "torch.relu", "getattr"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "e_embedding", ",", "r_embedding", ")", ":", "\n", "        ", "x", "=", "torch", ".", "cat", "(", "[", "e_embedding", ",", "r_embedding", "]", ",", "dim", "=", "-", "1", ")", "\n", "for", "nl", "in", "range", "(", "1", ",", "self", ".", "num_layers", "+", "1", ")", ":", "\n", "            ", "x", "=", "F", ".", "relu", "(", "getattr", "(", "self", ",", "\"layer{}\"", ".", "format", "(", "nl", ")", ")", "(", "x", ")", ")", "\n", "", "x", "=", "self", ".", "layer0", "(", "x", ")", "\n", "x", "=", "self", ".", "projection_regularizer", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_beta.BetaIntersection.__init__": [[56, 63], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.BoxEstimator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ")", ":", "\n", "        ", "super", "(", "BetaIntersection", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "layer1", "=", "nn", ".", "Linear", "(", "2", "*", "self", ".", "dim", ",", "2", "*", "self", ".", "dim", ")", "\n", "self", ".", "layer2", "=", "nn", ".", "Linear", "(", "2", "*", "self", ".", "dim", ",", "self", ".", "dim", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "layer1", ".", "weight", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "layer2", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_beta.BetaIntersection.forward": [[64, 73], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.softmax", "torch.softmax", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "estimator_beta.BetaIntersection.layer1", "estimator_beta.BetaIntersection.layer2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "alpha_embeddings", ",", "beta_embeddings", ")", ":", "\n", "        ", "all_embeddings", "=", "torch", ".", "cat", "(", "[", "alpha_embeddings", ",", "beta_embeddings", "]", ",", "dim", "=", "-", "1", ")", "\n", "# (num_conj, batch_size, 2 * dim)", "\n", "layer1_act", "=", "F", ".", "relu", "(", "self", ".", "layer1", "(", "all_embeddings", ")", ")", "\n", "# (num_conj, batch_size, dim)", "\n", "attention", "=", "F", ".", "softmax", "(", "self", ".", "layer2", "(", "layer1_act", ")", ",", "dim", "=", "0", ")", "\n", "alpha_embedding", "=", "torch", ".", "sum", "(", "attention", "*", "alpha_embeddings", ",", "dim", "=", "0", ")", "\n", "beta_embedding", "=", "torch", ".", "sum", "(", "attention", "*", "beta_embeddings", ",", "dim", "=", "0", ")", "\n", "return", "alpha_embedding", ",", "beta_embedding", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_beta.BetaEstimator.__init__": [[78, 120], ["appfoq.AppFOQEstimator.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Parameter().to", "torch.nn.Parameter().to", "torch.nn.init.uniform_", "torch.nn.init.uniform_", "torch.nn.init.uniform_", "torch.nn.init.uniform_", "estimator_beta.Regularizer", "estimator_beta.Regularizer", "estimator_beta.BetaIntersection", "estimator_beta.BetaProjection", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.nn.Parameter", "torch.nn.Parameter", "estimator_beta.BetaEstimator.embedding_range.item", "estimator_beta.BetaEstimator.embedding_range.item", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "estimator_beta.BetaEstimator.embedding_range.item", "estimator_beta.BetaEstimator.embedding_range.item", "estimator_beta.BetaEstimator.gamma.item"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.BoxEstimator.__init__", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.to", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.to"], ["def", "__init__", "(", "self", ",", "n_entity", ",", "n_relation", ",", "hidden_dim", ",", "\n", "gamma", ",", "entity_dim", ",", "relation_dim", ",", "num_layers", ",", "\n", "negative_sample_size", ",", "device", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "name", "=", "'beta'", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "n_entity", "=", "n_entity", "\n", "self", ".", "n_relation", "=", "n_relation", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "self", ".", "gamma", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "Tensor", "(", "[", "gamma", "]", ")", ",", "\n", "requires_grad", "=", "False", "\n", ")", "\n", "self", ".", "epsilon", "=", "2.0", "\n", "self", ".", "negative_size", "=", "negative_sample_size", "\n", "self", ".", "entity_dim", ",", "self", ".", "relation_dim", "=", "entity_dim", ",", "relation_dim", "\n", "self", ".", "entity_embeddings", "=", "nn", ".", "Embedding", "(", "\n", "num_embeddings", "=", "n_entity", ",", "\n", "embedding_dim", "=", "self", ".", "entity_dim", "*", "2", ")", "\n", "self", ".", "relation_embeddings", "=", "nn", ".", "Embedding", "(", "\n", "num_embeddings", "=", "n_relation", ",", "\n", "embedding_dim", "=", "self", ".", "relation_dim", ")", "\n", "self", ".", "embedding_range", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "tensor", "(", "[", "(", "self", ".", "gamma", ".", "item", "(", ")", "+", "self", ".", "epsilon", ")", "/", "entity_dim", "]", ")", ",", "\n", "requires_grad", "=", "False", "\n", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "nn", ".", "init", ".", "uniform_", "(", "tensor", "=", "self", ".", "entity_embeddings", ".", "weight", ",", "\n", "a", "=", "-", "self", ".", "embedding_range", ".", "item", "(", ")", ",", "\n", "b", "=", "self", ".", "embedding_range", ".", "item", "(", ")", ")", "\n", "nn", ".", "init", ".", "uniform_", "(", "tensor", "=", "self", ".", "relation_embeddings", ".", "weight", ",", "\n", "a", "=", "-", "self", ".", "embedding_range", ".", "item", "(", ")", ",", "\n", "b", "=", "self", ".", "embedding_range", ".", "item", "(", ")", ")", "\n", "\n", "self", ".", "entity_regularizer", "=", "Regularizer", "(", "1", ",", "0.05", ",", "1e9", ")", "\n", "self", ".", "projection_regularizer", "=", "Regularizer", "(", "1", ",", "0.05", ",", "1e9", ")", "\n", "# self.intersection_net = BetaIntersection(self.entity_dim)", "\n", "self", ".", "center_net", "=", "BetaIntersection", "(", "self", ".", "entity_dim", ")", "\n", "self", ".", "projection_net", "=", "BetaProjection", "(", "self", ".", "entity_dim", "*", "2", ",", "\n", "self", ".", "relation_dim", ",", "\n", "hidden_dim", ",", "\n", "self", ".", "projection_regularizer", ",", "\n", "num_layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_beta.BetaEstimator.get_entity_embedding": [[121, 124], ["estimator_beta.BetaEstimator.entity_embeddings", "estimator_beta.BetaEstimator.entity_regularizer"], "methods", ["None"], ["", "def", "get_entity_embedding", "(", "self", ",", "entity_ids", ":", "torch", ".", "LongTensor", ")", ":", "\n", "        ", "emb", "=", "self", ".", "entity_embeddings", "(", "entity_ids", ")", "\n", "return", "self", ".", "entity_regularizer", "(", "emb", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_beta.BetaEstimator.get_projection_embedding": [[125, 130], ["estimator_beta.BetaEstimator.relation_embeddings", "estimator_beta.BetaEstimator.projection_net", "len"], "methods", ["None"], ["", "def", "get_projection_embedding", "(", "self", ",", "proj_ids", ":", "torch", ".", "LongTensor", ",", "emb", ")", ":", "\n", "        ", "assert", "emb", ".", "shape", "[", "0", "]", "==", "len", "(", "proj_ids", ")", "\n", "rel_emb", "=", "self", ".", "relation_embeddings", "(", "proj_ids", ")", "\n", "pro_emb", "=", "self", ".", "projection_net", "(", "emb", ",", "rel_emb", ")", "\n", "return", "pro_emb", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_beta.BetaEstimator.get_conjunction_embedding": [[131, 142], ["torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "estimator_beta.BetaEstimator.center_net", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "sub_alpha_list.append", "sub_beta_list.append"], "methods", ["None"], ["", "def", "get_conjunction_embedding", "(", "self", ",", "conj_emb", ":", "List", "[", "torch", ".", "Tensor", "]", ")", ":", "\n", "        ", "sub_alpha_list", ",", "sub_beta_list", "=", "[", "]", ",", "[", "]", "\n", "for", "sub_emb", "in", "conj_emb", ":", "\n", "            ", "sub_alpha", ",", "sub_beta", "=", "torch", ".", "chunk", "(", "sub_emb", ",", "2", ",", "dim", "=", "-", "1", ")", "\n", "sub_alpha_list", ".", "append", "(", "sub_alpha", ")", "# b*dim", "\n", "sub_beta_list", ".", "append", "(", "sub_beta", ")", "\n", "", "all_alpha", "=", "torch", ".", "stack", "(", "sub_alpha_list", ")", "# conj*b*dim", "\n", "all_beta", "=", "torch", ".", "stack", "(", "sub_beta_list", ")", "\n", "new_alpha", ",", "new_beta", "=", "self", ".", "center_net", "(", "all_alpha", ",", "all_beta", ")", "\n", "embedding", "=", "torch", ".", "cat", "(", "[", "new_alpha", ",", "new_beta", "]", ",", "dim", "=", "-", "1", ")", "\n", "return", "embedding", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_beta.BetaEstimator.get_disjunction_embedding": [[143, 146], ["torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["None"], ["", "def", "get_disjunction_embedding", "(", "self", ",", "disj_emb", ":", "List", "[", "torch", ".", "Tensor", "]", ")", ":", "\n", "        ", "union_emb", "=", "torch", ".", "stack", "(", "disj_emb", ",", "dim", "=", "1", ")", "# datch*disj*d", "\n", "return", "union_emb", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_beta.BetaEstimator.get_negation_embedding": [[147, 149], ["None"], "methods", ["None"], ["", "def", "get_negation_embedding", "(", "self", ",", "emb", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "return", "1.", "/", "emb", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_beta.BetaEstimator.get_difference_embedding": [[151, 154], ["estimator_beta.BetaEstimator.get_negation_embedding", "estimator_beta.BetaEstimator.get_conjunction_embedding"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.BoxEstimator.get_negation_embedding", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.BoxEstimator.get_conjunction_embedding"], ["", "def", "get_difference_embedding", "(", "self", ",", "lemb", ":", "torch", ".", "Tensor", ",", "remb", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "r_neg_emb", "=", "self", ".", "get_negation_embedding", "(", "remb", ")", "\n", "return", "self", ".", "get_conjunction_embedding", "(", "[", "lemb", ",", "r_neg_emb", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_beta.BetaEstimator.criterion": [[155, 187], ["pred_emb.unsqueeze.unsqueeze.unsqueeze", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.distributions.beta.Beta", "torch.distributions.beta.Beta", "torch.distributions.beta.Beta", "torch.distributions.beta.Beta", "appfoq.inclusion_sampling", "estimator_beta.BetaEstimator.get_entity_embedding", "estimator_beta.BetaEstimator.get_entity_embedding", "all_neg_emb.view.view.view", "len", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "estimator_beta.BetaEstimator.compute_logit", "estimator_beta.BetaEstimator.compute_logit", "estimator_beta.BetaEstimator.compute_logit", "estimator_beta.BetaEstimator.compute_logit", "subsampling_weight.to", "estimator_beta.BetaEstimator.unsqueeze", "torch.max", "torch.max", "torch.max", "torch.max", "all_neg_emb.view.view.unsqueeze", "torch.max", "torch.max", "torch.max", "torch.max", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.appfoq.inclusion_sampling", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.BoxEstimator.get_entity_embedding", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.BoxEstimator.get_entity_embedding", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.BoxEstimator.compute_logit", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.BoxEstimator.compute_logit", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.BoxEstimator.compute_logit", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.BoxEstimator.compute_logit", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.to"], ["", "def", "criterion", "(", "self", ",", "\n", "pred_emb", ":", "torch", ".", "Tensor", ",", "\n", "answer_set", ":", "List", "[", "IntList", "]", ",", "\n", "union", ":", "bool", "=", "False", ")", ":", "\n", "        ", "assert", "pred_emb", ".", "shape", "[", "0", "]", "==", "len", "(", "answer_set", ")", "\n", "pred_emb", "=", "pred_emb", ".", "unsqueeze", "(", "dim", "=", "-", "2", ")", "# batch*(disj)*1*dim", "\n", "alpha_embedding", ",", "beta_embedding", "=", "torch", ".", "chunk", "(", "pred_emb", ",", "2", ",", "dim", "=", "-", "1", ")", "\n", "query_dist", "=", "torch", ".", "distributions", ".", "beta", ".", "Beta", "(", "\n", "alpha_embedding", ",", "beta_embedding", ")", "\n", "chosen_ans", ",", "chosen_false_ans", ",", "subsampling_weight", "=", "inclusion_sampling", "(", "answer_set", ",", "negative_size", "=", "self", ".", "negative_size", ",", "\n", "entity_num", "=", "self", ".", "n_entity", ")", "# todo: negative", "\n", "answer_embedding", "=", "self", ".", "get_entity_embedding", "(", "\n", "torch", ".", "tensor", "(", "chosen_ans", ",", "device", "=", "self", ".", "device", ")", ")", "# batch*1*dim", "\n", "all_neg_emb", "=", "self", ".", "get_entity_embedding", "(", "torch", ".", "tensor", "(", "\n", "chosen_false_ans", ",", "device", "=", "self", ".", "device", ")", ".", "view", "(", "-", "1", ")", ")", "\n", "# batch*negative*dim", "\n", "all_neg_emb", "=", "all_neg_emb", ".", "view", "(", "-", "1", ",", "\n", "self", ".", "negative_size", ",", "2", "*", "self", ".", "entity_dim", ")", "\n", "if", "union", ":", "\n", "            ", "positive_union_logit", "=", "self", ".", "compute_logit", "(", "\n", "answer_embedding", ".", "unsqueeze", "(", "1", ")", ",", "query_dist", ")", "# b*disj", "\n", "positive_logit", "=", "torch", ".", "max", "(", "positive_union_logit", ",", "dim", "=", "1", ")", "[", "0", "]", "\n", "negative_union_logit", "=", "self", ".", "compute_logit", "(", "\n", "all_neg_emb", ".", "unsqueeze", "(", "1", ")", ",", "query_dist", ")", "\n", "negative_logit", "=", "torch", ".", "max", "(", "negative_union_logit", ",", "dim", "=", "1", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "positive_logit", "=", "self", ".", "compute_logit", "(", "answer_embedding", ",", "query_dist", ")", "\n", "negative_logit", "=", "self", ".", "compute_logit", "(", "\n", "all_neg_emb", ",", "query_dist", ")", "# b*negative", "\n", "", "return", "positive_logit", ",", "negative_logit", ",", "subsampling_weight", ".", "to", "(", "\n", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_beta.BetaEstimator.compute_logit": [[188, 195], ["torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.distributions.beta.Beta", "torch.distributions.beta.Beta", "torch.distributions.beta.Beta", "torch.distributions.beta.Beta", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.distributions.kl.kl_divergence", "torch.distributions.kl.kl_divergence", "torch.distributions.kl.kl_divergence", "torch.distributions.kl.kl_divergence"], "methods", ["None"], ["", "def", "compute_logit", "(", "self", ",", "entity_emb", ",", "query_dist", ")", ":", "\n", "        ", "entity_alpha", ",", "entity_beta", "=", "torch", ".", "chunk", "(", "entity_emb", ",", "2", ",", "dim", "=", "-", "1", ")", "\n", "entity_dist", "=", "torch", ".", "distributions", ".", "beta", ".", "Beta", "(", "entity_alpha", ",", "entity_beta", ")", "\n", "logit", "=", "self", ".", "gamma", "-", "torch", ".", "norm", "(", "torch", ".", "distributions", ".", "kl", ".", "kl_divergence", "(", "\n", "entity_dist", ",", "query_dist", ")", ",", "p", "=", "1", ",", "dim", "=", "-", "1", ")", "\n", "return", "logit", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_beta.BetaEstimator.compute_all_entity_logit": [[196, 224], ["torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "estimator_beta.BetaEstimator.get_entity_embedding", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.distributions.beta.Beta", "torch.distributions.beta.Beta", "torch.distributions.beta.Beta", "torch.distributions.beta.Beta", "appfoq.find_optimal_batch", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "pred_alpha.unsqueeze", "pred_beta.unsqueeze", "logit_list.append", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "estimator_beta.BetaEstimator.compute_logit", "estimator_beta.BetaEstimator.compute_logit", "range", "answer_part.unsqueeze().unsqueeze", "torch.max", "torch.max", "torch.max", "torch.max", "answer_part.unsqueeze", "answer_part.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.to", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.to", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.to", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.to", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.BoxEstimator.get_entity_embedding", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.appfoq.find_optimal_batch", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.BoxEstimator.compute_logit", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.BoxEstimator.compute_logit"], ["", "def", "compute_all_entity_logit", "(", "self", ",", "\n", "pred_emb", ":", "torch", ".", "Tensor", ",", "\n", "union", ":", "bool", "=", "False", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "all_entities", "=", "torch", ".", "LongTensor", "(", "range", "(", "self", ".", "n_entity", ")", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "all_embedding", "=", "self", ".", "get_entity_embedding", "(", "all_entities", ")", "# nentity*dim", "\n", "pred_alpha", ",", "pred_beta", "=", "torch", ".", "chunk", "(", "\n", "pred_emb", ",", "2", ",", "dim", "=", "-", "1", ")", "# batch*(disj)*dim", "\n", "query_dist", "=", "torch", ".", "distributions", ".", "beta", ".", "Beta", "(", "\n", "pred_alpha", ".", "unsqueeze", "(", "-", "2", ")", ",", "pred_beta", ".", "unsqueeze", "(", "-", "2", ")", ")", "\n", "batch_num", "=", "find_optimal_batch", "(", "all_embedding", ",", "\n", "query_dist", "=", "query_dist", ",", "\n", "compute_logit", "=", "self", ".", "compute_logit", ",", "\n", "union", "=", "union", ")", "\n", "chunk_of_answer", "=", "torch", ".", "chunk", "(", "all_embedding", ",", "batch_num", ",", "dim", "=", "0", ")", "\n", "logit_list", "=", "[", "]", "\n", "for", "answer_part", "in", "chunk_of_answer", ":", "\n", "            ", "if", "union", ":", "\n", "                ", "union_part", "=", "self", ".", "compute_logit", "(", "\n", "answer_part", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", ",", "\n", "query_dist", ")", "# b*disj*answer_part*dim", "\n", "logit_part", "=", "torch", ".", "max", "(", "union_part", ",", "dim", "=", "1", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "                ", "logit_part", "=", "self", ".", "compute_logit", "(", "\n", "answer_part", ".", "unsqueeze", "(", "dim", "=", "0", ")", ",", "\n", "query_dist", ")", "# batch*answer_part*dim", "\n", "", "logit_list", ".", "append", "(", "logit_part", ")", "\n", "", "all_logit", "=", "torch", ".", "cat", "(", "logit_list", ",", "dim", "=", "1", ")", "\n", "return", "all_logit", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_beta.BetaEstimator4V.__init__": [[231, 275], ["appfoq.AppFOQEstimator.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.init.uniform_", "torch.nn.init.uniform_", "torch.nn.init.uniform_", "torch.nn.init.uniform_", "estimator_beta.Regularizer", "estimator_beta.Regularizer", "estimator_beta.BetaIntersection", "estimator_beta.BetaProjection", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "estimator_beta.BetaEstimator4V.embedding_range.item", "estimator_beta.BetaEstimator4V.embedding_range.item", "estimator_beta.BetaEstimator4V.embedding_range.item", "estimator_beta.BetaEstimator4V.embedding_range.item", "estimator_beta.BetaEstimator4V.gamma.item"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.BoxEstimator.__init__"], ["def", "__init__", "(", "self", ",", "n_entity", ",", "n_relation", ",", "hidden_dim", ",", "\n", "gamma", ",", "entity_dim", ",", "relation_dim", ",", "num_layers", ",", "\n", "negative_sample_size", ",", "device", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "name", "=", "'beta'", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "n_entity", "=", "n_entity", "\n", "self", ".", "n_relation", "=", "n_relation", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "self", ".", "gamma", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "Tensor", "(", "[", "gamma", "]", ")", ",", "\n", "requires_grad", "=", "False", "\n", ")", "\n", "self", ".", "epsilon", "=", "2.0", "\n", "self", ".", "negative_size", "=", "negative_sample_size", "\n", "self", ".", "entity_dim", ",", "self", ".", "relation_dim", "=", "entity_dim", ",", "relation_dim", "\n", "# self.entity_embeddings = nn.Embedding(num_embeddings=n_entity,", "\n", "#   embedding_dim=self.entity_dim * 2)", "\n", "# self.relation_embeddings = nn.Embedding(num_embeddings=n_relation,", "\n", "# embedding_dim=self.relation_dim)", "\n", "self", ".", "entity_embedding", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "zeros", "(", "n_entity", ",", "self", ".", "entity_dim", "*", "2", ")", ")", "\n", "self", ".", "relation_embedding", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "zeros", "(", "n_relation", ",", "self", ".", "relation_dim", ")", ")", "\n", "self", ".", "embedding_range", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "Tensor", "(", "[", "(", "self", ".", "gamma", ".", "item", "(", ")", "+", "self", ".", "epsilon", ")", "/", "entity_dim", "]", ")", ",", "\n", "requires_grad", "=", "False", "\n", ")", "\n", "nn", ".", "init", ".", "uniform_", "(", "tensor", "=", "self", ".", "entity_embedding", ",", "\n", "a", "=", "-", "self", ".", "embedding_range", ".", "item", "(", ")", ",", "\n", "b", "=", "self", ".", "embedding_range", ".", "item", "(", ")", ")", "\n", "nn", ".", "init", ".", "uniform_", "(", "tensor", "=", "self", ".", "relation_embedding", ",", "\n", "a", "=", "-", "self", ".", "embedding_range", ".", "item", "(", ")", ",", "\n", "b", "=", "self", ".", "embedding_range", ".", "item", "(", ")", ")", "\n", "\n", "self", ".", "entity_regularizer", "=", "Regularizer", "(", "1", ",", "0.05", ",", "1e9", ")", "\n", "self", ".", "projection_regularizer", "=", "Regularizer", "(", "1", ",", "0.05", ",", "1e9", ")", "\n", "# self.intersection_net = BetaIntersection(self.entity_dim)", "\n", "self", ".", "center_net", "=", "BetaIntersection", "(", "self", ".", "entity_dim", ")", "\n", "self", ".", "projection_net", "=", "BetaProjection", "(", "self", ".", "entity_dim", "*", "2", ",", "\n", "self", ".", "relation_dim", ",", "\n", "hidden_dim", ",", "\n", "self", ".", "projection_regularizer", ",", "\n", "num_layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_beta.BetaEstimator4V.get_entity_embedding": [[276, 285], ["torch.index_select().view", "torch.index_select().view", "torch.index_select().view", "torch.index_select().view", "estimator_beta.BetaEstimator4V.entity_regularizer", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "list", "entity_ids.view"], "methods", ["None"], ["", "def", "get_entity_embedding", "(", "self", ",", "entity_ids", ":", "torch", ".", "LongTensor", ",", "\n", "**", "kwargs", ")", ":", "\n", "# emb = self.entity_embedding[entity_ids, :]", "\n", "        ", "emb", "=", "torch", ".", "index_select", "(", "\n", "self", ".", "entity_embedding", ",", "\n", "dim", "=", "0", ",", "\n", "index", "=", "entity_ids", ".", "view", "(", "-", "1", ")", "\n", ")", ".", "view", "(", "list", "(", "entity_ids", ".", "shape", ")", "+", "[", "self", ".", "entity_dim", "*", "2", "]", ")", "\n", "return", "self", ".", "entity_regularizer", "(", "emb", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_beta.BetaEstimator4V.get_projection_embedding": [[286, 296], ["torch.index_select().view", "torch.index_select().view", "torch.index_select().view", "torch.index_select().view", "estimator_beta.BetaEstimator4V.projection_net", "len", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "list", "proj_ids.view"], "methods", ["None"], ["", "def", "get_projection_embedding", "(", "self", ",", "proj_ids", ":", "torch", ".", "LongTensor", ",", "emb", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "assert", "emb", ".", "shape", "[", "0", "]", "==", "len", "(", "proj_ids", ")", "\n", "rel_emb", "=", "torch", ".", "index_select", "(", "\n", "self", ".", "relation_embedding", ",", "\n", "dim", "=", "0", ",", "\n", "index", "=", "proj_ids", ".", "view", "(", "-", "1", ")", ")", ".", "view", "(", "\n", "list", "(", "proj_ids", ".", "shape", ")", "+", "[", "self", ".", "relation_dim", "]", ")", "\n", "pro_emb", "=", "self", ".", "projection_net", "(", "emb", ",", "rel_emb", ")", "\n", "return", "pro_emb", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_beta.BetaEstimator4V.get_conjunction_embedding": [[297, 309], ["torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "estimator_beta.BetaEstimator4V.center_net", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "sub_alpha_list.append", "sub_beta_list.append"], "methods", ["None"], ["", "def", "get_conjunction_embedding", "(", "self", ",", "conj_emb", ":", "List", "[", "torch", ".", "Tensor", "]", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "sub_alpha_list", ",", "sub_beta_list", "=", "[", "]", ",", "[", "]", "\n", "for", "sub_emb", "in", "conj_emb", ":", "\n", "            ", "sub_alpha", ",", "sub_beta", "=", "torch", ".", "chunk", "(", "sub_emb", ",", "2", ",", "dim", "=", "-", "1", ")", "\n", "sub_alpha_list", ".", "append", "(", "sub_alpha", ")", "# b*dim", "\n", "sub_beta_list", ".", "append", "(", "sub_beta", ")", "\n", "", "all_alpha", "=", "torch", ".", "stack", "(", "sub_alpha_list", ")", "# conj*b*dim", "\n", "all_beta", "=", "torch", ".", "stack", "(", "sub_beta_list", ")", "\n", "new_alpha", ",", "new_beta", "=", "self", ".", "center_net", "(", "all_alpha", ",", "all_beta", ")", "\n", "embedding", "=", "torch", ".", "cat", "(", "[", "new_alpha", ",", "new_beta", "]", ",", "dim", "=", "-", "1", ")", "\n", "return", "embedding", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_beta.BetaEstimator4V.get_disjunction_embedding": [[310, 314], ["torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["None"], ["", "def", "get_disjunction_embedding", "(", "self", ",", "disj_emb", ":", "List", "[", "torch", ".", "Tensor", "]", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "union_emb", "=", "torch", ".", "stack", "(", "disj_emb", ",", "dim", "=", "1", ")", "# datch*disj*d", "\n", "return", "union_emb", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_beta.BetaEstimator4V.get_negation_embedding": [[315, 317], ["None"], "methods", ["None"], ["", "def", "get_negation_embedding", "(", "self", ",", "emb", ":", "torch", ".", "Tensor", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "1.", "/", "emb", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_beta.BetaEstimator4V.get_difference_embedding": [[333, 336], ["None"], "methods", ["None"], ["def", "get_difference_embedding", "(", "self", ",", "lemb", ":", "torch", ".", "Tensor", ",", "remb", ":", "torch", ".", "Tensor", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "assert", "False", ",", "'Do not use d in BetaE'", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_beta.BetaEstimator4V.get_multiple_difference_embedding": [[337, 339], ["None"], "methods", ["None"], ["", "def", "get_multiple_difference_embedding", "(", "self", ",", "emb", ":", "List", "[", "torch", ".", "Tensor", "]", ",", "**", "kwargs", ")", ":", "\n", "        ", "assert", "False", ",", "'Do not use D in BetaE'", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_beta.BetaEstimator4V.criterion": [[340, 377], ["torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.distributions.beta.Beta", "torch.distributions.beta.Beta", "torch.distributions.beta.Beta", "torch.distributions.beta.Beta", "appfoq.inclusion_sampling", "estimator_beta.BetaEstimator4V.get_entity_embedding().squeeze", "estimator_beta.BetaEstimator4V.get_entity_embedding", "all_neg_emb.view.view.view", "len", "estimator_beta.BetaEstimator4V.compute_logit", "estimator_beta.BetaEstimator4V.compute_logit", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.distributions.beta.Beta", "torch.distributions.beta.Beta", "torch.distributions.beta.Beta", "torch.distributions.beta.Beta", "estimator_beta.BetaEstimator4V.compute_logit", "torch.max", "torch.max", "torch.max", "torch.max", "torch.distributions.beta.Beta", "torch.distributions.beta.Beta", "torch.distributions.beta.Beta", "torch.distributions.beta.Beta", "estimator_beta.BetaEstimator4V.compute_logit", "subsampling_weight.to", "estimator_beta.BetaEstimator4V.get_entity_embedding", "estimator_beta.BetaEstimator4V.unsqueeze", "torch.max", "torch.max", "torch.max", "torch.max", "alpha_embedding.unsqueeze", "beta_embedding.unsqueeze", "all_neg_emb.view.view.unsqueeze", "alpha_embedding.unsqueeze", "beta_embedding.unsqueeze", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.appfoq.inclusion_sampling", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.BoxEstimator.get_entity_embedding", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.BoxEstimator.compute_logit", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.BoxEstimator.compute_logit", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.BoxEstimator.compute_logit", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.BoxEstimator.compute_logit", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.to", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.BoxEstimator.get_entity_embedding"], ["", "def", "criterion", "(", "self", ",", "\n", "pred_emb", ":", "torch", ".", "Tensor", ",", "\n", "answer_set", ":", "List", "[", "IntList", "]", ",", "\n", "union", ":", "bool", "=", "False", ")", ":", "\n", "        ", "assert", "pred_emb", ".", "shape", "[", "0", "]", "==", "len", "(", "answer_set", ")", "\n", "alpha_embedding", ",", "beta_embedding", "=", "torch", ".", "chunk", "(", "pred_emb", ",", "2", ",", "dim", "=", "-", "1", ")", "\n", "query_dist", "=", "torch", ".", "distributions", ".", "beta", ".", "Beta", "(", "\n", "alpha_embedding", ",", "beta_embedding", ")", "\n", "chosen_ans", ",", "chosen_false_ans", ",", "subsampling_weight", "=", "inclusion_sampling", "(", "answer_set", ",", "negative_size", "=", "self", ".", "negative_size", ",", "\n", "entity_num", "=", "self", ".", "n_entity", ")", "# todo: negative", "\n", "answer_embedding", "=", "self", ".", "get_entity_embedding", "(", "\n", "torch", ".", "tensor", "(", "chosen_ans", ",", "device", "=", "self", ".", "device", ")", ")", ".", "squeeze", "(", ")", "\n", "if", "union", ":", "\n", "            ", "positive_union_logit", "=", "self", ".", "compute_logit", "(", "\n", "answer_embedding", ".", "unsqueeze", "(", "1", ")", ",", "query_dist", ")", "# b*disj", "\n", "positive_logit", "=", "torch", ".", "max", "(", "positive_union_logit", ",", "dim", "=", "1", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "positive_logit", "=", "self", ".", "compute_logit", "(", "answer_embedding", ",", "query_dist", ")", "\n", "", "all_neg_emb", "=", "self", ".", "get_entity_embedding", "(", "torch", ".", "tensor", "(", "\n", "chosen_false_ans", ",", "device", "=", "self", ".", "device", ")", ".", "view", "(", "-", "1", ")", ")", "\n", "# batch*negative*dim", "\n", "all_neg_emb", "=", "all_neg_emb", ".", "view", "(", "-", "1", ",", "\n", "self", ".", "negative_size", ",", "2", "*", "self", ".", "entity_dim", ")", "\n", "if", "union", ":", "\n", "            ", "query_dist_unsqueezed", "=", "torch", ".", "distributions", ".", "beta", ".", "Beta", "(", "\n", "alpha_embedding", ".", "unsqueeze", "(", "2", ")", ",", "beta_embedding", ".", "unsqueeze", "(", "2", ")", ")", "\n", "negative_union_logit", "=", "self", ".", "compute_logit", "(", "\n", "all_neg_emb", ".", "unsqueeze", "(", "1", ")", ",", "query_dist_unsqueezed", ")", "\n", "negative_logit", "=", "torch", ".", "max", "(", "negative_union_logit", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "query_dist_unsqueezed", "=", "torch", ".", "distributions", ".", "beta", ".", "Beta", "(", "\n", "alpha_embedding", ".", "unsqueeze", "(", "1", ")", ",", "beta_embedding", ".", "unsqueeze", "(", "1", ")", ")", "\n", "negative_logit", "=", "self", ".", "compute_logit", "(", "\n", "all_neg_emb", ",", "query_dist_unsqueezed", ")", "# b*negative", "\n", "", "return", "positive_logit", ",", "negative_logit", ",", "subsampling_weight", ".", "to", "(", "\n", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_beta.BetaEstimator4V.compute_logit": [[378, 385], ["torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.distributions.beta.Beta", "torch.distributions.beta.Beta", "torch.distributions.beta.Beta", "torch.distributions.beta.Beta", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.distributions.kl.kl_divergence", "torch.distributions.kl.kl_divergence", "torch.distributions.kl.kl_divergence", "torch.distributions.kl.kl_divergence"], "methods", ["None"], ["", "def", "compute_logit", "(", "self", ",", "entity_emb", ",", "query_dist", ")", ":", "\n", "        ", "entity_alpha", ",", "entity_beta", "=", "torch", ".", "chunk", "(", "entity_emb", ",", "2", ",", "dim", "=", "-", "1", ")", "\n", "entity_dist", "=", "torch", ".", "distributions", ".", "beta", ".", "Beta", "(", "entity_alpha", ",", "entity_beta", ")", "\n", "logit", "=", "self", ".", "gamma", "-", "torch", ".", "norm", "(", "torch", ".", "distributions", ".", "kl", ".", "kl_divergence", "(", "\n", "entity_dist", ",", "query_dist", ")", ",", "p", "=", "1", ",", "dim", "=", "-", "1", ")", "\n", "return", "logit", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_beta.BetaEstimator4V.compute_all_entity_logit": [[386, 413], ["torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "estimator_beta.BetaEstimator4V.get_entity_embedding", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.distributions.beta.Beta", "torch.distributions.beta.Beta", "torch.distributions.beta.Beta", "torch.distributions.beta.Beta", "appfoq.find_optimal_batch", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "pred_alpha.unsqueeze", "pred_beta.unsqueeze", "logit_list.append", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "estimator_beta.BetaEstimator4V.compute_logit", "estimator_beta.BetaEstimator4V.compute_logit", "range", "answer_part.unsqueeze().unsqueeze", "torch.max", "torch.max", "torch.max", "torch.max", "answer_part.unsqueeze", "answer_part.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.to", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.to", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.to", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.to", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.BoxEstimator.get_entity_embedding", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.appfoq.find_optimal_batch", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.BoxEstimator.compute_logit", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.BoxEstimator.compute_logit"], ["", "def", "compute_all_entity_logit", "(", "self", ",", "\n", "pred_emb", ":", "torch", ".", "Tensor", ",", "\n", "union", ":", "bool", "=", "False", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "all_entities", "=", "torch", ".", "LongTensor", "(", "range", "(", "self", ".", "n_entity", ")", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "all_embedding", "=", "self", ".", "get_entity_embedding", "(", "all_entities", ")", "# nentity*dim", "\n", "pred_alpha", ",", "pred_beta", "=", "torch", ".", "chunk", "(", "\n", "pred_emb", ",", "2", ",", "dim", "=", "-", "1", ")", "# batch*(disj)*dim", "\n", "query_dist", "=", "torch", ".", "distributions", ".", "beta", ".", "Beta", "(", "\n", "pred_alpha", ".", "unsqueeze", "(", "-", "2", ")", ",", "pred_beta", ".", "unsqueeze", "(", "-", "2", ")", ")", "\n", "batch_num", "=", "find_optimal_batch", "(", "all_embedding", ",", "\n", "query_dist", "=", "query_dist", ",", "\n", "compute_logit", "=", "self", ".", "compute_logit", ",", "\n", "union", "=", "union", ")", "\n", "chunk_of_answer", "=", "torch", ".", "chunk", "(", "all_embedding", ",", "batch_num", ",", "dim", "=", "0", ")", "\n", "logit_list", "=", "[", "]", "\n", "for", "answer_part", "in", "chunk_of_answer", ":", "\n", "            ", "if", "union", ":", "\n", "                ", "union_part", "=", "self", ".", "compute_logit", "(", "\n", "answer_part", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", ",", "\n", "query_dist", ")", "# b*disj*answer_part*dim", "\n", "logit_part", "=", "torch", ".", "max", "(", "union_part", ",", "dim", "=", "1", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "                ", "logit_part", "=", "self", ".", "compute_logit", "(", "answer_part", ".", "unsqueeze", "(", "\n", "dim", "=", "0", ")", ",", "query_dist", ")", "# batch*answer_part*dim", "\n", "", "logit_list", ".", "append", "(", "logit_part", ")", "\n", "", "all_logit", "=", "torch", ".", "cat", "(", "logit_list", ",", "dim", "=", "1", ")", "\n", "return", "all_logit", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.appfoq.AppFOQEstimator.get_entity_embedding": [[83, 86], ["None"], "methods", ["None"], ["    ", "@", "abstractmethod", "\n", "def", "get_entity_embedding", "(", "self", ",", "entity_ids", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.appfoq.AppFOQEstimator.get_projection_embedding": [[87, 90], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "get_projection_embedding", "(", "self", ",", "proj_ids", ":", "torch", ".", "Tensor", ",", "emb", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.appfoq.AppFOQEstimator.get_negation_embedding": [[91, 94], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "get_negation_embedding", "(", "self", ",", "emb", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.appfoq.AppFOQEstimator.get_conjunction_embedding": [[95, 98], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "get_conjunction_embedding", "(", "self", ",", "conj_emb", ":", "List", "[", "torch", ".", "Tensor", "]", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.appfoq.AppFOQEstimator.get_disjunction_embedding": [[99, 102], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "get_disjunction_embedding", "(", "self", ",", "disj_emb", ":", "List", "[", "torch", ".", "Tensor", "]", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.appfoq.AppFOQEstimator.get_difference_embedding": [[103, 106], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "get_difference_embedding", "(", "self", ",", "lemb", ":", "torch", ".", "Tensor", ",", "remb", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.appfoq.AppFOQEstimator.criterion": [[107, 110], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "criterion", "(", "self", ",", "pred_emb", ":", "torch", ".", "Tensor", ",", "answer_set", ":", "List", "[", "IntList", "]", ",", "union", ":", "bool", "=", "False", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.appfoq.AppFOQEstimator.compute_all_entity_logit": [[111, 114], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "compute_all_entity_logit", "(", "self", ",", "pred_emb", ":", "torch", ".", "Tensor", ",", "union", ":", "bool", "=", "False", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.appfoq.find_optimal_batch": [[14, 27], ["int", "compute_logit", "compute_logit", "batch_answer_emb.unsqueeze().unsqueeze", "batch_answer_emb.unsqueeze", "batch_answer_emb.unsqueeze"], "function", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.BoxEstimator.compute_logit", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.BoxEstimator.compute_logit"], ["def", "find_optimal_batch", "(", "answer_emb", ":", "torch", ".", "tensor", ",", "query_dist", ":", "torch", ".", "tensor", ",", "compute_logit", ",", "union", ":", "bool", "=", "False", ")", ":", "\n", "    ", "batch_num", "=", "1", "\n", "while", "True", ":", "\n", "        ", "try", ":", "\n", "            ", "batch_size", "=", "int", "(", "answer_emb", ".", "shape", "[", "0", "]", "/", "batch_num", ")", "\n", "batch_answer_emb", "=", "answer_emb", "[", "0", ":", "batch_size", "]", "\n", "if", "union", ":", "\n", "                ", "logit", "=", "compute_logit", "(", "batch_answer_emb", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", ",", "query_dist", ")", "\n", "", "else", ":", "\n", "                ", "logit", "=", "compute_logit", "(", "batch_answer_emb", ".", "unsqueeze", "(", "0", ")", ",", "query_dist", ")", "\n", "", "return", "batch_num", "*", "2", "\n", "", "except", "RuntimeError", ":", "\n", "            ", "batch_num", "*=", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.appfoq.negative_sampling": [[29, 55], ["torch.zeros", "torch.zeros", "range", "torch.sqrt", "torch.sqrt", "len", "len", "all_chosen_ans.append", "all_chosen_false_ans.append", "random.choices", "len", "numpy.random.randint", "numpy.in1d", "negative_sample_list.append", "numpy.concatenate"], "function", ["None"], ["", "", "", "def", "negative_sampling", "(", "answer_set", ":", "List", "[", "IntList", "]", ",", "negative_size", ":", "int", ",", "entity_num", ":", "int", ",", "k", "=", "1", ",", "base_num", "=", "4", ")", ":", "\n", "    ", "all_chosen_ans", "=", "[", "]", "\n", "all_chosen_false_ans", "=", "[", "]", "\n", "subsampling_weight", "=", "torch", ".", "zeros", "(", "len", "(", "answer_set", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "answer_set", ")", ")", ":", "\n", "        ", "all_chosen_ans", ".", "append", "(", "random", ".", "choices", "(", "answer_set", "[", "i", "]", ",", "k", "=", "k", ")", ")", "\n", "subsampling_weight", "[", "i", "]", "=", "len", "(", "answer_set", "[", "i", "]", ")", "+", "base_num", "\n", "now_false_ans_size", "=", "0", "\n", "negative_sample_list", "=", "[", "]", "\n", "while", "now_false_ans_size", "<", "negative_size", ":", "\n", "            ", "negative_sample", "=", "np", ".", "random", ".", "randint", "(", "\n", "entity_num", ",", "size", "=", "negative_size", "*", "2", ")", "\n", "mask", "=", "np", ".", "in1d", "(", "\n", "negative_sample", ",", "\n", "answer_set", "[", "i", "]", ",", "\n", "assume_unique", "=", "True", ",", "\n", "invert", "=", "True", "\n", ")", "\n", "negative_sample", "=", "negative_sample", "[", "mask", "]", "\n", "negative_sample_list", ".", "append", "(", "negative_sample", ")", "\n", "now_false_ans_size", "+=", "negative_sample", ".", "size", "\n", "", "negative_sample", "=", "np", ".", "concatenate", "(", "negative_sample_list", ")", "[", "\n", ":", "negative_size", "]", "\n", "all_chosen_false_ans", ".", "append", "(", "negative_sample", ")", "\n", "", "subsampling_weight", "=", "torch", ".", "sqrt", "(", "1", "/", "subsampling_weight", ")", "\n", "return", "all_chosen_ans", ",", "all_chosen_false_ans", ",", "subsampling_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.appfoq.inclusion_sampling": [[57, 68], ["torch.zeros", "torch.zeros", "range", "torch.sqrt", "torch.sqrt", "len", "len", "all_chosen_ans.append", "numpy.random.randint", "all_chosen_false_ans.append", "random.choices", "len"], "function", ["None"], ["", "def", "inclusion_sampling", "(", "answer_set", ":", "List", "[", "IntList", "]", ",", "negative_size", ":", "int", ",", "entity_num", ":", "int", ",", "k", "=", "1", ",", "base_num", "=", "4", ")", ":", "\n", "    ", "all_chosen_ans", "=", "[", "]", "\n", "all_chosen_false_ans", "=", "[", "]", "\n", "subsampling_weight", "=", "torch", ".", "zeros", "(", "len", "(", "answer_set", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "answer_set", ")", ")", ":", "\n", "        ", "all_chosen_ans", ".", "append", "(", "random", ".", "choices", "(", "answer_set", "[", "i", "]", ",", "k", "=", "k", ")", ")", "\n", "subsampling_weight", "[", "i", "]", "=", "len", "(", "answer_set", "[", "i", "]", ")", "+", "base_num", "\n", "negative_sample", "=", "np", ".", "random", ".", "randint", "(", "entity_num", ",", "size", "=", "negative_size", ")", "\n", "all_chosen_false_ans", ".", "append", "(", "negative_sample", ")", "\n", "", "subsampling_weight", "=", "torch", ".", "sqrt", "(", "1", "/", "subsampling_weight", ")", "\n", "return", "all_chosen_ans", ",", "all_chosen_false_ans", ",", "subsampling_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.appfoq.compute_final_loss": [[70, 79], ["torch.logsigmoid().squeeze", "torch.logsigmoid", "torch.mean", "torch.mean", "subsampling_weight.sum", "subsampling_weight.sum", "torch.logsigmoid"], "function", ["None"], ["", "def", "compute_final_loss", "(", "positive_logit", ",", "negative_logit", ",", "subsampling_weight", ")", ":", "\n", "    ", "positive_score", "=", "F", ".", "logsigmoid", "(", "positive_logit", ")", ".", "squeeze", "(", "dim", "=", "1", ")", "# note this is b*1 by beta", "\n", "negative_score", "=", "F", ".", "logsigmoid", "(", "-", "negative_logit", ")", "\n", "negative_score", "=", "torch", ".", "mean", "(", "negative_score", ",", "dim", "=", "1", ")", "\n", "positive_loss", "=", "-", "(", "positive_score", "*", "subsampling_weight", ")", ".", "sum", "(", ")", "\n", "negative_loss", "=", "-", "(", "negative_score", "*", "subsampling_weight", ")", ".", "sum", "(", ")", "\n", "positive_loss", "/=", "subsampling_weight", ".", "sum", "(", ")", "\n", "negative_loss", "/=", "subsampling_weight", ".", "sum", "(", ")", "\n", "return", "positive_loss", ",", "negative_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.test_foq_v2.random_e_ground": [[14, 19], ["enumerate", "ValueError", "str", "random.randint"], "function", ["None"], ["def", "random_e_ground", "(", "foq_formula", ")", ":", "\n", "    ", "for", "i", ",", "c", "in", "enumerate", "(", "foq_formula", ")", ":", "\n", "        ", "if", "c", "==", "'e'", ":", "\n", "            ", "return", "foq_formula", "[", ":", "i", "]", "+", "\"{\"", "+", "str", "(", "random", ".", "randint", "(", "0", ",", "99", ")", ")", "+", "\"}\"", "+", "foq_formula", "[", "i", "+", "1", ":", "]", "\n", "", "", "raise", "ValueError", "(", "\"Nothing to gound\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.test_foq_v2.random_p_ground": [[21, 26], ["enumerate", "ValueError", "str", "random.randint"], "function", ["None"], ["", "def", "random_p_ground", "(", "foq_formula", ")", ":", "\n", "    ", "for", "i", ",", "c", "in", "enumerate", "(", "foq_formula", ")", ":", "\n", "        ", "if", "c", "==", "'p'", ":", "\n", "            ", "return", "foq_formula", "[", ":", "i", "]", "+", "\"[\"", "+", "str", "(", "random", ".", "randint", "(", "0", ",", "99", ")", ")", "+", "\"]\"", "+", "foq_formula", "[", "i", "+", "1", ":", "]", "\n", "", "", "raise", "ValueError", "(", "\"Nothing to gound\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.test_foq_v2.complete_ground": [[28, 40], ["test_foq_v2.random_e_ground", "test_foq_v2.random_p_ground"], "function", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.test_foq_v2.random_e_ground", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.test_foq_v2.random_p_ground"], ["", "def", "complete_ground", "(", "foq_formula", ")", ":", "\n", "    ", "while", "1", ":", "\n", "        ", "try", ":", "\n", "            ", "foq_formula", "=", "random_e_ground", "(", "foq_formula", ")", "\n", "", "except", ":", "\n", "            ", "break", "\n", "", "", "while", "1", ":", "\n", "        ", "try", ":", "\n", "            ", "foq_formula", "=", "random_p_ground", "(", "foq_formula", ")", "\n", "", "except", ":", "\n", "            ", "break", "\n", "", "", "return", "foq_formula", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.test_foq_v2.test_parse_formula": [[42, 49], ["fol.beta_query_v2.items", "fol.foq_v2.parse_formula", "print", "fol.foq_v2.parse_formula", "print"], "function", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.parse_formula", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.parse_formula"], ["", "def", "test_parse_formula", "(", ")", ":", "\n", "    ", "for", "k", ",", "v", "in", "beta_query_v2", ".", "items", "(", ")", ":", "\n", "        ", "obj", "=", "parse_formula", "(", "v", ")", "\n", "assert", "obj", ".", "formula", "==", "v", ",", "print", "(", "obj", ".", "formula", ",", "v", ")", "\n", "oobj", "=", "parse_formula", "(", "obj", ".", "formula", ")", "\n", "assert", "oobj", ".", "formula", "==", "obj", ".", "formula", "\n", "print", "(", "k", ",", "obj", ",", "obj", ".", "formula", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.test_foq_v2.test_parse_grounded_formula": [[52, 65], ["fol.beta_query_v2.items", "test_foq_v2.random_p_ground", "fol.foq_v2.parse_formula", "fol.foq_v2.parse_formula", "fol.foq_v2.parse_formula", "test_foq_v2.random_e_ground"], "function", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.test_foq_v2.random_p_ground", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.parse_formula", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.parse_formula", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.parse_formula", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.test_foq_v2.random_e_ground"], ["", "", "def", "test_parse_grounded_formula", "(", ")", ":", "\n", "\n", "    ", "for", "k", ",", "v", "in", "beta_query_v2", ".", "items", "(", ")", ":", "\n", "        ", "gv", "=", "random_p_ground", "(", "random_e_ground", "(", "v", ")", ")", "\n", "obj", "=", "parse_formula", "(", "v", ")", "\n", "gobj", "=", "parse_formula", "(", "gv", ")", "\n", "\n", "oobj", "=", "parse_formula", "(", "obj", ".", "formula", ")", "\n", "assert", "gobj", ".", "formula", "==", "oobj", ".", "formula", "\n", "'''\n        ogobj = parse_formula(gobj.ground_formula)\n        assert gobj.ground_formula == ogobj.ground_formula\n        '''", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.test_foq_v2.test_additive_ground": [[67, 74], ["fol.beta_query_v2.items", "fol.foq_v2.parse_formula", "range", "test_foq_v2.random_p_ground", "fol.foq_v2.parse_formula.additive_ground", "test_foq_v2.random_e_ground", "json.loads"], "function", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.parse_formula", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.test_foq_v2.random_p_ground", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.additive_ground", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.test_foq_v2.random_e_ground"], ["", "", "def", "test_additive_ground", "(", ")", ":", "\n", "    ", "for", "k", ",", "v", "in", "beta_query_v2", ".", "items", "(", ")", ":", "\n", "        ", "obj", "=", "parse_formula", "(", "v", ")", "\n", "for", "_", "in", "range", "(", "10", ")", ":", "\n", "            ", "gv", "=", "random_p_ground", "(", "random_e_ground", "(", "obj", ".", "dumps", ")", ")", "\n", "obj", ".", "additive_ground", "(", "json", ".", "loads", "(", "gv", ")", ")", "\n", "", "assert", "obj", ".", "formula", "==", "obj", ".", "formula", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.test_foq_v2.test_sample": [[89, 104], ["utils.util.load_data_with_indexing", "fol.foq_v2.parse_formula", "fol.foq_v2.parse_formula.random_query", "fol.foq_v2.parse_formula.deterministic_query", "fol.foq_v2.parse_formula", "fol.foq_v2.parse_formula.additive_ground", "fol.foq_v2.parse_formula.deterministic_query", "print", "json.loads"], "function", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.util.load_data_with_indexing", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.parse_formula", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.random_query", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.deterministic_query", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.parse_formula", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.additive_ground", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.deterministic_query"], ["def", "test_sample", "(", ")", ":", "\n", "    ", "ent2id", ",", "rel2id", ",", "proj_train", ",", "reverse_train", ",", "proj_valid", ",", "reverse_valid", ",", "proj_test", ",", "reverse_test", "=", "load_data_with_indexing", "(", "stanford_data_path", ")", "\n", "for", "name", "in", "beta_query_v2", ":", "\n", "        ", "query_structure", "=", "beta_query_v2", "[", "name", "]", "\n", "ansclass", "=", "parse_formula", "(", "query_structure", ")", "\n", "ans_sample", "=", "ansclass", ".", "random_query", "(", "proj_train", ",", "cumulative", "=", "True", ")", "\n", "ans_check_sample", "=", "ansclass", ".", "deterministic_query", "(", "proj_train", ")", "\n", "assert", "ans_sample", "==", "ans_check_sample", "\n", "query_dumps", "=", "ansclass", ".", "dumps", "\n", "brand_new_instance", "=", "parse_formula", "(", "query_structure", ")", "\n", "brand_new_instance", ".", "additive_ground", "(", "json", ".", "loads", "(", "query_dumps", ")", ")", "\n", "ans_another", "=", "brand_new_instance", ".", "deterministic_query", "(", "proj_train", ")", "\n", "assert", "ans_another", "==", "ans_sample", "\n", "print", "(", "ansclass", ".", "dumps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.test_foq_v2.test_backward_sample": [[106, 135], ["utils.util.load_data_with_indexing", "fol.foq_v2.parse_formula", "fol.foq_v2.parse_formula.backward_sample", "fol.foq_v2.parse_formula.deterministic_query", "fol.foq_v2.parse_formula", "fol.foq_v2.parse_formula.additive_ground", "fol.foq_v2.parse_formula.deterministic_query", "print", "fol.foq_v2.parse_formula", "fol.foq_v2.parse_formula.backward_sample", "fol.foq_v2.parse_formula.deterministic_query", "fol.foq_v2.parse_formula", "fol.foq_v2.parse_formula.additive_ground", "fol.foq_v2.parse_formula.deterministic_query", "print", "json.loads", "json.loads"], "function", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.util.load_data_with_indexing", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.parse_formula", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.backward_sample", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.deterministic_query", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.parse_formula", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.additive_ground", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.deterministic_query", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.parse_formula", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.backward_sample", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.deterministic_query", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.parse_formula", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.additive_ground", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.deterministic_query"], ["", "", "def", "test_backward_sample", "(", ")", ":", "\n", "    ", "ent2id", ",", "rel2id", ",", "proj_train", ",", "reverse_train", ",", "proj_valid", ",", "reverse_valid", ",", "proj_test", ",", "reverse_test", "=", "load_data_with_indexing", "(", "stanford_data_path", ")", "\n", "for", "name", "in", "beta_query_v2", ":", "\n", "        ", "query_structure", "=", "beta_query_v2", "[", "name", "]", "\n", "ansclass", "=", "parse_formula", "(", "query_structure", ")", "\n", "ans_back_sample", "=", "ansclass", ".", "backward_sample", "(", "proj_train", ",", "reverse_train", ",", "requirement", "=", "None", ",", "\n", "cumulative", "=", "True", ",", "meaningful_difference", "=", "False", ")", "\n", "ans_check_back_sample", "=", "ansclass", ".", "deterministic_query", "(", "proj_train", ")", "\n", "assert", "ans_check_back_sample", "==", "ans_back_sample", "\n", "query_dumps", "=", "ansclass", ".", "dumps", "\n", "check_instance", "=", "parse_formula", "(", "query_structure", ")", "\n", "check_instance", ".", "additive_ground", "(", "json", ".", "loads", "(", "query_dumps", ")", ")", "\n", "ans_another", "=", "check_instance", ".", "deterministic_query", "(", "proj_train", ")", "\n", "assert", "ans_another", "==", "ans_check_back_sample", "\n", "print", "(", "name", ",", "ansclass", ".", "dumps", ")", "\n", "", "for", "name", "in", "beta_query_v2", ":", "\n", "        ", "query_structure", "=", "beta_query_v2", "[", "name", "]", "\n", "ansclass", "=", "parse_formula", "(", "query_structure", ")", "\n", "ans_back_sample", "=", "ansclass", ".", "backward_sample", "(", "proj_train", ",", "reverse_train", ",", "requirement", "=", "None", ",", "\n", "cumulative", "=", "True", ",", "meaningful_difference", "=", "True", ")", "\n", "ans_check_back_sample", "=", "ansclass", ".", "deterministic_query", "(", "proj_train", ")", "\n", "assert", "ans_check_back_sample", "==", "ans_back_sample", "\n", "query_dumps", "=", "ansclass", ".", "dumps", "\n", "check_instance", "=", "parse_formula", "(", "query_structure", ")", "\n", "check_instance", ".", "additive_ground", "(", "json", ".", "loads", "(", "query_dumps", ")", ")", "\n", "ans_another", "=", "check_instance", ".", "deterministic_query", "(", "proj_train", ")", "\n", "assert", "ans_another", "==", "ans_check_back_sample", "\n", "print", "(", "name", ",", "ansclass", ".", "dumps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.test_foq_v2.test_benchmark_backward_sample": [[137, 155], ["utils.util.load_data_with_indexing", "pandas.read_csv", "enumerate", "fol.foq_v2.parse_formula", "fol.foq_v2.parse_formula.backward_sample", "fol.foq_v2.parse_formula.deterministic_query", "fol.foq_v2.parse_formula", "fol.foq_v2.parse_formula.additive_ground", "fol.foq_v2.parse_formula.deterministic_query", "print", "json.loads"], "function", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.utils.util.load_data_with_indexing", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.parse_formula", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.backward_sample", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.deterministic_query", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.parse_formula", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.additive_ground", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.deterministic_query"], ["", "", "def", "test_benchmark_backward_sample", "(", ")", ":", "\n", "\n", "    ", "ent2id", ",", "rel2id", ",", "proj_train", ",", "reverse_train", ",", "proj_valid", ",", "reverse_valid", ",", "proj_test", ",", "reverse_test", "=", "load_data_with_indexing", "(", "stanford_data_path", ")", "\n", "formula_file", "=", "\"outputs/test_generated_formula_anchor_node=3.csv\"", "\n", "df", "=", "pd", ".", "read_csv", "(", "formula_file", ")", "\n", "for", "i", ",", "query_structure", "in", "enumerate", "(", "df", "[", "'original'", "]", ")", ":", "\n", "        ", "ansclass", "=", "parse_formula", "(", "query_structure", ")", "\n", "ans_back_sample", "=", "ansclass", ".", "backward_sample", "(", "proj_train", ",", "reverse_train", ",", "requirement", "=", "None", ",", "\n", "cumulative", "=", "True", ",", "meaningful_difference", "=", "True", ")", "\n", "ans_check_back_sample", "=", "ansclass", ".", "deterministic_query", "(", "proj_train", ")", "\n", "assert", "ans_check_back_sample", "==", "ans_back_sample", "\n", "query_dumps", "=", "ansclass", ".", "dumps", "\n", "check_instance", "=", "parse_formula", "(", "query_structure", ")", "\n", "check_instance", ".", "additive_ground", "(", "json", ".", "loads", "(", "query_dumps", ")", ")", "\n", "ans_another", "=", "check_instance", ".", "deterministic_query", "(", "proj_train", ")", "\n", "assert", "ans_another", "==", "ans_check_back_sample", "\n", "print", "(", "i", ",", "ansclass", ".", "dumps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.FirstOrderSetQuery.__init__": [[64, 67], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "latent_embedding", "=", "None", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.FirstOrderSetQuery.sort_sub": [[68, 74], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "sort_sub", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Sort the sub query by their formula in alphabetical order.\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.FirstOrderSetQuery.formula": [[75, 82], ["None"], "methods", ["None"], ["", "@", "property", "\n", "@", "abstractmethod", "\n", "def", "formula", "(", "self", ")", "->", "str", ":", "\n", "        ", "\"\"\"\n        Where we store the structure information\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.FirstOrderSetQuery.dumps": [[83, 90], ["None"], "methods", ["None"], ["", "@", "property", "\n", "@", "abstractmethod", "\n", "def", "dumps", "(", "self", ")", "->", "str", ":", "\n", "        ", "\"\"\"\n        Where we serialize the data information\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.FirstOrderSetQuery.additive_ground": [[91, 97], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "additive_ground", "(", "self", ",", "dobject", ":", "Dobject", ")", ":", "\n", "        ", "\"\"\"\n        Just add the values when the structure is fixed!\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.FirstOrderSetQuery.backward_sample": [[98, 113], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "backward_sample", "(", "self", ",", "projs", ",", "rprojs", ",", "requirement", "=", "None", ",", "\n", "cumulative", ":", "bool", "=", "False", ",", "meaningful_difference", ":", "bool", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        A function used to ground a query, the backward sampling strategy is used to ensure that there are always an\n        answer of this query, specifically, queries like 3i tend to have no answers if you use random_query rather than\n        backward_sample.\n        Requirement is a defaultdict(set)\n        If the meaningful_difference is False, the requirement only have 1 key: 'must include' or 'must exclude'.\n        If the meaningful_difference is True, the requirement may have 4 keys: 'must include', 'must exclude',\n        'optional include', 'optional exclude', the priority follows this order.\n        All possibilities are 'I' / 'E+O_I' / 'E' / 'O_I+O_E' / 'O_I' / 'O_E', those are short for requirement keys.\n        All requirement have at most one element given the new assignment of requirement in intersection.\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.FirstOrderSetQuery.deterministic_query": [[114, 118], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "deterministic_query", "(", "self", ",", "projection", ")", ":", "\n", "#     Consider the first entity / relation", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.FirstOrderSetQuery.embedding_estimation": [[119, 123], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "embedding_estimation", "(", "self", ",", "estimator", ":", "AppFOQEstimator", ",", "batch_indices", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.FirstOrderSetQuery._embedding_optimization": [[125, 136], ["None"], "methods", ["None"], ["", "def", "_embedding_optimization", "(", "self", ",", "estimator", ":", "AppFOQEstimator", ",", "\n", "batch_indices", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        This function is called for internal usage\n        it first initializes the latent embeddings of eqch fosq instance\n        then computes the loss function\n        For entity query, the loss is None,\n        For entity query, the loss is not None\n        For projection, we have the t norm\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.FirstOrderSetQuery.random_query": [[137, 140], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "random_query", "(", "self", ",", "projs", ",", "cumulative", ":", "bool", "=", "False", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.FirstOrderSetQuery.lift": [[141, 146], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "lift", "(", "self", ")", ":", "\n", "        ", "\"\"\" Remove all intermediate objects, grounded entities and relations\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.FirstOrderSetQuery.check_ground": [[147, 150], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "check_ground", "(", "self", ")", "->", "int", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.FirstOrderSetQuery.__len__": [[151, 153], ["foq_v2.FirstOrderSetQuery.check_ground"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.check_ground"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "check_ground", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.FirstOrderSetQuery.to": [[154, 157], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "to", "(", "self", ",", "device", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Entity.__init__": [[179, 184], ["foq_v2.FirstOrderSetQuery.__init__"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.BoxEstimator.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "entities", "=", "[", "]", "\n", "self", ".", "tentities", "=", "None", "\n", "self", ".", "device", "=", "'cpu'", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Entity.sort_sub": [[185, 187], ["None"], "methods", ["None"], ["", "def", "sort_sub", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Entity.formula": [[188, 191], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "formula", "(", "self", ")", ":", "\n", "        ", "return", "\"(e)\"", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Entity.dumps": [[192, 199], ["json.dumps"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.dumps"], ["", "@", "property", "\n", "def", "dumps", "(", "self", ")", ":", "\n", "        ", "dobject", "=", "{", "\n", "'o'", ":", "self", ".", "__o__", ",", "\n", "'a'", ":", "self", ".", "entities", "\n", "}", "\n", "return", "json", ".", "dumps", "(", "dobject", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Entity.additive_ground": [[200, 205], ["all", "foq_v2.Entity.entities.extend", "isinstance"], "methods", ["None"], ["", "def", "additive_ground", "(", "self", ",", "dobject", ":", "Dobject", ")", ":", "\n", "        ", "obj", ",", "entity_list", "=", "dobject", "[", "'o'", "]", ",", "dobject", "[", "'a'", "]", "\n", "assert", "obj", "==", "self", ".", "__o__", "\n", "assert", "all", "(", "isinstance", "(", "i", ",", "int", ")", "for", "i", "in", "entity_list", ")", "\n", "self", ".", "entities", ".", "extend", "(", "entity_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Entity.embedding_estimation": [[206, 217], ["estimator.get_entity_embedding", "torch.tensor().to", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.BoxEstimator.get_entity_embedding", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.to"], ["", "def", "embedding_estimation", "(", "self", ",", "\n", "estimator", ":", "AppFOQEstimator", ",", "\n", "batch_indices", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "if", "self", ".", "tentities", "is", "None", ":", "\n", "            ", "self", ".", "tentities", "=", "torch", ".", "tensor", "(", "self", ".", "entities", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "", "if", "batch_indices", ":", "\n", "            ", "ent", "=", "self", ".", "tentities", "[", "torch", ".", "tensor", "(", "batch_indices", ")", "]", "\n", "", "else", ":", "\n", "            ", "ent", "=", "self", ".", "tentities", "\n", "", "return", "estimator", ".", "get_entity_embedding", "(", "ent", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Entity._embedding_optimization": [[218, 226], ["foq_v2.Entity.embedding_estimation"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.embedding_estimation"], ["", "def", "_embedding_optimization", "(", "self", ",", "\n", "estimator", ":", "AppFOQEstimator", ",", "\n", "batch_indices", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "latent_embedding", "=", "self", ".", "embedding_estimation", "(", "\n", "estimator", "=", "estimator", ",", "\n", "batch_indices", "=", "batch_indices", ")", "\n", "return", "None", ",", "[", "]", ",", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Entity.lift": [[227, 230], ["None"], "methods", ["None"], ["", "def", "lift", "(", "self", ")", ":", "\n", "        ", "self", ".", "entities", "=", "[", "]", "\n", "self", ".", "tentities", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Entity.deterministic_query": [[231, 234], ["None"], "methods", ["None"], ["", "def", "deterministic_query", "(", "self", ",", "args", ",", "**", "kwargs", ")", ":", "\n", "# TODO: change to return a list of set", "\n", "        ", "return", "{", "self", ".", "entities", "[", "0", "]", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Entity.backward_sample": [[235, 250], ["set", "random.sample", "foq_v2.Entity.entities.append", "list", "list", "set", "random.sample", "projs.keys", "set", "projs.keys"], "methods", ["None"], ["", "def", "backward_sample", "(", "self", ",", "projs", ",", "rprojs", ",", "requirement", "=", "None", ",", "cumulative", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "requirement", ":", "\n", "            ", "if", "requirement", "[", "'must include'", "]", ":", "\n", "                ", "new_entity", "=", "list", "(", "requirement", "[", "'must include'", "]", ")", "\n", "", "else", ":", "\n", "                ", "new_entity", "=", "list", "(", "random", ".", "sample", "(", "set", "(", "projs", ".", "keys", "(", ")", ")", "-", "{", "requirement", "[", "'mustnot include'", "]", "}", ",", "1", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "new_entity", "=", "random", ".", "sample", "(", "set", "(", "projs", ".", "keys", "(", ")", ")", ",", "1", ")", "\n", "\n", "", "if", "cumulative", ":", "\n", "            ", "self", ".", "entities", ".", "append", "(", "new_entity", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "entities", "=", "new_entity", "\n", "\n", "", "return", "set", "(", "new_entity", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Entity.random_query": [[251, 258], ["random.sample", "foq_v2.Entity.entities.append", "set", "projs.keys"], "methods", ["None"], ["", "def", "random_query", "(", "self", ",", "projs", ",", "cumulative", "=", "False", ")", ":", "\n", "        ", "new_variable", "=", "random", ".", "sample", "(", "set", "(", "projs", ".", "keys", "(", ")", ")", ",", "1", ")", "[", "0", "]", "\n", "if", "cumulative", ":", "\n", "            ", "self", ".", "entities", ".", "append", "(", "new_variable", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "entities", "=", "[", "new_variable", "]", "\n", "", "return", "{", "new_variable", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Entity.check_ground": [[259, 261], ["len"], "methods", ["None"], ["", "def", "check_ground", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "entities", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Entity.to": [[262, 269], ["print", "torch.tensor().to", "foq_v2.Entity.tentities.to", "torch.tensor", "id"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.to", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.to"], ["", "def", "to", "(", "self", ",", "device", ")", ":", "\n", "        ", "self", ".", "device", "=", "device", "\n", "if", "self", ".", "tentities", "is", "None", ":", "\n", "            ", "self", ".", "tentities", "=", "torch", ".", "tensor", "(", "self", ".", "entities", ")", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "tentities", "=", "self", ".", "tentities", ".", "to", "(", "device", ")", "\n", "", "print", "(", "f'move variable object in {id(self)} to device {device}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Negation.__init__": [[274, 277], ["foq_v2.FirstOrderSetQuery.__init__"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.BoxEstimator.__init__"], ["def", "__init__", "(", "self", ",", "q", ":", "FirstOrderSetQuery", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "query", "=", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Negation.sort_sub": [[278, 280], ["foq_v2.Negation.query.sort_sub"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.sort_sub"], ["", "def", "sort_sub", "(", "self", ")", ":", "\n", "        ", "self", ".", "query", ".", "sort_sub", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Negation.formula": [[281, 284], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "formula", "(", "self", ")", ":", "\n", "        ", "return", "f\"(n,{self.query.formula})\"", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Negation.dumps": [[285, 292], ["json.dumps", "json.loads"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.dumps"], ["", "@", "property", "\n", "def", "dumps", "(", "self", ")", ":", "\n", "        ", "dobject", "=", "{", "\n", "'o'", ":", "self", ".", "__o__", ",", "\n", "'a'", ":", "json", ".", "loads", "(", "self", ".", "query", ".", "dumps", ")", "\n", "}", "\n", "return", "json", ".", "dumps", "(", "dobject", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Negation.additive_ground": [[293, 297], ["foq_v2.Negation.query.additive_ground"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.additive_ground"], ["", "def", "additive_ground", "(", "self", ",", "dobject", ":", "Dobject", ")", ":", "\n", "        ", "obj", ",", "sub_dobject", "=", "dobject", "[", "'o'", "]", ",", "dobject", "[", "'a'", "]", "\n", "assert", "obj", "==", "self", ".", "__o__", "\n", "self", ".", "query", ".", "additive_ground", "(", "sub_dobject", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Negation.embedding_estimation": [[298, 305], ["foq_v2.Negation.query.embedding_estimation", "estimator.get_negation_embedding"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.embedding_estimation", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.BoxEstimator.get_negation_embedding"], ["", "def", "embedding_estimation", "(", "self", ",", "\n", "estimator", ":", "AppFOQEstimator", ",", "\n", "batch_indices", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "operand_emb", "=", "self", ".", "query", ".", "embedding_estimation", "(", "estimator", ",", "\n", "batch_indices", ",", "\n", "**", "kwargs", ")", "\n", "return", "estimator", ".", "get_negation_embedding", "(", "operand_emb", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Negation.lift": [[306, 308], ["foq_v2.Negation.query.lift"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.lift"], ["", "def", "lift", "(", "self", ")", ":", "\n", "        ", "self", ".", "query", ".", "lift", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Negation.deterministic_query": [[309, 312], ["projection.keys", "foq_v2.Negation.query.deterministic_query"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.deterministic_query"], ["", "def", "deterministic_query", "(", "self", ",", "projection", ")", ":", "\n", "        ", "ans", "=", "projection", ".", "keys", "(", ")", "-", "self", ".", "query", ".", "deterministic_query", "(", "projection", ")", "\n", "return", "ans", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Negation.backward_sample": [[313, 324], ["collections.defaultdict", "collections.defaultdict", "projs.keys", "foq_v2.Negation.query.backward_sample", "random.randrange", "len", "projs.keys"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.backward_sample"], ["", "def", "backward_sample", "(", "self", ",", "projs", ",", "rprojs", ",", "requirement", ":", "bool", "=", "None", ",", "cumulative", "=", "False", ",", "\n", "meaningful_difference", ":", "bool", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "# assert meaningful_difference == False  This is not true only in DM-like queries", "\n", "        ", "if", "not", "requirement", ":", "\n", "            ", "requirement", "=", "defaultdict", "(", "set", ")", "\n", "requirement", "[", "'must include'", "]", "=", "{", "random", ".", "randrange", "(", "0", ",", "len", "(", "projs", ".", "keys", "(", ")", ")", ")", "}", "\n", "", "new_requirement", "=", "defaultdict", "(", "set", ")", "\n", "new_requirement", "[", "'must include'", "]", "=", "requirement", "[", "'must exclude'", "]", "\n", "new_requirement", "[", "'must exclude'", "]", "=", "requirement", "[", "'must include'", "]", "\n", "return", "projs", ".", "keys", "(", ")", "-", "self", ".", "query", ".", "backward_sample", "(", "projs", ",", "rprojs", ",", "new_requirement", ",", "cumulative", ",", "\n", "meaningful_difference", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Negation.random_query": [[325, 328], ["projs.keys", "foq_v2.Negation.query.random_query"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.random_query"], ["", "def", "random_query", "(", "self", ",", "projs", ",", "cumulative", "=", "False", ")", ":", "\n", "        ", "ans", "=", "projs", ".", "keys", "(", ")", "-", "self", ".", "query", ".", "random_query", "(", "projs", ",", "cumulative", ")", "\n", "return", "ans", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Negation.check_ground": [[329, 331], ["foq_v2.Negation.query.check_ground"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.check_ground"], ["", "def", "check_ground", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "self", ".", "query", ".", "check_ground", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Negation.to": [[332, 334], ["foq_v2.Negation.query.to"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.to"], ["", "def", "to", "(", "self", ",", "device", ")", ":", "\n", "        ", "self", ".", "query", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Projection.__init__": [[342, 348], ["foq_v2.FirstOrderSetQuery.__init__"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.BoxEstimator.__init__"], ["def", "__init__", "(", "self", ",", "q", ":", "FirstOrderSetQuery", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "query", "=", "q", "\n", "self", ".", "relations", "=", "[", "]", "\n", "self", ".", "trelations", "=", "None", "\n", "self", ".", "device", "=", "'cpu'", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Projection.sort_sub": [[349, 351], ["foq_v2.Projection.query.sort_sub"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.sort_sub"], ["", "def", "sort_sub", "(", "self", ")", ":", "\n", "        ", "self", ".", "query", ".", "sort_sub", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Projection.formula": [[352, 355], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "formula", "(", "self", ")", ":", "\n", "        ", "return", "f\"(p,{self.query.formula})\"", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Projection.dumps": [[356, 363], ["json.dumps", "json.loads"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.dumps"], ["", "@", "property", "\n", "def", "dumps", "(", "self", ")", ":", "\n", "        ", "dobject", "=", "{", "\n", "'o'", ":", "self", ".", "__o__", ",", "\n", "'a'", ":", "[", "self", ".", "relations", ",", "json", ".", "loads", "(", "self", ".", "query", ".", "dumps", ")", "]", "\n", "}", "\n", "return", "json", ".", "dumps", "(", "dobject", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Projection.additive_ground": [[364, 370], ["all", "foq_v2.Projection.relations.extend", "foq_v2.Projection.query.additive_ground", "isinstance"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.additive_ground"], ["", "def", "additive_ground", "(", "self", ",", "dobject", ":", "Dobject", ")", ":", "\n", "        ", "obj", ",", "(", "relation_list", ",", "sub_dobject", ")", "=", "dobject", "[", "'o'", "]", ",", "dobject", "[", "'a'", "]", "\n", "assert", "obj", "==", "self", ".", "__o__", "\n", "assert", "all", "(", "isinstance", "(", "i", ",", "int", ")", "for", "i", "in", "relation_list", ")", "\n", "self", ".", "relations", ".", "extend", "(", "relation_list", ")", "\n", "self", ".", "query", ".", "additive_ground", "(", "sub_dobject", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Projection.embedding_estimation": [[371, 387], ["foq_v2.Projection.query.embedding_estimation", "estimator.get_projection_embedding", "torch.tensor().to", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.embedding_estimation", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.BoxEstimator.get_projection_embedding", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.to"], ["", "def", "embedding_estimation", "(", "self", ",", "\n", "estimator", ":", "AppFOQEstimator", ",", "\n", "batch_indices", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "if", "self", ".", "trelations", "is", "None", ":", "\n", "            ", "self", ".", "trelations", "=", "torch", ".", "tensor", "(", "self", ".", "relations", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "", "if", "batch_indices", ":", "\n", "            ", "rel", "=", "self", ".", "trelations", "[", "torch", ".", "tensor", "(", "batch_indices", ")", "]", "\n", "", "else", ":", "\n", "            ", "rel", "=", "self", ".", "trelations", "\n", "", "operand_emb", "=", "self", ".", "query", ".", "embedding_estimation", "(", "estimator", ",", "\n", "batch_indices", ",", "\n", "**", "kwargs", ")", "\n", "return", "estimator", ".", "get_projection_embedding", "(", "rel", ",", "\n", "operand_emb", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Projection.lift": [[388, 392], ["foq_v2.Projection.query.lift"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.lift"], ["", "def", "lift", "(", "self", ")", ":", "\n", "        ", "self", ".", "relations", "=", "[", "]", "\n", "self", ".", "trelations", "=", "None", "\n", "self", ".", "query", ".", "lift", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Projection.deterministic_query": [[393, 400], ["foq_v2.Projection.query.deterministic_query", "set", "set.update"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.deterministic_query"], ["", "def", "deterministic_query", "(", "self", ",", "projs", ")", ":", "\n", "        ", "rel", "=", "self", ".", "relations", "[", "0", "]", "\n", "result", "=", "self", ".", "query", ".", "deterministic_query", "(", "projs", ")", "\n", "answer", "=", "set", "(", ")", "\n", "for", "e", "in", "result", ":", "\n", "            ", "answer", ".", "update", "(", "projs", "[", "e", "]", "[", "rel", "]", ")", "\n", "", "return", "answer", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Projection.backward_sample": [[401, 474], ["collections.defaultdict", "foq_v2.Projection.query.backward_sample", "set", "collections.defaultdict", "isinstance", "foq_v2.Projection.relations.append", "random.randrange", "list", "random.sample", "random.sample", "set.update", "random.sample", "random.sample", "random.sample", "exclude_point.issubset", "len", "rprojs[].keys", "rprojs[].keys", "foq_v2.Projection.backward_sample.find_exlusion"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.backward_sample"], ["", "def", "backward_sample", "(", "self", ",", "projs", ",", "rprojs", ",", "requirement", "=", "None", ",", "cumulative", "=", "False", ",", "meaningful_difference", ":", "bool", "=", "False", ",", "\n", "**", "kwargs", ")", ":", "\n", "# since the projection[next_point][self.rel] may contains essential_point even if not starting from it", "\n", "# This issue can not be totally solved since the p_object contains other entity than parent", "\n", "# TODO: maybe solve this by not considering in edge type, but seems unfavourable in meaningful difference.", "\n", "        ", "def", "find_exlusion", "(", "projs", ",", "rprojs", ",", "exclude_point", ")", ":", "\n", "            ", "while", "True", ":", "\n", "                ", "cursor", "=", "random", ".", "sample", "(", "rprojs", ".", "keys", "(", ")", "-", "exclude_point", ",", "1", ")", "[", "0", "]", "\n", "relation", "=", "random", ".", "sample", "(", "rprojs", "[", "cursor", "]", ".", "keys", "(", ")", ",", "1", ")", "[", "0", "]", "\n", "parents", "=", "rprojs", "[", "cursor", "]", "[", "relation", "]", "\n", "parent", "=", "random", ".", "sample", "(", "parents", ",", "1", ")", "[", "0", "]", "\n", "if", "not", "exclude_point", ".", "issubset", "(", "projs", "[", "parent", "]", "[", "relation", "]", ")", ":", "\n", "                    ", "break", "\n", "", "", "return", "parent", ",", "relation", "\n", "\n", "", "if", "not", "requirement", ":", "\n", "            ", "requirement", "=", "defaultdict", "(", "set", ")", "\n", "requirement", "[", "'must include'", "]", "=", "{", "random", ".", "randrange", "(", "0", ",", "len", "(", "projs", ".", "keys", "(", ")", ")", ")", "}", "\n", "\n", "", "if", "requirement", "[", "'must include'", "]", ":", "\n", "            ", "cursor", "=", "list", "(", "requirement", "[", "'must include'", "]", ")", "[", "0", "]", "\n", "relation", "=", "random", ".", "sample", "(", "rprojs", "[", "cursor", "]", ".", "keys", "(", ")", ",", "1", ")", "[", "0", "]", "\n", "parents", "=", "rprojs", "[", "cursor", "]", "[", "relation", "]", "\n", "# find an incoming edge and a corresponding node", "\n", "parent", "=", "random", ".", "sample", "(", "parents", ",", "1", ")", "[", "0", "]", "\n", "", "elif", "requirement", "[", "'must exclude'", "]", ":", "\n", "            ", "if", "requirement", "[", "'optional include'", "]", ":", "\n", "                ", "cursor", "=", "list", "(", "requirement", "[", "'optional include'", "]", ")", "[", "0", "]", "\n", "for", "relation", "in", "rprojs", "[", "cursor", "]", ".", "keys", "(", ")", ":", "\n", "                    ", "parents", "=", "rprojs", "[", "cursor", "]", "[", "relation", "]", "\n", "for", "parent", "in", "parents", ":", "\n", "                        ", "if", "not", "requirement", "[", "'must exclude'", "]", ".", "issubset", "(", "projs", "[", "parent", "]", "[", "relation", "]", ")", ":", "\n", "                            ", "break", "\n", "", "", "else", ":", "\n", "                        ", "continue", "\n", "", "break", "\n", "", "else", ":", "\n", "                    ", "parent", ",", "relation", "=", "find_exlusion", "(", "projs", ",", "rprojs", ",", "requirement", "[", "'must exclude'", "]", ")", "\n", "", "", "else", ":", "\n", "                ", "parent", ",", "relation", "=", "find_exlusion", "(", "projs", ",", "rprojs", ",", "requirement", "[", "'must exclude'", "]", ")", "\n", "", "", "elif", "requirement", "[", "'optional include'", "]", ":", "\n", "            ", "cursor", "=", "list", "(", "requirement", "[", "'optional include'", "]", ")", "[", "0", "]", "\n", "for", "relation", "in", "rprojs", "[", "cursor", "]", ".", "keys", "(", ")", ":", "\n", "                ", "parents", "=", "rprojs", "[", "cursor", "]", "[", "relation", "]", "\n", "for", "parent", "in", "parents", ":", "\n", "                    ", "if", "not", "requirement", "[", "'optional exclude'", "]", ".", "issubset", "(", "projs", "[", "parent", "]", "[", "relation", "]", ")", ":", "\n", "                        ", "break", "\n", "", "", "else", ":", "\n", "                    ", "continue", "\n", "", "break", "\n", "", "", "elif", "requirement", "[", "'optional exclude'", "]", ":", "\n", "            ", "parent", ",", "relation", "=", "find_exlusion", "(", "projs", ",", "rprojs", ",", "requirement", "[", "'optional exclude'", "]", ")", "\n", "", "else", ":", "# requirement is empty defaultdict(set)", "\n", "            ", "parent", ",", "relation", "=", "find_exlusion", "(", "projs", ",", "rprojs", ",", "{", "-", "1", "}", ")", "\n", "\n", "", "new_requirement", "=", "defaultdict", "(", "set", ")", "\n", "new_requirement", "[", "'must include'", "]", "=", "{", "parent", "}", "\n", "p_object", "=", "self", ".", "query", ".", "backward_sample", "(", "projs", ",", "rprojs", ",", "requirement", "=", "new_requirement", ",", "cumulative", "=", "cumulative", ",", "\n", "meaningful_difference", "=", "meaningful_difference", ",", "**", "kwargs", ")", "\n", "if", "None", "in", "p_object", ":", "# FIXME: why this is a none in return type", "\n", "            ", "raise", "ValueError", "\n", "\n", "", "objects", "=", "set", "(", ")", "\n", "for", "entity", "in", "p_object", ":", "# FIXME: there used to be a copy", "\n", "            ", "if", "isinstance", "(", "entity", ",", "int", ")", ":", "\n", "                ", "objects", ".", "update", "(", "projs", "[", "entity", "]", "[", "relation", "]", ")", "\n", "\n", "", "", "if", "cumulative", ":", "\n", "            ", "self", ".", "relations", ".", "append", "(", "relation", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "relations", "=", "[", "relation", "]", "\n", "\n", "", "return", "objects", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Projection.random_query": [[475, 497], ["foq_v2.Projection.query.random_query", "set", "set", "list", "len", "random.sample", "random.sample", "foq_v2.Projection.relations.append", "set.update", "foq_v2.Projection.relations.append", "projs[].keys"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.random_query"], ["", "def", "random_query", "(", "self", ",", "projs", ",", "cumulative", "=", "False", ")", ":", "\n", "        ", "variable", "=", "self", ".", "query", ".", "random_query", "(", "projs", ",", "cumulative", ")", "\n", "objects", "=", "set", "(", ")", "\n", "if", "len", "(", "variable", ")", "==", "0", ":", "\n", "            ", "if", "cumulative", ":", "\n", "                ", "self", ".", "relations", ".", "append", "(", "0", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "relations", "=", "[", "]", "# TODO: perhaps another way to deal with it", "\n", "", "return", "objects", "\n", "\n", "", "chosen_variable", "=", "random", ".", "sample", "(", "variable", ",", "1", ")", "[", "0", "]", "\n", "relation", "=", "random", ".", "sample", "(", "projs", "[", "chosen_variable", "]", ".", "keys", "(", ")", ",", "1", ")", "[", "0", "]", "\n", "\n", "if", "cumulative", ":", "\n", "            ", "self", ".", "relations", ".", "append", "(", "relation", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "relations", "=", "[", "relation", "]", "\n", "\n", "", "objects", "=", "set", "(", ")", "\n", "for", "e", "in", "list", "(", "variable", ")", ":", "\n", "            ", "objects", ".", "update", "(", "projs", "[", "e", "]", "[", "relation", "]", ")", "\n", "", "return", "objects", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Projection.check_ground": [[498, 502], ["foq_v2.Projection.query.check_ground", "len"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.check_ground"], ["", "def", "check_ground", "(", "self", ")", ":", "\n", "        ", "n_inst", "=", "self", ".", "query", ".", "check_ground", "(", ")", "\n", "assert", "len", "(", "self", ".", "relations", ")", "==", "n_inst", "\n", "return", "n_inst", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Projection.to": [[503, 511], ["print", "foq_v2.Projection.query.to", "torch.tensor().to", "foq_v2.Projection.trelations.to", "torch.tensor", "id"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.to", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.to", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.to"], ["", "def", "to", "(", "self", ",", "device", ")", ":", "\n", "        ", "self", ".", "device", "=", "device", "\n", "if", "self", ".", "trelations", "is", "None", ":", "\n", "            ", "self", ".", "trelations", "=", "torch", ".", "tensor", "(", "self", ".", "relations", ")", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "trelations", "=", "self", ".", "trelations", ".", "to", "(", "device", ")", "\n", "", "print", "(", "f'move projection object in {id(self)} to device {device}'", ")", "\n", "self", ".", "query", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.MultipleSetQuery.__init__": [[514, 516], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "*", "queries", ":", "List", "[", "FirstOrderSetQuery", "]", ")", ":", "\n", "        ", "self", ".", "sub_queries", "=", "queries", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.MultipleSetQuery.sort_sub": [[517, 519], ["sorted"], "methods", ["None"], ["", "def", "sort_sub", "(", "self", ")", ":", "\n", "        ", "self", ".", "sub_queries", "=", "sorted", "(", "self", ".", "sub_queries", ",", "key", "=", "lambda", "q", ":", "q", ".", "formula", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.MultipleSetQuery.dumps": [[520, 530], ["foq_v2.MultipleSetQuery.sort_sub", "json.dumps", "json.loads"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.sort_sub", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.dumps"], ["", "@", "property", "\n", "def", "dumps", "(", "self", ")", ":", "\n", "        ", "self", ".", "sort_sub", "(", ")", "\n", "dobject", "=", "{", "\n", "'o'", ":", "self", ".", "__o__", ",", "\n", "'a'", ":", "[", "\n", "json", ".", "loads", "(", "subq", ".", "dumps", ")", "for", "subq", "in", "self", ".", "sub_queries", "\n", "]", "\n", "}", "\n", "return", "json", ".", "dumps", "(", "dobject", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.MultipleSetQuery.formula": [[531, 541], ["foq_v2.MultipleSetQuery.sort_sub", "len", "foq_v2.MultipleSetQuery.__o__.upper"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.sort_sub"], ["", "@", "property", "\n", "def", "formula", "(", "self", ")", ":", "\n", "        ", "self", ".", "sort_sub", "(", ")", "\n", "if", "len", "(", "self", ".", "sub_queries", ")", ">", "2", ":", "\n", "            ", "symb", "=", "self", ".", "__o__", ".", "upper", "(", ")", "\n", "", "else", ":", "\n", "            ", "symb", "=", "self", ".", "__o__", "\n", "", "return", "\"({},{})\"", ".", "format", "(", "\n", "symb", ",", "\n", "\",\"", ".", "join", "(", "q", ".", "formula", "for", "q", "in", "self", ".", "sub_queries", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.MultipleSetQuery.additive_ground": [[543, 549], ["zip", "len", "len", "q.additive_ground"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.additive_ground"], ["", "def", "additive_ground", "(", "self", ",", "dobject", ":", "Dobject", ")", ":", "\n", "        ", "obj", ",", "sub_dobjects", "=", "dobject", "[", "'o'", "]", ",", "dobject", "[", "'a'", "]", "\n", "assert", "obj", "==", "self", ".", "__o__", "\n", "assert", "len", "(", "self", ".", "sub_queries", ")", "==", "len", "(", "sub_dobjects", ")", "\n", "for", "q", ",", "dobj", "in", "zip", "(", "self", ".", "sub_queries", ",", "sub_dobjects", ")", ":", "\n", "            ", "q", ".", "additive_ground", "(", "dobj", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.MultipleSetQuery.embedding_estimation": [[550, 556], ["q.embedding_estimation"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.embedding_estimation"], ["", "", "def", "embedding_estimation", "(", "self", ",", "\n", "estimator", ":", "AppFOQEstimator", ",", "\n", "batch_indices", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "return", "[", "q", ".", "embedding_estimation", "(", "estimator", ",", "batch_indices", ",", "**", "kwargs", ")", "\n", "for", "q", "in", "self", ".", "sub_queries", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.MultipleSetQuery.lift": [[557, 560], ["query.lift"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.lift"], ["", "def", "lift", "(", "self", ")", ":", "\n", "        ", "for", "query", "in", "self", ".", "sub_queries", ":", "\n", "            ", "query", ".", "lift", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.MultipleSetQuery.check_ground": [[561, 565], ["set", "len", "list", "q.check_ground"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.check_ground"], ["", "", "def", "check_ground", "(", "self", ")", ":", "\n", "        ", "checked", "=", "set", "(", "q", ".", "check_ground", "(", ")", "for", "q", "in", "self", ".", "sub_queries", ")", "\n", "assert", "len", "(", "checked", ")", "==", "1", "\n", "return", "list", "(", "checked", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.MultipleSetQuery.to": [[566, 569], ["q.to"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.to"], ["", "def", "to", "(", "self", ",", "device", ")", ":", "\n", "        ", "for", "q", "in", "self", ".", "sub_queries", ":", "\n", "            ", "q", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Intersection.__init__": [[574, 576], ["foq_v2.MultipleSetQuery.__init__"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.BoxEstimator.__init__"], ["def", "__init__", "(", "self", ",", "*", "queries", ":", "List", "[", "FirstOrderSetQuery", "]", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "queries", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Intersection.embedding_estimation": [[577, 585], ["foq_v2.MultipleSetQuery.embedding_estimation", "estimator.get_conjunction_embedding"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.embedding_estimation", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.BoxEstimator.get_conjunction_embedding"], ["", "def", "embedding_estimation", "(", "self", ",", "\n", "estimator", ":", "AppFOQEstimator", ",", "\n", "batch_indices", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "embed_list", "=", "super", "(", ")", ".", "embedding_estimation", "(", "estimator", ",", "\n", "batch_indices", ",", "\n", "**", "kwargs", ")", "\n", "return", "estimator", ".", "get_conjunction_embedding", "(", "embed_list", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Intersection.deterministic_query": [[586, 589], ["set.intersection", "q.deterministic_query"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.deterministic_query"], ["", "def", "deterministic_query", "(", "self", ",", "projs", ")", ":", "\n", "        ", "return", "set", ".", "intersection", "(", "\n", "*", "(", "q", ".", "deterministic_query", "(", "projs", ")", "for", "q", "in", "self", ".", "sub_queries", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Intersection.backward_sample": [[591, 658], ["collections.defaultdict", "collections.defaultdict", "copy.deepcopy", "random.randint", "range", "set.intersection", "collections.defaultdict", "min", "random.sample", "list", "random.sample", "range", "copy.deepcopy", "set.intersection", "random.randrange", "neg_subqueries.append", "positive_subqueries.append", "len", "len", "pos_obj_list.append", "len", "len", "list", "len", "random.randint", "range", "len", "len", "positive_subqueries[].backward_sample", "positive_subqueries[].backward_sample", "range", "copy.deepcopy", "neg_subqueries[].backward_sample", "neg_subqueries[].backward_sample", "sub_query.backward_sample", "sub_obj_list.append", "len", "sub_obj_list.append", "projs.keys", "len", "len", "foq_v2.Intersection.sub_queries[].backward_sample", "foq_v2.Intersection.sub_queries[].backward_sample"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.backward_sample", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.backward_sample", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.backward_sample", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.backward_sample", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.backward_sample", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.backward_sample", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.backward_sample"], ["", "def", "backward_sample", "(", "self", ",", "projs", ",", "rprojs", ",", "requirement", "=", "None", ",", "cumulative", ":", "bool", "=", "False", ",", "\n", "meaningful_difference", ":", "bool", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "sub_obj_list", ",", "pos_obj_list", ",", "neg_obj_list", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "if", "not", "requirement", ":", "\n", "            ", "requirement", "=", "defaultdict", "(", "set", ")", "\n", "requirement", "[", "'must include'", "]", "=", "{", "random", ".", "randrange", "(", "0", ",", "len", "(", "projs", ".", "keys", "(", ")", ")", ")", "}", "\n", "", "positive_subqueries", ",", "neg_subqueries", "=", "[", "]", ",", "[", "]", "\n", "for", "sub_query", "in", "self", ".", "sub_queries", ":", "\n", "            ", "if", "sub_query", ".", "__o__", "==", "'n'", ":", "\n", "                ", "neg_subqueries", ".", "append", "(", "sub_query", ".", "query", ")", "\n", "", "else", ":", "\n", "                ", "positive_subqueries", ".", "append", "(", "sub_query", ")", "\n", "", "", "if", "meaningful_difference", "and", "len", "(", "positive_subqueries", ")", ">", "0", ":", "\n", "            ", "positive_requirement", "=", "defaultdict", "(", "set", ")", "\n", "positive_requirement", "[", "'must include'", "]", "=", "requirement", "[", "'must include'", "]", "\n", "positive_requirement", "[", "'optional include'", "]", "=", "requirement", "[", "'optional include'", "]", "\n", "positive_choose_requirement", "=", "copy", ".", "deepcopy", "(", "requirement", ")", "\n", "choose_formula", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "positive_subqueries", ")", "-", "1", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "positive_subqueries", ")", ")", ":", "\n", "                ", "if", "i", "==", "choose_formula", ":", "\n", "                    ", "pos_objs", "=", "positive_subqueries", "[", "i", "]", ".", "backward_sample", "(", "projs", ",", "rprojs", ",", "positive_choose_requirement", ",", "\n", "cumulative", ",", "meaningful_difference", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "                    ", "pos_objs", "=", "positive_subqueries", "[", "i", "]", ".", "backward_sample", "(", "projs", ",", "rprojs", ",", "positive_requirement", ",", "\n", "cumulative", ",", "meaningful_difference", ",", "**", "kwargs", ")", "\n", "", "pos_obj_list", ".", "append", "(", "pos_objs", ")", "\n", "", "all_pos_objs", "=", "set", ".", "intersection", "(", "*", "pos_obj_list", ")", "\n", "negative_requirement", "=", "defaultdict", "(", "set", ")", "\n", "negative_requirement", "[", "'must exclude'", "]", "=", "requirement", "[", "'must include'", "]", "\n", "negative_requirement", "[", "'optional exclude'", "]", "=", "requirement", "[", "'optional include'", "]", "\n", "optional_exclude_set", "=", "all_pos_objs", "-", "requirement", "[", "'must include'", "]", "-", "requirement", "[", "'optional include'", "]", "\n", "max_exclude_num", "=", "min", "(", "len", "(", "optional_exclude_set", ")", ",", "len", "(", "neg_subqueries", ")", ")", "\n", "negative_choose_formulas", "=", "random", ".", "sample", "(", "list", "(", "range", "(", "len", "(", "neg_subqueries", ")", ")", ")", ",", "max_exclude_num", ")", "\n", "optional_exclude_list", "=", "list", "(", "optional_exclude_set", ")", "\n", "exclude_element_list", "=", "random", ".", "sample", "(", "optional_exclude_list", ",", "max_exclude_num", ")", "\n", "exclude_ordinal", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "neg_subqueries", ")", ")", ":", "\n", "                ", "if", "i", "in", "negative_choose_formulas", ":", "\n", "                    ", "specific_negative_requirement", "=", "copy", ".", "deepcopy", "(", "negative_requirement", ")", "\n", "specific_negative_requirement", "[", "'optional include'", "]", "=", "{", "exclude_element_list", "[", "exclude_ordinal", "]", "}", "\n", "exclude_ordinal", "+=", "1", "\n", "neg_objs", "=", "neg_subqueries", "[", "i", "]", ".", "backward_sample", "(", "\n", "projs", ",", "rprojs", ",", "specific_negative_requirement", ",", "cumulative", ",", "meaningful_difference", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "                    ", "neg_objs", "=", "neg_subqueries", "[", "i", "]", ".", "backward_sample", "(", "projs", ",", "rprojs", ",", "negative_requirement", ",", "cumulative", ",", "\n", "meaningful_difference", ",", "**", "kwargs", ")", "\n", "", "all_pos_objs", "=", "all_pos_objs", "-", "neg_objs", "\n", "", "return", "all_pos_objs", "\n", "", "else", ":", "\n", "            ", "new_requirement", "=", "copy", ".", "deepcopy", "(", "requirement", ")", "\n", "if", "requirement", "[", "'must include'", "]", ":", "\n", "                ", "for", "sub_query", "in", "self", ".", "sub_queries", ":", "\n", "                    ", "sub_objs", "=", "sub_query", ".", "backward_sample", "(", "projs", ",", "rprojs", ",", "new_requirement", ",", "cumulative", ",", "\n", "meaningful_difference", ",", "**", "kwargs", ")", "\n", "sub_obj_list", ".", "append", "(", "sub_objs", ")", "\n", "", "", "else", ":", "\n", "                ", "choose_formula", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "sub_queries", ")", "-", "1", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "sub_queries", ")", ")", ":", "\n", "                    ", "if", "i", "!=", "choose_formula", ":", "\n", "                        ", "sub_objs", "=", "self", ".", "sub_queries", "[", "i", "]", ".", "backward_sample", "(", "\n", "projs", ",", "rprojs", ",", "requirement", "=", "None", ",", "cumulative", "=", "cumulative", ",", "\n", "meaningful_difference", "=", "meaningful_difference", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "                        ", "sub_objs", "=", "self", ".", "sub_queries", "[", "i", "]", ".", "backward_sample", "(", "projs", ",", "rprojs", ",", "new_requirement", ",", "cumulative", ",", "\n", "meaningful_difference", ",", "**", "kwargs", ")", "\n", "", "sub_obj_list", ".", "append", "(", "sub_objs", ")", "\n", "", "", "return", "set", ".", "intersection", "(", "*", "sub_obj_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Intersection.random_query": [[659, 665], ["set.intersection", "query.random_query", "sub_obj_list.append"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.random_query"], ["", "", "def", "random_query", "(", "self", ",", "projs", ",", "cumulative", "=", "False", ")", ":", "\n", "        ", "sub_obj_list", "=", "[", "]", "\n", "for", "query", "in", "self", ".", "sub_queries", ":", "\n", "            ", "sub_obj", "=", "query", ".", "random_query", "(", "projs", ",", "cumulative", "=", "cumulative", ")", "\n", "sub_obj_list", ".", "append", "(", "sub_obj", ")", "\n", "", "return", "set", ".", "intersection", "(", "*", "sub_obj_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Union.__init__": [[670, 672], ["foq_v2.MultipleSetQuery.__init__"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.BoxEstimator.__init__"], ["def", "__init__", "(", "self", ",", "*", "queries", ":", "List", "[", "FirstOrderSetQuery", "]", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "queries", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Union.embedding_estimation": [[673, 681], ["foq_v2.MultipleSetQuery.embedding_estimation", "estimator.get_disjunction_embedding"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.embedding_estimation", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.BoxEstimator.get_disjunction_embedding"], ["", "def", "embedding_estimation", "(", "self", ",", "\n", "estimator", ":", "AppFOQEstimator", ",", "\n", "batch_indices", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "embed_list", "=", "super", "(", ")", ".", "embedding_estimation", "(", "estimator", ",", "\n", "batch_indices", ",", "\n", "**", "kwargs", ")", "\n", "return", "estimator", ".", "get_disjunction_embedding", "(", "embed_list", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Union.deterministic_query": [[682, 685], ["set.union", "q.deterministic_query"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.deterministic_query"], ["", "def", "deterministic_query", "(", "self", ",", "projs", ")", ":", "\n", "        ", "return", "set", ".", "union", "(", "\n", "*", "(", "q", ".", "deterministic_query", "(", "projs", ")", "for", "q", "in", "self", ".", "sub_queries", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Union.backward_sample": [[687, 714], ["collections.defaultdict", "set.union", "collections.defaultdict", "random.randint", "copy.deepcopy", "range", "random.randrange", "len", "query.backward_sample", "sub_obj_list.append", "len", "len", "foq_v2.Union.sub_queries[].backward_sample", "sub_obj_list.append", "foq_v2.Union.sub_queries[].backward_sample", "sub_obj_list.append", "projs.keys"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.backward_sample", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.backward_sample", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.backward_sample"], ["", "def", "backward_sample", "(", "self", ",", "projs", ",", "rprojs", ",", "requirement", "=", "None", ",", "cumulative", "=", "False", ",", "\n", "meaningful_difference", ":", "bool", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "sub_obj_list", "=", "[", "]", "\n", "if", "not", "requirement", ":", "\n", "            ", "requirement", "=", "defaultdict", "(", "set", ")", "\n", "requirement", "[", "'must include'", "]", "=", "{", "random", ".", "randrange", "(", "0", ",", "len", "(", "projs", ".", "keys", "(", ")", ")", ")", "}", "\n", "", "normal_requirement", "=", "defaultdict", "(", "set", ")", "\n", "normal_requirement", "[", "'must exclude'", "]", "=", "requirement", "[", "'must exclude'", "]", "\n", "normal_requirement", "[", "'optional exclude'", "]", "=", "requirement", "[", "'optional exclude'", "]", "\n", "if", "requirement", "[", "'must include'", "]", "or", "requirement", "[", "'optional include'", "]", ":", "\n", "            ", "choose_formula_num", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "sub_queries", ")", "-", "1", ")", "\n", "specific_requirement", "=", "copy", ".", "deepcopy", "(", "requirement", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "sub_queries", ")", ")", ":", "\n", "                ", "if", "i", "==", "choose_formula_num", ":", "\n", "                    ", "sub_objs", "=", "self", ".", "sub_queries", "[", "i", "]", ".", "backward_sample", "(", "projs", ",", "rprojs", ",", "specific_requirement", ",", "cumulative", ",", "\n", "meaningful_difference", ",", "**", "kwargs", ")", "\n", "sub_obj_list", ".", "append", "(", "sub_objs", ")", "\n", "", "else", ":", "\n", "                    ", "sub_objs", "=", "self", ".", "sub_queries", "[", "i", "]", ".", "backward_sample", "(", "projs", ",", "rprojs", ",", "normal_requirement", ",", "cumulative", ",", "\n", "meaningful_difference", ",", "**", "kwargs", ")", "\n", "sub_obj_list", ".", "append", "(", "sub_objs", ")", "\n", "", "", "", "else", ":", "\n", "            ", "for", "query", "in", "self", ".", "sub_queries", ":", "\n", "                ", "sub_objs", "=", "query", ".", "backward_sample", "(", "projs", ",", "rprojs", ",", "normal_requirement", ",", "cumulative", ",", "\n", "meaningful_difference", ",", "**", "kwargs", ")", "\n", "sub_obj_list", ".", "append", "(", "sub_objs", ")", "\n", "", "", "return", "set", ".", "union", "(", "*", "sub_obj_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Union.random_query": [[715, 721], ["set.union", "query.random_query", "sub_obj_list.append"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.random_query"], ["", "def", "random_query", "(", "self", ",", "projs", ",", "cumulative", "=", "False", ")", ":", "\n", "        ", "sub_obj_list", "=", "[", "]", "\n", "for", "query", "in", "self", ".", "sub_queries", ":", "\n", "            ", "sub_objs", "=", "query", ".", "random_query", "(", "projs", ",", "cumulative", "=", "cumulative", ")", "\n", "sub_obj_list", ".", "append", "(", "sub_objs", ")", "\n", "", "return", "set", ".", "union", "(", "*", "sub_obj_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.__init__": [[726, 729], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "lq", ":", "FirstOrderSetQuery", ",", "rq", ":", "FirstOrderSetQuery", ")", ":", "\n", "        ", "self", ".", "lquery", "=", "lq", "\n", "self", ".", "rquery", "=", "rq", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.sort_sub": [[730, 733], ["foq_v2.Difference.lquery.sort_sub", "foq_v2.Difference.rquery.sort_sub"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.sort_sub", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.sort_sub"], ["", "def", "sort_sub", "(", "self", ")", ":", "\n", "        ", "self", ".", "lquery", ".", "sort_sub", "(", ")", "\n", "self", ".", "rquery", ".", "sort_sub", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.formula": [[734, 737], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "formula", "(", "self", ")", ":", "\n", "        ", "return", "f\"(d,{self.lquery.formula},{self.rquery.formula})\"", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.dumps": [[738, 745], ["json.dumps", "json.loads", "json.loads"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.dumps"], ["", "@", "property", "\n", "def", "dumps", "(", "self", ")", ":", "\n", "        ", "dobject", "=", "{", "\n", "'o'", ":", "self", ".", "__o__", ",", "\n", "'a'", ":", "[", "json", ".", "loads", "(", "self", ".", "lquery", ".", "dumps", ")", ",", "json", ".", "loads", "(", "self", ".", "rquery", ".", "dumps", ")", "]", "\n", "}", "\n", "return", "json", ".", "dumps", "(", "dobject", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.additive_ground": [[746, 751], ["foq_v2.Difference.lquery.additive_ground", "foq_v2.Difference.rquery.additive_ground"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.additive_ground", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.additive_ground"], ["", "def", "additive_ground", "(", "self", ",", "dobject", ":", "Dobject", ")", ":", "\n", "        ", "obj", ",", "(", "ldobj", ",", "rdobj", ")", "=", "dobject", "[", "'o'", "]", ",", "dobject", "[", "'a'", "]", "\n", "assert", "obj", "==", "self", ".", "__o__", "\n", "self", ".", "lquery", ".", "additive_ground", "(", "ldobj", ")", "\n", "self", ".", "rquery", ".", "additive_ground", "(", "rdobj", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.embedding_estimation": [[752, 762], ["foq_v2.Difference.lquery.embedding_estimation", "foq_v2.Difference.rquery.embedding_estimation", "estimator.get_difference_embedding"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.embedding_estimation", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.embedding_estimation", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.BoxEstimator.get_difference_embedding"], ["", "def", "embedding_estimation", "(", "self", ",", "\n", "estimator", ":", "AppFOQEstimator", ",", "\n", "batch_indices", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "lemb", "=", "self", ".", "lquery", ".", "embedding_estimation", "(", "estimator", ",", "\n", "batch_indices", ",", "\n", "**", "kwargs", ")", "\n", "remb", "=", "self", ".", "rquery", ".", "embedding_estimation", "(", "estimator", ",", "\n", "batch_indices", ",", "\n", "**", "kwargs", ")", "\n", "return", "estimator", ".", "get_difference_embedding", "(", "lemb", ",", "remb", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.deterministic_query": [[763, 767], ["foq_v2.Difference.lquery.deterministic_query", "foq_v2.Difference.rquery.deterministic_query"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.deterministic_query", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.deterministic_query"], ["", "def", "deterministic_query", "(", "self", ",", "projs", ")", ":", "\n", "        ", "l_result", "=", "self", ".", "lquery", ".", "deterministic_query", "(", "projs", ")", "\n", "r_result", "=", "self", ".", "rquery", ".", "deterministic_query", "(", "projs", ")", "\n", "return", "l_result", "-", "r_result", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.backward_sample": [[768, 812], ["collections.defaultdict", "collections.defaultdict", "copy.deepcopy", "lquery.backward_sample", "random.sample", "copy.deepcopy", "set", "rquery.backward_sample", "copy.deepcopy", "random.randrange", "lquery.backward_sample", "rquery.backward_sample", "random.randint", "len", "lquery.backward_sample", "rquery.backward_sample", "lquery.backward_sample", "rquery.backward_sample", "projs.keys"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.backward_sample", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.backward_sample", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.backward_sample", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.backward_sample", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.backward_sample", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.backward_sample", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.backward_sample", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.backward_sample"], ["", "def", "backward_sample", "(", "self", ",", "projs", ",", "rprojs", ",", "requirement", "=", "None", ",", "cumulative", "=", "False", ",", "\n", "meaningful_difference", ":", "bool", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "not", "requirement", ":", "\n", "            ", "requirement", "=", "defaultdict", "(", "set", ")", "\n", "requirement", "[", "'must include'", "]", "=", "{", "random", ".", "randrange", "(", "0", ",", "len", "(", "projs", ".", "keys", "(", ")", ")", ")", "}", "\n", "", "sub_obj_list", ",", "neg_obj_list", "=", "[", "]", ",", "[", "]", "\n", "lquery", ",", "rquery", "=", "self", ".", "sub_queries", "[", "0", "]", ",", "self", ".", "sub_queries", "[", "1", "]", "\n", "negative_requirement", "=", "defaultdict", "(", "set", ")", "\n", "negative_requirement", "[", "'must exclude'", "]", "=", "requirement", "[", "'must include'", "]", "\n", "if", "meaningful_difference", ":", "\n", "            ", "positive_choose_requirement", "=", "copy", ".", "deepcopy", "(", "requirement", ")", "\n", "pos_objs", "=", "lquery", ".", "backward_sample", "(", "projs", ",", "rprojs", ",", "positive_choose_requirement", ",", "\n", "cumulative", ",", "meaningful_difference", ",", "**", "kwargs", ")", "\n", "negative_requirement", "[", "'optional exclude'", "]", "=", "requirement", "[", "'optional include'", "]", "\n", "optional_exclude_set", "=", "pos_objs", "-", "requirement", "[", "'must include'", "]", "-", "requirement", "[", "'optional include'", "]", "\n", "exclude_element", "=", "random", ".", "sample", "(", "optional_exclude_set", ",", "1", ")", "\n", "specific_negative_requirement", "=", "copy", ".", "deepcopy", "(", "negative_requirement", ")", "\n", "specific_negative_requirement", "[", "'optional include'", "]", "=", "set", "(", "exclude_element", ")", "\n", "neg_objs", "=", "rquery", ".", "backward_sample", "(", "\n", "projs", ",", "rprojs", ",", "specific_negative_requirement", ",", "cumulative", ",", "meaningful_difference", ",", "**", "kwargs", ")", "\n", "pos_objs", "=", "pos_objs", "-", "neg_objs", "\n", "return", "pos_objs", "\n", "", "else", ":", "\n", "            ", "positive_requirement", "=", "copy", ".", "deepcopy", "(", "requirement", ")", "\n", "negative_requirement", "[", "'must include'", "]", "=", "requirement", "[", "'must exclude'", "]", "\n", "if", "requirement", "[", "'must include'", "]", ":", "\n", "                ", "lobjs", "=", "lquery", ".", "backward_sample", "(", "projs", ",", "rprojs", ",", "positive_requirement", ",", "\n", "cumulative", ",", "meaningful_difference", ",", "**", "kwargs", ")", "\n", "robjs", "=", "rquery", ".", "backward_sample", "(", "projs", ",", "rprojs", ",", "negative_requirement", ",", "\n", "cumulative", ",", "meaningful_difference", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "                ", "choose_lr", "=", "random", ".", "randint", "(", "0", ",", "1", ")", "\n", "if", "choose_lr", ":", "\n", "                    ", "lobjs", "=", "lquery", ".", "backward_sample", "(", "projs", ",", "rprojs", ",", "positive_requirement", ",", "\n", "cumulative", ",", "meaningful_difference", ",", "**", "kwargs", ")", "\n", "robjs", "=", "rquery", ".", "backward_sample", "(", "projs", ",", "rprojs", ",", "requirement", "=", "None", ",", "cumulative", "=", "cumulative", ",", "\n", "meaningful_difference", "=", "meaningful_difference", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "                    ", "lobjs", "=", "lquery", ".", "backward_sample", "(", "projs", ",", "rprojs", ",", "requirement", "=", "None", ",", "cumulative", "=", "cumulative", ",", "\n", "meaningful_difference", "=", "meaningful_difference", ",", "**", "kwargs", ")", "\n", "robjs", "=", "rquery", ".", "backward_sample", "(", "projs", ",", "rprojs", ",", "negative_requirement", ",", "cumulative", ",", "\n", "meaningful_difference", ",", "**", "kwargs", ")", "\n", "", "", "lobjs", "=", "lobjs", "-", "robjs", "\n", "return", "lobjs", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.random_query": [[813, 817], ["foq_v2.Difference.lquery.random_query", "foq_v2.Difference.rquery.random_query"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.random_query", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.random_query"], ["", "", "def", "random_query", "(", "self", ",", "projs", ",", "cumulative", "=", "False", ")", ":", "\n", "        ", "lobjs", "=", "self", ".", "lquery", ".", "random_query", "(", "projs", ",", "cumulative", ")", "\n", "robjs", "=", "self", ".", "rquery", ".", "random_query", "(", "projs", ",", "cumulative", ")", "\n", "return", "lobjs", "-", "robjs", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.lift": [[818, 821], ["foq_v2.Difference.lquery.lift", "foq_v2.Difference.rquery.lift"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.lift", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.lift"], ["", "def", "lift", "(", "self", ")", ":", "\n", "        ", "self", ".", "lquery", ".", "lift", "(", ")", "\n", "self", ".", "rquery", ".", "lift", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.check_ground": [[822, 827], ["foq_v2.Difference.lquery.check_ground", "foq_v2.Difference.rquery.check_ground"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.check_ground", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.check_ground"], ["", "def", "check_ground", "(", "self", ")", "->", "int", ":", "\n", "        ", "n1", "=", "self", ".", "lquery", ".", "check_ground", "(", ")", "\n", "n2", "=", "self", ".", "rquery", ".", "check_ground", "(", ")", "\n", "assert", "n1", "==", "n2", "\n", "return", "n1", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.to": [[828, 831], ["foq_v2.Difference.lquery.to", "foq_v2.Difference.rquery.to"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.to", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.to"], ["", "def", "to", "(", "self", ",", "device", ")", ":", "\n", "        ", "self", ".", "lquery", ".", "to", "(", "device", ")", "\n", "self", ".", "rquery", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.__init__": [[836, 838], ["foq_v2.MultipleSetQuery.__init__"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.BoxEstimator.__init__"], ["def", "__init__", "(", "self", ",", "*", "queries", ":", "List", "[", "FirstOrderSetQuery", "]", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "queries", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.sort_sub": [[839, 844], ["lquery.sort_sub", "sorted"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.sort_sub"], ["", "def", "sort_sub", "(", "self", ")", ":", "\n", "        ", "lquery", ",", "rqueries", "=", "self", ".", "sub_queries", "[", "0", "]", ",", "self", ".", "sub_queries", "[", "1", ":", "]", "\n", "lquery", ".", "sort_sub", "(", ")", "\n", "rqueries", "=", "sorted", "(", "rqueries", ",", "key", "=", "lambda", "q", ":", "q", ".", "formula", ")", "\n", "self", ".", "sub_queries", "=", "[", "lquery", "]", "+", "rqueries", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.formula": [[845, 851], ["foq_v2.Multiple_Difference.sort_sub"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.sort_sub"], ["", "@", "property", "\n", "def", "formula", "(", "self", ")", ":", "\n", "        ", "self", ".", "sort_sub", "(", ")", "\n", "return", "\"({},{})\"", ".", "format", "(", "\n", "self", ".", "__o__", ",", "\n", "\",\"", ".", "join", "(", "subq", ".", "formula", "for", "subq", "in", "self", ".", "sub_queries", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.dumps": [[853, 863], ["foq_v2.Multiple_Difference.sort_sub", "json.dumps", "json.loads"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.sort_sub", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.dumps"], ["", "@", "property", "\n", "def", "dumps", "(", "self", ")", ":", "\n", "        ", "self", ".", "sort_sub", "(", ")", "\n", "dobject", "=", "{", "\n", "'o'", ":", "self", ".", "__o__", ",", "\n", "'a'", ":", "[", "\n", "json", ".", "loads", "(", "subq", ".", "dumps", ")", "for", "subq", "in", "self", ".", "sub_queries", "\n", "]", "\n", "}", "\n", "return", "json", ".", "dumps", "(", "dobject", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.embedding_estimation": [[864, 871], ["foq_v2.MultipleSetQuery.embedding_estimation", "estimator.get_multiple_difference_embedding"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.embedding_estimation", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.BoxEstimator.get_multiple_difference_embedding"], ["", "def", "embedding_estimation", "(", "self", ",", "\n", "estimator", ":", "AppFOQEstimator", ",", "\n", "batch_indices", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "embed_list", "=", "super", "(", ")", ".", "embedding_estimation", "(", "estimator", ",", "\n", "batch_indices", ",", "\n", "**", "kwargs", ")", "\n", "return", "estimator", ".", "get_multiple_difference_embedding", "(", "embed_list", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.deterministic_query": [[872, 877], ["set.union", "lquery.deterministic_query", "sub_query.deterministic_query"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.deterministic_query", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.deterministic_query"], ["", "def", "deterministic_query", "(", "self", ",", "projs", ")", ":", "\n", "        ", "lquery", ",", "rqueries", "=", "self", ".", "sub_queries", "[", "0", "]", ",", "self", ".", "sub_queries", "[", "1", ":", "]", "\n", "ans_excluded", "=", "set", ".", "union", "(", "*", "[", "sub_query", ".", "deterministic_query", "(", "projs", ")", "for", "sub_query", "in", "rqueries", "]", ")", "\n", "ans_origin", "=", "lquery", ".", "deterministic_query", "(", "projs", ")", "\n", "return", "ans_origin", "-", "ans_excluded", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.backward_sample": [[878, 942], ["copy.deepcopy", "collections.defaultdict", "collections.defaultdict", "lquery.backward_sample", "min", "random.sample", "list", "random.sample", "range", "random.randrange", "len", "len", "list", "len", "lquery.backward_sample", "random.randint", "len", "range", "copy.deepcopy", "rqueries[].backward_sample", "rqueries[].backward_sample", "rquery.backward_sample", "lquery.backward_sample", "random.randrange", "lquery.backward_sample", "range", "projs.keys", "len", "rquery.backward_sample", "len", "len", "rqueries[].backward_sample", "rqueries[].backward_sample"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.backward_sample", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.backward_sample", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.backward_sample", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.backward_sample", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.backward_sample", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.backward_sample", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.backward_sample", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.backward_sample", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.backward_sample", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.backward_sample"], ["", "def", "backward_sample", "(", "self", ",", "projs", ",", "rprojs", ",", "requirement", "=", "None", ",", "cumulative", "=", "False", ",", "\n", "meaningful_difference", ":", "bool", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "sub_obj_list", ",", "neg_obj_list", "=", "[", "]", ",", "[", "]", "\n", "lquery", ",", "rqueries", "=", "self", ".", "sub_queries", "[", "0", "]", ",", "self", ".", "sub_queries", "[", "1", ":", "]", "\n", "if", "not", "requirement", ":", "\n", "            ", "requirement", "=", "defaultdict", "(", "set", ")", "\n", "requirement", "[", "'must include'", "]", "=", "{", "random", ".", "randrange", "(", "0", ",", "len", "(", "projs", ".", "keys", "(", ")", ")", ")", "}", "\n", "", "positive_choose_requirement", "=", "copy", ".", "deepcopy", "(", "requirement", ")", "\n", "negative_requirement", "=", "defaultdict", "(", "set", ")", "\n", "negative_requirement", "[", "'must exclude'", "]", "=", "requirement", "[", "'must include'", "]", "\n", "if", "meaningful_difference", ":", "\n", "            ", "negative_requirement", "[", "'optional exclude'", "]", "=", "requirement", "[", "'optional include'", "]", "\n", "pos_objs", "=", "lquery", ".", "backward_sample", "(", "projs", ",", "rprojs", ",", "positive_choose_requirement", ",", "\n", "cumulative", ",", "meaningful_difference", ",", "**", "kwargs", ")", "\n", "\n", "optional_exclude_set", "=", "pos_objs", "-", "requirement", "[", "'must include'", "]", "-", "requirement", "[", "'optional include'", "]", "\n", "max_exclude_num", "=", "min", "(", "len", "(", "optional_exclude_set", ")", ",", "len", "(", "rqueries", ")", ")", "\n", "negative_choose_formulas", "=", "random", ".", "sample", "(", "list", "(", "range", "(", "len", "(", "rqueries", ")", ")", ")", ",", "max_exclude_num", ")", "\n", "optional_exclude_list", "=", "list", "(", "optional_exclude_set", ")", "\n", "exclude_element_list", "=", "random", ".", "sample", "(", "optional_exclude_list", ",", "max_exclude_num", ")", "\n", "exclude_ordinal", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "rqueries", ")", ")", ":", "\n", "                ", "if", "i", "in", "negative_choose_formulas", ":", "\n", "                    ", "specific_negative_requirement", "=", "copy", ".", "deepcopy", "(", "negative_requirement", ")", "\n", "specific_negative_requirement", "[", "'optional include'", "]", "=", "{", "exclude_element_list", "[", "exclude_ordinal", "]", "}", "\n", "exclude_ordinal", "+=", "1", "\n", "neg_objs", "=", "rqueries", "[", "i", "]", ".", "backward_sample", "(", "\n", "projs", ",", "rprojs", ",", "specific_negative_requirement", ",", "cumulative", ",", "meaningful_difference", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "                    ", "neg_objs", "=", "rqueries", "[", "i", "]", ".", "backward_sample", "(", "projs", ",", "rprojs", ",", "negative_requirement", ",", "cumulative", ",", "\n", "meaningful_difference", ",", "**", "kwargs", ")", "\n", "", "pos_objs", "=", "pos_objs", "-", "neg_objs", "\n", "", "return", "pos_objs", "\n", "", "else", ":", "\n", "            ", "negative_requirement", "[", "'must include'", "]", "=", "requirement", "[", "'must exclude'", "]", "\n", "if", "requirement", "[", "'must include'", "]", ":", "\n", "                ", "lobjs", "=", "lquery", ".", "backward_sample", "(", "projs", ",", "rprojs", ",", "positive_choose_requirement", ",", "\n", "cumulative", ",", "meaningful_difference", ",", "**", "kwargs", ")", "\n", "for", "rquery", "in", "rqueries", ":", "\n", "                    ", "robjs", "=", "rquery", ".", "backward_sample", "(", "projs", ",", "rprojs", ",", "negative_requirement", ",", "\n", "cumulative", ",", "meaningful_difference", ",", "**", "kwargs", ")", "\n", "lobjs", "=", "lobjs", "-", "robjs", "\n", "", "", "else", ":", "\n", "                ", "choose_lr", "=", "random", ".", "randint", "(", "0", ",", "1", ")", "\n", "if", "choose_lr", ":", "\n", "                    ", "lobjs", "=", "lquery", ".", "backward_sample", "(", "projs", ",", "rprojs", ",", "positive_choose_requirement", ",", "\n", "cumulative", ",", "meaningful_difference", ",", "**", "kwargs", ")", "\n", "for", "rquery", "in", "rqueries", ":", "\n", "                        ", "robjs", "=", "rquery", ".", "backward_sample", "(", "projs", ",", "rprojs", ",", "requirement", "=", "None", ",", "cumulative", "=", "cumulative", ",", "\n", "meaningful_difference", "=", "meaningful_difference", ",", "**", "kwargs", ")", "\n", "lobjs", "=", "lobjs", "-", "robjs", "\n", "", "", "else", ":", "\n", "                    ", "choose_formula", "=", "random", ".", "randrange", "(", "0", ",", "len", "(", "rqueries", ")", ")", "\n", "lobjs", "=", "lquery", ".", "backward_sample", "(", "projs", ",", "rprojs", ",", "requirement", "=", "None", ",", "cumulative", "=", "cumulative", ",", "\n", "meaningful_difference", "=", "meaningful_difference", ",", "**", "kwargs", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "rqueries", ")", ")", ":", "\n", "                        ", "if", "i", "==", "choose_formula", ":", "\n", "                            ", "robjs", "=", "rqueries", "[", "i", "]", ".", "backward_sample", "(", "projs", ",", "rprojs", ",", "negative_requirement", ",", "cumulative", ",", "\n", "meaningful_difference", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "                            ", "robjs", "=", "rqueries", "[", "i", "]", ".", "backward_sample", "(", "projs", ",", "rprojs", ",", "requirement", "=", "None", ",", "cumulative", "=", "cumulative", ",", "\n", "meaningful_difference", "=", "meaningful_difference", ",", "**", "kwargs", ")", "\n", "", "lobjs", "=", "lobjs", "-", "robjs", "\n", "", "", "", "return", "lobjs", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.random_query": [[943, 951], ["lquery.random_query", "query.random_query", "robj_list.append", "set.union"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.random_query", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Multiple_Difference.random_query"], ["", "", "def", "random_query", "(", "self", ",", "projs", ",", "cumulative", "=", "False", ")", ":", "\n", "        ", "robj_list", "=", "[", "]", "\n", "lquery", ",", "rqueries", "=", "self", ".", "sub_queries", "[", "0", "]", ",", "self", ".", "sub_queries", "[", "1", ":", "]", "\n", "lobjs", "=", "lquery", ".", "random_query", "(", "projs", ",", "cumulative", "=", "cumulative", ")", "\n", "for", "query", "in", "rqueries", ":", "\n", "            ", "robjs", "=", "query", ".", "random_query", "(", "projs", ",", "cumulative", "=", "cumulative", ")", "\n", "robj_list", ".", "append", "(", "robjs", ")", "\n", "", "return", "lobjs", "-", "set", ".", "union", "(", "*", "robj_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.embedding_estimation_with_optimization": [[159, 172], ["range", "fosq._embedding_optimization", "optimizer.zero_grad", "loss.backward", "optimizer.step", "getattr"], "function", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Entity._embedding_optimization"], ["", "", "def", "embedding_estimation_with_optimization", "(", "fosq", ":", "FirstOrderSetQuery", ",", "\n", "estimator", ",", "\n", "optimizer_name", "=", "\"SGD\"", ",", "\n", "num_steps", "=", "10", ",", "\n", "optimizer_args", "=", "{", "\"lr\"", ":", "1", "}", ")", ":", "\n", "    ", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "        ", "loss", ",", "parameters", "=", "fosq", ".", "_embedding_optimization", "(", "estimator", ")", "\n", "optimizer", "=", "getattr", "(", "torch", ".", "optim", ",", "optimizer_name", ")", "(", "\n", "parameters", ",", "**", "optimizer_args", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "", "return", "fosq", ".", "latent_embedding", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.parse_formula": [[966, 1028], ["todo_ranges.append", "range", "len", "foq_v2.parse_formula.identify_range"], "function", ["None"], ["def", "parse_formula", "(", "fosq_formula", ":", "str", ")", "->", "FirstOrderSetQuery", ":", "\n", "    ", "\"\"\" A new function to parse first-order set query string\n    \"\"\"", "\n", "cached_objects", "=", "{", "}", "\n", "cached_subranges", "=", "{", "}", "\n", "todo_ranges", "=", "[", "]", "\n", "\n", "def", "identify_range", "(", "i", ",", "j", ")", ":", "\n", "        ", "\"\"\" i, and j is the index of ( and ) respectively\n        identify the information contained in the range\n        return\n            ops: operational string\n            sub_range_list: a list of sub ranges\n        \"\"\"", "\n", "ops", "=", "fosq_formula", "[", "i", "+", "1", "]", "\n", "level_stack", "=", "[", "]", "\n", "sub_range_list", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "i", "+", "1", ",", "j", ")", ":", "\n", "            ", "if", "fosq_formula", "[", "k", "]", "==", "'('", ":", "\n", "                ", "level_stack", ".", "append", "(", "k", ")", "\n", "", "elif", "fosq_formula", "[", "k", "]", "==", "')'", ":", "\n", "                ", "begin", "=", "level_stack", ".", "pop", "(", "-", "1", ")", "\n", "if", "len", "(", "level_stack", ")", "==", "0", ":", "\n", "                    ", "sub_range_list", ".", "append", "(", "(", "begin", ",", "k", ")", ")", "\n", "", "", "", "if", "ops", "==", "'e'", ":", "\n", "            ", "assert", "len", "(", "sub_range_list", ")", "==", "0", "\n", "", "elif", "ops", "in", "'pn'", ":", "\n", "            ", "assert", "len", "(", "sub_range_list", ")", "==", "1", "\n", "", "elif", "ops", "==", "'d'", ":", "\n", "            ", "assert", "len", "(", "sub_range_list", ")", "==", "2", "\n", "", "elif", "ops", "in", "'uiIUD'", ":", "\n", "            ", "assert", "len", "(", "sub_range_list", ")", ">", "1", "\n", "", "elif", "ops", "in", "'()'", ":", "\n", "            ", "return", "identify_range", "(", "i", "+", "1", ",", "j", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "f\"Ops {ops} is not defined\"", ")", "\n", "", "return", "ops", ",", "sub_range_list", "\n", "\n", "", "_b", "=", "0", "\n", "_e", "=", "len", "(", "fosq_formula", ")", "-", "1", "\n", "todo_ranges", ".", "append", "(", "(", "_b", ",", "_e", ")", ")", "\n", "while", "(", "_b", ",", "_e", ")", "not", "in", "cached_objects", ":", "\n", "        ", "i", ",", "j", "=", "todo_ranges", "[", "-", "1", "]", "\n", "\n", "if", "(", "i", ",", "j", ")", "in", "cached_subranges", ":", "\n", "            ", "ops", ",", "sub_range_list", "=", "cached_subranges", "[", "(", "i", ",", "j", ")", "]", "\n", "", "else", ":", "\n", "            ", "ops", ",", "sub_range_list", "=", "identify_range", "(", "i", ",", "j", ")", "\n", "cached_subranges", "[", "(", "i", ",", "j", ")", "]", "=", "(", "ops", ",", "sub_range_list", ")", "\n", "\n", "", "valid_sub_ranges", "=", "True", "\n", "for", "_i", ",", "_j", "in", "sub_range_list", ":", "\n", "            ", "if", "not", "(", "_i", ",", "_j", ")", "in", "cached_objects", ":", "\n", "                ", "todo_ranges", ".", "append", "(", "(", "_i", ",", "_j", ")", ")", "\n", "valid_sub_ranges", "=", "False", "\n", "\n", "", "", "if", "valid_sub_ranges", "is", "True", ":", "\n", "            ", "sub_objects", "=", "[", "cached_objects", "[", "r", "]", "for", "r", "in", "sub_range_list", "]", "\n", "obj", "=", "ops_dict", "[", "ops", "]", "(", "*", "sub_objects", ")", "\n", "todo_ranges", ".", "pop", "(", "-", "1", ")", "\n", "cached_objects", "[", "(", "i", ",", "j", ")", "]", "=", "obj", "\n", "", "", "return", "cached_objects", "[", "_b", ",", "_e", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.binary_formula_iterator": [[1038, 1081], ["foq_v2.binary_formula_iterator", "range", "foq_v2.binary_formula_iterator", "foq_v2.binary_formula_iterator", "itertools.product"], "function", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.binary_formula_iterator", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.binary_formula_iterator", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.binary_formula_iterator"], ["def", "binary_formula_iterator", "(", "depth", "=", "5", ",", "\n", "num_anchor_nodes", "=", "4", ",", "\n", "op_candidates", "=", "None", ",", "negation_length", "=", "True", ")", ":", "\n", "# decide the ops, we didn't consider the negation as the top-level operator", "\n", "    ", "if", "op_candidates", "is", "None", ":", "\n", "        ", "op_candidates", "=", "\"epiu\"", "\n", "\n", "# when the depth is 1, we have only \"e\" to choose", "\n", "", "if", "depth", "==", "1", ":", "\n", "        ", "op_candidates", "=", "\"e\"", "\n", "\n", "", "for", "op", "in", "op_candidates", ":", "\n", "        ", "if", "(", "op", "==", "'e'", "and", "num_anchor_nodes", "==", "1", ")", ":", "\n", "            ", "yield", "\"(p,(e))\"", "\n", "", "elif", "op", "in", "'np'", ":", "\n", "            ", "if", "negation_length", ":", "\n", "                ", "arg_candidate_iterator", "=", "binary_formula_iterator", "(", "\n", "depth", "=", "depth", "-", "1", ",", "\n", "num_anchor_nodes", "=", "num_anchor_nodes", ",", "\n", "op_candidates", "=", "op_candidates_dict", "[", "op", "]", ",", "negation_length", "=", "negation_length", ")", "\n", "for", "f", "in", "arg_candidate_iterator", ":", "\n", "                    ", "yield", "f\"({op},{f})\"", "\n", "", "", "else", ":", "\n", "                ", "pass", "\n", "", "", "elif", "op", "in", "'iu'", ":", "\n", "            ", "for", "arg1_num_anchor_nodes", "in", "range", "(", "1", ",", "num_anchor_nodes", ")", ":", "\n", "                ", "arg2_num_anchor_nodes", "=", "num_anchor_nodes", "-", "arg1_num_anchor_nodes", "\n", "arg1_candidate_iterator", "=", "binary_formula_iterator", "(", "\n", "depth", "=", "depth", ",", "\n", "num_anchor_nodes", "=", "arg1_num_anchor_nodes", ",", "\n", "op_candidates", "=", "op_candidates_dict", "[", "op", "]", "[", "1", "]", ",", "\n", "negation_length", "=", "negation_length", "\n", ")", "\n", "arg2_candidate_iterator", "=", "binary_formula_iterator", "(", "\n", "depth", "=", "depth", ",", "\n", "num_anchor_nodes", "=", "arg2_num_anchor_nodes", ",", "\n", "op_candidates", "=", "op_candidates_dict", "[", "op", "]", "[", "2", "]", ",", "\n", "negation_length", "=", "negation_length", "\n", ")", "\n", "for", "f1", ",", "f2", "in", "product", "(", "arg1_candidate_iterator", ",", "\n", "arg2_candidate_iterator", ")", ":", "\n", "                    ", "yield", "f\"({op},{f1},{f2})\"", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.copy_query": [[1083, 1110], ["foq_v2.Entity", "foq_v2.Projection", "foq_v2.copy_query", "foq_v2.Negation", "foq_v2.copy_query", "foq_v2.Difference", "foq_v2.copy_query", "foq_v2.copy_query", "foq_v2.copy_query"], "function", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.copy_query", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.copy_query", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.copy_query", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.copy_query", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.copy_query"], ["", "", "", "", "", "def", "copy_query", "(", "q", ":", "FirstOrderSetQuery", ",", "deep", "=", "False", ")", "->", "FirstOrderSetQuery", ":", "\n", "    ", "op", "=", "q", ".", "__o__", "\n", "if", "op", "==", "'e'", ":", "\n", "        ", "_q", "=", "Entity", "(", ")", "\n", "_q", ".", "entities", "=", "q", ".", "entities", "\n", "return", "_q", "\n", "", "elif", "op", "==", "'p'", ":", "\n", "        ", "_q", "=", "Projection", "(", ")", "\n", "_q", ".", "relations", "=", "q", ".", "relations", "\n", "if", "deep", ":", "\n", "            ", "_q", ".", "query", "=", "copy_query", "(", "q", ".", "query", ",", "deep", ")", "\n", "", "return", "_q", "\n", "", "elif", "op", "==", "'n'", ":", "\n", "        ", "_q", "=", "Negation", "(", ")", "\n", "if", "deep", ":", "\n", "            ", "_q", ".", "query", "=", "copy_query", "(", "q", ".", "query", ",", "deep", ")", "\n", "", "return", "_q", "\n", "", "elif", "op", "in", "'uiD'", ":", "\n", "        ", "_q", "=", "ops_dict", "[", "op", "]", "(", ")", "\n", "if", "deep", ":", "\n", "            ", "_q", ".", "sub_queries", "=", "[", "copy_query", "(", "sq", ",", "deep", ")", "for", "sq", "in", "q", ".", "sub_queries", "]", "\n", "", "return", "_q", "\n", "", "elif", "op", "==", "'d'", ":", "\n", "        ", "_q", "=", "Difference", "(", "lq", "=", "copy_query", "(", "q", ".", "lquery", ",", "deep", ")", ",", "rq", "=", "copy_query", "(", "q", ".", "rquery", ",", "deep", ")", ")", "\n", "return", "_q", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.projection_sink": [[1112, 1135], ["foq_v2.copy_query", "foq_v2.projection_sink", "foq_v2.copy_query", "len", "_upper_projection_stack.pop", "foq_v2.projection_sink", "foq_v2.projection_sink"], "function", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.copy_query", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.projection_sink", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.copy_query", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.projection_sink", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.projection_sink"], ["", "", "def", "projection_sink", "(", "fosq", ":", "FirstOrderSetQuery", ",", "\n", "upper_projection_stack", "=", "[", "]", ")", "->", "FirstOrderSetQuery", ":", "\n", "    ", "\"\"\"Move the projections at the bottom of the tree, i.e.,\n    we only allow p -> p/e\n    \"\"\"", "\n", "_upper_projection_stack", "=", "[", "copy_query", "(", "p", ")", "\n", "for", "p", "in", "upper_projection_stack", "]", "\n", "if", "fosq", ".", "__o__", "==", "'p'", ":", "\n", "        ", "_upper_projection_stack", "+=", "[", "copy_query", "(", "fosq", ")", "]", "\n", "return", "projection_sink", "(", "fosq", ".", "query", ",", "_upper_projection_stack", ")", "\n", "", "elif", "fosq", ".", "__o__", "==", "'e'", ":", "\n", "        ", "while", "len", "(", "_upper_projection_stack", ")", ">", "0", ":", "\n", "            ", "p", "=", "_upper_projection_stack", ".", "pop", "(", "-", "1", ")", "\n", "p", ".", "query", "=", "fosq", "\n", "fosq", "=", "p", "\n", "", "return", "fosq", "\n", "", "elif", "fosq", ".", "__o__", "==", "'n'", ":", "\n", "        ", "fosq", ".", "query", "=", "projection_sink", "(", "fosq", ".", "query", ",", "_upper_projection_stack", ")", "\n", "return", "fosq", "\n", "", "elif", "fosq", ".", "__o__", "in", "'iu'", ":", "# the inter section and union", "\n", "        ", "fosq", ".", "sub_queries", "=", "[", "projection_sink", "(", "q", ",", "_upper_projection_stack", ")", "\n", "for", "q", "in", "fosq", ".", "sub_queries", "]", "\n", "return", "fosq", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.negation_sink": [[1137, 1168], ["foq_v2.Union", "foq_v2.Intersection", "foq_v2.negation_sink", "foq_v2.Negation", "foq_v2.Negation", "foq_v2.negation_sink", "foq_v2.negation_sink"], "function", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.negation_sink", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.negation_sink", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.negation_sink"], ["", "", "def", "negation_sink", "(", "fosq", ":", "FirstOrderSetQuery", ")", "->", "FirstOrderSetQuery", ":", "\n", "    ", "\"\"\" Move the negation down of itersection and union. (negation sink)\n        n -> i -> fosq should be converted to u -> n -> fosq\n        n -> u -> fosq should be converted to i -> n -> fosq\n    \"\"\"", "\n", "if", "fosq", ".", "__o__", "==", "'e'", ":", "\n", "        ", "return", "fosq", "\n", "", "elif", "fosq", ".", "__o__", "==", "'p'", ":", "\n", "        ", "return", "fosq", "\n", "", "elif", "fosq", ".", "__o__", "==", "'n'", ":", "\n", "        ", "sub_q", "=", "fosq", ".", "query", "\n", "# de Morgan rule 1", "\n", "if", "sub_q", ".", "__o__", "==", "'i'", ":", "\n", "            ", "sub_sub_qs", "=", "sub_q", ".", "sub_queries", "\n", "_fosq", "=", "Union", "(", "\n", "*", "[", "Negation", "(", "q", "=", "negation_sink", "(", "q", ")", ")", "for", "q", "in", "sub_sub_qs", "]", "\n", ")", "\n", "", "elif", "sub_q", ".", "__o__", "==", "'u'", ":", "\n", "            ", "sub_sub_qs", "=", "sub_q", ".", "sub_queries", "\n", "_fosq", "=", "Intersection", "(", "\n", "*", "[", "Negation", "(", "q", "=", "negation_sink", "(", "q", ")", ")", "for", "q", "in", "sub_sub_qs", "]", "\n", ")", "\n", "", "else", ":", "\n", "            ", "_fosq", "=", "fosq", "\n", "", "return", "_fosq", "\n", "\n", "", "elif", "fosq", ".", "__o__", "in", "'iu'", ":", "\n", "        ", "fosq", ".", "sub_queries", "=", "[", "negation_sink", "(", "q", ")", "for", "q", "in", "fosq", ".", "sub_queries", "]", "\n", "return", "fosq", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.concate_n_chains": [[1170, 1187], ["foq_v2.concate_n_chains", "foq_v2.concate_n_chains", "foq_v2.concate_n_chains"], "function", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.concate_n_chains", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.concate_n_chains", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.concate_n_chains"], ["", "", "def", "concate_n_chains", "(", "query", ":", "FirstOrderSetQuery", ")", "->", "FirstOrderSetQuery", ":", "\n", "    ", "if", "query", ".", "__o__", "==", "'n'", ":", "\n", "        ", "sub_query", "=", "query", ".", "query", "\n", "if", "sub_query", ".", "__o__", "==", "'n'", ":", "\n", "            ", "query", "=", "sub_query", ".", "query", "\n", "", "query", ".", "query", "=", "concate_n_chains", "(", "query", ".", "query", ")", "\n", "return", "query", "\n", "", "elif", "query", ".", "__o__", "in", "'ui'", ":", "\n", "        ", "query", ".", "sub_queries", "=", "[", "concate_n_chains", "(", "q", ")", "for", "q", "in", "query", ".", "sub_queries", "]", "\n", "return", "query", "\n", "", "elif", "query", ".", "__o__", "==", "'e'", ":", "\n", "        ", "return", "query", "\n", "", "elif", "query", ".", "__o__", "==", "'p'", ":", "\n", "        ", "query", ".", "query", "=", "concate_n_chains", "(", "query", ".", "query", ")", "\n", "return", "query", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.DeMorgan_replacement": [[1189, 1210], ["foq_v2.Intersection", "foq_v2.Negation", "foq_v2.DeMorgan_replacement", "foq_v2.Negation", "foq_v2.DeMorgan_replacement", "foq_v2.DeMorgan_replacement"], "function", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.DeMorgan_replacement", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.DeMorgan_replacement", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.DeMorgan_replacement"], ["", "", "def", "DeMorgan_replacement", "(", "query", ")", ":", "\n", "    ", "\"\"\"\n    Input query system epiun\n    Replace the u by n-i-n\n    \"\"\"", "\n", "if", "query", ".", "__o__", "==", "'u'", ":", "\n", "        ", "sub_queries", "=", "[", "DeMorgan_replacement", "(", "q", ")", "for", "q", "in", "query", ".", "sub_queries", "]", "\n", "negated_sub_queries", "=", "[", "Negation", "(", "q", ")", "for", "q", "in", "sub_queries", "]", "\n", "inter", "=", "Intersection", "(", "*", "negated_sub_queries", ")", "\n", "out", "=", "Negation", "(", "inter", ")", "\n", "return", "out", "\n", "", "elif", "query", ".", "__o__", "==", "'i'", ":", "\n", "        ", "sub_queries", "=", "[", "DeMorgan_replacement", "(", "q", ")", "for", "q", "in", "query", ".", "sub_queries", "]", "\n", "query", ".", "sub_queries", "=", "sub_queries", "\n", "return", "query", "\n", "", "elif", "query", ".", "__o__", "==", "'e'", ":", "\n", "        ", "return", "query", "\n", "", "else", ":", "# n and p case", "\n", "        ", "subq", "=", "query", ".", "query", "\n", "query", ".", "query", "=", "DeMorgan_replacement", "(", "subq", ")", "\n", "return", "query", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.intersection_bubble": [[1212, 1214], ["None"], "function", ["None"], ["", "", "def", "intersection_bubble", "(", "fosq", ":", "FirstOrderSetQuery", ")", "->", "FirstOrderSetQuery", ":", "\n", "    ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.union_bubble": [[1216, 1267], ["foq_v2.union_bubble", "foq_v2.Union", "foq_v2.union_bubble", "foq_v2.Union", "foq_v2.union_bubble", "foq_v2.copy_query", "sub_queries.append", "foq_v2.union_bubble", "len", "foq_v2.Intersection", "other_subq.append", "foq_v2.union_bubble", "foq_v2.Intersection", "foq_v2.copy_query"], "function", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.union_bubble", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.union_bubble", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.union_bubble", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.copy_query", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.union_bubble", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.union_bubble", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.copy_query"], ["", "def", "union_bubble", "(", "fosq", ":", "FirstOrderSetQuery", ")", "->", "FirstOrderSetQuery", ":", "\n", "    ", "\"\"\" Move the union at the top of the tree\n    For any i -> u pairs, we will make it as a u -> i pair\n    If we use projection sink, de Morgan rule and union bubble, then we get dnf\n    We handle the situation where (A or B) and (C), it should be (A and C) or (B and C)\n    \"\"\"", "\n", "if", "fosq", ".", "__o__", "==", "'e'", ":", "\n", "        ", "return", "fosq", "\n", "", "elif", "fosq", ".", "__o__", "==", "'n'", ":", "\n", "        ", "fosq", ".", "query", "=", "union_bubble", "(", "fosq", ".", "query", ")", "\n", "return", "fosq", "\n", "", "elif", "fosq", ".", "__o__", "==", "'p'", ":", "\n", "        ", "sub_query", "=", "fosq", ".", "query", "\n", "if", "sub_query", ".", "__o__", "==", "'u'", ":", "\n", "# the projection should be applid to those queries", "\n", "            ", "sub_queries", "=", "[", "]", "\n", "for", "ssq", "in", "sub_query", ".", "sub_queries", ":", "\n", "                ", "p", "=", "copy_query", "(", "fosq", ")", "\n", "p", ".", "query", "=", "ssq", "\n", "sub_queries", ".", "append", "(", "p", ")", "\n", "", "return", "Union", "(", "*", "sub_queries", ")", "\n", "", "else", ":", "\n", "            ", "fosq", ".", "query", "=", "union_bubble", "(", "sub_query", ")", "\n", "return", "fosq", "\n", "", "", "elif", "fosq", ".", "__o__", "==", "'i'", ":", "\n", "        ", "fosq", ".", "sub_queries", "=", "[", "union_bubble", "(", "q", ")", "for", "q", "in", "fosq", ".", "sub_queries", "]", "\n", "\n", "union_subq", "=", "None", "\n", "other_subq", "=", "[", "]", "\n", "for", "q", "in", "fosq", ".", "sub_queries", ":", "\n", "            ", "if", "q", ".", "__o__", "==", "'u'", "and", "union_subq", "is", "None", ":", "\n", "                ", "union_subq", "=", "q", "\n", "", "else", ":", "\n", "                ", "other_subq", ".", "append", "(", "q", ")", "\n", "", "", "if", "union_subq", "is", "None", ":", "\n", "            ", "return", "fosq", "\n", "\n", "", "if", "len", "(", "other_subq", ")", "==", "1", ":", "\n", "            ", "C", "=", "other_subq", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "C", "=", "Intersection", "(", "*", "other_subq", ")", "\n", "", "_fosq", "=", "Union", "(", "\n", "*", "[", "Intersection", "(", "q", ",", "copy_query", "(", "C", ",", "deep", "=", "True", ")", ")", "\n", "for", "q", "in", "union_subq", ".", "sub_queries", "]", "\n", ")", "\n", "return", "union_bubble", "(", "_fosq", ")", "\n", "", "elif", "fosq", ".", "__o__", "==", "'u'", ":", "\n", "        ", "fosq", ".", "sub_queries", "=", "[", "union_bubble", "(", "q", ")", "for", "q", "in", "fosq", ".", "sub_queries", "]", "\n", "return", "fosq", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.concate_iu_chains": [[1269, 1300], ["foq_v2.concate_iu_chains", "foq_v2.concate_iu_chains", "foq_v2.concate_iu_chains", "foq_v2.concate_iu_chains", "len", "foq_v2.concate_iu_chains", "same_root_queries.append", "other_queries.append", "foq_v2.concate_iu_chains"], "function", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.concate_iu_chains", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.concate_iu_chains", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.concate_iu_chains", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.concate_iu_chains", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.concate_iu_chains", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.concate_iu_chains"], ["", "", "def", "concate_iu_chains", "(", "fosq", ":", "FirstOrderSetQuery", ")", "->", "FirstOrderSetQuery", ":", "\n", "    ", "if", "fosq", ".", "__o__", "in", "'pn'", ":", "\n", "        ", "fosq", ".", "query", "=", "concate_iu_chains", "(", "fosq", ".", "query", ")", "\n", "return", "fosq", "\n", "", "if", "fosq", ".", "__o__", "==", "'e'", ":", "\n", "        ", "return", "fosq", "\n", "", "if", "fosq", ".", "__o__", "in", "'iu'", ":", "\n", "        ", "op", "=", "fosq", ".", "__o__", "\n", "same_root_queries", "=", "[", "]", "\n", "other_queries", "=", "[", "]", "\n", "for", "q", "in", "fosq", ".", "sub_queries", ":", "\n", "            ", "if", "q", ".", "__o__", "==", "op", ":", "\n", "                ", "same_root_queries", ".", "append", "(", "q", ")", "\n", "", "else", ":", "\n", "                ", "other_queries", ".", "append", "(", "q", ")", "\n", "", "", "if", "len", "(", "same_root_queries", ")", "==", "0", ":", "\n", "            ", "fosq", ".", "sub_queries", "=", "[", "concate_iu_chains", "(", "q", ")", "for", "q", "in", "fosq", ".", "sub_queries", "]", "\n", "return", "fosq", "\n", "", "sub_queries", "=", "other_queries", "\n", "for", "q", "in", "same_root_queries", ":", "\n", "            ", "sub_queries", "+=", "q", ".", "sub_queries", "\n", "", "_fosq", "=", "ops_dict", "[", "op", "]", "(", "*", "sub_queries", ")", "\n", "assert", "_fosq", ".", "formula", "!=", "fosq", ".", "formula", "\n", "return", "concate_iu_chains", "(", "_fosq", ")", "\n", "", "if", "fosq", ".", "__o__", "==", "'d'", ":", "\n", "        ", "fosq", ".", "lquery", "=", "concate_iu_chains", "(", "fosq", ".", "lquery", ")", "\n", "fosq", ".", "rquery", "=", "concate_iu_chains", "(", "fosq", ".", "rquery", ")", "\n", "return", "fosq", "\n", "", "if", "fosq", ".", "__o__", "in", "'DIU'", ":", "\n", "        ", "fosq", ".", "sub_queries", "=", "[", "concate_iu_chains", "(", "q", ")", "for", "q", "in", "fosq", ".", "sub_queries", "]", "\n", "return", "fosq", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.to_D": [[1302, 1333], ["foq_v2.Multiple_Difference", "len", "len", "foq_v2.Intersection", "negated.append", "not_negated.append", "foq_v2.to_D", "foq_v2.to_D", "foq_v2.to_D", "foq_v2.to_D"], "function", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.to_D", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.to_D", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.to_D", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.to_D"], ["", "", "def", "to_D", "(", "fosq", ")", ":", "\n", "    ", "if", "fosq", ".", "__o__", "==", "\"i\"", ":", "\n", "        ", "negated", "=", "[", "]", "\n", "not_negated", "=", "[", "]", "\n", "for", "subq", "in", "fosq", ".", "sub_queries", ":", "\n", "            ", "if", "subq", ".", "__o__", "==", "'n'", ":", "\n", "                ", "negated", ".", "append", "(", "to_D", "(", "subq", ")", ")", "\n", "", "else", ":", "\n", "                ", "not_negated", ".", "append", "(", "to_D", "(", "subq", ")", ")", "\n", "", "", "if", "len", "(", "negated", ")", "==", "0", ":", "\n", "            ", "fosq", ".", "sub_queries", "=", "not_negated", "\n", "return", "fosq", "\n", "", "if", "len", "(", "not_negated", ")", ">", "1", ":", "\n", "            ", "first_query", "=", "Intersection", "(", "*", "not_negated", ")", "\n", "", "else", ":", "\n", "            ", "first_query", "=", "not_negated", "[", "0", "]", "\n", "", "rest_query", "=", "[", "q", ".", "query", "for", "q", "in", "negated", "]", "\n", "multi_diff_query", "=", "[", "first_query", "]", "+", "rest_query", "\n", "fosq", "=", "Multiple_Difference", "(", "*", "multi_diff_query", ")", "\n", "return", "fosq", "\n", "", "elif", "fosq", ".", "__o__", "==", "\"u\"", ":", "\n", "        ", "sub_queries", "=", "[", "to_D", "(", "q", ")", "for", "q", "in", "fosq", ".", "sub_queries", "]", "\n", "fosq", ".", "sub_queries", "=", "sub_queries", "\n", "return", "fosq", "\n", "", "elif", "fosq", ".", "__o__", "in", "'pn'", ":", "\n", "        ", "fosq", ".", "query", "=", "to_D", "(", "fosq", ".", "query", ")", "\n", "return", "fosq", "\n", "", "elif", "fosq", ".", "__o__", "==", "'e'", ":", "\n", "        ", "return", "fosq", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.decompose_D": [[1335, 1351], ["len", "foq_v2.Multiple_Difference", "foq_v2.decompose_D", "foq_v2.decompose_D"], "function", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.decompose_D", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.decompose_D"], ["", "", "def", "decompose_D", "(", "fosq", ")", ":", "\n", "    ", "if", "fosq", ".", "__o__", "==", "'D'", ":", "\n", "        ", "first", ",", "*", "rest", "=", "fosq", ".", "sub_queries", "\n", "while", "len", "(", "rest", ")", ">", "1", ":", "\n", "            ", "first", "=", "Multiple_Difference", "(", "*", "[", "first", ",", "rest", "[", "0", "]", "]", ")", "\n", "rest", "=", "rest", "[", "1", ":", "]", "\n", "", "fosq", ".", "sub_queries", "=", "[", "first", ",", "rest", "[", "0", "]", "]", "\n", "return", "fosq", "\n", "", "elif", "fosq", ".", "__o__", "in", "'iuIU'", ":", "\n", "        ", "fosq", ".", "sub_queries", "=", "[", "decompose_D", "(", "q", ")", "for", "q", "in", "fosq", ".", "sub_queries", "]", "\n", "return", "fosq", "\n", "", "elif", "fosq", ".", "__o__", "in", "'pn'", ":", "\n", "        ", "fosq", ".", "query", "=", "decompose_D", "(", "fosq", ".", "query", ")", "\n", "return", "fosq", "\n", "", "elif", "fosq", ".", "__o__", "==", "'e'", ":", "\n", "        ", "return", "fosq", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.to_d": [[1353, 1381], ["len", "foq_v2.to_d", "foq_v2.to_d", "foq_v2.Difference", "foq_v2.Difference", "foq_v2.to_d", "foq_v2.to_d"], "function", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.to_d", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.to_d", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.to_d", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.to_d"], ["", "", "def", "to_d", "(", "query", ")", ":", "\n", "    ", "\"\"\"\n    Convert the i-n like difference into difference,\n    all binary operators\n    \"\"\"", "\n", "if", "query", ".", "__o__", "==", "\"i\"", ":", "\n", "        ", "assert", "len", "(", "query", ".", "sub_queries", ")", "==", "2", "\n", "q1", ",", "q2", "=", "query", ".", "sub_queries", "\n", "q1", ",", "q2", "=", "to_d", "(", "q1", ")", ",", "to_d", "(", "q2", ")", "\n", "\n", "if", "q1", ".", "__o__", "==", "'n'", "and", "q2", ".", "__o__", "!=", "'n'", ":", "\n", "            ", "return", "Difference", "(", "lq", "=", "q2", ",", "rq", "=", "q1", ".", "query", ")", "\n", "", "elif", "q1", ".", "__o__", "!=", "'n'", "and", "q2", ".", "__o__", "==", "'n'", ":", "\n", "            ", "return", "Difference", "(", "lq", "=", "q1", ",", "rq", "=", "q2", ".", "query", ")", "\n", "", "else", ":", "\n", "            ", "query", ".", "sub_queries", "=", "[", "q1", ",", "q2", "]", "\n", "return", "query", "\n", "", "", "elif", "query", ".", "__o__", "==", "\"u\"", ":", "\n", "        ", "sub_queries", "=", "[", "to_d", "(", "q", ")", "for", "q", "in", "query", ".", "sub_queries", "]", "\n", "query", ".", "sub_queries", "=", "sub_queries", "\n", "return", "query", "\n", "", "elif", "query", ".", "__o__", "in", "'pn'", ":", "\n", "        ", "query", ".", "query", "=", "to_d", "(", "query", ".", "query", ")", "\n", "return", "query", "\n", "", "elif", "query", ".", "__o__", "==", "'e'", ":", "\n", "        ", "return", "query", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.transformation": [[1383, 1390], ["trans_func", "trans_func"], "function", ["None"], ["", "", "def", "transformation", "(", "query", ",", "trans_func", ")", ":", "\n", "    ", "original_formula", "=", "query", ".", "formula", "\n", "query", "=", "trans_func", "(", "query", ")", "\n", "while", "query", ".", "formula", "!=", "original_formula", ":", "\n", "        ", "original_formula", "=", "query", ".", "formula", "\n", "query", "=", "trans_func", "(", "query", ")", "\n", "", "return", "query", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.count_query_depth": [[1392, 1405], ["max", "foq_v2.count_query_depth", "foq_v2.count_query_depth", "foq_v2.count_query_depth", "max", "foq_v2.count_query_depth", "foq_v2.count_query_depth"], "function", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.count_query_depth", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.count_query_depth", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.count_query_depth", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.count_query_depth", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.count_query_depth"], ["", "def", "count_query_depth", "(", "query", ")", ":", "\n", "    ", "if", "query", ".", "__o__", "==", "'e'", ":", "\n", "        ", "return", "0", "\n", "", "elif", "query", ".", "__o__", "in", "'uiUID'", ":", "\n", "        ", "return", "max", "(", "count_query_depth", "(", "q", ")", "for", "q", "in", "query", ".", "sub_queries", ")", "\n", "", "elif", "query", ".", "__o__", "==", "'p'", ":", "\n", "        ", "return", "count_query_depth", "(", "query", ".", "query", ")", "+", "1", "\n", "", "elif", "query", ".", "__o__", "==", "'n'", ":", "\n", "        ", "return", "count_query_depth", "(", "query", ".", "query", ")", "\n", "", "elif", "query", ".", "__o__", "==", "'d'", ":", "\n", "        ", "return", "max", "(", "count_query_depth", "(", "query", ".", "lquery", ")", ",", "count_query_depth", "(", "query", ".", "rquery", ")", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.count_depth": [[1407, 1413], ["foq_v2.count_query_depth", "foq_v2.parse_formula", "print"], "function", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.count_query_depth", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.parse_formula"], ["", "", "def", "count_depth", "(", "formula", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "query", "=", "parse_formula", "(", "formula", ")", "\n", "", "except", ":", "\n", "        ", "print", "(", "formula", ")", "\n", "", "return", "count_query_depth", "(", "query", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.count_entities": [[1415, 1417], ["collections.Counter"], "function", ["None"], ["", "def", "count_entities", "(", "formula", ")", ":", "\n", "    ", "return", "Counter", "(", "formula", ")", "[", "'e'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.count_projections": [[1419, 1421], ["collections.Counter"], "function", ["None"], ["", "def", "count_projections", "(", "formula", ")", ":", "\n", "    ", "return", "Counter", "(", "formula", ")", "[", "'p'", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.BoxOffsetIntersection.__init__": [[13, 21], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.BoxEstimator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ")", ":", "\n", "        ", "super", "(", "BoxOffsetIntersection", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "layer1", "=", "nn", ".", "Linear", "(", "self", ".", "dim", ",", "self", ".", "dim", ")", "\n", "self", ".", "layer2", "=", "nn", ".", "Linear", "(", "self", ".", "dim", ",", "self", ".", "dim", ")", "\n", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "layer1", ".", "weight", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "layer2", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.BoxOffsetIntersection.forward": [[22, 29], ["torch.relu", "torch.relu", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.min", "torch.min", "torch.min", "torch.min", "estimator_box.BoxOffsetIntersection.layer1", "estimator_box.BoxOffsetIntersection.layer2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "embeddings", ")", ":", "\n", "        ", "layer1_act", "=", "F", ".", "relu", "(", "self", ".", "layer1", "(", "embeddings", ")", ")", "\n", "layer1_mean", "=", "torch", ".", "mean", "(", "layer1_act", ",", "dim", "=", "0", ")", "\n", "gate", "=", "torch", ".", "sigmoid", "(", "self", ".", "layer2", "(", "layer1_mean", ")", ")", "\n", "offset", ",", "_", "=", "torch", ".", "min", "(", "embeddings", ",", "dim", "=", "0", ")", "\n", "\n", "return", "offset", "*", "gate", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.CenterIntersection.__init__": [[33, 41], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.BoxEstimator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ")", ":", "\n", "        ", "super", "(", "CenterIntersection", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "layer1", "=", "nn", ".", "Linear", "(", "self", ".", "dim", ",", "self", ".", "dim", ")", "\n", "self", ".", "layer2", "=", "nn", ".", "Linear", "(", "self", ".", "dim", ",", "self", ".", "dim", ")", "\n", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "layer1", ".", "weight", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "layer2", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.CenterIntersection.forward": [[42, 49], ["torch.relu", "torch.relu", "torch.softmax", "torch.softmax", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "estimator_box.CenterIntersection.layer1", "estimator_box.CenterIntersection.layer2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "embeddings", ")", ":", "\n", "        ", "layer1_act", "=", "F", ".", "relu", "(", "self", ".", "layer1", "(", "embeddings", ")", ")", "# (num_conj, dim)", "\n", "attention", "=", "F", ".", "softmax", "(", "self", ".", "layer2", "(", "layer1_act", ")", ",", "\n", "dim", "=", "0", ")", "# (num_conj, dim)", "\n", "embedding", "=", "torch", ".", "sum", "(", "attention", "*", "embeddings", ",", "dim", "=", "0", ")", "\n", "\n", "return", "embedding", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.BoxEstimator.__init__": [[57, 103], ["appfoq.AppFOQEstimator.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.init.uniform_", "torch.nn.init.uniform_", "torch.nn.init.uniform_", "torch.nn.init.uniform_", "torch.nn.init.uniform_", "torch.nn.init.uniform_", "estimator_box.CenterIntersection", "estimator_box.BoxOffsetIntersection", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "estimator_box.BoxEstimator.embedding_range.item", "estimator_box.BoxEstimator.embedding_range.item", "estimator_box.BoxEstimator.embedding_range.item", "estimator_box.BoxEstimator.embedding_range.item", "estimator_box.BoxEstimator.embedding_range.item", "estimator_box.BoxEstimator.gamma.item"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.BoxEstimator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_entity", ",", "n_relation", ",", "gamma", ",", "entity_dim", ",", "\n", "relation_dim", ",", "offset_activation", ",", "center_reg", ",", "\n", "negative_sample_size", ",", "device", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "name", "=", "'box'", "\n", "self", ".", "n_entity", "=", "n_entity", "\n", "self", ".", "n_relation", "=", "n_relation", "\n", "self", ".", "gamma", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "Tensor", "(", "[", "gamma", "]", ")", ",", "\n", "requires_grad", "=", "False", "\n", ")", "\n", "self", ".", "negative_size", "=", "negative_sample_size", "\n", "self", ".", "entity_dim", "=", "entity_dim", "\n", "self", ".", "relation_dim", "=", "relation_dim", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "epsilon", "=", "2.0", "\n", "self", ".", "embedding_range", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "Tensor", "(", "[", "(", "self", ".", "gamma", ".", "item", "(", ")", "+", "self", ".", "epsilon", ")", "/", "entity_dim", "]", ")", ",", "\n", "requires_grad", "=", "False", "\n", ")", "\n", "self", ".", "entity_embeddings", "=", "nn", ".", "Embedding", "(", "\n", "num_embeddings", "=", "n_entity", ",", "embedding_dim", "=", "self", ".", "entity_dim", ")", "\n", "self", ".", "relation_embeddings", "=", "nn", ".", "Embedding", "(", "\n", "num_embeddings", "=", "n_relation", ",", "embedding_dim", "=", "self", ".", "relation_dim", ")", "\n", "self", ".", "offset_embeddings", "=", "nn", ".", "Embedding", "(", "\n", "num_embeddings", "=", "n_relation", ",", "embedding_dim", "=", "self", ".", "entity_dim", ")", "\n", "nn", ".", "init", ".", "uniform_", "(", "self", ".", "entity_embeddings", ".", "weight", ",", "\n", "-", "self", ".", "embedding_range", ".", "item", "(", ")", ",", "\n", "self", ".", "embedding_range", ".", "item", "(", ")", ")", "\n", "nn", ".", "init", ".", "uniform_", "(", "self", ".", "relation_embeddings", ".", "weight", ",", "\n", "-", "self", ".", "embedding_range", ".", "item", "(", ")", ",", "\n", "self", ".", "embedding_range", ".", "item", "(", ")", ")", "\n", "nn", ".", "init", ".", "uniform_", "(", "self", ".", "offset_embeddings", ".", "weight", ",", "\n", "0", ",", "\n", "self", ".", "embedding_range", ".", "item", "(", ")", ")", "\n", "self", ".", "center_net", "=", "CenterIntersection", "(", "self", ".", "entity_dim", ")", "\n", "self", ".", "offset_net", "=", "BoxOffsetIntersection", "(", "self", ".", "entity_dim", ")", "\n", "self", ".", "cen_reg", "=", "center_reg", "\n", "if", "offset_activation", "==", "'none'", ":", "\n", "            ", "self", ".", "func", "=", "identity", "\n", "", "elif", "offset_activation", "==", "'relu'", ":", "\n", "            ", "self", ".", "func", "=", "F", ".", "relu", "\n", "", "elif", "offset_activation", "==", "'softplus'", ":", "\n", "            ", "self", ".", "func", "=", "F", ".", "softplus", "\n", "", "else", ":", "\n", "            ", "assert", "False", ",", "\"No valid activation function!\"", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.BoxEstimator.get_entity_embedding": [[104, 108], ["estimator_box.BoxEstimator.entity_embeddings", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.to", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.to", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.to", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.to"], ["", "", "def", "get_entity_embedding", "(", "self", ",", "entity_ids", ":", "torch", ".", "LongTensor", ")", ":", "\n", "        ", "center_emb", "=", "self", ".", "entity_embeddings", "(", "entity_ids", ")", "\n", "offset_emb", "=", "torch", ".", "zeros_like", "(", "center_emb", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "return", "torch", ".", "cat", "(", "(", "center_emb", ",", "offset_emb", ")", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.BoxEstimator.get_projection_embedding": [[109, 117], ["estimator_box.BoxEstimator.relation_embeddings", "estimator_box.BoxEstimator.offset_embeddings", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "estimator_box.BoxEstimator.func"], "methods", ["None"], ["", "def", "get_projection_embedding", "(", "self", ",", "proj_ids", ":", "torch", ".", "LongTensor", ",", "emb", ")", ":", "\n", "        ", "assert", "emb", ".", "shape", "[", "0", "]", "==", "len", "(", "proj_ids", ")", "\n", "rel_emb", "=", "self", ".", "relation_embeddings", "(", "proj_ids", ")", "\n", "r_offset_emb", "=", "self", ".", "offset_embeddings", "(", "proj_ids", ")", "\n", "q_emb", ",", "q_off_emb", "=", "torch", ".", "chunk", "(", "emb", ",", "2", ",", "dim", "=", "-", "1", ")", "\n", "q_emb", "=", "torch", ".", "add", "(", "q_emb", ",", "rel_emb", ")", "\n", "q_off_emb", "=", "torch", ".", "add", "(", "q_off_emb", ",", "self", ".", "func", "(", "r_offset_emb", ")", ")", "\n", "return", "torch", ".", "cat", "(", "(", "q_emb", ",", "q_off_emb", ")", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.BoxEstimator.get_negation_embedding": [[118, 120], ["None"], "methods", ["None"], ["", "def", "get_negation_embedding", "(", "self", ",", "emb", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "assert", "False", ",", "\"box cannot handle negation\"", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.BoxEstimator.get_disjunction_embedding": [[121, 123], ["torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["None"], ["", "def", "get_disjunction_embedding", "(", "self", ",", "disj_emb", ":", "List", "[", "torch", ".", "Tensor", "]", ")", ":", "\n", "        ", "return", "torch", ".", "stack", "(", "disj_emb", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.BoxEstimator.get_difference_embedding": [[124, 126], ["None"], "methods", ["None"], ["", "def", "get_difference_embedding", "(", "self", ",", "lemb", ":", "torch", ".", "Tensor", ",", "remb", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "assert", "False", ",", "\"box cannot handle negation\"", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.BoxEstimator.get_multiple_difference_embedding": [[127, 131], ["None"], "methods", ["None"], ["", "def", "get_multiple_difference_embedding", "(", "self", ",", "\n", "emb", ":", "List", "[", "torch", ".", "Tensor", "]", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "assert", "False", ",", "\"box cannot handle negation\"", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.BoxEstimator.get_conjunction_embedding": [[132, 141], ["estimator_box.BoxEstimator.center_net", "estimator_box.BoxEstimator.offset_net", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "sub_center_list.append", "sub_offset_list.append", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["None"], ["", "def", "get_conjunction_embedding", "(", "self", ",", "conj_emb", ":", "List", "[", "torch", ".", "Tensor", "]", ")", ":", "\n", "        ", "sub_center_list", ",", "sub_offset_list", "=", "[", "]", ",", "[", "]", "\n", "for", "sub_emb", "in", "conj_emb", ":", "\n", "            ", "sub_center", ",", "sub_offset", "=", "torch", ".", "chunk", "(", "sub_emb", ",", "2", ",", "dim", "=", "-", "1", ")", "\n", "sub_center_list", ".", "append", "(", "sub_center", ")", "\n", "sub_offset_list", ".", "append", "(", "sub_offset", ")", "\n", "", "new_center", "=", "self", ".", "center_net", "(", "torch", ".", "stack", "(", "sub_center_list", ")", ")", "\n", "new_offset", "=", "self", ".", "offset_net", "(", "torch", ".", "stack", "(", "sub_offset_list", ")", ")", "\n", "return", "torch", ".", "cat", "(", "(", "new_center", ",", "new_offset", ")", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.BoxEstimator.criterion": [[142, 173], ["pred_emb.unsqueeze.unsqueeze.unsqueeze", "appfoq.inclusion_sampling", "estimator_box.BoxEstimator.get_entity_embedding", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "estimator_box.BoxEstimator.get_entity_embedding", "neg_embedding.view.view.view", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "estimator_box.BoxEstimator.compute_logit", "estimator_box.BoxEstimator.compute_logit", "estimator_box.BoxEstimator.compute_logit", "estimator_box.BoxEstimator.compute_logit", "subsampling_weight.to", "positive_embedding.unsqueeze", "torch.max", "torch.max", "torch.max", "torch.max", "negative_embedding.unsqueeze", "torch.max", "torch.max", "torch.max", "torch.max", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.appfoq.inclusion_sampling", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.BoxEstimator.get_entity_embedding", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.BoxEstimator.get_entity_embedding", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.BoxEstimator.compute_logit", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.BoxEstimator.compute_logit", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.BoxEstimator.compute_logit", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.BoxEstimator.compute_logit", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.to"], ["", "def", "criterion", "(", "self", ",", "\n", "pred_emb", ":", "torch", ".", "Tensor", ",", "\n", "answer_set", ":", "List", "[", "IntList", "]", ",", "\n", "union", "=", "False", ")", ":", "\n", "        ", "pred_emb", "=", "pred_emb", ".", "unsqueeze", "(", "dim", "=", "-", "2", ")", "\n", "chosen_answer", ",", "chosen_false_answer", ",", "subsampling_weight", "=", "inclusion_sampling", "(", "answer_set", ",", "\n", "negative_size", "=", "self", ".", "negative_size", ",", "\n", "entity_num", "=", "self", ".", "n_entity", ")", "\n", "positive_all_embedding", "=", "self", ".", "get_entity_embedding", "(", "\n", "torch", ".", "tensor", "(", "chosen_answer", ",", "device", "=", "self", ".", "device", ")", ")", "# b*d", "\n", "positive_embedding", ",", "_", "=", "torch", ".", "chunk", "(", "\n", "positive_all_embedding", ",", "2", ",", "dim", "=", "-", "1", ")", "\n", "neg_embedding", "=", "self", ".", "get_entity_embedding", "(", "\n", "torch", ".", "tensor", "(", "chosen_false_answer", ",", "device", "=", "self", ".", "device", ")", ".", "view", "(", "-", "1", ")", ")", "\n", "neg_embedding", "=", "neg_embedding", ".", "view", "(", "\n", "-", "1", ",", "self", ".", "negative_size", ",", "2", "*", "self", ".", "entity_dim", ")", "# batch*n*dim", "\n", "negative_embedding", ",", "_", "=", "torch", ".", "chunk", "(", "neg_embedding", ",", "2", ",", "dim", "=", "-", "1", ")", "\n", "if", "union", ":", "\n", "            ", "positive_union_logit", "=", "self", ".", "compute_logit", "(", "\n", "positive_embedding", ".", "unsqueeze", "(", "1", ")", ",", "pred_emb", ")", "\n", "positive_logit", "=", "torch", ".", "max", "(", "\n", "positive_union_logit", ",", "dim", "=", "1", ")", "[", "0", "]", "\n", "negative_union_logit", "=", "self", ".", "compute_logit", "(", "\n", "negative_embedding", ".", "unsqueeze", "(", "1", ")", ",", "pred_emb", ")", "\n", "negative_logit", "=", "torch", ".", "max", "(", "negative_union_logit", ",", "dim", "=", "1", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "positive_logit", "=", "self", ".", "compute_logit", "(", "positive_embedding", ",", "pred_emb", ")", "\n", "negative_logit", "=", "self", ".", "compute_logit", "(", "negative_embedding", ",", "pred_emb", ")", "\n", "", "return", "positive_logit", ",", "negative_logit", ",", "subsampling_weight", ".", "to", "(", "\n", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.BoxEstimator.compute_logit": [[174, 183], ["torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.relu", "torch.relu", "torch.min", "torch.min", "torch.min", "torch.min", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm"], "methods", ["None"], ["", "def", "compute_logit", "(", "self", ",", "entity_emb", ",", "query_emb", ")", ":", "\n", "        ", "query_center_embedding", ",", "query_offset_embedding", "=", "torch", ".", "chunk", "(", "\n", "query_emb", ",", "2", ",", "dim", "=", "-", "1", ")", "\n", "delta", "=", "(", "entity_emb", "-", "query_center_embedding", ")", ".", "abs", "(", ")", "\n", "distance_out", "=", "F", ".", "relu", "(", "delta", "-", "query_offset_embedding", ")", "\n", "distance_in", "=", "torch", ".", "min", "(", "delta", ",", "query_offset_embedding", ")", "\n", "logit", "=", "self", ".", "gamma", "-", "torch", ".", "norm", "(", "distance_out", ",", "p", "=", "1", ",", "dim", "=", "-", "1", ")", "-", "self", ".", "cen_reg", "*", "torch", ".", "norm", "(", "distance_in", ",", "p", "=", "1", ",", "dim", "=", "-", "1", ")", "\n", "return", "logit", "\n", "\n"]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.BoxEstimator.compute_all_entity_logit": [[184, 210], ["torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "pred_emb.unsqueeze.unsqueeze.unsqueeze", "appfoq.find_optimal_batch", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "estimator_box.BoxEstimator.get_entity_embedding", "logit_list.append", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "estimator_box.BoxEstimator.compute_logit", "estimator_box.BoxEstimator.compute_logit", "range", "answer_part.unsqueeze().unsqueeze", "torch.max", "torch.max", "torch.max", "torch.max", "answer_part.unsqueeze", "answer_part.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.to", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.to", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.to", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.foq_v2.Difference.to", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.appfoq.find_optimal_batch", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.BoxEstimator.get_entity_embedding", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.BoxEstimator.compute_logit", "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.BoxEstimator.compute_logit"], ["", "def", "compute_all_entity_logit", "(", "self", ",", "\n", "pred_emb", ":", "torch", ".", "Tensor", ",", "\n", "union", "=", "False", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "all_entities", "=", "torch", ".", "LongTensor", "(", "range", "(", "self", ".", "n_entity", ")", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "all_embedding", ",", "_", "=", "torch", ".", "chunk", "(", "\n", "self", ".", "get_entity_embedding", "(", "all_entities", ")", ",", "2", ",", "dim", "=", "-", "1", ")", "\n", "pred_emb", "=", "pred_emb", ".", "unsqueeze", "(", "-", "2", ")", "\n", "batch_num", "=", "find_optimal_batch", "(", "all_embedding", ",", "\n", "query_dist", "=", "pred_emb", ",", "\n", "compute_logit", "=", "self", ".", "compute_logit", ",", "\n", "union", "=", "union", ")", "\n", "chunk_of_answer", "=", "torch", ".", "chunk", "(", "all_embedding", ",", "batch_num", ",", "dim", "=", "0", ")", "\n", "logit_list", "=", "[", "]", "\n", "for", "answer_part", "in", "chunk_of_answer", ":", "\n", "            ", "if", "union", ":", "\n", "                ", "union_part", "=", "self", ".", "compute_logit", "(", "\n", "answer_part", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", ",", "pred_emb", ")", "\n", "# b*disj*answer_part*dim", "\n", "logit_part", "=", "torch", ".", "max", "(", "union_part", ",", "dim", "=", "1", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "                ", "logit_part", "=", "self", ".", "compute_logit", "(", "answer_part", ".", "unsqueeze", "(", "dim", "=", "0", ")", ",", "\n", "pred_emb", ")", "\n", "# batch*answer_part*dim", "\n", "", "logit_list", ".", "append", "(", "logit_part", ")", "\n", "", "all_logit", "=", "torch", ".", "cat", "(", "logit_list", ",", "dim", "=", "1", ")", "\n", "return", "all_logit", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hkust-knowcomp_efo-1-qa-benchmark.fol.estimator_box.identity": [[51, 53], ["None"], "function", ["None"], ["", "", "def", "identity", "(", "x", ")", ":", "\n", "    ", "return", "x", "\n", "\n"]]}