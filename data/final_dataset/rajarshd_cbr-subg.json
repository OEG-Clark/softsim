{"home.repos.pwc.inspect_result.rajarshd_cbr-subg.src.runner.main": [[26, 153], ["transformers.HfArgumentParser", "transformers.HfArgumentParser.parse_args_into_dataclasses", "datetime.datetime.now().strftime", "os.path.join", "logging.FileHandler", "global_config.logger.addHandler", "global_config.logger.info", "global_config.logger.info", "global_config.logger.info", "global_config.logger.info", "global_config.logger.info", "global_config.logger.info", "torch.device", "model_trainer.ModelTrainer", "wandb.init", "str", "os.path.exists", "os.makedirs", "json.dumps", "json.dumps", "json.dumps", "global_config.logger.info", "data_loaders.kbqa_dataloader.KBQADataLoader", "NotImplemented", "QueryEncoder().to.get_query_embedding_dim", "wandb.config.update", "wandb.config.update", "wandb.config.update", "wandb.config.update", "os.path.exists", "global_config.logger.info", "torch.load", "RGCN().to.load_state_dict", "os.path.exists", "global_config.logger.info", "torch.load", "os.path.exists", "global_config.logger.info", "data_loaders.training_utils.EarlyStopping", "model_trainer.ModelTrainer.train", "model_trainer.ModelTrainer.evaluate", "model_trainer.ModelTrainer.predict", "project_tags.append", "datetime.datetime.now", "uuid.uuid4", "training_args.to_dict", "vars", "vars", "torch.cuda.is_available", "global_config.logger.info", "text_handler.PrecomputedQueryEncoder", "global_config.logger.info", "text_handler.QueryEncoder().to", "models.rgcn.rgcn_model.QueryAwareRGCN().to", "models.rgcn.rgcn_model.QueryAwareRGCN().to", "models.rgcn.rgcn_model.RGCN().to", "models.rgcn.rgcn_model.RGCN().to", "open", "json.load", "global_config.logger.warning", "global_config.logger.warning", "global_config.logger.warning", "global_config.logger.warning", "os.path.exists", "text_handler.QueryEncoder", "models.rgcn.rgcn_model.QueryAwareRGCN", "models.rgcn.rgcn_model.QueryAwareRGCN", "models.rgcn.rgcn_model.RGCN", "models.rgcn.rgcn_model.RGCN", "os.path.exists"], "function", ["home.repos.pwc.inspect_result.rajarshd_cbr-subg.src.text_handler.QueryEncoder.get_query_embedding_dim", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.compgcn.message_passing.MessagePassing.update", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.compgcn.message_passing.MessagePassing.update", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.compgcn.message_passing.MessagePassing.update", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.compgcn.message_passing.MessagePassing.update", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.src.model_trainer.ModelTrainer.train", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.src.model_trainer.ModelTrainer.evaluate", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.src.model_trainer.ModelTrainer.predict"], ["def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "HfArgumentParser", "(", "(", "ModelArguments", ",", "DataTrainingArguments", ",", "CBRTrainingArguments", ")", ")", "\n", "model_args", ",", "data_args", ",", "training_args", "=", "parser", ".", "parse_args_into_dataclasses", "(", ")", "\n", "model_args", ".", "transform_input", "=", "(", "model_args", ".", "transform_input", "==", "1", ")", "\n", "model_args", ".", "use_fast_rgcn", "=", "(", "model_args", ".", "use_fast_rgcn", "==", "1", ")", "\n", "model_args", ".", "add_dist_feature", "=", "(", "model_args", ".", "add_dist_feature", "==", "1", ")", "\n", "model_args", ".", "add_inv_edges_to_edge_index", "=", "(", "model_args", ".", "add_inv_edges_to_edge_index", "==", "1", ")", "\n", "model_args", ".", "use_sparse_feats", "=", "(", "model_args", ".", "use_sparse_feats", "==", "1", ")", "\n", "if", "model_args", ".", "use_scoring_head", "==", "\"none\"", ":", "\n", "        ", "model_args", ".", "use_scoring_head", "=", "None", "\n", "", "training_args", ".", "use_wandb", "=", "(", "training_args", ".", "use_wandb", "==", "1", ")", "\n", "training_args", ".", "load_best_model_at_end", "=", "True", "\n", "# if model_args.use_sparse_feats and not model_args.transform_input:", "\n", "#     raise ValueError(\"When use_sparse_feats is True, transform_input has to be True\")", "\n", "if", "training_args", ".", "task", "==", "'pt_match'", ":", "\n", "        ", "project_tags", "=", "[", "\"pt_match\"", ",", "\"rgcn\"", "]", "\n", "if", "data_args", ".", "dataset_name", "!=", "'synthetic'", ":", "\n", "            ", "project_tags", ".", "append", "(", "\"kbqa\"", ")", "\n", "", "", "elif", "training_args", ".", "task", "==", "'kbc'", ":", "\n", "        ", "if", "model_args", ".", "gnn", "==", "'CompGCN_TransE'", ":", "\n", "            ", "project_tags", "=", "[", "'kbc'", ",", "'CompGCN_TransE'", "]", "\n", "", "if", "model_args", ".", "gnn", "==", "'RGCN'", ":", "\n", "            ", "project_tags", "=", "[", "'kbc'", ",", "'RGCN'", "]", "\n", "", "", "if", "training_args", ".", "use_wandb", ":", "\n", "        ", "wandb", ".", "init", "(", "project", "=", "\"cbr-weak-supervision\"", ",", "tags", "=", "project_tags", ")", "\n", "\n", "", "suffix", "=", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%y%m%d_%H%M%S_\"", ")", "\n", "rand_str", "=", "str", "(", "uuid", ".", "uuid4", "(", ")", ")", "[", ":", "8", "]", "\n", "training_args", ".", "output_dir", "=", "os", ".", "path", ".", "join", "(", "training_args", ".", "output_dir", ",", "\"out-\"", "+", "suffix", "+", "rand_str", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "training_args", ".", "output_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "training_args", ".", "output_dir", ")", "\n", "# also log to a log file", "\n", "", "fileHandler", "=", "logging", ".", "FileHandler", "(", "\"{0}/{1}\"", ".", "format", "(", "training_args", ".", "output_dir", ",", "\"log.txt\"", ")", ")", "\n", "logger", ".", "addHandler", "(", "fileHandler", ")", "\n", "logger", ".", "info", "(", "\"Output directory is {}\"", ".", "format", "(", "training_args", ".", "output_dir", ")", ")", "\n", "logger", ".", "info", "(", "\"=========Config:============\"", ")", "\n", "logger", ".", "info", "(", "json", ".", "dumps", "(", "training_args", ".", "to_dict", "(", ")", ",", "indent", "=", "4", ",", "sort_keys", "=", "True", ")", ")", "\n", "logger", ".", "info", "(", "json", ".", "dumps", "(", "vars", "(", "model_args", ")", ",", "indent", "=", "4", ",", "sort_keys", "=", "True", ")", ")", "\n", "logger", ".", "info", "(", "json", ".", "dumps", "(", "vars", "(", "data_args", ")", ",", "indent", "=", "4", ",", "sort_keys", "=", "True", ")", ")", "\n", "logger", ".", "info", "(", "\"============================\"", ")", "\n", "if", "training_args", ".", "max_steps", ">", "0", ":", "\n", "        ", "logger", ".", "info", "(", "\"max_steps is given, train will run till whichever is sooner of num_train_epochs and max_steps\"", ")", "\n", "\n", "", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "if", "training_args", ".", "task", "==", "'pt_match'", "or", "training_args", ".", "task", "==", "'kbc'", ":", "\n", "        ", "dataset_obj", "=", "KBQADataLoader", "(", "data_args", ".", "data_dir", ",", "data_args", ".", "data_file_suffix", ",", "training_args", ".", "train_batch_size", ",", "\n", "training_args", ".", "eval_batch_size", ",", "model_args", ".", "add_dist_feature", ",", "\n", "model_args", ".", "add_inv_edges_to_edge_index", ",", "data_args", ".", "max_dist", ",", "\n", "training_args", ".", "downsample_eval_frac", ",", "training_args", ".", "task", ",", "data_args", ".", "dataset_name", ",", "\n", "data_args", ".", "precomputed_query_encoding_dir", ",", "data_args", ".", "paths_file_kbc", ",", "data_args", ".", "kb_system_file", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplemented", "(", "f\"training_args.task: {training_args.task}\"", ")", "\n", "\n", "", "query_encoder", "=", "None", "\n", "model_args", ".", "node_feat_dim", "=", "dataset_obj", ".", "node_feat_dim", "\n", "model_args", ".", "n_additional_feat", "=", "dataset_obj", ".", "n_additional_feat", "\n", "model_args", ".", "n_base_feat", "=", "dataset_obj", ".", "n_base_feat", "\n", "model_args", ".", "max_dist", "=", "data_args", ".", "max_dist", "\n", "model_args", ".", "num_relations", "=", "dataset_obj", ".", "n_relations", "\n", "# model_args.num_entities = dataset_obj.n_entities", "\n", "model_args", ".", "device", "=", "device", "\n", "if", "training_args", ".", "task", "==", "'pt_match'", "and", "model_args", ".", "use_query_aware_gcn", ":", "\n", "        ", "if", "data_args", ".", "precomputed_query_encoding_dir", "is", "not", "None", "and", "training_args", ".", "train_query_encoder", "==", "0", ":", "\n", "            ", "logger", ".", "info", "(", "\"query_encoder: using precomputed query encodings\"", ")", "\n", "query_encoder", "=", "PrecomputedQueryEncoder", "(", "dataset_obj", ")", "\n", "", "else", ":", "\n", "            ", "logger", ".", "info", "(", "\"query_encoder: creating query encoder model\"", ")", "\n", "if", "data_args", ".", "precomputed_query_encoding_dir", "is", "not", "None", ":", "\n", "                ", "logger", ".", "warning", "(", "\"query_encoder: ignoring precomputed query encodings\"", ")", "\n", "", "query_encoder", "=", "QueryEncoder", "(", "model_args", ".", "query_encoder_model", ",", "model_args", ".", "pooling_type", ",", "\n", "(", "training_args", ".", "train_query_encoder", "==", "1", ")", ")", ".", "to", "(", "device", ")", "\n", "# Set the query encoding dimension based on the chosen encoder", "\n", "", "model_args", ".", "query_dim", "=", "query_encoder", ".", "get_query_embedding_dim", "(", ")", "\n", "if", "model_args", ".", "use_sparse_feats", ":", "\n", "            ", "solver_model", "=", "QueryAwareRGCN", "(", "model_args", ",", "dataset_obj", ".", "base_feature_matrix", ")", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "            ", "solver_model", "=", "QueryAwareRGCN", "(", "model_args", ")", ".", "to", "(", "device", ")", "\n", "", "", "else", ":", "\n", "        ", "if", "model_args", ".", "use_sparse_feats", ":", "\n", "            ", "solver_model", "=", "RGCN", "(", "model_args", ",", "dataset_obj", ".", "base_feature_matrix", ")", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "            ", "solver_model", "=", "RGCN", "(", "model_args", ")", ".", "to", "(", "device", ")", "\n", "\n", "", "", "if", "training_args", ".", "use_wandb", ":", "\n", "        ", "wandb", ".", "config", ".", "update", "(", "model_args", ")", "\n", "wandb", ".", "config", ".", "update", "(", "data_args", ")", "\n", "wandb", ".", "config", ".", "update", "(", "training_args", ")", "\n", "wandb", ".", "config", ".", "update", "(", "{", "\"final_output_dir\"", ":", "training_args", ".", "output_dir", "}", ")", "\n", "\n", "", "if", "model_args", ".", "model_ckpt_path", "is", "not", "None", "and", "os", ".", "path", ".", "exists", "(", "model_args", ".", "model_ckpt_path", ")", ":", "\n", "        ", "logger", ".", "info", "(", "\"Path to a checkpoint found; loading the checkpoint!!!\"", ")", "\n", "state_dict", "=", "torch", ".", "load", "(", "model_args", ".", "model_ckpt_path", ")", "\n", "solver_model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "", "optim_state_dict", "=", "None", "\n", "if", "model_args", ".", "optim_ckpt_path", "is", "not", "None", "and", "os", ".", "path", ".", "exists", "(", "model_args", ".", "optim_ckpt_path", ")", ":", "\n", "        ", "logger", ".", "info", "(", "\"Path to a OPTIMIZER checkpoint found; loading the checkpoint!!!\"", ")", "\n", "optim_state_dict", "=", "torch", ".", "load", "(", "model_args", ".", "optim_ckpt_path", ")", "\n", "", "global_step", "=", "None", "\n", "if", "model_args", ".", "model_args_ckpt_path", "is", "not", "None", "and", "os", ".", "path", ".", "exists", "(", "model_args", ".", "model_args_ckpt_path", ")", ":", "\n", "        ", "logger", ".", "info", "(", "\"Path to a model_args checkpoint found; loading the global_step!!!\"", ")", "\n", "with", "open", "(", "model_args", ".", "model_args_ckpt_path", ")", "as", "fin", ":", "\n", "            ", "loaded_model_args", "=", "json", ".", "load", "(", "fin", ")", "\n", "# load the global step", "\n", "global_step", "=", "loaded_model_args", "[", "\"global_step\"", "]", "\n", "\n", "", "", "if", "training_args", ".", "patience", ":", "\n", "        ", "early_stopping", "=", "EarlyStopping", "(", "\"Hits@1\"", ",", "patience", "=", "training_args", ".", "patience", ")", "\n", "", "else", ":", "\n", "        ", "early_stopping", "=", "None", "\n", "\n", "", "trainer", "=", "ModelTrainer", "(", "solver_model", ",", "query_encoder", ",", "dataset_obj", ",", "training_args", "=", "training_args", ",", "data_args", "=", "data_args", ",", "\n", "model_args", "=", "model_args", ",", "optim_state_dict", "=", "optim_state_dict", ",", "global_step", "=", "global_step", ",", "\n", "device", "=", "device", ",", "early_stopping", "=", "early_stopping", ")", "\n", "if", "training_args", ".", "do_train", ":", "\n", "        ", "trainer", ".", "train", "(", ")", "\n", "\n", "", "if", "training_args", ".", "do_eval", ":", "\n", "        ", "if", "training_args", ".", "do_train", ":", "\n", "            ", "logger", ".", "warning", "(", "\"Evaluating current trained model...\"", ")", "\n", "", "elif", "model_args", ".", "model_ckpt_path", "is", "None", "or", "not", "os", ".", "path", ".", "exists", "(", "model_args", ".", "model_ckpt_path", ")", ":", "\n", "            ", "logger", ".", "warning", "(", "\"No path to model found!!!, Evaluating with a random model...\"", ")", "\n", "", "trainer", ".", "evaluate", "(", "log_output", "=", "(", "training_args", ".", "log_eval_result", "==", "1", ")", ")", "\n", "\n", "", "if", "training_args", ".", "do_predict", ":", "\n", "        ", "if", "model_args", ".", "model_ckpt_path", "is", "None", "or", "not", "os", ".", "path", ".", "exists", "(", "model_args", ".", "model_ckpt_path", ")", ":", "\n", "            ", "logger", ".", "warning", "(", "\"No path to model found!!!, Evaluating with a random model...\"", ")", "\n", "", "trainer", ".", "predict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.src.model_trainer.ModelTrainer.__init__": [[31, 96], ["subgraphs.NNSubgraphsFromData", "list", "torch.optim.AdamW", "int", "global_config.logger.info", "transformers.get_linear_schedule_with_warmup", "model_trainer.ModelTrainer.early_stopping", "dist_fns.L2Dist", "loss.MarginLoss", "neighbors.NneighborsFromData", "model.parameters", "model_trainer.ModelTrainer.query_encoder.is_trainable", "grouped_parameters.extend", "model_trainer.ModelTrainer.trainable_params.extend", "global_config.logger.info", "global_config.logger.info", "model_trainer.ModelTrainer.optimizer.load_state_dict", "transformers.get_linear_schedule_with_warmup", "neighbors.Nneighbors", "query_encoder.parameters", "len", "model.named_parameters", "model.named_parameters", "any", "any", "query_encoder.named_parameters", "query_encoder.named_parameters", "any", "any"], "methods", ["home.repos.pwc.inspect_result.rajarshd_cbr-subg.src.text_handler.QueryEncoder.is_trainable"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "query_encoder", ",", "dataset_obj", ",", "training_args", ",", "model_args", ",", "data_args", ",", "optim_state_dict", ",", "\n", "global_step", ",", "device", ",", "\n", "early_stopping", ")", ":", "\n", "\n", "        ", "self", ".", "training_args", "=", "training_args", "\n", "self", ".", "model_args", "=", "model_args", "\n", "self", ".", "data_args", "=", "data_args", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "query_encoder", "=", "query_encoder", "\n", "self", ".", "dataset_obj", "=", "dataset_obj", "\n", "self", ".", "global_step", "=", "0", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "best_ckpt_step", "=", "-", "1", "\n", "self", ".", "saved_ckpts", "=", "[", "]", "\n", "self", ".", "best_metric", "=", "-", "np", ".", "inf", "\n", "self", ".", "weak_best_metric", "=", "-", "np", ".", "inf", "\n", "self", ".", "early_stopping", "=", "early_stopping", "\n", "if", "self", ".", "early_stopping", ":", "\n", "            ", "self", ".", "early_stopping", "(", "self", ".", "best_metric", ")", "\n", "\n", "", "self", ".", "dist_fn", "=", "DIST_FN", "[", "training_args", ".", "dist_metric", "]", "(", "stage1_aggr", "=", "self", ".", "training_args", ".", "dist_aggr1", ",", "\n", "stage2_aggr", "=", "self", ".", "training_args", ".", "dist_aggr2", ")", "\n", "self", ".", "loss", "=", "LOSS_FN", "[", "(", "training_args", ".", "task", ",", "training_args", ".", "loss_metric", ")", "]", "(", "margin", "=", "training_args", ".", "margin", ",", "\n", "temperature", "=", "training_args", ".", "temperature", ")", "\n", "if", "self", ".", "training_args", ".", "task", "==", "'kbc'", "and", "self", ".", "model_args", ".", "use_scoring_head", ":", "\n", "            ", "self", ".", "scorer_dist_fn", "=", "L2Dist", "(", "stage1_aggr", "=", "'none'", ")", "\n", "self", ".", "scorer_loss_fn", "=", "MarginLoss", "(", "margin", "=", "9.0", ")", "\n", "", "self", ".", "subgraphs", "=", "NNSubgraphsFromData", "(", "dataset_obj", "=", "dataset_obj", ")", "\n", "if", "self", ".", "training_args", ".", "task", "==", "'pt_match'", ":", "\n", "            ", "self", ".", "neighbors", "=", "NneighborsFromData", "(", "dataset_obj", "=", "dataset_obj", ")", "\n", "", "elif", "self", ".", "training_args", ".", "task", "==", "'kbc'", ":", "\n", "            ", "self", ".", "neighbors", "=", "Nneighbors", "(", "dataset_obj", ",", "self", ".", "device", ")", "\n", "\n", "", "no_decay", "=", "[", "'bias'", ",", "'LayerNorm.bias'", ",", "'LayerNorm.weight'", "]", "\n", "grouped_parameters", "=", "[", "\n", "{", "'params'", ":", "[", "p", "for", "n", ",", "p", "in", "model", ".", "named_parameters", "(", ")", "if", "not", "any", "(", "nd", "in", "n", "for", "nd", "in", "no_decay", ")", "]", ",", "\n", "'weight_decay'", ":", "training_args", ".", "weight_decay", ",", "'lr'", ":", "training_args", ".", "learning_rate", "}", ",", "\n", "{", "'params'", ":", "[", "p", "for", "n", ",", "p", "in", "model", ".", "named_parameters", "(", ")", "if", "any", "(", "nd", "in", "n", "for", "nd", "in", "no_decay", ")", "]", ",", "\n", "'weight_decay'", ":", "0.0", ",", "'lr'", ":", "training_args", ".", "learning_rate", "}", ",", "\n", "]", "\n", "self", ".", "trainable_params", "=", "list", "(", "model", ".", "parameters", "(", ")", ")", "\n", "if", "self", ".", "query_encoder", "is", "not", "None", "and", "self", ".", "query_encoder", ".", "is_trainable", "(", ")", ":", "\n", "            ", "grouped_parameters", ".", "extend", "(", "[", "\n", "{", "'params'", ":", "[", "p", "for", "n", ",", "p", "in", "query_encoder", ".", "named_parameters", "(", ")", "if", "not", "any", "(", "nd", "in", "n", "for", "nd", "in", "no_decay", ")", "]", ",", "\n", "'weight_decay'", ":", "training_args", ".", "weight_decay", ",", "'lr'", ":", "training_args", ".", "encoder_learning_rate", "}", ",", "\n", "{", "'params'", ":", "[", "p", "for", "n", ",", "p", "in", "query_encoder", ".", "named_parameters", "(", ")", "if", "any", "(", "nd", "in", "n", "for", "nd", "in", "no_decay", ")", "]", ",", "\n", "'weight_decay'", ":", "0.0", ",", "'lr'", ":", "training_args", ".", "encoder_learning_rate", "}", ",", "\n", "]", ")", "\n", "self", ".", "trainable_params", ".", "extend", "(", "query_encoder", ".", "parameters", "(", ")", ")", "\n", "", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "AdamW", "(", "grouped_parameters", ",", "lr", "=", "training_args", ".", "learning_rate", ",", "\n", "weight_decay", "=", "training_args", ".", "weight_decay", ")", "\n", "total_num_steps", "=", "int", "(", "self", ".", "training_args", ".", "num_train_epochs", "*", "(", "\n", "len", "(", "self", ".", "dataset_obj", ".", "train_dataloader", ")", "/", "self", ".", "training_args", ".", "gradient_accumulation_steps", ")", ")", "\n", "logger", ".", "info", "(", "\"Total number of gradient steps would be {}\"", ".", "format", "(", "total_num_steps", ")", ")", "\n", "self", ".", "scheduler", "=", "get_linear_schedule_with_warmup", "(", "self", ".", "optimizer", ",", "1000", ",", "total_num_steps", ")", "\n", "if", "global_step", "is", "not", "None", ":", "\n", "            ", "logger", ".", "info", "(", "\"Global step is not 0 but {}; probably resuming training from a checkpoint\"", ".", "format", "(", "global_step", ")", ")", "\n", "self", ".", "global_step", "=", "global_step", "\n", "", "if", "optim_state_dict", "is", "not", "None", ":", "\n", "            ", "logger", ".", "info", "(", "\"Optimizer checkpoint found, loading the state dict from the checkpoint!!!\"", ")", "\n", "self", ".", "optimizer", ".", "load_state_dict", "(", "optim_state_dict", ")", "\n", "# reinit the scheduler with new warmup have to do this way because of a bug?", "\n", "# https://discuss.pytorch.org/t/a-problem-occured-when-resuming-an-optimizer/28822", "\n", "self", ".", "scheduler", "=", "get_linear_schedule_with_warmup", "(", "self", ".", "optimizer", ",", "self", ".", "training_args", ".", "warmup_steps", ",", "\n", "total_num_steps", ",", "last_epoch", "=", "self", ".", "global_step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.src.model_trainer.ModelTrainer.train": [[97, 250], ["model_trainer.ModelTrainer.optimizer.zero_grad", "tqdm.tqdm.trange", "int", "hasattr", "enumerate", "model_trainer.ModelTrainer.evaluate", "global_config.logger.info", "tqdm.tqdm.tqdm", "time.time", "model_trainer.ModelTrainer.model.train", "model_trainer.ModelTrainer.neighbors", "model_trainer.ModelTrainer.subgraphs", "nn_batch.x.to", "nn_batch.edge_index.to", "nn_batch.edge_attr.to", "torch.isnan().any", "range", "torch.isnan", "loss.backward", "loss.item", "running_loss.append", "model_trainer.ModelTrainer.save", "model_trainer.ModelTrainer.query_encoder.is_trainable", "model_trainer.ModelTrainer.query_encoder.train", "global_config.logger.info", "len", "nn_batch.dist_feats.to", "model_trainer.ModelTrainer.query_encoder", "torch.isnan().any", "model_trainer.ModelTrainer.model", "model_trainer.ModelTrainer.model", "global_config.logger.warning", "model_trainer.ModelTrainer.narrow", "nn_batch.label_node_ids.narrow", "model_trainer.ModelTrainer.narrow", "nn_batch.label_node_ids.narrow", "label_identifiers.to.to.to", "model_trainer.ModelTrainer.dist_fn", "contrast_loss.detach().cpu().item", "global_config.logger.warning", "wandb.log", "torch.nn.utils.clip_grad_norm_", "model_trainer.ModelTrainer.optimizer.step", "model_trainer.ModelTrainer.optimizer.zero_grad", "model_trainer.ModelTrainer.scheduler.step", "wandb.log", "global_config.logger.info", "global_config.logger.warning", "torch.isnan", "wandb.log", "nn_batch.x_batch.narrow", "label_identifiers.to.to.min", "label_identifiers.to.to.min", "model_trainer.ModelTrainer.loss", "nn_batch.seed_node_ids.narrow", "torch.LongTensor().to", "model_trainer.ModelTrainer.model.run_scoring_head", "model_trainer.ModelTrainer.scorer_dist_fn", "supervised_loss.detach().cpu().item", "wandb.log", "wandb.log", "global_config.logger.info", "model_trainer.ModelTrainer.evaluate", "model_trainer.ModelTrainer.save", "torch.isnan", "wandb.log", "contrast_loss.detach().cpu", "model_trainer.ModelTrainer.scorer_loss_fn", "len", "torch.LongTensor", "supervised_loss.detach().cpu", "numpy.sum", "model_trainer.ModelTrainer.early_stopping", "torch.FloatTensor().uniform_", "contrast_loss.detach", "numpy.sum", "global_config.logger.error", "supervised_loss.detach", "str", "torch.FloatTensor", "len"], "methods", ["home.repos.pwc.inspect_result.rajarshd_cbr-subg.src.model_trainer.ModelTrainer.evaluate", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.src.model_trainer.ModelTrainer.train", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.src.text_handler.QueryEncoder.save", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.src.text_handler.QueryEncoder.is_trainable", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.src.model_trainer.ModelTrainer.train", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.compgcn.compgcn_models.BaseModel.loss", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.rgcn.rgcn_model.RGCN.run_scoring_head", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.src.model_trainer.ModelTrainer.evaluate", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.src.text_handler.QueryEncoder.save"], ["", "", "def", "train", "(", "self", ")", ":", "\n", "# self.evaluate(from_train=True)", "\n", "# if self.best_ckpt_step == self.global_step:", "\n", "#     self.save()", "\n", "        ", "running_loss", "=", "[", "]", "# Tracks loss between gradient accumulation steps", "\n", "local_step", "=", "0", "\n", "stop_training", ",", "exit_by_error", "=", "False", ",", "False", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss_scale", "=", "[", "0.0", ",", "0.0", "]", "\n", "for", "epoch", "in", "trange", "(", "int", "(", "self", ".", "training_args", ".", "num_train_epochs", ")", ",", "desc", "=", "f\"[Full Loop]\"", ")", ":", "\n", "            ", "if", "stop_training", ":", "\n", "                ", "break", "\n", "", "if", "hasattr", "(", "self", ".", "dataset_obj", ",", "'lazy_load_ctr'", ")", ":", "\n", "                ", "logger", ".", "info", "(", "f\"lazy_load_ctr: {self.dataset_obj.lazy_load_ctr}\"", ")", "\n", "", "for", "batch_ctr", ",", "batch", "in", "enumerate", "(", "tqdm", "(", "self", ".", "dataset_obj", ".", "train_dataloader", ",", "desc", "=", "f\"[Train]\"", ")", ")", ":", "\n", "                ", "curr_batch_loss", "=", "0.0", "\n", "# with torch.autograd.detect_anomaly():", "\n", "batch_start_time", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "model", ".", "train", "(", ")", "\n", "if", "self", ".", "query_encoder", "is", "not", "None", "and", "self", ".", "query_encoder", ".", "is_trainable", "(", ")", ":", "\n", "                    ", "self", ".", "query_encoder", ".", "train", "(", ")", "\n", "\n", "# First entry in the batch is the query, rest are nearest neighbors", "\n", "", "nn_list", ",", "nn_slices", "=", "self", ".", "neighbors", "(", "batch", ",", "k", "=", "self", ".", "data_args", ".", "num_neighbors_train", ")", "\n", "nn_batch", ",", "nn_slices", "=", "self", ".", "subgraphs", "(", "query_and_knn_list", "=", "nn_list", ",", "nn_slices", "=", "nn_slices", ")", "\n", "if", "nn_batch", "is", "None", ":", "\n", "                    ", "logger", ".", "info", "(", "\"The current batch was returned empty!!!!\"", ")", "\n", "continue", "\n", "", "new_batch_len", "=", "len", "(", "nn_slices", ")", "-", "1", "\n", "nn_batch", ".", "x", "=", "nn_batch", ".", "x", ".", "to", "(", "self", ".", "device", ")", "\n", "nn_batch", ".", "edge_index", "=", "nn_batch", ".", "edge_index", ".", "to", "(", "self", ".", "device", ")", "\n", "nn_batch", ".", "edge_attr", "=", "nn_batch", ".", "edge_attr", ".", "to", "(", "self", ".", "device", ")", "\n", "if", "self", ".", "model_args", ".", "add_dist_feature", ":", "\n", "                    ", "nn_batch", ".", "dist_feats", "=", "nn_batch", ".", "dist_feats", ".", "to", "(", "self", ".", "device", ")", "\n", "", "if", "self", ".", "model_args", ".", "use_query_aware_gcn", ":", "\n", "                    ", "query_embeddings", "=", "self", ".", "query_encoder", "(", "ex_ids", "=", "nn_batch", ".", "ex_id", ",", "split", "=", "nn_batch", ".", "split", ",", "\n", "text_batch", "=", "nn_batch", ".", "query_str", ",", "device", "=", "self", ".", "device", ")", "\n", "if", "torch", ".", "isnan", "(", "query_embeddings", ")", ".", "any", "(", ")", ":", "\n", "                        ", "stop_training", "=", "True", "\n", "exit_by_error", "=", "True", "\n", "logger", ".", "warning", "(", "\"NaN observed in query embedding. Terminating run.\"", ")", "\n", "if", "self", ".", "training_args", ".", "use_wandb", ":", "\n", "                            ", "wandb", ".", "log", "(", "{", "\"abort_code\"", ":", "\"query_nan\"", "}", ")", "\n", "", "break", "\n", "", "sub_batch_repr", "=", "self", ".", "model", "(", "nn_batch", ".", "x", ",", "nn_batch", ".", "edge_index", ",", "nn_batch", ".", "edge_attr", ",", "\n", "query_embeddings", ",", "nn_batch", ".", "x_batch", ",", "nn_batch", ".", "edge_attr_batch", ",", "\n", "nn_batch", ".", "dist_feats", ")", "\n", "", "else", ":", "\n", "                    ", "sub_batch_repr", "=", "self", ".", "model", "(", "nn_batch", ".", "x", ",", "nn_batch", ".", "edge_index", ",", "nn_batch", ".", "edge_attr", ",", "\n", "nn_batch", ".", "dist_feats", ")", "\n", "", "if", "torch", ".", "isnan", "(", "sub_batch_repr", ")", ".", "any", "(", ")", ":", "\n", "                    ", "stop_training", "=", "True", "\n", "exit_by_error", "=", "True", "\n", "logger", ".", "warning", "(", "\"NaN observed in batch representation. Terminating run.\"", ")", "\n", "if", "self", ".", "training_args", ".", "use_wandb", ":", "\n", "                        ", "wandb", ".", "log", "(", "{", "\"abort_code\"", ":", "\"batch_repr_nan\"", "}", ")", "\n", "", "break", "\n", "", "loss", "=", "None", "\n", "for", "i", "in", "range", "(", "new_batch_len", ")", ":", "\n", "# s corresponds to query", "\n", "# t corresponds to neighbors", "\n", "                    ", "repr_s", "=", "sub_batch_repr", ".", "narrow", "(", "0", ",", "nn_batch", ".", "__slices__", "[", "'x'", "]", "[", "nn_slices", "[", "i", "]", "+", "0", "]", ",", "\n", "nn_batch", ".", "__slices__", "[", "'x'", "]", "[", "nn_slices", "[", "i", "]", "+", "1", "]", "-", "\n", "nn_batch", ".", "__slices__", "[", "'x'", "]", "[", "nn_slices", "[", "i", "]", "+", "0", "]", ")", "\n", "labels_s", "=", "nn_batch", ".", "label_node_ids", ".", "narrow", "(", "0", ",", "nn_batch", ".", "__slices__", "[", "'x'", "]", "[", "nn_slices", "[", "i", "]", "+", "0", "]", ",", "\n", "nn_batch", ".", "__slices__", "[", "'x'", "]", "[", "nn_slices", "[", "i", "]", "+", "1", "]", "-", "\n", "nn_batch", ".", "__slices__", "[", "'x'", "]", "[", "nn_slices", "[", "i", "]", "+", "0", "]", ")", "\n", "repr_t", "=", "sub_batch_repr", ".", "narrow", "(", "0", ",", "nn_batch", ".", "__slices__", "[", "'x'", "]", "[", "nn_slices", "[", "i", "]", "+", "1", "]", ",", "\n", "nn_batch", ".", "__slices__", "[", "'x'", "]", "[", "nn_slices", "[", "i", "+", "1", "]", "]", "-", "\n", "nn_batch", ".", "__slices__", "[", "'x'", "]", "[", "nn_slices", "[", "i", "]", "+", "1", "]", ")", "\n", "labels_t", "=", "nn_batch", ".", "label_node_ids", ".", "narrow", "(", "0", ",", "nn_batch", ".", "__slices__", "[", "'x'", "]", "[", "nn_slices", "[", "i", "]", "+", "1", "]", ",", "\n", "nn_batch", ".", "__slices__", "[", "'x'", "]", "[", "nn_slices", "[", "i", "+", "1", "]", "]", "-", "\n", "nn_batch", ".", "__slices__", "[", "'x'", "]", "[", "nn_slices", "[", "i", "]", "+", "1", "]", ")", "\n", "label_identifiers", "=", "nn_batch", ".", "x_batch", ".", "narrow", "(", "0", ",", "nn_batch", ".", "__slices__", "[", "'x'", "]", "[", "nn_slices", "[", "i", "]", "+", "1", "]", ",", "\n", "nn_batch", ".", "__slices__", "[", "'x'", "]", "[", "nn_slices", "[", "i", "+", "1", "]", "]", "-", "\n", "nn_batch", ".", "__slices__", "[", "'x'", "]", "[", "nn_slices", "[", "i", "]", "+", "1", "]", ")", "[", "labels_t", "]", "\n", "assert", "label_identifiers", ".", "min", "(", ")", ">=", "0", "\n", "label_identifiers", "=", "label_identifiers", "-", "label_identifiers", ".", "min", "(", ")", "\n", "label_identifiers", "=", "label_identifiers", ".", "to", "(", "repr_s", ".", "device", ")", "\n", "dists", "=", "self", ".", "dist_fn", "(", "repr_s", ",", "repr_t", "[", "labels_t", "]", ",", "target_identifiers", "=", "label_identifiers", ")", "\n", "mask", "=", "(", "(", "labels_s", "==", "1.0", ")", "+", "(", "\n", "torch", ".", "FloatTensor", "(", "len", "(", "dists", ")", ")", ".", "uniform_", "(", ")", "<", "self", ".", "training_args", ".", "sampling", ")", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "contrast_loss", "=", "self", ".", "loss", "(", "dists", "[", "mask", "]", ",", "labels_s", "[", "mask", "]", ")", "/", "new_batch_len", "\n", "loss_scale", "[", "0", "]", "+=", "contrast_loss", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "item", "(", ")", "\n", "if", "loss", "is", "None", ":", "\n", "                        ", "loss", "=", "contrast_loss", "\n", "", "else", ":", "\n", "                        ", "loss", "+=", "contrast_loss", "\n", "", "if", "self", ".", "training_args", ".", "task", "==", "'kbc'", "and", "self", ".", "model_args", ".", "use_scoring_head", ":", "\n", "                        ", "seeds_s", "=", "nn_batch", ".", "seed_node_ids", ".", "narrow", "(", "0", ",", "nn_batch", ".", "__slices__", "[", "'x'", "]", "[", "nn_slices", "[", "i", "]", "+", "0", "]", ",", "\n", "nn_batch", ".", "__slices__", "[", "'x'", "]", "[", "nn_slices", "[", "i", "]", "+", "1", "]", "-", "\n", "nn_batch", ".", "__slices__", "[", "'x'", "]", "[", "nn_slices", "[", "i", "]", "+", "0", "]", ")", "\n", "rel_ids", "=", "torch", ".", "LongTensor", "(", "[", "nn_batch", ".", "query_str", "[", "i", "]", "]", ")", ".", "to", "(", "repr_s", ".", "device", ")", "\n", "head_repr", "=", "self", ".", "model", ".", "run_scoring_head", "(", "repr_s", "[", "seeds_s", "]", ",", "rel_ids", ")", "\n", "l2_dist", "=", "self", ".", "scorer_dist_fn", "(", "repr_s", ",", "head_repr", ")", "\n", "supervised_loss", "=", "self", ".", "scorer_loss_fn", "(", "l2_dist", "[", "mask", "]", ",", "labels_s", "[", "mask", "]", ")", "/", "new_batch_len", "\n", "loss", "+=", "supervised_loss", "\n", "loss_scale", "[", "1", "]", "+=", "supervised_loss", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "item", "(", ")", "\n", "", "", "if", "torch", ".", "isnan", "(", "loss", ")", ":", "\n", "                    ", "stop_training", "=", "True", "\n", "exit_by_error", "=", "True", "\n", "logger", ".", "warning", "(", "\"NaN observed in loss. Terminating run.\"", ")", "\n", "if", "self", ".", "training_args", ".", "use_wandb", ":", "\n", "                        ", "wandb", ".", "log", "(", "{", "\"abort_code\"", ":", "\"loss_nan\"", "}", ")", "\n", "", "break", "\n", "", "if", "self", ".", "training_args", ".", "gradient_accumulation_steps", ">", "1", ":", "\n", "                    ", "loss", "=", "loss", "/", "self", ".", "training_args", ".", "gradient_accumulation_steps", "\n", "", "loss", ".", "backward", "(", ")", "\n", "curr_batch_loss", "+=", "loss", ".", "item", "(", ")", "\n", "running_loss", ".", "append", "(", "curr_batch_loss", ")", "\n", "local_step", "+=", "1", "\n", "if", "self", ".", "training_args", ".", "use_wandb", ":", "\n", "# tracks loss on current batch", "\n", "                    ", "wandb", ".", "log", "(", "{", "'loss'", ":", "curr_batch_loss", "}", ",", "commit", "=", "False", ")", "\n", "", "if", "local_step", "%", "self", ".", "training_args", ".", "gradient_accumulation_steps", "==", "0", ":", "\n", "                    ", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "trainable_params", ",", "self", ".", "training_args", ".", "max_grad_norm", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "self", ".", "scheduler", ".", "step", "(", ")", "\n", "# Bookkeeping", "\n", "self", ".", "global_step", "+=", "1", "\n", "if", "0", "<", "self", ".", "training_args", ".", "max_steps", "<=", "self", ".", "global_step", ":", "\n", "                        ", "stop_training", "=", "True", "\n", "", "if", "self", ".", "training_args", ".", "use_wandb", ":", "\n", "# total_loss tracks accumulated loss between update steps", "\n", "                        ", "wandb", ".", "log", "(", "{", "'total_loss'", ":", "np", ".", "sum", "(", "running_loss", ")", ",", "'global_step'", ":", "self", ".", "global_step", "}", ",", "commit", "=", "False", ")", "\n", "", "if", "self", ".", "global_step", "%", "self", ".", "training_args", ".", "logging_steps", "==", "0", "or", "stop_training", ":", "\n", "                        ", "if", "len", "(", "loss_scale", ")", "==", "0", ":", "\n", "                            ", "loss_scale", "=", "[", "1.0", ",", "1.0", "]", "\n", "", "logger", ".", "info", "(", "f\"Epoch: {epoch}, Batch: {batch_ctr}, Loss: {np.sum(running_loss):0.6g}, \"", "\n", "f\"Loss Scale: {loss_scale}\"", ")", "\n", "", "running_loss", "=", "[", "]", "\n", "loss_scale", "=", "[", "0.0", ",", "0.0", "]", "\n", "if", "self", ".", "global_step", "%", "self", ".", "training_args", ".", "eval_steps", "==", "0", ":", "\n", "                        ", "self", ".", "evaluate", "(", "from_train", "=", "True", ")", "\n", "if", "self", ".", "early_stopping", ":", "\n", "                            ", "try", ":", "\n", "                                ", "self", ".", "early_stopping", "(", "self", ".", "best_metric", ")", "\n", "", "except", "EarlyStoppingException", "as", "e", ":", "\n", "                                ", "logger", ".", "error", "(", "str", "(", "e", ")", ")", "\n", "stop_training", "=", "True", "\n", "", "", "", "if", "self", ".", "best_ckpt_step", "==", "self", ".", "global_step", "or", "self", ".", "global_step", "%", "self", ".", "training_args", ".", "save_steps", "==", "0", ":", "\n", "                        ", "self", ".", "save", "(", ")", "\n", "", "", "if", "self", ".", "training_args", ".", "use_wandb", ":", "\n", "                    ", "wandb", ".", "log", "(", "{", "'local_step'", ":", "local_step", "}", ")", "\n", "", "if", "stop_training", ":", "\n", "                    ", "logger", ".", "info", "(", "'max_steps reached. Stop training'", ")", "\n", "break", "\n", "\n", "", "", "", "if", "not", "exit_by_error", ":", "\n", "            ", "self", ".", "evaluate", "(", "from_train", "=", "True", ")", "\n", "if", "self", ".", "best_ckpt_step", "==", "self", ".", "global_step", ":", "\n", "                ", "self", ".", "save", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.src.model_trainer.ModelTrainer.evaluate_on_dataloader": [[251, 414], ["tqdm.tqdm.tqdm", "results.pop", "results.items", "enumerate", "model_trainer.ModelTrainer.neighbors", "model_trainer.ModelTrainer.subgraphs", "nn_batch.x.to", "nn_batch.edge_index.to", "nn_batch.edge_attr.to", "range", "k.startswith", "nn_batch.dist_feats.to", "model_trainer.ModelTrainer.query_encoder", "model_trainer.ModelTrainer.model", "model_trainer.ModelTrainer.model", "len", "int", "model_trainer.ModelTrainer.narrow", "model_trainer.ModelTrainer.narrow", "nn_batch.label_node_ids.narrow", "label_identifiers.to.to.to", "model_trainer.ModelTrainer.dist_fn().cpu().numpy", "numpy.argsort", "isinstance", "numpy.asarray", "nn_batch.x_batch.narrow", "len", "global_config.logger.info", "label_identifiers.to.to.min", "label_identifiers.to.to.min", "set", "batch[].x[].numpy", "results.setdefault().append", "results.setdefault().append", "results.setdefault().append", "results.get", "model_trainer.ModelTrainer.dist_fn().cpu", "len", "global_config.logger.info", "len", "range", "results.get", "numpy.mean", "numpy.max", "numpy.mean", "numpy.mean", "results.get", "numpy.max", "results.get", "batch[].x[].numpy", "range", "range", "numpy.where", "results.get", "len", "len", "example_ranks.append", "results.setdefault", "results.setdefault", "results.setdefault", "numpy.mean", "results.get", "results.get", "numpy.any", "numpy.any", "numpy.any", "enumerate", "range", "range", "model_trainer.ModelTrainer.dist_fn", "results.get", "results.get", "example_ranks.append", "numpy.array", "numpy.any", "results.get", "len", "len", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "filtered_answers.append", "results.get", "numpy.array", "results.get", "results.get", "results.get", "results.get"], "methods", ["None"], ["", "", "", "def", "evaluate_on_dataloader", "(", "self", ",", "dataloader", ",", "log_output", "=", "False", ")", ":", "\n", "        ", "output_log", "=", "{", "}", "\n", "results", "=", "{", "}", "\n", "for", "batch_ctr", ",", "batch", "in", "tqdm", "(", "enumerate", "(", "dataloader", ")", ",", "desc", "=", "f\"[Evaluate]\"", ")", ":", "\n", "# First entry in the batch is the query, rest are nearest neighbors", "\n", "            ", "nn_list", ",", "nn_slices", "=", "self", ".", "neighbors", "(", "batch", ",", "k", "=", "self", ".", "data_args", ".", "num_neighbors_eval", ")", "\n", "nn_batch", ",", "nn_slices", "=", "self", ".", "subgraphs", "(", "query_and_knn_list", "=", "nn_list", ",", "nn_slices", "=", "nn_slices", ")", "\n", "nn_batch", ".", "x", "=", "nn_batch", ".", "x", ".", "to", "(", "self", ".", "device", ")", "\n", "nn_batch", ".", "edge_index", "=", "nn_batch", ".", "edge_index", ".", "to", "(", "self", ".", "device", ")", "\n", "nn_batch", ".", "edge_attr", "=", "nn_batch", ".", "edge_attr", ".", "to", "(", "self", ".", "device", ")", "\n", "if", "self", ".", "model_args", ".", "add_dist_feature", ":", "\n", "                ", "nn_batch", ".", "dist_feats", "=", "nn_batch", ".", "dist_feats", ".", "to", "(", "self", ".", "device", ")", "\n", "", "if", "self", ".", "model_args", ".", "use_query_aware_gcn", ":", "\n", "                ", "query_embeddings", "=", "self", ".", "query_encoder", "(", "ex_ids", "=", "nn_batch", ".", "ex_id", ",", "split", "=", "nn_batch", ".", "split", ",", "\n", "text_batch", "=", "nn_batch", ".", "query_str", ",", "device", "=", "self", ".", "device", ")", "\n", "sub_batch_repr", "=", "self", ".", "model", "(", "nn_batch", ".", "x", ",", "nn_batch", ".", "edge_index", ",", "nn_batch", ".", "edge_attr", ",", "\n", "query_embeddings", ",", "nn_batch", ".", "x_batch", ",", "nn_batch", ".", "edge_attr_batch", ",", "\n", "nn_batch", ".", "dist_feats", ")", "\n", "", "else", ":", "\n", "                ", "sub_batch_repr", "=", "self", ".", "model", "(", "nn_batch", ".", "x", ",", "nn_batch", ".", "edge_index", ",", "nn_batch", ".", "edge_attr", ",", "nn_batch", ".", "dist_feats", ")", "\n", "", "for", "i", "in", "range", "(", "len", "(", "batch", ")", ")", ":", "\n", "# s corresponds to query", "\n", "# t corresponds to neighbors", "\n", "                ", "ex_id", "=", "int", "(", "batch", "[", "i", "]", ".", "ex_id", ")", "\n", "repr_s", "=", "sub_batch_repr", ".", "narrow", "(", "0", ",", "nn_batch", ".", "__slices__", "[", "'x'", "]", "[", "nn_slices", "[", "i", "]", "+", "0", "]", ",", "\n", "nn_batch", ".", "__slices__", "[", "'x'", "]", "[", "nn_slices", "[", "i", "]", "+", "1", "]", "-", "\n", "nn_batch", ".", "__slices__", "[", "'x'", "]", "[", "nn_slices", "[", "i", "]", "+", "0", "]", ")", "\n", "repr_t", "=", "sub_batch_repr", ".", "narrow", "(", "0", ",", "nn_batch", ".", "__slices__", "[", "'x'", "]", "[", "nn_slices", "[", "i", "]", "+", "1", "]", ",", "\n", "nn_batch", ".", "__slices__", "[", "'x'", "]", "[", "nn_slices", "[", "i", "+", "1", "]", "]", "-", "\n", "nn_batch", ".", "__slices__", "[", "'x'", "]", "[", "nn_slices", "[", "i", "]", "+", "1", "]", ")", "\n", "labels_t", "=", "nn_batch", ".", "label_node_ids", ".", "narrow", "(", "0", ",", "nn_batch", ".", "__slices__", "[", "'x'", "]", "[", "nn_slices", "[", "i", "]", "+", "1", "]", ",", "\n", "nn_batch", ".", "__slices__", "[", "'x'", "]", "[", "nn_slices", "[", "i", "+", "1", "]", "]", "-", "\n", "nn_batch", ".", "__slices__", "[", "'x'", "]", "[", "nn_slices", "[", "i", "]", "+", "1", "]", ")", "\n", "label_identifiers", "=", "nn_batch", ".", "x_batch", ".", "narrow", "(", "0", ",", "nn_batch", ".", "__slices__", "[", "'x'", "]", "[", "nn_slices", "[", "i", "]", "+", "1", "]", ",", "\n", "nn_batch", ".", "__slices__", "[", "'x'", "]", "[", "nn_slices", "[", "i", "+", "1", "]", "]", "-", "\n", "nn_batch", ".", "__slices__", "[", "'x'", "]", "[", "nn_slices", "[", "i", "]", "+", "1", "]", ")", "[", "labels_t", "]", "\n", "if", "len", "(", "label_identifiers", ")", "==", "0", ":", "\n", "# all the neighbors have zero answers, which is unfortunate", "\n", "                    ", "logger", ".", "info", "(", "\"None of the nearest neighbors have answer nodes...ignoring\"", ")", "\n", "results", "[", "'count'", "]", "=", "1", "+", "results", ".", "get", "(", "'count'", ",", "0.0", ")", "# penalize", "\n", "if", "log_output", ":", "\n", "                        ", "output_log", "[", "ex_id", "]", "=", "{", "}", "\n", "output_log", "[", "ex_id", "]", "[", "\"qid\"", "]", "=", "batch", "[", "i", "]", ".", "query", "\n", "output_log", "[", "ex_id", "]", "[", "\"query_str\"", "]", "=", "batch", "[", "i", "]", ".", "query_str", "\n", "output_log", "[", "ex_id", "]", "[", "\"gold_answer\"", "]", "=", "batch", "[", "i", "]", ".", "answers", "\n", "output_log", "[", "ex_id", "]", "[", "\"KNN\"", "]", "=", "[", "nn_batch", "[", "k", "]", ".", "query_str", "for", "k", "in", "\n", "range", "(", "nn_slices", "[", "i", "]", "+", "1", ",", "nn_slices", "[", "i", "+", "1", "]", ")", "]", "\n", "output_log", "[", "ex_id", "]", "[", "\"KNN_ids\"", "]", "=", "[", "nn_batch", "[", "k", "]", ".", "query", "for", "k", "in", "\n", "range", "(", "nn_slices", "[", "i", "]", "+", "1", ",", "nn_slices", "[", "i", "+", "1", "]", ")", "]", "\n", "output_log", "[", "ex_id", "]", "[", "\n", "\"comment\"", "]", "=", "\"None of the nearest neighbors have answer nodes...ignoring and penalizing\"", "\n", "", "continue", "\n", "", "assert", "label_identifiers", ".", "min", "(", ")", ">=", "0", "\n", "label_identifiers", "=", "label_identifiers", "-", "label_identifiers", ".", "min", "(", ")", "\n", "label_identifiers", "=", "label_identifiers", ".", "to", "(", "repr_s", ".", "device", ")", "\n", "dists", "=", "self", ".", "dist_fn", "(", "repr_s", ",", "repr_t", "[", "labels_t", "]", ",", "target_identifiers", "=", "label_identifiers", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "if", "log_output", ":", "\n", "                    ", "output_log", "[", "ex_id", "]", "=", "{", "}", "\n", "output_log", "[", "ex_id", "]", "[", "\"qid\"", "]", "=", "batch", "[", "i", "]", ".", "query", "\n", "output_log", "[", "ex_id", "]", "[", "\"query_str\"", "]", "=", "batch", "[", "i", "]", ".", "query_str", "\n", "output_log", "[", "ex_id", "]", "[", "\"gold_answer\"", "]", "=", "batch", "[", "i", "]", ".", "answers", "\n", "output_log", "[", "ex_id", "]", "[", "\"KNN\"", "]", "=", "[", "nn_batch", "[", "k", "]", ".", "query_str", "for", "k", "in", "\n", "range", "(", "nn_slices", "[", "i", "]", "+", "1", ",", "nn_slices", "[", "i", "+", "1", "]", ")", "]", "\n", "output_log", "[", "ex_id", "]", "[", "\"KNN_ids\"", "]", "=", "[", "nn_batch", "[", "k", "]", ".", "query", "for", "k", "in", "\n", "range", "(", "nn_slices", "[", "i", "]", "+", "1", ",", "nn_slices", "[", "i", "+", "1", "]", ")", "]", "\n", "", "pred_ranks", "=", "np", ".", "argsort", "(", "dists", ")", "\n", "if", "self", ".", "training_args", ".", "task", "==", "'pt_match'", ":", "\n", "                    ", "ex_labels", "=", "set", "(", "np", ".", "where", "(", "batch", "[", "i", "]", ".", "label_node_ids", "==", "1", ")", "[", "0", "]", ")", "\n", "if", "len", "(", "batch", "[", "i", "]", ".", "answers", ")", "==", "0", ":", "\n", "# answer was an empty list; happens in WebQSP", "\n", "                        ", "logger", ".", "info", "(", "\"Answer is empty list, ignoring...\"", ")", "\n", "results", "[", "'count'", "]", "=", "1", "+", "results", ".", "get", "(", "'count'", ",", "0.0", ")", "\n", "for", "at_k", "in", "[", "1", ",", "3", ",", "5", ",", "10", "]", ":", "\n", "                            ", "results", "[", "f'avg_hits@{at_k}'", "]", "=", "results", ".", "get", "(", "f'avg_hits@{at_k}'", ",", "0.0", ")", "+", "1.0", "\n", "results", "[", "f'avg_weak_hits@{at_k}'", "]", "=", "results", ".", "get", "(", "f'avg_weak_hits@{at_k}'", ",", "0.0", ")", "+", "1.0", "\n", "", "if", "log_output", ":", "\n", "                            ", "output_log", "[", "ex_id", "]", "[", "\n", "\"comment\"", "]", "=", "\"Answer list is empty. Getting a +1 for this following graftnet style evaluation\"", "\n", "", "continue", "\n", "", "example_ranks", "=", "[", "]", "\n", "pred_global_ids", "=", "batch", "[", "i", "]", ".", "x", "[", "pred_ranks", "]", ".", "numpy", "(", ")", "# map to global ids", "\n", "curr_rank", "=", "1", "\n", "if", "len", "(", "ex_labels", ")", ">", "0", ":", "\n", "                        ", "for", "node_id", "in", "pred_ranks", ":", "\n", "                            ", "if", "node_id", "in", "ex_labels", ":", "\n", "                                ", "example_ranks", ".", "append", "(", "curr_rank", ")", "\n", "if", "len", "(", "example_ranks", ")", "==", "len", "(", "ex_labels", ")", ":", "\n", "                                    ", "break", "\n", "", "", "else", ":", "\n", "                                ", "curr_rank", "+=", "1", "\n", "", "", "assert", "len", "(", "ex_labels", ")", "==", "len", "(", "example_ranks", ")", "\n", "", "if", "self", ".", "data_args", ".", "dataset_name", "!=", "'synthetic'", ":", "\n", "# Penalize ranking for answer entities outside the k-hop subgraph", "\n", "                        ", "for", "_", "in", "range", "(", "batch", "[", "i", "]", ".", "penalty", ")", ":", "\n", "                            ", "example_ranks", ".", "append", "(", "(", "batch", "[", "i", "]", ".", "num_nodes", "+", "self", ".", "dataset_obj", ".", "n_entities", ")", "/", "2", ")", "\n", "", "", "results", "[", "'count'", "]", "=", "1", "+", "results", ".", "get", "(", "'count'", ",", "0.0", ")", "\n", "results", ".", "setdefault", "(", "'mean_ranks'", ",", "[", "]", ")", ".", "append", "(", "np", ".", "mean", "(", "example_ranks", ")", ")", "\n", "results", ".", "setdefault", "(", "'max_ranks'", ",", "[", "]", ")", ".", "append", "(", "np", ".", "max", "(", "example_ranks", ")", ")", "\n", "results", ".", "setdefault", "(", "'hits@1'", ",", "[", "]", ")", ".", "append", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "example_ranks", ")", "==", "1", ")", ")", "\n", "results", "[", "'avg_mean_ranks'", "]", "=", "np", ".", "mean", "(", "example_ranks", ")", "+", "results", ".", "get", "(", "'avg_mean_ranks'", ",", "0.0", ")", "\n", "results", "[", "'avg_max_ranks'", "]", "=", "np", ".", "max", "(", "example_ranks", ")", "+", "results", ".", "get", "(", "'avg_max_ranks'", ",", "0.0", ")", "\n", "for", "at_k", "in", "[", "1", ",", "3", ",", "5", ",", "10", "]", ":", "\n", "                        ", "results", "[", "f'avg_hits@{at_k}'", "]", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "example_ranks", ")", "<=", "at_k", ")", "+", "results", ".", "get", "(", "f'avg_hits@{at_k}'", ",", "0.0", ")", "\n", "results", "[", "f'avg_weak_hits@{at_k}'", "]", "=", "results", ".", "get", "(", "f'avg_weak_hits@{at_k}'", ",", "0.0", ")", "+", "(", "1.0", "if", "np", ".", "any", "(", "np", ".", "array", "(", "example_ranks", ")", "<=", "at_k", ")", "else", "0.0", ")", "\n", "", "if", "log_output", ":", "\n", "# output_log[ex_id]['ranks'] = example_ranks", "\n", "                        ", "output_log", "[", "ex_id", "]", "[", "\"is_hits@1_correct\"", "]", "=", "1.0", "if", "np", ".", "any", "(", "np", ".", "array", "(", "example_ranks", ")", "<=", "1", ")", "else", "0.0", "\n", "output_log", "[", "ex_id", "]", "[", "\"is_hits@3_correct\"", "]", "=", "1.0", "if", "np", ".", "any", "(", "np", ".", "array", "(", "example_ranks", ")", "<=", "3", ")", "else", "0.0", "\n", "output_log", "[", "ex_id", "]", "[", "\"is_hits@5_correct\"", "]", "=", "1.0", "if", "np", ".", "any", "(", "np", ".", "array", "(", "example_ranks", ")", "<=", "5", ")", "else", "0.0", "\n", "output_log", "[", "ex_id", "]", "[", "\"top_5_preds\"", "]", "=", "[", "self", ".", "dataset_obj", ".", "id2ent", "[", "pred_id", "]", "for", "pred_id", "in", "\n", "pred_global_ids", "[", ":", "5", "]", "]", "\n", "", "", "elif", "self", ".", "training_args", ".", "task", "==", "'kbc'", ":", "\n", "# kbc eval is a bit different since each missing edge (e1, r, e2) is considered", "\n", "# a separate query, even if there are multiple missing (e1, r, [e2..]) edges", "\n", "                    ", "e1", ",", "r", "=", "batch", "[", "i", "]", ".", "query", "\n", "assert", "self", ".", "dataset_obj", ".", "all_kg_map", "is", "not", "None", "\n", "all_gold_answers", "=", "self", ".", "dataset_obj", ".", "all_kg_map", "[", "(", "e1", ",", "r", ")", "]", "\n", "gold_answers", "=", "batch", "[", "i", "]", ".", "answers", "\n", "# map pred_ranks from subgraph to global ids", "\n", "pred_ranks", "=", "batch", "[", "i", "]", ".", "x", "[", "pred_ranks", "]", ".", "numpy", "(", ")", "\n", "for", "gold_answer", "in", "gold_answers", ":", "\n", "# remove all other gold answers from prediction", "\n", "                        ", "filtered_answers", "=", "[", "]", "\n", "for", "pred", "in", "pred_ranks", ":", "\n", "                            ", "pred", "=", "self", ".", "dataset_obj", ".", "id2ent", "[", "pred", "]", "\n", "if", "pred", "in", "all_gold_answers", "and", "pred", "!=", "gold_answer", ":", "\n", "                                ", "continue", "\n", "", "else", ":", "\n", "                                ", "filtered_answers", ".", "append", "(", "pred", ")", "\n", "", "", "rank", "=", "None", "\n", "for", "i", ",", "e_to_check", "in", "enumerate", "(", "filtered_answers", ")", ":", "\n", "                            ", "if", "gold_answer", "==", "e_to_check", ":", "\n", "                                ", "rank", "=", "i", "+", "1", "\n", "break", "\n", "", "", "results", "[", "'count'", "]", "=", "1", "+", "results", ".", "get", "(", "'count'", ",", "0.0", ")", "\n", "if", "rank", "is", "not", "None", ":", "\n", "                            ", "if", "rank", "<=", "10", ":", "\n", "                                ", "results", "[", "\"avg_hits@10\"", "]", "=", "1", "+", "results", ".", "get", "(", "\"avg_hits@10\"", ",", "0.0", ")", "\n", "if", "rank", "<=", "5", ":", "\n", "                                    ", "results", "[", "\"avg_hits@5\"", "]", "=", "1", "+", "results", ".", "get", "(", "\"avg_hits@5\"", ",", "0.0", ")", "\n", "if", "rank", "<=", "3", ":", "\n", "                                        ", "results", "[", "\"avg_hits@3\"", "]", "=", "1", "+", "results", ".", "get", "(", "\"avg_hits@3\"", ",", "0.0", ")", "\n", "if", "rank", "<=", "1", ":", "\n", "                                            ", "results", "[", "\"avg_hits@1\"", "]", "=", "1", "+", "results", ".", "get", "(", "\"avg_hits@1\"", ",", "0.0", ")", "\n", "", "", "", "", "results", "[", "\"avg_rr\"", "]", "=", "(", "1.0", "/", "rank", ")", "+", "results", ".", "get", "(", "\"avg_rr\"", ",", "0.0", ")", "\n", "if", "log_output", ":", "\n", "# output_log[ex_id]['ranks'] = example_ranks", "\n", "                                ", "output_log", "[", "ex_id", "]", "[", "\"is_hits@1_correct\"", "]", "=", "1.0", "if", "rank", "<=", "1", "else", "0.0", "\n", "output_log", "[", "ex_id", "]", "[", "\"is_hits@3_correct\"", "]", "=", "1.0", "if", "rank", "<=", "3", "else", "0.0", "\n", "output_log", "[", "ex_id", "]", "[", "\"is_hits@5_correct\"", "]", "=", "1.0", "if", "rank", "<=", "5", "else", "0.0", "\n", "output_log", "[", "ex_id", "]", "[", "\"is_hits@10_correct\"", "]", "=", "1.0", "if", "rank", "<=", "10", "else", "0.0", "\n", "# logger.info(\"None counter is {}\".format(none_ctr))", "\n", "", "", "", "", "", "", "final_results", "=", "{", "}", "\n", "normalizer", "=", "results", ".", "pop", "(", "'count'", ")", "\n", "for", "k", ",", "v", "in", "results", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", ".", "startswith", "(", "'avg'", ")", ":", "\n", "                ", "final_results", "[", "k", "]", "=", "v", "/", "normalizer", "\n", "", "else", ":", "\n", "                ", "assert", "isinstance", "(", "v", ",", "list", ")", "\n", "final_results", "[", "k", "]", "=", "np", ".", "asarray", "(", "v", ")", "\n", "", "", "return", "final_results", ",", "output_log", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.src.model_trainer.ModelTrainer.evaluate": [[415, 490], ["torch.no_grad", "global_config.logger.info", "time.time", "model_trainer.ModelTrainer.model.eval", "global_config.logger.info", "results.items", "global_config.logger.info", "model_trainer.ModelTrainer.query_encoder.eval", "model_trainer.ModelTrainer.evaluate_on_dataloader", "results.update", "output_log.update", "k.startswith", "global_config.logger.info", "global_config.logger.info", "global_config.logger.info", "global_config.logger.info", "global_config.logger.info", "global_config.logger.info", "global_config.logger.info", "wandb.log", "open", "json.dump", "results.items", "best_results.items", "global_config.logger.info", "global_config.logger.info", "global_config.logger.info", "global_config.logger.info", "global_config.logger.info", "global_config.logger.info", "global_config.logger.info", "os.path.join", "k.startswith", "results.items", "best_results.items", "results.items", "time.time", "init_results.items", "k.startswith", "isinstance", "isinstance"], "methods", ["home.repos.pwc.inspect_result.rajarshd_cbr-subg.src.model_trainer.ModelTrainer.evaluate_on_dataloader", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.compgcn.message_passing.MessagePassing.update", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.compgcn.message_passing.MessagePassing.update"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "evaluate", "(", "self", ",", "from_train", "=", "False", ",", "log_output", "=", "False", ")", ":", "\n", "        ", "logger", ".", "info", "(", "\"Starting eval...\"", ")", "\n", "st_time", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "if", "self", ".", "query_encoder", "is", "not", "None", ":", "\n", "            ", "self", ".", "query_encoder", ".", "eval", "(", ")", "\n", "", "output_log", "=", "{", "}", "\n", "results", "=", "{", "}", "\n", "if", "self", ".", "training_args", ".", "task", "==", "'pt_match'", "or", "self", ".", "training_args", ".", "task", "==", "'kbc'", ":", "\n", "            ", "eval_loaders", "=", "[", "(", "\"dev\"", ",", "self", ".", "dataset_obj", ".", "dev_dataloader", ")", "]", "\n", "", "else", ":", "\n", "            ", "eval_loaders", "=", "None", "\n", "", "for", "split", ",", "loader", "in", "eval_loaders", ":", "\n", "            ", "init_results", ",", "init_output_log", "=", "self", ".", "evaluate_on_dataloader", "(", "loader", ",", "log_output", ")", "\n", "results", ".", "update", "(", "{", "'{}_{}'", ".", "format", "(", "split", ",", "k", ")", ":", "v", "for", "k", ",", "v", "in", "init_results", ".", "items", "(", ")", "}", ")", "\n", "output_log", ".", "update", "(", "init_output_log", ")", "\n", "", "if", "log_output", ":", "\n", "            ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "training_args", ".", "output_dir", ",", "f'eval_log_{self.global_step}.json'", ")", ",", "'w'", ")", "as", "fout", ":", "\n", "                ", "json", ".", "dump", "(", "output_log", ",", "fout", ",", "indent", "=", "2", ")", "\n", "\n", "", "", "logger", ".", "info", "(", "\"[---- EVAL ----]\"", ")", "\n", "for", "k", ",", "v", "in", "results", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", ".", "startswith", "(", "'dev_avg'", ")", ":", "\n", "                ", "results", "[", "k", "]", "=", "v", "*", "self", ".", "dataset_obj", ".", "dev_penalty_multiplier", "\n", "", "", "if", "self", ".", "training_args", ".", "task", "==", "'pt_match'", ":", "\n", "            ", "logger", ".", "info", "(", "f\"Avg Mean Rank: {results['dev_avg_mean_ranks']}\"", ")", "\n", "logger", ".", "info", "(", "f\"Avg Max Rank: {results['dev_avg_max_ranks']}\"", ")", "\n", "logger", ".", "info", "(", "f\"Avg HITS@1: {results['dev_avg_hits@1']}\"", ")", "\n", "logger", ".", "info", "(", "f\"Avg Weak HITS@1: {results['dev_avg_weak_hits@1']}\"", ")", "\n", "if", "from_train", "and", "results", "[", "'dev_avg_weak_hits@1'", "]", ">", "self", ".", "best_metric", ":", "\n", "                ", "self", ".", "best_ckpt_step", "=", "self", ".", "global_step", "\n", "self", ".", "best_metric", "=", "results", "[", "'dev_avg_weak_hits@1'", "]", "\n", "self", ".", "weak_best_metric", "=", "results", "[", "'dev_avg_weak_hits@1'", "]", "\n", "# also log the best results in a different variable", "\n", "best_results", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "results", ".", "items", "(", ")", ":", "\n", "                    ", "if", "k", ".", "startswith", "(", "\"dev_avg_\"", ")", ":", "\n", "                        ", "best_results", "[", "\"best_\"", "+", "k", "]", "=", "v", "\n", "", "", "for", "k", ",", "_", "in", "best_results", ".", "items", "(", ")", ":", "\n", "                    ", "results", "[", "k", "]", "=", "best_results", "[", "k", "]", "\n", "", "", "results", "[", "'dev_best_metric_step'", "]", "=", "self", ".", "best_ckpt_step", "\n", "logger", ".", "info", "(", "\"Best metric till now...\"", ")", "\n", "logger", ".", "info", "(", "f\"Avg HITS@1: {self.best_metric}\"", ")", "\n", "logger", ".", "info", "(", "f\"Avg Weak HITS@1: {self.weak_best_metric}\"", ")", "\n", "", "elif", "self", ".", "training_args", ".", "task", "==", "'kbc'", ":", "\n", "# Account for ignoring queries", "\n", "# else:", "\n", "#     assert isinstance(v, np.ndarray) or isinstance(v, list)", "\n", "            ", "logger", ".", "info", "(", "f\"Avg HITS@1: {results['dev_avg_hits@1']}\"", ")", "\n", "logger", ".", "info", "(", "f\"Avg HITS@3: {results['dev_avg_hits@3']}\"", ")", "\n", "logger", ".", "info", "(", "f\"Avg HITS@5: {results['dev_avg_hits@5']}\"", ")", "\n", "logger", ".", "info", "(", "f\"Avg HITS@10: {results['dev_avg_hits@10']}\"", ")", "\n", "logger", ".", "info", "(", "f\"MRR: {results['dev_avg_rr']}\"", ")", "\n", "if", "from_train", "and", "results", "[", "'dev_avg_hits@1'", "]", ">", "self", ".", "best_metric", ":", "\n", "                ", "self", ".", "best_ckpt_step", "=", "self", ".", "global_step", "\n", "self", ".", "best_metric", "=", "results", "[", "'dev_avg_hits@1'", "]", "\n", "# also log the best results in a different variable", "\n", "best_results", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "results", ".", "items", "(", ")", ":", "\n", "                    ", "if", "k", ".", "startswith", "(", "\"dev_avg_\"", ")", ":", "\n", "                        ", "best_results", "[", "\"best_\"", "+", "k", "]", "=", "v", "\n", "", "", "for", "k", ",", "_", "in", "best_results", ".", "items", "(", ")", ":", "\n", "                    ", "results", "[", "k", "]", "=", "best_results", "[", "k", "]", "\n", "", "", "results", "[", "'dev_best_metric_step'", "]", "=", "self", ".", "best_ckpt_step", "\n", "logger", ".", "info", "(", "\"Best metric till now...\"", ")", "\n", "logger", ".", "info", "(", "f\"Avg HITS@1: {self.best_metric}\"", ")", "\n", "\n", "", "if", "self", ".", "training_args", ".", "use_wandb", ":", "\n", "            ", "if", "from_train", ":", "\n", "                ", "results", "[", "'global_step'", "]", "=", "self", ".", "global_step", "\n", "", "log_results", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "results", ".", "items", "(", ")", "if", "\n", "not", "isinstance", "(", "v", ",", "list", ")", "and", "not", "isinstance", "(", "v", ",", "np", ".", "ndarray", ")", "}", "\n", "wandb", ".", "log", "(", "log_results", ",", "commit", "=", "False", "if", "from_train", "else", "True", ")", "\n", "", "logger", ".", "info", "(", "\"Eval done!, took {} seconds\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "st_time", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.src.model_trainer.ModelTrainer.predict": [[491, 523], ["torch.no_grad", "model_trainer.ModelTrainer.model.eval", "global_config.logger.info", "results.items", "model_trainer.ModelTrainer.query_encoder.eval", "model_trainer.ModelTrainer.evaluate_on_dataloader", "results.update", "k.startswith", "global_config.logger.info", "global_config.logger.info", "global_config.logger.info", "global_config.logger.info", "wandb.log", "print", "print", "print", "init_results.items"], "methods", ["home.repos.pwc.inspect_result.rajarshd_cbr-subg.src.model_trainer.ModelTrainer.evaluate_on_dataloader", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.compgcn.message_passing.MessagePassing.update"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "predict", "(", "self", ")", ":", "\n", "        ", "self", ".", "model", ".", "eval", "(", ")", "\n", "if", "self", ".", "query_encoder", "is", "not", "None", ":", "\n", "            ", "self", ".", "query_encoder", ".", "eval", "(", ")", "\n", "", "results", "=", "{", "}", "\n", "if", "self", ".", "training_args", ".", "task", "==", "'pt_match'", "or", "self", ".", "training_args", ".", "task", "==", "'kbc'", ":", "\n", "            ", "eval_loaders", "=", "[", "(", "\"test\"", ",", "self", ".", "dataset_obj", ".", "test_dataloader", ")", "]", "\n", "", "else", ":", "\n", "            ", "eval_loaders", "=", "None", "\n", "", "for", "split", ",", "loader", "in", "eval_loaders", ":", "\n", "            ", "init_results", ",", "_", "=", "self", ".", "evaluate_on_dataloader", "(", "loader", ",", "log_output", "=", "False", ")", "\n", "results", ".", "update", "(", "{", "'{}_{}'", ".", "format", "(", "split", ",", "k", ")", ":", "v", "for", "k", ",", "v", "in", "init_results", ".", "items", "(", ")", "}", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"[---- PREDICT ----]\"", ")", "\n", "# Account for ignoring queries", "\n", "for", "k", ",", "v", "in", "results", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", ".", "startswith", "(", "'test_avg'", ")", ":", "\n", "                ", "results", "[", "k", "]", "=", "v", "*", "self", ".", "dataset_obj", ".", "test_penalty_multiplier", "\n", "", "", "if", "self", ".", "training_args", ".", "task", "==", "'pt_match'", ":", "\n", "            ", "logger", ".", "info", "(", "f\"Avg Mean Rank: {results['test_avg_mean_ranks']}\"", ")", "\n", "logger", ".", "info", "(", "f\"Avg Max Rank: {results['test_avg_max_ranks']}\"", ")", "\n", "logger", ".", "info", "(", "f\"Avg HITS@1: {results['test_avg_hits@1']}\"", ")", "\n", "logger", ".", "info", "(", "f\"Avg Weak HITS@1: {results['test_avg_weak_hits@1']}\"", ")", "\n", "", "elif", "self", ".", "training_args", ".", "task", "==", "'kbc'", ":", "\n", "# else:", "\n", "#     assert isinstance(v, np.ndarray) or isinstance(v, list)", "\n", "            ", "print", "(", "f\"Avg Mean Rank: {results[split + '_avg_mr']}\"", ")", "\n", "print", "(", "f\"Avg Mean Reciprocal Rank: {results[split + '_avg_mrr']}\"", ")", "\n", "print", "(", "f\"Avg HITS@1: {results[split + '_avg_hits@1']}\"", ")", "\n", "", "if", "self", ".", "training_args", ".", "use_wandb", ":", "\n", "            ", "wandb", ".", "log", "(", "results", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.src.model_trainer.ModelTrainer.save": [[524, 576], ["model_trainer.ModelTrainer.model.eval", "os.path.join", "os.path.join", "os.path.join", "model_trainer.ModelTrainer.saved_ckpts.append", "os.path.exists", "os.makedirs", "model_trainer.ModelTrainer.saved_ckpts.copy", "open", "torch.save", "open", "torch.save", "model_trainer.ModelTrainer.query_encoder.is_trainable", "os.path.join", "model_trainer.ModelTrainer.query_encoder.save", "open", "json.dump", "os.path.join", "os.path.join", "os.path.join", "model_trainer.ModelTrainer.remove", "len", "model_trainer.ModelTrainer.saved_ckpts.remove", "os.path.join", "os.remove", "os.path.join", "os.remove", "os.path.join", "os.remove", "model_trainer.ModelTrainer.model.state_dict", "model_trainer.ModelTrainer.optimizer.state_dict", "open", "torch.save", "open", "torch.save", "model_trainer.ModelTrainer.query_encoder.is_trainable", "os.path.join", "model_trainer.ModelTrainer.query_encoder.save", "open", "json.dump", "model_trainer.ModelTrainer.query_encoder.is_trainable", "os.path.join", "shutil.rmtree", "model_trainer.ModelTrainer.model.state_dict", "model_trainer.ModelTrainer.optimizer.state_dict"], "methods", ["home.repos.pwc.inspect_result.rajarshd_cbr-subg.src.text_handler.QueryEncoder.save", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.src.text_handler.QueryEncoder.save", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.src.text_handler.QueryEncoder.is_trainable", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.src.text_handler.QueryEncoder.save", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.src.text_handler.QueryEncoder.save", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.src.text_handler.QueryEncoder.save", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.src.text_handler.QueryEncoder.is_trainable", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.src.text_handler.QueryEncoder.save", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.src.text_handler.QueryEncoder.is_trainable"], ["", "", "def", "save", "(", "self", ")", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "training_args", ".", "output_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "training_args", ".", "output_dir", ")", "\n", "", "if", "self", ".", "training_args", ".", "save_total_limit", "is", "not", "None", ":", "\n", "# Limit the total amount of checkpoints", "\n", "            ", "past_ckpts", "=", "self", ".", "saved_ckpts", ".", "copy", "(", ")", "\n", "if", "self", ".", "best_ckpt_step", "in", "past_ckpts", ":", "\n", "                ", "past_ckpts", ".", "remove", "(", "self", ".", "best_ckpt_step", ")", "\n", "", "if", "len", "(", "past_ckpts", ")", ">=", "self", ".", "training_args", ".", "save_total_limit", ":", "\n", "# Delete oldest checkpoint", "\n", "                ", "ckpt_to_delete", "=", "past_ckpts", "[", "0", "]", "\n", "self", ".", "saved_ckpts", ".", "remove", "(", "ckpt_to_delete", ")", "\n", "ckpt_filenm", "=", "os", ".", "path", ".", "join", "(", "self", ".", "training_args", ".", "output_dir", ",", "f\"ckpt{ckpt_to_delete}_pytorch_model.bin\"", ")", "\n", "os", ".", "remove", "(", "ckpt_filenm", ")", "\n", "opt_filenm", "=", "os", ".", "path", ".", "join", "(", "self", ".", "training_args", ".", "output_dir", ",", "f\"ckpt{ckpt_to_delete}_optimizer.pt\"", ")", "\n", "os", ".", "remove", "(", "opt_filenm", ")", "\n", "if", "self", ".", "query_encoder", "is", "not", "None", "and", "self", ".", "query_encoder", ".", "is_trainable", "(", ")", ":", "\n", "                    ", "encoder_dirnm", "=", "os", ".", "path", ".", "join", "(", "self", ".", "training_args", ".", "output_dir", ",", "f\"ckpt{ckpt_to_delete}\"", ")", "\n", "shutil", ".", "rmtree", "(", "encoder_dirnm", ")", "\n", "", "opt_filenm", "=", "os", ".", "path", ".", "join", "(", "self", ".", "training_args", ".", "output_dir", ",", "f\"ckpt{ckpt_to_delete}_args.json\"", ")", "\n", "os", ".", "remove", "(", "opt_filenm", ")", "\n", "\n", "", "", "self", ".", "model", ".", "eval", "(", ")", "\n", "ckpt_filenm", "=", "os", ".", "path", ".", "join", "(", "self", ".", "training_args", ".", "output_dir", ",", "f\"ckpt{self.global_step}_pytorch_model.bin\"", ")", "\n", "with", "open", "(", "ckpt_filenm", ",", "'wb'", ")", "as", "fout", ":", "\n", "            ", "torch", ".", "save", "(", "self", ".", "model", ".", "state_dict", "(", ")", ",", "fout", ")", "\n", "", "opt_filenm", "=", "os", ".", "path", ".", "join", "(", "self", ".", "training_args", ".", "output_dir", ",", "f\"ckpt{self.global_step}_optimizer.pt\"", ")", "\n", "with", "open", "(", "opt_filenm", ",", "'wb'", ")", "as", "fout", ":", "\n", "            ", "torch", ".", "save", "(", "self", ".", "optimizer", ".", "state_dict", "(", ")", ",", "fout", ")", "\n", "", "if", "self", ".", "query_encoder", "is", "not", "None", "and", "self", ".", "query_encoder", ".", "is_trainable", "(", ")", ":", "\n", "            ", "encoder_dirnm", "=", "os", ".", "path", ".", "join", "(", "self", ".", "training_args", ".", "output_dir", ",", "f\"ckpt{self.global_step}\"", ")", "\n", "self", ".", "query_encoder", ".", "save", "(", "encoder_dirnm", ")", "\n", "", "args_file_name", "=", "os", ".", "path", ".", "join", "(", "self", ".", "training_args", ".", "output_dir", ",", "f\"ckpt{self.global_step}_args.json\"", ")", "\n", "# save the global step count", "\n", "args_to_save", "=", "{", "\"global_step\"", ":", "self", ".", "global_step", "}", "\n", "with", "open", "(", "args_file_name", ",", "\"w\"", ")", "as", "fout", ":", "\n", "            ", "json", ".", "dump", "(", "args_to_save", ",", "fout", ")", "\n", "", "if", "self", ".", "global_step", "==", "self", ".", "best_ckpt_step", ":", "\n", "# save another copy named as pytorch_model.bin and optimizer.pt", "\n", "            ", "ckpt_filenm", "=", "os", ".", "path", ".", "join", "(", "self", ".", "training_args", ".", "output_dir", ",", "\"pytorch_model.bin\"", ")", "\n", "with", "open", "(", "ckpt_filenm", ",", "'wb'", ")", "as", "fout", ":", "\n", "                ", "torch", ".", "save", "(", "self", ".", "model", ".", "state_dict", "(", ")", ",", "fout", ")", "\n", "", "opt_filenm", "=", "os", ".", "path", ".", "join", "(", "self", ".", "training_args", ".", "output_dir", ",", "\"optimizer.pt\"", ")", "\n", "with", "open", "(", "opt_filenm", ",", "'wb'", ")", "as", "fout", ":", "\n", "                ", "torch", ".", "save", "(", "self", ".", "optimizer", ".", "state_dict", "(", ")", ",", "fout", ")", "\n", "", "if", "self", ".", "query_encoder", "is", "not", "None", "and", "self", ".", "query_encoder", ".", "is_trainable", "(", ")", ":", "\n", "                ", "encoder_dirnm", "=", "os", ".", "path", ".", "join", "(", "self", ".", "training_args", ".", "output_dir", ",", "\"query_encoder\"", ")", "\n", "self", ".", "query_encoder", ".", "save", "(", "encoder_dirnm", ")", "\n", "", "args_filenm", "=", "os", ".", "path", ".", "join", "(", "self", ".", "training_args", ".", "output_dir", ",", "\"args.json\"", ")", "\n", "with", "open", "(", "args_filenm", ",", "'w'", ")", "as", "fout", ":", "\n", "                ", "json", ".", "dump", "(", "args_to_save", ",", "fout", ")", "\n", "", "", "self", ".", "saved_ckpts", ".", "append", "(", "self", ".", "global_step", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.src.dist_fns.L2Dist.__init__": [[7, 11], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.sample_synthetic_graph.Graph.__init__"], ["    ", "def", "__init__", "(", "self", ",", "stage1_aggr", "=", "'mean'", ",", "stage2_aggr", "=", "'mean'", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "L2Dist", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stage1_aggr", "=", "stage1_aggr", "if", "stage1_aggr", "!=", "'none'", "else", "None", "\n", "self", ".", "stage2_aggr", "=", "stage2_aggr", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.src.dist_fns.L2Dist.forward": [[12, 36], ["torch.sqrt", "torch_scatter.scatter_sum.mean", "torch_scatter.scatter_mean", "torch_scatter.scatter_sum.sum", "NotImplementedError", "torch_scatter.scatter_sum", "NotImplementedError", "target.unsqueeze", "pred.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "pred", ",", "target", ",", "target_identifiers", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        :param pred: Tensor of shape [n_nodes x embed_dim] where n_nodes is the number of nodes in the query graph\n        :param target: Tensor of shape [n_pos x embed_dim] where n_pos is the number of positives in all KN graphs\n        :param target_identifiers: Tensor of shape [n_pos] identifying which target belongs to which neighbor\n        :return: Tensor of shape [n_nodes] with the sum of L2 distance of predicted tensors to the target tensor\n        \"\"\"", "\n", "dist_mat", "=", "torch", ".", "sqrt", "(", "(", "target", ".", "unsqueeze", "(", "1", ")", "-", "pred", ".", "unsqueeze", "(", "0", ")", ")", ".", "square", "(", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "+", "1e-8", ")", "\n", "# dist_mat.shape : num_pos in KNN graph x num_nodes in query graph", "\n", "if", "self", ".", "stage1_aggr", "is", "not", "None", ":", "\n", "            ", "assert", "target_identifiers", "is", "not", "None", "\n", "# dist_mat.shape : number of KNN graphs x num_nodes in query graph", "\n", "if", "self", ".", "stage1_aggr", "==", "'mean'", ":", "\n", "                ", "dist_mat", "=", "scatter_mean", "(", "dist_mat", ",", "index", "=", "target_identifiers", ",", "dim", "=", "0", ")", "\n", "", "elif", "self", ".", "stage1_aggr", "==", "'sum'", ":", "\n", "                ", "dist_mat", "=", "scatter_sum", "(", "dist_mat", ",", "index", "=", "target_identifiers", ",", "dim", "=", "0", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", "f'No support for stage 1 aggr: {self.stage1_aggr}'", ")", "\n", "", "", "if", "self", ".", "stage2_aggr", "==", "'mean'", ":", "\n", "            ", "return", "dist_mat", ".", "mean", "(", "dim", "=", "0", ")", "\n", "", "elif", "self", ".", "stage2_aggr", "==", "'sum'", ":", "\n", "            ", "return", "dist_mat", ".", "sum", "(", "dim", "=", "0", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "f'No support for stage 2 aggr: {self.stage2_aggr}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.src.dist_fns.CosineDist.__init__": [[39, 43], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.sample_synthetic_graph.Graph.__init__"], ["    ", "def", "__init__", "(", "self", ",", "stage1_aggr", "=", "'mean'", ",", "stage2_aggr", "=", "'mean'", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "CosineDist", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stage1_aggr", "=", "stage1_aggr", "if", "stage1_aggr", "!=", "'none'", "else", "None", "\n", "self", ".", "stage2_aggr", "=", "stage2_aggr", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.src.dist_fns.CosineDist.forward": [[44, 71], ["target.unsqueeze", "pred.unsqueeze", "torch_scatter.scatter_sum.mean", "torch_scatter.scatter_mean", "torch_scatter.scatter_sum.sum", "NotImplementedError", "torch_scatter.scatter_sum", "NotImplementedError", "target.unsqueeze.norm", "pred.unsqueeze.norm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "pred", ",", "target", ",", "target_identifiers", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        :param pred: Tensor of shape [n_nodes x embed_dim] where n_nodes is the number of nodes in the query graph\n        :param target: Tensor of shape [n_pos x embed_dim] where n_pos is the number of positives in all KN graphs\n        :param target_identifiers: Tensor of shape [n_pos] identifying which target belongs to which neighbor\n        :return: Tensor of shape [n_nodes] with the sum of cosine distance of predicted tensors to the target tensor\n        \"\"\"", "\n", "# Distance is -1 x cosine similarity", "\n", "_x1", "=", "target", ".", "unsqueeze", "(", "1", ")", "\n", "_x2", "=", "pred", ".", "unsqueeze", "(", "0", ")", "\n", "dist_mat", "=", "-", "(", "(", "_x1", "*", "_x2", ")", "/", "(", "_x1", ".", "norm", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "*", "_x2", ".", "norm", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "+", "1e-8", ")", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "# dist_mat.shape : num_pos in KNN graph x num_nodes in query graph", "\n", "if", "self", ".", "stage1_aggr", "is", "not", "None", ":", "\n", "            ", "assert", "target_identifiers", "is", "not", "None", "\n", "# dist_mat.shape : number of KNN graphs x num_nodes in query graph", "\n", "if", "self", ".", "stage1_aggr", "==", "'mean'", ":", "\n", "                ", "dist_mat", "=", "scatter_mean", "(", "dist_mat", ",", "index", "=", "target_identifiers", ",", "dim", "=", "0", ")", "\n", "", "elif", "self", ".", "stage1_aggr", "==", "'sum'", ":", "\n", "                ", "dist_mat", "=", "scatter_sum", "(", "dist_mat", ",", "index", "=", "target_identifiers", ",", "dim", "=", "0", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", "f'No support for stage 1 aggr: {self.stage1_aggr}'", ")", "\n", "", "", "if", "self", ".", "stage2_aggr", "==", "'mean'", ":", "\n", "            ", "return", "dist_mat", ".", "mean", "(", "dim", "=", "0", ")", "\n", "", "elif", "self", ".", "stage2_aggr", "==", "'sum'", ":", "\n", "            ", "return", "dist_mat", ".", "sum", "(", "dim", "=", "0", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "f'No support for stage 2 aggr: {self.stage2_aggr}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.src.dist_fns.TransEDist.__init__": [[74, 77], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.sample_synthetic_graph.Graph.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gamma", ":", "float", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TransEDist", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gamma", "=", "gamma", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.src.dist_fns.TransEDist.forward": [[78, 95], ["torch.zeros", "torch.nn.functional.normalize", "torch.mm", "torch.norm", "len", "torch.arange().repeat_interleave().max", "obj_emb.unsqueeze", "torch.arange().repeat_interleave", "torch.arange", "torch.arange().repeat_interleave", "len", "torch.arange", "torch.arange", "len", "len"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "pred", ",", "target", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        :param pred:\n        :param target:\n        :return: Tensor of shape [n_nodes]\n        \"\"\"", "\n", "sub_emb", ",", "rel_emb", "=", "pred", "\n", "graph_batch", "=", "kwargs", "[", "'graph_batch'", "]", "\n", "node_batch_emb", "=", "kwargs", "[", "'node_emb'", "]", "[", "graph_batch", ".", "x", ",", ":", "]", "\n", "num_neighbors", "=", "kwargs", "[", "'num_neigh'", "]", "\n", "obj_emb", "=", "sub_emb", "+", "rel_emb", "# Get TransE representations", "\n", "x", "=", "self", ".", "gamma", "-", "torch", ".", "norm", "(", "obj_emb", ".", "unsqueeze", "(", "1", ")", "-", "node_batch_emb", ",", "p", "=", "1", ",", "dim", "=", "2", ")", "\n", "M", "=", "torch", ".", "zeros", "(", "torch", ".", "arange", "(", "len", "(", "num_neighbors", ")", ")", ".", "repeat_interleave", "(", "num_neighbors", ")", ".", "max", "(", ")", "+", "1", ",", "len", "(", "x", ")", ")", "\n", "M", "[", "torch", ".", "arange", "(", "len", "(", "num_neighbors", ")", ")", ".", "repeat_interleave", "(", "num_neighbors", ")", ",", "torch", ".", "arange", "(", "len", "(", "x", ")", ")", "]", "=", "1", "\n", "M", "=", "torch", ".", "nn", ".", "functional", ".", "normalize", "(", "M", ",", "p", "=", "1", ",", "dim", "=", "1", ")", "\n", "#        x = x[batch_offsets, torch.arange(len(batch_offsets))]", "\n", "return", "torch", ".", "mm", "(", "M", ",", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.src.dist_fns.ContrastiveDist.__init__": [[97, 99], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.sample_synthetic_graph.Graph.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ContrastiveDist", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.src.dist_fns.ContrastiveDist.forward": [[100, 111], ["target.unsqueeze", "kwargs[].unsqueeze", "dist_mat.sum", "target.unsqueeze.norm", "kwargs[].unsqueeze.norm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "pred", ",", "target", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        :param pred: Tensor of shape [batch_size x embed_dim]\n        :param target: Tensor of shape [num_ent x embed_dim]\n        :return: Tensor of shape [batch_size X num_entities] with cosine distance of input entites tensors to all entities\n        \"\"\"", "\n", "# Works exactly same as the cosine distance calculation without the dim = 0 summation carried on in CosineDist", "\n", "_x1", "=", "target", ".", "unsqueeze", "(", "1", ")", "\n", "_x2", "=", "kwargs", "[", "'node_emb'", "]", ".", "unsqueeze", "(", "0", ")", "\n", "dist_mat", "=", "-", "(", "(", "_x1", "*", "_x2", ")", "/", "(", "_x1", ".", "norm", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "*", "_x2", ".", "norm", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "+", "1e-8", ")", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "return", "dist_mat", ".", "sum", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.src.loss.BCELoss.__init__": [[17, 20], ["torch.nn.Module.__init__", "torch.nn.BCEWithLogitsLoss", "torch.nn.BCEWithLogitsLoss", "torch.nn.BCEWithLogitsLoss", "torch.nn.BCEWithLogitsLoss"], "methods", ["home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.sample_synthetic_graph.Graph.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bceloss", "=", "torch", ".", "nn", ".", "BCEWithLogitsLoss", "(", "reduction", "=", "'none'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.src.loss.BCELoss.forward": [[21, 26], ["loss.BCELoss.BCELoss.bceloss", "sum", "sum", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "pred", ",", "label", ")", ":", "\n", "        ", "loss", "=", "self", ".", "bceloss", "(", "pred", ",", "label", ")", "\n", "loss", "[", "label", "==", "0", "]", "/=", "sum", "(", "label", "==", "0", ")", "\n", "loss", "[", "label", "==", "1", "]", "/=", "sum", "(", "label", "==", "1", ")", "\n", "return", "torch", ".", "mean", "(", "loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.src.loss.DistanceLoss.__init__": [[29, 33], ["torch.nn.Module.__init__", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss"], "methods", ["home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.sample_synthetic_graph.Graph.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gamma", ":", "float", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "L2loss", "=", "torch", ".", "nn", ".", "MSELoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.src.loss.DistanceLoss.forward": [[34, 40], ["loss.DistanceLoss.L2loss", "loss.DistanceLoss.L2loss", "min"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "pred", ":", "Tensor", ",", "label", ":", "Tensor", ",", "obj_emb", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "# Query Loss", "\n", "        ", "query_loss", "=", "self", ".", "L2loss", "(", "obj_emb", "[", ":", ",", "1", ":", "]", "-", "obj_emb", "[", "0", ",", ":", "]", ")", "\n", "#answer loss", "\n", "ans_loss", "=", "self", ".", "L2loss", "(", "pred", "[", ":", ",", "1", ":", "]", "-", "pred", "[", "0", ",", ":", "]", ")", "\n", "return", "min", "(", "self", ".", "gamma", ",", "-", "1", "*", "(", "query_loss", "-", "ans_loss", ")", ".", "mean", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.src.loss.MarginLoss.__init__": [[43, 46], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.sample_synthetic_graph.Graph.__init__"], ["    ", "def", "__init__", "(", "self", ",", "margin", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "MarginLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "margin", "=", "margin", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.src.loss.MarginLoss.forward": [[47, 55], ["torch.maximum().mean", "torch.maximum().mean", "torch.maximum().mean", "torch.maximum().mean", "dist_arr[].unsqueeze", "dist_arr[].unsqueeze", "torch.maximum", "torch.maximum", "torch.maximum", "torch.maximum", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "labels.logical_not"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "dist_arr", ":", "Tensor", ",", "labels", ":", "BoolTensor", ")", "->", "Tensor", ":", "\n", "        ", "\"\"\"\n        :param dist_arr: Array of shape [n_nodes] containing distances (lower is better as opposed to score)\n        :param labels: Labels array of shape [n_nodes] with 1 for positive class and 0 otherwise\n        :return: Tensor loss\n        \"\"\"", "\n", "margin_mat", "=", "dist_arr", "[", "labels", "]", ".", "unsqueeze", "(", "1", ")", "-", "dist_arr", "[", "labels", ".", "logical_not", "(", ")", "]", ".", "unsqueeze", "(", "0", ")", "\n", "return", "torch", ".", "maximum", "(", "margin_mat", "+", "self", ".", "margin", ",", "torch", ".", "zeros_like", "(", "margin_mat", ")", ")", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.src.loss.TXent.__init__": [[61, 64], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.sample_synthetic_graph.Graph.__init__"], ["def", "__init__", "(", "self", ",", "temperature", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TXent", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "temperature", "=", "temperature", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.src.loss.TXent.forward": [[65, 76], ["torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "sim.dim", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "dist_arr", ":", "Tensor", ",", "labels", ":", "BoolTensor", ")", "->", "Tensor", ":", "\n", "        ", "\"\"\"\n        :param dist_arr: Array of shape [n_nodes] containing distances (lower is better as opposed to score)\n        :param labels: Labels array of shape [n_nodes] with 1 for positive class and 0 otherwise\n        :return: Tensor loss\n        \"\"\"", "\n", "sim", "=", "-", "dist_arr", "/", "self", ".", "temperature", "\n", "assert", "sim", ".", "dim", "(", ")", "==", "1", "\n", "denom_log_sum_exp", "=", "torch", ".", "logsumexp", "(", "sim", ",", "dim", "=", "0", ")", "\n", "loss", "=", "-", "torch", ".", "logsumexp", "(", "sim", "[", "labels", "]", ",", "dim", "=", "0", ")", "+", "denom_log_sum_exp", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.src.neighbors.Nneighbors.__init__": [[14, 26], ["torch.nn.Module.__init__", "dataset_obj.full_adj_map.items", "neighbors.Nneighbors.get_entity_vectors().to", "r2o.items", "neighbors.Nneighbors.get_entity_vectors"], "methods", ["home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.sample_synthetic_graph.Graph.__init__", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.src.neighbors.Nneighbors.get_entity_vectors"], ["    ", "def", "__init__", "(", "self", ",", "dataset_obj", ",", "device", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dataset_obj", "=", "dataset_obj", "\n", "self", ".", "ent2id", "=", "dataset_obj", ".", "ent2id", "\n", "self", ".", "rel2id", "=", "dataset_obj", ".", "rel2id", "\n", "self", ".", "id2ent", "=", "dataset_obj", ".", "id2ent", "\n", "self", ".", "triples", "=", "{", "}", "\n", "for", "s", ",", "r2o", "in", "dataset_obj", ".", "full_adj_map", ".", "items", "(", ")", ":", "\n", "            ", "for", "r", ",", "o", "in", "r2o", ".", "items", "(", ")", ":", "\n", "                ", "self", ".", "triples", "[", "(", "s", ",", "r", ")", "]", "=", "o", "\n", "", "", "self", ".", "device", "=", "device", "\n", "self", ".", "entity_vectors", "=", "self", ".", "get_entity_vectors", "(", "dataset_obj", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.src.neighbors.Nneighbors.get_entity_vectors": [[27, 38], ["numpy.zeros", "enumerate", "numpy.sqrt", "numpy.linalg.norm", "torch.Tensor", "numpy.finfo", "numpy.finfo", "numpy.linalg.norm.reshape", "len", "len"], "methods", ["None"], ["", "def", "get_entity_vectors", "(", "self", ",", "dataset_obj", ")", ":", "\n", "# Create the relation based representation of the entities", "\n", "        ", "entity_vectors", "=", "np", ".", "zeros", "(", "(", "len", "(", "self", ".", "ent2id", ")", ",", "len", "(", "self", ".", "rel2id", ")", ")", ")", "\n", "for", "e_ctr", ",", "e1", "in", "enumerate", "(", "dataset_obj", ".", "full_edge_index", "[", "0", "]", ")", ":", "\n", "            ", "entity_vectors", "[", "e1", ",", "dataset_obj", ".", "full_edge_attr", "[", "e_ctr", "]", "]", "=", "1", "\n", "", "adj_mat", "=", "np", ".", "sqrt", "(", "entity_vectors", ")", "\n", "l2norm", "=", "np", ".", "linalg", ".", "norm", "(", "adj_mat", ",", "axis", "=", "-", "1", ")", "\n", "l2norm", "[", "0", "]", "+=", "np", ".", "finfo", "(", "np", ".", "float", ")", ".", "eps", "# to encounter zero values. These 2 index are PAD / NULL", "\n", "l2norm", "[", "1", "]", "+=", "np", ".", "finfo", "(", "np", ".", "float", ")", ".", "eps", "\n", "entity_vectors", "=", "entity_vectors", "/", "l2norm", ".", "reshape", "(", "l2norm", ".", "shape", "[", "0", "]", ",", "1", ")", "\n", "return", "torch", ".", "Tensor", "(", "entity_vectors", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.src.neighbors.Nneighbors.calc_sim": [[39, 48], ["torch.index_select", "torch.matmul"], "methods", ["None"], ["", "def", "calc_sim", "(", "self", ",", "query_entities", ")", ":", "\n", "        ", "\"\"\"\n        :param adj_mat: N X R\n        :param query_entities: b is a batch of indices of query entities\n        :return:\n        \"\"\"", "\n", "query_entities_vec", "=", "torch", ".", "index_select", "(", "self", ".", "entity_vectors", ",", "dim", "=", "0", ",", "index", "=", "query_entities", ")", "\n", "sim", "=", "torch", ".", "matmul", "(", "query_entities_vec", ",", "self", ".", "entity_vectors", ".", "T", ")", "\n", "return", "sim", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.src.neighbors.Nneighbors.forward": [[49, 89], ["enumerate", "torch.LongTensor().to", "neighbors.Nneighbors.calc_sim", "numpy.argsort", "range", "enumerate", "torch.LongTensor().to.append", "len", "all_knn_ids.append", "neighbor_slices.append", "len", "torch.LongTensor", "neighbors.Nneighbors.cpu", "knn_ids_with_r.append", "neighbor_list.extend", "neighbor_list.extend", "len", "torch.isnan().item", "len", "len", "src.global_config.global_rng.choice", "torch.isnan", "idx.item"], "methods", ["home.repos.pwc.inspect_result.rajarshd_cbr-subg.src.neighbors.Nneighbors.calc_sim"], ["", "def", "forward", "(", "self", ",", "query_list", ",", "k", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "neighbor_list", ",", "neighbor_slices", "=", "[", "]", ",", "[", "0", "]", "\n", "batch_e1s", "=", "[", "]", "\n", "for", "query_ctr", ",", "query", "in", "enumerate", "(", "query_list", ")", ":", "\n", "            ", "e1", ",", "r", "=", "query", ".", "query", "\n", "batch_e1s", ".", "append", "(", "self", ".", "ent2id", "[", "e1", "]", ")", "\n", "", "batch_e1s", "=", "torch", ".", "LongTensor", "(", "batch_e1s", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "sim", "=", "self", ".", "calc_sim", "(", "batch_e1s", ")", "# n X N (n== size of batch, N: size of all entities)", "\n", "nearest_neighbor_1_hop", "=", "np", ".", "argsort", "(", "-", "sim", ".", "cpu", "(", ")", ",", "axis", "=", "-", "1", ")", "\n", "all_knn_ids", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "query_list", ")", ")", ":", "\n", "            ", "knn_ids_with_r", "=", "[", "]", "\n", "knn_idxs", "=", "nearest_neighbor_1_hop", "[", "i", "]", "\n", "e1", ",", "r", "=", "query_list", "[", "i", "]", ".", "query", "\n", "for", "idx", "in", "knn_idxs", ":", "\n", "                ", "no_query_rel", "=", "(", "self", ".", "entity_vectors", "[", "idx", "]", "[", "self", ".", "rel2id", "[", "r", "]", "]", "==", "0", ")", "or", "(", "\n", "torch", ".", "isnan", "(", "self", ".", "entity_vectors", "[", "idx", "]", "[", "self", ".", "rel2id", "[", "r", "]", "]", ")", ".", "item", "(", ")", ")", "\n", "if", "no_query_rel", ":", "\n", "                    ", "continue", "\n", "", "knn_ids_with_r", ".", "append", "(", "self", ".", "dataset_obj", ".", "train_idmap", "[", "(", "self", ".", "id2ent", "[", "idx", ".", "item", "(", ")", "]", ",", "r", ")", "]", ")", "\n", "if", "len", "(", "knn_ids_with_r", ")", ">=", "(", "k", "+", "5", ")", ":", "\n", "                    ", "break", "\n", "", "", "all_knn_ids", ".", "append", "(", "knn_ids_with_r", ")", "\n", "", "for", "query_ctr", ",", "query", "in", "enumerate", "(", "query_list", ")", ":", "\n", "            ", "if", "query", ".", "split", "==", "\"train\"", ":", "\n", "                ", "all_knn_ids", "[", "query_ctr", "]", "=", "all_knn_ids", "[", "query_ctr", "]", "[", ":", "k", "+", "5", "]", "# keep k + 5 options for randomly selecting", "\n", "# randomly sample K neighbors during training", "\n", "if", "k", "<", "len", "(", "all_knn_ids", "[", "query_ctr", "]", ")", ":", "\n", "                    ", "knn_ids", "=", "global_rng", ".", "choice", "(", "all_knn_ids", "[", "query_ctr", "]", ",", "k", ",", "replace", "=", "False", ")", "\n", "", "else", ":", "\n", "                    ", "knn_ids", "=", "all_knn_ids", "[", "query_ctr", "]", "\n", "", "neighbor_list", ".", "extend", "(", "[", "query", "]", "+", "[", "self", ".", "dataset_obj", ".", "train_dataset", "[", "knn_id", "]", "for", "knn_id", "in", "knn_ids", "]", ")", "\n", "", "else", ":", "\n", "# choose top-K", "\n", "                ", "neighbor_list", ".", "extend", "(", "[", "query", "]", "+", "[", "self", ".", "dataset_obj", ".", "train_dataset", "[", "knn_id", "]", "for", "knn_id", "in", "\n", "all_knn_ids", "[", "query_ctr", "]", "[", ":", "k", "]", "]", ")", "\n", "", "neighbor_slices", ".", "append", "(", "len", "(", "neighbor_list", ")", ")", "\n", "", "assert", "neighbor_slices", "[", "-", "1", "]", "==", "len", "(", "neighbor_list", ")", "\n", "return", "neighbor_list", ",", "neighbor_slices", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.src.neighbors.NneighborsFromData.__init__": [[92, 95], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.sample_synthetic_graph.Graph.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dataset_obj", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dataset_obj", "=", "dataset_obj", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.src.neighbors.NneighborsFromData.forward": [[96, 114], ["enumerate", "neighbor_slices.append", "len", "src.global_config.global_rng.choice", "neighbor_list.extend", "neighbor_list.extend", "len", "query[].tolist"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "query_list", ",", "k", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "neighbor_list", ",", "neighbor_slices", "=", "[", "]", ",", "[", "0", "]", "\n", "for", "query_ctr", ",", "query", "in", "enumerate", "(", "query_list", ")", ":", "\n", "            ", "if", "query", ".", "split", "==", "\"train\"", ":", "\n", "# randomly sample K neighbors during training", "\n", "# if \"top_k_train_nn\" in kwargs:", "\n", "#     query.knn_ids = query.knn_ids[:kwargs[\"top_k_train_nn\"]]  # only consider top 5", "\n", "                ", "query", ".", "knn_ids", "=", "query", ".", "knn_ids", "[", ":", "(", "k", "+", "5", ")", "]", "# keep k + 5 options for randomly selecting", "\n", "knn_ids", "=", "global_rng", ".", "choice", "(", "query", ".", "knn_ids", ",", "k", ",", "replace", "=", "False", ")", "\n", "#                knn_ids = knn_ids[:5]", "\n", "neighbor_list", ".", "extend", "(", "[", "query", "]", "+", "[", "self", ".", "dataset_obj", ".", "train_dataset", "[", "knn_id", "]", "for", "knn_id", "in", "knn_ids", "]", ")", "\n", "", "else", ":", "\n", "# choose top-K", "\n", "                ", "neighbor_list", ".", "extend", "(", "\n", "[", "query", "]", "+", "[", "self", ".", "dataset_obj", ".", "train_dataset", "[", "knn_id", "]", "for", "knn_id", "in", "query", "[", "'knn_ids'", "]", ".", "tolist", "(", ")", "[", ":", "k", "]", "]", ")", "\n", "", "neighbor_slices", ".", "append", "(", "len", "(", "neighbor_list", ")", ")", "\n", "", "assert", "neighbor_slices", "[", "-", "1", "]", "==", "len", "(", "neighbor_list", ")", "\n", "return", "neighbor_list", ",", "neighbor_slices", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.src.subgraphs.KBCGraphData.__init__": [[18, 24], ["torch_geometric.data.data.Data.__init__"], "methods", ["home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.sample_synthetic_graph.Graph.__init__"], ["    ", "def", "__init__", "(", "self", ",", "x", "=", "None", ",", "edge_index", "=", "None", ",", "edge_attr", "=", "None", ",", "e1", "=", "None", ",", "r", "=", "None", ",", "label", "=", "None", ",", "node_mapping", "=", "None", ")", ":", "\n", "        ", "super", "(", "KBCGraphData", ",", "self", ")", ".", "__init__", "(", "x", ",", "edge_index", ",", "edge_attr", ")", "\n", "self", ".", "e1", "=", "e1", "\n", "self", ".", "r", "=", "r", "\n", "self", ".", "label", "=", "label", "\n", "self", ".", "node_mapping", "=", "node_mapping", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.src.subgraphs.KBCGraphData.__inc__": [[25, 30], ["super().__inc__"], "methods", ["home.repos.pwc.inspect_result.rajarshd_cbr-subg.src.subgraphs.KBCGraphData.__inc__"], ["", "def", "__inc__", "(", "self", ",", "key", ",", "value", ")", ":", "\n", "        ", "if", "'e1'", "in", "key", ":", "\n", "            ", "return", "self", ".", "num_nodes", "\n", "", "else", ":", "\n", "            ", "return", "super", "(", "KBCGraphData", ",", "self", ")", ".", "__inc__", "(", "key", ",", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.src.subgraphs.NNSubgraphs.__init__": [[33, 45], ["torch.nn.Module.__init__", "subgraphs.NNSubgraphs.load_subgraphs", "torch_geometric.data.data.Data"], "methods", ["home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.sample_synthetic_graph.Graph.__init__", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.src.subgraphs.NNSubgraphs.load_subgraphs"], ["    ", "def", "__init__", "(", "self", ",", "data_args", ",", "dataset_obj", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "otf", "=", "data_args", ".", "otf", "\n", "self", ".", "dataset_obj", "=", "dataset_obj", "\n", "self", ".", "dropout", "=", "False", "\n", "if", "self", ".", "otf", "==", "False", ":", "# Use pre-calculated paths if on-the-fly subgraph sampling is disabled", "\n", "            ", "self", ".", "subgraphs", "=", "self", ".", "load_subgraphs", "(", "dataset_obj", ".", "data_dir", ")", "\n", "self", ".", "transformed_subgraph", "=", "{", "}", "\n", "", "else", ":", "\n", "            ", "self", ".", "max_nodes", "=", "data_args", ".", "otf_max_nodes", "\n", "self", ".", "data", "=", "Data", "(", "edge_index", "=", "dataset_obj", ".", "edge_index", ",", "edge_attr", "=", "dataset_obj", ".", "edge_type", ",", "\n", "num_nodes", "=", "dataset_obj", ".", "num_ent", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.src.subgraphs.NNSubgraphs.load_subgraphs": [[46, 53], ["os.path.join", "print", "print", "open", "pickle.load"], "methods", ["None"], ["", "", "def", "load_subgraphs", "(", "self", ",", "data_dir", ")", ":", "\n", "        ", "kg_file", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'paths_1000_len_3.pkl'", ")", "\n", "print", "(", "'Loading Subgraphs'", ")", "\n", "with", "open", "(", "kg_file", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "graph", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "print", "(", "\"Completed loading subgraphs\"", ")", "\n", "return", "graph", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.src.subgraphs.NNSubgraphs.transform_subgraph": [[54, 90], ["set", "torch.LongTensor.append", "numpy.array", "torch.from_numpy", "torch.from_numpy().t", "torch.LongTensor", "torch_geometric.data.data.Data", "len", "len", "list", "numpy.random.choice", "numpy.delete", "edges[].ravel", "numpy.delete.add", "int", "torch.from_numpy", "len", "torch.LongTensor.append", "len"], "methods", ["None"], ["", "def", "transform_subgraph", "(", "self", ",", "graph", ",", "key", ")", ":", "\n", "        ", "\"\"\"\n        Returns: Dataloader with\n        x : list of nodes in graph\n        edge_index : Matrix showing which node is attached to which node in graph [2 X num_edges]\n        edge_attr : List showing the relation type of edges mentioned in edge_index\n        ent2id : Dictionary storing index of nodes\n        \"\"\"", "\n", "edges", "=", "set", "(", ")", "\n", "ent2id", "=", "{", "}", "\n", "x", "=", "[", "]", "\n", "ent2id", "[", "key", "]", "=", "0", "\n", "x", ".", "append", "(", "self", ".", "dataset_obj", ".", "ent2id", "[", "key", "]", ")", "\n", "for", "path", "in", "graph", ":", "\n", "            ", "src_e", "=", "key", "\n", "for", "edge", "in", "path", ":", "\n", "                ", "if", "edge", "[", "1", "]", "not", "in", "ent2id", ":", "\n", "                    ", "ent2id", "[", "edge", "[", "1", "]", "]", "=", "len", "(", "ent2id", ")", "\n", "x", ".", "append", "(", "self", ".", "dataset_obj", ".", "ent2id", "[", "edge", "[", "1", "]", "]", ")", "\n", "", "dest", "=", "ent2id", "[", "edge", "[", "1", "]", "]", "\n", "edges", ".", "add", "(", "\n", "(", "ent2id", "[", "src_e", "]", ",", "dest", ",", "self", ".", "dataset_obj", ".", "rel2id", "[", "edge", "[", "0", "]", "]", ")", "\n", ")", "\n", "src_e", "=", "edge", "[", "1", "]", "\n", "", "", "assert", "len", "(", "x", ")", "==", "len", "(", "ent2id", ")", "\n", "edges", "=", "np", ".", "array", "(", "list", "(", "edges", ")", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "\n", "# Randomly drop out edges in subgraphs (regularization)", "\n", "if", "self", ".", "dropout", ":", "\n", "            ", "to_remove", "=", "np", ".", "random", ".", "choice", "(", "edges", ",", "int", "(", "self", ".", "dropout", "*", "len", "(", "edges", ")", ")", ",", "replace", "=", "False", ")", "\n", "edges", "=", "np", ".", "delete", "(", "edges", ",", "to_remove", ")", "\n", "\n", "", "edge_attr", "=", "torch", ".", "from_numpy", "(", "edges", "[", ":", ",", "2", "]", ".", "ravel", "(", ")", ")", "# Only keep relations from unique edges", "\n", "edge_index", "=", "torch", ".", "from_numpy", "(", "edges", "[", ":", ",", ":", "2", "]", ")", ".", "t", "(", ")", "# Only keep unique edges, transpose to be (2,n)", "\n", "x", "=", "torch", ".", "LongTensor", "(", "x", ")", "\n", "return", "Data", "(", "x", "=", "x", ",", "edge_index", "=", "edge_index", ",", "edge_attr", "=", "edge_attr", ",", "ent2id", "=", "ent2id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.src.subgraphs.NNSubgraphs.subgraph": [[93, 145], ["isinstance", "isinstance", "torch.tensor", "torch_geometric.utils.num_nodes.maybe_num_nodes", "torch.zeros", "torch.zeros", "torch.arange", "torch.zeros", "torch.arange", "torch.zeros.size", "torch.tensor.sum().item", "torch.tensor.size", "torch.tensor.sum"], "methods", ["home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.sample_synthetic_graph.Graph.size", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.sample_synthetic_graph.Graph.size"], ["", "@", "staticmethod", "\n", "def", "subgraph", "(", "e1", ",", "subset", ",", "edge_index", ",", "edge_attr", "=", "None", ",", "relabel_nodes", "=", "False", ",", "\n", "num_nodes", "=", "None", ")", ":", "\n", "        ", "r\"\"\"Returns the induced subgraph of :obj:`(edge_index, edge_attr, mask)`\n        containing the nodes in :obj:`subset`, and the new mapping of e1.\n\n        Args:\n            subset (LongTensor, BoolTensor or [int]): The nodes to keep.\n            edge_index (LongTensor): The edge indices.\n            edge_attr (Tensor, optional): Edge weights or multi-dimensional\n                edge features. (default: :obj:`None`)\n            relabel_nodes (bool, optional): If set to :obj:`True`, the resulting\n                :obj:`edge_index` will be relabeled to hold consecutive indices\n                starting from zero. (default: :obj:`False`)\n            num_nodes (int, optional): The number of nodes, *i.e.*\n                :obj:`max_val + 1` of :attr:`edge_index`. (default: :obj:`None`)\n\n        :rtype: (:class:`LongTensor`, :class:`Tensor`)\n        \"\"\"", "\n", "\n", "device", "=", "edge_index", ".", "device", "\n", "\n", "if", "isinstance", "(", "subset", ",", "list", ")", "or", "isinstance", "(", "subset", ",", "tuple", ")", ":", "\n", "            ", "subset", "=", "torch", ".", "tensor", "(", "subset", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "\n", "", "if", "subset", ".", "dtype", "==", "torch", ".", "bool", "or", "subset", ".", "dtype", "==", "torch", ".", "uint8", ":", "\n", "            ", "n_mask", "=", "subset", "\n", "\n", "if", "relabel_nodes", ":", "\n", "                ", "n_idx", "=", "torch", ".", "zeros", "(", "n_mask", ".", "size", "(", "0", ")", ",", "dtype", "=", "torch", ".", "long", ",", "\n", "device", "=", "device", ")", "\n", "n_idx", "[", "subset", "]", "=", "torch", ".", "arange", "(", "subset", ".", "sum", "(", ")", ".", "item", "(", ")", ",", "device", "=", "device", ")", "\n", "", "", "else", ":", "\n", "            ", "num_nodes", "=", "maybe_num_nodes", "(", "edge_index", ",", "num_nodes", ")", "\n", "n_mask", "=", "torch", ".", "zeros", "(", "num_nodes", ",", "dtype", "=", "torch", ".", "bool", ")", "\n", "n_mask", "[", "subset", "]", "=", "1", "\n", "\n", "if", "relabel_nodes", ":", "\n", "                ", "n_idx", "=", "torch", ".", "zeros", "(", "num_nodes", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "device", ")", "\n", "n_idx", "[", "subset", "]", "=", "torch", ".", "arange", "(", "subset", ".", "size", "(", "0", ")", ",", "device", "=", "device", ")", "\n", "\n", "", "", "mask", "=", "n_mask", "[", "edge_index", "[", "0", "]", "]", "&", "n_mask", "[", "edge_index", "[", "1", "]", "]", "\n", "edge_index", "=", "edge_index", "[", ":", ",", "mask", "]", "\n", "edge_attr", "=", "edge_attr", "[", "mask", "]", "if", "edge_attr", "is", "not", "None", "else", "None", "\n", "\n", "if", "relabel_nodes", ":", "\n", "            ", "edge_index", "=", "n_idx", "[", "edge_index", "]", "\n", "e1_offset", "=", "n_idx", "[", "e1", "]", "\n", "", "else", ":", "\n", "            ", "e1_offset", "=", "e1", "\n", "\n", "", "return", "edge_index", ",", "edge_attr", ",", "e1_offset", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.src.subgraphs.NNSubgraphs.forward": [[147, 201], ["e1.flatten.flatten.flatten", "range", "torch_geometric.data.batch.Batch.from_data_list", "enumerate", "torch_geometric.data.batch.Batch.from_data_list", "len", "torch_geometric.utils.k_hop_subgraph", "subgraphs.NNSubgraphs.subgraph", "torch.flatten().tolist", "torch.tensor", "len", "len", "data_list.append", "data_list.append", "len", "torch.LongTensor", "data_list.append", "r[].item", "e1[].flatten", "e1[].flatten", "subgraphs.KBCGraphData", "subgraphs.KBCGraphData", "torch.flatten", "subgraphs.NNSubgraphs.transform_subgraph", "subgraphs.KBCGraphData", "e1[].item", "e2[].item", "torch.randperm", "len"], "methods", ["home.repos.pwc.inspect_result.rajarshd_cbr-subg.src.subgraphs.NNSubgraphs.subgraph", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.src.subgraphs.NNSubgraphs.transform_subgraph"], ["", "def", "forward", "(", "self", ",", "e1", ":", "torch", ".", "LongTensor", ",", "r", ":", "torch", ".", "LongTensor", ",", "labels", ":", "torch", ".", "LongTensor", ",", "remove_query_edge", "=", "True", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "if", "self", ".", "otf", ":", "\n", "# Return one set of edge_index and edge_type for an anchor entity", "\n", "            ", "data_list", "=", "[", "]", "\n", "e1", "=", "e1", ".", "flatten", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "e1", ")", ")", ":", "\n", "                ", "if", "remove_query_edge", ":", "\n", "                    ", "edge", "=", "torch", ".", "tensor", "(", "(", "e1", "[", "i", "]", ".", "item", "(", ")", ",", "e2", "[", "i", "]", ".", "item", "(", ")", ")", ")", "\n", "correct_node", "=", "(", "self", ".", "dataset_obj", ".", "edge_index", ".", "T", "==", "edge", ")", ".", "T", "# 2 x num_edge", "\n", "correct_relation", "=", "self", ".", "dataset_obj", ".", "edge_type", ".", "T", "==", "r", "[", "i", "]", ".", "item", "(", ")", "# num_edge", "\n", "mask", "=", "(", "correct_node", "[", "0", "]", "&", "correct_node", "[", "1", "]", "&", "correct_relation", ")", "\n", "edge_index", "=", "self", ".", "dataset_obj", ".", "edge_index", "[", ":", ",", "~", "mask", "]", "\n", "edge_type", "=", "self", ".", "dataset_obj", ".", "edge_type", "[", "~", "mask", "]", "\n", "", "else", ":", "\n", "                    ", "edge_index", "=", "self", ".", "dataset_obj", ".", "edge_index", "\n", "edge_type", "=", "self", ".", "dataset_obj", ".", "edge_type", "\n", "\n", "", "nodes", ",", "edge_index_throwaway", ",", "mapping", ",", "edge_mask", "=", "k_hop_subgraph", "(", "node_idx", "=", "e1", "[", "i", "]", ".", "flatten", "(", ")", ",", "\n", "num_hops", "=", "3", ",", "\n", "edge_index", "=", "edge_index", ",", "\n", "relabel_nodes", "=", "False", ",", "\n", "flow", "=", "'target_to_source'", ",", "\n", "num_nodes", "=", "self", ".", "dataset_obj", ".", "num_ent", ")", "\n", "if", "len", "(", "nodes", ")", ">", "self", ".", "max_nodes", ":", "\n", "                    ", "nodes", "=", "nodes", "[", "torch", ".", "randperm", "(", "len", "(", "nodes", ")", ")", "[", ":", "self", ".", "max_nodes", "]", "]", "\n", "", "edge_index", ",", "edge_attr", ",", "e1_offset", "=", "self", ".", "subgraph", "(", "e1", "=", "e1", "[", "i", "]", ".", "flatten", "(", ")", ",", "\n", "subset", "=", "nodes", ",", "\n", "edge_index", "=", "edge_index", ",", "\n", "edge_attr", "=", "edge_type", ",", "\n", "relabel_nodes", "=", "True", ",", "\n", "num_nodes", "=", "self", ".", "dataset_obj", ".", "num_ent", ")", "\n", "x", "=", "nodes", "\n", "label_offset", "=", "labels", "[", "i", "]", "[", "x", "]", "\n", "if", "len", "(", "r", ")", ">", "1", ":", "\n", "                    ", "data_list", ".", "append", "(", "KBCGraphData", "(", "x", ",", "edge_index", ",", "edge_attr", ",", "e1_offset", ",", "r", "[", "i", "]", ",", "label_offset", ")", ")", "\n", "", "else", ":", "\n", "                    ", "data_list", ".", "append", "(", "KBCGraphData", "(", "x", ",", "edge_index", ",", "edge_attr", ",", "e1_offset", ",", "r", ",", "label_offset", ")", ")", "\n", "", "", "return", "Batch", ".", "from_data_list", "(", "data_list", ",", "follow_batch", "=", "[", "'x'", "]", ")", "\n", "", "else", ":", "\n", "# Return one set of edge_index and edge_type for an anchor entity", "\n", "            ", "data_list", "=", "[", "]", "\n", "for", "e_ctr", ",", "e", "in", "enumerate", "(", "torch", ".", "flatten", "(", "e1", ")", ".", "tolist", "(", ")", ")", ":", "\n", "                ", "k_e", "=", "self", ".", "dataset_obj", ".", "id2ent", "[", "e", "]", "\n", "# Not appending neighbours for entities not present in train", "\n", "if", "len", "(", "self", ".", "subgraphs", "[", "k_e", "]", ")", "!=", "0", ":", "\n", "                    ", "if", "e", "not", "in", "self", ".", "transformed_subgraph", ":", "\n", "                        ", "self", ".", "transformed_subgraph", "[", "e", "]", "=", "self", ".", "transform_subgraph", "(", "self", ".", "subgraphs", "[", "k_e", "]", ",", "k_e", ")", "\n", "", "transformed_graph", "=", "self", ".", "transformed_subgraph", "[", "e", "]", "\n", "e1_offset", "=", "torch", ".", "LongTensor", "(", "[", "transformed_graph", ".", "ent2id", "[", "k_e", "]", "]", ")", "\n", "label_offset", "=", "labels", "[", "e_ctr", "]", "[", "transformed_graph", ".", "x", "]", "\n", "data_list", ".", "append", "(", "KBCGraphData", "(", "transformed_graph", ".", "x", ",", "transformed_graph", ".", "edge_index", ",", "\n", "transformed_graph", ".", "edge_attr", ",", "e1_offset", ",", "r", "[", "e_ctr", "]", ",", "label_offset", ")", ")", "\n", "", "", "return", "Batch", ".", "from_data_list", "(", "data_list", ",", "follow_batch", "=", "[", "'x'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.src.subgraphs.NNSubgraphsFromData.__init__": [[204, 207], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.sample_synthetic_graph.Graph.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dataset_obj", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dataset_obj", "=", "dataset_obj", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.src.subgraphs.NNSubgraphsFromData.forward": [[208, 241], ["enumerate", "enumerate", "torch_geometric.data.batch.Batch.from_data_list", "subgraphs.NNSubgraphsFromData.dataset_obj.convert_rawdata_to_cbrdata", "new_query_and_knn_list.extend", "new_nn_slices.append", "len", "len", "query_and_knn_list[].label_node_ids.sum().item", "val.label_node_ids.sum().item", "len", "query_and_knn_list[].label_node_ids.sum", "val.label_node_ids.sum"], "methods", ["home.repos.pwc.inspect_result.rajarshd_cbr-subg.data_loaders.kbqa_dataloader.KBQADataLoader.convert_rawdata_to_cbrdata"], ["", "def", "forward", "(", "self", ",", "query_and_knn_list", ",", "nn_slices", ",", "**", "kwargs", ")", ":", "\n", "        ", "for", "ctr", ",", "val", "in", "enumerate", "(", "query_and_knn_list", ")", ":", "\n", "            ", "if", "val", ".", "x", "is", "None", ":", "\n", "                ", "if", "val", ".", "split", "==", "'train'", ":", "\n", "                    ", "item", "=", "self", ".", "dataset_obj", ".", "raw_train_data", "[", "val", ".", "ex_id", "]", "\n", "", "elif", "val", ".", "split", "==", "'dev'", ":", "\n", "                    ", "item", "=", "self", ".", "dataset_obj", ".", "raw_dev_data", "[", "val", ".", "ex_id", "]", "\n", "", "else", ":", "\n", "                    ", "item", "=", "self", ".", "dataset_obj", ".", "raw_test_data", "[", "val", ".", "ex_id", "]", "\n", "", "self", ".", "dataset_obj", ".", "convert_rawdata_to_cbrdata", "(", "item", ",", "val", ".", "split", ",", "self", ".", "dataset_obj", ".", "add_dist_feature", ",", "\n", "self", ".", "dataset_obj", ".", "max_dist", ",", "lazy", "=", "False", ",", "inplace_obj", "=", "val", ")", "\n", "\n", "# Logic for eliminating queries (or all its KNNs) with no label nodes in subgraph", "\n", "", "", "if", "query_and_knn_list", "[", "0", "]", ".", "split", "==", "\"train\"", ":", "# check if the first query is from train", "\n", "            ", "new_query_and_knn_list", ",", "new_nn_slices", "=", "[", "]", ",", "[", "0", "]", "\n", "for", "ctr", ",", "idx", "in", "enumerate", "(", "nn_slices", "[", ":", "-", "1", "]", ")", ":", "\n", "                ", "if", "query_and_knn_list", "[", "idx", "]", ".", "label_node_ids", ".", "sum", "(", ")", ".", "item", "(", ")", "==", "0", ":", "\n", "# bad query, move on, query does not have a label node", "\n", "                    ", "continue", "\n", "", "total", "=", "0", "\n", "for", "val", "in", "query_and_knn_list", "[", "idx", "+", "1", ":", "nn_slices", "[", "ctr", "+", "1", "]", "]", ":", "\n", "                    ", "total", "+=", "val", ".", "label_node_ids", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "", "if", "total", "==", "0", ":", "\n", "# bad query, move on, since no KNNs have a label node", "\n", "                    ", "continue", "\n", "", "new_query_and_knn_list", ".", "extend", "(", "query_and_knn_list", "[", "idx", ":", "nn_slices", "[", "ctr", "+", "1", "]", "]", ")", "\n", "new_nn_slices", ".", "append", "(", "len", "(", "new_query_and_knn_list", ")", ")", "\n", "", "query_and_knn_list", "=", "new_query_and_knn_list", "\n", "nn_slices", "=", "new_nn_slices", "\n", "assert", "nn_slices", "[", "-", "1", "]", "==", "len", "(", "query_and_knn_list", ")", "\n", "if", "len", "(", "query_and_knn_list", ")", "==", "0", ":", "# none of the query in the batch made it", "\n", "                ", "return", "None", ",", "None", "\n", "", "", "return", "Batch", ".", "from_data_list", "(", "query_and_knn_list", ",", "follow_batch", "=", "[", "'x'", ",", "'edge_attr'", "]", ")", ",", "nn_slices", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.src.text_handler.QueryEncoderBase.get_query_embedding_dim": [[6, 8], ["None"], "methods", ["None"], ["    ", "def", "get_query_embedding_dim", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplemented", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.src.text_handler.QueryEncoderBase.is_trainable": [[9, 11], ["None"], "methods", ["None"], ["", "def", "is_trainable", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplemented", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.src.text_handler.QueryEncoderBase.save": [[12, 14], ["None"], "methods", ["None"], ["", "def", "save", "(", "self", ",", "save_path", ")", ":", "\n", "        ", "raise", "NotImplemented", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.src.text_handler.PrecomputedQueryEncoder.__init__": [[17, 22], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.sample_synthetic_graph.Graph.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dataset_obj", ")", ":", "\n", "        ", "super", "(", "PrecomputedQueryEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "query_enc_train", "=", "dataset_obj", ".", "query_enc_train", "\n", "self", ".", "query_enc_dev", "=", "dataset_obj", ".", "query_enc_dev", "\n", "self", ".", "query_enc_test", "=", "dataset_obj", ".", "query_enc_test", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.src.text_handler.PrecomputedQueryEncoder.get_query_embedding_dim": [[23, 25], ["None"], "methods", ["None"], ["", "def", "get_query_embedding_dim", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "query_enc_train", ".", "shape", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.src.text_handler.PrecomputedQueryEncoder.forward": [[26, 38], ["torch.empty", "enumerate", "torch.empty.to", "zip", "len", "text_handler.PrecomputedQueryEncoder.get_query_embedding_dim", "ValueError"], "methods", ["home.repos.pwc.inspect_result.rajarshd_cbr-subg.src.text_handler.QueryEncoder.get_query_embedding_dim"], ["", "def", "forward", "(", "self", ",", "ex_ids", ",", "split", ",", "device", ",", "**", "kwargs", ")", ":", "\n", "        ", "output_mat", "=", "torch", ".", "empty", "(", "(", "len", "(", "ex_ids", ")", ",", "self", ".", "get_query_embedding_dim", "(", ")", ")", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "for", "e_ctr", ",", "(", "e_id", ",", "e_s", ")", "in", "enumerate", "(", "zip", "(", "ex_ids", ",", "split", ")", ")", ":", "\n", "            ", "if", "e_s", "==", "'train'", ":", "\n", "                ", "output_mat", "[", "e_ctr", "]", "=", "self", ".", "query_enc_train", "[", "e_id", "]", "\n", "", "elif", "e_s", "==", "'dev'", ":", "\n", "                ", "output_mat", "[", "e_ctr", "]", "=", "self", ".", "query_enc_dev", "[", "e_id", "]", "\n", "", "elif", "e_s", "==", "'test'", ":", "\n", "                ", "output_mat", "[", "e_ctr", "]", "=", "self", ".", "query_enc_test", "[", "e_id", "]", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "f'Unhandled split {e_s}'", ")", "\n", "", "", "return", "output_mat", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.src.text_handler.PrecomputedQueryEncoder.is_trainable": [[39, 41], ["None"], "methods", ["None"], ["", "def", "is_trainable", "(", "self", ")", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.src.text_handler.PrecomputedQueryEncoder.save": [[42, 44], ["None"], "methods", ["None"], ["", "def", "save", "(", "self", ",", "save_path", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.src.text_handler.QueryEncoder.__init__": [[47, 57], ["super().__init__", "transformers.AutoTokenizer.from_pretrained", "transformers.AutoModel.from_pretrained", "text_handler.QueryEncoder.query_encoder.parameters"], "methods", ["home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.sample_synthetic_graph.Graph.__init__"], ["    ", "def", "__init__", "(", "self", ",", "query_encoder_model_name_or_path", ",", "pooling_type", ",", "train_query_encoder", "=", "False", ")", ":", "\n", "        ", "super", "(", "QueryEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "query_tokenizer", "=", "AutoTokenizer", ".", "from_pretrained", "(", "query_encoder_model_name_or_path", ")", "\n", "self", ".", "query_encoder", "=", "AutoModel", ".", "from_pretrained", "(", "query_encoder_model_name_or_path", ")", "\n", "self", ".", "pooling_type", "=", "pooling_type", "\n", "self", ".", "train_query_encoder", "=", "train_query_encoder", "\n", "if", "not", "train_query_encoder", ":", "\n", "# Free the encoder", "\n", "            ", "for", "param_", "in", "self", ".", "query_encoder", ".", "parameters", "(", ")", ":", "\n", "                ", "param_", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.src.text_handler.QueryEncoder.get_query_embedding_dim": [[58, 60], ["None"], "methods", ["None"], ["", "", "", "def", "get_query_embedding_dim", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "query_encoder", ".", "config", ".", "hidden_size", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.src.text_handler.QueryEncoder.mean_pooling": [[61, 68], ["attention_mask.unsqueeze().expand().float", "torch.sum", "torch.clamp", "attention_mask.unsqueeze().expand().float.sum", "attention_mask.unsqueeze().expand", "token_embeddings.size", "attention_mask.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.sample_synthetic_graph.Graph.size"], ["", "@", "staticmethod", "\n", "def", "mean_pooling", "(", "model_output", ",", "attention_mask", ")", ":", "\n", "        ", "token_embeddings", "=", "model_output", ".", "last_hidden_state", "# First element of model_output contains all token embeddings", "\n", "input_mask_expanded", "=", "attention_mask", ".", "unsqueeze", "(", "-", "1", ")", ".", "expand", "(", "token_embeddings", ".", "size", "(", ")", ")", ".", "float", "(", ")", "\n", "sum_embeddings", "=", "torch", ".", "sum", "(", "token_embeddings", "*", "input_mask_expanded", ",", "1", ")", "\n", "sum_mask", "=", "torch", ".", "clamp", "(", "input_mask_expanded", ".", "sum", "(", "1", ")", ",", "min", "=", "1e-9", ")", "\n", "return", "sum_embeddings", "/", "sum_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.src.text_handler.QueryEncoder.forward": [[69, 82], ["text_handler.QueryEncoder.query_tokenizer", "curr_batch[].to", "curr_batch[].to", "text_handler.QueryEncoder.query_encoder", "text_handler.QueryEncoder.mean_pooling"], "methods", ["home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.process_webqsp_cwq.mean_pooling"], ["", "def", "forward", "(", "self", ",", "text_batch", ",", "device", ",", "**", "kwargs", ")", ":", "\n", "        ", "curr_batch", "=", "self", ".", "query_tokenizer", "(", "text_batch", ",", "padding", "=", "True", ",", "truncation", "=", "True", ",", "return_tensors", "=", "'pt'", ")", "\n", "curr_batch", "[", "\"input_ids\"", "]", "=", "curr_batch", "[", "\"input_ids\"", "]", ".", "to", "(", "device", ")", "\n", "curr_batch", "[", "\"attention_mask\"", "]", "=", "curr_batch", "[", "\"attention_mask\"", "]", ".", "to", "(", "device", ")", "\n", "outputs", "=", "self", ".", "query_encoder", "(", "input_ids", "=", "curr_batch", "[", "\"input_ids\"", "]", ",", "\n", "attention_mask", "=", "curr_batch", "[", "\"attention_mask\"", "]", ")", "\n", "if", "self", ".", "pooling_type", "==", "'pooler'", ":", "\n", "            ", "return", "outputs", ".", "pooler_output", "\n", "", "elif", "self", ".", "pooling_type", "==", "'cls'", ":", "\n", "            ", "return", "outputs", ".", "last_hidden_state", "[", ":", ",", "0", "]", "\n", "", "else", ":", "\n", "            ", "assert", "self", ".", "pooling_type", "==", "'mean_pool'", "\n", "return", "self", ".", "mean_pooling", "(", "outputs", ",", "curr_batch", "[", "\"attention_mask\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.src.text_handler.QueryEncoder.is_trainable": [[83, 85], ["None"], "methods", ["None"], ["", "", "def", "is_trainable", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "train_query_encoder", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.src.text_handler.QueryEncoder.save": [[86, 90], ["text_handler.QueryEncoder.query_tokenizer.save_pretrained", "text_handler.QueryEncoder.query_encoder.save_pretrained"], "methods", ["None"], ["", "def", "save", "(", "self", ",", "save_path", ")", ":", "\n", "        ", "if", "self", ".", "train_query_encoder", ":", "\n", "            ", "self", ".", "query_tokenizer", ".", "save_pretrained", "(", "save_path", ")", "\n", "self", ".", "query_encoder", ".", "save_pretrained", "(", "save_path", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.data_loaders.data_utils.augment_kb_with_inv_edges": [[9, 30], ["tempfile.NamedTemporaryFile", "open", "open.close", "open", "tempfile.NamedTemporaryFile.close", "open.close", "tempfile.NamedTemporaryFile.write", "line.strip().split", "temp_list.append", "temp_list.append", "open.write", "line.strip", "line.strip"], "function", ["None"], ["def", "augment_kb_with_inv_edges", "(", "file_name", ":", "str", ")", "->", "None", ":", "\n", "# Create temporary file read/write", "\n", "    ", "t", "=", "tempfile", ".", "NamedTemporaryFile", "(", "mode", "=", "\"r+\"", ")", "\n", "# Open input file read-only", "\n", "i", "=", "open", "(", "file_name", ",", "'r'", ")", "\n", "\n", "# Copy input file to temporary file, modifying as we go", "\n", "temp_list", "=", "[", "]", "\n", "for", "line", "in", "i", ":", "\n", "        ", "t", ".", "write", "(", "line", ".", "strip", "(", ")", "+", "\"\\n\"", ")", "\n", "e1", ",", "r", ",", "e2", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "temp_list", ".", "append", "(", "(", "e1", ",", "r", ",", "e2", ")", ")", "\n", "temp_list", ".", "append", "(", "(", "e2", ",", "\"_\"", "+", "r", ",", "e1", ")", ")", "\n", "\n", "", "i", ".", "close", "(", ")", "# Close input file", "\n", "o", "=", "open", "(", "file_name", ",", "\"w\"", ")", "# Reopen input file writable", "\n", "# Overwriting original file with temporary file contents", "\n", "for", "(", "e1", ",", "r", ",", "e2", ")", "in", "temp_list", ":", "\n", "        ", "o", ".", "write", "(", "\"{}\\t{}\\t{}\\n\"", ".", "format", "(", "e1", ",", "r", ",", "e2", ")", ")", "\n", "", "t", ".", "close", "(", ")", "# Close temporary file, will cause it to be deleted", "\n", "o", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.data_loaders.data_utils.create_adj_list": [[32, 40], ["collections.defaultdict", "open", "tqdm.tqdm", "enumerate", "line.strip.strip", "line.strip.split", "out_map[].append"], "function", ["None"], ["", "def", "create_adj_list", "(", "file_name", ":", "str", ")", "->", "DefaultDict", "[", "str", ",", "Tuple", "[", "str", ",", "str", "]", "]", ":", "\n", "    ", "out_map", "=", "defaultdict", "(", "list", ")", "\n", "fin", "=", "open", "(", "file_name", ")", "\n", "for", "line_ctr", ",", "line", "in", "tqdm", "(", "enumerate", "(", "fin", ")", ")", ":", "\n", "        ", "line", "=", "line", ".", "strip", "(", ")", "\n", "e1", ",", "r", ",", "e2", "=", "line", ".", "split", "(", "\"\\t\"", ")", "\n", "out_map", "[", "e1", "]", ".", "append", "(", "(", "r", ",", "e2", ")", ")", "\n", "", "return", "out_map", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.data_loaders.data_utils.load_data": [[42, 52], ["collections.defaultdict", "open", "tqdm.tqdm", "line.strip.strip", "line.strip.split", "out_map[].append"], "function", ["None"], ["", "def", "load_data", "(", "file_name", ":", "str", ")", "->", "DefaultDict", "[", "Tuple", "[", "str", ",", "str", "]", ",", "list", "]", ":", "\n", "    ", "out_map", "=", "defaultdict", "(", "list", ")", "\n", "fin", "=", "open", "(", "file_name", ")", "\n", "\n", "for", "line", "in", "tqdm", "(", "fin", ")", ":", "\n", "        ", "line", "=", "line", ".", "strip", "(", ")", "\n", "e1", ",", "r", ",", "e2", "=", "line", ".", "split", "(", "\"\\t\"", ")", "\n", "out_map", "[", "(", "e1", ",", "r", ")", "]", ".", "append", "(", "e2", ")", "\n", "\n", "", "return", "out_map", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.data_loaders.data_utils.load_data_all_triples": [[198, 216], ["collections.defaultdict", "open", "tqdm.tqdm", "line.strip.strip", "line.strip.split", "out_map[].append", "out_map[].append"], "function", ["None"], ["", "def", "load_data_all_triples", "(", "graph_file", ":", "str", ",", "train_file", ":", "str", ",", "dev_file", ":", "str", ",", "test_file", ":", "str", ")", "->", "DefaultDict", "[", "\n", "Tuple", "[", "str", ",", "str", "]", ",", "list", "]", ":", "\n", "    ", "\"\"\"\n    Returns a map of all triples in the knowledge graph. Use this map only for filtering in evaluation.\n    :param train_file:\n    :param dev_file:\n    :param test_file:\n    :return:\n    \"\"\"", "\n", "out_map", "=", "defaultdict", "(", "list", ")", "\n", "for", "file_name", "in", "[", "graph_file", ",", "train_file", ",", "dev_file", ",", "test_file", "]", ":", "\n", "        ", "fin", "=", "open", "(", "file_name", ")", "\n", "for", "line", "in", "tqdm", "(", "fin", ")", ":", "\n", "            ", "line", "=", "line", ".", "strip", "(", ")", "\n", "e1", ",", "r", ",", "e2", "=", "line", ".", "split", "(", "\"\\t\"", ")", "\n", "out_map", "[", "(", "e1", ",", "r", ")", "]", ".", "append", "(", "e2", ")", "\n", "out_map", "[", "(", "e2", ",", "r", "+", "\"_inv\"", ")", "]", ".", "append", "(", "e1", ")", "\n", "", "", "return", "out_map", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.data_loaders.data_utils.create_vocab": [[72, 93], ["open", "tqdm.tqdm", "line.strip.strip", "line.strip.split"], "function", ["None"], ["", "def", "create_vocab", "(", "kg_file", ":", "str", ")", "->", "Tuple", "[", "Dict", "[", "str", ",", "int", "]", ",", "Dict", "[", "int", ",", "str", "]", ",", "Dict", "[", "str", ",", "int", "]", ",", "Dict", "[", "int", ",", "str", "]", "]", ":", "\n", "    ", "entity_vocab", ",", "rev_entity_vocab", "=", "{", "}", ",", "{", "}", "\n", "rel_vocab", ",", "rev_rel_vocab", "=", "{", "}", ",", "{", "}", "\n", "fin", "=", "open", "(", "kg_file", ")", "\n", "entity_ctr", ",", "rel_ctr", "=", "0", ",", "0", "\n", "for", "line", "in", "tqdm", "(", "fin", ")", ":", "\n", "        ", "line", "=", "line", ".", "strip", "(", ")", "\n", "e1", ",", "r", ",", "e2", "=", "line", ".", "split", "(", "\"\\t\"", ")", "\n", "if", "e1", "not", "in", "entity_vocab", ":", "\n", "            ", "entity_vocab", "[", "e1", "]", "=", "entity_ctr", "\n", "rev_entity_vocab", "[", "entity_ctr", "]", "=", "e1", "\n", "entity_ctr", "+=", "1", "\n", "", "if", "e2", "not", "in", "entity_vocab", ":", "\n", "            ", "entity_vocab", "[", "e2", "]", "=", "entity_ctr", "\n", "rev_entity_vocab", "[", "entity_ctr", "]", "=", "e2", "\n", "entity_ctr", "+=", "1", "\n", "", "if", "r", "not", "in", "rel_vocab", ":", "\n", "            ", "rel_vocab", "[", "r", "]", "=", "rel_ctr", "\n", "rev_rel_vocab", "[", "rel_ctr", "]", "=", "r", "\n", "rel_ctr", "+=", "1", "\n", "", "", "return", "entity_vocab", ",", "rev_entity_vocab", ",", "rel_vocab", ",", "rev_rel_vocab", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.data_loaders.data_utils.read_graph": [[95, 104], ["numpy.zeros", "open", "tqdm.tqdm", "line.strip.strip", "line.strip.split", "len", "len", "e1.lower", "r.lower"], "function", ["None"], ["", "def", "read_graph", "(", "file_name", ":", "str", ",", "entity_vocab", ":", "Dict", "[", "str", ",", "int", "]", ",", "rel_vocab", ":", "Dict", "[", "str", ",", "int", "]", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "adj_mat", "=", "np", ".", "zeros", "(", "(", "len", "(", "entity_vocab", ")", ",", "len", "(", "rel_vocab", ")", ")", ")", "\n", "fin", "=", "open", "(", "file_name", ")", "\n", "for", "line", "in", "tqdm", "(", "fin", ")", ":", "\n", "        ", "line", "=", "line", ".", "strip", "(", ")", "\n", "e1", ",", "r", ",", "_", "=", "line", ".", "split", "(", "\"\\t\"", ")", "\n", "adj_mat", "[", "entity_vocab", "[", "e1", ".", "lower", "(", ")", "]", ",", "rel_vocab", "[", "r", ".", "lower", "(", ")", "]", "]", "=", "1", "\n", "\n", "", "return", "adj_mat", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.data_loaders.data_utils.load_mid2str": [[106, 118], ["collections.defaultdict", "open", "tqdm.tqdm", "line.strip.strip", "line.strip.split"], "function", ["None"], ["", "def", "load_mid2str", "(", "mid2str_file", ":", "str", ")", "->", "DefaultDict", "[", "str", ",", "str", "]", ":", "\n", "    ", "mid2str", "=", "defaultdict", "(", "str", ")", "\n", "with", "open", "(", "mid2str_file", ")", "as", "fin", ":", "\n", "        ", "for", "line", "in", "tqdm", "(", "fin", ")", ":", "\n", "            ", "line", "=", "line", ".", "strip", "(", ")", "\n", "try", ":", "\n", "                ", "mid", ",", "ent_name", "=", "line", ".", "split", "(", "\"\\t\"", ")", "\n", "", "except", "ValueError", ":", "\n", "                ", "continue", "\n", "", "if", "mid", "not", "in", "mid2str", ":", "\n", "                ", "mid2str", "[", "mid", "]", "=", "ent_name", "\n", "", "", "", "return", "mid2str", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.data_loaders.data_utils.get_unique_entities": [[120, 129], ["set", "open", "open.close", "line.strip().split", "set.add", "set.add", "line.strip"], "function", ["None"], ["", "def", "get_unique_entities", "(", "kg_file", ":", "str", ")", "->", "Set", "[", "str", "]", ":", "\n", "    ", "unique_entities", "=", "set", "(", ")", "\n", "fin", "=", "open", "(", "kg_file", ")", "\n", "for", "line", "in", "fin", ":", "\n", "        ", "e1", ",", "r", ",", "e2", "=", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "unique_entities", ".", "add", "(", "e1", ")", "\n", "unique_entities", ".", "add", "(", "e2", ")", "\n", "", "fin", ".", "close", "(", ")", "\n", "return", "unique_entities", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.data_loaders.data_utils.get_entities_group_by_relation": [[131, 138], ["collections.defaultdict", "open", "line.strip().split", "rel_to_ent_map[].append", "line.strip"], "function", ["None"], ["", "def", "get_entities_group_by_relation", "(", "file_name", ":", "str", ")", "->", "DefaultDict", "[", "str", ",", "List", "[", "str", "]", "]", ":", "\n", "    ", "rel_to_ent_map", "=", "defaultdict", "(", "list", ")", "\n", "fin", "=", "open", "(", "file_name", ")", "\n", "for", "line", "in", "fin", ":", "\n", "        ", "e1", ",", "r", ",", "e2", "=", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "rel_to_ent_map", "[", "r", "]", ".", "append", "(", "e1", ")", "\n", "", "return", "rel_to_ent_map", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.data_loaders.data_utils.get_inv_relation": [[140, 151], ["None"], "function", ["None"], ["", "def", "get_inv_relation", "(", "r", ":", "str", ",", "dataset_name", "=", "\"nell\"", ")", "->", "str", ":", "\n", "    ", "if", "dataset_name", "==", "\"nell\"", ":", "\n", "        ", "if", "r", "[", "-", "4", ":", "]", "==", "\"_inv\"", ":", "\n", "            ", "return", "r", "[", ":", "-", "4", "]", "\n", "", "else", ":", "\n", "            ", "return", "r", "+", "\"_inv\"", "\n", "", "", "else", ":", "\n", "        ", "if", "r", "[", ":", "2", "]", "==", "\"__\"", "or", "r", "[", ":", "2", "]", "==", "\"_/\"", ":", "\n", "            ", "return", "r", "[", "1", ":", "]", "\n", "", "else", ":", "\n", "            ", "return", "\"_\"", "+", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.data_loaders.data_utils.return_nearest_relation_str": [[153, 164], ["print"], "function", ["None"], ["", "", "", "def", "return_nearest_relation_str", "(", "sim_sorted_ind", ",", "rev_rel_vocab", ",", "rel", ",", "k", "=", "5", ")", ":", "\n", "    ", "\"\"\"\n    helper method to print nearest relations\n    :param sim_sorted_ind: sim matrix sorted wrt index\n    :param rev_rel_vocab:\n    :param rel: relation we want sim for\n    :return:\n    \"\"\"", "\n", "print", "(", "\"====Query rel: {}====\"", ".", "format", "(", "rev_rel_vocab", "[", "rel", "]", ")", ")", "\n", "nearest_rel_inds", "=", "sim_sorted_ind", "[", "rel", ",", ":", "k", "]", "\n", "return", "[", "rev_rel_vocab", "[", "i", "]", "for", "i", "in", "nearest_rel_inds", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.data_loaders.data_utils.get_node_degree": [[166, 196], ["open", "tqdm.tqdm", "line.strip.strip", "line.strip.split"], "function", ["None"], ["", "def", "get_node_degree", "(", "file", ":", "str", ")", "->", "Dict", "[", "str", ",", "Dict", "[", "str", ",", "int", "]", "]", ":", "\n", "    ", "fin", "=", "open", "(", "file", ")", "\n", "degree", "=", "{", "}", "\n", "for", "line", "in", "tqdm", "(", "fin", ")", ":", "\n", "        ", "line", "=", "line", ".", "strip", "(", ")", "\n", "e1", ",", "r", ",", "e2", "=", "line", ".", "split", "(", "\"\\t\"", ")", "\n", "if", "e1", "not", "in", "degree", ":", "\n", "            ", "degree", "[", "e1", "]", "=", "{", "}", "\n", "degree", "[", "e1", "]", "[", "\"out\"", "]", "=", "1", "\n", "degree", "[", "e1", "]", "[", "\"in\"", "]", "=", "0", "\n", "degree", "[", "e1", "]", "[", "\"total\"", "]", "=", "1", "\n", "", "else", ":", "\n", "            ", "degree", "[", "e1", "]", "[", "\"out\"", "]", "+=", "1", "\n", "degree", "[", "e1", "]", "[", "\"total\"", "]", "+=", "1", "\n", "", "if", "e2", "not", "in", "degree", ":", "\n", "            ", "degree", "[", "e2", "]", "=", "{", "}", "\n", "degree", "[", "e2", "]", "[", "\"in\"", "]", "=", "1", "\n", "degree", "[", "e2", "]", "[", "\"out\"", "]", "=", "0", "\n", "degree", "[", "e2", "]", "[", "\"total\"", "]", "=", "1", "\n", "", "else", ":", "\n", "            ", "degree", "[", "e2", "]", "[", "\"in\"", "]", "+=", "1", "\n", "degree", "[", "e2", "]", "[", "\"total\"", "]", "+=", "1", "\n", "\n", "", "", "for", "d", "in", "degree", ":", "\n", "        ", "in_degree", "=", "degree", "[", "d", "]", "[", "\"in\"", "]", "\n", "out_degree", "=", "degree", "[", "d", "]", "[", "\"out\"", "]", "\n", "total_degree", "=", "degree", "[", "d", "]", "[", "\"total\"", "]", "\n", "assert", "(", "in_degree", "+", "out_degree", "==", "total_degree", ")", ",", "\"Error in calculating degree\"", "\n", "\n", "", "return", "degree", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.data_loaders.data_utils.calculate_upper_bound": [[218, 252], ["collections.defaultdict", "tqdm.tqdm", "print", "print", "open", "open", "pickle.load", "collections.defaultdict.items", "set", "set", "set.add", "all_subgraphs_num_nodes.append", "all_subgraphs_num_edges.append", "line.strip().split", "query_map[].append", "len", "len", "numpy.mean", "numpy.mean", "set.add", "set.add", "line.strip"], "function", ["None"], ["", "def", "calculate_upper_bound", "(", "graph_pkl", ":", "str", ",", "eval_file", ":", "str", ")", ":", "\n", "    ", "query_map", "=", "defaultdict", "(", "list", ")", "\n", "total_queries", ",", "total_covered", "=", "0", ",", "0", "\n", "all_subgraphs_num_nodes", ",", "all_subgraphs_num_edges", "=", "[", "]", ",", "[", "]", "\n", "with", "open", "(", "eval_file", ")", "as", "fin", ":", "\n", "        ", "for", "line", "in", "fin", ":", "\n", "            ", "e1", ",", "r", ",", "e2", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "query_map", "[", "(", "e1", ",", "r", ")", "]", ".", "append", "(", "e2", ")", "\n", "\n", "", "", "with", "open", "(", "graph_pkl", ",", "\"rb\"", ")", "as", "fin", ":", "\n", "        ", "paths", "=", "pickle", ".", "load", "(", "fin", ")", "\n", "", "for", "query", ",", "ans_list", "in", "tqdm", "(", "query_map", ".", "items", "(", ")", ")", ":", "\n", "        ", "e1", ",", "r", "=", "query", "\n", "all_entities_in_subgraph", "=", "set", "(", ")", "\n", "unique_edges", "=", "set", "(", ")", "\n", "all_entities_in_subgraph", ".", "add", "(", "e1", ")", "\n", "paths_e1", "=", "paths", "[", "e1", "]", "\n", "for", "p", "in", "paths_e1", ":", "\n", "            ", "parent", "=", "e1", "\n", "for", "rel", ",", "ent", "in", "p", ":", "\n", "                ", "unique_edges", ".", "add", "(", "(", "parent", ",", "rel", ",", "ent", ")", ")", "\n", "all_entities_in_subgraph", ".", "add", "(", "ent", ")", "\n", "parent", "=", "ent", "\n", "# now check how many entities are in the query list to get coverage", "\n", "", "", "all_subgraphs_num_nodes", ".", "append", "(", "len", "(", "all_entities_in_subgraph", ")", ")", "\n", "all_subgraphs_num_edges", ".", "append", "(", "len", "(", "unique_edges", ")", ")", "\n", "for", "e2", "in", "ans_list", ":", "\n", "            ", "if", "e2", "in", "all_entities_in_subgraph", ":", "\n", "                ", "total_covered", "+=", "1", "\n", "", "total_queries", "+=", "1", "\n", "", "", "print", "(", "\"Avg num nodes in subgraph: {}, avg num edges in subgraph: {}\"", ".", "format", "(", "np", ".", "mean", "(", "all_subgraphs_num_nodes", ")", ",", "\n", "np", ".", "mean", "(", "all_subgraphs_num_edges", ")", ")", ")", "\n", "print", "(", "\"Total queries: {}, total covered: {}, %covered: {}\"", ".", "format", "(", "total_queries", ",", "total_covered", ",", "\n", "(", "total_covered", "/", "total_queries", ")", "*", "100", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.data_loaders.kbqa_dataloader.KBQAGraphData.__init__": [[17, 31], ["torch.LongTensor", "torch_geometric.data.Data.__init__"], "methods", ["home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.sample_synthetic_graph.Graph.__init__"], ["    ", "def", "__init__", "(", "self", ",", "x", "=", "None", ",", "edge_index", "=", "None", ",", "edge_attr", "=", "None", ",", "dist_feats", "=", "None", ",", "seed_nodes_mask", "=", "None", ",", "\n", "label_nodes_mask", "=", "None", ",", "split", "=", "None", ",", "ex_id", "=", "None", ",", "query", "=", "None", ",", "query_str", "=", "None", ",", "answers", "=", "None", ",", "knn_ids", "=", "None", ",", "\n", "penalty", "=", "torch", ".", "LongTensor", "(", "[", "0", "]", ")", ")", ":", "\n", "        ", "super", "(", "KBQAGraphData", ",", "self", ")", ".", "__init__", "(", "x", ",", "edge_index", ",", "edge_attr", ")", "\n", "self", ".", "dist_feats", "=", "dist_feats", "\n", "self", ".", "seed_node_ids", "=", "seed_nodes_mask", "\n", "self", ".", "label_node_ids", "=", "label_nodes_mask", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "ex_id", "=", "ex_id", "\n", "self", ".", "query", "=", "query", "\n", "self", ".", "query_str", "=", "query_str", "\n", "self", ".", "answers", "=", "answers", "\n", "self", ".", "knn_ids", "=", "knn_ids", "\n", "self", ".", "penalty", "=", "penalty", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.data_loaders.kbqa_dataloader.KBQADataLoader.__init__": [[34, 84], ["kbqa_dataloader.KBQADataLoader.load_dataset", "src.global_config.logger.warning", "dict", "dict", "dict", "dict", "src.data_loaders.data_utils.load_data_all_triples", "src.global_config.logger.info", "os.path.join", "kbqa_dataloader.KBQADataLoader.load_query_encodings", "os.path.join", "open", "pickle.load"], "methods", ["home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.preprocess_metaqa_synthetic.load_dataset", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.data_loaders.data_utils.load_data_all_triples", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.data_loaders.kbqa_dataloader.KBQADataLoader.load_query_encodings"], ["    ", "def", "__init__", "(", "self", ",", "data_dir", ":", "str", ",", "data_file_suffix", ":", "str", "=", "''", ",", "train_batch_size", ":", "int", "=", "16", ",", "eval_batch_size", ":", "int", "=", "32", ",", "\n", "add_dist_feature", ":", "bool", "=", "False", ",", "add_inv_edges", ":", "bool", "=", "False", ",", "max_dist", ":", "int", "=", "3", ",", "\n", "downsample_eval_frac", ":", "float", "=", "1.0", ",", "task", ":", "str", "=", "\"pt_match\"", ",", "dataset_name", "=", "\"webqsp\"", ",", "\n", "precomputed_query_encoding_dir", ":", "str", "=", "None", ",", "paths_file_name", "=", "\"paths_1000_len_3.pkl\"", ",", "\n", "kb_system_file", "=", "None", ")", ":", "\n", "        ", "self", ".", "data_dir", "=", "data_dir", "\n", "self", ".", "data_file_suffix", "=", "\"_\"", "+", "data_file_suffix", "if", "data_file_suffix", "else", "''", "\n", "self", ".", "dataset_name", "=", "dataset_name", "\n", "self", ".", "train_batch_size", "=", "train_batch_size", "\n", "self", ".", "eval_batch_size", "=", "eval_batch_size", "\n", "self", ".", "add_dist_feature", "=", "add_dist_feature", "\n", "self", ".", "add_inv_edges", "=", "add_inv_edges", "\n", "self", ".", "max_dist", "=", "max_dist", "\n", "self", ".", "downsample_eval_frac", "=", "downsample_eval_frac", "\n", "self", ".", "dev_subsample_idx", "=", "None", "\n", "assert", "0.0", "<=", "downsample_eval_frac", "<=", "1.0", "\n", "if", "self", ".", "downsample_eval_frac", "<", "1.0", "and", "task", "!=", "'pt_match'", ":", "\n", "            ", "logger", ".", "warning", "(", "f\"'downsample_eval_frac' is not implemented for task: {task}\"", ")", "\n", "", "self", ".", "raw_train_data", ",", "self", ".", "raw_dev_data", ",", "self", ".", "raw_test_data", "=", "None", ",", "None", ",", "None", "\n", "# KBQA: These masks hold whether an example from the full parition was dropped (due to no subgraph)", "\n", "self", ".", "raw_train_drop_mask", ",", "self", ".", "raw_dev_drop_mask", ",", "self", ".", "raw_test_drop_mask", "=", "None", ",", "None", ",", "None", "\n", "self", ".", "train_dataset", ",", "self", ".", "train_dataloader", ",", "self", ".", "dev_dataset", ",", "self", ".", "dev_dataloader", ",", "self", ".", "test_dataset", ",", "self", ".", "test_dataloader", "=", "[", "]", ",", "None", ",", "[", "]", ",", "None", ",", "[", "]", ",", "None", "\n", "self", ".", "train_idmap", ",", "self", ".", "dev_idmap", ",", "self", ".", "test_idmap", "=", "{", "}", ",", "{", "}", ",", "{", "}", "\n", "self", ".", "n_entities", "=", "None", "\n", "self", ".", "n_relations", "=", "None", "\n", "self", ".", "n_base_feat", ",", "self", ".", "n_additional_feat", ",", "self", ".", "node_feat_dim", "=", "None", ",", "None", ",", "None", "\n", "self", ".", "full_adj_map", "=", "{", "}", "\n", "self", ".", "ent2id", ",", "self", ".", "id2ent", ",", "self", ".", "rel2id", ",", "self", ".", "id2rel", "=", "dict", "(", ")", ",", "dict", "(", ")", ",", "dict", "(", ")", ",", "dict", "(", ")", "\n", "self", ".", "full_edge_index", ",", "self", ".", "full_edge_attr", "=", "None", ",", "None", "\n", "self", ".", "base_feature_matrix", "=", "None", "\n", "self", ".", "lazy_load_ctr", "=", "0", "\n", "self", ".", "dev_penalty_multiplier", ",", "self", ".", "test_penalty_multiplier", "=", "1.0", ",", "1.0", "\n", "self", ".", "task", "=", "task", "\n", "self", ".", "kb_system_file", "=", "kb_system_file", "\n", "self", ".", "load_dataset", "(", ")", "\n", "self", ".", "query_enc_train", ",", "self", ".", "query_enc_dev", ",", "self", ".", "query_enc_test", "=", "None", ",", "None", ",", "None", "\n", "self", ".", "precomputed_query_encoding_dir", "=", "precomputed_query_encoding_dir", "\n", "if", "self", ".", "task", "==", "\"pt_match\"", ":", "\n", "            ", "if", "self", ".", "precomputed_query_encoding_dir", "is", "not", "None", ":", "\n", "                ", "self", ".", "load_query_encodings", "(", ")", "\n", "", "", "self", ".", "all_kg_map", "=", "None", "# Map of all triples in the knowledge graph. Use this map only for filtering in evaluation.", "\n", "self", ".", "all_paths", "=", "None", "# use this instead of traversing the entire subgraph", "\n", "if", "self", ".", "task", "==", "\"kbc\"", ":", "\n", "            ", "file_names", "=", "[", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "f'{split}.txt'", ")", "for", "split", "in", "[", "'graph'", ",", "'train'", ",", "'test'", ",", "'dev'", "]", "]", "\n", "self", ".", "all_kg_map", "=", "load_data_all_triples", "(", "*", "file_names", ")", "\n", "logger", ".", "info", "(", "\"Reading graph file {}\"", ".", "format", "(", "paths_file_name", ")", ")", "\n", "graph_pkl", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "paths_file_name", ")", "\n", "with", "open", "(", "graph_pkl", ",", "\"rb\"", ")", "as", "fin", ":", "\n", "                ", "self", ".", "all_paths", "=", "pickle", ".", "load", "(", "fin", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.data_loaders.kbqa_dataloader.KBQADataLoader.load_dataset": [[85, 432], ["len", "len", "torch.LongTensor", "torch.LongTensor", "kbqa_dataloader.KBQADataLoader.full_adj_map.items", "torch.sparse_coo_tensor", "kbqa_dataloader.KBQADataLoader.rel2id.items", "set", "zip", "zip", "kbqa_dataloader.KBQADataLoader.full_edge_index[].extend", "kbqa_dataloader.KBQADataLoader.full_edge_index[].extend", "kbqa_dataloader.KBQADataLoader.full_edge_attr.extend", "kbqa_dataloader.KBQADataLoader.add_inv_edges_to_adj", "len", "r_dict.items", "torch.ones", "src.global_config.logger.info", "torch.BoolTensor", "torch_geometric.data.DataListLoader", "torch.BoolTensor", "torch.BoolTensor", "torch_geometric.data.DataListLoader", "set", "src.global_config.logger.info", "src.global_config.logger.warning", "len", "set.add", "kbqa_dataloader.KBQADataLoader.ent2id.items", "kbqa_dataloader.KBQADataLoader.rel2id.items", "sparse_inds[].append", "sparse_inds[].append", "len", "len", "raw_train_data_temp.append", "kbqa_dataloader.KBQADataLoader.raw_train_drop_mask.append", "len", "len", "kbqa_dataloader.KBQADataLoader.train_dataset.append", "len", "len", "raw_dev_data_temp.append", "kbqa_dataloader.KBQADataLoader.raw_dev_drop_mask.append", "len", "len", "len", "kbqa_dataloader.KBQADataLoader.dev_dataset.append", "len", "len", "numpy.random.default_rng", "int", "sorted", "torch_geometric.data.DataListLoader", "torch_geometric.data.DataListLoader", "raw_test_data_temp.append", "kbqa_dataloader.KBQADataLoader.raw_test_drop_mask.append", "len", "len", "len", "kbqa_dataloader.KBQADataLoader.test_dataset.append", "len", "len", "open", "open", "src.global_config.logger.warning", "open", "src.global_config.logger.warning", "enumerate", "enumerate", "enumerate", "tqdm.tqdm.tqdm", "tqdm.tqdm.tqdm", "tqdm.tqdm.tqdm", "torch_geometric.data.DataListLoader", "torch_geometric.data.DataListLoader", "torch_geometric.data.DataListLoader", "kbqa_dataloader.KBQADataLoader.dataset_name.lower", "kbqa_dataloader.KBQADataLoader.dataset_name.lower", "kbqa_dataloader.KBQADataLoader.dataset_name.lower", "kbqa_dataloader.KBQADataLoader.dataset_name.lower", "open", "enumerate", "open", "enumerate", "src.global_config.logger.info", "tqdm.tqdm.tqdm", "print", "kbqa_dataloader.KBQADataLoader.dataset_name.lower", "os.path.exists", "os.path.exists", "set", "print", "os.path.join", "open", "inv_rels.append", "set.add", "rev_edge_index[].append", "rev_edge_index[].append", "rev_edge_attr.append", "src.global_config.logger.warning", "kbqa_dataloader.KBQADataLoader.raw_train_drop_mask.append", "kbqa_dataloader.KBQADataLoader.convert_rawdata_to_cbrdata", "kbqa_dataloader.KBQADataLoader.dataset_name.lower", "kbqa_dataloader.KBQADataLoader.dataset_name.lower", "kbqa_dataloader.KBQADataLoader.dataset_name.lower", "kbqa_dataloader.KBQADataLoader.dataset_name.lower", "open", "json.load", "kbqa_dataloader.KBQADataLoader.dataset_name.lower", "src.global_config.logger.warning", "kbqa_dataloader.KBQADataLoader.raw_dev_drop_mask.append", "len", "kbqa_dataloader.KBQADataLoader.convert_rawdata_to_cbrdata", "numpy.ceil", "numpy.random.default_rng.choice", "kbqa_dataloader.KBQADataLoader.dataset_name.lower", "kbqa_dataloader.KBQADataLoader.dataset_name.lower", "kbqa_dataloader.KBQADataLoader.dataset_name.lower", "kbqa_dataloader.KBQADataLoader.dataset_name.lower", "open", "json.load", "open", "json.load", "src.global_config.logger.warning", "kbqa_dataloader.KBQADataLoader.raw_test_drop_mask.append", "len", "kbqa_dataloader.KBQADataLoader.convert_rawdata_to_cbrdata", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "os.path.join", "line.strip.strip.strip().split", "kbqa_dataloader.KBQADataLoader.raw_train_data_map[].append", "kbqa_dataloader.KBQADataLoader.raw_train_data_map[].append", "os.path.join", "line.strip.strip.strip().split", "len", "os.path.join", "line.strip.strip.strip().split", "len", "kbqa_dataloader.KBQADataLoader.raw_train_data_map.items", "kbqa_dataloader.KBQADataLoader.raw_train_data.append", "kbqa_dataloader.KBQADataLoader.raw_dev_data_map.items", "kbqa_dataloader.KBQADataLoader.raw_dev_data.append", "kbqa_dataloader.KBQADataLoader.raw_test_data_map.items", "kbqa_dataloader.KBQADataLoader.raw_test_data.append", "kbqa_dataloader.KBQADataLoader.train_dataset.append", "kbqa_dataloader.KBQADataLoader.dev_dataset.append", "kbqa_dataloader.KBQADataLoader.test_dataset.append", "os.path.join", "line.strip.strip.strip", "os.path.join", "line.strip.strip.strip", "open", "json.load", "set", "uniq_rels_per_q.append", "open", "json.load", "os.path.join", "os.path.join", "open", "os.path.join", "line.strip.strip.strip().split", "rel.endswith", "kbqa_dataloader.KBQADataLoader.dataset_name.lower", "kbqa_dataloader.KBQADataLoader.dataset_name.lower", "kbqa_dataloader.KBQADataLoader.dataset_name.lower", "kbqa_dataloader.KBQADataLoader.dataset_name.lower", "open", "json.load", "open", "json.load", "len", "os.path.join", "open", "json.load", "len", "len", "os.path.join", "os.path.join", "len", "kbqa_dataloader.KBQADataLoader.raw_dev_data_map[].append", "kbqa_dataloader.KBQADataLoader.raw_dev_data_map[].append", "len", "kbqa_dataloader.KBQADataLoader.raw_test_data_map[].append", "kbqa_dataloader.KBQADataLoader.raw_test_data_map[].append", "len", "kbqa_dataloader.KBQADataLoader.convert_rawdata_to_cbrdata", "kbqa_dataloader.KBQADataLoader.convert_rawdata_to_cbrdata", "kbqa_dataloader.KBQADataLoader.convert_rawdata_to_cbrdata", "os.path.join", "os.path.join", "set.add", "len", "numpy.mean", "open", "json.load", "os.path.exists", "os.path.join", "open", "json.load", "open", "json.dump", "kbqa_dataloader.KBQADataLoader.rel2id.items", "open", "json.load", "open", "json.dump", "open", "json.load", "set", "adj_map.items", "uniq_rels_per_q.append", "numpy.mean", "line.strip.strip.strip().split", "kbqa_dataloader.KBQADataLoader.full_adj_map.setdefault().setdefault().append", "kbqa_dataloader.KBQADataLoader.full_edge_index[].append", "kbqa_dataloader.KBQADataLoader.full_edge_index[].append", "kbqa_dataloader.KBQADataLoader.full_edge_attr.append", "len", "len", "len", "kbqa_dataloader.KBQADataLoader.full_adj_map.setdefault().setdefault().append", "kbqa_dataloader.KBQADataLoader.full_edge_index[].append", "kbqa_dataloader.KBQADataLoader.full_edge_index[].append", "kbqa_dataloader.KBQADataLoader.full_edge_attr.append", "os.path.join", "os.path.join", "os.path.join", "len", "line.strip.strip.strip", "line.strip.strip.strip", "line.strip.strip.strip", "kbqa_dataloader.KBQADataLoader.full_adj_map.setdefault().setdefault().append", "kbqa_dataloader.KBQADataLoader.full_edge_index[].append", "kbqa_dataloader.KBQADataLoader.full_edge_index[].append", "kbqa_dataloader.KBQADataLoader.full_edge_attr.append", "set.add", "os.path.join", "os.path.basename", "os.path.join", "enumerate", "os.path.join", "os.path.join", "open", "json.load", "set", "os.path.join", "kbqa_dataloader.KBQADataLoader.ent2id.items", "os.path.join", "e1_map.items", "len", "len", "len", "len", "line.strip.strip.strip", "rel_nm.endswith", "os.path.join", "line.strip.strip.strip", "kbqa_dataloader.KBQADataLoader.full_adj_map.setdefault().setdefault", "kbqa_dataloader.KBQADataLoader.full_adj_map.setdefault().setdefault", "kbqa_dataloader.KBQADataLoader.full_adj_map.setdefault().setdefault", "set.add", "kbqa_dataloader.KBQADataLoader.full_adj_map.setdefault().setdefault().append", "kbqa_dataloader.KBQADataLoader.full_edge_index[].append", "kbqa_dataloader.KBQADataLoader.full_edge_index[].append", "kbqa_dataloader.KBQADataLoader.full_edge_attr.append", "set.add", "kbqa_dataloader.KBQADataLoader.full_adj_map.setdefault", "kbqa_dataloader.KBQADataLoader.full_adj_map.setdefault", "kbqa_dataloader.KBQADataLoader.full_adj_map.setdefault", "kbqa_dataloader.KBQADataLoader.full_adj_map.setdefault().setdefault", "kbqa_dataloader.KBQADataLoader.full_adj_map.setdefault"], "methods", ["home.repos.pwc.inspect_result.rajarshd_cbr-subg.data_loaders.kbqa_dataloader.KBQADataLoader.add_inv_edges_to_adj", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.data_loaders.kbqa_dataloader.KBQADataLoader.convert_rawdata_to_cbrdata", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.data_loaders.kbqa_dataloader.KBQADataLoader.convert_rawdata_to_cbrdata", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.data_loaders.kbqa_dataloader.KBQADataLoader.convert_rawdata_to_cbrdata", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.data_loaders.kbqa_dataloader.KBQADataLoader.convert_rawdata_to_cbrdata", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.data_loaders.kbqa_dataloader.KBQADataLoader.convert_rawdata_to_cbrdata", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.data_loaders.kbqa_dataloader.KBQADataLoader.convert_rawdata_to_cbrdata"], ["", "", "", "def", "load_dataset", "(", "self", ")", ":", "\n", "        ", "self", ".", "full_edge_index", ",", "self", ".", "full_edge_attr", "=", "[", "[", "]", ",", "[", "]", "]", ",", "[", "]", "\n", "if", "self", ".", "task", "==", "\"pt_match\"", ":", "\n", "            ", "if", "self", ".", "dataset_name", ".", "lower", "(", ")", "==", "\"webqsp\"", "or", "self", ".", "dataset_name", ".", "lower", "(", ")", "==", "\"cwq\"", "or", "self", ".", "dataset_name", ".", "lower", "(", ")", "==", "\"metaqa\"", "or", "self", ".", "dataset_name", ".", "lower", "(", ")", "==", "\"freebaseqa\"", ":", "\n", "                ", "seen_edges", "=", "set", "(", ")", "\n", "logger", ".", "info", "(", "\"Reading vocab...\"", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "\n", "f\"entities{self.data_file_suffix}.txt\"", ")", ")", "as", "fin", ":", "\n", "                    ", "for", "line_ctr", ",", "line", "in", "enumerate", "(", "fin", ")", ":", "\n", "                        ", "line", "=", "line", ".", "strip", "(", ")", "\n", "self", ".", "ent2id", "[", "line", "]", "=", "line_ctr", "\n", "self", ".", "id2ent", "[", "line_ctr", "]", "=", "line", "\n", "", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "\n", "f\"relations{self.data_file_suffix}.txt\"", ")", ")", "as", "fin", ":", "\n", "                    ", "for", "line_ctr", ",", "line", "in", "enumerate", "(", "fin", ")", ":", "\n", "                        ", "line", "=", "line", ".", "strip", "(", ")", "\n", "self", ".", "rel2id", "[", "line", "]", "=", "line_ctr", "\n", "self", ".", "id2rel", "[", "line_ctr", "]", "=", "line", "\n", "", "", "for", "split", "in", "[", "'train'", ",", "'dev'", ",", "'test'", "]", ":", "\n", "                    ", "logger", ".", "info", "(", "\n", "\"Loading {}...\"", ".", "format", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "\n", "f'{split}{self.data_file_suffix}.json'", ")", ")", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "\n", "f'{split}{self.data_file_suffix}.json'", ")", ")", "as", "fin", ":", "\n", "                        ", "data", "=", "json", ".", "load", "(", "fin", ")", "\n", "if", "split", "==", "\"train\"", ":", "# train file needs a lot of time to read, so cache it for later", "\n", "                            ", "self", ".", "raw_train_data", "=", "data", "\n", "", "", "uniq_rels_per_q", "=", "[", "]", "\n", "for", "q_data", "in", "tqdm", "(", "data", ")", ":", "\n", "                        ", "q_subgraph", "=", "q_data", "[", "\"subgraph\"", "]", "[", "\"tuples\"", "]", "\n", "rels_per_q", "=", "set", "(", ")", "\n", "for", "triple", "in", "q_subgraph", ":", "\n", "                            ", "e1", ",", "r", ",", "e2", "=", "triple", "\n", "rels_per_q", ".", "add", "(", "r", ")", "\n", "if", "(", "e1", ",", "r", ",", "e2", ")", "not", "in", "seen_edges", ":", "\n", "                                ", "self", ".", "full_adj_map", ".", "setdefault", "(", "self", ".", "id2ent", "[", "e1", "]", ",", "{", "}", ")", ".", "setdefault", "(", "self", ".", "id2rel", "[", "r", "]", ",", "[", "]", ")", ".", "append", "(", "\n", "self", ".", "id2ent", "[", "e2", "]", ")", "\n", "self", ".", "full_edge_index", "[", "0", "]", ".", "append", "(", "e1", ")", "\n", "self", ".", "full_edge_index", "[", "1", "]", ".", "append", "(", "e2", ")", "\n", "self", ".", "full_edge_attr", ".", "append", "(", "r", ")", "\n", "seen_edges", ".", "add", "(", "(", "e1", ",", "r", ",", "e2", ")", ")", "\n", "", "", "uniq_rels_per_q", ".", "append", "(", "len", "(", "rels_per_q", ")", ")", "\n", "", "print", "(", "\"Num rels per question: {}\"", ".", "format", "(", "np", ".", "mean", "(", "uniq_rels_per_q", ")", ")", ")", "\n", "", "", "elif", "self", ".", "dataset_name", ".", "lower", "(", ")", "==", "\"synthetic\"", ":", "\n", "                ", "if", "self", ".", "kb_system_file", "is", "None", ":", "\n", "                    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "\"dset_sampling_config.json\"", ")", ")", "as", "fin", ":", "\n", "                        ", "dset_config", "=", "json", ".", "load", "(", "fin", ")", "\n", "", "self", ".", "kb_system_file", "=", "dset_config", "[", "\"kb_system\"", "]", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "kb_system_file", ")", ":", "\n", "                        ", "self", ".", "kb_system_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "os", ".", "path", ".", "basename", "(", "dset_config", "[", "\"kb_system\"", "]", ")", ")", "\n", "", "", "with", "open", "(", "self", ".", "kb_system_file", ")", "as", "fin", ":", "\n", "                    ", "kb_system", "=", "json", ".", "load", "(", "fin", ")", "\n", "", "if", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "\"relation_vocab.json\"", ")", ")", ":", "\n", "                    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "\"relation_vocab.json\"", ")", ")", "as", "fin", ":", "\n", "                        ", "self", ".", "rel2id", "=", "json", ".", "load", "(", "fin", ")", "\n", "", "", "else", ":", "\n", "                    ", "self", ".", "rel2id", "=", "{", "rel_name", ":", "r_ctr", "for", "r_ctr", ",", "rel_name", "in", "enumerate", "(", "kb_system", "[", "\"rel_types\"", "]", ")", "}", "\n", "# write relation vocab to be used later", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "\"relation_vocab.json\"", ")", ",", "\"w\"", ")", "as", "fout", ":", "\n", "                        ", "json", ".", "dump", "(", "self", ".", "rel2id", ",", "fout", ",", "indent", "=", "2", ")", "\n", "", "", "self", ".", "id2rel", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "self", ".", "rel2id", ".", "items", "(", ")", "}", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "\"entity_vocab.json\"", ")", ")", ":", "\n", "                    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "\"entity_vocab.json\"", ")", ")", "as", "fin", ":", "\n", "                        ", "self", ".", "ent2id", "=", "json", ".", "load", "(", "fin", ")", "\n", "", "", "else", ":", "\n", "                    ", "e_ctr", "=", "0", "\n", "for", "file_name", "in", "[", "\"train.json\"", ",", "\"dev.json\"", ",", "\"test.json\"", "]", ":", "\n", "                        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "file_name", ")", ")", "as", "fin", ":", "\n", "                            ", "data", "=", "json", ".", "load", "(", "fin", ")", "\n", "", "for", "d", "in", "data", ":", "\n", "                            ", "rels_per_q", "=", "set", "(", ")", "\n", "entities", "=", "d", "[", "\"graph\"", "]", "[", "\"entities\"", "]", "\n", "for", "e", "in", "entities", ":", "\n", "                                ", "self", ".", "ent2id", "[", "e", "]", "=", "e_ctr", "\n", "e_ctr", "+=", "1", "\n", "# write entity vocab to be used later", "\n", "", "", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "\"entity_vocab.json\"", ")", ",", "\"w\"", ")", "as", "fout", ":", "\n", "                        ", "json", ".", "dump", "(", "self", ".", "ent2id", ",", "fout", ",", "indent", "=", "2", ")", "\n", "", "self", ".", "id2ent", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "self", ".", "ent2id", ".", "items", "(", ")", "}", "\n", "\n", "", "seen_edges", "=", "set", "(", ")", "\n", "uniq_rels_per_q", "=", "[", "]", "\n", "for", "file_name", "in", "[", "\"train.json\"", ",", "\"dev.json\"", ",", "\"test.json\"", "]", ":", "\n", "                    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "file_name", ")", ")", "as", "fin", ":", "\n", "                        ", "data", "=", "json", ".", "load", "(", "fin", ")", "\n", "", "for", "d", "in", "data", ":", "\n", "                        ", "rels_per_q", "=", "set", "(", ")", "\n", "entities", "=", "d", "[", "\"graph\"", "]", "[", "\"entities\"", "]", "\n", "adj_map", "=", "d", "[", "\"graph\"", "]", "[", "\"adj_map\"", "]", "\n", "for", "e1", ",", "e1_map", "in", "adj_map", ".", "items", "(", ")", ":", "\n", "                            ", "for", "r", ",", "e2_list", "in", "e1_map", ".", "items", "(", ")", ":", "\n", "                                ", "for", "e2", "in", "e2_list", ":", "\n", "                                    ", "if", "(", "e1", ",", "r", ",", "e2", ")", "not", "in", "seen_edges", ":", "\n", "                                        ", "rels_per_q", ".", "add", "(", "r", ")", "\n", "self", ".", "full_adj_map", ".", "setdefault", "(", "e1", ",", "{", "}", ")", ".", "setdefault", "(", "r", ",", "[", "]", ")", ".", "append", "(", "e2", ")", "\n", "self", ".", "full_edge_index", "[", "0", "]", ".", "append", "(", "self", ".", "ent2id", "[", "e1", "]", ")", "\n", "self", ".", "full_edge_index", "[", "1", "]", ".", "append", "(", "self", ".", "ent2id", "[", "e2", "]", ")", "\n", "self", ".", "full_edge_attr", ".", "append", "(", "self", ".", "rel2id", "[", "r", "]", ")", "\n", "seen_edges", ".", "add", "(", "(", "e1", ",", "r", ",", "e2", ")", ")", "\n", "", "", "", "", "uniq_rels_per_q", ".", "append", "(", "len", "(", "rels_per_q", ")", ")", "\n", "", "", "print", "(", "\"Num rels per question: {}\"", ".", "format", "(", "np", ".", "mean", "(", "uniq_rels_per_q", ")", ")", ")", "\n", "", "else", ":", "\n", "                ", "kb_filenm", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "'kb.txt'", ")", "\n", "with", "open", "(", "kb_filenm", ")", "as", "fin", ":", "\n", "                    ", "for", "line", "in", "fin", ":", "\n", "                        ", "e1", ",", "r", ",", "e2", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'|'", ")", "\n", "self", ".", "full_adj_map", ".", "setdefault", "(", "e1", ",", "{", "}", ")", ".", "setdefault", "(", "r", ",", "[", "]", ")", ".", "append", "(", "e2", ")", "\n", "# self.full_adj_map.setdefault(e2, {}).setdefault(r + '_inv', []).append(e1)", "\n", "if", "e1", "not", "in", "self", ".", "ent2id", ":", "\n", "                            ", "self", ".", "ent2id", "[", "e1", "]", "=", "len", "(", "self", ".", "ent2id", ")", "\n", "", "if", "e2", "not", "in", "self", ".", "ent2id", ":", "\n", "                            ", "self", ".", "ent2id", "[", "e2", "]", "=", "len", "(", "self", ".", "ent2id", ")", "\n", "", "if", "r", "not", "in", "self", ".", "rel2id", ":", "\n", "                            ", "self", ".", "rel2id", "[", "r", "]", "=", "len", "(", "self", ".", "rel2id", ")", "\n", "", "self", ".", "full_edge_index", "[", "0", "]", ".", "append", "(", "self", ".", "ent2id", "[", "e1", "]", ")", "\n", "self", ".", "full_edge_index", "[", "1", "]", ".", "append", "(", "self", ".", "ent2id", "[", "e2", "]", ")", "\n", "self", ".", "full_edge_attr", ".", "append", "(", "self", ".", "rel2id", "[", "r", "]", ")", "\n", "", "", "", "", "elif", "self", ".", "task", "==", "\"kbc\"", ":", "\n", "            ", "for", "split", "in", "[", "'train'", ",", "'test'", ",", "'dev'", ",", "'graph'", "]", ":", "\n", "                ", "for", "line", "in", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "f'{split}.txt'", ")", ")", ":", "\n", "                    ", "e1", ",", "r", ",", "e2", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "if", "e1", "not", "in", "self", ".", "ent2id", ":", "\n", "                        ", "self", ".", "ent2id", "[", "e1", "]", "=", "len", "(", "self", ".", "ent2id", ")", "\n", "", "if", "e2", "not", "in", "self", ".", "ent2id", ":", "\n", "                        ", "self", ".", "ent2id", "[", "e2", "]", "=", "len", "(", "self", ".", "ent2id", ")", "\n", "", "if", "r", "not", "in", "self", ".", "rel2id", ":", "\n", "                        ", "self", ".", "rel2id", "[", "r", "]", "=", "len", "(", "self", ".", "rel2id", ")", "\n", "", "if", "split", "==", "\"graph\"", ":", "# vocab created from all splits, but graph should not have test edges", "\n", "                        ", "self", ".", "full_adj_map", ".", "setdefault", "(", "e1", ",", "{", "}", ")", ".", "setdefault", "(", "r", ",", "[", "]", ")", ".", "append", "(", "e2", ")", "\n", "self", ".", "full_edge_index", "[", "0", "]", ".", "append", "(", "self", ".", "ent2id", "[", "e1", "]", ")", "\n", "self", ".", "full_edge_index", "[", "1", "]", ".", "append", "(", "self", ".", "ent2id", "[", "e2", "]", ")", "\n", "self", ".", "full_edge_attr", ".", "append", "(", "self", ".", "rel2id", "[", "r", "]", ")", "\n", "", "", "", "", "else", ":", "\n", "            ", "logger", ".", "warning", "(", "\"Task not implemented!!!!\"", ")", "\n", "\n", "", "self", ".", "n_entities", "=", "len", "(", "self", ".", "ent2id", ")", "\n", "self", ".", "n_relations", "=", "len", "(", "self", ".", "rel2id", ")", "\n", "if", "self", ".", "add_inv_edges", ":", "\n", "# rel2id_for_inv_edges = {rel_name + '_inv': rel_idx + self.n_relations", "\n", "#                         for rel_name, rel_idx in self.rel2id.items()}", "\n", "# self.rel2id.update(rel2id_for_inv_edges)", "\n", "            ", "inv_rels", "=", "[", "]", "\n", "for", "rel", ",", "_", "in", "self", ".", "rel2id", ".", "items", "(", ")", ":", "\n", "                ", "rel_inv", "=", "rel", "+", "\"_inv\"", "if", "not", "rel", ".", "endswith", "(", "\"_inv\"", ")", "else", "rel", "[", ":", "-", "4", "]", "\n", "if", "rel_inv", "not", "in", "self", ".", "rel2id", ":", "\n", "                    ", "inv_rels", ".", "append", "(", "rel_inv", ")", "\n", "", "", "for", "rel", "in", "inv_rels", ":", "\n", "                ", "self", ".", "rel2id", "[", "rel", "]", "=", "len", "(", "self", ".", "rel2id", ")", "\n", "", "seen_edges", "=", "set", "(", ")", "\n", "for", "e1_id", ",", "e2_id", ",", "r_id", "in", "zip", "(", "self", ".", "full_edge_index", "[", "0", "]", ",", "self", ".", "full_edge_index", "[", "1", "]", ",", "self", ".", "full_edge_attr", ")", ":", "\n", "                ", "seen_edges", ".", "add", "(", "(", "e1_id", ",", "r_id", ",", "e2_id", ")", ")", "\n", "", "rev_edge_index", ",", "rev_edge_attr", "=", "[", "[", "]", ",", "[", "]", "]", ",", "[", "]", "\n", "for", "e1_id", ",", "e2_id", ",", "r_id", "in", "zip", "(", "self", ".", "full_edge_index", "[", "0", "]", ",", "self", ".", "full_edge_index", "[", "1", "]", ",", "self", ".", "full_edge_attr", ")", ":", "\n", "                ", "rel_nm", "=", "self", ".", "id2rel", "[", "r_id", "]", "\n", "r_inv_id", "=", "self", ".", "rel2id", "[", "rel_nm", "+", "\"_inv\"", "if", "not", "rel_nm", ".", "endswith", "(", "\"_inv\"", ")", "else", "rel_nm", "[", ":", "-", "4", "]", "]", "\n", "if", "(", "e2_id", ",", "r_inv_id", ",", "e1_id", ")", "not", "in", "seen_edges", ":", "\n", "                    ", "seen_edges", ".", "add", "(", "(", "e2_id", ",", "r_inv_id", ",", "e1_id", ")", ")", "\n", "rev_edge_index", "[", "0", "]", ".", "append", "(", "e2_id", ")", "\n", "rev_edge_index", "[", "1", "]", ".", "append", "(", "e1_id", ")", "\n", "rev_edge_attr", ".", "append", "(", "r_inv_id", ")", "\n", "", "", "self", ".", "full_edge_index", "[", "0", "]", ".", "extend", "(", "rev_edge_index", "[", "0", "]", ")", "\n", "self", ".", "full_edge_index", "[", "1", "]", ".", "extend", "(", "rev_edge_index", "[", "1", "]", ")", "\n", "self", ".", "full_edge_attr", ".", "extend", "(", "rev_edge_attr", ")", "\n", "self", ".", "full_adj_map", "=", "self", ".", "add_inv_edges_to_adj", "(", "self", ".", "full_adj_map", ")", "\n", "self", ".", "n_relations", "=", "len", "(", "self", ".", "rel2id", ")", "\n", "\n", "", "self", ".", "id2ent", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "self", ".", "ent2id", ".", "items", "(", ")", "}", "\n", "self", ".", "id2rel", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "self", ".", "rel2id", ".", "items", "(", ")", "}", "\n", "\n", "self", ".", "full_edge_index", "=", "torch", ".", "LongTensor", "(", "self", ".", "full_edge_index", ")", "\n", "self", ".", "full_edge_attr", "=", "torch", ".", "LongTensor", "(", "self", ".", "full_edge_attr", ")", "\n", "\n", "self", ".", "n_base_feat", "=", "self", ".", "n_relations", "if", "self", ".", "add_inv_edges", "else", "2", "*", "self", ".", "n_relations", "\n", "self", ".", "n_additional_feat", "=", "self", ".", "max_dist", "+", "1", "if", "self", ".", "add_dist_feature", "else", "0", "\n", "self", ".", "node_feat_dim", "=", "self", ".", "n_base_feat", "+", "self", ".", "n_additional_feat", "\n", "\n", "sparse_inds", "=", "[", "[", "]", ",", "[", "]", "]", "\n", "for", "e1", ",", "r_dict", "in", "self", ".", "full_adj_map", ".", "items", "(", ")", ":", "\n", "            ", "for", "r", ",", "e2_list", "in", "r_dict", ".", "items", "(", ")", ":", "\n", "                ", "rel_idx", "=", "self", ".", "rel2id", "[", "r", "]", "\n", "sparse_inds", "[", "0", "]", ".", "append", "(", "self", ".", "ent2id", "[", "e1", "]", ")", "\n", "sparse_inds", "[", "1", "]", ".", "append", "(", "rel_idx", ")", "\n", "", "", "self", ".", "base_feature_matrix", "=", "torch", ".", "sparse_coo_tensor", "(", "sparse_inds", ",", "torch", ".", "ones", "(", "len", "(", "sparse_inds", "[", "0", "]", ")", ")", ",", "\n", "(", "len", "(", "self", ".", "ent2id", ")", ",", "self", ".", "node_feat_dim", ")", ")", "\n", "if", "self", ".", "task", "==", "\"pt_match\"", ":", "\n", "            ", "if", "self", ".", "raw_train_data", "is", "None", ":", "\n", "                ", "if", "self", ".", "dataset_name", ".", "lower", "(", ")", "==", "\"webqsp\"", "or", "self", ".", "dataset_name", ".", "lower", "(", ")", "==", "\"cwq\"", "or", "self", ".", "dataset_name", ".", "lower", "(", ")", "==", "\"metaqa\"", "or", "self", ".", "dataset_name", ".", "lower", "(", ")", "==", "\"freebaseqa\"", ":", "\n", "                    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "f'train{self.data_file_suffix}.json'", ")", ")", "as", "fin", ":", "\n", "                        ", "self", ".", "raw_train_data", "=", "json", ".", "load", "(", "fin", ")", "\n", "", "", "else", ":", "\n", "                    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "\"train.json\"", ")", ")", "as", "fin", ":", "\n", "                        ", "self", ".", "raw_train_data", "=", "json", ".", "load", "(", "fin", ")", "\n", "", "", "", "logger", ".", "info", "(", "\"Creating train id map...\"", ")", "\n", "item_ctr", "=", "0", "\n", "raw_train_data_temp", "=", "[", "]", "\n", "self", ".", "raw_train_drop_mask", "=", "[", "]", "\n", "for", "item", "in", "self", ".", "raw_train_data", ":", "\n", "                ", "if", "\"subgraph\"", "in", "item", "and", "len", "(", "item", "[", "\"subgraph\"", "]", "[", "\"tuples\"", "]", ")", "==", "0", ":", "\n", "                    ", "logger", ".", "warning", "(", "\"!!!! A train datapoint is being removed because of no subgraphs!!!\"", ")", "\n", "self", ".", "raw_train_drop_mask", ".", "append", "(", "1", ")", "\n", "continue", "\n", "", "self", ".", "train_idmap", "[", "item", "[", "\"id\"", "]", "]", "=", "item_ctr", "\n", "raw_train_data_temp", ".", "append", "(", "item", ")", "\n", "self", ".", "raw_train_drop_mask", ".", "append", "(", "0", ")", "\n", "item_ctr", "+=", "1", "\n", "# Length of mask should match original dataset split length", "\n", "", "assert", "len", "(", "self", ".", "raw_train_data", ")", "==", "len", "(", "self", ".", "raw_train_drop_mask", ")", "\n", "self", ".", "raw_train_drop_mask", "=", "torch", ".", "BoolTensor", "(", "self", ".", "raw_train_drop_mask", ")", "\n", "# remove the example we ignored from the raw train data. Will it cause us problems later?", "\n", "self", ".", "raw_train_data", "=", "raw_train_data_temp", "\n", "for", "item", "in", "self", ".", "raw_train_data", ":", "\n", "                ", "self", ".", "train_dataset", ".", "append", "(", "\n", "self", ".", "convert_rawdata_to_cbrdata", "(", "item", ",", "'train'", ",", "self", ".", "add_dist_feature", ",", "self", ".", "max_dist", ",", "lazy", "=", "True", ")", ")", "\n", "", "assert", "len", "(", "self", ".", "train_idmap", ")", "==", "len", "(", "self", ".", "train_dataset", ")", "\n", "self", ".", "train_dataloader", "=", "DataListLoader", "(", "self", ".", "train_dataset", ",", "self", ".", "train_batch_size", ",", "shuffle", "=", "True", ")", "\n", "\n", "if", "self", ".", "dataset_name", ".", "lower", "(", ")", "==", "\"webqsp\"", "or", "self", ".", "dataset_name", ".", "lower", "(", ")", "==", "\"cwq\"", "or", "self", ".", "dataset_name", ".", "lower", "(", ")", "==", "\"metaqa\"", "or", "self", ".", "dataset_name", ".", "lower", "(", ")", "==", "\"freebaseqa\"", ":", "\n", "                ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "f'dev{self.data_file_suffix}.json'", ")", ")", "as", "fin", ":", "\n", "                    ", "self", ".", "raw_dev_data", "=", "json", ".", "load", "(", "fin", ")", "\n", "", "", "elif", "self", ".", "dataset_name", ".", "lower", "(", ")", "==", "\"synthetic\"", ":", "\n", "                ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "\"dev.json\"", ")", ")", "as", "fin", ":", "\n", "                    ", "self", ".", "raw_dev_data", "=", "json", ".", "load", "(", "fin", ")", "\n", "", "", "item_ctr", "=", "0", "\n", "raw_dev_data_temp", "=", "[", "]", "\n", "self", ".", "raw_dev_drop_mask", "=", "[", "]", "\n", "dev_penalty_ctr", "=", "0", "\n", "for", "item", "in", "self", ".", "raw_dev_data", ":", "\n", "                ", "if", "\"subgraph\"", "in", "item", "and", "len", "(", "item", "[", "\"subgraph\"", "]", "[", "\"tuples\"", "]", ")", "==", "0", ":", "\n", "                    ", "logger", ".", "warning", "(", "\"!!!! A DEV datapoint is being removed because of no subgraphs!!!\"", ")", "\n", "self", ".", "raw_dev_drop_mask", ".", "append", "(", "1", ")", "\n", "dev_penalty_ctr", "+=", "1", "\n", "continue", "\n", "", "self", ".", "dev_idmap", "[", "item", "[", "\"id\"", "]", "]", "=", "item_ctr", "\n", "raw_dev_data_temp", ".", "append", "(", "item", ")", "\n", "self", ".", "raw_dev_drop_mask", ".", "append", "(", "0", ")", "\n", "item_ctr", "+=", "1", "\n", "", "self", ".", "dev_penalty_multiplier", "=", "(", "len", "(", "self", ".", "raw_dev_data", ")", "-", "dev_penalty_ctr", ")", "/", "(", "len", "(", "self", ".", "raw_dev_data", ")", ")", "\n", "# Length of mask should match original dataset split length", "\n", "assert", "len", "(", "self", ".", "raw_dev_data", ")", "==", "len", "(", "self", ".", "raw_dev_drop_mask", ")", "\n", "self", ".", "raw_dev_drop_mask", "=", "torch", ".", "BoolTensor", "(", "self", ".", "raw_dev_drop_mask", ")", "\n", "# remove the example we ignored from the raw dev data. Will it cause us problems later?", "\n", "self", ".", "raw_dev_data", "=", "raw_dev_data_temp", "\n", "for", "item", "in", "self", ".", "raw_dev_data", ":", "\n", "                ", "self", ".", "dev_dataset", ".", "append", "(", "\n", "self", ".", "convert_rawdata_to_cbrdata", "(", "item", ",", "'dev'", ",", "self", ".", "add_dist_feature", ",", "self", ".", "max_dist", ",", "lazy", "=", "True", ")", ")", "\n", "", "assert", "len", "(", "self", ".", "dev_idmap", ")", "==", "len", "(", "self", ".", "dev_dataset", ")", "\n", "if", "self", ".", "downsample_eval_frac", "<", "1.0", ":", "\n", "                ", "rng_", "=", "np", ".", "random", ".", "default_rng", "(", "42", ")", "\n", "subsample_sz", "=", "int", "(", "np", ".", "ceil", "(", "self", ".", "downsample_eval_frac", "*", "len", "(", "self", ".", "raw_dev_data", ")", ")", ")", "\n", "self", ".", "dev_subsample_idx", "=", "sorted", "(", "rng_", ".", "choice", "(", "len", "(", "self", ".", "raw_dev_data", ")", ",", "subsample_sz", ",", "replace", "=", "False", ")", ")", "\n", "subsample_dev_data", "=", "[", "self", ".", "dev_dataset", "[", "idx_", "]", "for", "idx_", "in", "self", ".", "dev_subsample_idx", "]", "\n", "self", ".", "dev_dataloader", "=", "DataListLoader", "(", "subsample_dev_data", ",", "self", ".", "eval_batch_size", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "dev_dataloader", "=", "DataListLoader", "(", "self", ".", "dev_dataset", ",", "self", ".", "eval_batch_size", ")", "\n", "\n", "", "if", "self", ".", "dataset_name", ".", "lower", "(", ")", "==", "\"webqsp\"", "or", "self", ".", "dataset_name", ".", "lower", "(", ")", "==", "\"cwq\"", "or", "self", ".", "dataset_name", ".", "lower", "(", ")", "==", "\"metaqa\"", "or", "self", ".", "dataset_name", ".", "lower", "(", ")", "==", "\"freebaseqa\"", ":", "\n", "                ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "f'test{self.data_file_suffix}.json'", ")", ")", "as", "fin", ":", "\n", "                    ", "self", ".", "raw_test_data", "=", "json", ".", "load", "(", "fin", ")", "\n", "", "", "else", ":", "\n", "                ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "\"test.json\"", ")", ")", "as", "fin", ":", "\n", "                    ", "self", ".", "raw_test_data", "=", "json", ".", "load", "(", "fin", ")", "\n", "", "", "item_ctr", "=", "0", "\n", "raw_test_data_temp", "=", "[", "]", "\n", "self", ".", "raw_test_drop_mask", "=", "[", "]", "\n", "test_penalty_ctr", "=", "0", "\n", "for", "item", "in", "self", ".", "raw_test_data", ":", "\n", "                ", "if", "\"subgraph\"", "in", "item", "and", "len", "(", "item", "[", "\"subgraph\"", "]", "[", "\"tuples\"", "]", ")", "==", "0", ":", "\n", "                    ", "logger", ".", "warning", "(", "\"!!!! A TEST datapoint is being removed because of no subgraphs!!!\"", ")", "\n", "self", ".", "raw_test_drop_mask", ".", "append", "(", "1", ")", "\n", "test_penalty_ctr", "+=", "1", "\n", "continue", "\n", "", "self", ".", "test_idmap", "[", "item", "[", "\"id\"", "]", "]", "=", "item_ctr", "\n", "raw_test_data_temp", ".", "append", "(", "item", ")", "\n", "self", ".", "raw_test_drop_mask", ".", "append", "(", "0", ")", "\n", "item_ctr", "+=", "1", "\n", "", "self", ".", "test_penalty_multiplier", "=", "(", "len", "(", "self", ".", "raw_test_data", ")", "-", "test_penalty_ctr", ")", "/", "(", "len", "(", "self", ".", "raw_test_data", ")", ")", "\n", "# Length of mask should match original dataset split length", "\n", "assert", "len", "(", "self", ".", "raw_test_data", ")", "==", "len", "(", "self", ".", "raw_test_drop_mask", ")", "\n", "self", ".", "raw_test_drop_mask", "=", "torch", ".", "BoolTensor", "(", "self", ".", "raw_test_drop_mask", ")", "\n", "# remove the example we ignored from the raw test data. Will it cause us problems later?", "\n", "self", ".", "raw_test_data", "=", "raw_test_data_temp", "\n", "for", "item", "in", "self", ".", "raw_test_data", ":", "\n", "                ", "self", ".", "test_dataset", ".", "append", "(", "\n", "self", ".", "convert_rawdata_to_cbrdata", "(", "item", ",", "'test'", ",", "self", ".", "add_dist_feature", ",", "self", ".", "max_dist", ",", "lazy", "=", "True", ")", ")", "\n", "\n", "", "assert", "len", "(", "self", ".", "test_idmap", ")", "==", "len", "(", "self", ".", "test_dataset", ")", "\n", "self", ".", "test_dataloader", "=", "DataListLoader", "(", "self", ".", "test_dataset", ",", "self", ".", "eval_batch_size", ")", "\n", "\n", "", "elif", "self", ".", "task", "==", "\"kbc\"", ":", "\n", "            ", "self", ".", "raw_train_data_map", ",", "self", ".", "raw_dev_data_map", ",", "self", ".", "raw_test_data_map", "=", "defaultdict", "(", "list", ")", ",", "defaultdict", "(", "\n", "list", ")", ",", "defaultdict", "(", "list", ")", "\n", "for", "line", "in", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "'train.txt'", ")", ")", ":", "\n", "                ", "e1", ",", "r", ",", "e2", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "self", ".", "raw_train_data_map", "[", "(", "e1", ",", "r", ")", "]", ".", "append", "(", "e2", ")", "\n", "self", ".", "raw_train_data_map", "[", "(", "e2", ",", "r", "+", "\"_inv\"", ")", "]", ".", "append", "(", "e1", ")", "\n", "", "dev_penalty_ctr", "=", "0", "\n", "for", "line", "in", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "'dev.txt'", ")", ")", ":", "\n", "                ", "e1", ",", "r", ",", "e2", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "if", "e1", "not", "in", "self", ".", "full_adj_map", ":", "\n", "                    ", "dev_penalty_ctr", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "self", ".", "raw_dev_data_map", "[", "(", "e1", ",", "r", ")", "]", ".", "append", "(", "e2", ")", "\n", "", "if", "e2", "not", "in", "self", ".", "full_adj_map", ":", "\n", "                    ", "dev_penalty_ctr", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "self", ".", "raw_dev_data_map", "[", "(", "e2", ",", "r", "+", "\"_inv\"", ")", "]", ".", "append", "(", "e1", ")", "\n", "", "", "logger", ".", "warning", "(", "f\"!!!! {dev_penalty_ctr} DEV queries were removed because of no subgraphs!!!\"", ")", "\n", "self", ".", "dev_penalty_multiplier", "=", "len", "(", "self", ".", "raw_dev_data_map", ")", "/", "(", "len", "(", "self", ".", "raw_dev_data_map", ")", "+", "dev_penalty_ctr", ")", "\n", "test_penalty_ctr", "=", "0", "\n", "for", "line", "in", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "'test.txt'", ")", ")", ":", "\n", "                ", "e1", ",", "r", ",", "e2", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "if", "e1", "not", "in", "self", ".", "full_adj_map", ":", "\n", "                    ", "test_penalty_ctr", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "self", ".", "raw_test_data_map", "[", "(", "e1", ",", "r", ")", "]", ".", "append", "(", "e2", ")", "\n", "", "if", "e2", "not", "in", "self", ".", "full_adj_map", ":", "\n", "                    ", "test_penalty_ctr", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "self", ".", "raw_test_data_map", "[", "(", "e2", ",", "r", "+", "\"_inv\"", ")", "]", ".", "append", "(", "e1", ")", "\n", "", "", "logger", ".", "warning", "(", "f\"!!!! {test_penalty_ctr} TEST queries were removed because of no subgraphs!!!\"", ")", "\n", "self", ".", "test_penalty_multiplier", "=", "len", "(", "self", ".", "raw_test_data_map", ")", "/", "(", "\n", "len", "(", "self", ".", "raw_test_data_map", ")", "+", "test_penalty_ctr", ")", "\n", "self", ".", "raw_train_data", ",", "self", ".", "raw_dev_data", ",", "self", ".", "raw_test_data", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "ctr", ",", "(", "(", "e1", ",", "r", ")", ",", "e2_list", ")", "in", "enumerate", "(", "self", ".", "raw_train_data_map", ".", "items", "(", ")", ")", ":", "\n", "                ", "self", ".", "raw_train_data", ".", "append", "(", "{", "\"id\"", ":", "(", "e1", ",", "r", ")", ",", "\"question\"", ":", "r", ",", "\"seed_entities\"", ":", "[", "e1", "]", ",", "\"answer\"", ":", "e2_list", "}", ")", "\n", "self", ".", "train_idmap", "[", "(", "e1", ",", "r", ")", "]", "=", "ctr", "\n", "", "for", "ctr", ",", "(", "(", "e1", ",", "r", ")", ",", "e2_list", ")", "in", "enumerate", "(", "self", ".", "raw_dev_data_map", ".", "items", "(", ")", ")", ":", "\n", "                ", "self", ".", "raw_dev_data", ".", "append", "(", "{", "\"id\"", ":", "(", "e1", ",", "r", ")", ",", "\"question\"", ":", "r", ",", "\"seed_entities\"", ":", "[", "e1", "]", ",", "\"answer\"", ":", "e2_list", "}", ")", "\n", "self", ".", "dev_idmap", "[", "(", "e1", ",", "r", ")", "]", "=", "ctr", "\n", "", "for", "ctr", ",", "(", "(", "e1", ",", "r", ")", ",", "e2_list", ")", "in", "enumerate", "(", "self", ".", "raw_test_data_map", ".", "items", "(", ")", ")", ":", "\n", "                ", "self", ".", "raw_test_data", ".", "append", "(", "{", "\"id\"", ":", "(", "e1", ",", "r", ")", ",", "\"question\"", ":", "r", ",", "\"seed_entities\"", ":", "[", "e1", "]", ",", "\"answer\"", ":", "e2_list", "}", ")", "\n", "self", ".", "test_idmap", "[", "(", "e1", ",", "r", ")", "]", "=", "ctr", "\n", "\n", "", "for", "item", "in", "tqdm", "(", "self", ".", "raw_train_data", ")", ":", "\n", "                ", "self", ".", "train_dataset", ".", "append", "(", "self", ".", "convert_rawdata_to_cbrdata", "(", "item", ",", "'train'", ",", "self", ".", "add_dist_feature", ",", "\n", "self", ".", "max_dist", ",", "lazy", "=", "True", ")", ")", "\n", "", "for", "item", "in", "tqdm", "(", "self", ".", "raw_dev_data", ")", ":", "\n", "                ", "self", ".", "dev_dataset", ".", "append", "(", "self", ".", "convert_rawdata_to_cbrdata", "(", "item", ",", "'dev'", ",", "self", ".", "add_dist_feature", ",", "\n", "self", ".", "max_dist", ",", "lazy", "=", "True", ")", ")", "\n", "", "for", "item", "in", "tqdm", "(", "self", ".", "raw_test_data", ")", ":", "\n", "                ", "self", ".", "test_dataset", ".", "append", "(", "self", ".", "convert_rawdata_to_cbrdata", "(", "item", ",", "'test'", ",", "self", ".", "add_dist_feature", ",", "\n", "self", ".", "max_dist", ",", "lazy", "=", "True", ")", ")", "\n", "\n", "", "self", ".", "train_dataloader", "=", "DataListLoader", "(", "self", ".", "train_dataset", ",", "self", ".", "train_batch_size", ",", "shuffle", "=", "True", ")", "\n", "self", ".", "dev_dataloader", "=", "DataListLoader", "(", "self", ".", "dev_dataset", ",", "self", ".", "eval_batch_size", ",", "shuffle", "=", "False", ")", "\n", "self", ".", "test_dataloader", "=", "DataListLoader", "(", "self", ".", "test_dataset", ",", "self", ".", "eval_batch_size", ",", "shuffle", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.data_loaders.kbqa_dataloader.KBQADataLoader.add_inv_edges_to_adj": [[433, 448], ["copy.deepcopy", "adj_map.items", "copy.deepcopy.items", "re2_map.items", "sorted", "[].append", "set", "r.endswith"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "add_inv_edges_to_adj", "(", "adj_map", ")", ":", "\n", "        ", "full_adj_map", "=", "deepcopy", "(", "adj_map", ")", "\n", "for", "e1", ",", "re2_map", "in", "adj_map", ".", "items", "(", ")", ":", "\n", "            ", "for", "r", ",", "e2_list", "in", "re2_map", ".", "items", "(", ")", ":", "\n", "# r_inv = r + '_inv'", "\n", "                ", "r_inv", "=", "r", "+", "\"_inv\"", "if", "not", "r", ".", "endswith", "(", "\"_inv\"", ")", "else", "r", "[", ":", "-", "4", "]", "\n", "for", "e2", "in", "e2_list", ":", "\n", "                    ", "if", "e2", "not", "in", "full_adj_map", ":", "full_adj_map", "[", "e2", "]", "=", "{", "}", "\n", "if", "r_inv", "not", "in", "full_adj_map", "[", "e2", "]", ":", "full_adj_map", "[", "e2", "]", "[", "r_inv", "]", "=", "[", "]", "\n", "full_adj_map", "[", "e2", "]", "[", "r_inv", "]", ".", "append", "(", "e1", ")", "\n", "", "", "", "for", "e1", ",", "re2_map", "in", "full_adj_map", ".", "items", "(", ")", ":", "\n", "            ", "for", "r", "in", "re2_map", ":", "\n", "                ", "re2_map", "[", "r", "]", "=", "sorted", "(", "set", "(", "re2_map", "[", "r", "]", ")", ")", "\n", "", "", "return", "full_adj_map", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.data_loaders.kbqa_dataloader.KBQADataLoader.compute_shortest_distances": [[449, 467], ["edge_index.new_full", "edge_index.new_full.clone", "range", "torch.ones", "torch.index_select", "edge_index.new_full.fill_", "torch.all", "len", "len"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "compute_shortest_distances", "(", "edge_index", ",", "sources", ",", "node_set", ",", "max_dist", ")", ":", "\n", "        ", "dist_arr", "=", "torch", ".", "ones", "(", "len", "(", "node_set", ")", ",", "dtype", "=", "torch", ".", "long", ")", "*", "1000", "\n", "source_mask", "=", "edge_index", ".", "new_full", "(", "(", "len", "(", "node_set", ")", ",", ")", ",", "False", ",", "dtype", "=", "torch", ".", "bool", ")", "\n", "source_mask", "[", "sources", "]", "=", "True", "\n", "explored", "=", "source_mask", ".", "clone", "(", ")", "\n", "dist_arr", "[", "source_mask", "]", "=", "0", "\n", "row", ",", "col", "=", "edge_index", "\n", "for", "d", "in", "range", "(", "1", ",", "max_dist", "+", "1", ")", ":", "\n", "            ", "edge_mask", "=", "torch", ".", "index_select", "(", "source_mask", ",", "0", ",", "row", ")", "\n", "source_mask", ".", "fill_", "(", "False", ")", "\n", "source_mask", "[", "col", "[", "edge_mask", "]", "]", "=", "True", "\n", "source_mask", "=", "source_mask", "&", "~", "explored", "\n", "explored", "|=", "source_mask", "\n", "assert", "torch", ".", "all", "(", "dist_arr", "[", "source_mask", "]", ">", "d", ")", "\n", "dist_arr", "[", "source_mask", "]", "=", "d", "\n", "\n", "", "return", "dist_arr", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.data_loaders.kbqa_dataloader.KBQADataLoader.convert_rawdata_to_cbrdata": [[468, 547], ["list", "torch.zeros", "torch.zeros", "torch.LongTensor", "torch.LongTensor", "set", "kbqa_dataloader.KBQAGraphData", "kbqa_dataloader.KBQADataLoader.compute_shortest_distances", "len", "kbqa_dataloader.KBQAGraphData", "torch.LongTensor", "kbqa_dataloader.KBQADataLoader.dataset_name.lower", "kbqa_dataloader.KBQADataLoader.get_cached_k_hop_subgraph", "torch_geometric.utils.k_hop_subgraph", "kbqa_dataloader.KBQADataLoader.get_cached_k_hop_subgraph", "NotImplementedError", "torch.any", "torch.zeros.sum", "ValueError", "torch.max", "torch.LongTensor.append", "kbqa_dataloader.KBQADataLoader.dataset_name.lower", "kbqa_dataloader.KBQADataLoader.dataset_name.lower", "len", "torch.nonzero"], "methods", ["home.repos.pwc.inspect_result.rajarshd_cbr-subg.data_loaders.kbqa_dataloader.KBQADataLoader.compute_shortest_distances", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.data_loaders.kbqa_dataloader.KBQADataLoader.get_cached_k_hop_subgraph", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.data_loaders.kbqa_dataloader.KBQADataLoader.get_cached_k_hop_subgraph"], ["", "def", "convert_rawdata_to_cbrdata", "(", "self", ",", "raw_data", ":", "dict", ",", "split", ":", "str", ",", "add_dist_feature", ":", "bool", "=", "False", ",", "max_dist", ":", "int", "=", "3", ",", "\n", "lazy", ":", "bool", "=", "False", ",", "inplace_obj", ":", "KBQAGraphData", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "task", "==", "\"pt_match\"", ":", "\n", "            ", "knn_ids", "=", "[", "]", "\n", "for", "kid", "in", "raw_data", "[", "\"knn\"", "]", ":", "\n", "                ", "if", "split", "!=", "'train'", "or", "kid", "!=", "raw_data", "[", "\"id\"", "]", ":", "\n", "                    ", "if", "kid", "in", "self", ".", "train_idmap", ":", "\n", "                        ", "knn_ids", ".", "append", "(", "self", ".", "train_idmap", "[", "kid", "]", ")", "\n", "", "", "", "knn_ids", "=", "torch", ".", "LongTensor", "(", "knn_ids", ")", "\n", "", "else", ":", "\n", "            ", "knn_ids", "=", "None", "\n", "", "if", "split", "==", "'train'", ":", "\n", "            ", "ex_id", "=", "self", ".", "train_idmap", "[", "raw_data", "[", "\"id\"", "]", "]", "\n", "", "elif", "split", "==", "'dev'", ":", "\n", "            ", "ex_id", "=", "self", ".", "dev_idmap", "[", "raw_data", "[", "\"id\"", "]", "]", "\n", "", "elif", "split", "==", "'test'", ":", "\n", "            ", "ex_id", "=", "self", ".", "test_idmap", "[", "raw_data", "[", "\"id\"", "]", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f\"Unknown split {split}\"", ")", "\n", "", "ques_str", "=", "raw_data", "[", "\"question\"", "]", "if", "self", ".", "task", "==", "\"pt_match\"", "and", "(", "\n", "self", ".", "dataset_name", ".", "lower", "(", ")", "==", "'webqsp'", "or", "self", ".", "dataset_name", ".", "lower", "(", ")", "==", "'cwq'", ")", "else", "raw_data", "[", "\"id\"", "]", "\n", "\n", "raw_data", "[", "\"answer\"", "]", "=", "list", "(", "set", "(", "raw_data", "[", "\"answer\"", "]", ")", ")", "# in CWQ, sometimes answers are repeatd causing errors later", "\n", "if", "lazy", ":", "\n", "            ", "return", "KBQAGraphData", "(", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "split", ",", "ex_id", ",", "raw_data", "[", "\"id\"", "]", ",", "ques_str", ",", "\n", "raw_data", "[", "\"answer\"", "]", ",", "knn_ids", ",", "torch", ".", "LongTensor", "(", "[", "0", "]", ")", ")", "\n", "\n", "", "if", "self", ".", "task", "==", "\"pt_match\"", ":", "\n", "            ", "if", "self", ".", "dataset_name", ".", "lower", "(", ")", "in", "[", "\"webqsp\"", ",", "\"cwq\"", ",", "\"metaqa\"", ",", "\"synthetic\"", ",", "\"freebaseqa\"", "]", ":", "\n", "                ", "sub_nodes", ",", "sub_edge_index", ",", "seed_ent_loc", ",", "sub_edge_attr", "=", "self", ".", "get_cached_k_hop_subgraph", "(", "raw_data", ")", "\n", "", "else", ":", "\n", "                ", "seed_node_idx", "=", "[", "self", ".", "ent2id", "[", "e_", "]", "for", "e_", "in", "raw_data", "[", "\"seed_entities\"", "]", "]", "\n", "sub_nodes", ",", "sub_edge_index", ",", "seed_ent_loc", ",", "sub_edge_mask", "=", "k_hop_subgraph", "(", "node_idx", "=", "seed_node_idx", ",", "\n", "num_hops", "=", "max_dist", ",", "\n", "edge_index", "=", "self", ".", "full_edge_index", ",", "\n", "relabel_nodes", "=", "True", ",", "\n", "flow", "=", "'target_to_source'", ",", "\n", "num_nodes", "=", "len", "(", "self", ".", "ent2id", ")", ")", "\n", "sub_edge_attr", "=", "self", ".", "full_edge_attr", "[", "sub_edge_mask", "]", "\n", "", "", "elif", "self", ".", "task", "==", "\"kbc\"", ":", "\n", "            ", "sub_nodes", ",", "sub_edge_index", ",", "seed_ent_loc", ",", "sub_edge_attr", "=", "self", ".", "get_cached_k_hop_subgraph", "(", "raw_data", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "f\"Task {self.task} is invalid\"", ")", "\n", "\n", "", "x", "=", "sub_nodes", "\n", "dist_feats", "=", "None", "\n", "if", "add_dist_feature", ":", "\n", "            ", "dist_feats", "=", "self", ".", "compute_shortest_distances", "(", "sub_edge_index", ",", "seed_ent_loc", ",", "sub_nodes", ",", "max_dist", ")", "\n", "try", ":", "\n", "                ", "assert", "torch", ".", "max", "(", "dist_feats", ")", "<=", "max_dist", "\n", "", "except", ":", "\n", "#  in CWQ, few values in the graph are disconnected", "\n", "                ", "dist_feats", "[", "torch", ".", "nonzero", "(", "dist_feats", ">", "max_dist", ")", "]", "=", "max_dist", "\n", "\n", "", "", "seed_nodes_mask", "=", "torch", ".", "zeros", "(", "x", ".", "shape", "[", "0", "]", ",", "dtype", "=", "torch", ".", "bool", ")", "\n", "seed_nodes_mask", "[", "seed_ent_loc", "]", "=", "1", "\n", "label_nodes_mask", "=", "torch", ".", "zeros", "(", "x", ".", "shape", "[", "0", "]", ",", "dtype", "=", "torch", ".", "bool", ")", "\n", "ans_node_idx", "=", "[", "self", ".", "ent2id", "[", "e_", "]", "for", "e_", "in", "raw_data", "[", "\"answer\"", "]", "]", "\n", "penalty", "=", "0", "\n", "for", "aid", "in", "ans_node_idx", ":", "\n", "            ", "if", "not", "torch", ".", "any", "(", "sub_nodes", "==", "aid", ")", ":", "\n", "                ", "penalty", "+=", "1", "\n", "", "label_nodes_mask", "[", "sub_nodes", "==", "aid", "]", "=", "1", "\n", "\n", "", "assert", "len", "(", "ans_node_idx", ")", "==", "penalty", "+", "label_nodes_mask", ".", "sum", "(", ")", "\n", "penalty", "=", "torch", ".", "LongTensor", "(", "[", "penalty", "]", ")", "\n", "if", "inplace_obj", "is", "not", "None", ":", "\n", "            ", "self", ".", "lazy_load_ctr", "+=", "1", "\n", "inplace_obj", ".", "x", "=", "x", "\n", "inplace_obj", ".", "edge_index", "=", "sub_edge_index", "\n", "inplace_obj", ".", "edge_attr", "=", "sub_edge_attr", "\n", "inplace_obj", ".", "dist_feats", "=", "dist_feats", "\n", "inplace_obj", ".", "seed_node_ids", "=", "seed_nodes_mask", "\n", "inplace_obj", ".", "label_node_ids", "=", "label_nodes_mask", "\n", "inplace_obj", ".", "penalty", "=", "penalty", "\n", "return", "inplace_obj", "\n", "", "else", ":", "\n", "            ", "return", "KBQAGraphData", "(", "x", ",", "sub_edge_index", ",", "sub_edge_attr", ",", "dist_feats", ",", "seed_nodes_mask", ",", "label_nodes_mask", ",", "\n", "split", ",", "ex_id", ",", "raw_data", "[", "\"id\"", "]", ",", "ques_str", ",", "raw_data", "[", "\"answer\"", "]", ",", "knn_ids", ",", "penalty", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.data_loaders.kbqa_dataloader.KBQADataLoader.load_query_encodings": [[548, 561], ["torch.load", "torch.load", "torch.load", "os.path.join", "len", "os.path.join", "len", "os.path.join", "len"], "methods", ["None"], ["", "", "def", "load_query_encodings", "(", "self", ")", ":", "\n", "        ", "self", ".", "query_enc_train", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "self", ".", "precomputed_query_encoding_dir", ",", "'query_enc_train.pt'", ")", ",", "\n", "map_location", "=", "'cpu'", ")", "\n", "self", ".", "query_enc_train", "=", "self", ".", "query_enc_train", "[", "~", "self", ".", "raw_train_drop_mask", "]", "\n", "assert", "len", "(", "self", ".", "train_idmap", ")", "==", "self", ".", "query_enc_train", ".", "shape", "[", "0", "]", "\n", "self", ".", "query_enc_dev", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "self", ".", "precomputed_query_encoding_dir", ",", "'query_enc_dev.pt'", ")", ",", "\n", "map_location", "=", "'cpu'", ")", "\n", "self", ".", "query_enc_dev", "=", "self", ".", "query_enc_dev", "[", "~", "self", ".", "raw_dev_drop_mask", "]", "\n", "assert", "len", "(", "self", ".", "dev_idmap", ")", "==", "self", ".", "query_enc_dev", ".", "shape", "[", "0", "]", "\n", "self", ".", "query_enc_test", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "self", ".", "precomputed_query_encoding_dir", ",", "'query_enc_test.pt'", ")", ",", "\n", "map_location", "=", "'cpu'", ")", "\n", "self", ".", "query_enc_test", "=", "self", ".", "query_enc_test", "[", "~", "self", ".", "raw_test_drop_mask", "]", "\n", "assert", "len", "(", "self", ".", "test_idmap", ")", "==", "self", ".", "query_enc_test", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.data_loaders.kbqa_dataloader.KBQADataLoader.get_cached_k_hop_subgraph": [[562, 699], ["set", "range", "set", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "kbqa_dataloader.KBQADataLoader.dataset_name.lower", "kbqa_dataloader.KBQADataLoader.dataset_name.lower", "kbqa_dataloader.KBQADataLoader.dataset_name.lower", "kbqa_dataloader.KBQADataLoader.dataset_name.lower", "set.add", "len", "kbqa_dataloader.KBQADataLoader.dataset_name.lower", "set", "range", "set", "adj_map.items", "enumerate", "set", "set.add", "kbqa_dataloader.KBQADataLoader.full_adj_map[].keys", "range", "set", "kbqa_dataloader.KBQADataLoader.full_adj_map[].keys", "enumerate", "len", "sub_nodes.append", "sub_edge_indx[].append", "sub_edge_indx[].append", "sub_edge_attr.append", "set.add", "set.add", "len", "e1_map.items", "set.update", "len", "rel.endswith", "sub_edge_indx[].append", "sub_edge_indx[].append", "sub_edge_attr.append", "set.add", "len", "sub_nodes.append", "seed_ent_loc.append", "set.add", "len", "sub_nodes.append", "rel.startswith", "rel.endswith", "seed_ent_loc.append", "kbqa_dataloader.KBQADataLoader.id2rel[].endswith", "sub_edge_indx[].append", "sub_edge_indx[].append", "sub_edge_attr.append", "set.add", "sub_edge_indx[].append", "sub_edge_indx[].append", "sub_edge_attr.append", "set.add", "sub_edge_indx[].append", "sub_edge_indx[].append", "sub_edge_attr.append", "set.add", "sub_edge_indx[].append", "sub_edge_indx[].append", "sub_edge_attr.append", "set.add", "sub_edge_indx[].append", "sub_edge_indx[].append", "sub_edge_attr.append", "set.add", "sub_edge_indx[].append", "sub_edge_indx[].append", "sub_edge_attr.append", "set.add"], "methods", ["home.repos.pwc.inspect_result.rajarshd_cbr-subg.compgcn.message_passing.MessagePassing.update"], ["", "def", "get_cached_k_hop_subgraph", "(", "self", ",", "query", ")", ":", "\n", "        ", "if", "self", ".", "dataset_name", ".", "lower", "(", ")", "==", "\"webqsp\"", "or", "self", ".", "dataset_name", ".", "lower", "(", ")", "==", "\"cwq\"", "or", "self", ".", "dataset_name", ".", "lower", "(", ")", "==", "\"metaqa\"", "or", "self", ".", "dataset_name", ".", "lower", "(", ")", "==", "\"freebaseqa\"", ":", "\n", "# find entities in the query subgraph", "\n", "            ", "all_entities", "=", "set", "(", "query", "[", "\"subgraph\"", "]", "[", "\"entities\"", "]", ")", "\n", "# add seed entities to this set as few questions of CWQ fail. However I dont know how much we can", "\n", "# do for those questions if the query entities are missing", "\n", "for", "s_e", "in", "query", "[", "\"seed_entities\"", "]", ":", "\n", "                ", "all_entities", ".", "add", "(", "s_e", ")", "\n", "", "local_vocab", "=", "{", "}", "\n", "sub_nodes", "=", "[", "]", "\n", "sub_edge_indx", "=", "[", "[", "]", ",", "[", "]", "]", "\n", "sub_edge_attr", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "id2ent", ")", ")", ":", "\n", "                ", "if", "i", "in", "all_entities", ":", "\n", "                    ", "local_vocab", "[", "i", "]", "=", "len", "(", "local_vocab", ")", "\n", "sub_nodes", ".", "append", "(", "i", ")", "\n", "", "", "seen_edges", "=", "set", "(", ")", "\n", "for", "triple", "in", "query", "[", "\"subgraph\"", "]", "[", "\"tuples\"", "]", ":", "\n", "                ", "e1", ",", "r", ",", "e2", "=", "triple", "\n", "if", "(", "e1", ",", "r", ",", "e2", ")", "not", "in", "seen_edges", ":", "\n", "                    ", "sub_edge_indx", "[", "0", "]", ".", "append", "(", "local_vocab", "[", "e1", "]", ")", "\n", "sub_edge_indx", "[", "1", "]", ".", "append", "(", "local_vocab", "[", "e2", "]", ")", "\n", "sub_edge_attr", ".", "append", "(", "r", ")", "\n", "seen_edges", ".", "add", "(", "(", "e1", ",", "r", ",", "e2", ")", ")", "\n", "# add inverse edges as well", "\n", "", "if", "self", ".", "add_inv_edges", ":", "\n", "                    ", "rel_inv", "=", "self", ".", "id2rel", "[", "r", "]", "+", "\"_inv\"", "if", "not", "self", ".", "id2rel", "[", "r", "]", ".", "endswith", "(", "\"_inv\"", ")", "else", "self", ".", "id2rel", "[", "r", "]", "[", ":", "-", "4", "]", "\n", "inv_r", "=", "self", ".", "rel2id", "[", "rel_inv", "]", "\n", "if", "(", "e2", ",", "inv_r", ",", "e1", ")", "not", "in", "seen_edges", ":", "\n", "                        ", "sub_edge_indx", "[", "0", "]", ".", "append", "(", "local_vocab", "[", "e2", "]", ")", "\n", "sub_edge_indx", "[", "1", "]", ".", "append", "(", "local_vocab", "[", "e1", "]", ")", "\n", "sub_edge_attr", ".", "append", "(", "inv_r", ")", "\n", "seen_edges", ".", "add", "(", "(", "e2", ",", "inv_r", ",", "e1", ")", ")", "\n", "\n", "", "", "", "seed_ent_loc", "=", "[", "local_vocab", "[", "s_e", "]", "for", "s_e", "in", "query", "[", "\"seed_entities\"", "]", "]", "\n", "", "elif", "self", ".", "dataset_name", ".", "lower", "(", ")", "==", "\"synthetic\"", ":", "\n", "            ", "all_entities", "=", "set", "(", "query", "[", "\"graph\"", "]", "[", "\"entities\"", "]", ")", "\n", "for", "s_e", "in", "query", "[", "\"seed_entities\"", "]", ":", "\n", "                ", "all_entities", ".", "add", "(", "s_e", ")", "\n", "", "local_vocab", "=", "{", "}", "\n", "sub_nodes", "=", "[", "]", "\n", "sub_edge_indx", "=", "[", "[", "]", ",", "[", "]", "]", "\n", "sub_edge_attr", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "id2ent", ")", ")", ":", "\n", "                ", "if", "self", ".", "id2ent", "[", "i", "]", "in", "all_entities", ":", "\n", "                    ", "local_vocab", "[", "self", ".", "id2ent", "[", "i", "]", "]", "=", "len", "(", "local_vocab", ")", "\n", "sub_nodes", ".", "append", "(", "i", ")", "\n", "", "", "seen_edges", "=", "set", "(", ")", "\n", "adj_map", "=", "query", "[", "\"graph\"", "]", "[", "\"adj_map\"", "]", "\n", "for", "e1", ",", "e1_map", "in", "adj_map", ".", "items", "(", ")", ":", "\n", "                ", "for", "r", ",", "e2_list", "in", "e1_map", ".", "items", "(", ")", ":", "\n", "                    ", "for", "e2", "in", "e2_list", ":", "\n", "                        ", "if", "(", "e1", ",", "r", ",", "e2", ")", "not", "in", "seen_edges", ":", "\n", "                            ", "sub_edge_indx", "[", "0", "]", ".", "append", "(", "local_vocab", "[", "e1", "]", ")", "\n", "sub_edge_indx", "[", "1", "]", ".", "append", "(", "local_vocab", "[", "e2", "]", ")", "\n", "sub_edge_attr", ".", "append", "(", "self", ".", "rel2id", "[", "r", "]", ")", "\n", "seen_edges", ".", "add", "(", "(", "e1", ",", "r", ",", "e2", ")", ")", "\n", "# add inverse edges as well", "\n", "", "if", "self", ".", "add_inv_edges", ":", "\n", "                            ", "inv_r", "=", "self", ".", "id2rel", "[", "self", ".", "rel2id", "[", "r", "+", "\"_inv\"", "]", "]", "\n", "if", "(", "e2", ",", "inv_r", ",", "e1", ")", "not", "in", "seen_edges", ":", "\n", "                                ", "sub_edge_indx", "[", "0", "]", ".", "append", "(", "local_vocab", "[", "e2", "]", ")", "\n", "sub_edge_indx", "[", "1", "]", ".", "append", "(", "local_vocab", "[", "e1", "]", ")", "\n", "sub_edge_attr", ".", "append", "(", "self", ".", "rel2id", "[", "inv_r", "]", ")", "\n", "seen_edges", ".", "add", "(", "(", "e2", ",", "inv_r", ",", "e1", ")", ")", "\n", "", "", "", "", "", "seed_ent_loc", "=", "[", "]", "\n", "for", "i", ",", "ent_id", "in", "enumerate", "(", "sub_nodes", ")", ":", "\n", "                ", "if", "self", ".", "id2ent", "[", "ent_id", "]", "in", "query", "[", "\"seed_entities\"", "]", ":", "\n", "                    ", "seed_ent_loc", ".", "append", "(", "i", ")", "\n", "", "", "", "else", ":", "\n", "            ", "e1", "=", "query", "[", "\"seed_entities\"", "]", "[", "0", "]", "\n", "assert", "self", ".", "all_paths", "is", "not", "None", "\n", "paths_e1", "=", "self", ".", "all_paths", "[", "e1", "]", "\n", "all_entities", "=", "set", "(", ")", "\n", "sub_edge_indx", "=", "[", "[", "]", ",", "[", "]", "]", "\n", "sub_edge_attr", "=", "[", "]", "\n", "sub_nodes", "=", "[", "]", "\n", "local_vocab", "=", "{", "}", "\n", "# collect all entities in the local subgraph first", "\n", "all_entities", ".", "add", "(", "e1", ")", "\n", "for", "path", "in", "paths_e1", ":", "\n", "                ", "for", "rel", ",", "ent", "in", "path", ":", "\n", "                    ", "all_entities", ".", "add", "(", "ent", ")", "\n", "# Add entities from one-hop edges", "\n", "", "", "for", "rel", "in", "self", ".", "full_adj_map", "[", "e1", "]", ".", "keys", "(", ")", ":", "\n", "                ", "all_entities", ".", "update", "(", "self", ".", "raw_train_data_map", "[", "(", "e1", ",", "rel", ")", "]", ")", "\n", "", "for", "i", "in", "range", "(", "len", "(", "self", ".", "id2ent", ")", ")", ":", "\n", "                ", "if", "self", ".", "id2ent", "[", "i", "]", "in", "all_entities", ":", "\n", "                    ", "local_vocab", "[", "self", ".", "id2ent", "[", "i", "]", "]", "=", "len", "(", "local_vocab", ")", "\n", "sub_nodes", ".", "append", "(", "i", ")", "\n", "", "", "seen_edges", "=", "set", "(", ")", "\n", "for", "path", "in", "paths_e1", ":", "\n", "                ", "curr_ent", "=", "e1", "\n", "for", "rel", ",", "ent", "in", "path", ":", "\n", "                    ", "if", "rel", ".", "startswith", "(", "\"_\"", ")", ":", "\n", "                        ", "rel", "=", "rel", "[", "1", ":", "]", "+", "\"_inv\"", "\n", "", "if", "(", "curr_ent", ",", "rel", ",", "ent", ")", "not", "in", "seen_edges", ":", "\n", "                        ", "sub_edge_indx", "[", "0", "]", ".", "append", "(", "local_vocab", "[", "curr_ent", "]", ")", "\n", "sub_edge_indx", "[", "1", "]", ".", "append", "(", "local_vocab", "[", "ent", "]", ")", "\n", "sub_edge_attr", ".", "append", "(", "self", ".", "rel2id", "[", "rel", "]", ")", "\n", "seen_edges", ".", "add", "(", "(", "curr_ent", ",", "rel", ",", "ent", ")", ")", "\n", "# also add inverse edges", "\n", "", "if", "rel", ".", "endswith", "(", "\"_inv\"", ")", ":", "\n", "                        ", "inv_rel", "=", "rel", "[", ":", "-", "4", "]", "\n", "", "else", ":", "\n", "                        ", "inv_rel", "=", "rel", "+", "\"_inv\"", "\n", "", "if", "(", "ent", ",", "inv_rel", ",", "curr_ent", ")", "not", "in", "seen_edges", ":", "\n", "                        ", "sub_edge_indx", "[", "0", "]", ".", "append", "(", "local_vocab", "[", "ent", "]", ")", "\n", "sub_edge_indx", "[", "1", "]", ".", "append", "(", "local_vocab", "[", "curr_ent", "]", ")", "\n", "sub_edge_attr", ".", "append", "(", "self", ".", "rel2id", "[", "inv_rel", "]", ")", "\n", "seen_edges", ".", "add", "(", "(", "ent", ",", "inv_rel", ",", "curr_ent", ")", ")", "\n", "", "curr_ent", "=", "ent", "\n", "# Add one-hop edges", "\n", "", "", "for", "rel", "in", "self", ".", "full_adj_map", "[", "e1", "]", ".", "keys", "(", ")", ":", "\n", "                ", "if", "rel", ".", "endswith", "(", "\"_inv\"", ")", ":", "\n", "                    ", "inv_rel", "=", "rel", "[", ":", "-", "4", "]", "\n", "", "else", ":", "\n", "                    ", "inv_rel", "=", "rel", "+", "\"_inv\"", "\n", "", "for", "ent", "in", "self", ".", "raw_train_data_map", "[", "(", "e1", ",", "rel", ")", "]", ":", "\n", "                    ", "if", "(", "e1", ",", "rel", ",", "ent", ")", "not", "in", "seen_edges", ":", "\n", "                        ", "sub_edge_indx", "[", "0", "]", ".", "append", "(", "local_vocab", "[", "e1", "]", ")", "\n", "sub_edge_indx", "[", "1", "]", ".", "append", "(", "local_vocab", "[", "ent", "]", ")", "\n", "sub_edge_attr", ".", "append", "(", "self", ".", "rel2id", "[", "rel", "]", ")", "\n", "seen_edges", ".", "add", "(", "(", "e1", ",", "rel", ",", "ent", ")", ")", "\n", "# also add inverse edges", "\n", "", "if", "(", "ent", ",", "inv_rel", ",", "e1", ")", "not", "in", "seen_edges", ":", "\n", "                        ", "sub_edge_indx", "[", "0", "]", ".", "append", "(", "local_vocab", "[", "ent", "]", ")", "\n", "sub_edge_indx", "[", "1", "]", ".", "append", "(", "local_vocab", "[", "e1", "]", ")", "\n", "sub_edge_attr", ".", "append", "(", "self", ".", "rel2id", "[", "inv_rel", "]", ")", "\n", "seen_edges", ".", "add", "(", "(", "ent", ",", "inv_rel", ",", "e1", ")", ")", "\n", "", "", "", "seed_ent_loc", "=", "[", "]", "\n", "for", "i", ",", "ent", "in", "enumerate", "(", "sub_nodes", ")", ":", "\n", "                ", "if", "ent", "==", "self", ".", "ent2id", "[", "e1", "]", ":", "\n", "                    ", "seed_ent_loc", ".", "append", "(", "i", ")", "\n", "break", "\n", "", "", "", "return", "torch", ".", "LongTensor", "(", "sub_nodes", ")", ",", "torch", ".", "LongTensor", "(", "sub_edge_indx", ")", ",", "torch", ".", "LongTensor", "(", "seed_ent_loc", ")", ",", "torch", ".", "LongTensor", "(", "sub_edge_attr", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.data_loaders.helper.set_gpu": [[17, 31], ["None"], "function", ["None"], ["def", "set_gpu", "(", "gpus", ")", ":", "\n", "\t", "\"\"\"\n\tSets the GPU to be used for the run\n\n\tParameters\n\t----------\n\tgpus:           List of GPUs to be used for the run\n\t\n\tReturns\n\t-------\n\t\t\n\t\"\"\"", "\n", "os", ".", "environ", "[", "\"CUDA_DEVICE_ORDER\"", "]", "=", "\"PCI_BUS_ID\"", "\n", "os", ".", "environ", "[", "\"CUDA_VISIBLE_DEVICES\"", "]", "=", "gpus", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.data_loaders.helper.get_logger": [[32, 58], ["json.load", "logging.config.dictConfig", "logging.config.dictConfig", "logging.getLogger", "logging.getLogger", "logging.StreamHandler", "logging.StreamHandler", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler", "open", "name.replace", "logging.Formatter", "logging.Formatter"], "function", ["None"], ["", "def", "get_logger", "(", "name", ",", "log_dir", ",", "config_dir", ")", ":", "\n", "\t", "\"\"\"\n\tCreates a logger object\n\n\tParameters\n\t----------\n\tname:           Name of the logger file\n\tlog_dir:        Directory where logger file needs to be stored\n\tconfig_dir:     Directory from where log_config.json needs to be read\n\t\n\tReturns\n\t-------\n\tA logger object which writes to both file and stdout\n\t\t\n\t\"\"\"", "\n", "config_dict", "=", "json", ".", "load", "(", "open", "(", "config_dir", "+", "'log_config.json'", ")", ")", "\n", "config_dict", "[", "'handlers'", "]", "[", "'file_handler'", "]", "[", "'filename'", "]", "=", "log_dir", "+", "name", ".", "replace", "(", "'/'", ",", "'-'", ")", "\n", "logging", ".", "config", ".", "dictConfig", "(", "config_dict", ")", "\n", "logger", "=", "logging", ".", "getLogger", "(", "name", ")", "\n", "\n", "std_out_format", "=", "'%(asctime)s - [%(levelname)s] - %(message)s'", "\n", "consoleHandler", "=", "logging", ".", "StreamHandler", "(", "sys", ".", "stdout", ")", "\n", "consoleHandler", ".", "setFormatter", "(", "logging", ".", "Formatter", "(", "std_out_format", ")", ")", "\n", "logger", ".", "addHandler", "(", "consoleHandler", ")", "\n", "\n", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.data_loaders.helper.get_combined_results": [[59, 75], ["float", "round", "round", "round", "round", "round", "round", "range", "round", "round", "round"], "function", ["None"], ["", "def", "get_combined_results", "(", "left_results", ",", "right_results", ")", ":", "\n", "\t", "results", "=", "{", "}", "\n", "count", "=", "float", "(", "left_results", "[", "'count'", "]", ")", "\n", "\n", "results", "[", "'left_mr'", "]", "=", "round", "(", "left_results", "[", "'mr'", "]", "/", "count", ",", "5", ")", "\n", "results", "[", "'left_mrr'", "]", "=", "round", "(", "left_results", "[", "'mrr'", "]", "/", "count", ",", "5", ")", "\n", "results", "[", "'right_mr'", "]", "=", "round", "(", "right_results", "[", "'mr'", "]", "/", "count", ",", "5", ")", "\n", "results", "[", "'right_mrr'", "]", "=", "round", "(", "right_results", "[", "'mrr'", "]", "/", "count", ",", "5", ")", "\n", "results", "[", "'mr'", "]", "=", "round", "(", "(", "left_results", "[", "'mr'", "]", "+", "right_results", "[", "'mr'", "]", ")", "/", "(", "2", "*", "count", ")", ",", "5", ")", "\n", "results", "[", "'mrr'", "]", "=", "round", "(", "(", "left_results", "[", "'mrr'", "]", "+", "right_results", "[", "'mrr'", "]", ")", "/", "(", "2", "*", "count", ")", ",", "5", ")", "\n", "\n", "for", "k", "in", "range", "(", "10", ")", ":", "\n", "\t\t", "results", "[", "'left_hits@{}'", ".", "format", "(", "k", "+", "1", ")", "]", "=", "round", "(", "left_results", "[", "'hits@{}'", ".", "format", "(", "k", "+", "1", ")", "]", "/", "count", ",", "5", ")", "\n", "results", "[", "'right_hits@{}'", ".", "format", "(", "k", "+", "1", ")", "]", "=", "round", "(", "right_results", "[", "'hits@{}'", ".", "format", "(", "k", "+", "1", ")", "]", "/", "count", ",", "5", ")", "\n", "results", "[", "'hits@{}'", ".", "format", "(", "k", "+", "1", ")", "]", "=", "round", "(", "(", "left_results", "[", "'hits@{}'", ".", "format", "(", "k", "+", "1", ")", "]", "+", "right_results", "[", "'hits@{}'", ".", "format", "(", "k", "+", "1", ")", "]", ")", "/", "(", "2", "*", "count", ")", ",", "5", ")", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.data_loaders.helper.get_param": [[76, 80], ["torch.nn.Parameter", "torch.nn.init.xavier_normal_", "torch.Tensor"], "function", ["None"], ["", "def", "get_param", "(", "shape", ")", ":", "\n", "\t", "param", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "*", "shape", ")", ")", ";", "\n", "xavier_normal_", "(", "param", ".", "data", ")", "\n", "return", "param", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.data_loaders.helper.com_mult": [[81, 85], ["torch.stack"], "function", ["None"], ["", "def", "com_mult", "(", "a", ",", "b", ")", ":", "\n", "\t", "r1", ",", "i1", "=", "a", "[", "...", ",", "0", "]", ",", "a", "[", "...", ",", "1", "]", "\n", "r2", ",", "i2", "=", "b", "[", "...", ",", "0", "]", ",", "b", "[", "...", ",", "1", "]", "\n", "return", "torch", ".", "stack", "(", "[", "r1", "*", "r2", "-", "i1", "*", "i2", ",", "r1", "*", "i2", "+", "i1", "*", "r2", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.data_loaders.helper.conj": [[86, 89], ["None"], "function", ["None"], ["", "def", "conj", "(", "a", ")", ":", "\n", "\t", "a", "[", "...", ",", "1", "]", "=", "-", "a", "[", "...", ",", "1", "]", "\n", "return", "a", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.data_loaders.helper.cconv": [[90, 92], ["torch.irfft", "helper.com_mult", "torch.rfft", "torch.rfft"], "function", ["home.repos.pwc.inspect_result.rajarshd_cbr-subg.data_loaders.helper.com_mult"], ["", "def", "cconv", "(", "a", ",", "b", ")", ":", "\n", "\t", "return", "torch", ".", "irfft", "(", "com_mult", "(", "torch", ".", "rfft", "(", "a", ",", "1", ")", ",", "torch", ".", "rfft", "(", "b", ",", "1", ")", ")", ",", "1", ",", "signal_sizes", "=", "(", "a", ".", "shape", "[", "-", "1", "]", ",", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.data_loaders.helper.ccorr": [[93, 95], ["torch.irfft", "helper.com_mult", "helper.conj", "torch.rfft", "torch.rfft"], "function", ["home.repos.pwc.inspect_result.rajarshd_cbr-subg.data_loaders.helper.com_mult", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.data_loaders.helper.conj"], ["", "def", "ccorr", "(", "a", ",", "b", ")", ":", "\n", "\t", "return", "torch", ".", "irfft", "(", "com_mult", "(", "conj", "(", "torch", ".", "rfft", "(", "a", ",", "1", ")", ")", ",", "torch", ".", "rfft", "(", "b", ",", "1", ")", ")", ",", "1", ",", "signal_sizes", "=", "(", "a", ".", "shape", "[", "-", "1", "]", ",", ")", ")", "", "", ""]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.data_loaders.training_utils.EarlyStoppingException.__str__": [[26, 28], ["None"], "methods", ["None"], ["def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "f\"EarlyStopping: {self.condition}\"", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.data_loaders.training_utils.EarlyStopping.__attrs_post_init__": [[39, 42], ["None"], "methods", ["None"], ["def", "__attrs_post_init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "count", "=", "0", "\n", "self", ".", "value", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.data_loaders.training_utils.EarlyStopping.__call__": [[43, 53], ["training_utils.EarlyStoppingException"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "value", ")", ":", "\n", "        ", "if", "value", "==", "self", ".", "value", ":", "\n", "            ", "self", ".", "count", "+=", "1", "\n", "if", "self", ".", "count", ">=", "self", ".", "patience", ":", "\n", "                ", "raise", "EarlyStoppingException", "(", "\n", "f\"{self.name} has not changed in {self.patience} steps.\"", "\n", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "value", "=", "value", "\n", "self", ".", "count", "=", "0", "", "", "", "", ""]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.models.scoring_fn.TransEScorer.__init__": [[9, 14], ["super().__init__", "torch.nn.Embedding"], "methods", ["home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.sample_synthetic_graph.Graph.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_relations", ",", "embedding_dim", ")", ":", "\n", "        ", "super", "(", "TransEScorer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_relations", "=", "num_relations", "\n", "self", ".", "embedding_dim", "=", "embedding_dim", "\n", "self", ".", "embed", "=", "torch", ".", "nn", ".", "Embedding", "(", "self", ".", "num_relations", ",", "self", ".", "embedding_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.models.scoring_fn.TransEScorer.forward": [[15, 19], ["scoring_fn.TransEScorer.embed"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "head_embed", ",", "rel_ids", ")", ":", "\n", "        ", "rel_embed", "=", "self", ".", "embed", "(", "rel_ids", ")", "\n", "assert", "rel_embed", ".", "shape", "[", "1", "]", "==", "head_embed", ".", "shape", "[", "1", "]", "\n", "return", "head_embed", "+", "rel_embed", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.compgcn.compgcn_models.BaseModel.__init__": [[7, 13], ["super().__init__", "torch.nn.BCELoss"], "methods", ["home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.sample_synthetic_graph.Graph.__init__"], ["\t", "def", "__init__", "(", "self", ",", "params", ")", ":", "\n", "\t\t", "super", "(", "BaseModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "p", "=", "params", "\n", "self", ".", "act", "=", "torch", ".", "tanh", "\n", "self", ".", "bceloss", "=", "torch", ".", "nn", ".", "BCELoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.compgcn.compgcn_models.BaseModel.loss": [[14, 16], ["compgcn_models.BaseModel.bceloss"], "methods", ["None"], ["", "def", "loss", "(", "self", ",", "pred", ",", "true_label", ")", ":", "\n", "\t\t", "return", "self", ".", "bceloss", "(", "pred", ",", "true_label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.compgcn.compgcn_models.CompGCNBase.__init__": [[18, 39], ["torch.device", "compgcn_models.BaseModel.__init__", "get_param().to", "compgcn_models.CompGCNBase.register_parameter", "get_param().to", "src.models.compgcn.compgcn_conv_basis.CompGCNConvBasis", "src.models.compgcn.compgcn_conv.CompGCNConv", "Parameter", "get_param", "get_param", "get_param", "src.models.compgcn.compgcn_conv.CompGCNConv", "src.models.compgcn.compgcn_conv.CompGCNConv", "torch.zeros", "get_param"], "methods", ["home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.sample_synthetic_graph.Graph.__init__", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.data_loaders.helper.get_param", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.data_loaders.helper.get_param", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.data_loaders.helper.get_param", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.data_loaders.helper.get_param"], ["\t", "def", "__init__", "(", "self", ",", "num_rel", ",", "params", "=", "None", ",", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", ")", ":", "\n", "\t\t", "super", "(", "CompGCNBase", ",", "self", ")", ".", "__init__", "(", "params", ")", "\n", "\n", "self", ".", "p", ".", "gcn_dim", "=", "self", ".", "p", ".", "embed_dim", "if", "self", ".", "p", ".", "num_gcn_layers", "==", "1", "else", "self", ".", "p", ".", "gcn_dim", "\n", "self", ".", "init_embed", "=", "get_param", "(", "(", "self", ".", "p", ".", "num_ent", ",", "self", ".", "p", ".", "node_feat_dim", ")", ")", ".", "to", "(", "device", ")", "\n", "self", ".", "device", "=", "device", "\n", "\n", "if", "self", ".", "p", ".", "num_bases", ">", "0", ":", "\n", "\t\t\t", "self", ".", "init_rel", "=", "get_param", "(", "(", "self", ".", "p", ".", "num_bases", ",", "self", ".", "p", ".", "node_feat_dim", ")", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "", "else", ":", "\n", "\t\t\t", "if", "self", ".", "p", ".", "score_func", "==", "'transe'", ":", "self", ".", "init_rel", "=", "get_param", "(", "(", "num_rel", ",", "self", ".", "p", ".", "node_feat_dim", ")", ")", "\n", "else", ":", "self", ".", "init_rel", "=", "get_param", "(", "(", "num_rel", "*", "2", ",", "self", ".", "p", ".", "node_feat_dim", ")", ")", "\n", "\n", "", "if", "self", ".", "p", ".", "num_bases", ">", "0", ":", "\n", "\t\t\t", "self", ".", "conv1", "=", "CompGCNConvBasis", "(", "self", ".", "p", ".", "node_feat_dim", ",", "self", ".", "p", ".", "gcn_dim", ",", "num_rel", ",", "self", ".", "p", ".", "num_bases", ",", "act", "=", "self", ".", "act", ",", "params", "=", "self", ".", "p", ")", "\n", "self", ".", "conv2", "=", "CompGCNConv", "(", "self", ".", "p", ".", "gcn_dim", ",", "self", ".", "p", ".", "embed_dim", ",", "num_rel", ",", "act", "=", "self", ".", "act", ",", "params", "=", "self", ".", "p", ")", "if", "self", ".", "p", ".", "num_gcn_layers", "==", "2", "else", "None", "\n", "", "else", ":", "\n", "\t\t\t", "self", ".", "conv1", "=", "CompGCNConv", "(", "self", ".", "p", ".", "node_feat_dim", ",", "self", ".", "p", ".", "gcn_dim", ",", "num_rel", ",", "act", "=", "self", ".", "act", ",", "params", "=", "self", ".", "p", ")", "\n", "self", ".", "conv2", "=", "CompGCNConv", "(", "self", ".", "p", ".", "gcn_dim", ",", "self", ".", "p", ".", "embed_dim", ",", "num_rel", ",", "act", "=", "self", ".", "act", ",", "params", "=", "self", ".", "p", ")", "if", "self", ".", "p", ".", "num_gcn_layers", "==", "2", "else", "None", "\n", "\n", "", "self", ".", "register_parameter", "(", "'bias'", ",", "Parameter", "(", "torch", ".", "zeros", "(", "self", ".", "p", ".", "num_ent", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.compgcn.compgcn_models.CompGCNBase.forward_base": [[40, 54], ["compgcn_models.CompGCNBase.conv1", "drop1", "x.to.to.to", "torch.index_select", "torch.index_select", "torch.cat", "node_embed.to", "edge_index.to", "edge_type.to", "compgcn_models.CompGCNBase.conv2", "drop2", "r.to", "edge_index.to", "edge_type.to"], "methods", ["None"], ["", "def", "forward_base", "(", "self", ",", "sub", ",", "rel", ",", "drop1", ",", "drop2", ",", "node_index", ",", "edge_index", ",", "edge_type", ")", ":", "\n", "\n", "\t\t", "r", "=", "self", ".", "init_rel", "if", "self", ".", "p", ".", "score_func", "!=", "'transe'", "else", "torch", ".", "cat", "(", "[", "self", ".", "init_rel", ",", "-", "self", ".", "init_rel", "]", ",", "dim", "=", "0", ")", "\n", "node_embed", "=", "self", ".", "init_embed", "[", "node_index", "]", "\n", "x", ",", "r", "=", "self", ".", "conv1", "(", "node_embed", ".", "to", "(", "self", ".", "device", ")", ",", "edge_index", ".", "to", "(", "self", ".", "device", ")", ",", "edge_type", ".", "to", "(", "self", ".", "device", ")", ",", "rel_embed", "=", "r", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "x", "=", "drop1", "(", "x", ")", "\n", "x", ",", "r", "=", "self", ".", "conv2", "(", "x", ",", "edge_index", ".", "to", "(", "self", ".", "device", ")", ",", "edge_type", ".", "to", "(", "self", ".", "device", ")", ",", "rel_embed", "=", "r", ")", "if", "self", ".", "p", ".", "num_gcn_layers", "==", "2", "else", "(", "x", ",", "r", ")", "\n", "x", "=", "drop2", "(", "x", ")", "if", "self", ".", "p", ".", "num_gcn_layers", "==", "2", "else", "x", "\n", "\n", "x", "=", "x", ".", "to", "(", "self", ".", "device", ")", "\n", "sub_emb", "=", "torch", ".", "index_select", "(", "x", ",", "0", ",", "sub", ")", "\n", "rel_emb", "=", "torch", ".", "index_select", "(", "r", ",", "0", ",", "rel", ")", "\n", "\n", "return", "sub_emb", ",", "rel_emb", ",", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.compgcn.compgcn_models.CompGCN_TransE.__init__": [[58, 62], ["torch.device", "compgcn_models.CompGCNBase.__init__", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.sample_synthetic_graph.Graph.__init__"], ["\t", "def", "__init__", "(", "self", ",", "params", "=", "None", ",", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", ")", ":", "\n", "\t\t", "super", "(", "self", ".", "__class__", ",", "self", ")", ".", "__init__", "(", "params", ".", "num_rel", ",", "params", ")", "\n", "self", ".", "drop", "=", "torch", ".", "nn", ".", "Dropout", "(", "self", ".", "p", ".", "hid_drop", ")", "\n", "self", ".", "device", "=", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.compgcn.compgcn_models.CompGCN_TransE.forward": [[63, 87], ["compgcn_models.CompGCN_TransE.forward_base", "torch.norm", "obj_emb.unsqueeze", "torch.arange", "len"], "methods", ["home.repos.pwc.inspect_result.rajarshd_cbr-subg.compgcn.compgcn_models.CompGCNBase.forward_base"], ["", "def", "forward", "(", "self", ",", "x_id", ",", "edge_index", ",", "edge_type", ",", "sub", ",", "rel", ",", "batch_offsets", ")", ":", "\n", "\t\t", "'''\n\n\t\t:param x_id: LongTensor of size [batch_size] of nodes in the batch of graphs for indexing into the node embedding table\n\t\t:param edge_index: Torch Geometric stacked edge indices with proper node ID offsets\n\t\t:param edge_type: Relation types corresponding to edge_index\n\t\t:param sub: LongTensor of shape [batch_size] of subject node IDs with proper offsets\n\t\t:param rel: LongTensor of shape [batch_size] of relation types\n\t\t:return:\n\t\t'''", "\n", "sub_emb", ",", "rel_emb", ",", "all_ent", "=", "self", ".", "forward_base", "(", "sub", ",", "rel", ",", "self", ".", "drop", ",", "self", ".", "drop", ",", "x_id", ",", "edge_index", ",", "edge_type", ")", "\n", "obj_emb", "=", "sub_emb", "+", "rel_emb", "# Get TransE representations for the neighbors", "\n", "# obj_emb: batch_size x embed_dim", "\n", "# obj_emb.unsqueeze(1): batch_size x 1 x embed_dim", "\n", "# all_ent: total_nodes_in_batch x embed_dim", "\n", "# x will have shape [batch_size x total_nodes_in_batch]", "\n", "# we only want scores corresponding to each batch", "\n", "x", "=", "self", ".", "p", ".", "gamma", "-", "torch", ".", "norm", "(", "obj_emb", ".", "unsqueeze", "(", "1", ")", "-", "all_ent", ",", "p", "=", "1", ",", "dim", "=", "2", ")", "\n", "x", "=", "x", "[", "batch_offsets", ",", "torch", ".", "arange", "(", "len", "(", "batch_offsets", ")", ")", "]", "\n", "# For using BCEWithLogitsLoss", "\n", "# score\t= torch.sigmoid(x)", "\n", "score", "=", "x", "\n", "\n", "return", "x", ",", "obj_emb", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.compgcn.compgcn_models.CompGCN_DistMult.__init__": [[90, 94], ["torch.device", "compgcn_models.CompGCNBase.__init__", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.sample_synthetic_graph.Graph.__init__"], ["\t", "def", "__init__", "(", "self", ",", "edge_index", ",", "edge_type", ",", "params", "=", "None", ",", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", ")", ":", "\n", "\t\t", "super", "(", "self", ".", "__class__", ",", "self", ")", ".", "__init__", "(", "edge_index", ",", "edge_type", ",", "params", ".", "num_rel", ",", "params", ")", "\n", "self", ".", "drop", "=", "torch", ".", "nn", ".", "Dropout", "(", "self", ".", "p", ".", "hid_drop", ")", "\n", "self", ".", "device", "=", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.compgcn.compgcn_models.CompGCN_DistMult.forward": [[95, 105], ["compgcn_models.CompGCN_DistMult.forward_base", "torch.mm", "compgcn_models.CompGCN_DistMult.bias.expand_as", "torch.sigmoid", "all_ent.transpose"], "methods", ["home.repos.pwc.inspect_result.rajarshd_cbr-subg.compgcn.compgcn_models.CompGCNBase.forward_base"], ["", "def", "forward", "(", "self", ",", "sub", ",", "rel", ",", "edge_index", ",", "edge_type", ")", ":", "\n", "\n", "\t\t", "sub_emb", ",", "rel_emb", ",", "all_ent", "=", "self", ".", "forward_base", "(", "sub", ",", "rel", ",", "self", ".", "drop", ",", "self", ".", "drop", ",", "edge_index", ",", "edge_type", ")", "\n", "obj_emb", "=", "sub_emb", "*", "rel_emb", "# Get DistMult representations for the neighbors", "\n", "\n", "x", "=", "torch", ".", "mm", "(", "obj_emb", ",", "all_ent", ".", "transpose", "(", "1", ",", "0", ")", ")", "\n", "x", "+=", "self", ".", "bias", ".", "expand_as", "(", "x", ")", "\n", "\n", "score", "=", "torch", ".", "sigmoid", "(", "x", ")", "\n", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.compgcn.compgcn_models.CompGCN_ConvE.__init__": [[109, 126], ["torch.device", "compgcn_models.CompGCNBase.__init__", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm1d", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Conv2d", "torch.nn.Linear", "int"], "methods", ["home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.sample_synthetic_graph.Graph.__init__"], ["\t", "def", "__init__", "(", "self", ",", "edge_index", ",", "edge_type", ",", "params", "=", "None", ",", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", ")", ":", "\n", "\t\t", "super", "(", "self", ".", "__class__", ",", "self", ")", ".", "__init__", "(", "edge_index", ",", "edge_type", ",", "params", ".", "num_rel", ",", "params", ")", "\n", "\n", "self", ".", "bn0", "=", "torch", ".", "nn", ".", "BatchNorm2d", "(", "1", ")", "\n", "self", ".", "bn1", "=", "torch", ".", "nn", ".", "BatchNorm2d", "(", "self", ".", "p", ".", "num_filt", ")", "\n", "self", ".", "bn2", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "self", ".", "p", ".", "embed_dim", ")", "\n", "\n", "self", ".", "hidden_drop", "=", "torch", ".", "nn", ".", "Dropout", "(", "self", ".", "p", ".", "hid_drop", ")", "\n", "self", ".", "hidden_drop2", "=", "torch", ".", "nn", ".", "Dropout", "(", "self", ".", "p", ".", "hid_drop2", ")", "\n", "self", ".", "feature_drop", "=", "torch", ".", "nn", ".", "Dropout", "(", "self", ".", "p", ".", "feat_drop", ")", "\n", "self", ".", "m_conv1", "=", "torch", ".", "nn", ".", "Conv2d", "(", "1", ",", "out_channels", "=", "self", ".", "p", ".", "num_filt", ",", "kernel_size", "=", "(", "self", ".", "p", ".", "ker_sz", ",", "self", ".", "p", ".", "ker_sz", ")", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "self", ".", "p", ".", "bias", ")", "\n", "\n", "flat_sz_h", "=", "int", "(", "2", "*", "self", ".", "p", ".", "k_w", ")", "-", "self", ".", "p", ".", "ker_sz", "+", "1", "\n", "flat_sz_w", "=", "self", ".", "p", ".", "k_h", "-", "self", ".", "p", ".", "ker_sz", "+", "1", "\n", "self", ".", "flat_sz", "=", "flat_sz_h", "*", "flat_sz_w", "*", "self", ".", "p", ".", "num_filt", "\n", "self", ".", "fc", "=", "torch", ".", "nn", ".", "Linear", "(", "self", ".", "flat_sz", ",", "self", ".", "p", ".", "embed_dim", ")", "\n", "self", ".", "device", "=", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.compgcn.compgcn_models.CompGCN_ConvE.concat": [[127, 133], ["e1_embed.view.view.view", "rel_embed.view.view.view", "torch.cat", "torch.transpose().reshape", "torch.transpose"], "methods", ["None"], ["", "def", "concat", "(", "self", ",", "e1_embed", ",", "rel_embed", ")", ":", "\n", "\t\t", "e1_embed", "=", "e1_embed", ".", "view", "(", "-", "1", ",", "1", ",", "self", ".", "p", ".", "embed_dim", ")", "\n", "rel_embed", "=", "rel_embed", ".", "view", "(", "-", "1", ",", "1", ",", "self", ".", "p", ".", "embed_dim", ")", "\n", "stack_inp", "=", "torch", ".", "cat", "(", "[", "e1_embed", ",", "rel_embed", "]", ",", "1", ")", "\n", "stack_inp", "=", "torch", ".", "transpose", "(", "stack_inp", ",", "2", ",", "1", ")", ".", "reshape", "(", "(", "-", "1", ",", "1", ",", "2", "*", "self", ".", "p", ".", "k_w", ",", "self", ".", "p", ".", "k_h", ")", ")", "\n", "return", "stack_inp", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.compgcn.compgcn_models.CompGCN_ConvE.forward": [[134, 154], ["compgcn_models.CompGCN_ConvE.forward_base", "compgcn_models.CompGCN_ConvE.concat", "compgcn_models.CompGCN_ConvE.bn0", "compgcn_models.CompGCN_ConvE.m_conv1", "compgcn_models.CompGCN_ConvE.bn1", "F.relu", "compgcn_models.CompGCN_ConvE.feature_drop", "torch.mm.view", "compgcn_models.CompGCN_ConvE.fc", "compgcn_models.CompGCN_ConvE.hidden_drop2", "compgcn_models.CompGCN_ConvE.bn2", "F.relu", "torch.mm", "compgcn_models.CompGCN_ConvE.bias.expand_as", "torch.sigmoid", "all_ent.transpose"], "methods", ["home.repos.pwc.inspect_result.rajarshd_cbr-subg.compgcn.compgcn_models.CompGCNBase.forward_base", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.compgcn.compgcn_models.CompGCN_ConvE.concat"], ["", "def", "forward", "(", "self", ",", "sub", ",", "rel", ")", ":", "\n", "\n", "\t\t", "sub_emb", ",", "rel_emb", ",", "all_ent", "=", "self", ".", "forward_base", "(", "sub", ",", "rel", ",", "self", ".", "hidden_drop", ",", "self", ".", "feature_drop", ")", "\n", "stk_inp", "=", "self", ".", "concat", "(", "sub_emb", ",", "rel_emb", ")", "\n", "x", "=", "self", ".", "bn0", "(", "stk_inp", ")", "\n", "x", "=", "self", ".", "m_conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "feature_drop", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "self", ".", "flat_sz", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "x", "=", "self", ".", "hidden_drop2", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "torch", ".", "mm", "(", "x", ",", "all_ent", ".", "transpose", "(", "1", ",", "0", ")", ")", "\n", "x", "+=", "self", ".", "bias", ".", "expand_as", "(", "x", ")", "\n", "\n", "score", "=", "torch", ".", "sigmoid", "(", "x", ")", "\n", "return", "score", "", "", "", ""]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.compgcn.compgcn_conv_basis.CompGCNConvBasis.__init__": [[5, 35], ["src.models.compgcn.message_passing.MessagePassing.__init__", "get_param", "get_param", "get_param", "get_param", "get_param", "get_param", "get_param", "torch.nn.Dropout", "torch.nn.BatchNorm1d", "compgcn_conv_basis.CompGCNConvBasis.register_parameter", "Parameter", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.sample_synthetic_graph.Graph.__init__", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.data_loaders.helper.get_param", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.data_loaders.helper.get_param", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.data_loaders.helper.get_param", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.data_loaders.helper.get_param", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.data_loaders.helper.get_param", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.data_loaders.helper.get_param", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.data_loaders.helper.get_param"], ["\t", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "num_rels", ",", "num_bases", ",", "act", "=", "lambda", "x", ":", "x", ",", "cache", "=", "True", ",", "params", "=", "None", ")", ":", "\n", "\t\t", "super", "(", "self", ".", "__class__", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "p", "=", "params", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "num_rels", "=", "num_rels", "\n", "self", ".", "num_bases", "=", "num_bases", "\n", "self", ".", "act", "=", "act", "\n", "self", ".", "device", "=", "None", "\n", "self", ".", "cache", "=", "cache", "# Should be False for graph classification tasks", "\n", "\n", "self", ".", "w_loop", "=", "get_param", "(", "(", "in_channels", ",", "out_channels", ")", ")", ";", "\n", "self", ".", "w_in", "=", "get_param", "(", "(", "in_channels", ",", "out_channels", ")", ")", ";", "\n", "self", ".", "w_out", "=", "get_param", "(", "(", "in_channels", ",", "out_channels", ")", ")", ";", "\n", "\n", "self", ".", "rel_basis", "=", "get_param", "(", "(", "self", ".", "num_bases", ",", "in_channels", ")", ")", "\n", "self", ".", "rel_wt", "=", "get_param", "(", "(", "self", ".", "num_rels", "*", "2", ",", "self", ".", "num_bases", ")", ")", "\n", "self", ".", "w_rel", "=", "get_param", "(", "(", "in_channels", ",", "out_channels", ")", ")", "\n", "self", ".", "loop_rel", "=", "get_param", "(", "(", "1", ",", "in_channels", ")", ")", ";", "\n", "\n", "self", ".", "drop", "=", "torch", ".", "nn", ".", "Dropout", "(", "self", ".", "p", ".", "dropout", ")", "\n", "self", ".", "bn", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "out_channels", ")", "\n", "\n", "self", ".", "in_norm", ",", "self", ".", "out_norm", ",", "\n", "self", ".", "in_index", ",", "self", ".", "out_index", ",", "\n", "self", ".", "in_type", ",", "self", ".", "out_type", ",", "\n", "self", ".", "loop_index", ",", "self", ".", "loop_type", "=", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", "\n", "\n", "if", "self", ".", "p", ".", "bias", ":", "self", ".", "register_parameter", "(", "'bias'", ",", "Parameter", "(", "torch", ".", "zeros", "(", "out_channels", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.compgcn.compgcn_conv_basis.CompGCNConvBasis.forward": [[36, 65], ["torch.mm", "torch.cat", "x.size", "compgcn_conv_basis.CompGCNConvBasis.propagate", "compgcn_conv_basis.CompGCNConvBasis.propagate", "compgcn_conv_basis.CompGCNConvBasis.propagate", "edge_index.size", "torch.stack().to", "torch.full().to", "compgcn_conv_basis.CompGCNConvBasis.compute_norm", "compgcn_conv_basis.CompGCNConvBasis.compute_norm", "compgcn_conv_basis.CompGCNConvBasis.bn", "compgcn_conv_basis.CompGCNConvBasis.act", "torch.matmul", "torch.stack", "torch.full", "compgcn_conv_basis.CompGCNConvBasis.drop", "compgcn_conv_basis.CompGCNConvBasis.drop", "torch.arange", "torch.arange", "torch.cat.size"], "methods", ["home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.sample_synthetic_graph.Graph.size", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.compgcn.message_passing.MessagePassing.propagate", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.compgcn.message_passing.MessagePassing.propagate", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.compgcn.message_passing.MessagePassing.propagate", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.sample_synthetic_graph.Graph.size", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.compgcn.compgcn_conv.CompGCNConv.compute_norm", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.compgcn.compgcn_conv.CompGCNConv.compute_norm", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.sample_synthetic_graph.Graph.size"], ["", "def", "forward", "(", "self", ",", "x", ",", "edge_index", ",", "edge_type", ",", "edge_norm", "=", "None", ",", "rel_embed", "=", "None", ")", ":", "\n", "\t\t", "if", "self", ".", "device", "is", "None", ":", "\n", "\t\t\t", "self", ".", "device", "=", "edge_index", ".", "device", "\n", "\n", "", "rel_embed", "=", "torch", ".", "mm", "(", "self", ".", "rel_wt", ",", "self", ".", "rel_basis", ")", "\n", "rel_embed", "=", "torch", ".", "cat", "(", "[", "rel_embed", ",", "self", ".", "loop_rel", "]", ",", "dim", "=", "0", ")", "\n", "\n", "num_edges", "=", "edge_index", ".", "size", "(", "1", ")", "//", "2", "\n", "num_ent", "=", "x", ".", "size", "(", "0", ")", "\n", "\n", "if", "not", "self", ".", "cache", "or", "self", ".", "in_norm", "==", "None", ":", "\n", "\t\t\t", "self", ".", "in_index", ",", "self", ".", "out_index", "=", "edge_index", "[", ":", ",", ":", "num_edges", "]", ",", "edge_index", "[", ":", ",", "num_edges", ":", "]", "\n", "self", ".", "in_type", ",", "self", ".", "out_type", "=", "edge_type", "[", ":", "num_edges", "]", ",", "edge_type", "[", "num_edges", ":", "]", "\n", "\n", "self", ".", "loop_index", "=", "torch", ".", "stack", "(", "[", "torch", ".", "arange", "(", "num_ent", ")", ",", "torch", ".", "arange", "(", "num_ent", ")", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "loop_type", "=", "torch", ".", "full", "(", "(", "num_ent", ",", ")", ",", "rel_embed", ".", "size", "(", "0", ")", "-", "1", ",", "dtype", "=", "torch", ".", "long", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "self", ".", "in_norm", "=", "self", ".", "compute_norm", "(", "self", ".", "in_index", ",", "num_ent", ")", "\n", "self", ".", "out_norm", "=", "self", ".", "compute_norm", "(", "self", ".", "out_index", ",", "num_ent", ")", "\n", "\n", "", "in_res", "=", "self", ".", "propagate", "(", "'add'", ",", "self", ".", "in_index", ",", "x", "=", "x", ",", "edge_type", "=", "self", ".", "in_type", ",", "rel_embed", "=", "rel_embed", ",", "edge_norm", "=", "self", ".", "in_norm", ",", "mode", "=", "'in'", ")", "\n", "loop_res", "=", "self", ".", "propagate", "(", "'add'", ",", "self", ".", "loop_index", ",", "x", "=", "x", ",", "edge_type", "=", "self", ".", "loop_type", ",", "rel_embed", "=", "rel_embed", ",", "edge_norm", "=", "None", ",", "mode", "=", "'loop'", ")", "\n", "out_res", "=", "self", ".", "propagate", "(", "'add'", ",", "self", ".", "out_index", ",", "x", "=", "x", ",", "edge_type", "=", "self", ".", "out_type", ",", "rel_embed", "=", "rel_embed", ",", "edge_norm", "=", "self", ".", "out_norm", ",", "mode", "=", "'out'", ")", "\n", "out", "=", "self", ".", "drop", "(", "in_res", ")", "*", "(", "1", "/", "3", ")", "+", "self", ".", "drop", "(", "out_res", ")", "*", "(", "1", "/", "3", ")", "+", "loop_res", "*", "(", "1", "/", "3", ")", "\n", "\n", "if", "self", ".", "p", ".", "bias", ":", "out", "=", "out", "+", "self", ".", "bias", "\n", "if", "self", ".", "b_norm", ":", "out", "=", "self", ".", "bn", "(", "out", ")", "\n", "\n", "return", "self", ".", "act", "(", "out", ")", ",", "torch", ".", "matmul", "(", "rel_embed", ",", "self", ".", "w_rel", ")", "[", ":", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.compgcn.compgcn_conv_basis.CompGCNConvBasis.rel_transform": [[66, 73], ["ccorr"], "methods", ["home.repos.pwc.inspect_result.rajarshd_cbr-subg.data_loaders.helper.ccorr"], ["", "def", "rel_transform", "(", "self", ",", "ent_embed", ",", "rel_embed", ")", ":", "\n", "\t\t", "if", "self", ".", "p", ".", "opn", "==", "'corr'", ":", "trans_embed", "=", "ccorr", "(", "ent_embed", ",", "rel_embed", ")", "\n", "elif", "self", ".", "p", ".", "opn", "==", "'sub'", ":", "trans_embed", "=", "ent_embed", "-", "rel_embed", "\n", "elif", "self", ".", "p", ".", "opn", "==", "'mult'", ":", "trans_embed", "=", "ent_embed", "*", "rel_embed", "\n", "else", ":", "raise", "NotImplementedError", "\n", "\n", "return", "trans_embed", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.compgcn.compgcn_conv_basis.CompGCNConvBasis.message": [[74, 81], ["getattr", "torch.index_select", "compgcn_conv_basis.CompGCNConvBasis.rel_transform", "torch.mm", "edge_norm.view"], "methods", ["home.repos.pwc.inspect_result.rajarshd_cbr-subg.compgcn.compgcn_conv.CompGCNConv.rel_transform"], ["", "def", "message", "(", "self", ",", "x_j", ",", "edge_type", ",", "rel_embed", ",", "edge_norm", ",", "mode", ")", ":", "\n", "\t\t", "weight", "=", "getattr", "(", "self", ",", "'w_{}'", ".", "format", "(", "mode", ")", ")", "\n", "rel_emb", "=", "torch", ".", "index_select", "(", "rel_embed", ",", "0", ",", "edge_type", ")", "\n", "xj_rel", "=", "self", ".", "rel_transform", "(", "x_j", ",", "rel_emb", ")", "\n", "out", "=", "torch", ".", "mm", "(", "xj_rel", ",", "weight", ")", "\n", "\n", "return", "out", "if", "edge_norm", "is", "None", "else", "out", "*", "edge_norm", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.compgcn.compgcn_conv_basis.CompGCNConvBasis.update": [[82, 84], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "aggr_out", ")", ":", "\n", "\t\t", "return", "aggr_out", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.compgcn.compgcn_conv_basis.CompGCNConvBasis.compute_norm": [[85, 94], ["torch.ones_like().float", "scatter_add", "scatter_add.pow", "torch.ones_like", "float"], "methods", ["None"], ["", "def", "compute_norm", "(", "self", ",", "edge_index", ",", "num_ent", ")", ":", "\n", "\t\t", "row", ",", "col", "=", "edge_index", "\n", "edge_weight", "=", "torch", ".", "ones_like", "(", "row", ")", ".", "float", "(", ")", "\n", "deg", "=", "scatter_add", "(", "edge_weight", ",", "row", ",", "dim", "=", "0", ",", "dim_size", "=", "num_ent", ")", "# Summing number of weights of the edges [Computing out-degree] [Should be equal to in-degree (undireted graph)]", "\n", "deg_inv", "=", "deg", ".", "pow", "(", "-", "0.5", ")", "# D^{-0.5}", "\n", "deg_inv", "[", "deg_inv", "==", "float", "(", "'inf'", ")", "]", "=", "0", "\n", "norm", "=", "deg_inv", "[", "row", "]", "*", "edge_weight", "*", "deg_inv", "[", "col", "]", "# D^{-0.5}", "\n", "\n", "return", "norm", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.compgcn.compgcn_conv_basis.CompGCNConvBasis.__repr__": [[95, 98], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "\t\t", "return", "'{}({}, {}, num_rels={})'", ".", "format", "(", "\n", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "in_channels", ",", "self", ".", "out_channels", ",", "self", ".", "num_rels", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.compgcn.compgcn_conv.CompGCNConv.__init__": [[5, 25], ["src.models.compgcn.message_passing.MessagePassing.__init__", "get_param", "get_param", "get_param", "get_param", "get_param", "torch.nn.Dropout", "torch.nn.BatchNorm1d", "compgcn_conv.CompGCNConv.register_parameter", "Parameter", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.sample_synthetic_graph.Graph.__init__", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.data_loaders.helper.get_param", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.data_loaders.helper.get_param", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.data_loaders.helper.get_param", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.data_loaders.helper.get_param", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.data_loaders.helper.get_param"], ["\t", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "num_rels", ",", "act", "=", "lambda", "x", ":", "x", ",", "params", "=", "None", ")", ":", "\n", "\t\t", "super", "(", "self", ".", "__class__", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "p", "=", "params", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "num_rels", "=", "num_rels", "\n", "self", ".", "act", "=", "act", "\n", "self", ".", "device", "=", "None", "\n", "\n", "self", ".", "w_loop", "=", "get_param", "(", "(", "in_channels", ",", "out_channels", ")", ")", "\n", "self", ".", "w_in", "=", "get_param", "(", "(", "in_channels", ",", "out_channels", ")", ")", "\n", "self", ".", "w_out", "=", "get_param", "(", "(", "in_channels", ",", "out_channels", ")", ")", "\n", "self", ".", "w_rel", "=", "get_param", "(", "(", "in_channels", ",", "out_channels", ")", ")", "\n", "self", ".", "loop_rel", "=", "get_param", "(", "(", "1", ",", "in_channels", ")", ")", ";", "\n", "\n", "self", ".", "drop", "=", "torch", ".", "nn", ".", "Dropout", "(", "self", ".", "p", ".", "dropout", ")", "\n", "self", ".", "bn", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "out_channels", ")", "\n", "\n", "if", "self", ".", "p", ".", "bias", ":", "self", ".", "register_parameter", "(", "'bias'", ",", "Parameter", "(", "torch", ".", "zeros", "(", "out_channels", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.compgcn.compgcn_conv.CompGCNConv.forward": [[26, 52], ["torch.cat", "x.size", "torch.stack().to", "torch.full().to", "compgcn_conv.CompGCNConv.compute_norm", "compgcn_conv.CompGCNConv.compute_norm", "compgcn_conv.CompGCNConv.propagate", "compgcn_conv.CompGCNConv.propagate", "compgcn_conv.CompGCNConv.propagate", "compgcn_conv.CompGCNConv.bn", "edge_index.size", "compgcn_conv.CompGCNConv.act", "compgcn_conv.CompGCNConv.loop_rel.to", "torch.stack", "torch.full", "compgcn_conv.CompGCNConv.cpu", "torch.matmul", "compgcn_conv.CompGCNConv.drop", "compgcn_conv.CompGCNConv.drop", "compgcn_conv.CompGCNConv.w_rel.to", "torch.arange", "torch.arange", "torch.cat.size"], "methods", ["home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.sample_synthetic_graph.Graph.size", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.compgcn.compgcn_conv.CompGCNConv.compute_norm", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.compgcn.compgcn_conv.CompGCNConv.compute_norm", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.compgcn.message_passing.MessagePassing.propagate", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.compgcn.message_passing.MessagePassing.propagate", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.compgcn.message_passing.MessagePassing.propagate", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.sample_synthetic_graph.Graph.size", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.sample_synthetic_graph.Graph.size"], ["", "def", "forward", "(", "self", ",", "x", ",", "edge_index", ",", "edge_type", ",", "rel_embed", ")", ":", "\n", "\t\t", "if", "self", ".", "device", "is", "None", ":", "\n", "\t\t\t", "self", ".", "device", "=", "edge_index", ".", "device", "\n", "\n", "", "rel_embed", "=", "torch", ".", "cat", "(", "[", "rel_embed", ",", "self", ".", "loop_rel", ".", "to", "(", "self", ".", "device", ")", "]", ",", "dim", "=", "0", ")", "\n", "num_edges", "=", "edge_index", ".", "size", "(", "1", ")", "//", "2", "\n", "num_ent", "=", "x", ".", "size", "(", "0", ")", "\n", "\n", "self", ".", "in_index", ",", "self", ".", "out_index", "=", "edge_index", "[", ":", ",", ":", "num_edges", "]", ",", "edge_index", "[", ":", ",", "num_edges", ":", "]", "\n", "self", ".", "in_type", ",", "self", ".", "out_type", "=", "edge_type", "[", ":", "num_edges", "]", ",", "edge_type", "[", "num_edges", ":", "]", "\n", "\n", "self", ".", "loop_index", "=", "torch", ".", "stack", "(", "[", "torch", ".", "arange", "(", "num_ent", ")", ",", "torch", ".", "arange", "(", "num_ent", ")", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "loop_type", "=", "torch", ".", "full", "(", "(", "num_ent", ",", ")", ",", "rel_embed", ".", "size", "(", "0", ")", "-", "1", ",", "dtype", "=", "torch", ".", "long", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "self", ".", "in_norm", "=", "self", ".", "compute_norm", "(", "self", ".", "in_index", ",", "num_ent", ")", "\n", "self", ".", "out_norm", "=", "self", ".", "compute_norm", "(", "self", ".", "out_index", ",", "num_ent", ")", "\n", "\n", "in_res", "=", "self", ".", "propagate", "(", "'add'", ",", "self", ".", "in_index", ",", "x", "=", "x", ",", "edge_type", "=", "self", ".", "in_type", ",", "rel_embed", "=", "rel_embed", ",", "edge_norm", "=", "self", ".", "in_norm", ",", "mode", "=", "'in'", ")", "\n", "loop_res", "=", "self", ".", "propagate", "(", "'add'", ",", "self", ".", "loop_index", ",", "x", "=", "x", ",", "edge_type", "=", "self", ".", "loop_type", ",", "rel_embed", "=", "rel_embed", ",", "edge_norm", "=", "None", ",", "mode", "=", "'loop'", ")", "\n", "out_res", "=", "self", ".", "propagate", "(", "'add'", ",", "self", ".", "out_index", ",", "x", "=", "x", ",", "edge_type", "=", "self", ".", "out_type", ",", "rel_embed", "=", "rel_embed", ",", "edge_norm", "=", "self", ".", "out_norm", ",", "mode", "=", "'out'", ")", "\n", "out", "=", "self", ".", "drop", "(", "in_res", ")", "*", "(", "1", "/", "3", ")", "+", "self", ".", "drop", "(", "out_res", ")", "*", "(", "1", "/", "3", ")", "+", "loop_res", "*", "(", "1", "/", "3", ")", "\n", "\n", "if", "self", ".", "p", ".", "bias", ":", "out", "=", "out", ".", "cpu", "(", ")", "+", "self", ".", "bias", "\n", "out", "=", "self", ".", "bn", "(", "out", ")", "\n", "\n", "return", "self", ".", "act", "(", "out", ")", ",", "torch", ".", "matmul", "(", "rel_embed", ",", "self", ".", "w_rel", ".", "to", "(", "self", ".", "device", ")", ")", "[", ":", "-", "1", "]", "# Ignoring the self loop inserted", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.compgcn.compgcn_conv.CompGCNConv.rel_transform": [[53, 60], ["ccorr"], "methods", ["home.repos.pwc.inspect_result.rajarshd_cbr-subg.data_loaders.helper.ccorr"], ["", "def", "rel_transform", "(", "self", ",", "ent_embed", ",", "rel_embed", ")", ":", "\n", "\t\t", "if", "self", ".", "p", ".", "opn", "==", "'corr'", ":", "trans_embed", "=", "ccorr", "(", "ent_embed", ",", "rel_embed", ")", "\n", "elif", "self", ".", "p", ".", "opn", "==", "'sub'", ":", "trans_embed", "=", "ent_embed", "-", "rel_embed", "\n", "elif", "self", ".", "p", ".", "opn", "==", "'mult'", ":", "trans_embed", "=", "ent_embed", "*", "rel_embed", "\n", "else", ":", "raise", "NotImplementedError", "\n", "\n", "return", "trans_embed", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.compgcn.compgcn_conv.CompGCNConv.message": [[61, 68], ["getattr().to", "torch.index_select", "compgcn_conv.CompGCNConv.rel_transform", "torch.mm", "torch.index_select.contiguous", "getattr", "edge_norm.view"], "methods", ["home.repos.pwc.inspect_result.rajarshd_cbr-subg.compgcn.compgcn_conv.CompGCNConv.rel_transform"], ["", "def", "message", "(", "self", ",", "x_j", ",", "edge_type", ",", "rel_embed", ",", "edge_norm", ",", "mode", ")", ":", "\n", "\t\t", "weight", "=", "getattr", "(", "self", ",", "'w_{}'", ".", "format", "(", "mode", ")", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "rel_emb", "=", "torch", ".", "index_select", "(", "rel_embed", ",", "0", ",", "edge_type", ")", "\n", "xj_rel", "=", "self", ".", "rel_transform", "(", "x_j", ",", "rel_emb", ".", "contiguous", "(", ")", ")", "\n", "out", "=", "torch", ".", "mm", "(", "xj_rel", ",", "weight", ")", "\n", "\n", "return", "out", "if", "edge_norm", "is", "None", "else", "out", "*", "edge_norm", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.compgcn.compgcn_conv.CompGCNConv.update": [[69, 71], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "aggr_out", ")", ":", "\n", "\t\t", "return", "aggr_out", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.compgcn.compgcn_conv.CompGCNConv.compute_norm": [[72, 81], ["torch.ones_like().float", "scatter_add", "scatter_add.pow", "row.long", "torch.ones_like", "float", "col.long", "row.long"], "methods", ["None"], ["", "def", "compute_norm", "(", "self", ",", "edge_index", ",", "num_ent", ")", ":", "\n", "\t\t", "row", ",", "col", "=", "edge_index", "\n", "edge_weight", "=", "torch", ".", "ones_like", "(", "row", ")", ".", "float", "(", ")", "\n", "deg", "=", "scatter_add", "(", "edge_weight", ",", "row", ".", "long", "(", ")", ",", "dim", "=", "0", ",", "dim_size", "=", "num_ent", ")", "# Summing number of weights of the edges", "\n", "deg_inv", "=", "deg", ".", "pow", "(", "-", "0.5", ")", "# D^{-0.5}", "\n", "deg_inv", "[", "deg_inv", "==", "float", "(", "'inf'", ")", "]", "=", "0", "\n", "norm", "=", "deg_inv", "[", "row", ".", "long", "(", ")", "]", "*", "edge_weight", "*", "deg_inv", "[", "col", ".", "long", "(", ")", "]", "# D^{-0.5}", "\n", "\n", "return", "norm", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.compgcn.compgcn_conv.CompGCNConv.__repr__": [[82, 85], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "\t\t", "return", "'{}({}, {}, num_rels={})'", ".", "format", "(", "\n", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "in_channels", ",", "self", ".", "out_channels", ",", "self", ".", "num_rels", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.compgcn.message_passing.MessagePassing.__init__": [[45, 50], ["super().__init__", "inspect.getargspec", "inspect.getargspec"], "methods", ["home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.sample_synthetic_graph.Graph.__init__"], ["def", "__init__", "(", "self", ",", "aggr", "=", "'add'", ")", ":", "\n", "\t\t", "super", "(", "MessagePassing", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "message_args", "=", "inspect", ".", "getargspec", "(", "self", ".", "message", ")", "[", "0", "]", "[", "1", ":", "]", "# In the defined message function: get the list of arguments as list of string| For eg. in rgcn this will be ['x_j', 'edge_type', 'edge_norm'] (arguments of message function)", "\n", "self", ".", "update_args", "=", "inspect", ".", "getargspec", "(", "self", ".", "update", ")", "[", "0", "]", "[", "2", ":", "]", "# Same for update function starting from 3rd argument | first=self, second=out", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.compgcn.message_passing.MessagePassing.propagate": [[51, 82], ["message_passing.MessagePassing.message", "message_passing.scatter_", "message_passing.MessagePassing.update", "tmp.size", "message_args.append", "tmp.size", "message_args.append", "message_args.append"], "methods", ["home.repos.pwc.inspect_result.rajarshd_cbr-subg.rgcn.query_aware_rgcn_layers.FastQueryAwareRGCNConv.message", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.compgcn.message_passing.scatter_", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.compgcn.message_passing.MessagePassing.update", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.sample_synthetic_graph.Graph.size", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.sample_synthetic_graph.Graph.size"], ["", "def", "propagate", "(", "self", ",", "aggr", ",", "edge_index", ",", "**", "kwargs", ")", ":", "\n", "\t\t", "r\"\"\"The initial call to start propagating messages.\n\t\tTakes in an aggregation scheme (:obj:`\"add\"`, :obj:`\"mean\"` or\n\t\t:obj:`\"max\"`), the edge indices, and all additional data which is\n\t\tneeded to construct messages and to update node embeddings.\"\"\"", "\n", "\n", "assert", "aggr", "in", "[", "'add'", ",", "'mean'", ",", "'max'", "]", "\n", "kwargs", "[", "'edge_index'", "]", "=", "edge_index", "\n", "\n", "\n", "size", "=", "None", "\n", "message_args", "=", "[", "]", "\n", "for", "arg", "in", "self", ".", "message_args", ":", "\n", "\t\t\t", "if", "arg", "[", "-", "2", ":", "]", "==", "'_i'", ":", "# If arguments ends with _i then include indic", "\n", "\t\t\t\t", "tmp", "=", "kwargs", "[", "arg", "[", ":", "-", "2", "]", "]", "# Take the front part of the variable | Mostly it will be 'x', ", "\n", "size", "=", "tmp", ".", "size", "(", "0", ")", "\n", "message_args", ".", "append", "(", "tmp", "[", "edge_index", "[", "0", "]", "]", ")", "# Lookup for head entities in edges", "\n", "", "elif", "arg", "[", "-", "2", ":", "]", "==", "'_j'", ":", "\n", "\t\t\t\t", "tmp", "=", "kwargs", "[", "arg", "[", ":", "-", "2", "]", "]", "# tmp = kwargs['x']", "\n", "size", "=", "tmp", ".", "size", "(", "0", ")", "\n", "message_args", ".", "append", "(", "tmp", "[", "edge_index", "[", "1", "]", "]", ")", "# Lookup for tail entities in edges", "\n", "", "else", ":", "\n", "\t\t\t\t", "message_args", ".", "append", "(", "kwargs", "[", "arg", "]", ")", "# Take things from kwargs", "\n", "\n", "", "", "update_args", "=", "[", "kwargs", "[", "arg", "]", "for", "arg", "in", "self", ".", "update_args", "]", "# Take update args from kwargs", "\n", "\n", "out", "=", "self", ".", "message", "(", "*", "message_args", ")", "\n", "out", "=", "scatter_", "(", "aggr", ",", "out", ",", "edge_index", "[", "0", "]", ",", "dim_size", "=", "size", ")", "# Aggregated neighbors for each vertex", "\n", "out", "=", "self", ".", "update", "(", "out", ",", "*", "update_args", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.compgcn.message_passing.MessagePassing.message": [[83, 92], ["None"], "methods", ["None"], ["", "def", "message", "(", "self", ",", "x_j", ")", ":", "# pragma: no cover", "\n", "\t\t", "r\"\"\"Constructs messages in analogy to :math:`\\phi_{\\mathbf{\\Theta}}`\n\t\tfor each edge in :math:`(i,j) \\in \\mathcal{E}`.\n\t\tCan take any argument which was initially passed to :meth:`propagate`.\n\t\tIn addition, features can be lifted to the source node :math:`i` and\n\t\ttarget node :math:`j` by appending :obj:`_i` or :obj:`_j` to the\n\t\tvariable name, *.e.g.* :obj:`x_i` and :obj:`x_j`.\"\"\"", "\n", "\n", "return", "x_j", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.compgcn.message_passing.MessagePassing.update": [[93, 101], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "aggr_out", ")", ":", "# pragma: no cover", "\n", "\t\t", "r\"\"\"Updates node embeddings in analogy to\n\t\t:math:`\\gamma_{\\mathbf{\\Theta}}` for each node\n\t\t:math:`i \\in \\mathcal{V}`.\n\t\tTakes in the output of aggregation as first argument and any argument\n\t\twhich was initially passed to :meth:`propagate`.\"\"\"", "\n", "\n", "return", "aggr_out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.compgcn.message_passing.scatter_": [[4, 26], ["torch_scatter.scatter", "isinstance"], "function", ["None"], ["def", "scatter_", "(", "name", ",", "src", ",", "index", ",", "dim_size", "=", "None", ")", ":", "\n", "\t", "r\"\"\"Aggregates all values from the :attr:`src` tensor at the indices\n\tspecified in the :attr:`index` tensor along the first dimension.\n\tIf multiple indices reference the same location, their contributions\n\tare aggregated according to :attr:`name` (either :obj:`\"add\"`,\n\t:obj:`\"mean\"` or :obj:`\"max\"`).\n\n\tArgs:\n\t\tname (string): The aggregation to use (:obj:`\"add\"`, :obj:`\"mean\"`,\n\t\t\t:obj:`\"max\"`).\n\t\tsrc (Tensor): The source tensor.\n\t\tindex (LongTensor): The indices of elements to scatter.\n\t\tdim_size (int, optional): Automatically create output tensor with size\n\t\t\t:attr:`dim_size` in the first dimension. If set to :attr:`None`, a\n\t\t\tminimal sized output tensor is returned. (default: :obj:`None`)\n\n\t:rtype: :class:`Tensor`\n\t\"\"\"", "\n", "if", "name", "==", "'add'", ":", "name", "=", "'sum'", "\n", "assert", "name", "in", "[", "'sum'", ",", "'mean'", ",", "'max'", "]", "\n", "out", "=", "scatter", "(", "src", ",", "index", ",", "dim", "=", "0", ",", "out", "=", "None", ",", "dim_size", "=", "dim_size", ",", "reduce", "=", "name", ")", "\n", "return", "out", "[", "0", "]", "if", "isinstance", "(", "out", ",", "tuple", ")", "else", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.rgcn.query_aware_rgcn_layers.QueryAwareRGCNConv.__init__": [[59, 136], ["MessagePassing.__init__", "isinstance", "query_aware_rgcn_layers.QueryAwareRGCNConv.reset_parameters", "ValueError", "Parameter", "Parameter", "Param", "query_aware_rgcn_layers.QueryAwareRGCNConv.register_parameter", "Param", "query_aware_rgcn_layers.QueryAwareRGCNConv.register_parameter", "Parameter", "Parameter", "torch.Tensor", "torch.Tensor", "NotImplementedError", "Parameter", "query_aware_rgcn_layers.QueryAwareRGCNConv.register_parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "Parameter", "Parameter", "Parameter", "Parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.sample_synthetic_graph.Graph.__init__", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.rgcn.query_aware_rgcn_layers.QueryAwareRGCNConv.reset_parameters"], ["def", "__init__", "(", "self", ",", "in_channels", ":", "Union", "[", "int", ",", "Tuple", "[", "int", ",", "int", "]", "]", ",", "\n", "out_channels", ":", "int", ",", "\n", "num_relations", ":", "int", ",", "\n", "query_dim", ":", "int", ",", "\n", "query_attn_type", ":", "str", "=", "''", ",", "\n", "query_attn_activation", ":", "str", "=", "'softmax'", ",", "\n", "num_bases", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "num_blocks", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "aggr", ":", "str", "=", "'mean'", ",", "\n", "root_weight", ":", "bool", "=", "True", ",", "\n", "bias", ":", "bool", "=", "True", ",", "**", "kwargs", ")", ":", "# yapf: disable", "\n", "\n", "        ", "super", "(", "QueryAwareRGCNConv", ",", "self", ")", ".", "__init__", "(", "aggr", "=", "aggr", ",", "node_dim", "=", "0", ",", "**", "kwargs", ")", "\n", "\n", "if", "num_bases", "is", "not", "None", "and", "num_blocks", "is", "not", "None", ":", "\n", "            ", "raise", "ValueError", "(", "'Can not apply both basis-decomposition and '", "\n", "'block-diagonal-decomposition at the same time.'", ")", "\n", "\n", "", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "num_relations", "=", "num_relations", "\n", "self", ".", "query_dim", "=", "query_dim", "\n", "self", ".", "query_attn_type", "=", "query_attn_type", "\n", "assert", "self", ".", "query_attn_type", "in", "[", "'full'", ",", "'dim'", ",", "'sep'", "]", "\n", "self", ".", "query_attn_activation", "=", "query_attn_activation", "\n", "assert", "self", ".", "query_attn_activation", "in", "[", "'sigmoid'", ",", "'softmax'", "]", "\n", "self", ".", "num_bases", "=", "num_bases", "\n", "self", ".", "num_blocks", "=", "num_blocks", "\n", "\n", "if", "isinstance", "(", "in_channels", ",", "int", ")", ":", "\n", "            ", "in_channels", "=", "(", "in_channels", ",", "in_channels", ")", "\n", "", "self", ".", "in_channels_l", "=", "in_channels", "[", "0", "]", "\n", "\n", "if", "num_bases", "is", "not", "None", ":", "\n", "            ", "self", ".", "weight", "=", "Parameter", "(", "\n", "torch", ".", "Tensor", "(", "num_bases", ",", "in_channels", "[", "0", "]", ",", "out_channels", ")", ")", "\n", "self", ".", "comp", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "num_relations", ",", "num_bases", ")", ")", "\n", "\n", "", "elif", "num_blocks", "is", "not", "None", ":", "\n", "# assert (in_channels[0] % num_blocks == 0", "\n", "#         and out_channels % num_blocks == 0)", "\n", "# self.weight = Parameter(", "\n", "#     torch.Tensor(num_relations, num_blocks,", "\n", "#                  in_channels[0] // num_blocks,", "\n", "#                  out_channels // num_blocks))", "\n", "# self.register_parameter('comp', None)", "\n", "            ", "raise", "NotImplementedError", "(", "\"Querry aware attention is currently not implemented with \"", "\n", "\"block-diagonal-decomposition\"", ")", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "weight", "=", "Parameter", "(", "\n", "torch", ".", "Tensor", "(", "num_relations", ",", "in_channels", "[", "0", "]", ",", "out_channels", ")", ")", "\n", "self", ".", "register_parameter", "(", "'comp'", ",", "None", ")", "\n", "\n", "", "if", "root_weight", ":", "\n", "            ", "self", ".", "root", "=", "Param", "(", "torch", ".", "Tensor", "(", "in_channels", "[", "1", "]", ",", "out_channels", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'root'", ",", "None", ")", "\n", "\n", "", "if", "bias", ":", "\n", "            ", "self", ".", "bias", "=", "Param", "(", "torch", ".", "Tensor", "(", "out_channels", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'bias'", ",", "None", ")", "\n", "\n", "", "if", "query_attn_type", "==", "'full'", ":", "\n", "            ", "self", ".", "query_attn_weight", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "1", ",", "in_channels", "[", "0", "]", ",", "out_channels", ",", "query_dim", ")", ")", "\n", "", "elif", "query_attn_type", "==", "'dim'", ":", "\n", "            ", "self", ".", "query_attn_weight_l", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "1", ",", "in_channels", "[", "0", "]", ",", "1", ")", ")", "\n", "self", ".", "query_attn_weight_r", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "1", ",", "1", ",", "out_channels", ")", ")", "\n", "self", ".", "query_attn_weight", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "in_channels", "[", "0", "]", "+", "out_channels", ",", "query_dim", ")", ")", "\n", "", "else", ":", "\n", "# query_attn_type == 'sep'", "\n", "            ", "self", ".", "query_attn_weight", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "num_relations", ",", "query_dim", ")", ")", "\n", "", "if", "self", ".", "query_attn_activation", "==", "'sigmoid'", ":", "\n", "            ", "self", ".", "query_attn_bias", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "num_relations", ",", "1", ")", ")", "\n", "\n", "", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.rgcn.query_aware_rgcn_layers.QueryAwareRGCNConv.reset_parameters": [[137, 148], ["glorot", "glorot", "glorot", "glorot", "zeros", "glorot", "glorot", "zeros"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "glorot", "(", "self", ".", "weight", ")", "\n", "glorot", "(", "self", ".", "comp", ")", "\n", "glorot", "(", "self", ".", "root", ")", "\n", "if", "self", ".", "query_attn_type", "==", "'dim'", ":", "\n", "            ", "glorot", "(", "self", ".", "query_attn_weight_l", ")", "\n", "glorot", "(", "self", ".", "query_attn_weight_r", ")", "\n", "", "glorot", "(", "self", ".", "query_attn_weight", ")", "\n", "if", "self", ".", "query_attn_activation", "==", "'sigmoid'", ":", "\n", "            ", "zeros", "(", "self", ".", "query_attn_bias", ")", "\n", "", "zeros", "(", "self", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.rgcn.query_aware_rgcn_layers.QueryAwareRGCNConv.compute_relation_attention": [[149, 181], ["torch.tensor().sqrt", "torch.sum().sum", "torch.sigmoid", "query_vec.t", "torch.sum", "torch.sum", "torch.cat", "torch.softmax", "NotImplementedError", "torch.tensor", "torch.sum", "rel_weights.unsqueeze"], "methods", ["None"], ["", "def", "compute_relation_attention", "(", "self", ",", "rel_weights", ",", "query_vec", ")", ":", "\n", "        ", "\"\"\"\n        :param rel_weights: Relation parameters of shape `[num_relations, in_channels_l, out_channels]`\n        :param query_vec: Query embddings of shape `[num_graphs, query_dim]`\n        :return: rel_attn: Relation attention per query of shape `[num_relations, query_dim]` normalized over dimensin 0\n        \"\"\"", "\n", "# This operation is common to all attention types. Scaling is sqrt(d) is taking inspiration from", "\n", "# transformer attention", "\n", "query_attn_feat", "=", "self", ".", "query_attn_weight", "@", "query_vec", ".", "t", "(", ")", "/", "torch", ".", "tensor", "(", "[", "self", ".", "query_dim", "]", ",", "\n", "dtype", "=", "query_vec", ".", "dtype", ",", "\n", "device", "=", "query_vec", ".", "device", ")", ".", "sqrt", "(", ")", "\n", "if", "self", ".", "query_attn_type", "==", "'full'", ":", "\n", "# query_attn_feat.shape = [1, in_channels[0], out_channels, num_graphs]", "\n", "            ", "unnorm_rel_attn", "=", "torch", ".", "sum", "(", "rel_weights", ".", "unsqueeze", "(", "-", "1", ")", "*", "query_attn_feat", ",", "dim", "=", "1", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "", "elif", "self", ".", "query_attn_type", "==", "'dim'", ":", "\n", "# query_attn_feat.shape = [in_channels[0] + out_channels, num_graphs]", "\n", "            ", "rel_feat_l", "=", "torch", ".", "sum", "(", "self", ".", "query_attn_weight_l", "*", "rel_weights", ",", "dim", "=", "1", ")", "\n", "rel_feat_r", "=", "torch", ".", "sum", "(", "rel_weights", "*", "self", ".", "query_attn_weight_r", ",", "dim", "=", "2", ")", "\n", "# rel_feat.shape = [num_relations, in_channels[0] + out_channels]", "\n", "rel_feat", "=", "torch", ".", "cat", "(", "[", "rel_feat_l", ",", "rel_feat_r", "]", ",", "dim", "=", "1", ")", "\n", "unnorm_rel_attn", "=", "rel_feat", "@", "query_attn_feat", "\n", "", "else", ":", "\n", "# query_attn_type == 'sep'", "\n", "# query_attn_feat.shape = [num_relations, num_graphs]", "\n", "            ", "unnorm_rel_attn", "=", "query_attn_feat", "\n", "", "if", "self", ".", "query_attn_activation", "==", "'sigmoid'", ":", "\n", "            ", "rel_attn", "=", "torch", ".", "sigmoid", "(", "unnorm_rel_attn", "+", "self", ".", "query_attn_bias", ")", "\n", "", "elif", "self", ".", "query_attn_activation", "==", "'softmax'", ":", "\n", "            ", "rel_attn", "=", "torch", ".", "softmax", "(", "unnorm_rel_attn", ",", "dim", "=", "0", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "f\"Unsupported activation function: {self.query_attn_activation}\"", ")", "\n", "", "return", "rel_attn", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.rgcn.query_aware_rgcn_layers.QueryAwareRGCNConv.forward": [[182, 271], ["isinstance", "isinstance", "isinstance", "torch.zeros", "torch.arange", "torch.arange.size", "x_r.size", "edge_index.storage.value", "x_r.size", "NotImplementedError", "query_aware_rgcn_layers.QueryAwareRGCNConv.compute_relation_attention", "torch_scatter.scatter_sum", "range", "torch_scatter.scatter_sum.min", "masked_edge_index", "torch_scatter.scatter_sum.unsqueeze", "query_aware_rgcn_layers.QueryAwareRGCNConv.propagate", "weight.view", "query_aware_rgcn_layers.QueryAwareRGCNConv.propagate", "[].view", "[].view"], "methods", ["home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.sample_synthetic_graph.Graph.size", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.sample_synthetic_graph.Graph.size", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.sample_synthetic_graph.Graph.size", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.rgcn.query_aware_rgcn_layers.QueryAwareRGCNConv.compute_relation_attention", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.compgcn.message_passing.MessagePassing.propagate", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.compgcn.message_passing.MessagePassing.propagate"], ["", "def", "forward", "(", "self", ",", "x", ":", "Union", "[", "OptTensor", ",", "Tuple", "[", "OptTensor", ",", "Tensor", "]", "]", ",", "edge_index", ":", "Adj", ",", "edge_type", ":", "OptTensor", ",", "\n", "query_vec", ":", "Tensor", ",", "x_batch", ":", "Tensor", ",", "edge_batch", ":", "Tensor", ")", ":", "\n", "        ", "r\"\"\"\n        Args:\n            x: The input node features. Can be either a :obj:`[num_nodes,\n                in_channels]` node feature matrix, or an optional\n                one-dimensional node index tensor (in which case input features\n                are treated as trainable node embeddings).\n                Furthermore, :obj:`x` can be of type :obj:`tuple` denoting\n                source and destination node features.\n            edge_type: The one-dimensional relation type/index for each edge in\n                :obj:`edge_index`.\n                Should be only :obj:`None` in case :obj:`edge_index` is of type\n                :class:`torch_sparse.tensor.SparseTensor`.\n                (default: :obj:`None`)\n            query_vec: Query embeddings on shape `[num_graphs, query_dim]`\n            x_batch: The result of `follow_batch` which maps every node to it's graph in the batch.\n                Expected shape `[num_nodes]` and values in `range(0, num_graphs)`\n            edge_batch: The result of `follow_batch` which maps every edge to it's graph in the batch.\n                Expected shape `[num_edges]` and values in `range(0, num_graphs)`\n        \"\"\"", "\n", "\n", "# Convert input features to a pair of node features or node indices.", "\n", "x_l", ":", "OptTensor", "=", "None", "\n", "if", "isinstance", "(", "x", ",", "tuple", ")", ":", "\n", "            ", "x_l", "=", "x", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "x_l", "=", "x", "\n", "", "if", "x_l", "is", "None", ":", "\n", "            ", "x_l", "=", "torch", ".", "arange", "(", "self", ".", "in_channels_l", ",", "device", "=", "self", ".", "weight", ".", "device", ")", "\n", "\n", "", "x_r", ":", "Tensor", "=", "x_l", "\n", "if", "isinstance", "(", "x", ",", "tuple", ")", ":", "\n", "            ", "x_r", "=", "x", "[", "1", "]", "\n", "\n", "", "size", "=", "(", "x_l", ".", "size", "(", "0", ")", ",", "x_r", ".", "size", "(", "0", ")", ")", "\n", "\n", "if", "isinstance", "(", "edge_index", ",", "SparseTensor", ")", ":", "\n", "            ", "edge_type", "=", "edge_index", ".", "storage", ".", "value", "(", ")", "\n", "", "assert", "edge_type", "is", "not", "None", "\n", "\n", "# propagate_type: (x: Tensor)", "\n", "out", "=", "torch", ".", "zeros", "(", "x_r", ".", "size", "(", "0", ")", ",", "self", ".", "out_channels", ",", "device", "=", "x_r", ".", "device", ")", "\n", "\n", "weight", "=", "self", ".", "weight", "\n", "if", "self", ".", "num_bases", "is", "not", "None", ":", "# Basis-decomposition =================", "\n", "            ", "weight", "=", "(", "self", ".", "comp", "@", "weight", ".", "view", "(", "self", ".", "num_bases", ",", "-", "1", ")", ")", ".", "view", "(", "\n", "self", ".", "num_relations", ",", "self", ".", "in_channels_l", ",", "self", ".", "out_channels", ")", "\n", "\n", "", "if", "self", ".", "num_blocks", "is", "not", "None", ":", "# Block-diagonal-decomposition =====", "\n", "            ", "raise", "NotImplementedError", "(", "\"Querry aware attention is currently not implemented with \"", "\n", "\"block-diagonal-decomposition\"", ")", "\n", "# if x_l.dtype == torch.long and self.num_blocks is not None:", "\n", "#     raise ValueError('Block-diagonal decomposition not supported '", "\n", "#                      'for non-continuous input features.')", "\n", "#", "\n", "# for i in range(self.num_relations):", "\n", "#     tmp = masked_edge_index(edge_index, edge_type == i)", "\n", "#     h = self.propagate(tmp, x=x_l, size=size)", "\n", "#     h = h.view(-1, weight.size(1), weight.size(2))", "\n", "#     h = torch.einsum('abc,bcd->abd', h, weight[i])", "\n", "#     out += h.contiguous().view(-1, self.out_channels)", "\n", "\n", "", "else", ":", "# No regularization/Basis-decomposition ========================", "\n", "# rel_attn.shape = [num_relations, num_graphs]", "\n", "            ", "rel_attn", "=", "self", ".", "compute_relation_attention", "(", "weight", ",", "query_vec", ")", "\n", "rel_attn_normalizer", "=", "scatter_sum", "(", "rel_attn", "[", "edge_type", ",", "edge_batch", "]", ",", "edge_index", "[", "1", "]", ",", "dim", "=", "0", ",", "\n", "dim_size", "=", "x", ".", "shape", "[", "0", "]", ")", "\n", "if", "rel_attn_normalizer", ".", "min", "(", ")", "==", "0.0", ":", "\n", "                ", "rel_attn_normalizer", "[", "rel_attn_normalizer", "==", "0.0", "]", "=", "1.0", "\n", "\n", "", "for", "i", "in", "range", "(", "self", ".", "num_relations", ")", ":", "\n", "                ", "tmp", "=", "masked_edge_index", "(", "edge_index", ",", "edge_type", "==", "i", ")", "\n", "\n", "if", "x_l", ".", "dtype", "==", "torch", ".", "long", ":", "\n", "                    ", "out", "+=", "self", ".", "propagate", "(", "tmp", ",", "x", "=", "weight", "[", "i", ",", "x_l", "]", ",", "size", "=", "size", ")", "*", "rel_attn", "[", "i", "]", "[", "x_batch", "]", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "", "else", ":", "\n", "                    ", "h", "=", "self", ".", "propagate", "(", "tmp", ",", "x", "=", "x_l", ",", "size", "=", "size", ")", "\n", "out", "=", "out", "+", "(", "h", "@", "weight", "[", "i", "]", ")", "*", "rel_attn", "[", "i", "]", "[", "x_batch", "]", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "", "", "out", "=", "out", "/", "rel_attn_normalizer", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "", "root", "=", "self", ".", "root", "\n", "if", "root", "is", "not", "None", ":", "\n", "            ", "out", "+=", "root", "[", "x_r", "]", "if", "x_r", ".", "dtype", "==", "torch", ".", "long", "else", "x_r", "@", "root", "\n", "\n", "", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "out", "+=", "self", ".", "bias", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.rgcn.query_aware_rgcn_layers.QueryAwareRGCNConv.message": [[272, 274], ["None"], "methods", ["None"], ["", "def", "message", "(", "self", ",", "x_j", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "        ", "return", "x_j", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.rgcn.query_aware_rgcn_layers.QueryAwareRGCNConv.message_and_aggregate": [[275, 278], ["adj_t.set_value.set_value.set_value", "matmul"], "methods", ["None"], ["", "def", "message_and_aggregate", "(", "self", ",", "adj_t", ":", "SparseTensor", ",", "x", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "        ", "adj_t", "=", "adj_t", ".", "set_value", "(", "None", ",", "layout", "=", "None", ")", "\n", "return", "matmul", "(", "adj_t", ",", "x", ",", "reduce", "=", "self", ".", "aggr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.rgcn.query_aware_rgcn_layers.QueryAwareRGCNConv.__repr__": [[279, 284], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'{}({}, {}, num_relations={})'", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "\n", "self", ".", "in_channels", ",", "\n", "self", ".", "out_channels", ",", "\n", "self", ".", "num_relations", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.rgcn.query_aware_rgcn_layers.FastQueryAwareRGCNConv.forward": [[288, 321], ["isinstance", "isinstance", "query_aware_rgcn_layers.FastQueryAwareRGCNConv.propagate", "torch.arange", "torch.arange.size", "x_r.size"], "methods", ["home.repos.pwc.inspect_result.rajarshd_cbr-subg.compgcn.message_passing.MessagePassing.propagate", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.sample_synthetic_graph.Graph.size", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.sample_synthetic_graph.Graph.size"], ["def", "forward", "(", "self", ",", "x", ":", "Union", "[", "OptTensor", ",", "Tuple", "[", "OptTensor", ",", "Tensor", "]", "]", ",", "\n", "edge_index", ":", "Adj", ",", "edge_type", ":", "OptTensor", ",", "query_vec", ":", "Tensor", ",", "x_batch", ":", "Tensor", ",", "edge_batch", ":", "Tensor", ")", ":", "\n", "        ", "\"\"\"\"\"\"", "\n", "self", ".", "fuse", "=", "False", "\n", "assert", "self", ".", "aggr", "in", "[", "'add'", ",", "'sum'", ",", "'mean'", "]", "\n", "\n", "# Convert input features to a pair of node features or node indices.", "\n", "x_l", ":", "OptTensor", "=", "None", "\n", "if", "isinstance", "(", "x", ",", "tuple", ")", ":", "\n", "            ", "x_l", "=", "x", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "x_l", "=", "x", "\n", "", "if", "x_l", "is", "None", ":", "\n", "            ", "x_l", "=", "torch", ".", "arange", "(", "self", ".", "in_channels_l", ",", "device", "=", "self", ".", "weight", ".", "device", ")", "\n", "\n", "", "x_r", ":", "Tensor", "=", "x_l", "\n", "if", "isinstance", "(", "x", ",", "tuple", ")", ":", "\n", "            ", "x_r", "=", "x", "[", "1", "]", "\n", "\n", "", "size", "=", "(", "x_l", ".", "size", "(", "0", ")", ",", "x_r", ".", "size", "(", "0", ")", ")", "\n", "\n", "# propagate_type: (x: Tensor, edge_type: OptTensor)", "\n", "out", "=", "self", ".", "propagate", "(", "edge_index", ",", "x", "=", "x_l", ",", "edge_type", "=", "edge_type", ",", "size", "=", "size", ",", "query_vec", "=", "query_vec", ",", "x_batch", "=", "x_batch", ",", "\n", "edge_batch", "=", "edge_batch", ")", "\n", "\n", "root", "=", "self", ".", "root", "\n", "if", "root", "is", "not", "None", ":", "\n", "            ", "out", "+=", "root", "[", "x_r", "]", "if", "x_r", ".", "dtype", "==", "torch", ".", "long", "else", "x_r", "@", "root", "\n", "\n", "", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "out", "+=", "self", ".", "bias", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.rgcn.query_aware_rgcn_layers.FastQueryAwareRGCNConv.message": [[322, 357], ["NotImplementedError", "query_aware_rgcn_layers.FastQueryAwareRGCNConv.compute_relation_attention", "torch.bmm().squeeze", "torch_scatter.scatter_sum", "rel_attn_normalizer.min", "rel_attn_normalizer.unsqueeze", "weight.view", "torch.bmm", "rel_attn[].view", "weight.view", "weight.size", "x_j.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.rajarshd_cbr-subg.rgcn.query_aware_rgcn_layers.QueryAwareRGCNConv.compute_relation_attention", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.sample_synthetic_graph.Graph.size"], ["", "def", "message", "(", "self", ",", "x_j", ":", "Tensor", ",", "edge_type", ":", "Tensor", ",", "index", ":", "Tensor", ",", "query_vec", ":", "Tensor", ",", "x_batch", ":", "Tensor", ",", "\n", "edge_batch", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "        ", "weight", "=", "self", ".", "weight", "\n", "if", "self", ".", "num_bases", "is", "not", "None", ":", "# Basis-decomposition =================", "\n", "            ", "weight", "=", "(", "self", ".", "comp", "@", "weight", ".", "view", "(", "self", ".", "num_bases", ",", "-", "1", ")", ")", ".", "view", "(", "\n", "self", ".", "num_relations", ",", "self", ".", "in_channels_l", ",", "self", ".", "out_channels", ")", "\n", "\n", "", "if", "self", ".", "num_blocks", "is", "not", "None", ":", "# Block-diagonal-decomposition =======", "\n", "            ", "raise", "NotImplementedError", "(", "\"Querry aware attention is currently not implemented with \"", "\n", "\"block-diagonal-decomposition\"", ")", "\n", "# if x_j.dtype == torch.long:", "\n", "#     raise ValueError('Block-diagonal decomposition not supported '", "\n", "#                      'for non-continuous input features.')", "\n", "#", "\n", "# weight = weight[edge_type].view(-1, weight.size(2), weight.size(3))", "\n", "# x_j = x_j.view(-1, 1, weight.size(1))", "\n", "# return torch.bmm(x_j, weight).view(-1, self.out_channels)", "\n", "\n", "", "else", ":", "# No regularization/Basis-decomposition ========================", "\n", "# rel_attn.shape = [num_relations, num_graphs]", "\n", "            ", "rel_attn", "=", "self", ".", "compute_relation_attention", "(", "weight", ",", "query_vec", ")", "\n", "rel_attn_normalizer", "=", "scatter_sum", "(", "rel_attn", "[", "edge_type", ",", "edge_batch", "]", ",", "index", ",", "dim", "=", "0", ",", "\n", "dim_size", "=", "x_batch", ".", "shape", "[", "0", "]", ")", "[", "index", "]", "\n", "if", "rel_attn_normalizer", ".", "min", "(", ")", "==", "0.0", ":", "\n", "                ", "rel_attn_normalizer", "[", "rel_attn_normalizer", "==", "0.0", "]", "=", "1.0", "\n", "\n", "", "if", "x_j", ".", "dtype", "==", "torch", ".", "long", ":", "\n", "                ", "weight_index", "=", "edge_type", "*", "weight", ".", "size", "(", "1", ")", "+", "index", "\n", "return", "weight", ".", "view", "(", "-", "1", ",", "self", ".", "out_channels", ")", "[", "weight_index", "]", "\n", "\n", "", "assert", "index", ".", "shape", "==", "edge_type", ".", "shape", "\n", "\n", "base_msgs", "=", "torch", ".", "bmm", "(", "x_j", ".", "unsqueeze", "(", "-", "2", ")", ",", "weight", "[", "edge_type", "]", ")", ".", "squeeze", "(", "-", "2", ")", "\n", "base_msgs", "=", "base_msgs", "*", "rel_attn", "[", "edge_type", ",", "x_batch", "[", "index", "]", "]", ".", "view", "(", "[", "-", "1", ",", "1", "]", ")", "/", "rel_attn_normalizer", ".", "unsqueeze", "(", "1", ")", "\n", "return", "base_msgs", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.rgcn.query_aware_rgcn_layers.FastQueryAwareRGCNConv.aggregate": [[358, 376], ["scatter", "torch.unique", "F.one_hot().to", "torch.gather", "scatter", "inv_unique_edges.view", "torch.gather.clamp_", "F.one_hot", "len"], "methods", ["None"], ["", "", "def", "aggregate", "(", "self", ",", "inputs", ":", "Tensor", ",", "edge_type", ":", "Tensor", ",", "index", ":", "Tensor", ",", "\n", "dim_size", ":", "Optional", "[", "int", "]", "=", "None", ")", "->", "Tensor", ":", "\n", "\n", "# Compute normalization in separation for each `edge_type`.", "\n", "        ", "if", "self", ".", "aggr", "==", "'mean'", ":", "\n", "# norm = F.one_hot(edge_type, self.num_relations).to(torch.float)", "\n", "# norm = scatter(norm, index, dim=0, dim_size=dim_size)[index]", "\n", "# norm = torch.gather(norm, 1, edge_type.view(-1, 1))", "\n", "# norm = 1. / norm.clamp_(1.)", "\n", "# inputs = norm * inputs", "\n", "            ", "unique_edges", ",", "inv_unique_edges", "=", "torch", ".", "unique", "(", "edge_type", ",", "return_inverse", "=", "True", ")", "\n", "norm", "=", "F", ".", "one_hot", "(", "inv_unique_edges", ",", "len", "(", "unique_edges", ")", ")", ".", "to", "(", "torch", ".", "float", ")", "\n", "norm", "=", "scatter", "(", "norm", ",", "index", ",", "dim", "=", "0", ",", "dim_size", "=", "dim_size", ")", "[", "index", "]", "\n", "norm", "=", "torch", ".", "gather", "(", "norm", ",", "1", ",", "inv_unique_edges", ".", "view", "(", "-", "1", ",", "1", ")", ")", "\n", "norm", "=", "1.", "/", "norm", ".", "clamp_", "(", "1.", ")", "\n", "inputs", "=", "norm", "*", "inputs", "\n", "\n", "", "return", "scatter", "(", "inputs", ",", "index", ",", "dim", "=", "self", ".", "node_dim", ",", "dim_size", "=", "dim_size", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.rgcn.fast_rgcn_layer.LowMemFastRGCNConv.aggregate": [[11, 29], ["torch_scatter.scatter", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.one_hot().to", "torch.one_hot().to", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch_scatter.scatter", "inv_unique_edges.view", "torch.gather.clamp_", "torch.gather.clamp_", "torch.one_hot", "torch.one_hot", "len"], "methods", ["None"], ["    ", "def", "aggregate", "(", "self", ",", "inputs", ":", "Tensor", ",", "edge_type", ":", "Tensor", ",", "index", ":", "Tensor", ",", "\n", "dim_size", ":", "Optional", "[", "int", "]", "=", "None", ")", "->", "Tensor", ":", "\n", "\n", "# Compute normalization in separation for each `edge_type`.", "\n", "        ", "if", "self", ".", "aggr", "==", "'mean'", ":", "\n", "# norm = F.one_hot(edge_type, self.num_relations).to(torch.float)", "\n", "# norm = scatter(norm, index, dim=0, dim_size=dim_size)[index]", "\n", "# norm = torch.gather(norm, 1, edge_type.view(-1, 1))", "\n", "# norm = 1. / norm.clamp_(1.)", "\n", "# inputs = norm * inputs", "\n", "            ", "unique_edges", ",", "inv_unique_edges", "=", "torch", ".", "unique", "(", "edge_type", ",", "return_inverse", "=", "True", ")", "\n", "norm", "=", "F", ".", "one_hot", "(", "inv_unique_edges", ",", "len", "(", "unique_edges", ")", ")", ".", "to", "(", "torch", ".", "float", ")", "\n", "norm", "=", "scatter", "(", "norm", ",", "index", ",", "dim", "=", "0", ",", "dim_size", "=", "dim_size", ")", "[", "index", "]", "\n", "norm", "=", "torch", ".", "gather", "(", "norm", ",", "1", ",", "inv_unique_edges", ".", "view", "(", "-", "1", ",", "1", ")", ")", "\n", "norm", "=", "1.", "/", "norm", ".", "clamp_", "(", "1.", ")", "\n", "inputs", "=", "norm", "*", "inputs", "\n", "\n", "", "return", "scatter", "(", "inputs", ",", "index", ",", "dim", "=", "self", ".", "node_dim", ",", "dim_size", "=", "dim_size", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.rgcn.rgcn_model.RGCN.__init__": [[17, 69], ["super().__init__", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "range", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "base_feat_mat.coalesce.coalesce.coalesce", "torch.nn.Embedding.from_pretrained", "torch.nn.Embedding.from_pretrained", "torch.nn.Embedding.from_pretrained", "torch.nn.Embedding.from_pretrained", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "src.models.rgcn.fast_rgcn_layer.LowMemFastRGCNConv", "torch_geometric.nn.conv.RGCNConv", "src.models.scoring_fn.TransEScorer", "src.models.scoring_fn.TransEScorer", "rgcn_model.RGCN.conv_layers.append", "rgcn_model.RGCN.conv_layers.append", "ValueError", "ValueError", "src.models.rgcn.fast_rgcn_layer.LowMemFastRGCNConv", "torch_geometric.nn.conv.RGCNConv"], "methods", ["home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.sample_synthetic_graph.Graph.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model_params", ",", "base_feat_mat", "=", "None", ")", ":", "\n", "        ", "super", "(", "RGCN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model_params", "=", "model_params", "\n", "self", ".", "dropout", "=", "torch", ".", "nn", ".", "Dropout", "(", "p", "=", "model_params", ".", "drop_rgcn", ")", "\n", "if", "base_feat_mat", "is", "None", ":", "\n", "            ", "self", ".", "embed", "=", "torch", ".", "nn", ".", "Embedding", "(", "self", ".", "model_params", ".", "num_entities", ",", "self", ".", "model_params", ".", "dense_node_feat_dim", ")", "\n", "", "else", ":", "\n", "            ", "base_feat_mat", "=", "base_feat_mat", ".", "coalesce", "(", ")", "\n", "self", ".", "embed", "=", "torch", ".", "nn", ".", "Embedding", ".", "from_pretrained", "(", "base_feat_mat", ",", "freeze", "=", "True", ",", "sparse", "=", "True", ")", "\n", "", "if", "model_params", ".", "transform_input", ":", "\n", "# base_feat_mat already has additional distance feature dimensions", "\n", "            ", "additional_dims", "=", "self", ".", "model_params", ".", "n_additional_feat", "if", "base_feat_mat", "is", "None", "else", "0", "\n", "self", ".", "input_lin", "=", "torch", ".", "nn", ".", "Linear", "(", "self", ".", "embed", ".", "embedding_dim", "+", "additional_dims", ",", "\n", "model_params", ".", "gcn_dim", ",", "bias", "=", "True", ")", "\n", "n_input_in_channels", "=", "model_params", ".", "gcn_dim", "\n", "", "else", ":", "\n", "            ", "additional_dims", "=", "self", ".", "model_params", ".", "n_additional_feat", "if", "base_feat_mat", "is", "None", "else", "0", "\n", "n_input_in_channels", "=", "self", ".", "embed", ".", "embedding_dim", "+", "additional_dims", "\n", "", "if", "self", ".", "model_params", ".", "num_gcn_layers", "==", "0", ":", "# zero layers, no params required", "\n", "            ", "if", "model_params", ".", "use_scoring_head", "is", "not", "None", "and", "model_params", ".", "use_scoring_head", "==", "'transe'", ":", "\n", "                ", "self", ".", "scoring_head", "=", "TransEScorer", "(", "model_params", ".", "num_relations", ",", "n_input_in_channels", ")", "\n", "", "elif", "model_params", ".", "use_scoring_head", "is", "not", "None", ":", "\n", "                ", "raise", "ValueError", "(", "f\"Unsupported scoring function: {model_params.use_scoring_head}\"", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "scoring_head", "=", "None", "\n", "", "self", ".", "input_conv", "=", "None", "\n", "self", ".", "conv_layers", "=", "None", "\n", "return", "\n", "", "if", "model_params", ".", "use_fast_rgcn", ":", "\n", "            ", "self", ".", "input_conv", "=", "LowMemFastRGCNConv", "(", "in_channels", "=", "n_input_in_channels", ",", "out_channels", "=", "model_params", ".", "gcn_dim", ",", "\n", "num_relations", "=", "model_params", ".", "num_relations", ",", "\n", "num_bases", "=", "model_params", ".", "num_bases", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "input_conv", "=", "RGCNConv", "(", "in_channels", "=", "n_input_in_channels", ",", "out_channels", "=", "model_params", ".", "gcn_dim", ",", "\n", "num_relations", "=", "model_params", ".", "num_relations", ",", "num_bases", "=", "model_params", ".", "num_bases", ")", "\n", "", "self", ".", "conv_layers", "=", "torch", ".", "nn", ".", "ModuleList", "(", ")", "\n", "for", "_", "in", "range", "(", "model_params", ".", "num_gcn_layers", "-", "1", ")", ":", "\n", "            ", "if", "model_params", ".", "use_fast_rgcn", ":", "\n", "                ", "self", ".", "conv_layers", ".", "append", "(", "\n", "LowMemFastRGCNConv", "(", "in_channels", "=", "model_params", ".", "gcn_dim", ",", "out_channels", "=", "model_params", ".", "gcn_dim", ",", "\n", "num_relations", "=", "model_params", ".", "num_relations", ",", "num_bases", "=", "model_params", ".", "num_bases", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "conv_layers", ".", "append", "(", "\n", "RGCNConv", "(", "in_channels", "=", "model_params", ".", "gcn_dim", ",", "out_channels", "=", "model_params", ".", "gcn_dim", ",", "\n", "num_relations", "=", "model_params", ".", "num_relations", ",", "num_bases", "=", "model_params", ".", "num_bases", ")", ")", "\n", "\n", "", "", "if", "model_params", ".", "use_scoring_head", "is", "not", "None", "and", "model_params", ".", "use_scoring_head", "==", "'transe'", ":", "\n", "            ", "self", ".", "scoring_head", "=", "TransEScorer", "(", "model_params", ".", "num_relations", ",", "model_params", ".", "gcn_dim", ")", "\n", "", "elif", "model_params", ".", "use_scoring_head", "is", "not", "None", ":", "\n", "            ", "raise", "ValueError", "(", "f\"Unsupported scoring function: {model_params.use_scoring_head}\"", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "scoring_head", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.rgcn.rgcn_model.RGCN.forward": [[70, 115], ["rgcn_model.RGCN.input_conv", "rgcn_model.RGCN.dropout", "enumerate", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "rgcn_model.RGCN.embed", "rgcn_model.RGCN.input_lin", "torch.relu", "torch.relu", "layer", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.sparse_coo_tensor", "torch.sparse_coo_tensor", "torch.sparse_coo_tensor", "torch.sparse_coo_tensor", "torch.sparse_coo_tensor", "torch.sparse_coo_tensor", "torch.sparse_coo_tensor", "torch.sparse_coo_tensor", "torch.vstack", "torch.vstack", "torch.vstack", "torch.vstack", "torch.sparse_coo_tensor", "torch.sparse_coo_tensor", "torch.sparse_coo_tensor", "torch.sparse_coo_tensor", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "rgcn_model.RGCN.dropout", "rgcn_model.RGCN.dropout", "torch.vstack", "torch.vstack", "torch.vstack", "torch.vstack", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.vstack", "torch.vstack", "torch.vstack", "torch.vstack", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "len", "torch.relu", "torch.relu", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "edge_index", ",", "edge_type", ",", "dist_feats", "=", "None", ",", "*", "args", ")", ":", "\n", "# pass x through embedding table", "\n", "        ", "is_odd", "=", "False", "\n", "if", "self", ".", "model_params", ".", "use_sparse_feats", ":", "\n", "            ", "if", "x", ".", "shape", "[", "0", "]", "%", "2", "==", "1", ":", "\n", "                ", "y", "=", "torch", ".", "cat", "(", "[", "x", ",", "torch", ".", "zeros", "(", "1", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "]", ")", "\n", "x_inp", "=", "torch", ".", "sparse_coo_tensor", "(", "torch", ".", "vstack", "(", "[", "torch", ".", "arange", "(", "y", ".", "shape", "[", "0", "]", ",", "device", "=", "x", ".", "device", ")", ",", "y", "]", ")", ",", "\n", "torch", ".", "cat", "(", "[", "torch", ".", "ones_like", "(", "x", ")", ",", "torch", ".", "zeros", "(", "1", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "]", ")", ",", "\n", "size", "=", "(", "y", ".", "shape", "[", "0", "]", ",", "self", ".", "embed", ".", "num_embeddings", ")", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "is_odd", "=", "True", "\n", "", "else", ":", "\n", "                ", "x_inp", "=", "torch", ".", "sparse_coo_tensor", "(", "torch", ".", "vstack", "(", "[", "torch", ".", "arange", "(", "x", ".", "shape", "[", "0", "]", ",", "device", "=", "x", ".", "device", ")", ",", "x", "]", ")", ",", "torch", ".", "ones_like", "(", "x", ")", ",", "\n", "size", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "self", ".", "embed", ".", "num_embeddings", ")", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "", "x", "=", "torch", ".", "sparse", ".", "mm", "(", "x_inp", ",", "self", ".", "embed", ".", "weight", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "embed", "(", "x", ")", "\n", "", "if", "dist_feats", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "model_params", ".", "use_sparse_feats", ":", "\n", "# make dist_feats sparse matrix", "\n", "                ", "if", "is_odd", ":", "\n", "                    ", "dist_feats", "=", "torch", ".", "cat", "(", "[", "dist_feats", ",", "torch", ".", "zeros", "(", "1", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "]", ")", "\n", "", "sparse_ind", "=", "torch", ".", "vstack", "(", "\n", "[", "torch", ".", "arange", "(", "x", ".", "shape", "[", "0", "]", ",", "device", "=", "x", ".", "device", ")", ",", "self", ".", "model_params", ".", "n_base_feat", "+", "dist_feats", "]", ")", "\n", "dist_feats", "=", "torch", ".", "sparse_coo_tensor", "(", "sparse_ind", ",", "torch", ".", "ones", "(", "x", ".", "shape", "[", "0", "]", ")", ",", "\n", "size", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "self", ".", "model_params", ".", "node_feat_dim", ")", ",", "device", "=", "x", ".", "device", ")", "\n", "x", "=", "x", "+", "dist_feats", "\n", "", "else", ":", "\n", "                ", "dist_feats_mat", "=", "torch", ".", "zeros", "(", "x", ".", "shape", "[", "0", "]", ",", "self", ".", "model_params", ".", "max_dist", "+", "1", ",", "device", "=", "x", ".", "device", ")", "\n", "dist_feats_mat", "[", ":", ",", "dist_feats", "]", "=", "1", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "dist_feats_mat", "]", ",", "dim", "=", "1", ")", "\n", "", "", "if", "self", ".", "model_params", ".", "transform_input", ":", "\n", "# x = torch.sparse.mm(x, self.input_lin.weight.T) + self.input_lin.bias", "\n", "            ", "x", "=", "self", ".", "input_lin", "(", "x", ")", "\n", "x", "=", "x", "[", ":", "-", "1", "]", "if", "is_odd", "and", "self", ".", "model_params", ".", "use_sparse_feats", "else", "x", "\n", "", "if", "self", ".", "input_conv", "is", "None", ":", "# zero layers, return input", "\n", "            ", "return", "x", "\n", "", "out", "=", "self", ".", "input_conv", "(", "x", ",", "edge_index", ",", "edge_type", ")", "\n", "out", "=", "self", ".", "dropout", "(", "F", ".", "relu", "(", "out", ")", ")", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "conv_layers", ")", ":", "\n", "            ", "out", "=", "layer", "(", "out", ",", "edge_index", ",", "edge_type", ")", "\n", "if", "i", "!=", "(", "len", "(", "self", ".", "conv_layers", ")", "-", "1", ")", ":", "\n", "                ", "out", "=", "self", ".", "dropout", "(", "F", ".", "relu", "(", "out", ")", ")", "\n", "", "else", ":", "\n", "                ", "out", "=", "self", ".", "dropout", "(", "out", ")", "\n", "", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.rgcn.rgcn_model.RGCN.run_scoring_head": [[116, 119], ["rgcn_model.RGCN.scoring_head"], "methods", ["None"], ["", "def", "run_scoring_head", "(", "self", ",", "head_embed", ",", "rel_ids", ")", ":", "\n", "        ", "assert", "self", ".", "scoring_head", "is", "not", "None", "\n", "return", "self", ".", "scoring_head", "(", "head_embed", ",", "rel_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.rgcn.rgcn_model.QueryAwareRGCN.__init__": [[121, 179], ["super().__init__", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "range", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "base_feat_mat.coalesce.coalesce.coalesce", "torch.nn.Embedding.from_pretrained", "torch.nn.Embedding.from_pretrained", "torch.nn.Embedding.from_pretrained", "torch.nn.Embedding.from_pretrained", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "src.models.rgcn.query_aware_rgcn_layers.FastQueryAwareRGCNConv", "src.models.rgcn.query_aware_rgcn_layers.QueryAwareRGCNConv", "rgcn_model.QueryAwareRGCN.conv_layers.append", "rgcn_model.QueryAwareRGCN.conv_layers.append", "src.models.rgcn.query_aware_rgcn_layers.FastQueryAwareRGCNConv", "src.models.rgcn.query_aware_rgcn_layers.QueryAwareRGCNConv"], "methods", ["home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.sample_synthetic_graph.Graph.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model_params", ",", "base_feat_mat", "=", "None", ")", ":", "\n", "        ", "super", "(", "QueryAwareRGCN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model_params", "=", "model_params", "\n", "if", "base_feat_mat", "is", "None", ":", "\n", "            ", "self", ".", "embed", "=", "torch", ".", "nn", ".", "Embedding", "(", "self", ".", "model_params", ".", "num_entities", ",", "self", ".", "model_params", ".", "dense_node_feat_dim", ")", "\n", "", "else", ":", "\n", "            ", "base_feat_mat", "=", "base_feat_mat", ".", "coalesce", "(", ")", "\n", "self", ".", "embed", "=", "torch", ".", "nn", ".", "Embedding", ".", "from_pretrained", "(", "base_feat_mat", ",", "freeze", "=", "True", ",", "sparse", "=", "True", ")", "\n", "", "if", "model_params", ".", "transform_input", ":", "\n", "# base_feat_mat already has additional distance feature dimensions", "\n", "            ", "additional_dims", "=", "self", ".", "model_params", ".", "n_additional_feat", "if", "base_feat_mat", "is", "None", "else", "0", "\n", "self", ".", "input_lin", "=", "torch", ".", "nn", ".", "Linear", "(", "self", ".", "embed", ".", "embedding_dim", "+", "additional_dims", ",", "\n", "model_params", ".", "gcn_dim", ",", "bias", "=", "True", ")", "\n", "n_input_in_channels", "=", "model_params", ".", "gcn_dim", "\n", "", "else", ":", "\n", "            ", "additional_dims", "=", "self", ".", "model_params", ".", "n_additional_feat", "if", "base_feat_mat", "is", "None", "else", "0", "\n", "n_input_in_channels", "=", "self", ".", "embed", ".", "embedding_dim", "+", "additional_dims", "\n", "", "if", "self", ".", "model_params", ".", "num_gcn_layers", "==", "0", ":", "# zero layers, no params required", "\n", "            ", "self", ".", "input_conv", "=", "None", "\n", "self", ".", "conv_layers", "=", "None", "\n", "return", "\n", "", "if", "model_params", ".", "transform_query", ":", "\n", "            ", "self", ".", "query_proj_lin", "=", "torch", ".", "nn", ".", "Linear", "(", "model_params", ".", "query_dim", ",", "model_params", ".", "query_proj_dim", ",", "bias", "=", "True", ")", "\n", "query_dim", "=", "model_params", ".", "query_proj_dim", "\n", "", "else", ":", "\n", "            ", "query_dim", "=", "model_params", ".", "query_dim", "\n", "", "if", "model_params", ".", "use_fast_rgcn", ":", "\n", "            ", "self", ".", "input_conv", "=", "FastQueryAwareRGCNConv", "(", "in_channels", "=", "n_input_in_channels", ",", "out_channels", "=", "model_params", ".", "gcn_dim", ",", "\n", "num_relations", "=", "model_params", ".", "num_relations", ",", "\n", "query_dim", "=", "query_dim", ",", "\n", "query_attn_type", "=", "model_params", ".", "query_attn_type", ",", "\n", "query_attn_activation", "=", "model_params", ".", "query_attn_activation", ",", "\n", "num_bases", "=", "model_params", ".", "num_bases", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "input_conv", "=", "QueryAwareRGCNConv", "(", "in_channels", "=", "n_input_in_channels", ",", "out_channels", "=", "model_params", ".", "gcn_dim", ",", "\n", "num_relations", "=", "model_params", ".", "num_relations", ",", "\n", "query_dim", "=", "query_dim", ",", "\n", "query_attn_type", "=", "model_params", ".", "query_attn_type", ",", "\n", "query_attn_activation", "=", "model_params", ".", "query_attn_activation", ",", "\n", "num_bases", "=", "model_params", ".", "num_bases", ")", "\n", "", "self", ".", "conv_layers", "=", "torch", ".", "nn", ".", "ModuleList", "(", ")", "\n", "for", "_", "in", "range", "(", "model_params", ".", "num_gcn_layers", "-", "1", ")", ":", "\n", "            ", "if", "model_params", ".", "use_fast_rgcn", ":", "\n", "                ", "self", ".", "conv_layers", ".", "append", "(", "\n", "FastQueryAwareRGCNConv", "(", "in_channels", "=", "model_params", ".", "gcn_dim", ",", "out_channels", "=", "model_params", ".", "gcn_dim", ",", "\n", "num_relations", "=", "model_params", ".", "num_relations", ",", "\n", "query_dim", "=", "query_dim", ",", "\n", "query_attn_type", "=", "model_params", ".", "query_attn_type", ",", "\n", "query_attn_activation", "=", "model_params", ".", "query_attn_activation", ",", "\n", "num_bases", "=", "model_params", ".", "num_bases", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "conv_layers", ".", "append", "(", "\n", "QueryAwareRGCNConv", "(", "in_channels", "=", "model_params", ".", "gcn_dim", ",", "out_channels", "=", "model_params", ".", "gcn_dim", ",", "\n", "num_relations", "=", "model_params", ".", "num_relations", ",", "\n", "query_dim", "=", "query_dim", ",", "\n", "query_attn_type", "=", "model_params", ".", "query_attn_type", ",", "\n", "query_attn_activation", "=", "model_params", ".", "query_attn_activation", ",", "\n", "num_bases", "=", "model_params", ".", "num_bases", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.rgcn.rgcn_model.QueryAwareRGCN.forward": [[180, 230], ["rgcn_model.QueryAwareRGCN.input_conv", "torch.relu", "torch.relu", "enumerate", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "rgcn_model.QueryAwareRGCN.embed", "rgcn_model.QueryAwareRGCN.input_lin", "rgcn_model.QueryAwareRGCN.query_proj_lin", "layer", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.sparse_coo_tensor", "torch.sparse_coo_tensor", "torch.sparse_coo_tensor", "torch.sparse_coo_tensor", "torch.sparse_coo_tensor", "torch.sparse_coo_tensor", "torch.sparse_coo_tensor", "torch.sparse_coo_tensor", "torch.vstack", "torch.vstack", "torch.vstack", "torch.vstack", "torch.sparse_coo_tensor", "torch.sparse_coo_tensor", "torch.sparse_coo_tensor", "torch.sparse_coo_tensor", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "x.to_dense.to_dense.to_dense", "torch.relu", "torch.relu", "torch.vstack", "torch.vstack", "torch.vstack", "torch.vstack", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.vstack", "torch.vstack", "torch.vstack", "torch.vstack", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "len", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ",", "edge_index", ",", "edge_type", ",", "query_emb", ",", "x_batch", ",", "edge_batch", ",", "dist_feats", "=", "None", ",", "*", "args", ")", ":", "\n", "# pass x through embedding table", "\n", "        ", "is_odd", "=", "False", "\n", "if", "self", ".", "model_params", ".", "use_sparse_feats", ":", "\n", "            ", "if", "x", ".", "shape", "[", "0", "]", "%", "2", "==", "1", ":", "\n", "                ", "y", "=", "torch", ".", "cat", "(", "[", "x", ",", "torch", ".", "zeros", "(", "1", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "]", ")", "\n", "x_inp", "=", "torch", ".", "sparse_coo_tensor", "(", "torch", ".", "vstack", "(", "[", "torch", ".", "arange", "(", "y", ".", "shape", "[", "0", "]", ",", "device", "=", "x", ".", "device", ")", ",", "y", "]", ")", ",", "\n", "torch", ".", "cat", "(", "[", "torch", ".", "ones_like", "(", "x", ")", ",", "\n", "torch", ".", "zeros", "(", "1", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "]", ")", ",", "\n", "size", "=", "(", "y", ".", "shape", "[", "0", "]", ",", "self", ".", "embed", ".", "num_embeddings", ")", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "is_odd", "=", "True", "\n", "", "else", ":", "\n", "                ", "x_inp", "=", "torch", ".", "sparse_coo_tensor", "(", "torch", ".", "vstack", "(", "[", "torch", ".", "arange", "(", "x", ".", "shape", "[", "0", "]", ",", "device", "=", "x", ".", "device", ")", ",", "x", "]", ")", ",", "\n", "torch", ".", "ones_like", "(", "x", ")", ",", "\n", "size", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "self", ".", "embed", ".", "num_embeddings", ")", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "", "x", "=", "torch", ".", "sparse", ".", "mm", "(", "x_inp", ",", "self", ".", "embed", ".", "weight", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "embed", "(", "x", ")", "\n", "", "if", "dist_feats", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "model_params", ".", "use_sparse_feats", ":", "\n", "# make dist_feats sparse matrix", "\n", "                ", "if", "is_odd", ":", "\n", "                    ", "dist_feats", "=", "torch", ".", "cat", "(", "[", "dist_feats", ",", "torch", ".", "zeros", "(", "1", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "]", ")", "\n", "", "sparse_ind", "=", "torch", ".", "vstack", "(", "\n", "[", "torch", ".", "arange", "(", "x", ".", "shape", "[", "0", "]", ",", "device", "=", "x", ".", "device", ")", ",", "self", ".", "model_params", ".", "n_base_feat", "+", "dist_feats", "]", ")", "\n", "dist_feats", "=", "torch", ".", "sparse_coo_tensor", "(", "sparse_ind", ",", "torch", ".", "ones", "(", "x", ".", "shape", "[", "0", "]", ")", ",", "\n", "size", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "self", ".", "model_params", ".", "node_feat_dim", ")", ",", "\n", "device", "=", "x", ".", "device", ")", "\n", "x", "=", "x", "+", "dist_feats", "\n", "", "else", ":", "\n", "                ", "dist_feats_mat", "=", "torch", ".", "zeros", "(", "x", ".", "shape", "[", "0", "]", ",", "self", ".", "model_params", ".", "max_dist", "+", "1", ",", "device", "=", "x", ".", "device", ")", "\n", "dist_feats_mat", "[", ":", ",", "dist_feats", "]", "=", "1", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "dist_feats_mat", "]", ",", "dim", "=", "1", ")", "\n", "", "", "if", "self", ".", "model_params", ".", "transform_input", ":", "\n", "            ", "x", "=", "self", ".", "input_lin", "(", "x", ")", "\n", "x", "=", "x", "[", ":", "-", "1", "]", "if", "is_odd", "and", "self", ".", "model_params", ".", "use_sparse_feats", "else", "x", "\n", "", "elif", "x", ".", "is_sparse", ":", "\n", "            ", "x", "=", "x", ".", "to_dense", "(", ")", "\n", "x", "=", "x", "[", ":", "-", "1", "]", "if", "is_odd", "and", "self", ".", "model_params", ".", "use_sparse_feats", "else", "x", "\n", "", "if", "self", ".", "input_conv", "is", "None", ":", "# zero layers, return input", "\n", "            ", "return", "x", "\n", "", "if", "self", ".", "model_params", ".", "transform_query", ":", "\n", "            ", "query_emb", "=", "self", ".", "query_proj_lin", "(", "query_emb", ")", "\n", "", "out", "=", "self", ".", "input_conv", "(", "x", ",", "edge_index", ",", "edge_type", ",", "query_emb", ",", "x_batch", ",", "edge_batch", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "conv_layers", ")", ":", "\n", "            ", "out", "=", "layer", "(", "out", ",", "edge_index", ",", "edge_type", ",", "query_emb", ",", "x_batch", ",", "edge_batch", ")", "\n", "if", "i", "!=", "(", "len", "(", "self", ".", "conv_layers", ")", "-", "1", ")", ":", "\n", "                ", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "", "", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.adaptive_subgraph_collection.create_input_with_cbr_subgraph.read_cbr_subgraphs": [[10, 38], ["os.path.exists", "os.path.exists", "os.path.exists", "tqdm.tqdm", "print", "enumerate", "len", "len", "open", "cbr_subgraph.update", "open", "cbr_subgraph.update", "open", "cbr_subgraph.update", "cbr_subgraph.items", "e1.endswith", "e2.endswith", "new_triples.append", "len", "len", "pickle.load", "pickle.load", "pickle.load"], "function", ["home.repos.pwc.inspect_result.rajarshd_cbr-subg.compgcn.message_passing.MessagePassing.update", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.compgcn.message_passing.MessagePassing.update", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.compgcn.message_passing.MessagePassing.update"], ["def", "read_cbr_subgraphs", "(", "subgraph_train_file", ",", "subgraph_dev_file", "=", "None", ",", "subgraph_test_file", "=", "None", ")", ":", "\n", "    ", "cbr_subgraph", "=", "{", "}", "\n", "if", "os", ".", "path", ".", "exists", "(", "subgraph_train_file", ")", ":", "\n", "        ", "with", "open", "(", "subgraph_train_file", ",", "\"rb\"", ")", "as", "fin", ":", "\n", "            ", "cbr_subgraph", ".", "update", "(", "pickle", ".", "load", "(", "fin", ")", ")", "\n", "", "", "if", "os", ".", "path", ".", "exists", "(", "subgraph_dev_file", ")", ":", "\n", "        ", "with", "open", "(", "subgraph_dev_file", ",", "\"rb\"", ")", "as", "fin", ":", "\n", "            ", "cbr_subgraph", ".", "update", "(", "pickle", ".", "load", "(", "fin", ")", ")", "\n", "", "", "if", "os", ".", "path", ".", "exists", "(", "subgraph_test_file", ")", ":", "\n", "        ", "with", "open", "(", "subgraph_test_file", ",", "\"rb\"", ")", "as", "fin", ":", "\n", "            ", "cbr_subgraph", ".", "update", "(", "pickle", ".", "load", "(", "fin", ")", ")", "\n", "", "", "new_subgraphs", "=", "{", "}", "\n", "replace_ctr", "=", "0", "\n", "for", "ctr", ",", "(", "qid", ",", "triples", ")", "in", "tqdm", "(", "enumerate", "(", "cbr_subgraph", ".", "items", "(", ")", ")", ")", ":", "\n", "        ", "new_triples", "=", "[", "]", "\n", "for", "(", "e1", ",", "r", ",", "e2", ")", "in", "triples", ":", "\n", "            ", "if", "e1", ".", "endswith", "(", "'-08:00'", ")", ":", "\n", "                ", "e1", "=", "e1", "[", ":", "-", "6", "]", "\n", "replace_ctr", "+=", "1", "\n", "", "if", "e2", ".", "endswith", "(", "'-08:00'", ")", ":", "\n", "                ", "e2", "=", "e2", "[", ":", "-", "6", "]", "\n", "replace_ctr", "+=", "1", "\n", "", "new_triples", ".", "append", "(", "(", "e1", ",", "r", ",", "e2", ")", ")", "\n", "", "assert", "len", "(", "new_triples", ")", "==", "len", "(", "triples", ")", "\n", "new_subgraphs", "[", "qid", "]", "=", "new_triples", "\n", "", "print", "(", "replace_ctr", ")", "\n", "assert", "len", "(", "new_subgraphs", ")", "==", "len", "(", "cbr_subgraph", ")", "\n", "return", "new_subgraphs", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.adaptive_subgraph_collection.create_input_with_cbr_subgraph.create_new_vocab": [[40, 74], ["tqdm.tqdm", "qid2answers.items", "enumerate", "enumerate", "os.path.join", "os.path.join", "print", "set", "set", "cbr_subgraph.items", "open", "range", "open", "range", "all_entities.add", "all_entities.add", "all_relations.add", "all_entities.add", "len", "fout.write", "len", "fout.write"], "function", ["None"], ["", "def", "create_new_vocab", "(", "args", ",", "cbr_subgraph", ",", "qid2answers", ",", "output_dir", ")", ":", "\n", "    ", "all_entities", ",", "all_relations", "=", "set", "(", ")", ",", "set", "(", ")", "\n", "for", "qid", ",", "subgraph", "in", "tqdm", "(", "cbr_subgraph", ".", "items", "(", ")", ")", ":", "\n", "        ", "for", "(", "e1", ",", "r", ",", "e2", ")", "in", "subgraph", ":", "\n", "            ", "all_entities", ".", "add", "(", "e1", ")", "\n", "all_entities", ".", "add", "(", "e2", ")", "\n", "all_relations", ".", "add", "(", "r", ")", "\n", "# add the answers to this list as well, in case the subgraph dont cover answers", "\n", "", "", "for", "_", ",", "answers", "in", "qid2answers", ".", "items", "(", ")", ":", "\n", "        ", "for", "ans", "in", "answers", ":", "\n", "            ", "all_entities", ".", "add", "(", "ans", ")", "\n", "", "", "entity_vocab", ",", "rev_entity_vocab", ",", "rel_vocab", ",", "rev_rel_vocab", "=", "{", "}", ",", "{", "}", ",", "{", "}", ",", "{", "}", "\n", "\n", "for", "e_ctr", ",", "e", "in", "enumerate", "(", "all_entities", ")", ":", "\n", "        ", "entity_vocab", "[", "e", "]", "=", "e_ctr", "\n", "rev_entity_vocab", "[", "e_ctr", "]", "=", "e", "\n", "", "for", "r_ctr", ",", "r", "in", "enumerate", "(", "all_relations", ")", ":", "\n", "        ", "rel_vocab", "[", "r", "]", "=", "r_ctr", "\n", "rev_rel_vocab", "[", "r_ctr", "]", "=", "r", "\n", "\n", "# write vocab", "\n", "", "new_ent_vocab_file", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "\n", "\"entities_roberta-base_mean_pool_masked_cbr_subgraph_k={}.txt\"", ".", "format", "(", "args", ".", "k", ")", ")", "\n", "new_rel_vocab_file", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "\n", "\"relations_roberta-base_mean_pool_masked_cbr_subgraph_k={}.txt\"", ".", "format", "(", "args", ".", "k", ")", ")", "\n", "print", "(", "\"Writing new vocab files: {}, {}\"", ".", "format", "(", "new_ent_vocab_file", ",", "new_rel_vocab_file", ")", ")", "\n", "with", "open", "(", "new_ent_vocab_file", ",", "\"w\"", ")", "as", "fout", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "entity_vocab", ")", ")", ":", "\n", "            ", "fout", ".", "write", "(", "rev_entity_vocab", "[", "i", "]", "+", "\"\\n\"", ")", "\n", "", "", "with", "open", "(", "new_rel_vocab_file", ",", "\"w\"", ")", "as", "fout", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "rel_vocab", ")", ")", ":", "\n", "            ", "fout", ".", "write", "(", "rev_rel_vocab", "[", "i", "]", "+", "\"\\n\"", ")", "\n", "\n", "", "", "return", "entity_vocab", ",", "rev_entity_vocab", ",", "rel_vocab", ",", "rev_rel_vocab", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.adaptive_subgraph_collection.create_input_with_cbr_subgraph.write_files_with_new_subgraphs": [[78, 104], ["tqdm.tqdm", "print", "print", "set", "list", "set", "list", "list", "output_data.append", "open", "json.dump", "set.add", "set.add", "set.add", "seed_ents.append"], "function", ["None"], ["", "def", "write_files_with_new_subgraphs", "(", "input_data", ",", "output_file", ",", "cbr_subgraph", ",", "ent_vocab", ",", "rel_vocab", ",", "qid2q_ents", ")", ":", "\n", "    ", "output_data", "=", "[", "]", "\n", "for", "d", "in", "tqdm", "(", "input_data", ")", ":", "\n", "        ", "qid", "=", "d", "[", "\"id\"", "]", "\n", "new_subgraph_test", "=", "set", "(", ")", "\n", "new_subgraph", "=", "list", "(", "cbr_subgraph", "[", "qid", "]", ")", "\n", "all_entities", "=", "set", "(", ")", "\n", "for", "(", "e1", ",", "r", ",", "e2", ")", "in", "new_subgraph", ":", "\n", "            ", "new_subgraph_test", ".", "add", "(", "(", "ent_vocab", "[", "e1", "]", ",", "rel_vocab", "[", "r", "]", ",", "ent_vocab", "[", "e2", "]", ")", ")", "\n", "all_entities", ".", "add", "(", "ent_vocab", "[", "e1", "]", ")", "\n", "all_entities", ".", "add", "(", "ent_vocab", "[", "e2", "]", ")", "\n", "", "d", "[", "\"subgraph\"", "]", "=", "{", "}", "\n", "d", "[", "\"subgraph\"", "]", "[", "\"tuples\"", "]", "=", "list", "(", "new_subgraph_test", ")", "\n", "d", "[", "\"subgraph\"", "]", "[", "\"entities\"", "]", "=", "list", "(", "all_entities", ")", "\n", "# fill in seed entities", "\n", "q_ents", "=", "qid2q_ents", "[", "qid", "]", "\n", "seed_ents", "=", "[", "]", "\n", "for", "e", "in", "q_ents", ":", "\n", "            ", "if", "e", "in", "ent_vocab", ":", "\n", "                ", "seed_ents", ".", "append", "(", "ent_vocab", "[", "e", "]", ")", "\n", "", "", "d", "[", "\"seed_entities\"", "]", "=", "seed_ents", "\n", "output_data", ".", "append", "(", "d", ")", "\n", "", "print", "(", "\"Writing data to {}\"", ".", "format", "(", "output_file", ")", ")", "\n", "with", "open", "(", "output_file", ",", "\"w\"", ")", "as", "fout", ":", "\n", "        ", "json", ".", "dump", "(", "output_data", ",", "fout", ",", "indent", "=", "2", ")", "\n", "", "print", "(", "\"Done...\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.adaptive_subgraph_collection.adaptive_graph_collection.gather_paths": [[18, 33], ["enumerate", "all_subgraphs.items", "set", "set.add", "type"], "function", ["None"], ["def", "gather_paths", "(", "all_subgraphs", ")", ":", "\n", "    ", "train_chains", "=", "{", "}", "\n", "for", "ctr", ",", "(", "qid", ",", "all_chains", ")", "in", "enumerate", "(", "all_subgraphs", ".", "items", "(", ")", ")", ":", "\n", "        ", "all_inference_chains", "=", "set", "(", ")", "\n", "for", "chains", "in", "all_chains", ":", "\n", "            ", "chains_st_en", "=", "chains", "[", "'chains'", "]", "\n", "for", "path_st_en", "in", "chains_st_en", ":", "\n", "                ", "if", "path_st_en", "==", "(", "'type.object.type'", ",", "'type.type.instance'", ")", "or", "path_st_en", "==", "(", "\n", "'22-rdf-syntax-ns#type'", ",", "'type.type.instance'", ")", ":", "\n", "                    ", "continue", "\n", "", "if", "type", "(", "path_st_en", ")", "==", "str", ":", "\n", "                    ", "path_st_en", "=", "(", "path_st_en", ",", ")", "\n", "", "all_inference_chains", ".", "add", "(", "path_st_en", ")", "\n", "", "", "train_chains", "[", "qid", "]", "=", "all_inference_chains", "\n", "", "return", "train_chains", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.adaptive_subgraph_collection.adaptive_graph_collection.get_subgraph_spanned_by_chain": [[35, 72], ["len", "dataset_name.lower", "adaptive_subgraph_collection.adaptive_utils.execute_kb_query", "len", "len", "numpy.random.choice().tolist", "adaptive_graph_collection.get_subgraph_spanned_by_chain", "temp.append", "suffix_chains.append", "len", "numpy.random.choice"], "function", ["home.repos.pwc.inspect_result.rajarshd_cbr-subg.adaptive_subgraph_collection.adaptive_utils.execute_kb_query", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.adaptive_subgraph_collection.adaptive_graph_collection.get_subgraph_spanned_by_chain"], ["", "def", "get_subgraph_spanned_by_chain", "(", "e", ":", "str", ",", "path", ":", "List", "[", "str", "]", ",", "depth", ":", "int", ",", "max_branch", ":", "int", ",", "dataset_name", "=", "None", ",", "\n", "e1_r_map", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    starts from an entity and executes the path by doing depth first search. If there are multiple edges with the same label, we consider\n    max_branch number. We also get the intermediate entities and relations\n    \"\"\"", "\n", "if", "depth", "==", "len", "(", "path", ")", ":", "\n", "# reached end, return node", "\n", "        ", "return", "[", "[", "e", "]", "]", "\n", "", "next_rel", "=", "path", "[", "depth", "]", "\n", "#     next_entities = subgraph[(e, path[depth])]", "\n", "if", "dataset_name", ".", "lower", "(", ")", "==", "\"metaqa\"", ":", "\n", "        ", "next_entities", "=", "e1_r_map", "[", "(", "e", ",", "next_rel", ")", "]", "\n", "", "else", ":", "\n", "        ", "spql", "=", "\"select distinct ?e where { ns:\"", "+", "e", "+", "\" ns:\"", "+", "next_rel", "+", "\" ?e .}\"", "\n", "ret", "=", "execute_kb_query", "(", "spql", ")", "\n", "next_entities", "=", "ret", "[", "0", "]", "\n", "# next_entities = list(set(self.train_map[(e, path[depth])] + self.args.rotate_edges[(e, path[depth])][:5]))", "\n", "", "if", "len", "(", "next_entities", ")", "==", "0", ":", "\n", "# edge not present", "\n", "        ", "return", "[", "]", "\n", "", "if", "len", "(", "next_entities", ")", ">", "max_branch", ":", "\n", "# select max_branch random entities", "\n", "        ", "next_entities", "=", "np", ".", "random", ".", "choice", "(", "next_entities", ",", "max_branch", ",", "replace", "=", "False", ")", ".", "tolist", "(", ")", "\n", "", "suffix_chains", "=", "[", "]", "\n", "for", "e_next", "in", "next_entities", ":", "\n", "        ", "paths_from_branch", "=", "get_subgraph_spanned_by_chain", "(", "e_next", ",", "path", ",", "depth", "+", "1", ",", "max_branch", ",", "dataset_name", ",", "e1_r_map", ")", "\n", "for", "p", "in", "paths_from_branch", ":", "\n", "            ", "suffix_chains", ".", "append", "(", "p", ")", "\n", "# now for each chain, append (the current entity, relations)", "\n", "", "", "temp", "=", "[", "]", "\n", "for", "chain", "in", "suffix_chains", ":", "\n", "        ", "if", "len", "(", "chain", ")", "==", "0", ":", "# these are the chains which didnt execute, ignore them", "\n", "            ", "continue", "\n", "", "temp", ".", "append", "(", "[", "e", ",", "path", "[", "depth", "]", "]", "+", "chain", ")", "\n", "", "suffix_chains", "=", "temp", "\n", "return", "suffix_chains", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.adaptive_subgraph_collection.adaptive_graph_collection.get_triples_from_path": [[74, 86], ["set", "enumerate", "set.add"], "function", ["None"], ["", "def", "get_triples_from_path", "(", "path", ":", "List", "[", "str", "]", ")", ":", "\n", "    ", "prev_ent", "=", "None", "\n", "prev_rel", "=", "None", "\n", "triples", "=", "set", "(", ")", "\n", "for", "ctr", ",", "e_or_r", "in", "enumerate", "(", "path", ")", ":", "\n", "        ", "if", "ctr", "%", "2", "==", "0", ":", "# entiy", "\n", "            ", "if", "prev_ent", "is", "not", "None", "and", "prev_rel", "is", "not", "None", ":", "\n", "                ", "triples", ".", "add", "(", "(", "prev_ent", ",", "prev_rel", ",", "e_or_r", ")", ")", "\n", "", "prev_ent", "=", "e_or_r", "\n", "", "else", ":", "\n", "            ", "prev_rel", "=", "e_or_r", "\n", "", "", "return", "triples", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.adaptive_subgraph_collection.adaptive_graph_collection.collect_subgraph_execute_chains": [[88, 115], ["print", "tqdm.tqdm", "len", "enumerate", "sorted", "set", "subgraph_lengths.append", "chains.items", "len", "adaptive_graph_collection.get_subgraph_spanned_by_chain", "adaptive_graph_collection.get_triples_from_path"], "function", ["home.repos.pwc.inspect_result.rajarshd_cbr-subg.adaptive_subgraph_collection.adaptive_graph_collection.get_subgraph_spanned_by_chain", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.adaptive_subgraph_collection.adaptive_graph_collection.get_triples_from_path"], ["", "def", "collect_subgraph_execute_chains", "(", "chains", ",", "qid2qents", ",", "job_id", ",", "total_jobs", ",", "dataset_name", "=", "None", ",", "e1_r_map", "=", "None", ")", ":", "\n", "    ", "depth", "=", "0", "\n", "max_branch", "=", "100", "\n", "subgraph_lengths", "=", "[", "]", "\n", "triples_all_qs", "=", "{", "}", "\n", "job_size", "=", "len", "(", "chains", ")", "/", "total_jobs", "\n", "st", "=", "job_id", "*", "job_size", "\n", "en", "=", "(", "1", "+", "job_id", ")", "*", "job_size", "\n", "print", "(", "\"St: {}, En: {}\"", ".", "format", "(", "st", ",", "en", ")", ")", "\n", "# sort chains wrt qids so that every partition gets the same list", "\n", "chains", "=", "[", "(", "qid", ",", "q_chains", ")", "for", "(", "qid", ",", "q_chains", ")", "in", "sorted", "(", "chains", ".", "items", "(", ")", ",", "key", "=", "lambda", "item", ":", "item", "[", "0", "]", ")", "]", "\n", "if", "dataset_name", "==", "\"metaqa\"", ":", "\n", "        ", "assert", "e1_r_map", "is", "not", "None", "\n", "", "for", "ctr", ",", "(", "qid", ",", "q_chains", ")", "in", "tqdm", "(", "enumerate", "(", "chains", ")", ")", ":", "\n", "        ", "if", "st", "<=", "ctr", "<", "en", ":", "\n", "            ", "q_ents", "=", "qid2qents", "[", "qid", "]", "\n", "all_triples", "=", "set", "(", ")", "\n", "for", "q_ent", "in", "q_ents", ":", "\n", "                ", "for", "chain", "in", "q_chains", ":", "\n", "                    ", "all_executed_chains", "=", "get_subgraph_spanned_by_chain", "(", "q_ent", ",", "chain", ",", "depth", ",", "max_branch", ",", "dataset_name", ",", "\n", "e1_r_map", ")", "\n", "for", "executed_chain", "in", "all_executed_chains", ":", "\n", "                        ", "triples", "=", "get_triples_from_path", "(", "executed_chain", ")", "\n", "all_triples", "=", "all_triples", "|", "triples", "\n", "", "", "", "subgraph_lengths", ".", "append", "(", "len", "(", "all_triples", ")", ")", "\n", "triples_all_qs", "[", "qid", "]", "=", "all_triples", "\n", "", "", "return", "triples_all_qs", ",", "subgraph_lengths", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.adaptive_subgraph_collection.adaptive_graph_collection.load_knns": [[117, 127], ["open", "json.load"], "function", ["None"], ["", "def", "load_knns", "(", "file_name", ")", ":", "\n", "#     test_file_name = os.path.join(dir_name, \"test_roberta-base_mean_pool_masked.json\")", "\n", "    ", "with", "open", "(", "file_name", ")", "as", "fin", ":", "\n", "        ", "data", "=", "json", ".", "load", "(", "fin", ")", "\n", "", "qid2knns", ",", "qid2qstr", "=", "{", "}", ",", "{", "}", "\n", "for", "t", "in", "data", ":", "\n", "        ", "qid", "=", "t", "[", "\"id\"", "]", "\n", "knn_qs", "=", "t", "[", "\"knn\"", "]", "\n", "qid2knns", "[", "qid", "]", "=", "knn_qs", "\n", "", "return", "qid2knns", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.adaptive_subgraph_collection.adaptive_graph_collection.get_inference_chains_from_KNN": [[129, 154], ["enumerate", "print", "print", "tqdm.tqdm", "set", "num_chains.append", "qid2knns.items", "len", "no_chain_qids.append", "set.add", "len", "len", "numpy.mean", "len"], "function", ["None"], ["", "def", "get_inference_chains_from_KNN", "(", "qid2knns", ",", "train_chains", ",", "k", "=", "5", ")", ":", "\n", "    ", "no_chain_counter", "=", "0", "\n", "no_chain_qids", "=", "[", "]", "\n", "num_chains", "=", "[", "]", "\n", "qid2chains", "=", "{", "}", "\n", "for", "q_ctr", ",", "(", "qid", ",", "knns", ")", "in", "enumerate", "(", "tqdm", "(", "qid2knns", ".", "items", "(", ")", ")", ")", ":", "\n", "        ", "all_chains", "=", "[", "]", "\n", "for", "knn", "in", "knns", "[", ":", "k", "]", ":", "\n", "            ", "if", "knn", "==", "qid", ":", "\n", "                ", "continue", "\n", "", "chains", "=", "train_chains", "[", "knn", "]", "if", "knn", "in", "train_chains", "else", "[", "]", "\n", "all_chains", "+=", "chains", "\n", "", "if", "len", "(", "all_chains", ")", "==", "0", ":", "\n", "            ", "no_chain_counter", "+=", "1", "\n", "no_chain_qids", ".", "append", "(", "qid", ")", "\n", "#             print(test_qid2qstr[qid])", "\n", "", "all_chains_set", "=", "set", "(", ")", "\n", "for", "chain", "in", "all_chains", ":", "\n", "            ", "all_chains_set", ".", "add", "(", "chain", ")", "\n", "", "qid2chains", "[", "qid", "]", "=", "all_chains_set", "\n", "num_chains", ".", "append", "(", "len", "(", "all_chains_set", ")", ")", "\n", "", "print", "(", "\"#Queries with no chains: {} out of {} questions, {:.2f}%\"", ".", "format", "(", "no_chain_counter", ",", "len", "(", "qid2knns", ")", ",", "\n", "100", "*", "(", "no_chain_counter", "/", "len", "(", "qid2knns", ")", ")", ")", ")", "\n", "print", "(", "\"Avg number of chains: {}\"", ".", "format", "(", "np", ".", "mean", "(", "num_chains", ")", ")", ")", "\n", "return", "qid2chains", ",", "no_chain_qids", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.adaptive_subgraph_collection.adaptive_graph_collection.check_overlap_inference_chains": [[156, 167], ["qid2gold_chains.items", "print", "len", "len"], "function", ["None"], ["", "def", "check_overlap_inference_chains", "(", "qid2chains", ",", "qid2gold_chains", ")", ":", "\n", "    ", "gold_chain_present_ctr", "=", "0", "\n", "for", "qid", ",", "gold_chains", "in", "qid2gold_chains", ".", "items", "(", ")", ":", "\n", "        ", "for", "gold_chain", "in", "gold_chains", ":", "\n", "            ", "if", "qid", "in", "qid2chains", "and", "gold_chain", "in", "qid2chains", "[", "qid", "]", ":", "\n", "                ", "gold_chain_present_ctr", "+=", "1", "\n", "break", "\n", "", "", "", "print", "(", "\"Gold inference chain present for {} out of {} questions, {:.2f}%\"", ".", "format", "(", "gold_chain_present_ctr", ",", "\n", "len", "(", "qid2chains", ")", ",", "100", "*", "(", "\n", "gold_chain_present_ctr", "/", "len", "(", "\n", "qid2chains", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.adaptive_subgraph_collection.adaptive_graph_collection.check_overlap": [[169, 189], ["tqdm.tqdm", "print", "enumerate", "set", "triples_all_qs.items", "set.add", "set.add", "wrong_qid_answers.append"], "function", ["None"], ["", "def", "check_overlap", "(", "triples_all_qs", ",", "qid2answers", ")", ":", "\n", "    ", "total_ctr", ",", "ans_present_ctr", "=", "0", ",", "0", "\n", "wrong_qid_answers", "=", "[", "]", "\n", "for", "ctr", ",", "(", "qid", ",", "triples", ")", "in", "tqdm", "(", "enumerate", "(", "triples_all_qs", ".", "items", "(", ")", ")", ")", ":", "\n", "        ", "flag", "=", "0", "\n", "q_entities", "=", "set", "(", ")", "\n", "for", "(", "e1", ",", "r", ",", "e2", ")", "in", "triples", ":", "\n", "            ", "q_entities", ".", "add", "(", "e1", ")", "\n", "q_entities", ".", "add", "(", "e2", ")", "\n", "", "for", "ans_e", "in", "qid2answers", "[", "qid", "]", ":", "\n", "            ", "if", "ans_e", "in", "q_entities", ":", "\n", "                ", "flag", "=", "1", "\n", "ans_present_ctr", "+=", "1", "\n", "break", "\n", "", "", "total_ctr", "+=", "1", "\n", "if", "flag", "==", "0", ":", "\n", "            ", "wrong_qid_answers", ".", "append", "(", "qid", ")", "\n", "", "", "print", "(", "\"Answer present for {} questions out of {} questions, {:.2f}%\"", ".", "format", "(", "ans_present_ctr", ",", "total_ctr", ",", "\n", "100", "*", "(", "ans_present_ctr", "/", "total_ctr", ")", ")", ")", "\n", "return", "wrong_qid_answers", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.adaptive_subgraph_collection.adaptive_utils.sparqlQuery": [[15, 29], ["urllib.parse.urlencode().encode", "urllib.parse.urlencode().encode", "urllib.request.urlopen().read", "urllib.request.urlopen().read", "json.loads", "urllib.parse.urlencode", "urllib.parse.urlencode", "urllib.request.urlopen", "urllib.request.urlopen"], "function", ["None"], ["def", "sparqlQuery", "(", "query", ",", "baseURL", ",", "format", "=", "\"application/json\"", ")", ":", "\n", "    ", "params", "=", "{", "\n", "\"default-graph\"", ":", "\"\"", ",", "\n", "\"should-sponge\"", ":", "\"soft\"", ",", "\n", "\"query\"", ":", "query", ",", "\n", "\"debug\"", ":", "\"on\"", ",", "\n", "\"timeout\"", ":", "\"\"", ",", "\n", "\"format\"", ":", "format", ",", "\n", "\"save\"", ":", "\"display\"", ",", "\n", "\"fname\"", ":", "\"\"", "\n", "}", "\n", "querypart", "=", "urllib", ".", "parse", ".", "urlencode", "(", "params", ")", ".", "encode", "(", "\"utf-8\"", ")", "\n", "response", "=", "urllib", ".", "request", ".", "urlopen", "(", "baseURL", ",", "querypart", ")", ".", "read", "(", ")", "\n", "return", "json", ".", "loads", "(", "response", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.adaptive_subgraph_collection.adaptive_utils.execute_kb_query": [[31, 64], ["adaptive_utils.sparqlQuery", "random.randrange", "len", "b.keys", "ans_entities.append", "ans_entity.split"], "function", ["home.repos.pwc.inspect_result.rajarshd_cbr-subg.adaptive_subgraph_collection.adaptive_utils.sparqlQuery"], ["", "def", "execute_kb_query", "(", "query", ":", "str", ")", "->", "Tuple", "[", "List", "[", "str", "]", ",", "bool", "]", ":", "\n", "    ", "PREFIX", "=", "\"PREFIX ns: <http://rdf.freebase.com/ns/> \"", "\n", "query", "=", "PREFIX", "+", "query", "\n", "is_exception", "=", "False", "\n", "ans_entities", "=", "[", "]", "\n", "error_msg", "=", "\"\"", "\n", "urls", "=", "[", "\"http://gypsum.cs.umass.edu:3001/sparql/\"", "]", "\n", "try", ":", "\n", "# select a url randomly from the list of services", "\n", "        ", "url", "=", "urls", "[", "randrange", "(", "len", "(", "urls", ")", ")", "]", "\n", "data", "=", "sparqlQuery", "(", "query", ",", "url", ")", "\n", "\n", "if", "\"results\"", "in", "data", ":", "\n", "            ", "if", "\"bindings\"", "in", "data", "[", "\"results\"", "]", ":", "\n", "                ", "bindings", "=", "data", "[", "\"results\"", "]", "[", "\"bindings\"", "]", "\n", "for", "b", "in", "bindings", ":", "\n", "                    ", "for", "var", "in", "b", ".", "keys", "(", ")", ":", "\n", "                        ", "if", "\"value\"", "in", "b", "[", "var", "]", ":", "\n", "                            ", "ans_entity", "=", "b", "[", "var", "]", "[", "\"value\"", "]", "\n", "# parse the url", "\n", "ans_entity", "=", "ans_entity", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", "\n", "ans_entities", ".", "append", "(", "ans_entity", ")", "\n", "", "", "", "", "", "", "except", "urllib", ".", "error", ".", "HTTPError", ":", "\n", "        ", "is_exception", "=", "True", "\n", "error_msg", "=", "\"HTTPError exception. Might be syntax.\"", "\n", "", "except", "urllib", ".", "error", ".", "URLError", ":", "\n", "        ", "is_exception", "=", "True", "\n", "error_msg", "=", "\"URLError. Service might not be responding\"", "\n", "", "except", "http", ".", "client", ".", "RemoteDisconnected", ":", "\n", "        ", "is_exception", "=", "True", "\n", "error_msg", "=", "\"URLError. Service might not be responding\"", "\n", "\n", "", "return", "ans_entities", ",", "is_exception", ",", "error_msg", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.adaptive_subgraph_collection.adaptive_utils.execute_kb_query_for_hops": [[66, 111], ["set", "adaptive_utils.sparqlQuery", "e.__str__", "random.randrange", "len", "b.keys", "set.add", "set.add", "set.add", "r1.split", "r2.split", "r3.split"], "function", ["home.repos.pwc.inspect_result.rajarshd_cbr-subg.adaptive_subgraph_collection.adaptive_utils.sparqlQuery", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.data_loaders.training_utils.EarlyStoppingException.__str__"], ["", "def", "execute_kb_query_for_hops", "(", "query", ":", "str", ",", "hop", "=", "2", ")", "->", "Tuple", "[", "List", "[", "str", "]", ",", "bool", "]", ":", "\n", "    ", "PREFIX", "=", "\"PREFIX ns: <http://rdf.freebase.com/ns/> \"", "\n", "query", "=", "PREFIX", "+", "query", "\n", "is_exception", "=", "False", "\n", "ans_entities", "=", "set", "(", ")", "\n", "error_msg", "=", "\"\"", "\n", "urls", "=", "[", "\"http://gypsum.cs.umass.edu:3001/sparql/\"", "]", "\n", "try", ":", "\n", "# select a url randomly from the list of services", "\n", "        ", "url", "=", "urls", "[", "randrange", "(", "len", "(", "urls", ")", ")", "]", "\n", "data", "=", "sparqlQuery", "(", "query", ",", "url", ")", "\n", "if", "\"results\"", "in", "data", ":", "\n", "            ", "if", "\"bindings\"", "in", "data", "[", "\"results\"", "]", ":", "\n", "                ", "bindings", "=", "data", "[", "\"results\"", "]", "[", "\"bindings\"", "]", "\n", "for", "b", "in", "bindings", ":", "\n", "                    ", "r1", ",", "r2", ",", "r3", "=", "None", ",", "None", ",", "None", "\n", "for", "var", "in", "b", ".", "keys", "(", ")", ":", "\n", "                        ", "if", "\"value\"", "in", "b", "[", "var", "]", ":", "\n", "                            ", "if", "var", "==", "\"r1\"", ":", "\n", "                                ", "r1", "=", "b", "[", "var", "]", "[", "\"value\"", "]", "\n", "r1", "=", "r1", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", "\n", "", "if", "var", "==", "\"r2\"", ":", "\n", "                                ", "r2", "=", "b", "[", "var", "]", "[", "\"value\"", "]", "\n", "r2", "=", "r2", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", "\n", "", "if", "var", "==", "\"r3\"", ":", "\n", "                                ", "r3", "=", "b", "[", "var", "]", "[", "\"value\"", "]", "\n", "r3", "=", "r3", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", "\n", "", "", "", "if", "hop", "==", "3", "and", "r1", "is", "not", "None", "and", "r2", "is", "not", "None", "and", "r3", "is", "not", "None", ":", "\n", "                        ", "ans_entities", ".", "add", "(", "(", "r1", ",", "r2", ",", "r3", ")", ")", "\n", "", "if", "hop", "==", "2", "and", "r1", "is", "not", "None", "and", "r2", "is", "not", "None", ":", "\n", "                        ", "ans_entities", ".", "add", "(", "(", "r1", ",", "r2", ")", ")", "\n", "", "if", "hop", "==", "1", "and", "r1", "is", "not", "None", ":", "\n", "                        ", "ans_entities", ".", "add", "(", "(", "r1", ")", ")", "\n", "\n", "", "", "", "", "", "except", "urllib", ".", "error", ".", "HTTPError", "as", "e", ":", "\n", "        ", "is_exception", "=", "True", "\n", "error_msg", "=", "e", ".", "__str__", "(", ")", "\n", "", "except", "urllib", ".", "error", ".", "URLError", ":", "\n", "        ", "is_exception", "=", "True", "\n", "error_msg", "=", "\"URLError. Service might not be responding\"", "\n", "", "except", "http", ".", "client", ".", "RemoteDisconnected", ":", "\n", "        ", "is_exception", "=", "True", "\n", "error_msg", "=", "\"URLError. Service might not be responding\"", "\n", "\n", "", "return", "ans_entities", ",", "is_exception", ",", "error_msg", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.adaptive_subgraph_collection.adaptive_utils.get_query_entities_and_answers_cwq": [[113, 140], ["open", "json.load", "set", "set", "m.start", "set.add", "re.finditer"], "function", ["None"], ["", "def", "get_query_entities_and_answers_cwq", "(", "input_file", ",", "return_gold_entities", "=", "False", ")", ":", "\n", "    ", "qid2qents", ",", "qid2answers", ",", "qid2gold_chains", ",", "qid2q_str", ",", "qid2gold_spqls", "=", "{", "}", ",", "{", "}", ",", "{", "}", ",", "{", "}", ",", "{", "}", "\n", "with", "open", "(", "input_file", ")", "as", "fin", ":", "\n", "        ", "data", "=", "json", ".", "load", "(", "fin", ")", "\n", "", "for", "d", "in", "data", ":", "\n", "        ", "qid", "=", "d", "[", "\"ID\"", "]", "\n", "if", "return_gold_entities", ":", "\n", "            ", "all_query_entities", "=", "set", "(", ")", "\n", "if", "\"sparql\"", "in", "d", ":", "\n", "                ", "spql", "=", "d", "[", "\"sparql\"", "]", "\n", "sub_str", "=", "\"ns:m\\.\"", "\n", "start_indxs", "=", "[", "m", ".", "start", "(", ")", "for", "m", "in", "re", ".", "finditer", "(", "sub_str", ",", "spql", ")", "]", "\n", "for", "st_ind", "in", "start_indxs", ":", "\n", "                    ", "curr_ind", "=", "st_ind", "\n", "while", "(", "spql", "[", "curr_ind", "]", "!=", "' '", ")", "and", "(", "spql", "[", "curr_ind", "]", "!=", "')'", ")", ":", "\n", "                        ", "curr_ind", "+=", "1", "\n", "", "en_ind", "=", "curr_ind", "\n", "all_query_entities", ".", "add", "(", "spql", "[", "st_ind", "+", "3", ":", "en_ind", "]", ")", "\n", "", "", "", "else", ":", "\n", "            ", "all_query_entities", "=", "set", "(", "[", "m", "[", "0", "]", "for", "m", "in", "d", "[", "\"mentions\"", "]", "]", ")", "\n", "", "qid2qents", "[", "qid", "]", "=", "all_query_entities", "\n", "qid2q_str", "[", "qid", "]", "=", "d", "[", "\"question\"", "]", "\n", "all_spqls", "=", "[", "d", "[", "\"sparql\"", "]", "]", "\n", "qid2gold_spqls", "[", "qid", "]", "=", "all_spqls", "\n", "answers", "=", "[", "a", "[", "\"answer_id\"", "]", "for", "a", "in", "d", "[", "\"answers\"", "]", "]", "if", "\"answers\"", "in", "d", "else", "[", "]", "\n", "qid2answers", "[", "qid", "]", "=", "answers", "\n", "", "return", "qid2qents", ",", "qid2answers", ",", "qid2gold_spqls", ",", "qid2q_str", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.adaptive_subgraph_collection.adaptive_utils.get_query_entities_and_answers": [[142, 178], ["open", "json.load", "set", "set", "set", "set", "set.add", "len", "tuple", "set.add", "set.add", "set.add"], "function", ["None"], ["", "def", "get_query_entities_and_answers", "(", "input_file", ",", "return_gold_entities", "=", "False", ")", ":", "\n", "    ", "qid2qents", ",", "qid2answers", ",", "qid2gold_chains", ",", "qid2q_str", "=", "{", "}", ",", "{", "}", ",", "{", "}", ",", "{", "}", "\n", "with", "open", "(", "input_file", ")", "as", "fin", ":", "\n", "        ", "data", "=", "json", ".", "load", "(", "fin", ")", "\n", "", "for", "d", "in", "data", "[", "\"Questions\"", "]", ":", "\n", "        ", "qid", "=", "d", "[", "\"QuestionId\"", "]", "\n", "qid2q_str", "[", "qid", "]", "=", "d", "[", "\"ProcessedQuestion\"", "]", "\n", "ans_ids", "=", "set", "(", ")", "\n", "all_inference_chains", "=", "set", "(", ")", "\n", "all_query_entities", "=", "set", "(", ")", "\n", "if", "'Parses'", "in", "d", ":", "\n", "            ", "for", "p", "in", "d", "[", "'Parses'", "]", ":", "\n", "                ", "if", "return_gold_entities", ":", "\n", "                    ", "if", "'TopicEntityMid'", "in", "p", ":", "\n", "                        ", "if", "p", "[", "'TopicEntityMid'", "]", "is", "not", "None", ":", "\n", "                            ", "all_query_entities", ".", "add", "(", "p", "[", "'TopicEntityMid'", "]", ")", "\n", "# also get entities from constraints", "\n", "", "", "if", "'Constraints'", "in", "p", ":", "\n", "                        ", "constraints", "=", "p", "[", "'Constraints'", "]", "\n", "for", "c", "in", "constraints", ":", "\n", "                            ", "if", "c", "[", "\"ArgumentType\"", "]", "==", "\"Entity\"", ":", "\n", "                                ", "if", "c", "[", "\"Argument\"", "]", "is", "not", "None", ":", "\n", "                                    ", "all_query_entities", ".", "add", "(", "c", "[", "\"Argument\"", "]", ")", "\n", "", "", "", "", "", "answers", "=", "p", "[", "\"Answers\"", "]", "\n", "for", "a", "in", "answers", ":", "\n", "                    ", "if", "a", "[", "\"AnswerArgument\"", "]", "is", "not", "None", ":", "\n", "                        ", "ans_ids", ".", "add", "(", "a", "[", "\"AnswerArgument\"", "]", ")", "\n", "", "", "inference_chain", "=", "tuple", "(", "p", "[", "\"InferentialChain\"", "]", ")", "if", "p", "[", "\"InferentialChain\"", "]", "is", "not", "None", "else", "None", "\n", "all_inference_chains", ".", "add", "(", "inference_chain", ")", "\n", "", "", "if", "not", "return_gold_entities", ":", "\n", "            ", "assert", "len", "(", "all_query_entities", ")", "==", "0", "\n", "all_query_entities", "=", "set", "(", "[", "m", "[", "0", "]", "for", "m", "in", "d", "[", "\"mentions\"", "]", "]", ")", "\n", "", "qid2qents", "[", "qid", "]", "=", "all_query_entities", "\n", "qid2answers", "[", "qid", "]", "=", "ans_ids", "\n", "qid2gold_chains", "[", "qid", "]", "=", "all_inference_chains", "\n", "", "return", "qid2qents", ",", "qid2answers", ",", "qid2gold_chains", ",", "qid2q_str", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.adaptive_subgraph_collection.adaptive_utils.get_query_entities_and_answers_freebaseqa": [[180, 206], ["open", "json.load", "set", "set", "set", "set.add", "tuple", "set.add", "set.add", "p[].split"], "function", ["None"], ["", "def", "get_query_entities_and_answers_freebaseqa", "(", "input_file", ",", "return_gold_entities", "=", "True", ")", ":", "\n", "    ", "qid2qents", ",", "qid2answers", ",", "qid2gold_chains", ",", "qid2q_str", "=", "{", "}", ",", "{", "}", ",", "{", "}", ",", "{", "}", "\n", "with", "open", "(", "input_file", ")", "as", "fin", ":", "\n", "        ", "data", "=", "json", ".", "load", "(", "fin", ")", "\n", "", "for", "d", "in", "data", "[", "\"Questions\"", "]", ":", "\n", "        ", "qid", "=", "d", "[", "\"Question-ID\"", "]", "\n", "qid2q_str", "[", "qid", "]", "=", "d", "[", "\"ProcessedQuestion\"", "]", "\n", "ans_ids", "=", "set", "(", ")", "\n", "all_inference_chains", "=", "set", "(", ")", "\n", "all_query_entities", "=", "set", "(", ")", "\n", "if", "'Parses'", "in", "d", ":", "\n", "            ", "for", "p", "in", "d", "[", "'Parses'", "]", ":", "\n", "                ", "if", "'TopicEntityMid'", "in", "p", ":", "\n", "                    ", "if", "p", "[", "'TopicEntityMid'", "]", "is", "not", "None", ":", "\n", "                        ", "all_query_entities", ".", "add", "(", "p", "[", "'TopicEntityMid'", "]", ")", "\n", "", "", "answers", "=", "p", "[", "\"Answers\"", "]", "\n", "for", "a", "in", "answers", ":", "\n", "                    ", "if", "a", "[", "\"AnswersMid\"", "]", "is", "not", "None", ":", "\n", "                        ", "ans_ids", ".", "add", "(", "a", "[", "\"AnswersMid\"", "]", ")", "\n", "", "", "inference_chain", "=", "tuple", "(", "p", "[", "\"InferentialChain\"", "]", ".", "split", "(", "\"..\"", ")", ")", "if", "p", "[", "\n", "\"InferentialChain\"", "]", "is", "not", "None", "else", "None", "\n", "all_inference_chains", ".", "add", "(", "inference_chain", ")", "\n", "", "", "qid2qents", "[", "qid", "]", "=", "all_query_entities", "\n", "qid2answers", "[", "qid", "]", "=", "ans_ids", "\n", "qid2gold_chains", "[", "qid", "]", "=", "all_inference_chains", "\n", "", "return", "qid2qents", ",", "qid2answers", ",", "qid2gold_chains", ",", "qid2q_str", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.adaptive_subgraph_collection.adaptive_utils.get_query_entities_and_answers_metaqa": [[208, 220], ["open", "json.load"], "function", ["None"], ["", "def", "get_query_entities_and_answers_metaqa", "(", "input_file", ",", "return_gold_entities", "=", "True", ")", ":", "\n", "    ", "assert", "return_gold_entities", "is", "True", "# metaqa comes with tagged entities", "\n", "qid2qents", ",", "qid2answers", ",", "qid2gold_chains", ",", "qid2q_str", "=", "{", "}", ",", "{", "}", ",", "{", "}", ",", "{", "}", "\n", "with", "open", "(", "input_file", ")", "as", "fin", ":", "\n", "        ", "data", "=", "json", ".", "load", "(", "fin", ")", "\n", "", "for", "d", "in", "data", ":", "\n", "        ", "qid", "=", "d", "[", "\"id\"", "]", "\n", "qid2q_str", "[", "qid", "]", "=", "d", "[", "\"question\"", "]", "\n", "qid2qents", "[", "qid", "]", "=", "d", "[", "\"seed_entities\"", "]", "\n", "qid2gold_chains", "[", "qid", "]", "=", "None", "\n", "qid2answers", "[", "qid", "]", "=", "d", "[", "\"answer\"", "]", "\n", "", "return", "qid2qents", ",", "qid2answers", ",", "qid2gold_chains", ",", "qid2q_str", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.adaptive_subgraph_collection.adaptive_utils.read_metaqa_kb": [[222, 231], ["collections.defaultdict", "open", "tqdm.tqdm", "line.strip.strip", "line.strip.split", "e1_map[].append", "e1_map[].append"], "function", ["None"], ["", "def", "read_metaqa_kb", "(", "kb_file", ")", ":", "\n", "    ", "e1_map", "=", "defaultdict", "(", "list", ")", "\n", "with", "open", "(", "kb_file", ")", "as", "fin", ":", "\n", "        ", "for", "line", "in", "tqdm", "(", "fin", ")", ":", "\n", "            ", "line", "=", "line", ".", "strip", "(", ")", "\n", "e1", ",", "r", ",", "e2", "=", "line", ".", "split", "(", "\"|\"", ")", "\n", "e1_map", "[", "e1", "]", ".", "append", "(", "(", "r", ",", "e2", ")", ")", "\n", "e1_map", "[", "e2", "]", ".", "append", "(", "(", "r", "+", "\"_inv\"", ",", "e1", ")", ")", "\n", "", "", "return", "e1_map", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.adaptive_subgraph_collection.adaptive_utils.read_metaqa_kb_for_traversal": [[232, 241], ["collections.defaultdict", "open", "tqdm.tqdm", "line.strip.strip", "line.strip.split", "e1_r_map[].append", "e1_r_map[].append"], "function", ["None"], ["", "def", "read_metaqa_kb_for_traversal", "(", "kb_file", ")", ":", "\n", "    ", "e1_r_map", "=", "defaultdict", "(", "list", ")", "\n", "with", "open", "(", "kb_file", ")", "as", "fin", ":", "\n", "        ", "for", "line", "in", "tqdm", "(", "fin", ")", ":", "\n", "            ", "line", "=", "line", ".", "strip", "(", ")", "\n", "e1", ",", "r", ",", "e2", "=", "line", ".", "split", "(", "\"|\"", ")", "\n", "e1_r_map", "[", "(", "e1", ",", "r", ")", "]", ".", "append", "(", "e2", ")", "\n", "e1_r_map", "[", "(", "e2", ",", "r", "+", "\"_inv\"", ")", "]", ".", "append", "(", "e1", ")", "\n", "", "", "return", "e1_r_map", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.adaptive_subgraph_collection.adaptive_utils.find_paths": [[243, 263], ["set", "range", "set", "range", "rng.choice", "prefix_rel.append", "set.add", "len", "set.add", "tuple"], "function", ["None"], ["", "def", "find_paths", "(", "e1_map", ",", "q_ent", ",", "ans_ent", ",", "num_max_paths", "=", "1000", ",", "max_path_len", "=", "3", ")", ":", "\n", "    ", "all_collected_paths", "=", "set", "(", ")", "\n", "for", "_", "in", "range", "(", "num_max_paths", ")", ":", "\n", "        ", "prefix_rel", "=", "[", "]", "\n", "prefix_ent", "=", "set", "(", ")", "\n", "curr_ent", "=", "q_ent", "\n", "for", "l", "in", "range", "(", "max_path_len", ")", ":", "\n", "            ", "outgoing_edges", "=", "e1_map", "[", "curr_ent", "]", "\n", "if", "len", "(", "outgoing_edges", ")", "==", "0", ":", "\n", "                ", "break", "\n", "", "r", ",", "e2", "=", "rng", ".", "choice", "(", "outgoing_edges", ")", "\n", "if", "e2", "in", "prefix_ent", ":", "\n", "# this is a loopy path as it ends on an ent seen before. Ignore this", "\n", "                ", "break", "\n", "", "prefix_rel", ".", "append", "(", "r", ")", "\n", "prefix_ent", ".", "add", "(", "e2", ")", "\n", "if", "e2", "==", "ans_ent", ":", "\n", "                ", "all_collected_paths", ".", "add", "(", "tuple", "(", "prefix_rel", ")", ")", "\n", "", "curr_ent", "=", "e2", "\n", "", "", "return", "all_collected_paths", "", "", ""]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.create_synthetic_types.sample_kb_system": [[6, 28], ["numpy.random.default_rng", "range", "range", "open", "json.dump", "range", "np.random.default_rng.random", "rel_types.append", "allowed_types_map[].append"], "function", ["None"], ["def", "sample_kb_system", "(", "n_etypes", ",", "p", ",", "seed", ",", "out_filenm", ")", ":", "\n", "    ", "rng", "=", "np", ".", "random", ".", "default_rng", "(", "seed", ")", "\n", "ent_types", "=", "[", "f\"t{i}\"", "for", "i", "in", "range", "(", "n_etypes", ")", "]", "\n", "rel_types", "=", "[", "]", "\n", "allowed_types_map", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "n_etypes", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "n_etypes", ")", ":", "\n", "            ", "if", "i", "==", "j", ":", "\n", "                ", "continue", "\n", "", "if", "rng", ".", "random", "(", ")", "<", "p", ":", "\n", "                ", "new_rel_name", "=", "f\"r.t{i}.t{j}\"", "\n", "rel_types", ".", "append", "(", "new_rel_name", ")", "\n", "if", "f\"t{i}\"", "not", "in", "allowed_types_map", ":", "\n", "                    ", "allowed_types_map", "[", "f\"t{i}\"", "]", "=", "[", "(", "new_rel_name", ",", "f\"t{j}\"", ")", "]", "\n", "", "else", ":", "\n", "                    ", "allowed_types_map", "[", "f\"t{i}\"", "]", ".", "append", "(", "(", "new_rel_name", ",", "f\"t{j}\"", ")", ")", "\n", "", "", "", "", "with", "open", "(", "out_filenm", ",", "'w'", ")", "as", "fout", ":", "\n", "        ", "json", ".", "dump", "(", "{", "\"entity_types\"", ":", "ent_types", ",", "\n", "\"rel_types\"", ":", "rel_types", ",", "\n", "\"allowed_types_map\"", ":", "allowed_types_map", ",", "\n", "\"config\"", ":", "{", "\"n_etypes\"", ":", "n_etypes", ",", "\"p\"", ":", "p", ",", "\"seed\"", ":", "seed", "}", "}", ",", "\n", "fout", ",", "indent", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.sample_synthetic_data.ground_pattern": [[13, 65], ["rng.choice", "rng.choice", "rng.choice", "list", "rng.choice", "rng.choice", "rng.choice", "rng.choice", "kb_system[].keys", "list", "rng.choice", "rng.choice", "kb_system[].items", "rng.choice", "kb_system[].keys", "list", "rng.choice", "rng.choice", "kb_system[].items", "rng.choice", "rng.choice", "kb_system[].keys", "list", "rng.choice", "rng.choice", "rng.choice", "kb_system[].items", "rng.choice", "e2r2_cands.append", "kb_system[].keys", "list", "e2r2_cands.append", "kb_system[].keys", "e3r3_cands.append"], "function", ["None"], ["def", "ground_pattern", "(", "pattern_type", ",", "kb_system", ",", "rng", ")", ":", "\n", "    ", "if", "pattern_type", "==", "'2p'", ":", "\n", "        ", "src", "=", "rng", ".", "choice", "(", "list", "(", "kb_system", "[", "\"allowed_types_map\"", "]", ".", "keys", "(", ")", ")", ")", "\n", "r1", ",", "t1", "=", "rng", ".", "choice", "(", "kb_system", "[", "\"allowed_types_map\"", "]", "[", "src", "]", ")", "\n", "r2", ",", "_", "=", "rng", ".", "choice", "(", "[", "edge_type", "for", "edge_type", "in", "kb_system", "[", "\"allowed_types_map\"", "]", "[", "t1", "]", "if", "edge_type", "[", "1", "]", "!=", "src", "]", ")", "\n", "return", "[", "(", "\"e0\"", ",", "r1", ",", "\"?x0\"", ")", ",", "(", "\"?x0\"", ",", "r2", ",", "\"?ans\"", ")", "]", ",", "[", "(", "\"e0\"", ",", "src", ")", "]", "\n", "", "elif", "pattern_type", "==", "'3p'", ":", "\n", "        ", "src", "=", "rng", ".", "choice", "(", "list", "(", "kb_system", "[", "\"allowed_types_map\"", "]", ".", "keys", "(", ")", ")", ")", "\n", "r1", ",", "t1", "=", "rng", ".", "choice", "(", "kb_system", "[", "\"allowed_types_map\"", "]", "[", "src", "]", ")", "\n", "r2", ",", "t2", "=", "rng", ".", "choice", "(", "[", "edge_type", "for", "edge_type", "in", "kb_system", "[", "\"allowed_types_map\"", "]", "[", "t1", "]", "if", "edge_type", "[", "1", "]", "!=", "src", "]", ")", "\n", "r3", ",", "_", "=", "rng", ".", "choice", "(", "[", "edge_type", "for", "edge_type", "in", "kb_system", "[", "\"allowed_types_map\"", "]", "[", "t2", "]", "\n", "if", "edge_type", "[", "1", "]", "!=", "src", "and", "edge_type", "[", "1", "]", "!=", "t1", "]", ")", "\n", "return", "[", "(", "\"e0\"", ",", "r1", ",", "\"?x0\"", ")", ",", "(", "\"?x0\"", ",", "r2", ",", "\"?x1\"", ")", ",", "(", "\"?x1\"", ",", "r3", ",", "\"?ans\"", ")", "]", ",", "[", "(", "\"e0\"", ",", "src", ")", "]", "\n", "", "elif", "pattern_type", "==", "'2i'", ":", "\n", "        ", "src1", "=", "rng", ".", "choice", "(", "list", "(", "kb_system", "[", "\"allowed_types_map\"", "]", ".", "keys", "(", ")", ")", ")", "\n", "r1", ",", "t1", "=", "rng", ".", "choice", "(", "kb_system", "[", "\"allowed_types_map\"", "]", "[", "src1", "]", ")", "\n", "e2r2_cands", "=", "[", "]", "\n", "for", "e", ",", "edge_types", "in", "kb_system", "[", "\"allowed_types_map\"", "]", ".", "items", "(", ")", ":", "\n", "            ", "if", "e", "==", "src1", ":", "\n", "                ", "continue", "\n", "", "for", "edge_type", "in", "edge_types", ":", "\n", "                ", "if", "edge_type", "[", "1", "]", "==", "t1", ":", "\n", "                    ", "e2r2_cands", ".", "append", "(", "(", "e", ",", "edge_type", "[", "0", "]", ")", ")", "\n", "", "", "", "src2", ",", "r2", "=", "rng", ".", "choice", "(", "e2r2_cands", ")", "\n", "return", "[", "(", "\"e0\"", ",", "r1", ",", "\"?ans\"", ")", ",", "(", "\"e1\"", ",", "r2", ",", "\"?ans\"", ")", "]", ",", "[", "(", "\"e0\"", ",", "src1", ")", ",", "(", "\"e1\"", ",", "src2", ")", "]", "\n", "", "elif", "pattern_type", "==", "'ip'", ":", "\n", "        ", "src1", "=", "rng", ".", "choice", "(", "list", "(", "kb_system", "[", "\"allowed_types_map\"", "]", ".", "keys", "(", ")", ")", ")", "\n", "r1", ",", "t1", "=", "rng", ".", "choice", "(", "kb_system", "[", "\"allowed_types_map\"", "]", "[", "src1", "]", ")", "\n", "e2r2_cands", "=", "[", "]", "\n", "for", "e", ",", "edge_types", "in", "kb_system", "[", "\"allowed_types_map\"", "]", ".", "items", "(", ")", ":", "\n", "            ", "if", "e", "==", "src1", ":", "\n", "                ", "continue", "\n", "", "for", "edge_type", "in", "edge_types", ":", "\n", "                ", "if", "edge_type", "[", "1", "]", "==", "t1", ":", "\n", "                    ", "e2r2_cands", ".", "append", "(", "(", "e", ",", "edge_type", "[", "0", "]", ")", ")", "\n", "", "", "", "src2", ",", "r2", "=", "rng", ".", "choice", "(", "e2r2_cands", ")", "\n", "r3", ",", "t3", "=", "rng", ".", "choice", "(", "[", "edge_type", "for", "edge_type", "in", "kb_system", "[", "\"allowed_types_map\"", "]", "[", "t1", "]", "\n", "if", "edge_type", "[", "1", "]", "!=", "src1", "and", "edge_type", "[", "1", "]", "!=", "src2", "]", ")", "\n", "return", "[", "(", "\"e0\"", ",", "r1", ",", "\"?x0\"", ")", ",", "(", "\"e1\"", ",", "r2", ",", "\"?x0\"", ")", ",", "(", "\"?x0\"", ",", "r3", ",", "\"?ans\"", ")", "]", ",", "[", "(", "\"e0\"", ",", "src1", ")", ",", "(", "\"e1\"", ",", "src2", ")", "]", "\n", "", "elif", "pattern_type", "==", "'pi'", ":", "\n", "        ", "src1", "=", "rng", ".", "choice", "(", "list", "(", "kb_system", "[", "\"allowed_types_map\"", "]", ".", "keys", "(", ")", ")", ")", "\n", "r1", ",", "t1", "=", "rng", ".", "choice", "(", "kb_system", "[", "\"allowed_types_map\"", "]", "[", "src1", "]", ")", "\n", "r2", ",", "t2", "=", "rng", ".", "choice", "(", "[", "edge_type", "for", "edge_type", "in", "kb_system", "[", "\"allowed_types_map\"", "]", "[", "t1", "]", "if", "edge_type", "[", "1", "]", "!=", "src1", "]", ")", "\n", "e3r3_cands", "=", "[", "]", "\n", "for", "e", ",", "edge_types", "in", "kb_system", "[", "\"allowed_types_map\"", "]", ".", "items", "(", ")", ":", "\n", "            ", "if", "e", "==", "src1", "or", "e", "==", "t1", ":", "\n", "                ", "continue", "\n", "", "for", "edge_type", "in", "edge_types", ":", "\n", "                ", "if", "edge_type", "[", "1", "]", "==", "t2", ":", "\n", "                    ", "e3r3_cands", ".", "append", "(", "(", "e", ",", "edge_type", "[", "0", "]", ")", ")", "\n", "", "", "", "src2", ",", "r3", "=", "rng", ".", "choice", "(", "e3r3_cands", ")", "\n", "return", "[", "(", "\"e0\"", ",", "r1", ",", "\"?x0\"", ")", ",", "(", "\"?x0\"", ",", "r2", ",", "\"?ans\"", ")", ",", "(", "\"e1\"", ",", "r3", ",", "\"?ans\"", ")", "]", ",", "[", "(", "\"e0\"", ",", "src1", ")", ",", "(", "\"e1\"", ",", "src2", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.sample_synthetic_data.get_graph": [[67, 79], ["sample_synthetic_graph.Graph", "sample_synthetic_graph.Graph.seed_entities", "numpy.zeros", "sample_synthetic_graph.insert_pattern_in_graph", "sample_synthetic_graph.Graph.prune_disconnected_entities", "sample_synthetic_graph.Graph.add_entity", "sample_synthetic_graph.Graph.size", "sample_synthetic_graph.sample_graph", "len"], "function", ["home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.sample_synthetic_graph.Graph.seed_entities", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.sample_synthetic_graph.insert_pattern_in_graph", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.sample_synthetic_graph.Graph.prune_disconnected_entities", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.sample_synthetic_graph.Graph.add_entity", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.sample_synthetic_graph.Graph.size", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.sample_synthetic_graph.sample_graph"], ["", "", "def", "get_graph", "(", "kb_system", ",", "pattern", ",", "seed_ents", ",", "max_size", ",", "max_depth", ",", "p", ",", "rng", ",", "prefix", "=", "\"\"", ")", ":", "\n", "    ", "graph", "=", "Graph", "(", "max_size", "+", "len", "(", "seed_ents", ")", ")", "\n", "for", "se", "in", "seed_ents", ":", "\n", "        ", "graph", ".", "add_entity", "(", "prefix", "+", "se", "[", "0", "]", ",", "se", "[", "1", "]", ")", "\n", "", "graph", ".", "seed_entities", "(", "kb_system", "[", "'entity_types'", "]", ",", "prefix", ")", "\n", "expanded_arr", "=", "np", ".", "zeros", "(", "graph", ".", "size", "(", ")", ",", "dtype", "=", "bool", ")", "\n", "for", "se", "in", "seed_ents", ":", "\n", "        ", "sample_graph", "(", "rng", ",", "kb_system", ",", "graph", ",", "graph", ".", "ent2id", "[", "prefix", "+", "se", "[", "0", "]", "]", ",", "max_depth", ",", "p", ",", "expanded_arr", ")", "\n", "\n", "", "pattern_binding", "=", "insert_pattern_in_graph", "(", "graph", ",", "kb_system", ",", "pattern", ",", "rng", ")", "\n", "graph", ".", "prune_disconnected_entities", "(", ")", "\n", "return", "graph", ",", "pattern_binding", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.sample_synthetic_data.jsonify_adjacency_map": [[81, 89], ["in_adj_map.items", "list"], "function", ["None"], ["", "def", "jsonify_adjacency_map", "(", "in_adj_map", ")", ":", "\n", "    ", "out_adj_map", "=", "{", "}", "\n", "for", "(", "e1", ",", "r", ")", ",", "e2_set", "in", "in_adj_map", ".", "items", "(", ")", ":", "\n", "        ", "if", "e1", "not", "in", "out_adj_map", ":", "\n", "            ", "out_adj_map", "[", "e1", "]", "=", "{", "}", "\n", "", "assert", "r", "not", "in", "out_adj_map", "[", "e1", "]", "\n", "out_adj_map", "[", "e1", "]", "[", "r", "]", "=", "list", "(", "e2_set", ")", "\n", "", "return", "out_adj_map", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.sample_synthetic_data.reverse_jsonify_adjacency_map": [[91, 98], ["in_adj_map.items", "r_dict.items", "set"], "function", ["None"], ["", "def", "reverse_jsonify_adjacency_map", "(", "in_adj_map", ")", ":", "\n", "    ", "out_adj_map", "=", "{", "}", "\n", "for", "e1", ",", "r_dict", "in", "in_adj_map", ".", "items", "(", ")", ":", "\n", "        ", "for", "r", ",", "e2_list", "in", "r_dict", ".", "items", "(", ")", ":", "\n", "            ", "assert", "(", "e1", ",", "r", ")", "not", "in", "out_adj_map", "\n", "out_adj_map", "[", "(", "e1", ",", "r", ")", "]", "=", "set", "(", "e2_list", ")", "\n", "", "", "return", "out_adj_map", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.preprocess_webqsp_query_encodings.encode_queries": [[10, 21], ["torch.empty", "tqdm.trange", "len", "query_encoder.get_query_embedding_dim", "query_encoder().to", "len", "query_encoder", "len"], "function", ["home.repos.pwc.inspect_result.rajarshd_cbr-subg.src.text_handler.QueryEncoder.get_query_embedding_dim"], ["def", "encode_queries", "(", "raw_data", ",", "query_encoder", ",", "eval_batch_size", ",", "device", ",", "output_device", ")", ":", "\n", "    ", "n_batches", "=", "len", "(", "raw_data", ")", "//", "eval_batch_size", "+", "(", "0", "if", "len", "(", "raw_data", ")", "%", "eval_batch_size", "==", "0", "else", "1", ")", "\n", "output_matrix", "=", "torch", ".", "empty", "(", "len", "(", "raw_data", ")", ",", "query_encoder", ".", "get_query_embedding_dim", "(", ")", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "for", "b_idx", "in", "trange", "(", "n_batches", ")", ":", "\n", "        ", "offset_st", "=", "b_idx", "*", "eval_batch_size", "\n", "offset_en", "=", "(", "b_idx", "+", "1", ")", "*", "eval_batch_size", "\n", "text_batch", "=", "[", "query", "[", "'question'", "]", "for", "query", "in", "raw_data", "[", "offset_st", ":", "offset_en", "]", "]", "\n", "batch_output", "=", "query_encoder", "(", "text_batch", "=", "text_batch", ",", "device", "=", "device", ")", ".", "to", "(", "output_device", ")", "\n", "output_matrix", "[", "offset_st", ":", "offset_en", "]", "=", "batch_output", "\n", "", "return", "output_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.preprocess_webqsp_query_encodings.main": [[23, 49], ["torch.device", "torch.device", "src.text_handler.QueryEncoder().to", "QueryEncoder().to.eval", "print", "os.path.isdir", "os.makedirs", "print", "print", "preprocess_webqsp_query_encodings.encode_queries", "os.path.join", "print", "torch.save", "print", "torch.cuda.is_available", "src.text_handler.QueryEncoder", "os.path.isdir", "args.query_encoder_model.replace", "os.path.join", "os.path.join", "open", "os.path.join", "os.path.join", "raw_data.append", "json.loads", "len"], "function", ["home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.preprocess_metaqa_query_encodings.encode_queries", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.src.text_handler.QueryEncoder.save"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "output_device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "query_encoder", "=", "QueryEncoder", "(", "args", ".", "query_encoder_model", ",", "args", ".", "pooling_type", ",", "train_query_encoder", "=", "False", ")", ".", "to", "(", "device", ")", "\n", "query_encoder", ".", "eval", "(", ")", "\n", "\n", "if", "args", ".", "output_suffix", "is", "None", ":", "\n", "        ", "args", ".", "output_suffix", "=", "args", ".", "query_encoder_model", ".", "replace", "(", "'/'", ",", "'_'", ")", "if", "os", ".", "path", ".", "isdir", "(", "args", ".", "query_encoder_model", ")", "else", "args", ".", "query_encoder_model", "\n", "args", ".", "output_suffix", "=", "args", ".", "output_suffix", "+", "'_'", "+", "args", ".", "pooling_type", "\n", "", "print", "(", "f\"Output dir: {os.path.join(args.output_dir, args.output_suffix)}\"", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "args", ".", "output_suffix", ")", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "args", ".", "output_suffix", ")", ")", "\n", "\n", "", "for", "seg", "in", "[", "'train'", ",", "'dev'", ",", "'test'", "]", ":", "\n", "        ", "print", "(", "f\"Processing {seg}...\"", ")", "\n", "raw_data", "=", "[", "]", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "data_dir", ",", "f\"{seg}_simple.json\"", ")", ")", "as", "fin", ":", "\n", "            ", "for", "line", "in", "fin", ":", "\n", "                ", "raw_data", ".", "append", "(", "json", ".", "loads", "(", "line", ")", ")", "\n", "", "", "print", "(", "f\"Found {len(raw_data)} examples\"", ")", "\n", "output_encoding", "=", "encode_queries", "(", "raw_data", ",", "query_encoder", ",", "args", ".", "eval_batch_size", ",", "device", ",", "output_device", ")", "\n", "output_filenm", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "args", ".", "output_suffix", ",", "f'query_enc_{seg}.pt'", ")", "\n", "print", "(", "f\"Saving output to {output_filenm}...\"", ")", "\n", "torch", ".", "save", "(", "output_encoding", ",", "output_filenm", ")", "\n", "print", "(", "f\"Done\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.masked_similarity.mask_query": [[11, 24], ["query.replace.replace", "isinstance"], "function", ["None"], ["def", "mask_query", "(", "t", ")", ":", "\n", "    ", "query", "=", "t", "[", "\"ProcessedQuestion\"", "]", "\n", "replaced", "=", "False", "\n", "if", "'Parses'", "in", "t", ":", "\n", "        ", "for", "p", "in", "t", "[", "'Parses'", "]", ":", "\n", "            ", "if", "\"PotentialTopicEntityMention\"", "in", "p", ":", "\n", "                ", "mention_name", "=", "p", "[", "\"PotentialTopicEntityMention\"", "]", "\n", "if", "not", "isinstance", "(", "mention_name", ",", "str", ")", ":", "\n", "                    ", "continue", "\n", "", "query", "=", "query", ".", "replace", "(", "mention_name", ",", "\"<mask>\"", ")", "\n", "replaced", "=", "True", "\n", "break", "\n", "", "", "", "return", "query", ",", "replaced", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.masked_similarity.prepare_qa_data": [[26, 68], ["os.path.join", "open", "json.load", "os.path.join", "print", "open", "json.load", "masked_similarity.mask_query", "queries.append", "unmasked_queries.append", "torch.no_grad", "tqdm.tqdm", "open", "json.dump", "range", "masked_similarity.encode_str_batch", "numpy.matmul", "numpy.argsort", "range", "os.path.join", "int", "index.transpose", "all_q_dicts.append", "numpy.ceil", "len"], "function", ["home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.process_webqsp_cwq.mask_query", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.preprocess_metaqa_synthetic.encode_str_batch"], ["", "def", "prepare_qa_data", "(", "args", ",", "train_queries", ",", "index", ")", ":", "\n", "    ", "num_replaced_ctr", "=", "0", "\n", "train_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data_dir", ",", "\"WebQSP.train.json\"", ")", "\n", "with", "open", "(", "train_file", ")", "as", "fin", ":", "\n", "        ", "train", "=", "json", ".", "load", "(", "fin", ")", "\n", "", "unmasked_train_queries", "=", "[", "t", "[", "\"ProcessedQuestion\"", "]", "for", "t", "in", "train", "[", "\"Questions\"", "]", "]", "\n", "\n", "file_names", "=", "[", "(", "\"train\"", ",", "\"WebQSP.train.json\"", ")", ",", "(", "\"test\"", ",", "\"WebQSP.test.json\"", ")", "]", "\n", "for", "split", ",", "file_name", "in", "file_names", ":", "\n", "        ", "data_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data_dir", ",", "file_name", ")", "\n", "with", "open", "(", "data_file", ")", "as", "fin", ":", "\n", "            ", "data", "=", "json", ".", "load", "(", "fin", ")", "\n", "", "queries", "=", "[", "]", "\n", "unmasked_queries", "=", "[", "]", "\n", "for", "t", "in", "data", "[", "\"Questions\"", "]", ":", "\n", "            ", "masked_query", ",", "replaced", "=", "mask_query", "(", "t", ")", "\n", "queries", ".", "append", "(", "masked_query", ")", "\n", "unmasked_queries", ".", "append", "(", "t", "[", "\"ProcessedQuestion\"", "]", ")", "\n", "if", "replaced", ":", "\n", "                ", "num_replaced_ctr", "+=", "1", "\n", "", "", "print", "(", "\"Num queries replaced by mask: {}\"", ".", "format", "(", "num_replaced_ctr", ")", ")", "\n", "all_q_dicts", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "idx", "in", "tqdm", "(", "range", "(", "int", "(", "np", ".", "ceil", "(", "len", "(", "queries", ")", "/", "args", ".", "eval_batch_size", ")", ")", ")", ")", ":", "\n", "                ", "curr_batch", "=", "queries", "[", "idx", "*", "args", ".", "eval_batch_size", ":", "(", "idx", "+", "1", ")", "*", "args", ".", "eval_batch_size", "]", "\n", "query_vecs", "=", "encode_str_batch", "(", "curr_batch", ",", "args", ".", "tokenizer", ",", "args", ".", "encoder", ",", "args", ".", "device", ",", "args", ".", "pool_type", ")", "\n", "sim", "=", "np", ".", "matmul", "(", "query_vecs", ",", "index", ".", "transpose", "(", ")", ")", "\n", "knn_inds", "=", "np", ".", "argsort", "(", "-", "sim", ",", "axis", "=", "1", ")", "\n", "knn_inds", "=", "knn_inds", "[", ":", ",", ":", "100", "]", "\n", "for", "i", "in", "range", "(", "knn_inds", ".", "shape", "[", "0", "]", ")", ":", "\n", "                    ", "nn_train_queries", "=", "[", "train_queries", "[", "knn_ind", "]", "for", "knn_ind", "in", "knn_inds", "[", "i", ",", ":", "20", "]", "]", "\n", "nn_unmasked_train_queries", "=", "[", "unmasked_train_queries", "[", "knn_ind", "]", "for", "knn_ind", "in", "knn_inds", "[", "i", ",", ":", "20", "]", "]", "\n", "q_dict", "=", "{", "\n", "\"question\"", ":", "queries", "[", "idx", "*", "args", ".", "eval_batch_size", "+", "i", "]", ",", "\n", "\"unmasked_question\"", ":", "unmasked_queries", "[", "idx", "*", "args", ".", "eval_batch_size", "+", "i", "]", ",", "\n", "\"nn_train_queries\"", ":", "nn_train_queries", ",", "\n", "\"nn_unmasked_train_queries\"", ":", "nn_unmasked_train_queries", "\n", "}", "\n", "all_q_dicts", ".", "append", "(", "q_dict", ")", "\n", "", "", "", "out_file", "=", "\"nn_{}_{}_{}.json\"", ".", "format", "(", "split", ",", "args", ".", "model_type", ",", "args", ".", "pool_type", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "out_file", ")", ",", "\"w\"", ")", "as", "fout", ":", "\n", "            ", "json", ".", "dump", "(", "all_q_dicts", ",", "fout", ",", "indent", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.masked_similarity.main": [[70, 106], ["masked_similarity.prepare_qa_data", "os.path.exists", "os.path.join", "print", "numpy.concatenate", "print", "print", "open", "json.load", "masked_similarity.mask_query", "train_queries.append", "torch.no_grad", "tqdm.tqdm", "len", "open", "pickle.dump", "open", "pickle.load", "range", "masked_similarity.encode_str_batch", "np.concatenate.append", "int", "numpy.ceil", "len"], "function", ["home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.process_webqsp_cwq.prepare_qa_data", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.process_webqsp_cwq.mask_query", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.preprocess_metaqa_synthetic.encode_str_batch"], ["", "", "", "def", "main", "(", "args", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "index_path", ")", ":", "\n", "        ", "num_replaced_ctr", "=", "0", "\n", "# read train file", "\n", "train_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data_dir", ",", "\"WebQSP.train.json\"", ")", "\n", "with", "open", "(", "train_file", ")", "as", "fin", ":", "\n", "            ", "train", "=", "json", ".", "load", "(", "fin", ")", "\n", "", "train_queries", "=", "[", "]", "\n", "for", "t", "in", "train", "[", "\"Questions\"", "]", ":", "\n", "            ", "masked_query", ",", "replaced", "=", "mask_query", "(", "t", ")", "\n", "train_queries", ".", "append", "(", "masked_query", ")", "\n", "if", "replaced", ":", "\n", "                ", "num_replaced_ctr", "+=", "1", "\n", "", "", "print", "(", "\"Num queries replaced by mask: {}\"", ".", "format", "(", "num_replaced_ctr", ")", ")", "\n", "all_indices", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "idx", "in", "tqdm", "(", "range", "(", "int", "(", "np", ".", "ceil", "(", "len", "(", "train_queries", ")", "/", "args", ".", "eval_batch_size", ")", ")", ")", ")", ":", "\n", "                ", "curr_batch", "=", "train_queries", "[", "idx", "*", "args", ".", "eval_batch_size", ":", "(", "idx", "+", "1", ")", "*", "args", ".", "eval_batch_size", "]", "\n", "context_vecs", "=", "encode_str_batch", "(", "curr_batch", ",", "args", ".", "tokenizer", ",", "args", ".", "encoder", ",", "args", ".", "device", ",", "args", ".", "pool_type", ")", "\n", "all_indices", ".", "append", "(", "context_vecs", ")", "\n", "", "", "all_indices", "=", "np", ".", "concatenate", "(", "all_indices", ")", "\n", "assert", "all_indices", ".", "shape", "[", "0", "]", "==", "len", "(", "train_queries", ")", "\n", "save_obj", "=", "{", "\"queries\"", ":", "train_queries", ",", "\"embeddings\"", ":", "all_indices", "}", "\n", "print", "(", "f\"Saving index to {args.index_path}\"", ")", "\n", "with", "open", "(", "args", ".", "index_path", ",", "\"wb\"", ")", "as", "fout", ":", "\n", "            ", "pickle", ".", "dump", "(", "save_obj", ",", "fout", ")", "\n", "", "", "else", ":", "\n", "        ", "print", "(", "\"Loading train vectors from {}\"", ".", "format", "(", "args", ".", "index_path", ")", ")", "\n", "all_indices", "=", "None", "\n", "with", "open", "(", "args", ".", "index_path", ",", "\"rb\"", ")", "as", "fin", ":", "\n", "            ", "saved_query_embeddings", "=", "pickle", ".", "load", "(", "fin", ")", "\n", "train_queries", "=", "saved_query_embeddings", "[", "\"queries\"", "]", "\n", "all_indices", "=", "saved_query_embeddings", "[", "\"embeddings\"", "]", "\n", "", "assert", "all_indices", "is", "not", "None", "\n", "\n", "", "prepare_qa_data", "(", "args", ",", "train_queries", ",", "all_indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.masked_similarity.cls_pooling": [[108, 110], ["None"], "function", ["None"], ["", "def", "cls_pooling", "(", "model_output", ",", "attention_mask", ")", ":", "\n", "    ", "return", "model_output", "[", "0", "]", "[", ":", ",", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.masked_similarity.mean_pooling": [[113, 119], ["attention_mask.unsqueeze().expand().float", "torch.sum", "torch.clamp", "attention_mask.unsqueeze().expand().float.sum", "attention_mask.unsqueeze().expand", "token_embeddings.size", "attention_mask.unsqueeze"], "function", ["home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.sample_synthetic_graph.Graph.size"], ["", "def", "mean_pooling", "(", "model_output", ",", "attention_mask", ")", ":", "\n", "    ", "token_embeddings", "=", "model_output", "[", "0", "]", "# First element of model_output contains all token embeddings", "\n", "input_mask_expanded", "=", "attention_mask", ".", "unsqueeze", "(", "-", "1", ")", ".", "expand", "(", "token_embeddings", ".", "size", "(", ")", ")", ".", "float", "(", ")", "\n", "sum_embeddings", "=", "torch", ".", "sum", "(", "token_embeddings", "*", "input_mask_expanded", ",", "1", ")", "\n", "sum_mask", "=", "torch", ".", "clamp", "(", "input_mask_expanded", ".", "sum", "(", "1", ")", ",", "min", "=", "1e-9", ")", "\n", "return", "sum_embeddings", "/", "sum_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.masked_similarity.encode_str_batch": [[121, 132], ["tokenizer", "encoder", "numpy.linalg.norm", "cls_pooling().cpu().numpy", "curr_batch[].to", "curr_batch[].to", "mean_pooling().cpu().numpy", "cls_pooling().cpu", "mean_pooling().cpu", "masked_similarity.cls_pooling", "curr_batch[].to", "masked_similarity.mean_pooling", "curr_batch[].to"], "function", ["home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.process_webqsp_cwq.cls_pooling", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.process_webqsp_cwq.mean_pooling"], ["", "def", "encode_str_batch", "(", "batch", ",", "tokenizer", ",", "encoder", ",", "device", ",", "pool_type", "=", "\"cls_pool\"", ")", ":", "\n", "    ", "curr_batch", "=", "tokenizer", "(", "batch", ",", "padding", "=", "True", ",", "return_tensors", "=", "'pt'", ")", "\n", "outputs", "=", "encoder", "(", "input_ids", "=", "curr_batch", "[", "\"input_ids\"", "]", ".", "to", "(", "device", ")", ",", "\n", "attention_mask", "=", "curr_batch", "[", "\"attention_mask\"", "]", ".", "to", "(", "device", ")", ")", "\n", "# query_vecs = outputs.pooler_output.cpu().numpy()", "\n", "if", "pool_type", "==", "\"cls_pool\"", ":", "\n", "        ", "query_vecs", "=", "cls_pooling", "(", "outputs", ",", "curr_batch", "[", "\"attention_mask\"", "]", ".", "to", "(", "device", ")", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "elif", "pool_type", "==", "\"mean_pool\"", ":", "\n", "        ", "query_vecs", "=", "mean_pooling", "(", "outputs", ",", "curr_batch", "[", "\"attention_mask\"", "]", ".", "to", "(", "device", ")", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "query_vecs", "/=", "np", ".", "linalg", ".", "norm", "(", "query_vecs", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "return", "query_vecs", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.process_webqsp_cwq.prepare_qa_data": [[14, 66], ["os.path.join", "os.path.join", "print", "print", "open", "open", "tqdm.tqdm", "open", "json.dump", "open", "json.dump", "json.loads", "train_qids.append", "train_ques_str.append", "json.loads", "len_tuples.append", "all_q_dicts.append", "all_train_nn_queries.append", "numpy.mean", "os.path.join", "os.path.join", "os.path.join", "len", "torch.no_grad", "process_webqsp_cwq.encode_str_batch", "numpy.matmul().squeeze", "q_dict.update", "nn_q_dict.update", "numpy.argsort", "numpy.matmul", "train_q_vecs.transpose"], "function", ["home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.preprocess_metaqa_synthetic.encode_str_batch", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.compgcn.message_passing.MessagePassing.update", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.compgcn.message_passing.MessagePassing.update"], ["def", "prepare_qa_data", "(", "data_dir", ",", "input_file", ",", "train_q_vecs", ",", "tokenizer", ",", "encoder", ",", "device", ",", "output_file", ",", "\n", "masked_query_map", "=", "None", ")", ":", "\n", "    ", "input_file", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "input_file", ")", "\n", "len_tuples", "=", "[", "]", "\n", "train_qids", "=", "[", "]", "\n", "train_ques_str", "=", "[", "]", "\n", "train_file", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"train_simple.json\"", ")", "\n", "with", "open", "(", "train_file", ")", "as", "fin", ":", "\n", "        ", "for", "line", "in", "fin", ":", "\n", "            ", "q_data", "=", "json", ".", "loads", "(", "line", ")", "\n", "train_qids", ".", "append", "(", "q_data", "[", "\"id\"", "]", ")", "\n", "train_ques_str", ".", "append", "(", "q_data", "[", "\"question\"", "]", ")", "\n", "", "", "all_q_dicts", "=", "[", "]", "\n", "all_train_nn_queries", "=", "[", "]", "\n", "with", "open", "(", "input_file", ")", "as", "fin", ":", "\n", "        ", "for", "line", "in", "tqdm", "(", "fin", ")", ":", "\n", "            ", "q_data", "=", "json", ".", "loads", "(", "line", ")", "\n", "q_id", "=", "q_data", "[", "\"id\"", "]", "\n", "ques_str", "=", "q_data", "[", "\"question\"", "]", "if", "masked_query_map", "is", "None", "else", "masked_query_map", "[", "q_id", "]", "\n", "seed_entities", "=", "q_data", "[", "\"entities\"", "]", "\n", "answers", "=", "[", "ans", "[", "\"kb_id\"", "]", "for", "ans", "in", "q_data", "[", "\"answers\"", "]", "]", "\n", "subgraph", "=", "q_data", "[", "\"subgraph\"", "]", "\n", "len_tuples", ".", "append", "(", "len", "(", "subgraph", "[", "\"tuples\"", "]", ")", ")", "\n", "# encode the train question", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "query_vec", "=", "encode_str_batch", "(", "[", "ques_str", "]", ",", "tokenizer", ",", "encoder", ",", "device", ",", "pool_type", ")", "\n", "sim", "=", "np", ".", "matmul", "(", "query_vec", ",", "train_q_vecs", ".", "transpose", "(", ")", ")", ".", "squeeze", "(", "0", ")", "\n", "knn_inds", "=", "np", ".", "argsort", "(", "-", "sim", ")", "[", ":", "100", "]", "\n", "knn_qids", "=", "[", "train_qids", "[", "knn_ind", "]", "for", "knn_ind", "in", "knn_inds", "]", "\n", "nn_train_queries", "=", "[", "train_ques_str", "[", "knn_ind", "]", "for", "knn_ind", "in", "knn_inds", "[", ":", "20", "]", "]", "\n", "if", "masked_query_map", "is", "not", "None", ":", "\n", "                    ", "mask_nn_train_queries", "=", "[", "masked_query_map", "[", "knn_ind", "]", "for", "knn_ind", "in", "knn_qids", "[", ":", "20", "]", "]", "\n", "", "", "q_dict", "=", "{", "\"id\"", ":", "q_id", ",", "\n", "\"seed_entities\"", ":", "seed_entities", ",", "\n", "\"question\"", ":", "q_data", "[", "\"question\"", "]", ",", "\n", "\"answer\"", ":", "answers", ",", "\n", "\"knn\"", ":", "knn_qids", ",", "\n", "\"subgraph\"", ":", "subgraph", "\n", "}", "\n", "if", "masked_query_map", "is", "not", "None", ":", "\n", "                ", "q_dict", ".", "update", "(", "{", "\"masked_question\"", ":", "masked_query_map", "[", "q_id", "]", "}", ")", "\n", "", "all_q_dicts", ".", "append", "(", "q_dict", ")", "\n", "nn_q_dict", "=", "{", "\"id\"", ":", "q_id", ",", "\"question\"", ":", "q_data", "[", "\"question\"", "]", ",", "\"knns\"", ":", "nn_train_queries", "}", "\n", "if", "masked_query_map", "is", "not", "None", ":", "\n", "                ", "nn_q_dict", ".", "update", "(", "{", "\"masked_question\"", ":", "masked_query_map", "[", "q_id", "]", ",", "\"masked_knns\"", ":", "mask_nn_train_queries", "}", ")", "\n", "", "all_train_nn_queries", ".", "append", "(", "nn_q_dict", ")", "\n", "", "", "print", "(", "\"Avg num tuples in {} file: {:1.2f}\"", ".", "format", "(", "input_file", ",", "np", ".", "mean", "(", "len_tuples", ")", ")", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "output_file", ")", ",", "\"w\"", ")", "as", "fout", ":", "\n", "        ", "json", ".", "dump", "(", "all_q_dicts", ",", "fout", ",", "indent", "=", "2", ")", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"nn_\"", "+", "output_file", ")", ",", "\"w\"", ")", "as", "fout", ":", "\n", "        ", "json", ".", "dump", "(", "all_train_nn_queries", ",", "fout", ",", "indent", "=", "2", ")", "\n", "", "print", "(", "\"Output file written to {}\"", ".", "format", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "output_file", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.process_webqsp_cwq.cls_pooling": [[68, 70], ["None"], "function", ["None"], ["", "def", "cls_pooling", "(", "model_output", ",", "attention_mask", ")", ":", "\n", "    ", "return", "model_output", "[", "0", "]", "[", ":", ",", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.process_webqsp_cwq.mean_pooling": [[73, 79], ["attention_mask.unsqueeze().expand().float", "torch.sum", "torch.clamp", "attention_mask.unsqueeze().expand().float.sum", "attention_mask.unsqueeze().expand", "token_embeddings.size", "attention_mask.unsqueeze"], "function", ["home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.sample_synthetic_graph.Graph.size"], ["", "def", "mean_pooling", "(", "model_output", ",", "attention_mask", ")", ":", "\n", "    ", "token_embeddings", "=", "model_output", "[", "0", "]", "# First element of model_output contains all token embeddings", "\n", "input_mask_expanded", "=", "attention_mask", ".", "unsqueeze", "(", "-", "1", ")", ".", "expand", "(", "token_embeddings", ".", "size", "(", ")", ")", ".", "float", "(", ")", "\n", "sum_embeddings", "=", "torch", ".", "sum", "(", "token_embeddings", "*", "input_mask_expanded", ",", "1", ")", "\n", "sum_mask", "=", "torch", ".", "clamp", "(", "input_mask_expanded", ".", "sum", "(", "1", ")", ",", "min", "=", "1e-9", ")", "\n", "return", "sum_embeddings", "/", "sum_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.process_webqsp_cwq.encode_str_batch": [[81, 92], ["tokenizer", "encoder", "numpy.linalg.norm", "cls_pooling().cpu().numpy", "curr_batch[].to", "curr_batch[].to", "mean_pooling().cpu().numpy", "cls_pooling().cpu", "mean_pooling().cpu", "process_webqsp_cwq.cls_pooling", "curr_batch[].to", "process_webqsp_cwq.mean_pooling", "curr_batch[].to"], "function", ["home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.process_webqsp_cwq.cls_pooling", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.process_webqsp_cwq.mean_pooling"], ["", "def", "encode_str_batch", "(", "batch", ",", "tokenizer", ",", "encoder", ",", "device", ",", "pool_type", "=", "\"cls_pool\"", ")", ":", "\n", "    ", "curr_batch", "=", "tokenizer", "(", "batch", ",", "padding", "=", "True", ",", "return_tensors", "=", "'pt'", ")", "\n", "outputs", "=", "encoder", "(", "input_ids", "=", "curr_batch", "[", "\"input_ids\"", "]", ".", "to", "(", "device", ")", ",", "\n", "attention_mask", "=", "curr_batch", "[", "\"attention_mask\"", "]", ".", "to", "(", "device", ")", ")", "\n", "# query_vecs = outputs.pooler_output.cpu().numpy()", "\n", "if", "pool_type", "==", "\"cls_pool\"", ":", "\n", "        ", "query_vecs", "=", "cls_pooling", "(", "outputs", ",", "curr_batch", "[", "\"attention_mask\"", "]", ".", "to", "(", "device", ")", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "elif", "pool_type", "==", "\"mean_pool\"", ":", "\n", "        ", "query_vecs", "=", "mean_pooling", "(", "outputs", ",", "curr_batch", "[", "\"attention_mask\"", "]", ".", "to", "(", "device", ")", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "query_vecs", "/=", "np", ".", "linalg", ".", "norm", "(", "query_vecs", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "return", "query_vecs", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.process_webqsp_cwq.mask_query": [[94, 117], ["query.replace.replace", "isinstance", "c.get", "entity_name.lower.lower", "query.replace.replace", "len"], "function", ["None"], ["", "def", "mask_query", "(", "t", ")", ":", "\n", "    ", "query", "=", "t", "[", "\"ProcessedQuestion\"", "]", "\n", "replaced", "=", "False", "\n", "if", "'Parses'", "in", "t", ":", "\n", "        ", "for", "p", "in", "t", "[", "'Parses'", "]", ":", "\n", "            ", "if", "\"PotentialTopicEntityMention\"", "in", "p", ":", "\n", "                ", "mention_name", "=", "p", "[", "\"PotentialTopicEntityMention\"", "]", "\n", "if", "not", "isinstance", "(", "mention_name", ",", "str", ")", ":", "\n", "                    ", "continue", "\n", "", "query", "=", "query", ".", "replace", "(", "mention_name", ",", "\"<mask>\"", ")", "\n", "replaced", "=", "True", "\n", "# sometimes constraints also has some entity mentions in the question. Get those too", "\n", "", "if", "\"Constraints\"", "in", "p", ":", "\n", "                ", "constraints", "=", "p", "[", "\"Constraints\"", "]", "\n", "for", "c", "in", "constraints", ":", "\n", "                    ", "if", "c", "[", "\"ArgumentType\"", "]", "==", "\"Entity\"", ":", "\n", "                        ", "entity_name", "=", "c", ".", "get", "(", "\"EntityName\"", ",", "None", ")", "\n", "if", "entity_name", "is", "not", "None", "and", "len", "(", "entity_name", ")", ">", "0", ":", "\n", "                            ", "entity_name", "=", "entity_name", ".", "lower", "(", ")", "\n", "query", "=", "query", ".", "replace", "(", "entity_name", ",", "\"<mask>\"", ")", "\n", "", "", "", "", "if", "replaced", ":", "\n", "                ", "break", "\n", "", "", "", "return", "query", ",", "replaced", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.preprocess_metaqa_query_encodings.encode_queries": [[10, 21], ["torch.empty", "tqdm.trange", "len", "query_encoder.get_query_embedding_dim", "query_encoder().to", "len", "query_encoder", "len"], "function", ["home.repos.pwc.inspect_result.rajarshd_cbr-subg.src.text_handler.QueryEncoder.get_query_embedding_dim"], ["def", "encode_queries", "(", "raw_data", ",", "query_encoder", ",", "eval_batch_size", ",", "device", ",", "output_device", ")", ":", "\n", "    ", "n_batches", "=", "len", "(", "raw_data", ")", "//", "eval_batch_size", "+", "(", "0", "if", "len", "(", "raw_data", ")", "%", "eval_batch_size", "==", "0", "else", "1", ")", "\n", "output_matrix", "=", "torch", ".", "empty", "(", "len", "(", "raw_data", ")", ",", "query_encoder", ".", "get_query_embedding_dim", "(", ")", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "for", "b_idx", "in", "trange", "(", "n_batches", ")", ":", "\n", "        ", "offset_st", "=", "b_idx", "*", "eval_batch_size", "\n", "offset_en", "=", "(", "b_idx", "+", "1", ")", "*", "eval_batch_size", "\n", "text_batch", "=", "[", "query", "[", "'question'", "]", "for", "query", "in", "raw_data", "[", "offset_st", ":", "offset_en", "]", "]", "\n", "batch_output", "=", "query_encoder", "(", "text_batch", "=", "text_batch", ",", "device", "=", "device", ")", ".", "to", "(", "output_device", ")", "\n", "output_matrix", "[", "offset_st", ":", "offset_en", "]", "=", "batch_output", "\n", "", "return", "output_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.preprocess_metaqa_query_encodings.main": [[23, 48], ["torch.device", "torch.device", "src.text_handler.QueryEncoder().to", "QueryEncoder().to.eval", "print", "print", "torch.cuda.is_available", "src.text_handler.QueryEncoder", "os.path.isdir", "os.makedirs", "print", "preprocess_metaqa_query_encodings.encode_queries", "os.path.join", "print", "torch.save", "print", "os.path.isdir", "args.query_encoder_model.replace", "os.path.join", "os.path.join", "open", "json.load", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.preprocess_metaqa_query_encodings.encode_queries", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.src.text_handler.QueryEncoder.save"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "output_device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "query_encoder", "=", "QueryEncoder", "(", "args", ".", "query_encoder_model", ",", "args", ".", "pooling_type", ",", "train_query_encoder", "=", "False", ")", ".", "to", "(", "device", ")", "\n", "query_encoder", ".", "eval", "(", ")", "\n", "\n", "for", "split", "in", "[", "'1-hop'", ",", "'2-hop'", ",", "'3-hop'", "]", ":", "\n", "        ", "print", "(", "f\"Split: {split}\"", ")", "\n", "if", "args", ".", "output_suffix", "is", "None", ":", "\n", "            ", "args", ".", "output_suffix", "=", "args", ".", "query_encoder_model", ".", "replace", "(", "'/'", ",", "'_'", ")", "if", "os", ".", "path", ".", "isdir", "(", "args", ".", "query_encoder_model", ")", "else", "args", ".", "query_encoder_model", "\n", "args", ".", "output_suffix", "=", "args", ".", "output_suffix", "+", "'_'", "+", "args", ".", "pooling_type", "\n", "", "print", "(", "f\"Output dir: {os.path.join(args.output_dir, split, args.output_suffix)}\"", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "split", ",", "args", ".", "output_suffix", ")", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "split", ",", "args", ".", "output_suffix", ")", ")", "\n", "\n", "", "for", "seg", "in", "[", "'train'", ",", "'dev'", ",", "'test'", "]", ":", "\n", "            ", "print", "(", "f\"Processing {seg}...\"", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "data_dir", ",", "split", ",", "f\"{seg}.json\"", ")", ")", "as", "fin", ":", "\n", "                ", "raw_train_data", "=", "json", ".", "load", "(", "fin", ")", "\n", "", "output_encoding", "=", "encode_queries", "(", "raw_train_data", ",", "query_encoder", ",", "args", ".", "eval_batch_size", ",", "device", ",", "output_device", ")", "\n", "output_filenm", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "split", ",", "args", ".", "output_suffix", ",", "f'query_enc_{seg}.pt'", ")", "\n", "print", "(", "f\"Saving output to {output_filenm}...\"", ")", "\n", "torch", ".", "save", "(", "output_encoding", ",", "output_filenm", ")", "\n", "print", "(", "f\"Done\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.sample_synthetic_graph.Graph.__init__": [[22, 31], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "max_size", ")", ":", "\n", "        ", "self", ".", "ent2id", "=", "{", "}", "\n", "self", ".", "entities", "=", "[", "]", "\n", "self", ".", "_size", "=", "0", "\n", "self", ".", "type2ent", "=", "{", "}", "\n", "self", ".", "ent_types", "=", "[", "]", "\n", "self", ".", "adj_map", "=", "{", "}", "\n", "self", ".", "adj_map_inv", "=", "{", "}", "\n", "self", ".", "max_size", "=", "max_size", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.sample_synthetic_graph.Graph.size": [[32, 34], ["None"], "methods", ["None"], ["", "def", "size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_size", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.sample_synthetic_graph.Graph.add_edge": [[35, 55], ["sample_synthetic_graph.Graph.adj_map[].add", "sample_synthetic_graph.Graph.adj_map_inv[].add"], "methods", ["None"], ["", "def", "add_edge", "(", "self", ",", "e1_id", ",", "r", ",", "e2", ")", ":", "\n", "# if e2 not in self.ent2id:", "\n", "#     self.entities.append(e2)", "\n", "#     self.ent2id[e2] = self._size", "\n", "#     self.ent_types.append(e2_type)", "\n", "#     self._size += 1", "\n", "#     if e2_type not in self.type2ent:", "\n", "#         self.type2ent[e2_type] = [e2]", "\n", "#     else:", "\n", "#         self.type2ent[e2_type].append(e2)", "\n", "\n", "        ", "if", "(", "self", ".", "entities", "[", "e1_id", "]", ",", "r", ")", "not", "in", "self", ".", "adj_map", ":", "\n", "            ", "self", ".", "adj_map", "[", "(", "self", ".", "entities", "[", "e1_id", "]", ",", "r", ")", "]", "=", "{", "e2", "}", "\n", "", "else", ":", "\n", "            ", "self", ".", "adj_map", "[", "(", "self", ".", "entities", "[", "e1_id", "]", ",", "r", ")", "]", ".", "add", "(", "e2", ")", "\n", "\n", "", "if", "(", "e2", ",", "r", "+", "\"_inv\"", ")", "not", "in", "self", ".", "adj_map_inv", ":", "\n", "            ", "self", ".", "adj_map_inv", "[", "(", "e2", ",", "r", "+", "\"_inv\"", ")", "]", "=", "{", "self", ".", "entities", "[", "e1_id", "]", "}", "\n", "", "else", ":", "\n", "            ", "self", ".", "adj_map_inv", "[", "(", "e2", ",", "r", "+", "\"_inv\"", ")", "]", ".", "add", "(", "self", ".", "entities", "[", "e1_id", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.sample_synthetic_graph.Graph.add_entity": [[56, 66], ["sample_synthetic_graph.Graph.entities.append", "sample_synthetic_graph.Graph.ent_types.append", "sample_synthetic_graph.Graph.type2ent[].append"], "methods", ["None"], ["", "", "def", "add_entity", "(", "self", ",", "e", ",", "e_type", ")", ":", "\n", "        ", "assert", "e", "not", "in", "self", ".", "ent2id", "\n", "self", ".", "entities", ".", "append", "(", "e", ")", "\n", "self", ".", "ent2id", "[", "e", "]", "=", "self", ".", "_size", "\n", "self", ".", "ent_types", ".", "append", "(", "e_type", ")", "\n", "self", ".", "_size", "+=", "1", "\n", "if", "e_type", "not", "in", "self", ".", "type2ent", ":", "\n", "            ", "self", ".", "type2ent", "[", "e_type", "]", "=", "[", "e", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "type2ent", "[", "e_type", "]", ".", "append", "(", "e", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.sample_synthetic_graph.Graph.prune_disconnected_entities": [[67, 94], ["numpy.ones", "sample_synthetic_graph.Graph.adj_map.items", "entities.extend", "ent_types.extend", "len", "print", "numpy.where", "entities.extend", "ent_types.extend", "sample_synthetic_graph.Graph.type2ent[].remove", "entities_removed.append", "len", "len", "sample_synthetic_graph.Graph.ent2id.items", "enumerate", "len"], "methods", ["None"], ["", "", "def", "prune_disconnected_entities", "(", "self", ")", ":", "\n", "        ", "unused", "=", "np", ".", "ones", "(", "self", ".", "_size", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "for", "(", "e1", ",", "r", ")", ",", "e2_list", "in", "self", ".", "adj_map", ".", "items", "(", ")", ":", "\n", "            ", "unused", "[", "self", ".", "ent2id", "[", "e1", "]", "]", "=", "0", "\n", "for", "e2", "in", "e2_list", ":", "\n", "                ", "unused", "[", "self", ".", "ent2id", "[", "e2", "]", "]", "=", "0", "\n", "", "", "idx2ent", "=", "{", "v_", ":", "k_", "for", "(", "k_", ",", "v_", ")", "in", "self", ".", "ent2id", ".", "items", "(", ")", "}", "\n", "st", "=", "0", "\n", "entities_removed", "=", "[", "]", "\n", "entities", ",", "ent_types", "=", "[", "]", ",", "[", "]", "\n", "for", "eid", "in", "np", ".", "where", "(", "unused", "==", "1", ")", "[", "0", "]", ":", "\n", "            ", "e_name", "=", "idx2ent", "[", "eid", "]", "\n", "e_type", "=", "self", ".", "ent_types", "[", "eid", "]", "\n", "entities", ".", "extend", "(", "self", ".", "entities", "[", "st", ":", "eid", "]", ")", "\n", "ent_types", ".", "extend", "(", "self", ".", "ent_types", "[", "st", ":", "eid", "]", ")", "\n", "self", ".", "type2ent", "[", "e_type", "]", ".", "remove", "(", "e_name", ")", "\n", "st", "=", "eid", "+", "1", "\n", "entities_removed", ".", "append", "(", "e_name", ")", "\n", "# Add back remaining entities and types", "\n", "", "entities", ".", "extend", "(", "self", ".", "entities", "[", "st", ":", "]", ")", "\n", "ent_types", ".", "extend", "(", "self", ".", "ent_types", "[", "st", ":", "]", ")", "\n", "self", ".", "entities", "=", "entities", "\n", "self", ".", "ent_types", "=", "ent_types", "\n", "self", ".", "ent2id", "=", "{", "e", ":", "ctr", "for", "ctr", ",", "e", "in", "enumerate", "(", "self", ".", "entities", ")", "}", "\n", "self", ".", "_size", "-=", "len", "(", "entities_removed", ")", "\n", "assert", "self", ".", "_size", "==", "len", "(", "self", ".", "entities", ")", "==", "len", "(", "self", ".", "ent2id", ")", "\n", "print", "(", "f\"pruned entities ({len(entities_removed)}): {entities_removed}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.sample_synthetic_graph.Graph.seed_entities": [[95, 101], ["len", "range", "sample_synthetic_graph.Graph.add_entity"], "methods", ["home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.sample_synthetic_graph.Graph.add_entity"], ["", "def", "seed_entities", "(", "self", ",", "entity_types", ",", "prefix", "=", "\"\"", ")", ":", "\n", "        ", "nodes_per_type", "=", "self", ".", "max_size", "//", "len", "(", "entity_types", ")", "\n", "for", "t_", "in", "entity_types", ":", "\n", "            ", "node_id_offset", "=", "self", ".", "_size", "\n", "for", "nid", "in", "range", "(", "node_id_offset", ",", "node_id_offset", "+", "nodes_per_type", ")", ":", "\n", "                ", "self", ".", "add_entity", "(", "f\"{prefix}e{nid}\"", ",", "t_", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.sample_synthetic_graph.sample_graph": [[103, 115], ["current_graph.type2ent.get", "rng.random", "current_graph.add_edge", "sample_synthetic_graph.sample_graph"], "function", ["home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.sample_synthetic_graph.Graph.add_edge", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.sample_synthetic_graph.sample_graph"], ["", "", "", "", "def", "sample_graph", "(", "rng", ":", "np", ".", "random", ".", "_generator", ".", "Generator", ",", "kb_system", ":", "dict", ",", "current_graph", ":", "Graph", ",", "src_id", ",", "max_depth", ",", "density", ",", "\n", "expanded_arr", ")", ":", "\n", "    ", "if", "max_depth", "==", "0", "or", "current_graph", ".", "ent_types", "[", "src_id", "]", "not", "in", "kb_system", "[", "'allowed_types_map'", "]", "or", "expanded_arr", "[", "src_id", "]", ":", "\n", "        ", "return", "\n", "\n", "", "expanded_arr", "[", "src_id", "]", "=", "1", "\n", "for", "new_edge_type", "in", "kb_system", "[", "'allowed_types_map'", "]", "[", "current_graph", ".", "ent_types", "[", "src_id", "]", "]", ":", "\n", "        ", "for", "tail_ent", "in", "current_graph", ".", "type2ent", ".", "get", "(", "new_edge_type", "[", "1", "]", ",", "[", "]", ")", ":", "\n", "            ", "if", "rng", ".", "random", "(", ")", "<", "density", ":", "\n", "                ", "current_graph", ".", "add_edge", "(", "src_id", ",", "new_edge_type", "[", "0", "]", ",", "tail_ent", ")", "\n", "sample_graph", "(", "rng", ",", "kb_system", ",", "current_graph", ",", "current_graph", ".", "ent2id", "[", "tail_ent", "]", ",", "max_depth", "-", "1", ",", "density", ",", "\n", "expanded_arr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.sample_synthetic_graph.insert_pattern_in_graph": [[129, 294], ["numpy.zeros", "enumerate", "print", "numpy.zeros", "enumerate", "print", "n.startswith", "len", "numpy.sum", "len", "enumerate", "len", "numpy.sum", "len", "sample_synthetic_graph.insert_pattern_in_graph._is_var"], "function", ["None"], ["", "", "", "", "def", "insert_pattern_in_graph", "(", "graph", ":", "Graph", ",", "kb_system", ":", "dict", ",", "pattern", ",", "rng", ")", ":", "\n", "    ", "def", "_is_bound", "(", "n", ":", "str", ",", "_bindings", ")", ":", "\n", "        ", "return", "not", "n", ".", "startswith", "(", "'?'", ")", "or", "n", "in", "_bindings", "\n", "\n", "", "def", "_is_var", "(", "n", ":", "str", ")", ":", "\n", "        ", "return", "n", ".", "startswith", "(", "'?'", ")", "\n", "\n", "", "bindings", "=", "{", "}", "\n", "constraints", "=", "{", "}", "\n", "edges_bound", "=", "np", ".", "zeros", "(", "len", "(", "pattern", ")", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "for", "e_ctr", ",", "(", "p_1", ",", "p_r", ",", "p_2", ")", "in", "enumerate", "(", "pattern", ")", ":", "\n", "        ", "if", "not", "_is_var", "(", "p_1", ")", ":", "\n", "            ", "bindings", "[", "p_1", "]", "=", "[", "p_1", "]", "\n", "", "else", ":", "\n", "            ", "if", "p_1", "not", "in", "constraints", ":", "\n", "                ", "constraints", "[", "p_1", "]", "=", "[", "]", "\n", "", "constraints", "[", "p_1", "]", ".", "append", "(", "(", "e_ctr", ",", "0", ")", ")", "\n", "", "if", "not", "_is_var", "(", "p_2", ")", ":", "\n", "            ", "bindings", "[", "p_2", "]", "=", "[", "p_2", "]", "\n", "", "else", ":", "\n", "            ", "if", "p_2", "not", "in", "constraints", ":", "\n", "                ", "constraints", "[", "p_2", "]", "=", "[", "]", "\n", "", "constraints", "[", "p_2", "]", ".", "append", "(", "(", "e_ctr", ",", "2", ")", ")", "\n", "", "if", "_is_bound", "(", "p_1", ",", "bindings", ")", "and", "_is_bound", "(", "p_2", ",", "bindings", ")", ":", "\n", "            ", "if", "(", "p_1", ",", "p_r", ")", "not", "in", "collected_graph", ".", "adj_map", ":", "\n", "                ", "collected_graph", ".", "adj_map", "[", "(", "p_1", ",", "p_r", ")", "]", "=", "set", "(", ")", "\n", "", "if", "(", "p_2", ",", "p_r", "+", "\"_inv\"", ")", "not", "in", "collected_graph", ".", "adj_map_inv", ":", "\n", "                ", "collected_graph", ".", "adj_map_inv", "[", "(", "p_2", ",", "p_r", "+", "\"_inv\"", ")", "]", "=", "set", "(", ")", "\n", "", "if", "p_2", "not", "in", "collected_graph", ".", "adj_map", "[", "(", "p_1", ",", "p_r", ")", "]", ":", "\n", "                ", "collected_graph", ".", "adj_map", "[", "(", "p_1", ",", "p_r", ")", "]", ".", "add", "(", "p_2", ")", "\n", "collected_graph", ".", "adj_map_inv", "[", "(", "p_2", ",", "p_r", "+", "\"_inv\"", ")", "]", ".", "add", "(", "p_1", ")", "\n", "", "print", "(", "f\"new edge added: ({p_1}, {p_r}, {p_2})\"", ")", "\n", "edges_bound", "[", "e_ctr", "]", "=", "1", "\n", "\n", "", "", "while", "np", ".", "sum", "(", "edges_bound", ")", "<", "len", "(", "pattern", ")", ":", "\n", "        ", "for", "e_ctr", ",", "(", "p_1", ",", "p_r", ",", "p_2", ")", "in", "enumerate", "(", "pattern", ")", ":", "\n", "            ", "if", "edges_bound", "[", "e_ctr", "]", ":", "\n", "                ", "continue", "\n", "\n", "", "if", "_is_bound", "(", "p_1", ",", "bindings", ")", "and", "_is_bound", "(", "p_2", ",", "bindings", ")", ":", "\n", "                ", "new_bindings_p_1", ",", "new_bindings_p_2", "=", "[", "]", ",", "[", "]", "\n", "for", "e1_bind", "in", "bindings", "[", "p_1", "]", ":", "\n", "                    ", "if", "(", "e1_bind", ",", "p_r", ")", "not", "in", "graph", ".", "adj_map", ":", "\n", "                        ", "continue", "\n", "", "valid_e1_bind", "=", "False", "\n", "for", "e2_bind", "in", "bindings", "[", "p_2", "]", ":", "\n", "                        ", "if", "e2_bind", "in", "graph", ".", "adj_map", "[", "(", "e1_bind", ",", "p_r", ")", "]", ":", "\n", "                            ", "valid_e1_bind", "=", "True", "\n", "new_bindings_p_2", ".", "append", "(", "e2_bind", ")", "\n", "", "", "if", "valid_e1_bind", ":", "\n", "                        ", "new_bindings_p_1", ".", "append", "(", "e1_bind", ")", "\n", "", "", "new_bindings_p_1", "=", "sorted", "(", "set", "(", "new_bindings_p_1", ")", ")", "\n", "new_bindings_p_2", "=", "sorted", "(", "set", "(", "new_bindings_p_2", ")", ")", "\n", "if", "len", "(", "new_bindings_p_1", ")", "==", "0", "or", "len", "(", "new_bindings_p_2", ")", "==", "0", ":", "\n", "# no valid binding", "\n", "                    ", "print", "(", "f\"new edge added: ({bindings[p_1][0]}, {p_r}, {bindings[p_2][0]})\"", ")", "\n", "graph", ".", "add_edge", "(", "graph", ".", "ent2id", "[", "bindings", "[", "p_1", "]", "[", "0", "]", "]", ",", "p_r", ",", "bindings", "[", "p_2", "]", "[", "0", "]", ")", "\n", "new_bindings_p_1", ",", "new_bindings_p_2", "=", "[", "bindings", "[", "p_1", "]", "[", "0", "]", "]", ",", "[", "bindings", "[", "p_2", "]", "[", "0", "]", "]", "\n", "", "if", "set", "(", "new_bindings_p_1", ")", "!=", "set", "(", "bindings", "[", "p_1", "]", ")", ":", "\n", "                    ", "print", "(", "f\"binding for {p_1} pruned from {sorted(bindings[p_1])} to {new_bindings_p_1}\"", ")", "\n", "bindings", "[", "p_1", "]", "=", "new_bindings_p_1", "\n", "if", "p_1", "in", "constraints", ":", "\n", "                        ", "for", "c_edge", "in", "constraints", "[", "p_1", "]", ":", "\n", "                            ", "edges_bound", "[", "c_edge", "[", "0", "]", "]", "=", "0", "\n", "\n", "", "", "", "if", "set", "(", "new_bindings_p_2", ")", "!=", "set", "(", "bindings", "[", "p_2", "]", ")", ":", "\n", "                    ", "print", "(", "f\"binding for {p_2} pruned from {sorted(bindings[p_2])} to {new_bindings_p_2}\"", ")", "\n", "bindings", "[", "p_2", "]", "=", "new_bindings_p_2", "\n", "if", "p_2", "in", "constraints", ":", "\n", "                        ", "for", "c_edge", "in", "constraints", "[", "p_2", "]", ":", "\n", "                            ", "edges_bound", "[", "c_edge", "[", "0", "]", "]", "=", "0", "\n", "\n", "", "", "", "edges_bound", "[", "e_ctr", "]", "=", "1", "\n", "continue", "\n", "\n", "", "if", "_is_bound", "(", "p_1", ",", "bindings", ")", "and", "not", "_is_bound", "(", "p_2", ",", "bindings", ")", ":", "\n", "                ", "new_bindings_p_1", "=", "[", "]", "\n", "bindings", "[", "p_2", "]", "=", "[", "]", "\n", "for", "e_bind", "in", "bindings", "[", "p_1", "]", ":", "\n", "                    ", "if", "(", "e_bind", ",", "p_r", ")", "not", "in", "graph", ".", "adj_map", ":", "\n", "                        ", "continue", "\n", "", "new_bindings_p_1", ".", "append", "(", "e_bind", ")", "\n", "bindings", "[", "p_2", "]", ".", "extend", "(", "list", "(", "graph", ".", "adj_map", "[", "(", "e_bind", ",", "p_r", ")", "]", ")", ")", "\n", "", "bindings", "[", "p_2", "]", "=", "list", "(", "set", "(", "bindings", "[", "p_2", "]", ")", ")", "\n", "\n", "if", "not", "bindings", "[", "p_2", "]", ":", "\n", "                    ", "e_bind", "=", "bindings", "[", "p_1", "]", "[", "0", "]", "\n", "new_bindings_p_1", "=", "[", "e_bind", "]", "\n", "tail_ent_type", "=", "''", "\n", "for", "edge_type", "in", "kb_system", "[", "'allowed_types_map'", "]", "[", "graph", ".", "ent_types", "[", "graph", ".", "ent2id", "[", "e_bind", "]", "]", "]", ":", "\n", "                        ", "if", "edge_type", "[", "0", "]", "==", "p_r", ":", "\n", "                            ", "tail_ent_type", "=", "edge_type", "[", "1", "]", "\n", "break", "\n", "", "", "assert", "tail_ent_type", "is", "not", "''", "\n", "tail_ent_options", "=", "graph", ".", "type2ent", "[", "tail_ent_type", "]", "\n", "tail_ent", "=", "tail_ent_options", "[", "rng", ".", "integers", "(", "len", "(", "tail_ent_options", ")", ")", "]", "\n", "graph", ".", "add_edge", "(", "graph", ".", "ent2id", "[", "e_bind", "]", ",", "p_r", ",", "tail_ent", ")", "\n", "bindings", "[", "p_2", "]", "=", "[", "tail_ent", "]", "\n", "print", "(", "f\"new edge added: ({e_bind}, {p_r}, {tail_ent})\"", ")", "\n", "\n", "", "if", "set", "(", "new_bindings_p_1", ")", "!=", "set", "(", "bindings", "[", "p_1", "]", ")", ":", "\n", "                    ", "print", "(", "f\"binding for {p_1} pruned from {sorted(bindings[p_1])} to {new_bindings_p_1}\"", ")", "\n", "bindings", "[", "p_1", "]", "=", "new_bindings_p_1", "\n", "if", "p_1", "in", "constraints", ":", "\n", "                        ", "for", "c_edge", "in", "constraints", "[", "p_1", "]", ":", "\n", "                            ", "edges_bound", "[", "c_edge", "[", "0", "]", "]", "=", "0", "\n", "\n", "", "", "", "edges_bound", "[", "e_ctr", "]", "=", "1", "\n", "continue", "\n", "\n", "", "if", "_is_bound", "(", "p_2", ",", "bindings", ")", "and", "not", "_is_bound", "(", "p_1", ",", "bindings", ")", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "\n", "", "", "", "print", "(", "'Verifying pattern bindings...'", ")", "\n", "edges_bound_v2", "=", "np", ".", "zeros", "(", "len", "(", "pattern", ")", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "for", "e_ctr", ",", "(", "p_1", ",", "p_r", ",", "p_2", ")", "in", "enumerate", "(", "pattern", ")", ":", "\n", "        ", "if", "not", "_is_var", "(", "p_1", ")", "and", "not", "_is_var", "(", "p_2", ")", ":", "\n", "            ", "if", "p_2", "not", "in", "graph", ".", "adj_map", "[", "(", "p_1", ",", "p_r", ")", "]", ":", "\n", "                ", "print", "(", "f\"0: no valid binding for {p_2} in edge {e_ctr}\"", ")", "\n", "continue", "\n", "", "", "elif", "not", "_is_var", "(", "p_1", ")", "and", "_is_var", "(", "p_2", ")", ":", "\n", "            ", "new_bindings", "=", "[", "]", "\n", "for", "e_bind", "in", "bindings", "[", "p_2", "]", ":", "\n", "                ", "if", "e_bind", "in", "graph", ".", "adj_map", "[", "(", "p_1", ",", "p_r", ")", "]", ":", "\n", "                    ", "new_bindings", ".", "append", "(", "e_bind", ")", "\n", "", "", "if", "len", "(", "new_bindings", ")", "==", "0", ":", "\n", "                ", "print", "(", "f\"1: no valid binding for {p_2} in edge {e_ctr}\"", ")", "\n", "continue", "\n", "", "if", "set", "(", "new_bindings", ")", "!=", "set", "(", "bindings", "[", "p_2", "]", ")", ":", "\n", "                ", "print", "(", "f\"1: binding for {p_2} pruned from {sorted(bindings[p_2])} to {sorted(new_bindings)}\"", ")", "\n", "bindings", "[", "p_2", "]", "=", "new_bindings", "\n", "", "", "elif", "_is_var", "(", "p_1", ")", "and", "not", "_is_var", "(", "p_2", ")", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "elif", "_is_var", "(", "p_1", ")", "and", "_is_var", "(", "p_2", ")", ":", "\n", "            ", "new_bindings_p_1", ",", "new_bindings_p_2", "=", "[", "]", ",", "[", "]", "\n", "for", "e1_bind", "in", "bindings", "[", "p_1", "]", ":", "\n", "                ", "if", "(", "e1_bind", ",", "p_r", ")", "not", "in", "graph", ".", "adj_map", ":", "\n", "                    ", "continue", "\n", "", "valid_e1_bind", "=", "False", "\n", "for", "e2_bind", "in", "bindings", "[", "p_2", "]", ":", "\n", "                    ", "if", "e2_bind", "in", "graph", ".", "adj_map", "[", "(", "e1_bind", ",", "p_r", ")", "]", ":", "\n", "                        ", "valid_e1_bind", "=", "True", "\n", "new_bindings_p_2", ".", "append", "(", "e2_bind", ")", "\n", "", "", "if", "valid_e1_bind", ":", "\n", "                    ", "new_bindings_p_1", ".", "append", "(", "e1_bind", ")", "\n", "", "", "new_bindings_p_1", "=", "sorted", "(", "set", "(", "new_bindings_p_1", ")", ")", "\n", "new_bindings_p_2", "=", "sorted", "(", "set", "(", "new_bindings_p_2", ")", ")", "\n", "if", "len", "(", "new_bindings_p_1", ")", "==", "0", ":", "\n", "                ", "print", "(", "f\"2: no valid binding for {p_1} in edge {e_ctr}\"", ")", "\n", "continue", "\n", "", "if", "len", "(", "new_bindings_p_2", ")", "==", "0", ":", "\n", "                ", "print", "(", "f\"2: no valid binding for {p_2} in edge {e_ctr}\"", ")", "\n", "continue", "\n", "", "if", "set", "(", "new_bindings_p_1", ")", "!=", "set", "(", "bindings", "[", "p_1", "]", ")", ":", "\n", "                ", "print", "(", "f\"2: binding for {p_1} pruned from {sorted(bindings[p_1])} to {new_bindings_p_1}\"", ")", "\n", "bindings", "[", "p_1", "]", "=", "new_bindings_p_1", "\n", "", "if", "set", "(", "new_bindings_p_2", ")", "!=", "set", "(", "bindings", "[", "p_2", "]", ")", ":", "\n", "                ", "print", "(", "f\"2: binding for {p_2} pruned from {sorted(bindings[p_2])} to {new_bindings_p_2}\"", ")", "\n", "bindings", "[", "p_2", "]", "=", "new_bindings_p_2", "\n", "", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"You should not be in this block of code. There is an error in the pattern\"", ")", "\n", "", "edges_bound_v2", "[", "e_ctr", "]", "=", "1", "\n", "", "assert", "np", ".", "sum", "(", "edges_bound_v2", ")", "==", "len", "(", "pattern", ")", "\n", "print", "(", "'Verified pattern bindings.'", ")", "\n", "return", "bindings", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.preprocess_metaqa_synthetic.get_khop_subgraph": [[14, 28], ["set", "set", "set", "range", "set.update", "set", "set.union", "full_kb[].items", "set.update"], "function", ["home.repos.pwc.inspect_result.rajarshd_cbr-subg.compgcn.message_passing.MessagePassing.update", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.compgcn.message_passing.MessagePassing.update"], ["def", "get_khop_subgraph", "(", "seed_ent", ",", "full_kb", ",", "k", ")", ":", "\n", "    ", "src_nodes", "=", "set", "(", "seed_ent", ")", "\n", "explored", "=", "set", "(", ")", "\n", "new_src", "=", "set", "(", ")", "\n", "subgraph", "=", "{", "}", "\n", "for", "step", "in", "range", "(", "k", ")", ":", "\n", "        ", "for", "s_e", "in", "src_nodes", ":", "\n", "            ", "subgraph", "[", "s_e", "]", "=", "full_kb", "[", "s_e", "]", "\n", "for", "r", ",", "e2_list", "in", "full_kb", "[", "s_e", "]", ".", "items", "(", ")", ":", "\n", "                ", "new_src", ".", "update", "(", "e2_list", ")", "\n", "", "", "explored", ".", "update", "(", "src_nodes", ")", "\n", "src_nodes", "=", "new_src", "-", "explored", "\n", "new_src", "=", "set", "(", ")", "\n", "", "return", "subgraph", ",", "explored", ".", "union", "(", "src_nodes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.preprocess_metaqa_synthetic.graph_analytics": [[30, 38], ["graph.items", "set", "node_set.add", "re2_map.items", "len", "node_set.update", "len"], "function", ["home.repos.pwc.inspect_result.rajarshd_cbr-subg.compgcn.message_passing.MessagePassing.update"], ["", "def", "graph_analytics", "(", "graph", ")", ":", "\n", "    ", "node_set", ",", "edge_ctr", "=", "set", "(", ")", ",", "0", "\n", "for", "e1", ",", "re2_map", "in", "graph", ".", "items", "(", ")", ":", "\n", "        ", "node_set", ".", "add", "(", "e1", ")", "\n", "for", "r", ",", "e2_list", "in", "re2_map", ".", "items", "(", ")", ":", "\n", "            ", "node_set", ".", "update", "(", "e2_list", ")", "\n", "edge_ctr", "+=", "len", "(", "e2_list", ")", "\n", "", "", "return", "len", "(", "node_set", ")", ",", "edge_ctr", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.preprocess_metaqa_synthetic.load_dataset": [[40, 73], ["open", "tqdm.tqdm", "enumerate", "line.strip().split", "ans.split", "re.findall", "list", "preprocess_metaqa_synthetic.get_khop_subgraph", "preprocess_metaqa_synthetic.graph_analytics", "dset_analytics[].append", "dset_analytics[].append", "dset_analytics[].append", "dset.append", "set", "len", "line.strip", "query[].add", "s_e.title", "query[].add", "[].append", "s_e.title"], "function", ["home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.preprocess_metaqa_synthetic.get_khop_subgraph", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.preprocess_metaqa_synthetic.graph_analytics"], ["", "def", "load_dataset", "(", "filenm", ",", "full_kb", ",", "entity_vocab", ")", ":", "\n", "    ", "dset", "=", "[", "]", "\n", "dset_analytics", "=", "[", "[", "]", ",", "[", "]", ",", "[", "]", "]", "\n", "with", "open", "(", "filenm", ")", "as", "fin", ":", "\n", "        ", "for", "line_ctr", ",", "line", "in", "tqdm", "(", "enumerate", "(", "fin", ")", ")", ":", "\n", "            ", "query", "=", "{", "'id'", ":", "line_ctr", ",", "'seed_entities'", ":", "set", "(", ")", "}", "\n", "q", ",", "ans", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "query", "[", "'question'", "]", "=", "q", "\n", "query", "[", "'answer'", "]", "=", "ans", ".", "split", "(", "'|'", ")", "\n", "for", "a", "in", "query", "[", "'answer'", "]", ":", "\n", "                ", "assert", "a", "in", "entity_vocab", "\n", "\n", "", "seed_e", "=", "re", ".", "findall", "(", "r'\\[(.*)\\]'", ",", "q", ")", "\n", "for", "s_e", "in", "seed_e", ":", "\n", "                ", "if", "s_e", "in", "entity_vocab", ":", "\n", "                    ", "query", "[", "'seed_entities'", "]", ".", "add", "(", "s_e", ")", "\n", "", "if", "s_e", ".", "title", "(", ")", "in", "entity_vocab", ":", "\n", "                    ", "query", "[", "'seed_entities'", "]", ".", "add", "(", "s_e", ".", "title", "(", ")", ")", "\n", "", "", "query", "[", "'seed_entities'", "]", "=", "list", "(", "query", "[", "'seed_entities'", "]", ")", "\n", "assert", "len", "(", "query", "[", "'seed_entities'", "]", ")", ">", "0", "\n", "khop_adj", ",", "subgraph_entity_set", "=", "get_khop_subgraph", "(", "query", "[", "'seed_entities'", "]", ",", "full_kb", ",", "3", ")", "\n", "subgraph_stats", "=", "graph_analytics", "(", "khop_adj", ")", "\n", "dset_analytics", "[", "0", "]", ".", "append", "(", "subgraph_stats", "[", "0", "]", ")", "\n", "dset_analytics", "[", "1", "]", ".", "append", "(", "subgraph_stats", "[", "1", "]", ")", "\n", "query", "[", "'debugging'", "]", "=", "{", "'missing_ans'", ":", "[", "]", "}", "\n", "missing_ans", "=", "False", "\n", "for", "a", "in", "query", "[", "'answer'", "]", ":", "\n", "                ", "if", "a", "not", "in", "subgraph_entity_set", ":", "\n", "                    ", "missing_ans", "=", "True", "\n", "query", "[", "'debugging'", "]", "[", "'missing_ans'", "]", ".", "append", "(", "a", ")", "\n", "", "", "dset_analytics", "[", "2", "]", ".", "append", "(", "1", "if", "missing_ans", "else", "0", ")", "\n", "dset", ".", "append", "(", "query", ")", "\n", "", "", "return", "dset", ",", "dset_analytics", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.preprocess_metaqa_synthetic.encode_str_batch": [[75, 82], ["tokenizer", "encoder", "encoder.pooler_output.cpu().numpy", "numpy.linalg.norm", "curr_batch[].to", "curr_batch[].to", "encoder.pooler_output.cpu"], "function", ["None"], ["", "def", "encode_str_batch", "(", "batch", ",", "tokenizer", ",", "encoder", ",", "device", ")", ":", "\n", "    ", "curr_batch", "=", "tokenizer", "(", "batch", ",", "padding", "=", "True", ",", "return_tensors", "=", "'pt'", ")", "\n", "outputs", "=", "encoder", "(", "input_ids", "=", "curr_batch", "[", "\"input_ids\"", "]", ".", "to", "(", "device", ")", ",", "\n", "attention_mask", "=", "curr_batch", "[", "\"attention_mask\"", "]", ".", "to", "(", "device", ")", ")", "\n", "query_vecs", "=", "outputs", ".", "pooler_output", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "query_vecs", "/=", "np", ".", "linalg", ".", "norm", "(", "query_vecs", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "return", "query_vecs", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.preprocess_metaqa_synthetic.add_neighbors": [[84, 102], ["torch.no_grad", "tqdm.trange", "int", "preprocess_metaqa_synthetic.encode_str_batch", "case_index.search", "range", "numpy.ceil", "print", "print", "print", "len", "case_id[].tolist", "len", "int"], "function", ["home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.preprocess_metaqa_synthetic.encode_str_batch"], ["", "def", "add_neighbors", "(", "args", ",", "case_index", ",", "dset", ",", "tokenizer", ",", "encoder", ",", "device", ",", "split", "=", "'eval'", ")", ":", "\n", "    ", "query_list", "=", "[", "query", "[", "'question'", "]", "for", "query", "in", "dset", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "idx", "in", "trange", "(", "int", "(", "np", ".", "ceil", "(", "len", "(", "query_list", ")", "/", "args", ".", "eval_batch_size", ")", ")", ")", ":", "\n", "            ", "curr_batch", "=", "query_list", "[", "idx", "*", "args", ".", "eval_batch_size", ":", "(", "idx", "+", "1", ")", "*", "args", ".", "eval_batch_size", "]", "\n", "query_vecs", "=", "encode_str_batch", "(", "curr_batch", ",", "tokenizer", ",", "encoder", ",", "device", ")", "\n", "case_dist", ",", "case_id", "=", "case_index", ".", "search", "(", "query_vecs", ",", "args", ".", "n_cases", "+", "1", "if", "split", "==", "'train'", "else", "args", ".", "n_cases", ")", "\n", "if", "idx", "==", "0", ":", "\n", "                ", "print", "(", "\"Sanity check\"", ")", "\n", "print", "(", "case_id", "[", ":", "4", "]", ")", "\n", "print", "(", "case_dist", "[", ":", "4", "]", ")", "\n", "", "for", "k", "in", "range", "(", "len", "(", "curr_batch", ")", ")", ":", "\n", "                ", "ex_id", "=", "idx", "*", "args", ".", "eval_batch_size", "+", "k", "\n", "assert", "'knn'", "not", "in", "dset", "[", "ex_id", "]", "\n", "if", "split", "==", "'train'", ":", "\n", "                    ", "dset", "[", "ex_id", "]", "[", "\"knn\"", "]", "=", "[", "int", "(", "c", ")", "for", "c", "in", "case_id", "[", "k", "]", "if", "c", "!=", "ex_id", "]", "[", ":", "args", ".", "n_cases", "]", "\n", "", "else", ":", "\n", "                    ", "dset", "[", "ex_id", "]", "[", "\"knn\"", "]", "=", "case_id", "[", "k", "]", ".", "tolist", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.preprocess_metaqa_synthetic.main": [[104, 217], ["preprocess_metaqa_synthetic.graph_analytics", "print", "transformers.AutoTokenizer.from_pretrained", "transformers.AutoModel.from_pretrained().to", "AutoModel.from_pretrained().to.eval", "set", "set", "open", "len", "torch.cuda.is_available", "torch.device", "torch.device", "print", "shutil.copyfile", "print", "preprocess_metaqa_synthetic.load_dataset", "os.path.join", "print", "preprocess_metaqa_synthetic.add_neighbors", "print", "print", "print", "print", "print", "print", "print", "print", "preprocess_metaqa_synthetic.load_dataset", "print", "preprocess_metaqa_synthetic.add_neighbors", "print", "print", "print", "print", "print", "print", "print", "print", "preprocess_metaqa_synthetic.load_dataset", "print", "preprocess_metaqa_synthetic.add_neighbors", "print", "print", "print", "print", "print", "print", "print", "os.path.join", "line.strip().split", "kb.setdefault().setdefault().append", "kb.setdefault().setdefault().append", "entity_vocab.add", "entity_vocab.add", "rel_vocab.add", "rel_vocab.add", "transformers.AutoModel.from_pretrained", "os.path.isdir", "os.makedirs", "os.path.join", "os.path.join", "os.path.join", "os.path.exists", "print", "faiss.IndexFlatIP", "numpy.concatenate", "print", "faiss.read_index.add", "print", "faiss.write_index", "print", "faiss.read_index", "open", "json.dump", "os.path.join", "open", "json.dump", "os.path.join", "open", "json.dump", "len", "os.path.join", "os.path.join", "torch.no_grad", "range", "os.path.join", "os.path.join", "os.path.join", "line.strip", "kb.setdefault().setdefault", "kb.setdefault().setdefault", "int", "preprocess_metaqa_synthetic.encode_str_batch", "np.concatenate.append", "numpy.mean", "numpy.max", "numpy.mean", "numpy.max", "numpy.sum", "numpy.mean", "numpy.max", "numpy.mean", "numpy.max", "numpy.sum", "numpy.mean", "numpy.max", "numpy.mean", "numpy.max", "numpy.sum", "numpy.ceil", "numpy.mean", "numpy.mean", "numpy.mean", "kb.setdefault", "kb.setdefault", "numpy.mean", "numpy.max", "numpy.mean", "numpy.max", "numpy.mean", "numpy.max", "numpy.mean", "numpy.max", "numpy.mean", "numpy.max", "numpy.mean", "numpy.max", "len"], "function", ["home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.preprocess_metaqa_synthetic.graph_analytics", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.preprocess_metaqa_synthetic.load_dataset", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.preprocess_metaqa_synthetic.add_neighbors", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.preprocess_metaqa_synthetic.load_dataset", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.preprocess_metaqa_synthetic.add_neighbors", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.preprocess_metaqa_synthetic.load_dataset", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.preprocess_metaqa_synthetic.add_neighbors", "home.repos.pwc.inspect_result.rajarshd_cbr-subg.scripts.preprocess_metaqa_synthetic.encode_str_batch"], ["", "", "", "", "", "def", "main", "(", "args", ")", ":", "\n", "    ", "kb", "=", "{", "}", "\n", "entity_vocab", ",", "rel_vocab", "=", "set", "(", ")", ",", "set", "(", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "src_dir", ",", "'kb.txt'", ")", ")", "as", "fin", ":", "\n", "        ", "for", "line", "in", "fin", ":", "\n", "            ", "e1", ",", "r", ",", "e2", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'|'", ")", "\n", "kb", ".", "setdefault", "(", "e1", ",", "{", "}", ")", ".", "setdefault", "(", "r", ",", "[", "]", ")", ".", "append", "(", "e2", ")", "\n", "kb", ".", "setdefault", "(", "e2", ",", "{", "}", ")", ".", "setdefault", "(", "r", "+", "'_inv'", ",", "[", "]", ")", ".", "append", "(", "e1", ")", "\n", "entity_vocab", ".", "add", "(", "e1", ")", "\n", "entity_vocab", ".", "add", "(", "e2", ")", "\n", "rel_vocab", ".", "add", "(", "r", ")", "\n", "rel_vocab", ".", "add", "(", "r", "+", "'_inv'", ")", "\n", "", "", "full_kb_stats", "=", "graph_analytics", "(", "kb", ")", "\n", "assert", "full_kb_stats", "[", "0", "]", "==", "len", "(", "entity_vocab", ")", "\n", "print", "(", "f\"KB has {full_kb_stats[0]} entities, {len(rel_vocab)} relations and {full_kb_stats[1]} edges\"", ")", "\n", "\n", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "torch", ".", "device", "(", "'cpu'", ")", "\n", "tokenizer", "=", "AutoTokenizer", ".", "from_pretrained", "(", "args", ".", "model", ")", "\n", "encoder", "=", "AutoModel", ".", "from_pretrained", "(", "args", ".", "model", ")", ".", "to", "(", "device", ")", "\n", "encoder", ".", "eval", "(", ")", "\n", "\n", "for", "split", "in", "[", "'1-hop'", ",", "'2-hop'", ",", "'3-hop'", "]", ":", "\n", "        ", "print", "(", "f\"Split: {split}\"", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "split", ")", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "split", ")", ")", "\n", "\n", "", "shutil", ".", "copyfile", "(", "os", ".", "path", ".", "join", "(", "args", ".", "src_dir", ",", "'kb.txt'", ")", ",", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "split", ",", "'kb.txt'", ")", ")", "\n", "\n", "print", "(", "\"Loading train set\"", ")", "\n", "train_dset", ",", "train_dset_analytics", "=", "load_dataset", "(", "os", ".", "path", ".", "join", "(", "args", ".", "src_dir", ",", "split", ",", "'vanilla'", ",", "'qa_train.txt'", ")", ",", "\n", "kb", ",", "entity_vocab", ")", "\n", "\n", "index_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "split", ",", "'case_index'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "index_path", ")", ":", "\n", "            ", "print", "(", "\"Encoding train queries\"", ")", "\n", "train_queries", "=", "[", "query", "[", "'question'", "]", "for", "query", "in", "train_dset", "]", "\n", "case_index", "=", "faiss", ".", "IndexFlatIP", "(", "encoder", ".", "config", ".", "hidden_size", ")", "\n", "all_indices", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "for", "idx", "in", "range", "(", "int", "(", "np", ".", "ceil", "(", "len", "(", "train_queries", ")", "/", "args", ".", "eval_batch_size", ")", ")", ")", ":", "\n", "                    ", "curr_batch", "=", "train_queries", "[", "idx", "*", "args", ".", "eval_batch_size", ":", "(", "idx", "+", "1", ")", "*", "args", ".", "eval_batch_size", "]", "\n", "context_vecs", "=", "encode_str_batch", "(", "curr_batch", ",", "tokenizer", ",", "encoder", ",", "device", ")", "\n", "all_indices", ".", "append", "(", "context_vecs", ")", "\n", "", "", "all_indices", "=", "np", ".", "concatenate", "(", "all_indices", ")", "\n", "print", "(", "f\"Adding {all_indices.shape[0]} vectors to the index\"", ")", "\n", "case_index", ".", "add", "(", "all_indices", ")", "\n", "print", "(", "f\"Saving index to {index_path}\"", ")", "\n", "faiss", ".", "write_index", "(", "case_index", ",", "index_path", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"Loading train query index\"", ")", "\n", "case_index", "=", "faiss", ".", "read_index", "(", "index_path", ")", "\n", "\n", "", "print", "(", "\"Adding nearest neighbors to train queries\"", ")", "\n", "add_neighbors", "(", "args", ",", "case_index", ",", "train_dset", ",", "tokenizer", ",", "encoder", ",", "device", ",", "split", "=", "'train'", ")", "\n", "\n", "print", "(", "\"-- Train analytics --\"", ")", "\n", "print", "(", "f\"Mean number of nodes in subgraphs: {np.mean(train_dset_analytics[0]): 0.2f} \"", "\n", "f\"({np.mean(train_dset_analytics[0]) / full_kb_stats[0] * 100: 0.2f}% of full KB)\"", ")", "\n", "print", "(", "f\"Max number of nodes in subgraphs: {np.max(train_dset_analytics[0])} \"", "\n", "f\"({np.max(train_dset_analytics[0]) / full_kb_stats[0] * 100: 0.2f}% of full KB)\"", ")", "\n", "print", "(", "f\"Mean number of edges in subgraphs: {np.mean(train_dset_analytics[1]): 0.2f} \"", "\n", "f\"({np.mean(train_dset_analytics[1]) / full_kb_stats[1] * 100: 0.2f}% of full KB)\"", ")", "\n", "print", "(", "f\"Max number of edges in subgraphs: {np.max(train_dset_analytics[1])} \"", "\n", "f\"({np.max(train_dset_analytics[1]) / full_kb_stats[1] * 100: 0.2f}% of full KB)\"", ")", "\n", "print", "(", "f\"Queries with answer outside 3-hop subgraph: {np.sum(train_dset_analytics[2])} \"", "\n", "f\"({np.mean(train_dset_analytics[2]) * 100: 0.2f}% of train dataset)\"", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "split", ",", "'train.json'", ")", ",", "'w'", ")", "as", "fout", ":", "\n", "            ", "json", ".", "dump", "(", "train_dset", ",", "fout", ",", "indent", "=", "2", ")", "\n", "", "print", "(", "'---------------'", ")", "\n", "\n", "print", "(", "\"Loading dev set\"", ")", "\n", "dev_dset", ",", "dev_dset_analytics", "=", "load_dataset", "(", "os", ".", "path", ".", "join", "(", "args", ".", "src_dir", ",", "split", ",", "'vanilla'", ",", "'qa_dev.txt'", ")", ",", "\n", "kb", ",", "entity_vocab", ")", "\n", "\n", "print", "(", "\"Adding nearest neighbors to dev queries\"", ")", "\n", "add_neighbors", "(", "args", ",", "case_index", ",", "dev_dset", ",", "tokenizer", ",", "encoder", ",", "device", ")", "\n", "\n", "print", "(", "\"-- Dev analytics --\"", ")", "\n", "print", "(", "f\"Mean number of nodes in subgraphs: {np.mean(dev_dset_analytics[0]): 0.2f} \"", "\n", "f\"({np.mean(dev_dset_analytics[0]) / full_kb_stats[0] * 100: 0.2f}% of full KB)\"", ")", "\n", "print", "(", "f\"Max number of nodes in subgraphs: {np.max(dev_dset_analytics[0])} \"", "\n", "f\"({np.max(dev_dset_analytics[0]) / full_kb_stats[0] * 100: 0.2f}% of full KB)\"", ")", "\n", "print", "(", "f\"Mean number of edges in subgraphs: {np.mean(dev_dset_analytics[1]): 0.2f} \"", "\n", "f\"({np.mean(dev_dset_analytics[1]) / full_kb_stats[1] * 100: 0.2f}% of full KB)\"", ")", "\n", "print", "(", "f\"Max number of edges in subgraphs: {np.max(dev_dset_analytics[1])} \"", "\n", "f\"({np.max(dev_dset_analytics[1]) / full_kb_stats[1] * 100: 0.2f}% of full KB)\"", ")", "\n", "print", "(", "f\"Queries with answer outside 3-hop subgraph: {np.sum(dev_dset_analytics[2])} \"", "\n", "f\"({np.mean(dev_dset_analytics[2]) * 100: 0.2f}% of dev dataset)\"", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "split", ",", "'dev.json'", ")", ",", "'w'", ")", "as", "fout", ":", "\n", "            ", "json", ".", "dump", "(", "dev_dset", ",", "fout", ",", "indent", "=", "2", ")", "\n", "", "print", "(", "'---------------'", ")", "\n", "\n", "print", "(", "\"Loading test set\"", ")", "\n", "test_dset", ",", "test_dset_analytics", "=", "load_dataset", "(", "os", ".", "path", ".", "join", "(", "args", ".", "src_dir", ",", "split", ",", "'vanilla'", ",", "'qa_test.txt'", ")", ",", "\n", "kb", ",", "entity_vocab", ")", "\n", "\n", "print", "(", "\"Adding nearest neighbors to test queries\"", ")", "\n", "add_neighbors", "(", "args", ",", "case_index", ",", "test_dset", ",", "tokenizer", ",", "encoder", ",", "device", ")", "\n", "\n", "print", "(", "\"-- Test analytics --\"", ")", "\n", "print", "(", "f\"Mean number of nodes in subgraphs: {np.mean(test_dset_analytics[0]): 0.2f} \"", "\n", "f\"({np.mean(test_dset_analytics[0]) / full_kb_stats[0] * 100: 0.2f}% of full KB)\"", ")", "\n", "print", "(", "f\"Max number of nodes in subgraphs: {np.max(test_dset_analytics[0])} \"", "\n", "f\"({np.max(test_dset_analytics[0]) / full_kb_stats[0] * 100: 0.2f}% of full KB)\"", ")", "\n", "print", "(", "f\"Mean number of edges in subgraphs: {np.mean(test_dset_analytics[1]): 0.2f} \"", "\n", "f\"({np.mean(test_dset_analytics[1]) / full_kb_stats[1] * 100: 0.2f}% of full KB)\"", ")", "\n", "print", "(", "f\"Max number of edges in subgraphs: {np.max(test_dset_analytics[1])} \"", "\n", "f\"({np.max(test_dset_analytics[1]) / full_kb_stats[1] * 100: 0.2f}% of full KB)\"", ")", "\n", "print", "(", "f\"Queries with answer outside 3-hop subgraph: {np.sum(test_dset_analytics[2])} \"", "\n", "f\"({np.mean(test_dset_analytics[2]) * 100: 0.2f}% of test dataset)\"", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "split", ",", "'test.json'", ")", ",", "'w'", ")", "as", "fout", ":", "\n", "            ", "json", ".", "dump", "(", "test_dset", ",", "fout", ",", "indent", "=", "2", ")", "\n", "", "print", "(", "'---------------'", ")", "\n", "\n"]]}