{"home.repos.pwc.inspect_result.openai_vdvae.None.train_helpers.update_ema": [[23, 27], ["zip", "vae.parameters", "ema_vae.parameters", "p2.data.mul_", "p2.data.add_"], "function", ["None"], ["def", "update_ema", "(", "vae", ",", "ema_vae", ",", "ema_rate", ")", ":", "\n", "    ", "for", "p1", ",", "p2", "in", "zip", "(", "vae", ".", "parameters", "(", ")", ",", "ema_vae", ".", "parameters", "(", ")", ")", ":", "\n", "        ", "p2", ".", "data", ".", "mul_", "(", "ema_rate", ")", "\n", "p2", ".", "data", ".", "add_", "(", "p1", ".", "data", "*", "(", "1", "-", "ema_rate", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.openai_vdvae.None.train_helpers.save_model": [[29, 36], ["torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "os.path.join", "subprocess.check_output", "vae.state_dict", "ema_vae.state_dict", "optimizer.state_dict", "os.path.dirname", "os.path.basename"], "function", ["None"], ["", "", "def", "save_model", "(", "path", ",", "vae", ",", "ema_vae", ",", "optimizer", ",", "H", ")", ":", "\n", "    ", "torch", ".", "save", "(", "vae", ".", "state_dict", "(", ")", ",", "f'{path}-model.th'", ")", "\n", "torch", ".", "save", "(", "ema_vae", ".", "state_dict", "(", ")", ",", "f'{path}-model-ema.th'", ")", "\n", "torch", ".", "save", "(", "optimizer", ".", "state_dict", "(", ")", ",", "f'{path}-opt.th'", ")", "\n", "from_log", "=", "os", ".", "path", ".", "join", "(", "H", ".", "save_dir", ",", "'log.jsonl'", ")", "\n", "to_log", "=", "f'{os.path.dirname(path)}/{os.path.basename(path)}-log.jsonl'", "\n", "subprocess", ".", "check_output", "(", "[", "'cp'", ",", "from_log", ",", "to_log", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.openai_vdvae.None.train_helpers.accumulate_stats": [[38, 60], ["numpy.sum", "numpy.array", "len", "numpy.max", "numpy.mean", "numpy.mean", "numpy.isfinite", "numpy.array", "numpy.mean", "numpy.isfinite", "numpy.mean", "len"], "function", ["None"], ["", "def", "accumulate_stats", "(", "stats", ",", "frequency", ")", ":", "\n", "    ", "z", "=", "{", "}", "\n", "for", "k", "in", "stats", "[", "-", "1", "]", ":", "\n", "        ", "if", "k", "in", "[", "'distortion_nans'", ",", "'rate_nans'", ",", "'skipped_updates'", ",", "'gcskip'", "]", ":", "\n", "            ", "z", "[", "k", "]", "=", "np", ".", "sum", "(", "[", "a", "[", "k", "]", "for", "a", "in", "stats", "[", "-", "frequency", ":", "]", "]", ")", "\n", "", "elif", "k", "==", "'grad_norm'", ":", "\n", "            ", "vals", "=", "[", "a", "[", "k", "]", "for", "a", "in", "stats", "[", "-", "frequency", ":", "]", "]", "\n", "finites", "=", "np", ".", "array", "(", "vals", ")", "[", "np", ".", "isfinite", "(", "vals", ")", "]", "\n", "if", "len", "(", "finites", ")", "==", "0", ":", "\n", "                ", "z", "[", "k", "]", "=", "0.0", "\n", "", "else", ":", "\n", "                ", "z", "[", "k", "]", "=", "np", ".", "max", "(", "finites", ")", "\n", "", "", "elif", "k", "==", "'elbo'", ":", "\n", "            ", "vals", "=", "[", "a", "[", "k", "]", "for", "a", "in", "stats", "[", "-", "frequency", ":", "]", "]", "\n", "finites", "=", "np", ".", "array", "(", "vals", ")", "[", "np", ".", "isfinite", "(", "vals", ")", "]", "\n", "z", "[", "'elbo'", "]", "=", "np", ".", "mean", "(", "vals", ")", "\n", "z", "[", "'elbo_filtered'", "]", "=", "np", ".", "mean", "(", "finites", ")", "\n", "", "elif", "k", "==", "'iter_time'", ":", "\n", "            ", "z", "[", "k", "]", "=", "stats", "[", "-", "1", "]", "[", "k", "]", "if", "len", "(", "stats", ")", "<", "frequency", "else", "np", ".", "mean", "(", "[", "a", "[", "k", "]", "for", "a", "in", "stats", "[", "-", "frequency", ":", "]", "]", ")", "\n", "", "else", ":", "\n", "            ", "z", "[", "k", "]", "=", "np", ".", "mean", "(", "[", "a", "[", "k", "]", "for", "a", "in", "stats", "[", "-", "frequency", ":", "]", "]", ")", "\n", "", "", "return", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.openai_vdvae.None.train_helpers.linear_warmup": [[62, 66], ["None"], "function", ["None"], ["", "def", "linear_warmup", "(", "warmup_iters", ")", ":", "\n", "    ", "def", "f", "(", "iteration", ")", ":", "\n", "        ", "return", "1.0", "if", "iteration", ">", "warmup_iters", "else", "iteration", "/", "warmup_iters", "\n", "", "return", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.openai_vdvae.None.train_helpers.setup_mpi": [[68, 79], ["utils.mpi_size", "utils.local_mpi_rank", "utils.mpi_rank", "str", "str", "str", "mpi4py.MPI.COMM_WORLD.bcast", "torch.cuda.set_device", "torch.cuda.set_device", "torch.init_process_group", "socket.gethostname"], "function", ["home.repos.pwc.inspect_result.openai_vdvae.None.utils.mpi_size", "home.repos.pwc.inspect_result.openai_vdvae.None.utils.local_mpi_rank", "home.repos.pwc.inspect_result.openai_vdvae.None.utils.mpi_rank"], ["", "def", "setup_mpi", "(", "H", ")", ":", "\n", "    ", "H", ".", "mpi_size", "=", "mpi_size", "(", ")", "\n", "H", ".", "local_rank", "=", "local_mpi_rank", "(", ")", "\n", "H", ".", "rank", "=", "mpi_rank", "(", ")", "\n", "os", ".", "environ", "[", "\"RANK\"", "]", "=", "str", "(", "H", ".", "rank", ")", "\n", "os", ".", "environ", "[", "\"WORLD_SIZE\"", "]", "=", "str", "(", "H", ".", "mpi_size", ")", "\n", "os", ".", "environ", "[", "\"MASTER_PORT\"", "]", "=", "str", "(", "H", ".", "port", ")", "\n", "# os.environ[\"NCCL_LL_THRESHOLD\"] = \"0\"", "\n", "os", ".", "environ", "[", "\"MASTER_ADDR\"", "]", "=", "MPI", ".", "COMM_WORLD", ".", "bcast", "(", "socket", ".", "gethostname", "(", ")", ",", "root", "=", "0", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "H", ".", "local_rank", ")", "\n", "dist", ".", "init_process_group", "(", "backend", "=", "'nccl'", ",", "init_method", "=", "f\"env://\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.openai_vdvae.None.train_helpers.distributed_maybe_download": [[81, 88], ["path[].replace", "path.startswith", "train_helpers.first_rank_first", "utils.maybe_download", "utils.mpi_size", "utils.mpi_size"], "function", ["home.repos.pwc.inspect_result.openai_vdvae.None.train_helpers.first_rank_first", "home.repos.pwc.inspect_result.openai_vdvae.None.utils.maybe_download", "home.repos.pwc.inspect_result.openai_vdvae.None.utils.mpi_size", "home.repos.pwc.inspect_result.openai_vdvae.None.utils.mpi_size"], ["", "def", "distributed_maybe_download", "(", "path", ",", "local_rank", ",", "mpi_size", ")", ":", "\n", "    ", "if", "not", "path", ".", "startswith", "(", "'gs://'", ")", ":", "\n", "        ", "return", "path", "\n", "", "filename", "=", "path", "[", "5", ":", "]", ".", "replace", "(", "'/'", ",", "'-'", ")", "\n", "with", "first_rank_first", "(", "local_rank", ",", "mpi_size", ")", ":", "\n", "        ", "fp", "=", "maybe_download", "(", "path", ",", "filename", ")", "\n", "", "return", "fp", "\n", "\n"]], "home.repos.pwc.inspect_result.openai_vdvae.None.train_helpers.first_rank_first": [[90, 100], ["torch.barrier", "torch.barrier", "utils.mpi_size"], "function", ["home.repos.pwc.inspect_result.openai_vdvae.None.utils.mpi_size"], ["", "@", "contextmanager", "\n", "def", "first_rank_first", "(", "local_rank", ",", "mpi_size", ")", ":", "\n", "    ", "if", "mpi_size", ">", "1", "and", "local_rank", ">", "0", ":", "\n", "        ", "dist", ".", "barrier", "(", ")", "\n", "\n", "", "try", ":", "\n", "        ", "yield", "\n", "", "finally", ":", "\n", "        ", "if", "mpi_size", ">", "1", "and", "local_rank", "==", "0", ":", "\n", "            ", "dist", ".", "barrier", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.openai_vdvae.None.train_helpers.setup_save_dirs": [[102, 106], ["os.path.join", "data.mkdir_p", "os.path.join"], "function", ["home.repos.pwc.inspect_result.openai_vdvae.None.data.mkdir_p"], ["", "", "", "def", "setup_save_dirs", "(", "H", ")", ":", "\n", "    ", "H", ".", "save_dir", "=", "os", ".", "path", ".", "join", "(", "H", ".", "save_dir", ",", "H", ".", "desc", ")", "\n", "mkdir_p", "(", "H", ".", "save_dir", ")", "\n", "H", ".", "logdir", "=", "os", ".", "path", ".", "join", "(", "H", ".", "save_dir", ",", "'log'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.openai_vdvae.None.train_helpers.set_up_hyperparams": [[108, 123], ["hps.Hyperparams", "argparse.ArgumentParser", "hps.add_vae_arguments", "hps.parse_args_and_update_hparams", "train_helpers.setup_mpi", "train_helpers.setup_save_dirs", "utils.logger", "enumerate", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "utils.logger.", "sorted", "utils.logger."], "function", ["home.repos.pwc.inspect_result.openai_vdvae.None.hps.add_vae_arguments", "home.repos.pwc.inspect_result.openai_vdvae.None.hps.parse_args_and_update_hparams", "home.repos.pwc.inspect_result.openai_vdvae.None.train_helpers.setup_mpi", "home.repos.pwc.inspect_result.openai_vdvae.None.train_helpers.setup_save_dirs", "home.repos.pwc.inspect_result.openai_vdvae.None.utils.logger"], ["", "def", "set_up_hyperparams", "(", "s", "=", "None", ")", ":", "\n", "    ", "H", "=", "Hyperparams", "(", ")", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", "=", "add_vae_arguments", "(", "parser", ")", "\n", "parse_args_and_update_hparams", "(", "H", ",", "parser", ",", "s", "=", "s", ")", "\n", "setup_mpi", "(", "H", ")", "\n", "setup_save_dirs", "(", "H", ")", "\n", "logprint", "=", "logger", "(", "H", ".", "logdir", ")", "\n", "for", "i", ",", "k", "in", "enumerate", "(", "sorted", "(", "H", ")", ")", ":", "\n", "        ", "logprint", "(", "type", "=", "'hparam'", ",", "key", "=", "k", ",", "value", "=", "H", "[", "k", "]", ")", "\n", "", "np", ".", "random", ".", "seed", "(", "H", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "H", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "H", ".", "seed", ")", "\n", "logprint", "(", "'training model'", ",", "H", ".", "desc", ",", "'on'", ",", "H", ".", "dataset", ")", "\n", "return", "H", ",", "logprint", "\n", "\n"]], "home.repos.pwc.inspect_result.openai_vdvae.None.train_helpers.restore_params": [[125, 137], ["torch.load", "torch.load", "model.load_state_dict", "train_helpers.distributed_maybe_download", "len", "k.startswith"], "function", ["home.repos.pwc.inspect_result.openai_vdvae.None.train_helpers.distributed_maybe_download"], ["", "def", "restore_params", "(", "model", ",", "path", ",", "local_rank", ",", "mpi_size", ",", "map_ddp", "=", "True", ",", "map_cpu", "=", "False", ")", ":", "\n", "    ", "state_dict", "=", "torch", ".", "load", "(", "distributed_maybe_download", "(", "path", ",", "local_rank", ",", "mpi_size", ")", ",", "map_location", "=", "'cpu'", "if", "map_cpu", "else", "None", ")", "\n", "if", "map_ddp", ":", "\n", "        ", "new_state_dict", "=", "{", "}", "\n", "l", "=", "len", "(", "'module.'", ")", "\n", "for", "k", "in", "state_dict", ":", "\n", "            ", "if", "k", ".", "startswith", "(", "'module.'", ")", ":", "\n", "                ", "new_state_dict", "[", "k", "[", "l", ":", "]", "]", "=", "state_dict", "[", "k", "]", "\n", "", "else", ":", "\n", "                ", "new_state_dict", "[", "k", "]", "=", "state_dict", "[", "k", "]", "\n", "", "", "state_dict", "=", "new_state_dict", "\n", "", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.openai_vdvae.None.train_helpers.restore_log": [[139, 148], ["max", "max", "json.loads", "min", "open", "float", "train_helpers.distributed_maybe_download"], "function", ["home.repos.pwc.inspect_result.openai_vdvae.None.train_helpers.distributed_maybe_download"], ["", "def", "restore_log", "(", "path", ",", "local_rank", ",", "mpi_size", ")", ":", "\n", "    ", "loaded", "=", "[", "json", ".", "loads", "(", "l", ")", "for", "l", "in", "open", "(", "distributed_maybe_download", "(", "path", ",", "local_rank", ",", "mpi_size", ")", ")", "]", "\n", "try", ":", "\n", "        ", "cur_eval_loss", "=", "min", "(", "[", "z", "[", "'elbo'", "]", "for", "z", "in", "loaded", "if", "'type'", "in", "z", "and", "z", "[", "'type'", "]", "==", "'eval_loss'", "]", ")", "\n", "", "except", "ValueError", ":", "\n", "        ", "cur_eval_loss", "=", "float", "(", "'inf'", ")", "\n", "", "starting_epoch", "=", "max", "(", "[", "z", "[", "'epoch'", "]", "for", "z", "in", "loaded", "if", "'type'", "in", "z", "and", "z", "[", "'type'", "]", "==", "'train_loss'", "]", ")", "\n", "iterate", "=", "max", "(", "[", "z", "[", "'step'", "]", "for", "z", "in", "loaded", "if", "'type'", "in", "z", "and", "z", "[", "'type'", "]", "==", "'train_loss'", "]", ")", "\n", "return", "cur_eval_loss", ",", "iterate", ",", "starting_epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.openai_vdvae.None.train_helpers.load_vaes": [[150, 176], ["vae.VAE", "vae.VAE", "ema_vae.cuda.requires_grad_", "torch.nn.parallel.distributed.DistributedDataParallel.cuda", "ema_vae.cuda.cuda", "torch.nn.parallel.distributed.DistributedDataParallel", "torch.nn.parallel.distributed.DistributedDataParallel.named_parameters", "logprint", "logprint", "train_helpers.restore_params", "logprint", "train_helpers.restore_params", "ema_vae.cuda.load_state_dict", "len", "len", "ValueError", "numpy.prod", "torch.nn.parallel.distributed.DistributedDataParallel.state_dict", "list", "list", "torch.nn.parallel.distributed.DistributedDataParallel.named_parameters", "torch.nn.parallel.distributed.DistributedDataParallel.parameters"], "function", ["home.repos.pwc.inspect_result.openai_vdvae.None.train_helpers.restore_params", "home.repos.pwc.inspect_result.openai_vdvae.None.train_helpers.restore_params"], ["", "def", "load_vaes", "(", "H", ",", "logprint", ")", ":", "\n", "    ", "vae", "=", "VAE", "(", "H", ")", "\n", "if", "H", ".", "restore_path", ":", "\n", "        ", "logprint", "(", "f'Restoring vae from {H.restore_path}'", ")", "\n", "restore_params", "(", "vae", ",", "H", ".", "restore_path", ",", "map_cpu", "=", "True", ",", "local_rank", "=", "H", ".", "local_rank", ",", "mpi_size", "=", "H", ".", "mpi_size", ")", "\n", "\n", "", "ema_vae", "=", "VAE", "(", "H", ")", "\n", "if", "H", ".", "restore_ema_path", ":", "\n", "        ", "logprint", "(", "f'Restoring ema vae from {H.restore_ema_path}'", ")", "\n", "restore_params", "(", "ema_vae", ",", "H", ".", "restore_ema_path", ",", "map_cpu", "=", "True", ",", "local_rank", "=", "H", ".", "local_rank", ",", "mpi_size", "=", "H", ".", "mpi_size", ")", "\n", "", "else", ":", "\n", "        ", "ema_vae", ".", "load_state_dict", "(", "vae", ".", "state_dict", "(", ")", ")", "\n", "", "ema_vae", ".", "requires_grad_", "(", "False", ")", "\n", "\n", "vae", "=", "vae", ".", "cuda", "(", "H", ".", "local_rank", ")", "\n", "ema_vae", "=", "ema_vae", ".", "cuda", "(", "H", ".", "local_rank", ")", "\n", "\n", "vae", "=", "DistributedDataParallel", "(", "vae", ",", "device_ids", "=", "[", "H", ".", "local_rank", "]", ",", "output_device", "=", "H", ".", "local_rank", ")", "\n", "\n", "if", "len", "(", "list", "(", "vae", ".", "named_parameters", "(", ")", ")", ")", "!=", "len", "(", "list", "(", "vae", ".", "parameters", "(", ")", ")", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'Some params are not named. Please name all params.'", ")", "\n", "", "total_params", "=", "0", "\n", "for", "name", ",", "p", "in", "vae", ".", "named_parameters", "(", ")", ":", "\n", "        ", "total_params", "+=", "np", ".", "prod", "(", "p", ".", "shape", ")", "\n", "", "logprint", "(", "total_params", "=", "total_params", ",", "readable", "=", "f'{total_params:,}'", ")", "\n", "return", "vae", ",", "ema_vae", "\n", "\n"]], "home.repos.pwc.inspect_result.openai_vdvae.None.train_helpers.load_opt": [[178, 191], ["apex.optimizers.FusedAdam", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "logprint", "vae.parameters", "apex.optimizers.FusedAdam.load_state_dict", "train_helpers.restore_log", "train_helpers.linear_warmup", "torch.load", "torch.load", "float", "train_helpers.distributed_maybe_download"], "function", ["home.repos.pwc.inspect_result.openai_vdvae.None.train_helpers.restore_log", "home.repos.pwc.inspect_result.openai_vdvae.None.train_helpers.linear_warmup", "home.repos.pwc.inspect_result.openai_vdvae.None.train_helpers.distributed_maybe_download"], ["", "def", "load_opt", "(", "H", ",", "vae", ",", "logprint", ")", ":", "\n", "    ", "optimizer", "=", "AdamW", "(", "vae", ".", "parameters", "(", ")", ",", "weight_decay", "=", "H", ".", "wd", ",", "lr", "=", "H", ".", "lr", ",", "betas", "=", "(", "H", ".", "adam_beta1", ",", "H", ".", "adam_beta2", ")", ")", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "LambdaLR", "(", "optimizer", ",", "lr_lambda", "=", "linear_warmup", "(", "H", ".", "warmup_iters", ")", ")", "\n", "\n", "if", "H", ".", "restore_optimizer_path", ":", "\n", "        ", "optimizer", ".", "load_state_dict", "(", "\n", "torch", ".", "load", "(", "distributed_maybe_download", "(", "H", ".", "restore_optimizer_path", ",", "H", ".", "local_rank", ",", "H", ".", "mpi_size", ")", ",", "map_location", "=", "'cpu'", ")", ")", "\n", "", "if", "H", ".", "restore_log_path", ":", "\n", "        ", "cur_eval_loss", ",", "iterate", ",", "starting_epoch", "=", "restore_log", "(", "H", ".", "restore_log_path", ",", "H", ".", "local_rank", ",", "H", ".", "mpi_size", ")", "\n", "", "else", ":", "\n", "        ", "cur_eval_loss", ",", "iterate", ",", "starting_epoch", "=", "float", "(", "'inf'", ")", ",", "0", ",", "0", "\n", "", "logprint", "(", "'starting at epoch'", ",", "starting_epoch", ",", "'iterate'", ",", "iterate", ",", "'eval loss'", ",", "cur_eval_loss", ")", "\n", "return", "optimizer", ",", "scheduler", ",", "cur_eval_loss", ",", "iterate", ",", "starting_epoch", "\n", "", ""]], "home.repos.pwc.inspect_result.openai_vdvae.None.hps.Hyperparams.__getattr__": [[5, 10], ["None"], "methods", ["None"], ["    ", "def", "__getattr__", "(", "self", ",", "attr", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "return", "self", "[", "attr", "]", "\n", "", "except", "KeyError", ":", "\n", "            ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.openai_vdvae.None.hps.Hyperparams.__setattr__": [[11, 13], ["None"], "methods", ["None"], ["", "", "def", "__setattr__", "(", "self", ",", "attr", ",", "value", ")", ":", "\n", "        ", "self", "[", "attr", "]", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.openai_vdvae.None.hps.parse_args_and_update_hparams": [[93, 104], ["parser.parse_args", "set", "H.update", "parser.parse_args.__dict__.keys", "parser.set_defaults", "parser.parse_args.hparam_sets.split", "parser.parse_args", "ValueError"], "function", ["None"], ["def", "parse_args_and_update_hparams", "(", "H", ",", "parser", ",", "s", "=", "None", ")", ":", "\n", "    ", "args", "=", "parser", ".", "parse_args", "(", "s", ")", "\n", "valid_args", "=", "set", "(", "args", ".", "__dict__", ".", "keys", "(", ")", ")", "\n", "hparam_sets", "=", "[", "x", "for", "x", "in", "args", ".", "hparam_sets", ".", "split", "(", "','", ")", "if", "x", "]", "\n", "for", "hp_set", "in", "hparam_sets", ":", "\n", "        ", "hps", "=", "HPARAMS_REGISTRY", "[", "hp_set", "]", "\n", "for", "k", "in", "hps", ":", "\n", "            ", "if", "k", "not", "in", "valid_args", ":", "\n", "                ", "raise", "ValueError", "(", "f\"{k} not in default args\"", ")", "\n", "", "", "parser", ".", "set_defaults", "(", "**", "hps", ")", "\n", "", "H", ".", "update", "(", "parser", ".", "parse_args", "(", "s", ")", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.openai_vdvae.None.hps.add_vae_arguments": [[106, 160], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "function", ["None"], ["", "def", "add_vae_arguments", "(", "parser", ")", ":", "\n", "    ", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--port'", ",", "type", "=", "int", ",", "default", "=", "29500", ")", "\n", "parser", ".", "add_argument", "(", "'--save_dir'", ",", "type", "=", "str", ",", "default", "=", "'./saved_models'", ")", "\n", "parser", ".", "add_argument", "(", "'--data_root'", ",", "type", "=", "str", ",", "default", "=", "'./'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--desc'", ",", "type", "=", "str", ",", "default", "=", "'test'", ")", "\n", "parser", ".", "add_argument", "(", "'--hparam_sets'", ",", "'--hps'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--restore_path'", ",", "type", "=", "str", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "'--restore_ema_path'", ",", "type", "=", "str", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "'--restore_log_path'", ",", "type", "=", "str", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "'--restore_optimizer_path'", ",", "type", "=", "str", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "type", "=", "str", ",", "default", "=", "'cifar10'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--ema_rate'", ",", "type", "=", "float", ",", "default", "=", "0.999", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--enc_blocks'", ",", "type", "=", "str", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "'--dec_blocks'", ",", "type", "=", "str", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "'--zdim'", ",", "type", "=", "int", ",", "default", "=", "16", ")", "\n", "parser", ".", "add_argument", "(", "'--width'", ",", "type", "=", "int", ",", "default", "=", "512", ")", "\n", "parser", ".", "add_argument", "(", "'--custom_width_str'", ",", "type", "=", "str", ",", "default", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'--bottleneck_multiple'", ",", "type", "=", "float", ",", "default", "=", "0.25", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--no_bias_above'", ",", "type", "=", "int", ",", "default", "=", "64", ")", "\n", "parser", ".", "add_argument", "(", "'--scale_encblock'", ",", "action", "=", "\"store_true\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--test_eval'", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "'--warmup_iters'", ",", "type", "=", "float", ",", "default", "=", "0", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--num_mixtures'", ",", "type", "=", "int", ",", "default", "=", "10", ")", "\n", "parser", ".", "add_argument", "(", "'--grad_clip'", ",", "type", "=", "float", ",", "default", "=", "200.0", ")", "\n", "parser", ".", "add_argument", "(", "'--skip_threshold'", ",", "type", "=", "float", ",", "default", "=", "400.0", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.00015", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_prior'", ",", "type", "=", "float", ",", "default", "=", "0.00015", ")", "\n", "parser", ".", "add_argument", "(", "'--wd'", ",", "type", "=", "float", ",", "default", "=", "0.0", ")", "\n", "parser", ".", "add_argument", "(", "'--wd_prior'", ",", "type", "=", "float", ",", "default", "=", "0.0", ")", "\n", "parser", ".", "add_argument", "(", "'--num_epochs'", ",", "type", "=", "int", ",", "default", "=", "10000", ")", "\n", "parser", ".", "add_argument", "(", "'--n_batch'", ",", "type", "=", "int", ",", "default", "=", "32", ")", "\n", "parser", ".", "add_argument", "(", "'--adam_beta1'", ",", "type", "=", "float", ",", "default", "=", "0.9", ")", "\n", "parser", ".", "add_argument", "(", "'--adam_beta2'", ",", "type", "=", "float", ",", "default", "=", "0.9", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--temperature'", ",", "type", "=", "float", ",", "default", "=", "1.0", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--iters_per_ckpt'", ",", "type", "=", "int", ",", "default", "=", "25000", ")", "\n", "parser", ".", "add_argument", "(", "'--iters_per_print'", ",", "type", "=", "int", ",", "default", "=", "1000", ")", "\n", "parser", ".", "add_argument", "(", "'--iters_per_save'", ",", "type", "=", "int", ",", "default", "=", "10000", ")", "\n", "parser", ".", "add_argument", "(", "'--iters_per_images'", ",", "type", "=", "int", ",", "default", "=", "10000", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs_per_eval'", ",", "type", "=", "int", ",", "default", "=", "10", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs_per_probe'", ",", "type", "=", "int", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs_per_eval_save'", ",", "type", "=", "int", ",", "default", "=", "20", ")", "\n", "parser", ".", "add_argument", "(", "'--num_images_visualize'", ",", "type", "=", "int", ",", "default", "=", "8", ")", "\n", "parser", ".", "add_argument", "(", "'--num_variables_visualize'", ",", "type", "=", "int", ",", "default", "=", "6", ")", "\n", "parser", ".", "add_argument", "(", "'--num_temperatures_visualize'", ",", "type", "=", "int", ",", "default", "=", "3", ")", "\n", "return", "parser", "\n", "", ""]], "home.repos.pwc.inspect_result.openai_vdvae.None.vae_helpers.HModule.__init__": [[140, 144], ["torch.Module.__init__", "vae_helpers.HModule.build"], "methods", ["home.repos.pwc.inspect_result.openai_vdvae.None.vae.DecBlock.__init__", "home.repos.pwc.inspect_result.openai_vdvae.None.vae.VAE.build"], ["    ", "def", "__init__", "(", "self", ",", "H", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "H", "=", "H", "\n", "self", ".", "build", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.openai_vdvae.None.vae_helpers.DmolNet.__init__": [[147, 152], ["torch.Module.__init__", "vae_helpers.get_conv"], "methods", ["home.repos.pwc.inspect_result.openai_vdvae.None.vae.DecBlock.__init__", "home.repos.pwc.inspect_result.openai_vdvae.None.vae_helpers.get_conv"], ["    ", "def", "__init__", "(", "self", ",", "H", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "H", "=", "H", "\n", "self", ".", "width", "=", "H", ".", "width", "\n", "self", ".", "out_conv", "=", "get_conv", "(", "H", ".", "width", ",", "H", ".", "num_mixtures", "*", "10", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.openai_vdvae.None.vae_helpers.DmolNet.nll": [[153, 155], ["vae_helpers.discretized_mix_logistic_loss", "vae_helpers.DmolNet.forward"], "methods", ["home.repos.pwc.inspect_result.openai_vdvae.None.vae_helpers.discretized_mix_logistic_loss", "home.repos.pwc.inspect_result.openai_vdvae.None.vae.VAE.forward"], ["", "def", "nll", "(", "self", ",", "px_z", ",", "x", ")", ":", "\n", "        ", "return", "discretized_mix_logistic_loss", "(", "x", "=", "x", ",", "l", "=", "self", ".", "forward", "(", "px_z", ")", ",", "low_bit", "=", "self", ".", "H", ".", "dataset", "in", "[", "'ffhq_256'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.openai_vdvae.None.vae_helpers.DmolNet.forward": [[156, 159], ["vae_helpers.DmolNet.out_conv", "vae_helpers.DmolNet.permute"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "px_z", ")", ":", "\n", "        ", "xhat", "=", "self", ".", "out_conv", "(", "px_z", ")", "\n", "return", "xhat", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.openai_vdvae.None.vae_helpers.DmolNet.sample": [[160, 166], ["vae_helpers.sample_from_discretized_mix_logistic", "numpy.minimum().astype.detach().cpu().numpy", "numpy.minimum().astype", "vae_helpers.DmolNet.forward", "numpy.minimum().astype.detach().cpu", "numpy.minimum", "numpy.maximum", "numpy.minimum().astype.detach"], "methods", ["home.repos.pwc.inspect_result.openai_vdvae.None.vae_helpers.sample_from_discretized_mix_logistic", "home.repos.pwc.inspect_result.openai_vdvae.None.vae.VAE.forward"], ["", "def", "sample", "(", "self", ",", "px_z", ")", ":", "\n", "        ", "im", "=", "sample_from_discretized_mix_logistic", "(", "self", ".", "forward", "(", "px_z", ")", ",", "self", ".", "H", ".", "num_mixtures", ")", "\n", "xhat", "=", "(", "im", "+", "1.0", ")", "*", "127.5", "\n", "xhat", "=", "xhat", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "xhat", "=", "np", ".", "minimum", "(", "np", ".", "maximum", "(", "0.0", ",", "xhat", ")", ",", "255.0", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "return", "xhat", "\n", "", "", ""]], "home.repos.pwc.inspect_result.openai_vdvae.None.vae_helpers.gaussian_analytical_kl": [[7, 10], ["logsigma2.exp", "logsigma1.exp"], "function", ["None"], ["@", "torch", ".", "jit", ".", "script", "\n", "def", "gaussian_analytical_kl", "(", "mu1", ",", "mu2", ",", "logsigma1", ",", "logsigma2", ")", ":", "\n", "    ", "return", "-", "0.5", "+", "logsigma2", "-", "logsigma1", "+", "0.5", "*", "(", "logsigma1", ".", "exp", "(", ")", "**", "2", "+", "(", "mu1", "-", "mu2", ")", "**", "2", ")", "/", "(", "logsigma2", ".", "exp", "(", ")", "**", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.openai_vdvae.None.vae_helpers.draw_gaussian_diag_samples": [[12, 16], ["torch.empty_like().normal_", "torch.empty_like().normal_", "torch.empty_like().normal_", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.exp", "torch.exp", "torch.exp"], "function", ["None"], ["", "@", "torch", ".", "jit", ".", "script", "\n", "def", "draw_gaussian_diag_samples", "(", "mu", ",", "logsigma", ")", ":", "\n", "    ", "eps", "=", "torch", ".", "empty_like", "(", "mu", ")", ".", "normal_", "(", "0.", ",", "1.", ")", "\n", "return", "torch", ".", "exp", "(", "logsigma", ")", "*", "eps", "+", "mu", "\n", "\n"]], "home.repos.pwc.inspect_result.openai_vdvae.None.vae_helpers.get_conv": [[18, 25], ["torch.Conv2d"], "function", ["None"], ["", "def", "get_conv", "(", "in_dim", ",", "out_dim", ",", "kernel_size", ",", "stride", ",", "padding", ",", "zero_bias", "=", "True", ",", "zero_weights", "=", "False", ",", "groups", "=", "1", ",", "scaled", "=", "False", ")", ":", "\n", "    ", "c", "=", "nn", ".", "Conv2d", "(", "in_dim", ",", "out_dim", ",", "kernel_size", ",", "stride", ",", "padding", ",", "groups", "=", "groups", ")", "\n", "if", "zero_bias", ":", "\n", "        ", "c", ".", "bias", ".", "data", "*=", "0.0", "\n", "", "if", "zero_weights", ":", "\n", "        ", "c", ".", "weight", ".", "data", "*=", "0.0", "\n", "", "return", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.openai_vdvae.None.vae_helpers.get_3x3": [[27, 29], ["vae_helpers.get_conv"], "function", ["home.repos.pwc.inspect_result.openai_vdvae.None.vae_helpers.get_conv"], ["", "def", "get_3x3", "(", "in_dim", ",", "out_dim", ",", "zero_bias", "=", "True", ",", "zero_weights", "=", "False", ",", "groups", "=", "1", ",", "scaled", "=", "False", ")", ":", "\n", "    ", "return", "get_conv", "(", "in_dim", ",", "out_dim", ",", "3", ",", "1", ",", "1", ",", "zero_bias", ",", "zero_weights", ",", "groups", "=", "groups", ",", "scaled", "=", "scaled", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.openai_vdvae.None.vae_helpers.get_1x1": [[31, 33], ["vae_helpers.get_conv"], "function", ["home.repos.pwc.inspect_result.openai_vdvae.None.vae_helpers.get_conv"], ["", "def", "get_1x1", "(", "in_dim", ",", "out_dim", ",", "zero_bias", "=", "True", ",", "zero_weights", "=", "False", ",", "groups", "=", "1", ",", "scaled", "=", "False", ")", ":", "\n", "    ", "return", "get_conv", "(", "in_dim", ",", "out_dim", ",", "1", ",", "1", ",", "0", ",", "zero_bias", ",", "zero_weights", ",", "groups", "=", "groups", ",", "scaled", "=", "scaled", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.openai_vdvae.None.vae_helpers.log_prob_from_logits": [[35, 40], ["len", "x.max", "torch.log", "torch.log", "torch.log", "torch.exp().sum", "torch.exp().sum", "torch.exp().sum", "torch.exp", "torch.exp", "torch.exp"], "function", ["None"], ["", "def", "log_prob_from_logits", "(", "x", ")", ":", "\n", "    ", "\"\"\" numerically stable log_softmax implementation that prevents overflow \"\"\"", "\n", "axis", "=", "len", "(", "x", ".", "shape", ")", "-", "1", "\n", "m", "=", "x", ".", "max", "(", "dim", "=", "axis", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "return", "x", "-", "m", "-", "torch", ".", "log", "(", "torch", ".", "exp", "(", "x", "-", "m", ")", ".", "sum", "(", "dim", "=", "axis", ",", "keepdim", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.openai_vdvae.None.vae_helpers.const_max": [[42, 45], ["torch.max", "torch.max", "torch.max", "torch.ones_like", "torch.ones_like", "torch.ones_like"], "function", ["None"], ["", "def", "const_max", "(", "t", ",", "constant", ")", ":", "\n", "    ", "other", "=", "torch", ".", "ones_like", "(", "t", ")", "*", "constant", "\n", "return", "torch", ".", "max", "(", "t", ",", "other", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.openai_vdvae.None.vae_helpers.const_min": [[47, 50], ["torch.min", "torch.min", "torch.min", "torch.ones_like", "torch.ones_like", "torch.ones_like"], "function", ["None"], ["", "def", "const_min", "(", "t", ",", "constant", ")", ":", "\n", "    ", "other", "=", "torch", ".", "ones_like", "(", "t", ")", "*", "constant", "\n", "return", "torch", ".", "min", "(", "t", ",", "other", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.openai_vdvae.None.vae_helpers.discretized_mix_logistic_loss": [[52, 112], ["int", "torch.reshape", "torch.reshape", "torch.reshape", "vae_helpers.const_max", "torch.tanh", "torch.tanh", "torch.tanh", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.cat", "torch.cat", "torch.cat", "torch.exp", "torch.exp", "torch.exp", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.reshape", "torch.reshape", "torch.reshape", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.softplus", "torch.softplus", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where.sum", "vae_helpers.log_prob_from_logits", "numpy.prod", "torch.reshape", "torch.reshape", "torch.reshape", "torch.softplus", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.logsumexp.sum", "torch.zeros", "torch.zeros", "torch.zeros", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "vae_helpers.const_max", "numpy.log", "vae_helpers.const_max", "numpy.log"], "function", ["home.repos.pwc.inspect_result.openai_vdvae.None.vae_helpers.const_max", "home.repos.pwc.inspect_result.openai_vdvae.None.vae_helpers.log_prob_from_logits", "home.repos.pwc.inspect_result.openai_vdvae.None.vae_helpers.const_max", "home.repos.pwc.inspect_result.openai_vdvae.None.vae_helpers.const_max"], ["", "def", "discretized_mix_logistic_loss", "(", "x", ",", "l", ",", "low_bit", "=", "False", ")", ":", "\n", "    ", "\"\"\" log-likelihood for mixture of discretized logistics, assumes the data has been rescaled to [-1,1] interval \"\"\"", "\n", "# Adapted from https://github.com/openai/pixel-cnn/blob/master/pixel_cnn_pp/nn.py", "\n", "xs", "=", "[", "s", "for", "s", "in", "x", ".", "shape", "]", "# true image (i.e. labels) to regress to, e.g. (B,32,32,3)", "\n", "ls", "=", "[", "s", "for", "s", "in", "l", ".", "shape", "]", "# predicted distribution, e.g. (B,32,32,100)", "\n", "nr_mix", "=", "int", "(", "ls", "[", "-", "1", "]", "/", "10", ")", "# here and below: unpacking the params of the mixture of logistics", "\n", "logit_probs", "=", "l", "[", ":", ",", ":", ",", ":", ",", ":", "nr_mix", "]", "\n", "l", "=", "torch", ".", "reshape", "(", "l", "[", ":", ",", ":", ",", ":", ",", "nr_mix", ":", "]", ",", "xs", "+", "[", "nr_mix", "*", "3", "]", ")", "\n", "means", "=", "l", "[", ":", ",", ":", ",", ":", ",", ":", ",", ":", "nr_mix", "]", "\n", "log_scales", "=", "const_max", "(", "l", "[", ":", ",", ":", ",", ":", ",", ":", ",", "nr_mix", ":", "2", "*", "nr_mix", "]", ",", "-", "7.", ")", "\n", "coeffs", "=", "torch", ".", "tanh", "(", "l", "[", ":", ",", ":", ",", ":", ",", ":", ",", "2", "*", "nr_mix", ":", "3", "*", "nr_mix", "]", ")", "\n", "x", "=", "torch", ".", "reshape", "(", "x", ",", "xs", "+", "[", "1", "]", ")", "+", "torch", ".", "zeros", "(", "xs", "+", "[", "nr_mix", "]", ")", ".", "to", "(", "x", ".", "device", ")", "# here and below: getting the means and adjusting them based on preceding sub-pixels", "\n", "m2", "=", "torch", ".", "reshape", "(", "means", "[", ":", ",", ":", ",", ":", ",", "1", ",", ":", "]", "+", "coeffs", "[", ":", ",", ":", ",", ":", ",", "0", ",", ":", "]", "*", "x", "[", ":", ",", ":", ",", ":", ",", "0", ",", ":", "]", ",", "[", "xs", "[", "0", "]", ",", "xs", "[", "1", "]", ",", "xs", "[", "2", "]", ",", "1", ",", "nr_mix", "]", ")", "\n", "m3", "=", "torch", ".", "reshape", "(", "means", "[", ":", ",", ":", ",", ":", ",", "2", ",", ":", "]", "+", "coeffs", "[", ":", ",", ":", ",", ":", ",", "1", ",", ":", "]", "*", "x", "[", ":", ",", ":", ",", ":", ",", "0", ",", ":", "]", "+", "coeffs", "[", ":", ",", ":", ",", ":", ",", "2", ",", ":", "]", "*", "x", "[", ":", ",", ":", ",", ":", ",", "1", ",", ":", "]", ",", "[", "xs", "[", "0", "]", ",", "xs", "[", "1", "]", ",", "xs", "[", "2", "]", ",", "1", ",", "nr_mix", "]", ")", "\n", "means", "=", "torch", ".", "cat", "(", "[", "torch", ".", "reshape", "(", "means", "[", ":", ",", ":", ",", ":", ",", "0", ",", ":", "]", ",", "[", "xs", "[", "0", "]", ",", "xs", "[", "1", "]", ",", "xs", "[", "2", "]", ",", "1", ",", "nr_mix", "]", ")", ",", "m2", ",", "m3", "]", ",", "dim", "=", "3", ")", "\n", "centered_x", "=", "x", "-", "means", "\n", "inv_stdv", "=", "torch", ".", "exp", "(", "-", "log_scales", ")", "\n", "if", "low_bit", ":", "\n", "        ", "plus_in", "=", "inv_stdv", "*", "(", "centered_x", "+", "1.", "/", "31.", ")", "\n", "cdf_plus", "=", "torch", ".", "sigmoid", "(", "plus_in", ")", "\n", "min_in", "=", "inv_stdv", "*", "(", "centered_x", "-", "1.", "/", "31.", ")", "\n", "", "else", ":", "\n", "        ", "plus_in", "=", "inv_stdv", "*", "(", "centered_x", "+", "1.", "/", "255.", ")", "\n", "cdf_plus", "=", "torch", ".", "sigmoid", "(", "plus_in", ")", "\n", "min_in", "=", "inv_stdv", "*", "(", "centered_x", "-", "1.", "/", "255.", ")", "\n", "", "cdf_min", "=", "torch", ".", "sigmoid", "(", "min_in", ")", "\n", "log_cdf_plus", "=", "plus_in", "-", "F", ".", "softplus", "(", "plus_in", ")", "# log probability for edge case of 0 (before scaling)", "\n", "log_one_minus_cdf_min", "=", "-", "F", ".", "softplus", "(", "min_in", ")", "# log probability for edge case of 255 (before scaling)", "\n", "cdf_delta", "=", "cdf_plus", "-", "cdf_min", "# probability for all other cases", "\n", "mid_in", "=", "inv_stdv", "*", "centered_x", "\n", "log_pdf_mid", "=", "mid_in", "-", "log_scales", "-", "2.", "*", "F", ".", "softplus", "(", "mid_in", ")", "# log probability in the center of the bin, to be used in extreme cases (not actually used in our code)", "\n", "\n", "# now select the right output: left edge case, right edge case, normal case, extremely low prob case (doesn't actually happen for us)", "\n", "\n", "# this is what we are really doing, but using the robust version below for extreme cases in other applications and to avoid NaN issue with tf.select()", "\n", "# log_probs = tf.select(x < -0.999, log_cdf_plus, tf.select(x > 0.999, log_one_minus_cdf_min, tf.log(cdf_delta)))", "\n", "\n", "# robust version, that still works if probabilities are below 1e-5 (which never happens in our code)", "\n", "# tensorflow backpropagates through tf.select() by multiplying with zero instead of selecting: this requires use to use some ugly tricks to avoid potential NaNs", "\n", "# the 1e-12 in tf.maximum(cdf_delta, 1e-12) is never actually used as output, it's purely there to get around the tf.select() gradient issue", "\n", "# if the probability on a sub-pixel is below 1e-5, we use an approximation based on the assumption that the log-density is constant in the bin of the observed sub-pixel value", "\n", "if", "low_bit", ":", "\n", "        ", "log_probs", "=", "torch", ".", "where", "(", "x", "<", "-", "0.999", ",", "\n", "log_cdf_plus", ",", "\n", "torch", ".", "where", "(", "x", ">", "0.999", ",", "\n", "log_one_minus_cdf_min", ",", "\n", "torch", ".", "where", "(", "cdf_delta", ">", "1e-5", ",", "\n", "torch", ".", "log", "(", "const_max", "(", "cdf_delta", ",", "1e-12", ")", ")", ",", "\n", "log_pdf_mid", "-", "np", ".", "log", "(", "15.5", ")", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "log_probs", "=", "torch", ".", "where", "(", "x", "<", "-", "0.999", ",", "\n", "log_cdf_plus", ",", "\n", "torch", ".", "where", "(", "x", ">", "0.999", ",", "\n", "log_one_minus_cdf_min", ",", "\n", "torch", ".", "where", "(", "cdf_delta", ">", "1e-5", ",", "\n", "torch", ".", "log", "(", "const_max", "(", "cdf_delta", ",", "1e-12", ")", ")", ",", "\n", "log_pdf_mid", "-", "np", ".", "log", "(", "127.5", ")", ")", ")", ")", "\n", "", "log_probs", "=", "log_probs", ".", "sum", "(", "dim", "=", "3", ")", "+", "log_prob_from_logits", "(", "logit_probs", ")", "\n", "mixture_probs", "=", "torch", ".", "logsumexp", "(", "log_probs", ",", "-", "1", ")", "\n", "return", "-", "1.", "*", "mixture_probs", ".", "sum", "(", "dim", "=", "[", "1", ",", "2", "]", ")", "/", "np", ".", "prod", "(", "xs", "[", "1", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.openai_vdvae.None.vae_helpers.sample_from_discretized_mix_logistic": [[114, 137], ["torch.reshape", "torch.reshape", "torch.reshape", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.argmax", "torch.argmax", "torch.argmax", "torch.one_hot().float", "torch.reshape", "torch.reshape", "torch.reshape", "vae_helpers.const_max", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "vae_helpers.const_min", "vae_helpers.const_min", "vae_helpers.const_min", "torch.cat", "torch.cat", "torch.cat", "vae_helpers.const_max", "vae_helpers.const_max", "vae_helpers.const_max", "torch.empty", "torch.empty", "torch.empty", "torch.log", "torch.log", "torch.log", "torch.one_hot", "torch.empty", "torch.empty", "torch.empty", "torch.exp", "torch.exp", "torch.exp", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.tanh", "torch.tanh", "torch.tanh", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log"], "function", ["home.repos.pwc.inspect_result.openai_vdvae.None.vae_helpers.const_max", "home.repos.pwc.inspect_result.openai_vdvae.None.vae_helpers.const_min", "home.repos.pwc.inspect_result.openai_vdvae.None.vae_helpers.const_min", "home.repos.pwc.inspect_result.openai_vdvae.None.vae_helpers.const_min", "home.repos.pwc.inspect_result.openai_vdvae.None.vae_helpers.const_max", "home.repos.pwc.inspect_result.openai_vdvae.None.vae_helpers.const_max", "home.repos.pwc.inspect_result.openai_vdvae.None.vae_helpers.const_max"], ["", "def", "sample_from_discretized_mix_logistic", "(", "l", ",", "nr_mix", ")", ":", "\n", "    ", "ls", "=", "[", "s", "for", "s", "in", "l", ".", "shape", "]", "\n", "xs", "=", "ls", "[", ":", "-", "1", "]", "+", "[", "3", "]", "\n", "# unpack parameters", "\n", "logit_probs", "=", "l", "[", ":", ",", ":", ",", ":", ",", ":", "nr_mix", "]", "\n", "l", "=", "torch", ".", "reshape", "(", "l", "[", ":", ",", ":", ",", ":", ",", "nr_mix", ":", "]", ",", "xs", "+", "[", "nr_mix", "*", "3", "]", ")", "\n", "# sample mixture indicator from softmax", "\n", "eps", "=", "torch", ".", "empty", "(", "logit_probs", ".", "shape", ",", "device", "=", "l", ".", "device", ")", ".", "uniform_", "(", "1e-5", ",", "1.", "-", "1e-5", ")", "\n", "amax", "=", "torch", ".", "argmax", "(", "logit_probs", "-", "torch", ".", "log", "(", "-", "torch", ".", "log", "(", "eps", ")", ")", ",", "dim", "=", "3", ")", "\n", "sel", "=", "F", ".", "one_hot", "(", "amax", ",", "num_classes", "=", "nr_mix", ")", ".", "float", "(", ")", "\n", "sel", "=", "torch", ".", "reshape", "(", "sel", ",", "xs", "[", ":", "-", "1", "]", "+", "[", "1", ",", "nr_mix", "]", ")", "\n", "# select logistic parameters", "\n", "means", "=", "(", "l", "[", ":", ",", ":", ",", ":", ",", ":", ",", ":", "nr_mix", "]", "*", "sel", ")", ".", "sum", "(", "dim", "=", "4", ")", "\n", "log_scales", "=", "const_max", "(", "(", "l", "[", ":", ",", ":", ",", ":", ",", ":", ",", "nr_mix", ":", "nr_mix", "*", "2", "]", "*", "sel", ")", ".", "sum", "(", "dim", "=", "4", ")", ",", "-", "7.", ")", "\n", "coeffs", "=", "(", "torch", ".", "tanh", "(", "l", "[", ":", ",", ":", ",", ":", ",", ":", ",", "nr_mix", "*", "2", ":", "nr_mix", "*", "3", "]", ")", "*", "sel", ")", ".", "sum", "(", "dim", "=", "4", ")", "\n", "# sample from logistic & clip to interval", "\n", "# we don't actually round to the nearest 8bit value when sampling", "\n", "u", "=", "torch", ".", "empty", "(", "means", ".", "shape", ",", "device", "=", "means", ".", "device", ")", ".", "uniform_", "(", "1e-5", ",", "1.", "-", "1e-5", ")", "\n", "x", "=", "means", "+", "torch", ".", "exp", "(", "log_scales", ")", "*", "(", "torch", ".", "log", "(", "u", ")", "-", "torch", ".", "log", "(", "1.", "-", "u", ")", ")", "\n", "x0", "=", "const_min", "(", "const_max", "(", "x", "[", ":", ",", ":", ",", ":", ",", "0", "]", ",", "-", "1.", ")", ",", "1.", ")", "\n", "x1", "=", "const_min", "(", "const_max", "(", "x", "[", ":", ",", ":", ",", ":", ",", "1", "]", "+", "coeffs", "[", ":", ",", ":", ",", ":", ",", "0", "]", "*", "x0", ",", "-", "1.", ")", ",", "1.", ")", "\n", "x2", "=", "const_min", "(", "const_max", "(", "x", "[", ":", ",", ":", ",", ":", ",", "2", "]", "+", "coeffs", "[", ":", ",", ":", ",", ":", ",", "1", "]", "*", "x0", "+", "coeffs", "[", ":", ",", ":", ",", ":", ",", "2", "]", "*", "x1", ",", "-", "1.", ")", ",", "1.", ")", "\n", "return", "torch", ".", "cat", "(", "[", "torch", ".", "reshape", "(", "x0", ",", "xs", "[", ":", "-", "1", "]", "+", "[", "1", "]", ")", ",", "torch", ".", "reshape", "(", "x1", ",", "xs", "[", ":", "-", "1", "]", "+", "[", "1", "]", ")", ",", "torch", ".", "reshape", "(", "x2", ",", "xs", "[", ":", "-", "1", "]", "+", "[", "1", "]", ")", "]", ",", "dim", "=", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.openai_vdvae.None.train.training_step": [[13, 34], ["time.time", "vae.zero_grad", "vae.forward", "stats[].backward", "torch.nn.utils.clip_grad_norm_().item", "torch.isnan().sum", "torch.isnan().sum", "utils.get_cpu_stats_over_ranks.update", "utils.get_cpu_stats_over_ranks", "time.time", "utils.get_cpu_stats_over_ranks.update", "dict", "optimizer.step", "train_helpers.update_ema", "torch.nn.utils.clip_grad_norm_", "torch.isnan", "torch.isnan", "vae.parameters"], "function", ["home.repos.pwc.inspect_result.openai_vdvae.None.vae.VAE.forward", "home.repos.pwc.inspect_result.openai_vdvae.None.utils.get_cpu_stats_over_ranks", "home.repos.pwc.inspect_result.openai_vdvae.None.train_helpers.update_ema"], ["def", "training_step", "(", "H", ",", "data_input", ",", "target", ",", "vae", ",", "ema_vae", ",", "optimizer", ",", "iterate", ")", ":", "\n", "    ", "t0", "=", "time", ".", "time", "(", ")", "\n", "vae", ".", "zero_grad", "(", ")", "\n", "stats", "=", "vae", ".", "forward", "(", "data_input", ",", "target", ")", "\n", "stats", "[", "'elbo'", "]", ".", "backward", "(", ")", "\n", "grad_norm", "=", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "vae", ".", "parameters", "(", ")", ",", "H", ".", "grad_clip", ")", ".", "item", "(", ")", "\n", "distortion_nans", "=", "torch", ".", "isnan", "(", "stats", "[", "'distortion'", "]", ")", ".", "sum", "(", ")", "\n", "rate_nans", "=", "torch", ".", "isnan", "(", "stats", "[", "'rate'", "]", ")", ".", "sum", "(", ")", "\n", "stats", ".", "update", "(", "dict", "(", "rate_nans", "=", "0", "if", "rate_nans", "==", "0", "else", "1", ",", "distortion_nans", "=", "0", "if", "distortion_nans", "==", "0", "else", "1", ")", ")", "\n", "stats", "=", "get_cpu_stats_over_ranks", "(", "stats", ")", "\n", "\n", "skipped_updates", "=", "1", "\n", "# only update if no rank has a nan and if the grad norm is below a specific threshold", "\n", "if", "stats", "[", "'distortion_nans'", "]", "==", "0", "and", "stats", "[", "'rate_nans'", "]", "==", "0", "and", "(", "H", ".", "skip_threshold", "==", "-", "1", "or", "grad_norm", "<", "H", ".", "skip_threshold", ")", ":", "\n", "        ", "optimizer", ".", "step", "(", ")", "\n", "skipped_updates", "=", "0", "\n", "update_ema", "(", "vae", ",", "ema_vae", ",", "H", ".", "ema_rate", ")", "\n", "\n", "", "t1", "=", "time", ".", "time", "(", ")", "\n", "stats", ".", "update", "(", "skipped_updates", "=", "skipped_updates", ",", "iter_time", "=", "t1", "-", "t0", ",", "grad_norm", "=", "grad_norm", ")", "\n", "return", "stats", "\n", "\n"]], "home.repos.pwc.inspect_result.openai_vdvae.None.train.eval_step": [[36, 41], ["utils.get_cpu_stats_over_ranks", "torch.no_grad", "ema_vae.forward"], "function", ["home.repos.pwc.inspect_result.openai_vdvae.None.utils.get_cpu_stats_over_ranks", "home.repos.pwc.inspect_result.openai_vdvae.None.vae.VAE.forward"], ["", "def", "eval_step", "(", "data_input", ",", "target", ",", "ema_vae", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "stats", "=", "ema_vae", ".", "forward", "(", "data_input", ",", "target", ")", "\n", "", "stats", "=", "get_cpu_stats_over_ranks", "(", "stats", ")", "\n", "return", "stats", "\n", "\n"]], "home.repos.pwc.inspect_result.openai_vdvae.None.train.get_sample_for_visualization": [[43, 49], ["torch.utils.data.DataLoader", "preprocess_fn"], "function", ["None"], ["", "def", "get_sample_for_visualization", "(", "data", ",", "preprocess_fn", ",", "num", ",", "dataset", ")", ":", "\n", "    ", "for", "x", "in", "DataLoader", "(", "data", ",", "batch_size", "=", "num", ")", ":", "\n", "        ", "break", "\n", "", "orig_image", "=", "(", "x", "[", "0", "]", "*", "255.0", ")", ".", "to", "(", "torch", ".", "uint8", ")", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "if", "dataset", "==", "'ffhq_1024'", "else", "x", "[", "0", "]", "\n", "preprocessed", "=", "preprocess_fn", "(", "x", ")", "[", "0", "]", "\n", "return", "orig_image", ",", "preprocessed", "\n", "\n"]], "home.repos.pwc.inspect_result.openai_vdvae.None.train.train_loop": [[51, 87], ["train_helpers.load_opt", "torch.utils.data.distributed.DistributedSampler", "train.get_sample_for_visualization", "set", "torch.as_tensor().cuda", "range", "torch.utils.data.distributed.DistributedSampler.set_epoch", "torch.utils.data.DataLoader", "torch.as_tensor", "preprocess_fn", "train.training_step", "stats.append", "scheduler.step", "train.evaluate", "logprint", "logprint", "train.write_images", "numpy.isfinite", "train_helpers.save_model", "range", "logprint", "os.path.join", "logprint", "train_helpers.save_model", "os.path.join", "train_helpers.accumulate_stats", "scheduler.get_last_lr", "train_helpers.accumulate_stats"], "function", ["home.repos.pwc.inspect_result.openai_vdvae.None.train_helpers.load_opt", "home.repos.pwc.inspect_result.openai_vdvae.None.train.get_sample_for_visualization", "home.repos.pwc.inspect_result.openai_vdvae.None.train.training_step", "home.repos.pwc.inspect_result.openai_vdvae.None.train.evaluate", "home.repos.pwc.inspect_result.openai_vdvae.None.train.write_images", "home.repos.pwc.inspect_result.openai_vdvae.None.train_helpers.save_model", "home.repos.pwc.inspect_result.openai_vdvae.None.train_helpers.save_model", "home.repos.pwc.inspect_result.openai_vdvae.None.train_helpers.accumulate_stats", "home.repos.pwc.inspect_result.openai_vdvae.None.train_helpers.accumulate_stats"], ["", "def", "train_loop", "(", "H", ",", "data_train", ",", "data_valid", ",", "preprocess_fn", ",", "vae", ",", "ema_vae", ",", "logprint", ")", ":", "\n", "    ", "optimizer", ",", "scheduler", ",", "cur_eval_loss", ",", "iterate", ",", "starting_epoch", "=", "load_opt", "(", "H", ",", "vae", ",", "logprint", ")", "\n", "train_sampler", "=", "DistributedSampler", "(", "data_train", ",", "num_replicas", "=", "H", ".", "mpi_size", ",", "rank", "=", "H", ".", "rank", ")", "\n", "viz_batch_original", ",", "viz_batch_processed", "=", "get_sample_for_visualization", "(", "data_valid", ",", "preprocess_fn", ",", "H", ".", "num_images_visualize", ",", "H", ".", "dataset", ")", "\n", "early_evals", "=", "set", "(", "[", "1", "]", "+", "[", "2", "**", "exp", "for", "exp", "in", "range", "(", "3", ",", "14", ")", "]", ")", "\n", "stats", "=", "[", "]", "\n", "iters_since_starting", "=", "0", "\n", "H", ".", "ema_rate", "=", "torch", ".", "as_tensor", "(", "H", ".", "ema_rate", ")", ".", "cuda", "(", ")", "\n", "for", "epoch", "in", "range", "(", "starting_epoch", ",", "H", ".", "num_epochs", ")", ":", "\n", "        ", "train_sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "for", "x", "in", "DataLoader", "(", "data_train", ",", "batch_size", "=", "H", ".", "n_batch", ",", "drop_last", "=", "True", ",", "pin_memory", "=", "True", ",", "sampler", "=", "train_sampler", ")", ":", "\n", "            ", "data_input", ",", "target", "=", "preprocess_fn", "(", "x", ")", "\n", "training_stats", "=", "training_step", "(", "H", ",", "data_input", ",", "target", ",", "vae", ",", "ema_vae", ",", "optimizer", ",", "iterate", ")", "\n", "stats", ".", "append", "(", "training_stats", ")", "\n", "scheduler", ".", "step", "(", ")", "\n", "if", "iterate", "%", "H", ".", "iters_per_print", "==", "0", "or", "iters_since_starting", "in", "early_evals", ":", "\n", "                ", "logprint", "(", "model", "=", "H", ".", "desc", ",", "type", "=", "'train_loss'", ",", "lr", "=", "scheduler", ".", "get_last_lr", "(", ")", "[", "0", "]", ",", "epoch", "=", "epoch", ",", "step", "=", "iterate", ",", "**", "accumulate_stats", "(", "stats", ",", "H", ".", "iters_per_print", ")", ")", "\n", "\n", "", "if", "iterate", "%", "H", ".", "iters_per_images", "==", "0", "or", "(", "iters_since_starting", "in", "early_evals", "and", "H", ".", "dataset", "!=", "'ffhq_1024'", ")", "and", "H", ".", "rank", "==", "0", ":", "\n", "                ", "write_images", "(", "H", ",", "ema_vae", ",", "viz_batch_original", ",", "viz_batch_processed", ",", "f'{H.save_dir}/samples-{iterate}.png'", ",", "logprint", ")", "\n", "\n", "", "iterate", "+=", "1", "\n", "iters_since_starting", "+=", "1", "\n", "if", "iterate", "%", "H", ".", "iters_per_save", "==", "0", "and", "H", ".", "rank", "==", "0", ":", "\n", "                ", "if", "np", ".", "isfinite", "(", "stats", "[", "-", "1", "]", "[", "'elbo'", "]", ")", ":", "\n", "                    ", "logprint", "(", "model", "=", "H", ".", "desc", ",", "type", "=", "'train_loss'", ",", "epoch", "=", "epoch", ",", "step", "=", "iterate", ",", "**", "accumulate_stats", "(", "stats", ",", "H", ".", "iters_per_print", ")", ")", "\n", "fp", "=", "os", ".", "path", ".", "join", "(", "H", ".", "save_dir", ",", "'latest'", ")", "\n", "logprint", "(", "f'Saving model@ {iterate} to {fp}'", ")", "\n", "save_model", "(", "fp", ",", "vae", ",", "ema_vae", ",", "optimizer", ",", "H", ")", "\n", "\n", "", "", "if", "iterate", "%", "H", ".", "iters_per_ckpt", "==", "0", "and", "H", ".", "rank", "==", "0", ":", "\n", "                ", "save_model", "(", "os", ".", "path", ".", "join", "(", "H", ".", "save_dir", ",", "f'iter-{iterate}'", ")", ",", "vae", ",", "ema_vae", ",", "optimizer", ",", "H", ")", "\n", "\n", "", "", "if", "epoch", "%", "H", ".", "epochs_per_eval", "==", "0", ":", "\n", "            ", "valid_stats", "=", "evaluate", "(", "H", ",", "ema_vae", ",", "data_valid", ",", "preprocess_fn", ")", "\n", "logprint", "(", "model", "=", "H", ".", "desc", ",", "type", "=", "'eval_loss'", ",", "epoch", "=", "epoch", ",", "step", "=", "iterate", ",", "**", "valid_stats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.openai_vdvae.None.train.evaluate": [[89, 99], ["torch.utils.data.distributed.DistributedSampler", "torch.utils.data.DataLoader", "dict", "preprocess_fn", "stats_valid.append", "numpy.array", "train.eval_step", "numpy.isfinite", "len", "numpy.mean", "numpy.mean"], "function", ["home.repos.pwc.inspect_result.openai_vdvae.None.train.eval_step"], ["", "", "", "def", "evaluate", "(", "H", ",", "ema_vae", ",", "data_valid", ",", "preprocess_fn", ")", ":", "\n", "    ", "stats_valid", "=", "[", "]", "\n", "valid_sampler", "=", "DistributedSampler", "(", "data_valid", ",", "num_replicas", "=", "H", ".", "mpi_size", ",", "rank", "=", "H", ".", "rank", ")", "\n", "for", "x", "in", "DataLoader", "(", "data_valid", ",", "batch_size", "=", "H", ".", "n_batch", ",", "drop_last", "=", "True", ",", "pin_memory", "=", "True", ",", "sampler", "=", "valid_sampler", ")", ":", "\n", "        ", "data_input", ",", "target", "=", "preprocess_fn", "(", "x", ")", "\n", "stats_valid", ".", "append", "(", "eval_step", "(", "data_input", ",", "target", ",", "ema_vae", ")", ")", "\n", "", "vals", "=", "[", "a", "[", "'elbo'", "]", "for", "a", "in", "stats_valid", "]", "\n", "finites", "=", "np", ".", "array", "(", "vals", ")", "[", "np", ".", "isfinite", "(", "vals", ")", "]", "\n", "stats", "=", "dict", "(", "n_batches", "=", "len", "(", "vals", ")", ",", "filtered_elbo", "=", "np", ".", "mean", "(", "finites", ")", ",", "**", "{", "k", ":", "np", ".", "mean", "(", "[", "a", "[", "k", "]", "for", "a", "in", "stats_valid", "]", ")", "for", "k", "in", "stats_valid", "[", "-", "1", "]", "}", ")", "\n", "return", "stats", "\n", "\n"]], "home.repos.pwc.inspect_result.openai_vdvae.None.train.write_images": [[101, 114], ["len", "numpy.concatenate().reshape().transpose().reshape", "logprint", "imageio.imwrite", "s[].cuda", "viz_batch_original.numpy", "numpy.floor().astype", "batches.append", "batches.append", "ema_vae.forward_get_latents", "ema_vae.forward_samples_set_latents", "ema_vae.forward_uncond_samples", "numpy.concatenate().reshape().transpose", "numpy.floor", "numpy.concatenate().reshape", "numpy.linspace", "len", "numpy.concatenate"], "function", ["home.repos.pwc.inspect_result.openai_vdvae.None.vae.VAE.forward_get_latents", "home.repos.pwc.inspect_result.openai_vdvae.None.vae.VAE.forward_samples_set_latents", "home.repos.pwc.inspect_result.openai_vdvae.None.vae.VAE.forward_uncond_samples"], ["", "def", "write_images", "(", "H", ",", "ema_vae", ",", "viz_batch_original", ",", "viz_batch_processed", ",", "fname", ",", "logprint", ")", ":", "\n", "    ", "zs", "=", "[", "s", "[", "'z'", "]", ".", "cuda", "(", ")", "for", "s", "in", "ema_vae", ".", "forward_get_latents", "(", "viz_batch_processed", ")", "]", "\n", "batches", "=", "[", "viz_batch_original", ".", "numpy", "(", ")", "]", "\n", "mb", "=", "viz_batch_processed", ".", "shape", "[", "0", "]", "\n", "lv_points", "=", "np", ".", "floor", "(", "np", ".", "linspace", "(", "0", ",", "1", ",", "H", ".", "num_variables_visualize", "+", "2", ")", "*", "len", "(", "zs", ")", ")", ".", "astype", "(", "int", ")", "[", "1", ":", "-", "1", "]", "\n", "for", "i", "in", "lv_points", ":", "\n", "        ", "batches", ".", "append", "(", "ema_vae", ".", "forward_samples_set_latents", "(", "mb", ",", "zs", "[", ":", "i", "]", ",", "t", "=", "0.1", ")", ")", "\n", "", "for", "t", "in", "[", "1.0", ",", "0.9", ",", "0.8", ",", "0.7", "]", "[", ":", "H", ".", "num_temperatures_visualize", "]", ":", "\n", "        ", "batches", ".", "append", "(", "ema_vae", ".", "forward_uncond_samples", "(", "mb", ",", "t", "=", "t", ")", ")", "\n", "", "n_rows", "=", "len", "(", "batches", ")", "\n", "im", "=", "np", ".", "concatenate", "(", "batches", ",", "axis", "=", "0", ")", ".", "reshape", "(", "(", "n_rows", ",", "mb", ",", "*", "viz_batch_processed", ".", "shape", "[", "1", ":", "]", ")", ")", ".", "transpose", "(", "[", "0", ",", "2", ",", "1", ",", "3", ",", "4", "]", ")", ".", "reshape", "(", "[", "n_rows", "*", "viz_batch_processed", ".", "shape", "[", "1", "]", ",", "mb", "*", "viz_batch_processed", ".", "shape", "[", "2", "]", ",", "3", "]", ")", "\n", "logprint", "(", "f'printing samples to {fname}'", ")", "\n", "imageio", ".", "imwrite", "(", "fname", ",", "im", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.openai_vdvae.None.train.run_test_eval": [[116, 123], ["print", "train.evaluate", "print", "logprint", "print"], "function", ["home.repos.pwc.inspect_result.openai_vdvae.None.train.evaluate"], ["", "def", "run_test_eval", "(", "H", ",", "ema_vae", ",", "data_test", ",", "preprocess_fn", ",", "logprint", ")", ":", "\n", "    ", "print", "(", "'evaluating'", ")", "\n", "stats", "=", "evaluate", "(", "H", ",", "ema_vae", ",", "data_test", ",", "preprocess_fn", ")", "\n", "print", "(", "'test results'", ")", "\n", "for", "k", "in", "stats", ":", "\n", "        ", "print", "(", "k", ",", "stats", "[", "k", "]", ")", "\n", "", "logprint", "(", "type", "=", "'test_loss'", ",", "**", "stats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.openai_vdvae.None.train.main": [[125, 133], ["train_helpers.set_up_hyperparams", "data.set_up_data", "train_helpers.load_vaes", "train.run_test_eval", "train.train_loop"], "function", ["home.repos.pwc.inspect_result.openai_vdvae.None.train_helpers.set_up_hyperparams", "home.repos.pwc.inspect_result.openai_vdvae.None.data.set_up_data", "home.repos.pwc.inspect_result.openai_vdvae.None.train_helpers.load_vaes", "home.repos.pwc.inspect_result.openai_vdvae.None.train.run_test_eval", "home.repos.pwc.inspect_result.openai_vdvae.None.train.train_loop"], ["", "def", "main", "(", ")", ":", "\n", "    ", "H", ",", "logprint", "=", "set_up_hyperparams", "(", ")", "\n", "H", ",", "data_train", ",", "data_valid_or_test", ",", "preprocess_fn", "=", "set_up_data", "(", "H", ")", "\n", "vae", ",", "ema_vae", "=", "load_vaes", "(", "H", ",", "logprint", ")", "\n", "if", "H", ".", "test_eval", ":", "\n", "        ", "run_test_eval", "(", "H", ",", "ema_vae", ",", "data_valid_or_test", ",", "preprocess_fn", ",", "logprint", ")", "\n", "", "else", ":", "\n", "        ", "train_loop", "(", "H", ",", "data_train", ",", "data_valid_or_test", ",", "preprocess_fn", ",", "vae", ",", "ema_vae", ",", "logprint", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.openai_vdvae.None.data.set_up_data": [[11, 92], ["torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "data.imagenet32", "print", "torchvision.datasets.ImageFolder", "torchvision.datasets.ImageFolder", "torch.utils.data.TensorDataset", "torch.utils.data.TensorDataset", "x[].cuda().float", "x[].cuda().float.clone", "x[].cuda().float.add_().mul_", "inp.clone.add_().mul_", "data.imagenet64", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torchvision.ToTensor", "torchvision.ToTensor", "torch.as_tensor", "torch.as_tensor", "x[].permute", "inp.clone.mul_().floor_().mul_", "data.ffhq256", "x[].cuda", "x[].cuda().float.add_", "inp.clone.add_", "data.ffhq1024", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "inp.clone.mul_().floor_", "data.cifar10", "ValueError", "inp.clone.mul_"], "function", ["home.repos.pwc.inspect_result.openai_vdvae.None.data.imagenet32", "home.repos.pwc.inspect_result.openai_vdvae.None.data.imagenet64", "home.repos.pwc.inspect_result.openai_vdvae.None.data.ffhq256", "home.repos.pwc.inspect_result.openai_vdvae.None.data.ffhq1024", "home.repos.pwc.inspect_result.openai_vdvae.None.data.cifar10"], ["def", "set_up_data", "(", "H", ")", ":", "\n", "    ", "shift_loss", "=", "-", "127.5", "\n", "scale_loss", "=", "1.", "/", "127.5", "\n", "if", "H", ".", "dataset", "==", "'imagenet32'", ":", "\n", "        ", "trX", ",", "vaX", ",", "teX", "=", "imagenet32", "(", "H", ".", "data_root", ")", "\n", "H", ".", "image_size", "=", "32", "\n", "H", ".", "image_channels", "=", "3", "\n", "shift", "=", "-", "116.2373", "\n", "scale", "=", "1.", "/", "69.37404", "\n", "", "elif", "H", ".", "dataset", "==", "'imagenet64'", ":", "\n", "        ", "trX", ",", "vaX", ",", "teX", "=", "imagenet64", "(", "H", ".", "data_root", ")", "\n", "H", ".", "image_size", "=", "64", "\n", "H", ".", "image_channels", "=", "3", "\n", "shift", "=", "-", "115.92961967", "\n", "scale", "=", "1.", "/", "69.37404", "\n", "", "elif", "H", ".", "dataset", "==", "'ffhq_256'", ":", "\n", "        ", "trX", ",", "vaX", ",", "teX", "=", "ffhq256", "(", "H", ".", "data_root", ")", "\n", "H", ".", "image_size", "=", "256", "\n", "H", ".", "image_channels", "=", "3", "\n", "shift", "=", "-", "112.8666757481", "\n", "scale", "=", "1.", "/", "69.84780273", "\n", "", "elif", "H", ".", "dataset", "==", "'ffhq_1024'", ":", "\n", "        ", "trX", ",", "vaX", ",", "teX", "=", "ffhq1024", "(", "H", ".", "data_root", ")", "\n", "H", ".", "image_size", "=", "1024", "\n", "H", ".", "image_channels", "=", "3", "\n", "shift", "=", "-", "0.4387", "\n", "scale", "=", "1.0", "/", "0.2743", "\n", "shift_loss", "=", "-", "0.5", "\n", "scale_loss", "=", "2.0", "\n", "", "elif", "H", ".", "dataset", "==", "'cifar10'", ":", "\n", "        ", "(", "trX", ",", "_", ")", ",", "(", "vaX", ",", "_", ")", ",", "(", "teX", ",", "_", ")", "=", "cifar10", "(", "H", ".", "data_root", ",", "one_hot", "=", "False", ")", "\n", "H", ".", "image_size", "=", "32", "\n", "H", ".", "image_channels", "=", "3", "\n", "shift", "=", "-", "120.63838", "\n", "scale", "=", "1.", "/", "64.16736", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'unknown dataset: '", ",", "H", ".", "dataset", ")", "\n", "\n", "", "do_low_bit", "=", "H", ".", "dataset", "in", "[", "'ffhq_256'", "]", "\n", "\n", "if", "H", ".", "test_eval", ":", "\n", "        ", "print", "(", "'DOING TEST'", ")", "\n", "eval_dataset", "=", "teX", "\n", "", "else", ":", "\n", "        ", "eval_dataset", "=", "vaX", "\n", "\n", "", "shift", "=", "torch", ".", "tensor", "(", "[", "shift", "]", ")", ".", "cuda", "(", ")", ".", "view", "(", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "scale", "=", "torch", ".", "tensor", "(", "[", "scale", "]", ")", ".", "cuda", "(", ")", ".", "view", "(", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "shift_loss", "=", "torch", ".", "tensor", "(", "[", "shift_loss", "]", ")", ".", "cuda", "(", ")", ".", "view", "(", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "scale_loss", "=", "torch", ".", "tensor", "(", "[", "scale_loss", "]", ")", ".", "cuda", "(", ")", ".", "view", "(", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "\n", "if", "H", ".", "dataset", "==", "'ffhq_1024'", ":", "\n", "        ", "train_data", "=", "ImageFolder", "(", "trX", ",", "transforms", ".", "ToTensor", "(", ")", ")", "\n", "valid_data", "=", "ImageFolder", "(", "eval_dataset", ",", "transforms", ".", "ToTensor", "(", ")", ")", "\n", "untranspose", "=", "True", "\n", "", "else", ":", "\n", "        ", "train_data", "=", "TensorDataset", "(", "torch", ".", "as_tensor", "(", "trX", ")", ")", "\n", "valid_data", "=", "TensorDataset", "(", "torch", ".", "as_tensor", "(", "eval_dataset", ")", ")", "\n", "untranspose", "=", "False", "\n", "\n", "", "def", "preprocess_func", "(", "x", ")", ":", "\n", "        ", "nonlocal", "shift", "\n", "nonlocal", "scale", "\n", "nonlocal", "shift_loss", "\n", "nonlocal", "scale_loss", "\n", "nonlocal", "do_low_bit", "\n", "nonlocal", "untranspose", "\n", "'takes in a data example and returns the preprocessed input'", "\n", "'as well as the input processed for the loss'", "\n", "if", "untranspose", ":", "\n", "            ", "x", "[", "0", "]", "=", "x", "[", "0", "]", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "", "inp", "=", "x", "[", "0", "]", ".", "cuda", "(", "non_blocking", "=", "True", ")", ".", "float", "(", ")", "\n", "out", "=", "inp", ".", "clone", "(", ")", "\n", "inp", ".", "add_", "(", "shift", ")", ".", "mul_", "(", "scale", ")", "\n", "if", "do_low_bit", ":", "\n", "# 5 bits of precision", "\n", "            ", "out", ".", "mul_", "(", "1.", "/", "8.", ")", ".", "floor_", "(", ")", ".", "mul_", "(", "8.", ")", "\n", "", "out", ".", "add_", "(", "shift_loss", ")", ".", "mul_", "(", "scale_loss", ")", "\n", "return", "inp", ",", "out", "\n", "\n", "", "return", "H", ",", "train_data", ",", "valid_data", ",", "preprocess_func", "\n", "\n"]], "home.repos.pwc.inspect_result.openai_vdvae.None.data.mkdir_p": [[94, 96], ["os.makedirs"], "function", ["None"], ["", "def", "mkdir_p", "(", "path", ")", ":", "\n", "    ", "os", ".", "makedirs", "(", "path", ",", "exist_ok", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.openai_vdvae.None.data.flatten": [[98, 100], ["None"], "function", ["None"], ["", "def", "flatten", "(", "outer", ")", ":", "\n", "    ", "return", "[", "el", "for", "inner", "in", "outer", "for", "el", "in", "inner", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.openai_vdvae.None.data.unpickle_cifar10": [[102, 108], ["open", "pickle.load", "open.close", "dict", "zip", "dict.values", "k.decode", "dict.keys"], "function", ["None"], ["", "def", "unpickle_cifar10", "(", "file", ")", ":", "\n", "    ", "fo", "=", "open", "(", "file", ",", "'rb'", ")", "\n", "data", "=", "pickle", ".", "load", "(", "fo", ",", "encoding", "=", "'bytes'", ")", "\n", "fo", ".", "close", "(", ")", "\n", "data", "=", "dict", "(", "zip", "(", "[", "k", ".", "decode", "(", ")", "for", "k", "in", "data", ".", "keys", "(", ")", "]", ",", "data", ".", "values", "(", ")", ")", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.openai_vdvae.None.data.imagenet32": [[110, 118], ["numpy.load", "numpy.random.seed", "numpy.random.permutation", "numpy.load", "os.path.join", "os.path.join"], "function", ["None"], ["", "def", "imagenet32", "(", "data_root", ")", ":", "\n", "    ", "trX", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "data_root", ",", "'imagenet32-train.npy'", ")", ",", "mmap_mode", "=", "'r'", ")", "\n", "np", ".", "random", ".", "seed", "(", "42", ")", "\n", "tr_va_split_indices", "=", "np", ".", "random", ".", "permutation", "(", "trX", ".", "shape", "[", "0", "]", ")", "\n", "train", "=", "trX", "[", "tr_va_split_indices", "[", ":", "-", "5000", "]", "]", "\n", "valid", "=", "trX", "[", "tr_va_split_indices", "[", "-", "5000", ":", "]", "]", "\n", "test", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "data_root", ",", "'imagenet32-valid.npy'", ")", ",", "mmap_mode", "=", "'r'", ")", "\n", "return", "train", ",", "valid", ",", "test", "\n", "\n"]], "home.repos.pwc.inspect_result.openai_vdvae.None.data.imagenet64": [[120, 128], ["numpy.load", "numpy.random.seed", "numpy.random.permutation", "numpy.load", "os.path.join", "os.path.join"], "function", ["None"], ["", "def", "imagenet64", "(", "data_root", ")", ":", "\n", "    ", "trX", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "data_root", ",", "'imagenet64-train.npy'", ")", ",", "mmap_mode", "=", "'r'", ")", "\n", "np", ".", "random", ".", "seed", "(", "42", ")", "\n", "tr_va_split_indices", "=", "np", ".", "random", ".", "permutation", "(", "trX", ".", "shape", "[", "0", "]", ")", "\n", "train", "=", "trX", "[", "tr_va_split_indices", "[", ":", "-", "5000", "]", "]", "\n", "valid", "=", "trX", "[", "tr_va_split_indices", "[", "-", "5000", ":", "]", "]", "\n", "test", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "data_root", ",", "'imagenet64-valid.npy'", ")", ",", "mmap_mode", "=", "'r'", ")", "# this is test.", "\n", "return", "train", ",", "valid", ",", "test", "\n", "\n"]], "home.repos.pwc.inspect_result.openai_vdvae.None.data.ffhq1024": [[130, 133], ["os.path.join", "os.path.join", "os.path.join"], "function", ["None"], ["", "def", "ffhq1024", "(", "data_root", ")", ":", "\n", "# we did not significantly tune hyperparameters on ffhq-1024, and so simply evaluate on the test set", "\n", "    ", "return", "os", ".", "path", ".", "join", "(", "data_root", ",", "'ffhq1024/train'", ")", ",", "os", ".", "path", ".", "join", "(", "data_root", ",", "'ffhq1024/valid'", ")", ",", "os", ".", "path", ".", "join", "(", "data_root", ",", "'ffhq1024/valid'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.openai_vdvae.None.data.ffhq256": [[135, 143], ["numpy.load", "numpy.random.seed", "numpy.random.permutation", "os.path.join"], "function", ["None"], ["", "def", "ffhq256", "(", "data_root", ")", ":", "\n", "    ", "trX", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "data_root", ",", "'ffhq-256.npy'", ")", ",", "mmap_mode", "=", "'r'", ")", "\n", "np", ".", "random", ".", "seed", "(", "5", ")", "\n", "tr_va_split_indices", "=", "np", ".", "random", ".", "permutation", "(", "trX", ".", "shape", "[", "0", "]", ")", "\n", "train", "=", "trX", "[", "tr_va_split_indices", "[", ":", "-", "7000", "]", "]", "\n", "valid", "=", "trX", "[", "tr_va_split_indices", "[", "-", "7000", ":", "]", "]", "\n", "# we did not significantly tune hyperparameters on ffhq-256, and so simply evaluate on the test set", "\n", "return", "train", ",", "valid", ",", "valid", "\n", "\n"]], "home.repos.pwc.inspect_result.openai_vdvae.None.data.cifar10": [[145, 164], ["numpy.vstack", "numpy.asarray", "data.unpickle_cifar10", "numpy.asarray", "numpy.asarray", "trX.reshape().transpose.reshape().transpose", "teX.reshape().transpose.reshape().transpose", "sklearn.model_selection.train_test_split", "data.unpickle_cifar10", "data.flatten", "os.path.join", "numpy.reshape", "numpy.reshape", "numpy.reshape", "os.path.join", "range", "trX.reshape().transpose.reshape", "teX.reshape().transpose.reshape", "numpy.eye", "numpy.eye", "numpy.eye"], "function", ["home.repos.pwc.inspect_result.openai_vdvae.None.data.unpickle_cifar10", "home.repos.pwc.inspect_result.openai_vdvae.None.data.unpickle_cifar10", "home.repos.pwc.inspect_result.openai_vdvae.None.data.flatten"], ["", "def", "cifar10", "(", "data_root", ",", "one_hot", "=", "True", ")", ":", "\n", "    ", "tr_data", "=", "[", "unpickle_cifar10", "(", "os", ".", "path", ".", "join", "(", "data_root", ",", "'cifar-10-batches-py/'", ",", "'data_batch_%d'", "%", "i", ")", ")", "for", "i", "in", "range", "(", "1", ",", "6", ")", "]", "\n", "trX", "=", "np", ".", "vstack", "(", "data", "[", "'data'", "]", "for", "data", "in", "tr_data", ")", "\n", "trY", "=", "np", ".", "asarray", "(", "flatten", "(", "[", "data", "[", "'labels'", "]", "for", "data", "in", "tr_data", "]", ")", ")", "\n", "te_data", "=", "unpickle_cifar10", "(", "os", ".", "path", ".", "join", "(", "data_root", ",", "'cifar-10-batches-py/'", ",", "'test_batch'", ")", ")", "\n", "teX", "=", "np", ".", "asarray", "(", "te_data", "[", "'data'", "]", ")", "\n", "teY", "=", "np", ".", "asarray", "(", "te_data", "[", "'labels'", "]", ")", "\n", "trX", "=", "trX", ".", "reshape", "(", "-", "1", ",", "3", ",", "32", ",", "32", ")", ".", "transpose", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "teX", "=", "teX", ".", "reshape", "(", "-", "1", ",", "3", ",", "32", ",", "32", ")", ".", "transpose", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "trX", ",", "vaX", ",", "trY", ",", "vaY", "=", "train_test_split", "(", "trX", ",", "trY", ",", "test_size", "=", "5000", ",", "random_state", "=", "11172018", ")", "\n", "if", "one_hot", ":", "\n", "        ", "trY", "=", "np", ".", "eye", "(", "10", ",", "dtype", "=", "np", ".", "float32", ")", "[", "trY", "]", "\n", "vaY", "=", "np", ".", "eye", "(", "10", ",", "dtype", "=", "np", ".", "float32", ")", "[", "vaY", "]", "\n", "teY", "=", "np", ".", "eye", "(", "10", ",", "dtype", "=", "np", ".", "float32", ")", "[", "teY", "]", "\n", "", "else", ":", "\n", "        ", "trY", "=", "np", ".", "reshape", "(", "trY", ",", "[", "-", "1", ",", "1", "]", ")", "\n", "vaY", "=", "np", ".", "reshape", "(", "vaY", ",", "[", "-", "1", ",", "1", "]", ")", "\n", "teY", "=", "np", ".", "reshape", "(", "teY", ",", "[", "-", "1", ",", "1", "]", ")", "\n", "", "return", "(", "trX", ",", "trY", ")", ",", "(", "vaX", ",", "vaY", ")", ",", "(", "teX", ",", "teY", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.openai_vdvae.None.vae.Block.__init__": [[11, 19], ["torch.nn.Module.__init__", "vae_helpers.get_1x1", "vae_helpers.get_1x1", "vae_helpers.get_3x3", "vae_helpers.get_1x1", "vae_helpers.get_3x3", "vae_helpers.get_1x1"], "methods", ["home.repos.pwc.inspect_result.openai_vdvae.None.vae.DecBlock.__init__", "home.repos.pwc.inspect_result.openai_vdvae.None.vae_helpers.get_1x1", "home.repos.pwc.inspect_result.openai_vdvae.None.vae_helpers.get_1x1", "home.repos.pwc.inspect_result.openai_vdvae.None.vae_helpers.get_3x3", "home.repos.pwc.inspect_result.openai_vdvae.None.vae_helpers.get_1x1", "home.repos.pwc.inspect_result.openai_vdvae.None.vae_helpers.get_3x3", "home.repos.pwc.inspect_result.openai_vdvae.None.vae_helpers.get_1x1"], ["    ", "def", "__init__", "(", "self", ",", "in_width", ",", "middle_width", ",", "out_width", ",", "down_rate", "=", "None", ",", "residual", "=", "False", ",", "use_3x3", "=", "True", ",", "zero_last", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "down_rate", "=", "down_rate", "\n", "self", ".", "residual", "=", "residual", "\n", "self", ".", "c1", "=", "get_1x1", "(", "in_width", ",", "middle_width", ")", "\n", "self", ".", "c2", "=", "get_3x3", "(", "middle_width", ",", "middle_width", ")", "if", "use_3x3", "else", "get_1x1", "(", "middle_width", ",", "middle_width", ")", "\n", "self", ".", "c3", "=", "get_3x3", "(", "middle_width", ",", "middle_width", ")", "if", "use_3x3", "else", "get_1x1", "(", "middle_width", ",", "middle_width", ")", "\n", "self", ".", "c4", "=", "get_1x1", "(", "middle_width", ",", "out_width", ",", "zero_weights", "=", "zero_last", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.openai_vdvae.None.vae.Block.forward": [[20, 29], ["vae.Block.c1", "vae.Block.c2", "vae.Block.c3", "vae.Block.c4", "torch.nn.functional.gelu", "torch.nn.functional.gelu", "torch.nn.functional.gelu", "torch.nn.functional.gelu", "torch.nn.functional.avg_pool2d"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "xhat", "=", "self", ".", "c1", "(", "F", ".", "gelu", "(", "x", ")", ")", "\n", "xhat", "=", "self", ".", "c2", "(", "F", ".", "gelu", "(", "xhat", ")", ")", "\n", "xhat", "=", "self", ".", "c3", "(", "F", ".", "gelu", "(", "xhat", ")", ")", "\n", "xhat", "=", "self", ".", "c4", "(", "F", ".", "gelu", "(", "xhat", ")", ")", "\n", "out", "=", "x", "+", "xhat", "if", "self", ".", "residual", "else", "xhat", "\n", "if", "self", ".", "down_rate", "is", "not", "None", ":", "\n", "            ", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "kernel_size", "=", "self", ".", "down_rate", ",", "stride", "=", "self", ".", "down_rate", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.openai_vdvae.None.vae.Encoder.build": [[68, 81], ["vae_helpers.get_3x3", "vae.get_width_settings", "vae.parse_layer_string", "len", "torch.nn.ModuleList", "enc_blocks.append", "numpy.sqrt", "vae.Block", "int"], "methods", ["home.repos.pwc.inspect_result.openai_vdvae.None.vae_helpers.get_3x3", "home.repos.pwc.inspect_result.openai_vdvae.None.vae.get_width_settings", "home.repos.pwc.inspect_result.openai_vdvae.None.vae.parse_layer_string"], ["    ", "def", "build", "(", "self", ")", ":", "\n", "        ", "H", "=", "self", ".", "H", "\n", "self", ".", "in_conv", "=", "get_3x3", "(", "H", ".", "image_channels", ",", "H", ".", "width", ")", "\n", "self", ".", "widths", "=", "get_width_settings", "(", "H", ".", "width", ",", "H", ".", "custom_width_str", ")", "\n", "enc_blocks", "=", "[", "]", "\n", "blockstr", "=", "parse_layer_string", "(", "H", ".", "enc_blocks", ")", "\n", "for", "res", ",", "down_rate", "in", "blockstr", ":", "\n", "            ", "use_3x3", "=", "res", ">", "2", "# Don't use 3x3s for 1x1, 2x2 patches", "\n", "enc_blocks", ".", "append", "(", "Block", "(", "self", ".", "widths", "[", "res", "]", ",", "int", "(", "self", ".", "widths", "[", "res", "]", "*", "H", ".", "bottleneck_multiple", ")", ",", "self", ".", "widths", "[", "res", "]", ",", "down_rate", "=", "down_rate", ",", "residual", "=", "True", ",", "use_3x3", "=", "use_3x3", ")", ")", "\n", "", "n_blocks", "=", "len", "(", "blockstr", ")", "\n", "for", "b", "in", "enc_blocks", ":", "\n", "            ", "b", ".", "c4", ".", "weight", ".", "data", "*=", "np", ".", "sqrt", "(", "1", "/", "n_blocks", ")", "\n", "", "self", ".", "enc_blocks", "=", "nn", ".", "ModuleList", "(", "enc_blocks", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.openai_vdvae.None.vae.Encoder.forward": [[82, 93], ["block.permute().contiguous", "vae.Encoder.in_conv", "block", "block.permute", "vae.pad_channels"], "methods", ["home.repos.pwc.inspect_result.openai_vdvae.None.vae.pad_channels"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "x", "=", "self", ".", "in_conv", "(", "x", ")", "\n", "activations", "=", "{", "}", "\n", "activations", "[", "x", ".", "shape", "[", "2", "]", "]", "=", "x", "\n", "for", "block", "in", "self", ".", "enc_blocks", ":", "\n", "            ", "x", "=", "block", "(", "x", ")", "\n", "res", "=", "x", ".", "shape", "[", "2", "]", "\n", "x", "=", "x", "if", "x", ".", "shape", "[", "1", "]", "==", "self", ".", "widths", "[", "res", "]", "else", "pad_channels", "(", "x", ",", "self", ".", "widths", "[", "res", "]", ")", "\n", "activations", "[", "res", "]", "=", "x", "\n", "", "return", "activations", "\n", "\n"]], "home.repos.pwc.inspect_result.openai_vdvae.None.vae.DecBlock.__init__": [[96, 113], ["torch.nn.Module.__init__", "vae.get_width_settings", "int", "vae.Block", "vae.Block", "vae_helpers.get_1x1", "numpy.sqrt", "vae.Block", "numpy.sqrt", "vae.DecBlock.z_proj"], "methods", ["home.repos.pwc.inspect_result.openai_vdvae.None.vae.DecBlock.__init__", "home.repos.pwc.inspect_result.openai_vdvae.None.vae.get_width_settings", "home.repos.pwc.inspect_result.openai_vdvae.None.vae_helpers.get_1x1"], ["    ", "def", "__init__", "(", "self", ",", "H", ",", "res", ",", "mixin", ",", "n_blocks", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "base", "=", "res", "\n", "self", ".", "mixin", "=", "mixin", "\n", "self", ".", "H", "=", "H", "\n", "self", ".", "widths", "=", "get_width_settings", "(", "H", ".", "width", ",", "H", ".", "custom_width_str", ")", "\n", "width", "=", "self", ".", "widths", "[", "res", "]", "\n", "use_3x3", "=", "res", ">", "2", "\n", "cond_width", "=", "int", "(", "width", "*", "H", ".", "bottleneck_multiple", ")", "\n", "self", ".", "zdim", "=", "H", ".", "zdim", "\n", "self", ".", "enc", "=", "Block", "(", "width", "*", "2", ",", "cond_width", ",", "H", ".", "zdim", "*", "2", ",", "residual", "=", "False", ",", "use_3x3", "=", "use_3x3", ")", "\n", "self", ".", "prior", "=", "Block", "(", "width", ",", "cond_width", ",", "H", ".", "zdim", "*", "2", "+", "width", ",", "residual", "=", "False", ",", "use_3x3", "=", "use_3x3", ",", "zero_last", "=", "True", ")", "\n", "self", ".", "z_proj", "=", "get_1x1", "(", "H", ".", "zdim", ",", "width", ")", "\n", "self", ".", "z_proj", ".", "weight", ".", "data", "*=", "np", ".", "sqrt", "(", "1", "/", "n_blocks", ")", "\n", "self", ".", "resnet", "=", "Block", "(", "width", ",", "cond_width", ",", "width", ",", "residual", "=", "True", ",", "use_3x3", "=", "use_3x3", ")", "\n", "self", ".", "resnet", ".", "c4", ".", "weight", ".", "data", "*=", "np", ".", "sqrt", "(", "1", "/", "n_blocks", ")", "\n", "self", ".", "z_fn", "=", "lambda", "x", ":", "self", ".", "z_proj", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.openai_vdvae.None.vae.DecBlock.sample": [[114, 122], ["vae.DecBlock.enc().chunk", "vae.DecBlock.prior", "vae_helpers.draw_gaussian_diag_samples", "vae_helpers.gaussian_analytical_kl", "vae.DecBlock.enc", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.openai_vdvae.None.vae_helpers.draw_gaussian_diag_samples", "home.repos.pwc.inspect_result.openai_vdvae.None.vae_helpers.gaussian_analytical_kl"], ["", "def", "sample", "(", "self", ",", "x", ",", "acts", ")", ":", "\n", "        ", "qm", ",", "qv", "=", "self", ".", "enc", "(", "torch", ".", "cat", "(", "[", "x", ",", "acts", "]", ",", "dim", "=", "1", ")", ")", ".", "chunk", "(", "2", ",", "dim", "=", "1", ")", "\n", "feats", "=", "self", ".", "prior", "(", "x", ")", "\n", "pm", ",", "pv", ",", "xpp", "=", "feats", "[", ":", ",", ":", "self", ".", "zdim", ",", "...", "]", ",", "feats", "[", ":", ",", "self", ".", "zdim", ":", "self", ".", "zdim", "*", "2", ",", "...", "]", ",", "feats", "[", ":", ",", "self", ".", "zdim", "*", "2", ":", ",", "...", "]", "\n", "x", "=", "x", "+", "xpp", "\n", "z", "=", "draw_gaussian_diag_samples", "(", "qm", ",", "qv", ")", "\n", "kl", "=", "gaussian_analytical_kl", "(", "qm", ",", "pm", ",", "qv", ",", "pv", ")", "\n", "return", "z", ",", "x", ",", "kl", "\n", "\n"]], "home.repos.pwc.inspect_result.openai_vdvae.None.vae.DecBlock.sample_uncond": [[123, 135], ["vae.DecBlock.prior", "vae_helpers.draw_gaussian_diag_samples", "torch.ones_like", "numpy.log"], "methods", ["home.repos.pwc.inspect_result.openai_vdvae.None.vae_helpers.draw_gaussian_diag_samples"], ["", "def", "sample_uncond", "(", "self", ",", "x", ",", "t", "=", "None", ",", "lvs", "=", "None", ")", ":", "\n", "        ", "n", ",", "c", ",", "h", ",", "w", "=", "x", ".", "shape", "\n", "feats", "=", "self", ".", "prior", "(", "x", ")", "\n", "pm", ",", "pv", ",", "xpp", "=", "feats", "[", ":", ",", ":", "self", ".", "zdim", ",", "...", "]", ",", "feats", "[", ":", ",", "self", ".", "zdim", ":", "self", ".", "zdim", "*", "2", ",", "...", "]", ",", "feats", "[", ":", ",", "self", ".", "zdim", "*", "2", ":", ",", "...", "]", "\n", "x", "=", "x", "+", "xpp", "\n", "if", "lvs", "is", "not", "None", ":", "\n", "            ", "z", "=", "lvs", "\n", "", "else", ":", "\n", "            ", "if", "t", "is", "not", "None", ":", "\n", "                ", "pv", "=", "pv", "+", "torch", ".", "ones_like", "(", "pv", ")", "*", "np", ".", "log", "(", "t", ")", "\n", "", "z", "=", "draw_gaussian_diag_samples", "(", "pm", ",", "pv", ")", "\n", "", "return", "z", ",", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.openai_vdvae.None.vae.DecBlock.get_inputs": [[136, 145], ["torch.zeros_like.repeat", "torch.zeros_like"], "methods", ["None"], ["", "def", "get_inputs", "(", "self", ",", "xs", ",", "activations", ")", ":", "\n", "        ", "acts", "=", "activations", "[", "self", ".", "base", "]", "\n", "try", ":", "\n", "            ", "x", "=", "xs", "[", "self", ".", "base", "]", "\n", "", "except", "KeyError", ":", "\n", "            ", "x", "=", "torch", ".", "zeros_like", "(", "acts", ")", "\n", "", "if", "acts", ".", "shape", "[", "0", "]", "!=", "x", ".", "shape", "[", "0", "]", ":", "\n", "            ", "x", "=", "x", ".", "repeat", "(", "acts", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ",", "1", ")", "\n", "", "return", "x", ",", "acts", "\n", "\n"]], "home.repos.pwc.inspect_result.openai_vdvae.None.vae.DecBlock.forward": [[146, 157], ["vae.DecBlock.get_inputs", "vae.DecBlock.sample", "vae.DecBlock.resnet", "vae.DecBlock.z_fn", "dict", "torch.nn.functional.interpolate", "dict", "z.detach"], "methods", ["home.repos.pwc.inspect_result.openai_vdvae.None.vae.DecBlock.get_inputs", "home.repos.pwc.inspect_result.openai_vdvae.None.vae.DecBlock.sample"], ["", "def", "forward", "(", "self", ",", "xs", ",", "activations", ",", "get_latents", "=", "False", ")", ":", "\n", "        ", "x", ",", "acts", "=", "self", ".", "get_inputs", "(", "xs", ",", "activations", ")", "\n", "if", "self", ".", "mixin", "is", "not", "None", ":", "\n", "            ", "x", "=", "x", "+", "F", ".", "interpolate", "(", "xs", "[", "self", ".", "mixin", "]", "[", ":", ",", ":", "x", ".", "shape", "[", "1", "]", ",", "...", "]", ",", "scale_factor", "=", "self", ".", "base", "//", "self", ".", "mixin", ")", "\n", "", "z", ",", "x", ",", "kl", "=", "self", ".", "sample", "(", "x", ",", "acts", ")", "\n", "x", "=", "x", "+", "self", ".", "z_fn", "(", "z", ")", "\n", "x", "=", "self", ".", "resnet", "(", "x", ")", "\n", "xs", "[", "self", ".", "base", "]", "=", "x", "\n", "if", "get_latents", ":", "\n", "            ", "return", "xs", ",", "dict", "(", "z", "=", "z", ".", "detach", "(", ")", ",", "kl", "=", "kl", ")", "\n", "", "return", "xs", ",", "dict", "(", "kl", "=", "kl", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.openai_vdvae.None.vae.DecBlock.forward_uncond": [[158, 171], ["vae.DecBlock.sample_uncond", "vae.DecBlock.resnet", "vae.DecBlock.z_fn", "torch.zeros", "torch.nn.functional.interpolate", "list", "xs.keys"], "methods", ["home.repos.pwc.inspect_result.openai_vdvae.None.vae.DecBlock.sample_uncond"], ["", "def", "forward_uncond", "(", "self", ",", "xs", ",", "t", "=", "None", ",", "lvs", "=", "None", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "x", "=", "xs", "[", "self", ".", "base", "]", "\n", "", "except", "KeyError", ":", "\n", "            ", "ref", "=", "xs", "[", "list", "(", "xs", ".", "keys", "(", ")", ")", "[", "0", "]", "]", "\n", "x", "=", "torch", ".", "zeros", "(", "dtype", "=", "ref", ".", "dtype", ",", "size", "=", "(", "ref", ".", "shape", "[", "0", "]", ",", "self", ".", "widths", "[", "self", ".", "base", "]", ",", "self", ".", "base", ",", "self", ".", "base", ")", ",", "device", "=", "ref", ".", "device", ")", "\n", "", "if", "self", ".", "mixin", "is", "not", "None", ":", "\n", "            ", "x", "=", "x", "+", "F", ".", "interpolate", "(", "xs", "[", "self", ".", "mixin", "]", "[", ":", ",", ":", "x", ".", "shape", "[", "1", "]", ",", "...", "]", ",", "scale_factor", "=", "self", ".", "base", "//", "self", ".", "mixin", ")", "\n", "", "z", ",", "x", "=", "self", ".", "sample_uncond", "(", "x", ",", "t", ",", "lvs", "=", "lvs", ")", "\n", "x", "=", "x", "+", "self", ".", "z_fn", "(", "z", ")", "\n", "x", "=", "self", ".", "resnet", "(", "x", ")", "\n", "xs", "[", "self", ".", "base", "]", "=", "x", "\n", "return", "xs", "\n", "\n"]], "home.repos.pwc.inspect_result.openai_vdvae.None.vae.Decoder.build": [[175, 191], ["set", "vae.get_width_settings", "vae.parse_layer_string", "enumerate", "sorted", "torch.nn.ModuleList", "torch.nn.ParameterList", "vae_helpers.DmolNet", "torch.nn.Parameter", "torch.nn.Parameter", "dec_blocks.append", "set.add", "torch.ones", "torch.zeros", "vae.DecBlock", "torch.nn.Parameter", "torch.zeros", "len"], "methods", ["home.repos.pwc.inspect_result.openai_vdvae.None.vae.get_width_settings", "home.repos.pwc.inspect_result.openai_vdvae.None.vae.parse_layer_string"], ["    ", "def", "build", "(", "self", ")", ":", "\n", "        ", "H", "=", "self", ".", "H", "\n", "resos", "=", "set", "(", ")", "\n", "dec_blocks", "=", "[", "]", "\n", "self", ".", "widths", "=", "get_width_settings", "(", "H", ".", "width", ",", "H", ".", "custom_width_str", ")", "\n", "blocks", "=", "parse_layer_string", "(", "H", ".", "dec_blocks", ")", "\n", "for", "idx", ",", "(", "res", ",", "mixin", ")", "in", "enumerate", "(", "blocks", ")", ":", "\n", "            ", "dec_blocks", ".", "append", "(", "DecBlock", "(", "H", ",", "res", ",", "mixin", ",", "n_blocks", "=", "len", "(", "blocks", ")", ")", ")", "\n", "resos", ".", "add", "(", "res", ")", "\n", "", "self", ".", "resolutions", "=", "sorted", "(", "resos", ")", "\n", "self", ".", "dec_blocks", "=", "nn", ".", "ModuleList", "(", "dec_blocks", ")", "\n", "self", ".", "bias_xs", "=", "nn", ".", "ParameterList", "(", "[", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "self", ".", "widths", "[", "res", "]", ",", "res", ",", "res", ")", ")", "for", "res", "in", "self", ".", "resolutions", "if", "res", "<=", "H", ".", "no_bias_above", "]", ")", "\n", "self", ".", "out_net", "=", "DmolNet", "(", "H", ")", "\n", "self", ".", "gain", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "1", ",", "H", ".", "width", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "H", ".", "width", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "final_fn", "=", "lambda", "x", ":", "x", "*", "self", ".", "gain", "+", "self", ".", "bias", "\n", "\n"]], "home.repos.pwc.inspect_result.openai_vdvae.None.vae.Decoder.forward": [[192, 200], ["vae.Decoder.final_fn", "block", "stats.append"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "activations", ",", "get_latents", "=", "False", ")", ":", "\n", "        ", "stats", "=", "[", "]", "\n", "xs", "=", "{", "a", ".", "shape", "[", "2", "]", ":", "a", "for", "a", "in", "self", ".", "bias_xs", "}", "\n", "for", "block", "in", "self", ".", "dec_blocks", ":", "\n", "            ", "xs", ",", "block_stats", "=", "block", "(", "xs", ",", "activations", ",", "get_latents", "=", "get_latents", ")", "\n", "stats", ".", "append", "(", "block_stats", ")", "\n", "", "xs", "[", "self", ".", "H", ".", "image_size", "]", "=", "self", ".", "final_fn", "(", "xs", "[", "self", ".", "H", ".", "image_size", "]", ")", "\n", "return", "xs", "[", "self", ".", "H", ".", "image_size", "]", ",", "stats", "\n", "\n"]], "home.repos.pwc.inspect_result.openai_vdvae.None.vae.Decoder.forward_uncond": [[201, 213], ["enumerate", "vae.Decoder.final_fn", "bias.repeat", "block.forward_uncond"], "methods", ["home.repos.pwc.inspect_result.openai_vdvae.None.vae.Decoder.forward_uncond"], ["", "def", "forward_uncond", "(", "self", ",", "n", ",", "t", "=", "None", ",", "y", "=", "None", ")", ":", "\n", "        ", "xs", "=", "{", "}", "\n", "for", "bias", "in", "self", ".", "bias_xs", ":", "\n", "            ", "xs", "[", "bias", ".", "shape", "[", "2", "]", "]", "=", "bias", ".", "repeat", "(", "n", ",", "1", ",", "1", ",", "1", ")", "\n", "", "for", "idx", ",", "block", "in", "enumerate", "(", "self", ".", "dec_blocks", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "temp", "=", "t", "[", "idx", "]", "\n", "", "except", "TypeError", ":", "\n", "                ", "temp", "=", "t", "\n", "", "xs", "=", "block", ".", "forward_uncond", "(", "xs", ",", "temp", ")", "\n", "", "xs", "[", "self", ".", "H", ".", "image_size", "]", "=", "self", ".", "final_fn", "(", "xs", "[", "self", ".", "H", ".", "image_size", "]", ")", "\n", "return", "xs", "[", "self", ".", "H", ".", "image_size", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.openai_vdvae.None.vae.Decoder.forward_manual_latents": [[214, 222], ["itertools.zip_longest", "vae.Decoder.final_fn", "bias.repeat", "block.forward_uncond"], "methods", ["home.repos.pwc.inspect_result.openai_vdvae.None.vae.Decoder.forward_uncond"], ["", "def", "forward_manual_latents", "(", "self", ",", "n", ",", "latents", ",", "t", "=", "None", ")", ":", "\n", "        ", "xs", "=", "{", "}", "\n", "for", "bias", "in", "self", ".", "bias_xs", ":", "\n", "            ", "xs", "[", "bias", ".", "shape", "[", "2", "]", "]", "=", "bias", ".", "repeat", "(", "n", ",", "1", ",", "1", ",", "1", ")", "\n", "", "for", "block", ",", "lvs", "in", "itertools", ".", "zip_longest", "(", "self", ".", "dec_blocks", ",", "latents", ")", ":", "\n", "            ", "xs", "=", "block", ".", "forward_uncond", "(", "xs", ",", "t", ",", "lvs", "=", "lvs", ")", "\n", "", "xs", "[", "self", ".", "H", ".", "image_size", "]", "=", "self", ".", "final_fn", "(", "xs", "[", "self", ".", "H", ".", "image_size", "]", ")", "\n", "return", "xs", "[", "self", ".", "H", ".", "image_size", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.openai_vdvae.None.vae.VAE.build": [[225, 228], ["vae.Encoder", "vae.Decoder"], "methods", ["None"], ["    ", "def", "build", "(", "self", ")", ":", "\n", "        ", "self", ".", "encoder", "=", "Encoder", "(", "self", ".", "H", ")", "\n", "self", ".", "decoder", "=", "Decoder", "(", "self", ".", "H", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.openai_vdvae.None.vae.VAE.forward": [[229, 240], ["vae.VAE.encoder.forward", "vae.VAE.decoder.forward", "vae.VAE.decoder.out_net.nll", "torch.zeros_like", "numpy.prod", "dict", "statdict[].sum", "vae.VAE.mean", "torch.zeros_like.mean"], "methods", ["home.repos.pwc.inspect_result.openai_vdvae.None.vae.VAE.forward", "home.repos.pwc.inspect_result.openai_vdvae.None.vae.VAE.forward", "home.repos.pwc.inspect_result.openai_vdvae.None.vae_helpers.DmolNet.nll"], ["", "def", "forward", "(", "self", ",", "x", ",", "x_target", ")", ":", "\n", "        ", "activations", "=", "self", ".", "encoder", ".", "forward", "(", "x", ")", "\n", "px_z", ",", "stats", "=", "self", ".", "decoder", ".", "forward", "(", "activations", ")", "\n", "distortion_per_pixel", "=", "self", ".", "decoder", ".", "out_net", ".", "nll", "(", "px_z", ",", "x_target", ")", "\n", "rate_per_pixel", "=", "torch", ".", "zeros_like", "(", "distortion_per_pixel", ")", "\n", "ndims", "=", "np", ".", "prod", "(", "x", ".", "shape", "[", "1", ":", "]", ")", "\n", "for", "statdict", "in", "stats", ":", "\n", "            ", "rate_per_pixel", "+=", "statdict", "[", "'kl'", "]", ".", "sum", "(", "dim", "=", "(", "1", ",", "2", ",", "3", ")", ")", "\n", "", "rate_per_pixel", "/=", "ndims", "\n", "elbo", "=", "(", "distortion_per_pixel", "+", "rate_per_pixel", ")", ".", "mean", "(", ")", "\n", "return", "dict", "(", "elbo", "=", "elbo", ",", "distortion", "=", "distortion_per_pixel", ".", "mean", "(", ")", ",", "rate", "=", "rate_per_pixel", ".", "mean", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.openai_vdvae.None.vae.VAE.forward_get_latents": [[241, 245], ["vae.VAE.encoder.forward", "vae.VAE.decoder.forward"], "methods", ["home.repos.pwc.inspect_result.openai_vdvae.None.vae.VAE.forward", "home.repos.pwc.inspect_result.openai_vdvae.None.vae.VAE.forward"], ["", "def", "forward_get_latents", "(", "self", ",", "x", ")", ":", "\n", "        ", "activations", "=", "self", ".", "encoder", ".", "forward", "(", "x", ")", "\n", "_", ",", "stats", "=", "self", ".", "decoder", ".", "forward", "(", "activations", ",", "get_latents", "=", "True", ")", "\n", "return", "stats", "\n", "\n"]], "home.repos.pwc.inspect_result.openai_vdvae.None.vae.VAE.forward_uncond_samples": [[246, 249], ["vae.VAE.decoder.forward_uncond", "vae.VAE.decoder.out_net.sample"], "methods", ["home.repos.pwc.inspect_result.openai_vdvae.None.vae.Decoder.forward_uncond", "home.repos.pwc.inspect_result.openai_vdvae.None.vae.DecBlock.sample"], ["", "def", "forward_uncond_samples", "(", "self", ",", "n_batch", ",", "t", "=", "None", ")", ":", "\n", "        ", "px_z", "=", "self", ".", "decoder", ".", "forward_uncond", "(", "n_batch", ",", "t", "=", "t", ")", "\n", "return", "self", ".", "decoder", ".", "out_net", ".", "sample", "(", "px_z", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.openai_vdvae.None.vae.VAE.forward_samples_set_latents": [[250, 253], ["vae.VAE.decoder.forward_manual_latents", "vae.VAE.decoder.out_net.sample"], "methods", ["home.repos.pwc.inspect_result.openai_vdvae.None.vae.Decoder.forward_manual_latents", "home.repos.pwc.inspect_result.openai_vdvae.None.vae.DecBlock.sample"], ["", "def", "forward_samples_set_latents", "(", "self", ",", "n_batch", ",", "latents", ",", "t", "=", "None", ")", ":", "\n", "        ", "px_z", "=", "self", ".", "decoder", ".", "forward_manual_latents", "(", "n_batch", ",", "latents", ",", "t", "=", "t", ")", "\n", "return", "self", ".", "decoder", ".", "out_net", ".", "sample", "(", "px_z", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.openai_vdvae.None.vae.parse_layer_string": [[31, 48], ["s.split", "ss.split", "int", "layers.append", "int", "range", "int", "layers.append", "int", "layers.append", "ss.split", "int", "ss.split"], "function", ["None"], ["", "", "def", "parse_layer_string", "(", "s", ")", ":", "\n", "    ", "layers", "=", "[", "]", "\n", "for", "ss", "in", "s", ".", "split", "(", "','", ")", ":", "\n", "        ", "if", "'x'", "in", "ss", ":", "\n", "            ", "res", ",", "num", "=", "ss", ".", "split", "(", "'x'", ")", "\n", "count", "=", "int", "(", "num", ")", "\n", "layers", "+=", "[", "(", "int", "(", "res", ")", ",", "None", ")", "for", "_", "in", "range", "(", "count", ")", "]", "\n", "", "elif", "'m'", "in", "ss", ":", "\n", "            ", "res", ",", "mixin", "=", "[", "int", "(", "a", ")", "for", "a", "in", "ss", ".", "split", "(", "'m'", ")", "]", "\n", "layers", ".", "append", "(", "(", "res", ",", "mixin", ")", ")", "\n", "", "elif", "'d'", "in", "ss", ":", "\n", "            ", "res", ",", "down_rate", "=", "[", "int", "(", "a", ")", "for", "a", "in", "ss", ".", "split", "(", "'d'", ")", "]", "\n", "layers", ".", "append", "(", "(", "res", ",", "down_rate", ")", ")", "\n", "", "else", ":", "\n", "            ", "res", "=", "int", "(", "ss", ")", "\n", "layers", ".", "append", "(", "(", "res", ",", "None", ")", ")", "\n", "", "", "return", "layers", "\n", "\n"]], "home.repos.pwc.inspect_result.openai_vdvae.None.vae.pad_channels": [[50, 55], ["torch.zeros"], "function", ["None"], ["", "def", "pad_channels", "(", "t", ",", "width", ")", ":", "\n", "    ", "d1", ",", "d2", ",", "d3", ",", "d4", "=", "t", ".", "shape", "\n", "empty", "=", "torch", ".", "zeros", "(", "d1", ",", "width", ",", "d3", ",", "d4", ",", "device", "=", "t", ".", "device", ")", "\n", "empty", "[", ":", ",", ":", "d2", ",", ":", ",", ":", "]", "=", "t", "\n", "return", "empty", "\n", "\n"]], "home.repos.pwc.inspect_result.openai_vdvae.None.vae.get_width_settings": [[57, 65], ["collections.defaultdict", "s.split.split", "ss.split", "int", "int"], "function", ["None"], ["", "def", "get_width_settings", "(", "width", ",", "s", ")", ":", "\n", "    ", "mapping", "=", "defaultdict", "(", "lambda", ":", "width", ")", "\n", "if", "s", ":", "\n", "        ", "s", "=", "s", ".", "split", "(", "','", ")", "\n", "for", "ss", "in", "s", ":", "\n", "            ", "k", ",", "v", "=", "ss", ".", "split", "(", "':'", ")", "\n", "mapping", "[", "int", "(", "k", ")", "]", "=", "int", "(", "v", ")", "\n", "", "", "return", "mapping", "\n", "\n"]], "home.repos.pwc.inspect_result.openai_vdvae.None.utils.Hyperparams.__getattr__": [[25, 30], ["None"], "methods", ["None"], ["    ", "def", "__getattr__", "(", "self", ",", "attr", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "return", "self", "[", "attr", "]", "\n", "", "except", "KeyError", ":", "\n", "            ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.openai_vdvae.None.utils.Hyperparams.__setattr__": [[31, 33], ["None"], "methods", ["None"], ["", "", "def", "__setattr__", "(", "self", ",", "attr", ",", "value", ")", ":", "\n", "        ", "self", "[", "attr", "]", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.openai_vdvae.None.utils.allreduce": [[12, 16], ["utils.mpi_size", "torch.all_reduce", "utils.mpi_size"], "function", ["home.repos.pwc.inspect_result.openai_vdvae.None.utils.mpi_size", "home.repos.pwc.inspect_result.openai_vdvae.None.utils.mpi_size"], ["def", "allreduce", "(", "x", ",", "average", ")", ":", "\n", "    ", "if", "mpi_size", "(", ")", ">", "1", ":", "\n", "        ", "dist", ".", "all_reduce", "(", "x", ",", "dist", ".", "ReduceOp", ".", "SUM", ")", "\n", "", "return", "x", "/", "mpi_size", "(", ")", "if", "average", "else", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.openai_vdvae.None.utils.get_cpu_stats_over_ranks": [[18, 22], ["sorted", "allreduce().cpu", "stat_dict.keys", "allreduced[].item", "utils.allreduce", "enumerate", "torch.stack", "torch.stack", "torch.as_tensor().detach().cuda().float", "torch.as_tensor().detach().cuda().float", "torch.as_tensor().detach().cuda", "torch.as_tensor().detach().cuda", "torch.as_tensor().detach", "torch.as_tensor().detach", "torch.as_tensor", "torch.as_tensor"], "function", ["home.repos.pwc.inspect_result.openai_vdvae.None.utils.allreduce"], ["", "def", "get_cpu_stats_over_ranks", "(", "stat_dict", ")", ":", "\n", "    ", "keys", "=", "sorted", "(", "stat_dict", ".", "keys", "(", ")", ")", "\n", "allreduced", "=", "allreduce", "(", "torch", ".", "stack", "(", "[", "torch", ".", "as_tensor", "(", "stat_dict", "[", "k", "]", ")", ".", "detach", "(", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "for", "k", "in", "keys", "]", ")", ",", "average", "=", "True", ")", ".", "cpu", "(", ")", "\n", "return", "{", "k", ":", "allreduced", "[", "i", "]", ".", "item", "(", ")", "for", "(", "i", ",", "k", ")", "in", "enumerate", "(", "keys", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.openai_vdvae.None.utils.logger": [[35, 80], ["time.ctime", "argdict.update", "print", "utils.mpi_rank", "len", "sorted", "isinstance", "isinstance", "json.dumps.append", "json.dumps", "json.dumps", "json.dumps", "open", "print", "open", "print", "float.tolist", "isinstance", "str", "int", "isinstance", "float"], "function", ["home.repos.pwc.inspect_result.openai_vdvae.None.utils.mpi_rank"], ["", "", "def", "logger", "(", "log_prefix", ")", ":", "\n", "    ", "'Prints the arguments out to stdout, .txt, and .jsonl files'", "\n", "\n", "jsonl_path", "=", "f'{log_prefix}.jsonl'", "\n", "txt_path", "=", "f'{log_prefix}.txt'", "\n", "\n", "def", "log", "(", "*", "args", ",", "pprint", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "mpi_rank", "(", ")", "!=", "0", ":", "\n", "            ", "return", "\n", "", "t", "=", "time", ".", "ctime", "(", ")", "\n", "argdict", "=", "{", "'time'", ":", "t", "}", "\n", "if", "len", "(", "args", ")", ">", "0", ":", "\n", "            ", "argdict", "[", "'message'", "]", "=", "' '", ".", "join", "(", "[", "str", "(", "x", ")", "for", "x", "in", "args", "]", ")", "\n", "", "argdict", ".", "update", "(", "kwargs", ")", "\n", "\n", "txt_str", "=", "[", "]", "\n", "args_iter", "=", "sorted", "(", "argdict", ")", "if", "pprint", "else", "argdict", "\n", "for", "k", "in", "args_iter", ":", "\n", "            ", "val", "=", "argdict", "[", "k", "]", "\n", "if", "isinstance", "(", "val", ",", "np", ".", "ndarray", ")", ":", "\n", "                ", "val", "=", "val", ".", "tolist", "(", ")", "\n", "", "elif", "isinstance", "(", "val", ",", "np", ".", "integer", ")", ":", "\n", "                ", "val", "=", "int", "(", "val", ")", "\n", "", "elif", "isinstance", "(", "val", ",", "np", ".", "floating", ")", ":", "\n", "                ", "val", "=", "float", "(", "val", ")", "\n", "", "argdict", "[", "k", "]", "=", "val", "\n", "if", "isinstance", "(", "val", ",", "float", ")", ":", "\n", "                ", "val", "=", "f'{val:.5f}'", "\n", "", "txt_str", ".", "append", "(", "f'{k}: {val}'", ")", "\n", "", "txt_str", "=", "', '", ".", "join", "(", "txt_str", ")", "\n", "\n", "if", "pprint", ":", "\n", "            ", "json_str", "=", "json", ".", "dumps", "(", "argdict", ",", "sort_keys", "=", "True", ")", "\n", "txt_str", "=", "json", ".", "dumps", "(", "argdict", ",", "sort_keys", "=", "True", ",", "indent", "=", "4", ")", "\n", "", "else", ":", "\n", "            ", "json_str", "=", "json", ".", "dumps", "(", "argdict", ")", "\n", "\n", "", "print", "(", "txt_str", ",", "flush", "=", "True", ")", "\n", "\n", "with", "open", "(", "txt_path", ",", "\"a+\"", ")", "as", "f", ":", "\n", "            ", "print", "(", "txt_str", ",", "file", "=", "f", ",", "flush", "=", "True", ")", "\n", "", "with", "open", "(", "jsonl_path", ",", "\"a+\"", ")", "as", "f", ":", "\n", "            ", "print", "(", "json_str", ",", "file", "=", "f", ",", "flush", "=", "True", ")", "\n", "\n", "", "", "return", "log", "\n", "\n"]], "home.repos.pwc.inspect_result.openai_vdvae.None.utils.maybe_download": [[82, 98], ["path.startswith", "os.path.isfile", "subprocess.check_output", "subprocess.check_output", "tempfile.mkstemp"], "function", ["None"], ["", "def", "maybe_download", "(", "path", ",", "filename", "=", "None", ")", ":", "\n", "    ", "'''If a path is a gsutil path, download it and return the local link,\n    otherwise return link'''", "\n", "if", "not", "path", ".", "startswith", "(", "'gs://'", ")", ":", "\n", "        ", "return", "path", "\n", "", "if", "filename", ":", "\n", "        ", "local_dest", "=", "f'/tmp/'", "\n", "out_path", "=", "f'/tmp/{filename}'", "\n", "if", "os", ".", "path", ".", "isfile", "(", "out_path", ")", ":", "\n", "            ", "return", "out_path", "\n", "", "subprocess", ".", "check_output", "(", "[", "'gsutil'", ",", "'-m'", ",", "'cp'", ",", "'-R'", ",", "path", ",", "out_path", "]", ")", "\n", "return", "out_path", "\n", "", "else", ":", "\n", "        ", "local_dest", "=", "tempfile", ".", "mkstemp", "(", ")", "[", "1", "]", "\n", "subprocess", ".", "check_output", "(", "[", "'gsutil'", ",", "'-m'", ",", "'cp'", ",", "path", ",", "local_dest", "]", ")", "\n", "", "return", "local_dest", "\n", "\n"]], "home.repos.pwc.inspect_result.openai_vdvae.None.utils.tile_images": [[100, 115], ["numpy.ones", "enumerate", "len", "ValueError"], "function", ["None"], ["", "def", "tile_images", "(", "images", ",", "d1", "=", "4", ",", "d2", "=", "4", ",", "border", "=", "1", ")", ":", "\n", "    ", "id1", ",", "id2", ",", "c", "=", "images", "[", "0", "]", ".", "shape", "\n", "out", "=", "np", ".", "ones", "(", "[", "d1", "*", "id1", "+", "border", "*", "(", "d1", "+", "1", ")", ",", "\n", "d2", "*", "id2", "+", "border", "*", "(", "d2", "+", "1", ")", ",", "\n", "c", "]", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "out", "*=", "255", "\n", "if", "len", "(", "images", ")", "!=", "d1", "*", "d2", ":", "\n", "        ", "raise", "ValueError", "(", "'Wrong num of images'", ")", "\n", "", "for", "imgnum", ",", "im", "in", "enumerate", "(", "images", ")", ":", "\n", "        ", "num_d1", "=", "imgnum", "//", "d2", "\n", "num_d2", "=", "imgnum", "%", "d2", "\n", "start_d1", "=", "num_d1", "*", "id1", "+", "border", "*", "(", "num_d1", "+", "1", ")", "\n", "start_d2", "=", "num_d2", "*", "id2", "+", "border", "*", "(", "num_d2", "+", "1", ")", "\n", "out", "[", "start_d1", ":", "start_d1", "+", "id1", ",", "start_d2", ":", "start_d2", "+", "id2", ",", ":", "]", "=", "im", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.openai_vdvae.None.utils.mpi_size": [[117, 119], ["mpi4py.MPI.COMM_WORLD.Get_size"], "function", ["None"], ["", "def", "mpi_size", "(", ")", ":", "\n", "    ", "return", "MPI", ".", "COMM_WORLD", ".", "Get_size", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.openai_vdvae.None.utils.mpi_rank": [[121, 123], ["mpi4py.MPI.COMM_WORLD.Get_rank"], "function", ["None"], ["", "def", "mpi_rank", "(", ")", ":", "\n", "    ", "return", "MPI", ".", "COMM_WORLD", ".", "Get_rank", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.openai_vdvae.None.utils.num_nodes": [[125, 130], ["utils.mpi_size"], "function", ["home.repos.pwc.inspect_result.openai_vdvae.None.utils.mpi_size"], ["", "def", "num_nodes", "(", ")", ":", "\n", "    ", "nn", "=", "mpi_size", "(", ")", "\n", "if", "nn", "%", "8", "==", "0", ":", "\n", "        ", "return", "nn", "//", "8", "\n", "", "return", "nn", "//", "8", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.openai_vdvae.None.utils.gpus_per_node": [[132, 137], ["utils.mpi_size", "max", "utils.num_nodes"], "function", ["home.repos.pwc.inspect_result.openai_vdvae.None.utils.mpi_size", "home.repos.pwc.inspect_result.openai_vdvae.None.utils.num_nodes"], ["", "def", "gpus_per_node", "(", ")", ":", "\n", "    ", "size", "=", "mpi_size", "(", ")", "\n", "if", "size", ">", "1", ":", "\n", "        ", "return", "max", "(", "size", "//", "num_nodes", "(", ")", ",", "1", ")", "\n", "", "return", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.openai_vdvae.None.utils.local_mpi_rank": [[139, 141], ["utils.mpi_rank", "utils.gpus_per_node"], "function", ["home.repos.pwc.inspect_result.openai_vdvae.None.utils.mpi_rank", "home.repos.pwc.inspect_result.openai_vdvae.None.utils.gpus_per_node"], ["", "def", "local_mpi_rank", "(", ")", ":", "\n", "    ", "return", "mpi_rank", "(", ")", "%", "gpus_per_node", "(", ")", "\n", "", ""]]}