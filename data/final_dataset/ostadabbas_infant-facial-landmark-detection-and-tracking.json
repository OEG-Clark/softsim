{"home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.utils.transforms.fliplr_joints": [[34, 53], ["x[].copy", "x[].copy"], "function", ["None"], ["def", "fliplr_joints", "(", "x", ",", "width", ",", "dataset", "=", "'aflw'", ")", ":", "\n", "    ", "\"\"\"\n    flip coords\n    \"\"\"", "\n", "matched_parts", "=", "MATCHED_PARTS", "[", "dataset", "]", "\n", "# Flip horizontal", "\n", "x", "[", ":", ",", "0", "]", "=", "width", "-", "x", "[", ":", ",", "0", "]", "\n", "\n", "if", "dataset", "==", "'WFLW'", ":", "\n", "        ", "for", "pair", "in", "matched_parts", ":", "\n", "            ", "tmp", "=", "x", "[", "pair", "[", "0", "]", ",", ":", "]", ".", "copy", "(", ")", "\n", "x", "[", "pair", "[", "0", "]", ",", ":", "]", "=", "x", "[", "pair", "[", "1", "]", ",", ":", "]", "\n", "x", "[", "pair", "[", "1", "]", ",", ":", "]", "=", "tmp", "\n", "", "", "else", ":", "\n", "        ", "for", "pair", "in", "matched_parts", ":", "\n", "            ", "tmp", "=", "x", "[", "pair", "[", "0", "]", "-", "1", ",", ":", "]", ".", "copy", "(", ")", "\n", "x", "[", "pair", "[", "0", "]", "-", "1", ",", ":", "]", "=", "x", "[", "pair", "[", "1", "]", "-", "1", ",", ":", "]", "\n", "x", "[", "pair", "[", "1", "]", "-", "1", ",", ":", "]", "=", "tmp", "\n", "", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.utils.transforms.get_3rd_point": [[55, 58], ["numpy.array"], "function", ["None"], ["", "def", "get_3rd_point", "(", "a", ",", "b", ")", ":", "\n", "    ", "direct", "=", "a", "-", "b", "\n", "return", "b", "+", "np", ".", "array", "(", "[", "-", "direct", "[", "1", "]", ",", "direct", "[", "0", "]", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.utils.transforms.get_dir": [[60, 68], ["numpy.sin", "numpy.cos"], "function", ["None"], ["", "def", "get_dir", "(", "src_point", ",", "rot_rad", ")", ":", "\n", "    ", "sn", ",", "cs", "=", "np", ".", "sin", "(", "rot_rad", ")", ",", "np", ".", "cos", "(", "rot_rad", ")", "\n", "\n", "src_result", "=", "[", "0", ",", "0", "]", "\n", "src_result", "[", "0", "]", "=", "src_point", "[", "0", "]", "*", "cs", "-", "src_point", "[", "1", "]", "*", "sn", "\n", "src_result", "[", "1", "]", "=", "src_point", "[", "0", "]", "*", "sn", "+", "src_point", "[", "1", "]", "*", "cs", "\n", "\n", "return", "src_result", "\n", "\n"]], "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.utils.transforms.get_affine_transform": [[70, 102], ["numpy.array", "transforms.get_dir", "numpy.array", "numpy.zeros", "numpy.zeros", "transforms.get_3rd_point", "transforms.get_3rd_point", "print", "numpy.array", "numpy.array", "cv2.getAffineTransform", "cv2.getAffineTransform", "isinstance", "isinstance", "numpy.float32", "numpy.float32", "numpy.float32", "numpy.float32"], "function", ["home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.utils.transforms.get_dir", "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.utils.transforms.get_3rd_point", "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.utils.transforms.get_3rd_point"], ["", "def", "get_affine_transform", "(", "\n", "center", ",", "scale", ",", "rot", ",", "output_size", ",", "\n", "shift", "=", "np", ".", "array", "(", "[", "0", ",", "0", "]", ",", "dtype", "=", "np", ".", "float32", ")", ",", "inv", "=", "0", ")", ":", "\n", "    ", "if", "not", "isinstance", "(", "scale", ",", "np", ".", "ndarray", ")", "and", "not", "isinstance", "(", "scale", ",", "list", ")", ":", "\n", "        ", "print", "(", "scale", ")", "\n", "scale", "=", "np", ".", "array", "(", "[", "scale", ",", "scale", "]", ")", "\n", "\n", "", "scale_tmp", "=", "scale", "*", "200.0", "\n", "src_w", "=", "scale_tmp", "[", "0", "]", "\n", "dst_w", "=", "output_size", "[", "0", "]", "\n", "dst_h", "=", "output_size", "[", "1", "]", "\n", "\n", "rot_rad", "=", "np", ".", "pi", "*", "rot", "/", "180", "\n", "src_dir", "=", "get_dir", "(", "[", "0", ",", "src_w", "*", "-", "0.5", "]", ",", "rot_rad", ")", "\n", "dst_dir", "=", "np", ".", "array", "(", "[", "0", ",", "dst_w", "*", "-", "0.5", "]", ",", "np", ".", "float32", ")", "\n", "\n", "src", "=", "np", ".", "zeros", "(", "(", "3", ",", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "dst", "=", "np", ".", "zeros", "(", "(", "3", ",", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "src", "[", "0", ",", ":", "]", "=", "center", "+", "scale_tmp", "*", "shift", "\n", "src", "[", "1", ",", ":", "]", "=", "center", "+", "src_dir", "+", "scale_tmp", "*", "shift", "\n", "dst", "[", "0", ",", ":", "]", "=", "[", "dst_w", "*", "0.5", ",", "dst_h", "*", "0.5", "]", "\n", "dst", "[", "1", ",", ":", "]", "=", "np", ".", "array", "(", "[", "dst_w", "*", "0.5", ",", "dst_h", "*", "0.5", "]", ")", "+", "dst_dir", "\n", "\n", "src", "[", "2", ":", ",", ":", "]", "=", "get_3rd_point", "(", "src", "[", "0", ",", ":", "]", ",", "src", "[", "1", ",", ":", "]", ")", "\n", "dst", "[", "2", ":", ",", ":", "]", "=", "get_3rd_point", "(", "dst", "[", "0", ",", ":", "]", ",", "dst", "[", "1", ",", ":", "]", ")", "\n", "\n", "if", "inv", ":", "\n", "        ", "trans", "=", "cv2", ".", "getAffineTransform", "(", "np", ".", "float32", "(", "dst", ")", ",", "np", ".", "float32", "(", "src", ")", ")", "\n", "", "else", ":", "\n", "        ", "trans", "=", "cv2", ".", "getAffineTransform", "(", "np", ".", "float32", "(", "src", ")", ",", "np", ".", "float32", "(", "dst", ")", ")", "\n", "\n", "", "return", "trans", "\n", "\n"]], "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.utils.transforms.crop_v2": [[104, 113], ["transforms.get_affine_transform", "cv2.warpAffine", "int", "int"], "function", ["home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.utils.transforms.get_affine_transform"], ["", "def", "crop_v2", "(", "img", ",", "center", ",", "scale", ",", "output_size", ",", "rot", "=", "0", ")", ":", "\n", "    ", "trans", "=", "get_affine_transform", "(", "center", ",", "scale", ",", "rot", ",", "output_size", ")", "\n", "\n", "dst_img", "=", "cv2", ".", "warpAffine", "(", "\n", "img", ",", "trans", ",", "(", "int", "(", "output_size", "[", "0", "]", ")", ",", "int", "(", "output_size", "[", "1", "]", ")", ")", ",", "\n", "flags", "=", "cv2", ".", "INTER_LINEAR", "\n", ")", "\n", "\n", "return", "dst_img", "\n", "\n"]], "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.utils.transforms.get_transform": [[115, 143], ["numpy.zeros", "float", "float", "numpy.zeros", "numpy.eye", "np.eye.copy", "numpy.dot", "numpy.sin", "numpy.cos", "numpy.dot", "numpy.dot", "float", "float"], "function", ["None"], ["", "def", "get_transform", "(", "center", ",", "scale", ",", "output_size", ",", "rot", "=", "0", ")", ":", "\n", "    ", "\"\"\"\n    General image processing functions\n    \"\"\"", "\n", "# Generate transformation matrix", "\n", "h", "=", "200", "*", "scale", "\n", "t", "=", "np", ".", "zeros", "(", "(", "3", ",", "3", ")", ")", "\n", "t", "[", "0", ",", "0", "]", "=", "float", "(", "output_size", "[", "1", "]", ")", "/", "h", "\n", "t", "[", "1", ",", "1", "]", "=", "float", "(", "output_size", "[", "0", "]", ")", "/", "h", "\n", "t", "[", "0", ",", "2", "]", "=", "output_size", "[", "1", "]", "*", "(", "-", "float", "(", "center", "[", "0", "]", ")", "/", "h", "+", ".5", ")", "\n", "t", "[", "1", ",", "2", "]", "=", "output_size", "[", "0", "]", "*", "(", "-", "float", "(", "center", "[", "1", "]", ")", "/", "h", "+", ".5", ")", "\n", "t", "[", "2", ",", "2", "]", "=", "1", "\n", "if", "not", "rot", "==", "0", ":", "\n", "        ", "rot", "=", "-", "rot", "# To match direction of rotation from cropping", "\n", "rot_mat", "=", "np", ".", "zeros", "(", "(", "3", ",", "3", ")", ")", "\n", "rot_rad", "=", "rot", "*", "np", ".", "pi", "/", "180", "\n", "sn", ",", "cs", "=", "np", ".", "sin", "(", "rot_rad", ")", ",", "np", ".", "cos", "(", "rot_rad", ")", "\n", "rot_mat", "[", "0", ",", ":", "2", "]", "=", "[", "cs", ",", "-", "sn", "]", "\n", "rot_mat", "[", "1", ",", ":", "2", "]", "=", "[", "sn", ",", "cs", "]", "\n", "rot_mat", "[", "2", ",", "2", "]", "=", "1", "\n", "# Need to rotate around center", "\n", "t_mat", "=", "np", ".", "eye", "(", "3", ")", "\n", "t_mat", "[", "0", ",", "2", "]", "=", "-", "output_size", "[", "1", "]", "/", "2", "\n", "t_mat", "[", "1", ",", "2", "]", "=", "-", "output_size", "[", "0", "]", "/", "2", "\n", "t_inv", "=", "t_mat", ".", "copy", "(", ")", "\n", "t_inv", "[", ":", "2", ",", "2", "]", "*=", "-", "1", "\n", "t", "=", "np", ".", "dot", "(", "t_inv", ",", "np", ".", "dot", "(", "rot_mat", ",", "np", ".", "dot", "(", "t_mat", ",", "t", ")", ")", ")", "\n", "", "return", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.utils.transforms.transform_pixel": [[145, 153], ["transforms.get_transform", "numpy.dot", "numpy.linalg.inv", "numpy.array", "new_pt[].astype"], "function", ["home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.utils.transforms.get_transform"], ["", "def", "transform_pixel", "(", "pt", ",", "center", ",", "scale", ",", "output_size", ",", "invert", "=", "0", ",", "rot", "=", "0", ")", ":", "\n", "# Transform pixel location to different reference", "\n", "    ", "t", "=", "get_transform", "(", "center", ",", "scale", ",", "output_size", ",", "rot", "=", "rot", ")", "\n", "if", "invert", ":", "\n", "        ", "t", "=", "np", ".", "linalg", ".", "inv", "(", "t", ")", "\n", "", "new_pt", "=", "np", ".", "array", "(", "[", "pt", "[", "0", "]", "-", "1", ",", "pt", "[", "1", "]", "-", "1", ",", "1.", "]", ")", ".", "T", "\n", "new_pt", "=", "np", ".", "dot", "(", "t", ",", "new_pt", ")", "\n", "return", "new_pt", "[", ":", "2", "]", ".", "astype", "(", "int", ")", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.utils.transforms.transform_preds": [[155, 160], ["range", "coords.size", "torch.tensor", "transforms.transform_pixel"], "function", ["home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.utils.transforms.transform_pixel"], ["", "def", "transform_preds", "(", "coords", ",", "center", ",", "scale", ",", "output_size", ")", ":", "\n", "\n", "    ", "for", "p", "in", "range", "(", "coords", ".", "size", "(", "0", ")", ")", ":", "\n", "        ", "coords", "[", "p", ",", "0", ":", "2", "]", "=", "torch", ".", "tensor", "(", "transform_pixel", "(", "coords", "[", "p", ",", "0", ":", "2", "]", ",", "center", ",", "scale", ",", "output_size", ",", "1", ",", "0", ")", ")", "\n", "", "return", "coords", "\n", "\n"]], "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.utils.transforms.crop": [[162, 214], ["center.clone", "numpy.array", "numpy.array", "int", "numpy.zeros", "scipy.misc.imresize", "scipy.misc.imresize", "int", "int", "int", "transforms.transform_pixel", "transforms.transform_pixel", "len", "max", "max", "max", "min", "max", "min", "scipy.misc.imrotate", "scipy.misc.imrotate", "numpy.math.floor", "numpy.math.floor", "numpy.math.floor", "scipy.misc.imresize", "scipy.misc.imresize", "min", "min", "len", "len", "torch.zeros", "torch.zeros", "numpy.linalg.norm", "float", "len", "len", "max", "len"], "function", ["home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.utils.transforms.transform_pixel", "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.utils.transforms.transform_pixel"], ["", "def", "crop", "(", "img", ",", "center", ",", "scale", ",", "output_size", ",", "rot", "=", "0", ")", ":", "\n", "    ", "center_new", "=", "center", ".", "clone", "(", ")", "\n", "\n", "# Preprocessing for efficient cropping", "\n", "ht", ",", "wd", "=", "img", ".", "shape", "[", "0", "]", ",", "img", ".", "shape", "[", "1", "]", "\n", "sf", "=", "scale", "*", "200.0", "/", "output_size", "[", "0", "]", "\n", "if", "sf", "<", "2", ":", "\n", "        ", "sf", "=", "1", "\n", "", "else", ":", "\n", "        ", "new_size", "=", "int", "(", "np", ".", "math", ".", "floor", "(", "max", "(", "ht", ",", "wd", ")", "/", "sf", ")", ")", "\n", "new_ht", "=", "int", "(", "np", ".", "math", ".", "floor", "(", "ht", "/", "sf", ")", ")", "\n", "new_wd", "=", "int", "(", "np", ".", "math", ".", "floor", "(", "wd", "/", "sf", ")", ")", "\n", "if", "new_size", "<", "2", ":", "\n", "            ", "return", "torch", ".", "zeros", "(", "output_size", "[", "0", "]", ",", "output_size", "[", "1", "]", ",", "img", ".", "shape", "[", "2", "]", ")", "if", "len", "(", "img", ".", "shape", ")", ">", "2", "else", "torch", ".", "zeros", "(", "output_size", "[", "0", "]", ",", "output_size", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "img", "=", "scipy", ".", "misc", ".", "imresize", "(", "img", ",", "[", "new_ht", ",", "new_wd", "]", ")", "# (0-1)-->(0-255)", "\n", "center_new", "[", "0", "]", "=", "center_new", "[", "0", "]", "*", "1.0", "/", "sf", "\n", "center_new", "[", "1", "]", "=", "center_new", "[", "1", "]", "*", "1.0", "/", "sf", "\n", "scale", "=", "scale", "/", "sf", "\n", "\n", "# Upper left point", "\n", "", "", "ul", "=", "np", ".", "array", "(", "transform_pixel", "(", "[", "0", ",", "0", "]", ",", "center_new", ",", "scale", ",", "output_size", ",", "invert", "=", "1", ")", ")", "\n", "# Bottom right point", "\n", "br", "=", "np", ".", "array", "(", "transform_pixel", "(", "output_size", ",", "center_new", ",", "scale", ",", "output_size", ",", "invert", "=", "1", ")", ")", "\n", "\n", "# Padding so that when rotated proper amount of context is included", "\n", "pad", "=", "int", "(", "np", ".", "linalg", ".", "norm", "(", "br", "-", "ul", ")", "/", "2", "-", "float", "(", "br", "[", "1", "]", "-", "ul", "[", "1", "]", ")", "/", "2", ")", "\n", "if", "not", "rot", "==", "0", ":", "\n", "        ", "ul", "-=", "pad", "\n", "br", "+=", "pad", "\n", "\n", "", "new_shape", "=", "[", "br", "[", "1", "]", "-", "ul", "[", "1", "]", ",", "br", "[", "0", "]", "-", "ul", "[", "0", "]", "]", "\n", "if", "len", "(", "img", ".", "shape", ")", ">", "2", ":", "\n", "        ", "new_shape", "+=", "[", "img", ".", "shape", "[", "2", "]", "]", "\n", "\n", "", "new_img", "=", "np", ".", "zeros", "(", "new_shape", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "# Range to fill new array", "\n", "new_x", "=", "max", "(", "0", ",", "-", "ul", "[", "0", "]", ")", ",", "min", "(", "br", "[", "0", "]", ",", "len", "(", "img", "[", "0", "]", ")", ")", "-", "ul", "[", "0", "]", "\n", "new_y", "=", "max", "(", "0", ",", "-", "ul", "[", "1", "]", ")", ",", "min", "(", "br", "[", "1", "]", ",", "len", "(", "img", ")", ")", "-", "ul", "[", "1", "]", "\n", "# Range to sample from original image", "\n", "old_x", "=", "max", "(", "0", ",", "ul", "[", "0", "]", ")", ",", "min", "(", "len", "(", "img", "[", "0", "]", ")", ",", "br", "[", "0", "]", ")", "\n", "old_y", "=", "max", "(", "0", ",", "ul", "[", "1", "]", ")", ",", "min", "(", "len", "(", "img", ")", ",", "br", "[", "1", "]", ")", "\n", "new_img", "[", "new_y", "[", "0", "]", ":", "new_y", "[", "1", "]", ",", "new_x", "[", "0", "]", ":", "new_x", "[", "1", "]", "]", "=", "img", "[", "old_y", "[", "0", "]", ":", "old_y", "[", "1", "]", ",", "old_x", "[", "0", "]", ":", "old_x", "[", "1", "]", "]", "\n", "\n", "if", "not", "rot", "==", "0", ":", "\n", "# Remove padding", "\n", "        ", "new_img", "=", "scipy", ".", "misc", ".", "imrotate", "(", "new_img", ",", "rot", ")", "\n", "new_img", "=", "new_img", "[", "pad", ":", "-", "pad", ",", "pad", ":", "-", "pad", "]", "\n", "", "new_img", "=", "scipy", ".", "misc", ".", "imresize", "(", "new_img", ",", "output_size", ")", "\n", "return", "new_img", "\n", "\n"]], "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.utils.transforms.generate_target": [[216, 246], ["numpy.arange", "int", "int", "int", "int", "numpy.exp", "max", "max", "max", "min", "max", "min", "min", "min"], "function", ["None"], ["", "def", "generate_target", "(", "img", ",", "pt", ",", "sigma", ",", "label_type", "=", "'Gaussian'", ")", ":", "\n", "# Check that any part of the gaussian is in-bounds", "\n", "    ", "tmp_size", "=", "sigma", "*", "3", "\n", "ul", "=", "[", "int", "(", "pt", "[", "0", "]", "-", "tmp_size", ")", ",", "int", "(", "pt", "[", "1", "]", "-", "tmp_size", ")", "]", "\n", "br", "=", "[", "int", "(", "pt", "[", "0", "]", "+", "tmp_size", "+", "1", ")", ",", "int", "(", "pt", "[", "1", "]", "+", "tmp_size", "+", "1", ")", "]", "\n", "if", "(", "ul", "[", "0", "]", ">=", "img", ".", "shape", "[", "1", "]", "or", "ul", "[", "1", "]", ">=", "img", ".", "shape", "[", "0", "]", "or", "\n", "br", "[", "0", "]", "<", "0", "or", "br", "[", "1", "]", "<", "0", ")", ":", "\n", "# If not, just return the image as is", "\n", "        ", "return", "img", "\n", "\n", "# Generate gaussian", "\n", "", "size", "=", "2", "*", "tmp_size", "+", "1", "\n", "x", "=", "np", ".", "arange", "(", "0", ",", "size", ",", "1", ",", "np", ".", "float32", ")", "\n", "y", "=", "x", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "x0", "=", "y0", "=", "size", "//", "2", "\n", "# The gaussian is not normalized, we want the center value to equal 1", "\n", "if", "label_type", "==", "'Gaussian'", ":", "\n", "        ", "g", "=", "np", ".", "exp", "(", "-", "(", "(", "x", "-", "x0", ")", "**", "2", "+", "(", "y", "-", "y0", ")", "**", "2", ")", "/", "(", "2", "*", "sigma", "**", "2", ")", ")", "\n", "", "else", ":", "\n", "        ", "g", "=", "sigma", "/", "(", "(", "(", "x", "-", "x0", ")", "**", "2", "+", "(", "y", "-", "y0", ")", "**", "2", "+", "sigma", "**", "2", ")", "**", "1.5", ")", "\n", "\n", "# Usable gaussian range", "\n", "", "g_x", "=", "max", "(", "0", ",", "-", "ul", "[", "0", "]", ")", ",", "min", "(", "br", "[", "0", "]", ",", "img", ".", "shape", "[", "1", "]", ")", "-", "ul", "[", "0", "]", "\n", "g_y", "=", "max", "(", "0", ",", "-", "ul", "[", "1", "]", ")", ",", "min", "(", "br", "[", "1", "]", ",", "img", ".", "shape", "[", "0", "]", ")", "-", "ul", "[", "1", "]", "\n", "# Image range", "\n", "img_x", "=", "max", "(", "0", ",", "ul", "[", "0", "]", ")", ",", "min", "(", "br", "[", "0", "]", ",", "img", ".", "shape", "[", "1", "]", ")", "\n", "img_y", "=", "max", "(", "0", ",", "ul", "[", "1", "]", ")", ",", "min", "(", "br", "[", "1", "]", ",", "img", ".", "shape", "[", "0", "]", ")", "\n", "\n", "img", "[", "img_y", "[", "0", "]", ":", "img_y", "[", "1", "]", ",", "img_x", "[", "0", "]", ":", "img_x", "[", "1", "]", "]", "=", "g", "[", "g_y", "[", "0", "]", ":", "g_y", "[", "1", "]", ",", "g_x", "[", "0", "]", ":", "g_x", "[", "1", "]", "]", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.utils.utils.create_logger": [[21, 54], ["pathlib.Path", "print", "final_output_dir.mkdir", "time.strftime", "logging.basicConfig", "logging.getLogger", "logging.getLogger.setLevel", "logging.StreamHandler", "logging.getLogger().addHandler", "print", "tensorboard_log_dir.mkdir", "pathlib.Path.exists", "print", "pathlib.Path.mkdir", "os.path.basename().split", "str", "str", "str", "logging.getLogger", "os.path.basename", "pathlib.Path"], "function", ["None"], ["def", "create_logger", "(", "cfg", ",", "cfg_name", ",", "phase", "=", "'train'", ")", ":", "\n", "    ", "root_output_dir", "=", "Path", "(", "cfg", ".", "OUTPUT_DIR", ")", "\n", "# set up logger", "\n", "if", "not", "root_output_dir", ".", "exists", "(", ")", ":", "\n", "        ", "print", "(", "'=> creating {}'", ".", "format", "(", "root_output_dir", ")", ")", "\n", "root_output_dir", ".", "mkdir", "(", ")", "\n", "\n", "", "dataset", "=", "cfg", ".", "DATASET", ".", "DATASET", "\n", "model", "=", "cfg", ".", "MODEL", ".", "NAME", "\n", "cfg_name", "=", "os", ".", "path", ".", "basename", "(", "cfg_name", ")", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "\n", "final_output_dir", "=", "root_output_dir", "/", "dataset", "/", "cfg_name", "\n", "\n", "print", "(", "'=> creating {}'", ".", "format", "(", "final_output_dir", ")", ")", "\n", "final_output_dir", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "\n", "time_str", "=", "time", ".", "strftime", "(", "'%Y-%m-%d-%H-%M'", ")", "\n", "log_file", "=", "'{}_{}_{}.log'", ".", "format", "(", "cfg_name", ",", "time_str", ",", "phase", ")", "\n", "final_log_file", "=", "final_output_dir", "/", "log_file", "\n", "head", "=", "'%(asctime)-15s %(message)s'", "\n", "logging", ".", "basicConfig", "(", "filename", "=", "str", "(", "final_log_file", ")", ",", "\n", "format", "=", "head", ")", "\n", "logger", "=", "logging", ".", "getLogger", "(", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "console", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "logging", ".", "getLogger", "(", "''", ")", ".", "addHandler", "(", "console", ")", "\n", "\n", "tensorboard_log_dir", "=", "Path", "(", "cfg", ".", "LOG_DIR", ")", "/", "dataset", "/", "model", "/", "(", "cfg_name", "+", "'_'", "+", "time_str", ")", "\n", "print", "(", "'=> creating {}'", ".", "format", "(", "tensorboard_log_dir", ")", ")", "\n", "tensorboard_log_dir", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "\n", "return", "logger", ",", "str", "(", "final_output_dir", ")", ",", "str", "(", "tensorboard_log_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.utils.utils.get_optimizer": [[56, 82], ["torch.SGD", "filter", "torch.Adam", "model.parameters", "filter", "torch.RMSprop", "model.parameters", "filter", "model.parameters"], "function", ["None"], ["", "def", "get_optimizer", "(", "cfg", ",", "model", ")", ":", "\n", "    ", "optimizer", "=", "None", "\n", "if", "cfg", ".", "TRAIN", ".", "OPTIMIZER", "==", "'sgd'", ":", "\n", "        ", "optimizer", "=", "optim", ".", "SGD", "(", "\n", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "model", ".", "parameters", "(", ")", ")", ",", "\n", "lr", "=", "cfg", ".", "TRAIN", ".", "LR", ",", "\n", "momentum", "=", "cfg", ".", "TRAIN", ".", "MOMENTUM", ",", "\n", "weight_decay", "=", "cfg", ".", "TRAIN", ".", "WD", ",", "\n", "nesterov", "=", "cfg", ".", "TRAIN", ".", "NESTEROV", "\n", ")", "\n", "", "elif", "cfg", ".", "TRAIN", ".", "OPTIMIZER", "==", "'adam'", ":", "\n", "        ", "optimizer", "=", "optim", ".", "Adam", "(", "\n", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "model", ".", "parameters", "(", ")", ")", ",", "\n", "lr", "=", "cfg", ".", "TRAIN", ".", "LR", "\n", ")", "\n", "", "elif", "cfg", ".", "TRAIN", ".", "OPTIMIZER", "==", "'rmsprop'", ":", "\n", "        ", "optimizer", "=", "optim", ".", "RMSprop", "(", "\n", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "model", ".", "parameters", "(", ")", ")", ",", "\n", "lr", "=", "cfg", ".", "TRAIN", ".", "LR", ",", "\n", "momentum", "=", "cfg", ".", "TRAIN", ".", "MOMENTUM", ",", "\n", "weight_decay", "=", "cfg", ".", "TRAIN", ".", "WD", ",", "\n", "alpha", "=", "cfg", ".", "TRAIN", ".", "RMSPROP_ALPHA", ",", "\n", "centered", "=", "cfg", ".", "TRAIN", ".", "RMSPROP_CENTERED", "\n", ")", "\n", "\n", "", "return", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.utils.utils.save_checkpoint": [[83, 100], ["predictions.cpu().data.numpy", "torch.save", "torch.save", "torch.save", "torch.save", "os.path.join", "os.path.islink", "states[].module.state_dict", "os.path.join", "os.path.join", "os.remove", "os.symlink", "torch.save", "torch.save", "os.path.join", "states.keys", "states[].module.state_dict", "os.path.join", "predictions.cpu"], "function", ["None"], ["", "def", "save_checkpoint", "(", "states", ",", "predictions", ",", "is_best", ",", "\n", "output_dir", ",", "filename", "=", "'checkpoint.pth'", ")", ":", "\n", "# We replace the original save method (commented out) with the save method used in train.py, since only the latter seem to be usable by test.py.    ", "\n", "\n", "    ", "preds", "=", "predictions", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "# torch.save(states, os.path.join(output_dir, filename))", "\n", "torch", ".", "save", "(", "states", "[", "'state_dict'", "]", ".", "module", ".", "state_dict", "(", ")", ",", "os", ".", "path", ".", "join", "(", "output_dir", ",", "filename", ")", ")", "\n", "torch", ".", "save", "(", "preds", ",", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'current_pred.pth'", ")", ")", "\n", "\n", "latest_path", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'latest.pth'", ")", "\n", "if", "os", ".", "path", ".", "islink", "(", "latest_path", ")", ":", "\n", "        ", "os", ".", "remove", "(", "latest_path", ")", "\n", "os", ".", "symlink", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "filename", ")", ",", "latest_path", ")", "\n", "\n", "", "if", "is_best", "and", "'state_dict'", "in", "states", ".", "keys", "(", ")", ":", "\n", "# torch.save(states['state_dict'].module, os.path.join(output_dir, 'model_best.pth'))", "\n", "        ", "torch", ".", "save", "(", "states", "[", "'state_dict'", "]", ".", "module", ".", "state_dict", "(", ")", ",", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'model_best.pth'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.datasets.face300w.Face300W.__init__": [[22, 64], ["pandas.read_csv", "print", "numpy.array", "numpy.array", "random.sample", "pandas.read_csv.drop().reset_index", "pandas.read_csv.loc[].reset_index", "list", "round", "range", "pandas.read_csv.drop", "len", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "is_train", "=", "True", ",", "transform", "=", "None", ",", "validation_index", "=", "None", ")", ":", "\n", "\n", "        ", "self", ".", "is_train", "=", "is_train", "\n", "self", ".", "transform", "=", "transform", "\n", "\n", "# If cfg.DATASET.VAL_RATIO > 0, then we are in validation mode, where", "\n", "# the training instance of Face300W specifies and omits a validation set", "\n", "# of the specified ratio, and passes its index to the validation ", "\n", "# instance of Face300W through the validation_index parameter. In this", "\n", "# mode, the CSV at cfg.DATASET.TESTSET is ignored. ", "\n", "self", ".", "validation_index", "=", "validation_index", "\n", "self", ".", "val_ratio", "=", "cfg", ".", "DATASET", ".", "VAL_RATIO", "\n", "assert", "(", "self", ".", "val_ratio", ">=", "0", ")", "and", "(", "self", ".", "val_ratio", "<", "1", ")", "\n", "\n", "if", "(", "is_train", ")", "or", "(", "self", ".", "val_ratio", ">", "0", ")", ":", "\n", "            ", "self", ".", "csv_file", "=", "cfg", ".", "DATASET", ".", "TRAINSET", "\n", "", "else", ":", "\n", "            ", "self", ".", "csv_file", "=", "cfg", ".", "DATASET", ".", "TESTSET", "\n", "\n", "", "self", ".", "data_root", "=", "cfg", ".", "DATASET", ".", "ROOT", "\n", "self", ".", "input_size", "=", "cfg", ".", "MODEL", ".", "IMAGE_SIZE", "\n", "self", ".", "output_size", "=", "cfg", ".", "MODEL", ".", "HEATMAP_SIZE", "\n", "self", ".", "sigma", "=", "cfg", ".", "MODEL", ".", "SIGMA", "\n", "self", ".", "scale_factor", "=", "cfg", ".", "DATASET", ".", "SCALE_FACTOR", "\n", "self", ".", "rot_factor", "=", "cfg", ".", "DATASET", ".", "ROT_FACTOR", "\n", "self", ".", "label_type", "=", "cfg", ".", "MODEL", ".", "TARGET_TYPE", "\n", "self", ".", "flip", "=", "cfg", ".", "DATASET", ".", "FLIP", "\n", "\n", "full_frame", "=", "pd", ".", "read_csv", "(", "self", ".", "csv_file", ")", "\n", "if", "self", ".", "val_ratio", ">", "0", ":", "# Validation mode", "\n", "            ", "if", "is_train", ":", "\n", "                ", "self", ".", "validation_index", "=", "random", ".", "sample", "(", "list", "(", "range", "(", "len", "(", "full_frame", ")", ")", ")", ",", "\n", "round", "(", "self", ".", "val_ratio", "*", "len", "(", "full_frame", ")", ")", ")", "\n", "self", ".", "landmarks_frame", "=", "full_frame", ".", "drop", "(", "index", "=", "self", ".", "validation_index", ")", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "landmarks_frame", "=", "full_frame", ".", "loc", "[", "self", ".", "validation_index", "]", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "", "", "else", ":", "# Standard mode", "\n", "            ", "self", ".", "landmarks_frame", "=", "full_frame", "\n", "", "print", "(", "self", ".", "landmarks_frame", ")", "\n", "\n", "self", ".", "mean", "=", "np", ".", "array", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "std", "=", "np", ".", "array", "(", "[", "0.229", ",", "0.224", ",", "0.225", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.datasets.face300w.Face300W.__len__": [[65, 67], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "landmarks_frame", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.datasets.face300w.Face300W.__getitem__": [[68, 130], ["os.path.join", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "utils.transforms.fliplr_joints.astype().reshape", "PIL.Image.open().convert", "numpy.array", "utils.transforms.crop", "numpy.zeros", "utils.transforms.fliplr_joints.copy", "range", "numpy.fliplr.astype", "numpy.fliplr.transpose", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "utils.transforms.fliplr_joints.astype", "PIL.Image.open", "random.uniform", "random.uniform", "numpy.fliplr", "utils.transforms.fliplr_joints", "utils.transforms.transform_pixel", "utils.transforms.generate_target", "random.random", "random.random"], "methods", ["home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.utils.transforms.crop", "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.utils.transforms.fliplr_joints", "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.utils.transforms.transform_pixel", "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.utils.transforms.generate_target"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "\n", "        ", "image_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_root", ",", "\n", "self", ".", "landmarks_frame", ".", "iloc", "[", "idx", ",", "0", "]", ")", "\n", "scale", "=", "self", ".", "landmarks_frame", ".", "iloc", "[", "idx", ",", "1", "]", "\n", "\n", "center_w", "=", "self", ".", "landmarks_frame", ".", "iloc", "[", "idx", ",", "2", "]", "\n", "center_h", "=", "self", ".", "landmarks_frame", ".", "iloc", "[", "idx", ",", "3", "]", "\n", "center", "=", "torch", ".", "Tensor", "(", "[", "center_w", ",", "center_h", "]", ")", "\n", "\n", "pts", "=", "self", ".", "landmarks_frame", ".", "iloc", "[", "idx", ",", "4", ":", "]", ".", "values", "\n", "pts", "=", "pts", ".", "astype", "(", "'float'", ")", ".", "reshape", "(", "-", "1", ",", "2", ")", "\n", "\n", "scale", "*=", "1.25", "\n", "nparts", "=", "pts", ".", "shape", "[", "0", "]", "\n", "\n", "img", "=", "Image", ".", "open", "(", "image_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n", "# img.save('/work/aclab/mi.wan/ifldt-remote/HRNet-CVIU/sbatch/pre-image.png')", "\n", "# if random.random() < 0.1:", "\n", "#     img = torchvision.transforms.ColorJitter(brightness = 0.5,", "\n", "#                                              contrast = 0.5,", "\n", "#                                              saturation = 0.5, ", "\n", "#                                              hue = 0.25)(img)                                               ", "\n", "# img = torchvision.transforms.RandomGrayscale(p = 0.8)(img)", "\n", "\n", "img", "=", "np", ".", "array", "(", "img", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "r", "=", "0", "\n", "if", "self", ".", "is_train", ":", "\n", "            ", "scale", "=", "scale", "*", "(", "random", ".", "uniform", "(", "1", "-", "self", ".", "scale_factor", ",", "\n", "1", "+", "self", ".", "scale_factor", ")", ")", "\n", "r", "=", "random", ".", "uniform", "(", "-", "self", ".", "rot_factor", ",", "self", ".", "rot_factor", ")", "if", "random", ".", "random", "(", ")", "<=", "0.6", "else", "0", "\n", "if", "random", ".", "random", "(", ")", "<=", "0.5", "and", "self", ".", "flip", ":", "\n", "                ", "img", "=", "np", ".", "fliplr", "(", "img", ")", "\n", "pts", "=", "fliplr_joints", "(", "pts", ",", "width", "=", "img", ".", "shape", "[", "1", "]", ",", "dataset", "=", "'300W'", ")", "\n", "center", "[", "0", "]", "=", "img", ".", "shape", "[", "1", "]", "-", "center", "[", "0", "]", "\n", "\n", "", "", "img", "=", "crop", "(", "img", ",", "center", ",", "scale", ",", "self", ".", "input_size", ",", "rot", "=", "r", ")", "\n", "# Image.fromarray(img).save('/work/aclab/mi.wan/ifldt-remote/HRNet-CVIU/sbatch/post-image.png')", "\n", "\n", "target", "=", "np", ".", "zeros", "(", "(", "nparts", ",", "self", ".", "output_size", "[", "0", "]", ",", "self", ".", "output_size", "[", "1", "]", ")", ")", "\n", "tpts", "=", "pts", ".", "copy", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "nparts", ")", ":", "\n", "            ", "if", "tpts", "[", "i", ",", "1", "]", ">", "0", ":", "\n", "                ", "tpts", "[", "i", ",", "0", ":", "2", "]", "=", "transform_pixel", "(", "tpts", "[", "i", ",", "0", ":", "2", "]", "+", "1", ",", "center", ",", "\n", "scale", ",", "self", ".", "output_size", ",", "rot", "=", "r", ")", "\n", "target", "[", "i", "]", "=", "generate_target", "(", "target", "[", "i", "]", ",", "tpts", "[", "i", "]", "-", "1", ",", "self", ".", "sigma", ",", "\n", "label_type", "=", "self", ".", "label_type", ")", "\n", "", "", "img", "=", "img", ".", "astype", "(", "np", ".", "float32", ")", "\n", "img", "=", "(", "img", "/", "255.0", "-", "self", ".", "mean", ")", "/", "self", ".", "std", "\n", "img", "=", "img", ".", "transpose", "(", "[", "2", ",", "0", ",", "1", "]", ")", "\n", "target", "=", "torch", ".", "Tensor", "(", "target", ")", "\n", "tpts", "=", "torch", ".", "Tensor", "(", "tpts", ")", "\n", "center", "=", "torch", ".", "Tensor", "(", "center", ")", "\n", "\n", "meta", "=", "{", "'index'", ":", "idx", ",", "'center'", ":", "center", ",", "'scale'", ":", "scale", ",", "\n", "'pts'", ":", "torch", ".", "Tensor", "(", "pts", ")", ",", "'tpts'", ":", "tpts", ",", "'image_path'", ":", "image_path", "}", "\n", "\n", "return", "img", ",", "target", ",", "meta", "\n", "\n"]], "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.datasets.aflw.AFLW.__init__": [[24, 45], ["numpy.array", "numpy.array", "pandas.read_csv"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "cfg", ",", "is_train", "=", "True", ",", "transform", "=", "None", ")", ":", "\n", "# specify annotation file for dataset", "\n", "        ", "if", "is_train", ":", "\n", "            ", "self", ".", "csv_file", "=", "cfg", ".", "DATASET", ".", "TRAINSET", "\n", "", "else", ":", "\n", "            ", "self", ".", "csv_file", "=", "cfg", ".", "DATASET", ".", "TESTSET", "\n", "\n", "", "self", ".", "is_train", "=", "is_train", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "data_root", "=", "cfg", ".", "DATASET", ".", "ROOT", "\n", "self", ".", "input_size", "=", "cfg", ".", "MODEL", ".", "IMAGE_SIZE", "\n", "self", ".", "output_size", "=", "cfg", ".", "MODEL", ".", "HEATMAP_SIZE", "\n", "self", ".", "sigma", "=", "cfg", ".", "MODEL", ".", "SIGMA", "\n", "self", ".", "scale_factor", "=", "cfg", ".", "DATASET", ".", "SCALE_FACTOR", "\n", "self", ".", "rot_factor", "=", "cfg", ".", "DATASET", ".", "ROT_FACTOR", "\n", "self", ".", "label_type", "=", "cfg", ".", "MODEL", ".", "TARGET_TYPE", "\n", "self", ".", "flip", "=", "cfg", ".", "DATASET", ".", "FLIP", "\n", "self", ".", "mean", "=", "np", ".", "array", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "std", "=", "np", ".", "array", "(", "[", "0.229", ",", "0.224", ",", "0.225", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "# load annotations", "\n", "self", ".", "landmarks_frame", "=", "pd", ".", "read_csv", "(", "self", ".", "csv_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.datasets.aflw.AFLW.__len__": [[46, 48], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "landmarks_frame", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.datasets.aflw.AFLW.__getitem__": [[49, 100], ["os.path.join", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "utils.transforms.fliplr_joints.astype().reshape", "numpy.array", "utils.transforms.crop", "numpy.zeros", "utils.transforms.fliplr_joints.copy", "range", "numpy.fliplr.astype", "numpy.fliplr.transpose", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "PIL.Image.open().convert", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "utils.transforms.fliplr_joints.astype", "random.uniform", "random.uniform", "numpy.fliplr", "utils.transforms.fliplr_joints", "utils.transforms.transform_pixel", "utils.transforms.generate_target", "PIL.Image.open", "random.random", "random.random"], "methods", ["home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.utils.transforms.crop", "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.utils.transforms.fliplr_joints", "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.utils.transforms.transform_pixel", "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.utils.transforms.generate_target"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "\n", "        ", "image_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_root", ",", "\n", "self", ".", "landmarks_frame", ".", "iloc", "[", "idx", ",", "0", "]", ")", "\n", "scale", "=", "self", ".", "landmarks_frame", ".", "iloc", "[", "idx", ",", "1", "]", "\n", "box_size", "=", "self", ".", "landmarks_frame", ".", "iloc", "[", "idx", ",", "2", "]", "\n", "\n", "center_w", "=", "self", ".", "landmarks_frame", ".", "iloc", "[", "idx", ",", "3", "]", "\n", "center_h", "=", "self", ".", "landmarks_frame", ".", "iloc", "[", "idx", ",", "4", "]", "\n", "center", "=", "torch", ".", "Tensor", "(", "[", "center_w", ",", "center_h", "]", ")", "\n", "\n", "pts", "=", "self", ".", "landmarks_frame", ".", "iloc", "[", "idx", ",", "5", ":", "]", ".", "values", "\n", "pts", "=", "pts", ".", "astype", "(", "'float'", ")", ".", "reshape", "(", "-", "1", ",", "2", ")", "\n", "\n", "scale", "*=", "1.25", "\n", "nparts", "=", "pts", ".", "shape", "[", "0", "]", "\n", "img", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "image_path", ")", ".", "convert", "(", "'RGB'", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "r", "=", "0", "\n", "if", "self", ".", "is_train", ":", "\n", "            ", "scale", "=", "scale", "*", "(", "random", ".", "uniform", "(", "1", "-", "self", ".", "scale_factor", ",", "\n", "1", "+", "self", ".", "scale_factor", ")", ")", "\n", "r", "=", "random", ".", "uniform", "(", "-", "self", ".", "rot_factor", ",", "self", ".", "rot_factor", ")", "if", "random", ".", "random", "(", ")", "<=", "0.6", "else", "0", "\n", "if", "random", ".", "random", "(", ")", "<=", "0.5", "and", "self", ".", "flip", ":", "\n", "                ", "img", "=", "np", ".", "fliplr", "(", "img", ")", "\n", "pts", "=", "fliplr_joints", "(", "pts", ",", "width", "=", "img", ".", "shape", "[", "1", "]", ",", "dataset", "=", "'AFLW'", ")", "\n", "center", "[", "0", "]", "=", "img", ".", "shape", "[", "1", "]", "-", "center", "[", "0", "]", "\n", "\n", "", "", "img", "=", "crop", "(", "img", ",", "center", ",", "scale", ",", "self", ".", "input_size", ",", "rot", "=", "r", ")", "\n", "\n", "target", "=", "np", ".", "zeros", "(", "(", "nparts", ",", "self", ".", "output_size", "[", "0", "]", ",", "self", ".", "output_size", "[", "1", "]", ")", ")", "\n", "tpts", "=", "pts", ".", "copy", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "nparts", ")", ":", "\n", "            ", "if", "tpts", "[", "i", ",", "1", "]", ">", "0", ":", "\n", "                ", "tpts", "[", "i", ",", "0", ":", "2", "]", "=", "transform_pixel", "(", "tpts", "[", "i", ",", "0", ":", "2", "]", "+", "1", ",", "center", ",", "\n", "scale", ",", "self", ".", "output_size", ",", "rot", "=", "r", ")", "\n", "target", "[", "i", "]", "=", "generate_target", "(", "target", "[", "i", "]", ",", "tpts", "[", "i", "]", "-", "1", ",", "self", ".", "sigma", ",", "\n", "label_type", "=", "self", ".", "label_type", ")", "\n", "", "", "img", "=", "img", ".", "astype", "(", "np", ".", "float32", ")", "\n", "img", "=", "(", "img", "/", "255.0", "-", "self", ".", "mean", ")", "/", "self", ".", "std", "\n", "img", "=", "img", ".", "transpose", "(", "[", "2", ",", "0", ",", "1", "]", ")", "\n", "target", "=", "torch", ".", "Tensor", "(", "target", ")", "\n", "tpts", "=", "torch", ".", "Tensor", "(", "tpts", ")", "\n", "center", "=", "torch", ".", "Tensor", "(", "center", ")", "\n", "\n", "meta", "=", "{", "'index'", ":", "idx", ",", "'center'", ":", "center", ",", "'scale'", ":", "scale", ",", "\n", "'pts'", ":", "torch", ".", "Tensor", "(", "pts", ")", ",", "'tpts'", ":", "tpts", ",", "'box_size'", ":", "box_size", "}", "\n", "\n", "return", "img", ",", "target", ",", "meta", "\n", "\n"]], "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.datasets.cofw.COFW.__init__": [[20, 49], ["hdf5storage.loadmat", "numpy.array", "numpy.array"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "is_train", "=", "True", ",", "transform", "=", "None", ")", ":", "\n", "# specify annotation file for dataset", "\n", "        ", "if", "is_train", ":", "\n", "            ", "self", ".", "mat_file", "=", "cfg", ".", "DATASET", ".", "TRAINSET", "\n", "", "else", ":", "\n", "            ", "self", ".", "mat_file", "=", "cfg", ".", "DATASET", ".", "TESTSET", "\n", "\n", "", "self", ".", "is_train", "=", "is_train", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "data_root", "=", "cfg", ".", "DATASET", ".", "ROOT", "\n", "self", ".", "input_size", "=", "cfg", ".", "MODEL", ".", "IMAGE_SIZE", "\n", "self", ".", "output_size", "=", "cfg", ".", "MODEL", ".", "HEATMAP_SIZE", "\n", "self", ".", "sigma", "=", "cfg", ".", "MODEL", ".", "SIGMA", "\n", "self", ".", "scale_factor", "=", "cfg", ".", "DATASET", ".", "SCALE_FACTOR", "\n", "self", ".", "rot_factor", "=", "cfg", ".", "DATASET", ".", "ROT_FACTOR", "\n", "self", ".", "label_type", "=", "cfg", ".", "MODEL", ".", "TARGET_TYPE", "\n", "self", ".", "flip", "=", "cfg", ".", "DATASET", ".", "FLIP", "\n", "\n", "# load annotations", "\n", "self", ".", "mat", "=", "loadmat", "(", "self", ".", "mat_file", ")", "\n", "if", "is_train", ":", "\n", "            ", "self", ".", "images", "=", "self", ".", "mat", "[", "'IsTr'", "]", "\n", "self", ".", "pts", "=", "self", ".", "mat", "[", "'phisTr'", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "images", "=", "self", ".", "mat", "[", "'IsT'", "]", "\n", "self", ".", "pts", "=", "self", ".", "mat", "[", "'phisT'", "]", "\n", "\n", "", "self", ".", "mean", "=", "np", ".", "array", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "std", "=", "np", ".", "array", "(", "[", "0.229", ",", "0.224", ",", "0.225", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.datasets.cofw.COFW.__len__": [[50, 52], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "images", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.datasets.cofw.COFW.__getitem__": [[53, 111], ["[].reshape().transpose", "numpy.min", "numpy.max", "numpy.min", "numpy.max", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "utils.transforms.crop", "numpy.zeros", "utils.transforms.fliplr_joints.copy", "range", "numpy.fliplr.astype", "numpy.fliplr.transpose", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "len", "numpy.fliplr.reshape", "numpy.repeat", "max", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "[].reshape", "math.floor", "math.ceil", "math.floor", "math.ceil", "random.uniform", "random.uniform", "numpy.fliplr", "utils.transforms.fliplr_joints", "utils.transforms.transform_pixel", "utils.transforms.generate_target", "math.ceil", "math.floor", "math.ceil", "math.floor", "random.random", "random.random"], "methods", ["home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.utils.transforms.crop", "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.utils.transforms.fliplr_joints", "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.utils.transforms.transform_pixel", "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.utils.transforms.generate_target"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "\n", "        ", "img", "=", "self", ".", "images", "[", "idx", "]", "[", "0", "]", "\n", "\n", "if", "len", "(", "img", ".", "shape", ")", "==", "2", ":", "\n", "            ", "img", "=", "img", ".", "reshape", "(", "img", ".", "shape", "[", "0", "]", ",", "img", ".", "shape", "[", "1", "]", ",", "1", ")", "\n", "img", "=", "np", ".", "repeat", "(", "img", ",", "3", ",", "axis", "=", "2", ")", "\n", "\n", "", "pts", "=", "self", ".", "pts", "[", "idx", "]", "[", "0", ":", "58", "]", ".", "reshape", "(", "2", ",", "-", "1", ")", ".", "transpose", "(", ")", "\n", "\n", "xmin", "=", "np", ".", "min", "(", "pts", "[", ":", ",", "0", "]", ")", "\n", "xmax", "=", "np", ".", "max", "(", "pts", "[", ":", ",", "0", "]", ")", "\n", "ymin", "=", "np", ".", "min", "(", "pts", "[", ":", ",", "1", "]", ")", "\n", "ymax", "=", "np", ".", "max", "(", "pts", "[", ":", ",", "1", "]", ")", "\n", "\n", "center_w", "=", "(", "math", ".", "floor", "(", "xmin", ")", "+", "math", ".", "ceil", "(", "xmax", ")", ")", "/", "2.0", "\n", "center_h", "=", "(", "math", ".", "floor", "(", "ymin", ")", "+", "math", ".", "ceil", "(", "ymax", ")", ")", "/", "2.0", "\n", "\n", "scale", "=", "max", "(", "math", ".", "ceil", "(", "xmax", ")", "-", "math", ".", "floor", "(", "xmin", ")", ",", "math", ".", "ceil", "(", "ymax", ")", "-", "math", ".", "floor", "(", "ymin", ")", ")", "/", "200.0", "\n", "center", "=", "torch", ".", "Tensor", "(", "[", "center_w", ",", "center_h", "]", ")", "\n", "\n", "scale", "*=", "1.25", "\n", "nparts", "=", "pts", ".", "shape", "[", "0", "]", "\n", "\n", "r", "=", "0", "\n", "if", "self", ".", "is_train", ":", "\n", "            ", "scale", "=", "scale", "*", "(", "random", ".", "uniform", "(", "1", "-", "self", ".", "scale_factor", ",", "\n", "1", "+", "self", ".", "scale_factor", ")", ")", "\n", "r", "=", "random", ".", "uniform", "(", "-", "self", ".", "rot_factor", ",", "self", ".", "rot_factor", ")", "if", "random", ".", "random", "(", ")", "<=", "0.6", "else", "0", "\n", "\n", "if", "random", ".", "random", "(", ")", "<=", "0.5", "and", "self", ".", "flip", ":", "\n", "                ", "img", "=", "np", ".", "fliplr", "(", "img", ")", "\n", "pts", "=", "fliplr_joints", "(", "pts", ",", "width", "=", "img", ".", "shape", "[", "1", "]", ",", "dataset", "=", "'COFW'", ")", "\n", "center", "[", "0", "]", "=", "img", ".", "shape", "[", "1", "]", "-", "center", "[", "0", "]", "\n", "\n", "", "", "img", "=", "crop", "(", "img", ",", "center", ",", "scale", ",", "self", ".", "input_size", ",", "rot", "=", "r", ")", "\n", "\n", "target", "=", "np", ".", "zeros", "(", "(", "nparts", ",", "self", ".", "output_size", "[", "0", "]", ",", "self", ".", "output_size", "[", "1", "]", ")", ")", "\n", "tpts", "=", "pts", ".", "copy", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "nparts", ")", ":", "\n", "            ", "if", "tpts", "[", "i", ",", "1", "]", ">", "0", ":", "\n", "                ", "tpts", "[", "i", ",", "0", ":", "2", "]", "=", "transform_pixel", "(", "tpts", "[", "i", ",", "0", ":", "2", "]", "+", "1", ",", "center", ",", "\n", "scale", ",", "self", ".", "output_size", ",", "rot", "=", "r", ")", "\n", "target", "[", "i", "]", "=", "generate_target", "(", "target", "[", "i", "]", ",", "tpts", "[", "i", "]", "-", "1", ",", "self", ".", "sigma", ",", "\n", "label_type", "=", "self", ".", "label_type", ")", "\n", "", "", "img", "=", "img", ".", "astype", "(", "np", ".", "float32", ")", "\n", "img", "=", "(", "img", "/", "255", "-", "self", ".", "mean", ")", "/", "self", ".", "std", "\n", "img", "=", "img", ".", "transpose", "(", "[", "2", ",", "0", ",", "1", "]", ")", "\n", "target", "=", "torch", ".", "Tensor", "(", "target", ")", "\n", "tpts", "=", "torch", ".", "Tensor", "(", "tpts", ")", "\n", "center", "=", "torch", ".", "Tensor", "(", "center", ")", "\n", "\n", "meta", "=", "{", "'index'", ":", "idx", ",", "'center'", ":", "center", ",", "'scale'", ":", "scale", ",", "\n", "'pts'", ":", "torch", ".", "Tensor", "(", "pts", ")", ",", "'tpts'", ":", "tpts", "}", "\n", "\n", "return", "img", ",", "target", ",", "meta", "\n", "\n"]], "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.datasets.wflw.WFLW.__init__": [[20, 43], ["pandas.read_csv", "numpy.array", "numpy.array"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "is_train", "=", "True", ",", "transform", "=", "None", ")", ":", "\n", "# specify annotation file for dataset", "\n", "        ", "if", "is_train", ":", "\n", "            ", "self", ".", "csv_file", "=", "cfg", ".", "DATASET", ".", "TRAINSET", "\n", "", "else", ":", "\n", "            ", "self", ".", "csv_file", "=", "cfg", ".", "DATASET", ".", "TESTSET", "\n", "\n", "", "self", ".", "is_train", "=", "is_train", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "data_root", "=", "cfg", ".", "DATASET", ".", "ROOT", "\n", "self", ".", "input_size", "=", "cfg", ".", "MODEL", ".", "IMAGE_SIZE", "\n", "self", ".", "output_size", "=", "cfg", ".", "MODEL", ".", "HEATMAP_SIZE", "\n", "self", ".", "sigma", "=", "cfg", ".", "MODEL", ".", "SIGMA", "\n", "self", ".", "scale_factor", "=", "cfg", ".", "DATASET", ".", "SCALE_FACTOR", "\n", "self", ".", "rot_factor", "=", "cfg", ".", "DATASET", ".", "ROT_FACTOR", "\n", "self", ".", "label_type", "=", "cfg", ".", "MODEL", ".", "TARGET_TYPE", "\n", "self", ".", "flip", "=", "cfg", ".", "DATASET", ".", "FLIP", "\n", "\n", "# load annotations", "\n", "self", ".", "landmarks_frame", "=", "pd", ".", "read_csv", "(", "self", ".", "csv_file", ")", "\n", "\n", "self", ".", "mean", "=", "np", ".", "array", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "std", "=", "np", ".", "array", "(", "[", "0.229", ",", "0.224", ",", "0.225", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.datasets.wflw.WFLW.__len__": [[44, 46], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "landmarks_frame", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.datasets.wflw.WFLW.__getitem__": [[47, 97], ["os.path.join", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "utils.transforms.fliplr_joints.astype().reshape", "numpy.array", "utils.transforms.crop", "numpy.zeros", "utils.transforms.fliplr_joints.copy", "range", "numpy.fliplr.astype", "numpy.fliplr.transpose", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "PIL.Image.open().convert", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "utils.transforms.fliplr_joints.astype", "random.uniform", "random.uniform", "numpy.fliplr", "utils.transforms.fliplr_joints", "utils.transforms.transform_pixel", "utils.transforms.generate_target", "PIL.Image.open", "random.random", "random.random"], "methods", ["home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.utils.transforms.crop", "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.utils.transforms.fliplr_joints", "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.utils.transforms.transform_pixel", "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.utils.transforms.generate_target"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "\n", "        ", "image_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_root", ",", "\n", "self", ".", "landmarks_frame", ".", "iloc", "[", "idx", ",", "0", "]", ")", "\n", "scale", "=", "self", ".", "landmarks_frame", ".", "iloc", "[", "idx", ",", "1", "]", "\n", "\n", "center_w", "=", "self", ".", "landmarks_frame", ".", "iloc", "[", "idx", ",", "2", "]", "\n", "center_h", "=", "self", ".", "landmarks_frame", ".", "iloc", "[", "idx", ",", "3", "]", "\n", "center", "=", "torch", ".", "Tensor", "(", "[", "center_w", ",", "center_h", "]", ")", "\n", "\n", "pts", "=", "self", ".", "landmarks_frame", ".", "iloc", "[", "idx", ",", "4", ":", "]", ".", "values", "\n", "pts", "=", "pts", ".", "astype", "(", "'float'", ")", ".", "reshape", "(", "-", "1", ",", "2", ")", "\n", "\n", "scale", "*=", "1.25", "\n", "nparts", "=", "pts", ".", "shape", "[", "0", "]", "\n", "img", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "image_path", ")", ".", "convert", "(", "'RGB'", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "r", "=", "0", "\n", "if", "self", ".", "is_train", ":", "\n", "            ", "scale", "=", "scale", "*", "(", "random", ".", "uniform", "(", "1", "-", "self", ".", "scale_factor", ",", "\n", "1", "+", "self", ".", "scale_factor", ")", ")", "\n", "r", "=", "random", ".", "uniform", "(", "-", "self", ".", "rot_factor", ",", "self", ".", "rot_factor", ")", "if", "random", ".", "random", "(", ")", "<=", "0.6", "else", "0", "\n", "if", "random", ".", "random", "(", ")", "<=", "0.5", "and", "self", ".", "flip", ":", "\n", "                ", "img", "=", "np", ".", "fliplr", "(", "img", ")", "\n", "pts", "=", "fliplr_joints", "(", "pts", ",", "width", "=", "img", ".", "shape", "[", "1", "]", ",", "dataset", "=", "'WFLW'", ")", "\n", "center", "[", "0", "]", "=", "img", ".", "shape", "[", "1", "]", "-", "center", "[", "0", "]", "\n", "\n", "", "", "img", "=", "crop", "(", "img", ",", "center", ",", "scale", ",", "self", ".", "input_size", ",", "rot", "=", "r", ")", "\n", "\n", "target", "=", "np", ".", "zeros", "(", "(", "nparts", ",", "self", ".", "output_size", "[", "0", "]", ",", "self", ".", "output_size", "[", "1", "]", ")", ")", "\n", "tpts", "=", "pts", ".", "copy", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "nparts", ")", ":", "\n", "            ", "if", "tpts", "[", "i", ",", "1", "]", ">", "0", ":", "\n", "                ", "tpts", "[", "i", ",", "0", ":", "2", "]", "=", "transform_pixel", "(", "tpts", "[", "i", ",", "0", ":", "2", "]", "+", "1", ",", "center", ",", "\n", "scale", ",", "self", ".", "output_size", ",", "rot", "=", "r", ")", "\n", "target", "[", "i", "]", "=", "generate_target", "(", "target", "[", "i", "]", ",", "tpts", "[", "i", "]", "-", "1", ",", "self", ".", "sigma", ",", "\n", "label_type", "=", "self", ".", "label_type", ")", "\n", "", "", "img", "=", "img", ".", "astype", "(", "np", ".", "float32", ")", "\n", "img", "=", "(", "img", "/", "255.0", "-", "self", ".", "mean", ")", "/", "self", ".", "std", "\n", "img", "=", "img", ".", "transpose", "(", "[", "2", ",", "0", ",", "1", "]", ")", "\n", "target", "=", "torch", ".", "Tensor", "(", "target", ")", "\n", "tpts", "=", "torch", ".", "Tensor", "(", "tpts", ")", "\n", "center", "=", "torch", ".", "Tensor", "(", "center", ")", "\n", "\n", "meta", "=", "{", "'index'", ":", "idx", ",", "'center'", ":", "center", ",", "'scale'", ":", "scale", ",", "\n", "'pts'", ":", "torch", ".", "Tensor", "(", "pts", ")", ",", "'tpts'", ":", "tpts", "}", "\n", "\n", "return", "img", ",", "target", ",", "meta", "\n", "\n"]], "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.datasets.__init__.get_dataset": [[15, 27], ["NotImplemented"], "function", ["None"], []], "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.config.defaults.update_config": [[136, 140], ["cfg.defrost", "cfg.merge_from_file", "cfg.freeze"], "function", ["None"], ["def", "update_config", "(", "cfg", ",", "args", ")", ":", "\n", "    ", "cfg", ".", "defrost", "(", ")", "\n", "cfg", ".", "merge_from_file", "(", "args", ".", "cfg", ")", "\n", "cfg", ".", "freeze", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.models.hrnet.BasicBlock.__init__": [[34, 43], ["torch.Module.__init__", "hrnet.conv3x3", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "hrnet.conv3x3", "BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.core.function.AverageMeter.__init__", "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.models.hrnet.conv3x3", "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.models.hrnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "BatchNorm2d", "(", "planes", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "BatchNorm2d", "(", "planes", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.models.hrnet.BasicBlock.forward": [[44, 61], ["hrnet.BasicBlock.conv1", "hrnet.BasicBlock.bn1", "hrnet.BasicBlock.relu", "hrnet.BasicBlock.conv2", "hrnet.BasicBlock.bn2", "hrnet.BasicBlock.relu", "hrnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.models.hrnet.Bottleneck.__init__": [[66, 80], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.core.function.AverageMeter.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "BatchNorm2d", "(", "planes", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "BatchNorm2d", "(", "planes", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ",", "kernel_size", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "BatchNorm2d", "(", "planes", "*", "self", ".", "expansion", ",", "\n", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.models.hrnet.Bottleneck.forward": [[81, 102], ["hrnet.Bottleneck.conv1", "hrnet.Bottleneck.bn1", "hrnet.Bottleneck.relu", "hrnet.Bottleneck.conv2", "hrnet.Bottleneck.bn2", "hrnet.Bottleneck.relu", "hrnet.Bottleneck.conv3", "hrnet.Bottleneck.bn3", "hrnet.Bottleneck.relu", "hrnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.models.hrnet.HighResolutionModule.__init__": [[105, 121], ["torch.Module.__init__", "hrnet.HighResolutionModule._check_branches", "hrnet.HighResolutionModule._make_branches", "hrnet.HighResolutionModule._make_fuse_layers", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.core.function.AverageMeter.__init__", "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.models.hrnet.HighResolutionModule._check_branches", "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.models.hrnet.HighResolutionModule._make_branches", "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.models.hrnet.HighResolutionModule._make_fuse_layers"], ["    ", "def", "__init__", "(", "self", ",", "num_branches", ",", "blocks", ",", "num_blocks", ",", "num_inchannels", ",", "\n", "num_channels", ",", "fuse_method", ",", "multi_scale_output", "=", "True", ")", ":", "\n", "        ", "super", "(", "HighResolutionModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_check_branches", "(", "\n", "num_branches", ",", "blocks", ",", "num_blocks", ",", "num_inchannels", ",", "num_channels", ")", "\n", "\n", "self", ".", "num_inchannels", "=", "num_inchannels", "\n", "self", ".", "fuse_method", "=", "fuse_method", "\n", "self", ".", "num_branches", "=", "num_branches", "\n", "\n", "self", ".", "multi_scale_output", "=", "multi_scale_output", "\n", "\n", "self", ".", "branches", "=", "self", ".", "_make_branches", "(", "\n", "num_branches", ",", "blocks", ",", "num_blocks", ",", "num_channels", ")", "\n", "self", ".", "fuse_layers", "=", "self", ".", "_make_fuse_layers", "(", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.models.hrnet.HighResolutionModule._check_branches": [[122, 141], ["len", "logger.error", "ValueError", "len", "logger.error", "ValueError", "len", "logger.error", "ValueError", "len", "len", "len"], "methods", ["None"], ["", "def", "_check_branches", "(", "self", ",", "num_branches", ",", "blocks", ",", "num_blocks", ",", "\n", "num_inchannels", ",", "num_channels", ")", ":", "\n", "        ", "if", "num_branches", "!=", "len", "(", "num_blocks", ")", ":", "\n", "            ", "error_msg", "=", "'NUM_BRANCHES({}) <> NUM_BLOCKS({})'", ".", "format", "(", "\n", "num_branches", ",", "len", "(", "num_blocks", ")", ")", "\n", "logger", ".", "error", "(", "error_msg", ")", "\n", "raise", "ValueError", "(", "error_msg", ")", "\n", "\n", "", "if", "num_branches", "!=", "len", "(", "num_channels", ")", ":", "\n", "            ", "error_msg", "=", "'NUM_BRANCHES({}) <> NUM_CHANNELS({})'", ".", "format", "(", "\n", "num_branches", ",", "len", "(", "num_channels", ")", ")", "\n", "logger", ".", "error", "(", "error_msg", ")", "\n", "raise", "ValueError", "(", "error_msg", ")", "\n", "\n", "", "if", "num_branches", "!=", "len", "(", "num_inchannels", ")", ":", "\n", "            ", "error_msg", "=", "'NUM_BRANCHES({}) <> NUM_INCHANNELS({})'", ".", "format", "(", "\n", "num_branches", ",", "len", "(", "num_inchannels", ")", ")", "\n", "logger", ".", "error", "(", "error_msg", ")", "\n", "raise", "ValueError", "(", "error_msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.models.hrnet.HighResolutionModule._make_one_branch": [[142, 165], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "block"], "methods", ["None"], ["", "", "def", "_make_one_branch", "(", "self", ",", "branch_index", ",", "block", ",", "num_blocks", ",", "num_channels", ",", "\n", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "num_inchannels", "[", "branch_index", "]", "!=", "num_channels", "[", "branch_index", "]", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "num_inchannels", "[", "branch_index", "]", ",", "\n", "num_channels", "[", "branch_index", "]", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "num_channels", "[", "branch_index", "]", "*", "block", ".", "expansion", ",", "\n", "momentum", "=", "BN_MOMENTUM", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "num_inchannels", "[", "branch_index", "]", ",", "\n", "num_channels", "[", "branch_index", "]", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "num_inchannels", "[", "branch_index", "]", "=", "num_channels", "[", "branch_index", "]", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "num_blocks", "[", "branch_index", "]", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "num_inchannels", "[", "branch_index", "]", ",", "\n", "num_channels", "[", "branch_index", "]", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.models.hrnet.HighResolutionModule._make_branches": [[166, 174], ["range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "branches.append", "hrnet.HighResolutionModule._make_one_branch"], "methods", ["home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.models.hrnet.HighResolutionModule._make_one_branch"], ["", "def", "_make_branches", "(", "self", ",", "num_branches", ",", "block", ",", "num_blocks", ",", "num_channels", ")", ":", "\n", "        ", "branches", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "num_branches", ")", ":", "\n", "            ", "branches", ".", "append", "(", "\n", "self", ".", "_make_one_branch", "(", "i", ",", "block", ",", "num_blocks", ",", "num_channels", ")", ")", "\n", "\n", "", "return", "nn", ".", "ModuleList", "(", "branches", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.models.hrnet.HighResolutionModule._make_fuse_layers": [[175, 220], ["range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "fuse_layers.append", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "fuse_layer.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "fuse_layer.append", "range", "fuse_layer.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "conv3x3s.append", "conv3x3s.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["", "def", "_make_fuse_layers", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "num_branches", "==", "1", ":", "\n", "            ", "return", "None", "\n", "\n", "", "num_branches", "=", "self", ".", "num_branches", "\n", "num_inchannels", "=", "self", ".", "num_inchannels", "\n", "fuse_layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_branches", "if", "self", ".", "multi_scale_output", "else", "1", ")", ":", "\n", "            ", "fuse_layer", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "num_branches", ")", ":", "\n", "                ", "if", "j", ">", "i", ":", "\n", "                    ", "fuse_layer", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "num_inchannels", "[", "j", "]", ",", "\n", "num_inchannels", "[", "i", "]", ",", "\n", "1", ",", "\n", "1", ",", "\n", "0", ",", "\n", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "num_inchannels", "[", "i", "]", ",", "momentum", "=", "BN_MOMENTUM", ")", ")", ")", "\n", "# nn.Upsample(scale_factor=2**(j-i), mode='nearest')))", "\n", "", "elif", "j", "==", "i", ":", "\n", "                    ", "fuse_layer", ".", "append", "(", "None", ")", "\n", "", "else", ":", "\n", "                    ", "conv3x3s", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "i", "-", "j", ")", ":", "\n", "                        ", "if", "k", "==", "i", "-", "j", "-", "1", ":", "\n", "                            ", "num_outchannels_conv3x3", "=", "num_inchannels", "[", "i", "]", "\n", "conv3x3s", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "num_inchannels", "[", "j", "]", ",", "\n", "num_outchannels_conv3x3", ",", "\n", "3", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "num_outchannels_conv3x3", ",", "momentum", "=", "BN_MOMENTUM", ")", ")", ")", "\n", "", "else", ":", "\n", "                            ", "num_outchannels_conv3x3", "=", "num_inchannels", "[", "j", "]", "\n", "conv3x3s", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "num_inchannels", "[", "j", "]", ",", "\n", "num_outchannels_conv3x3", ",", "\n", "3", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "num_outchannels_conv3x3", ",", "\n", "momentum", "=", "BN_MOMENTUM", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ")", "\n", "", "", "fuse_layer", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "conv3x3s", ")", ")", "\n", "", "", "fuse_layers", ".", "append", "(", "nn", ".", "ModuleList", "(", "fuse_layer", ")", ")", "\n", "\n", "", "return", "nn", ".", "ModuleList", "(", "fuse_layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.models.hrnet.HighResolutionModule.get_num_inchannels": [[221, 223], ["None"], "methods", ["None"], ["", "def", "get_num_inchannels", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_inchannels", "\n", "\n"]], "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.models.hrnet.HighResolutionModule.forward": [[224, 247], ["range", "range", "len", "range", "x_fuse.append", "hrnet.HighResolutionModule.relu", "torch.interpolate", "torch.interpolate", "torch.interpolate"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "num_branches", "==", "1", ":", "\n", "            ", "return", "[", "self", ".", "branches", "[", "0", "]", "(", "x", "[", "0", "]", ")", "]", "\n", "\n", "", "for", "i", "in", "range", "(", "self", ".", "num_branches", ")", ":", "\n", "            ", "x", "[", "i", "]", "=", "self", ".", "branches", "[", "i", "]", "(", "x", "[", "i", "]", ")", "\n", "\n", "", "x_fuse", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "fuse_layers", ")", ")", ":", "\n", "            ", "y", "=", "x", "[", "0", "]", "if", "i", "==", "0", "else", "self", ".", "fuse_layers", "[", "i", "]", "[", "0", "]", "(", "x", "[", "0", "]", ")", "\n", "for", "j", "in", "range", "(", "1", ",", "self", ".", "num_branches", ")", ":", "\n", "                ", "if", "i", "==", "j", ":", "\n", "                    ", "y", "=", "y", "+", "x", "[", "j", "]", "\n", "", "elif", "j", ">", "i", ":", "\n", "                    ", "y", "=", "y", "+", "F", ".", "interpolate", "(", "\n", "self", ".", "fuse_layers", "[", "i", "]", "[", "j", "]", "(", "x", "[", "j", "]", ")", ",", "\n", "size", "=", "[", "x", "[", "i", "]", ".", "shape", "[", "2", "]", ",", "x", "[", "i", "]", ".", "shape", "[", "3", "]", "]", ",", "\n", "mode", "=", "'bilinear'", ")", "\n", "", "else", ":", "\n", "                    ", "y", "=", "y", "+", "self", ".", "fuse_layers", "[", "i", "]", "[", "j", "]", "(", "x", "[", "j", "]", ")", "\n", "", "", "x_fuse", ".", "append", "(", "self", ".", "relu", "(", "y", ")", ")", "\n", "\n", "", "return", "x_fuse", "\n", "\n"]], "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.models.hrnet.HighResolutionNet.__init__": [[257, 320], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Softmax", "torch.Softmax", "torch.Softmax", "hrnet.HighResolutionNet._make_layer", "hrnet.HighResolutionNet._make_transition_layer", "hrnet.HighResolutionNet._make_stage", "hrnet.HighResolutionNet._make_transition_layer", "hrnet.HighResolutionNet._make_stage", "hrnet.HighResolutionNet._make_transition_layer", "hrnet.HighResolutionNet._make_stage", "sum", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "range", "range", "range", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.core.function.AverageMeter.__init__", "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.models.hrnet.HighResolutionNet._make_layer", "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.models.hrnet.HighResolutionNet._make_transition_layer", "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.models.hrnet.HighResolutionNet._make_stage", "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.models.hrnet.HighResolutionNet._make_transition_layer", "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.models.hrnet.HighResolutionNet._make_stage", "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.models.hrnet.HighResolutionNet._make_transition_layer", "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.models.hrnet.HighResolutionNet._make_stage"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "extra", "=", "config", ".", "MODEL", ".", "EXTRA", "\n", "super", "(", "HighResolutionNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# stem net", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "BatchNorm2d", "(", "64", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "BatchNorm2d", "(", "64", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "sf", "=", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "Bottleneck", ",", "64", ",", "64", ",", "4", ")", "\n", "\n", "self", ".", "stage2_cfg", "=", "extra", "[", "'STAGE2'", "]", "\n", "num_channels", "=", "self", ".", "stage2_cfg", "[", "'NUM_CHANNELS'", "]", "\n", "block", "=", "blocks_dict", "[", "self", ".", "stage2_cfg", "[", "'BLOCK'", "]", "]", "\n", "num_channels", "=", "[", "\n", "num_channels", "[", "i", "]", "*", "block", ".", "expansion", "for", "i", "in", "range", "(", "len", "(", "num_channels", ")", ")", "]", "\n", "self", ".", "transition1", "=", "self", ".", "_make_transition_layer", "(", "\n", "[", "256", "]", ",", "num_channels", ")", "\n", "self", ".", "stage2", ",", "pre_stage_channels", "=", "self", ".", "_make_stage", "(", "\n", "self", ".", "stage2_cfg", ",", "num_channels", ")", "\n", "\n", "self", ".", "stage3_cfg", "=", "extra", "[", "'STAGE3'", "]", "\n", "num_channels", "=", "self", ".", "stage3_cfg", "[", "'NUM_CHANNELS'", "]", "\n", "block", "=", "blocks_dict", "[", "self", ".", "stage3_cfg", "[", "'BLOCK'", "]", "]", "\n", "num_channels", "=", "[", "\n", "num_channels", "[", "i", "]", "*", "block", ".", "expansion", "for", "i", "in", "range", "(", "len", "(", "num_channels", ")", ")", "]", "\n", "self", ".", "transition2", "=", "self", ".", "_make_transition_layer", "(", "\n", "pre_stage_channels", ",", "num_channels", ")", "\n", "self", ".", "stage3", ",", "pre_stage_channels", "=", "self", ".", "_make_stage", "(", "\n", "self", ".", "stage3_cfg", ",", "num_channels", ")", "\n", "\n", "self", ".", "stage4_cfg", "=", "extra", "[", "'STAGE4'", "]", "\n", "num_channels", "=", "self", ".", "stage4_cfg", "[", "'NUM_CHANNELS'", "]", "\n", "block", "=", "blocks_dict", "[", "self", ".", "stage4_cfg", "[", "'BLOCK'", "]", "]", "\n", "num_channels", "=", "[", "\n", "num_channels", "[", "i", "]", "*", "block", ".", "expansion", "for", "i", "in", "range", "(", "len", "(", "num_channels", ")", ")", "]", "\n", "self", ".", "transition3", "=", "self", ".", "_make_transition_layer", "(", "\n", "pre_stage_channels", ",", "num_channels", ")", "\n", "self", ".", "stage4", ",", "pre_stage_channels", "=", "self", ".", "_make_stage", "(", "\n", "self", ".", "stage4_cfg", ",", "num_channels", ",", "multi_scale_output", "=", "True", ")", "\n", "\n", "final_inp_channels", "=", "sum", "(", "pre_stage_channels", ")", "\n", "\n", "self", ".", "head", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "final_inp_channels", ",", "\n", "out_channels", "=", "final_inp_channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", "if", "extra", ".", "FINAL_CONV_KERNEL", "==", "3", "else", "0", ")", ",", "\n", "BatchNorm2d", "(", "final_inp_channels", ",", "momentum", "=", "BN_MOMENTUM", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "final_inp_channels", ",", "\n", "out_channels", "=", "config", ".", "MODEL", ".", "NUM_JOINTS", ",", "\n", "kernel_size", "=", "extra", ".", "FINAL_CONV_KERNEL", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", "if", "extra", ".", "FINAL_CONV_KERNEL", "==", "3", "else", "0", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.models.hrnet.HighResolutionNet._make_transition_layer": [[322, 357], ["len", "len", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "transition_layers.append", "transition_layers.append", "transition_layers.append", "conv3x3s.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["", "def", "_make_transition_layer", "(", "\n", "self", ",", "num_channels_pre_layer", ",", "num_channels_cur_layer", ")", ":", "\n", "        ", "num_branches_cur", "=", "len", "(", "num_channels_cur_layer", ")", "\n", "num_branches_pre", "=", "len", "(", "num_channels_pre_layer", ")", "\n", "\n", "transition_layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_branches_cur", ")", ":", "\n", "            ", "if", "i", "<", "num_branches_pre", ":", "\n", "                ", "if", "num_channels_cur_layer", "[", "i", "]", "!=", "num_channels_pre_layer", "[", "i", "]", ":", "\n", "                    ", "transition_layers", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "num_channels_pre_layer", "[", "i", "]", ",", "\n", "num_channels_cur_layer", "[", "i", "]", ",", "\n", "3", ",", "\n", "1", ",", "\n", "1", ",", "\n", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "\n", "num_channels_cur_layer", "[", "i", "]", ",", "momentum", "=", "BN_MOMENTUM", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ")", "\n", "", "else", ":", "\n", "                    ", "transition_layers", ".", "append", "(", "None", ")", "\n", "", "", "else", ":", "\n", "                ", "conv3x3s", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "i", "+", "1", "-", "num_branches_pre", ")", ":", "\n", "                    ", "inchannels", "=", "num_channels_pre_layer", "[", "-", "1", "]", "\n", "outchannels", "=", "num_channels_cur_layer", "[", "i", "]", "if", "j", "==", "i", "-", "num_branches_pre", "else", "inchannels", "\n", "conv3x3s", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "inchannels", ",", "outchannels", ",", "3", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "outchannels", ",", "momentum", "=", "BN_MOMENTUM", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ")", "\n", "", "transition_layers", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "conv3x3s", ")", ")", "\n", "\n", "", "", "return", "nn", ".", "ModuleList", "(", "transition_layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.models.hrnet.HighResolutionNet._make_layer": [[358, 374], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "inplanes", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ",", "momentum", "=", "BN_MOMENTUM", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.models.hrnet.HighResolutionNet._make_stage": [[375, 403], ["range", "modules.append", "modules[].get_num_inchannels", "torch.Sequential", "torch.Sequential", "torch.Sequential", "hrnet.HighResolutionModule"], "methods", ["home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.models.hrnet.HighResolutionModule.get_num_inchannels"], ["", "def", "_make_stage", "(", "self", ",", "layer_config", ",", "num_inchannels", ",", "\n", "multi_scale_output", "=", "True", ")", ":", "\n", "        ", "num_modules", "=", "layer_config", "[", "'NUM_MODULES'", "]", "\n", "num_branches", "=", "layer_config", "[", "'NUM_BRANCHES'", "]", "\n", "num_blocks", "=", "layer_config", "[", "'NUM_BLOCKS'", "]", "\n", "num_channels", "=", "layer_config", "[", "'NUM_CHANNELS'", "]", "\n", "block", "=", "blocks_dict", "[", "layer_config", "[", "'BLOCK'", "]", "]", "\n", "fuse_method", "=", "layer_config", "[", "'FUSE_METHOD'", "]", "\n", "\n", "modules", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_modules", ")", ":", "\n", "# multi_scale_output is only used last module", "\n", "            ", "if", "not", "multi_scale_output", "and", "i", "==", "num_modules", "-", "1", ":", "\n", "                ", "reset_multi_scale_output", "=", "False", "\n", "", "else", ":", "\n", "                ", "reset_multi_scale_output", "=", "True", "\n", "", "modules", ".", "append", "(", "\n", "HighResolutionModule", "(", "num_branches", ",", "\n", "block", ",", "\n", "num_blocks", ",", "\n", "num_inchannels", ",", "\n", "num_channels", ",", "\n", "fuse_method", ",", "\n", "reset_multi_scale_output", ")", "\n", ")", "\n", "num_inchannels", "=", "modules", "[", "-", "1", "]", ".", "get_num_inchannels", "(", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "modules", ")", ",", "num_inchannels", "\n", "\n"]], "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.models.hrnet.HighResolutionNet.forward": [[404, 447], ["hrnet.HighResolutionNet.conv1", "hrnet.HighResolutionNet.bn1", "hrnet.HighResolutionNet.relu", "hrnet.HighResolutionNet.conv2", "hrnet.HighResolutionNet.bn2", "hrnet.HighResolutionNet.relu", "hrnet.HighResolutionNet.layer1", "range", "hrnet.HighResolutionNet.stage2", "range", "hrnet.HighResolutionNet.stage3", "range", "hrnet.HighResolutionNet.stage4", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "hrnet.HighResolutionNet.head", "x[].size", "x[].size", "x_list.append", "x_list.append", "x_list.append", "x_list.append", "x_list.append", "x_list.append"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# h, w = x.size(2), x.size(3)", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "\n", "x_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "stage2_cfg", "[", "'NUM_BRANCHES'", "]", ")", ":", "\n", "            ", "if", "self", ".", "transition1", "[", "i", "]", "is", "not", "None", ":", "\n", "                ", "x_list", ".", "append", "(", "self", ".", "transition1", "[", "i", "]", "(", "x", ")", ")", "\n", "", "else", ":", "\n", "                ", "x_list", ".", "append", "(", "x", ")", "\n", "", "", "y_list", "=", "self", ".", "stage2", "(", "x_list", ")", "\n", "\n", "x_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "stage3_cfg", "[", "'NUM_BRANCHES'", "]", ")", ":", "\n", "            ", "if", "self", ".", "transition2", "[", "i", "]", "is", "not", "None", ":", "\n", "                ", "x_list", ".", "append", "(", "self", ".", "transition2", "[", "i", "]", "(", "y_list", "[", "-", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "x_list", ".", "append", "(", "y_list", "[", "i", "]", ")", "\n", "", "", "y_list", "=", "self", ".", "stage3", "(", "x_list", ")", "\n", "\n", "x_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "stage4_cfg", "[", "'NUM_BRANCHES'", "]", ")", ":", "\n", "            ", "if", "self", ".", "transition3", "[", "i", "]", "is", "not", "None", ":", "\n", "                ", "x_list", ".", "append", "(", "self", ".", "transition3", "[", "i", "]", "(", "y_list", "[", "-", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "x_list", ".", "append", "(", "y_list", "[", "i", "]", ")", "\n", "", "", "x", "=", "self", ".", "stage4", "(", "x_list", ")", "\n", "\n", "# Head Part", "\n", "height", ",", "width", "=", "x", "[", "0", "]", ".", "size", "(", "2", ")", ",", "x", "[", "0", "]", ".", "size", "(", "3", ")", "\n", "x1", "=", "F", ".", "interpolate", "(", "x", "[", "1", "]", ",", "size", "=", "(", "height", ",", "width", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "x2", "=", "F", ".", "interpolate", "(", "x", "[", "2", "]", ",", "size", "=", "(", "height", ",", "width", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "x3", "=", "F", ".", "interpolate", "(", "x", "[", "3", "]", ",", "size", "=", "(", "height", ",", "width", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", "[", "0", "]", ",", "x1", ",", "x2", ",", "x3", "]", ",", "1", ")", "\n", "x", "=", "self", ".", "head", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.models.hrnet.HighResolutionNet.init_weights": [[448, 469], ["logger.info", "hrnet.HighResolutionNet.modules", "os.path.isfile", "isinstance", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "logger.info", "hrnet.HighResolutionNet.state_dict", "torch.load.items", "torch.load.items", "torch.load.items", "hrnet.HighResolutionNet.update", "hrnet.HighResolutionNet.load_state_dict", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "isinstance", "logger.info", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.load.items", "torch.load.items", "torch.load.items", "hrnet.HighResolutionNet.keys"], "methods", ["home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.core.function.AverageMeter.update"], ["", "def", "init_weights", "(", "self", ",", "pretrained", "=", "''", ")", ":", "\n", "        ", "logger", ".", "info", "(", "'=> init weights from normal distribution'", ")", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "# nn.init.kaiming_normal_(m.weight, mode='fan_out', nonlinearity='relu')", "\n", "                ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "std", "=", "0.001", ")", "\n", "# nn.init.constant_(m.bias, 0)", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "if", "os", ".", "path", ".", "isfile", "(", "pretrained", ")", ":", "\n", "            ", "pretrained_dict", "=", "torch", ".", "load", "(", "pretrained", ")", "\n", "logger", ".", "info", "(", "'=> loading pretrained model {}'", ".", "format", "(", "pretrained", ")", ")", "\n", "model_dict", "=", "self", ".", "state_dict", "(", ")", "\n", "pretrained_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", "\n", "if", "k", "in", "model_dict", ".", "keys", "(", ")", "}", "\n", "for", "k", ",", "_", "in", "pretrained_dict", ".", "items", "(", ")", ":", "\n", "                ", "logger", ".", "info", "(", "\n", "'=> loading {} pretrained model {}'", ".", "format", "(", "k", ",", "pretrained", ")", ")", "\n", "", "model_dict", ".", "update", "(", "pretrained_dict", ")", "\n", "self", ".", "load_state_dict", "(", "model_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.models.hrnet.conv3x3": [[25, 29], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.models.hrnet.get_face_alignment_net": [[471, 478], ["hrnet.HighResolutionNet", "hrnet.HighResolutionNet.init_weights"], "function", ["home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.models.hrnet.HighResolutionNet.init_weights"], ["", "", "", "def", "get_face_alignment_net", "(", "config", ",", "**", "kwargs", ")", ":", "\n", "\n", "    ", "model", "=", "HighResolutionNet", "(", "config", ",", "**", "kwargs", ")", "\n", "pretrained", "=", "config", ".", "MODEL", ".", "PRETRAINED", "if", "config", ".", "MODEL", ".", "INIT_WEIGHTS", "else", "''", "\n", "model", ".", "init_weights", "(", "pretrained", "=", "pretrained", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.core.function.AverageMeter.__init__": [[25, 31], ["function.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.core.function.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.core.function.AverageMeter.reset": [[32, 37], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.core.function.AverageMeter.update": [[38, 43], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.core.function.train": [[45, 106], ["function.AverageMeter", "function.AverageMeter", "function.AverageMeter", "model.train", "time.time", "enumerate", "logger.info", "function.AverageMeter.update", "model", "target.cuda.cuda", "critertion", "model.data.cpu", "evaluation.decode_preds", "evaluation.compute_nme", "optimizer.zero_grad", "critertion.backward", "optimizer.step", "function.AverageMeter.update", "function.AverageMeter.update", "time.time", "numpy.sum", "evaluation.decode_preds.size", "critertion.item", "inp.size", "logger.info", "time.time", "time.time", "len", "writer.add_scalar", "inp.size"], "function", ["home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.core.function.train", "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.core.function.AverageMeter.update", "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.core.evaluation.decode_preds", "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.core.evaluation.compute_nme", "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.core.function.AverageMeter.update", "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.core.function.AverageMeter.update"], ["", "", "def", "train", "(", "config", ",", "train_loader", ",", "model", ",", "critertion", ",", "optimizer", ",", "\n", "epoch", ",", "writer_dict", ")", ":", "\n", "\n", "    ", "batch_time", "=", "AverageMeter", "(", ")", "\n", "data_time", "=", "AverageMeter", "(", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "\n", "model", ".", "train", "(", ")", "\n", "nme_count", "=", "0", "\n", "nme_batch_sum", "=", "0", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "for", "i", ",", "(", "inp", ",", "target", ",", "meta", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "# measure data time", "\n", "        ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "# compute the output", "\n", "output", "=", "model", "(", "inp", ")", "\n", "target", "=", "target", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "loss", "=", "critertion", "(", "output", ",", "target", ")", "\n", "\n", "# NME", "\n", "score_map", "=", "output", ".", "data", ".", "cpu", "(", ")", "\n", "preds", "=", "decode_preds", "(", "score_map", ",", "meta", "[", "'center'", "]", ",", "meta", "[", "'scale'", "]", ",", "[", "64", ",", "64", "]", ")", "\n", "\n", "nme_batch", "=", "compute_nme", "(", "preds", ",", "meta", ")", "\n", "nme_batch_sum", "=", "nme_batch_sum", "+", "np", ".", "sum", "(", "nme_batch", ")", "\n", "nme_count", "=", "nme_count", "+", "preds", ".", "size", "(", "0", ")", "\n", "\n", "# optimize", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "inp", ".", "size", "(", "0", ")", ")", "\n", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "if", "i", "%", "config", ".", "PRINT_FREQ", "==", "0", ":", "\n", "            ", "msg", "=", "'Epoch: [{0}][{1}/{2}]\\t'", "'Time {batch_time.val:.3f}s ({batch_time.avg:.3f}s)\\t'", "'Speed {speed:.1f} samples/s\\t'", "'Data {data_time.val:.3f}s ({data_time.avg:.3f}s)\\t'", "'Loss {loss.val:.5f} ({loss.avg:.5f})\\t'", ".", "format", "(", "\n", "epoch", ",", "i", ",", "len", "(", "train_loader", ")", ",", "batch_time", "=", "batch_time", ",", "\n", "speed", "=", "inp", ".", "size", "(", "0", ")", "/", "batch_time", ".", "val", ",", "\n", "data_time", "=", "data_time", ",", "loss", "=", "losses", ")", "\n", "logger", ".", "info", "(", "msg", ")", "\n", "\n", "if", "writer_dict", ":", "\n", "                ", "writer", "=", "writer_dict", "[", "'writer'", "]", "\n", "global_steps", "=", "writer_dict", "[", "'train_global_steps'", "]", "\n", "writer", ".", "add_scalar", "(", "'train_loss'", ",", "losses", ".", "val", ",", "global_steps", ")", "\n", "writer_dict", "[", "'train_global_steps'", "]", "=", "global_steps", "+", "1", "\n", "\n", "", "", "end", "=", "time", ".", "time", "(", ")", "\n", "", "nme", "=", "nme_batch_sum", "/", "nme_count", "\n", "msg", "=", "'Train Epoch {} time:{:.4f} loss:{:.4f} nme:{:.4f}'", ".", "format", "(", "epoch", ",", "batch_time", ".", "avg", ",", "losses", ".", "avg", ",", "nme", ")", "\n", "logger", ".", "info", "(", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.core.function.validate": [[108, 173], ["function.AverageMeter", "function.AverageMeter", "function.AverageMeter", "torch.zeros", "model.eval", "time.time", "logger.info", "torch.no_grad", "enumerate", "writer.add_scalar", "writer.add_scalar", "len", "function.AverageMeter.update", "model", "target.cuda.cuda", "model.data.cpu", "criterion", "evaluation.decode_preds", "evaluation.compute_nme", "numpy.sum", "range", "function.AverageMeter.update", "function.AverageMeter.update", "time.time", "evaluation.decode_preds.size", "output.data.cpu.size", "criterion.item", "inp.size", "time.time", "time.time"], "function", ["home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.core.function.AverageMeter.update", "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.core.evaluation.decode_preds", "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.core.evaluation.compute_nme", "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.core.function.AverageMeter.update", "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.core.function.AverageMeter.update"], ["", "def", "validate", "(", "config", ",", "val_loader", ",", "model", ",", "criterion", ",", "epoch", ",", "writer_dict", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", ")", "\n", "data_time", "=", "AverageMeter", "(", ")", "\n", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "\n", "num_classes", "=", "config", ".", "MODEL", ".", "NUM_JOINTS", "\n", "predictions", "=", "torch", ".", "zeros", "(", "(", "len", "(", "val_loader", ".", "dataset", ")", ",", "num_classes", ",", "2", ")", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "nme_count", "=", "0", "\n", "nme_batch_sum", "=", "0", "\n", "count_failure_008", "=", "0", "\n", "count_failure_010", "=", "0", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "i", ",", "(", "inp", ",", "target", ",", "meta", ")", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "# print(meta['index'])", "\n", "            ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "output", "=", "model", "(", "inp", ")", "\n", "target", "=", "target", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "score_map", "=", "output", ".", "data", ".", "cpu", "(", ")", "\n", "# loss", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "\n", "preds", "=", "decode_preds", "(", "score_map", ",", "meta", "[", "'center'", "]", ",", "meta", "[", "'scale'", "]", ",", "[", "64", ",", "64", "]", ")", "\n", "# NME", "\n", "nme_temp", "=", "compute_nme", "(", "preds", ",", "meta", ")", "\n", "# Failure Rate under different threshold", "\n", "failure_008", "=", "(", "nme_temp", ">", "0.08", ")", ".", "sum", "(", ")", "\n", "failure_010", "=", "(", "nme_temp", ">", "0.10", ")", ".", "sum", "(", ")", "\n", "count_failure_008", "+=", "failure_008", "\n", "count_failure_010", "+=", "failure_010", "\n", "\n", "nme_batch_sum", "+=", "np", ".", "sum", "(", "nme_temp", ")", "\n", "nme_count", "=", "nme_count", "+", "preds", ".", "size", "(", "0", ")", "\n", "for", "n", "in", "range", "(", "score_map", ".", "size", "(", "0", ")", ")", ":", "\n", "                ", "predictions", "[", "meta", "[", "'index'", "]", "[", "n", "]", ",", ":", ",", ":", "]", "=", "preds", "[", "n", ",", ":", ",", ":", "]", "\n", "\n", "", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "inp", ".", "size", "(", "0", ")", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "", "", "nme", "=", "nme_batch_sum", "/", "nme_count", "\n", "failure_008_rate", "=", "count_failure_008", "/", "nme_count", "\n", "failure_010_rate", "=", "count_failure_010", "/", "nme_count", "\n", "\n", "msg", "=", "'Test Epoch {} time:{:.4f} loss:{:.4f} nme:{:.4f} [008]:{:.4f} '", "'[010]:{:.4f}'", ".", "format", "(", "epoch", ",", "batch_time", ".", "avg", ",", "losses", ".", "avg", ",", "nme", ",", "\n", "failure_008_rate", ",", "failure_010_rate", ")", "\n", "logger", ".", "info", "(", "msg", ")", "\n", "\n", "if", "writer_dict", ":", "\n", "        ", "writer", "=", "writer_dict", "[", "'writer'", "]", "\n", "global_steps", "=", "writer_dict", "[", "'valid_global_steps'", "]", "\n", "writer", ".", "add_scalar", "(", "'valid_loss'", ",", "losses", ".", "avg", ",", "global_steps", ")", "\n", "writer", ".", "add_scalar", "(", "'valid_nme'", ",", "nme", ",", "global_steps", ")", "\n", "writer_dict", "[", "'valid_global_steps'", "]", "=", "global_steps", "+", "1", "\n", "\n", "", "return", "nme", ",", "predictions", "\n", "\n"]], "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.core.function.inference": [[175, 227], ["function.AverageMeter", "function.AverageMeter", "function.AverageMeter", "torch.zeros", "model.eval", "time.time", "logger.info", "torch.no_grad", "enumerate", "len", "function.AverageMeter.update", "filenames.extend", "model", "model.data.cpu", "evaluation.decode_preds", "evaluation.compute_nme", "numpy.sum", "range", "function.AverageMeter.update", "time.time", "evaluation.decode_preds.size", "output.data.cpu.size", "time.time", "os.path.basename", "time.time"], "function", ["home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.core.function.AverageMeter.update", "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.core.evaluation.decode_preds", "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.core.evaluation.compute_nme", "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.core.function.AverageMeter.update"], ["", "def", "inference", "(", "config", ",", "data_loader", ",", "model", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", ")", "\n", "data_time", "=", "AverageMeter", "(", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "\n", "num_classes", "=", "config", ".", "MODEL", ".", "NUM_JOINTS", "\n", "filenames", "=", "[", "]", "\n", "predictions", "=", "torch", ".", "zeros", "(", "(", "len", "(", "data_loader", ".", "dataset", ")", ",", "num_classes", ",", "2", ")", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "nme_count", "=", "0", "\n", "nme_batch_sum", "=", "0", "\n", "count_failure_008", "=", "0", "\n", "count_failure_010", "=", "0", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "i", ",", "(", "inp", ",", "target", ",", "meta", ")", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "            ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "filenames", ".", "extend", "(", "[", "os", ".", "path", ".", "basename", "(", "filename", ")", "for", "filename", "in", "meta", "[", "'image_path'", "]", "]", ")", "\n", "output", "=", "model", "(", "inp", ")", "\n", "score_map", "=", "output", ".", "data", ".", "cpu", "(", ")", "\n", "preds", "=", "decode_preds", "(", "score_map", ",", "meta", "[", "'center'", "]", ",", "meta", "[", "'scale'", "]", ",", "[", "64", ",", "64", "]", ")", "\n", "\n", "# NME", "\n", "nme_temp", "=", "compute_nme", "(", "preds", ",", "meta", ")", "\n", "\n", "failure_008", "=", "(", "nme_temp", ">", "0.08", ")", ".", "sum", "(", ")", "\n", "failure_010", "=", "(", "nme_temp", ">", "0.10", ")", ".", "sum", "(", ")", "\n", "count_failure_008", "+=", "failure_008", "\n", "count_failure_010", "+=", "failure_010", "\n", "\n", "nme_batch_sum", "+=", "np", ".", "sum", "(", "nme_temp", ")", "\n", "nme_count", "=", "nme_count", "+", "preds", ".", "size", "(", "0", ")", "\n", "for", "n", "in", "range", "(", "score_map", ".", "size", "(", "0", ")", ")", ":", "\n", "                ", "predictions", "[", "meta", "[", "'index'", "]", "[", "n", "]", ",", ":", ",", ":", "]", "=", "preds", "[", "n", ",", ":", ",", ":", "]", "\n", "\n", "# measure elapsed time", "\n", "", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "", "", "nme", "=", "nme_batch_sum", "/", "nme_count", "\n", "failure_008_rate", "=", "count_failure_008", "/", "nme_count", "\n", "failure_010_rate", "=", "count_failure_010", "/", "nme_count", "\n", "\n", "msg", "=", "'Test Results time:{:.4f} loss:{:.4f} nme:{:.4f} [008]:{:.4f} '", "'[010]:{:.4f}'", ".", "format", "(", "batch_time", ".", "avg", ",", "losses", ".", "avg", ",", "nme", ",", "\n", "failure_008_rate", ",", "failure_010_rate", ")", "\n", "logger", ".", "info", "(", "msg", ")", "\n", "\n", "return", "filenames", ",", "nme", ",", "predictions", "\n", "\n"]], "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.core.evaluation.get_preds": [[15, 34], ["torch.max", "maxval.view.view", "idx.repeat().float", "maxval.view.gt().repeat().float", "scores.dim", "scores.view", "scores.size", "scores.size", "idx.view", "torch.floor", "scores.size", "scores.size", "scores.size", "scores.size", "idx.repeat", "scores.size", "maxval.view.gt().repeat", "scores.size", "maxval.view.gt"], "function", ["None"], ["def", "get_preds", "(", "scores", ")", ":", "\n", "    ", "\"\"\"\n    get predictions from score maps in torch Tensor\n    return type: torch.LongTensor\n    \"\"\"", "\n", "assert", "scores", ".", "dim", "(", ")", "==", "4", ",", "'Score maps should be 4-dim'", "\n", "maxval", ",", "idx", "=", "torch", ".", "max", "(", "scores", ".", "view", "(", "scores", ".", "size", "(", "0", ")", ",", "scores", ".", "size", "(", "1", ")", ",", "-", "1", ")", ",", "2", ")", "\n", "\n", "maxval", "=", "maxval", ".", "view", "(", "scores", ".", "size", "(", "0", ")", ",", "scores", ".", "size", "(", "1", ")", ",", "1", ")", "\n", "idx", "=", "idx", ".", "view", "(", "scores", ".", "size", "(", "0", ")", ",", "scores", ".", "size", "(", "1", ")", ",", "1", ")", "+", "1", "\n", "\n", "preds", "=", "idx", ".", "repeat", "(", "1", ",", "1", ",", "2", ")", ".", "float", "(", ")", "\n", "\n", "preds", "[", ":", ",", ":", ",", "0", "]", "=", "(", "preds", "[", ":", ",", ":", ",", "0", "]", "-", "1", ")", "%", "scores", ".", "size", "(", "3", ")", "+", "1", "\n", "preds", "[", ":", ",", ":", ",", "1", "]", "=", "torch", ".", "floor", "(", "(", "preds", "[", ":", ",", ":", ",", "1", "]", "-", "1", ")", "/", "scores", ".", "size", "(", "3", ")", ")", "+", "1", "\n", "\n", "pred_mask", "=", "maxval", ".", "gt", "(", "0", ")", ".", "repeat", "(", "1", ",", "1", ",", "2", ")", ".", "float", "(", ")", "\n", "preds", "*=", "pred_mask", "\n", "return", "preds", "\n", "\n"]], "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.core.evaluation.compute_nme": [[36, 62], ["preds.numpy.numpy", "targets.cpu().numpy", "numpy.zeros", "range", "targets.cpu", "numpy.sum", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.linalg.norm", "ValueError"], "function", ["None"], ["", "def", "compute_nme", "(", "preds", ",", "meta", ")", ":", "\n", "\n", "    ", "targets", "=", "meta", "[", "'pts'", "]", "\n", "preds", "=", "preds", ".", "numpy", "(", ")", "\n", "target", "=", "targets", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "N", "=", "preds", ".", "shape", "[", "0", "]", "\n", "L", "=", "preds", ".", "shape", "[", "1", "]", "\n", "rmse", "=", "np", ".", "zeros", "(", "N", ")", "\n", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "        ", "pts_pred", ",", "pts_gt", "=", "preds", "[", "i", ",", "]", ",", "target", "[", "i", ",", "]", "\n", "if", "L", "==", "19", ":", "# aflw", "\n", "            ", "interocular", "=", "meta", "[", "'box_size'", "]", "[", "i", "]", "\n", "", "elif", "L", "==", "29", ":", "# cofw", "\n", "            ", "interocular", "=", "np", ".", "linalg", ".", "norm", "(", "pts_gt", "[", "8", ",", "]", "-", "pts_gt", "[", "9", ",", "]", ")", "\n", "", "elif", "L", "==", "68", ":", "# 300w", "\n", "# interocular", "\n", "            ", "interocular", "=", "np", ".", "linalg", ".", "norm", "(", "pts_gt", "[", "36", ",", "]", "-", "pts_gt", "[", "45", ",", "]", ")", "\n", "", "elif", "L", "==", "98", ":", "\n", "            ", "interocular", "=", "np", ".", "linalg", ".", "norm", "(", "pts_gt", "[", "60", ",", "]", "-", "pts_gt", "[", "72", ",", "]", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Number of landmarks is wrong'", ")", "\n", "", "rmse", "[", "i", "]", "=", "np", ".", "sum", "(", "np", ".", "linalg", ".", "norm", "(", "pts_pred", "-", "pts_gt", ",", "axis", "=", "1", ")", ")", "/", "(", "interocular", "*", "L", ")", "\n", "\n", "", "return", "rmse", "\n", "\n"]], "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.core.evaluation.decode_preds": [[64, 88], ["evaluation.get_preds", "coords.cpu.cpu", "range", "coords.cpu.clone", "range", "coords.cpu.size", "range", "coords.cpu.size", "utils.transforms.transform_preds", "preds.view.dim", "preds.view.view", "coords.cpu.size", "int", "int", "preds.view.size", "math.floor", "math.floor", "torch.Tensor", "torch.Tensor.sign"], "function", ["home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.core.evaluation.get_preds", "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.utils.transforms.transform_preds"], ["", "def", "decode_preds", "(", "output", ",", "center", ",", "scale", ",", "res", ")", ":", "\n", "    ", "coords", "=", "get_preds", "(", "output", ")", "# float type", "\n", "\n", "coords", "=", "coords", ".", "cpu", "(", ")", "\n", "# pose-processing", "\n", "for", "n", "in", "range", "(", "coords", ".", "size", "(", "0", ")", ")", ":", "\n", "        ", "for", "p", "in", "range", "(", "coords", ".", "size", "(", "1", ")", ")", ":", "\n", "            ", "hm", "=", "output", "[", "n", "]", "[", "p", "]", "\n", "px", "=", "int", "(", "math", ".", "floor", "(", "coords", "[", "n", "]", "[", "p", "]", "[", "0", "]", ")", ")", "\n", "py", "=", "int", "(", "math", ".", "floor", "(", "coords", "[", "n", "]", "[", "p", "]", "[", "1", "]", ")", ")", "\n", "if", "(", "px", ">", "1", ")", "and", "(", "px", "<", "res", "[", "0", "]", ")", "and", "(", "py", ">", "1", ")", "and", "(", "py", "<", "res", "[", "1", "]", ")", ":", "\n", "                ", "diff", "=", "torch", ".", "Tensor", "(", "[", "hm", "[", "py", "-", "1", "]", "[", "px", "]", "-", "hm", "[", "py", "-", "1", "]", "[", "px", "-", "2", "]", ",", "hm", "[", "py", "]", "[", "px", "-", "1", "]", "-", "hm", "[", "py", "-", "2", "]", "[", "px", "-", "1", "]", "]", ")", "\n", "coords", "[", "n", "]", "[", "p", "]", "+=", "diff", ".", "sign", "(", ")", "*", ".25", "\n", "", "", "", "coords", "+=", "0.5", "\n", "preds", "=", "coords", ".", "clone", "(", ")", "\n", "\n", "# Transform back", "\n", "for", "i", "in", "range", "(", "coords", ".", "size", "(", "0", ")", ")", ":", "\n", "        ", "preds", "[", "i", "]", "=", "transform_preds", "(", "coords", "[", "i", "]", ",", "center", "[", "i", "]", ",", "scale", "[", "i", "]", ",", "res", ")", "\n", "\n", "", "if", "preds", ".", "dim", "(", ")", "<", "3", ":", "\n", "        ", "preds", "=", "preds", ".", "view", "(", "1", ",", "preds", ".", "size", "(", ")", ")", "\n", "\n", "", "return", "preds", "\n", "", ""]], "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.tools.train.parse_args": [[26, 36], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "lib.config.update_config"], "function", ["home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.tools.test.parse_args", "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.config.defaults.update_config"], ["def", "parse_args", "(", ")", ":", "\n", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Train Face Alignment'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--cfg'", ",", "help", "=", "'experiment configuration filename'", ",", "\n", "required", "=", "True", ",", "type", "=", "str", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "update_config", "(", "config", ",", "args", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.tools.train.main": [[38, 147], ["train.parse_args", "lib.utils.utils.create_logger", "logger.info", "logger.info", "lib.get_face_alignment_net", "list", "torch.DataParallel().cuda", "torch.nn.MSELoss().cuda", "torch.nn.MSELoss().cuda", "torch.nn.MSELoss().cuda", "torch.nn.MSELoss().cuda", "lib.utils.utils.get_optimizer", "isinstance", "lib.datasets.get_dataset", "lib.datasets.get_dataset.", "lib.datasets.get_dataset.", "print", "print", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "range", "os.path.join", "logger.info", "torch.save", "torch.save", "torch.save", "torch.save", "writer_dict[].close", "pprint.pformat", "pprint.pformat", "tensorboardX.SummaryWriter", "os.path.join", "os.path.islink", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "len", "len", "print", "torch.optim.lr_scheduler.StepLR.step", "lib.core.function.train", "lib.core.function.validate", "min", "logger.info", "print", "lib.utils.utils.save_checkpoint", "nn.DataParallel().cuda.module.state_dict", "torch.DataParallel", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.load", "torch.load", "torch.load", "torch.load", "nn.DataParallel().cuda.load_state_dict", "utils.get_optimizer.load_state_dict", "print", "print", "len", "len", "utils.get_optimizer.state_dict"], "function", ["home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.tools.test.parse_args", "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.utils.utils.create_logger", "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.models.hrnet.get_face_alignment_net", "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.utils.utils.get_optimizer", "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.datasets.__init__.get_dataset", "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.core.function.train", "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.core.function.validate", "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.utils.utils.save_checkpoint"], ["", "def", "main", "(", ")", ":", "\n", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "\n", "logger", ",", "final_output_dir", ",", "tb_log_dir", "=", "utils", ".", "create_logger", "(", "config", ",", "args", ".", "cfg", ",", "'train'", ")", "\n", "\n", "logger", ".", "info", "(", "pprint", ".", "pformat", "(", "args", ")", ")", "\n", "logger", ".", "info", "(", "pprint", ".", "pformat", "(", "config", ")", ")", "\n", "\n", "cudnn", ".", "benchmark", "=", "config", ".", "CUDNN", ".", "BENCHMARK", "\n", "cudnn", ".", "determinstic", "=", "config", ".", "CUDNN", ".", "DETERMINISTIC", "\n", "cudnn", ".", "enabled", "=", "config", ".", "CUDNN", ".", "ENABLED", "\n", "\n", "model", "=", "models", ".", "get_face_alignment_net", "(", "config", ")", "\n", "\n", "# copy model files", "\n", "writer_dict", "=", "{", "\n", "'writer'", ":", "SummaryWriter", "(", "log_dir", "=", "tb_log_dir", ")", ",", "\n", "'train_global_steps'", ":", "0", ",", "\n", "'valid_global_steps'", ":", "0", ",", "\n", "}", "\n", "\n", "gpus", "=", "list", "(", "config", ".", "GPUS", ")", "\n", "model", "=", "nn", ".", "DataParallel", "(", "model", ",", "device_ids", "=", "gpus", ")", ".", "cuda", "(", ")", "\n", "\n", "# loss", "\n", "criterion", "=", "torch", ".", "nn", ".", "MSELoss", "(", "size_average", "=", "True", ")", ".", "cuda", "(", ")", "\n", "\n", "optimizer", "=", "utils", ".", "get_optimizer", "(", "config", ",", "model", ")", "\n", "best_nme", "=", "100", "\n", "last_epoch", "=", "config", ".", "TRAIN", ".", "BEGIN_EPOCH", "\n", "if", "config", ".", "TRAIN", ".", "RESUME", ":", "\n", "        ", "model_state_file", "=", "os", ".", "path", ".", "join", "(", "final_output_dir", ",", "\n", "'latest.pth'", ")", "\n", "if", "os", ".", "path", ".", "islink", "(", "model_state_file", ")", ":", "\n", "            ", "checkpoint", "=", "torch", ".", "load", "(", "model_state_file", ")", "\n", "last_epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "best_nme", "=", "checkpoint", "[", "'best_nme'", "]", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "print", "(", "\"=> loaded checkpoint (epoch {})\"", "\n", ".", "format", "(", "checkpoint", "[", "'epoch'", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"=> no checkpoint found\"", ")", "\n", "\n", "", "", "if", "isinstance", "(", "config", ".", "TRAIN", ".", "LR_STEP", ",", "list", ")", ":", "\n", "        ", "lr_scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "\n", "optimizer", ",", "config", ".", "TRAIN", ".", "LR_STEP", ",", "\n", "config", ".", "TRAIN", ".", "LR_FACTOR", ",", "last_epoch", "-", "1", "\n", ")", "\n", "", "else", ":", "\n", "        ", "lr_scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "StepLR", "(", "\n", "optimizer", ",", "config", ".", "TRAIN", ".", "LR_STEP", ",", "\n", "config", ".", "TRAIN", ".", "LR_FACTOR", ",", "last_epoch", "-", "1", "\n", ")", "\n", "", "dataset_type", "=", "get_dataset", "(", "config", ")", "\n", "\n", "train_set", "=", "dataset_type", "(", "config", ",", "is_train", "=", "True", ")", "\n", "valid_set", "=", "dataset_type", "(", "config", ",", "is_train", "=", "False", ",", "validation_index", "=", "train_set", ".", "validation_index", ")", "\n", "\n", "print", "(", "'Train set size:'", ",", "len", "(", "train_set", ")", ")", "\n", "print", "(", "'Validation set size:'", ",", "len", "(", "valid_set", ")", ")", "\n", "if", "config", ".", "DATASET", ".", "VAL_RATIO", ">", "0", "and", "config", ".", "DATASET", ".", "TESTSET", "is", "not", "''", ":", "\n", "        ", "print", "(", "'WARNING: DATASET.VAL_RATIO > 0, so validation set drawn from train CSV, and test CSV ignored'", ")", "\n", "\n", "", "train_loader", "=", "DataLoader", "(", "\n", "dataset", "=", "train_set", ",", "\n", "batch_size", "=", "config", ".", "TRAIN", ".", "BATCH_SIZE_PER_GPU", "*", "len", "(", "gpus", ")", ",", "\n", "shuffle", "=", "config", ".", "TRAIN", ".", "SHUFFLE", ",", "\n", "num_workers", "=", "config", ".", "WORKERS", ",", "\n", "pin_memory", "=", "config", ".", "PIN_MEMORY", ")", "\n", "\n", "val_loader", "=", "DataLoader", "(", "\n", "dataset", "=", "valid_set", ",", "\n", "batch_size", "=", "config", ".", "TEST", ".", "BATCH_SIZE_PER_GPU", "*", "len", "(", "gpus", ")", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "config", ".", "WORKERS", ",", "\n", "pin_memory", "=", "config", ".", "PIN_MEMORY", "\n", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "last_epoch", ",", "config", ".", "TRAIN", ".", "END_EPOCH", ")", ":", "\n", "        ", "lr_scheduler", ".", "step", "(", ")", "\n", "\n", "function", ".", "train", "(", "config", ",", "train_loader", ",", "model", ",", "criterion", ",", "\n", "optimizer", ",", "epoch", ",", "writer_dict", ")", "\n", "\n", "# evaluate", "\n", "nme", ",", "predictions", "=", "function", ".", "validate", "(", "config", ",", "val_loader", ",", "model", ",", "\n", "criterion", ",", "epoch", ",", "writer_dict", ")", "\n", "\n", "is_best", "=", "nme", "<", "best_nme", "\n", "best_nme", "=", "min", "(", "nme", ",", "best_nme", ")", "\n", "\n", "logger", ".", "info", "(", "'=> saving checkpoint to {}'", ".", "format", "(", "final_output_dir", ")", ")", "\n", "print", "(", "\"best:\"", ",", "is_best", ")", "\n", "utils", ".", "save_checkpoint", "(", "\n", "{", "\"state_dict\"", ":", "model", ",", "\n", "\"epoch\"", ":", "epoch", "+", "1", ",", "\n", "\"best_nme\"", ":", "best_nme", ",", "\n", "\"optimizer\"", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "predictions", ",", "is_best", ",", "final_output_dir", ",", "'checkpoint_{}.pth'", ".", "format", "(", "epoch", ")", ")", "\n", "\n", "", "final_model_state_file", "=", "os", ".", "path", ".", "join", "(", "final_output_dir", ",", "\n", "'final_state.pth'", ")", "\n", "logger", ".", "info", "(", "'saving final model state to {}'", ".", "format", "(", "\n", "final_model_state_file", ")", ")", "\n", "torch", ".", "save", "(", "model", ".", "module", ".", "state_dict", "(", ")", ",", "final_model_state_file", ")", "\n", "writer_dict", "[", "'writer'", "]", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.tools.finetune.parse_args": [[26, 38], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "lib.config.update_config"], "function", ["home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.tools.test.parse_args", "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.config.defaults.update_config"], ["def", "parse_args", "(", ")", ":", "\n", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Train Face Alignment'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--cfg'", ",", "help", "=", "'experiment configuration filename'", ",", "\n", "required", "=", "True", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--model-file'", ",", "help", "=", "'model parameters'", ",", "required", "=", "True", ",", "\n", "type", "=", "str", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "update_config", "(", "config", ",", "args", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.tools.finetune.main": [[40, 171], ["finetune.parse_args", "lib.utils.utils.create_logger", "logger.info", "logger.info", "lib.config.config.defrost", "lib.config.config.freeze", "lib.get_face_alignment_net", "list", "torch.DataParallel().cuda", "torch.load", "torch.load", "torch.load", "torch.load", "nn.DataParallel().cuda.named_parameters", "nn.DataParallel().cuda.named_parameters", "torch.nn.MSELoss().cuda", "torch.nn.MSELoss().cuda", "torch.nn.MSELoss().cuda", "torch.nn.MSELoss().cuda", "lib.utils.utils.get_optimizer", "isinstance", "lib.datasets.get_dataset", "lib.datasets.get_dataset.", "lib.datasets.get_dataset.", "print", "print", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "range", "os.path.join", "logger.info", "torch.save", "torch.save", "torch.save", "torch.save", "writer_dict[].close", "pprint.pformat", "pprint.pformat", "tensorboardX.SummaryWriter", "torch.load.keys", "nn.DataParallel().cuda.load_state_dict", "nn.DataParallel().cuda.module.load_state_dict", "all", "os.path.join", "os.path.islink", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "len", "len", "print", "torch.optim.lr_scheduler.StepLR.step", "lib.core.function.train", "lib.core.function.validate", "min", "logger.info", "print", "lib.utils.utils.save_checkpoint", "nn.DataParallel().cuda.module.state_dict", "torch.DataParallel", "print", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.load", "torch.load", "torch.load", "torch.load", "nn.DataParallel().cuda.load_state_dict", "utils.get_optimizer.load_state_dict", "print", "print", "len", "len", "utils.get_optimizer.state_dict"], "function", ["home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.tools.test.parse_args", "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.utils.utils.create_logger", "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.models.hrnet.get_face_alignment_net", "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.utils.utils.get_optimizer", "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.datasets.__init__.get_dataset", "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.core.function.train", "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.core.function.validate", "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.utils.utils.save_checkpoint"], ["", "def", "main", "(", ")", ":", "\n", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "\n", "logger", ",", "final_output_dir", ",", "tb_log_dir", "=", "utils", ".", "create_logger", "(", "config", ",", "args", ".", "cfg", ",", "'train'", ")", "\n", "\n", "logger", ".", "info", "(", "pprint", ".", "pformat", "(", "args", ")", ")", "\n", "logger", ".", "info", "(", "pprint", ".", "pformat", "(", "config", ")", ")", "\n", "\n", "cudnn", ".", "benchmark", "=", "config", ".", "CUDNN", ".", "BENCHMARK", "\n", "cudnn", ".", "determinstic", "=", "config", ".", "CUDNN", ".", "DETERMINISTIC", "\n", "cudnn", ".", "enabled", "=", "config", ".", "CUDNN", ".", "ENABLED", "\n", "\n", "config", ".", "defrost", "(", ")", "\n", "config", ".", "MODEL", ".", "INIT_WEIGHTS", "=", "False", "\n", "config", ".", "freeze", "(", ")", "\n", "model", "=", "models", ".", "get_face_alignment_net", "(", "config", ")", "\n", "\n", "# copy model files", "\n", "writer_dict", "=", "{", "\n", "'writer'", ":", "SummaryWriter", "(", "log_dir", "=", "tb_log_dir", ")", ",", "\n", "'train_global_steps'", ":", "0", ",", "\n", "'valid_global_steps'", ":", "0", ",", "\n", "}", "\n", "\n", "gpus", "=", "list", "(", "config", ".", "GPUS", ")", "\n", "model", "=", "nn", ".", "DataParallel", "(", "model", ",", "device_ids", "=", "gpus", ")", ".", "cuda", "(", ")", "\n", "\n", "# load model", "\n", "state_dict", "=", "torch", ".", "load", "(", "args", ".", "model_file", ")", "\n", "if", "'state_dict'", "in", "state_dict", ".", "keys", "(", ")", ":", "\n", "        ", "state_dict", "=", "state_dict", "[", "'state_dict'", "]", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "", "else", ":", "\n", "        ", "model", ".", "module", ".", "load_state_dict", "(", "state_dict", ")", "\n", "\n", "# freeze params", "\n", "", "for", "name", ",", "param", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "# if ('head' not in name) and ('stage4' not in name) and ('stage3' not in name):", "\n", "        ", "if", "all", "(", "[", "(", "string", "not", "in", "name", ")", "for", "string", "in", "config", ".", "FINETUNE", ".", "UNFROZEN", "]", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "\n", "# double-check active params", "\n", "", "", "for", "name", ",", "param", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "if", "param", ".", "requires_grad", "==", "True", ":", "\n", "            ", "print", "(", "name", ",", "'requires grad'", ")", "\n", "\n", "# loss", "\n", "", "", "criterion", "=", "torch", ".", "nn", ".", "MSELoss", "(", "size_average", "=", "True", ")", ".", "cuda", "(", ")", "\n", "\n", "optimizer", "=", "utils", ".", "get_optimizer", "(", "config", ",", "model", ")", "\n", "best_nme", "=", "100", "\n", "last_epoch", "=", "config", ".", "FINETUNE", ".", "BEGIN_EPOCH", "\n", "if", "config", ".", "FINETUNE", ".", "RESUME", ":", "\n", "        ", "model_state_file", "=", "os", ".", "path", ".", "join", "(", "final_output_dir", ",", "\n", "'latest.pth'", ")", "\n", "if", "os", ".", "path", ".", "islink", "(", "model_state_file", ")", ":", "\n", "            ", "checkpoint", "=", "torch", ".", "load", "(", "model_state_file", ")", "\n", "last_epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "best_nme", "=", "checkpoint", "[", "'best_nme'", "]", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "print", "(", "\"=> loaded checkpoint (epoch {})\"", "\n", ".", "format", "(", "checkpoint", "[", "'epoch'", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"=> no checkpoint found\"", ")", "\n", "\n", "", "", "if", "isinstance", "(", "config", ".", "FINETUNE", ".", "LR_STEP", ",", "list", ")", ":", "\n", "        ", "lr_scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "\n", "optimizer", ",", "config", ".", "FINETUNE", ".", "LR_STEP", ",", "\n", "config", ".", "FINETUNE", ".", "LR_FACTOR", ",", "last_epoch", "-", "1", "\n", ")", "\n", "", "else", ":", "\n", "        ", "lr_scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "StepLR", "(", "\n", "optimizer", ",", "config", ".", "FINETUNE", ".", "LR_STEP", ",", "\n", "config", ".", "FINETUNE", ".", "LR_FACTOR", ",", "last_epoch", "-", "1", "\n", ")", "\n", "", "dataset_type", "=", "get_dataset", "(", "config", ")", "\n", "\n", "train_set", "=", "dataset_type", "(", "config", ",", "is_train", "=", "True", ")", "\n", "valid_set", "=", "dataset_type", "(", "config", ",", "is_train", "=", "False", ",", "validation_index", "=", "train_set", ".", "validation_index", ")", "\n", "\n", "print", "(", "'Train set size:'", ",", "len", "(", "train_set", ")", ")", "\n", "print", "(", "'Validation set size:'", ",", "len", "(", "valid_set", ")", ")", "\n", "if", "config", ".", "DATASET", ".", "VAL_RATIO", ">", "0", "and", "config", ".", "DATASET", ".", "TESTSET", "is", "not", "''", ":", "\n", "        ", "print", "(", "'WARNING: DATASET.VAL_RATIO > 0, so validation set drawn from train CSV, and test CSV ignored'", ")", "\n", "\n", "", "train_loader", "=", "DataLoader", "(", "\n", "dataset", "=", "train_set", ",", "\n", "batch_size", "=", "config", ".", "FINETUNE", ".", "BATCH_SIZE_PER_GPU", "*", "len", "(", "gpus", ")", ",", "\n", "shuffle", "=", "config", ".", "FINETUNE", ".", "SHUFFLE", ",", "\n", "num_workers", "=", "config", ".", "WORKERS", ",", "\n", "pin_memory", "=", "config", ".", "PIN_MEMORY", ")", "\n", "\n", "val_loader", "=", "DataLoader", "(", "\n", "dataset", "=", "valid_set", ",", "\n", "batch_size", "=", "config", ".", "TEST", ".", "BATCH_SIZE_PER_GPU", "*", "len", "(", "gpus", ")", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "config", ".", "WORKERS", ",", "\n", "pin_memory", "=", "config", ".", "PIN_MEMORY", "\n", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "last_epoch", ",", "config", ".", "FINETUNE", ".", "END_EPOCH", ")", ":", "\n", "        ", "lr_scheduler", ".", "step", "(", ")", "\n", "\n", "function", ".", "train", "(", "config", ",", "train_loader", ",", "model", ",", "criterion", ",", "\n", "optimizer", ",", "epoch", ",", "writer_dict", ")", "\n", "\n", "# evaluate", "\n", "nme", ",", "predictions", "=", "function", ".", "validate", "(", "config", ",", "val_loader", ",", "model", ",", "\n", "criterion", ",", "epoch", ",", "writer_dict", ")", "\n", "\n", "is_best", "=", "nme", "<", "best_nme", "\n", "best_nme", "=", "min", "(", "nme", ",", "best_nme", ")", "\n", "\n", "logger", ".", "info", "(", "'=> saving checkpoint to {}'", ".", "format", "(", "final_output_dir", ")", ")", "\n", "print", "(", "\"best:\"", ",", "is_best", ")", "\n", "utils", ".", "save_checkpoint", "(", "\n", "{", "\"state_dict\"", ":", "model", ",", "\n", "\"epoch\"", ":", "epoch", "+", "1", ",", "\n", "\"best_nme\"", ":", "best_nme", ",", "\n", "\"optimizer\"", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "predictions", ",", "is_best", ",", "final_output_dir", ",", "'checkpoint_{}.pth'", ".", "format", "(", "epoch", ")", ")", "\n", "\n", "", "final_model_state_file", "=", "os", ".", "path", ".", "join", "(", "final_output_dir", ",", "\n", "'final_state.pth'", ")", "\n", "logger", ".", "info", "(", "'saving final model state to {}'", ".", "format", "(", "\n", "final_model_state_file", ")", ")", "\n", "torch", ".", "save", "(", "model", ".", "module", ".", "state_dict", "(", ")", ",", "final_model_state_file", ")", "\n", "writer_dict", "[", "'writer'", "]", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.tools.test.parse_args": [[25, 36], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "lib.config.update_config"], "function", ["home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.tools.test.parse_args", "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.config.defaults.update_config"], ["def", "parse_args", "(", ")", ":", "\n", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Train Face Alignment'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--cfg'", ",", "help", "=", "'experiment configuration filename'", ",", "\n", "required", "=", "True", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--model-file'", ",", "help", "=", "'model parameters'", ",", "required", "=", "True", ",", "type", "=", "str", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "update_config", "(", "config", ",", "args", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.tools.test.main": [[38, 101], ["test.parse_args", "lib.utils.utils.create_logger", "logger.info", "logger.info", "lib.config.config.defrost", "lib.config.config.freeze", "lib.get_face_alignment_net", "list", "torch.DataParallel().cuda", "torch.load", "torch.load", "torch.load", "lib.datasets.get_dataset", "torch.utils.data.DataLoader", "lib.core.function.inference", "os.path.join", "predictions.numpy", "range", "print", "torch.save", "torch.save", "torch.save", "pprint.pformat", "pprint.pformat", "torch.load.keys", "nn.DataParallel().cuda.load_state_dict", "nn.DataParallel().cuda.module.load_state_dict", "os.path.isdir", "os.mkdir", "len", "os.path.join", "torch.DataParallel", "lib.datasets.get_dataset.", "open", "output_text.write", "output_text.write", "output_text.write", "output_text.write", "len", "os.path.join", "str", "str", "str", "os.path.splitext", "list", "list", "numpy.min", "numpy.min", "numpy.max", "numpy.max"], "function", ["home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.tools.test.parse_args", "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.utils.utils.create_logger", "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.models.hrnet.get_face_alignment_net", "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.datasets.__init__.get_dataset", "home.repos.pwc.inspect_result.ostadabbas_infant-facial-landmark-detection-and-tracking.core.function.inference"], ["", "def", "main", "(", ")", ":", "\n", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "\n", "logger", ",", "final_output_dir", ",", "tb_log_dir", "=", "utils", ".", "create_logger", "(", "config", ",", "args", ".", "cfg", ",", "'test'", ")", "\n", "\n", "logger", ".", "info", "(", "pprint", ".", "pformat", "(", "args", ")", ")", "\n", "logger", ".", "info", "(", "pprint", ".", "pformat", "(", "config", ")", ")", "\n", "\n", "cudnn", ".", "benchmark", "=", "config", ".", "CUDNN", ".", "BENCHMARK", "\n", "cudnn", ".", "determinstic", "=", "config", ".", "CUDNN", ".", "DETERMINISTIC", "\n", "cudnn", ".", "enabled", "=", "config", ".", "CUDNN", ".", "ENABLED", "\n", "\n", "config", ".", "defrost", "(", ")", "\n", "config", ".", "MODEL", ".", "INIT_WEIGHTS", "=", "False", "\n", "config", ".", "freeze", "(", ")", "\n", "model", "=", "models", ".", "get_face_alignment_net", "(", "config", ")", "\n", "\n", "gpus", "=", "list", "(", "config", ".", "GPUS", ")", "\n", "model", "=", "nn", ".", "DataParallel", "(", "model", ",", "device_ids", "=", "gpus", ")", ".", "cuda", "(", ")", "\n", "\n", "# load model", "\n", "state_dict", "=", "torch", ".", "load", "(", "args", ".", "model_file", ")", "\n", "if", "'state_dict'", "in", "state_dict", ".", "keys", "(", ")", ":", "\n", "        ", "state_dict", "=", "state_dict", "[", "'state_dict'", "]", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "", "else", ":", "\n", "        ", "model", ".", "module", ".", "load_state_dict", "(", "state_dict", ")", "\n", "\n", "", "dataset_type", "=", "get_dataset", "(", "config", ")", "\n", "\n", "test_loader", "=", "DataLoader", "(", "\n", "dataset", "=", "dataset_type", "(", "config", ",", "\n", "is_train", "=", "False", ")", ",", "\n", "batch_size", "=", "config", ".", "TEST", ".", "BATCH_SIZE_PER_GPU", "*", "len", "(", "gpus", ")", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "config", ".", "WORKERS", ",", "\n", "pin_memory", "=", "config", ".", "PIN_MEMORY", "\n", ")", "\n", "\n", "filenames", ",", "nme", ",", "predictions", "=", "function", ".", "inference", "(", "config", ",", "test_loader", ",", "model", ")", "\n", "\n", "# Save coordinate predictions externally in an ad hoc manner.", "\n", "output_dir", "=", "os", ".", "path", ".", "join", "(", "final_output_dir", ",", "'predictions'", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "output_dir", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "output_dir", ")", "\n", "\n", "", "pred_array", "=", "predictions", ".", "numpy", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "filenames", ")", ")", ":", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "os", ".", "path", ".", "splitext", "(", "filenames", "[", "i", "]", ")", "[", "0", "]", "+", "'.txt'", ")", ",", "'w'", ")", "as", "output_text", ":", "\n", "            ", "output_text", ".", "write", "(", "'file: '", "+", "filenames", "[", "i", "]", "+", "'\\n'", ")", "\n", "output_text", ".", "write", "(", "'x: '", "+", "str", "(", "list", "(", "pred_array", "[", "i", ",", ":", ",", "0", "]", ")", ")", "+", "'\\n'", ")", "\n", "output_text", ".", "write", "(", "'y: '", "+", "str", "(", "list", "(", "pred_array", "[", "i", ",", ":", ",", "1", "]", ")", ")", "+", "'\\n'", ")", "\n", "output_text", ".", "write", "(", "'min_box: '", "+", "str", "(", "[", "np", ".", "min", "(", "pred_array", "[", "i", ",", ":", ",", "0", "]", ")", ",", "\n", "np", ".", "min", "(", "pred_array", "[", "i", ",", ":", ",", "1", "]", ")", ",", "\n", "np", ".", "max", "(", "pred_array", "[", "i", ",", ":", ",", "0", "]", ")", ",", "\n", "np", ".", "max", "(", "pred_array", "[", "i", ",", ":", ",", "1", "]", ")", "]", ")", ")", "\n", "\n", "", "", "print", "(", "'Predictions saved to'", ",", "output_dir", ")", "\n", "\n", "torch", ".", "save", "(", "predictions", ",", "os", ".", "path", ".", "join", "(", "final_output_dir", ",", "'predictions.pth'", ")", ")", "\n", "\n"]]}