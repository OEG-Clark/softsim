{"home.repos.pwc.inspect_result.socialrecsys_smin.None.main.Hope.__init__": [[34, 95], ["trainMat.tocoo", "numpy.hstack().tolist", "Interface.BPRData.BPRData", "Interface.BPRData.BPRData", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "dgl.graph", "dgl.graph", "dgl.graph", "dgl.graph", "dgl.graph", "print", "main.Hope.args.user_graph_indx.split", "range", "print", "main.Hope.args.item_graph_indx.split", "range", "numpy.sum", "len", "main.Hope.user_graph.append", "len", "main.Hope.item_graph.append", "ToolScripts.tools.sparse_mx_to_torch_sparse_tensor().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "dgl.DGLGraph", "numpy.hstack", "ToolScripts.tools.sparse_mx_to_torch_sparse_tensor", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "train_u.reshape", "train_v.reshape", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.sum"], "methods", ["home.repos.pwc.inspect_result.socialrecsys_smin.ToolScripts.tools.sparse_mx_to_torch_sparse_tensor"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "data", ",", "metaPath", ",", "subGraph", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "metaPath", "=", "metaPath", "\n", "\n", "#train data and test data", "\n", "trainMat", ",", "testData", ",", "_", ",", "_", ",", "_", "=", "data", "\n", "self", ".", "userNum", ",", "self", ".", "itemNum", "=", "trainMat", ".", "shape", "\n", "train_coo", "=", "trainMat", ".", "tocoo", "(", ")", "\n", "train_u", ",", "train_v", ",", "train_r", "=", "train_coo", ".", "row", ",", "train_coo", ".", "col", ",", "train_coo", ".", "data", "\n", "assert", "np", ".", "sum", "(", "train_r", "==", "0", ")", "==", "0", "\n", "train_data", "=", "np", ".", "hstack", "(", "(", "train_u", ".", "reshape", "(", "-", "1", ",", "1", ")", ",", "train_v", ".", "reshape", "(", "-", "1", ",", "1", ")", ")", ")", ".", "tolist", "(", ")", "#//(u,v)list", "\n", "test_data", "=", "testData", "\n", "\n", "train_dataset", "=", "BPRData", "(", "train_data", ",", "self", ".", "itemNum", ",", "trainMat", ",", "1", ",", "True", ")", "#num_negtive samples", "\n", "test_dataset", "=", "BPRData", "(", "test_data", ",", "self", ".", "itemNum", ",", "trainMat", ",", "0", ",", "False", ")", "\n", "self", ".", "train_loader", "=", "dataloader", ".", "DataLoader", "(", "train_dataset", ",", "batch_size", "=", "self", ".", "args", ".", "batch", ",", "shuffle", "=", "True", ",", "num_workers", "=", "0", ")", "\n", "self", ".", "test_loader", "=", "dataloader", ".", "DataLoader", "(", "test_dataset", ",", "batch_size", "=", "1024", "*", "1000", ",", "shuffle", "=", "False", ",", "num_workers", "=", "0", ")", "#test batch=1024", "\n", "\n", "#user metaPath: UU UIU UITIU ITI IUI", "\n", "self", ".", "uu_graph", "=", "dgl", ".", "graph", "(", "self", ".", "metaPath", "[", "'UU'", "]", ",", "ntype", "=", "'user'", ",", "etype", "=", "'social'", ")", "\n", "self", ".", "uiu_graph", "=", "dgl", ".", "graph", "(", "self", ".", "metaPath", "[", "'UIU'", "]", ",", "ntype", "=", "'user'", ",", "etype", "=", "'rating'", ")", "\n", "self", ".", "uitiu_graph", "=", "dgl", ".", "graph", "(", "self", ".", "metaPath", "[", "'UITIU'", "]", ",", "ntype", "=", "'user'", ",", "etype", "=", "'rating'", ")", "\n", "# self.user_graph =[self.uu_graph, self.uiu_graph, self.uitiu_graph] #7 cases", "\n", "\n", "#item metapath IUI ITI", "\n", "self", ".", "iti_graph", "=", "dgl", ".", "graph", "(", "self", ".", "metaPath", "[", "'ITI'", "]", ",", "ntype", "=", "'item'", ",", "etype", "=", "'category'", ")", "\n", "self", ".", "iui_graph", "=", "dgl", ".", "graph", "(", "self", ".", "metaPath", "[", "'IUI'", "]", ",", "ntype", "=", "'item'", ",", "etype", "=", "'raitng'", ")", "\n", "# self.item_graph =[self.iui_graph, self.iti_graph] #3 cases", "\n", "\n", "#according args to append metapath graph to user graph or item graph", "\n", "self", ".", "graph_dict", "=", "{", "}", "\n", "self", ".", "graph_dict", "[", "'uu'", "]", "=", "self", ".", "uu_graph", "\n", "self", ".", "graph_dict", "[", "'uiu'", "]", "=", "self", ".", "uiu_graph", "\n", "self", ".", "graph_dict", "[", "'uitiu'", "]", "=", "self", ".", "uitiu_graph", "\n", "self", ".", "graph_dict", "[", "'iui'", "]", "=", "self", ".", "iui_graph", "\n", "self", ".", "graph_dict", "[", "'iti'", "]", "=", "self", ".", "iti_graph", "\n", "\n", "print", "(", "\"user metaPath: \"", "+", "self", ".", "args", ".", "user_graph_indx", ")", "\n", "user_graph_list", "=", "self", ".", "args", ".", "user_graph_indx", ".", "split", "(", "'_'", ")", "\n", "self", ".", "user_graph", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "user_graph_list", ")", ")", ":", "\n", "            ", "self", ".", "user_graph", ".", "append", "(", "self", ".", "graph_dict", "[", "user_graph_list", "[", "i", "]", "]", ")", "\n", "\n", "", "print", "(", "\"item metaPath: \"", "+", "self", ".", "args", ".", "item_graph_indx", ")", "\n", "item_graph_list", "=", "self", ".", "args", ".", "item_graph_indx", ".", "split", "(", "'_'", ")", "\n", "self", ".", "item_graph", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "item_graph_list", ")", ")", ":", "\n", "            ", "self", ".", "item_graph", ".", "append", "(", "self", ".", "graph_dict", "[", "item_graph_list", "[", "i", "]", "]", ")", "\n", "", "del", "self", ".", "graph_dict", ",", "self", ".", "uu_graph", ",", "self", ".", "uiu_graph", ",", "self", ".", "uitiu_graph", ",", "self", ".", "iui_graph", ",", "self", ".", "iti_graph", "\n", "\n", "#informax", "\n", "if", "self", ".", "args", ".", "informax", "==", "1", ":", "\n", "            ", "(", "self", ".", "ui_graphAdj", ",", "self", ".", "ui_subGraphAdj", ")", "=", "subGraph", "\n", "self", ".", "ui_subGraphAdj_Tensor", "=", "sparse_mx_to_torch_sparse_tensor", "(", "self", ".", "ui_subGraphAdj", ")", ".", "cuda", "(", ")", "\n", "self", ".", "ui_subGraphAdj_Norm", "=", "t", ".", "from_numpy", "(", "np", ".", "sum", "(", "self", ".", "ui_subGraphAdj", ",", "axis", "=", "1", ")", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "self", ".", "ui_graph", "=", "DGLGraph", "(", "self", ".", "ui_graphAdj", ")", "\n", "\n", "#data for plot ", "\n", "", "self", ".", "train_losses", "=", "[", "]", "\n", "self", ".", "test_hr", "=", "[", "]", "\n", "self", ".", "test_ndcg", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.socialrecsys_smin.None.main.Hope.prepareModel": [[96, 123], ["numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "random.seed", "model.MODEL().cuda", "sum", "print", "MV_MIL.informax.Informax().cuda", "torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "eval", "model.MODEL", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "main.Hope.model.parameters", "len", "len", "eval", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh", "MV_MIL.informax.Informax", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.PReLU", "main.Hope.model.parameters", "main.Hope.ui_informax.parameters"], "methods", ["None"], ["", "def", "prepareModel", "(", "self", ")", ":", "\n", "        ", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "t", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "t", ".", "cuda", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "self", ".", "out_dim", "=", "self", ".", "args", ".", "hide_dim", "+", "sum", "(", "eval", "(", "self", ".", "args", ".", "layer_dim", ")", ")", "\n", "#metapath encoder model", "\n", "self", ".", "model", "=", "MODEL", "(", "len", "(", "self", ".", "user_graph", ")", ",", "\n", "len", "(", "self", ".", "item_graph", ")", ",", "\n", "self", ".", "userNum", ",", "\n", "self", ".", "itemNum", ",", "\n", "self", ".", "args", ".", "hide_dim", ",", "\n", "eval", "(", "self", ".", "args", ".", "layer_dim", ")", ")", ".", "cuda", "(", ")", "\n", "#informax", "\n", "if", "self", ".", "args", ".", "informax", "==", "1", ":", "\n", "            ", "if", "self", ".", "args", ".", "informax_graph_act", "==", "'sigmoid'", ":", "\n", "                ", "informaxGraphAct", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "", "elif", "self", ".", "args", ".", "informax_graph_act", "==", "'tanh'", ":", "\n", "                ", "informaxGraphAct", "=", "nn", ".", "Tanh", "(", ")", "\n", "", "print", "(", "'informax graph-level Act funciton: '", "+", "self", ".", "args", ".", "informax_graph_act", ")", "\n", "self", ".", "ui_informax", "=", "Informax", "(", "self", ".", "ui_graph", ",", "self", ".", "out_dim", ",", "self", ".", "out_dim", ",", "nn", ".", "PReLU", "(", ")", ",", "informaxGraphAct", ",", "self", ".", "ui_graphAdj", ")", ".", "cuda", "(", ")", "\n", "self", ".", "opt", "=", "optim", ".", "Adam", "(", "[", "\n", "{", "'params'", ":", "self", ".", "model", ".", "parameters", "(", ")", ",", "'weight_decay'", ":", "0", "}", ",", "\n", "{", "'params'", ":", "self", ".", "ui_informax", ".", "parameters", "(", ")", ",", "'weight_decay'", ":", "0", "}", ",", "\n", "]", ",", "lr", "=", "self", ".", "args", ".", "lr", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "opt", "=", "optim", ".", "Adam", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "args", ".", "lr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.socialrecsys_smin.None.main.Hope.predictModel": [[124, 132], ["torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "", "def", "predictModel", "(", "self", ",", "user", ",", "pos_i", ",", "neg_j", ",", "isTest", "=", "False", ")", ":", "\n", "        ", "if", "isTest", ":", "\n", "            ", "pred_pos", "=", "t", ".", "sum", "(", "user", "*", "pos_i", ",", "dim", "=", "1", ")", "\n", "return", "pred_pos", "\n", "", "else", ":", "\n", "            ", "pred_pos", "=", "t", ".", "sum", "(", "user", "*", "pos_i", ",", "dim", "=", "1", ")", "\n", "pred_neg", "=", "t", ".", "sum", "(", "user", "*", "neg_j", ",", "dim", "=", "1", ")", "\n", "return", "pred_pos", ",", "pred_neg", "\n", "\n"]], "home.repos.pwc.inspect_result.socialrecsys_smin.None.main.Hope.adjust_learning_rate": [[133, 138], ["max"], "methods", ["None"], ["", "", "def", "adjust_learning_rate", "(", "self", ")", ":", "\n", "# lr = self.lr * (self.args.decay**epoch)", "\n", "        ", "if", "self", ".", "opt", "!=", "None", ":", "\n", "            ", "for", "param_group", "in", "self", ".", "opt", ".", "param_groups", ":", "\n", "                ", "param_group", "[", "'lr'", "]", "=", "max", "(", "param_group", "[", "'lr'", "]", "*", "self", ".", "args", ".", "decay", ",", "self", ".", "args", ".", "minlr", ")", "\n", "# print(param_group['lr'])", "\n"]], "home.repos.pwc.inspect_result.socialrecsys_smin.None.main.Hope.getModelName": [[140, 154], ["str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str"], "methods", ["None"], ["", "", "", "def", "getModelName", "(", "self", ")", ":", "\n", "        ", "title", "=", "\"SR-HAN\"", "+", "\"_\"", "\n", "ModelName", "=", "title", "+", "self", ".", "args", ".", "dataset", "+", "\"_\"", "+", "modelUTCStr", "+", "\"_hide_dim_\"", "+", "str", "(", "self", ".", "args", ".", "hide_dim", ")", "+", "\"_layer_dim_\"", "+", "str", "(", "self", ".", "args", ".", "layer_dim", ")", "+", "\"_lr_\"", "+", "str", "(", "self", ".", "args", ".", "lr", ")", "+", "\"_reg_\"", "+", "str", "(", "self", ".", "args", ".", "reg", ")", "+", "\"_topK_\"", "+", "str", "(", "self", ".", "args", ".", "topk", ")", "+", "\"_graph_\"", "+", "str", "(", "self", ".", "args", ".", "user_graph_indx", ")", "+", "\"_\"", "+", "str", "(", "self", ".", "args", ".", "item_graph_indx", ")", "+", "\"_useInformax_\"", "+", "str", "(", "self", ".", "args", ".", "informax", ")", "+", "\"_\"", "+", "str", "(", "self", ".", "args", ".", "k_hop_num", ")", "+", "\"hopSubGraph\"", "+", "\"_lambda1_\"", "+", "str", "(", "self", ".", "args", ".", "lambda1", ")", "+", "\"_lambda2_\"", "+", "str", "(", "self", ".", "args", ".", "lambda2", ")", "\n", "return", "ModelName", "\n", "\n"]], "home.repos.pwc.inspect_result.socialrecsys_smin.None.main.Hope.saveHistory": [[155, 164], ["dict", "main.Hope.getModelName", "open", "pickle.dump"], "methods", ["home.repos.pwc.inspect_result.socialrecsys_smin.None.main.Hope.getModelName"], ["", "def", "saveHistory", "(", "self", ")", ":", "\n", "        ", "history", "=", "dict", "(", ")", "\n", "history", "[", "'loss'", "]", "=", "self", ".", "train_losses", "\n", "history", "[", "'hr'", "]", "=", "self", ".", "test_hr", "\n", "history", "[", "'ndcg'", "]", "=", "self", ".", "test_ndcg", "\n", "ModelName", "=", "self", ".", "getModelName", "(", ")", "\n", "\n", "with", "open", "(", "r'./History/'", "+", "dataset", "+", "r'/'", "+", "ModelName", "+", "'.his'", ",", "'wb'", ")", "as", "fs", ":", "\n", "            ", "pickle", ".", "dump", "(", "history", ",", "fs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.socialrecsys_smin.None.main.Hope.saveModel": [[165, 181], ["main.Hope.getModelName", "dict", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "ToolScripts.TimeLogger.log"], "methods", ["home.repos.pwc.inspect_result.socialrecsys_smin.None.main.Hope.getModelName", "home.repos.pwc.inspect_result.socialrecsys_smin.ToolScripts.TimeLogger.log"], ["", "", "def", "saveModel", "(", "self", ")", ":", "\n", "        ", "ModelName", "=", "self", ".", "getModelName", "(", ")", "\n", "history", "=", "dict", "(", ")", "\n", "history", "[", "'loss'", "]", "=", "self", ".", "train_losses", "\n", "history", "[", "'hr'", "]", "=", "self", ".", "test_hr", "\n", "history", "[", "'ndcg'", "]", "=", "self", ".", "test_ndcg", "\n", "savePath", "=", "r'./Model/'", "+", "dataset", "+", "r'/'", "+", "ModelName", "+", "r'.pth'", "\n", "params", "=", "{", "\n", "'model'", ":", "self", ".", "model", ",", "\n", "'epoch'", ":", "self", ".", "curEpoch", ",", "\n", "'args'", ":", "self", ".", "args", ",", "\n", "'opt'", ":", "self", ".", "opt", ",", "\n", "'history'", ":", "history", "\n", "}", "\n", "t", ".", "save", "(", "params", ",", "savePath", ")", "\n", "log", "(", "\"save model : \"", "+", "ModelName", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.socialrecsys_smin.None.main.Hope.loadModel": [[182, 194], ["torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "ToolScripts.TimeLogger.log"], "methods", ["home.repos.pwc.inspect_result.socialrecsys_smin.ToolScripts.TimeLogger.log"], ["", "def", "loadModel", "(", "self", ",", "modelPath", ")", ":", "\n", "        ", "checkpoint", "=", "t", ".", "load", "(", "r'./Model/'", "+", "dataset", "+", "r'/'", "+", "modelPath", "+", "r'.pth'", ")", "\n", "self", ".", "curEpoch", "=", "checkpoint", "[", "'epoch'", "]", "+", "1", "\n", "self", ".", "model", "=", "checkpoint", "[", "'model'", "]", "\n", "self", ".", "args", "=", "checkpoint", "[", "'args'", "]", "\n", "self", ".", "opt", "=", "checkpoint", "[", "'opt'", "]", "\n", "\n", "history", "=", "checkpoint", "[", "'history'", "]", "\n", "self", ".", "train_losses", "=", "history", "[", "'loss'", "]", "\n", "self", ".", "test_hr", "=", "history", "[", "'hr'", "]", "\n", "self", ".", "test_ndcg", "=", "history", "[", "'ndcg'", "]", "\n", "log", "(", "\"load model %s in epoch %d\"", "%", "(", "modelPath", ",", "checkpoint", "[", "'epoch'", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.socialrecsys_smin.None.main.Hope.trainModel": [[195, 235], ["main.Hope.train_loader.dataset.ng_sample", "user.long().cuda.long().cuda.long().cuda", "item_i.long().cuda.long().cuda.long().cuda", "item_j.long().cuda.long().cuda.long().cuda", "main.Hope.model", "main.Hope.predictModel", "bpr_loss.item", "main.Hope.opt.zero_grad", "loss.backward", "main.Hope.opt.step", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "user.long().cuda.long().cuda.long", "item_i.long().cuda.long().cuda.long", "item_j.long().cuda.long().cuda.long", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "main.Hope.ui_informax", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "informax_loss.item", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "pred_pos.view", "pred_neg.view"], "methods", ["home.repos.pwc.inspect_result.socialrecsys_smin.Interface.BPRData.BPRData.ng_sample", "home.repos.pwc.inspect_result.socialrecsys_smin.None.main.Hope.predictModel"], ["", "def", "trainModel", "(", "self", ")", ":", "\n", "        ", "epoch_loss", "=", "0", "\n", "epoch_informax_loss", "=", "0", "\n", "self", ".", "train_loader", ".", "dataset", ".", "ng_sample", "(", ")", "\n", "for", "user", ",", "item_i", ",", "item_j", "in", "self", ".", "train_loader", ":", "\n", "##a batch", "\n", "            ", "bpr_loss", "=", "0", "\n", "\n", "user", "=", "user", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "item_i", "=", "item_i", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "item_j", "=", "item_j", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "self", ".", "userEmbed", ",", "self", ".", "itemEmbed", "=", "self", ".", "model", "(", "self", ".", "user_graph", ",", "self", ".", "item_graph", ")", "\n", "\n", "#predict", "\n", "pred_pos", ",", "pred_neg", "=", "self", ".", "predictModel", "(", "self", ".", "userEmbed", "[", "user", "]", ",", "self", ".", "itemEmbed", "[", "item_i", "]", ",", "self", ".", "itemEmbed", "[", "item_j", "]", ")", "\n", "bprloss", "=", "-", "(", "pred_pos", ".", "view", "(", "-", "1", ")", "-", "pred_neg", ".", "view", "(", "-", "1", ")", ")", ".", "sigmoid", "(", ")", ".", "log", "(", ")", ".", "sum", "(", ")", "\n", "bpr_loss", "+=", "bprloss", "\n", "\n", "epoch_loss", "+=", "bpr_loss", ".", "item", "(", ")", "\n", "regLoss", "=", "(", "t", ".", "norm", "(", "self", ".", "userEmbed", "[", "user", "]", ")", "**", "2", "+", "t", ".", "norm", "(", "self", ".", "itemEmbed", "[", "item_i", "]", ")", "**", "2", "+", "t", ".", "norm", "(", "self", ".", "itemEmbed", "[", "item_j", "]", ")", "**", "2", ")", "\n", "loss", "=", "0.5", "*", "(", "bpr_loss", "+", "regLoss", "*", "self", ".", "args", ".", "reg", ")", "/", "self", ".", "args", ".", "batch", "\n", "\n", "#DGIloss  ", "\n", "if", "self", ".", "args", ".", "informax", "==", "1", ":", "\n", "                ", "ui_informax_loss", "=", "0", "\n", "self", ".", "allEmbed", "=", "t", ".", "cat", "(", "[", "self", ".", "userEmbed", ",", "self", ".", "itemEmbed", "]", ",", "dim", "=", "0", ")", "\n", "if", "self", ".", "args", ".", "lambda1", "!=", "0", "or", "self", ".", "args", ".", "lambda2", "!=", "0", ":", "\n", "                    ", "res", "=", "self", ".", "ui_informax", "(", "self", ".", "allEmbed", ",", "self", ".", "ui_subGraphAdj", ",", "self", ".", "ui_subGraphAdj_Tensor", ",", "self", ".", "ui_subGraphAdj_Norm", ")", "\n", "Mask", "=", "t", ".", "zeros", "(", "(", "self", ".", "userNum", "+", "self", ".", "itemNum", ")", ")", ".", "cuda", "(", ")", "\n", "Mask", "[", "user", "]", "=", "1", "\n", "Mask", "[", "self", ".", "userNum", "+", "item_i", "]", "=", "1", "\n", "Mask", "[", "self", ".", "userNum", "+", "item_j", "]", "=", "1", "\n", "informax_loss", "=", "self", ".", "args", ".", "lambda1", "*", "(", "(", "(", "Mask", "*", "res", "[", "0", "]", ")", ".", "sum", "(", ")", "+", "(", "Mask", "*", "res", "[", "1", "]", ")", ".", "sum", "(", ")", ")", "/", "t", ".", "sum", "(", "Mask", ")", ")", "+", "self", ".", "args", ".", "lambda2", "*", "(", "(", "(", "Mask", "*", "res", "[", "2", "]", ")", ".", "sum", "(", ")", "+", "(", "Mask", "*", "res", "[", "3", "]", ")", ".", "sum", "(", ")", ")", "/", "t", ".", "sum", "(", "Mask", ")", "+", "res", "[", "4", "]", ")", "\n", "epoch_informax_loss", "+=", "informax_loss", ".", "item", "(", ")", "\n", "loss", "=", "loss", "+", "informax_loss", "\n", "", "", "self", ".", "opt", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "opt", ".", "step", "(", ")", "\n", "", "return", "epoch_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.socialrecsys_smin.None.main.Hope.testModel": [[236, 256], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "main.Hope.model", "numpy.mean", "numpy.mean", "test_u.long().cuda.long().cuda.long().cuda", "test_i.long().cuda.long().cuda.long().cuda", "main.Hope.predictModel", "int", "range", "pred[].view", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.take().cpu().numpy().tolist", "torch.take().cpu().numpy().tolist", "torch.take().cpu().numpy().tolist", "torch.take().cpu().numpy().tolist", "torch.take().cpu().numpy().tolist", "tmp_item_i[].item", "HR.append", "NDCG.append", "test_u.long().cuda.long().cuda.long", "test_i.long().cuda.long().cuda.long", "Interface.hit", "Interface.ndcg", "test_u.long().cuda.long().cuda.cpu().numpy", "torch.take().cpu().numpy", "torch.take().cpu().numpy", "torch.take().cpu().numpy", "torch.take().cpu().numpy", "torch.take().cpu().numpy", "test_u.long().cuda.long().cuda.cpu", "torch.take().cpu", "torch.take().cpu", "torch.take().cpu", "torch.take().cpu", "torch.take().cpu", "torch.take", "torch.take", "torch.take", "torch.take", "torch.take"], "methods", ["home.repos.pwc.inspect_result.socialrecsys_smin.None.main.Hope.predictModel", "home.repos.pwc.inspect_result.socialrecsys_smin.Interface.evaluate.hit", "home.repos.pwc.inspect_result.socialrecsys_smin.Interface.evaluate.ndcg"], ["", "def", "testModel", "(", "self", ")", ":", "\n", "        ", "HR", "=", "[", "]", "\n", "NDCG", "=", "[", "]", "\n", "with", "t", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "userEmbed", ",", "self", ".", "itemEmbed", "=", "self", ".", "model", "(", "self", ".", "user_graph", ",", "self", ".", "item_graph", ")", "\n", "\n", "for", "test_u", ",", "test_i", "in", "self", ".", "test_loader", ":", "\n", "                ", "test_u", "=", "test_u", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "test_i", "=", "test_i", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "pred", "=", "self", ".", "predictModel", "(", "self", ".", "userEmbed", "[", "test_u", "]", ",", "self", ".", "itemEmbed", "[", "test_i", "]", ",", "None", ",", "isTest", "=", "True", ")", "\n", "batch", "=", "int", "(", "test_u", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "size", "/", "100", ")", "\n", "for", "i", "in", "range", "(", "batch", ")", ":", "\n", "                    ", "batch_socres", "=", "pred", "[", "i", "*", "100", ":", "(", "i", "+", "1", ")", "*", "100", "]", ".", "view", "(", "-", "1", ")", "\n", "_", ",", "indices", "=", "t", ".", "topk", "(", "batch_socres", ",", "self", ".", "args", ".", "topk", ")", "\n", "tmp_item_i", "=", "test_i", "[", "i", "*", "100", ":", "(", "i", "+", "1", ")", "*", "100", "]", "\n", "recommends", "=", "t", ".", "take", "(", "tmp_item_i", ",", "indices", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", "\n", "gt_item", "=", "tmp_item_i", "[", "0", "]", ".", "item", "(", ")", "\n", "HR", ".", "append", "(", "evaluate", ".", "hit", "(", "gt_item", ",", "recommends", ")", ")", "\n", "NDCG", ".", "append", "(", "evaluate", ".", "ndcg", "(", "gt_item", ",", "recommends", ")", ")", "\n", "", "", "", "return", "np", ".", "mean", "(", "HR", ")", ",", "np", ".", "mean", "(", "NDCG", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.socialrecsys_smin.None.main.Hope.run": [[257, 307], ["main.Hope.prepareModel", "range", "print", "ToolScripts.TimeLogger.log", "print", "print", "ToolScripts.TimeLogger.log", "main.Hope.loadModel", "main.Hope.testModel", "ToolScripts.TimeLogger.log", "ToolScripts.TimeLogger.log", "main.Hope.trainModel", "main.Hope.train_losses.append", "ToolScripts.TimeLogger.log", "main.Hope.testModel", "main.Hope.test_hr.append", "main.Hope.test_ndcg.append", "ToolScripts.TimeLogger.log", "main.Hope.adjust_learning_rate", "main.Hope.saveHistory", "main.Hope.saveModel", "print", "ToolScripts.TimeLogger.log", "main.Hope.loadModel", "main.Hope.getModelName", "main.Hope.getModelName"], "methods", ["home.repos.pwc.inspect_result.socialrecsys_smin.None.main.Hope.prepareModel", "home.repos.pwc.inspect_result.socialrecsys_smin.ToolScripts.TimeLogger.log", "home.repos.pwc.inspect_result.socialrecsys_smin.ToolScripts.TimeLogger.log", "home.repos.pwc.inspect_result.socialrecsys_smin.None.main.Hope.loadModel", "home.repos.pwc.inspect_result.socialrecsys_smin.None.main.Hope.testModel", "home.repos.pwc.inspect_result.socialrecsys_smin.ToolScripts.TimeLogger.log", "home.repos.pwc.inspect_result.socialrecsys_smin.ToolScripts.TimeLogger.log", "home.repos.pwc.inspect_result.socialrecsys_smin.None.main.Hope.trainModel", "home.repos.pwc.inspect_result.socialrecsys_smin.ToolScripts.TimeLogger.log", "home.repos.pwc.inspect_result.socialrecsys_smin.None.main.Hope.testModel", "home.repos.pwc.inspect_result.socialrecsys_smin.ToolScripts.TimeLogger.log", "home.repos.pwc.inspect_result.socialrecsys_smin.None.main.Hope.adjust_learning_rate", "home.repos.pwc.inspect_result.socialrecsys_smin.None.main.Hope.saveHistory", "home.repos.pwc.inspect_result.socialrecsys_smin.None.main.Hope.saveModel", "home.repos.pwc.inspect_result.socialrecsys_smin.ToolScripts.TimeLogger.log", "home.repos.pwc.inspect_result.socialrecsys_smin.None.main.Hope.loadModel", "home.repos.pwc.inspect_result.socialrecsys_smin.None.main.Hope.getModelName", "home.repos.pwc.inspect_result.socialrecsys_smin.None.main.Hope.getModelName"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "self", ".", "prepareModel", "(", ")", "\n", "if", "isLoadModel", ":", "\n", "            ", "self", ".", "loadModel", "(", "LOAD_MODEL_PATH", ")", "\n", "HR", ",", "NDCG", "=", "self", ".", "testModel", "(", ")", "\n", "log", "(", "\"HR@10=%.4f, NDCG@10=%.4f\"", "%", "(", "HR", ",", "NDCG", ")", ")", "\n", "return", "\n", "\n", "", "loss", "=", "0", "\n", "self", ".", "curEpoch", "=", "0", "\n", "best_hr", "=", "-", "1", "\n", "best_ndcg", "=", "-", "1", "\n", "best_epoch", "=", "-", "1", "\n", "\n", "wait", "=", "0", "\n", "\n", "for", "e", "in", "range", "(", "args", ".", "epochs", "+", "1", ")", ":", "\n", "            ", "self", ".", "curEpoch", "=", "e", "\n", "#train", "\n", "log", "(", "\"**************************************************************\"", ")", "\n", "epoch_loss", "=", "self", ".", "trainModel", "(", ")", "\n", "self", ".", "train_losses", ".", "append", "(", "epoch_loss", ")", "\n", "log", "(", "\"epoch %d/%d, epoch_loss=%.2f\"", "%", "(", "e", ",", "args", ".", "epochs", ",", "epoch_loss", ")", ")", "\n", "\n", "#test", "\n", "HR", ",", "NDCG", "=", "self", ".", "testModel", "(", ")", "\n", "self", ".", "test_hr", ".", "append", "(", "HR", ")", "\n", "self", ".", "test_ndcg", ".", "append", "(", "NDCG", ")", "\n", "log", "(", "\"epoch %d/%d, HR@10=%.4f, NDCG@10=%.4f\"", "%", "(", "e", ",", "args", ".", "epochs", ",", "HR", ",", "NDCG", ")", ")", "\n", "\n", "self", ".", "adjust_learning_rate", "(", ")", "\n", "if", "HR", ">", "best_hr", ":", "\n", "                ", "best_hr", ",", "best_ndcg", ",", "best_epoch", "=", "HR", ",", "NDCG", ",", "e", "\n", "wait", "=", "0", "\n", "self", ".", "saveModel", "(", ")", "\n", "", "else", ":", "\n", "                ", "wait", "+=", "1", "\n", "print", "(", "'wait=%d'", "%", "(", "wait", ")", ")", "\n", "\n", "", "self", ".", "saveHistory", "(", ")", "\n", "if", "wait", "==", "self", ".", "args", ".", "patience", ":", "\n", "                ", "log", "(", "'Early stop! best epoch = %d'", "%", "(", "best_epoch", ")", ")", "\n", "self", ".", "loadModel", "(", "self", ".", "getModelName", "(", ")", ")", "\n", "break", "\n", "\n", "", "", "print", "(", "\"*****************************\"", ")", "\n", "log", "(", "\"best epoch = %d, HR= %.4f, NDCG=%.4f\"", "%", "(", "best_epoch", ",", "best_hr", ",", "best_ndcg", ")", ")", "\n", "print", "(", "\"*****************************\"", ")", "\n", "print", "(", "self", ".", "args", ")", "\n", "log", "(", "\"model name : %s\"", "%", "(", "self", ".", "getModelName", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.socialrecsys_smin.None.model.MODEL.__init__": [[11, 47], ["torch.Module.__init__", "model.MODEL.init_weight", "numpy.sum", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "model.SemanticAttention", "model.SemanticAttention", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "print", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "model.MODEL.userMetaLayers.append", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "model.MODEL.itemMetaLayers.append", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "print", "torch.ModuleList.append", "torch.ModuleList.append", "torch.nn.PReLU", "torch.nn.PReLU", "torch.nn.PReLU", "print", "len", "dgl.nn.pytorch.GraphConv", "len", "dgl.nn.pytorch.GraphConv"], "methods", ["home.repos.pwc.inspect_result.socialrecsys_smin.MV_MIL.gcn.GCN.__init__", "home.repos.pwc.inspect_result.socialrecsys_smin.None.model.MODEL.init_weight"], ["    ", "def", "__init__", "(", "self", ",", "userMetaPathNum", ",", "itemMetaPathNum", ",", "userNum", ",", "itemNum", ",", "hide_dim", ",", "layer", ",", "activation", "=", "'prelu'", ")", ":", "\n", "        ", "super", "(", "MODEL", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "userNum", "=", "userNum", "\n", "self", ".", "itemNum", "=", "itemNum", "\n", "self", ".", "hide_dim", "=", "hide_dim", "\n", "self", ".", "layer", "=", "[", "hide_dim", "]", "+", "layer", "\n", "self", ".", "embedding_dict", "=", "self", ".", "init_weight", "(", "userNum", ",", "itemNum", ",", "hide_dim", ")", "#///\u968f\u673a\u521d\u59cb\u5316user\u548citem\u7684embedding", "\n", "self", ".", "userMetaPathNum", "=", "userMetaPathNum", "\n", "self", ".", "itemMetaPathNum", "=", "itemMetaPathNum", "\n", "self", ".", "in_size", "=", "np", ".", "sum", "(", "self", ".", "layer", ")", "\n", "if", "activation", "==", "\"leakyrelu\"", ":", "\n", "            ", "self", ".", "act", "=", "t", ".", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.5", ")", "\n", "print", "(", "\"GCN Act funcction:leakyrelu\"", ")", "\n", "", "elif", "activation", "==", "\"relu\"", ":", "\n", "            ", "self", ".", "act", "=", "t", ".", "nn", ".", "ReLU", "(", ")", "\n", "print", "(", "\"GCN Act funcction:relu\"", ")", "\n", "", "elif", "activation", "==", "\"prelu\"", ":", "\n", "            ", "self", ".", "act", "=", "t", ".", "nn", ".", "PReLU", "(", ")", "\n", "print", "(", "\"GCN Act funcction:prelu\"", ")", "\n", "\n", "", "self", ".", "userMetaLayers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "_", "in", "range", "(", "userMetaPathNum", ")", ":", "\n", "            ", "userLayers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "self", ".", "layer", ")", "-", "1", ")", ":", "\n", "                ", "userLayers", ".", "append", "(", "GraphConv", "(", "self", ".", "layer", "[", "i", "]", ",", "self", ".", "layer", "[", "i", "+", "1", "]", ",", "bias", "=", "False", ",", "activation", "=", "self", ".", "act", ")", ")", "\n", "", "self", ".", "userMetaLayers", ".", "append", "(", "userLayers", ")", "\n", "\n", "", "self", ".", "itemMetaLayers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "_", "in", "range", "(", "itemMetaPathNum", ")", ":", "\n", "            ", "itemLayers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "self", ".", "layer", ")", "-", "1", ")", ":", "\n", "                ", "itemLayers", ".", "append", "(", "GraphConv", "(", "self", ".", "layer", "[", "i", "]", ",", "self", ".", "layer", "[", "i", "+", "1", "]", ",", "bias", "=", "False", ",", "activation", "=", "self", ".", "act", ")", ")", "\n", "", "self", ".", "itemMetaLayers", ".", "append", "(", "itemLayers", ")", "\n", "#attention ", "\n", "", "self", ".", "semanticUserAttention", "=", "SemanticAttention", "(", "self", ".", "in_size", ")", "\n", "self", ".", "semanticItemAttention", "=", "SemanticAttention", "(", "self", ".", "in_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.socialrecsys_smin.None.model.MODEL.init_weight": [[48, 56], ["torch.ParameterDict", "torch.ParameterDict", "torch.ParameterDict", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "initializer", "initializer", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty"], "methods", ["None"], ["", "def", "init_weight", "(", "self", ",", "userNum", ",", "itemNum", ",", "hide_dim", ")", ":", "\n", "        ", "initializer", "=", "nn", ".", "init", ".", "xavier_uniform_", "\n", "\n", "embedding_dict", "=", "nn", ".", "ParameterDict", "(", "{", "\n", "'user_emb'", ":", "nn", ".", "Parameter", "(", "initializer", "(", "t", ".", "empty", "(", "userNum", ",", "hide_dim", ")", ")", ")", ",", "\n", "'item_emb'", ":", "nn", ".", "Parameter", "(", "initializer", "(", "t", ".", "empty", "(", "itemNum", ",", "hide_dim", ")", ")", ")", ",", "\n", "}", ")", "\n", "return", "embedding_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.socialrecsys_smin.None.model.MODEL.forward": [[57, 110], ["numpy.shape", "range", "numpy.shape", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "model.MODEL.semanticUserAttention", "model.MODEL.semanticItemAttention", "range", "torch.cat", "torch.cat", "torch.cat", "model.MODEL.semanticUserEmbeddings.append", "range", "torch.cat", "torch.cat", "torch.cat", "model.MODEL.semanticItemEmbeddings.append", "layer", "layer", "torch.normalize", "torch.normalize", "torch.normalize", "layer", "layer", "torch.normalize", "torch.normalize", "torch.normalize"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "userGraph", ",", "itemGraph", ",", "norm", "=", "1", ")", ":", "\n", "        ", "self", ".", "semanticUserEmbeddings", "=", "[", "]", "\n", "self", ".", "semanticItemEmbeddings", "=", "[", "]", "\n", "# if len(self.layer) == 1:", "\n", "#     return self.embedding_dict['user_emb'], self.embedding_dict['item_emb']", "\n", "\n", "pathNum", ",", "blockNum", "=", "np", ".", "shape", "(", "self", ".", "userMetaLayers", ")", "\n", "for", "i", "in", "range", "(", "pathNum", ")", ":", "\n", "            ", "self", ".", "all_user_embeddings", "=", "[", "self", ".", "embedding_dict", "[", "'user_emb'", "]", "]", "\n", "\n", "layers", "=", "self", ".", "userMetaLayers", "[", "i", "]", "\n", "for", "j", "in", "range", "(", "blockNum", ")", ":", "\n", "                ", "layer", "=", "layers", "[", "j", "]", "\n", "if", "j", "==", "0", ":", "\n", "                    ", "userEmbeddings", "=", "layer", "(", "userGraph", "[", "i", "]", ",", "self", ".", "embedding_dict", "[", "'user_emb'", "]", ")", "\n", "", "else", ":", "\n", "                    ", "userEmbeddings", "=", "layer", "(", "userGraph", "[", "i", "]", ",", "userEmbeddings", ")", "\n", "\n", "", "if", "norm", "==", "1", ":", "\n", "                    ", "norm_embeddings", "=", "F", ".", "normalize", "(", "userEmbeddings", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "self", ".", "all_user_embeddings", "+=", "[", "norm_embeddings", "]", "\n", "", "else", ":", "\n", "                    ", "self", ".", "all_user_embeddings", "+=", "[", "userEmbeddings", "]", "\n", "", "", "self", ".", "userEmbedding", "=", "t", ".", "cat", "(", "self", ".", "all_user_embeddings", ",", "1", ")", "#24 [8,8,8]", "\n", "self", ".", "semanticUserEmbeddings", ".", "append", "(", "self", ".", "userEmbedding", ")", "\n", "\n", "", "pathNum", ",", "blockNum", "=", "np", ".", "shape", "(", "self", ".", "itemMetaLayers", ")", "\n", "for", "i", "in", "range", "(", "pathNum", ")", ":", "\n", "            ", "self", ".", "all_item_embeddings", "=", "[", "self", ".", "embedding_dict", "[", "'item_emb'", "]", "]", "\n", "\n", "layers", "=", "self", ".", "itemMetaLayers", "[", "i", "]", "\n", "for", "j", "in", "range", "(", "blockNum", ")", ":", "\n", "                ", "layer", "=", "layers", "[", "j", "]", "\n", "if", "j", "==", "0", ":", "\n", "                    ", "itemEmbeddings", "=", "layer", "(", "itemGraph", "[", "i", "]", ",", "self", ".", "embedding_dict", "[", "'item_emb'", "]", ")", "\n", "", "else", ":", "\n", "                    ", "itemEmbeddings", "=", "layer", "(", "itemGraph", "[", "i", "]", ",", "itemEmbeddings", ")", "\n", "\n", "", "if", "norm", "==", "1", ":", "\n", "                    ", "norm_embeddings", "=", "F", ".", "normalize", "(", "itemEmbeddings", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "self", ".", "all_item_embeddings", "+=", "[", "norm_embeddings", "]", "\n", "", "else", ":", "\n", "                    ", "self", ".", "all_item_embeddings", "+=", "[", "itemEmbeddings", "]", "\n", "", "", "self", ".", "itemEmbedding", "=", "t", ".", "cat", "(", "self", ".", "all_item_embeddings", ",", "1", ")", "\n", "self", ".", "semanticItemEmbeddings", ".", "append", "(", "self", ".", "itemEmbedding", ")", "\n", "\n", "\n", "", "self", ".", "semanticUserEmbeddings", "=", "t", ".", "stack", "(", "self", ".", "semanticUserEmbeddings", ",", "dim", "=", "1", ")", "\n", "self", ".", "semanticItemEmbeddings", "=", "t", ".", "stack", "(", "self", ".", "semanticItemEmbeddings", ",", "dim", "=", "1", ")", "#[item_num,num_path,hidden_dim]", "\n", "#attention merge", "\n", "self", ".", "userEmbed", "=", "self", ".", "semanticUserAttention", "(", "self", ".", "semanticUserEmbeddings", ")", "\n", "self", ".", "itemEmbed", "=", "self", ".", "semanticItemAttention", "(", "self", ".", "semanticItemEmbeddings", ")", "#[item_num,hidden_dim]", "\n", "return", "self", ".", "userEmbed", ",", "self", ".", "itemEmbed", "\n", "\n"]], "home.repos.pwc.inspect_result.socialrecsys_smin.None.model.SemanticAttention.__init__": [[113, 120], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.socialrecsys_smin.MV_MIL.gcn.GCN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_size", ",", "hidden_dim", "=", "128", ")", ":", "\n", "        ", "super", "(", "SemanticAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "project", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "in_size", ",", "hidden_dim", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "hidden_dim", ",", "1", ",", "bias", "=", "False", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.socialrecsys_smin.None.model.SemanticAttention.forward": [[122, 127], ["model.SemanticAttention.project().mean", "torch.softmax", "torch.softmax", "torch.softmax", "beta.expand.expand.expand", "model.SemanticAttention.project"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "z", ")", ":", "\n", "        ", "w", "=", "self", ".", "project", "(", "z", ")", ".", "mean", "(", "0", ")", "#[item_num,path_num,1]--mean(0)-->[path_num,1]", "\n", "beta", "=", "t", ".", "softmax", "(", "w", ",", "dim", "=", "0", ")", "#[path_num,1] score", "\n", "beta", "=", "beta", ".", "expand", "(", "(", "z", ".", "shape", "[", "0", "]", ",", ")", "+", "beta", ".", "shape", ")", "#[item_num,path_num,1]", "\n", "return", "(", "beta", "*", "z", ")", ".", "sum", "(", "1", ")", "#[item_num,path_num,hidden_dim]--sum(1)-->[item_num,hidden_dim]", "\n", "\n"]], "home.repos.pwc.inspect_result.socialrecsys_smin.CiaoDVD.loadMat.splitData": [[13, 55], ["ratingMat.tocsr.tocsr", "scipy.csc_matrix", "scipy.csc_matrix", "numpy.where", "ratingMat[].toarray", "numpy.where", "random.shuffle", "list", "list", "open", "pickle.dump", "open", "pickle.dump", "len", "sp.csc_matrix.tocsr", "sp.csc_matrix.tocsr", "numpy.sum"], "function", ["None"], ["def", "splitData", "(", "ratingMat", ",", "trustMat", ",", "categoryMat", ")", ":", "\n", "# #\u8fc7\u6ee4\u6389\u6253\u5206\u6570\u5c0f\u4e8e2\u7684user", "\n", "    ", "train_row", ",", "train_col", ",", "train_data", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "test_row", ",", "test_col", ",", "test_data", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "ratingMat", "=", "ratingMat", ".", "tocsr", "(", ")", "\n", "userList", "=", "np", ".", "where", "(", "np", ".", "sum", "(", "ratingMat", "!=", "0", ",", "axis", "=", "1", ")", ">=", "2", ")", "[", "0", "]", "#//np.where\u8fd4\u56de\u7684\u662f\u884c\u7d22\u5f15+\u5217\u7d22\u5f15,\u4e14\u6570\u636e\u7c7b\u578b\u662fnumpy", "\n", "\n", "#\u6839\u636eratingMat\u5212\u5206\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6", "\n", "for", "i", "in", "userList", ":", "\n", "        ", "uid", "=", "i", "\n", "tmp_data", "=", "ratingMat", "[", "i", "]", ".", "toarray", "(", ")", "\n", "\n", "_", ",", "iidList", "=", "np", ".", "where", "(", "tmp_data", "!=", "0", ")", "\n", "random", ".", "shuffle", "(", "iidList", ")", "#\u6253\u4e71\u987a\u5e8f", "\n", "test_num", "=", "1", "\n", "train_num", "=", "len", "(", "iidList", ")", "-", "1", "\n", "\n", "#\u6b63\u6837\u672c\u5212\u5206", "\n", "train_row", "+=", "[", "i", "]", "*", "train_num", "\n", "train_col", "+=", "list", "(", "iidList", "[", ":", "train_num", "]", ")", "\n", "train_data", "+=", "[", "1", "]", "*", "train_num", "\n", "\n", "test_row", "+=", "[", "i", "]", "*", "test_num", "\n", "test_col", "+=", "list", "(", "iidList", "[", "train_num", ":", "]", ")", "\n", "test_data", "+=", "[", "1", "]", "*", "test_num", "\n", "\n", "# #\u8d1f\u6837\u672c\u91c7\u6837", "\n", "# neg_iidList = np.where(np.sum(tmp_data==0))", "\n", "# neg_iidList = random.sample(list(neg_iidList),99)", "\n", "# test_row += i * 99", "\n", "# test_col += neg_iidList", "\n", "\n", "", "train", "=", "sp", ".", "csc_matrix", "(", "(", "train_data", ",", "(", "train_row", ",", "train_col", ")", ")", ",", "shape", "=", "ratingMat", ".", "shape", ")", "\n", "test", "=", "sp", ".", "csc_matrix", "(", "(", "test_data", ",", "(", "test_row", ",", "test_col", ")", ")", ",", "shape", "=", "ratingMat", ".", "shape", ")", "\n", "\n", "# print('train_num = %d, train rate = %.2f'%(train.nnz,train.nnz/ratingMat.nnz))", "\n", "# print('test_num = %d, test rate = %.2f'%(test.nnz,test.nnz/ratingMat.nnz))", "\n", "with", "open", "(", "'./train.csv'", ",", "'wb'", ")", "as", "fs", ":", "\n", "        ", "pickle", ".", "dump", "(", "train", ".", "tocsr", "(", ")", ",", "fs", ")", "\n", "", "with", "open", "(", "'./test.csv'", ",", "'wb'", ")", "as", "fs", ":", "\n", "        ", "pickle", ".", "dump", "(", "test", ".", "tocsr", "(", ")", ",", "fs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.socialrecsys_smin.CiaoDVD.loadMat.filterData": [[56, 94], ["ratingMat.tocsr.tocsr", "trustMat.tocsr.tocsr", "categoryMat.tocsr.tocsr", "numpy.sum", "numpy.sum", "numpy.sum", "open", "pickle.load", "open", "pickle.load", "numpy.sum", "numpy.sum", "numpy.sum", "open", "pickle.dump", "open", "pickle.dump", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.where", "pickle.load.tocsr", "pickle.load.tocsr", "numpy.where", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.where", "numpy.sum", "numpy.sum"], "function", ["None"], ["", "", "def", "filterData", "(", "ratingMat", ",", "trustMat", ",", "categoryMat", ")", ":", "\n", "    ", "with", "open", "(", "'./train.csv'", ",", "'rb'", ")", "as", "fs", ":", "\n", "        ", "train", "=", "pickle", ".", "load", "(", "fs", ")", "\n", "", "with", "open", "(", "'./test.csv'", ",", "'rb'", ")", "as", "fs", ":", "\n", "        ", "test", "=", "pickle", ".", "load", "(", "fs", ")", "\n", "\n", "", "ratingMat", "=", "ratingMat", ".", "tocsr", "(", ")", "\n", "trustMat", "=", "trustMat", ".", "tocsr", "(", ")", "\n", "categoryMat", "=", "categoryMat", ".", "tocsr", "(", ")", "\n", "\n", "a", "=", "np", ".", "sum", "(", "np", ".", "sum", "(", "train", "!=", "0", ",", "axis", "=", "1", ")", "==", "0", ")", "#\u6709\u591a\u5c11\u4e2auser\u6253\u5206\u6570\u4e3a0", "\n", "b", "=", "np", ".", "sum", "(", "np", ".", "sum", "(", "train", "!=", "0", ",", "axis", "=", "0", ")", "==", "0", ")", "#\u6709\u591a\u5c11\u4e2aitem\u6ca1\u6709\u88ab\u7528\u6237\u8bc4\u5206\u8fc7", "\n", "c", "=", "np", ".", "sum", "(", "np", ".", "sum", "(", "trustMat", ",", "axis", "=", "1", ")", "==", "0", ")", "#\u6709\u591a\u5c11\u4e2auser\u6ca1\u6709\u4fe1\u4efb\u7684\u7528\u6237", "\n", "while", "a", "!=", "0", "or", "b", "!=", "0", "or", "c", "!=", "0", ":", "\n", "        ", "if", "a", "!=", "0", ":", "\n", "            ", "idx", ",", "_", "=", "np", ".", "where", "(", "np", ".", "sum", "(", "train", "!=", "0", ",", "axis", "=", "1", ")", "!=", "0", ")", "\n", "train", "=", "train", "[", "idx", "]", "\n", "test", "=", "test", "[", "idx", "]", "\n", "trustMat", "=", "trustMat", "[", "idx", "]", "[", ":", ",", "idx", "]", "\n", "", "elif", "b", "!=", "0", ":", "\n", "            ", "_", ",", "idx", "=", "np", ".", "where", "(", "np", ".", "sum", "(", "train", "!=", "0", ",", "axis", "=", "0", ")", "!=", "0", ")", "\n", "train", "=", "train", "[", ":", ",", "idx", "]", "\n", "test", "=", "test", "[", ":", ",", "idx", "]", "\n", "categoryMat", "=", "categoryMat", "[", "idx", "]", "\n", "", "elif", "c", "!=", "0", ":", "\n", "            ", "idx", ",", "_", "=", "np", ".", "where", "(", "np", ".", "sum", "(", "trustMat", ",", "axis", "=", "1", ")", "!=", "0", ")", "\n", "train", "=", "train", "[", "idx", "]", "\n", "test", "=", "test", "[", "idx", "]", "\n", "trustMat", "=", "trustMat", "[", "idx", "]", "[", ":", ",", "idx", "]", "\n", "", "a", "=", "np", ".", "sum", "(", "np", ".", "sum", "(", "train", "!=", "0", ",", "axis", "=", "1", ")", "==", "0", ")", "\n", "b", "=", "np", ".", "sum", "(", "np", ".", "sum", "(", "train", "!=", "0", ",", "axis", "=", "0", ")", "==", "0", ")", "\n", "c", "=", "np", ".", "sum", "(", "np", ".", "sum", "(", "trustMat", ",", "axis", "=", "1", ")", "==", "0", ")", "\n", "\n", "", "with", "open", "(", "'./train.csv'", ",", "'wb'", ")", "as", "fs", ":", "\n", "        ", "pickle", ".", "dump", "(", "train", ".", "tocsr", "(", ")", ",", "fs", ")", "\n", "", "with", "open", "(", "'./test.csv'", ",", "'wb'", ")", "as", "fs", ":", "\n", "        ", "pickle", ".", "dump", "(", "test", ".", "tocsr", "(", ")", ",", "fs", ")", "\n", "", "return", "ratingMat", ",", "trustMat", ",", "categoryMat", "\n", "\n"]], "home.repos.pwc.inspect_result.socialrecsys_smin.CiaoDVD.loadMat.splitAgain": [[95, 117], ["pickle.load.tolil", "pickle.load.tolil", "open", "pickle.load", "open", "pickle.load", "numpy.where", "train[].toarray", "numpy.where", "random.sample", "open", "pickle.dump", "open", "pickle.dump", "list", "pickle.load.tocsr", "pickle.load.tocsr", "numpy.sum"], "function", ["None"], ["", "def", "splitAgain", "(", "ratingMat", ",", "trustMat", ",", "categoryMat", ")", ":", "\n", "    ", "with", "open", "(", "'./train.csv'", ",", "'rb'", ")", "as", "fs", ":", "\n", "        ", "train", "=", "pickle", ".", "load", "(", "fs", ")", "\n", "", "with", "open", "(", "'./test.csv'", ",", "'rb'", ")", "as", "fs", ":", "\n", "        ", "test", "=", "pickle", ".", "load", "(", "fs", ")", "\n", "\n", "", "train", "=", "train", ".", "tolil", "(", ")", "\n", "test", "=", "test", ".", "tolil", "(", ")", "\n", "\n", "idx", "=", "np", ".", "where", "(", "np", ".", "sum", "(", "test", "!=", "0", ",", "axis", "=", "1", ")", ".", "A", "==", "0", ")", "[", "0", "]", "#A\u662farray,matrix\u8f6c\u6362\u4e3aarray\u683c\u5f0f", "\n", "for", "i", "in", "idx", ":", "\n", "        ", "uid", "=", "i", "#\u8fd9\u4e9buid\u5bf9\u5e94\u7684user\u5212\u5206\u51fa\u7684\u4e00\u4e2a\u6b63\u6837\u672c\u88ab\u8fc7\u6ee4\u6389\u4e86", "\n", "tmp_data", "=", "train", "[", "i", "]", ".", "toarray", "(", ")", "\n", "_", ",", "iidList", "=", "np", ".", "where", "(", "tmp_data", "!=", "0", ")", "\n", "sample_iid", "=", "random", ".", "sample", "(", "list", "(", "iidList", ")", ",", "1", ")", "\n", "test", "[", "uid", ",", "sample_iid", "]", "=", "1", "\n", "train", "[", "uid", ",", "sample_iid", "]", "=", "0", "\n", "\n", "", "with", "open", "(", "'./train.csv'", ",", "'wb'", ")", "as", "fs", ":", "\n", "        ", "pickle", ".", "dump", "(", "train", ".", "tocsr", "(", ")", ",", "fs", ")", "\n", "", "with", "open", "(", "'./test.csv'", ",", "'wb'", ")", "as", "fs", ":", "\n", "        ", "pickle", ".", "dump", "(", "test", ".", "tocsr", "(", ")", ",", "fs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.socialrecsys_smin.CiaoDVD.loadMat.testNegSample": [[118, 142], ["pickle.load.todok", "range", "open", "pickle.load", "open", "pickle.load", "pickle.load.tocoo", "pickle.load.tocoo", "test_data.append", "range", "open", "pickle.dump", "numpy.random.randint", "test_data.append", "numpy.random.randint"], "function", ["None"], ["", "", "def", "testNegSample", "(", "ratingMat", ",", "trustMat", ",", "categoryMat", ")", ":", "\n", "    ", "with", "open", "(", "'./train.csv'", ",", "'rb'", ")", "as", "fs", ":", "\n", "        ", "train", "=", "pickle", ".", "load", "(", "fs", ")", "\n", "", "with", "open", "(", "'./test.csv'", ",", "'rb'", ")", "as", "fs", ":", "\n", "        ", "test", "=", "pickle", ".", "load", "(", "fs", ")", "\n", "\n", "", "train", "=", "train", ".", "todok", "(", ")", "\n", "test_u", "=", "test", ".", "tocoo", "(", ")", ".", "row", "\n", "test_v", "=", "test", ".", "tocoo", "(", ")", ".", "col", "\n", "test_data", "=", "[", "]", "\n", "n", "=", "test_u", ".", "size", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "        ", "u", "=", "test_u", "[", "i", "]", "\n", "v", "=", "test_v", "[", "i", "]", "\n", "test_data", ".", "append", "(", "[", "u", ",", "v", "]", ")", "\n", "#\u8d1f\u91c7\u6837", "\n", "for", "t", "in", "range", "(", "99", ")", ":", "\n", "            ", "j", "=", "np", ".", "random", ".", "randint", "(", "test", ".", "shape", "[", "1", "]", ")", "\n", "while", "(", "u", ",", "j", ")", "in", "train", "or", "j", "==", "v", ":", "\n", "                ", "j", "=", "np", ".", "random", ".", "randint", "(", "test", ".", "shape", "[", "1", "]", ")", "\n", "", "test_data", ".", "append", "(", "[", "u", ",", "j", "]", ")", "\n", "\n", "", "", "with", "open", "(", "'./test_Data.csv'", ",", "'wb'", ")", "as", "fs", ":", "\n", "        ", "pickle", ".", "dump", "(", "test_data", ",", "fs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.socialrecsys_smin.Yelp.process.getItemCategory": [[18, 50], ["open", "set", "open.readlines", "list", "len", "scipy.dok_matrix", "list", "json.loads", "dic[].strip", "itemCategory.keys", "itemCategory.keys", "open", "pickle.dump", "open", "pickle.dump", "list", "set.add", "len", "list.index", "sp.dok_matrix.tocsr", "map", "dic[].split"], "function", ["None"], ["def", "getItemCategory", "(", ")", ":", "\n", "    ", "f", "=", "open", "(", "itemJson", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "\n", "itemCategory", "=", "{", "}", "\n", "catSet", "=", "set", "(", ")", "\n", "itemName2ID", "=", "{", "}", "\n", "itemID", "=", "0", "\n", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "\n", "        ", "dic", "=", "json", ".", "loads", "(", "line", ")", "\n", "itemStrID", "=", "dic", "[", "'business_id'", "]", ".", "strip", "(", ")", "\n", "if", "dic", "[", "\"categories\"", "]", ":", "\n", "            ", "catList", "=", "list", "(", "map", "(", "str", ".", "strip", ",", "dic", "[", "\"categories\"", "]", ".", "split", "(", "','", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "continue", "\n", "", "itemCategory", "[", "itemStrID", "]", "=", "catList", "\n", "itemName2ID", "[", "itemStrID", "]", "=", "itemID", "\n", "itemID", "+=", "1", "\n", "for", "i", "in", "catList", ":", "\n", "            ", "catSet", ".", "add", "(", "i", ")", "\n", "", "", "categoryList", "=", "list", "(", "catSet", ")", "\n", "itemNum", "=", "len", "(", "itemCategory", ".", "keys", "(", ")", ")", "\n", "categoryMat", "=", "sp", ".", "dok_matrix", "(", "(", "itemNum", ",", "len", "(", "categoryList", ")", ")", ",", "dtype", "=", "np", ".", "int", ")", "\n", "itemList", "=", "list", "(", "itemCategory", ".", "keys", "(", ")", ")", "\n", "for", "item", "in", "itemList", ":", "\n", "        ", "tmp", "=", "itemCategory", "[", "item", "]", "\n", "iid", "=", "itemName2ID", "[", "item", "]", "\n", "for", "category", "in", "tmp", ":", "\n", "            ", "idx", "=", "categoryList", ".", "index", "(", "category", ")", "\n", "categoryMat", "[", "iid", ",", "idx", "]", "=", "1", "\n", "", "", "with", "open", "(", "\"category.csv\"", ",", "'wb'", ")", "as", "fs", ":", "\n", "        ", "pickle", ".", "dump", "(", "categoryMat", ".", "tocsr", "(", ")", ",", "fs", ")", "\n", "", "with", "open", "(", "\"itemName2ID.csv\"", ",", "'wb'", ")", "as", "fs", ":", "\n", "        ", "pickle", ".", "dump", "(", "itemName2ID", ",", "fs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.socialrecsys_smin.Yelp.process.getUserFriends": [[52, 88], ["open", "open.readlines", "len", "scipy.dok_matrix", "list", "trust.tocsr.tocsr", "json.loads", "dic[].strip", "userName2ID.keys", "userName2ID.keys", "open", "pickle.dump", "open", "pickle.dump", "list", "map", "dic[].split"], "function", ["None"], ["", "", "def", "getUserFriends", "(", ")", ":", "\n", "    ", "f", "=", "open", "(", "userJson", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "\n", "userFriends", "=", "{", "}", "\n", "userID", "=", "0", "\n", "userName2ID", "=", "{", "}", "\n", "# userNameList = []", "\n", "# userIDList = []", "\n", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "\n", "        ", "dic", "=", "json", ".", "loads", "(", "line", ")", "\n", "userStrID", "=", "dic", "[", "'user_id'", "]", ".", "strip", "(", ")", "\n", "if", "dic", "[", "\"friends\"", "]", ":", "\n", "            ", "fList", "=", "list", "(", "map", "(", "str", ".", "strip", ",", "dic", "[", "\"friends\"", "]", ".", "split", "(", "','", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "continue", "\n", "", "userFriends", "[", "userStrID", "]", "=", "fList", "\n", "userName2ID", "[", "userStrID", "]", "=", "userID", "\n", "userID", "+=", "1", "\n", "# userNameList.append(userStrID)", "\n", "# userIDList.append(userID)", "\n", "", "userNum", "=", "len", "(", "userName2ID", ".", "keys", "(", ")", ")", "\n", "trust", "=", "sp", ".", "dok_matrix", "(", "(", "userNum", ",", "userNum", ")", ",", "dtype", "=", "np", ".", "int", ")", "\n", "for", "i", "in", "list", "(", "userName2ID", ".", "keys", "(", ")", ")", ":", "\n", "        ", "userName", "=", "i", "\n", "uid", "=", "userName2ID", "[", "i", "]", "\n", "friends", "=", "userFriends", "[", "userName", "]", "\n", "for", "s", "in", "friends", ":", "\n", "            ", "if", "s", "in", "userName2ID", ":", "\n", "                ", "tid", "=", "userName2ID", "[", "s", "]", "\n", "", "else", ":", "\n", "                ", "continue", "\n", "", "trust", "[", "uid", ",", "tid", "]", "=", "1", "\n", "", "", "trust", "=", "trust", ".", "tocsr", "(", ")", "\n", "with", "open", "(", "\"trust.csv\"", ",", "'wb'", ")", "as", "fs", ":", "\n", "        ", "pickle", ".", "dump", "(", "trust", ",", "fs", ")", "\n", "", "with", "open", "(", "\"userName2ID.csv\"", ",", "'wb'", ")", "as", "fs", ":", "\n", "        ", "pickle", ".", "dump", "(", "userName2ID", ",", "fs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.socialrecsys_smin.Yelp.process.getRatings": [[90, 124], ["len", "len", "scipy.dok_matrix", "scipy.dok_matrix", "open", "open.readlines", "open", "pickle.load", "open", "pickle.load", "pickle.load.keys", "pickle.load.keys", "json.loads", "datetime.datetime.strptime", "time.mktime", "open", "pickle.dump", "open", "pickle.dump", "datetime.datetime.strptime.timetuple", "sp.dok_matrix.tocsr", "sp.dok_matrix.tocsr", "uidStr.strip", "iidStr.strip", "uidStr.strip", "iidStr.strip"], "function", ["None"], ["", "", "def", "getRatings", "(", ")", ":", "\n", "    ", "with", "open", "(", "\"itemName2ID.csv\"", ",", "'rb'", ")", "as", "fs", ":", "\n", "        ", "itemName2ID", "=", "pickle", ".", "load", "(", "fs", ")", "\n", "\n", "", "with", "open", "(", "\"userName2ID.csv\"", ",", "'rb'", ")", "as", "fs", ":", "\n", "        ", "userName2ID", "=", "pickle", ".", "load", "(", "fs", ")", "\n", "", "userNum", "=", "len", "(", "userName2ID", ".", "keys", "(", ")", ")", "\n", "itemNum", "=", "len", "(", "itemName2ID", ".", "keys", "(", ")", ")", "\n", "\n", "ratingMat", "=", "sp", ".", "dok_matrix", "(", "(", "userNum", ",", "itemNum", ")", ",", "dtype", "=", "np", ".", "int", ")", "\n", "timeMat", "=", "sp", ".", "dok_matrix", "(", "(", "userNum", ",", "itemNum", ")", ",", "dtype", "=", "np", ".", "int", ")", "\n", "\n", "f", "=", "open", "(", "ratingJson", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "\n", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "\n", "        ", "dic", "=", "json", ".", "loads", "(", "line", ")", "\n", "# date = datetime.datetime.strptime(dic['date'].split(' ')[0], '%Y-%m-%d %H:%M:%S')", "\n", "tmp_date", "=", "datetime", ".", "datetime", ".", "strptime", "(", "dic", "[", "'date'", "]", ",", "'%Y-%m-%d %H:%M:%S'", ")", "\n", "tmpUTC", "=", "time", ".", "mktime", "(", "tmp_date", ".", "timetuple", "(", ")", ")", "\n", "if", "tmpUTC", ">", "startUTC", "and", "tmpUTC", "<", "endUTC", ":", "\n", "            ", "uidStr", "=", "dic", "[", "'user_id'", "]", "\n", "iidStr", "=", "dic", "[", "'business_id'", "]", "\n", "if", "uidStr", ".", "strip", "(", ")", "in", "userName2ID", "and", "iidStr", ".", "strip", "(", ")", "in", "itemName2ID", ":", "\n", "                ", "uid", "=", "userName2ID", "[", "uidStr", ".", "strip", "(", ")", "]", "\n", "iid", "=", "itemName2ID", "[", "iidStr", ".", "strip", "(", ")", "]", "\n", "rating", "=", "dic", "[", "'stars'", "]", "\n", "# date = datetime.datetime.strptime(dic['date'], '%Y-%m-%d %H:%M:%S')", "\n", "# utc = time.mktime(date.timetuple())", "\n", "ratingMat", "[", "uid", ",", "iid", "]", "=", "rating", "\n", "timeMat", "[", "uid", ",", "iid", "]", "=", "tmpUTC", "\n", "\n", "", "", "", "with", "open", "(", "'ratings.csv'", ",", "'wb'", ")", "as", "fs", ":", "\n", "        ", "pickle", ".", "dump", "(", "ratingMat", ".", "tocsr", "(", ")", ",", "fs", ")", "\n", "", "with", "open", "(", "'time.csv'", ",", "'wb'", ")", "as", "fs", ":", "\n", "        ", "pickle", ".", "dump", "(", "timeMat", ".", "tocsr", "(", ")", ",", "fs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.socialrecsys_smin.Yelp.loadMat.splitData": [[13, 55], ["ratingMat.tocsr.tocsr", "scipy.csc_matrix", "scipy.csc_matrix", "numpy.where", "ratingMat[].toarray", "numpy.where", "random.shuffle", "list", "list", "open", "pickle.dump", "open", "pickle.dump", "len", "sp.csc_matrix.tocsr", "sp.csc_matrix.tocsr", "numpy.sum"], "function", ["None"], ["def", "splitData", "(", "ratingMat", ",", "trustMat", ",", "categoryMat", ")", ":", "\n", "# #\u8fc7\u6ee4\u6389\u6253\u5206\u6570\u5c0f\u4e8e2\u7684user", "\n", "    ", "train_row", ",", "train_col", ",", "train_data", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "test_row", ",", "test_col", ",", "test_data", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "ratingMat", "=", "ratingMat", ".", "tocsr", "(", ")", "\n", "userList", "=", "np", ".", "where", "(", "np", ".", "sum", "(", "ratingMat", "!=", "0", ",", "axis", "=", "1", ")", ">=", "2", ")", "[", "0", "]", "#//np.where\u8fd4\u56de\u7684\u662f\u884c\u7d22\u5f15+\u5217\u7d22\u5f15,\u4e14\u6570\u636e\u7c7b\u578b\u662fnumpy", "\n", "\n", "#\u6839\u636eratingMat\u5212\u5206\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6", "\n", "for", "i", "in", "userList", ":", "\n", "        ", "uid", "=", "i", "\n", "tmp_data", "=", "ratingMat", "[", "i", "]", ".", "toarray", "(", ")", "\n", "\n", "_", ",", "iidList", "=", "np", ".", "where", "(", "tmp_data", "!=", "0", ")", "\n", "random", ".", "shuffle", "(", "iidList", ")", "#\u6253\u4e71\u987a\u5e8f", "\n", "test_num", "=", "1", "\n", "train_num", "=", "len", "(", "iidList", ")", "-", "1", "\n", "\n", "#\u6b63\u6837\u672c\u5212\u5206", "\n", "train_row", "+=", "[", "i", "]", "*", "train_num", "\n", "train_col", "+=", "list", "(", "iidList", "[", ":", "train_num", "]", ")", "\n", "train_data", "+=", "[", "1", "]", "*", "train_num", "\n", "\n", "test_row", "+=", "[", "i", "]", "*", "test_num", "\n", "test_col", "+=", "list", "(", "iidList", "[", "train_num", ":", "]", ")", "\n", "test_data", "+=", "[", "1", "]", "*", "test_num", "\n", "\n", "# #\u8d1f\u6837\u672c\u91c7\u6837", "\n", "# neg_iidList = np.where(np.sum(tmp_data==0))", "\n", "# neg_iidList = random.sample(list(neg_iidList),99)", "\n", "# test_row += i * 99", "\n", "# test_col += neg_iidList", "\n", "\n", "", "train", "=", "sp", ".", "csc_matrix", "(", "(", "train_data", ",", "(", "train_row", ",", "train_col", ")", ")", ",", "shape", "=", "ratingMat", ".", "shape", ")", "\n", "test", "=", "sp", ".", "csc_matrix", "(", "(", "test_data", ",", "(", "test_row", ",", "test_col", ")", ")", ",", "shape", "=", "ratingMat", ".", "shape", ")", "\n", "\n", "# print('train_num = %d, train rate = %.2f'%(train.nnz,train.nnz/ratingMat.nnz))", "\n", "# print('test_num = %d, test rate = %.2f'%(test.nnz,test.nnz/ratingMat.nnz))", "\n", "with", "open", "(", "'./train.csv'", ",", "'wb'", ")", "as", "fs", ":", "\n", "        ", "pickle", ".", "dump", "(", "train", ".", "tocsr", "(", ")", ",", "fs", ")", "\n", "", "with", "open", "(", "'./test.csv'", ",", "'wb'", ")", "as", "fs", ":", "\n", "        ", "pickle", ".", "dump", "(", "test", ".", "tocsr", "(", ")", ",", "fs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.socialrecsys_smin.Yelp.loadMat.filterData": [[56, 94], ["ratingMat.tocsr.tocsr", "trustMat.tocsr.tocsr", "categoryMat.tocsr.tocsr", "numpy.sum", "numpy.sum", "numpy.sum", "open", "pickle.load", "open", "pickle.load", "numpy.sum", "numpy.sum", "numpy.sum", "open", "pickle.dump", "open", "pickle.dump", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.where", "pickle.load.tocsr", "pickle.load.tocsr", "numpy.where", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.where", "numpy.sum", "numpy.sum"], "function", ["None"], ["", "", "def", "filterData", "(", "ratingMat", ",", "trustMat", ",", "categoryMat", ")", ":", "\n", "    ", "with", "open", "(", "'./train.csv'", ",", "'rb'", ")", "as", "fs", ":", "\n", "        ", "train", "=", "pickle", ".", "load", "(", "fs", ")", "\n", "", "with", "open", "(", "'./test.csv'", ",", "'rb'", ")", "as", "fs", ":", "\n", "        ", "test", "=", "pickle", ".", "load", "(", "fs", ")", "\n", "\n", "", "ratingMat", "=", "ratingMat", ".", "tocsr", "(", ")", "\n", "trustMat", "=", "trustMat", ".", "tocsr", "(", ")", "\n", "categoryMat", "=", "categoryMat", ".", "tocsr", "(", ")", "\n", "\n", "a", "=", "np", ".", "sum", "(", "np", ".", "sum", "(", "train", "!=", "0", ",", "axis", "=", "1", ")", "==", "0", ")", "#\u6709\u591a\u5c11\u4e2auser\u6253\u5206\u6570\u4e3a0", "\n", "b", "=", "np", ".", "sum", "(", "np", ".", "sum", "(", "train", "!=", "0", ",", "axis", "=", "0", ")", "==", "0", ")", "#\u6709\u591a\u5c11\u4e2aitem\u6ca1\u6709\u88ab\u7528\u6237\u8bc4\u5206\u8fc7", "\n", "c", "=", "np", ".", "sum", "(", "np", ".", "sum", "(", "trustMat", ",", "axis", "=", "1", ")", "==", "0", ")", "#\u6709\u591a\u5c11\u4e2auser\u6ca1\u6709\u4fe1\u4efb\u7684\u7528\u6237", "\n", "while", "a", "!=", "0", "or", "b", "!=", "0", "or", "c", "!=", "0", ":", "\n", "        ", "if", "a", "!=", "0", ":", "\n", "            ", "idx", ",", "_", "=", "np", ".", "where", "(", "np", ".", "sum", "(", "train", "!=", "0", ",", "axis", "=", "1", ")", "!=", "0", ")", "\n", "train", "=", "train", "[", "idx", "]", "\n", "test", "=", "test", "[", "idx", "]", "\n", "trustMat", "=", "trustMat", "[", "idx", "]", "[", ":", ",", "idx", "]", "\n", "", "elif", "b", "!=", "0", ":", "\n", "            ", "_", ",", "idx", "=", "np", ".", "where", "(", "np", ".", "sum", "(", "train", "!=", "0", ",", "axis", "=", "0", ")", "!=", "0", ")", "\n", "train", "=", "train", "[", ":", ",", "idx", "]", "\n", "test", "=", "test", "[", ":", ",", "idx", "]", "\n", "categoryMat", "=", "categoryMat", "[", "idx", "]", "\n", "", "elif", "c", "!=", "0", ":", "\n", "            ", "idx", ",", "_", "=", "np", ".", "where", "(", "np", ".", "sum", "(", "trustMat", ",", "axis", "=", "1", ")", "!=", "0", ")", "\n", "train", "=", "train", "[", "idx", "]", "\n", "test", "=", "test", "[", "idx", "]", "\n", "trustMat", "=", "trustMat", "[", "idx", "]", "[", ":", ",", "idx", "]", "\n", "", "a", "=", "np", ".", "sum", "(", "np", ".", "sum", "(", "train", "!=", "0", ",", "axis", "=", "1", ")", "==", "0", ")", "\n", "b", "=", "np", ".", "sum", "(", "np", ".", "sum", "(", "train", "!=", "0", ",", "axis", "=", "0", ")", "==", "0", ")", "\n", "c", "=", "np", ".", "sum", "(", "np", ".", "sum", "(", "trustMat", ",", "axis", "=", "1", ")", "==", "0", ")", "\n", "\n", "", "with", "open", "(", "'./train.csv'", ",", "'wb'", ")", "as", "fs", ":", "\n", "        ", "pickle", ".", "dump", "(", "train", ".", "tocsr", "(", ")", ",", "fs", ")", "\n", "", "with", "open", "(", "'./test.csv'", ",", "'wb'", ")", "as", "fs", ":", "\n", "        ", "pickle", ".", "dump", "(", "test", ".", "tocsr", "(", ")", ",", "fs", ")", "\n", "", "return", "ratingMat", ",", "trustMat", ",", "categoryMat", "\n", "\n"]], "home.repos.pwc.inspect_result.socialrecsys_smin.Yelp.loadMat.splitAgain": [[95, 117], ["pickle.load.tolil", "pickle.load.tolil", "open", "pickle.load", "open", "pickle.load", "numpy.where", "train[].toarray", "numpy.where", "random.sample", "open", "pickle.dump", "open", "pickle.dump", "list", "pickle.load.tocsr", "pickle.load.tocsr", "numpy.sum"], "function", ["None"], ["", "def", "splitAgain", "(", "ratingMat", ",", "trustMat", ",", "categoryMat", ")", ":", "\n", "    ", "with", "open", "(", "'./train.csv'", ",", "'rb'", ")", "as", "fs", ":", "\n", "        ", "train", "=", "pickle", ".", "load", "(", "fs", ")", "\n", "", "with", "open", "(", "'./test.csv'", ",", "'rb'", ")", "as", "fs", ":", "\n", "        ", "test", "=", "pickle", ".", "load", "(", "fs", ")", "\n", "\n", "", "train", "=", "train", ".", "tolil", "(", ")", "\n", "test", "=", "test", ".", "tolil", "(", ")", "\n", "\n", "idx", "=", "np", ".", "where", "(", "np", ".", "sum", "(", "test", "!=", "0", ",", "axis", "=", "1", ")", ".", "A", "==", "0", ")", "[", "0", "]", "#A\u662farray,matrix\u8f6c\u6362\u4e3aarray\u683c\u5f0f", "\n", "for", "i", "in", "idx", ":", "\n", "        ", "uid", "=", "i", "#\u8fd9\u4e9buid\u5bf9\u5e94\u7684user\u5212\u5206\u51fa\u7684\u4e00\u4e2a\u6b63\u6837\u672c\u88ab\u8fc7\u6ee4\u6389\u4e86", "\n", "tmp_data", "=", "train", "[", "i", "]", ".", "toarray", "(", ")", "\n", "_", ",", "iidList", "=", "np", ".", "where", "(", "tmp_data", "!=", "0", ")", "\n", "sample_iid", "=", "random", ".", "sample", "(", "list", "(", "iidList", ")", ",", "1", ")", "\n", "test", "[", "uid", ",", "sample_iid", "]", "=", "1", "\n", "train", "[", "uid", ",", "sample_iid", "]", "=", "0", "\n", "\n", "", "with", "open", "(", "'./train.csv'", ",", "'wb'", ")", "as", "fs", ":", "\n", "        ", "pickle", ".", "dump", "(", "train", ".", "tocsr", "(", ")", ",", "fs", ")", "\n", "", "with", "open", "(", "'./test.csv'", ",", "'wb'", ")", "as", "fs", ":", "\n", "        ", "pickle", ".", "dump", "(", "test", ".", "tocsr", "(", ")", ",", "fs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.socialrecsys_smin.Yelp.loadMat.testNegSample": [[118, 142], ["pickle.load.todok", "range", "open", "pickle.load", "open", "pickle.load", "pickle.load.tocoo", "pickle.load.tocoo", "test_data.append", "range", "open", "pickle.dump", "numpy.random.randint", "test_data.append", "numpy.random.randint"], "function", ["None"], ["", "", "def", "testNegSample", "(", "ratingMat", ",", "trustMat", ",", "categoryMat", ")", ":", "\n", "    ", "with", "open", "(", "'./train.csv'", ",", "'rb'", ")", "as", "fs", ":", "\n", "        ", "train", "=", "pickle", ".", "load", "(", "fs", ")", "\n", "", "with", "open", "(", "'./test.csv'", ",", "'rb'", ")", "as", "fs", ":", "\n", "        ", "test", "=", "pickle", ".", "load", "(", "fs", ")", "\n", "\n", "", "train", "=", "train", ".", "todok", "(", ")", "\n", "test_u", "=", "test", ".", "tocoo", "(", ")", ".", "row", "\n", "test_v", "=", "test", ".", "tocoo", "(", ")", ".", "col", "\n", "test_data", "=", "[", "]", "\n", "n", "=", "test_u", ".", "size", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "        ", "u", "=", "test_u", "[", "i", "]", "\n", "v", "=", "test_v", "[", "i", "]", "\n", "test_data", ".", "append", "(", "[", "u", ",", "v", "]", ")", "\n", "#\u8d1f\u91c7\u6837", "\n", "for", "t", "in", "range", "(", "99", ")", ":", "\n", "            ", "j", "=", "np", ".", "random", ".", "randint", "(", "test", ".", "shape", "[", "1", "]", ")", "\n", "while", "(", "u", ",", "j", ")", "in", "train", "or", "j", "==", "v", ":", "\n", "                ", "j", "=", "np", ".", "random", ".", "randint", "(", "test", ".", "shape", "[", "1", "]", ")", "\n", "", "test_data", ".", "append", "(", "[", "u", ",", "j", "]", ")", "\n", "\n", "", "", "with", "open", "(", "'./test_Data.csv'", ",", "'wb'", ")", "as", "fs", ":", "\n", "        ", "pickle", ".", "dump", "(", "test_data", ",", "fs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.socialrecsys_smin.Epinions.loadMat.splitData": [[14, 56], ["ratingMat.tocsr.tocsr", "scipy.csc_matrix", "scipy.csc_matrix", "numpy.where", "ratingMat[].toarray", "numpy.where", "random.shuffle", "list", "list", "open", "pickle.dump", "open", "pickle.dump", "len", "sp.csc_matrix.tocsr", "sp.csc_matrix.tocsr", "numpy.sum"], "function", ["None"], ["# #\u8fc7\u6ee4\u6389\u6253\u5206\u6570\u5c0f\u4e8e2\u7684user", "\n", "    ", "train_row", ",", "train_col", ",", "train_data", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "test_row", ",", "test_col", ",", "test_data", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "ratingMat", "=", "ratingMat", ".", "tocsr", "(", ")", "\n", "userList", "=", "np", ".", "where", "(", "np", ".", "sum", "(", "ratingMat", "!=", "0", ",", "axis", "=", "1", ")", ">=", "2", ")", "[", "0", "]", "#//np.where\u8fd4\u56de\u7684\u662f\u884c\u7d22\u5f15+\u5217\u7d22\u5f15,\u4e14\u6570\u636e\u7c7b\u578b\u662fnumpy", "\n", "\n", "#\u6839\u636eratingMat\u5212\u5206\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6", "\n", "for", "i", "in", "userList", ":", "\n", "        ", "uid", "=", "i", "\n", "tmp_data", "=", "ratingMat", "[", "i", "]", ".", "toarray", "(", ")", "\n", "\n", "_", ",", "iidList", "=", "np", ".", "where", "(", "tmp_data", "!=", "0", ")", "\n", "random", ".", "shuffle", "(", "iidList", ")", "#\u6253\u4e71\u987a\u5e8f", "\n", "test_num", "=", "1", "\n", "train_num", "=", "len", "(", "iidList", ")", "-", "1", "\n", "\n", "#\u6b63\u6837\u672c\u5212\u5206", "\n", "train_row", "+=", "[", "i", "]", "*", "train_num", "\n", "train_col", "+=", "list", "(", "iidList", "[", ":", "train_num", "]", ")", "\n", "train_data", "+=", "[", "1", "]", "*", "train_num", "\n", "\n", "test_row", "+=", "[", "i", "]", "*", "test_num", "\n", "test_col", "+=", "list", "(", "iidList", "[", "train_num", ":", "]", ")", "\n", "test_data", "+=", "[", "1", "]", "*", "test_num", "\n", "\n", "# #\u8d1f\u6837\u672c\u91c7\u6837", "\n", "# neg_iidList = np.where(np.sum(tmp_data==0))", "\n", "# neg_iidList = random.sample(list(neg_iidList),99)", "\n", "# test_row += i * 99", "\n", "# test_col += neg_iidList", "\n", "\n", "", "train", "=", "sp", ".", "csc_matrix", "(", "(", "train_data", ",", "(", "train_row", ",", "train_col", ")", ")", ",", "shape", "=", "ratingMat", ".", "shape", ")", "\n", "test", "=", "sp", ".", "csc_matrix", "(", "(", "test_data", ",", "(", "test_row", ",", "test_col", ")", ")", ",", "shape", "=", "ratingMat", ".", "shape", ")", "\n", "\n", "# print('train_num = %d, train rate = %.2f'%(train.nnz,train.nnz/ratingMat.nnz))", "\n", "# print('test_num = %d, test rate = %.2f'%(test.nnz,test.nnz/ratingMat.nnz))", "\n", "with", "open", "(", "'./train.csv'", ",", "'wb'", ")", "as", "fs", ":", "\n", "        ", "pickle", ".", "dump", "(", "train", ".", "tocsr", "(", ")", ",", "fs", ")", "\n", "", "with", "open", "(", "'./test.csv'", ",", "'wb'", ")", "as", "fs", ":", "\n", "        ", "pickle", ".", "dump", "(", "test", ".", "tocsr", "(", ")", ",", "fs", ")", "\n", "\n", "", "", "def", "filterData", "(", "ratingMat", ",", "trustMat", ",", "categoryMat", ")", ":", "\n"]], "home.repos.pwc.inspect_result.socialrecsys_smin.Epinions.loadMat.filterData": [[57, 95], ["ratingMat.tocsr.tocsr", "trustMat.tocsr.tocsr", "categoryMat.tocsr.tocsr", "numpy.sum", "numpy.sum", "numpy.sum", "open", "pickle.load", "open", "pickle.load", "numpy.sum", "numpy.sum", "numpy.sum", "open", "pickle.dump", "open", "pickle.dump", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.where", "pickle.load.tocsr", "pickle.load.tocsr", "numpy.where", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.where", "numpy.sum", "numpy.sum"], "function", ["None"], ["    ", "with", "open", "(", "'./train.csv'", ",", "'rb'", ")", "as", "fs", ":", "\n", "        ", "train", "=", "pickle", ".", "load", "(", "fs", ")", "\n", "", "with", "open", "(", "'./test.csv'", ",", "'rb'", ")", "as", "fs", ":", "\n", "        ", "test", "=", "pickle", ".", "load", "(", "fs", ")", "\n", "\n", "", "ratingMat", "=", "ratingMat", ".", "tocsr", "(", ")", "\n", "trustMat", "=", "trustMat", ".", "tocsr", "(", ")", "\n", "categoryMat", "=", "categoryMat", ".", "tocsr", "(", ")", "\n", "\n", "a", "=", "np", ".", "sum", "(", "np", ".", "sum", "(", "train", "!=", "0", ",", "axis", "=", "1", ")", "==", "0", ")", "#\u6709\u591a\u5c11\u4e2auser\u6253\u5206\u6570\u4e3a0", "\n", "b", "=", "np", ".", "sum", "(", "np", ".", "sum", "(", "train", "!=", "0", ",", "axis", "=", "0", ")", "==", "0", ")", "#\u6709\u591a\u5c11\u4e2aitem\u6ca1\u6709\u88ab\u7528\u6237\u8bc4\u5206\u8fc7", "\n", "c", "=", "np", ".", "sum", "(", "np", ".", "sum", "(", "trustMat", ",", "axis", "=", "1", ")", "==", "0", ")", "#\u6709\u591a\u5c11\u4e2auser\u6ca1\u6709\u4fe1\u4efb\u7684\u7528\u6237", "\n", "while", "a", "!=", "0", "or", "b", "!=", "0", "or", "c", "!=", "0", ":", "\n", "        ", "if", "a", "!=", "0", ":", "\n", "            ", "idx", ",", "_", "=", "np", ".", "where", "(", "np", ".", "sum", "(", "train", "!=", "0", ",", "axis", "=", "1", ")", "!=", "0", ")", "\n", "train", "=", "train", "[", "idx", "]", "\n", "test", "=", "test", "[", "idx", "]", "\n", "trustMat", "=", "trustMat", "[", "idx", "]", "[", ":", ",", "idx", "]", "\n", "", "elif", "b", "!=", "0", ":", "\n", "            ", "_", ",", "idx", "=", "np", ".", "where", "(", "np", ".", "sum", "(", "train", "!=", "0", ",", "axis", "=", "0", ")", "!=", "0", ")", "\n", "train", "=", "train", "[", ":", ",", "idx", "]", "\n", "test", "=", "test", "[", ":", ",", "idx", "]", "\n", "categoryMat", "=", "categoryMat", "[", "idx", "]", "\n", "", "elif", "c", "!=", "0", ":", "\n", "            ", "idx", ",", "_", "=", "np", ".", "where", "(", "np", ".", "sum", "(", "trustMat", ",", "axis", "=", "1", ")", "!=", "0", ")", "\n", "train", "=", "train", "[", "idx", "]", "\n", "test", "=", "test", "[", "idx", "]", "\n", "trustMat", "=", "trustMat", "[", "idx", "]", "[", ":", ",", "idx", "]", "\n", "", "a", "=", "np", ".", "sum", "(", "np", ".", "sum", "(", "train", "!=", "0", ",", "axis", "=", "1", ")", "==", "0", ")", "\n", "b", "=", "np", ".", "sum", "(", "np", ".", "sum", "(", "train", "!=", "0", ",", "axis", "=", "0", ")", "==", "0", ")", "\n", "c", "=", "np", ".", "sum", "(", "np", ".", "sum", "(", "trustMat", ",", "axis", "=", "1", ")", "==", "0", ")", "\n", "\n", "", "with", "open", "(", "'./train.csv'", ",", "'wb'", ")", "as", "fs", ":", "\n", "        ", "pickle", ".", "dump", "(", "train", ".", "tocsr", "(", ")", ",", "fs", ")", "\n", "", "with", "open", "(", "'./test.csv'", ",", "'wb'", ")", "as", "fs", ":", "\n", "        ", "pickle", ".", "dump", "(", "test", ".", "tocsr", "(", ")", ",", "fs", ")", "\n", "", "return", "ratingMat", ",", "trustMat", ",", "categoryMat", "\n", "\n", "", "def", "splitAgain", "(", "ratingMat", ",", "trustMat", ",", "categoryMat", ")", ":", "\n"]], "home.repos.pwc.inspect_result.socialrecsys_smin.Epinions.loadMat.splitAgain": [[96, 118], ["pickle.load.tolil", "pickle.load.tolil", "open", "pickle.load", "open", "pickle.load", "numpy.where", "train[].toarray", "numpy.where", "random.sample", "open", "pickle.dump", "open", "pickle.dump", "list", "pickle.load.tocsr", "pickle.load.tocsr", "numpy.sum"], "function", ["None"], ["    ", "with", "open", "(", "'./train.csv'", ",", "'rb'", ")", "as", "fs", ":", "\n", "        ", "train", "=", "pickle", ".", "load", "(", "fs", ")", "\n", "", "with", "open", "(", "'./test.csv'", ",", "'rb'", ")", "as", "fs", ":", "\n", "        ", "test", "=", "pickle", ".", "load", "(", "fs", ")", "\n", "\n", "", "train", "=", "train", ".", "tolil", "(", ")", "\n", "test", "=", "test", ".", "tolil", "(", ")", "\n", "\n", "idx", "=", "np", ".", "where", "(", "np", ".", "sum", "(", "test", "!=", "0", ",", "axis", "=", "1", ")", ".", "A", "==", "0", ")", "[", "0", "]", "#A\u662farray,matrix\u8f6c\u6362\u4e3aarray\u683c\u5f0f", "\n", "for", "i", "in", "idx", ":", "\n", "        ", "uid", "=", "i", "#\u8fd9\u4e9buid\u5bf9\u5e94\u7684user\u5212\u5206\u51fa\u7684\u4e00\u4e2a\u6b63\u6837\u672c\u88ab\u8fc7\u6ee4\u6389\u4e86", "\n", "tmp_data", "=", "train", "[", "i", "]", ".", "toarray", "(", ")", "\n", "_", ",", "iidList", "=", "np", ".", "where", "(", "tmp_data", "!=", "0", ")", "\n", "sample_iid", "=", "random", ".", "sample", "(", "list", "(", "iidList", ")", ",", "1", ")", "\n", "test", "[", "uid", ",", "sample_iid", "]", "=", "1", "\n", "train", "[", "uid", ",", "sample_iid", "]", "=", "0", "\n", "\n", "", "with", "open", "(", "'./train.csv'", ",", "'wb'", ")", "as", "fs", ":", "\n", "        ", "pickle", ".", "dump", "(", "train", ".", "tocsr", "(", ")", ",", "fs", ")", "\n", "", "with", "open", "(", "'./test.csv'", ",", "'wb'", ")", "as", "fs", ":", "\n", "        ", "pickle", ".", "dump", "(", "test", ".", "tocsr", "(", ")", ",", "fs", ")", "\n", "\n", "", "", "def", "testNegSample", "(", "ratingMat", ",", "trustMat", ",", "categoryMat", ")", ":", "\n"]], "home.repos.pwc.inspect_result.socialrecsys_smin.Epinions.loadMat.testNegSample": [[119, 143], ["pickle.load.todok", "range", "open", "pickle.load", "open", "pickle.load", "pickle.load.tocoo", "pickle.load.tocoo", "test_data.append", "range", "open", "pickle.dump", "numpy.random.randint", "test_data.append", "numpy.random.randint"], "function", ["None"], ["    ", "with", "open", "(", "'./train.csv'", ",", "'rb'", ")", "as", "fs", ":", "\n", "        ", "train", "=", "pickle", ".", "load", "(", "fs", ")", "\n", "", "with", "open", "(", "'./test.csv'", ",", "'rb'", ")", "as", "fs", ":", "\n", "        ", "test", "=", "pickle", ".", "load", "(", "fs", ")", "\n", "\n", "", "train", "=", "train", ".", "todok", "(", ")", "\n", "test_u", "=", "test", ".", "tocoo", "(", ")", ".", "row", "\n", "test_v", "=", "test", ".", "tocoo", "(", ")", ".", "col", "\n", "test_data", "=", "[", "]", "\n", "n", "=", "test_u", ".", "size", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "        ", "u", "=", "test_u", "[", "i", "]", "\n", "v", "=", "test_v", "[", "i", "]", "\n", "test_data", ".", "append", "(", "[", "u", ",", "v", "]", ")", "\n", "#\u8d1f\u91c7\u6837", "\n", "for", "t", "in", "range", "(", "99", ")", ":", "\n", "            ", "j", "=", "np", ".", "random", ".", "randint", "(", "test", ".", "shape", "[", "1", "]", ")", "\n", "while", "(", "u", ",", "j", ")", "in", "train", "or", "j", "==", "v", ":", "\n", "                ", "j", "=", "np", ".", "random", ".", "randint", "(", "test", ".", "shape", "[", "1", "]", ")", "\n", "", "test_data", ".", "append", "(", "[", "u", ",", "j", "]", ")", "\n", "\n", "", "", "with", "open", "(", "'./test_Data.csv'", ",", "'wb'", ")", "as", "fs", ":", "\n", "        ", "pickle", ".", "dump", "(", "test_data", ",", "fs", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.socialrecsys_smin.Interface.evaluate.hit": [[5, 9], ["None"], "function", ["None"], ["def", "hit", "(", "gt_item", ",", "pred_items", ")", ":", "\n", "\t", "if", "gt_item", "in", "pred_items", ":", "\n", "\t\t", "return", "1", "\n", "", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.socialrecsys_smin.Interface.evaluate.ndcg": [[11, 16], ["pred_items.index", "numpy.reciprocal", "numpy.log2"], "function", ["None"], ["", "def", "ndcg", "(", "gt_item", ",", "pred_items", ")", ":", "\n", "\t", "if", "gt_item", "in", "pred_items", ":", "\n", "\t\t", "index", "=", "pred_items", ".", "index", "(", "gt_item", ")", "\n", "return", "np", ".", "reciprocal", "(", "np", ".", "log2", "(", "index", "+", "2", ")", ")", "\n", "", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.socialrecsys_smin.Interface.evaluate.metrics": [[18, 35], ["user.cuda.cuda", "item.cuda.cuda", "model", "torch.topk", "torch.take().cpu().numpy().tolist", "item[].item", "HR.append", "NDCG.append", "numpy.mean", "numpy.mean", "evaluate.hit", "evaluate.ndcg", "torch.take().cpu().numpy", "torch.take().cpu", "torch.take"], "function", ["home.repos.pwc.inspect_result.socialrecsys_smin.Interface.evaluate.hit", "home.repos.pwc.inspect_result.socialrecsys_smin.Interface.evaluate.ndcg"], ["", "def", "metrics", "(", "model", ",", "test_loader", ",", "top_k", ")", ":", "\n", "\t", "HR", ",", "NDCG", "=", "[", "]", ",", "[", "]", "\n", "\n", "for", "user", ",", "item", ",", "label", "in", "test_loader", ":", "\n", "\t\t", "user", "=", "user", ".", "cuda", "(", ")", "\n", "item", "=", "item", ".", "cuda", "(", ")", "\n", "\n", "predictions", "=", "model", "(", "user", ",", "item", ")", "\n", "_", ",", "indices", "=", "torch", ".", "topk", "(", "predictions", ",", "top_k", ")", "\n", "recommends", "=", "torch", ".", "take", "(", "\n", "item", ",", "indices", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", "\n", "\n", "gt_item", "=", "item", "[", "0", "]", ".", "item", "(", ")", "\n", "HR", ".", "append", "(", "hit", "(", "gt_item", ",", "recommends", ")", ")", "\n", "NDCG", ".", "append", "(", "ndcg", "(", "gt_item", ",", "recommends", ")", ")", "\n", "\n", "", "return", "np", ".", "mean", "(", "HR", ")", ",", "np", ".", "mean", "(", "NDCG", ")", "", "", ""]], "home.repos.pwc.inspect_result.socialrecsys_smin.Interface.dataProcess.splitData": [[11, 86], ["os.path.join", "print", "scipy.csc_matrix", "scipy.csc_matrix", "scipy.csc_matrix", "scipy.csc_matrix", "print", "print", "os.path.dirname", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "numpy.sum", "numpy.sum", "numpy.where", "numpy.argsort().tolist", "tmp_data[].tolist", "tmp_data_time[].tolist", "open", "pickle.dump", "open", "pickle.dump", "open", "pickle.dump", "open", "pickle.dump", "open", "pickle.dump", "open", "pickle.dump", "os.getcwd", "data[].toarray", "numpy.sum", "time[].toarray", "numpy.sum", "numpy.sum", "sp.csc_matrix.tocsr", "sp.csc_matrix.tocsr", "pickle.load.tocsr", "pickle.load.tocsr", "sp.csc_matrix.tocsr", "sp.csc_matrix.tocsr", "numpy.sum", "numpy.argsort", "pickle.load.tocoo", "pickle.load.tocoo", "pickle.load.tocoo", "pickle.load.tocoo"], "function", ["None"], ["def", "splitData", "(", "dataset", ",", "cv", ")", ":", "\n", "    ", "DIR", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "os", ".", "getcwd", "(", ")", ")", ",", "\"dataset\"", ",", "dataset", ")", "\n", "with", "open", "(", "DIR", "+", "\"/category.csv\"", ",", "'rb'", ")", "as", "fs", ":", "\n", "        ", "category", "=", "pickle", ".", "load", "(", "fs", ")", "\n", "", "with", "open", "(", "DIR", "+", "\"/ratings.csv\"", ",", "'rb'", ")", "as", "fs", ":", "\n", "        ", "data", "=", "pickle", ".", "load", "(", "fs", ")", "\n", "", "with", "open", "(", "DIR", "+", "\"/times.csv\"", ",", "'rb'", ")", "as", "fs", ":", "\n", "        ", "time", "=", "pickle", ".", "load", "(", "fs", ")", "\n", "", "with", "open", "(", "DIR", "+", "\"/trust.csv\"", ",", "'rb'", ")", "as", "fs", ":", "\n", "        ", "trust", "=", "pickle", ".", "load", "(", "fs", ")", "\n", "", "assert", "np", ".", "sum", "(", "data", ".", "tocoo", "(", ")", ".", "row", "!=", "time", ".", "tocoo", "(", ")", ".", "row", ")", "==", "0", "\n", "assert", "np", ".", "sum", "(", "data", ".", "tocoo", "(", ")", ".", "col", "!=", "time", ".", "tocoo", "(", ")", ".", "col", ")", "==", "0", "\n", "row", ",", "col", "=", "data", ".", "shape", "\n", "print", "(", "\"user num = %d, item num = %d\"", "%", "(", "row", ",", "col", ")", ")", "\n", "\n", "train_row", ",", "train_col", ",", "train_data", ",", "train_data_time", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "test_row", ",", "test_col", ",", "test_data", ",", "test_data_time", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "userList", "=", "np", ".", "where", "(", "np", ".", "sum", "(", "data", "!=", "0", ",", "axis", "=", "1", ")", ">=", "2", ")", "[", "0", "]", "\n", "for", "i", "in", "userList", ":", "\n", "        ", "tmp_data", "=", "data", "[", "i", "]", ".", "toarray", "(", ")", "[", "0", "]", "\n", "if", "np", ".", "sum", "(", "tmp_data", "!=", "0", ")", "<", "2", ":", "\n", "            ", "continue", "\n", "", "tmp_data_time", "=", "time", "[", "i", "]", ".", "toarray", "(", ")", "[", "0", "]", "\n", "uid", "=", "[", "i", "]", "*", "col", "\n", "num", "=", "data", "[", "i", "]", ".", "nnz", "\n", "#\u964d\u5e8f\u6392\u5e8f", "\n", "idx", "=", "np", ".", "argsort", "(", "-", "tmp_data_time", ")", ".", "tolist", "(", ")", "\n", "idx", "=", "idx", "[", ":", "num", "]", "\n", "rating_data", "=", "tmp_data", "[", "idx", "]", ".", "tolist", "(", ")", "\n", "time_data", "=", "tmp_data_time", "[", "idx", "]", ".", "tolist", "(", ")", "\n", "assert", "np", ".", "sum", "(", "tmp_data", "[", "idx", "]", "==", "0", ")", "==", "0", "\n", "assert", "np", ".", "sum", "(", "tmp_data_time", "[", "idx", "]", "==", "0", ")", "==", "0", "\n", "\n", "test_num", "=", "1", "\n", "train_num", "=", "num", "-", "test_num", "\n", "\n", "test_row", "+=", "uid", "[", "0", ":", "test_num", "]", "\n", "test_col", "+=", "idx", "[", "0", ":", "test_num", "]", "\n", "test_data", "+=", "rating_data", "[", "0", ":", "test_num", "]", "\n", "test_data_time", "+=", "time_data", "[", "0", ":", "test_num", "]", "\n", "assert", "(", "0", "in", "test_data", ")", "==", "False", "\n", "assert", "(", "0", "in", "test_data_time", ")", "==", "False", "\n", "\n", "train_row", "+=", "uid", "[", "0", ":", "train_num", "]", "\n", "train_col", "+=", "idx", "[", "test_num", ":", "]", "\n", "train_data", "+=", "rating_data", "[", "test_num", ":", "]", "\n", "train_data_time", "+=", "time_data", "[", "test_num", ":", "]", "\n", "assert", "(", "0", "in", "train_data", ")", "==", "False", "\n", "assert", "(", "0", "in", "train_data_time", ")", "==", "False", "\n", "\n", "\n", "", "train", "=", "sp", ".", "csc_matrix", "(", "(", "train_data", ",", "(", "train_row", ",", "train_col", ")", ")", ",", "shape", "=", "data", ".", "shape", ")", "\n", "test", "=", "sp", ".", "csc_matrix", "(", "(", "test_data", ",", "(", "test_row", ",", "test_col", ")", ")", ",", "shape", "=", "data", ".", "shape", ")", "\n", "\n", "train_time", "=", "sp", ".", "csc_matrix", "(", "(", "train_data_time", ",", "(", "train_row", ",", "train_col", ")", ")", ",", "shape", "=", "data", ".", "shape", ")", "\n", "test_time", "=", "sp", ".", "csc_matrix", "(", "(", "test_data_time", ",", "(", "test_row", ",", "test_col", ")", ")", ",", "shape", "=", "data", ".", "shape", ")", "\n", "\n", "\n", "print", "(", "\"train num = %d, train rate = %.2f\"", "%", "(", "train", ".", "nnz", ",", "train", ".", "nnz", "/", "data", ".", "nnz", ")", ")", "\n", "print", "(", "\"test num = %d, test rate = %.2f\"", "%", "(", "test", ".", "nnz", ",", "test", ".", "nnz", "/", "data", ".", "nnz", ")", ")", "\n", "\n", "with", "open", "(", "DIR", "+", "\"/implicit/cv{0}/train.csv\"", ".", "format", "(", "cv", ")", ",", "'wb'", ")", "as", "fs", ":", "\n", "        ", "pickle", ".", "dump", "(", "train", ".", "tocsr", "(", ")", ",", "fs", ")", "\n", "", "with", "open", "(", "DIR", "+", "\"/implicit/cv{0}/test.csv\"", ".", "format", "(", "cv", ")", ",", "'wb'", ")", "as", "fs", ":", "\n", "        ", "pickle", ".", "dump", "(", "test", ".", "tocsr", "(", ")", ",", "fs", ")", "\n", "", "with", "open", "(", "DIR", "+", "\"/implicit/cv{0}/trust.csv\"", ".", "format", "(", "cv", ")", ",", "'wb'", ")", "as", "fs", ":", "\n", "        ", "pickle", ".", "dump", "(", "trust", ".", "tocsr", "(", ")", ",", "fs", ")", "\n", "", "with", "open", "(", "DIR", "+", "\"/implicit/cv{0}/categoryMat.csv\"", ".", "format", "(", "cv", ")", ",", "'wb'", ")", "as", "fs", ":", "\n", "        ", "pickle", ".", "dump", "(", "category", ".", "tocsr", "(", ")", ",", "fs", ")", "\n", "\n", "", "with", "open", "(", "DIR", "+", "\"/implicit/cv{0}/train_time.csv\"", ".", "format", "(", "cv", ")", ",", "'wb'", ")", "as", "fs", ":", "\n", "        ", "pickle", ".", "dump", "(", "train_time", ".", "tocsr", "(", ")", ",", "fs", ")", "\n", "", "with", "open", "(", "DIR", "+", "\"/implicit/cv{0}/test_time.csv\"", ".", "format", "(", "cv", ")", ",", "'wb'", ")", "as", "fs", ":", "\n", "        ", "pickle", ".", "dump", "(", "test_time", ".", "tocsr", "(", ")", ",", "fs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.socialrecsys_smin.Interface.dataProcess.filterData": [[87, 153], ["os.path.join", "numpy.sum", "numpy.sum", "numpy.sum", "print", "print", "os.path.dirname", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "pickle.load.transpose", "numpy.sum", "numpy.sum", "numpy.sum", "open", "pickle.dump", "open", "pickle.dump", "open", "pickle.dump", "open", "pickle.dump", "open", "pickle.dump", "open", "pickle.dump", "os.getcwd", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.where", "numpy.where", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.where", "numpy.sum", "numpy.sum"], "function", ["None"], ["", "", "def", "filterData", "(", "dataset", ",", "cv", ")", ":", "\n", "    ", "DIR", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "os", ".", "getcwd", "(", ")", ")", ",", "\"dataset\"", ",", "dataset", ")", "\n", "#filter", "\n", "with", "open", "(", "DIR", "+", "\"/implicit/cv{0}/train.csv\"", ".", "format", "(", "cv", ")", ",", "'rb'", ")", "as", "fs", ":", "\n", "        ", "train", "=", "pickle", ".", "load", "(", "fs", ")", "\n", "", "with", "open", "(", "DIR", "+", "\"/implicit/cv{0}/test.csv\"", ".", "format", "(", "cv", ")", ",", "'rb'", ")", "as", "fs", ":", "\n", "        ", "test", "=", "pickle", ".", "load", "(", "fs", ")", "\n", "", "with", "open", "(", "DIR", "+", "\"/implicit/cv{0}/categoryMat.csv\"", ".", "format", "(", "cv", ")", ",", "'rb'", ")", "as", "fs", ":", "\n", "        ", "category", "=", "pickle", ".", "load", "(", "fs", ")", "\n", "\n", "", "with", "open", "(", "DIR", "+", "\"/implicit/cv{0}/train_time.csv\"", ".", "format", "(", "cv", ")", ",", "'rb'", ")", "as", "fs", ":", "\n", "        ", "train_time", "=", "pickle", ".", "load", "(", "fs", ")", "\n", "", "with", "open", "(", "DIR", "+", "\"/implicit/cv{0}/test_time.csv\"", ".", "format", "(", "cv", ")", ",", "'rb'", ")", "as", "fs", ":", "\n", "        ", "test_time", "=", "pickle", ".", "load", "(", "fs", ")", "\n", "\n", "", "with", "open", "(", "DIR", "+", "\"/implicit/cv{0}/trust.csv\"", ".", "format", "(", "cv", ")", ",", "'rb'", ")", "as", "fs", ":", "\n", "        ", "trust", "=", "pickle", ".", "load", "(", "fs", ")", "\n", "\n", "", "trust", "=", "trust", "+", "trust", ".", "transpose", "(", ")", "\n", "trust", "=", "(", "trust", "!=", "0", ")", "*", "1", "\n", "\n", "a", "=", "np", ".", "sum", "(", "np", ".", "sum", "(", "train", "!=", "0", ",", "axis", "=", "1", ")", "==", "0", ")", "\n", "b", "=", "np", ".", "sum", "(", "np", ".", "sum", "(", "train", "!=", "0", ",", "axis", "=", "0", ")", "==", "0", ")", "\n", "c", "=", "np", ".", "sum", "(", "np", ".", "sum", "(", "trust", ",", "axis", "=", "1", ")", "==", "0", ")", "\n", "while", "a", "!=", "0", "or", "b", "!=", "0", "or", "c", "!=", "0", ":", "\n", "        ", "if", "a", "!=", "0", ":", "\n", "            ", "idx", ",", "_", "=", "np", ".", "where", "(", "np", ".", "sum", "(", "train", "!=", "0", ",", "axis", "=", "1", ")", "!=", "0", ")", "\n", "train", "=", "train", "[", "idx", "]", "\n", "test", "=", "test", "[", "idx", "]", "\n", "train_time", "=", "train_time", "[", "idx", "]", "\n", "test_time", "=", "test_time", "[", "idx", "]", "\n", "trust", "=", "trust", "[", "idx", "]", "[", ":", ",", "idx", "]", "\n", "", "elif", "b", "!=", "0", ":", "\n", "            ", "_", ",", "idx", "=", "np", ".", "where", "(", "np", ".", "sum", "(", "train", "!=", "0", ",", "axis", "=", "0", ")", "!=", "0", ")", "\n", "train", "=", "train", "[", ":", ",", "idx", "]", "\n", "test", "=", "test", "[", ":", ",", "idx", "]", "\n", "train_time", "=", "train_time", "[", ":", ",", "idx", "]", "\n", "test_time", "=", "test_time", "[", ":", ",", "idx", "]", "\n", "category", "=", "category", "[", "idx", "]", "\n", "", "elif", "c", "!=", "0", ":", "\n", "            ", "idx", ",", "_", "=", "np", ".", "where", "(", "np", ".", "sum", "(", "trust", ",", "axis", "=", "1", ")", "!=", "0", ")", "\n", "train", "=", "train", "[", "idx", "]", "\n", "test", "=", "test", "[", "idx", "]", "\n", "train_time", "=", "train_time", "[", "idx", "]", "\n", "test_time", "=", "test_time", "[", "idx", "]", "\n", "trust", "=", "trust", "[", "idx", "]", "[", ":", ",", "idx", "]", "\n", "", "a", "=", "np", ".", "sum", "(", "np", ".", "sum", "(", "train", "!=", "0", ",", "axis", "=", "1", ")", "==", "0", ")", "\n", "b", "=", "np", ".", "sum", "(", "np", ".", "sum", "(", "train", "!=", "0", ",", "axis", "=", "0", ")", "==", "0", ")", "\n", "c", "=", "np", ".", "sum", "(", "np", ".", "sum", "(", "trust", ",", "axis", "=", "1", ")", "==", "0", ")", "\n", "\n", "", "nums", "=", "train", ".", "nnz", "+", "test", ".", "nnz", "\n", "print", "(", "\"train num = %d, train rate = %.2f\"", "%", "(", "train", ".", "nnz", ",", "train", ".", "nnz", "/", "nums", ")", ")", "\n", "print", "(", "\"test num = %d, test rate = %.2f\"", "%", "(", "test", ".", "nnz", ",", "test", ".", "nnz", "/", "nums", ")", ")", "\n", "\n", "with", "open", "(", "DIR", "+", "\"/implicit/cv{0}/train.csv\"", ".", "format", "(", "cv", ")", ",", "'wb'", ")", "as", "fs", ":", "\n", "        ", "pickle", ".", "dump", "(", "train", ",", "fs", ")", "\n", "", "with", "open", "(", "DIR", "+", "\"/implicit/cv{0}/test.csv\"", ".", "format", "(", "cv", ")", ",", "'wb'", ")", "as", "fs", ":", "\n", "        ", "pickle", ".", "dump", "(", "test", ",", "fs", ")", "\n", "", "with", "open", "(", "DIR", "+", "\"/implicit/cv{0}/train_time.csv\"", ".", "format", "(", "cv", ")", ",", "'wb'", ")", "as", "fs", ":", "\n", "        ", "pickle", ".", "dump", "(", "train_time", ",", "fs", ")", "\n", "", "with", "open", "(", "DIR", "+", "\"/implicit/cv{0}/test_time.csv\"", ".", "format", "(", "cv", ")", ",", "'wb'", ")", "as", "fs", ":", "\n", "        ", "pickle", ".", "dump", "(", "test_time", ",", "fs", ")", "\n", "", "with", "open", "(", "DIR", "+", "\"/implicit/cv{0}/trust.csv\"", ".", "format", "(", "cv", ")", ",", "'wb'", ")", "as", "fs", ":", "\n", "        ", "pickle", ".", "dump", "(", "trust", ",", "fs", ")", "\n", "", "with", "open", "(", "DIR", "+", "\"/implicit/cv{0}/categoryMat.csv\"", ".", "format", "(", "cv", ")", ",", "'wb'", ")", "as", "fs", ":", "\n", "        ", "pickle", ".", "dump", "(", "category", ",", "fs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.socialrecsys_smin.Interface.dataProcess.splitAgain": [[154, 204], ["os.path.join", "print", "print", "pickle.load.tolil", "pickle.load.tolil", "pickle.load.tolil", "pickle.load.tolil", "pickle.load.tocsr", "pickle.load.tocsr", "pickle.load.tocsr", "pickle.load.tocsr", "os.path.dirname", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "numpy.where", "numpy.argsort().tolist", "numpy.sum", "numpy.sum", "open", "pickle.dump", "open", "pickle.dump", "open", "pickle.dump", "open", "pickle.dump", "os.getcwd", "train[].toarray", "numpy.sum", "train_time[].toarray", "numpy.argsort", "numpy.sum", "pickle.load.tocoo", "pickle.load.tocoo"], "function", ["None"], ["", "", "def", "splitAgain", "(", "dataset", ",", "cv", ")", ":", "\n", "    ", "DIR", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "os", ".", "getcwd", "(", ")", ")", ",", "\"dataset\"", ",", "dataset", ")", "\n", "with", "open", "(", "DIR", "+", "\"/implicit/cv{0}/train.csv\"", ".", "format", "(", "cv", ")", ",", "'rb'", ")", "as", "fs", ":", "\n", "        ", "train", "=", "pickle", ".", "load", "(", "fs", ")", "\n", "", "with", "open", "(", "DIR", "+", "\"/implicit/cv{0}/test.csv\"", ".", "format", "(", "cv", ")", ",", "'rb'", ")", "as", "fs", ":", "\n", "        ", "test", "=", "pickle", ".", "load", "(", "fs", ")", "\n", "", "print", "(", "train", ".", "nnz", ")", "\n", "print", "(", "test", ".", "nnz", ")", "\n", "\n", "with", "open", "(", "DIR", "+", "\"/implicit/cv{0}/train_time.csv\"", ".", "format", "(", "cv", ")", ",", "'rb'", ")", "as", "fs", ":", "\n", "        ", "train_time", "=", "pickle", ".", "load", "(", "fs", ")", "\n", "", "with", "open", "(", "DIR", "+", "\"/implicit/cv{0}/test_time.csv\"", ".", "format", "(", "cv", ")", ",", "'rb'", ")", "as", "fs", ":", "\n", "        ", "test_time", "=", "pickle", ".", "load", "(", "fs", ")", "\n", "\n", "", "train", "=", "train", ".", "tolil", "(", ")", "\n", "test", "=", "test", ".", "tolil", "(", ")", "\n", "train_time", "=", "train_time", ".", "tolil", "(", ")", "\n", "test_time", "=", "test_time", ".", "tolil", "(", ")", "\n", "\n", "idx", "=", "np", ".", "where", "(", "np", ".", "sum", "(", "test", "!=", "0", ",", "axis", "=", "1", ")", ".", "A", "==", "0", ")", "[", "0", "]", "\n", "for", "i", "in", "idx", ":", "\n", "        ", "uid", "=", "i", "\n", "tmp_data", "=", "train", "[", "i", "]", ".", "toarray", "(", ")", "[", "0", "]", "\n", "if", "np", ".", "sum", "(", "tmp_data", "!=", "0", ")", "<", "2", ":", "\n", "            ", "continue", "\n", "", "num", "=", "train", "[", "i", "]", ".", "nnz", "\n", "tmp_data_time", "=", "train_time", "[", "i", "]", ".", "toarray", "(", ")", "[", "0", "]", "\n", "l", "=", "np", ".", "argsort", "(", "-", "tmp_data_time", ")", ".", "tolist", "(", ")", "\n", "l", "=", "l", "[", ":", "num", "]", "\n", "test", "[", "uid", ",", "l", "[", "0", "]", "]", "=", "train", "[", "uid", ",", "l", "[", "0", "]", "]", "\n", "test_time", "[", "uid", ",", "l", "[", "0", "]", "]", "=", "train_time", "[", "uid", ",", "l", "[", "0", "]", "]", "\n", "train", "[", "uid", ",", "l", "[", "0", "]", "]", "=", "0", "\n", "train_time", "[", "uid", ",", "l", "[", "0", "]", "]", "=", "0", "\n", "\n", "", "train", "=", "train", ".", "tocsr", "(", ")", "\n", "train_time", "=", "train_time", ".", "tocsr", "(", ")", "\n", "test", "=", "test", ".", "tocsr", "(", ")", "\n", "test_time", "=", "test_time", ".", "tocsr", "(", ")", "\n", "assert", "np", ".", "sum", "(", "train", ".", "tocoo", "(", ")", ".", "data", "==", "0", ")", "==", "0", "\n", "assert", "np", ".", "sum", "(", "test", ".", "tocoo", "(", ")", ".", "data", "==", "0", ")", "==", "0", "\n", "assert", "(", "train", "+", "test", ")", ".", "nnz", "==", "train", ".", "nnz", "+", "test", ".", "nnz", "\n", "\n", "with", "open", "(", "DIR", "+", "\"/implicit/cv{0}/train.csv\"", ".", "format", "(", "cv", ")", ",", "'wb'", ")", "as", "fs", ":", "\n", "        ", "pickle", ".", "dump", "(", "train", ",", "fs", ")", "\n", "", "with", "open", "(", "DIR", "+", "\"/implicit/cv{0}/test.csv\"", ".", "format", "(", "cv", ")", ",", "'wb'", ")", "as", "fs", ":", "\n", "        ", "pickle", ".", "dump", "(", "test", ",", "fs", ")", "\n", "", "with", "open", "(", "DIR", "+", "\"/implicit/cv{0}/train_time.csv\"", ".", "format", "(", "cv", ")", ",", "'wb'", ")", "as", "fs", ":", "\n", "        ", "pickle", ".", "dump", "(", "train_time", ",", "fs", ")", "\n", "", "with", "open", "(", "DIR", "+", "\"/implicit/cv{0}/test_time.csv\"", ".", "format", "(", "cv", ")", ",", "'wb'", ")", "as", "fs", ":", "\n", "        ", "pickle", ".", "dump", "(", "test_time", ",", "fs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.socialrecsys_smin.Interface.dataProcess.generateGraph2": [[206, 251], ["os.path.join", "scipy.dok_matrix", "pickle.load.toarray", "range", "ITI_mat.tocsr.tocsr", "os.path.dirname", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "scipy.eye", "scipy.eye", "open", "pickle.dump", "os.getcwd", "numpy.where", "numpy.array", "numpy.random.choice", "itemList2.tolist.tolist", "int", "range", "len"], "function", ["None"], ["", "", "def", "generateGraph2", "(", "dataset", ",", "cv", ")", ":", "\n", "    ", "DIR", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "os", ".", "getcwd", "(", ")", ")", ",", "\"dataset\"", ",", "dataset", ")", "\n", "with", "open", "(", "DIR", "+", "\"/implicit/cv{0}/train.csv\"", ".", "format", "(", "cv", ")", ",", "'rb'", ")", "as", "fs", ":", "\n", "        ", "train", "=", "pickle", ".", "load", "(", "fs", ")", "\n", "", "with", "open", "(", "DIR", "+", "\"/implicit/cv{0}/test.csv\"", ".", "format", "(", "cv", ")", ",", "'rb'", ")", "as", "fs", ":", "\n", "        ", "test", "=", "pickle", ".", "load", "(", "fs", ")", "\n", "", "with", "open", "(", "DIR", "+", "\"/implicit/cv{0}/trust.csv\"", ".", "format", "(", "cv", ")", ",", "'rb'", ")", "as", "fs", ":", "\n", "        ", "trustMat", "=", "pickle", ".", "load", "(", "fs", ")", "\n", "", "with", "open", "(", "DIR", "+", "\"/implicit/cv{0}/categoryMat.csv\"", ".", "format", "(", "cv", ")", ",", "'rb'", ")", "as", "fs", ":", "\n", "        ", "categoryMat", "=", "pickle", ".", "load", "(", "fs", ")", "\n", "", "with", "open", "(", "DIR", "+", "\"/implicit/cv{0}/categoryDict.csv\"", ".", "format", "(", "cv", ")", ",", "'rb'", ")", "as", "fs", ":", "\n", "        ", "categoryDict", "=", "pickle", ".", "load", "(", "fs", ")", "\n", "\n", "", "userNum", ",", "itemNum", "=", "train", ".", "shape", "\n", "assert", "categoryMat", ".", "shape", "[", "0", "]", "==", "train", ".", "shape", "[", "1", "]", "\n", "mat", "=", "(", "trustMat", ".", "T", "+", "trustMat", ")", "+", "sp", ".", "eye", "(", "userNum", ")", "\n", "UU_mat", "=", "(", "mat", "!=", "0", ")", "*", "1", "\n", "\n", "ITI_mat", "=", "sp", ".", "dok_matrix", "(", "(", "itemNum", ",", "itemNum", ")", ")", "\n", "categoryMat", "=", "categoryMat", ".", "toarray", "(", ")", "\n", "for", "i", "in", "range", "(", "categoryMat", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "itemTypeList", "=", "np", ".", "where", "(", "categoryMat", "[", "i", "]", ")", "[", "0", "]", "\n", "for", "itemType", "in", "itemTypeList", ":", "\n", "            ", "itemList", "=", "categoryDict", "[", "itemType", "]", "\n", "itemList", "=", "np", ".", "array", "(", "itemList", ")", "\n", "if", "itemList", ".", "size", "<", "100", ":", "\n", "                ", "rate", "=", "0.1", "\n", "", "elif", "itemList", ".", "size", "<", "1000", ":", "\n", "                ", "rate", "=", "0.01", "\n", "", "else", ":", "\n", "                ", "rate", "=", "0.001", "\n", "", "itemList2", "=", "np", ".", "random", ".", "choice", "(", "itemList", ",", "size", "=", "int", "(", "itemList", ".", "size", "*", "rate", "/", "2", ")", ",", "replace", "=", "False", ")", "\n", "itemList2", "=", "itemList2", ".", "tolist", "(", ")", "\n", "tmp", "=", "[", "i", "for", "_", "in", "range", "(", "len", "(", "itemList2", ")", ")", "]", "\n", "ITI_mat", "[", "tmp", ",", "itemList2", "]", "=", "1", "\n", "\n", "", "", "ITI_mat", "=", "ITI_mat", ".", "tocsr", "(", ")", "\n", "ITI_mat", "=", "ITI_mat", "+", "ITI_mat", ".", "T", "+", "sp", ".", "eye", "(", "itemNum", ")", "\n", "ITI_mat", "=", "(", "ITI_mat", "!=", "0", ")", "*", "1", "\n", "\n", "uu_vv_graph", "=", "{", "}", "\n", "uu_vv_graph", "[", "'UU'", "]", "=", "UU_mat", "\n", "uu_vv_graph", "[", "'II'", "]", "=", "ITI_mat", "\n", "with", "open", "(", "DIR", "+", "'/implicit/cv{0}/uu_vv_graph.pkl'", ".", "format", "(", "cv", ")", ",", "'wb'", ")", "as", "fs", ":", "\n", "        ", "pickle", ".", "dump", "(", "uu_vv_graph", ",", "fs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.socialrecsys_smin.Interface.dataProcess.generateGraph": [[252, 290], ["os.path.join", "scipy.dok_matrix", "pickle.load.toarray().reshape", "range", "ITI_mat.tocsr.tocsr", "os.path.dirname", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "scipy.eye", "numpy.array", "numpy.random.choice", "itemList2.tolist.tolist", "scipy.eye", "open", "pickle.dump", "os.getcwd", "pickle.load.toarray", "int", "range", "len"], "function", ["None"], ["", "", "def", "generateGraph", "(", "dataset", ",", "cv", ")", ":", "\n", "    ", "DIR", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "os", ".", "getcwd", "(", ")", ")", ",", "\"dataset\"", ",", "dataset", ")", "\n", "with", "open", "(", "DIR", "+", "\"/implicit/cv{0}/train.csv\"", ".", "format", "(", "cv", ")", ",", "'rb'", ")", "as", "fs", ":", "\n", "        ", "train", "=", "pickle", ".", "load", "(", "fs", ")", "\n", "", "with", "open", "(", "DIR", "+", "\"/implicit/cv{0}/test.csv\"", ".", "format", "(", "cv", ")", ",", "'rb'", ")", "as", "fs", ":", "\n", "        ", "test", "=", "pickle", ".", "load", "(", "fs", ")", "\n", "", "with", "open", "(", "DIR", "+", "\"/implicit/cv{0}/trust.csv\"", ".", "format", "(", "cv", ")", ",", "'rb'", ")", "as", "fs", ":", "\n", "        ", "trustMat", "=", "pickle", ".", "load", "(", "fs", ")", "\n", "", "with", "open", "(", "DIR", "+", "\"/implicit/cv{0}/categoryMat.csv\"", ".", "format", "(", "cv", ")", ",", "'rb'", ")", "as", "fs", ":", "\n", "        ", "categoryMat", "=", "pickle", ".", "load", "(", "fs", ")", "\n", "", "with", "open", "(", "DIR", "+", "\"/implicit/cv{0}/categoryDict.csv\"", ".", "format", "(", "cv", ")", ",", "'rb'", ")", "as", "fs", ":", "\n", "        ", "categoryDict", "=", "pickle", ".", "load", "(", "fs", ")", "\n", "\n", "", "userNum", ",", "itemNum", "=", "train", ".", "shape", "\n", "assert", "categoryMat", ".", "shape", "[", "0", "]", "==", "train", ".", "shape", "[", "1", "]", "\n", "mat", "=", "(", "trustMat", ".", "T", "+", "trustMat", ")", "+", "sp", ".", "eye", "(", "userNum", ")", "\n", "UU_mat", "=", "(", "mat", "!=", "0", ")", "*", "1", "\n", "\n", "ITI_mat", "=", "sp", ".", "dok_matrix", "(", "(", "itemNum", ",", "itemNum", ")", ")", "\n", "itemTypeList", "=", "categoryMat", ".", "toarray", "(", ")", ".", "reshape", "(", "-", "1", ")", "\n", "for", "i", "in", "range", "(", "itemTypeList", ".", "size", ")", ":", "\n", "        ", "itemType", "=", "itemTypeList", "[", "i", "]", "\n", "itemList", "=", "categoryDict", "[", "itemType", "]", "\n", "itemList", "=", "np", ".", "array", "(", "itemList", ")", "\n", "itemList2", "=", "np", ".", "random", ".", "choice", "(", "itemList", ",", "size", "=", "int", "(", "itemList", ".", "size", "*", "0.001", ")", ",", "replace", "=", "False", ")", "\n", "itemList2", "=", "itemList2", ".", "tolist", "(", ")", "\n", "tmp", "=", "[", "i", "for", "_", "in", "range", "(", "len", "(", "itemList2", ")", ")", "]", "\n", "ITI_mat", "[", "tmp", ",", "itemList2", "]", "=", "1", "\n", "\n", "", "ITI_mat", "=", "ITI_mat", ".", "tocsr", "(", ")", "\n", "ITI_mat", "=", "ITI_mat", "+", "ITI_mat", ".", "T", "+", "sp", ".", "eye", "(", "itemNum", ")", "\n", "ITI_mat", "=", "(", "ITI_mat", "!=", "0", ")", "*", "1", "\n", "\n", "uu_vv_graph", "=", "{", "}", "\n", "uu_vv_graph", "[", "'UU'", "]", "=", "UU_mat", "\n", "uu_vv_graph", "[", "'II'", "]", "=", "ITI_mat", "\n", "with", "open", "(", "DIR", "+", "'/implicit/cv{0}/uu_vv_graph.pkl'", ".", "format", "(", "cv", ",", "'wb'", ")", ")", "as", "fs", ":", "\n", "        ", "pickle", ".", "dump", "(", "uu_vv_graph", ",", "fs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.socialrecsys_smin.Interface.dataProcess.createCategoryDict2": [[292, 315], ["os.path.join", "pickle.load.toarray", "range", "os.path.dirname", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.dump", "os.getcwd", "numpy.where", "categoryDict[].append"], "function", ["None"], ["", "", "def", "createCategoryDict2", "(", "dataset", ",", "cv", ")", ":", "\n", "    ", "DIR", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "os", ".", "getcwd", "(", ")", ")", ",", "\"dataset\"", ",", "dataset", ")", "\n", "with", "open", "(", "DIR", "+", "\"/implicit/cv{0}/train.csv\"", ".", "format", "(", "cv", ")", ",", "'rb'", ")", "as", "fs", ":", "\n", "        ", "train", "=", "pickle", ".", "load", "(", "fs", ")", "\n", "", "with", "open", "(", "DIR", "+", "\"/implicit/cv{0}/test.csv\"", ".", "format", "(", "cv", ")", ",", "'rb'", ")", "as", "fs", ":", "\n", "        ", "test", "=", "pickle", ".", "load", "(", "fs", ")", "\n", "", "with", "open", "(", "DIR", "+", "\"/implicit/cv{0}/categoryMat.csv\"", ".", "format", "(", "cv", ")", ",", "'rb'", ")", "as", "fs", ":", "\n", "        ", "category", "=", "pickle", ".", "load", "(", "fs", ")", "\n", "\n", "", "assert", "category", ".", "shape", "[", "0", "]", "==", "train", ".", "shape", "[", "1", "]", "\n", "categoryDict", "=", "{", "}", "\n", "categoryData", "=", "category", ".", "toarray", "(", ")", "\n", "for", "i", "in", "range", "(", "categoryData", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "iid", "=", "i", "\n", "typeList", "=", "np", ".", "where", "(", "categoryData", "[", "i", "]", ")", "[", "0", "]", "\n", "# typeid = categoryData[i]", "\n", "for", "typeid", "in", "typeList", ":", "\n", "            ", "if", "typeid", "in", "categoryDict", ":", "\n", "                ", "categoryDict", "[", "typeid", "]", ".", "append", "(", "iid", ")", "\n", "", "else", ":", "\n", "                ", "categoryDict", "[", "typeid", "]", "=", "[", "iid", "]", "\n", "", "", "", "with", "open", "(", "DIR", "+", "\"/implicit/cv{0}/categoryDict.csv\"", ".", "format", "(", "cv", ")", ",", "'wb'", ")", "as", "fs", ":", "\n", "        ", "pickle", ".", "dump", "(", "categoryDict", ",", "fs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.socialrecsys_smin.Interface.dataProcess.createCategoryDict": [[316, 337], ["os.path.join", "pickle.load.toarray().reshape", "range", "os.path.dirname", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.dump", "os.getcwd", "pickle.load.toarray", "categoryDict[].append"], "function", ["None"], ["", "", "def", "createCategoryDict", "(", "dataset", ",", "cv", ")", ":", "\n", "    ", "DIR", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "os", ".", "getcwd", "(", ")", ")", ",", "\"dataset\"", ",", "dataset", ")", "\n", "with", "open", "(", "DIR", "+", "\"/implicit/cv{0}/train.csv\"", ".", "format", "(", "cv", ")", ",", "'rb'", ")", "as", "fs", ":", "\n", "        ", "train", "=", "pickle", ".", "load", "(", "fs", ")", "\n", "", "with", "open", "(", "DIR", "+", "\"/implicit/cv{0}/test.csv\"", ".", "format", "(", "cv", ")", ",", "'rb'", ")", "as", "fs", ":", "\n", "        ", "test", "=", "pickle", ".", "load", "(", "fs", ")", "\n", "", "with", "open", "(", "DIR", "+", "\"/implicit/cv{0}/categoryMat.csv\"", ".", "format", "(", "cv", ")", ",", "'rb'", ")", "as", "fs", ":", "\n", "        ", "category", "=", "pickle", ".", "load", "(", "fs", ")", "\n", "\n", "", "assert", "category", ".", "shape", "[", "0", "]", "==", "train", ".", "shape", "[", "1", "]", "\n", "categoryDict", "=", "{", "}", "\n", "categoryData", "=", "category", ".", "toarray", "(", ")", ".", "reshape", "(", "-", "1", ")", "\n", "for", "i", "in", "range", "(", "categoryData", ".", "size", ")", ":", "\n", "        ", "iid", "=", "i", "\n", "typeid", "=", "categoryData", "[", "i", "]", "\n", "if", "typeid", "in", "categoryDict", ":", "\n", "            ", "categoryDict", "[", "typeid", "]", ".", "append", "(", "iid", ")", "\n", "", "else", ":", "\n", "            ", "categoryDict", "[", "typeid", "]", "=", "[", "iid", "]", "\n", "", "", "with", "open", "(", "DIR", "+", "\"/implicit/cv{0}/categoryDict.csv\"", ".", "format", "(", "cv", ")", ",", "'wb'", ")", "as", "fs", ":", "\n", "        ", "pickle", ".", "dump", "(", "categoryDict", ",", "fs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.socialrecsys_smin.Interface.dataProcess.testNegSample": [[338, 364], ["os.path.join", "pickle.load.todok", "range", "os.path.dirname", "open", "pickle.load", "open", "pickle.load", "pickle.load.tocoo", "pickle.load.tocoo", "test_data.append", "range", "open", "pickle.dump", "os.getcwd", "numpy.random.randint", "test_data.append", "numpy.random.randint"], "function", ["None"], ["", "", "def", "testNegSample", "(", "dataset", ",", "cv", ")", ":", "\n", "    ", "DIR", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "os", ".", "getcwd", "(", ")", ")", ",", "\"dataset\"", ",", "dataset", ")", "\n", "#filter", "\n", "with", "open", "(", "DIR", "+", "\"/implicit/cv{0}/train.csv\"", ".", "format", "(", "cv", ")", ",", "'rb'", ")", "as", "fs", ":", "\n", "        ", "train", "=", "pickle", ".", "load", "(", "fs", ")", "\n", "", "with", "open", "(", "DIR", "+", "\"/implicit/cv{0}/test.csv\"", ".", "format", "(", "cv", ")", ",", "'rb'", ")", "as", "fs", ":", "\n", "        ", "test", "=", "pickle", ".", "load", "(", "fs", ")", "\n", "\n", "", "train", "=", "train", ".", "todok", "(", ")", "\n", "test_u", "=", "test", ".", "tocoo", "(", ")", ".", "row", "\n", "test_v", "=", "test", ".", "tocoo", "(", ")", ".", "col", "\n", "assert", "test_u", ".", "size", "==", "test_v", ".", "size", "\n", "n", "=", "test_u", ".", "size", "\n", "test_data", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "        ", "u", "=", "test_u", "[", "i", "]", "\n", "v", "=", "test_v", "[", "i", "]", "\n", "test_data", ".", "append", "(", "[", "u", ",", "v", "]", ")", "\n", "for", "t", "in", "range", "(", "99", ")", ":", "\n", "            ", "j", "=", "np", ".", "random", ".", "randint", "(", "test", ".", "shape", "[", "1", "]", ")", "\n", "while", "(", "u", ",", "j", ")", "in", "train", "or", "j", "==", "v", ":", "\n", "                ", "j", "=", "np", ".", "random", ".", "randint", "(", "test", ".", "shape", "[", "1", "]", ")", "\n", "", "test_data", ".", "append", "(", "[", "u", ",", "j", "]", ")", "\n", "\n", "", "", "with", "open", "(", "DIR", "+", "\"/implicit/cv{0}/test_data.csv\"", ".", "format", "(", "cv", ")", ",", "'wb'", ")", "as", "fs", ":", "\n", "        ", "pickle", ".", "dump", "(", "test_data", ",", "fs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.socialrecsys_smin.Interface.BPRData.BPRData.__init__": [[9, 20], ["torch.Dataset.__init__", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.socialrecsys_smin.MV_MIL.gcn.GCN.__init__"], ["\t", "def", "__init__", "(", "self", ",", "data", ",", "\n", "num_item", ",", "train_mat", "=", "None", ",", "num_ng", "=", "0", ",", "is_training", "=", "None", ")", ":", "\n", "\t\t", "super", "(", "BPRData", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\"\"\" Note that the labels are only useful when training, we thus \n\t\t\tadd them in the ng_sample() function.\n\t\t\"\"\"", "\n", "self", ".", "data", "=", "np", ".", "array", "(", "data", ")", "\n", "self", ".", "num_item", "=", "num_item", "\n", "self", ".", "train_mat", "=", "train_mat", "\n", "self", ".", "num_ng", "=", "num_ng", "\n", "self", ".", "is_training", "=", "is_training", "\n", "\n"]], "home.repos.pwc.inspect_result.socialrecsys_smin.Interface.BPRData.BPRData.ng_sample": [[21, 34], ["BPRData.BPRData.train_mat.todok", "numpy.random.randint", "range", "numpy.random.randint"], "methods", ["None"], ["", "def", "ng_sample", "(", "self", ")", ":", "\n", "\t\t", "assert", "self", ".", "is_training", ",", "'no need to sampling when testing'", "\n", "tmp_trainMat", "=", "self", ".", "train_mat", ".", "todok", "(", ")", "\n", "length", "=", "self", ".", "data", ".", "shape", "[", "0", "]", "\n", "self", ".", "neg_data", "=", "np", ".", "random", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "self", ".", "num_item", ",", "size", "=", "length", ")", "\n", "\n", "for", "i", "in", "range", "(", "length", ")", ":", "\n", "\t\t\t", "uid", "=", "self", ".", "data", "[", "i", "]", "[", "0", "]", "\n", "iid", "=", "self", ".", "neg_data", "[", "i", "]", "\n", "if", "(", "uid", ",", "iid", ")", "in", "tmp_trainMat", ":", "\n", "\t\t\t\t", "while", "(", "uid", ",", "iid", ")", "in", "tmp_trainMat", ":", "\n", "\t\t\t\t\t", "iid", "=", "np", ".", "random", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "self", ".", "num_item", ")", "\n", "", "self", ".", "neg_data", "[", "i", "]", "=", "iid", "\n", "\n"]], "home.repos.pwc.inspect_result.socialrecsys_smin.Interface.BPRData.BPRData.__len__": [[35, 37], ["len"], "methods", ["None"], ["", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "\t\t", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.socialrecsys_smin.Interface.BPRData.BPRData.__getitem__": [[38, 47], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "\t\t", "user", "=", "self", ".", "data", "[", "idx", "]", "[", "0", "]", "\n", "item_i", "=", "self", ".", "data", "[", "idx", "]", "[", "1", "]", "\n", "if", "self", ".", "is_training", ":", "\n", "\t\t\t", "neg_data", "=", "self", ".", "neg_data", "\n", "item_j", "=", "neg_data", "[", "idx", "]", "\n", "return", "user", ",", "item_i", ",", "item_j", "\n", "", "else", ":", "\n", "\t\t\t", "return", "user", ",", "item_i", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.socialrecsys_smin.ToolScripts.Emailer.TitleWriter": [[5, 7], ["None"], "function", ["None"], ["def", "TitleWriter", "(", ")", ":", "\n", "\t", "return", "'\u4eb2\u7231\u7684\u540c\u5fd7'", "\n", "\n"]], "home.repos.pwc.inspect_result.socialrecsys_smin.ToolScripts.Emailer.SendMail": [[8, 28], ["email.mime.text.MIMEText", "email.header.Header", "smtplib.SMTP", "smtplib.SMTP.connect", "smtplib.SMTP.login", "smtplib.SMTP.sendmail", "email.mime.text.MIMEText.as_string", "Emailer.TitleWriter"], "function", ["home.repos.pwc.inspect_result.socialrecsys_smin.ToolScripts.Emailer.TitleWriter"], ["", "def", "SendMail", "(", "message", ",", "subject", "=", "None", ")", ":", "\n", "\t", "if", "subject", "==", "None", ":", "\n", "\t\t", "subject", "=", "'\u5b9e\u9a8c\u8dd1\u5b8c\u4e86'", "\n", "", "subject", "=", "TitleWriter", "(", ")", "+", "'\uff0c'", "+", "subject", "\n", "\n", "sender", "=", "'aka_xia@qq.com'", "\n", "receivers", "=", "[", "'aka_xia@qq.com'", "]", "\n", "message", "=", "MIMEText", "(", "message", ",", "'plain'", ",", "'utf-8'", ")", "\n", "message", "[", "'Subject'", "]", "=", "Header", "(", "subject", ",", "'utf-8'", ")", "\n", "message", "[", "'From'", "]", "=", "'\u667a\u80fd\u5b9e\u9a8c\u7ba1\u7406\u59d4\u5458\u4f1a'", "\n", "message", "[", "'To'", "]", "=", "'\u4eba\u5de5\u5b9e\u9a8c\u5904\u7406\u59d4\u5458\u4f1a'", "\n", "\n", "mail_host", "=", "'smtp.qq.com'", "\n", "mail_user", "=", "'aka_xia@qq.com'", "\n", "mail_pass", "=", "'kpuroslsvybmbbad'", "\n", "\n", "smtpObj", "=", "smtplib", ".", "SMTP", "(", ")", "\n", "smtpObj", ".", "connect", "(", "mail_host", ",", "25", ")", "\n", "smtpObj", ".", "login", "(", "mail_user", ",", "mail_pass", ")", "\n", "smtpObj", ".", "sendmail", "(", "sender", ",", "receivers", ",", "message", ".", "as_string", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.socialrecsys_smin.ToolScripts.tools.showSparseTensor": [[7, 17], ["torch.nonzero", "torch.sum().cpu().numpy", "tensor[].cpu().detach().numpy", "print", "torch.sum().cpu", "tensor[].cpu().detach", "torch.sum", "tensor[].cpu"], "function", ["None"], ["def", "showSparseTensor", "(", "tensor", ")", ":", "\n", "    ", "index", "=", "t", ".", "nonzero", "(", "tensor", ")", "\n", "countArr", "=", "t", ".", "sum", "(", "tensor", "!=", "0", ",", "dim", "=", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "start", "=", "0", "\n", "end", "=", "0", "\n", "tmp", "=", "tensor", "[", "index", "[", ":", ",", "0", "]", ",", "index", "[", ":", ",", "1", "]", "]", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "for", "i", "in", "countArr", ":", "\n", "        ", "start", "=", "end", "\n", "end", "+=", "i", "\n", "print", "(", "tmp", "[", "start", ":", "end", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.socialrecsys_smin.ToolScripts.tools.masked_softmax": [[18, 24], ["torch.exp", "mask.float", "masked_exps.sum"], "function", ["None"], ["", "", "def", "masked_softmax", "(", "vec", ",", "mask", ",", "dim", "=", "1", ",", "epsilon", "=", "1e-6", ")", ":", "\n", "    ", "exps", "=", "t", ".", "exp", "(", "vec", ")", "\n", "masked_exps", "=", "exps", "*", "mask", ".", "float", "(", ")", "\n", "masked_sums", "=", "masked_exps", ".", "sum", "(", "dim", ",", "keepdim", "=", "True", ")", "+", "epsilon", "\n", "ret", "=", "(", "masked_exps", "/", "masked_sums", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.socialrecsys_smin.ToolScripts.tools.list2Str": [[25, 30], ["str", "range", "len", "str"], "function", ["None"], ["", "def", "list2Str", "(", "s", ")", ":", "\n", "    ", "ret", "=", "str", "(", "s", "[", "0", "]", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "s", ")", ")", ":", "\n", "        ", "ret", "=", "ret", "+", "'_'", "+", "str", "(", "s", "[", "i", "]", ")", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.socialrecsys_smin.ToolScripts.tools.sparse_mx_to_torch_sparse_tensor": [[31, 40], ["torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.Size", "torch.Size", "torch.Size", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "type", "sparse_mx.tocoo().astype.tocoo().astype", "numpy.vstack().astype", "sparse_mx.tocoo().astype.tocoo", "numpy.vstack"], "function", ["None"], ["", "def", "sparse_mx_to_torch_sparse_tensor", "(", "sparse_mx", ")", ":", "\n", "    ", "\"\"\"Convert a scipy sparse matrix to a torch sparse tensor.\"\"\"", "\n", "if", "type", "(", "sparse_mx", ")", "!=", "sp", ".", "coo_matrix", ":", "\n", "        ", "sparse_mx", "=", "sparse_mx", ".", "tocoo", "(", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "", "indices", "=", "torch", ".", "from_numpy", "(", "\n", "np", ".", "vstack", "(", "(", "sparse_mx", ".", "row", ",", "sparse_mx", ".", "col", ")", ")", ".", "astype", "(", "np", ".", "int64", ")", ")", "\n", "values", "=", "torch", ".", "from_numpy", "(", "sparse_mx", ".", "data", ")", "\n", "shape", "=", "torch", ".", "Size", "(", "sparse_mx", ".", "shape", ")", "\n", "return", "torch", ".", "sparse", ".", "FloatTensor", "(", "indices", ",", "values", ",", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.socialrecsys_smin.ToolScripts.tools.normalize_adj": [[41, 49], ["scipy.coo_matrix", "numpy.array", "numpy.power().flatten", "scipy.diags", "sp.coo_matrix.dot().transpose().dot().tocoo", "sp.coo_matrix.sum", "numpy.power", "numpy.isinf", "sp.coo_matrix.dot().transpose().dot", "sp.coo_matrix.dot().transpose", "sp.coo_matrix.dot"], "function", ["None"], ["", "def", "normalize_adj", "(", "adj", ")", ":", "\n", "    ", "\"\"\"Symmetrically normalize adjacency matrix.\"\"\"", "\n", "adj", "=", "sp", ".", "coo_matrix", "(", "adj", ")", "\n", "rowsum", "=", "np", ".", "array", "(", "adj", ".", "sum", "(", "1", ")", ")", "\n", "d_inv_sqrt", "=", "np", ".", "power", "(", "rowsum", ",", "-", "0.5", ")", ".", "flatten", "(", ")", "\n", "d_inv_sqrt", "[", "np", ".", "isinf", "(", "d_inv_sqrt", ")", "]", "=", "0.", "\n", "d_mat_inv_sqrt", "=", "sp", ".", "diags", "(", "d_inv_sqrt", ")", "\n", "return", "adj", ".", "dot", "(", "d_mat_inv_sqrt", ")", ".", "transpose", "(", ")", ".", "dot", "(", "d_mat_inv_sqrt", ")", ".", "tocoo", "(", ")", "", "", ""]], "home.repos.pwc.inspect_result.socialrecsys_smin.ToolScripts.diff.diff": [[4, 6], ["os.system"], "function", ["None"], ["def", "diff", "(", "file1", ",", "file2", ")", ":", "\n", "\t", "os", ".", "system", "(", "'powershell;$a=Get-Content '", "+", "file1", "+", "';$b=Get-Content '", "+", "file2", "+", "';diff $a $b'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.socialrecsys_smin.ToolScripts.DataProcessor.RandomShuffle": [[4, 16], ["random.shuffle", "open", "fs.readlines", "arr[].endswith", "open", "fs.write"], "function", ["None"], ["def", "RandomShuffle", "(", "infile", ",", "outfile", ",", "deleteSchema", "=", "False", ")", ":", "\n", "\t", "with", "open", "(", "infile", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "fs", ":", "\n", "\t\t", "arr", "=", "fs", ".", "readlines", "(", ")", "\n", "", "if", "not", "arr", "[", "-", "1", "]", ".", "endswith", "(", "'\\n'", ")", ":", "\n", "\t\t", "arr", "[", "-", "1", "]", "+=", "'\\n'", "\n", "", "if", "deleteSchema", ":", "\n", "\t\t", "arr", "=", "arr", "[", "1", ":", "]", "\n", "", "random", ".", "shuffle", "(", "arr", ")", "\n", "with", "open", "(", "outfile", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "as", "fs", ":", "\n", "\t\t", "for", "line", "in", "arr", ":", "\n", "\t\t\t", "fs", ".", "write", "(", "line", ")", "\n", "", "", "del", "arr", "\n", "\n"]], "home.repos.pwc.inspect_result.socialrecsys_smin.ToolScripts.DataProcessor.SubDataSet": [[17, 32], ["list", "list", "open", "open", "open", "fs.write", "fs.write", "random.random", "list.append", "list.append"], "function", ["None"], ["", "def", "SubDataSet", "(", "infile", ",", "outfile1", ",", "outfile2", ",", "rate", ")", ":", "\n", "\t", "out1", "=", "list", "(", ")", "\n", "out2", "=", "list", "(", ")", "\n", "with", "open", "(", "infile", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "fs", ":", "\n", "\t\t", "for", "line", "in", "fs", ":", "\n", "\t\t\t", "if", "random", ".", "random", "(", ")", "<=", "rate", ":", "\n", "\t\t\t\t", "out1", ".", "append", "(", "line", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "out2", ".", "append", "(", "line", ")", "\n", "", "", "", "with", "open", "(", "outfile1", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "as", "fs", ":", "\n", "\t\t", "for", "line", "in", "out1", ":", "\n", "\t\t\t", "fs", ".", "write", "(", "line", ")", "\n", "", "", "with", "open", "(", "outfile2", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "as", "fs", ":", "\n", "\t\t", "for", "line", "in", "out2", ":", "\n", "\t\t\t", "fs", ".", "write", "(", "line", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.socialrecsys_smin.ToolScripts.DataProcessor.SubDataSet2": [[34, 87], ["list", "list", "list", "list", "list", "print", "print", "print", "print", "print", "print", "open", "open", "open", "open", "open", "open", "random.random", "fs.write", "fs.write", "fs.write", "fs.write", "fs.write", "list.append", "len", "len", "len", "len", "len", "list.append", "list.append", "list.append", "list.append", "print"], "function", ["None"], ["", "", "", "def", "SubDataSet2", "(", "infile", ",", "outfile1", ",", "outfile2", ",", "outfile3", ",", "outfile4", ",", "outfile5", ")", ":", "\n", "\t", "out1", "=", "list", "(", ")", "\n", "out2", "=", "list", "(", ")", "\n", "out3", "=", "list", "(", ")", "\n", "out4", "=", "list", "(", ")", "\n", "out5", "=", "list", "(", ")", "\n", "with", "open", "(", "infile", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "fs", ":", "\n", "\t\t", "for", "line", "in", "fs", ":", "\n", "\t\t\t", "r", "=", "random", ".", "random", "(", ")", "\n", "if", "r", ">=", "0.0", "and", "r", "<", "0.2", ":", "\n", "\t\t\t\t", "out1", ".", "append", "(", "line", ")", "\n", "", "elif", "r", ">=", "0.2", "and", "r", "<", "0.4", ":", "\n", "\t\t\t\t", "out2", ".", "append", "(", "line", ")", "\n", "", "elif", "r", ">=", "0.4", "and", "r", "<", "0.6", ":", "\n", "\t\t\t\t", "out3", ".", "append", "(", "line", ")", "\n", "", "elif", "r", ">=", "0.6", "and", "r", "<", "0.8", ":", "\n", "\t\t\t\t", "out4", ".", "append", "(", "line", ")", "\n", "", "elif", "r", ">=", "0.8", "and", "r", "<", "1.0", ":", "\n", "\t\t\t\t", "out5", ".", "append", "(", "line", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "print", "(", "\"bug\"", ")", "\n", "\n", "", "", "", "print", "(", "\"%d %d %d %d %d\"", "%", "(", "len", "(", "out1", ")", ",", "len", "(", "out2", ")", ",", "len", "(", "out3", ")", ",", "len", "(", "out4", ")", ",", "len", "(", "out5", ")", ")", ")", "\n", "count", "=", "0", "\n", "with", "open", "(", "outfile1", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "as", "fs", ":", "\n", "\t\t", "for", "line", "in", "out1", ":", "\n", "\t\t\t", "count", "+=", "1", "\n", "fs", ".", "write", "(", "line", ")", "\n", "", "", "print", "(", "\"out1 = %d\"", "%", "(", "count", ")", ")", "\n", "count", "=", "0", "\n", "with", "open", "(", "outfile2", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "as", "fs", ":", "\n", "\t\t", "for", "line", "in", "out2", ":", "\n", "\t\t\t", "count", "+=", "1", "\n", "fs", ".", "write", "(", "line", ")", "\n", "", "", "print", "(", "\"out2 = %d\"", "%", "(", "count", ")", ")", "\n", "count", "=", "0", "\n", "with", "open", "(", "outfile3", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "as", "fs", ":", "\n", "\t\t", "for", "line", "in", "out3", ":", "\n", "\t\t\t", "count", "+=", "1", "\n", "fs", ".", "write", "(", "line", ")", "\n", "", "", "print", "(", "\"out3 = %d\"", "%", "(", "count", ")", ")", "\n", "count", "=", "0", "\n", "with", "open", "(", "outfile4", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "as", "fs", ":", "\n", "\t\t", "for", "line", "in", "out4", ":", "\n", "\t\t\t", "count", "+=", "1", "\n", "fs", ".", "write", "(", "line", ")", "\n", "", "", "print", "(", "\"out4 = %d\"", "%", "(", "count", ")", ")", "\n", "count", "=", "0", "\n", "with", "open", "(", "outfile5", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "as", "fs", ":", "\n", "\t\t", "for", "line", "in", "out5", ":", "\n", "\t\t\t", "count", "+=", "1", "\n", "fs", ".", "write", "(", "line", ")", "\n", "", "", "print", "(", "\"out5 = %d\"", "%", "(", "count", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.socialrecsys_smin.ToolScripts.TimeLogger.log": [[6, 20], ["datetime.datetime.now", "print", "print"], "function", ["None"], ["def", "log", "(", "msg", ",", "save", "=", "None", ",", "oneline", "=", "False", ")", ":", "\n", "\t", "global", "logmsg", "\n", "global", "saveDefault", "\n", "time", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "tem", "=", "'%s: %s'", "%", "(", "time", ",", "msg", ")", "\n", "if", "save", "!=", "None", ":", "\n", "\t\t", "if", "save", ":", "\n", "\t\t\t", "logmsg", "+=", "tem", "+", "'\\n'", "\n", "", "", "elif", "saveDefault", ":", "\n", "\t\t", "logmsg", "+=", "tem", "+", "'\\n'", "\n", "", "if", "oneline", ":", "\n", "\t\t", "print", "(", "tem", ",", "end", "=", "'\\r'", ")", "\n", "", "else", ":", "\n", "\t\t", "print", "(", "tem", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.socialrecsys_smin.ToolScripts.TimeLogger.marktime": [[21, 24], ["datetime.datetime.now"], "function", ["None"], ["", "", "def", "marktime", "(", "marker", ")", ":", "\n", "\t", "global", "timemark", "\n", "timemark", "[", "marker", "]", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.socialrecsys_smin.ToolScripts.TimeLogger.SpentTime": [[25, 33], ["print", "datetime.datetime.now"], "function", ["None"], ["", "def", "SpentTime", "(", "marker", ")", ":", "\n", "\t", "global", "timemark", "\n", "if", "marker", "not", "in", "timemark", ":", "\n", "\t\t", "msg", "=", "'LOGGER ERROR, marker'", ",", "marker", ",", "' not found'", "\n", "tem", "=", "'%s: %s'", "%", "(", "time", ",", "msg", ")", "\n", "print", "(", "tem", ")", "\n", "return", "False", "\n", "", "return", "datetime", ".", "datetime", ".", "now", "(", ")", "-", "timemark", "[", "marker", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.socialrecsys_smin.ToolScripts.TimeLogger.SpentTooLong": [[34, 42], ["print", "datetime.timedelta", "datetime.datetime.now"], "function", ["None"], ["", "def", "SpentTooLong", "(", "marker", ",", "day", "=", "0", ",", "hour", "=", "0", ",", "minute", "=", "0", ",", "second", "=", "0", ")", ":", "\n", "\t", "global", "timemark", "\n", "if", "marker", "not", "in", "timemark", ":", "\n", "\t\t", "msg", "=", "'LOGGER ERROR, marker'", ",", "marker", ",", "' not found'", "\n", "tem", "=", "'%s: %s'", "%", "(", "time", ",", "msg", ")", "\n", "print", "(", "tem", ")", "\n", "return", "False", "\n", "", "return", "datetime", ".", "datetime", ".", "now", "(", ")", "-", "timemark", "[", "marker", "]", ">=", "datetime", ".", "timedelta", "(", "days", "=", "day", ",", "hours", "=", "hour", ",", "minutes", "=", "minute", ",", "seconds", "=", "second", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.socialrecsys_smin.ToolScripts.Plotter.SubGraph": [[4, 6], ["int", "str", "str", "str"], "function", ["None"], ["def", "SubGraph", "(", "s1", ",", "s2", ",", "loc", ")", ":", "\n", "\t", "return", "int", "(", "str", "(", "s1", ")", "+", "str", "(", "s2", ")", "+", "str", "(", "loc", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.socialrecsys_smin.ToolScripts.Plotter.PlotOneLine": [[7, 15], ["matplotlib.show", "matplotlib.subplot", "matplotlib.plot", "matplotlib.plot"], "function", ["None"], ["", "def", "PlotOneLine", "(", "x", ",", "y", ",", "color", ",", "subId", "=", "None", ")", ":", "\n", "\t", "if", "subId", "!=", "None", ":", "\n", "\t\t", "ax", "=", "plt", ".", "subplot", "(", "subId", ")", "\n", "", "if", "color", ":", "\n", "\t\t", "plt", ".", "plot", "(", "x", ",", "y", ",", "color", ")", "\n", "", "else", ":", "\n", "\t\t", "plt", ".", "plot", "(", "x", ",", "y", ")", "\n", "", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.socialrecsys_smin.ToolScripts.Plotter.PlotLineChart": [[16, 37], ["matplotlib.figure", "matplotlib.show", "print", "print", "range", "len", "len", "range", "Plotter.SubGraph", "Plotter.PlotOneLine", "print", "Plotter.PlotOneLine", "Plotter.SubGraph", "Plotter.PlotOneLine", "len", "len"], "function", ["home.repos.pwc.inspect_result.socialrecsys_smin.ToolScripts.Plotter.SubGraph", "home.repos.pwc.inspect_result.socialrecsys_smin.ToolScripts.Plotter.PlotOneLine", "home.repos.pwc.inspect_result.socialrecsys_smin.ToolScripts.Plotter.PlotOneLine", "home.repos.pwc.inspect_result.socialrecsys_smin.ToolScripts.Plotter.SubGraph", "home.repos.pwc.inspect_result.socialrecsys_smin.ToolScripts.Plotter.PlotOneLine"], ["", "def", "PlotLineChart", "(", "x", ",", "y", ",", "xName", "=", "''", ",", "yName", "=", "''", ",", "subGraph", "=", "True", ")", ":", "\n", "\t", "if", "x", ".", "shape", "!=", "y", ".", "shape", "or", "len", "(", "x", ".", "shape", ")", ">", "2", ":", "\n", "\t\t", "print", "(", "x", ".", "shape", ",", "y", ".", "shape", ")", "\n", "print", "(", "'Input Data Error for Plotter'", ")", "\n", "return", "\n", "", "plt", ".", "figure", "(", "1", ")", "\n", "if", "subGraph", ":", "\n", "\t\t", "if", "len", "(", "x", ".", "shape", ")", "==", "2", ":", "\n", "\t\t\t", "for", "i", "in", "range", "(", "x", ".", "shape", "[", "0", "]", ")", ":", "\n", "\t\t\t\t", "subId", "=", "SubGraph", "(", "x", ".", "shape", "[", "0", "]", ",", "1", ",", "i", "+", "1", ")", "\n", "PlotOneLine", "(", "x", "[", "i", "]", ",", "y", "[", "i", "]", ",", "subId", ")", "\n", "", "", "else", ":", "\n", "\t\t\t", "subId", "=", "SubGraph", "(", "1", ",", "1", ",", "1", ")", "\n", "PlotOneLine", "(", "x", ",", "y", ",", "subId", ")", "\n", "", "", "else", ":", "\n", "\t\t", "if", "len", "(", "x", ".", "shape", ")", "==", "2", "and", "x", "[", "0", "]", ">", "len", "(", "colors", ")", ":", "\n", "\t\t\t", "print", "(", "'Too Many Curve, Use SubGraph'", ")", "\n", "return", "\n", "", "for", "i", "in", "range", "(", "x", ".", "shape", "[", "0", "]", ")", ":", "\n", "\t\t\t", "PlotOneLine", "(", "x", "[", "i", "]", ",", "y", "[", "i", "]", ",", "colors", "[", "i", "]", ")", "\n", "", "", "plt", ".", "show", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.socialrecsys_smin.ToolScripts.SampleReader.Read": [[3, 13], ["list", "open", "print", "line.strip"], "function", ["None"], ["def", "Read", "(", "filename", ",", "lines", "=", "20", ")", ":", "\n", "\t", "ret", "=", "list", "(", ")", "\n", "with", "open", "(", "filename", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "fs", ":", "\n", "\t\t", "cnt", "=", "0", "\n", "for", "line", "in", "fs", ":", "\n", "\t\t\t", "cnt", "+=", "1", "\n", "print", "(", "line", ".", "strip", "(", ")", ")", "\n", "if", "cnt", ">", "lines", ":", "\n", "\t\t\t\t", "break", "\n", "", "", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.socialrecsys_smin.MV_MIL.graphconv.GraphConv.__init__": [[10, 27], ["torch.nn.Module.__init__", "graphconv.GraphConv.reset_parameters", "torch.nn.Parameter", "graphconv.GraphConv.register_parameter", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.socialrecsys_smin.MV_MIL.gcn.GCN.__init__", "home.repos.pwc.inspect_result.socialrecsys_smin.MV_MIL.graphconv.GraphConv.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "\n", "in_feats", ",", "\n", "out_feats", ",", "\n", "weight", "=", "False", ",", "\n", "activation", "=", "None", ")", ":", "\n", "        ", "super", "(", "GraphConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_in_feats", "=", "in_feats", "\n", "self", ".", "_out_feats", "=", "out_feats", "\n", "self", ".", "_norm", "=", "\"both\"", "\n", "if", "weight", ":", "\n", "            ", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "th", ".", "Tensor", "(", "in_feats", ",", "out_feats", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'weight'", ",", "None", ")", "\n", "\n", "", "self", ".", "reset_parameters", "(", ")", "\n", "\n", "self", ".", "_activation", "=", "activation", "\n", "\n"]], "home.repos.pwc.inspect_result.socialrecsys_smin.MV_MIL.graphconv.GraphConv.reset_parameters": [[28, 32], ["torch.nn.init.xavier_uniform_"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "\"\"\"Reinitialize learnable parameters.\"\"\"", "\n", "if", "self", ".", "weight", "is", "not", "None", ":", "\n", "            ", "init", ".", "xavier_uniform_", "(", "self", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.socialrecsys_smin.MV_MIL.graphconv.GraphConv.forward": [[33, 82], ["graph.local_var.local_var.local_var", "graph.local_var.local_var.out_degrees().to().float().clamp", "torch.pow", "torch.reshape", "graph.local_var.local_var.update_all", "graph.local_var.local_var.update_all", "graph.local_var.local_var.in_degrees().to().float().clamp", "torch.reshape", "graphconv.GraphConv._activation", "dgl.base.DGLError", "torch.matmul", "dgl.copy_src", "dgl.sum", "dgl.copy_src", "dgl.sum", "torch.matmul", "torch.pow", "graph.local_var.local_var.out_degrees().to().float", "graph.local_var.local_var.in_degrees().to().float", "torch.matmul.dim", "torch.matmul.dim", "graph.local_var.local_var.out_degrees().to", "graph.local_var.local_var.in_degrees().to", "graph.local_var.local_var.out_degrees", "graph.local_var.local_var.in_degrees"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "graph", ",", "feat", ",", "weight", "=", "None", ")", ":", "\n", "        ", "graph", "=", "graph", ".", "local_var", "(", ")", "\n", "\n", "if", "self", ".", "_norm", "==", "'both'", ":", "\n", "            ", "degs", "=", "graph", ".", "out_degrees", "(", ")", ".", "to", "(", "feat", ".", "device", ")", ".", "float", "(", ")", ".", "clamp", "(", "min", "=", "1", ")", "\n", "norm", "=", "th", ".", "pow", "(", "degs", ",", "-", "0.5", ")", "\n", "shp", "=", "norm", ".", "shape", "+", "(", "1", ",", ")", "*", "(", "feat", ".", "dim", "(", ")", "-", "1", ")", "\n", "norm", "=", "th", ".", "reshape", "(", "norm", ",", "shp", ")", "\n", "# feat = feat * norm", "\n", "\n", "", "if", "weight", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "weight", "is", "not", "None", ":", "\n", "                ", "raise", "DGLError", "(", "'External weight is provided while at the same time the'", "\n", "' module has defined its own weight parameter. Please'", "\n", "' create the module with flag weight=False.'", ")", "\n", "", "", "else", ":", "\n", "            ", "weight", "=", "self", ".", "weight", "\n", "\n", "", "if", "self", ".", "_in_feats", ">", "self", ".", "_out_feats", ":", "\n", "# mult W first to reduce the feature size for aggregation.", "\n", "            ", "if", "weight", "is", "not", "None", ":", "\n", "                ", "feat", "=", "th", ".", "matmul", "(", "feat", ",", "weight", ")", "\n", "", "feat", "=", "feat", "*", "norm", "\n", "graph", ".", "srcdata", "[", "'h'", "]", "=", "feat", "\n", "graph", ".", "update_all", "(", "fn", ".", "copy_src", "(", "src", "=", "'h'", ",", "out", "=", "'m'", ")", ",", "\n", "fn", ".", "sum", "(", "msg", "=", "'m'", ",", "out", "=", "'h'", ")", ")", "\n", "rst", "=", "graph", ".", "dstdata", "[", "'h'", "]", "\n", "", "else", ":", "\n", "# aggregate first then mult W", "\n", "            ", "graph", ".", "srcdata", "[", "'h'", "]", "=", "feat", "\n", "graph", ".", "update_all", "(", "fn", ".", "copy_src", "(", "src", "=", "'h'", ",", "out", "=", "'m'", ")", ",", "\n", "fn", ".", "sum", "(", "msg", "=", "'m'", ",", "out", "=", "'h'", ")", ")", "\n", "rst", "=", "graph", ".", "dstdata", "[", "'h'", "]", "\n", "if", "weight", "is", "not", "None", ":", "\n", "                ", "rst", "=", "th", ".", "matmul", "(", "rst", ",", "weight", ")", "\n", "\n", "", "", "if", "self", ".", "_norm", "!=", "'none'", ":", "\n", "            ", "degs", "=", "graph", ".", "in_degrees", "(", ")", ".", "to", "(", "feat", ".", "device", ")", ".", "float", "(", ")", ".", "clamp", "(", "min", "=", "1", ")", "\n", "if", "self", ".", "_norm", "==", "'both'", ":", "\n", "                ", "norm", "=", "th", ".", "pow", "(", "degs", ",", "-", "0.5", ")", "\n", "", "else", ":", "\n", "                ", "norm", "=", "1.0", "/", "degs", "\n", "", "shp", "=", "norm", ".", "shape", "+", "(", "1", ",", ")", "*", "(", "feat", ".", "dim", "(", ")", "-", "1", ")", "\n", "norm", "=", "th", ".", "reshape", "(", "norm", ",", "shp", ")", "\n", "rst", "=", "rst", "*", "norm", "\n", "", "if", "self", ".", "_activation", "is", "not", "None", ":", "\n", "            ", "rst", "=", "self", ".", "_activation", "(", "rst", ")", "\n", "\n", "", "return", "rst", "", "", "", ""]], "home.repos.pwc.inspect_result.socialrecsys_smin.MV_MIL.informax.Encoder.__init__": [[13, 17], ["torch.Module.__init__", "MV_MIL.gcn.GCN"], "methods", ["home.repos.pwc.inspect_result.socialrecsys_smin.MV_MIL.gcn.GCN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "g", ",", "in_feats", ",", "n_hidden", ",", "activation", ")", ":", "\n", "        ", "super", "(", "Encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "g", "=", "g", "\n", "self", ".", "conv", "=", "GCN", "(", "g", ",", "in_feats", ",", "n_hidden", ",", "activation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.socialrecsys_smin.MV_MIL.informax.Encoder.forward": [[18, 24], ["informax.Encoder.conv", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "informax.Encoder.g.number_of_nodes"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "features", ",", "corrupt", "=", "False", ")", ":", "\n", "        ", "if", "corrupt", ":", "\n", "            ", "perm", "=", "torch", ".", "randperm", "(", "self", ".", "g", ".", "number_of_nodes", "(", ")", ")", "\n", "features", "=", "features", "[", "perm", "]", "\n", "", "features", "=", "self", ".", "conv", "(", "features", ")", "\n", "return", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.socialrecsys_smin.MV_MIL.informax.Discriminator.__init__": [[27, 32], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.BCEWithLogitsLoss", "torch.BCEWithLogitsLoss", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.empty", "torch.empty", "torch.empty", "torch.empty"], "methods", ["home.repos.pwc.inspect_result.socialrecsys_smin.MV_MIL.gcn.GCN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_hidden", ")", ":", "\n", "        ", "super", "(", "Discriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "#///", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "nn", ".", "init", ".", "xavier_uniform_", "(", "torch", ".", "empty", "(", "n_hidden", ",", "n_hidden", ")", ")", ")", "\n", "self", ".", "loss", "=", "nn", ".", "BCEWithLogitsLoss", "(", "reduction", "=", "'none'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.socialrecsys_smin.MV_MIL.informax.Discriminator.forward": [[33, 41], ["torch.sum", "torch.sum", "torch.sum", "torch.sum", "informax.Discriminator.loss", "informax.Discriminator.loss", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "node_embedding", ",", "graph_embedding", ",", "corrupt", "=", "False", ")", ":", "\n", "        ", "score", "=", "torch", ".", "sum", "(", "node_embedding", "*", "graph_embedding", ",", "dim", "=", "1", ")", "\n", "\n", "if", "corrupt", ":", "#negtive case", "\n", "            ", "res", "=", "self", ".", "loss", "(", "score", ",", "torch", ".", "zeros_like", "(", "score", ")", ")", "\n", "", "else", ":", "#positive case", "\n", "            ", "res", "=", "self", ".", "loss", "(", "score", ",", "torch", ".", "ones_like", "(", "score", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.socialrecsys_smin.MV_MIL.informax.Informax.__init__": [[44, 55], ["torch.Module.__init__", "informax.Encoder", "informax.Discriminator", "torch.Linear", "torch.Linear", "graphAdj.tocoo", "numpy.hstack().tolist", "numpy.array", "torch.MSELoss", "torch.MSELoss", "numpy.hstack", "graphAdj_u.reshape", "graphAdj_v.reshape"], "methods", ["home.repos.pwc.inspect_result.socialrecsys_smin.MV_MIL.gcn.GCN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "g", ",", "n_in", ",", "n_h", ",", "gcnAct", ",", "graphAct", ",", "graphAdj", ")", ":", "\n", "        ", "super", "(", "Informax", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "encoder", "=", "Encoder", "(", "g", ",", "n_in", ",", "n_h", ",", "gcnAct", ")", "\n", "self", ".", "discriminator", "=", "Discriminator", "(", "n_h", ")", "\n", "self", ".", "graphAct", "=", "graphAct", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "n_in", ",", "n_h", ")", "\n", "graphAdj_coo", "=", "graphAdj", ".", "tocoo", "(", ")", "\n", "graphAdj_u", ",", "graphAdj_v", ",", "graphAdj_r", "=", "graphAdj_coo", ".", "row", ",", "graphAdj_coo", ".", "col", ",", "graphAdj_coo", ".", "data", "\n", "self", ".", "graphAdj_data", "=", "np", ".", "hstack", "(", "(", "graphAdj_u", ".", "reshape", "(", "-", "1", ",", "1", ")", ",", "graphAdj_v", ".", "reshape", "(", "-", "1", ",", "1", ")", ")", ")", ".", "tolist", "(", ")", "#//(u,v)list", "\n", "self", ".", "graphAdj_data", "=", "np", ".", "array", "(", "self", ".", "graphAdj_data", ")", "\n", "self", ".", "mse_loss", "=", "nn", ".", "MSELoss", "(", "reduction", "=", "'sum'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.socialrecsys_smin.MV_MIL.informax.Informax.forward": [[56, 76], ["informax.Informax.encoder", "informax.Informax.encoder", "informax.Informax.graphAct", "informax.Informax.discriminator", "informax.Informax.discriminator", "informax.Informax.discriminator", "informax.Informax.discriminator", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "informax.Informax.mse_loss", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "features", ",", "subGraphAdj", ",", "subGraphAdjTensor", ",", "subGraphAdjNorm", ")", ":", "\n", "        ", "positive", "=", "self", ".", "encoder", "(", "features", ",", "corrupt", "=", "False", ")", "\n", "negative", "=", "self", ".", "encoder", "(", "features", ",", "corrupt", "=", "True", ")", "\n", "\n", "#subgraph global embedding", "\n", "#tmp_features = self.fc(features)", "\n", "tmp_features", "=", "features", "\n", "graphEmbeddings", "=", "torch", ".", "sparse", ".", "mm", "(", "subGraphAdjTensor", ",", "tmp_features", ")", "/", "subGraphAdjNorm", "#[n,d]", "\n", "graphEmbeddings", "=", "self", ".", "graphAct", "(", "graphEmbeddings", ")", "\n", "pos_hi_xj_loss", "=", "self", ".", "discriminator", "(", "positive", ",", "graphEmbeddings", ",", "corrupt", "=", "False", ")", "\n", "neg_hi_xj_loss", "=", "self", ".", "discriminator", "(", "negative", ",", "graphEmbeddings", ",", "corrupt", "=", "True", ")", "\n", "\n", "#center nodes", "\n", "pos_hi_xi_loss", "=", "self", ".", "discriminator", "(", "positive", ",", "features", ",", "corrupt", "=", "False", ")", "\n", "neg_hi_xi_loss", "=", "self", ".", "discriminator", "(", "negative", ",", "features", ",", "corrupt", "=", "True", ")", "\n", "#edge reconstrucut", "\n", "tmp", "=", "torch", ".", "sigmoid", "(", "torch", ".", "sum", "(", "positive", "[", "self", ".", "graphAdj_data", "[", ":", ",", "0", "]", "]", "*", "positive", "[", "self", ".", "graphAdj_data", "[", ":", ",", "1", "]", "]", ",", "dim", "=", "1", ")", ")", "\n", "adj_rebuilt", "=", "self", ".", "mse_loss", "(", "tmp", ",", "torch", ".", "ones_like", "(", "tmp", ")", ")", "/", "positive", ".", "shape", "[", "0", "]", "\n", "\n", "return", "pos_hi_xj_loss", ",", "neg_hi_xj_loss", ",", "pos_hi_xi_loss", ",", "neg_hi_xi_loss", ",", "adj_rebuilt", "\n", "", "", ""]], "home.repos.pwc.inspect_result.socialrecsys_smin.MV_MIL.gcn.GCN.__init__": [[10, 18], ["torch.Module.__init__", "MV_MIL.graphconv.GraphConv"], "methods", ["home.repos.pwc.inspect_result.socialrecsys_smin.MV_MIL.gcn.GCN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "g", ",", "\n", "in_feats", ",", "\n", "n_hidden", ",", "\n", "activation", ")", ":", "\n", "        ", "super", "(", "GCN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "g", "=", "g", "\n", "self", ".", "layer", "=", "GraphConv", "(", "in_feats", ",", "n_hidden", ",", "weight", "=", "False", ",", "activation", "=", "activation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.socialrecsys_smin.MV_MIL.gcn.GCN.forward": [[19, 23], ["gcn.GCN.layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "features", ")", ":", "\n", "        ", "h", "=", "features", "\n", "h", "=", "self", ".", "layer", "(", "self", ".", "g", ",", "h", ")", "\n", "return", "h", "\n", "", "", ""]]}