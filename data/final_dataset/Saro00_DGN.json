{"home.repos.pwc.inspect_result.Saro00_DGN.realworld_benchmark.main_molecules.DotDict.__init__": [[20, 23], ["main_molecules.DotDict.update"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwds", ")", ":", "\n", "        ", "self", ".", "update", "(", "kwds", ")", "\n", "self", ".", "__dict__", "=", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.realworld_benchmark.main_molecules.gpu_setup": [[36, 47], ["str", "torch.cuda.is_available", "torch.cuda.is_available", "print", "torch.device", "torch.device", "print", "torch.device", "torch.device", "torch.cuda.get_device_name", "torch.cuda.get_device_name"], "function", ["None"], ["def", "gpu_setup", "(", "use_gpu", ",", "gpu_id", ")", ":", "\n", "    ", "os", ".", "environ", "[", "\"CUDA_DEVICE_ORDER\"", "]", "=", "\"PCI_BUS_ID\"", "\n", "os", ".", "environ", "[", "\"CUDA_VISIBLE_DEVICES\"", "]", "=", "str", "(", "gpu_id", ")", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "use_gpu", ":", "\n", "        ", "print", "(", "'cuda available with GPU:'", ",", "torch", ".", "cuda", ".", "get_device_name", "(", "0", ")", ")", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'cuda not available'", ")", "\n", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", "", "return", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.realworld_benchmark.main_molecules.view_model_param": [[53, 61], ["nets.molecules_graph_regression.dgn_net.DGNNet", "print", "nets.molecules_graph_regression.dgn_net.DGNNet.parameters", "print", "numpy.prod", "list", "param.data.size"], "function", ["None"], ["def", "view_model_param", "(", "net_params", ")", ":", "\n", "    ", "model", "=", "DGNNet", "(", "net_params", ")", "\n", "total_param", "=", "0", "\n", "print", "(", "\"MODEL DETAILS:\\n\"", ")", "\n", "for", "param", "in", "model", ".", "parameters", "(", ")", ":", "\n", "        ", "total_param", "+=", "np", ".", "prod", "(", "list", "(", "param", ".", "data", ".", "size", "(", ")", ")", ")", "\n", "", "print", "(", "'DGN Total parameters:'", ",", "total_param", ")", "\n", "return", "total_param", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.realworld_benchmark.main_molecules.train_val_pipeline": [[68, 157], ["time.time", "random.seed", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "print", "print", "print", "nets.molecules_graph_regression.dgn_net.DGNNet", "model.to.to", "torch.Adam", "torch.lr_scheduler.ReduceLROnPlateau", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "train.train_molecules_graph_regression.evaluate_network", "train.train_molecules_graph_regression.evaluate_network", "train.train_molecules_graph_regression.evaluate_network", "test_mae.item.item", "val_mae.item.item", "train_mae.item.item", "print", "print", "print", "print", "print", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "len", "len", "len", "model.to.parameters", "tqdm.tqdm", "print", "print", "numpy.mean", "range", "t.set_description", "time.time", "train.train_molecules_graph_regression.train_epoch", "train.train_molecules_graph_regression.evaluate_network", "epoch_train_losses.append", "epoch_val_losses.append", "epoch_train_MAEs.append", "epoch_val_MAEs.append", "train.train_molecules_graph_regression.evaluate_network", "t.set_postfix", "per_epoch_time.append", "optim.lr_scheduler.ReduceLROnPlateau.step", "time.time", "epoch_train_mae.detach().cpu().item", "epoch_val_mae.detach().cpu().item", "print", "print", "print", "epoch_train_mae.item", "epoch_val_mae.item", "epoch_test_mae.item", "time.time", "time.time", "epoch_train_mae.detach().cpu", "epoch_val_mae.detach().cpu", "time.time", "epoch_train_mae.detach", "epoch_val_mae.detach"], "function", ["home.repos.pwc.inspect_result.Saro00_DGN.train.train_molecules_graph_regression.evaluate_network", "home.repos.pwc.inspect_result.Saro00_DGN.train.train_molecules_graph_regression.evaluate_network", "home.repos.pwc.inspect_result.Saro00_DGN.train.train_molecules_graph_regression.evaluate_network", "home.repos.pwc.inspect_result.Saro00_DGN.train.train_molecules_graph_regression.train_epoch", "home.repos.pwc.inspect_result.Saro00_DGN.train.train_molecules_graph_regression.evaluate_network", "home.repos.pwc.inspect_result.Saro00_DGN.train.train_molecules_graph_regression.evaluate_network"], ["def", "train_val_pipeline", "(", "dataset", ",", "params", ",", "net_params", ")", ":", "\n", "    ", "t0", "=", "time", ".", "time", "(", ")", "\n", "per_epoch_time", "=", "[", "]", "\n", "trainset", ",", "valset", ",", "testset", "=", "dataset", ".", "train", ",", "dataset", ".", "val", ",", "dataset", ".", "test", "\n", "device", "=", "net_params", "[", "'device'", "]", "\n", "\n", "# setting seeds", "\n", "random", ".", "seed", "(", "params", "[", "'seed'", "]", ")", "\n", "np", ".", "random", ".", "seed", "(", "params", "[", "'seed'", "]", ")", "\n", "torch", ".", "manual_seed", "(", "params", "[", "'seed'", "]", ")", "\n", "if", "device", "==", "'cuda'", ":", "\n", "        ", "torch", ".", "cuda", ".", "manual_seed", "(", "params", "[", "'seed'", "]", ")", "\n", "\n", "", "print", "(", "\"Training Graphs: \"", ",", "len", "(", "trainset", ")", ")", "\n", "print", "(", "\"Validation Graphs: \"", ",", "len", "(", "valset", ")", ")", "\n", "print", "(", "\"Test Graphs: \"", ",", "len", "(", "testset", ")", ")", "\n", "\n", "model", "=", "DGNNet", "(", "net_params", ")", "\n", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "\n", "optimizer", "=", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "params", "[", "'init_lr'", "]", ",", "weight_decay", "=", "params", "[", "'weight_decay'", "]", ")", "\n", "scheduler", "=", "optim", ".", "lr_scheduler", ".", "ReduceLROnPlateau", "(", "optimizer", ",", "mode", "=", "'min'", ",", "\n", "factor", "=", "params", "[", "'lr_reduce_factor'", "]", ",", "\n", "patience", "=", "params", "[", "'lr_schedule_patience'", "]", ")", "\n", "start_epoch", "=", "0", "\n", "\n", "epoch_train_losses", ",", "epoch_val_losses", "=", "[", "]", ",", "[", "]", "\n", "epoch_train_MAEs", ",", "epoch_val_MAEs", "=", "[", "]", ",", "[", "]", "\n", "\n", "train_loader", "=", "DataLoader", "(", "trainset", ",", "batch_size", "=", "params", "[", "'batch_size'", "]", ",", "shuffle", "=", "True", ",", "collate_fn", "=", "dataset", ".", "collate", ")", "\n", "val_loader", "=", "DataLoader", "(", "valset", ",", "batch_size", "=", "params", "[", "'batch_size'", "]", ",", "shuffle", "=", "False", ",", "collate_fn", "=", "dataset", ".", "collate", ")", "\n", "test_loader", "=", "DataLoader", "(", "testset", ",", "batch_size", "=", "params", "[", "'batch_size'", "]", ",", "shuffle", "=", "False", ",", "collate_fn", "=", "dataset", ".", "collate", ")", "\n", "\n", "# At any point you can hit Ctrl + C to break out of training early.", "\n", "try", ":", "\n", "        ", "with", "tqdm", "(", "range", "(", "start_epoch", ",", "params", "[", "'epochs'", "]", ")", ",", "mininterval", "=", "params", "[", "'print_epoch_interval'", "]", ",", "\n", "maxinterval", "=", "None", ",", "unit", "=", "'epoch'", ",", "initial", "=", "start_epoch", ",", "total", "=", "params", "[", "'epochs'", "]", ")", "as", "t", ":", "\n", "            ", "for", "epoch", "in", "t", ":", "\n", "\n", "                ", "t", ".", "set_description", "(", "'Epoch %d'", "%", "epoch", ")", "\n", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "\n", "epoch_train_loss", ",", "epoch_train_mae", ",", "optimizer", "=", "train_epoch", "(", "model", ",", "optimizer", ",", "device", ",", "train_loader", ",", "\n", "epoch", ",", "net_params", "[", "'flip'", "]", ")", "\n", "epoch_val_loss", ",", "epoch_val_mae", "=", "evaluate_network", "(", "model", ",", "device", ",", "val_loader", ",", "epoch", ")", "\n", "\n", "epoch_train_losses", ".", "append", "(", "epoch_train_loss", ")", "\n", "epoch_val_losses", ".", "append", "(", "epoch_val_loss", ")", "\n", "epoch_train_MAEs", ".", "append", "(", "epoch_train_mae", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "item", "(", ")", ")", "\n", "epoch_val_MAEs", ".", "append", "(", "epoch_val_mae", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "item", "(", ")", ")", "\n", "\n", "_", ",", "epoch_test_mae", "=", "evaluate_network", "(", "model", ",", "device", ",", "test_loader", ",", "epoch", ")", "\n", "t", ".", "set_postfix", "(", "time", "=", "time", ".", "time", "(", ")", "-", "start", ",", "lr", "=", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ",", "\n", "train_loss", "=", "epoch_train_loss", ",", "val_loss", "=", "epoch_val_loss", ",", "\n", "train_MAE", "=", "epoch_train_mae", ".", "item", "(", ")", ",", "val_MAE", "=", "epoch_val_mae", ".", "item", "(", ")", ",", "\n", "test_MAE", "=", "epoch_test_mae", ".", "item", "(", ")", ",", "refresh", "=", "False", ")", "\n", "\n", "per_epoch_time", ".", "append", "(", "time", ".", "time", "(", ")", "-", "start", ")", "\n", "\n", "scheduler", ".", "step", "(", "epoch_val_loss", ")", "\n", "\n", "if", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "<", "params", "[", "'min_lr'", "]", ":", "\n", "                    ", "print", "(", "\"\\n!! LR EQUAL TO MIN LR SET.\"", ")", "\n", "break", "\n", "\n", "# Stop training after params['max_time'] hours", "\n", "", "if", "time", ".", "time", "(", ")", "-", "t0", ">", "params", "[", "'max_time'", "]", "*", "3600", ":", "\n", "                    ", "print", "(", "'-'", "*", "89", ")", "\n", "print", "(", "\"Max_time for training elapsed {:.2f} hours, so stopping\"", ".", "format", "(", "params", "[", "'max_time'", "]", ")", ")", "\n", "break", "\n", "\n", "", "", "", "", "except", "KeyboardInterrupt", ":", "\n", "        ", "print", "(", "'-'", "*", "89", ")", "\n", "print", "(", "'Exiting from training early because of KeyboardInterrupt'", ")", "\n", "\n", "", "_", ",", "test_mae", "=", "evaluate_network", "(", "model", ",", "device", ",", "test_loader", ",", "epoch", ")", "\n", "_", ",", "val_mae", "=", "evaluate_network", "(", "model", ",", "device", ",", "val_loader", ",", "epoch", ")", "\n", "_", ",", "train_mae", "=", "evaluate_network", "(", "model", ",", "device", ",", "train_loader", ",", "epoch", ")", "\n", "\n", "test_mae", "=", "test_mae", ".", "item", "(", ")", "\n", "val_mae", "=", "val_mae", ".", "item", "(", ")", "\n", "train_mae", "=", "train_mae", ".", "item", "(", ")", "\n", "\n", "print", "(", "\"Train MAE: {:.4f}\"", ".", "format", "(", "train_mae", ")", ")", "\n", "print", "(", "\"Val MAE: {:.4f}\"", ".", "format", "(", "val_mae", ")", ")", "\n", "print", "(", "\"Test MAE: {:.4f}\"", ".", "format", "(", "test_mae", ")", ")", "\n", "print", "(", "\"TOTAL TIME TAKEN: {:.4f}s\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "t0", ")", ")", "\n", "print", "(", "\"AVG TIME PER EPOCH: {:.4f}s\"", ".", "format", "(", "np", ".", "mean", "(", "per_epoch_time", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.realworld_benchmark.main_molecules.main": [[159, 308], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "main_molecules.gpu_setup", "data.molecules.MoleculeDataset", "torch.cat", "torch.cat", "dict", "main_molecules.view_model_param", "main_molecules.train_val_pipeline", "open", "json.load", "int", "int", "int", "int", "float", "float", "int", "float", "float", "int", "float", "int", "int", "int", "float", "float", "int", "torch.sparse.sum().to_dense", "torch.sparse.sum().to_dense", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.log", "torch.log", "torch.sparse.sum", "torch.sparse.sum", "torch.exp", "torch.exp", "g.adjacency_matrix", "torch.div", "torch.div"], "function", ["home.repos.pwc.inspect_result.Saro00_DGN.realworld_benchmark.main_superpixels.gpu_setup", "home.repos.pwc.inspect_result.Saro00_DGN.realworld_benchmark.main_superpixels.view_model_param", "home.repos.pwc.inspect_result.Saro00_DGN.realworld_benchmark.main_superpixels.train_val_pipeline"], ["", "def", "main", "(", ")", ":", "\n", "    ", "\"\"\"\n        USER CONTROLS\n    \"\"\"", "\n", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--config'", ",", "help", "=", "\"Please give a config.json file with training/model/data/param details\"", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu_id'", ",", "help", "=", "\"Please give a value for gpu id\"", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "help", "=", "\"Please give a value for dataset name\"", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "help", "=", "\"Please give a value for seed\"", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "help", "=", "\"Please give a value for epochs\"", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "help", "=", "\"Please give a value for batch_size\"", ")", "\n", "parser", ".", "add_argument", "(", "'--init_lr'", ",", "help", "=", "\"Please give a value for init_lr\"", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_reduce_factor'", ",", "help", "=", "\"Please give a value for lr_reduce_factor\"", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_schedule_patience'", ",", "help", "=", "\"Please give a value for lr_schedule_patience\"", ")", "\n", "parser", ".", "add_argument", "(", "'--min_lr'", ",", "help", "=", "\"Please give a value for min_lr\"", ")", "\n", "parser", ".", "add_argument", "(", "'--weight_decay'", ",", "help", "=", "\"Please give a value for weight_decay\"", ")", "\n", "parser", ".", "add_argument", "(", "'--print_epoch_interval'", ",", "help", "=", "\"Please give a value for print_epoch_interval\"", ")", "\n", "parser", ".", "add_argument", "(", "'--L'", ",", "help", "=", "\"Please give a value for L\"", ")", "\n", "parser", ".", "add_argument", "(", "'--hidden_dim'", ",", "help", "=", "\"Please give a value for hidden_dim\"", ")", "\n", "parser", ".", "add_argument", "(", "'--out_dim'", ",", "help", "=", "\"Please give a value for out_dim\"", ")", "\n", "parser", ".", "add_argument", "(", "'--residual'", ",", "help", "=", "\"Please give a value for residual\"", ")", "\n", "parser", ".", "add_argument", "(", "'--edge_feat'", ",", "help", "=", "\"Please give a value for edge_feat\"", ")", "\n", "parser", ".", "add_argument", "(", "'--readout'", ",", "help", "=", "\"Please give a value for readout\"", ")", "\n", "parser", ".", "add_argument", "(", "'--in_feat_dropout'", ",", "help", "=", "\"Please give a value for in_feat_dropout\"", ")", "\n", "parser", ".", "add_argument", "(", "'--dropout'", ",", "help", "=", "\"Please give a value for dropout\"", ")", "\n", "parser", ".", "add_argument", "(", "'--graph_norm'", ",", "help", "=", "\"Please give a value for graph_norm\"", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_norm'", ",", "help", "=", "\"Please give a value for batch_norm\"", ")", "\n", "parser", ".", "add_argument", "(", "'--max_time'", ",", "help", "=", "\"Please give a value for max_time\"", ")", "\n", "parser", ".", "add_argument", "(", "'--expid'", ",", "help", "=", "'Experiment id.'", ")", "\n", "parser", ".", "add_argument", "(", "'--type_net'", ",", "default", "=", "'simple'", ",", "help", "=", "'Type of net'", ")", "\n", "parser", ".", "add_argument", "(", "'--lap_norm'", ",", "default", "=", "'none'", ",", "help", "=", "'Laplacian normalisation'", ")", "\n", "parser", ".", "add_argument", "(", "'--flip'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "help", "=", "'Flip eig each epoch'", ")", "\n", "\n", "\n", "# dgn params", "\n", "parser", ".", "add_argument", "(", "'--aggregators'", ",", "type", "=", "str", ",", "help", "=", "'Aggregators to use.'", ")", "\n", "parser", ".", "add_argument", "(", "'--scalers'", ",", "type", "=", "str", ",", "help", "=", "'Scalers to use.'", ")", "\n", "parser", ".", "add_argument", "(", "'--towers'", ",", "type", "=", "int", ",", "default", "=", "5", ",", "help", "=", "'Towers to use.'", ")", "\n", "parser", ".", "add_argument", "(", "'--divide_input_first'", ",", "type", "=", "bool", ",", "help", "=", "'Whether to divide the input in first layer.'", ")", "\n", "parser", ".", "add_argument", "(", "'--divide_input_last'", ",", "type", "=", "bool", ",", "help", "=", "'Whether to divide the input in last layers.'", ")", "\n", "parser", ".", "add_argument", "(", "'--edge_dim'", ",", "type", "=", "int", ",", "help", "=", "'Size of edge embeddings.'", ")", "\n", "parser", ".", "add_argument", "(", "'--pretrans_layers'", ",", "type", "=", "int", ",", "help", "=", "'pretrans_layers.'", ")", "\n", "parser", ".", "add_argument", "(", "'--posttrans_layers'", ",", "type", "=", "int", ",", "help", "=", "'posttrans_layers.'", ")", "\n", "parser", ".", "add_argument", "(", "'--pos_enc_dim'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "help", "=", "'Positional encoding dimension'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "with", "open", "(", "args", ".", "config", ")", "as", "f", ":", "\n", "        ", "config", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "# device", "\n", "", "if", "args", ".", "gpu_id", "is", "not", "None", ":", "\n", "        ", "config", "[", "'gpu'", "]", "[", "'id'", "]", "=", "int", "(", "args", ".", "gpu_id", ")", "\n", "config", "[", "'gpu'", "]", "[", "'use'", "]", "=", "True", "\n", "", "device", "=", "gpu_setup", "(", "config", "[", "'gpu'", "]", "[", "'use'", "]", ",", "config", "[", "'gpu'", "]", "[", "'id'", "]", ")", "\n", "\n", "# dataset", "\n", "if", "args", ".", "dataset", "is", "not", "None", ":", "\n", "        ", "DATASET_NAME", "=", "args", ".", "dataset", "\n", "", "else", ":", "\n", "        ", "DATASET_NAME", "=", "config", "[", "'dataset'", "]", "\n", "\n", "", "dataset", "=", "MoleculeDataset", "(", "DATASET_NAME", ",", "pos_enc_dim", "=", "int", "(", "args", ".", "pos_enc_dim", ")", ",", "norm", "=", "args", ".", "lap_norm", ")", "\n", "\n", "# parameters", "\n", "params", "=", "config", "[", "'params'", "]", "\n", "if", "args", ".", "seed", "is", "not", "None", ":", "\n", "        ", "params", "[", "'seed'", "]", "=", "int", "(", "args", ".", "seed", ")", "\n", "", "if", "args", ".", "epochs", "is", "not", "None", ":", "\n", "        ", "params", "[", "'epochs'", "]", "=", "int", "(", "args", ".", "epochs", ")", "\n", "", "if", "args", ".", "batch_size", "is", "not", "None", ":", "\n", "        ", "params", "[", "'batch_size'", "]", "=", "int", "(", "args", ".", "batch_size", ")", "\n", "", "if", "args", ".", "init_lr", "is", "not", "None", ":", "\n", "        ", "params", "[", "'init_lr'", "]", "=", "float", "(", "args", ".", "init_lr", ")", "\n", "", "if", "args", ".", "lr_reduce_factor", "is", "not", "None", ":", "\n", "        ", "params", "[", "'lr_reduce_factor'", "]", "=", "float", "(", "args", ".", "lr_reduce_factor", ")", "\n", "", "if", "args", ".", "lr_schedule_patience", "is", "not", "None", ":", "\n", "        ", "params", "[", "'lr_schedule_patience'", "]", "=", "int", "(", "args", ".", "lr_schedule_patience", ")", "\n", "", "if", "args", ".", "min_lr", "is", "not", "None", ":", "\n", "        ", "params", "[", "'min_lr'", "]", "=", "float", "(", "args", ".", "min_lr", ")", "\n", "", "if", "args", ".", "weight_decay", "is", "not", "None", ":", "\n", "        ", "params", "[", "'weight_decay'", "]", "=", "float", "(", "args", ".", "weight_decay", ")", "\n", "", "if", "args", ".", "print_epoch_interval", "is", "not", "None", ":", "\n", "        ", "params", "[", "'print_epoch_interval'", "]", "=", "int", "(", "args", ".", "print_epoch_interval", ")", "\n", "", "if", "args", ".", "max_time", "is", "not", "None", ":", "\n", "        ", "params", "[", "'max_time'", "]", "=", "float", "(", "args", ".", "max_time", ")", "\n", "\n", "# network parameters", "\n", "", "net_params", "=", "config", "[", "'net_params'", "]", "\n", "net_params", "[", "'device'", "]", "=", "device", "\n", "net_params", "[", "'gpu_id'", "]", "=", "config", "[", "'gpu'", "]", "[", "'id'", "]", "\n", "net_params", "[", "'batch_size'", "]", "=", "params", "[", "'batch_size'", "]", "\n", "if", "args", ".", "L", "is", "not", "None", ":", "\n", "        ", "net_params", "[", "'L'", "]", "=", "int", "(", "args", ".", "L", ")", "\n", "", "if", "args", ".", "hidden_dim", "is", "not", "None", ":", "\n", "        ", "net_params", "[", "'hidden_dim'", "]", "=", "int", "(", "args", ".", "hidden_dim", ")", "\n", "", "if", "args", ".", "out_dim", "is", "not", "None", ":", "\n", "        ", "net_params", "[", "'out_dim'", "]", "=", "int", "(", "args", ".", "out_dim", ")", "\n", "", "if", "args", ".", "residual", "is", "not", "None", ":", "\n", "        ", "net_params", "[", "'residual'", "]", "=", "True", "if", "args", ".", "residual", "==", "'True'", "else", "False", "\n", "", "if", "args", ".", "edge_feat", "is", "not", "None", ":", "\n", "        ", "net_params", "[", "'edge_feat'", "]", "=", "True", "if", "args", ".", "edge_feat", "==", "'True'", "else", "False", "\n", "", "if", "args", ".", "readout", "is", "not", "None", ":", "\n", "        ", "net_params", "[", "'readout'", "]", "=", "args", ".", "readout", "\n", "", "if", "args", ".", "in_feat_dropout", "is", "not", "None", ":", "\n", "        ", "net_params", "[", "'in_feat_dropout'", "]", "=", "float", "(", "args", ".", "in_feat_dropout", ")", "\n", "", "if", "args", ".", "dropout", "is", "not", "None", ":", "\n", "        ", "net_params", "[", "'dropout'", "]", "=", "float", "(", "args", ".", "dropout", ")", "\n", "", "if", "args", ".", "graph_norm", "is", "not", "None", ":", "\n", "        ", "net_params", "[", "'graph_norm'", "]", "=", "True", "if", "args", ".", "graph_norm", "==", "'True'", "else", "False", "\n", "", "if", "args", ".", "batch_norm", "is", "not", "None", ":", "\n", "        ", "net_params", "[", "'batch_norm'", "]", "=", "True", "if", "args", ".", "batch_norm", "==", "'True'", "else", "False", "\n", "", "if", "args", ".", "aggregators", "is", "not", "None", ":", "\n", "        ", "net_params", "[", "'aggregators'", "]", "=", "args", ".", "aggregators", "\n", "", "if", "args", ".", "scalers", "is", "not", "None", ":", "\n", "        ", "net_params", "[", "'scalers'", "]", "=", "args", ".", "scalers", "\n", "", "if", "args", ".", "towers", "is", "not", "None", ":", "\n", "        ", "net_params", "[", "'towers'", "]", "=", "args", ".", "towers", "\n", "", "if", "args", ".", "divide_input_first", "is", "not", "None", ":", "\n", "        ", "net_params", "[", "'divide_input_first'", "]", "=", "args", ".", "divide_input_first", "\n", "", "if", "args", ".", "divide_input_last", "is", "not", "None", ":", "\n", "        ", "net_params", "[", "'divide_input_last'", "]", "=", "args", ".", "divide_input_last", "\n", "", "if", "args", ".", "edge_dim", "is", "not", "None", ":", "\n", "        ", "net_params", "[", "'edge_dim'", "]", "=", "args", ".", "edge_dim", "\n", "", "if", "args", ".", "pretrans_layers", "is", "not", "None", ":", "\n", "        ", "net_params", "[", "'pretrans_layers'", "]", "=", "args", ".", "pretrans_layers", "\n", "", "if", "args", ".", "posttrans_layers", "is", "not", "None", ":", "\n", "        ", "net_params", "[", "'posttrans_layers'", "]", "=", "args", ".", "posttrans_layers", "\n", "", "if", "args", ".", "type_net", "is", "not", "None", ":", "\n", "        ", "net_params", "[", "'type_net'", "]", "=", "args", ".", "type_net", "\n", "", "if", "args", ".", "flip", "is", "not", "None", ":", "\n", "        ", "net_params", "[", "'flip'", "]", "=", "args", ".", "flip", "\n", "", "if", "args", ".", "pos_enc_dim", "is", "not", "None", ":", "\n", "        ", "net_params", "[", "'pos_enc_dim'", "]", "=", "args", ".", "pos_enc_dim", "\n", "\n", "# ZINC", "\n", "", "net_params", "[", "'num_atom_type'", "]", "=", "dataset", ".", "num_atom_type", "\n", "net_params", "[", "'num_bond_type'", "]", "=", "dataset", ".", "num_bond_type", "\n", "\n", "# calculate logarithmic average degree for scalers", "\n", "D", "=", "torch", ".", "cat", "(", "[", "torch", ".", "sparse", ".", "sum", "(", "g", ".", "adjacency_matrix", "(", "transpose", "=", "True", ")", ",", "dim", "=", "-", "1", ")", ".", "to_dense", "(", ")", "for", "g", "in", "\n", "dataset", ".", "train", ".", "graph_lists", "]", ")", "\n", "net_params", "[", "'avg_d'", "]", "=", "dict", "(", "lin", "=", "torch", ".", "mean", "(", "D", ")", ",", "\n", "exp", "=", "torch", ".", "mean", "(", "torch", ".", "exp", "(", "torch", ".", "div", "(", "1", ",", "D", ")", ")", "-", "1", ")", ",", "\n", "log", "=", "torch", ".", "mean", "(", "torch", ".", "log", "(", "D", "+", "1", ")", ")", ")", "\n", "\n", "net_params", "[", "'total_param'", "]", "=", "view_model_param", "(", "net_params", ")", "\n", "train_val_pipeline", "(", "dataset", ",", "params", ",", "net_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.realworld_benchmark.main_SBMs_node_classification.DotDict.__init__": [[16, 19], ["main_SBMs_node_classification.DotDict.update"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwds", ")", ":", "\n", "        ", "self", ".", "update", "(", "kwds", ")", "\n", "self", ".", "__dict__", "=", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.realworld_benchmark.main_SBMs_node_classification.gpu_setup": [[34, 45], ["str", "torch.cuda.is_available", "torch.cuda.is_available", "print", "torch.device", "torch.device", "print", "torch.device", "torch.device", "torch.cuda.get_device_name", "torch.cuda.get_device_name"], "function", ["None"], ["def", "gpu_setup", "(", "use_gpu", ",", "gpu_id", ")", ":", "\n", "    ", "os", ".", "environ", "[", "\"CUDA_DEVICE_ORDER\"", "]", "=", "\"PCI_BUS_ID\"", "\n", "os", ".", "environ", "[", "\"CUDA_VISIBLE_DEVICES\"", "]", "=", "str", "(", "gpu_id", ")", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "use_gpu", ":", "\n", "        ", "print", "(", "'cuda available with GPU:'", ",", "torch", ".", "cuda", ".", "get_device_name", "(", "0", ")", ")", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'cuda not available'", ")", "\n", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", "", "return", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.realworld_benchmark.main_SBMs_node_classification.view_model_param": [[51, 59], ["nets.SBMs_node_classification.dgn_net.DGNNet", "print", "nets.SBMs_node_classification.dgn_net.DGNNet.parameters", "print", "numpy.prod", "list", "param.data.size"], "function", ["None"], ["def", "view_model_param", "(", "net_params", ")", ":", "\n", "    ", "model", "=", "DGNNet", "(", "net_params", ")", "\n", "total_param", "=", "0", "\n", "print", "(", "\"MODEL DETAILS:\\n\"", ")", "\n", "for", "param", "in", "model", ".", "parameters", "(", ")", ":", "\n", "        ", "total_param", "+=", "np", ".", "prod", "(", "list", "(", "param", ".", "data", ".", "size", "(", ")", ")", ")", "\n", "", "print", "(", "'MODEL/Total parameters:'", ",", "total_param", ")", "\n", "return", "total_param", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.realworld_benchmark.main_SBMs_node_classification.train_val_pipeline": [[65, 150], ["time.time", "random.seed", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "print", "print", "print", "print", "nets.SBMs_node_classification.dgn_net.DGNNet", "model.to.to", "torch.Adam", "torch.lr_scheduler.ReduceLROnPlateau", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "train.train_SBMs_node_classification.evaluate_network_sparse", "train.train_SBMs_node_classification.evaluate_network_sparse", "train.train_SBMs_node_classification.evaluate_network_sparse", "print", "print", "print", "print", "print", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "len", "len", "len", "model.to.parameters", "tqdm.tqdm", "print", "print", "numpy.mean", "range", "t.set_description", "time.time", "train.train_SBMs_node_classification.train_epoch_sparse", "train.train_SBMs_node_classification.evaluate_network_sparse", "train.train_SBMs_node_classification.evaluate_network_sparse", "epoch_train_losses.append", "epoch_val_losses.append", "epoch_train_accs.append", "epoch_val_accs.append", "t.set_postfix", "per_epoch_time.append", "optim.lr_scheduler.ReduceLROnPlateau.step", "time.time", "print", "print", "print", "time.time", "time.time", "time.time"], "function", ["home.repos.pwc.inspect_result.Saro00_DGN.train.train_PCBA_graph_classification.evaluate_network_sparse", "home.repos.pwc.inspect_result.Saro00_DGN.train.train_PCBA_graph_classification.evaluate_network_sparse", "home.repos.pwc.inspect_result.Saro00_DGN.train.train_PCBA_graph_classification.evaluate_network_sparse", "home.repos.pwc.inspect_result.Saro00_DGN.train.train_PCBA_graph_classification.train_epoch_sparse", "home.repos.pwc.inspect_result.Saro00_DGN.train.train_PCBA_graph_classification.evaluate_network_sparse", "home.repos.pwc.inspect_result.Saro00_DGN.train.train_PCBA_graph_classification.evaluate_network_sparse"], ["def", "train_val_pipeline", "(", "dataset", ",", "params", ",", "net_params", ")", ":", "\n", "    ", "start0", "=", "time", ".", "time", "(", ")", "\n", "per_epoch_time", "=", "[", "]", "\n", "trainset", ",", "valset", ",", "testset", "=", "dataset", ".", "train", ",", "dataset", ".", "val", ",", "dataset", ".", "test", "\n", "device", "=", "net_params", "[", "'device'", "]", "\n", "\n", "# setting seeds", "\n", "random", ".", "seed", "(", "params", "[", "'seed'", "]", ")", "\n", "np", ".", "random", ".", "seed", "(", "params", "[", "'seed'", "]", ")", "\n", "torch", ".", "manual_seed", "(", "params", "[", "'seed'", "]", ")", "\n", "if", "device", ".", "type", "==", "'cuda'", ":", "\n", "        ", "torch", ".", "cuda", ".", "manual_seed", "(", "params", "[", "'seed'", "]", ")", "\n", "\n", "", "print", "(", "\"Training Graphs: \"", ",", "len", "(", "trainset", ")", ")", "\n", "print", "(", "\"Validation Graphs: \"", ",", "len", "(", "valset", ")", ")", "\n", "print", "(", "\"Test Graphs: \"", ",", "len", "(", "testset", ")", ")", "\n", "print", "(", "\"Number of Classes: \"", ",", "net_params", "[", "'n_classes'", "]", ")", "\n", "\n", "model", "=", "DGNNet", "(", "net_params", ")", "\n", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "\n", "optimizer", "=", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "params", "[", "'init_lr'", "]", ",", "weight_decay", "=", "params", "[", "'weight_decay'", "]", ")", "\n", "scheduler", "=", "optim", ".", "lr_scheduler", ".", "ReduceLROnPlateau", "(", "optimizer", ",", "mode", "=", "'min'", ",", "\n", "factor", "=", "params", "[", "'lr_reduce_factor'", "]", ",", "\n", "patience", "=", "params", "[", "'lr_schedule_patience'", "]", ")", "\n", "start_epoch", "=", "0", "\n", "epoch_train_losses", ",", "epoch_val_losses", "=", "[", "]", ",", "[", "]", "\n", "epoch_train_accs", ",", "epoch_val_accs", "=", "[", "]", ",", "[", "]", "\n", "\n", "train_loader", "=", "DataLoader", "(", "trainset", ",", "batch_size", "=", "params", "[", "'batch_size'", "]", ",", "shuffle", "=", "True", ",", "collate_fn", "=", "dataset", ".", "collate", ")", "\n", "val_loader", "=", "DataLoader", "(", "valset", ",", "batch_size", "=", "params", "[", "'batch_size'", "]", ",", "shuffle", "=", "False", ",", "collate_fn", "=", "dataset", ".", "collate", ")", "\n", "test_loader", "=", "DataLoader", "(", "testset", ",", "batch_size", "=", "params", "[", "'batch_size'", "]", ",", "shuffle", "=", "False", ",", "collate_fn", "=", "dataset", ".", "collate", ")", "\n", "\n", "# At any point you can hit Ctrl + C to break out of training early.", "\n", "try", ":", "\n", "        ", "with", "tqdm", "(", "range", "(", "start_epoch", ",", "params", "[", "'epochs'", "]", ")", ",", "mininterval", "=", "params", "[", "'print_epoch_interval'", "]", ",", "\n", "maxinterval", "=", "None", ",", "unit", "=", "'epoch'", ",", "initial", "=", "start_epoch", ",", "total", "=", "params", "[", "'epochs'", "]", ")", "as", "t", ":", "\n", "            ", "for", "epoch", "in", "t", ":", "\n", "\n", "                ", "t", ".", "set_description", "(", "'Epoch %d'", "%", "epoch", ")", "\n", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "\n", "epoch_train_loss", ",", "epoch_train_acc", ",", "optimizer", "=", "train_epoch", "(", "model", ",", "optimizer", ",", "device", ",", "train_loader", ",", "epoch", ")", "\n", "\n", "epoch_val_loss", ",", "epoch_val_acc", "=", "evaluate_network", "(", "model", ",", "device", ",", "val_loader", ",", "epoch", ")", "\n", "_", ",", "epoch_test_acc", "=", "evaluate_network", "(", "model", ",", "device", ",", "test_loader", ",", "epoch", ")", "\n", "\n", "epoch_train_losses", ".", "append", "(", "epoch_train_loss", ")", "\n", "epoch_val_losses", ".", "append", "(", "epoch_val_loss", ")", "\n", "epoch_train_accs", ".", "append", "(", "epoch_train_acc", ")", "\n", "epoch_val_accs", ".", "append", "(", "epoch_val_acc", ")", "\n", "\n", "t", ".", "set_postfix", "(", "time", "=", "time", ".", "time", "(", ")", "-", "start", ",", "lr", "=", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ",", "\n", "train_loss", "=", "epoch_train_loss", ",", "val_loss", "=", "epoch_val_loss", ",", "\n", "train_acc", "=", "epoch_train_acc", ",", "val_acc", "=", "epoch_val_acc", ",", "\n", "test_acc", "=", "epoch_test_acc", ")", "\n", "\n", "per_epoch_time", ".", "append", "(", "time", ".", "time", "(", ")", "-", "start", ")", "\n", "\n", "\n", "scheduler", ".", "step", "(", "epoch_val_loss", ")", "\n", "\n", "if", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "<", "params", "[", "'min_lr'", "]", ":", "\n", "                    ", "print", "(", "\"\\n!! LR SMALLER OR EQUAL TO MIN LR THRESHOLD.\"", ")", "\n", "break", "\n", "\n", "# Stop training after params['max_time'] hours", "\n", "", "if", "time", ".", "time", "(", ")", "-", "start0", ">", "params", "[", "'max_time'", "]", "*", "3600", ":", "\n", "                    ", "print", "(", "'-'", "*", "89", ")", "\n", "print", "(", "\"Max_time for training elapsed {:.2f} hours, so stopping\"", ".", "format", "(", "params", "[", "'max_time'", "]", ")", ")", "\n", "break", "\n", "\n", "", "", "", "", "except", "KeyboardInterrupt", ":", "\n", "        ", "print", "(", "'-'", "*", "89", ")", "\n", "print", "(", "'Exiting from training early because of KeyboardInterrupt'", ")", "\n", "\n", "", "_", ",", "test_acc", "=", "evaluate_network", "(", "model", ",", "device", ",", "test_loader", ",", "epoch", ")", "\n", "_", ",", "val_acc", "=", "evaluate_network", "(", "model", ",", "device", ",", "val_loader", ",", "epoch", ")", "\n", "_", ",", "train_acc", "=", "evaluate_network", "(", "model", ",", "device", ",", "train_loader", ",", "epoch", ")", "\n", "print", "(", "\"Test Accuracy: {:.4f}\"", ".", "format", "(", "test_acc", ")", ")", "\n", "print", "(", "\"Train Accuracy: {:.4f}\"", ".", "format", "(", "train_acc", ")", ")", "\n", "print", "(", "\"Convergence Time (Epochs): {:.4f}\"", ".", "format", "(", "epoch", ")", ")", "\n", "print", "(", "\"TOTAL TIME TAKEN: {:.4f}s\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start0", ")", ")", "\n", "print", "(", "\"AVG TIME PER EPOCH: {:.4f}s\"", ".", "format", "(", "np", ".", "mean", "(", "per_epoch_time", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.realworld_benchmark.main_SBMs_node_classification.main": [[152, 295], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "main_SBMs_node_classification.gpu_setup", "data.SBMs.SBMsDataset", "torch.unique().size", "torch.unique().size", "torch.unique().size", "torch.unique().size", "torch.cat", "torch.cat", "dict", "main_SBMs_node_classification.view_model_param", "main_SBMs_node_classification.train_val_pipeline", "open", "json.load", "int", "int", "int", "int", "float", "float", "int", "float", "float", "int", "float", "int", "int", "int", "float", "float", "int", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.sparse.sum().to_dense", "torch.sparse.sum().to_dense", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.log", "torch.log", "torch.sparse.sum", "torch.sparse.sum", "g.adjacency_matrix"], "function", ["home.repos.pwc.inspect_result.Saro00_DGN.realworld_benchmark.main_superpixels.gpu_setup", "home.repos.pwc.inspect_result.Saro00_DGN.realworld_benchmark.main_superpixels.view_model_param", "home.repos.pwc.inspect_result.Saro00_DGN.realworld_benchmark.main_superpixels.train_val_pipeline"], ["", "def", "main", "(", ")", ":", "\n", "    ", "\"\"\"\n        USER CONTROLS\n    \"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--config'", ",", "help", "=", "\"Please give a config.json file with training/model/data/param details\"", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu_id'", ",", "help", "=", "\"Please give a value for gpu id\"", ")", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "help", "=", "\"Please give a value for model name\"", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "help", "=", "\"Please give a value for dataset name\"", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "help", "=", "\"Please give a value for seed\"", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "help", "=", "\"Please give a value for epochs\"", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "help", "=", "\"Please give a value for batch_size\"", ")", "\n", "parser", ".", "add_argument", "(", "'--init_lr'", ",", "help", "=", "\"Please give a value for init_lr\"", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_reduce_factor'", ",", "help", "=", "\"Please give a value for lr_reduce_factor\"", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_schedule_patience'", ",", "help", "=", "\"Please give a value for lr_schedule_patience\"", ")", "\n", "parser", ".", "add_argument", "(", "'--min_lr'", ",", "help", "=", "\"Please give a value for min_lr\"", ")", "\n", "parser", ".", "add_argument", "(", "'--weight_decay'", ",", "help", "=", "\"Please give a value for weight_decay\"", ")", "\n", "parser", ".", "add_argument", "(", "'--print_epoch_interval'", ",", "help", "=", "\"Please give a value for print_epoch_interval\"", ")", "\n", "parser", ".", "add_argument", "(", "'--L'", ",", "help", "=", "\"Please give a value for L\"", ")", "\n", "parser", ".", "add_argument", "(", "'--hidden_dim'", ",", "help", "=", "\"Please give a value for hidden_dim\"", ")", "\n", "parser", ".", "add_argument", "(", "'--out_dim'", ",", "help", "=", "\"Please give a value for out_dim\"", ")", "\n", "parser", ".", "add_argument", "(", "'--residual'", ",", "help", "=", "\"Please give a value for residual\"", ")", "\n", "parser", ".", "add_argument", "(", "'--edge_feat'", ",", "help", "=", "\"Please give a value for edge_feat\"", ")", "\n", "parser", ".", "add_argument", "(", "'--readout'", ",", "help", "=", "\"Please give a value for readout\"", ")", "\n", "parser", ".", "add_argument", "(", "'--in_feat_dropout'", ",", "help", "=", "\"Please give a value for in_feat_dropout\"", ")", "\n", "parser", ".", "add_argument", "(", "'--dropout'", ",", "help", "=", "\"Please give a value for dropout\"", ")", "\n", "parser", ".", "add_argument", "(", "'--graph_norm'", ",", "help", "=", "\"Please give a value for graph_norm\"", ")", "\n", "parser", ".", "add_argument", "(", "'--layer_norm'", ",", "help", "=", "\"Please give a value for layer_norm\"", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_norm'", ",", "help", "=", "\"Please give a value for batch_norm\"", ")", "\n", "parser", ".", "add_argument", "(", "'--max_time'", ",", "help", "=", "\"Please give a value for max_time\"", ")", "\n", "parser", ".", "add_argument", "(", "'--type_net'", ",", "default", "=", "'simple'", ",", "help", "=", "'Type of net'", ")", "\n", "parser", ".", "add_argument", "(", "'--lap_norm'", ",", "default", "=", "'none'", ",", "help", "=", "'Laplacian normalisation'", ")", "\n", "\n", "# eig params", "\n", "parser", ".", "add_argument", "(", "'--aggregators'", ",", "type", "=", "str", ",", "help", "=", "'Aggregators to use.'", ")", "\n", "parser", ".", "add_argument", "(", "'--scalers'", ",", "type", "=", "str", ",", "help", "=", "'Scalers to use.'", ")", "\n", "parser", ".", "add_argument", "(", "'--towers'", ",", "type", "=", "int", ",", "default", "=", "5", ",", "help", "=", "'Towers to use.'", ")", "\n", "parser", ".", "add_argument", "(", "'--divide_input_first'", ",", "type", "=", "bool", ",", "help", "=", "'Whether to divide the input in first layer.'", ")", "\n", "parser", ".", "add_argument", "(", "'--divide_input_last'", ",", "type", "=", "bool", ",", "help", "=", "'Whether to divide the input in last layers.'", ")", "\n", "parser", ".", "add_argument", "(", "'--edge_dim'", ",", "type", "=", "int", ",", "help", "=", "'Size of edge embeddings.'", ")", "\n", "parser", ".", "add_argument", "(", "'--pretrans_layers'", ",", "type", "=", "int", ",", "help", "=", "'pretrans_layers.'", ")", "\n", "parser", ".", "add_argument", "(", "'--posttrans_layers'", ",", "type", "=", "int", ",", "help", "=", "'posttrans_layers.'", ")", "\n", "parser", ".", "add_argument", "(", "'--pos_enc_dim'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "help", "=", "'Positional encoding dimension'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "with", "open", "(", "args", ".", "config", ")", "as", "f", ":", "\n", "        ", "config", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "# device", "\n", "", "if", "args", ".", "gpu_id", "is", "not", "None", ":", "\n", "        ", "config", "[", "'gpu'", "]", "[", "'id'", "]", "=", "int", "(", "args", ".", "gpu_id", ")", "\n", "config", "[", "'gpu'", "]", "[", "'use'", "]", "=", "True", "\n", "", "device", "=", "gpu_setup", "(", "config", "[", "'gpu'", "]", "[", "'use'", "]", ",", "config", "[", "'gpu'", "]", "[", "'id'", "]", ")", "\n", "\n", "# dataset", "\n", "if", "args", ".", "dataset", "is", "not", "None", ":", "\n", "        ", "DATASET_NAME", "=", "args", ".", "dataset", "\n", "", "else", ":", "\n", "        ", "DATASET_NAME", "=", "config", "[", "'dataset'", "]", "\n", "", "dataset", "=", "SBMsDataset", "(", "DATASET_NAME", ",", "pos_enc_dim", "=", "int", "(", "args", ".", "pos_enc_dim", ")", ",", "norm", "=", "args", ".", "lap_norm", ")", "\n", "\n", "# parameters", "\n", "params", "=", "config", "[", "'params'", "]", "\n", "if", "args", ".", "seed", "is", "not", "None", ":", "\n", "        ", "params", "[", "'seed'", "]", "=", "int", "(", "args", ".", "seed", ")", "\n", "", "if", "args", ".", "epochs", "is", "not", "None", ":", "\n", "        ", "params", "[", "'epochs'", "]", "=", "int", "(", "args", ".", "epochs", ")", "\n", "", "if", "args", ".", "batch_size", "is", "not", "None", ":", "\n", "        ", "params", "[", "'batch_size'", "]", "=", "int", "(", "args", ".", "batch_size", ")", "\n", "", "if", "args", ".", "init_lr", "is", "not", "None", ":", "\n", "        ", "params", "[", "'init_lr'", "]", "=", "float", "(", "args", ".", "init_lr", ")", "\n", "", "if", "args", ".", "lr_reduce_factor", "is", "not", "None", ":", "\n", "        ", "params", "[", "'lr_reduce_factor'", "]", "=", "float", "(", "args", ".", "lr_reduce_factor", ")", "\n", "", "if", "args", ".", "lr_schedule_patience", "is", "not", "None", ":", "\n", "        ", "params", "[", "'lr_schedule_patience'", "]", "=", "int", "(", "args", ".", "lr_schedule_patience", ")", "\n", "", "if", "args", ".", "min_lr", "is", "not", "None", ":", "\n", "        ", "params", "[", "'min_lr'", "]", "=", "float", "(", "args", ".", "min_lr", ")", "\n", "", "if", "args", ".", "weight_decay", "is", "not", "None", ":", "\n", "        ", "params", "[", "'weight_decay'", "]", "=", "float", "(", "args", ".", "weight_decay", ")", "\n", "", "if", "args", ".", "print_epoch_interval", "is", "not", "None", ":", "\n", "        ", "params", "[", "'print_epoch_interval'", "]", "=", "int", "(", "args", ".", "print_epoch_interval", ")", "\n", "", "if", "args", ".", "max_time", "is", "not", "None", ":", "\n", "        ", "params", "[", "'max_time'", "]", "=", "float", "(", "args", ".", "max_time", ")", "\n", "\n", "# network parameters", "\n", "", "net_params", "=", "config", "[", "'net_params'", "]", "\n", "net_params", "[", "'device'", "]", "=", "device", "\n", "net_params", "[", "'gpu_id'", "]", "=", "config", "[", "'gpu'", "]", "[", "'id'", "]", "\n", "net_params", "[", "'batch_size'", "]", "=", "params", "[", "'batch_size'", "]", "\n", "if", "args", ".", "L", "is", "not", "None", ":", "\n", "        ", "net_params", "[", "'L'", "]", "=", "int", "(", "args", ".", "L", ")", "\n", "", "if", "args", ".", "hidden_dim", "is", "not", "None", ":", "\n", "        ", "net_params", "[", "'hidden_dim'", "]", "=", "int", "(", "args", ".", "hidden_dim", ")", "\n", "", "if", "args", ".", "out_dim", "is", "not", "None", ":", "\n", "        ", "net_params", "[", "'out_dim'", "]", "=", "int", "(", "args", ".", "out_dim", ")", "\n", "", "if", "args", ".", "residual", "is", "not", "None", ":", "\n", "        ", "net_params", "[", "'residual'", "]", "=", "True", "if", "args", ".", "residual", "==", "'True'", "else", "False", "\n", "", "if", "args", ".", "edge_feat", "is", "not", "None", ":", "\n", "        ", "net_params", "[", "'edge_feat'", "]", "=", "True", "if", "args", ".", "edge_feat", "==", "'True'", "else", "False", "\n", "", "if", "args", ".", "readout", "is", "not", "None", ":", "\n", "        ", "net_params", "[", "'readout'", "]", "=", "args", ".", "readout", "\n", "", "if", "args", ".", "in_feat_dropout", "is", "not", "None", ":", "\n", "        ", "net_params", "[", "'in_feat_dropout'", "]", "=", "float", "(", "args", ".", "in_feat_dropout", ")", "\n", "", "if", "args", ".", "dropout", "is", "not", "None", ":", "\n", "        ", "net_params", "[", "'dropout'", "]", "=", "float", "(", "args", ".", "dropout", ")", "\n", "", "if", "args", ".", "graph_norm", "is", "not", "None", ":", "\n", "        ", "net_params", "[", "'graph_norm'", "]", "=", "True", "if", "args", ".", "graph_norm", "==", "'True'", "else", "False", "\n", "", "if", "args", ".", "layer_norm", "is", "not", "None", ":", "\n", "        ", "net_params", "[", "'layer_norm'", "]", "=", "True", "if", "args", ".", "layer_norm", "==", "'True'", "else", "False", "\n", "", "if", "args", ".", "batch_norm", "is", "not", "None", ":", "\n", "        ", "net_params", "[", "'batch_norm'", "]", "=", "True", "if", "args", ".", "batch_norm", "==", "'True'", "else", "False", "\n", "", "if", "args", ".", "aggregators", "is", "not", "None", ":", "\n", "        ", "net_params", "[", "'aggregators'", "]", "=", "args", ".", "aggregators", "\n", "", "if", "args", ".", "scalers", "is", "not", "None", ":", "\n", "        ", "net_params", "[", "'scalers'", "]", "=", "args", ".", "scalers", "\n", "", "if", "args", ".", "towers", "is", "not", "None", ":", "\n", "        ", "net_params", "[", "'towers'", "]", "=", "args", ".", "towers", "\n", "", "if", "args", ".", "divide_input_first", "is", "not", "None", ":", "\n", "        ", "net_params", "[", "'divide_input_first'", "]", "=", "args", ".", "divide_input_first", "\n", "", "if", "args", ".", "divide_input_last", "is", "not", "None", ":", "\n", "        ", "net_params", "[", "'divide_input_last'", "]", "=", "args", ".", "divide_input_last", "\n", "", "if", "args", ".", "edge_dim", "is", "not", "None", ":", "\n", "        ", "net_params", "[", "'edge_dim'", "]", "=", "args", ".", "edge_dim", "\n", "", "if", "args", ".", "pretrans_layers", "is", "not", "None", ":", "\n", "        ", "net_params", "[", "'pretrans_layers'", "]", "=", "args", ".", "pretrans_layers", "\n", "", "if", "args", ".", "posttrans_layers", "is", "not", "None", ":", "\n", "        ", "net_params", "[", "'posttrans_layers'", "]", "=", "args", ".", "posttrans_layers", "\n", "", "if", "args", ".", "type_net", "is", "not", "None", ":", "\n", "        ", "net_params", "[", "'type_net'", "]", "=", "args", ".", "type_net", "\n", "", "if", "args", ".", "pos_enc_dim", "is", "not", "None", ":", "\n", "        ", "net_params", "[", "'pos_enc_dim'", "]", "=", "args", ".", "pos_enc_dim", "\n", "\n", "# SBM", "\n", "", "net_params", "[", "'in_dim'", "]", "=", "torch", ".", "unique", "(", "dataset", ".", "train", "[", "0", "]", "[", "0", "]", ".", "ndata", "[", "'feat'", "]", ",", "dim", "=", "0", ")", ".", "size", "(", "0", ")", "# node_dim (feat is an integer)", "\n", "net_params", "[", "'n_classes'", "]", "=", "torch", ".", "unique", "(", "dataset", ".", "train", "[", "0", "]", "[", "1", "]", ",", "dim", "=", "0", ")", ".", "size", "(", "0", ")", "\n", "\n", "# calculate logarithmic average degree for scalers", "\n", "D", "=", "torch", ".", "cat", "(", "[", "torch", ".", "sparse", ".", "sum", "(", "g", ".", "adjacency_matrix", "(", "transpose", "=", "True", ")", ",", "dim", "=", "-", "1", ")", ".", "to_dense", "(", ")", "for", "g", "in", "\n", "dataset", ".", "train", ".", "graph_lists", "]", ")", "\n", "net_params", "[", "'avg_d'", "]", "=", "dict", "(", "lin", "=", "torch", ".", "mean", "(", "D", ")", ",", "log", "=", "torch", ".", "mean", "(", "torch", ".", "log", "(", "D", "+", "1", ")", ")", ")", "\n", "\n", "net_params", "[", "'total_param'", "]", "=", "view_model_param", "(", "net_params", ")", "\n", "train_val_pipeline", "(", "dataset", ",", "params", ",", "net_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.realworld_benchmark.main_HIV.DotDict.__init__": [[21, 24], ["main_HIV.DotDict.update"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwds", ")", ":", "\n", "        ", "self", ".", "update", "(", "kwds", ")", "\n", "self", ".", "__dict__", "=", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.realworld_benchmark.main_HIV.gpu_setup": [[38, 49], ["str", "torch.cuda.is_available", "torch.cuda.is_available", "print", "torch.device", "torch.device", "print", "torch.device", "torch.device", "torch.cuda.get_device_name", "torch.cuda.get_device_name"], "function", ["None"], ["def", "gpu_setup", "(", "use_gpu", ",", "gpu_id", ")", ":", "\n", "    ", "os", ".", "environ", "[", "\"CUDA_DEVICE_ORDER\"", "]", "=", "\"PCI_BUS_ID\"", "\n", "os", ".", "environ", "[", "\"CUDA_VISIBLE_DEVICES\"", "]", "=", "str", "(", "gpu_id", ")", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "use_gpu", ":", "\n", "        ", "print", "(", "'cuda available with GPU:'", ",", "torch", ".", "cuda", ".", "get_device_name", "(", "0", ")", ")", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'cuda not available'", ")", "\n", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", "", "return", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.realworld_benchmark.main_HIV.view_model_param": [[56, 66], ["nets.HIV_graph_classification.dgn_net.DGNNet", "print", "nets.HIV_graph_classification.dgn_net.DGNNet.parameters", "print", "numpy.prod", "list", "param.data.size"], "function", ["None"], ["def", "view_model_param", "(", "net_params", ")", ":", "\n", "    ", "model", "=", "DGNNet", "(", "net_params", ")", "\n", "total_param", "=", "0", "\n", "print", "(", "\"MODEL DETAILS:\\n\"", ")", "\n", "# print(model)", "\n", "for", "param", "in", "model", ".", "parameters", "(", ")", ":", "\n", "# print(param.data.size())", "\n", "        ", "total_param", "+=", "np", ".", "prod", "(", "list", "(", "param", ".", "data", ".", "size", "(", ")", ")", ")", "\n", "", "print", "(", "'DGN Total parameters:'", ",", "total_param", ")", "\n", "return", "total_param", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.realworld_benchmark.main_HIV.train_val_pipeline": [[73, 179], ["time.time", "random.seed", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "print", "print", "print", "nets.HIV_graph_classification.dgn_net.DGNNet", "model.to.to", "torch.Adam", "torch.lr_scheduler.ReduceLROnPlateau", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "numpy.argmax", "numpy.argmax", "print", "print", "print", "print", "print", "print", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "len", "len", "len", "model.to.parameters", "numpy.array", "numpy.array", "tqdm.tqdm", "print", "print", "numpy.mean", "range", "t.set_description", "time.time", "train.train_HIV_graph_classification.train_epoch_sparse", "train.train_HIV_graph_classification.evaluate_network_sparse", "epoch_train_losses.append", "epoch_val_losses.append", "epoch_train_ROCs.append", "epoch_val_ROCs.append", "train.train_HIV_graph_classification.evaluate_network_sparse", "epoch_test_ROCs.append", "t.set_postfix", "per_epoch_time.append", "optim.lr_scheduler.ReduceLROnPlateau.step", "print", "time.time", "model.to.reset_params", "epoch_train_roc.item", "epoch_val_roc.item", "epoch_test_roc.item", "print", "print", "print", "epoch_train_roc.item", "epoch_val_roc.item", "epoch_test_roc.item", "time.time", "epoch_val_roc.item", "time.time", "time.time"], "function", ["home.repos.pwc.inspect_result.Saro00_DGN.train.train_PCBA_graph_classification.train_epoch_sparse", "home.repos.pwc.inspect_result.Saro00_DGN.train.train_PCBA_graph_classification.evaluate_network_sparse", "home.repos.pwc.inspect_result.Saro00_DGN.train.train_PCBA_graph_classification.evaluate_network_sparse"], ["def", "train_val_pipeline", "(", "dataset", ",", "params", ",", "net_params", ")", ":", "\n", "    ", "t0", "=", "time", ".", "time", "(", ")", "\n", "per_epoch_time", "=", "[", "]", "\n", "\n", "DATASET_NAME", "=", "dataset", ".", "name", "\n", "MODEL_NAME", "=", "'DGN'", "\n", "\n", "trainset", ",", "valset", ",", "testset", "=", "dataset", ".", "train", ",", "dataset", ".", "val", ",", "dataset", ".", "test", "\n", "\n", "device", "=", "net_params", "[", "'device'", "]", "\n", "\n", "# setting seeds", "\n", "random", ".", "seed", "(", "params", "[", "'seed'", "]", ")", "\n", "np", ".", "random", ".", "seed", "(", "params", "[", "'seed'", "]", ")", "\n", "torch", ".", "manual_seed", "(", "params", "[", "'seed'", "]", ")", "\n", "if", "device", "==", "'cuda'", ":", "\n", "        ", "torch", ".", "cuda", ".", "manual_seed", "(", "params", "[", "'seed'", "]", ")", "\n", "\n", "", "print", "(", "\"Training Graphs: \"", ",", "len", "(", "trainset", ")", ")", "\n", "print", "(", "\"Validation Graphs: \"", ",", "len", "(", "valset", ")", ")", "\n", "print", "(", "\"Test Graphs: \"", ",", "len", "(", "testset", ")", ")", "\n", "\n", "model", "=", "DGNNet", "(", "net_params", ")", "\n", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "\n", "optimizer", "=", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "params", "[", "'init_lr'", "]", ",", "weight_decay", "=", "params", "[", "'weight_decay'", "]", ")", "\n", "scheduler", "=", "optim", ".", "lr_scheduler", ".", "ReduceLROnPlateau", "(", "optimizer", ",", "mode", "=", "'min'", ",", "\n", "factor", "=", "params", "[", "'lr_reduce_factor'", "]", ",", "\n", "patience", "=", "params", "[", "'lr_schedule_patience'", "]", ",", "\n", "verbose", "=", "True", ")", "\n", "\n", "epoch_train_losses", ",", "epoch_val_losses", "=", "[", "]", ",", "[", "]", "\n", "epoch_train_ROCs", ",", "epoch_val_ROCs", ",", "epoch_test_ROCs", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "train_loader", "=", "DataLoader", "(", "trainset", ",", "batch_size", "=", "params", "[", "'batch_size'", "]", ",", "shuffle", "=", "True", ",", "collate_fn", "=", "dataset", ".", "collate", ",", "pin_memory", "=", "True", ")", "\n", "val_loader", "=", "DataLoader", "(", "valset", ",", "batch_size", "=", "params", "[", "'batch_size'", "]", ",", "shuffle", "=", "False", ",", "collate_fn", "=", "dataset", ".", "collate", ",", "pin_memory", "=", "True", ")", "\n", "test_loader", "=", "DataLoader", "(", "testset", ",", "batch_size", "=", "params", "[", "'batch_size'", "]", ",", "shuffle", "=", "False", ",", "collate_fn", "=", "dataset", ".", "collate", ",", "pin_memory", "=", "True", ")", "\n", "\n", "# At any point you can hit Ctrl + C to break out of training early.", "\n", "try", ":", "\n", "        ", "with", "tqdm", "(", "range", "(", "params", "[", "'epochs'", "]", ")", ",", "unit", "=", "'epoch'", ")", "as", "t", ":", "\n", "            ", "for", "epoch", "in", "t", ":", "\n", "                ", "if", "epoch", "==", "-", "1", ":", "\n", "                    ", "model", ".", "reset_params", "(", ")", "\n", "\n", "\n", "", "t", ".", "set_description", "(", "'Epoch %d'", "%", "epoch", ")", "\n", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "\n", "epoch_train_loss", ",", "epoch_train_roc", ",", "optimizer", "=", "train_epoch", "(", "model", ",", "optimizer", ",", "device", ",", "train_loader", ",", "\n", "epoch", ")", "\n", "epoch_val_loss", ",", "epoch_val_roc", "=", "evaluate_network", "(", "model", ",", "device", ",", "val_loader", ",", "epoch", ")", "\n", "\n", "epoch_train_losses", ".", "append", "(", "epoch_train_loss", ")", "\n", "epoch_val_losses", ".", "append", "(", "epoch_val_loss", ")", "\n", "epoch_train_ROCs", ".", "append", "(", "epoch_train_roc", ".", "item", "(", ")", ")", "\n", "epoch_val_ROCs", ".", "append", "(", "epoch_val_roc", ".", "item", "(", ")", ")", "\n", "\n", "\n", "_", ",", "epoch_test_roc", "=", "evaluate_network", "(", "model", ",", "device", ",", "test_loader", ",", "epoch", ")", "\n", "\n", "epoch_test_ROCs", ".", "append", "(", "epoch_test_roc", ".", "item", "(", ")", ")", "\n", "\n", "t", ".", "set_postfix", "(", "time", "=", "time", ".", "time", "(", ")", "-", "start", ",", "lr", "=", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ",", "\n", "train_loss", "=", "epoch_train_loss", ",", "val_loss", "=", "epoch_val_loss", ",", "\n", "train_ROC", "=", "epoch_train_roc", ".", "item", "(", ")", ",", "val_ROC", "=", "epoch_val_roc", ".", "item", "(", ")", ",", "\n", "test_ROC", "=", "epoch_test_roc", ".", "item", "(", ")", ",", "refresh", "=", "False", ")", "\n", "\n", "per_epoch_time", ".", "append", "(", "time", ".", "time", "(", ")", "-", "start", ")", "\n", "\n", "scheduler", ".", "step", "(", "-", "epoch_val_roc", ".", "item", "(", ")", ")", "\n", "\n", "if", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "<", "params", "[", "'min_lr'", "]", ":", "\n", "                    ", "print", "(", "\"\\n!! LR EQUAL TO MIN LR SET.\"", ")", "\n", "break", "\n", "\n", "# Stop training after params['max_time'] hours", "\n", "", "if", "time", ".", "time", "(", ")", "-", "t0", ">", "params", "[", "'max_time'", "]", "*", "3600", ":", "\n", "                    ", "print", "(", "'-'", "*", "89", ")", "\n", "print", "(", "\"Max_time for training elapsed {:.2f} hours, so stopping\"", ".", "format", "(", "params", "[", "'max_time'", "]", ")", ")", "\n", "break", "\n", "\n", "", "print", "(", "''", ")", "\n", "\n", "#for _ in range(5):", "\n", "#print('Sampled value is ', model.layers[1].towers[0].eigfiltbis(torch.FloatTensor([random.random() for i in range(4)]).to('cuda')))", "\n", "\n", "", "", "", "except", "KeyboardInterrupt", ":", "\n", "        ", "print", "(", "'-'", "*", "89", ")", "\n", "print", "(", "'Exiting from training early because of KeyboardInterrupt'", ")", "\n", "\n", "\n", "", "best_val_epoch", "=", "np", ".", "argmax", "(", "np", ".", "array", "(", "epoch_val_ROCs", ")", ")", "\n", "best_train_epoch", "=", "np", ".", "argmax", "(", "np", ".", "array", "(", "epoch_train_ROCs", ")", ")", "\n", "best_val_roc", "=", "epoch_val_ROCs", "[", "best_val_epoch", "]", "\n", "best_val_test_roc", "=", "epoch_test_ROCs", "[", "best_val_epoch", "]", "\n", "best_val_train_roc", "=", "epoch_train_ROCs", "[", "best_val_epoch", "]", "\n", "best_train_roc", "=", "epoch_train_ROCs", "[", "best_train_epoch", "]", "\n", "\n", "print", "(", "\"Best Train ROC: {:.4f}\"", ".", "format", "(", "best_train_roc", ")", ")", "\n", "print", "(", "\"Best Val ROC: {:.4f}\"", ".", "format", "(", "best_val_roc", ")", ")", "\n", "print", "(", "\"Test ROC of Best Val: {:.4f}\"", ".", "format", "(", "best_val_test_roc", ")", ")", "\n", "print", "(", "\"Train ROC of Best Val: {:.4f}\"", ".", "format", "(", "best_val_train_roc", ")", ")", "\n", "print", "(", "\"TOTAL TIME TAKEN: {:.4f}s\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "t0", ")", ")", "\n", "print", "(", "\"AVG TIME PER EPOCH: {:.4f}s\"", ".", "format", "(", "np", ".", "mean", "(", "per_epoch_time", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.realworld_benchmark.main_HIV.main": [[182, 320], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "main_HIV.gpu_setup", "data.HIV.HIVDataset", "torch.cat", "torch.cat", "dict", "main_HIV.view_model_param", "main_HIV.train_val_pipeline", "open", "json.load", "int", "int", "int", "int", "float", "float", "int", "float", "float", "int", "float", "int", "int", "int", "float", "float", "int", "torch.sparse.sum().to_dense", "torch.sparse.sum().to_dense", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.log", "torch.log", "torch.sparse.sum", "torch.sparse.sum", "torch.exp", "torch.exp", "g.adjacency_matrix", "torch.div", "torch.div"], "function", ["home.repos.pwc.inspect_result.Saro00_DGN.realworld_benchmark.main_superpixels.gpu_setup", "home.repos.pwc.inspect_result.Saro00_DGN.realworld_benchmark.main_superpixels.view_model_param", "home.repos.pwc.inspect_result.Saro00_DGN.realworld_benchmark.main_superpixels.train_val_pipeline"], ["", "def", "main", "(", ")", ":", "\n", "    ", "\"\"\"\n        USER CONTROLS\n    \"\"\"", "\n", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--config'", ",", "help", "=", "\"Please give a config.json file with training/model/data/param details\"", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu_id'", ",", "help", "=", "\"Please give a value for gpu id\"", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "help", "=", "\"Please give a value for dataset name\"", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "help", "=", "\"Please give a value for seed\"", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "help", "=", "\"Please give a value for epochs\"", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "help", "=", "\"Please give a value for batch_size\"", ")", "\n", "parser", ".", "add_argument", "(", "'--init_lr'", ",", "help", "=", "\"Please give a value for init_lr\"", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_reduce_factor'", ",", "help", "=", "\"Please give a value for lr_reduce_factor\"", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_schedule_patience'", ",", "help", "=", "\"Please give a value for lr_schedule_patience\"", ")", "\n", "parser", ".", "add_argument", "(", "'--min_lr'", ",", "help", "=", "\"Please give a value for min_lr\"", ")", "\n", "parser", ".", "add_argument", "(", "'--weight_decay'", ",", "help", "=", "\"Please give a value for weight_decay\"", ")", "\n", "parser", ".", "add_argument", "(", "'--print_epoch_interval'", ",", "help", "=", "\"Please give a value for print_epoch_interval\"", ")", "\n", "parser", ".", "add_argument", "(", "'--L'", ",", "help", "=", "\"Please give a value for L\"", ")", "\n", "parser", ".", "add_argument", "(", "'--hidden_dim'", ",", "help", "=", "\"Please give a value for hidden_dim\"", ")", "\n", "parser", ".", "add_argument", "(", "'--out_dim'", ",", "help", "=", "\"Please give a value for out_dim\"", ")", "\n", "parser", ".", "add_argument", "(", "'--residual'", ",", "help", "=", "\"Please give a value for residual\"", ")", "\n", "parser", ".", "add_argument", "(", "'--edge_feat'", ",", "help", "=", "\"Please give a value for edge_feat\"", ")", "\n", "parser", ".", "add_argument", "(", "'--readout'", ",", "help", "=", "\"Please give a value for readout\"", ")", "\n", "parser", ".", "add_argument", "(", "'--in_feat_dropout'", ",", "help", "=", "\"Please give a value for in_feat_dropout\"", ")", "\n", "parser", ".", "add_argument", "(", "'--dropout'", ",", "help", "=", "\"Please give a value for dropout\"", ")", "\n", "parser", ".", "add_argument", "(", "'--graph_norm'", ",", "help", "=", "\"Please give a value for graph_norm\"", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_norm'", ",", "help", "=", "\"Please give a value for batch_norm\"", ")", "\n", "parser", ".", "add_argument", "(", "'--max_time'", ",", "help", "=", "\"Please give a value for max_time\"", ")", "\n", "parser", ".", "add_argument", "(", "'--expid'", ",", "help", "=", "'Experiment id.'", ")", "\n", "parser", ".", "add_argument", "(", "'--type_net'", ",", "default", "=", "'simple'", ",", "help", "=", "'Type of net'", ")", "\n", "parser", ".", "add_argument", "(", "'--lap_norm'", ",", "default", "=", "'none'", ",", "help", "=", "'Laplacian normalisation'", ")", "\n", "\n", "# dgn params", "\n", "parser", ".", "add_argument", "(", "'--aggregators'", ",", "type", "=", "str", ",", "help", "=", "'Aggregators to use.'", ")", "\n", "parser", ".", "add_argument", "(", "'--scalers'", ",", "type", "=", "str", ",", "help", "=", "'Scalers to use.'", ")", "\n", "parser", ".", "add_argument", "(", "'--towers'", ",", "type", "=", "int", ",", "default", "=", "5", ",", "help", "=", "'Towers to use.'", ")", "\n", "parser", ".", "add_argument", "(", "'--divide_input_first'", ",", "type", "=", "bool", ",", "help", "=", "'Whether to divide the input in first layer.'", ")", "\n", "parser", ".", "add_argument", "(", "'--divide_input_last'", ",", "type", "=", "bool", ",", "help", "=", "'Whether to divide the input in last layers.'", ")", "\n", "parser", ".", "add_argument", "(", "'--edge_dim'", ",", "type", "=", "int", ",", "help", "=", "'Size of edge embeddings.'", ")", "\n", "parser", ".", "add_argument", "(", "'--pretrans_layers'", ",", "type", "=", "int", ",", "help", "=", "'pretrans_layers.'", ")", "\n", "parser", ".", "add_argument", "(", "'--posttrans_layers'", ",", "type", "=", "int", ",", "help", "=", "'posttrans_layers.'", ")", "\n", "parser", ".", "add_argument", "(", "'--pos_enc_dim'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "help", "=", "'Positional encoding dimension'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "with", "open", "(", "args", ".", "config", ")", "as", "f", ":", "\n", "        ", "config", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "# device", "\n", "", "if", "args", ".", "gpu_id", "is", "not", "None", ":", "\n", "        ", "config", "[", "'gpu'", "]", "[", "'id'", "]", "=", "int", "(", "args", ".", "gpu_id", ")", "\n", "config", "[", "'gpu'", "]", "[", "'use'", "]", "=", "True", "\n", "", "device", "=", "gpu_setup", "(", "config", "[", "'gpu'", "]", "[", "'use'", "]", ",", "config", "[", "'gpu'", "]", "[", "'id'", "]", ")", "\n", "# dataset, out_dir", "\n", "if", "args", ".", "dataset", "is", "not", "None", ":", "\n", "        ", "DATASET_NAME", "=", "args", ".", "dataset", "\n", "", "else", ":", "\n", "        ", "DATASET_NAME", "=", "config", "[", "'dataset'", "]", "\n", "\n", "", "dataset", "=", "HIVDataset", "(", "DATASET_NAME", ",", "pos_enc_dim", "=", "int", "(", "args", ".", "pos_enc_dim", ")", ",", "norm", "=", "args", ".", "lap_norm", ")", "\n", "# parameters", "\n", "params", "=", "config", "[", "'params'", "]", "\n", "if", "args", ".", "seed", "is", "not", "None", ":", "\n", "        ", "params", "[", "'seed'", "]", "=", "int", "(", "args", ".", "seed", ")", "\n", "", "if", "args", ".", "epochs", "is", "not", "None", ":", "\n", "        ", "params", "[", "'epochs'", "]", "=", "int", "(", "args", ".", "epochs", ")", "\n", "", "if", "args", ".", "batch_size", "is", "not", "None", ":", "\n", "        ", "params", "[", "'batch_size'", "]", "=", "int", "(", "args", ".", "batch_size", ")", "\n", "", "if", "args", ".", "init_lr", "is", "not", "None", ":", "\n", "        ", "params", "[", "'init_lr'", "]", "=", "float", "(", "args", ".", "init_lr", ")", "\n", "", "if", "args", ".", "lr_reduce_factor", "is", "not", "None", ":", "\n", "        ", "params", "[", "'lr_reduce_factor'", "]", "=", "float", "(", "args", ".", "lr_reduce_factor", ")", "\n", "", "if", "args", ".", "lr_schedule_patience", "is", "not", "None", ":", "\n", "        ", "params", "[", "'lr_schedule_patience'", "]", "=", "int", "(", "args", ".", "lr_schedule_patience", ")", "\n", "", "if", "args", ".", "min_lr", "is", "not", "None", ":", "\n", "        ", "params", "[", "'min_lr'", "]", "=", "float", "(", "args", ".", "min_lr", ")", "\n", "", "if", "args", ".", "weight_decay", "is", "not", "None", ":", "\n", "        ", "params", "[", "'weight_decay'", "]", "=", "float", "(", "args", ".", "weight_decay", ")", "\n", "", "if", "args", ".", "print_epoch_interval", "is", "not", "None", ":", "\n", "        ", "params", "[", "'print_epoch_interval'", "]", "=", "int", "(", "args", ".", "print_epoch_interval", ")", "\n", "", "if", "args", ".", "max_time", "is", "not", "None", ":", "\n", "        ", "params", "[", "'max_time'", "]", "=", "float", "(", "args", ".", "max_time", ")", "\n", "\n", "# network parameters", "\n", "", "net_params", "=", "config", "[", "'net_params'", "]", "\n", "net_params", "[", "'device'", "]", "=", "device", "\n", "net_params", "[", "'gpu_id'", "]", "=", "config", "[", "'gpu'", "]", "[", "'id'", "]", "\n", "net_params", "[", "'batch_size'", "]", "=", "params", "[", "'batch_size'", "]", "\n", "if", "args", ".", "L", "is", "not", "None", ":", "\n", "        ", "net_params", "[", "'L'", "]", "=", "int", "(", "args", ".", "L", ")", "\n", "", "if", "args", ".", "hidden_dim", "is", "not", "None", ":", "\n", "        ", "net_params", "[", "'hidden_dim'", "]", "=", "int", "(", "args", ".", "hidden_dim", ")", "\n", "", "if", "args", ".", "out_dim", "is", "not", "None", ":", "\n", "        ", "net_params", "[", "'out_dim'", "]", "=", "int", "(", "args", ".", "out_dim", ")", "\n", "", "if", "args", ".", "residual", "is", "not", "None", ":", "\n", "        ", "net_params", "[", "'residual'", "]", "=", "True", "if", "args", ".", "residual", "==", "'True'", "else", "False", "\n", "", "if", "args", ".", "edge_feat", "is", "not", "None", ":", "\n", "        ", "net_params", "[", "'edge_feat'", "]", "=", "True", "if", "args", ".", "edge_feat", "==", "'True'", "else", "False", "\n", "", "if", "args", ".", "readout", "is", "not", "None", ":", "\n", "        ", "net_params", "[", "'readout'", "]", "=", "args", ".", "readout", "\n", "", "if", "args", ".", "in_feat_dropout", "is", "not", "None", ":", "\n", "        ", "net_params", "[", "'in_feat_dropout'", "]", "=", "float", "(", "args", ".", "in_feat_dropout", ")", "\n", "", "if", "args", ".", "dropout", "is", "not", "None", ":", "\n", "        ", "net_params", "[", "'dropout'", "]", "=", "float", "(", "args", ".", "dropout", ")", "\n", "", "if", "args", ".", "graph_norm", "is", "not", "None", ":", "\n", "        ", "net_params", "[", "'graph_norm'", "]", "=", "True", "if", "args", ".", "graph_norm", "==", "'True'", "else", "False", "\n", "", "if", "args", ".", "batch_norm", "is", "not", "None", ":", "\n", "        ", "net_params", "[", "'batch_norm'", "]", "=", "True", "if", "args", ".", "batch_norm", "==", "'True'", "else", "False", "\n", "", "if", "args", ".", "aggregators", "is", "not", "None", ":", "\n", "        ", "net_params", "[", "'aggregators'", "]", "=", "args", ".", "aggregators", "\n", "", "if", "args", ".", "scalers", "is", "not", "None", ":", "\n", "        ", "net_params", "[", "'scalers'", "]", "=", "args", ".", "scalers", "\n", "", "if", "args", ".", "towers", "is", "not", "None", ":", "\n", "        ", "net_params", "[", "'towers'", "]", "=", "args", ".", "towers", "\n", "", "if", "args", ".", "divide_input_first", "is", "not", "None", ":", "\n", "        ", "net_params", "[", "'divide_input_first'", "]", "=", "args", ".", "divide_input_first", "\n", "", "if", "args", ".", "divide_input_last", "is", "not", "None", ":", "\n", "        ", "net_params", "[", "'divide_input_last'", "]", "=", "args", ".", "divide_input_last", "\n", "", "if", "args", ".", "edge_dim", "is", "not", "None", ":", "\n", "        ", "net_params", "[", "'edge_dim'", "]", "=", "args", ".", "edge_dim", "\n", "", "if", "args", ".", "pretrans_layers", "is", "not", "None", ":", "\n", "        ", "net_params", "[", "'pretrans_layers'", "]", "=", "args", ".", "pretrans_layers", "\n", "", "if", "args", ".", "posttrans_layers", "is", "not", "None", ":", "\n", "        ", "net_params", "[", "'posttrans_layers'", "]", "=", "args", ".", "posttrans_layers", "\n", "", "if", "args", ".", "type_net", "is", "not", "None", ":", "\n", "        ", "net_params", "[", "'type_net'", "]", "=", "args", ".", "type_net", "\n", "", "if", "args", ".", "pos_enc_dim", "is", "not", "None", ":", "\n", "        ", "net_params", "[", "'pos_enc_dim'", "]", "=", "args", ".", "pos_enc_dim", "\n", "\n", "", "D", "=", "torch", ".", "cat", "(", "[", "torch", ".", "sparse", ".", "sum", "(", "g", ".", "adjacency_matrix", "(", "transpose", "=", "True", ")", ",", "dim", "=", "-", "1", ")", ".", "to_dense", "(", ")", "for", "g", "in", "\n", "dataset", ".", "train", ".", "graph_lists", "]", ")", "\n", "net_params", "[", "'avg_d'", "]", "=", "dict", "(", "lin", "=", "torch", ".", "mean", "(", "D", ")", ",", "\n", "exp", "=", "torch", ".", "mean", "(", "torch", ".", "exp", "(", "torch", ".", "div", "(", "1", ",", "D", ")", ")", "-", "1", ")", ",", "\n", "log", "=", "torch", ".", "mean", "(", "torch", ".", "log", "(", "D", "+", "1", ")", ")", ")", "\n", "\n", "net_params", "[", "'total_param'", "]", "=", "view_model_param", "(", "net_params", ")", "\n", "train_val_pipeline", "(", "dataset", ",", "params", ",", "net_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.realworld_benchmark.main_PCBA.DotDict.__init__": [[21, 24], ["main_PCBA.DotDict.update"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwds", ")", ":", "\n", "        ", "self", ".", "update", "(", "kwds", ")", "\n", "self", ".", "__dict__", "=", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.realworld_benchmark.main_PCBA.gpu_setup": [[38, 49], ["str", "torch.cuda.is_available", "torch.cuda.is_available", "print", "torch.device", "torch.device", "print", "torch.device", "torch.device", "torch.cuda.get_device_name", "torch.cuda.get_device_name"], "function", ["None"], ["def", "gpu_setup", "(", "use_gpu", ",", "gpu_id", ")", ":", "\n", "    ", "os", ".", "environ", "[", "\"CUDA_DEVICE_ORDER\"", "]", "=", "\"PCI_BUS_ID\"", "\n", "os", ".", "environ", "[", "\"CUDA_VISIBLE_DEVICES\"", "]", "=", "str", "(", "gpu_id", ")", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "use_gpu", ":", "\n", "        ", "print", "(", "'cuda available with GPU:'", ",", "torch", ".", "cuda", ".", "get_device_name", "(", "0", ")", ")", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'cuda not available'", ")", "\n", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", "", "return", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.realworld_benchmark.main_PCBA.view_model_param": [[56, 64], ["nets.PCBA_graph_classification.dgn_net.DGNNet", "print", "nets.PCBA_graph_classification.dgn_net.DGNNet.parameters", "print", "numpy.prod", "list", "param.data.size"], "function", ["None"], ["def", "view_model_param", "(", "net_params", ")", ":", "\n", "    ", "model", "=", "DGNNet", "(", "net_params", ")", "\n", "total_param", "=", "0", "\n", "print", "(", "\"MODEL DETAILS:\\n\"", ")", "\n", "for", "param", "in", "model", ".", "parameters", "(", ")", ":", "\n", "        ", "total_param", "+=", "np", ".", "prod", "(", "list", "(", "param", ".", "data", ".", "size", "(", ")", ")", ")", "\n", "", "print", "(", "'DGN Total parameters:'", ",", "total_param", ")", "\n", "return", "total_param", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.realworld_benchmark.main_PCBA.train_val_pipeline": [[71, 169], ["time.time", "random.seed", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "print", "print", "print", "nets.PCBA_graph_classification.dgn_net.DGNNet", "model.to.to", "torch.Adam", "torch.lr_scheduler.ReduceLROnPlateau", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "numpy.argmax", "numpy.argmax", "print", "print", "print", "print", "print", "print", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "len", "len", "len", "model.to.parameters", "numpy.array", "numpy.array", "tqdm.tqdm", "print", "print", "numpy.mean", "range", "t.set_description", "time.time", "train.train_PCBA_graph_classification.train_epoch_sparse", "train.train_PCBA_graph_classification.evaluate_network_sparse", "epoch_train_losses.append", "epoch_val_losses.append", "epoch_train_APs.append", "epoch_val_APs.append", "train.train_PCBA_graph_classification.evaluate_network_sparse", "epoch_test_APs.append", "t.set_postfix", "per_epoch_time.append", "optim.lr_scheduler.ReduceLROnPlateau.step", "time.time", "model.to.reset_params", "epoch_train_ap.item", "epoch_val_ap.item", "epoch_test_ap.item", "print", "print", "print", "epoch_train_ap.item", "epoch_val_ap.item", "epoch_test_ap.item", "time.time", "epoch_val_ap.item", "time.time", "time.time"], "function", ["home.repos.pwc.inspect_result.Saro00_DGN.train.train_PCBA_graph_classification.train_epoch_sparse", "home.repos.pwc.inspect_result.Saro00_DGN.train.train_PCBA_graph_classification.evaluate_network_sparse", "home.repos.pwc.inspect_result.Saro00_DGN.train.train_PCBA_graph_classification.evaluate_network_sparse"], ["def", "train_val_pipeline", "(", "dataset", ",", "params", ",", "net_params", ")", ":", "\n", "    ", "t0", "=", "time", ".", "time", "(", ")", "\n", "per_epoch_time", "=", "[", "]", "\n", "\n", "trainset", ",", "valset", ",", "testset", "=", "dataset", ".", "train", ",", "dataset", ".", "val", ",", "dataset", ".", "test", "\n", "\n", "device", "=", "net_params", "[", "'device'", "]", "\n", "\n", "# setting seeds", "\n", "random", ".", "seed", "(", "params", "[", "'seed'", "]", ")", "\n", "np", ".", "random", ".", "seed", "(", "params", "[", "'seed'", "]", ")", "\n", "torch", ".", "manual_seed", "(", "params", "[", "'seed'", "]", ")", "\n", "if", "device", "==", "'cuda'", ":", "\n", "        ", "torch", ".", "cuda", ".", "manual_seed", "(", "params", "[", "'seed'", "]", ")", "\n", "\n", "", "print", "(", "\"Training Graphs: \"", ",", "len", "(", "trainset", ")", ")", "\n", "print", "(", "\"Validation Graphs: \"", ",", "len", "(", "valset", ")", ")", "\n", "print", "(", "\"Test Graphs: \"", ",", "len", "(", "testset", ")", ")", "\n", "\n", "model", "=", "DGNNet", "(", "net_params", ")", "\n", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "\n", "optimizer", "=", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "params", "[", "'init_lr'", "]", ",", "weight_decay", "=", "params", "[", "'weight_decay'", "]", ")", "\n", "scheduler", "=", "optim", ".", "lr_scheduler", ".", "ReduceLROnPlateau", "(", "optimizer", ",", "mode", "=", "'min'", ",", "\n", "factor", "=", "params", "[", "'lr_reduce_factor'", "]", ",", "\n", "patience", "=", "params", "[", "'lr_schedule_patience'", "]", ",", "\n", "verbose", "=", "True", ")", "\n", "\n", "epoch_train_losses", ",", "epoch_val_losses", "=", "[", "]", ",", "[", "]", "\n", "epoch_train_APs", ",", "epoch_val_APs", ",", "epoch_test_APs", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "train_loader", "=", "DataLoader", "(", "trainset", ",", "batch_size", "=", "params", "[", "'batch_size'", "]", ",", "shuffle", "=", "True", ",", "collate_fn", "=", "dataset", ".", "collate", ",", "pin_memory", "=", "True", ")", "\n", "val_loader", "=", "DataLoader", "(", "valset", ",", "batch_size", "=", "params", "[", "'batch_size'", "]", ",", "shuffle", "=", "False", ",", "collate_fn", "=", "dataset", ".", "collate", ",", "pin_memory", "=", "True", ")", "\n", "test_loader", "=", "DataLoader", "(", "testset", ",", "batch_size", "=", "params", "[", "'batch_size'", "]", ",", "shuffle", "=", "False", ",", "collate_fn", "=", "dataset", ".", "collate", ",", "pin_memory", "=", "True", ")", "\n", "\n", "# At any point you can hit Ctrl + C to break out of training early.", "\n", "try", ":", "\n", "        ", "with", "tqdm", "(", "range", "(", "params", "[", "'epochs'", "]", ")", ",", "unit", "=", "'epoch'", ")", "as", "t", ":", "\n", "            ", "for", "epoch", "in", "t", ":", "\n", "                ", "if", "epoch", "==", "-", "1", ":", "\n", "                    ", "model", ".", "reset_params", "(", ")", "\n", "\n", "\n", "", "t", ".", "set_description", "(", "'Epoch %d'", "%", "epoch", ")", "\n", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "\n", "epoch_train_loss", ",", "epoch_train_ap", ",", "optimizer", "=", "train_epoch", "(", "model", ",", "optimizer", ",", "device", ",", "train_loader", ",", "\n", "epoch", ")", "\n", "epoch_val_loss", ",", "epoch_val_ap", "=", "evaluate_network", "(", "model", ",", "device", ",", "val_loader", ",", "epoch", ")", "\n", "\n", "epoch_train_losses", ".", "append", "(", "epoch_train_loss", ")", "\n", "epoch_val_losses", ".", "append", "(", "epoch_val_loss", ")", "\n", "epoch_train_APs", ".", "append", "(", "epoch_train_ap", ".", "item", "(", ")", ")", "\n", "epoch_val_APs", ".", "append", "(", "epoch_val_ap", ".", "item", "(", ")", ")", "\n", "\n", "\n", "_", ",", "epoch_test_ap", "=", "evaluate_network", "(", "model", ",", "device", ",", "test_loader", ",", "epoch", ")", "\n", "epoch_test_APs", ".", "append", "(", "epoch_test_ap", ".", "item", "(", ")", ")", "\n", "\n", "t", ".", "set_postfix", "(", "time", "=", "time", ".", "time", "(", ")", "-", "start", ",", "lr", "=", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ",", "\n", "train_loss", "=", "epoch_train_loss", ",", "val_loss", "=", "epoch_val_loss", ",", "\n", "train_AP", "=", "epoch_train_ap", ".", "item", "(", ")", ",", "val_AP", "=", "epoch_val_ap", ".", "item", "(", ")", ",", "\n", "test_AP", "=", "epoch_test_ap", ".", "item", "(", ")", ",", "refresh", "=", "False", ")", "\n", "\n", "per_epoch_time", ".", "append", "(", "time", ".", "time", "(", ")", "-", "start", ")", "\n", "\n", "scheduler", ".", "step", "(", "-", "epoch_val_ap", ".", "item", "(", ")", ")", "\n", "\n", "if", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "<", "params", "[", "'min_lr'", "]", ":", "\n", "                    ", "print", "(", "\"\\n!! LR EQUAL TO MIN LR SET.\"", ")", "\n", "break", "\n", "\n", "# Stop training after params['max_time'] hours", "\n", "", "if", "time", ".", "time", "(", ")", "-", "t0", ">", "params", "[", "'max_time'", "]", "*", "3600", ":", "\n", "                    ", "print", "(", "'-'", "*", "89", ")", "\n", "print", "(", "\"Max_time for training elapsed {:.2f} hours, so stopping\"", ".", "format", "(", "params", "[", "'max_time'", "]", ")", ")", "\n", "break", "\n", "\n", "", "", "", "", "except", "KeyboardInterrupt", ":", "\n", "        ", "print", "(", "'-'", "*", "89", ")", "\n", "print", "(", "'Exiting from training early because of KeyboardInterrupt'", ")", "\n", "\n", "", "best_val_epoch", "=", "np", ".", "argmax", "(", "np", ".", "array", "(", "epoch_val_APs", ")", ")", "\n", "best_train_epoch", "=", "np", ".", "argmax", "(", "np", ".", "array", "(", "epoch_train_APs", ")", ")", "\n", "best_val_ap", "=", "epoch_val_APs", "[", "best_val_epoch", "]", "\n", "best_val_test_ap", "=", "epoch_test_APs", "[", "best_val_epoch", "]", "\n", "\n", "best_val_train_ap", "=", "epoch_train_APs", "[", "best_val_epoch", "]", "\n", "best_train_ap", "=", "epoch_train_APs", "[", "best_train_epoch", "]", "\n", "\n", "print", "(", "\"Best Train AP: {:.4f}\"", ".", "format", "(", "best_train_ap", ")", ")", "\n", "print", "(", "\"Best Val AP: {:.4f}\"", ".", "format", "(", "best_val_ap", ")", ")", "\n", "print", "(", "\"Test AP of Best Val: {:.4f}\"", ".", "format", "(", "best_val_test_ap", ")", ")", "\n", "print", "(", "\"Train AP of Best Val: {:.4f}\"", ".", "format", "(", "best_val_train_ap", ")", ")", "\n", "\n", "print", "(", "\"TOTAL TIME TAKEN: {:.4f}s\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "t0", ")", ")", "\n", "print", "(", "\"AVG TIME PER EPOCH: {:.4f}s\"", ".", "format", "(", "np", ".", "mean", "(", "per_epoch_time", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.realworld_benchmark.main_PCBA.main": [[172, 317], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "main_PCBA.gpu_setup", "data.PCBA.PCBADataset", "data.PCBA.PCBADataset.get_eig_test", "data.PCBA.PCBADataset.get_eig_val", "data.PCBA.PCBADataset.get_eig_train", "torch.cat", "torch.cat", "dict", "main_PCBA.view_model_param", "main_PCBA.train_val_pipeline", "open", "json.load", "int", "int", "int", "int", "float", "float", "int", "float", "float", "int", "float", "int", "int", "int", "float", "float", "torch.sparse.sum().to_dense", "torch.sparse.sum().to_dense", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.log", "torch.log", "torch.sparse.sum", "torch.sparse.sum", "torch.exp", "torch.exp", "g.adjacency_matrix", "torch.div", "torch.div"], "function", ["home.repos.pwc.inspect_result.Saro00_DGN.realworld_benchmark.main_superpixels.gpu_setup", "home.repos.pwc.inspect_result.Saro00_DGN.data.PCBA.PCBADataset.get_eig_test", "home.repos.pwc.inspect_result.Saro00_DGN.data.multiplicity_eig.get_eig_val", "home.repos.pwc.inspect_result.Saro00_DGN.data.PCBA.PCBADataset.get_eig_train", "home.repos.pwc.inspect_result.Saro00_DGN.realworld_benchmark.main_superpixels.view_model_param", "home.repos.pwc.inspect_result.Saro00_DGN.realworld_benchmark.main_superpixels.train_val_pipeline"], ["", "def", "main", "(", ")", ":", "\n", "    ", "\"\"\"\n        USER CONTROLS\n    \"\"\"", "\n", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--config'", ",", "help", "=", "\"Please give a config.json file with training/model/data/param details\"", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu_id'", ",", "help", "=", "\"Please give a value for gpu id\"", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "help", "=", "\"Please give a value for dataset name\"", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "help", "=", "\"Please give a value for seed\"", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "help", "=", "\"Please give a value for epochs\"", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "help", "=", "\"Please give a value for batch_size\"", ")", "\n", "parser", ".", "add_argument", "(", "'--init_lr'", ",", "help", "=", "\"Please give a value for init_lr\"", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_reduce_factor'", ",", "help", "=", "\"Please give a value for lr_reduce_factor\"", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_schedule_patience'", ",", "help", "=", "\"Please give a value for lr_schedule_patience\"", ")", "\n", "parser", ".", "add_argument", "(", "'--min_lr'", ",", "help", "=", "\"Please give a value for min_lr\"", ")", "\n", "parser", ".", "add_argument", "(", "'--weight_decay'", ",", "help", "=", "\"Please give a value for weight_decay\"", ")", "\n", "parser", ".", "add_argument", "(", "'--print_epoch_interval'", ",", "help", "=", "\"Please give a value for print_epoch_interval\"", ")", "\n", "parser", ".", "add_argument", "(", "'--L'", ",", "help", "=", "\"Please give a value for L\"", ")", "\n", "parser", ".", "add_argument", "(", "'--hidden_dim'", ",", "help", "=", "\"Please give a value for hidden_dim\"", ")", "\n", "parser", ".", "add_argument", "(", "'--out_dim'", ",", "help", "=", "\"Please give a value for out_dim\"", ")", "\n", "parser", ".", "add_argument", "(", "'--decreasing_dim'", ",", "default", "=", "'True'", ",", "help", "=", "\"Please give a value for decreasing_dim\"", ")", "\n", "parser", ".", "add_argument", "(", "'--residual'", ",", "help", "=", "\"Please give a value for residual\"", ")", "\n", "parser", ".", "add_argument", "(", "'--edge_feat'", ",", "help", "=", "\"Please give a value for edge_feat\"", ")", "\n", "parser", ".", "add_argument", "(", "'--readout'", ",", "help", "=", "\"Please give a value for readout\"", ")", "\n", "parser", ".", "add_argument", "(", "'--in_feat_dropout'", ",", "help", "=", "\"Please give a value for in_feat_dropout\"", ")", "\n", "parser", ".", "add_argument", "(", "'--dropout'", ",", "help", "=", "\"Please give a value for dropout\"", ")", "\n", "parser", ".", "add_argument", "(", "'--graph_norm'", ",", "help", "=", "\"Please give a value for graph_norm\"", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_norm'", ",", "help", "=", "\"Please give a value for batch_norm\"", ")", "\n", "parser", ".", "add_argument", "(", "'--max_time'", ",", "help", "=", "\"Please give a value for max_time\"", ")", "\n", "parser", ".", "add_argument", "(", "'--expid'", ",", "help", "=", "'Experiment id.'", ")", "\n", "parser", ".", "add_argument", "(", "'--type_net'", ",", "default", "=", "'simple'", ",", "help", "=", "'Type of net'", ")", "\n", "parser", ".", "add_argument", "(", "'--lap_norm'", ",", "default", "=", "'none'", ",", "help", "=", "'Laplacian normalisation'", ")", "\n", "\n", "# dgn params", "\n", "parser", ".", "add_argument", "(", "'--aggregators'", ",", "type", "=", "str", ",", "help", "=", "'Aggregators to use.'", ")", "\n", "parser", ".", "add_argument", "(", "'--scalers'", ",", "type", "=", "str", ",", "help", "=", "'Scalers to use.'", ")", "\n", "parser", ".", "add_argument", "(", "'--towers'", ",", "type", "=", "int", ",", "default", "=", "5", ",", "help", "=", "'Towers to use.'", ")", "\n", "parser", ".", "add_argument", "(", "'--divide_input_first'", ",", "type", "=", "bool", ",", "help", "=", "'Whether to divide the input in first layer.'", ")", "\n", "parser", ".", "add_argument", "(", "'--divide_input_last'", ",", "type", "=", "bool", ",", "help", "=", "'Whether to divide the input in last layers.'", ")", "\n", "parser", ".", "add_argument", "(", "'--edge_dim'", ",", "type", "=", "int", ",", "help", "=", "'Size of edge embeddings.'", ")", "\n", "parser", ".", "add_argument", "(", "'--pretrans_layers'", ",", "type", "=", "int", ",", "help", "=", "'pretrans_layers.'", ")", "\n", "parser", ".", "add_argument", "(", "'--posttrans_layers'", ",", "type", "=", "int", ",", "help", "=", "'posttrans_layers.'", ")", "\n", "parser", ".", "add_argument", "(", "'--virtual_node'", ",", "default", "=", "None", ",", "help", "=", "'virtual node type, \"none\", \"sum\", \"mean\", \"logsum\"'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "with", "open", "(", "args", ".", "config", ")", "as", "f", ":", "\n", "        ", "config", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "# device", "\n", "", "if", "args", ".", "gpu_id", "is", "not", "None", ":", "\n", "        ", "config", "[", "'gpu'", "]", "[", "'id'", "]", "=", "int", "(", "args", ".", "gpu_id", ")", "\n", "config", "[", "'gpu'", "]", "[", "'use'", "]", "=", "True", "\n", "", "device", "=", "gpu_setup", "(", "config", "[", "'gpu'", "]", "[", "'use'", "]", ",", "config", "[", "'gpu'", "]", "[", "'id'", "]", ")", "\n", "# dataset", "\n", "if", "args", ".", "dataset", "is", "not", "None", ":", "\n", "        ", "DATASET_NAME", "=", "args", ".", "dataset", "\n", "", "else", ":", "\n", "        ", "DATASET_NAME", "=", "config", "[", "'dataset'", "]", "\n", "\n", "", "dataset", "=", "PCBADataset", "(", "DATASET_NAME", ",", "norm", "=", "args", ".", "lap_norm", ")", "\n", "dataset", ".", "get_eig_test", "(", ")", "\n", "dataset", ".", "get_eig_val", "(", ")", "\n", "dataset", ".", "get_eig_train", "(", ")", "\n", "\n", "# parameters", "\n", "params", "=", "config", "[", "'params'", "]", "\n", "if", "args", ".", "seed", "is", "not", "None", ":", "\n", "        ", "params", "[", "'seed'", "]", "=", "int", "(", "args", ".", "seed", ")", "\n", "", "if", "args", ".", "epochs", "is", "not", "None", ":", "\n", "        ", "params", "[", "'epochs'", "]", "=", "int", "(", "args", ".", "epochs", ")", "\n", "", "if", "args", ".", "batch_size", "is", "not", "None", ":", "\n", "        ", "params", "[", "'batch_size'", "]", "=", "int", "(", "args", ".", "batch_size", ")", "\n", "", "if", "args", ".", "init_lr", "is", "not", "None", ":", "\n", "        ", "params", "[", "'init_lr'", "]", "=", "float", "(", "args", ".", "init_lr", ")", "\n", "", "if", "args", ".", "lr_reduce_factor", "is", "not", "None", ":", "\n", "        ", "params", "[", "'lr_reduce_factor'", "]", "=", "float", "(", "args", ".", "lr_reduce_factor", ")", "\n", "", "if", "args", ".", "lr_schedule_patience", "is", "not", "None", ":", "\n", "        ", "params", "[", "'lr_schedule_patience'", "]", "=", "int", "(", "args", ".", "lr_schedule_patience", ")", "\n", "", "if", "args", ".", "min_lr", "is", "not", "None", ":", "\n", "        ", "params", "[", "'min_lr'", "]", "=", "float", "(", "args", ".", "min_lr", ")", "\n", "", "if", "args", ".", "weight_decay", "is", "not", "None", ":", "\n", "        ", "params", "[", "'weight_decay'", "]", "=", "float", "(", "args", ".", "weight_decay", ")", "\n", "", "if", "args", ".", "print_epoch_interval", "is", "not", "None", ":", "\n", "        ", "params", "[", "'print_epoch_interval'", "]", "=", "int", "(", "args", ".", "print_epoch_interval", ")", "\n", "", "if", "args", ".", "max_time", "is", "not", "None", ":", "\n", "        ", "params", "[", "'max_time'", "]", "=", "float", "(", "args", ".", "max_time", ")", "\n", "\n", "# network parameters", "\n", "", "net_params", "=", "config", "[", "'net_params'", "]", "\n", "net_params", "[", "'device'", "]", "=", "device", "\n", "net_params", "[", "'gpu_id'", "]", "=", "config", "[", "'gpu'", "]", "[", "'id'", "]", "\n", "net_params", "[", "'batch_size'", "]", "=", "params", "[", "'batch_size'", "]", "\n", "net_params", "[", "'virtual_node'", "]", "=", "args", ".", "virtual_node", "\n", "\n", "if", "args", ".", "L", "is", "not", "None", ":", "\n", "        ", "net_params", "[", "'L'", "]", "=", "int", "(", "args", ".", "L", ")", "\n", "", "if", "args", ".", "hidden_dim", "is", "not", "None", ":", "\n", "        ", "net_params", "[", "'hidden_dim'", "]", "=", "int", "(", "args", ".", "hidden_dim", ")", "\n", "", "if", "args", ".", "out_dim", "is", "not", "None", ":", "\n", "        ", "net_params", "[", "'out_dim'", "]", "=", "int", "(", "args", ".", "out_dim", ")", "\n", "", "if", "args", ".", "decreasing_dim", "is", "not", "None", ":", "\n", "        ", "net_params", "[", "'decreasing_dim'", "]", "=", "True", "if", "args", ".", "decreasing_dim", "==", "'True'", "else", "False", "\n", "", "if", "args", ".", "residual", "is", "not", "None", ":", "\n", "        ", "net_params", "[", "'residual'", "]", "=", "True", "if", "args", ".", "residual", "==", "'True'", "else", "False", "\n", "", "if", "args", ".", "edge_feat", "is", "not", "None", ":", "\n", "        ", "net_params", "[", "'edge_feat'", "]", "=", "True", "if", "args", ".", "edge_feat", "==", "'True'", "else", "False", "\n", "", "if", "args", ".", "readout", "is", "not", "None", ":", "\n", "        ", "net_params", "[", "'readout'", "]", "=", "args", ".", "readout", "\n", "", "if", "args", ".", "in_feat_dropout", "is", "not", "None", ":", "\n", "        ", "net_params", "[", "'in_feat_dropout'", "]", "=", "float", "(", "args", ".", "in_feat_dropout", ")", "\n", "", "if", "args", ".", "dropout", "is", "not", "None", ":", "\n", "        ", "net_params", "[", "'dropout'", "]", "=", "float", "(", "args", ".", "dropout", ")", "\n", "", "if", "args", ".", "graph_norm", "is", "not", "None", ":", "\n", "        ", "net_params", "[", "'graph_norm'", "]", "=", "True", "if", "args", ".", "graph_norm", "==", "'True'", "else", "False", "\n", "", "if", "args", ".", "batch_norm", "is", "not", "None", ":", "\n", "        ", "net_params", "[", "'batch_norm'", "]", "=", "True", "if", "args", ".", "batch_norm", "==", "'True'", "else", "False", "\n", "", "if", "args", ".", "aggregators", "is", "not", "None", ":", "\n", "        ", "net_params", "[", "'aggregators'", "]", "=", "args", ".", "aggregators", "\n", "", "if", "args", ".", "scalers", "is", "not", "None", ":", "\n", "        ", "net_params", "[", "'scalers'", "]", "=", "args", ".", "scalers", "\n", "", "if", "args", ".", "towers", "is", "not", "None", ":", "\n", "        ", "net_params", "[", "'towers'", "]", "=", "args", ".", "towers", "\n", "", "if", "args", ".", "divide_input_first", "is", "not", "None", ":", "\n", "        ", "net_params", "[", "'divide_input_first'", "]", "=", "args", ".", "divide_input_first", "\n", "", "if", "args", ".", "divide_input_last", "is", "not", "None", ":", "\n", "        ", "net_params", "[", "'divide_input_last'", "]", "=", "args", ".", "divide_input_last", "\n", "", "if", "args", ".", "edge_dim", "is", "not", "None", ":", "\n", "        ", "net_params", "[", "'edge_dim'", "]", "=", "args", ".", "edge_dim", "\n", "", "if", "args", ".", "pretrans_layers", "is", "not", "None", ":", "\n", "        ", "net_params", "[", "'pretrans_layers'", "]", "=", "args", ".", "pretrans_layers", "\n", "", "if", "args", ".", "posttrans_layers", "is", "not", "None", ":", "\n", "        ", "net_params", "[", "'posttrans_layers'", "]", "=", "args", ".", "posttrans_layers", "\n", "", "if", "args", ".", "type_net", "is", "not", "None", ":", "\n", "        ", "net_params", "[", "'type_net'", "]", "=", "args", ".", "type_net", "\n", "\n", "", "D", "=", "torch", ".", "cat", "(", "[", "torch", ".", "sparse", ".", "sum", "(", "g", ".", "adjacency_matrix", "(", "transpose", "=", "True", ")", ",", "dim", "=", "-", "1", ")", ".", "to_dense", "(", ")", "for", "g", "in", "\n", "dataset", ".", "train", ".", "graph_lists", "]", ")", "\n", "net_params", "[", "'avg_d'", "]", "=", "dict", "(", "lin", "=", "torch", ".", "mean", "(", "D", ")", ",", "\n", "exp", "=", "torch", ".", "mean", "(", "torch", ".", "exp", "(", "torch", ".", "div", "(", "1", ",", "D", ")", ")", "-", "1", ")", ",", "\n", "log", "=", "torch", ".", "mean", "(", "torch", ".", "log", "(", "D", "+", "1", ")", ")", ")", "\n", "\n", "net_params", "[", "'total_param'", "]", "=", "view_model_param", "(", "net_params", ")", "\n", "train_val_pipeline", "(", "dataset", ",", "params", ",", "net_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.realworld_benchmark.main_superpixels.DotDict.__init__": [[24, 27], ["main_superpixels.DotDict.update"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwds", ")", ":", "\n", "        ", "self", ".", "update", "(", "kwds", ")", "\n", "self", ".", "__dict__", "=", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.realworld_benchmark.main_superpixels.gpu_setup": [[40, 51], ["str", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "print", "torch.device", "torch.device", "torch.device", "torch.device", "print", "torch.device", "torch.device", "torch.device", "torch.device", "torch.cuda.get_device_name", "torch.cuda.get_device_name", "torch.cuda.get_device_name", "torch.cuda.get_device_name"], "function", ["None"], ["def", "gpu_setup", "(", "use_gpu", ",", "gpu_id", ")", ":", "\n", "    ", "os", ".", "environ", "[", "\"CUDA_DEVICE_ORDER\"", "]", "=", "\"PCI_BUS_ID\"", "\n", "os", ".", "environ", "[", "\"CUDA_VISIBLE_DEVICES\"", "]", "=", "str", "(", "gpu_id", ")", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "use_gpu", ":", "\n", "        ", "print", "(", "'cuda available with GPU:'", ",", "torch", ".", "cuda", ".", "get_device_name", "(", "0", ")", ")", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'cuda not available'", ")", "\n", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", "", "return", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.realworld_benchmark.main_superpixels.view_model_param": [[57, 65], ["nets.superpixels_graph_classification.dgn_net.DGNNet", "print", "nets.superpixels_graph_classification.dgn_net.DGNNet.parameters", "print", "numpy.prod", "list", "param.data.size"], "function", ["None"], ["def", "view_model_param", "(", "net_params", ")", ":", "\n", "    ", "model", "=", "DGNNet", "(", "net_params", ")", "\n", "total_param", "=", "0", "\n", "print", "(", "\"MODEL DETAILS:\\n\"", ")", "\n", "for", "param", "in", "model", ".", "parameters", "(", ")", ":", "\n", "        ", "total_param", "+=", "np", ".", "prod", "(", "list", "(", "param", ".", "data", ".", "size", "(", ")", ")", ")", "\n", "", "print", "(", "'MODEL/Total parameters:'", ",", "total_param", ")", "\n", "return", "total_param", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.realworld_benchmark.main_superpixels.train_val_pipeline": [[71, 156], ["time.time", "random.seed", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "print", "print", "print", "nets.superpixels_graph_classification.dgn_net.DGNNet", "model.to.to", "torch.Adam", "torch.lr_scheduler.ReduceLROnPlateau", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "train.train_superpixels_graph_classification.evaluate_network", "train.train_superpixels_graph_classification.evaluate_network", "train.train_superpixels_graph_classification.evaluate_network", "print", "print", "print", "print", "print", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "len", "len", "len", "model.to.parameters", "tqdm.tqdm", "print", "print", "numpy.mean", "range", "t.set_description", "time.time", "train.train_superpixels_graph_classification.train_epoch", "train.train_superpixels_graph_classification.evaluate_network", "epoch_train_losses.append", "epoch_val_losses.append", "epoch_train_accs.append", "epoch_val_accs.append", "train.train_superpixels_graph_classification.evaluate_network", "t.set_postfix", "per_epoch_time.append", "optim.lr_scheduler.ReduceLROnPlateau.step", "time.time", "print", "print", "print", "time.time", "time.time", "time.time"], "function", ["home.repos.pwc.inspect_result.Saro00_DGN.train.train_molecules_graph_regression.evaluate_network", "home.repos.pwc.inspect_result.Saro00_DGN.train.train_molecules_graph_regression.evaluate_network", "home.repos.pwc.inspect_result.Saro00_DGN.train.train_molecules_graph_regression.evaluate_network", "home.repos.pwc.inspect_result.Saro00_DGN.train.train_molecules_graph_regression.train_epoch", "home.repos.pwc.inspect_result.Saro00_DGN.train.train_molecules_graph_regression.evaluate_network", "home.repos.pwc.inspect_result.Saro00_DGN.train.train_molecules_graph_regression.evaluate_network"], ["def", "train_val_pipeline", "(", "dataset", ",", "params", ",", "net_params", ")", ":", "\n", "    ", "t0", "=", "time", ".", "time", "(", ")", "\n", "per_epoch_time", "=", "[", "]", "\n", "trainset", ",", "valset", ",", "testset", "=", "dataset", ".", "train", ",", "dataset", ".", "val", ",", "dataset", ".", "test", "\n", "device", "=", "net_params", "[", "'device'", "]", "\n", "\n", "# setting seeds", "\n", "random", ".", "seed", "(", "params", "[", "'seed'", "]", ")", "\n", "np", ".", "random", ".", "seed", "(", "params", "[", "'seed'", "]", ")", "\n", "torch", ".", "manual_seed", "(", "params", "[", "'seed'", "]", ")", "\n", "if", "device", "==", "'cuda'", ":", "\n", "        ", "torch", ".", "cuda", ".", "manual_seed", "(", "params", "[", "'seed'", "]", ")", "\n", "\n", "", "print", "(", "\"Training Graphs: \"", ",", "len", "(", "trainset", ")", ")", "\n", "print", "(", "\"Validation Graphs: \"", ",", "len", "(", "valset", ")", ")", "\n", "print", "(", "\"Test Graphs: \"", ",", "len", "(", "testset", ")", ")", "\n", "\n", "model", "=", "DGNNet", "(", "net_params", ")", "\n", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "\n", "optimizer", "=", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "params", "[", "'init_lr'", "]", ",", "weight_decay", "=", "params", "[", "'weight_decay'", "]", ")", "\n", "scheduler", "=", "optim", ".", "lr_scheduler", ".", "ReduceLROnPlateau", "(", "optimizer", ",", "mode", "=", "'min'", ",", "\n", "factor", "=", "params", "[", "'lr_reduce_factor'", "]", ",", "\n", "patience", "=", "params", "[", "'lr_schedule_patience'", "]", ")", "\n", "\n", "start_epoch", "=", "0", "\n", "\n", "epoch_train_losses", ",", "epoch_val_losses", "=", "[", "]", ",", "[", "]", "\n", "epoch_train_accs", ",", "epoch_val_accs", "=", "[", "]", ",", "[", "]", "\n", "\n", "train_loader", "=", "DataLoader", "(", "trainset", ",", "batch_size", "=", "params", "[", "'batch_size'", "]", ",", "shuffle", "=", "True", ",", "collate_fn", "=", "dataset", ".", "collate", ")", "\n", "val_loader", "=", "DataLoader", "(", "valset", ",", "batch_size", "=", "params", "[", "'batch_size'", "]", ",", "shuffle", "=", "False", ",", "collate_fn", "=", "dataset", ".", "collate", ")", "\n", "test_loader", "=", "DataLoader", "(", "testset", ",", "batch_size", "=", "params", "[", "'batch_size'", "]", ",", "shuffle", "=", "False", ",", "collate_fn", "=", "dataset", ".", "collate", ")", "\n", "\n", "# At any point you can hit Ctrl + C to break out of training early.", "\n", "try", ":", "\n", "        ", "with", "tqdm", "(", "range", "(", "start_epoch", ",", "params", "[", "'epochs'", "]", ")", ",", "mininterval", "=", "params", "[", "'print_epoch_interval'", "]", ",", "\n", "maxinterval", "=", "None", ",", "unit", "=", "'epoch'", ",", "initial", "=", "start_epoch", ",", "total", "=", "params", "[", "'epochs'", "]", ")", "as", "t", ":", "\n", "            ", "for", "epoch", "in", "t", ":", "\n", "\n", "                ", "t", ".", "set_description", "(", "'Epoch %d'", "%", "epoch", ")", "\n", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "\n", "epoch_train_loss", ",", "epoch_train_acc", ",", "optimizer", "=", "train_epoch", "(", "model", ",", "optimizer", ",", "device", ",", "train_loader", ",", "\n", "epoch", ",", "net_params", "[", "'augmentation'", "]", ",", "net_params", "[", "'flip'", "]", ",", "net_params", "[", "'distortion'", "]", ")", "\n", "epoch_val_loss", ",", "epoch_val_acc", "=", "evaluate_network", "(", "model", ",", "device", ",", "val_loader", ",", "epoch", ")", "\n", "\n", "epoch_train_losses", ".", "append", "(", "epoch_train_loss", ")", "\n", "epoch_val_losses", ".", "append", "(", "epoch_val_loss", ")", "\n", "epoch_train_accs", ".", "append", "(", "epoch_train_acc", ")", "\n", "epoch_val_accs", ".", "append", "(", "epoch_val_acc", ")", "\n", "\n", "_", ",", "epoch_test_acc", "=", "evaluate_network", "(", "model", ",", "device", ",", "test_loader", ",", "epoch", ")", "\n", "t", ".", "set_postfix", "(", "time", "=", "time", ".", "time", "(", ")", "-", "start", ",", "lr", "=", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ",", "\n", "train_loss", "=", "epoch_train_loss", ",", "val_loss", "=", "epoch_val_loss", ",", "\n", "train_acc", "=", "epoch_train_acc", ",", "val_acc", "=", "epoch_val_acc", ",", "\n", "test_acc", "=", "epoch_test_acc", ")", "\n", "\n", "per_epoch_time", ".", "append", "(", "time", ".", "time", "(", ")", "-", "start", ")", "\n", "\n", "scheduler", ".", "step", "(", "epoch_val_loss", ")", "\n", "\n", "if", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "<", "params", "[", "'min_lr'", "]", ":", "\n", "                    ", "print", "(", "\"\\n!! LR EQUAL TO MIN LR SET.\"", ")", "\n", "break", "\n", "\n", "# Stop training after params['max_time'] hours", "\n", "", "if", "time", ".", "time", "(", ")", "-", "t0", ">", "params", "[", "'max_time'", "]", "*", "3600", ":", "\n", "                    ", "print", "(", "'-'", "*", "89", ")", "\n", "print", "(", "\"Max_time for training elapsed {:.2f} hours, so stopping\"", ".", "format", "(", "params", "[", "'max_time'", "]", ")", ")", "\n", "break", "\n", "\n", "", "", "", "", "except", "KeyboardInterrupt", ":", "\n", "        ", "print", "(", "'-'", "*", "89", ")", "\n", "print", "(", "'Exiting from training early because of KeyboardInterrupt'", ")", "\n", "\n", "", "_", ",", "test_acc", "=", "evaluate_network", "(", "model", ",", "device", ",", "test_loader", ",", "epoch", ")", "\n", "_", ",", "val_acc", "=", "evaluate_network", "(", "model", ",", "device", ",", "val_loader", ",", "epoch", ")", "\n", "_", ",", "train_acc", "=", "evaluate_network", "(", "model", ",", "device", ",", "train_loader", ",", "epoch", ")", "\n", "print", "(", "\"Test Accuracy: {:.4f}\"", ".", "format", "(", "test_acc", ")", ")", "\n", "print", "(", "\"Val Accuracy: {:.4f}\"", ".", "format", "(", "val_acc", ")", ")", "\n", "print", "(", "\"Train Accuracy: {:.4f}\"", ".", "format", "(", "train_acc", ")", ")", "\n", "print", "(", "\"TOTAL TIME TAKEN: {:.4f}s\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "t0", ")", ")", "\n", "print", "(", "\"AVG TIME PER EPOCH: {:.4f}s\"", ".", "format", "(", "np", ".", "mean", "(", "per_epoch_time", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.realworld_benchmark.main_superpixels.main": [[158, 314], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "main_superpixels.gpu_setup", "data.superpixels.SuperPixDataset", "[].size", "[].size", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "dict", "main_superpixels.view_model_param", "main_superpixels.train_val_pipeline", "open", "json.load", "int", "int", "int", "int", "float", "float", "int", "float", "float", "int", "float", "int", "int", "int", "float", "float", "numpy.unique", "numpy.array", "torch.sparse.sum().to_dense", "torch.sparse.sum().to_dense", "torch.sparse.sum().to_dense", "torch.sparse.sum().to_dense", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.log", "torch.log", "torch.log", "torch.log", "torch.sparse.sum", "torch.sparse.sum", "torch.sparse.sum", "torch.sparse.sum", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "g.adjacency_matrix", "torch.div", "torch.div", "torch.div", "torch.div"], "function", ["home.repos.pwc.inspect_result.Saro00_DGN.realworld_benchmark.main_superpixels.gpu_setup", "home.repos.pwc.inspect_result.Saro00_DGN.realworld_benchmark.main_superpixels.view_model_param", "home.repos.pwc.inspect_result.Saro00_DGN.realworld_benchmark.main_superpixels.train_val_pipeline"], ["", "def", "main", "(", ")", ":", "\n", "    ", "\"\"\"\n        USER CONTROLS\n    \"\"\"", "\n", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--config'", ",", "help", "=", "\"Please give a config.json file with training/model/data/param details\"", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu_id'", ",", "help", "=", "\"Please give a value for gpu id\"", ")", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "help", "=", "\"Please give a value for model name\"", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "help", "=", "\"Please give a value for dataset name\"", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "help", "=", "\"Please give a value for seed\"", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "help", "=", "\"Please give a value for epochs\"", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "help", "=", "\"Please give a value for batch_size\"", ")", "\n", "parser", ".", "add_argument", "(", "'--init_lr'", ",", "help", "=", "\"Please give a value for init_lr\"", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_reduce_factor'", ",", "help", "=", "\"Please give a value for lr_reduce_factor\"", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_schedule_patience'", ",", "help", "=", "\"Please give a value for lr_schedule_patience\"", ")", "\n", "parser", ".", "add_argument", "(", "'--min_lr'", ",", "help", "=", "\"Please give a value for min_lr\"", ")", "\n", "parser", ".", "add_argument", "(", "'--weight_decay'", ",", "help", "=", "\"Please give a value for weight_decay\"", ")", "\n", "parser", ".", "add_argument", "(", "'--print_epoch_interval'", ",", "help", "=", "\"Please give a value for print_epoch_interval\"", ")", "\n", "parser", ".", "add_argument", "(", "'--L'", ",", "help", "=", "\"Please give a value for L\"", ")", "\n", "parser", ".", "add_argument", "(", "'--hidden_dim'", ",", "help", "=", "\"Please give a value for hidden_dim\"", ")", "\n", "parser", ".", "add_argument", "(", "'--out_dim'", ",", "help", "=", "\"Please give a value for out_dim\"", ")", "\n", "parser", ".", "add_argument", "(", "'--residual'", ",", "help", "=", "\"Please give a value for residual\"", ")", "\n", "parser", ".", "add_argument", "(", "'--edge_feat'", ",", "help", "=", "\"Please give a value for edge_feat\"", ")", "\n", "parser", ".", "add_argument", "(", "'--readout'", ",", "help", "=", "\"Please give a value for readout\"", ")", "\n", "parser", ".", "add_argument", "(", "'--in_feat_dropout'", ",", "help", "=", "\"Please give a value for in_feat_dropout\"", ")", "\n", "parser", ".", "add_argument", "(", "'--dropout'", ",", "help", "=", "\"Please give a value for dropout\"", ")", "\n", "parser", ".", "add_argument", "(", "'--graph_norm'", ",", "help", "=", "\"Please give a value for graph_norm\"", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_norm'", ",", "help", "=", "\"Please give a value for batch_norm\"", ")", "\n", "parser", ".", "add_argument", "(", "'--max_time'", ",", "help", "=", "\"Please give a value for max_time\"", ")", "\n", "parser", ".", "add_argument", "(", "'--expid'", ",", "help", "=", "'Experiment id.'", ")", "\n", "parser", ".", "add_argument", "(", "'--type_net'", ",", "default", "=", "'simple'", ",", "help", "=", "'Type of net'", ")", "\n", "parser", ".", "add_argument", "(", "'--lap_norm'", ",", "default", "=", "'none'", ",", "help", "=", "'Laplacian normalisation'", ")", "\n", "parser", ".", "add_argument", "(", "'--augmentation'", ",", "type", "=", "float", ",", "default", "=", "0.", ",", "help", "=", "'Dynamically augmenting with rotations, angle in degrees'", ")", "\n", "parser", ".", "add_argument", "(", "'--distortion'", ",", "type", "=", "float", ",", "default", "=", "0.", ",", "help", "=", "'Distortion of the vector field'", ")", "\n", "parser", ".", "add_argument", "(", "'--proportion'", ",", "type", "=", "float", ",", "default", "=", "1.", ",", "help", "=", "'Proportion of the dataset to use'", ")", "\n", "parser", ".", "add_argument", "(", "'--flip'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "help", "=", "'Flip x-axis'", ")", "\n", "\n", "\n", "# eig params", "\n", "parser", ".", "add_argument", "(", "'--coord_eig'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "help", "=", "'Having the coord. weights'", ")", "\n", "parser", ".", "add_argument", "(", "'--aggregators'", ",", "type", "=", "str", ",", "help", "=", "'Aggregators to use.'", ")", "\n", "parser", ".", "add_argument", "(", "'--scalers'", ",", "type", "=", "str", ",", "help", "=", "'Scalers to use.'", ")", "\n", "parser", ".", "add_argument", "(", "'--towers'", ",", "type", "=", "int", ",", "help", "=", "'Towers to use.'", ")", "\n", "parser", ".", "add_argument", "(", "'--divide_input_first'", ",", "type", "=", "bool", ",", "help", "=", "'Whether to divide the input in first layers.'", ")", "\n", "parser", ".", "add_argument", "(", "'--divide_input_last'", ",", "type", "=", "bool", ",", "help", "=", "'Whether to divide the input in last layer.'", ")", "\n", "parser", ".", "add_argument", "(", "'--edge_dim'", ",", "type", "=", "int", ",", "help", "=", "'Size of edge embeddings.'", ")", "\n", "parser", ".", "add_argument", "(", "'--pretrans_layers'", ",", "type", "=", "int", ",", "help", "=", "'pretrans_layers.'", ")", "\n", "parser", ".", "add_argument", "(", "'--posttrans_layers'", ",", "type", "=", "int", ",", "help", "=", "'posttrans_layers.'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "with", "open", "(", "args", ".", "config", ")", "as", "f", ":", "\n", "        ", "config", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "# device", "\n", "", "if", "args", ".", "gpu_id", "is", "not", "None", ":", "\n", "        ", "config", "[", "'gpu'", "]", "[", "'id'", "]", "=", "int", "(", "args", ".", "gpu_id", ")", "\n", "config", "[", "'gpu'", "]", "[", "'use'", "]", "=", "True", "\n", "", "device", "=", "gpu_setup", "(", "config", "[", "'gpu'", "]", "[", "'use'", "]", ",", "config", "[", "'gpu'", "]", "[", "'id'", "]", ")", "\n", "\n", "# dataset", "\n", "if", "args", ".", "dataset", "is", "not", "None", ":", "\n", "        ", "DATASET_NAME", "=", "args", ".", "dataset", "\n", "", "else", ":", "\n", "        ", "DATASET_NAME", "=", "config", "[", "'dataset'", "]", "\n", "", "dataset", "=", "SuperPixDataset", "(", "DATASET_NAME", ",", "coord_eig", "=", "args", ".", "coord_eig", ",", "\n", "proportion", "=", "args", ".", "proportion", ")", "\n", "# parameters", "\n", "params", "=", "config", "[", "'params'", "]", "\n", "if", "args", ".", "seed", "is", "not", "None", ":", "\n", "        ", "params", "[", "'seed'", "]", "=", "int", "(", "args", ".", "seed", ")", "\n", "", "if", "args", ".", "epochs", "is", "not", "None", ":", "\n", "        ", "params", "[", "'epochs'", "]", "=", "int", "(", "args", ".", "epochs", ")", "\n", "", "if", "args", ".", "batch_size", "is", "not", "None", ":", "\n", "        ", "params", "[", "'batch_size'", "]", "=", "int", "(", "args", ".", "batch_size", ")", "\n", "", "if", "args", ".", "init_lr", "is", "not", "None", ":", "\n", "        ", "params", "[", "'init_lr'", "]", "=", "float", "(", "args", ".", "init_lr", ")", "\n", "", "if", "args", ".", "lr_reduce_factor", "is", "not", "None", ":", "\n", "        ", "params", "[", "'lr_reduce_factor'", "]", "=", "float", "(", "args", ".", "lr_reduce_factor", ")", "\n", "", "if", "args", ".", "lr_schedule_patience", "is", "not", "None", ":", "\n", "        ", "params", "[", "'lr_schedule_patience'", "]", "=", "int", "(", "args", ".", "lr_schedule_patience", ")", "\n", "", "if", "args", ".", "min_lr", "is", "not", "None", ":", "\n", "        ", "params", "[", "'min_lr'", "]", "=", "float", "(", "args", ".", "min_lr", ")", "\n", "", "if", "args", ".", "weight_decay", "is", "not", "None", ":", "\n", "        ", "params", "[", "'weight_decay'", "]", "=", "float", "(", "args", ".", "weight_decay", ")", "\n", "", "if", "args", ".", "print_epoch_interval", "is", "not", "None", ":", "\n", "        ", "params", "[", "'print_epoch_interval'", "]", "=", "int", "(", "args", ".", "print_epoch_interval", ")", "\n", "", "if", "args", ".", "max_time", "is", "not", "None", ":", "\n", "        ", "params", "[", "'max_time'", "]", "=", "float", "(", "args", ".", "max_time", ")", "\n", "\n", "# network parameters", "\n", "", "net_params", "=", "config", "[", "'net_params'", "]", "\n", "net_params", "[", "'device'", "]", "=", "device", "\n", "net_params", "[", "'gpu_id'", "]", "=", "config", "[", "'gpu'", "]", "[", "'id'", "]", "\n", "net_params", "[", "'batch_size'", "]", "=", "params", "[", "'batch_size'", "]", "\n", "\n", "if", "args", ".", "L", "is", "not", "None", ":", "\n", "        ", "net_params", "[", "'L'", "]", "=", "int", "(", "args", ".", "L", ")", "\n", "", "if", "args", ".", "hidden_dim", "is", "not", "None", ":", "\n", "        ", "net_params", "[", "'hidden_dim'", "]", "=", "int", "(", "args", ".", "hidden_dim", ")", "\n", "", "if", "args", ".", "out_dim", "is", "not", "None", ":", "\n", "        ", "net_params", "[", "'out_dim'", "]", "=", "int", "(", "args", ".", "out_dim", ")", "\n", "", "if", "args", ".", "residual", "is", "not", "None", ":", "\n", "        ", "net_params", "[", "'residual'", "]", "=", "True", "if", "args", ".", "residual", "==", "'True'", "else", "False", "\n", "", "if", "args", ".", "edge_feat", "is", "not", "None", ":", "\n", "        ", "net_params", "[", "'edge_feat'", "]", "=", "True", "if", "args", ".", "edge_feat", "==", "'True'", "else", "False", "\n", "", "if", "args", ".", "readout", "is", "not", "None", ":", "\n", "        ", "net_params", "[", "'readout'", "]", "=", "args", ".", "readout", "\n", "", "if", "args", ".", "in_feat_dropout", "is", "not", "None", ":", "\n", "        ", "net_params", "[", "'in_feat_dropout'", "]", "=", "float", "(", "args", ".", "in_feat_dropout", ")", "\n", "", "if", "args", ".", "dropout", "is", "not", "None", ":", "\n", "        ", "net_params", "[", "'dropout'", "]", "=", "float", "(", "args", ".", "dropout", ")", "\n", "", "if", "args", ".", "graph_norm", "is", "not", "None", ":", "\n", "        ", "net_params", "[", "'graph_norm'", "]", "=", "True", "if", "args", ".", "graph_norm", "==", "'True'", "else", "False", "\n", "", "if", "args", ".", "batch_norm", "is", "not", "None", ":", "\n", "        ", "net_params", "[", "'batch_norm'", "]", "=", "True", "if", "args", ".", "batch_norm", "==", "'True'", "else", "False", "\n", "", "if", "args", ".", "aggregators", "is", "not", "None", ":", "\n", "        ", "net_params", "[", "'aggregators'", "]", "=", "args", ".", "aggregators", "\n", "", "if", "args", ".", "scalers", "is", "not", "None", ":", "\n", "        ", "net_params", "[", "'scalers'", "]", "=", "args", ".", "scalers", "\n", "", "if", "args", ".", "towers", "is", "not", "None", ":", "\n", "        ", "net_params", "[", "'towers'", "]", "=", "args", ".", "towers", "\n", "", "if", "args", ".", "divide_input_first", "is", "not", "None", ":", "\n", "        ", "net_params", "[", "'divide_input_first'", "]", "=", "args", ".", "divide_input_first", "\n", "", "if", "args", ".", "divide_input_last", "is", "not", "None", ":", "\n", "        ", "net_params", "[", "'divide_input_last'", "]", "=", "args", ".", "divide_input_last", "\n", "", "if", "args", ".", "edge_dim", "is", "not", "None", ":", "\n", "        ", "net_params", "[", "'edge_dim'", "]", "=", "args", ".", "edge_dim", "\n", "", "if", "args", ".", "pretrans_layers", "is", "not", "None", ":", "\n", "        ", "net_params", "[", "'pretrans_layers'", "]", "=", "args", ".", "pretrans_layers", "\n", "", "if", "args", ".", "posttrans_layers", "is", "not", "None", ":", "\n", "        ", "net_params", "[", "'posttrans_layers'", "]", "=", "args", ".", "posttrans_layers", "\n", "", "if", "args", ".", "type_net", "is", "not", "None", ":", "\n", "        ", "net_params", "[", "'type_net'", "]", "=", "args", ".", "type_net", "\n", "", "if", "args", ".", "distortion", "is", "not", "None", ":", "\n", "        ", "net_params", "[", "'distortion'", "]", "=", "args", ".", "distortion", "\n", "", "if", "args", ".", "augmentation", "is", "not", "None", ":", "\n", "        ", "net_params", "[", "'augmentation'", "]", "=", "args", ".", "augmentation", "\n", "", "if", "args", ".", "flip", "is", "not", "None", ":", "\n", "        ", "net_params", "[", "'flip'", "]", "=", "args", ".", "flip", "\n", "\n", "# Superpixels", "\n", "", "net_params", "[", "'in_dim'", "]", "=", "dataset", ".", "train", "[", "0", "]", "[", "0", "]", ".", "ndata", "[", "'feat'", "]", "[", "0", "]", ".", "size", "(", "0", ")", "\n", "net_params", "[", "'in_dim_edge'", "]", "=", "dataset", ".", "train", "[", "0", "]", "[", "0", "]", ".", "edata", "[", "'feat'", "]", "[", "0", "]", ".", "size", "(", "0", ")", "\n", "num_classes", "=", "len", "(", "np", ".", "unique", "(", "np", ".", "array", "(", "dataset", ".", "train", "[", ":", "]", "[", "1", "]", ")", ")", ")", "\n", "net_params", "[", "'n_classes'", "]", "=", "num_classes", "\n", "\n", "# calculate logarithmic average degree for scalers", "\n", "D", "=", "torch", ".", "cat", "(", "[", "torch", ".", "sparse", ".", "sum", "(", "g", ".", "adjacency_matrix", "(", "transpose", "=", "True", ")", ",", "dim", "=", "-", "1", ")", ".", "to_dense", "(", ")", "for", "g", "in", "\n", "dataset", ".", "train", ".", "graph_lists", "]", ")", "\n", "net_params", "[", "'avg_d'", "]", "=", "dict", "(", "lin", "=", "torch", ".", "mean", "(", "D", ")", ",", "\n", "exp", "=", "torch", ".", "mean", "(", "torch", ".", "exp", "(", "torch", ".", "div", "(", "1", ",", "D", ")", ")", "-", "1", ")", ",", "\n", "log", "=", "torch", ".", "mean", "(", "torch", ".", "log", "(", "D", "+", "1", ")", ")", ")", "\n", "\n", "net_params", "[", "'total_param'", "]", "=", "view_model_param", "(", "net_params", ")", "\n", "train_val_pipeline", "(", "dataset", ",", "params", ",", "net_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.train.train_COLLAB_edge_classification.train_epoch_sparse": [[19, 64], ["model.train", "train_edges.to.to", "torch.utils.data.DataLoader", "range", "graph.to.to", "graph.to.ndata[].to", "graph.to.edata[].to().float", "optimizer.zero_grad", "model", "train_edges[].t", "model.edge_predictor", "torch.randint", "torch.randint", "model.edge_predictor", "model.loss", "model.loss.backward", "optimizer.step", "model.edge_predictor.size", "train_edges.to.size", "graph.to.ndata[].clone", "torch.sin().to", "torch.sin().to", "graph.ndata[].to.size", "torch.randint.size", "model.loss.detach().item", "graph.ndata[].clone.detach", "graph.to.edata[].to", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.sin", "torch.sin", "model.loss.detach", "torch.rand", "torch.rand"], "function", ["home.repos.pwc.inspect_result.Saro00_DGN.superpixels_graph_classification.dgn_net.DGNNet.loss"], ["def", "train_epoch_sparse", "(", "model", ",", "optimizer", ",", "device", ",", "graph", ",", "train_edges", ",", "batch_size", ",", "epoch", ",", "augmentation", "=", "0", ")", ":", "\n", "\n", "    ", "model", ".", "train", "(", ")", "\n", "train_edges", "=", "train_edges", ".", "to", "(", "device", ")", "\n", "total_loss", "=", "total_examples", "=", "0", "\n", "\n", "for", "perm", "in", "DataLoader", "(", "range", "(", "train_edges", ".", "size", "(", "0", ")", ")", ",", "batch_size", ",", "shuffle", "=", "True", ")", ":", "\n", "\n", "        ", "graph", "=", "graph", ".", "to", "(", "device", ")", "\n", "x", "=", "graph", ".", "ndata", "[", "'feat'", "]", ".", "to", "(", "device", ")", "\n", "e", "=", "graph", ".", "edata", "[", "'feat'", "]", ".", "to", "(", "device", ")", ".", "float", "(", ")", "\n", "\n", "if", "augmentation", ">", "1e-7", ":", "\n", "            ", "graph_eig", "=", "graph", ".", "ndata", "[", "'eig'", "]", ".", "clone", "(", ")", "\n", "angle", "=", "(", "torch", ".", "rand", "(", "x", "[", ":", ",", "0", "]", ".", "shape", ")", "-", "0.5", ")", "*", "2", "*", "augmentation", "\n", "sine", "=", "torch", ".", "sin", "(", "angle", "*", "math", ".", "pi", "/", "180", ")", ".", "to", "(", "device", ")", "\n", "graph", ".", "ndata", "[", "'eig'", "]", "[", ":", ",", "1", "]", "=", "torch", ".", "mul", "(", "(", "1", "-", "sine", "**", "2", ")", "**", "(", "0.5", ")", ",", "graph_eig", "[", ":", ",", "1", "]", ")", "+", "torch", ".", "mul", "(", "sine", ",", "graph_eig", "[", ":", ",", "2", "]", ")", "\n", "graph", ".", "ndata", "[", "'eig'", "]", "[", ":", ",", "2", "]", "=", "torch", ".", "mul", "(", "(", "1", "-", "sine", "**", "2", ")", "**", "(", "0.5", ")", ",", "graph_eig", "[", ":", ",", "2", "]", ")", "-", "torch", ".", "mul", "(", "sine", ",", "graph_eig", "[", ":", ",", "1", "]", ")", "\n", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "h", "=", "model", "(", "graph", ",", "x", ",", "e", ",", "True", ",", "True", ")", "\n", "\n", "# Positive samples", "\n", "edge", "=", "train_edges", "[", "perm", "]", ".", "t", "(", ")", "\n", "pos_out", "=", "model", ".", "edge_predictor", "(", "h", "[", "edge", "[", "0", "]", "]", ",", "h", "[", "edge", "[", "1", "]", "]", ")", "\n", "\n", "# Just do some trivial random sampling", "\n", "edge", "=", "torch", ".", "randint", "(", "0", ",", "x", ".", "size", "(", "0", ")", ",", "edge", ".", "size", "(", ")", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "x", ".", "device", ")", "\n", "neg_out", "=", "model", ".", "edge_predictor", "(", "h", "[", "edge", "[", "0", "]", "]", ",", "h", "[", "edge", "[", "1", "]", "]", ")", "\n", "\n", "loss", "=", "model", ".", "loss", "(", "pos_out", ",", "neg_out", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "num_examples", "=", "pos_out", ".", "size", "(", "0", ")", "\n", "total_loss", "+=", "loss", ".", "detach", "(", ")", ".", "item", "(", ")", "*", "num_examples", "\n", "total_examples", "+=", "num_examples", "\n", "if", "augmentation", ">", "1e-7", ":", "\n", "            ", "graph", ".", "ndata", "[", "'eig'", "]", "=", "graph_eig", ".", "detach", "(", ")", "\n", "\n", "", "", "return", "total_loss", "/", "total_examples", ",", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.train.train_COLLAB_edge_classification.evaluate_network_sparse": [[66, 146], ["model.eval", "torch.no_grad", "torch.no_grad", "graph.to.to", "graph.to.ndata[].to", "graph.to.edata[].to().float", "model", "pos_train_edges.to.to", "pos_valid_edges.to.to", "neg_valid_edges.to.to", "pos_test_edges.to.to", "neg_test_edges.to.to", "torch.utils.data.DataLoader", "torch.cat", "torch.cat", "torch.utils.data.DataLoader", "torch.cat", "torch.cat", "torch.utils.data.DataLoader", "torch.cat", "torch.cat", "torch.utils.data.DataLoader", "torch.cat", "torch.cat", "torch.utils.data.DataLoader", "torch.cat", "torch.cat", "train_hits.append", "valid_hits.append", "test_hits.append", "range", "pos_train_edges[].t", "range", "pos_valid_edges[].t", "range", "neg_valid_edges[].t", "range", "pos_test_edges[].t", "range", "neg_test_edges[].t", "graph.to.edata[].to", "pos_train_edges.to.size", "model.edge_predictor().squeeze().cpu", "pos_valid_edges.to.size", "model.edge_predictor().squeeze().cpu", "pos_valid_edges.to.size", "model.edge_predictor().squeeze().cpu", "pos_test_edges.to.size", "model.edge_predictor().squeeze().cpu", "pos_test_edges.to.size", "model.edge_predictor().squeeze().cpu", "evaluator.eval", "evaluator.eval", "evaluator.eval", "model.edge_predictor().squeeze", "model.edge_predictor().squeeze", "model.edge_predictor().squeeze", "model.edge_predictor().squeeze", "model.edge_predictor().squeeze", "model.edge_predictor", "model.edge_predictor", "model.edge_predictor", "model.edge_predictor", "model.edge_predictor"], "function", ["None"], ["", "def", "evaluate_network_sparse", "(", "model", ",", "device", ",", "graph", ",", "pos_train_edges", ",", "\n", "pos_valid_edges", ",", "neg_valid_edges", ",", "\n", "pos_test_edges", ",", "neg_test_edges", ",", "\n", "evaluator", ",", "batch_size", ",", "epoch", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\n", "        ", "graph", "=", "graph", ".", "to", "(", "device", ")", "\n", "x", "=", "graph", ".", "ndata", "[", "'feat'", "]", ".", "to", "(", "device", ")", "\n", "e", "=", "graph", ".", "edata", "[", "'feat'", "]", ".", "to", "(", "device", ")", ".", "float", "(", ")", "\n", "\n", "h", "=", "model", "(", "graph", ",", "x", ",", "e", ",", "None", ",", "None", ")", "\n", "\n", "pos_train_edges", "=", "pos_train_edges", ".", "to", "(", "device", ")", "\n", "pos_valid_edges", "=", "pos_valid_edges", ".", "to", "(", "device", ")", "\n", "neg_valid_edges", "=", "neg_valid_edges", ".", "to", "(", "device", ")", "\n", "pos_test_edges", "=", "pos_test_edges", ".", "to", "(", "device", ")", "\n", "neg_test_edges", "=", "neg_test_edges", ".", "to", "(", "device", ")", "\n", "\n", "pos_train_preds", "=", "[", "]", "\n", "for", "perm", "in", "DataLoader", "(", "range", "(", "pos_train_edges", ".", "size", "(", "0", ")", ")", ",", "batch_size", ")", ":", "\n", "            ", "edge", "=", "pos_train_edges", "[", "perm", "]", ".", "t", "(", ")", "\n", "pos_train_preds", "+=", "[", "model", ".", "edge_predictor", "(", "h", "[", "edge", "[", "0", "]", "]", ",", "h", "[", "edge", "[", "1", "]", "]", ")", ".", "squeeze", "(", ")", ".", "cpu", "(", ")", "]", "\n", "", "pos_train_pred", "=", "torch", ".", "cat", "(", "pos_train_preds", ",", "dim", "=", "0", ")", "\n", "\n", "pos_valid_preds", "=", "[", "]", "\n", "for", "perm", "in", "DataLoader", "(", "range", "(", "pos_valid_edges", ".", "size", "(", "0", ")", ")", ",", "batch_size", ")", ":", "\n", "            ", "edge", "=", "pos_valid_edges", "[", "perm", "]", ".", "t", "(", ")", "\n", "pos_valid_preds", "+=", "[", "model", ".", "edge_predictor", "(", "h", "[", "edge", "[", "0", "]", "]", ",", "h", "[", "edge", "[", "1", "]", "]", ")", ".", "squeeze", "(", ")", ".", "cpu", "(", ")", "]", "\n", "", "pos_valid_pred", "=", "torch", ".", "cat", "(", "pos_valid_preds", ",", "dim", "=", "0", ")", "\n", "\n", "neg_valid_preds", "=", "[", "]", "\n", "for", "perm", "in", "DataLoader", "(", "range", "(", "pos_valid_edges", ".", "size", "(", "0", ")", ")", ",", "batch_size", ")", ":", "\n", "            ", "edge", "=", "neg_valid_edges", "[", "perm", "]", ".", "t", "(", ")", "\n", "neg_valid_preds", "+=", "[", "model", ".", "edge_predictor", "(", "h", "[", "edge", "[", "0", "]", "]", ",", "h", "[", "edge", "[", "1", "]", "]", ")", ".", "squeeze", "(", ")", ".", "cpu", "(", ")", "]", "\n", "", "neg_valid_pred", "=", "torch", ".", "cat", "(", "neg_valid_preds", ",", "dim", "=", "0", ")", "\n", "\n", "pos_test_preds", "=", "[", "]", "\n", "for", "perm", "in", "DataLoader", "(", "range", "(", "pos_test_edges", ".", "size", "(", "0", ")", ")", ",", "batch_size", ")", ":", "\n", "            ", "edge", "=", "pos_test_edges", "[", "perm", "]", ".", "t", "(", ")", "\n", "pos_test_preds", "+=", "[", "model", ".", "edge_predictor", "(", "h", "[", "edge", "[", "0", "]", "]", ",", "h", "[", "edge", "[", "1", "]", "]", ")", ".", "squeeze", "(", ")", ".", "cpu", "(", ")", "]", "\n", "", "pos_test_pred", "=", "torch", ".", "cat", "(", "pos_test_preds", ",", "dim", "=", "0", ")", "\n", "\n", "neg_test_preds", "=", "[", "]", "\n", "for", "perm", "in", "DataLoader", "(", "range", "(", "pos_test_edges", ".", "size", "(", "0", ")", ")", ",", "batch_size", ")", ":", "\n", "            ", "edge", "=", "neg_test_edges", "[", "perm", "]", ".", "t", "(", ")", "\n", "neg_test_preds", "+=", "[", "model", ".", "edge_predictor", "(", "h", "[", "edge", "[", "0", "]", "]", ",", "h", "[", "edge", "[", "1", "]", "]", ")", ".", "squeeze", "(", ")", ".", "cpu", "(", ")", "]", "\n", "", "neg_test_pred", "=", "torch", ".", "cat", "(", "neg_test_preds", ",", "dim", "=", "0", ")", "\n", "\n", "", "train_hits", "=", "[", "]", "\n", "for", "K", "in", "[", "10", ",", "50", ",", "100", "]", ":", "\n", "        ", "evaluator", ".", "K", "=", "K", "\n", "train_hits", ".", "append", "(", "\n", "evaluator", ".", "eval", "(", "{", "\n", "'y_pred_pos'", ":", "pos_train_pred", ",", "\n", "'y_pred_neg'", ":", "neg_valid_pred", ",", "# negative samples for valid == training", "\n", "}", ")", "[", "f'hits@{K}'", "]", "\n", ")", "\n", "\n", "", "valid_hits", "=", "[", "]", "\n", "for", "K", "in", "[", "10", ",", "50", ",", "100", "]", ":", "\n", "        ", "evaluator", ".", "K", "=", "K", "\n", "valid_hits", ".", "append", "(", "\n", "evaluator", ".", "eval", "(", "{", "\n", "'y_pred_pos'", ":", "pos_valid_pred", ",", "\n", "'y_pred_neg'", ":", "neg_valid_pred", ",", "\n", "}", ")", "[", "f'hits@{K}'", "]", "\n", ")", "\n", "\n", "", "test_hits", "=", "[", "]", "\n", "for", "K", "in", "[", "10", ",", "50", ",", "100", "]", ":", "\n", "        ", "evaluator", ".", "K", "=", "K", "\n", "test_hits", ".", "append", "(", "\n", "evaluator", ".", "eval", "(", "{", "\n", "'y_pred_pos'", ":", "pos_test_pred", ",", "\n", "'y_pred_neg'", ":", "neg_test_pred", ",", "\n", "}", ")", "[", "f'hits@{K}'", "]", "\n", ")", "\n", "\n", "", "return", "train_hits", ",", "valid_hits", ",", "test_hits", "\n", "", ""]], "home.repos.pwc.inspect_result.Saro00_DGN.train.train_SBMs_node_classification.train_epoch_sparse": [[15, 39], ["model.train", "enumerate", "batch_graphs.ndata[].to", "batch_graphs.edata[].to", "batch_snorm_e.to.to", "batch_snorm_n.to.to", "batch_labels.to.to", "optimizer.zero_grad", "model.forward", "model.loss", "model.loss.backward", "optimizer.step", "model.loss.detach().item", "train.metrics.accuracy_SBM", "model.loss.detach"], "function", ["home.repos.pwc.inspect_result.Saro00_DGN.dgl.dgn_layer.DGNLayerTower.forward", "home.repos.pwc.inspect_result.Saro00_DGN.superpixels_graph_classification.dgn_net.DGNNet.loss", "home.repos.pwc.inspect_result.Saro00_DGN.train.metrics.accuracy_SBM"], ["def", "train_epoch_sparse", "(", "model", ",", "optimizer", ",", "device", ",", "data_loader", ",", "epoch", ")", ":", "\n", "\n", "    ", "model", ".", "train", "(", ")", "\n", "epoch_loss", "=", "0", "\n", "epoch_train_acc", "=", "0", "\n", "nb_data", "=", "0", "\n", "gpu_mem", "=", "0", "\n", "for", "iter", ",", "(", "batch_graphs", ",", "batch_labels", ",", "batch_snorm_n", ",", "batch_snorm_e", ")", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "        ", "batch_x", "=", "batch_graphs", ".", "ndata", "[", "'feat'", "]", ".", "to", "(", "device", ")", "\n", "batch_e", "=", "batch_graphs", ".", "edata", "[", "'feat'", "]", ".", "to", "(", "device", ")", "\n", "batch_snorm_e", "=", "batch_snorm_e", ".", "to", "(", "device", ")", "\n", "batch_snorm_n", "=", "batch_snorm_n", ".", "to", "(", "device", ")", "\n", "batch_labels", "=", "batch_labels", ".", "to", "(", "device", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "batch_scores", "=", "model", ".", "forward", "(", "batch_graphs", ",", "batch_x", ",", "batch_e", ",", "batch_snorm_n", ",", "batch_snorm_e", ")", "\n", "loss", "=", "model", ".", "loss", "(", "batch_scores", ",", "batch_labels", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "epoch_loss", "+=", "loss", ".", "detach", "(", ")", ".", "item", "(", ")", "\n", "epoch_train_acc", "+=", "accuracy", "(", "batch_scores", ",", "batch_labels", ")", "\n", "", "epoch_loss", "/=", "(", "iter", "+", "1", ")", "\n", "epoch_train_acc", "/=", "(", "iter", "+", "1", ")", "\n", "\n", "return", "epoch_loss", ",", "epoch_train_acc", ",", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.train.train_SBMs_node_classification.evaluate_network_sparse": [[41, 62], ["model.eval", "torch.no_grad", "torch.no_grad", "enumerate", "batch_graphs.ndata[].to", "batch_graphs.edata[].to", "batch_snorm_e.to.to", "batch_snorm_n.to.to", "batch_labels.to.to", "model.forward", "model.loss", "model.loss.detach().item", "train.metrics.accuracy_SBM", "model.loss.detach"], "function", ["home.repos.pwc.inspect_result.Saro00_DGN.dgl.dgn_layer.DGNLayerTower.forward", "home.repos.pwc.inspect_result.Saro00_DGN.superpixels_graph_classification.dgn_net.DGNNet.loss", "home.repos.pwc.inspect_result.Saro00_DGN.train.metrics.accuracy_SBM"], ["", "def", "evaluate_network_sparse", "(", "model", ",", "device", ",", "data_loader", ",", "epoch", ")", ":", "\n", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "epoch_test_loss", "=", "0", "\n", "epoch_test_acc", "=", "0", "\n", "nb_data", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "iter", ",", "(", "batch_graphs", ",", "batch_labels", ",", "batch_snorm_n", ",", "batch_snorm_e", ")", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "            ", "batch_x", "=", "batch_graphs", ".", "ndata", "[", "'feat'", "]", ".", "to", "(", "device", ")", "\n", "batch_e", "=", "batch_graphs", ".", "edata", "[", "'feat'", "]", ".", "to", "(", "device", ")", "\n", "batch_snorm_e", "=", "batch_snorm_e", ".", "to", "(", "device", ")", "\n", "batch_snorm_n", "=", "batch_snorm_n", ".", "to", "(", "device", ")", "\n", "batch_labels", "=", "batch_labels", ".", "to", "(", "device", ")", "\n", "batch_scores", "=", "model", ".", "forward", "(", "batch_graphs", ",", "batch_x", ",", "batch_e", ",", "batch_snorm_n", ",", "batch_snorm_e", ")", "\n", "loss", "=", "model", ".", "loss", "(", "batch_scores", ",", "batch_labels", ")", "\n", "epoch_test_loss", "+=", "loss", ".", "detach", "(", ")", ".", "item", "(", ")", "\n", "epoch_test_acc", "+=", "accuracy", "(", "batch_scores", ",", "batch_labels", ")", "\n", "", "epoch_test_loss", "/=", "(", "iter", "+", "1", ")", "\n", "epoch_test_acc", "/=", "(", "iter", "+", "1", ")", "\n", "\n", "", "return", "epoch_test_loss", ",", "epoch_test_acc", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.train.train_SBMs_node_classification.train_epoch_dense": [[70, 96], ["model.train", "optimizer.zero_grad", "enumerate", "x_with_node_feat.to.to", "labels.to.to", "model.forward", "model.loss", "model.loss.backward", "model.loss.detach().item", "train.metrics.accuracy_SBM", "optimizer.step", "optimizer.zero_grad", "model.loss.detach"], "function", ["home.repos.pwc.inspect_result.Saro00_DGN.dgl.dgn_layer.DGNLayerTower.forward", "home.repos.pwc.inspect_result.Saro00_DGN.superpixels_graph_classification.dgn_net.DGNNet.loss", "home.repos.pwc.inspect_result.Saro00_DGN.train.metrics.accuracy_SBM"], ["def", "train_epoch_dense", "(", "model", ",", "optimizer", ",", "device", ",", "data_loader", ",", "epoch", ",", "batch_size", ")", ":", "\n", "\n", "    ", "model", ".", "train", "(", ")", "\n", "epoch_loss", "=", "0", "\n", "epoch_train_acc", "=", "0", "\n", "nb_data", "=", "0", "\n", "gpu_mem", "=", "0", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "for", "iter", ",", "(", "x_with_node_feat", ",", "labels", ")", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "        ", "x_with_node_feat", "=", "x_with_node_feat", ".", "to", "(", "device", ")", "\n", "labels", "=", "labels", ".", "to", "(", "device", ")", "\n", "\n", "scores", "=", "model", ".", "forward", "(", "x_with_node_feat", ")", "\n", "loss", "=", "model", ".", "loss", "(", "scores", ",", "labels", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "if", "not", "(", "iter", "%", "batch_size", ")", ":", "\n", "            ", "optimizer", ".", "step", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "", "epoch_loss", "+=", "loss", ".", "detach", "(", ")", ".", "item", "(", ")", "\n", "epoch_train_acc", "+=", "accuracy", "(", "scores", ",", "labels", ")", "\n", "", "epoch_loss", "/=", "(", "iter", "+", "1", ")", "\n", "epoch_train_acc", "/=", "(", "iter", "+", "1", ")", "\n", "\n", "return", "epoch_loss", ",", "epoch_train_acc", ",", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.train.train_SBMs_node_classification.evaluate_network_dense": [[99, 118], ["model.eval", "torch.no_grad", "torch.no_grad", "enumerate", "x_with_node_feat.to.to", "labels.to.to", "model.forward", "model.loss", "model.loss.detach().item", "train.metrics.accuracy_SBM", "model.loss.detach"], "function", ["home.repos.pwc.inspect_result.Saro00_DGN.dgl.dgn_layer.DGNLayerTower.forward", "home.repos.pwc.inspect_result.Saro00_DGN.superpixels_graph_classification.dgn_net.DGNNet.loss", "home.repos.pwc.inspect_result.Saro00_DGN.train.metrics.accuracy_SBM"], ["", "def", "evaluate_network_dense", "(", "model", ",", "device", ",", "data_loader", ",", "epoch", ")", ":", "\n", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "epoch_test_loss", "=", "0", "\n", "epoch_test_acc", "=", "0", "\n", "nb_data", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "iter", ",", "(", "x_with_node_feat", ",", "labels", ")", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "            ", "x_with_node_feat", "=", "x_with_node_feat", ".", "to", "(", "device", ")", "\n", "labels", "=", "labels", ".", "to", "(", "device", ")", "\n", "\n", "scores", "=", "model", ".", "forward", "(", "x_with_node_feat", ")", "\n", "loss", "=", "model", ".", "loss", "(", "scores", ",", "labels", ")", "\n", "epoch_test_loss", "+=", "loss", ".", "detach", "(", ")", ".", "item", "(", ")", "\n", "epoch_test_acc", "+=", "accuracy", "(", "scores", ",", "labels", ")", "\n", "", "epoch_test_loss", "/=", "(", "iter", "+", "1", ")", "\n", "epoch_test_acc", "/=", "(", "iter", "+", "1", ")", "\n", "\n", "", "return", "epoch_test_loss", ",", "epoch_test_acc", "\n", "", ""]], "home.repos.pwc.inspect_result.Saro00_DGN.train.metrics.MAE": [[14, 17], ["torch.l1_loss"], "function", ["None"], ["def", "MAE", "(", "scores", ",", "targets", ")", ":", "\n", "    ", "MAE", "=", "F", ".", "l1_loss", "(", "scores", ",", "targets", ")", "\n", "return", "MAE", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.train.metrics.accuracy_TU": [[19, 23], ["scores.detach().argmax.detach().argmax", "scores.detach().argmax.detach"], "function", ["None"], ["", "def", "accuracy_TU", "(", "scores", ",", "targets", ")", ":", "\n", "    ", "scores", "=", "scores", ".", "detach", "(", ")", ".", "argmax", "(", "dim", "=", "1", ")", "\n", "acc", "=", "(", "scores", "==", "targets", ")", ".", "float", "(", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "return", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.train.metrics.accuracy_MNIST_CIFAR": [[25, 29], ["scores.detach().argmax.detach().argmax", "scores.detach().argmax.detach"], "function", ["None"], ["", "def", "accuracy_MNIST_CIFAR", "(", "scores", ",", "targets", ")", ":", "\n", "    ", "scores", "=", "scores", ".", "detach", "(", ")", ".", "argmax", "(", "dim", "=", "1", ")", "\n", "acc", "=", "(", "scores", "==", "targets", ")", ".", "float", "(", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "return", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.train.metrics.accuracy_CITATION_GRAPH": [[30, 35], ["scores.detach().argmax.detach().argmax", "len", "scores.detach().argmax.detach"], "function", ["None"], ["", "def", "accuracy_CITATION_GRAPH", "(", "scores", ",", "targets", ")", ":", "\n", "    ", "scores", "=", "scores", ".", "detach", "(", ")", ".", "argmax", "(", "dim", "=", "1", ")", "\n", "acc", "=", "(", "scores", "==", "targets", ")", ".", "float", "(", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "acc", "=", "acc", "/", "len", "(", "targets", ")", "\n", "return", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.train.metrics.accuracy_SBM": [[37, 55], ["targets.cpu().detach().numpy.cpu().numpy", "numpy.argmax", "sklearn.metrics.confusion_matrix().astype", "targets.cpu().detach().numpy.cpu().detach().numpy", "numpy.zeros", "range", "float", "targets.cpu().detach().numpy.cpu", "sklearn.metrics.confusion_matrix", "targets.cpu().detach().numpy.cpu().detach", "numpy.where", "numpy.sum", "float", "targets.cpu().detach().numpy.cpu", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax"], "function", ["None"], ["", "def", "accuracy_SBM", "(", "scores", ",", "targets", ")", ":", "\n", "    ", "S", "=", "targets", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "C", "=", "np", ".", "argmax", "(", "torch", ".", "nn", ".", "Softmax", "(", "dim", "=", "0", ")", "(", "scores", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "axis", "=", "1", ")", "\n", "CM", "=", "confusion_matrix", "(", "S", ",", "C", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "nb_classes", "=", "CM", ".", "shape", "[", "0", "]", "\n", "targets", "=", "targets", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "nb_non_empty_classes", "=", "0", "\n", "pr_classes", "=", "np", ".", "zeros", "(", "nb_classes", ")", "\n", "for", "r", "in", "range", "(", "nb_classes", ")", ":", "\n", "        ", "cluster", "=", "np", ".", "where", "(", "targets", "==", "r", ")", "[", "0", "]", "\n", "if", "cluster", ".", "shape", "[", "0", "]", "!=", "0", ":", "\n", "            ", "pr_classes", "[", "r", "]", "=", "CM", "[", "r", ",", "r", "]", "/", "float", "(", "cluster", ".", "shape", "[", "0", "]", ")", "\n", "if", "CM", "[", "r", ",", "r", "]", ">", "0", ":", "\n", "                ", "nb_non_empty_classes", "+=", "1", "\n", "", "", "else", ":", "\n", "            ", "pr_classes", "[", "r", "]", "=", "0.0", "\n", "", "", "acc", "=", "100.", "*", "np", ".", "sum", "(", "pr_classes", ")", "/", "float", "(", "nb_non_empty_classes", ")", "\n", "return", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.train.metrics.binary_f1_score": [[57, 65], ["targets.cpu().numpy", "scores.argmax().cpu().numpy", "sklearn.metrics.f1_score", "targets.cpu", "scores.argmax().cpu", "scores.argmax"], "function", ["None"], ["", "def", "binary_f1_score", "(", "scores", ",", "targets", ")", ":", "\n", "    ", "\"\"\"Computes the F1 score using scikit-learn for binary class labels. \n    \n    Returns the F1 score for the positive class, i.e. labelled '1'.\n    \"\"\"", "\n", "y_true", "=", "targets", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "y_pred", "=", "scores", ".", "argmax", "(", "dim", "=", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "return", "f1_score", "(", "y_true", ",", "y_pred", ",", "average", "=", "'binary'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.train.metrics.accuracy_VOC": [[67, 72], ["scores.detach().argmax().cpu.detach().argmax().cpu", "targets.cpu().detach().numpy.cpu().detach().numpy", "sklearn.metrics.f1_score", "scores.detach().argmax().cpu.detach().argmax", "targets.cpu().detach().numpy.cpu().detach", "scores.detach().argmax().cpu.detach", "targets.cpu().detach().numpy.cpu"], "function", ["None"], ["", "def", "accuracy_VOC", "(", "scores", ",", "targets", ")", ":", "\n", "    ", "scores", "=", "scores", ".", "detach", "(", ")", ".", "argmax", "(", "dim", "=", "1", ")", ".", "cpu", "(", ")", "\n", "targets", "=", "targets", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "acc", "=", "f1_score", "(", "scores", ",", "targets", ",", "average", "=", "'weighted'", ")", "\n", "return", "acc", "\n", "", ""]], "home.repos.pwc.inspect_result.Saro00_DGN.train.train_superpixels_graph_classification.train_epoch": [[16, 64], ["model.train", "enumerate", "batch_graphs.ndata[].to", "batch_graphs.edata[].to", "batch_snorm_e.to.to", "batch_labels.to.to", "batch_snorm_n.to.to", "optimizer.zero_grad", "model.forward", "model.loss", "model.loss.backward", "optimizer.step", "model.loss.detach().item", "metrics.accuracy_MNIST_CIFAR", "batch_labels.to.size", "batch_graphs.ndata[].clone", "torch.sin", "torch.sin", "[].to", "torch.rand().to", "torch.rand().to", "torch.mul", "torch.mul", "batch_graphs.ndata[].clone", "batch_graphs.ndata[].clone.detach", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "model.loss.detach", "torch.rand", "torch.rand", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.rand", "torch.rand", "batch_graphs.ndata[].clone.size", "torch.rand", "torch.rand", "torch.abs", "torch.abs", "torch.abs", "torch.abs"], "function", ["home.repos.pwc.inspect_result.Saro00_DGN.dgl.dgn_layer.DGNLayerTower.forward", "home.repos.pwc.inspect_result.Saro00_DGN.superpixels_graph_classification.dgn_net.DGNNet.loss", "home.repos.pwc.inspect_result.Saro00_DGN.train.metrics.accuracy_MNIST_CIFAR"], ["def", "train_epoch", "(", "model", ",", "optimizer", ",", "device", ",", "data_loader", ",", "epoch", ",", "augmentation", ",", "flip", ",", "distortion", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "epoch_loss", "=", "0", "\n", "epoch_train_acc", "=", "0", "\n", "nb_data", "=", "0", "\n", "gpu_mem", "=", "0", "\n", "for", "iter", ",", "(", "batch_graphs", ",", "batch_labels", ",", "batch_snorm_n", ",", "batch_snorm_e", ")", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "        ", "batch_x", "=", "batch_graphs", ".", "ndata", "[", "'feat'", "]", ".", "to", "(", "device", ")", "\n", "batch_e", "=", "batch_graphs", ".", "edata", "[", "'feat'", "]", ".", "to", "(", "device", ")", "\n", "batch_snorm_e", "=", "batch_snorm_e", ".", "to", "(", "device", ")", "\n", "batch_labels", "=", "batch_labels", ".", "to", "(", "device", ")", "\n", "batch_snorm_n", "=", "batch_snorm_n", ".", "to", "(", "device", ")", "\n", "\n", "if", "augmentation", ">", "1e-7", ":", "\n", "            ", "batch_graphs_eig", "=", "batch_graphs", ".", "ndata", "[", "'eig'", "]", ".", "clone", "(", ")", "\n", "\n", "angle", "=", "(", "torch", ".", "rand", "(", "batch_x", "[", ":", ",", "0", "]", ".", "shape", ")", "-", "0.5", ")", "*", "2", "*", "augmentation", "\n", "sine", "=", "torch", ".", "sin", "(", "angle", "*", "math", ".", "pi", "/", "180", ")", "\n", "batch_graphs", ".", "ndata", "[", "'eig'", "]", "[", ":", ",", "1", "]", "=", "torch", ".", "mul", "(", "(", "1", "-", "sine", "**", "2", ")", "**", "(", "0.5", ")", ",", "batch_graphs_eig", "[", ":", ",", "1", "]", ")", "+", "torch", ".", "mul", "(", "sine", ",", "batch_graphs_eig", "[", ":", ",", "2", "]", ")", "\n", "batch_graphs", ".", "ndata", "[", "'eig'", "]", "[", ":", ",", "2", "]", "=", "torch", ".", "mul", "(", "(", "1", "-", "sine", "**", "2", ")", "**", "(", "0.5", ")", ",", "batch_graphs_eig", "[", ":", ",", "2", "]", ")", "-", "torch", ".", "mul", "(", "sine", ",", "batch_graphs_eig", "[", ":", ",", "1", "]", ")", "\n", "", "if", "flip", ":", "\n", "            ", "batch_graphs_eig", "=", "batch_graphs", ".", "ndata", "[", "'eig'", "]", "[", ":", ",", "2", "]", ".", "to", "(", "device", ")", "\n", "sign_flip", "=", "torch", ".", "rand", "(", "batch_graphs_eig", ".", "size", "(", ")", ")", ".", "to", "(", "device", ")", "\n", "sign_flip", "[", "sign_flip", ">=", "0.5", "]", "=", "1.0", ";", "sign_flip", "[", "sign_flip", "<", "0.5", "]", "=", "-", "1.0", "\n", "batch_graphs", ".", "ndata", "[", "'eig'", "]", "[", ":", ",", "2", "]", "=", "torch", ".", "mul", "(", "sign_flip", ",", "batch_graphs_eig", ")", "\n", "\n", "", "if", "distortion", ">", "1e-7", ":", "\n", "            ", "batch_graphs_eig", "=", "batch_graphs", ".", "ndata", "[", "'eig'", "]", ".", "clone", "(", ")", "\n", "dist", "=", "(", "torch", ".", "rand", "(", "batch_x", "[", ":", ",", "0", "]", ".", "shape", ")", "-", "0.5", ")", "*", "2", "*", "distortion", "\n", "batch_graphs", ".", "ndata", "[", "'eig'", "]", "[", ":", ",", "1", "]", "=", "torch", ".", "mul", "(", "dist", ",", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "batch_graphs_eig", "[", ":", ",", "1", "]", ")", ",", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", ")", "+", "batch_graphs_eig", "[", ":", ",", "1", "]", "\n", "batch_graphs", ".", "ndata", "[", "'eig'", "]", "[", ":", ",", "2", "]", "=", "torch", ".", "mul", "(", "dist", ",", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "batch_graphs_eig", "[", ":", ",", "2", "]", ")", ",", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", ")", "+", "batch_graphs_eig", "\n", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "batch_scores", "=", "model", ".", "forward", "(", "batch_graphs", ",", "batch_x", ",", "batch_e", ",", "batch_snorm_n", ",", "batch_snorm_e", ")", "\n", "loss", "=", "model", ".", "loss", "(", "batch_scores", ",", "batch_labels", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "epoch_loss", "+=", "loss", ".", "detach", "(", ")", ".", "item", "(", ")", "\n", "epoch_train_acc", "+=", "accuracy", "(", "batch_scores", ",", "batch_labels", ")", "\n", "nb_data", "+=", "batch_labels", ".", "size", "(", "0", ")", "\n", "if", "augmentation", ">", "1e-7", "or", "distortion", ">", "1e-7", ":", "\n", "            ", "batch_graphs", ".", "ndata", "[", "'eig'", "]", "=", "batch_graphs_eig", ".", "detach", "(", ")", "\n", "", "", "epoch_loss", "/=", "(", "iter", "+", "1", ")", "\n", "epoch_train_acc", "/=", "nb_data", "\n", "\n", "return", "epoch_loss", ",", "epoch_train_acc", ",", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.train.train_superpixels_graph_classification.evaluate_network": [[65, 87], ["model.eval", "torch.no_grad", "torch.no_grad", "enumerate", "batch_graphs.ndata[].to", "batch_graphs.edata[].to", "batch_snorm_e.to.to", "batch_labels.to.to", "batch_snorm_n.to.to", "model.forward", "model.loss", "model.loss.detach().item", "metrics.accuracy_MNIST_CIFAR", "batch_labels.to.size", "model.loss.detach"], "function", ["home.repos.pwc.inspect_result.Saro00_DGN.dgl.dgn_layer.DGNLayerTower.forward", "home.repos.pwc.inspect_result.Saro00_DGN.superpixels_graph_classification.dgn_net.DGNNet.loss", "home.repos.pwc.inspect_result.Saro00_DGN.train.metrics.accuracy_MNIST_CIFAR"], ["", "def", "evaluate_network", "(", "model", ",", "device", ",", "data_loader", ",", "epoch", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "epoch_test_loss", "=", "0", "\n", "epoch_test_acc", "=", "0", "\n", "nb_data", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "iter", ",", "(", "batch_graphs", ",", "batch_labels", ",", "batch_snorm_n", ",", "batch_snorm_e", ")", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "            ", "batch_x", "=", "batch_graphs", ".", "ndata", "[", "'feat'", "]", ".", "to", "(", "device", ")", "\n", "batch_e", "=", "batch_graphs", ".", "edata", "[", "'feat'", "]", ".", "to", "(", "device", ")", "\n", "batch_snorm_e", "=", "batch_snorm_e", ".", "to", "(", "device", ")", "\n", "batch_labels", "=", "batch_labels", ".", "to", "(", "device", ")", "\n", "batch_snorm_n", "=", "batch_snorm_n", ".", "to", "(", "device", ")", "\n", "\n", "batch_scores", "=", "model", ".", "forward", "(", "batch_graphs", ",", "batch_x", ",", "batch_e", ",", "batch_snorm_n", ",", "batch_snorm_e", ")", "\n", "loss", "=", "model", ".", "loss", "(", "batch_scores", ",", "batch_labels", ")", "\n", "epoch_test_loss", "+=", "loss", ".", "detach", "(", ")", ".", "item", "(", ")", "\n", "epoch_test_acc", "+=", "accuracy", "(", "batch_scores", ",", "batch_labels", ")", "\n", "nb_data", "+=", "batch_labels", ".", "size", "(", "0", ")", "\n", "", "epoch_test_loss", "/=", "(", "iter", "+", "1", ")", "\n", "epoch_test_acc", "/=", "nb_data", "\n", "\n", "", "return", "epoch_test_loss", ",", "epoch_test_acc", "", "", ""]], "home.repos.pwc.inspect_result.Saro00_DGN.train.train_molecules_graph_regression.train_epoch": [[15, 46], ["model.train", "enumerate", "batch_graphs.ndata[].to", "batch_graphs.edata[].to", "batch_snorm_e.to.to", "batch_targets.to.to", "batch_snorm_n.to.to", "optimizer.zero_grad", "model.forward", "model.loss", "model.loss.backward", "optimizer.step", "model.loss.detach().item", "metrics.MAE", "batch_targets.to.size", "batch_graphs.ndata[].to", "torch.rand().to", "torch.rand().to", "torch.mul", "torch.mul", "model.loss.detach", "torch.rand", "torch.rand", "batch_graphs.ndata[].to.size"], "function", ["home.repos.pwc.inspect_result.Saro00_DGN.dgl.dgn_layer.DGNLayerTower.forward", "home.repos.pwc.inspect_result.Saro00_DGN.superpixels_graph_classification.dgn_net.DGNNet.loss", "home.repos.pwc.inspect_result.Saro00_DGN.train.metrics.MAE"], ["def", "train_epoch", "(", "model", ",", "optimizer", ",", "device", ",", "data_loader", ",", "epoch", ",", "flip", ")", ":", "\n", "\n", "    ", "model", ".", "train", "(", ")", "\n", "epoch_loss", "=", "0", "\n", "epoch_train_mae", "=", "0", "\n", "nb_data", "=", "0", "\n", "gpu_mem", "=", "0", "\n", "for", "iter", ",", "(", "batch_graphs", ",", "batch_targets", ",", "batch_snorm_n", ",", "batch_snorm_e", ")", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "\n", "        ", "batch_x", "=", "batch_graphs", ".", "ndata", "[", "'feat'", "]", ".", "to", "(", "device", ")", "\n", "batch_e", "=", "batch_graphs", ".", "edata", "[", "'feat'", "]", ".", "to", "(", "device", ")", "\n", "batch_snorm_e", "=", "batch_snorm_e", ".", "to", "(", "device", ")", "\n", "batch_targets", "=", "batch_targets", ".", "to", "(", "device", ")", "\n", "batch_snorm_n", "=", "batch_snorm_n", ".", "to", "(", "device", ")", "\n", "if", "flip", ":", "\n", "            ", "batch_graphs_eig", "=", "batch_graphs", ".", "ndata", "[", "'eig'", "]", ".", "to", "(", "device", ")", "\n", "sign_flip", "=", "torch", ".", "rand", "(", "batch_graphs_eig", ".", "size", "(", ")", ")", ".", "to", "(", "device", ")", "\n", "sign_flip", "[", "sign_flip", ">=", "0.5", "]", "=", "1.0", ";", "sign_flip", "[", "sign_flip", "<", "0.5", "]", "=", "-", "1.0", "\n", "batch_graphs", ".", "ndata", "[", "'eig'", "]", "=", "torch", ".", "mul", "(", "sign_flip", ",", "batch_graphs_eig", ")", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "batch_scores", "=", "model", ".", "forward", "(", "batch_graphs", ",", "batch_x", ",", "batch_e", ",", "batch_snorm_n", ",", "batch_snorm_e", ")", "\n", "loss", "=", "model", ".", "loss", "(", "batch_scores", ",", "batch_targets", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "epoch_loss", "+=", "loss", ".", "detach", "(", ")", ".", "item", "(", ")", "\n", "epoch_train_mae", "+=", "MAE", "(", "batch_scores", ",", "batch_targets", ")", "\n", "nb_data", "+=", "batch_targets", ".", "size", "(", "0", ")", "\n", "", "epoch_loss", "/=", "(", "iter", "+", "1", ")", "\n", "epoch_train_mae", "/=", "(", "iter", "+", "1", ")", "\n", "\n", "return", "epoch_loss", ",", "epoch_train_mae", ",", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.train.train_molecules_graph_regression.evaluate_network": [[47, 70], ["model.eval", "torch.no_grad", "torch.no_grad", "enumerate", "batch_graphs.ndata[].to", "batch_graphs.edata[].to", "batch_snorm_e.to.to", "batch_targets.to.to", "batch_snorm_n.to.to", "model.forward", "model.loss", "model.loss.detach().item", "metrics.MAE", "batch_targets.to.size", "model.loss.detach"], "function", ["home.repos.pwc.inspect_result.Saro00_DGN.dgl.dgn_layer.DGNLayerTower.forward", "home.repos.pwc.inspect_result.Saro00_DGN.superpixels_graph_classification.dgn_net.DGNNet.loss", "home.repos.pwc.inspect_result.Saro00_DGN.train.metrics.MAE"], ["", "def", "evaluate_network", "(", "model", ",", "device", ",", "data_loader", ",", "epoch", ")", ":", "\n", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "epoch_test_loss", "=", "0", "\n", "epoch_test_mae", "=", "0", "\n", "nb_data", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "iter", ",", "(", "batch_graphs", ",", "batch_targets", ",", "batch_snorm_n", ",", "batch_snorm_e", ")", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "            ", "batch_x", "=", "batch_graphs", ".", "ndata", "[", "'feat'", "]", ".", "to", "(", "device", ")", "\n", "batch_e", "=", "batch_graphs", ".", "edata", "[", "'feat'", "]", ".", "to", "(", "device", ")", "\n", "batch_snorm_e", "=", "batch_snorm_e", ".", "to", "(", "device", ")", "\n", "batch_targets", "=", "batch_targets", ".", "to", "(", "device", ")", "\n", "batch_snorm_n", "=", "batch_snorm_n", ".", "to", "(", "device", ")", "\n", "\n", "batch_scores", "=", "model", ".", "forward", "(", "batch_graphs", ",", "batch_x", ",", "batch_e", ",", "batch_snorm_n", ",", "batch_snorm_e", ")", "\n", "loss", "=", "model", ".", "loss", "(", "batch_scores", ",", "batch_targets", ")", "\n", "epoch_test_loss", "+=", "loss", ".", "detach", "(", ")", ".", "item", "(", ")", "\n", "epoch_test_mae", "+=", "MAE", "(", "batch_scores", ",", "batch_targets", ")", "\n", "nb_data", "+=", "batch_targets", ".", "size", "(", "0", ")", "\n", "", "epoch_test_loss", "/=", "(", "iter", "+", "1", ")", "\n", "epoch_test_mae", "/=", "(", "iter", "+", "1", ")", "\n", "\n", "", "return", "epoch_test_loss", ",", "epoch_test_mae", "", "", ""]], "home.repos.pwc.inspect_result.Saro00_DGN.train.train_HIV_graph_classification.train_epoch_sparse": [[18, 45], ["model.train", "enumerate", "ogb.graphproppred.Evaluator", "batch_graphs.ndata[].to", "batch_graphs.edata[].to", "batch_snorm_e.to.to", "batch_snorm_n.to.to", "batch_labels.to.to", "optimizer.zero_grad", "model.forward", "model.loss", "model.loss.backward", "optimizer.step", "model.loss.detach().item", "list_scores.append", "list_labels.append", "ogb.graphproppred.Evaluator.eval", "model.forward.detach", "batch_labels.to.detach().unsqueeze", "model.loss.detach", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "batch_labels.to.detach"], "function", ["home.repos.pwc.inspect_result.Saro00_DGN.dgl.dgn_layer.DGNLayerTower.forward", "home.repos.pwc.inspect_result.Saro00_DGN.superpixels_graph_classification.dgn_net.DGNNet.loss"], ["def", "train_epoch_sparse", "(", "model", ",", "optimizer", ",", "device", ",", "data_loader", ",", "epoch", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "epoch_loss", "=", "0", "\n", "epoch_train_ROC", "=", "0", "\n", "list_scores", "=", "[", "]", "\n", "list_labels", "=", "[", "]", "\n", "for", "iter", ",", "(", "batch_graphs", ",", "batch_labels", ",", "batch_snorm_n", ",", "batch_snorm_e", ")", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "        ", "batch_x", "=", "batch_graphs", ".", "ndata", "[", "'feat'", "]", ".", "to", "(", "device", ")", "# num x feat", "\n", "batch_e", "=", "batch_graphs", ".", "edata", "[", "'feat'", "]", ".", "to", "(", "device", ")", "\n", "batch_snorm_e", "=", "batch_snorm_e", ".", "to", "(", "device", ")", "\n", "batch_snorm_n", "=", "batch_snorm_n", ".", "to", "(", "device", ")", "\n", "batch_labels", "=", "batch_labels", ".", "to", "(", "device", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "batch_scores", "=", "model", ".", "forward", "(", "batch_graphs", ",", "batch_x", ",", "batch_e", ",", "batch_snorm_n", ",", "batch_snorm_e", ")", "\n", "loss", "=", "model", ".", "loss", "(", "batch_scores", ",", "batch_labels", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "epoch_loss", "+=", "loss", ".", "detach", "(", ")", ".", "item", "(", ")", "\n", "list_scores", ".", "append", "(", "batch_scores", ".", "detach", "(", ")", ")", "\n", "list_labels", ".", "append", "(", "batch_labels", ".", "detach", "(", ")", ".", "unsqueeze", "(", "-", "1", ")", ")", "\n", "\n", "", "epoch_loss", "/=", "(", "iter", "+", "1", ")", "\n", "evaluator", "=", "Evaluator", "(", "name", "=", "'ogbg-molhiv'", ")", "\n", "epoch_train_ROC", "=", "evaluator", ".", "eval", "(", "{", "'y_pred'", ":", "torch", ".", "cat", "(", "list_scores", ")", ",", "\n", "'y_true'", ":", "torch", ".", "cat", "(", "list_labels", ")", "}", ")", "[", "'rocauc'", "]", "\n", "\n", "return", "epoch_loss", ",", "epoch_train_ROC", ",", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.train.train_HIV_graph_classification.evaluate_network_sparse": [[47, 72], ["model.eval", "torch.no_grad", "torch.no_grad", "enumerate", "ogb.graphproppred.Evaluator", "batch_graphs.ndata[].to", "batch_graphs.edata[].to", "batch_snorm_e.to.to", "batch_snorm_n.to.to", "batch_labels.to.to", "model.forward", "model.loss", "model.loss.detach().item", "list_scores.append", "list_labels.append", "ogb.graphproppred.Evaluator.eval", "model.forward.detach", "batch_labels.to.detach().unsqueeze", "model.loss.detach", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "batch_labels.to.detach"], "function", ["home.repos.pwc.inspect_result.Saro00_DGN.dgl.dgn_layer.DGNLayerTower.forward", "home.repos.pwc.inspect_result.Saro00_DGN.superpixels_graph_classification.dgn_net.DGNNet.loss"], ["", "def", "evaluate_network_sparse", "(", "model", ",", "device", ",", "data_loader", ",", "epoch", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "epoch_test_loss", "=", "0", "\n", "epoch_test_ROC", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "list_scores", "=", "[", "]", "\n", "list_labels", "=", "[", "]", "\n", "for", "iter", ",", "(", "batch_graphs", ",", "batch_labels", ",", "batch_snorm_n", ",", "batch_snorm_e", ")", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "            ", "batch_x", "=", "batch_graphs", ".", "ndata", "[", "'feat'", "]", ".", "to", "(", "device", ")", "\n", "batch_e", "=", "batch_graphs", ".", "edata", "[", "'feat'", "]", ".", "to", "(", "device", ")", "\n", "batch_snorm_e", "=", "batch_snorm_e", ".", "to", "(", "device", ")", "\n", "batch_snorm_n", "=", "batch_snorm_n", ".", "to", "(", "device", ")", "\n", "batch_labels", "=", "batch_labels", ".", "to", "(", "device", ")", "\n", "batch_scores", "=", "model", ".", "forward", "(", "batch_graphs", ",", "batch_x", ",", "batch_e", ",", "batch_snorm_n", ",", "batch_snorm_e", ")", "\n", "loss", "=", "model", ".", "loss", "(", "batch_scores", ",", "batch_labels", ")", "\n", "epoch_test_loss", "+=", "loss", ".", "detach", "(", ")", ".", "item", "(", ")", "\n", "list_scores", ".", "append", "(", "batch_scores", ".", "detach", "(", ")", ")", "\n", "list_labels", ".", "append", "(", "batch_labels", ".", "detach", "(", ")", ".", "unsqueeze", "(", "-", "1", ")", ")", "\n", "\n", "", "epoch_test_loss", "/=", "(", "iter", "+", "1", ")", "\n", "evaluator", "=", "Evaluator", "(", "name", "=", "'ogbg-molhiv'", ")", "\n", "epoch_test_ROC", "=", "evaluator", ".", "eval", "(", "{", "'y_pred'", ":", "torch", ".", "cat", "(", "list_scores", ")", ",", "\n", "'y_true'", ":", "torch", ".", "cat", "(", "list_labels", ")", "}", ")", "[", "'rocauc'", "]", "\n", "\n", "", "return", "epoch_test_loss", ",", "epoch_test_ROC", "\n", "", ""]], "home.repos.pwc.inspect_result.Saro00_DGN.train.train_PCBA_graph_classification.train_epoch_sparse": [[18, 45], ["model.train", "enumerate", "ogb.graphproppred.Evaluator", "batch_graphs.ndata[].to", "batch_graphs.edata[].to", "batch_snorm_e.to.to", "batch_snorm_n.to.to", "batch_labels.to.to", "optimizer.zero_grad", "model.forward", "model.loss", "model.loss.backward", "optimizer.step", "model.loss.detach().item", "list_scores.append", "list_labels.append", "ogb.graphproppred.Evaluator.eval", "model.forward.detach().cpu", "batch_labels.to.detach().cpu", "batch_labels.to.float", "model.loss.detach", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.forward.detach", "batch_labels.to.detach"], "function", ["home.repos.pwc.inspect_result.Saro00_DGN.dgl.dgn_layer.DGNLayerTower.forward", "home.repos.pwc.inspect_result.Saro00_DGN.superpixels_graph_classification.dgn_net.DGNNet.loss"], ["def", "train_epoch_sparse", "(", "model", ",", "optimizer", ",", "device", ",", "data_loader", ",", "epoch", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "epoch_loss", "=", "0", "\n", "epoch_train_AP", "=", "0", "\n", "list_scores", "=", "[", "]", "\n", "list_labels", "=", "[", "]", "\n", "for", "iter", ",", "(", "batch_graphs", ",", "batch_labels", ",", "batch_snorm_n", ",", "batch_snorm_e", ")", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "        ", "batch_x", "=", "batch_graphs", ".", "ndata", "[", "'feat'", "]", ".", "to", "(", "device", ")", "# num x feat", "\n", "batch_e", "=", "batch_graphs", ".", "edata", "[", "'feat'", "]", ".", "to", "(", "device", ")", "\n", "batch_snorm_e", "=", "batch_snorm_e", ".", "to", "(", "device", ")", "\n", "batch_snorm_n", "=", "batch_snorm_n", ".", "to", "(", "device", ")", "\n", "batch_labels", "=", "batch_labels", ".", "to", "(", "device", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "batch_scores", "=", "model", ".", "forward", "(", "batch_graphs", ",", "batch_x", ",", "batch_e", ",", "batch_snorm_n", ",", "batch_snorm_e", ")", "\n", "is_labeled", "=", "batch_labels", "==", "batch_labels", "\n", "loss", "=", "model", ".", "loss", "(", "batch_scores", "[", "is_labeled", "]", ",", "batch_labels", ".", "float", "(", ")", "[", "is_labeled", "]", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "epoch_loss", "+=", "loss", ".", "detach", "(", ")", ".", "item", "(", ")", "\n", "list_scores", ".", "append", "(", "batch_scores", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "list_labels", ".", "append", "(", "batch_labels", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "\n", "", "epoch_loss", "/=", "(", "iter", "+", "1", ")", "\n", "evaluator", "=", "Evaluator", "(", "name", "=", "'ogbg-molpcba'", ")", "\n", "epoch_train_AP", "=", "evaluator", ".", "eval", "(", "{", "'y_pred'", ":", "torch", ".", "cat", "(", "list_scores", ")", ",", "'y_true'", ":", "torch", ".", "cat", "(", "list_labels", ")", "}", ")", "[", "'ap'", "]", "\n", "\n", "return", "epoch_loss", ",", "epoch_train_AP", ",", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.train.train_PCBA_graph_classification.evaluate_network_sparse": [[46, 71], ["model.eval", "torch.no_grad", "torch.no_grad", "enumerate", "ogb.graphproppred.Evaluator", "batch_graphs.ndata[].to", "batch_graphs.edata[].to", "batch_snorm_e.to.to", "batch_snorm_n.to.to", "batch_labels.to.to", "model.forward", "model.loss", "model.loss.detach().item", "list_scores.append", "list_labels.append", "ogb.graphproppred.Evaluator.eval", "model.forward.detach().cpu", "batch_labels.to.detach().cpu", "batch_labels.to.float", "model.loss.detach", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.forward.detach", "batch_labels.to.detach"], "function", ["home.repos.pwc.inspect_result.Saro00_DGN.dgl.dgn_layer.DGNLayerTower.forward", "home.repos.pwc.inspect_result.Saro00_DGN.superpixels_graph_classification.dgn_net.DGNNet.loss"], ["", "def", "evaluate_network_sparse", "(", "model", ",", "device", ",", "data_loader", ",", "epoch", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "epoch_test_loss", "=", "0", "\n", "epoch_test_AP", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "list_scores", "=", "[", "]", "\n", "list_labels", "=", "[", "]", "\n", "for", "iter", ",", "(", "batch_graphs", ",", "batch_labels", ",", "batch_snorm_n", ",", "batch_snorm_e", ")", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "            ", "batch_x", "=", "batch_graphs", ".", "ndata", "[", "'feat'", "]", ".", "to", "(", "device", ")", "\n", "batch_e", "=", "batch_graphs", ".", "edata", "[", "'feat'", "]", ".", "to", "(", "device", ")", "\n", "batch_snorm_e", "=", "batch_snorm_e", ".", "to", "(", "device", ")", "\n", "batch_snorm_n", "=", "batch_snorm_n", ".", "to", "(", "device", ")", "\n", "batch_labels", "=", "batch_labels", ".", "to", "(", "device", ")", "\n", "batch_scores", "=", "model", ".", "forward", "(", "batch_graphs", ",", "batch_x", ",", "batch_e", ",", "batch_snorm_n", ",", "batch_snorm_e", ")", "\n", "is_labeled", "=", "batch_labels", "==", "batch_labels", "\n", "loss", "=", "model", ".", "loss", "(", "batch_scores", "[", "is_labeled", "]", ",", "batch_labels", ".", "float", "(", ")", "[", "is_labeled", "]", ")", "\n", "epoch_test_loss", "+=", "loss", ".", "detach", "(", ")", ".", "item", "(", ")", "\n", "list_scores", ".", "append", "(", "batch_scores", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "list_labels", ".", "append", "(", "batch_labels", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "\n", "", "epoch_test_loss", "/=", "(", "iter", "+", "1", ")", "\n", "evaluator", "=", "Evaluator", "(", "name", "=", "'ogbg-molpcba'", ")", "\n", "epoch_test_AP", "=", "evaluator", ".", "eval", "(", "{", "'y_pred'", ":", "torch", ".", "cat", "(", "list_scores", ")", ",", "'y_true'", ":", "torch", ".", "cat", "(", "list_labels", ")", "}", ")", "[", "'ap'", "]", "\n", "\n", "", "return", "epoch_test_loss", ",", "epoch_test_AP", "", "", ""]], "home.repos.pwc.inspect_result.Saro00_DGN.data.HIV.HIVDGL.__init__": [[50, 63], ["len", "HIV.HIVDGL.get_eig", "HIV.HIVDGL._add_positional_encodings", "g[].number_of_nodes", "HIV.HIVDGL.graph_lists.append", "HIV.HIVDGL.graph_labels.append"], "methods", ["home.repos.pwc.inspect_result.Saro00_DGN.data.molecules.MoleculeDGL.get_eig", "home.repos.pwc.inspect_result.Saro00_DGN.data.molecules.MoleculeDGL._add_positional_encodings"], ["    ", "def", "__init__", "(", "self", ",", "data", ",", "split", ",", "norm", "=", "'norm'", ",", "pos_enc_dim", "=", "0", ")", ":", "\n", "        ", "self", ".", "split", "=", "split", "\n", "self", ".", "data", "=", "[", "g", "for", "g", "in", "data", "[", "self", ".", "split", "]", "]", "\n", "self", ".", "graph_lists", "=", "[", "]", "\n", "self", ".", "graph_labels", "=", "[", "]", "\n", "for", "g", "in", "self", ".", "data", ":", "\n", "            ", "if", "g", "[", "0", "]", ".", "number_of_nodes", "(", ")", ">", "5", ":", "\n", "                ", "self", ".", "graph_lists", ".", "append", "(", "g", "[", "0", "]", ")", "\n", "self", ".", "graph_labels", ".", "append", "(", "g", "[", "1", "]", ")", "\n", "", "", "self", ".", "n_samples", "=", "len", "(", "self", ".", "graph_lists", ")", "\n", "self", ".", "get_eig", "(", "norm", "=", "norm", ")", "\n", "if", "pos_enc_dim", ">", "0", ":", "\n", "            ", "self", ".", "_add_positional_encodings", "(", "pos_enc_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.data.HIV.HIVDGL.get_eig": [[65, 67], ["HIV.positional_encoding"], "methods", ["home.repos.pwc.inspect_result.Saro00_DGN.data.molecules.positional_encoding"], ["", "", "def", "get_eig", "(", "self", ",", "norm", ")", ":", "\n", "        ", "self", ".", "graph_lists", "=", "[", "positional_encoding", "(", "g", ",", "4", ",", "norm", "=", "norm", ")", "for", "g", "in", "self", ".", "graph_lists", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.data.HIV.HIVDGL._add_positional_encodings": [[68, 71], ["None"], "methods", ["None"], ["", "def", "_add_positional_encodings", "(", "self", ",", "pos_enc_dim", ")", ":", "\n", "        ", "for", "g", "in", "self", ".", "graph_lists", ":", "\n", "            ", "g", ".", "ndata", "[", "'pos_enc'", "]", "=", "g", ".", "ndata", "[", "'eig'", "]", "[", ":", ",", "1", ":", "pos_enc_dim", "+", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.data.HIV.HIVDGL.__len__": [[72, 75], ["None"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return the number of graphs in the dataset.\"\"\"", "\n", "return", "self", ".", "n_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.data.HIV.HIVDGL.__getitem__": [[76, 90], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\"\n            Get the idx^th sample.\n            Parameters\n            ---------\n            idx : int\n                The sample index.\n            Returns\n            -------\n            (dgl.DGLGraph, int)\n                DGLGraph with node feature stored in `feat` field\n                And its label.\n        \"\"\"", "\n", "return", "self", ".", "graph_lists", "[", "idx", "]", ",", "self", ".", "graph_labels", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.data.HIV.HIVDataset.__init__": [[93, 111], ["time.time", "ogb.graphproppred.DglGraphPropPredDataset", "HIV.HIVDataset.dataset.get_idx_split", "HIV.HIVDGL", "HIV.HIVDGL", "HIV.HIVDGL", "ogb.graphproppred.Evaluator", "print", "print", "print", "print", "len", "len", "len", "time.time"], "methods", ["home.repos.pwc.inspect_result.Saro00_DGN.data.PCBA.DownloadPCBA.get_idx_split"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "pos_enc_dim", "=", "0", ",", "norm", "=", "'none'", ",", "verbose", "=", "True", ")", ":", "\n", "        ", "start", "=", "time", ".", "time", "(", ")", "\n", "if", "verbose", ":", "\n", "            ", "print", "(", "\"[I] Loading dataset %s...\"", "%", "(", "name", ")", ")", "\n", "", "self", ".", "name", "=", "name", "\n", "self", ".", "dataset", "=", "DglGraphPropPredDataset", "(", "name", "=", "'ogbg-molhiv'", ")", "\n", "self", ".", "split_idx", "=", "self", ".", "dataset", ".", "get_idx_split", "(", ")", "\n", "\n", "self", ".", "train", "=", "HIVDGL", "(", "self", ".", "dataset", ",", "self", ".", "split_idx", "[", "'train'", "]", ",", "norm", "=", "norm", ",", "pos_enc_dim", "=", "pos_enc_dim", ")", "\n", "self", ".", "val", "=", "HIVDGL", "(", "self", ".", "dataset", ",", "self", ".", "split_idx", "[", "'valid'", "]", ",", "norm", "=", "norm", ",", "pos_enc_dim", "=", "pos_enc_dim", ")", "\n", "self", ".", "test", "=", "HIVDGL", "(", "self", ".", "dataset", ",", "self", ".", "split_idx", "[", "'test'", "]", ",", "norm", "=", "norm", ",", "pos_enc_dim", "=", "pos_enc_dim", ")", "\n", "\n", "self", ".", "evaluator", "=", "Evaluator", "(", "name", "=", "'ogbg-molhiv'", ")", "\n", "\n", "if", "verbose", ":", "\n", "            ", "print", "(", "'train, test, val sizes :'", ",", "len", "(", "self", ".", "train", ")", ",", "len", "(", "self", ".", "test", ")", ",", "len", "(", "self", ".", "val", ")", ")", "\n", "print", "(", "\"[I] Finished loading.\"", ")", "\n", "print", "(", "\"[I] Data load time: {:.4f}s\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.data.HIV.HIVDataset.collate": [[113, 126], ["map", "torch.cat().long", "torch.cat().long", "torch.cat().long", "torch.cat().long", "torch.cat().sqrt", "torch.cat().sqrt", "torch.cat().sqrt", "torch.cat().sqrt", "torch.cat().sqrt", "torch.cat().sqrt", "torch.cat().sqrt", "torch.cat().sqrt", "dgl.batch", "zip", "graphs[].number_of_nodes", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "graphs[].number_of_edges", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "float", "len", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "float"], "methods", ["None"], ["", "", "def", "collate", "(", "self", ",", "samples", ")", ":", "\n", "# The input samples is a list of pairs (graph, label).", "\n", "        ", "graphs", ",", "labels", "=", "map", "(", "list", ",", "zip", "(", "*", "samples", ")", ")", "\n", "labels", "=", "torch", ".", "cat", "(", "labels", ")", ".", "long", "(", ")", "\n", "tab_sizes_n", "=", "[", "graphs", "[", "i", "]", ".", "number_of_nodes", "(", ")", "for", "i", "in", "range", "(", "len", "(", "graphs", ")", ")", "]", "\n", "tab_snorm_n", "=", "[", "torch", ".", "FloatTensor", "(", "size", ",", "1", ")", ".", "fill_", "(", "1.", "/", "float", "(", "size", ")", ")", "for", "size", "in", "tab_sizes_n", "]", "\n", "snorm_n", "=", "torch", ".", "cat", "(", "tab_snorm_n", ")", ".", "sqrt", "(", ")", "\n", "tab_sizes_e", "=", "[", "graphs", "[", "i", "]", ".", "number_of_edges", "(", ")", "for", "i", "in", "range", "(", "len", "(", "graphs", ")", ")", "]", "\n", "tab_snorm_e", "=", "[", "torch", ".", "FloatTensor", "(", "size", ",", "1", ")", ".", "fill_", "(", "1.", "/", "float", "(", "size", ")", ")", "for", "size", "in", "tab_sizes_e", "]", "\n", "snorm_e", "=", "torch", ".", "cat", "(", "tab_snorm_e", ")", ".", "sqrt", "(", ")", "\n", "batched_graph", "=", "dgl", ".", "batch", "(", "graphs", ")", "\n", "\n", "return", "batched_graph", ",", "labels", ",", "snorm_n", ",", "snorm_e", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.data.HIV.HIVDataset._add_self_loops": [[127, 134], ["HIV.HIVDataset.", "HIV.HIVDataset.", "HIV.HIVDataset."], "methods", ["None"], ["", "def", "_add_self_loops", "(", "self", ")", ":", "\n", "# function for adding self loops", "\n", "# this function will be called only if self_loop flag is True", "\n", "\n", "        ", "self", ".", "train", ".", "graph_lists", "=", "[", "self_loop", "(", "g", ")", "for", "g", "in", "self", ".", "train", ".", "graph_lists", "]", "\n", "self", ".", "val", ".", "graph_lists", "=", "[", "self_loop", "(", "g", ")", "for", "g", "in", "self", ".", "val", ".", "graph_lists", "]", "\n", "self", ".", "test", ".", "graph_lists", "=", "[", "self_loop", "(", "g", ")", "for", "g", "in", "self", ".", "test", ".", "graph_lists", "]", "", "", "", ""]], "home.repos.pwc.inspect_result.Saro00_DGN.data.HIV.positional_encoding": [[17, 47], ["g.adjacency_matrix_scipy().astype", "scipy.sparse.linalg.eigs", "torch.from_numpy().float", "torch.from_numpy().float", "scipy.sparse.diags", "g.adjacency_matrix_scipy", "dgl.backend.asnumpy().clip", "scipy.sparse.diags", "torch.from_numpy", "torch.from_numpy", "scipy.sparse.eye", "scipy.sparse.eye", "scipy.sparse.diags", "EigVal.argsort", "numpy.real", "dgl.backend.asnumpy", "g.number_of_nodes", "dgl.backend.asnumpy().clip", "g.number_of_nodes", "scipy.sparse.eye", "g.in_degrees", "dgl.backend.asnumpy().clip", "g.number_of_nodes", "dgl.backend.asnumpy", "g.in_degrees", "dgl.backend.asnumpy", "g.in_degrees"], "function", ["None"], ["def", "positional_encoding", "(", "g", ",", "pos_enc_dim", ",", "norm", ")", ":", "\n", "    ", "\"\"\"\n        Graph positional encoding v/ Laplacian eigenvectors\n    \"\"\"", "\n", "\n", "# Laplacian", "\n", "A", "=", "g", ".", "adjacency_matrix_scipy", "(", "return_edge_ids", "=", "False", ")", ".", "astype", "(", "float", ")", "\n", "if", "norm", "==", "'none'", ":", "\n", "        ", "N", "=", "sp", ".", "diags", "(", "dgl", ".", "backend", ".", "asnumpy", "(", "g", ".", "in_degrees", "(", ")", ")", ".", "clip", "(", "1", ")", ",", "dtype", "=", "float", ")", "\n", "L", "=", "N", "*", "sp", ".", "eye", "(", "g", ".", "number_of_nodes", "(", ")", ")", "-", "A", "\n", "", "elif", "norm", "==", "'sym'", ":", "\n", "        ", "N", "=", "sp", ".", "diags", "(", "dgl", ".", "backend", ".", "asnumpy", "(", "g", ".", "in_degrees", "(", ")", ")", ".", "clip", "(", "1", ")", "**", "-", "0.5", ",", "dtype", "=", "float", ")", "\n", "L", "=", "sp", ".", "eye", "(", "g", ".", "number_of_nodes", "(", ")", ")", "-", "N", "*", "A", "*", "N", "\n", "", "elif", "norm", "==", "'walk'", ":", "\n", "        ", "N", "=", "sp", ".", "diags", "(", "dgl", ".", "backend", ".", "asnumpy", "(", "g", ".", "in_degrees", "(", ")", ")", ".", "clip", "(", "1", ")", "**", "-", "1.", ",", "dtype", "=", "float", ")", "\n", "L", "=", "sp", ".", "eye", "(", "g", ".", "number_of_nodes", "(", ")", ")", "-", "N", "*", "A", "\n", "\n", "# # Eigenvectors with numpy", "\n", "# EigVal, EigVec = np.linalg.eig(L.toarray())", "\n", "# idx = EigVal.argsort() # increasing order", "\n", "# EigVal, EigVec = EigVal[idx], np.real(EigVec[:,idx])", "\n", "# g.ndata['pos_enc'] = torch.from_numpy(np.abs(EigVec[:,1:pos_enc_dim+1])).float()", "\n", "\n", "# Eigenvectors with scipy", "\n", "# EigVal, EigVec = sp.linalg.eigs(L, k=pos_enc_dim+1, which='SR')", "\n", "", "EigVal", ",", "EigVec", "=", "sp", ".", "linalg", ".", "eigs", "(", "L", ",", "k", "=", "pos_enc_dim", ",", "which", "=", "'SR'", ",", "tol", "=", "1e-2", ")", "\n", "EigVec", "=", "EigVec", "[", ":", ",", "EigVal", ".", "argsort", "(", ")", "]", "# increasing order", "\n", "g", ".", "ndata", "[", "'eig'", "]", "=", "torch", ".", "from_numpy", "(", "np", ".", "real", "(", "EigVec", "[", ":", ",", ":", "pos_enc_dim", "]", ")", ")", ".", "float", "(", ")", "\n", "\n", "return", "g", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.data.superpixels.SuperPixDGL.__init__": [[73, 103], ["len", "superpixels.SuperPixDGL._prepare", "open", "pickle.load", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "os.path.join", "open", "pickle.load", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "print", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.Saro00_DGN.data.molecules.MoleculeDGL._prepare"], ["    ", "def", "__init__", "(", "self", ",", "\n", "data_dir", ",", "\n", "dataset", ",", "\n", "split", ",", "\n", "use_mean_px", "=", "True", ",", "\n", "use_coord", "=", "True", ",", "\n", "proportion", "=", "1.", ")", ":", "\n", "\n", "        ", "self", ".", "split", "=", "split", "\n", "\n", "self", ".", "graph_lists", "=", "[", "]", "\n", "\n", "if", "dataset", "==", "'MNIST'", ":", "\n", "            ", "self", ".", "img_size", "=", "28", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'mnist_75sp_%s.pkl'", "%", "split", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "self", ".", "labels", ",", "self", ".", "sp_data", "=", "pickle", ".", "load", "(", "f", ")", "\n", "self", ".", "graph_labels", "=", "torch", ".", "LongTensor", "(", "self", ".", "labels", ")", "\n", "", "", "elif", "dataset", "==", "'CIFAR10'", ":", "\n", "            ", "self", ".", "img_size", "=", "32", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'cifar10_150sp_%s.pkl'", "%", "split", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "self", ".", "labels", ",", "self", ".", "sp_data", "=", "pickle", ".", "load", "(", "f", ")", "\n", "self", ".", "graph_labels", "=", "torch", ".", "LongTensor", "(", "self", ".", "labels", ")", "\n", "print", "(", ")", "\n", "\n", "", "", "self", ".", "use_mean_px", "=", "use_mean_px", "\n", "self", ".", "use_coord", "=", "use_coord", "\n", "self", ".", "n_samples", "=", "len", "(", "self", ".", "labels", ")", "\n", "self", ".", "proportion", "=", "proportion", "\n", "\n", "self", ".", "_prepare", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.data.superpixels.SuperPixDGL._prepare": [[104, 153], ["print", "enumerate", "range", "superpixels.compute_edges_list", "mean_px.reshape.reshape.reshape", "coord.reshape.reshape.reshape", "numpy.concatenate", "edge_values_list.reshape.reshape.reshape", "superpixels.SuperPixDGL.node_features.append", "superpixels.SuperPixDGL.edge_features.append", "superpixels.SuperPixDGL.Adj_matrices.append", "superpixels.SuperPixDGL.edges_lists.append", "len", "dgl.DGLGraph", "dgl.DGLGraph.add_nodes", "torch.Tensor().half", "torch.Tensor().half", "torch.Tensor().half", "torch.Tensor().half", "enumerate", "torch.Tensor().unsqueeze().half", "torch.Tensor().unsqueeze().half", "torch.Tensor().unsqueeze().half", "torch.Tensor().unsqueeze().half", "superpixels.SuperPixDGL.graph_lists.append", "superpixels.compute_adjacency_matrix_images", "superpixels.compute_adjacency_matrix_images", "superpixels.SuperPixDGL.split.upper", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "dgl.DGLGraph.add_edges", "dgl.DGLGraph.add_edges", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.Saro00_DGN.data.superpixels.compute_edges_list", "home.repos.pwc.inspect_result.Saro00_DGN.data.superpixels.compute_adjacency_matrix_images", "home.repos.pwc.inspect_result.Saro00_DGN.data.superpixels.compute_adjacency_matrix_images"], ["", "def", "_prepare", "(", "self", ")", ":", "\n", "        ", "print", "(", "\"preparing %d graphs for the %s set...\"", "%", "(", "self", ".", "n_samples", ",", "self", ".", "split", ".", "upper", "(", ")", ")", ")", "\n", "self", ".", "Adj_matrices", ",", "self", ".", "node_features", ",", "self", ".", "edges_lists", ",", "self", ".", "edge_features", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "index", ",", "sample", "in", "enumerate", "(", "self", ".", "sp_data", ")", ":", "\n", "            ", "mean_px", ",", "coord", "=", "sample", "[", ":", "2", "]", "\n", "\n", "try", ":", "\n", "                ", "coord", "=", "coord", "/", "self", ".", "img_size", "\n", "", "except", "AttributeError", ":", "\n", "                ", "VOC_has_variable_image_sizes", "=", "True", "\n", "\n", "", "if", "self", ".", "use_mean_px", ":", "\n", "                ", "A", "=", "compute_adjacency_matrix_images", "(", "coord", ",", "mean_px", ")", "# using super-pixel locations + features", "\n", "", "else", ":", "\n", "                ", "A", "=", "compute_adjacency_matrix_images", "(", "coord", ",", "mean_px", ",", "False", ")", "# using only super-pixel locations", "\n", "", "edges_list", ",", "edge_values_list", "=", "compute_edges_list", "(", "A", ")", "# NEW", "\n", "\n", "N_nodes", "=", "A", ".", "shape", "[", "0", "]", "\n", "\n", "mean_px", "=", "mean_px", ".", "reshape", "(", "N_nodes", ",", "-", "1", ")", "\n", "coord", "=", "coord", ".", "reshape", "(", "N_nodes", ",", "2", ")", "\n", "x", "=", "np", ".", "concatenate", "(", "(", "mean_px", ",", "coord", ")", ",", "axis", "=", "1", ")", "\n", "\n", "edge_values_list", "=", "edge_values_list", ".", "reshape", "(", "-", "1", ")", "# NEW # TO DOUBLE-CHECK !", "\n", "\n", "self", ".", "node_features", ".", "append", "(", "x", ")", "\n", "self", ".", "edge_features", ".", "append", "(", "edge_values_list", ")", "# NEW", "\n", "self", ".", "Adj_matrices", ".", "append", "(", "A", ")", "\n", "self", ".", "edges_lists", ".", "append", "(", "edges_list", ")", "\n", "\n", "", "for", "index", "in", "range", "(", "len", "(", "self", ".", "sp_data", ")", ")", ":", "\n", "            ", "g", "=", "dgl", ".", "DGLGraph", "(", ")", "\n", "g", ".", "add_nodes", "(", "self", ".", "node_features", "[", "index", "]", ".", "shape", "[", "0", "]", ")", "\n", "g", ".", "ndata", "[", "'feat'", "]", "=", "torch", ".", "Tensor", "(", "self", ".", "node_features", "[", "index", "]", ")", ".", "half", "(", ")", "\n", "\n", "for", "src", ",", "dsts", "in", "enumerate", "(", "self", ".", "edges_lists", "[", "index", "]", ")", ":", "\n", "# handling for 1 node where the self loop would be the only edge", "\n", "# since, VOC Superpixels has few samples (5 samples) with only 1 node", "\n", "                ", "if", "self", ".", "node_features", "[", "index", "]", ".", "shape", "[", "0", "]", "==", "1", ":", "\n", "                    ", "g", ".", "add_edges", "(", "src", ",", "dsts", ")", "\n", "", "else", ":", "\n", "                    ", "g", ".", "add_edges", "(", "src", ",", "dsts", "[", "dsts", "!=", "src", "]", ")", "\n", "\n", "# adding edge features for Residual Gated ConvNet", "\n", "", "", "edge_feat_dim", "=", "g", ".", "ndata", "[", "'feat'", "]", ".", "shape", "[", "1", "]", "# dim same as node feature dim", "\n", "# g.edata['feat'] = torch.ones(g.number_of_edges(), edge_feat_dim).half()", "\n", "g", ".", "edata", "[", "'feat'", "]", "=", "torch", ".", "Tensor", "(", "self", ".", "edge_features", "[", "index", "]", ")", ".", "unsqueeze", "(", "1", ")", ".", "half", "(", ")", "# NEW ", "\n", "\n", "self", ".", "graph_lists", ".", "append", "(", "g", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.data.superpixels.SuperPixDGL.get_eig": [[154, 160], ["superpixels.sort_list_eig", "superpixels.coord_encoding", "superpixels.positional_encoding"], "methods", ["home.repos.pwc.inspect_result.Saro00_DGN.data.superpixels.sort_list_eig", "home.repos.pwc.inspect_result.Saro00_DGN.data.superpixels.coord_encoding", "home.repos.pwc.inspect_result.Saro00_DGN.data.molecules.positional_encoding"], ["", "", "def", "get_eig", "(", "self", ",", "coord_eig", ")", ":", "\n", "        ", "if", "coord_eig", ":", "\n", "            ", "self", ".", "graph_lists", "=", "[", "coord_encoding", "(", "g", ")", "for", "g", "in", "self", ".", "graph_lists", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "graph_lists", "=", "[", "positional_encoding", "(", "g", ",", "7", ")", "for", "g", "in", "self", ".", "graph_lists", "]", "\n", "self", ".", "graph_lists", "=", "sort_list_eig", "(", "self", ".", "graph_lists", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.data.superpixels.SuperPixDGL.__len__": [[165, 168], ["None"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return the number of graphs in the dataset.\"\"\"", "\n", "return", "self", ".", "n_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.data.superpixels.SuperPixDGL.__getitem__": [[169, 183], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\"\n            Get the idx^th sample.\n            Parameters\n            ---------\n            idx : int\n                The sample index.\n            Returns\n            -------\n            (dgl.DGLGraph, int)\n                DGLGraph with node feature stored in `feat` field\n                And its label.\n        \"\"\"", "\n", "return", "self", ".", "graph_lists", "[", "idx", "]", ",", "self", ".", "graph_labels", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.data.superpixels.DGLFormDataset.__init__": [[191, 196], ["all", "len", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "*", "lists", ")", ":", "\n", "        ", "assert", "all", "(", "len", "(", "lists", "[", "0", "]", ")", "==", "len", "(", "li", ")", "for", "li", "in", "lists", ")", "\n", "self", ".", "lists", "=", "lists", "\n", "self", ".", "graph_lists", "=", "lists", "[", "0", "]", "\n", "self", ".", "graph_labels", "=", "lists", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.data.superpixels.DGLFormDataset.get_eig": [[197, 203], ["superpixels.sort_list_eig", "superpixels.coord_encoding", "superpixels.positional_encoding"], "methods", ["home.repos.pwc.inspect_result.Saro00_DGN.data.superpixels.sort_list_eig", "home.repos.pwc.inspect_result.Saro00_DGN.data.superpixels.coord_encoding", "home.repos.pwc.inspect_result.Saro00_DGN.data.molecules.positional_encoding"], ["", "def", "get_eig", "(", "self", ",", "coord_eig", ")", ":", "\n", "        ", "if", "coord_eig", ":", "\n", "            ", "self", ".", "graph_lists", "=", "[", "coord_encoding", "(", "g", ")", "for", "g", "in", "self", ".", "graph_lists", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "graph_lists", "=", "[", "positional_encoding", "(", "g", ",", "7", ")", "for", "g", "in", "self", ".", "graph_lists", "]", "\n", "self", ".", "graph_lists", "=", "sort_list_eig", "(", "self", ".", "graph_lists", ")", "\n", "# for g in self.graph_lists:", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.data.superpixels.DGLFormDataset.__getitem__": [[207, 209], ["tuple"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "tuple", "(", "li", "[", "index", "]", "for", "li", "in", "self", ".", "lists", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.data.superpixels.DGLFormDataset.__len__": [[210, 212], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "lists", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.data.superpixels.SuperPixDatasetDGL.__init__": [[215, 252], ["time.time", "superpixels.SuperPixDGL", "superpixels.SuperPixDGL", "superpixels.DGLFormDataset", "superpixels.DGLFormDataset", "print", "print", "print", "time.time"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "num_val", "=", "5000", ")", ":", "\n", "        ", "\"\"\"\n            Takes input standard image dataset name (MNIST/CIFAR10) \n            and returns the superpixels graph.\n            \n            This class uses results from the above SuperPix class.\n            which contains the steps for the generation of the Superpixels\n            graph from a superpixel .pkl file that has been given by\n            https://github.com/bknyaz/graph_attention_pool\n            \n            Please refer the SuperPix class for details.\n        \"\"\"", "\n", "t_data", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "name", "=", "name", "\n", "\n", "use_mean_px", "=", "True", "# using super-pixel locations + features", "\n", "use_mean_px", "=", "False", "# using only super-pixel locations", "\n", "if", "use_mean_px", ":", "\n", "            ", "print", "(", "'Adj matrix defined from super-pixel locations + features'", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'Adj matrix defined from super-pixel locations (only)'", ")", "\n", "", "use_coord", "=", "True", "\n", "self", ".", "test", "=", "SuperPixDGL", "(", "\"./data/superpixels\"", ",", "dataset", "=", "self", ".", "name", ",", "split", "=", "'test'", ",", "\n", "use_mean_px", "=", "use_mean_px", ",", "\n", "use_coord", "=", "use_coord", ")", "\n", "\n", "self", ".", "train_", "=", "SuperPixDGL", "(", "\"./data/superpixels\"", ",", "dataset", "=", "self", ".", "name", ",", "split", "=", "'train'", ",", "\n", "use_mean_px", "=", "use_mean_px", ",", "\n", "use_coord", "=", "use_coord", ")", "\n", "\n", "_val_graphs", ",", "_val_labels", "=", "self", ".", "train_", "[", ":", "num_val", "]", "\n", "_train_graphs", ",", "_train_labels", "=", "self", ".", "train_", "[", "num_val", ":", "]", "\n", "\n", "self", ".", "val", "=", "DGLFormDataset", "(", "_val_graphs", ",", "_val_labels", ")", "\n", "self", ".", "train", "=", "DGLFormDataset", "(", "_train_graphs", ",", "_train_labels", ")", "\n", "\n", "print", "(", "\"[I] Data load time: {:.4f}s\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "t_data", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.data.superpixels.SuperPixDataset.__init__": [[282, 314], ["time.time", "print", "open", "pickle.load", "print", "print", "f[].get_eig", "f[].get_eig", "f[].get_eig", "print", "print", "print", "len", "int", "superpixels.DGLFormDataset", "len", "len", "len", "len", "len", "time.time"], "methods", ["home.repos.pwc.inspect_result.Saro00_DGN.data.molecules.MoleculeDGL.get_eig", "home.repos.pwc.inspect_result.Saro00_DGN.data.molecules.MoleculeDGL.get_eig", "home.repos.pwc.inspect_result.Saro00_DGN.data.molecules.MoleculeDGL.get_eig"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "coord_eig", "=", "False", ",", "proportion", "=", "1.", ",", "verbose", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n            Loading Superpixels datasets\n        \"\"\"", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "if", "verbose", ":", "\n", "            ", "print", "(", "\"[I] Loading dataset %s...\"", "%", "(", "name", ")", ")", "\n", "", "self", ".", "name", "=", "name", "\n", "data_dir", "=", "'data/'", "\n", "with", "open", "(", "data_dir", "+", "name", "+", "'.pkl'", ",", "\"rb\"", ")", "as", "f", ":", "\n", "            ", "f", "=", "pickle", ".", "load", "(", "f", ")", "\n", "print", "(", "\"Total graphs training set \"", ",", "len", "(", "f", "[", "0", "]", ")", ")", "\n", "\n", "if", "proportion", "<", "1.", "-", "1e-5", ":", "\n", "                ", "l", "=", "int", "(", "len", "(", "f", "[", "0", "]", ")", "*", "proportion", ")", "\n", "# f[0].lists = f[0].lists[:l]", "\n", "# f[0].graph_lists = f[0].graph_lists[:l]", "\n", "# f[0].graph_labels = f[0].graph_labels[:l]", "\n", "f", "[", "0", "]", "=", "DGLFormDataset", "(", "f", "[", "0", "]", ".", "graph_lists", "[", ":", "l", "]", ",", "f", "[", "0", "]", ".", "graph_labels", "[", ":", "l", "]", ")", "\n", "\n", "", "print", "(", "\"Number of graphs used for training \"", ",", "len", "(", "f", "[", "0", "]", ")", ")", "\n", "\n", "f", "[", "0", "]", ".", "get_eig", "(", "coord_eig", ")", "\n", "self", ".", "train", "=", "f", "[", "0", "]", "\n", "f", "[", "1", "]", ".", "get_eig", "(", "coord_eig", ")", "\n", "self", ".", "val", "=", "f", "[", "1", "]", "\n", "f", "[", "2", "]", ".", "get_eig", "(", "coord_eig", ")", "\n", "self", ".", "test", "=", "f", "[", "2", "]", "\n", "", "if", "verbose", ":", "\n", "            ", "print", "(", "'train, test, val sizes :'", ",", "len", "(", "self", ".", "train", ")", ",", "len", "(", "self", ".", "test", ")", ",", "len", "(", "self", ".", "val", ")", ")", "\n", "print", "(", "\"[I] Finished loading.\"", ")", "\n", "print", "(", "\"[I] Data load time: {:.4f}s\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.data.superpixels.SuperPixDataset.collate": [[316, 331], ["map", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.cat().sqrt", "torch.cat().sqrt", "torch.cat().sqrt", "torch.cat().sqrt", "torch.cat().sqrt", "torch.cat().sqrt", "torch.cat().sqrt", "torch.cat().sqrt", "enumerate", "dgl.batch", "zip", "numpy.array", "graphs[].number_of_nodes", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "graphs[].number_of_edges", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "graph.ndata[].float", "graph.edata[].float", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "float", "len", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "float"], "methods", ["None"], ["", "", "def", "collate", "(", "self", ",", "samples", ")", ":", "\n", "# The input samples is a list of pairs (graph, label).", "\n", "        ", "graphs", ",", "labels", "=", "map", "(", "list", ",", "zip", "(", "*", "samples", ")", ")", "\n", "labels", "=", "torch", ".", "tensor", "(", "np", ".", "array", "(", "labels", ")", ")", "\n", "tab_sizes_n", "=", "[", "graphs", "[", "i", "]", ".", "number_of_nodes", "(", ")", "for", "i", "in", "range", "(", "len", "(", "graphs", ")", ")", "]", "\n", "tab_snorm_n", "=", "[", "torch", ".", "FloatTensor", "(", "size", ",", "1", ")", ".", "fill_", "(", "1.", "/", "float", "(", "size", ")", ")", "for", "size", "in", "tab_sizes_n", "]", "\n", "snorm_n", "=", "torch", ".", "cat", "(", "tab_snorm_n", ")", ".", "sqrt", "(", ")", "\n", "tab_sizes_e", "=", "[", "graphs", "[", "i", "]", ".", "number_of_edges", "(", ")", "for", "i", "in", "range", "(", "len", "(", "graphs", ")", ")", "]", "\n", "tab_snorm_e", "=", "[", "torch", ".", "FloatTensor", "(", "size", ",", "1", ")", ".", "fill_", "(", "1.", "/", "float", "(", "size", ")", ")", "for", "size", "in", "tab_sizes_e", "]", "\n", "snorm_e", "=", "torch", ".", "cat", "(", "tab_snorm_e", ")", ".", "sqrt", "(", ")", "\n", "for", "idx", ",", "graph", "in", "enumerate", "(", "graphs", ")", ":", "\n", "            ", "graphs", "[", "idx", "]", ".", "ndata", "[", "'feat'", "]", "=", "graph", ".", "ndata", "[", "'feat'", "]", ".", "float", "(", ")", "\n", "graphs", "[", "idx", "]", ".", "edata", "[", "'feat'", "]", "=", "graph", ".", "edata", "[", "'feat'", "]", ".", "float", "(", ")", "\n", "", "batched_graph", "=", "dgl", ".", "batch", "(", "graphs", ")", "\n", "return", "batched_graph", ",", "labels", ",", "snorm_n", ",", "snorm_e", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.data.superpixels.SuperPixDataset._add_self_loops": [[332, 344], ["superpixels.DGLFormDataset", "superpixels.DGLFormDataset", "superpixels.DGLFormDataset", "superpixels.SuperPixDataset.", "superpixels.SuperPixDataset.", "superpixels.SuperPixDataset."], "methods", ["None"], ["", "def", "_add_self_loops", "(", "self", ")", ":", "\n", "\n", "# function for adding self loops", "\n", "# this function will be called only if self_loop flag is True", "\n", "\n", "        ", "self", ".", "train", ".", "graph_lists", "=", "[", "self_loop", "(", "g", ")", "for", "g", "in", "self", ".", "train", ".", "graph_lists", "]", "\n", "self", ".", "val", ".", "graph_lists", "=", "[", "self_loop", "(", "g", ")", "for", "g", "in", "self", ".", "val", ".", "graph_lists", "]", "\n", "self", ".", "test", ".", "graph_lists", "=", "[", "self_loop", "(", "g", ")", "for", "g", "in", "self", ".", "test", ".", "graph_lists", "]", "\n", "\n", "self", ".", "train", "=", "DGLFormDataset", "(", "self", ".", "train", ".", "graph_lists", ",", "self", ".", "train", ".", "graph_labels", ")", "\n", "self", ".", "val", "=", "DGLFormDataset", "(", "self", ".", "val", ".", "graph_lists", ",", "self", ".", "val", ".", "graph_labels", ")", "\n", "self", ".", "test", "=", "DGLFormDataset", "(", "self", ".", "test", ".", "graph_lists", ",", "self", ".", "test", ".", "graph_labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.data.superpixels.sigma": [[17, 29], ["numpy.partition", "knns.sum().reshape", "numpy.array().reshape", "knns.sum", "numpy.array"], "function", ["None"], ["def", "sigma", "(", "dists", ",", "kth", "=", "8", ")", ":", "\n", "# Compute sigma and reshape", "\n", "    ", "try", ":", "\n", "# Get k-nearest neighbors for each node", "\n", "        ", "knns", "=", "np", ".", "partition", "(", "dists", ",", "kth", ",", "axis", "=", "-", "1", ")", "[", ":", ",", "kth", ":", ":", "-", "1", "]", "\n", "sigma", "=", "knns", ".", "sum", "(", "axis", "=", "1", ")", ".", "reshape", "(", "(", "knns", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "/", "kth", "\n", "", "except", "ValueError", ":", "# handling for graphs with num_nodes less than kth", "\n", "        ", "num_nodes", "=", "dists", ".", "shape", "[", "0", "]", "\n", "# this sigma value is irrelevant since not used for final compute_edge_list", "\n", "sigma", "=", "np", ".", "array", "(", "[", "1", "]", "*", "num_nodes", ")", ".", "reshape", "(", "num_nodes", ",", "1", ")", "\n", "\n", "", "return", "sigma", "+", "1e-8", "# adding epsilon to avoid zero value of sigma", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.data.superpixels.compute_adjacency_matrix_images": [[31, 48], ["coord.reshape.reshape", "scipy.spatial.distance.cdist", "scipy.spatial.distance.cdist", "numpy.exp", "numpy.exp", "numpy.diag_indices_from", "superpixels.sigma", "superpixels.sigma", "superpixels.sigma"], "function", ["home.repos.pwc.inspect_result.Saro00_DGN.data.superpixels.sigma", "home.repos.pwc.inspect_result.Saro00_DGN.data.superpixels.sigma", "home.repos.pwc.inspect_result.Saro00_DGN.data.superpixels.sigma"], ["", "def", "compute_adjacency_matrix_images", "(", "coord", ",", "feat", ",", "use_feat", "=", "True", ",", "kth", "=", "8", ")", ":", "\n", "    ", "coord", "=", "coord", ".", "reshape", "(", "-", "1", ",", "2", ")", "\n", "# Compute coordinate distance", "\n", "c_dist", "=", "cdist", "(", "coord", ",", "coord", ")", "\n", "\n", "if", "use_feat", ":", "\n", "# Compute feature distance", "\n", "        ", "f_dist", "=", "cdist", "(", "feat", ",", "feat", ")", "\n", "# Compute adjacency", "\n", "A", "=", "np", ".", "exp", "(", "-", "(", "c_dist", "/", "sigma", "(", "c_dist", ")", ")", "**", "2", "-", "(", "f_dist", "/", "sigma", "(", "f_dist", ")", ")", "**", "2", ")", "\n", "", "else", ":", "\n", "        ", "A", "=", "np", ".", "exp", "(", "-", "(", "c_dist", "/", "sigma", "(", "c_dist", ")", ")", "**", "2", ")", "\n", "\n", "# Convert to symmetric matrix", "\n", "", "A", "=", "0.5", "*", "(", "A", "+", "A", ".", "T", ")", "\n", "A", "[", "np", ".", "diag_indices_from", "(", "A", ")", "]", "=", "0", "\n", "return", "A", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.data.superpixels.compute_edges_list": [[50, 70], ["numpy.tile().reshape", "numpy.argpartition", "numpy.partition", "A[].reshape", "knns[].reshape", "numpy.tile", "numpy.arange", "numpy.arange", "numpy.arange"], "function", ["None"], ["", "def", "compute_edges_list", "(", "A", ",", "kth", "=", "8", "+", "1", ")", ":", "\n", "# Get k-similar neighbor indices for each node", "\n", "\n", "    ", "num_nodes", "=", "A", ".", "shape", "[", "0", "]", "\n", "new_kth", "=", "num_nodes", "-", "kth", "\n", "\n", "if", "num_nodes", ">", "9", ":", "\n", "        ", "knns", "=", "np", ".", "argpartition", "(", "A", ",", "new_kth", "-", "1", ",", "axis", "=", "-", "1", ")", "[", ":", ",", "new_kth", ":", "-", "1", "]", "\n", "knn_values", "=", "np", ".", "partition", "(", "A", ",", "new_kth", "-", "1", ",", "axis", "=", "-", "1", ")", "[", ":", ",", "new_kth", ":", "-", "1", "]", "# NEW", "\n", "", "else", ":", "\n", "# handling for graphs with less than kth nodes", "\n", "# in such cases, the resulting graph will be fully connected", "\n", "        ", "knns", "=", "np", ".", "tile", "(", "np", ".", "arange", "(", "num_nodes", ")", ",", "num_nodes", ")", ".", "reshape", "(", "num_nodes", ",", "num_nodes", ")", "\n", "knn_values", "=", "A", "# NEW", "\n", "\n", "# removing self loop", "\n", "if", "num_nodes", "!=", "1", ":", "\n", "            ", "knn_values", "=", "A", "[", "knns", "!=", "np", ".", "arange", "(", "num_nodes", ")", "[", ":", ",", "None", "]", "]", ".", "reshape", "(", "num_nodes", ",", "-", "1", ")", "# NEW", "\n", "knns", "=", "knns", "[", "knns", "!=", "np", ".", "arange", "(", "num_nodes", ")", "[", ":", ",", "None", "]", "]", ".", "reshape", "(", "num_nodes", ",", "-", "1", ")", "\n", "", "", "return", "knns", ",", "knn_values", "# NEW", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.data.superpixels.self_loop": [[254, 278], ["dgl.DGLGraph", "dgl.DGLGraph.add_nodes", "g.all_edges", "dgl.backend.zerocopy_to_numpy", "dgl.backend.zerocopy_to_numpy", "numpy.arange", "dgl.DGLGraph.add_edges", "dgl.DGLGraph.add_edges", "torch.zeros", "torch.zeros", "g.number_of_nodes", "g.number_of_nodes", "dgl.DGLGraph.number_of_edges"], "function", ["None"], ["", "", "def", "self_loop", "(", "g", ")", ":", "\n", "    ", "\"\"\"\n        Utility function only, to be used only when necessary as per user self_loop flag\n        : Overwriting the function dgl.transform.add_self_loop() to not miss ndata['feat'] and edata['feat']\n        \n        \n        This function is called inside a function in SuperPixDataset class.\n    \"\"\"", "\n", "new_g", "=", "dgl", ".", "DGLGraph", "(", ")", "\n", "new_g", ".", "add_nodes", "(", "g", ".", "number_of_nodes", "(", ")", ")", "\n", "new_g", ".", "ndata", "[", "'feat'", "]", "=", "g", ".", "ndata", "[", "'feat'", "]", "\n", "\n", "src", ",", "dst", "=", "g", ".", "all_edges", "(", "order", "=", "\"eid\"", ")", "\n", "src", "=", "dgl", ".", "backend", ".", "zerocopy_to_numpy", "(", "src", ")", "\n", "dst", "=", "dgl", ".", "backend", ".", "zerocopy_to_numpy", "(", "dst", ")", "\n", "non_self_edges_idx", "=", "src", "!=", "dst", "\n", "nodes", "=", "np", ".", "arange", "(", "g", ".", "number_of_nodes", "(", ")", ")", "\n", "new_g", ".", "add_edges", "(", "src", "[", "non_self_edges_idx", "]", ",", "dst", "[", "non_self_edges_idx", "]", ")", "\n", "new_g", ".", "add_edges", "(", "nodes", ",", "nodes", ")", "\n", "\n", "# This new edata is not used since this function gets called only for GCN, GAT", "\n", "# However, we need this for the generic requirement of ndata and edata", "\n", "new_g", ".", "edata", "[", "'feat'", "]", "=", "torch", ".", "zeros", "(", "new_g", ".", "number_of_edges", "(", ")", ")", "\n", "return", "new_g", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.data.superpixels.positional_encoding": [[346, 369], ["g.adjacency_matrix_scipy().astype", "scipy.sparse.diags", "scipy.sparse.linalg.eigs", "torch.from_numpy().float", "torch.from_numpy().float", "scipy.sparse.eye", "g.adjacency_matrix_scipy", "dgl.backend.asnumpy().clip", "g.number_of_nodes", "torch.from_numpy", "torch.from_numpy", "EigVal.argsort", "numpy.real", "dgl.backend.asnumpy", "g.in_degrees"], "function", ["None"], ["", "", "def", "positional_encoding", "(", "g", ",", "pos_enc_dim", ")", ":", "\n", "    ", "\"\"\"\n        Graph positional encoding v/ Laplacian eigenvectors\n    \"\"\"", "\n", "\n", "# Laplacian", "\n", "A", "=", "g", ".", "adjacency_matrix_scipy", "(", "return_edge_ids", "=", "False", ")", ".", "astype", "(", "float", ")", "\n", "N", "=", "sp", ".", "diags", "(", "dgl", ".", "backend", ".", "asnumpy", "(", "g", ".", "in_degrees", "(", ")", ")", ".", "clip", "(", "1", ")", "**", "-", "0.5", ",", "dtype", "=", "float", ")", "\n", "L", "=", "sp", ".", "eye", "(", "g", ".", "number_of_nodes", "(", ")", ")", "-", "N", "*", "A", "*", "N", "\n", "\n", "# # Eigenvectors with numpy", "\n", "# EigVal, EigVec = np.linalg.eig(L.toarray())", "\n", "# idx = EigVal.argsort() # increasing order", "\n", "# EigVal, EigVec = EigVal[idx], np.real(EigVec[:,idx])", "\n", "# g.ndata['pos_enc'] = torch.from_numpy(np.abs(EigVec[:,1:pos_enc_dim+1])).float()", "\n", "\n", "# Eigenvectors with scipy", "\n", "# EigVal, EigVec = sp.linalg.eigs(L, k=pos_enc_dim+1, which='SR')", "\n", "EigVal", ",", "EigVec", "=", "sp", ".", "linalg", ".", "eigs", "(", "L", ",", "k", "=", "pos_enc_dim", "+", "1", ",", "which", "=", "'SR'", ")", "# for 40 PEs", "\n", "EigVec", "=", "EigVec", "[", ":", ",", "EigVal", ".", "argsort", "(", ")", "]", "# increasing order", "\n", "g", ".", "ndata", "[", "'eig'", "]", "=", "torch", ".", "from_numpy", "(", "np", ".", "real", "(", "EigVec", "[", ":", ",", ":", "pos_enc_dim", "]", ")", ")", ".", "float", "(", ")", "\n", "\n", "return", "g", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.data.superpixels.get_scores": [[371, 391], ["range", "abs", "abs", "float", "float", "float"], "function", ["None"], ["", "def", "get_scores", "(", "x", ",", "y", ",", "eig", ")", ":", "\n", "    ", "n", "=", "x", ".", "shape", "[", "0", "]", "\n", "hor", "=", "0", "\n", "ver", "=", "0", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "        ", "if", "float", "(", "eig", "[", "i", "]", ")", ">", "0", ":", "\n", "            ", "if", "float", "(", "x", "[", "i", "]", ")", ">", "0.5", ":", "\n", "                ", "hor", "+=", "1", "\n", "", "else", ":", "\n", "                ", "hor", "-=", "1", "\n", "", "if", "float", "(", "y", "[", "i", "]", ")", ">", "0.5", ":", "\n", "                ", "ver", "+=", "1", "\n", "", "else", ":", "\n", "                ", "ver", "-=", "1", "\n", "\n", "", "", "", "scores", "=", "{", "}", "\n", "scores", "[", "'hor'", "]", "=", "abs", "(", "hor", ")", "\n", "scores", "[", "'ver'", "]", "=", "abs", "(", "ver", ")", "\n", "\n", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.data.superpixels.sort_eig": [[393, 416], ["superpixels.get_scores", "superpixels.get_scores", "max", "max", "max"], "function", ["home.repos.pwc.inspect_result.Saro00_DGN.data.superpixels.get_scores", "home.repos.pwc.inspect_result.Saro00_DGN.data.superpixels.get_scores"], ["", "def", "sort_eig", "(", "graph", ")", ":", "\n", "    ", "x", "=", "graph", ".", "ndata", "[", "'feat'", "]", "[", ":", ",", "3", "]", "\n", "y", "=", "graph", ".", "ndata", "[", "'feat'", "]", "[", ":", ",", "4", "]", "\n", "eigs", "=", "graph", ".", "ndata", "[", "'eig'", "]", "\n", "eig1", "=", "eigs", "[", ":", ",", "1", "]", "\n", "eig2", "=", "eigs", "[", ":", ",", "2", "]", "\n", "scores1", "=", "get_scores", "(", "x", ",", "y", ",", "eig1", ")", "\n", "scores2", "=", "get_scores", "(", "x", ",", "y", ",", "eig2", ")", "\n", "\n", "if", "scores1", "[", "'hor'", "]", "==", "max", "(", "scores1", "[", "'hor'", "]", ",", "scores2", "[", "'ver'", "]", ",", "scores1", "[", "'ver'", "]", ",", "scores2", "[", "'hor'", "]", ")", ":", "\n", "        ", "return", "graph", "\n", "", "elif", "scores2", "[", "'ver'", "]", "==", "max", "(", "scores1", "[", "'hor'", "]", ",", "scores2", "[", "'ver'", "]", ",", "scores1", "[", "'ver'", "]", ",", "scores2", "[", "'hor'", "]", ")", ":", "\n", "        ", "return", "graph", "\n", "", "elif", "scores1", "[", "'ver'", "]", "==", "max", "(", "scores1", "[", "'hor'", "]", ",", "scores2", "[", "'ver'", "]", ",", "scores1", "[", "'ver'", "]", ",", "scores2", "[", "'hor'", "]", ")", ":", "\n", "        ", "eigs", "[", ":", ",", "1", "]", "=", "eig2", "\n", "eigs", "[", ":", ",", "2", "]", "=", "eig1", "\n", "graph", ".", "ndata", "[", "'eig'", "]", "=", "eigs", "\n", "return", "graph", "\n", "", "else", ":", "\n", "        ", "eigs", "[", ":", ",", "1", "]", "=", "eig2", "\n", "eigs", "[", ":", ",", "2", "]", "=", "eig1", "\n", "graph", ".", "ndata", "[", "'eig'", "]", "=", "eigs", "\n", "return", "graph", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.data.superpixels.sort_list_eig": [[418, 421], ["superpixels.sort_eig"], "function", ["home.repos.pwc.inspect_result.Saro00_DGN.data.superpixels.sort_eig"], ["", "", "def", "sort_list_eig", "(", "list", ")", ":", "\n", "    ", "list_new", "=", "[", "sort_eig", "(", "graph", ")", "for", "graph", "in", "list", "]", "\n", "return", "list_new", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.data.superpixels.coord_encoding": [[423, 429], ["[].type", "[].type", "torch.zeros().type", "torch.zeros().type", "torch.cat", "torch.cat", "torch.zeros", "torch.zeros"], "function", ["None"], ["", "def", "coord_encoding", "(", "graph", ")", ":", "\n", "    ", "x", "=", "graph", ".", "ndata", "[", "'feat'", "]", "[", ":", ",", "3", ":", "4", "]", ".", "type", "(", "torch", ".", "FloatTensor", ")", "\n", "y", "=", "graph", ".", "ndata", "[", "'feat'", "]", "[", ":", ",", "4", ":", "5", "]", ".", "type", "(", "torch", ".", "FloatTensor", ")", "\n", "null", "=", "torch", ".", "zeros", "(", "x", ".", "shape", ")", ".", "type", "(", "torch", ".", "FloatTensor", ")", "\n", "graph", ".", "ndata", "[", "'eig'", "]", "=", "torch", ".", "cat", "(", "[", "null", ",", "x", ",", "y", "]", ",", "dim", "=", "-", "1", ")", "\n", "return", "graph", "\n", "", ""]], "home.repos.pwc.inspect_result.Saro00_DGN.data.PCBA.DownloadPCBA.__init__": [[84, 103], ["os.join", "os.join", "PCBA.DownloadPCBA.pre_process"], "methods", ["home.repos.pwc.inspect_result.Saro00_DGN.data.PCBA.DownloadPCBA.pre_process"], ["def", "__init__", "(", "self", ",", "name", "=", "'ogbg-pcba'", ",", "root", "=", "\"data\"", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "## original name, e.g., ogbg-mol-tox21", "\n", "self", ".", "dir_name", "=", "'ogbg_molpcba_dgl'", "\n", "self", ".", "original_root", "=", "root", "\n", "self", ".", "root", "=", "osp", ".", "join", "(", "root", ",", "self", ".", "dir_name", ")", "\n", "\n", "# check version", "\n", "# First check whether the dataset has been already downloaded or not.", "\n", "# If so, check whether the dataset version is the newest or not.", "\n", "# If the dataset is not the newest version, notify this to the user.", "\n", "\n", "self", ".", "download_name", "=", "'pcba'", "## name of downloaded file, e.g., tox21", "\n", "\n", "self", ".", "num_tasks", "=", "128", "\n", "self", ".", "eval_metric", "=", "'ap'", "\n", "self", ".", "task_type", "=", "'binary classification'", "\n", "self", ".", "num_classes", "=", "2", "\n", "\n", "self", ".", "pre_process", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.data.PCBA.DownloadPCBA.pre_process": [[104, 152], ["os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "ogb.utils.url.decide_download", "ogb.io.read_graph_dgl.read_csv_graph_dgl", "numpy.isnan().any", "print", "ogb.utils.url.download_url", "ogb.utils.url.extract_zip", "os.unlink", "os.unlink", "os.unlink", "os.unlink", "shutil.move", "print", "exit", "pandas.read_csv", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "shutil.rmtree", "os.join", "os.join", "os.join", "os.join", "numpy.isnan", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["None"], ["", "def", "pre_process", "(", "self", ")", ":", "\n", "        ", "processed_dir", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "'processed'", ")", "\n", "raw_dir", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "'raw'", ")", "\n", "pre_processed_file_path", "=", "osp", ".", "join", "(", "processed_dir", ",", "'dgl_data_processed'", ")", "\n", "\n", "### download", "\n", "url", "=", "'https://snap.stanford.edu/ogb/data/graphproppred/csv_mol_download/pcba.zip'", "\n", "if", "decide_download", "(", "url", ")", ":", "\n", "            ", "path", "=", "download_url", "(", "url", ",", "self", ".", "original_root", ")", "\n", "extract_zip", "(", "path", ",", "self", ".", "original_root", ")", "\n", "os", ".", "unlink", "(", "path", ")", "\n", "# delete folder if there exists", "\n", "try", ":", "\n", "                ", "shutil", ".", "rmtree", "(", "self", ".", "root", ")", "\n", "", "except", ":", "\n", "                ", "pass", "\n", "", "shutil", ".", "move", "(", "osp", ".", "join", "(", "self", ".", "original_root", ",", "self", ".", "download_name", ")", ",", "self", ".", "root", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"Stop download.\"", ")", "\n", "exit", "(", "-", "1", ")", "\n", "\n", "### preprocess", "\n", "", "add_inverse_edge", "=", "True", "\n", "additional_node_files", "=", "[", "]", "\n", "additional_edge_files", "=", "[", "]", "\n", "\n", "graphs", "=", "read_csv_graph_dgl", "(", "raw_dir", ",", "add_inverse_edge", "=", "add_inverse_edge", ",", "\n", "additional_node_files", "=", "additional_node_files", ",", "\n", "additional_edge_files", "=", "additional_edge_files", ")", "\n", "\n", "labels", "=", "pd", ".", "read_csv", "(", "osp", ".", "join", "(", "raw_dir", ",", "\"graph-label.csv.gz\"", ")", ",", "compression", "=", "\"gzip\"", ",", "header", "=", "None", ")", ".", "values", "\n", "\n", "has_nan", "=", "np", ".", "isnan", "(", "labels", ")", ".", "any", "(", ")", "\n", "\n", "if", "\"classification\"", "in", "self", ".", "task_type", ":", "\n", "            ", "if", "has_nan", ":", "\n", "                ", "labels", "=", "torch", ".", "from_numpy", "(", "labels", ")", "\n", "", "else", ":", "\n", "                ", "labels", "=", "torch", ".", "from_numpy", "(", "labels", ")", ".", "to", "(", "torch", ".", "long", ")", "\n", "", "", "else", ":", "\n", "            ", "labels", "=", "torch", ".", "from_numpy", "(", "labels", ")", "\n", "\n", "", "print", "(", "'Not Saving...'", ")", "\n", "# save_graphs(pre_processed_file_path, graphs, labels={'labels': labels})", "\n", "\n", "### load preprocessed files", "\n", "self", ".", "graphs", "=", "graphs", "\n", "self", ".", "labels", "=", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.data.PCBA.DownloadPCBA.get_idx_split": [[153, 165], ["os.join", "os.join", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join"], "methods", ["None"], ["", "def", "get_idx_split", "(", "self", ",", "split_type", "=", "None", ")", ":", "\n", "        ", "if", "split_type", "is", "None", ":", "\n", "            ", "split_type", "=", "'scaffold'", "\n", "\n", "", "path", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "\"split\"", ",", "split_type", ")", "\n", "\n", "train_idx", "=", "pd", ".", "read_csv", "(", "osp", ".", "join", "(", "path", ",", "\"train.csv.gz\"", ")", ",", "compression", "=", "\"gzip\"", ",", "header", "=", "None", ")", ".", "values", ".", "T", "[", "0", "]", "\n", "valid_idx", "=", "pd", ".", "read_csv", "(", "osp", ".", "join", "(", "path", ",", "\"valid.csv.gz\"", ")", ",", "compression", "=", "\"gzip\"", ",", "header", "=", "None", ")", ".", "values", ".", "T", "[", "0", "]", "\n", "test_idx", "=", "pd", ".", "read_csv", "(", "osp", ".", "join", "(", "path", ",", "\"test.csv.gz\"", ")", ",", "compression", "=", "\"gzip\"", ",", "header", "=", "None", ")", ".", "values", ".", "T", "[", "0", "]", "\n", "\n", "return", "{", "\"train\"", ":", "torch", ".", "tensor", "(", "train_idx", ",", "dtype", "=", "torch", ".", "long", ")", ",", "\"valid\"", ":", "torch", ".", "tensor", "(", "valid_idx", ",", "dtype", "=", "torch", ".", "long", ")", ",", "\n", "\"test\"", ":", "torch", ".", "tensor", "(", "test_idx", ",", "dtype", "=", "torch", ".", "long", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.data.PCBA.DownloadPCBA.__getitem__": [[166, 180], ["isinstance", "IndexError", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "idx.dim", "type", "idx.dim", "dgl.data.utils.Subset", "idx.cpu"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\"Get datapoint with index\"\"\"", "\n", "\n", "if", "isinstance", "(", "idx", ",", "int", ")", ":", "\n", "            ", "return", "self", ".", "graphs", "[", "idx", "]", ",", "self", ".", "labels", "[", "idx", "]", "\n", "", "elif", "torch", ".", "is_tensor", "(", "idx", ")", "and", "idx", ".", "dtype", "==", "torch", ".", "long", ":", "\n", "            ", "if", "idx", ".", "dim", "(", ")", "==", "0", ":", "\n", "                ", "return", "self", ".", "graphs", "[", "idx", "]", ",", "self", ".", "labels", "[", "idx", "]", "\n", "", "elif", "idx", ".", "dim", "(", ")", "==", "1", ":", "\n", "                ", "return", "Subset", "(", "self", ",", "idx", ".", "cpu", "(", ")", ")", "\n", "\n", "", "", "raise", "IndexError", "(", "\n", "'Only integers and long are valid '", "\n", "'indices (got {}).'", ".", "format", "(", "type", "(", "idx", ")", ".", "__name__", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.data.PCBA.DownloadPCBA.__len__": [[181, 189], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Length of the dataset\n        Returns\n        -------\n        int\n            Length of Dataset\n        \"\"\"", "\n", "return", "len", "(", "self", ".", "graphs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.data.PCBA.DownloadPCBA.__repr__": [[190, 192], ["len"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "# pragma: no cover", "\n", "        ", "return", "'{}({})'", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "len", "(", "self", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.data.PCBA.PCBADGL.__init__": [[195, 206], ["enumerate", "len", "g[].number_of_nodes", "PCBA.PCBADGL.graph_lists.append", "PCBA.PCBADGL.graph_labels.append"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data", ",", "split", ",", "norm", "=", "'none'", ",", "pos_enc_dim", "=", "0", ")", ":", "\n", "        ", "self", ".", "split", "=", "split", "\n", "self", ".", "data", "=", "[", "g", "for", "g", "in", "data", "[", "self", ".", "split", "]", "]", "\n", "self", ".", "graph_lists", "=", "[", "]", "\n", "self", ".", "graph_labels", "=", "[", "]", "\n", "for", "i", ",", "g", "in", "enumerate", "(", "self", ".", "data", ")", ":", "\n", "            ", "if", "g", "[", "0", "]", ".", "number_of_nodes", "(", ")", ">", "5", ":", "\n", "                ", "self", ".", "graph_lists", ".", "append", "(", "g", "[", "0", "]", ")", "\n", "self", ".", "graph_labels", ".", "append", "(", "g", "[", "1", "]", ")", "\n", "", "", "self", ".", "n_samples", "=", "len", "(", "self", ".", "graph_lists", ")", "\n", "del", "self", ".", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.data.PCBA.PCBADGL.get_eig": [[207, 213], ["print", "tqdm.tqdm.tqdm", "range", "PCBA.positional_encoding", "len"], "methods", ["home.repos.pwc.inspect_result.Saro00_DGN.data.molecules.positional_encoding"], ["", "def", "get_eig", "(", "self", ",", "norm", ")", ":", "\n", "\n", "        ", "print", "(", "'Computing Eigenvectors...'", ")", "\n", "with", "tqdm", "(", "range", "(", "len", "(", "self", ".", "graph_lists", ")", ")", ",", "unit", "=", "'Graph'", ")", "as", "t", ":", "\n", "            ", "for", "ii", "in", "t", ":", "\n", "                ", "self", ".", "graph_lists", "[", "ii", "]", "=", "positional_encoding", "(", "self", ".", "graph_lists", "[", "ii", "]", ",", "3", ",", "norm", "=", "norm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.data.PCBA.PCBADGL.__len__": [[214, 217], ["None"], "methods", ["None"], ["", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return the number of graphs in the dataset.\"\"\"", "\n", "return", "self", ".", "n_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.data.PCBA.PCBADGL.__getitem__": [[218, 232], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\"\n            Get the idx^th sample.\n            Parameters\n            ---------\n            idx : int\n                The sample index.\n            Returns\n            -------\n            (dgl.DGLGraph, int)\n                DGLGraph with node feature stored in `feat` field\n                And its label.\n        \"\"\"", "\n", "return", "self", ".", "graph_lists", "[", "idx", "]", ",", "self", ".", "graph_labels", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.data.PCBA.PCBADataset.__init__": [[235, 255], ["time.time", "PCBA.DownloadPCBA", "DownloadPCBA.get_idx_split", "PCBA.PCBADGL", "PCBA.PCBADGL", "PCBA.PCBADGL", "ogb.graphproppred.Evaluator", "print", "print", "print", "print", "len", "len", "len", "time.time"], "methods", ["home.repos.pwc.inspect_result.Saro00_DGN.data.PCBA.DownloadPCBA.get_idx_split"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "pos_enc_dim", "=", "0", ",", "norm", "=", "'none'", ",", "verbose", "=", "True", ")", ":", "\n", "        ", "start", "=", "time", ".", "time", "(", ")", "\n", "if", "verbose", ":", "\n", "            ", "print", "(", "\"[I] Loading dataset %s...\"", "%", "(", "name", ")", ")", "\n", "", "self", ".", "name", "=", "name", "\n", "self", ".", "norm", "=", "norm", "\n", "dataset", "=", "DownloadPCBA", "(", "name", "=", "'ogbg-molpcba'", ")", "\n", "split_idx", "=", "dataset", ".", "get_idx_split", "(", ")", "\n", "self", ".", "train", "=", "PCBADGL", "(", "dataset", ",", "split_idx", "[", "'train'", "]", ",", "norm", "=", "norm", ",", "pos_enc_dim", "=", "pos_enc_dim", ")", "\n", "self", ".", "val", "=", "PCBADGL", "(", "dataset", ",", "split_idx", "[", "'valid'", "]", ",", "norm", "=", "norm", ",", "pos_enc_dim", "=", "pos_enc_dim", ")", "\n", "self", ".", "test", "=", "PCBADGL", "(", "dataset", ",", "split_idx", "[", "'test'", "]", ",", "norm", "=", "norm", ",", "pos_enc_dim", "=", "pos_enc_dim", ")", "\n", "del", "dataset", "\n", "del", "split_idx", "\n", "\n", "self", ".", "evaluator", "=", "Evaluator", "(", "name", "=", "'ogbg-molpcba'", ")", "\n", "\n", "if", "verbose", ":", "\n", "            ", "print", "(", "'train, test, val sizes :'", ",", "len", "(", "self", ".", "train", ")", ",", "len", "(", "self", ".", "test", ")", ",", "len", "(", "self", ".", "val", ")", ")", "\n", "print", "(", "\"[I] Finished loading.\"", ")", "\n", "print", "(", "\"[I] Data load time: {:.4f}s\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.data.PCBA.PCBADataset.get_eig_train": [[256, 258], ["PCBA.PCBADataset.train.get_eig"], "methods", ["home.repos.pwc.inspect_result.Saro00_DGN.data.molecules.MoleculeDGL.get_eig"], ["", "", "def", "get_eig_train", "(", "self", ")", ":", "\n", "        ", "self", ".", "train", ".", "get_eig", "(", "norm", "=", "self", ".", "norm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.data.PCBA.PCBADataset.get_eig_val": [[259, 261], ["PCBA.PCBADataset.val.get_eig"], "methods", ["home.repos.pwc.inspect_result.Saro00_DGN.data.molecules.MoleculeDGL.get_eig"], ["", "def", "get_eig_val", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", ".", "get_eig", "(", "norm", "=", "self", ".", "norm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.data.PCBA.PCBADataset.get_eig_test": [[262, 264], ["PCBA.PCBADataset.test.get_eig"], "methods", ["home.repos.pwc.inspect_result.Saro00_DGN.data.molecules.MoleculeDGL.get_eig"], ["", "def", "get_eig_test", "(", "self", ")", ":", "\n", "        ", "self", ".", "test", ".", "get_eig", "(", "norm", "=", "self", ".", "norm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.data.PCBA.PCBADataset.collate": [[266, 279], ["map", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat().sqrt", "torch.cat().sqrt", "torch.cat().sqrt", "torch.cat().sqrt", "torch.cat().sqrt", "torch.cat().sqrt", "torch.cat().sqrt", "torch.cat().sqrt", "dgl.batch", "zip", "graphs[].number_of_nodes", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "graphs[].number_of_edges", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "label.unsqueeze", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "float", "len", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "float"], "methods", ["None"], ["", "def", "collate", "(", "self", ",", "samples", ")", ":", "\n", "# The input samples is a list of pairs (graph, label).", "\n", "        ", "graphs", ",", "labels", "=", "map", "(", "list", ",", "zip", "(", "*", "samples", ")", ")", "\n", "\n", "labels", "=", "torch", ".", "cat", "(", "[", "label", ".", "unsqueeze", "(", "0", ")", "for", "label", "in", "labels", "]", ")", "\n", "tab_sizes_n", "=", "[", "graphs", "[", "i", "]", ".", "number_of_nodes", "(", ")", "for", "i", "in", "range", "(", "len", "(", "graphs", ")", ")", "]", "\n", "tab_snorm_n", "=", "[", "torch", ".", "FloatTensor", "(", "size", ",", "1", ")", ".", "fill_", "(", "1.", "/", "float", "(", "size", ")", ")", "for", "size", "in", "tab_sizes_n", "]", "\n", "snorm_n", "=", "torch", ".", "cat", "(", "tab_snorm_n", ")", ".", "sqrt", "(", ")", "\n", "tab_sizes_e", "=", "[", "graphs", "[", "i", "]", ".", "number_of_edges", "(", ")", "for", "i", "in", "range", "(", "len", "(", "graphs", ")", ")", "]", "\n", "tab_snorm_e", "=", "[", "torch", ".", "FloatTensor", "(", "size", ",", "1", ")", ".", "fill_", "(", "1.", "/", "float", "(", "size", ")", ")", "for", "size", "in", "tab_sizes_e", "]", "\n", "snorm_e", "=", "torch", ".", "cat", "(", "tab_snorm_e", ")", ".", "sqrt", "(", ")", "\n", "batched_graph", "=", "dgl", ".", "batch", "(", "graphs", ")", "\n", "return", "batched_graph", ",", "labels", ",", "snorm_n", ",", "snorm_e", "", "", "", ""]], "home.repos.pwc.inspect_result.Saro00_DGN.data.PCBA.positional_encoding": [[23, 79], ["g.adjacency_matrix_scipy().astype", "list", "torch.zeros", "torch.zeros", "scipy.sparse.linalg.eigs", "torch.from_numpy().float", "torch.from_numpy().float", "scipy.sparse.diags", "networkx.connected_components", "list", "torch.from_numpy().float", "torch.from_numpy().float", "g.adjacency_matrix_scipy", "g.in_degrees().numpy", "scipy.sparse.diags", "g.to_networkx().to_undirected", "scipy.sparse.linalg.eigs", "scipy.linalg.eig", "torch.from_numpy", "torch.from_numpy", "scipy.sparse.eye", "scipy.sparse.eye", "scipy.sparse.diags", "len", "this_L.toarray", "len", "numpy.zeros", "numpy.concatenate", "numpy.concatenate", "torch.from_numpy", "torch.from_numpy", "EigVal.argsort", "numpy.real", "g.in_degrees", "g.number_of_nodes", "g.in_degrees().numpy", "g.number_of_nodes", "scipy.sparse.eye", "g.to_networkx", "numpy.ones", "float", "np.concatenate.argsort", "numpy.real", "g.in_degrees().numpy", "g.number_of_nodes", "len", "g.in_degrees", "len", "len", "g.in_degrees"], "function", ["None"], ["def", "positional_encoding", "(", "g", ",", "pos_enc_dim", ",", "norm", ")", ":", "\n", "    ", "\"\"\"\n        Graph positional encoding v/ Laplacian eigenvectors\n    \"\"\"", "\n", "\n", "# Laplacian", "\n", "A", "=", "g", ".", "adjacency_matrix_scipy", "(", "return_edge_ids", "=", "False", ")", ".", "astype", "(", "float", ")", "\n", "if", "norm", "==", "'none'", ":", "\n", "        ", "N", "=", "sp", ".", "diags", "(", "g", ".", "in_degrees", "(", ")", ".", "numpy", "(", ")", ",", "dtype", "=", "float", ")", "\n", "L", "=", "N", "*", "sp", ".", "eye", "(", "g", ".", "number_of_nodes", "(", ")", ")", "-", "A", "\n", "", "elif", "norm", "==", "'sym'", ":", "\n", "        ", "N", "=", "sp", ".", "diags", "(", "g", ".", "in_degrees", "(", ")", ".", "numpy", "(", ")", "**", "-", "0.5", ",", "dtype", "=", "float", ")", "\n", "L", "=", "sp", ".", "eye", "(", "g", ".", "number_of_nodes", "(", ")", ")", "-", "N", "*", "A", "*", "N", "\n", "", "elif", "norm", "==", "'walk'", ":", "\n", "        ", "N", "=", "sp", ".", "diags", "(", "g", ".", "in_degrees", "(", ")", ".", "numpy", "(", ")", "**", "-", "1.", ",", "dtype", "=", "float", ")", "\n", "L", "=", "sp", ".", "eye", "(", "g", ".", "number_of_nodes", "(", ")", ")", "-", "N", "*", "A", "\n", "\n", "# Loop all connected components to compute eigenvectors separately", "\n", "", "components", "=", "list", "(", "nx", ".", "connected_components", "(", "g", ".", "to_networkx", "(", ")", ".", "to_undirected", "(", ")", ")", ")", "\n", "EigVec", "=", "torch", ".", "zeros", "(", "(", "L", ".", "shape", "[", "0", "]", ",", "pos_enc_dim", ")", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "for", "component", "in", "components", ":", "\n", "        ", "comp", "=", "list", "(", "component", ")", "\n", "this_L", "=", "L", "[", "comp", "]", "[", ":", ",", "comp", "]", "\n", "if", "pos_enc_dim", "<", "len", "(", "comp", ")", "-", "1", ":", "# Compute the k-lowest eigenvectors", "\n", "            ", "this_EigVal", ",", "this_EigVec", "=", "sp", ".", "linalg", ".", "eigs", "(", "this_L", ",", "k", "=", "pos_enc_dim", ",", "which", "=", "'SR'", ",", "tol", "=", "1e-5", ")", "\n", "", "else", ":", "# Compute all eigenvectors", "\n", "            ", "this_EigVal", ",", "this_EigVec", "=", "scipy", ".", "linalg", ".", "eig", "(", "this_L", ".", "toarray", "(", ")", ")", "\n", "if", "pos_enc_dim", ">", "len", "(", "comp", ")", ":", "# Pad with non-sense eigenvectors", "\n", "                ", "temp_EigVal", "=", "np", ".", "ones", "(", "pos_enc_dim", "-", "len", "(", "comp", ")", ",", "dtype", "=", "np", ".", "float32", ")", "+", "float", "(", "'inf'", ")", "\n", "temp_EigVec", "=", "np", ".", "zeros", "(", "(", "len", "(", "comp", ")", ",", "pos_enc_dim", "-", "len", "(", "comp", ")", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "this_EigVal", "=", "np", ".", "concatenate", "(", "[", "this_EigVal", ",", "temp_EigVal", "]", ",", "axis", "=", "0", ")", "\n", "this_EigVec", "=", "np", ".", "concatenate", "(", "[", "this_EigVec", ",", "temp_EigVec", "]", ",", "axis", "=", "1", ")", "\n", "\n", "# Sort and convert to torch", "\n", "", "", "this_EigVec", "=", "this_EigVec", "[", ":", ",", "this_EigVal", ".", "argsort", "(", ")", "]", "\n", "this_Eigvec", "=", "torch", ".", "from_numpy", "(", "np", ".", "real", "(", "this_EigVec", "[", ":", ",", ":", "pos_enc_dim", "]", ")", ")", ".", "float", "(", ")", "\n", "EigVec", "[", "comp", ",", ":", "]", "=", "this_Eigvec", "\n", "\n", "# # Eigenvectors with numpy", "\n", "# EigVal, EigVec = np.linalg.eig(L.toarray())", "\n", "# idx = EigVal.argsort() # increasing order", "\n", "# EigVal, EigVec = EigVal[idx], np.real(EigVec[:,idx])", "\n", "# g.ndata['pos_enc'] = torch.from_numpy(np.abs(EigVec[:,1:pos_enc_dim+1])).float()", "\n", "\n", "# Eigenvectors with scipy", "\n", "# EigVal, EigVec = sp.linalg.eigs(L, k=pos_enc_dim+1, which='SR')", "\n", "", "EigVal", ",", "EigVec", "=", "sp", ".", "linalg", ".", "eigs", "(", "L", ",", "k", "=", "pos_enc_dim", ",", "which", "=", "'SR'", ",", "tol", "=", "1e-5", ")", "\n", "EigVec", "=", "EigVec", "[", ":", ",", "EigVal", ".", "argsort", "(", ")", "]", "# increasing order", "\n", "g", ".", "ndata", "[", "'eig'", "]", "=", "torch", ".", "from_numpy", "(", "np", ".", "real", "(", "EigVec", "[", ":", ",", ":", "pos_enc_dim", "]", ")", ")", ".", "float", "(", ")", "\n", "# g.ndata['eig'] = torch.from_numpy(np.random.rand(g.number_of_nodes(), pos_enc_dim)).float()", "\n", "del", "A", "\n", "del", "N", "\n", "del", "L", "\n", "del", "EigVec", "\n", "del", "EigVal", "\n", "return", "g", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.data.SBMs.load_SBMsDataSetDGL.__init__": [[12, 25], ["len", "SBMs.load_SBMsDataSetDGL._prepare", "split.lower", "open", "pickle.load", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.Saro00_DGN.data.molecules.MoleculeDGL._prepare"], ["    ", "def", "__init__", "(", "self", ",", "\n", "data_dir", ",", "\n", "name", ",", "\n", "split", ")", ":", "\n", "\n", "        ", "self", ".", "split", "=", "split", "\n", "self", ".", "is_test", "=", "split", ".", "lower", "(", ")", "in", "[", "'test'", ",", "'val'", "]", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "name", "+", "'_%s.pkl'", "%", "self", ".", "split", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "self", ".", "dataset", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "self", ".", "node_labels", "=", "[", "]", "\n", "self", ".", "graph_lists", "=", "[", "]", "\n", "self", ".", "n_samples", "=", "len", "(", "self", ".", "dataset", ")", "\n", "self", ".", "_prepare", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.data.SBMs.load_SBMsDataSetDGL._prepare": [[26, 49], ["print", "dgl.DGLGraph", "dgl.DGLGraph.add_nodes", "node_features.long", "torch.ones", "SBMs.load_SBMsDataSetDGL.graph_lists.append", "SBMs.load_SBMsDataSetDGL.node_labels.append", "node_features.size", "dgl.DGLGraph.add_edges", "dgl.DGLGraph.number_of_edges", "SBMs.load_SBMsDataSetDGL.split.upper", "src.item", "dst.item"], "methods", ["None"], ["", "def", "_prepare", "(", "self", ")", ":", "\n", "\n", "        ", "print", "(", "\"preparing %d graphs for the %s set...\"", "%", "(", "self", ".", "n_samples", ",", "self", ".", "split", ".", "upper", "(", ")", ")", ")", "\n", "\n", "for", "data", "in", "self", ".", "dataset", ":", "\n", "\n", "            ", "node_features", "=", "data", ".", "node_feat", "\n", "edge_list", "=", "(", "data", ".", "W", "!=", "0", ")", ".", "nonzero", "(", ")", "# converting adj matrix to edge_list", "\n", "\n", "# Create the DGL Graph", "\n", "g", "=", "dgl", ".", "DGLGraph", "(", ")", "\n", "g", ".", "add_nodes", "(", "node_features", ".", "size", "(", "0", ")", ")", "\n", "g", ".", "ndata", "[", "'feat'", "]", "=", "node_features", ".", "long", "(", ")", "\n", "for", "src", ",", "dst", "in", "edge_list", ":", "\n", "                ", "g", ".", "add_edges", "(", "src", ".", "item", "(", ")", ",", "dst", ".", "item", "(", ")", ")", "\n", "\n", "# adding edge features for Residual Gated ConvNet", "\n", "# edge_feat_dim = g.ndata['feat'].size(1) # dim same as node feature dim", "\n", "", "edge_feat_dim", "=", "1", "# dim same as node feature dim", "\n", "g", ".", "edata", "[", "'feat'", "]", "=", "torch", ".", "ones", "(", "g", ".", "number_of_edges", "(", ")", ",", "edge_feat_dim", ")", "\n", "\n", "self", ".", "graph_lists", ".", "append", "(", "g", ")", "\n", "self", ".", "node_labels", ".", "append", "(", "data", ".", "node_label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.data.SBMs.load_SBMsDataSetDGL.__len__": [[50, 53], ["None"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return the number of graphs in the dataset.\"\"\"", "\n", "return", "self", ".", "n_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.data.SBMs.load_SBMsDataSetDGL.__getitem__": [[54, 68], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\"\n            Get the idx^th sample.\n            Parameters\n            ---------\n            idx : int\n                The sample index.\n            Returns\n            -------\n            (dgl.DGLGraph, int)\n                DGLGraph with node feature stored in `feat` field\n                And its label.\n        \"\"\"", "\n", "return", "self", ".", "graph_lists", "[", "idx", "]", ",", "self", ".", "node_labels", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.data.SBMs.SBMsDatasetDGL.__init__": [[72, 82], ["time.time", "print", "SBMs.load_SBMsDataSetDGL", "SBMs.load_SBMsDataSetDGL", "SBMs.load_SBMsDataSetDGL", "print", "print", "time.time"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "name", ")", ":", "\n", "        ", "start", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\"[I] Loading data ...\"", ")", "\n", "self", ".", "name", "=", "name", "\n", "data_dir", "=", "'data/SBMs'", "\n", "self", ".", "train", "=", "load_SBMsDataSetDGL", "(", "data_dir", ",", "name", ",", "split", "=", "'train'", ")", "\n", "self", ".", "test", "=", "load_SBMsDataSetDGL", "(", "data_dir", ",", "name", ",", "split", "=", "'test'", ")", "\n", "self", ".", "val", "=", "load_SBMsDataSetDGL", "(", "data_dir", ",", "name", ",", "split", "=", "'val'", ")", "\n", "print", "(", "\"[I] Finished loading.\"", ")", "\n", "print", "(", "\"[I] Data load time: {:.4f}s\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.data.SBMs.SBMsDataset.__init__": [[144, 165], ["time.time", "SBMs.SBMsDataset._add_eig", "print", "open", "pickle.load", "SBMs.SBMsDataset._add_pos_enc", "print", "print", "print", "len", "len", "len", "time.time"], "methods", ["home.repos.pwc.inspect_result.Saro00_DGN.data.SBMs.SBMsDataset._add_eig", "home.repos.pwc.inspect_result.Saro00_DGN.data.SBMs.SBMsDataset._add_pos_enc"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "pos_enc_dim", "=", "0", ",", "norm", "=", "'none'", ",", "verbose", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n            Loading SBM datasets\n        \"\"\"", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "if", "verbose", ":", "\n", "            ", "print", "(", "\"[I] Loading dataset %s...\"", "%", "(", "name", ")", ")", "\n", "", "self", ".", "name", "=", "name", "\n", "data_dir", "=", "'data/'", "\n", "with", "open", "(", "data_dir", "+", "name", "+", "'.pkl'", ",", "\"rb\"", ")", "as", "f", ":", "\n", "            ", "f", "=", "pickle", ".", "load", "(", "f", ")", "\n", "self", ".", "train", "=", "f", "[", "0", "]", "\n", "self", ".", "val", "=", "f", "[", "1", "]", "\n", "self", ".", "test", "=", "f", "[", "2", "]", "\n", "", "self", ".", "_add_eig", "(", "5", ",", "norm", "=", "norm", ")", "\n", "if", "pos_enc_dim", ">", "0", ":", "\n", "            ", "self", ".", "_add_pos_enc", "(", "pos_enc_dim", ")", "\n", "", "if", "verbose", ":", "\n", "            ", "print", "(", "'train, test, val sizes :'", ",", "len", "(", "self", ".", "train", ")", ",", "len", "(", "self", ".", "test", ")", ",", "len", "(", "self", ".", "val", ")", ")", "\n", "print", "(", "\"[I] Finished loading.\"", ")", "\n", "print", "(", "\"[I] Data load time: {:.4f}s\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.data.SBMs.SBMsDataset.collate": [[167, 180], ["map", "torch.cat().long", "torch.cat().sqrt", "torch.cat().sqrt", "dgl.batch", "zip", "graphs[].number_of_nodes", "torch.FloatTensor().fill_", "graphs[].number_of_edges", "torch.FloatTensor().fill_", "torch.cat", "range", "torch.cat", "range", "torch.cat", "len", "torch.FloatTensor", "float", "len", "torch.FloatTensor", "float"], "methods", ["None"], ["", "", "def", "collate", "(", "self", ",", "samples", ")", ":", "\n", "# The input samples is a list of pairs (graph, label).", "\n", "        ", "graphs", ",", "labels", "=", "map", "(", "list", ",", "zip", "(", "*", "samples", ")", ")", "\n", "labels", "=", "torch", ".", "cat", "(", "labels", ")", ".", "long", "(", ")", "\n", "tab_sizes_n", "=", "[", "graphs", "[", "i", "]", ".", "number_of_nodes", "(", ")", "for", "i", "in", "range", "(", "len", "(", "graphs", ")", ")", "]", "\n", "tab_snorm_n", "=", "[", "torch", ".", "FloatTensor", "(", "size", ",", "1", ")", ".", "fill_", "(", "1.", "/", "float", "(", "size", ")", ")", "for", "size", "in", "tab_sizes_n", "]", "\n", "snorm_n", "=", "torch", ".", "cat", "(", "tab_snorm_n", ")", ".", "sqrt", "(", ")", "\n", "tab_sizes_e", "=", "[", "graphs", "[", "i", "]", ".", "number_of_edges", "(", ")", "for", "i", "in", "range", "(", "len", "(", "graphs", ")", ")", "]", "\n", "tab_snorm_e", "=", "[", "torch", ".", "FloatTensor", "(", "size", ",", "1", ")", ".", "fill_", "(", "1.", "/", "float", "(", "size", ")", ")", "for", "size", "in", "tab_sizes_e", "]", "\n", "snorm_e", "=", "torch", ".", "cat", "(", "tab_snorm_e", ")", ".", "sqrt", "(", ")", "\n", "batched_graph", "=", "dgl", ".", "batch", "(", "graphs", ")", "\n", "\n", "return", "batched_graph", ",", "labels", ",", "snorm_n", ",", "snorm_e", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.data.SBMs.SBMsDataset.collate_dense_gnn": [[182, 220], ["map", "torch.cat().long", "SBMs.SBMsDataset._sym_normalize_adj", "torch.zeros_like", "torch.stack", "torch.cat", "enumerate", "torch.cat.unsqueeze", "zip", "g.adjacency_matrix().to_dense", "torch.cat", "SBMs.SBMsDataset.unsqueeze", "g.adjacency_matrix", "range", "node_label.item"], "methods", ["home.repos.pwc.inspect_result.Saro00_DGN.data.SBMs.SBMsDataset._sym_normalize_adj"], ["", "def", "collate_dense_gnn", "(", "self", ",", "samples", ")", ":", "\n", "# The input samples is a list of pairs (graph, label).", "\n", "        ", "graphs", ",", "labels", "=", "map", "(", "list", ",", "zip", "(", "*", "samples", ")", ")", "\n", "labels", "=", "torch", ".", "cat", "(", "labels", ")", ".", "long", "(", ")", "\n", "# tab_sizes_n = [ graphs[i].number_of_nodes() for i in range(len(graphs))]", "\n", "# tab_snorm_n = [ torch.FloatTensor(size,1).fill_(1./float(size)) for size in tab_sizes_n ]", "\n", "# snorm_n = tab_snorm_n[0][0].sqrt()", "\n", "\n", "# batched_graph = dgl.batch(graphs)", "\n", "\n", "g", "=", "graphs", "[", "0", "]", "\n", "adj", "=", "self", ".", "_sym_normalize_adj", "(", "g", ".", "adjacency_matrix", "(", ")", ".", "to_dense", "(", ")", ")", "\n", "\"\"\"\n            Adapted from https://github.com/leichen2018/Ring-GNN/\n            Assigning node and edge feats::\n            we have the adjacency matrix in R^{n x n}, the node features in R^{d_n} and edge features R^{d_e}.\n            Then we build a zero-initialized tensor, say T, in R^{(1 + d_n + d_e) x n x n}. T[0, :, :] is the adjacency matrix.\n            The diagonal T[1:1+d_n, i, i], i = 0 to n-1, store the node feature of node i. \n            The off diagonal T[1+d_n:, i, j] store edge features of edge(i, j).\n        \"\"\"", "\n", "\n", "zero_adj", "=", "torch", ".", "zeros_like", "(", "adj", ")", "\n", "\n", "if", "self", ".", "name", "==", "'SBM_CLUSTER'", ":", "\n", "            ", "self", ".", "num_node_type", "=", "7", "\n", "", "elif", "self", ".", "name", "==", "'SBM_PATTERN'", ":", "\n", "            ", "self", ".", "num_node_type", "=", "3", "\n", "\n", "# use node feats to prepare adj", "\n", "", "adj_node_feat", "=", "torch", ".", "stack", "(", "[", "zero_adj", "for", "j", "in", "range", "(", "self", ".", "num_node_type", ")", "]", ")", "\n", "adj_node_feat", "=", "torch", ".", "cat", "(", "[", "adj", ".", "unsqueeze", "(", "0", ")", ",", "adj_node_feat", "]", ",", "dim", "=", "0", ")", "\n", "\n", "for", "node", ",", "node_label", "in", "enumerate", "(", "g", ".", "ndata", "[", "'feat'", "]", ")", ":", "\n", "            ", "adj_node_feat", "[", "node_label", ".", "item", "(", ")", "+", "1", "]", "[", "node", "]", "[", "node", "]", "=", "1", "\n", "\n", "", "x_node_feat", "=", "adj_node_feat", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "return", "x_node_feat", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.data.SBMs.SBMsDataset._sym_normalize_adj": [[221, 226], ["torch.sum", "torch.where", "torch.diag", "torch.mm", "torch.zeros", "torch.mm", "torch.sqrt", "torch.sum.size"], "methods", ["None"], ["", "def", "_sym_normalize_adj", "(", "self", ",", "adj", ")", ":", "\n", "        ", "deg", "=", "torch", ".", "sum", "(", "adj", ",", "dim", "=", "0", ")", "# .squeeze()", "\n", "deg_inv", "=", "torch", ".", "where", "(", "deg", ">", "0", ",", "1.", "/", "torch", ".", "sqrt", "(", "deg", ")", ",", "torch", ".", "zeros", "(", "deg", ".", "size", "(", ")", ")", ")", "\n", "deg_inv", "=", "torch", ".", "diag", "(", "deg_inv", ")", "\n", "return", "torch", ".", "mm", "(", "deg_inv", ",", "torch", ".", "mm", "(", "adj", ",", "deg_inv", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.data.SBMs.SBMsDataset._add_self_loops": [[227, 235], ["SBMs.SBMsDataset.", "SBMs.SBMsDataset.", "SBMs.SBMsDataset."], "methods", ["None"], ["", "def", "_add_self_loops", "(", "self", ")", ":", "\n", "\n", "# function for adding self loops", "\n", "# this function will be called only if self_loop flag is True", "\n", "\n", "        ", "self", ".", "train", ".", "graph_lists", "=", "[", "self_loop", "(", "g", ")", "for", "g", "in", "self", ".", "train", ".", "graph_lists", "]", "\n", "self", ".", "val", ".", "graph_lists", "=", "[", "self_loop", "(", "g", ")", "for", "g", "in", "self", ".", "val", ".", "graph_lists", "]", "\n", "self", ".", "test", ".", "graph_lists", "=", "[", "self_loop", "(", "g", ")", "for", "g", "in", "self", ".", "test", ".", "graph_lists", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.data.SBMs.SBMsDataset._add_eig": [[236, 242], ["SBMs.positional_encoding", "SBMs.positional_encoding", "SBMs.positional_encoding"], "methods", ["home.repos.pwc.inspect_result.Saro00_DGN.data.molecules.positional_encoding", "home.repos.pwc.inspect_result.Saro00_DGN.data.molecules.positional_encoding", "home.repos.pwc.inspect_result.Saro00_DGN.data.molecules.positional_encoding"], ["", "def", "_add_eig", "(", "self", ",", "pos_enc_dim", ",", "norm", ")", ":", "\n", "\n", "# Graph positional encoding v/ Laplacian eigenvectors", "\n", "        ", "self", ".", "train", ".", "graph_lists", "=", "[", "positional_encoding", "(", "g", ",", "pos_enc_dim", ",", "norm", ")", "for", "g", "in", "self", ".", "train", ".", "graph_lists", "]", "\n", "self", ".", "val", ".", "graph_lists", "=", "[", "positional_encoding", "(", "g", ",", "pos_enc_dim", ",", "norm", ")", "for", "g", "in", "self", ".", "val", ".", "graph_lists", "]", "\n", "self", ".", "test", ".", "graph_lists", "=", "[", "positional_encoding", "(", "g", ",", "pos_enc_dim", ",", "norm", ")", "for", "g", "in", "self", ".", "test", ".", "graph_lists", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.data.SBMs.SBMsDataset._add_pos_enc": [[243, 250], ["None"], "methods", ["None"], ["", "def", "_add_pos_enc", "(", "self", ",", "pos_enc_dim", ")", ":", "\n", "        ", "for", "g", "in", "self", ".", "train", ".", "graph_lists", ":", "\n", "            ", "g", ".", "ndata", "[", "'pos_enc'", "]", "=", "g", ".", "ndata", "[", "'eig'", "]", "[", ":", ",", "1", ":", "pos_enc_dim", "+", "1", "]", "\n", "", "for", "g", "in", "self", ".", "val", ".", "graph_lists", ":", "\n", "            ", "g", ".", "ndata", "[", "'pos_enc'", "]", "=", "g", ".", "ndata", "[", "'eig'", "]", "[", ":", ",", "1", ":", "pos_enc_dim", "+", "1", "]", "\n", "", "for", "g", "in", "self", ".", "test", ".", "graph_lists", ":", "\n", "            ", "g", ".", "ndata", "[", "'pos_enc'", "]", "=", "g", ".", "ndata", "[", "'eig'", "]", "[", ":", ",", "1", ":", "pos_enc_dim", "+", "1", "]", "", "", "", "", ""]], "home.repos.pwc.inspect_result.Saro00_DGN.data.SBMs.self_loop": [[84, 108], ["dgl.DGLGraph", "dgl.DGLGraph.add_nodes", "g.all_edges", "dgl.backend.zerocopy_to_numpy", "dgl.backend.zerocopy_to_numpy", "numpy.arange", "dgl.DGLGraph.add_edges", "dgl.DGLGraph.add_edges", "torch.zeros", "g.number_of_nodes", "g.number_of_nodes", "dgl.DGLGraph.number_of_edges"], "function", ["None"], ["", "", "def", "self_loop", "(", "g", ")", ":", "\n", "    ", "\"\"\"\n        Utility function only, to be used only when necessary as per user self_loop flag\n        : Overwriting the function dgl.transform.add_self_loop() to not miss ndata['feat'] and edata['feat']\n        \n        \n        This function is called inside a function in SBMsDataset class.\n    \"\"\"", "\n", "new_g", "=", "dgl", ".", "DGLGraph", "(", ")", "\n", "new_g", ".", "add_nodes", "(", "g", ".", "number_of_nodes", "(", ")", ")", "\n", "new_g", ".", "ndata", "[", "'feat'", "]", "=", "g", ".", "ndata", "[", "'feat'", "]", "\n", "\n", "src", ",", "dst", "=", "g", ".", "all_edges", "(", "order", "=", "\"eid\"", ")", "\n", "src", "=", "dgl", ".", "backend", ".", "zerocopy_to_numpy", "(", "src", ")", "\n", "dst", "=", "dgl", ".", "backend", ".", "zerocopy_to_numpy", "(", "dst", ")", "\n", "non_self_edges_idx", "=", "src", "!=", "dst", "\n", "nodes", "=", "np", ".", "arange", "(", "g", ".", "number_of_nodes", "(", ")", ")", "\n", "new_g", ".", "add_edges", "(", "src", "[", "non_self_edges_idx", "]", ",", "dst", "[", "non_self_edges_idx", "]", ")", "\n", "new_g", ".", "add_edges", "(", "nodes", ",", "nodes", ")", "\n", "\n", "# This new edata is not used since this function gets called only for GCN, GAT", "\n", "# However, we need this for the generic requirement of ndata and edata", "\n", "new_g", ".", "edata", "[", "'feat'", "]", "=", "torch", ".", "zeros", "(", "new_g", ".", "number_of_edges", "(", ")", ")", "\n", "return", "new_g", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.data.SBMs.positional_encoding": [[110, 140], ["g.adjacency_matrix_scipy().astype", "scipy.sparse.linalg.eigs", "torch.from_numpy().float", "scipy.sparse.diags", "g.adjacency_matrix_scipy", "dgl.backend.asnumpy().clip", "scipy.sparse.diags", "torch.from_numpy", "scipy.sparse.eye", "scipy.sparse.eye", "scipy.sparse.diags", "EigVal.argsort", "numpy.real", "dgl.backend.asnumpy", "g.number_of_nodes", "dgl.backend.asnumpy().clip", "g.number_of_nodes", "scipy.sparse.eye", "g.in_degrees", "dgl.backend.asnumpy().clip", "g.number_of_nodes", "dgl.backend.asnumpy", "g.in_degrees", "dgl.backend.asnumpy", "g.in_degrees"], "function", ["None"], ["", "def", "positional_encoding", "(", "g", ",", "pos_enc_dim", ",", "norm", ")", ":", "\n", "    ", "\"\"\"\n        Graph positional encoding v/ Laplacian eigenvectors\n    \"\"\"", "\n", "\n", "# Laplacian", "\n", "A", "=", "g", ".", "adjacency_matrix_scipy", "(", "return_edge_ids", "=", "False", ")", ".", "astype", "(", "float", ")", "\n", "if", "norm", "==", "'none'", ":", "\n", "        ", "N", "=", "sp", ".", "diags", "(", "dgl", ".", "backend", ".", "asnumpy", "(", "g", ".", "in_degrees", "(", ")", ")", ".", "clip", "(", "1", ")", ",", "dtype", "=", "float", ")", "\n", "L", "=", "N", "*", "sp", ".", "eye", "(", "g", ".", "number_of_nodes", "(", ")", ")", "-", "A", "\n", "", "elif", "norm", "==", "'sym'", ":", "\n", "        ", "N", "=", "sp", ".", "diags", "(", "dgl", ".", "backend", ".", "asnumpy", "(", "g", ".", "in_degrees", "(", ")", ")", ".", "clip", "(", "1", ")", "**", "-", "0.5", ",", "dtype", "=", "float", ")", "\n", "L", "=", "sp", ".", "eye", "(", "g", ".", "number_of_nodes", "(", ")", ")", "-", "N", "*", "A", "*", "N", "\n", "", "elif", "norm", "==", "'walk'", ":", "\n", "        ", "N", "=", "sp", ".", "diags", "(", "dgl", ".", "backend", ".", "asnumpy", "(", "g", ".", "in_degrees", "(", ")", ")", ".", "clip", "(", "1", ")", "**", "-", "1.", ",", "dtype", "=", "float", ")", "\n", "L", "=", "sp", ".", "eye", "(", "g", ".", "number_of_nodes", "(", ")", ")", "-", "N", "*", "A", "\n", "\n", "# # Eigenvectors with numpy", "\n", "# EigVal, EigVec = np.linalg.eig(L.toarray())", "\n", "# idx = EigVal.argsort() # increasing order", "\n", "# EigVal, EigVec = EigVal[idx], np.real(EigVec[:,idx])", "\n", "# g.ndata['pos_enc'] = torch.from_numpy(np.abs(EigVec[:,1:pos_enc_dim+1])).float() ", "\n", "\n", "# Eigenvectors with scipy", "\n", "# EigVal, EigVec = sp.linalg.eigs(L, k=pos_enc_dim+1, which='SR')", "\n", "", "EigVal", ",", "EigVec", "=", "sp", ".", "linalg", ".", "eigs", "(", "L", ",", "k", "=", "pos_enc_dim", "+", "1", ",", "which", "=", "'SR'", ",", "tol", "=", "1e-2", ")", "# for 40 PEs", "\n", "EigVec", "=", "EigVec", "[", ":", ",", "EigVal", ".", "argsort", "(", ")", "]", "# increasing order", "\n", "g", ".", "ndata", "[", "'eig'", "]", "=", "torch", ".", "from_numpy", "(", "np", ".", "real", "(", "EigVec", "[", ":", ",", ":", "pos_enc_dim", "]", ")", ")", ".", "float", "(", ")", "\n", "\n", "return", "g", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.data.molecules.MoleculeDGL.__init__": [[43, 74], ["len", "molecules.MoleculeDGL._prepare", "open", "pickle.load", "open", "len", "list", "map", "csv.reader"], "methods", ["home.repos.pwc.inspect_result.Saro00_DGN.data.molecules.MoleculeDGL._prepare"], ["    ", "def", "__init__", "(", "self", ",", "data_dir", ",", "split", ",", "num_graphs", ")", ":", "\n", "        ", "self", ".", "data_dir", "=", "data_dir", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "num_graphs", "=", "num_graphs", "\n", "\n", "with", "open", "(", "data_dir", "+", "\"/%s.pickle\"", "%", "self", ".", "split", ",", "\"rb\"", ")", "as", "f", ":", "\n", "#with open('data/ZINC.pkl', \"rb\") as f:", "\n", "\n", "            ", "self", ".", "data", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "# loading the sampled indices from file ./zinc_molecules/<split>.index", "\n", "", "with", "open", "(", "data_dir", "+", "\"/%s.index\"", "%", "self", ".", "split", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "data_idx", "=", "[", "list", "(", "map", "(", "int", ",", "idx", ")", ")", "for", "idx", "in", "csv", ".", "reader", "(", "f", ")", "]", "\n", "self", ".", "data", "=", "[", "self", ".", "data", "[", "i", "]", "for", "i", "in", "data_idx", "[", "0", "]", "]", "\n", "\n", "", "assert", "len", "(", "self", ".", "data", ")", "==", "num_graphs", ",", "\"Sample num_graphs again; available idx: train/val/test => 10k/1k/1k\"", "\n", "\n", "\"\"\"\n        data is a list of Molecule dict objects with following attributes\n        \n          molecule = data[idx]\n        ; molecule['num_atom'] : nb of atoms, an integer (N)\n        ; molecule['atom_type'] : tensor of size N, each element is an atom type, an integer between 0 and num_atom_type\n        ; molecule['bond_type'] : tensor of size N x N, each element is a bond type, an integer between 0 and num_bond_type\n        ; molecule['logP_SA_cycle_normalized'] : the chemical property to regress, a float variable\n        \"\"\"", "\n", "\n", "self", ".", "graph_lists", "=", "[", "]", "\n", "self", ".", "graph_labels", "=", "[", "]", "\n", "self", ".", "n_samples", "=", "len", "(", "self", ".", "data", ")", "\n", "self", ".", "_prepare", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.data.molecules.MoleculeDGL._prepare": [[75, 99], ["print", "molecule[].long", "edge_list.split", "adj[].reshape().long", "dgl.DGLGraph", "dgl.DGLGraph.add_nodes", "molecules.MoleculeDGL.graph_lists.append", "molecules.MoleculeDGL.graph_labels.append", "dgl.DGLGraph.add_edges", "molecules.MoleculeDGL.split.upper", "adj[].reshape", "src.item", "dst.item"], "methods", ["None"], ["", "def", "_prepare", "(", "self", ")", ":", "\n", "        ", "print", "(", "\"preparing %d graphs for the %s set...\"", "%", "(", "self", ".", "num_graphs", ",", "self", ".", "split", ".", "upper", "(", ")", ")", ")", "\n", "\n", "for", "molecule", "in", "self", ".", "data", ":", "\n", "            ", "node_features", "=", "molecule", "[", "'atom_type'", "]", ".", "long", "(", ")", "\n", "\n", "adj", "=", "molecule", "[", "'bond_type'", "]", "\n", "edge_list", "=", "(", "adj", "!=", "0", ")", ".", "nonzero", "(", ")", "# converting adj matrix to edge_list", "\n", "\n", "edge_idxs_in_adj", "=", "edge_list", ".", "split", "(", "1", ",", "dim", "=", "1", ")", "\n", "edge_features", "=", "adj", "[", "edge_idxs_in_adj", "]", ".", "reshape", "(", "-", "1", ")", ".", "long", "(", ")", "\n", "\n", "# Create the DGL Graph", "\n", "g", "=", "dgl", ".", "DGLGraph", "(", ")", "\n", "g", ".", "add_nodes", "(", "molecule", "[", "'num_atom'", "]", ")", "\n", "g", ".", "ndata", "[", "'feat'", "]", "=", "node_features", "\n", "\n", "\n", "for", "src", ",", "dst", "in", "edge_list", ":", "\n", "                ", "g", ".", "add_edges", "(", "src", ".", "item", "(", ")", ",", "dst", ".", "item", "(", ")", ")", "\n", "", "g", ".", "edata", "[", "'feat'", "]", "=", "edge_features", "\n", "\n", "self", ".", "graph_lists", ".", "append", "(", "g", ")", "\n", "self", ".", "graph_labels", ".", "append", "(", "molecule", "[", "'logP_SA_cycle_normalized'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.data.molecules.MoleculeDGL.get_eig": [[100, 117], ["g.adjacency_matrix_scipy().astype", "scipy.sparse.linalg.eigs", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "scipy.sparse.diags", "g.adjacency_matrix_scipy", "dgl.backend.asnumpy().clip", "scipy.sparse.diags", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "scipy.sparse.eye", "scipy.sparse.eye", "scipy.sparse.diags", "EigVal.argsort", "numpy.real", "numpy.real", "dgl.backend.asnumpy", "g.number_of_nodes", "dgl.backend.asnumpy().clip", "g.number_of_nodes", "scipy.sparse.eye", "g.in_degrees", "dgl.backend.asnumpy().clip", "g.number_of_nodes", "dgl.backend.asnumpy", "g.in_degrees", "dgl.backend.asnumpy", "g.in_degrees"], "methods", ["None"], ["", "", "def", "get_eig", "(", "self", ",", "pos_enc_dim", "=", "7", ",", "norm", "=", "'none'", ")", ":", "\n", "\n", "        ", "for", "g", "in", "self", ".", "graph_lists", ":", "\n", "# Laplacian", "\n", "            ", "A", "=", "g", ".", "adjacency_matrix_scipy", "(", "return_edge_ids", "=", "False", ")", ".", "astype", "(", "float", ")", "\n", "if", "norm", "==", "'none'", ":", "\n", "                ", "N", "=", "sp", ".", "diags", "(", "dgl", ".", "backend", ".", "asnumpy", "(", "g", ".", "in_degrees", "(", ")", ")", ".", "clip", "(", "1", ")", ",", "dtype", "=", "float", ")", "\n", "L", "=", "N", "*", "sp", ".", "eye", "(", "g", ".", "number_of_nodes", "(", ")", ")", "-", "A", "\n", "", "elif", "norm", "==", "'sym'", ":", "\n", "                ", "N", "=", "sp", ".", "diags", "(", "dgl", ".", "backend", ".", "asnumpy", "(", "g", ".", "in_degrees", "(", ")", ")", ".", "clip", "(", "1", ")", "**", "-", "0.5", ",", "dtype", "=", "float", ")", "\n", "L", "=", "sp", ".", "eye", "(", "g", ".", "number_of_nodes", "(", ")", ")", "-", "N", "*", "A", "*", "N", "\n", "", "elif", "norm", "==", "'walk'", ":", "\n", "                ", "N", "=", "sp", ".", "diags", "(", "dgl", ".", "backend", ".", "asnumpy", "(", "g", ".", "in_degrees", "(", ")", ")", ".", "clip", "(", "1", ")", "**", "-", "1.", ",", "dtype", "=", "float", ")", "\n", "L", "=", "sp", ".", "eye", "(", "g", ".", "number_of_nodes", "(", ")", ")", "-", "N", "*", "A", "\n", "", "EigVal", ",", "EigVec", "=", "sp", ".", "linalg", ".", "eigs", "(", "L", ",", "k", "=", "pos_enc_dim", "+", "1", ",", "which", "=", "'SR'", ",", "tol", "=", "5e-1", ")", "\n", "EigVec", "=", "EigVec", "[", ":", ",", "EigVal", ".", "argsort", "(", ")", "]", "# increasing order", "\n", "g", ".", "ndata", "[", "'eig'", "]", "=", "torch", ".", "from_numpy", "(", "np", ".", "real", "(", "EigVec", "[", ":", ",", ":", "pos_enc_dim", "]", ")", ")", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.data.molecules.MoleculeDGL._add_positional_encodings": [[118, 122], ["None"], "methods", ["None"], ["", "", "def", "_add_positional_encodings", "(", "self", ",", "pos_enc_dim", ")", ":", "\n", "\n", "        ", "for", "g", "in", "self", ".", "graph_lists", ":", "\n", "            ", "g", ".", "ndata", "[", "'pos_enc'", "]", "=", "g", ".", "ndata", "[", "'eig'", "]", "[", ":", ",", "1", ":", "pos_enc_dim", "+", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.data.molecules.MoleculeDGL.__len__": [[124, 127], ["None"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return the number of graphs in the dataset.\"\"\"", "\n", "return", "self", ".", "n_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.data.molecules.MoleculeDGL.__getitem__": [[128, 142], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\"\n            Get the idx^th sample.\n            Parameters\n            ---------\n            idx : int\n                The sample index.\n            Returns\n            -------\n            (dgl.DGLGraph, int)\n                DGLGraph with node feature stored in `feat` field\n                And its label.\n        \"\"\"", "\n", "return", "self", ".", "graph_lists", "[", "idx", "]", ",", "self", ".", "graph_labels", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.data.molecules.MoleculeDatasetDGL.__init__": [[145, 158], ["time.time", "molecules.MoleculeDGL", "molecules.MoleculeDGL", "molecules.MoleculeDGL", "print", "time.time"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "name", "=", "'Zinc'", ")", ":", "\n", "        ", "t0", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "name", "=", "name", "\n", "\n", "self", ".", "num_atom_type", "=", "28", "# known meta-info about the zinc dataset; can be calculated as well", "\n", "self", ".", "num_bond_type", "=", "4", "# known meta-info about the zinc dataset; can be calculated as well", "\n", "\n", "data_dir", "=", "'./data/molecules'", "\n", "\n", "self", ".", "train", "=", "MoleculeDGL", "(", "data_dir", ",", "'train'", ",", "num_graphs", "=", "10000", ")", "\n", "self", ".", "val", "=", "MoleculeDGL", "(", "data_dir", ",", "'val'", ",", "num_graphs", "=", "1000", ")", "\n", "self", ".", "test", "=", "MoleculeDGL", "(", "data_dir", ",", "'test'", ",", "num_graphs", "=", "1000", ")", "\n", "print", "(", "\"Time taken: {:.4f}s\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "t0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.data.molecules.MoleculeDataset.__init__": [[188, 217], ["time.time", "print", "open", "pickle.load", "f[].get_eig", "f[].get_eig", "f[].get_eig", "print", "print", "print", "f[]._add_positional_encodings", "f[]._add_positional_encodings", "f[]._add_positional_encodings", "len", "len", "len", "time.time"], "methods", ["home.repos.pwc.inspect_result.Saro00_DGN.data.molecules.MoleculeDGL.get_eig", "home.repos.pwc.inspect_result.Saro00_DGN.data.molecules.MoleculeDGL.get_eig", "home.repos.pwc.inspect_result.Saro00_DGN.data.molecules.MoleculeDGL.get_eig", "home.repos.pwc.inspect_result.Saro00_DGN.data.molecules.MoleculeDGL._add_positional_encodings", "home.repos.pwc.inspect_result.Saro00_DGN.data.molecules.MoleculeDGL._add_positional_encodings", "home.repos.pwc.inspect_result.Saro00_DGN.data.molecules.MoleculeDGL._add_positional_encodings"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "norm", "=", "'none'", ",", "pos_enc_dim", "=", "0", ",", "verbose", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n            Loading SBM datasets\n        \"\"\"", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "if", "verbose", ":", "\n", "            ", "print", "(", "\"[I] Loading dataset %s...\"", "%", "(", "name", ")", ")", "\n", "", "self", ".", "name", "=", "name", "\n", "data_dir", "=", "'data/'", "\n", "with", "open", "(", "data_dir", "+", "name", "+", "'.pkl'", ",", "\"rb\"", ")", "as", "f", ":", "\n", "            ", "f", "=", "pickle", ".", "load", "(", "f", ")", "\n", "f", "[", "0", "]", ".", "get_eig", "(", "6", ",", "norm", ")", "\n", "if", "pos_enc_dim", ">", "0", ":", "\n", "                ", "f", "[", "0", "]", ".", "_add_positional_encodings", "(", "pos_enc_dim", ")", "\n", "", "self", ".", "train", "=", "f", "[", "0", "]", "\n", "f", "[", "1", "]", ".", "get_eig", "(", "6", ",", "norm", ")", "\n", "if", "pos_enc_dim", ">", "0", ":", "\n", "                ", "f", "[", "1", "]", ".", "_add_positional_encodings", "(", "pos_enc_dim", ")", "\n", "", "self", ".", "val", "=", "f", "[", "1", "]", "\n", "f", "[", "2", "]", ".", "get_eig", "(", "6", ",", "norm", ")", "\n", "if", "pos_enc_dim", ">", "0", ":", "\n", "                ", "f", "[", "2", "]", ".", "_add_positional_encodings", "(", "pos_enc_dim", ")", "\n", "", "self", ".", "test", "=", "f", "[", "2", "]", "\n", "self", ".", "num_atom_type", "=", "f", "[", "3", "]", "\n", "self", ".", "num_bond_type", "=", "f", "[", "4", "]", "\n", "", "if", "verbose", ":", "\n", "            ", "print", "(", "'train, test, val sizes :'", ",", "len", "(", "self", ".", "train", ")", ",", "len", "(", "self", ".", "test", ")", ",", "len", "(", "self", ".", "val", ")", ")", "\n", "print", "(", "\"[I] Finished loading.\"", ")", "\n", "print", "(", "\"[I] Data load time: {:.4f}s\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.data.molecules.MoleculeDataset.collate": [[219, 231], ["map", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.cat().sqrt", "torch.cat().sqrt", "torch.cat().sqrt", "torch.cat().sqrt", "torch.cat().sqrt", "torch.cat().sqrt", "torch.cat().sqrt", "torch.cat().sqrt", "dgl.batch", "zip", "graphs[].number_of_nodes", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "graphs[].number_of_edges", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "numpy.array", "numpy.array", "len", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "float", "len", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "float"], "methods", ["None"], ["", "", "def", "collate", "(", "self", ",", "samples", ")", ":", "\n", "# The input samples is a list of pairs (graph, label).", "\n", "        ", "graphs", ",", "labels", "=", "map", "(", "list", ",", "zip", "(", "*", "samples", ")", ")", "\n", "labels", "=", "torch", ".", "tensor", "(", "np", ".", "array", "(", "labels", ")", ")", ".", "unsqueeze", "(", "1", ")", "\n", "tab_sizes_n", "=", "[", "graphs", "[", "i", "]", ".", "number_of_nodes", "(", ")", "for", "i", "in", "range", "(", "len", "(", "graphs", ")", ")", "]", "\n", "tab_snorm_n", "=", "[", "torch", ".", "FloatTensor", "(", "size", ",", "1", ")", ".", "fill_", "(", "1.", "/", "float", "(", "size", ")", ")", "for", "size", "in", "tab_sizes_n", "]", "\n", "snorm_n", "=", "torch", ".", "cat", "(", "tab_snorm_n", ")", ".", "sqrt", "(", ")", "\n", "tab_sizes_e", "=", "[", "graphs", "[", "i", "]", ".", "number_of_edges", "(", ")", "for", "i", "in", "range", "(", "len", "(", "graphs", ")", ")", "]", "\n", "tab_snorm_e", "=", "[", "torch", ".", "FloatTensor", "(", "size", ",", "1", ")", ".", "fill_", "(", "1.", "/", "float", "(", "size", ")", ")", "for", "size", "in", "tab_sizes_e", "]", "\n", "snorm_e", "=", "torch", ".", "cat", "(", "tab_snorm_e", ")", ".", "sqrt", "(", ")", "\n", "batched_graph", "=", "dgl", ".", "batch", "(", "graphs", ")", "\n", "return", "batched_graph", ",", "labels", ",", "snorm_n", ",", "snorm_e", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.data.molecules.MoleculeDataset._add_self_loops": [[232, 239], ["molecules.MoleculeDataset.", "molecules.MoleculeDataset.", "molecules.MoleculeDataset."], "methods", ["None"], ["", "def", "_add_self_loops", "(", "self", ")", ":", "\n", "# function for adding self loops", "\n", "# this function will be called only if self_loop flag is True", "\n", "\n", "        ", "self", ".", "train", ".", "graph_lists", "=", "[", "self_loop", "(", "g", ")", "for", "g", "in", "self", ".", "train", ".", "graph_lists", "]", "\n", "self", ".", "val", ".", "graph_lists", "=", "[", "self_loop", "(", "g", ")", "for", "g", "in", "self", ".", "val", ".", "graph_lists", "]", "\n", "self", ".", "test", ".", "graph_lists", "=", "[", "self_loop", "(", "g", ")", "for", "g", "in", "self", ".", "test", ".", "graph_lists", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Saro00_DGN.data.molecules.positional_encoding": [[18, 40], ["g.adjacency_matrix_scipy().astype", "scipy.sparse.diags", "numpy.linalg.eig", "EigVal.argsort", "torch.from_numpy().float", "torch.from_numpy().float", "scipy.sparse.eye", "L.toarray", "numpy.real", "g.adjacency_matrix_scipy", "dgl.backend.asnumpy().clip", "g.number_of_nodes", "torch.from_numpy", "torch.from_numpy", "dgl.backend.asnumpy", "g.in_degrees"], "function", ["None"], ["def", "positional_encoding", "(", "g", ",", "pos_enc_dim", ")", ":", "\n", "    ", "\"\"\"\n        Graph positional encoding v/ Laplacian eigenvectors\n    \"\"\"", "\n", "\n", "# Laplacian", "\n", "A", "=", "g", ".", "adjacency_matrix_scipy", "(", "return_edge_ids", "=", "False", ")", ".", "astype", "(", "float", ")", "\n", "N", "=", "sp", ".", "diags", "(", "dgl", ".", "backend", ".", "asnumpy", "(", "g", ".", "in_degrees", "(", ")", ")", ".", "clip", "(", "1", ")", "**", "-", "0.5", ",", "dtype", "=", "float", ")", "\n", "L", "=", "sp", ".", "eye", "(", "g", ".", "number_of_nodes", "(", ")", ")", "-", "N", "*", "A", "*", "N", "\n", "\n", "# Eigenvectors with numpy", "\n", "EigVal", ",", "EigVec", "=", "np", ".", "linalg", ".", "eig", "(", "L", ".", "toarray", "(", ")", ")", "\n", "idx", "=", "EigVal", ".", "argsort", "(", ")", "# increasing order", "\n", "EigVal", ",", "EigVec", "=", "EigVal", "[", "idx", "]", ",", "np", ".", "real", "(", "EigVec", "[", ":", ",", "idx", "]", ")", "\n", "g", ".", "ndata", "[", "'pos_enc'", "]", "=", "torch", ".", "from_numpy", "(", "EigVec", "[", ":", ",", "1", ":", "pos_enc_dim", "+", "1", "]", ")", ".", "float", "(", ")", "\n", "\n", "# # Eigenvectors with scipy", "\n", "# EigVal, EigVec = sp.linalg.eigs(L, k=pos_enc_dim+1, which='SR')", "\n", "# EigVec = EigVec[:, EigVal.argsort()] # increasing order", "\n", "# g.ndata['pos_enc'] = torch.from_numpy(np.abs(EigVec[:,1:pos_enc_dim+1])).float()", "\n", "\n", "return", "g", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.data.molecules.self_loop": [[160, 184], ["dgl.DGLGraph", "dgl.DGLGraph.add_nodes", "g.all_edges", "dgl.backend.zerocopy_to_numpy", "dgl.backend.zerocopy_to_numpy", "numpy.arange", "dgl.DGLGraph.add_edges", "dgl.DGLGraph.add_edges", "torch.zeros", "torch.zeros", "g.number_of_nodes", "g.number_of_nodes", "dgl.DGLGraph.number_of_edges"], "function", ["None"], ["", "", "def", "self_loop", "(", "g", ")", ":", "\n", "    ", "\"\"\"\n        Utility function only, to be used only when necessary as per user self_loop flag\n        : Overwriting the function dgl.transform.add_self_loop() to not miss ndata['feat'] and edata['feat']\n        \n        \n        This function is called inside a function in MoleculeDataset class.\n    \"\"\"", "\n", "new_g", "=", "dgl", ".", "DGLGraph", "(", ")", "\n", "new_g", ".", "add_nodes", "(", "g", ".", "number_of_nodes", "(", ")", ")", "\n", "new_g", ".", "ndata", "[", "'feat'", "]", "=", "g", ".", "ndata", "[", "'feat'", "]", "\n", "\n", "src", ",", "dst", "=", "g", ".", "all_edges", "(", "order", "=", "\"eid\"", ")", "\n", "src", "=", "dgl", ".", "backend", ".", "zerocopy_to_numpy", "(", "src", ")", "\n", "dst", "=", "dgl", ".", "backend", ".", "zerocopy_to_numpy", "(", "dst", ")", "\n", "non_self_edges_idx", "=", "src", "!=", "dst", "\n", "nodes", "=", "np", ".", "arange", "(", "g", ".", "number_of_nodes", "(", ")", ")", "\n", "new_g", ".", "add_edges", "(", "src", "[", "non_self_edges_idx", "]", ",", "dst", "[", "non_self_edges_idx", "]", ")", "\n", "new_g", ".", "add_edges", "(", "nodes", ",", "nodes", ")", "\n", "\n", "# This new edata is not used since this function gets called only for GCN, GAT", "\n", "# However, we need this for the generic requirement of ndata and edata", "\n", "new_g", ".", "edata", "[", "'feat'", "]", "=", "torch", ".", "zeros", "(", "new_g", ".", "number_of_edges", "(", ")", ")", "\n", "return", "new_g", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.data.multiplicity_eig.DotDict.__init__": [[10, 13], ["multiplicity_eig.DotDict.update"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwds", ")", ":", "\n", "        ", "self", ".", "update", "(", "kwds", ")", "\n", "self", ".", "__dict__", "=", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.data.multiplicity_eig.get_eig_val": [[14, 28], ["g.adjacency_matrix_scipy().astype", "scipy.sparse.linalg.eigs", "scipy.sparse.diags", "g.adjacency_matrix_scipy", "dgl.backend.asnumpy().clip", "scipy.sparse.diags", "scipy.sparse.eye", "scipy.sparse.eye", "scipy.sparse.diags", "dgl.backend.asnumpy", "g.number_of_nodes", "dgl.backend.asnumpy().clip", "g.number_of_nodes", "scipy.sparse.eye", "g.in_degrees", "dgl.backend.asnumpy().clip", "g.number_of_nodes", "dgl.backend.asnumpy", "g.in_degrees", "dgl.backend.asnumpy", "g.in_degrees"], "function", ["None"], ["", "", "def", "get_eig_val", "(", "g", ",", "pos_enc_dim", "=", "7", ",", "norm", "=", "'none'", ",", "tol", "=", "1e-3", ")", ":", "\n", "# Laplacian", "\n", "    ", "A", "=", "g", ".", "adjacency_matrix_scipy", "(", "return_edge_ids", "=", "False", ")", ".", "astype", "(", "float", ")", "\n", "if", "norm", "==", "'none'", ":", "\n", "        ", "N", "=", "sp", ".", "diags", "(", "dgl", ".", "backend", ".", "asnumpy", "(", "g", ".", "in_degrees", "(", ")", ")", ".", "clip", "(", "1", ")", ",", "dtype", "=", "float", ")", "\n", "L", "=", "N", "*", "sp", ".", "eye", "(", "g", ".", "number_of_nodes", "(", ")", ")", "-", "A", "\n", "", "elif", "norm", "==", "'sym'", ":", "\n", "        ", "N", "=", "sp", ".", "diags", "(", "dgl", ".", "backend", ".", "asnumpy", "(", "g", ".", "in_degrees", "(", ")", ")", ".", "clip", "(", "1", ")", "**", "-", "0.5", ",", "dtype", "=", "float", ")", "\n", "L", "=", "sp", ".", "eye", "(", "g", ".", "number_of_nodes", "(", ")", ")", "-", "N", "*", "A", "*", "N", "\n", "", "elif", "norm", "==", "'walk'", ":", "\n", "        ", "N", "=", "sp", ".", "diags", "(", "dgl", ".", "backend", ".", "asnumpy", "(", "g", ".", "in_degrees", "(", ")", ")", ".", "clip", "(", "1", ")", "**", "-", "1.", ",", "dtype", "=", "float", ")", "\n", "L", "=", "sp", ".", "eye", "(", "g", ".", "number_of_nodes", "(", ")", ")", "-", "N", "*", "A", "\n", "", "EigVal", ",", "EigVec", "=", "sp", ".", "linalg", ".", "eigs", "(", "L", ",", "k", "=", "pos_enc_dim", "+", "1", ",", "which", "=", "'SR'", ",", "tol", "=", "tol", ")", "\n", "return", "EigVal", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.data.multiplicity_eig.get_multiplicity": [[30, 56], ["data.molecules.MoleculeDataset", "len", "data.SBMs.SBMsDataset", "multiplicity_eig.get_eig_val", "multiplicity_eig.get_eig_val", "multiplicity_eig.get_eig_val", "data.superpixels.SuperPixDataset", "abs", "data.COLLAB.COLLABDataset"], "function", ["home.repos.pwc.inspect_result.Saro00_DGN.data.multiplicity_eig.get_eig_val", "home.repos.pwc.inspect_result.Saro00_DGN.data.multiplicity_eig.get_eig_val", "home.repos.pwc.inspect_result.Saro00_DGN.data.multiplicity_eig.get_eig_val"], ["", "def", "get_multiplicity", "(", "DATASET_NAME", ",", "first", ",", "second", ",", "tol", ",", "dim", ",", "norm", ",", "tol_scipy", ")", ":", "\n", "    ", "if", "DATASET_NAME", "==", "'ZINC'", ":", "\n", "        ", "dataset", "=", "MoleculeDataset", "(", "DATASET_NAME", ")", "\n", "", "elif", "DATASET_NAME", "==", "'SBM_PATTERN'", ":", "\n", "        ", "dataset", "=", "SBMsDataset", "(", "DATASET_NAME", ")", "\n", "", "elif", "DATASET_NAME", "==", "'CIFAR10'", ":", "\n", "        ", "dataset", "=", "SuperPixDataset", "(", "DATASET_NAME", ")", "\n", "", "elif", "DATASET_NAME", "==", "'COLLAB'", ":", "\n", "        ", "dataset", "=", "COLLABDataset", "(", "DATASET_NAME", ")", "\n", "\n", "", "if", "DATASET_NAME", "==", "'COLLAB'", ":", "\n", "        ", "pass", "\n", "", "else", ":", "\n", "        ", "train_graphs", "=", "dataset", ".", "train", ".", "graph_lists", "\n", "val_graphs", "=", "dataset", ".", "val", ".", "graph_lists", "\n", "test_graphs", "=", "dataset", ".", "test", ".", "graph_lists", "\n", "train_eigs", "=", "[", "get_eig_val", "(", "g", ",", "pos_enc_dim", "=", "dim", ",", "norm", "=", "norm", ",", "tol", "=", "tol_scipy", ")", "for", "g", "in", "train_graphs", "]", "\n", "val_eigs", "=", "[", "get_eig_val", "(", "g", ",", "pos_enc_dim", "=", "dim", ",", "norm", "=", "norm", ",", "tol", "=", "tol_scipy", ")", "for", "g", "in", "val_graphs", "]", "\n", "test_eigs", "=", "[", "get_eig_val", "(", "g", ",", "pos_enc_dim", "=", "dim", ",", "norm", "=", "norm", ",", "tol", "=", "tol_scipy", ")", "for", "g", "in", "test_graphs", "]", "\n", "eigs", "=", "train_eigs", "+", "val_eigs", "+", "test_eigs", "\n", "i", "=", "0", "\n", "n", "=", "len", "(", "eigs", ")", "\n", "for", "eig", "in", "eigs", ":", "\n", "            ", "if", "abs", "(", "eig", "[", "first", "]", "-", "eig", "[", "second", "]", ")", ">", "tol", ":", "\n", "                ", "i", "+=", "1", "\n", "", "", "return", "i", "/", "n", ",", "i", ",", "n", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.data.multiplicity_eig.main": [[59, 74], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "multiplicity_eig.get_multiplicity", "print", "int", "int", "float", "int", "float"], "function", ["home.repos.pwc.inspect_result.Saro00_DGN.data.multiplicity_eig.get_multiplicity"], ["", "", "def", "main", "(", ")", ":", "\n", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--DATASET_NAME'", ",", "help", "=", "'Name of the Dataset'", ")", "\n", "parser", ".", "add_argument", "(", "'--first'", ",", "default", "=", "1", ",", "help", "=", "'1st index to check'", ")", "\n", "parser", ".", "add_argument", "(", "'--second'", ",", "default", "=", "2", ",", "help", "=", "'2st index to check'", ")", "\n", "parser", ".", "add_argument", "(", "'--tol'", ",", "default", "=", "1e-3", ",", "help", "=", "'Tolerance for multiplicity'", ")", "\n", "parser", ".", "add_argument", "(", "'--tol_scipy'", ",", "default", "=", "1e-3", ",", "help", "=", "'Tolerance of scipy to compute eigs'", ")", "\n", "parser", ".", "add_argument", "(", "'--lap_norm'", ",", "default", "=", "'none'", ",", "help", "=", "'Normalisation for the Laplacian matrix'", ")", "\n", "parser", ".", "add_argument", "(", "'--dim'", ",", "help", "=", "'Number of eigs to compute'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "multiplicity_prop", "=", "get_multiplicity", "(", "args", ".", "DATASET_NAME", ",", "int", "(", "args", ".", "first", ")", ",", "int", "(", "args", ".", "second", ")", ",", "float", "(", "args", ".", "tol", ")", ",", "int", "(", "args", ".", "dim", ")", ",", "args", ".", "lap_norm", ",", "float", "(", "args", ".", "tol_scipy", ")", ")", "\n", "print", "(", "multiplicity_prop", ")", "\n", "\n", "return", "multiplicity_prop", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.nets.scalers.scale_identity": [[7, 9], ["None"], "function", ["None"], ["def", "scale_identity", "(", "h", ",", "D", "=", "None", ",", "avg_d", "=", "None", ")", ":", "\n", "    ", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.nets.scalers.scale_amplification": [[11, 14], ["numpy.log"], "function", ["None"], ["", "def", "scale_amplification", "(", "h", ",", "D", ",", "avg_d", ")", ":", "\n", "# log(D + 1) / d * h     where d is the average of the ``log(D + 1)`` in the training set", "\n", "    ", "return", "h", "*", "(", "np", ".", "log", "(", "D", "+", "1", ")", "/", "avg_d", "[", "\"log\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.nets.scalers.scale_attenuation": [[16, 19], ["numpy.log"], "function", ["None"], ["", "def", "scale_attenuation", "(", "h", ",", "D", ",", "avg_d", ")", ":", "\n", "# (log(D + 1))^-1 / d * X     where d is the average of the ``log(D + 1))^-1`` in the training set", "\n", "    ", "return", "h", "*", "(", "avg_d", "[", "\"log\"", "]", "/", "np", ".", "log", "(", "D", "+", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.nets.dgn_layer.VirtualNode.__init__": [[13, 19], ["torch.Module.__init__", "vn_type.lower", "layers.FCLayer"], "methods", ["home.repos.pwc.inspect_result.Saro00_DGN.dgl.dgn_layer.DGNLayer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "dropout", ",", "batch_norm", "=", "False", ",", "bias", "=", "True", ",", "residual", "=", "True", ",", "vn_type", "=", "'mean'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "vn_type", "=", "vn_type", ".", "lower", "(", ")", "\n", "self", ".", "fc_layer", "=", "FCLayer", "(", "in_size", "=", "dim", ",", "out_size", "=", "dim", ",", "activation", "=", "'relu'", ",", "dropout", "=", "dropout", ",", "\n", "b_norm", "=", "batch_norm", ",", "bias", "=", "bias", ")", "\n", "self", ".", "residual", "=", "residual", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.nets.dgn_layer.VirtualNode.forward": [[20, 50], ["dgn_layer.VirtualNode.fc_layer.forward", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "dgl.nn.pytorch.glob.mean_nodes", "dgl.nn.pytorch.glob.sum_nodes", "vn_h[].repeat", "dgl.nn.pytorch.glob.mean_nodes", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "ValueError", "enumerate", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.log.unsqueeze", "torch.log.unsqueeze", "torch.log.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.Saro00_DGN.dgl.dgn_layer.DGNLayerTower.forward"], ["", "def", "forward", "(", "self", ",", "g", ",", "h", ",", "vn_h", ")", ":", "\n", "\n", "        ", "g", ".", "ndata", "[", "'h'", "]", "=", "h", "\n", "\n", "# Pool the features", "\n", "if", "self", ".", "vn_type", "==", "'mean'", ":", "\n", "            ", "pool", "=", "mean_nodes", "(", "g", ",", "'h'", ")", "\n", "", "elif", "self", ".", "vn_type", "==", "'sum'", ":", "\n", "            ", "pool", "=", "sum_nodes", "(", "g", ",", "'h'", ")", "\n", "", "elif", "self", ".", "vn_type", "==", "'logsum'", ":", "\n", "            ", "pool", "=", "mean_nodes", "(", "g", ",", "'h'", ")", "\n", "lognum", "=", "torch", ".", "log", "(", "torch", ".", "tensor", "(", "g", ".", "batch_num_nodes", ",", "dtype", "=", "h", ".", "dtype", ",", "device", "=", "h", ".", "device", ")", ")", "\n", "pool", "=", "pool", "*", "lognum", ".", "unsqueeze", "(", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f'Undefined input \"{self.pooling}\". Accepted values are \"sum\", \"mean\", \"logsum\"'", ")", "\n", "\n", "# Compute the new virtual node features", "\n", "", "vn_h_temp", "=", "self", ".", "fc_layer", ".", "forward", "(", "vn_h", "+", "pool", ")", "\n", "if", "self", ".", "residual", ":", "\n", "            ", "vn_h", "=", "vn_h", "+", "vn_h_temp", "\n", "", "else", ":", "\n", "            ", "vn_h", "=", "vn_h_temp", "\n", "\n", "# Add the virtual node value to the graph features", "\n", "", "temp_h", "=", "torch", ".", "cat", "(", "\n", "[", "vn_h", "[", "ii", ":", "ii", "+", "1", "]", ".", "repeat", "(", "num_nodes", ",", "1", ")", "for", "ii", ",", "num_nodes", "in", "enumerate", "(", "g", ".", "batch_num_nodes", ")", "]", ",", "\n", "dim", "=", "0", ")", "\n", "h", "=", "h", "+", "temp_h", "\n", "\n", "return", "vn_h", ",", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.nets.dgn_layer.DGNLayerComplex.__init__": [[53, 74], ["torch.Module.__init__", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "layers.MLP", "layers.MLP", "len", "len"], "methods", ["home.repos.pwc.inspect_result.Saro00_DGN.dgl.dgn_layer.DGNLayer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", ",", "out_dim", ",", "dropout", ",", "graph_norm", ",", "batch_norm", ",", "aggregators", ",", "scalers", ",", "avg_d", ",", "residual", ",", "\n", "edge_features", ",", "edge_dim", ",", "pretrans_layers", "=", "1", ",", "posttrans_layers", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "graph_norm", "=", "graph_norm", "\n", "self", ".", "batch_norm", "=", "batch_norm", "\n", "self", ".", "edge_features", "=", "edge_features", "\n", "self", ".", "residual", "=", "residual", "\n", "\n", "self", ".", "aggregators", "=", "aggregators", "\n", "self", ".", "scalers", "=", "scalers", "\n", "\n", "self", ".", "batchnorm_h", "=", "nn", ".", "BatchNorm1d", "(", "out_dim", ")", "\n", "self", ".", "pretrans", "=", "MLP", "(", "in_size", "=", "2", "*", "in_dim", "+", "(", "edge_dim", "if", "edge_features", "else", "0", ")", ",", "hidden_size", "=", "in_dim", ",", "\n", "out_size", "=", "in_dim", ",", "layers", "=", "pretrans_layers", ",", "mid_activation", "=", "'relu'", ",", "last_activation", "=", "'none'", ")", "\n", "self", ".", "posttrans", "=", "MLP", "(", "in_size", "=", "(", "len", "(", "aggregators", ")", "*", "len", "(", "scalers", ")", "+", "1", ")", "*", "in_dim", ",", "hidden_size", "=", "out_dim", ",", "\n", "out_size", "=", "out_dim", ",", "layers", "=", "posttrans_layers", ",", "mid_activation", "=", "'relu'", ",", "last_activation", "=", "'none'", ")", "\n", "self", ".", "avg_d", "=", "avg_d", "\n", "if", "in_dim", "!=", "out_dim", ":", "\n", "            ", "self", ".", "residual", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.nets.dgn_layer.DGNLayerComplex.pretrans_edges": [[75, 81], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "dgn_layer.DGNLayerComplex.pretrans"], "methods", ["None"], ["", "", "def", "pretrans_edges", "(", "self", ",", "edges", ")", ":", "\n", "        ", "if", "self", ".", "edge_features", ":", "\n", "            ", "z2", "=", "torch", ".", "cat", "(", "[", "edges", ".", "src", "[", "'h'", "]", ",", "edges", ".", "dst", "[", "'h'", "]", ",", "edges", ".", "data", "[", "'ef'", "]", "]", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "z2", "=", "torch", ".", "cat", "(", "[", "edges", ".", "src", "[", "'h'", "]", ",", "edges", ".", "dst", "[", "'h'", "]", "]", ",", "dim", "=", "1", ")", "\n", "", "return", "{", "'e'", ":", "self", ".", "pretrans", "(", "z2", ")", ",", "'eig_s'", ":", "edges", ".", "src", "[", "'eig'", "]", ",", "'eig_d'", ":", "edges", ".", "dst", "[", "'eig'", "]", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.nets.dgn_layer.DGNLayerComplex.message_func": [[82, 85], ["edges.data[].to", "edges.data[].to", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available"], "methods", ["None"], ["", "def", "message_func", "(", "self", ",", "edges", ")", ":", "\n", "        ", "return", "{", "'e'", ":", "edges", ".", "data", "[", "'e'", "]", ",", "'eig_s'", ":", "edges", ".", "data", "[", "'eig_s'", "]", ".", "to", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", ",", "\n", "'eig_d'", ":", "edges", ".", "data", "[", "'eig_d'", "]", ".", "to", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.nets.dgn_layer.DGNLayerComplex.reduce_func": [[86, 99], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "aggregate", "scale"], "methods", ["None"], ["", "def", "reduce_func", "(", "self", ",", "nodes", ")", ":", "\n", "        ", "h_in", "=", "nodes", ".", "data", "[", "'h'", "]", "\n", "h", "=", "nodes", ".", "mailbox", "[", "'e'", "]", "\n", "eig_s", "=", "nodes", ".", "mailbox", "[", "'eig_s'", "]", "\n", "eig_d", "=", "nodes", ".", "mailbox", "[", "'eig_d'", "]", "\n", "D", "=", "h", ".", "shape", "[", "-", "2", "]", "\n", "\n", "# aggregators and scalers", "\n", "h", "=", "torch", ".", "cat", "(", "[", "aggregate", "(", "h", ",", "eig_s", ",", "eig_d", ",", "h_in", ")", "for", "aggregate", "in", "self", ".", "aggregators", "]", ",", "dim", "=", "1", ")", "\n", "if", "len", "(", "self", ".", "scalers", ")", ">", "1", ":", "\n", "            ", "h", "=", "torch", ".", "cat", "(", "[", "scale", "(", "h", ",", "D", "=", "D", ",", "avg_d", "=", "self", ".", "avg_d", ")", "for", "scale", "in", "self", ".", "scalers", "]", ",", "dim", "=", "1", ")", "\n", "\n", "", "return", "{", "'h'", ":", "h", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.nets.dgn_layer.DGNLayerComplex.posttrans_nodes": [[100, 102], ["dgn_layer.DGNLayerComplex.posttrans"], "methods", ["None"], ["", "def", "posttrans_nodes", "(", "self", ",", "nodes", ")", ":", "\n", "        ", "return", "self", ".", "posttrans", "(", "nodes", ".", "data", "[", "'h'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.nets.dgn_layer.DGNLayerComplex.forward": [[103, 133], ["g.apply_edges", "g.update_all", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "dgn_layer.DGNLayerComplex.posttrans", "torch.relu", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "torch.dropout", "dgn_layer.DGNLayerComplex.batchnorm_h"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "g", ",", "h", ",", "e", ",", "snorm_n", ")", ":", "\n", "\n", "        ", "h_in", "=", "h", "\n", "g", ".", "ndata", "[", "'h'", "]", "=", "h", "\n", "\n", "if", "self", ".", "edge_features", ":", "# add the edges information only if edge_features = True", "\n", "            ", "g", ".", "edata", "[", "'ef'", "]", "=", "e", "\n", "\n", "# pretransformation", "\n", "", "g", ".", "apply_edges", "(", "self", ".", "pretrans_edges", ")", "\n", "\n", "# aggregation", "\n", "g", ".", "update_all", "(", "self", ".", "message_func", ",", "self", ".", "reduce_func", ")", "\n", "h", "=", "torch", ".", "cat", "(", "[", "h", ",", "g", ".", "ndata", "[", "'h'", "]", "]", ",", "dim", "=", "1", ")", "\n", "\n", "# posttransformation", "\n", "h", "=", "self", ".", "posttrans", "(", "h", ")", "\n", "\n", "# graph and batch normalization and residual", "\n", "if", "self", ".", "graph_norm", ":", "\n", "            ", "h", "=", "h", "*", "snorm_n", "\n", "", "if", "self", ".", "batch_norm", ":", "\n", "            ", "h", "=", "self", ".", "batchnorm_h", "(", "h", ")", "\n", "", "h", "=", "F", ".", "relu", "(", "h", ")", "\n", "if", "self", ".", "residual", ":", "\n", "            ", "h", "=", "h_in", "+", "h", "\n", "\n", "", "h", "=", "F", ".", "dropout", "(", "h", ",", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.nets.dgn_layer.DGNLayerSimple.__init__": [[136, 153], ["torch.Module.__init__", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "layers.MLP", "len", "len"], "methods", ["home.repos.pwc.inspect_result.Saro00_DGN.dgl.dgn_layer.DGNLayer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", ",", "out_dim", ",", "dropout", ",", "graph_norm", ",", "batch_norm", ",", "aggregators", ",", "scalers", ",", "residual", ",", "avg_d", ",", "\n", "posttrans_layers", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "graph_norm", "=", "graph_norm", "\n", "self", ".", "batch_norm", "=", "batch_norm", "\n", "self", ".", "residual", "=", "residual", "\n", "self", ".", "aggregators", "=", "aggregators", "\n", "self", ".", "scalers", "=", "scalers", "\n", "self", ".", "batchnorm_h", "=", "nn", ".", "BatchNorm1d", "(", "out_dim", ")", "\n", "\n", "self", ".", "posttrans", "=", "MLP", "(", "in_size", "=", "(", "len", "(", "aggregators", ")", "*", "len", "(", "scalers", ")", ")", "*", "in_dim", ",", "hidden_size", "=", "out_dim", ",", "\n", "out_size", "=", "out_dim", ",", "layers", "=", "posttrans_layers", ",", "mid_activation", "=", "'relu'", ",", "last_activation", "=", "'none'", ")", "\n", "self", ".", "avg_d", "=", "avg_d", "\n", "if", "in_dim", "!=", "out_dim", ":", "\n", "            ", "self", ".", "residual", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.nets.dgn_layer.DGNLayerSimple.pretrans_edges": [[154, 156], ["None"], "methods", ["None"], ["", "", "def", "pretrans_edges", "(", "self", ",", "edges", ")", ":", "\n", "        ", "return", "{", "'e'", ":", "edges", ".", "src", "[", "'h'", "]", ",", "'eig_s'", ":", "edges", ".", "src", "[", "'eig'", "]", ",", "'eig_d'", ":", "edges", ".", "dst", "[", "'eig'", "]", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.nets.dgn_layer.DGNLayerSimple.message_func": [[157, 160], ["edges.data[].to", "edges.data[].to", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available"], "methods", ["None"], ["", "def", "message_func", "(", "self", ",", "edges", ")", ":", "\n", "        ", "return", "{", "'e'", ":", "edges", ".", "data", "[", "'e'", "]", ",", "'eig_s'", ":", "edges", ".", "data", "[", "'eig_s'", "]", ".", "to", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", ",", "\n", "'eig_d'", ":", "edges", ".", "data", "[", "'eig_d'", "]", ".", "to", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.nets.dgn_layer.DGNLayerSimple.reduce_func": [[161, 174], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "aggregate", "scale"], "methods", ["None"], ["", "def", "reduce_func", "(", "self", ",", "nodes", ")", ":", "\n", "        ", "h_in", "=", "nodes", ".", "data", "[", "'h'", "]", "\n", "h", "=", "nodes", ".", "mailbox", "[", "'e'", "]", "\n", "eig_s", "=", "nodes", ".", "mailbox", "[", "'eig_s'", "]", "\n", "eig_d", "=", "nodes", ".", "mailbox", "[", "'eig_d'", "]", "\n", "D", "=", "h", ".", "shape", "[", "-", "2", "]", "\n", "\n", "# aggregators and scalers", "\n", "h", "=", "torch", ".", "cat", "(", "[", "aggregate", "(", "h", ",", "eig_s", ",", "eig_d", ",", "h_in", ")", "for", "aggregate", "in", "self", ".", "aggregators", "]", ",", "dim", "=", "1", ")", "\n", "if", "len", "(", "self", ".", "scalers", ")", ">", "1", ":", "\n", "            ", "h", "=", "torch", ".", "cat", "(", "[", "scale", "(", "h", ",", "D", "=", "D", ",", "avg_d", "=", "self", ".", "avg_d", ")", "for", "scale", "in", "self", ".", "scalers", "]", ",", "dim", "=", "1", ")", "\n", "\n", "", "return", "{", "'h'", ":", "h", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.nets.dgn_layer.DGNLayerSimple.posttrans_nodes": [[175, 177], ["dgn_layer.DGNLayerSimple.posttrans"], "methods", ["None"], ["", "def", "posttrans_nodes", "(", "self", ",", "nodes", ")", ":", "\n", "        ", "return", "self", ".", "posttrans", "(", "nodes", ".", "data", "[", "'h'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.nets.dgn_layer.DGNLayerSimple.forward": [[178, 203], ["g.apply_edges", "g.update_all", "dgn_layer.DGNLayerSimple.posttrans", "torch.relu", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "torch.dropout", "dgn_layer.DGNLayerSimple.batchnorm_h"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "g", ",", "h", ",", "e", ",", "snorm_n", ")", ":", "\n", "        ", "h_in", "=", "h", "\n", "g", ".", "ndata", "[", "'h'", "]", "=", "h", "\n", "\n", "# pretransformation", "\n", "g", ".", "apply_edges", "(", "self", ".", "pretrans_edges", ")", "\n", "\n", "# aggregation", "\n", "g", ".", "update_all", "(", "self", ".", "message_func", ",", "self", ".", "reduce_func", ")", "\n", "h", "=", "g", ".", "ndata", "[", "'h'", "]", "\n", "\n", "# posttransformation", "\n", "h", "=", "self", ".", "posttrans", "(", "h", ")", "\n", "\n", "# graph and batch normalization and residual", "\n", "if", "self", ".", "graph_norm", ":", "\n", "            ", "h", "=", "h", "*", "snorm_n", "\n", "", "if", "self", ".", "batch_norm", ":", "\n", "            ", "h", "=", "self", ".", "batchnorm_h", "(", "h", ")", "\n", "", "h", "=", "F", ".", "relu", "(", "h", ")", "\n", "if", "self", ".", "residual", ":", "\n", "            ", "h", "=", "h_in", "+", "h", "\n", "\n", "", "h", "=", "F", ".", "dropout", "(", "h", ",", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.nets.dgn_layer.DGNTower.__init__": [[206, 225], ["torch.Module.__init__", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "layers.MLP", "layers.MLP", "len", "len"], "methods", ["home.repos.pwc.inspect_result.Saro00_DGN.dgl.dgn_layer.DGNLayer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", ",", "out_dim", ",", "dropout", ",", "graph_norm", ",", "batch_norm", ",", "aggregators", ",", "scalers", ",", "avg_d", ",", "\n", "pretrans_layers", ",", "posttrans_layers", ",", "edge_features", ",", "edge_dim", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "graph_norm", "=", "graph_norm", "\n", "self", ".", "batch_norm", "=", "batch_norm", "\n", "self", ".", "edge_features", "=", "edge_features", "\n", "\n", "self", ".", "aggregators", "=", "aggregators", "\n", "self", ".", "scalers", "=", "scalers", "\n", "\n", "self", ".", "batchnorm_h", "=", "nn", ".", "BatchNorm1d", "(", "out_dim", ")", "\n", "\n", "self", ".", "pretrans", "=", "MLP", "(", "in_size", "=", "2", "*", "in_dim", "+", "(", "edge_dim", "if", "edge_features", "else", "0", ")", ",", "hidden_size", "=", "in_dim", ",", "\n", "out_size", "=", "in_dim", ",", "layers", "=", "pretrans_layers", ",", "mid_activation", "=", "'relu'", ",", "last_activation", "=", "'none'", ")", "\n", "\n", "self", ".", "posttrans", "=", "MLP", "(", "in_size", "=", "(", "len", "(", "aggregators", ")", "*", "len", "(", "scalers", ")", "+", "1", ")", "*", "in_dim", ",", "hidden_size", "=", "out_dim", ",", "\n", "out_size", "=", "out_dim", ",", "layers", "=", "posttrans_layers", ",", "mid_activation", "=", "'relu'", ",", "last_activation", "=", "'none'", ")", "\n", "self", ".", "avg_d", "=", "avg_d", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.nets.dgn_layer.DGNTower.pretrans_edges": [[226, 232], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "dgn_layer.DGNTower.pretrans"], "methods", ["None"], ["", "def", "pretrans_edges", "(", "self", ",", "edges", ")", ":", "\n", "        ", "if", "self", ".", "edge_features", ":", "\n", "            ", "z2", "=", "torch", ".", "cat", "(", "[", "edges", ".", "src", "[", "'h'", "]", ",", "edges", ".", "dst", "[", "'h'", "]", ",", "edges", ".", "data", "[", "'ef'", "]", "]", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "z2", "=", "torch", ".", "cat", "(", "[", "edges", ".", "src", "[", "'h'", "]", ",", "edges", ".", "dst", "[", "'h'", "]", "]", ",", "dim", "=", "1", ")", "\n", "", "return", "{", "'e'", ":", "self", ".", "pretrans", "(", "z2", ")", ",", "'eig_s'", ":", "edges", ".", "src", "[", "'eig'", "]", ",", "'eig_d'", ":", "edges", ".", "dst", "[", "'eig'", "]", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.nets.dgn_layer.DGNTower.message_func": [[233, 236], ["edges.data[].to", "edges.data[].to", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available"], "methods", ["None"], ["", "def", "message_func", "(", "self", ",", "edges", ")", ":", "\n", "        ", "return", "{", "'e'", ":", "edges", ".", "data", "[", "'e'", "]", ",", "'eig_s'", ":", "edges", ".", "data", "[", "'eig_s'", "]", ".", "to", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", ",", "\n", "'eig_d'", ":", "edges", ".", "data", "[", "'eig_d'", "]", ".", "to", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.nets.dgn_layer.DGNTower.reduce_func": [[237, 250], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "aggregate", "scale"], "methods", ["None"], ["", "def", "reduce_func", "(", "self", ",", "nodes", ")", ":", "\n", "        ", "h_in", "=", "nodes", ".", "data", "[", "'h'", "]", "\n", "h", "=", "nodes", ".", "mailbox", "[", "'e'", "]", "\n", "eig_s", "=", "nodes", ".", "mailbox", "[", "'eig_s'", "]", "\n", "eig_d", "=", "nodes", ".", "mailbox", "[", "'eig_d'", "]", "\n", "D", "=", "h", ".", "shape", "[", "-", "2", "]", "\n", "\n", "# aggregators and scalers", "\n", "h", "=", "torch", ".", "cat", "(", "[", "aggregate", "(", "h", ",", "eig_s", ",", "eig_d", ",", "h_in", ")", "for", "aggregate", "in", "self", ".", "aggregators", "]", ",", "dim", "=", "1", ")", "\n", "if", "len", "(", "self", ".", "scalers", ")", ">", "1", ":", "\n", "            ", "h", "=", "torch", ".", "cat", "(", "[", "scale", "(", "h", ",", "D", "=", "D", ",", "avg_d", "=", "self", ".", "avg_d", ")", "for", "scale", "in", "self", ".", "scalers", "]", ",", "dim", "=", "1", ")", "\n", "\n", "", "return", "{", "'h'", ":", "h", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.nets.dgn_layer.DGNTower.posttrans_nodes": [[251, 253], ["dgn_layer.DGNTower.posttrans"], "methods", ["None"], ["", "def", "posttrans_nodes", "(", "self", ",", "nodes", ")", ":", "\n", "        ", "return", "self", ".", "posttrans", "(", "nodes", ".", "data", "[", "'h'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.nets.dgn_layer.DGNTower.forward": [[254, 277], ["g.apply_edges", "g.update_all", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "dgn_layer.DGNTower.posttrans", "torch.dropout", "torch.dropout", "torch.dropout", "dgn_layer.DGNTower.batchnorm_h"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "g", ",", "h", ",", "e", ",", "snorm_n", ")", ":", "\n", "        ", "g", ".", "ndata", "[", "'h'", "]", "=", "h", "\n", "\n", "if", "self", ".", "edge_features", ":", "# add the edges information only if edge_features = True", "\n", "            ", "g", ".", "edata", "[", "'ef'", "]", "=", "e", "\n", "\n", "# pretransformation", "\n", "", "g", ".", "apply_edges", "(", "self", ".", "pretrans_edges", ")", "\n", "\n", "# aggregation", "\n", "g", ".", "update_all", "(", "self", ".", "message_func", ",", "self", ".", "reduce_func", ")", "\n", "h", "=", "torch", ".", "cat", "(", "[", "h", ",", "g", ".", "ndata", "[", "'h'", "]", "]", ",", "dim", "=", "1", ")", "\n", "\n", "# posttransformation", "\n", "h", "=", "self", ".", "posttrans", "(", "h", ")", "\n", "\n", "# graph and batch normalization", "\n", "if", "self", ".", "graph_norm", ":", "\n", "            ", "h", "=", "h", "*", "snorm_n", "\n", "", "if", "self", ".", "batch_norm", ":", "\n", "            ", "h", "=", "self", ".", "batchnorm_h", "(", "h", ")", "\n", "", "h", "=", "F", ".", "dropout", "(", "h", ",", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.nets.dgn_layer.DGNLayerTower.__init__": [[280, 308], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "layers.FCLayer", "dgn_layer.DGNLayerTower.towers.append", "dgn_layer.DGNTower"], "methods", ["home.repos.pwc.inspect_result.Saro00_DGN.dgl.dgn_layer.DGNLayer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", ",", "out_dim", ",", "aggregators", ",", "scalers", ",", "avg_d", ",", "dropout", ",", "graph_norm", ",", "batch_norm", ",", "towers", "=", "5", ",", "\n", "pretrans_layers", "=", "1", ",", "posttrans_layers", "=", "1", ",", "divide_input", "=", "True", ",", "residual", "=", "False", ",", "edge_features", "=", "False", ",", "\n", "edge_dim", "=", "0", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "(", "(", "not", "divide_input", ")", "or", "in_dim", "%", "towers", "==", "0", ")", ",", "\"if divide_input is set the number of towers has to divide in_dim\"", "\n", "assert", "(", "out_dim", "%", "towers", "==", "0", ")", ",", "\"the number of towers has to divide the out_dim\"", "\n", "assert", "avg_d", "is", "not", "None", "\n", "\n", "self", ".", "divide_input", "=", "divide_input", "\n", "self", ".", "input_tower", "=", "in_dim", "//", "towers", "if", "divide_input", "else", "in_dim", "\n", "self", ".", "output_tower", "=", "out_dim", "//", "towers", "\n", "self", ".", "in_dim", "=", "in_dim", "\n", "self", ".", "out_dim", "=", "out_dim", "\n", "self", ".", "edge_features", "=", "edge_features", "\n", "self", ".", "residual", "=", "residual", "\n", "\n", "if", "in_dim", "!=", "out_dim", ":", "\n", "            ", "self", ".", "residual", "=", "False", "\n", "\n", "# convolution", "\n", "", "self", ".", "towers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "_", "in", "range", "(", "towers", ")", ":", "\n", "            ", "self", ".", "towers", ".", "append", "(", "DGNTower", "(", "in_dim", "=", "self", ".", "input_tower", ",", "out_dim", "=", "self", ".", "output_tower", ",", "aggregators", "=", "aggregators", ",", "\n", "scalers", "=", "scalers", ",", "avg_d", "=", "avg_d", ",", "pretrans_layers", "=", "pretrans_layers", ",", "\n", "posttrans_layers", "=", "posttrans_layers", ",", "batch_norm", "=", "batch_norm", ",", "dropout", "=", "dropout", ",", "\n", "graph_norm", "=", "graph_norm", ",", "edge_features", "=", "edge_features", ",", "edge_dim", "=", "edge_dim", ")", ")", "\n", "# mixing network", "\n", "", "self", ".", "mixing_network", "=", "FCLayer", "(", "out_dim", ",", "out_dim", ",", "activation", "=", "'LeakyReLU'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.nets.dgn_layer.DGNLayerTower.forward": [[309, 326], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "dgn_layer.DGNLayerTower.mixing_network", "tower", "tower", "enumerate"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "g", ",", "h", ",", "e", ",", "snorm_n", ")", ":", "\n", "        ", "h_in", "=", "h", "# for residual connection", "\n", "\n", "if", "self", ".", "divide_input", ":", "\n", "            ", "h_cat", "=", "torch", ".", "cat", "(", "[", "tower", "(", "g", ",", "h", "[", ":", ",", "n_tower", "*", "self", ".", "input_tower", ":", "(", "n_tower", "+", "1", ")", "*", "self", ".", "input_tower", "]", ",", "e", ",", "snorm_n", ")", "\n", "for", "n_tower", ",", "tower", "in", "enumerate", "(", "self", ".", "towers", ")", "]", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "h_cat", "=", "torch", ".", "cat", "(", "[", "tower", "(", "g", ",", "h", ",", "e", ",", "snorm_n", ")", "for", "tower", "in", "self", ".", "towers", "]", ",", "dim", "=", "1", ")", "\n", "\n", "", "if", "len", "(", "self", ".", "towers", ")", ">", "1", ":", "\n", "            ", "h_out", "=", "self", ".", "mixing_network", "(", "h_cat", ")", "\n", "", "else", ":", "\n", "            ", "h_out", "=", "h_cat", "\n", "\n", "", "if", "self", ".", "residual", ":", "\n", "            ", "h_out", "=", "h_in", "+", "h_out", "# residual connection", "\n", "", "return", "h_out", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.nets.dgn_layer.DGNLayer.__init__": [[329, 353], ["torch.Module.__init__", "dgn_layer.DGNLayerSimple", "aggregators.split", "scalers.split", "dgn_layer.DGNLayerComplex", "dgn_layer.DGNLayerTower"], "methods", ["home.repos.pwc.inspect_result.Saro00_DGN.dgl.dgn_layer.DGNLayer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", ",", "out_dim", ",", "dropout", ",", "graph_norm", ",", "batch_norm", ",", "aggregators", ",", "scalers", ",", "avg_d", ",", "type_net", ",", "\n", "residual", ",", "towers", "=", "5", ",", "divide_input", "=", "True", ",", "edge_features", "=", "None", ",", "edge_dim", "=", "None", ",", "pretrans_layers", "=", "1", ",", "\n", "posttrans_layers", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "# retrieve the aggregators and scalers functions", "\n", "aggregators", "=", "[", "AGGREGATORS", "[", "aggr", "]", "for", "aggr", "in", "aggregators", ".", "split", "(", ")", "]", "\n", "scalers", "=", "[", "SCALERS", "[", "scale", "]", "for", "scale", "in", "scalers", ".", "split", "(", ")", "]", "\n", "\n", "if", "type_net", "==", "'simple'", ":", "\n", "            ", "self", ".", "model", "=", "DGNLayerSimple", "(", "in_dim", "=", "in_dim", ",", "out_dim", "=", "out_dim", ",", "dropout", "=", "dropout", ",", "graph_norm", "=", "graph_norm", ",", "\n", "batch_norm", "=", "batch_norm", ",", "residual", "=", "residual", ",", "aggregators", "=", "aggregators", ",", "\n", "scalers", "=", "scalers", ",", "avg_d", "=", "avg_d", ",", "posttrans_layers", "=", "posttrans_layers", ")", "\n", "", "elif", "type_net", "==", "'complex'", ":", "\n", "            ", "self", ".", "model", "=", "DGNLayerComplex", "(", "in_dim", "=", "in_dim", ",", "out_dim", "=", "out_dim", ",", "dropout", "=", "dropout", ",", "graph_norm", "=", "graph_norm", ",", "\n", "batch_norm", "=", "batch_norm", ",", "aggregators", "=", "aggregators", ",", "residual", "=", "residual", ",", "\n", "scalers", "=", "scalers", ",", "avg_d", "=", "avg_d", ",", "edge_features", "=", "edge_features", ",", "edge_dim", "=", "edge_dim", ",", "\n", "pretrans_layers", "=", "pretrans_layers", ",", "posttrans_layers", "=", "posttrans_layers", ")", "\n", "", "elif", "type_net", "==", "'towers'", ":", "\n", "            ", "self", ".", "model", "=", "DGNLayerTower", "(", "in_dim", "=", "in_dim", ",", "out_dim", "=", "out_dim", ",", "aggregators", "=", "aggregators", ",", "scalers", "=", "scalers", ",", "\n", "avg_d", "=", "avg_d", ",", "dropout", "=", "dropout", ",", "graph_norm", "=", "graph_norm", ",", "\n", "batch_norm", "=", "batch_norm", ",", "towers", "=", "towers", ",", "pretrans_layers", "=", "pretrans_layers", ",", "\n", "posttrans_layers", "=", "posttrans_layers", ",", "divide_input", "=", "divide_input", ",", "\n", "residual", "=", "residual", ",", "edge_features", "=", "edge_features", ",", "edge_dim", "=", "edge_dim", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.Saro00_DGN.nets.mlp_readout_layer.MLPReadout.__init__": [[13, 23], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "list_FC_layers.append", "list_FC_layers.append", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "range", "range"], "methods", ["home.repos.pwc.inspect_result.Saro00_DGN.dgl.dgn_layer.DGNLayer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ",", "output_dim", ",", "L", "=", "2", ",", "decreasing_dim", "=", "True", ")", ":", "# L=nb_hidden_layers", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "decreasing_dim", ":", "\n", "            ", "list_FC_layers", "=", "[", "nn", ".", "Linear", "(", "input_dim", "//", "2", "**", "l", ",", "input_dim", "//", "2", "**", "(", "l", "+", "1", ")", ",", "bias", "=", "True", ")", "for", "l", "in", "range", "(", "L", ")", "]", "\n", "list_FC_layers", ".", "append", "(", "nn", ".", "Linear", "(", "input_dim", "//", "2", "**", "L", ",", "output_dim", ",", "bias", "=", "True", ")", ")", "\n", "", "else", ":", "\n", "            ", "list_FC_layers", "=", "[", "nn", ".", "Linear", "(", "input_dim", ",", "input_dim", ",", "bias", "=", "True", ")", "for", "_", "in", "range", "(", "L", ")", "]", "\n", "list_FC_layers", ".", "append", "(", "nn", ".", "Linear", "(", "input_dim", ",", "output_dim", ",", "bias", "=", "True", ")", ")", "\n", "", "self", ".", "FC_layers", "=", "nn", ".", "ModuleList", "(", "list_FC_layers", ")", "\n", "self", ".", "L", "=", "L", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.nets.mlp_readout_layer.MLPReadout.forward": [[24, 31], ["range", "torch.relu", "torch.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "x", "\n", "for", "l", "in", "range", "(", "self", ".", "L", ")", ":", "\n", "            ", "y", "=", "self", ".", "FC_layers", "[", "l", "]", "(", "y", ")", "\n", "y", "=", "F", ".", "relu", "(", "y", ")", "\n", "", "y", "=", "self", ".", "FC_layers", "[", "self", ".", "L", "]", "(", "y", ")", "\n", "return", "y", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Saro00_DGN.nets.aggregators.aggregate_mean": [[8, 10], ["torch.mean"], "function", ["None"], ["def", "aggregate_mean", "(", "h", ",", "eig_s", ",", "eig_d", ",", "h_in", ")", ":", "\n", "    ", "return", "torch", ".", "mean", "(", "h", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.nets.aggregators.aggregate_max": [[12, 14], ["torch.max"], "function", ["None"], ["", "def", "aggregate_max", "(", "h", ",", "eig_s", ",", "eig_d", ",", "h_in", ")", ":", "\n", "    ", "return", "torch", ".", "max", "(", "h", ",", "dim", "=", "1", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.nets.aggregators.aggregate_min": [[16, 18], ["torch.min"], "function", ["None"], ["", "def", "aggregate_min", "(", "h", ",", "eig_s", ",", "eig_d", ",", "h_in", ")", ":", "\n", "    ", "return", "torch", ".", "min", "(", "h", ",", "dim", "=", "1", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.nets.aggregators.aggregate_std": [[20, 22], ["torch.sqrt", "aggregators.aggregate_var"], "function", ["home.repos.pwc.inspect_result.Saro00_DGN.dgl.aggregators.aggregate_var"], ["", "def", "aggregate_std", "(", "h", ",", "eig_s", ",", "eig_d", ",", "h_in", ")", ":", "\n", "    ", "return", "torch", ".", "sqrt", "(", "aggregate_var", "(", "h", ",", "eig_s", ",", "eig_d", ",", "h_in", ")", "+", "EPS", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.nets.aggregators.aggregate_var": [[24, 29], ["torch.mean", "torch.mean", "torch.relu"], "function", ["None"], ["", "def", "aggregate_var", "(", "h", ",", "eig_s", ",", "eig_d", ",", "h_in", ")", ":", "\n", "    ", "h_mean_squares", "=", "torch", ".", "mean", "(", "h", "*", "h", ",", "dim", "=", "-", "2", ")", "\n", "h_mean", "=", "torch", ".", "mean", "(", "h", ",", "dim", "=", "-", "2", ")", "\n", "var", "=", "torch", ".", "relu", "(", "h_mean_squares", "-", "h_mean", "*", "h_mean", ")", "\n", "return", "var", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.nets.aggregators.aggregate_sum": [[31, 33], ["torch.sum"], "function", ["None"], ["", "def", "aggregate_sum", "(", "h", ",", "eig_s", ",", "eig_d", ",", "h_in", ")", ":", "\n", "    ", "return", "torch", ".", "sum", "(", "h", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.nets.aggregators.aggregate_dir_av": [[35, 40], ["torch.mul", "torch.sum", "torch.abs", "torch.sum", "torch.abs"], "function", ["None"], ["", "def", "aggregate_dir_av", "(", "h", ",", "eig_s", ",", "eig_d", ",", "h_in", ",", "eig_idx", ")", ":", "\n", "    ", "h_mod", "=", "torch", ".", "mul", "(", "h", ",", "(", "torch", ".", "abs", "(", "eig_s", "[", ":", ",", ":", ",", "eig_idx", "]", "-", "eig_d", "[", ":", ",", ":", ",", "eig_idx", "]", ")", "/", "\n", "(", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "eig_s", "[", ":", ",", ":", ",", "eig_idx", "]", "-", "eig_d", "[", ":", ",", ":", ",", "eig_idx", "]", ")", ",", "keepdim", "=", "True", ",", "\n", "dim", "=", "1", ")", "+", "EPS", ")", ")", ".", "unsqueeze", "(", "-", "1", ")", ")", "\n", "return", "torch", ".", "sum", "(", "h_mod", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.nets.aggregators.aggregate_dir_softmax": [[42, 46], ["torch.mul", "torch.sum", "torch.nn.Softmax", "torch.abs().unsqueeze", "torch.abs"], "function", ["None"], ["", "def", "aggregate_dir_softmax", "(", "h", ",", "eig_s", ",", "eig_d", ",", "h_in", ",", "eig_idx", ",", "alpha", ")", ":", "\n", "    ", "h_mod", "=", "torch", ".", "mul", "(", "h", ",", "torch", ".", "nn", ".", "Softmax", "(", "1", ")", "(", "\n", "alpha", "*", "(", "torch", ".", "abs", "(", "eig_s", "[", ":", ",", ":", ",", "eig_idx", "]", "-", "eig_d", "[", ":", ",", ":", ",", "eig_idx", "]", ")", ")", ".", "unsqueeze", "(", "-", "1", ")", ")", ")", "\n", "return", "torch", ".", "sum", "(", "h_mod", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.nets.aggregators.aggregate_dir_dx": [[48, 53], ["torch.mul", "torch.abs", "torch.sum", "torch.sum", "torch.sum", "torch.abs"], "function", ["None"], ["", "def", "aggregate_dir_dx", "(", "h", ",", "eig_s", ",", "eig_d", ",", "h_in", ",", "eig_idx", ")", ":", "\n", "    ", "eig_w", "=", "(", "(", "eig_s", "[", ":", ",", ":", ",", "eig_idx", "]", "-", "eig_d", "[", ":", ",", ":", ",", "eig_idx", "]", ")", "/", "\n", "(", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "eig_s", "[", ":", ",", ":", ",", "eig_idx", "]", "-", "eig_d", "[", ":", ",", ":", ",", "eig_idx", "]", ")", ",", "keepdim", "=", "True", ",", "dim", "=", "1", ")", "+", "EPS", ")", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "h_mod", "=", "torch", ".", "mul", "(", "h", ",", "eig_w", ")", "\n", "return", "torch", ".", "abs", "(", "torch", ".", "sum", "(", "h_mod", ",", "dim", "=", "1", ")", "-", "torch", ".", "sum", "(", "eig_w", ",", "dim", "=", "1", ")", "*", "h_in", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.nets.aggregators.aggregate_dir_dx_no_abs": [[55, 60], ["torch.mul", "torch.sum", "torch.sum", "torch.sum", "torch.abs"], "function", ["None"], ["", "def", "aggregate_dir_dx_no_abs", "(", "h", ",", "eig_s", ",", "eig_d", ",", "h_in", ",", "eig_idx", ")", ":", "\n", "    ", "eig_w", "=", "(", "(", "eig_s", "[", ":", ",", ":", ",", "eig_idx", "]", "-", "eig_d", "[", ":", ",", ":", ",", "eig_idx", "]", ")", "/", "\n", "(", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "eig_s", "[", ":", ",", ":", ",", "eig_idx", "]", "-", "eig_d", "[", ":", ",", ":", ",", "eig_idx", "]", ")", ",", "keepdim", "=", "True", ",", "dim", "=", "1", ")", "+", "EPS", ")", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "h_mod", "=", "torch", ".", "mul", "(", "h", ",", "eig_w", ")", "\n", "return", "torch", ".", "sum", "(", "h_mod", ",", "dim", "=", "1", ")", "-", "torch", ".", "sum", "(", "eig_w", ",", "dim", "=", "1", ")", "*", "h_in", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.nets.aggregators.aggregate_dir_dx_balanced": [[62, 72], ["torch.mul", "torch.abs", "torch.sum", "torch.relu", "torch.relu", "torch.sum", "torch.sum", "torch.sum", "torch.abs", "torch.abs", "torch.relu", "torch.relu"], "function", ["None"], ["", "def", "aggregate_dir_dx_balanced", "(", "h", ",", "eig_s", ",", "eig_d", ",", "h_in", ",", "eig_idx", ")", ":", "\n", "    ", "eig_front", "=", "(", "torch", ".", "relu", "(", "eig_s", "[", ":", ",", ":", ",", "eig_idx", "]", "-", "eig_d", "[", ":", ",", ":", ",", "eig_idx", "]", ")", "/", "\n", "(", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "torch", ".", "relu", "(", "eig_s", "[", ":", ",", ":", ",", "eig_idx", "]", "-", "eig_d", "[", ":", ",", ":", ",", "eig_idx", "]", ")", ")", ",", "keepdim", "=", "True", ",", "\n", "dim", "=", "1", ")", "+", "EPS", ")", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "eig_back", "=", "(", "torch", ".", "relu", "(", "eig_d", "[", ":", ",", ":", ",", "eig_idx", "]", "-", "eig_s", "[", ":", ",", ":", ",", "eig_idx", "]", ")", "/", "\n", "(", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "-", "torch", ".", "relu", "(", "eig_d", "[", ":", ",", ":", ",", "eig_idx", "]", "-", "eig_s", "[", ":", ",", ":", ",", "eig_idx", "]", ")", ")", ",", "keepdim", "=", "True", ",", "\n", "dim", "=", "1", ")", "+", "EPS", ")", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "eig_w", "=", "(", "eig_front", "+", "eig_back", ")", "/", "2", "\n", "h_mod", "=", "torch", ".", "mul", "(", "h", ",", "eig_w", ")", "\n", "return", "torch", ".", "abs", "(", "torch", ".", "sum", "(", "h_mod", ",", "dim", "=", "1", ")", "-", "torch", ".", "sum", "(", "eig_w", ",", "dim", "=", "1", ")", "*", "h_in", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.nets.layers.FCLayer.__init__": [[72, 93], ["torch.Module.__init__", "locals", "torch.Linear().to", "torch.Linear().to", "layers.get_activation", "layers.FCLayer.reset_parameters", "torch.Dropout", "torch.Dropout", "torch.BatchNorm1d().to", "torch.BatchNorm1d().to", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.Saro00_DGN.dgl.dgn_layer.DGNLayer.__init__", "home.repos.pwc.inspect_result.Saro00_DGN.models.layers.get_activation", "home.repos.pwc.inspect_result.Saro00_DGN.models.layers.FCLayer.reset_parameters"], ["def", "__init__", "(", "self", ",", "in_size", ",", "out_size", ",", "activation", "=", "'relu'", ",", "dropout", "=", "0.", ",", "b_norm", "=", "False", ",", "bias", "=", "True", ",", "init_fn", "=", "None", ",", "\n", "device", "=", "'cpu'", ")", ":", "\n", "        ", "super", "(", "FCLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "__params", "=", "locals", "(", ")", "\n", "del", "self", ".", "__params", "[", "'__class__'", "]", "\n", "del", "self", ".", "__params", "[", "'self'", "]", "\n", "self", ".", "in_size", "=", "in_size", "\n", "self", ".", "out_size", "=", "out_size", "\n", "self", ".", "bias", "=", "bias", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "in_size", ",", "out_size", ",", "bias", "=", "bias", ")", ".", "to", "(", "device", ")", "\n", "self", ".", "dropout", "=", "None", "\n", "self", ".", "b_norm", "=", "None", "\n", "if", "dropout", ":", "\n", "            ", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout", ",", "device", "=", "device", ")", "\n", "", "if", "b_norm", ":", "\n", "            ", "self", ".", "b_norm", "=", "nn", ".", "BatchNorm1d", "(", "out_size", ")", ".", "to", "(", "device", ")", "\n", "", "self", ".", "activation", "=", "get_activation", "(", "activation", ")", "\n", "self", ".", "init_fn", "=", "nn", ".", "init", ".", "xavier_uniform_", "\n", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.nets.layers.FCLayer.reset_parameters": [[94, 100], ["init_fn", "layers.FCLayer.linear.bias.data.zero_"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ",", "init_fn", "=", "None", ")", ":", "\n", "        ", "init_fn", "=", "init_fn", "or", "self", ".", "init_fn", "\n", "if", "init_fn", "is", "not", "None", ":", "\n", "            ", "init_fn", "(", "self", ".", "linear", ".", "weight", ",", "1", "/", "self", ".", "in_size", ")", "\n", "", "if", "self", ".", "bias", ":", "\n", "            ", "self", ".", "linear", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.nets.layers.FCLayer.forward": [[101, 113], ["layers.FCLayer.linear", "layers.FCLayer.activation", "layers.FCLayer.dropout", "layers.FCLayer.b_norm().transpose", "layers.FCLayer.b_norm", "layers.FCLayer.b_norm", "layers.FCLayer.transpose"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "h", "=", "self", ".", "linear", "(", "x", ")", "\n", "if", "self", ".", "activation", "is", "not", "None", ":", "\n", "            ", "h", "=", "self", ".", "activation", "(", "h", ")", "\n", "", "if", "self", ".", "dropout", "is", "not", "None", ":", "\n", "            ", "h", "=", "self", ".", "dropout", "(", "h", ")", "\n", "", "if", "self", ".", "b_norm", "is", "not", "None", ":", "\n", "            ", "if", "h", ".", "shape", "[", "1", "]", "!=", "self", ".", "out_size", ":", "\n", "                ", "h", "=", "self", ".", "b_norm", "(", "h", ".", "transpose", "(", "1", ",", "2", ")", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "", "else", ":", "\n", "                ", "h", "=", "self", ".", "b_norm", "(", "h", ")", "\n", "", "", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.nets.layers.FCLayer.__repr__": [[114, 118], ["str", "str"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "' ('", "+", "str", "(", "self", ".", "in_size", ")", "+", "' -> '", "+", "str", "(", "self", ".", "out_size", ")", "+", "')'", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.nets.layers.MLP.__init__": [[125, 145], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "layers.MLP.fully_connected.append", "layers.MLP.fully_connected.append", "range", "layers.MLP.fully_connected.append", "layers.FCLayer", "layers.FCLayer", "layers.MLP.fully_connected.append", "layers.FCLayer", "layers.FCLayer"], "methods", ["home.repos.pwc.inspect_result.Saro00_DGN.dgl.dgn_layer.DGNLayer.__init__"], ["def", "__init__", "(", "self", ",", "in_size", ",", "hidden_size", ",", "out_size", ",", "layers", ",", "mid_activation", "=", "'relu'", ",", "last_activation", "=", "'none'", ",", "\n", "dropout", "=", "0.", ",", "mid_b_norm", "=", "False", ",", "last_b_norm", "=", "False", ",", "device", "=", "'cpu'", ")", ":", "\n", "        ", "super", "(", "MLP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "in_size", "=", "in_size", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "out_size", "=", "out_size", "\n", "\n", "self", ".", "fully_connected", "=", "nn", ".", "ModuleList", "(", ")", "\n", "if", "layers", "<=", "1", ":", "\n", "            ", "self", ".", "fully_connected", ".", "append", "(", "FCLayer", "(", "in_size", ",", "out_size", ",", "activation", "=", "last_activation", ",", "b_norm", "=", "last_b_norm", ",", "\n", "device", "=", "device", ",", "dropout", "=", "dropout", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "fully_connected", ".", "append", "(", "FCLayer", "(", "in_size", ",", "hidden_size", ",", "activation", "=", "mid_activation", ",", "b_norm", "=", "mid_b_norm", ",", "\n", "device", "=", "device", ",", "dropout", "=", "dropout", ")", ")", "\n", "for", "_", "in", "range", "(", "layers", "-", "2", ")", ":", "\n", "                ", "self", ".", "fully_connected", ".", "append", "(", "FCLayer", "(", "hidden_size", ",", "hidden_size", ",", "activation", "=", "mid_activation", ",", "\n", "b_norm", "=", "mid_b_norm", ",", "device", "=", "device", ",", "dropout", "=", "dropout", ")", ")", "\n", "", "self", ".", "fully_connected", ".", "append", "(", "FCLayer", "(", "hidden_size", ",", "out_size", ",", "activation", "=", "last_activation", ",", "b_norm", "=", "last_b_norm", ",", "\n", "device", "=", "device", ",", "dropout", "=", "dropout", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.nets.layers.MLP.forward": [[146, 150], ["fc"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "for", "fc", "in", "self", ".", "fully_connected", ":", "\n", "            ", "x", "=", "fc", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.nets.layers.MLP.__repr__": [[151, 155], ["str", "str"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "' ('", "+", "str", "(", "self", ".", "in_size", ")", "+", "' -> '", "+", "str", "(", "self", ".", "out_size", ")", "+", "')'", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Saro00_DGN.nets.layers.get_activation": [[7, 19], ["callable", "isinstance", "activation.lower", "len", "vars", "activation.lower", "x.lower"], "function", ["None"], ["def", "get_activation", "(", "activation", ")", ":", "\n", "    ", "\"\"\" returns the activation function represented by the input string \"\"\"", "\n", "if", "activation", "and", "callable", "(", "activation", ")", ":", "\n", "# activation is already a function", "\n", "        ", "return", "activation", "\n", "# search in SUPPORTED_ACTIVATION_MAP a torch.nn.modules.activation", "\n", "", "activation", "=", "[", "x", "for", "x", "in", "SUPPORTED_ACTIVATION_MAP", "if", "activation", ".", "lower", "(", ")", "==", "x", ".", "lower", "(", ")", "]", "\n", "assert", "len", "(", "activation", ")", "==", "1", "and", "isinstance", "(", "activation", "[", "0", "]", ",", "str", ")", ",", "'Unhandled activation function'", "\n", "activation", "=", "activation", "[", "0", "]", "\n", "if", "activation", ".", "lower", "(", ")", "==", "'none'", ":", "\n", "        ", "return", "None", "\n", "", "return", "vars", "(", "torch", ".", "nn", ".", "modules", ".", "activation", ")", "[", "activation", "]", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.molecules_graph_regression.dgn_net.DGNNet.__init__": [[9, 56], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "torch.Embedding", "torch.Embedding", "torch.ModuleList", "torch.ModuleList", "dgn_net.DGNNet.layers.append", "torch.Linear", "torch.Linear", "torch.Embedding", "torch.Embedding", "nets.mlp_readout_layer.MLPReadout", "nets.mlp_readout_layer.MLPReadout", "nets.dgn_layer.DGNLayer", "nets.dgn_layer.DGNLayer", "range"], "methods", ["home.repos.pwc.inspect_result.Saro00_DGN.dgl.dgn_layer.DGNLayer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "net_params", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "num_atom_type", "=", "net_params", "[", "'num_atom_type'", "]", "\n", "num_bond_type", "=", "net_params", "[", "'num_bond_type'", "]", "\n", "hidden_dim", "=", "net_params", "[", "'hidden_dim'", "]", "\n", "out_dim", "=", "net_params", "[", "'out_dim'", "]", "\n", "in_feat_dropout", "=", "net_params", "[", "'in_feat_dropout'", "]", "\n", "dropout", "=", "net_params", "[", "'dropout'", "]", "\n", "n_layers", "=", "net_params", "[", "'L'", "]", "\n", "self", ".", "type_net", "=", "net_params", "[", "'type_net'", "]", "\n", "self", ".", "pos_enc_dim", "=", "net_params", "[", "'pos_enc_dim'", "]", "\n", "if", "self", ".", "pos_enc_dim", ">", "0", ":", "\n", "            ", "self", ".", "embedding_pos_enc", "=", "nn", ".", "Linear", "(", "self", ".", "pos_enc_dim", ",", "hidden_dim", ")", "\n", "", "self", ".", "readout", "=", "net_params", "[", "'readout'", "]", "\n", "self", ".", "graph_norm", "=", "net_params", "[", "'graph_norm'", "]", "\n", "self", ".", "batch_norm", "=", "net_params", "[", "'batch_norm'", "]", "\n", "self", ".", "aggregators", "=", "net_params", "[", "'aggregators'", "]", "\n", "self", ".", "scalers", "=", "net_params", "[", "'scalers'", "]", "\n", "self", ".", "avg_d", "=", "net_params", "[", "'avg_d'", "]", "\n", "self", ".", "residual", "=", "net_params", "[", "'residual'", "]", "\n", "self", ".", "edge_feat", "=", "net_params", "[", "'edge_feat'", "]", "\n", "edge_dim", "=", "net_params", "[", "'edge_dim'", "]", "\n", "pretrans_layers", "=", "net_params", "[", "'pretrans_layers'", "]", "\n", "posttrans_layers", "=", "net_params", "[", "'posttrans_layers'", "]", "\n", "self", ".", "device", "=", "net_params", "[", "'device'", "]", "\n", "\n", "self", ".", "in_feat_dropout", "=", "nn", ".", "Dropout", "(", "in_feat_dropout", ")", "\n", "self", ".", "embedding_h", "=", "nn", ".", "Embedding", "(", "num_atom_type", ",", "hidden_dim", ")", "\n", "if", "self", ".", "edge_feat", ":", "\n", "            ", "self", ".", "embedding_e", "=", "nn", ".", "Embedding", "(", "num_bond_type", ",", "edge_dim", ")", "\n", "\n", "", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", "\n", "[", "DGNLayer", "(", "in_dim", "=", "hidden_dim", ",", "out_dim", "=", "hidden_dim", ",", "dropout", "=", "dropout", ",", "graph_norm", "=", "self", ".", "graph_norm", ",", "\n", "batch_norm", "=", "self", ".", "batch_norm", ",", "residual", "=", "self", ".", "residual", ",", "aggregators", "=", "self", ".", "aggregators", ",", "\n", "scalers", "=", "self", ".", "scalers", ",", "avg_d", "=", "self", ".", "avg_d", ",", "type_net", "=", "self", ".", "type_net", ",", "edge_features", "=", "self", ".", "edge_feat", ",", "\n", "edge_dim", "=", "edge_dim", ",", "pretrans_layers", "=", "pretrans_layers", ",", "posttrans_layers", "=", "posttrans_layers", ")", ".", "model", "for", "_", "\n", "in", "range", "(", "n_layers", "-", "1", ")", "]", ")", "\n", "self", ".", "layers", ".", "append", "(", "DGNLayer", "(", "in_dim", "=", "hidden_dim", ",", "out_dim", "=", "out_dim", ",", "dropout", "=", "dropout", ",", "\n", "graph_norm", "=", "self", ".", "graph_norm", ",", "batch_norm", "=", "self", ".", "batch_norm", ",", "\n", "residual", "=", "self", ".", "residual", ",", "aggregators", "=", "self", ".", "aggregators", ",", "scalers", "=", "self", ".", "scalers", ",", "\n", "avg_d", "=", "self", ".", "avg_d", ",", "type_net", "=", "self", ".", "type_net", ",", "edge_features", "=", "self", ".", "edge_feat", ",", "edge_dim", "=", "edge_dim", ",", "\n", "pretrans_layers", "=", "pretrans_layers", ",", "posttrans_layers", "=", "posttrans_layers", ")", ".", "model", ")", "\n", "\n", "if", "self", ".", "readout", "==", "\"directional\"", "or", "self", ".", "readout", "==", "\"directional_abs\"", ":", "\n", "            ", "self", ".", "MLP_layer", "=", "MLPReadout", "(", "2", "*", "out_dim", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "MLP_layer", "=", "MLPReadout", "(", "out_dim", ",", "1", ")", "# 1 out dim since regression problem", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.molecules_graph_regression.dgn_net.DGNNet.forward": [[57, 89], ["dgn_net.DGNNet.embedding_h", "dgn_net.DGNNet.in_feat_dropout", "enumerate", "dgn_net.DGNNet.MLP_layer", "dgn_net.DGNNet.embedding_pos_enc", "dgn_net.DGNNet.embedding_e", "conv", "dgl.sum_nodes", "g.ndata[].to", "dgl.max_nodes", "dgl.mean_nodes", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "dgl.mean_nodes", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "dgl.mean_nodes", "dgl.mean_nodes", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "[].to", "[].to", "[].to", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "dgl.mean_nodes", "[].to", "dgl.mean_nodes"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "g", ",", "h", ",", "e", ",", "snorm_n", ",", "snorm_e", ")", ":", "\n", "        ", "h", "=", "self", ".", "embedding_h", "(", "h", ")", "\n", "h", "=", "self", ".", "in_feat_dropout", "(", "h", ")", "\n", "if", "self", ".", "pos_enc_dim", ">", "0", ":", "\n", "            ", "h_pos_enc", "=", "self", ".", "embedding_pos_enc", "(", "g", ".", "ndata", "[", "'pos_enc'", "]", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "h", "=", "h", "+", "h_pos_enc", "\n", "", "if", "self", ".", "edge_feat", ":", "\n", "            ", "e", "=", "self", ".", "embedding_e", "(", "e", ")", "\n", "\n", "", "for", "i", ",", "conv", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "            ", "h_t", "=", "conv", "(", "g", ",", "h", ",", "e", ",", "snorm_n", ")", "\n", "h", "=", "h_t", "\n", "", "g", ".", "ndata", "[", "'h'", "]", "=", "h", "\n", "\n", "if", "self", ".", "readout", "==", "\"sum\"", ":", "\n", "            ", "hg", "=", "dgl", ".", "sum_nodes", "(", "g", ",", "'h'", ")", "\n", "", "elif", "self", ".", "readout", "==", "\"max\"", ":", "\n", "            ", "hg", "=", "dgl", ".", "max_nodes", "(", "g", ",", "'h'", ")", "\n", "", "elif", "self", ".", "readout", "==", "\"mean\"", ":", "\n", "            ", "hg", "=", "dgl", ".", "mean_nodes", "(", "g", ",", "'h'", ")", "\n", "", "elif", "self", ".", "readout", "==", "\"directional_abs\"", ":", "\n", "            ", "g", ".", "ndata", "[", "'dir'", "]", "=", "h", "*", "torch", ".", "abs", "(", "g", ".", "ndata", "[", "'eig'", "]", "[", ":", ",", "1", ":", "2", "]", ".", "to", "(", "self", ".", "device", ")", ")", "/", "torch", ".", "sum", "(", "\n", "torch", ".", "abs", "(", "g", ".", "ndata", "[", "'eig'", "]", "[", ":", ",", "1", ":", "2", "]", ".", "to", "(", "self", ".", "device", ")", ")", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "hg", "=", "torch", ".", "cat", "(", "[", "dgl", ".", "mean_nodes", "(", "g", ",", "'dir'", ")", ",", "dgl", ".", "mean_nodes", "(", "g", ",", "'h'", ")", "]", ",", "dim", "=", "1", ")", "\n", "", "elif", "self", ".", "readout", "==", "\"directional\"", ":", "\n", "            ", "g", ".", "ndata", "[", "'dir'", "]", "=", "h", "*", "g", ".", "ndata", "[", "'eig'", "]", "[", ":", ",", "1", ":", "2", "]", ".", "to", "(", "self", ".", "device", ")", "/", "torch", ".", "sum", "(", "\n", "torch", ".", "abs", "(", "g", ".", "ndata", "[", "'eig'", "]", "[", ":", ",", "1", ":", "2", "]", ".", "to", "(", "self", ".", "device", ")", ")", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "hg", "=", "torch", ".", "cat", "(", "[", "torch", ".", "abs", "(", "dgl", ".", "mean_nodes", "(", "g", ",", "'dir'", ")", ")", ",", "dgl", ".", "mean_nodes", "(", "g", ",", "'h'", ")", "]", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "hg", "=", "dgl", ".", "mean_nodes", "(", "g", ",", "'h'", ")", "# default readout is mean nodes", "\n", "\n", "", "return", "self", ".", "MLP_layer", "(", "hg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.molecules_graph_regression.dgn_net.DGNNet.loss": [[90, 93], ["torch.L1Loss", "torch.L1Loss"], "methods", ["None"], ["", "def", "loss", "(", "self", ",", "scores", ",", "targets", ")", ":", "\n", "        ", "loss", "=", "nn", ".", "L1Loss", "(", ")", "(", "scores", ",", "targets", ")", "\n", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Saro00_DGN.HIV_graph_classification.dgn_net.DGNNet.__init__": [[14, 59], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "ogb.graphproppred.mol_encoder.AtomEncoder", "torch.ModuleList", "torch.ModuleList", "dgn_net.DGNNet.layers.append", "nets.mlp_readout_layer.MLPReadout", "torch.Linear", "torch.Linear", "ogb.graphproppred.mol_encoder.BondEncoder", "nets.dgn_layer.DGNLayer", "nets.dgn_layer.DGNLayer", "range"], "methods", ["home.repos.pwc.inspect_result.Saro00_DGN.dgl.dgn_layer.DGNLayer.__init__"], ["out_dim", "=", "net_params", "[", "'out_dim'", "]", "\n", "in_feat_dropout", "=", "net_params", "[", "'in_feat_dropout'", "]", "\n", "dropout", "=", "net_params", "[", "'dropout'", "]", "\n", "n_layers", "=", "net_params", "[", "'L'", "]", "\n", "self", ".", "type_net", "=", "net_params", "[", "'type_net'", "]", "\n", "self", ".", "pos_enc_dim", "=", "net_params", "[", "'pos_enc_dim'", "]", "\n", "if", "self", ".", "pos_enc_dim", ">", "0", ":", "\n", "            ", "self", ".", "embedding_pos_enc", "=", "nn", ".", "Linear", "(", "self", ".", "pos_enc_dim", ",", "hidden_dim", ")", "\n", "", "self", ".", "readout", "=", "net_params", "[", "'readout'", "]", "\n", "self", ".", "graph_norm", "=", "net_params", "[", "'graph_norm'", "]", "\n", "self", ".", "batch_norm", "=", "net_params", "[", "'batch_norm'", "]", "\n", "self", ".", "aggregators", "=", "net_params", "[", "'aggregators'", "]", "\n", "self", ".", "scalers", "=", "net_params", "[", "'scalers'", "]", "\n", "self", ".", "avg_d", "=", "net_params", "[", "'avg_d'", "]", "\n", "self", ".", "residual", "=", "net_params", "[", "'residual'", "]", "\n", "self", ".", "edge_feat", "=", "net_params", "[", "'edge_feat'", "]", "\n", "edge_dim", "=", "net_params", "[", "'edge_dim'", "]", "\n", "pretrans_layers", "=", "net_params", "[", "'pretrans_layers'", "]", "\n", "posttrans_layers", "=", "net_params", "[", "'posttrans_layers'", "]", "\n", "self", ".", "device", "=", "net_params", "[", "'device'", "]", "\n", "\n", "self", ".", "in_feat_dropout", "=", "nn", ".", "Dropout", "(", "in_feat_dropout", ")", "\n", "self", ".", "embedding_h", "=", "nn", ".", "Embedding", "(", "num_atom_type", ",", "hidden_dim", ")", "\n", "if", "self", ".", "edge_feat", ":", "\n", "            ", "self", ".", "embedding_e", "=", "nn", ".", "Embedding", "(", "num_bond_type", ",", "edge_dim", ")", "\n", "\n", "", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", "\n", "[", "DGNLayer", "(", "in_dim", "=", "hidden_dim", ",", "out_dim", "=", "hidden_dim", ",", "dropout", "=", "dropout", ",", "graph_norm", "=", "self", ".", "graph_norm", ",", "\n", "batch_norm", "=", "self", ".", "batch_norm", ",", "residual", "=", "self", ".", "residual", ",", "aggregators", "=", "self", ".", "aggregators", ",", "\n", "scalers", "=", "self", ".", "scalers", ",", "avg_d", "=", "self", ".", "avg_d", ",", "type_net", "=", "self", ".", "type_net", ",", "edge_features", "=", "self", ".", "edge_feat", ",", "\n", "edge_dim", "=", "edge_dim", ",", "pretrans_layers", "=", "pretrans_layers", ",", "posttrans_layers", "=", "posttrans_layers", ")", ".", "model", "for", "_", "\n", "in", "range", "(", "n_layers", "-", "1", ")", "]", ")", "\n", "self", ".", "layers", ".", "append", "(", "DGNLayer", "(", "in_dim", "=", "hidden_dim", ",", "out_dim", "=", "out_dim", ",", "dropout", "=", "dropout", ",", "\n", "graph_norm", "=", "self", ".", "graph_norm", ",", "batch_norm", "=", "self", ".", "batch_norm", ",", "\n", "residual", "=", "self", ".", "residual", ",", "aggregators", "=", "self", ".", "aggregators", ",", "scalers", "=", "self", ".", "scalers", ",", "\n", "avg_d", "=", "self", ".", "avg_d", ",", "type_net", "=", "self", ".", "type_net", ",", "edge_features", "=", "self", ".", "edge_feat", ",", "edge_dim", "=", "edge_dim", ",", "\n", "pretrans_layers", "=", "pretrans_layers", ",", "posttrans_layers", "=", "posttrans_layers", ")", ".", "model", ")", "\n", "\n", "if", "self", ".", "readout", "==", "\"directional\"", "or", "self", ".", "readout", "==", "\"directional_abs\"", ":", "\n", "            ", "self", ".", "MLP_layer", "=", "MLPReadout", "(", "2", "*", "out_dim", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "MLP_layer", "=", "MLPReadout", "(", "out_dim", ",", "1", ")", "# 1 out dim since regression problem", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "g", ",", "h", ",", "e", ",", "snorm_n", ",", "snorm_e", ")", ":", "\n", "        ", "h", "=", "self", ".", "embedding_h", "(", "h", ")", "\n", "h", "=", "self", ".", "in_feat_dropout", "(", "h", ")", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.HIV_graph_classification.dgn_net.DGNNet.forward": [[61, 86], ["dgn_net.DGNNet.embedding_h", "dgn_net.DGNNet.in_feat_dropout", "enumerate", "dgn_net.DGNNet.MLP_layer", "dgn_net.DGNNet.embedding_pos_enc", "dgn_net.DGNNet.embedding_e", "conv", "dgl.sum_nodes", "g.ndata[].to", "dgl.max_nodes", "dgl.mean_nodes", "dgl.mean_nodes"], "methods", ["None"], ["            ", "h_pos_enc", "=", "self", ".", "embedding_pos_enc", "(", "g", ".", "ndata", "[", "'pos_enc'", "]", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "h", "=", "h", "+", "h_pos_enc", "\n", "", "if", "self", ".", "edge_feat", ":", "\n", "            ", "e", "=", "self", ".", "embedding_e", "(", "e", ")", "\n", "\n", "", "for", "i", ",", "conv", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "            ", "h_t", "=", "conv", "(", "g", ",", "h", ",", "e", ",", "snorm_n", ")", "\n", "h", "=", "h_t", "\n", "", "g", ".", "ndata", "[", "'h'", "]", "=", "h", "\n", "\n", "if", "self", ".", "readout", "==", "\"sum\"", ":", "\n", "            ", "hg", "=", "dgl", ".", "sum_nodes", "(", "g", ",", "'h'", ")", "\n", "", "elif", "self", ".", "readout", "==", "\"max\"", ":", "\n", "            ", "hg", "=", "dgl", ".", "max_nodes", "(", "g", ",", "'h'", ")", "\n", "", "elif", "self", ".", "readout", "==", "\"mean\"", ":", "\n", "            ", "hg", "=", "dgl", ".", "mean_nodes", "(", "g", ",", "'h'", ")", "\n", "", "elif", "self", ".", "readout", "==", "\"directional_abs\"", ":", "\n", "            ", "g", ".", "ndata", "[", "'dir'", "]", "=", "h", "*", "torch", ".", "abs", "(", "g", ".", "ndata", "[", "'eig'", "]", "[", ":", ",", "1", ":", "2", "]", ".", "to", "(", "self", ".", "device", ")", ")", "/", "torch", ".", "sum", "(", "\n", "torch", ".", "abs", "(", "g", ".", "ndata", "[", "'eig'", "]", "[", ":", ",", "1", ":", "2", "]", ".", "to", "(", "self", ".", "device", ")", ")", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "hg", "=", "torch", ".", "cat", "(", "[", "dgl", ".", "mean_nodes", "(", "g", ",", "'dir'", ")", ",", "dgl", ".", "mean_nodes", "(", "g", ",", "'h'", ")", "]", ",", "dim", "=", "1", ")", "\n", "", "elif", "self", ".", "readout", "==", "\"directional\"", ":", "\n", "            ", "g", ".", "ndata", "[", "'dir'", "]", "=", "h", "*", "g", ".", "ndata", "[", "'eig'", "]", "[", ":", ",", "1", ":", "2", "]", ".", "to", "(", "self", ".", "device", ")", "/", "torch", ".", "sum", "(", "\n", "torch", ".", "abs", "(", "g", ".", "ndata", "[", "'eig'", "]", "[", ":", ",", "1", ":", "2", "]", ".", "to", "(", "self", ".", "device", ")", ")", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "hg", "=", "torch", ".", "cat", "(", "[", "torch", ".", "abs", "(", "dgl", ".", "mean_nodes", "(", "g", ",", "'dir'", ")", ")", ",", "dgl", ".", "mean_nodes", "(", "g", ",", "'h'", ")", "]", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "hg", "=", "dgl", ".", "mean_nodes", "(", "g", ",", "'h'", ")", "# default readout is mean nodes", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.HIV_graph_classification.dgn_net.DGNNet.loss": [[87, 90], ["torch.nn.BCEWithLogitsLoss", "torch.nn.BCEWithLogitsLoss", "torch.nn.BCEWithLogitsLoss", "torch.nn.BCEWithLogitsLoss", "labels.type().to().unsqueeze", "labels.type().to", "labels.type"], "methods", ["None"], ["\n", "", "return", "self", ".", "MLP_layer", "(", "hg", ")", "\n", "\n", "", "def", "loss", "(", "self", ",", "scores", ",", "targets", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.SBMs_node_classification.dgn_net.DGNNet.__init__": [[9, 53], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Dropout", "torch.Dropout", "torch.ModuleList", "torch.ModuleList", "dgn_net.DGNNet.layers.append", "nets.mlp_readout_layer.MLPReadout", "torch.Linear", "torch.Linear", "nets.dgn_layer.DGNLayer", "nets.dgn_layer.DGNLayer", "range"], "methods", ["home.repos.pwc.inspect_result.Saro00_DGN.dgl.dgn_layer.DGNLayer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "net_params", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "num_atom_type", "=", "net_params", "[", "'num_atom_type'", "]", "\n", "num_bond_type", "=", "net_params", "[", "'num_bond_type'", "]", "\n", "hidden_dim", "=", "net_params", "[", "'hidden_dim'", "]", "\n", "out_dim", "=", "net_params", "[", "'out_dim'", "]", "\n", "in_feat_dropout", "=", "net_params", "[", "'in_feat_dropout'", "]", "\n", "dropout", "=", "net_params", "[", "'dropout'", "]", "\n", "n_layers", "=", "net_params", "[", "'L'", "]", "\n", "self", ".", "type_net", "=", "net_params", "[", "'type_net'", "]", "\n", "self", ".", "pos_enc_dim", "=", "net_params", "[", "'pos_enc_dim'", "]", "\n", "if", "self", ".", "pos_enc_dim", ">", "0", ":", "\n", "            ", "self", ".", "embedding_pos_enc", "=", "nn", ".", "Linear", "(", "self", ".", "pos_enc_dim", ",", "hidden_dim", ")", "\n", "", "self", ".", "readout", "=", "net_params", "[", "'readout'", "]", "\n", "self", ".", "graph_norm", "=", "net_params", "[", "'graph_norm'", "]", "\n", "self", ".", "batch_norm", "=", "net_params", "[", "'batch_norm'", "]", "\n", "self", ".", "aggregators", "=", "net_params", "[", "'aggregators'", "]", "\n", "self", ".", "scalers", "=", "net_params", "[", "'scalers'", "]", "\n", "self", ".", "avg_d", "=", "net_params", "[", "'avg_d'", "]", "\n", "self", ".", "residual", "=", "net_params", "[", "'residual'", "]", "\n", "self", ".", "edge_feat", "=", "net_params", "[", "'edge_feat'", "]", "\n", "edge_dim", "=", "net_params", "[", "'edge_dim'", "]", "\n", "pretrans_layers", "=", "net_params", "[", "'pretrans_layers'", "]", "\n", "posttrans_layers", "=", "net_params", "[", "'posttrans_layers'", "]", "\n", "self", ".", "device", "=", "net_params", "[", "'device'", "]", "\n", "\n", "self", ".", "in_feat_dropout", "=", "nn", ".", "Dropout", "(", "in_feat_dropout", ")", "\n", "self", ".", "embedding_h", "=", "nn", ".", "Embedding", "(", "num_atom_type", ",", "hidden_dim", ")", "\n", "if", "self", ".", "edge_feat", ":", "\n", "            ", "self", ".", "embedding_e", "=", "nn", ".", "Embedding", "(", "num_bond_type", ",", "edge_dim", ")", "\n", "\n", "", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", "\n", "[", "DGNLayer", "(", "in_dim", "=", "hidden_dim", ",", "out_dim", "=", "hidden_dim", ",", "dropout", "=", "dropout", ",", "graph_norm", "=", "self", ".", "graph_norm", ",", "\n", "batch_norm", "=", "self", ".", "batch_norm", ",", "residual", "=", "self", ".", "residual", ",", "aggregators", "=", "self", ".", "aggregators", ",", "\n", "scalers", "=", "self", ".", "scalers", ",", "avg_d", "=", "self", ".", "avg_d", ",", "type_net", "=", "self", ".", "type_net", ",", "edge_features", "=", "self", ".", "edge_feat", ",", "\n", "edge_dim", "=", "edge_dim", ",", "pretrans_layers", "=", "pretrans_layers", ",", "posttrans_layers", "=", "posttrans_layers", ")", ".", "model", "for", "_", "\n", "in", "range", "(", "n_layers", "-", "1", ")", "]", ")", "\n", "self", ".", "layers", ".", "append", "(", "DGNLayer", "(", "in_dim", "=", "hidden_dim", ",", "out_dim", "=", "out_dim", ",", "dropout", "=", "dropout", ",", "\n", "graph_norm", "=", "self", ".", "graph_norm", ",", "batch_norm", "=", "self", ".", "batch_norm", ",", "\n", "residual", "=", "self", ".", "residual", ",", "aggregators", "=", "self", ".", "aggregators", ",", "scalers", "=", "self", ".", "scalers", ",", "\n", "avg_d", "=", "self", ".", "avg_d", ",", "type_net", "=", "self", ".", "type_net", ",", "edge_features", "=", "self", ".", "edge_feat", ",", "edge_dim", "=", "edge_dim", ",", "\n", "pretrans_layers", "=", "pretrans_layers", ",", "posttrans_layers", "=", "posttrans_layers", ")", ".", "model", ")", "\n", "\n", "if", "self", ".", "readout", "==", "\"directional\"", "or", "self", ".", "readout", "==", "\"directional_abs\"", ":", "\n", "            ", "self", ".", "MLP_layer", "=", "MLPReadout", "(", "2", "*", "out_dim", ",", "1", ")", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.SBMs_node_classification.dgn_net.DGNNet.forward": [[54, 66], ["dgn_net.DGNNet.embedding_h", "dgn_net.DGNNet.in_feat_dropout", "enumerate", "dgn_net.DGNNet.MLP_layer", "dgn_net.DGNNet.embedding_pos_enc", "conv", "g.ndata[].to"], "methods", ["None"], ["", "else", ":", "\n", "            ", "self", ".", "MLP_layer", "=", "MLPReadout", "(", "out_dim", ",", "1", ")", "# 1 out dim since regression problem", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "g", ",", "h", ",", "e", ",", "snorm_n", ",", "snorm_e", ")", ":", "\n", "        ", "h", "=", "self", ".", "embedding_h", "(", "h", ")", "\n", "h", "=", "self", ".", "in_feat_dropout", "(", "h", ")", "\n", "if", "self", ".", "pos_enc_dim", ">", "0", ":", "\n", "            ", "h_pos_enc", "=", "self", ".", "embedding_pos_enc", "(", "g", ".", "ndata", "[", "'pos_enc'", "]", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "h", "=", "h", "+", "h_pos_enc", "\n", "", "if", "self", ".", "edge_feat", ":", "\n", "            ", "e", "=", "self", ".", "embedding_e", "(", "e", ")", "\n", "\n", "", "for", "i", ",", "conv", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.SBMs_node_classification.dgn_net.DGNNet.loss": [[67, 82], ["label.size", "torch.bincount", "torch.bincount", "torch.bincount", "torch.bincount", "label_count[].squeeze", "torch.zeros().long().to", "torch.zeros().long().to", "torch.zeros().long().to", "torch.zeros().long().to", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss.", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "label_count[].squeeze.nonzero", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["            ", "h_t", "=", "conv", "(", "g", ",", "h", ",", "e", ",", "snorm_n", ")", "\n", "h", "=", "h_t", "\n", "", "g", ".", "ndata", "[", "'h'", "]", "=", "h", "\n", "\n", "if", "self", ".", "readout", "==", "\"sum\"", ":", "\n", "            ", "hg", "=", "dgl", ".", "sum_nodes", "(", "g", ",", "'h'", ")", "\n", "", "elif", "self", ".", "readout", "==", "\"max\"", ":", "\n", "            ", "hg", "=", "dgl", ".", "max_nodes", "(", "g", ",", "'h'", ")", "\n", "", "elif", "self", ".", "readout", "==", "\"mean\"", ":", "\n", "            ", "hg", "=", "dgl", ".", "mean_nodes", "(", "g", ",", "'h'", ")", "\n", "", "elif", "self", ".", "readout", "==", "\"directional_abs\"", ":", "\n", "            ", "g", ".", "ndata", "[", "'dir'", "]", "=", "h", "*", "torch", ".", "abs", "(", "g", ".", "ndata", "[", "'eig'", "]", "[", ":", ",", "1", ":", "2", "]", ".", "to", "(", "self", ".", "device", ")", ")", "/", "torch", ".", "sum", "(", "\n", "torch", ".", "abs", "(", "g", ".", "ndata", "[", "'eig'", "]", "[", ":", ",", "1", ":", "2", "]", ".", "to", "(", "self", ".", "device", ")", ")", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "hg", "=", "torch", ".", "cat", "(", "[", "dgl", ".", "mean_nodes", "(", "g", ",", "'dir'", ")", ",", "dgl", ".", "mean_nodes", "(", "g", ",", "'h'", ")", "]", ",", "dim", "=", "1", ")", "\n", "", "elif", "self", ".", "readout", "==", "\"directional\"", ":", "\n", "            ", "g", ".", "ndata", "[", "'dir'", "]", "=", "h", "*", "g", ".", "ndata", "[", "'eig'", "]", "[", ":", ",", "1", ":", "2", "]", ".", "to", "(", "self", ".", "device", ")", "/", "torch", ".", "sum", "(", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.PCBA_graph_classification.dgn_net.DGNNet.__init__": [[10, 65], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "ogb.graphproppred.mol_encoder.AtomEncoder", "torch.ModuleList", "torch.ModuleList", "dgn_net.DGNNet.layers.append", "nets.mlp_readout_layer.MLPReadout", "ogb.graphproppred.mol_encoder.BondEncoder", "torch.ModuleList", "torch.ModuleList", "nets.dgn_layer.DGNLayer", "dgn_net.DGNNet.virtual_node.lower", "nets.dgn_layer.DGNLayer", "range", "nets.dgn_layer.VirtualNode", "range"], "methods", ["home.repos.pwc.inspect_result.Saro00_DGN.dgl.dgn_layer.DGNLayer.__init__"], ["        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "num_atom_type", "=", "net_params", "[", "'num_atom_type'", "]", "\n", "num_bond_type", "=", "net_params", "[", "'num_bond_type'", "]", "\n", "hidden_dim", "=", "net_params", "[", "'hidden_dim'", "]", "\n", "out_dim", "=", "net_params", "[", "'out_dim'", "]", "\n", "in_feat_dropout", "=", "net_params", "[", "'in_feat_dropout'", "]", "\n", "dropout", "=", "net_params", "[", "'dropout'", "]", "\n", "n_layers", "=", "net_params", "[", "'L'", "]", "\n", "self", ".", "type_net", "=", "net_params", "[", "'type_net'", "]", "\n", "self", ".", "pos_enc_dim", "=", "net_params", "[", "'pos_enc_dim'", "]", "\n", "if", "self", ".", "pos_enc_dim", ">", "0", ":", "\n", "            ", "self", ".", "embedding_pos_enc", "=", "nn", ".", "Linear", "(", "self", ".", "pos_enc_dim", ",", "hidden_dim", ")", "\n", "", "self", ".", "readout", "=", "net_params", "[", "'readout'", "]", "\n", "self", ".", "graph_norm", "=", "net_params", "[", "'graph_norm'", "]", "\n", "self", ".", "batch_norm", "=", "net_params", "[", "'batch_norm'", "]", "\n", "self", ".", "aggregators", "=", "net_params", "[", "'aggregators'", "]", "\n", "self", ".", "scalers", "=", "net_params", "[", "'scalers'", "]", "\n", "self", ".", "avg_d", "=", "net_params", "[", "'avg_d'", "]", "\n", "self", ".", "residual", "=", "net_params", "[", "'residual'", "]", "\n", "self", ".", "edge_feat", "=", "net_params", "[", "'edge_feat'", "]", "\n", "edge_dim", "=", "net_params", "[", "'edge_dim'", "]", "\n", "pretrans_layers", "=", "net_params", "[", "'pretrans_layers'", "]", "\n", "posttrans_layers", "=", "net_params", "[", "'posttrans_layers'", "]", "\n", "self", ".", "device", "=", "net_params", "[", "'device'", "]", "\n", "\n", "self", ".", "in_feat_dropout", "=", "nn", ".", "Dropout", "(", "in_feat_dropout", ")", "\n", "self", ".", "embedding_h", "=", "nn", ".", "Embedding", "(", "num_atom_type", ",", "hidden_dim", ")", "\n", "if", "self", ".", "edge_feat", ":", "\n", "            ", "self", ".", "embedding_e", "=", "nn", ".", "Embedding", "(", "num_bond_type", ",", "edge_dim", ")", "\n", "\n", "", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", "\n", "[", "DGNLayer", "(", "in_dim", "=", "hidden_dim", ",", "out_dim", "=", "hidden_dim", ",", "dropout", "=", "dropout", ",", "graph_norm", "=", "self", ".", "graph_norm", ",", "\n", "batch_norm", "=", "self", ".", "batch_norm", ",", "residual", "=", "self", ".", "residual", ",", "aggregators", "=", "self", ".", "aggregators", ",", "\n", "scalers", "=", "self", ".", "scalers", ",", "avg_d", "=", "self", ".", "avg_d", ",", "type_net", "=", "self", ".", "type_net", ",", "edge_features", "=", "self", ".", "edge_feat", ",", "\n", "edge_dim", "=", "edge_dim", ",", "pretrans_layers", "=", "pretrans_layers", ",", "posttrans_layers", "=", "posttrans_layers", ")", ".", "model", "for", "_", "\n", "in", "range", "(", "n_layers", "-", "1", ")", "]", ")", "\n", "self", ".", "layers", ".", "append", "(", "DGNLayer", "(", "in_dim", "=", "hidden_dim", ",", "out_dim", "=", "out_dim", ",", "dropout", "=", "dropout", ",", "\n", "graph_norm", "=", "self", ".", "graph_norm", ",", "batch_norm", "=", "self", ".", "batch_norm", ",", "\n", "residual", "=", "self", ".", "residual", ",", "aggregators", "=", "self", ".", "aggregators", ",", "scalers", "=", "self", ".", "scalers", ",", "\n", "avg_d", "=", "self", ".", "avg_d", ",", "type_net", "=", "self", ".", "type_net", ",", "edge_features", "=", "self", ".", "edge_feat", ",", "edge_dim", "=", "edge_dim", ",", "\n", "pretrans_layers", "=", "pretrans_layers", ",", "posttrans_layers", "=", "posttrans_layers", ")", ".", "model", ")", "\n", "\n", "if", "self", ".", "readout", "==", "\"directional\"", "or", "self", ".", "readout", "==", "\"directional_abs\"", ":", "\n", "            ", "self", ".", "MLP_layer", "=", "MLPReadout", "(", "2", "*", "out_dim", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "MLP_layer", "=", "MLPReadout", "(", "out_dim", ",", "1", ")", "# 1 out dim since regression problem", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "g", ",", "h", ",", "e", ",", "snorm_n", ",", "snorm_e", ")", ":", "\n", "        ", "h", "=", "self", ".", "embedding_h", "(", "h", ")", "\n", "h", "=", "self", ".", "in_feat_dropout", "(", "h", ")", "\n", "if", "self", ".", "pos_enc_dim", ">", "0", ":", "\n", "            ", "h_pos_enc", "=", "self", ".", "embedding_pos_enc", "(", "g", ".", "ndata", "[", "'pos_enc'", "]", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "h", "=", "h", "+", "h_pos_enc", "\n", "", "if", "self", ".", "edge_feat", ":", "\n", "            ", "e", "=", "self", ".", "embedding_e", "(", "e", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.PCBA_graph_classification.dgn_net.DGNNet.forward": [[66, 98], ["dgn_net.DGNNet.embedding_h", "dgn_net.DGNNet.in_feat_dropout", "enumerate", "dgn_net.DGNNet.MLP_layer", "dgn_net.DGNNet.embedding_e", "conv", "dgl.sum_nodes", "dgl.max_nodes", "len", "dgn_net.DGNNet.virtual_node_layers[].forward", "dgl.mean_nodes", "dgl.mean_nodes"], "methods", ["home.repos.pwc.inspect_result.Saro00_DGN.dgl.dgn_layer.DGNLayerTower.forward"], ["", "for", "i", ",", "conv", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "            ", "h_t", "=", "conv", "(", "g", ",", "h", ",", "e", ",", "snorm_n", ")", "\n", "h", "=", "h_t", "\n", "", "g", ".", "ndata", "[", "'h'", "]", "=", "h", "\n", "\n", "if", "self", ".", "readout", "==", "\"sum\"", ":", "\n", "            ", "hg", "=", "dgl", ".", "sum_nodes", "(", "g", ",", "'h'", ")", "\n", "", "elif", "self", ".", "readout", "==", "\"max\"", ":", "\n", "            ", "hg", "=", "dgl", ".", "max_nodes", "(", "g", ",", "'h'", ")", "\n", "", "elif", "self", ".", "readout", "==", "\"mean\"", ":", "\n", "            ", "hg", "=", "dgl", ".", "mean_nodes", "(", "g", ",", "'h'", ")", "\n", "", "elif", "self", ".", "readout", "==", "\"directional_abs\"", ":", "\n", "            ", "g", ".", "ndata", "[", "'dir'", "]", "=", "h", "*", "torch", ".", "abs", "(", "g", ".", "ndata", "[", "'eig'", "]", "[", ":", ",", "1", ":", "2", "]", ".", "to", "(", "self", ".", "device", ")", ")", "/", "torch", ".", "sum", "(", "\n", "torch", ".", "abs", "(", "g", ".", "ndata", "[", "'eig'", "]", "[", ":", ",", "1", ":", "2", "]", ".", "to", "(", "self", ".", "device", ")", ")", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "hg", "=", "torch", ".", "cat", "(", "[", "dgl", ".", "mean_nodes", "(", "g", ",", "'dir'", ")", ",", "dgl", ".", "mean_nodes", "(", "g", ",", "'h'", ")", "]", ",", "dim", "=", "1", ")", "\n", "", "elif", "self", ".", "readout", "==", "\"directional\"", ":", "\n", "            ", "g", ".", "ndata", "[", "'dir'", "]", "=", "h", "*", "g", ".", "ndata", "[", "'eig'", "]", "[", ":", ",", "1", ":", "2", "]", ".", "to", "(", "self", ".", "device", ")", "/", "torch", ".", "sum", "(", "\n", "torch", ".", "abs", "(", "g", ".", "ndata", "[", "'eig'", "]", "[", ":", ",", "1", ":", "2", "]", ".", "to", "(", "self", ".", "device", ")", ")", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "hg", "=", "torch", ".", "cat", "(", "[", "torch", ".", "abs", "(", "dgl", ".", "mean_nodes", "(", "g", ",", "'dir'", ")", ")", ",", "dgl", ".", "mean_nodes", "(", "g", ",", "'h'", ")", "]", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "hg", "=", "dgl", ".", "mean_nodes", "(", "g", ",", "'h'", ")", "# default readout is mean nodes", "\n", "\n", "", "return", "self", ".", "MLP_layer", "(", "hg", ")", "\n", "\n", "", "def", "loss", "(", "self", ",", "scores", ",", "targets", ")", ":", "\n", "        ", "loss", "=", "nn", ".", "L1Loss", "(", ")", "(", "scores", ",", "targets", ")", "\n", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Saro00_DGN.PCBA_graph_classification.dgn_net.DGNNet.loss": [[99, 103], ["torch.nn.BCEWithLogitsLoss", "torch.nn.BCEWithLogitsLoss", "torch.nn.BCEWithLogitsLoss", "torch.nn.BCEWithLogitsLoss"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Saro00_DGN.superpixels_graph_classification.dgn_net.DGNNet.__init__": [[8, 51], ["torch.Module.__init__", "torch.Linear", "torch.Dropout", "torch.ModuleList", "dgn_net.DGNNet.layers.append", "nets.mlp_readout_layer.MLPReadout", "torch.Linear", "nets.dgn_layer.DGNLayer", "nets.dgn_layer.DGNLayer", "range"], "methods", ["home.repos.pwc.inspect_result.Saro00_DGN.dgl.dgn_layer.DGNLayer.__init__"], ["class", "DGNNet", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "net_params", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "num_atom_type", "=", "net_params", "[", "'num_atom_type'", "]", "\n", "num_bond_type", "=", "net_params", "[", "'num_bond_type'", "]", "\n", "hidden_dim", "=", "net_params", "[", "'hidden_dim'", "]", "\n", "out_dim", "=", "net_params", "[", "'out_dim'", "]", "\n", "in_feat_dropout", "=", "net_params", "[", "'in_feat_dropout'", "]", "\n", "dropout", "=", "net_params", "[", "'dropout'", "]", "\n", "n_layers", "=", "net_params", "[", "'L'", "]", "\n", "self", ".", "type_net", "=", "net_params", "[", "'type_net'", "]", "\n", "self", ".", "pos_enc_dim", "=", "net_params", "[", "'pos_enc_dim'", "]", "\n", "if", "self", ".", "pos_enc_dim", ">", "0", ":", "\n", "            ", "self", ".", "embedding_pos_enc", "=", "nn", ".", "Linear", "(", "self", ".", "pos_enc_dim", ",", "hidden_dim", ")", "\n", "", "self", ".", "readout", "=", "net_params", "[", "'readout'", "]", "\n", "self", ".", "graph_norm", "=", "net_params", "[", "'graph_norm'", "]", "\n", "self", ".", "batch_norm", "=", "net_params", "[", "'batch_norm'", "]", "\n", "self", ".", "aggregators", "=", "net_params", "[", "'aggregators'", "]", "\n", "self", ".", "scalers", "=", "net_params", "[", "'scalers'", "]", "\n", "self", ".", "avg_d", "=", "net_params", "[", "'avg_d'", "]", "\n", "self", ".", "residual", "=", "net_params", "[", "'residual'", "]", "\n", "self", ".", "edge_feat", "=", "net_params", "[", "'edge_feat'", "]", "\n", "edge_dim", "=", "net_params", "[", "'edge_dim'", "]", "\n", "pretrans_layers", "=", "net_params", "[", "'pretrans_layers'", "]", "\n", "posttrans_layers", "=", "net_params", "[", "'posttrans_layers'", "]", "\n", "self", ".", "device", "=", "net_params", "[", "'device'", "]", "\n", "\n", "self", ".", "in_feat_dropout", "=", "nn", ".", "Dropout", "(", "in_feat_dropout", ")", "\n", "self", ".", "embedding_h", "=", "nn", ".", "Embedding", "(", "num_atom_type", ",", "hidden_dim", ")", "\n", "if", "self", ".", "edge_feat", ":", "\n", "            ", "self", ".", "embedding_e", "=", "nn", ".", "Embedding", "(", "num_bond_type", ",", "edge_dim", ")", "\n", "\n", "", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", "\n", "[", "DGNLayer", "(", "in_dim", "=", "hidden_dim", ",", "out_dim", "=", "hidden_dim", ",", "dropout", "=", "dropout", ",", "graph_norm", "=", "self", ".", "graph_norm", ",", "\n", "batch_norm", "=", "self", ".", "batch_norm", ",", "residual", "=", "self", ".", "residual", ",", "aggregators", "=", "self", ".", "aggregators", ",", "\n", "scalers", "=", "self", ".", "scalers", ",", "avg_d", "=", "self", ".", "avg_d", ",", "type_net", "=", "self", ".", "type_net", ",", "edge_features", "=", "self", ".", "edge_feat", ",", "\n", "edge_dim", "=", "edge_dim", ",", "pretrans_layers", "=", "pretrans_layers", ",", "posttrans_layers", "=", "posttrans_layers", ")", ".", "model", "for", "_", "\n", "in", "range", "(", "n_layers", "-", "1", ")", "]", ")", "\n", "self", ".", "layers", ".", "append", "(", "DGNLayer", "(", "in_dim", "=", "hidden_dim", ",", "out_dim", "=", "out_dim", ",", "dropout", "=", "dropout", ",", "\n", "graph_norm", "=", "self", ".", "graph_norm", ",", "batch_norm", "=", "self", ".", "batch_norm", ",", "\n", "residual", "=", "self", ".", "residual", ",", "aggregators", "=", "self", ".", "aggregators", ",", "scalers", "=", "self", ".", "scalers", ",", "\n", "avg_d", "=", "self", ".", "avg_d", ",", "type_net", "=", "self", ".", "type_net", ",", "edge_features", "=", "self", ".", "edge_feat", ",", "edge_dim", "=", "edge_dim", ",", "\n", "pretrans_layers", "=", "pretrans_layers", ",", "posttrans_layers", "=", "posttrans_layers", ")", ".", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.superpixels_graph_classification.dgn_net.DGNNet.forward": [[52, 74], ["dgn_net.DGNNet.embedding_h", "dgn_net.DGNNet.in_feat_dropout", "enumerate", "dgn_net.DGNNet.MLP_layer", "dgn_net.DGNNet.embedding_e", "conv", "dgl.sum_nodes", "dgl.max_nodes", "dgl.mean_nodes", "dgl.mean_nodes"], "methods", ["None"], ["if", "self", ".", "readout", "==", "\"directional\"", "or", "self", ".", "readout", "==", "\"directional_abs\"", ":", "\n", "            ", "self", ".", "MLP_layer", "=", "MLPReadout", "(", "2", "*", "out_dim", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "MLP_layer", "=", "MLPReadout", "(", "out_dim", ",", "1", ")", "# 1 out dim since regression problem", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "g", ",", "h", ",", "e", ",", "snorm_n", ",", "snorm_e", ")", ":", "\n", "        ", "h", "=", "self", ".", "embedding_h", "(", "h", ")", "\n", "h", "=", "self", ".", "in_feat_dropout", "(", "h", ")", "\n", "if", "self", ".", "pos_enc_dim", ">", "0", ":", "\n", "            ", "h_pos_enc", "=", "self", ".", "embedding_pos_enc", "(", "g", ".", "ndata", "[", "'pos_enc'", "]", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "h", "=", "h", "+", "h_pos_enc", "\n", "", "if", "self", ".", "edge_feat", ":", "\n", "            ", "e", "=", "self", ".", "embedding_e", "(", "e", ")", "\n", "\n", "", "for", "i", ",", "conv", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "            ", "h_t", "=", "conv", "(", "g", ",", "h", ",", "e", ",", "snorm_n", ")", "\n", "h", "=", "h_t", "\n", "", "g", ".", "ndata", "[", "'h'", "]", "=", "h", "\n", "\n", "if", "self", ".", "readout", "==", "\"sum\"", ":", "\n", "            ", "hg", "=", "dgl", ".", "sum_nodes", "(", "g", ",", "'h'", ")", "\n", "", "elif", "self", ".", "readout", "==", "\"max\"", ":", "\n", "            ", "hg", "=", "dgl", ".", "max_nodes", "(", "g", ",", "'h'", ")", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.superpixels_graph_classification.dgn_net.DGNNet.loss": [[75, 79], ["torch.CrossEntropyLoss", "torch.CrossEntropyLoss."], "methods", ["None"], ["", "elif", "self", ".", "readout", "==", "\"mean\"", ":", "\n", "            ", "hg", "=", "dgl", ".", "mean_nodes", "(", "g", ",", "'h'", ")", "\n", "", "elif", "self", ".", "readout", "==", "\"directional_abs\"", ":", "\n", "            ", "g", ".", "ndata", "[", "'dir'", "]", "=", "h", "*", "torch", ".", "abs", "(", "g", ".", "ndata", "[", "'eig'", "]", "[", ":", ",", "1", ":", "2", "]", ".", "to", "(", "self", ".", "device", ")", ")", "/", "torch", ".", "sum", "(", "\n", "torch", ".", "abs", "(", "g", ".", "ndata", "[", "'eig'", "]", "[", ":", ",", "1", ":", "2", "]", ".", "to", "(", "self", ".", "device", ")", ")", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.models.layers.FCLayer.__init__": [[72, 93], ["torch.Module.__init__", "locals", "torch.Linear().to", "torch.Linear().to", "layers.get_activation", "layers.FCLayer.reset_parameters", "torch.Dropout", "torch.Dropout", "torch.BatchNorm1d().to", "torch.BatchNorm1d().to", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.Saro00_DGN.dgl.dgn_layer.DGNLayer.__init__", "home.repos.pwc.inspect_result.Saro00_DGN.models.layers.get_activation", "home.repos.pwc.inspect_result.Saro00_DGN.models.layers.FCLayer.reset_parameters"], ["def", "__init__", "(", "self", ",", "in_size", ",", "out_size", ",", "activation", "=", "'relu'", ",", "dropout", "=", "0.", ",", "b_norm", "=", "False", ",", "bias", "=", "True", ",", "init_fn", "=", "None", ",", "\n", "device", "=", "'cpu'", ")", ":", "\n", "        ", "super", "(", "FCLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "__params", "=", "locals", "(", ")", "\n", "del", "self", ".", "__params", "[", "'__class__'", "]", "\n", "del", "self", ".", "__params", "[", "'self'", "]", "\n", "self", ".", "in_size", "=", "in_size", "\n", "self", ".", "out_size", "=", "out_size", "\n", "self", ".", "bias", "=", "bias", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "in_size", ",", "out_size", ",", "bias", "=", "bias", ")", ".", "to", "(", "device", ")", "\n", "self", ".", "dropout", "=", "None", "\n", "self", ".", "b_norm", "=", "None", "\n", "if", "dropout", ":", "\n", "            ", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout", ",", "device", "=", "device", ")", "\n", "", "if", "b_norm", ":", "\n", "            ", "self", ".", "b_norm", "=", "nn", ".", "BatchNorm1d", "(", "out_size", ")", ".", "to", "(", "device", ")", "\n", "", "self", ".", "activation", "=", "get_activation", "(", "activation", ")", "\n", "self", ".", "init_fn", "=", "nn", ".", "init", ".", "xavier_uniform_", "\n", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.models.layers.FCLayer.reset_parameters": [[94, 100], ["init_fn", "layers.FCLayer.linear.bias.data.zero_"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ",", "init_fn", "=", "None", ")", ":", "\n", "        ", "init_fn", "=", "init_fn", "or", "self", ".", "init_fn", "\n", "if", "init_fn", "is", "not", "None", ":", "\n", "            ", "init_fn", "(", "self", ".", "linear", ".", "weight", ",", "1", "/", "self", ".", "in_size", ")", "\n", "", "if", "self", ".", "bias", ":", "\n", "            ", "self", ".", "linear", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.models.layers.FCLayer.forward": [[101, 113], ["layers.FCLayer.linear", "layers.FCLayer.activation", "layers.FCLayer.dropout", "layers.FCLayer.b_norm().transpose", "layers.FCLayer.b_norm", "layers.FCLayer.b_norm", "layers.FCLayer.transpose"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "h", "=", "self", ".", "linear", "(", "x", ")", "\n", "if", "self", ".", "activation", "is", "not", "None", ":", "\n", "            ", "h", "=", "self", ".", "activation", "(", "h", ")", "\n", "", "if", "self", ".", "dropout", "is", "not", "None", ":", "\n", "            ", "h", "=", "self", ".", "dropout", "(", "h", ")", "\n", "", "if", "self", ".", "b_norm", "is", "not", "None", ":", "\n", "            ", "if", "h", ".", "shape", "[", "1", "]", "!=", "self", ".", "out_size", ":", "\n", "                ", "h", "=", "self", ".", "b_norm", "(", "h", ".", "transpose", "(", "1", ",", "2", ")", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "", "else", ":", "\n", "                ", "h", "=", "self", ".", "b_norm", "(", "h", ")", "\n", "", "", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.models.layers.FCLayer.__repr__": [[114, 118], ["str", "str"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "' ('", "+", "str", "(", "self", ".", "in_size", ")", "+", "' -> '", "+", "str", "(", "self", ".", "out_size", ")", "+", "')'", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.models.layers.MLP.__init__": [[125, 145], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "layers.MLP.fully_connected.append", "layers.MLP.fully_connected.append", "range", "layers.MLP.fully_connected.append", "layers.FCLayer", "layers.FCLayer", "layers.MLP.fully_connected.append", "layers.FCLayer", "layers.FCLayer"], "methods", ["home.repos.pwc.inspect_result.Saro00_DGN.dgl.dgn_layer.DGNLayer.__init__"], ["def", "__init__", "(", "self", ",", "in_size", ",", "hidden_size", ",", "out_size", ",", "layers", ",", "mid_activation", "=", "'relu'", ",", "last_activation", "=", "'none'", ",", "\n", "dropout", "=", "0.", ",", "mid_b_norm", "=", "False", ",", "last_b_norm", "=", "False", ",", "device", "=", "'cpu'", ")", ":", "\n", "        ", "super", "(", "MLP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "in_size", "=", "in_size", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "out_size", "=", "out_size", "\n", "\n", "self", ".", "fully_connected", "=", "nn", ".", "ModuleList", "(", ")", "\n", "if", "layers", "<=", "1", ":", "\n", "            ", "self", ".", "fully_connected", ".", "append", "(", "FCLayer", "(", "in_size", ",", "out_size", ",", "activation", "=", "last_activation", ",", "b_norm", "=", "last_b_norm", ",", "\n", "device", "=", "device", ",", "dropout", "=", "dropout", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "fully_connected", ".", "append", "(", "FCLayer", "(", "in_size", ",", "hidden_size", ",", "activation", "=", "mid_activation", ",", "b_norm", "=", "mid_b_norm", ",", "\n", "device", "=", "device", ",", "dropout", "=", "dropout", ")", ")", "\n", "for", "_", "in", "range", "(", "layers", "-", "2", ")", ":", "\n", "                ", "self", ".", "fully_connected", ".", "append", "(", "FCLayer", "(", "hidden_size", ",", "hidden_size", ",", "activation", "=", "mid_activation", ",", "\n", "b_norm", "=", "mid_b_norm", ",", "device", "=", "device", ",", "dropout", "=", "dropout", ")", ")", "\n", "", "self", ".", "fully_connected", ".", "append", "(", "FCLayer", "(", "hidden_size", ",", "out_size", ",", "activation", "=", "last_activation", ",", "b_norm", "=", "last_b_norm", ",", "\n", "device", "=", "device", ",", "dropout", "=", "dropout", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.models.layers.MLP.forward": [[146, 150], ["fc"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "for", "fc", "in", "self", ".", "fully_connected", ":", "\n", "            ", "x", "=", "fc", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.models.layers.MLP.__repr__": [[151, 155], ["str", "str"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "' ('", "+", "str", "(", "self", ".", "in_size", ")", "+", "' -> '", "+", "str", "(", "self", ".", "out_size", ")", "+", "')'", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Saro00_DGN.models.layers.get_activation": [[7, 19], ["callable", "isinstance", "activation.lower", "len", "vars", "activation.lower", "x.lower"], "function", ["None"], ["def", "get_activation", "(", "activation", ")", ":", "\n", "    ", "\"\"\" returns the activation function represented by the input string \"\"\"", "\n", "if", "activation", "and", "callable", "(", "activation", ")", ":", "\n", "# activation is already a function", "\n", "        ", "return", "activation", "\n", "# search in SUPPORTED_ACTIVATION_MAP a torch.nn.modules.activation", "\n", "", "activation", "=", "[", "x", "for", "x", "in", "SUPPORTED_ACTIVATION_MAP", "if", "activation", ".", "lower", "(", ")", "==", "x", ".", "lower", "(", ")", "]", "\n", "assert", "len", "(", "activation", ")", "==", "1", "and", "isinstance", "(", "activation", "[", "0", "]", ",", "str", ")", ",", "'Unhandled activation function'", "\n", "activation", "=", "activation", "[", "0", "]", "\n", "if", "activation", ".", "lower", "(", ")", "==", "'none'", ":", "\n", "        ", "return", "None", "\n", "", "return", "vars", "(", "torch", ".", "nn", ".", "modules", ".", "activation", ")", "[", "activation", "]", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.pytorch.scalers.scale_identity": [[7, 9], ["None"], "function", ["None"], ["def", "scale_identity", "(", "h", ",", "D", "=", "None", ",", "avg_d", "=", "None", ")", ":", "\n", "    ", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.pytorch.scalers.scale_amplification": [[11, 17], ["torch.sum", "torch.mul", "torch.log"], "function", ["None"], ["", "def", "scale_amplification", "(", "h", ",", "D", ",", "avg_d", ")", ":", "\n", "# log(D + 1) / d * h     where d is the average of the ``log(D + 1)`` in the training set", "\n", "    ", "return", "h", "*", "(", "np", ".", "log", "(", "D", "+", "1", ")", "/", "avg_d", "[", "\"log\"", "]", ")", "\n", "\n", "\n", "", "def", "scale_attenuation", "(", "h", ",", "D", ",", "avg_d", ")", ":", "\n", "# (log(D + 1))^-1 / d * X     where d is the average of the ``log(D + 1))^-1`` in the training set", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.pytorch.scalers.scale_attenuation": [[19, 25], ["torch.sum", "torch.mul", "torch.log"], "function", ["None"], ["\n", "\n", "", "SCALERS", "=", "{", "'identity'", ":", "scale_identity", ",", "'amplification'", ":", "scale_amplification", ",", "'attenuation'", ":", "scale_attenuation", "}", "\n", ""]], "home.repos.pwc.inspect_result.Saro00_DGN.pytorch.scalers.scale_linear": [[27, 32], ["torch.sum"], "function", ["None"], []], "home.repos.pwc.inspect_result.Saro00_DGN.pytorch.scalers.scale_inverse_linear": [[34, 39], ["torch.sum"], "function", ["None"], []], "home.repos.pwc.inspect_result.Saro00_DGN.pytorch.dgn_layer.DGNTower.__init__": [[10, 37], ["torch.Module.__init__", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "layers.MLP", "layers.MLP", "agg", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "len"], "methods", ["home.repos.pwc.inspect_result.Saro00_DGN.dgl.dgn_layer.DGNLayer.__init__"], ["\n", "\n", "class", "VirtualNode", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "dim", ",", "dropout", ",", "batch_norm", "=", "False", ",", "bias", "=", "True", ",", "residual", "=", "True", ",", "vn_type", "=", "'mean'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "vn_type", "=", "vn_type", ".", "lower", "(", ")", "\n", "self", ".", "fc_layer", "=", "FCLayer", "(", "in_size", "=", "dim", ",", "out_size", "=", "dim", ",", "activation", "=", "'relu'", ",", "dropout", "=", "dropout", ",", "\n", "b_norm", "=", "batch_norm", ",", "bias", "=", "bias", ")", "\n", "self", ".", "residual", "=", "residual", "\n", "\n", "", "def", "forward", "(", "self", ",", "g", ",", "h", ",", "vn_h", ")", ":", "\n", "\n", "        ", "g", ".", "ndata", "[", "'h'", "]", "=", "h", "\n", "\n", "# Pool the features", "\n", "if", "self", ".", "vn_type", "==", "'mean'", ":", "\n", "            ", "pool", "=", "mean_nodes", "(", "g", ",", "'h'", ")", "\n", "", "elif", "self", ".", "vn_type", "==", "'sum'", ":", "\n", "            ", "pool", "=", "sum_nodes", "(", "g", ",", "'h'", ")", "\n", "", "elif", "self", ".", "vn_type", "==", "'logsum'", ":", "\n", "            ", "pool", "=", "mean_nodes", "(", "g", ",", "'h'", ")", "\n", "lognum", "=", "torch", ".", "log", "(", "torch", ".", "tensor", "(", "g", ".", "batch_num_nodes", ",", "dtype", "=", "h", ".", "dtype", ",", "device", "=", "h", ".", "device", ")", ")", "\n", "pool", "=", "pool", "*", "lognum", ".", "unsqueeze", "(", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f'Undefined input \"{self.pooling}\". Accepted values are \"sum\", \"mean\", \"logsum\"'", ")", "\n", "\n", "# Compute the new virtual node features", "\n", "", "vn_h_temp", "=", "self", ".", "fc_layer", ".", "forward", "(", "vn_h", "+", "pool", ")", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.pytorch.dgn_layer.DGNTower.forward": [[38, 53], ["input.unsqueeze().repeat", "input.unsqueeze().repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "dgn_layer.DGNTower.pretrans", "adj.to.to.to", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "dgn_layer.DGNTower.posttrans", "input.unsqueeze", "input.unsqueeze", "aggregate", "scale"], "methods", ["None"], ["if", "self", ".", "residual", ":", "\n", "            ", "vn_h", "=", "vn_h", "+", "vn_h_temp", "\n", "", "else", ":", "\n", "            ", "vn_h", "=", "vn_h_temp", "\n", "\n", "# Add the virtual node value to the graph features", "\n", "", "temp_h", "=", "torch", ".", "cat", "(", "\n", "[", "vn_h", "[", "ii", ":", "ii", "+", "1", "]", ".", "repeat", "(", "num_nodes", ",", "1", ")", "for", "ii", ",", "num_nodes", "in", "enumerate", "(", "g", ".", "batch_num_nodes", ")", "]", ",", "\n", "dim", "=", "0", ")", "\n", "h", "=", "h", "+", "temp_h", "\n", "\n", "return", "vn_h", ",", "h", "\n", "\n", "\n", "", "", "class", "DGNLayerComplex", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "in_dim", ",", "out_dim", ",", "dropout", ",", "graph_norm", ",", "batch_norm", ",", "aggregators", ",", "scalers", ",", "avg_d", ",", "residual", ",", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.pytorch.dgn_layer.DGNTower.__repr__": [[54, 58], ["str", "str"], "methods", ["None"], ["edge_features", ",", "edge_dim", ",", "pretrans_layers", "=", "1", ",", "posttrans_layers", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "graph_norm", "=", "graph_norm", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.pytorch.dgn_layer.DGNLayer.__init__": [[62, 96], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "range", "layers.FCLayer", "dgn_layer.DGNLayer.towers.append", "dgn_layer.DGNTower"], "methods", ["home.repos.pwc.inspect_result.Saro00_DGN.dgl.dgn_layer.DGNLayer.__init__"], ["\n", "self", ".", "aggregators", "=", "aggregators", "\n", "self", ".", "scalers", "=", "scalers", "\n", "\n", "self", ".", "batchnorm_h", "=", "nn", ".", "BatchNorm1d", "(", "out_dim", ")", "\n", "self", ".", "pretrans", "=", "MLP", "(", "in_size", "=", "2", "*", "in_dim", "+", "(", "edge_dim", "if", "edge_features", "else", "0", ")", ",", "hidden_size", "=", "in_dim", ",", "\n", "out_size", "=", "in_dim", ",", "layers", "=", "pretrans_layers", ",", "mid_activation", "=", "'relu'", ",", "last_activation", "=", "'none'", ")", "\n", "self", ".", "posttrans", "=", "MLP", "(", "in_size", "=", "(", "len", "(", "aggregators", ")", "*", "len", "(", "scalers", ")", "+", "1", ")", "*", "in_dim", ",", "hidden_size", "=", "out_dim", ",", "\n", "out_size", "=", "out_dim", ",", "layers", "=", "posttrans_layers", ",", "mid_activation", "=", "'relu'", ",", "last_activation", "=", "'none'", ")", "\n", "self", ".", "avg_d", "=", "avg_d", "\n", "if", "in_dim", "!=", "out_dim", ":", "\n", "            ", "self", ".", "residual", "=", "False", "\n", "\n", "", "", "def", "pretrans_edges", "(", "self", ",", "edges", ")", ":", "\n", "        ", "if", "self", ".", "edge_features", ":", "\n", "            ", "z2", "=", "torch", ".", "cat", "(", "[", "edges", ".", "src", "[", "'h'", "]", ",", "edges", ".", "dst", "[", "'h'", "]", ",", "edges", ".", "data", "[", "'ef'", "]", "]", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "z2", "=", "torch", ".", "cat", "(", "[", "edges", ".", "src", "[", "'h'", "]", ",", "edges", ".", "dst", "[", "'h'", "]", "]", ",", "dim", "=", "1", ")", "\n", "", "return", "{", "'e'", ":", "self", ".", "pretrans", "(", "z2", ")", ",", "'eig_s'", ":", "edges", ".", "src", "[", "'eig'", "]", ",", "'eig_d'", ":", "edges", ".", "dst", "[", "'eig'", "]", "}", "\n", "\n", "", "def", "message_func", "(", "self", ",", "edges", ")", ":", "\n", "        ", "return", "{", "'e'", ":", "edges", ".", "data", "[", "'e'", "]", ",", "'eig_s'", ":", "edges", ".", "data", "[", "'eig_s'", "]", ".", "to", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", ",", "\n", "'eig_d'", ":", "edges", ".", "data", "[", "'eig_d'", "]", ".", "to", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "}", "\n", "\n", "", "def", "reduce_func", "(", "self", ",", "nodes", ")", ":", "\n", "        ", "h_in", "=", "nodes", ".", "data", "[", "'h'", "]", "\n", "h", "=", "nodes", ".", "mailbox", "[", "'e'", "]", "\n", "eig_s", "=", "nodes", ".", "mailbox", "[", "'eig_s'", "]", "\n", "eig_d", "=", "nodes", ".", "mailbox", "[", "'eig_d'", "]", "\n", "D", "=", "h", ".", "shape", "[", "-", "2", "]", "\n", "\n", "# aggregators and scalers", "\n", "h", "=", "torch", ".", "cat", "(", "[", "aggregate", "(", "h", ",", "eig_s", ",", "eig_d", ",", "h_in", ")", "for", "aggregate", "in", "self", ".", "aggregators", "]", ",", "dim", "=", "1", ")", "\n", "if", "len", "(", "self", ".", "scalers", ")", ">", "1", ":", "\n", "            ", "h", "=", "torch", ".", "cat", "(", "[", "scale", "(", "h", ",", "D", "=", "D", ",", "avg_d", "=", "self", ".", "avg_d", ")", "for", "scale", "in", "self", ".", "scalers", "]", ",", "dim", "=", "1", ")", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.pytorch.dgn_layer.DGNLayer.forward": [[97, 108], ["dgn_layer.DGNLayer.mixing_network", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "tower", "tower", "enumerate"], "methods", ["None"], ["\n", "", "return", "{", "'h'", ":", "h", "}", "\n", "\n", "", "def", "posttrans_nodes", "(", "self", ",", "nodes", ")", ":", "\n", "        ", "return", "self", ".", "posttrans", "(", "nodes", ".", "data", "[", "'h'", "]", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "g", ",", "h", ",", "e", ",", "snorm_n", ")", ":", "\n", "\n", "        ", "h_in", "=", "h", "\n", "g", ".", "ndata", "[", "'h'", "]", "=", "h", "\n", "\n", "if", "self", ".", "edge_features", ":", "# add the edges information only if edge_features = True", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.pytorch.dgn_layer.DGNLayer.__repr__": [[109, 113], ["str", "str"], "methods", ["None"], ["            ", "g", ".", "edata", "[", "'ef'", "]", "=", "e", "\n", "\n", "# pretransformation", "\n", "", "g", ".", "apply_edges", "(", "self", ".", "pretrans_edges", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.pytorch.aggregators.aggregate_identity": [[14, 19], ["torch.sum", "torch.mul", "torch.eye().reshape", "torch.eye"], "function", ["None"], ["\n", "\n", "", "def", "aggregate_min", "(", "h", ",", "eig_s", ",", "eig_d", ",", "h_in", ")", ":", "\n", "    ", "return", "torch", ".", "min", "(", "h", ",", "dim", "=", "1", ")", "[", "0", "]", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.pytorch.aggregators.aggregate_mean": [[21, 32], ["torch.sum", "torch.sum", "torch.div", "torch.mul", "torch.eye().unsqueeze", "adj.unsqueeze", "torch.eye"], "function", ["None"], ["    ", "return", "torch", ".", "sqrt", "(", "aggregate_var", "(", "h", ",", "eig_s", ",", "eig_d", ",", "h_in", ")", "+", "EPS", ")", "\n", "\n", "\n", "", "def", "aggregate_var", "(", "h", ",", "eig_s", ",", "eig_d", ",", "h_in", ")", ":", "\n", "    ", "h_mean_squares", "=", "torch", ".", "mean", "(", "h", "*", "h", ",", "dim", "=", "-", "2", ")", "\n", "h_mean", "=", "torch", ".", "mean", "(", "h", ",", "dim", "=", "-", "2", ")", "\n", "var", "=", "torch", ".", "relu", "(", "h_mean_squares", "-", "h_mean", "*", "h_mean", ")", "\n", "return", "var", "\n", "\n", "\n", "", "def", "aggregate_sum", "(", "h", ",", "eig_s", ",", "eig_d", ",", "h_in", ")", ":", "\n", "    ", "return", "torch", ".", "sum", "(", "h", ",", "dim", "=", "1", ")", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.pytorch.aggregators.aggregate_max": [[34, 44], ["adj.unsqueeze.unsqueeze", "torch.where", "torch.tensor", "torch.max", "torch.eye().unsqueeze", "torch.eye"], "function", ["None"], ["\n", "", "def", "aggregate_dir_av", "(", "h", ",", "eig_s", ",", "eig_d", ",", "h_in", ",", "eig_idx", ")", ":", "\n", "    ", "h_mod", "=", "torch", ".", "mul", "(", "h", ",", "(", "torch", ".", "abs", "(", "eig_s", "[", ":", ",", ":", ",", "eig_idx", "]", "-", "eig_d", "[", ":", ",", ":", ",", "eig_idx", "]", ")", "/", "\n", "(", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "eig_s", "[", ":", ",", ":", ",", "eig_idx", "]", "-", "eig_d", "[", ":", ",", ":", ",", "eig_idx", "]", ")", ",", "keepdim", "=", "True", ",", "\n", "dim", "=", "1", ")", "+", "EPS", ")", ")", ".", "unsqueeze", "(", "-", "1", ")", ")", "\n", "return", "torch", ".", "sum", "(", "h_mod", ",", "dim", "=", "1", ")", "\n", "\n", "\n", "", "def", "aggregate_dir_softmax", "(", "h", ",", "eig_s", ",", "eig_d", ",", "h_in", ",", "eig_idx", ",", "alpha", ")", ":", "\n", "    ", "h_mod", "=", "torch", ".", "mul", "(", "h", ",", "torch", ".", "nn", ".", "Softmax", "(", "1", ")", "(", "\n", "alpha", "*", "(", "torch", ".", "abs", "(", "eig_s", "[", ":", ",", ":", ",", "eig_idx", "]", "-", "eig_d", "[", ":", ",", ":", ",", "eig_idx", "]", ")", ")", ".", "unsqueeze", "(", "-", "1", ")", ")", ")", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.pytorch.aggregators.aggregate_min": [[46, 56], ["adj.unsqueeze.unsqueeze", "torch.where", "torch.tensor", "torch.min", "torch.eye().unsqueeze", "torch.eye"], "function", ["None"], ["\n", "\n", "", "def", "aggregate_dir_dx", "(", "h", ",", "eig_s", ",", "eig_d", ",", "h_in", ",", "eig_idx", ")", ":", "\n", "    ", "eig_w", "=", "(", "(", "eig_s", "[", ":", ",", ":", ",", "eig_idx", "]", "-", "eig_d", "[", ":", ",", ":", ",", "eig_idx", "]", ")", "/", "\n", "(", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "eig_s", "[", ":", ",", ":", ",", "eig_idx", "]", "-", "eig_d", "[", ":", ",", ":", ",", "eig_idx", "]", ")", ",", "keepdim", "=", "True", ",", "dim", "=", "1", ")", "+", "EPS", ")", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "h_mod", "=", "torch", ".", "mul", "(", "h", ",", "eig_w", ")", "\n", "return", "torch", ".", "abs", "(", "torch", ".", "sum", "(", "h_mod", ",", "dim", "=", "1", ")", "-", "torch", ".", "sum", "(", "eig_w", ",", "dim", "=", "1", ")", "*", "h_in", ")", "\n", "\n", "\n", "", "def", "aggregate_dir_dx_no_abs", "(", "h", ",", "eig_s", ",", "eig_d", ",", "h_in", ",", "eig_idx", ")", ":", "\n", "    ", "eig_w", "=", "(", "(", "eig_s", "[", ":", ",", ":", ",", "eig_idx", "]", "-", "eig_d", "[", ":", ",", ":", ",", "eig_idx", "]", ")", "/", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.pytorch.aggregators.aggregate_std": [[58, 63], ["torch.sqrt", "aggregators.aggregate_var"], "function", ["home.repos.pwc.inspect_result.Saro00_DGN.dgl.aggregators.aggregate_var"], ["h_mod", "=", "torch", ".", "mul", "(", "h", ",", "eig_w", ")", "\n", "return", "torch", ".", "sum", "(", "h_mod", ",", "dim", "=", "1", ")", "-", "torch", ".", "sum", "(", "eig_w", ",", "dim", "=", "1", ")", "*", "h_in", "\n", "\n", "\n", "", "def", "aggregate_dir_dx_balanced", "(", "h", ",", "eig_s", ",", "eig_d", ",", "h_in", ",", "eig_idx", ")", ":", "\n", "    ", "eig_front", "=", "(", "torch", ".", "relu", "(", "eig_s", "[", ":", ",", ":", ",", "eig_idx", "]", "-", "eig_d", "[", ":", ",", ":", ",", "eig_idx", "]", ")", "/", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.pytorch.aggregators.aggregate_var": [[65, 78], ["torch.sum", "torch.sum", "torch.div", "aggregators.aggregate_mean", "torch.relu", "torch.mul", "torch.eye().unsqueeze", "torch.mul", "adj.unsqueeze", "torch.mul", "torch.eye"], "function", ["home.repos.pwc.inspect_result.Saro00_DGN.dgl.aggregators.aggregate_mean"], ["dim", "=", "1", ")", "+", "EPS", ")", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "eig_back", "=", "(", "torch", ".", "relu", "(", "eig_d", "[", ":", ",", ":", ",", "eig_idx", "]", "-", "eig_s", "[", ":", ",", ":", ",", "eig_idx", "]", ")", "/", "\n", "(", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "-", "torch", ".", "relu", "(", "eig_d", "[", ":", ",", ":", ",", "eig_idx", "]", "-", "eig_s", "[", ":", ",", ":", ",", "eig_idx", "]", ")", ")", ",", "keepdim", "=", "True", ",", "\n", "dim", "=", "1", ")", "+", "EPS", ")", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "eig_w", "=", "(", "eig_front", "+", "eig_back", ")", "/", "2", "\n", "h_mod", "=", "torch", ".", "mul", "(", "h", ",", "eig_w", ")", "\n", "return", "torch", ".", "abs", "(", "torch", ".", "sum", "(", "h_mod", ",", "dim", "=", "1", ")", "-", "torch", ".", "sum", "(", "eig_w", ",", "dim", "=", "1", ")", "*", "h_in", ")", "\n", "\n", "\n", "", "AGGREGATORS", "=", "{", "'mean'", ":", "aggregate_mean", ",", "'sum'", ":", "aggregate_sum", ",", "'max'", ":", "aggregate_max", ",", "'min'", ":", "aggregate_min", ",", "\n", "'std'", ":", "aggregate_std", ",", "'var'", ":", "aggregate_var", ",", "\n", "'dir1-av'", ":", "partial", "(", "aggregate_dir_av", ",", "eig_idx", "=", "1", ")", ",", "\n", "'dir2-av'", ":", "partial", "(", "aggregate_dir_av", ",", "eig_idx", "=", "2", ")", ",", "\n", "'dir3-av'", ":", "partial", "(", "aggregate_dir_av", ",", "eig_idx", "=", "3", ")", ",", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.pytorch.aggregators.aggregate_sum": [[80, 89], ["torch.sum", "torch.mul", "torch.eye().unsqueeze", "adj.unsqueeze", "torch.eye"], "function", ["None"], ["'dir2-0.1'", ":", "partial", "(", "aggregate_dir_softmax", ",", "eig_idx", "=", "2", ",", "alpha", "=", "0.1", ")", ",", "\n", "'dir3-0.1'", ":", "partial", "(", "aggregate_dir_softmax", ",", "eig_idx", "=", "3", ",", "alpha", "=", "0.1", ")", ",", "\n", "'dir1-neg-0.1'", ":", "partial", "(", "aggregate_dir_softmax", ",", "eig_idx", "=", "1", ",", "alpha", "=", "-", "0.1", ")", ",", "\n", "'dir2-neg-0.1'", ":", "partial", "(", "aggregate_dir_softmax", ",", "eig_idx", "=", "2", ",", "alpha", "=", "-", "0.1", ")", ",", "\n", "'dir3-neg-0.1'", ":", "partial", "(", "aggregate_dir_softmax", ",", "eig_idx", "=", "3", ",", "alpha", "=", "-", "0.1", ")", ",", "\n", "'dir1-dx'", ":", "partial", "(", "aggregate_dir_dx", ",", "eig_idx", "=", "1", ")", ",", "\n", "'dir2-dx'", ":", "partial", "(", "aggregate_dir_dx", ",", "eig_idx", "=", "2", ")", ",", "\n", "'dir3-dx'", ":", "partial", "(", "aggregate_dir_dx", ",", "eig_idx", "=", "3", ")", ",", "\n", "'dir1-dx-no-abs'", ":", "partial", "(", "aggregate_dir_dx_no_abs", ",", "eig_idx", "=", "1", ")", ",", "\n", "'dir2-dx-no-abs'", ":", "partial", "(", "aggregate_dir_dx_no_abs", ",", "eig_idx", "=", "2", ")", ",", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.pytorch.aggregators.aggregate_normalised_mean": [[91, 104], ["torch.mul", "torch.matmul", "torch.sum", "torch.pow", "torch.eye().unsqueeze().repeat", "torch.matmul", "torch.mul", "torch.eye().unsqueeze", "torch.sum", "torch.matmul.unsqueeze", "torch.eye().unsqueeze", "torch.eye", "torch.eye"], "function", ["None"], ["'dir1-dx-balanced'", ":", "partial", "(", "aggregate_dir_dx_balanced", ",", "eig_idx", "=", "1", ")", ",", "\n", "'dir2-dx-balanced'", ":", "partial", "(", "aggregate_dir_dx_balanced", ",", "eig_idx", "=", "2", ")", ",", "\n", "'dir3-dx-balanced'", ":", "partial", "(", "aggregate_dir_dx_balanced", ",", "eig_idx", "=", "3", ")", "}", "\n", ""]], "home.repos.pwc.inspect_result.Saro00_DGN.pytorch.aggregators.aggregate_softmax": [[106, 119], ["torch.exp", "adj.unsqueeze.unsqueeze", "torch.mul", "torch.sum", "torch.sum", "torch.mul", "torch.eye().unsqueeze", "torch.div", "torch.eye"], "function", ["None"], []], "home.repos.pwc.inspect_result.Saro00_DGN.pytorch.aggregators.aggregate_softmin": [[121, 124], ["aggregators.aggregate_softmax"], "function", ["home.repos.pwc.inspect_result.Saro00_DGN.pytorch.aggregators.aggregate_softmax"], []], "home.repos.pwc.inspect_result.Saro00_DGN.pytorch.aggregators.aggregate_moment_rooted": [[126, 135], ["torch.sum", "aggregators.aggregate_mean", "torch.div", "torch.sum", "torch.sign", "torch.pow", "torch.eye().unsqueeze", "torch.mul", "torch.pow", "adj.unsqueeze", "torch.abs", "torch.eye", "aggregate_mean.unsqueeze"], "function", ["home.repos.pwc.inspect_result.Saro00_DGN.dgl.aggregators.aggregate_mean"], []], "home.repos.pwc.inspect_result.Saro00_DGN.pytorch.aggregators.aggregate_moment_div_stdn": [[137, 146], ["torch.sum", "aggregators.aggregate_mean", "torch.div", "torch.eye().unsqueeze", "torch.sum", "torch.pow", "torch.mul", "aggregators.aggregate_std", "torch.eye", "torch.pow", "adj.unsqueeze", "aggregate_mean.unsqueeze"], "function", ["home.repos.pwc.inspect_result.Saro00_DGN.dgl.aggregators.aggregate_mean", "home.repos.pwc.inspect_result.Saro00_DGN.dgl.aggregators.aggregate_std"], []], "home.repos.pwc.inspect_result.Saro00_DGN.pytorch.aggregators.aggregate_moment_2": [[148, 150], ["aggregators.aggregate_moment_rooted"], "function", ["home.repos.pwc.inspect_result.Saro00_DGN.pytorch.aggregators.aggregate_moment_rooted"], []], "home.repos.pwc.inspect_result.Saro00_DGN.pytorch.aggregators.aggregate_moment_3": [[152, 154], ["aggregators.aggregate_moment_rooted"], "function", ["home.repos.pwc.inspect_result.Saro00_DGN.pytorch.aggregators.aggregate_moment_rooted"], []], "home.repos.pwc.inspect_result.Saro00_DGN.pytorch.aggregators.aggregate_moment_4": [[156, 158], ["aggregators.aggregate_moment_rooted"], "function", ["home.repos.pwc.inspect_result.Saro00_DGN.pytorch.aggregators.aggregate_moment_rooted"], []], "home.repos.pwc.inspect_result.Saro00_DGN.pytorch.aggregators.aggregate_moment_5": [[160, 162], ["aggregators.aggregate_moment_rooted"], "function", ["home.repos.pwc.inspect_result.Saro00_DGN.pytorch.aggregators.aggregate_moment_rooted"], []], "home.repos.pwc.inspect_result.Saro00_DGN.pytorch.aggregators.aggregate_mean_amplified": [[164, 168], ["aggregators.aggregate_mean", "scalers.scale_amplification"], "function", ["home.repos.pwc.inspect_result.Saro00_DGN.dgl.aggregators.aggregate_mean", "home.repos.pwc.inspect_result.Saro00_DGN.dgl.scalers.scale_amplification"], []], "home.repos.pwc.inspect_result.Saro00_DGN.pytorch.aggregators.aggregate_mean_attenuated": [[170, 174], ["aggregators.aggregate_mean", "scalers.scale_attenuation"], "function", ["home.repos.pwc.inspect_result.Saro00_DGN.dgl.aggregators.aggregate_mean", "home.repos.pwc.inspect_result.Saro00_DGN.dgl.scalers.scale_attenuation"], []], "home.repos.pwc.inspect_result.Saro00_DGN.pytorch.aggregators.get_eig_adjacency": [[176, 201], ["list", "eigen_agg.get_adjacency_from_gradient_of_features", "torch.acos", "torch.sum", "torch.max", "adj.abs", "torch.abs"], "function", ["home.repos.pwc.inspect_result.Saro00_DGN.pytorch.eigen_agg.get_adjacency_from_gradient_of_features"], []], "home.repos.pwc.inspect_result.Saro00_DGN.pytorch.aggregators.aggregate_dirs": [[203, 227], ["agg_type.lower.lower", "aggregators.get_eig_adjacency", "get_eig_adjacency.items", "torch.cat", "ValueError", "eigvec.to", "aggregators.aggregate_sum", "X_agg.append", "aggregators.aggregate_sum", "X_agg.append", "this_adj.abs"], "function", ["home.repos.pwc.inspect_result.Saro00_DGN.pytorch.eigen_agg.get_eig_adjacency", "home.repos.pwc.inspect_result.Saro00_DGN.dgl.aggregators.aggregate_sum", "home.repos.pwc.inspect_result.Saro00_DGN.dgl.aggregators.aggregate_sum"], []], "home.repos.pwc.inspect_result.Saro00_DGN.pytorch.eigen_agg.get_laplacian_matrix": [[11, 43], ["torch.arange", "torch.sum", "torch.zeros_like", "torch.matmul"], "function", ["None"], ["", "def", "get_laplacian_matrix", "(", "adj", ",", "normalize_L", ")", ":", "\n", "    ", "r\"\"\"\n    Get the Laplacian/normalized Laplacian matrices from a batch of adjacency matrices\n    Parameters\n    --------------\n        adj: tensor(..., N, N)\n            Batches of symmetric adjacency matrices\n        \n        normalize_L: bool\n            Whether to normalize the Laplacian matrix\n            If `False`, then `L = D - A`\n            If `True`, then `L = D^-1 (D - A)`\n    Returns\n    -------------\n        L: tensor(..., N, N)\n            Resulting Laplacian matrix\n    \"\"\"", "\n", "\n", "# Apply the equation L = D - A", "\n", "N", "=", "adj", ".", "shape", "[", "-", "1", "]", "\n", "arr", "=", "torch", ".", "arange", "(", "N", ")", "\n", "L", "=", "-", "adj", "\n", "D", "=", "torch", ".", "sum", "(", "adj", ",", "dim", "=", "-", "1", ")", "\n", "L", "[", "...", ",", "arr", ",", "arr", "]", "=", "D", "\n", "\n", "# Normalize by the degree : L = D^-1 (D - A)", "\n", "if", "normalize_L", ":", "\n", "        ", "Dinv", "=", "torch", ".", "zeros_like", "(", "L", ")", "\n", "Dinv", "[", "...", ",", "arr", ",", "arr", "]", "=", "D", "**", "-", "1", "\n", "L", "=", "torch", ".", "matmul", "(", "Dinv", ",", "L", ")", "\n", "\n", "", "return", "L", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.pytorch.eigen_agg.get_k_lowest_eig": [[45, 154], ["list", "eigen_agg.get_laplacian_matrix", "torch.symeig", "eigval_all.to.to", "eigvec_all.to.to", "torch.argsort", "torch.argsort.unsqueeze().expand", "torch.gather", "torch.gather", "range", "torch.stack().view", "adj.view.unsqueeze", "get_laplacian_matrix.cpu", "eigval_all.to.abs", "torch.sum", "adj.view.view", "torch.argsort.unsqueeze", "torch.stack().view.append", "torch.stack", "this_eigval.abs", "torch.zeros", "torch.zeros", "torch.zeros", "range", "torch.zeros", "range", "torch.stack().view.append", "torch.round", "torch.unique", "len", "torch.mean", "torch.argmax", "len", "enumerate", "max", "torch.where", "torch.abs", "torch.where", "max", "max", "torch.where"], "function", ["home.repos.pwc.inspect_result.Saro00_DGN.pytorch.eigen_agg.get_laplacian_matrix"], ["", "def", "get_k_lowest_eig", "(", "adj", ",", "k", ")", ":", "\n", "    ", "r\"\"\"\n    Compute the k-lowest eigenvectors of the Laplacian matrix\n    for each connected components of the graph. If there are disconnected\n    graphs, then the first k eigenvectors are computed for each sub-graph\n    separately.\n    Parameters\n    --------------\n        adj: tensor(..., N, N)\n            Batches of symmetric adjacency matrices\n        k: int\n            Compute the k-th smallest eigenvectors and eigenvalues.\n        \n        normalize_L: bool\n            Whether to normalize the Laplacian matrix\n            If `False`, then `L = D - A`\n            If `True`, then `L = D^-1 (D - A)`\n    Returns\n    -------------\n        eigvec: tensor(..., N, k)\n            Resulting k-lowest eigenvectors of the Laplacian matrix of each sub-graph,\n            with the same batching as the `adj` tensor.\n            The dim==-1 represents the k-th vectors.\n            The dim==-2 represents the N elements of each vector. \n            If the a given graph is disconnected, it will give the first ``k`` eigenvector\n            of each sub-graph, and will force the first eigenvector to be 0-vectors.\n            If there are ``m`` eigenvectors for a given sub-graph, with ``m < k``, it will\n            return 0-vectors for all eigenvectors ``> m``\n    \"\"\"", "\n", "\n", "# Reshape as a 3D tensor for easier looping along batches", "\n", "device", "=", "adj", ".", "device", "\n", "shape", "=", "list", "(", "adj", ".", "shape", ")", "\n", "if", "adj", ".", "ndim", "==", "2", ":", "\n", "        ", "adj", "=", "adj", ".", "unsqueeze", "(", "0", ")", "\n", "", "elif", "adj", ".", "ndim", ">", "3", ":", "\n", "        ", "adj", "=", "adj", ".", "view", "(", "-", "1", ",", "shape", "[", "-", "2", "]", ",", "shape", "[", "-", "1", "]", ")", "\n", "\n", "", "L", "=", "get_laplacian_matrix", "(", "adj", ",", "normalize_L", "=", "False", ")", "\n", "\n", "# Compute and sort the eigenvectors", "\n", "\n", "eigval_all", ",", "eigvec_all", "=", "torch", ".", "symeig", "(", "L", ".", "cpu", "(", ")", ",", "eigenvectors", "=", "True", ")", "\n", "eigval_all", "=", "eigval_all", ".", "to", "(", "device", ")", "\n", "eigvec_all", "=", "eigvec_all", ".", "to", "(", "device", ")", "\n", "sort_idx", "=", "torch", ".", "argsort", "(", "eigval_all", ".", "abs", "(", ")", ",", "dim", "=", "-", "1", ",", "descending", "=", "False", ")", "\n", "sort_idx_vec", "=", "sort_idx", ".", "unsqueeze", "(", "-", "2", ")", ".", "expand", "(", "eigvec_all", ".", "shape", ")", "\n", "eigval_sort", "=", "torch", ".", "gather", "(", "eigval_all", ",", "dim", "=", "-", "1", ",", "index", "=", "sort_idx", ")", "\n", "eigvec_sort", "=", "torch", ".", "gather", "(", "eigvec_all", ",", "dim", "=", "-", "1", ",", "index", "=", "sort_idx_vec", ")", "\n", "\n", "k_lowest_eigvec", "=", "[", "]", "\n", "\n", "# Loop each graph to detect if some of them are disconnected. If they are disconnected,", "\n", "# then modify the eigenvectors such that the lowest k eigenvectors are returned for", "\n", "# each sub-graph", "\n", "for", "ii", "in", "range", "(", "adj", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "this_eigval", "=", "eigval_sort", "[", "ii", "]", "\n", "num_connected", "=", "torch", ".", "sum", "(", "this_eigval", ".", "abs", "(", ")", "<", "EPS", ")", "\n", "\n", "# If there is a single connected graph, then return the k lowest eigen functions", "\n", "if", "num_connected", "<=", "1", ":", "\n", "            ", "this_eigvec", "=", "eigvec_sort", "[", "ii", ",", ":", ",", ":", "k", "]", "\n", "if", "k", ">", "this_eigvec", ".", "shape", "[", "-", "1", "]", ":", "\n", "                ", "temp_eigvec", "=", "torch", ".", "zeros", "(", "this_eigvec", ".", "shape", "[", "0", "]", ",", "k", ")", "\n", "temp_eigvec", "[", ":", ",", ":", "k", "]", "=", "this_eigvec", "\n", "this_eigvec", "=", "temp_eigvec", "\n", "", "k_lowest_eigvec", ".", "append", "(", "this_eigvec", ")", "\n", "\n", "\n", "# Otherwise, return the k lowest eigen functions for each sub-graph", "\n", "", "elif", "num_connected", ">", "1", ":", "\n", "            ", "eigvec0", "=", "eigvec_sort", "[", "ii", ",", ":", ",", ":", "num_connected", "]", "\n", "unique_idx", "=", "torch", ".", "zeros", "(", "1", ")", "\n", "factor", "=", "100", "\n", "\n", "# Use the eigenvectors with 0 eigenvalues to find the unique sub-graphs", "\n", "# And loop to make sure the number of detected sub-graphs is consistent with the", "\n", "# Number of connected sub-graphs.", "\n", "while", "(", "max", "(", "unique_idx", ")", "+", "1", ")", "!=", "num_connected", ":", "\n", "                ", "eigvec0_round", "=", "torch", ".", "round", "(", "eigvec0", "/", "(", "factor", "*", "EPS", ")", ")", "\n", "_", ",", "unique_idx", "=", "torch", ".", "unique", "(", "eigvec0_round", ",", "return_inverse", "=", "True", ",", "dim", "=", "0", ")", "\n", "\n", "if", "(", "max", "(", "unique_idx", ")", "+", "1", ")", "<", "num_connected", ":", "\n", "                    ", "factor", "=", "(", "factor", "/", "2", ")", "\n", "", "elif", "(", "max", "(", "unique_idx", ")", "+", "1", ")", ">", "num_connected", ":", "\n", "                    ", "factor", "=", "(", "factor", "*", "3", ")", "\n", "\n", "# Find the eigenvectors associated to each sub-graph", "\n", "", "", "sub_graph_factors", "=", "torch", ".", "zeros", "(", "num_connected", ",", "len", "(", "this_eigval", ")", ")", "\n", "for", "sub_ii", "in", "range", "(", "num_connected", ")", ":", "\n", "                ", "sub_idx", "=", "torch", ".", "where", "(", "unique_idx", "==", "sub_ii", ")", "[", "0", "]", "\n", "sub_graph_factors", "[", "sub_ii", ",", ":", "]", "=", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "eigvec_sort", "[", "ii", ",", "sub_idx", ",", ":", "]", ")", ",", "dim", "=", "-", "2", ")", "\n", "", "max_idx", "=", "torch", ".", "argmax", "(", "sub_graph_factors", ",", "dim", "=", "0", ")", "[", "num_connected", ":", "]", "\n", "\n", "\n", "# Concatenate the k lowest eigenvectors of each sub-graph", "\n", "this_k_lowest_eigvec", "=", "torch", ".", "zeros", "(", "len", "(", "this_eigval", ")", ",", "k", ")", "\n", "for", "sub_ii", "in", "range", "(", "num_connected", ")", ":", "\n", "                ", "sub_idx", "=", "torch", ".", "where", "(", "unique_idx", "==", "sub_ii", ")", "[", "0", "]", "\n", "k_lowest_idx", "=", "torch", ".", "where", "(", "max_idx", "==", "sub_ii", ")", "[", "0", "]", "[", ":", "k", "-", "1", "]", "+", "num_connected", "\n", "for", "kk_enum", ",", "kk", "in", "enumerate", "(", "k_lowest_idx", ")", ":", "\n", "                    ", "this_k_lowest_eigvec", "[", "sub_idx", ",", "kk_enum", "+", "1", "]", "=", "eigvec_sort", "[", "ii", ",", "sub_idx", ",", "kk", "]", "\n", "\n", "", "", "k_lowest_eigvec", ".", "append", "(", "this_k_lowest_eigvec", ")", "\n", "\n", "# Stack and Reshape to match the input batch shape", "\n", "", "", "k_lowest_eigvec", "=", "torch", ".", "stack", "(", "k_lowest_eigvec", ",", "dim", "=", "0", ")", ".", "view", "(", "*", "(", "shape", "[", ":", "-", "2", "]", "+", "[", "-", "1", ",", "k", "]", ")", ")", "\n", "\n", "return", "k_lowest_eigvec", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.pytorch.eigen_agg.get_k_lowest_eig_old": [[158, 242], ["list", "eigen_agg.get_laplacian_matrix", "torch.zeros().to", "range", "adj.view.unsqueeze", "torch.svd", "torch.transpose", "range", "torch.zeros().to", "enumerate", "adj.view.view", "torch.zeros", "torch.nonzero().squeeze", "components.append", "torch.zeros", "torch.Size", "torch.zeros", "torch.nonzero", "eigen_agg.get_k_lowest_eig", "torch.cat", "get_k_lowest_eig_connected", "torch.zeros"], "function", ["home.repos.pwc.inspect_result.Saro00_DGN.pytorch.eigen_agg.get_laplacian_matrix", "home.repos.pwc.inspect_result.Saro00_DGN.pytorch.eigen_agg.get_k_lowest_eig"], ["", "def", "get_k_lowest_eig_old", "(", "adj", ",", "k", ",", "normalize_L", ")", ":", "\n", "    ", "r\"\"\"\n    Compute the k-lowest eigenvalues and eigenvectors of the Laplacian matrix\n    for each connected components of the graph.\n    Parameters\n    --------------\n        adj: tensor(..., N, N)\n            Batches of symmetric adjacency matrices\n        k: int\n            Compute the k-th smallest eigenvectors and eigenvalues.\n        \n        normalize_L: bool\n            Whether to normalize the Laplacian matrix\n            If `False`, then `L = D - A`\n            If `True`, then `L = D^-1 (D - A)`\n    Returns\n    -------------\n        eigval: tensor(..., k)\n            Resulting k-lowest eigenvalues of the Laplacian matrix,\n            with the same batching as the `adj` tensor\n        eigvec: tensor(..., N, k)\n            Resulting k-lowest eigenvectors of the Laplacian matrix,\n            with the same batching as the `adj` tensor.\n            The dim==-1 represents the k-th vectors.\n            The dim==-2 represents the N elements of each vector. \n    \"\"\"", "\n", "\n", "device", "=", "adj", ".", "device", "\n", "# Reshape as a 3D tensor for easier looping along batches", "\n", "shape", "=", "list", "(", "adj", ".", "shape", ")", "\n", "if", "adj", ".", "ndim", "==", "2", ":", "\n", "        ", "adj", "=", "adj", ".", "unsqueeze", "(", "0", ")", "\n", "", "elif", "adj", ".", "ndim", ">", "3", ":", "\n", "        ", "adj", "=", "adj", ".", "view", "(", "-", "1", ",", "shape", "[", "-", "2", "]", ",", "shape", "[", "-", "1", "]", ")", "\n", "\n", "", "L", "=", "get_laplacian_matrix", "(", "adj", ",", "normalize_L", "=", "False", ")", "\n", "\n", "eigvec", "=", "torch", ".", "zeros", "(", "adj", ".", "shape", "[", "0", "]", ",", "adj", ".", "shape", "[", "-", "1", "]", ",", "k", ")", ".", "to", "(", "device", ")", "\n", "for", "ii", "in", "range", "(", "adj", ".", "shape", "[", "0", "]", ")", ":", "\n", "#get singular values decomposition", "\n", "        ", "u", ",", "s", ",", "v", "=", "torch", ".", "svd", "(", "L", "[", "ii", "]", ")", "\n", "#get 0 singular values positions in svd", "\n", "null_mask", "=", "(", "s", "<=", "EPS", ")", "\n", "#get basis of 0 singular space", "\n", "zero_eig_vect", "=", "torch", ".", "transpose", "(", "v", "[", "null_mask", "]", ",", "0", ",", "1", ")", "\n", "assert", "zero_eig_vect", ".", "shape", "[", "0", "]", "==", "adj", ".", "shape", "[", "-", "1", "]", "\n", "\n", "\n", "components", "=", "[", "]", "\n", "for", "jj", "in", "range", "(", "zero_eig_vect", ".", "shape", "[", "-", "1", "]", ")", ":", "\n", "#get the indices of the connected components by getting nonzero entries in the ", "\n", "#0 singular vector associated to the component", "\n", "            ", "compo", "=", "torch", ".", "nonzero", "(", "zero_eig_vect", "[", ":", ",", "jj", "]", ")", ".", "squeeze", "(", ")", "\n", "components", ".", "append", "(", "compo", ")", "\n", "\n", "#get the eigenvalues and eigenvectors of each components", "\n", "", "ii_eigvec", "=", "torch", ".", "zeros", "(", "adj", ".", "shape", "[", "-", "1", "]", ",", "k", ")", ".", "to", "(", "device", ")", "\n", "for", "jj", ",", "compo", "in", "enumerate", "(", "components", ")", ":", "\n", "#select the sub matrix corresponding to the component", "\n", "            ", "sub_adj", "=", "adj", "[", "ii", ",", ":", ",", ":", "]", "[", "compo", "]", ".", "T", "[", "compo", "]", ".", "T", "\n", "\n", "#if a component has only one node, all eigen vectors are 0", "\n", "if", "sub_adj", ".", "shape", "==", "torch", ".", "Size", "(", "[", "]", ")", ":", "\n", "                ", "compo_eigvec", "=", "torch", ".", "zeros", "(", "1", ",", "k", ")", "\n", "ii_eigvec", "[", "compo", ",", ":", "]", "=", "compo_eigvec", "\n", "", "else", ":", "\n", "                ", "dim", "=", "sub_adj", ".", "shape", "[", "0", "]", "\n", "#if the components Laplacian has less eigenvectors than k, add zero vectors in padding", "\n", "if", "k", ">", "dim", ":", "\n", "                    ", "compo_eigval", ",", "compo_eigvec", "=", "get_k_lowest_eig", "(", "sub_adj", ",", "dim", ",", "normalize_L", ")", "\n", "compo_eigvec", "=", "torch", ".", "cat", "(", "(", "compo_eigvec", ",", "torch", ".", "zeros", "(", "1", ",", "dim", ",", "k", "-", "dim", ",", "device", "=", "device", ")", ")", ",", "dim", "=", "2", ")", "\n", "\n", "", "else", ":", "\n", "                    ", "compo_eigval", ",", "compo_eigvec", "=", "get_k_lowest_eig_connected", "(", "sub_adj", ",", "k", ",", "normalize_L", ")", "\n", "\n", "#place the k eigenvectors of each component in a vector using the indices of each nodes ", "\n", "#of the components nodes", "\n", "", "ii_eigvec", "[", "compo", ",", ":", "]", "=", "compo_eigvec", "\n", "", "", "eigvec", "[", "ii", ",", ":", ",", ":", "]", "=", "ii_eigvec", "\n", "\n", "#makes sense for connected graphs but not for disconnected ones so it is left empty. Remove later", "\n", "", "eigval", "=", "[", "]", "\n", "\n", "return", "eigval", ",", "eigvec", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.pytorch.eigen_agg.get_k_lowest_eig_connected_old": [[243, 293], ["list", "eigen_agg.get_laplacian_matrix", "range", "torch.stack().view", "torch.stack().view", "adj.view.unsqueeze", "scipy.sparse.csr_matrix", "scipy.sparse.linalg.eigsh", "torch.stack().view.append", "torch.stack().view.append", "adj.view.view", "L[].clone().detach().cpu().numpy", "torch.Tensor().to", "torch.Tensor().to", "torch.stack", "torch.stack", "L[].clone().detach().cpu", "torch.Tensor", "torch.Tensor", "L[].clone().detach", "L[].clone"], "function", ["home.repos.pwc.inspect_result.Saro00_DGN.pytorch.eigen_agg.get_laplacian_matrix"], ["", "def", "get_k_lowest_eig_connected_old", "(", "adj", ",", "k", ",", "normalize_L", ")", ":", "\n", "    ", "r\"\"\"\n    Compute the k-lowest eigenvalues and eigenvectors of the Laplacian matrix of a connected graph.\n    Parameters\n    --------------\n        adj: tensor(..., N, N)\n            Batches of symmetric adjacency matrices\n        k: int\n            Compute the k-th smallest eigenvectors and eigenvalues.\n        \n        normalize_L: bool\n            Whether to normalize the Laplacian matrix\n            If `False`, then `L = D - A`\n            If `True`, then `L = D^-1 (D - A)`\n    Returns\n    -------------\n        eigval: tensor(..., k)\n            Resulting k-lowest eigenvalues of the Laplacian matrix,\n            with the same batching as the `adj` tensor\n        eigvec: tensor(..., N, k)\n            Resulting k-lowest eigenvectors of the Laplacian matrix,\n            with the same batching as the `adj` tensor.\n            The dim==-1 represents the k-th vectors.\n            The dim==-2 represents the N elements of each vector. \n    \"\"\"", "\n", "\n", "# Reshape as a 3D tensor for easier looping along batches", "\n", "device", "=", "adj", ".", "device", "\n", "shape", "=", "list", "(", "adj", ".", "shape", ")", "\n", "if", "adj", ".", "ndim", "==", "2", ":", "\n", "        ", "adj", "=", "adj", ".", "unsqueeze", "(", "0", ")", "\n", "", "elif", "adj", ".", "ndim", ">", "3", ":", "\n", "        ", "adj", "=", "adj", ".", "view", "(", "-", "1", ",", "shape", "[", "-", "2", "]", ",", "shape", "[", "-", "1", "]", ")", "\n", "\n", "", "L", "=", "get_laplacian_matrix", "(", "adj", ",", "normalize_L", "=", "normalize_L", ")", "\n", "eigvec", "=", "[", "]", "\n", "eigval", "=", "[", "]", "\n", "\n", "# Compute all the k-th smallest eigenvectors and eigenvalues", "\n", "for", "ii", "in", "range", "(", "L", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "Laplacian", "=", "sp", ".", "sparse", ".", "csr_matrix", "(", "L", "[", "ii", ",", ":", ",", ":", "]", ".", "clone", "(", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "w", ",", "v", "=", "sp", ".", "sparse", ".", "linalg", ".", "eigsh", "(", "Laplacian", ",", "k", "=", "k", ",", "which", "=", "'SM'", ",", "tol", "=", "0", ")", "\n", "eigval", ".", "append", "(", "torch", ".", "Tensor", "(", "w", ")", ".", "to", "(", "device", ")", ")", "\n", "eigvec", ".", "append", "(", "torch", ".", "Tensor", "(", "v", ")", ".", "to", "(", "device", ")", ")", "\n", "\n", "# Stack and Reshape to match the input batch shape", "\n", "", "eigval", "=", "torch", ".", "stack", "(", "eigval", ",", "dim", "=", "0", ")", ".", "view", "(", "*", "(", "shape", "[", ":", "-", "2", "]", "+", "[", "k", "]", ")", ")", "\n", "eigvec", "=", "torch", ".", "stack", "(", "eigvec", ",", "dim", "=", "0", ")", ".", "view", "(", "*", "(", "shape", "[", ":", "-", "2", "]", "+", "[", "-", "1", ",", "k", "]", ")", ")", "\n", "\n", "return", "eigval", ",", "eigvec", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.pytorch.eigen_agg.get_adjacency_from_gradient_of_features": [[295, 380], ["torch.abs", "normalization.lower", "normalization.lower", "torch.abs", "torch.eye().to", "features.unsqueeze", "features.unsqueeze", "normalization.lower", "ValueError", "torch.sum", "torch.sum", "torch.sqrt", "torch.sqrt", "torch.eye", "torch.sum", "torch.sum"], "function", ["None"], ["", "def", "get_adjacency_from_gradient_of_features", "(", "adj", ",", "features", ",", "normalization", "=", "'none'", ",", "add_diag", "=", "True", ",", "absolute_adj", "=", "False", ")", ":", "\n", "    ", "r\"\"\"\n    Computes an adjacency matrix from the gradient of the ``features`` on the graph described\n    by the adjacency matrix ``adj``, with different options of normalization. \n    The gradient is a function on the edges, computed from these node features.\n    For 2 nodes ``n_i, n_j`` with node features ``f_i, f_j`` and an edge weight of ``w_ij``,\n    the gradient on edge ``e_ij`` is given by ``e_ij = w_ij * (f_j - f_i)``.\n    If ``X`` is a function of the nodes, then ``matmul(grad_adj, X)`` behaves as the derivative of\n    ``X`` in the direction of the gradient of ``features``.\n    Parameters\n    --------------\n        adj: tensor(..., N, N)\n            Batches of adjacency matrices of graphs\n        features: tensor(..., N)\n            Batches of features on the nodes. These features are used to compute the gradient\n        normalization: str, Optional\n            Normalization strategy for the ``grad_adj`` matrix.\n            - 'none': No normalization is applied\n            \n            - 'row-abs': Normalize such that the absolute sum of each row of ``grad_adj`` is 1.\n              All values below the global variable ``EPS=1e-5`` will be set to 0. \n            - 'in-out-field': Normalize such that the sum of the norm of the input and output field\n              is 1. The input field is the negative values in the ``grad_adj``, while the\n              output field is the positive values. The norm is computed as the root of the squared sum.\n              All values below the global variable ``EPS=1e-5`` will be set to 0. \n              For example, if there are no positive values above EPS for a specific node, then\n              the output field of that specific node will be set to 0.\n            (Default='none')\n        \n        add_diag: bool, Optional\n            Whether to add a diagonal element such as each row of ``grad_adj`` sums to 0.\n            The diagonal is added after the normalization.\n            \n            - If True, ``matmul(grad_adj, X)`` will behave like a forward/backward derivative\n              at the local minima/maxima from the features function.\n            - If False, ``matmul(grad_adj, X)`` will behave similarily to a center derivative\n              with a zero-padding added before the local minima/maxima\n            (Default=True)\n        absolute_adj: bool, Optional\n            Return the absolute value of ``grad_adj``. \n            ``matmul(grad_adj, X)`` becomes a directional smoothing instead of a directional\n            derivative.\n            (Default=False)\n    Returns\n    -------------\n        grad_adj: tensor(..., N, N)\n            Batches of adjacency matrices representing the gradient of the features on the graph.\n            \n    \"\"\"", "\n", "device", "=", "adj", ".", "device", "\n", "# Compute the gradient of the features", "\n", "grad_adj", "=", "(", "adj", "*", "(", "features", ".", "unsqueeze", "(", "-", "2", ")", "-", "features", ".", "unsqueeze", "(", "-", "1", ")", "+", "EPS", ")", ")", "\n", "\n", "# Don't normalize", "\n", "if", "(", "normalization", "is", "None", ")", "or", "(", "normalization", ".", "lower", "(", ")", "==", "'none'", ")", ":", "\n", "        ", "pass", "\n", "\n", "# Normalize by the sum of each row", "\n", "", "elif", "normalization", ".", "lower", "(", ")", "==", "'row-abs'", ":", "\n", "        ", "grad_norm", "=", "torch", ".", "abs", "(", "grad_adj", ")", "\n", "grad_norm", "*=", "grad_norm", ">", "EPS", "\n", "grad_adj", "=", "grad_adj", "/", "(", "torch", ".", "sum", "(", "grad_norm", ",", "dim", "=", "-", "1", ",", "keepdims", "=", "True", ")", "+", "EPS", ")", "\n", "\n", "# Normalize by the input and output vector field", "\n", "", "elif", "normalization", ".", "lower", "(", ")", "==", "'in-out-field'", ":", "\n", "        ", "pos_adj", "=", "grad_adj", "*", "(", "grad_adj", ">", "EPS", ")", "\n", "neg_adj", "=", "grad_adj", "*", "(", "grad_adj", "<", "-", "EPS", ")", "\n", "out_field", "=", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "pos_adj", "**", "2", ",", "dim", "=", "-", "1", ",", "keepdims", "=", "True", ")", ")", "+", "EPS", "\n", "in_field", "=", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "neg_adj", "**", "2", ",", "dim", "=", "-", "1", ",", "keepdims", "=", "True", ")", ")", "+", "EPS", "\n", "in_out_field", "=", "out_field", "+", "in_field", "\n", "grad_adj", "=", "(", "pos_adj", "/", "in_out_field", ")", "+", "(", "neg_adj", "/", "in_out_field", ")", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Unsupported normalization option `{}`'", ")", "\n", "\n", "# Add an element on the diagonal to make each row sum to 0", "\n", "", "if", "add_diag", ":", "\n", "        ", "eye", "=", "torch", ".", "eye", "(", "adj", ".", "shape", "[", "-", "1", "]", ")", ".", "to", "(", "device", ")", "[", "(", "None", ",", ")", "*", "(", "adj", ".", "ndim", "-", "2", ")", "]", "# Unsqueeze multiple times", "\n", "grad_adj", "=", "grad_adj", "-", "(", "eye", "*", "torch", ".", "sum", "(", "grad_adj", ",", "dim", "=", "-", "1", ",", "keepdims", "=", "True", ")", ")", "\n", "\n", "# Compute the absolute value", "\n", "", "if", "absolute_adj", ":", "\n", "        ", "grad_adj", "=", "torch", ".", "abs", "(", "grad_adj", ")", "\n", "\n", "", "return", "grad_adj", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.pytorch.eigen_agg.get_eig_adjacency": [[382, 474], ["eigen_agg.get_k_lowest_eig", "list", "max", "eigen_agg.get_adjacency_from_gradient_of_features", "torch.acos", "torch.sum", "torch.max", "adj.abs", "torch.abs"], "function", ["home.repos.pwc.inspect_result.Saro00_DGN.pytorch.eigen_agg.get_k_lowest_eig", "home.repos.pwc.inspect_result.Saro00_DGN.pytorch.eigen_agg.get_adjacency_from_gradient_of_features"], ["", "def", "get_eig_adjacency", "(", "adj", ",", "eig_idx", ",", "normalization", "=", "'none'", ",", "add_diag", "=", "True", ",", "absolute_adj", "=", "False", ",", "normalize_L", "=", "False", ",", "eig_acos", "=", "True", ")", ":", "\n", "    ", "r\"\"\"\n    Computes an adjacency matrix from the gradient of the eigenvectors of the graph Laplacian,\n    with the graph being described by the adjacency matrix ``adj``. \n    The gradient is a function on the edges, computed from these node features.\n    For 2 nodes ``n_i, n_j`` with node features ``f_i, f_j`` and an edge weight of ``w_ij``,\n    the gradient on edge ``e_ij`` is given by ``e_ij = w_ij * (f_j - f_i)``.\n    If ``X`` is a function of the nodes, then ``matmul(grad_adj, X)`` behaves as the derivative of\n    ``X`` in the direction of the gradient of ``features``.\n    Parameters\n    --------------\n        adj: tensor(..., N, N)\n            Batches of adjacency matrices of graphs. It is used to compute the Laplacian matrix,\n            and the eigenvectors of the Laplacian.\n        eig_idx: int, iterator(int)\n            Indexes of the eigenvectors to compute, sorted by smallest eigenvalues. \n            The current function is efficient for low indexes.\n            e.g. ``eig_idx=[1, 2, 4]`` will compute the eigenvectors ``[0, 1, 2, 3, 4]``, but will\n            then ignore the eigenvectors 0 and 3.\n            If ``0`` is in the ``eig_idx``, then the normalized adjacency matrix is returned for\n            that specific index, no matter the normalization chosen.\n        normalization: str, Optional\n            Normalization strategy for the ``grad_adj`` matrix. It does not apply to eig_idx==0.\n            - 'none': No normalization is applied\n            \n            - 'row-abs': Normalize such that the absolute sum of each row of ``grad_adj`` is 1.\n              All values below the global variable ``EPS=1e-5`` will be set to 0. \n            - 'in-out-field': Normalize such that the the norm of the input and output field\n              are 1. The input field is the negative values in the ``grad_adj``, while the\n              output field is the positive values. The norm is computed as the root of the squared sum.\n              All values below the global variable ``EPS=1e-5`` will be set to 0. \n              For example, if there are no positive values above EPS for a specific node, then\n              the output field of that specific node will be set to 0.\n            (Default='none')\n        \n        add_diag: bool, Optional\n            Whether to add a diagonal element such as each row of ``grad_adj`` sums to 0.\n            The diagonal is added after the normalization. It does not apply to eig_idx==0.\n            \n            - If True, ``matmul(grad_adj, X)`` will behave like a forward/backward derivative\n              at the local minima/maxima from the features function.\n            - If False, ``matmul(grad_adj, X)`` will behave similarily to a center derivative\n              with a zero-padding added before the local minima/maxima\n            (Default=True)\n        absolute_adj: bool, Optional\n            Return the absolute value of ``grad_adj``. \n            ``matmul(grad_adj, X)`` becomes a directional smoothing instead of a directional\n            derivative.\n            (Default=False)\n        normalize_L: bool, Optional\n            Whether to normalize the Laplacian matrix\n            If `False`, then `L = D - A`\n            If `True`, then `L = D^-1 (D - A)`\n            (Default=False)\n        \n        eig_acos: bool, Optional\n            Whether to compute the arcosine of the eigenvectors instead of the eigenvector.\n            This will sort-of `linearize` the eigenvector. If ``normalize=='in-out-field'``,\n            this parameter shouldn't change anything, appart from numerical error. For other\n            normalization, it will have an important impact, especially near the borders\n            of the graph.\n    Returns\n    -------------\n        eig_adj: dict(tensor(..., N, N))\n            Dictionary of Batches of adjacency matrices representing the gradient of\n            the eigenvectors on the graph. Each key corresponds to a specific ``eig_idx``,\n            and the value corresponds to the associated batch of eigen-adjacencies.\n            \n    \"\"\"", "\n", "\n", "# Convert the eig_idx into a list", "\n", "try", ":", "\n", "        ", "eig_idx", "=", "list", "(", "eig_idx", ")", "\n", "", "except", ":", "\n", "        ", "eig_idx", "=", "[", "eig_idx", "]", "\n", "\n", "# Generate an adjacency matrix for each eigenvectors from `eig_idx`", "\n", "", "eigvec", "=", "get_k_lowest_eig", "(", "adj", ",", "max", "(", "eig_idx", ")", "+", "1", ",", "normalize_L", "=", "normalize_L", ")", "\n", "eig_adj", "=", "{", "}", "\n", "for", "ii", "in", "eig_idx", ":", "\n", "        ", "if", "ii", "!=", "0", ":", "\n", "            ", "this_eigvec", "=", "eigvec", "[", "...", ",", "ii", "]", "\n", "if", "eig_acos", ":", "\n", "                ", "this_eigvec", "=", "torch", ".", "acos", "(", "this_eigvec", "/", "torch", ".", "max", "(", "torch", ".", "abs", "(", "this_eigvec", ")", ")", ")", "\n", "", "w_adj", "=", "get_adjacency_from_gradient_of_features", "(", "adj", ",", "features", "=", "this_eigvec", ",", "\n", "normalization", "=", "normalization", ",", "add_diag", "=", "add_diag", ",", "absolute_adj", "=", "absolute_adj", ")", "\n", "eig_adj", "[", "ii", "]", "=", "w_adj", "\n", "\n", "", "else", ":", "\n", "            ", "eig_adj", "[", "ii", "]", "=", "adj", "/", "(", "torch", ".", "sum", "(", "adj", ".", "abs", "(", ")", ",", "dim", "=", "-", "1", ",", "keepdims", "=", "True", ")", "+", "EPS", ")", "\n", "\n", "", "", "return", "eig_adj", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.pytorch.eigen_agg.aggregate_sum": [[476, 498], ["torch.sum", "torch.mul", "torch.eye().unsqueeze", "adj.unsqueeze", "torch.eye"], "function", ["None"], ["", "def", "aggregate_sum", "(", "X", ",", "adj", ",", "self_loop", "=", "False", ",", "device", "=", "'cpu'", ",", "avg_d", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Aggregate each node by the sum of it's neighbours, weighted by the edge between the nodes.\n    Parameters\n    --------------\n        X: tensor(..., N, N, Din)\n            Input feature tensor to aggregate.\n        adj: tensor(..., N, N)\n            Batches of adjacency matrices of graphs.\n    Returns\n    -------------\n        X_sum: tensor(..., N, N, Din)\n            Aggregation results\n            \n    \"\"\"", "\n", "\n", "if", "self_loop", ":", "# add self connections", "\n", "        ", "N", "=", "adj", ".", "shape", "[", "-", "1", "]", "\n", "adj", "=", "adj", "+", "torch", ".", "eye", "(", "N", ",", "device", "=", "device", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "", "X_sum", "=", "torch", ".", "sum", "(", "torch", ".", "mul", "(", "X", ",", "adj", ".", "unsqueeze", "(", "-", "1", ")", ")", ",", "dim", "=", "-", "2", ")", "\n", "return", "X_sum", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.pytorch.eigen_agg.aggregate_eigs": [[500, 599], ["agg_type.lower.lower", "eigen_agg.get_eig_adjacency", "get_eig_adjacency.items", "torch.cat", "ValueError", "eigen_agg.aggregate_sum", "X_agg.append", "eigen_agg.aggregate_sum", "X_agg.append", "this_adj.abs"], "function", ["home.repos.pwc.inspect_result.Saro00_DGN.pytorch.eigen_agg.get_eig_adjacency", "home.repos.pwc.inspect_result.Saro00_DGN.dgl.aggregators.aggregate_sum", "home.repos.pwc.inspect_result.Saro00_DGN.dgl.aggregators.aggregate_sum"], ["", "def", "aggregate_eigs", "(", "X", ",", "adj", ",", "eig_idx", ",", "normalization", "=", "'none'", ",", "add_diag", "=", "True", ",", "agg_type", "=", "'derivative'", ",", "normalize_L", "=", "False", ",", "\n", "eig_acos", "=", "True", ",", "self_loop", "=", "False", ",", "device", "=", "'cpu'", ",", "avg_d", "=", "None", ")", ":", "\n", "    ", "r\"\"\"\n    Aggregate the features ``X`` in the direction of the gradient of the Laplacian \n    eigenvectors ``eig_idx`` such as the indexes are sorted by lowest eigenvalues.\n    Parameters\n    --------------\n        X: tensor(..., N, N, Din)\n            Input feature tensor to aggregate.\n        adj: tensor(..., N, N)\n            Batches of adjacency matrices of graphs. It is used to compute the Laplacian matrix,\n            and the eigenvectors of the Laplacian.\n        eig_idx: int, iterator(int)\n            Indexes of the eigenvectors to compute, sorted by smallest eigenvalues. \n            The current function is efficient for low indexes.\n            e.g. ``eig_idx=[1, 2, 4]`` will compute the eigenvectors ``[0, 1, 2, 3, 4]``, but will\n            then ignore the eigenvectors 0 and 3. \n            If ``0`` is in the ``eig_idx``, then a mean aggregation is done for that specific index.\n        normalization: str, Optional\n            Normalization strategy for the ``grad_adj`` matrix.\n            - 'none': No normalization is applied\n            \n            - 'row-abs': Normalize such that the absolute sum of each row of ``grad_adj`` is 1.\n              All values below the global variable ``EPS=1e-5`` will be set to 0. \n            - 'in-out-field': Normalize such that the the norm of the input and output field\n              are 1. The input field is the negative values in the ``grad_adj``, while the\n              output field is the positive values. The norm is computed as the root of the squared sum.\n              All values below the global variable ``EPS=1e-5`` will be set to 0. \n              For example, if there are no positive values above EPS for a specific node, then\n              the output field of that specific node will be set to 0.\n            (Default='none')\n        \n        add_diag: bool, Optional\n            Whether to add a diagonal element such as each row of ``grad_adj`` sums to 0.\n            The diagonal is added after the normalization.\n            \n            - If True, ``matmul(grad_adj, X)`` will behave like a forward/backward derivative\n              at the local minima/maxima from the features function.\n            - If False, ``matmul(grad_adj, X)`` will behave similarily to a center derivative\n              with a zero-padding added before the local minima/maxima\n            (Default=True)\n        agg_type: str, Optional\n            Aggregation options\n            - 'derivative': Use the eigen-adjacency to compute the directional derivative\n              of the signal, then compute the absolute value of the derivative.\n            - 'smoothing': Use the absolute value of the eigen-adjacency to compute the\n              directional smoothing of the signal.\n            - 'both': Use both methods.\n            \n            (Default='derivative')\n        normalize_L: bool, Optional\n            Whether to normalize the Laplacian matrix\n            If `False`, then `L = D - A`\n            If `True`, then `L = D^-1 (D - A)`\n            (Default=False)\n        \n        eig_acos: bool, Optional\n            Whether to compute the arcosine of the eigenvectors instead of the eigenvector.\n            This will sort-of `linearize` the eigenvector. If ``normalize=='in-out-field'``,\n            this parameter shouldn't change anything, appart from numerical error. For other\n            normalization, it will have an important impact, especially near the borders\n            of the graph.\n        self_loop: bool, Optional\n            Whether to add a self-loop in the aggregation\n            (Default=False)\n        device:\n            Torch device used to run the computation\n            (Default='cpu')\n        avg_d: Ignored\n            Ignored parameter. Here for compatibility\n    Returns\n    -------------\n        X_agg: tensor(..., N, N, len(eig_idx)*Din) or tensor(..., N, N, len(eig_idx)*2*Din)\n            Aggregation results for each eigenvector, concatenated alongside the last dimension\n            The last dimension is of size ``len(eig_idx)*2*Din`` when ``agg_type=='both'``.\n            \n    \"\"\"", "\n", "\n", "agg_type", "=", "agg_type", ".", "lower", "(", ")", "\n", "if", "agg_type", "not", "in", "[", "'derivative'", ",", "'smoothing'", ",", "'both'", "]", ":", "\n", "        ", "raise", "ValueError", "(", "f'Unknown agg_type \"{agg_type}\"'", ")", "\n", "\n", "# Get dictionary of adjacency matrices", "\n", "", "adj_dict", "=", "get_eig_adjacency", "(", "adj", ",", "eig_idx", ",", "normalization", "=", "normalization", ",", "add_diag", "=", "add_diag", ",", "\n", "absolute_adj", "=", "False", ",", "normalize_L", "=", "normalize_L", ",", "eig_acos", "=", "eig_acos", ")", "\n", "\n", "X_agg", "=", "[", "]", "\n", "for", "ii", ",", "this_adj", "in", "adj_dict", ".", "items", "(", ")", ":", "\n", "# Compute derivative", "\n", "        ", "if", "(", "(", "agg_type", "==", "'derivative'", ")", "or", "(", "agg_type", "==", "'both'", ")", ")", "and", "(", "ii", "!=", "0", ")", ":", "\n", "            ", "this_agg", "=", "aggregate_sum", "(", "X", ",", "this_adj", ",", "self_loop", "=", "self_loop", ",", "device", "=", "device", ")", "\n", "X_agg", ".", "append", "(", "this_agg", ")", "\n", "\n", "# Compute smoothing", "\n", "", "if", "(", "agg_type", "==", "'smoothing'", ")", "or", "(", "agg_type", "==", "'both'", ")", "or", "(", "ii", "==", "0", ")", ":", "\n", "            ", "this_agg", "=", "aggregate_sum", "(", "X", ",", "this_adj", ".", "abs", "(", ")", ",", "self_loop", "=", "self_loop", ",", "device", "=", "device", ")", "\n", "X_agg", ".", "append", "(", "this_agg", ")", "\n", "\n", "", "", "return", "torch", ".", "cat", "(", "X_agg", ",", "dim", "=", "-", "1", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Saro00_DGN.dgl.scalers.scale_identity": [[7, 9], ["None"], "function", ["None"], ["def", "scale_identity", "(", "h", ",", "D", "=", "None", ",", "avg_d", "=", "None", ")", ":", "\n", "    ", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.dgl.scalers.scale_amplification": [[11, 14], ["numpy.log"], "function", ["None"], ["", "def", "scale_amplification", "(", "h", ",", "D", ",", "avg_d", ")", ":", "\n", "# log(D + 1) / d * h     where d is the average of the ``log(D + 1)`` in the training set", "\n", "    ", "return", "h", "*", "(", "np", ".", "log", "(", "D", "+", "1", ")", "/", "avg_d", "[", "\"log\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.dgl.scalers.scale_attenuation": [[16, 19], ["numpy.log"], "function", ["None"], ["", "def", "scale_attenuation", "(", "h", ",", "D", ",", "avg_d", ")", ":", "\n", "# (log(D + 1))^-1 / d * X     where d is the average of the ``log(D + 1))^-1`` in the training set", "\n", "    ", "return", "h", "*", "(", "avg_d", "[", "\"log\"", "]", "/", "np", ".", "log", "(", "D", "+", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.dgl.dgn_layer.DGNLayerComplex.__init__": [[12, 33], ["torch.Module.__init__", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "layers.MLP", "layers.MLP", "len", "len"], "methods", ["home.repos.pwc.inspect_result.Saro00_DGN.dgl.dgn_layer.DGNLayer.__init__"], ["class", "VirtualNode", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "dim", ",", "dropout", ",", "batch_norm", "=", "False", ",", "bias", "=", "True", ",", "residual", "=", "True", ",", "vn_type", "=", "'mean'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "vn_type", "=", "vn_type", ".", "lower", "(", ")", "\n", "self", ".", "fc_layer", "=", "FCLayer", "(", "in_size", "=", "dim", ",", "out_size", "=", "dim", ",", "activation", "=", "'relu'", ",", "dropout", "=", "dropout", ",", "\n", "b_norm", "=", "batch_norm", ",", "bias", "=", "bias", ")", "\n", "self", ".", "residual", "=", "residual", "\n", "\n", "", "def", "forward", "(", "self", ",", "g", ",", "h", ",", "vn_h", ")", ":", "\n", "\n", "        ", "g", ".", "ndata", "[", "'h'", "]", "=", "h", "\n", "\n", "# Pool the features", "\n", "if", "self", ".", "vn_type", "==", "'mean'", ":", "\n", "            ", "pool", "=", "mean_nodes", "(", "g", ",", "'h'", ")", "\n", "", "elif", "self", ".", "vn_type", "==", "'sum'", ":", "\n", "            ", "pool", "=", "sum_nodes", "(", "g", ",", "'h'", ")", "\n", "", "elif", "self", ".", "vn_type", "==", "'logsum'", ":", "\n", "            ", "pool", "=", "mean_nodes", "(", "g", ",", "'h'", ")", "\n", "lognum", "=", "torch", ".", "log", "(", "torch", ".", "tensor", "(", "g", ".", "batch_num_nodes", ",", "dtype", "=", "h", ".", "dtype", ",", "device", "=", "h", ".", "device", ")", ")", "\n", "pool", "=", "pool", "*", "lognum", ".", "unsqueeze", "(", "-", "1", ")", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.dgl.dgn_layer.DGNLayerComplex.pretrans_edges": [[34, 40], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "dgn_layer.DGNLayerComplex.pretrans"], "methods", ["None"], ["            ", "raise", "ValueError", "(", "f'Undefined input \"{self.pooling}\". Accepted values are \"sum\", \"mean\", \"logsum\"'", ")", "\n", "\n", "# Compute the new virtual node features", "\n", "", "vn_h_temp", "=", "self", ".", "fc_layer", ".", "forward", "(", "vn_h", "+", "pool", ")", "\n", "if", "self", ".", "residual", ":", "\n", "            ", "vn_h", "=", "vn_h", "+", "vn_h_temp", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.dgl.dgn_layer.DGNLayerComplex.message_func": [[41, 44], ["edges.data[].to", "edges.data[].to", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available"], "methods", ["None"], ["            ", "vn_h", "=", "vn_h_temp", "\n", "\n", "# Add the virtual node value to the graph features", "\n", "", "temp_h", "=", "torch", ".", "cat", "(", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.dgl.dgn_layer.DGNLayerComplex.reduce_func": [[45, 58], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "aggregate", "scale"], "methods", ["None"], ["[", "vn_h", "[", "ii", ":", "ii", "+", "1", "]", ".", "repeat", "(", "num_nodes", ",", "1", ")", "for", "ii", ",", "num_nodes", "in", "enumerate", "(", "g", ".", "batch_num_nodes", ")", "]", ",", "\n", "dim", "=", "0", ")", "\n", "h", "=", "h", "+", "temp_h", "\n", "\n", "return", "vn_h", ",", "h", "\n", "\n", "\n", "", "", "class", "DGNLayerComplex", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "in_dim", ",", "out_dim", ",", "dropout", ",", "graph_norm", ",", "batch_norm", ",", "aggregators", ",", "scalers", ",", "avg_d", ",", "residual", ",", "\n", "edge_features", ",", "edge_dim", ",", "pretrans_layers", "=", "1", ",", "posttrans_layers", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "graph_norm", "=", "graph_norm", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.dgl.dgn_layer.DGNLayerComplex.posttrans_nodes": [[59, 61], ["dgn_layer.DGNLayerComplex.posttrans"], "methods", ["None"], ["self", ".", "batch_norm", "=", "batch_norm", "\n", "self", ".", "edge_features", "=", "edge_features", "\n", "self", ".", "residual", "=", "residual", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.dgl.dgn_layer.DGNLayerComplex.forward": [[62, 92], ["g.apply_edges", "g.update_all", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "dgn_layer.DGNLayerComplex.posttrans", "torch.relu", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "torch.dropout", "dgn_layer.DGNLayerComplex.batchnorm_h"], "methods", ["None"], ["\n", "self", ".", "aggregators", "=", "aggregators", "\n", "self", ".", "scalers", "=", "scalers", "\n", "\n", "self", ".", "batchnorm_h", "=", "nn", ".", "BatchNorm1d", "(", "out_dim", ")", "\n", "self", ".", "pretrans", "=", "MLP", "(", "in_size", "=", "2", "*", "in_dim", "+", "(", "edge_dim", "if", "edge_features", "else", "0", ")", ",", "hidden_size", "=", "in_dim", ",", "\n", "out_size", "=", "in_dim", ",", "layers", "=", "pretrans_layers", ",", "mid_activation", "=", "'relu'", ",", "last_activation", "=", "'none'", ")", "\n", "self", ".", "posttrans", "=", "MLP", "(", "in_size", "=", "(", "len", "(", "aggregators", ")", "*", "len", "(", "scalers", ")", "+", "1", ")", "*", "in_dim", ",", "hidden_size", "=", "out_dim", ",", "\n", "out_size", "=", "out_dim", ",", "layers", "=", "posttrans_layers", ",", "mid_activation", "=", "'relu'", ",", "last_activation", "=", "'none'", ")", "\n", "self", ".", "avg_d", "=", "avg_d", "\n", "if", "in_dim", "!=", "out_dim", ":", "\n", "            ", "self", ".", "residual", "=", "False", "\n", "\n", "", "", "def", "pretrans_edges", "(", "self", ",", "edges", ")", ":", "\n", "        ", "if", "self", ".", "edge_features", ":", "\n", "            ", "z2", "=", "torch", ".", "cat", "(", "[", "edges", ".", "src", "[", "'h'", "]", ",", "edges", ".", "dst", "[", "'h'", "]", ",", "edges", ".", "data", "[", "'ef'", "]", "]", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "z2", "=", "torch", ".", "cat", "(", "[", "edges", ".", "src", "[", "'h'", "]", ",", "edges", ".", "dst", "[", "'h'", "]", "]", ",", "dim", "=", "1", ")", "\n", "", "return", "{", "'e'", ":", "self", ".", "pretrans", "(", "z2", ")", ",", "'eig_s'", ":", "edges", ".", "src", "[", "'eig'", "]", ",", "'eig_d'", ":", "edges", ".", "dst", "[", "'eig'", "]", "}", "\n", "\n", "", "def", "message_func", "(", "self", ",", "edges", ")", ":", "\n", "        ", "return", "{", "'e'", ":", "edges", ".", "data", "[", "'e'", "]", ",", "'eig_s'", ":", "edges", ".", "data", "[", "'eig_s'", "]", ".", "to", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", ",", "\n", "'eig_d'", ":", "edges", ".", "data", "[", "'eig_d'", "]", ".", "to", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "}", "\n", "\n", "", "def", "reduce_func", "(", "self", ",", "nodes", ")", ":", "\n", "        ", "h_in", "=", "nodes", ".", "data", "[", "'h'", "]", "\n", "h", "=", "nodes", ".", "mailbox", "[", "'e'", "]", "\n", "eig_s", "=", "nodes", ".", "mailbox", "[", "'eig_s'", "]", "\n", "eig_d", "=", "nodes", ".", "mailbox", "[", "'eig_d'", "]", "\n", "D", "=", "h", ".", "shape", "[", "-", "2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.dgl.dgn_layer.DGNLayerSimple.__init__": [[95, 112], ["torch.Module.__init__", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "layers.MLP", "len", "len"], "methods", ["home.repos.pwc.inspect_result.Saro00_DGN.dgl.dgn_layer.DGNLayer.__init__"], ["if", "len", "(", "self", ".", "scalers", ")", ">", "1", ":", "\n", "            ", "h", "=", "torch", ".", "cat", "(", "[", "scale", "(", "h", ",", "D", "=", "D", ",", "avg_d", "=", "self", ".", "avg_d", ")", "for", "scale", "in", "self", ".", "scalers", "]", ",", "dim", "=", "1", ")", "\n", "\n", "", "return", "{", "'h'", ":", "h", "}", "\n", "\n", "", "def", "posttrans_nodes", "(", "self", ",", "nodes", ")", ":", "\n", "        ", "return", "self", ".", "posttrans", "(", "nodes", ".", "data", "[", "'h'", "]", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "g", ",", "h", ",", "e", ",", "snorm_n", ")", ":", "\n", "\n", "        ", "h_in", "=", "h", "\n", "g", ".", "ndata", "[", "'h'", "]", "=", "h", "\n", "\n", "if", "self", ".", "edge_features", ":", "# add the edges information only if edge_features = True", "\n", "            ", "g", ".", "edata", "[", "'ef'", "]", "=", "e", "\n", "\n", "# pretransformation", "\n", "", "g", ".", "apply_edges", "(", "self", ".", "pretrans_edges", ")", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.dgl.dgn_layer.DGNLayerSimple.pretrans_edges": [[113, 115], ["None"], "methods", ["None"], ["\n", "# aggregation", "\n", "g", ".", "update_all", "(", "self", ".", "message_func", ",", "self", ".", "reduce_func", ")", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.dgl.dgn_layer.DGNLayerSimple.message_func": [[116, 119], ["edges.data[].to", "edges.data[].to", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available"], "methods", ["None"], ["h", "=", "torch", ".", "cat", "(", "[", "h", ",", "g", ".", "ndata", "[", "'h'", "]", "]", ",", "dim", "=", "1", ")", "\n", "\n", "# posttransformation", "\n", "h", "=", "self", ".", "posttrans", "(", "h", ")", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.dgl.dgn_layer.DGNLayerSimple.reduce_func": [[120, 133], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "aggregate", "scale"], "methods", ["None"], ["\n", "# graph and batch normalization and residual", "\n", "if", "self", ".", "graph_norm", ":", "\n", "            ", "h", "=", "h", "*", "snorm_n", "\n", "", "if", "self", ".", "batch_norm", ":", "\n", "            ", "h", "=", "self", ".", "batchnorm_h", "(", "h", ")", "\n", "", "h", "=", "F", ".", "relu", "(", "h", ")", "\n", "if", "self", ".", "residual", ":", "\n", "            ", "h", "=", "h_in", "+", "h", "\n", "\n", "", "h", "=", "F", ".", "dropout", "(", "h", ",", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.dgl.dgn_layer.DGNLayerSimple.posttrans_nodes": [[134, 136], ["dgn_layer.DGNLayerSimple.posttrans"], "methods", ["None"], ["\n", "", "", "class", "DGNLayerSimple", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "in_dim", ",", "out_dim", ",", "dropout", ",", "graph_norm", ",", "batch_norm", ",", "aggregators", ",", "scalers", ",", "residual", ",", "avg_d", ",", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.dgl.dgn_layer.DGNLayerSimple.forward": [[137, 162], ["g.apply_edges", "g.update_all", "dgn_layer.DGNLayerSimple.posttrans", "torch.relu", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "torch.dropout", "dgn_layer.DGNLayerSimple.batchnorm_h"], "methods", ["None"], ["posttrans_layers", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "graph_norm", "=", "graph_norm", "\n", "self", ".", "batch_norm", "=", "batch_norm", "\n", "self", ".", "residual", "=", "residual", "\n", "self", ".", "aggregators", "=", "aggregators", "\n", "self", ".", "scalers", "=", "scalers", "\n", "self", ".", "batchnorm_h", "=", "nn", ".", "BatchNorm1d", "(", "out_dim", ")", "\n", "\n", "self", ".", "posttrans", "=", "MLP", "(", "in_size", "=", "(", "len", "(", "aggregators", ")", "*", "len", "(", "scalers", ")", ")", "*", "in_dim", ",", "hidden_size", "=", "out_dim", ",", "\n", "out_size", "=", "out_dim", ",", "layers", "=", "posttrans_layers", ",", "mid_activation", "=", "'relu'", ",", "last_activation", "=", "'none'", ")", "\n", "self", ".", "avg_d", "=", "avg_d", "\n", "if", "in_dim", "!=", "out_dim", ":", "\n", "            ", "self", ".", "residual", "=", "False", "\n", "\n", "", "", "def", "pretrans_edges", "(", "self", ",", "edges", ")", ":", "\n", "        ", "return", "{", "'e'", ":", "edges", ".", "src", "[", "'h'", "]", ",", "'eig_s'", ":", "edges", ".", "src", "[", "'eig'", "]", ",", "'eig_d'", ":", "edges", ".", "dst", "[", "'eig'", "]", "}", "\n", "\n", "", "def", "message_func", "(", "self", ",", "edges", ")", ":", "\n", "        ", "return", "{", "'e'", ":", "edges", ".", "data", "[", "'e'", "]", ",", "'eig_s'", ":", "edges", ".", "data", "[", "'eig_s'", "]", ".", "to", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", ",", "\n", "'eig_d'", ":", "edges", ".", "data", "[", "'eig_d'", "]", ".", "to", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "}", "\n", "\n", "", "def", "reduce_func", "(", "self", ",", "nodes", ")", ":", "\n", "        ", "h_in", "=", "nodes", ".", "data", "[", "'h'", "]", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.dgl.dgn_layer.DGNTower.__init__": [[165, 184], ["torch.Module.__init__", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "layers.MLP", "layers.MLP", "len", "len"], "methods", ["home.repos.pwc.inspect_result.Saro00_DGN.dgl.dgn_layer.DGNLayer.__init__"], ["eig_d", "=", "nodes", ".", "mailbox", "[", "'eig_d'", "]", "\n", "D", "=", "h", ".", "shape", "[", "-", "2", "]", "\n", "\n", "# aggregators and scalers", "\n", "h", "=", "torch", ".", "cat", "(", "[", "aggregate", "(", "h", ",", "eig_s", ",", "eig_d", ",", "h_in", ")", "for", "aggregate", "in", "self", ".", "aggregators", "]", ",", "dim", "=", "1", ")", "\n", "if", "len", "(", "self", ".", "scalers", ")", ">", "1", ":", "\n", "            ", "h", "=", "torch", ".", "cat", "(", "[", "scale", "(", "h", ",", "D", "=", "D", ",", "avg_d", "=", "self", ".", "avg_d", ")", "for", "scale", "in", "self", ".", "scalers", "]", ",", "dim", "=", "1", ")", "\n", "\n", "", "return", "{", "'h'", ":", "h", "}", "\n", "\n", "", "def", "posttrans_nodes", "(", "self", ",", "nodes", ")", ":", "\n", "        ", "return", "self", ".", "posttrans", "(", "nodes", ".", "data", "[", "'h'", "]", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "g", ",", "h", ",", "e", ",", "snorm_n", ")", ":", "\n", "        ", "h_in", "=", "h", "\n", "g", ".", "ndata", "[", "'h'", "]", "=", "h", "\n", "\n", "# pretransformation", "\n", "g", ".", "apply_edges", "(", "self", ".", "pretrans_edges", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.dgl.dgn_layer.DGNTower.pretrans_edges": [[185, 191], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "dgn_layer.DGNTower.pretrans"], "methods", ["None"], ["# aggregation", "\n", "g", ".", "update_all", "(", "self", ".", "message_func", ",", "self", ".", "reduce_func", ")", "\n", "h", "=", "g", ".", "ndata", "[", "'h'", "]", "\n", "\n", "# posttransformation", "\n", "h", "=", "self", ".", "posttrans", "(", "h", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.dgl.dgn_layer.DGNTower.message_func": [[192, 195], ["edges.data[].to", "edges.data[].to", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available"], "methods", ["None"], ["# graph and batch normalization and residual", "\n", "if", "self", ".", "graph_norm", ":", "\n", "            ", "h", "=", "h", "*", "snorm_n", "\n", "", "if", "self", ".", "batch_norm", ":", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.dgl.dgn_layer.DGNTower.reduce_func": [[196, 209], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "aggregate", "scale"], "methods", ["None"], ["            ", "h", "=", "self", ".", "batchnorm_h", "(", "h", ")", "\n", "", "h", "=", "F", ".", "relu", "(", "h", ")", "\n", "if", "self", ".", "residual", ":", "\n", "            ", "h", "=", "h_in", "+", "h", "\n", "\n", "", "h", "=", "F", ".", "dropout", "(", "h", ",", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "return", "h", "\n", "\n", "\n", "", "", "class", "DGNTower", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "in_dim", ",", "out_dim", ",", "dropout", ",", "graph_norm", ",", "batch_norm", ",", "aggregators", ",", "scalers", ",", "avg_d", ",", "\n", "pretrans_layers", ",", "posttrans_layers", ",", "edge_features", ",", "edge_dim", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dropout", "=", "dropout", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.dgl.dgn_layer.DGNTower.posttrans_nodes": [[210, 212], ["dgn_layer.DGNTower.posttrans"], "methods", ["None"], ["self", ".", "graph_norm", "=", "graph_norm", "\n", "self", ".", "batch_norm", "=", "batch_norm", "\n", "self", ".", "edge_features", "=", "edge_features", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.dgl.dgn_layer.DGNTower.forward": [[213, 236], ["g.apply_edges", "g.update_all", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "dgn_layer.DGNTower.posttrans", "torch.dropout", "torch.dropout", "torch.dropout", "dgn_layer.DGNTower.batchnorm_h"], "methods", ["None"], ["\n", "self", ".", "aggregators", "=", "aggregators", "\n", "self", ".", "scalers", "=", "scalers", "\n", "\n", "self", ".", "batchnorm_h", "=", "nn", ".", "BatchNorm1d", "(", "out_dim", ")", "\n", "\n", "self", ".", "pretrans", "=", "MLP", "(", "in_size", "=", "2", "*", "in_dim", "+", "(", "edge_dim", "if", "edge_features", "else", "0", ")", ",", "hidden_size", "=", "in_dim", ",", "\n", "out_size", "=", "in_dim", ",", "layers", "=", "pretrans_layers", ",", "mid_activation", "=", "'relu'", ",", "last_activation", "=", "'none'", ")", "\n", "\n", "self", ".", "posttrans", "=", "MLP", "(", "in_size", "=", "(", "len", "(", "aggregators", ")", "*", "len", "(", "scalers", ")", "+", "1", ")", "*", "in_dim", ",", "hidden_size", "=", "out_dim", ",", "\n", "out_size", "=", "out_dim", ",", "layers", "=", "posttrans_layers", ",", "mid_activation", "=", "'relu'", ",", "last_activation", "=", "'none'", ")", "\n", "self", ".", "avg_d", "=", "avg_d", "\n", "\n", "", "def", "pretrans_edges", "(", "self", ",", "edges", ")", ":", "\n", "        ", "if", "self", ".", "edge_features", ":", "\n", "            ", "z2", "=", "torch", ".", "cat", "(", "[", "edges", ".", "src", "[", "'h'", "]", ",", "edges", ".", "dst", "[", "'h'", "]", ",", "edges", ".", "data", "[", "'ef'", "]", "]", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "z2", "=", "torch", ".", "cat", "(", "[", "edges", ".", "src", "[", "'h'", "]", ",", "edges", ".", "dst", "[", "'h'", "]", "]", ",", "dim", "=", "1", ")", "\n", "", "return", "{", "'e'", ":", "self", ".", "pretrans", "(", "z2", ")", ",", "'eig_s'", ":", "edges", ".", "src", "[", "'eig'", "]", ",", "'eig_d'", ":", "edges", ".", "dst", "[", "'eig'", "]", "}", "\n", "\n", "", "def", "message_func", "(", "self", ",", "edges", ")", ":", "\n", "        ", "return", "{", "'e'", ":", "edges", ".", "data", "[", "'e'", "]", ",", "'eig_s'", ":", "edges", ".", "data", "[", "'eig_s'", "]", ".", "to", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", ",", "\n", "'eig_d'", ":", "edges", ".", "data", "[", "'eig_d'", "]", ".", "to", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.dgl.dgn_layer.DGNLayerTower.__init__": [[239, 267], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "layers.FCLayer", "dgn_layer.DGNLayerTower.towers.append", "dgn_layer.DGNTower"], "methods", ["home.repos.pwc.inspect_result.Saro00_DGN.dgl.dgn_layer.DGNLayer.__init__"], ["h", "=", "nodes", ".", "mailbox", "[", "'e'", "]", "\n", "eig_s", "=", "nodes", ".", "mailbox", "[", "'eig_s'", "]", "\n", "eig_d", "=", "nodes", ".", "mailbox", "[", "'eig_d'", "]", "\n", "D", "=", "h", ".", "shape", "[", "-", "2", "]", "\n", "\n", "# aggregators and scalers", "\n", "h", "=", "torch", ".", "cat", "(", "[", "aggregate", "(", "h", ",", "eig_s", ",", "eig_d", ",", "h_in", ")", "for", "aggregate", "in", "self", ".", "aggregators", "]", ",", "dim", "=", "1", ")", "\n", "if", "len", "(", "self", ".", "scalers", ")", ">", "1", ":", "\n", "            ", "h", "=", "torch", ".", "cat", "(", "[", "scale", "(", "h", ",", "D", "=", "D", ",", "avg_d", "=", "self", ".", "avg_d", ")", "for", "scale", "in", "self", ".", "scalers", "]", ",", "dim", "=", "1", ")", "\n", "\n", "", "return", "{", "'h'", ":", "h", "}", "\n", "\n", "", "def", "posttrans_nodes", "(", "self", ",", "nodes", ")", ":", "\n", "        ", "return", "self", ".", "posttrans", "(", "nodes", ".", "data", "[", "'h'", "]", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "g", ",", "h", ",", "e", ",", "snorm_n", ")", ":", "\n", "        ", "g", ".", "ndata", "[", "'h'", "]", "=", "h", "\n", "\n", "if", "self", ".", "edge_features", ":", "# add the edges information only if edge_features = True", "\n", "            ", "g", ".", "edata", "[", "'ef'", "]", "=", "e", "\n", "\n", "# pretransformation", "\n", "", "g", ".", "apply_edges", "(", "self", ".", "pretrans_edges", ")", "\n", "\n", "# aggregation", "\n", "g", ".", "update_all", "(", "self", ".", "message_func", ",", "self", ".", "reduce_func", ")", "\n", "h", "=", "torch", ".", "cat", "(", "[", "h", ",", "g", ".", "ndata", "[", "'h'", "]", "]", ",", "dim", "=", "1", ")", "\n", "\n", "# posttransformation", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.dgl.dgn_layer.DGNLayerTower.forward": [[268, 285], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "dgn_layer.DGNLayerTower.mixing_network", "tower", "tower", "enumerate"], "methods", ["None"], ["h", "=", "self", ".", "posttrans", "(", "h", ")", "\n", "\n", "# graph and batch normalization", "\n", "if", "self", ".", "graph_norm", ":", "\n", "            ", "h", "=", "h", "*", "snorm_n", "\n", "", "if", "self", ".", "batch_norm", ":", "\n", "            ", "h", "=", "self", ".", "batchnorm_h", "(", "h", ")", "\n", "", "h", "=", "F", ".", "dropout", "(", "h", ",", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "return", "h", "\n", "\n", "\n", "", "", "class", "DGNLayerTower", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "in_dim", ",", "out_dim", ",", "aggregators", ",", "scalers", ",", "avg_d", ",", "dropout", ",", "graph_norm", ",", "batch_norm", ",", "towers", "=", "5", ",", "\n", "pretrans_layers", "=", "1", ",", "posttrans_layers", "=", "1", ",", "divide_input", "=", "True", ",", "residual", "=", "False", ",", "edge_features", "=", "False", ",", "\n", "edge_dim", "=", "0", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "(", "(", "not", "divide_input", ")", "or", "in_dim", "%", "towers", "==", "0", ")", ",", "\"if divide_input is set the number of towers has to divide in_dim\"", "\n", "assert", "(", "out_dim", "%", "towers", "==", "0", ")", ",", "\"the number of towers has to divide the out_dim\"", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.dgl.dgn_layer.DGNLayer.__init__": [[288, 312], ["torch.Module.__init__", "dgn_layer.DGNLayerSimple", "aggregators.split", "scalers.split", "dgn_layer.DGNLayerComplex", "dgn_layer.DGNLayerTower"], "methods", ["home.repos.pwc.inspect_result.Saro00_DGN.dgl.dgn_layer.DGNLayer.__init__"], ["self", ".", "divide_input", "=", "divide_input", "\n", "self", ".", "input_tower", "=", "in_dim", "//", "towers", "if", "divide_input", "else", "in_dim", "\n", "self", ".", "output_tower", "=", "out_dim", "//", "towers", "\n", "self", ".", "in_dim", "=", "in_dim", "\n", "self", ".", "out_dim", "=", "out_dim", "\n", "self", ".", "edge_features", "=", "edge_features", "\n", "self", ".", "residual", "=", "residual", "\n", "\n", "if", "in_dim", "!=", "out_dim", ":", "\n", "            ", "self", ".", "residual", "=", "False", "\n", "\n", "# convolution", "\n", "", "self", ".", "towers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "_", "in", "range", "(", "towers", ")", ":", "\n", "            ", "self", ".", "towers", ".", "append", "(", "DGNTower", "(", "in_dim", "=", "self", ".", "input_tower", ",", "out_dim", "=", "self", ".", "output_tower", ",", "aggregators", "=", "aggregators", ",", "\n", "scalers", "=", "scalers", ",", "avg_d", "=", "avg_d", ",", "pretrans_layers", "=", "pretrans_layers", ",", "\n", "posttrans_layers", "=", "posttrans_layers", ",", "batch_norm", "=", "batch_norm", ",", "dropout", "=", "dropout", ",", "\n", "graph_norm", "=", "graph_norm", ",", "edge_features", "=", "edge_features", ",", "edge_dim", "=", "edge_dim", ")", ")", "\n", "# mixing network", "\n", "", "self", ".", "mixing_network", "=", "FCLayer", "(", "out_dim", ",", "out_dim", ",", "activation", "=", "'LeakyReLU'", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "g", ",", "h", ",", "e", ",", "snorm_n", ")", ":", "\n", "        ", "h_in", "=", "h", "# for residual connection", "\n", "\n", "if", "self", ".", "divide_input", ":", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.dgl.aggregators.aggregate_mean": [[8, 10], ["torch.mean"], "function", ["None"], ["def", "aggregate_mean", "(", "h", ",", "eig_s", ",", "eig_d", ",", "h_in", ")", ":", "\n", "    ", "return", "torch", ".", "mean", "(", "h", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.dgl.aggregators.aggregate_max": [[12, 14], ["torch.max"], "function", ["None"], ["", "def", "aggregate_max", "(", "h", ",", "eig_s", ",", "eig_d", ",", "h_in", ")", ":", "\n", "    ", "return", "torch", ".", "max", "(", "h", ",", "dim", "=", "1", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.dgl.aggregators.aggregate_min": [[16, 18], ["torch.min"], "function", ["None"], ["", "def", "aggregate_min", "(", "h", ",", "eig_s", ",", "eig_d", ",", "h_in", ")", ":", "\n", "    ", "return", "torch", ".", "min", "(", "h", ",", "dim", "=", "1", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.dgl.aggregators.aggregate_std": [[20, 22], ["torch.sqrt", "aggregators.aggregate_var"], "function", ["home.repos.pwc.inspect_result.Saro00_DGN.dgl.aggregators.aggregate_var"], ["", "def", "aggregate_std", "(", "h", ",", "eig_s", ",", "eig_d", ",", "h_in", ")", ":", "\n", "    ", "return", "torch", ".", "sqrt", "(", "aggregate_var", "(", "h", ",", "eig_s", ",", "eig_d", ",", "h_in", ")", "+", "EPS", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.dgl.aggregators.aggregate_var": [[24, 29], ["torch.mean", "torch.mean", "torch.relu"], "function", ["None"], ["", "def", "aggregate_var", "(", "h", ",", "eig_s", ",", "eig_d", ",", "h_in", ")", ":", "\n", "    ", "h_mean_squares", "=", "torch", ".", "mean", "(", "h", "*", "h", ",", "dim", "=", "-", "2", ")", "\n", "h_mean", "=", "torch", ".", "mean", "(", "h", ",", "dim", "=", "-", "2", ")", "\n", "var", "=", "torch", ".", "relu", "(", "h_mean_squares", "-", "h_mean", "*", "h_mean", ")", "\n", "return", "var", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.dgl.aggregators.aggregate_sum": [[31, 33], ["torch.sum"], "function", ["None"], ["", "def", "aggregate_sum", "(", "h", ",", "eig_s", ",", "eig_d", ",", "h_in", ")", ":", "\n", "    ", "return", "torch", ".", "sum", "(", "h", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.dgl.aggregators.aggregate_dir_smooth": [[35, 40], ["torch.mul", "torch.sum", "torch.abs", "torch.sum", "torch.abs"], "function", ["None"], ["", "def", "aggregate_dir_av", "(", "h", ",", "eig_s", ",", "eig_d", ",", "h_in", ",", "eig_idx", ")", ":", "\n", "    ", "h_mod", "=", "torch", ".", "mul", "(", "h", ",", "(", "torch", ".", "abs", "(", "eig_s", "[", ":", ",", ":", ",", "eig_idx", "]", "-", "eig_d", "[", ":", ",", ":", ",", "eig_idx", "]", ")", "/", "\n", "(", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "eig_s", "[", ":", ",", ":", ",", "eig_idx", "]", "-", "eig_d", "[", ":", ",", ":", ",", "eig_idx", "]", ")", ",", "keepdim", "=", "True", ",", "\n", "dim", "=", "1", ")", "+", "EPS", ")", ")", ".", "unsqueeze", "(", "-", "1", ")", ")", "\n", "return", "torch", ".", "sum", "(", "h_mod", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.dgl.aggregators.aggregate_dir_softmax": [[42, 46], ["torch.mul", "torch.sum", "torch.nn.Softmax", "torch.abs().unsqueeze", "torch.abs"], "function", ["None"], ["", "def", "aggregate_dir_softmax", "(", "h", ",", "eig_s", ",", "eig_d", ",", "h_in", ",", "eig_idx", ",", "alpha", ")", ":", "\n", "    ", "h_mod", "=", "torch", ".", "mul", "(", "h", ",", "torch", ".", "nn", ".", "Softmax", "(", "1", ")", "(", "\n", "alpha", "*", "(", "torch", ".", "abs", "(", "eig_s", "[", ":", ",", ":", ",", "eig_idx", "]", "-", "eig_d", "[", ":", ",", ":", ",", "eig_idx", "]", ")", ")", ".", "unsqueeze", "(", "-", "1", ")", ")", ")", "\n", "return", "torch", ".", "sum", "(", "h_mod", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.dgl.aggregators.aggregate_dir_dx": [[48, 53], ["torch.mul", "torch.abs", "torch.sum", "torch.sum", "torch.sum", "torch.abs"], "function", ["None"], ["", "def", "aggregate_dir_dx", "(", "h", ",", "eig_s", ",", "eig_d", ",", "h_in", ",", "eig_idx", ")", ":", "\n", "    ", "eig_w", "=", "(", "(", "eig_s", "[", ":", ",", ":", ",", "eig_idx", "]", "-", "eig_d", "[", ":", ",", ":", ",", "eig_idx", "]", ")", "/", "\n", "(", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "eig_s", "[", ":", ",", ":", ",", "eig_idx", "]", "-", "eig_d", "[", ":", ",", ":", ",", "eig_idx", "]", ")", ",", "keepdim", "=", "True", ",", "dim", "=", "1", ")", "+", "EPS", ")", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "h_mod", "=", "torch", ".", "mul", "(", "h", ",", "eig_w", ")", "\n", "return", "torch", ".", "abs", "(", "torch", ".", "sum", "(", "h_mod", ",", "dim", "=", "1", ")", "-", "torch", ".", "sum", "(", "eig_w", ",", "dim", "=", "1", ")", "*", "h_in", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.dgl.aggregators.aggregate_dir_dx_no_abs": [[55, 60], ["torch.mul", "torch.sum", "torch.sum", "torch.sum", "torch.abs"], "function", ["None"], ["", "def", "aggregate_dir_dx_no_abs", "(", "h", ",", "eig_s", ",", "eig_d", ",", "h_in", ",", "eig_idx", ")", ":", "\n", "    ", "eig_w", "=", "(", "(", "eig_s", "[", ":", ",", ":", ",", "eig_idx", "]", "-", "eig_d", "[", ":", ",", ":", ",", "eig_idx", "]", ")", "/", "\n", "(", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "eig_s", "[", ":", ",", ":", ",", "eig_idx", "]", "-", "eig_d", "[", ":", ",", ":", ",", "eig_idx", "]", ")", ",", "keepdim", "=", "True", ",", "dim", "=", "1", ")", "+", "EPS", ")", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "h_mod", "=", "torch", ".", "mul", "(", "h", ",", "eig_w", ")", "\n", "return", "torch", ".", "sum", "(", "h_mod", ",", "dim", "=", "1", ")", "-", "torch", ".", "sum", "(", "eig_w", ",", "dim", "=", "1", ")", "*", "h_in", "\n", "\n"]], "home.repos.pwc.inspect_result.Saro00_DGN.dgl.aggregators.aggregate_dir_dx_balanced": [[62, 72], ["torch.mul", "torch.abs", "torch.sum", "torch.relu", "torch.relu", "torch.sum", "torch.sum", "torch.sum", "torch.abs", "torch.abs", "torch.relu", "torch.relu"], "function", ["None"], ["", "def", "aggregate_dir_dx_balanced", "(", "h", ",", "eig_s", ",", "eig_d", ",", "h_in", ",", "eig_idx", ")", ":", "\n", "    ", "eig_front", "=", "(", "torch", ".", "relu", "(", "eig_s", "[", ":", ",", ":", ",", "eig_idx", "]", "-", "eig_d", "[", ":", ",", ":", ",", "eig_idx", "]", ")", "/", "\n", "(", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "torch", ".", "relu", "(", "eig_s", "[", ":", ",", ":", ",", "eig_idx", "]", "-", "eig_d", "[", ":", ",", ":", ",", "eig_idx", "]", ")", ")", ",", "keepdim", "=", "True", ",", "\n", "dim", "=", "1", ")", "+", "EPS", ")", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "eig_back", "=", "(", "torch", ".", "relu", "(", "eig_d", "[", ":", ",", ":", ",", "eig_idx", "]", "-", "eig_s", "[", ":", ",", ":", ",", "eig_idx", "]", ")", "/", "\n", "(", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "-", "torch", ".", "relu", "(", "eig_d", "[", ":", ",", ":", ",", "eig_idx", "]", "-", "eig_s", "[", ":", ",", ":", ",", "eig_idx", "]", ")", ")", ",", "keepdim", "=", "True", ",", "\n", "dim", "=", "1", ")", "+", "EPS", ")", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "eig_w", "=", "(", "eig_front", "+", "eig_back", ")", "/", "2", "\n", "h_mod", "=", "torch", ".", "mul", "(", "h", ",", "eig_w", ")", "\n", "return", "torch", ".", "abs", "(", "torch", ".", "sum", "(", "h_mod", ",", "dim", "=", "1", ")", "-", "torch", ".", "sum", "(", "eig_w", ",", "dim", "=", "1", ")", "*", "h_in", ")", "\n", "\n"]]}