{"home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.None.train.set_optimizer": [[18, 30], ["model.optimize_params_dict", "torch.optim.Adam", "TypeError"], "function", ["home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.models.model.HTCInfoMax.optimize_params_dict"], ["def", "set_optimizer", "(", "config", ",", "model", ")", ":", "\n", "    ", "\"\"\"\n    :param config: helper.configure, Configure Object\n    :param model: computational graph\n    :return: torch.optim\n    \"\"\"", "\n", "params", "=", "model", ".", "optimize_params_dict", "(", ")", "\n", "if", "config", ".", "train", ".", "optimizer", ".", "type", "==", "'Adam'", ":", "\n", "        ", "return", "torch", ".", "optim", ".", "Adam", "(", "lr", "=", "config", ".", "train", ".", "optimizer", ".", "learning_rate", ",", "\n", "params", "=", "params", ")", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "\"Recommend the Adam optimizer\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.None.train.train": [[32, 159], ["data_modules.vocab.Vocab", "data_modules.data_loader.data_loaders", "models.model.HTCInfoMax", "models.model.HTCInfoMax.to", "train_modules.criterions.ClassificationLoss", "train.set_optimizer", "train_modules.trainer.Trainer", "range", "os.path.join", "os.path.isfile", "os.path.join", "os.path.isfile", "os.path.join", "os.path.isdir", "os.mkdir", "os.listdir", "os.listdir.sort", "os.path.isfile", "time.time", "train_modules.trainer.Trainer.train", "train_modules.trainer.Trainer.eval", "train_modules.trainer.Trainer.eval", "helper.info", "helper.utils.load_checkpoint", "train_modules.trainer.Trainer.eval", "helper.utils.load_checkpoint", "train_modules.trainer.Trainer.eval", "model_file.startswith", "os.path.join", "helper.info", "helper.info", "helper.utils.load_checkpoint", "helper.info", "helper.info", "helper.utils.save_checkpoint", "helper.info", "helper.utils.save_checkpoint", "helper.utils.save_checkpoint", "helper.warning", "train_modules.trainer.Trainer.update_lr", "helper.warning", "os.path.join", "os.path.join", "os.path.join", "os.path.getatime", "os.path.join", "os.path.join", "models.model.HTCInfoMax.state_dict", "set_optimizer.state_dict", "models.model.HTCInfoMax.state_dict", "set_optimizer.state_dict", "models.model.HTCInfoMax.state_dict", "set_optimizer.state_dict", "time.time", "os.path.join", "str"], "function", ["home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.data_modules.data_loader.data_loaders", "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.None.train.set_optimizer", "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.train_modules.trainer.Trainer.train", "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.train_modules.trainer.Trainer.eval", "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.train_modules.trainer.Trainer.eval", "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.helper.logger.info", "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.helper.utils.load_checkpoint", "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.train_modules.trainer.Trainer.eval", "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.helper.utils.load_checkpoint", "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.train_modules.trainer.Trainer.eval", "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.helper.logger.info", "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.helper.logger.info", "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.helper.utils.load_checkpoint", "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.helper.logger.info", "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.helper.logger.info", "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.helper.utils.save_checkpoint", "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.helper.logger.info", "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.helper.utils.save_checkpoint", "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.helper.utils.save_checkpoint", "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.helper.logger.warning", "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.train_modules.trainer.Trainer.update_lr", "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.helper.logger.warning"], ["", "", "def", "train", "(", "config", ")", ":", "\n", "    ", "\"\"\"\n    :param config: helper.configure, Configure Object\n    \"\"\"", "\n", "# loading corpus and generate vocabulary", "\n", "corpus_vocab", "=", "Vocab", "(", "config", ",", "\n", "min_freq", "=", "5", ",", "\n", "max_size", "=", "50000", ")", "\n", "\n", "# get data", "\n", "train_loader", ",", "dev_loader", ",", "test_loader", "=", "data_loaders", "(", "config", ",", "corpus_vocab", ")", "\n", "\n", "# build up model", "\n", "htcinfomax", "=", "HTCInfoMax", "(", "config", ",", "corpus_vocab", ",", "model_mode", "=", "'TRAIN'", ")", "\n", "htcinfomax", ".", "to", "(", "config", ".", "train", ".", "device_setting", ".", "device", ")", "\n", "# define training objective & optimizer", "\n", "criterion", "=", "ClassificationLoss", "(", "os", ".", "path", ".", "join", "(", "config", ".", "data", ".", "data_dir", ",", "config", ".", "data", ".", "hierarchy", ")", ",", "\n", "corpus_vocab", ".", "v2i", "[", "'label'", "]", ",", "\n", "recursive_penalty", "=", "config", ".", "train", ".", "loss", ".", "recursive_regularization", ".", "penalty", ",", "\n", "recursive_constraint", "=", "config", ".", "train", ".", "loss", ".", "recursive_regularization", ".", "flag", ")", "\n", "optimize", "=", "set_optimizer", "(", "config", ",", "htcinfomax", ")", "\n", "\n", "# get epoch trainer", "\n", "trainer", "=", "Trainer", "(", "model", "=", "htcinfomax", ",", "\n", "criterion", "=", "criterion", ",", "\n", "optimizer", "=", "optimize", ",", "\n", "vocab", "=", "corpus_vocab", ",", "\n", "config", "=", "config", ")", "\n", "\n", "# set origin log", "\n", "best_epoch", "=", "[", "-", "1", ",", "-", "1", "]", "\n", "best_performance", "=", "[", "0.0", ",", "0.0", "]", "\n", "model_checkpoint", "=", "config", ".", "train", ".", "checkpoint", ".", "dir", "\n", "model_name", "=", "config", ".", "model", ".", "type", "\n", "wait", "=", "0", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "model_checkpoint", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "model_checkpoint", ")", "\n", "", "else", ":", "\n", "# loading previous checkpoint", "\n", "        ", "dir_list", "=", "os", ".", "listdir", "(", "model_checkpoint", ")", "\n", "dir_list", ".", "sort", "(", "key", "=", "lambda", "fn", ":", "os", ".", "path", ".", "getatime", "(", "os", ".", "path", ".", "join", "(", "model_checkpoint", ",", "fn", ")", ")", ")", "\n", "latest_model_file", "=", "''", "\n", "for", "model_file", "in", "dir_list", "[", ":", ":", "-", "1", "]", ":", "\n", "            ", "if", "model_file", ".", "startswith", "(", "'best'", ")", ":", "\n", "                ", "continue", "\n", "", "else", ":", "\n", "                ", "latest_model_file", "=", "model_file", "\n", "break", "\n", "", "", "if", "os", ".", "path", ".", "isfile", "(", "os", ".", "path", ".", "join", "(", "model_checkpoint", ",", "latest_model_file", ")", ")", ":", "\n", "            ", "logger", ".", "info", "(", "'Loading Previous Checkpoint...'", ")", "\n", "logger", ".", "info", "(", "'Loading from {}'", ".", "format", "(", "os", ".", "path", ".", "join", "(", "model_checkpoint", ",", "latest_model_file", ")", ")", ")", "\n", "best_performance", ",", "config", "=", "load_checkpoint", "(", "model_file", "=", "os", ".", "path", ".", "join", "(", "model_checkpoint", ",", "latest_model_file", ")", ",", "\n", "model", "=", "htcinfomax", ",", "\n", "config", "=", "config", ",", "\n", "optimizer", "=", "optimize", ")", "\n", "logger", ".", "info", "(", "'Previous Best Performance---- Micro-F1: {}%, Macro-F1: {}%'", ".", "format", "(", "\n", "best_performance", "[", "0", "]", ",", "best_performance", "[", "1", "]", ")", ")", "\n", "\n", "# train", "\n", "", "", "for", "epoch", "in", "range", "(", "config", ".", "train", ".", "start_epoch", ",", "config", ".", "train", ".", "end_epoch", ")", ":", "\n", "        ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "trainer", ".", "train", "(", "train_loader", ",", "\n", "epoch", ")", "\n", "trainer", ".", "eval", "(", "train_loader", ",", "epoch", ",", "'TRAIN'", ")", "\n", "performance", "=", "trainer", ".", "eval", "(", "dev_loader", ",", "epoch", ",", "'DEV'", ")", "\n", "# saving best model and check model", "\n", "if", "not", "(", "performance", "[", "'micro_f1'", "]", ">=", "best_performance", "[", "0", "]", "or", "performance", "[", "'macro_f1'", "]", ">=", "best_performance", "[", "1", "]", ")", ":", "\n", "            ", "wait", "+=", "1", "\n", "if", "wait", "%", "config", ".", "train", ".", "optimizer", ".", "lr_patience", "==", "0", ":", "\n", "                ", "logger", ".", "warning", "(", "\"Performance has not been improved for {} epochs, updating learning rate\"", ".", "format", "(", "wait", ")", ")", "\n", "trainer", ".", "update_lr", "(", ")", "\n", "", "if", "wait", "==", "config", ".", "train", ".", "optimizer", ".", "early_stopping", ":", "\n", "                ", "logger", ".", "warning", "(", "\"Performance has not been improved for {} epochs, stopping train with early stopping\"", "\n", ".", "format", "(", "wait", ")", ")", "\n", "break", "\n", "\n", "", "", "if", "performance", "[", "'micro_f1'", "]", ">", "best_performance", "[", "0", "]", ":", "\n", "            ", "wait", "=", "0", "\n", "logger", ".", "info", "(", "'Improve Micro-F1 {}% --> {}%'", ".", "format", "(", "best_performance", "[", "0", "]", ",", "performance", "[", "'micro_f1'", "]", ")", ")", "\n", "best_performance", "[", "0", "]", "=", "performance", "[", "'micro_f1'", "]", "\n", "best_epoch", "[", "0", "]", "=", "epoch", "\n", "save_checkpoint", "(", "{", "\n", "'epoch'", ":", "epoch", ",", "\n", "'model_type'", ":", "config", ".", "model", ".", "type", ",", "\n", "'state_dict'", ":", "htcinfomax", ".", "state_dict", "(", ")", ",", "\n", "'best_performance'", ":", "best_performance", ",", "\n", "'optimizer'", ":", "optimize", ".", "state_dict", "(", ")", "\n", "}", ",", "os", ".", "path", ".", "join", "(", "model_checkpoint", ",", "'best_micro_'", "+", "model_name", ")", ")", "\n", "", "if", "performance", "[", "'macro_f1'", "]", ">", "best_performance", "[", "1", "]", ":", "\n", "            ", "wait", "=", "0", "\n", "logger", ".", "info", "(", "'Improve Macro-F1 {}% --> {}%'", ".", "format", "(", "best_performance", "[", "1", "]", ",", "performance", "[", "'macro_f1'", "]", ")", ")", "\n", "best_performance", "[", "1", "]", "=", "performance", "[", "'macro_f1'", "]", "\n", "best_epoch", "[", "1", "]", "=", "epoch", "\n", "save_checkpoint", "(", "{", "\n", "'epoch'", ":", "epoch", ",", "\n", "'model_type'", ":", "config", ".", "model", ".", "type", ",", "\n", "'state_dict'", ":", "htcinfomax", ".", "state_dict", "(", ")", ",", "\n", "'best_performance'", ":", "best_performance", ",", "\n", "'optimizer'", ":", "optimize", ".", "state_dict", "(", ")", "\n", "}", ",", "os", ".", "path", ".", "join", "(", "model_checkpoint", ",", "'best_macro_'", "+", "model_name", ")", ")", "\n", "\n", "", "if", "epoch", "%", "10", "==", "1", ":", "\n", "            ", "save_checkpoint", "(", "{", "\n", "'epoch'", ":", "epoch", ",", "\n", "'model_type'", ":", "config", ".", "model", ".", "type", ",", "\n", "'state_dict'", ":", "htcinfomax", ".", "state_dict", "(", ")", ",", "\n", "'best_performance'", ":", "best_performance", ",", "\n", "'optimizer'", ":", "optimize", ".", "state_dict", "(", ")", "\n", "}", ",", "os", ".", "path", ".", "join", "(", "model_checkpoint", ",", "model_name", "+", "'_epoch_'", "+", "str", "(", "epoch", ")", ")", ")", "\n", "\n", "", "logger", ".", "info", "(", "'Epoch {} Time Cost {} secs.'", ".", "format", "(", "epoch", ",", "time", ".", "time", "(", ")", "-", "start_time", ")", ")", "\n", "\n", "", "best_epoch_model_file", "=", "os", ".", "path", ".", "join", "(", "model_checkpoint", ",", "'best_micro_'", "+", "model_name", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "best_epoch_model_file", ")", ":", "\n", "        ", "load_checkpoint", "(", "best_epoch_model_file", ",", "model", "=", "htcinfomax", ",", "\n", "config", "=", "config", ",", "\n", "optimizer", "=", "optimize", ")", "\n", "trainer", ".", "eval", "(", "test_loader", ",", "best_epoch", "[", "0", "]", ",", "'TEST'", ")", "\n", "\n", "", "best_epoch_model_file", "=", "os", ".", "path", ".", "join", "(", "model_checkpoint", ",", "'best_macro_'", "+", "model_name", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "best_epoch_model_file", ")", ":", "\n", "        ", "load_checkpoint", "(", "best_epoch_model_file", ",", "model", "=", "htcinfomax", ",", "\n", "config", "=", "config", ",", "\n", "optimizer", "=", "optimize", ")", "\n", "trainer", ".", "eval", "(", "test_loader", ",", "best_epoch", "[", "1", "]", ",", "'TEST'", ")", "\n", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.helper.hierarchy_tree_statistic_wos.DatasetStatistic.__init__": [[16, 64], ["object.__init__", "models.structure_model.tree.Tree", "dict", "hierarchy_tree_statistic_wos.DatasetStatistic.get_hierar_relations_with_name", "dict", "dict", "list", "copy.deepcopy", "copy.deepcopy", "hierarchy_tree_statistic_wos.DatasetStatistic.hierarchical_label_dict.keys", "print", "print", "hierarchy_tree_statistic_wos.DatasetStatistic.level_dict.keys", "hierarchy_tree_statistic_wos.DatasetStatistic.hierarchical_label_dict.keys", "print", "print", "dict", "print", "print", "hierarchy_tree_statistic_wos.DatasetStatistic.label_trees[].depth", "print", "os.path.join", "hierarchy_tree_statistic_wos.DatasetStatistic.label_trees.keys", "hierarchy_tree_statistic_wos.DatasetStatistic.label_trees.keys", "models.structure_model.tree.Tree", "parent_tree.add_child", "len", "hierarchy_tree_statistic_wos.DatasetStatistic.level_dict.keys", "hierarchy_tree_statistic_wos.DatasetStatistic.level_dict[].append", "len", "hierarchy_tree_statistic_wos.DatasetStatistic.label_trees.keys", "set"], "methods", ["home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.structure_model.tree.Tree.__init__", "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.helper.hierarchy_tree_statistic_rcv1.DatasetStatistic.get_hierar_relations_with_name", "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.structure_model.tree.Tree.depth", "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.structure_model.tree.Tree.add_child"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "\"\"\"\n        class for prior probability\n        :param config: helper.configure, Configure object\n        \"\"\"", "\n", "super", "(", "DatasetStatistic", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "root", "=", "Tree", "(", "'Root'", ")", "\n", "# label_tree => root", "\n", "self", ".", "label_trees", "=", "dict", "(", ")", "\n", "self", ".", "label_trees", "[", "ROOT_LABEL", "]", "=", "self", ".", "root", "\n", "self", ".", "hierarchical_label_dict", ",", "self", ".", "label_vocab", "=", "self", ".", "get_hierar_relations_with_name", "(", "\n", "'../'", "+", "os", ".", "path", ".", "join", "(", "config", ".", "data", ".", "data_dir", ",", "config", ".", "data", ".", "hierarchy", ")", ")", "\n", "self", ".", "level", "=", "0", "\n", "self", ".", "level_dict", "=", "dict", "(", ")", "\n", "self", ".", "init_prior_prob_dict", "=", "dict", "(", ")", "\n", "\n", "# build tree structure for treelstm", "\n", "for", "parent", "in", "list", "(", "self", ".", "hierarchical_label_dict", ".", "keys", "(", ")", ")", ":", "\n", "            ", "print", "(", "self", ".", "label_trees", ".", "keys", "(", ")", ")", "\n", "print", "(", "parent", ")", "\n", "assert", "parent", "in", "self", ".", "label_trees", ".", "keys", "(", ")", "\n", "parent_tree", "=", "self", ".", "label_trees", "[", "parent", "]", "\n", "self", ".", "init_prior_prob_dict", "[", "parent", "]", "=", "dict", "(", ")", "\n", "\n", "for", "child", "in", "self", ".", "hierarchical_label_dict", "[", "parent", "]", ":", "\n", "                ", "assert", "child", "not", "in", "self", ".", "label_trees", ".", "keys", "(", ")", "\n", "self", ".", "init_prior_prob_dict", "[", "parent", "]", "[", "child", "]", "=", "0", "\n", "child_tree", "=", "Tree", "(", "child", ")", "\n", "parent_tree", ".", "add_child", "(", "child_tree", ")", "\n", "self", ".", "label_trees", "[", "child", "]", "=", "child_tree", "\n", "", "", "self", ".", "prior_prob_dict", "=", "copy", ".", "deepcopy", "(", "self", ".", "init_prior_prob_dict", ")", "\n", "self", ".", "total_train_prob_dict", "=", "copy", ".", "deepcopy", "(", "self", ".", "init_prior_prob_dict", ")", "\n", "\n", "for", "label", "in", "self", ".", "hierarchical_label_dict", ".", "keys", "(", ")", ":", "\n", "            ", "print", "(", "label", ",", "len", "(", "self", ".", "hierarchical_label_dict", "[", "label", "]", ")", ")", "\n", "print", "(", "self", ".", "hierarchical_label_dict", "[", "label", "]", ")", "\n", "", "for", "label", "in", "self", ".", "label_vocab", ":", "\n", "            ", "label_depth", "=", "self", ".", "label_trees", "[", "label", "]", ".", "depth", "(", ")", "\n", "if", "label_depth", "not", "in", "self", ".", "level_dict", ".", "keys", "(", ")", ":", "\n", "                ", "self", ".", "level_dict", "[", "label_depth", "]", "=", "[", "label", "]", "\n", "", "else", ":", "\n", "                ", "self", ".", "level_dict", "[", "label_depth", "]", ".", "append", "(", "label", ")", "\n", "\n", "", "", "print", "(", "self", ".", "level", ")", "\n", "print", "(", "self", ".", "level_dict", ")", "\n", "for", "i", "in", "self", ".", "level_dict", ".", "keys", "(", ")", ":", "\n", "            ", "print", "(", "i", ",", "len", "(", "set", "(", "self", ".", "level_dict", "[", "i", "]", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.helper.hierarchy_tree_statistic_wos.DatasetStatistic.get_taxonomy_file": [[65, 96], ["open", "open.readlines", "open.close", "dict", "print", "len", "print", "open", "open.close", "line.rstrip.rstrip.rstrip", "output_lines.append", "open.write", "os.path.join", "[].split", "[].split", "dict.keys", "hierarcy_dict[].append", "os.path.join", "dict.keys", "known_label.append", "line.rstrip.rstrip.split", "line.rstrip.rstrip.split"], "methods", ["None"], ["", "", "def", "get_taxonomy_file", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n\n        :return:\n        \"\"\"", "\n", "file", "=", "open", "(", "'../'", "+", "os", ".", "path", ".", "join", "(", "self", ".", "config", ".", "data", ".", "data_dir", ",", "self", ".", "config", ".", "data", ".", "hierarchy", ")", ",", "'r'", ")", "\n", "data", "=", "file", ".", "readlines", "(", ")", "\n", "file", ".", "close", "(", ")", "\n", "hierarcy_dict", "=", "dict", "(", ")", "\n", "for", "line", "in", "data", ":", "\n", "            ", "line", "=", "line", ".", "rstrip", "(", "'\\n'", ")", "\n", "p", "=", "line", ".", "split", "(", "'parent: '", ")", "[", "1", "]", ".", "split", "(", "' '", ")", "[", "0", "]", "\n", "c", "=", "line", ".", "split", "(", "'child: '", ")", "[", "1", "]", ".", "split", "(", "' '", ")", "[", "0", "]", "\n", "if", "p", "not", "in", "hierarcy_dict", ".", "keys", "(", ")", ":", "\n", "                ", "hierarcy_dict", "[", "p", "]", "=", "[", "c", "]", "\n", "", "else", ":", "\n", "                ", "hierarcy_dict", "[", "p", "]", ".", "append", "(", "c", ")", "\n", "", "", "print", "(", "hierarcy_dict", ")", "\n", "known_label", "=", "[", "'Root'", "]", "\n", "output_lines", "=", "[", "]", "\n", "while", "len", "(", "known_label", ")", ":", "\n", "            ", "output_lines", ".", "append", "(", "[", "known_label", "[", "0", "]", "]", "+", "hierarcy_dict", "[", "known_label", "[", "0", "]", "]", ")", "\n", "for", "i", "in", "hierarcy_dict", "[", "known_label", "[", "0", "]", "]", ":", "\n", "                ", "if", "i", "in", "hierarcy_dict", ".", "keys", "(", ")", ":", "\n", "                    ", "known_label", ".", "append", "(", "i", ")", "\n", "", "", "known_label", "=", "known_label", "[", "1", ":", "]", "\n", "", "print", "(", "output_lines", ")", "\n", "file", "=", "open", "(", "'../'", "+", "os", ".", "path", ".", "join", "(", "self", ".", "config", ".", "data", ".", "data_dir", ",", "self", ".", "config", ".", "data", ".", "hierarchy", ")", ",", "'w'", ")", "\n", "for", "i", "in", "output_lines", ":", "\n", "            ", "file", ".", "write", "(", "'\\t'", ".", "join", "(", "i", ")", "+", "'\\n'", ")", "\n", "", "file", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.helper.hierarchy_tree_statistic_wos.DatasetStatistic.get_hierar_relations_with_name": [[97, 114], ["dict", "open", "open.readlines", "open.close", "print", "relation.rstrip().split", "label_vocab.extend", "label_vocab.append", "set", "dict.keys", "relation.rstrip"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_hierar_relations_with_name", "(", "taxo_file_dir", ")", ":", "\n", "        ", "parent_child_dict", "=", "dict", "(", ")", "\n", "label_vocab", "=", "[", "]", "\n", "f", "=", "open", "(", "taxo_file_dir", ",", "'r'", ")", "\n", "relation_data", "=", "f", ".", "readlines", "(", ")", "\n", "f", ".", "close", "(", ")", "\n", "for", "relation", "in", "relation_data", ":", "\n", "# relation_list = relation.split()", "\n", "            ", "relation_list", "=", "relation", ".", "rstrip", "(", "'\\n'", ")", ".", "split", "(", "'\\t'", ")", "\n", "parent", ",", "children", "=", "relation_list", "[", "0", "]", ",", "relation_list", "[", "1", ":", "]", "\n", "assert", "parent", "not", "in", "parent_child_dict", ".", "keys", "(", ")", "\n", "parent_child_dict", "[", "parent", "]", "=", "children", "\n", "label_vocab", ".", "extend", "(", "children", ")", "\n", "label_vocab", ".", "append", "(", "parent", ")", "\n", "", "print", "(", "parent_child_dict", ")", "\n", "return", "parent_child_dict", ",", "set", "(", "label_vocab", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.helper.hierarchy_tree_statistic_wos.DatasetStatistic.get_data_statistic": [[115, 196], ["dict", "open", "open.readlines", "open.close", "len", "dict", "collections.defaultdict", "range", "copy.deepcopy", "json.loads", "len", "len", "float", "float", "dict.keys", "hierarchy_tree_statistic_wos.DatasetStatistic.init_prior_prob_dict.keys", "hierarchy_tree_statistic_wos.DatasetStatistic.init_prior_prob_dict[].keys", "len", "len", "float"], "methods", ["None"], ["", "def", "get_data_statistic", "(", "self", ",", "file_name", ")", ":", "\n", "        ", "all_label_num", "=", "0", "\n", "label_num_dict", "=", "dict", "(", ")", "\n", "f", "=", "open", "(", "file_name", ",", "'r'", ")", "\n", "data", "=", "f", ".", "readlines", "(", ")", "\n", "f", ".", "close", "(", ")", "\n", "count_data", "=", "len", "(", "data", ")", "\n", "sample_count_not_to_end", "=", "0", "\n", "path_count_not_to_end", "=", "0", "\n", "doc_length_all", "=", "0", "\n", "label_doc_len_dict", "=", "dict", "(", ")", "\n", "level_num_dict", "=", "defaultdict", "(", "int", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "level", "+", "1", ")", ":", "\n", "            ", "level_num_dict", "[", "i", "]", "=", "0", "\n", "", "prob_dict", "=", "copy", ".", "deepcopy", "(", "self", ".", "init_prior_prob_dict", ")", "\n", "\n", "for", "sample", "in", "data", ":", "\n", "            ", "sample_flag", "=", "False", "\n", "sample", "=", "json", ".", "loads", "(", "sample", ")", "\n", "sample_label", "=", "sample", "[", "'label'", "]", "\n", "all_label_num", "+=", "len", "(", "sample_label", ")", "\n", "doc_length_all", "+=", "len", "(", "sample", "[", "'token'", "]", ")", "\n", "# sample label : list of labels", "\n", "for", "label", "in", "sample_label", ":", "\n", "                ", "path_flag", "=", "False", "\n", "assert", "label", "in", "self", ".", "label_vocab", "\n", "level_num_dict", "[", "self", ".", "label_trees", "[", "label", "]", ".", "_depth", "]", "+=", "1", "\n", "if", "label", "in", "self", ".", "init_prior_prob_dict", ".", "keys", "(", ")", ":", "\n", "# TODO the children of Root node, need to be changed according to different corpus", "\n", "                    ", "if", "label", "in", "[", "\"CS\"", ",", "\"Medical\"", ",", "\"Civil\"", ",", "\"ECE\"", ",", "\"biochemistry\"", ",", "\"MAE\"", ",", "\"Psychology\"", "]", ":", "\n", "#if label in [\"CCAT\", \"ECAT\", \"GCAT\", \"MCAT\"]:", "\n", "                        ", "prob_dict", "[", "ROOT_LABEL", "]", "[", "label", "]", "+=", "1", "\n", "self", ".", "prior_prob_dict", "[", "ROOT_LABEL", "]", "[", "label", "]", "+=", "1", "\n", "if", "'train'", "in", "file_name", "or", "'val'", "in", "file_name", ":", "\n", "                            ", "self", ".", "total_train_prob_dict", "[", "ROOT_LABEL", "]", "[", "label", "]", "+=", "1", "\n", "\n", "", "", "for", "c", "in", "self", ".", "init_prior_prob_dict", "[", "label", "]", ".", "keys", "(", ")", ":", "\n", "                        ", "if", "c", "in", "sample_label", ":", "\n", "                            ", "prob_dict", "[", "label", "]", "[", "c", "]", "+=", "1", "\n", "self", ".", "prior_prob_dict", "[", "label", "]", "[", "c", "]", "+=", "1", "\n", "if", "'train'", "in", "file_name", "or", "'val'", "in", "file_name", ":", "\n", "                                ", "self", ".", "total_train_prob_dict", "[", "label", "]", "[", "c", "]", "+=", "1", "\n", "\n", "", "", "", "", "if", "label", "not", "in", "label_num_dict", ":", "\n", "                    ", "label_num_dict", "[", "label", "]", "=", "1", "\n", "label_doc_len_dict", "[", "label", "]", "=", "len", "(", "sample", "[", "'token'", "]", ")", "\n", "", "else", ":", "\n", "                    ", "label_num_dict", "[", "label", "]", "+=", "1", "\n", "label_doc_len_dict", "[", "label", "]", "+=", "len", "(", "sample", "[", "'token'", "]", ")", "\n", "\n", "", "if", "self", ".", "label_trees", "[", "label", "]", ".", "num_children", ">", "0", "and", "not", "(", "sample_flag", "and", "path_flag", ")", ":", "\n", "# flag = False", "\n", "                    ", "for", "child", "in", "self", ".", "label_trees", "[", "label", "]", ".", "children", ":", "\n", "                        ", "if", "child", ".", "idx", "in", "sample_label", ":", "\n", "                            ", "sample_flag", "=", "True", "\n", "path_flag", "=", "True", "\n", "\n", "", "", "if", "not", "path_flag", ":", "\n", "                        ", "path_count_not_to_end", "+=", "1", "\n", "", "if", "not", "sample_flag", ":", "\n", "                        ", "sample_count_not_to_end", "+=", "1", "\n", "# print(sample)", "\n", "", "", "", "", "avg_label_num", "=", "float", "(", "all_label_num", ")", "/", "count_data", "\n", "avg_doc_len", "=", "float", "(", "doc_length_all", ")", "/", "count_data", "\n", "\n", "for", "label", "in", "self", ".", "label_vocab", ":", "\n", "            ", "if", "label", "not", "in", "label_doc_len_dict", ".", "keys", "(", ")", ":", "\n", "                ", "label_doc_len_dict", "[", "label", "]", "=", "0.0", "\n", "", "else", ":", "\n", "                ", "label_doc_len_dict", "[", "label", "]", "=", "float", "(", "label_doc_len_dict", "[", "label", "]", ")", "/", "label_num_dict", "[", "label", "]", "\n", "\n", "", "", "return", "{", "\n", "'num_of_samples'", ":", "count_data", ",", "\n", "'average_label_num_per_sample'", ":", "avg_label_num", ",", "\n", "'average_doc_length_per_sample'", ":", "avg_doc_len", ",", "\n", "'label_num_dict'", ":", "label_num_dict", ",", "\n", "'average_doc_length_per_label'", ":", "label_doc_len_dict", ",", "\n", "'sample_end_before_leaf_nodes'", ":", "sample_count_not_to_end", ",", "\n", "'path_end_before_leaf_nodes'", ":", "path_count_not_to_end", ",", "\n", "'level_sample_number'", ":", "level_num_dict", ",", "\n", "'prob_dict'", ":", "prob_dict", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.helper.hierarchy_tree_statistic_wos.prior_probs": [[199, 208], ["prob_dict.keys", "float"], "function", ["None"], ["", "", "def", "prior_probs", "(", "prob_dict", ")", ":", "\n", "    ", "for", "p", "in", "prob_dict", ".", "keys", "(", ")", ":", "\n", "        ", "total_sum", "=", "0", "\n", "for", "c", "in", "prob_dict", "[", "p", "]", ":", "\n", "            ", "total_sum", "+=", "prob_dict", "[", "p", "]", "[", "c", "]", "\n", "", "if", "total_sum", ":", "\n", "            ", "for", "c", "in", "prob_dict", "[", "p", "]", ":", "\n", "                ", "prob_dict", "[", "p", "]", "[", "c", "]", "=", "float", "(", "prob_dict", "[", "p", "]", "[", "c", "]", ")", "/", "total_sum", "\n", "", "", "", "return", "prob_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.helper.configure.Configure.__init__": [[11, 24], ["os.path.isfile", "configure.Configure.update", "configure.Configure.update", "open", "json.load"], "methods", ["home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.helper.configure.Configure.update", "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.helper.configure.Configure.update"], ["    ", "def", "__init__", "(", "self", ",", "config", "=", "None", ",", "config_json_file", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        convert conf.json to Dict and Object\n        :param config: Dict, change specified configure\n        :param config_json_file: conf.json, json.load(f)\n        \"\"\"", "\n", "if", "config_json_file", ":", "\n", "            ", "assert", "os", ".", "path", ".", "isfile", "(", "config_json_file", ")", ",", "\"Error: Configure file not exists!!\"", "\n", "with", "open", "(", "config_json_file", ",", "'r'", ")", "as", "fin", ":", "\n", "                ", "self", ".", "dict", "=", "json", ".", "load", "(", "fin", ")", "\n", "", "self", ".", "update", "(", "self", ".", "dict", ")", "\n", "", "if", "config", ":", "\n", "            ", "self", ".", "update", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.helper.configure.Configure.__getitem__": [[25, 32], ["None"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "key", ")", ":", "\n", "        ", "\"\"\"\n        get configure as attribute\n        :param key: specified key\n        :return: configure value -> Int/List/Dict\n        \"\"\"", "\n", "return", "self", ".", "__dict__", "[", "key", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.helper.configure.Configure.__contains__": [[33, 40], ["configure.Configure.dict.keys"], "methods", ["None"], ["", "def", "__contains__", "(", "self", ",", "key", ")", ":", "\n", "        ", "\"\"\"\n        check whether the configure is set\n        :param key: specified key\n        :return: Boolean\n        \"\"\"", "\n", "return", "key", "in", "self", ".", "dict", ".", "keys", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.helper.configure.Configure.add": [[41, 48], ["None"], "methods", ["None"], ["", "def", "add", "(", "self", ",", "k", ",", "v", ")", ":", "\n", "        ", "\"\"\"\n        add new configure\n        :param k: specified key\n        :param v: value\n        \"\"\"", "\n", "self", ".", "__dict__", "[", "k", "]", "=", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.helper.configure.Configure.items": [[49, 54], ["configure.Configure.dict.items"], "methods", ["home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.helper.configure.Configure.items"], ["", "def", "items", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        :return: Iteration[Tuple(Str(key), value)]\n        \"\"\"", "\n", "return", "self", ".", "dict", ".", "items", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.helper.configure.Configure.update": [[55, 68], ["isinstance", "config.items", "configure.Configure.__dict__.update", "configure.Configure.logging", "isinstance", "configure.Configure", "isinstance", "isinstance", "configure.Configure"], "methods", ["home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.helper.configure.Configure.items", "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.helper.configure.Configure.update", "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.helper.configure.Configure.logging"], ["", "def", "update", "(", "self", ",", "config", ")", ":", "\n", "        ", "\"\"\"\n        update configure\n        :param config: Dict{k:v}\n        \"\"\"", "\n", "assert", "isinstance", "(", "config", ",", "dict", ")", ",", "\"Configure file should be a json file and be transformed into a Dictionary!\"", "\n", "for", "k", ",", "v", "in", "config", ".", "items", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "v", ",", "dict", ")", ":", "\n", "                ", "config", "[", "k", "]", "=", "Configure", "(", "v", ")", "\n", "", "elif", "isinstance", "(", "v", ",", "list", ")", ":", "\n", "                ", "config", "[", "k", "]", "=", "[", "Configure", "(", "x", ")", "if", "isinstance", "(", "x", ",", "dict", ")", "else", "x", "for", "x", "in", "v", "]", "\n", "", "", "self", ".", "__dict__", ".", "update", "(", "config", ")", "\n", "self", ".", "logging", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.helper.configure.Configure.logging": [[69, 74], ["helper.info"], "methods", ["home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.helper.logger.info"], ["", "def", "logging", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        log latest configure\n        \"\"\"", "\n", "logger", ".", "info", "(", "\"CONFIGURE: {}\"", ".", "format", "(", "self", ".", "__dict__", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.helper.hierarchy_tree_statistic_rcv1.DatasetStatistic.__init__": [[16, 64], ["object.__init__", "models.structure_model.tree.Tree", "dict", "hierarchy_tree_statistic_rcv1.DatasetStatistic.get_hierar_relations_with_name", "dict", "dict", "list", "copy.deepcopy", "copy.deepcopy", "hierarchy_tree_statistic_rcv1.DatasetStatistic.hierarchical_label_dict.keys", "print", "print", "hierarchy_tree_statistic_rcv1.DatasetStatistic.level_dict.keys", "hierarchy_tree_statistic_rcv1.DatasetStatistic.hierarchical_label_dict.keys", "print", "print", "dict", "print", "print", "hierarchy_tree_statistic_rcv1.DatasetStatistic.label_trees[].depth", "print", "os.path.join", "hierarchy_tree_statistic_rcv1.DatasetStatistic.label_trees.keys", "hierarchy_tree_statistic_rcv1.DatasetStatistic.label_trees.keys", "models.structure_model.tree.Tree", "parent_tree.add_child", "len", "hierarchy_tree_statistic_rcv1.DatasetStatistic.level_dict.keys", "hierarchy_tree_statistic_rcv1.DatasetStatistic.level_dict[].append", "len", "hierarchy_tree_statistic_rcv1.DatasetStatistic.label_trees.keys", "set"], "methods", ["home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.structure_model.tree.Tree.__init__", "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.helper.hierarchy_tree_statistic_rcv1.DatasetStatistic.get_hierar_relations_with_name", "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.structure_model.tree.Tree.depth", "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.structure_model.tree.Tree.add_child"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "\"\"\"\n        class for prior probability\n        :param config: helper.configure, Configure object\n        \"\"\"", "\n", "super", "(", "DatasetStatistic", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "root", "=", "Tree", "(", "'Root'", ")", "\n", "# label_tree => root", "\n", "self", ".", "label_trees", "=", "dict", "(", ")", "\n", "self", ".", "label_trees", "[", "ROOT_LABEL", "]", "=", "self", ".", "root", "\n", "self", ".", "hierarchical_label_dict", ",", "self", ".", "label_vocab", "=", "self", ".", "get_hierar_relations_with_name", "(", "\n", "'../'", "+", "os", ".", "path", ".", "join", "(", "config", ".", "data", ".", "data_dir", ",", "config", ".", "data", ".", "hierarchy", ")", ")", "\n", "self", ".", "level", "=", "0", "\n", "self", ".", "level_dict", "=", "dict", "(", ")", "\n", "self", ".", "init_prior_prob_dict", "=", "dict", "(", ")", "\n", "\n", "# build tree structure for treelstm", "\n", "for", "parent", "in", "list", "(", "self", ".", "hierarchical_label_dict", ".", "keys", "(", ")", ")", ":", "\n", "            ", "print", "(", "self", ".", "label_trees", ".", "keys", "(", ")", ")", "\n", "print", "(", "parent", ")", "\n", "assert", "parent", "in", "self", ".", "label_trees", ".", "keys", "(", ")", "\n", "parent_tree", "=", "self", ".", "label_trees", "[", "parent", "]", "\n", "self", ".", "init_prior_prob_dict", "[", "parent", "]", "=", "dict", "(", ")", "\n", "\n", "for", "child", "in", "self", ".", "hierarchical_label_dict", "[", "parent", "]", ":", "\n", "                ", "assert", "child", "not", "in", "self", ".", "label_trees", ".", "keys", "(", ")", "\n", "self", ".", "init_prior_prob_dict", "[", "parent", "]", "[", "child", "]", "=", "0", "\n", "child_tree", "=", "Tree", "(", "child", ")", "\n", "parent_tree", ".", "add_child", "(", "child_tree", ")", "\n", "self", ".", "label_trees", "[", "child", "]", "=", "child_tree", "\n", "", "", "self", ".", "prior_prob_dict", "=", "copy", ".", "deepcopy", "(", "self", ".", "init_prior_prob_dict", ")", "\n", "self", ".", "total_train_prob_dict", "=", "copy", ".", "deepcopy", "(", "self", ".", "init_prior_prob_dict", ")", "\n", "\n", "for", "label", "in", "self", ".", "hierarchical_label_dict", ".", "keys", "(", ")", ":", "\n", "            ", "print", "(", "label", ",", "len", "(", "self", ".", "hierarchical_label_dict", "[", "label", "]", ")", ")", "\n", "print", "(", "self", ".", "hierarchical_label_dict", "[", "label", "]", ")", "\n", "", "for", "label", "in", "self", ".", "label_vocab", ":", "\n", "            ", "label_depth", "=", "self", ".", "label_trees", "[", "label", "]", ".", "depth", "(", ")", "\n", "if", "label_depth", "not", "in", "self", ".", "level_dict", ".", "keys", "(", ")", ":", "\n", "                ", "self", ".", "level_dict", "[", "label_depth", "]", "=", "[", "label", "]", "\n", "", "else", ":", "\n", "                ", "self", ".", "level_dict", "[", "label_depth", "]", ".", "append", "(", "label", ")", "\n", "\n", "", "", "print", "(", "self", ".", "level", ")", "\n", "print", "(", "self", ".", "level_dict", ")", "\n", "for", "i", "in", "self", ".", "level_dict", ".", "keys", "(", ")", ":", "\n", "            ", "print", "(", "i", ",", "len", "(", "set", "(", "self", ".", "level_dict", "[", "i", "]", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.helper.hierarchy_tree_statistic_rcv1.DatasetStatistic.get_taxonomy_file": [[65, 96], ["open", "open.readlines", "open.close", "dict", "print", "len", "print", "open", "open.close", "line.rstrip.rstrip.rstrip", "output_lines.append", "open.write", "os.path.join", "[].split", "[].split", "dict.keys", "hierarcy_dict[].append", "os.path.join", "dict.keys", "known_label.append", "line.rstrip.rstrip.split", "line.rstrip.rstrip.split"], "methods", ["None"], ["", "", "def", "get_taxonomy_file", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n\n        :return:\n        \"\"\"", "\n", "file", "=", "open", "(", "'../'", "+", "os", ".", "path", ".", "join", "(", "self", ".", "config", ".", "data", ".", "data_dir", ",", "self", ".", "config", ".", "data", ".", "hierarchy", ")", ",", "'r'", ")", "\n", "data", "=", "file", ".", "readlines", "(", ")", "\n", "file", ".", "close", "(", ")", "\n", "hierarcy_dict", "=", "dict", "(", ")", "\n", "for", "line", "in", "data", ":", "\n", "            ", "line", "=", "line", ".", "rstrip", "(", "'\\n'", ")", "\n", "p", "=", "line", ".", "split", "(", "'parent: '", ")", "[", "1", "]", ".", "split", "(", "' '", ")", "[", "0", "]", "\n", "c", "=", "line", ".", "split", "(", "'child: '", ")", "[", "1", "]", ".", "split", "(", "' '", ")", "[", "0", "]", "\n", "if", "p", "not", "in", "hierarcy_dict", ".", "keys", "(", ")", ":", "\n", "                ", "hierarcy_dict", "[", "p", "]", "=", "[", "c", "]", "\n", "", "else", ":", "\n", "                ", "hierarcy_dict", "[", "p", "]", ".", "append", "(", "c", ")", "\n", "", "", "print", "(", "hierarcy_dict", ")", "\n", "known_label", "=", "[", "'Root'", "]", "\n", "output_lines", "=", "[", "]", "\n", "while", "len", "(", "known_label", ")", ":", "\n", "            ", "output_lines", ".", "append", "(", "[", "known_label", "[", "0", "]", "]", "+", "hierarcy_dict", "[", "known_label", "[", "0", "]", "]", ")", "\n", "for", "i", "in", "hierarcy_dict", "[", "known_label", "[", "0", "]", "]", ":", "\n", "                ", "if", "i", "in", "hierarcy_dict", ".", "keys", "(", ")", ":", "\n", "                    ", "known_label", ".", "append", "(", "i", ")", "\n", "", "", "known_label", "=", "known_label", "[", "1", ":", "]", "\n", "", "print", "(", "output_lines", ")", "\n", "file", "=", "open", "(", "'../'", "+", "os", ".", "path", ".", "join", "(", "self", ".", "config", ".", "data", ".", "data_dir", ",", "self", ".", "config", ".", "data", ".", "hierarchy", ")", ",", "'w'", ")", "\n", "for", "i", "in", "output_lines", ":", "\n", "            ", "file", ".", "write", "(", "'\\t'", ".", "join", "(", "i", ")", "+", "'\\n'", ")", "\n", "", "file", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.helper.hierarchy_tree_statistic_rcv1.DatasetStatistic.get_hierar_relations_with_name": [[97, 114], ["dict", "open", "open.readlines", "open.close", "print", "relation.rstrip().split", "label_vocab.extend", "label_vocab.append", "set", "dict.keys", "relation.rstrip"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_hierar_relations_with_name", "(", "taxo_file_dir", ")", ":", "\n", "        ", "parent_child_dict", "=", "dict", "(", ")", "\n", "label_vocab", "=", "[", "]", "\n", "f", "=", "open", "(", "taxo_file_dir", ",", "'r'", ")", "\n", "relation_data", "=", "f", ".", "readlines", "(", ")", "\n", "f", ".", "close", "(", ")", "\n", "for", "relation", "in", "relation_data", ":", "\n", "# relation_list = relation.split()", "\n", "            ", "relation_list", "=", "relation", ".", "rstrip", "(", "'\\n'", ")", ".", "split", "(", "'\\t'", ")", "\n", "parent", ",", "children", "=", "relation_list", "[", "0", "]", ",", "relation_list", "[", "1", ":", "]", "\n", "assert", "parent", "not", "in", "parent_child_dict", ".", "keys", "(", ")", "\n", "parent_child_dict", "[", "parent", "]", "=", "children", "\n", "label_vocab", ".", "extend", "(", "children", ")", "\n", "label_vocab", ".", "append", "(", "parent", ")", "\n", "", "print", "(", "parent_child_dict", ")", "\n", "return", "parent_child_dict", ",", "set", "(", "label_vocab", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.helper.hierarchy_tree_statistic_rcv1.DatasetStatistic.get_data_statistic": [[115, 196], ["dict", "open", "open.readlines", "open.close", "len", "dict", "collections.defaultdict", "range", "copy.deepcopy", "json.loads", "len", "len", "float", "float", "dict.keys", "hierarchy_tree_statistic_rcv1.DatasetStatistic.init_prior_prob_dict.keys", "hierarchy_tree_statistic_rcv1.DatasetStatistic.init_prior_prob_dict[].keys", "len", "len", "float"], "methods", ["None"], ["", "def", "get_data_statistic", "(", "self", ",", "file_name", ")", ":", "\n", "        ", "all_label_num", "=", "0", "\n", "label_num_dict", "=", "dict", "(", ")", "\n", "f", "=", "open", "(", "file_name", ",", "'r'", ")", "\n", "data", "=", "f", ".", "readlines", "(", ")", "\n", "f", ".", "close", "(", ")", "\n", "count_data", "=", "len", "(", "data", ")", "\n", "sample_count_not_to_end", "=", "0", "\n", "path_count_not_to_end", "=", "0", "\n", "doc_length_all", "=", "0", "\n", "label_doc_len_dict", "=", "dict", "(", ")", "\n", "level_num_dict", "=", "defaultdict", "(", "int", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "level", "+", "1", ")", ":", "\n", "            ", "level_num_dict", "[", "i", "]", "=", "0", "\n", "", "prob_dict", "=", "copy", ".", "deepcopy", "(", "self", ".", "init_prior_prob_dict", ")", "\n", "\n", "for", "sample", "in", "data", ":", "\n", "            ", "sample_flag", "=", "False", "\n", "sample", "=", "json", ".", "loads", "(", "sample", ")", "\n", "sample_label", "=", "sample", "[", "'label'", "]", "\n", "all_label_num", "+=", "len", "(", "sample_label", ")", "\n", "doc_length_all", "+=", "len", "(", "sample", "[", "'token'", "]", ")", "\n", "# sample label : list of labels", "\n", "for", "label", "in", "sample_label", ":", "\n", "                ", "path_flag", "=", "False", "\n", "assert", "label", "in", "self", ".", "label_vocab", "\n", "level_num_dict", "[", "self", ".", "label_trees", "[", "label", "]", ".", "_depth", "]", "+=", "1", "\n", "if", "label", "in", "self", ".", "init_prior_prob_dict", ".", "keys", "(", ")", ":", "\n", "# TODO the children of Root node, need to be changed according to different corpus", "\n", "#if label in[\"CS\", \"Medical\", \"Civil\", \"ECE\", \"biochemistry\", \"MAE\", \"Psychology\"]:", "\n", "                    ", "if", "label", "in", "[", "\"CCAT\"", ",", "\"ECAT\"", ",", "\"GCAT\"", ",", "\"MCAT\"", "]", ":", "\n", "                        ", "prob_dict", "[", "ROOT_LABEL", "]", "[", "label", "]", "+=", "1", "\n", "self", ".", "prior_prob_dict", "[", "ROOT_LABEL", "]", "[", "label", "]", "+=", "1", "\n", "if", "'train'", "in", "file_name", "or", "'val'", "in", "file_name", ":", "\n", "                            ", "self", ".", "total_train_prob_dict", "[", "ROOT_LABEL", "]", "[", "label", "]", "+=", "1", "\n", "\n", "", "", "for", "c", "in", "self", ".", "init_prior_prob_dict", "[", "label", "]", ".", "keys", "(", ")", ":", "\n", "                        ", "if", "c", "in", "sample_label", ":", "\n", "                            ", "prob_dict", "[", "label", "]", "[", "c", "]", "+=", "1", "\n", "self", ".", "prior_prob_dict", "[", "label", "]", "[", "c", "]", "+=", "1", "\n", "if", "'train'", "in", "file_name", "or", "'val'", "in", "file_name", ":", "\n", "                                ", "self", ".", "total_train_prob_dict", "[", "label", "]", "[", "c", "]", "+=", "1", "\n", "\n", "", "", "", "", "if", "label", "not", "in", "label_num_dict", ":", "\n", "                    ", "label_num_dict", "[", "label", "]", "=", "1", "\n", "label_doc_len_dict", "[", "label", "]", "=", "len", "(", "sample", "[", "'token'", "]", ")", "\n", "", "else", ":", "\n", "                    ", "label_num_dict", "[", "label", "]", "+=", "1", "\n", "label_doc_len_dict", "[", "label", "]", "+=", "len", "(", "sample", "[", "'token'", "]", ")", "\n", "\n", "", "if", "self", ".", "label_trees", "[", "label", "]", ".", "num_children", ">", "0", "and", "not", "(", "sample_flag", "and", "path_flag", ")", ":", "\n", "# flag = False", "\n", "                    ", "for", "child", "in", "self", ".", "label_trees", "[", "label", "]", ".", "children", ":", "\n", "                        ", "if", "child", ".", "idx", "in", "sample_label", ":", "\n", "                            ", "sample_flag", "=", "True", "\n", "path_flag", "=", "True", "\n", "\n", "", "", "if", "not", "path_flag", ":", "\n", "                        ", "path_count_not_to_end", "+=", "1", "\n", "", "if", "not", "sample_flag", ":", "\n", "                        ", "sample_count_not_to_end", "+=", "1", "\n", "# print(sample)", "\n", "", "", "", "", "avg_label_num", "=", "float", "(", "all_label_num", ")", "/", "count_data", "\n", "avg_doc_len", "=", "float", "(", "doc_length_all", ")", "/", "count_data", "\n", "\n", "for", "label", "in", "self", ".", "label_vocab", ":", "\n", "            ", "if", "label", "not", "in", "label_doc_len_dict", ".", "keys", "(", ")", ":", "\n", "                ", "label_doc_len_dict", "[", "label", "]", "=", "0.0", "\n", "", "else", ":", "\n", "                ", "label_doc_len_dict", "[", "label", "]", "=", "float", "(", "label_doc_len_dict", "[", "label", "]", ")", "/", "label_num_dict", "[", "label", "]", "\n", "\n", "", "", "return", "{", "\n", "'num_of_samples'", ":", "count_data", ",", "\n", "'average_label_num_per_sample'", ":", "avg_label_num", ",", "\n", "'average_doc_length_per_sample'", ":", "avg_doc_len", ",", "\n", "'label_num_dict'", ":", "label_num_dict", ",", "\n", "'average_doc_length_per_label'", ":", "label_doc_len_dict", ",", "\n", "'sample_end_before_leaf_nodes'", ":", "sample_count_not_to_end", ",", "\n", "'path_end_before_leaf_nodes'", ":", "path_count_not_to_end", ",", "\n", "'level_sample_number'", ":", "level_num_dict", ",", "\n", "'prob_dict'", ":", "prob_dict", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.helper.hierarchy_tree_statistic_rcv1.prior_probs": [[199, 208], ["prob_dict.keys", "float"], "function", ["None"], ["", "", "def", "prior_probs", "(", "prob_dict", ")", ":", "\n", "    ", "for", "p", "in", "prob_dict", ".", "keys", "(", ")", ":", "\n", "        ", "total_sum", "=", "0", "\n", "for", "c", "in", "prob_dict", "[", "p", "]", ":", "\n", "            ", "total_sum", "+=", "prob_dict", "[", "p", "]", "[", "c", "]", "\n", "", "if", "total_sum", ":", "\n", "            ", "for", "c", "in", "prob_dict", "[", "p", "]", ":", "\n", "                ", "prob_dict", "[", "p", "]", "[", "c", "]", "=", "float", "(", "prob_dict", "[", "p", "]", "[", "c", "]", ")", "/", "total_sum", "\n", "", "", "", "return", "prob_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.helper.logger.Logger.__init__": [[39, 51], ["object.__init__", "logging.basicConfig", "logging_level.keys", "logging.getLogger"], "methods", ["home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.structure_model.tree.Tree.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "\"\"\"\n        set the logging module\n        :param config: helper.configure, Configure object\n        \"\"\"", "\n", "super", "(", "Logger", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "config", ".", "log", ".", "level", "in", "logging_level", ".", "keys", "(", ")", "\n", "logging", ".", "getLogger", "(", "''", ")", ".", "handlers", "=", "[", "]", "\n", "logging", ".", "basicConfig", "(", "filename", "=", "config", ".", "log", ".", "filename", ",", "\n", "level", "=", "logging_level", "[", "config", ".", "log", ".", "level", "]", ",", "\n", "format", "=", "'%(asctime)s - %(levelname)s : %(message)s'", ",", "\n", "datefmt", "=", "'%Y/%m/%d %H:%M:%S'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.helper.logger.debug": [[13, 16], ["logging.debug", "print"], "function", ["home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.helper.logger.debug"], ["def", "debug", "(", "msg", ")", ":", "\n", "    ", "logging", ".", "debug", "(", "msg", ")", "\n", "print", "(", "'DEBUG: '", ",", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.helper.logger.info": [[18, 21], ["logging.info", "print"], "function", ["home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.helper.logger.info"], ["", "def", "info", "(", "msg", ")", ":", "\n", "    ", "logging", ".", "info", "(", "msg", ")", "\n", "print", "(", "'INFO: '", ",", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.helper.logger.warning": [[23, 26], ["logging.warning", "print"], "function", ["home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.helper.logger.warning"], ["", "def", "warning", "(", "msg", ")", ":", "\n", "    ", "logging", ".", "warning", "(", "msg", ")", "\n", "print", "(", "'WARNING: '", ",", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.helper.logger.error": [[28, 31], ["logging.error", "print"], "function", ["home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.helper.logger.error"], ["", "def", "error", "(", "msg", ")", ":", "\n", "    ", "logging", ".", "error", "(", "msg", ")", "\n", "print", "(", "'ERROR: '", ",", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.helper.logger.fatal": [[33, 36], ["logging.critical", "print"], "function", ["None"], ["", "def", "fatal", "(", "msg", ")", ":", "\n", "    ", "logging", ".", "critical", "(", "msg", ")", "\n", "print", "(", "'FATAL: '", ",", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.helper.utils.load_checkpoint": [[8, 24], ["torch.load", "model.load_state_dict", "optimizer.load_state_dict"], "function", ["None"], ["def", "load_checkpoint", "(", "model_file", ",", "model", ",", "config", ",", "optimizer", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    load models\n    :param model_file: Str, file path\n    :param model: Computational Graph\n    :param config: helper.configure, Configure object\n    :param optimizer: optimizer, torch.Adam\n    :return: best_performance -> [Float, Float], config -> Configure\n    \"\"\"", "\n", "checkpoint_model", "=", "torch", ".", "load", "(", "model_file", ")", "\n", "config", ".", "train", ".", "start_epoch", "=", "checkpoint_model", "[", "'epoch'", "]", "+", "1", "\n", "best_performance", "=", "checkpoint_model", "[", "'best_performance'", "]", "\n", "model", ".", "load_state_dict", "(", "checkpoint_model", "[", "'state_dict'", "]", ")", "\n", "if", "optimizer", "is", "not", "None", ":", "\n", "        ", "optimizer", ".", "load_state_dict", "(", "checkpoint_model", "[", "'optimizer'", "]", ")", "\n", "", "return", "best_performance", ",", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.helper.utils.save_checkpoint": [[26, 36], ["torch.save"], "function", ["None"], ["", "def", "save_checkpoint", "(", "state", ",", "model_file", ")", ":", "\n", "    ", "\"\"\"\n    :param state: Dict, e.g. {'state_dict': state,\n                              'optimizer': optimizer,\n                              'best_performance': [Float, Float],\n                              'epoch': int}\n    :param model_file: Str, file path\n    :return:\n    \"\"\"", "\n", "torch", ".", "save", "(", "state", ",", "model_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.helper.utils.get_hierarchy_relations": [[38, 78], ["dict", "codecs.open", "line.rstrip().split", "line.rstrip", "models.structure_model.tree.Tree", "parent_tree.add_child"], "function", ["home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.structure_model.tree.Tree.add_child"], ["", "def", "get_hierarchy_relations", "(", "hierar_taxonomy", ",", "label_map", ",", "root", "=", "None", ",", "fortree", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    get parent-children relationships from given hierar_taxonomy\n    parent_label \\t child_label_0 \\t child_label_1 \\n\n    :param hierar_taxonomy: Str, file path of hierarchy taxonomy\n    :param label_map: Dict, label to id\n    :param root: Str, root tag\n    :param fortree: Boolean, True : return label_tree -> List\n    :return: label_tree -> List[Tree], hierar_relation -> Dict{parent_id: List[child_id]}\n    \"\"\"", "\n", "label_tree", "=", "dict", "(", ")", "\n", "label_tree", "[", "0", "]", "=", "root", "\n", "hierar_relations", "=", "{", "}", "\n", "with", "codecs", ".", "open", "(", "hierar_taxonomy", ",", "\"r\"", ",", "\"utf8\"", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "line_split", "=", "line", ".", "rstrip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "parent_label", ",", "children_label", "=", "line_split", "[", "0", "]", ",", "line_split", "[", "1", ":", "]", "\n", "if", "parent_label", "not", "in", "label_map", ":", "\n", "                ", "if", "fortree", "and", "parent_label", "==", "'Root'", ":", "\n", "                    ", "parent_label_id", "=", "-", "1", "\n", "", "else", ":", "\n", "                    ", "continue", "\n", "", "", "else", ":", "\n", "                ", "parent_label_id", "=", "label_map", "[", "parent_label", "]", "\n", "", "children_label_ids", "=", "[", "label_map", "[", "child_label", "]", "for", "child_label", "in", "children_label", "if", "child_label", "in", "label_map", "]", "\n", "hierar_relations", "[", "parent_label_id", "]", "=", "children_label_ids", "\n", "if", "fortree", ":", "\n", "                ", "assert", "(", "parent_label_id", "+", "1", ")", "in", "label_tree", "\n", "parent_tree", "=", "label_tree", "[", "parent_label_id", "+", "1", "]", "\n", "\n", "for", "child", "in", "children_label_ids", ":", "\n", "                    ", "assert", "(", "child", "+", "1", ")", "not", "in", "label_tree", "\n", "child_tree", "=", "Tree", "(", "child", ")", "\n", "parent_tree", ".", "add_child", "(", "child_tree", ")", "\n", "label_tree", "[", "child", "+", "1", "]", "=", "child_tree", "\n", "", "", "", "", "if", "fortree", ":", "\n", "        ", "return", "hierar_relations", ",", "label_tree", "\n", "", "else", ":", "\n", "        ", "return", "hierar_relations", "\n", "", "", ""]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.train_modules.trainer.Trainer.__init__": [[11, 26], ["object.__init__"], "methods", ["home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.structure_model.tree.Tree.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "criterion", ",", "optimizer", ",", "vocab", ",", "config", ")", ":", "\n", "        ", "\"\"\"\n        :param model: Computational Graph\n        :param criterion: train_modules.ClassificationLoss object\n        :param optimizer: optimization function for backward pass\n        :param vocab: vocab.v2i -> Dict{'token': Dict{vocabulary to id map}, 'label': Dict{vocabulary\n        to id map}}, vocab.i2v -> Dict{'token': Dict{id to vocabulary map}, 'label': Dict{id to vocabulary map}}\n        :param config: helper.Configure object\n        \"\"\"", "\n", "super", "(", "Trainer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "vocab", "=", "vocab", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "criterion", "=", "criterion", "\n", "self", ".", "optimizer", "=", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.train_modules.trainer.Trainer.update_lr": [[27, 36], ["helper.warning"], "methods", ["home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.helper.logger.warning"], ["", "def", "update_lr", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        (callback function) update learning rate according to the decay weight\n        \"\"\"", "\n", "logger", ".", "warning", "(", "'Learning rate update {}--->{}'", "\n", ".", "format", "(", "self", ".", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ",", "\n", "self", ".", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "*", "self", ".", "config", ".", "train", ".", "optimizer", ".", "lr_decay", ")", ")", "\n", "for", "param", "in", "self", ".", "optimizer", ".", "param_groups", ":", "\n", "            ", "param", "[", "'lr'", "]", "=", "self", ".", "config", ".", "train", ".", "optimizer", ".", "learning_rate", "*", "self", ".", "config", ".", "train", ".", "optimizer", ".", "lr_decay", "\n", "\n"]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.train_modules.trainer.Trainer.run": [[37, 87], ["data_loader.__len__", "tqdm.tqdm", "trainer.Trainer.model", "trainer.Trainer.criterion", "loss.item", "torch.sigmoid().cpu().tolist", "predict_probs.extend", "target_labels.extend", "train_modules.evaluation_metrics.evaluate", "helper.info", "batch[].to", "trainer.Trainer.optimizer.zero_grad", "loss.backward", "trainer.Trainer.optimizer.step", "torch.sigmoid().cpu", "torch.sigmoid"], "methods", ["home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.data_modules.dataset.ClassificationDataset.__len__", "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.train_modules.evaluation_metrics.evaluate", "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.helper.logger.info"], ["", "", "def", "run", "(", "self", ",", "data_loader", ",", "epoch", ",", "stage", ",", "mode", "=", "'TRAIN'", ")", ":", "\n", "        ", "\"\"\"\n        training epoch\n        :param data_loader: Iteration[Dict{'token':tensor, 'label':tensor, }]\n        :param epoch: int, log results of this epoch\n        :param stage: str, e.g. 'TRAIN'/'DEV'/'TEST', figure out the corpus\n        :param mode: str, ['TRAIN', 'EVAL'], train with backward pass while eval without it\n        :return: metrics -> {'precision': 0.xx, 'recall': 0.xx, 'micro-f1': 0.xx, 'macro-f1': 0.xx}\n        \"\"\"", "\n", "predict_probs", "=", "[", "]", "\n", "target_labels", "=", "[", "]", "\n", "total_loss", "=", "0.0", "\n", "num_batch", "=", "data_loader", ".", "__len__", "(", ")", "\n", "\n", "for", "batch", "in", "tqdm", ".", "tqdm", "(", "data_loader", ")", ":", "\n", "            ", "text_label_mi_disc_loss", ",", "label_prior_loss", ",", "logits", ",", "loss_weight", "=", "self", ".", "model", "(", "batch", ")", "\n", "if", "self", ".", "config", ".", "train", ".", "loss", ".", "recursive_regularization", ".", "flag", ":", "\n", "                ", "recursive_constrained_params", "=", "self", ".", "model", ".", "htcinfomax", ".", "linear", ".", "weight", "\n", "", "else", ":", "\n", "                ", "recursive_constrained_params", "=", "None", "\n", "", "loss_predictor", "=", "self", ".", "criterion", "(", "logits", ",", "\n", "batch", "[", "'label'", "]", ".", "to", "(", "self", ".", "config", ".", "train", ".", "device_setting", ".", "device", ")", ",", "\n", "recursive_constrained_params", ")", "\n", "\n", "loss", "=", "loss_predictor", "+", "loss_weight", "*", "text_label_mi_disc_loss", "+", "(", "1", "-", "loss_weight", ")", "*", "label_prior_loss", "\n", "total_loss", "+=", "loss", ".", "item", "(", ")", "\n", "\n", "if", "mode", "==", "'TRAIN'", ":", "\n", "                ", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "", "predict_results", "=", "torch", ".", "sigmoid", "(", "logits", ")", ".", "cpu", "(", ")", ".", "tolist", "(", ")", "\n", "predict_probs", ".", "extend", "(", "predict_results", ")", "\n", "target_labels", ".", "extend", "(", "batch", "[", "'label_list'", "]", ")", "\n", "", "total_loss", "=", "total_loss", "/", "num_batch", "\n", "if", "mode", "==", "'EVAL'", ":", "\n", "            ", "metrics", "=", "evaluate", "(", "predict_probs", ",", "\n", "target_labels", ",", "\n", "self", ".", "vocab", ",", "\n", "self", ".", "config", ".", "eval", ".", "threshold", ")", "\n", "# metrics = {'precision': precision_micro,", "\n", "#             'recall': recall_micro,", "\n", "#             'micro_f1': micro_f1,", "\n", "#             'macro_f1': macro_f1}", "\n", "logger", ".", "info", "(", "\"%s performance at epoch %d --- Precision: %f, \"", "\n", "\"Recall: %f, Micro-F1: %f, Macro-F1: %f, Loss: %f.\\n\"", "\n", "%", "(", "stage", ",", "epoch", ",", "\n", "metrics", "[", "'precision'", "]", ",", "metrics", "[", "'recall'", "]", ",", "metrics", "[", "'micro_f1'", "]", ",", "metrics", "[", "'macro_f1'", "]", ",", "\n", "total_loss", ")", ")", "\n", "return", "metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.train_modules.trainer.Trainer.train": [[88, 97], ["trainer.Trainer.model.train", "trainer.Trainer.run"], "methods", ["home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.train_modules.trainer.Trainer.train", "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.train_modules.trainer.Trainer.run"], ["", "", "def", "train", "(", "self", ",", "data_loader", ",", "epoch", ")", ":", "\n", "        ", "\"\"\"\n        training module\n        :param data_loader: Iteration[Dict{'token':tensor, 'label':tensor, }]\n        :param epoch: int, log results of this epoch\n        :return: metrics -> {'precision': 0.xx, 'recall': 0.xx, 'micro-f1': 0.xx, 'macro-f1': 0.xx}\n        \"\"\"", "\n", "self", ".", "model", ".", "train", "(", ")", "\n", "return", "self", ".", "run", "(", "data_loader", ",", "epoch", ",", "'Train'", ",", "mode", "=", "'TRAIN'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.train_modules.trainer.Trainer.eval": [[98, 108], ["trainer.Trainer.model.eval", "trainer.Trainer.run"], "methods", ["home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.train_modules.trainer.Trainer.eval", "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.train_modules.trainer.Trainer.run"], ["", "def", "eval", "(", "self", ",", "data_loader", ",", "epoch", ",", "stage", ")", ":", "\n", "        ", "\"\"\"\n        evaluation module\n        :param data_loader: Iteration[Dict{'token':tensor, 'label':tensor, }]\n        :param epoch: int, log results of this epoch\n        :param stage: str, TRAIN/DEV/TEST, log the result of the according corpus\n        :return: metrics -> {'precision': 0.xx, 'recall': 0.xx, 'micro-f1': 0.xx, 'macro-f1': 0.xx}\n        \"\"\"", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "return", "self", ".", "run", "(", "data_loader", ",", "epoch", ",", "stage", ",", "mode", "=", "'EVAL'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.train_modules.criterions.ClassificationLoss.__init__": [[9, 27], ["super().__init__", "torch.nn.BCEWithLogitsLoss", "helper.utils.get_hierarchy_relations"], "methods", ["home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.structure_model.tree.Tree.__init__", "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.helper.utils.get_hierarchy_relations"], ["    ", "def", "__init__", "(", "self", ",", "\n", "taxonomic_hierarchy", ",", "\n", "label_map", ",", "\n", "recursive_penalty", ",", "\n", "recursive_constraint", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Criterion class, classfication loss & recursive regularization\n        :param taxonomic_hierarchy:  Str, file path of hierarchy taxonomy\n        :param label_map: Dict, label to id\n        :param recursive_penalty: Float, lambda value <- config.train.loss.recursive_regularization.penalty\n        :param recursive_constraint: Boolean <- config.train.loss.recursive_regularization.flag\n        \"\"\"", "\n", "super", "(", "ClassificationLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "loss_fn", "=", "torch", ".", "nn", ".", "BCEWithLogitsLoss", "(", ")", "\n", "self", ".", "recursive_relation", "=", "get_hierarchy_relations", "(", "taxonomic_hierarchy", ",", "\n", "label_map", ")", "\n", "self", ".", "recursive_penalty", "=", "recursive_penalty", "\n", "self", ".", "recursive_constraint", "=", "recursive_constraint", "\n", "\n"]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.train_modules.criterions.ClassificationLoss._recursive_regularization": [[28, 50], ["range", "len", "torch.tensor().to", "torch.index_select", "torch.index_select", "parent_params.repeat.repeat.repeat", "_diff.view", "criterions.ClassificationLoss.recursive_relation.keys", "torch.tensor().to", "torch.tensor", "torch.norm", "torch.tensor"], "methods", ["None"], ["", "def", "_recursive_regularization", "(", "self", ",", "params", ",", "device", ")", ":", "\n", "        ", "\"\"\"\n        recursive regularization: constraint on the parameters of classifier among parent and children\n        :param params: the parameters on each label -> torch.FloatTensor(N, hidden_dim)\n        :param device: torch.device -> config.train.device_setting.device\n        :return: loss -> torch.FloatTensor, ()\n        \"\"\"", "\n", "rec_reg", "=", "0.0", "\n", "for", "i", "in", "range", "(", "len", "(", "params", ")", ")", ":", "\n", "            ", "if", "i", "not", "in", "self", ".", "recursive_relation", ".", "keys", "(", ")", ":", "\n", "                ", "continue", "\n", "", "child_list", "=", "self", ".", "recursive_relation", "[", "i", "]", "\n", "if", "not", "child_list", ":", "\n", "                ", "continue", "\n", "", "child_list", "=", "torch", ".", "tensor", "(", "child_list", ")", ".", "to", "(", "device", ")", "\n", "child_params", "=", "torch", ".", "index_select", "(", "params", ",", "0", ",", "child_list", ")", "\n", "parent_params", "=", "torch", ".", "index_select", "(", "params", ",", "0", ",", "torch", ".", "tensor", "(", "i", ")", ".", "to", "(", "device", ")", ")", "\n", "parent_params", "=", "parent_params", ".", "repeat", "(", "child_params", ".", "shape", "[", "0", "]", ",", "1", ")", "\n", "_diff", "=", "parent_params", "-", "child_params", "\n", "diff", "=", "_diff", ".", "view", "(", "_diff", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "rec_reg", "+=", "1.0", "/", "2", "*", "torch", ".", "norm", "(", "diff", ",", "p", "=", "2", ")", "**", "2", "\n", "", "return", "rec_reg", "\n", "\n"]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.train_modules.criterions.ClassificationLoss.forward": [[51, 65], ["criterions.ClassificationLoss.loss_fn", "criterions.ClassificationLoss.loss_fn", "criterions.ClassificationLoss._recursive_regularization"], "methods", ["home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.train_modules.criterions.ClassificationLoss._recursive_regularization"], ["", "def", "forward", "(", "self", ",", "logits", ",", "targets", ",", "recursive_params", ")", ":", "\n", "        ", "\"\"\"\n        :param logits: torch.FloatTensor, (batch, N)\n        :param targets: torch.FloatTensor, (batch, N)\n        :param recursive_params: the parameters on each label -> torch.FloatTensor(N, hidden_dim)\n        \"\"\"", "\n", "device", "=", "logits", ".", "device", "\n", "if", "self", ".", "recursive_constraint", ":", "\n", "            ", "loss", "=", "self", ".", "loss_fn", "(", "logits", ",", "targets", ")", "+", "self", ".", "recursive_penalty", "*", "self", ".", "_recursive_regularization", "(", "recursive_params", ",", "\n", "device", ")", "\n", "", "else", ":", "\n", "            ", "loss", "=", "self", ".", "loss_fn", "(", "logits", ",", "targets", ")", "\n", "", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.train_modules.evaluation_metrics._precision_recall_f1": [[7, 22], ["float", "float"], "function", ["None"], ["def", "_precision_recall_f1", "(", "right", ",", "predict", ",", "total", ")", ":", "\n", "    ", "\"\"\"\n    :param right: int, the count of right prediction\n    :param predict: int, the count of prediction\n    :param total: int, the count of labels\n    :return: p(precision, Float), r(recall, Float), f(f1_score, Float)\n    \"\"\"", "\n", "p", ",", "r", ",", "f", "=", "0.0", ",", "0.0", ",", "0.0", "\n", "if", "predict", ">", "0", ":", "\n", "        ", "p", "=", "float", "(", "right", ")", "/", "predict", "\n", "", "if", "total", ">", "0", ":", "\n", "        ", "r", "=", "float", "(", "right", ")", "/", "total", "\n", "", "if", "p", "+", "r", ">", "0", ":", "\n", "        ", "f", "=", "p", "*", "r", "*", "2", "/", "(", "p", "+", "r", ")", "\n", "", "return", "p", ",", "r", ",", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.train_modules.evaluation_metrics.evaluate": [[24, 107], ["list", "zip", "dict", "dict", "dict", "id2label.items", "len", "len", "list.append", "numpy.array", "numpy.argsort", "range", "range", "evaluation_metrics._precision_recall_f1", "sum", "len", "sum", "len", "sum", "len", "float", "print", "sample_gold.append", "range", "range", "range", "range", "len", "len", "list", "list", "list", "float", "id2label.keys", "range", "len", "len", "len", "len", "sample_predict_id_list.append", "dict.keys", "dict.keys", "dict.keys", "len", "label2id.keys", "label2id.keys", "label2id.keys", "label2id.keys", "dict.items", "dict.items", "dict.items", "label2id.keys"], "function", ["home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.helper.configure.Configure.items", "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.train_modules.evaluation_metrics._precision_recall_f1", "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.helper.configure.Configure.items", "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.helper.configure.Configure.items", "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.helper.configure.Configure.items"], ["", "def", "evaluate", "(", "epoch_predicts", ",", "epoch_labels", ",", "vocab", ",", "threshold", "=", "0.5", ",", "top_k", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    :param epoch_labels: List[List[int]], ground truth, label id\n    :param epoch_predicts: List[List[Float]], predicted probability list\n    :param vocab: data_modules.Vocab object\n    :param threshold: Float, filter probability for tagging\n    :param top_k: int, truncate the prediction\n    :return:  confusion_matrix -> List[List[int]],\n    Dict{'precision' -> Float, 'recall' -> Float, 'micro_f1' -> Float, 'macro_f1' -> Float}\n    \"\"\"", "\n", "assert", "len", "(", "epoch_predicts", ")", "==", "len", "(", "epoch_labels", ")", ",", "'mismatch between prediction and ground truth for evaluation'", "\n", "label2id", "=", "vocab", ".", "v2i", "[", "'label'", "]", "\n", "id2label", "=", "vocab", ".", "i2v", "[", "'label'", "]", "\n", "epoch_gold_label", "=", "list", "(", ")", "\n", "# get id label name of ground truth", "\n", "for", "sample_labels", "in", "epoch_labels", ":", "\n", "        ", "sample_gold", "=", "[", "]", "\n", "for", "label", "in", "sample_labels", ":", "\n", "            ", "assert", "label", "in", "id2label", ".", "keys", "(", ")", ",", "print", "(", "label", ")", "\n", "sample_gold", ".", "append", "(", "id2label", "[", "label", "]", ")", "\n", "", "epoch_gold_label", ".", "append", "(", "sample_gold", ")", "\n", "\n", "", "epoch_gold", "=", "epoch_labels", "\n", "\n", "# initialize confusion matrix", "\n", "confusion_count_list", "=", "[", "[", "0", "for", "_", "in", "range", "(", "len", "(", "label2id", ".", "keys", "(", ")", ")", ")", "]", "for", "_", "in", "range", "(", "len", "(", "label2id", ".", "keys", "(", ")", ")", ")", "]", "\n", "right_count_list", "=", "[", "0", "for", "_", "in", "range", "(", "len", "(", "label2id", ".", "keys", "(", ")", ")", ")", "]", "\n", "gold_count_list", "=", "[", "0", "for", "_", "in", "range", "(", "len", "(", "label2id", ".", "keys", "(", ")", ")", ")", "]", "\n", "predicted_count_list", "=", "[", "0", "for", "_", "in", "range", "(", "len", "(", "label2id", ".", "keys", "(", ")", ")", ")", "]", "\n", "\n", "for", "sample_predict", ",", "sample_gold", "in", "zip", "(", "epoch_predicts", ",", "epoch_gold", ")", ":", "\n", "        ", "np_sample_predict", "=", "np", ".", "array", "(", "sample_predict", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "sample_predict_descent_idx", "=", "np", ".", "argsort", "(", "-", "np_sample_predict", ")", "\n", "sample_predict_id_list", "=", "[", "]", "\n", "if", "top_k", "is", "None", ":", "\n", "            ", "top_k", "=", "len", "(", "sample_predict", ")", "\n", "", "for", "j", "in", "range", "(", "top_k", ")", ":", "\n", "            ", "if", "np_sample_predict", "[", "sample_predict_descent_idx", "[", "j", "]", "]", ">", "threshold", ":", "\n", "                ", "sample_predict_id_list", ".", "append", "(", "sample_predict_descent_idx", "[", "j", "]", ")", "\n", "\n", "", "", "sample_predict_label_list", "=", "[", "id2label", "[", "i", "]", "for", "i", "in", "sample_predict_id_list", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "confusion_count_list", ")", ")", ":", "\n", "            ", "for", "predict_id", "in", "sample_predict_id_list", ":", "\n", "                ", "confusion_count_list", "[", "i", "]", "[", "predict_id", "]", "+=", "1", "\n", "\n", "# count for the gold and right items", "\n", "", "", "for", "gold", "in", "sample_gold", ":", "\n", "            ", "gold_count_list", "[", "gold", "]", "+=", "1", "\n", "for", "label", "in", "sample_predict_id_list", ":", "\n", "                ", "if", "gold", "==", "label", ":", "\n", "                    ", "right_count_list", "[", "gold", "]", "+=", "1", "\n", "\n", "# count for the predicted items", "\n", "", "", "", "for", "label", "in", "sample_predict_id_list", ":", "\n", "            ", "predicted_count_list", "[", "label", "]", "+=", "1", "\n", "\n", "", "", "precision_dict", "=", "dict", "(", ")", "\n", "recall_dict", "=", "dict", "(", ")", "\n", "fscore_dict", "=", "dict", "(", ")", "\n", "right_total", ",", "predict_total", ",", "gold_total", "=", "0", ",", "0", ",", "0", "\n", "\n", "for", "i", ",", "label", "in", "id2label", ".", "items", "(", ")", ":", "\n", "        ", "precision_dict", "[", "label", "]", ",", "recall_dict", "[", "label", "]", ",", "fscore_dict", "[", "label", "]", "=", "_precision_recall_f1", "(", "right_count_list", "[", "i", "]", ",", "\n", "predicted_count_list", "[", "i", "]", ",", "\n", "gold_count_list", "[", "i", "]", ")", "\n", "right_total", "+=", "right_count_list", "[", "i", "]", "\n", "gold_total", "+=", "gold_count_list", "[", "i", "]", "\n", "predict_total", "+=", "predicted_count_list", "[", "i", "]", "\n", "\n", "# Macro-F1", "\n", "", "precision_macro", "=", "sum", "(", "[", "v", "for", "_", ",", "v", "in", "precision_dict", ".", "items", "(", ")", "]", ")", "/", "len", "(", "list", "(", "precision_dict", ".", "keys", "(", ")", ")", ")", "\n", "recall_macro", "=", "sum", "(", "[", "v", "for", "_", ",", "v", "in", "recall_dict", ".", "items", "(", ")", "]", ")", "/", "len", "(", "list", "(", "precision_dict", ".", "keys", "(", ")", ")", ")", "\n", "macro_f1", "=", "sum", "(", "[", "v", "for", "_", ",", "v", "in", "fscore_dict", ".", "items", "(", ")", "]", ")", "/", "len", "(", "list", "(", "fscore_dict", ".", "keys", "(", ")", ")", ")", "\n", "# Micro-F1", "\n", "precision_micro", "=", "float", "(", "right_total", ")", "/", "predict_total", "if", "predict_total", ">", "0", "else", "0.0", "\n", "recall_micro", "=", "float", "(", "right_total", ")", "/", "gold_total", "\n", "micro_f1", "=", "2", "*", "precision_micro", "*", "recall_micro", "/", "(", "precision_micro", "+", "recall_micro", ")", "if", "(", "precision_micro", "+", "recall_micro", ")", ">", "0", "else", "0.0", "\n", "\n", "return", "{", "'precision'", ":", "precision_micro", ",", "\n", "'recall'", ":", "recall_micro", ",", "\n", "'micro_f1'", ":", "micro_f1", ",", "\n", "'macro_f1'", ":", "macro_f1", "}", "\n", "", ""]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.data_modules.data_loader.data_loaders": [[9, 44], ["data_modules.collator.Collator", "data_modules.dataset.ClassificationDataset", "torch.utils.data.DataLoader", "data_modules.dataset.ClassificationDataset", "torch.utils.data.DataLoader", "data_modules.dataset.ClassificationDataset", "torch.utils.data.DataLoader"], "function", ["None"], ["def", "data_loaders", "(", "config", ",", "vocab", ",", "data", "=", "{", "'train'", ":", "None", ",", "'val'", ":", "None", ",", "'test'", ":", "None", "}", ")", ":", "\n", "    ", "\"\"\"\n    get data loaders for training and evaluation\n    :param config: helper.configure, Configure Object\n    :param vocab: data_modules.vocab, Vocab Object\n    :param data: on-memory data, Dict{'train': List[str] or None, ...}\n    :return: -> (torch.utils.data.DataLoader, torch.utils.data.DataLoader, torch.utils.data.DataLoader)\n    \"\"\"", "\n", "on_memory", "=", "data", "[", "'train'", "]", "is", "not", "None", "\n", "collate_fn", "=", "Collator", "(", "config", ",", "vocab", ")", "\n", "train_dataset", "=", "ClassificationDataset", "(", "config", ",", "vocab", ",", "stage", "=", "'TRAIN'", ",", "on_memory", "=", "on_memory", ",", "corpus_lines", "=", "data", "[", "'train'", "]", ")", "\n", "train_loader", "=", "DataLoader", "(", "train_dataset", ",", "\n", "batch_size", "=", "config", ".", "train", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "config", ".", "train", ".", "device_setting", ".", "num_workers", ",", "\n", "collate_fn", "=", "collate_fn", ",", "\n", "pin_memory", "=", "True", ")", "\n", "\n", "val_dataset", "=", "ClassificationDataset", "(", "config", ",", "vocab", ",", "stage", "=", "'VAL'", ",", "on_memory", "=", "on_memory", ",", "corpus_lines", "=", "data", "[", "'val'", "]", ")", "\n", "val_loader", "=", "DataLoader", "(", "val_dataset", ",", "\n", "batch_size", "=", "config", ".", "eval", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "config", ".", "train", ".", "device_setting", ".", "num_workers", ",", "\n", "collate_fn", "=", "collate_fn", ",", "\n", "pin_memory", "=", "True", ")", "\n", "\n", "test_dataset", "=", "ClassificationDataset", "(", "config", ",", "vocab", ",", "stage", "=", "'TEST'", ",", "on_memory", "=", "on_memory", ",", "corpus_lines", "=", "data", "[", "'test'", "]", ")", "\n", "test_loader", "=", "DataLoader", "(", "test_dataset", ",", "\n", "batch_size", "=", "config", ".", "eval", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "config", ".", "train", ".", "device_setting", ".", "num_workers", ",", "\n", "collate_fn", "=", "collate_fn", ",", "\n", "pin_memory", "=", "True", ")", "\n", "\n", "return", "train_loader", ",", "val_loader", ",", "test_loader", "\n", "", ""]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.data_modules.collator.Collator.__init__": [[8, 17], ["object.__init__", "len", "vocab.v2i[].keys"], "methods", ["home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.structure_model.tree.Tree.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "vocab", ")", ":", "\n", "        ", "\"\"\"\n        Collator object for the collator_fn in data_modules.data_loader\n        :param config: helper.configure, Configure Object\n        :param vocab: data_modules.vocab, Vocab Object\n        \"\"\"", "\n", "super", "(", "Collator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "device", "=", "config", ".", "train", ".", "device_setting", ".", "device", "\n", "self", ".", "label_size", "=", "len", "(", "vocab", ".", "v2i", "[", "'label'", "]", ".", "keys", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.data_modules.collator.Collator._multi_hot": [[18, 31], ["len", "max", "torch.Tensor().long", "torch.zeros().scatter_", "torch.Tensor().long.append", "len", "torch.Tensor", "torch.zeros", "len"], "methods", ["None"], ["", "def", "_multi_hot", "(", "self", ",", "batch_labels", ")", ":", "\n", "        ", "\"\"\"\n        :param batch_labels: label idx list of one batch, List[List[int]], e.g.  [[1,2],[0,1,3,4]]\n        :return: multi-hot value for classification -> List[List[int]], e.g. [[0,1,1,0,0],[1,1,0,1,1]\n        \"\"\"", "\n", "batch_size", "=", "len", "(", "batch_labels", ")", "\n", "max_length", "=", "max", "(", "[", "len", "(", "sample", ")", "for", "sample", "in", "batch_labels", "]", ")", "\n", "aligned_batch_labels", "=", "[", "]", "\n", "for", "sample_label", "in", "batch_labels", ":", "\n", "            ", "aligned_batch_labels", ".", "append", "(", "sample_label", "+", "(", "max_length", "-", "len", "(", "sample_label", ")", ")", "*", "[", "sample_label", "[", "0", "]", "]", ")", "\n", "", "aligned_batch_labels", "=", "torch", ".", "Tensor", "(", "aligned_batch_labels", ")", ".", "long", "(", ")", "\n", "batch_labels_multi_hot", "=", "torch", ".", "zeros", "(", "batch_size", ",", "self", ".", "label_size", ")", ".", "scatter_", "(", "1", ",", "aligned_batch_labels", ",", "1", ")", "\n", "return", "batch_labels_multi_hot", "\n", "\n"]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.data_modules.collator.Collator.__call__": [[32, 59], ["torch.tensor", "collator.Collator._multi_hot", "torch.FloatTensor", "torch.tensor.append", "batch_label.append", "torch.FloatTensor.append"], "methods", ["home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.data_modules.collator.Collator._multi_hot"], ["", "def", "__call__", "(", "self", ",", "batch", ")", ":", "\n", "        ", "\"\"\"\n        transform data for training\n        :param batch: Dict{'token': List[List[int]],\n                           'label': List[List[int]],\n                            'token_len': List[int]}\n        :return: batch -> Dict{'token': torch.FloatTensor,\n                               'label': torch.FloatTensor,\n                               'token_len': torch.FloatTensor,\n                               'label_list': List[List[int]]}\n        \"\"\"", "\n", "batch_token", "=", "[", "]", "\n", "batch_label", "=", "[", "]", "\n", "batch_doc_len", "=", "[", "]", "\n", "for", "sample", "in", "batch", ":", "\n", "            ", "batch_token", ".", "append", "(", "sample", "[", "'token'", "]", ")", "\n", "batch_label", ".", "append", "(", "sample", "[", "'label'", "]", ")", "\n", "batch_doc_len", ".", "append", "(", "sample", "[", "'token_len'", "]", ")", "\n", "\n", "", "batch_token", "=", "torch", ".", "tensor", "(", "batch_token", ")", "\n", "batch_multi_hot_label", "=", "self", ".", "_multi_hot", "(", "batch_label", ")", "\n", "batch_doc_len", "=", "torch", ".", "FloatTensor", "(", "batch_doc_len", ")", "\n", "return", "{", "\n", "'token'", ":", "batch_token", ",", "\n", "'label'", ":", "batch_multi_hot_label", ",", "\n", "'token_len'", ":", "batch_doc_len", ",", "\n", "'label_list'", ":", "batch_label", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.data_modules.dataset.ClassificationDataset.__init__": [[35, 58], ["torch.utils.data.dataset.Dataset.__init__", "dataset.get_sample_position", "len", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.structure_model.tree.Tree.__init__", "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.data_modules.dataset.get_sample_position"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "vocab", ",", "stage", "=", "'TRAIN'", ",", "on_memory", "=", "True", ",", "corpus_lines", "=", "None", ",", "mode", "=", "\"TRAIN\"", ")", ":", "\n", "        ", "\"\"\"\n        Dataset for text classification based on torch.utils.data.dataset.Dataset\n        :param config: helper.configure, Configure Object\n        :param vocab: data_modules.vocab, Vocab Object\n        :param stage: Str, 'TRAIN'/'DEV'/'TEST', log the corpus\n        :param on_memory: Boolean, True or False\n        :param corpus_lines: List[Str] or None, on-memory Data\n        :param mode: TRAIN / PREDICT, for loading empty label\n        \"\"\"", "\n", "super", "(", "ClassificationDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "corpus_files", "=", "{", "\"TRAIN\"", ":", "os", ".", "path", ".", "join", "(", "config", ".", "data", ".", "data_dir", ",", "config", ".", "data", ".", "train_file", ")", ",", "\n", "\"VAL\"", ":", "os", ".", "path", ".", "join", "(", "config", ".", "data", ".", "data_dir", ",", "config", ".", "data", ".", "val_file", ")", ",", "\n", "\"TEST\"", ":", "os", ".", "path", ".", "join", "(", "config", ".", "data", ".", "data_dir", ",", "config", ".", "data", ".", "test_file", ")", "}", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "vocab", "=", "vocab", "\n", "self", ".", "on_memory", "=", "on_memory", "\n", "self", ".", "data", "=", "corpus_lines", "\n", "self", ".", "max_input_length", "=", "self", ".", "config", ".", "text_encoder", ".", "max_length", "\n", "self", ".", "corpus_file", "=", "self", ".", "corpus_files", "[", "stage", "]", "\n", "self", ".", "sample_position", "=", "get_sample_position", "(", "self", ".", "corpus_file", ",", "self", ".", "on_memory", ",", "corpus_lines", ",", "stage", ")", "\n", "self", ".", "corpus_size", "=", "len", "(", "self", ".", "sample_position", ")", "\n", "self", ".", "mode", "=", "mode", "\n", "\n"]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.data_modules.dataset.ClassificationDataset.__len__": [[59, 65], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        get the number of samples\n        :return: self.corpus_size -> Int\n        \"\"\"", "\n", "return", "self", ".", "corpus_size", "\n", "\n"]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.data_modules.dataset.ClassificationDataset.__getitem__": [[66, 82], ["dataset.ClassificationDataset._preprocess_sample", "dataset.ClassificationDataset.__len__", "open", "f_in.seek", "f_in.readline"], "methods", ["home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.data_modules.dataset.ClassificationDataset._preprocess_sample", "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.data_modules.dataset.ClassificationDataset.__len__"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        sample from the overall corpus\n        :param index: int, should be smaller in len(corpus)\n        :return: sample -> Dict{'token': List[Str], 'label': List[Str], 'token_len': int}\n        \"\"\"", "\n", "if", "index", ">=", "self", ".", "__len__", "(", ")", ":", "\n", "            ", "raise", "IndexError", "\n", "", "if", "not", "self", ".", "on_memory", ":", "\n", "            ", "position", "=", "self", ".", "sample_position", "[", "index", "]", "\n", "with", "open", "(", "self", ".", "corpus_file", ")", "as", "f_in", ":", "\n", "                ", "f_in", ".", "seek", "(", "position", ")", "\n", "sample_str", "=", "f_in", ".", "readline", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "sample_str", "=", "self", ".", "data", "[", "index", "]", "\n", "", "return", "self", ".", "_preprocess_sample", "(", "sample_str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.data_modules.dataset.ClassificationDataset._preprocess_sample": [[83, 112], ["json.loads", "json.loads.keys", "min", "sample[].append", "len", "range", "dataset.ClassificationDataset.vocab.v2i[].get", "v.lower", "dataset.ClassificationDataset.vocab.v2i[].keys", "helper.warning", "sample[].append", "len"], "methods", ["home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.helper.logger.warning"], ["", "def", "_preprocess_sample", "(", "self", ",", "sample_str", ")", ":", "\n", "        ", "\"\"\"\n        preprocess each sample with the limitation of maximum length and pad each sample to maximum length\n        :param sample_str: Str format of json data, \"Dict{'token': List[Str], 'label': List[Str]}\"\n        :return: sample -> Dict{'token': List[int], 'label': List[int], 'token_len': int}\n        \"\"\"", "\n", "raw_sample", "=", "json", ".", "loads", "(", "sample_str", ")", "\n", "sample", "=", "{", "'token'", ":", "[", "]", ",", "'label'", ":", "[", "]", "}", "\n", "for", "k", "in", "raw_sample", ".", "keys", "(", ")", ":", "\n", "            ", "if", "k", "==", "'token'", ":", "\n", "                ", "sample", "[", "k", "]", "=", "[", "self", ".", "vocab", ".", "v2i", "[", "k", "]", ".", "get", "(", "v", ".", "lower", "(", ")", ",", "self", ".", "vocab", ".", "oov_index", ")", "for", "v", "in", "raw_sample", "[", "k", "]", "]", "\n", "", "else", ":", "\n", "                ", "sample", "[", "k", "]", "=", "[", "]", "\n", "for", "v", "in", "raw_sample", "[", "k", "]", ":", "\n", "                    ", "if", "v", "not", "in", "self", ".", "vocab", ".", "v2i", "[", "k", "]", ".", "keys", "(", ")", ":", "\n", "                        ", "logger", ".", "warning", "(", "'Vocab not in '", "+", "k", "+", "' '", "+", "v", ")", "\n", "", "else", ":", "\n", "                        ", "sample", "[", "k", "]", ".", "append", "(", "self", ".", "vocab", ".", "v2i", "[", "k", "]", "[", "v", "]", ")", "\n", "", "", "", "", "if", "not", "sample", "[", "'token'", "]", ":", "\n", "            ", "sample", "[", "'token'", "]", ".", "append", "(", "self", ".", "vocab", ".", "padding_index", ")", "\n", "", "if", "self", ".", "mode", "==", "'TRAIN'", ":", "\n", "            ", "assert", "sample", "[", "'label'", "]", ",", "'Label is empty'", "\n", "", "else", ":", "\n", "            ", "sample", "[", "'label'", "]", "=", "[", "0", "]", "\n", "", "sample", "[", "'token_len'", "]", "=", "min", "(", "len", "(", "sample", "[", "'token'", "]", ")", ",", "self", ".", "max_input_length", ")", "\n", "padding", "=", "[", "self", ".", "vocab", ".", "padding_index", "for", "_", "in", "range", "(", "0", ",", "self", ".", "max_input_length", "-", "len", "(", "sample", "[", "'token'", "]", ")", ")", "]", "\n", "sample", "[", "'token'", "]", "+=", "padding", "\n", "sample", "[", "'token'", "]", "=", "sample", "[", "'token'", "]", "[", ":", "self", ".", "max_input_length", "]", "\n", "return", "sample", "\n", "", "", ""]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.data_modules.dataset.get_sample_position": [[10, 32], ["print", "range", "open", "f_in.readline", "range.pop", "len", "range.append", "f_in.readline", "f_in.tell"], "function", ["None"], ["def", "get_sample_position", "(", "corpus_filename", ",", "on_memory", ",", "corpus_lines", ",", "stage", ")", ":", "\n", "    ", "\"\"\"\n    position of each sample in the original corpus File or on-memory List\n    :param corpus_filename: Str, directory of the corpus file\n    :param on_memory: Boolean, True or False\n    :param corpus_lines: List[Str] or None, on-memory Data\n    :param mode: Str, 'TRAIN'/'DEV'/'TEST', log the corpus\n    :return: sample_position -> List[int]\n    \"\"\"", "\n", "sample_position", "=", "[", "0", "]", "\n", "if", "not", "on_memory", ":", "\n", "        ", "print", "(", "'Loading files for '", "+", "stage", "+", "' Dataset...'", ")", "\n", "with", "open", "(", "corpus_filename", ",", "'r'", ")", "as", "f_in", ":", "\n", "            ", "sample_str", "=", "f_in", ".", "readline", "(", ")", "\n", "while", "sample_str", ":", "\n", "                ", "sample_position", ".", "append", "(", "f_in", ".", "tell", "(", ")", ")", "\n", "sample_str", "=", "f_in", ".", "readline", "(", ")", "\n", "", "sample_position", ".", "pop", "(", ")", "\n", "", "", "else", ":", "\n", "        ", "assert", "corpus_lines", "\n", "sample_position", "=", "range", "(", "len", "(", "corpus_lines", ")", ")", "\n", "", "return", "sample_position", "\n", "\n"]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.data_modules.preprocess.clean_stopwords": [[27, 33], ["None"], "function", ["None"], ["def", "clean_stopwords", "(", "sample", ")", ":", "\n", "    ", "\"\"\"\n    :param sample: List[Str], lower case\n    :return:  List[Str]\n    \"\"\"", "\n", "return", "[", "token", "for", "token", "in", "sample", "if", "token", "not", "in", "english_stopwords", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.data_modules.preprocess.clean_str": [[35, 58], ["re.sub.strip().strip", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub.strip().lower", "re.sub.strip", "re.sub.strip"], "function", ["None"], ["", "def", "clean_str", "(", "string", ")", ":", "\n", "    ", "\"\"\"\n    Original Source:  https://github.com/yoonkim/CNN_sentence/blob/master/process_data.py\n    :param string: Str\n    :return -> Str\n    \"\"\"", "\n", "string", "=", "string", ".", "strip", "(", ")", ".", "strip", "(", "'\"'", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"[^A-Za-z(),!?\\.\\'\\`]\"", ",", "\" \"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\'s\"", ",", "\" \\'s\"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\'ve\"", ",", "\" \\'ve\"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"n\\'t\"", ",", "\" n\\'t\"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\'re\"", ",", "\" \\'re\"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\'d\"", ",", "\" \\'d\"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\'ll\"", ",", "\" \\'ll\"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\",\"", ",", "\" , \"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\.\"", ",", "\" \\. \"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\\"\"", ",", "\" , \"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"!\"", ",", "\" ! \"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\(\"", ",", "\" \\( \"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\)\"", ",", "\" \\) \"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\?\"", ",", "\" \\? \"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\s{2,}\"", ",", "\" \"", ",", "string", ")", "\n", "return", "string", ".", "strip", "(", ")", ".", "lower", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.data_modules.preprocess.preprocess_line": [[60, 68], ["preprocess.clean_str", "preprocess.clean_stopwords", "json.dumps", "clean_str.lstrip().rstrip", "clean_str.split", "clean_str.lstrip"], "function", ["home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.data.preprocess_rcv1_train.clean_str", "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.data_modules.preprocess.clean_stopwords"], ["", "def", "preprocess_line", "(", "sample", ")", ":", "\n", "    ", "\"\"\"\n    :param sample: Str, \"The sample would be tokenized and filtered according to the stopwords list\"\n    :return: token_list -> List[Str]\n    \"\"\"", "\n", "sample", "=", "clean_str", "(", "sample", ".", "lstrip", "(", ")", ".", "rstrip", "(", ")", ")", "\n", "token_list", "=", "clean_stopwords", "(", "sample", ".", "split", "(", "' '", ")", ")", "\n", "return", "json", ".", "dumps", "(", "{", "'token'", ":", "token_list", ",", "'label'", ":", "[", "]", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.data_modules.preprocess.preprocess_raw_file": [[70, 86], ["list", "list", "helper.info", "helper.info", "open", "tqdm.tqdm", "preprocess.preprocess_line", "list.append", "list.append", "len", "json.dumps", "line.rstrip"], "function", ["home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.helper.logger.info", "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.helper.logger.info", "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.data_modules.preprocess.preprocess_line"], ["", "def", "preprocess_raw_file", "(", "file_path", ")", ":", "\n", "    ", "\"\"\"\n    :param file_path: Str, file path of the raw file\n    :return: List[Dict{'token': List[Str], 'label': []}]\n    \"\"\"", "\n", "corpus_data", "=", "list", "(", ")", "\n", "raw_data", "=", "list", "(", ")", "\n", "# sample_dict = {'token': [], 'label': []}", "\n", "logger", ".", "info", "(", "'Loading and Preprocessing raw data in {}'", ".", "format", "(", "file_path", ")", ")", "\n", "with", "open", "(", "file_path", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "tqdm", ".", "tqdm", "(", "f", ")", ":", "\n", "            ", "sample_tokens", "=", "preprocess_line", "(", "line", ")", "\n", "raw_data", ".", "append", "(", "{", "'token'", ":", "line", ".", "rstrip", "(", ")", ",", "'label'", ":", "[", "]", "}", ")", "\n", "corpus_data", ".", "append", "(", "json", ".", "dumps", "(", "{", "'token'", ":", "sample_tokens", ",", "'label'", ":", "[", "]", "}", ")", ")", "\n", "", "", "logger", ".", "info", "(", "'The number of samples: {}'", ".", "format", "(", "len", "(", "corpus_data", ")", ")", ")", "\n", "return", "raw_data", ",", "corpus_data", "\n", "\n"]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.data_modules.preprocess.load_processed_file": [[88, 103], ["list", "list", "helper.info", "helper.info", "open", "tqdm.tqdm", "list.append", "list.append", "len", "json.loads", "line.rstrip", "line.rstrip"], "function", ["home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.helper.logger.info", "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.helper.logger.info"], ["", "def", "load_processed_file", "(", "file_path", ")", ":", "\n", "    ", "\"\"\"\n    :param file_path: Str, file path of the processed file\n    :return: List[Dict{'token': List[Str], 'label': []}]\n    \"\"\"", "\n", "corpus_data", "=", "list", "(", ")", "\n", "raw_data", "=", "list", "(", ")", "\n", "# sample_dict = {'token': [], 'label': []}", "\n", "logger", ".", "info", "(", "'Loading raw data in {}'", ".", "format", "(", "file_path", ")", ")", "\n", "with", "open", "(", "file_path", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "tqdm", ".", "tqdm", "(", "f", ")", ":", "\n", "            ", "raw_data", ".", "append", "(", "json", ".", "loads", "(", "line", ".", "rstrip", "(", ")", ")", ")", "\n", "corpus_data", ".", "append", "(", "line", ".", "rstrip", "(", ")", ")", "\n", "", "", "logger", ".", "info", "(", "'The number of samples: {}'", ".", "format", "(", "len", "(", "corpus_data", ")", ")", ")", "\n", "return", "raw_data", ",", "corpus_data", "\n", "", ""]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.data_modules.vocab.Vocab.__init__": [[13, 80], ["helper.info", "collections.Counter", "max", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "collections.Counter.copy", "collections.Counter.copy", "dict", "dict", "dict", "dict", "os.path.isdir", "os.system", "os.path.isfile", "os.path.isfile", "helper.info", "vocab.Vocab.v2i.keys", "helper.info", "vocab.Vocab._load_pretrained_embedding_vocab", "vocab.Vocab._count_vocab_from_corpus", "vocab.Vocab.freqs.keys", "vocab.Vocab._shrink_vocab", "vocab.Vocab.freqs.keys", "open", "enumerate", "open", "enumerate", "helper.info", "helper.info", "list", "enumerate", "helper.info", "helper.info", "str", "line.rstrip().split", "line.rstrip().split", "vocab.Vocab.freqs[].keys", "open", "list", "len", "len", "str", "str", "str", "vocab.Vocab.v2i[].keys", "f_out.write", "line.rstrip", "line.rstrip", "len", "len", "len", "vocab.Vocab.v2i[].keys", "str"], "methods", ["home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.helper.logger.info", "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.helper.logger.info", "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.helper.logger.info", "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.data_modules.vocab.Vocab._load_pretrained_embedding_vocab", "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.data_modules.vocab.Vocab._count_vocab_from_corpus", "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.data_modules.vocab.Vocab._shrink_vocab", "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.helper.logger.info", "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.helper.logger.info", "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.helper.logger.info", "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.helper.logger.info"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "min_freq", "=", "1", ",", "special_token", "=", "[", "'<PADDING>'", ",", "'<OOV>'", "]", ",", "max_size", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        vocabulary class for text classification, initialized from pretrained embedding file\n        and update based on minimum frequency and maximum size\n        :param config: helper.configure, Configure Object\n        :param min_freq: int, the minimum frequency of tokens\n        :param special_token: List[Str], e.g. padding and out-of-vocabulary\n        :param max_size: int, maximum size of the overall vocabulary\n        \"\"\"", "\n", "logger", ".", "info", "(", "'Building Vocabulary....'", ")", "\n", "self", ".", "corpus_files", "=", "{", "\"TRAIN\"", ":", "os", ".", "path", ".", "join", "(", "config", ".", "data", ".", "data_dir", ",", "config", ".", "data", ".", "train_file", ")", ",", "\n", "\"VAL\"", ":", "os", ".", "path", ".", "join", "(", "config", ".", "data", ".", "data_dir", ",", "config", ".", "data", ".", "val_file", ")", ",", "\n", "\"TEST\"", ":", "os", ".", "path", ".", "join", "(", "config", ".", "data", ".", "data_dir", ",", "config", ".", "data", ".", "test_file", ")", "}", "\n", "counter", "=", "Counter", "(", ")", "\n", "self", ".", "config", "=", "config", "\n", "# counter for tokens", "\n", "self", ".", "freqs", "=", "{", "'token'", ":", "counter", ".", "copy", "(", ")", ",", "'label'", ":", "counter", ".", "copy", "(", ")", "}", "\n", "# vocab to index", "\n", "self", ".", "v2i", "=", "{", "'token'", ":", "dict", "(", ")", ",", "'label'", ":", "dict", "(", ")", "}", "\n", "# index to vocab", "\n", "self", ".", "i2v", "=", "{", "'token'", ":", "dict", "(", ")", ",", "'label'", ":", "dict", "(", ")", "}", "\n", "\n", "self", ".", "min_freq", "=", "max", "(", "min_freq", ",", "1", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "self", ".", "config", ".", "vocabulary", ".", "dir", ")", ":", "\n", "            ", "os", ".", "system", "(", "'mkdir '", "+", "str", "(", "self", ".", "config", ".", "vocabulary", ".", "dir", ")", ")", "\n", "", "token_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "config", ".", "vocabulary", ".", "dir", ",", "self", ".", "config", ".", "vocabulary", ".", "vocab_dict", ")", "\n", "label_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "config", ".", "vocabulary", ".", "dir", ",", "self", ".", "config", ".", "vocabulary", ".", "label_dict", ")", "\n", "vocab_dir", "=", "{", "'token'", ":", "token_dir", ",", "'label'", ":", "label_dir", "}", "\n", "if", "os", ".", "path", ".", "isfile", "(", "label_dir", ")", "and", "os", ".", "path", ".", "isfile", "(", "token_dir", ")", ":", "\n", "            ", "logger", ".", "info", "(", "'Loading Vocabulary from Cached Dictionary...'", ")", "\n", "with", "open", "(", "token_dir", ",", "'r'", ",", "encoding", "=", "'utf8'", ")", "as", "f_in", ":", "\n", "                ", "for", "i", ",", "line", "in", "enumerate", "(", "f_in", ")", ":", "\n", "                    ", "data", "=", "line", ".", "rstrip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "assert", "len", "(", "data", ")", "==", "2", "\n", "self", ".", "v2i", "[", "'token'", "]", "[", "data", "[", "0", "]", "]", "=", "i", "\n", "self", ".", "i2v", "[", "'token'", "]", "[", "i", "]", "=", "data", "[", "0", "]", "\n", "", "", "with", "open", "(", "label_dir", ",", "'r'", ")", "as", "f_in", ":", "\n", "                ", "for", "i", ",", "line", "in", "enumerate", "(", "f_in", ")", ":", "\n", "                    ", "data", "=", "line", ".", "rstrip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "assert", "len", "(", "data", ")", "==", "2", "\n", "self", ".", "v2i", "[", "'label'", "]", "[", "data", "[", "0", "]", "]", "=", "i", "\n", "self", ".", "i2v", "[", "'label'", "]", "[", "i", "]", "=", "data", "[", "0", "]", "\n", "", "", "for", "vocab", "in", "self", ".", "v2i", ".", "keys", "(", ")", ":", "\n", "                ", "logger", ".", "info", "(", "'Vocabulary of '", "+", "vocab", "+", "' '", "+", "str", "(", "len", "(", "self", ".", "v2i", "[", "vocab", "]", ")", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "logger", ".", "info", "(", "'Generating Vocabulary from Corpus...'", ")", "\n", "self", ".", "_load_pretrained_embedding_vocab", "(", ")", "\n", "self", ".", "_count_vocab_from_corpus", "(", ")", "\n", "for", "vocab", "in", "self", ".", "freqs", ".", "keys", "(", ")", ":", "\n", "                ", "logger", ".", "info", "(", "'Vocabulary of '", "+", "vocab", "+", "' '", "+", "str", "(", "len", "(", "self", ".", "freqs", "[", "vocab", "]", ")", ")", ")", "\n", "\n", "", "self", ".", "_shrink_vocab", "(", "'token'", ",", "max_size", ")", "\n", "for", "s_token", "in", "special_token", ":", "\n", "                ", "self", ".", "freqs", "[", "'token'", "]", "[", "s_token", "]", "=", "self", ".", "min_freq", "\n", "\n", "", "for", "field", "in", "self", ".", "freqs", ".", "keys", "(", ")", ":", "\n", "                ", "temp_vocab_list", "=", "list", "(", "self", ".", "freqs", "[", "field", "]", ".", "keys", "(", ")", ")", "\n", "for", "i", ",", "k", "in", "enumerate", "(", "temp_vocab_list", ")", ":", "\n", "                    ", "self", ".", "v2i", "[", "field", "]", "[", "k", "]", "=", "i", "\n", "self", ".", "i2v", "[", "field", "]", "[", "i", "]", "=", "k", "\n", "", "logger", ".", "info", "(", "'Vocabulary of '", "+", "field", "+", "' with the size of '", "+", "str", "(", "len", "(", "self", ".", "v2i", "[", "field", "]", ".", "keys", "(", ")", ")", ")", ")", "\n", "with", "open", "(", "vocab_dir", "[", "field", "]", ",", "'w'", ",", "encoding", "=", "'utf8'", ")", "as", "f_out", ":", "\n", "                    ", "for", "k", "in", "list", "(", "self", ".", "v2i", "[", "field", "]", ".", "keys", "(", ")", ")", ":", "\n", "                        ", "f_out", ".", "write", "(", "k", "+", "'\\t'", "+", "str", "(", "self", ".", "freqs", "[", "field", "]", "[", "k", "]", ")", "+", "'\\n'", ")", "\n", "", "", "logger", ".", "info", "(", "'Save Vocabulary in '", "+", "vocab_dir", "[", "field", "]", ")", "\n", "", "", "self", ".", "padding_index", "=", "self", ".", "v2i", "[", "'token'", "]", "[", "'<PADDING>'", "]", "\n", "self", ".", "oov_index", "=", "self", ".", "v2i", "[", "'token'", "]", "[", "'<OOV>'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.data_modules.vocab.Vocab._load_pretrained_embedding_vocab": [[81, 95], ["open", "helper.info", "tqdm.tqdm", "line.rstrip().split", "len", "line.rstrip"], "methods", ["home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.helper.logger.info"], ["", "def", "_load_pretrained_embedding_vocab", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        initialize counter for word in pre-trained word embedding\n        \"\"\"", "\n", "pretrained_file_dir", "=", "self", ".", "config", ".", "embedding", ".", "token", ".", "pretrained_file", "\n", "with", "open", "(", "pretrained_file_dir", ",", "'r'", ",", "encoding", "=", "'utf8'", ")", "as", "f_in", ":", "\n", "            ", "logger", ".", "info", "(", "'Loading vocabulary from pretrained embedding...'", ")", "\n", "for", "line", "in", "tqdm", ".", "tqdm", "(", "f_in", ")", ":", "\n", "                ", "data", "=", "line", ".", "rstrip", "(", "'\\n'", ")", ".", "split", "(", "' '", ")", "\n", "if", "len", "(", "data", ")", "==", "2", ":", "\n", "# first line in pretrained embedding", "\n", "                    ", "continue", "\n", "", "v", "=", "data", "[", "0", "]", "\n", "self", ".", "freqs", "[", "'token'", "]", "[", "v", "]", "+=", "self", ".", "min_freq", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.data_modules.vocab.Vocab._count_vocab_from_corpus": [[96, 107], ["vocab.Vocab.corpus_files.keys", "open", "helper.info", "tqdm.tqdm", "json.loads", "vocab.Vocab._count_vocab_from_sample", "line.rstrip"], "methods", ["home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.helper.logger.info", "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.data_modules.vocab.Vocab._count_vocab_from_sample"], ["", "", "", "def", "_count_vocab_from_corpus", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        count the frequency of tokens in the specified corpus\n        \"\"\"", "\n", "for", "corpus", "in", "self", ".", "corpus_files", ".", "keys", "(", ")", ":", "\n", "            ", "mode", "=", "'ALL'", "\n", "with", "open", "(", "self", ".", "corpus_files", "[", "corpus", "]", ",", "'r'", ")", "as", "f_in", ":", "\n", "                ", "logger", ".", "info", "(", "'Loading '", "+", "corpus", "+", "' subset...'", ")", "\n", "for", "line", "in", "tqdm", ".", "tqdm", "(", "f_in", ")", ":", "\n", "                    ", "data", "=", "json", ".", "loads", "(", "line", ".", "rstrip", "(", ")", ")", "\n", "self", ".", "_count_vocab_from_sample", "(", "data", ",", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.data_modules.vocab.Vocab._count_vocab_from_sample": [[108, 120], ["vocab.Vocab.freqs.keys"], "methods", ["None"], ["", "", "", "", "def", "_count_vocab_from_sample", "(", "self", ",", "line_dict", ",", "mode", "=", "'ALL'", ")", ":", "\n", "        ", "\"\"\"\n        update the frequency from the current sample\n        :param line_dict: Dict{'token': List[Str], 'label': List[Str]}\n        \"\"\"", "\n", "for", "k", "in", "self", ".", "freqs", ".", "keys", "(", ")", ":", "\n", "            ", "if", "mode", "==", "'ALL'", ":", "\n", "                ", "for", "t", "in", "line_dict", "[", "k", "]", ":", "\n", "                    ", "self", ".", "freqs", "[", "k", "]", "[", "t", "]", "+=", "1", "\n", "", "", "else", ":", "\n", "                ", "for", "t", "in", "line_dict", "[", "'token'", "]", ":", "\n", "                    ", "self", ".", "freqs", "[", "'token'", "]", "[", "t", "]", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.data_modules.vocab.Vocab._shrink_vocab": [[121, 138], ["helper.info", "collections.Counter", "vocab.Vocab.freqs[].keys", "helper.info", "collections.Counter.most_common", "collections.Counter", "str", "len"], "methods", ["home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.helper.logger.info", "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.helper.logger.info"], ["", "", "", "", "def", "_shrink_vocab", "(", "self", ",", "k", ",", "max_size", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        shrink the vocabulary\n        :param k: Str, field <- 'token', 'label'\n        :param max_size: int, the maximum number of vocabulary\n        \"\"\"", "\n", "logger", ".", "info", "(", "'Shrinking Vocabulary...'", ")", "\n", "tmp_dict", "=", "Counter", "(", ")", "\n", "for", "v", "in", "self", ".", "freqs", "[", "k", "]", ".", "keys", "(", ")", ":", "\n", "            ", "if", "self", ".", "freqs", "[", "k", "]", "[", "v", "]", ">=", "self", ".", "min_freq", ":", "\n", "                ", "tmp_dict", "[", "v", "]", "=", "self", ".", "freqs", "[", "k", "]", "[", "v", "]", "\n", "", "", "if", "max_size", "is", "not", "None", ":", "\n", "            ", "tmp_list_dict", "=", "tmp_dict", ".", "most_common", "(", "max_size", ")", "\n", "self", ".", "freqs", "[", "k", "]", "=", "Counter", "(", ")", "\n", "for", "(", "t", ",", "v", ")", "in", "tmp_list_dict", ":", "\n", "                ", "self", ".", "freqs", "[", "k", "]", "[", "t", "]", "=", "v", "\n", "", "", "logger", ".", "info", "(", "'Shrinking Vocabulary of tokens: '", "+", "str", "(", "len", "(", "self", ".", "freqs", "[", "k", "]", ")", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.models.labelprior_discriminator.LabelPriorDiscriminator.__init__": [[6, 11], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.structure_model.tree.Tree.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "l0", "=", "nn", ".", "Linear", "(", "300", ",", "1000", ")", "\n", "self", ".", "l1", "=", "nn", ".", "Linear", "(", "1000", ",", "200", ")", "\n", "self", ".", "l2", "=", "nn", ".", "Linear", "(", "200", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.models.labelprior_discriminator.LabelPriorDiscriminator.forward": [[12, 16], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "labelprior_discriminator.LabelPriorDiscriminator.l0", "labelprior_discriminator.LabelPriorDiscriminator.l1", "labelprior_discriminator.LabelPriorDiscriminator.l2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "h", "=", "F", ".", "relu", "(", "self", ".", "l0", "(", "x", ")", ")", "\n", "h", "=", "F", ".", "relu", "(", "self", ".", "l1", "(", "h", ")", ")", "\n", "return", "torch", ".", "sigmoid", "(", "self", ".", "l2", "(", "h", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.models.embedding_layer.EmbeddingLayer.__init__": [[19, 76], ["super().__init__", "torch.nn.Dropout", "torch.nn.Embedding", "initial_type.startswith", "embedding_layer.EmbeddingLayer.embedding.weight.data.copy_", "len", "initial_type.startswith", "embedding_layer.EmbeddingLayer.load_pretrained", "torch.empty", "len", "torch.empty", "torch.empty", "len", "torch.nn.init.calculate_gain", "len"], "methods", ["home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.structure_model.tree.Tree.__init__", "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.models.label_embedding_layer.EmbeddingLayer.load_pretrained"], ["    ", "def", "__init__", "(", "self", ",", "\n", "vocab_map", ",", "\n", "embedding_dim", ",", "\n", "vocab_name", ",", "\n", "config", ",", "\n", "padding_index", "=", "None", ",", "\n", "pretrained_dir", "=", "None", ",", "\n", "model_mode", "=", "'TRAIN'", ",", "\n", "initial_type", "=", "'kaiming_uniform'", ",", "\n", "negative_slope", "=", "0", ",", "mode_fan", "=", "'fan_in'", ",", "\n", "activation_type", "=", "'linear'", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        embedding layer\n        :param vocab_map: vocab.v2i[filed] -> Dict{Str: Int}\n        :param embedding_dim: Int, config.embedding.token.dimension\n        :param vocab_name: Str, 'token' or 'label'\n        :param config: helper.configure, Configure Object\n        :param padding_index: Int, index of padding word\n        :param pretrained_dir: Str,  file path for the pretrained embedding file\n        :param model_mode: Str, 'TRAIN' or 'EVAL', for initialization\n        :param initial_type: Str, initialization type\n        :param negative_slope: initialization config\n        :param mode_fan: initialization config\n        :param activation_type: None\n        \"\"\"", "\n", "super", "(", "EmbeddingLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dropout", "=", "torch", ".", "nn", ".", "Dropout", "(", "p", "=", "config", "[", "'embedding'", "]", "[", "vocab_name", "]", "[", "'dropout'", "]", ")", "\n", "self", ".", "embedding", "=", "torch", ".", "nn", ".", "Embedding", "(", "len", "(", "vocab_map", ")", ",", "embedding_dim", ",", "padding_index", ")", "\n", "\n", "# initialize lookup table", "\n", "assert", "initial_type", "in", "INIT_FUNC", "\n", "if", "initial_type", ".", "startswith", "(", "'kaiming'", ")", ":", "\n", "            ", "self", ".", "lookup_table", "=", "INIT_FUNC", "[", "initial_type", "]", "(", "torch", ".", "empty", "(", "len", "(", "vocab_map", ")", ",", "\n", "embedding_dim", ")", ",", "\n", "a", "=", "negative_slope", ",", "\n", "mode", "=", "mode_fan", ",", "\n", "nonlinearity", "=", "activation_type", ")", "\n", "", "elif", "initial_type", ".", "startswith", "(", "'xavier'", ")", ":", "\n", "            ", "self", ".", "lookup_table", "=", "INIT_FUNC", "[", "initial_type", "]", "(", "torch", ".", "empty", "(", "len", "(", "vocab_map", ")", ",", "\n", "embedding_dim", ")", ",", "\n", "gain", "=", "torch", ".", "nn", ".", "init", ".", "calculate_gain", "(", "activation_type", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "lookup_table", "=", "INIT_FUNC", "[", "initial_type", "]", "(", "torch", ".", "empty", "(", "len", "(", "vocab_map", ")", ",", "\n", "embedding_dim", ")", ",", "\n", "a", "=", "-", "0.25", ",", "\n", "b", "=", "0.25", ")", "\n", "\n", "", "if", "model_mode", "==", "'TRAIN'", "and", "config", "[", "'embedding'", "]", "[", "vocab_name", "]", "[", "'type'", "]", "==", "'pretrain'", "and", "pretrained_dir", "is", "not", "None", "and", "pretrained_dir", "!=", "''", ":", "\n", "            ", "self", ".", "load_pretrained", "(", "embedding_dim", ",", "vocab_map", ",", "vocab_name", ",", "pretrained_dir", ")", "\n", "\n", "", "if", "padding_index", "is", "not", "None", ":", "\n", "            ", "self", ".", "lookup_table", "[", "padding_index", "]", "=", "0.0", "\n", "", "self", ".", "embedding", ".", "weight", ".", "data", ".", "copy_", "(", "self", ".", "lookup_table", ")", "\n", "self", ".", "embedding", ".", "weight", ".", "requires_grad", "=", "True", "\n", "del", "self", ".", "lookup_table", "\n", "\n"]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.models.embedding_layer.EmbeddingLayer.load_pretrained": [[77, 101], ["helper.info", "helper.info", "helper.info", "open", "line.rstrip().split", "len", "torch.FloatTensor", "len", "len", "line.rstrip", "int", "int", "float"], "methods", ["home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.helper.logger.info", "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.helper.logger.info", "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.helper.logger.info"], ["", "def", "load_pretrained", "(", "self", ",", "embedding_dim", ",", "vocab_map", ",", "vocab_name", ",", "pretrained_dir", ")", ":", "\n", "        ", "\"\"\"\n        load pretrained file\n        :param embedding_dim: Int, configure.embedding.field.dimension\n        :param vocab_map: vocab.v2i[field] -> Dict{v:id}\n        :param vocab_name: field\n        :param pretrained_dir: str, file path\n        \"\"\"", "\n", "logger", ".", "info", "(", "'Loading {}-dimension {} embedding from pretrained file: {}'", ".", "format", "(", "\n", "embedding_dim", ",", "vocab_name", ",", "pretrained_dir", ")", ")", "\n", "with", "open", "(", "pretrained_dir", ",", "'r'", ",", "encoding", "=", "'utf8'", ")", "as", "f_in", ":", "\n", "            ", "num_pretrained_vocab", "=", "0", "\n", "for", "line", "in", "f_in", ":", "\n", "                ", "row", "=", "line", ".", "rstrip", "(", "'\\n'", ")", ".", "split", "(", "' '", ")", "\n", "if", "len", "(", "row", ")", "==", "2", ":", "\n", "                    ", "assert", "int", "(", "row", "[", "1", "]", ")", "==", "embedding_dim", ",", "'Pretrained dimension %d dismatch the setting %d'", "%", "(", "int", "(", "row", "[", "1", "]", ")", ",", "embedding_dim", ")", "\n", "continue", "\n", "", "if", "row", "[", "0", "]", "in", "vocab_map", ":", "\n", "                    ", "current_embedding", "=", "torch", ".", "FloatTensor", "(", "[", "float", "(", "i", ")", "for", "i", "in", "row", "[", "1", ":", "]", "]", ")", "\n", "self", ".", "lookup_table", "[", "vocab_map", "[", "row", "[", "0", "]", "]", "]", "=", "current_embedding", "\n", "num_pretrained_vocab", "+=", "1", "\n", "", "", "", "logger", ".", "info", "(", "'Total vocab size of %s is %d.'", "%", "(", "vocab_name", ",", "len", "(", "vocab_map", ")", ")", ")", "\n", "logger", ".", "info", "(", "'Pretrained vocab embedding has %d / %d'", "%", "(", "num_pretrained_vocab", ",", "len", "(", "vocab_map", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.models.embedding_layer.EmbeddingLayer.forward": [[102, 109], ["embedding_layer.EmbeddingLayer.embedding", "embedding_layer.EmbeddingLayer.dropout"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "vocab_id_list", ")", ":", "\n", "        ", "\"\"\"\n        :param vocab_id_list: torch.Tensor, (batch_size, max_length)\n        :return: embedding -> torch.FloatTensor, (batch_size, max_length, embedding_dim)\n        \"\"\"", "\n", "embedding", "=", "self", ".", "embedding", "(", "vocab_id_list", ")", "\n", "return", "self", ".", "dropout", "(", "embedding", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.models.text_encoder.GRU.__init__": [[10, 39], ["torch.nn.Module.__init__", "torch.nn.GRU", "torch.nn.GRU", "torch.nn.GRU", "torch.nn.GRU"], "methods", ["home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.structure_model.tree.Tree.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "layers", ",", "\n", "input_dim", ",", "\n", "output_dim", ",", "\n", "bias", "=", "True", ",", "\n", "batch_first", "=", "False", ",", "\n", "dropout", "=", "0.0", ",", "\n", "bidirectional", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        GRU module\n        :param layers: int, the number of layers, config.text_encoder.RNN.num_layers\n        :param input_dim: int, config.embedding.token.dimension\n        :param output_dim: int, config.text_encoder.RNN.hidden_dimension\n        :param bias: None\n        :param batch_first: True\n        :param dropout: p = dropout, config.text_encoder.RNN.dropout\n        :param bidirectional: Boolean , default True, config.text_encoder.RNN.bidirectional\n        \"\"\"", "\n", "super", "(", "GRU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "batch_first", "=", "batch_first", "\n", "self", ".", "bidirectional", "=", "bidirectional", "\n", "self", ".", "num_layers", "=", "layers", "\n", "self", ".", "gru", "=", "torch", ".", "nn", ".", "GRU", "(", "input_size", "=", "input_dim", ",", "\n", "hidden_size", "=", "output_dim", ",", "\n", "num_layers", "=", "layers", ",", "\n", "batch_first", "=", "batch_first", ",", "\n", "bias", "=", "bias", ",", "\n", "bidirectional", "=", "bidirectional", ",", "\n", "dropout", "=", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.models.text_encoder.GRU.forward": [[40, 80], ["torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "seq_len.int.int.int", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "text_encoder.GRU.gru", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "seq_len", "=", "None", ",", "init_state", "=", "None", ",", "ori_state", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        :param inputs: torch.FloatTensor, (batch, max_length, embedding_dim)\n        :param seq_len: torch.LongTensor, (batch, max_length)\n        :param init_state: None\n        :param ori_state: False\n        :return: padding_out -> (batch, max_length, 2 * hidden_dimension),\n        \"\"\"", "\n", "if", "seq_len", "is", "not", "None", ":", "\n", "            ", "seq_len", "=", "seq_len", ".", "int", "(", ")", "\n", "sorted_seq_len", ",", "indices", "=", "torch", ".", "sort", "(", "seq_len", ",", "descending", "=", "True", ")", "\n", "if", "self", ".", "batch_first", ":", "\n", "                ", "sorted_inputs", "=", "inputs", "[", "indices", "]", "\n", "", "else", ":", "\n", "                ", "sorted_inputs", "=", "inputs", "[", ":", ",", "indices", "]", "\n", "", "packed_inputs", "=", "torch", ".", "nn", ".", "utils", ".", "rnn", ".", "pack_padded_sequence", "(", "\n", "sorted_inputs", ",", "\n", "sorted_seq_len", ",", "\n", "batch_first", "=", "self", ".", "batch_first", ",", "\n", ")", "\n", "\n", "outputs", ",", "states", "=", "self", ".", "gru", "(", "packed_inputs", ",", "init_state", ")", "\n", "", "if", "ori_state", ":", "\n", "            ", "return", "outputs", ",", "states", "\n", "", "if", "self", ".", "bidirectional", ":", "\n", "            ", "last_layer_hidden_state", "=", "states", "[", "2", "*", "(", "self", ".", "num_layers", "-", "1", ")", ":", "]", "\n", "last_layer_hidden_state", "=", "torch", ".", "cat", "(", "(", "last_layer_hidden_state", "[", "0", "]", ",", "last_layer_hidden_state", "[", "1", "]", ")", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "last_layer_hidden_state", "=", "states", "[", "self", ".", "num_layers", "-", "1", "]", "\n", "last_layer_hidden_state", "=", "last_layer_hidden_state", "[", "0", "]", "\n", "\n", "", "_", ",", "reversed_indices", "=", "torch", ".", "sort", "(", "indices", ",", "descending", "=", "False", ")", "\n", "last_layer_hidden_state", "=", "last_layer_hidden_state", "[", "reversed_indices", "]", "\n", "padding_out", ",", "_", "=", "torch", ".", "nn", ".", "utils", ".", "rnn", ".", "pad_packed_sequence", "(", "outputs", ",", "\n", "batch_first", "=", "self", ".", "batch_first", ")", "\n", "if", "self", ".", "batch_first", ":", "\n", "            ", "padding_out", "=", "padding_out", "[", "reversed_indices", "]", "\n", "", "else", ":", "\n", "            ", "padding_out", "=", "padding_out", "[", ":", ",", "reversed_indices", "]", "\n", "", "return", "padding_out", ",", "last_layer_hidden_state", "\n", "\n"]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.models.text_encoder.TextEncoder.__init__": [[83, 112], ["torch.nn.Module.__init__", "text_encoder.GRU", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "text_encoder.TextEncoder.convs.append", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d"], "methods", ["home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.structure_model.tree.Tree.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "\"\"\"\n        TextRCNN\n        :param config: helper.configure, Configure Object\n        \"\"\"", "\n", "super", "(", "TextEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "rnn", "=", "GRU", "(", "\n", "layers", "=", "config", ".", "text_encoder", ".", "RNN", ".", "num_layers", ",", "\n", "input_dim", "=", "config", ".", "embedding", ".", "token", ".", "dimension", ",", "\n", "output_dim", "=", "config", ".", "text_encoder", ".", "RNN", ".", "hidden_dimension", ",", "\n", "batch_first", "=", "True", ",", "\n", "bidirectional", "=", "config", ".", "text_encoder", ".", "RNN", ".", "bidirectional", "\n", ")", "\n", "hidden_dimension", "=", "config", ".", "text_encoder", ".", "RNN", ".", "hidden_dimension", "\n", "if", "config", ".", "text_encoder", ".", "RNN", ".", "bidirectional", ":", "\n", "            ", "hidden_dimension", "*=", "2", "\n", "", "self", ".", "kernel_sizes", "=", "config", ".", "text_encoder", ".", "CNN", ".", "kernel_size", "\n", "self", ".", "convs", "=", "torch", ".", "nn", ".", "ModuleList", "(", ")", "\n", "for", "kernel_size", "in", "self", ".", "kernel_sizes", ":", "\n", "            ", "self", ".", "convs", ".", "append", "(", "torch", ".", "nn", ".", "Conv1d", "(", "\n", "hidden_dimension", ",", "\n", "config", ".", "text_encoder", ".", "CNN", ".", "num_kernel", ",", "\n", "kernel_size", ",", "\n", "padding", "=", "kernel_size", "//", "2", "\n", ")", "\n", ")", "\n", "", "self", ".", "top_k", "=", "config", ".", "text_encoder", ".", "topK_max_pooling", "\n", "self", ".", "rnn_dropout", "=", "torch", ".", "nn", ".", "Dropout", "(", "p", "=", "config", ".", "text_encoder", ".", "RNN", ".", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.models.text_encoder.TextEncoder.forward": [[113, 132], ["text_encoder.TextEncoder.rnn", "text_encoder.TextEncoder.rnn_dropout"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "seq_lens", ")", ":", "\n", "        ", "\"\"\"\n        :param inputs: torch.FloatTensor, embedding, (batch, max_len, embedding_dim)\n        :param seq_lens: torch.LongTensor, (batch, max_len)\n        :return:\n        \"\"\"", "\n", "text_output", ",", "_", "=", "self", ".", "rnn", "(", "inputs", ",", "seq_lens", ")", "\n", "text_output", "=", "self", ".", "rnn_dropout", "(", "text_output", ")", "\n", "'''\n        text_output = text_output.transpose(1, 2)\n        topk_text_outputs = []\n        for _, conv in enumerate(self.convs):\n            convolution = F.relu(conv(text_output))\n            topk_text = torch.topk(convolution, self.top_k)[0].view(text_output.size(0), -1)\n            topk_text = topk_text.unsqueeze(1)\n            topk_text_outputs.append(topk_text)\n        return topk_text_outputs\n        '''", "\n", "return", "text_output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.models.model.HTCInfoMax.__init__": [[20, 64], ["torch.Module.__init__", "models.embedding_layer.EmbeddingLayer", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "models.text_encoder.TextEncoder", "models.structure_model.structure_encoder.StructureEncoder", "models.labelprior_discriminator.LabelPriorDiscriminator", "models.text_label_mi_discriminator.TextLabelMIDiscriminator", "models.multi_label_attention.HiAGMLA", "len"], "methods", ["home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.structure_model.tree.Tree.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "vocab", ",", "model_mode", "=", "'TRAIN'", ")", ":", "\n", "        ", "\"\"\"\n        HTCInfoMax Model class\n        :param config: helper.configure, Configure Object\n        :param vocab: data_modules.vocab, Vocab Object\n        :param model_mode: Str, ('TRAIN', 'EVAL'), initialize with the pretrained word embedding if value is 'TRAIN'\n        \"\"\"", "\n", "super", "(", "HTCInfoMax", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "vocab", "=", "vocab", "\n", "self", ".", "device", "=", "config", ".", "train", ".", "device_setting", ".", "device", "\n", "\n", "self", ".", "token_map", ",", "self", ".", "label_map", "=", "vocab", ".", "v2i", "[", "'token'", "]", ",", "vocab", ".", "v2i", "[", "'label'", "]", "\n", "self", ".", "index2label", "=", "vocab", ".", "i2v", "[", "'label'", "]", "\n", "\n", "self", ".", "token_embedding", "=", "EmbeddingLayer", "(", "\n", "vocab_map", "=", "self", ".", "token_map", ",", "\n", "embedding_dim", "=", "config", ".", "embedding", ".", "token", ".", "dimension", ",", "\n", "vocab_name", "=", "'token'", ",", "\n", "config", "=", "config", ",", "\n", "padding_index", "=", "vocab", ".", "padding_index", ",", "\n", "pretrained_dir", "=", "config", ".", "embedding", ".", "token", ".", "pretrained_file", ",", "\n", "model_mode", "=", "model_mode", ",", "\n", "initial_type", "=", "config", ".", "embedding", ".", "token", ".", "init_type", "\n", ")", "\n", "\n", "# linear layer used for learning the weights for text_label_mi loss and label_prior_matching loss", "\n", "self", ".", "labelpriorweight_linear", "=", "nn", ".", "Linear", "(", "len", "(", "self", ".", "label_map", ")", "*", "config", ".", "embedding", ".", "label", ".", "dimension", ",", "1", ")", "\n", "self", ".", "text_label_MI_weight_linear", "=", "nn", ".", "Linear", "(", "config", ".", "embedding", ".", "label", ".", "dimension", ",", "1", ")", "\n", "\n", "self", ".", "text_encoder", "=", "TextEncoder", "(", "config", ")", "\n", "self", ".", "structure_encoder", "=", "StructureEncoder", "(", "config", "=", "config", ",", "\n", "label_map", "=", "vocab", ".", "v2i", "[", "'label'", "]", ",", "\n", "device", "=", "self", ".", "device", ",", "\n", "graph_model_type", "=", "config", ".", "structure_encoder", ".", "type", ")", "\n", "\n", "self", ".", "label_prior_d", "=", "LabelPriorDiscriminator", "(", ")", "\n", "self", ".", "text_label_mi_d", "=", "TextLabelMIDiscriminator", "(", ")", "\n", "\n", "self", ".", "htcinfomax", "=", "HiAGMLA", "(", "config", "=", "config", ",", "\n", "device", "=", "self", ".", "device", ",", "\n", "graph_model", "=", "self", ".", "structure_encoder", ",", "\n", "label_map", "=", "self", ".", "index2label", ",", "\n", "model_mode", "=", "model_mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.models.model.HTCInfoMax.optimize_params_dict": [[65, 78], ["list", "list.append", "list.append", "list.append", "model.HTCInfoMax.text_encoder.parameters", "model.HTCInfoMax.token_embedding.parameters", "model.HTCInfoMax.htcinfomax.parameters"], "methods", ["None"], ["", "def", "optimize_params_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        get parameters of the overall model\n        :return: List[Dict{'params': Iteration[torch.Tensor],\n                           'lr': Float (predefined learning rate for specified module,\n                                        which is different from the others)\n                          }]\n        \"\"\"", "\n", "params", "=", "list", "(", ")", "\n", "params", ".", "append", "(", "{", "'params'", ":", "self", ".", "text_encoder", ".", "parameters", "(", ")", "}", ")", "\n", "params", ".", "append", "(", "{", "'params'", ":", "self", ".", "token_embedding", ".", "parameters", "(", ")", "}", ")", "\n", "params", ".", "append", "(", "{", "'params'", ":", "self", ".", "htcinfomax", ".", "parameters", "(", ")", "}", ")", "\n", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.models.model.HTCInfoMax.forward": [[79, 137], ["model.HTCInfoMax.token_embedding", "model.HTCInfoMax.text_encoder", "model.HTCInfoMax.htcinfomax", "numpy.random.permutation", "enumerate", "text_feature.permute", "negative_text.permute", "torch.softplus().mean", "torch.softplus().mean", "torch.softplus().mean", "range", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "model.HTCInfoMax.text_label_MI_weight_linear", "model.HTCInfoMax.labelpriorweight_linear", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "batch[].to", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.softplus().mean", "torch.softplus().mean", "torch.softplus().mean", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "all_labels_feature.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.softplus", "torch.softplus", "torch.softplus", "torch.softplus", "torch.softplus", "torch.softplus", "model.HTCInfoMax.text_label_mi_d", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "model.HTCInfoMax.label_prior_d", "model.HTCInfoMax.text_label_mi_d", "model.HTCInfoMax.label_prior_d"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "batch", ")", ":", "\n", "        ", "\"\"\"\n        forward pass of the overall architecture\n        :param batch: DataLoader._DataLoaderIter[Dict{'token_len': List}], each batch sampled from the current epoch\n        :return: \n        \"\"\"", "\n", "\n", "# get distributed representation of tokens, (batch_size, max_length, embedding_dimension)", "\n", "embedding", "=", "self", ".", "token_embedding", "(", "batch", "[", "'token'", "]", ".", "to", "(", "self", ".", "config", ".", "train", ".", "device_setting", ".", "device", ")", ")", "\n", "\n", "# get the length of sequences for dynamic rnn, (batch_size, 1)", "\n", "seq_len", "=", "batch", "[", "'token_len'", "]", "\n", "token_output", "=", "self", ".", "text_encoder", "(", "embedding", ",", "seq_len", ")", "\n", "\n", "all_labels_feature", ",", "logits", "=", "self", ".", "htcinfomax", "(", "token_output", ")", "\n", "\n", "text_feature", "=", "token_output", "\n", "idx", "=", "np", ".", "random", ".", "permutation", "(", "text_feature", ".", "shape", "[", "0", "]", ")", "\n", "negative_text", "=", "text_feature", "[", "idx", ",", ":", ",", ":", "]", "\n", "\n", "for", "i", ",", "label_index", "in", "enumerate", "(", "batch", "[", "'label_list'", "]", ")", ":", "\n", "# Label Selector: select the corresponding labels for each text sample", "\n", "            ", "label_feature", "=", "all_labels_feature", "[", "label_index", ",", ":", "]", "\n", "label_feature_mean", "=", "torch", ".", "mean", "(", "label_feature", ",", "dim", "=", "0", ",", "keepdim", "=", "True", ")", "\n", "if", "i", "==", "0", ":", "\n", "                ", "label_feature_y", "=", "label_feature_mean", "\n", "", "else", ":", "\n", "                ", "label_feature_y", "=", "torch", ".", "cat", "(", "(", "label_feature_y", ",", "label_feature_mean", ")", ",", "dim", "=", "0", ")", "\n", "\n", "\n", "# compute the text-label mutual information maximization loss", "\n", "", "", "t", "=", "text_feature", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "t_prime", "=", "negative_text", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "E_joint", "=", "-", "F", ".", "softplus", "(", "-", "self", ".", "text_label_mi_d", "(", "label_feature_y", ",", "t", ")", ")", ".", "mean", "(", ")", "\n", "E_marginal", "=", "F", ".", "softplus", "(", "self", ".", "text_label_mi_d", "(", "label_feature_y", ",", "t_prime", ")", ")", ".", "mean", "(", ")", "\n", "text_label_mi_disc_loss", "=", "(", "E_marginal", "-", "E_joint", ")", "\n", "\n", "\n", "# compute the label prior matching loss", "\n", "label_totalnum", "=", "all_labels_feature", ".", "shape", "[", "0", "]", "\n", "label_prior_loss", "=", "0.0", "\n", "for", "i", "in", "range", "(", "label_totalnum", ")", ":", "\n", "            ", "label_y", "=", "all_labels_feature", "[", "i", "]", "\n", "label_prior", "=", "torch", ".", "rand_like", "(", "label_y", ")", "\n", "term_a", "=", "torch", ".", "log", "(", "self", ".", "label_prior_d", "(", "label_prior", ")", ")", ".", "mean", "(", ")", "\n", "term_b", "=", "torch", ".", "log", "(", "1.0", "-", "self", ".", "label_prior_d", "(", "label_y", ")", ")", ".", "mean", "(", ")", "\n", "label_prior_loss", "+=", "-", "(", "term_a", "+", "term_b", ")", "\n", "", "label_prior_loss", "/=", "label_totalnum", "\n", "\n", "\n", "# loss weight estimator: compute the weights for above two losses", "\n", "text_feature_temp", "=", "torch", ".", "mean", "(", "text_feature", ",", "dim", "=", "1", ")", "\n", "text_feature_mean", "=", "torch", ".", "mean", "(", "text_feature_temp", ",", "dim", "=", "0", ")", "\n", "text_label_MI_weightlogit", "=", "self", ".", "text_label_MI_weight_linear", "(", "text_feature_mean", ")", "\n", "labelprior_weightlogit", "=", "self", ".", "labelpriorweight_linear", "(", "all_labels_feature", ".", "view", "(", "-", "1", ")", ")", "\n", "fusiongate", "=", "F", ".", "sigmoid", "(", "text_label_MI_weightlogit", "+", "labelprior_weightlogit", ")", "\n", "\n", "return", "text_label_mi_disc_loss", ",", "label_prior_loss", ",", "logits", ",", "fusiongate", "\n", "", "", ""]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.models.label_embedding_layer.EmbeddingLayer.__init__": [[20, 101], ["super().__init__", "torch.nn.Dropout", "torch.nn.Embedding", "dict", "vocab_map.keys", "torch.zeros", "dict", "enumerate", "initial_type.startswith", "label_embedding_layer.EmbeddingLayer.label_map_splittedwords.keys", "label_embedding_layer.EmbeddingLayer.embedding.weight.data.copy_", "len", "label_embedding_layer.EmbeddingLayer.clean_str", "len", "initial_type.startswith", "label_embedding_layer.EmbeddingLayer.load_pretrained", "len", "torch.zeros", "enumerate", "torch.mean", "word.lower", "dict.keys", "torch.empty", "label_embedding_layer.EmbeddingLayer.split", "len", "torch.empty", "torch.empty", "len", "len", "torch.nn.init.calculate_gain", "len"], "methods", ["home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.structure_model.tree.Tree.__init__", "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.data.preprocess_rcv1_train.clean_str", "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.models.label_embedding_layer.EmbeddingLayer.load_pretrained"], ["    ", "def", "__init__", "(", "self", ",", "\n", "vocab_map", ",", "\n", "embedding_dim", ",", "\n", "vocab_name", ",", "\n", "config", ",", "\n", "padding_index", "=", "None", ",", "\n", "pretrained_dir", "=", "None", ",", "\n", "model_mode", "=", "'TRAIN'", ",", "\n", "initial_type", "=", "'kaiming_uniform'", ",", "\n", "negative_slope", "=", "0", ",", "mode_fan", "=", "'fan_in'", ",", "\n", "activation_type", "=", "'linear'", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        embedding layer\n        :param vocab_map: vocab.v2i[filed] -> Dict{Str: Int}\n        :param embedding_dim: Int, config.embedding.token.dimension\n        :param vocab_name: Str, 'token' or 'label'\n        :param config: helper.configure, Configure Object\n        :param padding_index: Int, index of padding word\n        :param pretrained_dir: Str,  file path for the pretrained embedding file\n        :param model_mode: Str, 'TRAIN' or 'EVAL', for initialization\n        :param initial_type: Str, initialization type\n        :param negative_slope: initialization config\n        :param mode_fan: initialization config\n        :param activation_type: None\n        \"\"\"", "\n", "super", "(", "EmbeddingLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dropout", "=", "torch", ".", "nn", ".", "Dropout", "(", "p", "=", "config", "[", "'embedding'", "]", "[", "vocab_name", "]", "[", "'dropout'", "]", ")", "\n", "self", ".", "embedding", "=", "torch", ".", "nn", ".", "Embedding", "(", "len", "(", "vocab_map", ")", ",", "embedding_dim", ",", "padding_index", ")", "\n", "\n", "all_label_words", "=", "[", "]", "\n", "self", ".", "label_map_splittedwords", "=", "dict", "(", ")", "\n", "for", "label_index", "in", "vocab_map", ".", "keys", "(", ")", ":", "\n", "            ", "each_label", "=", "self", ".", "clean_str", "(", "vocab_map", "[", "label_index", "]", ")", "\n", "each_label_list", "=", "[", "word", ".", "lower", "(", ")", "for", "word", "in", "each_label", ".", "split", "(", ")", "if", "len", "(", "word", ")", ">", "1", "]", "\n", "all_label_words", "+=", "each_label_list", "\n", "self", ".", "label_map_splittedwords", "[", "label_index", "]", "=", "each_label_list", "\n", "", "self", ".", "final_lookup_table", "=", "torch", ".", "zeros", "(", "len", "(", "vocab_map", ")", ",", "embedding_dim", ")", "\n", "all_label_words_dict", "=", "dict", "(", ")", "\n", "index", "=", "0", "\n", "for", "ind", ",", "word", "in", "enumerate", "(", "all_label_words", ")", ":", "\n", "            ", "if", "word", "not", "in", "all_label_words_dict", ".", "keys", "(", ")", ":", "\n", "                ", "all_label_words_dict", "[", "word", "]", "=", "index", "\n", "index", "+=", "1", "\n", "\n", "# initialize lookup table", "\n", "", "", "assert", "initial_type", "in", "INIT_FUNC", "\n", "if", "initial_type", ".", "startswith", "(", "'kaiming'", ")", ":", "\n", "            ", "self", ".", "lookup_table", "=", "INIT_FUNC", "[", "initial_type", "]", "(", "torch", ".", "empty", "(", "len", "(", "all_label_words_dict", ")", ",", "\n", "embedding_dim", ")", ",", "\n", "a", "=", "negative_slope", ",", "\n", "mode", "=", "mode_fan", ",", "\n", "nonlinearity", "=", "activation_type", ")", "\n", "", "elif", "initial_type", ".", "startswith", "(", "'xavier'", ")", ":", "\n", "            ", "self", ".", "lookup_table", "=", "INIT_FUNC", "[", "initial_type", "]", "(", "torch", ".", "empty", "(", "len", "(", "all_label_words_dict", ")", ",", "\n", "embedding_dim", ")", ",", "\n", "gain", "=", "torch", ".", "nn", ".", "init", ".", "calculate_gain", "(", "activation_type", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "lookup_table", "=", "INIT_FUNC", "[", "initial_type", "]", "(", "torch", ".", "empty", "(", "len", "(", "all_label_words_dict", ")", ",", "\n", "embedding_dim", ")", ",", "\n", "a", "=", "-", "0.25", ",", "\n", "b", "=", "0.25", ")", "\n", "\n", "", "if", "model_mode", "==", "'TRAIN'", "and", "config", "[", "'embedding'", "]", "[", "vocab_name", "]", "[", "'type'", "]", "==", "'pretrain'", "and", "pretrained_dir", "is", "not", "None", "and", "pretrained_dir", "!=", "''", ":", "\n", "            ", "self", ".", "load_pretrained", "(", "embedding_dim", ",", "all_label_words_dict", ",", "vocab_name", ",", "pretrained_dir", ")", "\n", "\n", "", "if", "padding_index", "is", "not", "None", ":", "\n", "            ", "self", ".", "lookup_table", "[", "padding_index", "]", "=", "0.0", "\n", "\n", "", "for", "label", "in", "self", ".", "label_map_splittedwords", ".", "keys", "(", ")", ":", "\n", "            ", "num_words", "=", "len", "(", "self", ".", "label_map_splittedwords", "[", "label", "]", ")", "\n", "each_label_embedding", "=", "torch", ".", "zeros", "(", "num_words", ",", "embedding_dim", ")", "\n", "for", "ind", ",", "eachword", "in", "enumerate", "(", "self", ".", "label_map_splittedwords", "[", "label", "]", ")", ":", "\n", "                ", "each_label_embedding", "[", "ind", "]", "=", "self", ".", "lookup_table", "[", "all_label_words_dict", "[", "eachword", "]", "]", "\n", "", "each_label_embedding", "=", "torch", ".", "mean", "(", "each_label_embedding", ",", "0", ")", "\n", "self", ".", "final_lookup_table", "[", "label", "]", "=", "each_label_embedding", "\n", "\n", "", "self", ".", "embedding", ".", "weight", ".", "data", ".", "copy_", "(", "self", ".", "final_lookup_table", ")", "\n", "self", ".", "embedding", ".", "weight", ".", "requires_grad", "=", "True", "\n", "del", "self", ".", "final_lookup_table", "\n", "\n"]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.models.label_embedding_layer.EmbeddingLayer.load_pretrained": [[102, 126], ["helper.info", "helper.info", "helper.info", "open", "line.rstrip().split", "len", "torch.FloatTensor", "len", "len", "line.rstrip", "int", "int", "float"], "methods", ["home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.helper.logger.info", "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.helper.logger.info", "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.helper.logger.info"], ["", "def", "load_pretrained", "(", "self", ",", "embedding_dim", ",", "vocab_map", ",", "vocab_name", ",", "pretrained_dir", ")", ":", "\n", "        ", "\"\"\"\n        load pretrained file\n        :param embedding_dim: Int, configure.embedding.field.dimension\n        :param vocab_map: vocab.v2i[field] -> Dict{v:id}\n        :param vocab_name: field\n        :param pretrained_dir: str, file path\n        \"\"\"", "\n", "logger", ".", "info", "(", "'Loading {}-dimension {} embedding from pretrained file: {}'", ".", "format", "(", "\n", "embedding_dim", ",", "vocab_name", ",", "pretrained_dir", ")", ")", "\n", "with", "open", "(", "pretrained_dir", ",", "'r'", ",", "encoding", "=", "'utf8'", ")", "as", "f_in", ":", "\n", "            ", "num_pretrained_vocab", "=", "0", "\n", "for", "line", "in", "f_in", ":", "\n", "                ", "row", "=", "line", ".", "rstrip", "(", "'\\n'", ")", ".", "split", "(", "' '", ")", "\n", "if", "len", "(", "row", ")", "==", "2", ":", "\n", "                    ", "assert", "int", "(", "row", "[", "1", "]", ")", "==", "embedding_dim", ",", "'Pretrained dimension %d dismatch the setting %d'", "%", "(", "int", "(", "row", "[", "1", "]", ")", ",", "embedding_dim", ")", "\n", "continue", "\n", "", "if", "row", "[", "0", "]", "in", "vocab_map", ":", "\n", "                    ", "current_embedding", "=", "torch", ".", "FloatTensor", "(", "[", "float", "(", "i", ")", "for", "i", "in", "row", "[", "1", ":", "]", "]", ")", "\n", "self", ".", "lookup_table", "[", "vocab_map", "[", "row", "[", "0", "]", "]", "]", "=", "current_embedding", "\n", "num_pretrained_vocab", "+=", "1", "\n", "", "", "", "logger", ".", "info", "(", "'Total vocab size of %s is %d.'", "%", "(", "vocab_name", ",", "len", "(", "vocab_map", ")", ")", ")", "\n", "logger", ".", "info", "(", "'Pretrained vocab embedding has %d / %d'", "%", "(", "num_pretrained_vocab", ",", "len", "(", "vocab_map", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.models.label_embedding_layer.EmbeddingLayer.clean_str": [[127, 149], ["re.sub.strip().strip", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub.strip().lower", "re.sub.strip", "re.sub.strip"], "methods", ["None"], ["", "def", "clean_str", "(", "self", ",", "string", ")", ":", "\n", "        ", "\"\"\"\n        Tokenization/string cleaning for all datasets except for SST.\n        Original taken from https://github.com/yoonkim/CNN_sentence/blob/master/process_data.py\n        \"\"\"", "\n", "string", "=", "string", ".", "strip", "(", ")", ".", "strip", "(", "'\"'", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"[^A-Za-z0-9(),!?\\.\\'\\`]\"", ",", "\" \"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\'s\"", ",", "\" \\'s\"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\'ve\"", ",", "\" \\'ve\"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"n\\'t\"", ",", "\" n\\'t\"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\'re\"", ",", "\" \\'re\"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\'d\"", ",", "\" \\'d\"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\'ll\"", ",", "\" \\'ll\"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\",\"", ",", "\" \"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\.\"", ",", "\" \"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\\"\"", ",", "\" \"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"!\"", ",", "\" \"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\(\"", ",", "\" \"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\)\"", ",", "\" \"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\?\"", ",", "\" \"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\s{2,}\"", ",", "\" \"", ",", "string", ")", "\n", "return", "string", ".", "strip", "(", ")", ".", "lower", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.models.label_embedding_layer.EmbeddingLayer.forward": [[150, 157], ["label_embedding_layer.EmbeddingLayer.embedding", "label_embedding_layer.EmbeddingLayer.dropout"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "vocab_id_list", ")", ":", "\n", "        ", "\"\"\"\n        :param vocab_id_list: torch.Tensor, (batch_size, max_length)\n        :return: embedding -> torch.FloatTensor, (batch_size, max_length, embedding_dim)\n        \"\"\"", "\n", "embedding", "=", "self", ".", "embedding", "(", "vocab_id_list", ")", "\n", "return", "self", ".", "dropout", "(", "embedding", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.models.multi_label_attention.HiAGMLA.__init__": [[12, 50], ["torch.nn.Module.__init__", "models.embedding_layer.EmbeddingLayer", "torch.nn.Linear", "torch.nn.Dropout", "torch.nn.parameter.Parameter", "torch.nn.init.xavier_uniform_", "len", "torch.Tensor", "len"], "methods", ["home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.structure_model.tree.Tree.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "label_map", ",", "model_mode", ",", "graph_model", ",", "device", ")", ":", "\n", "        ", "\"\"\"\n        Hierarchy-Aware Global Model : (Parallel) Multi-label attention Variant\n\t\tpaper: Jie Zhou, Chunping Ma, Dingkun Long, Guangwei Xu, Ning Ding, Haoyu Zhang, Pengjun Xie, and Gongshen Liu. Hierarchy-aware global model for hierarchical text classification. ACL 2020.\n        :param config: helper.configure, Configure Object\n        :param label_map: helper.vocab.Vocab.v2i['label'] -> Dict{str:int}\n        :param model_mode: 'TRAIN'\uff0c 'EVAL'\n        :param graph_model: computational graph for graph model\n        :param device: torch.device, config.train.device_setting.device\n        \"\"\"", "\n", "super", "(", "HiAGMLA", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "label_map", "=", "label_map", "\n", "\n", "self", ".", "label_embedding", "=", "EmbeddingLayer", "(", "\n", "vocab_map", "=", "self", ".", "label_map", ",", "\n", "embedding_dim", "=", "config", ".", "embedding", ".", "label", ".", "dimension", ",", "\n", "vocab_name", "=", "'label'", ",", "\n", "config", "=", "config", ",", "\n", "padding_index", "=", "None", ",", "\n", "pretrained_dir", "=", "None", ",", "\n", "model_mode", "=", "model_mode", ",", "\n", "initial_type", "=", "config", ".", "embedding", ".", "label", ".", "init_type", "\n", ")", "\n", "self", ".", "graph_model", "=", "graph_model", "\n", "\n", "# classifier", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "len", "(", "self", ".", "label_map", ")", "*", "config", ".", "embedding", ".", "label", ".", "dimension", ",", "\n", "len", "(", "self", ".", "label_map", ")", ")", "\n", "\n", "# dropout", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "config", ".", "model", ".", "classifier", ".", "dropout", ")", "\n", "\n", "self", ".", "model_mode", "=", "model_mode", "\n", "self", ".", "label_feature_transform_weight", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "config", ".", "embedding", ".", "label", ".", "dimension", ",", "config", ".", "embedding", ".", "label", ".", "dimension", ")", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "label_feature_transform_weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.models.multi_label_attention.HiAGMLA.get_label_representation": [[51, 61], ["multi_label_attention.HiAGMLA.label_embedding", "label_embedding.unsqueeze.unsqueeze.unsqueeze", "multi_label_attention.HiAGMLA.graph_model", "multi_label_attention.HiAGMLA.squeeze", "torch.arange().long().to", "torch.arange().long", "torch.arange", "len"], "methods", ["None"], ["", "def", "get_label_representation", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        get output of each node as the structure-aware label representation\n        \"\"\"", "\n", "label_embedding", "=", "self", ".", "label_embedding", "(", "torch", ".", "arange", "(", "0", ",", "len", "(", "self", ".", "label_map", ")", ")", ".", "long", "(", ")", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "label_embedding", "=", "label_embedding", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "tree_label_feature", "=", "self", ".", "graph_model", "(", "label_embedding", ")", "\n", "label_feature", "=", "tree_label_feature", ".", "squeeze", "(", "0", ")", "\n", "self", ".", "label_feature", "=", "label_feature", "\n", "\n"]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.models.multi_label_attention.HiAGMLA._soft_attention": [[62, 74], ["torch.matmul", "torch.nn.functional.softmax", "torch.matmul", "label_f.transpose", "torch.matmul.transpose"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_soft_attention", "(", "text_f", ",", "label_f", ")", ":", "\n", "        ", "\"\"\"\n        soft attention module\n        :param text_f -> torch.FloatTensor, (batch_size, K, dim)\n        :param label_f ->  torch.FloatTensor, (N, dim)\n        :return: label_align ->  torch.FloatTensor, (batch, N, dim)\n        \"\"\"", "\n", "att", "=", "torch", ".", "matmul", "(", "text_f", ",", "label_f", ".", "transpose", "(", "0", ",", "1", ")", ")", "\n", "weight_label", "=", "functional", ".", "softmax", "(", "att", ".", "transpose", "(", "1", ",", "2", ")", ",", "dim", "=", "-", "1", ")", "\n", "label_align", "=", "torch", ".", "matmul", "(", "weight_label", ",", "text_f", ")", "\n", "return", "label_align", "\n", "\n"]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.models.multi_label_attention.HiAGMLA.forward": [[75, 100], ["multi_label_attention.HiAGMLA._soft_attention", "multi_label_attention.HiAGMLA.dropout", "torch.matmul", "multi_label_attention.HiAGMLA.label_embedding", "label_embedding.unsqueeze.unsqueeze.unsqueeze", "multi_label_attention.HiAGMLA.graph_model", "multi_label_attention.HiAGMLA.squeeze", "multi_label_attention.HiAGMLA.linear", "torch.arange().long().to", "multi_label_attention.HiAGMLA.view", "torch.arange().long", "torch.arange", "len"], "methods", ["home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.models.multi_label_attention.HiAGMLA._soft_attention"], ["", "def", "forward", "(", "self", ",", "text_feature", ")", ":", "\n", "        ", "\"\"\"\n        forward pass with multi-label attention\n        :param text_feature ->  torch.FloatTensor, (batch_size, K0, text_dim)\n        :return: logits ->  torch.FloatTensor, (batch, N)\n        \"\"\"", "\n", "\n", "\n", "if", "self", ".", "model_mode", "==", "'TEST'", ":", "\n", "            ", "label_feature", "=", "self", ".", "label_feature", "\n", "", "else", ":", "\n", "            ", "label_embedding", "=", "self", ".", "label_embedding", "(", "torch", ".", "arange", "(", "0", ",", "len", "(", "self", ".", "label_map", ")", ")", ".", "long", "(", ")", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "\n", "label_embedding", "=", "label_embedding", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "tree_label_feature", "=", "self", ".", "graph_model", "(", "label_embedding", ")", "\n", "label_feature", "=", "tree_label_feature", ".", "squeeze", "(", "0", ")", "\n", "\n", "\n", "", "label_aware_text_feature", "=", "self", ".", "_soft_attention", "(", "text_feature", ",", "label_feature", ")", "\n", "\n", "logits", "=", "self", ".", "dropout", "(", "self", ".", "linear", "(", "label_aware_text_feature", ".", "view", "(", "label_aware_text_feature", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ")", ")", "\n", "# transform label feature", "\n", "label_feature", "=", "torch", ".", "matmul", "(", "label_feature", ",", "self", ".", "label_feature_transform_weight", ")", "\n", "return", "label_feature", ",", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.models.text_label_mi_discriminator.TextLabelMIDiscriminator.__init__": [[6, 13], ["torch.Module.__init__", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.structure_model.tree.Tree.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "c0", "=", "nn", ".", "Conv1d", "(", "300", ",", "300", ",", "kernel_size", "=", "3", ")", "\n", "self", ".", "c1", "=", "nn", ".", "Conv1d", "(", "300", ",", "512", ",", "kernel_size", "=", "3", ")", "\n", "self", ".", "l0", "=", "nn", ".", "Linear", "(", "512", "+", "300", ",", "512", ")", "\n", "self", ".", "l1", "=", "nn", ".", "Linear", "(", "512", ",", "512", ")", "\n", "self", ".", "l2", "=", "nn", ".", "Linear", "(", "512", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.models.text_label_mi_discriminator.TextLabelMIDiscriminator.forward": [[14, 23], ["torch.relu", "torch.relu", "torch.relu", "text_label_mi_discriminator.TextLabelMIDiscriminator.c1", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.relu.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "text_label_mi_discriminator.TextLabelMIDiscriminator.l2", "text_label_mi_discriminator.TextLabelMIDiscriminator.c0", "text_label_mi_discriminator.TextLabelMIDiscriminator.l0", "text_label_mi_discriminator.TextLabelMIDiscriminator.l1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "y", ",", "M", ")", ":", "\n", "        ", "h", "=", "F", ".", "relu", "(", "self", ".", "c0", "(", "M", ")", ")", "\n", "h", "=", "self", ".", "c1", "(", "h", ")", "\n", "h", "=", "torch", ".", "mean", "(", "h", ",", "dim", "=", "2", ")", "\n", "h", "=", "h", ".", "view", "(", "y", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "h", "=", "torch", ".", "cat", "(", "(", "y", ",", "h", ")", ",", "dim", "=", "1", ")", "\n", "h", "=", "F", ".", "relu", "(", "self", ".", "l0", "(", "h", ")", ")", "\n", "h", "=", "F", ".", "relu", "(", "self", ".", "l1", "(", "h", ")", ")", "\n", "return", "self", ".", "l2", "(", "h", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.structure_model.weighted_tree_lstm.WeightedHierarchicalTreeLSTMEndtoEnd.__init__": [[11, 48], ["torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.Module.__init__", "weighted_tree_lstm.WeightedChildSumTreeLSTMEndtoEnd", "weighted_tree_lstm.WeightedTopDownTreeLSTMEndtoEnd", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.structure_model.tree.Tree.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "num_nodes", ",", "\n", "in_matrix", ",", "out_matrix", ",", "\n", "in_dim", ",", "\n", "dropout", "=", "0.0", ",", "\n", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", ",", "\n", "root", "=", "None", ",", "\n", "hierarchical_label_dict", "=", "None", ",", "\n", "label_trees", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        TreeLSTM variant for Hierarchy Structure\n        :param num_nodes: int, N\n        :param in_matrix: numpy.Array(N, N), input adjacent matrix for child2parent (bottom-up manner)\n        :param out_matrix: numpy.Array(N, N), output adjacent matrix for parent2child (top-down manner)\n        :param in_dim: int, the dimension of each node <- config.structure_encoder.node.dimension\n        :param layers: int, the number of layers <- config.structure_encoder.num_layer\n        :param time_step: int, the number of time steps <- config.structure_encoder.time_step\n        :param dropout: Float, P value for dropout module <- configure.structure_encoder.node.dropout\n        :param prob_train: Boolean, train the probability matrix if True <- config.structure_encoder.prob_train\n        :param device: torch.device <- config.train.device_setting.device\n        :param root: Tree object of the root node\n        :param hierarchical_label_dict: Dict{parent_id: child_id}\n        :param label_trees: List[Tree]\n        \"\"\"", "\n", "super", "(", "WeightedHierarchicalTreeLSTMEndtoEnd", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "root", "=", "root", "\n", "mem_dim", "=", "in_dim", "//", "2", "\n", "self", ".", "hierarchical_label_dict", "=", "hierarchical_label_dict", "\n", "self", ".", "label_trees", "=", "label_trees", "\n", "# child-sum", "\n", "self", ".", "bottom_up_lstm", "=", "WeightedChildSumTreeLSTMEndtoEnd", "(", "in_dim", ",", "mem_dim", ",", "num_nodes", ",", "in_matrix", ",", "device", ")", "\n", "# parent2child", "\n", "self", ".", "top_down_lstm", "=", "WeightedTopDownTreeLSTMEndtoEnd", "(", "in_dim", ",", "mem_dim", ",", "num_nodes", ",", "out_matrix", ",", "device", ")", "\n", "self", ".", "tree_projection_layer", "=", "torch", ".", "nn", ".", "Linear", "(", "2", "*", "mem_dim", ",", "mem_dim", ")", "\n", "self", ".", "node_dropout", "=", "torch", ".", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "num_nodes", "=", "num_nodes", "\n", "self", ".", "mem_dim", "=", "mem_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.structure_model.weighted_tree_lstm.WeightedHierarchicalTreeLSTMEndtoEnd.forward": [[49, 73], ["inputs.transpose.transpose.transpose", "list", "list.sort", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "weighted_tree_lstm.WeightedHierarchicalTreeLSTMEndtoEnd.bottom_up_lstm", "weighted_tree_lstm.WeightedHierarchicalTreeLSTMEndtoEnd.top_down_lstm", "weighted_tree_lstm.WeightedHierarchicalTreeLSTMEndtoEnd.label_trees.keys", "tree_label_feature.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "weighted_tree_lstm.WeightedHierarchicalTreeLSTMEndtoEnd.node_dropout", "weighted_tree_lstm.WeightedHierarchicalTreeLSTMEndtoEnd.node_dropout", "weighted_tree_lstm.WeightedHierarchicalTreeLSTMEndtoEnd.label_trees[].bottom_up_state[].view", "weighted_tree_lstm.WeightedHierarchicalTreeLSTMEndtoEnd.label_trees[].top_down_state[].view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "\"\"\"\n        forward pass\n        :param inputs: torch.FloatTensor, (batch, N, in_dim)\n        :return: label_features -> torch.FloatTensor, (batch, N, in_dim)\n        \"\"\"", "\n", "inputs", "=", "inputs", ".", "transpose", "(", "0", ",", "1", ")", "# N, batch_size, dim", "\n", "for", "i", "in", "self", ".", "hierarchical_label_dict", "[", "self", ".", "root", ".", "idx", "]", ":", "\n", "            ", "self", ".", "bottom_up_lstm", "(", "self", ".", "label_trees", "[", "i", "+", "1", "]", ",", "inputs", ")", "\n", "self", ".", "top_down_lstm", "(", "self", ".", "label_trees", "[", "i", "+", "1", "]", ",", "inputs", ")", "\n", "\n", "", "tree_label_feature", "=", "[", "]", "\n", "nodes_keys", "=", "list", "(", "self", ".", "label_trees", ".", "keys", "(", ")", ")", "\n", "nodes_keys", ".", "sort", "(", ")", "\n", "for", "i", "in", "nodes_keys", ":", "\n", "            ", "if", "i", "==", "0", ":", "# should be root.idx", "\n", "                ", "continue", "\n", "", "tree_label_feature", ".", "append", "(", "\n", "torch", ".", "cat", "(", "(", "self", ".", "node_dropout", "(", "self", ".", "label_trees", "[", "i", "]", ".", "bottom_up_state", "[", "1", "]", ".", "view", "(", "inputs", ".", "shape", "[", "1", "]", ",", "1", ",", "self", ".", "mem_dim", ")", ")", ",", "\n", "self", ".", "node_dropout", "(", "self", ".", "label_trees", "[", "i", "]", ".", "top_down_state", "[", "1", "]", ".", "view", "(", "inputs", ".", "shape", "[", "1", "]", ",", "1", ",", "self", ".", "mem_dim", ")", ")", ")", ",", "\n", "2", ")", ")", "\n", "", "label_feature", "=", "torch", ".", "cat", "(", "tree_label_feature", ",", "1", ")", "# label_feature: batch_size, num_nodes, 2 * node_dimension", "\n", "\n", "return", "label_feature", "\n", "\n"]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.structure_model.weighted_tree_lstm.WeightedChildSumTreeLSTMEndtoEnd.__init__": [[76, 102], ["torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.structure_model.tree.Tree.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", ",", "mem_dim", ",", "\n", "num_nodes", "=", "-", "1", ",", "prob", "=", "None", ",", "\n", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", ")", ":", "\n", "        ", "\"\"\"\n        Child-Sum variant for hierarchy-structure\n        Child-Sum treelstm paper:Tai, K. S., Socher, R., & Manning, C. D. (2015).\n            Improved semantic representations from tree-structured long short-term memory networks.\n             arXiv preprint arXiv:1503.00075.\n        :param in_dim: int, config.structure_encoder.dimension\n        :param mem_dim: int, in_dim // 2\n        :param num_nodes: int, the number of nodes in the hierarchy taxonomy\n        :param prob: numpy.array, the prior probability of the hierarchical relation\n        :param if_prob_train: Boolean, True for updating the prob\n        :param device: torch.device  <- config.train.device_setting.device\n        \"\"\"", "\n", "super", "(", "WeightedChildSumTreeLSTMEndtoEnd", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_dim", "=", "in_dim", "\n", "self", ".", "mem_dim", "=", "mem_dim", "\n", "self", ".", "ioux", "=", "nn", ".", "Linear", "(", "self", ".", "in_dim", ",", "3", "*", "self", ".", "mem_dim", ")", "\n", "self", ".", "iouh", "=", "nn", ".", "Linear", "(", "self", ".", "mem_dim", ",", "3", "*", "self", ".", "mem_dim", ")", "\n", "self", ".", "fx", "=", "nn", ".", "Linear", "(", "self", ".", "in_dim", ",", "self", ".", "mem_dim", ")", "\n", "self", ".", "fh", "=", "nn", ".", "Linear", "(", "self", ".", "mem_dim", ",", "self", ".", "mem_dim", ")", "\n", "self", ".", "node_transformation", "=", "torch", ".", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "node_transformation_decompostion", "=", "torch", ".", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "prob", "=", "torch", ".", "Tensor", "(", "prob", ")", ".", "to", "(", "device", ")", "\n", "self", ".", "prob", "=", "Parameter", "(", "self", ".", "prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.structure_model.weighted_tree_lstm.WeightedChildSumTreeLSTMEndtoEnd.node_forward": [[103, 123], ["torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "weighted_tree_lstm.WeightedChildSumTreeLSTMEndtoEnd.ioux", "weighted_tree_lstm.WeightedChildSumTreeLSTMEndtoEnd.iouh", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.tanh", "torch.tanh", "torch.tanh", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.tanh", "torch.tanh", "torch.tanh", "iou.size", "weighted_tree_lstm.WeightedChildSumTreeLSTMEndtoEnd.fh", "weighted_tree_lstm.WeightedChildSumTreeLSTMEndtoEnd.fx().repeat", "len", "weighted_tree_lstm.WeightedChildSumTreeLSTMEndtoEnd.fx"], "methods", ["home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.structure_model.tree.Tree.size"], ["", "def", "node_forward", "(", "self", ",", "inputs", ",", "child_c", ",", "child_h", ")", ":", "\n", "        ", "\"\"\"\n        forward pass of each node\n        :param inputs: original state\n        :param child_c: the current state of the child nodes\n        :param child_h: the hidden state of the child nodes\n        :return: c ( current state ) -> torch.FloatTensor (1, mem_dim),\n                 h ( hidden state ) -> torch.FloatTensor (1, mem_dim)\n        \"\"\"", "\n", "child_h_sum", "=", "torch", ".", "sum", "(", "child_h", ",", "dim", "=", "0", ",", "keepdim", "=", "True", ")", "\n", "iou", "=", "self", ".", "ioux", "(", "inputs", ")", "+", "self", ".", "iouh", "(", "child_h_sum", ")", "\n", "i", ",", "o", ",", "u", "=", "torch", ".", "split", "(", "iou", ",", "iou", ".", "size", "(", "2", ")", "//", "3", ",", "dim", "=", "2", ")", "\n", "i", ",", "o", ",", "u", "=", "F", ".", "sigmoid", "(", "i", ")", ",", "F", ".", "sigmoid", "(", "o", ")", ",", "F", ".", "tanh", "(", "u", ")", "\n", "\n", "f", "=", "F", ".", "sigmoid", "(", "self", ".", "fh", "(", "child_h", ")", "+", "self", ".", "fx", "(", "inputs", ")", ".", "repeat", "(", "len", "(", "child_h", ")", ",", "1", ",", "1", ")", ")", "\n", "fc", "=", "torch", ".", "mul", "(", "f", ",", "child_c", ")", "\n", "c", "=", "torch", ".", "mul", "(", "i", ",", "u", ")", "+", "torch", ".", "sum", "(", "fc", ",", "dim", "=", "0", ",", "keepdim", "=", "True", ")", "\n", "h", "=", "torch", ".", "mul", "(", "o", ",", "F", ".", "tanh", "(", "c", ")", ")", "\n", "\n", "return", "c", ",", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.structure_model.weighted_tree_lstm.WeightedChildSumTreeLSTMEndtoEnd.forward": [[124, 145], ["range", "weighted_tree_lstm.WeightedChildSumTreeLSTMEndtoEnd.node_forward", "weighted_tree_lstm.WeightedChildSumTreeLSTMEndtoEnd.forward", "inputs[].detach().new().fill_().requires_grad_().repeat", "inputs[].detach().new().fill_().requires_grad_().repeat", "zip", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "inputs[].detach().new().fill_().requires_grad_", "inputs[].detach().new().fill_().requires_grad_", "map", "inputs[].detach().new().fill_", "inputs[].detach().new().fill_", "inputs[].detach().new", "inputs[].detach().new", "inputs[].detach", "inputs[].detach"], "methods", ["home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.structure_model.weighted_tree_lstm.WeightedTopDownTreeLSTMEndtoEnd.node_forward", "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.structure_model.structure_encoder.StructureEncoder.forward"], ["", "def", "forward", "(", "self", ",", "tree", ",", "inputs", ")", ":", "\n", "        ", "\"\"\"\n        forward pass of the overall child-sum module\n        :param tree: Tree object\n        :param inputs: torch.FloatTensor, (N, batch, in_dim)\n        :return: bottom_up_state -> torch.FloatTensor, (N, batch, mem_dim)\n        \"\"\"", "\n", "for", "idx", "in", "range", "(", "tree", ".", "num_children", ")", ":", "\n", "            ", "self", ".", "forward", "(", "tree", ".", "children", "[", "idx", "]", ",", "inputs", ")", "\n", "\n", "", "if", "tree", ".", "num_children", "==", "0", ":", "\n", "            ", "child_c", "=", "inputs", "[", "0", ",", "0", "]", ".", "detach", "(", ")", ".", "new", "(", "1", ",", "self", ".", "mem_dim", ")", ".", "fill_", "(", "0.", ")", ".", "requires_grad_", "(", ")", ".", "repeat", "(", "1", ",", "inputs", ".", "shape", "[", "1", "]", ",", "\n", "1", ")", "\n", "child_h", "=", "inputs", "[", "0", ",", "0", "]", ".", "detach", "(", ")", ".", "new", "(", "1", ",", "self", ".", "mem_dim", ")", ".", "fill_", "(", "0.", ")", ".", "requires_grad_", "(", ")", ".", "repeat", "(", "1", ",", "inputs", ".", "shape", "[", "1", "]", ",", "\n", "1", ")", "\n", "", "else", ":", "\n", "            ", "child_c", ",", "child_h", "=", "zip", "(", "\n", "*", "map", "(", "lambda", "x", ":", "(", "self", ".", "prob", "[", "tree", ".", "idx", "]", "[", "x", ".", "idx", "]", "*", "y", "for", "y", "in", "x", ".", "bottom_up_state", ")", ",", "tree", ".", "children", ")", ")", "\n", "child_c", ",", "child_h", "=", "torch", ".", "cat", "(", "child_c", ",", "dim", "=", "0", ")", ",", "torch", ".", "cat", "(", "child_h", ",", "dim", "=", "0", ")", "\n", "", "tree", ".", "bottom_up_state", "=", "self", ".", "node_forward", "(", "inputs", "[", "tree", ".", "idx", "]", ",", "child_c", ",", "child_h", ")", "\n", "return", "tree", ".", "bottom_up_state", "\n", "\n"]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.structure_model.weighted_tree_lstm.WeightedTopDownTreeLSTMEndtoEnd.__init__": [[148, 173], ["torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.structure_model.tree.Tree.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", ",", "mem_dim", ",", "\n", "num_nodes", "=", "-", "1", ",", "prob", "=", "None", ",", "\n", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", ")", ":", "\n", "        ", "\"\"\"\n        Top-Down variant for hierarchy-structure\n        Top-Down TreeLSTM paper: Zhang, X., Lu, L., & Lapata, M. (2015). Top-down tree long short-term memory networks.\n            arXiv preprint arXiv:1511.00060.\n        :param in_dim: int, config.structure_encoder.dimension\n        :param mem_dim: int, in_dim // 2\n        :param num_nodes: int, the number of nodes in the hierarchy taxonomy\n        :param prob: numpy.array, the prior probability of the hierarchical relation\n        :param if_prob_train: Boolean, True for updating the prob\n        :param device: torch.device  <- config.train.device_setting.device\n        \"\"\"", "\n", "super", "(", "WeightedTopDownTreeLSTMEndtoEnd", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_dim", "=", "in_dim", "\n", "self", ".", "mem_dim", "=", "mem_dim", "\n", "self", ".", "ioux", "=", "nn", ".", "Linear", "(", "self", ".", "in_dim", ",", "3", "*", "self", ".", "mem_dim", ")", "\n", "self", ".", "iouh", "=", "nn", ".", "Linear", "(", "self", ".", "mem_dim", ",", "3", "*", "self", ".", "mem_dim", ")", "\n", "self", ".", "fx", "=", "nn", ".", "Linear", "(", "self", ".", "in_dim", ",", "self", ".", "mem_dim", ")", "\n", "self", ".", "fh", "=", "nn", ".", "Linear", "(", "self", ".", "mem_dim", ",", "self", ".", "mem_dim", ")", "\n", "self", ".", "node_transformation", "=", "torch", ".", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "node_transformation_decompostion", "=", "torch", ".", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "prob", "=", "torch", ".", "Tensor", "(", "prob", ")", ".", "to", "(", "device", ")", "\n", "self", ".", "prob", "=", "Parameter", "(", "self", ".", "prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.structure_model.weighted_tree_lstm.WeightedTopDownTreeLSTMEndtoEnd.node_forward": [[174, 194], ["torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "weighted_tree_lstm.WeightedTopDownTreeLSTMEndtoEnd.ioux", "weighted_tree_lstm.WeightedTopDownTreeLSTMEndtoEnd.iouh", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.tanh", "torch.tanh", "torch.tanh", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.tanh", "torch.tanh", "torch.tanh", "iou.size", "weighted_tree_lstm.WeightedTopDownTreeLSTMEndtoEnd.fh", "weighted_tree_lstm.WeightedTopDownTreeLSTMEndtoEnd.fx().repeat", "len", "weighted_tree_lstm.WeightedTopDownTreeLSTMEndtoEnd.fx"], "methods", ["home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.structure_model.tree.Tree.size"], ["", "def", "node_forward", "(", "self", ",", "inputs", ",", "parent_c", ",", "parent_h", ")", ":", "\n", "        ", "\"\"\"\n        forward pass for each node\n        forward pass of each node\n        :param inputs: original state\n        :param parent_c: the current state of the child nodes\n        :param parent_h: the hidden state of the child nodes\n        :return: c ( current state ) -> torch.FloatTensor (1, mem_dim),\n                 h ( hidden state ) -> torch.FloatTensor (1, mem_dim)\n        \"\"\"", "\n", "iou", "=", "self", ".", "ioux", "(", "inputs", ")", "+", "self", ".", "iouh", "(", "parent_h", ")", "\n", "i", ",", "o", ",", "u", "=", "torch", ".", "split", "(", "iou", ",", "iou", ".", "size", "(", "2", ")", "//", "3", ",", "dim", "=", "2", ")", "\n", "i", ",", "o", ",", "u", "=", "F", ".", "sigmoid", "(", "i", ")", ",", "F", ".", "sigmoid", "(", "o", ")", ",", "F", ".", "tanh", "(", "u", ")", "\n", "\n", "f", "=", "F", ".", "sigmoid", "(", "self", ".", "fh", "(", "parent_h", ")", "+", "self", ".", "fx", "(", "inputs", ")", ".", "repeat", "(", "len", "(", "parent_h", ")", ",", "1", ",", "1", ")", ")", "\n", "fc", "=", "torch", ".", "mul", "(", "f", ",", "parent_c", ")", "\n", "c", "=", "torch", ".", "mul", "(", "i", ",", "u", ")", "+", "torch", ".", "sum", "(", "fc", ",", "dim", "=", "0", ",", "keepdim", "=", "True", ")", "\n", "h", "=", "torch", ".", "mul", "(", "o", ",", "F", ".", "tanh", "(", "c", ")", ")", "\n", "\n", "return", "c", ",", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.structure_model.weighted_tree_lstm.WeightedTopDownTreeLSTMEndtoEnd.forward": [[195, 215], ["weighted_tree_lstm.WeightedTopDownTreeLSTMEndtoEnd.node_forward", "range", "inputs[].detach().new().fill_().requires_grad_().repeat", "inputs[].detach().new().fill_().requires_grad_().repeat", "weighted_tree_lstm.WeightedTopDownTreeLSTMEndtoEnd.forward", "inputs[].detach().new().fill_().requires_grad_", "inputs[].detach().new().fill_().requires_grad_", "inputs[].detach().new().fill_", "inputs[].detach().new().fill_", "inputs[].detach().new", "inputs[].detach().new", "inputs[].detach", "inputs[].detach"], "methods", ["home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.structure_model.weighted_tree_lstm.WeightedTopDownTreeLSTMEndtoEnd.node_forward", "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.structure_model.structure_encoder.StructureEncoder.forward"], ["", "def", "forward", "(", "self", ",", "tree", ",", "inputs", ",", "state", "=", "None", ",", "parent", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        forward pass of the overall child-sum module\n        :param tree: Tree object\n        :param inputs: torch.FloatTensor, (N, batch, in_dim)\n        :return: top_down_state -> torch.FloatTensor, (N, batch,  mem_dim)\n        \"\"\"", "\n", "if", "state", "is", "None", ":", "\n", "            ", "parent_c", "=", "inputs", "[", "0", ",", "0", "]", ".", "detach", "(", ")", ".", "new", "(", "1", ",", "self", ".", "mem_dim", ")", ".", "fill_", "(", "0.", ")", ".", "requires_grad_", "(", ")", ".", "repeat", "(", "1", ",", "inputs", ".", "shape", "[", "1", "]", ",", "\n", "1", ")", "\n", "parent_h", "=", "inputs", "[", "0", ",", "0", "]", ".", "detach", "(", ")", ".", "new", "(", "1", ",", "self", ".", "mem_dim", ")", ".", "fill_", "(", "0.", ")", ".", "requires_grad_", "(", ")", ".", "repeat", "(", "1", ",", "inputs", ".", "shape", "[", "1", "]", ",", "\n", "1", ")", "\n", "", "else", ":", "\n", "            ", "parent_c", "=", "self", ".", "prob", "[", "parent", ".", "idx", "]", "[", "tree", ".", "idx", "]", "*", "state", "[", "0", "]", "\n", "parent_h", "=", "self", ".", "prob", "[", "parent", ".", "idx", "]", "[", "tree", ".", "idx", "]", "*", "state", "[", "1", "]", "\n", "\n", "", "tree", ".", "top_down_state", "=", "self", ".", "node_forward", "(", "inputs", "[", "tree", ".", "idx", "]", ",", "parent_c", ",", "parent_h", ")", "\n", "for", "idx", "in", "range", "(", "tree", ".", "num_children", ")", ":", "\n", "            ", "self", ".", "forward", "(", "tree", ".", "children", "[", "idx", "]", ",", "inputs", ",", "tree", ".", "top_down_state", ",", "tree", ")", "\n", "", "return", "tree", ".", "top_down_state", "\n", "", "", ""]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.structure_model.graphcnn.HierarchyGCN.__init__": [[11, 44], ["torch.device", "torch.device", "torch.device", "torch.device", "torch.nn.Module.__init__", "torch.nn.ModuleList", "torch.nn.ModuleList", "graphcnn.HierarchyGCN.model.append", "graphcnn.HierarchyGCNModule"], "methods", ["home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.structure_model.tree.Tree.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "num_nodes", ",", "\n", "in_matrix", ",", "\n", "out_matrix", ",", "\n", "in_dim", ",", "\n", "dropout", "=", "0.0", ",", "\n", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", ",", "\n", "root", "=", "None", ",", "\n", "hierarchical_label_dict", "=", "None", ",", "\n", "label_trees", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Graph Convolutional Network variant for hierarchy structure\n        original GCN paper:\n                Kipf, T. N., & Welling, M. (2016). Semi-supervised classification with graph convolutional networks.\n                    arXiv preprint arXiv:1609.02907.\n        :param num_nodes: int, N\n        :param in_matrix: numpy.Array(N, N), input adjacent matrix for child2parent (bottom-up manner)\n        :param out_matrix: numpy.Array(N, N), output adjacent matrix for parent2child (top-down manner)\n        :param in_dim: int, the dimension of each node <- config.structure_encoder.node.dimension\n        :param layers: int, the number of layers <- config.structure_encoder.num_layer\n        :param time_step: int, the number of time steps <- config.structure_encoder.time_step\n        :param dropout: Float, P value for dropout module <- configure.structure_encoder.node.dropout\n        :param prob_train: Boolean, train the probability matrix if True <- config.structure_encoder.prob_train\n        :param device: torch.device <- config.train.device_setting.device\n        \"\"\"", "\n", "super", "(", "HierarchyGCN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "model", ".", "append", "(", "\n", "HierarchyGCNModule", "(", "num_nodes", ",", "\n", "in_matrix", ",", "out_matrix", ",", "\n", "in_dim", ",", "\n", "dropout", ",", "\n", "device", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.structure_model.graphcnn.HierarchyGCN.forward": [[45, 47], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "label", ")", ":", "\n", "        ", "return", "self", ".", "model", "[", "0", "]", "(", "label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.structure_model.graphcnn.HierarchyGCNModule.__init__": [[50, 91], ["torch.nn.Module.__init__", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.ReLU", "torch.nn.ReLU", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.Dropout", "torch.nn.Dropout", "graphcnn.HierarchyGCNModule.reset_parameters", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "numpy.where"], "methods", ["home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.structure_model.tree.Tree.__init__", "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.structure_model.graphcnn.HierarchyGCNModule.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "\n", "num_nodes", ",", "\n", "in_adj", ",", "out_adj", ",", "\n", "in_dim", ",", "dropout", ",", "device", ",", "in_arc", "=", "True", ",", "out_arc", "=", "True", ",", "\n", "self_loop", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        module of Hierarchy-GCN\n        :param num_nodes: int, N\n        :param in_adj: numpy.Array(N, N), input adjacent matrix for child2parent (bottom-up manner)\n        :param out_adj: numpy.Array(N, N), output adjacent matrix for parent2child (top-down manner)\n        :param in_dim: int, the dimension of each node <- config.structure_encoder.node.dimension\n        :param dropout: Float, P value for dropout module <- configure.structure_encoder.node.dropout\n        :param prob_train: Boolean, train the probability matrix if True <- config.structure_encoder.prob_train\n        :param device: torch.device <- config.train.device_setting.device\n        :param in_arc: Boolean, True\n        :param out_arc: Boolean, True\n        :param self_loop: Boolean, True\n        \"\"\"", "\n", "\n", "super", "(", "HierarchyGCNModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "self_loop", "=", "self_loop", "\n", "self", ".", "out_arc", "=", "out_arc", "\n", "self", ".", "in_arc", "=", "in_arc", "\n", "self", ".", "device", "=", "device", "\n", "assert", "in_arc", "or", "out_arc", "\n", "#  bottom-up child sum", "\n", "in_prob", "=", "in_adj", "\n", "self", ".", "adj_matrix", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "in_prob", ")", ")", "\n", "self", ".", "edge_bias", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "num_nodes", ",", "in_dim", ")", ")", "\n", "self", ".", "gate_weight", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "in_dim", ",", "1", ")", ")", "\n", "self", ".", "bias_gate", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "num_nodes", ",", "1", ")", ")", "\n", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "origin_adj", "=", "torch", ".", "Tensor", "(", "np", ".", "where", "(", "in_adj", "<=", "0", ",", "in_adj", ",", "1.0", ")", ")", ".", "to", "(", "device", ")", "\n", "# top-down: parent to child", "\n", "self", ".", "out_adj_matrix", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "out_adj", ")", ")", "\n", "self", ".", "out_edge_bias", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "num_nodes", ",", "in_dim", ")", ")", "\n", "self", ".", "out_gate_weight", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "in_dim", ",", "1", ")", ")", "\n", "self", ".", "out_bias_gate", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "num_nodes", ",", "1", ")", ")", "\n", "self", ".", "loop_gate", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "in_dim", ",", "1", ")", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout", ")", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.structure_model.graphcnn.HierarchyGCNModule.reset_parameters": [[92, 100], ["torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.zeros_", "torch.nn.init.zeros_"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        initialize parameters\n        \"\"\"", "\n", "for", "param", "in", "[", "self", ".", "gate_weight", ",", "self", ".", "loop_gate", ",", "self", ".", "out_gate_weight", "]", ":", "\n", "            ", "nn", ".", "init", ".", "xavier_uniform_", "(", "param", ")", "\n", "", "for", "param", "in", "[", "self", ".", "edge_bias", ",", "self", ".", "out_edge_bias", ",", "self", ".", "bias_gate", "]", ":", "\n", "            ", "nn", ".", "init", ".", "zeros_", "(", "param", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.structure_model.graphcnn.HierarchyGCNModule.forward": [[101, 134], ["torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "graphcnn.HierarchyGCNModule.dropout", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "graphcnn.HierarchyGCNModule.dropout", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "graphcnn.HierarchyGCNModule.dropout", "graphcnn.HierarchyGCNModule.activation", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "graphcnn.HierarchyGCNModule.origin_adj.transpose"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "\"\"\"\n        :param inputs: torch.FloatTensor, (batch_size, N, in_dim)\n        :return: message_ -> torch.FloatTensor (batch_size, N, in_dim)\n        \"\"\"", "\n", "h_", "=", "inputs", "# batch, N, in_dim", "\n", "message_", "=", "torch", ".", "zeros_like", "(", "h_", ")", ".", "to", "(", "self", ".", "device", ")", "# batch, N, in_dim", "\n", "\n", "h_in_", "=", "torch", ".", "matmul", "(", "self", ".", "origin_adj", "*", "self", ".", "adj_matrix", ",", "h_", ")", "# batch, N, in_dim", "\n", "in_", "=", "h_in_", "+", "self", ".", "edge_bias", "\n", "in_", "=", "in_", "\n", "# N,1,dim", "\n", "in_gate_", "=", "torch", ".", "matmul", "(", "h_", ",", "self", ".", "gate_weight", ")", "\n", "# N, 1", "\n", "in_gate_", "=", "in_gate_", "+", "self", ".", "bias_gate", "\n", "in_", "=", "in_", "*", "F", ".", "sigmoid", "(", "in_gate_", ")", "\n", "in_", "=", "self", ".", "dropout", "(", "in_", ")", "\n", "message_", "+=", "in_", "# batch, N, in_dim", "\n", "\n", "h_output_", "=", "torch", ".", "matmul", "(", "self", ".", "origin_adj", ".", "transpose", "(", "0", ",", "1", ")", "*", "self", ".", "out_adj_matrix", ",", "h_", ")", "\n", "out_", "=", "h_output_", "+", "self", ".", "out_edge_bias", "\n", "out_gate_", "=", "torch", ".", "matmul", "(", "h_", ",", "self", ".", "out_gate_weight", ")", "\n", "out_gate_", "=", "out_gate_", "+", "self", ".", "out_bias_gate", "\n", "out_", "=", "out_", "*", "F", ".", "sigmoid", "(", "out_gate_", ")", "\n", "out_", "=", "self", ".", "dropout", "(", "out_", ")", "\n", "message_", "+=", "out_", "\n", "\n", "loop_gate", "=", "torch", ".", "matmul", "(", "h_", ",", "self", ".", "loop_gate", ")", "\n", "loop_", "=", "h_", "*", "F", ".", "sigmoid", "(", "loop_gate", ")", "\n", "loop_", "=", "self", ".", "dropout", "(", "loop_", ")", "\n", "message_", "+=", "loop_", "\n", "\n", "return", "self", ".", "activation", "(", "message_", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.structure_model.structure_encoder.StructureEncoder.__init__": [[20, 68], ["torch.Module.__init__", "models.structure_model.tree.Tree", "helper.utils.get_hierarchy_relations", "os.path.join", "open", "open.readlines", "open.close", "json.loads", "numpy.zeros", "numpy.zeros", "structure_encoder.StructureEncoder.hierarchy_prob.keys", "os.path.join", "structure_encoder.StructureEncoder.hierarchy_prob[].keys", "len", "len", "len", "len", "len", "int", "int", "int", "int"], "methods", ["home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.structure_model.tree.Tree.__init__", "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.helper.utils.get_hierarchy_relations"], ["    ", "def", "__init__", "(", "self", ",", "\n", "config", ",", "\n", "label_map", ",", "\n", "device", ",", "\n", "graph_model_type", ")", ":", "\n", "        ", "\"\"\"\n        Structure Encoder module\n        :param config: helper.configure, Configure Object\n        :param label_map: data_modules.vocab.v2i['label']\n        :param device: torch.device, config.train.device_setting.device\n        :param graph_model_type: Str, model_type, ['TreeLSTM', 'GCN']\n        \"\"\"", "\n", "super", "(", "StructureEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "label_map", "=", "label_map", "\n", "self", ".", "root", "=", "Tree", "(", "-", "1", ")", "\n", "\n", "self", ".", "hierarchical_label_dict", ",", "self", ".", "label_trees", "=", "get_hierarchy_relations", "(", "os", ".", "path", ".", "join", "(", "config", ".", "data", ".", "data_dir", ",", "\n", "config", ".", "data", ".", "hierarchy", ")", ",", "\n", "self", ".", "label_map", ",", "\n", "root", "=", "self", ".", "root", ",", "\n", "fortree", "=", "True", ")", "\n", "hierarchy_prob_file", "=", "os", ".", "path", ".", "join", "(", "config", ".", "data", ".", "data_dir", ",", "config", ".", "data", ".", "prob_json", ")", "\n", "f", "=", "open", "(", "hierarchy_prob_file", ",", "'r'", ")", "\n", "hierarchy_prob_str", "=", "f", ".", "readlines", "(", ")", "\n", "f", ".", "close", "(", ")", "\n", "self", ".", "hierarchy_prob", "=", "json", ".", "loads", "(", "hierarchy_prob_str", "[", "0", "]", ")", "\n", "self", ".", "node_prob_from_parent", "=", "np", ".", "zeros", "(", "(", "len", "(", "self", ".", "label_map", ")", ",", "len", "(", "self", ".", "label_map", ")", ")", ")", "\n", "self", ".", "node_prob_from_child", "=", "np", ".", "zeros", "(", "(", "len", "(", "self", ".", "label_map", ")", ",", "len", "(", "self", ".", "label_map", ")", ")", ")", "\n", "\n", "for", "p", "in", "self", ".", "hierarchy_prob", ".", "keys", "(", ")", ":", "\n", "            ", "if", "p", "==", "'Root'", ":", "\n", "                ", "continue", "\n", "", "for", "c", "in", "self", ".", "hierarchy_prob", "[", "p", "]", ".", "keys", "(", ")", ":", "\n", "# self.hierarchy_id_prob[self.label_map[p]][self.label_map[c]] = self.hierarchy_prob[p][c]", "\n", "                ", "self", ".", "node_prob_from_child", "[", "int", "(", "self", ".", "label_map", "[", "p", "]", ")", "]", "[", "int", "(", "self", ".", "label_map", "[", "c", "]", ")", "]", "=", "1.0", "\n", "self", ".", "node_prob_from_parent", "[", "int", "(", "self", ".", "label_map", "[", "c", "]", ")", "]", "[", "int", "(", "self", ".", "label_map", "[", "p", "]", ")", "]", "=", "self", ".", "hierarchy_prob", "[", "p", "]", "[", "c", "]", "\n", "#  node_prob_from_parent: row means parent, col refers to children", "\n", "\n", "", "", "self", ".", "model", "=", "MODEL_MODULE", "[", "graph_model_type", "]", "(", "num_nodes", "=", "len", "(", "self", ".", "label_map", ")", ",", "\n", "in_matrix", "=", "self", ".", "node_prob_from_child", ",", "\n", "out_matrix", "=", "self", ".", "node_prob_from_parent", ",", "\n", "in_dim", "=", "config", ".", "structure_encoder", ".", "node", ".", "dimension", ",", "\n", "dropout", "=", "config", ".", "structure_encoder", ".", "node", ".", "dropout", ",", "\n", "device", "=", "device", ",", "\n", "root", "=", "self", ".", "root", ",", "\n", "hierarchical_label_dict", "=", "self", ".", "hierarchical_label_dict", ",", "\n", "label_trees", "=", "self", ".", "label_trees", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.structure_model.structure_encoder.StructureEncoder.forward": [[69, 71], ["structure_encoder.StructureEncoder.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "inputs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.structure_model.tree.Tree.__init__": [[6, 18], ["list"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\"\n        class for tree structure of hierarchical labels\n        :param: idx <- Int\n        self.parent: Tree\n        self.children: List[Tree]\n        self.num_children: int, the number of children nodes\n        \"\"\"", "\n", "self", ".", "idx", "=", "idx", "\n", "self", ".", "parent", "=", "None", "\n", "self", ".", "children", "=", "list", "(", ")", "\n", "self", ".", "num_children", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.structure_model.tree.Tree.add_child": [[19, 26], ["tree.Tree.children.append"], "methods", ["None"], ["", "def", "add_child", "(", "self", ",", "child", ")", ":", "\n", "        ", "\"\"\"\n        :param child: Tree\n        \"\"\"", "\n", "child", ".", "parent", "=", "self", "\n", "self", ".", "num_children", "+=", "1", "\n", "self", ".", "children", ".", "append", "(", "child", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.structure_model.tree.Tree.size": [[27, 38], ["getattr", "range", "tree.Tree.children[].size"], "methods", ["home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.structure_model.tree.Tree.size"], ["", "def", "size", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        :return: self._size -> Int, the number of nodes in the hierarchy\n        \"\"\"", "\n", "if", "getattr", "(", "self", ",", "'_size'", ")", ":", "\n", "            ", "return", "self", ".", "_size", "\n", "", "count", "=", "1", "\n", "for", "i", "in", "range", "(", "self", ".", "num_children", ")", ":", "\n", "            ", "count", "+=", "self", ".", "children", "[", "i", "]", ".", "size", "(", ")", "\n", "", "self", ".", "_size", "=", "count", "\n", "return", "self", ".", "_size", "\n", "\n"]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.structure_model.tree.Tree.depth": [[39, 51], ["tree.Tree.parent.depth"], "methods", ["home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.structure_model.tree.Tree.depth"], ["", "def", "depth", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        :return: int, the depth of curent node in the hierarchy\n        \"\"\"", "\n", "# if getattr(self, '_depth'):", "\n", "#     return self._depth", "\n", "count", "=", "0", "\n", "if", "self", ".", "parent", "is", "not", "None", ":", "\n", "            ", "self", ".", "_depth", "=", "self", ".", "parent", ".", "depth", "(", ")", "+", "1", "\n", "", "else", ":", "\n", "            ", "self", ".", "_depth", "=", "count", "\n", "", "return", "self", ".", "_depth", "\n", "", "", ""]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.data.preprocess_rcv1_test.clean_str": [[37, 59], ["re.sub.strip().strip", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub.strip().lower", "re.sub.strip", "re.sub.strip"], "function", ["None"], ["def", "clean_str", "(", "string", ")", ":", "\n", "    ", "\"\"\"\n    Tokenization/string cleaning for all datasets except for SST.\n    Original taken from https://github.com/yoonkim/CNN_sentence/blob/master/process_data.py\n    \"\"\"", "\n", "string", "=", "string", ".", "strip", "(", ")", ".", "strip", "(", "'\"'", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"[^A-Za-z0-9(),!?\\.\\'\\`]\"", ",", "\" \"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\'s\"", ",", "\" \\'s\"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\'ve\"", ",", "\" \\'ve\"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"n\\'t\"", ",", "\" n\\'t\"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\'re\"", ",", "\" \\'re\"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\'d\"", ",", "\" \\'d\"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\'ll\"", ",", "\" \\'ll\"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\",\"", ",", "\" \"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\.\"", ",", "\" \"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\\"\"", ",", "\" \"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"!\"", ",", "\" \"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\(\"", ",", "\" \"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\)\"", ",", "\" \"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\?\"", ",", "\" \"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\s{2,}\"", ",", "\" \"", ",", "string", ")", "\n", "return", "string", ".", "strip", "(", ")", ".", "lower", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.data.preprocess_rcv1_test.get_doc_ids_v2": [[71, 78], ["pathlib.Path", "pathlib.Path.open", "i_f.readlines"], "function", ["None"], ["def", "get_doc_ids_v2", "(", ")", ":", "\n", "    ", "file", "=", "Path", "(", "'rcv1/rcv1v2-ids.dat'", ")", "\n", "with", "file", ".", "open", "(", "'rt'", ",", "encoding", "=", "'ascii'", ")", "as", "i_f", ":", "\n", "        ", "doc_ids", "=", "i_f", ".", "readlines", "(", ")", "\n", "", "doc_ids", "=", "[", "item", "[", ":", "-", "1", "]", "for", "item", "in", "doc_ids", "]", "\n", "#logging.info('There are %s docs in RCV1-v2\\n', len(doc_ids))", "\n", "return", "doc_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.data.preprocess_rcv1_test.get_doc_topics_mapping": [[80, 91], ["pathlib.Path", "collections.defaultdict", "pathlib.Path.open", "i_f.readlines", "item.split", "doc_topics[].append"], "function", ["None"], ["", "def", "get_doc_topics_mapping", "(", ")", ":", "\n", "    ", "file", "=", "Path", "(", "'rcv1/rcv1-v2.topics.qrels'", ")", "\n", "with", "file", ".", "open", "(", "'rt'", ",", "encoding", "=", "'ascii'", ")", "as", "i_f", ":", "\n", "        ", "lines", "=", "i_f", ".", "readlines", "(", ")", "\n", "", "lines", "=", "[", "item", "[", ":", "-", "1", "]", "for", "item", "in", "lines", "]", "\n", "doc_topics", "=", "defaultdict", "(", "list", ")", "\n", "for", "item", "in", "lines", ":", "\n", "        ", "topic", ",", "doc_id", ",", "_", "=", "item", ".", "split", "(", ")", "\n", "doc_topics", "[", "doc_id", "]", ".", "append", "(", "topic", ")", "\n", "#logging.info('Mapping dictionary contains %s docs\\n', len(doc_topics))", "\n", "", "return", "doc_topics", "\n", "\n"]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.data.preprocess_rcv1_test.combine_text_and_label": [[93, 119], ["open", "open.readlines", "open.close", "print", "open", "open.close", "line.split.rstrip", "len", "json.dumps", "open.write", "line.split.split", "total_len.append", "data.append", "len", "len", "doc.split", "len"], "function", ["None"], ["", "def", "combine_text_and_label", "(", "docid2topics", ")", ":", "\n", "    ", "f", "=", "open", "(", "FILE_DIR", ",", "'r'", ",", "encoding", "=", "'utf8'", ")", "\n", "origin_txt", "=", "f", ".", "readlines", "(", ")", "\n", "f", ".", "close", "(", ")", "\n", "data", "=", "[", "]", "\n", "label_check", "=", "{", "}", "\n", "for", "line", "in", "origin_txt", ":", "\n", "        ", "line", "=", "line", ".", "rstrip", "(", "'\\n'", ")", "\n", "if", "line", "!=", "''", ":", "\n", "            ", "line", "=", "line", ".", "split", "(", "'\\t'", ")", "\n", "assert", "len", "(", "line", ")", "==", "2", "\n", "docid", "=", "line", "[", "0", "]", "\n", "doc", "=", "line", "[", "1", "]", "\n", "sample_label", "=", "docid2topics", "[", "docid", "]", "\n", "#doc = clean_str(doc)", "\n", "doc", "=", "[", "word", "for", "word", "in", "doc", ".", "split", "(", ")", "if", "word", "not", "in", "english_stopwords", "and", "len", "(", "word", ")", ">", "1", "]", "\n", "sample_text", "=", "doc", "\n", "total_len", ".", "append", "(", "len", "(", "sample_text", ")", ")", "\n", "data", ".", "append", "(", "{", "'label'", ":", "sample_label", ",", "'token'", ":", "sample_text", "}", ")", "\n", "\n", "", "", "print", "(", "len", "(", "data", ")", ")", "\n", "f", "=", "open", "(", "'rcv1_test_total.json'", ",", "'w'", ")", "\n", "for", "line", "in", "data", ":", "\n", "        ", "line", "=", "json", ".", "dumps", "(", "line", ")", "\n", "f", ".", "write", "(", "line", "+", "'\\n'", ")", "\n", "", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.data.preprocess_rcv1_test.split_train_dev_test": [[121, 147], ["open", "open.readlines", "open.close", "len", "numpy.array", "numpy.random.shuffle", "sklearn.model_selection.train_test_split", "sklearn.model_selection.train_test_split", "list", "list", "list", "open", "open.writelines", "open.close", "open", "open.writelines", "open.close", "open", "open.writelines", "open.close", "print", "len", "len", "len", "range"], "function", ["None"], ["", "def", "split_train_dev_test", "(", ")", ":", "\n", "    ", "f", "=", "open", "(", "'rcv1_test_total.json'", ",", "'r'", ")", "\n", "data", "=", "f", ".", "readlines", "(", ")", "\n", "f", ".", "close", "(", ")", "\n", "data_len", "=", "len", "(", "data", ")", "\n", "id", "=", "[", "i", "for", "i", "in", "range", "(", "data_len", ")", "]", "\n", "np_data", "=", "np", ".", "array", "(", "data", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "id", ")", "\n", "np_data", "=", "np_data", "[", "id", "]", "\n", "train", ",", "test", "=", "train_test_split", "(", "np_data", ",", "test_size", "=", "0.2", ",", "random_state", "=", "0", ")", "\n", "train", ",", "val", "=", "train_test_split", "(", "train", ",", "test_size", "=", "0.1", ",", "random_state", "=", "0", ")", "\n", "train", "=", "list", "(", "train", ")", "\n", "val", "=", "list", "(", "val", ")", "\n", "test", "=", "list", "(", "test", ")", "\n", "f", "=", "open", "(", "'rcv1_onlytrain_train.json'", ",", "'w'", ")", "\n", "f", ".", "writelines", "(", "train", ")", "\n", "f", ".", "close", "(", ")", "\n", "f", "=", "open", "(", "'rcv1_onlytrain_test.json'", ",", "'w'", ")", "\n", "f", ".", "writelines", "(", "test", ")", "\n", "f", ".", "close", "(", ")", "\n", "f", "=", "open", "(", "'rcv1_onlytrain_val.json'", ",", "'w'", ")", "\n", "f", ".", "writelines", "(", "val", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "print", "(", "len", "(", "train", ")", ",", "len", "(", "val", ")", ",", "len", "(", "test", ")", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.data.preprocess_rcv1_test.get_hierarchy": [[149, 172], ["open", "open.readlines", "open.close", "open", "label_hierarchy.keys", "open.close", "json.loads.rstrip", "json.loads", "json.loads.extend", "open.write", "label_hierarchy[].append", "label_hierarchy[].append"], "function", ["None"], ["", "def", "get_hierarchy", "(", ")", ":", "\n", "    ", "f", "=", "open", "(", "'rcv1_onlytrain_total.json'", ",", "'r'", ")", "\n", "data", "=", "f", ".", "readlines", "(", ")", "\n", "f", ".", "close", "(", ")", "\n", "label_hierarchy", "=", "{", "}", "\n", "label_hierarchy", "[", "'Root'", "]", "=", "[", "]", "\n", "for", "line", "in", "data", ":", "\n", "        ", "line", "=", "line", ".", "rstrip", "(", "'\\n'", ")", "\n", "line", "=", "json", ".", "loads", "(", "line", ")", "\n", "line", "=", "line", "[", "'label'", "]", "\n", "if", "line", "[", "0", "]", "in", "label_hierarchy", ":", "\n", "            ", "if", "line", "[", "1", "]", "not", "in", "label_hierarchy", "[", "line", "[", "0", "]", "]", ":", "\n", "                ", "label_hierarchy", "[", "line", "[", "0", "]", "]", ".", "append", "(", "line", "[", "1", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "label_hierarchy", "[", "'Root'", "]", ".", "append", "(", "line", "[", "0", "]", ")", "\n", "label_hierarchy", "[", "line", "[", "0", "]", "]", "=", "[", "line", "[", "1", "]", "]", "\n", "", "", "f", "=", "open", "(", "'rcv1_onlytrain.taxonomy'", ",", "'w'", ")", "\n", "for", "i", "in", "label_hierarchy", ".", "keys", "(", ")", ":", "\n", "        ", "line", "=", "[", "i", "]", "\n", "line", ".", "extend", "(", "label_hierarchy", "[", "i", "]", ")", "\n", "line", "=", "'\\t'", ".", "join", "(", "line", ")", "+", "'\\n'", "\n", "f", ".", "write", "(", "line", ")", "\n", "", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.data.preprocess_wos.clean_str": [[35, 57], ["re.sub.strip().strip", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub.strip().lower", "re.sub.strip", "re.sub.strip"], "function", ["None"], ["def", "clean_str", "(", "string", ")", ":", "\n", "    ", "\"\"\"\n    Tokenization/string cleaning for all datasets except for SST.\n    Original taken from https://github.com/yoonkim/CNN_sentence/blob/master/process_data.py\n    \"\"\"", "\n", "string", "=", "string", ".", "strip", "(", ")", ".", "strip", "(", "'\"'", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"[^A-Za-z0-9(),!?\\.\\'\\`]\"", ",", "\" \"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\'s\"", ",", "\" \\'s\"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\'ve\"", ",", "\" \\'ve\"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"n\\'t\"", ",", "\" n\\'t\"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\'re\"", ",", "\" \\'re\"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\'d\"", ",", "\" \\'d\"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\'ll\"", ",", "\" \\'ll\"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\",\"", ",", "\" \"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\.\"", ",", "\" \"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\\"\"", ",", "\" \"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"!\"", ",", "\" \"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\(\"", ",", "\" \"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\)\"", ",", "\" \"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\?\"", ",", "\" \"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\s{2,}\"", ",", "\" \"", ",", "string", ")", "\n", "return", "string", ".", "strip", "(", ")", ".", "lower", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.data.preprocess_wos.get_data_from_meta": [[69, 123], ["open", "open.readlines", "open.close", "print", "label_check.keys", "print", "print", "open", "open.close", "json.dumps.rstrip", "json.dumps.split", "preprocess_wos.clean_str", "total_len.append", "data.append", "len", "json.dumps", "open.write", "len", "line[].rstrip().lstrip", "line[].rstrip().lstrip", "str", "label_check.keys", "word.lower", "len", "len", "print", "label_check.keys", "str", "label_check[].append", "clean_str.split", "len", "line[].rstrip", "line[].rstrip", "len"], "function", ["home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.data.preprocess_rcv1_train.clean_str"], ["def", "get_data_from_meta", "(", ")", ":", "\n", "    ", "f", "=", "open", "(", "FILE_DIR", ",", "'r'", ",", "encoding", "=", "'utf8'", ")", "\n", "\n", "origin_txt", "=", "f", ".", "readlines", "(", ")", "\n", "f", ".", "close", "(", ")", "\n", "data", "=", "[", "]", "\n", "label_check", "=", "{", "}", "\n", "for", "line", "in", "origin_txt", "[", "1", ":", "]", ":", "\n", "        ", "line", "=", "line", ".", "rstrip", "(", "'\\n'", ")", "\n", "line", "=", "line", ".", "split", "(", "'\\t'", ")", "\n", "assert", "len", "(", "line", ")", "==", "7", "\n", "sample_label", "=", "[", "line", "[", "3", "]", ".", "rstrip", "(", ")", ".", "lstrip", "(", ")", ",", "line", "[", "4", "]", ".", "rstrip", "(", ")", ".", "lstrip", "(", ")", "]", "\n", "code", "=", "str", "(", "line", "[", "0", "]", ")", "+", "'-'", "+", "str", "(", "line", "[", "1", "]", ")", "\n", "\n", "if", "code", "in", "label_check", ".", "keys", "(", ")", ":", "\n", "            ", "if", "sample_label", "[", "1", "]", "not", "in", "label_check", "[", "code", "]", ":", "\n", "                ", "label_check", "[", "code", "]", ".", "append", "(", "sample_label", "[", "1", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "label_check", "[", "code", "]", "=", "[", "sample_label", "[", "1", "]", "]", "\n", "", "for", "i", "in", "label_check", "[", "code", "]", ":", "\n", "            ", "if", "stats", "[", "sample_label", "[", "0", "]", "]", "[", "i", "]", ">", "stats", "[", "sample_label", "[", "0", "]", "]", "[", "sample_label", "[", "1", "]", "]", ":", "\n", "                ", "sample_label", "[", "1", "]", "=", "i", "\n", "break", "\n", "# if sample_label[1] == 'Underwater Windmill':", "\n", "#     sample_label[1] = 'Water Pollution'", "\n", "# if sample_label[1] == 'Bamboo as a Building Material':", "\n", "#     sample_label[1] = 'Water Pollution'", "\n", "# if sample_label[1] == 'Nano Concrete':", "\n", "#     sample_label[1] = 'Smart Material'", "\n", "# if sample_label[1] == 'Highway Network System':", "\n", "#     sample_label[1] = 'Geotextile'", "\n", "# if sample_label[1] == 'Transparent Concrete':", "\n", "#     sample_label[1] = 'Smart Material'", "\n", "# if sample_label[1] == 'Outdoor Health':", "\n", "#     sample_label[1] = ''", "\n", "", "", "doc", "=", "line", "[", "6", "]", "\n", "doc", "=", "clean_str", "(", "doc", ")", "\n", "doc", "=", "[", "word", ".", "lower", "(", ")", "for", "word", "in", "doc", ".", "split", "(", ")", "if", "word", "not", "in", "english_stopwords", "and", "len", "(", "word", ")", ">", "1", "]", "\n", "sample_text", "=", "doc", "\n", "total_len", ".", "append", "(", "len", "(", "sample_text", ")", ")", "\n", "data", ".", "append", "(", "{", "'token'", ":", "sample_text", ",", "'label'", ":", "sample_label", ",", "'doc_topic'", ":", "[", "]", ",", "'doc_keyword'", ":", "[", "]", "}", ")", "\n", "", "print", "(", "label_check", ")", "\n", "c", "=", "0", "\n", "for", "i", "in", "label_check", ".", "keys", "(", ")", ":", "\n", "        ", "if", "len", "(", "label_check", "[", "i", "]", ")", ">", "1", ":", "\n", "            ", "print", "(", "i", ",", "label_check", "[", "i", "]", ")", "\n", "c", "+=", "len", "(", "label_check", "[", "i", "]", ")", "-", "1", "\n", "", "", "print", "(", "c", ")", "\n", "print", "(", "len", "(", "label_check", ".", "keys", "(", ")", ")", ")", "\n", "f", "=", "open", "(", "'wos_total.json'", ",", "'w'", ")", "\n", "for", "line", "in", "data", ":", "\n", "        ", "line", "=", "json", ".", "dumps", "(", "line", ")", "\n", "f", ".", "write", "(", "line", "+", "'\\n'", ")", "\n", "", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.data.preprocess_wos.split_train_dev_test": [[125, 150], ["open", "open.readlines", "open.close", "numpy.array", "numpy.random.shuffle", "sklearn.model_selection.train_test_split", "sklearn.model_selection.train_test_split", "list", "list", "list", "open", "open.writelines", "open.close", "open", "open.writelines", "open.close", "open", "open.writelines", "open.close", "print", "len", "len", "len", "range"], "function", ["None"], ["", "def", "split_train_dev_test", "(", ")", ":", "\n", "    ", "f", "=", "open", "(", "'wos_total.json'", ",", "'r'", ")", "\n", "data", "=", "f", ".", "readlines", "(", ")", "\n", "f", ".", "close", "(", ")", "\n", "id", "=", "[", "i", "for", "i", "in", "range", "(", "46985", ")", "]", "\n", "np_data", "=", "np", ".", "array", "(", "data", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "id", ")", "\n", "np_data", "=", "np_data", "[", "id", "]", "\n", "train", ",", "test", "=", "train_test_split", "(", "np_data", ",", "test_size", "=", "0.2", ",", "random_state", "=", "0", ")", "\n", "train", ",", "val", "=", "train_test_split", "(", "train", ",", "test_size", "=", "0.2", ",", "random_state", "=", "0", ")", "\n", "train", "=", "list", "(", "train", ")", "\n", "val", "=", "list", "(", "val", ")", "\n", "test", "=", "list", "(", "test", ")", "\n", "f", "=", "open", "(", "'wos_train.json'", ",", "'w'", ")", "\n", "f", ".", "writelines", "(", "train", ")", "\n", "f", ".", "close", "(", ")", "\n", "f", "=", "open", "(", "'wos_test.json'", ",", "'w'", ")", "\n", "f", ".", "writelines", "(", "test", ")", "\n", "f", ".", "close", "(", ")", "\n", "f", "=", "open", "(", "'wos_val.json'", ",", "'w'", ")", "\n", "f", ".", "writelines", "(", "val", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "print", "(", "len", "(", "train", ")", ",", "len", "(", "val", ")", ",", "len", "(", "test", ")", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.data.preprocess_wos.get_hierarchy": [[152, 175], ["open", "open.readlines", "open.close", "open", "label_hierarchy.keys", "open.close", "json.loads.rstrip", "json.loads", "json.loads.extend", "open.write", "label_hierarchy[].append", "label_hierarchy[].append"], "function", ["None"], ["", "def", "get_hierarchy", "(", ")", ":", "\n", "    ", "f", "=", "open", "(", "'wos_total.json'", ",", "'r'", ")", "\n", "data", "=", "f", ".", "readlines", "(", ")", "\n", "f", ".", "close", "(", ")", "\n", "label_hierarchy", "=", "{", "}", "\n", "label_hierarchy", "[", "'Root'", "]", "=", "[", "]", "\n", "for", "line", "in", "data", ":", "\n", "        ", "line", "=", "line", ".", "rstrip", "(", "'\\n'", ")", "\n", "line", "=", "json", ".", "loads", "(", "line", ")", "\n", "line", "=", "line", "[", "'label'", "]", "\n", "if", "line", "[", "0", "]", "in", "label_hierarchy", ":", "\n", "            ", "if", "line", "[", "1", "]", "not", "in", "label_hierarchy", "[", "line", "[", "0", "]", "]", ":", "\n", "                ", "label_hierarchy", "[", "line", "[", "0", "]", "]", ".", "append", "(", "line", "[", "1", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "label_hierarchy", "[", "'Root'", "]", ".", "append", "(", "line", "[", "0", "]", ")", "\n", "label_hierarchy", "[", "line", "[", "0", "]", "]", "=", "[", "line", "[", "1", "]", "]", "\n", "", "", "f", "=", "open", "(", "'wos.taxonomy'", ",", "'w'", ")", "\n", "for", "i", "in", "label_hierarchy", ".", "keys", "(", ")", ":", "\n", "        ", "line", "=", "[", "i", "]", "\n", "line", ".", "extend", "(", "label_hierarchy", "[", "i", "]", ")", "\n", "line", "=", "'\\t'", ".", "join", "(", "line", ")", "+", "'\\n'", "\n", "f", ".", "write", "(", "line", ")", "\n", "", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.data.preprocess_rcv1_train.clean_str": [[37, 59], ["re.sub.strip().strip", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub.strip().lower", "re.sub.strip", "re.sub.strip"], "function", ["None"], ["def", "clean_str", "(", "string", ")", ":", "\n", "    ", "\"\"\"\n    Tokenization/string cleaning for all datasets except for SST.\n    Original taken from https://github.com/yoonkim/CNN_sentence/blob/master/process_data.py\n    \"\"\"", "\n", "string", "=", "string", ".", "strip", "(", ")", ".", "strip", "(", "'\"'", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"[^A-Za-z0-9(),!?\\.\\'\\`]\"", ",", "\" \"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\'s\"", ",", "\" \\'s\"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\'ve\"", ",", "\" \\'ve\"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"n\\'t\"", ",", "\" n\\'t\"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\'re\"", ",", "\" \\'re\"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\'d\"", ",", "\" \\'d\"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\'ll\"", ",", "\" \\'ll\"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\",\"", ",", "\" \"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\.\"", ",", "\" \"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\\"\"", ",", "\" \"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"!\"", ",", "\" \"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\(\"", ",", "\" \"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\)\"", ",", "\" \"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\?\"", ",", "\" \"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\s{2,}\"", ",", "\" \"", ",", "string", ")", "\n", "return", "string", ".", "strip", "(", ")", ".", "lower", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.data.preprocess_rcv1_train.get_doc_ids_v2": [[71, 78], ["pathlib.Path", "pathlib.Path.open", "i_f.readlines"], "function", ["None"], ["def", "get_doc_ids_v2", "(", ")", ":", "\n", "    ", "file", "=", "Path", "(", "'rcv1/rcv1v2-ids.dat'", ")", "\n", "with", "file", ".", "open", "(", "'rt'", ",", "encoding", "=", "'ascii'", ")", "as", "i_f", ":", "\n", "        ", "doc_ids", "=", "i_f", ".", "readlines", "(", ")", "\n", "", "doc_ids", "=", "[", "item", "[", ":", "-", "1", "]", "for", "item", "in", "doc_ids", "]", "\n", "#logging.info('There are %s docs in RCV1-v2\\n', len(doc_ids))", "\n", "return", "doc_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.data.preprocess_rcv1_train.get_doc_topics_mapping": [[80, 91], ["pathlib.Path", "collections.defaultdict", "pathlib.Path.open", "i_f.readlines", "item.split", "doc_topics[].append"], "function", ["None"], ["", "def", "get_doc_topics_mapping", "(", ")", ":", "\n", "    ", "file", "=", "Path", "(", "'rcv1/rcv1-v2.topics.qrels'", ")", "\n", "with", "file", ".", "open", "(", "'rt'", ",", "encoding", "=", "'ascii'", ")", "as", "i_f", ":", "\n", "        ", "lines", "=", "i_f", ".", "readlines", "(", ")", "\n", "", "lines", "=", "[", "item", "[", ":", "-", "1", "]", "for", "item", "in", "lines", "]", "\n", "doc_topics", "=", "defaultdict", "(", "list", ")", "\n", "for", "item", "in", "lines", ":", "\n", "        ", "topic", ",", "doc_id", ",", "_", "=", "item", ".", "split", "(", ")", "\n", "doc_topics", "[", "doc_id", "]", ".", "append", "(", "topic", ")", "\n", "#logging.info('Mapping dictionary contains %s docs\\n', len(doc_topics))", "\n", "", "return", "doc_topics", "\n", "\n"]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.data.preprocess_rcv1_train.combine_text_and_label": [[93, 118], ["open", "open.readlines", "open.close", "open", "open.close", "line.split.rstrip", "json.dumps", "open.write", "line.split.split", "total_len.append", "data.append", "len", "len", "doc.split", "len"], "function", ["None"], ["", "def", "combine_text_and_label", "(", "docid2topics", ")", ":", "\n", "    ", "f", "=", "open", "(", "FILE_DIR", ",", "'r'", ",", "encoding", "=", "'utf8'", ")", "\n", "origin_txt", "=", "f", ".", "readlines", "(", ")", "\n", "f", ".", "close", "(", ")", "\n", "data", "=", "[", "]", "\n", "label_check", "=", "{", "}", "\n", "for", "line", "in", "origin_txt", ":", "\n", "        ", "line", "=", "line", ".", "rstrip", "(", "'\\n'", ")", "\n", "if", "line", "!=", "''", ":", "\n", "            ", "line", "=", "line", ".", "split", "(", "'\\t'", ")", "\n", "assert", "len", "(", "line", ")", "==", "2", "\n", "docid", "=", "line", "[", "0", "]", "\n", "doc", "=", "line", "[", "1", "]", "\n", "sample_label", "=", "docid2topics", "[", "docid", "]", "\n", "#doc = clean_str(doc)", "\n", "doc", "=", "[", "word", "for", "word", "in", "doc", ".", "split", "(", ")", "if", "word", "not", "in", "english_stopwords", "and", "len", "(", "word", ")", ">", "1", "]", "\n", "sample_text", "=", "doc", "\n", "total_len", ".", "append", "(", "len", "(", "sample_text", ")", ")", "\n", "data", ".", "append", "(", "{", "'label'", ":", "sample_label", ",", "'token'", ":", "sample_text", "}", ")", "\n", "\n", "", "", "f", "=", "open", "(", "'rcv1_onlytrain_total.json'", ",", "'w'", ")", "\n", "for", "line", "in", "data", ":", "\n", "        ", "line", "=", "json", ".", "dumps", "(", "line", ")", "\n", "f", ".", "write", "(", "line", "+", "'\\n'", ")", "\n", "", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.data.preprocess_rcv1_train.split_train_dev_test": [[120, 146], ["open", "open.readlines", "open.close", "len", "numpy.array", "numpy.random.shuffle", "sklearn.model_selection.train_test_split", "list", "list", "open", "open.writelines", "open.close", "open", "open.writelines", "open.close", "print", "len", "len", "range"], "function", ["None"], ["", "def", "split_train_dev_test", "(", ")", ":", "\n", "    ", "f", "=", "open", "(", "'rcv1_onlytrain_total.json'", ",", "'r'", ")", "\n", "data", "=", "f", ".", "readlines", "(", ")", "\n", "f", ".", "close", "(", ")", "\n", "data_len", "=", "len", "(", "data", ")", "\n", "id", "=", "[", "i", "for", "i", "in", "range", "(", "data_len", ")", "]", "\n", "np_data", "=", "np", ".", "array", "(", "data", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "id", ")", "\n", "np_data", "=", "np_data", "[", "id", "]", "\n", "train", ",", "val", "=", "train_test_split", "(", "np_data", ",", "test_size", "=", "0.1", ",", "random_state", "=", "0", ")", "\n", "#train, val = train_test_split(train, test_size=0.1, random_state=0)", "\n", "train", "=", "list", "(", "train", ")", "\n", "val", "=", "list", "(", "val", ")", "\n", "#test = list(test)", "\n", "f", "=", "open", "(", "'rcv1_onlytrain_train.json'", ",", "'w'", ")", "\n", "f", ".", "writelines", "(", "train", ")", "\n", "f", ".", "close", "(", ")", "\n", "#f = open('rcv1_onlytrain_test.json', 'w')", "\n", "#f.writelines(test)", "\n", "#f.close()", "\n", "f", "=", "open", "(", "'rcv1_onlytrain_val.json'", ",", "'w'", ")", "\n", "f", ".", "writelines", "(", "val", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "print", "(", "len", "(", "train", ")", ",", "len", "(", "val", ")", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.RingBDStack_HTCInfoMax.data.preprocess_rcv1_train.get_hierarchy": [[148, 171], ["open", "open.readlines", "open.close", "open", "label_hierarchy.keys", "open.close", "json.loads.rstrip", "json.loads", "json.loads.extend", "open.write", "label_hierarchy[].append", "label_hierarchy[].append"], "function", ["None"], ["", "def", "get_hierarchy", "(", ")", ":", "\n", "    ", "f", "=", "open", "(", "'rcv1_onlytrain_total.json'", ",", "'r'", ")", "\n", "data", "=", "f", ".", "readlines", "(", ")", "\n", "f", ".", "close", "(", ")", "\n", "label_hierarchy", "=", "{", "}", "\n", "label_hierarchy", "[", "'Root'", "]", "=", "[", "]", "\n", "for", "line", "in", "data", ":", "\n", "        ", "line", "=", "line", ".", "rstrip", "(", "'\\n'", ")", "\n", "line", "=", "json", ".", "loads", "(", "line", ")", "\n", "line", "=", "line", "[", "'label'", "]", "\n", "if", "line", "[", "0", "]", "in", "label_hierarchy", ":", "\n", "            ", "if", "line", "[", "1", "]", "not", "in", "label_hierarchy", "[", "line", "[", "0", "]", "]", ":", "\n", "                ", "label_hierarchy", "[", "line", "[", "0", "]", "]", ".", "append", "(", "line", "[", "1", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "label_hierarchy", "[", "'Root'", "]", ".", "append", "(", "line", "[", "0", "]", ")", "\n", "label_hierarchy", "[", "line", "[", "0", "]", "]", "=", "[", "line", "[", "1", "]", "]", "\n", "", "", "f", "=", "open", "(", "'rcv1_onlytrain.taxonomy'", ",", "'w'", ")", "\n", "for", "i", "in", "label_hierarchy", ".", "keys", "(", ")", ":", "\n", "        ", "line", "=", "[", "i", "]", "\n", "line", ".", "extend", "(", "label_hierarchy", "[", "i", "]", ")", "\n", "line", "=", "'\\t'", ".", "join", "(", "line", ")", "+", "'\\n'", "\n", "f", ".", "write", "(", "line", ")", "\n", "", "f", ".", "close", "(", ")", "\n", "\n"]]}