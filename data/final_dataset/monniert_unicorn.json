{"home.repos.pwc.inspect_result.monniert_unicorn.src.trainer.Trainer.__init__": [[33, 73], ["utils.use_seed", "utils.path_mkdir", "utils.pytorch.get_torch_device", "dataset.create_train_val_test_loader", "model.create_model().to", "optimizer.create_optimizer", "scheduler.create_scheduler", "trainer.Trainer.load_from", "utils.logger.print_log", "cfg[].get", "utils.metrics.Metrics", "utils.metrics.Metrics", "utils.metrics.MeshEvaluator", "toolz.valmap", "utils.image.ImageLogger", "cfg[].get", "len", "trainer.Trainer.scheduler.get_last_lr", "model.DDPCust", "hasattr", "next", "utils.plot.Visualizer", "utils.plot.Visualizer", "model.create_model", "range", "iter", "cfg[].get", "len", "t.to", "len"], "methods", ["home.repos.pwc.inspect_result.monniert_unicorn.utils.__init__.path_mkdir", "home.repos.pwc.inspect_result.monniert_unicorn.utils.pytorch.get_torch_device", "home.repos.pwc.inspect_result.monniert_unicorn.dataset.__init__.create_train_val_test_loader", "home.repos.pwc.inspect_result.monniert_unicorn.model.__init__.DDPCust.to", "home.repos.pwc.inspect_result.monniert_unicorn.src.optimizer.create_optimizer", "home.repos.pwc.inspect_result.monniert_unicorn.src.scheduler.create_scheduler", "home.repos.pwc.inspect_result.monniert_unicorn.src.trainer.Trainer.load_from", "home.repos.pwc.inspect_result.monniert_unicorn.utils.logger.print_log", "home.repos.pwc.inspect_result.monniert_unicorn.model.__init__.create_model", "home.repos.pwc.inspect_result.monniert_unicorn.model.__init__.DDPCust.to"], ["@", "use_seed", "(", ")", "\n", "def", "__init__", "(", "self", ",", "cfg", ",", "run_dir", ",", "gpu", "=", "None", ",", "rank", "=", "None", ",", "world_size", "=", "None", ")", ":", "\n", "        ", "self", ".", "is_master", "=", "gpu", "is", "None", "or", "rank", "==", "0", "\n", "if", "not", "self", ".", "is_master", ":", "# turning off logging and eval", "\n", "            ", "Metrics", ".", "log_data", ",", "ImageLogger", ".", "log_data", ",", "Verbose", ".", "mute", "=", "False", ",", "False", ",", "True", "\n", "\n", "", "self", ".", "run_dir", "=", "path_mkdir", "(", "run_dir", ")", "\n", "self", ".", "device", "=", "get_torch_device", "(", "gpu", ",", "verbose", "=", "True", ")", "\n", "self", ".", "train_loader", ",", "self", ".", "val_loader", ",", "self", ".", "test_loader", "=", "create_train_val_test_loader", "(", "cfg", ",", "rank", ",", "world_size", ")", "\n", "self", ".", "model", "=", "create_model", "(", "cfg", ",", "self", ".", "train_loader", ".", "dataset", ".", "img_size", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "optimizer", "=", "create_optimizer", "(", "cfg", ",", "self", ".", "model", ")", "\n", "self", ".", "scheduler", "=", "create_scheduler", "(", "cfg", ",", "self", ".", "optimizer", ")", "\n", "self", ".", "epoch_start", ",", "self", ".", "batch_start", "=", "1", ",", "1", "\n", "self", ".", "n_epoches", ",", "self", ".", "n_batches", "=", "cfg", "[", "\"training\"", "]", ".", "get", "(", "\"n_epoches\"", ")", ",", "len", "(", "self", ".", "train_loader", ")", "\n", "self", ".", "cur_lr", "=", "self", ".", "scheduler", ".", "get_last_lr", "(", ")", "[", "0", "]", "\n", "self", ".", "multi_gpu", "=", "False", "\n", "if", "gpu", "is", "not", "None", ":", "\n", "            ", "self", ".", "model", "=", "DDPCust", "(", "self", ".", "model", ",", "device_ids", "=", "[", "gpu", "]", ",", "output_device", "=", "gpu", ")", "\n", "self", ".", "multi_gpu", "=", "True", "\n", "", "self", ".", "load_from", "(", "cfg", ")", "\n", "print_log", "(", "f\"Training state: epoch={self.epoch_start}, batch={self.batch_start}, lr={self.cur_lr}\"", ")", "\n", "\n", "append", "=", "self", ".", "epoch_start", ">", "1", "\n", "self", ".", "train_stat_interval", "=", "cfg", "[", "\"training\"", "]", "[", "\"train_stat_interval\"", "]", "\n", "self", ".", "val_stat_interval", "=", "cfg", "[", "\"training\"", "]", "[", "\"val_stat_interval\"", "]", "\n", "self", ".", "save_epoches", "=", "cfg", "[", "\"training\"", "]", ".", "get", "(", "\"save_epoches\"", ",", "[", "]", ")", "\n", "names", "=", "self", ".", "model", ".", "loss_names", "if", "hasattr", "(", "self", ".", "model", ",", "'loss_names'", ")", "else", "[", "'loss'", "]", "\n", "names", "+=", "[", "f'prop_head{k}'", "for", "k", "in", "range", "(", "len", "(", "self", ".", "model", ".", "prop_heads", ")", ")", "]", "\n", "self", ".", "train_metrics", "=", "Metrics", "(", "*", "[", "'time/img'", "]", "+", "names", ",", "log_file", "=", "self", ".", "run_dir", "/", "'train_metrics.tsv'", ",", "append", "=", "append", ")", "\n", "self", ".", "val_metrics", "=", "Metrics", "(", "'loss_val'", ",", "log_file", "=", "self", ".", "run_dir", "/", "'val_metrics.tsv'", ",", "append", "=", "append", ")", "\n", "self", ".", "val_scores", "=", "MeshEvaluator", "(", "[", "'chamfer-L1'", ",", "'chamfer-L1-ICP'", "]", ",", "self", ".", "run_dir", "/", "'val_scores.tsv'", ",", "\n", "fast_cpu", "=", "True", ",", "append", "=", "append", ")", "\n", "samples", "=", "next", "(", "iter", "(", "self", ".", "val_loader", "if", "len", "(", "self", ".", "val_loader", ")", ">", "0", "else", "self", ".", "train_loader", ")", ")", "[", "0", "]", "\n", "self", ".", "viz_samples", "=", "valmap", "(", "lambda", "t", ":", "t", ".", "to", "(", "self", ".", "device", ")", "[", ":", "N_VIZ_SAMPLES", "]", ",", "samples", ")", "\n", "self", ".", "rec_logger", "=", "ImageLogger", "(", "self", ".", "run_dir", "/", "'reconstructions'", ",", "target_images", "=", "self", ".", "viz_samples", ")", "\n", "if", "self", ".", "with_training", ":", "# no visualizer if eval only", "\n", "            ", "viz_port", "=", "cfg", "[", "\"training\"", "]", ".", "get", "(", "'visualizer_port'", ")", "if", "self", ".", "is_master", "else", "None", "\n", "self", ".", "visualizer", "=", "Visualizer", "(", "viz_port", ",", "self", ".", "run_dir", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "visualizer", "=", "Visualizer", "(", "None", ",", "self", ".", "run_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.src.trainer.Trainer.with_training": [[74, 77], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "with_training", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "epoch_start", "<", "self", ".", "n_epoches", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.src.trainer.Trainer.dataset_name": [[78, 81], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "dataset_name", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "train_loader", ".", "dataset", ".", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.src.trainer.Trainer.load_from": [[82, 109], ["cfg[].get", "cfg[].get", "utils.path_exists", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "utils.logger.print_log", "trainer.Trainer.model.module.load_state_dict", "trainer.Trainer.model.load_state_dict", "trainer.Trainer.model.set_cur_epoch", "utils.logger.print_log", "toolz.keyfilter", "trainer.Trainer.scheduler.load_state_dict", "utils.logger.print_log", "trainer.Trainer.optimizer.load_state_dict", "trainer.Trainer.scheduler.get_last_lr", "utils.logger.print_warning", "trainer.Trainer.scheduler.state_dict"], "methods", ["home.repos.pwc.inspect_result.monniert_unicorn.utils.__init__.path_exists", "home.repos.pwc.inspect_result.monniert_unicorn.utils.logger.print_log", "home.repos.pwc.inspect_result.monniert_unicorn.model.unicorn.Unicorn.load_state_dict", "home.repos.pwc.inspect_result.monniert_unicorn.model.unicorn.Unicorn.load_state_dict", "home.repos.pwc.inspect_result.monniert_unicorn.model.unicorn.Unicorn.set_cur_epoch", "home.repos.pwc.inspect_result.monniert_unicorn.utils.logger.print_log", "home.repos.pwc.inspect_result.monniert_unicorn.model.unicorn.Unicorn.load_state_dict", "home.repos.pwc.inspect_result.monniert_unicorn.utils.logger.print_log", "home.repos.pwc.inspect_result.monniert_unicorn.model.unicorn.Unicorn.load_state_dict", "home.repos.pwc.inspect_result.monniert_unicorn.utils.logger.print_warning"], ["", "def", "load_from", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "pretrained", ",", "resume", "=", "cfg", "[", "\"training\"", "]", ".", "get", "(", "\"pretrained\"", ")", ",", "cfg", "[", "\"training\"", "]", ".", "get", "(", "\"resume\"", ")", "\n", "assert", "not", "(", "pretrained", "is", "not", "None", "and", "resume", "is", "not", "None", ")", "\n", "tag", "=", "pretrained", "or", "resume", "\n", "if", "tag", "is", "not", "None", ":", "\n", "            ", "path", "=", "path_exists", "(", "RUNS_PATH", "/", "self", ".", "dataset_name", "/", "tag", "/", "'model.pkl'", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "path", ",", "map_location", "=", "self", ".", "device", ")", "\n", "if", "self", ".", "multi_gpu", ":", "\n", "                ", "self", ".", "model", ".", "module", ".", "load_state_dict", "(", "checkpoint", "[", "\"model_state\"", "]", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "model", ".", "load_state_dict", "(", "checkpoint", "[", "\"model_state\"", "]", ")", "\n", "", "if", "resume", "is", "not", "None", ":", "\n", "                ", "if", "checkpoint", "[", "\"batch\"", "]", "==", "self", ".", "n_batches", ":", "\n", "                    ", "self", ".", "epoch_start", ",", "self", ".", "batch_start", "=", "checkpoint", "[", "\"epoch\"", "]", "+", "1", ",", "1", "\n", "", "else", ":", "\n", "                    ", "self", ".", "epoch_start", ",", "self", ".", "batch_start", "=", "checkpoint", "[", "\"epoch\"", "]", ",", "checkpoint", "[", "\"batch\"", "]", "+", "1", "\n", "", "self", ".", "model", ".", "set_cur_epoch", "(", "checkpoint", "[", "\"epoch\"", "]", ")", "\n", "print_log", "(", "f\"epoch_start={self.epoch_start}, batch_start={self.batch_start}\"", ")", "\n", "try", ":", "\n", "                    ", "self", ".", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "\"optimizer_state\"", "]", ")", "\n", "", "except", "ValueError", ":", "\n", "                    ", "print_warning", "(", "\"ValueError: loaded optim state contains parameters that don't match\"", ")", "\n", "", "scheduler_state", "=", "keyfilter", "(", "lambda", "k", ":", "k", "in", "[", "'last_epoch'", ",", "'_step_count'", "]", ",", "checkpoint", "[", "\"scheduler_state\"", "]", ")", "\n", "self", ".", "scheduler", ".", "load_state_dict", "(", "scheduler_state", ")", "\n", "self", ".", "cur_lr", "=", "self", ".", "scheduler", ".", "get_last_lr", "(", ")", "[", "0", "]", "\n", "print_log", "(", "f\"scheduler state_dict: {self.scheduler.state_dict()}\"", ")", "\n", "", "print_log", "(", "f\"Checkpoint {tag} loaded\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.src.trainer.Trainer.run": [[110, 139], ["utils.use_seed", "range", "utils.logger.print_log", "enumerate", "trainer.Trainer.step", "trainer.Trainer.save", "trainer.Trainer.save_metric_plots", "trainer.Trainer.evaluate", "trainer.Trainer.run_single_batch_train", "trainer.Trainer.save", "trainer.Trainer.log_train_metrics", "trainer.Trainer.log_visualizations", "trainer.Trainer.save", "len", "trainer.Trainer.run_val", "trainer.Trainer.log_val_metrics"], "methods", ["home.repos.pwc.inspect_result.monniert_unicorn.utils.logger.print_log", "home.repos.pwc.inspect_result.monniert_unicorn.model.generator.ProgressiveGiraffeGenerator.step", "home.repos.pwc.inspect_result.monniert_unicorn.utils.image.ImageLogger.save", "home.repos.pwc.inspect_result.monniert_unicorn.src.trainer.Trainer.save_metric_plots", "home.repos.pwc.inspect_result.monniert_unicorn.utils.metrics.MeshEvaluator.evaluate", "home.repos.pwc.inspect_result.monniert_unicorn.src.trainer.Trainer.run_single_batch_train", "home.repos.pwc.inspect_result.monniert_unicorn.utils.image.ImageLogger.save", "home.repos.pwc.inspect_result.monniert_unicorn.src.trainer.Trainer.log_train_metrics", "home.repos.pwc.inspect_result.monniert_unicorn.src.trainer.Trainer.log_visualizations", "home.repos.pwc.inspect_result.monniert_unicorn.utils.image.ImageLogger.save", "home.repos.pwc.inspect_result.monniert_unicorn.src.trainer.Trainer.run_val", "home.repos.pwc.inspect_result.monniert_unicorn.src.trainer.Trainer.log_val_metrics"], ["", "", "@", "use_seed", "(", ")", "\n", "def", "run", "(", "self", ")", ":", "\n", "        ", "cur_iter", "=", "(", "self", ".", "epoch_start", "-", "1", ")", "*", "self", ".", "n_batches", "+", "self", ".", "batch_start", "\n", "for", "epoch", "in", "range", "(", "self", ".", "epoch_start", ",", "self", ".", "n_epoches", "+", "1", ")", ":", "\n", "            ", "batch_start", "=", "self", ".", "batch_start", "if", "epoch", "==", "self", ".", "epoch_start", "else", "1", "\n", "for", "batch", ",", "(", "images", ",", "_labels", ")", "in", "enumerate", "(", "self", ".", "train_loader", ",", "start", "=", "1", ")", ":", "\n", "                ", "if", "batch", "<", "batch_start", ":", "\n", "                    ", "continue", "\n", "", "self", ".", "run_single_batch_train", "(", "images", ")", "\n", "if", "cur_iter", "%", "self", ".", "train_stat_interval", "==", "0", "and", "self", ".", "is_master", ":", "\n", "                    ", "self", ".", "log_train_metrics", "(", "cur_iter", ",", "epoch", ",", "batch", ")", "\n", "\n", "", "if", "cur_iter", "%", "self", ".", "val_stat_interval", "==", "0", "and", "self", ".", "is_master", ":", "\n", "                    ", "if", "len", "(", "self", ".", "val_loader", ".", "dataset", ")", ">", "10", ":", "\n", "                        ", "self", ".", "run_val", "(", ")", "\n", "self", ".", "log_val_metrics", "(", "cur_iter", ",", "epoch", ",", "batch", ")", "\n", "", "self", ".", "log_visualizations", "(", "cur_iter", ")", "\n", "self", ".", "save", "(", "epoch", "=", "epoch", ",", "batch", "=", "batch", ")", "\n", "", "cur_iter", "+=", "1", "\n", "", "self", ".", "step", "(", "epoch", "+", "1", ",", "batch", "=", "1", ")", "\n", "if", "epoch", "in", "self", ".", "save_epoches", ":", "\n", "                ", "self", ".", "save", "(", "epoch", "=", "epoch", ",", "batch", "=", "batch", ",", "checkpoint", "=", "True", ")", "\n", "\n", "", "", "if", "self", ".", "is_master", ":", "\n", "            ", "N", ",", "B", "=", "(", "self", ".", "n_epoches", ",", "self", ".", "n_batches", ")", "if", "self", ".", "with_training", "else", "(", "self", ".", "epoch_start", ",", "self", ".", "batch_start", ")", "\n", "self", ".", "save", "(", "epoch", "=", "N", ",", "batch", "=", "B", ")", "\n", "self", ".", "save_metric_plots", "(", ")", "\n", "self", ".", "evaluate", "(", ")", "\n", "", "print_log", "(", "\"Training over\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.src.trainer.Trainer.run_single_batch_train": [[140, 157], ["time.time", "trainer.Trainer.model.train", "trainer.Trainer.optimizer.zero_grad", "trainer.Trainer.model", "isinstance", "trainer.Trainer.optimizer.step", "trainer.Trainer.model.iter_step", "len", "trainer.Trainer.train_metrics.update", "trainer.Trainer.train_metrics.update", "utils.pytorch.torch_to", "loss.mean().backward", "loss[].mean().backward", "toolz.merge", "loss.detach().mean().item", "v.detach().mean().item", "loss.mean", "loss[].mean", "loss.items", "enumerate", "loss.detach().mean", "v.detach().mean", "time.time", "loss.detach", "v.detach"], "methods", ["home.repos.pwc.inspect_result.monniert_unicorn.model.generator.ProgressiveGiraffeGenerator.step", "home.repos.pwc.inspect_result.monniert_unicorn.model.unicorn.Unicorn.iter_step", "home.repos.pwc.inspect_result.monniert_unicorn.utils.metrics.MeshEvaluator.update", "home.repos.pwc.inspect_result.monniert_unicorn.utils.metrics.MeshEvaluator.update", "home.repos.pwc.inspect_result.monniert_unicorn.utils.pytorch.torch_to"], ["", "def", "run_single_batch_train", "(", "self", ",", "images", ")", ":", "\n", "        ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "model", ".", "train", "(", ")", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ",", "pred", "=", "self", ".", "model", "(", "torch_to", "(", "images", ",", "self", ".", "device", ",", "non_blocking", "=", "self", ".", "multi_gpu", ")", ")", "\n", "if", "isinstance", "(", "loss", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "loss", ".", "mean", "(", ")", ".", "backward", "(", ")", "# XXX we need to aggregate in case of DDP outputs", "\n", "dict_loss", "=", "{", "'loss'", ":", "loss", ".", "detach", "(", ")", ".", "mean", "(", ")", ".", "item", "(", ")", "}", "\n", "", "else", ":", "\n", "            ", "loss", "[", "'total'", "]", ".", "mean", "(", ")", ".", "backward", "(", ")", "# XXX we need to aggregate in case of DDP outputs", "\n", "dict_loss", "=", "{", "f'loss_{k}'", ":", "v", ".", "detach", "(", ")", ".", "mean", "(", ")", ".", "item", "(", ")", "for", "k", ",", "v", "in", "loss", ".", "items", "(", ")", "}", "\n", "", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "self", ".", "model", ".", "iter_step", "(", ")", "\n", "\n", "B", "=", "len", "(", "pred", ")", "\n", "self", ".", "train_metrics", ".", "update", "(", "merge", "(", "{", "'time/img'", ":", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", "/", "B", "}", ",", "dict_loss", ")", ",", "N", "=", "B", ")", "\n", "self", ".", "train_metrics", ".", "update", "(", "{", "f'prop_head{i}'", ":", "p", "for", "i", ",", "p", "in", "enumerate", "(", "self", ".", "model", ".", "prop_heads", ")", "}", ",", "N", "=", "B", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.src.trainer.Trainer.run_val": [[158, 168], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "trainer.Trainer.model.eval", "model", "trainer.Trainer.val_metrics.update", "trainer.Trainer.val_scores.update", "utils.pytorch.torch_to", "utils.pytorch.torch_to", "len", "isinstance"], "methods", ["home.repos.pwc.inspect_result.monniert_unicorn.utils.metrics.MeshEvaluator.update", "home.repos.pwc.inspect_result.monniert_unicorn.utils.metrics.MeshEvaluator.update", "home.repos.pwc.inspect_result.monniert_unicorn.utils.pytorch.torch_to", "home.repos.pwc.inspect_result.monniert_unicorn.utils.pytorch.torch_to"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "run_val", "(", "self", ")", ":", "\n", "        ", "self", ".", "model", ".", "eval", "(", ")", "\n", "model", "=", "self", ".", "model", ".", "module", "if", "self", ".", "multi_gpu", "else", "self", ".", "model", "\n", "for", "images", ",", "labels", "in", "self", ".", "val_loader", ":", "\n", "            ", "loss", ",", "pred", "=", "model", "(", "torch_to", "(", "images", ",", "self", ".", "device", ")", ",", "return_meshes", "=", "True", ")", "\n", "loss", "=", "(", "loss", "if", "isinstance", "(", "loss", ",", "torch", ".", "Tensor", ")", "else", "loss", "[", "'total'", "]", ")", ".", "item", "(", ")", "\n", "self", ".", "val_metrics", ".", "update", "(", "'loss_val'", ",", "loss", ",", "N", "=", "len", "(", "pred", ")", ")", "\n", "self", ".", "val_scores", ".", "update", "(", "pred", ",", "torch_to", "(", "labels", ",", "self", ".", "device", ")", ")", "\n", "break", "# XXX we only evaluate on the first batch for fast cpu", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.src.trainer.Trainer.step": [[169, 178], ["trainer.Trainer.model.step", "trainer.Trainer.scheduler.step", "hasattr", "trainer.Trainer.scheduler.get_last_lr", "utils.logger.print_log", "trainer.Trainer.train_loader.dataset.step", "LOG_FMT"], "methods", ["home.repos.pwc.inspect_result.monniert_unicorn.model.generator.ProgressiveGiraffeGenerator.step", "home.repos.pwc.inspect_result.monniert_unicorn.model.generator.ProgressiveGiraffeGenerator.step", "home.repos.pwc.inspect_result.monniert_unicorn.utils.logger.print_log", "home.repos.pwc.inspect_result.monniert_unicorn.model.generator.ProgressiveGiraffeGenerator.step"], ["", "", "def", "step", "(", "self", ",", "epoch", ",", "batch", ")", ":", "\n", "        ", "self", ".", "model", ".", "step", "(", ")", "\n", "self", ".", "scheduler", ".", "step", "(", ")", "\n", "lr", "=", "self", ".", "scheduler", ".", "get_last_lr", "(", ")", "[", "0", "]", "\n", "if", "lr", "!=", "self", ".", "cur_lr", ":", "\n", "            ", "self", ".", "cur_lr", "=", "lr", "\n", "print_log", "(", "LOG_FMT", "(", "epoch", ",", "self", ".", "n_epoches", ",", "batch", ",", "self", ".", "n_batches", ",", "f'LR update: lr={lr}'", ")", ")", "\n", "", "if", "hasattr", "(", "self", ".", "train_loader", ".", "dataset", ",", "'step'", ")", ":", "\n", "            ", "self", ".", "train_loader", ".", "dataset", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.src.trainer.Trainer.log_train_metrics": [[179, 193], ["utils.logger.print_log", "trainer.Trainer.visualizer.upload_lineplot", "metrics.get_named_values", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "hasattr", "metrics.log_and_reset", "metrics.get_named_values", "len", "trainer.Trainer.visualizer.upload_barplot", "trainer.Trainer.visualizer.upload_barplot", "trainer.Trainer.visualizer.upload_lineplot", "LOG_FMT", "enumerate"], "methods", ["home.repos.pwc.inspect_result.monniert_unicorn.utils.logger.print_log", "home.repos.pwc.inspect_result.monniert_unicorn.utils.plot.Visualizer.upload_lineplot", "home.repos.pwc.inspect_result.monniert_unicorn.utils.metrics.Metrics.get_named_values", "home.repos.pwc.inspect_result.monniert_unicorn.utils.metrics.MeshEvaluator.log_and_reset", "home.repos.pwc.inspect_result.monniert_unicorn.utils.metrics.Metrics.get_named_values", "home.repos.pwc.inspect_result.monniert_unicorn.utils.plot.Visualizer.upload_barplot", "home.repos.pwc.inspect_result.monniert_unicorn.utils.plot.Visualizer.upload_barplot", "home.repos.pwc.inspect_result.monniert_unicorn.utils.plot.Visualizer.upload_lineplot"], ["", "", "def", "log_train_metrics", "(", "self", ",", "it", ",", "epoch", ",", "batch", ")", ":", "\n", "        ", "print_log", "(", "LOG_FMT", "(", "epoch", ",", "self", ".", "n_epoches", ",", "batch", ",", "self", ".", "n_batches", ",", "f'train_metrics: {self.train_metrics}'", ")", "[", ":", "1000", "]", ")", "\n", "metrics", "=", "self", ".", "train_metrics", "\n", "self", ".", "visualizer", ".", "upload_lineplot", "(", "it", ",", "metrics", ".", "get_named_values", "(", "lambda", "s", ":", "'loss'", "in", "s", ")", ",", "title", "=", "'train_losses'", ")", "\n", "named_values", "=", "metrics", ".", "get_named_values", "(", "lambda", "s", ":", "'prop_head'", "in", "s", ")", "\n", "proportions", "=", "torch", ".", "Tensor", "(", "[", "v", "for", "k", ",", "v", "in", "named_values", "]", ")", "\n", "if", "len", "(", "proportions", ")", ">", "1", ":", "\n", "            ", "self", ".", "visualizer", ".", "upload_barplot", "(", "named_values", ",", "title", "=", "'head assigned proportions'", ")", "\n", "", "if", "hasattr", "(", "self", ".", "model", ",", "'_prob_heads'", ")", ":", "\n", "            ", "named_values", "=", "[", "(", "k", ",", "v", ")", "for", "k", ",", "v", "in", "enumerate", "(", "self", ".", "model", ".", "_prob_heads", ")", "]", "\n", "self", ".", "visualizer", ".", "upload_barplot", "(", "named_values", ",", "title", "=", "'avg probability per head'", ")", "\n", "named_values", "=", "[", "(", "'max'", ",", "self", ".", "model", ".", "_prob_max", ")", ",", "(", "'min'", ",", "self", ".", "model", ".", "_prob_min", ")", "]", "\n", "self", ".", "visualizer", ".", "upload_lineplot", "(", "it", ",", "named_values", ",", "title", "=", "'probability statistics'", ")", "\n", "", "metrics", ".", "log_and_reset", "(", "it", "=", "it", ",", "epoch", "=", "epoch", ",", "batch", "=", "batch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.src.trainer.Trainer.log_val_metrics": [[194, 204], ["utils.logger.print_log", "trainer.Trainer.visualizer.upload_lineplot", "utils.logger.print_log", "trainer.Trainer.visualizer.upload_lineplot", "trainer.Trainer.val_metrics.log_and_reset", "trainer.Trainer.val_scores.log_and_reset", "LOG_FMT", "metrics.get_named_values", "trainer.Trainer.val_scores.compute", "LOG_FMT", "list", "zip", "zip"], "methods", ["home.repos.pwc.inspect_result.monniert_unicorn.utils.logger.print_log", "home.repos.pwc.inspect_result.monniert_unicorn.utils.plot.Visualizer.upload_lineplot", "home.repos.pwc.inspect_result.monniert_unicorn.utils.logger.print_log", "home.repos.pwc.inspect_result.monniert_unicorn.utils.plot.Visualizer.upload_lineplot", "home.repos.pwc.inspect_result.monniert_unicorn.utils.metrics.MeshEvaluator.log_and_reset", "home.repos.pwc.inspect_result.monniert_unicorn.utils.metrics.MeshEvaluator.log_and_reset", "home.repos.pwc.inspect_result.monniert_unicorn.utils.metrics.Metrics.get_named_values", "home.repos.pwc.inspect_result.monniert_unicorn.utils.metrics.MeshEvaluator.compute"], ["", "def", "log_val_metrics", "(", "self", ",", "it", ",", "epoch", ",", "batch", ")", ":", "\n", "        ", "metrics", "=", "self", ".", "val_metrics", "\n", "print_log", "(", "LOG_FMT", "(", "epoch", ",", "self", ".", "n_epoches", ",", "batch", ",", "self", ".", "n_batches", ",", "f'val_metrics: {metrics}'", ")", ")", "\n", "self", ".", "visualizer", ".", "upload_lineplot", "(", "it", ",", "metrics", ".", "get_named_values", "(", ")", ",", "title", "=", "'val_metrics'", ")", "\n", "names", ",", "scores", "=", "self", ".", "val_scores", ".", "names", ",", "self", ".", "val_scores", ".", "compute", "(", ")", "\n", "print_log", "(", "LOG_FMT", "(", "epoch", ",", "self", ".", "n_epoches", ",", "batch", ",", "self", ".", "n_batches", ",", "\n", "\"val_scores: \"", "+", "\", \"", ".", "join", "(", "[", "\"{}={:.4f}\"", ".", "format", "(", "k", ",", "v", ")", "for", "k", ",", "v", "in", "zip", "(", "names", ",", "scores", ")", "]", ")", ")", ")", "\n", "self", ".", "visualizer", ".", "upload_lineplot", "(", "it", ",", "list", "(", "zip", "(", "names", ",", "scores", ")", ")", ",", "title", "=", "'val_scores'", ")", "\n", "self", ".", "val_metrics", ".", "log_and_reset", "(", "it", "=", "it", ",", "epoch", "=", "epoch", ",", "batch", "=", "batch", ")", "\n", "self", ".", "val_scores", ".", "log_and_reset", "(", "it", "=", "it", ",", "epoch", "=", "epoch", ",", "batch", "=", "batch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.src.trainer.Trainer.log_visualizations": [[205, 220], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "trainer.Trainer.model.eval", "trainer.Trainer.model().permute", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "trainer.Trainer.visualizer.upload_images", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "trainer.Trainer.visualizer.upload_images", "trainer.Trainer.rec_logger.save", "trainer.Trainer.model.get_random_prototype_views", "trainer.Trainer.reshape", "trainer.Trainer.model", "trainer.Trainer.reshape", "trainer.Trainer.visualizer.upload_images", "trainer.Trainer.model"], "methods", ["home.repos.pwc.inspect_result.monniert_unicorn.utils.plot.Visualizer.upload_images", "home.repos.pwc.inspect_result.monniert_unicorn.utils.plot.Visualizer.upload_images", "home.repos.pwc.inspect_result.monniert_unicorn.utils.image.ImageLogger.save", "home.repos.pwc.inspect_result.monniert_unicorn.model.unicorn.Unicorn.get_random_prototype_views", "home.repos.pwc.inspect_result.monniert_unicorn.utils.plot.Visualizer.upload_images"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "log_visualizations", "(", "self", ",", "cur_iter", ")", ":", "\n", "        ", "self", ".", "model", ".", "eval", "(", ")", "\n", "viz_imgs", "=", "self", ".", "viz_samples", "[", "'imgs'", "]", "\n", "rec", "=", "self", ".", "model", "(", "self", ".", "viz_samples", ",", "debug", "=", "True", ")", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ",", "4", ")", "\n", "images", "=", "torch", ".", "cat", "(", "[", "viz_imgs", "[", ":", ",", "None", "]", ",", "rec", "]", ",", "dim", "=", "1", ")", "\n", "self", ".", "visualizer", ".", "upload_images", "(", "images", ".", "reshape", "(", "-", "1", ",", "*", "viz_imgs", ".", "shape", "[", "1", ":", "]", ")", ",", "'candidates'", ",", "images", ".", "shape", "[", "1", "]", ")", "\n", "rec", "=", "self", ".", "model", "(", "self", ".", "viz_samples", ")", "[", "1", "]", "\n", "images", "=", "torch", ".", "stack", "(", "[", "viz_imgs", ",", "rec", "]", ",", "dim", "=", "1", ")", "\n", "self", ".", "visualizer", ".", "upload_images", "(", "images", ".", "reshape", "(", "-", "1", ",", "*", "viz_imgs", ".", "shape", "[", "1", ":", "]", ")", ",", "'recons'", ",", "images", ".", "shape", "[", "1", "]", ")", "\n", "self", ".", "rec_logger", ".", "save", "(", "rec", ",", "cur_iter", ")", "\n", "\n", "images", "=", "self", ".", "model", ".", "get_random_prototype_views", "(", "seed", "=", "4321", ")", "\n", "if", "images", "is", "not", "None", ":", "\n", "            ", "self", ".", "visualizer", ".", "upload_images", "(", "images", ",", "'prototype views'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.src.trainer.Trainer.save": [[221, 230], ["torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "utils.logger.print_log", "trainer.Trainer.model.state_dict", "trainer.Trainer.optimizer.state_dict", "trainer.Trainer.scheduler.state_dict"], "methods", ["home.repos.pwc.inspect_result.monniert_unicorn.utils.image.ImageLogger.save", "home.repos.pwc.inspect_result.monniert_unicorn.utils.image.ImageLogger.save", "home.repos.pwc.inspect_result.monniert_unicorn.utils.image.ImageLogger.save", "home.repos.pwc.inspect_result.monniert_unicorn.utils.image.ImageLogger.save", "home.repos.pwc.inspect_result.monniert_unicorn.utils.image.ImageLogger.save", "home.repos.pwc.inspect_result.monniert_unicorn.utils.image.ImageLogger.save", "home.repos.pwc.inspect_result.monniert_unicorn.utils.image.ImageLogger.save", "home.repos.pwc.inspect_result.monniert_unicorn.utils.image.ImageLogger.save", "home.repos.pwc.inspect_result.monniert_unicorn.utils.image.ImageLogger.save", "home.repos.pwc.inspect_result.monniert_unicorn.utils.logger.print_log"], ["", "", "def", "save", "(", "self", ",", "epoch", ",", "batch", ",", "checkpoint", "=", "False", ")", ":", "\n", "        ", "state", "=", "{", "\n", "\"epoch\"", ":", "epoch", ",", "\"batch\"", ":", "batch", ",", "\"model_name\"", ":", "self", ".", "model", ".", "name", ",", "\"model_kwargs\"", ":", "self", ".", "model", ".", "init_kwargs", ",", "\n", "\"model_state\"", ":", "self", ".", "model", ".", "state_dict", "(", ")", ",", "\"optimizer_state\"", ":", "self", ".", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "\"scheduler_state\"", ":", "self", ".", "scheduler", ".", "state_dict", "(", ")", ",", "\n", "}", "\n", "name", "=", "f'model_{epoch}.pkl'", "if", "checkpoint", "else", "'model.pkl'", "\n", "torch", ".", "save", "(", "state", ",", "self", ".", "run_dir", "/", "name", ")", "\n", "print_log", "(", "f\"Model saved at {self.run_dir / name}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.src.trainer.Trainer.save_metric_plots": [[231, 252], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "trainer.Trainer.model.eval", "df_train.join", "list", "utils.plot.plot_lines().savefig", "list", "trainer.Trainer.rec_logger.save", "trainer.Trainer.rec_logger.save_gif", "utils.logger.print_log", "m.read_log", "len", "utils.logger.print_log", "filter", "len", "list", "utils.plot.plot_lines().savefig", "filter", "len", "utils.plot.plot_lines().savefig", "utils.plot.plot_lines", "filter", "trainer.Trainer.model", "utils.plot.plot_lines", "col.startswith", "utils.plot.plot_lines"], "methods", ["home.repos.pwc.inspect_result.monniert_unicorn.utils.image.ImageLogger.save", "home.repos.pwc.inspect_result.monniert_unicorn.utils.image.save_gif", "home.repos.pwc.inspect_result.monniert_unicorn.utils.logger.print_log", "home.repos.pwc.inspect_result.monniert_unicorn.utils.metrics.MeshEvaluator.read_log", "home.repos.pwc.inspect_result.monniert_unicorn.utils.logger.print_log", "home.repos.pwc.inspect_result.monniert_unicorn.utils.plot.plot_lines", "home.repos.pwc.inspect_result.monniert_unicorn.utils.plot.plot_lines", "home.repos.pwc.inspect_result.monniert_unicorn.utils.plot.plot_lines"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "save_metric_plots", "(", "self", ")", ":", "\n", "        ", "self", ".", "model", ".", "eval", "(", ")", "\n", "df_train", ",", "df_val", ",", "df_scores", "=", "[", "m", ".", "read_log", "(", ")", "for", "m", "in", "[", "self", ".", "train_metrics", ",", "self", ".", "val_metrics", ",", "self", ".", "val_scores", "]", "]", "\n", "if", "len", "(", "df_train", ")", "==", "0", ":", "\n", "            ", "print_log", "(", "'No metrics or plots to save'", ")", "\n", "return", "None", "\n", "\n", "", "df", "=", "df_train", ".", "join", "(", "df_val", "[", "[", "'loss_val'", "]", "]", ",", "how", "=", "\"outer\"", ")", "\n", "loss_names", "=", "list", "(", "filter", "(", "lambda", "col", ":", "'loss'", "in", "col", ",", "df", ".", "columns", ")", ")", "\n", "plot_lines", "(", "df", ",", "loss_names", ",", "title", "=", "\"Loss\"", ")", ".", "savefig", "(", "self", ".", "run_dir", "/", "\"loss.pdf\"", ")", "\n", "if", "len", "(", "df_scores", ")", ">", "0", ":", "\n", "            ", "names", "=", "list", "(", "filter", "(", "lambda", "col", ":", "col", "in", "df_scores", ",", "self", ".", "val_scores", ".", "names", ")", ")", "\n", "plot_lines", "(", "df_scores", ",", "names", ",", "title", "=", "\"Val scores\"", ")", ".", "savefig", "(", "self", ".", "run_dir", "/", "'val_scores.pdf'", ")", "\n", "\n", "", "names", "=", "list", "(", "filter", "(", "lambda", "col", ":", "col", ".", "startswith", "(", "'prop_head'", ")", ",", "df", ".", "columns", ")", ")", "\n", "if", "len", "(", "names", ")", ">", "0", ":", "\n", "            ", "plot_lines", "(", "df", ",", "names", ",", "title", "=", "'Head proportions'", ")", ".", "savefig", "(", "self", ".", "run_dir", "/", "'head_proportions.pdf'", ")", "\n", "", "self", ".", "rec_logger", ".", "save", "(", "self", ".", "model", "(", "self", ".", "viz_samples", ")", "[", "1", "]", ")", "\n", "self", ".", "rec_logger", ".", "save_gif", "(", ")", "\n", "print_log", "(", "\"Metrics and plots saved\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.src.trainer.Trainer.evaluate": [[253, 266], ["trainer.Trainer.model.eval", "trainer.Trainer.model.quantitative_eval", "utils.logger.print_log", "utils.path_mkdir", "trainer.Trainer.model.qualitative_eval", "utils.logger.print_log", "open", "f.write", "f.write", "trainer.Trainer.keys", "map", "trainer.Trainer.items", "trainer.Trainer.values"], "methods", ["home.repos.pwc.inspect_result.monniert_unicorn.model.unicorn.Unicorn.quantitative_eval", "home.repos.pwc.inspect_result.monniert_unicorn.utils.logger.print_log", "home.repos.pwc.inspect_result.monniert_unicorn.utils.__init__.path_mkdir", "home.repos.pwc.inspect_result.monniert_unicorn.model.unicorn.Unicorn.qualitative_eval", "home.repos.pwc.inspect_result.monniert_unicorn.utils.logger.print_log", "home.repos.pwc.inspect_result.monniert_unicorn.utils.metrics.Metrics.values"], ["", "def", "evaluate", "(", "self", ")", ":", "\n", "        ", "self", ".", "model", ".", "eval", "(", ")", "\n", "# quantitative", "\n", "scores", "=", "self", ".", "model", ".", "quantitative_eval", "(", "self", ".", "test_loader", ",", "self", ".", "device", ")", "\n", "print_log", "(", "'final_scores: '", "+", "', '", ".", "join", "(", "[", "\"{}={:.5f}\"", ".", "format", "(", "k", ",", "v", ")", "for", "k", ",", "v", "in", "scores", ".", "items", "(", ")", "]", ")", ")", "\n", "with", "open", "(", "self", ".", "run_dir", "/", "'final_scores.tsv'", ",", "mode", "=", "'w'", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "\"\\t\"", ".", "join", "(", "scores", ".", "keys", "(", ")", ")", "+", "\"\\n\"", ")", "\n", "f", ".", "write", "(", "\"\\t\"", ".", "join", "(", "map", "(", "'{:.5f}'", ".", "format", ",", "scores", ".", "values", "(", ")", ")", ")", "+", "\"\\n\"", ")", "\n", "\n", "# qualitative", "\n", "", "out", "=", "path_mkdir", "(", "self", ".", "run_dir", "/", "'quali_eval'", ")", "\n", "self", ".", "model", ".", "qualitative_eval", "(", "self", ".", "test_loader", ",", "self", ".", "device", ",", "path", "=", "out", ",", "N", "=", "32", ")", "\n", "print_log", "(", "\"Evaluation over\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.src.trainer.train_multi": [[268, 273], ["torch.init_process_group", "trainer.Trainer", "trainer.Trainer.run"], "function", ["home.repos.pwc.inspect_result.monniert_unicorn.utils.image.ImageResizer.run"], ["", "", "def", "train_multi", "(", "gpu", ",", "cfg", ",", "run_dir", ",", "seed", ",", "n_gpus", ",", "n_nodes", ",", "n_rank", ")", ":", "\n", "    ", "rank", ",", "world_size", "=", "n_rank", "*", "n_gpus", "+", "gpu", ",", "n_gpus", "*", "n_nodes", "\n", "dist", ".", "init_process_group", "(", "'nccl'", ",", "rank", "=", "rank", ",", "world_size", "=", "world_size", ")", "\n", "trainer", "=", "Trainer", "(", "cfg", ",", "run_dir", ",", "seed", "=", "seed", "+", "rank", ",", "gpu", "=", "gpu", ",", "rank", "=", "rank", ",", "world_size", "=", "world_size", ")", "\n", "trainer", ".", "run", "(", "seed", "=", "seed", "+", "rank", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.src.scheduler.MultiStepLR.__init__": [[41, 49], ["collections.Counter", "torch.optim.lr_scheduler._LRScheduler.__init__", "isinstance", "len"], "methods", ["home.repos.pwc.inspect_result.monniert_unicorn.model.renderer.SoftPhongShaderPlus.__init__"], ["def", "__init__", "(", "self", ",", "optimizer", ",", "milestones", "=", "None", ",", "gamma", "=", "0.1", ",", "last_epoch", "=", "-", "1", ",", "warmup", "=", "0", ")", ":", "\n", "        ", "self", ".", "milestones", "=", "Counter", "(", "milestones", "or", "[", "]", ")", "\n", "self", ".", "gamma", "=", "[", "gamma", "]", "*", "len", "(", "optimizer", ".", "param_groups", ")", "if", "isinstance", "(", "gamma", ",", "(", "float", ",", ")", ")", "else", "gamma", "\n", "self", ".", "warmup", "=", "warmup", "\n", "super", "(", "MultiStepLR", ",", "self", ")", ".", "__init__", "(", "optimizer", ",", "last_epoch", ")", "\n", "if", "warmup", ">", "0", ":", "\n", "            ", "for", "group", "in", "optimizer", ".", "param_groups", ":", "\n", "                ", "group", "[", "'lr'", "]", "/=", "self", ".", "warmup", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.src.scheduler.MultiStepLR.get_lr": [[50, 62], ["utils.logger.print_log", "zip"], "methods", ["home.repos.pwc.inspect_result.monniert_unicorn.utils.logger.print_log"], ["", "", "", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "_get_lr_called_within_step", ":", "\n", "            ", "print_log", "(", "\"To get the last learning rate computed by the scheduler, \"", "\n", "\"please use `get_last_lr()`.\"", ",", "level", "=", "'warning'", ")", "\n", "\n", "", "if", "self", ".", "warmup", ">", "self", ".", "last_epoch", ":", "\n", "            ", "return", "[", "lr", "/", "self", ".", "warmup", "*", "(", "self", ".", "last_epoch", "+", "1", ")", "for", "lr", "in", "self", ".", "base_lrs", "]", "\n", "", "elif", "self", ".", "last_epoch", "not", "in", "self", ".", "milestones", ":", "\n", "            ", "return", "[", "group", "[", "'lr'", "]", "for", "group", "in", "self", ".", "optimizer", ".", "param_groups", "]", "\n", "", "else", ":", "\n", "            ", "return", "[", "group", "[", "'lr'", "]", "*", "gamma", "**", "self", ".", "milestones", "[", "self", ".", "last_epoch", "]", "\n", "for", "group", ",", "gamma", "in", "zip", "(", "self", ".", "optimizer", ".", "param_groups", ",", "self", ".", "gamma", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.src.scheduler.MultiStepLR._get_closed_form_lr": [[63, 70], ["sorted", "scheduler.MultiStepLR.milestones.elements", "zip", "bisect.bisect_right"], "methods", ["None"], ["", "", "def", "_get_closed_form_lr", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "warmup", ">", "self", ".", "last_epoch", ":", "\n", "            ", "return", "[", "lr", "/", "self", ".", "warmup", "*", "(", "self", ".", "last_epoch", "+", "1", ")", "for", "lr", "in", "self", ".", "base_lrs", "]", "\n", "", "else", ":", "\n", "            ", "milestones", "=", "sorted", "(", "self", ".", "milestones", ".", "elements", "(", ")", ")", "\n", "return", "[", "base_lr", "*", "gamma", "**", "bisect_right", "(", "milestones", ",", "self", ".", "last_epoch", ")", "\n", "for", "base_lr", ",", "gamma", "in", "zip", "(", "self", ".", "base_lrs", ",", "self", ".", "gamma", ")", "]", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.monniert_unicorn.src.scheduler.create_scheduler": [[8, 14], ["kwargs.pop", "utils.logger.print_log", "cfg[].get", "scheduler.get_scheduler"], "function", ["home.repos.pwc.inspect_result.monniert_unicorn.utils.logger.print_log", "home.repos.pwc.inspect_result.monniert_unicorn.src.scheduler.get_scheduler"], ["def", "create_scheduler", "(", "cfg", ",", "optimizer", ")", ":", "\n", "    ", "kwargs", "=", "cfg", "[", "\"training\"", "]", ".", "get", "(", "\"scheduler\"", ",", "{", "}", ")", "or", "{", "}", "\n", "name", "=", "kwargs", ".", "pop", "(", "\"name\"", ",", "None", ")", "\n", "scheduler", "=", "get_scheduler", "(", "name", ")", "(", "optimizer", ",", "**", "kwargs", ")", "\n", "print_log", "(", "f\"Scheduler '{name}' init: kwargs={kwargs}\"", ")", "\n", "return", "scheduler", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.src.scheduler.get_scheduler": [[16, 24], ["None"], "function", ["None"], ["", "def", "get_scheduler", "(", "name", ")", ":", "\n", "    ", "if", "name", "is", "None", ":", "\n", "        ", "name", "=", "'multi_step'", "\n", "", "return", "{", "\n", "\"multi_step\"", ":", "MultiStepLR", ",", "\n", "\"cosine_annealing\"", ":", "CosineAnnealingLR", ",", "\n", "\"exponential\"", ":", "ExponentialLR", ",", "\n", "}", "[", "name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.src.optimizer.create_optimizer": [[6, 12], ["copy.deepcopy", "copy.deepcopy.pop", "utils.logger.print_log", "optimizer.get_optimizer", "model.parameters"], "function", ["home.repos.pwc.inspect_result.monniert_unicorn.utils.logger.print_log", "home.repos.pwc.inspect_result.monniert_unicorn.src.optimizer.get_optimizer"], ["def", "create_optimizer", "(", "cfg", ",", "model", ")", ":", "\n", "    ", "kwargs", "=", "deepcopy", "(", "cfg", "[", "\"training\"", "]", "[", "\"optimizer\"", "]", "or", "{", "}", ")", "\n", "name", "=", "kwargs", ".", "pop", "(", "\"name\"", ")", "\n", "optimizer", "=", "get_optimizer", "(", "name", ")", "(", "model", ".", "parameters", "(", ")", ",", "**", "kwargs", ")", "\n", "print_log", "(", "f\"Optimizer '{name}' init: kwargs={kwargs}\"", ")", "\n", "return", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.src.optimizer.get_optimizer": [[14, 27], ["None"], "function", ["None"], ["", "def", "get_optimizer", "(", "name", ")", ":", "\n", "    ", "if", "name", "is", "None", ":", "\n", "        ", "name", "=", "'sgd'", "\n", "", "return", "{", "\n", "\"sgd\"", ":", "SGD", ",", "\n", "\"adam\"", ":", "Adam", ",", "\n", "\"adamw\"", ":", "AdamW", ",", "\n", "\"asgd\"", ":", "ASGD", ",", "\n", "\"adamax\"", ":", "Adamax", ",", "\n", "\"adadelta\"", ":", "Adadelta", ",", "\n", "\"adagrad\"", ":", "Adagrad", ",", "\n", "\"rmsprop\"", ":", "RMSprop", ",", "\n", "}", "[", "name", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.monniert_unicorn.utils.mesh.normalize": [[18, 36], ["meshes.scale_verts_", "meshes.scale_verts", "[].mean", "torch.cat", "meshes.offset_verts_", "meshes.offset_verts", "meshes.verts_padded().norm().max", "meshes.verts_padded().abs().flatten().max", "[].expand", "meshes.verts_padded().norm", "pytorch3d.ops.sample_points_from_meshes", "meshes.verts_list", "meshes.verts_padded().abs().flatten", "meshes.verts_padded", "v.mean", "meshes.verts_padded().abs", "meshes.verts_padded"], "function", ["None"], ["def", "normalize", "(", "meshes", ",", "mode", "=", "'unit_sphere'", ",", "center", "=", "False", ",", "inplace", "=", "False", ",", "use_center_mass", "=", "False", ")", ":", "\n", "    ", "if", "center", ":", "\n", "        ", "if", "use_center_mass", ":", "\n", "            ", "offsets", "=", "sample_points", "(", "meshes", ",", "100000", ")", "[", "0", "]", ".", "mean", "(", "0", ")", "\n", "", "else", ":", "\n", "            ", "offsets", "=", "torch", ".", "cat", "(", "[", "v", ".", "mean", "(", "0", ")", "[", "None", "]", ".", "expand", "(", "v", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "for", "v", "in", "meshes", ".", "verts_list", "(", ")", "]", ",", "dim", "=", "0", ")", "\n", "", "meshes", "=", "meshes", ".", "offset_verts_", "(", "-", "offsets", ")", "if", "inplace", "else", "meshes", ".", "offset_verts", "(", "-", "offsets", ")", "\n", "\n", "", "if", "mode", "==", "'none'", "or", "mode", "is", "None", ":", "\n", "        ", "return", "meshes", "\n", "\n", "", "if", "mode", "==", "'unit_sphere'", ":", "\n", "        ", "scales", "=", "meshes", ".", "verts_padded", "(", ")", ".", "norm", "(", "dim", "=", "2", ")", ".", "max", "(", "1", ")", "[", "0", "]", "\n", "", "elif", "mode", "==", "'unit_cube'", ":", "\n", "        ", "scales", "=", "meshes", ".", "verts_padded", "(", ")", ".", "abs", "(", ")", ".", "flatten", "(", "1", ")", ".", "max", "(", "1", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "return", "meshes", ".", "scale_verts_", "(", "1", "/", "scales", ")", "if", "inplace", "else", "meshes", ".", "scale_verts", "(", "1", "/", "scales", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.utils.mesh.repeat": [[38, 67], ["range", "isinstance", "pytorch3d.structures.Meshes", "mesh.clone", "new_verts_list.extend", "new_faces_list.extend", "textures.verts_features_padded().repeat", "pytorch3d.renderer.TexturesVertex", "isinstance", "textures.maps_padded().repeat", "textures.verts_uvs_padded().repeat", "textures.faces_uvs_padded().repeat", "pytorch3d.renderer.TexturesUV", "verts.clone", "textures.faces_uvs_padded().repeat.clone", "textures.verts_features_padded", "mesh.verts_list", "mesh.faces_list", "textures.maps_padded", "textures.verts_uvs_padded", "textures.faces_uvs_padded"], "function", ["home.repos.pwc.inspect_result.monniert_unicorn.model.pytorch3d_monkey.AmbientLights.clone", "home.repos.pwc.inspect_result.monniert_unicorn.utils.mesh.repeat", "home.repos.pwc.inspect_result.monniert_unicorn.utils.mesh.repeat", "home.repos.pwc.inspect_result.monniert_unicorn.utils.mesh.repeat", "home.repos.pwc.inspect_result.monniert_unicorn.utils.mesh.repeat", "home.repos.pwc.inspect_result.monniert_unicorn.model.pytorch3d_monkey.AmbientLights.clone", "home.repos.pwc.inspect_result.monniert_unicorn.model.pytorch3d_monkey.AmbientLights.clone"], ["", "def", "repeat", "(", "mesh", ",", "N", ")", ":", "\n", "    ", "\"\"\"\n    Returns N copies using the PyTorch `repeat` convention, compared to the current PyTorch3D function `extend` which\n    follows the `repeat_interleave` convention\n    \"\"\"", "\n", "assert", "N", ">=", "1", "\n", "if", "N", "==", "1", ":", "\n", "        ", "return", "mesh", ".", "clone", "(", ")", "\n", "\n", "", "new_verts_list", ",", "new_faces_list", "=", "[", "]", ",", "[", "]", "\n", "for", "_", "in", "range", "(", "N", ")", ":", "\n", "        ", "new_verts_list", ".", "extend", "(", "verts", ".", "clone", "(", ")", "for", "verts", "in", "mesh", ".", "verts_list", "(", ")", ")", "\n", "new_faces_list", ".", "extend", "(", "faces", ".", "clone", "(", ")", "for", "faces", "in", "mesh", ".", "faces_list", "(", ")", ")", "\n", "\n", "", "textures", "=", "mesh", ".", "textures", "\n", "if", "isinstance", "(", "textures", ",", "TexturesVertex", ")", ":", "\n", "        ", "new_verts_rgb", "=", "textures", ".", "verts_features_padded", "(", ")", ".", "repeat", "(", "N", ",", "1", ",", "1", ")", "\n", "new_textures", "=", "TexturesVertex", "(", "verts_features", "=", "new_verts_rgb", ")", "\n", "new_textures", ".", "_num_verts_per_mesh", "=", "textures", ".", "_num_verts_per_mesh", "*", "N", "\n", "", "elif", "isinstance", "(", "textures", ",", "TexturesUV", ")", ":", "\n", "        ", "maps", "=", "textures", ".", "maps_padded", "(", ")", ".", "repeat", "(", "N", ",", "1", ",", "1", ",", "1", ")", "\n", "uvs", "=", "textures", ".", "verts_uvs_padded", "(", ")", ".", "repeat", "(", "N", ",", "1", ",", "1", ")", "\n", "faces", "=", "textures", ".", "faces_uvs_padded", "(", ")", ".", "repeat", "(", "N", ",", "1", ",", "1", ")", "\n", "new_textures", "=", "TexturesUV", "(", "maps", ",", "faces", ",", "uvs", ")", "\n", "new_textures", ".", "_num_faces_per_mesh", "=", "textures", ".", "_num_faces_per_mesh", "*", "N", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "return", "Meshes", "(", "verts", "=", "new_verts_list", ",", "faces", "=", "new_faces_list", ",", "textures", "=", "new_textures", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.utils.mesh.get_icosphere": [[69, 85], ["pytorch3d.utils.ico_sphere", "isinstance", "pytorch3d.utils.ico_sphere.get_mesh_verts_faces", "len", "sorted", "torch.zeros", "torch.arange", "pytorch3d.utils.ico_sphere.verts_packed", "pytorch3d.renderer.TexturesVertex", "range", "mesh.verts_packed.copy_", "faces.copy_", "mesh.verts_packed.min", "mesh.verts_packed.max", "mesh.verts_packed.min"], "function", ["None"], ["", "def", "get_icosphere", "(", "level", "=", "3", ",", "order_verts_by", "=", "None", ",", "colored", "=", "False", ")", ":", "\n", "    ", "mesh", "=", "ico_sphere", "(", "level", ")", "\n", "if", "order_verts_by", "is", "not", "None", ":", "\n", "        ", "assert", "isinstance", "(", "order_verts_by", ",", "int", ")", "\n", "verts", ",", "faces", "=", "mesh", ".", "get_mesh_verts_faces", "(", "0", ")", "\n", "N", "=", "len", "(", "verts", ")", "\n", "indices", "=", "sorted", "(", "range", "(", "N", ")", ",", "key", "=", "lambda", "i", ":", "verts", "[", "i", "]", "[", "order_verts_by", "]", ")", "\n", "mapping", "=", "torch", ".", "zeros", "(", "N", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "mapping", "[", "indices", "]", "=", "torch", ".", "arange", "(", "N", ")", "\n", "verts", ".", "copy_", "(", "verts", "[", "indices", "]", ")", ",", "faces", ".", "copy_", "(", "mapping", "[", "faces", "]", ")", "\n", "\n", "", "if", "colored", ":", "\n", "        ", "verts", "=", "mesh", ".", "verts_packed", "(", ")", "\n", "colors", "=", "(", "verts", "-", "verts", ".", "min", "(", "0", ")", "[", "0", "]", ")", "/", "(", "verts", ".", "max", "(", "0", ")", "[", "0", "]", "-", "verts", ".", "min", "(", "0", ")", "[", "0", "]", ")", "\n", "mesh", ".", "textures", "=", "TexturesVertex", "(", "verts_features", "=", "colors", "[", "None", "]", ")", "\n", "", "return", "mesh", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.utils.mesh.normal_consistency": [[87, 135], ["meshes.isempty", "len", "meshes.verts_packed", "meshes.faces_packed", "meshes.edges_packed", "meshes.verts_packed_to_mesh_idx", "meshes.faces_packed_to_edges_packed", "pytorch3d.loss.mesh_normal_consistency", "torch.tensor", "torch.no_grad", "meshes.faces_packed_to_edges_packed.reshape", "meshes.faces_packed.view().expand().transpose().reshape", "face_to_edge.reshape.sort", "torch.arange().view", "torch.cosine_similarity", "meshes.verts_packed_to_mesh_idx.bincount", "loss.mean.mean", "num_normals[].float", "meshes.faces_packed.view().expand().transpose", "torch.arange", "len", "meshes.faces_packed.view().expand", "meshes.faces_packed.view"], "function", ["None"], ["", "def", "normal_consistency", "(", "meshes", ",", "icosphere_topology", "=", "True", ",", "shared_topology", "=", "True", ")", ":", "\n", "    ", "\"\"\"Use a x10 faster routine than the one in PyTorch3D when meshes have an icosphere topology\"\"\"", "\n", "if", "not", "icosphere_topology", ":", "\n", "        ", "return", "mesh_normal_consistency", "(", "meshes", ")", "\n", "\n", "", "if", "meshes", ".", "isempty", "(", ")", ":", "\n", "        ", "return", "torch", ".", "tensor", "(", "[", "0.0", "]", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "meshes", ".", "device", ",", "requires_grad", "=", "True", ")", "\n", "\n", "", "N", "=", "len", "(", "meshes", ")", "\n", "verts_packed", "=", "meshes", ".", "verts_packed", "(", ")", "# (sum(V_n), 3)", "\n", "faces_packed", "=", "meshes", ".", "faces_packed", "(", ")", "# (sum(F_n), 3)", "\n", "edges_packed", "=", "meshes", ".", "edges_packed", "(", ")", "# (sum(E_n), 2)", "\n", "verts_packed_to_mesh_idx", "=", "meshes", ".", "verts_packed_to_mesh_idx", "(", ")", "# (sum(V_n),)", "\n", "face_to_edge", "=", "meshes", ".", "faces_packed_to_edges_packed", "(", ")", "# (sum(F_n), 3)", "\n", "F", "=", "faces_packed", ".", "shape", "[", "0", "]", "# sum(F_n)", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "edge_idx", "=", "face_to_edge", ".", "reshape", "(", "F", "*", "3", ")", "# (3 * F,) indexes into edges", "\n", "vert_idx", "=", "faces_packed", ".", "view", "(", "1", ",", "F", ",", "3", ")", ".", "expand", "(", "3", ",", "F", ",", "3", ")", ".", "transpose", "(", "0", ",", "1", ")", ".", "reshape", "(", "3", "*", "F", ",", "3", ")", "\n", "edge_idx", ",", "edge_sort_idx", "=", "edge_idx", ".", "sort", "(", ")", "\n", "vert_idx", "=", "vert_idx", "[", "edge_sort_idx", "]", "\n", "vert_edge_pair_idx", "=", "torch", ".", "arange", "(", "len", "(", "edge_idx", ")", ",", "device", "=", "meshes", ".", "device", ")", ".", "view", "(", "-", "1", ",", "2", ")", "\n", "\n", "", "v0_idx", "=", "edges_packed", "[", "edge_idx", ",", "0", "]", "\n", "v0", "=", "verts_packed", "[", "v0_idx", "]", "\n", "v1_idx", "=", "edges_packed", "[", "edge_idx", ",", "1", "]", "\n", "v1", "=", "verts_packed", "[", "v1_idx", "]", "\n", "\n", "# two of the following cross products are zeros as they are cross product", "\n", "# with either (v1-v0)x(v1-v0) or (v1-v0)x(v0-v0)", "\n", "n_temp0", "=", "(", "v1", "-", "v0", ")", ".", "cross", "(", "verts_packed", "[", "vert_idx", "[", ":", ",", "0", "]", "]", "-", "v0", ",", "dim", "=", "1", ")", "\n", "n_temp1", "=", "(", "v1", "-", "v0", ")", ".", "cross", "(", "verts_packed", "[", "vert_idx", "[", ":", ",", "1", "]", "]", "-", "v0", ",", "dim", "=", "1", ")", "\n", "n_temp2", "=", "(", "v1", "-", "v0", ")", ".", "cross", "(", "verts_packed", "[", "vert_idx", "[", ":", ",", "2", "]", "]", "-", "v0", ",", "dim", "=", "1", ")", "\n", "n", "=", "n_temp0", "+", "n_temp1", "+", "n_temp2", "\n", "n0", "=", "n", "[", "vert_edge_pair_idx", "[", ":", ",", "0", "]", "]", "\n", "n1", "=", "-", "n", "[", "vert_edge_pair_idx", "[", ":", ",", "1", "]", "]", "\n", "loss", "=", "1", "-", "torch", ".", "cosine_similarity", "(", "n0", ",", "n1", ",", "dim", "=", "1", ")", "\n", "\n", "if", "not", "shared_topology", ":", "\n", "        ", "verts_packed_to_mesh_idx", "=", "verts_packed_to_mesh_idx", "[", "vert_idx", "[", ":", ",", "0", "]", "]", "\n", "verts_packed_to_mesh_idx", "=", "verts_packed_to_mesh_idx", "[", "vert_edge_pair_idx", "[", ":", ",", "0", "]", "]", "\n", "num_normals", "=", "verts_packed_to_mesh_idx", ".", "bincount", "(", "minlength", "=", "N", ")", "\n", "weights", "=", "1.0", "/", "num_normals", "[", "verts_packed_to_mesh_idx", "]", ".", "float", "(", ")", "\n", "loss", "=", "(", "loss", "*", "weights", ")", ".", "sum", "(", ")", "/", "N", "\n", "", "else", ":", "\n", "        ", "loss", "=", "loss", ".", "mean", "(", ")", "\n", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.utils.mesh.save_mesh_as_obj": [[143, 153], ["mesh.get_mesh_verts_faces", "isinstance", "len", "mesh.save_obj", "[].clamp", "mesh.save_obj", "txt.verts_uvs_padded", "txt.faces_uvs_padded", "txt.maps_padded", "mesh.textures.verts_features_list"], "function", ["home.repos.pwc.inspect_result.monniert_unicorn.utils.mesh.save_obj", "home.repos.pwc.inspect_result.monniert_unicorn.utils.mesh.save_obj"], ["", "def", "save_mesh_as_obj", "(", "mesh", ",", "filename", ")", ":", "\n", "    ", "assert", "len", "(", "mesh", ")", "==", "1", "\n", "verts", ",", "faces", "=", "mesh", ".", "get_mesh_verts_faces", "(", "0", ")", "\n", "if", "isinstance", "(", "mesh", ".", "textures", ",", "TexturesUV", ")", ":", "\n", "        ", "txt", "=", "mesh", ".", "textures", "\n", "save_obj", "(", "filename", ",", "verts", ",", "faces", ",", "verts_uvs", "=", "txt", ".", "verts_uvs_padded", "(", ")", "[", "0", "]", ",", "faces_uvs", "=", "txt", ".", "faces_uvs_padded", "(", ")", "[", "0", "]", ",", "\n", "texture_map", "=", "txt", ".", "maps_padded", "(", ")", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "        ", "verts_rgb", "=", "mesh", ".", "textures", ".", "verts_features_list", "(", ")", "[", "0", "]", ".", "clamp", "(", "0", ",", "1", ")", "\n", "save_obj", "(", "filename", ",", "verts", ",", "faces", ",", "verts_rgb", "=", "verts_rgb", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.utils.mesh.convert_textures_uv_to_vertex": [[155, 159], ["torch.zeros_like", "textures_uv.faces_verts_textures_packed", "pytorch3d.renderer.TexturesVertex", "meshes.verts_packed", "pytorch3d.structures.utils.packed_to_list", "meshes.faces_packed", "meshes.num_verts_per_mesh"], "function", ["None"], ["", "", "def", "convert_textures_uv_to_vertex", "(", "textures_uv", ",", "meshes", ")", ":", "\n", "    ", "verts_colors_packed", "=", "torch", ".", "zeros_like", "(", "meshes", ".", "verts_packed", "(", ")", ")", "\n", "verts_colors_packed", "[", "meshes", ".", "faces_packed", "(", ")", "]", "=", "textures_uv", ".", "faces_verts_textures_packed", "(", ")", "\n", "return", "TexturesVertex", "(", "packed_to_list", "(", "verts_colors_packed", ",", "meshes", ".", "num_verts_per_mesh", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.utils.mesh.save_obj": [[161, 258], ["all", "pathlib.Path", "len", "ValueError", "len", "ValueError", "ValueError", "ValueError", "ValueError", "ValueError", "iopath.common.file_io.PathManager", "pytorch3d.io.utils._open_file", "mesh._save", "pathlib.Path.with_suffix", "pathlib.Path.with_suffix", "isinstance", "PIL.Image.fromarray", "f.write", "str", "str", "texture_map.detach().cpu", "texture_map.numpy().astype", "pytorch3d.io.utils._open_file", "Image.fromarray.save", "pytorch3d.io.utils._open_file", "f_mtl.write", "verts.dim", "verts.size", "faces.dim", "faces.size", "verts.dim", "verts.size", "faces_uvs.dim", "faces_uvs.size", "verts_uvs.dim", "verts_uvs.size", "texture_map.dim", "texture_map.size", "texture_map.detach", "texture_map.numpy"], "function", ["home.repos.pwc.inspect_result.monniert_unicorn.utils.mesh._save", "home.repos.pwc.inspect_result.monniert_unicorn.utils.image.ImageLogger.save"], ["", "def", "save_obj", "(", "\n", "f", ",", "\n", "verts", ",", "\n", "faces", ",", "\n", "decimal_places", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "path_manager", ":", "Optional", "[", "PathManager", "]", "=", "None", ",", "\n", "*", ",", "\n", "verts_rgb", ":", "Optional", "[", "torch", ".", "Tensor", "]", "=", "None", ",", "\n", "verts_uvs", ":", "Optional", "[", "torch", ".", "Tensor", "]", "=", "None", ",", "\n", "faces_uvs", ":", "Optional", "[", "torch", ".", "Tensor", "]", "=", "None", ",", "\n", "texture_map", ":", "Optional", "[", "torch", ".", "Tensor", "]", "=", "None", ",", "\n", ")", "->", "None", ":", "\n", "    ", "\"\"\"\n    Save a mesh to an .obj file.\n    Args:\n        f: File (str or path) to which the mesh should be written.\n        verts: FloatTensor of shape (V, 3) giving vertex coordinates.\n        faces: LongTensor of shape (F, 3) giving faces.\n        decimal_places: Number of decimal places for saving.\n        path_manager: Optional PathManager for interpreting f if\n            it is a str.\n        verts_uvs: FloatTensor of shape (V, 2) giving the uv coordinate per vertex.\n        faces_uvs: LongTensor of shape (F, 3) giving the index into verts_uvs for\n            each vertex in the face.\n        texture_map: FloatTensor of shape (H, W, 3) representing the texture map\n            for the mesh which will be saved as an image. The values are expected\n            to be in the range [0, 1],\n    \"\"\"", "\n", "if", "len", "(", "verts", ")", "and", "(", "verts", ".", "dim", "(", ")", "!=", "2", "or", "verts", ".", "size", "(", "1", ")", "!=", "3", ")", ":", "\n", "        ", "message", "=", "\"'verts' should either be empty or of shape (num_verts, 3).\"", "\n", "raise", "ValueError", "(", "message", ")", "\n", "\n", "", "if", "len", "(", "faces", ")", "and", "(", "faces", ".", "dim", "(", ")", "!=", "2", "or", "faces", ".", "size", "(", "1", ")", "!=", "3", ")", ":", "\n", "        ", "message", "=", "\"'faces' should either be empty or of shape (num_faces, 3).\"", "\n", "raise", "ValueError", "(", "message", ")", "\n", "\n", "", "if", "verts_rgb", "is", "not", "None", "and", "(", "verts", ".", "dim", "(", ")", "!=", "2", "or", "verts", ".", "size", "(", "1", ")", "!=", "3", ")", ":", "\n", "        ", "message", "=", "\"'verts_rgb' should either be empty or of shape (num_verts, 3).\"", "\n", "raise", "ValueError", "(", "message", ")", "\n", "\n", "", "if", "faces_uvs", "is", "not", "None", "and", "(", "faces_uvs", ".", "dim", "(", ")", "!=", "2", "or", "faces_uvs", ".", "size", "(", "1", ")", "!=", "3", ")", ":", "\n", "        ", "message", "=", "\"'faces_uvs' should either be empty or of shape (num_faces, 3).\"", "\n", "raise", "ValueError", "(", "message", ")", "\n", "\n", "", "if", "verts_uvs", "is", "not", "None", "and", "(", "verts_uvs", ".", "dim", "(", ")", "!=", "2", "or", "verts_uvs", ".", "size", "(", "1", ")", "!=", "2", ")", ":", "\n", "        ", "message", "=", "\"'verts_uvs' should either be empty or of shape (num_verts, 2).\"", "\n", "raise", "ValueError", "(", "message", ")", "\n", "\n", "", "if", "texture_map", "is", "not", "None", "and", "(", "texture_map", ".", "dim", "(", ")", "!=", "3", "or", "texture_map", ".", "size", "(", "2", ")", "!=", "3", ")", ":", "\n", "        ", "message", "=", "\"'texture_map' should either be empty or of shape (H, W, 3).\"", "\n", "raise", "ValueError", "(", "message", ")", "\n", "\n", "", "if", "path_manager", "is", "None", ":", "\n", "        ", "path_manager", "=", "PathManager", "(", ")", "\n", "\n", "", "save_texture", "=", "all", "(", "[", "t", "is", "not", "None", "for", "t", "in", "[", "faces_uvs", ",", "verts_uvs", ",", "texture_map", "]", "]", ")", "\n", "output_path", "=", "Path", "(", "f", ")", "\n", "\n", "# Save the .obj file", "\n", "with", "_open_file", "(", "f", ",", "path_manager", ",", "\"w\"", ")", "as", "f", ":", "\n", "        ", "if", "save_texture", ":", "\n", "# Add the header required for the texture info to be loaded correctly", "\n", "            ", "obj_header", "=", "\"\\nmtllib {0}.mtl\\nusemtl mesh\\n\\n\"", ".", "format", "(", "output_path", ".", "stem", ")", "\n", "f", ".", "write", "(", "obj_header", ")", "\n", "", "_save", "(", "\n", "f", ",", "\n", "verts", ",", "\n", "faces", ",", "\n", "decimal_places", ",", "\n", "verts_rgb", "=", "verts_rgb", ",", "\n", "verts_uvs", "=", "verts_uvs", ",", "\n", "faces_uvs", "=", "faces_uvs", ",", "\n", "save_texture", "=", "save_texture", ",", "\n", ")", "\n", "\n", "# Save the .mtl and .png files associated with the texture", "\n", "", "if", "save_texture", ":", "\n", "        ", "image_path", "=", "output_path", ".", "with_suffix", "(", "\".png\"", ")", "\n", "mtl_path", "=", "output_path", ".", "with_suffix", "(", "\".mtl\"", ")", "\n", "if", "isinstance", "(", "f", ",", "str", ")", ":", "\n", "# Back to str for iopath interpretation.", "\n", "            ", "image_path", "=", "str", "(", "image_path", ")", "\n", "mtl_path", "=", "str", "(", "mtl_path", ")", "\n", "\n", "# Save texture map to output folder", "\n", "# pyre-fixme[16] # undefined attribute cpu", "\n", "", "texture_map", "=", "texture_map", ".", "detach", "(", ")", ".", "cpu", "(", ")", "*", "255.0", "\n", "image", "=", "Image", ".", "fromarray", "(", "texture_map", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "with", "_open_file", "(", "image_path", ",", "path_manager", ",", "\"wb\"", ")", "as", "im_f", ":", "\n", "# pyre-fixme[6] # incompatible parameter type", "\n", "            ", "image", ".", "save", "(", "im_f", ")", "\n", "\n", "# Create .mtl file with the material name and texture map filename", "\n", "# TODO: enable material properties to also be saved.", "\n", "", "with", "_open_file", "(", "mtl_path", ",", "path_manager", ",", "\"w\"", ")", "as", "f_mtl", ":", "\n", "            ", "lines", "=", "f\"newmtl mesh\\n\"", "f\"map_Kd {output_path.stem}.png\\n\"", "\n", "f_mtl", ".", "write", "(", "lines", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.utils.mesh._save": [[260, 342], ["len", "len", "f.write", "len", "ValueError", "warnings.warn", "ValueError", "verts.cpu", "faces.cpu", "range", "len", "torch.any", "torch.any", "warnings.warn", "range", "len", "len", "ValueError", "ValueError", "verts_uvs.cpu", "faces_uvs.cpu", "range", "faces.dim", "faces.size", "verts_rgb.dim", "verts_rgb.size", "range", "faces_uvs.dim", "faces_uvs.size", "verts_uvs.dim", "verts_uvs.size", "range", "range", "range", "range"], "function", ["None"], ["", "", "", "def", "_save", "(", "\n", "f", ",", "\n", "verts", ",", "\n", "faces", ",", "\n", "decimal_places", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "*", ",", "\n", "verts_rgb", ":", "Optional", "[", "torch", ".", "Tensor", "]", "=", "None", ",", "\n", "verts_uvs", ":", "Optional", "[", "torch", ".", "Tensor", "]", "=", "None", ",", "\n", "faces_uvs", ":", "Optional", "[", "torch", ".", "Tensor", "]", "=", "None", ",", "\n", "save_texture", ":", "bool", "=", "False", ",", "\n", ")", "->", "None", ":", "\n", "\n", "    ", "if", "len", "(", "faces", ")", "and", "(", "faces", ".", "dim", "(", ")", "!=", "2", "or", "faces", ".", "size", "(", "1", ")", "!=", "3", ")", ":", "\n", "        ", "message", "=", "\"'faces' should either be empty or of shape (num_faces, 3).\"", "\n", "raise", "ValueError", "(", "message", ")", "\n", "\n", "", "if", "not", "(", "len", "(", "verts", ")", "or", "len", "(", "faces", ")", ")", ":", "\n", "        ", "warnings", ".", "warn", "(", "\"Empty 'verts' and 'faces' arguments provided\"", ")", "\n", "return", "\n", "\n", "", "if", "verts_rgb", "is", "not", "None", "and", "(", "verts_rgb", ".", "dim", "(", ")", "!=", "2", "or", "verts_rgb", ".", "size", "(", "1", ")", "!=", "3", ")", ":", "\n", "        ", "message", "=", "\"'verts_rgb' should either be None or of shape (num_verts, 3).\"", "\n", "raise", "ValueError", "(", "message", ")", "\n", "\n", "", "verts", ",", "faces", "=", "verts", ".", "cpu", "(", ")", ",", "faces", ".", "cpu", "(", ")", "\n", "\n", "lines", "=", "\"\"", "\n", "\n", "if", "len", "(", "verts", ")", ":", "\n", "        ", "if", "decimal_places", "is", "None", ":", "\n", "            ", "float_str", "=", "\"%f\"", "\n", "", "else", ":", "\n", "            ", "float_str", "=", "\"%\"", "+", "\".%df\"", "%", "decimal_places", "\n", "\n", "", "V", ",", "D", "=", "verts", ".", "shape", "\n", "for", "i", "in", "range", "(", "V", ")", ":", "\n", "            ", "vert", "=", "[", "float_str", "%", "verts", "[", "i", ",", "j", "]", "for", "j", "in", "range", "(", "D", ")", "]", "\n", "if", "verts_rgb", "is", "not", "None", ":", "\n", "                ", "vert", "+=", "[", "float_str", "%", "verts_rgb", "[", "i", ",", "j", "]", "for", "j", "in", "range", "(", "3", ")", "]", "\n", "", "lines", "+=", "\"v %s\\n\"", "%", "\" \"", ".", "join", "(", "vert", ")", "\n", "\n", "", "", "if", "save_texture", ":", "\n", "        ", "if", "faces_uvs", "is", "not", "None", "and", "(", "faces_uvs", ".", "dim", "(", ")", "!=", "2", "or", "faces_uvs", ".", "size", "(", "1", ")", "!=", "3", ")", ":", "\n", "            ", "message", "=", "\"'faces_uvs' should either be empty or of shape (num_faces, 3).\"", "\n", "raise", "ValueError", "(", "message", ")", "\n", "\n", "", "if", "verts_uvs", "is", "not", "None", "and", "(", "verts_uvs", ".", "dim", "(", ")", "!=", "2", "or", "verts_uvs", ".", "size", "(", "1", ")", "!=", "2", ")", ":", "\n", "            ", "message", "=", "\"'verts_uvs' should either be empty or of shape (num_verts, 2).\"", "\n", "raise", "ValueError", "(", "message", ")", "\n", "\n", "# pyre-fixme[16] # undefined attribute cpu", "\n", "", "verts_uvs", ",", "faces_uvs", "=", "verts_uvs", ".", "cpu", "(", ")", ",", "faces_uvs", ".", "cpu", "(", ")", "\n", "\n", "# Save verts uvs after verts", "\n", "if", "len", "(", "verts_uvs", ")", ":", "\n", "            ", "uV", ",", "uD", "=", "verts_uvs", ".", "shape", "\n", "for", "i", "in", "range", "(", "uV", ")", ":", "\n", "                ", "uv", "=", "[", "float_str", "%", "verts_uvs", "[", "i", ",", "j", "]", "for", "j", "in", "range", "(", "uD", ")", "]", "\n", "lines", "+=", "\"vt %s\\n\"", "%", "\" \"", ".", "join", "(", "uv", ")", "\n", "\n", "", "", "", "if", "torch", ".", "any", "(", "faces", ">=", "verts", ".", "shape", "[", "0", "]", ")", "or", "torch", ".", "any", "(", "faces", "<", "0", ")", ":", "\n", "        ", "warnings", ".", "warn", "(", "\"Faces have invalid indices\"", ")", "\n", "\n", "", "if", "len", "(", "faces", ")", ":", "\n", "        ", "F", ",", "P", "=", "faces", ".", "shape", "\n", "for", "i", "in", "range", "(", "F", ")", ":", "\n", "            ", "if", "save_texture", ":", "\n", "# Format faces as {verts_idx}/{verts_uvs_idx}", "\n", "                ", "face", "=", "[", "\n", "\"%d/%d\"", "%", "(", "faces", "[", "i", ",", "j", "]", "+", "1", ",", "faces_uvs", "[", "i", ",", "j", "]", "+", "1", ")", "for", "j", "in", "range", "(", "P", ")", "\n", "]", "\n", "", "else", ":", "\n", "                ", "face", "=", "[", "\"%d\"", "%", "(", "faces", "[", "i", ",", "j", "]", "+", "1", ")", "for", "j", "in", "range", "(", "P", ")", "]", "\n", "\n", "", "if", "i", "+", "1", "<", "F", ":", "\n", "                ", "lines", "+=", "\"f %s\\n\"", "%", "\" \"", ".", "join", "(", "face", ")", "\n", "\n", "", "elif", "i", "+", "1", "==", "F", ":", "\n", "# No newline at the end of the file.", "\n", "                ", "lines", "+=", "\"f %s\"", "%", "\" \"", ".", "join", "(", "face", ")", "\n", "\n", "", "", "", "f", ".", "write", "(", "lines", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.monniert_unicorn.utils.metrics.Metrics.__init__": [[22, 32], ["list", "collections.defaultdict", "pathlib.Path", "metrics.Metrics.log_file.exists", "open", "f.write"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "*", "names", ",", "log_file", "=", "None", ",", "append", "=", "False", ")", ":", "\n", "        ", "self", ".", "names", "=", "list", "(", "names", ")", "\n", "self", ".", "meters", "=", "defaultdict", "(", "AverageMeter", ")", "\n", "if", "log_file", "is", "not", "None", "and", "self", ".", "log_data", ":", "\n", "            ", "self", ".", "log_file", "=", "Path", "(", "log_file", ")", "\n", "if", "not", "self", ".", "log_file", ".", "exists", "(", ")", "or", "not", "append", ":", "\n", "                ", "with", "open", "(", "self", ".", "log_file", ",", "mode", "=", "'w'", ")", "as", "f", ":", "\n", "                    ", "f", ".", "write", "(", "\"iteration\\tepoch\\tbatch\\t\"", "+", "\"\\t\"", ".", "join", "(", "self", ".", "names", ")", "+", "\"\\n\"", ")", "\n", "", "", "", "else", ":", "\n", "            ", "self", ".", "log_file", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.utils.metrics.Metrics.log_and_reset": [[33, 36], ["metrics.Metrics.log", "metrics.Metrics.reset"], "methods", ["home.repos.pwc.inspect_result.monniert_unicorn.utils.metrics.Metrics.log", "home.repos.pwc.inspect_result.monniert_unicorn.utils.metrics.AverageMeter.reset"], ["", "", "def", "log_and_reset", "(", "self", ",", "*", "names", ",", "it", "=", "None", ",", "epoch", "=", "None", ",", "batch", "=", "None", ")", ":", "\n", "        ", "self", ".", "log", "(", "it", ",", "epoch", ",", "batch", ")", "\n", "self", ".", "reset", "(", "*", "names", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.utils.metrics.Metrics.log": [[37, 41], ["open", "file.write", "map"], "methods", ["None"], ["", "def", "log", "(", "self", ",", "it", ",", "epoch", ",", "batch", ")", ":", "\n", "        ", "if", "self", ".", "log_file", "is", "not", "None", ":", "\n", "            ", "with", "open", "(", "self", ".", "log_file", ",", "mode", "=", "\"a\"", ")", "as", "file", ":", "\n", "                ", "file", ".", "write", "(", "f\"{it}\\t{epoch}\\t{batch}\\t\"", "+", "\"\\t\"", ".", "join", "(", "map", "(", "\"{:.6f}\"", ".", "format", ",", "self", ".", "values", ")", ")", "+", "\"\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.utils.metrics.Metrics.reset": [[42, 47], ["len", "metrics.Metrics.reset"], "methods", ["home.repos.pwc.inspect_result.monniert_unicorn.utils.metrics.AverageMeter.reset"], ["", "", "", "def", "reset", "(", "self", ",", "*", "names", ")", ":", "\n", "        ", "if", "len", "(", "names", ")", "==", "0", ":", "\n", "            ", "names", "=", "self", ".", "names", "\n", "", "for", "name", "in", "names", ":", "\n", "            ", "self", "[", "name", "]", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.utils.metrics.Metrics.read_log": [[48, 53], ["pandas.read_csv", "pandas.DataFrame"], "methods", ["None"], ["", "", "def", "read_log", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "log_file", "is", "not", "None", ":", "\n", "            ", "return", "pd", ".", "read_csv", "(", "self", ".", "log_file", ",", "sep", "=", "'\\t'", ",", "index_col", "=", "0", ")", "\n", "", "else", ":", "\n", "            ", "return", "pd", ".", "DataFrame", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.utils.metrics.Metrics.__getitem__": [[54, 56], ["None"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "name", ")", ":", "\n", "        ", "return", "self", ".", "meters", "[", "name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.utils.metrics.Metrics.__repr__": [[57, 59], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "', '", ".", "join", "(", "[", "'{}={:.4f}'", ".", "format", "(", "name", ",", "self", "[", "name", "]", ".", "avg", ")", "for", "name", "in", "self", ".", "names", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.utils.metrics.Metrics.__len__": [[60, 62], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "names", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.utils.metrics.Metrics.values": [[63, 66], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "values", "(", "self", ")", ":", "\n", "        ", "return", "[", "self", "[", "name", "]", ".", "avg", "for", "name", "in", "self", ".", "names", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.utils.metrics.Metrics.update": [[67, 82], ["len", "isinstance", "d.items", "isinstance", "metrics.Metrics.update", "len", "KeyError", "metrics.Metrics.update", "metrics.Metrics.update"], "methods", ["home.repos.pwc.inspect_result.monniert_unicorn.utils.metrics.MeshEvaluator.update", "home.repos.pwc.inspect_result.monniert_unicorn.utils.metrics.MeshEvaluator.update", "home.repos.pwc.inspect_result.monniert_unicorn.utils.metrics.MeshEvaluator.update"], ["", "def", "update", "(", "self", ",", "*", "name_val", ",", "N", "=", "1", ")", ":", "\n", "        ", "if", "len", "(", "name_val", ")", "==", "1", ":", "\n", "            ", "d", "=", "name_val", "[", "0", "]", "\n", "assert", "isinstance", "(", "d", ",", "dict", ")", "\n", "for", "k", ",", "v", "in", "d", ".", "items", "(", ")", ":", "\n", "                ", "self", ".", "update", "(", "k", ",", "v", ",", "N", "=", "N", ")", "\n", "", "", "else", ":", "\n", "            ", "assert", "len", "(", "name_val", ")", "==", "2", "\n", "name", ",", "val", "=", "name_val", "\n", "if", "name", "not", "in", "self", ".", "names", ":", "\n", "                ", "raise", "KeyError", "(", "f'{name} not in current metrics'", ")", "\n", "", "if", "isinstance", "(", "val", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "                ", "self", "[", "name", "]", ".", "update", "(", "val", "[", "0", "]", ",", "N", "=", "val", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "                ", "self", "[", "name", "]", ".", "update", "(", "val", ",", "N", "=", "N", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.utils.metrics.Metrics.get_named_values": [[83, 89], ["list", "map", "zip", "filter_fn", "zip", "filter", "zip"], "methods", ["None"], ["", "", "", "def", "get_named_values", "(", "self", ",", "filter_fn", "=", "None", ")", ":", "\n", "        ", "names", ",", "values", "=", "self", ".", "names", ",", "self", ".", "values", "\n", "if", "filter_fn", "is", "not", "None", ":", "\n", "            ", "zip_fn", "=", "lambda", "k_v", ":", "filter_fn", "(", "k_v", "[", "0", "]", ")", "\n", "names", ",", "values", "=", "map", "(", "list", ",", "zip", "(", "*", "filter", "(", "zip_fn", ",", "zip", "(", "names", ",", "values", ")", ")", ")", ")", "\n", "", "return", "list", "(", "zip", "(", "names", ",", "values", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.utils.metrics.AverageMeter.__init__": [[93, 95], ["metrics.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.monniert_unicorn.utils.metrics.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.utils.metrics.AverageMeter.reset": [[96, 101], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.utils.metrics.AverageMeter.update": [[102, 107], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "N", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "N", "\n", "self", ".", "count", "+=", "N", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "if", "self", ".", "count", "!=", "0", "else", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.utils.metrics.MeshEvaluator.__init__": [[115, 120], ["metrics.Metrics"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "names", "=", "None", ",", "log_file", "=", "None", ",", "fast_cpu", "=", "False", ",", "append", "=", "False", ")", ":", "\n", "        ", "self", ".", "names", "=", "[", "n", "for", "n", ",", "v", "in", "EMPTY_PCL_LIST", "]", "if", "names", "is", "None", "else", "names", "\n", "self", ".", "metrics", "=", "Metrics", "(", "*", "self", ".", "names", ",", "log_file", "=", "log_file", ",", "append", "=", "append", ")", "\n", "self", ".", "fast_cpu", "=", "fast_cpu", "\n", "self", ".", "N", "=", "50000", "if", "fast_cpu", "else", "100000", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.utils.metrics.MeshEvaluator.update": [[121, 126], ["range", "len", "metrics.MeshEvaluator.evaluate", "metrics.MeshEvaluator.metrics.update"], "methods", ["home.repos.pwc.inspect_result.monniert_unicorn.utils.metrics.MeshEvaluator.evaluate", "home.repos.pwc.inspect_result.monniert_unicorn.utils.metrics.MeshEvaluator.update"], ["", "def", "update", "(", "self", ",", "mesh_pred", ",", "labels", ")", ":", "\n", "        ", "pc_gt", ",", "normal_gt", "=", "labels", "[", "'points'", "]", ",", "labels", "[", "'normals'", "]", "\n", "for", "k", "in", "range", "(", "len", "(", "mesh_pred", ")", ")", ":", "\n", "            ", "res", "=", "self", ".", "evaluate", "(", "mesh_pred", "[", "k", "]", ",", "pc_gt", "=", "pc_gt", "[", "k", "]", ",", "normal_gt", "=", "normal_gt", "[", "k", "]", ",", "run_icp", "=", "True", ")", "\n", "self", ".", "metrics", ".", "update", "(", "res", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.utils.metrics.MeshEvaluator.evaluate": [[127, 168], ["isinstance", "map", "zip", "list", "collections.OrderedDict", "mesh_gt.verts_packed().abs().max().item", "map", "pytorch3d.ops.sample_points_from_meshes", "len", "len", "chamfer.chamfer_distance", "filter", "len", "abs", "list", "utils.logger.print_warning", "pytorch3d.ops.sample_points_from_meshes", "torch.randperm", "torch.randperm", "mesh_gt.verts_packed().abs().max", "map", "len", "len", "pytorch3d.ops.points_alignment.iterative_closest_point", "chamfer_L1.item", "normal.item", "mesh_gt.verts_packed().abs", "m.scale_verts", "mesh_gt.verts_packed"], "methods", ["home.repos.pwc.inspect_result.monniert_unicorn.utils.chamfer.chamfer_distance", "home.repos.pwc.inspect_result.monniert_unicorn.utils.logger.print_warning"], ["", "", "def", "evaluate", "(", "self", ",", "mesh_pred", "=", "None", ",", "mesh_gt", "=", "None", ",", "pc_gt", "=", "None", ",", "normal_gt", "=", "None", ",", "run_icp", "=", "False", ")", ":", "\n", "        ", "assert", "mesh_gt", "is", "not", "None", "or", "pc_gt", "is", "not", "None", "\n", "\n", "results", "=", "[", "]", "\n", "if", "mesh_gt", "is", "not", "None", ":", "\n", "            ", "assert", "len", "(", "mesh_gt", ")", "==", "1", "\n", "scale", "=", "mesh_gt", ".", "verts_packed", "(", ")", ".", "abs", "(", ")", ".", "max", "(", ")", ".", "item", "(", ")", "\n", "if", "abs", "(", "scale", "-", "0.5", ")", ">", "0.02", ":", "# mesh not normalized to unit cube [-0.5, 0.5]^3", "\n", "                ", "mesh_pred", ",", "mesh_gt", "=", "list", "(", "map", "(", "lambda", "m", ":", "m", ".", "scale_verts", "(", "0.5", "/", "scale", ")", ",", "[", "mesh_pred", ",", "mesh_gt", "]", ")", ")", "\n", "print_warning", "(", "'mesh not normalized to unit_cube'", ")", "\n", "", "pc_gt", ",", "normal_gt", "=", "map", "(", "torch", ".", "squeeze", ",", "sample_points", "(", "mesh_gt", ",", "self", ".", "N", ",", "return_normals", "=", "True", ")", ")", "\n", "", "assert", "isinstance", "(", "pc_gt", ",", "torch", ".", "Tensor", ")", "\n", "with_norm", "=", "normal_gt", "is", "not", "None", "\n", "\n", "pc_pred", ",", "normal_pred", "=", "map", "(", "torch", ".", "squeeze", ",", "sample_points", "(", "mesh_pred", ",", "self", ".", "N", ",", "return_normals", "=", "True", ")", ")", "\n", "if", "self", ".", "N", "<", "len", "(", "pc_pred", ")", ":", "\n", "            ", "idxs", "=", "torch", ".", "randperm", "(", "len", "(", "pc_pred", ")", ")", "[", ":", "self", ".", "N", "]", "\n", "pc_pred", ",", "normal_pred", "=", "pc_pred", "[", "idxs", "]", ",", "normal_pred", "[", "idxs", "]", "if", "with_norm", "else", "None", "\n", "", "if", "self", ".", "N", "<", "len", "(", "pc_gt", ")", ":", "\n", "            ", "idxs", "=", "torch", ".", "randperm", "(", "len", "(", "pc_gt", ")", ")", "[", ":", "self", ".", "N", "]", "\n", "pc_gt", ",", "normal_gt", "=", "pc_gt", "[", "idxs", "]", ",", "normal_gt", "[", "idxs", "]", "if", "with_norm", "else", "None", "\n", "\n", "", "if", "run_icp", ":", "\n", "            ", "max_iter", "=", "10", "if", "self", ".", "fast_cpu", "else", "30", "\n", "pc_pred_icp", "=", "iterative_closest_point", "(", "pc_pred", "[", "None", "]", ",", "pc_gt", "[", "None", "]", ",", "max_iterations", "=", "max_iter", ")", "[", "2", "]", "[", "0", "]", "\n", "pc_preds", ",", "tags", "=", "[", "pc_pred", ",", "pc_pred_icp", "]", ",", "[", "''", ",", "'-ICP'", "]", "\n", "", "else", ":", "\n", "            ", "pc_preds", ",", "tags", "=", "[", "pc_pred", "]", ",", "[", "''", "]", "\n", "\n", "", "if", "not", "with_norm", ":", "\n", "            ", "normal_pred", ",", "normal_gt", "=", "None", ",", "None", "\n", "", "else", ":", "\n", "            ", "normal_pred", ",", "normal_gt", "=", "normal_pred", "[", "None", "]", ",", "normal_gt", "[", "None", "]", "\n", "", "for", "pc", ",", "tag", "in", "zip", "(", "pc_preds", ",", "tags", ")", ":", "\n", "            ", "chamfer_L1", ",", "normal", "=", "chamfer_distance", "(", "pc_gt", "[", "None", "]", ",", "pc", "[", "None", "]", ",", "x_normals", "=", "normal_gt", ",", "y_normals", "=", "normal_pred", ",", "\n", "return_L1", "=", "True", ",", "return_mean", "=", "True", ")", "\n", "chamfer_L1", "=", "chamfer_L1", "*", "CHAMFER_FACTOR", "\n", "results", "+=", "[", "(", "'chamfer-L1'", "+", "tag", ",", "chamfer_L1", ".", "item", "(", ")", ")", ",", "(", "'normal-cos'", "+", "tag", ",", "1", "-", "normal", ".", "item", "(", ")", ")", "]", "\n", "\n", "", "results", "=", "list", "(", "filter", "(", "lambda", "x", ":", "x", "[", "0", "]", "in", "self", ".", "names", ",", "results", ")", ")", "\n", "return", "OrderedDict", "(", "results", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.utils.metrics.MeshEvaluator.compute": [[169, 171], ["None"], "methods", ["None"], ["", "def", "compute", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "metrics", ".", "values", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.utils.metrics.MeshEvaluator.log_and_reset": [[172, 174], ["metrics.MeshEvaluator.metrics.log_and_reset"], "methods", ["home.repos.pwc.inspect_result.monniert_unicorn.utils.metrics.MeshEvaluator.log_and_reset"], ["", "def", "log_and_reset", "(", "self", ",", "it", ",", "epoch", ",", "batch", ")", ":", "\n", "        ", "self", ".", "metrics", ".", "log_and_reset", "(", "it", "=", "it", ",", "epoch", "=", "epoch", ",", "batch", "=", "batch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.utils.metrics.MeshEvaluator.read_log": [[175, 177], ["metrics.MeshEvaluator.metrics.read_log"], "methods", ["home.repos.pwc.inspect_result.monniert_unicorn.utils.metrics.MeshEvaluator.read_log"], ["", "def", "read_log", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "metrics", ".", "read_log", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.monniert_unicorn.utils.logger.print_log": [[10, 27], ["logging.getLogger", "logger.print_info", "logging.getLogger.info", "logger.print_warning", "logging.getLogger.warning", "logger.print_error", "logging.getLogger.error"], "function", ["home.repos.pwc.inspect_result.monniert_unicorn.utils.logger.print_info", "home.repos.pwc.inspect_result.monniert_unicorn.utils.logger.print_warning", "home.repos.pwc.inspect_result.monniert_unicorn.utils.logger.print_error"], ["", "def", "print_log", "(", "s", ",", "logger", "=", "None", ",", "level", "=", "'info'", ")", ":", "\n", "    ", "if", "Verbose", ".", "mute", ":", "\n", "        ", "return", "None", "\n", "\n", "", "if", "logger", "is", "None", ":", "\n", "        ", "logger", "=", "logging", ".", "getLogger", "(", "'trainer'", ")", "\n", "", "if", "level", "==", "'info'", ":", "\n", "        ", "print_info", "(", "s", ")", "\n", "logger", ".", "info", "(", "s", ")", "\n", "", "elif", "level", "==", "'warning'", ":", "\n", "        ", "print_warning", "(", "s", ")", "\n", "logger", ".", "warning", "(", "s", ")", "\n", "", "elif", "level", "==", "'error'", ":", "\n", "        ", "print_error", "(", "s", ")", "\n", "logger", ".", "error", "(", "s", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.utils.logger.create_logger": [[29, 39], ["path_exists", "logging.getLogger", "logging.FileHandler", "logging.Formatter", "logging.FileHandler.setFormatter", "logging.getLogger.addHandler", "logging.getLogger.setLevel"], "function", ["home.repos.pwc.inspect_result.monniert_unicorn.utils.__init__.path_exists"], ["", "", "def", "create_logger", "(", "log_dir", ",", "name", "=", "'trainer'", ")", ":", "\n", "    ", "log_dir", "=", "path_exists", "(", "log_dir", ")", "\n", "logger", "=", "logging", ".", "getLogger", "(", "name", ")", "\n", "file_path", "=", "log_dir", "/", "\"{}.log\"", ".", "format", "(", "name", ")", "\n", "hdlr", "=", "logging", ".", "FileHandler", "(", "file_path", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "\"[%(asctime)s] %(levelname)s: %(message)s\"", ")", "\n", "hdlr", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "hdlr", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.utils.logger.get_time": [[52, 54], ["time.strftime"], "function", ["None"], ["", "def", "get_time", "(", ")", ":", "\n", "    ", "return", "time", ".", "strftime", "(", "\"%Y-%m-%d %H:%M:%S\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.utils.logger.print_info": [[56, 58], ["print", "str", "logger.get_time"], "function", ["home.repos.pwc.inspect_result.monniert_unicorn.utils.logger.get_time"], ["", "def", "print_info", "(", "s", ")", ":", "\n", "    ", "print", "(", "TerminalColors", ".", "OKBLUE", "+", "\"[\"", "+", "get_time", "(", ")", "+", "\"] \"", "+", "str", "(", "s", ")", "+", "TerminalColors", ".", "ENDC", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.utils.logger.print_warning": [[60, 62], ["print", "str", "logger.get_time"], "function", ["home.repos.pwc.inspect_result.monniert_unicorn.utils.logger.get_time"], ["", "def", "print_warning", "(", "s", ")", ":", "\n", "    ", "print", "(", "TerminalColors", ".", "WARNING", "+", "\"[\"", "+", "get_time", "(", ")", "+", "\"] WARN \"", "+", "str", "(", "s", ")", "+", "TerminalColors", ".", "ENDC", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.utils.logger.print_error": [[64, 66], ["print", "str", "logger.get_time"], "function", ["home.repos.pwc.inspect_result.monniert_unicorn.utils.logger.get_time"], ["", "def", "print_error", "(", "s", ")", ":", "\n", "    ", "print", "(", "TerminalColors", ".", "FAIL", "+", "\"[\"", "+", "get_time", "(", ")", "+", "\"] ERROR \"", "+", "str", "(", "s", ")", "+", "TerminalColors", ".", "ENDC", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.monniert_unicorn.utils.plot.Visualizer.__init__": [[20, 31], ["visdom.Visdom", "visdom.Visdom.delete_env", "logger.print_log", "logger.print_log"], "methods", ["home.repos.pwc.inspect_result.monniert_unicorn.utils.logger.print_log", "home.repos.pwc.inspect_result.monniert_unicorn.utils.logger.print_log"], ["    ", "def", "__init__", "(", "self", ",", "viz_port", ",", "run_dir", ")", ":", "\n", "        ", "if", "viz_port", "is", "not", "None", ":", "\n", "            ", "import", "visdom", "\n", "os", ".", "environ", "[", "\"http_proxy\"", "]", "=", "\"\"", "# XXX set to solve proxy issues", "\n", "visualizer", "=", "visdom", ".", "Visdom", "(", "port", "=", "viz_port", ",", "env", "=", "f'{run_dir.parent.name}_{run_dir.name}'", ")", "\n", "visualizer", ".", "delete_env", "(", "visualizer", ".", "env", ")", "# Clean env before plotting", "\n", "print_log", "(", "f\"Visualizer initialised at {viz_port}\"", ")", "\n", "", "else", ":", "\n", "            ", "visualizer", "=", "None", "\n", "print_log", "(", "\"No visualizer initialized\"", ")", "\n", "", "self", ".", "visualizer", "=", "visualizer", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.utils.plot.Visualizer.upload_images": [[32, 40], ["plot.Visualizer.visualizer.images", "max", "torch.nn.functional.interpolate", "len", "torch.nn.functional.interpolate.clamp"], "methods", ["None"], ["", "def", "upload_images", "(", "self", ",", "images", ",", "title", ",", "ncol", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "visualizer", "is", "None", ":", "\n", "            ", "return", "None", "\n", "", "if", "max", "(", "images", ".", "shape", "[", "2", ":", "]", ")", ">", "VIZ_MAX_IMG_SIZE", ":", "\n", "            ", "images", "=", "F", ".", "interpolate", "(", "images", ",", "size", "=", "VIZ_MAX_IMG_SIZE", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "", "ncol", "=", "ncol", "or", "len", "(", "images", ")", "\n", "self", ".", "visualizer", ".", "images", "(", "images", ".", "clamp", "(", "0", ",", "1", ")", ",", "win", "=", "title", ",", "nrow", "=", "ncol", ",", "opts", "=", "{", "'title'", ":", "title", ",", "\n", "'store_history'", ":", "True", ",", "'width'", ":", "VIZ_WIDTH", ",", "'height'", ":", "VIZ_HEIGHT", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.utils.plot.Visualizer.upload_lineplot": [[41, 48], ["map", "plot.Visualizer.visualizer.line", "zip", "len"], "methods", ["None"], ["", "def", "upload_lineplot", "(", "self", ",", "cur_iter", ",", "named_values", ",", "title", ")", ":", "\n", "        ", "if", "self", ".", "visualizer", "is", "None", ":", "\n", "            ", "return", "None", "\n", "", "names", ",", "values", "=", "map", "(", "list", ",", "zip", "(", "*", "named_values", ")", ")", "\n", "y", ",", "x", "=", "[", "values", "]", ",", "[", "[", "cur_iter", "]", "*", "len", "(", "values", ")", "]", "\n", "self", ".", "visualizer", ".", "line", "(", "y", ",", "x", ",", "win", "=", "title", ",", "update", "=", "'append'", ",", "opts", "=", "{", "'title'", ":", "title", ",", "\n", "'legend'", ":", "names", ",", "'width'", ":", "VIZ_WIDTH", ",", "'height'", ":", "VIZ_HEIGHT", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.utils.plot.Visualizer.upload_barplot": [[49, 54], ["map", "plot.Visualizer.visualizer.bar", "zip"], "methods", ["None"], ["", "def", "upload_barplot", "(", "self", ",", "named_values", ",", "title", ")", ":", "\n", "        ", "if", "self", ".", "visualizer", "is", "None", ":", "\n", "            ", "return", "None", "\n", "", "names", ",", "values", "=", "map", "(", "list", ",", "zip", "(", "*", "named_values", ")", ")", "\n", "self", ".", "visualizer", ".", "bar", "(", "values", ",", "win", "=", "title", ",", "opts", "=", "{", "'title'", ":", "title", ",", "'width'", ":", "VIZ_HEIGHT", ",", "'height'", ":", "VIZ_HEIGHT", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.utils.plot.seaborn_context": [[56, 61], ["seaborn.color_palette", "seaborn.axes_style"], "function", ["None"], ["", "", "@", "contextmanager", "\n", "def", "seaborn_context", "(", "n_colors", "=", "10", ")", ":", "\n", "    ", "with", "sns", ".", "color_palette", "(", "'colorblind'", ",", "n_colors", ")", ",", "sns", ".", "axes_style", "(", "'white'", ",", "{", "'axes.grid'", ":", "True", ",", "'legend.frameon'", ":", "True", "}", ")", ":", "\n", "        ", "yield", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.utils.plot.plot_lines": [[63, 86], ["isinstance", "plot.seaborn_context", "matplotlib.pyplot.subplots", "ax.grid", "ax.grid", "ax.legend", "ax.set_title", "fig.tight_layout", "len", "ax.set_ylim", "ax.set_yticks", "df[].dropna", "df[].plot", "len", "df[].dropna.plot", "range"], "function", ["home.repos.pwc.inspect_result.monniert_unicorn.utils.plot.seaborn_context"], ["", "", "def", "plot_lines", "(", "df", ",", "columns", ",", "title", ",", "figsize", "=", "(", "10", ",", "5.625", ")", ",", "drop_na", "=", "True", ",", "style", "=", "None", ",", "unit_yaxis", "=", "False", ",", "lw", "=", "2", ")", ":", "\n", "    ", "if", "not", "isinstance", "(", "columns", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "        ", "columns", "=", "[", "columns", "]", "\n", "\n", "", "with", "seaborn_context", "(", "len", "(", "columns", ")", ")", ":", "\n", "        ", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "figsize", "=", "figsize", ")", "\n", "for", "y", "in", "columns", ":", "\n", "            ", "if", "drop_na", ":", "\n", "                ", "s", "=", "df", "[", "y", "]", ".", "dropna", "(", ")", "\n", "if", "len", "(", "s", ")", ">", "0", ":", "\n", "                    ", "s", ".", "plot", "(", "ax", "=", "ax", ",", "linewidth", "=", "lw", ",", "style", "=", "style", ")", "\n", "", "", "else", ":", "\n", "                ", "df", "[", "y", "]", ".", "plot", "(", "ax", "=", "ax", ",", "linewidth", "=", "lw", ",", "style", "=", "style", ")", "\n", "", "", "if", "unit_yaxis", ":", "\n", "            ", "ax", ".", "set_ylim", "(", "(", "0", ",", "1", ")", ")", "\n", "ax", ".", "set_yticks", "(", "[", "k", "/", "10", "for", "k", "in", "range", "(", "11", ")", "]", ")", "\n", "", "ax", ".", "grid", "(", "axis", "=", "\"x\"", ",", "which", "=", "'both'", ",", "color", "=", "'0.5'", ",", "linestyle", "=", "'--'", ",", "linewidth", "=", "0.5", ")", "\n", "ax", ".", "grid", "(", "axis", "=", "'y'", ",", "which", "=", "'major'", ",", "color", "=", "'0.5'", ",", "linestyle", "=", "'-'", ",", "linewidth", "=", "0.5", ")", "\n", "ax", ".", "legend", "(", "framealpha", "=", "1", ",", "edgecolor", "=", "'0.3'", ",", "fancybox", "=", "False", ")", "\n", "ax", ".", "set_title", "(", "title", ",", "fontweight", "=", "\"bold\"", ")", "\n", "fig", ".", "tight_layout", "(", ")", "\n", "\n", "", "return", "fig", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.utils.plot.plot_bar": [[88, 102], ["isinstance", "plot.seaborn_context", "matplotlib.pyplot.subplots", "df.plot", "ax.grid", "ax.grid", "ax.set_title", "fig.tight_layout", "ax.set_ylim", "ax.set_yticks", "range"], "function", ["home.repos.pwc.inspect_result.monniert_unicorn.utils.plot.seaborn_context"], ["", "def", "plot_bar", "(", "df", ",", "title", ",", "figsize", "=", "(", "10", ",", "5.625", ")", ",", "unit_yaxis", "=", "False", ")", ":", "\n", "    ", "assert", "isinstance", "(", "df", ",", "pd", ".", "Series", ")", "\n", "with", "seaborn_context", "(", "1", ")", ":", "\n", "        ", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "figsize", "=", "figsize", ")", "\n", "df", ".", "plot", "(", "kind", "=", "'bar'", ",", "ax", "=", "ax", ",", "edgecolor", "=", "'k'", ",", "width", "=", "0.8", ",", "rot", "=", "0", ",", "linewidth", "=", "1", ")", "\n", "if", "unit_yaxis", ":", "\n", "            ", "ax", ".", "set_ylim", "(", "(", "0", ",", "1", ")", ")", "\n", "ax", ".", "set_yticks", "(", "[", "k", "/", "10", "for", "k", "in", "range", "(", "11", ")", "]", ")", "\n", "", "ax", ".", "grid", "(", "axis", "=", "\"x\"", ",", "which", "=", "'both'", ",", "color", "=", "'0.5'", ",", "linestyle", "=", "'--'", ",", "linewidth", "=", "0.5", ")", "\n", "ax", ".", "grid", "(", "axis", "=", "'y'", ",", "which", "=", "'major'", ",", "color", "=", "'0.5'", ",", "linestyle", "=", "'-'", ",", "linewidth", "=", "0.5", ")", "\n", "ax", ".", "set_title", "(", "title", ",", "fontweight", "=", "\"bold\"", ")", "\n", "fig", ".", "tight_layout", "(", ")", "\n", "\n", "", "return", "fig", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.utils.plot.plot_img_grid": [[104, 122], ["matplotlib.pyplot.subplots", "zip", "isinstance", "axarr.ravel", "ax.set_axis_off", "len", "images.transpose().clip.permute().clamp", "images.transpose().clip.transpose().clip", "len", "ax.imshow", "ax.imshow", "images.transpose().clip.permute", "images.transpose().clip.transpose", "len"], "function", ["None"], ["", "def", "plot_img_grid", "(", "images", ",", "nrow", "=", "1", ",", "ncol", "=", "None", ",", "scale", "=", "4", ")", ":", "\n", "    ", "if", "len", "(", "images", ".", "shape", ")", "==", "4", "and", "images", ".", "shape", "[", "-", "1", "]", ">", "3", ":", "# images are BCHW", "\n", "        ", "if", "isinstance", "(", "images", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "images", "=", "images", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "clamp", "(", "0", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "images", "=", "images", ".", "transpose", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "clip", "(", "0", ",", "1", ")", "\n", "", "", "if", "ncol", "is", "None", ":", "\n", "        ", "ncol", "=", "(", "len", "(", "images", ")", "-", "1", ")", "//", "nrow", "+", "1", "\n", "", "gridspec_kw", "=", "{", "\"wspace\"", ":", "0.05", ",", "\"hspace\"", ":", "0.05", "}", "\n", "fig", ",", "axarr", "=", "plt", ".", "subplots", "(", "nrow", ",", "ncol", ",", "figsize", "=", "(", "ncol", "*", "scale", ",", "nrow", "*", "scale", ")", ",", "gridspec_kw", "=", "gridspec_kw", ")", "\n", "for", "ax", ",", "img", "in", "zip", "(", "axarr", ".", "ravel", "(", ")", ",", "images", ")", ":", "\n", "        ", "if", "img", ".", "shape", "[", "-", "1", "]", "==", "1", ":", "\n", "            ", "img", "=", "img", "[", ":", ",", ":", ",", "0", "]", "\n", "", "if", "len", "(", "img", ".", "shape", ")", "==", "2", ":", "\n", "            ", "ax", ".", "imshow", "(", "img", ",", "cmap", "=", "'gray'", ",", "vmin", "=", "0", ",", "vmax", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "ax", ".", "imshow", "(", "img", ")", "\n", "", "ax", ".", "set_axis_off", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.monniert_unicorn.utils.pytorch.get_torch_device": [[6, 14], ["torch.cuda.is_available", "logger.print_log", "torch.cuda.device_count", "torch.device", "torch.device", "torch.device"], "function", ["home.repos.pwc.inspect_result.monniert_unicorn.utils.logger.print_log"], ["def", "get_torch_device", "(", "gpu", "=", "None", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "device", ",", "nb_dev", "=", "torch", ".", "device", "(", "gpu", ")", "if", "gpu", "is", "not", "None", "else", "torch", ".", "device", "(", "'cuda:0'", ")", ",", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "", "else", ":", "\n", "        ", "device", ",", "nb_dev", "=", "torch", ".", "device", "(", "\"cpu\"", ")", ",", "None", "\n", "", "if", "verbose", ":", "\n", "        ", "print_log", "(", "f\"Torch device state: device={device}, nb_dev={nb_dev}\"", ")", "\n", "", "return", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.utils.pytorch.torch_to": [[16, 26], ["isinstance", "inp.to", "isinstance", "isinstance", "type", "map", "toolz.valmap", "isinstance", "t.to", "isinstance", "t.to"], "function", ["home.repos.pwc.inspect_result.monniert_unicorn.model.__init__.DDPCust.to", "home.repos.pwc.inspect_result.monniert_unicorn.model.__init__.DDPCust.to", "home.repos.pwc.inspect_result.monniert_unicorn.model.__init__.DDPCust.to"], ["", "def", "torch_to", "(", "inp", ",", "device", ",", "non_blocking", "=", "False", ")", ":", "\n", "    ", "nb", "=", "non_blocking", "# set to True when doing distributed jobs", "\n", "if", "isinstance", "(", "inp", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "return", "inp", ".", "to", "(", "device", ",", "non_blocking", "=", "nb", ")", "\n", "", "elif", "isinstance", "(", "inp", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "        ", "return", "type", "(", "inp", ")", "(", "map", "(", "lambda", "t", ":", "t", ".", "to", "(", "device", ",", "non_blocking", "=", "nb", ")", "if", "isinstance", "(", "t", ",", "torch", ".", "Tensor", ")", "else", "t", ",", "inp", ")", ")", "\n", "", "elif", "isinstance", "(", "inp", ",", "dict", ")", ":", "\n", "        ", "return", "valmap", "(", "lambda", "t", ":", "t", ".", "to", "(", "device", ",", "non_blocking", "=", "nb", ")", "if", "isinstance", "(", "t", ",", "torch", ".", "Tensor", ")", "else", "t", ",", "inp", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "", ""]], "home.repos.pwc.inspect_result.monniert_unicorn.utils.__init__.use_seed.__init__": [[75, 79], ["isinstance"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "if", "seed", "is", "not", "None", ":", "\n", "            ", "assert", "isinstance", "(", "seed", ",", "int", ")", "and", "seed", ">=", "0", "\n", "", "self", ".", "seed", "=", "seed", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.utils.__init__.use_seed.__enter__": [[80, 91], ["random.getstate", "numpy.random.get_state", "torch.get_rng_state", "random.seed", "numpy.random.seed", "torch.manual_seed"], "methods", ["None"], ["", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "seed", "is", "not", "None", ":", "\n", "            ", "self", ".", "rand_state", "=", "rand_get_state", "(", ")", "\n", "self", ".", "np_state", "=", "np_get_state", "(", ")", "\n", "self", ".", "torch_state", "=", "torch_get_state", "(", ")", "\n", "self", ".", "torch_cudnn_deterministic", "=", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "\n", "rand_seed", "(", "self", ".", "seed", ")", "\n", "np_seed", "(", "self", ".", "seed", ")", "\n", "torch_seed", "(", "self", ".", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.utils.__init__.use_seed.__exit__": [[92, 98], ["random.setstate", "numpy.random.set_state", "torch.set_rng_state"], "methods", ["None"], ["", "def", "__exit__", "(", "self", ",", "typ", ",", "val", ",", "_traceback", ")", ":", "\n", "        ", "if", "self", ".", "seed", "is", "not", "None", ":", "\n", "            ", "rand_set_state", "(", "self", ".", "rand_state", ")", "\n", "np_set_state", "(", "self", ".", "np_state", ")", "\n", "torch_set_state", "(", "self", ".", "torch_state", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "self", ".", "torch_cudnn_deterministic", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.utils.__init__.use_seed.__call__": [[99, 107], ["functools.wraps", "kw.pop", "__init__.use_seed", "f"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "f", ")", ":", "\n", "        ", "@", "wraps", "(", "f", ")", "\n", "def", "wrapper", "(", "*", "args", ",", "**", "kw", ")", ":", "\n", "            ", "seed", "=", "self", ".", "seed", "if", "self", ".", "seed", "is", "not", "None", "else", "kw", ".", "pop", "(", "'seed'", ",", "None", ")", "\n", "with", "use_seed", "(", "seed", ")", ":", "\n", "                ", "return", "f", "(", "*", "args", ",", "**", "kw", ")", "\n", "\n", "", "", "return", "wrapper", "\n", "", "", ""]], "home.repos.pwc.inspect_result.monniert_unicorn.utils.__init__.path_exists": [[19, 24], ["pathlib.Path", "pathlib.Path.exists", "FileNotFoundError", "pathlib.Path.absolute"], "function", ["None"], ["def", "path_exists", "(", "path", ")", ":", "\n", "    ", "path", "=", "Path", "(", "path", ")", "\n", "if", "not", "path", ".", "exists", "(", ")", ":", "\n", "        ", "raise", "FileNotFoundError", "(", "'{} does not exist'", ".", "format", "(", "path", ".", "absolute", "(", ")", ")", ")", "\n", "", "return", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.utils.__init__.path_mkdir": [[26, 30], ["pathlib.Path", "pathlib.Path.mkdir"], "function", ["None"], ["", "def", "path_mkdir", "(", "path", ")", ":", "\n", "    ", "path", "=", "Path", "(", "path", ")", "\n", "path", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "return", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.utils.__init__.get_files_from": [[32, 45], ["__init__.path_exists", "list", "sorted", "f.absolute", "f.absolute", "isinstance", "filter", "path_exists.glob", "f.is_file", "path_exists.glob", "f.is_file", "ext.startswith"], "function", ["home.repos.pwc.inspect_result.monniert_unicorn.utils.__init__.path_exists"], ["", "def", "get_files_from", "(", "dir_path", ",", "valid_extensions", "=", "None", ",", "recursive", "=", "False", ",", "sort", "=", "False", ")", ":", "\n", "    ", "path", "=", "path_exists", "(", "dir_path", ")", "\n", "if", "recursive", ":", "\n", "        ", "files", "=", "[", "f", ".", "absolute", "(", ")", "for", "f", "in", "path", ".", "glob", "(", "'**/*'", ")", "if", "f", ".", "is_file", "(", ")", "]", "\n", "", "else", ":", "\n", "        ", "files", "=", "[", "f", ".", "absolute", "(", ")", "for", "f", "in", "path", ".", "glob", "(", "'*'", ")", "if", "f", ".", "is_file", "(", ")", "]", "\n", "\n", "", "if", "valid_extensions", "is", "not", "None", ":", "\n", "        ", "valid_extensions", "=", "[", "valid_extensions", "]", "if", "isinstance", "(", "valid_extensions", ",", "str", ")", "else", "valid_extensions", "\n", "valid_extensions", "=", "[", "'.{}'", ".", "format", "(", "ext", ")", "if", "not", "ext", ".", "startswith", "(", "'.'", ")", "else", "ext", "for", "ext", "in", "valid_extensions", "]", "\n", "files", "=", "list", "(", "filter", "(", "lambda", "f", ":", "f", ".", "suffix", "in", "valid_extensions", ",", "files", ")", ")", "\n", "\n", "", "return", "sorted", "(", "files", ")", "if", "sort", "else", "files", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.utils.__init__.load_yaml": [[47, 52], ["__init__.path_exists", "open", "yaml.load"], "function", ["home.repos.pwc.inspect_result.monniert_unicorn.utils.__init__.path_exists"], ["", "def", "load_yaml", "(", "path", ")", ":", "\n", "    ", "path", "=", "path_exists", "(", "path", ")", "\n", "with", "open", "(", "path", ")", "as", "fp", ":", "\n", "        ", "cfg", "=", "yaml", ".", "load", "(", "fp", ",", "Loader", "=", "yaml", ".", "FullLoader", ")", "\n", "", "return", "cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.utils.__init__.dump_yaml": [[54, 58], ["__init__.path_exists", "open", "yaml.safe_dump"], "function", ["home.repos.pwc.inspect_result.monniert_unicorn.utils.__init__.path_exists"], ["", "def", "dump_yaml", "(", "cfg", ",", "path", ")", ":", "\n", "    ", "path", "=", "path_exists", "(", "path", ")", "\n", "with", "open", "(", "path", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "return", "yaml", ".", "safe_dump", "(", "cfg", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.utils.__init__.timer": [[60, 72], ["time.time", "print", "time.time"], "function", ["None"], ["", "", "@", "contextmanager", "\n", "def", "timer", "(", "name", ",", "unit", "=", "'s'", ")", ":", "\n", "    ", "start", "=", "time", ".", "time", "(", ")", "\n", "yield", "\n", "delta", "=", "time", ".", "time", "(", ")", "-", "start", "\n", "if", "unit", "==", "'s'", ":", "\n", "        ", "pass", "\n", "", "elif", "unit", "==", "'min'", ":", "\n", "        ", "delta", "/=", "60", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "print", "(", "'{}: {:.2f}{}'", ".", "format", "(", "name", ",", "delta", ",", "unit", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.utils.chamfer.chamfer_distance": [[7, 157], ["pytorch3d.loss.chamfer._validate_chamfer_reduction_inputs", "pytorch3d.loss.chamfer._handle_pointcloud_input", "pytorch3d.loss.chamfer._handle_pointcloud_input", "x.new_zeros", "x.new_zeros", "pytorch3d.ops.knn.knn_points", "pytorch3d.ops.knn.knn_points", "cham_x.sum.sum", "cham_y.sum.sum", "ValueError", "weights.view.view", "weights.view.view", "cham_norm_x.sum.sum", "cham_norm_y.sum.sum", "cham_x.sum.sum", "cham_y.sum.sum", "torch.arange", "torch.arange", "weights.view.size", "ValueError", "ValueError", "weights.view.sum", "weights.view.view", "cham_x.sum.sqrt", "cham_y.sum.sqrt", "pytorch3d.ops.knn.knn_gather", "pytorch3d.ops.knn.knn_gather", "torch.abs", "torch.abs", "weights.view.view", "weights.view.view", "cham_norm_x.sum.sum", "cham_norm_y.sum.sum", "torch.nn.functional.cosine_similarity", "torch.nn.functional.cosine_similarity", "weights.view.sum", "x.sum", "x.sum", "x.sum", "x.sum"], "function", ["None"], ["def", "chamfer_distance", "(", "x", ",", "y", ",", "x_lengths", "=", "None", ",", "y_lengths", "=", "None", ",", "x_normals", "=", "None", ",", "y_normals", "=", "None", ",", "weights", "=", "None", ",", "\n", "batch_reduction", "=", "\"mean\"", ",", "point_reduction", "=", "\"mean\"", ",", "return_L1", "=", "False", ",", "return_mean", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Copy from https://github.com/facebookresearch/pytorch3d repo (see pytorch3d/loss/chamfer.py)\n    with following modifications to be comparable to OccNet and DVR results [Niemeyer et al., 2019]\n    (https://github.com/autonomousvision/differentiable_volumetric_rendering, see im2mesh/eval.py file for details):\n        - support for returning chamfer-L1 instead of chamfer-L2\n        - support for mean (cham_x, cham_y) instead of sum\n\n    Chamfer distance between two pointclouds x and y.\n    Args:\n        x: FloatTensor of shape (N, P1, D) or a Pointclouds object representing\n            a batch of point clouds with at most P1 points in each batch element,\n            batch size N and feature dimension D.\n        y: FloatTensor of shape (N, P2, D) or a Pointclouds object representing\n            a batch of point clouds with at most P2 points in each batch element,\n            batch size N and feature dimension D.\n        x_lengths: Optional LongTensor of shape (N,) giving the number of points in each\n            cloud in x.\n        y_lengths: Optional LongTensor of shape (N,) giving the number of points in each\n            cloud in y.\n        x_normals: Optional FloatTensor of shape (N, P1, D).\n        y_normals: Optional FloatTensor of shape (N, P2, D).\n        weights: Optional FloatTensor of shape (N,) giving weights for\n            batch elements for reduction operation.\n        batch_reduction: Reduction operation to apply for the loss across the\n            batch, can be one of [\"mean\", \"sum\"] or None.\n        point_reduction: Reduction operation to apply for the loss across the\n            points, can be one of [\"mean\", \"sum\"].\n\n    Returns:\n        2-element tuple containing\n\n        - **loss**: Tensor giving the reduced distance between the pointclouds\n          in x and the pointclouds in y.\n        - **loss_normals**: Tensor giving the reduced cosine distance of normals\n          between pointclouds in x and pointclouds in y. Returns None if\n          x_normals and y_normals are None.\n    \"\"\"", "\n", "_validate_chamfer_reduction_inputs", "(", "batch_reduction", ",", "point_reduction", ")", "\n", "\n", "x", ",", "x_lengths", ",", "x_normals", "=", "_handle_pointcloud_input", "(", "x", ",", "x_lengths", ",", "x_normals", ")", "\n", "y", ",", "y_lengths", ",", "y_normals", "=", "_handle_pointcloud_input", "(", "y", ",", "y_lengths", ",", "y_normals", ")", "\n", "\n", "return_normals", "=", "x_normals", "is", "not", "None", "and", "y_normals", "is", "not", "None", "\n", "\n", "N", ",", "P1", ",", "D", "=", "x", ".", "shape", "\n", "P2", "=", "y", ".", "shape", "[", "1", "]", "\n", "\n", "# Check if inputs are heterogeneous and create a lengths mask.", "\n", "is_x_heterogeneous", "=", "(", "x_lengths", "!=", "P1", ")", ".", "any", "(", ")", "\n", "is_y_heterogeneous", "=", "(", "y_lengths", "!=", "P2", ")", ".", "any", "(", ")", "\n", "x_mask", "=", "(", "\n", "torch", ".", "arange", "(", "P1", ",", "device", "=", "x", ".", "device", ")", "[", "None", "]", ">=", "x_lengths", "[", ":", ",", "None", "]", "\n", ")", "# shape [N, P1]", "\n", "y_mask", "=", "(", "\n", "torch", ".", "arange", "(", "P2", ",", "device", "=", "y", ".", "device", ")", "[", "None", "]", ">=", "y_lengths", "[", ":", ",", "None", "]", "\n", ")", "# shape [N, P2]", "\n", "\n", "if", "y", ".", "shape", "[", "0", "]", "!=", "N", "or", "y", ".", "shape", "[", "2", "]", "!=", "D", ":", "\n", "        ", "raise", "ValueError", "(", "\"y does not have the correct shape.\"", ")", "\n", "", "if", "weights", "is", "not", "None", ":", "\n", "        ", "if", "weights", ".", "size", "(", "0", ")", "!=", "N", ":", "\n", "            ", "raise", "ValueError", "(", "\"weights must be of shape (N,).\"", ")", "\n", "", "if", "not", "(", "weights", ">=", "0", ")", ".", "all", "(", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"weights cannot be negative.\"", ")", "\n", "", "if", "weights", ".", "sum", "(", ")", "==", "0.0", ":", "\n", "            ", "weights", "=", "weights", ".", "view", "(", "N", ",", "1", ")", "\n", "if", "batch_reduction", "in", "[", "\"mean\"", ",", "\"sum\"", "]", ":", "\n", "                ", "return", "(", "\n", "(", "x", ".", "sum", "(", "(", "1", ",", "2", ")", ")", "*", "weights", ")", ".", "sum", "(", ")", "*", "0.0", ",", "\n", "(", "x", ".", "sum", "(", "(", "1", ",", "2", ")", ")", "*", "weights", ")", ".", "sum", "(", ")", "*", "0.0", ",", "\n", ")", "\n", "", "return", "(", "(", "x", ".", "sum", "(", "(", "1", ",", "2", ")", ")", "*", "weights", ")", "*", "0.0", ",", "(", "x", ".", "sum", "(", "(", "1", ",", "2", ")", ")", "*", "weights", ")", "*", "0.0", ")", "\n", "\n", "", "", "cham_norm_x", "=", "x", ".", "new_zeros", "(", "(", ")", ")", "\n", "cham_norm_y", "=", "x", ".", "new_zeros", "(", "(", ")", ")", "\n", "\n", "x_nn", "=", "knn_points", "(", "x", ",", "y", ",", "lengths1", "=", "x_lengths", ",", "lengths2", "=", "y_lengths", ",", "K", "=", "1", ")", "\n", "y_nn", "=", "knn_points", "(", "y", ",", "x", ",", "lengths1", "=", "y_lengths", ",", "lengths2", "=", "x_lengths", ",", "K", "=", "1", ")", "\n", "\n", "cham_x", "=", "x_nn", ".", "dists", "[", "...", ",", "0", "]", "# (N, P1)", "\n", "cham_y", "=", "y_nn", ".", "dists", "[", "...", ",", "0", "]", "# (N, P2)", "\n", "\n", "if", "return_L1", ":", "\n", "        ", "cham_x", ",", "cham_y", "=", "cham_x", ".", "sqrt", "(", ")", ",", "cham_y", ".", "sqrt", "(", ")", "\n", "\n", "", "if", "is_x_heterogeneous", ":", "\n", "        ", "cham_x", "[", "x_mask", "]", "=", "0.0", "\n", "", "if", "is_y_heterogeneous", ":", "\n", "        ", "cham_y", "[", "y_mask", "]", "=", "0.0", "\n", "\n", "", "if", "weights", "is", "not", "None", ":", "\n", "        ", "cham_x", "*=", "weights", ".", "view", "(", "N", ",", "1", ")", "\n", "cham_y", "*=", "weights", ".", "view", "(", "N", ",", "1", ")", "\n", "\n", "", "if", "return_normals", ":", "\n", "# Gather the normals using the indices and keep only value for k=0", "\n", "        ", "x_normals_near", "=", "knn_gather", "(", "y_normals", ",", "x_nn", ".", "idx", ",", "y_lengths", ")", "[", "...", ",", "0", ",", ":", "]", "\n", "y_normals_near", "=", "knn_gather", "(", "x_normals", ",", "y_nn", ".", "idx", ",", "x_lengths", ")", "[", "...", ",", "0", ",", ":", "]", "\n", "\n", "cham_norm_x", "=", "1", "-", "torch", ".", "abs", "(", "\n", "F", ".", "cosine_similarity", "(", "x_normals", ",", "x_normals_near", ",", "dim", "=", "2", ",", "eps", "=", "1e-6", ")", "\n", ")", "\n", "cham_norm_y", "=", "1", "-", "torch", ".", "abs", "(", "\n", "F", ".", "cosine_similarity", "(", "y_normals", ",", "y_normals_near", ",", "dim", "=", "2", ",", "eps", "=", "1e-6", ")", "\n", ")", "\n", "\n", "if", "is_x_heterogeneous", ":", "\n", "            ", "cham_norm_x", "[", "x_mask", "]", "=", "0.0", "\n", "", "if", "is_y_heterogeneous", ":", "\n", "            ", "cham_norm_y", "[", "y_mask", "]", "=", "0.0", "\n", "\n", "", "if", "weights", "is", "not", "None", ":", "\n", "            ", "cham_norm_x", "*=", "weights", ".", "view", "(", "N", ",", "1", ")", "\n", "cham_norm_y", "*=", "weights", ".", "view", "(", "N", ",", "1", ")", "\n", "\n", "# Apply point reduction", "\n", "", "", "cham_x", "=", "cham_x", ".", "sum", "(", "1", ")", "# (N,)", "\n", "cham_y", "=", "cham_y", ".", "sum", "(", "1", ")", "# (N,)", "\n", "if", "return_normals", ":", "\n", "        ", "cham_norm_x", "=", "cham_norm_x", ".", "sum", "(", "1", ")", "# (N,)", "\n", "cham_norm_y", "=", "cham_norm_y", ".", "sum", "(", "1", ")", "# (N,)", "\n", "", "if", "point_reduction", "==", "\"mean\"", ":", "\n", "        ", "cham_x", "/=", "x_lengths", "\n", "cham_y", "/=", "y_lengths", "\n", "if", "return_normals", ":", "\n", "            ", "cham_norm_x", "/=", "x_lengths", "\n", "cham_norm_y", "/=", "y_lengths", "\n", "\n", "", "", "if", "batch_reduction", "is", "not", "None", ":", "\n", "# batch_reduction == \"sum\"", "\n", "        ", "cham_x", "=", "cham_x", ".", "sum", "(", ")", "\n", "cham_y", "=", "cham_y", ".", "sum", "(", ")", "\n", "if", "return_normals", ":", "\n", "            ", "cham_norm_x", "=", "cham_norm_x", ".", "sum", "(", ")", "\n", "cham_norm_y", "=", "cham_norm_y", ".", "sum", "(", ")", "\n", "", "if", "batch_reduction", "==", "\"mean\"", ":", "\n", "            ", "div", "=", "weights", ".", "sum", "(", ")", "if", "weights", "is", "not", "None", "else", "N", "\n", "cham_x", "/=", "div", "\n", "cham_y", "/=", "div", "\n", "if", "return_normals", ":", "\n", "                ", "cham_norm_x", "/=", "div", "\n", "cham_norm_y", "/=", "div", "\n", "\n", "", "", "", "cham_dist", "=", "cham_x", "+", "cham_y", "\n", "cham_normals", "=", "cham_norm_x", "+", "cham_norm_y", "if", "return_normals", "else", "None", "\n", "if", "return_mean", ":", "\n", "        ", "cham_dist", ",", "cham_normals", "=", "0.5", "*", "cham_dist", ",", "0.5", "*", "cham_normals", "if", "return_normals", "else", "None", "\n", "", "return", "cham_dist", ",", "cham_normals", "\n", "", ""]], "home.repos.pwc.inspect_result.monniert_unicorn.utils.image.ImageResizer.__init__": [[108, 119], ["path_exists", "get_files_from", "path_mkdir", "functools.partial", "int", "numpy.ceil", "numpy.log10", "len"], "methods", ["home.repos.pwc.inspect_result.monniert_unicorn.utils.__init__.path_exists", "home.repos.pwc.inspect_result.monniert_unicorn.utils.__init__.get_files_from", "home.repos.pwc.inspect_result.monniert_unicorn.utils.__init__.path_mkdir"], ["def", "__init__", "(", "self", ",", "input_dir", ",", "output_dir", ",", "size", ",", "in_ext", "=", "IMG_EXTENSIONS", ",", "out_ext", "=", "'jpg'", ",", "keep_aspect_ratio", "=", "True", ",", "\n", "resample", "=", "Image", ".", "ANTIALIAS", ",", "fit_inside", "=", "True", ",", "rename", "=", "False", ",", "verbose", "=", "True", ")", ":", "\n", "        ", "self", ".", "input_dir", "=", "path_exists", "(", "input_dir", ")", "\n", "self", ".", "files", "=", "get_files_from", "(", "input_dir", ",", "valid_extensions", "=", "in_ext", ",", "recursive", "=", "True", ",", "sort", "=", "True", ")", "\n", "self", ".", "output_dir", "=", "path_mkdir", "(", "output_dir", ")", "\n", "self", ".", "out_extension", "=", "out_ext", "\n", "self", ".", "resize_func", "=", "partial", "(", "resize", ",", "size", "=", "size", ",", "keep_aspect_ratio", "=", "keep_aspect_ratio", ",", "resample", "=", "resample", ",", "\n", "fit_inside", "=", "fit_inside", ")", "\n", "self", ".", "rename", "=", "rename", "\n", "self", ".", "name_size", "=", "int", "(", "np", ".", "ceil", "(", "np", ".", "log10", "(", "len", "(", "self", ".", "files", ")", ")", ")", ")", "\n", "self", ".", "verbose", "=", "verbose", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.utils.image.ImageResizer.run": [[120, 128], ["enumerate", "PIL.Image.open().convert", "image.ImageResizer.resize_func", "image.ImageResizer.save", "logger.print_info", "str().zfill", "PIL.Image.open", "str"], "methods", ["home.repos.pwc.inspect_result.monniert_unicorn.utils.image.ImageLogger.save", "home.repos.pwc.inspect_result.monniert_unicorn.utils.logger.print_info"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "for", "k", ",", "filename", "in", "enumerate", "(", "self", ".", "files", ")", ":", "\n", "            ", "if", "self", ".", "verbose", ":", "\n", "                ", "print_info", "(", "'Resizing and saving {}'", ".", "format", "(", "filename", ")", ")", "\n", "", "img", "=", "Image", ".", "open", "(", "filename", ")", ".", "convert", "(", "'RGB'", ")", "\n", "img", "=", "self", ".", "resize_func", "(", "img", ")", "\n", "name", "=", "str", "(", "k", ")", ".", "zfill", "(", "self", ".", "name_size", ")", "if", "self", ".", "rename", "else", "filename", ".", "stem", "\n", "img", ".", "save", "(", "self", ".", "output_dir", "/", "'{}.{}'", ".", "format", "(", "name", ",", "self", ".", "out_extension", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.utils.image.ImageLogger.__init__": [[133, 151], ["path_mkdir", "len", "isinstance", "len", "path_mkdir", "range", "convert_to_img().save", "len", "enumerate", "image.convert_to_img"], "methods", ["home.repos.pwc.inspect_result.monniert_unicorn.utils.__init__.path_mkdir", "home.repos.pwc.inspect_result.monniert_unicorn.utils.__init__.path_mkdir", "home.repos.pwc.inspect_result.monniert_unicorn.utils.image.ImageLogger.save", "home.repos.pwc.inspect_result.monniert_unicorn.utils.image.convert_to_img"], ["def", "__init__", "(", "self", ",", "log_dir", ",", "target_images", "=", "None", ",", "n_images", "=", "None", ",", "out_ext", "=", "'jpg'", ")", ":", "\n", "        ", "if", "not", "self", ".", "log_data", ":", "\n", "            ", "return", "None", "\n", "\n", "", "self", ".", "log_dir", "=", "path_mkdir", "(", "log_dir", ")", "\n", "if", "len", "(", "target_images", ")", ">", "1", ":", "\n", "            ", "if", "isinstance", "(", "target_images", ",", "dict", ")", ":", "\n", "                ", "if", "len", "(", "target_images", "[", "'imgs'", "]", ".", "shape", ")", "==", "5", ":", "# multi-view images", "\n", "                    ", "target_images", "=", "target_images", "[", "'imgs'", "]", "[", ":", ",", "1", "]", "\n", "", "else", ":", "\n", "                    ", "target_images", "=", "target_images", "[", "'imgs'", "]", "\n", "", "", "elif", "target_images", "[", "0", "]", ".", "shape", "!=", "target_images", "[", "1", "]", ".", "shape", ":", "\n", "                ", "target_images", "=", "target_images", "[", "0", "]", "\n", "", "", "self", ".", "n_images", "=", "len", "(", "target_images", ")", "if", "target_images", "is", "not", "None", "else", "n_images", "\n", "[", "path_mkdir", "(", "self", ".", "log_dir", "/", "f'img{k}'", "/", "'evolution'", ")", "for", "k", "in", "range", "(", "self", ".", "n_images", ")", "]", "\n", "if", "target_images", "is", "not", "None", ":", "\n", "            ", "[", "convert_to_img", "(", "im", ")", ".", "save", "(", "self", ".", "log_dir", "/", "f'img{k}'", "/", "'input.png'", ")", "for", "k", ",", "im", "in", "enumerate", "(", "target_images", ")", "]", "\n", "", "self", ".", "out_ext", "=", "out_ext", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.utils.image.ImageLogger.save": [[152, 166], ["range", "len", "hasattr", "tuple", "len", "convert_to_img().save", "convert_to_img().save", "image.convert_to_img", "image.convert_to_img"], "methods", ["home.repos.pwc.inspect_result.monniert_unicorn.utils.image.ImageLogger.save", "home.repos.pwc.inspect_result.monniert_unicorn.utils.image.ImageLogger.save", "home.repos.pwc.inspect_result.monniert_unicorn.utils.image.convert_to_img", "home.repos.pwc.inspect_result.monniert_unicorn.utils.image.convert_to_img"], ["", "def", "save", "(", "self", ",", "images", ",", "it", "=", "None", ")", ":", "\n", "        ", "if", "not", "self", ".", "log_data", ":", "\n", "            ", "return", "None", "\n", "\n", "", "if", "len", "(", "images", ")", ">", "1", "and", "images", "[", "0", "]", ".", "shape", "!=", "images", "[", "1", "]", ".", "shape", ":", "\n", "            ", "images", "=", "images", "[", "0", "]", "\n", "", "assert", "len", "(", "images", ")", "==", "self", ".", "n_images", "\n", "if", "not", "hasattr", "(", "self", ",", "'_img_size'", ")", ":", "\n", "            ", "self", ".", "_img_size", "=", "tuple", "(", "images", ".", "shape", "[", "2", ":", "]", ")", "\n", "", "for", "k", "in", "range", "(", "self", ".", "n_images", ")", ":", "\n", "            ", "if", "it", "is", "not", "None", ":", "\n", "                ", "convert_to_img", "(", "images", "[", "k", "]", ")", ".", "save", "(", "self", ".", "log_dir", "/", "f'img{k}'", "/", "'evolution'", "/", "f'{it}.{self.out_ext}'", ")", "\n", "", "else", ":", "\n", "                ", "convert_to_img", "(", "images", "[", "k", "]", ")", ".", "save", "(", "self", ".", "log_dir", "/", "f'img{k}'", "/", "'final.png'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.utils.image.ImageLogger.save_gif": [[167, 175], ["range", "image.ImageLogger.save_gif"], "methods", ["home.repos.pwc.inspect_result.monniert_unicorn.utils.image.save_gif"], ["", "", "", "def", "save_gif", "(", "self", ",", "rmtree", "=", "True", ")", ":", "\n", "        ", "if", "not", "self", ".", "log_data", ":", "\n", "            ", "return", "None", "\n", "\n", "", "for", "k", "in", "range", "(", "self", ".", "n_images", ")", ":", "\n", "            ", "save_gif", "(", "self", ".", "log_dir", "/", "f'img{k}'", "/", "'evolution'", ",", "'evolution.gif'", ",", "size", "=", "self", ".", "gif_size", ")", "\n", "if", "rmtree", ":", "\n", "                ", "shutil", ".", "rmtree", "(", "str", "(", "self", ".", "log_dir", "/", "f'img{k}'", "/", "'evolution'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.utils.image.ImageLogger.gif_size": [[176, 182], ["hasattr", "max"], "methods", ["None"], ["", "", "", "@", "property", "\n", "def", "gif_size", "(", "self", ")", ":", "\n", "        ", "if", "hasattr", "(", "self", ",", "'_img_size'", ")", ":", "\n", "            ", "return", "MAX_GIF_SIZE", "if", "MAX_GIF_SIZE", "<", "max", "(", "self", ".", "_img_size", ")", "else", "self", ".", "_img_size", "\n", "", "else", ":", "\n", "            ", "return", "MAX_GIF_SIZE", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.monniert_unicorn.utils.image.resize": [[19, 29], ["isinstance", "img.resize", "image.resize", "float", "float", "round", "round", "min", "max", "zip", "zip"], "function", ["home.repos.pwc.inspect_result.monniert_unicorn.utils.image.resize", "home.repos.pwc.inspect_result.monniert_unicorn.utils.image.resize"], ["def", "resize", "(", "img", ",", "size", ",", "keep_aspect_ratio", "=", "True", ",", "resample", "=", "Image", ".", "ANTIALIAS", ",", "fit_inside", "=", "True", ")", ":", "\n", "    ", "if", "isinstance", "(", "size", ",", "int", ")", ":", "\n", "        ", "return", "resize", "(", "img", ",", "(", "size", ",", "size", ")", ",", "keep_aspect_ratio", "=", "keep_aspect_ratio", ",", "resample", "=", "resample", ",", "fit_inside", "=", "fit_inside", ")", "\n", "", "elif", "keep_aspect_ratio", ":", "\n", "        ", "if", "fit_inside", ":", "\n", "            ", "ratio", "=", "float", "(", "min", "(", "[", "s1", "/", "s2", "for", "s1", ",", "s2", "in", "zip", "(", "size", ",", "img", ".", "size", ")", "]", ")", ")", "# XXX bug with np.float64 and round", "\n", "", "else", ":", "\n", "            ", "ratio", "=", "float", "(", "max", "(", "[", "s1", "/", "s2", "for", "s1", ",", "s2", "in", "zip", "(", "size", ",", "img", ".", "size", ")", "]", ")", ")", "# XXX bug with np.float64 and round", "\n", "", "size", "=", "round", "(", "ratio", "*", "img", ".", "size", "[", "0", "]", ")", ",", "round", "(", "ratio", "*", "img", ".", "size", "[", "1", "]", ")", "\n", "", "return", "img", ".", "resize", "(", "size", ",", "resample", "=", "resample", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.utils.image.convert_to_img": [[31, 48], ["isinstance", "isinstance", "isinstance", "numpy.issubdtype", "PIL.Image.fromarray().convert", "arr.unsqueeze.permute().detach().cpu().numpy", "len", "arr.unsqueeze.squeeze", "len", "arr.unsqueeze.clip", "PIL.Image.fromarray", "len", "arr.unsqueeze.unsqueeze", "arr.unsqueeze.permute().detach().cpu", "arr.unsqueeze.astype", "arr.unsqueeze.permute().detach", "arr.unsqueeze.permute"], "function", ["None"], ["", "def", "convert_to_img", "(", "arr", ")", ":", "\n", "    ", "if", "isinstance", "(", "arr", ",", "Image", ".", "Image", ")", ":", "\n", "        ", "return", "arr", "\n", "\n", "", "if", "isinstance", "(", "arr", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "if", "len", "(", "arr", ".", "shape", ")", "==", "4", ":", "\n", "            ", "arr", "=", "arr", ".", "squeeze", "(", "0", ")", "\n", "", "elif", "len", "(", "arr", ".", "shape", ")", "==", "2", ":", "\n", "            ", "arr", "=", "arr", ".", "unsqueeze", "(", "0", ")", "\n", "", "arr", "=", "arr", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "assert", "isinstance", "(", "arr", ",", "np", ".", "ndarray", ")", "\n", "if", "len", "(", "arr", ".", "shape", ")", "==", "3", "and", "arr", ".", "shape", "[", "2", "]", "==", "1", ":", "\n", "        ", "arr", "=", "arr", "[", ":", ",", ":", ",", "0", "]", "\n", "", "if", "np", ".", "issubdtype", "(", "arr", ".", "dtype", ",", "np", ".", "floating", ")", ":", "\n", "        ", "arr", "=", "(", "arr", ".", "clip", "(", "0", ",", "1", ")", "*", "255", ")", "\n", "", "return", "Image", ".", "fromarray", "(", "arr", ".", "astype", "(", "np", ".", "uint8", ")", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.utils.image.convert_to_rgba": [[50, 53], ["PIL.Image.fromarray", "isinstance", "len", "t.size", "t.permute().detach().cpu().numpy().clip", "t.permute().detach().cpu().numpy", "t.permute().detach().cpu", "t.permute().detach", "t.permute"], "function", ["None"], ["", "def", "convert_to_rgba", "(", "t", ")", ":", "\n", "    ", "assert", "isinstance", "(", "t", ",", "(", "torch", ".", "Tensor", ",", ")", ")", "and", "len", "(", "t", ".", "size", "(", ")", ")", "==", "3", "\n", "return", "Image", ".", "fromarray", "(", "(", "t", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "clip", "(", "0", ",", "1", ")", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", ",", "'RGBA'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.utils.image.save_gif": [[55, 74], ["isinstance", "path_exists", "sorted", "len", "int", "imgs[].save", "get_files_from", "pathlib.Path", "list", "PIL.Image.open().convert", "logger.print_warning", "convert_to_img().convert", "map", "len", "int", "PIL.Image.open", "image.convert_to_img", "image.resize"], "function", ["home.repos.pwc.inspect_result.monniert_unicorn.utils.__init__.path_exists", "home.repos.pwc.inspect_result.monniert_unicorn.utils.image.ImageLogger.save", "home.repos.pwc.inspect_result.monniert_unicorn.utils.__init__.get_files_from", "home.repos.pwc.inspect_result.monniert_unicorn.utils.logger.print_warning", "home.repos.pwc.inspect_result.monniert_unicorn.utils.image.convert_to_img", "home.repos.pwc.inspect_result.monniert_unicorn.utils.image.resize"], ["", "def", "save_gif", "(", "imgs_or_path", ",", "name", ",", "in_ext", "=", "'jpg'", ",", "size", "=", "None", ",", "total_sec", "=", "10", ")", ":", "\n", "    ", "if", "isinstance", "(", "imgs_or_path", ",", "(", "str", ",", "Path", ")", ")", ":", "\n", "        ", "path", "=", "path_exists", "(", "imgs_or_path", ")", "\n", "files", "=", "sorted", "(", "get_files_from", "(", "path", ",", "in_ext", ")", ",", "key", "=", "lambda", "p", ":", "int", "(", "p", ".", "stem", ")", ")", "\n", "try", ":", "\n", "# XXX images MUST be converted to adaptive color palette otherwise resulting gif has very bad quality", "\n", "            ", "imgs", "=", "[", "Image", ".", "open", "(", "f", ")", ".", "convert", "(", "'P'", ",", "palette", "=", "Image", ".", "ADAPTIVE", ")", "for", "f", "in", "files", "]", "\n", "", "except", "OSError", "as", "e", ":", "\n", "            ", "print_warning", "(", "e", ")", "\n", "return", "None", "\n", "", "", "else", ":", "\n", "# XXX images MUST be converted to adaptive color palette otherwise resulting gif has very bad quality", "\n", "        ", "imgs", ",", "path", "=", "[", "convert_to_img", "(", "i", ")", ".", "convert", "(", "'P'", ",", "palette", "=", "Image", ".", "ADAPTIVE", ")", "for", "i", "in", "imgs_or_path", "]", ",", "Path", "(", "'.'", ")", "\n", "\n", "", "if", "len", "(", "imgs", ")", ">", "0", ":", "\n", "        ", "if", "size", "is", "not", "None", "and", "size", "!=", "imgs", "[", "0", "]", ".", "size", ":", "\n", "            ", "imgs", "=", "list", "(", "map", "(", "lambda", "i", ":", "resize", "(", "i", ",", "size", "=", "size", ")", ",", "imgs", ")", ")", "\n", "", "tpf", "=", "int", "(", "total_sec", "*", "1000", "/", "len", "(", "imgs", ")", ")", "\n", "imgs", "[", "0", "]", ".", "save", "(", "path", ".", "parent", "/", "name", ",", "optimize", "=", "False", ",", "save_all", "=", "True", ",", "append_images", "=", "imgs", "[", "1", ":", "]", ",", "duration", "=", "tpf", ",", "loop", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.utils.image.save_video": [[76, 92], ["path_exists", "sorted", "numpy.stack", "imageio.mimwrite", "os.system", "shutil.move", "shutil.move", "get_files_from", "os.system", "shutil.move", "str", "numpy.asarray", "str", "int", "PIL.Image.open", "name.split"], "function", ["home.repos.pwc.inspect_result.monniert_unicorn.utils.__init__.path_exists", "home.repos.pwc.inspect_result.monniert_unicorn.utils.__init__.get_files_from"], ["", "", "def", "save_video", "(", "path", ",", "name", ",", "in_ext", "=", "'jpg'", ",", "as_gif", "=", "False", ",", "fps", "=", "24", ",", "quality", "=", "8", ")", ":", "\n", "    ", "path", "=", "path_exists", "(", "path", ")", "\n", "files", "=", "sorted", "(", "get_files_from", "(", "path", ",", "in_ext", ")", ",", "key", "=", "lambda", "p", ":", "int", "(", "p", ".", "stem", ")", ")", "\n", "imgs", "=", "np", ".", "stack", "(", "[", "np", ".", "asarray", "(", "Image", ".", "open", "(", "f", ")", ")", "for", "f", "in", "files", "]", ")", "\n", "imageio", ".", "mimwrite", "(", "name", ",", "imgs", ",", "fps", "=", "fps", ",", "quality", "=", "quality", ")", "\n", "\n", "if", "as_gif", ":", "\n", "        ", "gname", "=", "name", ".", "split", "(", "'.'", ")", "[", "0", "]", "+", "'.gif'", "\n", "os", ".", "system", "(", "f'ffmpeg -i {name} -vf \"fps={fps},'", "\n", "f'split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse\" -loop 0 {gname}'", ")", "\n", "shutil", ".", "move", "(", "gname", ",", "str", "(", "path", ".", "parent", "/", "gname", ")", ")", "\n", "\n", "# XXX output video is huge + has incorrect format/codec, passing it through ffmpeg fixes the issue", "\n", "", "os", ".", "system", "(", "f'ffmpeg -i {name} tmp_{name}'", ")", "\n", "shutil", ".", "move", "(", "f'tmp_{name}'", ",", "name", ")", "\n", "shutil", ".", "move", "(", "name", ",", "str", "(", "path", ".", "parent", "/", "name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.utils.image.square_bbox": [[94, 104], ["list", "max", "map", "round"], "function", ["None"], ["", "def", "square_bbox", "(", "bbox", ")", ":", "\n", "    ", "\"\"\"Converts a bbox to have a square shape by increasing size along non-max dimension.\"\"\"", "\n", "sq_bbox", "=", "list", "(", "map", "(", "round", ",", "bbox", ")", ")", "\n", "width", ",", "height", "=", "sq_bbox", "[", "2", "]", "-", "sq_bbox", "[", "0", "]", "+", "1", ",", "sq_bbox", "[", "3", "]", "-", "sq_bbox", "[", "1", "]", "+", "1", "\n", "maxdim", "=", "max", "(", "width", ",", "height", ")", "\n", "offset_w", ",", "offset_h", "=", "[", "round", "(", "(", "maxdim", "-", "s", ")", "/", "2.0", ")", "for", "s", "in", "[", "width", ",", "height", "]", "]", "\n", "\n", "sq_bbox", "[", "0", "]", ",", "sq_bbox", "[", "1", "]", "=", "sq_bbox", "[", "0", "]", "-", "offset_w", ",", "sq_bbox", "[", "1", "]", "-", "offset_h", "\n", "sq_bbox", "[", "2", "]", ",", "sq_bbox", "[", "3", "]", "=", "sq_bbox", "[", "0", "]", "+", "maxdim", "-", "1", ",", "sq_bbox", "[", "1", "]", "+", "maxdim", "-", "1", "\n", "return", "sq_bbox", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.dataset.folder.AbstractFolderDataset.__init__": [[20, 35], ["copy.deepcopy", "utils.get_files_from", "copy.deepcopy.pop", "copy.deepcopy.pop", "utils.path_exists", "isinstance", "len", "utils.path_exists"], "methods", ["home.repos.pwc.inspect_result.monniert_unicorn.utils.__init__.get_files_from", "home.repos.pwc.inspect_result.monniert_unicorn.utils.__init__.path_exists", "home.repos.pwc.inspect_result.monniert_unicorn.utils.__init__.path_exists"], ["def", "__init__", "(", "self", ",", "split", ",", "img_size", ",", "**", "kwargs", ")", ":", "\n", "        ", "kwargs", "=", "deepcopy", "(", "kwargs", ")", "\n", "self", ".", "split", "=", "split", "\n", "try", ":", "\n", "            ", "self", ".", "data_path", "=", "path_exists", "(", "DATASETS_PATH", "/", "self", ".", "name", ")", "\n", "", "except", "FileNotFoundError", ":", "\n", "            ", "self", ".", "data_path", "=", "path_exists", "(", "PROJECT_PATH", "/", "self", ".", "name", ")", "\n", "\n", "", "self", ".", "input_files", "=", "get_files_from", "(", "self", ".", "data_path", ",", "IMG_EXTENSIONS", ",", "recursive", "=", "True", ",", "sort", "=", "True", ")", "\n", "\n", "self", ".", "img_size", "=", "(", "img_size", ",", "img_size", ")", "if", "isinstance", "(", "img_size", ",", "int", ")", "else", "img_size", "\n", "self", ".", "resize_mode", "=", "kwargs", ".", "pop", "(", "'resize_mode'", ",", "'pad'", ")", "\n", "assert", "self", ".", "resize_mode", "in", "[", "'crop'", ",", "'pad'", "]", "\n", "self", ".", "padding_mode", "=", "kwargs", ".", "pop", "(", "'padding_mode'", ",", "'edge'", ")", "\n", "assert", "len", "(", "kwargs", ")", "==", "0", ",", "kwargs", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.dataset.folder.AbstractFolderDataset.__len__": [[36, 38], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "input_files", ")", "if", "self", ".", "split", "!=", "'val'", "else", "5", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.dataset.folder.AbstractFolderDataset.__getitem__": [[39, 43], ["folder.AbstractFolderDataset.transform", "torch.cat", "PIL.Image.open().convert", "torch.eye", "torch.Tensor", "torch.empty", "PIL.Image.open"], "methods", ["home.repos.pwc.inspect_result.monniert_unicorn.dataset.comp_cars.CompCarsDataset.transform"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "imgs", "=", "self", ".", "transform", "(", "Image", ".", "open", "(", "self", ".", "input_files", "[", "idx", "]", ")", ".", "convert", "(", "'RGB'", ")", ")", "\n", "poses", "=", "torch", ".", "cat", "(", "[", "torch", ".", "eye", "(", "3", ")", ",", "torch", ".", "Tensor", "(", "[", "[", "0", "]", ",", "[", "0", "]", ",", "[", "2.732", "]", "]", ")", "]", ",", "dim", "=", "1", ")", "\n", "return", "{", "'imgs'", ":", "imgs", ",", "'masks'", ":", "torch", ".", "empty", "(", "1", ",", "*", "self", ".", "img_size", ")", ",", "'poses'", ":", "poses", "}", ",", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.dataset.folder.AbstractFolderDataset.transform": [[44, 55], ["functools.lru_cache", "torchvision.transforms.Compose", "torch_transforms.Resize", "torch_transforms.SquarePad", "torchvision.transforms.ToTensor", "torchvision.transforms.Resize", "torchvision.transforms.RandomCrop", "torchvision.transforms.ToTensor", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor"], "methods", ["None"], ["", "@", "property", "\n", "@", "lru_cache", "(", ")", "\n", "def", "transform", "(", "self", ")", ":", "\n", "        ", "size", "=", "self", ".", "img_size", "[", "0", "]", "\n", "if", "self", ".", "resize_mode", "==", "'pad'", ":", "\n", "            ", "tsfs", "=", "[", "ResizeCust", "(", "size", ",", "fit_inside", "=", "True", ")", ",", "SquarePad", "(", "padding_mode", "=", "self", ".", "padding_mode", ")", ",", "ToTensor", "(", ")", "]", "\n", "", "elif", "self", ".", "random_crop", ":", "\n", "            ", "tsfs", "=", "[", "Resize", "(", "size", ")", ",", "RandomCrop", "(", "size", ")", ",", "ToTensor", "(", ")", "]", "\n", "", "else", ":", "\n", "            ", "tsfs", "=", "[", "Resize", "(", "size", ")", ",", "CenterCrop", "(", "size", ")", ",", "ToTensor", "(", ")", "]", "\n", "", "return", "Compose", "(", "tsfs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.monniert_unicorn.dataset.lsun.LSUNDataset.__init__": [[26, 59], ["torch.utils.data.dataset.Dataset.__init__", "utils.path_exists", "lmdb.open", "os.path.isfile", "kwargs.pop", "kwargs.pop", "kwargs.pop", "kwargs.pop", "kwargs.pop", "str", "lsun.LSUNDataset.env.begin", "pickle.load", "pickle.dump", "[].to_list", "len", "isinstance", "len", "txn.stat", "open", "lsun.LSUNDataset.env.begin", "list", "open", "txn.cursor().iternext", "str", "pandas.read_csv", "txn.cursor"], "methods", ["home.repos.pwc.inspect_result.monniert_unicorn.model.renderer.SoftPhongShaderPlus.__init__", "home.repos.pwc.inspect_result.monniert_unicorn.utils.__init__.path_exists"], ["def", "__init__", "(", "self", ",", "split", ",", "tag", ",", "img_size", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "import", "lmdb", "\n", "self", ".", "data_path", "=", "path_exists", "(", "self", ".", "root", "/", "self", ".", "name", "/", "tag", ")", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "tag", "=", "tag", "\n", "\n", "self", ".", "env", "=", "lmdb", ".", "open", "(", "str", "(", "self", ".", "data_path", ")", ",", "max_readers", "=", "1", ",", "readonly", "=", "True", ",", "lock", "=", "False", ",", "readahead", "=", "False", ",", "\n", "meminit", "=", "False", ")", "\n", "with", "self", ".", "env", ".", "begin", "(", "write", "=", "False", ")", "as", "txn", ":", "\n", "            ", "self", ".", "size", "=", "txn", ".", "stat", "(", ")", "[", "\"entries\"", "]", "\n", "# Cache files", "\n", "", "cache_file", "=", "\"_cache_\"", "+", "\"\"", ".", "join", "(", "c", "for", "c", "in", "str", "(", "self", ".", "data_path", ")", "if", "c", "in", "string", ".", "ascii_letters", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "cache_file", ")", ":", "\n", "            ", "self", ".", "keys", "=", "pickle", ".", "load", "(", "open", "(", "cache_file", ",", "\"rb\"", ")", ")", "\n", "", "else", ":", "\n", "            ", "with", "self", ".", "env", ".", "begin", "(", "write", "=", "False", ")", "as", "txn", ":", "\n", "                ", "self", ".", "keys", "=", "list", "(", "txn", ".", "cursor", "(", ")", ".", "iternext", "(", "keys", "=", "True", ",", "values", "=", "False", ")", ")", "\n", "", "pickle", ".", "dump", "(", "self", ".", "keys", ",", "open", "(", "cache_file", ",", "\"wb\"", ")", ")", "\n", "\n", "", "self", ".", "cleaned", "=", "kwargs", ".", "pop", "(", "'cleaned'", ",", "False", ")", "\n", "if", "self", ".", "cleaned", ":", "\n", "            ", "self", ".", "indices", "=", "pd", ".", "read_csv", "(", "self", ".", "data_path", "/", "'indices.txt'", ",", "sep", "=", "' '", ",", "header", "=", "None", ",", "index_col", "=", "0", ")", "[", "1", "]", ".", "to_list", "(", ")", "\n", "self", ".", "size", "=", "len", "(", "self", ".", "indices", ")", "\n", "", "self", ".", "max_size", "=", "kwargs", ".", "pop", "(", "'max_size'", ",", "self", ".", "size", ")", "\n", "self", ".", "chunk_idx", "=", "0", "\n", "\n", "self", ".", "img_size", "=", "(", "img_size", ",", "img_size", ")", "if", "isinstance", "(", "img_size", ",", "int", ")", "else", "img_size", "\n", "self", ".", "resize_mode", "=", "kwargs", ".", "pop", "(", "'resize_mode'", ",", "'pad'", ")", "\n", "assert", "self", ".", "resize_mode", "in", "[", "'crop'", ",", "'pad'", "]", "\n", "self", ".", "padding_mode", "=", "kwargs", ".", "pop", "(", "'padding_mode'", ",", "'edge'", ")", "\n", "self", ".", "random_flip", "=", "kwargs", ".", "pop", "(", "'random_flip'", ",", "RANDOM_FLIP", ")", "\n", "assert", "len", "(", "kwargs", ")", "==", "0", ",", "kwargs", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.dataset.lsun.LSUNDataset.__len__": [[60, 62], ["min"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "min", "(", "self", ".", "size", ",", "self", ".", "max_size", ")", "if", "self", ".", "split", "!=", "'val'", "else", "5", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.dataset.lsun.LSUNDataset.step": [[63, 67], ["None"], "methods", ["None"], ["", "def", "step", "(", "self", ")", ":", "\n", "        ", "self", ".", "chunk_idx", "+=", "1", "\n", "if", "(", "self", ".", "chunk_idx", "+", "1", ")", "*", "self", ".", "max_size", ">", "self", ".", "size", ":", "\n", "            ", "self", ".", "chunk_idx", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.dataset.lsun.LSUNDataset.__getitem__": [[68, 84], ["io.BytesIO", "io.BytesIO.write", "io.BytesIO.seek", "lsun.LSUNDataset.transform", "torch.cat", "env.begin", "txn.get", "PIL.Image.open().convert", "torch.eye", "torch.Tensor", "torch.empty", "PIL.Image.open"], "methods", ["home.repos.pwc.inspect_result.monniert_unicorn.dataset.comp_cars.CompCarsDataset.transform"], ["", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "if", "self", ".", "split", "==", "'val'", ":", "\n", "            ", "idx", "+=", "17", "\n", "", "env", "=", "self", ".", "env", "\n", "real_idx", "=", "self", ".", "chunk_idx", "*", "self", ".", "max_size", "+", "idx", "\n", "if", "self", ".", "cleaned", ":", "\n", "            ", "real_idx", "=", "self", ".", "indices", "[", "real_idx", "]", "\n", "", "with", "env", ".", "begin", "(", "write", "=", "False", ")", "as", "txn", ":", "\n", "            ", "imgbuf", "=", "txn", ".", "get", "(", "self", ".", "keys", "[", "real_idx", "]", ")", "\n", "\n", "", "buf", "=", "io", ".", "BytesIO", "(", ")", "\n", "buf", ".", "write", "(", "imgbuf", ")", "\n", "buf", ".", "seek", "(", "0", ")", "\n", "imgs", "=", "self", ".", "transform", "(", "Image", ".", "open", "(", "buf", ")", ".", "convert", "(", "\"RGB\"", ")", ")", "\n", "poses", "=", "torch", ".", "cat", "(", "[", "torch", ".", "eye", "(", "3", ")", ",", "torch", ".", "Tensor", "(", "[", "[", "0", "]", ",", "[", "0", "]", ",", "[", "2.732", "]", "]", ")", "]", ",", "dim", "=", "1", ")", "\n", "return", "{", "'imgs'", ":", "imgs", ",", "'masks'", ":", "torch", ".", "empty", "(", "1", ",", "*", "self", ".", "img_size", ")", ",", "'poses'", ":", "poses", "}", ",", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.dataset.lsun.LSUNDataset.transform": [[85, 96], ["functools.lru_cache", "torchvision.transforms.Compose", "torch_transforms.Resize", "torch_transforms.SquarePad", "torchvision.transforms.ToTensor", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor", "torchvision.transforms.RandomHorizontalFlip"], "methods", ["None"], ["", "@", "property", "\n", "@", "lru_cache", "(", ")", "\n", "def", "transform", "(", "self", ")", ":", "\n", "        ", "size", "=", "self", ".", "img_size", "[", "0", "]", "\n", "if", "self", ".", "resize_mode", "==", "'pad'", ":", "\n", "            ", "tsfs", "=", "[", "ResizeCust", "(", "size", ",", "fit_inside", "=", "True", ")", ",", "SquarePad", "(", "padding_mode", "=", "self", ".", "padding_mode", ")", ",", "ToTensor", "(", ")", "]", "\n", "", "else", ":", "\n", "            ", "tsfs", "=", "[", "Resize", "(", "size", ")", ",", "CenterCrop", "(", "size", ")", ",", "ToTensor", "(", ")", "]", "\n", "", "if", "self", ".", "random_flip", "and", "self", ".", "split", "==", "'train'", ":", "\n", "            ", "tsfs", "=", "[", "RandomHorizontalFlip", "(", ")", "]", "+", "tsfs", "\n", "", "return", "Compose", "(", "tsfs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.monniert_unicorn.dataset.cub_200.CUB200Dataset.__init__": [[32, 63], ["copy.deepcopy", "utils.path_exists", "utils.get_files_from", "[].tolist", "pandas.read_csv().astype", "copy.deepcopy.pop", "copy.deepcopy.pop", "copy.deepcopy.pop", "copy.deepcopy.pop", "copy.deepcopy.pop", "copy.deepcopy.pop", "pandas.read_csv().astype.iloc[].tolist", "len", "len", "[].tolist", "isinstance", "copy.deepcopy.pop", "len", "pandas.read_csv", "range", "utils.use_seed", "numpy.random.shuffle", "pandas.read_csv", "len", "zip", "pandas.read_csv"], "methods", ["home.repos.pwc.inspect_result.monniert_unicorn.utils.__init__.path_exists", "home.repos.pwc.inspect_result.monniert_unicorn.utils.__init__.get_files_from"], ["def", "__init__", "(", "self", ",", "split", ",", "img_size", ",", "**", "kwargs", ")", ":", "\n", "        ", "kwargs", "=", "deepcopy", "(", "kwargs", ")", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "data_path", "=", "path_exists", "(", "DATASETS_PATH", "/", "'cub_200'", "/", "'images'", ")", "\n", "self", ".", "input_files", "=", "get_files_from", "(", "self", ".", "data_path", ",", "[", "'png'", ",", "'jpg'", "]", ",", "recursive", "=", "True", ",", "sort", "=", "True", ")", "\n", "\n", "root", "=", "self", ".", "data_path", ".", "parent", "\n", "filenames", "=", "pd", ".", "read_csv", "(", "root", "/", "'images.txt'", ",", "sep", "=", "' '", ",", "index_col", "=", "0", ",", "header", "=", "None", ")", "[", "1", "]", ".", "tolist", "(", ")", "\n", "bboxes", "=", "pd", ".", "read_csv", "(", "root", "/", "'bounding_boxes.txt'", ",", "sep", "=", "' '", ",", "index_col", "=", "0", ",", "header", "=", "None", ")", ".", "astype", "(", "int", ")", "\n", "bboxes", "[", "3", "]", ",", "bboxes", "[", "4", "]", "=", "bboxes", "[", "1", "]", "+", "bboxes", "[", "3", "]", ",", "bboxes", "[", "2", "]", "+", "bboxes", "[", "4", "]", "# XXX bbox format before is [x, y, w, h]", "\n", "self", ".", "bbox_mapping", "=", "{", "filenames", "[", "k", "]", ":", "bboxes", ".", "iloc", "[", "k", "]", ".", "tolist", "(", ")", "for", "k", "in", "range", "(", "len", "(", "filenames", ")", ")", "}", "\n", "assert", "len", "(", "self", ".", "bbox_mapping", ")", "==", "len", "(", "self", ".", "input_files", ")", "\n", "\n", "split_data", "=", "kwargs", ".", "pop", "(", "'split_data'", ",", "SPLIT_DATA", ")", "\n", "if", "split_data", ":", "\n", "            ", "split_labels", "=", "pd", ".", "read_csv", "(", "root", "/", "'train_test_split.txt'", ",", "sep", "=", "' '", ",", "index_col", "=", "0", ",", "header", "=", "None", ")", "[", "1", "]", ".", "tolist", "(", ")", "\n", "split_label", "=", "0", "if", "split", "==", "'test'", "else", "1", "\n", "self", ".", "input_files", "=", "[", "self", ".", "data_path", "/", "f", "for", "f", ",", "lab", "in", "zip", "(", "filenames", ",", "split_labels", ")", "if", "lab", "==", "split_label", "]", "\n", "", "if", "self", ".", "split", "in", "[", "'val'", ",", "'test'", "]", ":", "# XXX images are sorted by model so we shuffle", "\n", "            ", "with", "use_seed", "(", "123", ")", ":", "\n", "                ", "np", ".", "random", ".", "shuffle", "(", "self", ".", "input_files", ")", "\n", "\n", "", "", "self", ".", "img_size", "=", "(", "img_size", ",", "img_size", ")", "if", "isinstance", "(", "img_size", ",", "int", ")", "else", "img_size", "\n", "self", ".", "bbox_crop", "=", "kwargs", ".", "pop", "(", "'bbox_crop'", ",", "True", ")", "\n", "self", ".", "resize_mode", "=", "kwargs", ".", "pop", "(", "'resize_mode'", ",", "'pad'", ")", "\n", "assert", "self", ".", "resize_mode", "in", "[", "'crop'", ",", "'pad'", "]", "\n", "self", ".", "padding_mode", "=", "kwargs", ".", "pop", "(", "'padding_mode'", ",", "'edge'", ")", "\n", "self", ".", "random_flip", "=", "kwargs", ".", "pop", "(", "'random_flip'", ",", "RANDOM_FLIP", ")", "\n", "self", ".", "random_jitter", "=", "kwargs", ".", "pop", "(", "'random_jitter'", ",", "RANDOM_JITTER", ")", "\n", "self", ".", "random_crop", "=", "kwargs", ".", "pop", "(", "'random_crop'", ",", "False", ")", "and", "split", "==", "'train'", "\n", "assert", "len", "(", "kwargs", ")", "==", "0", ",", "kwargs", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.dataset.cub_200.CUB200Dataset.__len__": [[64, 66], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "input_files", ")", "if", "self", ".", "split", "!=", "'val'", "else", "5", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.dataset.cub_200.CUB200Dataset.__getitem__": [[67, 86], ["PIL.Image.open().convert", "cub_200.CUB200Dataset.transform", "torch.cat", "numpy.asarray", "numpy.asarray", "utils.image.square_bbox", "torchvision.transforms.functional.pad.crop", "PIL.Image.open", "numpy.asarray", "utils.image.square_bbox.tolist", "max", "max", "max", "max", "sum", "torchvision.transforms.functional.pad", "torch.eye", "torch.Tensor", "torch.empty", "round", "numpy.asarray", "str", "round", "cub_200.CUB200Dataset.input_files[].relative_to", "random.random.random"], "methods", ["home.repos.pwc.inspect_result.monniert_unicorn.dataset.comp_cars.CompCarsDataset.transform", "home.repos.pwc.inspect_result.monniert_unicorn.utils.image.square_bbox"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "img", "=", "Image", ".", "open", "(", "self", ".", "input_files", "[", "idx", "]", ")", ".", "convert", "(", "'RGB'", ")", "\n", "if", "self", ".", "bbox_crop", ":", "\n", "            ", "bbox", "=", "np", ".", "asarray", "(", "self", ".", "bbox_mapping", "[", "str", "(", "self", ".", "input_files", "[", "idx", "]", ".", "relative_to", "(", "self", ".", "data_path", ")", ")", "]", ")", "\n", "bw", ",", "bh", "=", "bbox", "[", "2", "]", "-", "bbox", "[", "0", "]", "+", "1", ",", "bbox", "[", "3", "]", "-", "bbox", "[", "1", "]", "+", "1", "\n", "bbox", "+=", "np", ".", "asarray", "(", "[", "round", "(", "PADDING_BBOX", "*", "s", ")", "for", "s", "in", "[", "-", "bw", ",", "-", "bh", ",", "bw", ",", "bh", "]", "]", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "if", "self", ".", "random_jitter", "and", "self", ".", "split", "==", "'train'", ":", "\n", "                ", "bbox", "+=", "np", ".", "asarray", "(", "[", "round", "(", "JITTER_BBOX", "*", "s", "*", "(", "1", "-", "2", "*", "random", "(", ")", ")", ")", "for", "s", "in", "[", "bw", ",", "bh", ",", "bw", ",", "bh", "]", "]", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "", "bbox", "=", "square_bbox", "(", "bbox", ".", "tolist", "(", ")", ")", "\n", "p_left", ",", "p_top", "=", "max", "(", "0", ",", "-", "bbox", "[", "0", "]", ")", ",", "max", "(", "0", ",", "-", "bbox", "[", "1", "]", ")", "\n", "p_right", ",", "p_bottom", "=", "max", "(", "0", ",", "bbox", "[", "2", "]", "-", "img", ".", "size", "[", "0", "]", ")", ",", "max", "(", "0", ",", "bbox", "[", "3", "]", "-", "img", ".", "size", "[", "1", "]", ")", "\n", "if", "sum", "(", "[", "p_left", ",", "p_top", ",", "p_right", ",", "p_bottom", "]", ")", ">", "0", ":", "\n", "                ", "img", "=", "Fvision", ".", "pad", "(", "img", ",", "(", "p_left", ",", "p_top", ",", "p_right", ",", "p_bottom", ")", ",", "padding_mode", "=", "self", ".", "padding_mode", ")", "\n", "bbox", "=", "bbox", "+", "np", ".", "asarray", "(", "[", "p_left", ",", "p_top", ",", "p_left", ",", "p_top", "]", ")", "\n", "", "img", "=", "img", ".", "crop", "(", "bbox", ")", "\n", "\n", "", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "poses", "=", "torch", ".", "cat", "(", "[", "torch", ".", "eye", "(", "3", ")", ",", "torch", ".", "Tensor", "(", "[", "[", "0", "]", ",", "[", "0", "]", ",", "[", "2.732", "]", "]", ")", "]", ",", "dim", "=", "1", ")", "\n", "return", "{", "'imgs'", ":", "img", ",", "'masks'", ":", "torch", ".", "empty", "(", "1", ",", "*", "self", ".", "img_size", ")", ",", "'poses'", ":", "poses", "}", ",", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.dataset.cub_200.CUB200Dataset.transform": [[87, 102], ["functools.lru_cache", "torchvision.transforms.Compose", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "torch_transforms.Resize", "torch_transforms.SquarePad", "torchvision.transforms.ToTensor", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.Resize", "torchvision.transforms.RandomCrop", "torchvision.transforms.ToTensor", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor"], "methods", ["None"], ["", "@", "property", "\n", "@", "lru_cache", "(", ")", "\n", "def", "transform", "(", "self", ")", ":", "\n", "        ", "size", "=", "self", ".", "img_size", "[", "0", "]", "\n", "if", "self", ".", "bbox_crop", ":", "\n", "            ", "tsfs", "=", "[", "Resize", "(", "size", ")", ",", "ToTensor", "(", ")", "]", "\n", "", "elif", "self", ".", "resize_mode", "==", "'pad'", ":", "\n", "            ", "tsfs", "=", "[", "ResizeCust", "(", "size", ",", "fit_inside", "=", "True", ")", ",", "SquarePad", "(", "padding_mode", "=", "self", ".", "padding_mode", ")", ",", "ToTensor", "(", ")", "]", "\n", "", "elif", "self", ".", "random_crop", ":", "\n", "            ", "tsfs", "=", "[", "Resize", "(", "size", ")", ",", "RandomCrop", "(", "size", ")", ",", "ToTensor", "(", ")", "]", "\n", "", "else", ":", "\n", "            ", "tsfs", "=", "[", "Resize", "(", "size", ")", ",", "CenterCrop", "(", "size", ")", ",", "ToTensor", "(", ")", "]", "\n", "", "if", "self", ".", "random_flip", "and", "self", ".", "split", "==", "'train'", ":", "\n", "            ", "tsfs", "=", "[", "RandomHorizontalFlip", "(", ")", "]", "+", "tsfs", "\n", "", "return", "Compose", "(", "tsfs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.monniert_unicorn.dataset.torch_transforms.SquarePad.__init__": [[9, 12], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.monniert_unicorn.model.renderer.SoftPhongShaderPlus.__init__"], ["    ", "def", "__init__", "(", "self", ",", "padding_mode", "=", "'constant'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "padding_mode", "=", "padding_mode", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.dataset.torch_transforms.SquarePad.__call__": [[13, 29], ["isinstance", "max", "torchvision.transforms.functional.pad", "list", "max", "torch.nn.functional.pad", "zip", "zip"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "image", ")", ":", "\n", "        ", "if", "isinstance", "(", "image", ",", "PIL", ".", "Image", ".", "Image", ")", ":", "\n", "            ", "max_wh", "=", "max", "(", "image", ".", "size", ")", "\n", "p_left", ",", "p_top", "=", "[", "(", "max_wh", "-", "s", ")", "//", "2", "for", "s", "in", "image", ".", "size", "]", "\n", "p_right", ",", "p_bottom", "=", "[", "max_wh", "-", "(", "s", "+", "pad", ")", "for", "s", ",", "pad", "in", "zip", "(", "image", ".", "size", ",", "[", "p_left", ",", "p_top", "]", ")", "]", "\n", "padding", "=", "(", "p_left", ",", "p_top", ",", "p_right", ",", "p_bottom", ")", "\n", "return", "Fvision", ".", "pad", "(", "image", ",", "padding", ",", "fill", "=", "0", ",", "padding_mode", "=", "self", ".", "padding_mode", ")", "\n", "\n", "", "else", ":", "\n", "            ", "assert", "self", ".", "padding_mode", "==", "'constant'", ",", "'padding_mode not supported for tensors, use \"constant\" instead'", "\n", "img_size", "=", "list", "(", "image", ".", "shape", "[", "-", "2", ":", "]", ")", "\n", "max_wh", "=", "max", "(", "img_size", ")", "\n", "p_left", ",", "p_top", "=", "[", "(", "max_wh", "-", "s", ")", "//", "2", "for", "s", "in", "img_size", "]", "\n", "p_right", ",", "p_bottom", "=", "[", "max_wh", "-", "(", "s", "+", "pad", ")", "for", "s", ",", "pad", "in", "zip", "(", "img_size", ",", "[", "p_left", ",", "p_top", "]", ")", "]", "\n", "padding", "=", "(", "p_top", ",", "p_bottom", ",", "p_left", ",", "p_right", ")", "\n", "return", "F", ".", "pad", "(", "image", ",", "padding", ",", "value", "=", "0", ",", "mode", "=", "self", ".", "padding_mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.dataset.torch_transforms.Resize.__init__": [[32, 38], ["super().__init__", "isinstance"], "methods", ["home.repos.pwc.inspect_result.monniert_unicorn.model.renderer.SoftPhongShaderPlus.__init__"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "keep_aspect_ratio", "=", "True", ",", "resample", "=", "PIL", ".", "Image", ".", "ANTIALIAS", ",", "fit_inside", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "size", "=", "(", "size", ",", "size", ")", "if", "isinstance", "(", "size", ",", "int", ")", "else", "size", "\n", "self", ".", "keep_aspect_ratio", "=", "keep_aspect_ratio", "\n", "self", ".", "resample", "=", "resample", "\n", "self", ".", "fit_inside", "=", "fit_inside", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.dataset.torch_transforms.Resize.__call__": [[39, 42], ["utils.image.resize"], "methods", ["home.repos.pwc.inspect_result.monniert_unicorn.utils.image.resize"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "return", "resize", "(", "img", ",", "self", ".", "size", ",", "keep_aspect_ratio", "=", "self", ".", "keep_aspect_ratio", ",", "resample", "=", "self", ".", "resample", ",", "\n", "fit_inside", "=", "self", ".", "fit_inside", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.dataset.torch_transforms.TensorResize.__init__": [[45, 47], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "img_size", ")", ":", "\n", "        ", "self", ".", "img_size", "=", "img_size", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.dataset.torch_transforms.TensorResize.__call__": [[48, 50], ["torch.nn.functional.interpolate", "img.unsqueeze"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "return", "F", ".", "interpolate", "(", "img", ".", "unsqueeze", "(", "0", ")", ",", "self", ".", "img_size", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.dataset.torch_transforms.TensorResize.__repr__": [[51, 53], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "'()'", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.dataset.torch_transforms.TensorCenterCrop.__init__": [[56, 58], ["isinstance"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "img_size", ")", ":", "\n", "        ", "self", ".", "img_size", "=", "(", "img_size", ",", "img_size", ")", "if", "isinstance", "(", "img_size", ",", "int", ")", "else", "img_size", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.dataset.torch_transforms.TensorCenterCrop.__call__": [[59, 66], ["int", "int"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "image_width", ",", "image_height", "=", "img", ".", "shape", "[", "-", "2", ":", "]", "\n", "height", ",", "width", "=", "self", ".", "img_size", "\n", "\n", "top", "=", "int", "(", "(", "image_height", "-", "height", "+", "1", ")", "*", "0.5", ")", "\n", "left", "=", "int", "(", "(", "image_width", "-", "width", "+", "1", ")", "*", "0.5", ")", "\n", "return", "img", "[", "...", ",", "top", ":", "top", "+", "height", ",", "left", ":", "left", "+", "width", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.dataset.torch_transforms.TensorCenterCrop.__repr__": [[67, 69], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "'()'", "\n", "", "", ""]], "home.repos.pwc.inspect_result.monniert_unicorn.dataset.shapenet.ShapeNetDataset.__init__": [[22, 48], ["copy.deepcopy", "copy.deepcopy.pop", "copy.deepcopy.pop", "list", "shapenet.ShapeNetDataset.get_models", "len", "torch.Tensor", "torch.Tensor", "torch.Tensor", "len", "open", "yaml.load", "yaml.load.keys", "list", "[].split", "isinstance", "shapenet.ShapeNetDataset.get_models", "shapenet.ShapeNetDataset.get_models"], "methods", ["home.repos.pwc.inspect_result.monniert_unicorn.dataset.shapenet.ShapeNetDataset.get_models", "home.repos.pwc.inspect_result.monniert_unicorn.dataset.shapenet.ShapeNetDataset.get_models", "home.repos.pwc.inspect_result.monniert_unicorn.dataset.shapenet.ShapeNetDataset.get_models"], ["def", "__init__", "(", "self", ",", "split", ",", "n_views", "=", "1", ",", "categories", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "kwargs", "=", "deepcopy", "(", "kwargs", ")", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "n_views", "=", "n_views", "\n", "self", ".", "flatten_views", "=", "kwargs", ".", "pop", "(", "'flatten_views'", ",", "True", ")", "\n", "self", ".", "include_test", "=", "kwargs", ".", "pop", "(", "'include_test'", ",", "False", ")", "\n", "assert", "len", "(", "kwargs", ")", "==", "0", "\n", "\n", "with", "open", "(", "self", ".", "data_path", "/", "'metadata.yaml'", ")", "as", "fp", ":", "\n", "            ", "cfg", "=", "yaml", ".", "load", "(", "fp", ",", "Loader", "=", "yaml", ".", "FullLoader", ")", "\n", "", "indices", "=", "list", "(", "cfg", ".", "keys", "(", ")", ")", "\n", "cat2idx", "=", "{", "n", ":", "k", "for", "k", "in", "cfg", "for", "n", "in", "cfg", "[", "k", "]", "[", "'name'", "]", ".", "split", "(", "','", ")", "}", "\n", "if", "categories", "is", "None", ":", "\n", "            ", "categories", "=", "indices", "\n", "", "else", ":", "\n", "            ", "categories", "=", "[", "categories", "]", "if", "isinstance", "(", "categories", ",", "str", ")", "else", "categories", "\n", "categories", "=", "list", "(", "{", "cat2idx", "[", "c", "]", "for", "c", "in", "categories", "}", ")", "\n", "\n", "", "self", ".", "models", "=", "self", ".", "get_models", "(", "self", ".", "split", ",", "categories", ")", "\n", "if", "self", ".", "include_test", "and", "self", ".", "split", "==", "'train'", ":", "\n", "            ", "self", ".", "models", "+=", "self", ".", "get_models", "(", "'val'", ",", "categories", ")", "+", "self", ".", "get_models", "(", "'test'", ",", "categories", ")", "\n", "", "self", ".", "n_models", "=", "len", "(", "self", ".", "models", ")", "\n", "\n", "self", ".", "_R_col_adj", "=", "torch", ".", "Tensor", "(", "[", "[", "-", "1", ",", "0", ",", "0", "]", ",", "[", "0", ",", "-", "1", ",", "0", "]", ",", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "self", ".", "_R_row_adj", "=", "torch", ".", "Tensor", "(", "[", "[", "0", ",", "0", ",", "-", "1", "]", ",", "[", "0", ",", "1", ",", "0", "]", ",", "[", "1", ",", "0", ",", "0", "]", "]", ")", "\n", "self", ".", "_pc_adj", "=", "torch", ".", "Tensor", "(", "[", "[", "0", ",", "0", ",", "1", "]", ",", "[", "0", ",", "1", ",", "0", "]", ",", "[", "-", "1", ",", "0", ",", "0", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.dataset.shapenet.ShapeNetDataset.data_path": [[49, 52], ["utils.path_exists"], "methods", ["home.repos.pwc.inspect_result.monniert_unicorn.utils.__init__.path_exists"], ["", "@", "property", "\n", "def", "data_path", "(", "self", ")", ":", "\n", "        ", "return", "path_exists", "(", "DATASETS_PATH", "/", "self", ".", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.dataset.shapenet.ShapeNetDataset.get_models": [[53, 61], ["list", "open", "f.read().split", "filter", "f.read", "len"], "methods", ["None"], ["", "def", "get_models", "(", "self", ",", "split", ",", "categories", ")", ":", "\n", "        ", "models", "=", "[", "]", "\n", "for", "c", "in", "categories", ":", "\n", "            ", "with", "open", "(", "self", ".", "data_path", "/", "c", "/", "f'softras_{split}.lst'", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "names", "=", "f", ".", "read", "(", ")", ".", "split", "(", "'\\n'", ")", "\n", "", "names", "=", "list", "(", "filter", "(", "lambda", "x", ":", "len", "(", "x", ")", ">", "0", ",", "names", ")", ")", "\n", "models", "+=", "[", "{", "'category'", ":", "c", ",", "'model'", ":", "n", "}", "for", "n", "in", "names", "]", "\n", "", "return", "models", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.dataset.shapenet.ShapeNetDataset.is_sv_train": [[62, 65], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "is_sv_train", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "split", "==", "'train'", "and", "self", ".", "n_views", "==", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.dataset.shapenet.ShapeNetDataset.__len__": [[66, 71], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "if", "not", "(", "self", ".", "is_sv_train", "and", "self", ".", "flatten_views", ")", ":", "\n", "            ", "return", "self", ".", "n_models", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "n_models", "*", "self", ".", "n_tot_views", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.dataset.shapenet.ShapeNetDataset.__getitem__": [[72, 101], ["numpy.load", "numpy.load", "range", "torch.Tensor", "torch.Tensor", "imgs.append", "masks.append", "poses.append", "numpy.random.choice", "torchvision.transforms.functional.to_tensor", "torchvision.transforms.functional.to_tensor", "shapenet.ShapeNetDataset.adjust_extrinsics", "PIL.Image.open", "PIL.Image.open().convert", "torch.Tensor", "torch.stack", "torch.stack", "torch.stack", "PIL.Image.open", "str().zfill", "str", "str().zfill", "str"], "methods", ["home.repos.pwc.inspect_result.monniert_unicorn.dataset.shapenet.ShapeNetDataset.adjust_extrinsics"], ["", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "if", "self", ".", "is_sv_train", "and", "self", ".", "flatten_views", ":", "\n", "# XXX we consider each view as independent samples", "\n", "            ", "idx", ",", "indices", "=", "idx", "%", "self", ".", "n_models", ",", "[", "idx", "//", "self", ".", "n_models", "]", "\n", "", "else", ":", "\n", "            ", "indices", "=", "range", "(", "self", ".", "n_tot_views", ")", "\n", "if", "self", ".", "n_views", "<", "self", ".", "n_tot_views", ":", "\n", "                ", "indices", "=", "np", ".", "random", ".", "choice", "(", "indices", ",", "self", ".", "n_views", ",", "replace", "=", "False", ")", "\n", "\n", "", "", "cat", "=", "self", ".", "models", "[", "idx", "]", "[", "'category'", "]", "\n", "model", "=", "self", ".", "models", "[", "idx", "]", "[", "'model'", "]", "\n", "path", "=", "self", ".", "data_path", "/", "cat", "/", "model", "\n", "cameras", "=", "np", ".", "load", "(", "path", "/", "'cameras.npz'", ")", "\n", "pc_npz", "=", "np", ".", "load", "(", "path", "/", "'pointcloud.npz'", ")", "\n", "points", "=", "torch", ".", "Tensor", "(", "pc_npz", "[", "'points'", "]", ")", "@", "self", ".", "_pc_adj", "\n", "normals", "=", "torch", ".", "Tensor", "(", "pc_npz", "[", "'normals'", "]", ")", "@", "self", ".", "_pc_adj", "\n", "\n", "imgs", ",", "masks", ",", "poses", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "indices", ":", "\n", "            ", "imgs", ".", "append", "(", "to_tensor", "(", "Image", ".", "open", "(", "path", "/", "'image'", "/", "'{}.png'", ".", "format", "(", "str", "(", "i", ")", ".", "zfill", "(", "4", ")", ")", ")", ")", ")", "\n", "masks", ".", "append", "(", "to_tensor", "(", "Image", ".", "open", "(", "path", "/", "'mask'", "/", "'{}.png'", ".", "format", "(", "str", "(", "i", ")", ".", "zfill", "(", "4", ")", ")", ")", ".", "convert", "(", "'L'", ")", ")", ")", "\n", "poses", ".", "append", "(", "self", ".", "adjust_extrinsics", "(", "torch", ".", "Tensor", "(", "cameras", "[", "f'world_mat_{i}'", "]", ")", ")", ")", "# 3x4", "\n", "\n", "", "if", "self", ".", "n_views", ">", "1", ":", "\n", "            ", "return", "(", "{", "'imgs'", ":", "torch", ".", "stack", "(", "imgs", ")", ",", "'masks'", ":", "torch", ".", "stack", "(", "masks", ")", ",", "'poses'", ":", "torch", ".", "stack", "(", "poses", ")", "}", ",", "\n", "{", "'points'", ":", "points", ",", "'normals'", ":", "normals", "}", ")", "\n", "", "else", ":", "\n", "            ", "return", "(", "{", "'imgs'", ":", "imgs", "[", "0", "]", ",", "'masks'", ":", "masks", "[", "0", "]", ",", "'poses'", ":", "poses", "[", "0", "]", "}", ",", "\n", "{", "'points'", ":", "points", ",", "'normals'", ":", "normals", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.dataset.shapenet.ShapeNetDataset.adjust_extrinsics": [[102, 106], ["torch.split", "torch.cat"], "methods", ["None"], ["", "", "def", "adjust_extrinsics", "(", "self", ",", "P", ")", ":", "\n", "        ", "R", ",", "T", "=", "torch", ".", "split", "(", "P", "[", ":", "-", "1", "]", ",", "[", "3", ",", "1", "]", ",", "dim", "=", "1", ")", "\n", "R", "=", "self", ".", "_R_row_adj", "@", "R", ".", "T", "@", "self", ".", "_R_col_adj", "\n", "return", "torch", ".", "cat", "(", "[", "R", ",", "T", "]", ",", "dim", "=", "1", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.monniert_unicorn.dataset.p3d_car.P3DCarDataset.__init__": [[31, 50], ["copy.deepcopy", "utils.path_exists", "copy.deepcopy.pop", "copy.deepcopy.pop", "copy.deepcopy.pop", "copy.deepcopy.pop", "copy.deepcopy.pop", "copy.deepcopy.pop", "copy.deepcopy.pop", "scipy.io.loadmat", "len", "isinstance", "len", "str"], "methods", ["home.repos.pwc.inspect_result.monniert_unicorn.utils.__init__.path_exists"], ["def", "__init__", "(", "self", ",", "split", ",", "img_size", ",", "**", "kwargs", ")", ":", "\n", "        ", "kwargs", "=", "deepcopy", "(", "kwargs", ")", "\n", "self", ".", "data_path", "=", "path_exists", "(", "self", ".", "root", "/", "'pascal_3d'", "/", "'Images'", ")", "\n", "self", ".", "split", "=", "split", "\n", "eff_split", "=", "'train'", "if", "split", "==", "'val'", "else", "split", "\n", "path", "=", "self", ".", "data_path", ".", "parent", "/", "'ucmr_anno'", "/", "'data'", "/", "f'car_{eff_split}.mat'", "\n", "self", ".", "data", "=", "scio", ".", "loadmat", "(", "str", "(", "path", ")", ",", "struct_as_record", "=", "False", ",", "squeeze_me", "=", "True", ")", "[", "'images'", "]", "\n", "self", ".", "size", "=", "len", "(", "self", ".", "data", ")", "if", "self", ".", "split", "!=", "'val'", "else", "5", "\n", "\n", "self", ".", "img_size", "=", "(", "img_size", ",", "img_size", ")", "if", "isinstance", "(", "img_size", ",", "int", ")", "else", "img_size", "\n", "self", ".", "bbox_crop", "=", "kwargs", ".", "pop", "(", "'bbox_crop'", ",", "BBOX_CROP", ")", "\n", "self", ".", "resize_mode", "=", "kwargs", ".", "pop", "(", "'resize_mode'", ",", "'crop'", ")", "\n", "assert", "self", ".", "resize_mode", "in", "[", "'crop'", ",", "'pad'", "]", "\n", "self", ".", "padding_mode", "=", "kwargs", ".", "pop", "(", "'padding_mode'", ",", "'edge'", ")", "\n", "self", ".", "random_flip", "=", "kwargs", ".", "pop", "(", "'random_flip'", ",", "RANDOM_FLIP", ")", "\n", "self", ".", "random_jitter", "=", "kwargs", ".", "pop", "(", "'random_jitter'", ",", "RANDOM_JITTER", ")", "\n", "self", ".", "padding_box", "=", "kwargs", ".", "pop", "(", "'padding_box'", ",", "PADDING_BBOX", ")", "\n", "self", ".", "jitter_box", "=", "kwargs", ".", "pop", "(", "'jitter_box'", ",", "JITTER_BBOX", ")", "\n", "assert", "len", "(", "kwargs", ")", "==", "0", ",", "kwargs", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.dataset.p3d_car.P3DCarDataset.__len__": [[51, 53], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.dataset.p3d_car.P3DCarDataset.__getitem__": [[54, 76], ["PIL.Image.open().convert", "p3d_car.P3DCarDataset.transform", "torch.cat", "numpy.asarray", "utils.image.square_bbox", "torchvision.transforms.functional.pad.crop", "PIL.Image.open", "numpy.array", "numpy.asarray", "utils.image.square_bbox.tolist", "max", "max", "max", "max", "sum", "torchvision.transforms.functional.pad", "torch.eye", "torch.Tensor", "torch.empty", "round", "numpy.asarray", "round", "random.random.random"], "methods", ["home.repos.pwc.inspect_result.monniert_unicorn.dataset.comp_cars.CompCarsDataset.transform", "home.repos.pwc.inspect_result.monniert_unicorn.utils.image.square_bbox"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "data", "=", "self", ".", "data", "[", "idx", "]", "\n", "img", "=", "Image", ".", "open", "(", "self", ".", "data_path", "/", "data", ".", "rel_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "if", "self", ".", "bbox_crop", ":", "\n", "            ", "bbox", "=", "np", ".", "array", "(", "[", "data", ".", "bbox", ".", "x1", ",", "data", ".", "bbox", ".", "y1", ",", "data", ".", "bbox", ".", "x2", ",", "data", ".", "bbox", ".", "y2", "]", ")", "-", "1", "\n", "bw", ",", "bh", "=", "bbox", "[", "2", "]", "-", "bbox", "[", "0", "]", "+", "1", ",", "bbox", "[", "3", "]", "-", "bbox", "[", "1", "]", "+", "1", "\n", "bbox", "+=", "np", ".", "asarray", "(", "[", "round", "(", "self", ".", "padding_box", "*", "s", ")", "for", "s", "in", "[", "-", "bw", ",", "-", "bh", ",", "bw", ",", "bh", "]", "]", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "if", "self", ".", "random_jitter", "and", "self", ".", "split", "==", "'train'", ":", "\n", "                ", "bw", ",", "bh", "=", "bbox", "[", "2", "]", "-", "bbox", "[", "0", "]", "+", "1", ",", "bbox", "[", "3", "]", "-", "bbox", "[", "1", "]", "+", "1", "\n", "bbox", "+=", "np", ".", "asarray", "(", "[", "round", "(", "self", ".", "jitter_box", "*", "s", "*", "(", "1", "-", "2", "*", "random", "(", ")", ")", ")", "for", "s", "in", "[", "bw", ",", "bh", ",", "bw", ",", "bh", "]", "]", ",", "\n", "dtype", "=", "np", ".", "int64", ")", "\n", "", "bbox", "=", "square_bbox", "(", "bbox", ".", "tolist", "(", ")", ")", "\n", "p_left", ",", "p_top", "=", "max", "(", "0", ",", "-", "bbox", "[", "0", "]", ")", ",", "max", "(", "0", ",", "-", "bbox", "[", "1", "]", ")", "\n", "p_right", ",", "p_bottom", "=", "max", "(", "0", ",", "bbox", "[", "2", "]", "-", "img", ".", "size", "[", "0", "]", ")", ",", "max", "(", "0", ",", "bbox", "[", "3", "]", "-", "img", ".", "size", "[", "1", "]", ")", "\n", "if", "sum", "(", "[", "p_left", ",", "p_top", ",", "p_right", ",", "p_bottom", "]", ")", ">", "0", ":", "\n", "                ", "img", "=", "Fvision", ".", "pad", "(", "img", ",", "(", "p_left", ",", "p_top", ",", "p_right", ",", "p_bottom", ")", ",", "padding_mode", "=", "self", ".", "padding_mode", ")", "\n", "bbox", "=", "bbox", "+", "np", ".", "asarray", "(", "[", "p_left", ",", "p_top", ",", "p_left", ",", "p_top", "]", ")", "\n", "", "img", "=", "img", ".", "crop", "(", "bbox", ")", "\n", "\n", "", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "poses", "=", "torch", ".", "cat", "(", "[", "torch", ".", "eye", "(", "3", ")", ",", "torch", ".", "Tensor", "(", "[", "[", "0", "]", ",", "[", "0", "]", ",", "[", "2.732", "]", "]", ")", "]", ",", "dim", "=", "1", ")", "\n", "return", "{", "'imgs'", ":", "img", ",", "'masks'", ":", "torch", ".", "empty", "(", "1", ",", "*", "self", ".", "img_size", ")", ",", "'poses'", ":", "poses", "}", ",", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.dataset.p3d_car.P3DCarDataset.transform": [[77, 95], ["functools.lru_cache", "torchvision.transforms.Compose", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "torchvision.transforms.RandomHorizontalFlip", "torch_transforms.Resize", "torch_transforms.SquarePad", "torchvision.transforms.ToTensor", "torchvision.transforms.Resize", "torchvision.transforms.RandomCrop", "torchvision.transforms.ToTensor", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor"], "methods", ["None"], ["", "@", "property", "\n", "@", "lru_cache", "(", ")", "\n", "def", "transform", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "keep_aspect", ":", "\n", "            ", "size", "=", "self", ".", "img_size", "[", "0", "]", "\n", "if", "self", ".", "bbox_crop", ":", "\n", "                ", "tsfs", "=", "[", "Resize", "(", "size", ")", ",", "ToTensor", "(", ")", "]", "\n", "", "elif", "self", ".", "resize_mode", "==", "'pad'", ":", "\n", "                ", "tsfs", "=", "[", "ResizeCust", "(", "size", ",", "fit_inside", "=", "True", ")", ",", "SquarePad", "(", "padding_mode", "=", "self", ".", "padding_mode", ")", ",", "ToTensor", "(", ")", "]", "\n", "", "elif", "self", ".", "random_crop", ":", "\n", "                ", "tsfs", "=", "[", "Resize", "(", "size", ")", ",", "RandomCrop", "(", "size", ")", ",", "ToTensor", "(", ")", "]", "\n", "", "else", ":", "\n", "                ", "tsfs", "=", "[", "Resize", "(", "size", ")", ",", "CenterCrop", "(", "size", ")", ",", "ToTensor", "(", ")", "]", "\n", "", "", "else", ":", "\n", "            ", "tsfs", "=", "[", "Resize", "(", "self", ".", "img_size", ")", ",", "ToTensor", "(", ")", "]", "\n", "", "if", "self", ".", "random_flip", "and", "self", ".", "split", "==", "'train'", ":", "\n", "            ", "tsfs", "=", "[", "RandomHorizontalFlip", "(", ")", "]", "+", "tsfs", "\n", "", "return", "Compose", "(", "tsfs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.monniert_unicorn.dataset.__init__.create_train_val_test_loader": [[13, 31], ["kwargs.pop", "map", "utils.logger.print_log", "__init__.get_dataset", "__init__.get_dataset", "__init__.get_dataset", "cfg[].get", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "len", "len", "len", "torch.utils.data.DataLoader"], "function", ["home.repos.pwc.inspect_result.monniert_unicorn.utils.logger.print_log", "home.repos.pwc.inspect_result.monniert_unicorn.dataset.__init__.get_dataset", "home.repos.pwc.inspect_result.monniert_unicorn.dataset.__init__.get_dataset", "home.repos.pwc.inspect_result.monniert_unicorn.dataset.__init__.get_dataset"], ["import", "torch", "\n", "from", "torch", "import", "manual_seed", "as", "torch_seed", "\n", "from", "torch", "import", "get_rng_state", "as", "torch_get_state", "\n", "from", "torch", "import", "set_rng_state", "as", "torch_set_state", "\n", "\n", "\n", "def", "path_exists", "(", "path", ")", ":", "\n", "    ", "path", "=", "Path", "(", "path", ")", "\n", "if", "not", "path", ".", "exists", "(", ")", ":", "\n", "        ", "raise", "FileNotFoundError", "(", "'{} does not exist'", ".", "format", "(", "path", ".", "absolute", "(", ")", ")", ")", "\n", "", "return", "path", "\n", "\n", "\n", "", "def", "path_mkdir", "(", "path", ")", ":", "\n", "    ", "path", "=", "Path", "(", "path", ")", "\n", "path", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "return", "path", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.dataset.__init__.get_dataset": [[33, 47], ["None"], "function", ["None"], ["    ", "path", "=", "path_exists", "(", "dir_path", ")", "\n", "if", "recursive", ":", "\n", "        ", "files", "=", "[", "f", ".", "absolute", "(", ")", "for", "f", "in", "path", ".", "glob", "(", "'**/*'", ")", "if", "f", ".", "is_file", "(", ")", "]", "\n", "", "else", ":", "\n", "        ", "files", "=", "[", "f", ".", "absolute", "(", ")", "for", "f", "in", "path", ".", "glob", "(", "'*'", ")", "if", "f", ".", "is_file", "(", ")", "]", "\n", "\n", "", "if", "valid_extensions", "is", "not", "None", ":", "\n", "        ", "valid_extensions", "=", "[", "valid_extensions", "]", "if", "isinstance", "(", "valid_extensions", ",", "str", ")", "else", "valid_extensions", "\n", "valid_extensions", "=", "[", "'.{}'", ".", "format", "(", "ext", ")", "if", "not", "ext", ".", "startswith", "(", "'.'", ")", "else", "ext", "for", "ext", "in", "valid_extensions", "]", "\n", "files", "=", "list", "(", "filter", "(", "lambda", "f", ":", "f", ".", "suffix", "in", "valid_extensions", ",", "files", ")", ")", "\n", "\n", "", "return", "sorted", "(", "files", ")", "if", "sort", "else", "files", "\n", "\n", "\n", "", "def", "load_yaml", "(", "path", ")", ":", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.dataset.comp_cars.CompCarsDataset.__init__": [[20, 37], ["copy.deepcopy", "utils.path_exists", "utils.get_files_from", "copy.deepcopy.pop", "copy.deepcopy.pop", "isinstance", "copy.deepcopy.pop", "len", "utils.use_seed", "numpy.random.shuffle"], "methods", ["home.repos.pwc.inspect_result.monniert_unicorn.utils.__init__.path_exists", "home.repos.pwc.inspect_result.monniert_unicorn.utils.__init__.get_files_from"], ["def", "__init__", "(", "self", ",", "split", ",", "img_size", ",", "**", "kwargs", ")", ":", "\n", "        ", "kwargs", "=", "deepcopy", "(", "kwargs", ")", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "data_path", "=", "path_exists", "(", "DATASETS_PATH", "/", "self", ".", "name", "/", "'images'", ")", "\n", "self", ".", "input_files", "=", "get_files_from", "(", "self", ".", "data_path", ",", "[", "'jpg'", "]", ",", "recursive", "=", "True", ",", "sort", "=", "True", ")", "\n", "if", "self", ".", "split", "in", "[", "'val'", ",", "'test'", "]", ":", "# XXX images are sorted by model so we shuffle except first 10", "\n", "            ", "with", "use_seed", "(", "123", ")", ":", "\n", "                ", "first", ",", "last", "=", "self", ".", "input_files", "[", ":", "10", "]", ",", "self", ".", "input_files", "[", "10", ":", "]", "\n", "np", ".", "random", ".", "shuffle", "(", "last", ")", "\n", "self", ".", "input_files", "=", "first", "+", "last", "\n", "\n", "", "", "self", ".", "img_size", "=", "(", "img_size", ",", "img_size", ")", "if", "isinstance", "(", "img_size", ",", "int", ")", "else", "img_size", "\n", "self", ".", "resize_mode", "=", "kwargs", ".", "pop", "(", "'resize_mode'", ",", "'pad'", ")", "\n", "assert", "self", ".", "resize_mode", "in", "[", "'crop'", ",", "'pad'", "]", "\n", "self", ".", "padding_mode", "=", "kwargs", ".", "pop", "(", "'padding_mode'", ",", "'edge'", ")", "\n", "self", ".", "random_crop", "=", "kwargs", ".", "pop", "(", "'random_crop'", ",", "False", ")", "and", "split", "==", "'train'", "\n", "assert", "len", "(", "kwargs", ")", "==", "0", ",", "kwargs", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.dataset.comp_cars.CompCarsDataset.__len__": [[38, 40], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "input_files", ")", "if", "self", ".", "split", "!=", "'val'", "else", "5", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.dataset.comp_cars.CompCarsDataset.__getitem__": [[41, 45], ["comp_cars.CompCarsDataset.transform", "torch.cat", "PIL.Image.open().convert", "torch.eye", "torch.Tensor", "torch.empty", "PIL.Image.open"], "methods", ["home.repos.pwc.inspect_result.monniert_unicorn.dataset.comp_cars.CompCarsDataset.transform"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "imgs", "=", "self", ".", "transform", "(", "Image", ".", "open", "(", "self", ".", "input_files", "[", "idx", "]", ")", ".", "convert", "(", "'RGB'", ")", ")", "\n", "poses", "=", "torch", ".", "cat", "(", "[", "torch", ".", "eye", "(", "3", ")", ",", "torch", ".", "Tensor", "(", "[", "[", "0", "]", ",", "[", "0", "]", ",", "[", "2.732", "]", "]", ")", "]", ",", "dim", "=", "1", ")", "\n", "return", "{", "'imgs'", ":", "imgs", ",", "'masks'", ":", "torch", ".", "empty", "(", "1", ",", "*", "self", ".", "img_size", ")", ",", "'poses'", ":", "poses", "}", ",", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.dataset.comp_cars.CompCarsDataset.transform": [[46, 57], ["functools.lru_cache", "torchvision.transforms.Compose", "torch_transforms.Resize", "torch_transforms.SquarePad", "torchvision.transforms.ToTensor", "torchvision.transforms.Resize", "torchvision.transforms.RandomCrop", "torchvision.transforms.ToTensor", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor"], "methods", ["None"], ["", "@", "property", "\n", "@", "lru_cache", "(", ")", "\n", "def", "transform", "(", "self", ")", ":", "\n", "        ", "size", "=", "self", ".", "img_size", "[", "0", "]", "\n", "if", "self", ".", "resize_mode", "==", "'pad'", ":", "\n", "            ", "tsfs", "=", "[", "ResizeCust", "(", "size", ",", "fit_inside", "=", "True", ")", ",", "SquarePad", "(", "padding_mode", "=", "self", ".", "padding_mode", ")", ",", "ToTensor", "(", ")", "]", "\n", "", "elif", "self", ".", "random_crop", ":", "\n", "            ", "tsfs", "=", "[", "Resize", "(", "size", ")", ",", "RandomCrop", "(", "size", ")", ",", "ToTensor", "(", ")", "]", "\n", "", "else", ":", "\n", "            ", "tsfs", "=", "[", "Resize", "(", "size", ")", ",", "CenterCrop", "(", "size", ")", ",", "ToTensor", "(", ")", "]", "\n", "", "return", "Compose", "(", "tsfs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.monniert_unicorn.model.encoder.Encoder.__init__": [[28, 56], ["torch.nn.Module.__init__", "copy.deepcopy", "copy.deepcopy.pop", "copy.deepcopy.pop", "copy.deepcopy.pop", "tools.get_output_size", "torch.nn.Sequential", "len", "tools.Identity", "torch.nn.Sequential", "encoder.get_resnet_model", "seq.append", "torch.nn.Linear", "tools.kaiming_weights_init", "isinstance", "torch.nn.AdaptiveAvgPool2d"], "methods", ["home.repos.pwc.inspect_result.monniert_unicorn.model.renderer.SoftPhongShaderPlus.__init__", "home.repos.pwc.inspect_result.monniert_unicorn.model.tools.get_output_size", "home.repos.pwc.inspect_result.monniert_unicorn.model.encoder.get_resnet_model", "home.repos.pwc.inspect_result.monniert_unicorn.model.tools.kaiming_weights_init"], ["def", "__init__", "(", "self", ",", "img_size", ",", "name", "=", "'resnet18'", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "kwargs", "=", "deepcopy", "(", "kwargs", ")", "\n", "self", ".", "with_pool", "=", "kwargs", ".", "pop", "(", "'with_pool'", ",", "True", ")", "\n", "pretrained", "=", "kwargs", ".", "pop", "(", "'pretrained'", ",", "False", ")", "\n", "n_features", "=", "kwargs", ".", "pop", "(", "'n_features'", ",", "None", ")", "\n", "assert", "len", "(", "kwargs", ")", "==", "0", "\n", "if", "name", "==", "'identity'", ":", "\n", "            ", "self", ".", "encoder", "=", "Identity", "(", ")", "\n", "", "else", ":", "\n", "            ", "resnet", "=", "get_resnet_model", "(", "name", ")", "(", "pretrained", "=", "pretrained", ",", "progress", "=", "False", ")", "\n", "seq", "=", "[", "resnet", ".", "conv1", ",", "resnet", ".", "bn1", ",", "resnet", ".", "relu", ",", "resnet", ".", "maxpool", ",", "\n", "resnet", ".", "layer1", ",", "resnet", ".", "layer2", ",", "resnet", ".", "layer3", ",", "resnet", ".", "layer4", "]", "\n", "if", "self", ".", "with_pool", ":", "\n", "                ", "size", "=", "self", ".", "with_pool", "if", "isinstance", "(", "self", ".", "with_pool", ",", "(", "tuple", ",", "list", ")", ")", "else", "(", "1", ",", "1", ")", "\n", "seq", ".", "append", "(", "torch", ".", "nn", ".", "AdaptiveAvgPool2d", "(", "output_size", "=", "size", ")", ")", "\n", "", "self", ".", "encoder", "=", "nn", ".", "Sequential", "(", "*", "seq", ")", "\n", "\n", "", "out_ch", "=", "get_output_size", "(", "self", ".", "color_channels", ",", "img_size", ",", "self", ".", "encoder", ")", "\n", "fc", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "n_features", "is", "not", "None", ":", "\n", "            ", "if", "out_ch", "!=", "n_features", ":", "\n", "                ", "assert", "n_features", "<", "out_ch", "\n", "fc", "=", "nn", ".", "Linear", "(", "out_ch", ",", "n_features", ")", "\n", "_", "=", "kaiming_weights_init", "(", "fc", ")", "\n", "out_ch", "=", "n_features", "\n", "", "", "self", ".", "out_ch", "=", "out_ch", "\n", "self", ".", "fc", "=", "fc", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.model.encoder.Encoder.forward": [[57, 59], ["encoder.Encoder.fc", "encoder.Encoder.encoder().flatten", "encoder.Encoder.encoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "fc", "(", "self", ".", "encoder", "(", "x", ")", ".", "flatten", "(", "1", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.monniert_unicorn.model.encoder.get_resnet_model": [[9, 23], ["None"], "function", ["None"], ["def", "get_resnet_model", "(", "name", ")", ":", "\n", "    ", "if", "name", "is", "None", ":", "\n", "        ", "name", "=", "'resnet18'", "\n", "", "return", "{", "\n", "'resnet18'", ":", "tv_models", ".", "resnet18", ",", "\n", "'resnet34'", ":", "tv_models", ".", "resnet34", ",", "\n", "'resnet50'", ":", "tv_models", ".", "resnet50", ",", "\n", "'resnet101'", ":", "tv_models", ".", "resnet101", ",", "\n", "'resnet152'", ":", "tv_models", ".", "resnet152", ",", "\n", "'resnext50_32x4d'", ":", "tv_models", ".", "resnext50_32x4d", ",", "\n", "'resnext101_32x8d'", ":", "tv_models", ".", "resnext101_32x8d", ",", "\n", "'wide_resnet50_2'", ":", "tv_models", ".", "wide_resnet50_2", ",", "\n", "'wide_resnet101_2'", ":", "tv_models", ".", "wide_resnet101_2", ",", "\n", "}", "[", "name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.model.pytorch3d_monkey.AmbientLights.__init__": [[13, 17], ["pytorch3d.renderer.utils.TensorProperties.__init__"], "methods", ["home.repos.pwc.inspect_result.monniert_unicorn.model.renderer.SoftPhongShaderPlus.__init__"], ["def", "__init__", "(", "self", ",", "ambient_color", "=", "None", ",", "device", "=", "\"cpu\"", ")", ":", "\n", "        ", "if", "ambient_color", "is", "None", ":", "\n", "            ", "ambient_color", "=", "(", "(", "1.0", ",", "1.0", ",", "1.0", ")", ",", ")", "\n", "", "super", "(", ")", ".", "__init__", "(", "ambient_color", "=", "ambient_color", ",", "device", "=", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.model.pytorch3d_monkey.AmbientLights.clone": [[18, 21], ["pytorch3d_monkey.AmbientLights.__class__", "super().clone"], "methods", ["home.repos.pwc.inspect_result.monniert_unicorn.model.pytorch3d_monkey.AmbientLights.clone"], ["", "def", "clone", "(", "self", ")", ":", "\n", "        ", "other", "=", "self", ".", "__class__", "(", "device", "=", "self", ".", "device", ")", "\n", "return", "super", "(", ")", ".", "clone", "(", "other", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.model.pytorch3d_monkey.AmbientLights.diffuse": [[22, 24], ["torch.zeros_like"], "methods", ["None"], ["", "def", "diffuse", "(", "self", ",", "normals", ",", "points", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "return", "torch", ".", "zeros_like", "(", "points", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.model.pytorch3d_monkey.AmbientLights.specular": [[25, 27], ["torch.zeros_like"], "methods", ["None"], ["", "def", "specular", "(", "self", ",", "normals", ",", "points", ",", "camera_position", ",", "shininess", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "return", "torch", ".", "zeros_like", "(", "points", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.model.pytorch3d_monkey._apply_lighting": [[34, 71], ["lights.diffuse", "lights.specular", "cameras.get_camera_center", "normals.dim", "points.dim", "ambient_color.squeeze", "diffuse_color.squeeze", "specular_color.squeeze"], "function", ["home.repos.pwc.inspect_result.monniert_unicorn.model.pytorch3d_monkey.diffuse", "home.repos.pwc.inspect_result.monniert_unicorn.model.pytorch3d_monkey.specular"], ["", "", "def", "_apply_lighting", "(", "points", ",", "normals", ",", "lights", ",", "cameras", ",", "materials", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        points: torch tensor of shape (N, ..., 3) or (P, 3).\n        normals: torch tensor of shape (N, ..., 3) or (P, 3)\n        lights: instance of the Lights class.\n        cameras: instance of the Cameras class.\n        materials: instance of the Materials class.\n    Returns:\n        ambient_color: same shape as materials.ambient_color\n        diffuse_color: same shape as the input points\n        specular_color: same shape as the input points\n    \"\"\"", "\n", "light_diffuse", "=", "lights", ".", "diffuse", "(", "normals", "=", "normals", ",", "points", "=", "points", ")", "\n", "light_specular", "=", "lights", ".", "specular", "(", "\n", "normals", "=", "normals", ",", "\n", "points", "=", "points", ",", "\n", "camera_position", "=", "cameras", ".", "get_camera_center", "(", ")", ",", "\n", "shininess", "=", "materials", ".", "shininess", ",", "\n", ")", "\n", "ambient_color", "=", "materials", ".", "ambient_color", "*", "lights", ".", "ambient_color", "\n", "diffuse_color", "=", "materials", ".", "diffuse_color", "*", "light_diffuse", "\n", "specular_color", "=", "materials", ".", "specular_color", "*", "light_specular", "\n", "\n", "if", "normals", ".", "dim", "(", ")", "==", "2", "and", "points", ".", "dim", "(", ")", "==", "2", ":", "\n", "# If given packed inputs remove batch dim in output.", "\n", "        ", "return", "(", "\n", "ambient_color", ".", "squeeze", "(", ")", ",", "\n", "diffuse_color", ".", "squeeze", "(", ")", ",", "\n", "specular_color", ".", "squeeze", "(", ")", ",", "\n", ")", "\n", "\n", "", "if", "ambient_color", ".", "ndim", "!=", "diffuse_color", ".", "ndim", ":", "\n", "# Reshape from (N, 3) to have dimensions compatible with", "\n", "# diffuse_color which is of shape (N, H, W, K, 3)", "\n", "        ", "ambient_color", "=", "ambient_color", "[", ":", ",", "None", ",", "None", ",", "None", ",", ":", "]", "\n", "", "return", "ambient_color", ",", "diffuse_color", ",", "specular_color", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.model.pytorch3d_monkey.diffuse": [[73, 124], ["pytorch3d.renderer.utils.convert_to_tensors_and_broadcast", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.relu", "direction.view.view", "color.view.view", "torch.sum", "len"], "function", ["home.repos.pwc.inspect_result.monniert_unicorn.utils.mesh.normalize", "home.repos.pwc.inspect_result.monniert_unicorn.utils.mesh.normalize"], ["", "def", "diffuse", "(", "normals", ",", "color", ",", "direction", ")", ":", "\n", "    ", "\"\"\"\n    Calculate the diffuse component of light reflection using Lambert's\n    cosine law.\n    Args:\n        normals: (N, ..., 3) xyz normal vectors. Normals and points are\n            expected to have the same shape.\n        color: (1, 3) or (N, 3) RGB color of the diffuse component of the light.\n        direction: (x,y,z) direction of the light\n    Returns:\n        colors: (N, ..., 3), same shape as the input points.\n    The normals and light direction should be in the same coordinate frame\n    i.e. if the points have been transformed from world -> view space then\n    the normals and direction should also be in view space.\n    NOTE: to use with the packed vertices (i.e. no batch dimension) reformat the\n    inputs in the following way.\n    .. code-block:: python\n        Args:\n            normals: (P, 3)\n            color: (N, 3)[batch_idx, :] -> (P, 3)\n            direction: (N, 3)[batch_idx, :] -> (P, 3)\n        Returns:\n            colors: (P, 3)\n        where batch_idx is of shape (P). For meshes, batch_idx can be:\n        meshes.verts_packed_to_mesh_idx() or meshes.faces_packed_to_mesh_idx()\n        depending on whether points refers to the vertex coordinates or\n        average/interpolated face coordinates.\n    \"\"\"", "\n", "# TODO: handle multiple directional lights per batch element.", "\n", "# TODO: handle attenuation.", "\n", "\n", "# Ensure color and location have same batch dimension as normals", "\n", "normals", ",", "color", ",", "direction", "=", "convert_to_tensors_and_broadcast", "(", "\n", "normals", ",", "color", ",", "direction", ",", "device", "=", "normals", ".", "device", "\n", ")", "\n", "\n", "# Reshape direction and color so they have all the arbitrary intermediate", "\n", "# dimensions as normals. Assume first dim = batch dim and last dim = 3.", "\n", "points_dims", "=", "normals", ".", "shape", "[", "1", ":", "-", "1", "]", "\n", "expand_dims", "=", "(", "-", "1", ",", ")", "+", "(", "1", ",", ")", "*", "len", "(", "points_dims", ")", "+", "(", "3", ",", ")", "\n", "if", "direction", ".", "shape", "!=", "normals", ".", "shape", ":", "\n", "        ", "direction", "=", "direction", ".", "view", "(", "expand_dims", ")", "\n", "", "if", "color", ".", "shape", "!=", "normals", ".", "shape", ":", "\n", "        ", "color", "=", "color", ".", "view", "(", "expand_dims", ")", "\n", "\n", "# Renormalize the normals in case they have been interpolated.", "\n", "# We tried to replace the following with F.cosine_similarity, but it wasn't faster.", "\n", "", "normals", "=", "F", ".", "normalize", "(", "normals", ",", "p", "=", "2", ",", "dim", "=", "-", "1", ",", "eps", "=", "1e-6", ")", "\n", "direction", "=", "F", ".", "normalize", "(", "direction", ",", "p", "=", "2", ",", "dim", "=", "-", "1", ",", "eps", "=", "1e-6", ")", "\n", "angle", "=", "F", ".", "relu", "(", "torch", ".", "sum", "(", "normals", "*", "direction", ",", "dim", "=", "-", "1", ")", ")", "\n", "return", "color", "*", "angle", "[", "...", ",", "None", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.model.pytorch3d_monkey.specular": [[126, 199], ["pytorch3d.renderer.utils.convert_to_tensors_and_broadcast", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.sum", "torch.nn.functional.normalize", "ValueError", "direction.view.view", "color.view.view", "camera_position.view.view", "shininess.view.view", "torch.nn.functional.relu", "len", "torch.sum", "torch.pow"], "function", ["home.repos.pwc.inspect_result.monniert_unicorn.utils.mesh.normalize", "home.repos.pwc.inspect_result.monniert_unicorn.utils.mesh.normalize", "home.repos.pwc.inspect_result.monniert_unicorn.utils.mesh.normalize"], ["", "def", "specular", "(", "points", ",", "normals", ",", "direction", ",", "color", ",", "camera_position", ",", "shininess", ")", ":", "\n", "    ", "\"\"\"\n    Calculate the specular component of light reflection.\n    Args:\n        points: (N, ..., 3) xyz coordinates of the points.\n        normals: (N, ..., 3) xyz normal vectors for each point.\n        color: (N, 3) RGB color of the specular component of the light.\n        direction: (N, 3) vector direction of the light.\n        camera_position: (N, 3) The xyz position of the camera.\n        shininess: (N)  The specular exponent of the material.\n    Returns:\n        colors: (N, ..., 3), same shape as the input points.\n    The points, normals, camera_position, and direction should be in the same\n    coordinate frame i.e. if the points have been transformed from\n    world -> view space then the normals, camera_position, and light direction\n    should also be in view space.\n    To use with a batch of packed points reindex in the following way.\n    .. code-block:: python::\n        Args:\n            points: (P, 3)\n            normals: (P, 3)\n            color: (N, 3)[batch_idx] -> (P, 3)\n            direction: (N, 3)[batch_idx] -> (P, 3)\n            camera_position: (N, 3)[batch_idx] -> (P, 3)\n            shininess: (N)[batch_idx] -> (P)\n        Returns:\n            colors: (P, 3)\n        where batch_idx is of shape (P). For meshes batch_idx can be:\n        meshes.verts_packed_to_mesh_idx() or meshes.faces_packed_to_mesh_idx().\n    \"\"\"", "\n", "# TODO: handle multiple directional lights", "\n", "# TODO: attenuate based on inverse squared distance to the light source", "\n", "\n", "if", "points", ".", "shape", "!=", "normals", ".", "shape", ":", "\n", "        ", "msg", "=", "\"Expected points and normals to have the same shape: got %r, %r\"", "\n", "raise", "ValueError", "(", "msg", "%", "(", "points", ".", "shape", ",", "normals", ".", "shape", ")", ")", "\n", "\n", "# Ensure all inputs have same batch dimension as points", "\n", "", "matched_tensors", "=", "convert_to_tensors_and_broadcast", "(", "\n", "points", ",", "color", ",", "direction", ",", "camera_position", ",", "shininess", ",", "device", "=", "points", ".", "device", "\n", ")", "\n", "_", ",", "color", ",", "direction", ",", "camera_position", ",", "shininess", "=", "matched_tensors", "\n", "\n", "# Reshape direction and color so they have all the arbitrary intermediate", "\n", "# dimensions as points. Assume first dim = batch dim and last dim = 3.", "\n", "points_dims", "=", "points", ".", "shape", "[", "1", ":", "-", "1", "]", "\n", "expand_dims", "=", "(", "-", "1", ",", ")", "+", "(", "1", ",", ")", "*", "len", "(", "points_dims", ")", "\n", "if", "direction", ".", "shape", "!=", "normals", ".", "shape", ":", "\n", "        ", "direction", "=", "direction", ".", "view", "(", "expand_dims", "+", "(", "3", ",", ")", ")", "\n", "", "if", "color", ".", "shape", "!=", "normals", ".", "shape", ":", "\n", "        ", "color", "=", "color", ".", "view", "(", "expand_dims", "+", "(", "3", ",", ")", ")", "\n", "", "if", "camera_position", ".", "shape", "!=", "normals", ".", "shape", ":", "\n", "        ", "camera_position", "=", "camera_position", ".", "view", "(", "expand_dims", "+", "(", "3", ",", ")", ")", "\n", "", "if", "shininess", ".", "shape", "!=", "normals", ".", "shape", ":", "\n", "        ", "shininess", "=", "shininess", ".", "view", "(", "expand_dims", ")", "\n", "\n", "# Renormalize the normals in case they have been interpolated.", "\n", "# We tried a version that uses F.cosine_similarity instead of renormalizing,", "\n", "# but it was slower.", "\n", "", "normals", "=", "F", ".", "normalize", "(", "normals", ",", "p", "=", "2", ",", "dim", "=", "-", "1", ",", "eps", "=", "1e-6", ")", "\n", "direction", "=", "F", ".", "normalize", "(", "direction", ",", "p", "=", "2", ",", "dim", "=", "-", "1", ",", "eps", "=", "1e-6", ")", "\n", "cos_angle", "=", "torch", ".", "sum", "(", "normals", "*", "direction", ",", "dim", "=", "-", "1", ")", "\n", "# No specular highlights if angle is less than 0.", "\n", "mask", "=", "(", "cos_angle", ">", "0", ")", ".", "to", "(", "torch", ".", "float32", ")", "\n", "\n", "# Calculate the specular reflection.", "\n", "view_direction", "=", "camera_position", "-", "points", "\n", "view_direction", "=", "F", ".", "normalize", "(", "view_direction", ",", "p", "=", "2", ",", "dim", "=", "-", "1", ",", "eps", "=", "1e-6", ")", "\n", "reflect_direction", "=", "-", "direction", "+", "2", "*", "(", "cos_angle", "[", "...", ",", "None", "]", "*", "normals", ")", "\n", "\n", "# Cosine of the angle between the reflected light ray and the viewer", "\n", "alpha", "=", "F", ".", "relu", "(", "torch", ".", "sum", "(", "view_direction", "*", "reflect_direction", ",", "dim", "=", "-", "1", ")", ")", "*", "mask", "\n", "return", "color", "*", "torch", ".", "pow", "(", "alpha", ",", "shininess", ")", "[", "...", ",", "None", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.model.pytorch3d_monkey._check_valid_rotation_matrix": [[201, 203], ["None"], "function", ["None"], ["", "def", "_check_valid_rotation_matrix", "(", "R", ",", "tol", "=", "1e-7", ")", ":", "\n", "    ", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.model.tools.Identity.__init__": [[82, 84], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.monniert_unicorn.model.renderer.SoftPhongShaderPlus.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.model.tools.Identity.forward": [[85, 87], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.model.tools.Blur.__init__": [[95, 101], ["torch.nn.Module.__init__", "torch.Tensor", "tools.Blur.register_buffer", "torch.Tensor.norm"], "methods", ["home.repos.pwc.inspect_result.monniert_unicorn.model.renderer.SoftPhongShaderPlus.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "kernel", "=", "torch", ".", "Tensor", "(", "[", "1", ",", "2", ",", "1", "]", ")", "\n", "kernel", "=", "kernel", "[", "None", ",", "None", ",", ":", "]", "*", "kernel", "[", "None", ",", ":", ",", "None", "]", "\n", "kernel", "=", "kernel", "/", "kernel", ".", "norm", "(", "p", "=", "1", ")", "\n", "self", ".", "register_buffer", "(", "'kernel'", ",", "kernel", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.model.tools.Blur.forward": [[102, 109], ["torch.nn.functional.pad", "tools.Blur.kernel.unsqueeze().expand", "kernel.reshape.reshape.reshape", "x.view.view.view", "torch.nn.functional.conv2d().view", "kernel.reshape.reshape.size", "x.view.view.size", "x.view.view.size", "tools.Blur.kernel.unsqueeze", "torch.nn.functional.conv2d", "kernel.reshape.reshape.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "B", ",", "C", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "x", "=", "F", ".", "pad", "(", "x", ",", "(", "1", ",", "1", ",", "1", ",", "1", ")", ",", "mode", "=", "'reflect'", ")", "\n", "kernel", "=", "self", ".", "kernel", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "-", "1", ",", "C", ",", "-", "1", ",", "-", "1", ")", "\n", "kernel", "=", "kernel", ".", "reshape", "(", "-", "1", ",", "1", ",", "*", "kernel", ".", "shape", "[", "2", ":", "]", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "kernel", ".", "size", "(", "0", ")", ",", "x", ".", "size", "(", "-", "2", ")", ",", "x", ".", "size", "(", "-", "1", ")", ")", "\n", "return", "F", ".", "conv2d", "(", "x", ",", "kernel", ",", "groups", "=", "kernel", ".", "size", "(", "0", ")", ",", "padding", "=", "0", ",", "stride", "=", "1", ")", ".", "view", "(", "B", ",", "C", ",", "H", ",", "W", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.model.tools.safe_model_state_dict": [[17, 22], ["toolz.keymap", "next().startswith", "next", "iter"], "function", ["None"], ["def", "safe_model_state_dict", "(", "state_dict", ")", ":", "\n", "    ", "\"\"\"Convert a state dict saved from a DataParallel module to normal module state_dict.\"\"\"", "\n", "if", "not", "next", "(", "iter", "(", "state_dict", ")", ")", ".", "startswith", "(", "\"module.\"", ")", ":", "\n", "        ", "return", "state_dict", "# abort if dict is not a DataParallel model_state", "\n", "", "return", "keymap", "(", "lambda", "s", ":", "s", "[", "7", ":", "]", ",", "state_dict", ",", "factory", "=", "OrderedDict", ")", "# remove 'module.'", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.model.tools.count_parameters": [[24, 26], ["sum", "p.numel", "model.parameters"], "function", ["None"], ["", "def", "count_parameters", "(", "model", ")", ":", "\n", "    ", "return", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.model.tools.conv3x3": [[28, 35], ["torch.nn.Conv2d", "nn.Conv2d.weight.data.zero_"], "function", ["None"], ["", "def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "groups", "=", "1", ",", "dilation", "=", "1", ",", "zero_init", "=", "False", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "conv", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "groups", "=", "groups", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "if", "zero_init", ":", "\n", "        ", "conv", ".", "weight", ".", "data", ".", "zero_", "(", ")", "\n", "", "return", "conv", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.model.tools.conv1x1": [[37, 40], ["torch.nn.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.model.tools.create_mlp": [[42, 62], ["torch.nn.Sequential", "range", "nn.Sequential.apply", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.no_grad", "mlp[].bias.zero_", "torch.nn.Linear", "torch.nn.ReLU", "mlp[].weight.zero_", "mlp[].weight.normal_"], "function", ["None"], ["", "def", "create_mlp", "(", "in_ch", ",", "out_ch", ",", "n_units", "=", "N_UNITS", ",", "n_layers", "=", "N_LAYERS", ",", "kaiming_init", "=", "True", ",", "zero_last_init", "=", "False", ")", ":", "\n", "    ", "if", "n_layers", ">", "0", ":", "\n", "        ", "seq", "=", "[", "nn", ".", "Linear", "(", "in_ch", ",", "n_units", ")", ",", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "for", "_", "in", "range", "(", "n_layers", "-", "1", ")", ":", "\n", "            ", "seq", "+=", "[", "nn", ".", "Linear", "(", "n_units", ",", "n_units", ")", ",", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "", "seq", "+=", "[", "nn", ".", "Linear", "(", "n_units", ",", "out_ch", ")", "]", "\n", "", "else", ":", "\n", "        ", "seq", "=", "[", "nn", ".", "Linear", "(", "in_ch", ",", "out_ch", ")", "]", "\n", "", "mlp", "=", "nn", ".", "Sequential", "(", "*", "seq", ")", "\n", "\n", "if", "kaiming_init", ":", "\n", "        ", "mlp", ".", "apply", "(", "kaiming_weights_init", ")", "\n", "", "if", "zero_last_init", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "if", "zero_last_init", "is", "True", ":", "\n", "                ", "mlp", "[", "-", "1", "]", ".", "weight", ".", "zero_", "(", ")", "\n", "", "else", ":", "\n", "                ", "mlp", "[", "-", "1", "]", ".", "weight", ".", "normal_", "(", "mean", "=", "0", ",", "std", "=", "zero_last_init", ")", "\n", "", "mlp", "[", "-", "1", "]", ".", "bias", ".", "zero_", "(", ")", "\n", "", "", "return", "mlp", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.model.tools.kaiming_weights_init": [[64, 70], ["torch.no_grad", "isinstance", "torch.nn.init.kaiming_normal_", "torch.nn.init.zeros_"], "function", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "kaiming_weights_init", "(", "m", ",", "nonlinearity", "=", "'relu'", ")", ":", "\n", "    ", "if", "isinstance", "(", "m", ",", "(", "nn", ".", "Linear", ",", "nn", ".", "Conv1d", ",", "nn", ".", "Conv2d", ")", ")", ":", "\n", "        ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "nonlinearity", "=", "nonlinearity", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.model.tools.get_nb_out_channels": [[72, 74], ["list", "filter", "layer.modules", "isinstance"], "function", ["None"], ["", "", "", "def", "get_nb_out_channels", "(", "layer", ")", ":", "\n", "    ", "return", "list", "(", "filter", "(", "lambda", "e", ":", "isinstance", "(", "e", ",", "nn", ".", "Conv2d", ")", ",", "layer", ".", "modules", "(", ")", ")", ")", "[", "-", "1", "]", ".", "out_channels", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.model.tools.get_output_size": [[76, 79], ["torch.zeros", "numpy.prod", "model"], "function", ["None"], ["", "def", "get_output_size", "(", "in_channels", ",", "img_size", ",", "model", ")", ":", "\n", "    ", "x", "=", "torch", ".", "zeros", "(", "1", ",", "in_channels", ",", "*", "img_size", ")", "\n", "return", "np", ".", "prod", "(", "model", "(", "x", ")", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.model.tools.create_upsample_layer": [[111, 118], ["torch.nn.Upsample", "torch.nn.Sequential", "torch.nn.Upsample", "tools.Blur"], "function", ["None"], ["", "", "def", "create_upsample_layer", "(", "name", ")", ":", "\n", "    ", "if", "name", "==", "'nn'", ":", "\n", "        ", "return", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ")", "\n", "", "elif", "name", "==", "'bilinear'", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", ",", "Blur", "(", ")", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.model.tools.init_rotations": [[125, 146], ["torch.Tensor", "map", "torch.zeros", "utils.logger.print_log", "torch.stack", "init_type.startswith", "torch.Tensor", "torch.Tensor", "torch.meshgrid", "pytorch3d.transforms.random_rotations", "t.flatten", "range", "torch.Tensor.tolist", "torch.Tensor.tolist", "torch.zeros.tolist", "range", "range"], "function", ["home.repos.pwc.inspect_result.monniert_unicorn.utils.logger.print_log"], ["", "", "def", "init_rotations", "(", "init_type", "=", "'uniform'", ",", "N", "=", "None", ",", "n_elev", "=", "None", ",", "n_azim", "=", "None", ",", "elev_range", "=", "None", ",", "azim_range", "=", "None", ")", ":", "\n", "    ", "if", "init_type", "==", "'uniform'", ":", "\n", "        ", "assert", "n_elev", "is", "not", "None", "and", "n_azim", "is", "not", "None", "\n", "assert", "N", "==", "n_elev", "*", "n_azim", "if", "N", "is", "not", "None", "else", "True", "\n", "eb", ",", "ee", "=", "elev_range", "if", "elev_range", "is", "not", "None", "else", "(", "-", "90", ",", "90", ")", "\n", "ab", ",", "ae", "=", "azim_range", "if", "azim_range", "is", "not", "None", "else", "(", "-", "180", ",", "180", ")", "\n", "er", ",", "ar", "=", "ee", "-", "eb", ",", "ae", "-", "ab", "\n", "elev", "=", "torch", ".", "Tensor", "(", "[", "k", "*", "er", "/", "n_elev", "+", "eb", "-", "er", "/", "(", "2", "*", "n_elev", ")", "for", "k", "in", "range", "(", "1", ",", "n_elev", "+", "1", ")", "]", ")", "# [-60, 0, 60]", "\n", "if", "ar", "==", "360", ":", "\n", "            ", "azim", "=", "torch", ".", "Tensor", "(", "[", "k", "*", "ar", "/", "n_azim", "+", "ab", "for", "k", "in", "range", "(", "n_azim", ")", "]", ")", "# e.g. [-180, -90, 0, 90]", "\n", "", "else", ":", "\n", "            ", "azim", "=", "torch", ".", "Tensor", "(", "[", "k", "*", "ar", "/", "n_azim", "+", "ab", "-", "ar", "/", "(", "2", "*", "n_azim", ")", "for", "k", "in", "range", "(", "1", ",", "n_azim", "+", "1", ")", "]", ")", "# [-60, 0, 60]", "\n", "", "elev", ",", "azim", "=", "map", "(", "lambda", "t", ":", "t", ".", "flatten", "(", ")", ",", "torch", ".", "meshgrid", "(", "elev", ",", "azim", ")", ")", "\n", "roll", "=", "torch", ".", "zeros", "(", "elev", ".", "shape", ")", "\n", "print_log", "(", "f'init_rotations: azim={azim.tolist()}, elev={elev.tolist()}, roll={roll.tolist()}'", ")", "\n", "R_init", "=", "torch", ".", "stack", "(", "[", "azim", ",", "elev", ",", "roll", "]", ",", "dim", "=", "1", ")", "\n", "", "elif", "init_type", ".", "startswith", "(", "'random'", ")", ":", "\n", "        ", "R_init", "=", "random_rotations", "(", "N", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "return", "R_init", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.model.tools.convert_3d_to_uv_coordinates": [[148, 156], ["torch.norm().clamp", "torch.acos", "torch.atan2", "torch.stack", "torch.norm"], "function", ["None"], ["", "def", "convert_3d_to_uv_coordinates", "(", "X", ",", "eps", "=", "1e-5", ")", ":", "\n", "    ", "\"\"\"Resulting UV in [0, 1]\"\"\"", "\n", "radius", "=", "torch", ".", "norm", "(", "X", ",", "dim", "=", "-", "1", ")", ".", "clamp", "(", "min", "=", "eps", ")", "\n", "theta", "=", "torch", ".", "acos", "(", "(", "X", "[", "...", ",", "1", "]", "/", "radius", ")", ".", "clamp", "(", "min", "=", "-", "1", "+", "eps", ",", "max", "=", "1", "-", "eps", ")", ")", "# Inclination: Angle with +Y [0,pi]", "\n", "phi", "=", "torch", ".", "atan2", "(", "X", "[", "...", ",", "0", "]", ",", "X", "[", "...", ",", "2", "]", ")", "# Azimuth: Angle with +Z [-pi,pi]", "\n", "vv", "=", "(", "theta", "/", "np", ".", "pi", ")", "\n", "uu", "=", "(", "(", "phi", "+", "np", ".", "pi", ")", "/", "(", "2", "*", "np", ".", "pi", ")", ")", "\n", "return", "torch", ".", "stack", "(", "[", "uu", ",", "vv", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.model.tools.convert_uv_to_3d_coordinates": [[158, 168], ["torch.cos", "torch.sin", "torch.cos", "torch.sin", "torch.sin", "torch.stack"], "function", ["None"], ["", "def", "convert_uv_to_3d_coordinates", "(", "uv", ",", "radius", "=", "1", ",", "half_sphere", "=", "False", ")", ":", "\n", "    ", "\"\"\"input UV in [0, 1]\"\"\"", "\n", "phi", "=", "np", ".", "pi", "*", "(", "uv", "[", "...", ",", "0", "]", "*", "2", "-", "1", ")", "\n", "theta", "=", "np", ".", "pi", "*", "uv", "[", "...", ",", "1", "]", "\n", "if", "half_sphere", ":", "\n", "        ", "theta", "=", "theta", "/", "2", "\n", "", "z", "=", "torch", ".", "sin", "(", "theta", ")", "*", "torch", ".", "cos", "(", "phi", ")", "\n", "x", "=", "torch", ".", "sin", "(", "theta", ")", "*", "torch", ".", "sin", "(", "phi", ")", "\n", "y", "=", "torch", ".", "cos", "(", "theta", ")", "\n", "return", "torch", ".", "stack", "(", "[", "x", ",", "y", ",", "z", "]", ",", "dim", "=", "-", "1", ")", "*", "radius", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.model.tools.convert_spherical_to_3d_coordinates": [[170, 179], ["torch.cos", "torch.stack", "torch.sin", "torch.cos", "torch.sin", "torch.sin"], "function", ["None"], ["", "def", "convert_spherical_to_3d_coordinates", "(", "phi", ",", "theta", ",", "radius", "=", "1", ",", "as_degree", "=", "True", ")", ":", "\n", "    ", "\"\"\"input UV in [0, 1]\"\"\"", "\n", "if", "as_degree", ":", "\n", "        ", "phi", ",", "theta", "=", "np", ".", "pi", "*", "phi", "/", "180", ",", "np", ".", "pi", "*", "theta", "/", "180", "\n", "", "x", "=", "torch", ".", "sin", "(", "theta", ")", "*", "torch", ".", "cos", "(", "phi", ")", "\n", "y", "=", "torch", ".", "sin", "(", "theta", ")", "*", "torch", ".", "sin", "(", "phi", ")", "\n", "z", "=", "torch", ".", "cos", "(", "theta", ")", "\n", "points3d", "=", "torch", ".", "stack", "(", "[", "x", ",", "y", ",", "z", "]", ",", "dim", "=", "-", "1", ")", "\n", "return", "points3d", "*", "radius", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.model.tools.azim_to_rotation_matrix": [[181, 192], ["isinstance", "[].repeat", "torch.zeros", "torch.stack", "torch.stack", "[].repeat.squeeze", "torch.Tensor", "len", "torch.cos", "torch.sin", "len", "torch.eye"], "function", ["home.repos.pwc.inspect_result.monniert_unicorn.utils.mesh.repeat"], ["", "def", "azim_to_rotation_matrix", "(", "azim", ",", "as_degree", "=", "True", ")", ":", "\n", "    ", "\"\"\"Angle with +X in XZ plane\"\"\"", "\n", "if", "isinstance", "(", "azim", ",", "(", "int", ",", "float", ")", ")", ":", "\n", "        ", "azim", "=", "torch", ".", "Tensor", "(", "[", "azim", "]", ")", "\n", "", "azim_rad", "=", "azim", "*", "np", ".", "pi", "/", "180", "if", "as_degree", "else", "azim", "\n", "R", "=", "torch", ".", "eye", "(", "3", ",", "device", "=", "azim", ".", "device", ")", "[", "None", "]", ".", "repeat", "(", "len", "(", "azim", ")", ",", "1", ",", "1", ")", "\n", "cos", ",", "sin", "=", "torch", ".", "cos", "(", "azim_rad", ")", ",", "torch", ".", "sin", "(", "azim_rad", ")", "\n", "zeros", "=", "torch", ".", "zeros", "(", "len", "(", "azim", ")", ",", "device", "=", "azim", ".", "device", ")", "\n", "R", "[", ":", ",", "0", ",", ":", "]", "=", "torch", ".", "stack", "(", "[", "cos", ",", "zeros", ",", "sin", "]", ",", "dim", "=", "-", "1", ")", "\n", "R", "[", ":", ",", "2", ",", ":", "]", "=", "torch", ".", "stack", "(", "[", "-", "sin", ",", "zeros", ",", "cos", "]", ",", "dim", "=", "-", "1", ")", "\n", "return", "R", ".", "squeeze", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.model.tools.elev_to_rotation_matrix": [[194, 204], ["isinstance", "[].repeat", "torch.stack", "torch.stack", "[].repeat.squeeze", "torch.Tensor", "len", "torch.cos", "torch.sin", "torch.eye"], "function", ["home.repos.pwc.inspect_result.monniert_unicorn.utils.mesh.repeat"], ["", "def", "elev_to_rotation_matrix", "(", "elev", ",", "as_degree", "=", "True", ")", ":", "\n", "    ", "\"\"\"Angle with +Z in YZ plane\"\"\"", "\n", "if", "isinstance", "(", "elev", ",", "(", "int", ",", "float", ")", ")", ":", "\n", "        ", "elev", "=", "torch", ".", "Tensor", "(", "[", "elev", "]", ")", "\n", "", "elev_rad", "=", "elev", "*", "np", ".", "pi", "/", "180", "if", "as_degree", "else", "elev", "\n", "R", "=", "torch", ".", "eye", "(", "3", ",", "device", "=", "elev", ".", "device", ")", "[", "None", "]", ".", "repeat", "(", "len", "(", "elev", ")", ",", "1", ",", "1", ")", "\n", "cos", ",", "sin", "=", "torch", ".", "cos", "(", "-", "elev_rad", ")", ",", "torch", ".", "sin", "(", "-", "elev_rad", ")", "\n", "R", "[", ":", ",", "1", ",", "1", ":", "]", "=", "torch", ".", "stack", "(", "[", "cos", ",", "sin", "]", ",", "dim", "=", "-", "1", ")", "\n", "R", "[", ":", ",", "2", ",", "1", ":", "]", "=", "torch", ".", "stack", "(", "[", "-", "sin", ",", "cos", "]", ",", "dim", "=", "-", "1", ")", "\n", "return", "R", ".", "squeeze", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.model.tools.roll_to_rotation_matrix": [[206, 216], ["isinstance", "[].repeat", "torch.stack", "torch.stack", "[].repeat.squeeze", "torch.Tensor", "len", "torch.cos", "torch.sin", "torch.eye"], "function", ["home.repos.pwc.inspect_result.monniert_unicorn.utils.mesh.repeat"], ["", "def", "roll_to_rotation_matrix", "(", "roll", ",", "as_degree", "=", "True", ")", ":", "\n", "    ", "\"\"\"Angle with +X in XY plane\"\"\"", "\n", "if", "isinstance", "(", "roll", ",", "(", "int", ",", "float", ")", ")", ":", "\n", "        ", "roll", "=", "torch", ".", "Tensor", "(", "[", "roll", "]", ")", "\n", "", "roll_rad", "=", "roll", "*", "np", ".", "pi", "/", "180", "if", "as_degree", "else", "roll", "\n", "R", "=", "torch", ".", "eye", "(", "3", ",", "device", "=", "roll", ".", "device", ")", "[", "None", "]", ".", "repeat", "(", "len", "(", "roll", ")", ",", "1", ",", "1", ")", "\n", "cos", ",", "sin", "=", "torch", ".", "cos", "(", "roll_rad", ")", ",", "torch", ".", "sin", "(", "roll_rad", ")", "\n", "R", "[", ":", ",", "0", ",", ":", "2", "]", "=", "torch", ".", "stack", "(", "[", "cos", ",", "sin", "]", ",", "dim", "=", "-", "1", ")", "\n", "R", "[", ":", ",", "1", ",", ":", "2", "]", "=", "torch", ".", "stack", "(", "[", "-", "sin", ",", "cos", "]", ",", "dim", "=", "-", "1", ")", "\n", "return", "R", ".", "squeeze", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.model.tools.cpu_angle_between": [[218, 221], ["torch.einsum", "R1.transpose"], "function", ["None"], ["", "def", "cpu_angle_between", "(", "R1", ",", "R2", ",", "as_degree", "=", "True", ")", ":", "\n", "    ", "angle", "=", "(", "(", "torch", ".", "einsum", "(", "'bii -> b'", ",", "(", "R1", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", "@", "R2", ")", ".", "view", "(", "-", "1", ",", "3", ",", "3", ")", ")", "-", "1", ")", "/", "2", ")", ".", "acos", "(", ")", "\n", "return", "180", "/", "np", ".", "pi", "*", "angle", "if", "as_degree", "else", "angle", "\n", "", ""]], "home.repos.pwc.inspect_result.monniert_unicorn.model.field.Field.__init__": [[13, 25], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "tools.create_mlp", "tools.create_mlp", "tools.kaiming_weights_init"], "methods", ["home.repos.pwc.inspect_result.monniert_unicorn.model.renderer.SoftPhongShaderPlus.__init__", "home.repos.pwc.inspect_result.monniert_unicorn.model.tools.create_mlp", "home.repos.pwc.inspect_result.monniert_unicorn.model.tools.create_mlp", "home.repos.pwc.inspect_result.monniert_unicorn.model.tools.kaiming_weights_init"], ["def", "__init__", "(", "self", ",", "n_units", "=", "N_UNITS", ",", "n_layers", "=", "N_LAYERS", ",", "latent_size", "=", "None", ",", "in_ch", "=", "3", ",", "\n", "out_ch", "=", "3", ",", "zero_last_init", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "NU", ",", "NL", "=", "n_units", ",", "n_layers", "\n", "if", "latent_size", "is", "not", "None", ":", "\n", "            ", "self", ".", "linear_x", "=", "nn", ".", "Linear", "(", "in_ch", ",", "NU", ")", "\n", "self", ".", "linear_z", "=", "nn", ".", "Linear", "(", "latent_size", ",", "NU", ")", "\n", "self", ".", "act", "=", "nn", ".", "ReLU", "(", "True", ")", "\n", "self", ".", "mlp", "=", "create_mlp", "(", "NU", ",", "out_ch", ",", "NU", ",", "NL", "-", "1", ",", "zero_last_init", "=", "zero_last_init", ")", "\n", "[", "kaiming_weights_init", "(", "m", ")", "for", "m", "in", "[", "self", ".", "linear_x", ",", "self", ".", "linear_z", "]", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "mlp", "=", "create_mlp", "(", "in_ch", ",", "out_ch", ",", "NU", ",", "NL", ",", "zero_last_init", "=", "zero_last_init", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.model.field.Field.forward": [[26, 33], ["field.Field.act", "field.Field.mlp", "field.Field.mlp", "len", "field.Field.linear_x", "field.Field.linear_z"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "latent", "=", "None", ")", ":", "\n", "        ", "if", "latent", "is", "not", "None", ":", "\n", "            ", "x", "=", "x", "[", "None", "]", "if", "len", "(", "x", ".", "shape", ")", "==", "2", "else", "x", "\n", "x", "=", "self", ".", "act", "(", "self", ".", "linear_x", "(", "x", ")", "+", "self", ".", "linear_z", "(", "latent", "[", ":", ",", "None", "]", ")", ")", "\n", "return", "self", ".", "mlp", "(", "x", ")", "# BN3", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "mlp", "(", "x", ")", "# BN3", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.model.field.ProgressiveField.__init__": [[36, 51], ["torch.nn.Module.__init__", "copy.deepcopy", "len", "all", "tools.create_mlp", "field.Field", "field.ProgressiveField.set_milestones", "isinstance", "copy.deepcopy.pop", "copy.deepcopy.pop", "copy.deepcopy.pop", "copy.deepcopy.pop", "len"], "methods", ["home.repos.pwc.inspect_result.monniert_unicorn.model.renderer.SoftPhongShaderPlus.__init__", "home.repos.pwc.inspect_result.monniert_unicorn.model.tools.create_mlp", "home.repos.pwc.inspect_result.monniert_unicorn.model.generator.ProgressiveGiraffeGenerator.set_milestones"], ["    ", "def", "__init__", "(", "self", ",", "inp_dim", ",", "name", ",", "powers", ",", "milestones", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "kwargs", "=", "deepcopy", "(", "kwargs", ")", "\n", "self", ".", "powers", "=", "[", "powers", "]", "if", "isinstance", "(", "powers", ",", "int", ")", "else", "powers", "\n", "self", ".", "n_powers", "=", "len", "(", "self", ".", "powers", ")", "\n", "self", ".", "latent_size", "=", "self", ".", "powers", "[", "-", "1", "]", "\n", "assert", "all", "(", "[", "self", ".", "latent_size", "%", "p", "==", "0", "for", "p", "in", "powers", "]", ")", "\n", "self", ".", "repeat_latent", "=", "[", "self", ".", "latent_size", "//", "p", "for", "p", "in", "powers", "]", "\n", "NU", ",", "NL", "=", "kwargs", ".", "pop", "(", "'n_reg_units'", ",", "N_UNITS", ")", ",", "kwargs", ".", "pop", "(", "'n_reg_layers'", ",", "N_LAYERS", ")", "\n", "self", ".", "regressor", "=", "create_mlp", "(", "inp_dim", ",", "self", ".", "latent_size", ",", "NU", ",", "NL", ",", "zero_last_init", "=", "True", ")", "\n", "NU", ",", "NL", "=", "kwargs", ".", "pop", "(", "'n_field_units'", ",", "N_UNITS", ")", ",", "kwargs", ".", "pop", "(", "'n_field_layers'", ",", "N_LAYERS", ")", "\n", "self", ".", "field", "=", "Field", "(", "NU", ",", "NL", ",", "latent_size", "=", "self", ".", "latent_size", ")", "\n", "self", ".", "cur_milestone", "=", "0", "\n", "self", ".", "set_milestones", "(", "milestones", ")", "\n", "assert", "len", "(", "kwargs", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.model.field.ProgressiveField.forward": [[52, 63], ["field.ProgressiveField.regressor", "field.ProgressiveField.field", "features.size", "torch.zeros", "torch.ones"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "features", ")", ":", "\n", "        ", "B", ",", "C", ",", "device", "=", "features", ".", "size", "(", "0", ")", ",", "self", ".", "latent_size", ",", "x", ".", "device", "\n", "latent_final", "=", "self", ".", "regressor", "(", "features", ")", "\n", "if", "self", ".", "act_idx", "<", "self", ".", "n_powers", ":", "\n", "            ", "p", "=", "self", ".", "current_code_size", "\n", "mask", "=", "torch", ".", "zeros", "(", "B", ",", "C", ",", "device", "=", "device", ")", "\n", "mask", "[", ":", ",", ":", "p", "]", "=", "torch", ".", "ones", "(", "B", ",", "p", ",", "device", "=", "device", ")", "\n", "latent_final", "=", "mask", "*", "latent_final", "\n", "\n", "", "self", ".", "_latent", "=", "latent_final", "\n", "return", "self", ".", "field", "(", "x", ",", "latent_final", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.model.field.ProgressiveField.step": [[64, 71], ["utils.logger.print_log"], "methods", ["home.repos.pwc.inspect_result.monniert_unicorn.utils.logger.print_log"], ["", "def", "step", "(", "self", ")", ":", "\n", "        ", "self", ".", "cur_milestone", "+=", "1", "\n", "while", "self", ".", "act_idx", "<", "self", ".", "n_powers", "and", "self", ".", "act_milestones", "[", "self", ".", "act_idx", "]", "<=", "self", ".", "cur_milestone", ":", "\n", "            ", "self", ".", "activations", "[", "self", ".", "act_idx", "]", "=", "True", "\n", "m", ",", "p", "=", "self", ".", "cur_milestone", ",", "self", ".", "powers", "[", "self", ".", "act_idx", "]", "\n", "print_log", "(", "'Milestone {}, progressive field: {} activated'", ".", "format", "(", "m", ",", "p", ")", ")", "\n", "self", ".", "act_idx", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.model.field.ProgressiveField.set_cur_milestone": [[72, 79], ["utils.logger.print_log", "zip"], "methods", ["home.repos.pwc.inspect_result.monniert_unicorn.utils.logger.print_log"], ["", "", "def", "set_cur_milestone", "(", "self", ",", "k", ")", ":", "\n", "        ", "self", ".", "cur_milestone", "=", "k", "\n", "while", "self", ".", "act_idx", "<", "self", ".", "n_powers", "and", "self", ".", "act_milestones", "[", "self", ".", "act_idx", "]", "<=", "self", ".", "cur_milestone", ":", "\n", "            ", "self", ".", "activations", "[", "self", ".", "act_idx", "]", "=", "True", "\n", "self", ".", "act_idx", "+=", "1", "\n", "", "powers", ",", "activations", "=", "self", ".", "powers", ",", "self", ".", "activations", "\n", "print_log", "(", "'progressive field activated powers={}'", ".", "format", "(", "[", "k", "for", "k", ",", "a", "in", "zip", "(", "powers", ",", "activations", ")", "if", "a", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.model.field.ProgressiveField.set_milestones": [[80, 94], ["utils.logger.print_log", "isinstance", "len", "numpy.asarray", "zip"], "methods", ["home.repos.pwc.inspect_result.monniert_unicorn.utils.logger.print_log"], ["", "def", "set_milestones", "(", "self", ",", "milestones", ")", ":", "\n", "        ", "if", "milestones", "is", "not", "None", ":", "\n", "            ", "milestones", "=", "[", "milestones", "]", "if", "isinstance", "(", "milestones", ",", "int", ")", "else", "milestones", "\n", "assert", "len", "(", "milestones", ")", "==", "self", ".", "n_powers", "\n", "self", ".", "act_milestones", "=", "milestones", "\n", "n_act", "=", "(", "np", ".", "asarray", "(", "milestones", ")", "<=", "self", ".", "cur_milestone", ")", ".", "sum", "(", ")", "\n", "self", ".", "act_idx", "=", "n_act", "\n", "self", ".", "activations", "=", "[", "True", "]", "*", "n_act", "+", "[", "False", "]", "*", "(", "self", ".", "n_powers", "-", "n_act", ")", "\n", "powers", ",", "activations", "=", "self", ".", "powers", ",", "self", ".", "activations", "\n", "print_log", "(", "'progressive field activated powers={}'", ".", "format", "(", "[", "k", "for", "k", ",", "a", "in", "zip", "(", "powers", ",", "activations", ")", "if", "a", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "act_milestones", "=", "[", "-", "1", "]", "*", "self", ".", "n_powers", "\n", "self", ".", "act_idx", "=", "self", ".", "n_powers", "\n", "self", ".", "activations", "=", "[", "True", "]", "*", "self", ".", "n_powers", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.model.field.ProgressiveField.is_frozen": [[95, 98], ["sum"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "is_frozen", "(", "self", ")", ":", "\n", "        ", "return", "sum", "(", "self", ".", "activations", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.model.field.ProgressiveField.current_code_size": [[99, 102], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "current_code_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "powers", "[", "self", ".", "act_idx", "-", "1", "]", "if", "self", ".", "act_idx", ">", "0", "else", "0", "\n", "", "", ""]], "home.repos.pwc.inspect_result.monniert_unicorn.model.unicorn.Unicorn.__init__": [[43, 57], ["torch.Module.__init__", "copy.deepcopy", "encoder.Encoder", "unicorn.Unicorn._init_meshes", "renderer.Renderer", "unicorn.Unicorn._init_rend_predictors", "unicorn.Unicorn._init_background_model", "unicorn.Unicorn._init_milestones", "unicorn.Unicorn._init_loss", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get"], "methods", ["home.repos.pwc.inspect_result.monniert_unicorn.model.renderer.SoftPhongShaderPlus.__init__", "home.repos.pwc.inspect_result.monniert_unicorn.model.unicorn.Unicorn._init_meshes", "home.repos.pwc.inspect_result.monniert_unicorn.model.unicorn.Unicorn._init_rend_predictors", "home.repos.pwc.inspect_result.monniert_unicorn.model.unicorn.Unicorn._init_background_model", "home.repos.pwc.inspect_result.monniert_unicorn.model.unicorn.Unicorn._init_milestones", "home.repos.pwc.inspect_result.monniert_unicorn.model.unicorn.Unicorn._init_loss"], ["def", "__init__", "(", "self", ",", "img_size", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "init_kwargs", "=", "deepcopy", "(", "kwargs", ")", "\n", "self", ".", "init_kwargs", "[", "'img_size'", "]", "=", "img_size", "\n", "self", ".", "encoder", "=", "Encoder", "(", "img_size", ",", "**", "kwargs", ".", "get", "(", "'encoder'", ",", "{", "}", ")", ")", "\n", "self", ".", "_init_meshes", "(", "**", "kwargs", ".", "get", "(", "'mesh'", ",", "{", "}", ")", ")", "\n", "self", ".", "renderer", "=", "Renderer", "(", "img_size", ",", "**", "kwargs", ".", "get", "(", "'renderer'", ",", "{", "}", ")", ")", "\n", "self", ".", "_init_rend_predictors", "(", "**", "kwargs", ".", "get", "(", "'rend_predictor'", ",", "{", "}", ")", ")", "\n", "self", ".", "_init_background_model", "(", "img_size", ",", "**", "kwargs", ".", "get", "(", "'background'", ",", "{", "}", ")", ")", "\n", "self", ".", "_init_milestones", "(", "**", "kwargs", ".", "get", "(", "'milestones'", ",", "{", "}", ")", ")", "\n", "self", ".", "_init_loss", "(", "**", "kwargs", ".", "get", "(", "'loss'", ",", "{", "}", ")", ")", "\n", "self", ".", "prop_heads", "=", "torch", ".", "zeros", "(", "self", ".", "n_poses", ")", "\n", "self", ".", "cur_epoch", ",", "self", ".", "cur_iter", "=", "0", ",", "0", "\n", "self", ".", "_debug", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.model.unicorn.Unicorn.n_features": [[58, 61], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "n_features", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "encoder", ".", "out_ch", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.model.unicorn.Unicorn.tx_code_size": [[62, 65], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "tx_code_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "txt_generator", ".", "current_code_size", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.model.unicorn.Unicorn.sh_code_size": [[66, 69], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "sh_code_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "deform_field", ".", "current_code_size", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.model.unicorn.Unicorn._init_meshes": [[70, 90], ["copy.deepcopy", "copy.deepcopy.pop", "copy.deepcopy.pop", "utils.mesh.get_icosphere.scale_verts", "unicorn.Unicorn.register_buffer", "copy.deepcopy.pop", "copy.deepcopy.pop", "copy.deepcopy.pop", "field.ProgressiveField", "generator.ProgressiveGiraffeGenerator", "utils.mesh.get_icosphere", "copy.deepcopy.pop", "len", "tools.convert_3d_to_uv_coordinates", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "unicorn.Unicorn.mesh_src.get_mesh_verts_faces"], "methods", ["home.repos.pwc.inspect_result.monniert_unicorn.utils.mesh.get_icosphere", "home.repos.pwc.inspect_result.monniert_unicorn.model.tools.convert_3d_to_uv_coordinates"], ["", "def", "_init_meshes", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "kwargs", "=", "deepcopy", "(", "kwargs", ")", "\n", "mesh_init", "=", "kwargs", ".", "pop", "(", "'init'", ",", "'sphere'", ")", "\n", "scale", "=", "kwargs", ".", "pop", "(", "'scale'", ",", "1", ")", "\n", "if", "'sphere'", "in", "mesh_init", "or", "'ellipse'", "in", "mesh_init", ":", "\n", "            ", "mesh", "=", "get_icosphere", "(", "4", "if", "'hr'", "in", "mesh_init", "else", "3", ")", "\n", "if", "'ellipse'", "in", "mesh_init", ":", "\n", "                ", "scale", "=", "scale", "*", "torch", ".", "Tensor", "(", "[", "SCALE_ELLIPSE", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "self", ".", "mesh_src", "=", "mesh", ".", "scale_verts", "(", "scale", ")", "\n", "self", ".", "register_buffer", "(", "'uvs'", ",", "convert_3d_to_uv_coordinates", "(", "self", ".", "mesh_src", ".", "get_mesh_verts_faces", "(", "0", ")", "[", "0", "]", ")", "[", "None", "]", ")", "\n", "\n", "self", ".", "use_mean_txt", "=", "kwargs", ".", "pop", "(", "'use_mean_txt'", ",", "kwargs", ".", "pop", "(", "'use_mean_text'", ",", "False", ")", ")", "# retro-compatibility", "\n", "dfield_kwargs", "=", "kwargs", ".", "pop", "(", "'deform_fields'", ",", "{", "}", ")", "\n", "tgen_kwargs", "=", "kwargs", ".", "pop", "(", "'texture_uv'", ",", "{", "}", ")", "\n", "assert", "len", "(", "kwargs", ")", "==", "0", "\n", "\n", "self", ".", "deform_field", "=", "ProgressiveField", "(", "inp_dim", "=", "self", ".", "n_features", ",", "name", "=", "'deformation'", ",", "**", "dfield_kwargs", ")", "\n", "self", ".", "txt_generator", "=", "ProgressiveGiraffeGenerator", "(", "inp_dim", "=", "self", ".", "n_features", ",", "**", "tgen_kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.model.unicorn.Unicorn._init_rend_predictors": [[91, 130], ["copy.deepcopy", "copy.deepcopy.pop", "copy.deepcopy.pop", "copy.deepcopy.pop", "torch.ModuleList", "torch.ModuleList", "copy.deepcopy.pop", "unicorn.Unicorn.register_buffer", "unicorn.Unicorn.register_buffer", "unicorn.Unicorn.register_buffer", "torch.ModuleList", "torch.ModuleList", "tools.init_rotations", "unicorn.Unicorn.register_buffer", "unicorn.Unicorn.register_buffer", "unicorn.Unicorn.register_buffer", "tools.create_mlp", "copy.deepcopy.pop", "unicorn.Unicorn.register_buffer", "unicorn.Unicorn.register_buffer", "tools.create_mlp", "isinstance", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "copy.deepcopy.pop", "copy.deepcopy.pop", "copy.deepcopy.pop", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "isinstance", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "len", "tools.create_mlp", "copy.deepcopy.pop", "tools.create_mlp", "zip", "range", "range"], "methods", ["home.repos.pwc.inspect_result.monniert_unicorn.model.tools.init_rotations", "home.repos.pwc.inspect_result.monniert_unicorn.model.tools.create_mlp", "home.repos.pwc.inspect_result.monniert_unicorn.model.tools.create_mlp", "home.repos.pwc.inspect_result.monniert_unicorn.model.tools.create_mlp", "home.repos.pwc.inspect_result.monniert_unicorn.model.tools.create_mlp"], ["", "def", "_init_rend_predictors", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "kwargs", "=", "deepcopy", "(", "kwargs", ")", "\n", "self", ".", "n_poses", "=", "kwargs", ".", "pop", "(", "'n_poses'", ",", "N_POSES", ")", "\n", "n_elev", ",", "n_azim", "=", "kwargs", ".", "pop", "(", "'n_elev_azim'", ",", "N_ELEV_AZIM", ")", "\n", "assert", "self", ".", "n_poses", "==", "n_elev", "*", "n_azim", "\n", "self", ".", "alternate_optim", "=", "kwargs", ".", "pop", "(", "'alternate_optim'", ",", "True", ")", "\n", "self", ".", "pose_step", "=", "True", "\n", "\n", "NF", ",", "NP", "=", "self", ".", "n_features", ",", "self", ".", "n_poses", "\n", "\n", "# Translation", "\n", "self", ".", "T_regressors", "=", "nn", ".", "ModuleList", "(", "[", "create_mlp", "(", "NF", ",", "3", ",", "zero_last_init", "=", "True", ")", "for", "_", "in", "range", "(", "NP", ")", "]", ")", "\n", "T_range", "=", "kwargs", ".", "pop", "(", "'T_range'", ",", "1", ")", "\n", "T_range", "=", "[", "T_range", "]", "*", "3", "if", "isinstance", "(", "T_range", ",", "(", "int", ",", "float", ")", ")", "else", "T_range", "\n", "self", ".", "register_buffer", "(", "'T_range'", ",", "torch", ".", "Tensor", "(", "T_range", ")", ")", "\n", "self", ".", "register_buffer", "(", "'T_init'", ",", "torch", ".", "zeros", "(", "3", ")", ")", "\n", "self", ".", "register_buffer", "(", "'T_cam'", ",", "torch", ".", "Tensor", "(", "kwargs", ".", "pop", "(", "'prior_translation'", ",", "PRIOR_TRANSLATION", ")", ")", ")", "\n", "\n", "# Rotation", "\n", "self", ".", "rot_regressors", "=", "nn", ".", "ModuleList", "(", "[", "create_mlp", "(", "NF", ",", "3", ",", "zero_last_init", "=", "True", ")", "for", "_", "in", "range", "(", "NP", ")", "]", ")", "\n", "a_range", ",", "e_range", ",", "r_range", "=", "kwargs", ".", "pop", "(", "'azim_range'", ")", ",", "kwargs", ".", "pop", "(", "'elev_range'", ")", ",", "kwargs", ".", "pop", "(", "'roll_range'", ")", "\n", "azim", ",", "elev", ",", "roll", "=", "[", "(", "e", "[", "1", "]", "-", "e", "[", "0", "]", ")", "/", "n", "for", "e", ",", "n", "in", "zip", "(", "[", "a_range", ",", "e_range", ",", "r_range", "]", ",", "[", "n_azim", ",", "n_elev", ",", "1", "]", ")", "]", "\n", "R_init", "=", "init_rotations", "(", "'uniform'", ",", "n_elev", "=", "n_elev", ",", "n_azim", "=", "n_azim", ",", "elev_range", "=", "e_range", ",", "azim_range", "=", "a_range", ")", "\n", "self", ".", "register_buffer", "(", "'R_range'", ",", "torch", ".", "Tensor", "(", "[", "azim", "*", "0.52", ",", "elev", "*", "0.52", ",", "roll", "*", "0.52", "]", ")", ")", "\n", "self", ".", "register_buffer", "(", "'R_init'", ",", "R_init", ")", "\n", "self", ".", "azim_range", ",", "self", ".", "elev_range", ",", "self", ".", "roll_range", "=", "a_range", ",", "e_range", ",", "r_range", "\n", "self", ".", "register_buffer", "(", "'R_cam'", ",", "torch", ".", "eye", "(", "3", ")", ")", "\n", "\n", "# Scale", "\n", "self", ".", "scale_regressor", "=", "create_mlp", "(", "NF", ",", "3", ",", "zero_last_init", "=", "True", ")", "\n", "scale_range", "=", "kwargs", ".", "pop", "(", "'scale_range'", ",", "0.5", ")", "\n", "scale_range", "=", "[", "scale_range", "]", "*", "3", "if", "isinstance", "(", "scale_range", ",", "(", "int", ",", "float", ")", ")", "else", "scale_range", "\n", "self", ".", "register_buffer", "(", "'scale_range'", ",", "torch", ".", "Tensor", "(", "scale_range", ")", ")", "\n", "self", ".", "register_buffer", "(", "'scale_init'", ",", "torch", ".", "ones", "(", "3", ")", ")", "\n", "\n", "# Pose probabilities", "\n", "self", ".", "proba_regressor", "=", "create_mlp", "(", "NF", ",", "NP", ")", "\n", "\n", "assert", "len", "(", "kwargs", ")", "==", "0", ",", "kwargs", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.model.unicorn.Unicorn.n_candidates": [[131, 134], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "n_candidates", "(", "self", ")", ":", "\n", "        ", "return", "1", "if", "self", ".", "hard_select", "else", "self", ".", "n_poses", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.model.unicorn.Unicorn.hard_select": [[135, 141], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "hard_select", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "alternate_optim", "and", "not", "self", ".", "_debug", ":", "\n", "            ", "return", "False", "if", "(", "self", ".", "training", "and", "self", ".", "pose_step", ")", "else", "True", "\n", "", "else", ":", "\n", "            ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.model.unicorn.Unicorn._init_background_model": [[142, 146], ["len", "copy.deepcopy", "generator.ProgressiveGiraffeGenerator"], "methods", ["None"], ["", "", "def", "_init_background_model", "(", "self", ",", "img_size", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "len", "(", "kwargs", ")", ">", "0", ":", "\n", "            ", "bkg_kwargs", "=", "deepcopy", "(", "kwargs", ")", "\n", "self", ".", "bkg_generator", "=", "ProgressiveGiraffeGenerator", "(", "inp_dim", "=", "self", ".", "n_features", ",", "img_size", "=", "img_size", ",", "**", "bkg_kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.model.unicorn.Unicorn._init_milestones": [[147, 158], ["copy.deepcopy", "copy.deepcopy.pop", "copy.deepcopy.pop", "copy.deepcopy.pop", "copy.deepcopy.pop", "copy.deepcopy.pop", "copy.deepcopy.pop", "len", "copy.deepcopy.pop", "copy.deepcopy.pop"], "methods", ["None"], ["", "", "def", "_init_milestones", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "kwargs", "=", "deepcopy", "(", "kwargs", ")", "\n", "self", ".", "milestones", "=", "{", "\n", "'constant_txt'", ":", "kwargs", ".", "pop", "(", "'constant_txt'", ",", "kwargs", ".", "pop", "(", "'constant_text'", ",", "0", ")", ")", ",", "# retro-compatibility", "\n", "'freeze_T_pred'", ":", "kwargs", ".", "pop", "(", "'freeze_T_predictor'", ",", "0", ")", ",", "\n", "'freeze_R_pred'", ":", "kwargs", ".", "pop", "(", "'freeze_R_predictor'", ",", "0", ")", ",", "\n", "'freeze_s_pred'", ":", "kwargs", ".", "pop", "(", "'freeze_scale_predictor'", ",", "0", ")", ",", "\n", "'freeze_shape'", ":", "kwargs", ".", "pop", "(", "'freeze_shape'", ",", "0", ")", ",", "\n", "'mean_txt'", ":", "kwargs", ".", "pop", "(", "'mean_txt'", ",", "kwargs", ".", "pop", "(", "'mean_text'", ",", "self", ".", "use_mean_txt", ")", ")", ",", "# retro-compatibility", "\n", "}", "\n", "assert", "len", "(", "kwargs", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.model.unicorn.Unicorn._init_loss": [[159, 182], ["copy.deepcopy", "copy.deepcopy.pop", "copy.deepcopy.pop", "copy.deepcopy.pop", "copy.deepcopy.pop", "copy.deepcopy.pop", "toolz.valfilter", "copy.deepcopy.pop", "copy.deepcopy.pop", "copy.deepcopy.pop", "copy.deepcopy.pop", "copy.deepcopy.pop", "copy.deepcopy.pop", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "len", "loss.get_loss", "loss.get_loss", "list", "unicorn.Unicorn.loss_weights.keys"], "methods", ["home.repos.pwc.inspect_result.monniert_unicorn.model.loss.get_loss", "home.repos.pwc.inspect_result.monniert_unicorn.model.loss.get_loss"], ["", "def", "_init_loss", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "kwargs", "=", "deepcopy", "(", "kwargs", ")", "\n", "loss_weights", "=", "{", "\n", "'rgb'", ":", "kwargs", ".", "pop", "(", "'rgb_weight'", ",", "1.0", ")", ",", "\n", "'normal'", ":", "kwargs", ".", "pop", "(", "'normal_weight'", ",", "0", ")", ",", "\n", "'laplacian'", ":", "kwargs", ".", "pop", "(", "'laplacian_weight'", ",", "0", ")", ",", "\n", "'perceptual'", ":", "kwargs", ".", "pop", "(", "'perceptual_weight'", ",", "0", ")", ",", "\n", "'uniform'", ":", "kwargs", ".", "pop", "(", "'uniform_weight'", ",", "0", ")", ",", "\n", "'swap'", ":", "kwargs", ".", "pop", "(", "'swap_weight'", ",", "0", ")", ",", "\n", "}", "\n", "name", "=", "kwargs", ".", "pop", "(", "'name'", ",", "'mse'", ")", "\n", "perceptual_kwargs", "=", "kwargs", ".", "pop", "(", "'perceptual'", ",", "{", "}", ")", "\n", "self", ".", "swap_memsize", "=", "kwargs", ".", "pop", "(", "'swap_memsize'", ",", "MEMSIZE", ")", "\n", "self", ".", "swap_n_vpbins", "=", "kwargs", ".", "pop", "(", "'swap_n_vpbins'", ",", "N_VPBINS", ")", "\n", "self", ".", "swap_min_angle", "=", "kwargs", ".", "pop", "(", "'swap_min_angle'", ",", "MIN_ANGLE", ")", "\n", "self", ".", "swap_memory", "=", "{", "k", ":", "torch", ".", "empty", "(", "0", ")", "for", "k", "in", "[", "'sh'", ",", "'tx'", ",", "'S'", ",", "'R'", ",", "'T'", ",", "'bg'", ",", "'img'", "]", "}", "\n", "assert", "len", "(", "kwargs", ")", "==", "0", ",", "kwargs", "\n", "\n", "self", ".", "loss_weights", "=", "valfilter", "(", "lambda", "v", ":", "v", ">", "0", ",", "loss_weights", ")", "\n", "self", ".", "loss_names", "=", "[", "f'loss_{n}'", "for", "n", "in", "list", "(", "self", ".", "loss_weights", ".", "keys", "(", ")", ")", "+", "[", "'total'", "]", "]", "\n", "self", ".", "criterion", "=", "get_loss", "(", "name", ")", "(", "reduction", "=", "'none'", ")", "\n", "if", "'perceptual'", "in", "self", ".", "loss_weights", ":", "\n", "            ", "self", ".", "perceptual_loss", "=", "get_loss", "(", "'perceptual'", ")", "(", "**", "perceptual_kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.model.unicorn.Unicorn.pred_background": [[183, 186], ["hasattr"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "pred_background", "(", "self", ")", ":", "\n", "        ", "return", "hasattr", "(", "self", ",", "'bkg_generator'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.model.unicorn.Unicorn.is_live": [[187, 193], ["isinstance"], "methods", ["None"], ["", "def", "is_live", "(", "self", ",", "name", ")", ":", "\n", "        ", "milestone", "=", "self", ".", "milestones", "[", "name", "]", "\n", "if", "isinstance", "(", "milestone", ",", "bool", ")", ":", "\n", "            ", "return", "milestone", "\n", "", "else", ":", "\n", "            ", "return", "True", "if", "self", ".", "cur_epoch", "<", "milestone", "else", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.model.unicorn.Unicorn.to": [[194, 199], ["super().to", "unicorn.Unicorn.mesh_src.to", "unicorn.Unicorn.renderer.to"], "methods", ["home.repos.pwc.inspect_result.monniert_unicorn.model.__init__.DDPCust.to", "home.repos.pwc.inspect_result.monniert_unicorn.model.__init__.DDPCust.to", "home.repos.pwc.inspect_result.monniert_unicorn.model.__init__.DDPCust.to"], ["", "", "def", "to", "(", "self", ",", "device", ")", ":", "\n", "        ", "super", "(", ")", ".", "to", "(", "device", ")", "\n", "self", ".", "mesh_src", "=", "self", ".", "mesh_src", ".", "to", "(", "device", ")", "\n", "self", ".", "renderer", "=", "self", ".", "renderer", ".", "to", "(", "device", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.model.unicorn.Unicorn.forward": [[200, 237], ["unicorn.Unicorn.encoder", "unicorn.Unicorn.predict_meshes", "unicorn.Unicorn.predict_poses", "unicorn.Unicorn.update_with_poses", "unicorn.Unicorn.renderer().split", "unicorn.Unicorn.compute_losses", "len", "unicorn.Unicorn.predict_background", "unicorn.Unicorn.renderer", "rec.view", "map", "pytorch3d.structures.Meshes", "pytorch3d.structures.Meshes.detach", "R.detach", "T.detach", "posed_meshes.verts_padded", "posed_meshes.faces_padded", "inp[].split", "R_gt.transpose", "bkgs.detach", "t.squeeze", "rec.view", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.monniert_unicorn.model.unicorn.Unicorn.predict_meshes", "home.repos.pwc.inspect_result.monniert_unicorn.model.unicorn.Unicorn.predict_poses", "home.repos.pwc.inspect_result.monniert_unicorn.model.unicorn.Unicorn.update_with_poses", "home.repos.pwc.inspect_result.monniert_unicorn.model.unicorn.Unicorn.compute_losses", "home.repos.pwc.inspect_result.monniert_unicorn.model.unicorn.Unicorn.predict_background"], ["", "def", "forward", "(", "self", ",", "inp", ",", "debug", "=", "False", ",", "return_meshes", "=", "False", ")", ":", "\n", "# XXX pytorch3d objects are not well handled by DDP so we need to manually move them to GPU", "\n", "# self.mesh_src, self.renderer = [t.to(inp['imgs'].device) for t in [self.mesh_src, self.renderer]]", "\n", "        ", "self", ".", "_debug", "=", "debug", "\n", "\n", "imgs", ",", "K", ",", "B", "=", "inp", "[", "'imgs'", "]", ",", "self", ".", "n_candidates", ",", "len", "(", "inp", "[", "'imgs'", "]", ")", "\n", "features", "=", "self", ".", "encoder", "(", "imgs", ")", "\n", "meshes", "=", "self", ".", "predict_meshes", "(", "features", ")", "\n", "R", ",", "T", "=", "self", ".", "predict_poses", "(", "features", ")", "\n", "bkgs", "=", "self", ".", "predict_background", "(", "features", ")", "if", "self", ".", "pred_background", "else", "None", "\n", "\n", "if", "self", ".", "alternate_optim", ":", "\n", "            ", "if", "self", ".", "pose_step", ":", "\n", "                ", "meshes", ",", "bkgs", "=", "meshes", ".", "detach", "(", ")", ",", "bkgs", ".", "detach", "(", ")", "if", "self", ".", "pred_background", "else", "None", "\n", "", "else", ":", "\n", "                ", "R", ",", "T", "=", "R", ".", "detach", "(", ")", ",", "T", ".", "detach", "(", ")", "\n", "\n", "", "", "posed_meshes", ",", "R_cam", ",", "T_cam", "=", "self", ".", "update_with_poses", "(", "meshes", ",", "R", ",", "T", ")", "\n", "fgs", ",", "alpha", "=", "self", ".", "renderer", "(", "posed_meshes", ",", "R_cam", ",", "T_cam", ")", ".", "split", "(", "[", "3", ",", "1", "]", ",", "dim", "=", "1", ")", "# (K*B)CHW", "\n", "rec", "=", "fgs", "*", "alpha", "+", "(", "1", "-", "alpha", ")", "*", "bkgs", "if", "self", ".", "pred_background", "else", "fgs", "\n", "losses", ",", "select_idx", "=", "self", ".", "compute_losses", "(", "meshes", ",", "imgs", ",", "rec", ",", "R", ",", "T", ")", "\n", "\n", "if", "debug", ":", "\n", "            ", "out", "=", "rec", ".", "view", "(", "K", ",", "B", ",", "*", "rec", ".", "shape", "[", "1", ":", "]", ")", "if", "K", ">", "1", "else", "rec", "[", "None", "]", "\n", "", "elif", "return_meshes", ":", "\n", "# we need to realign mesh to account for pose parametrization mismatch", "\n", "            ", "verts", ",", "faces", "=", "posed_meshes", ".", "verts_padded", "(", ")", ",", "posed_meshes", ".", "faces_padded", "(", ")", "\n", "R_gt", ",", "T_gt", "=", "map", "(", "lambda", "t", ":", "t", ".", "squeeze", "(", "2", ")", ",", "inp", "[", "'poses'", "]", ".", "split", "(", "[", "3", ",", "1", "]", ",", "dim", "=", "2", ")", ")", "\n", "verts", "=", "(", "verts", "@", "R_cam", "+", "T_cam", "[", ":", ",", "None", "]", "-", "T_gt", "[", ":", ",", "None", "]", ")", "@", "R_gt", ".", "transpose", "(", "1", ",", "2", ")", "\n", "meshes", "=", "Meshes", "(", "verts", "=", "verts", ",", "faces", "=", "faces", ",", "textures", "=", "meshes", ".", "textures", ")", "\n", "out", "=", "losses", ",", "meshes", "\n", "", "else", ":", "\n", "            ", "rec", "=", "rec", ".", "view", "(", "K", ",", "B", ",", "*", "rec", ".", "shape", "[", "1", ":", "]", ")", "[", "select_idx", ",", "torch", ".", "arange", "(", "B", ")", "]", "if", "K", ">", "1", "else", "rec", "\n", "out", "=", "losses", ",", "rec", "\n", "\n", "", "self", ".", "_debug", "=", "False", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.model.unicorn.Unicorn.predict_meshes": [[238, 245], ["unicorn.Unicorn.mesh_src.get_mesh_verts_faces", "unicorn.Unicorn.mesh_src.extend", "unicorn.Unicorn.offset_verts_", "unicorn.Unicorn.predict_textures", "unicorn.Unicorn.scale_verts_", "len", "unicorn.Unicorn.predict_disp_verts", "unicorn.Unicorn.predict_scales"], "methods", ["home.repos.pwc.inspect_result.monniert_unicorn.model.unicorn.Unicorn.predict_textures", "home.repos.pwc.inspect_result.monniert_unicorn.model.unicorn.Unicorn.predict_disp_verts", "home.repos.pwc.inspect_result.monniert_unicorn.model.unicorn.Unicorn.predict_scales"], ["", "def", "predict_meshes", "(", "self", ",", "features", ")", ":", "\n", "        ", "verts", ",", "faces", "=", "self", ".", "mesh_src", ".", "get_mesh_verts_faces", "(", "0", ")", "\n", "meshes", "=", "self", ".", "mesh_src", ".", "extend", "(", "len", "(", "features", ")", ")", "# XXX does a copy", "\n", "meshes", ".", "offset_verts_", "(", "self", ".", "predict_disp_verts", "(", "verts", ",", "features", ")", ")", "\n", "meshes", ".", "textures", "=", "self", ".", "predict_textures", "(", "faces", ",", "features", ")", "\n", "meshes", ".", "scale_verts_", "(", "self", ".", "predict_scales", "(", "features", ")", ")", "\n", "return", "meshes", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.model.unicorn.Unicorn.predict_disp_verts": [[246, 251], ["unicorn.Unicorn.deform_field", "unicorn.Unicorn.is_live", "unicorn.Unicorn.view"], "methods", ["home.repos.pwc.inspect_result.monniert_unicorn.model.unicorn.Unicorn.is_live"], ["", "def", "predict_disp_verts", "(", "self", ",", "verts", ",", "features", ")", ":", "\n", "        ", "disp_verts", "=", "self", ".", "deform_field", "(", "verts", ",", "features", ")", "\n", "if", "self", ".", "is_live", "(", "'freeze_shape'", ")", ":", "\n", "            ", "disp_verts", "=", "disp_verts", "*", "0", "\n", "", "return", "disp_verts", ".", "view", "(", "-", "1", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.model.unicorn.Unicorn.predict_textures": [[252, 267], ["len", "unicorn.Unicorn.txt_generator", "unicorn.Unicorn.is_live", "pytorch3d.renderer.TexturesUV", "numpy.random.binomial", "int", "[].expand", "[].expand.permute", "faces[].expand", "unicorn.Unicorn.uvs.expand", "unicorn.Unicorn.is_live", "int", "[].expand", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "maps[].mean", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "maps[].mean"], "methods", ["home.repos.pwc.inspect_result.monniert_unicorn.model.unicorn.Unicorn.is_live", "home.repos.pwc.inspect_result.monniert_unicorn.model.unicorn.Unicorn.is_live"], ["", "def", "predict_textures", "(", "self", ",", "faces", ",", "features", ")", ":", "\n", "        ", "B", "=", "len", "(", "features", ")", "\n", "perturbed", "=", "self", ".", "training", "and", "np", ".", "random", ".", "binomial", "(", "1", ",", "p", "=", "0.2", ")", "\n", "maps", "=", "self", ".", "txt_generator", "(", "features", ")", "\n", "if", "self", ".", "is_live", "(", "'constant_txt'", ")", ":", "\n", "            ", "H", ",", "W", "=", "maps", ".", "shape", "[", "-", "2", ":", "]", "\n", "nb", "=", "int", "(", "H", "*", "W", "*", "0.1", ")", "\n", "idxh", ",", "idxw", "=", "torch", ".", "randperm", "(", "H", ")", "[", ":", "nb", "]", ",", "torch", ".", "randperm", "(", "W", ")", "[", ":", "nb", "]", "\n", "maps", "=", "maps", "[", ":", ",", ":", ",", "idxh", ",", "idxw", "]", ".", "mean", "(", "2", ")", "[", "...", ",", "None", ",", "None", "]", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "H", ",", "W", ")", "\n", "", "elif", "self", ".", "training", "and", "perturbed", "and", "self", ".", "use_mean_txt", "and", "self", ".", "is_live", "(", "'mean_txt'", ")", ":", "\n", "            ", "H", ",", "W", "=", "maps", ".", "shape", "[", "-", "2", ":", "]", "\n", "nb", "=", "int", "(", "H", "*", "W", "*", "0.1", ")", "\n", "idxh", ",", "idxw", "=", "torch", ".", "randperm", "(", "H", ")", "[", ":", "nb", "]", ",", "torch", ".", "randperm", "(", "W", ")", "[", ":", "nb", "]", "\n", "maps", "=", "maps", "[", ":", ",", ":", ",", "idxh", ",", "idxw", "]", ".", "mean", "(", "2", ")", "[", "...", ",", "None", ",", "None", "]", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "H", ",", "W", ")", "\n", "", "return", "TexturesUV", "(", "maps", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ",", "faces", "[", "None", "]", ".", "expand", "(", "B", ",", "-", "1", ",", "-", "1", ")", ",", "self", ".", "uvs", ".", "expand", "(", "B", ",", "-", "1", ",", "-", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.model.unicorn.Unicorn.predict_scales": [[268, 274], ["unicorn.Unicorn.scale_regressor().tanh", "unicorn.Unicorn.is_live", "unicorn.Unicorn.scale_regressor"], "methods", ["home.repos.pwc.inspect_result.monniert_unicorn.model.unicorn.Unicorn.is_live"], ["", "def", "predict_scales", "(", "self", ",", "features", ")", ":", "\n", "        ", "s_pred", "=", "self", ".", "scale_regressor", "(", "features", ")", ".", "tanh", "(", ")", "\n", "if", "self", ".", "is_live", "(", "'freeze_s_pred'", ")", ":", "\n", "            ", "s_pred", "=", "s_pred", "*", "0", "\n", "", "self", ".", "_scales", "=", "s_pred", "*", "self", ".", "scale_range", "+", "self", ".", "scale_init", "\n", "return", "self", ".", "_scales", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.model.unicorn.Unicorn.predict_poses": [[275, 297], ["len", "torch.stack().tanh", "torch.stack().tanh", "torch.stack().tanh", "torch.stack().tanh", "unicorn.Unicorn.is_live", "torch.stack().tanh", "torch.stack().tanh", "torch.stack().tanh", "torch.stack().tanh", "unicorn.Unicorn.is_live", "map", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.stack().tanh.split", "torch.stack().tanh.split", "tools.roll_to_rotation_matrix", "unicorn.Unicorn.proba_regressor().permute", "map", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "t.squeeze", "tools.azim_to_rotation_matrix", "tools.elev_to_rotation_matrix", "unicorn.Unicorn._pose_proba.max", "unicorn.Unicorn.proba_regressor", "t.view", "p", "p", "features.view", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.monniert_unicorn.model.unicorn.Unicorn.is_live", "home.repos.pwc.inspect_result.monniert_unicorn.model.unicorn.Unicorn.is_live", "home.repos.pwc.inspect_result.monniert_unicorn.model.tools.roll_to_rotation_matrix", "home.repos.pwc.inspect_result.monniert_unicorn.model.tools.azim_to_rotation_matrix", "home.repos.pwc.inspect_result.monniert_unicorn.model.tools.elev_to_rotation_matrix"], ["", "def", "predict_poses", "(", "self", ",", "features", ")", ":", "\n", "        ", "B", "=", "len", "(", "features", ")", "\n", "\n", "T_pred", "=", "torch", ".", "stack", "(", "[", "p", "(", "features", ")", "for", "p", "in", "self", ".", "T_regressors", "]", ",", "dim", "=", "0", ")", ".", "tanh", "(", ")", "\n", "if", "self", ".", "is_live", "(", "'freeze_T_pred'", ")", ":", "\n", "            ", "T_pred", "=", "T_pred", "*", "0", "\n", "", "T", "=", "(", "T_pred", "*", "self", ".", "T_range", "+", "self", ".", "T_init", ")", ".", "view", "(", "-", "1", ",", "3", ")", "\n", "\n", "R_pred", "=", "torch", ".", "stack", "(", "[", "p", "(", "features", ")", "for", "p", "in", "self", ".", "rot_regressors", "]", ",", "dim", "=", "0", ")", ".", "tanh", "(", ")", "# KBC", "\n", "R_pred", "=", "R_pred", "[", "...", ",", "[", "1", ",", "0", ",", "2", "]", "]", "# XXX for retro-compatibility", "\n", "if", "self", ".", "is_live", "(", "'freeze_R_pred'", ")", ":", "\n", "            ", "R_pred", "=", "R_pred", "*", "0", "\n", "", "R_pred", "=", "(", "R_pred", "*", "self", ".", "R_range", "+", "self", ".", "R_init", "[", ":", ",", "None", "]", ")", ".", "view", "(", "-", "1", ",", "3", ")", "\n", "azim", ",", "elev", ",", "roll", "=", "map", "(", "lambda", "t", ":", "t", ".", "squeeze", "(", "1", ")", ",", "R_pred", ".", "split", "(", "[", "1", ",", "1", ",", "1", "]", ",", "1", ")", ")", "\n", "R", "=", "azim_to_rotation_matrix", "(", "azim", ")", "@", "elev_to_rotation_matrix", "(", "elev", ")", "@", "roll_to_rotation_matrix", "(", "roll", ")", "\n", "\n", "self", ".", "_pose_proba", "=", "torch", ".", "softmax", "(", "self", ".", "proba_regressor", "(", "features", ".", "view", "(", "B", ",", "-", "1", ")", ")", ".", "permute", "(", "1", ",", "0", ")", ",", "dim", "=", "0", ")", "# KB", "\n", "if", "self", ".", "hard_select", ":", "\n", "            ", "indices", "=", "self", ".", "_pose_proba", ".", "max", "(", "0", ")", "[", "1", "]", "\n", "select_fn", "=", "lambda", "t", ":", "t", ".", "view", "(", "self", ".", "n_poses", ",", "B", ",", "*", "t", ".", "shape", "[", "1", ":", "]", ")", "[", "indices", ",", "torch", ".", "arange", "(", "B", ")", "]", "\n", "R", ",", "T", "=", "map", "(", "select_fn", ",", "[", "R", ",", "T", "]", ")", "\n", "", "return", "R", ",", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.model.unicorn.Unicorn.predict_background": [[298, 301], ["unicorn.Unicorn.bkg_generator", "unicorn.Unicorn.repeat"], "methods", ["home.repos.pwc.inspect_result.monniert_unicorn.utils.mesh.repeat"], ["", "def", "predict_background", "(", "self", ",", "features", ")", ":", "\n", "        ", "res", "=", "self", ".", "bkg_generator", "(", "features", ")", "\n", "return", "res", ".", "repeat", "(", "self", ".", "n_candidates", ",", "1", ",", "1", ",", "1", ")", "if", "self", ".", "n_candidates", ">", "1", "else", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.model.unicorn.Unicorn.update_with_poses": [[302, 310], ["utils.mesh.repeat", "pytorch3d.structures.Meshes", "pytorch3d.structures.Meshes.offset_verts_", "len", "pytorch3d.structures.Meshes.num_verts_per_mesh", "T[].expand().reshape", "unicorn.Unicorn.R_cam[].expand", "unicorn.Unicorn.T_cam[].expand", "len", "len", "pytorch3d.structures.Meshes.verts_padded", "pytorch3d.structures.Meshes.faces_padded", "T[].expand"], "methods", ["home.repos.pwc.inspect_result.monniert_unicorn.utils.mesh.repeat"], ["", "def", "update_with_poses", "(", "self", ",", "meshes", ",", "R", ",", "T", ")", ":", "\n", "        ", "K", ",", "B", "=", "len", "(", "T", ")", "//", "len", "(", "meshes", ")", ",", "len", "(", "meshes", ")", "\n", "meshes", "=", "repeat", "(", "meshes", ",", "K", ")", "# XXX returns a copy of meshes", "\n", "Nv", "=", "meshes", ".", "num_verts_per_mesh", "(", ")", "[", "0", "]", "\n", "meshes", "=", "Meshes", "(", "meshes", ".", "verts_padded", "(", ")", "@", "R", ",", "faces", "=", "meshes", ".", "faces_padded", "(", ")", ",", "textures", "=", "meshes", ".", "textures", ")", "\n", "meshes", ".", "offset_verts_", "(", "T", "[", ":", ",", "None", "]", ".", "expand", "(", "-", "1", ",", "Nv", ",", "-", "1", ")", ".", "reshape", "(", "-", "1", ",", "3", ")", ")", "\n", "R", ",", "T", "=", "self", ".", "R_cam", "[", "None", "]", ".", "expand", "(", "K", "*", "B", ",", "-", "1", ",", "-", "1", ")", ",", "self", ".", "T_cam", "[", "None", "]", ".", "expand", "(", "K", "*", "B", ",", "-", "1", ")", "\n", "return", "meshes", ",", "R", ",", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.model.unicorn.Unicorn.compute_losses": [[311, 422], ["sum", "sum.mean", "len", "imgs.repeat.repeat.repeat", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "unicorn.Unicorn.mesh_src.get_mesh_verts_faces", "pytorch3d.structures.Meshes", "swap_list.append", "pytorch3d.structures.Meshes", "swap_list.append", "losses.values", "losses.items", "unicorn.Unicorn._pose_proba.detach().cpu", "unicorn.Unicorn.mean().tolist", "[].mean().item", "[].mean().item", "torch.zeros().scatter().sum", "torch.zeros().scatter().sum", "torch.zeros().scatter().sum", "torch.zeros().scatter().sum", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "losses.items", "unicorn.Unicorn.criterion().flatten().mean", "unicorn.Unicorn.perceptual_loss", "len", "meshes.verts_padded", "meshes.faces_padded", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "tools.cpu_angle_between().view", "torch.randint().float", "torch.randint().float", "torch.randint().float", "torch.randint().float", "map", "select", "select", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "unicorn.Unicorn.encoder", "unicorn.Unicorn.predict_textures", "unicorn.Unicorn.predict_poses", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "unicorn.Unicorn.encoder", "unicorn.Unicorn.predict_poses", "unicorn.Unicorn.update_with_poses", "unicorn.Unicorn.renderer().split", "sum.view", "utils.mesh.normal_consistency", "pytorch3d.loss.mesh_laplacian_smoothing", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "unicorn.Unicorn.predict_scales", "unicorn.Unicorn.predict_background", "unicorn.Unicorn.predict_disp_verts().view", "unicorn.Unicorn.predict_scales", "unicorn.Unicorn.predict_background", "unicorn.Unicorn._pose_proba.max", "v.numel", "unicorn.Unicorn._pose_proba.detach", "unicorn.Unicorn.mean", "[].mean", "[].mean", "torch.zeros().scatter", "torch.zeros().scatter", "torch.zeros().scatter", "torch.zeros().scatter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "v.numel", "v.mean", "unicorn.Unicorn.criterion().flatten", "tools.cpu_angle_between", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "range", "unicorn.Unicorn.renderer", "unicorn.Unicorn.criterion().flatten().mean", "unicorn.Unicorn.perceptual_loss", "select_idx[].cpu", "unicorn.Unicorn.swap_memory[].to", "t.detach", "unicorn.Unicorn.predict_disp_verts", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "unicorn.Unicorn.criterion", "unicorn.Unicorn.criterion().flatten", "unicorn.Unicorn.max", "unicorn.Unicorn.min", "unicorn.Unicorn._pose_proba.mean", "t.max", "unicorn.Unicorn.criterion", "v.view"], "methods", ["home.repos.pwc.inspect_result.monniert_unicorn.utils.mesh.repeat", "home.repos.pwc.inspect_result.monniert_unicorn.utils.metrics.Metrics.values", "home.repos.pwc.inspect_result.monniert_unicorn.model.unicorn.Unicorn.predict_textures", "home.repos.pwc.inspect_result.monniert_unicorn.model.unicorn.Unicorn.predict_poses", "home.repos.pwc.inspect_result.monniert_unicorn.model.unicorn.Unicorn.predict_poses", "home.repos.pwc.inspect_result.monniert_unicorn.model.unicorn.Unicorn.update_with_poses", "home.repos.pwc.inspect_result.monniert_unicorn.utils.mesh.normal_consistency", "home.repos.pwc.inspect_result.monniert_unicorn.model.unicorn.Unicorn.predict_scales", "home.repos.pwc.inspect_result.monniert_unicorn.model.unicorn.Unicorn.predict_background", "home.repos.pwc.inspect_result.monniert_unicorn.model.unicorn.Unicorn.predict_scales", "home.repos.pwc.inspect_result.monniert_unicorn.model.unicorn.Unicorn.predict_background", "home.repos.pwc.inspect_result.monniert_unicorn.model.tools.cpu_angle_between", "home.repos.pwc.inspect_result.monniert_unicorn.model.__init__.DDPCust.to", "home.repos.pwc.inspect_result.monniert_unicorn.model.unicorn.Unicorn.predict_disp_verts"], ["", "def", "compute_losses", "(", "self", ",", "meshes", ",", "imgs", ",", "rec", ",", "R", ",", "T", ")", ":", "\n", "        ", "K", ",", "B", "=", "self", ".", "n_candidates", ",", "len", "(", "imgs", ")", "\n", "if", "K", ">", "1", ":", "\n", "            ", "imgs", "=", "imgs", ".", "repeat", "(", "K", ",", "1", ",", "1", ",", "1", ")", "\n", "", "losses", "=", "{", "k", ":", "torch", ".", "tensor", "(", "0.0", ",", "device", "=", "imgs", ".", "device", ")", "for", "k", "in", "self", ".", "loss_weights", "}", "\n", "update_3d", ",", "update_pose", "=", "(", "not", "self", ".", "pose_step", ",", "self", ".", "pose_step", ")", "if", "self", ".", "alternate_optim", "else", "(", "True", ",", "True", ")", "\n", "\n", "# Standard reconstrution error on RGB values", "\n", "if", "'rgb'", "in", "losses", ":", "\n", "            ", "losses", "[", "'rgb'", "]", "=", "self", ".", "loss_weights", "[", "'rgb'", "]", "*", "self", ".", "criterion", "(", "rec", ",", "imgs", ")", ".", "flatten", "(", "1", ")", ".", "mean", "(", "1", ")", "\n", "\n", "# Perceptual loss", "\n", "", "if", "'perceptual'", "in", "losses", ":", "\n", "            ", "losses", "[", "'perceptual'", "]", "=", "self", ".", "loss_weights", "[", "'perceptual'", "]", "*", "self", ".", "perceptual_loss", "(", "rec", ",", "imgs", ")", "\n", "\n", "# Mesh regularization", "\n", "", "if", "update_3d", ":", "\n", "            ", "if", "'normal'", "in", "losses", ":", "\n", "                ", "losses", "[", "'normal'", "]", "=", "self", ".", "loss_weights", "[", "'normal'", "]", "*", "normal_consistency", "(", "meshes", ")", "\n", "", "if", "'laplacian'", "in", "losses", ":", "\n", "                ", "losses", "[", "'laplacian'", "]", "=", "self", ".", "loss_weights", "[", "'laplacian'", "]", "*", "laplacian_smoothing", "(", "meshes", ",", "method", "=", "'uniform'", ")", "\n", "\n", "# Swap loss", "\n", "# XXX when latent spaces are small, codes are similar so there is no need to compute the swap loss", "\n", "", "", "if", "update_3d", "and", "'swap'", "in", "losses", "and", "(", "self", ".", "tx_code_size", ">", "0", "and", "self", ".", "sh_code_size", ">", "0", ")", ":", "\n", "            ", "B", ",", "dev", "=", "len", "(", "meshes", ")", ",", "imgs", ".", "device", "\n", "verts", ",", "faces", ",", "textures", "=", "meshes", ".", "verts_padded", "(", ")", ",", "meshes", ".", "faces_padded", "(", ")", ",", "meshes", ".", "textures", "\n", "scales", "=", "self", ".", "_scales", "[", ":", ",", "None", "]", "\n", "z_sh", ",", "z_tx", "=", "[", "m", ".", "_latent", "for", "m", "in", "[", "self", ".", "deform_field", ",", "self", ".", "txt_generator", "]", "]", "\n", "z_bg", "=", "self", ".", "bkg_generator", ".", "_latent", "if", "self", ".", "pred_background", "else", "torch", ".", "empty", "(", "B", ",", "1", ",", "device", "=", "dev", ")", "\n", "for", "n", ",", "t", "in", "[", "(", "'sh'", ",", "z_sh", ")", ",", "(", "'tx'", ",", "z_tx", ")", ",", "(", "'bg'", ",", "z_bg", ")", ",", "(", "'S'", ",", "scales", ")", ",", "(", "'R'", ",", "R", ")", ",", "(", "'T'", ",", "T", ")", ",", "(", "'img'", ",", "imgs", ")", "]", ":", "\n", "                ", "self", ".", "swap_memory", "[", "n", "]", "=", "torch", ".", "cat", "(", "[", "self", ".", "swap_memory", "[", "n", "]", ".", "to", "(", "dev", ")", ",", "t", ".", "detach", "(", ")", "]", ")", "[", "-", "self", ".", "swap_memsize", ":", "]", "\n", "\n", "# we compute the nearest neighbors within a random target viewpoint range", "\n", "", "min_angle", ",", "nb_vpbins", "=", "self", ".", "swap_min_angle", ",", "self", ".", "swap_n_vpbins", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "sim_sh", "=", "(", "z_sh", "[", "None", "]", "-", "self", ".", "swap_memory", "[", "'sh'", "]", "[", ":", ",", "None", "]", ")", ".", "pow", "(", "2", ")", ".", "sum", "(", "-", "1", ")", "\n", "sim_tx", "=", "(", "z_tx", "[", "None", "]", "-", "self", ".", "swap_memory", "[", "'tx'", "]", "[", ":", ",", "None", "]", ")", ".", "pow", "(", "2", ")", ".", "sum", "(", "-", "1", ")", "\n", "angles", "=", "cpu_angle_between", "(", "self", ".", "swap_memory", "[", "'R'", "]", "[", ":", ",", "None", "]", ",", "R", "[", "None", "]", ")", ".", "view", "(", "sim_sh", ".", "shape", ")", "\n", "angle_bins", "=", "torch", ".", "randint", "(", "0", ",", "nb_vpbins", ",", "(", "B", ",", ")", ",", "device", "=", "dev", ")", ".", "float", "(", ")", "\n", "bin_size", "=", "(", "180.", "-", "min_angle", ")", "/", "nb_vpbins", "\n", "min_angles", ",", "max_angles", "=", "[", "(", "angle_bins", "+", "k", ")", "*", "bin_size", "+", "min_angle", "for", "k", "in", "range", "(", "2", ")", "]", "\n", "mask", "=", "(", "angles", "<", "min_angles", ")", ".", "float", "(", ")", "+", "(", "angles", ">", "max_angles", ")", ".", "float", "(", ")", "\n", "idx_sh", ",", "idx_tx", "=", "map", "(", "lambda", "t", ":", "(", "t", "+", "t", ".", "max", "(", ")", "*", "mask", ")", ".", "argmin", "(", "0", ")", ",", "[", "sim_sh", ",", "sim_tx", "]", ")", "\n", "\n", "", "v_src", ",", "f_src", "=", "self", ".", "mesh_src", ".", "get_mesh_verts_faces", "(", "0", ")", "\n", "swap_list", ",", "select", "=", "[", "]", ",", "lambda", "n", ",", "indices", ":", "self", ".", "swap_memory", "[", "n", "]", "[", "indices", "]", "\n", "sh_imgs", ",", "tx_imgs", "=", "select", "(", "'img'", ",", "idx_sh", ")", ",", "select", "(", "'img'", ",", "idx_tx", ")", "\n", "\n", "# Swapped shapes", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# we recompute parameters with the current network state", "\n", "                ", "sh_features", "=", "self", ".", "encoder", "(", "sh_imgs", ")", "\n", "sh_tx", "=", "self", ".", "predict_textures", "(", "f_src", ",", "sh_features", ")", "\n", "sh_S", "=", "self", ".", "predict_scales", "(", "sh_features", ")", "[", ":", ",", "None", "]", "\n", "sh_R", ",", "sh_T", "=", "self", ".", "predict_poses", "(", "sh_features", ")", "\n", "sh_bg", "=", "self", ".", "predict_background", "(", "sh_features", ")", "if", "self", ".", "pred_background", "else", "None", "\n", "", "sh_mesh", "=", "Meshes", "(", "(", "verts", "/", "scales", ")", "*", "sh_S", ",", "faces", ",", "sh_tx", ")", "\n", "swap_list", ".", "append", "(", "[", "sh_mesh", ",", "sh_R", ",", "sh_T", ",", "sh_bg", ",", "sh_imgs", "]", ")", "\n", "\n", "# Swapped textures", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# we recompute parameters with the current network state", "\n", "                ", "tx_features", "=", "self", ".", "encoder", "(", "tx_imgs", ")", "\n", "tx_verts", "=", "v_src", "+", "self", ".", "predict_disp_verts", "(", "v_src", ",", "tx_features", ")", ".", "view", "(", "B", ",", "-", "1", ",", "3", ")", "\n", "tx_S", "=", "self", ".", "predict_scales", "(", "tx_features", ")", "[", ":", ",", "None", "]", "\n", "tx_R", ",", "tx_T", "=", "self", ".", "predict_poses", "(", "tx_features", ")", "\n", "tx_bg", "=", "self", ".", "predict_background", "(", "tx_features", ")", "if", "self", ".", "pred_background", "else", "None", "\n", "", "tx_mesh", "=", "Meshes", "(", "tx_verts", "*", "tx_S", ",", "faces", ",", "textures", ")", "\n", "swap_list", ".", "append", "(", "[", "tx_mesh", ",", "tx_R", ",", "tx_T", ",", "tx_bg", ",", "tx_imgs", "]", ")", "\n", "\n", "loss", "=", "0.", "\n", "for", "swap_inp", "in", "swap_list", ":", "\n", "                ", "swap_mesh", ",", "R", ",", "T", ",", "bkgs", ",", "imgs", "=", "swap_inp", "\n", "posed_meshes", ",", "R_cam", ",", "T_cam", "=", "self", ".", "update_with_poses", "(", "swap_mesh", ",", "R", ",", "T", ")", "\n", "rec_sw", ",", "alpha_sw", "=", "self", ".", "renderer", "(", "posed_meshes", ",", "R_cam", ",", "T_cam", ")", ".", "split", "(", "[", "3", ",", "1", "]", ",", "dim", "=", "1", ")", "\n", "rec_sw", "=", "rec_sw", "*", "alpha_sw", "+", "(", "1", "-", "alpha_sw", ")", "*", "bkgs", "[", ":", "B", "]", "if", "bkgs", "is", "not", "None", "else", "rec_sw", "\n", "if", "'rgb'", "in", "losses", ":", "\n", "                    ", "loss", "+=", "self", ".", "loss_weights", "[", "'rgb'", "]", "*", "self", ".", "criterion", "(", "rec_sw", ",", "imgs", ")", ".", "flatten", "(", "1", ")", ".", "mean", "(", "1", ")", "\n", "", "if", "'perceptual'", "in", "losses", ":", "\n", "                    ", "loss", "+=", "self", ".", "loss_weights", "[", "'perceptual'", "]", "*", "self", ".", "perceptual_loss", "(", "rec_sw", ",", "imgs", ")", "\n", "", "", "losses", "[", "'swap'", "]", "=", "self", ".", "loss_weights", "[", "'swap'", "]", "*", "loss", "\n", "\n", "# Pose priors", "\n", "", "if", "update_pose", "and", "'uniform'", "in", "losses", ":", "\n", "            ", "losses", "[", "'uniform'", "]", "=", "self", ".", "loss_weights", "[", "'uniform'", "]", "*", "(", "self", ".", "_pose_proba", ".", "mean", "(", "1", ")", "-", "1", "/", "K", ")", ".", "abs", "(", ")", ".", "mean", "(", ")", "\n", "\n", "", "dist", "=", "sum", "(", "losses", ".", "values", "(", ")", ")", "\n", "if", "K", ">", "1", ":", "\n", "            ", "dist", ",", "select_idx", "=", "dist", ".", "view", "(", "K", ",", "B", ")", ",", "self", ".", "_pose_proba", ".", "max", "(", "0", ")", "[", "1", "]", "\n", "dist", "=", "(", "self", ".", "_pose_proba", "*", "dist", ")", ".", "sum", "(", "0", ")", "\n", "for", "k", ",", "v", "in", "losses", ".", "items", "(", ")", ":", "\n", "                ", "if", "v", ".", "numel", "(", ")", "!=", "1", ":", "\n", "                    ", "losses", "[", "k", "]", "=", "(", "self", ".", "_pose_proba", "*", "v", ".", "view", "(", "K", ",", "B", ")", ")", ".", "sum", "(", "0", ")", ".", "mean", "(", ")", "\n", "\n", "# For monitoring purpose only", "\n", "", "", "pose_proba_d", "=", "self", ".", "_pose_proba", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "self", ".", "_prob_heads", "=", "pose_proba_d", ".", "mean", "(", "1", ")", ".", "tolist", "(", ")", "\n", "self", ".", "_prob_max", "=", "pose_proba_d", ".", "max", "(", "0", ")", "[", "0", "]", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "self", ".", "_prob_min", "=", "pose_proba_d", ".", "min", "(", "0", ")", "[", "0", "]", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "count", "=", "torch", ".", "zeros", "(", "K", ",", "B", ")", ".", "scatter", "(", "0", ",", "select_idx", "[", "None", "]", ".", "cpu", "(", ")", ",", "1", ")", ".", "sum", "(", "1", ")", "\n", "self", ".", "prop_heads", "=", "count", "/", "B", "\n", "\n", "", "else", ":", "\n", "            ", "select_idx", "=", "torch", ".", "zeros", "(", "B", ")", ".", "long", "(", ")", "\n", "for", "k", ",", "v", "in", "losses", ".", "items", "(", ")", ":", "\n", "                ", "if", "v", ".", "numel", "(", ")", "!=", "1", ":", "\n", "                    ", "losses", "[", "k", "]", "=", "v", ".", "mean", "(", ")", "\n", "\n", "", "", "", "losses", "[", "'total'", "]", "=", "dist", ".", "mean", "(", ")", "\n", "return", "losses", ",", "select_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.model.unicorn.Unicorn.iter_step": [[423, 427], ["None"], "methods", ["None"], ["", "def", "iter_step", "(", "self", ")", ":", "\n", "        ", "self", ".", "cur_iter", "+=", "1", "\n", "if", "self", ".", "alternate_optim", "and", "self", ".", "cur_iter", "%", "self", ".", "alternate_optim", "==", "0", ":", "\n", "            ", "self", ".", "pose_step", "=", "not", "self", ".", "pose_step", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.model.unicorn.Unicorn.step": [[428, 434], ["unicorn.Unicorn.deform_field.step", "unicorn.Unicorn.txt_generator.step", "unicorn.Unicorn.bkg_generator.step"], "methods", ["home.repos.pwc.inspect_result.monniert_unicorn.model.generator.ProgressiveGiraffeGenerator.step", "home.repos.pwc.inspect_result.monniert_unicorn.model.generator.ProgressiveGiraffeGenerator.step", "home.repos.pwc.inspect_result.monniert_unicorn.model.generator.ProgressiveGiraffeGenerator.step"], ["", "", "def", "step", "(", "self", ")", ":", "\n", "        ", "self", ".", "cur_epoch", "+=", "1", "\n", "self", ".", "deform_field", ".", "step", "(", ")", "\n", "self", ".", "txt_generator", ".", "step", "(", ")", "\n", "if", "self", ".", "pred_background", ":", "\n", "            ", "self", ".", "bkg_generator", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.model.unicorn.Unicorn.set_cur_epoch": [[435, 441], ["unicorn.Unicorn.deform_field.set_cur_milestone", "unicorn.Unicorn.txt_generator.set_cur_milestone", "unicorn.Unicorn.bkg_generator.set_cur_milestone"], "methods", ["home.repos.pwc.inspect_result.monniert_unicorn.model.generator.ProgressiveGiraffeGenerator.set_cur_milestone", "home.repos.pwc.inspect_result.monniert_unicorn.model.generator.ProgressiveGiraffeGenerator.set_cur_milestone", "home.repos.pwc.inspect_result.monniert_unicorn.model.generator.ProgressiveGiraffeGenerator.set_cur_milestone"], ["", "", "def", "set_cur_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "cur_epoch", "=", "epoch", "\n", "self", ".", "deform_field", ".", "set_cur_milestone", "(", "epoch", ")", "\n", "self", ".", "txt_generator", ".", "set_cur_milestone", "(", "epoch", ")", "\n", "if", "self", ".", "pred_background", ":", "\n", "            ", "self", ".", "bkg_generator", ".", "set_cur_milestone", "(", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.model.unicorn.Unicorn.load_state_dict": [[442, 456], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "unicorn.Unicorn.state_dict", "tools.safe_model_state_dict().items", "len", "utils.logger.print_warning", "tools.safe_model_state_dict", "unloaded_params.append", "state[].copy_", "utils.logger.print_warning", "isinstance", "list", "list"], "methods", ["home.repos.pwc.inspect_result.monniert_unicorn.utils.logger.print_warning", "home.repos.pwc.inspect_result.monniert_unicorn.model.tools.safe_model_state_dict", "home.repos.pwc.inspect_result.monniert_unicorn.utils.logger.print_warning"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "load_state_dict", "(", "self", ",", "state_dict", ")", ":", "\n", "        ", "unloaded_params", "=", "[", "]", "\n", "state", "=", "self", ".", "state_dict", "(", ")", "\n", "for", "name", ",", "param", "in", "safe_model_state_dict", "(", "state_dict", ")", ".", "items", "(", ")", ":", "\n", "            ", "if", "name", "in", "state", ":", "\n", "                ", "try", ":", "\n", "                    ", "state", "[", "name", "]", ".", "copy_", "(", "param", ".", "data", "if", "isinstance", "(", "param", ",", "nn", ".", "Parameter", ")", "else", "param", ")", "\n", "", "except", "RuntimeError", ":", "\n", "                    ", "print_warning", "(", "f'Error load_state_dict param={name}: {list(param.shape)}, {list(state[name].shape)}'", ")", "\n", "", "", "else", ":", "\n", "                ", "unloaded_params", ".", "append", "(", "name", ")", "\n", "", "", "if", "len", "(", "unloaded_params", ")", ">", "0", ":", "\n", "            ", "print_warning", "(", "f'load_state_dict: {unloaded_params} not found'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.model.unicorn.Unicorn.get_synthetic_textures": [[461, 468], ["unicorn.Unicorn.mesh_src.verts_packed", "pytorch3d.renderer.TexturesVertex", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "unicorn.Unicorn.min", "unicorn.Unicorn.max", "unicorn.Unicorn.min"], "methods", ["None"], ["", "", "def", "get_synthetic_textures", "(", "self", ",", "colored", "=", "False", ")", ":", "\n", "        ", "verts", "=", "self", ".", "mesh_src", ".", "verts_packed", "(", ")", "\n", "if", "colored", ":", "\n", "            ", "colors", "=", "(", "verts", "-", "verts", ".", "min", "(", "0", ")", "[", "0", "]", ")", "/", "(", "verts", ".", "max", "(", "0", ")", "[", "0", "]", "-", "verts", ".", "min", "(", "0", ")", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "            ", "colors", "=", "torch", ".", "ones", "(", "verts", ".", "shape", ",", "device", "=", "verts", ".", "device", ")", "*", "0.8", "\n", "", "return", "TexturesVertex", "(", "verts_features", "=", "colors", "[", "None", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.model.unicorn.Unicorn.get_prototype": [[469, 474], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "unicorn.Unicorn.mesh_src.offset_verts", "unicorn.Unicorn.mesh_src.get_mesh_verts_faces", "unicorn.Unicorn.deform_field().view", "unicorn.Unicorn.deform_field"], "methods", ["None"], ["", "def", "get_prototype", "(", "self", ")", ":", "\n", "        ", "verts", "=", "self", ".", "mesh_src", ".", "get_mesh_verts_faces", "(", "0", ")", "[", "0", "]", "\n", "latent", "=", "torch", ".", "zeros", "(", "1", ",", "self", ".", "n_features", ",", "device", "=", "verts", ".", "device", ")", "\n", "meshes", "=", "self", ".", "mesh_src", ".", "offset_verts", "(", "self", ".", "deform_field", "(", "verts", ",", "latent", ")", ".", "view", "(", "-", "1", ",", "3", ")", ")", "\n", "return", "meshes", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.model.unicorn.Unicorn.get_random_prototype_views": [[475, 487], ["utils.use_seed", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "unicorn.Unicorn.get_prototype", "unicorn.Unicorn.get_synthetic_textures", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "pytorch3d.renderer.look_at_view_transform", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "unicorn.Unicorn.renderer().split", "numpy.diff", "unicorn.Unicorn.renderer", "unicorn.Unicorn.extend"], "methods", ["home.repos.pwc.inspect_result.monniert_unicorn.model.unicorn.Unicorn.get_prototype", "home.repos.pwc.inspect_result.monniert_unicorn.model.unicorn.Unicorn.get_synthetic_textures"], ["", "@", "use_seed", "(", ")", "\n", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "get_random_prototype_views", "(", "self", ",", "N", "=", "10", ")", ":", "\n", "        ", "mesh", "=", "self", ".", "get_prototype", "(", ")", "\n", "if", "mesh", "is", "None", ":", "\n", "            ", "return", "None", "\n", "\n", "", "mesh", ".", "textures", "=", "self", ".", "get_synthetic_textures", "(", "colored", "=", "True", ")", "\n", "azim", "=", "torch", ".", "randint", "(", "*", "self", ".", "azim_range", ",", "size", "=", "(", "N", ",", ")", ")", "\n", "elev", "=", "torch", ".", "randint", "(", "*", "self", ".", "elev_range", ",", "size", "=", "(", "N", ",", ")", ")", "if", "np", ".", "diff", "(", "self", ".", "elev_range", ")", "[", "0", "]", ">", "0", "else", "self", ".", "elev_range", "[", "0", "]", "\n", "R", ",", "T", "=", "look_at_view_transform", "(", "dist", "=", "self", ".", "T_cam", "[", "-", "1", "]", ",", "elev", "=", "elev", ",", "azim", "=", "azim", ",", "device", "=", "mesh", ".", "device", ")", "\n", "return", "self", ".", "renderer", "(", "mesh", ".", "extend", "(", "N", ")", ",", "R", ",", "T", ")", ".", "split", "(", "[", "3", ",", "1", "]", ",", "dim", "=", "1", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.model.unicorn.Unicorn.save_prototype": [[488, 501], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "unicorn.Unicorn.get_prototype", "utils.path_mkdir", "unicorn.Unicorn.get_synthetic_textures", "utils.mesh.save_mesh_as_obj", "renderer.save_mesh_as_gif", "unicorn.Unicorn.get_synthetic_textures", "renderer.save_mesh_as_gif", "numpy.mean", "pathlib.Path"], "methods", ["home.repos.pwc.inspect_result.monniert_unicorn.model.unicorn.Unicorn.get_prototype", "home.repos.pwc.inspect_result.monniert_unicorn.utils.__init__.path_mkdir", "home.repos.pwc.inspect_result.monniert_unicorn.model.unicorn.Unicorn.get_synthetic_textures", "home.repos.pwc.inspect_result.monniert_unicorn.utils.mesh.save_mesh_as_obj", "home.repos.pwc.inspect_result.monniert_unicorn.model.renderer.save_mesh_as_gif", "home.repos.pwc.inspect_result.monniert_unicorn.model.unicorn.Unicorn.get_synthetic_textures", "home.repos.pwc.inspect_result.monniert_unicorn.model.renderer.save_mesh_as_gif"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "save_prototype", "(", "self", ",", "path", "=", "None", ")", ":", "\n", "        ", "mesh", "=", "self", ".", "get_prototype", "(", ")", "\n", "if", "mesh", "is", "None", ":", "\n", "            ", "return", "None", "\n", "\n", "", "path", "=", "path_mkdir", "(", "path", "or", "Path", "(", "'.'", ")", ")", "\n", "d", ",", "elev", "=", "self", ".", "T_cam", "[", "-", "1", "]", ",", "np", ".", "mean", "(", "self", ".", "elev_range", ")", "\n", "mesh", ".", "textures", "=", "self", ".", "get_synthetic_textures", "(", ")", "\n", "save_mesh_as_obj", "(", "mesh", ",", "path", "/", "'proto.obj'", ")", "\n", "save_mesh_as_gif", "(", "mesh", ",", "path", "/", "'proto_li.gif'", ",", "dist", "=", "d", ",", "elev", "=", "elev", ",", "renderer", "=", "self", ".", "renderer", ",", "eye_light", "=", "True", ")", "\n", "mesh", ".", "textures", "=", "self", ".", "get_synthetic_textures", "(", "colored", "=", "True", ")", "\n", "save_mesh_as_gif", "(", "mesh", ",", "path", "/", "'proto_uv.gif'", ",", "dist", "=", "d", ",", "elev", "=", "elev", ",", "renderer", "=", "self", ".", "renderer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.model.unicorn.Unicorn.quantitative_eval": [[506, 517], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "unicorn.Unicorn.eval", "utils.metrics.MeshEvaluator", "collections.OrderedDict", "utils.metrics.MeshEvaluator.update", "zip", "isinstance", "torch.all", "torch.all", "torch.all", "torch.all", "unicorn.Unicorn.", "utils.pytorch.torch_to", "utils.pytorch.torch_to"], "methods", ["home.repos.pwc.inspect_result.monniert_unicorn.utils.metrics.MeshEvaluator.update", "home.repos.pwc.inspect_result.monniert_unicorn.utils.pytorch.torch_to", "home.repos.pwc.inspect_result.monniert_unicorn.utils.pytorch.torch_to"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "quantitative_eval", "(", "self", ",", "loader", ",", "device", ")", ":", "\n", "        ", "self", ".", "eval", "(", ")", "\n", "mesh_eval", "=", "MeshEvaluator", "(", ")", "\n", "for", "inp", ",", "labels", "in", "loader", ":", "\n", "            ", "if", "isinstance", "(", "labels", ",", "torch", ".", "Tensor", ")", "and", "torch", ".", "all", "(", "labels", "==", "-", "1", ")", ":", "\n", "                ", "break", "\n", "\n", "", "mesh_pred", "=", "self", "(", "torch_to", "(", "inp", ",", "device", ")", ",", "return_meshes", "=", "True", ")", "[", "1", "]", "\n", "mesh_eval", ".", "update", "(", "mesh_pred", ",", "torch_to", "(", "labels", ",", "device", ")", ")", "\n", "", "return", "OrderedDict", "(", "zip", "(", "mesh_eval", ".", "metrics", ".", "names", ",", "mesh_eval", ".", "metrics", ".", "values", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.model.unicorn.Unicorn.qualitative_eval": [[518, 555], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "unicorn.Unicorn.eval", "unicorn.Unicorn.save_prototype", "enumerate", "pathlib.Path", "max", "inp[].to", "unicorn.Unicorn.encoder", "unicorn.Unicorn.predict_meshes", "unicorn.Unicorn.predict_poses", "unicorn.Unicorn.update_with_poses", "renderer().split", "range", "int", "unicorn.Unicorn.predict_background", "len", "numpy.mean", "str().zfill", "utils.image.convert_to_img().save", "utils.image.convert_to_img().save", "utils.mesh.normalize", "renderer.save_mesh_as_gif", "utils.mesh.save_mesh_as_obj", "unicorn.Unicorn.get_synthetic_textures", "utils.mesh.save_mesh_as_obj", "renderer.save_mesh_as_gif", "numpy.log10", "renderer", "utils.image.convert_to_img().save", "str", "utils.image.convert_to_img", "utils.image.convert_to_img", "utils.image.convert_to_img"], "methods", ["home.repos.pwc.inspect_result.monniert_unicorn.model.unicorn.Unicorn.save_prototype", "home.repos.pwc.inspect_result.monniert_unicorn.model.__init__.DDPCust.to", "home.repos.pwc.inspect_result.monniert_unicorn.model.unicorn.Unicorn.predict_meshes", "home.repos.pwc.inspect_result.monniert_unicorn.model.unicorn.Unicorn.predict_poses", "home.repos.pwc.inspect_result.monniert_unicorn.model.unicorn.Unicorn.update_with_poses", "home.repos.pwc.inspect_result.monniert_unicorn.model.unicorn.Unicorn.predict_background", "home.repos.pwc.inspect_result.monniert_unicorn.utils.image.ImageLogger.save", "home.repos.pwc.inspect_result.monniert_unicorn.utils.image.ImageLogger.save", "home.repos.pwc.inspect_result.monniert_unicorn.utils.mesh.normalize", "home.repos.pwc.inspect_result.monniert_unicorn.model.renderer.save_mesh_as_gif", "home.repos.pwc.inspect_result.monniert_unicorn.utils.mesh.save_mesh_as_obj", "home.repos.pwc.inspect_result.monniert_unicorn.model.unicorn.Unicorn.get_synthetic_textures", "home.repos.pwc.inspect_result.monniert_unicorn.utils.mesh.save_mesh_as_obj", "home.repos.pwc.inspect_result.monniert_unicorn.model.renderer.save_mesh_as_gif", "home.repos.pwc.inspect_result.monniert_unicorn.utils.image.ImageLogger.save", "home.repos.pwc.inspect_result.monniert_unicorn.utils.image.convert_to_img", "home.repos.pwc.inspect_result.monniert_unicorn.utils.image.convert_to_img", "home.repos.pwc.inspect_result.monniert_unicorn.utils.image.convert_to_img"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "qualitative_eval", "(", "self", ",", "loader", ",", "device", ",", "path", "=", "None", ",", "N", "=", "32", ")", ":", "\n", "        ", "path", "=", "path", "or", "Path", "(", "'.'", ")", "\n", "self", ".", "eval", "(", ")", "\n", "self", ".", "save_prototype", "(", "path", "/", "'model'", ")", "\n", "\n", "renderer", "=", "self", ".", "renderer", "\n", "n_zeros", ",", "NI", "=", "int", "(", "np", ".", "log10", "(", "N", "-", "1", ")", ")", "+", "1", ",", "max", "(", "N", "//", "loader", ".", "batch_size", ",", "1", ")", "\n", "for", "j", ",", "(", "inp", ",", "_", ")", "in", "enumerate", "(", "loader", ")", ":", "\n", "            ", "if", "j", "==", "NI", ":", "\n", "                ", "break", "\n", "", "imgs", "=", "inp", "[", "'imgs'", "]", ".", "to", "(", "device", ")", "\n", "features", "=", "self", ".", "encoder", "(", "imgs", ")", "\n", "meshes", "=", "self", ".", "predict_meshes", "(", "features", ")", "\n", "R", ",", "T", "=", "self", ".", "predict_poses", "(", "features", ")", "\n", "\n", "posed_meshes", ",", "R_new", ",", "T_new", "=", "self", ".", "update_with_poses", "(", "meshes", ",", "R", ",", "T", ")", "\n", "rec", ",", "alpha", "=", "renderer", "(", "posed_meshes", ",", "R_new", ",", "T_new", ")", ".", "split", "(", "[", "3", ",", "1", "]", ",", "dim", "=", "1", ")", "# (K*B)CHW", "\n", "if", "self", ".", "pred_background", ":", "\n", "                ", "bkgs", "=", "self", ".", "predict_background", "(", "features", ")", "\n", "rec", "=", "rec", "*", "alpha", "+", "(", "1", "-", "alpha", ")", "*", "bkgs", "\n", "\n", "", "B", ",", "NV", "=", "len", "(", "imgs", ")", ",", "50", "\n", "d", ",", "e", "=", "self", ".", "T_cam", "[", "-", "1", "]", ",", "np", ".", "mean", "(", "self", ".", "elev_range", ")", "\n", "for", "k", "in", "range", "(", "B", ")", ":", "\n", "                ", "i", "=", "str", "(", "j", "*", "B", "+", "k", ")", ".", "zfill", "(", "n_zeros", ")", "\n", "convert_to_img", "(", "imgs", "[", "k", "]", ")", ".", "save", "(", "path", "/", "f'{i}_inpraw.png'", ")", "\n", "convert_to_img", "(", "rec", "[", "k", "]", ")", ".", "save", "(", "path", "/", "f'{i}_inprec_full.png'", ")", "\n", "if", "self", ".", "pred_background", ":", "\n", "                    ", "convert_to_img", "(", "bkgs", "[", "k", "]", ")", ".", "save", "(", "path", "/", "f'{i}_inprec_wbkg.png'", ")", "\n", "\n", "", "mcenter", "=", "normalize", "(", "meshes", "[", "k", "]", ",", "mode", "=", "None", ",", "center", "=", "True", ",", "use_center_mass", "=", "True", ")", "\n", "save_mesh_as_gif", "(", "mcenter", ",", "path", "/", "f'{i}_meshabs.gif'", ",", "n_views", "=", "NV", ",", "dist", "=", "d", ",", "elev", "=", "e", ",", "renderer", "=", "renderer", ")", "\n", "save_mesh_as_obj", "(", "mcenter", ",", "path", "/", "f'{i}_mesh.obj'", ")", "\n", "mcenter", ".", "textures", "=", "self", ".", "get_synthetic_textures", "(", "colored", "=", "True", ")", "\n", "save_mesh_as_obj", "(", "mcenter", ",", "path", "/", "f'{i}_meshuv.obj'", ")", "\n", "save_mesh_as_gif", "(", "mcenter", ",", "path", "/", "f'{i}_meshuv_raw.gif'", ",", "dist", "=", "d", ",", "elev", "=", "e", ",", "renderer", "=", "renderer", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.monniert_unicorn.model.loss.PerceptualLoss.__init__": [[22, 43], ["torch.nn.Module.__init__", "isinstance", "max", "loss.PerceptualLoss.register_buffer", "loss.PerceptualLoss.register_buffer", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torchvision.models.vgg16", "loss.PerceptualLoss.parameters"], "methods", ["home.repos.pwc.inspect_result.monniert_unicorn.model.renderer.SoftPhongShaderPlus.__init__"], ["    ", "def", "__init__", "(", "self", ",", "normalize_input", "=", "True", ",", "normalize_features", "=", "True", ",", "feature_levels", "=", "None", ",", "sum_channels", "=", "False", ",", "\n", "requires_grad", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "normalize_input", "=", "normalize_input", "\n", "self", ".", "normalize_features", "=", "normalize_features", "\n", "self", ".", "sum_channels", "=", "sum_channels", "\n", "self", ".", "feature_levels", "=", "feature_levels", "if", "feature_levels", "is", "not", "None", "else", "[", "3", "]", "\n", "assert", "isinstance", "(", "self", ".", "feature_levels", ",", "(", "list", ",", "tuple", ")", ")", "\n", "self", ".", "max_level", "=", "max", "(", "self", ".", "feature_levels", ")", "\n", "self", ".", "register_buffer", "(", "'mean_rgb'", ",", "torch", ".", "Tensor", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ")", ")", "\n", "self", ".", "register_buffer", "(", "'std_rgb'", ",", "torch", ".", "Tensor", "(", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ")", "\n", "\n", "layers", "=", "torchvision", ".", "models", ".", "vgg16", "(", "pretrained", "=", "True", ")", ".", "features", "\n", "self", ".", "slice1", "=", "layers", "[", ":", "4", "]", "# relu1_2", "\n", "self", ".", "slice2", "=", "layers", "[", "4", ":", "9", "]", "# relu2_2", "\n", "self", ".", "slice3", "=", "layers", "[", "9", ":", "16", "]", "# relu3_3", "\n", "self", ".", "slice4", "=", "layers", "[", "16", ":", "23", "]", "# relu4_3", "\n", "self", ".", "slice5", "=", "layers", "[", "23", ":", "30", "]", "# relu5_3", "\n", "if", "not", "requires_grad", ":", "\n", "            ", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.model.loss.PerceptualLoss.forward": [[44, 67], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "range", "enumerate", "sum", "feats.append", "loss.PerceptualLoss.std_rgb.view", "getattr", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "loss.PerceptualLoss.mean_rgb.view", "map", "losses.append", "losses.append", "loss.sum().flatten().mean", "loss.flatten().mean", "loss.sum().flatten", "loss.flatten", "t.norm", "loss.sum"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "im1", ",", "im2", ")", ":", "\n", "        ", "inp", "=", "torch", ".", "cat", "(", "[", "im1", ",", "im2", "]", ",", "0", ")", "\n", "if", "self", ".", "normalize_input", ":", "\n", "            ", "inp", "=", "(", "inp", "-", "self", ".", "mean_rgb", ".", "view", "(", "1", ",", "3", ",", "1", ",", "1", ")", ")", "/", "self", ".", "std_rgb", ".", "view", "(", "1", ",", "3", ",", "1", ",", "1", ")", "\n", "\n", "", "feats", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "1", ",", "6", ")", ":", "\n", "            ", "if", "k", ">", "self", ".", "max_level", ":", "\n", "                ", "break", "\n", "", "inp", "=", "getattr", "(", "self", ",", "f'slice{k}'", ")", "(", "inp", ")", "\n", "feats", ".", "append", "(", "torch", ".", "chunk", "(", "inp", ",", "2", ",", "dim", "=", "0", ")", ")", "\n", "\n", "", "losses", "=", "[", "]", "\n", "for", "k", ",", "(", "f1", ",", "f2", ")", "in", "enumerate", "(", "feats", ",", "start", "=", "1", ")", ":", "\n", "            ", "if", "k", "in", "self", ".", "feature_levels", ":", "\n", "                ", "if", "self", ".", "normalize_features", ":", "\n", "                    ", "f1", ",", "f2", "=", "map", "(", "lambda", "t", ":", "t", "/", "(", "t", ".", "norm", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "+", "1e-10", ")", ",", "[", "f1", ",", "f2", "]", ")", "\n", "", "loss", "=", "(", "f1", "-", "f2", ")", "**", "2", "\n", "if", "self", ".", "sum_channels", ":", "\n", "                    ", "losses", ".", "append", "(", "loss", ".", "sum", "(", "1", ")", ".", "flatten", "(", "2", ")", ".", "mean", "(", "2", ")", ")", "\n", "", "else", ":", "\n", "                    ", "losses", ".", "append", "(", "loss", ".", "flatten", "(", "1", ")", ".", "mean", "(", "1", ")", ")", "\n", "", "", "", "return", "sum", "(", "losses", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.model.loss.SSIMLoss.__init__": [[80, 85], ["super().__init__", "loss.SSIMLoss.create_window"], "methods", ["home.repos.pwc.inspect_result.monniert_unicorn.model.renderer.SoftPhongShaderPlus.__init__", "home.repos.pwc.inspect_result.monniert_unicorn.model.loss.SSIMLoss.create_window"], ["    ", "def", "__init__", "(", "self", ",", "window_size", "=", "11", ",", "channel", "=", "3", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "window_size", "=", "window_size", "\n", "self", ".", "channel", "=", "channel", "\n", "self", ".", "window", "=", "self", ".", "create_window", "(", "window_size", ",", "channel", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.model.loss.SSIMLoss.ssim": [[86, 101], ["loss.SSIMLoss.window.to", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d.pow", "torch.conv2d.pow", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d"], "methods", ["home.repos.pwc.inspect_result.monniert_unicorn.model.__init__.DDPCust.to"], ["", "def", "ssim", "(", "self", ",", "img1", ",", "img2", ")", ":", "\n", "        ", "window_size", ",", "channel", "=", "self", ".", "window_size", ",", "self", ".", "channel", "\n", "window", "=", "self", ".", "window", ".", "to", "(", "img1", ".", "device", ")", "\n", "mu1", "=", "F", ".", "conv2d", "(", "img1", ",", "window", ",", "padding", "=", "window_size", "//", "2", ",", "groups", "=", "channel", ")", "\n", "mu2", "=", "F", ".", "conv2d", "(", "img2", ",", "window", ",", "padding", "=", "window_size", "//", "2", ",", "groups", "=", "channel", ")", "\n", "mu1_sq", "=", "mu1", ".", "pow", "(", "2", ")", "\n", "mu2_sq", "=", "mu2", ".", "pow", "(", "2", ")", "\n", "mu1_mu2", "=", "mu1", "*", "mu2", "\n", "sigma1_sq", "=", "F", ".", "conv2d", "(", "img1", "*", "img1", ",", "window", ",", "padding", "=", "window_size", "//", "2", ",", "groups", "=", "channel", ")", "-", "mu1_sq", "\n", "sigma2_sq", "=", "F", ".", "conv2d", "(", "img2", "*", "img2", ",", "window", ",", "padding", "=", "window_size", "//", "2", ",", "groups", "=", "channel", ")", "-", "mu2_sq", "\n", "sigma12", "=", "F", ".", "conv2d", "(", "img1", "*", "img2", ",", "window", ",", "padding", "=", "window_size", "//", "2", ",", "groups", "=", "channel", ")", "-", "mu1_mu2", "\n", "C1", "=", "0.01", "**", "2", "\n", "C2", "=", "0.03", "**", "2", "\n", "ssim_map", "=", "(", "(", "2", "*", "mu1_mu2", "+", "C1", ")", "*", "(", "2", "*", "sigma12", "+", "C2", ")", ")", "/", "(", "(", "mu1_sq", "+", "mu2_sq", "+", "C1", ")", "*", "(", "sigma1_sq", "+", "sigma2_sq", "+", "C2", ")", ")", "\n", "return", "1", "-", "ssim_map", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.model.loss.SSIMLoss.create_window": [[102, 108], ["gaussian().unsqueeze", "gaussian().unsqueeze.mm().unsqueeze().unsqueeze", "gaussian().unsqueeze.mm().unsqueeze().unsqueeze.expand().contiguous", "loss.gaussian", "gaussian().unsqueeze.mm().unsqueeze", "gaussian().unsqueeze.mm().unsqueeze().unsqueeze.expand", "gaussian().unsqueeze.mm", "gaussian().unsqueeze.t"], "methods", ["home.repos.pwc.inspect_result.monniert_unicorn.model.loss.gaussian"], ["", "@", "staticmethod", "\n", "def", "create_window", "(", "window_size", ",", "channel", ")", ":", "\n", "        ", "_1D_window", "=", "gaussian", "(", "window_size", ",", "1.5", ")", ".", "unsqueeze", "(", "1", ")", "\n", "_2D_window", "=", "_1D_window", ".", "mm", "(", "_1D_window", ".", "t", "(", ")", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "window", "=", "_2D_window", ".", "expand", "(", "channel", ",", "1", ",", "window_size", ",", "window_size", ")", ".", "contiguous", "(", ")", "\n", "return", "window", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.model.loss.SSIMLoss.forward": [[109, 111], ["loss.SSIMLoss.ssim().flatten().mean", "loss.SSIMLoss.ssim().flatten", "loss.SSIMLoss.ssim"], "methods", ["home.repos.pwc.inspect_result.monniert_unicorn.model.loss.SSIMLoss.ssim"], ["", "def", "forward", "(", "self", ",", "inp", ",", "target", ")", ":", "\n", "        ", "return", "self", ".", "ssim", "(", "inp", ",", "target", ")", ".", "flatten", "(", "1", ")", ".", "mean", "(", "1", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.monniert_unicorn.model.loss.get_loss": [[8, 19], ["None"], "function", ["None"], ["def", "get_loss", "(", "name", ")", ":", "\n", "    ", "return", "{", "\n", "'bce'", ":", "nn", ".", "BCEWithLogitsLoss", ",", "\n", "'mse'", ":", "nn", ".", "MSELoss", ",", "\n", "'l2'", ":", "nn", ".", "MSELoss", ",", "\n", "'l1'", ":", "nn", ".", "L1Loss", ",", "\n", "'huber'", ":", "nn", ".", "SmoothL1Loss", ",", "\n", "'cosine'", ":", "nn", ".", "CosineSimilarity", ",", "\n", "'perceptual'", ":", "PerceptualLoss", ",", "\n", "'ssim'", ":", "SSIMLoss", ",", "\n", "}", "[", "name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.model.loss.gaussian": [[74, 77], ["torch.Tensor", "torch.Tensor", "torch.Tensor.sum", "math.exp", "range", "float"], "function", ["None"], ["", "", "def", "gaussian", "(", "window_size", ",", "sigma", ")", ":", "\n", "    ", "gauss", "=", "torch", ".", "Tensor", "(", "[", "exp", "(", "-", "(", "x", "-", "window_size", "//", "2", ")", "**", "2", "/", "float", "(", "2", "*", "sigma", "**", "2", ")", ")", "for", "x", "in", "range", "(", "window_size", ")", "]", ")", "\n", "return", "gauss", "/", "gauss", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.model.generator.GiraffeGenerator.__init__": [[14, 45], ["torch.nn.Module.__init__", "copy.deepcopy", "int", "copy.deepcopy.pop", "copy.deepcopy.pop", "torch.nn.ModuleList", "tools.create_upsample_layer", "tools.create_upsample_layer", "torch.nn.ReLU", "isinstance", "math.log2", "int", "copy.deepcopy.pop", "copy.deepcopy.pop", "len", "max", "numpy.prod", "tools.conv1x1", "tools.Identity", "tools.conv3x3", "torch.nn.ModuleList", "tools.conv3x3", "torch.nn.ModuleList", "tools.kaiming_weights_init", "min", "n_ch_fn", "n_ch_fn", "range", "tools.conv3x3", "n_ch_fn", "generator.GiraffeGenerator.modules", "tools.conv3x3", "n_ch_fn", "range", "torch.nn.InstanceNorm2d", "tools.conv3x3", "n_ch_fn", "range"], "methods", ["home.repos.pwc.inspect_result.monniert_unicorn.model.renderer.SoftPhongShaderPlus.__init__", "home.repos.pwc.inspect_result.monniert_unicorn.model.tools.create_upsample_layer", "home.repos.pwc.inspect_result.monniert_unicorn.model.tools.create_upsample_layer", "home.repos.pwc.inspect_result.monniert_unicorn.model.tools.conv1x1", "home.repos.pwc.inspect_result.monniert_unicorn.model.tools.conv3x3", "home.repos.pwc.inspect_result.monniert_unicorn.model.tools.conv3x3", "home.repos.pwc.inspect_result.monniert_unicorn.model.tools.kaiming_weights_init", "home.repos.pwc.inspect_result.monniert_unicorn.model.tools.conv3x3", "home.repos.pwc.inspect_result.monniert_unicorn.model.tools.conv3x3", "home.repos.pwc.inspect_result.monniert_unicorn.model.tools.conv3x3"], ["def", "__init__", "(", "self", ",", "n_features", "=", "128", ",", "inp_dim", "=", "128", ",", "img_size", "=", "64", ",", "out_dim", "=", "3", ",", "min_features", "=", "16", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "kwargs", "=", "deepcopy", "(", "kwargs", ")", "\n", "self", ".", "inp_dim", "=", "inp_dim", "\n", "self", ".", "img_size", "=", "(", "img_size", ",", "img_size", ")", "if", "isinstance", "(", "img_size", ",", "int", ")", "else", "img_size", "\n", "self", ".", "n_blocks", "=", "int", "(", "log2", "(", "min", "(", "self", ".", "img_size", ")", ")", ")", "\n", "self", ".", "feat_w", ",", "self", ".", "feat_h", "=", "[", "int", "(", "s", "/", "2", "**", "self", ".", "n_blocks", ")", "for", "s", "in", "self", ".", "img_size", "]", "\n", "self", ".", "use_rgb_skip", "=", "kwargs", ".", "pop", "(", "'use_rgb_skip'", ",", "True", ")", "\n", "self", ".", "use_norm", "=", "kwargs", ".", "pop", "(", "'use_norm'", ",", "False", ")", "\n", "upsample_feat", ",", "upsample_rgb", "=", "kwargs", ".", "pop", "(", "'upsample_feat'", ",", "'nn'", ")", ",", "kwargs", ".", "pop", "(", "'upsample_rgb'", ",", "'bilinear'", ")", "\n", "assert", "len", "(", "kwargs", ")", "==", "0", "\n", "\n", "n_ch_fn", "=", "lambda", "i", ":", "max", "(", "n_features", "//", "(", "2", "**", "i", ")", ",", "min_features", ")", "\n", "n_flat_features", "=", "n_features", "*", "np", ".", "prod", "(", "[", "self", ".", "feat_w", ",", "self", ".", "feat_h", "]", ")", "\n", "self", ".", "reshape_features", "=", "n_features", "!=", "n_flat_features", "\n", "self", ".", "conv_in", "=", "conv1x1", "(", "inp_dim", ",", "n_flat_features", ")", "if", "n_flat_features", "!=", "inp_dim", "else", "Identity", "(", ")", "\n", "seq", "=", "[", "conv3x3", "(", "n_ch_fn", "(", "i", "+", "1", ")", ",", "n_ch_fn", "(", "i", "+", "2", ")", ")", "for", "i", "in", "range", "(", "self", ".", "n_blocks", "-", "1", ")", "]", "\n", "self", ".", "conv_layers", "=", "nn", ".", "ModuleList", "(", "[", "conv3x3", "(", "n_features", ",", "n_features", "//", "2", ")", "]", "+", "seq", ")", "\n", "self", ".", "upsample_feat", "=", "create_upsample_layer", "(", "upsample_feat", ")", "\n", "self", ".", "upsample_rgb", "=", "create_upsample_layer", "(", "upsample_rgb", ")", "\n", "\n", "if", "self", ".", "use_rgb_skip", ":", "\n", "            ", "seq", "=", "[", "conv3x3", "(", "n_ch_fn", "(", "i", "+", "1", ")", ",", "out_dim", ")", "for", "i", "in", "range", "(", "self", ".", "n_blocks", ")", "]", "\n", "self", ".", "conv_rgb", "=", "nn", ".", "ModuleList", "(", "[", "conv3x3", "(", "n_features", ",", "out_dim", ")", "]", "+", "seq", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv_rgb", "=", "conv3x3", "(", "n_ch_fn", "(", "self", ".", "n_blocks", ")", ",", "out_dim", ")", "\n", "", "if", "self", ".", "use_norm", ":", "\n", "            ", "self", ".", "norms", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "InstanceNorm2d", "(", "n_ch_fn", "(", "i", "+", "1", ")", ")", "for", "i", "in", "range", "(", "self", ".", "n_blocks", ")", "]", ")", "\n", "", "self", ".", "actvn", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "[", "kaiming_weights_init", "(", "m", ")", "for", "m", "in", "self", ".", "modules", "(", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.model.generator.GiraffeGenerator.forward": [[46, 69], ["generator.GiraffeGenerator.conv_in", "enumerate", "torch.sigmoid", "generator.GiraffeGenerator.view", "generator.GiraffeGenerator.upsample_rgb", "layer", "generator.GiraffeGenerator.actvn", "generator.GiraffeGenerator.conv_rgb", "len", "len", "generator.GiraffeGenerator.upsample_feat", "generator.GiraffeGenerator.upsample_rgb"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inp", ")", ":", "\n", "        ", "inp", "=", "inp", "[", "...", ",", "None", ",", "None", "]", "if", "len", "(", "inp", ".", "shape", ")", "<", "4", "else", "inp", "\n", "net", "=", "self", ".", "conv_in", "(", "inp", ")", "\n", "if", "self", ".", "reshape_features", ":", "# XXX in case of non square images, we reshape the features", "\n", "            ", "net", "=", "net", ".", "view", "(", "len", "(", "net", ")", ",", "-", "1", ",", "self", ".", "feat_h", ",", "self", ".", "feat_w", ")", "\n", "\n", "", "if", "self", ".", "use_rgb_skip", ":", "\n", "            ", "rgb", "=", "self", ".", "upsample_rgb", "(", "self", ".", "conv_rgb", "[", "0", "]", "(", "net", ")", ")", "\n", "\n", "", "for", "idx", ",", "layer", "in", "enumerate", "(", "self", ".", "conv_layers", ")", ":", "\n", "            ", "hid", "=", "layer", "(", "self", ".", "upsample_feat", "(", "net", ")", ")", "\n", "if", "self", ".", "use_norm", ":", "\n", "                ", "hid", "=", "self", ".", "norms", "[", "idx", "]", "(", "hid", ")", "\n", "", "net", "=", "self", ".", "actvn", "(", "hid", ")", "\n", "\n", "if", "self", ".", "use_rgb_skip", ":", "\n", "                ", "rgb", "=", "rgb", "+", "self", ".", "conv_rgb", "[", "idx", "+", "1", "]", "(", "net", ")", "\n", "if", "idx", "<", "self", ".", "n_blocks", "-", "1", ":", "\n", "                    ", "rgb", "=", "self", ".", "upsample_rgb", "(", "rgb", ")", "\n", "\n", "", "", "", "if", "not", "self", ".", "use_rgb_skip", ":", "\n", "            ", "rgb", "=", "self", ".", "conv_rgb", "(", "net", ")", "\n", "", "return", "torch", ".", "sigmoid", "(", "rgb", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.model.generator.ProgressiveGiraffeGenerator.__init__": [[72, 85], ["torch.nn.Module.__init__", "len", "all", "kwargs.pop", "tools.create_mlp", "generator.GiraffeGenerator", "generator.ProgressiveGiraffeGenerator.set_milestones", "isinstance", "kwargs.pop", "kwargs.pop"], "methods", ["home.repos.pwc.inspect_result.monniert_unicorn.model.renderer.SoftPhongShaderPlus.__init__", "home.repos.pwc.inspect_result.monniert_unicorn.model.tools.create_mlp", "home.repos.pwc.inspect_result.monniert_unicorn.model.generator.ProgressiveGiraffeGenerator.set_milestones"], ["    ", "def", "__init__", "(", "self", ",", "inp_dim", ",", "powers", ",", "milestones", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "powers", "=", "[", "powers", "]", "if", "isinstance", "(", "powers", ",", "int", ")", "else", "powers", "\n", "self", ".", "n_powers", "=", "len", "(", "self", ".", "powers", ")", "\n", "self", ".", "latent_size", "=", "self", ".", "powers", "[", "-", "1", "]", "\n", "assert", "all", "(", "[", "self", ".", "latent_size", "%", "p", "==", "0", "for", "p", "in", "powers", "]", ")", "\n", "self", ".", "repeat_latent", "=", "[", "self", ".", "latent_size", "//", "p", "for", "p", "in", "powers", "]", "\n", "n_features", "=", "kwargs", ".", "pop", "(", "'n_features'", ",", "self", ".", "latent_size", ")", "\n", "NU", ",", "NL", "=", "kwargs", ".", "pop", "(", "'n_reg_units'", ",", "N_UNITS", ")", ",", "kwargs", ".", "pop", "(", "'n_reg_layers'", ",", "N_LAYERS", ")", "\n", "self", ".", "regressor", "=", "create_mlp", "(", "inp_dim", ",", "self", ".", "latent_size", ",", "NU", ",", "NL", ",", "zero_last_init", "=", "True", ")", "\n", "self", ".", "generator", "=", "GiraffeGenerator", "(", "n_features", "=", "n_features", ",", "inp_dim", "=", "self", ".", "latent_size", ",", "**", "kwargs", ")", "\n", "self", ".", "cur_milestone", "=", "0", "\n", "self", ".", "set_milestones", "(", "milestones", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.model.generator.ProgressiveGiraffeGenerator.forward": [[86, 97], ["generator.ProgressiveGiraffeGenerator.regressor", "generator.ProgressiveGiraffeGenerator.generator", "x.size", "torch.zeros", "torch.ones"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "B", ",", "C", ",", "device", "=", "x", ".", "size", "(", "0", ")", ",", "self", ".", "latent_size", ",", "x", ".", "device", "\n", "latent_final", "=", "self", ".", "regressor", "(", "x", ")", "\n", "if", "self", ".", "act_idx", "<", "self", ".", "n_powers", ":", "\n", "            ", "p", "=", "self", ".", "current_code_size", "\n", "mask", "=", "torch", ".", "zeros", "(", "B", ",", "C", ",", "device", "=", "device", ")", "\n", "mask", "[", ":", ",", ":", "p", "]", "=", "torch", ".", "ones", "(", "B", ",", "p", ",", "device", "=", "device", ")", "\n", "latent_final", "=", "mask", "*", "latent_final", "\n", "\n", "", "self", ".", "_latent", "=", "latent_final", "\n", "return", "self", ".", "generator", "(", "latent_final", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.model.generator.ProgressiveGiraffeGenerator.step": [[98, 105], ["utils.logger.print_log"], "methods", ["home.repos.pwc.inspect_result.monniert_unicorn.utils.logger.print_log"], ["", "def", "step", "(", "self", ")", ":", "\n", "        ", "self", ".", "cur_milestone", "+=", "1", "\n", "while", "self", ".", "act_idx", "<", "self", ".", "n_powers", "and", "self", ".", "act_milestones", "[", "self", ".", "act_idx", "]", "<=", "self", ".", "cur_milestone", ":", "\n", "            ", "self", ".", "activations", "[", "self", ".", "act_idx", "]", "=", "True", "\n", "m", ",", "p", "=", "self", ".", "cur_milestone", ",", "self", ".", "powers", "[", "self", ".", "act_idx", "]", "\n", "print_log", "(", "'Milestone {}, progressive giraffe: power {} activated'", ".", "format", "(", "m", ",", "p", ")", ")", "\n", "self", ".", "act_idx", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.model.generator.ProgressiveGiraffeGenerator.set_cur_milestone": [[106, 113], ["utils.logger.print_log", "zip"], "methods", ["home.repos.pwc.inspect_result.monniert_unicorn.utils.logger.print_log"], ["", "", "def", "set_cur_milestone", "(", "self", ",", "k", ")", ":", "\n", "        ", "self", ".", "cur_milestone", "=", "k", "\n", "while", "self", ".", "act_idx", "<", "self", ".", "n_powers", "and", "self", ".", "act_milestones", "[", "self", ".", "act_idx", "]", "<=", "self", ".", "cur_milestone", ":", "\n", "            ", "self", ".", "activations", "[", "self", ".", "act_idx", "]", "=", "True", "\n", "self", ".", "act_idx", "+=", "1", "\n", "", "powers", ",", "act", "=", "self", ".", "powers", ",", "self", ".", "activations", "\n", "print_log", "(", "'progressive giraffe activated powers={}'", ".", "format", "(", "[", "k", "for", "k", ",", "a", "in", "zip", "(", "powers", ",", "act", ")", "if", "a", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.model.generator.ProgressiveGiraffeGenerator.set_milestones": [[114, 128], ["utils.logger.print_log", "isinstance", "len", "numpy.asarray", "zip"], "methods", ["home.repos.pwc.inspect_result.monniert_unicorn.utils.logger.print_log"], ["", "def", "set_milestones", "(", "self", ",", "milestones", ")", ":", "\n", "        ", "if", "milestones", "is", "not", "None", ":", "\n", "            ", "milestones", "=", "[", "milestones", "]", "if", "isinstance", "(", "milestones", ",", "int", ")", "else", "milestones", "\n", "assert", "len", "(", "milestones", ")", "==", "self", ".", "n_powers", "\n", "self", ".", "act_milestones", "=", "milestones", "\n", "n_act", "=", "(", "np", ".", "asarray", "(", "milestones", ")", "<=", "self", ".", "cur_milestone", ")", ".", "sum", "(", ")", "\n", "self", ".", "act_idx", "=", "n_act", "\n", "self", ".", "activations", "=", "[", "True", "]", "*", "n_act", "+", "[", "False", "]", "*", "(", "self", ".", "n_powers", "-", "n_act", ")", "\n", "powers", ",", "act", "=", "self", ".", "powers", ",", "self", ".", "activations", "\n", "print_log", "(", "'progressive giraffe activated powers={}'", ".", "format", "(", "[", "k", "for", "k", ",", "a", "in", "zip", "(", "powers", ",", "act", ")", "if", "a", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "act_milestones", "=", "[", "-", "1", "]", "*", "self", ".", "n_powers", "\n", "self", ".", "act_idx", "=", "self", ".", "n_powers", "\n", "self", ".", "activations", "=", "[", "True", "]", "*", "self", ".", "n_powers", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.model.generator.ProgressiveGiraffeGenerator.is_frozen": [[129, 132], ["sum"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "is_frozen", "(", "self", ")", ":", "\n", "        ", "return", "sum", "(", "self", ".", "activations", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.model.generator.ProgressiveGiraffeGenerator.current_code_size": [[133, 136], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "current_code_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "powers", "[", "self", ".", "act_idx", "-", "1", "]", "if", "self", ".", "act_idx", ">", "0", "else", "0", "\n", "", "", ""]], "home.repos.pwc.inspect_result.monniert_unicorn.model.renderer.Renderer.__init__": [[22, 56], ["torch.nn.Module.__init__", "copy.deepcopy", "renderer.Renderer.init_cameras", "renderer.Renderer.init_lights", "kwargs.get", "pytorch3d.renderer.BlendParams", "kwargs.get", "pytorch3d.renderer.RasterizationSettings", "pytorch3d.renderer.MeshRenderer", "kwargs.get", "pytorch3d.renderer.BlendParams", "pytorch3d.renderer.RasterizationSettings", "renderer.VizMeshRenderer", "isinstance", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "pytorch3d.renderer.MeshRasterizer", "shader_cls", "pytorch3d.renderer.MeshRasterizer", "shader_cls", "kwargs.get", "kwargs.get", "numpy.log"], "methods", ["home.repos.pwc.inspect_result.monniert_unicorn.model.renderer.SoftPhongShaderPlus.__init__", "home.repos.pwc.inspect_result.monniert_unicorn.model.renderer.Renderer.init_cameras", "home.repos.pwc.inspect_result.monniert_unicorn.model.renderer.Renderer.init_lights", "home.repos.pwc.inspect_result.monniert_unicorn.utils.metrics.Metrics.log"], ["    ", "def", "__init__", "(", "self", ",", "img_size", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "img_size", "=", "(", "img_size", ",", "img_size", ")", "if", "isinstance", "(", "img_size", ",", "int", ")", "else", "img_size", "\n", "self", ".", "_init_kwargs", "=", "deepcopy", "(", "kwargs", ")", "\n", "self", ".", "init_cameras", "(", "**", "kwargs", ".", "get", "(", "'cameras'", ",", "{", "}", ")", ")", "\n", "self", ".", "init_lights", "(", "**", "kwargs", ".", "get", "(", "'lights'", ",", "{", "}", ")", ")", "\n", "blend_kwargs", "=", "{", "'sigma'", ":", "kwargs", ".", "get", "(", "'sigma'", ",", "1e-4", ")", ",", "\n", "'background_color'", ":", "kwargs", ".", "get", "(", "'background_color'", ",", "(", "1", ",", "1", ",", "1", ")", ")", "}", "\n", "n_faces", "=", "kwargs", ".", "get", "(", "'faces_per_pixel'", ",", "25", ")", "\n", "blend_params", "=", "BlendParams", "(", "**", "blend_kwargs", ")", "\n", "s_kwargs", "=", "{", "'cameras'", ":", "self", ".", "cameras", ",", "'lights'", ":", "self", ".", "lights", ",", "'blend_params'", ":", "blend_params", ",", "\n", "'debug'", ":", "kwargs", ".", "get", "(", "'debug'", ",", "False", ")", "}", "\n", "if", "kwargs", ".", "get", "(", "'layered_shader'", ",", "LAYERED_SHADER", ")", ":", "\n", "            ", "shader_cls", "=", "LayeredShader", "\n", "s_kwargs", "[", "'clip_inside'", "]", "=", "kwargs", ".", "get", "(", "'clip_inside'", ",", "True", ")", "\n", "s_kwargs", "[", "'shading_type'", "]", "=", "kwargs", ".", "get", "(", "'shading_type'", ",", "SHADING_TYPE", ")", "\n", "", "else", ":", "\n", "            ", "shader_cls", "=", "SoftPhongShaderPlus", "\n", "s_kwargs", "[", "'z_detach'", "]", "=", "kwargs", ".", "get", "(", "'z_detach'", ",", "False", ")", "\n", "s_kwargs", "[", "'eps'", "]", "=", "kwargs", ".", "get", "(", "'eps'", ",", "1e-10", ")", "\n", "\n", "# approximative differentiable renderer for training", "\n", "", "raster_settings", "=", "RasterizationSettings", "(", "image_size", "=", "img_size", ",", "blur_radius", "=", "np", ".", "log", "(", "1.", "/", "1e-4", "-", "1.", ")", "*", "blend_params", ".", "sigma", ",", "\n", "faces_per_pixel", "=", "n_faces", ",", "perspective_correct", "=", "False", ")", "\n", "self", ".", "renderer", "=", "MeshRenderer", "(", "MeshRasterizer", "(", "cameras", "=", "self", ".", "cameras", ",", "raster_settings", "=", "raster_settings", ")", ",", "\n", "shader_cls", "(", "**", "s_kwargs", ")", ")", "\n", "\n", "# exact anti-aliased rendering for visualization", "\n", "viz_size", "=", "kwargs", ".", "get", "(", "'viz_size'", ",", "(", "256", ",", "256", ")", ")", "\n", "s_kwargs", "[", "'blend_params'", "]", "=", "BlendParams", "(", "background_color", "=", "blend_kwargs", "[", "'background_color'", "]", ",", "sigma", "=", "0", ")", "\n", "raster_settings", "=", "RasterizationSettings", "(", "image_size", "=", "(", "viz_size", "[", "0", "]", "*", "2", ",", "viz_size", "[", "1", "]", "*", "2", ")", ",", "blur_radius", "=", "0.0", ",", "\n", "faces_per_pixel", "=", "1", ",", "perspective_correct", "=", "False", ")", "\n", "self", ".", "viz_renderer", "=", "VizMeshRenderer", "(", "MeshRasterizer", "(", "cameras", "=", "self", ".", "cameras", ",", "raster_settings", "=", "raster_settings", ")", ",", "\n", "shader_cls", "(", "**", "s_kwargs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.model.renderer.Renderer.init_cameras": [[57, 62], ["copy.deepcopy", "copy.deepcopy.pop", "cam_cls"], "methods", ["None"], ["", "def", "init_cameras", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "kwargs", "=", "deepcopy", "(", "kwargs", ")", "\n", "name", "=", "kwargs", ".", "pop", "(", "'name'", ",", "'fov'", ")", "\n", "cam_cls", "=", "{", "'fov'", ":", "FoVPerspectiveCameras", ",", "'perspective'", ":", "PerspectiveCameras", "}", "[", "name", "]", "\n", "self", ".", "cameras", "=", "cam_cls", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.model.renderer.Renderer.init_lights": [[63, 73], ["copy.deepcopy", "copy.deepcopy.pop", "light_cls"], "methods", ["None"], ["", "def", "init_lights", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "kwargs", "=", "deepcopy", "(", "kwargs", ")", "\n", "name", "=", "kwargs", ".", "pop", "(", "'name'", ",", "'ambient'", ")", "\n", "light_cls", "=", "{", "'ambient'", ":", "AmbientLights", ",", "'directional'", ":", "DirectionalLights", ",", "'point'", ":", "PointLights", "}", "[", "name", "]", "\n", "self", ".", "lights", "=", "light_cls", "(", "**", "kwargs", ")", "\n", "if", "name", "==", "'directional'", ":", "\n", "            ", "self", ".", "lights", ".", "_direction", "=", "self", ".", "lights", ".", "direction", "\n", "self", ".", "lights", ".", "_ambient_color", "=", "self", ".", "lights", ".", "ambient_color", "\n", "self", ".", "lights", ".", "_diffuse_color", "=", "self", ".", "lights", ".", "diffuse_color", "\n", "self", ".", "lights", ".", "_specular_color", "=", "self", ".", "lights", ".", "specular_color", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.model.renderer.Renderer.init_kwargs": [[74, 77], ["copy.deepcopy"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "init_kwargs", "(", "self", ")", ":", "\n", "        ", "return", "deepcopy", "(", "self", ".", "_init_kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.model.renderer.Renderer.forward": [[78, 80], ["renderer.Renderer.viz_renderer", "renderer.Renderer.renderer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "meshes", ",", "R", ",", "T", ",", "viz_purpose", "=", "False", ")", ":", "\n", "        ", "return", "self", ".", "viz_renderer", "(", "meshes", ",", "R", "=", "R", ",", "T", "=", "T", ")", "if", "viz_purpose", "else", "self", ".", "renderer", "(", "meshes", ",", "R", "=", "R", ",", "T", "=", "T", ")", "# BCHW", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.model.renderer.Renderer.to": [[81, 86], ["super().to", "renderer.Renderer.renderer.to", "renderer.Renderer.viz_renderer.to"], "methods", ["home.repos.pwc.inspect_result.monniert_unicorn.model.__init__.DDPCust.to", "home.repos.pwc.inspect_result.monniert_unicorn.model.__init__.DDPCust.to", "home.repos.pwc.inspect_result.monniert_unicorn.model.__init__.DDPCust.to"], ["", "def", "to", "(", "self", ",", "device", ")", ":", "\n", "        ", "super", "(", ")", ".", "to", "(", "device", ")", "\n", "self", ".", "renderer", "=", "self", ".", "renderer", ".", "to", "(", "device", ")", "\n", "self", ".", "viz_renderer", "=", "self", ".", "viz_renderer", ".", "to", "(", "device", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.model.renderer.Renderer.update_lights": [[87, 96], ["None"], "methods", ["None"], ["", "def", "update_lights", "(", "self", ",", "direction", "=", "None", ",", "ka", "=", "None", ",", "kd", "=", "None", ",", "ks", "=", "None", ")", ":", "\n", "        ", "if", "direction", "is", "not", "None", ":", "\n", "            ", "self", ".", "lights", ".", "direction", "=", "direction", "\n", "", "if", "ka", "is", "not", "None", ":", "\n", "            ", "self", ".", "lights", ".", "ambient_color", "=", "ka", "\n", "", "if", "kd", "is", "not", "None", ":", "\n", "            ", "self", ".", "lights", ".", "diffuse_color", "=", "kd", "\n", "", "if", "ks", "is", "not", "None", ":", "\n", "            ", "self", ".", "lights", ".", "specular_color", "=", "ks", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.model.renderer.Renderer.reset_default_lights": [[97, 102], ["None"], "methods", ["None"], ["", "", "def", "reset_default_lights", "(", "self", ")", ":", "\n", "        ", "self", ".", "lights", ".", "direction", "=", "self", ".", "lights", ".", "_direction", "\n", "self", ".", "lights", ".", "ambient_color", "=", "self", ".", "lights", ".", "_ambient_color", "\n", "self", ".", "lights", ".", "diffuse_color", "=", "self", ".", "lights", ".", "_diffuse_color", "\n", "self", ".", "lights", ".", "specular_color", "=", "self", ".", "lights", ".", "_specular_color", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.model.renderer.VizMeshRenderer.__call__": [[106, 110], ["torch.no_grad", "super().__call__", "torch.nn.functional.avg_pool2d"], "methods", ["home.repos.pwc.inspect_result.monniert_unicorn.model.renderer.VizMeshRenderer.__call__"], ["@", "torch", ".", "no_grad", "(", ")", "\n", "def", "__call__", "(", "self", ",", "*", "input", ",", "**", "kwargs", ")", ":", "\n", "        ", "res", "=", "super", "(", ")", ".", "__call__", "(", "*", "input", ",", "**", "kwargs", ")", "\n", "return", "F", ".", "avg_pool2d", "(", "res", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.model.renderer.LayeredShader.__init__": [[113, 134], ["torch.nn.Module.__init__", "pytorch3d.renderer.DirectionalLights", "pytorch3d.renderer.Materials", "pytorch3d.renderer.BlendParams"], "methods", ["home.repos.pwc.inspect_result.monniert_unicorn.model.renderer.SoftPhongShaderPlus.__init__"], ["    ", "def", "__init__", "(", "self", ",", "device", "=", "'cpu'", ",", "cameras", "=", "None", ",", "lights", "=", "None", ",", "materials", "=", "None", ",", "blend_params", "=", "None", ",", "clip_inside", "=", "True", ",", "\n", "shading_type", "=", "'phong'", ",", "debug", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "lights", "=", "lights", "if", "lights", "is", "not", "None", "else", "DirectionalLights", "(", "device", "=", "device", ")", "\n", "self", ".", "materials", "=", "(", "materials", "if", "materials", "is", "not", "None", "else", "Materials", "(", "device", "=", "device", ")", ")", "\n", "self", ".", "cameras", "=", "cameras", "\n", "self", ".", "blend_params", "=", "blend_params", "if", "blend_params", "is", "not", "None", "else", "BlendParams", "(", ")", "\n", "self", ".", "clip_inside", "=", "clip_inside", "\n", "if", "shading_type", "==", "'phong'", ":", "\n", "            ", "shading_fn", "=", "phong_shading", "\n", "", "elif", "shading_type", "==", "'flat'", ":", "\n", "            ", "shading_fn", "=", "flat_shading", "\n", "", "elif", "shading_type", "==", "'gouraud'", ":", "\n", "            ", "shading_fn", "=", "gouraud_shading", "\n", "", "elif", "shading_type", "==", "'raw'", ":", "\n", "            ", "shading_fn", "=", "lambda", "x", ":", "x", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "self", ".", "shading_fn", "=", "shading_fn", "\n", "self", ".", "shading_type", "=", "shading_type", "\n", "self", ".", "debug", "=", "debug", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.model.renderer.LayeredShader.to": [[135, 143], ["renderer.LayeredShader.materials.to", "renderer.LayeredShader.lights.to", "cameras.to"], "methods", ["home.repos.pwc.inspect_result.monniert_unicorn.model.__init__.DDPCust.to", "home.repos.pwc.inspect_result.monniert_unicorn.model.__init__.DDPCust.to", "home.repos.pwc.inspect_result.monniert_unicorn.model.__init__.DDPCust.to"], ["", "def", "to", "(", "self", ",", "device", ")", ":", "\n", "# Manually move to device modules which are not subclasses of nn.Module", "\n", "        ", "cameras", "=", "self", ".", "cameras", "\n", "if", "cameras", "is", "not", "None", ":", "\n", "            ", "self", ".", "cameras", "=", "cameras", ".", "to", "(", "device", ")", "\n", "", "self", ".", "materials", "=", "self", ".", "materials", ".", "to", "(", "device", ")", "\n", "self", ".", "lights", "=", "self", ".", "lights", ".", "to", "(", "device", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.model.renderer.LayeredShader.forward": [[144, 158], ["kwargs.get", "renderer.layered_rgb_blend", "meshes.sample_textures", "renderer.LayeredShader.shading_fn", "torch.all", "kwargs.get", "kwargs.get", "kwargs.get", "meshes.sample_textures"], "methods", ["home.repos.pwc.inspect_result.monniert_unicorn.model.renderer.layered_rgb_blend"], ["", "def", "forward", "(", "self", ",", "fragments", ",", "meshes", ",", "**", "kwargs", ")", ":", "\n", "        ", "blend_params", "=", "kwargs", ".", "get", "(", "\"blend_params\"", ",", "self", ".", "blend_params", ")", "\n", "if", "self", ".", "shading_type", "==", "'raw'", ":", "\n", "            ", "colors", "=", "meshes", ".", "sample_textures", "(", "fragments", ")", "\n", "if", "not", "torch", ".", "all", "(", "self", ".", "lights", ".", "ambient_color", "==", "1", ")", ":", "\n", "                ", "colors", "*=", "self", ".", "lights", ".", "ambient_color", "\n", "", "", "else", ":", "\n", "            ", "sh_kwargs", "=", "{", "'meshes'", ":", "meshes", ",", "'fragments'", ":", "fragments", ",", "'cameras'", ":", "kwargs", ".", "get", "(", "\"cameras\"", ",", "self", ".", "cameras", ")", ",", "\n", "'lights'", ":", "kwargs", ".", "get", "(", "\"lights\"", ",", "self", ".", "lights", ")", ",", "\n", "'materials'", ":", "kwargs", ".", "get", "(", "\"materials\"", ",", "self", ".", "materials", ")", "}", "\n", "if", "self", ".", "shading_type", "!=", "'gouraud'", ":", "\n", "                ", "sh_kwargs", "[", "'texels'", "]", "=", "meshes", ".", "sample_textures", "(", "fragments", ")", "\n", "", "colors", "=", "self", ".", "shading_fn", "(", "**", "sh_kwargs", ")", "\n", "", "return", "layered_rgb_blend", "(", "colors", ",", "fragments", ",", "blend_params", ",", "clip_inside", "=", "self", ".", "clip_inside", ",", "debug", "=", "self", ".", "debug", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.model.renderer.SoftPhongShaderPlus.__init__": [[197, 209], ["torch.nn.Module.__init__", "pytorch3d.renderer.DirectionalLights", "pytorch3d.renderer.Materials", "pytorch3d.renderer.BlendParams"], "methods", ["home.repos.pwc.inspect_result.monniert_unicorn.model.renderer.SoftPhongShaderPlus.__init__"], ["def", "__init__", "(", "self", ",", "device", "=", "None", ",", "cameras", "=", "None", ",", "lights", "=", "None", ",", "materials", "=", "None", ",", "blend_params", "=", "None", ",", "z_detach", "=", "False", ",", "\n", "eps", "=", "1e-10", ",", "debug", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "lights", "=", "lights", "if", "lights", "is", "not", "None", "else", "DirectionalLights", "(", "device", "=", "device", ")", "\n", "self", ".", "materials", "=", "(", "\n", "materials", "if", "materials", "is", "not", "None", "else", "Materials", "(", "device", "=", "device", ")", "\n", ")", "\n", "self", ".", "cameras", "=", "cameras", "\n", "self", ".", "blend_params", "=", "blend_params", "if", "blend_params", "is", "not", "None", "else", "BlendParams", "(", ")", "\n", "self", ".", "z_detach", "=", "z_detach", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "debug", "=", "debug", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.model.renderer.SoftPhongShaderPlus.to": [[210, 217], ["renderer.SoftPhongShaderPlus.materials.to", "renderer.SoftPhongShaderPlus.lights.to", "cameras.to"], "methods", ["home.repos.pwc.inspect_result.monniert_unicorn.model.__init__.DDPCust.to", "home.repos.pwc.inspect_result.monniert_unicorn.model.__init__.DDPCust.to", "home.repos.pwc.inspect_result.monniert_unicorn.model.__init__.DDPCust.to"], ["", "def", "to", "(", "self", ",", "device", ")", ":", "\n", "        ", "cameras", "=", "self", ".", "cameras", "\n", "if", "cameras", "is", "not", "None", ":", "\n", "            ", "self", ".", "cameras", "=", "cameras", ".", "to", "(", "device", ")", "\n", "", "self", ".", "materials", "=", "self", ".", "materials", ".", "to", "(", "device", ")", "\n", "self", ".", "lights", "=", "self", ".", "lights", ".", "to", "(", "device", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.model.renderer.SoftPhongShaderPlus.forward": [[218, 244], ["kwargs.get", "meshes.sample_textures", "kwargs.get", "kwargs.get", "kwargs.get", "pytorch3d.renderer.mesh.shading.phong_shading", "kwargs.get", "kwargs.get", "renderer.softmax_rgb_blend_plus", "ValueError", "getattr", "getattr", "pytorch3d.renderer.mesh.rasterizer.Fragments", "pytorch3d.renderer.mesh.rasterizer.Fragments.zbuf.detach"], "methods", ["home.repos.pwc.inspect_result.monniert_unicorn.model.renderer.softmax_rgb_blend_plus"], ["", "def", "forward", "(", "self", ",", "fragments", ",", "meshes", ",", "**", "kwargs", ")", ":", "\n", "        ", "cameras", "=", "kwargs", ".", "get", "(", "\"cameras\"", ",", "self", ".", "cameras", ")", "\n", "if", "cameras", "is", "None", ":", "\n", "            ", "msg", "=", "\"Cameras must be specified either at initialization \\\n                or in the forward pass of SoftPhongShader\"", "\n", "raise", "ValueError", "(", "msg", ")", "\n", "\n", "", "texels", "=", "meshes", ".", "sample_textures", "(", "fragments", ")", "\n", "lights", "=", "kwargs", ".", "get", "(", "\"lights\"", ",", "self", ".", "lights", ")", "\n", "materials", "=", "kwargs", ".", "get", "(", "\"materials\"", ",", "self", ".", "materials", ")", "\n", "blend_params", "=", "kwargs", ".", "get", "(", "\"blend_params\"", ",", "self", ".", "blend_params", ")", "\n", "colors", "=", "phong_shading", "(", "\n", "meshes", "=", "meshes", ",", "\n", "fragments", "=", "fragments", ",", "\n", "texels", "=", "texels", ",", "\n", "lights", "=", "lights", ",", "\n", "cameras", "=", "cameras", ",", "\n", "materials", "=", "materials", ",", "\n", ")", "\n", "znear", "=", "kwargs", ".", "get", "(", "\"znear\"", ",", "getattr", "(", "cameras", ",", "\"znear\"", ",", "1.0", ")", ")", "\n", "zfar", "=", "kwargs", ".", "get", "(", "\"zfar\"", ",", "getattr", "(", "cameras", ",", "\"zfar\"", ",", "100.0", ")", ")", "\n", "if", "self", ".", "z_detach", ":", "\n", "            ", "fragments", "=", "Fragments", "(", "pix_to_face", "=", "fragments", ".", "pix_to_face", ",", "zbuf", "=", "fragments", ".", "zbuf", ".", "detach", "(", ")", ",", "\n", "bary_coords", "=", "fragments", ".", "bary_coords", ",", "dists", "=", "fragments", ".", "dists", ")", "\n", "", "return", "softmax_rgb_blend_plus", "(", "colors", ",", "fragments", ",", "blend_params", ",", "znear", "=", "znear", ",", "zfar", "=", "zfar", ",", "eps", "=", "self", ".", "eps", ",", "\n", "debug", "=", "self", ".", "debug", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.model.renderer.layered_rgb_blend": [[160, 188], ["torch.ones", "torch.cumprod", "torch.cat", "torch.cat", "torch.cat", "isinstance", "torch.tensor", "background_.to", "torch.ones.permute", "torch.ones", "background[].expand", "torch.ones", "torch.ones.permute", "torch.exp", "torch.sigmoid", "fragments.dists.clamp"], "function", ["home.repos.pwc.inspect_result.monniert_unicorn.model.__init__.DDPCust.to"], ["", "", "def", "layered_rgb_blend", "(", "colors", ",", "fragments", ",", "blend_params", ",", "clip_inside", "=", "True", ",", "debug", "=", "False", ")", ":", "\n", "    ", "N", ",", "H", ",", "W", ",", "K", "=", "fragments", ".", "pix_to_face", ".", "shape", "\n", "device", "=", "fragments", ".", "pix_to_face", ".", "device", "\n", "pixel_colors", "=", "torch", ".", "ones", "(", "(", "N", ",", "H", ",", "W", ",", "4", ")", ",", "dtype", "=", "colors", ".", "dtype", ",", "device", "=", "colors", ".", "device", ")", "\n", "background_", "=", "blend_params", ".", "background_color", "\n", "if", "not", "isinstance", "(", "background_", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "background", "=", "torch", ".", "tensor", "(", "background_", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", ")", "\n", "", "else", ":", "\n", "        ", "background", "=", "background_", ".", "to", "(", "device", ")", "\n", "\n", "", "mask", "=", "fragments", ".", "pix_to_face", ">=", "0", "# mask for padded pixels.", "\n", "if", "blend_params", ".", "sigma", "==", "0", ":", "\n", "        ", "alpha", "=", "(", "fragments", ".", "dists", "<=", "0", ")", ".", "float", "(", ")", "*", "mask", "\n", "", "elif", "clip_inside", ":", "\n", "        ", "alpha", "=", "torch", ".", "exp", "(", "-", "fragments", ".", "dists", ".", "clamp", "(", "0", ")", "/", "blend_params", ".", "sigma", ")", "*", "mask", "\n", "", "else", ":", "\n", "        ", "alpha", "=", "torch", ".", "sigmoid", "(", "-", "fragments", ".", "dists", "/", "blend_params", ".", "sigma", ")", "*", "mask", "\n", "", "occ_alpha", "=", "torch", ".", "cumprod", "(", "1.0", "-", "alpha", ",", "dim", "=", "-", "1", ")", "\n", "occ_alpha", "=", "torch", ".", "cat", "(", "[", "torch", ".", "ones", "(", "N", ",", "H", ",", "W", ",", "1", ",", "device", "=", "device", ")", ",", "occ_alpha", "]", ",", "dim", "=", "-", "1", ")", "\n", "colors", "=", "torch", ".", "cat", "(", "[", "colors", ",", "background", "[", "None", ",", "None", ",", "None", ",", "None", "]", ".", "expand", "(", "N", ",", "H", ",", "W", ",", "1", ",", "-", "1", ")", "]", ",", "dim", "=", "-", "2", ")", "\n", "alpha", "=", "torch", ".", "cat", "(", "[", "alpha", ",", "torch", ".", "ones", "(", "N", ",", "H", ",", "W", ",", "1", ",", "device", "=", "device", ")", "]", ",", "dim", "=", "-", "1", ")", "\n", "pixel_colors", "[", "...", ",", ":", "3", "]", "=", "(", "occ_alpha", "[", "...", ",", "None", "]", "*", "alpha", "[", "...", ",", "None", "]", "*", "colors", ")", ".", "sum", "(", "-", "2", ")", "\n", "pixel_colors", "[", "...", ",", "3", "]", "=", "1", "-", "occ_alpha", "[", ":", ",", ":", ",", ":", ",", "-", "1", "]", "\n", "\n", "if", "debug", ":", "\n", "        ", "return", "colors", ",", "alpha", ",", "occ_alpha", ",", "pixel_colors", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "", "else", ":", "\n", "        ", "return", "pixel_colors", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "# BCHW", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.model.renderer.softmax_rgb_blend_plus": [[246, 279], ["torch.ones", "torch.prod", "torch.is_tensor", "torch.is_tensor", "torch.max().values[].clamp", "torch.exp().clamp", "isinstance", "torch.tensor", "background_.to", "torch.sigmoid", "torch.exp", "torch.ones.permute", "torch.exp", "weights_num.sum", "torch.ones.permute", "torch.max"], "function", ["home.repos.pwc.inspect_result.monniert_unicorn.model.__init__.DDPCust.to"], ["", "", "def", "softmax_rgb_blend_plus", "(", "colors", ",", "fragments", ",", "blend_params", ",", "znear", "=", "1", ",", "zfar", "=", "100", ",", "eps", "=", "1e-10", ",", "debug", "=", "False", ")", ":", "\n", "    ", "N", ",", "H", ",", "W", ",", "K", "=", "fragments", ".", "pix_to_face", ".", "shape", "\n", "device", "=", "fragments", ".", "pix_to_face", ".", "device", "\n", "pixel_colors", "=", "torch", ".", "ones", "(", "(", "N", ",", "H", ",", "W", ",", "4", ")", ",", "dtype", "=", "colors", ".", "dtype", ",", "device", "=", "colors", ".", "device", ")", "\n", "background_", "=", "blend_params", ".", "background_color", "\n", "if", "not", "isinstance", "(", "background_", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "background", "=", "torch", ".", "tensor", "(", "background_", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", ")", "\n", "", "else", ":", "\n", "        ", "background", "=", "background_", ".", "to", "(", "device", ")", "\n", "\n", "", "mask", "=", "fragments", ".", "pix_to_face", ">=", "0", "\n", "prob_map", "=", "torch", ".", "sigmoid", "(", "-", "fragments", ".", "dists", "/", "blend_params", ".", "sigma", ")", "*", "mask", "\n", "alpha", "=", "torch", ".", "prod", "(", "(", "1.0", "-", "prob_map", ")", ",", "dim", "=", "-", "1", ")", "\n", "if", "torch", ".", "is_tensor", "(", "zfar", ")", ":", "\n", "        ", "zfar", "=", "zfar", "[", ":", ",", "None", ",", "None", ",", "None", "]", "\n", "", "if", "torch", ".", "is_tensor", "(", "znear", ")", ":", "\n", "        ", "znear", "=", "znear", "[", ":", ",", "None", ",", "None", ",", "None", "]", "\n", "\n", "", "z_inv", "=", "(", "zfar", "-", "fragments", ".", "zbuf", ")", "/", "(", "zfar", "-", "znear", ")", "*", "mask", "\n", "z_inv_max", "=", "torch", ".", "max", "(", "z_inv", ",", "dim", "=", "-", "1", ")", ".", "values", "[", "...", ",", "None", "]", ".", "clamp", "(", "min", "=", "1e-7", ")", "\n", "weights_num", "=", "prob_map", "*", "torch", ".", "exp", "(", "(", "z_inv", "-", "z_inv_max", ")", "/", "blend_params", ".", "gamma", ")", "\n", "\n", "delta", "=", "torch", ".", "exp", "(", "(", "eps", "-", "z_inv_max", ")", "/", "blend_params", ".", "gamma", ")", ".", "clamp", "(", "min", "=", "1e-7", ")", "\n", "denom", "=", "weights_num", ".", "sum", "(", "dim", "=", "-", "1", ")", "[", "...", ",", "None", "]", "+", "delta", "\n", "weighted_colors", "=", "(", "weights_num", "[", "...", ",", "None", "]", "*", "colors", ")", ".", "sum", "(", "dim", "=", "-", "2", ")", "\n", "weighted_background", "=", "delta", "*", "background", "\n", "pixel_colors", "[", "...", ",", ":", "3", "]", "=", "(", "weighted_colors", "+", "weighted_background", ")", "/", "denom", "\n", "pixel_colors", "[", "...", ",", "3", "]", "=", "1.0", "-", "alpha", "\n", "\n", "if", "debug", ":", "\n", "        ", "return", "colors", ",", "prob_map", ",", "z_inv", ",", "weights_num", ",", "delta", ",", "pixel_colors", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "", "else", ":", "\n", "        ", "return", "pixel_colors", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.model.renderer.render_rotated_views": [[281, 320], ["torch.no_grad", "torch.linspace", "range", "torch.cat().split", "utils.pytorch.get_torch_device", "renderer.Renderer", "isinstance", "mesh.to", "renderer.Renderer.to", "torch.Tensor().to().expand", "views.append", "renderer.Renderer", "torch.eye().to", "torch.zeros().to", "pytorch3d.renderer.look_at_view_transform", "len", "renderer.Renderer.update_lights", "Renderer.clamp().cpu", "torch.cat", "torch.nn.functional.interpolate", "torch.Tensor().to", "torch.Tensor().to", "R_view.transpose", "bkg.cpu", "torch.eye", "torch.zeros", "Renderer.clamp", "torch.Tensor", "torch.Tensor", "Renderer.", "mesh.extend", "len"], "function", ["home.repos.pwc.inspect_result.monniert_unicorn.utils.pytorch.get_torch_device", "home.repos.pwc.inspect_result.monniert_unicorn.model.__init__.DDPCust.to", "home.repos.pwc.inspect_result.monniert_unicorn.model.__init__.DDPCust.to", "home.repos.pwc.inspect_result.monniert_unicorn.model.__init__.DDPCust.to", "home.repos.pwc.inspect_result.monniert_unicorn.model.__init__.DDPCust.to", "home.repos.pwc.inspect_result.monniert_unicorn.model.renderer.Renderer.update_lights", "home.repos.pwc.inspect_result.monniert_unicorn.model.__init__.DDPCust.to", "home.repos.pwc.inspect_result.monniert_unicorn.model.__init__.DDPCust.to"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "render_rotated_views", "(", "mesh", ",", "img_size", "=", "256", ",", "n_views", "=", "50", ",", "elev", "=", "30", ",", "dist", "=", "2.5", ",", "R", "=", "None", ",", "T", "=", "None", ",", "bkg", "=", "None", ",", "\n", "renderer", "=", "None", ",", "rend_kwargs", "=", "None", ",", "eye_light", "=", "False", ",", "device", "=", "None", ")", ":", "\n", "    ", "device", "=", "get_torch_device", "(", ")", "if", "device", "is", "None", "else", "device", "\n", "rend_kwargs", "=", "{", "}", "if", "rend_kwargs", "is", "None", "else", "rend_kwargs", "\n", "renderer", "=", "Renderer", "(", "img_size", ",", "**", "rend_kwargs", ")", "if", "renderer", "is", "None", "else", "renderer", "\n", "if", "eye_light", ":", "\n", "        ", "if", "R", "is", "not", "None", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "if", "isinstance", "(", "renderer", ".", "lights", ",", "AmbientLights", ")", ":", "\n", "            ", "kwargs", "=", "renderer", ".", "init_kwargs", "\n", "kwargs", "[", "'lights'", "]", "=", "{", "'name'", ":", "'directional'", ",", "'direction'", ":", "[", "[", "0", ",", "0", ",", "-", "1", "]", "]", ",", "'ambient_color'", ":", "[", "[", "0.7", ",", "0.7", ",", "0.7", "]", "]", ",", "\n", "'diffuse_color'", ":", "[", "[", "0.3", ",", "0.3", ",", "0.3", "]", "]", ",", "'specular_color'", ":", "[", "[", "0.", ",", "0.", ",", "0.", "]", "]", "}", "\n", "kwargs", "[", "'shading_type'", "]", "=", "'phong'", "\n", "kwargs", "[", "'faces_per_pixel'", "]", "=", "1", "\n", "renderer", "=", "Renderer", "(", "img_size", ",", "**", "kwargs", ")", "\n", "", "", "elev", ",", "dist", "=", "0", "if", "R", "is", "not", "None", "else", "elev", ",", "0", "if", "T", "is", "not", "None", "else", "dist", "\n", "R", ",", "T", "=", "R", "if", "R", "is", "not", "None", "else", "torch", ".", "eye", "(", "3", ")", ".", "to", "(", "device", ")", ",", "T", "if", "T", "is", "not", "None", "else", "torch", ".", "zeros", "(", "3", ")", ".", "to", "(", "device", ")", "\n", "\n", "if", "bkg", "is", "not", "None", ":", "\n", "        ", "if", "bkg", ".", "shape", "[", "-", "1", "]", "!=", "img_size", ":", "\n", "            ", "bkg", "=", "F", ".", "interpolate", "(", "bkg", "[", "None", "]", ",", "size", "=", "(", "img_size", ",", "img_size", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "[", "0", "]", "\n", "", "", "mesh", ",", "renderer", "=", "mesh", ".", "to", "(", "device", ")", ",", "renderer", ".", "to", "(", "device", ")", "\n", "\n", "azim", "=", "torch", ".", "linspace", "(", "-", "180", ",", "180", ",", "n_views", ")", "\n", "views", ",", "B", "=", "[", "]", ",", "10", "\n", "for", "k", "in", "range", "(", "(", "n_views", "-", "1", ")", "//", "B", "+", "1", ")", ":", "\n", "# we render by batch of B views to avoid OOM", "\n", "        ", "R_view", "=", "look_at_view_transform", "(", "dist", "=", "1", ",", "elev", "=", "elev", ",", "azim", "=", "azim", "[", "k", "*", "B", ":", "(", "k", "+", "1", ")", "*", "B", "]", ",", "device", "=", "device", ")", "[", "0", "]", "\n", "T_view", "=", "torch", ".", "Tensor", "(", "[", "[", "0.", ",", "0.", ",", "dist", "]", "]", ")", ".", "to", "(", "device", ")", ".", "expand", "(", "len", "(", "R_view", ")", ",", "-", "1", ")", "\n", "if", "eye_light", ":", "\n", "            ", "d", "=", "torch", ".", "Tensor", "(", "[", "[", "0", ",", "0", ",", "-", "1", "]", "]", ")", ".", "to", "(", "device", ")", "@", "R_view", ".", "transpose", "(", "1", ",", "2", ")", "\n", "renderer", ".", "update_lights", "(", "direction", "=", "d", ")", "\n", "", "views", ".", "append", "(", "renderer", "(", "mesh", ".", "extend", "(", "len", "(", "R_view", ")", ")", ",", "R_view", "@", "R", ",", "T_view", "+", "T", ",", "viz_purpose", "=", "True", ")", ".", "clamp", "(", "0", ",", "1", ")", ".", "cpu", "(", ")", ")", "\n", "\n", "", "rec", ",", "alpha", "=", "torch", ".", "cat", "(", "views", ",", "dim", "=", "0", ")", ".", "split", "(", "[", "3", ",", "1", "]", ",", "dim", "=", "1", ")", "\n", "if", "bkg", "is", "not", "None", ":", "\n", "        ", "rec", "=", "rec", "*", "alpha", "+", "(", "1", "-", "alpha", ")", "*", "bkg", ".", "cpu", "(", ")", "\n", "", "return", "rec", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.model.renderer.save_mesh_as_gif": [[322, 327], ["renderer.render_rotated_views", "utils.image.save_gif"], "function", ["home.repos.pwc.inspect_result.monniert_unicorn.model.renderer.render_rotated_views", "home.repos.pwc.inspect_result.monniert_unicorn.utils.image.save_gif"], ["", "def", "save_mesh_as_gif", "(", "mesh", ",", "filename", ",", "img_size", "=", "256", ",", "n_views", "=", "50", ",", "elev", "=", "30", ",", "dist", "=", "2.5", ",", "R", "=", "None", ",", "T", "=", "None", ",", "bkg", "=", "None", ",", "\n", "renderer", "=", "None", ",", "rend_kwargs", "=", "None", ",", "eye_light", "=", "False", ")", ":", "\n", "    ", "imgs", "=", "render_rotated_views", "(", "mesh", ",", "img_size", ",", "n_views", ",", "elev", ",", "dist", ",", "R", "=", "R", ",", "T", "=", "T", ",", "bkg", "=", "bkg", ",", "renderer", "=", "renderer", ",", "\n", "rend_kwargs", "=", "rend_kwargs", ",", "eye_light", "=", "eye_light", ")", "\n", "save_gif", "(", "imgs", ",", "filename", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.monniert_unicorn.model.__init__.DDPCust.__getattr__": [[39, 44], ["super().__getattr__", "getattr"], "methods", ["home.repos.pwc.inspect_result.monniert_unicorn.model.__init__.DDPCust.__getattr__"], ["", "if", "valid_extensions", "is", "not", "None", ":", "\n", "        ", "valid_extensions", "=", "[", "valid_extensions", "]", "if", "isinstance", "(", "valid_extensions", ",", "str", ")", "else", "valid_extensions", "\n", "valid_extensions", "=", "[", "'.{}'", ".", "format", "(", "ext", ")", "if", "not", "ext", ".", "startswith", "(", "'.'", ")", "else", "ext", "for", "ext", "in", "valid_extensions", "]", "\n", "files", "=", "list", "(", "filter", "(", "lambda", "f", ":", "f", ".", "suffix", "in", "valid_extensions", ",", "files", ")", ")", "\n", "\n", "", "return", "sorted", "(", "files", ")", "if", "sort", "else", "files", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.model.__init__.DDPCust.to": [[45, 48], ["__init__.DDPCust.module.to"], "methods", ["home.repos.pwc.inspect_result.monniert_unicorn.model.__init__.DDPCust.to"], ["\n", "\n", "", "def", "load_yaml", "(", "path", ")", ":", "\n", "    ", "path", "=", "path_exists", "(", "path", ")", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.model.__init__.create_model": [[12, 18], ["kwargs.pop", "utils.logger.print_log", "__init__.get_model", "tools.count_parameters"], "function", ["home.repos.pwc.inspect_result.monniert_unicorn.utils.logger.print_log", "home.repos.pwc.inspect_result.monniert_unicorn.model.__init__.get_model", "home.repos.pwc.inspect_result.monniert_unicorn.model.tools.count_parameters"], ["from", "random", "import", "setstate", "as", "rand_set_state", "\n", "import", "torch", "\n", "from", "torch", "import", "manual_seed", "as", "torch_seed", "\n", "from", "torch", "import", "get_rng_state", "as", "torch_get_state", "\n", "from", "torch", "import", "set_rng_state", "as", "torch_set_state", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.model.__init__.get_model": [[20, 24], ["None"], "function", ["None"], ["    ", "path", "=", "Path", "(", "path", ")", "\n", "if", "not", "path", ".", "exists", "(", ")", ":", "\n", "        ", "raise", "FileNotFoundError", "(", "'{} does not exist'", ".", "format", "(", "path", ".", "absolute", "(", ")", ")", ")", "\n", "", "return", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.monniert_unicorn.model.__init__.load_model_from_path": [[26, 36], ["torch.load", "model.load_state_dict", "model.set_cur_epoch", "torch.device", "utils.path_exists", "torch.cuda.is_available", "__init__.get_model"], "function", ["home.repos.pwc.inspect_result.monniert_unicorn.model.unicorn.Unicorn.load_state_dict", "home.repos.pwc.inspect_result.monniert_unicorn.model.unicorn.Unicorn.set_cur_epoch", "home.repos.pwc.inspect_result.monniert_unicorn.utils.__init__.path_exists", "home.repos.pwc.inspect_result.monniert_unicorn.model.__init__.get_model"], ["", "def", "path_mkdir", "(", "path", ")", ":", "\n", "    ", "path", "=", "Path", "(", "path", ")", "\n", "path", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "return", "path", "\n", "\n", "\n", "", "def", "get_files_from", "(", "dir_path", ",", "valid_extensions", "=", "None", ",", "recursive", "=", "False", ",", "sort", "=", "False", ")", ":", "\n", "    ", "path", "=", "path_exists", "(", "dir_path", ")", "\n", "if", "recursive", ":", "\n", "        ", "files", "=", "[", "f", ".", "absolute", "(", ")", "for", "f", "in", "path", ".", "glob", "(", "'**/*'", ")", "if", "f", ".", "is_file", "(", ")", "]", "\n", "", "else", ":", "\n"]]}