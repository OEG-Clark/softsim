{"home.repos.pwc.inspect_result.deeplearning-wisc_gradnorm_ood.None.dataset.DatasetWithMeta.__init__": [[14, 30], ["torch.utils.data.Dataset.__init__", "set", "len", "open", "f.readlines", "line.strip().split", "dataset.DatasetWithMeta.images.append", "dataset.DatasetWithMeta.cls_idx.append", "dataset.DatasetWithMeta.classes.add", "int", "int", "line.strip"], "methods", ["home.repos.pwc.inspect_result.deeplearning-wisc_gradnorm_ood.None.resnetv2.ResNetV2.__init__"], ["    ", "def", "__init__", "(", "self", ",", "root_dir", ",", "meta_file", ",", "transform", "=", "None", ")", ":", "\n", "        ", "super", "(", "DatasetWithMeta", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "root_dir", "=", "root_dir", "\n", "self", ".", "transform", "=", "transform", "\n", "with", "open", "(", "meta_file", ")", "as", "f", ":", "\n", "            ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "", "self", ".", "images", "=", "[", "]", "\n", "self", ".", "cls_idx", "=", "[", "]", "\n", "self", ".", "classes", "=", "set", "(", ")", "\n", "\n", "for", "line", "in", "lines", ":", "\n", "            ", "segs", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "\n", "self", ".", "images", ".", "append", "(", "' '", ".", "join", "(", "segs", "[", ":", "-", "1", "]", ")", ")", "\n", "self", ".", "cls_idx", ".", "append", "(", "int", "(", "segs", "[", "-", "1", "]", ")", ")", "\n", "self", ".", "classes", ".", "add", "(", "int", "(", "segs", "[", "-", "1", "]", ")", ")", "\n", "", "self", ".", "num", "=", "len", "(", "self", ".", "images", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_gradnorm_ood.None.dataset.DatasetWithMeta.__len__": [[31, 33], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_gradnorm_ood.None.dataset.DatasetWithMeta.__getitem__": [[34, 47], ["os.path.join", "dataset.pil_loader", "dataset.DatasetWithMeta.transform", "print", "dataset.DatasetWithMeta.__getitem__", "random.randint", "dataset.DatasetWithMeta.__len__"], "methods", ["home.repos.pwc.inspect_result.deeplearning-wisc_gradnorm_ood.None.dataset.pil_loader", "home.repos.pwc.inspect_result.deeplearning-wisc_gradnorm_ood.None.dataset.DatasetWithMeta.__getitem__", "home.repos.pwc.inspect_result.deeplearning-wisc_gradnorm_ood.None.dataset.DatasetWithMeta.__len__"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "self", ".", "images", "[", "idx", "]", ")", "\n", "\n", "try", ":", "\n", "            ", "img", "=", "pil_loader", "(", "filename", ")", "\n", "", "except", ":", "\n", "            ", "print", "(", "filename", ")", "\n", "return", "self", ".", "__getitem__", "(", "random", ".", "randint", "(", "0", ",", "self", ".", "__len__", "(", ")", "-", "1", ")", ")", "\n", "\n", "# transform", "\n", "", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "return", "img", ",", "self", ".", "cls_idx", "[", "idx", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.deeplearning-wisc_gradnorm_ood.None.dataset.pil_loader": [[7, 11], ["PIL.Image.open", "img.convert.convert"], "function", ["None"], ["def", "pil_loader", "(", "img_str", ",", "str", "=", "'RGB'", ")", ":", "\n", "    ", "with", "Image", ".", "open", "(", "img_str", ")", "as", "img", ":", "\n", "        ", "img", "=", "img", ".", "convert", "(", "str", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_gradnorm_ood.None.resnetv2.StdConv2d.forward": [[12, 18], ["torch.var_mean", "torch.var_mean", "torch.var_mean", "torch.var_mean", "torch.var_mean", "torch.var_mean", "torch.var_mean", "torch.var_mean", "torch.var_mean", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "w", "=", "self", ".", "weight", "\n", "v", ",", "m", "=", "torch", ".", "var_mean", "(", "w", ",", "dim", "=", "[", "1", ",", "2", ",", "3", "]", ",", "keepdim", "=", "True", ",", "unbiased", "=", "False", ")", "\n", "w", "=", "(", "w", "-", "m", ")", "/", "torch", ".", "sqrt", "(", "v", "+", "1e-10", ")", "\n", "return", "F", ".", "conv2d", "(", "x", ",", "w", ",", "self", ".", "bias", ",", "self", ".", "stride", ",", "self", ".", "padding", ",", "\n", "self", ".", "dilation", ",", "self", ".", "groups", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_gradnorm_ood.None.resnetv2.PreActBottleneck.__init__": [[46, 62], ["torch.Module.__init__", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "resnetv2.conv1x1", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "resnetv2.conv3x3", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "resnetv2.conv1x1", "torch.ReLU", "torch.ReLU", "torch.ReLU", "resnetv2.conv1x1"], "methods", ["home.repos.pwc.inspect_result.deeplearning-wisc_gradnorm_ood.None.resnetv2.ResNetV2.__init__", "home.repos.pwc.inspect_result.deeplearning-wisc_gradnorm_ood.None.resnetv2.conv1x1", "home.repos.pwc.inspect_result.deeplearning-wisc_gradnorm_ood.None.resnetv2.conv3x3", "home.repos.pwc.inspect_result.deeplearning-wisc_gradnorm_ood.None.resnetv2.conv1x1", "home.repos.pwc.inspect_result.deeplearning-wisc_gradnorm_ood.None.resnetv2.conv1x1"], ["def", "__init__", "(", "self", ",", "cin", ",", "cout", "=", "None", ",", "cmid", "=", "None", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "cout", "=", "cout", "or", "cin", "\n", "cmid", "=", "cmid", "or", "cout", "//", "4", "\n", "\n", "self", ".", "gn1", "=", "nn", ".", "GroupNorm", "(", "32", ",", "cin", ")", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "cin", ",", "cmid", ")", "\n", "self", ".", "gn2", "=", "nn", ".", "GroupNorm", "(", "32", ",", "cmid", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "cmid", ",", "cmid", ",", "stride", ")", "# Original code has it on conv1!!", "\n", "self", ".", "gn3", "=", "nn", ".", "GroupNorm", "(", "32", ",", "cmid", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "cmid", ",", "cout", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "if", "(", "stride", "!=", "1", "or", "cin", "!=", "cout", ")", ":", "\n", "# Projection also with pre-activation according to paper.", "\n", "            ", "self", ".", "downsample", "=", "conv1x1", "(", "cin", ",", "cout", ",", "stride", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_gradnorm_ood.None.resnetv2.PreActBottleneck.forward": [[63, 77], ["resnetv2.PreActBottleneck.relu", "hasattr", "resnetv2.PreActBottleneck.conv1", "resnetv2.PreActBottleneck.conv2", "resnetv2.PreActBottleneck.conv3", "resnetv2.PreActBottleneck.gn1", "resnetv2.PreActBottleneck.downsample", "resnetv2.PreActBottleneck.relu", "resnetv2.PreActBottleneck.relu", "resnetv2.PreActBottleneck.gn2", "resnetv2.PreActBottleneck.gn3"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "relu", "(", "self", ".", "gn1", "(", "x", ")", ")", "\n", "\n", "# Residual branch", "\n", "residual", "=", "x", "\n", "if", "hasattr", "(", "self", ",", "'downsample'", ")", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "out", ")", "\n", "\n", "# Unit's branch", "\n", "", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "self", ".", "relu", "(", "self", ".", "gn2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "conv3", "(", "self", ".", "relu", "(", "self", ".", "gn3", "(", "out", ")", ")", ")", "\n", "\n", "return", "out", "+", "residual", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_gradnorm_ood.None.resnetv2.PreActBottleneck.load_from": [[78, 93], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "resnetv2.PreActBottleneck.conv1.weight.copy_", "resnetv2.PreActBottleneck.conv2.weight.copy_", "resnetv2.PreActBottleneck.conv3.weight.copy_", "resnetv2.PreActBottleneck.gn1.weight.copy_", "resnetv2.PreActBottleneck.gn2.weight.copy_", "resnetv2.PreActBottleneck.gn3.weight.copy_", "resnetv2.PreActBottleneck.gn1.bias.copy_", "resnetv2.PreActBottleneck.gn2.bias.copy_", "resnetv2.PreActBottleneck.gn3.bias.copy_", "hasattr", "resnetv2.tf2th", "resnetv2.tf2th", "resnetv2.tf2th", "resnetv2.tf2th", "resnetv2.tf2th", "resnetv2.tf2th", "resnetv2.tf2th", "resnetv2.tf2th", "resnetv2.tf2th", "resnetv2.PreActBottleneck.downsample.weight.copy_", "resnetv2.tf2th"], "methods", ["home.repos.pwc.inspect_result.deeplearning-wisc_gradnorm_ood.None.resnetv2.tf2th", "home.repos.pwc.inspect_result.deeplearning-wisc_gradnorm_ood.None.resnetv2.tf2th", "home.repos.pwc.inspect_result.deeplearning-wisc_gradnorm_ood.None.resnetv2.tf2th", "home.repos.pwc.inspect_result.deeplearning-wisc_gradnorm_ood.None.resnetv2.tf2th", "home.repos.pwc.inspect_result.deeplearning-wisc_gradnorm_ood.None.resnetv2.tf2th", "home.repos.pwc.inspect_result.deeplearning-wisc_gradnorm_ood.None.resnetv2.tf2th", "home.repos.pwc.inspect_result.deeplearning-wisc_gradnorm_ood.None.resnetv2.tf2th", "home.repos.pwc.inspect_result.deeplearning-wisc_gradnorm_ood.None.resnetv2.tf2th", "home.repos.pwc.inspect_result.deeplearning-wisc_gradnorm_ood.None.resnetv2.tf2th", "home.repos.pwc.inspect_result.deeplearning-wisc_gradnorm_ood.None.resnetv2.tf2th"], ["", "def", "load_from", "(", "self", ",", "weights", ",", "prefix", "=", "''", ")", ":", "\n", "        ", "convname", "=", "'standardized_conv2d'", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "conv1", ".", "weight", ".", "copy_", "(", "tf2th", "(", "weights", "[", "f'{prefix}a/{convname}/kernel'", "]", ")", ")", "\n", "self", ".", "conv2", ".", "weight", ".", "copy_", "(", "tf2th", "(", "weights", "[", "f'{prefix}b/{convname}/kernel'", "]", ")", ")", "\n", "self", ".", "conv3", ".", "weight", ".", "copy_", "(", "tf2th", "(", "weights", "[", "f'{prefix}c/{convname}/kernel'", "]", ")", ")", "\n", "self", ".", "gn1", ".", "weight", ".", "copy_", "(", "tf2th", "(", "weights", "[", "f'{prefix}a/group_norm/gamma'", "]", ")", ")", "\n", "self", ".", "gn2", ".", "weight", ".", "copy_", "(", "tf2th", "(", "weights", "[", "f'{prefix}b/group_norm/gamma'", "]", ")", ")", "\n", "self", ".", "gn3", ".", "weight", ".", "copy_", "(", "tf2th", "(", "weights", "[", "f'{prefix}c/group_norm/gamma'", "]", ")", ")", "\n", "self", ".", "gn1", ".", "bias", ".", "copy_", "(", "tf2th", "(", "weights", "[", "f'{prefix}a/group_norm/beta'", "]", ")", ")", "\n", "self", ".", "gn2", ".", "bias", ".", "copy_", "(", "tf2th", "(", "weights", "[", "f'{prefix}b/group_norm/beta'", "]", ")", ")", "\n", "self", ".", "gn3", ".", "bias", ".", "copy_", "(", "tf2th", "(", "weights", "[", "f'{prefix}c/group_norm/beta'", "]", ")", ")", "\n", "if", "hasattr", "(", "self", ",", "'downsample'", ")", ":", "\n", "                ", "w", "=", "weights", "[", "f'{prefix}a/proj/{convname}/kernel'", "]", "\n", "self", ".", "downsample", ".", "weight", ".", "copy_", "(", "tf2th", "(", "w", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_gradnorm_ood.None.resnetv2.ResNetV2.__init__": [[98, 143], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "collections.OrderedDict", "collections.OrderedDict", "collections.OrderedDict", "collections.OrderedDict", "resnetv2.StdConv2d", "torch.ConstantPad2d", "torch.ConstantPad2d", "torch.ConstantPad2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "collections.OrderedDict", "collections.OrderedDict", "collections.OrderedDict", "collections.OrderedDict", "resnetv2.PreActBottleneck", "resnetv2.PreActBottleneck", "range", "resnetv2.PreActBottleneck", "resnetv2.PreActBottleneck", "range", "resnetv2.PreActBottleneck", "resnetv2.PreActBottleneck", "range", "resnetv2.PreActBottleneck", "resnetv2.PreActBottleneck", "range"], "methods", ["home.repos.pwc.inspect_result.deeplearning-wisc_gradnorm_ood.None.resnetv2.ResNetV2.__init__"], ["def", "__init__", "(", "self", ",", "block_units", ",", "width_factor", ",", "head_size", "=", "21843", ",", "zero_head", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "wf", "=", "width_factor", "# shortcut 'cause we'll use it a lot.", "\n", "\n", "self", ".", "root", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "\n", "(", "'conv'", ",", "StdConv2d", "(", "3", ",", "64", "*", "wf", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", ")", ")", ",", "\n", "(", "'pad'", ",", "nn", ".", "ConstantPad2d", "(", "1", ",", "0", ")", ")", ",", "\n", "(", "'pool'", ",", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", ")", ",", "\n", "# The following is subtly not the same!", "\n", "# ('pool', nn.MaxPool2d(kernel_size=3, stride=2, padding=1)),", "\n", "]", ")", ")", "\n", "\n", "self", ".", "body", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "\n", "(", "'block1'", ",", "nn", ".", "Sequential", "(", "OrderedDict", "(", "\n", "[", "(", "'unit01'", ",", "PreActBottleneck", "(", "cin", "=", "64", "*", "wf", ",", "cout", "=", "256", "*", "wf", ",", "cmid", "=", "64", "*", "wf", ")", ")", "]", "+", "\n", "[", "(", "f'unit{i:02d}'", ",", "PreActBottleneck", "(", "cin", "=", "256", "*", "wf", ",", "cout", "=", "256", "*", "wf", ",", "cmid", "=", "64", "*", "wf", ")", ")", "for", "i", "in", "\n", "range", "(", "2", ",", "block_units", "[", "0", "]", "+", "1", ")", "]", ",", "\n", ")", ")", ")", ",", "\n", "(", "'block2'", ",", "nn", ".", "Sequential", "(", "OrderedDict", "(", "\n", "[", "(", "'unit01'", ",", "PreActBottleneck", "(", "cin", "=", "256", "*", "wf", ",", "cout", "=", "512", "*", "wf", ",", "cmid", "=", "128", "*", "wf", ",", "stride", "=", "2", ")", ")", "]", "+", "\n", "[", "(", "f'unit{i:02d}'", ",", "PreActBottleneck", "(", "cin", "=", "512", "*", "wf", ",", "cout", "=", "512", "*", "wf", ",", "cmid", "=", "128", "*", "wf", ")", ")", "for", "i", "in", "\n", "range", "(", "2", ",", "block_units", "[", "1", "]", "+", "1", ")", "]", ",", "\n", ")", ")", ")", ",", "\n", "(", "'block3'", ",", "nn", ".", "Sequential", "(", "OrderedDict", "(", "\n", "[", "(", "'unit01'", ",", "PreActBottleneck", "(", "cin", "=", "512", "*", "wf", ",", "cout", "=", "1024", "*", "wf", ",", "cmid", "=", "256", "*", "wf", ",", "stride", "=", "2", ")", ")", "]", "+", "\n", "[", "(", "f'unit{i:02d}'", ",", "PreActBottleneck", "(", "cin", "=", "1024", "*", "wf", ",", "cout", "=", "1024", "*", "wf", ",", "cmid", "=", "256", "*", "wf", ")", ")", "for", "i", "in", "\n", "range", "(", "2", ",", "block_units", "[", "2", "]", "+", "1", ")", "]", ",", "\n", ")", ")", ")", ",", "\n", "(", "'block4'", ",", "nn", ".", "Sequential", "(", "OrderedDict", "(", "\n", "[", "(", "'unit01'", ",", "PreActBottleneck", "(", "cin", "=", "1024", "*", "wf", ",", "cout", "=", "2048", "*", "wf", ",", "cmid", "=", "512", "*", "wf", ",", "stride", "=", "2", ")", ")", "]", "+", "\n", "[", "(", "f'unit{i:02d}'", ",", "PreActBottleneck", "(", "cin", "=", "2048", "*", "wf", ",", "cout", "=", "2048", "*", "wf", ",", "cmid", "=", "512", "*", "wf", ")", ")", "for", "i", "in", "\n", "range", "(", "2", ",", "block_units", "[", "3", "]", "+", "1", ")", "]", ",", "\n", ")", ")", ")", ",", "\n", "]", ")", ")", "\n", "\n", "self", ".", "zero_head", "=", "zero_head", "\n", "\n", "self", ".", "before_head", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "\n", "(", "'gn'", ",", "nn", ".", "GroupNorm", "(", "32", ",", "2048", "*", "wf", ")", ")", ",", "\n", "(", "'relu'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "(", "'avg'", ",", "nn", ".", "AdaptiveAvgPool2d", "(", "output_size", "=", "1", ")", ")", ",", "\n", "]", ")", ")", "\n", "\n", "self", ".", "head", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "\n", "(", "'conv'", ",", "nn", ".", "Conv2d", "(", "2048", "*", "wf", ",", "head_size", ",", "kernel_size", "=", "1", ",", "bias", "=", "True", ")", ")", ",", "\n", "]", ")", ")", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_gradnorm_ood.None.resnetv2.ResNetV2.intermediate_forward": [[145, 177], ["resnetv2.ResNetV2.root", "resnetv2.ResNetV2.root", "out_list.append", "resnetv2.ResNetV2.body.block1", "out_list.append", "resnetv2.ResNetV2.body.block2", "out_list.append", "resnetv2.ResNetV2.body.block3", "out_list.append", "resnetv2.ResNetV2.body.block4", "out_list.append", "resnetv2.ResNetV2.head", "resnetv2.ResNetV2.body.block1", "resnetv2.ResNetV2.before_head", "resnetv2.ResNetV2.body.block1", "resnetv2.ResNetV2.body.block2", "resnetv2.ResNetV2.body.block1", "resnetv2.ResNetV2.body.block2", "resnetv2.ResNetV2.body.block3", "resnetv2.ResNetV2.body.block1", "resnetv2.ResNetV2.body.block2", "resnetv2.ResNetV2.body.block3", "resnetv2.ResNetV2.body.block4"], "methods", ["None"], ["", "def", "intermediate_forward", "(", "self", ",", "x", ",", "layer_index", "=", "None", ")", ":", "\n", "        ", "if", "layer_index", "==", "'all'", ":", "\n", "            ", "out_list", "=", "[", "]", "\n", "out", "=", "self", ".", "root", "(", "x", ")", "\n", "out_list", ".", "append", "(", "out", ")", "\n", "out", "=", "self", ".", "body", ".", "block1", "(", "out", ")", "\n", "out_list", ".", "append", "(", "out", ")", "\n", "out", "=", "self", ".", "body", ".", "block2", "(", "out", ")", "\n", "out_list", ".", "append", "(", "out", ")", "\n", "out", "=", "self", ".", "body", ".", "block3", "(", "out", ")", "\n", "out_list", ".", "append", "(", "out", ")", "\n", "out", "=", "self", ".", "body", ".", "block4", "(", "out", ")", "\n", "out_list", ".", "append", "(", "out", ")", "\n", "out", "=", "self", ".", "head", "(", "self", ".", "before_head", "(", "out", ")", ")", "\n", "return", "out", "[", "...", ",", "0", ",", "0", "]", ",", "out_list", "\n", "\n", "", "out", "=", "self", ".", "root", "(", "x", ")", "\n", "if", "layer_index", "==", "1", ":", "\n", "            ", "out", "=", "self", ".", "body", ".", "block1", "(", "out", ")", "\n", "", "elif", "layer_index", "==", "2", ":", "\n", "            ", "out", "=", "self", ".", "body", ".", "block1", "(", "out", ")", "\n", "out", "=", "self", ".", "body", ".", "block2", "(", "out", ")", "\n", "", "elif", "layer_index", "==", "3", ":", "\n", "            ", "out", "=", "self", ".", "body", ".", "block1", "(", "out", ")", "\n", "out", "=", "self", ".", "body", ".", "block2", "(", "out", ")", "\n", "out", "=", "self", ".", "body", ".", "block3", "(", "out", ")", "\n", "", "elif", "layer_index", "==", "4", ":", "\n", "            ", "out", "=", "self", ".", "body", ".", "block1", "(", "out", ")", "\n", "out", "=", "self", ".", "body", ".", "block2", "(", "out", ")", "\n", "out", "=", "self", ".", "body", ".", "block3", "(", "out", ")", "\n", "out", "=", "self", ".", "body", ".", "block4", "(", "out", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_gradnorm_ood.None.resnetv2.ResNetV2.forward": [[178, 186], ["resnetv2.ResNetV2.head", "resnetv2.ResNetV2.intermediate_forward", "resnetv2.ResNetV2.before_head", "resnetv2.ResNetV2.body", "resnetv2.ResNetV2.root"], "methods", ["home.repos.pwc.inspect_result.deeplearning-wisc_gradnorm_ood.None.resnetv2.ResNetV2.intermediate_forward"], ["", "def", "forward", "(", "self", ",", "x", ",", "layer_index", "=", "None", ")", ":", "\n", "        ", "if", "layer_index", "is", "not", "None", ":", "\n", "            ", "return", "self", ".", "intermediate_forward", "(", "x", ",", "layer_index", ")", "\n", "\n", "", "x", "=", "self", ".", "head", "(", "self", ".", "before_head", "(", "self", ".", "body", "(", "self", ".", "root", "(", "x", ")", ")", ")", ")", "\n", "\n", "assert", "x", ".", "shape", "[", "-", "2", ":", "]", "==", "(", "1", ",", "1", ")", "# We should have no spatial shape left.", "\n", "return", "x", "[", "...", ",", "0", ",", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_gradnorm_ood.None.resnetv2.ResNetV2.load_state_dict_custom": [[187, 192], ["state_dict.items", "resnetv2.ResNetV2.load_state_dict", "len"], "methods", ["None"], ["", "def", "load_state_dict_custom", "(", "self", ",", "state_dict", ")", ":", "\n", "        ", "state_dict_new", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "            ", "state_dict_new", "[", "k", "[", "len", "(", "\"module.\"", ")", ":", "]", "]", "=", "v", "\n", "", "self", ".", "load_state_dict", "(", "state_dict_new", ",", "strict", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_gradnorm_ood.None.resnetv2.ResNetV2.load_from": [[193, 211], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "resnetv2.ResNetV2.root.conv.weight.copy_", "resnetv2.ResNetV2.before_head.gn.weight.copy_", "resnetv2.ResNetV2.before_head.gn.bias.copy_", "resnetv2.ResNetV2.body.named_children", "resnetv2.tf2th", "resnetv2.tf2th", "resnetv2.tf2th", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "resnetv2.ResNetV2.head.conv.weight.copy_", "resnetv2.ResNetV2.head.conv.bias.copy_", "block.named_children", "resnetv2.tf2th", "resnetv2.tf2th", "unit.load_from"], "methods", ["home.repos.pwc.inspect_result.deeplearning-wisc_gradnorm_ood.None.resnetv2.tf2th", "home.repos.pwc.inspect_result.deeplearning-wisc_gradnorm_ood.None.resnetv2.tf2th", "home.repos.pwc.inspect_result.deeplearning-wisc_gradnorm_ood.None.resnetv2.tf2th", "home.repos.pwc.inspect_result.deeplearning-wisc_gradnorm_ood.None.resnetv2.tf2th", "home.repos.pwc.inspect_result.deeplearning-wisc_gradnorm_ood.None.resnetv2.tf2th", "home.repos.pwc.inspect_result.deeplearning-wisc_gradnorm_ood.None.resnetv2.ResNetV2.load_from"], ["", "def", "load_from", "(", "self", ",", "weights", ",", "prefix", "=", "'resnet/'", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "root", ".", "conv", ".", "weight", ".", "copy_", "(", "\n", "tf2th", "(", "weights", "[", "f'{prefix}root_block/standardized_conv2d/kernel'", "]", ")", ")", "# pylint: disable=line-too-long", "\n", "self", ".", "before_head", ".", "gn", ".", "weight", ".", "copy_", "(", "tf2th", "(", "weights", "[", "f'{prefix}group_norm/gamma'", "]", ")", ")", "\n", "self", ".", "before_head", ".", "gn", ".", "bias", ".", "copy_", "(", "tf2th", "(", "weights", "[", "f'{prefix}group_norm/beta'", "]", ")", ")", "\n", "\n", "if", "self", ".", "zero_head", ":", "\n", "                ", "nn", ".", "init", ".", "zeros_", "(", "self", ".", "head", ".", "conv", ".", "weight", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "self", ".", "head", ".", "conv", ".", "bias", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "head", ".", "conv", ".", "weight", ".", "copy_", "(", "\n", "tf2th", "(", "weights", "[", "f'{prefix}head/conv2d/kernel'", "]", ")", ")", "# pylint: disable=line-too-long", "\n", "self", ".", "head", ".", "conv", ".", "bias", ".", "copy_", "(", "tf2th", "(", "weights", "[", "f'{prefix}head/conv2d/bias'", "]", ")", ")", "\n", "\n", "", "for", "bname", ",", "block", "in", "self", ".", "body", ".", "named_children", "(", ")", ":", "\n", "                ", "for", "uname", ",", "unit", "in", "block", ".", "named_children", "(", ")", ":", "\n", "                    ", "unit", ".", "load_from", "(", "weights", ",", "prefix", "=", "f'{prefix}{bname}/{uname}/'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_gradnorm_ood.None.resnetv2.conv3x3": [[20, 23], ["resnetv2.StdConv2d"], "function", ["None"], ["", "", "def", "conv3x3", "(", "cin", ",", "cout", ",", "stride", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ":", "\n", "    ", "return", "StdConv2d", "(", "cin", ",", "cout", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "bias", ",", "groups", "=", "groups", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_gradnorm_ood.None.resnetv2.conv1x1": [[25, 28], ["resnetv2.StdConv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "cin", ",", "cout", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ":", "\n", "    ", "return", "StdConv2d", "(", "cin", ",", "cout", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "0", ",", "bias", "=", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_gradnorm_ood.None.resnetv2.tf2th": [[30, 35], ["torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "conv_weights.transpose.transpose"], "function", ["None"], ["", "def", "tf2th", "(", "conv_weights", ")", ":", "\n", "    ", "\"\"\"Possibly convert HWIO to OIHW.\"\"\"", "\n", "if", "conv_weights", ".", "ndim", "==", "4", ":", "\n", "        ", "conv_weights", "=", "conv_weights", ".", "transpose", "(", "[", "3", ",", "2", ",", "0", ",", "1", "]", ")", "\n", "", "return", "torch", ".", "from_numpy", "(", "conv_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_gradnorm_ood.None.tune_mahalanobis_hyperparameter.mktrainval": [[22, 46], ["torchvision.transforms.Compose", "dataset.DatasetWithMeta", "dataset.DatasetWithMeta", "logger.info", "logger.info", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "len", "len"], "function", ["None"], ["def", "mktrainval", "(", "args", ",", "logger", ")", ":", "\n", "    ", "\"\"\"Returns train and validation datasets.\"\"\"", "\n", "crop", "=", "480", "\n", "\n", "val_tx", "=", "tv", ".", "transforms", ".", "Compose", "(", "[", "\n", "tv", ".", "transforms", ".", "Resize", "(", "(", "crop", ",", "crop", ")", ")", ",", "\n", "tv", ".", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "tv", ".", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", ",", "\n", "]", ")", "\n", "\n", "train_set", "=", "DatasetWithMeta", "(", "args", ".", "datadir", ",", "args", ".", "train_list", ",", "val_tx", ")", "\n", "valid_set", "=", "DatasetWithMeta", "(", "args", ".", "datadir", ",", "args", ".", "val_list", ",", "val_tx", ")", "\n", "\n", "logger", ".", "info", "(", "f\"Using a training set with {len(train_set)} images.\"", ")", "\n", "logger", ".", "info", "(", "f\"Using a validation set with {len(valid_set)} images.\"", ")", "\n", "\n", "valid_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "valid_set", ",", "batch_size", "=", "args", ".", "batch", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ",", "drop_last", "=", "False", ")", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_set", ",", "batch_size", "=", "args", ".", "batch", ",", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ",", "drop_last", "=", "False", ")", "\n", "\n", "return", "train_set", ",", "valid_set", ",", "train_loader", ",", "valid_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_gradnorm_ood.None.tune_mahalanobis_hyperparameter.tune_mahalanobis_hyperparams": [[48, 264], ["os.path.join", "model.eval", "torch.rand", "torch.rand", "torch.autograd.Variable().cuda", "len", "numpy.empty", "logger.info", "os.path.join", "numpy.load", "logger.info", "logger.info", "torch.CrossEntropyLoss().cuda", "range", "range", "logger.info", "torch.tensor.extend", "torch.tensor.extend", "torch.tensor.extend", "torch.tensor.extend", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "logger.info", "logger.info", "os.path.exists", "os.makedirs", "model", "out.size", "os.path.exists", "utils.mahalanobis_lib.sample_estimator", "numpy.save", "s.cuda", "p.cuda", "train_lr_data[].cuda.numpy", "target.cuda.numpy", "zip", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "train_lr_data[].cuda.cuda", "target.cuda.cuda", "model.zero_grad", "torch.autograd.Variable().cuda", "model", "nn.CrossEntropyLoss().cuda.", "criterion.backward", "torch.ge", "torch.ge", "torch.add", "torch.add", "torch.clamp", "torch.clamp", "train_out.extend", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "train_lr_data[].cuda.cuda", "target.cuda.cuda", "model.zero_grad", "torch.autograd.Variable().cuda", "model", "nn.CrossEntropyLoss().cuda.", "criterion.backward", "torch.ge", "torch.ge", "torch.add", "torch.add", "torch.clamp", "torch.clamp", "val_out.extend", "numpy.zeros", "numpy.ones", "range", "numpy.asarray", "sklearn.linear_model.LogisticRegressionCV().fit", "logger.info", "time.time", "open", "open", "logger.info", "range", "time.time", "logger.info", "range", "open.close", "open.close", "numpy.array().reshape", "numpy.array().reshape", "logger.info", "logger.info", "utils.test_utils.get_measures", "torch.autograd.Variable", "numpy.array", "len", "len", "torch.CrossEntropyLoss", "int", "torch.autograd.Variable", "torch.autograd.Variable", "torch.clamp.cpu().numpy", "int", "torch.autograd.Variable", "torch.autograd.Variable", "torch.clamp.cpu().numpy", "len", "len", "train_lr_data[].cuda", "utils.mahalanobis_lib.get_Mahalanobis_score", "np.asarray.extend", "os.path.join", "os.path.join", "torch.tensor().cuda", "torch.tensor().cuda", "utils.mahalanobis_lib.get_Mahalanobis_score", "np.array().reshape.extend", "range", "print", "time.time", "torch.tensor().cuda", "torch.tensor().cuda", "utils.mahalanobis_lib.get_Mahalanobis_score", "np.array().reshape.extend", "range", "logger.info", "time.time", "train_in.append", "train_in_label.append", "torch.autograd.Variable", "torch.ge.float", "torch.autograd.Variable", "torch.ge.float", "int", "sklearn.linear_model.LogisticRegressionCV", "int", "open.write", "int", "open.write", "numpy.array", "numpy.array", "val_in.append", "val_in_label.append", "min", "min", "torch.clamp.cpu", "min", "min", "torch.clamp.cpu", "numpy.floor", "torch.tensor", "torch.tensor", "LogisticRegressionCV().fit.predict_proba", "torch.tensor", "torch.tensor", "LogisticRegressionCV().fit.predict_proba", "time.time", "time.time", "torch.tensor.size", "min", "min"], "function", ["home.repos.pwc.inspect_result.deeplearning-wisc_gradnorm_ood.utils.mahalanobis_lib.sample_estimator", "home.repos.pwc.inspect_result.deeplearning-wisc_gradnorm_ood.utils.test_utils.get_measures", "home.repos.pwc.inspect_result.deeplearning-wisc_gradnorm_ood.utils.mahalanobis_lib.get_Mahalanobis_score", "home.repos.pwc.inspect_result.deeplearning-wisc_gradnorm_ood.utils.mahalanobis_lib.get_Mahalanobis_score", "home.repos.pwc.inspect_result.deeplearning-wisc_gradnorm_ood.utils.mahalanobis_lib.get_Mahalanobis_score"], ["", "def", "tune_mahalanobis_hyperparams", "(", "args", ",", "model", ",", "num_classes", ",", "train_loader", ",", "val_loader", ",", "logger", ")", ":", "\n", "\n", "    ", "save_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "logdir", ",", "args", ".", "name", ",", "'tmp'", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_dir", ")", "\n", "\n", "", "model", ".", "eval", "(", ")", "\n", "\n", "# set information about feature extaction", "\n", "temp_x", "=", "torch", ".", "rand", "(", "2", ",", "3", ",", "480", ",", "480", ")", "\n", "temp_x", "=", "Variable", "(", "temp_x", ")", ".", "cuda", "(", ")", "\n", "temp_list", "=", "model", "(", "x", "=", "temp_x", ",", "layer_index", "=", "'all'", ")", "[", "1", "]", "\n", "num_output", "=", "len", "(", "temp_list", ")", "\n", "feature_list", "=", "np", ".", "empty", "(", "num_output", ")", "\n", "count", "=", "0", "\n", "for", "out", "in", "temp_list", ":", "\n", "        ", "feature_list", "[", "count", "]", "=", "out", ".", "size", "(", "1", ")", "\n", "count", "+=", "1", "\n", "\n", "", "logger", ".", "info", "(", "'get sample mean and covariance'", ")", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'mean_and_precision.npy'", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "filename", ")", ":", "\n", "        ", "sample_mean", ",", "precision", "=", "sample_estimator", "(", "model", ",", "num_classes", ",", "feature_list", ",", "train_loader", ")", "\n", "np", ".", "save", "(", "filename", ",", "np", ".", "array", "(", "[", "sample_mean", ",", "precision", "]", ")", ")", "\n", "\n", "", "sample_mean", ",", "precision", "=", "np", ".", "load", "(", "filename", ",", "allow_pickle", "=", "True", ")", "\n", "sample_mean", "=", "[", "s", ".", "cuda", "(", ")", "for", "s", "in", "sample_mean", "]", "\n", "precision", "=", "[", "p", ".", "cuda", "(", ")", "for", "p", "in", "precision", "]", "\n", "\n", "logger", ".", "info", "(", "'train logistic regression model'", ")", "\n", "m", "=", "500", "\n", "\n", "train_in", "=", "[", "]", "\n", "train_in_label", "=", "[", "]", "\n", "train_out", "=", "[", "]", "\n", "\n", "val_in", "=", "[", "]", "\n", "val_in_label", "=", "[", "]", "\n", "val_out", "=", "[", "]", "\n", "\n", "cnt", "=", "0", "\n", "for", "data", ",", "target", "in", "val_loader", ":", "\n", "        ", "data", "=", "data", ".", "numpy", "(", ")", "\n", "target", "=", "target", ".", "numpy", "(", ")", "\n", "for", "x", ",", "y", "in", "zip", "(", "data", ",", "target", ")", ":", "\n", "            ", "cnt", "+=", "1", "\n", "if", "cnt", "<=", "m", ":", "\n", "                ", "train_in", ".", "append", "(", "x", ")", "\n", "train_in_label", ".", "append", "(", "y", ")", "\n", "", "elif", "cnt", "<=", "2", "*", "m", ":", "\n", "                ", "val_in", ".", "append", "(", "x", ")", "\n", "val_in_label", ".", "append", "(", "y", ")", "\n", "\n", "", "if", "cnt", "==", "2", "*", "m", ":", "\n", "                ", "break", "\n", "", "", "if", "cnt", "==", "2", "*", "m", ":", "\n", "            ", "break", "\n", "\n", "", "", "logger", ".", "info", "(", "'In {} {}'", ".", "format", "(", "len", "(", "train_in", ")", ",", "len", "(", "val_in", ")", ")", ")", "\n", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "cuda", "(", ")", "\n", "adv_noise", "=", "0.05", "\n", "\n", "args", ".", "batch_size", "=", "args", ".", "batch", "\n", "for", "i", "in", "range", "(", "int", "(", "m", "/", "args", ".", "batch_size", ")", "+", "1", ")", ":", "\n", "        ", "if", "i", "*", "args", ".", "batch_size", ">=", "m", ":", "\n", "            ", "break", "\n", "", "data", "=", "torch", ".", "tensor", "(", "train_in", "[", "i", "*", "args", ".", "batch_size", ":", "min", "(", "(", "i", "+", "1", ")", "*", "args", ".", "batch_size", ",", "m", ")", "]", ")", "\n", "target", "=", "torch", ".", "tensor", "(", "train_in_label", "[", "i", "*", "args", ".", "batch_size", ":", "min", "(", "(", "i", "+", "1", ")", "*", "args", ".", "batch_size", ",", "m", ")", "]", ")", "\n", "data", "=", "data", ".", "cuda", "(", ")", "\n", "target", "=", "target", ".", "cuda", "(", ")", "\n", "data", ",", "target", "=", "Variable", "(", "data", ",", "volatile", "=", "True", ")", ",", "Variable", "(", "target", ")", "\n", "# output = model(data)", "\n", "\n", "model", ".", "zero_grad", "(", ")", "\n", "inputs", "=", "Variable", "(", "data", ".", "data", ",", "requires_grad", "=", "True", ")", ".", "cuda", "(", ")", "\n", "output", "=", "model", "(", "inputs", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "gradient", "=", "torch", ".", "ge", "(", "inputs", ".", "grad", ".", "data", ",", "0", ")", "\n", "gradient", "=", "(", "gradient", ".", "float", "(", ")", "-", "0.5", ")", "*", "2", "\n", "\n", "adv_data", "=", "torch", ".", "add", "(", "input", "=", "inputs", ".", "data", ",", "other", "=", "gradient", ",", "alpha", "=", "adv_noise", ")", "\n", "adv_data", "=", "torch", ".", "clamp", "(", "adv_data", ",", "0.0", ",", "1.0", ")", "\n", "\n", "train_out", ".", "extend", "(", "adv_data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "int", "(", "m", "/", "args", ".", "batch_size", ")", "+", "1", ")", ":", "\n", "        ", "if", "i", "*", "args", ".", "batch_size", ">=", "m", ":", "\n", "            ", "break", "\n", "", "data", "=", "torch", ".", "tensor", "(", "val_in", "[", "i", "*", "args", ".", "batch_size", ":", "min", "(", "(", "i", "+", "1", ")", "*", "args", ".", "batch_size", ",", "m", ")", "]", ")", "\n", "target", "=", "torch", ".", "tensor", "(", "val_in_label", "[", "i", "*", "args", ".", "batch_size", ":", "min", "(", "(", "i", "+", "1", ")", "*", "args", ".", "batch_size", ",", "m", ")", "]", ")", "\n", "data", "=", "data", ".", "cuda", "(", ")", "\n", "target", "=", "target", ".", "cuda", "(", ")", "\n", "data", ",", "target", "=", "Variable", "(", "data", ",", "volatile", "=", "True", ")", ",", "Variable", "(", "target", ")", "\n", "# output = model(data)", "\n", "\n", "model", ".", "zero_grad", "(", ")", "\n", "inputs", "=", "Variable", "(", "data", ".", "data", ",", "requires_grad", "=", "True", ")", ".", "cuda", "(", ")", "\n", "output", "=", "model", "(", "inputs", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "gradient", "=", "torch", ".", "ge", "(", "inputs", ".", "grad", ".", "data", ",", "0", ")", "\n", "gradient", "=", "(", "gradient", ".", "float", "(", ")", "-", "0.5", ")", "*", "2", "\n", "\n", "adv_data", "=", "torch", ".", "add", "(", "input", "=", "inputs", ".", "data", ",", "other", "=", "gradient", ",", "alpha", "=", "adv_noise", ")", "\n", "adv_data", "=", "torch", ".", "clamp", "(", "adv_data", ",", "0.0", ",", "1.0", ")", "\n", "\n", "val_out", ".", "extend", "(", "adv_data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "", "logger", ".", "info", "(", "'Out {} {}'", ".", "format", "(", "len", "(", "train_out", ")", ",", "len", "(", "val_out", ")", ")", ")", "\n", "\n", "train_lr_data", "=", "[", "]", "\n", "train_lr_label", "=", "[", "]", "\n", "train_lr_data", ".", "extend", "(", "train_in", ")", "\n", "train_lr_label", ".", "extend", "(", "np", ".", "zeros", "(", "m", ")", ")", "\n", "train_lr_data", ".", "extend", "(", "train_out", ")", "\n", "train_lr_label", ".", "extend", "(", "np", ".", "ones", "(", "m", ")", ")", "\n", "train_lr_data", "=", "torch", ".", "tensor", "(", "train_lr_data", ")", "\n", "train_lr_label", "=", "torch", ".", "tensor", "(", "train_lr_label", ")", "\n", "\n", "best_fpr", "=", "1.1", "\n", "best_magnitude", "=", "0.0", "\n", "\n", "for", "magnitude", "in", "[", "0.0", ",", "0.01", ",", "0.005", ",", "0.002", ",", "0.0014", ",", "0.001", ",", "0.0005", "]", ":", "\n", "        ", "train_lr_Mahalanobis", "=", "[", "]", "\n", "total", "=", "0", "\n", "for", "data_index", "in", "range", "(", "int", "(", "np", ".", "floor", "(", "train_lr_data", ".", "size", "(", "0", ")", "/", "args", ".", "batch_size", ")", ")", "+", "1", ")", ":", "\n", "            ", "if", "total", ">=", "2", "*", "m", ":", "\n", "                ", "break", "\n", "", "data", "=", "train_lr_data", "[", "total", ":", "total", "+", "args", ".", "batch_size", "]", ".", "cuda", "(", ")", "\n", "total", "+=", "args", ".", "batch_size", "\n", "Mahalanobis_scores", "=", "get_Mahalanobis_score", "(", "data", ",", "model", ",", "num_classes", ",", "sample_mean", ",", "precision", ",", "num_output", ",", "magnitude", ")", "\n", "train_lr_Mahalanobis", ".", "extend", "(", "Mahalanobis_scores", ")", "\n", "\n", "", "train_lr_Mahalanobis", "=", "np", ".", "asarray", "(", "train_lr_Mahalanobis", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "regressor", "=", "LogisticRegressionCV", "(", "n_jobs", "=", "-", "1", ")", ".", "fit", "(", "train_lr_Mahalanobis", ",", "train_lr_label", ")", "\n", "\n", "logger", ".", "info", "(", "'Logistic Regressor params: {} {}'", ".", "format", "(", "regressor", ".", "coef_", ",", "regressor", ".", "intercept_", ")", ")", "\n", "\n", "t0", "=", "time", ".", "time", "(", ")", "\n", "f1", "=", "open", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "\"confidence_mahalanobis_In.txt\"", ")", ",", "'w'", ")", "\n", "f2", "=", "open", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "\"confidence_mahalanobis_Out.txt\"", ")", ",", "'w'", ")", "\n", "\n", "########################################In-distribution###########################################", "\n", "logger", ".", "info", "(", "\"Processing in-distribution images\"", ")", "\n", "\n", "count", "=", "0", "\n", "all_confidence_scores_in", ",", "all_confidence_scores_out", "=", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "int", "(", "m", "/", "args", ".", "batch_size", ")", "+", "1", ")", ":", "\n", "            ", "if", "i", "*", "args", ".", "batch_size", ">=", "m", ":", "\n", "                ", "break", "\n", "", "images", "=", "torch", ".", "tensor", "(", "val_in", "[", "i", "*", "args", ".", "batch_size", ":", "min", "(", "(", "i", "+", "1", ")", "*", "args", ".", "batch_size", ",", "m", ")", "]", ")", ".", "cuda", "(", ")", "\n", "# if j<1000: continue", "\n", "batch_size", "=", "images", ".", "shape", "[", "0", "]", "\n", "Mahalanobis_scores", "=", "get_Mahalanobis_score", "(", "images", ",", "model", ",", "num_classes", ",", "sample_mean", ",", "precision", ",", "num_output", ",", "magnitude", ")", "\n", "confidence_scores_in", "=", "-", "regressor", ".", "predict_proba", "(", "Mahalanobis_scores", ")", "[", ":", ",", "1", "]", "\n", "all_confidence_scores_in", ".", "extend", "(", "confidence_scores_in", ")", "\n", "\n", "for", "k", "in", "range", "(", "batch_size", ")", ":", "\n", "                ", "f1", ".", "write", "(", "\"{}\\n\"", ".", "format", "(", "confidence_scores_in", "[", "k", "]", ")", ")", "\n", "\n", "", "count", "+=", "batch_size", "\n", "print", "(", "\"{:4}/{:4} images processed, {:.1f} seconds used.\"", ".", "format", "(", "count", ",", "m", ",", "time", ".", "time", "(", ")", "-", "t0", ")", ")", "\n", "t0", "=", "time", ".", "time", "(", ")", "\n", "\n", "###################################Out-of-Distributions#####################################", "\n", "", "t0", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "info", "(", "\"Processing out-of-distribution images\"", ")", "\n", "count", "=", "0", "\n", "\n", "for", "i", "in", "range", "(", "int", "(", "m", "/", "args", ".", "batch_size", ")", "+", "1", ")", ":", "\n", "            ", "if", "i", "*", "args", ".", "batch_size", ">=", "m", ":", "\n", "                ", "break", "\n", "", "images", "=", "torch", ".", "tensor", "(", "val_out", "[", "i", "*", "args", ".", "batch_size", ":", "min", "(", "(", "i", "+", "1", ")", "*", "args", ".", "batch_size", ",", "m", ")", "]", ")", ".", "cuda", "(", ")", "\n", "# if j<1000: continue", "\n", "batch_size", "=", "images", ".", "shape", "[", "0", "]", "\n", "\n", "Mahalanobis_scores", "=", "get_Mahalanobis_score", "(", "images", ",", "model", ",", "num_classes", ",", "sample_mean", ",", "precision", ",", "num_output", ",", "magnitude", ")", "\n", "\n", "confidence_scores_out", "=", "-", "regressor", ".", "predict_proba", "(", "Mahalanobis_scores", ")", "[", ":", ",", "1", "]", "\n", "all_confidence_scores_out", ".", "extend", "(", "confidence_scores_out", ")", "\n", "\n", "for", "k", "in", "range", "(", "batch_size", ")", ":", "\n", "                ", "f2", ".", "write", "(", "\"{}\\n\"", ".", "format", "(", "confidence_scores_out", "[", "k", "]", ")", ")", "\n", "\n", "", "count", "+=", "batch_size", "\n", "logger", ".", "info", "(", "\"{:4}/{:4} images processed, {:.1f} seconds used.\"", ".", "format", "(", "count", ",", "m", ",", "time", ".", "time", "(", ")", "-", "t0", ")", ")", "\n", "t0", "=", "time", ".", "time", "(", ")", "\n", "\n", "", "f1", ".", "close", "(", ")", "\n", "f2", ".", "close", "(", ")", "\n", "\n", "# results = metric(save_dir, stypes)", "\n", "# print_results(results, stypes)", "\n", "# fpr = results['mahalanobis']['FPR']", "\n", "all_confidence_scores_in", "=", "np", ".", "array", "(", "all_confidence_scores_in", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "all_confidence_scores_out", "=", "np", ".", "array", "(", "all_confidence_scores_out", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "logger", ".", "info", "(", "all_confidence_scores_in", ".", "shape", ")", "\n", "logger", ".", "info", "(", "all_confidence_scores_out", ".", "shape", ")", "\n", "\n", "_", ",", "_", ",", "_", ",", "fpr", "=", "get_measures", "(", "all_confidence_scores_in", ",", "all_confidence_scores_out", ")", "\n", "\n", "if", "fpr", "<", "best_fpr", ":", "\n", "            ", "best_fpr", "=", "fpr", "\n", "best_magnitude", "=", "magnitude", "\n", "best_regressor", "=", "regressor", "\n", "\n", "", "", "logger", ".", "info", "(", "'Best Logistic Regressor params: {} {}'", ".", "format", "(", "best_regressor", ".", "coef_", ",", "best_regressor", ".", "intercept_", ")", ")", "\n", "logger", ".", "info", "(", "'Best magnitude: {}'", ".", "format", "(", "best_magnitude", ")", ")", "\n", "\n", "return", "sample_mean", ",", "precision", ",", "best_regressor", ",", "best_magnitude", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_gradnorm_ood.None.tune_mahalanobis_hyperparameter.main": [[266, 296], ["utils.log.setup_logger", "tune_mahalanobis_hyperparameter.mktrainval", "log.setup_logger.info", "torch.load", "torch.load", "model.cuda.load_state_dict_custom", "log.setup_logger.info", "torch.nn.DataParallel", "torch.nn.DataParallel", "model.cuda.cuda", "log.setup_logger.info", "tune_mahalanobis_hyperparameter.tune_mahalanobis_hyperparams", "log.setup_logger.info", "os.path.join", "numpy.save", "len", "os.path.exists", "os.makedirs", "os.path.join", "numpy.array", "len"], "function", ["home.repos.pwc.inspect_result.deeplearning-wisc_gradnorm_ood.utils.log.setup_logger", "home.repos.pwc.inspect_result.deeplearning-wisc_gradnorm_ood.None.tune_mahalanobis_hyperparameter.mktrainval", "home.repos.pwc.inspect_result.deeplearning-wisc_gradnorm_ood.None.resnetv2.ResNetV2.load_state_dict_custom", "home.repos.pwc.inspect_result.deeplearning-wisc_gradnorm_ood.None.tune_mahalanobis_hyperparameter.tune_mahalanobis_hyperparams"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "logger", "=", "log", ".", "setup_logger", "(", "args", ")", "\n", "\n", "# Lets cuDNN benchmark conv implementations and choose the fastest.", "\n", "# Only good if sizes stay the same within the main loop!", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "train_set", ",", "val_set", ",", "train_loader", ",", "val_loader", "=", "mktrainval", "(", "args", ",", "logger", ")", "\n", "\n", "logger", ".", "info", "(", "f\"Loading model from {args.model_path}\"", ")", "\n", "model", "=", "resnetv2", ".", "KNOWN_MODELS", "[", "args", ".", "model", "]", "(", "head_size", "=", "len", "(", "train_set", ".", "classes", ")", ")", "\n", "state_dict", "=", "torch", ".", "load", "(", "args", ".", "model_path", ")", "\n", "model", ".", "load_state_dict_custom", "(", "state_dict", "[", "'model'", "]", ")", "\n", "\n", "logger", ".", "info", "(", "\"Moving model onto all GPUs\"", ")", "\n", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ")", "\n", "model", "=", "model", ".", "cuda", "(", ")", "\n", "\n", "logger", ".", "info", "(", "'Tuning hyper-parameters...'", ")", "\n", "sample_mean", ",", "precision", ",", "best_regressor", ",", "best_magnitude", "=", "tune_mahalanobis_hyperparams", "(", "args", ",", "model", ",", "len", "(", "val_set", ".", "classes", ")", ",", "train_loader", ",", "val_loader", ",", "logger", ")", "\n", "\n", "logger", ".", "info", "(", "'saving results...'", ")", "\n", "save_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "logdir", ",", "args", ".", "name", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_dir", ")", "\n", "\n", "", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'results'", ")", ",", "\n", "np", ".", "array", "(", "[", "sample_mean", ",", "precision", ",", "best_regressor", ".", "coef_", ",", "best_regressor", ".", "intercept_", ",", "best_magnitude", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_gradnorm_ood.None.test_ood.make_id_ood": [[17, 42], ["torchvision.transforms.Compose", "torchvision.datasets.ImageFolder", "torchvision.datasets.ImageFolder", "logger.info", "logger.info", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "len", "len"], "function", ["None"], ["def", "make_id_ood", "(", "args", ",", "logger", ")", ":", "\n", "    ", "\"\"\"Returns train and validation datasets.\"\"\"", "\n", "crop", "=", "480", "\n", "\n", "val_tx", "=", "tv", ".", "transforms", ".", "Compose", "(", "[", "\n", "tv", ".", "transforms", ".", "Resize", "(", "(", "crop", ",", "crop", ")", ")", ",", "\n", "tv", ".", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "tv", ".", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", ",", "\n", "]", ")", "\n", "\n", "in_set", "=", "tv", ".", "datasets", ".", "ImageFolder", "(", "args", ".", "in_datadir", ",", "val_tx", ")", "\n", "out_set", "=", "tv", ".", "datasets", ".", "ImageFolder", "(", "args", ".", "out_datadir", ",", "val_tx", ")", "\n", "\n", "logger", ".", "info", "(", "f\"Using an in-distribution set with {len(in_set)} images.\"", ")", "\n", "logger", ".", "info", "(", "f\"Using an out-of-distribution set with {len(out_set)} images.\"", ")", "\n", "\n", "in_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "in_set", ",", "batch_size", "=", "args", ".", "batch", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ",", "drop_last", "=", "False", ")", "\n", "\n", "out_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "out_set", ",", "batch_size", "=", "args", ".", "batch", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ",", "drop_last", "=", "False", ")", "\n", "\n", "return", "in_set", ",", "out_set", ",", "in_loader", ",", "out_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_gradnorm_ood.None.test_ood.iterate_data_msp": [[44, 56], ["torch.nn.Softmax().cuda", "enumerate", "numpy.array", "torch.nn.Softmax", "torch.no_grad", "x.cuda.cuda", "model", "torch.max", "confs.extend", "torch.nn.Softmax().cuda.", "conf.data.cpu().numpy", "conf.data.cpu"], "function", ["None"], ["", "def", "iterate_data_msp", "(", "data_loader", ",", "model", ")", ":", "\n", "    ", "confs", "=", "[", "]", "\n", "m", "=", "torch", ".", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", ".", "cuda", "(", ")", "\n", "for", "b", ",", "(", "x", ",", "y", ")", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "x", "=", "x", ".", "cuda", "(", ")", "\n", "# compute output, measure accuracy and record loss.", "\n", "logits", "=", "model", "(", "x", ")", "\n", "\n", "conf", ",", "_", "=", "torch", ".", "max", "(", "m", "(", "logits", ")", ",", "dim", "=", "-", "1", ")", "\n", "confs", ".", "extend", "(", "conf", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "", "return", "np", ".", "array", "(", "confs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_gradnorm_ood.None.test_ood.iterate_data_odin": [[58, 95], ["torch.nn.CrossEntropyLoss().cuda", "enumerate", "numpy.array", "torch.autograd.Variable", "model", "numpy.argmax", "torch.autograd.Variable", "torch.nn.CrossEntropyLoss().cuda.", "criterion.backward", "torch.ge", "torch.add", "model", "model.data.cpu", "nnOutputs.numpy.numpy", "confs.extend", "torch.nn.CrossEntropyLoss", "torch.autograd.Variable.cuda", "model.data.cpu().numpy", "torch.LongTensor().cuda", "torch.autograd.Variable", "numpy.max", "numpy.exp", "numpy.sum", "numpy.max", "logger.info", "torch.ge.float", "numpy.exp", "model.data.cpu", "torch.LongTensor"], "function", ["None"], ["", "def", "iterate_data_odin", "(", "data_loader", ",", "model", ",", "epsilon", ",", "temper", ",", "logger", ")", ":", "\n", "    ", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "cuda", "(", ")", "\n", "confs", "=", "[", "]", "\n", "for", "b", ",", "(", "x", ",", "y", ")", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "        ", "x", "=", "Variable", "(", "x", ".", "cuda", "(", ")", ",", "requires_grad", "=", "True", ")", "\n", "outputs", "=", "model", "(", "x", ")", "\n", "\n", "maxIndexTemp", "=", "np", ".", "argmax", "(", "outputs", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "axis", "=", "1", ")", "\n", "outputs", "=", "outputs", "/", "temper", "\n", "\n", "labels", "=", "Variable", "(", "torch", ".", "LongTensor", "(", "maxIndexTemp", ")", ".", "cuda", "(", ")", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "labels", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "# Normalizing the gradient to binary in {0, 1}", "\n", "gradient", "=", "torch", ".", "ge", "(", "x", ".", "grad", ".", "data", ",", "0", ")", "\n", "gradient", "=", "(", "gradient", ".", "float", "(", ")", "-", "0.5", ")", "*", "2", "\n", "\n", "# Adding small perturbations to images", "\n", "tempInputs", "=", "torch", ".", "add", "(", "x", ".", "data", ",", "-", "epsilon", ",", "gradient", ")", "\n", "outputs", "=", "model", "(", "Variable", "(", "tempInputs", ")", ")", "\n", "outputs", "=", "outputs", "/", "temper", "\n", "# Calculating the confidence after adding perturbations", "\n", "nnOutputs", "=", "outputs", ".", "data", ".", "cpu", "(", ")", "\n", "nnOutputs", "=", "nnOutputs", ".", "numpy", "(", ")", "\n", "nnOutputs", "=", "nnOutputs", "-", "np", ".", "max", "(", "nnOutputs", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "nnOutputs", "=", "np", ".", "exp", "(", "nnOutputs", ")", "/", "np", ".", "sum", "(", "np", ".", "exp", "(", "nnOutputs", ")", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "\n", "confs", ".", "extend", "(", "np", ".", "max", "(", "nnOutputs", ",", "axis", "=", "1", ")", ")", "\n", "if", "b", "%", "100", "==", "0", ":", "\n", "            ", "logger", ".", "info", "(", "'{} batches processed'", ".", "format", "(", "b", ")", ")", "\n", "\n", "# debug", "\n", "# if b > 500:", "\n", "#    break", "\n", "\n", "", "", "return", "np", ".", "array", "(", "confs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_gradnorm_ood.None.test_ood.iterate_data_energy": [[97, 108], ["enumerate", "numpy.array", "torch.no_grad", "x.cuda.cuda", "model", "confs.extend", "torch.logsumexp", "conf.data.cpu().numpy", "conf.data.cpu"], "function", ["None"], ["", "def", "iterate_data_energy", "(", "data_loader", ",", "model", ",", "temper", ")", ":", "\n", "    ", "confs", "=", "[", "]", "\n", "for", "b", ",", "(", "x", ",", "y", ")", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "x", "=", "x", ".", "cuda", "(", ")", "\n", "# compute output, measure accuracy and record loss.", "\n", "logits", "=", "model", "(", "x", ")", "\n", "\n", "conf", "=", "temper", "*", "torch", ".", "logsumexp", "(", "logits", "/", "temper", ",", "dim", "=", "1", ")", "\n", "confs", ".", "extend", "(", "conf", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "", "return", "np", ".", "array", "(", "confs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_gradnorm_ood.None.test_ood.iterate_data_mahalanobis": [[110, 122], ["enumerate", "numpy.array", "x.cuda.cuda", "utils.mahalanobis_lib.get_Mahalanobis_score", "confs.extend", "logger.info", "regressor.predict_proba"], "function", ["home.repos.pwc.inspect_result.deeplearning-wisc_gradnorm_ood.utils.mahalanobis_lib.get_Mahalanobis_score"], ["", "def", "iterate_data_mahalanobis", "(", "data_loader", ",", "model", ",", "num_classes", ",", "sample_mean", ",", "precision", ",", "\n", "num_output", ",", "magnitude", ",", "regressor", ",", "logger", ")", ":", "\n", "    ", "confs", "=", "[", "]", "\n", "for", "b", ",", "(", "x", ",", "y", ")", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "        ", "if", "b", "%", "10", "==", "0", ":", "\n", "            ", "logger", ".", "info", "(", "'{} batches processed'", ".", "format", "(", "b", ")", ")", "\n", "", "x", "=", "x", ".", "cuda", "(", ")", "\n", "\n", "Mahalanobis_scores", "=", "get_Mahalanobis_score", "(", "x", ",", "model", ",", "num_classes", ",", "sample_mean", ",", "precision", ",", "num_output", ",", "magnitude", ")", "\n", "scores", "=", "-", "regressor", ".", "predict_proba", "(", "Mahalanobis_scores", ")", "[", ":", ",", "1", "]", "\n", "confs", ".", "extend", "(", "scores", ")", "\n", "", "return", "np", ".", "array", "(", "confs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_gradnorm_ood.None.test_ood.iterate_data_gradnorm": [[124, 146], ["torch.nn.LogSoftmax().cuda", "enumerate", "numpy.array", "torch.autograd.Variable", "model.zero_grad", "model", "torch.ones().cuda", "torch.mean", "torch.mean.backward", "torch.sum().cpu().numpy", "confs.append", "torch.nn.LogSoftmax", "print", "x.cuda", "torch.sum", "torch.ones", "torch.sum().cpu", "torch.nn.LogSoftmax().cuda.", "torch.sum", "torch.abs"], "function", ["None"], ["", "def", "iterate_data_gradnorm", "(", "data_loader", ",", "model", ",", "temperature", ",", "num_classes", ")", ":", "\n", "    ", "confs", "=", "[", "]", "\n", "logsoftmax", "=", "torch", ".", "nn", ".", "LogSoftmax", "(", "dim", "=", "-", "1", ")", ".", "cuda", "(", ")", "\n", "for", "b", ",", "(", "x", ",", "y", ")", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "        ", "if", "b", "%", "100", "==", "0", ":", "\n", "            ", "print", "(", "'{} batches processed'", ".", "format", "(", "b", ")", ")", "\n", "", "inputs", "=", "Variable", "(", "x", ".", "cuda", "(", ")", ",", "requires_grad", "=", "True", ")", "\n", "\n", "model", ".", "zero_grad", "(", ")", "\n", "outputs", "=", "model", "(", "inputs", ")", "\n", "targets", "=", "torch", ".", "ones", "(", "(", "inputs", ".", "shape", "[", "0", "]", ",", "num_classes", ")", ")", ".", "cuda", "(", ")", "\n", "outputs", "=", "outputs", "/", "temperature", "\n", "loss", "=", "torch", ".", "mean", "(", "torch", ".", "sum", "(", "-", "targets", "*", "logsoftmax", "(", "outputs", ")", ",", "dim", "=", "-", "1", ")", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "layer_grad", "=", "model", ".", "head", ".", "conv", ".", "weight", ".", "grad", ".", "data", "\n", "\n", "layer_grad_norm", "=", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "layer_grad", ")", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "confs", ".", "append", "(", "layer_grad_norm", ")", "\n", "\n", "", "return", "np", ".", "array", "(", "confs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_gradnorm_ood.None.test_ood.run_eval": [[148, 213], ["model.eval", "logger.info", "logger.flush", "iterate_data_gradnorm.reshape", "iterate_data_gradnorm.reshape", "utils.test_utils.get_measures", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "logger.flush", "logger.info", "test_ood.iterate_data_msp", "logger.info", "test_ood.iterate_data_msp", "logger.info", "test_ood.iterate_data_odin", "logger.info", "test_ood.iterate_data_odin", "logger.info", "test_ood.iterate_data_energy", "logger.info", "test_ood.iterate_data_energy", "numpy.load", "sklearn.linear_model.LogisticRegressionCV().fit", "torch.rand", "torch.autograd.Variable().cuda", "len", "logger.info", "test_ood.iterate_data_mahalanobis", "logger.info", "test_ood.iterate_data_mahalanobis", "os.path.join", "s.cuda", "p.cuda", "model", "logger.info", "test_ood.iterate_data_gradnorm", "logger.info", "test_ood.iterate_data_gradnorm", "ValueError", "sklearn.linear_model.LogisticRegressionCV", "torch.autograd.Variable"], "function", ["home.repos.pwc.inspect_result.deeplearning-wisc_gradnorm_ood.utils.test_utils.get_measures", "home.repos.pwc.inspect_result.deeplearning-wisc_gradnorm_ood.None.test_ood.iterate_data_msp", "home.repos.pwc.inspect_result.deeplearning-wisc_gradnorm_ood.None.test_ood.iterate_data_msp", "home.repos.pwc.inspect_result.deeplearning-wisc_gradnorm_ood.None.test_ood.iterate_data_odin", "home.repos.pwc.inspect_result.deeplearning-wisc_gradnorm_ood.None.test_ood.iterate_data_odin", "home.repos.pwc.inspect_result.deeplearning-wisc_gradnorm_ood.None.test_ood.iterate_data_energy", "home.repos.pwc.inspect_result.deeplearning-wisc_gradnorm_ood.None.test_ood.iterate_data_energy", "home.repos.pwc.inspect_result.deeplearning-wisc_gradnorm_ood.None.test_ood.iterate_data_mahalanobis", "home.repos.pwc.inspect_result.deeplearning-wisc_gradnorm_ood.None.test_ood.iterate_data_mahalanobis", "home.repos.pwc.inspect_result.deeplearning-wisc_gradnorm_ood.None.test_ood.iterate_data_gradnorm", "home.repos.pwc.inspect_result.deeplearning-wisc_gradnorm_ood.None.test_ood.iterate_data_gradnorm"], ["", "def", "run_eval", "(", "model", ",", "in_loader", ",", "out_loader", ",", "logger", ",", "args", ",", "num_classes", ")", ":", "\n", "# switch to evaluate mode", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "\n", "logger", ".", "info", "(", "\"Running test...\"", ")", "\n", "logger", ".", "flush", "(", ")", "\n", "\n", "if", "args", ".", "score", "==", "'MSP'", ":", "\n", "        ", "logger", ".", "info", "(", "\"Processing in-distribution data...\"", ")", "\n", "in_scores", "=", "iterate_data_msp", "(", "in_loader", ",", "model", ")", "\n", "logger", ".", "info", "(", "\"Processing out-of-distribution data...\"", ")", "\n", "out_scores", "=", "iterate_data_msp", "(", "out_loader", ",", "model", ")", "\n", "", "elif", "args", ".", "score", "==", "'ODIN'", ":", "\n", "        ", "logger", ".", "info", "(", "\"Processing in-distribution data...\"", ")", "\n", "in_scores", "=", "iterate_data_odin", "(", "in_loader", ",", "model", ",", "args", ".", "epsilon_odin", ",", "args", ".", "temperature_odin", ",", "logger", ")", "\n", "logger", ".", "info", "(", "\"Processing out-of-distribution data...\"", ")", "\n", "out_scores", "=", "iterate_data_odin", "(", "out_loader", ",", "model", ",", "args", ".", "epsilon_odin", ",", "args", ".", "temperature_odin", ",", "logger", ")", "\n", "", "elif", "args", ".", "score", "==", "'Energy'", ":", "\n", "        ", "logger", ".", "info", "(", "\"Processing in-distribution data...\"", ")", "\n", "in_scores", "=", "iterate_data_energy", "(", "in_loader", ",", "model", ",", "args", ".", "temperature_energy", ")", "\n", "logger", ".", "info", "(", "\"Processing out-of-distribution data...\"", ")", "\n", "out_scores", "=", "iterate_data_energy", "(", "out_loader", ",", "model", ",", "args", ".", "temperature_energy", ")", "\n", "", "elif", "args", ".", "score", "==", "'Mahalanobis'", ":", "\n", "        ", "sample_mean", ",", "precision", ",", "lr_weights", ",", "lr_bias", ",", "magnitude", "=", "np", ".", "load", "(", "\n", "os", ".", "path", ".", "join", "(", "args", ".", "mahalanobis_param_path", ",", "'results.npy'", ")", ",", "allow_pickle", "=", "True", ")", "\n", "sample_mean", "=", "[", "s", ".", "cuda", "(", ")", "for", "s", "in", "sample_mean", "]", "\n", "precision", "=", "[", "p", ".", "cuda", "(", ")", "for", "p", "in", "precision", "]", "\n", "\n", "regressor", "=", "LogisticRegressionCV", "(", "cv", "=", "2", ")", ".", "fit", "(", "[", "[", "0", ",", "0", ",", "0", ",", "0", "]", ",", "[", "0", ",", "0", ",", "0", ",", "0", "]", ",", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "[", "1", ",", "1", ",", "1", ",", "1", "]", "]", ",", "\n", "[", "0", ",", "0", ",", "1", ",", "1", "]", ")", "\n", "\n", "regressor", ".", "coef_", "=", "lr_weights", "\n", "regressor", ".", "intercept_", "=", "lr_bias", "\n", "\n", "temp_x", "=", "torch", ".", "rand", "(", "2", ",", "3", ",", "480", ",", "480", ")", "\n", "temp_x", "=", "Variable", "(", "temp_x", ")", ".", "cuda", "(", ")", "\n", "temp_list", "=", "model", "(", "x", "=", "temp_x", ",", "layer_index", "=", "'all'", ")", "[", "1", "]", "\n", "num_output", "=", "len", "(", "temp_list", ")", "\n", "\n", "logger", ".", "info", "(", "\"Processing in-distribution data...\"", ")", "\n", "in_scores", "=", "iterate_data_mahalanobis", "(", "in_loader", ",", "model", ",", "num_classes", ",", "sample_mean", ",", "precision", ",", "\n", "num_output", ",", "magnitude", ",", "regressor", ",", "logger", ")", "\n", "logger", ".", "info", "(", "\"Processing out-of-distribution data...\"", ")", "\n", "out_scores", "=", "iterate_data_mahalanobis", "(", "out_loader", ",", "model", ",", "num_classes", ",", "sample_mean", ",", "precision", ",", "\n", "num_output", ",", "magnitude", ",", "regressor", ",", "logger", ")", "\n", "", "elif", "args", ".", "score", "==", "'GradNorm'", ":", "\n", "        ", "logger", ".", "info", "(", "\"Processing in-distribution data...\"", ")", "\n", "in_scores", "=", "iterate_data_gradnorm", "(", "in_loader", ",", "model", ",", "args", ".", "temperature_gradnorm", ",", "num_classes", ")", "\n", "logger", ".", "info", "(", "\"Processing out-of-distribution data...\"", ")", "\n", "out_scores", "=", "iterate_data_gradnorm", "(", "out_loader", ",", "model", ",", "args", ".", "temperature_gradnorm", ",", "num_classes", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Unknown score type {}\"", ".", "format", "(", "args", ".", "score", ")", ")", "\n", "\n", "", "in_examples", "=", "in_scores", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "out_examples", "=", "out_scores", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "\n", "auroc", ",", "aupr_in", ",", "aupr_out", ",", "fpr95", "=", "get_measures", "(", "in_examples", ",", "out_examples", ")", "\n", "\n", "logger", ".", "info", "(", "'============Results for {}============'", ".", "format", "(", "args", ".", "score", ")", ")", "\n", "logger", ".", "info", "(", "'AUROC: {}'", ".", "format", "(", "auroc", ")", ")", "\n", "logger", ".", "info", "(", "'AUPR (In): {}'", ".", "format", "(", "aupr_in", ")", ")", "\n", "logger", ".", "info", "(", "'AUPR (Out): {}'", ".", "format", "(", "aupr_out", ")", ")", "\n", "logger", ".", "info", "(", "'FPR95: {}'", ".", "format", "(", "fpr95", ")", ")", "\n", "\n", "logger", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_gradnorm_ood.None.test_ood.main": [[215, 242], ["utils.log.setup_logger", "test_ood.make_id_ood", "log.setup_logger.info", "torch.load", "torch.nn.DataParallel.load_state_dict_custom", "torch.nn.DataParallel.cuda", "time.time", "test_ood.run_eval", "time.time", "log.setup_logger.info", "torch.nn.DataParallel", "len", "len"], "function", ["home.repos.pwc.inspect_result.deeplearning-wisc_gradnorm_ood.utils.log.setup_logger", "home.repos.pwc.inspect_result.deeplearning-wisc_gradnorm_ood.None.test_ood.make_id_ood", "home.repos.pwc.inspect_result.deeplearning-wisc_gradnorm_ood.None.resnetv2.ResNetV2.load_state_dict_custom", "home.repos.pwc.inspect_result.deeplearning-wisc_gradnorm_ood.None.test_ood.run_eval"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "logger", "=", "log", ".", "setup_logger", "(", "args", ")", "\n", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "if", "args", ".", "score", "==", "'GradNorm'", ":", "\n", "        ", "args", ".", "batch", "=", "1", "\n", "\n", "", "in_set", ",", "out_set", ",", "in_loader", ",", "out_loader", "=", "make_id_ood", "(", "args", ",", "logger", ")", "\n", "\n", "logger", ".", "info", "(", "f\"Loading model from {args.model_path}\"", ")", "\n", "\n", "model", "=", "resnetv2", ".", "KNOWN_MODELS", "[", "args", ".", "model", "]", "(", "head_size", "=", "len", "(", "in_set", ".", "classes", ")", ")", "\n", "\n", "state_dict", "=", "torch", ".", "load", "(", "args", ".", "model_path", ")", "\n", "model", ".", "load_state_dict_custom", "(", "state_dict", "[", "'model'", "]", ")", "\n", "\n", "if", "args", ".", "score", "!=", "'GradNorm'", ":", "\n", "        ", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ")", "\n", "\n", "", "model", "=", "model", ".", "cuda", "(", ")", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "run_eval", "(", "model", ",", "in_loader", ",", "out_loader", ",", "logger", ",", "args", ",", "num_classes", "=", "len", "(", "in_set", ".", "classes", ")", ")", "\n", "end_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "logger", ".", "info", "(", "\"Total running time: {}\"", ".", "format", "(", "end_time", "-", "start_time", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_gradnorm_ood.utils.test_utils.arg_parser": [[6, 23], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["def", "arg_parser", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--workers\"", ",", "type", "=", "int", ",", "default", "=", "8", ",", "\n", "help", "=", "\"Number of background threads used to load data.\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--logdir\"", ",", "required", "=", "True", ",", "\n", "help", "=", "\"Where to log test info (small).\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--batch\"", ",", "type", "=", "int", ",", "default", "=", "256", ",", "\n", "help", "=", "\"Batch size.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--name\"", ",", "required", "=", "True", ",", "\n", "help", "=", "\"Name of this run. Used for monitoring and checkpointing.\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--model\"", ",", "default", "=", "\"BiT-S-R101x1\"", ",", "help", "=", "\"Which variant to use\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--model_path\"", ",", "type", "=", "str", ",", "help", "=", "\"Path to the model you want to test\"", ")", "\n", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_gradnorm_ood.utils.test_utils.stable_cumsum": [[25, 42], ["numpy.cumsum", "numpy.sum", "numpy.allclose", "RuntimeError"], "function", ["None"], ["", "def", "stable_cumsum", "(", "arr", ",", "rtol", "=", "1e-05", ",", "atol", "=", "1e-08", ")", ":", "\n", "    ", "\"\"\"Use high precision for cumsum and check that final value matches sum\n    Parameters\n    ----------\n    arr : array-like\n        To be cumulatively summed as flat\n    rtol : float\n        Relative tolerance, see ``np.allclose``\n    atol : float\n        Absolute tolerance, see ``np.allclose``\n    \"\"\"", "\n", "out", "=", "np", ".", "cumsum", "(", "arr", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "expected", "=", "np", ".", "sum", "(", "arr", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "if", "not", "np", ".", "allclose", "(", "out", "[", "-", "1", "]", ",", "expected", ",", "rtol", "=", "rtol", ",", "atol", "=", "atol", ")", ":", "\n", "        ", "raise", "RuntimeError", "(", "'cumsum was found to be unstable: '", "\n", "'its last element does not correspond to sum'", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_gradnorm_ood.utils.test_utils.fpr_and_fdr_at_recall": [[44, 74], ["tps.searchsorted", "slice", "numpy.argmin", "numpy.argsort", "numpy.where", "test_utils.stable_cumsum", "numpy.abs", "numpy.sum", "numpy.diff", "numpy.logical_not"], "function", ["home.repos.pwc.inspect_result.deeplearning-wisc_gradnorm_ood.utils.test_utils.stable_cumsum"], ["", "def", "fpr_and_fdr_at_recall", "(", "y_true", ",", "y_score", ",", "recall_level", ",", "pos_label", "=", "1.", ")", ":", "\n", "# make y_true a boolean vector", "\n", "    ", "y_true", "=", "(", "y_true", "==", "pos_label", ")", "\n", "\n", "# sort scores and corresponding truth values", "\n", "desc_score_indices", "=", "np", ".", "argsort", "(", "y_score", ",", "kind", "=", "\"mergesort\"", ")", "[", ":", ":", "-", "1", "]", "\n", "y_score", "=", "y_score", "[", "desc_score_indices", "]", "\n", "y_true", "=", "y_true", "[", "desc_score_indices", "]", "\n", "\n", "# y_score typically has many tied values. Here we extract", "\n", "# the indices associated with the distinct values. We also", "\n", "# concatenate a value for the end of the curve.", "\n", "distinct_value_indices", "=", "np", ".", "where", "(", "np", ".", "diff", "(", "y_score", ")", ")", "[", "0", "]", "\n", "threshold_idxs", "=", "np", ".", "r_", "[", "distinct_value_indices", ",", "y_true", ".", "size", "-", "1", "]", "\n", "\n", "# accumulate the true positives with decreasing threshold", "\n", "tps", "=", "stable_cumsum", "(", "y_true", ")", "[", "threshold_idxs", "]", "\n", "fps", "=", "1", "+", "threshold_idxs", "-", "tps", "# add one because of zero-based indexing", "\n", "\n", "thresholds", "=", "y_score", "[", "threshold_idxs", "]", "\n", "\n", "recall", "=", "tps", "/", "tps", "[", "-", "1", "]", "\n", "\n", "last_ind", "=", "tps", ".", "searchsorted", "(", "tps", "[", "-", "1", "]", ")", "\n", "sl", "=", "slice", "(", "last_ind", ",", "None", ",", "-", "1", ")", "# [last_ind::-1]", "\n", "recall", ",", "fps", ",", "tps", ",", "thresholds", "=", "np", ".", "r_", "[", "recall", "[", "sl", "]", ",", "1", "]", ",", "np", ".", "r_", "[", "fps", "[", "sl", "]", ",", "0", "]", ",", "np", ".", "r_", "[", "tps", "[", "sl", "]", ",", "0", "]", ",", "thresholds", "[", "sl", "]", "\n", "\n", "cutoff", "=", "np", ".", "argmin", "(", "np", ".", "abs", "(", "recall", "-", "recall_level", ")", ")", "\n", "\n", "return", "fps", "[", "cutoff", "]", "/", "(", "np", ".", "sum", "(", "np", ".", "logical_not", "(", "y_true", ")", ")", ")", "# , fps[cutoff]/(fps[cutoff] + tps[cutoff])", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_gradnorm_ood.utils.test_utils.get_measures": [[76, 98], ["numpy.zeros", "numpy.squeeze", "sklearn.average_precision_score", "sklearn.roc_auc_score", "test_utils.fpr_and_fdr_at_recall", "numpy.zeros", "numpy.squeeze", "sklearn.average_precision_score", "numpy.vstack", "numpy.vstack"], "function", ["home.repos.pwc.inspect_result.deeplearning-wisc_gradnorm_ood.utils.test_utils.fpr_and_fdr_at_recall"], ["", "def", "get_measures", "(", "in_examples", ",", "out_examples", ")", ":", "\n", "    ", "num_in", "=", "in_examples", ".", "shape", "[", "0", "]", "\n", "num_out", "=", "out_examples", ".", "shape", "[", "0", "]", "\n", "\n", "# logger.info(\"# in example is: {}\".format(num_in))", "\n", "# logger.info(\"# out example is: {}\".format(num_out))", "\n", "\n", "labels", "=", "np", ".", "zeros", "(", "num_in", "+", "num_out", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "labels", "[", ":", "num_in", "]", "+=", "1", "\n", "\n", "examples", "=", "np", ".", "squeeze", "(", "np", ".", "vstack", "(", "(", "in_examples", ",", "out_examples", ")", ")", ")", "\n", "aupr_in", "=", "sk", ".", "average_precision_score", "(", "labels", ",", "examples", ")", "\n", "auroc", "=", "sk", ".", "roc_auc_score", "(", "labels", ",", "examples", ")", "\n", "\n", "recall_level", "=", "0.95", "\n", "fpr", "=", "fpr_and_fdr_at_recall", "(", "labels", ",", "examples", ",", "recall_level", ")", "\n", "\n", "labels_rev", "=", "np", ".", "zeros", "(", "num_in", "+", "num_out", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "labels_rev", "[", "num_in", ":", "]", "+=", "1", "\n", "examples", "=", "np", ".", "squeeze", "(", "-", "np", ".", "vstack", "(", "(", "in_examples", ",", "out_examples", ")", ")", ")", "\n", "aupr_out", "=", "sk", ".", "average_precision_score", "(", "labels_rev", ",", "examples", ")", "\n", "return", "auroc", ",", "aupr_in", ",", "aupr_out", ",", "fpr", "\n", "", ""]], "home.repos.pwc.inspect_result.deeplearning-wisc_gradnorm_ood.utils.log.setup_logger": [[5, 45], ["os.makedirs", "logging.config.dictConfig", "logging.config.dictConfig", "logging.getLogger", "logging.getLogger", "logging.getLogger.info", "os.path.join", "h.flush", "os.path.join"], "function", ["None"], ["def", "setup_logger", "(", "args", ")", ":", "\n", "    ", "\"\"\"Creates and returns a fancy logger.\"\"\"", "\n", "# return logging.basicConfig(level=logging.INFO, format=\"[%(asctime)s] %(message)s\")", "\n", "# Why is setting up proper logging so !@?#! ugly?", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "args", ".", "logdir", ",", "args", ".", "name", ")", ",", "exist_ok", "=", "True", ")", "\n", "logging", ".", "config", ".", "dictConfig", "(", "{", "\n", "\"version\"", ":", "1", ",", "\n", "\"disable_existing_loggers\"", ":", "False", ",", "\n", "\"formatters\"", ":", "{", "\n", "\"standard\"", ":", "{", "\n", "\"format\"", ":", "\"%(asctime)s [%(levelname)s] %(name)s: %(message)s\"", "\n", "}", ",", "\n", "}", ",", "\n", "\"handlers\"", ":", "{", "\n", "\"stderr\"", ":", "{", "\n", "\"level\"", ":", "\"INFO\"", ",", "\n", "\"formatter\"", ":", "\"standard\"", ",", "\n", "\"class\"", ":", "\"logging.StreamHandler\"", ",", "\n", "\"stream\"", ":", "\"ext://sys.stderr\"", ",", "\n", "}", ",", "\n", "\"logfile\"", ":", "{", "\n", "\"level\"", ":", "\"DEBUG\"", ",", "\n", "\"formatter\"", ":", "\"standard\"", ",", "\n", "\"class\"", ":", "\"logging.FileHandler\"", ",", "\n", "\"filename\"", ":", "os", ".", "path", ".", "join", "(", "args", ".", "logdir", ",", "args", ".", "name", ",", "\"log.txt\"", ")", ",", "\n", "\"mode\"", ":", "\"a\"", ",", "\n", "}", "\n", "}", ",", "\n", "\"loggers\"", ":", "{", "\n", "\"\"", ":", "{", "\n", "\"handlers\"", ":", "[", "\"stderr\"", ",", "\"logfile\"", "]", ",", "\n", "\"level\"", ":", "\"DEBUG\"", ",", "\n", "\"propagate\"", ":", "True", "\n", "}", ",", "\n", "}", "\n", "}", ")", "\n", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "logger", ".", "flush", "=", "lambda", ":", "[", "h", ".", "flush", "(", ")", "for", "h", "in", "logger", ".", "handlers", "]", "\n", "logger", ".", "info", "(", "args", ")", "\n", "return", "logger", "\n", "", ""]], "home.repos.pwc.inspect_result.deeplearning-wisc_gradnorm_ood.utils.mahalanobis_lib.sample_estimator": [[8, 92], ["model.eval", "sklearn.covariance.EmpiricalCovariance", "len", "numpy.empty", "np.empty.fill", "range", "enumerate", "range", "print", "range", "list_features.append", "data.cuda.size", "range", "pred.eq().cpu", "pred.eq().cpu.sum", "range", "torch.Tensor().cpu", "range", "sample_class_mean.append", "range", "sklearn.covariance.EmpiricalCovariance.fit", "torch.from_numpy().float().cuda", "precision.append", "torch.Tensor().cpu.append", "print", "torch.no_grad", "torch.autograd.Variable", "data.cuda.cuda", "model", "out_features[].view", "torch.mean().data.cpu", "output.data.max", "data.cuda.size", "torch.mean", "torch.cat.cpu().numpy", "out_features[].size", "out_features[].size", "pred.eq", "torch.Tensor", "torch.cat", "torch.from_numpy().float", "target.cuda", "out[].view", "torch.cat", "int", "torch.cat.cpu", "torch.mean", "torch.from_numpy", "out[].view"], "function", ["None"], ["def", "sample_estimator", "(", "model", ",", "num_classes", ",", "feature_list", ",", "train_loader", ")", ":", "\n", "    ", "\"\"\"\n    compute sample mean and precision (inverse of covariance)\n    return: sample_class_mean: list of class mean\n             precision: list of precisions\n    \"\"\"", "\n", "import", "sklearn", ".", "covariance", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "group_lasso", "=", "sklearn", ".", "covariance", ".", "EmpiricalCovariance", "(", "assume_centered", "=", "False", ")", "\n", "correct", ",", "total", "=", "0", ",", "0", "\n", "num_output", "=", "len", "(", "feature_list", ")", "\n", "num_sample_per_class", "=", "np", ".", "empty", "(", "num_classes", ")", "\n", "num_sample_per_class", ".", "fill", "(", "0", ")", "\n", "list_features", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_output", ")", ":", "\n", "        ", "temp_list", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "num_classes", ")", ":", "\n", "            ", "temp_list", ".", "append", "(", "0", ")", "\n", "", "list_features", ".", "append", "(", "temp_list", ")", "\n", "\n", "", "for", "num_batch", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "if", "num_batch", "%", "100", "==", "0", ":", "\n", "            ", "print", "(", "'{} batches processed...'", ".", "format", "(", "num_batch", ")", ")", "\n", "", "total", "+=", "data", ".", "size", "(", "0", ")", "\n", "# data = data.cuda()", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "data", "=", "Variable", "(", "data", ")", "\n", "data", "=", "data", ".", "cuda", "(", ")", "\n", "output", ",", "out_features", "=", "model", "(", "x", "=", "data", ",", "layer_index", "=", "'all'", ")", "\n", "\n", "# get hidden features", "\n", "", "for", "i", "in", "range", "(", "num_output", ")", ":", "\n", "            ", "out_features", "[", "i", "]", "=", "out_features", "[", "i", "]", ".", "view", "(", "out_features", "[", "i", "]", ".", "size", "(", "0", ")", ",", "out_features", "[", "i", "]", ".", "size", "(", "1", ")", ",", "-", "1", ")", "\n", "out_features", "[", "i", "]", "=", "torch", ".", "mean", "(", "out_features", "[", "i", "]", ".", "data", ",", "2", ")", ".", "data", ".", "cpu", "(", ")", "\n", "\n", "# compute the accuracy", "\n", "", "pred", "=", "output", ".", "data", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "equal_flag", "=", "pred", ".", "eq", "(", "target", ".", "cuda", "(", ")", ")", ".", "cpu", "(", ")", "\n", "correct", "+=", "equal_flag", ".", "sum", "(", ")", "\n", "\n", "# construct the sample matrix", "\n", "for", "i", "in", "range", "(", "data", ".", "size", "(", "0", ")", ")", ":", "\n", "            ", "label", "=", "target", "[", "i", "]", "\n", "if", "num_sample_per_class", "[", "label", "]", "==", "0", ":", "\n", "                ", "out_count", "=", "0", "\n", "for", "out", "in", "out_features", ":", "\n", "                    ", "list_features", "[", "out_count", "]", "[", "label", "]", "=", "out", "[", "i", "]", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "out_count", "+=", "1", "\n", "", "", "else", ":", "\n", "                ", "out_count", "=", "0", "\n", "for", "out", "in", "out_features", ":", "\n", "                    ", "list_features", "[", "out_count", "]", "[", "label", "]", "=", "torch", ".", "cat", "(", "(", "list_features", "[", "out_count", "]", "[", "label", "]", ",", "out", "[", "i", "]", ".", "view", "(", "1", ",", "-", "1", ")", ")", ",", "0", ")", "\n", "out_count", "+=", "1", "\n", "", "", "num_sample_per_class", "[", "label", "]", "+=", "1", "\n", "\n", "", "", "sample_class_mean", "=", "[", "]", "\n", "out_count", "=", "0", "\n", "for", "num_feature", "in", "feature_list", ":", "\n", "        ", "temp_list", "=", "torch", ".", "Tensor", "(", "num_classes", ",", "int", "(", "num_feature", ")", ")", ".", "cpu", "(", ")", "\n", "for", "j", "in", "range", "(", "num_classes", ")", ":", "\n", "            ", "temp_list", "[", "j", "]", "=", "torch", ".", "mean", "(", "list_features", "[", "out_count", "]", "[", "j", "]", ",", "0", ")", "\n", "", "sample_class_mean", ".", "append", "(", "temp_list", ")", "\n", "out_count", "+=", "1", "\n", "\n", "", "precision", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "num_output", ")", ":", "\n", "        ", "X", "=", "0", "\n", "for", "i", "in", "range", "(", "num_classes", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "X", "=", "list_features", "[", "k", "]", "[", "i", "]", "-", "sample_class_mean", "[", "k", "]", "[", "i", "]", "\n", "", "else", ":", "\n", "                ", "X", "=", "torch", ".", "cat", "(", "(", "X", ",", "list_features", "[", "k", "]", "[", "i", "]", "-", "sample_class_mean", "[", "k", "]", "[", "i", "]", ")", ",", "0", ")", "\n", "\n", "# find inverse", "\n", "", "", "group_lasso", ".", "fit", "(", "X", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "temp_precision", "=", "group_lasso", ".", "precision_", "\n", "temp_precision", "=", "torch", ".", "from_numpy", "(", "temp_precision", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "precision", ".", "append", "(", "temp_precision", ")", "\n", "\n", "", "print", "(", "'\\n Training Accuracy:({:.2f}%)\\n'", ".", "format", "(", "100.", "*", "correct", "/", "total", ")", ")", "\n", "\n", "return", "sample_class_mean", ",", "precision", "\n", "\n"]], "home.repos.pwc.inspect_result.deeplearning-wisc_gradnorm_ood.utils.mahalanobis_lib.get_Mahalanobis_score": [[94, 150], ["range", "torch.autograd.Variable", "data.cuda.cuda", "model", "torch.mean.view", "torch.mean", "range", "sample_mean[].index_select", "torch.mean", "torch.mean.backward", "torch.ge", "torch.add", "model", "torch.mean.view", "torch.mean", "range", "torch.max", "numpy.asarray", "torch.mean.size", "torch.mean.size", "torch.cat.max", "torch.autograd.Variable", "torch.mm().diag", "torch.mean.size", "torch.mean.size", "torch.cat.cpu().numpy", "torch.cat.reshape", "numpy.concatenate", "torch.mm().diag", "term_gau.view", "torch.cat", "torch.ge.float", "torch.autograd.Variable", "torch.mm().diag", "term_gau.view", "torch.cat", "torch.mm", "torch.cat.cpu", "torch.cat.reshape", "torch.mm", "term_gau.view", "torch.mm", "zero_f.t", "torch.mm", "term_gau.view", "torch.mm", "zero_f.t", "torch.autograd.Variable", "torch.mm", "zero_f.t"], "function", ["None"], ["", "def", "get_Mahalanobis_score", "(", "inputs", ",", "model", ",", "num_classes", ",", "sample_mean", ",", "precision", ",", "num_output", ",", "magnitude", ")", ":", "\n", "\n", "    ", "for", "layer_index", "in", "range", "(", "num_output", ")", ":", "\n", "\n", "        ", "data", "=", "Variable", "(", "inputs", ",", "requires_grad", "=", "True", ")", "\n", "data", "=", "data", ".", "cuda", "(", ")", "\n", "\n", "out_features", "=", "model", "(", "x", "=", "data", ",", "layer_index", "=", "layer_index", ")", "\n", "out_features", "=", "out_features", ".", "view", "(", "out_features", ".", "size", "(", "0", ")", ",", "out_features", ".", "size", "(", "1", ")", ",", "-", "1", ")", "\n", "out_features", "=", "torch", ".", "mean", "(", "out_features", ",", "2", ")", "\n", "\n", "gaussian_score", "=", "0", "\n", "for", "i", "in", "range", "(", "num_classes", ")", ":", "\n", "            ", "batch_sample_mean", "=", "sample_mean", "[", "layer_index", "]", "[", "i", "]", "\n", "zero_f", "=", "out_features", ".", "data", "-", "batch_sample_mean", "\n", "term_gau", "=", "-", "0.5", "*", "torch", ".", "mm", "(", "torch", ".", "mm", "(", "zero_f", ",", "precision", "[", "layer_index", "]", ")", ",", "zero_f", ".", "t", "(", ")", ")", ".", "diag", "(", ")", "\n", "if", "i", "==", "0", ":", "\n", "                ", "gaussian_score", "=", "term_gau", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "", "else", ":", "\n", "                ", "gaussian_score", "=", "torch", ".", "cat", "(", "(", "gaussian_score", ",", "term_gau", ".", "view", "(", "-", "1", ",", "1", ")", ")", ",", "1", ")", "\n", "\n", "# Input_processing", "\n", "", "", "sample_pred", "=", "gaussian_score", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "batch_sample_mean", "=", "sample_mean", "[", "layer_index", "]", ".", "index_select", "(", "0", ",", "sample_pred", ")", "\n", "zero_f", "=", "out_features", "-", "Variable", "(", "batch_sample_mean", ")", "\n", "pure_gau", "=", "-", "0.5", "*", "torch", ".", "mm", "(", "torch", ".", "mm", "(", "zero_f", ",", "Variable", "(", "precision", "[", "layer_index", "]", ")", ")", ",", "zero_f", ".", "t", "(", ")", ")", ".", "diag", "(", ")", "\n", "loss", "=", "torch", ".", "mean", "(", "-", "pure_gau", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "gradient", "=", "torch", ".", "ge", "(", "data", ".", "grad", ".", "data", ",", "0", ")", "\n", "gradient", "=", "(", "gradient", ".", "float", "(", ")", "-", "0.5", ")", "*", "2", "\n", "\n", "tempInputs", "=", "torch", ".", "add", "(", "data", ".", "data", ",", "-", "magnitude", ",", "gradient", ")", "\n", "\n", "noise_out_features", "=", "model", "(", "x", "=", "Variable", "(", "tempInputs", ")", ",", "layer_index", "=", "layer_index", ")", "\n", "noise_out_features", "=", "noise_out_features", ".", "view", "(", "noise_out_features", ".", "size", "(", "0", ")", ",", "noise_out_features", ".", "size", "(", "1", ")", ",", "-", "1", ")", "\n", "noise_out_features", "=", "torch", ".", "mean", "(", "noise_out_features", ",", "2", ")", "\n", "noise_gaussian_score", "=", "0", "\n", "for", "i", "in", "range", "(", "num_classes", ")", ":", "\n", "            ", "batch_sample_mean", "=", "sample_mean", "[", "layer_index", "]", "[", "i", "]", "\n", "zero_f", "=", "noise_out_features", ".", "data", "-", "batch_sample_mean", "\n", "term_gau", "=", "-", "0.5", "*", "torch", ".", "mm", "(", "torch", ".", "mm", "(", "zero_f", ",", "precision", "[", "layer_index", "]", ")", ",", "zero_f", ".", "t", "(", ")", ")", ".", "diag", "(", ")", "\n", "if", "i", "==", "0", ":", "\n", "                ", "noise_gaussian_score", "=", "term_gau", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "", "else", ":", "\n", "                ", "noise_gaussian_score", "=", "torch", ".", "cat", "(", "(", "noise_gaussian_score", ",", "term_gau", ".", "view", "(", "-", "1", ",", "1", ")", ")", ",", "1", ")", "\n", "\n", "", "", "noise_gaussian_score", ",", "_", "=", "torch", ".", "max", "(", "noise_gaussian_score", ",", "dim", "=", "1", ")", "\n", "\n", "noise_gaussian_score", "=", "np", ".", "asarray", "(", "noise_gaussian_score", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "if", "layer_index", "==", "0", ":", "\n", "            ", "Mahalanobis_scores", "=", "noise_gaussian_score", ".", "reshape", "(", "(", "noise_gaussian_score", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "Mahalanobis_scores", "=", "np", ".", "concatenate", "(", "(", "Mahalanobis_scores", ",", "noise_gaussian_score", ".", "reshape", "(", "(", "noise_gaussian_score", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ")", ")", ",", "axis", "=", "1", ")", "\n", "\n", "", "", "return", "Mahalanobis_scores", "\n", "", ""]]}