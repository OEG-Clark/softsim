{"home.repos.pwc.inspect_result.Maxwe11y_BiERU.None.BiERU.MaskedNLLLoss.__init__": [[62, 67], ["torch.Module.__init__", "torch.NLLLoss", "torch.NLLLoss", "torch.NLLLoss", "torch.NLLLoss"], "methods", ["home.repos.pwc.inspect_result.Maxwe11y_BiERU.None.dataloader.MELDDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "weight", "=", "None", ")", ":", "\n", "        ", "super", "(", "MaskedNLLLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "weight", "=", "weight", "\n", "self", ".", "loss", "=", "nn", ".", "NLLLoss", "(", "weight", "=", "weight", ",", "\n", "reduction", "=", "'sum'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Maxwe11y_BiERU.None.BiERU.MaskedNLLLoss.forward": [[68, 81], ["mask.view", "type", "type", "BiERU.MaskedNLLLoss.loss", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "BiERU.MaskedNLLLoss.loss", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "mask.view.squeeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "pred", ",", "target", ",", "mask", ")", ":", "\n", "        ", "\"\"\"\n        pred -> batch*seq_len, n_classes\n        target -> batch*seq_len\n        mask -> batch, seq_len\n        \"\"\"", "\n", "mask_", "=", "mask", ".", "view", "(", "-", "1", ",", "1", ")", "# batch*seq_len, 1", "\n", "if", "type", "(", "self", ".", "weight", ")", "==", "type", "(", "None", ")", ":", "\n", "            ", "loss", "=", "self", ".", "loss", "(", "pred", "*", "mask_", ",", "target", ")", "/", "torch", ".", "sum", "(", "mask", ")", "\n", "", "else", ":", "\n", "            ", "loss", "=", "self", ".", "loss", "(", "pred", "*", "mask_", ",", "target", ")", "/", "torch", ".", "sum", "(", "self", ".", "weight", "[", "target", "]", "*", "mask_", ".", "squeeze", "(", ")", ")", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.Maxwe11y_BiERU.None.BiERU.RNTN.__init__": [[85, 111], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LSTMCell", "torch.LSTMCell", "torch.LSTMCell", "torch.LSTMCell", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.Maxwe11y_BiERU.None.dataloader.MELDDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ",", "n_class", ",", "l", ")", ":", "\n", "        ", "super", "(", "RNTN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "n_class", "=", "n_class", "\n", "self", ".", "window", "=", "5", "\n", "self", ".", "V", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "(", "input_dim", ",", "1", ",", "2", "*", "input_dim", ",", "2", "*", "input_dim", ")", ")", ")", "\n", "#self.UU = nn.Parameter(torch.zeros((input_dim, 1, 2*input_dim, 10)))", "\n", "#self.VV = nn.Parameter(torch.zeros((input_dim, 1, 10, 2*input_dim)))", "\n", "#self.diag = nn.Parameter(torch.zeros((1, 1, 2*input_dim, 2*input_dim)))", "\n", "#self.V_s = nn.Parameter(torch.zeros((input_dim, 1, input_dim, input_dim))).cuda()", "\n", "\n", "self", ".", "W", "=", "nn", ".", "Linear", "(", "2", "*", "input_dim", ",", "input_dim", ")", "\n", "\n", "self", ".", "Ws", "=", "nn", ".", "Linear", "(", "2", "*", "(", "52", "+", "input_dim", ")", ",", "n_class", ")", "\n", "#self.We = nn.Linear(2*input_dim, n_class)", "\n", "self", ".", "gru", "=", "nn", ".", "LSTMCell", "(", "input_size", "=", "input_dim", ",", "hidden_size", "=", "input_dim", ")", "\n", "self", ".", "ac", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "self", ".", "ac_linear", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "ac_tanh", "=", "nn", ".", "Tanh", "(", ")", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "\n", "self", ".", "l", "=", "l", "\n", "self", ".", "cnn3", "=", "nn", ".", "Conv1d", "(", "in_channels", "=", "1", ",", "out_channels", "=", "1", ",", "kernel_size", "=", "5", ",", "padding", "=", "4", ",", "stride", "=", "2", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "0.8", ")", "\n", "# self.bilstm = nn.LSTM(input_size=input_dim, hidden_size=input_dim, dropout=0.1, bidirectional=True)", "\n", "if", "l", ":", "\n", "            ", "self", ".", "L", "=", "nn", ".", "Linear", "(", "2", "*", "input_dim", ",", "input_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Maxwe11y_BiERU.None.BiERU.RNTN._reverse_seq": [[112, 126], ["X.transpose", "torch.sum().int", "torch.sum().int", "torch.sum().int", "torch.sum().int", "torch.sum().int", "torch.sum().int", "torch.sum().int", "torch.sum().int", "torch.sum().int", "torch.sum().int", "torch.sum().int", "torch.sum().int", "torch.sum().int", "torch.sum().int", "torch.sum().int", "torch.sum().int", "zip", "torch.nn.utils.rnn.pad_sequence", "torch.nn.utils.rnn.pad_sequence", "torch.nn.utils.rnn.pad_sequence", "torch.nn.utils.rnn.pad_sequence", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "xfs.append", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "", "def", "_reverse_seq", "(", "self", ",", "X", ",", "mask", ")", ":", "\n", "        ", "\"\"\"\n        X -> seq_len, batch, dim\n        mask -> batch, seq_len\n        \"\"\"", "\n", "X_", "=", "X", ".", "transpose", "(", "0", ",", "1", ")", "\n", "mask_sum", "=", "torch", ".", "sum", "(", "mask", ",", "1", ")", ".", "int", "(", ")", "\n", "\n", "xfs", "=", "[", "]", "\n", "for", "x", ",", "c", "in", "zip", "(", "X_", ",", "mask_sum", ")", ":", "\n", "            ", "xf", "=", "torch", ".", "flip", "(", "x", "[", ":", "c", "]", ",", "[", "0", "]", ")", "\n", "xfs", ".", "append", "(", "xf", ")", "\n", "\n", "", "return", "pad_sequence", "(", "xfs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Maxwe11y_BiERU.None.BiERU.RNTN.forward": [[127, 227], ["torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.where().cuda", "torch.where().cuda", "torch.where().cuda", "torch.where().cuda", "torch.where().cuda", "torch.where().cuda", "torch.where().cuda", "torch.where().cuda", "torch.where().cuda", "torch.where().cuda", "torch.where().cuda", "torch.where().cuda", "torch.where().cuda", "torch.where().cuda", "torch.where().cuda", "torch.where().cuda", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "range", "BiERU.RNTN._reverse_seq", "range", "torch.cat.contiguous().view", "torch.cat.contiguous().view", "torch.cat.contiguous().view", "torch.cat.contiguous().view", "BiERU.RNTN._reverse_seq", "torch.cat.contiguous().view", "torch.cat.contiguous().view", "torch.cat.contiguous().view", "torch.cat.contiguous().view", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "BiERU.RNTN.V.size", "U.type", "U.type", "BiERU.RNTN.size", "BiERU.RNTN.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "BiERU.RNTN.Ws", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "U.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "BiERU.RNTN.ac", "BiERU.RNTN.dropout", "BiERU.RNTN.gru", "BiERU.RNTN.cnn3().squeeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "BiERU.RNTN.dropout", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "BiERU.RNTN.ac", "BiERU.RNTN.dropout", "BiERU.RNTN.gru", "BiERU.RNTN.cnn3().squeeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "BiERU.RNTN.dropout", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "BiERU.RNTN.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "BiERU.RNTN.ac", "BiERU.RNTN.dropout", "BiERU.RNTN.gru", "BiERU.RNTN.cnn3().squeeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "BiERU.RNTN.dropout", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "BiERU.RNTN.ac", "BiERU.RNTN.dropout", "BiERU.RNTN.gru", "BiERU.RNTN.cnn3().squeeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "BiERU.RNTN.dropout", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.contiguous", "torch.cat.contiguous", "torch.cat.contiguous", "torch.cat.contiguous", "torch.cat.contiguous", "torch.cat.contiguous", "torch.cat.contiguous", "torch.cat.contiguous", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "U.size", "U.size", "U.size", "U.size", "torch.cat.unsqueeze.matmul().matmul().contiguous().view", "BiERU.RNTN.W", "BiERU.RNTN.cnn3", "torch.cat.unsqueeze.matmul().matmul().contiguous().view", "BiERU.RNTN.W", "BiERU.RNTN.cnn3", "torch.cat.unsqueeze.matmul().matmul().contiguous().view", "BiERU.RNTN.W", "BiERU.RNTN.cnn3", "torch.cat.unsqueeze.matmul().matmul().contiguous().view", "BiERU.RNTN.W", "BiERU.RNTN.cnn3", "BiERU.RNTN.unsqueeze", "BiERU.RNTN.unsqueeze", "BiERU.RNTN.unsqueeze", "BiERU.RNTN.unsqueeze", "torch.cat.unsqueeze.matmul().matmul().contiguous", "torch.cat.unsqueeze.size", "torch.cat.unsqueeze.matmul().matmul().contiguous", "torch.cat.unsqueeze.size", "torch.cat.unsqueeze.matmul().matmul().contiguous", "torch.cat.unsqueeze.size", "torch.cat.unsqueeze.matmul().matmul().contiguous", "torch.cat.unsqueeze.size", "torch.cat.unsqueeze.matmul().matmul", "torch.cat.unsqueeze.matmul().matmul", "torch.cat.unsqueeze.matmul().matmul", "torch.cat.unsqueeze.matmul().matmul", "torch.cat.unsqueeze.transpose", "torch.cat.unsqueeze.transpose", "torch.cat.unsqueeze.transpose", "torch.cat.unsqueeze.transpose", "torch.cat.unsqueeze.matmul", "torch.cat.unsqueeze.matmul", "torch.cat.unsqueeze.matmul", "torch.cat.unsqueeze.matmul"], "methods", ["home.repos.pwc.inspect_result.Maxwe11y_BiERU.None.BiERU.RNTN._reverse_seq", "home.repos.pwc.inspect_result.Maxwe11y_BiERU.None.BiERU.RNTN._reverse_seq"], ["", "def", "forward", "(", "self", ",", "U", ",", "mask", ")", ":", "\n", "        ", "\"\"\"\n        :param U:-->seq, batch, dim\n        :return:\n        \"\"\"", "\n", "v_mask", "=", "torch", ".", "rand", "(", "self", ".", "V", ".", "size", "(", ")", ")", "\n", "v_mask", "=", "torch", ".", "where", "(", "v_mask", ">", "0.15", ",", "torch", ".", "full_like", "(", "v_mask", ",", "1", ")", ",", "torch", ".", "full_like", "(", "v_mask", ",", "0", ")", ")", ".", "cuda", "(", ")", "\n", "self", ".", "V", "=", "nn", ".", "Parameter", "(", "self", ".", "V", "*", "v_mask", ")", "\n", "\n", "results1", "=", "torch", ".", "zeros", "(", "0", ")", ".", "type", "(", "U", ".", "type", "(", ")", ")", "\n", "results2", "=", "torch", ".", "zeros", "(", "0", ")", ".", "type", "(", "U", ".", "type", "(", ")", ")", "\n", "h", "=", "torch", ".", "zeros", "(", "(", "U", ".", "size", "(", "1", ")", ",", "U", ".", "size", "(", "2", ")", ")", ")", ".", "cuda", "(", ")", "\n", "c", "=", "torch", ".", "zeros", "(", "(", "U", ".", "size", "(", "1", ")", ",", "U", ".", "size", "(", "2", ")", ")", ")", ".", "cuda", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "U", ".", "size", "(", ")", "[", "0", "]", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "#p = U[i]", "\n", "#t_t = U[i-1]", "\n", "                ", "t_t", "=", "U", "[", "i", "]", "\n", "v_cat", "=", "torch", ".", "cat", "(", "(", "t_t", ",", "t_t", ")", ",", "dim", "=", "1", ")", "\n", "m_cat", "=", "v_cat", ".", "unsqueeze", "(", "1", ")", "\n", "p", "=", "self", ".", "ac", "(", "m_cat", ".", "matmul", "(", "self", ".", "V", ")", ".", "matmul", "(", "m_cat", ".", "transpose", "(", "1", ",", "2", ")", ")", ".", "contiguous", "(", ")", ".", "view", "(", "m_cat", ".", "size", "(", ")", "[", "0", "]", ",", "-", "1", ")", "+", "self", ".", "W", "(", "\n", "v_cat", ")", ")", "\n", "p", "=", "self", ".", "dropout", "(", "p", ")", "\n", "h", ",", "c", "=", "self", ".", "gru", "(", "p", ",", "(", "h", ",", "c", ")", ")", "\n", "h3", "=", "self", ".", "cnn3", "(", "p", ".", "unsqueeze", "(", "0", ")", ")", ".", "squeeze", "(", "0", ")", "\n", "h_cat", "=", "torch", ".", "cat", "(", "(", "h", ",", "h3", ")", ",", "dim", "=", "1", ")", "\n", "\n", "h_cat", "=", "self", ".", "dropout", "(", "h_cat", ")", "\n", "results1", "=", "torch", ".", "cat", "(", "(", "results1", ",", "h_cat", ")", ")", "\n", "\n", "", "else", ":", "\n", "\n", "                ", "l_t", "=", "U", "[", "i", "-", "1", "]", "\n", "#l_t = p", "\n", "t_t", "=", "U", "[", "i", "]", "\n", "\n", "v_cat", "=", "torch", ".", "cat", "(", "(", "l_t", ",", "t_t", ")", ",", "dim", "=", "1", ")", "\n", "m_cat", "=", "v_cat", ".", "unsqueeze", "(", "1", ")", "\n", "p", "=", "self", ".", "ac", "(", "m_cat", ".", "matmul", "(", "self", ".", "V", ")", ".", "matmul", "(", "m_cat", ".", "transpose", "(", "1", ",", "2", ")", ")", ".", "contiguous", "(", ")", ".", "view", "(", "m_cat", ".", "size", "(", ")", "[", "0", "]", ",", "-", "1", ")", "+", "self", ".", "W", "(", "\n", "v_cat", ")", ")", "\n", "#p = self.ac_linear(p)", "\n", "p", "=", "self", ".", "dropout", "(", "p", ")", "\n", "h", ",", "c", "=", "self", ".", "gru", "(", "p", ",", "(", "h", ",", "c", ")", ")", "\n", "h3", "=", "self", ".", "cnn3", "(", "p", ".", "unsqueeze", "(", "0", ")", ")", ".", "squeeze", "(", "0", ")", "\n", "h_cat", "=", "torch", ".", "cat", "(", "(", "h", ",", "h3", ")", ",", "dim", "=", "1", ")", "\n", "h_cat", "=", "self", ".", "dropout", "(", "h_cat", ")", "\n", "results1", "=", "torch", ".", "cat", "(", "(", "results1", ",", "h_cat", ")", ")", "\n", "\n", "\n", "", "", "rever_U", "=", "self", ".", "_reverse_seq", "(", "U", ",", "mask", ")", "\n", "\n", "for", "i", "in", "range", "(", "rever_U", ".", "size", "(", ")", "[", "0", "]", ")", ":", "\n", "# get temp and last, (batch, dim)", "\n", "            ", "if", "i", "==", "0", ":", "\n", "#p = rever_U[i]", "\n", "#t_t = rever_U[i-1]", "\n", "                ", "t_t", "=", "rever_U", "[", "i", "]", "\n", "v_cat", "=", "torch", ".", "cat", "(", "(", "t_t", ",", "t_t", ")", ",", "dim", "=", "1", ")", "\n", "m_cat", "=", "v_cat", ".", "unsqueeze", "(", "1", ")", "\n", "p", "=", "self", ".", "ac", "(", "m_cat", ".", "matmul", "(", "self", ".", "V", ")", ".", "matmul", "(", "m_cat", ".", "transpose", "(", "1", ",", "2", ")", ")", ".", "contiguous", "(", ")", ".", "view", "(", "m_cat", ".", "size", "(", ")", "[", "0", "]", ",", "-", "1", ")", "+", "self", ".", "W", "(", "\n", "v_cat", ")", ")", "\n", "p", "=", "self", ".", "dropout", "(", "p", ")", "\n", "h", ",", "c", "=", "self", ".", "gru", "(", "p", ",", "(", "h", ",", "c", ")", ")", "\n", "\n", "h3", "=", "self", ".", "cnn3", "(", "p", ".", "unsqueeze", "(", "0", ")", ")", ".", "squeeze", "(", "0", ")", "\n", "h_cat", "=", "torch", ".", "cat", "(", "(", "h", ",", "h3", ")", ",", "dim", "=", "1", ")", "\n", "h_cat", "=", "self", ".", "dropout", "(", "h_cat", ")", "\n", "results2", "=", "torch", ".", "cat", "(", "(", "results2", ",", "h_cat", ")", ")", "\n", "", "else", ":", "\n", "\n", "                ", "l_t", "=", "rever_U", "[", "i", "-", "1", "]", "\n", "#l_t = p", "\n", "t_t", "=", "rever_U", "[", "i", "]", "\n", "v_cat", "=", "torch", ".", "cat", "(", "(", "l_t", ",", "t_t", ")", ",", "dim", "=", "1", ")", "\n", "m_cat", "=", "v_cat", ".", "unsqueeze", "(", "1", ")", "\n", "p", "=", "self", ".", "ac", "(", "\n", "m_cat", ".", "matmul", "(", "self", ".", "V", ")", ".", "matmul", "(", "m_cat", ".", "transpose", "(", "1", ",", "2", ")", ")", ".", "contiguous", "(", ")", ".", "view", "(", "m_cat", ".", "size", "(", ")", "[", "0", "]", ",", "-", "1", ")", "+", "self", ".", "W", "(", "\n", "v_cat", ")", ")", "\n", "#p = self.ac_linear(p)", "\n", "p", "=", "self", ".", "dropout", "(", "p", ")", "\n", "# h = self.gru(p, h)", "\n", "h", ",", "c", "=", "self", ".", "gru", "(", "p", ",", "(", "h", ",", "c", ")", ")", "\n", "\n", "\n", "h3", "=", "self", ".", "cnn3", "(", "p", ".", "unsqueeze", "(", "0", ")", ")", ".", "squeeze", "(", "0", ")", "\n", "h_cat", "=", "torch", ".", "cat", "(", "(", "h", ",", "h3", ")", ",", "dim", "=", "1", ")", "\n", "\n", "h_cat", "=", "self", ".", "dropout", "(", "h_cat", ")", "\n", "results2", "=", "torch", ".", "cat", "(", "(", "results2", ",", "h_cat", ")", ")", "\n", "\n", "", "", "results2", "=", "results2", ".", "contiguous", "(", ")", ".", "view", "(", "rever_U", ".", "size", "(", "0", ")", ",", "rever_U", ".", "size", "(", "1", ")", ",", "-", "1", ")", "\n", "results2", "=", "self", ".", "_reverse_seq", "(", "results2", ",", "mask", ")", "\n", "results2", "=", "results2", ".", "contiguous", "(", ")", ".", "view", "(", "results1", ".", "size", "(", "0", ")", ",", "results1", ".", "size", "(", "1", ")", ")", "\n", "\n", "#results = torch.log_softmax(self.Ws(results1), dim=1)", "\n", "results", "=", "torch", ".", "log_softmax", "(", "self", ".", "Ws", "(", "torch", ".", "cat", "(", "(", "results1", ",", "results2", ")", ",", "dim", "=", "1", ")", ")", ",", "dim", "=", "1", ")", "\n", "# results = torch.log_softmax(self.Ws(torch.cat((results1, results2, bioutput), dim=1)), dim=1)", "\n", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.Maxwe11y_BiERU.None.BiERU.Classifier.__init__": [[231, 234], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.Maxwe11y_BiERU.None.dataloader.MELDDataset.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Classifier", ",", "self", ")", ".", "__init__", "(", ")", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Maxwe11y_BiERU.None.BiERU.Classifier.forward": [[235, 237], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "*", "input", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Maxwe11y_BiERU.None.BiERU.get_train_valid_sampler": [[27, 32], ["len", "list", "int", "range", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler"], "function", ["None"], ["def", "get_train_valid_sampler", "(", "trainset", ",", "valid", "=", "0.1", ")", ":", "\n", "    ", "size", "=", "len", "(", "trainset", ")", "\n", "idx", "=", "list", "(", "range", "(", "size", ")", ")", "\n", "split", "=", "int", "(", "valid", "*", "size", ")", "\n", "return", "SubsetRandomSampler", "(", "idx", "[", "split", ":", "]", ")", ",", "SubsetRandomSampler", "(", "idx", "[", ":", "split", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Maxwe11y_BiERU.None.BiERU.get_IEMOCAP_loaders": [[34, 58], ["dataloader.IEMOCAPDataset", "BiERU.get_train_valid_sampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "dataloader.IEMOCAPDataset", "torch.utils.data.DataLoader"], "function", ["home.repos.pwc.inspect_result.Maxwe11y_BiERU.None.BiERU.get_train_valid_sampler"], ["", "def", "get_IEMOCAP_loaders", "(", "path", ",", "batch_size", "=", "32", ",", "valid", "=", "0.1", ",", "num_workers", "=", "0", ",", "pin_memory", "=", "False", ")", ":", "\n", "    ", "trainset", "=", "IEMOCAPDataset", "(", "path", "=", "path", ")", "\n", "train_sampler", ",", "valid_sampler", "=", "get_train_valid_sampler", "(", "trainset", ",", "valid", ")", "\n", "train_loader", "=", "DataLoader", "(", "trainset", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "sampler", "=", "train_sampler", ",", "\n", "collate_fn", "=", "trainset", ".", "collate_fn", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "pin_memory", "=", "pin_memory", ")", "\n", "valid_loader", "=", "DataLoader", "(", "trainset", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "sampler", "=", "valid_sampler", ",", "\n", "collate_fn", "=", "trainset", ".", "collate_fn", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "pin_memory", "=", "pin_memory", ")", "\n", "\n", "testset", "=", "IEMOCAPDataset", "(", "path", "=", "path", ",", "train", "=", "False", ")", "\n", "test_loader", "=", "DataLoader", "(", "testset", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "collate_fn", "=", "testset", ".", "collate_fn", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "pin_memory", "=", "pin_memory", ")", "\n", "\n", "return", "train_loader", ",", "valid_loader", ",", "test_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.Maxwe11y_BiERU.None.BiERU.train_or_eval_model": [[239, 288], ["round", "round", "round", "model.train", "model.eval", "model", "label.view", "loss_function", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "losses.append", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "optimizer.zero_grad", "torch.argmax.data.cpu().numpy", "label.view.data.cpu().numpy", "umask.view().cpu().numpy", "loss_function.backward", "optimizer.step", "float", "float", "float", "numpy.sum", "numpy.sum", "sklearn.metrics.accuracy_score", "sklearn.metrics.f1_score", "d.cuda", "loss_function.item", "masks[].sum", "torch.argmax.data.cpu", "label.view.data.cpu", "umask.view().cpu", "umask.view"], "function", ["None"], ["", "", "def", "train_or_eval_model", "(", "model", ",", "loss_function", ",", "dataloader", ",", "epoch", ",", "optimizer", "=", "None", ",", "train", "=", "False", ")", ":", "\n", "    ", "losses", "=", "[", "]", "\n", "preds", "=", "[", "]", "\n", "labels", "=", "[", "]", "\n", "masks", "=", "[", "]", "\n", "assert", "not", "train", "or", "optimizer", "!=", "None", "\n", "if", "train", ":", "\n", "        ", "model", ".", "train", "(", ")", "\n", "", "else", ":", "\n", "        ", "model", ".", "eval", "(", ")", "\n", "#it = 0", "\n", "", "for", "data", "in", "dataloader", ":", "\n", "        ", "if", "train", ":", "\n", "            ", "optimizer", ".", "zero_grad", "(", ")", "\n", "# import ipdb;ipdb.set_trace()", "\n", "", "textf", ",", "visuf", ",", "acouf", ",", "qmask", ",", "umask", ",", "label", "=", "[", "d", ".", "cuda", "(", ")", "for", "d", "in", "data", "[", ":", "-", "1", "]", "]", "if", "cuda", "else", "data", "[", ":", "-", "1", "]", "\n", "# log_prob = model(torch.cat((textf,acouf,visuf),dim=-1), qmask,umask) # seq_len, batch, n_classes", "\n", "log_prob", "=", "model", "(", "textf", ",", "umask", ")", "# batch*seq_len, n_classes", "\n", "labels_", "=", "label", ".", "view", "(", "-", "1", ")", "# batch*seq_len", "\n", "loss", "=", "loss_function", "(", "log_prob", ",", "labels_", ",", "umask", ")", "\n", "\n", "#if train and it % 10 == 0:", "\n", "#    test_loss, test_acc, test_label, test_pred, test_mask, test_fscore = train_or_eval_model(model,", "\n", "#                                                                                            loss_function,", "\n", "#                                                                                            test_loader, e)", "\n", "#    print(test_acc)", "\n", "pred_", "=", "torch", ".", "argmax", "(", "log_prob", ",", "1", ")", "# batch*seq_len", "\n", "preds", ".", "append", "(", "pred_", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "labels", ".", "append", "(", "labels_", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "masks", ".", "append", "(", "umask", ".", "view", "(", "-", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "losses", ".", "append", "(", "loss", ".", "item", "(", ")", "*", "masks", "[", "-", "1", "]", ".", "sum", "(", ")", ")", "\n", "if", "train", ":", "\n", "            ", "loss", ".", "backward", "(", ")", "\n", "# print(torch.mean(model.V.grad))", "\n", "optimizer", ".", "step", "(", ")", "\n", "#it += 1", "\n", "", "", "if", "preds", "!=", "[", "]", ":", "\n", "        ", "preds", "=", "np", ".", "concatenate", "(", "preds", ")", "\n", "labels", "=", "np", ".", "concatenate", "(", "labels", ")", "\n", "masks", "=", "np", ".", "concatenate", "(", "masks", ")", "\n", "", "else", ":", "\n", "        ", "return", "float", "(", "'nan'", ")", ",", "float", "(", "'nan'", ")", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "float", "(", "'nan'", ")", "\n", "\n", "", "avg_loss", "=", "round", "(", "np", ".", "sum", "(", "losses", ")", "/", "np", ".", "sum", "(", "masks", ")", ",", "4", ")", "\n", "avg_accuracy", "=", "round", "(", "accuracy_score", "(", "labels", ",", "preds", ",", "sample_weight", "=", "masks", ")", "*", "100", ",", "2", ")", "\n", "avg_fscore", "=", "round", "(", "f1_score", "(", "labels", ",", "preds", ",", "sample_weight", "=", "masks", ",", "average", "=", "'weighted'", ")", "*", "100", ",", "2", ")", "\n", "return", "avg_loss", ",", "avg_accuracy", ",", "labels", ",", "preds", ",", "masks", ",", "avg_fscore", "\n", "\n"]], "home.repos.pwc.inspect_result.Maxwe11y_BiERU.None.dataloader.IEMOCAPDataset.__init__": [[10, 22], ["pickle.load", "len", "open"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "path", ",", "train", "=", "True", ")", ":", "\n", "        ", "self", ".", "videoIDs", ",", "self", ".", "videoSpeakers", ",", "self", ".", "videoLabels", ",", "self", ".", "videoText", ",", "self", ".", "videoAudio", ",", "self", ".", "videoVisual", ",", "self", ".", "videoSentence", ",", "self", ".", "trainVid", ",", "self", ".", "testVid", "=", "pickle", ".", "load", "(", "open", "(", "path", ",", "'rb'", ")", ",", "encoding", "=", "'latin1'", ")", "\n", "'''\n        label index mapping = {'hap':0, 'sad':1, 'neu':2, 'ang':3, 'exc':4, 'fru':5}\n        '''", "\n", "\n", "\n", "self", ".", "keys", "=", "[", "x", "for", "x", "in", "(", "self", ".", "trainVid", "if", "train", "else", "self", ".", "testVid", ")", "]", "\n", "\n", "self", ".", "len", "=", "len", "(", "self", ".", "keys", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Maxwe11y_BiERU.None.dataloader.IEMOCAPDataset.__getitem__": [[23, 33], ["torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.LongTensor", "len"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "vid", "=", "self", ".", "keys", "[", "index", "]", "\n", "return", "torch", ".", "FloatTensor", "(", "self", ".", "videoText", "[", "vid", "]", ")", ",", "torch", ".", "FloatTensor", "(", "self", ".", "videoVisual", "[", "vid", "]", ")", ",", "torch", ".", "FloatTensor", "(", "self", ".", "videoAudio", "[", "vid", "]", ")", ",", "torch", ".", "FloatTensor", "(", "[", "[", "1", ",", "0", "]", "if", "x", "==", "'M'", "else", "[", "0", ",", "1", "]", "for", "x", "in", "self", ".", "videoSpeakers", "[", "vid", "]", "]", ")", ",", "torch", ".", "FloatTensor", "(", "[", "1", "]", "*", "len", "(", "self", ".", "videoLabels", "[", "vid", "]", ")", ")", ",", "torch", ".", "LongTensor", "(", "self", ".", "videoLabels", "[", "vid", "]", ")", ",", "vid", "\n", "\n"]], "home.repos.pwc.inspect_result.Maxwe11y_BiERU.None.dataloader.IEMOCAPDataset.__len__": [[34, 36], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "len", "\n", "\n"]], "home.repos.pwc.inspect_result.Maxwe11y_BiERU.None.dataloader.IEMOCAPDataset.collate_fn": [[37, 40], ["pandas.DataFrame", "torch.nn.utils.rnn.pad_sequence", "torch.nn.utils.rnn.pad_sequence", "dat[].tolist"], "methods", ["None"], ["", "def", "collate_fn", "(", "self", ",", "data", ")", ":", "\n", "        ", "dat", "=", "pd", ".", "DataFrame", "(", "data", ")", "\n", "return", "[", "pad_sequence", "(", "dat", "[", "i", "]", ")", "if", "i", "<", "4", "else", "pad_sequence", "(", "dat", "[", "i", "]", ",", "True", ")", "if", "i", "<", "6", "else", "dat", "[", "i", "]", ".", "tolist", "(", ")", "for", "i", "in", "dat", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Maxwe11y_BiERU.None.dataloader.AVECDataset.__init__": [[43, 51], ["pickle.load", "len", "open"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "path", ",", "train", "=", "True", ")", ":", "\n", "        ", "self", ".", "videoIDs", ",", "self", ".", "videoSpeakers", ",", "self", ".", "videoLabels", ",", "self", ".", "videoText", ",", "self", ".", "videoAudio", ",", "self", ".", "videoVisual", ",", "self", ".", "videoSentence", ",", "self", ".", "trainVid", ",", "self", ".", "testVid", "=", "pickle", ".", "load", "(", "open", "(", "path", ",", "'rb'", ")", ",", "encoding", "=", "'latin1'", ")", "\n", "\n", "self", ".", "keys", "=", "[", "x", "for", "x", "in", "(", "self", ".", "trainVid", "if", "train", "else", "self", ".", "testVid", ")", "]", "\n", "\n", "self", ".", "len", "=", "len", "(", "self", ".", "keys", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Maxwe11y_BiERU.None.dataloader.AVECDataset.__getitem__": [[52, 61], ["torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "len"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "vid", "=", "self", ".", "keys", "[", "index", "]", "\n", "return", "torch", ".", "FloatTensor", "(", "self", ".", "videoText", "[", "vid", "]", ")", ",", "torch", ".", "FloatTensor", "(", "self", ".", "videoVisual", "[", "vid", "]", ")", ",", "torch", ".", "FloatTensor", "(", "self", ".", "videoAudio", "[", "vid", "]", ")", ",", "torch", ".", "FloatTensor", "(", "[", "[", "1", ",", "0", "]", "if", "x", "==", "'user'", "else", "[", "0", ",", "1", "]", "for", "x", "in", "self", ".", "videoSpeakers", "[", "vid", "]", "]", ")", ",", "torch", ".", "FloatTensor", "(", "[", "1", "]", "*", "len", "(", "self", ".", "videoLabels", "[", "vid", "]", ")", ")", ",", "torch", ".", "FloatTensor", "(", "self", ".", "videoLabels", "[", "vid", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Maxwe11y_BiERU.None.dataloader.AVECDataset.__len__": [[62, 64], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "len", "\n", "\n"]], "home.repos.pwc.inspect_result.Maxwe11y_BiERU.None.dataloader.AVECDataset.collate_fn": [[65, 68], ["pandas.DataFrame", "torch.nn.utils.rnn.pad_sequence", "torch.nn.utils.rnn.pad_sequence"], "methods", ["None"], ["", "def", "collate_fn", "(", "self", ",", "data", ")", ":", "\n", "        ", "dat", "=", "pd", ".", "DataFrame", "(", "data", ")", "\n", "return", "[", "pad_sequence", "(", "dat", "[", "i", "]", ")", "if", "i", "<", "4", "else", "pad_sequence", "(", "dat", "[", "i", "]", ",", "True", ")", "for", "i", "in", "dat", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Maxwe11y_BiERU.None.dataloader.MELDDataset.__init__": [[72, 87], ["len", "pickle.load", "open", "pickle.load", "open"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "path", ",", "n_classes", ",", "train", "=", "True", ")", ":", "\n", "        ", "if", "n_classes", "==", "3", ":", "\n", "            ", "self", ".", "videoIDs", ",", "self", ".", "videoSpeakers", ",", "_", ",", "self", ".", "videoText", ",", "self", ".", "videoAudio", ",", "self", ".", "videoSentence", ",", "self", ".", "trainVid", ",", "self", ".", "testVid", ",", "self", ".", "videoLabels", "=", "pickle", ".", "load", "(", "open", "(", "path", ",", "'rb'", ")", ")", "\n", "", "elif", "n_classes", "==", "7", ":", "\n", "            ", "self", ".", "videoIDs", ",", "self", ".", "videoSpeakers", ",", "self", ".", "videoLabels", ",", "self", ".", "videoText", ",", "self", ".", "videoAudio", ",", "self", ".", "videoSentence", ",", "self", ".", "trainVid", ",", "self", ".", "testVid", ",", "_", "=", "pickle", ".", "load", "(", "open", "(", "path", ",", "'rb'", ")", ")", "\n", "", "'''\n        label index mapping = {'hap':0, 'sad':1, 'neu':2, 'ang':3, 'exc':4, 'fru':5}\n        '''", "\n", "self", ".", "keys", "=", "[", "x", "for", "x", "in", "(", "self", ".", "trainVid", "if", "train", "else", "self", ".", "testVid", ")", "]", "\n", "\n", "self", ".", "len", "=", "len", "(", "self", ".", "keys", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Maxwe11y_BiERU.None.dataloader.MELDDataset.__getitem__": [[88, 96], ["torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.LongTensor", "len"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "vid", "=", "self", ".", "keys", "[", "index", "]", "\n", "return", "torch", ".", "FloatTensor", "(", "self", ".", "videoText", "[", "vid", "]", ")", ",", "torch", ".", "FloatTensor", "(", "self", ".", "videoAudio", "[", "vid", "]", ")", ",", "torch", ".", "FloatTensor", "(", "self", ".", "videoSpeakers", "[", "vid", "]", ")", ",", "torch", ".", "FloatTensor", "(", "[", "1", "]", "*", "len", "(", "self", ".", "videoLabels", "[", "vid", "]", ")", ")", ",", "torch", ".", "LongTensor", "(", "self", ".", "videoLabels", "[", "vid", "]", ")", ",", "vid", "\n", "\n"]], "home.repos.pwc.inspect_result.Maxwe11y_BiERU.None.dataloader.MELDDataset.__len__": [[97, 99], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "len", "\n", "\n"]], "home.repos.pwc.inspect_result.Maxwe11y_BiERU.None.dataloader.MELDDataset.collate_fn": [[100, 103], ["pandas.DataFrame", "torch.nn.utils.rnn.pad_sequence", "torch.nn.utils.rnn.pad_sequence", "dat[].tolist"], "methods", ["None"], ["", "def", "collate_fn", "(", "self", ",", "data", ")", ":", "\n", "        ", "dat", "=", "pd", ".", "DataFrame", "(", "data", ")", "\n", "return", "[", "pad_sequence", "(", "dat", "[", "i", "]", ")", "if", "i", "<", "3", "else", "pad_sequence", "(", "dat", "[", "i", "]", ",", "True", ")", "if", "i", "<", "5", "else", "dat", "[", "i", "]", ".", "tolist", "(", ")", "for", "i", "in", "dat", "]", "\n", "", "", ""]]}