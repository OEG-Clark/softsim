{"home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.config_eval.add_path": [[37, 40], ["sys.path.insert"], "function", ["None"], ["\n", "if", "C", ".", "dataset", "==", "'horse2zebra'", ":", "\n", "    ", "C", ".", "dataset_path", "=", "\"/home/yf22/dataset/horse2zebra\"", "\n", "C", ".", "target_path", "=", "'/home/yf22/dataset/horse2zebra/target_train'", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations.Conv.__init__": [[64, 92], ["torch.Module.__init__", "int", "type", "slimmable_ops.USConv2d", "Conv2d", "numpy.ceil"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.Cutout.__init__"], ["\n", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "None", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "False", ",", "slimmable", "=", "False", ",", "width_mult_list", "=", "[", "1.", "]", ")", ":", "\n", "        ", "super", "(", "Conv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "C_in", "=", "C_in", "\n", "self", ".", "C_out", "=", "C_out", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "assert", "stride", "in", "[", "1", ",", "2", "]", "\n", "self", ".", "stride", "=", "stride", "\n", "if", "padding", "is", "None", ":", "\n", "# assume h_out = h_in / s", "\n", "            ", "self", ".", "padding", "=", "int", "(", "np", ".", "ceil", "(", "(", "dilation", "*", "(", "kernel_size", "-", "1", ")", "+", "1", "-", "stride", ")", "/", "2.", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "padding", "=", "padding", "\n", "", "self", ".", "dilation", "=", "dilation", "\n", "assert", "type", "(", "groups", ")", "==", "int", "\n", "if", "kernel_size", "==", "1", ":", "\n", "            ", "self", ".", "groups", "=", "1", "\n", "", "else", ":", "\n", "            ", "self", ".", "groups", "=", "groups", "\n", "", "self", ".", "bias", "=", "bias", "\n", "self", ".", "slimmable", "=", "slimmable", "\n", "self", ".", "width_mult_list", "=", "width_mult_list", "\n", "self", ".", "ratio", "=", "(", "1.", ",", "1.", ")", "\n", "\n", "if", "slimmable", ":", "\n", "            ", "self", ".", "conv", "=", "USConv2d", "(", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "padding", "=", "self", ".", "padding", ",", "dilation", "=", "dilation", ",", "groups", "=", "self", ".", "groups", ",", "bias", "=", "bias", ",", "width_mult_list", "=", "width_mult_list", ")", "\n", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations.Conv.set_ratio": [[94, 99], ["operations.Conv.conv.set_ratio", "len"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.DwsBlock.set_ratio"], ["\n", "\n", "", "", "def", "set_ratio", "(", "self", ",", "ratio", ")", ":", "\n", "        ", "assert", "self", ".", "slimmable", "\n", "assert", "len", "(", "ratio", ")", "==", "2", "\n", "self", ".", "ratio", "=", "ratio", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations.Conv._flops": [[100, 105], ["operations.Conv", "thop.profile", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["None"], ["self", ".", "conv", ".", "set_ratio", "(", "ratio", ")", "\n", "\n", "", "@", "staticmethod", "\n", "def", "_flops", "(", "h", ",", "w", ",", "C_in", ",", "C_out", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "None", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ":", "\n", "        ", "layer", "=", "Conv", "(", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "groups", ",", "bias", ",", "slimmable", "=", "False", ")", "\n", "flops", ",", "params", "=", "profile", "(", "layer", ",", "inputs", "=", "(", "torch", ".", "randn", "(", "1", ",", "C_in", ",", "h", ",", "w", ")", ",", ")", ",", "custom_ops", "=", "custom_ops", ")", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations.Conv._latency": [[106, 111], ["operations.Conv", "compute_latency"], "methods", ["None"], ["return", "flops", "\n", "\n", "", "@", "staticmethod", "\n", "def", "_latency", "(", "h", ",", "w", ",", "C_in", ",", "C_out", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "None", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ":", "\n", "        ", "layer", "=", "Conv", "(", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "groups", ",", "bias", ",", "slimmable", "=", "False", ")", "\n", "latency", "=", "compute_latency", "(", "layer", ",", "(", "1", ",", "C_in", ",", "h", ",", "w", ")", ")", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations.Conv.forward_latency": [[112, 133], ["slimmable_ops.make_divisible", "print", "operations.Conv._latency", "numpy.save", "slimmable_ops.make_divisible"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.make_divisible", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.DwsBlock._latency", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.save", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.make_divisible"], ["return", "latency", "\n", "\n", "", "def", "forward_latency", "(", "self", ",", "size", ")", ":", "\n", "        ", "c_in", ",", "h_in", ",", "w_in", "=", "size", "\n", "if", "self", ".", "slimmable", ":", "\n", "            ", "assert", "c_in", "==", "make_divisible", "(", "self", ".", "C_in", "*", "self", ".", "ratio", "[", "0", "]", ")", ",", "\"c_in %d, self.C_in * self.ratio[0] %d\"", "%", "(", "c_in", ",", "self", ".", "C_in", "*", "self", ".", "ratio", "[", "0", "]", ")", "\n", "c_out", "=", "make_divisible", "(", "self", ".", "C_out", "*", "self", ".", "ratio", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "assert", "c_in", "==", "self", ".", "C_in", ",", "\"c_in %d, self.C_in %d\"", "%", "(", "c_in", ",", "self", ".", "C_in", ")", "\n", "c_out", "=", "self", ".", "C_out", "\n", "", "if", "self", ".", "stride", "==", "1", ":", "\n", "            ", "h_out", "=", "h_in", ";", "w_out", "=", "w_in", "\n", "", "else", ":", "\n", "            ", "h_out", "=", "h_in", "//", "2", ";", "w_out", "=", "w_in", "//", "2", "\n", "", "name", "=", "\"Conv_H%d_W%d_Cin%d_Cout%d_kernel%d_stride%d\"", "%", "(", "h_in", ",", "w_in", ",", "c_in", ",", "c_out", ",", "self", ".", "kernel_size", ",", "self", ".", "stride", ")", "\n", "if", "name", "in", "latency_lookup_table", ":", "\n", "            ", "latency", "=", "latency_lookup_table", "[", "name", "]", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"not found in latency_lookup_table:\"", ",", "name", ")", "\n", "latency", "=", "Conv", ".", "_latency", "(", "h_in", ",", "w_in", ",", "c_in", ",", "c_out", ",", "self", ".", "kernel_size", ",", "self", ".", "stride", ",", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "groups", ",", "self", ".", "bias", ")", "\n", "latency_lookup_table", "[", "name", "]", "=", "latency", "\n", "np", ".", "save", "(", "table_file_name", ",", "latency_lookup_table", ")", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations.Conv.forward_flops": [[135, 159], ["slimmable_ops.make_divisible", "print", "operations.Conv._flops", "numpy.save", "slimmable_ops.make_divisible"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.make_divisible", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.DwsBlock._flops", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.save", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.make_divisible"], ["\n", "\n", "", "def", "forward_flops", "(", "self", ",", "size", ",", "quantize", "=", "False", ")", ":", "\n", "        ", "c_in", ",", "h_in", ",", "w_in", "=", "size", "\n", "if", "self", ".", "slimmable", ":", "\n", "            ", "assert", "c_in", "==", "make_divisible", "(", "self", ".", "C_in", "*", "self", ".", "ratio", "[", "0", "]", ")", ",", "\"c_in %d, self.C_in * self.ratio[0] %d\"", "%", "(", "c_in", ",", "self", ".", "C_in", "*", "self", ".", "ratio", "[", "0", "]", ")", "\n", "c_out", "=", "make_divisible", "(", "self", ".", "C_out", "*", "self", ".", "ratio", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "assert", "c_in", "==", "self", ".", "C_in", ",", "\"c_in %d, self.C_in %d\"", "%", "(", "c_in", ",", "self", ".", "C_in", ")", "\n", "c_out", "=", "self", ".", "C_out", "\n", "", "if", "self", ".", "stride", "==", "1", ":", "\n", "            ", "h_out", "=", "h_in", ";", "w_out", "=", "w_in", "\n", "", "else", ":", "\n", "            ", "h_out", "=", "h_in", "//", "2", ";", "w_out", "=", "w_in", "//", "2", "\n", "", "name", "=", "\"Conv_H%d_W%d_Cin%d_Cout%d_kernel%d_stride%d\"", "%", "(", "h_in", ",", "w_in", ",", "c_in", ",", "c_out", ",", "self", ".", "kernel_size", ",", "self", ".", "stride", ")", "\n", "if", "name", "in", "flops_lookup_table", ":", "\n", "            ", "flops", "=", "flops_lookup_table", "[", "name", "]", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"not found in flops_lookup_table:\"", ",", "name", ")", "\n", "flops", "=", "Conv", ".", "_flops", "(", "h_in", ",", "w_in", ",", "c_in", ",", "c_out", ",", "self", ".", "kernel_size", ",", "self", ".", "stride", ",", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "groups", ",", "self", ".", "bias", ")", "\n", "flops_lookup_table", "[", "name", "]", "=", "flops", "\n", "np", ".", "save", "(", "table_file_name", ",", "flops_lookup_table", ")", "\n", "# if quantize:", "\n", "#     flops /= 4", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations.Conv.forward": [[161, 164], ["operations.Conv.conv"], "methods", ["None"], ["\n", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "quantize", "=", "False", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ",", "quantize", "=", "quantize", ")", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations.ConvNorm.__init__": [[171, 203], ["torch.Module.__init__", "int", "type", "slimmable_ops.USConv2d", "slimmable_ops.USBatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "Conv2d", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "numpy.ceil"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.Cutout.__init__"], ["\n", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "None", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "False", ",", "slimmable", "=", "False", ",", "width_mult_list", "=", "[", "1.", "]", ")", ":", "\n", "        ", "super", "(", "ConvNorm", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "C_in", "=", "C_in", "\n", "self", ".", "C_out", "=", "C_out", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "assert", "stride", "in", "[", "1", ",", "2", "]", "\n", "self", ".", "stride", "=", "stride", "\n", "if", "padding", "is", "None", ":", "\n", "# assume h_out = h_in / s", "\n", "            ", "self", ".", "padding", "=", "int", "(", "np", ".", "ceil", "(", "(", "dilation", "*", "(", "kernel_size", "-", "1", ")", "+", "1", "-", "stride", ")", "/", "2.", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "padding", "=", "padding", "\n", "", "self", ".", "dilation", "=", "dilation", "\n", "assert", "type", "(", "groups", ")", "==", "int", "\n", "if", "kernel_size", "==", "1", ":", "\n", "            ", "self", ".", "groups", "=", "1", "\n", "", "else", ":", "\n", "            ", "self", ".", "groups", "=", "groups", "\n", "", "self", ".", "bias", "=", "bias", "\n", "self", ".", "slimmable", "=", "slimmable", "\n", "self", ".", "width_mult_list", "=", "width_mult_list", "\n", "self", ".", "ratio", "=", "(", "1.", ",", "1.", ")", "\n", "\n", "if", "slimmable", ":", "\n", "            ", "self", ".", "conv", "=", "USConv2d", "(", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "padding", "=", "self", ".", "padding", ",", "dilation", "=", "dilation", ",", "groups", "=", "self", ".", "groups", ",", "bias", "=", "bias", ",", "width_mult_list", "=", "width_mult_list", ")", "\n", "self", ".", "bn", "=", "USBatchNorm2d", "(", "C_out", ",", "width_mult_list", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv", "=", "Conv2d", "(", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "padding", "=", "self", ".", "padding", ",", "dilation", "=", "dilation", ",", "groups", "=", "self", ".", "groups", ",", "bias", "=", "bias", ")", "\n", "self", ".", "bn", "=", "BatchNorm2d", "(", "C_out", ")", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations.ConvNorm.set_ratio": [[205, 211], ["operations.ConvNorm.conv.set_ratio", "operations.ConvNorm.bn.set_ratio", "len"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.DwsBlock.set_ratio", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.DwsBlock.set_ratio"], ["\n", "\n", "", "", "def", "set_ratio", "(", "self", ",", "ratio", ")", ":", "\n", "        ", "assert", "self", ".", "slimmable", "\n", "assert", "len", "(", "ratio", ")", "==", "2", "\n", "self", ".", "ratio", "=", "ratio", "\n", "self", ".", "conv", ".", "set_ratio", "(", "ratio", ")", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations.ConvNorm._flops": [[212, 217], ["operations.ConvNorm", "thop.profile", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["None"], ["self", ".", "bn", ".", "set_ratio", "(", "ratio", "[", "1", "]", ")", "\n", "\n", "", "@", "staticmethod", "\n", "def", "_flops", "(", "h", ",", "w", ",", "C_in", ",", "C_out", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "None", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ":", "\n", "        ", "layer", "=", "ConvNorm", "(", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "groups", ",", "bias", ",", "slimmable", "=", "False", ")", "\n", "flops", ",", "params", "=", "profile", "(", "layer", ",", "inputs", "=", "(", "torch", ".", "randn", "(", "1", ",", "C_in", ",", "h", ",", "w", ")", ",", ")", ",", "custom_ops", "=", "custom_ops", ")", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations.ConvNorm._latency": [[218, 223], ["operations.ConvNorm", "compute_latency"], "methods", ["None"], ["return", "flops", "\n", "\n", "", "@", "staticmethod", "\n", "def", "_latency", "(", "h", ",", "w", ",", "C_in", ",", "C_out", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "None", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ":", "\n", "        ", "layer", "=", "ConvNorm", "(", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "groups", ",", "bias", ",", "slimmable", "=", "False", ")", "\n", "latency", "=", "compute_latency", "(", "layer", ",", "(", "1", ",", "C_in", ",", "h", ",", "w", ")", ")", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations.ConvNorm.forward_latency": [[224, 245], ["slimmable_ops.make_divisible", "print", "operations.ConvNorm._latency", "numpy.save", "slimmable_ops.make_divisible"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.make_divisible", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.DwsBlock._latency", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.save", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.make_divisible"], ["return", "latency", "\n", "\n", "", "def", "forward_latency", "(", "self", ",", "size", ")", ":", "\n", "        ", "c_in", ",", "h_in", ",", "w_in", "=", "size", "\n", "if", "self", ".", "slimmable", ":", "\n", "            ", "assert", "c_in", "==", "make_divisible", "(", "self", ".", "C_in", "*", "self", ".", "ratio", "[", "0", "]", ")", ",", "\"c_in %d, self.C_in * self.ratio[0] %d\"", "%", "(", "c_in", ",", "self", ".", "C_in", "*", "self", ".", "ratio", "[", "0", "]", ")", "\n", "c_out", "=", "make_divisible", "(", "self", ".", "C_out", "*", "self", ".", "ratio", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "assert", "c_in", "==", "self", ".", "C_in", ",", "\"c_in %d, self.C_in %d\"", "%", "(", "c_in", ",", "self", ".", "C_in", ")", "\n", "c_out", "=", "self", ".", "C_out", "\n", "", "if", "self", ".", "stride", "==", "1", ":", "\n", "            ", "h_out", "=", "h_in", ";", "w_out", "=", "w_in", "\n", "", "else", ":", "\n", "            ", "h_out", "=", "h_in", "//", "2", ";", "w_out", "=", "w_in", "//", "2", "\n", "", "name", "=", "\"ConvNorm_H%d_W%d_Cin%d_Cout%d_kernel%d_stride%d\"", "%", "(", "h_in", ",", "w_in", ",", "c_in", ",", "c_out", ",", "self", ".", "kernel_size", ",", "self", ".", "stride", ")", "\n", "if", "name", "in", "latency_lookup_table", ":", "\n", "            ", "latency", "=", "latency_lookup_table", "[", "name", "]", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"not found in latency_lookup_table:\"", ",", "name", ")", "\n", "latency", "=", "ConvNorm", ".", "_latency", "(", "h_in", ",", "w_in", ",", "c_in", ",", "c_out", ",", "self", ".", "kernel_size", ",", "self", ".", "stride", ",", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "groups", ",", "self", ".", "bias", ")", "\n", "latency_lookup_table", "[", "name", "]", "=", "latency", "\n", "np", ".", "save", "(", "table_file_name", ",", "latency_lookup_table", ")", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations.ConvNorm.forward_flops": [[247, 271], ["slimmable_ops.make_divisible", "print", "operations.ConvNorm._flops", "numpy.save", "slimmable_ops.make_divisible"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.make_divisible", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.DwsBlock._flops", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.save", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.make_divisible"], ["\n", "\n", "", "def", "forward_flops", "(", "self", ",", "size", ",", "quantize", "=", "False", ")", ":", "\n", "        ", "c_in", ",", "h_in", ",", "w_in", "=", "size", "\n", "if", "self", ".", "slimmable", ":", "\n", "            ", "assert", "c_in", "==", "make_divisible", "(", "self", ".", "C_in", "*", "self", ".", "ratio", "[", "0", "]", ")", ",", "\"c_in %d, self.C_in * self.ratio[0] %d\"", "%", "(", "c_in", ",", "self", ".", "C_in", "*", "self", ".", "ratio", "[", "0", "]", ")", "\n", "c_out", "=", "make_divisible", "(", "self", ".", "C_out", "*", "self", ".", "ratio", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "assert", "c_in", "==", "self", ".", "C_in", ",", "\"c_in %d, self.C_in %d\"", "%", "(", "c_in", ",", "self", ".", "C_in", ")", "\n", "c_out", "=", "self", ".", "C_out", "\n", "", "if", "self", ".", "stride", "==", "1", ":", "\n", "            ", "h_out", "=", "h_in", ";", "w_out", "=", "w_in", "\n", "", "else", ":", "\n", "            ", "h_out", "=", "h_in", "//", "2", ";", "w_out", "=", "w_in", "//", "2", "\n", "", "name", "=", "\"ConvNorm_H%d_W%d_Cin%d_Cout%d_kernel%d_stride%d\"", "%", "(", "h_in", ",", "w_in", ",", "c_in", ",", "c_out", ",", "self", ".", "kernel_size", ",", "self", ".", "stride", ")", "\n", "if", "name", "in", "flops_lookup_table", ":", "\n", "            ", "flops", "=", "flops_lookup_table", "[", "name", "]", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"not found in flops_lookup_table:\"", ",", "name", ")", "\n", "flops", "=", "ConvNorm", ".", "_flops", "(", "h_in", ",", "w_in", ",", "c_in", ",", "c_out", ",", "self", ".", "kernel_size", ",", "self", ".", "stride", ",", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "groups", ",", "self", ".", "bias", ")", "\n", "flops_lookup_table", "[", "name", "]", "=", "flops", "\n", "np", ".", "save", "(", "table_file_name", ",", "flops_lookup_table", ")", "\n", "# if quantize:", "\n", "#     flops /= 4", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations.ConvNorm.forward": [[273, 279], ["operations.ConvNorm.conv", "operations.ConvNorm.relu", "operations.ConvNorm.bn"], "methods", ["None"], ["\n", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "quantize", "=", "False", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ",", "quantize", "=", "quantize", ")", "\n", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "return", "x", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations.ConvTranspose2dNorm.__init__": [[286, 314], ["torch.Module.__init__", "type", "slimmable_ops.USConvTranspose2d", "slimmable_ops.USBatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "ConvTranspose2d", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.Cutout.__init__"], ["\n", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "None", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "False", ",", "slimmable", "=", "True", ",", "width_mult_list", "=", "[", "1.", "]", ")", ":", "\n", "        ", "super", "(", "ConvTranspose2dNorm", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "C_in", "=", "C_in", "\n", "self", ".", "C_out", "=", "C_out", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "assert", "stride", "in", "[", "1", ",", "2", "]", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "padding", "=", "1", "\n", "self", ".", "dilation", "=", "dilation", "\n", "assert", "type", "(", "groups", ")", "==", "int", "\n", "if", "kernel_size", "==", "1", ":", "\n", "            ", "self", ".", "groups", "=", "1", "\n", "", "else", ":", "\n", "            ", "self", ".", "groups", "=", "groups", "\n", "", "self", ".", "bias", "=", "bias", "\n", "self", ".", "slimmable", "=", "slimmable", "\n", "self", ".", "width_mult_list", "=", "width_mult_list", "\n", "self", ".", "ratio", "=", "(", "1.", ",", "1.", ")", "\n", "\n", "if", "slimmable", ":", "\n", "            ", "self", ".", "conv", "=", "USConvTranspose2d", "(", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "padding", "=", "self", ".", "padding", ",", "output_padding", "=", "1", ",", "dilation", "=", "dilation", ",", "groups", "=", "self", ".", "groups", ",", "bias", "=", "bias", ",", "width_mult_list", "=", "width_mult_list", ")", "\n", "self", ".", "bn", "=", "USBatchNorm2d", "(", "C_out", ",", "width_mult_list", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv", "=", "ConvTranspose2d", "(", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "padding", "=", "self", ".", "padding", ",", "output_padding", "=", "1", ",", "dilation", "=", "dilation", ",", "groups", "=", "self", ".", "groups", ",", "bias", "=", "bias", ")", "\n", "self", ".", "bn", "=", "BatchNorm2d", "(", "C_out", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations.ConvTranspose2dNorm.set_ratio": [[316, 322], ["operations.ConvTranspose2dNorm.conv.set_ratio", "operations.ConvTranspose2dNorm.bn.set_ratio", "len"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.DwsBlock.set_ratio", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.DwsBlock.set_ratio"], ["\n", "", "", "def", "set_ratio", "(", "self", ",", "ratio", ")", ":", "\n", "        ", "assert", "self", ".", "slimmable", "\n", "assert", "len", "(", "ratio", ")", "==", "2", "\n", "self", ".", "ratio", "=", "ratio", "\n", "self", ".", "conv", ".", "set_ratio", "(", "ratio", ")", "\n", "self", ".", "bn", ".", "set_ratio", "(", "ratio", "[", "1", "]", ")", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations.ConvTranspose2dNorm._flops": [[323, 328], ["operations.ConvTranspose2dNorm", "thop.profile", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["None"], ["\n", "", "@", "staticmethod", "\n", "def", "_flops", "(", "h", ",", "w", ",", "C_in", ",", "C_out", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "None", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ":", "\n", "        ", "layer", "=", "ConvTranspose2dNorm", "(", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "groups", ",", "bias", ",", "slimmable", "=", "False", ")", "\n", "flops", ",", "params", "=", "profile", "(", "layer", ",", "inputs", "=", "(", "torch", ".", "randn", "(", "1", ",", "C_in", ",", "h", ",", "w", ")", ",", ")", ",", "custom_ops", "=", "custom_ops", ")", "\n", "return", "flops", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations.ConvTranspose2dNorm._latency": [[329, 334], ["operations.ConvTranspose2dNorm", "compute_latency"], "methods", ["None"], ["\n", "", "@", "staticmethod", "\n", "def", "_latency", "(", "h", ",", "w", ",", "C_in", ",", "C_out", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "None", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ":", "\n", "        ", "layer", "=", "ConvTranspose2dNorm", "(", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "groups", ",", "bias", ",", "slimmable", "=", "False", ")", "\n", "latency", "=", "compute_latency", "(", "layer", ",", "(", "1", ",", "C_in", ",", "h", ",", "w", ")", ")", "\n", "return", "latency", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations.ConvTranspose2dNorm.forward_latency": [[335, 356], ["slimmable_ops.make_divisible", "print", "operations.ConvTranspose2dNorm._latency", "numpy.save", "slimmable_ops.make_divisible"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.make_divisible", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.DwsBlock._latency", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.save", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.make_divisible"], ["\n", "", "def", "forward_latency", "(", "self", ",", "size", ")", ":", "\n", "        ", "c_in", ",", "h_in", ",", "w_in", "=", "size", "\n", "if", "self", ".", "slimmable", ":", "\n", "            ", "assert", "c_in", "==", "make_divisible", "(", "self", ".", "C_in", "*", "self", ".", "ratio", "[", "0", "]", ")", ",", "\"c_in %d, self.C_in * self.ratio[0] %d\"", "%", "(", "c_in", ",", "self", ".", "C_in", "*", "self", ".", "ratio", "[", "0", "]", ")", "\n", "c_out", "=", "make_divisible", "(", "self", ".", "C_out", "*", "self", ".", "ratio", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "assert", "c_in", "==", "self", ".", "C_in", ",", "\"c_in %d, self.C_in %d\"", "%", "(", "c_in", ",", "self", ".", "C_in", ")", "\n", "c_out", "=", "self", ".", "C_out", "\n", "", "if", "self", ".", "stride", "==", "1", ":", "\n", "            ", "h_out", "=", "h_in", ";", "w_out", "=", "w_in", "\n", "", "else", ":", "\n", "            ", "h_out", "=", "h_in", "//", "2", ";", "w_out", "=", "w_in", "//", "2", "\n", "", "name", "=", "\"ConvTranspose2dNorm_H%d_W%d_Cin%d_Cout%d_kernel%d_stride%d\"", "%", "(", "h_in", ",", "w_in", ",", "c_in", ",", "c_out", ",", "self", ".", "kernel_size", ",", "self", ".", "stride", ")", "\n", "if", "name", "in", "latency_lookup_table", ":", "\n", "            ", "latency", "=", "latency_lookup_table", "[", "name", "]", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"not found in latency_lookup_table:\"", ",", "name", ")", "\n", "latency", "=", "ConvTranspose2dNorm", ".", "_latency", "(", "h_in", ",", "w_in", ",", "c_in", ",", "c_out", ",", "self", ".", "kernel_size", ",", "self", ".", "stride", ",", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "groups", ",", "self", ".", "bias", ")", "\n", "latency_lookup_table", "[", "name", "]", "=", "latency", "\n", "np", ".", "save", "(", "table_file_name", ",", "latency_lookup_table", ")", "\n", "", "return", "latency", ",", "(", "c_out", ",", "h_out", ",", "w_out", ")", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations.ConvTranspose2dNorm.forward_flops": [[358, 382], ["slimmable_ops.make_divisible", "print", "operations.ConvTranspose2dNorm._flops", "numpy.save", "slimmable_ops.make_divisible"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.make_divisible", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.DwsBlock._flops", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.save", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.make_divisible"], ["\n", "", "def", "forward_flops", "(", "self", ",", "size", ",", "quantize", "=", "False", ")", ":", "\n", "        ", "c_in", ",", "h_in", ",", "w_in", "=", "size", "\n", "if", "self", ".", "slimmable", ":", "\n", "            ", "assert", "c_in", "==", "make_divisible", "(", "self", ".", "C_in", "*", "self", ".", "ratio", "[", "0", "]", ")", ",", "\"c_in %d, self.C_in * self.ratio[0] %d\"", "%", "(", "c_in", ",", "self", ".", "C_in", "*", "self", ".", "ratio", "[", "0", "]", ")", "\n", "c_out", "=", "make_divisible", "(", "self", ".", "C_out", "*", "self", ".", "ratio", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "assert", "c_in", "==", "self", ".", "C_in", ",", "\"c_in %d, self.C_in %d\"", "%", "(", "c_in", ",", "self", ".", "C_in", ")", "\n", "c_out", "=", "self", ".", "C_out", "\n", "", "if", "self", ".", "stride", "==", "1", ":", "\n", "            ", "h_out", "=", "h_in", ";", "w_out", "=", "w_in", "\n", "", "else", ":", "\n", "            ", "h_out", "=", "h_in", "//", "2", ";", "w_out", "=", "w_in", "//", "2", "\n", "", "name", "=", "\"ConvTranspose2dNorm_H%d_W%d_Cin%d_Cout%d_kernel%d_stride%d\"", "%", "(", "h_in", ",", "w_in", ",", "c_in", ",", "c_out", ",", "self", ".", "kernel_size", ",", "self", ".", "stride", ")", "\n", "if", "name", "in", "flops_lookup_table", ":", "\n", "            ", "flops", "=", "flops_lookup_table", "[", "name", "]", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"not found in flops_lookup_table:\"", ",", "name", ")", "\n", "flops", "=", "ConvTranspose2dNorm", ".", "_flops", "(", "h_in", ",", "w_in", ",", "c_in", ",", "c_out", ",", "self", ".", "kernel_size", ",", "self", ".", "stride", ",", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "groups", ",", "self", ".", "bias", ")", "\n", "flops_lookup_table", "[", "name", "]", "=", "flops", "\n", "np", ".", "save", "(", "table_file_name", ",", "flops_lookup_table", ")", "\n", "# if quantize:", "\n", "#     flops /= 4", "\n", "\n", "", "return", "flops", ",", "(", "c_out", ",", "h_out", ",", "w_out", ")", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations.ConvTranspose2dNorm.forward": [[384, 390], ["operations.ConvTranspose2dNorm.conv", "operations.ConvTranspose2dNorm.relu", "operations.ConvTranspose2dNorm.bn"], "methods", ["None"], ["\n", "", "def", "forward", "(", "self", ",", "x", ",", "quantize", "=", "False", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ",", "quantize", "=", "quantize", ")", "\n", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations.Conv7x7.__init__": [[393, 412], ["torch.Module.__init__", "slimmable_ops.USConv2d", "Conv2d"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.Cutout.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "kernel_size", "=", "7", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "slimmable", "=", "True", ",", "width_mult_list", "=", "[", "1.", "]", ")", ":", "\n", "        ", "super", "(", "Conv7x7", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Both self.conv1 and self.downsample layers downsample the input when stride != 1", "\n", "self", ".", "C_in", "=", "C_in", "\n", "self", ".", "C_out", "=", "C_out", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "dilation", "=", "dilation", "\n", "self", ".", "groups", "=", "groups", "\n", "self", ".", "slimmable", "=", "slimmable", "\n", "self", ".", "width_mult_list", "=", "width_mult_list", "\n", "assert", "stride", "in", "[", "1", ",", "2", "]", "\n", "if", "self", ".", "stride", "==", "2", ":", "self", ".", "dilation", "=", "1", "\n", "self", ".", "ratio", "=", "(", "1.", ",", "1.", ")", "\n", "\n", "if", "slimmable", ":", "\n", "            ", "self", ".", "conv1", "=", "USConv2d", "(", "C_in", ",", "C_out", ",", "7", ",", "stride", ",", "padding", "=", "3", ",", "dilation", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "False", ",", "width_mult_list", "=", "width_mult_list", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv1", "=", "Conv2d", "(", "C_in", ",", "C_out", ",", "7", ",", "stride", ",", "padding", "=", "3", ",", "dilation", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations.Conv7x7.set_ratio": [[413, 417], ["operations.Conv7x7.conv1.set_ratio", "len"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.DwsBlock.set_ratio"], ["", "", "def", "set_ratio", "(", "self", ",", "ratio", ")", ":", "\n", "        ", "assert", "len", "(", "ratio", ")", "==", "2", "\n", "self", ".", "ratio", "=", "ratio", "\n", "self", ".", "conv1", ".", "set_ratio", "(", "ratio", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations.Conv7x7._flops": [[418, 423], ["operations.Conv7x7", "thop.profile", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_flops", "(", "h", ",", "w", ",", "C_in", ",", "C_out", ",", "kernel_size", "=", "7", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "groups", "=", "1", ")", ":", "\n", "        ", "layer", "=", "Conv7x7", "(", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "dilation", ",", "groups", ",", "slimmable", "=", "False", ")", "\n", "flops", ",", "params", "=", "profile", "(", "layer", ",", "inputs", "=", "(", "torch", ".", "randn", "(", "1", ",", "C_in", ",", "h", ",", "w", ")", ",", ")", ",", "custom_ops", "=", "custom_ops", ")", "\n", "return", "flops", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations.Conv7x7._latency": [[424, 429], ["operations.Conv7x7", "compute_latency"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_latency", "(", "h", ",", "w", ",", "C_in", ",", "C_out", ",", "kernel_size", "=", "7", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "groups", "=", "1", ")", ":", "\n", "        ", "layer", "=", "Conv7x7", "(", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "dilation", ",", "groups", ",", "slimmable", "=", "False", ")", "\n", "latency", "=", "compute_latency", "(", "layer", ",", "(", "1", ",", "C_in", ",", "h", ",", "w", ")", ")", "\n", "return", "latency", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations.Conv7x7.forward_latency": [[430, 451], ["slimmable_ops.make_divisible", "print", "operations.Conv7x7._latency", "numpy.save", "slimmable_ops.make_divisible", "int"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.make_divisible", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.DwsBlock._latency", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.save", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.make_divisible"], ["", "def", "forward_latency", "(", "self", ",", "size", ")", ":", "\n", "        ", "c_in", ",", "h_in", ",", "w_in", "=", "size", "\n", "if", "self", ".", "slimmable", ":", "\n", "            ", "assert", "c_in", "==", "make_divisible", "(", "self", ".", "C_in", "*", "self", ".", "ratio", "[", "0", "]", ")", ",", "\"c_in %d, int(self.C_in * self.ratio[0]) %d\"", "%", "(", "c_in", ",", "int", "(", "self", ".", "C_in", "*", "self", ".", "ratio", "[", "0", "]", ")", ")", "\n", "c_out", "=", "make_divisible", "(", "self", ".", "C_out", "*", "self", ".", "ratio", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "assert", "c_in", "==", "self", ".", "C_in", ",", "\"c_in %d, self.C_in %d\"", "%", "(", "c_in", ",", "self", ".", "C_in", ")", "\n", "c_out", "=", "self", ".", "C_out", "\n", "", "if", "self", ".", "stride", "==", "1", ":", "\n", "            ", "h_out", "=", "h_in", ";", "w_out", "=", "w_in", "\n", "", "else", ":", "\n", "            ", "h_out", "=", "h_in", "//", "2", ";", "w_out", "=", "w_in", "//", "2", "\n", "", "name", "=", "\"Conv7x7_H%d_W%d_Cin%d_Cout%d_stride%d_dilation%d\"", "%", "(", "h_in", ",", "w_in", ",", "c_in", ",", "c_out", ",", "self", ".", "stride", ",", "self", ".", "dilation", ")", "\n", "if", "name", "in", "latency_lookup_table", ":", "\n", "            ", "latency", "=", "latency_lookup_table", "[", "name", "]", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"not found in latency_lookup_table:\"", ",", "name", ")", "\n", "latency", "=", "Conv7x7", ".", "_latency", "(", "h_in", ",", "w_in", ",", "c_in", ",", "c_out", ",", "self", ".", "kernel_size", ",", "self", ".", "stride", ",", "self", ".", "dilation", ",", "self", ".", "groups", ")", "\n", "latency_lookup_table", "[", "name", "]", "=", "latency", "\n", "np", ".", "save", "(", "table_file_name", ",", "latency_lookup_table", ")", "\n", "", "return", "latency", ",", "(", "c_out", ",", "h_out", ",", "w_out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations.Conv7x7.forward_flops": [[453, 477], ["slimmable_ops.make_divisible", "print", "operations.Conv7x7._flops", "numpy.save", "slimmable_ops.make_divisible"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.make_divisible", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.DwsBlock._flops", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.save", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.make_divisible"], ["", "def", "forward_flops", "(", "self", ",", "size", ",", "quantize", "=", "False", ")", ":", "\n", "        ", "c_in", ",", "h_in", ",", "w_in", "=", "size", "\n", "if", "self", ".", "slimmable", ":", "\n", "            ", "assert", "c_in", "==", "make_divisible", "(", "self", ".", "C_in", "*", "self", ".", "ratio", "[", "0", "]", ")", ",", "\"c_in %d, self.C_in * self.ratio[0] %d\"", "%", "(", "c_in", ",", "self", ".", "C_in", "*", "self", ".", "ratio", "[", "0", "]", ")", "\n", "c_out", "=", "make_divisible", "(", "self", ".", "C_out", "*", "self", ".", "ratio", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "assert", "c_in", "==", "self", ".", "C_in", ",", "\"c_in %d, self.C_in %d\"", "%", "(", "c_in", ",", "self", ".", "C_in", ")", "\n", "c_out", "=", "self", ".", "C_out", "\n", "", "if", "self", ".", "stride", "==", "1", ":", "\n", "            ", "h_out", "=", "h_in", ";", "w_out", "=", "w_in", "\n", "", "else", ":", "\n", "            ", "h_out", "=", "h_in", "//", "2", ";", "w_out", "=", "w_in", "//", "2", "\n", "", "name", "=", "\"Conv7x7_H%d_W%d_Cin%d_Cout%d_kernel%d_stride%d\"", "%", "(", "h_in", ",", "w_in", ",", "c_in", ",", "c_out", ",", "self", ".", "kernel_size", ",", "self", ".", "stride", ")", "\n", "if", "name", "in", "flops_lookup_table", ":", "\n", "            ", "flops", "=", "flops_lookup_table", "[", "name", "]", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"not found in flops_lookup_table:\"", ",", "name", ")", "\n", "flops", "=", "Conv7x7", ".", "_flops", "(", "h_in", ",", "w_in", ",", "c_in", ",", "c_out", ",", "self", ".", "kernel_size", ",", "self", ".", "stride", ",", "self", ".", "dilation", ",", "self", ".", "groups", ")", "\n", "flops_lookup_table", "[", "name", "]", "=", "flops", "\n", "np", ".", "save", "(", "table_file_name", ",", "flops_lookup_table", ")", "\n", "# if quantize:", "\n", "#     flops /= 4", "\n", "\n", "", "return", "flops", ",", "(", "c_out", ",", "h_out", ",", "w_out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations.Conv7x7.forward": [[479, 484], ["operations.Conv7x7.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "quantize", "=", "False", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "out", "=", "self", ".", "conv1", "(", "x", ",", "quantize", "=", "quantize", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations.Conv3x3.__init__": [[487, 510], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.ReLU", "slimmable_ops.USConv2d", "slimmable_ops.USBatchNorm2d", "Conv2d", "BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.Cutout.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "slimmable", "=", "True", ",", "width_mult_list", "=", "[", "1.", "]", ")", ":", "\n", "        ", "super", "(", "Conv3x3", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Both self.conv1 and self.downsample layers downsample the input when stride != 1", "\n", "self", ".", "C_in", "=", "C_in", "\n", "self", ".", "C_out", "=", "C_out", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "dilation", "=", "dilation", "\n", "self", ".", "groups", "=", "groups", "\n", "self", ".", "slimmable", "=", "slimmable", "\n", "self", ".", "width_mult_list", "=", "width_mult_list", "\n", "assert", "stride", "in", "[", "1", ",", "2", "]", "\n", "if", "self", ".", "stride", "==", "2", ":", "self", ".", "dilation", "=", "1", "\n", "self", ".", "ratio", "=", "(", "1.", ",", "1.", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "if", "slimmable", ":", "\n", "            ", "self", ".", "conv1", "=", "USConv2d", "(", "C_in", ",", "C_out", ",", "3", ",", "stride", ",", "padding", "=", "dilation", ",", "dilation", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "False", ",", "width_mult_list", "=", "width_mult_list", ")", "\n", "self", ".", "bn1", "=", "USBatchNorm2d", "(", "C_out", ",", "width_mult_list", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv1", "=", "Conv2d", "(", "C_in", ",", "C_out", ",", "3", ",", "stride", ",", "padding", "=", "dilation", ",", "dilation", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "False", ")", "\n", "# self.bn1 = nn.BatchNorm2d(C_out)", "\n", "self", ".", "bn1", "=", "BatchNorm2d", "(", "C_out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations.Conv3x3.set_ratio": [[511, 516], ["operations.Conv3x3.conv1.set_ratio", "operations.Conv3x3.bn1.set_ratio", "len"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.DwsBlock.set_ratio", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.DwsBlock.set_ratio"], ["", "", "def", "set_ratio", "(", "self", ",", "ratio", ")", ":", "\n", "        ", "assert", "len", "(", "ratio", ")", "==", "2", "\n", "self", ".", "ratio", "=", "ratio", "\n", "self", ".", "conv1", ".", "set_ratio", "(", "ratio", ")", "\n", "self", ".", "bn1", ".", "set_ratio", "(", "ratio", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations.Conv3x3._flops": [[517, 522], ["operations.Conv3x3", "thop.profile", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_flops", "(", "h", ",", "w", ",", "C_in", ",", "C_out", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "groups", "=", "1", ")", ":", "\n", "        ", "layer", "=", "Conv3x3", "(", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "dilation", ",", "groups", ",", "slimmable", "=", "False", ")", "\n", "flops", ",", "params", "=", "profile", "(", "layer", ",", "inputs", "=", "(", "torch", ".", "randn", "(", "1", ",", "C_in", ",", "h", ",", "w", ")", ",", ")", ",", "custom_ops", "=", "custom_ops", ")", "\n", "return", "flops", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations.Conv3x3._latency": [[523, 528], ["operations.Conv3x3", "compute_latency"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_latency", "(", "h", ",", "w", ",", "C_in", ",", "C_out", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "groups", "=", "1", ")", ":", "\n", "        ", "layer", "=", "Conv3x3", "(", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "dilation", ",", "groups", ",", "slimmable", "=", "False", ")", "\n", "latency", "=", "compute_latency", "(", "layer", ",", "(", "1", ",", "C_in", ",", "h", ",", "w", ")", ")", "\n", "return", "latency", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations.Conv3x3.forward_latency": [[529, 550], ["slimmable_ops.make_divisible", "print", "operations.Conv3x3._latency", "numpy.save", "slimmable_ops.make_divisible", "int"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.make_divisible", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.DwsBlock._latency", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.save", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.make_divisible"], ["", "def", "forward_latency", "(", "self", ",", "size", ")", ":", "\n", "        ", "c_in", ",", "h_in", ",", "w_in", "=", "size", "\n", "if", "self", ".", "slimmable", ":", "\n", "            ", "assert", "c_in", "==", "make_divisible", "(", "self", ".", "C_in", "*", "self", ".", "ratio", "[", "0", "]", ")", ",", "\"c_in %d, int(self.C_in * self.ratio[0]) %d\"", "%", "(", "c_in", ",", "int", "(", "self", ".", "C_in", "*", "self", ".", "ratio", "[", "0", "]", ")", ")", "\n", "c_out", "=", "make_divisible", "(", "self", ".", "C_out", "*", "self", ".", "ratio", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "assert", "c_in", "==", "self", ".", "C_in", ",", "\"c_in %d, self.C_in %d\"", "%", "(", "c_in", ",", "self", ".", "C_in", ")", "\n", "c_out", "=", "self", ".", "C_out", "\n", "", "if", "self", ".", "stride", "==", "1", ":", "\n", "            ", "h_out", "=", "h_in", ";", "w_out", "=", "w_in", "\n", "", "else", ":", "\n", "            ", "h_out", "=", "h_in", "//", "2", ";", "w_out", "=", "w_in", "//", "2", "\n", "", "name", "=", "\"Conv3x3_H%d_W%d_Cin%d_Cout%d_stride%d_dilation%d\"", "%", "(", "h_in", ",", "w_in", ",", "c_in", ",", "c_out", ",", "self", ".", "stride", ",", "self", ".", "dilation", ")", "\n", "if", "name", "in", "latency_lookup_table", ":", "\n", "            ", "latency", "=", "latency_lookup_table", "[", "name", "]", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"not found in latency_lookup_table:\"", ",", "name", ")", "\n", "latency", "=", "Conv3x3", ".", "_latency", "(", "h_in", ",", "w_in", ",", "c_in", ",", "c_out", ",", "self", ".", "kernel_size", ",", "self", ".", "stride", ",", "self", ".", "dilation", ",", "self", ".", "groups", ")", "\n", "latency_lookup_table", "[", "name", "]", "=", "latency", "\n", "np", ".", "save", "(", "table_file_name", ",", "latency_lookup_table", ")", "\n", "", "return", "latency", ",", "(", "c_out", ",", "h_out", ",", "w_out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations.Conv3x3.forward_flops": [[552, 576], ["slimmable_ops.make_divisible", "print", "operations.Conv3x3._flops", "numpy.save", "slimmable_ops.make_divisible"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.make_divisible", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.DwsBlock._flops", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.save", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.make_divisible"], ["", "def", "forward_flops", "(", "self", ",", "size", ",", "quantize", "=", "False", ")", ":", "\n", "        ", "c_in", ",", "h_in", ",", "w_in", "=", "size", "\n", "if", "self", ".", "slimmable", ":", "\n", "            ", "assert", "c_in", "==", "make_divisible", "(", "self", ".", "C_in", "*", "self", ".", "ratio", "[", "0", "]", ")", ",", "\"c_in %d, self.C_in * self.ratio[0] %d\"", "%", "(", "c_in", ",", "self", ".", "C_in", "*", "self", ".", "ratio", "[", "0", "]", ")", "\n", "c_out", "=", "make_divisible", "(", "self", ".", "C_out", "*", "self", ".", "ratio", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "assert", "c_in", "==", "self", ".", "C_in", ",", "\"c_in %d, self.C_in %d\"", "%", "(", "c_in", ",", "self", ".", "C_in", ")", "\n", "c_out", "=", "self", ".", "C_out", "\n", "", "if", "self", ".", "stride", "==", "1", ":", "\n", "            ", "h_out", "=", "h_in", ";", "w_out", "=", "w_in", "\n", "", "else", ":", "\n", "            ", "h_out", "=", "h_in", "//", "2", ";", "w_out", "=", "w_in", "//", "2", "\n", "", "name", "=", "\"Conv3x3_H%d_W%d_Cin%d_Cout%d_kernel%d_stride%d\"", "%", "(", "h_in", ",", "w_in", ",", "c_in", ",", "c_out", ",", "self", ".", "kernel_size", ",", "self", ".", "stride", ")", "\n", "if", "name", "in", "flops_lookup_table", ":", "\n", "            ", "flops", "=", "flops_lookup_table", "[", "name", "]", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"not found in flops_lookup_table:\"", ",", "name", ")", "\n", "flops", "=", "Conv3x3", ".", "_flops", "(", "h_in", ",", "w_in", ",", "c_in", ",", "c_out", ",", "self", ".", "kernel_size", ",", "self", ".", "stride", ",", "self", ".", "dilation", ",", "self", ".", "groups", ")", "\n", "flops_lookup_table", "[", "name", "]", "=", "flops", "\n", "np", ".", "save", "(", "table_file_name", ",", "flops_lookup_table", ")", "\n", "# if quantize:", "\n", "#     flops /= 4", "\n", "\n", "", "return", "flops", ",", "(", "c_out", ",", "h_out", ",", "w_out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations.Conv3x3.forward": [[578, 585], ["operations.Conv3x3.conv1", "operations.Conv3x3.relu", "operations.Conv3x3.bn1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "quantize", "=", "False", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "out", "=", "self", ".", "conv1", "(", "x", ",", "quantize", "=", "quantize", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations.BasicResidual.__init__": [[588, 625], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.ReLU", "slimmable_ops.USConv2d", "slimmable_ops.USBatchNorm2d", "slimmable_ops.USConv2d", "slimmable_ops.USBatchNorm2d", "slimmable_ops.USConv2d", "slimmable_ops.USBatchNorm2d", "Conv2d", "BatchNorm2d", "Conv2d", "BatchNorm2d", "Conv2d", "BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.Cutout.__init__"], ["        ", "super", "(", "BasicResidual", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Both self.conv1 and self.downsample layers downsample the input when stride != 1", "\n", "self", ".", "C_in", "=", "C_in", "\n", "self", ".", "C_out", "=", "C_out", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "dilation", "=", "dilation", "\n", "self", ".", "groups", "=", "groups", "\n", "self", ".", "slimmable", "=", "slimmable", "\n", "self", ".", "width_mult_list", "=", "width_mult_list", "\n", "assert", "stride", "in", "[", "1", ",", "2", "]", "\n", "if", "self", ".", "stride", "==", "2", ":", "self", ".", "dilation", "=", "1", "\n", "self", ".", "ratio", "=", "(", "1.", ",", "1.", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "if", "self", ".", "slimmable", ":", "\n", "            ", "self", ".", "conv1", "=", "USConv2d", "(", "C_in", ",", "C_out", ",", "3", ",", "stride", ",", "padding", "=", "dilation", ",", "dilation", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "False", ",", "width_mult_list", "=", "width_mult_list", ")", "\n", "self", ".", "bn1", "=", "USBatchNorm2d", "(", "C_out", ",", "width_mult_list", ")", "\n", "self", ".", "conv2", "=", "USConv2d", "(", "C_out", ",", "C_out", ",", "3", ",", "1", ",", "padding", "=", "dilation", ",", "dilation", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "False", ",", "width_mult_list", "=", "width_mult_list", ")", "\n", "self", ".", "bn2", "=", "USBatchNorm2d", "(", "C_out", ",", "width_mult_list", ")", "\n", "\n", "self", ".", "skip", "=", "USConv2d", "(", "C_in", ",", "C_out", ",", "1", ",", "stride", ",", "padding", "=", "0", ",", "dilation", "=", "dilation", ",", "groups", "=", "1", ",", "bias", "=", "False", ",", "width_mult_list", "=", "width_mult_list", ")", "\n", "self", ".", "bn3", "=", "USBatchNorm2d", "(", "C_out", ",", "width_mult_list", ")", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv1", "=", "Conv2d", "(", "C_in", ",", "C_out", ",", "3", ",", "stride", ",", "padding", "=", "dilation", ",", "dilation", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "False", ")", "\n", "# self.bn1 = nn.BatchNorm2d(C_out)", "\n", "self", ".", "bn1", "=", "BatchNorm2d", "(", "C_out", ")", "\n", "self", ".", "conv2", "=", "Conv2d", "(", "C_out", ",", "C_out", ",", "3", ",", "1", ",", "padding", "=", "dilation", ",", "dilation", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "False", ")", "\n", "# self.bn2 = nn.BatchNorm2d(C_out)", "\n", "self", ".", "bn2", "=", "BatchNorm2d", "(", "C_out", ")", "\n", "\n", "if", "self", ".", "C_in", "!=", "self", ".", "C_out", "or", "self", ".", "stride", "!=", "1", ":", "\n", "                ", "self", ".", "skip", "=", "Conv2d", "(", "C_in", ",", "C_out", ",", "1", ",", "stride", ",", "padding", "=", "0", ",", "dilation", "=", "dilation", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "BatchNorm2d", "(", "C_out", ")", "\n", "\n", "", "", "", "def", "set_ratio", "(", "self", ",", "ratio", ")", ":", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations.BasicResidual.set_ratio": [[626, 637], ["operations.BasicResidual.conv1.set_ratio", "operations.BasicResidual.bn1.set_ratio", "operations.BasicResidual.conv2.set_ratio", "operations.BasicResidual.bn2.set_ratio", "hasattr", "len", "operations.BasicResidual.skip.set_ratio", "operations.BasicResidual.bn3.set_ratio"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.DwsBlock.set_ratio", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.DwsBlock.set_ratio", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.DwsBlock.set_ratio", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.DwsBlock.set_ratio", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.DwsBlock.set_ratio", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.DwsBlock.set_ratio"], ["        ", "assert", "len", "(", "ratio", ")", "==", "2", "\n", "self", ".", "ratio", "=", "ratio", "\n", "self", ".", "conv1", ".", "set_ratio", "(", "ratio", ")", "\n", "self", ".", "bn1", ".", "set_ratio", "(", "ratio", "[", "1", "]", ")", "\n", "self", ".", "conv2", ".", "set_ratio", "(", "(", "ratio", "[", "1", "]", ",", "ratio", "[", "1", "]", ")", ")", "\n", "self", ".", "bn2", ".", "set_ratio", "(", "ratio", "[", "1", "]", ")", "\n", "\n", "if", "hasattr", "(", "self", ",", "'skip'", ")", ":", "\n", "            ", "self", ".", "skip", ".", "set_ratio", "(", "ratio", ")", "\n", "self", ".", "bn3", ".", "set_ratio", "(", "ratio", "[", "1", "]", ")", "\n", "\n", "", "", "@", "staticmethod", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations.BasicResidual._flops": [[638, 643], ["operations.BasicResidual", "thop.profile", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["None"], ["def", "_flops", "(", "h", ",", "w", ",", "C_in", ",", "C_out", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "groups", "=", "1", ")", ":", "\n", "        ", "layer", "=", "BasicResidual", "(", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "dilation", ",", "groups", ",", "slimmable", "=", "False", ")", "\n", "flops", ",", "params", "=", "profile", "(", "layer", ",", "inputs", "=", "(", "torch", ".", "randn", "(", "1", ",", "C_in", ",", "h", ",", "w", ")", ",", ")", ",", "custom_ops", "=", "custom_ops", ")", "\n", "return", "flops", "\n", "\n", "", "@", "staticmethod", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations.BasicResidual._latency": [[644, 649], ["operations.BasicResidual", "compute_latency"], "methods", ["None"], ["def", "_latency", "(", "h", ",", "w", ",", "C_in", ",", "C_out", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "groups", "=", "1", ")", ":", "\n", "        ", "layer", "=", "BasicResidual", "(", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "dilation", ",", "groups", ",", "slimmable", "=", "False", ")", "\n", "latency", "=", "compute_latency", "(", "layer", ",", "(", "1", ",", "C_in", ",", "h", ",", "w", ")", ")", "\n", "return", "latency", "\n", "\n", "", "def", "forward_latency", "(", "self", ",", "size", ")", ":", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations.BasicResidual.forward_latency": [[650, 671], ["slimmable_ops.make_divisible", "print", "operations.BasicResidual._latency", "numpy.save", "slimmable_ops.make_divisible"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.make_divisible", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.DwsBlock._latency", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.save", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.make_divisible"], ["        ", "c_in", ",", "h_in", ",", "w_in", "=", "size", "\n", "if", "self", ".", "slimmable", ":", "\n", "            ", "assert", "c_in", "==", "make_divisible", "(", "self", ".", "C_in", "*", "self", ".", "ratio", "[", "0", "]", ")", "\n", "c_out", "=", "make_divisible", "(", "self", ".", "C_out", "*", "self", ".", "ratio", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "assert", "c_in", "==", "self", ".", "C_in", ",", "\"c_in %d, self.C_in%d\"", "%", "(", "c_in", ",", "self", ".", "C_in", ")", "\n", "c_out", "=", "self", ".", "C_out", "\n", "", "if", "self", ".", "stride", "==", "1", ":", "\n", "            ", "h_out", "=", "h_in", ";", "w_out", "=", "w_in", "\n", "", "else", ":", "\n", "            ", "h_out", "=", "h_in", "//", "2", ";", "w_out", "=", "w_in", "//", "2", "\n", "", "name", "=", "\"BasicResidual_H%d_W%d_Cin%d_Cout%d_stride%d_dilation%d\"", "%", "(", "h_in", ",", "w_in", ",", "c_in", ",", "c_out", ",", "self", ".", "stride", ",", "self", ".", "dilation", ")", "\n", "if", "name", "in", "latency_lookup_table", ":", "\n", "            ", "latency", "=", "latency_lookup_table", "[", "name", "]", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"not found in latency_lookup_table:\"", ",", "name", ")", "\n", "latency", "=", "BasicResidual", ".", "_latency", "(", "h_in", ",", "w_in", ",", "c_in", ",", "c_out", ",", "self", ".", "kernel_size", ",", "self", ".", "stride", ",", "self", ".", "dilation", ",", "self", ".", "groups", ")", "\n", "latency_lookup_table", "[", "name", "]", "=", "latency", "\n", "np", ".", "save", "(", "table_file_name", ",", "latency_lookup_table", ")", "\n", "", "return", "latency", ",", "(", "c_out", ",", "h_out", ",", "w_out", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations.BasicResidual.forward_flops": [[673, 697], ["slimmable_ops.make_divisible", "print", "operations.BasicResidual._flops", "numpy.save", "slimmable_ops.make_divisible"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.make_divisible", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.DwsBlock._flops", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.save", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.make_divisible"], ["        ", "c_in", ",", "h_in", ",", "w_in", "=", "size", "\n", "if", "self", ".", "slimmable", ":", "\n", "            ", "assert", "c_in", "==", "make_divisible", "(", "self", ".", "C_in", "*", "self", ".", "ratio", "[", "0", "]", ")", ",", "\"c_in %d, self.C_in * self.ratio[0] %d\"", "%", "(", "c_in", ",", "self", ".", "C_in", "*", "self", ".", "ratio", "[", "0", "]", ")", "\n", "c_out", "=", "make_divisible", "(", "self", ".", "C_out", "*", "self", ".", "ratio", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "assert", "c_in", "==", "self", ".", "C_in", ",", "\"c_in %d, self.C_in %d\"", "%", "(", "c_in", ",", "self", ".", "C_in", ")", "\n", "c_out", "=", "self", ".", "C_out", "\n", "", "if", "self", ".", "stride", "==", "1", ":", "\n", "            ", "h_out", "=", "h_in", ";", "w_out", "=", "w_in", "\n", "", "else", ":", "\n", "            ", "h_out", "=", "h_in", "//", "2", ";", "w_out", "=", "w_in", "//", "2", "\n", "", "name", "=", "\"BasicResidual_H%d_W%d_Cin%d_Cout%d_kernel%d_stride%d\"", "%", "(", "h_in", ",", "w_in", ",", "c_in", ",", "c_out", ",", "self", ".", "kernel_size", ",", "self", ".", "stride", ")", "\n", "if", "name", "in", "flops_lookup_table", ":", "\n", "            ", "flops", "=", "flops_lookup_table", "[", "name", "]", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"not found in flops_lookup_table:\"", ",", "name", ")", "\n", "flops", "=", "BasicResidual", ".", "_flops", "(", "h_in", ",", "w_in", ",", "c_in", ",", "c_out", ",", "self", ".", "kernel_size", ",", "self", ".", "stride", ",", "self", ".", "dilation", ",", "self", ".", "groups", ")", "\n", "flops_lookup_table", "[", "name", "]", "=", "flops", "\n", "np", ".", "save", "(", "table_file_name", ",", "flops_lookup_table", ")", "\n", "# if quantize:", "\n", "#     flops /= 4", "\n", "\n", "", "return", "flops", ",", "(", "c_out", ",", "h_out", ",", "w_out", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations.BasicResidual.forward": [[699, 718], ["operations.BasicResidual.conv1", "operations.BasicResidual.relu", "operations.BasicResidual.conv2", "hasattr", "operations.BasicResidual.relu", "operations.BasicResidual.bn1", "operations.BasicResidual.bn2", "operations.BasicResidual.skip", "operations.BasicResidual.bn3"], "methods", ["None"], ["        ", "identity", "=", "x", "\n", "out", "=", "self", ".", "conv1", "(", "x", ",", "quantize", "=", "quantize", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ",", "quantize", "=", "quantize", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "hasattr", "(", "self", ",", "'skip'", ")", ":", "\n", "            ", "identity", "=", "self", ".", "bn3", "(", "self", ".", "skip", "(", "identity", ",", "quantize", "=", "quantize", ")", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n", "\n", "", "", "class", "SkipConnect", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "stride", "=", "1", ",", "slimmable", "=", "True", ",", "width_mult_list", "=", "[", "1.", "]", ")", ":", "\n", "        ", "super", "(", "SkipConnect", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "stride", "in", "[", "1", ",", "2", "]", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations.SkipConnect.__init__": [[721, 745], ["torch.Module.__init__", "slimmable_ops.USConv2d", "slimmable_ops.USBatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "Conv2d", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.Cutout.__init__"], ["self", ".", "C_out", "=", "C_out", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "slimmable", "=", "slimmable", "\n", "self", ".", "width_mult_list", "=", "width_mult_list", "\n", "self", ".", "ratio", "=", "(", "1.", ",", "1.", ")", "\n", "\n", "self", ".", "kernel_size", "=", "1", "\n", "self", ".", "padding", "=", "0", "\n", "\n", "if", "slimmable", ":", "\n", "            ", "self", ".", "conv", "=", "USConv2d", "(", "C_in", ",", "C_out", ",", "1", ",", "stride", "=", "stride", ",", "padding", "=", "0", ",", "bias", "=", "False", ",", "width_mult_list", "=", "width_mult_list", ")", "\n", "self", ".", "bn", "=", "USBatchNorm2d", "(", "C_out", ",", "width_mult_list", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "# elif stride == 2 or C_in != C_out:", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv", "=", "Conv2d", "(", "C_in", ",", "C_out", ",", "1", ",", "stride", "=", "stride", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn", "=", "BatchNorm2d", "(", "C_out", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "\n", "", "", "def", "set_ratio", "(", "self", ",", "ratio", ")", ":", "\n", "        ", "assert", "len", "(", "ratio", ")", "==", "2", "\n", "\n", "self", ".", "ratio", "=", "ratio", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations.SkipConnect.set_ratio": [[747, 753], ["operations.SkipConnect.conv.set_ratio", "operations.SkipConnect.bn.set_ratio", "len"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.DwsBlock.set_ratio", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.DwsBlock.set_ratio"], ["self", ".", "bn", ".", "set_ratio", "(", "ratio", "[", "1", "]", ")", "\n", "\n", "\n", "", "@", "staticmethod", "\n", "def", "_flops", "(", "h", ",", "w", ",", "C_in", ",", "C_out", ",", "stride", "=", "1", ")", ":", "\n", "        ", "layer", "=", "SkipConnect", "(", "C_in", ",", "C_out", ",", "stride", ",", "slimmable", "=", "False", ")", "\n", "flops", ",", "params", "=", "profile", "(", "layer", ",", "inputs", "=", "(", "torch", ".", "randn", "(", "1", ",", "C_in", ",", "h", ",", "w", ")", ",", ")", ",", "custom_ops", "=", "custom_ops", ")", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations.SkipConnect._flops": [[755, 760], ["operations.SkipConnect", "thop.profile", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["None"], ["\n", "", "@", "staticmethod", "\n", "def", "_latency", "(", "h", ",", "w", ",", "C_in", ",", "C_out", ",", "stride", "=", "1", ")", ":", "\n", "        ", "layer", "=", "SkipConnect", "(", "C_in", ",", "C_out", ",", "stride", ",", "slimmable", "=", "False", ")", "\n", "latency", "=", "compute_latency", "(", "layer", ",", "(", "1", ",", "C_in", ",", "h", ",", "w", ")", ")", "\n", "return", "latency", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations.SkipConnect._latency": [[761, 766], ["operations.SkipConnect", "compute_latency"], "methods", ["None"], ["\n", "", "def", "forward_latency", "(", "self", ",", "size", ")", ":", "\n", "        ", "c_in", ",", "h_in", ",", "w_in", "=", "size", "\n", "if", "self", ".", "slimmable", ":", "\n", "            ", "assert", "c_in", "==", "make_divisible", "(", "self", ".", "C_in", "*", "self", ".", "ratio", "[", "0", "]", ")", "\n", "c_out", "=", "make_divisible", "(", "self", ".", "C_out", "*", "self", ".", "ratio", "[", "1", "]", ")", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations.SkipConnect.forward_latency": [[767, 788], ["slimmable_ops.make_divisible", "print", "operations.SkipConnect._latency", "numpy.save", "slimmable_ops.make_divisible"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.make_divisible", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.DwsBlock._latency", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.save", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.make_divisible"], ["", "else", ":", "\n", "            ", "assert", "c_in", "==", "self", ".", "C_in", "\n", "c_out", "=", "self", ".", "C_out", "\n", "", "if", "self", ".", "stride", "==", "1", ":", "\n", "            ", "h_out", "=", "h_in", ";", "w_out", "=", "w_in", "\n", "", "else", ":", "\n", "            ", "h_out", "=", "h_in", "//", "2", ";", "w_out", "=", "w_in", "//", "2", "\n", "", "name", "=", "\"SkipConnect_H%d_W%d_Cin%d_Cout%d_stride%d\"", "%", "(", "h_in", ",", "w_in", ",", "c_in", ",", "c_out", ",", "self", ".", "stride", ")", "\n", "if", "name", "in", "latency_lookup_table", ":", "\n", "            ", "latency", "=", "latency_lookup_table", "[", "name", "]", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"not found in latency_lookup_table:\"", ",", "name", ")", "\n", "latency", "=", "SkipConnect", ".", "_latency", "(", "h_in", ",", "w_in", ",", "c_in", ",", "c_out", ",", "self", ".", "stride", ")", "\n", "latency_lookup_table", "[", "name", "]", "=", "latency", "\n", "np", ".", "save", "(", "table_file_name", ",", "latency_lookup_table", ")", "\n", "", "return", "latency", ",", "(", "c_out", ",", "h_out", ",", "w_out", ")", "\n", "\n", "\n", "", "def", "forward_flops", "(", "self", ",", "size", ",", "quantize", "=", "False", ")", ":", "\n", "        ", "c_in", ",", "h_in", ",", "w_in", "=", "size", "\n", "if", "self", ".", "slimmable", ":", "\n", "            ", "assert", "c_in", "==", "make_divisible", "(", "self", ".", "C_in", "*", "self", ".", "ratio", "[", "0", "]", ")", ",", "\"c_in %d, self.C_in * self.ratio[0] %d\"", "%", "(", "c_in", ",", "self", ".", "C_in", "*", "self", ".", "ratio", "[", "0", "]", ")", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations.SkipConnect.forward_flops": [[790, 814], ["slimmable_ops.make_divisible", "print", "operations.SkipConnect._flops", "numpy.save", "slimmable_ops.make_divisible"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.make_divisible", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.DwsBlock._flops", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.save", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.make_divisible"], ["", "else", ":", "\n", "            ", "assert", "c_in", "==", "self", ".", "C_in", ",", "\"c_in %d, self.C_in %d\"", "%", "(", "c_in", ",", "self", ".", "C_in", ")", "\n", "c_out", "=", "self", ".", "C_out", "\n", "", "if", "self", ".", "stride", "==", "1", ":", "\n", "            ", "h_out", "=", "h_in", ";", "w_out", "=", "w_in", "\n", "", "else", ":", "\n", "            ", "h_out", "=", "h_in", "//", "2", ";", "w_out", "=", "w_in", "//", "2", "\n", "", "name", "=", "\"SkipConnect_H%d_W%d_Cin%d_Cout%d_stride%d\"", "%", "(", "h_in", ",", "w_in", ",", "c_in", ",", "c_out", ",", "self", ".", "stride", ")", "\n", "if", "name", "in", "flops_lookup_table", ":", "\n", "            ", "flops", "=", "flops_lookup_table", "[", "name", "]", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"not found in flops_lookup_table:\"", ",", "name", ")", "\n", "flops", "=", "SkipConnect", ".", "_flops", "(", "h_in", ",", "w_in", ",", "c_in", ",", "c_out", ",", "self", ".", "stride", ")", "\n", "flops_lookup_table", "[", "name", "]", "=", "flops", "\n", "np", ".", "save", "(", "table_file_name", ",", "flops_lookup_table", ")", "\n", "# if quantize:", "\n", "#     flops /= 4", "\n", "\n", "", "return", "flops", ",", "(", "c_out", ",", "h_out", ",", "w_out", ")", "\n", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "quantize", "=", "False", ")", ":", "\n", "        ", "if", "hasattr", "(", "self", ",", "'conv'", ")", ":", "\n", "            ", "out", "=", "self", ".", "conv", "(", "x", ",", "quantize", "=", "quantize", ")", "\n", "out", "=", "self", ".", "bn", "(", "out", ")", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations.SkipConnect.forward": [[816, 826], ["hasattr", "operations.SkipConnect.conv", "operations.SkipConnect.relu", "operations.SkipConnect.bn"], "methods", ["None"], ["", "else", ":", "\n", "            ", "out", "=", "x", "\n", "\n", "", "return", "out", "\n", "\n", "\n", "", "", "class", "DwsBlock", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "slimmable", "=", "True", ",", "width_mult_list", "=", "[", "1.", "]", ")", ":", "\n", "        ", "super", "(", "DwsBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Both self.conv1 and self.downsample layers downsample the input when stride != 1", "\n", "self", ".", "C_in", "=", "C_in", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations.DwsBlock.__init__": [[829, 872], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.ReLU", "slimmable_ops.USConv2d", "slimmable_ops.USBatchNorm2d", "slimmable_ops.USConv2d", "slimmable_ops.USBatchNorm2d", "slimmable_ops.USConv2d", "slimmable_ops.USBatchNorm2d", "slimmable_ops.USConv2d", "slimmable_ops.USBatchNorm2d", "Conv2d", "BatchNorm2d", "Conv2d", "BatchNorm2d", "Conv2d", "BatchNorm2d", "Conv2d", "BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.Cutout.__init__"], ["self", ".", "stride", "=", "stride", "\n", "self", ".", "dilation", "=", "dilation", "\n", "self", ".", "groups", "=", "groups", "\n", "self", ".", "slimmable", "=", "slimmable", "\n", "self", ".", "width_mult_list", "=", "width_mult_list", "\n", "assert", "stride", "in", "[", "1", ",", "2", "]", "\n", "if", "self", ".", "stride", "==", "2", ":", "self", ".", "dilation", "=", "1", "\n", "self", ".", "ratio", "=", "(", "1.", ",", "1.", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "if", "self", ".", "slimmable", ":", "\n", "            ", "self", ".", "conv1", "=", "USConv2d", "(", "C_in", ",", "C_in", "*", "4", ",", "1", ",", "1", ",", "padding", "=", "0", ",", "dilation", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "False", ",", "width_mult_list", "=", "width_mult_list", ")", "\n", "self", ".", "bn1", "=", "USBatchNorm2d", "(", "C_in", "*", "4", ",", "width_mult_list", ")", "\n", "\n", "self", ".", "conv2", "=", "USConv2d", "(", "C_in", "*", "4", ",", "C_in", "*", "4", ",", "3", ",", "stride", ",", "padding", "=", "dilation", ",", "dilation", "=", "dilation", ",", "groups", "=", "C_in", "*", "4", ",", "bias", "=", "False", ",", "width_mult_list", "=", "width_mult_list", ")", "\n", "self", ".", "bn2", "=", "USBatchNorm2d", "(", "C_in", "*", "4", ",", "width_mult_list", ")", "\n", "\n", "self", ".", "conv3", "=", "USConv2d", "(", "C_in", "*", "4", ",", "C_out", ",", "1", ",", "1", ",", "padding", "=", "0", ",", "dilation", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "False", ",", "width_mult_list", "=", "width_mult_list", ")", "\n", "self", ".", "bn3", "=", "USBatchNorm2d", "(", "C_out", ",", "width_mult_list", ")", "\n", "\n", "self", ".", "skip", "=", "USConv2d", "(", "C_in", ",", "C_out", ",", "1", ",", "stride", ",", "padding", "=", "0", ",", "dilation", "=", "dilation", ",", "groups", "=", "1", ",", "bias", "=", "False", ",", "width_mult_list", "=", "width_mult_list", ")", "\n", "self", ".", "bn4", "=", "USBatchNorm2d", "(", "C_out", ",", "width_mult_list", ")", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv1", "=", "Conv2d", "(", "C_in", ",", "C_in", "*", "4", ",", "1", ",", "1", ",", "padding", "=", "0", ",", "dilation", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "BatchNorm2d", "(", "C_in", "*", "4", ")", "\n", "\n", "self", ".", "conv2", "=", "Conv2d", "(", "C_in", "*", "4", ",", "C_in", "*", "4", ",", "3", ",", "stride", ",", "padding", "=", "dilation", ",", "dilation", "=", "dilation", ",", "groups", "=", "C_in", "*", "4", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "BatchNorm2d", "(", "C_in", "*", "4", ")", "\n", "\n", "self", ".", "conv3", "=", "Conv2d", "(", "C_in", "*", "4", ",", "C_out", ",", "1", ",", "1", ",", "padding", "=", "0", ",", "dilation", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "BatchNorm2d", "(", "C_out", ")", "\n", "\n", "if", "self", ".", "C_in", "!=", "self", ".", "C_out", "or", "self", ".", "stride", "!=", "1", ":", "\n", "                ", "self", ".", "skip", "=", "Conv2d", "(", "C_in", ",", "C_out", ",", "1", ",", "stride", ",", "padding", "=", "0", ",", "dilation", "=", "dilation", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn4", "=", "BatchNorm2d", "(", "C_out", ")", "\n", "\n", "\n", "", "", "", "def", "set_ratio", "(", "self", ",", "ratio", ")", ":", "\n", "        ", "assert", "len", "(", "ratio", ")", "==", "2", "\n", "self", ".", "ratio", "=", "ratio", "\n", "self", ".", "conv1", ".", "set_ratio", "(", "(", "ratio", "[", "0", "]", ",", "1", ")", ")", "\n", "self", ".", "bn1", ".", "set_ratio", "(", "1", ")", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations.DwsBlock.set_ratio": [[874, 887], ["operations.DwsBlock.conv1.set_ratio", "operations.DwsBlock.bn1.set_ratio", "operations.DwsBlock.conv2.set_ratio", "operations.DwsBlock.bn2.set_ratio", "operations.DwsBlock.conv3.set_ratio", "operations.DwsBlock.bn3.set_ratio", "hasattr", "len", "operations.DwsBlock.skip.set_ratio", "operations.DwsBlock.bn4.set_ratio"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.DwsBlock.set_ratio", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.DwsBlock.set_ratio", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.DwsBlock.set_ratio", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.DwsBlock.set_ratio", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.DwsBlock.set_ratio", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.DwsBlock.set_ratio", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.DwsBlock.set_ratio", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.DwsBlock.set_ratio"], ["self", ".", "bn2", ".", "set_ratio", "(", "1", ")", "\n", "self", ".", "conv3", ".", "set_ratio", "(", "(", "1", ",", "ratio", "[", "1", "]", ")", ")", "\n", "self", ".", "bn3", ".", "set_ratio", "(", "ratio", "[", "1", "]", ")", "\n", "\n", "if", "hasattr", "(", "self", ",", "'skip'", ")", ":", "\n", "            ", "self", ".", "skip", ".", "set_ratio", "(", "ratio", ")", "\n", "self", ".", "bn4", ".", "set_ratio", "(", "ratio", "[", "1", "]", ")", "\n", "\n", "", "", "@", "staticmethod", "\n", "def", "_flops", "(", "h", ",", "w", ",", "C_in", ",", "C_out", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "groups", "=", "1", ")", ":", "\n", "        ", "layer", "=", "DwsBlock", "(", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "dilation", ",", "groups", "=", "1", ",", "slimmable", "=", "False", ")", "\n", "flops", ",", "params", "=", "profile", "(", "layer", ",", "inputs", "=", "(", "torch", ".", "randn", "(", "1", ",", "C_in", ",", "h", ",", "w", ")", ",", ")", ",", "custom_ops", "=", "custom_ops", ")", "\n", "return", "flops", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations.DwsBlock._flops": [[888, 893], ["operations.DwsBlock", "thop.profile", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_latency", "(", "h", ",", "w", ",", "C_in", ",", "C_out", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "groups", "=", "1", ")", ":", "\n", "        ", "layer", "=", "DwsBlock", "(", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "dilation", ",", "groups", ",", "slimmable", "=", "False", ")", "\n", "latency", "=", "compute_latency", "(", "layer", ",", "(", "1", ",", "C_in", ",", "h", ",", "w", ")", ")", "\n", "return", "latency", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations.DwsBlock._latency": [[894, 899], ["operations.DwsBlock", "compute_latency"], "methods", ["None"], ["", "def", "forward_latency", "(", "self", ",", "size", ")", ":", "\n", "        ", "c_in", ",", "h_in", ",", "w_in", "=", "size", "\n", "if", "self", ".", "slimmable", ":", "\n", "            ", "c_out", "=", "make_divisible", "(", "self", ".", "C_out", "*", "self", ".", "ratio", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "c_out", "=", "self", ".", "C_out", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations.DwsBlock.forward_latency": [[900, 919], ["slimmable_ops.make_divisible", "print", "operations.DwsBlock._latency", "numpy.save"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.make_divisible", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.DwsBlock._latency", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.save"], ["", "if", "self", ".", "stride", "==", "1", ":", "\n", "            ", "h_out", "=", "h_in", ";", "w_out", "=", "w_in", "\n", "", "else", ":", "\n", "            ", "h_out", "=", "h_in", "//", "2", ";", "w_out", "=", "w_in", "//", "2", "\n", "", "name", "=", "\"DwsBlock_H%d_W%d_Cin%d_Cout%d_stride%d_dilation%d\"", "%", "(", "h_in", ",", "w_in", ",", "c_in", ",", "c_out", ",", "self", ".", "stride", ",", "self", ".", "dilation", ")", "\n", "if", "name", "in", "latency_lookup_table", ":", "\n", "            ", "latency", "=", "latency_lookup_table", "[", "name", "]", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"not found in latency_lookup_table:\"", ",", "name", ")", "\n", "latency", "=", "DwsBlock", ".", "_latency", "(", "h_in", ",", "w_in", ",", "c_in", ",", "c_out", ",", "self", ".", "kernel_size", ",", "self", ".", "stride", ",", "self", ".", "dilation", ",", "self", ".", "groups", ")", "\n", "latency_lookup_table", "[", "name", "]", "=", "latency", "\n", "np", ".", "save", "(", "table_file_name", ",", "latency_lookup_table", ")", "\n", "", "return", "latency", ",", "(", "c_out", ",", "h_out", ",", "w_out", ")", "\n", "\n", "\n", "", "def", "forward_flops", "(", "self", ",", "size", ",", "quantize", "=", "False", ")", ":", "\n", "        ", "c_in", ",", "h_in", ",", "w_in", "=", "size", "\n", "if", "self", ".", "slimmable", ":", "\n", "            ", "c_out", "=", "make_divisible", "(", "self", ".", "C_out", "*", "self", ".", "ratio", "[", "1", "]", ")", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations.DwsBlock.forward_flops": [[921, 944], ["slimmable_ops.make_divisible", "print", "operations.DwsBlock._flops", "numpy.save"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.make_divisible", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.DwsBlock._flops", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.save"], ["", "if", "self", ".", "stride", "==", "1", ":", "\n", "            ", "h_out", "=", "h_in", ";", "w_out", "=", "w_in", "\n", "", "else", ":", "\n", "            ", "h_out", "=", "h_in", "//", "2", ";", "w_out", "=", "w_in", "//", "2", "\n", "", "name", "=", "\"DwsBlock_H%d_W%d_Cin%d_Cout%d_kernel%d_stride%d\"", "%", "(", "h_in", ",", "w_in", ",", "c_in", ",", "c_out", ",", "self", ".", "kernel_size", ",", "self", ".", "stride", ")", "\n", "if", "name", "in", "flops_lookup_table", ":", "\n", "            ", "flops", "=", "flops_lookup_table", "[", "name", "]", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"not found in flops_lookup_table:\"", ",", "name", ")", "\n", "flops", "=", "DwsBlock", ".", "_flops", "(", "h_in", ",", "w_in", ",", "c_in", ",", "c_out", ",", "self", ".", "kernel_size", ",", "self", ".", "stride", ",", "self", ".", "dilation", ",", "self", ".", "groups", ")", "\n", "flops_lookup_table", "[", "name", "]", "=", "flops", "\n", "np", ".", "save", "(", "table_file_name", ",", "flops_lookup_table", ")", "\n", "# if quantize:", "\n", "#     ratio_dws = 3*3 / (3*3 + self.C_out)", "\n", "#     flops = ratio_dws * flops + (1-ratio_dws) * flops / 4", "\n", "\n", "", "return", "flops", ",", "(", "c_out", ",", "h_out", ",", "w_out", ")", "\n", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "quantize", "=", "False", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ",", "quantize", "=", "quantize", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations.DwsBlock.forward": [[946, 970], ["operations.DwsBlock.conv1", "operations.DwsBlock.relu", "operations.DwsBlock.conv2", "operations.DwsBlock.relu", "operations.DwsBlock.conv3", "hasattr", "operations.DwsBlock.relu", "operations.DwsBlock.bn1", "operations.DwsBlock.bn2", "operations.DwsBlock.bn3", "operations.DwsBlock.skip", "operations.DwsBlock.bn4"], "methods", ["None"], ["out", "=", "self", ".", "conv2", "(", "out", ",", "quantize", "=", "False", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "conv3", "(", "out", ",", "quantize", "=", "quantize", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "hasattr", "(", "self", ",", "'skip'", ")", ":", "\n", "            ", "identity", "=", "self", ".", "bn4", "(", "self", ".", "skip", "(", "identity", ",", "quantize", "=", "quantize", ")", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n", "\n", "", "", "OPS", "=", "{", "\n", "'skip'", ":", "lambda", "C_in", ",", "C_out", ",", "stride", ",", "slimmable", ",", "width_mult_list", ":", "SkipConnect", "(", "C_in", ",", "C_out", ",", "stride", ",", "slimmable", ",", "width_mult_list", ")", ",", "\n", "'conv3x3'", ":", "lambda", "C_in", ",", "C_out", ",", "stride", ",", "slimmable", ",", "width_mult_list", ":", "Conv3x3", "(", "C_in", ",", "C_out", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "dilation", "=", "1", ",", "slimmable", "=", "slimmable", ",", "width_mult_list", "=", "width_mult_list", ")", ",", "\n", "'conv3x3_d2'", ":", "lambda", "C_in", ",", "C_out", ",", "stride", ",", "slimmable", ",", "width_mult_list", ":", "Conv3x3", "(", "C_in", ",", "C_out", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "dilation", "=", "2", ",", "slimmable", "=", "slimmable", ",", "width_mult_list", "=", "width_mult_list", ")", ",", "\n", "'conv3x3_d4'", ":", "lambda", "C_in", ",", "C_out", ",", "stride", ",", "slimmable", ",", "width_mult_list", ":", "Conv3x3", "(", "C_in", ",", "C_out", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "dilation", "=", "4", ",", "slimmable", "=", "slimmable", ",", "width_mult_list", "=", "width_mult_list", ")", ",", "\n", "'residual'", ":", "lambda", "C_in", ",", "C_out", ",", "stride", ",", "slimmable", ",", "width_mult_list", ":", "BasicResidual", "(", "C_in", ",", "C_out", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "dilation", "=", "1", ",", "slimmable", "=", "slimmable", ",", "width_mult_list", "=", "width_mult_list", ")", ",", "\n", "'dwsblock'", ":", "lambda", "C_in", ",", "C_out", ",", "stride", ",", "slimmable", ",", "width_mult_list", ":", "DwsBlock", "(", "C_in", ",", "C_out", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "dilation", "=", "1", ",", "slimmable", "=", "slimmable", ",", "width_mult_list", "=", "width_mult_list", ")", ",", "\n", "}", "\n", "\n", ""]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations.add_path": [[20, 23], ["sys.path.insert"], "function", ["None"], ["def", "add_path", "(", "path", ")", ":", "\n", "    ", "if", "path", "not", "in", "sys", ".", "path", ":", "\n", "        ", "sys", ".", "path", ".", "insert", "(", "0", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations.count_custom": [[53, 55], ["None"], "function", ["None"], ["\n", "\n", "def", "count_custom", "(", "m", ",", "x", ",", "y", ")", ":", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.config_search.add_path": [[39, 42], ["sys.path.insert"], "function", ["None"], ["C", ".", "target_path", "=", "'/home/yf22/dataset/horse2zebra/target_train'", "\n", "C", ".", "num_train_imgs", "=", "1067", "\n", "C", ".", "num_eval_imgs", "=", "120", "\n", "", "elif", "C", ".", "dataset", "==", "'zebra2horse'", ":", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.eval.count_custom": [[52, 54], ["None"], "function", ["None"], ["    ", "torch", ".", "backends", ".", "cudnn", ".", "enabled", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "seed", "=", "config", ".", "seed", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.eval.main": [[57, 101], ["torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "model_eval.NAS_GAN_Eval", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.utils.data.DataLoader", "print", "os.path.join", "thop.profile", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.nn.DataParallel().cuda.load_state_dict", "torchvision.ToTensor", "datasets.ImageDataset", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "eval.infer", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "function", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.load", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.load", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.load", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.load", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.load", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.load", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.load", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.load", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.load", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.load", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.train_search.infer"], ["if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "\n", "", "state", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "config", ".", "load_path", ",", "'arch.pt'", ")", ")", "\n", "# Model #######################################", "\n", "model", "=", "NAS_GAN_Eval", "(", "state", "[", "'alpha'", "]", ",", "state", "[", "'beta'", "]", ",", "state", "[", "'ratio'", "]", ",", "state", "[", "'beta_sh'", "]", ",", "state", "[", "'ratio_sh'", "]", ",", "layers", "=", "config", ".", "layers", ",", "\n", "width_mult_list", "=", "config", ".", "width_mult_list", ",", "width_mult_list_sh", "=", "config", ".", "width_mult_list_sh", ",", "quantize", "=", "config", ".", "quantize", ")", "\n", "\n", "if", "not", "config", ".", "real_measurement", ":", "\n", "        ", "flops", ",", "params", "=", "profile", "(", "model", ",", "inputs", "=", "(", "torch", ".", "randn", "(", "1", ",", "3", ",", "256", ",", "256", ")", ",", ")", ",", "custom_ops", "=", "custom_ops", ")", "\n", "flops", "=", "model", ".", "forward_flops", "(", "size", "=", "(", "3", ",", "256", ",", "256", ")", ")", "\n", "print", "(", "\"params = %fMB, FLOPs = %fGB\"", "%", "(", "params", "/", "1e6", ",", "flops", "/", "1e9", ")", ")", "\n", "\n", "", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ")", ".", "cuda", "(", ")", "\n", "\n", "if", "config", ".", "ckpt", ":", "\n", "        ", "state_dict", "=", "torch", ".", "load", "(", "config", ".", "ckpt", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "False", ")", "\n", "\n", "", "transforms_", "=", "[", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "]", "\n", "test_loader", "=", "DataLoader", "(", "ImageDataset", "(", "config", ".", "dataset_path", ",", "transforms_", "=", "transforms_", ",", "mode", "=", "'test'", ")", ",", "\n", "batch_size", "=", "1", ",", "shuffle", "=", "False", ",", "num_workers", "=", "config", ".", "num_workers", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "valid_fid", "=", "infer", "(", "model", ",", "test_loader", ")", "\n", "print", "(", "'Eval Fid:'", ",", "valid_fid", ")", "\n", "\n", "\n", "\n", "", "", "def", "infer", "(", "model", ",", "test_loader", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "\n", "if", "not", "config", ".", "real_measurement", ":", "\n", "        ", "outdir", "=", "'output/eval'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "outdir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "outdir", ")", "\n", "\n", "", "", "for", "i", ",", "batch", "in", "enumerate", "(", "test_loader", ")", ":", "\n", "# Set model input", "\n", "        ", "real_A", "=", "Variable", "(", "batch", "[", "'A'", "]", ")", ".", "cuda", "(", ")", "\n", "fake_B", "=", "0.5", "*", "(", "model", "(", "real_A", ")", ".", "data", "+", "1.0", ")", "\n", "\n", "if", "not", "config", ".", "real_measurement", ":", "\n", "            ", "save_image", "(", "fake_B", ",", "os", ".", "path", ".", "join", "(", "outdir", ",", "'%04d.png'", "%", "(", "i", "+", "1", ")", ")", ")", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.eval.infer": [[103, 126], ["model.eval", "enumerate", "batch[].cuda", "model().data.float().clamp_", "util_gan.psnr.compute_psnr", "torchvision.utils.save_image", "model().data.float", "os.path.join", "model"], "function", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.eval_teacher.eval", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.util_gan.psnr.compute_psnr"], ["", "", "if", "not", "config", ".", "real_measurement", ":", "\n", "        ", "fid", "=", "compute_fid", "(", "outdir", ",", "config", ".", "dataset_path", "+", "'/test/B'", ")", "\n", "os", ".", "rename", "(", "outdir", ",", "outdir", "+", "'_%.3f'", "%", "(", "fid", ")", ")", "\n", "", "else", ":", "\n", "        ", "fid", "=", "0", "\n", "\n", "", "return", "fid", "\n", "\n", "\n", "", "if", "__name__", "==", "'__main__'", ":", "\n", "    ", "main", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.slimmable_ops.USConv2d.__init__": [[24, 34], ["quantize.QConv2d.__init__"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.Cutout.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "True", ",", "width_mult_list", "=", "[", "1.", "]", ",", "num_bits", "=", "8", ",", "num_bits_weight", "=", "8", ")", ":", "\n", "        ", "super", "(", "USConv2d", ",", "self", ")", ".", "__init__", "(", "\n", "in_channels", ",", "out_channels", ",", "\n", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "\n", "groups", "=", "groups", ",", "bias", "=", "bias", ",", "num_bits", "=", "num_bits", ",", "num_bits_weight", "=", "num_bits_weight", ")", "\n", "\n", "self", ".", "in_channels_max", "=", "in_channels", "\n", "self", ".", "out_channels_max", "=", "out_channels", "\n", "self", ".", "width_mult_list", "=", "width_mult_list", "\n", "self", ".", "ratio", "=", "(", "1.", ",", "1.", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.slimmable_ops.USConv2d.set_ratio": [[35, 37], ["None"], "methods", ["None"], ["", "def", "set_ratio", "(", "self", ",", "ratio", ")", ":", "\n", "        ", "self", ".", "ratio", "=", "ratio", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.slimmable_ops.USConv2d.forward": [[38, 77], ["slimmable_ops.make_divisible", "slimmable_ops.make_divisible", "str", "str", "slimmable_ops.USConv2d.quantize_input", "quantize.calculate_qparams", "quantize.Quantize", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "str", "str", "hasattr", "quantize.QuantMeasure", "quantize.Quantize"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.make_divisible", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.make_divisible", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.quantize.calculate_qparams", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.quantize.Quantize", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.quantize.Quantize"], ["", "def", "forward", "(", "self", ",", "input", ",", "quantize", "=", "False", ")", ":", "\n", "# assert self.ratio[0] in self.width_mult_list, str(self.ratio[0]) + \" in? \" + str(self.width_mult_list)", "\n", "        ", "self", ".", "in_channels", "=", "make_divisible", "(", "self", ".", "in_channels_max", "*", "self", ".", "ratio", "[", "0", "]", ")", "\n", "assert", "self", ".", "ratio", "[", "1", "]", "in", "self", ".", "width_mult_list", ",", "str", "(", "self", ".", "ratio", "[", "1", "]", ")", "+", "\" in? \"", "+", "str", "(", "self", ".", "width_mult_list", ")", "\n", "self", ".", "out_channels", "=", "make_divisible", "(", "self", ".", "out_channels_max", "*", "self", ".", "ratio", "[", "1", "]", ")", "\n", "\n", "weight", "=", "self", ".", "weight", "[", ":", "self", ".", "out_channels", ",", ":", "self", ".", "in_channels", ",", ":", ",", ":", "]", "\n", "\n", "if", "self", ".", "groups", "!=", "1", ":", "\n", "            ", "self", ".", "groups", "=", "self", ".", "out_channels", "\n", "\n", "", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "bias", "=", "self", ".", "bias", "[", ":", "self", ".", "out_channels", "]", "\n", "", "else", ":", "\n", "            ", "bias", "=", "self", ".", "bias", "\n", "\n", "", "if", "quantize", ":", "\n", "            ", "if", "not", "hasattr", "(", "self", ",", "'quantize_input'", ")", ":", "\n", "                ", "self", ".", "quantize_input", "=", "QuantMeasure", "(", "self", ".", "num_bits", ",", "shape_measure", "=", "(", "1", ",", "1", ",", "1", ",", "1", ")", ",", "flatten_dims", "=", "(", "1", ",", "-", "1", ")", ")", "\n", "\n", "", "qinput", "=", "self", ".", "quantize_input", "(", "input", ")", "\n", "weight_qparams", "=", "calculate_qparams", "(", "\n", "weight", ",", "num_bits", "=", "self", ".", "num_bits_weight", ",", "flatten_dims", "=", "(", "1", ",", "-", "1", ")", ",", "reduce_dim", "=", "None", ")", "\n", "qweight", "=", "Quantize", "(", "weight", ",", "qparams", "=", "weight_qparams", ")", "\n", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "                ", "qbias", "=", "Quantize", "(", "\n", "bias", ",", "num_bits", "=", "self", ".", "num_bits_weight", "+", "self", ".", "num_bits", ",", "\n", "flatten_dims", "=", "(", "0", ",", "-", "1", ")", ")", "\n", "", "else", ":", "\n", "                ", "qbias", "=", "None", "\n", "\n", "", "output", "=", "F", ".", "conv2d", "(", "qinput", ",", "qweight", ",", "qbias", ",", "self", ".", "stride", ",", "\n", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "groups", ")", "\n", "\n", "", "else", ":", "\n", "            ", "output", "=", "F", ".", "conv2d", "(", "input", ",", "weight", ",", "bias", ",", "self", ".", "stride", ",", "\n", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "groups", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.slimmable_ops.USConvTranspose2d.__init__": [[80, 90], ["quantize.QConvTranspose2d.__init__"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.Cutout.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "True", ",", "width_mult_list", "=", "[", "1.", "]", ",", "num_bits", "=", "8", ",", "num_bits_weight", "=", "8", ")", ":", "\n", "        ", "super", "(", "USConvTranspose2d", ",", "self", ")", ".", "__init__", "(", "\n", "in_channels", ",", "out_channels", ",", "\n", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "output_padding", "=", "output_padding", ",", "dilation", "=", "dilation", ",", "\n", "groups", "=", "groups", ",", "bias", "=", "bias", ",", "num_bits", "=", "num_bits", ",", "num_bits_weight", "=", "num_bits_weight", ")", "\n", "\n", "self", ".", "in_channels_max", "=", "in_channels", "\n", "self", ".", "out_channels_max", "=", "out_channels", "\n", "self", ".", "width_mult_list", "=", "width_mult_list", "\n", "self", ".", "ratio", "=", "(", "1.", ",", "1.", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.slimmable_ops.USConvTranspose2d.set_ratio": [[91, 93], ["None"], "methods", ["None"], ["", "def", "set_ratio", "(", "self", ",", "ratio", ")", ":", "\n", "        ", "self", ".", "ratio", "=", "ratio", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.slimmable_ops.USConvTranspose2d.forward": [[94, 133], ["slimmable_ops.make_divisible", "slimmable_ops.make_divisible", "str", "str", "slimmable_ops.USConvTranspose2d.quantize_input", "quantize.calculate_qparams", "quantize.Quantize", "torch.conv_transpose2d", "torch.conv_transpose2d", "torch.conv_transpose2d", "torch.conv_transpose2d", "str", "str", "hasattr", "quantize.QuantMeasure", "quantize.Quantize"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.make_divisible", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.make_divisible", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.quantize.calculate_qparams", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.quantize.Quantize", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.quantize.Quantize"], ["", "def", "forward", "(", "self", ",", "input", ",", "quantize", "=", "False", ")", ":", "\n", "# assert self.ratio[0] in self.width_mult_list, str(self.ratio[0]) + \" in? \" + str(self.width_mult_list)", "\n", "        ", "self", ".", "in_channels", "=", "make_divisible", "(", "self", ".", "in_channels_max", "*", "self", ".", "ratio", "[", "0", "]", ")", "\n", "assert", "self", ".", "ratio", "[", "1", "]", "in", "self", ".", "width_mult_list", ",", "str", "(", "self", ".", "ratio", "[", "1", "]", ")", "+", "\" in? \"", "+", "str", "(", "self", ".", "width_mult_list", ")", "\n", "self", ".", "out_channels", "=", "make_divisible", "(", "self", ".", "out_channels_max", "*", "self", ".", "ratio", "[", "1", "]", ")", "\n", "\n", "weight", "=", "self", ".", "weight", "[", ":", "self", ".", "in_channels", ",", ":", "self", ".", "out_channels", ",", ":", ",", ":", "]", "\n", "\n", "if", "self", ".", "groups", "!=", "1", ":", "\n", "            ", "self", ".", "groups", "=", "self", ".", "out_channels", "\n", "\n", "", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "bias", "=", "self", ".", "bias", "[", ":", "self", ".", "out_channels", "]", "\n", "", "else", ":", "\n", "            ", "bias", "=", "self", ".", "bias", "\n", "\n", "", "if", "quantize", ":", "\n", "            ", "if", "not", "hasattr", "(", "self", ",", "'quantize_input'", ")", ":", "\n", "                ", "self", ".", "quantize_input", "=", "QuantMeasure", "(", "self", ".", "num_bits", ",", "shape_measure", "=", "(", "1", ",", "1", ",", "1", ",", "1", ")", ",", "flatten_dims", "=", "(", "1", ",", "-", "1", ")", ")", "\n", "\n", "", "qinput", "=", "self", ".", "quantize_input", "(", "input", ")", "\n", "weight_qparams", "=", "calculate_qparams", "(", "\n", "weight", ",", "num_bits", "=", "self", ".", "num_bits_weight", ",", "flatten_dims", "=", "(", "1", ",", "-", "1", ")", ",", "reduce_dim", "=", "None", ")", "\n", "qweight", "=", "Quantize", "(", "weight", ",", "qparams", "=", "weight_qparams", ")", "\n", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "                ", "qbias", "=", "Quantize", "(", "\n", "bias", ",", "num_bits", "=", "self", ".", "num_bits_weight", "+", "self", ".", "num_bits", ",", "\n", "flatten_dims", "=", "(", "0", ",", "-", "1", ")", ")", "\n", "", "else", ":", "\n", "                ", "qbias", "=", "None", "\n", "\n", "", "output", "=", "F", ".", "conv_transpose2d", "(", "qinput", ",", "qweight", ",", "qbias", ",", "self", ".", "stride", ",", "\n", "self", ".", "padding", ",", "self", ".", "output_padding", ",", "self", ".", "groups", ",", "self", ".", "dilation", ")", "\n", "\n", "", "else", ":", "\n", "            ", "output", "=", "F", ".", "conv_transpose2d", "(", "input", ",", "weight", ",", "bias", ",", "self", ".", "stride", ",", "\n", "self", ".", "padding", ",", "self", ".", "output_padding", ",", "self", ".", "groups", ",", "self", ".", "dilation", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.slimmable_ops.USBatchNorm2d.__init__": [[136, 146], ["torch.BatchNorm2d.__init__", "torch.ModuleList", "torch.ModuleList", "torch.BatchNorm2d", "torch.BatchNorm2d", "slimmable_ops.make_divisible"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.Cutout.__init__", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.make_divisible"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ",", "width_mult_list", "=", "[", "1.", "]", ")", ":", "\n", "        ", "super", "(", "USBatchNorm2d", ",", "self", ")", ".", "__init__", "(", "\n", "num_features", ",", "affine", "=", "False", ",", "track_running_stats", "=", "False", ")", "\n", "self", ".", "num_features_max", "=", "num_features", "\n", "self", ".", "width_mult_list", "=", "width_mult_list", "\n", "# for tracking performance during training", "\n", "self", ".", "bn", "=", "nn", ".", "ModuleList", "(", "\n", "[", "nn", ".", "InstanceNorm2d", "(", "i", ",", "affine", "=", "False", ")", "for", "i", "in", "[", "make_divisible", "(", "self", ".", "num_features_max", "*", "width_mult", ")", "for", "width_mult", "in", "width_mult_list", "]", "]", "\n", ")", "\n", "self", ".", "ratio", "=", "1.", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.slimmable_ops.USBatchNorm2d.set_ratio": [[147, 149], ["None"], "methods", ["None"], ["", "def", "set_ratio", "(", "self", ",", "ratio", ")", ":", "\n", "        ", "self", ".", "ratio", "=", "ratio", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.slimmable_ops.USBatchNorm2d.forward": [[150, 158], ["slimmable_ops.USBatchNorm2d.width_mult_list.index"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "weight", "=", "self", ".", "weight", "\n", "bias", "=", "self", ".", "bias", "\n", "assert", "self", ".", "ratio", "in", "self", ".", "width_mult_list", "\n", "idx", "=", "self", ".", "width_mult_list", ".", "index", "(", "self", ".", "ratio", ")", "\n", "y", "=", "self", ".", "bn", "[", "idx", "]", "(", "input", ")", "\n", "return", "y", "\n", "", "", ""]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.slimmable_ops.make_divisible": [[7, 21], ["max", "int"], "function", ["None"], ["def", "make_divisible", "(", "v", ",", "divisor", "=", "8", ",", "min_value", "=", "3", ")", ":", "\n", "    ", "\"\"\"\n    forked from slim:\n    https://github.com/tensorflow/models/blob/\\\n    0344c5503ee55e24f0de7f37336a6e08f10976fd/\\\n    research/slim/nets/mobilenet/mobilenet.py#L62-L69\n    \"\"\"", "\n", "if", "min_value", "is", "None", ":", "\n", "        ", "min_value", "=", "divisor", "\n", "", "new_v", "=", "max", "(", "min_value", ",", "int", "(", "v", "+", "divisor", "/", "2", ")", "//", "divisor", "*", "divisor", ")", "\n", "# Make sure that round down does not go down by more than 10%.", "\n", "if", "new_v", "<", "0.9", "*", "v", ":", "\n", "        ", "new_v", "+=", "divisor", "\n", "", "return", "new_v", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_search.SingleOp.__init__": [[51, 57], ["torch.Module.__init__", "op"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.Cutout.__init__"], ["        ", "super", "(", "SingleOp", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_op", "=", "op", "(", "C_in", ",", "C_out", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "slimmable", "=", "slimmable", ",", "width_mult_list", "=", "width_mult_list", ")", "\n", "self", ".", "_width_mult_list", "=", "width_mult_list", "\n", "self", ".", "quantize", "=", "quantize", "\n", "self", ".", "slimmable", "=", "slimmable", "\n", "\n", "self", ".", "_width_mult_list_left", "=", "width_mult_list_left", "if", "width_mult_list_left", "is", "not", "None", "else", "width_mult_list", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_search.SingleOp.set_prun_ratio": [[58, 60], ["model_search.SingleOp._op.set_ratio"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.DwsBlock.set_ratio"], ["\n", "", "def", "set_prun_ratio", "(", "self", ",", "ratio", ")", ":", "\n", "        ", "self", ".", "_op", ".", "set_ratio", "(", "ratio", ")", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_search.SingleOp.forward": [[61, 86], ["isinstance", "isinstance", "model_search.SingleOp.set_prun_ratio", "ratio[].argmax", "ratio[].argmax", "ratio[].argmax", "ratio[].argmax", "model_search.SingleOp._op", "model_search.SingleOp._op", "model_search.SingleOp._op", "model_search.SingleOp._op"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_search.MixedOp.set_prun_ratio"], ["\n", "", "def", "forward", "(", "self", ",", "x", ",", "beta", ",", "ratio", ")", ":", "\n", "        ", "if", "isinstance", "(", "ratio", "[", "0", "]", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "ratio0", "=", "self", ".", "_width_mult_list_left", "[", "ratio", "[", "0", "]", ".", "argmax", "(", ")", "]", "\n", "r_score0", "=", "ratio", "[", "0", "]", "[", "ratio", "[", "0", "]", ".", "argmax", "(", ")", "]", "\n", "", "else", ":", "\n", "            ", "ratio0", "=", "ratio", "[", "0", "]", "\n", "r_score0", "=", "1.", "\n", "", "if", "isinstance", "(", "ratio", "[", "1", "]", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "ratio1", "=", "self", ".", "_width_mult_list", "[", "ratio", "[", "1", "]", ".", "argmax", "(", ")", "]", "\n", "r_score1", "=", "ratio", "[", "1", "]", "[", "ratio", "[", "1", "]", ".", "argmax", "(", ")", "]", "\n", "", "else", ":", "\n", "            ", "ratio1", "=", "ratio", "[", "1", "]", "\n", "r_score1", "=", "1.", "\n", "\n", "", "if", "self", ".", "slimmable", ":", "\n", "            ", "self", ".", "set_prun_ratio", "(", "(", "ratio0", ",", "ratio1", ")", ")", "\n", "\n", "", "if", "self", ".", "quantize", "==", "'search'", ":", "\n", "            ", "result", "=", "(", "beta", "[", "0", "]", "*", "self", ".", "_op", "(", "x", ",", "quantize", "=", "False", ")", "+", "beta", "[", "1", "]", "*", "self", ".", "_op", "(", "x", ",", "quantize", "=", "True", ")", ")", "*", "r_score0", "*", "r_score1", "\n", "", "elif", "self", ".", "quantize", ":", "\n", "            ", "result", "=", "self", ".", "_op", "(", "x", ",", "quantize", "=", "True", ")", "*", "r_score0", "*", "r_score1", "\n", "", "else", ":", "\n", "            ", "result", "=", "self", ".", "_op", "(", "x", ",", "quantize", "=", "False", ")", "*", "r_score0", "*", "r_score1", "\n", "\n", "", "return", "result", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_search.SingleOp.forward_flops": [[87, 116], ["isinstance", "isinstance", "model_search.SingleOp.set_prun_ratio", "model_search.SingleOp._op.forward_flops", "op.forward_flops", "op.forward_flops", "model_search.SingleOp._op.forward_flops", "ratio[].argmax", "ratio[].argmax", "ratio[].argmax", "ratio[].argmax"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_search.MixedOp.set_prun_ratio", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.Cell.forward_flops", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.Cell.forward_flops", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.Cell.forward_flops", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.Cell.forward_flops"], ["\n", "", "def", "forward_flops", "(", "self", ",", "size", ",", "beta", ",", "ratio", ")", ":", "\n", "        ", "if", "isinstance", "(", "ratio", "[", "0", "]", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "ratio0", "=", "self", ".", "_width_mult_list_left", "[", "ratio", "[", "0", "]", ".", "argmax", "(", ")", "]", "\n", "r_score0", "=", "ratio", "[", "0", "]", "[", "ratio", "[", "0", "]", ".", "argmax", "(", ")", "]", "\n", "", "else", ":", "\n", "            ", "ratio0", "=", "ratio", "[", "0", "]", "\n", "r_score0", "=", "1.", "\n", "", "if", "isinstance", "(", "ratio", "[", "1", "]", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "ratio1", "=", "self", ".", "_width_mult_list", "[", "ratio", "[", "1", "]", ".", "argmax", "(", ")", "]", "\n", "r_score1", "=", "ratio", "[", "1", "]", "[", "ratio", "[", "1", "]", ".", "argmax", "(", ")", "]", "\n", "", "else", ":", "\n", "            ", "ratio1", "=", "ratio", "[", "1", "]", "\n", "r_score1", "=", "1.", "\n", "\n", "", "if", "self", ".", "slimmable", ":", "\n", "            ", "self", ".", "set_prun_ratio", "(", "(", "ratio0", ",", "ratio1", ")", ")", "\n", "\n", "", "if", "self", ".", "quantize", "==", "'search'", ":", "\n", "            ", "flops_full", ",", "size_out", "=", "self", ".", "_op", ".", "forward_flops", "(", "size", ",", "quantize", "=", "False", ")", "\n", "flops_quant", ",", "_", "=", "self", ".", "_op", ".", "forward_flops", "(", "size", ",", "quantize", "=", "True", ")", "\n", "flops", "=", "beta", "[", "0", "]", "*", "flops_full", "+", "beta", "[", "1", "]", "*", "flops_quant", "\n", "", "elif", "self", ".", "quantize", ":", "\n", "            ", "flops", ",", "size_out", "=", "self", ".", "_op", ".", "forward_flops", "(", "size", ",", "quantize", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "flops", ",", "size_out", "=", "self", ".", "_op", ".", "forward_flops", "(", "size", ",", "quantize", "=", "False", ")", "\n", "\n", "", "flops", "=", "flops", "*", "r_score0", "*", "r_score1", "\n", "\n", "return", "flops", ",", "size_out", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_search.MixedOp.__init__": [[120, 130], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "model_search.MixedOp._ops.append"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.Cutout.__init__"], ["\n", "    ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "stride", "=", "1", ",", "slimmable", "=", "True", ",", "width_mult_list", "=", "[", "1.", "]", ",", "quantize", "=", "False", ",", "width_mult_list_left", "=", "None", ")", ":", "\n", "        ", "super", "(", "MixedOp", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_ops", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "_width_mult_list", "=", "width_mult_list", "\n", "self", ".", "quantize", "=", "quantize", "\n", "self", ".", "slimmable", "=", "slimmable", "\n", "\n", "self", ".", "_width_mult_list_left", "=", "width_mult_list_left", "if", "width_mult_list_left", "is", "not", "None", "else", "width_mult_list", "\n", "\n", "for", "primitive", "in", "PRIMITIVES", ":", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_search.MixedOp.set_prun_ratio": [[131, 134], ["op.set_ratio"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.DwsBlock.set_ratio"], ["            ", "op", "=", "OPS", "[", "primitive", "]", "(", "C_in", ",", "C_out", ",", "stride", ",", "slimmable", "=", "slimmable", ",", "width_mult_list", "=", "width_mult_list", ")", "\n", "self", ".", "_ops", ".", "append", "(", "op", ")", "\n", "\n", "", "", "def", "set_prun_ratio", "(", "self", ",", "ratio", ")", ":", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_search.MixedOp.forward": [[135, 163], ["isinstance", "isinstance", "zip", "model_search.MixedOp.set_prun_ratio", "ratio[].argmax", "ratio[].argmax", "ratio[].argmax", "ratio[].argmax", "op", "op", "op", "op"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_search.MixedOp.set_prun_ratio"], ["        ", "for", "op", "in", "self", ".", "_ops", ":", "\n", "            ", "op", ".", "set_ratio", "(", "ratio", ")", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "x", ",", "alpha", ",", "beta", ",", "ratio", ")", ":", "\n", "# int: force #channel; tensor: arch_ratio; float(<=1): force width", "\n", "        ", "result", "=", "0", "\n", "if", "isinstance", "(", "ratio", "[", "0", "]", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "ratio0", "=", "self", ".", "_width_mult_list_left", "[", "ratio", "[", "0", "]", ".", "argmax", "(", ")", "]", "\n", "r_score0", "=", "ratio", "[", "0", "]", "[", "ratio", "[", "0", "]", ".", "argmax", "(", ")", "]", "\n", "", "else", ":", "\n", "            ", "ratio0", "=", "ratio", "[", "0", "]", "\n", "r_score0", "=", "1.", "\n", "", "if", "isinstance", "(", "ratio", "[", "1", "]", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "ratio1", "=", "self", ".", "_width_mult_list", "[", "ratio", "[", "1", "]", ".", "argmax", "(", ")", "]", "\n", "r_score1", "=", "ratio", "[", "1", "]", "[", "ratio", "[", "1", "]", ".", "argmax", "(", ")", "]", "\n", "", "else", ":", "\n", "            ", "ratio1", "=", "ratio", "[", "1", "]", "\n", "r_score1", "=", "1.", "\n", "\n", "", "if", "self", ".", "slimmable", ":", "\n", "            ", "self", ".", "set_prun_ratio", "(", "(", "ratio0", ",", "ratio1", ")", ")", "\n", "\n", "", "for", "w", ",", "op", "in", "zip", "(", "alpha", ",", "self", ".", "_ops", ")", ":", "\n", "            ", "if", "self", ".", "quantize", "==", "'search'", ":", "\n", "                ", "result", "=", "result", "+", "(", "beta", "[", "0", "]", "*", "op", "(", "x", ",", "quantize", "=", "False", ")", "+", "beta", "[", "1", "]", "*", "op", "(", "x", ",", "quantize", "=", "True", ")", ")", "*", "w", "*", "r_score0", "*", "r_score1", "\n", "", "elif", "self", ".", "quantize", ":", "\n", "                ", "result", "=", "result", "+", "op", "(", "x", ",", "quantize", "=", "True", ")", "*", "w", "*", "r_score0", "*", "r_score1", "\n", "", "else", ":", "\n", "                ", "result", "=", "result", "+", "op", "(", "x", ",", "quantize", "=", "False", ")", "*", "w", "*", "r_score0", "*", "r_score1", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_search.MixedOp.forward_latency": [[165, 188], ["isinstance", "isinstance", "zip", "model_search.MixedOp.set_prun_ratio", "op.forward_latency", "ratio[].argmax", "ratio[].argmax", "ratio[].argmax", "ratio[].argmax"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_search.MixedOp.set_prun_ratio", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.MixedOp.forward_latency"], ["", "", "return", "result", "\n", "\n", "\n", "", "def", "forward_latency", "(", "self", ",", "size", ",", "alpha", ",", "ratio", ")", ":", "\n", "# int: force #channel; tensor: arch_ratio; float(<=1): force width", "\n", "        ", "result", "=", "0", "\n", "if", "isinstance", "(", "ratio", "[", "0", "]", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "ratio0", "=", "self", ".", "_width_mult_list_left", "[", "ratio", "[", "0", "]", ".", "argmax", "(", ")", "]", "\n", "r_score0", "=", "ratio", "[", "0", "]", "[", "ratio", "[", "0", "]", ".", "argmax", "(", ")", "]", "\n", "", "else", ":", "\n", "            ", "ratio0", "=", "ratio", "[", "0", "]", "\n", "r_score0", "=", "1.", "\n", "", "if", "isinstance", "(", "ratio", "[", "1", "]", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "ratio1", "=", "self", ".", "_width_mult_list", "[", "ratio", "[", "1", "]", ".", "argmax", "(", ")", "]", "\n", "r_score1", "=", "ratio", "[", "1", "]", "[", "ratio", "[", "1", "]", ".", "argmax", "(", ")", "]", "\n", "", "else", ":", "\n", "            ", "ratio1", "=", "ratio", "[", "1", "]", "\n", "r_score1", "=", "1.", "\n", "\n", "", "if", "self", ".", "slimmable", ":", "\n", "            ", "self", ".", "set_prun_ratio", "(", "(", "ratio0", ",", "ratio1", ")", ")", "\n", "\n", "", "for", "w", ",", "op", "in", "zip", "(", "alpha", ",", "self", ".", "_ops", ")", ":", "\n", "            ", "latency", ",", "size_out", "=", "op", ".", "forward_latency", "(", "size", ")", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_search.MixedOp.forward_flops": [[190, 224], ["isinstance", "isinstance", "zip", "model_search.MixedOp.set_prun_ratio", "op.forward_flops", "op.forward_flops", "ratio[].argmax", "ratio[].argmax", "ratio[].argmax", "ratio[].argmax", "op.forward_flops", "op.forward_flops"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_search.MixedOp.set_prun_ratio", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.Cell.forward_flops", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.Cell.forward_flops", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.Cell.forward_flops", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.Cell.forward_flops"], ["", "return", "result", ",", "size_out", "\n", "\n", "\n", "", "def", "forward_flops", "(", "self", ",", "size", ",", "alpha", ",", "beta", ",", "ratio", ")", ":", "\n", "# int: force #channel; tensor: arch_ratio; float(<=1): force width", "\n", "        ", "result", "=", "0", "\n", "if", "isinstance", "(", "ratio", "[", "0", "]", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "ratio0", "=", "self", ".", "_width_mult_list_left", "[", "ratio", "[", "0", "]", ".", "argmax", "(", ")", "]", "\n", "r_score0", "=", "ratio", "[", "0", "]", "[", "ratio", "[", "0", "]", ".", "argmax", "(", ")", "]", "\n", "", "else", ":", "\n", "            ", "ratio0", "=", "ratio", "[", "0", "]", "\n", "r_score0", "=", "1.", "\n", "", "if", "isinstance", "(", "ratio", "[", "1", "]", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "ratio1", "=", "self", ".", "_width_mult_list", "[", "ratio", "[", "1", "]", ".", "argmax", "(", ")", "]", "\n", "r_score1", "=", "ratio", "[", "1", "]", "[", "ratio", "[", "1", "]", ".", "argmax", "(", ")", "]", "\n", "", "else", ":", "\n", "            ", "ratio1", "=", "ratio", "[", "1", "]", "\n", "r_score1", "=", "1.", "\n", "\n", "", "if", "self", ".", "slimmable", ":", "\n", "            ", "self", ".", "set_prun_ratio", "(", "(", "ratio0", ",", "ratio1", ")", ")", "\n", "\n", "", "for", "w", ",", "op", "in", "zip", "(", "alpha", ",", "self", ".", "_ops", ")", ":", "\n", "            ", "if", "self", ".", "quantize", "==", "'search'", ":", "\n", "                ", "flops_full", ",", "size_out", "=", "op", ".", "forward_flops", "(", "size", ",", "quantize", "=", "False", ")", "\n", "flops_quant", ",", "_", "=", "op", ".", "forward_flops", "(", "size", ",", "quantize", "=", "True", ")", "\n", "flops", "=", "(", "beta", "[", "0", "]", "*", "flops_full", "+", "beta", "[", "1", "]", "*", "flops_quant", ")", "\n", "\n", "", "elif", "self", ".", "quantize", ":", "\n", "                ", "flops", ",", "size_out", "=", "op", ".", "forward_flops", "(", "size", ",", "quantize", "=", "True", ")", "\n", "\n", "", "else", ":", "\n", "                ", "flops", ",", "size_out", "=", "op", ".", "forward_flops", "(", "size", ",", "quantize", "=", "False", ")", "\n", "\n", "", "result", "=", "result", "+", "flops", "*", "w", "*", "r_score0", "*", "r_score1", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_search.NAS_GAN.__init__": [[275, 324], ["torch.Module.__init__", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "operations.Conv", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "operations.Conv", "operations.Conv", "operations.Conv", "operations.Conv", "operations.Conv", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Tanh", "torch.Tanh", "torch.Tanh", "model_search.NAS_GAN._build_arch_parameters", "model_search.NAS_GAN._reset_arch_parameters", "model_search.Cell", "model_search.NAS_GAN.cells.append", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "torch.L1Loss", "torch.L1Loss", "torch.L1Loss", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "util_gan.vgg_feature.VGGFeature"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.Cutout.__init__", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_search.NAS_GAN._build_arch_parameters", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_search.NAS_GAN._reset_arch_parameters"], ["\n", "", "self", ".", "header", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "out_features", "=", "in_features", "//", "2", "\n", "\n", "self", ".", "header", ".", "append", "(", "SingleOp", "(", "ConvTranspose2dNorm", ",", "in_features", ",", "out_features", ",", "3", ",", "stride", "=", "2", ",", "slimmable", "=", "slimmable", ",", "\n", "width_mult_list", "=", "width_mult_list_sh", ",", "quantize", "=", "quantize", ",", "width_mult_list_left", "=", "width_mult_list", ")", ")", "\n", "\n", "in_features", "=", "out_features", "\n", "out_features", "=", "in_features", "//", "2", "\n", "\n", "self", ".", "header", ".", "append", "(", "SingleOp", "(", "ConvTranspose2dNorm", ",", "in_features", ",", "out_features", ",", "3", ",", "stride", "=", "2", ",", "slimmable", "=", "slimmable", ",", "\n", "width_mult_list", "=", "width_mult_list_sh", ",", "quantize", "=", "quantize", ")", ")", "\n", "\n", "self", ".", "header", ".", "append", "(", "SingleOp", "(", "Conv", ",", "64", ",", "3", ",", "7", ",", "slimmable", "=", "slimmable", ",", "width_mult_list", "=", "width_mult_list_sh", ",", "quantize", "=", "quantize", ")", ")", "\n", "\n", "self", ".", "tanh", "=", "nn", ".", "Tanh", "(", ")", "\n", "\n", "# contains arch_params names: {\"alpha\": alpha, \"beta\": beta, \"ratio\": ratio}", "\n", "self", ".", "_arch_params", "=", "self", ".", "_build_arch_parameters", "(", ")", "\n", "self", ".", "_reset_arch_parameters", "(", ")", "\n", "\n", "\n", "", "def", "sample_prun_ratio", "(", "self", ",", "mode", "=", "\"arch_ratio\"", ")", ":", "\n", "        ", "'''\n        mode: \"min\"|\"max\"|\"random\"|\"arch_ratio\"(default)\n        '''", "\n", "assert", "mode", "in", "[", "\"min\"", ",", "\"max\"", ",", "\"random\"", ",", "\"arch_ratio\"", "]", "\n", "if", "mode", "==", "\"arch_ratio\"", ":", "\n", "            ", "ratio", "=", "self", ".", "_arch_params", "[", "\"ratio\"", "]", "\n", "ratio_sampled", "=", "[", "]", "\n", "for", "layer", "in", "range", "(", "self", ".", "_layers", ")", ":", "\n", "                ", "ratio_sampled", ".", "append", "(", "gumbel_softmax", "(", "F", ".", "log_softmax", "(", "ratio", "[", "layer", "]", ",", "dim", "=", "-", "1", ")", ",", "hard", "=", "True", ")", ")", "\n", "\n", "", "ratio_sh", "=", "self", ".", "_arch_params", "[", "\"ratio_sh\"", "]", "\n", "ratio_sampled_sh", "=", "[", "]", "\n", "for", "layer", "in", "range", "(", "self", ".", "len_ratio_sh", ")", ":", "\n", "                ", "ratio_sampled_sh", ".", "append", "(", "gumbel_softmax", "(", "F", ".", "log_softmax", "(", "ratio_sh", "[", "layer", "]", ",", "dim", "=", "-", "1", ")", ",", "hard", "=", "True", ")", ")", "\n", "\n", "", "return", "ratio_sampled", ",", "ratio_sampled_sh", "\n", "\n", "", "elif", "mode", "==", "\"min\"", ":", "\n", "            ", "ratio_sampled", "=", "[", "]", "\n", "for", "layer", "in", "range", "(", "self", ".", "_layers", ")", ":", "\n", "                ", "ratio_sampled", ".", "append", "(", "self", ".", "_width_mult_list", "[", "0", "]", ")", "\n", "\n", "", "ratio_sampled_sh", "=", "[", "]", "\n", "for", "layer", "in", "range", "(", "self", ".", "len_ratio_sh", ")", ":", "\n", "                ", "ratio_sampled_sh", ".", "append", "(", "self", ".", "_width_mult_list_sh", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_search.NAS_GAN.sample_prun_ratio": [[326, 372], ["range", "range", "ratio_sampled.append", "range", "ratio_cell.append", "range", "ratio_sampled.append", "range", "model_search.gumbel_softmax", "ratio_cell.append", "range", "ratio_sampled.append", "range", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "ratio_cell.append", "range", "ratio_sampled.append", "ratio_cell.append", "numpy.random.choice"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.gumbel_softmax"], ["\n", "", "elif", "mode", "==", "\"max\"", ":", "\n", "            ", "ratio_sampled", "=", "[", "]", "\n", "for", "layer", "in", "range", "(", "self", ".", "_layers", ")", ":", "\n", "                ", "ratio_sampled", ".", "append", "(", "self", ".", "_width_mult_list", "[", "-", "1", "]", ")", "\n", "\n", "", "ratio_sampled_sh", "=", "[", "]", "\n", "for", "layer", "in", "range", "(", "self", ".", "len_ratio_sh", ")", ":", "\n", "                ", "ratio_sampled_sh", ".", "append", "(", "self", ".", "_width_mult_list_sh", "[", "-", "1", "]", ")", "\n", "\n", "", "return", "ratio_sampled", ",", "ratio_sampled_sh", "\n", "\n", "", "elif", "mode", "==", "\"random\"", ":", "\n", "            ", "ratio_sampled", "=", "[", "]", "\n", "for", "layer", "in", "range", "(", "self", ".", "_layers", ")", ":", "\n", "                ", "ratio_sampled", ".", "append", "(", "np", ".", "random", ".", "choice", "(", "self", ".", "_width_mult_list", ")", ")", "\n", "\n", "", "ratio_sampled_sh", "=", "[", "]", "\n", "for", "layer", "in", "range", "(", "self", ".", "len_ratio_sh", ")", ":", "\n", "                ", "ratio_sampled_sh", ".", "append", "(", "np", ".", "random", ".", "choice", "(", "self", ".", "_width_mult_list_sh", ")", ")", "\n", "\n", "", "return", "ratio_sampled", ",", "ratio_sampled_sh", "\n", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "alpha", "=", "F", ".", "softmax", "(", "getattr", "(", "self", ",", "\"alpha\"", ")", ",", "dim", "=", "-", "1", ")", "\n", "beta", "=", "F", ".", "softmax", "(", "getattr", "(", "self", ",", "\"beta\"", ")", ",", "dim", "=", "-", "1", ")", "\n", "\n", "beta_sh", "=", "F", ".", "softmax", "(", "getattr", "(", "self", ",", "\"beta_sh\"", ")", ",", "dim", "=", "-", "1", ")", "\n", "\n", "if", "self", ".", "prun_mode", "is", "not", "None", ":", "\n", "            ", "ratio", ",", "ratio_sh", "=", "self", ".", "sample_prun_ratio", "(", "mode", "=", "self", ".", "prun_mode", ")", "\n", "", "else", ":", "\n", "            ", "ratio", ",", "ratio_sh", "=", "self", ".", "sample_prun_ratio", "(", "mode", "=", "self", ".", "_prun_modes", ")", "\n", "\n", "# print('alpha:', alpha, 'beta:', beta, 'ratio:', ratio)", "\n", "\n", "", "out", "=", "input", "\n", "for", "i", ",", "module", "in", "enumerate", "(", "self", ".", "stem", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "out", "=", "module", "(", "out", ",", "beta_sh", "[", "i", "]", ",", "[", "1", ",", "ratio_sh", "[", "i", "]", "]", ")", "\n", "", "else", ":", "\n", "                ", "out", "=", "module", "(", "out", ",", "beta_sh", "[", "i", "]", ",", "[", "ratio_sh", "[", "i", "-", "1", "]", ",", "ratio_sh", "[", "i", "]", "]", ")", "\n", "\n", "\n", "", "", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_search.NAS_GAN.forward": [[374, 400], ["torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "model_search.NAS_GAN.conv_first", "enumerate", "model_search.NAS_GAN.trunk_conv", "model_search.NAS_GAN.lrelu", "model_search.NAS_GAN.lrelu", "model_search.NAS_GAN.conv_last", "getattr", "getattr", "model_search.NAS_GAN.sample_prun_ratio", "model_search.NAS_GAN.sample_prun_ratio", "cell", "model_search.NAS_GAN.upconv1", "model_search.NAS_GAN.upconv2", "model_search.NAS_GAN.lrelu", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "model_search.NAS_GAN.HRconv", "model_search.NAS_GAN.tanh"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_search.NAS_GAN.sample_prun_ratio", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_search.NAS_GAN.sample_prun_ratio"], ["", "else", ":", "\n", "                ", "out", "=", "cell", "(", "out", ",", "alpha", "[", "i", "]", ",", "beta", "[", "i", "]", ",", "[", "ratio", "[", "i", "-", "1", "]", ",", "ratio", "[", "i", "]", "]", ")", "\n", "\n", "\n", "", "", "for", "i", ",", "module", "in", "enumerate", "(", "self", ".", "header", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "out", "=", "module", "(", "out", ",", "beta_sh", "[", "self", ".", "len_stem", "+", "i", "]", ",", "[", "ratio", "[", "self", ".", "_layers", "-", "1", "]", ",", "ratio_sh", "[", "self", ".", "len_stem", "+", "i", "]", "]", ")", "\n", "", "elif", "i", "==", "self", ".", "len_header", "-", "1", ":", "\n", "                ", "out", "=", "module", "(", "out", ",", "beta_sh", "[", "self", ".", "len_stem", "+", "i", "]", ",", "[", "ratio_sh", "[", "self", ".", "len_stem", "+", "i", "-", "1", "]", ",", "1", "]", ")", "\n", "", "else", ":", "\n", "                ", "out", "=", "module", "(", "out", ",", "beta_sh", "[", "self", ".", "len_stem", "+", "i", "]", ",", "[", "ratio_sh", "[", "self", ".", "len_stem", "+", "i", "-", "1", "]", ",", "ratio_sh", "[", "self", ".", "len_stem", "+", "i", "]", "]", ")", "\n", "\n", "", "", "out", "=", "self", ".", "tanh", "(", "out", ")", "\n", "\n", "return", "out", "\n", "###################################", "\n", "\n", "", "def", "forward_flops", "(", "self", ",", "size", ",", "alpha", "=", "True", ",", "beta", "=", "True", ",", "ratio", "=", "True", ")", ":", "\n", "        ", "if", "alpha", ":", "\n", "            ", "alpha", "=", "F", ".", "softmax", "(", "getattr", "(", "self", ",", "\"alpha\"", ")", ",", "dim", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "alpha", "=", "torch", ".", "ones_like", "(", "getattr", "(", "self", ",", "'alpha'", ")", ")", ".", "cuda", "(", ")", "*", "1.", "/", "len", "(", "PRIMITIVES", ")", "\n", "\n", "", "if", "beta", ":", "\n", "            ", "beta", "=", "F", ".", "softmax", "(", "getattr", "(", "self", ",", "\"beta\"", ")", ",", "dim", "=", "-", "1", ")", "\n", "beta_sh", "=", "F", ".", "softmax", "(", "getattr", "(", "self", ",", "\"beta_sh\"", ")", ",", "dim", "=", "-", "1", ")", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_search.NAS_GAN.forward_flops": [[402, 448], ["model_search.NAS_GAN.conv_first.forward_flops", "flops_total.append", "enumerate", "model_search.NAS_GAN.trunk_conv.forward_flops", "flops_total.append", "model_search.NAS_GAN.upconv1.forward_flops", "flops_total.append", "model_search.NAS_GAN.upconv2.forward_flops", "flops_total.append", "model_search.NAS_GAN.HRconv.forward_flops", "flops_total.append", "model_search.NAS_GAN.conv_last.forward_flops", "flops_total.append", "sum", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "model_search.NAS_GAN.sample_prun_ratio", "cell.forward_flops", "flops_total.append", "getattr", "len", "getattr", "model_search.NAS_GAN.sample_prun_ratio", "model_search.NAS_GAN.sample_prun_ratio", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "getattr", "getattr"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.Cell.forward_flops", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.Cell.forward_flops", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.Cell.forward_flops", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.Cell.forward_flops", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.Cell.forward_flops", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.Cell.forward_flops", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_search.NAS_GAN.sample_prun_ratio", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.Cell.forward_flops", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_search.NAS_GAN.sample_prun_ratio", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_search.NAS_GAN.sample_prun_ratio"], ["beta_sh", "=", "torch", ".", "ones_like", "(", "getattr", "(", "self", ",", "'beta_sh'", ")", ")", ".", "cuda", "(", ")", "*", "1.", "/", "2", "\n", "\n", "", "if", "ratio", ":", "\n", "            ", "if", "self", ".", "prun_mode", "is", "not", "None", ":", "\n", "                ", "ratio", ",", "ratio_sh", "=", "self", ".", "sample_prun_ratio", "(", "mode", "=", "self", ".", "prun_mode", ")", "\n", "", "else", ":", "\n", "                ", "ratio", ",", "ratio_sh", "=", "self", ".", "sample_prun_ratio", "(", "mode", "=", "self", ".", "_prun_modes", ")", "\n", "", "", "else", ":", "\n", "            ", "ratio", ",", "ratio_sh", "=", "self", ".", "sample_prun_ratio", "(", "mode", "=", "'max'", ")", "\n", "\n", "", "flops_total", "=", "[", "]", "\n", "\n", "for", "i", ",", "module", "in", "enumerate", "(", "self", ".", "stem", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "flops", ",", "size", "=", "module", ".", "forward_flops", "(", "size", ",", "beta_sh", "[", "i", "]", ",", "[", "1", ",", "ratio_sh", "[", "i", "]", "]", ")", "\n", "flops_total", ".", "append", "(", "flops", ")", "\n", "", "else", ":", "\n", "                ", "flops", ",", "size", "=", "module", ".", "forward_flops", "(", "size", ",", "beta_sh", "[", "i", "]", ",", "[", "ratio_sh", "[", "i", "-", "1", "]", ",", "ratio_sh", "[", "i", "]", "]", ")", "\n", "flops_total", ".", "append", "(", "flops", ")", "\n", "\n", "", "", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "flops", ",", "size", "=", "cell", ".", "forward_flops", "(", "size", ",", "alpha", "[", "i", "]", ",", "beta", "[", "i", "]", ",", "[", "ratio_sh", "[", "self", ".", "len_stem", "-", "1", "]", ",", "ratio", "[", "i", "]", "]", ")", "\n", "flops_total", ".", "append", "(", "flops", ")", "\n", "", "else", ":", "\n", "                ", "flops", ",", "size", "=", "cell", ".", "forward_flops", "(", "size", ",", "alpha", "[", "i", "]", ",", "beta", "[", "i", "]", ",", "[", "ratio", "[", "i", "-", "1", "]", ",", "ratio", "[", "i", "]", "]", ")", "\n", "flops_total", ".", "append", "(", "flops", ")", "\n", "\n", "", "", "for", "i", ",", "module", "in", "enumerate", "(", "self", ".", "header", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "flops", ",", "size", "=", "module", ".", "forward_flops", "(", "size", ",", "beta_sh", "[", "self", ".", "len_stem", "+", "i", "]", ",", "[", "ratio", "[", "self", ".", "_layers", "-", "1", "]", ",", "ratio_sh", "[", "self", ".", "len_stem", "+", "i", "]", "]", ")", "\n", "flops_total", ".", "append", "(", "flops", ")", "\n", "", "elif", "i", "==", "self", ".", "len_header", "-", "1", ":", "\n", "                ", "flops", ",", "size", "=", "module", ".", "forward_flops", "(", "size", ",", "beta_sh", "[", "self", ".", "len_stem", "+", "i", "]", ",", "[", "ratio_sh", "[", "self", ".", "len_stem", "+", "i", "-", "1", "]", ",", "1", "]", ")", "\n", "flops_total", ".", "append", "(", "flops", ")", "\n", "", "else", ":", "\n", "                ", "flops", ",", "size", "=", "module", ".", "forward_flops", "(", "size", ",", "beta_sh", "[", "self", ".", "len_stem", "+", "i", "]", ",", "[", "ratio_sh", "[", "self", ".", "len_stem", "+", "i", "-", "1", "]", ",", "ratio_sh", "[", "self", ".", "len_stem", "+", "i", "]", "]", ")", "\n", "flops_total", ".", "append", "(", "flops", ")", "\n", "\n", "", "", "return", "sum", "(", "flops_total", ")", "\n", "\n", "###################################", "\n", "\n", "", "def", "gram", "(", "self", ",", "x", ")", ":", "\n", "        ", "(", "bs", ",", "ch", ",", "h", ",", "w", ")", "=", "x", ".", "size", "(", ")", "\n", "f", "=", "x", ".", "view", "(", "bs", ",", "ch", ",", "w", "*", "h", ")", "\n", "f_T", "=", "f", ".", "transpose", "(", "1", ",", "2", ")", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_search.NAS_GAN.gram": [[450, 456], ["x.size", "x.view", "x.view.transpose", "x.view.bmm"], "methods", ["None"], ["return", "G", "\n", "\n", "\n", "", "def", "_criterion", "(", "self", ",", "y_hat", ",", "x", ")", ":", "\n", "        ", "base_loss", "=", "self", ".", "base_weight", "*", "nn", ".", "L1Loss", "(", ")", "(", "y_hat", ",", "x", ")", "\n", "\n", "y_c_features", "=", "self", ".", "vgg", "(", "x", ")", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_search.NAS_GAN._criterion": [[485, 500], ["model_search.NAS_GAN.vgg", "model_search.NAS_GAN.vgg", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "model_search.NAS_GAN.loss_func", "model_search.NAS_GAN.loss_func", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs"], "methods", ["None"], ["            ", "self", ".", "prun_mode", "=", "None", "\n", "logit", "=", "self", "(", "input", ")", "\n", "loss", "=", "loss", "+", "self", ".", "_criterion", "(", "logit", ",", "target", ")", "\n", "\n", "", "if", "len", "(", "self", ".", "_width_mult_list", ")", ">", "1", ":", "\n", "            ", "self", ".", "prun_mode", "=", "\"max\"", "\n", "\n", "logit", "=", "self", "(", "input", ")", "\n", "loss", "=", "loss", "+", "self", ".", "_criterion", "(", "logit", ",", "target", ")", "\n", "\n", "self", ".", "prun_mode", "=", "\"min\"", "\n", "logit", "=", "self", "(", "input", ")", "\n", "loss", "=", "loss", "+", "self", ".", "_criterion", "(", "logit", ",", "target", ")", "\n", "\n", "if", "pretrain", "==", "True", ":", "\n", "                ", "self", ".", "prun_mode", "=", "\"random\"", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_search.NAS_GAN._loss": [[502, 535], ["model_search.NAS_GAN.", "len", "model_search.NAS_GAN.", "model_search.NAS_GAN.", "model_search.NAS_GAN._criterion", "model_search.NAS_GAN._criterion", "model_search.NAS_GAN._criterion", "model_search.NAS_GAN.", "model_search.NAS_GAN.", "model_search.NAS_GAN.", "model_search.NAS_GAN._criterion", "model_search.NAS_GAN._criterion", "len", "model_search.NAS_GAN._criterion"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.NAS_GAN_Infer._criterion", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.NAS_GAN_Infer._criterion", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.NAS_GAN_Infer._criterion", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.NAS_GAN_Infer._criterion", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.NAS_GAN_Infer._criterion", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.NAS_GAN_Infer._criterion"], ["loss", "=", "loss", "+", "self", ".", "_criterion", "(", "logit", ",", "target", ")", "\n", "\n", "self", ".", "prun_mode", "=", "\"random\"", "\n", "logit", "=", "self", "(", "input", ")", "\n", "loss", "=", "loss", "+", "self", ".", "_criterion", "(", "logit", ",", "target", ")", "\n", "\n", "", "", "elif", "pretrain", "==", "True", "and", "len", "(", "self", ".", "_width_mult_list", ")", "==", "1", ":", "\n", "            ", "self", ".", "prun_mode", "=", "\"max\"", "\n", "logit", "=", "self", "(", "input", ")", "\n", "loss", "=", "loss", "+", "self", ".", "_criterion", "(", "logit", ",", "target", ")", "\n", "\n", "", "return", "loss", "\n", "\n", "\n", "", "def", "_build_arch_parameters", "(", "self", ")", ":", "\n", "        ", "num_ops", "=", "len", "(", "PRIMITIVES", ")", "\n", "\n", "setattr", "(", "self", ",", "'alpha'", ",", "nn", ".", "Parameter", "(", "Variable", "(", "1e-3", "*", "torch", ".", "ones", "(", "self", ".", "_layers", ",", "num_ops", ")", ".", "cuda", "(", ")", ",", "requires_grad", "=", "True", ")", ")", ")", "\n", "setattr", "(", "self", ",", "'beta'", ",", "nn", ".", "Parameter", "(", "Variable", "(", "1e-3", "*", "torch", ".", "ones", "(", "self", ".", "_layers", ",", "2", ")", ".", "cuda", "(", ")", ",", "requires_grad", "=", "True", ")", ")", ")", "\n", "\n", "if", "self", ".", "_prun_modes", "==", "'arch_ratio'", ":", "\n", "# prunning ratio", "\n", "            ", "num_widths", "=", "len", "(", "self", ".", "_width_mult_list", ")", "\n", "num_widths_sh", "=", "len", "(", "self", ".", "_width_mult_list_sh", ")", "\n", "", "else", ":", "\n", "            ", "num_widths", "=", "1", "\n", "num_widths_sh", "=", "1", "\n", "\n", "", "setattr", "(", "self", ",", "'ratio'", ",", "nn", ".", "Parameter", "(", "Variable", "(", "1e-3", "*", "torch", ".", "ones", "(", "self", ".", "_layers", ",", "num_widths", ")", ".", "cuda", "(", ")", ",", "requires_grad", "=", "True", ")", ")", ")", "\n", "\n", "setattr", "(", "self", ",", "'beta_sh'", ",", "nn", ".", "Parameter", "(", "Variable", "(", "1e-3", "*", "torch", ".", "ones", "(", "self", ".", "len_beta_sh", ",", "2", ")", ".", "cuda", "(", ")", ",", "requires_grad", "=", "True", ")", ")", ")", "\n", "setattr", "(", "self", ",", "'ratio_sh'", ",", "nn", ".", "Parameter", "(", "Variable", "(", "1e-3", "*", "torch", ".", "ones", "(", "self", ".", "len_ratio_sh", ",", "num_widths_sh", ")", ".", "cuda", "(", ")", ",", "requires_grad", "=", "True", ")", ")", ")", "\n", "\n", "return", "{", "\"alpha\"", ":", "self", ".", "alpha", ",", "\"beta\"", ":", "self", ".", "beta", ",", "\"ratio\"", ":", "self", ".", "ratio", ",", "\"beta_sh\"", ":", "self", ".", "beta", ",", "\"ratio_sh\"", ":", "self", ".", "ratio_sh", "}", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_search.NAS_GAN._build_arch_parameters": [[537, 552], ["len", "setattr", "setattr", "setattr", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "len", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["None"], ["\n", "", "def", "_reset_arch_parameters", "(", "self", ")", ":", "\n", "        ", "num_ops", "=", "len", "(", "PRIMITIVES", ")", "\n", "if", "self", ".", "_prun_modes", "==", "'arch_ratio'", ":", "\n", "# prunning ratio", "\n", "            ", "num_widths", "=", "len", "(", "self", ".", "_width_mult_list", ")", "\n", "num_widths_sh", "=", "len", "(", "self", ".", "_width_mult_list_sh", ")", "\n", "", "else", ":", "\n", "            ", "num_widths", "=", "1", "\n", "num_widths_sh", "=", "1", "\n", "\n", "", "getattr", "(", "self", ",", "\"alpha\"", ")", ".", "data", "=", "Variable", "(", "1e-3", "*", "torch", ".", "ones", "(", "self", ".", "_layers", ",", "num_ops", ")", ".", "cuda", "(", ")", ",", "requires_grad", "=", "True", ")", "\n", "getattr", "(", "self", ",", "\"beta\"", ")", ".", "data", "=", "Variable", "(", "1e-3", "*", "torch", ".", "ones", "(", "self", ".", "_layers", ",", "2", ")", ".", "cuda", "(", ")", ",", "requires_grad", "=", "True", ")", "\n", "getattr", "(", "self", ",", "\"ratio\"", ")", ".", "data", "=", "Variable", "(", "1e-3", "*", "torch", ".", "ones", "(", "self", ".", "_layers", ",", "num_widths", ")", ".", "cuda", "(", ")", ",", "requires_grad", "=", "True", ")", "\n", "\n", "getattr", "(", "self", ",", "\"beta_sh\"", ")", ".", "data", "=", "Variable", "(", "1e-3", "*", "torch", ".", "ones", "(", "self", ".", "len_beta_sh", ",", "2", ")", ".", "cuda", "(", ")", ",", "requires_grad", "=", "True", ")", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_search.NAS_GAN._reset_arch_parameters": [[554, 565], ["len", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "len", "getattr", "getattr", "getattr", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["None"], ["\n", "\n", "", "", ""]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_search.sample_gumbel": [[18, 22], ["torch.rand", "torch.rand", "torch.rand", "U.cuda.cuda", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log"], "function", ["None"], ["    ", "U", "=", "torch", ".", "rand", "(", "shape", ")", "\n", "U", "=", "U", ".", "cuda", "(", ")", "\n", "return", "-", "torch", ".", "log", "(", "-", "torch", ".", "log", "(", "U", "+", "eps", ")", "+", "eps", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_search.gumbel_softmax_sample": [[24, 27], ["torch.softmax", "model_search.sample_gumbel", "logits.size"], "function", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.sample_gumbel"], ["    ", "y", "=", "logits", "+", "sample_gumbel", "(", "logits", ".", "size", "(", ")", ")", "\n", "return", "F", ".", "softmax", "(", "y", "/", "temperature", ",", "dim", "=", "-", "1", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_search.gumbel_softmax": [[29, 48], ["model_search.gumbel_softmax_sample", "gumbel_softmax_sample.size", "gumbel_softmax_sample.max", "torch.zeros_like().view", "torch.zeros_like().view", "torch.zeros_like().view", "y_hard.view.scatter_", "y_hard.view.view", "ind.view", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like"], "function", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.gumbel_softmax_sample"], ["    ", "\"\"\"\n    ST-gumple-softmax\n    input: [*, n_class]\n    return: flatten --> [*, n_class] an one-hot vector\n    \"\"\"", "\n", "y", "=", "gumbel_softmax_sample", "(", "logits", ",", "temperature", ")", "\n", "\n", "if", "not", "hard", ":", "\n", "        ", "return", "y", "\n", "\n", "", "shape", "=", "y", ".", "size", "(", ")", "\n", "_", ",", "ind", "=", "y", ".", "max", "(", "dim", "=", "-", "1", ")", "\n", "y_hard", "=", "torch", ".", "zeros_like", "(", "y", ")", ".", "view", "(", "-", "1", ",", "shape", "[", "-", "1", "]", ")", "\n", "y_hard", ".", "scatter_", "(", "1", ",", "ind", ".", "view", "(", "-", "1", ",", "1", ")", ",", "1", ")", "\n", "y_hard", "=", "y_hard", ".", "view", "(", "*", "shape", ")", "\n", "# Set gradients w.r.t. y_hard gradients w.r.t. y", "\n", "y_hard", "=", "(", "y_hard", "-", "y", ")", ".", "detach", "(", ")", "+", "y", "\n", "return", "y_hard", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.config_train.add_path": [[38, 41], ["sys.path.insert"], "function", ["None"], ["if", "C", ".", "dataset", "==", "'horse2zebra'", ":", "\n", "    ", "C", ".", "dataset_path", "=", "\"/home/yf22/dataset/horse2zebra\"", "\n", "C", ".", "target_path", "=", "'/home/yf22/dataset/horse2zebra/target_train'", "\n", "C", ".", "num_train_imgs", "=", "1067", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.train.count_custom": [[52, 54], ["None"], "function", ["None"], ["    ", "config", ".", "save", "=", "'ckpt/{}'", ".", "format", "(", "config", ".", "save", ")", "\n", "create_exp_dir", "(", "config", ".", "save", ",", "scripts_to_save", "=", "glob", ".", "glob", "(", "'*.py'", ")", "+", "glob", ".", "glob", "(", "'*.sh'", ")", ")", "\n", "logger", "=", "SummaryWriter", "(", "config", ".", "save", ")", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.train.main": [[57, 191], ["utils.darts_utils.create_exp_dir", "tensorboardX.SummaryWriter", "logging.basicConfig", "logging.FileHandler", "logging.FileHandler.setFormatter", "logging.getLogger().addHandler", "logging.info", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "model_infer.NAS_GAN_Infer", "thop.profile", "torch.nn.DataParallel().cuda.forward_flops", "logging.info", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "RRDBNet_arch.RRDBNet", "torch.nn.DataParallel().cuda.load_state_dict", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda.eval", "torch.nn.DataParallel().cuda.parameters", "list", "list", "list", "list", "list", "list", "list", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "tqdm.tqdm", "utils.darts_utils.save", "os.path.join", "logging.Formatter", "str", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "os.path.join", "type", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.nn.DataParallel().cuda.load_state_dict", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.nn.DataParallel().cuda.module.cells.parameters", "torch.nn.DataParallel().cuda.module.conv_first.parameters", "torch.nn.DataParallel().cuda.module.trunk_conv.parameters", "torch.nn.DataParallel().cuda.module.upconv1.parameters", "torch.nn.DataParallel().cuda.module.upconv2.parameters", "torch.nn.DataParallel().cuda.module.HRconv.parameters", "torch.nn.DataParallel().cuda.module.conv_last.parameters", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torchvision.RandomCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "datasets.ImageDataset", "torchvision.ToTensor", "datasets.ImageDataset", "logging.info", "sys.exit", "range", "logging.info", "logging.info", "tqdm.tqdm.set_description", "train.train", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.optim.lr_scheduler.MultiStepLR.step", "os.path.join", "logging.getLogger", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "logging.info", "sys.exit", "torch.optim.lr_scheduler.ExponentialLR", "torch.optim.lr_scheduler.ExponentialLR", "torch.optim.lr_scheduler.ExponentialLR", "torch.optim.lr_scheduler.ExponentialLR", "torch.optim.lr_scheduler.ExponentialLR", "train.infer", "tqdm.tqdm.set_description", "utils.darts_utils.save", "glob.glob", "glob.glob", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "logging.info", "sys.exit", "str", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "train.infer", "tensorboardX.SummaryWriter.add_scalar", "logging.info", "tensorboardX.SummaryWriter.add_scalar", "logging.info", "os.path.join", "util_gan.lr.LambdaLR"], "function", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.create_exp_dir", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.load", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.load", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.load", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.load", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.load", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.Cell.forward_flops", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.eval_teacher.eval", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.save", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.load", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.load", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.load", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.load", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.load", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.load", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.load", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.load", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.load", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.load", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.train_search.train", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.util_gan.lr.LambdaLR.step", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.train_search.infer", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.save", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.train_search.infer"], ["logging", ".", "basicConfig", "(", "stream", "=", "sys", ".", "stdout", ",", "level", "=", "logging", ".", "INFO", ",", "format", "=", "log_format", ",", "datefmt", "=", "'%m/%d %I:%M:%S %p'", ")", "\n", "fh", "=", "logging", ".", "FileHandler", "(", "os", ".", "path", ".", "join", "(", "config", ".", "save", ",", "'log.txt'", ")", ")", "\n", "fh", ".", "setFormatter", "(", "logging", ".", "Formatter", "(", "log_format", ")", ")", "\n", "logging", ".", "getLogger", "(", ")", ".", "addHandler", "(", "fh", ")", "\n", "\n", "logging", ".", "info", "(", "\"args = %s\"", ",", "str", "(", "config", ")", ")", "\n", "# preparation ################", "\n", "torch", ".", "backends", ".", "cudnn", ".", "enabled", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "seed", "=", "config", ".", "seed", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "\n", "", "state", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "config", ".", "load_path", ",", "'arch.pt'", ")", ")", "\n", "# Model #######################################", "\n", "model", "=", "NAS_GAN_Infer", "(", "state", "[", "'alpha'", "]", ",", "state", "[", "'beta'", "]", ",", "state", "[", "'ratio'", "]", ",", "state", "[", "'beta_sh'", "]", ",", "state", "[", "'ratio_sh'", "]", ",", "layers", "=", "config", ".", "layers", ",", "\n", "width_mult_list", "=", "config", ".", "width_mult_list", ",", "width_mult_list_sh", "=", "config", ".", "width_mult_list_sh", ",", "loss_weight", "=", "config", ".", "loss_weight", ",", "quantize", "=", "config", ".", "quantize", ")", "\n", "\n", "flops", ",", "params", "=", "profile", "(", "model", ",", "inputs", "=", "(", "torch", ".", "randn", "(", "1", ",", "3", ",", "256", ",", "256", ")", ",", ")", ",", "custom_ops", "=", "custom_ops", ")", "\n", "flops", "=", "model", ".", "forward_flops", "(", "size", "=", "(", "3", ",", "256", ",", "256", ")", ")", "\n", "logging", ".", "info", "(", "\"params = %fMB, FLOPs = %fGB\"", ",", "params", "/", "1e6", ",", "flops", "/", "1e9", ")", "\n", "\n", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ")", ".", "cuda", "(", ")", "\n", "\n", "if", "type", "(", "config", ".", "pretrain", ")", "==", "str", ":", "\n", "        ", "state_dict", "=", "torch", ".", "load", "(", "config", ".", "pretrain", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "# else:", "\n", "#     features = [model.module.stem, model.module.cells, model.module.header]", "\n", "#     init_weight(features, nn.init.kaiming_normal_, nn.InstanceNorm2d, config.bn_eps, config.bn_momentum, mode='fan_in', nonlinearity='relu')", "\n", "\n", "# teacher_model = Generator(3, 3)", "\n", "# teacher_model.load_state_dict(torch.load(config.generator_A2B))", "\n", "# teacher_model = torch.nn.DataParallel(teacher_model).cuda()", "\n", "\n", "# for param in teacher_model.parameters():", "\n", "#     param.require_grads = False", "\n", "\n", "# Optimizer ###################################", "\n", "", "base_lr", "=", "config", ".", "lr", "\n", "parameters", "=", "[", "]", "\n", "parameters", "+=", "list", "(", "model", ".", "module", ".", "stem", ".", "parameters", "(", ")", ")", "\n", "parameters", "+=", "list", "(", "model", ".", "module", ".", "cells", ".", "parameters", "(", ")", ")", "\n", "parameters", "+=", "list", "(", "model", ".", "module", ".", "header", ".", "parameters", "(", ")", ")", "\n", "\n", "if", "config", ".", "opt", "==", "'Adam'", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "parameters", ",", "\n", "lr", "=", "base_lr", ",", "\n", "betas", "=", "config", ".", "betas", ")", "\n", "", "elif", "config", ".", "opt", "==", "'Sgd'", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "\n", "parameters", ",", "\n", "lr", "=", "base_lr", ",", "\n", "momentum", "=", "config", ".", "momentum", ",", "\n", "weight_decay", "=", "config", ".", "weight_decay", ")", "\n", "", "else", ":", "\n", "        ", "logging", ".", "info", "(", "\"Wrong Optimizer Type.\"", ")", "\n", "sys", ".", "exit", "(", ")", "\n", "\n", "# lr policy ##############################", "\n", "", "total_iteration", "=", "config", ".", "nepochs", "*", "config", ".", "niters_per_epoch", "\n", "\n", "if", "config", ".", "lr_schedule", "==", "'linear'", ":", "\n", "        ", "lr_policy", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "LambdaLR", "(", "optimizer", ",", "lr_lambda", "=", "LambdaLR", "(", "config", ".", "nepochs", ",", "0", ",", "config", ".", "decay_epoch", ")", ".", "step", ")", "\n", "", "elif", "config", ".", "lr_schedule", "==", "'exponential'", ":", "\n", "        ", "lr_policy", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "ExponentialLR", "(", "optimizer", ",", "config", ".", "lr_decay", ")", "\n", "", "elif", "config", ".", "lr_schedule", "==", "'multistep'", ":", "\n", "        ", "lr_policy", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "optimizer", ",", "milestones", "=", "config", ".", "milestones", ",", "gamma", "=", "config", ".", "gamma", ")", "\n", "", "else", ":", "\n", "        ", "logging", ".", "info", "(", "\"Wrong Learning Rate Schedule Type.\"", ")", "\n", "sys", ".", "exit", "(", ")", "\n", "\n", "\n", "# data loader ############################", "\n", "\n", "", "transforms_", "=", "[", "\n", "# transforms.Resize(int(config.image_height*1.12), Image.BICUBIC), ", "\n", "# transforms.RandomCrop(config.image_height), ", "\n", "# transforms.RandomHorizontalFlip(),", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "]", "\n", "\n", "# train_loader_model = DataLoader(ImageDataset(config.dataset_path, transforms_=transforms_, unaligned=True), ", "\n", "#                     batch_size=config.batch_size, shuffle=True, num_workers=config.num_workers)", "\n", "\n", "train_loader_model", "=", "DataLoader", "(", "PairedImageDataset", "(", "config", ".", "dataset_path", ",", "config", ".", "target_path", ",", "transforms_", "=", "transforms_", ")", ",", "\n", "batch_size", "=", "config", ".", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "config", ".", "num_workers", ")", "\n", "\n", "transforms_", "=", "[", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "]", "\n", "test_loader", "=", "DataLoader", "(", "ImageDataset", "(", "config", ".", "dataset_path", ",", "transforms_", "=", "transforms_", ",", "mode", "=", "'test'", ")", ",", "\n", "batch_size", "=", "1", ",", "shuffle", "=", "False", ",", "num_workers", "=", "config", ".", "num_workers", ")", "\n", "\n", "\n", "if", "config", ".", "eval_only", ":", "\n", "        ", "logging", ".", "info", "(", "'Eval: fid = %f'", ",", "infer", "(", "0", ",", "model", ",", "test_loader", ",", "logger", ")", ")", "\n", "sys", ".", "exit", "(", "0", ")", "\n", "\n", "", "best_fid", "=", "1000", "\n", "best_epoch", "=", "0", "\n", "\n", "tbar", "=", "tqdm", "(", "range", "(", "config", ".", "nepochs", ")", ",", "ncols", "=", "80", ")", "\n", "for", "epoch", "in", "tbar", ":", "\n", "        ", "logging", ".", "info", "(", "config", ".", "save", ")", "\n", "logging", ".", "info", "(", "\"lr: \"", "+", "str", "(", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ")", ")", "\n", "\n", "# training", "\n", "tbar", ".", "set_description", "(", "\"[Epoch %d/%d][train...]\"", "%", "(", "epoch", "+", "1", ",", "config", ".", "nepochs", ")", ")", "\n", "train", "(", "train_loader_model", ",", "model", ",", "optimizer", ",", "lr_policy", ",", "logger", ",", "epoch", ")", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "lr_policy", ".", "step", "(", ")", "\n", "\n", "# validation", "\n", "if", "epoch", "and", "not", "(", "epoch", "+", "1", ")", "%", "config", ".", "eval_epoch", ":", "\n", "            ", "tbar", ".", "set_description", "(", "\"[Epoch %d/%d][validation...]\"", "%", "(", "epoch", "+", "1", ",", "config", ".", "nepochs", ")", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "valid_fid", "=", "infer", "(", "epoch", ",", "model", ",", "test_loader", ",", "logger", ")", "\n", "\n", "if", "valid_fid", "<", "best_fid", ":", "\n", "                    ", "best_fid", "=", "valid_fid", "\n", "best_epoch", "=", "epoch", "\n", "\n", "", "logger", ".", "add_scalar", "(", "'fid/val'", ",", "valid_fid", ",", "epoch", ")", "\n", "logging", ".", "info", "(", "\"Epoch %d: valid_fid %.3f\"", "%", "(", "epoch", ",", "valid_fid", ")", ")", "\n", "\n", "logger", ".", "add_scalar", "(", "'flops/val'", ",", "flops", ",", "epoch", ")", "\n", "logging", ".", "info", "(", "\"Epoch %d: flops %.3f\"", "%", "(", "epoch", ",", "flops", ")", ")", "\n", "\n", "logging", ".", "info", "(", "\"Best fid:%.3f, Best epoch:%d\"", "%", "(", "best_fid", ",", "best_epoch", ")", ")", "\n", "\n", "", "save", "(", "model", ",", "os", ".", "path", ".", "join", "(", "config", ".", "save", ",", "'weights_%d.pt'", "%", "epoch", ")", ")", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.train.train": [[194, 223], ["model.train", "tqdm.tqdm", "iter", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "range", "optimizer.zero_grad", "iter.next", "input.cuda.cuda", "teacher_model", "model.module._loss", "logger.add_scalar", "model.module._loss.backward", "torch.utils.clip_grad_norm_", "optimizer.step", "optimizer.zero_grad", "tqdm.tqdm.set_description", "model.parameters", "len", "len"], "function", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.train_search.train", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.NAS_GAN_Infer._loss", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.quantize.UniformQuantizeGrad.backward", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.util_gan.lr.LambdaLR.step"], ["\n", "\n", "\n", "", "def", "train", "(", "train_loader_model", ",", "model", ",", "optimizer", ",", "lr_policy", ",", "logger", ",", "epoch", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "\n", "bar_format", "=", "'{desc}[{elapsed}<{remaining},{rate_fmt}]'", "\n", "pbar", "=", "tqdm", "(", "range", "(", "config", ".", "niters_per_epoch", ")", ",", "file", "=", "sys", ".", "stdout", ",", "bar_format", "=", "bar_format", ",", "ncols", "=", "80", ")", "\n", "dataloader_model", "=", "iter", "(", "train_loader_model", ")", "\n", "\n", "\n", "for", "step", "in", "pbar", ":", "\n", "        ", "lr", "=", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "minibatch", "=", "dataloader_model", ".", "next", "(", ")", "\n", "input", "=", "minibatch", "[", "'A'", "]", "\n", "input", "=", "input", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "target", "=", "minibatch", "[", "'B'", "]", "\n", "target", "=", "target", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "loss", "=", "model", ".", "module", ".", "_loss", "(", "input", ",", "target", ")", "\n", "logger", ".", "add_scalar", "(", "'loss/train'", ",", "loss", ",", "epoch", "*", "len", "(", "pbar", ")", "+", "step", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "config", ".", "grad_clip", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "pbar", ".", "set_description", "(", "\"[Step %d/%d]\"", "%", "(", "step", "+", "1", ",", "len", "(", "train_loader_model", ")", ")", ")", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.train.infer": [[225, 239], ["model.eval", "enumerate", "util_gan.psnr.compute_psnr", "torch.autograd.Variable().cuda", "model().data.float().clamp_", "torchvision.utils.save_image", "os.path.join", "torch.autograd.Variable", "model().data.float", "model"], "function", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.eval_teacher.eval", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.util_gan.psnr.compute_psnr"], ["", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "del", "loss", "\n", "\n", "\n", "", "def", "infer", "(", "epoch", ",", "model", ",", "test_loader", ",", "logger", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "\n", "outdir", "=", "'output/gen_epoch_%d'", "%", "(", "epoch", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "outdir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "outdir", ")", "\n", "\n", "", "for", "i", ",", "batch", "in", "enumerate", "(", "test_loader", ")", ":", "\n", "# Set model input", "\n", "        ", "real_A", "=", "Variable", "(", "batch", "[", "'A'", "]", ")", ".", "cuda", "(", ")", "\n", "fake_B", "=", "0.5", "*", "(", "model", "(", "real_A", ")", ".", "data", "+", "1.0", ")", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.train_search.main": [[54, 243], ["utils.darts_utils.create_exp_dir", "tensorboardX.SummaryWriter", "logging.basicConfig", "logging.FileHandler", "logging.FileHandler.setFormatter", "logging.getLogger().addHandler", "logging.info", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "model_search.NAS_GAN", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "RRDBNet_arch.RRDBNet", "torch.nn.DataParallel().cuda.load_state_dict", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda.eval", "torch.nn.DataParallel().cuda.parameters", "architect.Architect", "list", "list", "list", "list", "list", "list", "list", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "tqdm.tqdm", "utils.darts_utils.save", "os.path.join", "logging.Formatter", "str", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "type", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.nn.DataParallel().cuda.state_dict", "model.state_dict.update", "torch.nn.DataParallel().cuda.load_state_dict", "torch.nn.DataParallel().cuda.module.cells.parameters", "torch.nn.DataParallel().cuda.module.conv_first.parameters", "torch.nn.DataParallel().cuda.module.trunk_conv.parameters", "torch.nn.DataParallel().cuda.module.upconv1.parameters", "torch.nn.DataParallel().cuda.module.upconv2.parameters", "torch.nn.DataParallel().cuda.module.HRconv.parameters", "torch.nn.DataParallel().cuda.module.conv_last.parameters", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torchvision.RandomCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "datasets.ImageDataset", "datasets.ImageDataset", "torchvision.ToTensor", "datasets.ImageDataset", "range", "logging.info", "logging.info", "logging.info", "logging.info", "tqdm.tqdm.set_description", "train_search.train", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.optim.lr_scheduler.MultiStepLR.step", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "logging.getLogger", "type", "type", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "logging.info", "sys.exit", "torch.optim.lr_scheduler.ExponentialLR", "torch.optim.lr_scheduler.ExponentialLR", "torch.optim.lr_scheduler.ExponentialLR", "torch.optim.lr_scheduler.ExponentialLR", "torch.optim.lr_scheduler.ExponentialLR", "tqdm.tqdm.set_description", "utils.darts_utils.save", "os.path.join", "glob.glob", "glob.glob", "torch.load.items", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "logging.info", "sys.exit", "str", "str", "os.path.join", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "util_gan.lr.LambdaLR", "train_search.infer", "tensorboardX.SummaryWriter.add_scalar", "logging.info", "train_search.infer", "tensorboardX.SummaryWriter.add_scalar", "logging.info", "tensorboardX.SummaryWriter.add_scalar", "logging.info", "valid_psnr_history.append", "flops_history.append", "getattr", "getattr", "getattr", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "state[].size", "partial[].size", "len", "train_search.infer", "tensorboardX.SummaryWriter.add_scalar", "logging.info", "train_search.infer", "tensorboardX.SummaryWriter.add_scalar", "logging.info", "flops_supernet_history.append", "os.path.join", "tensorboardX.SummaryWriter.add_scalar", "logging.info", "str"], "function", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.create_exp_dir", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.eval_teacher.eval", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.save", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.load", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.load", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.load", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.load", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.load", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.load", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.load", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.load", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.load", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.load", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.AvgrageMeter.update", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.train_search.train", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.util_gan.lr.LambdaLR.step", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.save", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.save", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.save", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.save", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.save", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.save", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.train_search.infer", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.train_search.infer", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.save", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.save", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.save", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.save", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.save", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.train_search.infer", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.train_search.infer"], ["logging", ".", "getLogger", "(", ")", ".", "addHandler", "(", "fh", ")", "\n", "\n", "assert", "type", "(", "pretrain", ")", "==", "bool", "or", "type", "(", "pretrain", ")", "==", "str", "\n", "update_arch", "=", "True", "\n", "if", "pretrain", "==", "True", ":", "\n", "        ", "update_arch", "=", "False", "\n", "", "logging", ".", "info", "(", "\"args = %s\"", ",", "str", "(", "config", ")", ")", "\n", "# preparation ################", "\n", "torch", ".", "backends", ".", "cudnn", ".", "enabled", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "seed", "=", "config", ".", "seed", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "\n", "# Model #######################################", "\n", "", "model", "=", "Network", "(", "config", ".", "layers", ",", "slimmable", "=", "config", ".", "slimmable", ",", "width_mult_list", "=", "config", ".", "width_mult_list", ",", "width_mult_list_sh", "=", "config", ".", "width_mult_list_sh", ",", "\n", "loss_weight", "=", "config", ".", "loss_weight", ",", "prun_modes", "=", "config", ".", "prun_modes", ",", "quantize", "=", "config", ".", "quantize", ")", "\n", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ")", ".", "cuda", "(", ")", "\n", "\n", "# print(model)", "\n", "\n", "# teacher_model = Generator(3, 3)", "\n", "# teacher_model.load_state_dict(torch.load(config.generator_A2B))", "\n", "# teacher_model = torch.nn.DataParallel(teacher_model).cuda()", "\n", "\n", "# for param in teacher_model.parameters():", "\n", "#     param.require_grads = False", "\n", "\n", "if", "type", "(", "pretrain", ")", "==", "str", ":", "\n", "        ", "partial", "=", "torch", ".", "load", "(", "pretrain", "+", "\"/weights.pt\"", ")", "\n", "state", "=", "model", ".", "state_dict", "(", ")", "\n", "pretrained_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "partial", ".", "items", "(", ")", "if", "k", "in", "state", "and", "state", "[", "k", "]", ".", "size", "(", ")", "==", "partial", "[", "k", "]", ".", "size", "(", ")", "}", "\n", "state", ".", "update", "(", "pretrained_dict", ")", "\n", "model", ".", "load_state_dict", "(", "state", ")", "\n", "# else:", "\n", "#     features = [model.module.stem, model.module.cells, model.module.header]", "\n", "#     init_weight(features, nn.init.kaiming_normal_, nn.InstanceNorm2d, config.bn_eps, config.bn_momentum, mode='fan_in', nonlinearity='relu')", "\n", "\n", "", "architect", "=", "Architect", "(", "model", ",", "config", ")", "\n", "\n", "# Optimizer ###################################", "\n", "base_lr", "=", "config", ".", "lr", "\n", "parameters", "=", "[", "]", "\n", "parameters", "+=", "list", "(", "model", ".", "module", ".", "stem", ".", "parameters", "(", ")", ")", "\n", "parameters", "+=", "list", "(", "model", ".", "module", ".", "cells", ".", "parameters", "(", ")", ")", "\n", "parameters", "+=", "list", "(", "model", ".", "module", ".", "header", ".", "parameters", "(", ")", ")", "\n", "\n", "if", "config", ".", "opt", "==", "'Adam'", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "parameters", ",", "\n", "lr", "=", "base_lr", ",", "\n", "betas", "=", "config", ".", "betas", ")", "\n", "", "elif", "config", ".", "opt", "==", "'Sgd'", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "\n", "parameters", ",", "\n", "lr", "=", "base_lr", ",", "\n", "momentum", "=", "config", ".", "momentum", ",", "\n", "weight_decay", "=", "config", ".", "weight_decay", ")", "\n", "", "else", ":", "\n", "        ", "logging", ".", "info", "(", "\"Wrong Optimizer Type.\"", ")", "\n", "sys", ".", "exit", "(", ")", "\n", "\n", "# lr policy ##############################", "\n", "", "total_iteration", "=", "config", ".", "nepochs", "*", "config", ".", "niters_per_epoch", "\n", "\n", "if", "config", ".", "lr_schedule", "==", "'linear'", ":", "\n", "        ", "lr_policy", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "LambdaLR", "(", "optimizer", ",", "lr_lambda", "=", "LambdaLR", "(", "config", ".", "nepochs", ",", "0", ",", "config", ".", "decay_epoch", ")", ".", "step", ")", "\n", "", "elif", "config", ".", "lr_schedule", "==", "'exponential'", ":", "\n", "        ", "lr_policy", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "ExponentialLR", "(", "optimizer", ",", "config", ".", "lr_decay", ")", "\n", "", "elif", "config", ".", "lr_schedule", "==", "'multistep'", ":", "\n", "        ", "lr_policy", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "optimizer", ",", "milestones", "=", "config", ".", "milestones", ",", "gamma", "=", "config", ".", "gamma", ")", "\n", "", "else", ":", "\n", "        ", "logging", ".", "info", "(", "\"Wrong Learning Rate Schedule Type.\"", ")", "\n", "sys", ".", "exit", "(", ")", "\n", "\n", "\n", "# data loader ###########################", "\n", "\n", "", "transforms_", "=", "[", "\n", "# transforms.Resize(int(config.image_height*1.12), Image.BICUBIC), ", "\n", "# transforms.RandomCrop(config.image_height), ", "\n", "# transforms.RandomHorizontalFlip(),", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "]", "\n", "\n", "# train_loader_model = DataLoader(ImageDataset(config.dataset_path, transforms_=transforms_, unaligned=True, portion=config.train_portion), ", "\n", "#                     batch_size=config.batch_size, shuffle=True, num_workers=config.num_workers)", "\n", "# train_loader_arch = DataLoader(ImageDataset(config.dataset_path, transforms_=transforms_, unaligned=True, portion=config.train_portion-1), ", "\n", "#                     batch_size=config.batch_size, shuffle=True, num_workers=config.num_workers)", "\n", "\n", "train_loader_model", "=", "DataLoader", "(", "PairedImageDataset", "(", "config", ".", "dataset_path", ",", "config", ".", "target_path", ",", "transforms_", "=", "transforms_", ",", "portion", "=", "config", ".", "train_portion", ")", ",", "\n", "batch_size", "=", "config", ".", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "config", ".", "num_workers", ")", "\n", "train_loader_arch", "=", "DataLoader", "(", "PairedImageDataset", "(", "config", ".", "dataset_path", ",", "config", ".", "target_path", ",", "transforms_", "=", "transforms_", ",", "portion", "=", "config", ".", "train_portion", "-", "1", ")", ",", "\n", "batch_size", "=", "config", ".", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "config", ".", "num_workers", ")", "\n", "\n", "transforms_", "=", "[", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "]", "\n", "test_loader", "=", "DataLoader", "(", "ImageDataset", "(", "config", ".", "dataset_path", ",", "transforms_", "=", "transforms_", ",", "mode", "=", "'test'", ")", ",", "\n", "batch_size", "=", "1", ",", "shuffle", "=", "False", ",", "num_workers", "=", "config", ".", "num_workers", ")", "\n", "\n", "\n", "tbar", "=", "tqdm", "(", "range", "(", "config", ".", "nepochs", ")", ",", "ncols", "=", "80", ")", "\n", "valid_fid_history", "=", "[", "]", "\n", "flops_history", "=", "[", "]", "\n", "flops_supernet_history", "=", "[", "]", "\n", "\n", "best_fid", "=", "1000", "\n", "best_epoch", "=", "0", "\n", "\n", "for", "epoch", "in", "tbar", ":", "\n", "        ", "logging", ".", "info", "(", "pretrain", ")", "\n", "logging", ".", "info", "(", "config", ".", "save", ")", "\n", "logging", ".", "info", "(", "\"lr: \"", "+", "str", "(", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ")", ")", "\n", "\n", "logging", ".", "info", "(", "\"update arch: \"", "+", "str", "(", "update_arch", ")", ")", "\n", "\n", "# training", "\n", "tbar", ".", "set_description", "(", "\"[Epoch %d/%d][train...]\"", "%", "(", "epoch", "+", "1", ",", "config", ".", "nepochs", ")", ")", "\n", "train", "(", "pretrain", ",", "train_loader_model", ",", "train_loader_arch", ",", "model", ",", "architect", ",", "optimizer", ",", "lr_policy", ",", "logger", ",", "epoch", ",", "update_arch", "=", "update_arch", ")", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "lr_policy", ".", "step", "(", ")", "\n", "\n", "# validation", "\n", "if", "epoch", "and", "not", "(", "epoch", "+", "1", ")", "%", "config", ".", "eval_epoch", ":", "\n", "            ", "tbar", ".", "set_description", "(", "\"[Epoch %d/%d][validation...]\"", "%", "(", "epoch", "+", "1", ",", "config", ".", "nepochs", ")", ")", "\n", "\n", "save", "(", "model", ",", "os", ".", "path", ".", "join", "(", "config", ".", "save", ",", "'weights_%d.pt'", "%", "epoch", ")", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "if", "pretrain", "==", "True", ":", "\n", "                    ", "model", ".", "module", ".", "prun_mode", "=", "\"min\"", "\n", "valid_fid", "=", "infer", "(", "epoch", ",", "model", ",", "test_loader", ",", "logger", ")", "\n", "logger", ".", "add_scalar", "(", "'fid/val_min'", ",", "valid_fid", ",", "epoch", ")", "\n", "logging", ".", "info", "(", "\"Epoch %d: valid_fid_min %.3f\"", "%", "(", "epoch", ",", "valid_fid", ")", ")", "\n", "\n", "if", "len", "(", "model", ".", "module", ".", "_width_mult_list", ")", ">", "1", ":", "\n", "                        ", "model", ".", "module", ".", "prun_mode", "=", "\"max\"", "\n", "valid_fid", "=", "infer", "(", "epoch", ",", "model", ",", "test_loader", ",", "logger", ")", "\n", "logger", ".", "add_scalar", "(", "'fid/val_max'", ",", "valid_fid", ",", "epoch", ")", "\n", "logging", ".", "info", "(", "\"Epoch %d: valid_fid_max %.3f\"", "%", "(", "epoch", ",", "valid_fid", ")", ")", "\n", "\n", "model", ".", "module", ".", "prun_mode", "=", "\"random\"", "\n", "valid_fid", "=", "infer", "(", "epoch", ",", "model", ",", "test_loader", ",", "logger", ")", "\n", "logger", ".", "add_scalar", "(", "'fid/val_random'", ",", "valid_fid", ",", "epoch", ")", "\n", "logging", ".", "info", "(", "\"Epoch %d: valid_fid_random %.3f\"", "%", "(", "epoch", ",", "valid_fid", ")", ")", "\n", "\n", "", "", "else", ":", "\n", "                    ", "model", ".", "module", ".", "prun_mode", "=", "None", "\n", "\n", "valid_fid", ",", "flops", "=", "infer", "(", "epoch", ",", "model", ",", "test_loader", ",", "logger", ",", "finalize", "=", "True", ")", "\n", "\n", "logger", ".", "add_scalar", "(", "'fid/val'", ",", "valid_fid", ",", "epoch", ")", "\n", "logging", ".", "info", "(", "\"Epoch %d: valid_fid %.3f\"", "%", "(", "epoch", ",", "valid_fid", ")", ")", "\n", "\n", "logger", ".", "add_scalar", "(", "'flops/val'", ",", "flops", ",", "epoch", ")", "\n", "logging", ".", "info", "(", "\"Epoch %d: flops %.3f\"", "%", "(", "epoch", ",", "flops", ")", ")", "\n", "\n", "valid_fid_history", ".", "append", "(", "valid_fid", ")", "\n", "flops_history", ".", "append", "(", "flops", ")", "\n", "\n", "if", "update_arch", ":", "\n", "                        ", "flops_supernet_history", ".", "append", "(", "architect", ".", "flops_supernet", ")", "\n", "\n", "", "", "if", "valid_fid", "<", "best_fid", ":", "\n", "                    ", "best_fid", "=", "valid_fid", "\n", "best_epoch", "=", "epoch", "\n", "", "logging", ".", "info", "(", "\"Best fid:%.3f, Best epoch:%d\"", "%", "(", "best_fid", ",", "best_epoch", ")", ")", "\n", "\n", "if", "update_arch", ":", "\n", "                    ", "state", "=", "{", "}", "\n", "state", "[", "'alpha'", "]", "=", "getattr", "(", "model", ".", "module", ",", "'alpha'", ")", "\n", "state", "[", "'beta'", "]", "=", "getattr", "(", "model", ".", "module", ",", "'beta'", ")", "\n", "state", "[", "'ratio'", "]", "=", "getattr", "(", "model", ".", "module", ",", "'ratio'", ")", "\n", "state", "[", "'beta_sh'", "]", "=", "getattr", "(", "model", ".", "module", ",", "'beta_sh'", ")", "\n", "state", "[", "'ratio_sh'", "]", "=", "getattr", "(", "model", ".", "module", ",", "'ratio_sh'", ")", "\n", "state", "[", "\"fid\"", "]", "=", "valid_fid", "\n", "state", "[", "\"flops\"", "]", "=", "flops", "\n", "\n", "torch", ".", "save", "(", "state", ",", "os", ".", "path", ".", "join", "(", "config", ".", "save", ",", "\"arch_%d_%f.pt\"", "%", "(", "epoch", ",", "flops", ")", ")", ")", "\n", "\n", "if", "config", ".", "flops_weight", ">", "0", ":", "\n", "                        ", "if", "flops", "<", "config", ".", "flops_min", ":", "\n", "                            ", "architect", ".", "flops_weight", "/=", "2", "\n", "", "elif", "flops", ">", "config", ".", "flops_max", ":", "\n", "                            ", "architect", ".", "flops_weight", "*=", "2", "\n", "", "logger", ".", "add_scalar", "(", "\"arch/flops_weight\"", ",", "architect", ".", "flops_weight", ",", "epoch", "+", "1", ")", "\n", "logging", ".", "info", "(", "\"arch_flops_weight = \"", "+", "str", "(", "architect", ".", "flops_weight", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.train_search.train": [[245, 302], ["model.train", "tqdm.tqdm", "iter", "iter", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "range", "iter.next", "input.cuda.cuda", "teacher_model", "model.module._loss", "optimizer.zero_grad", "logger.add_scalar", "model.module._loss.backward", "torch.utils.clip_grad_norm_", "optimizer.step", "tqdm.tqdm.set_description", "tqdm.tqdm.set_description", "iter.next", "input_search.cuda.cuda", "teacher_model", "architect.step", "model.parameters", "logger.add_scalar", "logger.add_scalar", "len", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.train_search.train", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.NAS_GAN_Infer._loss", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.quantize.UniformQuantizeGrad.backward", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.util_gan.lr.LambdaLR.step", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.util_gan.lr.LambdaLR.step"], ["\n", "if", "update_arch", ":", "\n", "        ", "torch", ".", "save", "(", "state", ",", "os", ".", "path", ".", "join", "(", "config", ".", "save", ",", "\"arch.pt\"", ")", ")", "\n", "\n", "\n", "", "", "def", "train", "(", "pretrain", ",", "train_loader_model", ",", "train_loader_arch", ",", "model", ",", "architect", ",", "optimizer", ",", "lr_policy", ",", "logger", ",", "epoch", ",", "update_arch", "=", "True", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "\n", "bar_format", "=", "'{desc}[{elapsed}<{remaining},{rate_fmt}]'", "\n", "pbar", "=", "tqdm", "(", "range", "(", "config", ".", "niters_per_epoch", ")", ",", "file", "=", "sys", ".", "stdout", ",", "bar_format", "=", "bar_format", ",", "ncols", "=", "80", ")", "\n", "dataloader_model", "=", "iter", "(", "train_loader_model", ")", "\n", "dataloader_arch", "=", "iter", "(", "train_loader_arch", ")", "\n", "\n", "for", "step", "in", "pbar", ":", "\n", "        ", "minibatch", "=", "dataloader_model", ".", "next", "(", ")", "\n", "\n", "# end = time.time()", "\n", "\n", "input", "=", "minibatch", "[", "'A'", "]", "\n", "input", "=", "input", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "target", "=", "minibatch", "[", "'B'", "]", "\n", "target", "=", "target", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "# time_data = time.time() - end", "\n", "# end = time.time()", "\n", "\n", "if", "update_arch", ":", "\n", "            ", "pbar", ".", "set_description", "(", "\"[Step %d/%d]\"", "%", "(", "step", "+", "1", ",", "len", "(", "train_loader_arch", ")", ")", ")", "\n", "\n", "minibatch", "=", "dataloader_arch", ".", "next", "(", ")", "\n", "input_search", "=", "minibatch", "[", "'A'", "]", "\n", "input_search", "=", "input_search", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "target_search", "=", "minibatch", "[", "'B'", "]", "\n", "target_search", "=", "target_search", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "loss_arch", "=", "architect", ".", "step", "(", "input", ",", "target", ",", "input_search", ",", "target_search", ")", "\n", "if", "(", "step", "+", "1", ")", "%", "10", "==", "0", ":", "\n", "                ", "logger", ".", "add_scalar", "(", "'loss_arch/train'", ",", "loss_arch", ",", "epoch", "*", "len", "(", "pbar", ")", "+", "step", ")", "\n", "logger", ".", "add_scalar", "(", "'arch/flops_supernet'", ",", "architect", ".", "flops_supernet", ",", "epoch", "*", "len", "(", "pbar", ")", "+", "step", ")", "\n", "\n", "# print(model.module.alpha[1])", "\n", "# print(model.module.ratio[1])", "\n", "\n", "", "", "loss", "=", "model", ".", "module", ".", "_loss", "(", "input", ",", "target", ",", "pretrain", ")", "\n", "\n", "# time_fw = time.time() - end", "\n", "# end = time.time()", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "logger", ".", "add_scalar", "(", "'loss/train'", ",", "loss", ",", "epoch", "*", "len", "(", "pbar", ")", "+", "step", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "config", ".", "grad_clip", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# time_bw = time.time() - end", "\n", "# end = time.time()", "\n", "\n", "# print(\"[Step %d/%d]\" % (step + 1, len(train_loader_model)), 'Loss:', loss, 'Time Data:', time_data, 'Time Forward:', time_fw, 'Time Backward:', time_bw)", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.train_search.infer": [[304, 325], ["model.eval", "enumerate", "util_gan.psnr.compute_psnr", "torch.autograd.Variable().cuda", "model().data.float().clamp_", "torchvision.utils.save_image", "model_infer.NAS_GAN_Infer", "model_infer.NAS_GAN_Infer.forward_flops", "os.path.join", "getattr", "getattr", "getattr", "torch.autograd.Variable", "model().data.float", "model"], "function", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.eval_teacher.eval", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.util_gan.psnr.compute_psnr", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.Cell.forward_flops"], ["pbar", ".", "set_description", "(", "\"[Step %d/%d]\"", "%", "(", "step", "+", "1", ",", "len", "(", "train_loader_model", ")", ")", ")", "\n", "\n", "", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "del", "loss", "\n", "if", "update_arch", ":", "del", "loss_arch", "\n", "\n", "\n", "", "def", "infer", "(", "epoch", ",", "model", ",", "test_loader", ",", "logger", ",", "finalize", "=", "False", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "\n", "outdir", "=", "'output/gen_epoch_%d'", "%", "(", "epoch", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "outdir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "outdir", ")", "\n", "\n", "", "for", "i", ",", "batch", "in", "enumerate", "(", "test_loader", ")", ":", "\n", "# Set model input", "\n", "        ", "real_A", "=", "Variable", "(", "batch", "[", "'A'", "]", ")", ".", "cuda", "(", ")", "\n", "fake_B", "=", "0.5", "*", "(", "model", "(", "real_A", ")", ".", "data", "+", "1.0", ")", "\n", "\n", "save_image", "(", "fake_B", ",", "os", ".", "path", ".", "join", "(", "outdir", ",", "'%04d.png'", "%", "(", "i", "+", "1", ")", ")", ")", "\n", "\n", "", "fid", "=", "compute_fid", "(", "outdir", ",", "config", ".", "dataset_path", "+", "'/test/B'", ")", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.architect.Architect.__init__": [[20, 34], ["torch.KLDivLoss().cuda", "torch.KLDivLoss().cuda", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "print", "list", "torch.KLDivLoss", "torch.KLDivLoss", "architect.Architect.model.module._arch_params.values"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "args", ",", "distill", "=", "False", ")", ":", "\n", "# self.network_momentum = args.momentum", "\n", "# self.network_weight_decay = args.weight_decay", "\n", "        ", "self", ".", "model", "=", "model", "\n", "self", ".", "_args", "=", "args", "\n", "self", ".", "quantize", "=", "args", ".", "quantize", "\n", "self", ".", "_distill", "=", "distill", "\n", "self", ".", "_kl", "=", "nn", ".", "KLDivLoss", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "list", "(", "self", ".", "model", ".", "module", ".", "_arch_params", ".", "values", "(", ")", ")", ",", "lr", "=", "args", ".", "arch_learning_rate", ",", "betas", "=", "(", "0.5", ",", "0.999", ")", ")", "#, weight_decay=args.arch_weight_decay)", "\n", "\n", "self", ".", "flops_weight", "=", "args", ".", "flops_weight", "\n", "\n", "print", "(", "\"architect initialized!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.architect.Architect.step": [[36, 57], ["architect.Architect.optimizer.zero_grad", "architect.Architect.backward", "architect.Architect.optimizer.step", "architect.Architect._backward_step_unrolled", "architect.Architect._backward_step"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.quantize.UniformQuantizeGrad.backward", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.util_gan.lr.LambdaLR.step", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.architect.Architect._backward_step"], ["", "def", "step", "(", "self", ",", "input_train", ",", "target_train", ",", "input_valid", ",", "target_valid", ",", "eta", "=", "None", ",", "network_optimizer", "=", "None", ",", "unrolled", "=", "False", ")", ":", "\n", "        ", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "if", "unrolled", ":", "\n", "            ", "loss", "=", "self", ".", "_backward_step_unrolled", "(", "input_train", ",", "target_train", ",", "input_valid", ",", "target_valid", ",", "eta", ",", "network_optimizer", ")", "\n", "", "else", ":", "\n", "            ", "loss", ",", "loss_flops", "=", "self", ".", "_backward_step", "(", "input_valid", ",", "target_valid", ")", "\n", "\n", "# loss.backward(retain_graph=True)", "\n", "\n", "# # bp()", "\n", "# if loss_flops != 0: ", "\n", "#     loss_flops.backward(retain_graph=True)", "\n", "\n", "", "if", "loss_flops", "!=", "0", ":", "\n", "            ", "loss", "+=", "loss_flops", "\n", "\n", "", "loss", ".", "backward", "(", ")", "\n", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.architect.Architect._backward_step": [[59, 102], ["architect.Architect.model.module._loss", "len", "architect.Architect.model.module.forward_flops", "architect.Architect.model.module.forward_flops", "architect.Architect.model.module.forward_flops", "architect.Architect.model.module.forward_flops", "architect.Architect.model.module.forward_flops"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.NAS_GAN_Infer._loss", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.Cell.forward_flops", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.Cell.forward_flops", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.Cell.forward_flops", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.Cell.forward_flops", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.Cell.forward_flops"], ["", "def", "_backward_step", "(", "self", ",", "input_valid", ",", "target_valid", ")", ":", "\n", "        ", "loss", "=", "self", ".", "model", ".", "module", ".", "_loss", "(", "input_valid", ",", "target_valid", ")", "\n", "self", ".", "model", ".", "module", ".", "prun_mode", "=", "None", "\n", "\n", "flops", "=", "0", "\n", "\n", "if", "len", "(", "self", ".", "model", ".", "module", ".", "_width_mult_list", ")", "==", "1", ":", "\n", "            ", "if", "self", ".", "quantize", "==", "'search'", ":", "\n", "# r0 = 1/2; r1 = 1/2", "\n", "                ", "r0", "=", "self", ".", "_args", ".", "alpha_weight", "\n", "r1", "=", "self", ".", "_args", ".", "beta_weight", "\n", "", "else", ":", "\n", "                ", "r0", "=", "1", "\n", "\n", "", "flops", "=", "flops", "+", "r0", "*", "self", ".", "model", ".", "module", ".", "forward_flops", "(", "(", "3", ",", "256", ",", "256", ")", ",", "alpha", "=", "True", ",", "beta", "=", "False", ",", "ratio", "=", "False", ")", "\n", "\n", "if", "self", ".", "quantize", "==", "'search'", ":", "\n", "                ", "flops", "=", "flops", "+", "r1", "*", "self", ".", "model", ".", "module", ".", "forward_flops", "(", "(", "3", ",", "256", ",", "256", ")", ",", "alpha", "=", "False", ",", "beta", "=", "True", ",", "ratio", "=", "False", ")", "\n", "\n", "", "", "else", ":", "\n", "            ", "if", "self", ".", "quantize", "==", "'search'", ":", "\n", "# r0 = 1/3; r1 = 1/3; r2 = 1/3", "\n", "                ", "r0", "=", "self", ".", "_args", ".", "alpha_weight", "\n", "r1", "=", "self", ".", "_args", ".", "beta_weight", "\n", "r2", "=", "self", ".", "_args", ".", "ratio_weight", "\n", "", "else", ":", "\n", "# r0 = 1/2; r2 = 1/2", "\n", "                ", "r0", "=", "self", ".", "_args", ".", "alpha_weight", "\n", "r2", "=", "self", ".", "_args", ".", "ratio_weight", "\n", "\n", "", "flops", "=", "flops", "+", "r0", "*", "self", ".", "model", ".", "module", ".", "forward_flops", "(", "(", "3", ",", "256", ",", "256", ")", ",", "alpha", "=", "True", ",", "beta", "=", "False", ",", "ratio", "=", "False", ")", "\n", "\n", "if", "self", ".", "quantize", "==", "'search'", ":", "\n", "                ", "flops", "=", "flops", "+", "r1", "*", "self", ".", "model", ".", "module", ".", "forward_flops", "(", "(", "3", ",", "256", ",", "256", ")", ",", "alpha", "=", "False", ",", "beta", "=", "True", ",", "ratio", "=", "False", ")", "\n", "\n", "", "flops", "=", "flops", "+", "r2", "*", "self", ".", "model", ".", "module", ".", "forward_flops", "(", "(", "3", ",", "256", ",", "256", ")", ",", "alpha", "=", "False", ",", "beta", "=", "False", ",", "ratio", "=", "True", ")", "\n", "\n", "", "self", ".", "flops_supernet", "=", "flops", "\n", "loss_flops", "=", "self", ".", "flops_weight", "*", "flops", "\n", "\n", "# print(flops, loss_flops, loss)", "\n", "return", "loss", ",", "loss_flops", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.architect._concat": [[14, 16], ["torch.cat", "torch.cat", "x.view"], "function", ["None"], ["def", "_concat", "(", "xs", ")", ":", "\n", "    ", "return", "torch", ".", "cat", "(", "[", "x", ".", "view", "(", "-", "1", ")", "for", "x", "in", "xs", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_eval.MixedOp.__init__": [[66, 70], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.Cutout.__init__"], ["        ", "super", "(", "MixedOp", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_op", "=", "OPS", "[", "PRIMITIVES", "[", "op_idx", "]", "]", "(", "C_in", ",", "C_out", ",", "stride", ",", "slimmable", "=", "False", ",", "width_mult_list", "=", "[", "1.", "]", ")", "\n", "self", ".", "quantize", "=", "quantize", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_eval.MixedOp.forward": [[71, 73], ["model_eval.MixedOp._op"], "methods", ["None"], ["        ", "return", "self", ".", "_op", "(", "x", ",", "quantize", "=", "self", ".", "quantize", ")", "\n", "\n", "", "def", "forward_latency", "(", "self", ",", "size", ")", ":", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_eval.MixedOp.forward_latency": [[74, 78], ["model_eval.MixedOp._op.forward_latency"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.MixedOp.forward_latency"], ["# int: force #channel; tensor: arch_ratio; float(<=1): force width", "\n", "        ", "latency", ",", "size_out", "=", "self", ".", "_op", ".", "forward_latency", "(", "size", ")", "\n", "return", "latency", ",", "size_out", "\n", "\n", "", "def", "forward_flops", "(", "self", ",", "size", ")", ":", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_eval.MixedOp.forward_flops": [[79, 84], ["model_eval.MixedOp._op.forward_flops"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.Cell.forward_flops"], ["# int: force #channel; tensor: arch_ratio; float(<=1): force width", "\n", "        ", "flops", ",", "size_out", "=", "self", ".", "_op", ".", "forward_flops", "(", "size", ",", "quantize", "=", "self", ".", "quantize", ")", "\n", "\n", "return", "flops", ",", "size_out", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_eval.SingleOp.__init__": [[86, 90], ["torch.Module.__init__", "op"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.Cutout.__init__"], ["    ", "def", "__init__", "(", "self", ",", "op", ",", "C_in", ",", "C_out", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "quantize", "=", "True", ")", ":", "\n", "        ", "super", "(", "SingleOp", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_op", "=", "op", "(", "C_in", ",", "C_out", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "slimmable", "=", "False", ",", "width_mult_list", "=", "[", "1.", "]", ")", "\n", "self", ".", "quantize", "=", "quantize", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_eval.SingleOp.forward": [[91, 95], ["model_eval.SingleOp._op"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "result", "=", "self", ".", "_op", "(", "x", ",", "quantize", "=", "self", ".", "quantize", ")", "\n", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_eval.SingleOp.forward_flops": [[96, 100], ["model_eval.SingleOp._op.forward_flops"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.Cell.forward_flops"], ["", "def", "forward_flops", "(", "self", ",", "size", ")", ":", "\n", "        ", "flops", ",", "size_out", "=", "self", ".", "_op", ".", "forward_flops", "(", "size", ",", "quantize", "=", "self", ".", "quantize", ")", "\n", "\n", "return", "flops", ",", "size_out", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_eval.NAS_GAN_Eval.__init__": [[127, 168], ["torch.Module.__init__", "torch.softmax().argmax", "torch.softmax().argmax", "torch.softmax().argmax", "torch.softmax().argmax", "torch.softmax().argmax", "torch.softmax().argmax", "operations.Conv", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "operations.Conv", "operations.Conv", "operations.Conv", "operations.Conv", "operations.Conv", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Tanh", "torch.Tanh", "torch.Tanh", "model_eval.NAS_GAN_Eval.cells.append", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax().argmax", "torch.softmax().argmax", "torch.softmax().argmax", "torch.softmax", "torch.softmax", "torch.softmax", "model_eval.Cell", "torch.softmax", "torch.softmax", "torch.softmax", "range", "range", "range", "range"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.Cutout.__init__"], ["            ", "quantize_list", "=", "[", "False", "for", "_", "in", "range", "(", "layers", ")", "]", "\n", "quantize_list_sh", "=", "[", "False", "for", "_", "in", "range", "(", "beta_sh", ".", "size", "(", "0", ")", ")", "]", "\n", "\n", "", "ratio_list", "=", "F", ".", "softmax", "(", "ratio", ",", "dim", "=", "-", "1", ")", ".", "argmax", "(", "-", "1", ")", "\n", "ratio_list_sh", "=", "F", ".", "softmax", "(", "ratio_sh", ",", "dim", "=", "-", "1", ")", ".", "argmax", "(", "-", "1", ")", "\n", "\n", "# Construct Stem", "\n", "self", ".", "stem", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "stem", ".", "append", "(", "SingleOp", "(", "ConvNorm", ",", "3", ",", "make_divisible", "(", "64", "*", "width_mult_list_sh", "[", "ratio_list_sh", "[", "0", "]", "]", ")", ",", "7", ",", "quantize", "=", "quantize_list_sh", "[", "0", "]", ")", ")", "\n", "\n", "in_features", "=", "64", "\n", "out_features", "=", "in_features", "*", "2", "\n", "\n", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "            ", "self", ".", "stem", ".", "append", "(", "SingleOp", "(", "ConvNorm", ",", "make_divisible", "(", "in_features", "*", "width_mult_list_sh", "[", "ratio_list_sh", "[", "i", "]", "]", ")", ",", "make_divisible", "(", "out_features", "*", "width_mult_list_sh", "[", "ratio_list_sh", "[", "i", "+", "1", "]", "]", ")", ",", "3", ",", "stride", "=", "2", ",", "quantize", "=", "quantize_list_sh", "[", "1", "+", "i", "]", ")", ")", "\n", "in_features", "=", "out_features", "\n", "out_features", "=", "in_features", "*", "2", "\n", "\n", "# Construct Blocks", "\n", "", "self", ".", "cells", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "layers", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "self", ".", "cells", ".", "append", "(", "MixedOp", "(", "make_divisible", "(", "in_features", "*", "width_mult_list_sh", "[", "ratio_list_sh", "[", "self", ".", "len_stem", "-", "1", "]", "]", ")", ",", "make_divisible", "(", "in_features", "*", "width_mult_list", "[", "ratio_list", "[", "i", "]", "]", ")", ",", "op_idx_list", "[", "i", "]", ",", "quantize_list", "[", "i", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "cells", ".", "append", "(", "MixedOp", "(", "make_divisible", "(", "in_features", "*", "width_mult_list", "[", "ratio_list", "[", "i", "-", "1", "]", "]", ")", ",", "make_divisible", "(", "in_features", "*", "width_mult_list", "[", "ratio_list", "[", "i", "]", "]", ")", ",", "op_idx_list", "[", "i", "]", ",", "quantize_list", "[", "i", "]", ")", ")", "\n", "\n", "# Construct Header", "\n", "", "", "self", ".", "header", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "out_features", "=", "in_features", "//", "2", "\n", "\n", "self", ".", "header", ".", "append", "(", "SingleOp", "(", "ConvTranspose2dNorm", ",", "make_divisible", "(", "in_features", "*", "width_mult_list", "[", "ratio_list", "[", "self", ".", "_layers", "-", "1", "]", "]", ")", ",", "make_divisible", "(", "out_features", "*", "width_mult_list_sh", "[", "ratio_list_sh", "[", "self", ".", "len_stem", "]", "]", ")", ",", "3", ",", "stride", "=", "2", ",", "quantize", "=", "quantize_list_sh", "[", "self", ".", "len_stem", "]", ")", ")", "\n", "\n", "in_features", "=", "out_features", "\n", "out_features", "=", "in_features", "//", "2", "\n", "\n", "self", ".", "header", ".", "append", "(", "SingleOp", "(", "ConvTranspose2dNorm", ",", "make_divisible", "(", "in_features", "*", "width_mult_list_sh", "[", "ratio_list_sh", "[", "self", ".", "len_stem", "]", "]", ")", ",", "make_divisible", "(", "out_features", "*", "width_mult_list_sh", "[", "ratio_list_sh", "[", "self", ".", "len_stem", "+", "1", "]", "]", ")", ",", "3", ",", "stride", "=", "2", ",", "quantize", "=", "quantize_list_sh", "[", "self", ".", "len_stem", "+", "1", "]", ")", ")", "\n", "\n", "self", ".", "header", ".", "append", "(", "SingleOp", "(", "Conv", ",", "make_divisible", "(", "64", "*", "width_mult_list_sh", "[", "ratio_list_sh", "[", "self", ".", "len_stem", "+", "1", "]", "]", ")", ",", "3", ",", "7", ",", "quantize", "=", "quantize_list_sh", "[", "self", ".", "len_stem", "+", "2", "]", ")", ")", "\n", "\n", "self", ".", "tanh", "=", "nn", ".", "Tanh", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_eval.NAS_GAN_Eval.forward": [[170, 188], ["model_eval.NAS_GAN_Eval.conv_first", "enumerate", "model_eval.NAS_GAN_Eval.trunk_conv", "model_eval.NAS_GAN_Eval.lrelu", "model_eval.NAS_GAN_Eval.lrelu", "model_eval.NAS_GAN_Eval.conv_last", "cell", "model_eval.NAS_GAN_Eval.upconv1", "model_eval.NAS_GAN_Eval.upconv2", "model_eval.NAS_GAN_Eval.lrelu", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "model_eval.NAS_GAN_Eval.HRconv", "model_eval.NAS_GAN_Eval.tanh"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "\n", "        ", "out", "=", "input", "\n", "for", "i", ",", "module", "in", "enumerate", "(", "self", ".", "stem", ")", ":", "\n", "            ", "out", "=", "module", "(", "out", ")", "\n", "\n", "", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "            ", "out", "=", "cell", "(", "out", ")", "\n", "\n", "", "for", "i", ",", "module", "in", "enumerate", "(", "self", ".", "header", ")", ":", "\n", "            ", "out", "=", "module", "(", "out", ")", "\n", "\n", "", "out", "=", "self", ".", "tanh", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n", "\n", "", "def", "forward_flops", "(", "self", ",", "size", ")", ":", "\n", "        ", "flops_total", "=", "[", "]", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_eval.NAS_GAN_Eval.forward_flops": [[190, 218], ["model_eval.NAS_GAN_Eval.conv_first.forward_flops", "flops_total.append", "enumerate", "model_eval.NAS_GAN_Eval.trunk_conv.forward_flops", "flops_total.append", "model_eval.NAS_GAN_Eval.upconv1.forward_flops", "flops_total.append", "model_eval.NAS_GAN_Eval.upconv2.forward_flops", "flops_total.append", "model_eval.NAS_GAN_Eval.HRconv.forward_flops", "flops_total.append", "model_eval.NAS_GAN_Eval.conv_last.forward_flops", "flops_total.append", "sum", "cell.forward_flops", "flops_total.append"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.Cell.forward_flops", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.Cell.forward_flops", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.Cell.forward_flops", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.Cell.forward_flops", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.Cell.forward_flops", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.Cell.forward_flops", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.Cell.forward_flops"], ["for", "i", ",", "module", "in", "enumerate", "(", "self", ".", "stem", ")", ":", "\n", "            ", "flops", ",", "size", "=", "module", ".", "forward_flops", "(", "size", ")", "\n", "flops_total", ".", "append", "(", "flops", ")", "\n", "\n", "", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "            ", "flops", ",", "size", "=", "cell", ".", "forward_flops", "(", "size", ")", "\n", "flops_total", ".", "append", "(", "flops", ")", "\n", "\n", "", "for", "i", ",", "module", "in", "enumerate", "(", "self", ".", "header", ")", ":", "\n", "            ", "flops", ",", "size", "=", "module", ".", "forward_flops", "(", "size", ")", "\n", "flops_total", ".", "append", "(", "flops", ")", "\n", "\n", "", "return", "sum", "(", "flops_total", ")", "\n", "\n", "\n", "", "", ""]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_eval.make_divisible": [[17, 31], ["max", "int"], "function", ["None"], ["    ", "\"\"\"\n    forked from slim:\n    https://github.com/tensorflow/models/blob/\\\n    0344c5503ee55e24f0de7f37336a6e08f10976fd/\\\n    research/slim/nets/mobilenet/mobilenet.py#L62-L69\n    \"\"\"", "\n", "if", "min_value", "is", "None", ":", "\n", "        ", "min_value", "=", "divisor", "\n", "", "new_v", "=", "max", "(", "min_value", ",", "int", "(", "v", "+", "divisor", "/", "2", ")", "//", "divisor", "*", "divisor", ")", "\n", "# Make sure that round down does not go down by more than 10%.", "\n", "if", "new_v", "<", "0.9", "*", "v", ":", "\n", "        ", "new_v", "+=", "divisor", "\n", "", "return", "new_v", "\n", "\n", "# https://github.com/YongfeiYan/Gumbel_Softmax_VAE/blob/master/gumbel_softmax_vae.py", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_eval.sample_gumbel": [[33, 37], ["torch.rand", "torch.rand", "torch.rand", "U.cuda.cuda", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log"], "function", ["None"], ["    ", "U", "=", "torch", ".", "rand", "(", "shape", ")", "\n", "U", "=", "U", ".", "cuda", "(", ")", "\n", "return", "-", "torch", ".", "log", "(", "-", "torch", ".", "log", "(", "U", "+", "eps", ")", "+", "eps", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_eval.gumbel_softmax_sample": [[39, 42], ["torch.softmax", "model_eval.sample_gumbel", "logits.size"], "function", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.sample_gumbel"], ["    ", "y", "=", "logits", "+", "sample_gumbel", "(", "logits", ".", "size", "(", ")", ")", "\n", "return", "F", ".", "softmax", "(", "y", "/", "temperature", ",", "dim", "=", "-", "1", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_eval.gumbel_softmax": [[44, 63], ["model_eval.gumbel_softmax_sample", "gumbel_softmax_sample.size", "gumbel_softmax_sample.max", "torch.zeros_like().view", "torch.zeros_like().view", "torch.zeros_like().view", "y_hard.view.scatter_", "y_hard.view.view", "ind.view", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like"], "function", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.gumbel_softmax_sample"], ["    ", "\"\"\"\n    ST-gumple-softmax\n    input: [*, n_class]\n    return: flatten --> [*, n_class] an one-hot vector\n    \"\"\"", "\n", "y", "=", "gumbel_softmax_sample", "(", "logits", ",", "temperature", ")", "\n", "\n", "if", "not", "hard", ":", "\n", "        ", "return", "y", "\n", "\n", "", "shape", "=", "y", ".", "size", "(", ")", "\n", "_", ",", "ind", "=", "y", ".", "max", "(", "dim", "=", "-", "1", ")", "\n", "y_hard", "=", "torch", ".", "zeros_like", "(", "y", ")", ".", "view", "(", "-", "1", ",", "shape", "[", "-", "1", "]", ")", "\n", "y_hard", ".", "scatter_", "(", "1", ",", "ind", ".", "view", "(", "-", "1", ",", "1", ")", ",", "1", ")", "\n", "y_hard", "=", "y_hard", ".", "view", "(", "*", "shape", ")", "\n", "# Set gradients w.r.t. y_hard gradients w.r.t. y", "\n", "y_hard", "=", "(", "y_hard", "-", "y", ")", ".", "detach", "(", ")", "+", "y", "\n", "return", "y_hard", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.Conv.__init__": [[64, 92], ["torch.Module.__init__", "int", "type", "slimmable_ops.USConv2d", "Conv2d", "numpy.ceil"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.Cutout.__init__"], ["        ", "super", "(", "Conv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "C_in", "=", "C_in", "\n", "self", ".", "C_out", "=", "C_out", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "assert", "stride", "in", "[", "1", ",", "2", "]", "\n", "self", ".", "stride", "=", "stride", "\n", "if", "padding", "is", "None", ":", "\n", "# assume h_out = h_in / s", "\n", "            ", "self", ".", "padding", "=", "int", "(", "np", ".", "ceil", "(", "(", "dilation", "*", "(", "kernel_size", "-", "1", ")", "+", "1", "-", "stride", ")", "/", "2.", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "padding", "=", "padding", "\n", "", "self", ".", "dilation", "=", "dilation", "\n", "assert", "type", "(", "groups", ")", "==", "int", "\n", "if", "kernel_size", "==", "1", ":", "\n", "            ", "self", ".", "groups", "=", "1", "\n", "", "else", ":", "\n", "            ", "self", ".", "groups", "=", "groups", "\n", "", "self", ".", "bias", "=", "bias", "\n", "self", ".", "slimmable", "=", "slimmable", "\n", "self", ".", "width_mult_list", "=", "width_mult_list", "\n", "self", ".", "ratio", "=", "(", "1.", ",", "1.", ")", "\n", "\n", "if", "slimmable", ":", "\n", "            ", "self", ".", "conv", "=", "USConv2d", "(", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "padding", "=", "self", ".", "padding", ",", "dilation", "=", "dilation", ",", "groups", "=", "self", ".", "groups", ",", "bias", "=", "bias", ",", "width_mult_list", "=", "width_mult_list", ")", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv", "=", "Conv2d", "(", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "padding", "=", "self", ".", "padding", ",", "dilation", "=", "dilation", ",", "groups", "=", "self", ".", "groups", ",", "bias", "=", "bias", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.Conv.set_ratio": [[94, 99], ["operations_bk.Conv.conv.set_ratio", "len"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.DwsBlock.set_ratio"], ["        ", "assert", "self", ".", "slimmable", "\n", "assert", "len", "(", "ratio", ")", "==", "2", "\n", "self", ".", "ratio", "=", "ratio", "\n", "self", ".", "conv", ".", "set_ratio", "(", "ratio", ")", "\n", "\n", "", "@", "staticmethod", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.Conv._flops": [[100, 105], ["operations_bk.Conv", "thop.profile", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["None"], ["def", "_flops", "(", "h", ",", "w", ",", "C_in", ",", "C_out", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "None", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ":", "\n", "        ", "layer", "=", "Conv", "(", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "groups", ",", "bias", ",", "slimmable", "=", "False", ")", "\n", "flops", ",", "params", "=", "profile", "(", "layer", ",", "inputs", "=", "(", "torch", ".", "randn", "(", "1", ",", "C_in", ",", "h", ",", "w", ")", ",", ")", ",", "custom_ops", "=", "custom_ops", ")", "\n", "return", "flops", "\n", "\n", "", "@", "staticmethod", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.Conv._latency": [[106, 111], ["operations_bk.Conv", "compute_latency"], "methods", ["None"], ["def", "_latency", "(", "h", ",", "w", ",", "C_in", ",", "C_out", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "None", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ":", "\n", "        ", "layer", "=", "Conv", "(", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "groups", ",", "bias", ",", "slimmable", "=", "False", ")", "\n", "latency", "=", "compute_latency", "(", "layer", ",", "(", "1", ",", "C_in", ",", "h", ",", "w", ")", ")", "\n", "return", "latency", "\n", "\n", "", "def", "forward_latency", "(", "self", ",", "size", ")", ":", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.Conv.forward_latency": [[112, 133], ["slimmable_ops.make_divisible", "print", "operations_bk.Conv._latency", "numpy.save", "slimmable_ops.make_divisible"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.make_divisible", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.DwsBlock._latency", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.save", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.make_divisible"], ["        ", "c_in", ",", "h_in", ",", "w_in", "=", "size", "\n", "if", "self", ".", "slimmable", ":", "\n", "            ", "assert", "c_in", "==", "make_divisible", "(", "self", ".", "C_in", "*", "self", ".", "ratio", "[", "0", "]", ")", ",", "\"c_in %d, self.C_in * self.ratio[0] %d\"", "%", "(", "c_in", ",", "self", ".", "C_in", "*", "self", ".", "ratio", "[", "0", "]", ")", "\n", "c_out", "=", "make_divisible", "(", "self", ".", "C_out", "*", "self", ".", "ratio", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "assert", "c_in", "==", "self", ".", "C_in", ",", "\"c_in %d, self.C_in %d\"", "%", "(", "c_in", ",", "self", ".", "C_in", ")", "\n", "c_out", "=", "self", ".", "C_out", "\n", "", "if", "self", ".", "stride", "==", "1", ":", "\n", "            ", "h_out", "=", "h_in", ";", "w_out", "=", "w_in", "\n", "", "else", ":", "\n", "            ", "h_out", "=", "h_in", "//", "2", ";", "w_out", "=", "w_in", "//", "2", "\n", "", "name", "=", "\"Conv_H%d_W%d_Cin%d_Cout%d_kernel%d_stride%d\"", "%", "(", "h_in", ",", "w_in", ",", "c_in", ",", "c_out", ",", "self", ".", "kernel_size", ",", "self", ".", "stride", ")", "\n", "if", "name", "in", "latency_lookup_table", ":", "\n", "            ", "latency", "=", "latency_lookup_table", "[", "name", "]", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"not found in latency_lookup_table:\"", ",", "name", ")", "\n", "latency", "=", "Conv", ".", "_latency", "(", "h_in", ",", "w_in", ",", "c_in", ",", "c_out", ",", "self", ".", "kernel_size", ",", "self", ".", "stride", ",", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "groups", ",", "self", ".", "bias", ")", "\n", "latency_lookup_table", "[", "name", "]", "=", "latency", "\n", "np", ".", "save", "(", "table_file_name", ",", "latency_lookup_table", ")", "\n", "", "return", "latency", ",", "(", "c_out", ",", "h_out", ",", "w_out", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.Conv.forward_flops": [[135, 159], ["slimmable_ops.make_divisible", "print", "operations_bk.Conv._flops", "numpy.save", "slimmable_ops.make_divisible"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.make_divisible", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.DwsBlock._flops", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.save", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.make_divisible"], ["        ", "c_in", ",", "h_in", ",", "w_in", "=", "size", "\n", "if", "self", ".", "slimmable", ":", "\n", "            ", "assert", "c_in", "==", "make_divisible", "(", "self", ".", "C_in", "*", "self", ".", "ratio", "[", "0", "]", ")", ",", "\"c_in %d, self.C_in * self.ratio[0] %d\"", "%", "(", "c_in", ",", "self", ".", "C_in", "*", "self", ".", "ratio", "[", "0", "]", ")", "\n", "c_out", "=", "make_divisible", "(", "self", ".", "C_out", "*", "self", ".", "ratio", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "assert", "c_in", "==", "self", ".", "C_in", ",", "\"c_in %d, self.C_in %d\"", "%", "(", "c_in", ",", "self", ".", "C_in", ")", "\n", "c_out", "=", "self", ".", "C_out", "\n", "", "if", "self", ".", "stride", "==", "1", ":", "\n", "            ", "h_out", "=", "h_in", ";", "w_out", "=", "w_in", "\n", "", "else", ":", "\n", "            ", "h_out", "=", "h_in", "//", "2", ";", "w_out", "=", "w_in", "//", "2", "\n", "", "name", "=", "\"Conv_H%d_W%d_Cin%d_Cout%d_kernel%d_stride%d\"", "%", "(", "h_in", ",", "w_in", ",", "c_in", ",", "c_out", ",", "self", ".", "kernel_size", ",", "self", ".", "stride", ")", "\n", "if", "name", "in", "flops_lookup_table", ":", "\n", "            ", "flops", "=", "flops_lookup_table", "[", "name", "]", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"not found in flops_lookup_table:\"", ",", "name", ")", "\n", "flops", "=", "Conv", ".", "_flops", "(", "h_in", ",", "w_in", ",", "c_in", ",", "c_out", ",", "self", ".", "kernel_size", ",", "self", ".", "stride", ",", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "groups", ",", "self", ".", "bias", ")", "\n", "flops_lookup_table", "[", "name", "]", "=", "flops", "\n", "np", ".", "save", "(", "table_file_name", ",", "flops_lookup_table", ")", "\n", "# if quantize:", "\n", "#     flops /= 4", "\n", "\n", "", "return", "flops", ",", "(", "c_out", ",", "h_out", ",", "w_out", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.Conv.forward": [[161, 164], ["operations_bk.Conv.conv"], "methods", ["None"], ["        ", "x", "=", "self", ".", "conv", "(", "x", ",", "quantize", "=", "quantize", ")", "\n", "return", "x", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.ConvNorm.__init__": [[171, 203], ["torch.Module.__init__", "int", "type", "slimmable_ops.USConv2d", "slimmable_ops.USBatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "Conv2d", "BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "numpy.ceil"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.Cutout.__init__"], ["        ", "super", "(", "ConvNorm", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "C_in", "=", "C_in", "\n", "self", ".", "C_out", "=", "C_out", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "assert", "stride", "in", "[", "1", ",", "2", "]", "\n", "self", ".", "stride", "=", "stride", "\n", "if", "padding", "is", "None", ":", "\n", "# assume h_out = h_in / s", "\n", "            ", "self", ".", "padding", "=", "int", "(", "np", ".", "ceil", "(", "(", "dilation", "*", "(", "kernel_size", "-", "1", ")", "+", "1", "-", "stride", ")", "/", "2.", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "padding", "=", "padding", "\n", "", "self", ".", "dilation", "=", "dilation", "\n", "assert", "type", "(", "groups", ")", "==", "int", "\n", "if", "kernel_size", "==", "1", ":", "\n", "            ", "self", ".", "groups", "=", "1", "\n", "", "else", ":", "\n", "            ", "self", ".", "groups", "=", "groups", "\n", "", "self", ".", "bias", "=", "bias", "\n", "self", ".", "slimmable", "=", "slimmable", "\n", "self", ".", "width_mult_list", "=", "width_mult_list", "\n", "self", ".", "ratio", "=", "(", "1.", ",", "1.", ")", "\n", "\n", "if", "slimmable", ":", "\n", "            ", "self", ".", "conv", "=", "USConv2d", "(", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "padding", "=", "self", ".", "padding", ",", "dilation", "=", "dilation", ",", "groups", "=", "self", ".", "groups", ",", "bias", "=", "bias", ",", "width_mult_list", "=", "width_mult_list", ")", "\n", "self", ".", "bn", "=", "USBatchNorm2d", "(", "C_out", ",", "width_mult_list", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv", "=", "Conv2d", "(", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "padding", "=", "self", ".", "padding", ",", "dilation", "=", "dilation", ",", "groups", "=", "self", ".", "groups", ",", "bias", "=", "bias", ")", "\n", "self", ".", "bn", "=", "BatchNorm2d", "(", "C_out", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.ConvNorm.set_ratio": [[205, 211], ["operations_bk.ConvNorm.conv.set_ratio", "operations_bk.ConvNorm.bn.set_ratio", "len"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.DwsBlock.set_ratio", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.DwsBlock.set_ratio"], ["        ", "assert", "self", ".", "slimmable", "\n", "assert", "len", "(", "ratio", ")", "==", "2", "\n", "self", ".", "ratio", "=", "ratio", "\n", "self", ".", "conv", ".", "set_ratio", "(", "ratio", ")", "\n", "self", ".", "bn", ".", "set_ratio", "(", "ratio", "[", "1", "]", ")", "\n", "\n", "", "@", "staticmethod", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.ConvNorm._flops": [[212, 217], ["operations_bk.ConvNorm", "thop.profile", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["None"], ["def", "_flops", "(", "h", ",", "w", ",", "C_in", ",", "C_out", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "None", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ":", "\n", "        ", "layer", "=", "ConvNorm", "(", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "groups", ",", "bias", ",", "slimmable", "=", "False", ")", "\n", "flops", ",", "params", "=", "profile", "(", "layer", ",", "inputs", "=", "(", "torch", ".", "randn", "(", "1", ",", "C_in", ",", "h", ",", "w", ")", ",", ")", ",", "custom_ops", "=", "custom_ops", ")", "\n", "return", "flops", "\n", "\n", "", "@", "staticmethod", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.ConvNorm._latency": [[218, 223], ["operations_bk.ConvNorm", "compute_latency"], "methods", ["None"], ["def", "_latency", "(", "h", ",", "w", ",", "C_in", ",", "C_out", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "None", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ":", "\n", "        ", "layer", "=", "ConvNorm", "(", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "groups", ",", "bias", ",", "slimmable", "=", "False", ")", "\n", "latency", "=", "compute_latency", "(", "layer", ",", "(", "1", ",", "C_in", ",", "h", ",", "w", ")", ")", "\n", "return", "latency", "\n", "\n", "", "def", "forward_latency", "(", "self", ",", "size", ")", ":", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.ConvNorm.forward_latency": [[224, 245], ["slimmable_ops.make_divisible", "print", "operations_bk.ConvNorm._latency", "numpy.save", "slimmable_ops.make_divisible"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.make_divisible", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.DwsBlock._latency", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.save", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.make_divisible"], ["        ", "c_in", ",", "h_in", ",", "w_in", "=", "size", "\n", "if", "self", ".", "slimmable", ":", "\n", "            ", "assert", "c_in", "==", "make_divisible", "(", "self", ".", "C_in", "*", "self", ".", "ratio", "[", "0", "]", ")", ",", "\"c_in %d, self.C_in * self.ratio[0] %d\"", "%", "(", "c_in", ",", "self", ".", "C_in", "*", "self", ".", "ratio", "[", "0", "]", ")", "\n", "c_out", "=", "make_divisible", "(", "self", ".", "C_out", "*", "self", ".", "ratio", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "assert", "c_in", "==", "self", ".", "C_in", ",", "\"c_in %d, self.C_in %d\"", "%", "(", "c_in", ",", "self", ".", "C_in", ")", "\n", "c_out", "=", "self", ".", "C_out", "\n", "", "if", "self", ".", "stride", "==", "1", ":", "\n", "            ", "h_out", "=", "h_in", ";", "w_out", "=", "w_in", "\n", "", "else", ":", "\n", "            ", "h_out", "=", "h_in", "//", "2", ";", "w_out", "=", "w_in", "//", "2", "\n", "", "name", "=", "\"ConvNorm_H%d_W%d_Cin%d_Cout%d_kernel%d_stride%d\"", "%", "(", "h_in", ",", "w_in", ",", "c_in", ",", "c_out", ",", "self", ".", "kernel_size", ",", "self", ".", "stride", ")", "\n", "if", "name", "in", "latency_lookup_table", ":", "\n", "            ", "latency", "=", "latency_lookup_table", "[", "name", "]", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"not found in latency_lookup_table:\"", ",", "name", ")", "\n", "latency", "=", "ConvNorm", ".", "_latency", "(", "h_in", ",", "w_in", ",", "c_in", ",", "c_out", ",", "self", ".", "kernel_size", ",", "self", ".", "stride", ",", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "groups", ",", "self", ".", "bias", ")", "\n", "latency_lookup_table", "[", "name", "]", "=", "latency", "\n", "np", ".", "save", "(", "table_file_name", ",", "latency_lookup_table", ")", "\n", "", "return", "latency", ",", "(", "c_out", ",", "h_out", ",", "w_out", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.ConvNorm.forward_flops": [[247, 271], ["slimmable_ops.make_divisible", "print", "operations_bk.ConvNorm._flops", "numpy.save", "slimmable_ops.make_divisible"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.make_divisible", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.DwsBlock._flops", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.save", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.make_divisible"], ["        ", "c_in", ",", "h_in", ",", "w_in", "=", "size", "\n", "if", "self", ".", "slimmable", ":", "\n", "            ", "assert", "c_in", "==", "make_divisible", "(", "self", ".", "C_in", "*", "self", ".", "ratio", "[", "0", "]", ")", ",", "\"c_in %d, self.C_in * self.ratio[0] %d\"", "%", "(", "c_in", ",", "self", ".", "C_in", "*", "self", ".", "ratio", "[", "0", "]", ")", "\n", "c_out", "=", "make_divisible", "(", "self", ".", "C_out", "*", "self", ".", "ratio", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "assert", "c_in", "==", "self", ".", "C_in", ",", "\"c_in %d, self.C_in %d\"", "%", "(", "c_in", ",", "self", ".", "C_in", ")", "\n", "c_out", "=", "self", ".", "C_out", "\n", "", "if", "self", ".", "stride", "==", "1", ":", "\n", "            ", "h_out", "=", "h_in", ";", "w_out", "=", "w_in", "\n", "", "else", ":", "\n", "            ", "h_out", "=", "h_in", "//", "2", ";", "w_out", "=", "w_in", "//", "2", "\n", "", "name", "=", "\"ConvNorm_H%d_W%d_Cin%d_Cout%d_kernel%d_stride%d\"", "%", "(", "h_in", ",", "w_in", ",", "c_in", ",", "c_out", ",", "self", ".", "kernel_size", ",", "self", ".", "stride", ")", "\n", "if", "name", "in", "flops_lookup_table", ":", "\n", "            ", "flops", "=", "flops_lookup_table", "[", "name", "]", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"not found in flops_lookup_table:\"", ",", "name", ")", "\n", "flops", "=", "ConvNorm", ".", "_flops", "(", "h_in", ",", "w_in", ",", "c_in", ",", "c_out", ",", "self", ".", "kernel_size", ",", "self", ".", "stride", ",", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "groups", ",", "self", ".", "bias", ")", "\n", "flops_lookup_table", "[", "name", "]", "=", "flops", "\n", "np", ".", "save", "(", "table_file_name", ",", "flops_lookup_table", ")", "\n", "# if quantize:", "\n", "#     flops /= 4", "\n", "\n", "", "return", "flops", ",", "(", "c_out", ",", "h_out", ",", "w_out", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.ConvNorm.forward": [[273, 279], ["operations_bk.ConvNorm.conv", "operations_bk.ConvNorm.relu", "operations_bk.ConvNorm.bn"], "methods", ["None"], ["        ", "x", "=", "self", ".", "conv", "(", "x", ",", "quantize", "=", "quantize", ")", "\n", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "return", "x", "\n", "\n", "\n", "", "", "class", "ConvTranspose2dNorm", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.ConvTranspose2dNorm.__init__": [[286, 314], ["torch.Module.__init__", "type", "slimmable_ops.USConvTranspose2d", "slimmable_ops.USBatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "ConvTranspose2d", "BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.Cutout.__init__"], ["self", ".", "C_in", "=", "C_in", "\n", "self", ".", "C_out", "=", "C_out", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "assert", "stride", "in", "[", "1", ",", "2", "]", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "padding", "=", "1", "\n", "self", ".", "dilation", "=", "dilation", "\n", "assert", "type", "(", "groups", ")", "==", "int", "\n", "if", "kernel_size", "==", "1", ":", "\n", "            ", "self", ".", "groups", "=", "1", "\n", "", "else", ":", "\n", "            ", "self", ".", "groups", "=", "groups", "\n", "", "self", ".", "bias", "=", "bias", "\n", "self", ".", "slimmable", "=", "slimmable", "\n", "self", ".", "width_mult_list", "=", "width_mult_list", "\n", "self", ".", "ratio", "=", "(", "1.", ",", "1.", ")", "\n", "\n", "if", "slimmable", ":", "\n", "            ", "self", ".", "conv", "=", "USConvTranspose2d", "(", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "padding", "=", "self", ".", "padding", ",", "output_padding", "=", "1", ",", "dilation", "=", "dilation", ",", "groups", "=", "self", ".", "groups", ",", "bias", "=", "bias", ",", "width_mult_list", "=", "width_mult_list", ")", "\n", "self", ".", "bn", "=", "USBatchNorm2d", "(", "C_out", ",", "width_mult_list", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv", "=", "ConvTranspose2d", "(", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "padding", "=", "self", ".", "padding", ",", "output_padding", "=", "1", ",", "dilation", "=", "dilation", ",", "groups", "=", "self", ".", "groups", ",", "bias", "=", "bias", ")", "\n", "self", ".", "bn", "=", "BatchNorm2d", "(", "C_out", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "\n", "", "", "def", "set_ratio", "(", "self", ",", "ratio", ")", ":", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.ConvTranspose2dNorm.set_ratio": [[316, 322], ["operations_bk.ConvTranspose2dNorm.conv.set_ratio", "operations_bk.ConvTranspose2dNorm.bn.set_ratio", "len"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.DwsBlock.set_ratio", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.DwsBlock.set_ratio"], ["assert", "len", "(", "ratio", ")", "==", "2", "\n", "self", ".", "ratio", "=", "ratio", "\n", "self", ".", "conv", ".", "set_ratio", "(", "ratio", ")", "\n", "self", ".", "bn", ".", "set_ratio", "(", "ratio", "[", "1", "]", ")", "\n", "\n", "", "@", "staticmethod", "\n", "def", "_flops", "(", "h", ",", "w", ",", "C_in", ",", "C_out", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "None", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ":", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.ConvTranspose2dNorm._flops": [[323, 328], ["operations_bk.ConvTranspose2dNorm", "thop.profile", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["None"], ["        ", "layer", "=", "ConvTranspose2dNorm", "(", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "groups", ",", "bias", ",", "slimmable", "=", "False", ")", "\n", "flops", ",", "params", "=", "profile", "(", "layer", ",", "inputs", "=", "(", "torch", ".", "randn", "(", "1", ",", "C_in", ",", "h", ",", "w", ")", ",", ")", ",", "custom_ops", "=", "custom_ops", ")", "\n", "return", "flops", "\n", "\n", "", "@", "staticmethod", "\n", "def", "_latency", "(", "h", ",", "w", ",", "C_in", ",", "C_out", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "None", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ":", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.ConvTranspose2dNorm._latency": [[329, 334], ["operations_bk.ConvTranspose2dNorm", "compute_latency"], "methods", ["None"], ["        ", "layer", "=", "ConvTranspose2dNorm", "(", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "groups", ",", "bias", ",", "slimmable", "=", "False", ")", "\n", "latency", "=", "compute_latency", "(", "layer", ",", "(", "1", ",", "C_in", ",", "h", ",", "w", ")", ")", "\n", "return", "latency", "\n", "\n", "", "def", "forward_latency", "(", "self", ",", "size", ")", ":", "\n", "        ", "c_in", ",", "h_in", ",", "w_in", "=", "size", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.ConvTranspose2dNorm.forward_latency": [[335, 356], ["slimmable_ops.make_divisible", "print", "operations_bk.ConvTranspose2dNorm._latency", "numpy.save", "slimmable_ops.make_divisible"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.make_divisible", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.DwsBlock._latency", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.save", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.make_divisible"], ["if", "self", ".", "slimmable", ":", "\n", "            ", "assert", "c_in", "==", "make_divisible", "(", "self", ".", "C_in", "*", "self", ".", "ratio", "[", "0", "]", ")", ",", "\"c_in %d, self.C_in * self.ratio[0] %d\"", "%", "(", "c_in", ",", "self", ".", "C_in", "*", "self", ".", "ratio", "[", "0", "]", ")", "\n", "c_out", "=", "make_divisible", "(", "self", ".", "C_out", "*", "self", ".", "ratio", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "assert", "c_in", "==", "self", ".", "C_in", ",", "\"c_in %d, self.C_in %d\"", "%", "(", "c_in", ",", "self", ".", "C_in", ")", "\n", "c_out", "=", "self", ".", "C_out", "\n", "", "if", "self", ".", "stride", "==", "1", ":", "\n", "            ", "h_out", "=", "h_in", ";", "w_out", "=", "w_in", "\n", "", "else", ":", "\n", "            ", "h_out", "=", "h_in", "//", "2", ";", "w_out", "=", "w_in", "//", "2", "\n", "", "name", "=", "\"ConvTranspose2dNorm_H%d_W%d_Cin%d_Cout%d_kernel%d_stride%d\"", "%", "(", "h_in", ",", "w_in", ",", "c_in", ",", "c_out", ",", "self", ".", "kernel_size", ",", "self", ".", "stride", ")", "\n", "if", "name", "in", "latency_lookup_table", ":", "\n", "            ", "latency", "=", "latency_lookup_table", "[", "name", "]", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"not found in latency_lookup_table:\"", ",", "name", ")", "\n", "latency", "=", "ConvTranspose2dNorm", ".", "_latency", "(", "h_in", ",", "w_in", ",", "c_in", ",", "c_out", ",", "self", ".", "kernel_size", ",", "self", ".", "stride", ",", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "groups", ",", "self", ".", "bias", ")", "\n", "latency_lookup_table", "[", "name", "]", "=", "latency", "\n", "np", ".", "save", "(", "table_file_name", ",", "latency_lookup_table", ")", "\n", "", "return", "latency", ",", "(", "c_out", ",", "h_out", ",", "w_out", ")", "\n", "\n", "\n", "", "def", "forward_flops", "(", "self", ",", "size", ",", "quantize", "=", "False", ")", ":", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.ConvTranspose2dNorm.forward_flops": [[358, 382], ["slimmable_ops.make_divisible", "print", "operations_bk.ConvTranspose2dNorm._flops", "numpy.save", "slimmable_ops.make_divisible"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.make_divisible", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.DwsBlock._flops", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.save", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.make_divisible"], ["if", "self", ".", "slimmable", ":", "\n", "            ", "assert", "c_in", "==", "make_divisible", "(", "self", ".", "C_in", "*", "self", ".", "ratio", "[", "0", "]", ")", ",", "\"c_in %d, self.C_in * self.ratio[0] %d\"", "%", "(", "c_in", ",", "self", ".", "C_in", "*", "self", ".", "ratio", "[", "0", "]", ")", "\n", "c_out", "=", "make_divisible", "(", "self", ".", "C_out", "*", "self", ".", "ratio", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "assert", "c_in", "==", "self", ".", "C_in", ",", "\"c_in %d, self.C_in %d\"", "%", "(", "c_in", ",", "self", ".", "C_in", ")", "\n", "c_out", "=", "self", ".", "C_out", "\n", "", "if", "self", ".", "stride", "==", "1", ":", "\n", "            ", "h_out", "=", "h_in", ";", "w_out", "=", "w_in", "\n", "", "else", ":", "\n", "            ", "h_out", "=", "h_in", "//", "2", ";", "w_out", "=", "w_in", "//", "2", "\n", "", "name", "=", "\"ConvTranspose2dNorm_H%d_W%d_Cin%d_Cout%d_kernel%d_stride%d\"", "%", "(", "h_in", ",", "w_in", ",", "c_in", ",", "c_out", ",", "self", ".", "kernel_size", ",", "self", ".", "stride", ")", "\n", "if", "name", "in", "flops_lookup_table", ":", "\n", "            ", "flops", "=", "flops_lookup_table", "[", "name", "]", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"not found in flops_lookup_table:\"", ",", "name", ")", "\n", "flops", "=", "ConvTranspose2dNorm", ".", "_flops", "(", "h_in", ",", "w_in", ",", "c_in", ",", "c_out", ",", "self", ".", "kernel_size", ",", "self", ".", "stride", ",", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "groups", ",", "self", ".", "bias", ")", "\n", "flops_lookup_table", "[", "name", "]", "=", "flops", "\n", "np", ".", "save", "(", "table_file_name", ",", "flops_lookup_table", ")", "\n", "# if quantize:", "\n", "#     flops /= 4", "\n", "\n", "", "return", "flops", ",", "(", "c_out", ",", "h_out", ",", "w_out", ")", "\n", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "quantize", "=", "False", ")", ":", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.ConvTranspose2dNorm.forward": [[384, 390], ["operations_bk.ConvTranspose2dNorm.conv", "operations_bk.ConvTranspose2dNorm.relu", "operations_bk.ConvTranspose2dNorm.bn"], "methods", ["None"], ["x", "=", "self", ".", "bn", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "return", "x", "\n", "\n", "\n", "", "", "class", "Conv7x7", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "kernel_size", "=", "7", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "slimmable", "=", "True", ",", "width_mult_list", "=", "[", "1.", "]", ")", ":", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.Conv7x7.__init__": [[393, 412], ["torch.Module.__init__", "slimmable_ops.USConv2d", "Conv2d"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.Cutout.__init__"], ["self", ".", "C_in", "=", "C_in", "\n", "self", ".", "C_out", "=", "C_out", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "dilation", "=", "dilation", "\n", "self", ".", "groups", "=", "groups", "\n", "self", ".", "slimmable", "=", "slimmable", "\n", "self", ".", "width_mult_list", "=", "width_mult_list", "\n", "assert", "stride", "in", "[", "1", ",", "2", "]", "\n", "if", "self", ".", "stride", "==", "2", ":", "self", ".", "dilation", "=", "1", "\n", "self", ".", "ratio", "=", "(", "1.", ",", "1.", ")", "\n", "\n", "if", "slimmable", ":", "\n", "            ", "self", ".", "conv1", "=", "USConv2d", "(", "C_in", ",", "C_out", ",", "7", ",", "stride", ",", "padding", "=", "3", ",", "dilation", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "False", ",", "width_mult_list", "=", "width_mult_list", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv1", "=", "Conv2d", "(", "C_in", ",", "C_out", ",", "7", ",", "stride", ",", "padding", "=", "3", ",", "dilation", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "False", ")", "\n", "\n", "", "", "def", "set_ratio", "(", "self", ",", "ratio", ")", ":", "\n", "        ", "assert", "len", "(", "ratio", ")", "==", "2", "\n", "self", ".", "ratio", "=", "ratio", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.Conv7x7.set_ratio": [[413, 417], ["operations_bk.Conv7x7.conv1.set_ratio", "len"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.DwsBlock.set_ratio"], ["self", ".", "conv1", ".", "set_ratio", "(", "ratio", ")", "\n", "\n", "", "@", "staticmethod", "\n", "def", "_flops", "(", "h", ",", "w", ",", "C_in", ",", "C_out", ",", "kernel_size", "=", "7", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "groups", "=", "1", ")", ":", "\n", "        ", "layer", "=", "Conv7x7", "(", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "dilation", ",", "groups", ",", "slimmable", "=", "False", ")", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.Conv7x7._flops": [[418, 423], ["operations_bk.Conv7x7", "thop.profile", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["None"], ["flops", ",", "params", "=", "profile", "(", "layer", ",", "inputs", "=", "(", "torch", ".", "randn", "(", "1", ",", "C_in", ",", "h", ",", "w", ")", ",", ")", ",", "custom_ops", "=", "custom_ops", ")", "\n", "return", "flops", "\n", "\n", "", "@", "staticmethod", "\n", "def", "_latency", "(", "h", ",", "w", ",", "C_in", ",", "C_out", ",", "kernel_size", "=", "7", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "groups", "=", "1", ")", ":", "\n", "        ", "layer", "=", "Conv7x7", "(", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "dilation", ",", "groups", ",", "slimmable", "=", "False", ")", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.Conv7x7._latency": [[424, 429], ["operations_bk.Conv7x7", "compute_latency"], "methods", ["None"], ["latency", "=", "compute_latency", "(", "layer", ",", "(", "1", ",", "C_in", ",", "h", ",", "w", ")", ")", "\n", "return", "latency", "\n", "\n", "", "def", "forward_latency", "(", "self", ",", "size", ")", ":", "\n", "        ", "c_in", ",", "h_in", ",", "w_in", "=", "size", "\n", "if", "self", ".", "slimmable", ":", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.Conv7x7.forward_latency": [[430, 451], ["slimmable_ops.make_divisible", "print", "operations_bk.Conv7x7._latency", "numpy.save", "slimmable_ops.make_divisible", "int"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.make_divisible", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.DwsBlock._latency", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.save", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.make_divisible"], ["            ", "assert", "c_in", "==", "make_divisible", "(", "self", ".", "C_in", "*", "self", ".", "ratio", "[", "0", "]", ")", ",", "\"c_in %d, int(self.C_in * self.ratio[0]) %d\"", "%", "(", "c_in", ",", "int", "(", "self", ".", "C_in", "*", "self", ".", "ratio", "[", "0", "]", ")", ")", "\n", "c_out", "=", "make_divisible", "(", "self", ".", "C_out", "*", "self", ".", "ratio", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "assert", "c_in", "==", "self", ".", "C_in", ",", "\"c_in %d, self.C_in %d\"", "%", "(", "c_in", ",", "self", ".", "C_in", ")", "\n", "c_out", "=", "self", ".", "C_out", "\n", "", "if", "self", ".", "stride", "==", "1", ":", "\n", "            ", "h_out", "=", "h_in", ";", "w_out", "=", "w_in", "\n", "", "else", ":", "\n", "            ", "h_out", "=", "h_in", "//", "2", ";", "w_out", "=", "w_in", "//", "2", "\n", "", "name", "=", "\"Conv7x7_H%d_W%d_Cin%d_Cout%d_stride%d_dilation%d\"", "%", "(", "h_in", ",", "w_in", ",", "c_in", ",", "c_out", ",", "self", ".", "stride", ",", "self", ".", "dilation", ")", "\n", "if", "name", "in", "latency_lookup_table", ":", "\n", "            ", "latency", "=", "latency_lookup_table", "[", "name", "]", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"not found in latency_lookup_table:\"", ",", "name", ")", "\n", "latency", "=", "Conv7x7", ".", "_latency", "(", "h_in", ",", "w_in", ",", "c_in", ",", "c_out", ",", "self", ".", "kernel_size", ",", "self", ".", "stride", ",", "self", ".", "dilation", ",", "self", ".", "groups", ")", "\n", "latency_lookup_table", "[", "name", "]", "=", "latency", "\n", "np", ".", "save", "(", "table_file_name", ",", "latency_lookup_table", ")", "\n", "", "return", "latency", ",", "(", "c_out", ",", "h_out", ",", "w_out", ")", "\n", "\n", "\n", "", "def", "forward_flops", "(", "self", ",", "size", ",", "quantize", "=", "False", ")", ":", "\n", "        ", "c_in", ",", "h_in", ",", "w_in", "=", "size", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.Conv7x7.forward_flops": [[453, 477], ["slimmable_ops.make_divisible", "print", "operations_bk.Conv7x7._flops", "numpy.save", "slimmable_ops.make_divisible"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.make_divisible", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.DwsBlock._flops", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.save", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.make_divisible"], ["            ", "assert", "c_in", "==", "make_divisible", "(", "self", ".", "C_in", "*", "self", ".", "ratio", "[", "0", "]", ")", ",", "\"c_in %d, self.C_in * self.ratio[0] %d\"", "%", "(", "c_in", ",", "self", ".", "C_in", "*", "self", ".", "ratio", "[", "0", "]", ")", "\n", "c_out", "=", "make_divisible", "(", "self", ".", "C_out", "*", "self", ".", "ratio", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "assert", "c_in", "==", "self", ".", "C_in", ",", "\"c_in %d, self.C_in %d\"", "%", "(", "c_in", ",", "self", ".", "C_in", ")", "\n", "c_out", "=", "self", ".", "C_out", "\n", "", "if", "self", ".", "stride", "==", "1", ":", "\n", "            ", "h_out", "=", "h_in", ";", "w_out", "=", "w_in", "\n", "", "else", ":", "\n", "            ", "h_out", "=", "h_in", "//", "2", ";", "w_out", "=", "w_in", "//", "2", "\n", "", "name", "=", "\"Conv7x7_H%d_W%d_Cin%d_Cout%d_kernel%d_stride%d\"", "%", "(", "h_in", ",", "w_in", ",", "c_in", ",", "c_out", ",", "self", ".", "kernel_size", ",", "self", ".", "stride", ")", "\n", "if", "name", "in", "flops_lookup_table", ":", "\n", "            ", "flops", "=", "flops_lookup_table", "[", "name", "]", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"not found in flops_lookup_table:\"", ",", "name", ")", "\n", "flops", "=", "Conv7x7", ".", "_flops", "(", "h_in", ",", "w_in", ",", "c_in", ",", "c_out", ",", "self", ".", "kernel_size", ",", "self", ".", "stride", ",", "self", ".", "dilation", ",", "self", ".", "groups", ")", "\n", "flops_lookup_table", "[", "name", "]", "=", "flops", "\n", "np", ".", "save", "(", "table_file_name", ",", "flops_lookup_table", ")", "\n", "# if quantize:", "\n", "#     flops /= 4", "\n", "\n", "", "return", "flops", ",", "(", "c_out", ",", "h_out", ",", "w_out", ")", "\n", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "quantize", "=", "False", ")", ":", "\n", "        ", "identity", "=", "x", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.Conv7x7.forward": [[479, 484], ["operations_bk.Conv7x7.conv1"], "methods", ["None"], ["\n", "return", "out", "\n", "\n", "\n", "", "", "class", "Conv3x3", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "slimmable", "=", "True", ",", "width_mult_list", "=", "[", "1.", "]", ")", ":", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.Conv3x3.__init__": [[487, 510], ["torch.Module.__init__", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "slimmable_ops.USConv2d", "slimmable_ops.USBatchNorm2d", "Conv2d", "BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.Cutout.__init__"], ["self", ".", "C_in", "=", "C_in", "\n", "self", ".", "C_out", "=", "C_out", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "dilation", "=", "dilation", "\n", "self", ".", "groups", "=", "groups", "\n", "self", ".", "slimmable", "=", "slimmable", "\n", "self", ".", "width_mult_list", "=", "width_mult_list", "\n", "assert", "stride", "in", "[", "1", ",", "2", "]", "\n", "if", "self", ".", "stride", "==", "2", ":", "self", ".", "dilation", "=", "1", "\n", "self", ".", "ratio", "=", "(", "1.", ",", "1.", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "if", "slimmable", ":", "\n", "            ", "self", ".", "conv1", "=", "USConv2d", "(", "C_in", ",", "C_out", ",", "3", ",", "stride", ",", "padding", "=", "dilation", ",", "dilation", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "False", ",", "width_mult_list", "=", "width_mult_list", ")", "\n", "self", ".", "bn1", "=", "USBatchNorm2d", "(", "C_out", ",", "width_mult_list", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv1", "=", "Conv2d", "(", "C_in", ",", "C_out", ",", "3", ",", "stride", ",", "padding", "=", "dilation", ",", "dilation", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "False", ")", "\n", "# self.bn1 = nn.BatchNorm2d(C_out)", "\n", "self", ".", "bn1", "=", "BatchNorm2d", "(", "C_out", ")", "\n", "\n", "", "", "def", "set_ratio", "(", "self", ",", "ratio", ")", ":", "\n", "        ", "assert", "len", "(", "ratio", ")", "==", "2", "\n", "self", ".", "ratio", "=", "ratio", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.Conv3x3.set_ratio": [[511, 516], ["operations_bk.Conv3x3.conv1.set_ratio", "operations_bk.Conv3x3.bn1.set_ratio", "len"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.DwsBlock.set_ratio", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.DwsBlock.set_ratio"], ["self", ".", "conv1", ".", "set_ratio", "(", "ratio", ")", "\n", "self", ".", "bn1", ".", "set_ratio", "(", "ratio", "[", "1", "]", ")", "\n", "\n", "", "@", "staticmethod", "\n", "def", "_flops", "(", "h", ",", "w", ",", "C_in", ",", "C_out", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "groups", "=", "1", ")", ":", "\n", "        ", "layer", "=", "Conv3x3", "(", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "dilation", ",", "groups", ",", "slimmable", "=", "False", ")", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.Conv3x3._flops": [[517, 522], ["operations_bk.Conv3x3", "thop.profile", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["None"], ["flops", ",", "params", "=", "profile", "(", "layer", ",", "inputs", "=", "(", "torch", ".", "randn", "(", "1", ",", "C_in", ",", "h", ",", "w", ")", ",", ")", ",", "custom_ops", "=", "custom_ops", ")", "\n", "return", "flops", "\n", "\n", "", "@", "staticmethod", "\n", "def", "_latency", "(", "h", ",", "w", ",", "C_in", ",", "C_out", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "groups", "=", "1", ")", ":", "\n", "        ", "layer", "=", "Conv3x3", "(", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "dilation", ",", "groups", ",", "slimmable", "=", "False", ")", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.Conv3x3._latency": [[523, 528], ["operations_bk.Conv3x3", "compute_latency"], "methods", ["None"], ["latency", "=", "compute_latency", "(", "layer", ",", "(", "1", ",", "C_in", ",", "h", ",", "w", ")", ")", "\n", "return", "latency", "\n", "\n", "", "def", "forward_latency", "(", "self", ",", "size", ")", ":", "\n", "        ", "c_in", ",", "h_in", ",", "w_in", "=", "size", "\n", "if", "self", ".", "slimmable", ":", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.Conv3x3.forward_latency": [[529, 550], ["slimmable_ops.make_divisible", "print", "operations_bk.Conv3x3._latency", "numpy.save", "slimmable_ops.make_divisible", "int"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.make_divisible", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.DwsBlock._latency", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.save", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.make_divisible"], ["            ", "assert", "c_in", "==", "make_divisible", "(", "self", ".", "C_in", "*", "self", ".", "ratio", "[", "0", "]", ")", ",", "\"c_in %d, int(self.C_in * self.ratio[0]) %d\"", "%", "(", "c_in", ",", "int", "(", "self", ".", "C_in", "*", "self", ".", "ratio", "[", "0", "]", ")", ")", "\n", "c_out", "=", "make_divisible", "(", "self", ".", "C_out", "*", "self", ".", "ratio", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "assert", "c_in", "==", "self", ".", "C_in", ",", "\"c_in %d, self.C_in %d\"", "%", "(", "c_in", ",", "self", ".", "C_in", ")", "\n", "c_out", "=", "self", ".", "C_out", "\n", "", "if", "self", ".", "stride", "==", "1", ":", "\n", "            ", "h_out", "=", "h_in", ";", "w_out", "=", "w_in", "\n", "", "else", ":", "\n", "            ", "h_out", "=", "h_in", "//", "2", ";", "w_out", "=", "w_in", "//", "2", "\n", "", "name", "=", "\"Conv3x3_H%d_W%d_Cin%d_Cout%d_stride%d_dilation%d\"", "%", "(", "h_in", ",", "w_in", ",", "c_in", ",", "c_out", ",", "self", ".", "stride", ",", "self", ".", "dilation", ")", "\n", "if", "name", "in", "latency_lookup_table", ":", "\n", "            ", "latency", "=", "latency_lookup_table", "[", "name", "]", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"not found in latency_lookup_table:\"", ",", "name", ")", "\n", "latency", "=", "Conv3x3", ".", "_latency", "(", "h_in", ",", "w_in", ",", "c_in", ",", "c_out", ",", "self", ".", "kernel_size", ",", "self", ".", "stride", ",", "self", ".", "dilation", ",", "self", ".", "groups", ")", "\n", "latency_lookup_table", "[", "name", "]", "=", "latency", "\n", "np", ".", "save", "(", "table_file_name", ",", "latency_lookup_table", ")", "\n", "", "return", "latency", ",", "(", "c_out", ",", "h_out", ",", "w_out", ")", "\n", "\n", "\n", "", "def", "forward_flops", "(", "self", ",", "size", ",", "quantize", "=", "False", ")", ":", "\n", "        ", "c_in", ",", "h_in", ",", "w_in", "=", "size", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.Conv3x3.forward_flops": [[552, 576], ["slimmable_ops.make_divisible", "print", "operations_bk.Conv3x3._flops", "numpy.save", "slimmable_ops.make_divisible"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.make_divisible", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.DwsBlock._flops", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.save", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.make_divisible"], ["            ", "assert", "c_in", "==", "make_divisible", "(", "self", ".", "C_in", "*", "self", ".", "ratio", "[", "0", "]", ")", ",", "\"c_in %d, self.C_in * self.ratio[0] %d\"", "%", "(", "c_in", ",", "self", ".", "C_in", "*", "self", ".", "ratio", "[", "0", "]", ")", "\n", "c_out", "=", "make_divisible", "(", "self", ".", "C_out", "*", "self", ".", "ratio", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "assert", "c_in", "==", "self", ".", "C_in", ",", "\"c_in %d, self.C_in %d\"", "%", "(", "c_in", ",", "self", ".", "C_in", ")", "\n", "c_out", "=", "self", ".", "C_out", "\n", "", "if", "self", ".", "stride", "==", "1", ":", "\n", "            ", "h_out", "=", "h_in", ";", "w_out", "=", "w_in", "\n", "", "else", ":", "\n", "            ", "h_out", "=", "h_in", "//", "2", ";", "w_out", "=", "w_in", "//", "2", "\n", "", "name", "=", "\"Conv3x3_H%d_W%d_Cin%d_Cout%d_kernel%d_stride%d\"", "%", "(", "h_in", ",", "w_in", ",", "c_in", ",", "c_out", ",", "self", ".", "kernel_size", ",", "self", ".", "stride", ")", "\n", "if", "name", "in", "flops_lookup_table", ":", "\n", "            ", "flops", "=", "flops_lookup_table", "[", "name", "]", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"not found in flops_lookup_table:\"", ",", "name", ")", "\n", "flops", "=", "Conv3x3", ".", "_flops", "(", "h_in", ",", "w_in", ",", "c_in", ",", "c_out", ",", "self", ".", "kernel_size", ",", "self", ".", "stride", ",", "self", ".", "dilation", ",", "self", ".", "groups", ")", "\n", "flops_lookup_table", "[", "name", "]", "=", "flops", "\n", "np", ".", "save", "(", "table_file_name", ",", "flops_lookup_table", ")", "\n", "# if quantize:", "\n", "#     flops /= 4", "\n", "\n", "", "return", "flops", ",", "(", "c_out", ",", "h_out", ",", "w_out", ")", "\n", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "quantize", "=", "False", ")", ":", "\n", "        ", "identity", "=", "x", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.Conv3x3.forward": [[578, 585], ["operations_bk.Conv3x3.conv1", "operations_bk.Conv3x3.relu", "operations_bk.Conv3x3.bn1"], "methods", ["None"], ["out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n", "\n", "", "", "class", "BasicResidual", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "slimmable", "=", "True", ",", "width_mult_list", "=", "[", "1.", "]", ")", ":", "\n", "        ", "super", "(", "BasicResidual", ",", "self", ")", ".", "__init__", "(", ")", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.BasicResidual.__init__": [[588, 625], ["torch.Module.__init__", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "slimmable_ops.USConv2d", "slimmable_ops.USBatchNorm2d", "slimmable_ops.USConv2d", "slimmable_ops.USBatchNorm2d", "slimmable_ops.USConv2d", "slimmable_ops.USBatchNorm2d", "Conv2d", "BatchNorm2d", "Conv2d", "BatchNorm2d", "Conv2d", "BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.Cutout.__init__"], ["self", ".", "C_out", "=", "C_out", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "dilation", "=", "dilation", "\n", "self", ".", "groups", "=", "groups", "\n", "self", ".", "slimmable", "=", "slimmable", "\n", "self", ".", "width_mult_list", "=", "width_mult_list", "\n", "assert", "stride", "in", "[", "1", ",", "2", "]", "\n", "if", "self", ".", "stride", "==", "2", ":", "self", ".", "dilation", "=", "1", "\n", "self", ".", "ratio", "=", "(", "1.", ",", "1.", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "if", "self", ".", "slimmable", ":", "\n", "            ", "self", ".", "conv1", "=", "USConv2d", "(", "C_in", ",", "C_out", ",", "3", ",", "stride", ",", "padding", "=", "dilation", ",", "dilation", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "False", ",", "width_mult_list", "=", "width_mult_list", ")", "\n", "self", ".", "bn1", "=", "USBatchNorm2d", "(", "C_out", ",", "width_mult_list", ")", "\n", "self", ".", "conv2", "=", "USConv2d", "(", "C_out", ",", "C_out", ",", "3", ",", "1", ",", "padding", "=", "dilation", ",", "dilation", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "False", ",", "width_mult_list", "=", "width_mult_list", ")", "\n", "self", ".", "bn2", "=", "USBatchNorm2d", "(", "C_out", ",", "width_mult_list", ")", "\n", "\n", "self", ".", "skip", "=", "USConv2d", "(", "C_in", ",", "C_out", ",", "1", ",", "stride", ",", "padding", "=", "0", ",", "dilation", "=", "dilation", ",", "groups", "=", "1", ",", "bias", "=", "False", ",", "width_mult_list", "=", "width_mult_list", ")", "\n", "self", ".", "bn3", "=", "USBatchNorm2d", "(", "C_out", ",", "width_mult_list", ")", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv1", "=", "Conv2d", "(", "C_in", ",", "C_out", ",", "3", ",", "stride", ",", "padding", "=", "dilation", ",", "dilation", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "False", ")", "\n", "# self.bn1 = nn.BatchNorm2d(C_out)", "\n", "self", ".", "bn1", "=", "BatchNorm2d", "(", "C_out", ")", "\n", "self", ".", "conv2", "=", "Conv2d", "(", "C_out", ",", "C_out", ",", "3", ",", "1", ",", "padding", "=", "dilation", ",", "dilation", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "False", ")", "\n", "# self.bn2 = nn.BatchNorm2d(C_out)", "\n", "self", ".", "bn2", "=", "BatchNorm2d", "(", "C_out", ")", "\n", "\n", "if", "self", ".", "C_in", "!=", "self", ".", "C_out", "or", "self", ".", "stride", "!=", "1", ":", "\n", "                ", "self", ".", "skip", "=", "Conv2d", "(", "C_in", ",", "C_out", ",", "1", ",", "stride", ",", "padding", "=", "0", ",", "dilation", "=", "dilation", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "BatchNorm2d", "(", "C_out", ")", "\n", "\n", "", "", "", "def", "set_ratio", "(", "self", ",", "ratio", ")", ":", "\n", "        ", "assert", "len", "(", "ratio", ")", "==", "2", "\n", "self", ".", "ratio", "=", "ratio", "\n", "self", ".", "conv1", ".", "set_ratio", "(", "ratio", ")", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.BasicResidual.set_ratio": [[626, 637], ["operations_bk.BasicResidual.conv1.set_ratio", "operations_bk.BasicResidual.bn1.set_ratio", "operations_bk.BasicResidual.conv2.set_ratio", "operations_bk.BasicResidual.bn2.set_ratio", "hasattr", "len", "operations_bk.BasicResidual.skip.set_ratio", "operations_bk.BasicResidual.bn3.set_ratio"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.DwsBlock.set_ratio", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.DwsBlock.set_ratio", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.DwsBlock.set_ratio", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.DwsBlock.set_ratio", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.DwsBlock.set_ratio", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.DwsBlock.set_ratio"], ["self", ".", "bn1", ".", "set_ratio", "(", "ratio", "[", "1", "]", ")", "\n", "self", ".", "conv2", ".", "set_ratio", "(", "(", "ratio", "[", "1", "]", ",", "ratio", "[", "1", "]", ")", ")", "\n", "self", ".", "bn2", ".", "set_ratio", "(", "ratio", "[", "1", "]", ")", "\n", "\n", "if", "hasattr", "(", "self", ",", "'skip'", ")", ":", "\n", "            ", "self", ".", "skip", ".", "set_ratio", "(", "ratio", ")", "\n", "self", ".", "bn3", ".", "set_ratio", "(", "ratio", "[", "1", "]", ")", "\n", "\n", "", "", "@", "staticmethod", "\n", "def", "_flops", "(", "h", ",", "w", ",", "C_in", ",", "C_out", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "groups", "=", "1", ")", ":", "\n", "        ", "layer", "=", "BasicResidual", "(", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "dilation", ",", "groups", ",", "slimmable", "=", "False", ")", "\n", "flops", ",", "params", "=", "profile", "(", "layer", ",", "inputs", "=", "(", "torch", ".", "randn", "(", "1", ",", "C_in", ",", "h", ",", "w", ")", ",", ")", ",", "custom_ops", "=", "custom_ops", ")", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.BasicResidual._flops": [[638, 643], ["operations_bk.BasicResidual", "thop.profile", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["None"], ["return", "flops", "\n", "\n", "", "@", "staticmethod", "\n", "def", "_latency", "(", "h", ",", "w", ",", "C_in", ",", "C_out", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "groups", "=", "1", ")", ":", "\n", "        ", "layer", "=", "BasicResidual", "(", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "dilation", ",", "groups", ",", "slimmable", "=", "False", ")", "\n", "latency", "=", "compute_latency", "(", "layer", ",", "(", "1", ",", "C_in", ",", "h", ",", "w", ")", ")", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.BasicResidual._latency": [[644, 649], ["operations_bk.BasicResidual", "compute_latency"], "methods", ["None"], ["return", "latency", "\n", "\n", "", "def", "forward_latency", "(", "self", ",", "size", ")", ":", "\n", "        ", "c_in", ",", "h_in", ",", "w_in", "=", "size", "\n", "if", "self", ".", "slimmable", ":", "\n", "            ", "assert", "c_in", "==", "make_divisible", "(", "self", ".", "C_in", "*", "self", ".", "ratio", "[", "0", "]", ")", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.BasicResidual.forward_latency": [[650, 671], ["slimmable_ops.make_divisible", "print", "operations_bk.BasicResidual._latency", "numpy.save", "slimmable_ops.make_divisible"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.make_divisible", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.DwsBlock._latency", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.save", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.make_divisible"], ["c_out", "=", "make_divisible", "(", "self", ".", "C_out", "*", "self", ".", "ratio", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "assert", "c_in", "==", "self", ".", "C_in", ",", "\"c_in %d, self.C_in%d\"", "%", "(", "c_in", ",", "self", ".", "C_in", ")", "\n", "c_out", "=", "self", ".", "C_out", "\n", "", "if", "self", ".", "stride", "==", "1", ":", "\n", "            ", "h_out", "=", "h_in", ";", "w_out", "=", "w_in", "\n", "", "else", ":", "\n", "            ", "h_out", "=", "h_in", "//", "2", ";", "w_out", "=", "w_in", "//", "2", "\n", "", "name", "=", "\"BasicResidual_H%d_W%d_Cin%d_Cout%d_stride%d_dilation%d\"", "%", "(", "h_in", ",", "w_in", ",", "c_in", ",", "c_out", ",", "self", ".", "stride", ",", "self", ".", "dilation", ")", "\n", "if", "name", "in", "latency_lookup_table", ":", "\n", "            ", "latency", "=", "latency_lookup_table", "[", "name", "]", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"not found in latency_lookup_table:\"", ",", "name", ")", "\n", "latency", "=", "BasicResidual", ".", "_latency", "(", "h_in", ",", "w_in", ",", "c_in", ",", "c_out", ",", "self", ".", "kernel_size", ",", "self", ".", "stride", ",", "self", ".", "dilation", ",", "self", ".", "groups", ")", "\n", "latency_lookup_table", "[", "name", "]", "=", "latency", "\n", "np", ".", "save", "(", "table_file_name", ",", "latency_lookup_table", ")", "\n", "", "return", "latency", ",", "(", "c_out", ",", "h_out", ",", "w_out", ")", "\n", "\n", "\n", "", "def", "forward_flops", "(", "self", ",", "size", ",", "quantize", "=", "False", ")", ":", "\n", "        ", "c_in", ",", "h_in", ",", "w_in", "=", "size", "\n", "if", "self", ".", "slimmable", ":", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.BasicResidual.forward_flops": [[673, 697], ["slimmable_ops.make_divisible", "print", "operations_bk.BasicResidual._flops", "numpy.save", "slimmable_ops.make_divisible"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.make_divisible", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.DwsBlock._flops", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.save", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.make_divisible"], ["c_out", "=", "make_divisible", "(", "self", ".", "C_out", "*", "self", ".", "ratio", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "assert", "c_in", "==", "self", ".", "C_in", ",", "\"c_in %d, self.C_in %d\"", "%", "(", "c_in", ",", "self", ".", "C_in", ")", "\n", "c_out", "=", "self", ".", "C_out", "\n", "", "if", "self", ".", "stride", "==", "1", ":", "\n", "            ", "h_out", "=", "h_in", ";", "w_out", "=", "w_in", "\n", "", "else", ":", "\n", "            ", "h_out", "=", "h_in", "//", "2", ";", "w_out", "=", "w_in", "//", "2", "\n", "", "name", "=", "\"BasicResidual_H%d_W%d_Cin%d_Cout%d_kernel%d_stride%d\"", "%", "(", "h_in", ",", "w_in", ",", "c_in", ",", "c_out", ",", "self", ".", "kernel_size", ",", "self", ".", "stride", ")", "\n", "if", "name", "in", "flops_lookup_table", ":", "\n", "            ", "flops", "=", "flops_lookup_table", "[", "name", "]", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"not found in flops_lookup_table:\"", ",", "name", ")", "\n", "flops", "=", "BasicResidual", ".", "_flops", "(", "h_in", ",", "w_in", ",", "c_in", ",", "c_out", ",", "self", ".", "kernel_size", ",", "self", ".", "stride", ",", "self", ".", "dilation", ",", "self", ".", "groups", ")", "\n", "flops_lookup_table", "[", "name", "]", "=", "flops", "\n", "np", ".", "save", "(", "table_file_name", ",", "flops_lookup_table", ")", "\n", "# if quantize:", "\n", "#     flops /= 4", "\n", "\n", "", "return", "flops", ",", "(", "c_out", ",", "h_out", ",", "w_out", ")", "\n", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "quantize", "=", "False", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "out", "=", "self", ".", "conv1", "(", "x", ",", "quantize", "=", "quantize", ")", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.BasicResidual.forward": [[699, 718], ["operations_bk.BasicResidual.conv1", "operations_bk.BasicResidual.relu", "operations_bk.BasicResidual.conv2", "hasattr", "operations_bk.BasicResidual.relu", "operations_bk.BasicResidual.bn1", "operations_bk.BasicResidual.bn2", "operations_bk.BasicResidual.skip", "operations_bk.BasicResidual.bn3"], "methods", ["None"], ["out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ",", "quantize", "=", "quantize", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "hasattr", "(", "self", ",", "'skip'", ")", ":", "\n", "            ", "identity", "=", "self", ".", "bn3", "(", "self", ".", "skip", "(", "identity", ",", "quantize", "=", "quantize", ")", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n", "\n", "", "", "class", "SkipConnect", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "stride", "=", "1", ",", "slimmable", "=", "True", ",", "width_mult_list", "=", "[", "1.", "]", ")", ":", "\n", "        ", "super", "(", "SkipConnect", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "stride", "in", "[", "1", ",", "2", "]", "\n", "assert", "C_out", "%", "2", "==", "0", ",", "'C_out=%d'", "%", "C_out", "\n", "self", ".", "C_in", "=", "C_in", "\n", "self", ".", "C_out", "=", "C_out", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.SkipConnect.__init__": [[721, 745], ["torch.Module.__init__", "slimmable_ops.USConv2d", "slimmable_ops.USBatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "Conv2d", "BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.Cutout.__init__"], ["self", ".", "width_mult_list", "=", "width_mult_list", "\n", "self", ".", "ratio", "=", "(", "1.", ",", "1.", ")", "\n", "\n", "self", ".", "kernel_size", "=", "1", "\n", "self", ".", "padding", "=", "0", "\n", "\n", "if", "slimmable", ":", "\n", "            ", "self", ".", "conv", "=", "USConv2d", "(", "C_in", ",", "C_out", ",", "1", ",", "stride", "=", "stride", ",", "padding", "=", "0", ",", "bias", "=", "False", ",", "width_mult_list", "=", "width_mult_list", ")", "\n", "self", ".", "bn", "=", "USBatchNorm2d", "(", "C_out", ",", "width_mult_list", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "# elif stride == 2 or C_in != C_out:", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv", "=", "Conv2d", "(", "C_in", ",", "C_out", ",", "1", ",", "stride", "=", "stride", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn", "=", "BatchNorm2d", "(", "C_out", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "\n", "", "", "def", "set_ratio", "(", "self", ",", "ratio", ")", ":", "\n", "        ", "assert", "len", "(", "ratio", ")", "==", "2", "\n", "\n", "self", ".", "ratio", "=", "ratio", "\n", "self", ".", "conv", ".", "set_ratio", "(", "ratio", ")", "\n", "self", ".", "bn", ".", "set_ratio", "(", "ratio", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.SkipConnect.set_ratio": [[747, 753], ["operations_bk.SkipConnect.conv.set_ratio", "operations_bk.SkipConnect.bn.set_ratio", "len"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.DwsBlock.set_ratio", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.DwsBlock.set_ratio"], ["", "@", "staticmethod", "\n", "def", "_flops", "(", "h", ",", "w", ",", "C_in", ",", "C_out", ",", "stride", "=", "1", ")", ":", "\n", "        ", "layer", "=", "SkipConnect", "(", "C_in", ",", "C_out", ",", "stride", ",", "slimmable", "=", "False", ")", "\n", "flops", ",", "params", "=", "profile", "(", "layer", ",", "inputs", "=", "(", "torch", ".", "randn", "(", "1", ",", "C_in", ",", "h", ",", "w", ")", ",", ")", ",", "custom_ops", "=", "custom_ops", ")", "\n", "return", "flops", "\n", "\n", "", "@", "staticmethod", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.SkipConnect._flops": [[755, 760], ["operations_bk.SkipConnect", "thop.profile", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["None"], ["        ", "layer", "=", "SkipConnect", "(", "C_in", ",", "C_out", ",", "stride", ",", "slimmable", "=", "False", ")", "\n", "latency", "=", "compute_latency", "(", "layer", ",", "(", "1", ",", "C_in", ",", "h", ",", "w", ")", ")", "\n", "return", "latency", "\n", "\n", "", "def", "forward_latency", "(", "self", ",", "size", ")", ":", "\n", "        ", "c_in", ",", "h_in", ",", "w_in", "=", "size", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.SkipConnect._latency": [[761, 766], ["operations_bk.SkipConnect", "compute_latency"], "methods", ["None"], ["if", "self", ".", "slimmable", ":", "\n", "            ", "assert", "c_in", "==", "make_divisible", "(", "self", ".", "C_in", "*", "self", ".", "ratio", "[", "0", "]", ")", "\n", "c_out", "=", "make_divisible", "(", "self", ".", "C_out", "*", "self", ".", "ratio", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "assert", "c_in", "==", "self", ".", "C_in", "\n", "c_out", "=", "self", ".", "C_out", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.SkipConnect.forward_latency": [[767, 788], ["slimmable_ops.make_divisible", "print", "operations_bk.SkipConnect._latency", "numpy.save", "slimmable_ops.make_divisible"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.make_divisible", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.DwsBlock._latency", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.save", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.make_divisible"], ["", "if", "self", ".", "stride", "==", "1", ":", "\n", "            ", "h_out", "=", "h_in", ";", "w_out", "=", "w_in", "\n", "", "else", ":", "\n", "            ", "h_out", "=", "h_in", "//", "2", ";", "w_out", "=", "w_in", "//", "2", "\n", "", "name", "=", "\"SkipConnect_H%d_W%d_Cin%d_Cout%d_stride%d\"", "%", "(", "h_in", ",", "w_in", ",", "c_in", ",", "c_out", ",", "self", ".", "stride", ")", "\n", "if", "name", "in", "latency_lookup_table", ":", "\n", "            ", "latency", "=", "latency_lookup_table", "[", "name", "]", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"not found in latency_lookup_table:\"", ",", "name", ")", "\n", "latency", "=", "SkipConnect", ".", "_latency", "(", "h_in", ",", "w_in", ",", "c_in", ",", "c_out", ",", "self", ".", "stride", ")", "\n", "latency_lookup_table", "[", "name", "]", "=", "latency", "\n", "np", ".", "save", "(", "table_file_name", ",", "latency_lookup_table", ")", "\n", "", "return", "latency", ",", "(", "c_out", ",", "h_out", ",", "w_out", ")", "\n", "\n", "\n", "", "def", "forward_flops", "(", "self", ",", "size", ",", "quantize", "=", "False", ")", ":", "\n", "        ", "c_in", ",", "h_in", ",", "w_in", "=", "size", "\n", "if", "self", ".", "slimmable", ":", "\n", "            ", "assert", "c_in", "==", "make_divisible", "(", "self", ".", "C_in", "*", "self", ".", "ratio", "[", "0", "]", ")", ",", "\"c_in %d, self.C_in * self.ratio[0] %d\"", "%", "(", "c_in", ",", "self", ".", "C_in", "*", "self", ".", "ratio", "[", "0", "]", ")", "\n", "c_out", "=", "make_divisible", "(", "self", ".", "C_out", "*", "self", ".", "ratio", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "assert", "c_in", "==", "self", ".", "C_in", ",", "\"c_in %d, self.C_in %d\"", "%", "(", "c_in", ",", "self", ".", "C_in", ")", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.SkipConnect.forward_flops": [[790, 814], ["slimmable_ops.make_divisible", "print", "operations_bk.SkipConnect._flops", "numpy.save", "slimmable_ops.make_divisible"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.make_divisible", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.DwsBlock._flops", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.save", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.make_divisible"], ["", "if", "self", ".", "stride", "==", "1", ":", "\n", "            ", "h_out", "=", "h_in", ";", "w_out", "=", "w_in", "\n", "", "else", ":", "\n", "            ", "h_out", "=", "h_in", "//", "2", ";", "w_out", "=", "w_in", "//", "2", "\n", "", "name", "=", "\"SkipConnect_H%d_W%d_Cin%d_Cout%d_stride%d\"", "%", "(", "h_in", ",", "w_in", ",", "c_in", ",", "c_out", ",", "self", ".", "stride", ")", "\n", "if", "name", "in", "flops_lookup_table", ":", "\n", "            ", "flops", "=", "flops_lookup_table", "[", "name", "]", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"not found in flops_lookup_table:\"", ",", "name", ")", "\n", "flops", "=", "SkipConnect", ".", "_flops", "(", "h_in", ",", "w_in", ",", "c_in", ",", "c_out", ",", "self", ".", "stride", ")", "\n", "flops_lookup_table", "[", "name", "]", "=", "flops", "\n", "np", ".", "save", "(", "table_file_name", ",", "flops_lookup_table", ")", "\n", "# if quantize:", "\n", "#     flops /= 4", "\n", "\n", "", "return", "flops", ",", "(", "c_out", ",", "h_out", ",", "w_out", ")", "\n", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "quantize", "=", "False", ")", ":", "\n", "        ", "if", "hasattr", "(", "self", ",", "'conv'", ")", ":", "\n", "            ", "out", "=", "self", ".", "conv", "(", "x", ",", "quantize", "=", "quantize", ")", "\n", "out", "=", "self", ".", "bn", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "x", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.SkipConnect.forward": [[816, 826], ["hasattr", "operations_bk.SkipConnect.conv", "operations_bk.SkipConnect.relu", "operations_bk.SkipConnect.bn"], "methods", ["None"], ["", "return", "out", "\n", "\n", "\n", "", "", "class", "DwsBlock", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "slimmable", "=", "True", ",", "width_mult_list", "=", "[", "1.", "]", ")", ":", "\n", "        ", "super", "(", "DwsBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Both self.conv1 and self.downsample layers downsample the input when stride != 1", "\n", "self", ".", "C_in", "=", "C_in", "\n", "self", ".", "C_out", "=", "C_out", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "stride", "=", "stride", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.DwsBlock.__init__": [[829, 859], ["torch.Module.__init__", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "slimmable_ops.USConv2d", "slimmable_ops.USBatchNorm2d", "slimmable_ops.USConv2d", "slimmable_ops.USBatchNorm2d", "Conv2d", "BatchNorm2d", "Conv2d", "BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.Cutout.__init__"], ["self", ".", "slimmable", "=", "slimmable", "\n", "self", ".", "width_mult_list", "=", "width_mult_list", "\n", "assert", "stride", "in", "[", "1", ",", "2", "]", "\n", "if", "self", ".", "stride", "==", "2", ":", "self", ".", "dilation", "=", "1", "\n", "self", ".", "ratio", "=", "(", "1.", ",", "1.", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "if", "self", ".", "slimmable", ":", "\n", "            ", "self", ".", "conv1", "=", "USConv2d", "(", "C_in", ",", "C_in", ",", "3", ",", "stride", ",", "padding", "=", "dilation", ",", "dilation", "=", "dilation", ",", "groups", "=", "C_in", ",", "bias", "=", "False", ",", "width_mult_list", "=", "width_mult_list", ")", "\n", "self", ".", "bn1", "=", "USBatchNorm2d", "(", "C_out", ",", "width_mult_list", ")", "\n", "\n", "self", ".", "conv2", "=", "USConv2d", "(", "C_in", ",", "C_out", ",", "1", ",", "1", ",", "padding", "=", "0", ",", "dilation", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "False", ",", "width_mult_list", "=", "width_mult_list", ")", "\n", "self", ".", "bn2", "=", "USBatchNorm2d", "(", "C_out", ",", "width_mult_list", ")", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv1", "=", "Conv2d", "(", "C_in", ",", "C_in", ",", "3", ",", "stride", ",", "padding", "=", "dilation", ",", "dilation", "=", "dilation", ",", "groups", "=", "C_in", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "BatchNorm2d", "(", "C_out", ")", "\n", "\n", "self", ".", "conv2", "=", "Conv2d", "(", "C_in", ",", "C_out", ",", "1", ",", "1", ",", "padding", "=", "0", ",", "dilation", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "BatchNorm2d", "(", "C_out", ")", "\n", "\n", "\n", "", "", "def", "set_ratio", "(", "self", ",", "ratio", ")", ":", "\n", "        ", "assert", "len", "(", "ratio", ")", "==", "2", "\n", "self", ".", "ratio", "=", "ratio", "\n", "self", ".", "conv1", ".", "set_ratio", "(", "(", "1", ",", "ratio", "[", "0", "]", ")", ")", "\n", "self", ".", "bn1", ".", "set_ratio", "(", "ratio", "[", "0", "]", ")", "\n", "self", ".", "conv2", ".", "set_ratio", "(", "ratio", ")", "\n", "self", ".", "bn2", ".", "set_ratio", "(", "ratio", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.DwsBlock.set_ratio": [[861, 868], ["operations_bk.DwsBlock.conv1.set_ratio", "operations_bk.DwsBlock.bn1.set_ratio", "operations_bk.DwsBlock.conv2.set_ratio", "operations_bk.DwsBlock.bn2.set_ratio", "len"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.DwsBlock.set_ratio", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.DwsBlock.set_ratio", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.DwsBlock.set_ratio", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.DwsBlock.set_ratio"], ["", "@", "staticmethod", "\n", "def", "_flops", "(", "h", ",", "w", ",", "C_in", ",", "C_out", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "groups", "=", "1", ")", ":", "\n", "        ", "layer", "=", "DwsBlock", "(", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "dilation", ",", "groups", "=", "1", ",", "slimmable", "=", "False", ")", "\n", "flops", ",", "params", "=", "profile", "(", "layer", ",", "inputs", "=", "(", "torch", ".", "randn", "(", "1", ",", "C_in", ",", "h", ",", "w", ")", ",", ")", ",", "custom_ops", "=", "custom_ops", ")", "\n", "return", "flops", "\n", "\n", "", "@", "staticmethod", "\n", "def", "_latency", "(", "h", ",", "w", ",", "C_in", ",", "C_out", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "groups", "=", "1", ")", ":", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.DwsBlock._flops": [[870, 875], ["operations_bk.DwsBlock", "thop.profile", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["None"], ["latency", "=", "compute_latency", "(", "layer", ",", "(", "1", ",", "C_in", ",", "h", ",", "w", ")", ")", "\n", "return", "latency", "\n", "\n", "", "def", "forward_latency", "(", "self", ",", "size", ")", ":", "\n", "        ", "c_in", ",", "h_in", ",", "w_in", "=", "size", "\n", "if", "self", ".", "slimmable", ":", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.DwsBlock._latency": [[876, 881], ["operations_bk.DwsBlock", "compute_latency"], "methods", ["None"], ["            ", "c_out", "=", "make_divisible", "(", "self", ".", "C_out", "*", "self", ".", "ratio", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "c_out", "=", "self", ".", "C_out", "\n", "", "if", "self", ".", "stride", "==", "1", ":", "\n", "            ", "h_out", "=", "h_in", ";", "w_out", "=", "w_in", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.DwsBlock.forward_latency": [[882, 901], ["slimmable_ops.make_divisible", "print", "operations_bk.DwsBlock._latency", "numpy.save"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.make_divisible", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.DwsBlock._latency", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.save"], ["            ", "h_out", "=", "h_in", "//", "2", ";", "w_out", "=", "w_in", "//", "2", "\n", "", "name", "=", "\"DwsBlock_H%d_W%d_Cin%d_Cout%d_stride%d_dilation%d\"", "%", "(", "h_in", ",", "w_in", ",", "c_in", ",", "c_out", ",", "self", ".", "stride", ",", "self", ".", "dilation", ")", "\n", "if", "name", "in", "latency_lookup_table", ":", "\n", "            ", "latency", "=", "latency_lookup_table", "[", "name", "]", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"not found in latency_lookup_table:\"", ",", "name", ")", "\n", "latency", "=", "DwsBlock", ".", "_latency", "(", "h_in", ",", "w_in", ",", "c_in", ",", "c_out", ",", "self", ".", "kernel_size", ",", "self", ".", "stride", ",", "self", ".", "dilation", ",", "self", ".", "groups", ")", "\n", "latency_lookup_table", "[", "name", "]", "=", "latency", "\n", "np", ".", "save", "(", "table_file_name", ",", "latency_lookup_table", ")", "\n", "", "return", "latency", ",", "(", "c_out", ",", "h_out", ",", "w_out", ")", "\n", "\n", "\n", "", "def", "forward_flops", "(", "self", ",", "size", ",", "quantize", "=", "False", ")", ":", "\n", "        ", "c_in", ",", "h_in", ",", "w_in", "=", "size", "\n", "if", "self", ".", "slimmable", ":", "\n", "            ", "c_out", "=", "make_divisible", "(", "self", ".", "C_out", "*", "self", ".", "ratio", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "c_out", "=", "self", ".", "C_out", "\n", "", "if", "self", ".", "stride", "==", "1", ":", "\n", "            ", "h_out", "=", "h_in", ";", "w_out", "=", "w_in", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.DwsBlock.forward_flops": [[903, 926], ["slimmable_ops.make_divisible", "print", "operations_bk.DwsBlock._flops", "numpy.save"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.make_divisible", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.DwsBlock._flops", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.save"], ["            ", "h_out", "=", "h_in", "//", "2", ";", "w_out", "=", "w_in", "//", "2", "\n", "", "name", "=", "\"DwsBlock_H%d_W%d_Cin%d_Cout%d_kernel%d_stride%d\"", "%", "(", "h_in", ",", "w_in", ",", "c_in", ",", "c_out", ",", "self", ".", "kernel_size", ",", "self", ".", "stride", ")", "\n", "if", "name", "in", "flops_lookup_table", ":", "\n", "            ", "flops", "=", "flops_lookup_table", "[", "name", "]", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"not found in flops_lookup_table:\"", ",", "name", ")", "\n", "flops", "=", "DwsBlock", ".", "_flops", "(", "h_in", ",", "w_in", ",", "c_in", ",", "c_out", ",", "self", ".", "kernel_size", ",", "self", ".", "stride", ",", "self", ".", "dilation", ",", "self", ".", "groups", ")", "\n", "flops_lookup_table", "[", "name", "]", "=", "flops", "\n", "np", ".", "save", "(", "table_file_name", ",", "flops_lookup_table", ")", "\n", "# if quantize:", "\n", "#     ratio_dws = 3*3 / (3*3 + self.C_out)", "\n", "#     flops = ratio_dws * flops + (1-ratio_dws) * flops / 4", "\n", "\n", "", "return", "flops", ",", "(", "c_out", ",", "h_out", ",", "w_out", ")", "\n", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "quantize", "=", "False", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "out", "=", "self", ".", "conv1", "(", "x", ",", "quantize", "=", "False", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ",", "quantize", "=", "quantize", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.DwsBlock.forward": [[928, 940], ["operations_bk.DwsBlock.conv1", "operations_bk.DwsBlock.relu", "operations_bk.DwsBlock.conv2", "operations_bk.DwsBlock.relu", "operations_bk.DwsBlock.bn1", "operations_bk.DwsBlock.bn2"], "methods", ["None"], ["return", "out", "\n", "\n", "\n", "", "", "OPS", "=", "{", "\n", "'skip'", ":", "lambda", "C_in", ",", "C_out", ",", "stride", ",", "slimmable", ",", "width_mult_list", ":", "SkipConnect", "(", "C_in", ",", "C_out", ",", "stride", ",", "slimmable", ",", "width_mult_list", ")", ",", "\n", "'conv3x3'", ":", "lambda", "C_in", ",", "C_out", ",", "stride", ",", "slimmable", ",", "width_mult_list", ":", "Conv3x3", "(", "C_in", ",", "C_out", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "dilation", "=", "1", ",", "slimmable", "=", "slimmable", ",", "width_mult_list", "=", "width_mult_list", ")", ",", "\n", "'conv3x3_d2'", ":", "lambda", "C_in", ",", "C_out", ",", "stride", ",", "slimmable", ",", "width_mult_list", ":", "Conv3x3", "(", "C_in", ",", "C_out", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "dilation", "=", "2", ",", "slimmable", "=", "slimmable", ",", "width_mult_list", "=", "width_mult_list", ")", ",", "\n", "'conv3x3_d4'", ":", "lambda", "C_in", ",", "C_out", ",", "stride", ",", "slimmable", ",", "width_mult_list", ":", "Conv3x3", "(", "C_in", ",", "C_out", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "dilation", "=", "4", ",", "slimmable", "=", "slimmable", ",", "width_mult_list", "=", "width_mult_list", ")", ",", "\n", "'residual'", ":", "lambda", "C_in", ",", "C_out", ",", "stride", ",", "slimmable", ",", "width_mult_list", ":", "BasicResidual", "(", "C_in", ",", "C_out", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "dilation", "=", "1", ",", "slimmable", "=", "slimmable", ",", "width_mult_list", "=", "width_mult_list", ")", ",", "\n", "'dwsblock'", ":", "lambda", "C_in", ",", "C_out", ",", "stride", ",", "slimmable", ",", "width_mult_list", ":", "DwsBlock", "(", "C_in", ",", "C_out", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "dilation", "=", "1", ",", "slimmable", "=", "slimmable", ",", "width_mult_list", "=", "width_mult_list", ")", ",", "\n", "}", "\n", "\n", ""]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.add_path": [[20, 23], ["sys.path.insert"], "function", ["None"], ["def", "add_path", "(", "path", ")", ":", "\n", "    ", "if", "path", "not", "in", "sys", ".", "path", ":", "\n", "        ", "sys", ".", "path", ".", "insert", "(", "0", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.operations_bk.count_custom": [[53, 55], ["None"], "function", ["None"], ["    ", "m", ".", "total_ops", "+=", "0", "\n", "\n", "", "custom_ops", "=", "{", "QConv2d", ":", "count_convNd", ",", "QConvTranspose2d", ":", "count_convNd", ",", "QuantMeasure", ":", "count_custom", ",", "nn", ".", "InstanceNorm2d", ":", "count_custom", "}", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.MixedOp.__init__": [[66, 70], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.Cutout.__init__"], ["        ", "super", "(", "MixedOp", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_op", "=", "OPS", "[", "PRIMITIVES", "[", "op_idx", "]", "]", "(", "C_in", ",", "C_out", ",", "stride", ",", "slimmable", "=", "False", ",", "width_mult_list", "=", "[", "1.", "]", ")", "\n", "self", ".", "quantize", "=", "quantize", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.MixedOp.forward": [[71, 73], ["model_infer.MixedOp._op"], "methods", ["None"], ["        ", "return", "self", ".", "_op", "(", "x", ",", "quantize", "=", "self", ".", "quantize", ")", "\n", "\n", "", "def", "forward_latency", "(", "self", ",", "size", ")", ":", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.MixedOp.forward_latency": [[74, 78], ["model_infer.MixedOp._op.forward_latency"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.MixedOp.forward_latency"], ["# int: force #channel; tensor: arch_ratio; float(<=1): force width", "\n", "        ", "latency", ",", "size_out", "=", "self", ".", "_op", ".", "forward_latency", "(", "size", ")", "\n", "return", "latency", ",", "size_out", "\n", "\n", "", "def", "forward_flops", "(", "self", ",", "size", ")", ":", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.MixedOp.forward_flops": [[79, 84], ["model_infer.MixedOp._op.forward_flops"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.Cell.forward_flops"], ["# int: force #channel; tensor: arch_ratio; float(<=1): force width", "\n", "        ", "flops", ",", "size_out", "=", "self", ".", "_op", ".", "forward_flops", "(", "size", ",", "quantize", "=", "self", ".", "quantize", ")", "\n", "\n", "return", "flops", ",", "size_out", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.SingleOp.__init__": [[86, 90], ["torch.Module.__init__", "op"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.Cutout.__init__"], ["    ", "def", "__init__", "(", "self", ",", "op", ",", "C_in", ",", "C_out", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "quantize", "=", "True", ")", ":", "\n", "        ", "super", "(", "SingleOp", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_op", "=", "op", "(", "C_in", ",", "C_out", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "slimmable", "=", "False", ",", "width_mult_list", "=", "[", "1.", "]", ")", "\n", "self", ".", "quantize", "=", "quantize", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.SingleOp.forward": [[91, 95], ["model_infer.SingleOp._op"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "result", "=", "self", ".", "_op", "(", "x", ",", "quantize", "=", "self", ".", "quantize", ")", "\n", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.SingleOp.forward_flops": [[96, 100], ["model_infer.SingleOp._op.forward_flops"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.Cell.forward_flops"], ["", "def", "forward_flops", "(", "self", ",", "size", ")", ":", "\n", "        ", "flops", ",", "size_out", "=", "self", ".", "_op", ".", "forward_flops", "(", "size", ",", "quantize", "=", "self", ".", "quantize", ")", "\n", "\n", "return", "flops", ",", "size_out", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.NAS_GAN_Infer.__init__": [[127, 178], ["torch.Module.__init__", "torch.softmax().argmax", "torch.softmax().argmax", "torch.softmax().argmax", "torch.softmax().argmax", "torch.softmax().argmax", "torch.softmax().argmax", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "operations.Conv", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "operations.Conv", "operations.Conv", "operations.Conv", "operations.Conv", "operations.Conv", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Tanh", "torch.Tanh", "torch.Tanh", "model_infer.NAS_GAN_Infer.cells.append", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "torch.L1Loss", "torch.L1Loss", "torch.L1Loss", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax().argmax", "torch.softmax().argmax", "torch.softmax().argmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "model_infer.Cell", "util_gan.vgg_feature.VGGFeature", "torch.softmax", "torch.softmax", "torch.softmax", "range", "range", "range", "range"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.Cutout.__init__"], ["quantize_list_sh", "=", "F", ".", "softmax", "(", "beta_sh", ",", "dim", "=", "-", "1", ")", ".", "argmax", "(", "-", "1", ")", "==", "1", "\n", "", "elif", "quantize", ":", "\n", "            ", "quantize_list", "=", "[", "True", "for", "_", "in", "range", "(", "layers", ")", "]", "\n", "quantize_list_sh", "=", "[", "True", "for", "_", "in", "range", "(", "beta_sh", ".", "size", "(", "0", ")", ")", "]", "\n", "", "else", ":", "\n", "            ", "quantize_list", "=", "[", "False", "for", "_", "in", "range", "(", "layers", ")", "]", "\n", "quantize_list_sh", "=", "[", "False", "for", "_", "in", "range", "(", "beta_sh", ".", "size", "(", "0", ")", ")", "]", "\n", "\n", "", "ratio_list", "=", "F", ".", "softmax", "(", "ratio", ",", "dim", "=", "-", "1", ")", ".", "argmax", "(", "-", "1", ")", "\n", "ratio_list_sh", "=", "F", ".", "softmax", "(", "ratio_sh", ",", "dim", "=", "-", "1", ")", ".", "argmax", "(", "-", "1", ")", "\n", "\n", "self", ".", "vgg", "=", "torch", ".", "nn", ".", "DataParallel", "(", "VGGFeature", "(", ")", ")", ".", "cuda", "(", ")", "\n", "\n", "# Construct Stem", "\n", "self", ".", "stem", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "stem", ".", "append", "(", "SingleOp", "(", "ConvNorm", ",", "3", ",", "make_divisible", "(", "64", "*", "width_mult_list_sh", "[", "ratio_list_sh", "[", "0", "]", "]", ")", ",", "7", ",", "quantize", "=", "quantize_list_sh", "[", "0", "]", ")", ")", "\n", "\n", "in_features", "=", "64", "\n", "out_features", "=", "in_features", "*", "2", "\n", "\n", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "            ", "self", ".", "stem", ".", "append", "(", "SingleOp", "(", "ConvNorm", ",", "make_divisible", "(", "in_features", "*", "width_mult_list_sh", "[", "ratio_list_sh", "[", "i", "]", "]", ")", ",", "make_divisible", "(", "out_features", "*", "width_mult_list_sh", "[", "ratio_list_sh", "[", "i", "+", "1", "]", "]", ")", ",", "3", ",", "stride", "=", "2", ",", "quantize", "=", "quantize_list_sh", "[", "1", "+", "i", "]", ")", ")", "\n", "in_features", "=", "out_features", "\n", "out_features", "=", "in_features", "*", "2", "\n", "\n", "# Construct Blocks", "\n", "", "self", ".", "cells", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "layers", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "self", ".", "cells", ".", "append", "(", "MixedOp", "(", "make_divisible", "(", "in_features", "*", "width_mult_list_sh", "[", "ratio_list_sh", "[", "self", ".", "len_stem", "-", "1", "]", "]", ")", ",", "make_divisible", "(", "in_features", "*", "width_mult_list", "[", "ratio_list", "[", "i", "]", "]", ")", ",", "op_idx_list", "[", "i", "]", ",", "quantize_list", "[", "i", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "cells", ".", "append", "(", "MixedOp", "(", "make_divisible", "(", "in_features", "*", "width_mult_list", "[", "ratio_list", "[", "i", "-", "1", "]", "]", ")", ",", "make_divisible", "(", "in_features", "*", "width_mult_list", "[", "ratio_list", "[", "i", "]", "]", ")", ",", "op_idx_list", "[", "i", "]", ",", "quantize_list", "[", "i", "]", ")", ")", "\n", "\n", "# Construct Header", "\n", "", "", "self", ".", "header", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "out_features", "=", "in_features", "//", "2", "\n", "\n", "self", ".", "header", ".", "append", "(", "SingleOp", "(", "ConvTranspose2dNorm", ",", "make_divisible", "(", "in_features", "*", "width_mult_list", "[", "ratio_list", "[", "self", ".", "_layers", "-", "1", "]", "]", ")", ",", "make_divisible", "(", "out_features", "*", "width_mult_list_sh", "[", "ratio_list_sh", "[", "self", ".", "len_stem", "]", "]", ")", ",", "3", ",", "stride", "=", "2", ",", "quantize", "=", "quantize_list_sh", "[", "self", ".", "len_stem", "]", ")", ")", "\n", "\n", "in_features", "=", "out_features", "\n", "out_features", "=", "in_features", "//", "2", "\n", "\n", "self", ".", "header", ".", "append", "(", "SingleOp", "(", "ConvTranspose2dNorm", ",", "make_divisible", "(", "in_features", "*", "width_mult_list_sh", "[", "ratio_list_sh", "[", "self", ".", "len_stem", "]", "]", ")", ",", "make_divisible", "(", "out_features", "*", "width_mult_list_sh", "[", "ratio_list_sh", "[", "self", ".", "len_stem", "+", "1", "]", "]", ")", ",", "3", ",", "stride", "=", "2", ",", "quantize", "=", "quantize_list_sh", "[", "self", ".", "len_stem", "+", "1", "]", ")", ")", "\n", "\n", "self", ".", "header", ".", "append", "(", "SingleOp", "(", "Conv", ",", "make_divisible", "(", "64", "*", "width_mult_list_sh", "[", "ratio_list_sh", "[", "self", ".", "len_stem", "+", "1", "]", "]", ")", ",", "3", ",", "7", ",", "quantize", "=", "quantize_list_sh", "[", "self", ".", "len_stem", "+", "2", "]", ")", ")", "\n", "\n", "self", ".", "tanh", "=", "nn", ".", "Tanh", "(", ")", "\n", "\n", "\n", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.NAS_GAN_Infer.forward": [[180, 198], ["model_infer.NAS_GAN_Infer.conv_first", "enumerate", "model_infer.NAS_GAN_Infer.trunk_conv", "model_infer.NAS_GAN_Infer.lrelu", "model_infer.NAS_GAN_Infer.lrelu", "model_infer.NAS_GAN_Infer.conv_last", "cell", "model_infer.NAS_GAN_Infer.upconv1", "model_infer.NAS_GAN_Infer.upconv2", "model_infer.NAS_GAN_Infer.lrelu", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "model_infer.NAS_GAN_Infer.HRconv", "model_infer.NAS_GAN_Infer.tanh"], "methods", ["None"], ["for", "i", ",", "module", "in", "enumerate", "(", "self", ".", "stem", ")", ":", "\n", "            ", "out", "=", "module", "(", "out", ")", "\n", "\n", "", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "            ", "out", "=", "cell", "(", "out", ")", "\n", "\n", "", "for", "i", ",", "module", "in", "enumerate", "(", "self", ".", "header", ")", ":", "\n", "            ", "out", "=", "module", "(", "out", ")", "\n", "\n", "", "out", "=", "self", ".", "tanh", "(", "out", ")", "\n", "\n", "return", "out", "\n", "###################################", "\n", "\n", "", "def", "forward_flops", "(", "self", ",", "size", ")", ":", "\n", "        ", "flops_total", "=", "[", "]", "\n", "\n", "for", "i", ",", "module", "in", "enumerate", "(", "self", ".", "stem", ")", ":", "\n", "            ", "flops", ",", "size", "=", "module", ".", "forward_flops", "(", "size", ")", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.NAS_GAN_Infer.forward_flops": [[200, 228], ["model_infer.NAS_GAN_Infer.conv_first.forward_flops", "flops_total.append", "enumerate", "model_infer.NAS_GAN_Infer.trunk_conv.forward_flops", "flops_total.append", "model_infer.NAS_GAN_Infer.upconv1.forward_flops", "flops_total.append", "model_infer.NAS_GAN_Infer.upconv2.forward_flops", "flops_total.append", "model_infer.NAS_GAN_Infer.HRconv.forward_flops", "flops_total.append", "model_infer.NAS_GAN_Infer.conv_last.forward_flops", "flops_total.append", "sum", "cell.forward_flops", "flops_total.append"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.Cell.forward_flops", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.Cell.forward_flops", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.Cell.forward_flops", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.Cell.forward_flops", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.Cell.forward_flops", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.Cell.forward_flops", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.Cell.forward_flops"], ["\n", "", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "            ", "flops", ",", "size", "=", "cell", ".", "forward_flops", "(", "size", ")", "\n", "flops_total", ".", "append", "(", "flops", ")", "\n", "\n", "", "for", "i", ",", "module", "in", "enumerate", "(", "self", ".", "header", ")", ":", "\n", "            ", "flops", ",", "size", "=", "module", ".", "forward_flops", "(", "size", ")", "\n", "flops_total", ".", "append", "(", "flops", ")", "\n", "\n", "", "return", "sum", "(", "flops_total", ")", "\n", "\n", "###################################", "\n", "\n", "", "def", "gram", "(", "self", ",", "x", ")", ":", "\n", "        ", "(", "bs", ",", "ch", ",", "h", ",", "w", ")", "=", "x", ".", "size", "(", ")", "\n", "f", "=", "x", ".", "view", "(", "bs", ",", "ch", ",", "w", "*", "h", ")", "\n", "f_T", "=", "f", ".", "transpose", "(", "1", ",", "2", ")", "\n", "G", "=", "f", ".", "bmm", "(", "f_T", ")", "/", "(", "ch", "*", "h", "*", "w", ")", "\n", "return", "G", "\n", "\n", "\n", "", "def", "_criterion", "(", "self", ",", "y_hat", ",", "x", ")", ":", "\n", "        ", "base_loss", "=", "self", ".", "base_weight", "*", "nn", ".", "L1Loss", "(", ")", "(", "y_hat", ",", "x", ")", "\n", "\n", "y_c_features", "=", "self", ".", "vgg", "(", "x", ")", "\n", "y_hat_features", "=", "self", ".", "vgg", "(", "y_hat", ")", "\n", "\n", "y_hat_gram", "=", "[", "self", ".", "gram", "(", "fmap", ")", "for", "fmap", "in", "y_hat_features", "]", "\n", "x_gram", "=", "[", "self", ".", "gram", "(", "fmap", ")", "for", "fmap", "in", "y_c_features", "]", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.NAS_GAN_Infer.gram": [[231, 237], ["x.size", "x.view", "x.view.transpose", "x.view.bmm"], "methods", ["None"], ["for", "j", "in", "range", "(", "4", ")", ":", "\n", "            ", "style_loss", "+=", "self", ".", "style_weight", "*", "nn", ".", "functional", ".", "mse_loss", "(", "y_hat_gram", "[", "j", "]", ",", "x_gram", "[", "j", "]", ")", "\n", "\n", "", "recon", "=", "y_c_features", "[", "1", "]", "\n", "recon_hat", "=", "y_hat_features", "[", "1", "]", "\n", "content_loss", "=", "self", ".", "content_weight", "*", "nn", ".", "L1Loss", "(", ")", "(", "recon_hat", ",", "recon", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.NAS_GAN_Infer._criterion": [[266, 281], ["model_infer.NAS_GAN_Infer.vgg", "model_infer.NAS_GAN_Infer.vgg", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "model_infer.NAS_GAN_Infer.loss_func", "model_infer.NAS_GAN_Infer.loss_func", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs"], "methods", ["None"], []], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.NAS_GAN_Infer._loss": [[283, 288], ["model_infer.NAS_GAN_Infer.", "model_infer.NAS_GAN_Infer._criterion"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.NAS_GAN_Infer._criterion"], []], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.make_divisible": [[17, 31], ["max", "int"], "function", ["None"], ["    ", "\"\"\"\n    forked from slim:\n    https://github.com/tensorflow/models/blob/\\\n    0344c5503ee55e24f0de7f37336a6e08f10976fd/\\\n    research/slim/nets/mobilenet/mobilenet.py#L62-L69\n    \"\"\"", "\n", "if", "min_value", "is", "None", ":", "\n", "        ", "min_value", "=", "divisor", "\n", "", "new_v", "=", "max", "(", "min_value", ",", "int", "(", "v", "+", "divisor", "/", "2", ")", "//", "divisor", "*", "divisor", ")", "\n", "# Make sure that round down does not go down by more than 10%.", "\n", "if", "new_v", "<", "0.9", "*", "v", ":", "\n", "        ", "new_v", "+=", "divisor", "\n", "", "return", "new_v", "\n", "\n", "# https://github.com/YongfeiYan/Gumbel_Softmax_VAE/blob/master/gumbel_softmax_vae.py", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.sample_gumbel": [[33, 37], ["torch.rand", "torch.rand", "torch.rand", "U.cuda.cuda", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log"], "function", ["None"], ["    ", "U", "=", "torch", ".", "rand", "(", "shape", ")", "\n", "U", "=", "U", ".", "cuda", "(", ")", "\n", "return", "-", "torch", ".", "log", "(", "-", "torch", ".", "log", "(", "U", "+", "eps", ")", "+", "eps", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.gumbel_softmax_sample": [[39, 42], ["torch.softmax", "model_infer.sample_gumbel", "logits.size"], "function", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.sample_gumbel"], ["    ", "y", "=", "logits", "+", "sample_gumbel", "(", "logits", ".", "size", "(", ")", ")", "\n", "return", "F", ".", "softmax", "(", "y", "/", "temperature", ",", "dim", "=", "-", "1", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.gumbel_softmax": [[44, 63], ["model_infer.gumbel_softmax_sample", "gumbel_softmax_sample.size", "gumbel_softmax_sample.max", "torch.zeros_like().view", "torch.zeros_like().view", "torch.zeros_like().view", "y_hard.view.scatter_", "y_hard.view.view", "ind.view", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like"], "function", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.gumbel_softmax_sample"], ["    ", "\"\"\"\n    ST-gumple-softmax\n    input: [*, n_class]\n    return: flatten --> [*, n_class] an one-hot vector\n    \"\"\"", "\n", "y", "=", "gumbel_softmax_sample", "(", "logits", ",", "temperature", ")", "\n", "\n", "if", "not", "hard", ":", "\n", "        ", "return", "y", "\n", "\n", "", "shape", "=", "y", ".", "size", "(", ")", "\n", "_", ",", "ind", "=", "y", ".", "max", "(", "dim", "=", "-", "1", ")", "\n", "y_hard", "=", "torch", ".", "zeros_like", "(", "y", ")", ".", "view", "(", "-", "1", ",", "shape", "[", "-", "1", "]", ")", "\n", "y_hard", ".", "scatter_", "(", "1", ",", "ind", ".", "view", "(", "-", "1", ",", "1", ")", ",", "1", ")", "\n", "y_hard", "=", "y_hard", ".", "view", "(", "*", "shape", ")", "\n", "# Set gradients w.r.t. y_hard gradients w.r.t. y", "\n", "y_hard", "=", "(", "y_hard", "-", "y", ")", ".", "detach", "(", ")", "+", "y", "\n", "return", "y_hard", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.quantize.UniformQuantize.forward": [[43, 77], ["ctx.mark_dirty", "input.clone", "quantize.calculate_qparams", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "input.clone.add_().div_", "input.clone.clamp_().round_", "input.clone.new().uniform_", "input.clone.add_", "input.clone.mul_().add_", "input.clone.add_", "input.clone.clamp_", "input.clone.new", "input.clone.mul_"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.quantize.calculate_qparams"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ",", "num_bits", "=", "None", ",", "qparams", "=", "None", ",", "flatten_dims", "=", "_DEFAULT_FLATTEN", ",", "\n", "reduce_dim", "=", "0", ",", "dequantize", "=", "True", ",", "signed", "=", "False", ",", "stochastic", "=", "False", ",", "inplace", "=", "False", ")", ":", "\n", "\n", "        ", "ctx", ".", "inplace", "=", "inplace", "\n", "\n", "if", "ctx", ".", "inplace", ":", "\n", "            ", "ctx", ".", "mark_dirty", "(", "input", ")", "\n", "output", "=", "input", "\n", "", "else", ":", "\n", "            ", "output", "=", "input", ".", "clone", "(", ")", "\n", "\n", "", "if", "qparams", "is", "None", ":", "\n", "            ", "assert", "num_bits", "is", "not", "None", ",", "\"either provide qparams of num_bits to quantize\"", "\n", "qparams", "=", "calculate_qparams", "(", "\n", "input", ",", "num_bits", "=", "num_bits", ",", "flatten_dims", "=", "flatten_dims", ",", "reduce_dim", "=", "reduce_dim", ")", "\n", "\n", "", "zero_point", "=", "qparams", ".", "zero_point", "\n", "num_bits", "=", "qparams", ".", "num_bits", "\n", "qmin", "=", "-", "(", "2.", "**", "(", "num_bits", "-", "1", ")", ")", "if", "signed", "else", "0.", "\n", "qmax", "=", "qmin", "+", "2.", "**", "num_bits", "-", "1.", "\n", "scale", "=", "qparams", ".", "range", "/", "(", "qmax", "-", "qmin", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "output", ".", "add_", "(", "qmin", "*", "scale", "-", "zero_point", ")", ".", "div_", "(", "scale", ")", "\n", "if", "stochastic", ":", "\n", "                ", "noise", "=", "output", ".", "new", "(", "output", ".", "shape", ")", ".", "uniform_", "(", "-", "0.5", ",", "0.5", ")", "\n", "output", ".", "add_", "(", "noise", ")", "\n", "# quantize", "\n", "", "output", ".", "clamp_", "(", "qmin", ",", "qmax", ")", ".", "round_", "(", ")", "\n", "\n", "if", "dequantize", ":", "\n", "                ", "output", ".", "mul_", "(", "scale", ")", ".", "add_", "(", "\n", "zero_point", "-", "qmin", "*", "scale", ")", "# dequantize", "\n", "", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.quantize.UniformQuantize.backward": [[78, 83], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "# straight-through estimator", "\n", "        ", "grad_input", "=", "grad_output", "\n", "return", "grad_input", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.quantize.UniformQuantizeGrad.forward": [[87, 99], ["None"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ",", "num_bits", "=", "None", ",", "qparams", "=", "None", ",", "flatten_dims", "=", "_DEFAULT_FLATTEN_GRAD", ",", "\n", "reduce_dim", "=", "0", ",", "dequantize", "=", "True", ",", "signed", "=", "False", ",", "stochastic", "=", "True", ")", ":", "\n", "        ", "ctx", ".", "num_bits", "=", "num_bits", "\n", "ctx", ".", "qparams", "=", "qparams", "\n", "ctx", ".", "flatten_dims", "=", "flatten_dims", "\n", "ctx", ".", "stochastic", "=", "stochastic", "\n", "ctx", ".", "signed", "=", "signed", "\n", "ctx", ".", "dequantize", "=", "dequantize", "\n", "ctx", ".", "reduce_dim", "=", "reduce_dim", "\n", "ctx", ".", "inplace", "=", "False", "\n", "return", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.quantize.UniformQuantizeGrad.backward": [[100, 113], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "quantize.Quantize", "quantize.calculate_qparams"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.quantize.Quantize", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.quantize.calculate_qparams"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "qparams", "=", "ctx", ".", "qparams", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "if", "qparams", "is", "None", ":", "\n", "                ", "assert", "ctx", ".", "num_bits", "is", "not", "None", ",", "\"either provide qparams of num_bits to quantize\"", "\n", "qparams", "=", "calculate_qparams", "(", "\n", "grad_output", ",", "num_bits", "=", "ctx", ".", "num_bits", ",", "flatten_dims", "=", "ctx", ".", "flatten_dims", ",", "reduce_dim", "=", "ctx", ".", "reduce_dim", ",", "reduce_type", "=", "'extreme'", ")", "\n", "\n", "", "grad_input", "=", "Quantize", "(", "grad_output", ",", "num_bits", "=", "None", ",", "\n", "qparams", "=", "qparams", ",", "flatten_dims", "=", "ctx", ".", "flatten_dims", ",", "reduce_dim", "=", "ctx", ".", "reduce_dim", ",", "\n", "dequantize", "=", "True", ",", "signed", "=", "ctx", ".", "signed", ",", "stochastic", "=", "ctx", ".", "stochastic", ",", "inplace", "=", "False", ")", "\n", "", "return", "grad_input", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.quantize.QuantMeasure.__init__": [[143, 157], ["torch.Module.__init__", "quantize.QuantMeasure.register_buffer", "quantize.QuantMeasure.register_buffer", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "quantize.QuantMeasure.register_buffer", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.Cutout.__init__"], ["def", "__init__", "(", "self", ",", "num_bits", "=", "8", ",", "shape_measure", "=", "(", "1", ",", ")", ",", "flatten_dims", "=", "_DEFAULT_FLATTEN", ",", "\n", "inplace", "=", "False", ",", "dequantize", "=", "True", ",", "stochastic", "=", "False", ",", "momentum", "=", "0.1", ",", "measure", "=", "False", ")", ":", "\n", "        ", "super", "(", "QuantMeasure", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "register_buffer", "(", "'running_zero_point'", ",", "torch", ".", "zeros", "(", "*", "shape_measure", ")", ".", "cuda", "(", ")", ")", "\n", "self", ".", "register_buffer", "(", "'running_range'", ",", "torch", ".", "zeros", "(", "*", "shape_measure", ")", ".", "cuda", "(", ")", ")", "\n", "self", ".", "measure", "=", "measure", "\n", "if", "self", ".", "measure", ":", "\n", "            ", "self", ".", "register_buffer", "(", "'num_measured'", ",", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "", "self", ".", "flatten_dims", "=", "flatten_dims", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "dequantize", "=", "dequantize", "\n", "self", ".", "stochastic", "=", "stochastic", "\n", "self", ".", "inplace", "=", "inplace", "\n", "self", ".", "num_bits", "=", "num_bits", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.quantize.QuantMeasure.forward": [[158, 183], ["QParams", "quantize.Quantize", "quantize.calculate_qparams", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "quantize.QuantMeasure.running_zero_point.mul_().add_", "quantize.QuantMeasure.running_range.mul_().add_", "quantize.QuantMeasure.running_zero_point.mul_", "calculate_qparams.zero_point.cuda", "quantize.QuantMeasure.running_range.mul_", "calculate_qparams.range.cuda"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.quantize.Quantize", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.quantize.calculate_qparams"], ["", "def", "forward", "(", "self", ",", "input", ",", "qparams", "=", "None", ")", ":", "\n", "\n", "        ", "if", "self", ".", "training", "or", "self", ".", "measure", ":", "\n", "            ", "if", "qparams", "is", "None", ":", "\n", "                ", "qparams", "=", "calculate_qparams", "(", "\n", "input", ",", "num_bits", "=", "self", ".", "num_bits", ",", "flatten_dims", "=", "self", ".", "flatten_dims", ",", "reduce_dim", "=", "0", ")", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "if", "self", ".", "measure", ":", "\n", "                    ", "momentum", "=", "self", ".", "num_measured", "/", "(", "self", ".", "num_measured", "+", "1", ")", "\n", "self", ".", "num_measured", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "momentum", "=", "self", ".", "momentum", "\n", "", "self", ".", "running_zero_point", ".", "mul_", "(", "momentum", ")", ".", "add_", "(", "\n", "qparams", ".", "zero_point", ".", "cuda", "(", ")", "*", "(", "1", "-", "momentum", ")", ")", "\n", "self", ".", "running_range", ".", "mul_", "(", "momentum", ")", ".", "add_", "(", "\n", "qparams", ".", "range", ".", "cuda", "(", ")", "*", "(", "1", "-", "momentum", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "qparams", "=", "QParams", "(", "range", "=", "self", ".", "running_range", ",", "\n", "zero_point", "=", "self", ".", "running_zero_point", ",", "num_bits", "=", "self", ".", "num_bits", ")", "\n", "", "if", "self", ".", "measure", ":", "\n", "            ", "return", "input", "\n", "", "else", ":", "\n", "            ", "q_input", "=", "Quantize", "(", "input", ",", "qparams", "=", "qparams", ",", "dequantize", "=", "self", ".", "dequantize", ",", "\n", "stochastic", "=", "self", ".", "stochastic", ",", "inplace", "=", "self", ".", "inplace", ")", "\n", "return", "q_input", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.quantize.QConv2d.__init__": [[188, 194], ["torch.Conv2d.__init__"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.Cutout.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "\n", "stride", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "True", ",", "num_bits", "=", "8", ",", "num_bits_weight", "=", "8", ")", ":", "\n", "        ", "super", "(", "QConv2d", ",", "self", ")", ".", "__init__", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "\n", "stride", ",", "padding", ",", "dilation", ",", "groups", ",", "bias", ")", "\n", "self", ".", "num_bits", "=", "num_bits", "\n", "self", ".", "num_bits_weight", "=", "num_bits_weight", "or", "num_bits", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.quantize.QConv2d.forward": [[196, 220], ["quantize.QConv2d.quantize_input", "quantize.calculate_qparams", "quantize.Quantize", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "hasattr", "quantize.QuantMeasure", "quantize.Quantize"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.quantize.calculate_qparams", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.quantize.Quantize", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.quantize.Quantize"], ["", "def", "forward", "(", "self", ",", "input", ",", "quantize", "=", "False", ")", ":", "\n", "        ", "if", "quantize", ":", "\n", "            ", "if", "not", "hasattr", "(", "self", ",", "'quantize_input'", ")", ":", "\n", "                ", "self", ".", "quantize_input", "=", "QuantMeasure", "(", "self", ".", "num_bits", ",", "shape_measure", "=", "(", "1", ",", "1", ",", "1", ",", "1", ")", ",", "flatten_dims", "=", "(", "1", ",", "-", "1", ")", ")", "\n", "\n", "", "qinput", "=", "self", ".", "quantize_input", "(", "input", ")", "\n", "weight_qparams", "=", "calculate_qparams", "(", "\n", "self", ".", "weight", ",", "num_bits", "=", "self", ".", "num_bits_weight", ",", "flatten_dims", "=", "(", "1", ",", "-", "1", ")", ",", "reduce_dim", "=", "None", ")", "\n", "qweight", "=", "Quantize", "(", "self", ".", "weight", ",", "qparams", "=", "weight_qparams", ")", "\n", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "                ", "qbias", "=", "Quantize", "(", "\n", "self", ".", "bias", ",", "num_bits", "=", "self", ".", "num_bits_weight", "+", "self", ".", "num_bits", ",", "\n", "flatten_dims", "=", "(", "0", ",", "-", "1", ")", ")", "\n", "", "else", ":", "\n", "                ", "qbias", "=", "None", "\n", "\n", "", "output", "=", "F", ".", "conv2d", "(", "qinput", ",", "qweight", ",", "qbias", ",", "self", ".", "stride", ",", "\n", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "groups", ")", "\n", "\n", "", "else", ":", "\n", "            ", "output", "=", "F", ".", "conv2d", "(", "input", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "self", ".", "stride", ",", "\n", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "groups", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.quantize.QConvTranspose2d.__init__": [[225, 231], ["torch.ConvTranspose2d.__init__"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.Cutout.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "\n", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "True", ",", "num_bits", "=", "8", ",", "num_bits_weight", "=", "8", ")", ":", "\n", "        ", "super", "(", "QConvTranspose2d", ",", "self", ")", ".", "__init__", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "\n", "stride", ",", "padding", ",", "output_padding", ",", "groups", ",", "bias", ",", "dilation", ")", "\n", "self", ".", "num_bits", "=", "num_bits", "\n", "self", ".", "num_bits_weight", "=", "num_bits_weight", "or", "num_bits", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.quantize.QConvTranspose2d.forward": [[233, 257], ["quantize.QConvTranspose2d.quantize_input", "quantize.calculate_qparams", "quantize.Quantize", "torch.conv_transpose2d", "torch.conv_transpose2d", "torch.conv_transpose2d", "torch.conv_transpose2d", "torch.conv_transpose2d", "torch.conv_transpose2d", "hasattr", "quantize.QuantMeasure", "quantize.Quantize"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.quantize.calculate_qparams", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.quantize.Quantize", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.quantize.Quantize"], ["", "def", "forward", "(", "self", ",", "input", ",", "quantize", "=", "False", ")", ":", "\n", "        ", "if", "quantize", ":", "\n", "            ", "if", "not", "hasattr", "(", "self", ",", "'quantize_input'", ")", ":", "\n", "                ", "self", ".", "quantize_input", "=", "QuantMeasure", "(", "self", ".", "num_bits", ",", "shape_measure", "=", "(", "1", ",", "1", ",", "1", ",", "1", ")", ",", "flatten_dims", "=", "(", "1", ",", "-", "1", ")", ")", "\n", "\n", "", "qinput", "=", "self", ".", "quantize_input", "(", "input", ")", "\n", "weight_qparams", "=", "calculate_qparams", "(", "\n", "self", ".", "weight", ",", "num_bits", "=", "self", ".", "num_bits_weight", ",", "flatten_dims", "=", "(", "1", ",", "-", "1", ")", ",", "reduce_dim", "=", "None", ")", "\n", "qweight", "=", "Quantize", "(", "self", ".", "weight", ",", "qparams", "=", "weight_qparams", ")", "\n", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "                ", "qbias", "=", "Quantize", "(", "\n", "self", ".", "bias", ",", "num_bits", "=", "self", ".", "num_bits_weight", "+", "self", ".", "num_bits", ",", "\n", "flatten_dims", "=", "(", "0", ",", "-", "1", ")", ")", "\n", "", "else", ":", "\n", "                ", "qbias", "=", "None", "\n", "\n", "", "output", "=", "F", ".", "conv_transpose2d", "(", "qinput", ",", "qweight", ",", "qbias", ",", "self", ".", "stride", ",", "\n", "self", ".", "padding", ",", "self", ".", "output_padding", ",", "self", ".", "groups", ",", "self", ".", "dilation", ")", "\n", "\n", "", "else", ":", "\n", "            ", "output", "=", "F", ".", "conv_transpose2d", "(", "input", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "self", ".", "stride", ",", "\n", "self", ".", "padding", ",", "self", ".", "output_padding", ",", "self", ".", "groups", ",", "self", ".", "dilation", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.quantize.QLinear.__init__": [[262, 269], ["torch.Linear.__init__", "quantize.QuantMeasure"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.Cutout.__init__"], ["def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ",", "bias", "=", "True", ",", "num_bits", "=", "8", ",", "num_bits_weight", "=", "8", ",", "num_bits_grad", "=", "8", ",", "biprecision", "=", "True", ")", ":", "\n", "        ", "super", "(", "QLinear", ",", "self", ")", ".", "__init__", "(", "in_features", ",", "out_features", ",", "bias", ")", "\n", "self", ".", "num_bits", "=", "num_bits", "\n", "self", ".", "num_bits_weight", "=", "num_bits_weight", "or", "num_bits", "\n", "self", ".", "num_bits_grad", "=", "num_bits_grad", "\n", "self", ".", "biprecision", "=", "biprecision", "\n", "self", ".", "quantize_input", "=", "QuantMeasure", "(", "self", ".", "num_bits", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.quantize.QLinear.forward": [[270, 290], ["quantize.QLinear.quantize_input", "quantize.calculate_qparams", "quantize.Quantize", "quantize.Quantize", "torch.linear", "torch.linear", "torch.linear", "quantize.linear_biprec", "quantize.quantize_grad"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.quantize.calculate_qparams", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.quantize.Quantize", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.quantize.Quantize", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.quantize.linear_biprec", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.quantize.quantize_grad"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "qinput", "=", "self", ".", "quantize_input", "(", "input", ")", "\n", "weight_qparams", "=", "calculate_qparams", "(", "\n", "self", ".", "weight", ",", "num_bits", "=", "self", ".", "num_bits_weight", ",", "flatten_dims", "=", "(", "1", ",", "-", "1", ")", ",", "reduce_dim", "=", "None", ")", "\n", "qweight", "=", "Quantize", "(", "self", ".", "weight", ",", "qparams", "=", "weight_qparams", ")", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "qbias", "=", "Quantize", "(", "\n", "self", ".", "bias", ",", "num_bits", "=", "self", ".", "num_bits_weight", "+", "self", ".", "num_bits", ",", "\n", "flatten_dims", "=", "(", "0", ",", "-", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "qbias", "=", "None", "\n", "\n", "", "if", "not", "self", ".", "biprecision", "or", "self", ".", "num_bits_grad", "is", "None", ":", "\n", "            ", "output", "=", "F", ".", "linear", "(", "qinput", ",", "qweight", ",", "qbias", ")", "\n", "if", "self", ".", "num_bits_grad", "is", "not", "None", ":", "\n", "                ", "output", "=", "quantize_grad", "(", "\n", "output", ",", "num_bits", "=", "self", ".", "num_bits_grad", ")", "\n", "", "", "else", ":", "\n", "            ", "output", "=", "linear_biprec", "(", "qinput", ",", "qweight", ",", "qbias", ",", "self", ".", "num_bits_grad", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.quantize.RangeBN.__init__": [[295, 312], ["torch.Module.__init__", "quantize.RangeBN.register_buffer", "quantize.RangeBN.register_buffer", "quantize.QuantMeasure", "quantize.RangeBN.reset_params", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.Cutout.__init__", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.quantize.RangeBN.reset_params"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ",", "dim", "=", "1", ",", "momentum", "=", "0.1", ",", "affine", "=", "True", ",", "num_chunks", "=", "16", ",", "eps", "=", "1e-5", ",", "num_bits", "=", "8", ",", "num_bits_grad", "=", "8", ")", ":", "\n", "        ", "super", "(", "RangeBN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "register_buffer", "(", "'running_mean'", ",", "torch", ".", "zeros", "(", "num_features", ")", ")", "\n", "self", ".", "register_buffer", "(", "'running_var'", ",", "torch", ".", "zeros", "(", "num_features", ")", ")", "\n", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "dim", "=", "dim", "\n", "if", "affine", ":", "\n", "            ", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "num_features", ")", ")", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "num_features", ")", ")", "\n", "", "self", ".", "num_bits", "=", "num_bits", "\n", "self", ".", "num_bits_grad", "=", "num_bits_grad", "\n", "self", ".", "quantize_input", "=", "QuantMeasure", "(", "\n", "self", ".", "num_bits", ",", "inplace", "=", "True", ",", "shape_measure", "=", "(", "1", ",", "1", ",", "1", ",", "1", ")", ",", "flatten_dims", "=", "(", "1", ",", "-", "1", ")", ")", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "num_chunks", "=", "num_chunks", "\n", "self", ".", "reset_params", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.quantize.RangeBN.reset_params": [[313, 318], ["quantize.RangeBN.weight.data.uniform_", "quantize.RangeBN.bias.data.zero_"], "methods", ["None"], ["", "def", "reset_params", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "weight", "is", "not", "None", ":", "\n", "            ", "self", ".", "weight", ".", "data", ".", "uniform_", "(", ")", "\n", "", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "self", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.quantize.RangeBN.forward": [[319, 367], ["quantize.RangeBN.quantize_input", "x.unsqueeze().unsqueeze.unsqueeze().unsqueeze.dim", "x.unsqueeze().unsqueeze.unsqueeze().unsqueeze.unsqueeze().unsqueeze", "x.unsqueeze().unsqueeze.unsqueeze().unsqueeze.transpose().contiguous", "y.view.view.view", "[].mean", "[].mean", "y.view.view.view().mean", "quantize.quantize_grad", "out.squeeze().squeeze.squeeze().squeeze.squeeze().squeeze", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "quantize.RangeBN.running_mean.mul_().add_", "quantize.RangeBN.running_var.mul_().add_", "y.view.view().mean.view", "scale.view", "qweight.view", "qbias.view", "out.squeeze().squeeze.squeeze().squeeze.size", "out.squeeze().squeeze.squeeze().squeeze.size", "x.unsqueeze().unsqueeze.unsqueeze().unsqueeze.unsqueeze", "x.unsqueeze().unsqueeze.unsqueeze().unsqueeze.transpose", "y.view.view.view", "out.squeeze().squeeze.squeeze().squeeze.squeeze", "y.view.view.max", "y.view.view.min", "math.log", "quantize.RangeBN.running_mean.mul_", "quantize.RangeBN.running_var.mul_", "y.view.view.size", "math.log"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.quantize.quantize_grad"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "quantize_input", "(", "x", ")", "\n", "if", "x", ".", "dim", "(", ")", "==", "2", ":", "# 1d", "\n", "            ", "x", "=", "x", ".", "unsqueeze", "(", "-", "1", ",", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n", "", "if", "self", ".", "training", ":", "\n", "            ", "B", ",", "C", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "y", "=", "x", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", "# C x B x H x W", "\n", "y", "=", "y", ".", "view", "(", "C", ",", "self", ".", "num_chunks", ",", "(", "B", "*", "H", "*", "W", ")", "//", "self", ".", "num_chunks", ")", "\n", "mean_max", "=", "y", ".", "max", "(", "-", "1", ")", "[", "0", "]", ".", "mean", "(", "-", "1", ")", "# C", "\n", "mean_min", "=", "y", ".", "min", "(", "-", "1", ")", "[", "0", "]", ".", "mean", "(", "-", "1", ")", "# C", "\n", "mean", "=", "y", ".", "view", "(", "C", ",", "-", "1", ")", ".", "mean", "(", "-", "1", ")", "# C", "\n", "scale_fix", "=", "(", "0.5", "*", "0.35", ")", "*", "(", "1", "+", "(", "math", ".", "pi", "*", "math", ".", "log", "(", "4", ")", ")", "**", "\n", "0.5", ")", "/", "(", "(", "2", "*", "math", ".", "log", "(", "y", ".", "size", "(", "-", "1", ")", ")", ")", "**", "0.5", ")", "\n", "\n", "scale", "=", "(", "mean_max", "-", "mean_min", ")", "*", "scale_fix", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "self", ".", "running_mean", ".", "mul_", "(", "self", ".", "momentum", ")", ".", "add_", "(", "\n", "mean", "*", "(", "1", "-", "self", ".", "momentum", ")", ")", "\n", "\n", "self", ".", "running_var", ".", "mul_", "(", "self", ".", "momentum", ")", ".", "add_", "(", "\n", "scale", "*", "(", "1", "-", "self", ".", "momentum", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "mean", "=", "self", ".", "running_mean", "\n", "scale", "=", "self", ".", "running_var", "\n", "# scale = quantize(scale, num_bits=self.num_bits, min_value=float(", "\n", "#     scale.min()), max_value=float(scale.max()))", "\n", "", "out", "=", "(", "x", "-", "mean", ".", "view", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", ")", "/", "(", "scale", ".", "view", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", "+", "self", ".", "eps", ")", "\n", "\n", "if", "self", ".", "weight", "is", "not", "None", ":", "\n", "            ", "qweight", "=", "self", ".", "weight", "\n", "# qweight = quantize(self.weight, num_bits=self.num_bits,", "\n", "#                    min_value=float(self.weight.min()),", "\n", "#                    max_value=float(self.weight.max()))", "\n", "out", "=", "out", "*", "qweight", ".", "view", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "\n", "", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "qbias", "=", "self", ".", "bias", "\n", "# qbias = quantize(self.bias, num_bits=self.num_bits)", "\n", "out", "=", "out", "+", "qbias", ".", "view", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "", "if", "self", ".", "num_bits_grad", "is", "not", "None", ":", "\n", "            ", "out", "=", "quantize_grad", "(", "\n", "out", ",", "num_bits", "=", "self", ".", "num_bits_grad", ",", "flatten_dims", "=", "(", "1", ",", "-", "1", ")", ")", "\n", "\n", "", "if", "out", ".", "size", "(", "3", ")", "==", "1", "and", "out", ".", "size", "(", "2", ")", "==", "1", ":", "\n", "            ", "out", "=", "out", ".", "squeeze", "(", "-", "1", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.quantize.RangeBN1d.__init__": [[372, 377], ["quantize.RangeBN.__init__", "quantize.QuantMeasure"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.Cutout.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ",", "dim", "=", "1", ",", "momentum", "=", "0.1", ",", "affine", "=", "True", ",", "num_chunks", "=", "16", ",", "eps", "=", "1e-5", ",", "num_bits", "=", "8", ",", "num_bits_grad", "=", "8", ")", ":", "\n", "        ", "super", "(", "RangeBN1d", ",", "self", ")", ".", "__init__", "(", "num_features", ",", "dim", ",", "momentum", ",", "\n", "affine", ",", "num_chunks", ",", "eps", ",", "num_bits", ",", "num_bits_grad", ")", "\n", "self", ".", "quantize_input", "=", "QuantMeasure", "(", "\n", "self", ".", "num_bits", ",", "inplace", "=", "True", ",", "shape_measure", "=", "(", "1", ",", "1", ")", ",", "flatten_dims", "=", "(", "1", ",", "-", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.quantize._deflatten_as": [[14, 17], ["x.view", "list", "x_full.dim", "x.dim"], "function", ["None"], ["def", "_deflatten_as", "(", "x", ",", "x_full", ")", ":", "\n", "    ", "shape", "=", "list", "(", "x", ".", "shape", ")", "+", "[", "1", "]", "*", "(", "x_full", ".", "dim", "(", ")", "-", "x", ".", "dim", "(", ")", ")", "\n", "return", "x", ".", "view", "(", "*", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.quantize.calculate_qparams": [[19, 39], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "x.flatten", "QParams", "x.flatten.dim", "quantize._deflatten_as", "quantize._deflatten_as", "quantize._deflatten_as", "quantize._deflatten_as", "x.flatten.min", "x.flatten.max", "min_values.mean.mean", "max_values.mean.mean", "x.flatten.min", "x.flatten.max", "min_values.mean.min", "max_values.mean.max"], "function", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.quantize._deflatten_as", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.quantize._deflatten_as", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.quantize._deflatten_as", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.quantize._deflatten_as"], ["", "def", "calculate_qparams", "(", "x", ",", "num_bits", ",", "flatten_dims", "=", "_DEFAULT_FLATTEN", ",", "reduce_dim", "=", "0", ",", "reduce_type", "=", "'mean'", ",", "keepdim", "=", "False", ",", "true_zero", "=", "False", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "x_flat", "=", "x", ".", "flatten", "(", "*", "flatten_dims", ")", "\n", "if", "x_flat", ".", "dim", "(", ")", "==", "1", ":", "\n", "            ", "min_values", "=", "_deflatten_as", "(", "x_flat", ".", "min", "(", ")", ",", "x", ")", "\n", "max_values", "=", "_deflatten_as", "(", "x_flat", ".", "max", "(", ")", ",", "x", ")", "\n", "", "else", ":", "\n", "            ", "min_values", "=", "_deflatten_as", "(", "x_flat", ".", "min", "(", "-", "1", ")", "[", "0", "]", ",", "x", ")", "\n", "max_values", "=", "_deflatten_as", "(", "x_flat", ".", "max", "(", "-", "1", ")", "[", "0", "]", ",", "x", ")", "\n", "", "if", "reduce_dim", "is", "not", "None", ":", "\n", "            ", "if", "reduce_type", "==", "'mean'", ":", "\n", "                ", "min_values", "=", "min_values", ".", "mean", "(", "reduce_dim", ",", "keepdim", "=", "keepdim", ")", "\n", "max_values", "=", "max_values", ".", "mean", "(", "reduce_dim", ",", "keepdim", "=", "keepdim", ")", "\n", "", "else", ":", "\n", "                ", "min_values", "=", "min_values", ".", "min", "(", "reduce_dim", ",", "keepdim", "=", "keepdim", ")", "[", "0", "]", "\n", "max_values", "=", "max_values", ".", "max", "(", "reduce_dim", ",", "keepdim", "=", "keepdim", ")", "[", "0", "]", "\n", "# TODO: re-add true zero computation", "\n", "", "", "range_values", "=", "max_values", "-", "min_values", "\n", "return", "QParams", "(", "range", "=", "range_values", ",", "zero_point", "=", "min_values", ",", "\n", "num_bits", "=", "num_bits", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.quantize.conv2d_biprec": [[115, 122], ["torch.conv2d", "torch.conv2d", "quantize.quantize_grad", "input.detach", "weight.detach", "F.conv2d.detach", "bias.detach"], "function", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.quantize.quantize_grad"], ["", "", "def", "conv2d_biprec", "(", "input", ",", "weight", ",", "bias", "=", "None", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "num_bits_grad", "=", "None", ")", ":", "\n", "    ", "out1", "=", "F", ".", "conv2d", "(", "input", ".", "detach", "(", ")", ",", "weight", ",", "bias", ",", "\n", "stride", ",", "padding", ",", "dilation", ",", "groups", ")", "\n", "out2", "=", "F", ".", "conv2d", "(", "input", ",", "weight", ".", "detach", "(", ")", ",", "bias", ".", "detach", "(", ")", "if", "bias", "is", "not", "None", "else", "None", ",", "\n", "stride", ",", "padding", ",", "dilation", ",", "groups", ")", "\n", "out2", "=", "quantize_grad", "(", "out2", ",", "num_bits", "=", "num_bits_grad", ",", "flatten_dims", "=", "(", "1", ",", "-", "1", ")", ")", "\n", "return", "out1", "+", "out2", "-", "out1", ".", "detach", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.quantize.linear_biprec": [[124, 130], ["torch.linear", "torch.linear", "quantize.quantize_grad", "input.detach", "weight.detach", "F.linear.detach", "bias.detach"], "function", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.quantize.quantize_grad"], ["", "def", "linear_biprec", "(", "input", ",", "weight", ",", "bias", "=", "None", ",", "num_bits_grad", "=", "None", ")", ":", "\n", "    ", "out1", "=", "F", ".", "linear", "(", "input", ".", "detach", "(", ")", ",", "weight", ",", "bias", ")", "\n", "out2", "=", "F", ".", "linear", "(", "input", ",", "weight", ".", "detach", "(", ")", ",", "bias", ".", "detach", "(", ")", "\n", "if", "bias", "is", "not", "None", "else", "None", ")", "\n", "out2", "=", "quantize_grad", "(", "out2", ",", "num_bits", "=", "num_bits_grad", ")", "\n", "return", "out1", "+", "out2", "-", "out1", ".", "detach", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.quantize.Quantize": [[132, 134], ["UniformQuantize().apply", "quantize.UniformQuantize"], "function", ["None"], ["", "def", "Quantize", "(", "x", ",", "num_bits", "=", "None", ",", "qparams", "=", "None", ",", "flatten_dims", "=", "_DEFAULT_FLATTEN", ",", "reduce_dim", "=", "0", ",", "dequantize", "=", "True", ",", "signed", "=", "False", ",", "stochastic", "=", "False", ",", "inplace", "=", "False", ")", ":", "\n", "    ", "return", "UniformQuantize", "(", ")", ".", "apply", "(", "x", ",", "num_bits", ",", "qparams", ",", "flatten_dims", ",", "reduce_dim", ",", "dequantize", ",", "signed", ",", "stochastic", ",", "inplace", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.quantize.quantize_grad": [[136, 138], ["UniformQuantizeGrad().apply", "quantize.UniformQuantizeGrad"], "function", ["None"], ["", "def", "quantize_grad", "(", "x", ",", "num_bits", "=", "None", ",", "qparams", "=", "None", ",", "flatten_dims", "=", "_DEFAULT_FLATTEN_GRAD", ",", "reduce_dim", "=", "0", ",", "dequantize", "=", "True", ",", "signed", "=", "False", ",", "stochastic", "=", "True", ")", ":", "\n", "    ", "return", "UniformQuantizeGrad", "(", ")", ".", "apply", "(", "x", ",", "num_bits", ",", "qparams", ",", "flatten_dims", ",", "reduce_dim", ",", "dequantize", ",", "signed", ",", "stochastic", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.datasets.ImageDataset.__init__": [[10, 29], ["torchvision.Compose", "sorted", "glob.glob", "len", "int", "os.path.join", "numpy.floor", "int", "numpy.floor"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "transforms_", "=", "None", ",", "unaligned", "=", "False", ",", "mode", "=", "'train'", ",", "portion", "=", "None", ")", ":", "\n", "        ", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "transforms_", ")", "\n", "self", ".", "unaligned", "=", "unaligned", "\n", "self", ".", "_portion", "=", "portion", "\n", "\n", "self", ".", "files_A_total", "=", "sorted", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'%s/A'", "%", "mode", ")", "+", "'/*.jpg'", ")", ")", "\n", "self", ".", "files_B_total", "=", "sorted", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'%s/B'", "%", "mode", ")", "+", "'/*.jpg'", ")", ")", "\n", "\n", "if", "self", ".", "_portion", "is", "not", "None", ":", "\n", "            ", "num_files_A", "=", "len", "(", "self", ".", "files_A_total", ")", "\n", "num_files_B", "=", "len", "(", "self", ".", "files_B_total", ")", "\n", "\n", "if", "self", ".", "_portion", ">", "0", ":", "\n", "                ", "split_A", "=", "int", "(", "np", ".", "floor", "(", "self", ".", "_portion", "*", "num_files_A", ")", ")", "\n", "self", ".", "files_A", "=", "self", ".", "files_A_total", "[", ":", "split_A", "]", "\n", "\n", "split_B", "=", "int", "(", "np", ".", "floor", "(", "self", ".", "_portion", "*", "num_files_B", ")", ")", "\n", "self", ".", "files_B", "=", "self", ".", "files_B_total", "[", ":", "split_B", "]", "\n", "\n", "", "elif", "self", ".", "_portion", "<", "0", ":", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.datasets.ImageDataset.__getitem__": [[31, 35], ["datasets.ImageDataset.transform", "PIL.Image.open().convert", "PIL.Image.open", "len"], "methods", ["None"], ["self", ".", "files_A", "=", "self", ".", "files_A_total", "[", "split_A", ":", "]", "\n", "\n", "split_B", "=", "int", "(", "np", ".", "floor", "(", "(", "1", "+", "self", ".", "_portion", ")", "*", "num_files_B", ")", ")", "\n", "self", ".", "files_B", "=", "self", ".", "files_B_total", "[", "split_B", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.datasets.ImageDataset.__len__": [[36, 39], ["len"], "methods", ["None"], ["", "", "else", ":", "\n", "            ", "self", ".", "files_A", "=", "self", ".", "files_A_total", "\n", "self", ".", "files_B", "=", "self", ".", "files_B_total", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.datasets.PairedImageDataset.__init__": [[57, 93], ["torchvision.Compose", "os.path.join", "os.path.join", "sorted", "sorted", "print", "print", "glob.glob", "glob.glob", "len", "len", "len", "len", "len", "int", "numpy.floor", "int", "numpy.floor"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dataset_dir", ",", "soft_data_dir", ",", "mode", "=", "'train'", ",", "portion", "=", "None", ",", "transforms_", "=", "None", ")", ":", "\n", "        ", "'''\n        Construct a dataset with all images from a dir.\n\n        dataset: str. dataset name\n        style: str. 'A2B' or 'B2A'\n        '''", "\n", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "transforms_", ")", "\n", "self", ".", "_portion", "=", "portion", "\n", "\n", "path_A", "=", "os", ".", "path", ".", "join", "(", "dataset_dir", ",", "'%s/A'", "%", "mode", ")", "\n", "path_B", "=", "os", ".", "path", ".", "join", "(", "soft_data_dir", ")", "\n", "self", ".", "files_A_total", "=", "sorted", "(", "glob", ".", "glob", "(", "path_A", "+", "'/*.jpg'", ")", ")", "\n", "self", ".", "files_B_total", "=", "sorted", "(", "glob", ".", "glob", "(", "path_B", "+", "'/*.png'", ")", ")", "\n", "\n", "assert", "len", "(", "self", ".", "files_A_total", ")", "==", "len", "(", "self", ".", "files_B_total", ")", "\n", "\n", "if", "self", ".", "_portion", "is", "not", "None", ":", "\n", "            ", "num_files", "=", "len", "(", "self", ".", "files_A_total", ")", "\n", "\n", "if", "self", ".", "_portion", ">", "0", ":", "\n", "                ", "split", "=", "int", "(", "np", ".", "floor", "(", "self", ".", "_portion", "*", "num_files", ")", ")", "\n", "self", ".", "files_A", "=", "self", ".", "files_A_total", "[", ":", "split", "]", "\n", "self", ".", "files_B", "=", "self", ".", "files_B_total", "[", ":", "split", "]", "\n", "\n", "", "elif", "self", ".", "_portion", "<", "0", ":", "\n", "                ", "split", "=", "int", "(", "np", ".", "floor", "(", "(", "1", "+", "self", ".", "_portion", ")", "*", "num_files", ")", ")", "\n", "self", ".", "files_A", "=", "self", ".", "files_A_total", "[", "split", ":", "]", "\n", "self", ".", "files_B", "=", "self", ".", "files_B_total", "[", "split", ":", "]", "\n", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "files_A", "=", "self", ".", "files_A_total", "\n", "self", ".", "files_B", "=", "self", ".", "files_B_total", "\n", "\n", "", "print", "(", "'files_A:'", ",", "len", "(", "self", ".", "files_A", ")", ")", "\n", "print", "(", "'files_B:'", ",", "len", "(", "self", ".", "files_B", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.datasets.PairedImageDataset.__getitem__": [[95, 123], ["PIL.Image.open", "PIL.Image.fromarray.convert", "datasets.PairedImageDataset.transform", "PIL.Image.open", "PIL.Image.fromarray.convert", "datasets.PairedImageDataset.transform", "numpy.random.rand", "numpy.asarray", "numpy.flip", "PIL.Image.fromarray", "numpy.asarray", "numpy.flip", "PIL.Image.fromarray", "numpy.uint8", "numpy.uint8", "len", "len"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "\n", "        ", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "0.5", ":", "\n", "            ", "flip", "=", "True", "\n", "", "else", ":", "\n", "            ", "flip", "=", "False", "\n", "\n", "", "img_A", "=", "Image", ".", "open", "(", "self", ".", "files_A", "[", "index", "%", "len", "(", "self", ".", "files_A", ")", "]", ")", "\n", "img_A", "=", "img_A", ".", "convert", "(", "\"RGB\"", ")", "\n", "\n", "if", "flip", ":", "\n", "            ", "img_A", "=", "np", ".", "asarray", "(", "img_A", ")", "# PIL.Image to np.ndarray", "\n", "img_A", "=", "np", ".", "flip", "(", "img_A", ",", "axis", "=", "1", ")", "# data augumentation: horrizental flip", "\n", "img_A", "=", "Image", ".", "fromarray", "(", "np", ".", "uint8", "(", "img_A", ")", ")", "# np.ndarray to PIL.Image", "\n", "\n", "", "item_A", "=", "self", ".", "transform", "(", "img_A", ")", "\n", "\n", "img_B", "=", "Image", ".", "open", "(", "self", ".", "files_B", "[", "index", "%", "len", "(", "self", ".", "files_B", ")", "]", ")", "\n", "img_B", "=", "img_B", ".", "convert", "(", "\"RGB\"", ")", "\n", "\n", "if", "flip", ":", "\n", "            ", "img_B", "=", "np", ".", "asarray", "(", "img_B", ")", "# PIL.Image to np.ndarray", "\n", "img_B", "=", "np", ".", "flip", "(", "img_B", ",", "axis", "=", "1", ")", "# data augumentation: horrizental flip", "\n", "img_B", "=", "Image", ".", "fromarray", "(", "np", ".", "uint8", "(", "img_B", ")", ")", "# np.ndarray to PIL.Image", "\n", "\n", "", "item_B", "=", "self", ".", "transform", "(", "img_B", ")", "\n", "\n", "return", "{", "'A'", ":", "item_A", ",", "'B'", ":", "item_B", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.datasets.PairedImageDataset.__len__": [[124, 126], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "files_A", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.eval_teacher.ImageDataset.__init__": [[41, 51], ["torchvision.Compose", "print", "sorted", "print", "os.path.join", "glob.glob", "len", "os.path.join"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dataset_dir", ",", "mode", "=", "'train'", ",", "transforms_", "=", "None", ")", ":", "\n", "        ", "'''\n        Construct a dataset with all images from a dir.\n\n        dataset_dir: str. img folder path\n        '''", "\n", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "transforms_", ")", "\n", "print", "(", "os", ".", "path", ".", "join", "(", "dataset_dir", ",", "mode", ")", ")", "\n", "self", ".", "files", "=", "sorted", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "dataset_dir", ",", "mode", ",", "'A'", ")", "+", "'/*.jpg'", ")", ")", "\n", "print", "(", "'files:'", ",", "len", "(", "self", ".", "files", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.eval_teacher.ImageDataset.__getitem__": [[52, 58], ["PIL.Image.open", "img.convert.convert.convert", "eval_teacher.ImageDataset.transform", "os.path.basename", "len", "len"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img", "=", "Image", ".", "open", "(", "self", ".", "files", "[", "index", "%", "len", "(", "self", ".", "files", ")", "]", ")", "\n", "img", "=", "img", ".", "convert", "(", "\"RGB\"", ")", "\n", "item", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "return", "item", ",", "os", ".", "path", ".", "basename", "(", "self", ".", "files", "[", "index", "%", "len", "(", "self", ".", "files", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.eval_teacher.ImageDataset.__len__": [[59, 61], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "files", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.eval_teacher.main": [[63, 78], ["util_gan.cyclegan.Generator", "torch.nn.DataParallel().cuda.load_state_dict", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda.eval", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "eval_teacher.eval", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torchvision.ToTensor", "torchvision.Normalize", "eval_teacher.ImageDataset", "eval_teacher.ImageDataset", "eval_teacher.eval", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel"], "function", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.eval_teacher.eval", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.eval_teacher.eval", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.load", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.load", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.load", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.load", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.load", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.eval_teacher.eval"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "teacher_model", "=", "Generator", "(", "3", ",", "3", ")", "\n", "teacher_model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "config", ".", "generator_A2B", ")", ")", "\n", "teacher_model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "teacher_model", ")", ".", "cuda", "(", ")", "\n", "teacher_model", ".", "eval", "(", ")", "\n", "\n", "transforms_", "=", "[", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "]", "\n", "train_loader", "=", "DataLoader", "(", "ImageDataset", "(", "config", ".", "dataset_path", ",", "transforms_", "=", "transforms_", ")", ",", "\n", "batch_size", "=", "1", ",", "shuffle", "=", "False", ",", "num_workers", "=", "config", ".", "num_workers", ")", "\n", "test_loader", "=", "DataLoader", "(", "ImageDataset", "(", "config", ".", "dataset_path", ",", "transforms_", "=", "transforms_", ",", "mode", "=", "'test'", ")", ",", "\n", "batch_size", "=", "1", ",", "shuffle", "=", "False", ",", "num_workers", "=", "config", ".", "num_workers", ")", "\n", "\n", "eval", "(", "train_loader", ",", "teacher_model", ",", "save_dir", "=", "'./target_train'", ")", "\n", "print", "(", "'Test fid:'", ",", "eval", "(", "test_loader", ",", "teacher_model", ",", "save_dir", "=", "'./target_test'", ",", "return_fid", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.eval_teacher.eval": [[80, 97], ["model.eval", "enumerate", "os.path.exists", "os.makedirs", "torch.autograd.Variable().cuda", "util_gan.fid_score.compute_fid", "torchvision.utils.save_image", "torch.autograd.Variable", "os.path.join", "model"], "function", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.eval_teacher.eval", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.util_gan.fid_score.compute_fid"], ["", "def", "eval", "(", "data_loader", ",", "model", ",", "save_dir", "=", "None", ",", "return_fid", "=", "False", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_dir", ")", "\n", "\n", "", "for", "i", ",", "(", "input", ",", "fname", ")", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "# Set model input", "\n", "        ", "real_A", "=", "Variable", "(", "input", ")", ".", "cuda", "(", ")", "\n", "fake_B", "=", "0.5", "*", "(", "model", "(", "real_A", ")", ".", "data", "+", "1.0", ")", "\n", "\n", "if", "save_dir", "is", "not", "None", ":", "\n", "            ", "save_image", "(", "fake_B", ",", "os", ".", "path", ".", "join", "(", "save_dir", ",", "fname", "[", "0", "]", ")", ")", "\n", "\n", "", "", "if", "return_fid", ":", "\n", "        ", "fid", "=", "compute_fid", "(", "save_dir", ",", "config", ".", "dataset_path", "+", "'/test/B'", ")", "\n", "return", "fid", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.RRDBNet_arch.ResidualDenseBlock_5C.__init__": [[16, 25], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.Cutout.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nf", "=", "64", ",", "gc", "=", "32", ",", "bias", "=", "True", ")", ":", "\n", "        ", "super", "(", "ResidualDenseBlock_5C", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# gc: growth channel, i.e. intermediate channels", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "nf", ",", "gc", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "bias", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "nf", "+", "gc", ",", "gc", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "bias", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "nf", "+", "2", "*", "gc", ",", "gc", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "bias", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv2d", "(", "nf", "+", "3", "*", "gc", ",", "gc", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "bias", ")", "\n", "self", ".", "conv5", "=", "nn", ".", "Conv2d", "(", "nf", "+", "4", "*", "gc", ",", "nf", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "bias", ")", "\n", "self", ".", "lrelu", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.RRDBNet_arch.ResidualDenseBlock_5C.forward": [[29, 36], ["RRDBNet_arch.ResidualDenseBlock_5C.lrelu", "RRDBNet_arch.ResidualDenseBlock_5C.lrelu", "RRDBNet_arch.ResidualDenseBlock_5C.lrelu", "RRDBNet_arch.ResidualDenseBlock_5C.lrelu", "RRDBNet_arch.ResidualDenseBlock_5C.conv5", "RRDBNet_arch.ResidualDenseBlock_5C.conv1", "RRDBNet_arch.ResidualDenseBlock_5C.conv2", "RRDBNet_arch.ResidualDenseBlock_5C.conv3", "RRDBNet_arch.ResidualDenseBlock_5C.conv4", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x1", "=", "self", ".", "lrelu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "x2", "=", "self", ".", "lrelu", "(", "self", ".", "conv2", "(", "torch", ".", "cat", "(", "(", "x", ",", "x1", ")", ",", "1", ")", ")", ")", "\n", "x3", "=", "self", ".", "lrelu", "(", "self", ".", "conv3", "(", "torch", ".", "cat", "(", "(", "x", ",", "x1", ",", "x2", ")", ",", "1", ")", ")", ")", "\n", "x4", "=", "self", ".", "lrelu", "(", "self", ".", "conv4", "(", "torch", ".", "cat", "(", "(", "x", ",", "x1", ",", "x2", ",", "x3", ")", ",", "1", ")", ")", ")", "\n", "x5", "=", "self", ".", "conv5", "(", "torch", ".", "cat", "(", "(", "x", ",", "x1", ",", "x2", ",", "x3", ",", "x4", ")", ",", "1", ")", ")", "\n", "return", "x5", "*", "0.2", "+", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.RRDBNet_arch.RRDB.__init__": [[41, 46], ["torch.Module.__init__", "RRDBNet_arch.ResidualDenseBlock_5C", "RRDBNet_arch.ResidualDenseBlock_5C", "RRDBNet_arch.ResidualDenseBlock_5C"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.Cutout.__init__"], ["def", "__init__", "(", "self", ",", "nf", ",", "gc", "=", "32", ")", ":", "\n", "        ", "super", "(", "RRDB", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "RDB1", "=", "ResidualDenseBlock_5C", "(", "nf", ",", "gc", ")", "\n", "self", ".", "RDB2", "=", "ResidualDenseBlock_5C", "(", "nf", ",", "gc", ")", "\n", "self", ".", "RDB3", "=", "ResidualDenseBlock_5C", "(", "nf", ",", "gc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.RRDBNet_arch.RRDB.forward": [[47, 52], ["RRDBNet_arch.RRDB.RDB1", "RRDBNet_arch.RRDB.RDB2", "RRDBNet_arch.RRDB.RDB3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "RDB1", "(", "x", ")", "\n", "out", "=", "self", ".", "RDB2", "(", "out", ")", "\n", "out", "=", "self", ".", "RDB3", "(", "out", ")", "\n", "return", "out", "*", "0.2", "+", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.RRDBNet_arch.RRDBNet.__init__": [[55, 69], ["torch.Module.__init__", "functools.partial", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "RRDBNet_arch.make_layer", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.Cutout.__init__", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.RRDBNet_arch.make_layer"], ["    ", "def", "__init__", "(", "self", ",", "in_nc", ",", "out_nc", ",", "nf", ",", "nb", ",", "gc", "=", "32", ")", ":", "\n", "        ", "super", "(", "RRDBNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "RRDB_block_f", "=", "functools", ".", "partial", "(", "RRDB", ",", "nf", "=", "nf", ",", "gc", "=", "gc", ")", "\n", "\n", "self", ".", "conv_first", "=", "nn", ".", "Conv2d", "(", "in_nc", ",", "nf", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "RRDB_trunk", "=", "make_layer", "(", "RRDB_block_f", ",", "nb", ")", "\n", "self", ".", "trunk_conv", "=", "nn", ".", "Conv2d", "(", "nf", ",", "nf", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "#### upsampling", "\n", "self", ".", "upconv1", "=", "nn", ".", "Conv2d", "(", "nf", ",", "nf", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "upconv2", "=", "nn", ".", "Conv2d", "(", "nf", ",", "nf", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "HRconv", "=", "nn", ".", "Conv2d", "(", "nf", ",", "nf", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "conv_last", "=", "nn", ".", "Conv2d", "(", "nf", ",", "out_nc", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "\n", "self", ".", "lrelu", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.RRDBNet_arch.RRDBNet.forward": [[70, 80], ["RRDBNet_arch.RRDBNet.conv_first", "RRDBNet_arch.RRDBNet.trunk_conv", "RRDBNet_arch.RRDBNet.lrelu", "RRDBNet_arch.RRDBNet.lrelu", "RRDBNet_arch.RRDBNet.conv_last", "RRDBNet_arch.RRDBNet.RRDB_trunk", "RRDBNet_arch.RRDBNet.upconv1", "RRDBNet_arch.RRDBNet.upconv2", "RRDBNet_arch.RRDBNet.lrelu", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "RRDBNet_arch.RRDBNet.HRconv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "fea", "=", "self", ".", "conv_first", "(", "x", ")", "\n", "trunk", "=", "self", ".", "trunk_conv", "(", "self", ".", "RRDB_trunk", "(", "fea", ")", ")", "\n", "fea", "=", "fea", "+", "trunk", "\n", "\n", "fea", "=", "self", ".", "lrelu", "(", "self", ".", "upconv1", "(", "F", ".", "interpolate", "(", "fea", ",", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", ")", ")", "\n", "fea", "=", "self", ".", "lrelu", "(", "self", ".", "upconv2", "(", "F", ".", "interpolate", "(", "fea", ",", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", ")", ")", "\n", "out", "=", "self", ".", "conv_last", "(", "self", ".", "lrelu", "(", "self", ".", "HRconv", "(", "fea", ")", ")", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.RRDBNet_arch.make_layer": [[8, 13], ["range", "torch.Sequential", "layers.append", "block"], "function", ["None"], ["def", "make_layer", "(", "block", ",", "n_layers", ")", ":", "\n", "    ", "layers", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "n_layers", ")", ":", "\n", "        ", "layers", ".", "append", "(", "block", "(", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_search.Cell.__init__": [[229, 242], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "model_search.Cell.ops.append", "model_search.MixedOp"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.Cutout.__init__"], ["", "", "class", "NAS_GAN", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "layers", "=", "16", ",", "slimmable", "=", "True", ",", "width_mult_list", "=", "[", "1.", ",", "]", ",", "width_mult_list_sh", "=", "[", "1.", ",", "]", ",", "loss_weight", "=", "[", "1e0", ",", "1e5", ",", "1e0", ",", "1e-7", "]", ",", "prun_modes", "=", "'arch_ratio'", ",", "quantize", "=", "False", ")", ":", "\n", "        ", "super", "(", "NAS_GAN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "layers", ">=", "3", "\n", "self", ".", "_layers", "=", "layers", "\n", "self", ".", "_width_mult_list", "=", "width_mult_list", "\n", "self", ".", "_width_mult_list_sh", "=", "width_mult_list_sh", "\n", "self", ".", "_prun_modes", "=", "prun_modes", "\n", "self", ".", "prun_mode", "=", "None", "# prun_mode is higher priority than _prun_modes", "\n", "self", ".", "_flops", "=", "0", "\n", "self", ".", "_params", "=", "0", "\n", "\n", "self", ".", "len_stem", "=", "3", "\n", "self", ".", "len_header", "=", "3", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_search.Cell.forward": [[243, 255], ["enumerate", "op", "op", "op"], "methods", ["None"], ["self", ".", "len_beta_sh", "=", "self", ".", "len_stem", "+", "self", ".", "len_header", "\n", "self", ".", "len_ratio_sh", "=", "self", ".", "len_stem", "+", "self", ".", "len_header", "-", "1", "\n", "\n", "self", ".", "base_weight", "=", "loss_weight", "[", "0", "]", "\n", "self", ".", "style_weight", "=", "loss_weight", "[", "1", "]", "\n", "self", ".", "content_weight", "=", "loss_weight", "[", "2", "]", "\n", "self", ".", "tv_weight", "=", "loss_weight", "[", "3", "]", "\n", "\n", "self", ".", "vgg", "=", "torch", ".", "nn", ".", "DataParallel", "(", "VGGFeature", "(", ")", ")", ".", "cuda", "(", ")", "\n", "\n", "self", ".", "quantize", "=", "quantize", "\n", "self", ".", "slimmable", "=", "slimmable", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_search.Cell.forward_flops": [[257, 272], ["enumerate", "sum", "op.forward_flops", "flops_total.append", "op.forward_flops", "flops_total.append", "op.forward_flops", "flops_total.append"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.Cell.forward_flops", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.Cell.forward_flops", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.Cell.forward_flops"], ["self", ".", "stem", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "stem", ".", "append", "(", "SingleOp", "(", "ConvNorm", ",", "3", ",", "64", ",", "7", ",", "slimmable", "=", "slimmable", ",", "width_mult_list", "=", "width_mult_list_sh", ",", "quantize", "=", "quantize", ")", ")", "\n", "\n", "in_features", "=", "64", "\n", "out_features", "=", "in_features", "*", "2", "\n", "\n", "for", "_", "in", "range", "(", "2", ")", ":", "\n", "            ", "self", ".", "stem", ".", "append", "(", "SingleOp", "(", "ConvNorm", ",", "in_features", ",", "out_features", ",", "3", ",", "stride", "=", "2", ",", "slimmable", "=", "slimmable", ",", "width_mult_list", "=", "width_mult_list_sh", ",", "quantize", "=", "quantize", ")", ")", "\n", "in_features", "=", "out_features", "\n", "out_features", "=", "in_features", "*", "2", "\n", "\n", "", "self", ".", "cells", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "layers", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "op", "=", "MixedOp", "(", "in_features", ",", "in_features", ",", "slimmable", "=", "slimmable", ",", "width_mult_list", "=", "width_mult_list", ",", "quantize", "=", "quantize", ",", "width_mult_list_left", "=", "width_mult_list_sh", ")", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_eval.Cell.__init__": [[89, 105], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "model_eval.Cell.ops.append", "model_eval.MixedOp", "model_eval.Cell.ops.append", "model_eval.Cell.ops.append", "model_eval.make_divisible", "model_eval.MixedOp", "model_eval.MixedOp", "model_eval.make_divisible", "model_eval.make_divisible", "model_eval.make_divisible"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.Cutout.__init__", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.make_divisible", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.make_divisible", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.make_divisible", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.make_divisible"], ["self", ".", "quantize", "=", "quantize", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "result", "=", "self", ".", "_op", "(", "x", ",", "quantize", "=", "self", ".", "quantize", ")", "\n", "\n", "return", "result", "\n", "\n", "", "def", "forward_flops", "(", "self", ",", "size", ")", ":", "\n", "        ", "flops", ",", "size_out", "=", "self", ".", "_op", ".", "forward_flops", "(", "size", ",", "quantize", "=", "self", ".", "quantize", ")", "\n", "\n", "return", "flops", ",", "size_out", "\n", "\n", "\n", "\n", "", "", "class", "NAS_GAN_Eval", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "alpha", ",", "beta", ",", "ratio", ",", "beta_sh", ",", "ratio_sh", ",", "layers", "=", "16", ",", "width_mult_list", "=", "[", "1.", ",", "]", ",", "width_mult_list_sh", "=", "[", "1.", ",", "]", ",", "quantize", "=", "True", ")", ":", "\n", "        ", "super", "(", "NAS_GAN_Eval", ",", "self", ")", ".", "__init__", "(", ")", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_eval.Cell.forward": [[107, 112], ["op"], "methods", ["None"], ["self", ".", "_layers", "=", "layers", "\n", "self", ".", "_width_mult_list", "=", "width_mult_list", "\n", "self", ".", "_width_mult_list_sh", "=", "width_mult_list_sh", "\n", "self", ".", "_flops", "=", "0", "\n", "self", ".", "_params", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_eval.Cell.forward_flops": [[114, 122], ["enumerate", "op.forward_flops", "flops_total.append", "sum"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.Cell.forward_flops"], ["self", ".", "len_header", "=", "3", "\n", "self", ".", "len_beta_sh", "=", "self", ".", "len_stem", "+", "self", ".", "len_header", "\n", "self", ".", "len_ratio_sh", "=", "self", ".", "len_stem", "+", "self", ".", "len_header", "-", "1", "\n", "\n", "op_idx_list", "=", "F", ".", "softmax", "(", "alpha", ",", "dim", "=", "-", "1", ")", ".", "argmax", "(", "-", "1", ")", "\n", "\n", "if", "quantize", "==", "'search'", ":", "\n", "            ", "quantize_list", "=", "F", ".", "softmax", "(", "beta", ",", "dim", "=", "-", "1", ")", ".", "argmax", "(", "-", "1", ")", "==", "1", "\n", "quantize_list_sh", "=", "F", ".", "softmax", "(", "beta_sh", ",", "dim", "=", "-", "1", ")", ".", "argmax", "(", "-", "1", ")", "==", "1", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.Cell.__init__": [[89, 105], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "model_infer.Cell.ops.append", "model_infer.MixedOp", "model_infer.Cell.ops.append", "model_infer.Cell.ops.append", "model_infer.make_divisible", "model_infer.MixedOp", "model_infer.MixedOp", "model_infer.make_divisible", "model_infer.make_divisible", "model_infer.make_divisible"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.Cutout.__init__", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.make_divisible", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.make_divisible", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.make_divisible", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.make_divisible"], ["self", ".", "quantize", "=", "quantize", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "result", "=", "self", ".", "_op", "(", "x", ",", "quantize", "=", "self", ".", "quantize", ")", "\n", "\n", "return", "result", "\n", "\n", "", "def", "forward_flops", "(", "self", ",", "size", ")", ":", "\n", "        ", "flops", ",", "size_out", "=", "self", ".", "_op", ".", "forward_flops", "(", "size", ",", "quantize", "=", "self", ".", "quantize", ")", "\n", "\n", "return", "flops", ",", "size_out", "\n", "\n", "\n", "\n", "", "", "class", "NAS_GAN_Infer", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "alpha", ",", "beta", ",", "ratio", ",", "beta_sh", ",", "ratio_sh", ",", "layers", "=", "16", ",", "width_mult_list", "=", "[", "1.", ",", "]", ",", "width_mult_list_sh", "=", "[", "1.", ",", "]", ",", "loss_weight", "=", "[", "1e0", ",", "1e5", ",", "1e0", ",", "1e-7", "]", ",", "quantize", "=", "True", ")", ":", "\n", "        ", "super", "(", "NAS_GAN_Infer", ",", "self", ")", ".", "__init__", "(", ")", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.Cell.forward": [[107, 112], ["op"], "methods", ["None"], ["self", ".", "_layers", "=", "layers", "\n", "self", ".", "_width_mult_list", "=", "width_mult_list", "\n", "self", ".", "_width_mult_list_sh", "=", "width_mult_list_sh", "\n", "self", ".", "_flops", "=", "0", "\n", "self", ".", "_params", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.Cell.forward_flops": [[114, 122], ["enumerate", "op.forward_flops", "flops_total.append", "sum"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.model_infer.Cell.forward_flops"], ["self", ".", "len_header", "=", "3", "\n", "self", ".", "len_beta_sh", "=", "self", ".", "len_stem", "+", "self", ".", "len_header", "\n", "self", ".", "len_ratio_sh", "=", "self", ".", "len_stem", "+", "self", ".", "len_header", "-", "1", "\n", "\n", "self", ".", "base_weight", "=", "loss_weight", "[", "0", "]", "\n", "self", ".", "style_weight", "=", "loss_weight", "[", "1", "]", "\n", "self", ".", "content_weight", "=", "loss_weight", "[", "2", "]", "\n", "self", ".", "tv_weight", "=", "loss_weight", "[", "3", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.util_visual.colortransfer.color_transfer": [[6, 70], ["numpy.transpose", "numpy.transpose", "numpy.cov", "numpy.cov", "numpy.mean", "numpy.mean", "numpy.isnan().any", "numpy.isinf().any", "numpy.isnan().any", "numpy.isinf().any", "numpy.linalg.eig", "numpy.linalg.eig", "new_mat.transpose().reshape", "content_img_hat.astype.astype", "numpy.cov", "numpy.mean", "content_img.reshape", "style_img.reshape", "ValueError", "ValueError", "ValueError", "ValueError", "Uc.transpose", "Us.transpose", "numpy.expand_dims", "numpy.isnan", "numpy.isinf", "numpy.isnan", "numpy.isinf", "numpy.diag", "numpy.diag", "Us.transpose", "new_mat.transpose", "numpy.diag", "Uc.transpose", "numpy.diag"], "function", ["None"], ["def", "color_transfer", "(", "content_img", ",", "style_img", ")", ":", "\n", "    ", "'''\n    Transfer style image color to content image.\n    Method described in https://arxiv.org/abs/1606.05897\n    Args:\n        content_img: type=ndarray, shape=(Wc,Hc,C=3)\n        style_img: type=ndarray, shape=(Ws,Hs,C=3)\n    Returns:\n        content_img_hat: content image with the color of style image. type=ndarray, shape=(Wc,Hc,C=3)\n    '''", "\n", "\n", "content_mat", "=", "np", ".", "transpose", "(", "content_img", ".", "reshape", "(", "(", "-", "1", ",", "content_img", ".", "shape", "[", "-", "1", "]", ")", ")", ")", "# ndarray, shape=(3, W*H)", "\n", "style_mat", "=", "np", ".", "transpose", "(", "style_img", ".", "reshape", "(", "(", "-", "1", ",", "style_img", ".", "shape", "[", "-", "1", "]", ")", ")", ")", "\n", "\n", "assert", "content_mat", ".", "shape", "[", "0", "]", "==", "3", "\n", "assert", "style_mat", ".", "shape", "[", "0", "]", "==", "3", "\n", "\n", "# cov matrix:", "\n", "content_cov", "=", "np", ".", "cov", "(", "content_mat", ")", "# ndarray, shape=(3, 3)", "\n", "style_cov", "=", "np", ".", "cov", "(", "style_mat", ")", "\n", "# mean vec:", "\n", "content_mean", "=", "np", ".", "mean", "(", "content_mat", ",", "axis", "=", "-", "1", ")", "\n", "style_mean", "=", "np", ".", "mean", "(", "style_mat", ",", "axis", "=", "-", "1", ")", "\n", "\n", "if", "np", ".", "isnan", "(", "content_cov", ")", ".", "any", "(", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'content_cov as NaN'", ")", "\n", "", "if", "np", ".", "isinf", "(", "content_cov", ")", ".", "any", "(", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'content_cov as Inf'", ")", "\n", "\n", "", "if", "np", ".", "isnan", "(", "style_cov", ")", ".", "any", "(", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'style_cov as NaN'", ")", "\n", "", "if", "np", ".", "isinf", "(", "style_cov", ")", ".", "any", "(", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'style_cov as Inf'", ")", "\n", "\n", "# evd:", "\n", "", "Sc", ",", "Uc", "=", "np", ".", "linalg", ".", "eig", "(", "content_cov", ")", "\n", "Ss", ",", "Us", "=", "np", ".", "linalg", ".", "eig", "(", "style_cov", ")", "\n", "\n", "content_cov_rec", "=", "Uc", "@", "np", ".", "diag", "(", "Sc", ")", "@", "Uc", ".", "transpose", "(", ")", "\n", "style_cov_rec", "=", "Us", "@", "np", ".", "diag", "(", "Ss", ")", "@", "Us", ".", "transpose", "(", ")", "\n", "\n", "assert", "(", "Sc", ">=", "0", ")", ".", "all", "(", ")", "# cov matrix should be semi-positive", "\n", "assert", "(", "Ss", ">=", "0", ")", ".", "all", "(", ")", "\n", "\n", "# linear transform:", "\n", "# A = (Us @ np.diag(Ss**0.5)) @ \\", "\n", "#     (Uc @ np.diag(Sc**(-0.5))).transpose()", "\n", "A", "=", "(", "Us", "@", "np", ".", "diag", "(", "Ss", "**", "0.5", ")", "@", "Us", ".", "transpose", "(", ")", ")", "@", "(", "Uc", "@", "np", ".", "diag", "(", "Sc", "**", "(", "-", "0.5", ")", ")", "@", "Uc", ".", "transpose", "(", ")", ")", ".", "transpose", "(", ")", "\n", "b", "=", "style_mean", "-", "A", "@", "content_mean", "\n", "\n", "# get new image:", "\n", "new_mat", "=", "A", "@", "content_mat", "+", "np", ".", "expand_dims", "(", "b", ",", "axis", "=", "1", ")", "# ndarray, shape=(3, W*H)", "\n", "content_img_hat", "=", "new_mat", ".", "transpose", "(", ")", ".", "reshape", "(", "content_img", ".", "shape", ")", "\n", "\n", "# deal with image range and dtype:", "\n", "content_img_hat", "[", "content_img_hat", "<", "0", "]", "=", "0", "\n", "content_img_hat", "[", "content_img_hat", ">", "255", "]", "=", "255", "\n", "content_img_hat", "=", "content_img_hat", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "content_hat_cov", "=", "np", ".", "cov", "(", "new_mat", ")", "\n", "content_hat_mean", "=", "np", ".", "mean", "(", "new_mat", ",", "axis", "=", "-", "1", ")", "\n", "\n", "return", "content_img_hat", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.util_visual.colortransfer.channel_tranfer": [[71, 73], ["None"], "function", ["None"], ["", "def", "channel_tranfer", "(", "content_img", ",", "style_img", ")", ":", "\n", "    ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.util_visual.colortransfer.color_transfer_per_img": [[74, 79], ["skimage.io.imread", "skimage.io.imread", "colortransfer.color_transfer"], "function", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.util_visual.colortransfer.color_transfer"], ["", "def", "color_transfer_per_img", "(", "src", ",", "dest", ")", ":", "\n", "    ", "img1", "=", "imread", "(", "src", ")", "\n", "img2", "=", "imread", "(", "dest", ")", "\n", "img2_new", "=", "color_transfer", "(", "img2", ",", "img1", ")", "\n", "return", "img2_new", "\n", "# imsave('new_img.png', img2_new)", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.util_visual.colortransfer.post_process_color_transfer": [[81, 96], ["os.listdir", "os.path.exists", "os.mkdir", "os.path.join", "os.path.join", "colortransfer.color_transfer_per_img", "skimage.io.imsave", "os.listdir", "os.path.join"], "function", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.util_visual.colortransfer.color_transfer_per_img"], ["", "def", "post_process_color_transfer", "(", "src_folder", ",", "dest_folder", ",", "save_folder", ")", ":", "\n", "    ", "fnames", "=", "os", ".", "listdir", "(", "src_folder", ")", "\n", "for", "fname", "in", "fnames", ":", "\n", "        ", "if", "'png'", "in", "fname", ":", "\n", "            ", "assert", "fname", "in", "os", ".", "listdir", "(", "dest_folder", ")", ",", "\"File Name Not Matching\"", "\n", "\n", "", "", "if", "not", "os", ".", "path", ".", "exists", "(", "save_folder", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "save_folder", ")", "\n", "\n", "", "for", "fname", "in", "fnames", ":", "\n", "        ", "if", "'png'", "in", "fname", ":", "\n", "            ", "src", "=", "os", ".", "path", ".", "join", "(", "src_folder", ",", "fname", ")", "\n", "dest", "=", "os", ".", "path", ".", "join", "(", "dest_folder", ",", "fname", ")", "\n", "new_img", "=", "color_transfer_per_img", "(", "src", ",", "dest", ")", "\n", "imsave", "(", "os", ".", "path", ".", "join", "(", "save_folder", ",", "fname", ")", ",", "new_img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.util_visual.dewhite.dewhite": [[8, 16], ["skimage.io.imread", "skimage.io.imread", "numpy.array", "matplotlib.imshow", "matplotlib.savefig", "os.path.join", "os.path.basename"], "function", ["None"], ["def", "dewhite", "(", "fname", ",", "save_folder", ")", ":", "\n", "    ", "img", "=", "imread", "(", "fname", ")", "\n", "img", "=", "imread", "(", "fname", ")", "\n", "img_flat", "=", "np", ".", "array", "(", "img", ")", "\n", "\n", "img", "=", "(", "(", "(", "img", "/", "256", "*", "2", ")", "-", "1", ")", "*", "256", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "plt", ".", "imshow", "(", "img", ")", "\n", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "save_folder", ",", "os", ".", "path", ".", "basename", "(", "fname", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.util_visual.draw_histogram.draw_hist": [[8, 17], ["skimage.io.imread", "numpy.reshape", "matplotlib.clf", "matplotlib.hist", "matplotlib.title", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.savefig", "numpy.array", "os.path.join", "os.path.basename"], "function", ["None"], ["def", "draw_hist", "(", "fname", ",", "save_folder", ")", ":", "\n", "    ", "img", "=", "imread", "(", "fname", ")", "\n", "img_flat", "=", "np", ".", "reshape", "(", "np", ".", "array", "(", "img", ")", ",", "[", "-", "1", "]", ")", "\n", "plt", ".", "clf", "(", ")", "\n", "plt", ".", "hist", "(", "img_flat", ")", "\n", "plt", ".", "title", "(", "'Color Distribution Histogram'", ")", "\n", "plt", ".", "xlabel", "(", "'Pixel Value'", ")", "\n", "plt", ".", "ylabel", "(", "'Frequency'", ")", "\n", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "save_folder", ",", "os", ".", "path", ".", "basename", "(", "fname", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.util_gan.vgg.Vgg16.__init__": [[6, 26], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "range", "range", "range", "range", "vgg.Vgg16.parameters", "torchvision.models.vgg16", "vgg.Vgg16.to_relu_1_2.add_module", "vgg.Vgg16.to_relu_2_2.add_module", "vgg.Vgg16.to_relu_3_3.add_module", "vgg.Vgg16.to_relu_4_3.add_module", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.Cutout.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Vgg16", ",", "self", ")", ".", "__init__", "(", ")", "\n", "features", "=", "models", ".", "vgg16", "(", "pretrained", "=", "True", ")", ".", "features", "\n", "self", ".", "to_relu_1_2", "=", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "to_relu_2_2", "=", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "to_relu_3_3", "=", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "to_relu_4_3", "=", "nn", ".", "Sequential", "(", ")", "\n", "\n", "for", "x", "in", "range", "(", "4", ")", ":", "\n", "            ", "self", ".", "to_relu_1_2", ".", "add_module", "(", "str", "(", "x", ")", ",", "features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "4", ",", "9", ")", ":", "\n", "            ", "self", ".", "to_relu_2_2", ".", "add_module", "(", "str", "(", "x", ")", ",", "features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "9", ",", "16", ")", ":", "\n", "            ", "self", ".", "to_relu_3_3", ".", "add_module", "(", "str", "(", "x", ")", ",", "features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "16", ",", "23", ")", ":", "\n", "            ", "self", ".", "to_relu_4_3", ".", "add_module", "(", "str", "(", "x", ")", ",", "features", "[", "x", "]", ")", "\n", "\n", "# don't need the gradients, just want the features", "\n", "", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.util_gan.vgg.Vgg16.forward": [[27, 38], ["vgg.Vgg16.to_relu_1_2", "vgg.Vgg16.to_relu_2_2", "vgg.Vgg16.to_relu_3_3", "vgg.Vgg16.to_relu_4_3"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "h", "=", "self", ".", "to_relu_1_2", "(", "x", ")", "\n", "h_relu_1_2", "=", "h", "\n", "h", "=", "self", ".", "to_relu_2_2", "(", "h", ")", "\n", "h_relu_2_2", "=", "h", "\n", "h", "=", "self", ".", "to_relu_3_3", "(", "h", ")", "\n", "h_relu_3_3", "=", "h", "\n", "h", "=", "self", ".", "to_relu_4_3", "(", "h", ")", "\n", "h_relu_4_3", "=", "h", "\n", "out", "=", "(", "h_relu_1_2", ",", "h_relu_2_2", ",", "h_relu_3_3", ",", "h_relu_4_3", ")", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.util_gan.cyclegan.ResidualBlock.__init__": [[7, 19], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.Cutout.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ")", ":", "\n", "        ", "super", "(", "ResidualBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "conv_block", "=", "[", "nn", ".", "ReflectionPad2d", "(", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_features", ",", "in_features", ",", "3", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "in_features", ",", "affine", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "ReflectionPad2d", "(", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_features", ",", "in_features", ",", "3", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "in_features", ")", "]", "\n", "\n", "self", ".", "conv_block", "=", "nn", ".", "Sequential", "(", "*", "conv_block", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.util_gan.cyclegan.ResidualBlock.forward": [[20, 22], ["cyclegan.ResidualBlock.conv_block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "+", "self", ".", "conv_block", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.util_gan.cyclegan.Generator.__init__": [[24, 65], ["torch.Module.__init__", "range", "range", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "cyclegan.ResidualBlock", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.Cutout.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "n_residual_blocks", "=", "9", ")", ":", "\n", "        ", "super", "(", "Generator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# Initial convolution block       ", "\n", "model", "=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "\n", "nn", ".", "Conv2d", "(", "input_nc", ",", "64", ",", "7", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "64", ",", "affine", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "\n", "# Downsampling", "\n", "in_features", "=", "64", "\n", "out_features", "=", "in_features", "*", "2", "\n", "\n", "affine", "=", "True", "\n", "for", "_", "in", "range", "(", "2", ")", ":", "\n", "            ", "model", "+=", "[", "nn", ".", "Conv2d", "(", "in_features", ",", "out_features", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "out_features", ",", "affine", "=", "affine", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "in_features", "=", "out_features", "\n", "out_features", "=", "in_features", "*", "2", "\n", "affine", "=", "False", "\n", "\n", "# Residual blocks", "\n", "", "for", "_", "in", "range", "(", "n_residual_blocks", ")", ":", "\n", "            ", "model", "+=", "[", "ResidualBlock", "(", "in_features", ")", "]", "\n", "\n", "# Upsampling", "\n", "", "out_features", "=", "in_features", "//", "2", "\n", "for", "_", "in", "range", "(", "2", ")", ":", "\n", "            ", "model", "+=", "[", "nn", ".", "ConvTranspose2d", "(", "in_features", ",", "out_features", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "out_features", ",", "affine", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "in_features", "=", "out_features", "\n", "out_features", "=", "in_features", "//", "2", "\n", "\n", "# Output layer", "\n", "", "model", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "output_nc", ",", "7", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "]", "\n", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.util_gan.cyclegan.Generator.forward": [[66, 68], ["cyclegan.Generator.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.util_gan.cyclegan.Discriminator.__init__": [[70, 93], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.Cutout.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ")", ":", "\n", "        ", "super", "(", "Discriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# A bunch of convolutions one after another", "\n", "model", "=", "[", "nn", ".", "Conv2d", "(", "input_nc", ",", "64", ",", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "]", "\n", "\n", "model", "+=", "[", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "128", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "]", "\n", "\n", "model", "+=", "[", "nn", ".", "Conv2d", "(", "128", ",", "256", ",", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "256", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "]", "\n", "\n", "model", "+=", "[", "nn", ".", "Conv2d", "(", "256", ",", "512", ",", "4", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "512", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "]", "\n", "\n", "# FCN classification layer", "\n", "model", "+=", "[", "nn", ".", "Conv2d", "(", "512", ",", "1", ",", "4", ",", "padding", "=", "1", ")", "]", "\n", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.util_gan.cyclegan.Discriminator.forward": [[94, 98], ["cyclegan.Discriminator.model", "torch.avg_pool2d().view", "torch.avg_pool2d().view", "torch.avg_pool2d().view", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "cyclegan.Discriminator.size", "cyclegan.Discriminator.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "model", "(", "x", ")", "\n", "# Average pooling and flatten", "\n", "return", "F", ".", "avg_pool2d", "(", "x", ",", "x", ".", "size", "(", ")", "[", "2", ":", "]", ")", ".", "view", "(", "x", ".", "size", "(", ")", "[", "0", "]", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.util_gan.inception.InceptionV3.__init__": [[31, 128], ["torch.Module.__init__", "sorted", "max", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "models.inception_v3.InceptionV3.blocks.append", "models.inception_v3.InceptionV3.parameters", "inception.fid_inception_v3", "torchvision.models.inception_v3", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "models.inception_v3.InceptionV3.blocks.append", "models.inception_v3.InceptionV3.blocks.append", "models.inception_v3.InceptionV3.blocks.append", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.Cutout.__init__", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.util_gan.inception.fid_inception_v3"], ["def", "__init__", "(", "self", ",", "\n", "output_blocks", "=", "[", "DEFAULT_BLOCK_INDEX", "]", ",", "\n", "resize_input", "=", "True", ",", "\n", "normalize_input", "=", "True", ",", "\n", "requires_grad", "=", "False", ",", "\n", "use_fid_inception", "=", "True", ")", ":", "\n", "        ", "\"\"\"Build pretrained InceptionV3\n\n        Parameters\n        ----------\n        output_blocks : list of int\n            Indices of blocks to return features of. Possible values are:\n                - 0: corresponds to output of first max pooling\n                - 1: corresponds to output of second max pooling\n                - 2: corresponds to output which is fed to aux classifier\n                - 3: corresponds to output of final average pooling\n        resize_input : bool\n            If true, bilinearly resizes input to width and height 299 before\n            feeding input to model. As the network without fully connected\n            layers is fully convolutional, it should be able to handle inputs\n            of arbitrary size, so resizing might not be strictly needed\n        normalize_input : bool\n            If true, scales the input from range (0, 1) to the range the\n            pretrained Inception network expects, namely (-1, 1)\n        requires_grad : bool\n            If true, parameters of the model require gradients. Possibly useful\n            for finetuning the network\n        use_fid_inception : bool\n            If true, uses the pretrained Inception model used in Tensorflow's\n            FID implementation. If false, uses the pretrained Inception model\n            available in torchvision. The FID Inception model has different\n            weights and a slightly different structure from torchvision's\n            Inception model. If you want to compute FID scores, you are\n            strongly advised to set this parameter to true to get comparable\n            results.\n        \"\"\"", "\n", "super", "(", "InceptionV3", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "resize_input", "=", "resize_input", "\n", "self", ".", "normalize_input", "=", "normalize_input", "\n", "self", ".", "output_blocks", "=", "sorted", "(", "output_blocks", ")", "\n", "self", ".", "last_needed_block", "=", "max", "(", "output_blocks", ")", "\n", "\n", "assert", "self", ".", "last_needed_block", "<=", "3", ",", "'Last possible output block index is 3'", "\n", "\n", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "if", "use_fid_inception", ":", "\n", "            ", "inception", "=", "fid_inception_v3", "(", ")", "\n", "", "else", ":", "\n", "            ", "inception", "=", "models", ".", "inception_v3", "(", "pretrained", "=", "True", ")", "\n", "\n", "# Block 0: input to maxpool1", "\n", "", "block0", "=", "[", "\n", "inception", ".", "Conv2d_1a_3x3", ",", "\n", "inception", ".", "Conv2d_2a_3x3", ",", "\n", "inception", ".", "Conv2d_2b_3x3", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", "\n", "]", "\n", "self", ".", "blocks", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "block0", ")", ")", "\n", "\n", "# Block 1: maxpool1 to maxpool2", "\n", "if", "self", ".", "last_needed_block", ">=", "1", ":", "\n", "            ", "block1", "=", "[", "\n", "inception", ".", "Conv2d_3b_1x1", ",", "\n", "inception", ".", "Conv2d_4a_3x3", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", "\n", "]", "\n", "self", ".", "blocks", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "block1", ")", ")", "\n", "\n", "# Block 2: maxpool2 to aux classifier", "\n", "", "if", "self", ".", "last_needed_block", ">=", "2", ":", "\n", "            ", "block2", "=", "[", "\n", "inception", ".", "Mixed_5b", ",", "\n", "inception", ".", "Mixed_5c", ",", "\n", "inception", ".", "Mixed_5d", ",", "\n", "inception", ".", "Mixed_6a", ",", "\n", "inception", ".", "Mixed_6b", ",", "\n", "inception", ".", "Mixed_6c", ",", "\n", "inception", ".", "Mixed_6d", ",", "\n", "inception", ".", "Mixed_6e", ",", "\n", "]", "\n", "self", ".", "blocks", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "block2", ")", ")", "\n", "\n", "# Block 3: aux classifier to final avgpool", "\n", "", "if", "self", ".", "last_needed_block", ">=", "3", ":", "\n", "            ", "block3", "=", "[", "\n", "inception", ".", "Mixed_7a", ",", "\n", "inception", ".", "Mixed_7b", ",", "\n", "inception", ".", "Mixed_7c", ",", "\n", "nn", ".", "AdaptiveAvgPool2d", "(", "output_size", "=", "(", "1", ",", "1", ")", ")", "\n", "]", "\n", "self", ".", "blocks", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "block3", ")", ")", "\n", "\n", "", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "requires_grad", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.util_gan.inception.InceptionV3.forward": [[129, 164], ["enumerate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "block", "outp.append"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "inp", ")", ":", "\n", "        ", "\"\"\"Get Inception feature maps\n\n        Parameters\n        ----------\n        inp : torch.autograd.Variable\n            Input tensor of shape Bx3xHxW. Values are expected to be in\n            range (0, 1)\n\n        Returns\n        -------\n        List of torch.autograd.Variable, corresponding to the selected output\n        block, sorted ascending by index\n        \"\"\"", "\n", "outp", "=", "[", "]", "\n", "x", "=", "inp", "\n", "\n", "if", "self", ".", "resize_input", ":", "\n", "            ", "x", "=", "F", ".", "interpolate", "(", "x", ",", "\n", "size", "=", "(", "299", ",", "299", ")", ",", "\n", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "False", ")", "\n", "\n", "", "if", "self", ".", "normalize_input", ":", "\n", "            ", "x", "=", "2", "*", "x", "-", "1", "# Scale from range (0, 1) to range (-1, 1)", "\n", "\n", "", "for", "idx", ",", "block", "in", "enumerate", "(", "self", ".", "blocks", ")", ":", "\n", "            ", "x", "=", "block", "(", "x", ")", "\n", "if", "idx", "in", "self", ".", "output_blocks", ":", "\n", "                ", "outp", ".", "append", "(", "x", ")", "\n", "\n", "", "if", "idx", "==", "self", ".", "last_needed_block", ":", "\n", "                ", "break", "\n", "\n", "", "", "return", "outp", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.util_gan.inception.FIDInceptionA.__init__": [[195, 197], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.Cutout.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "pool_features", ")", ":", "\n", "        ", "super", "(", "FIDInceptionA", ",", "self", ")", ".", "__init__", "(", "in_channels", ",", "pool_features", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.util_gan.inception.FIDInceptionA.forward": [[198, 216], ["inception.FIDInceptionA.branch1x1", "inception.FIDInceptionA.branch5x5_1", "inception.FIDInceptionA.branch5x5_2", "inception.FIDInceptionA.branch3x3dbl_1", "inception.FIDInceptionA.branch3x3dbl_2", "inception.FIDInceptionA.branch3x3dbl_3", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "inception.FIDInceptionA.branch_pool", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "branch1x1", "=", "self", ".", "branch1x1", "(", "x", ")", "\n", "\n", "branch5x5", "=", "self", ".", "branch5x5_1", "(", "x", ")", "\n", "branch5x5", "=", "self", ".", "branch5x5_2", "(", "branch5x5", ")", "\n", "\n", "branch3x3dbl", "=", "self", ".", "branch3x3dbl_1", "(", "x", ")", "\n", "branch3x3dbl", "=", "self", ".", "branch3x3dbl_2", "(", "branch3x3dbl", ")", "\n", "branch3x3dbl", "=", "self", ".", "branch3x3dbl_3", "(", "branch3x3dbl", ")", "\n", "\n", "# Patch: Tensorflow's average pool does not use the padded zero's in", "\n", "# its average calculation", "\n", "branch_pool", "=", "F", ".", "avg_pool2d", "(", "x", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "\n", "count_include_pad", "=", "False", ")", "\n", "branch_pool", "=", "self", ".", "branch_pool", "(", "branch_pool", ")", "\n", "\n", "outputs", "=", "[", "branch1x1", ",", "branch5x5", ",", "branch3x3dbl", ",", "branch_pool", "]", "\n", "return", "torch", ".", "cat", "(", "outputs", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.util_gan.inception.FIDInceptionC.__init__": [[220, 222], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.Cutout.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "channels_7x7", ")", ":", "\n", "        ", "super", "(", "FIDInceptionC", ",", "self", ")", ".", "__init__", "(", "in_channels", ",", "channels_7x7", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.util_gan.inception.FIDInceptionC.forward": [[223, 244], ["inception.FIDInceptionC.branch1x1", "inception.FIDInceptionC.branch7x7_1", "inception.FIDInceptionC.branch7x7_2", "inception.FIDInceptionC.branch7x7_3", "inception.FIDInceptionC.branch7x7dbl_1", "inception.FIDInceptionC.branch7x7dbl_2", "inception.FIDInceptionC.branch7x7dbl_3", "inception.FIDInceptionC.branch7x7dbl_4", "inception.FIDInceptionC.branch7x7dbl_5", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "inception.FIDInceptionC.branch_pool", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "branch1x1", "=", "self", ".", "branch1x1", "(", "x", ")", "\n", "\n", "branch7x7", "=", "self", ".", "branch7x7_1", "(", "x", ")", "\n", "branch7x7", "=", "self", ".", "branch7x7_2", "(", "branch7x7", ")", "\n", "branch7x7", "=", "self", ".", "branch7x7_3", "(", "branch7x7", ")", "\n", "\n", "branch7x7dbl", "=", "self", ".", "branch7x7dbl_1", "(", "x", ")", "\n", "branch7x7dbl", "=", "self", ".", "branch7x7dbl_2", "(", "branch7x7dbl", ")", "\n", "branch7x7dbl", "=", "self", ".", "branch7x7dbl_3", "(", "branch7x7dbl", ")", "\n", "branch7x7dbl", "=", "self", ".", "branch7x7dbl_4", "(", "branch7x7dbl", ")", "\n", "branch7x7dbl", "=", "self", ".", "branch7x7dbl_5", "(", "branch7x7dbl", ")", "\n", "\n", "# Patch: Tensorflow's average pool does not use the padded zero's in", "\n", "# its average calculation", "\n", "branch_pool", "=", "F", ".", "avg_pool2d", "(", "x", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "\n", "count_include_pad", "=", "False", ")", "\n", "branch_pool", "=", "self", ".", "branch_pool", "(", "branch_pool", ")", "\n", "\n", "outputs", "=", "[", "branch1x1", ",", "branch7x7", ",", "branch7x7dbl", ",", "branch_pool", "]", "\n", "return", "torch", ".", "cat", "(", "outputs", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.util_gan.inception.FIDInceptionE_1.__init__": [[248, 250], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.Cutout.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ")", ":", "\n", "        ", "super", "(", "FIDInceptionE_1", ",", "self", ")", ".", "__init__", "(", "in_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.util_gan.inception.FIDInceptionE_1.forward": [[251, 277], ["inception.FIDInceptionE_1.branch1x1", "inception.FIDInceptionE_1.branch3x3_1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "inception.FIDInceptionE_1.branch3x3dbl_1", "inception.FIDInceptionE_1.branch3x3dbl_2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "inception.FIDInceptionE_1.branch_pool", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "inception.FIDInceptionE_1.branch3x3_2a", "inception.FIDInceptionE_1.branch3x3_2b", "inception.FIDInceptionE_1.branch3x3dbl_3a", "inception.FIDInceptionE_1.branch3x3dbl_3b"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "branch1x1", "=", "self", ".", "branch1x1", "(", "x", ")", "\n", "\n", "branch3x3", "=", "self", ".", "branch3x3_1", "(", "x", ")", "\n", "branch3x3", "=", "[", "\n", "self", ".", "branch3x3_2a", "(", "branch3x3", ")", ",", "\n", "self", ".", "branch3x3_2b", "(", "branch3x3", ")", ",", "\n", "]", "\n", "branch3x3", "=", "torch", ".", "cat", "(", "branch3x3", ",", "1", ")", "\n", "\n", "branch3x3dbl", "=", "self", ".", "branch3x3dbl_1", "(", "x", ")", "\n", "branch3x3dbl", "=", "self", ".", "branch3x3dbl_2", "(", "branch3x3dbl", ")", "\n", "branch3x3dbl", "=", "[", "\n", "self", ".", "branch3x3dbl_3a", "(", "branch3x3dbl", ")", ",", "\n", "self", ".", "branch3x3dbl_3b", "(", "branch3x3dbl", ")", ",", "\n", "]", "\n", "branch3x3dbl", "=", "torch", ".", "cat", "(", "branch3x3dbl", ",", "1", ")", "\n", "\n", "# Patch: Tensorflow's average pool does not use the padded zero's in", "\n", "# its average calculation", "\n", "branch_pool", "=", "F", ".", "avg_pool2d", "(", "x", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "\n", "count_include_pad", "=", "False", ")", "\n", "branch_pool", "=", "self", ".", "branch_pool", "(", "branch_pool", ")", "\n", "\n", "outputs", "=", "[", "branch1x1", ",", "branch3x3", ",", "branch3x3dbl", ",", "branch_pool", "]", "\n", "return", "torch", ".", "cat", "(", "outputs", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.util_gan.inception.FIDInceptionE_2.__init__": [[281, 283], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.Cutout.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ")", ":", "\n", "        ", "super", "(", "FIDInceptionE_2", ",", "self", ")", ".", "__init__", "(", "in_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.util_gan.inception.FIDInceptionE_2.forward": [[284, 311], ["inception.FIDInceptionE_2.branch1x1", "inception.FIDInceptionE_2.branch3x3_1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "inception.FIDInceptionE_2.branch3x3dbl_1", "inception.FIDInceptionE_2.branch3x3dbl_2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "inception.FIDInceptionE_2.branch_pool", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "inception.FIDInceptionE_2.branch3x3_2a", "inception.FIDInceptionE_2.branch3x3_2b", "inception.FIDInceptionE_2.branch3x3dbl_3a", "inception.FIDInceptionE_2.branch3x3dbl_3b"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "branch1x1", "=", "self", ".", "branch1x1", "(", "x", ")", "\n", "\n", "branch3x3", "=", "self", ".", "branch3x3_1", "(", "x", ")", "\n", "branch3x3", "=", "[", "\n", "self", ".", "branch3x3_2a", "(", "branch3x3", ")", ",", "\n", "self", ".", "branch3x3_2b", "(", "branch3x3", ")", ",", "\n", "]", "\n", "branch3x3", "=", "torch", ".", "cat", "(", "branch3x3", ",", "1", ")", "\n", "\n", "branch3x3dbl", "=", "self", ".", "branch3x3dbl_1", "(", "x", ")", "\n", "branch3x3dbl", "=", "self", ".", "branch3x3dbl_2", "(", "branch3x3dbl", ")", "\n", "branch3x3dbl", "=", "[", "\n", "self", ".", "branch3x3dbl_3a", "(", "branch3x3dbl", ")", ",", "\n", "self", ".", "branch3x3dbl_3b", "(", "branch3x3dbl", ")", ",", "\n", "]", "\n", "branch3x3dbl", "=", "torch", ".", "cat", "(", "branch3x3dbl", ",", "1", ")", "\n", "\n", "# Patch: The FID Inception model uses max pooling instead of average", "\n", "# pooling. This is likely an error in this specific Inception", "\n", "# implementation, as other Inception models use average pooling here", "\n", "# (which matches the description in the paper).", "\n", "branch_pool", "=", "F", ".", "max_pool2d", "(", "x", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "branch_pool", "=", "self", ".", "branch_pool", "(", "branch_pool", ")", "\n", "\n", "outputs", "=", "[", "branch1x1", ",", "branch3x3", ",", "branch3x3dbl", ",", "branch_pool", "]", "\n", "return", "torch", ".", "cat", "(", "outputs", ",", "1", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.util_gan.inception.fid_inception_v3": [[166, 191], ["torchvision.models.inception_v3", "inception.FIDInceptionA", "inception.FIDInceptionA", "inception.FIDInceptionA", "inception.FIDInceptionC", "inception.FIDInceptionC", "inception.FIDInceptionC", "inception.FIDInceptionC", "inception.FIDInceptionE_1", "inception.FIDInceptionE_2", "load_state_dict_from_url", "models.inception_v3.load_state_dict"], "function", ["None"], ["", "", "def", "fid_inception_v3", "(", ")", ":", "\n", "    ", "\"\"\"Build pretrained Inception model for FID computation\n\n    The Inception model for FID computation uses a different set of weights\n    and has a slightly different structure than torchvision's Inception.\n\n    This method first constructs torchvision's Inception and then patches the\n    necessary parts that are different in the FID Inception model.\n    \"\"\"", "\n", "inception", "=", "models", ".", "inception_v3", "(", "num_classes", "=", "1008", ",", "\n", "aux_logits", "=", "False", ",", "\n", "pretrained", "=", "False", ")", "\n", "inception", ".", "Mixed_5b", "=", "FIDInceptionA", "(", "192", ",", "pool_features", "=", "32", ")", "\n", "inception", ".", "Mixed_5c", "=", "FIDInceptionA", "(", "256", ",", "pool_features", "=", "64", ")", "\n", "inception", ".", "Mixed_5d", "=", "FIDInceptionA", "(", "288", ",", "pool_features", "=", "64", ")", "\n", "inception", ".", "Mixed_6b", "=", "FIDInceptionC", "(", "768", ",", "channels_7x7", "=", "128", ")", "\n", "inception", ".", "Mixed_6c", "=", "FIDInceptionC", "(", "768", ",", "channels_7x7", "=", "160", ")", "\n", "inception", ".", "Mixed_6d", "=", "FIDInceptionC", "(", "768", ",", "channels_7x7", "=", "160", ")", "\n", "inception", ".", "Mixed_6e", "=", "FIDInceptionC", "(", "768", ",", "channels_7x7", "=", "192", ")", "\n", "inception", ".", "Mixed_7b", "=", "FIDInceptionE_1", "(", "1280", ")", "\n", "inception", ".", "Mixed_7c", "=", "FIDInceptionE_2", "(", "2048", ")", "\n", "\n", "state_dict", "=", "load_state_dict_from_url", "(", "FID_WEIGHTS_URL", ",", "progress", "=", "True", ")", "\n", "inception", ".", "load_state_dict", "(", "state_dict", ")", "\n", "return", "inception", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.util_gan.fid_score.get_activations": [[69, 136], ["model.eval", "numpy.empty", "tqdm", "print", "len", "print", "len", "len", "range", "numpy.array", "images.transpose.transpose", "torch.from_numpy().type", "torch.nn.functional.adaptive_avg_pool2d.cpu().data.numpy().reshape", "print", "len", "print", "batch.cuda.cuda", "model", "torch.nn.functional.adaptive_avg_pool2d", "scipy.misc.imread().astype", "torch.from_numpy", "torch.nn.functional.adaptive_avg_pool2d.cpu().data.numpy", "scipy.misc.imread", "str", "torch.nn.functional.adaptive_avg_pool2d.cpu"], "function", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.eval_teacher.eval"], ["def", "get_activations", "(", "files", ",", "model", ",", "batch_size", "=", "60", ",", "dims", "=", "2048", ",", "\n", "cuda", "=", "False", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "\"\"\"Calculates the activations of the pool_3 layer for all images.\n\n    Params:\n    -- files       : List of image files paths\n    -- model       : Instance of inception model\n    -- batch_size  : Batch size of images for the model to process at once.\n                     Make sure that the number of samples is a multiple of\n                     the batch size, otherwise some samples are ignored. This\n                     behavior is retained to match the original FID score\n                     implementation.\n    -- dims        : Dimensionality of features returned by Inception\n    -- cuda        : If set to True, use GPU\n    -- verbose     : If set to True and parameter out_step is given, the number\n                     of calculated batches is reported.\n    Returns:\n    -- A numpy array of dimension (num images, dims) that contains the\n       activations of the given tensor when feeding inception with the\n       query tensor.\n    \"\"\"", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "if", "len", "(", "files", ")", "%", "batch_size", "!=", "0", ":", "\n", "        ", "print", "(", "(", "'Warning: number of images is not a multiple of the '", "\n", "'batch size. Some samples are going to be ignored.'", ")", ")", "\n", "", "if", "batch_size", ">", "len", "(", "files", ")", ":", "\n", "        ", "print", "(", "(", "'Warning: batch size is bigger than the data size. '", "\n", "'Setting batch size to data size'", ")", ")", "\n", "batch_size", "=", "len", "(", "files", ")", "\n", "\n", "", "n_batches", "=", "len", "(", "files", ")", "//", "batch_size", "\n", "n_used_imgs", "=", "n_batches", "*", "batch_size", "\n", "\n", "pred_arr", "=", "np", ".", "empty", "(", "(", "n_used_imgs", ",", "dims", ")", ")", "\n", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "n_batches", ")", ")", ":", "\n", "        ", "if", "verbose", ":", "\n", "            ", "print", "(", "'\\rPropagating batch %d/%d'", "%", "(", "i", "+", "1", ",", "n_batches", ")", ",", "\n", "end", "=", "''", ",", "flush", "=", "True", ")", "\n", "", "start", "=", "i", "*", "batch_size", "\n", "end", "=", "start", "+", "batch_size", "\n", "\n", "images", "=", "np", ".", "array", "(", "[", "imread", "(", "str", "(", "f", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "for", "f", "in", "files", "[", "start", ":", "end", "]", "]", ")", "\n", "\n", "# Reshape to (n_images, 3, height, width)", "\n", "images", "=", "images", ".", "transpose", "(", "(", "0", ",", "3", ",", "1", ",", "2", ")", ")", "\n", "images", "/=", "255", "\n", "\n", "batch", "=", "torch", ".", "from_numpy", "(", "images", ")", ".", "type", "(", "torch", ".", "FloatTensor", ")", "\n", "if", "cuda", ":", "\n", "            ", "batch", "=", "batch", ".", "cuda", "(", ")", "\n", "\n", "", "pred", "=", "model", "(", "batch", ")", "[", "0", "]", "\n", "\n", "# If model output is not scalar, apply global spatial average pooling.", "\n", "# This happens if you choose a dimensionality not equal 2048.", "\n", "if", "pred", ".", "shape", "[", "2", "]", "!=", "1", "or", "pred", ".", "shape", "[", "3", "]", "!=", "1", ":", "\n", "            ", "pred", "=", "adaptive_avg_pool2d", "(", "pred", ",", "output_size", "=", "(", "1", ",", "1", ")", ")", "\n", "\n", "", "pred_arr", "[", "start", ":", "end", "]", "=", "pred", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ".", "reshape", "(", "batch_size", ",", "-", "1", ")", "\n", "\n", "", "if", "verbose", ":", "\n", "        ", "print", "(", "' done'", ")", "\n", "\n", "", "return", "pred_arr", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.util_gan.fid_score.calculate_frechet_distance": [[138, 193], ["numpy.atleast_1d", "numpy.atleast_1d", "numpy.atleast_2d", "numpy.atleast_2d", "scipy.linalg.sqrtm", "numpy.iscomplexobj", "numpy.trace", "np.atleast_2d.dot", "numpy.isfinite().all", "print", "scipy.linalg.sqrtm", "numpy.eye", "numpy.allclose", "numpy.max", "ValueError", "numpy.trace", "numpy.isfinite", "numpy.abs", "diff.dot", "numpy.trace", "numpy.diagonal"], "function", ["None"], ["", "def", "calculate_frechet_distance", "(", "mu1", ",", "sigma1", ",", "mu2", ",", "sigma2", ",", "eps", "=", "1e-6", ")", ":", "\n", "    ", "\"\"\"Numpy implementation of the Frechet Distance.\n    The Frechet distance between two multivariate Gaussians X_1 ~ N(mu_1, C_1)\n    and X_2 ~ N(mu_2, C_2) is\n            d^2 = ||mu_1 - mu_2||^2 + Tr(C_1 + C_2 - 2*sqrt(C_1*C_2)).\n\n    Stable version by Dougal J. Sutherland.\n\n    Params:\n    -- mu1   : Numpy array containing the activations of a layer of the\n               inception net (like returned by the function 'get_predictions')\n               for generated samples.\n    -- mu2   : The sample mean over activations, precalculated on an\n               representative data set.\n    -- sigma1: The covariance matrix over activations for generated samples.\n    -- sigma2: The covariance matrix over activations, precalculated on an\n               representative data set.\n\n    Returns:\n    --   : The Frechet Distance.\n    \"\"\"", "\n", "\n", "mu1", "=", "np", ".", "atleast_1d", "(", "mu1", ")", "\n", "mu2", "=", "np", ".", "atleast_1d", "(", "mu2", ")", "\n", "\n", "sigma1", "=", "np", ".", "atleast_2d", "(", "sigma1", ")", "\n", "sigma2", "=", "np", ".", "atleast_2d", "(", "sigma2", ")", "\n", "\n", "assert", "mu1", ".", "shape", "==", "mu2", ".", "shape", ",", "'Training and test mean vectors have different lengths'", "\n", "assert", "sigma1", ".", "shape", "==", "sigma2", ".", "shape", ",", "'Training and test covariances have different dimensions'", "\n", "\n", "diff", "=", "mu1", "-", "mu2", "\n", "\n", "# Product might be almost singular", "\n", "covmean", ",", "_", "=", "linalg", ".", "sqrtm", "(", "sigma1", ".", "dot", "(", "sigma2", ")", ",", "disp", "=", "False", ")", "\n", "if", "not", "np", ".", "isfinite", "(", "covmean", ")", ".", "all", "(", ")", ":", "\n", "        ", "msg", "=", "(", "'fid calculation produces singular product; '", "\n", "'adding %s to diagonal of cov estimates'", ")", "%", "eps", "\n", "print", "(", "msg", ")", "\n", "offset", "=", "np", ".", "eye", "(", "sigma1", ".", "shape", "[", "0", "]", ")", "*", "eps", "\n", "covmean", "=", "linalg", ".", "sqrtm", "(", "(", "sigma1", "+", "offset", ")", ".", "dot", "(", "sigma2", "+", "offset", ")", ")", "\n", "\n", "# Numerical error might give slight imaginary component", "\n", "", "if", "np", ".", "iscomplexobj", "(", "covmean", ")", ":", "\n", "        ", "if", "not", "np", ".", "allclose", "(", "np", ".", "diagonal", "(", "covmean", ")", ".", "imag", ",", "0", ",", "atol", "=", "1e-3", ")", ":", "\n", "            ", "m", "=", "np", ".", "max", "(", "np", ".", "abs", "(", "covmean", ".", "imag", ")", ")", "\n", "raise", "ValueError", "(", "'Imaginary component {}'", ".", "format", "(", "m", ")", ")", "\n", "", "covmean", "=", "covmean", ".", "real", "\n", "\n", "", "tr_covmean", "=", "np", ".", "trace", "(", "covmean", ")", "\n", "\n", "return", "(", "diff", ".", "dot", "(", "diff", ")", "+", "np", ".", "trace", "(", "sigma1", ")", "+", "\n", "np", ".", "trace", "(", "sigma2", ")", "-", "2", "*", "tr_covmean", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.util_gan.fid_score.calculate_activation_statistics": [[195, 218], ["fid_score.get_activations", "numpy.mean", "numpy.cov"], "function", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.util_gan.fid_score.get_activations"], ["", "def", "calculate_activation_statistics", "(", "files", ",", "model", ",", "batch_size", "=", "50", ",", "\n", "dims", "=", "2048", ",", "cuda", "=", "False", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "\"\"\"Calculation of the statistics used by the FID.\n    Params:\n    -- files       : List of image files paths\n    -- model       : Instance of inception model\n    -- batch_size  : The images numpy array is split into batches with\n                     batch size batch_size. A reasonable batch size\n                     depends on the hardware.\n    -- dims        : Dimensionality of features returned by Inception\n    -- cuda        : If set to True, use GPU\n    -- verbose     : If set to True and parameter out_step is given, the\n                     number of calculated batches is reported.\n    Returns:\n    -- mu    : The mean over samples of the activations of the pool_3 layer of\n               the inception model.\n    -- sigma : The covariance matrix of the activations of the pool_3 layer of\n               the inception model.\n    \"\"\"", "\n", "act", "=", "get_activations", "(", "files", ",", "model", ",", "batch_size", ",", "dims", ",", "cuda", ",", "verbose", ")", "\n", "mu", "=", "np", ".", "mean", "(", "act", ",", "axis", "=", "0", ")", "\n", "sigma", "=", "np", ".", "cov", "(", "act", ",", "rowvar", "=", "False", ")", "\n", "return", "mu", ",", "sigma", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.util_gan.fid_score._compute_statistics_of_path": [[220, 232], ["pathlib.Path.endswith", "numpy.load", "np.load.close", "pathlib.Path", "fid_score.calculate_activation_statistics", "list", "list", "pathlib.Path.glob", "pathlib.Path.glob"], "function", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.load", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.util_gan.fid_score.calculate_activation_statistics"], ["", "def", "_compute_statistics_of_path", "(", "path", ",", "model", ",", "batch_size", ",", "dims", ",", "cuda", ")", ":", "\n", "    ", "if", "path", ".", "endswith", "(", "'.npz'", ")", ":", "\n", "        ", "f", "=", "np", ".", "load", "(", "path", ")", "\n", "m", ",", "s", "=", "f", "[", "'mu'", "]", "[", ":", "]", ",", "f", "[", "'sigma'", "]", "[", ":", "]", "\n", "f", ".", "close", "(", ")", "\n", "", "else", ":", "\n", "        ", "path", "=", "pathlib", ".", "Path", "(", "path", ")", "\n", "files", "=", "list", "(", "path", ".", "glob", "(", "'*.jpg'", ")", ")", "+", "list", "(", "path", ".", "glob", "(", "'*.png'", ")", ")", "\n", "m", ",", "s", "=", "calculate_activation_statistics", "(", "files", ",", "model", ",", "batch_size", ",", "\n", "dims", ",", "cuda", ")", "\n", "\n", "", "return", "m", ",", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.util_gan.fid_score.calculate_fid_given_paths": [[234, 253], ["inception.InceptionV3", "fid_score._compute_statistics_of_path", "fid_score._compute_statistics_of_path", "fid_score.calculate_frechet_distance", "inception.InceptionV3.cuda", "os.path.exists", "RuntimeError"], "function", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.util_gan.fid_score._compute_statistics_of_path", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.util_gan.fid_score._compute_statistics_of_path", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.util_gan.fid_score.calculate_frechet_distance"], ["", "def", "calculate_fid_given_paths", "(", "paths", ",", "batch_size", ",", "cuda", ",", "dims", ")", ":", "\n", "    ", "\"\"\"Calculates the FID of two paths\"\"\"", "\n", "for", "p", "in", "paths", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "p", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "'Invalid path: %s'", "%", "p", ")", "\n", "\n", "", "", "block_idx", "=", "InceptionV3", ".", "BLOCK_INDEX_BY_DIM", "[", "dims", "]", "\n", "\n", "model", "=", "InceptionV3", "(", "[", "block_idx", "]", ")", "\n", "if", "cuda", ":", "\n", "        ", "model", ".", "cuda", "(", ")", "\n", "\n", "", "m1", ",", "s1", "=", "_compute_statistics_of_path", "(", "paths", "[", "0", "]", ",", "model", ",", "batch_size", ",", "\n", "dims", ",", "cuda", ")", "\n", "m2", ",", "s2", "=", "_compute_statistics_of_path", "(", "paths", "[", "1", "]", ",", "model", ",", "batch_size", ",", "\n", "dims", ",", "cuda", ")", "\n", "fid_value", "=", "calculate_frechet_distance", "(", "m1", ",", "s1", ",", "m2", ",", "s2", ")", "\n", "\n", "return", "fid_value", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.util_gan.fid_score.compute_fid": [[255, 261], ["fid_score.calculate_fid_given_paths"], "function", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.util_gan.fid_score.calculate_fid_given_paths"], ["", "def", "compute_fid", "(", "path1", ",", "path2", ")", ":", "\n", "    ", "fid_value", "=", "calculate_fid_given_paths", "(", "[", "path1", ",", "path2", "]", ",", "\n", "args", ".", "batch_size", ",", "\n", "True", ",", "\n", "args", ".", "dims", ")", "\n", "return", "fid_value", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.util_gan.vgg_feature.VGGFeature.__init__": [[6, 23], ["torch.Module.__init__", "torchvision.models.vgg.vgg19", "torch.Tensor().view().cuda", "torch.Tensor().view().cuda", "torch.Tensor().view().cuda", "torch.Tensor().view().cuda", "torch.Tensor().view().cuda", "torch.Tensor().view().cuda", "torch.Tensor().view().cuda", "torch.Tensor().view().cuda", "vgg_feature.VGGFeature.register_buffer", "vgg_feature.VGGFeature.register_buffer", "vgg_feature.VGGFeature.features.named_parameters", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "list", "list", "vgg_feature.VGGFeature.vgg.features.children", "vgg_feature.VGGFeature.vgg.features.children"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.Cutout.__init__"], ["        ", "super", "(", "VGGFeature", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "add_module", "(", "'vgg'", ",", "Vgg16", "(", ")", ")", "\n", "", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "(", "x", ".", "clone", "(", ")", "+", "1.", ")", "/", "2.", "\n", "x_vgg", "=", "self", ".", "vgg", "(", "x", ")", "\n", "return", "x_vgg", "\n", "", "", ""]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.util_gan.vgg_feature.VGGFeature.__call__": [[24, 28], ["vgg_feature.VGGFeature.features"], "methods", ["None"], []], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.util_gan.lr.LambdaLR.__init__": [[2, 7], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "n_epochs", ",", "offset", ",", "decay_start_epoch", ")", ":", "\n", "        ", "assert", "(", "(", "n_epochs", "-", "decay_start_epoch", ")", ">", "0", ")", ",", "\"Decay must start before the training session ends!\"", "\n", "self", ".", "n_epochs", "=", "n_epochs", "\n", "self", ".", "offset", "=", "offset", "\n", "self", ".", "decay_start_epoch", "=", "decay_start_epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.util_gan.lr.LambdaLR.step": [[8, 10], ["max"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "return", "1.0", "-", "max", "(", "0", ",", "epoch", "+", "self", ".", "offset", "-", "self", ".", "decay_start_epoch", ")", "/", "(", "self", ".", "n_epochs", "-", "self", ".", "decay_start_epoch", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.util_gan.vgg_feature_bk2.VGGFeature.__init__": [[5, 12], ["torch.Module.__init__", "torchvision.models.vgg.vgg16", "torch.Sequential().eval", "vgg_feature_bk2.VGGFeature.loss_network.parameters", "torch.Sequential", "list"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.Cutout.__init__", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.eval_teacher.eval"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "VGGFeature", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "vgg", "=", "vgg16", "(", "pretrained", "=", "True", ")", "\n", "self", ".", "loss_network", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "self", ".", "vgg", ".", "features", ")", "[", ":", "31", "]", ")", ".", "eval", "(", ")", "\n", "\n", "for", "param", "in", "self", ".", "loss_network", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.util_gan.vgg_feature_bk2.VGGFeature.__call__": [[13, 17], ["x.clone.clone.clone", "vgg_feature_bk2.VGGFeature.loss_network"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", ".", "clone", "(", ")", "\n", "x_vgg", "=", "self", ".", "loss_network", "(", "x", ")", "\n", "return", "x_vgg", "\n", "", "", ""]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.util_gan.vgg_feature_bk.VGGFeature.__init__": [[5, 8], ["torch.Module.__init__", "vgg_feature_bk.VGGFeature.add_module", "vgg.Vgg16"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.Cutout.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "VGGFeature", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "add_module", "(", "'vgg'", ",", "Vgg16", "(", ")", ")", "\n", "", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.util_gan.vgg_feature_bk.VGGFeature.__call__": [[8, 12], ["x.clone.clone.clone", "vgg_feature_bk.VGGFeature.vgg"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", ".", "clone", "(", ")", "\n", "x_vgg", "=", "self", ".", "vgg", "(", "x", ")", "\n", "return", "x_vgg", "\n", "", "", ""]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.util_gan.psnr.compute_psnr": [[9, 63], ["sorted", "sorted", "enumerate", "glob.glob", "glob.glob", "print", "print", "psnr.calculate_psnr", "PSNR_all.append", "sum", "len", "os.path.splitext", "cv2.imread", "cv2.imread", "psnr.bgr2ycbcr", "psnr.bgr2ycbcr", "os.path.basename", "os.path.join", "ValueError"], "function", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.util_gan.psnr.calculate_psnr", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.util_gan.psnr.bgr2ycbcr", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.util_gan.psnr.bgr2ycbcr"], ["def", "compute_psnr", "(", "folder_Gen", ",", "folder_GT", ",", "test_Y", "=", "True", ")", ":", "\n", "# Configurations", "\n", "\n", "# GT - Ground-truth;", "\n", "# Gen: Generated / Restored / Recovered images", "\n", "\n", "    ", "crop_border", "=", "4", "\n", "suffix", "=", "'_gen'", "# suffix for Gen images", "\n", "\n", "PSNR_all", "=", "[", "]", "\n", "SSIM_all", "=", "[", "]", "\n", "\n", "img_list_gt", "=", "sorted", "(", "glob", ".", "glob", "(", "folder_GT", "+", "'/*'", ")", ")", "\n", "\n", "img_list_gen", "=", "sorted", "(", "glob", ".", "glob", "(", "folder_Gen", "+", "'/*'", ")", ")", "\n", "\n", "if", "test_Y", ":", "\n", "        ", "print", "(", "'Testing Y channel.'", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Testing RGB channels.'", ")", "\n", "\n", "", "for", "i", ",", "img_path", "in", "enumerate", "(", "img_list_gt", ")", ":", "\n", "        ", "base_name", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "img_path", ")", ")", "[", "0", "]", "\n", "im_GT", "=", "cv2", ".", "imread", "(", "img_path", ")", "/", "255.", "\n", "# im_Gen = cv2.imread(os.path.join(folder_Gen, base_name + suffix + '.png')) / 255.", "\n", "im_Gen", "=", "cv2", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "img_list_gen", "[", "i", "]", ")", ")", "/", "255.", "\n", "\n", "if", "test_Y", "and", "im_GT", ".", "shape", "[", "2", "]", "==", "3", ":", "# evaluate on Y channel in YCbCr color space", "\n", "            ", "im_GT_in", "=", "bgr2ycbcr", "(", "im_GT", ")", "\n", "im_Gen_in", "=", "bgr2ycbcr", "(", "im_Gen", ")", "\n", "", "else", ":", "\n", "            ", "im_GT_in", "=", "im_GT", "\n", "im_Gen_in", "=", "im_Gen", "\n", "\n", "# crop borders", "\n", "", "if", "im_GT_in", ".", "ndim", "==", "3", ":", "\n", "            ", "cropped_GT", "=", "im_GT_in", "[", "crop_border", ":", "-", "crop_border", ",", "crop_border", ":", "-", "crop_border", ",", ":", "]", "\n", "cropped_Gen", "=", "im_Gen_in", "[", "crop_border", ":", "-", "crop_border", ",", "crop_border", ":", "-", "crop_border", ",", ":", "]", "\n", "", "elif", "im_GT_in", ".", "ndim", "==", "2", ":", "\n", "            ", "cropped_GT", "=", "im_GT_in", "[", "crop_border", ":", "-", "crop_border", ",", "crop_border", ":", "-", "crop_border", "]", "\n", "cropped_Gen", "=", "im_Gen_in", "[", "crop_border", ":", "-", "crop_border", ",", "crop_border", ":", "-", "crop_border", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Wrong image dimension: {}. Should be 2 or 3.'", ".", "format", "(", "im_GT_in", ".", "ndim", ")", ")", "\n", "\n", "", "PSNR", "=", "calculate_psnr", "(", "cropped_GT", "*", "255", ",", "cropped_Gen", "*", "255", ")", "\n", "PSNR_all", ".", "append", "(", "PSNR", ")", "\n", "\n", "# SSIM = calculate_ssim(cropped_GT * 255, cropped_Gen * 255)", "\n", "# SSIM_all.append(SSIM)", "\n", "\n", "# print('{:3d} - {:25}. \\tPSNR: {:.6f} dB, \\tSSIM: {:.6f}'.format(", "\n", "#     i + 1, base_name, PSNR, SSIM))", "\n", "\n", "", "return", "sum", "(", "PSNR_all", ")", "/", "len", "(", "PSNR_all", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.util_gan.psnr.calculate_psnr": [[65, 73], ["img1.astype.astype", "img2.astype.astype", "numpy.mean", "float", "math.log10", "math.sqrt"], "function", ["None"], ["", "def", "calculate_psnr", "(", "img1", ",", "img2", ")", ":", "\n", "# img1 and img2 have range [0, 255]", "\n", "    ", "img1", "=", "img1", ".", "astype", "(", "np", ".", "float64", ")", "\n", "img2", "=", "img2", ".", "astype", "(", "np", ".", "float64", ")", "\n", "mse", "=", "np", ".", "mean", "(", "(", "img1", "-", "img2", ")", "**", "2", ")", "\n", "if", "mse", "==", "0", ":", "\n", "        ", "return", "float", "(", "'inf'", ")", "\n", "", "return", "20", "*", "math", ".", "log10", "(", "255.0", "/", "math", ".", "sqrt", "(", "mse", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.util_gan.psnr.ssim": [[75, 96], ["img1.astype.astype", "img2.astype.astype", "cv2.getGaussianKernel", "numpy.outer", "ssim_map.mean", "cv2.getGaussianKernel.transpose", "cv2.filter2D", "cv2.filter2D", "cv2.filter2D", "cv2.filter2D", "cv2.filter2D"], "function", ["None"], ["", "def", "ssim", "(", "img1", ",", "img2", ")", ":", "\n", "    ", "C1", "=", "(", "0.01", "*", "255", ")", "**", "2", "\n", "C2", "=", "(", "0.03", "*", "255", ")", "**", "2", "\n", "\n", "img1", "=", "img1", ".", "astype", "(", "np", ".", "float64", ")", "\n", "img2", "=", "img2", ".", "astype", "(", "np", ".", "float64", ")", "\n", "kernel", "=", "cv2", ".", "getGaussianKernel", "(", "11", ",", "1.5", ")", "\n", "window", "=", "np", ".", "outer", "(", "kernel", ",", "kernel", ".", "transpose", "(", ")", ")", "\n", "\n", "mu1", "=", "cv2", ".", "filter2D", "(", "img1", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "# valid", "\n", "mu2", "=", "cv2", ".", "filter2D", "(", "img2", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "\n", "mu1_sq", "=", "mu1", "**", "2", "\n", "mu2_sq", "=", "mu2", "**", "2", "\n", "mu1_mu2", "=", "mu1", "*", "mu2", "\n", "sigma1_sq", "=", "cv2", ".", "filter2D", "(", "img1", "**", "2", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "-", "mu1_sq", "\n", "sigma2_sq", "=", "cv2", ".", "filter2D", "(", "img2", "**", "2", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "-", "mu2_sq", "\n", "sigma12", "=", "cv2", ".", "filter2D", "(", "img1", "*", "img2", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "-", "mu1_mu2", "\n", "\n", "ssim_map", "=", "(", "(", "2", "*", "mu1_mu2", "+", "C1", ")", "*", "(", "2", "*", "sigma12", "+", "C2", ")", ")", "/", "(", "(", "mu1_sq", "+", "mu2_sq", "+", "C1", ")", "*", "\n", "(", "sigma1_sq", "+", "sigma2_sq", "+", "C2", ")", ")", "\n", "return", "ssim_map", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.util_gan.psnr.calculate_ssim": [[98, 117], ["ValueError", "psnr.ssim", "ValueError", "range", "numpy.array().mean", "ssims.append", "psnr.ssim", "psnr.ssim", "numpy.array", "numpy.squeeze", "numpy.squeeze"], "function", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.util_gan.psnr.ssim", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.util_gan.psnr.ssim", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.util_gan.psnr.ssim"], ["", "def", "calculate_ssim", "(", "img1", ",", "img2", ")", ":", "\n", "    ", "'''calculate SSIM\n    the same outputs as MATLAB's\n    img1, img2: [0, 255]\n    '''", "\n", "if", "not", "img1", ".", "shape", "==", "img2", ".", "shape", ":", "\n", "        ", "raise", "ValueError", "(", "'Input images must have the same dimensions.'", ")", "\n", "", "if", "img1", ".", "ndim", "==", "2", ":", "\n", "        ", "return", "ssim", "(", "img1", ",", "img2", ")", "\n", "", "elif", "img1", ".", "ndim", "==", "3", ":", "\n", "        ", "if", "img1", ".", "shape", "[", "2", "]", "==", "3", ":", "\n", "            ", "ssims", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "                ", "ssims", ".", "append", "(", "ssim", "(", "img1", ",", "img2", ")", ")", "\n", "", "return", "np", ".", "array", "(", "ssims", ")", ".", "mean", "(", ")", "\n", "", "elif", "img1", ".", "shape", "[", "2", "]", "==", "1", ":", "\n", "            ", "return", "ssim", "(", "np", ".", "squeeze", "(", "img1", ")", ",", "np", ".", "squeeze", "(", "img2", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Wrong input image dimensions.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.util_gan.psnr.bgr2ycbcr": [[119, 141], ["img.astype", "rlt.round.astype", "rlt.round.round", "numpy.dot", "numpy.matmul"], "function", ["None"], ["", "", "def", "bgr2ycbcr", "(", "img", ",", "only_y", "=", "True", ")", ":", "\n", "    ", "'''same as matlab rgb2ycbcr\n    only_y: only return Y channel\n    Input:\n        uint8, [0, 255]\n        float, [0, 1]\n    '''", "\n", "in_img_type", "=", "img", ".", "dtype", "\n", "img", ".", "astype", "(", "np", ".", "float32", ")", "\n", "if", "in_img_type", "!=", "np", ".", "uint8", ":", "\n", "        ", "img", "*=", "255.", "\n", "# convert", "\n", "", "if", "only_y", ":", "\n", "        ", "rlt", "=", "np", ".", "dot", "(", "img", ",", "[", "24.966", ",", "128.553", ",", "65.481", "]", ")", "/", "255.0", "+", "16.0", "\n", "", "else", ":", "\n", "        ", "rlt", "=", "np", ".", "matmul", "(", "img", ",", "[", "[", "24.966", ",", "112.0", ",", "-", "18.214", "]", ",", "[", "128.553", ",", "-", "74.203", ",", "-", "93.786", "]", ",", "\n", "[", "65.481", ",", "-", "37.797", ",", "112.0", "]", "]", ")", "/", "255.0", "+", "[", "16", ",", "128", ",", "128", "]", "\n", "", "if", "in_img_type", "==", "np", ".", "uint8", ":", "\n", "        ", "rlt", "=", "rlt", ".", "round", "(", ")", "\n", "", "else", ":", "\n", "        ", "rlt", "/=", "255.", "\n", "", "return", "rlt", ".", "astype", "(", "in_img_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.img_utils.get_2dshape": [[8, 22], ["isinstance", "int", "map", "min"], "function", ["None"], ["def", "get_2dshape", "(", "shape", ",", "*", ",", "zero", "=", "True", ")", ":", "\n", "    ", "if", "not", "isinstance", "(", "shape", ",", "collections", ".", "Iterable", ")", ":", "\n", "        ", "shape", "=", "int", "(", "shape", ")", "\n", "shape", "=", "(", "shape", ",", "shape", ")", "\n", "", "else", ":", "\n", "        ", "h", ",", "w", "=", "map", "(", "int", ",", "shape", ")", "\n", "shape", "=", "(", "h", ",", "w", ")", "\n", "", "if", "zero", ":", "\n", "        ", "minv", "=", "0", "\n", "", "else", ":", "\n", "        ", "minv", "=", "1", "\n", "\n", "", "assert", "min", "(", "shape", ")", ">=", "minv", ",", "'invalid shape: {}'", ".", "format", "(", "shape", ")", "\n", "return", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.img_utils.random_crop_pad_to_shape": [[24, 40], ["img_utils.get_2dshape", "img_utils.pad_image_to_shape"], "function", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.img_utils.get_2dshape", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.img_utils.pad_image_to_shape"], ["", "def", "random_crop_pad_to_shape", "(", "img", ",", "crop_pos", ",", "crop_size", ",", "pad_label_value", ")", ":", "\n", "    ", "h", ",", "w", "=", "img", ".", "shape", "[", ":", "2", "]", "\n", "start_crop_h", ",", "start_crop_w", "=", "crop_pos", "\n", "assert", "(", "(", "start_crop_h", "<", "h", ")", "and", "(", "start_crop_h", ">=", "0", ")", ")", "\n", "assert", "(", "(", "start_crop_w", "<", "w", ")", "and", "(", "start_crop_w", ">=", "0", ")", ")", "\n", "\n", "crop_size", "=", "get_2dshape", "(", "crop_size", ")", "\n", "crop_h", ",", "crop_w", "=", "crop_size", "\n", "\n", "img_crop", "=", "img", "[", "start_crop_h", ":", "start_crop_h", "+", "crop_h", ",", "\n", "start_crop_w", ":", "start_crop_w", "+", "crop_w", ",", "...", "]", "\n", "\n", "img_", ",", "margin", "=", "pad_image_to_shape", "(", "img_crop", ",", "crop_size", ",", "cv2", ".", "BORDER_CONSTANT", ",", "\n", "pad_label_value", ")", "\n", "\n", "return", "img_", ",", "margin", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.img_utils.generate_random_crop_pos": [[42, 58], ["img_utils.get_2dshape", "img_utils.get_2dshape", "random.randint", "random.randint"], "function", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.img_utils.get_2dshape", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.img_utils.get_2dshape"], ["", "def", "generate_random_crop_pos", "(", "ori_size", ",", "crop_size", ")", ":", "\n", "    ", "ori_size", "=", "get_2dshape", "(", "ori_size", ")", "\n", "h", ",", "w", "=", "ori_size", "\n", "\n", "crop_size", "=", "get_2dshape", "(", "crop_size", ")", "\n", "crop_h", ",", "crop_w", "=", "crop_size", "\n", "\n", "pos_h", ",", "pos_w", "=", "0", ",", "0", "\n", "\n", "if", "h", ">", "crop_h", ":", "\n", "        ", "pos_h", "=", "random", ".", "randint", "(", "0", ",", "h", "-", "crop_h", "+", "1", ")", "\n", "\n", "", "if", "w", ">", "crop_w", ":", "\n", "        ", "pos_w", "=", "random", ".", "randint", "(", "0", ",", "w", "-", "crop_w", "+", "1", ")", "\n", "\n", "", "return", "pos_h", ",", "pos_w", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.img_utils.pad_image_to_shape": [[60, 75], ["numpy.zeros", "img_utils.get_2dshape", "cv2.copyMakeBorder", "cv2.BORDER_CONSTANT", "cv2.BORDER_CONSTANT"], "function", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.img_utils.get_2dshape"], ["", "def", "pad_image_to_shape", "(", "img", ",", "shape", ",", "border_mode", ",", "value", ")", ":", "\n", "    ", "margin", "=", "np", ".", "zeros", "(", "4", ",", "np", ".", "uint32", ")", "\n", "shape", "=", "get_2dshape", "(", "shape", ")", "\n", "pad_height", "=", "shape", "[", "0", "]", "-", "img", ".", "shape", "[", "0", "]", "if", "shape", "[", "0", "]", "-", "img", ".", "shape", "[", "0", "]", ">", "0", "else", "0", "\n", "pad_width", "=", "shape", "[", "1", "]", "-", "img", ".", "shape", "[", "1", "]", "if", "shape", "[", "1", "]", "-", "img", ".", "shape", "[", "1", "]", ">", "0", "else", "0", "\n", "\n", "margin", "[", "0", "]", "=", "pad_height", "//", "2", "\n", "margin", "[", "1", "]", "=", "pad_height", "//", "2", "+", "pad_height", "%", "2", "\n", "margin", "[", "2", "]", "=", "pad_width", "//", "2", "\n", "margin", "[", "3", "]", "=", "pad_width", "//", "2", "+", "pad_width", "%", "2", "\n", "\n", "img", "=", "cv2", ".", "copyMakeBorder", "(", "img", ",", "margin", "[", "0", "]", ",", "margin", "[", "1", "]", ",", "margin", "[", "2", "]", ",", "margin", "[", "3", "]", ",", "\n", "border_mode", ",", "value", "=", "value", ")", "\n", "\n", "return", "img", ",", "margin", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.img_utils.pad_image_size_to_multiples_of": [[77, 88], ["map", "img_utils.pad_image_to_shape"], "function", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.img_utils.pad_image_to_shape"], ["", "def", "pad_image_size_to_multiples_of", "(", "img", ",", "multiple", ",", "pad_value", ")", ":", "\n", "    ", "h", ",", "w", "=", "img", ".", "shape", "[", ":", "2", "]", "\n", "d", "=", "multiple", "\n", "\n", "def", "canonicalize", "(", "s", ")", ":", "\n", "        ", "v", "=", "s", "//", "d", "\n", "return", "(", "v", "+", "(", "v", "*", "d", "!=", "s", ")", ")", "*", "d", "\n", "\n", "", "th", ",", "tw", "=", "map", "(", "canonicalize", ",", "(", "h", ",", "w", ")", ")", "\n", "\n", "return", "pad_image_to_shape", "(", "img", ",", "(", "th", ",", "tw", ")", ",", "cv2", ".", "BORDER_CONSTANT", ",", "pad_value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.img_utils.resize_ensure_shortest_edge": [[90, 103], ["cv2.resize", "isinstance", "float", "max", "float", "max", "int", "int"], "function", ["None"], ["", "def", "resize_ensure_shortest_edge", "(", "img", ",", "edge_length", ",", "\n", "interpolation_mode", "=", "cv2", ".", "INTER_LINEAR", ")", ":", "\n", "    ", "assert", "isinstance", "(", "edge_length", ",", "int", ")", "and", "edge_length", ">", "0", ",", "edge_length", "\n", "h", ",", "w", "=", "img", ".", "shape", "[", ":", "2", "]", "\n", "if", "h", "<", "w", ":", "\n", "        ", "ratio", "=", "float", "(", "edge_length", ")", "/", "h", "\n", "th", ",", "tw", "=", "edge_length", ",", "max", "(", "1", ",", "int", "(", "ratio", "*", "w", ")", ")", "\n", "", "else", ":", "\n", "        ", "ratio", "=", "float", "(", "edge_length", ")", "/", "w", "\n", "th", ",", "tw", "=", "max", "(", "1", ",", "int", "(", "ratio", "*", "h", ")", ")", ",", "edge_length", "\n", "", "img", "=", "cv2", ".", "resize", "(", "img", ",", "(", "tw", ",", "th", ")", ",", "interpolation_mode", ")", "\n", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.img_utils.random_scale": [[105, 113], ["random.choice", "int", "int", "cv2.resize", "cv2.resize"], "function", ["None"], ["", "def", "random_scale", "(", "img", ",", "gt", ",", "scales", ")", ":", "\n", "    ", "scale", "=", "random", ".", "choice", "(", "scales", ")", "\n", "sh", "=", "int", "(", "img", ".", "shape", "[", "0", "]", "*", "scale", ")", "\n", "sw", "=", "int", "(", "img", ".", "shape", "[", "1", "]", "*", "scale", ")", "\n", "img", "=", "cv2", ".", "resize", "(", "img", ",", "(", "sw", ",", "sh", ")", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "gt", "=", "cv2", ".", "resize", "(", "gt", ",", "(", "sw", ",", "sh", ")", ",", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "\n", "return", "img", ",", "gt", ",", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.img_utils.random_scale_with_length": [[115, 123], ["random.choice", "cv2.resize", "cv2.resize"], "function", ["None"], ["", "def", "random_scale_with_length", "(", "img", ",", "gt", ",", "length", ")", ":", "\n", "    ", "size", "=", "random", ".", "choice", "(", "length", ")", "\n", "sh", "=", "size", "\n", "sw", "=", "size", "\n", "img", "=", "cv2", ".", "resize", "(", "img", ",", "(", "sw", ",", "sh", ")", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "gt", "=", "cv2", ".", "resize", "(", "gt", ",", "(", "sw", ",", "sh", ")", ",", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "\n", "return", "img", ",", "gt", ",", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.img_utils.random_mirror": [[125, 131], ["random.random", "cv2.flip", "cv2.flip"], "function", ["None"], ["", "def", "random_mirror", "(", "img", ",", "gt", ")", ":", "\n", "    ", "if", "random", ".", "random", "(", ")", ">=", "0.5", ":", "\n", "        ", "img", "=", "cv2", ".", "flip", "(", "img", ",", "1", ")", "\n", "gt", "=", "cv2", ".", "flip", "(", "gt", ",", "1", ")", "\n", "\n", "", "return", "img", ",", "gt", ",", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.img_utils.random_rotation": [[133, 141], ["cv2.getRotationMatrix2D", "cv2.warpAffine", "cv2.warpAffine", "random.random"], "function", ["None"], ["", "def", "random_rotation", "(", "img", ",", "gt", ")", ":", "\n", "    ", "angle", "=", "random", ".", "random", "(", ")", "*", "20", "-", "10", "\n", "h", ",", "w", "=", "img", ".", "shape", "[", ":", "2", "]", "\n", "rotation_matrix", "=", "cv2", ".", "getRotationMatrix2D", "(", "(", "w", "/", "2", ",", "h", "/", "2", ")", ",", "angle", ",", "1", ")", "\n", "img", "=", "cv2", ".", "warpAffine", "(", "img", ",", "rotation_matrix", ",", "(", "w", ",", "h", ")", ",", "flags", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "gt", "=", "cv2", ".", "warpAffine", "(", "gt", ",", "rotation_matrix", ",", "(", "w", ",", "h", ")", ",", "flags", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "\n", "return", "img", ",", "gt", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.img_utils.random_gaussian_blur": [[143, 150], ["random.choice", "cv2.GaussianBlur"], "function", ["None"], ["", "def", "random_gaussian_blur", "(", "img", ")", ":", "\n", "    ", "gauss_size", "=", "random", ".", "choice", "(", "[", "1", ",", "3", ",", "5", ",", "7", "]", ")", "\n", "if", "gauss_size", ">", "1", ":", "\n", "# do the gaussian blur", "\n", "        ", "img", "=", "cv2", ".", "GaussianBlur", "(", "img", ",", "(", "gauss_size", ",", "gauss_size", ")", ",", "0", ")", "\n", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.img_utils.center_crop": [[152, 157], ["None"], "function", ["None"], ["", "def", "center_crop", "(", "img", ",", "shape", ")", ":", "\n", "    ", "h", ",", "w", "=", "shape", "[", "0", "]", ",", "shape", "[", "1", "]", "\n", "y", "=", "(", "img", ".", "shape", "[", "0", "]", "-", "h", ")", "//", "2", "\n", "x", "=", "(", "img", ".", "shape", "[", "1", "]", "-", "w", ")", "//", "2", "\n", "return", "img", "[", "y", ":", "y", "+", "h", ",", "x", ":", "x", "+", "w", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.img_utils.random_crop": [[159, 179], ["isinstance", "random.randint", "random.randint", "int", "int"], "function", ["None"], ["", "def", "random_crop", "(", "img", ",", "gt", ",", "size", ")", ":", "\n", "    ", "if", "isinstance", "(", "size", ",", "numbers", ".", "Number", ")", ":", "\n", "        ", "size", "=", "(", "int", "(", "size", ")", ",", "int", "(", "size", ")", ")", "\n", "", "else", ":", "\n", "        ", "size", "=", "size", "\n", "\n", "", "h", ",", "w", "=", "img", ".", "shape", "[", ":", "2", "]", "\n", "crop_h", ",", "crop_w", "=", "size", "[", "0", "]", ",", "size", "[", "1", "]", "\n", "\n", "if", "h", ">", "crop_h", ":", "\n", "        ", "x", "=", "random", ".", "randint", "(", "0", ",", "h", "-", "crop_h", "+", "1", ")", "\n", "img", "=", "img", "[", "x", ":", "x", "+", "crop_h", ",", ":", ",", ":", "]", "\n", "gt", "=", "gt", "[", "x", ":", "x", "+", "crop_h", ",", ":", "]", "\n", "\n", "", "if", "w", ">", "crop_w", ":", "\n", "        ", "x", "=", "random", ".", "randint", "(", "0", ",", "w", "-", "crop_w", "+", "1", ")", "\n", "img", "=", "img", "[", ":", ",", "x", ":", "x", "+", "crop_w", ",", ":", "]", "\n", "gt", "=", "gt", "[", ":", ",", "x", ":", "x", "+", "crop_w", "]", "\n", "\n", "", "return", "img", ",", "gt", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.img_utils.normalize": [[181, 188], ["img.astype"], "function", ["None"], ["", "def", "normalize", "(", "img", ",", "mean", ",", "std", ")", ":", "\n", "# pytorch pretrained model need the input range: 0-1", "\n", "    ", "img", "=", "img", ".", "astype", "(", "np", ".", "float32", ")", "/", "255.0", "\n", "img", "=", "img", "-", "mean", "\n", "img", "=", "img", "/", "std", "\n", "\n", "return", "img", "\n", "", ""]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.AvgrageMeter.__init__": [[21, 23], ["darts_utils.AvgrageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.AvgrageMeter.reset"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.AvgrageMeter.reset": [[24, 28], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "cnt", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.AvgrageMeter.update": [[29, 33], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "cnt", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "cnt", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.Cutout.__init__": [[36, 38], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "length", ")", ":", "\n", "            ", "self", ".", "length", "=", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.Cutout.__call__": [[39, 55], ["numpy.ones", "numpy.random.randint", "numpy.random.randint", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip", "torch.from_numpy", "mask.expand_as.expand_as.expand_as", "img.size", "img.size"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "h", ",", "w", "=", "img", ".", "size", "(", "1", ")", ",", "img", ".", "size", "(", "2", ")", "\n", "mask", "=", "np", ".", "ones", "(", "(", "h", ",", "w", ")", ",", "np", ".", "float32", ")", "\n", "y", "=", "np", ".", "random", ".", "randint", "(", "h", ")", "\n", "x", "=", "np", ".", "random", ".", "randint", "(", "w", ")", "\n", "\n", "y1", "=", "np", ".", "clip", "(", "y", "-", "self", ".", "length", "//", "2", ",", "0", ",", "h", ")", "\n", "y2", "=", "np", ".", "clip", "(", "y", "+", "self", ".", "length", "//", "2", ",", "0", ",", "h", ")", "\n", "x1", "=", "np", ".", "clip", "(", "x", "-", "self", ".", "length", "//", "2", ",", "0", ",", "w", ")", "\n", "x2", "=", "np", ".", "clip", "(", "x", "+", "self", ".", "length", "//", "2", ",", "0", ",", "w", ")", "\n", "\n", "mask", "[", "y1", ":", "y2", ",", "x1", ":", "x2", "]", "=", "0.", "\n", "mask", "=", "torch", ".", "from_numpy", "(", "mask", ")", "\n", "mask", "=", "mask", ".", "expand_as", "(", "img", ")", "\n", "img", "*=", "mask", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.count_parameters_in_MB": [[57, 59], ["numpy.sum", "numpy.prod", "v.size", "model.named_parameters"], "function", ["None"], ["", "", "def", "count_parameters_in_MB", "(", "model", ")", ":", "\n", "    ", "return", "np", ".", "sum", "(", "np", ".", "prod", "(", "v", ".", "size", "(", ")", ")", "for", "name", ",", "v", "in", "model", ".", "named_parameters", "(", ")", "if", "\"auxiliary\"", "not", "in", "name", ")", "/", "1e6", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.save_checkpoint": [[61, 67], ["os.path.join", "torch.save", "os.path.join", "shutil.copyfile"], "function", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.save"], ["", "def", "save_checkpoint", "(", "state", ",", "is_best", ",", "save", ")", ":", "\n", "    ", "filename", "=", "os", ".", "path", ".", "join", "(", "save", ",", "'checkpoint.pth.tar'", ")", "\n", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "if", "is_best", ":", "\n", "        ", "best_filename", "=", "os", ".", "path", ".", "join", "(", "save", ",", "'model_best.pth.tar'", ")", "\n", "shutil", ".", "copyfile", "(", "filename", ",", "best_filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.save": [[69, 71], ["torch.save", "model.state_dict"], "function", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.save"], ["", "", "def", "save", "(", "model", ",", "model_path", ")", ":", "\n", "    ", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "model_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.load": [[73, 75], ["model.load_state_dict", "torch.load"], "function", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.load"], ["", "def", "load", "(", "model", ",", "model_path", ")", ":", "\n", "    ", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "model_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.drop_path": [[77, 84], ["torch.autograd.Variable", "x.div_", "x.mul_", "torch.cuda.FloatTensor().bernoulli_", "torch.cuda.FloatTensor", "x.size"], "function", ["None"], ["", "def", "drop_path", "(", "x", ",", "drop_prob", ")", ":", "\n", "    ", "if", "drop_prob", ">", "0.", ":", "\n", "        ", "keep_prob", "=", "1.", "-", "drop_prob", "\n", "mask", "=", "Variable", "(", "torch", ".", "cuda", ".", "FloatTensor", "(", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", ",", "1", ")", ".", "bernoulli_", "(", "keep_prob", ")", ")", "\n", "x", ".", "div_", "(", "keep_prob", ")", "\n", "x", ".", "mul_", "(", "mask", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.create_exp_dir": [[86, 96], ["print", "os.path.exists", "os.mkdir", "os.mkdir", "os.path.join", "os.path.join", "shutil.copyfile", "os.path.basename"], "function", ["None"], ["", "def", "create_exp_dir", "(", "path", ",", "scripts_to_save", "=", "None", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "path", ")", "\n", "", "print", "(", "'Experiment dir : {}'", ".", "format", "(", "path", ")", ")", "\n", "\n", "if", "scripts_to_save", "is", "not", "None", ":", "\n", "        ", "os", ".", "mkdir", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'scripts'", ")", ")", "\n", "for", "script", "in", "scripts_to_save", ":", "\n", "            ", "dst_file", "=", "os", ".", "path", ".", "join", "(", "path", ",", "'scripts'", ",", "os", ".", "path", ".", "basename", "(", "script", ")", ")", "\n", "shutil", ".", "copyfile", "(", "script", ",", "dst_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.compute_latency_ms_pytorch": [[184, 226], ["model.cuda.eval", "model.cuda.cuda", "torch.randn().cuda", "torch.cuda.empty_cache", "torch.no_grad", "range", "print", "torch.cuda.synchronize", "torch.cuda.synchronize", "time.time", "tqdm.tqdm", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.randn", "model.cuda.", "int", "range", "model.cuda.", "time.time", "torch.cuda.synchronize", "torch.cuda.synchronize", "time.time", "range", "torch.cuda.synchronize", "torch.cuda.synchronize", "model.cuda.", "time.time"], "function", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.search.eval_teacher.eval"], ["", "def", "compute_latency_ms_pytorch", "(", "model", ",", "input_size", ",", "iterations", "=", "None", ",", "device", "=", "None", ")", ":", "\n", "    ", "torch", ".", "backends", ".", "cudnn", ".", "enabled", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "model", "=", "model", ".", "cuda", "(", ")", "\n", "\n", "input", "=", "torch", ".", "randn", "(", "*", "input_size", ")", ".", "cuda", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "_", "in", "range", "(", "10", ")", ":", "\n", "            ", "model", "(", "input", ")", "\n", "\n", "", "if", "iterations", "is", "None", ":", "\n", "            ", "elapsed_time", "=", "0", "\n", "iterations", "=", "100", "\n", "while", "elapsed_time", "<", "1", ":", "\n", "                ", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "t_start", "=", "time", ".", "time", "(", ")", "\n", "for", "_", "in", "range", "(", "iterations", ")", ":", "\n", "                    ", "model", "(", "input", ")", "\n", "", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "elapsed_time", "=", "time", ".", "time", "(", ")", "-", "t_start", "\n", "iterations", "*=", "2", "\n", "", "FPS", "=", "iterations", "/", "elapsed_time", "\n", "iterations", "=", "int", "(", "FPS", "*", "6", ")", "\n", "\n", "", "print", "(", "'=========Speed Testing========='", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "t_start", "=", "time", ".", "time", "(", ")", "\n", "for", "_", "in", "tqdm", "(", "range", "(", "iterations", ")", ")", ":", "\n", "            ", "model", "(", "input", ")", "\n", "", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "elapsed_time", "=", "time", ".", "time", "(", ")", "-", "t_start", "\n", "latency", "=", "elapsed_time", "/", "iterations", "*", "1000", "\n", "", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "# FPS = 1000 / latency (in ms)", "\n", "return", "latency", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.plot_path": [[228, 256], ["max", "matplotlib.pyplot.subplots", "ax.plot", "ax.plot", "ax.plot", "matplotlib.pyplot.xticks", "matplotlib.pyplot.yticks", "matplotlib.pyplot.ylabel", "matplotlib.pyplot.xlabel", "ax.xaxis.get_major_ticks", "ax.yaxis.get_major_ticks", "f.tight_layout", "matplotlib.pyplot.legend", "len", "path0.append", "path1.append", "path2.append", "len", "len", "len", "numpy.arange", "numpy.arange", "numpy.arange", "numpy.arange", "list", "numpy.array", "tick.label.set_fontsize", "tick.label.set_fontsize", "len", "len", "len", "len", "len", "numpy.array", "len", "len", "range", "numpy.array", "numpy.array"], "function", ["None"], ["", "def", "plot_path", "(", "lasts", ",", "paths", "=", "[", "]", ")", ":", "\n", "    ", "'''\n    paths: list of path0~path2\n    '''", "\n", "assert", "len", "(", "paths", ")", ">", "0", "\n", "path0", "=", "paths", "[", "0", "]", "\n", "path1", "=", "paths", "[", "1", "]", "if", "len", "(", "paths", ")", ">", "1", "else", "[", "]", "\n", "path2", "=", "paths", "[", "2", "]", "if", "len", "(", "paths", ")", ">", "2", "else", "[", "]", "\n", "\n", "if", "path0", "[", "-", "1", "]", "!=", "lasts", "[", "0", "]", ":", "path0", ".", "append", "(", "lasts", "[", "0", "]", ")", "\n", "if", "len", "(", "path1", ")", "!=", "0", "and", "path1", "[", "-", "1", "]", "!=", "lasts", "[", "1", "]", ":", "path1", ".", "append", "(", "lasts", "[", "1", "]", ")", "\n", "if", "len", "(", "path2", ")", "!=", "0", "and", "path2", "[", "-", "1", "]", "!=", "lasts", "[", "2", "]", ":", "path2", ".", "append", "(", "lasts", "[", "2", "]", ")", "\n", "x_len", "=", "max", "(", "len", "(", "path0", ")", ",", "len", "(", "path1", ")", ",", "len", "(", "path2", ")", ")", "\n", "f", ",", "ax", "=", "plt", ".", "subplots", "(", "figsize", "=", "(", "x_len", ",", "3", ")", ")", "\n", "ax", ".", "plot", "(", "np", ".", "arange", "(", "len", "(", "path0", ")", ")", ",", "2", "-", "np", ".", "array", "(", "path0", ")", ",", "label", "=", "'1/32'", ",", "lw", "=", "2.5", ",", "color", "=", "'#000000'", ",", "linestyle", "=", "'-'", ")", "#, marker='o', markeredgecolor='r', markerfacecolor='r')", "\n", "ax", ".", "plot", "(", "np", ".", "arange", "(", "len", "(", "path1", ")", ")", ",", "2", "-", "np", ".", "array", "(", "path1", ")", "-", "0.08", ",", "lw", "=", "1.8", ",", "label", "=", "'1/16'", ",", "color", "=", "'#313131'", ",", "linestyle", "=", "'--'", ")", "#, marker='^', markeredgecolor='b', markerfacecolor='b')", "\n", "ax", ".", "plot", "(", "np", ".", "arange", "(", "len", "(", "path2", ")", ")", ",", "2", "-", "np", ".", "array", "(", "path2", ")", "-", "0.16", ",", "lw", "=", "1.2", ",", "label", "=", "'1/8'", ",", "color", "=", "'#5a5858'", ",", "linestyle", "=", "'-.'", ")", "#, marker='s', markeredgecolor='m', markerfacecolor='m')", "\n", "plt", ".", "xticks", "(", "np", ".", "arange", "(", "x_len", ")", ",", "list", "(", "range", "(", "1", ",", "x_len", "+", "1", ")", ")", ")", "\n", "plt", ".", "yticks", "(", "np", ".", "array", "(", "[", "0", ",", "1", ",", "2", "]", ")", ",", "[", "\"1/32\"", ",", "\"1/16\"", ",", "\"1/8\"", "]", ")", "\n", "plt", ".", "ylabel", "(", "\"Scale\"", ",", "fontsize", "=", "17", ")", "\n", "plt", ".", "xlabel", "(", "\"Layer\"", ",", "fontsize", "=", "17", ")", "\n", "for", "tick", "in", "ax", ".", "xaxis", ".", "get_major_ticks", "(", ")", ":", "\n", "        ", "tick", ".", "label", ".", "set_fontsize", "(", "14", ")", "\n", "", "for", "tick", "in", "ax", ".", "yaxis", ".", "get_major_ticks", "(", ")", ":", "\n", "        ", "tick", ".", "label", ".", "set_fontsize", "(", "14", ")", "\n", "", "f", ".", "tight_layout", "(", ")", "\n", "plt", ".", "legend", "(", "prop", "=", "{", "'size'", ":", "14", "}", ",", "loc", "=", "3", ")", "\n", "return", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.plot_path_width": [[259, 310], ["max", "matplotlib.pyplot.subplots", "ax.plot", "ax.plot", "ax.plot", "enumerate", "enumerate", "enumerate", "annotations.items", "matplotlib.pyplot.xticks", "matplotlib.pyplot.yticks", "matplotlib.pyplot.ylim", "matplotlib.pyplot.ylabel", "matplotlib.pyplot.xlabel", "ax.xaxis.get_major_ticks", "ax.yaxis.get_major_ticks", "f.tight_layout", "matplotlib.pyplot.legend", "path0.append", "path1.append", "path2.append", "len", "len", "len", "numpy.arange", "numpy.arange", "numpy.arange", "matplotlib.pyplot.annotate", "numpy.arange", "list", "numpy.array", "tick.label.set_fontsize", "tick.label.set_fontsize", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "numpy.array", "len", "len", "range", "len", "len", "len", "len", "len", "len", "len", "len", "len", "numpy.array", "numpy.array"], "function", ["None"], ["def", "plot_path_width", "(", "lasts", ",", "paths", "=", "[", "]", ",", "widths", "=", "[", "]", ")", ":", "\n", "    ", "'''\n    paths: list of path0~path2\n    '''", "\n", "assert", "len", "(", "paths", ")", ">", "0", "and", "len", "(", "widths", ")", ">", "0", "\n", "path0", "=", "paths", "[", "0", "]", "\n", "path1", "=", "paths", "[", "1", "]", "if", "len", "(", "paths", ")", ">", "1", "else", "[", "]", "\n", "path2", "=", "paths", "[", "2", "]", "if", "len", "(", "paths", ")", ">", "2", "else", "[", "]", "\n", "width0", "=", "widths", "[", "0", "]", "\n", "width1", "=", "widths", "[", "1", "]", "if", "len", "(", "widths", ")", ">", "1", "else", "[", "]", "\n", "width2", "=", "widths", "[", "2", "]", "if", "len", "(", "widths", ")", ">", "2", "else", "[", "]", "\n", "\n", "# just for visualization purpose", "\n", "if", "path0", "[", "-", "1", "]", "!=", "lasts", "[", "0", "]", ":", "path0", ".", "append", "(", "lasts", "[", "0", "]", ")", "\n", "if", "len", "(", "path1", ")", "!=", "0", "and", "path1", "[", "-", "1", "]", "!=", "lasts", "[", "1", "]", ":", "path1", ".", "append", "(", "lasts", "[", "1", "]", ")", "\n", "if", "len", "(", "path2", ")", "!=", "0", "and", "path2", "[", "-", "1", "]", "!=", "lasts", "[", "2", "]", ":", "path2", ".", "append", "(", "lasts", "[", "2", "]", ")", "\n", "line_updown", "=", "-", "0.07", "\n", "annotation_updown", "=", "0.05", ";", "annotation_down_scale", "=", "1.7", "\n", "x_len", "=", "max", "(", "len", "(", "path0", ")", ",", "len", "(", "path1", ")", ",", "len", "(", "path2", ")", ")", "\n", "f", ",", "ax", "=", "plt", ".", "subplots", "(", "figsize", "=", "(", "x_len", ",", "3", ")", ")", "\n", "\n", "assert", "len", "(", "path0", ")", "==", "len", "(", "width0", ")", "+", "1", "or", "len", "(", "path0", ")", "+", "len", "(", "width0", ")", "==", "0", ",", "\"path0 %d, width0 %d\"", "%", "(", "len", "(", "path0", ")", ",", "len", "(", "width0", ")", ")", "\n", "assert", "len", "(", "path1", ")", "==", "len", "(", "width1", ")", "+", "1", "or", "len", "(", "path1", ")", "+", "len", "(", "width1", ")", "==", "0", ",", "\"path1 %d, width1 %d\"", "%", "(", "len", "(", "path1", ")", ",", "len", "(", "width1", ")", ")", "\n", "assert", "len", "(", "path2", ")", "==", "len", "(", "width2", ")", "+", "1", "or", "len", "(", "path2", ")", "+", "len", "(", "width2", ")", "==", "0", ",", "\"path2 %d, width2 %d\"", "%", "(", "len", "(", "path2", ")", ",", "len", "(", "width2", ")", ")", "\n", "\n", "ax", ".", "plot", "(", "np", ".", "arange", "(", "len", "(", "path0", ")", ")", ",", "2", "-", "np", ".", "array", "(", "path0", ")", ",", "label", "=", "'1/32'", ",", "lw", "=", "2.5", ",", "color", "=", "'#000000'", ",", "linestyle", "=", "'-'", ")", "\n", "ax", ".", "plot", "(", "np", ".", "arange", "(", "len", "(", "path1", ")", ")", ",", "2", "-", "np", ".", "array", "(", "path1", ")", "+", "line_updown", ",", "lw", "=", "1.8", ",", "label", "=", "'1/16'", ",", "color", "=", "'#313131'", ",", "linestyle", "=", "'--'", ")", "\n", "ax", ".", "plot", "(", "np", ".", "arange", "(", "len", "(", "path2", ")", ")", ",", "2", "-", "np", ".", "array", "(", "path2", ")", "+", "line_updown", "*", "2", ",", "lw", "=", "1.2", ",", "label", "=", "'1/8'", ",", "color", "=", "'#5a5858'", ",", "linestyle", "=", "'-.'", ")", "\n", "\n", "annotations", "=", "{", "}", "# (idx, scale, width, down): ((x, y), width)", "\n", "for", "idx", ",", "width", "in", "enumerate", "(", "width2", ")", ":", "\n", "        ", "annotations", "[", "(", "idx", ",", "path2", "[", "idx", "]", ",", "width", ",", "path2", "[", "idx", "+", "1", "]", "-", "path2", "[", "idx", "]", ")", "]", "=", "(", "(", "0.35", "+", "idx", ",", "2", "-", "path2", "[", "idx", "]", "+", "line_updown", "*", "2", "+", "annotation_updown", "-", "(", "path2", "[", "idx", "+", "1", "]", "-", "path2", "[", "idx", "]", ")", "/", "annotation_down_scale", ")", ",", "width", ")", "\n", "", "for", "idx", ",", "width", "in", "enumerate", "(", "width1", ")", ":", "\n", "        ", "annotations", "[", "(", "idx", ",", "path1", "[", "idx", "]", ",", "width", ",", "path1", "[", "idx", "+", "1", "]", "-", "path1", "[", "idx", "]", ")", "]", "=", "(", "(", "0.35", "+", "idx", ",", "2", "-", "path1", "[", "idx", "]", "+", "line_updown", "+", "annotation_updown", "-", "(", "path1", "[", "idx", "+", "1", "]", "-", "path1", "[", "idx", "]", ")", "/", "annotation_down_scale", ")", ",", "width", ")", "\n", "", "for", "idx", ",", "width", "in", "enumerate", "(", "width0", ")", ":", "\n", "        ", "annotations", "[", "(", "idx", ",", "path0", "[", "idx", "]", ",", "width", ",", "path0", "[", "idx", "+", "1", "]", "-", "path0", "[", "idx", "]", ")", "]", "=", "(", "(", "0.35", "+", "idx", ",", "2", "-", "path0", "[", "idx", "]", "+", "annotation_updown", "-", "(", "path0", "[", "idx", "+", "1", "]", "-", "path0", "[", "idx", "]", ")", "/", "annotation_down_scale", ")", ",", "width", ")", "\n", "", "for", "k", ",", "v", "in", "annotations", ".", "items", "(", ")", ":", "\n", "        ", "plt", ".", "annotate", "(", "\"%.2f\"", "%", "v", "[", "1", "]", ",", "v", "[", "0", "]", ",", "fontsize", "=", "12", ",", "color", "=", "'red'", ")", "\n", "\n", "", "plt", ".", "xticks", "(", "np", ".", "arange", "(", "x_len", ")", ",", "list", "(", "range", "(", "1", ",", "x_len", "+", "1", ")", ")", ")", "\n", "plt", ".", "yticks", "(", "np", ".", "array", "(", "[", "0", ",", "1", ",", "2", "]", ")", ",", "[", "\"1/32\"", ",", "\"1/16\"", ",", "\"1/8\"", "]", ")", "\n", "plt", ".", "ylim", "(", "[", "-", "0.4", ",", "2.5", "]", ")", "\n", "plt", ".", "ylabel", "(", "\"Scale\"", ",", "fontsize", "=", "17", ")", "\n", "plt", ".", "xlabel", "(", "\"Layer\"", ",", "fontsize", "=", "17", ")", "\n", "for", "tick", "in", "ax", ".", "xaxis", ".", "get_major_ticks", "(", ")", ":", "\n", "        ", "tick", ".", "label", ".", "set_fontsize", "(", "14", ")", "\n", "", "for", "tick", "in", "ax", ".", "yaxis", ".", "get_major_ticks", "(", ")", ":", "\n", "        ", "tick", ".", "label", ".", "set_fontsize", "(", "14", ")", "\n", "", "f", ".", "tight_layout", "(", ")", "\n", "plt", ".", "legend", "(", "prop", "=", "{", "'size'", ":", "14", "}", ",", "loc", "=", "3", ")", "\n", "return", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.plot_op": [[311, 345], ["enumerate", "matplotlib.pyplot.tight_layout", "matplotlib.pyplot.figure", "plt.figure.add_subplot", "fig.add_subplot.xaxis.set_visible", "fig.add_subplot.yaxis.set_visible", "matplotlib.pyplot.table", "plt.table.auto_set_font_size", "plt.table.set_fontsize", "plt.table.scale", "table_vals.append", "len", "len", "len", "len", "len", "int", "int"], "function", ["None"], ["", "def", "plot_op", "(", "ops", ",", "path", ",", "width", "=", "[", "]", ",", "head_width", "=", "None", ",", "F_base", "=", "16", ")", ":", "\n", "    ", "assert", "len", "(", "width", ")", "==", "0", "or", "len", "(", "width", ")", "==", "len", "(", "ops", ")", "-", "1", "\n", "table_vals", "=", "[", "]", "\n", "scales", "=", "{", "0", ":", "\"1/8\"", ",", "1", ":", "\"1/16\"", ",", "2", ":", "\"1/32\"", "}", ";", "base_scale", "=", "3", "\n", "for", "idx", ",", "op", "in", "enumerate", "(", "ops", ")", ":", "\n", "        ", "scale", "=", "path", "[", "idx", "]", "\n", "if", "len", "(", "width", ")", ">", "0", ":", "\n", "            ", "if", "idx", "<", "len", "(", "width", ")", ":", "\n", "                ", "ch", "=", "int", "(", "F_base", "*", "2", "**", "(", "scale", "+", "base_scale", ")", "*", "width", "[", "idx", "]", ")", "\n", "", "else", ":", "\n", "                ", "ch", "=", "int", "(", "F_base", "*", "2", "**", "(", "scale", "+", "base_scale", ")", "*", "head_width", ")", "\n", "", "", "else", ":", "\n", "            ", "ch", "=", "F_base", "*", "2", "**", "(", "scale", "+", "base_scale", ")", "\n", "", "row", "=", "[", "idx", "+", "1", ",", "PRIMITIVES", "[", "op", "]", ",", "scales", "[", "scale", "]", ",", "ch", "]", "\n", "table_vals", ".", "append", "(", "row", ")", "\n", "\n", "# Based on http://stackoverflow.com/a/8531491/190597 (Andrey Sobolev)", "\n", "", "col_labels", "=", "[", "'Stage'", ",", "'Operator'", ",", "'Scale'", ",", "'#Channel_out'", "]", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "3", ",", "3", ")", ")", "\n", "ax", "=", "fig", ".", "add_subplot", "(", "111", ",", "frame_on", "=", "False", ")", "\n", "ax", ".", "xaxis", ".", "set_visible", "(", "False", ")", "# hide the x axis", "\n", "ax", ".", "yaxis", ".", "set_visible", "(", "False", ")", "# hide the y axis", "\n", "\n", "table", "=", "plt", ".", "table", "(", "cellText", "=", "table_vals", ",", "\n", "colWidths", "=", "[", "0.22", ",", "0.6", ",", "0.25", ",", "0.5", "]", ",", "\n", "colLabels", "=", "col_labels", ",", "\n", "cellLoc", "=", "'center'", ",", "\n", "loc", "=", "'center'", ")", "\n", "table", ".", "auto_set_font_size", "(", "False", ")", "\n", "table", ".", "set_fontsize", "(", "20", ")", "\n", "table", ".", "scale", "(", "2", ",", "2", ")", "\n", "\n", "return", "fig", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.objective_acc_lat": [[346, 352], ["math.pow"], "function", ["None"], ["", "def", "objective_acc_lat", "(", "acc", ",", "lat", ",", "lat_target", "=", "8.3", ",", "alpha", "=", "-", "0.07", ",", "beta", "=", "-", "0.07", ")", ":", "\n", "    ", "if", "lat", "<=", "lat_target", ":", "\n", "        ", "w", "=", "alpha", "\n", "", "else", ":", "\n", "        ", "w", "=", "beta", "\n", "", "return", "acc", "*", "math", ".", "pow", "(", "lat", "/", "lat_target", ",", "w", ")", "", "", ""]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.init_func.__init_weight": [[11, 16], ["feature.named_modules", "isinstance", "conv_init"], "function", ["None"], ["def", "__init_weight", "(", "feature", ",", "conv_init", ",", "norm_layer", ",", "bn_eps", ",", "bn_momentum", ",", "\n", "**", "kwargs", ")", ":", "\n", "    ", "for", "name", ",", "m", "in", "feature", ".", "named_modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "(", "nn", ".", "Conv2d", ",", "nn", ".", "Conv3d", ")", ")", ":", "\n", "            ", "conv_init", "(", "m", ".", "weight", ",", "**", "kwargs", ")", "\n", "# elif isinstance(m, norm_layer):", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.init_func.init_weights": [[22, 26], ["type", "torch.nn.init.xavier_uniform", "torch.nn.init.xavier_uniform", "m.bias.data.fill_"], "function", ["None"], ["", "", "", "def", "init_weights", "(", "m", ")", ":", "\n", "    ", "if", "type", "(", "m", ")", "==", "nn", ".", "Linear", ":", "\n", "        ", "torch", ".", "nn", ".", "init", ".", "xavier_uniform", "(", "m", ".", "weight", ")", "\n", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0.01", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.init_func.init_weight": [[27, 36], ["isinstance", "init_func.__init_weight", "init_func.__init_weight"], "function", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.init_func.__init_weight", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.init_func.__init_weight"], ["", "", "def", "init_weight", "(", "module_list", ",", "conv_init", ",", "norm_layer", ",", "bn_eps", ",", "bn_momentum", ",", "\n", "**", "kwargs", ")", ":", "\n", "    ", "if", "isinstance", "(", "module_list", ",", "list", ")", ":", "\n", "        ", "for", "feature", "in", "module_list", ":", "\n", "            ", "__init_weight", "(", "feature", ",", "conv_init", ",", "norm_layer", ",", "bn_eps", ",", "bn_momentum", ",", "\n", "**", "kwargs", ")", "\n", "", "", "else", ":", "\n", "        ", "__init_weight", "(", "module_list", ",", "conv_init", ",", "norm_layer", ",", "bn_eps", ",", "bn_momentum", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.init_func.group_weight": [[38, 61], ["module.modules", "weight_group.append", "weight_group.append", "isinstance", "len", "dict", "dict", "group_decay.append", "isinstance", "list", "len", "len", "group_no_decay.append", "group_decay.append", "module.parameters", "group_no_decay.append", "isinstance", "isinstance", "group_no_decay.append", "group_no_decay.append"], "function", ["None"], ["", "", "def", "group_weight", "(", "weight_group", ",", "module", ",", "norm_layer", ",", "lr", ")", ":", "\n", "    ", "group_decay", "=", "[", "]", "\n", "group_no_decay", "=", "[", "]", "\n", "for", "m", "in", "module", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "group_decay", ".", "append", "(", "m", ".", "weight", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "group_no_decay", ".", "append", "(", "m", ".", "bias", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "Conv2d", ",", "nn", ".", "Conv3d", ")", ")", ":", "\n", "            ", "group_decay", ".", "append", "(", "m", ".", "weight", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "group_no_decay", ".", "append", "(", "m", ".", "bias", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "norm_layer", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "GroupNorm", ")", ":", "\n", "            ", "if", "m", ".", "weight", "is", "not", "None", ":", "\n", "                ", "group_no_decay", ".", "append", "(", "m", ".", "weight", ")", "\n", "", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "group_no_decay", ".", "append", "(", "m", ".", "bias", ")", "\n", "\n", "", "", "", "assert", "len", "(", "list", "(", "module", ".", "parameters", "(", ")", ")", ")", "==", "len", "(", "group_decay", ")", "+", "len", "(", "\n", "group_no_decay", ")", "\n", "weight_group", ".", "append", "(", "dict", "(", "params", "=", "group_decay", ",", "lr", "=", "lr", ")", ")", "\n", "weight_group", ".", "append", "(", "dict", "(", "params", "=", "group_no_decay", ",", "weight_decay", "=", ".0", ",", "lr", "=", "lr", ")", ")", "\n", "return", "weight_group", "\n", "", ""]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.visualize.set_img_color": [[6, 15], ["numpy.array", "range", "cv2.addWeighted", "len", "numpy.where", "numpy.where"], "function", ["None"], ["def", "set_img_color", "(", "colors", ",", "background", ",", "img", ",", "gt", ",", "show255", "=", "False", ")", ":", "\n", "    ", "origin", "=", "np", ".", "array", "(", "img", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "colors", ")", ")", ":", "\n", "        ", "if", "i", "!=", "background", ":", "\n", "            ", "img", "[", "np", ".", "where", "(", "gt", "==", "i", ")", "]", "=", "colors", "[", "i", "]", "\n", "", "", "if", "show255", ":", "\n", "        ", "img", "[", "np", ".", "where", "(", "gt", "==", "255", ")", "]", "=", "0", "\n", "", "cv2", ".", "addWeighted", "(", "img", ",", "0.55", ",", "origin", ",", "0.45", ",", "0", ",", "img", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.visualize.show_prediction": [[17, 22], ["numpy.array", "visualize.set_img_color", "numpy.array"], "function", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.visualize.set_img_color"], ["", "def", "show_prediction", "(", "colors", ",", "background", ",", "img", ",", "pred", ")", ":", "\n", "    ", "im", "=", "np", ".", "array", "(", "img", ",", "np", ".", "uint8", ")", "\n", "set_img_color", "(", "colors", ",", "background", ",", "im", ",", "pred", ")", "\n", "final", "=", "np", ".", "array", "(", "im", ")", "\n", "return", "final", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.visualize.show_img": [[24, 42], ["numpy.array", "numpy.array", "numpy.zeros", "numpy.array", "visualize.set_img_color", "numpy.column_stack", "numpy.column_stack", "numpy.array", "visualize.set_img_color", "numpy.column_stack", "numpy.column_stack"], "function", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.visualize.set_img_color", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.visualize.set_img_color"], ["", "def", "show_img", "(", "colors", ",", "background", ",", "img", ",", "clean", ",", "gt", ",", "*", "pds", ")", ":", "\n", "    ", "im1", "=", "np", ".", "array", "(", "img", ",", "np", ".", "uint8", ")", "\n", "# set_img_color(colors, background, im1, clean)", "\n", "final", "=", "np", ".", "array", "(", "im1", ")", "\n", "# the pivot black bar", "\n", "pivot", "=", "np", ".", "zeros", "(", "(", "im1", ".", "shape", "[", "0", "]", ",", "15", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "for", "pd", "in", "pds", ":", "\n", "        ", "im", "=", "np", ".", "array", "(", "img", ",", "np", ".", "uint8", ")", "\n", "# pd[np.where(gt == 255)] = 255", "\n", "set_img_color", "(", "colors", ",", "background", ",", "im", ",", "pd", ")", "\n", "final", "=", "np", ".", "column_stack", "(", "(", "final", ",", "pivot", ")", ")", "\n", "final", "=", "np", ".", "column_stack", "(", "(", "final", ",", "im", ")", ")", "\n", "\n", "", "im", "=", "np", ".", "array", "(", "img", ",", "np", ".", "uint8", ")", "\n", "set_img_color", "(", "colors", ",", "background", ",", "im", ",", "gt", ",", "True", ")", "\n", "final", "=", "np", ".", "column_stack", "(", "(", "final", ",", "pivot", ")", ")", "\n", "final", "=", "np", ".", "column_stack", "(", "(", "final", ",", "im", ")", ")", "\n", "return", "final", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.visualize.get_colors": [[44, 50], ["range", "colors.append", "numpy.random.random"], "function", ["None"], ["", "def", "get_colors", "(", "class_num", ")", ":", "\n", "    ", "colors", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "class_num", ")", ":", "\n", "        ", "colors", ".", "append", "(", "(", "np", ".", "random", ".", "random", "(", "(", "1", ",", "3", ")", ")", "*", "255", ")", ".", "tolist", "(", ")", "[", "0", "]", ")", "\n", "\n", "", "return", "colors", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.visualize.get_ade_colors": [[52, 59], ["numpy.array().astype().tolist", "np.array().astype().tolist.insert", "scipy.loadmat", "numpy.array().astype", "numpy.array"], "function", ["None"], ["", "def", "get_ade_colors", "(", ")", ":", "\n", "    ", "colors", "=", "sio", ".", "loadmat", "(", "'./color150.mat'", ")", "[", "'colors'", "]", "\n", "colors", "=", "colors", "[", ":", ",", ":", ":", "-", "1", ",", "]", "\n", "colors", "=", "np", ".", "array", "(", "colors", ")", ".", "astype", "(", "int", ")", ".", "tolist", "(", ")", "\n", "colors", ".", "insert", "(", "0", ",", "[", "0", ",", "0", ",", "0", "]", ")", "\n", "\n", "return", "colors", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.visualize.print_iou": [[61, 90], ["range", "numpy.nanmean", "numpy.nanmean", "lines.append", "lines.append", "print", "lines.append", "print"], "function", ["None"], ["", "def", "print_iou", "(", "iu", ",", "mean_pixel_acc", ",", "class_names", "=", "None", ",", "show_no_back", "=", "False", ",", "\n", "no_print", "=", "False", ")", ":", "\n", "    ", "n", "=", "iu", ".", "size", "\n", "lines", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "        ", "if", "class_names", "is", "None", ":", "\n", "            ", "cls", "=", "'Class %d:'", "%", "(", "i", "+", "1", ")", "\n", "", "else", ":", "\n", "            ", "cls", "=", "'%d %s'", "%", "(", "i", "+", "1", ",", "class_names", "[", "i", "]", ")", "\n", "", "lines", ".", "append", "(", "'%-8s\\t%.3f%%'", "%", "(", "cls", ",", "iu", "[", "i", "]", "*", "100", ")", ")", "\n", "", "mean_IU", "=", "np", ".", "nanmean", "(", "iu", ")", "\n", "# mean_IU_no_back = np.nanmean(iu[1:])", "\n", "mean_IU_no_back", "=", "np", ".", "nanmean", "(", "iu", "[", ":", "-", "1", "]", ")", "\n", "if", "show_no_back", ":", "\n", "        ", "lines", ".", "append", "(", "\n", "'----------------------------     %-8s\\t%.3f%%\\t%-8s\\t%.3f%%\\t%-8s\\t%.3f%%'", "%", "(", "\n", "'mean_IU'", ",", "mean_IU", "*", "100", ",", "'mean_IU_no_back'", ",", "\n", "mean_IU_no_back", "*", "100", ",", "\n", "'mean_pixel_ACC'", ",", "mean_pixel_acc", "*", "100", ")", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "mean_pixel_acc", ")", "\n", "lines", ".", "append", "(", "\n", "'----------------------------     %-8s\\t%.3f%%\\t%-8s\\t%.3f%%'", "%", "(", "\n", "'mean_IU'", ",", "mean_IU", "*", "100", ",", "'mean_pixel_ACC'", ",", "\n", "mean_pixel_acc", "*", "100", ")", ")", "\n", "", "line", "=", "\"\\n\"", ".", "join", "(", "lines", ")", "\n", "if", "not", "no_print", ":", "\n", "        ", "print", "(", "line", ")", "\n", "", "return", "line", "\n", "", ""]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.pyt_utils.reduce_tensor": [[25, 32], ["tensor.clone.clone", "torch.reduce", "torch.get_rank", "tensor.clone.div_"], "function", ["None"], ["def", "reduce_tensor", "(", "tensor", ",", "dst", "=", "0", ",", "op", "=", "dist", ".", "ReduceOp", ".", "SUM", ",", "world_size", "=", "1", ")", ":", "\n", "    ", "tensor", "=", "tensor", ".", "clone", "(", ")", "\n", "dist", ".", "reduce", "(", "tensor", ",", "dst", ",", "op", ")", "\n", "if", "dist", ".", "get_rank", "(", ")", "==", "dst", ":", "\n", "        ", "tensor", ".", "div_", "(", "world_size", ")", "\n", "\n", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.pyt_utils.all_reduce_tensor": [[34, 40], ["tensor.clone.clone", "torch.all_reduce", "tensor.clone.div_"], "function", ["None"], ["", "def", "all_reduce_tensor", "(", "tensor", ",", "op", "=", "dist", ".", "ReduceOp", ".", "SUM", ",", "world_size", "=", "1", ")", ":", "\n", "    ", "tensor", "=", "tensor", ".", "clone", "(", ")", "\n", "dist", ".", "all_reduce", "(", "tensor", ",", "op", ")", "\n", "tensor", ".", "div_", "(", "world_size", ")", "\n", "\n", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.pyt_utils.load_model": [[42, 80], ["time.time", "isinstance", "time.time", "model.load_state_dict", "set", "set", "time.time", "logger.info", "torch.load", "torch.load", "torch.load", "collections.OrderedDict", "torch.load.items", "torch.load.keys", "model.state_dict().keys", "len", "logger.warning", "len", "logger.warning", "torch.load.keys", "model.state_dict"], "function", ["home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.load", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.load", "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.darts_utils.load"], ["", "def", "load_model", "(", "model", ",", "model_file", ",", "is_restore", "=", "False", ")", ":", "\n", "    ", "t_start", "=", "time", ".", "time", "(", ")", "\n", "if", "isinstance", "(", "model_file", ",", "str", ")", ":", "\n", "        ", "state_dict", "=", "torch", ".", "load", "(", "model_file", ")", "\n", "if", "'model'", "in", "state_dict", ".", "keys", "(", ")", ":", "\n", "            ", "state_dict", "=", "state_dict", "[", "'model'", "]", "\n", "", "", "else", ":", "\n", "        ", "state_dict", "=", "model_file", "\n", "", "t_ioend", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "is_restore", ":", "\n", "        ", "new_state_dict", "=", "OrderedDict", "(", ")", "\n", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "            ", "name", "=", "'module.'", "+", "k", "\n", "new_state_dict", "[", "name", "]", "=", "v", "\n", "", "state_dict", "=", "new_state_dict", "\n", "\n", "", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "False", ")", "\n", "ckpt_keys", "=", "set", "(", "state_dict", ".", "keys", "(", ")", ")", "\n", "own_keys", "=", "set", "(", "model", ".", "state_dict", "(", ")", ".", "keys", "(", ")", ")", "\n", "missing_keys", "=", "own_keys", "-", "ckpt_keys", "\n", "unexpected_keys", "=", "ckpt_keys", "-", "own_keys", "\n", "\n", "if", "len", "(", "missing_keys", ")", ">", "0", ":", "\n", "        ", "logger", ".", "warning", "(", "'Missing key(s) in state_dict: {}'", ".", "format", "(", "\n", "', '", ".", "join", "(", "'{}'", ".", "format", "(", "k", ")", "for", "k", "in", "missing_keys", ")", ")", ")", "\n", "\n", "", "if", "len", "(", "unexpected_keys", ")", ">", "0", ":", "\n", "        ", "logger", ".", "warning", "(", "'Unexpected key(s) in state_dict: {}'", ".", "format", "(", "\n", "', '", ".", "join", "(", "'{}'", ".", "format", "(", "k", ")", "for", "k", "in", "unexpected_keys", ")", ")", ")", "\n", "\n", "", "del", "state_dict", "\n", "t_end", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "info", "(", "\n", "\"Load model, Time usage:\\n\\tIO: {}, initialize parameters: {}\"", ".", "format", "(", "\n", "t_ioend", "-", "t_start", ",", "t_end", "-", "t_ioend", ")", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.pyt_utils.parse_devices": [[82, 107], ["input_devices.endswith", "input_devices.split", "logger.info", "list", "range", "range", "int", "list.append", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "int", "int", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "list.append", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "d.split", "d.split", "str"], "function", ["None"], ["", "def", "parse_devices", "(", "input_devices", ")", ":", "\n", "    ", "if", "input_devices", ".", "endswith", "(", "'*'", ")", ":", "\n", "        ", "devices", "=", "list", "(", "range", "(", "torch", ".", "cuda", ".", "device_count", "(", ")", ")", ")", "\n", "return", "devices", "\n", "\n", "", "devices", "=", "[", "]", "\n", "for", "d", "in", "input_devices", ".", "split", "(", "','", ")", ":", "\n", "        ", "if", "'-'", "in", "d", ":", "\n", "            ", "start_device", ",", "end_device", "=", "d", ".", "split", "(", "'-'", ")", "[", "0", "]", ",", "d", ".", "split", "(", "'-'", ")", "[", "1", "]", "\n", "assert", "start_device", "!=", "''", "\n", "assert", "end_device", "!=", "''", "\n", "start_device", ",", "end_device", "=", "int", "(", "start_device", ")", ",", "int", "(", "end_device", ")", "\n", "assert", "start_device", "<", "end_device", "\n", "assert", "end_device", "<", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "for", "sd", "in", "range", "(", "start_device", ",", "end_device", "+", "1", ")", ":", "\n", "                ", "devices", ".", "append", "(", "sd", ")", "\n", "", "", "else", ":", "\n", "            ", "device", "=", "int", "(", "d", ")", "\n", "assert", "device", "<", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "devices", ".", "append", "(", "device", ")", "\n", "\n", "", "", "logger", ".", "info", "(", "'using devices {}'", ".", "format", "(", "\n", "', '", ".", "join", "(", "[", "str", "(", "d", ")", "for", "d", "in", "devices", "]", ")", ")", ")", "\n", "\n", "return", "devices", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.pyt_utils.extant_file": [[109, 118], ["os.path.exists", "argparse.ArgumentTypeError"], "function", ["None"], ["", "def", "extant_file", "(", "x", ")", ":", "\n", "    ", "\"\"\"\n    'Type' for argparse - checks that file exists but does not open.\n    \"\"\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "x", ")", ":", "\n", "# Argparse uses the ArgumentTypeError to give a rejection message like:", "\n", "# error: argument input: x does not exist", "\n", "        ", "raise", "argparse", ".", "ArgumentTypeError", "(", "\"{0} does not exist\"", ".", "format", "(", "x", ")", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.pyt_utils.link_file": [[120, 124], ["os.system", "os.path.isdir", "os.path.isfile", "os.remove"], "function", ["None"], ["", "def", "link_file", "(", "src", ",", "target", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "isdir", "(", "target", ")", "or", "os", ".", "path", ".", "isfile", "(", "target", ")", ":", "\n", "        ", "os", ".", "remove", "(", "target", ")", "\n", "", "os", ".", "system", "(", "'ln -s {} {}'", ".", "format", "(", "src", ",", "target", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.pyt_utils.ensure_dir": [[126, 129], ["os.path.isdir", "os.makedirs"], "function", ["None"], ["", "def", "ensure_dir", "(", "path", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "isdir", "(", "path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TAMU-VITA_AGD.utils.pyt_utils._dbg_interactive": [[131, 134], ["embed"], "function", ["None"], ["", "", "def", "_dbg_interactive", "(", "var", ",", "value", ")", ":", "\n", "    ", "from", "IPython", "import", "embed", "\n", "embed", "(", ")", "\n", "", ""]]}