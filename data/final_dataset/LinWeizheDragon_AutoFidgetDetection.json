{"home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.src.main.MainPipeline.__init__": [[36, 54], ["os.path.join", "os.path.join"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "path_data", ",", "batch_data", "=", "None", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "if", "path_data", "is", "not", "None", ":", "\n", "# single video processing", "\n", "            ", "self", ".", "path_data", "=", "path_data", "\n", "self", ".", "video_path", "=", "path_data", "[", "'video'", "]", "\n", "self", ".", "openpose_output_path", "=", "path_data", "[", "'openpose_data'", "]", "\n", "self", ".", "openface_output_file", "=", "path_data", "[", "'openface_data'", "]", "\n", "self", ".", "processed_file", "=", "os", ".", "path", ".", "join", "(", "DATA_FOLDER", ",", "'processed_data'", ",", "\n", "path_data", "[", "'file_format'", "]", "+", "'.npy'", ")", "\n", "self", ".", "processed_smooth_file", "=", "os", ".", "path", ".", "join", "(", "DATA_FOLDER", ",", "'processed_data_smooth'", ",", "\n", "path_data", "[", "'file_format'", "]", "+", "'.npy'", ")", "\n", "self", ".", "participant_id", "=", "path_data", "[", "'participant_id'", "]", "\n", "self", ".", "session_id", "=", "path_data", "[", "'session_id'", "]", "\n", "\n", "", "else", ":", "\n", "# general processing", "\n", "            ", "self", ".", "batch_data", "=", "batch_data", "\n", "\n"]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.src.main.MainPipeline.read_labels": [[55, 109], ["cv2.VideoCapture", "cv2.VideoCapture.get", "print", "utility.elan_portal.ElanPortal", "utility.elan_portal.ElanPortal.read", "print", "main.MainPipeline.transfer_to_array", "main.MainPipeline.transfer_to_array", "main.MainPipeline.transfer_to_array", "main.MainPipeline.transfer_to_array", "main.MainPipeline.transfer_to_array", "main.MainPipeline.transfer_to_array", "main.MainPipeline.transfer_to_array", "main.MainPipeline.transfer_to_array", "main.MainPipeline.transfer_to_array", "main.MainPipeline.transfer_to_array", "main.MainPipeline.transfer_to_array", "main.MainPipeline.transfer_to_array", "main.MainPipeline.transfer_to_array", "main.MainPipeline.transfer_to_array", "main.MainPipeline.transfer_to_array", "main.MainPipeline.transfer_to_array", "utility.elan_portal.ElanPortal.get_segments", "utility.elan_portal.ElanPortal.get_segments", "utility.elan_portal.ElanPortal.get_segments", "utility.elan_portal.ElanPortal.get_segments", "utility.elan_portal.ElanPortal.get_segments", "utility.elan_portal.ElanPortal.get_segments", "utility.elan_portal.ElanPortal.get_segments", "utility.elan_portal.ElanPortal.get_segments", "utility.elan_portal.ElanPortal.get_segments", "utility.elan_portal.ElanPortal.get_segments", "utility.elan_portal.ElanPortal.get_segments", "utility.elan_portal.ElanPortal.get_segments", "utility.elan_portal.ElanPortal.get_segments", "utility.elan_portal.ElanPortal.get_segments", "utility.elan_portal.ElanPortal.get_segments", "utility.elan_portal.ElanPortal.get_segments", "utility.elan_portal.ElanPortal.get_segments"], "methods", ["home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.elan_portal.ElanPortal.read", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.basic_processor.BasicProcessor.transfer_to_array", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.basic_processor.BasicProcessor.transfer_to_array", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.basic_processor.BasicProcessor.transfer_to_array", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.basic_processor.BasicProcessor.transfer_to_array", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.basic_processor.BasicProcessor.transfer_to_array", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.basic_processor.BasicProcessor.transfer_to_array", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.basic_processor.BasicProcessor.transfer_to_array", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.basic_processor.BasicProcessor.transfer_to_array", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.basic_processor.BasicProcessor.transfer_to_array", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.basic_processor.BasicProcessor.transfer_to_array", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.basic_processor.BasicProcessor.transfer_to_array", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.basic_processor.BasicProcessor.transfer_to_array", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.basic_processor.BasicProcessor.transfer_to_array", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.basic_processor.BasicProcessor.transfer_to_array", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.basic_processor.BasicProcessor.transfer_to_array", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.basic_processor.BasicProcessor.transfer_to_array", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.elan_portal.ElanPortal.get_segments", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.elan_portal.ElanPortal.get_segments", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.elan_portal.ElanPortal.get_segments", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.elan_portal.ElanPortal.get_segments", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.elan_portal.ElanPortal.get_segments", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.elan_portal.ElanPortal.get_segments", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.elan_portal.ElanPortal.get_segments", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.elan_portal.ElanPortal.get_segments", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.elan_portal.ElanPortal.get_segments", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.elan_portal.ElanPortal.get_segments", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.elan_portal.ElanPortal.get_segments", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.elan_portal.ElanPortal.get_segments", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.elan_portal.ElanPortal.get_segments", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.elan_portal.ElanPortal.get_segments", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.elan_portal.ElanPortal.get_segments", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.elan_portal.ElanPortal.get_segments", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.elan_portal.ElanPortal.get_segments"], ["", "", "def", "read_labels", "(", "self", ",", "label_file", ")", ":", "\n", "        ", "cap", "=", "cv2", ".", "VideoCapture", "(", "self", ".", "video_path", ")", "\n", "fps", "=", "cap", ".", "get", "(", "cv2", ".", "CAP_PROP_FPS", ")", "\n", "print", "(", "'fps:'", ",", "fps", ")", "\n", "\n", "portal", "=", "ElanPortal", "(", ")", "\n", "portal", ".", "read", "(", "label_file", ",", "fps", ")", "\n", "print", "(", "portal", ".", "get_segments", "(", "'Leg Action'", ",", "'static'", ")", ")", "\n", "\n", "# hand location", "\n", "left_hand_on_hand", "=", "self", ".", "transfer_to_array", "(", "portal", ".", "get_segments", "(", "'Left Hand Location'", ",", "'on hand'", ")", ")", "\n", "right_hand_on_hand", "=", "self", ".", "transfer_to_array", "(", "portal", ".", "get_segments", "(", "'Left Hand Location'", ",", "'on hand'", ")", ")", "\n", "left_hand_on_leg", "=", "self", ".", "transfer_to_array", "(", "portal", ".", "get_segments", "(", "'Left Hand Location'", ",", "'on leg'", ")", ")", "\n", "right_hand_on_leg", "=", "self", ".", "transfer_to_array", "(", "portal", ".", "get_segments", "(", "'Right Hand Location'", ",", "'on leg'", ")", ")", "\n", "left_hand_on_arm", "=", "self", ".", "transfer_to_array", "(", "portal", ".", "get_segments", "(", "'Left Hand Location'", ",", "'on arm'", ")", ")", "\n", "right_hand_on_arm", "=", "self", ".", "transfer_to_array", "(", "portal", ".", "get_segments", "(", "'Right Hand Location'", ",", "'on arm'", ")", ")", "\n", "left_hand_on_face", "=", "self", ".", "transfer_to_array", "(", "portal", ".", "get_segments", "(", "'Left Hand Location'", ",", "'on face'", ")", ")", "\n", "right_hand_on_face", "=", "self", ".", "transfer_to_array", "(", "portal", ".", "get_segments", "(", "'Right Hand Location'", ",", "'on face'", ")", ")", "\n", "\n", "# leg location", "\n", "leg_on_leg", "=", "self", ".", "transfer_to_array", "(", "portal", ".", "get_segments", "(", "'Leg Location'", ",", "'on leg'", ")", ")", "\n", "leg_on_ground", "=", "self", ".", "transfer_to_array", "(", "portal", ".", "get_segments", "(", "'Leg Location'", ",", "'on leg'", ")", ")", "\n", "\n", "# action", "\n", "left_hand_static", "=", "self", ".", "transfer_to_array", "(", "portal", ".", "get_segments", "(", "'Left Hand Action'", ",", "'static'", ")", ")", "\n", "left_hand_rhythmic", "=", "self", ".", "transfer_to_array", "(", "portal", ".", "get_segments", "(", "'Left Hand Action'", ",", "'rhythmic'", ")", ")", "\n", "right_hand_static", "=", "self", ".", "transfer_to_array", "(", "portal", ".", "get_segments", "(", "'Right Hand Action'", ",", "'static'", ")", ")", "\n", "right_hand_rhythmic", "=", "self", ".", "transfer_to_array", "(", "portal", ".", "get_segments", "(", "'Right Hand Action'", ",", "'rhythmic'", ")", ")", "\n", "leg_static", "=", "self", ".", "transfer_to_array", "(", "portal", ".", "get_segments", "(", "'Leg Action'", ",", "'static'", ")", ")", "\n", "leg_rhythmic", "=", "self", ".", "transfer_to_array", "(", "portal", ".", "get_segments", "(", "'Leg Action'", ",", "'rhythmic'", ")", ")", "\n", "\n", "# copy left to right", "\n", "right_hand_static", "[", "(", "left_hand_on_hand", "==", "1", ")", "&", "(", "left_hand_static", "==", "1", ")", "]", "=", "1", "\n", "right_hand_rhythmic", "[", "(", "left_hand_on_hand", "==", "1", ")", "&", "(", "left_hand_rhythmic", "==", "1", ")", "]", "=", "1", "\n", "\n", "result", "=", "{", "\n", "'left_hand_on_hand'", ":", "left_hand_on_hand", ",", "\n", "'right_hand_on_hand'", ":", "right_hand_on_hand", ",", "\n", "'left_hand_on_leg'", ":", "left_hand_on_leg", ",", "\n", "'right_hand_on_leg'", ":", "right_hand_on_leg", ",", "\n", "'left_hand_on_arm'", ":", "left_hand_on_arm", ",", "\n", "'right_hand_on_arm'", ":", "right_hand_on_arm", ",", "\n", "'left_hand_on_face'", ":", "left_hand_on_face", ",", "\n", "'right_hand_on_face'", ":", "right_hand_on_face", ",", "\n", "'leg_on_leg'", ":", "leg_on_leg", ",", "\n", "'leg_on_ground'", ":", "leg_on_ground", ",", "\n", "'left_hand_static'", ":", "left_hand_static", ",", "\n", "'left_hand_rhythmic'", ":", "left_hand_rhythmic", ",", "\n", "'right_hand_static'", ":", "right_hand_static", ",", "\n", "'right_hand_rhythmic'", ":", "right_hand_rhythmic", ",", "\n", "'leg_static'", ":", "leg_static", ",", "\n", "'leg_rhythmic'", ":", "leg_rhythmic", ",", "\n", "}", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.src.main.MainPipeline.export_elan_portal": [[110, 191], ["cv2.VideoCapture", "cv2.VideoCapture.get", "print", "utility.elan_portal.ElanPortal", "print", "component.leg_location_analyser.LegLocationAnalyser", "component.leg_location_analyser.LegLocationAnalyser.compute_leg_intersection", "print", "component.hand_location_analyser.HandLocationAnalyser", "component.hand_location_analyser.HandLocationAnalyser.compute_hand_intersection", "print", "component.hand_location_analyser.HandLocationAnalyser", "component.hand_location_analyser.HandLocationAnalyser.compute_hand_intersection", "print", "component.hand_cross_analyser.HandCrossAnalyser", "component.hand_cross_analyser.HandCrossAnalyser.compute_stationary_rectangles", "print", "component.hand_cross_analyser.HandCrossAnalyser.compute_static_hands_without_crossing", "print", "component.hand_cross_analyser.HandCrossAnalyser.compute_static_hands_without_crossing", "component.hand_cross_analyser.HandCrossAnalyser.compute_static_and_rhythmic_with_hand_cross", "print", "component.leg_action_analyser.LegActionAnalyser", "component.leg_action_analyser.LegActionAnalyser.compute_static_and_rhythmic_feet", "main.MainPipeline.export_elan_portal.transfer_to_secs"], "methods", ["home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.leg_location_analyser.LegLocationAnalyser.compute_leg_intersection", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.hand_location_analyser.HandLocationAnalyser.compute_hand_intersection", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.hand_location_analyser.HandLocationAnalyser.compute_hand_intersection", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.hand_cross_analyser.HandCrossAnalyser.compute_stationary_rectangles", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.hand_cross_analyser.HandCrossAnalyser.compute_static_hands_without_crossing", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.hand_cross_analyser.HandCrossAnalyser.compute_static_hands_without_crossing", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.hand_cross_analyser.HandCrossAnalyser.compute_static_and_rhythmic_with_hand_cross", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.leg_action_analyser.LegActionAnalyser.compute_static_and_rhythmic_feet"], ["", "def", "export_elan_portal", "(", "self", ")", ":", "\n", "        ", "cap", "=", "cv2", ".", "VideoCapture", "(", "self", ".", "video_path", ")", "\n", "fps", "=", "cap", ".", "get", "(", "cv2", ".", "CAP_PROP_FPS", ")", "\n", "print", "(", "'fps:'", ",", "fps", ")", "\n", "\n", "portal", "=", "ElanPortal", "(", ")", "\n", "\n", "print", "(", "'computing leg intersection...'", ")", "\n", "instance_leg", "=", "LegLocationAnalyser", "(", "self", ".", "name", ",", "self", ".", "path_data", ")", "\n", "leg_continuous_segments", ",", "intersect_data", "=", "instance_leg", ".", "compute_leg_intersection", "(", "cutoff", "=", "0", ",", "min_length", "=", "20", ")", "\n", "\n", "print", "(", "'computing left hand location...'", ")", "\n", "instance_left_hand", "=", "HandLocationAnalyser", "(", "self", ".", "name", ",", "self", ".", "path_data", ",", "hand", "=", "'left'", ")", "\n", "left_hand_arm_continuous_segments", ",", "left_hand_leg_continuous_segments", ",", "left_hand_face_continuous_segments", "=", "instance_left_hand", ".", "compute_hand_intersection", "(", "cutoff", "=", "0", ",", "min_length", "=", "80", ")", "\n", "\n", "print", "(", "'computing right hand location...'", ")", "\n", "instance_right_hand", "=", "HandLocationAnalyser", "(", "self", ".", "name", ",", "self", ".", "path_data", ",", "hand", "=", "'right'", ")", "\n", "right_hand_arm_continuous_segments", ",", "right_hand_leg_continuous_segments", ",", "right_hand_face_continuous_segments", "=", "instance_right_hand", ".", "compute_hand_intersection", "(", "cutoff", "=", "0", ",", "min_length", "=", "80", ")", "\n", "\n", "print", "(", "'computing hand cross'", ")", "\n", "instance_hand_cross", "=", "HandCrossAnalyser", "(", "self", ".", "name", ",", "self", ".", "path_data", ")", "\n", "continuous_segments", ",", "valid_intersect_data", "=", "instance_hand_cross", ".", "compute_stationary_rectangles", "(", "cutoff", "=", "0", ",", "\n", "min_length", "=", "20", ")", "\n", "\n", "print", "(", "'computing left hand static'", ")", "\n", "left_static_segments", "=", "instance_hand_cross", ".", "compute_static_hands_without_crossing", "(", "'left'", ")", "\n", "print", "(", "'computing right hand static'", ")", "\n", "right_static_segments", "=", "instance_hand_cross", ".", "compute_static_hands_without_crossing", "(", "'right'", ")", "\n", "static_segments", ",", "dynamic_segments", ",", "rhythmic_segments", ",", "dynamic_rythmic_segments", "=", "instance_hand_cross", ".", "compute_static_and_rhythmic_with_hand_cross", "(", ")", "\n", "\n", "print", "(", "'computing leg action'", ")", "\n", "instance_leg_action", "=", "LegActionAnalyser", "(", "self", ".", "name", ",", "self", ".", "path_data", ")", "\n", "foot_static_segments", ",", "foot_dynamic_segments", ",", "foot_rhythmic_segments", ",", "foot_dynamic_rythmic_segments", "=", "instance_leg_action", ".", "compute_static_and_rhythmic_feet", "(", ")", "\n", "\n", "def", "transfer_to_secs", "(", "segments", ")", ":", "\n", "            ", "return", "(", "np", ".", "array", "(", "segments", ")", "/", "fps", ")", ".", "tolist", "(", ")", "\n", "\n", "", "continuous_segments", "=", "transfer_to_secs", "(", "continuous_segments", ")", "\n", "left_static_segments", "=", "transfer_to_secs", "(", "left_static_segments", ")", "\n", "right_static_segments", "=", "transfer_to_secs", "(", "right_static_segments", ")", "\n", "static_segments", "=", "transfer_to_secs", "(", "static_segments", ")", "\n", "dynamic_segments", "=", "transfer_to_secs", "(", "dynamic_segments", ")", "\n", "rhythmic_segments", "=", "transfer_to_secs", "(", "rhythmic_segments", ")", "\n", "dynamic_rythmic_segments", "=", "transfer_to_secs", "(", "dynamic_rythmic_segments", ")", "\n", "foot_static_segments", "=", "transfer_to_secs", "(", "foot_static_segments", ")", "\n", "foot_dynamic_rythmic_segments", "=", "transfer_to_secs", "(", "foot_dynamic_rythmic_segments", ")", "\n", "foot_rhythmic_segments", "=", "transfer_to_secs", "(", "foot_rhythmic_segments", ")", "\n", "left_hand_arm_continuous_segments", "=", "transfer_to_secs", "(", "left_hand_arm_continuous_segments", ")", "\n", "left_hand_leg_continuous_segments", "=", "transfer_to_secs", "(", "left_hand_leg_continuous_segments", ")", "\n", "left_hand_face_continuous_segments", "=", "transfer_to_secs", "(", "left_hand_face_continuous_segments", ")", "\n", "right_hand_arm_continuous_segments", "=", "transfer_to_secs", "(", "right_hand_arm_continuous_segments", ")", "\n", "right_hand_leg_continuous_segments", "=", "transfer_to_secs", "(", "right_hand_leg_continuous_segments", ")", "\n", "right_hand_face_continuous_segments", "=", "transfer_to_secs", "(", "right_hand_face_continuous_segments", ")", "\n", "leg_continuous_segments", "=", "transfer_to_secs", "(", "leg_continuous_segments", ")", "\n", "\n", "# No hand cross event", "\n", "portal", ".", "add_tier", "(", "'Left Hand Action'", ",", "'static'", ",", "left_static_segments", ")", "\n", "portal", ".", "add_tier", "(", "'Left Hand Location'", ",", "'on arm'", ",", "left_hand_arm_continuous_segments", ")", "\n", "portal", ".", "add_tier", "(", "'Left Hand Location'", ",", "'on leg'", ",", "left_hand_leg_continuous_segments", ")", "\n", "portal", ".", "add_tier", "(", "'Left Hand Location'", ",", "'on face'", ",", "left_hand_face_continuous_segments", ")", "\n", "\n", "portal", ".", "add_tier", "(", "'Right Hand Action'", ",", "'static'", ",", "right_static_segments", ")", "\n", "portal", ".", "add_tier", "(", "'Right Hand Location'", ",", "'on arm'", ",", "right_hand_arm_continuous_segments", ")", "\n", "portal", ".", "add_tier", "(", "'Right Hand Location'", ",", "'on leg'", ",", "right_hand_leg_continuous_segments", ")", "\n", "portal", ".", "add_tier", "(", "'Right Hand Location'", ",", "'on face'", ",", "right_hand_face_continuous_segments", ")", "\n", "\n", "# Hand cross event", "\n", "portal", ".", "add_tier", "(", "'Left Hand Location'", ",", "'on hand'", ",", "continuous_segments", ")", "\n", "portal", ".", "add_tier", "(", "'Left Hand Action'", ",", "'static'", ",", "static_segments", ")", "\n", "portal", ".", "add_tier", "(", "'Left Hand Action'", ",", "'rhythmic'", ",", "rhythmic_segments", ")", "\n", "\n", "# Leg Event", "\n", "portal", ".", "add_tier", "(", "'Leg Action'", ",", "'static'", ",", "foot_static_segments", ")", "\n", "portal", ".", "add_tier", "(", "'Leg Action'", ",", "'rhythmic'", ",", "foot_dynamic_rythmic_segments", ")", "\n", "portal", ".", "add_tier", "(", "'Leg Action'", ",", "'rhythmic'", ",", "foot_rhythmic_segments", ")", "\n", "portal", ".", "add_tier", "(", "'Leg Location'", ",", "'on leg'", ",", "leg_continuous_segments", ")", "\n", "\n", "portal", ".", "export", "(", "os", ".", "path", ".", "join", "(", "DATA_FOLDER", ",", "'label'", ",", "'generated'", ",", "'{}_{}.txt'", ".", "format", "(", "\n", "self", ".", "participant_id", ",", "self", ".", "session_id", "\n", ")", ")", ")", "\n"]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.src.main.MainPipeline.generate_hand_cross_slice": [[193, 293], ["component.hand_cross_analyser.HandCrossAnalyser", "component.hand_cross_analyser.HandCrossAnalyser.compute_stationary_rectangles", "print", "cv2.VideoCapture", "component.optical_flow_analyser.OpticalFlowAnalyser", "numpy.hstack", "cv2.VideoCapture.release", "cv2.destroyAllWindows", "print", "int", "int", "print", "range", "print", "component.optical_flow_analyser.OpticalFlowAnalyser.run_optical_flow", "range", "os.path.join", "numpy.zeros", "enumerate", "utility.dirs.create_dirs", "numpy.save", "main.MainPipeline.analyse_sequence_new", "print", "print", "print", "math.floor", "result.append", "main.MainPipeline.get_first_derivative", "numpy.mean", "numpy.mean", "numpy.mean", "print", "optical_flow_data[].reshape", "len", "os.path.split"], "methods", ["home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.hand_cross_analyser.HandCrossAnalyser.compute_stationary_rectangles", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.optical_flow_analyser.OpticalFlowAnalyser.run_optical_flow", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.dirs.create_dirs", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.basic_processor.BasicProcessor.analyse_sequence_new", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.basic_processor.BasicProcessor.get_first_derivative"], ["", "def", "generate_hand_cross_slice", "(", "self", ")", ":", "\n", "        ", "'''\n        generate raw hand cross slices\n        :return:\n        '''", "\n", "instance_hand_cross_analyser", "=", "HandCrossAnalyser", "(", "self", ".", "name", ",", "self", ".", "path_data", ")", "\n", "continuous_segments", ",", "valid_intersect_data", "=", "instance_hand_cross_analyser", ".", "compute_stationary_rectangles", "(", "\n", "cutoff", "=", "0", ",", "min_length", "=", "20", ")", "\n", "print", "(", "continuous_segments", ")", "\n", "# best_rects = {}", "\n", "# for segment in continuous_segments:", "\n", "#     # find largest rectangle for each segment", "\n", "#     rects = [valid_intersect_data[i] for i in valid_intersect_data.keys()", "\n", "#              if i >= segment[0] and i < segment[1]]", "\n", "#     rects = np.array(rects)", "\n", "#     best_rect = np.hstack((np.min(rects, axis=0)[:2], np.max(rects, axis=0)[2:]))", "\n", "#     for i in range(segment[0], segment[1]):", "\n", "#         best_rects[i] = best_rect", "\n", "\n", "window_size", "=", "100", "\n", "window_step", "=", "50", "\n", "min_size", "=", "100", "\n", "\n", "cap", "=", "cv2", ".", "VideoCapture", "(", "self", ".", "video_path", ")", "\n", "of_analyser", "=", "OpticalFlowAnalyser", "(", "'test'", ",", "self", ".", "path_data", ")", "\n", "init_points", "=", "np", ".", "hstack", "(", "\n", "(", "of_analyser", ".", "data", "[", ":", ",", "194", ":", "232", "]", ",", "\n", "of_analyser", ".", "data", "[", ":", ",", "236", ":", "274", "]", ")", "\n", ")", "\n", "\n", "participant_id", "=", "self", ".", "participant_id", "\n", "session_id", "=", "self", ".", "session_id", "\n", "\n", "for", "segment", "in", "continuous_segments", ":", "\n", "            ", "starting", "=", "int", "(", "segment", "[", "0", "]", ")", "\n", "ending", "=", "int", "(", "segment", "[", "1", "]", ")", "\n", "max_length", "=", "ending", "-", "starting", "\n", "print", "(", "'-------->'", ",", "starting", ",", "ending", ")", "\n", "for", "i", "in", "range", "(", "math", ".", "floor", "(", "(", "max_length", "-", "window_size", ")", "/", "window_step", ")", "+", "2", ")", ":", "\n", "                ", "sub_starting", ",", "sub_ending", "=", "i", "*", "window_step", ",", "i", "*", "window_step", "+", "window_size", "\n", "sub_starting", "+=", "starting", "\n", "sub_ending", "+=", "starting", "\n", "\n", "if", "sub_ending", ">", "ending", ":", "\n", "                    ", "sub_ending", "=", "ending", "\n", "\n", "", "if", "sub_ending", "-", "sub_starting", "<", "min_size", ":", "\n", "                    ", "sub_starting", "=", "sub_ending", "-", "window_size", "\n", "\n", "if", "sub_starting", "<", "starting", ":", "\n", "# can't take at least one window", "\n", "                        ", "continue", "\n", "\n", "", "", "assert", "sub_ending", "-", "sub_starting", "<=", "window_size", ",", "'sub slice must == to window size!'", "\n", "\n", "print", "(", "'start slicing:'", ",", "sub_starting", ",", "sub_ending", ")", "\n", "\n", "new_file_name", "=", "'participant_video_{}_{}_<{}_{}>.npy'", ".", "format", "(", "\n", "participant_id", ",", "session_id", ",", "sub_starting", ",", "sub_ending", "\n", ")", "\n", "\n", "# run optical flow instance", "\n", "optical_flow_data", "=", "of_analyser", ".", "run_optical_flow", "(", "cap", ",", "starting_time", "=", "sub_starting", ",", "\n", "ending_time", "=", "sub_ending", ",", "init_points", "=", "init_points", ",", "\n", "visualise", "=", "False", ")", "\n", "\n", "result", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "sub_starting", ",", "sub_ending", ")", ":", "\n", "# print(optical_flow_data[i].reshape((1, -1)).shape)", "\n", "# print(i)", "\n", "                    ", "if", "i", "not", "in", "optical_flow_data", ":", "\n", "                        ", "print", "(", "'Error detected, closing segment.'", ")", "\n", "break", "\n", "", "result", ".", "append", "(", "optical_flow_data", "[", "i", "]", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", ")", "\n", "\n", "", "result_path", "=", "os", ".", "path", ".", "join", "(", "DATA_FOLDER", ",", "\n", "'hand_cross_analysis_optical_flow'", ",", "\n", "new_file_name", "\n", ")", "\n", "\n", "result_array", "=", "np", ".", "zeros", "(", "(", "len", "(", "result", ")", ",", "38", "*", "2", ")", ")", "\n", "for", "index", ",", "frame_data", "in", "enumerate", "(", "result", ")", ":", "\n", "                    ", "result_array", "[", "index", ",", ":", "frame_data", ".", "shape", "[", "1", "]", "]", "=", "frame_data", "\n", "result_array", "[", "index", ",", "frame_data", ".", "shape", "[", "1", "]", ":", "]", "=", "result_array", "[", "index", "-", "1", ",", "frame_data", ".", "shape", "[", "1", "]", ":", "]", "\n", "# print(result_array)", "\n", "", "result", "=", "result_array", "\n", "# result = result.reshape((result.shape[0], result.shape[2]))", "\n", "create_dirs", "(", "[", "os", ".", "path", ".", "split", "(", "result_path", ")", "[", "0", "]", "]", ")", "\n", "np", ".", "save", "(", "result_path", ",", "result", ")", "\n", "FFT", ",", "STD", ",", "MEAN", "=", "self", ".", "analyse_sequence_new", "(", "self", ".", "get_first_derivative", "(", "result", ")", ")", "\n", "print", "(", "np", ".", "mean", "(", "FFT", ",", "axis", "=", "0", ")", ")", "\n", "print", "(", "np", ".", "mean", "(", "STD", ")", ")", "\n", "print", "(", "np", ".", "mean", "(", "MEAN", ")", ")", "\n", "\n", "\n", "", "", "cap", ".", "release", "(", ")", "\n", "cv2", ".", "destroyAllWindows", "(", ")", "\n", "\n", "print", "(", "'saving completed.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.src.main.MainPipeline.generate_leg_slice": [[294, 385], ["cv2.VideoCapture", "component.optical_flow_analyser.OpticalFlowAnalyser", "numpy.hstack", "print", "range", "cv2.VideoCapture.release", "cv2.destroyAllWindows", "print", "print", "component.optical_flow_analyser.OpticalFlowAnalyser.run_optical_flow", "range", "os.path.join", "numpy.zeros", "enumerate", "main.MainPipeline.analyse_sequence_new", "print", "print", "print", "utility.dirs.create_dirs", "numpy.save", "math.floor", "result.append", "main.MainPipeline.get_first_derivative", "numpy.mean", "numpy.mean", "numpy.mean", "print", "optical_flow_data[].reshape", "len", "os.path.split"], "methods", ["home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.optical_flow_analyser.OpticalFlowAnalyser.run_optical_flow", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.basic_processor.BasicProcessor.analyse_sequence_new", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.dirs.create_dirs", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.basic_processor.BasicProcessor.get_first_derivative"], ["", "def", "generate_leg_slice", "(", "self", ")", ":", "\n", "        ", "'''\n        generate raw leg slices\n        :return:\n        '''", "\n", "\n", "window_size", "=", "100", "\n", "window_step", "=", "50", "\n", "min_size", "=", "100", "\n", "\n", "cap", "=", "cv2", ".", "VideoCapture", "(", "self", ".", "video_path", ")", "\n", "of_analyser", "=", "OpticalFlowAnalyser", "(", "'test'", ",", "self", ".", "path_data", ")", "\n", "init_points", "=", "np", ".", "hstack", "(", "\n", "(", "of_analyser", ".", "data", "[", ":", ",", "44", ":", "50", "]", ",", "\n", "# of_analyser.data[:, 20:22],", "\n", "of_analyser", ".", "data", "[", ":", ",", "38", ":", "44", "]", ",", "\n", "# of_analyser.data[:, 26:28],", "\n", ")", "\n", ")", "\n", "\n", "participant_id", "=", "self", ".", "participant_id", "\n", "session_id", "=", "self", ".", "session_id", "\n", "\n", "starting", "=", "0", "\n", "ending", "=", "of_analyser", ".", "data", ".", "shape", "[", "0", "]", "\n", "max_length", "=", "ending", "-", "starting", "\n", "print", "(", "'-------->'", ",", "starting", ",", "ending", ")", "\n", "for", "i", "in", "range", "(", "math", ".", "floor", "(", "(", "max_length", "-", "window_size", ")", "/", "window_step", ")", "+", "2", ")", ":", "\n", "            ", "sub_starting", ",", "sub_ending", "=", "i", "*", "window_step", ",", "i", "*", "window_step", "+", "window_size", "\n", "sub_starting", "+=", "starting", "\n", "sub_ending", "+=", "starting", "\n", "\n", "if", "sub_ending", ">", "ending", ":", "\n", "                ", "sub_ending", "=", "ending", "\n", "\n", "", "if", "sub_ending", "-", "sub_starting", "<", "min_size", ":", "\n", "                ", "sub_starting", "=", "sub_ending", "-", "window_size", "\n", "\n", "if", "sub_starting", "<", "starting", ":", "\n", "# can't take at least one window", "\n", "                    ", "continue", "\n", "\n", "", "", "assert", "sub_ending", "-", "sub_starting", "<=", "window_size", ",", "'sub slice must == to window size!'", "\n", "\n", "print", "(", "'start slicing:'", ",", "sub_starting", ",", "sub_ending", ")", "\n", "\n", "new_file_name", "=", "'participant_video_{}_{}_<{}_{}>.npy'", ".", "format", "(", "\n", "participant_id", ",", "session_id", ",", "sub_starting", ",", "sub_ending", "\n", ")", "\n", "\n", "# run optical flow instance", "\n", "optical_flow_data", "=", "of_analyser", ".", "run_optical_flow", "(", "cap", ",", "starting_time", "=", "sub_starting", ",", "ending_time", "=", "sub_ending", ",", "\n", "init_points", "=", "init_points", ",", "\n", "visualise", "=", "False", ")", "\n", "\n", "result", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "sub_starting", ",", "sub_ending", ")", ":", "\n", "# print(optical_flow_data[i].reshape((1, -1)).shape)", "\n", "# print(i)", "\n", "                ", "if", "i", "not", "in", "optical_flow_data", ":", "\n", "                    ", "print", "(", "'Error detected, closing segment.'", ")", "\n", "break", "\n", "", "result", ".", "append", "(", "optical_flow_data", "[", "i", "]", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", ")", "\n", "\n", "", "result_path", "=", "os", ".", "path", ".", "join", "(", "DATA_FOLDER", ",", "\n", "'leg_action_analysis_optical_flow'", ",", "\n", "new_file_name", "\n", ")", "\n", "\n", "result_array", "=", "np", ".", "zeros", "(", "(", "len", "(", "result", ")", ",", "6", "*", "2", ")", ")", "\n", "for", "index", ",", "frame_data", "in", "enumerate", "(", "result", ")", ":", "\n", "                ", "result_array", "[", "index", ",", ":", "frame_data", ".", "shape", "[", "1", "]", "]", "=", "frame_data", "\n", "result_array", "[", "index", ",", "frame_data", ".", "shape", "[", "1", "]", ":", "]", "=", "result_array", "[", "index", "-", "1", ",", "frame_data", ".", "shape", "[", "1", "]", ":", "]", "\n", "# print(result_array)", "\n", "", "result", "=", "result_array", "\n", "# result = result.reshape((result.shape[0], result.shape[2]))", "\n", "\n", "FFT", ",", "STD", ",", "MEAN", "=", "self", ".", "analyse_sequence_new", "(", "self", ".", "get_first_derivative", "(", "result", ")", ")", "\n", "print", "(", "np", ".", "mean", "(", "FFT", ",", "axis", "=", "0", ")", ")", "\n", "print", "(", "np", ".", "mean", "(", "STD", ")", ")", "\n", "print", "(", "np", ".", "mean", "(", "MEAN", ")", ")", "\n", "#", "\n", "# input()", "\n", "create_dirs", "(", "[", "os", ".", "path", ".", "split", "(", "result_path", ")", "[", "0", "]", "]", ")", "\n", "np", ".", "save", "(", "result_path", ",", "result", ")", "\n", "\n", "", "cap", ".", "release", "(", ")", "\n", "cv2", ".", "destroyAllWindows", "(", ")", "\n", "\n", "print", "(", "'saving completed.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.src.main.MainPipeline.generate_hand_slice": [[386, 503], ["component.hand_cross_analyser.HandCrossAnalyser", "component.hand_cross_analyser.HandCrossAnalyser.compute_stationary_rectangles", "print", "cv2.VideoCapture", "component.optical_flow_analyser.OpticalFlowAnalyser", "print", "cv2.VideoCapture.release", "cv2.destroyAllWindows", "print", "range", "len", "no_cross_continuous_segments.append", "int", "int", "print", "range", "hand_cross_intersect_data.keys", "no_cross_continuous_segments.append", "print", "component.optical_flow_analyser.OpticalFlowAnalyser.run_optical_flow", "range", "os.path.join", "numpy.zeros", "enumerate", "utility.dirs.create_dirs", "numpy.save", "math.floor", "result.append", "print", "optical_flow_data[].reshape", "len", "os.path.split"], "methods", ["home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.hand_cross_analyser.HandCrossAnalyser.compute_stationary_rectangles", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.optical_flow_analyser.OpticalFlowAnalyser.run_optical_flow", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.dirs.create_dirs"], ["", "def", "generate_hand_slice", "(", "self", ")", ":", "\n", "        ", "'''\n        generate raw hand cross slices\n        :return:\n        '''", "\n", "instance_hand_cross_analyser", "=", "HandCrossAnalyser", "(", "self", ".", "name", ",", "self", ".", "path_data", ")", "\n", "continuous_segments", ",", "hand_cross_intersect_data", "=", "instance_hand_cross_analyser", ".", "compute_stationary_rectangles", "(", "\n", "min_length", "=", "20", ",", "cutoff", "=", "0", ")", "\n", "print", "(", "continuous_segments", ")", "\n", "\n", "window_size", "=", "100", "\n", "window_step", "=", "50", "\n", "min_size", "=", "100", "\n", "\n", "cap", "=", "cv2", ".", "VideoCapture", "(", "self", ".", "video_path", ")", "\n", "of_analyser", "=", "OpticalFlowAnalyser", "(", "'test'", ",", "self", ".", "path_data", ")", "\n", "\n", "no_cross_continuous_segments", "=", "[", "]", "\n", "no_cross_list", "=", "[", "i", "for", "i", "in", "range", "(", "of_analyser", ".", "data", ".", "shape", "[", "0", "]", ")", "if", "i", "not", "in", "hand_cross_intersect_data", ".", "keys", "(", ")", "]", "\n", "for", "i", "in", "no_cross_list", ":", "\n", "            ", "if", "len", "(", "no_cross_continuous_segments", ")", "==", "0", ":", "\n", "                ", "no_cross_continuous_segments", ".", "append", "(", "[", "i", ",", "i", "+", "1", "]", ")", "\n", "", "else", ":", "\n", "                ", "if", "no_cross_continuous_segments", "[", "-", "1", "]", "[", "1", "]", "==", "i", ":", "\n", "                    ", "no_cross_continuous_segments", "[", "-", "1", "]", "[", "1", "]", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "no_cross_continuous_segments", ".", "append", "(", "[", "i", ",", "i", "+", "1", "]", ")", "\n", "\n", "", "", "", "continuous_segments", "=", "no_cross_continuous_segments", "\n", "print", "(", "continuous_segments", ")", "\n", "\n", "# init_points = np.hstack(", "\n", "#     (of_analyser.data[:, 194:232],", "\n", "#      of_analyser.data[:, 236:274])", "\n", "# )", "\n", "init_points", "=", "of_analyser", ".", "data", "[", ":", ",", "194", ":", "232", "]", "\n", "\n", "participant_id", "=", "self", ".", "participant_id", "\n", "session_id", "=", "self", ".", "session_id", "\n", "\n", "for", "hand", "in", "[", "'left'", ",", "'right'", "]", ":", "\n", "            ", "if", "hand", "==", "'left'", ":", "\n", "                ", "init_points", "=", "of_analyser", ".", "data", "[", ":", ",", "194", ":", "232", "]", "\n", "", "else", ":", "\n", "                ", "init_points", "=", "of_analyser", ".", "data", "[", ":", ",", "236", ":", "274", "]", "\n", "\n", "\n", "", "for", "segment", "in", "continuous_segments", ":", "\n", "                ", "starting", "=", "int", "(", "segment", "[", "0", "]", ")", "\n", "ending", "=", "int", "(", "segment", "[", "1", "]", ")", "\n", "max_length", "=", "ending", "-", "starting", "\n", "print", "(", "'-------->'", ",", "starting", ",", "ending", ")", "\n", "for", "i", "in", "range", "(", "math", ".", "floor", "(", "(", "max_length", "-", "window_size", ")", "/", "window_step", ")", "+", "2", ")", ":", "\n", "                    ", "sub_starting", ",", "sub_ending", "=", "i", "*", "window_step", ",", "i", "*", "window_step", "+", "window_size", "\n", "sub_starting", "+=", "starting", "\n", "sub_ending", "+=", "starting", "\n", "\n", "if", "sub_ending", ">", "ending", ":", "\n", "                        ", "sub_ending", "=", "ending", "\n", "\n", "", "if", "sub_ending", "-", "sub_starting", "<", "min_size", ":", "\n", "                        ", "sub_starting", "=", "sub_ending", "-", "window_size", "\n", "\n", "if", "sub_starting", "<", "starting", ":", "\n", "# can't take at least one window", "\n", "                            ", "continue", "\n", "\n", "", "", "assert", "sub_ending", "-", "sub_starting", "<=", "window_size", ",", "'sub slice must == to window size!'", "\n", "\n", "print", "(", "'start slicing:'", ",", "sub_starting", ",", "sub_ending", ")", "\n", "\n", "new_file_name", "=", "'participant_video_{}_{}_<{}_{}>_{}.npy'", ".", "format", "(", "\n", "participant_id", ",", "session_id", ",", "sub_starting", ",", "sub_ending", ",", "hand", "\n", ")", "\n", "\n", "# run optical flow instance", "\n", "optical_flow_data", "=", "of_analyser", ".", "run_optical_flow", "(", "cap", ",", "starting_time", "=", "sub_starting", ",", "\n", "ending_time", "=", "sub_ending", ",", "init_points", "=", "init_points", ",", "\n", "visualise", "=", "False", ")", "\n", "\n", "result", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "sub_starting", ",", "sub_ending", ")", ":", "\n", "# print(optical_flow_data[i].reshape((1, -1)).shape)", "\n", "# print(i)", "\n", "                        ", "if", "i", "not", "in", "optical_flow_data", ":", "\n", "                            ", "print", "(", "'Error detected, closing segment.'", ")", "\n", "break", "\n", "", "result", ".", "append", "(", "optical_flow_data", "[", "i", "]", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", ")", "\n", "\n", "", "result_path", "=", "os", ".", "path", ".", "join", "(", "DATA_FOLDER", ",", "\n", "'hand_action_analysis_optical_flow'", ",", "\n", "new_file_name", "\n", ")", "\n", "\n", "result_array", "=", "np", ".", "zeros", "(", "(", "len", "(", "result", ")", ",", "19", "*", "2", ")", ")", "\n", "for", "index", ",", "frame_data", "in", "enumerate", "(", "result", ")", ":", "\n", "                        ", "result_array", "[", "index", ",", ":", "frame_data", ".", "shape", "[", "1", "]", "]", "=", "frame_data", "\n", "result_array", "[", "index", ",", "frame_data", ".", "shape", "[", "1", "]", ":", "]", "=", "result_array", "[", "index", "-", "1", ",", "frame_data", ".", "shape", "[", "1", "]", ":", "]", "\n", "# print(result_array)", "\n", "", "result", "=", "result_array", "\n", "# result = result.reshape((result.shape[0], result.shape[2]))", "\n", "\n", "create_dirs", "(", "[", "os", ".", "path", ".", "split", "(", "result_path", ")", "[", "0", "]", "]", ")", "\n", "\n", "np", ".", "save", "(", "result_path", ",", "result", ")", "\n", "# FFT, STD, MEAN = self.analyse_sequence_new(self.get_first_derivative(result))", "\n", "# print(np.mean(FFT, axis=0))", "\n", "# print(np.mean(STD))", "\n", "# print(np.mean(MEAN))", "\n", "#", "\n", "# input()", "\n", "\n", "", "", "", "cap", ".", "release", "(", ")", "\n", "cv2", ".", "destroyAllWindows", "(", ")", "\n", "\n", "print", "(", "'saving completed.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.src.main.MainPipeline.generate_hand_slice_from_label": [[504, 623], ["component.hand_cross_analyser.HandCrossAnalyser", "component.hand_cross_analyser.HandCrossAnalyser.compute_stationary_rectangles", "print", "cv2.VideoCapture", "component.optical_flow_analyser.OpticalFlowAnalyser", "print", "cv2.VideoCapture.release", "cv2.destroyAllWindows", "print", "range", "len", "no_cross_continuous_segments.append", "int", "int", "print", "range", "hand_cross_intersect_data.keys", "no_cross_continuous_segments.append", "print", "component.optical_flow_analyser.OpticalFlowAnalyser.run_optical_flow", "range", "os.path.join", "numpy.zeros", "enumerate", "utility.dirs.create_dirs", "numpy.save", "math.floor", "result.append", "print", "optical_flow_data[].reshape", "len", "os.path.split"], "methods", ["home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.hand_cross_analyser.HandCrossAnalyser.compute_stationary_rectangles", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.optical_flow_analyser.OpticalFlowAnalyser.run_optical_flow", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.dirs.create_dirs"], ["", "def", "generate_hand_slice_from_label", "(", "self", ")", ":", "\n", "        ", "'''\n        generate hand cross slices from label TODO\n        :return:\n        '''", "\n", "# label_data = main_pipeline.read_labels(main_pipeline.label_files[1])", "\n", "# left_hand_on_hand = label_data['left_hand_on_hand']", "\n", "# continuous_segments = self.transfer_to_segments(left_hand_on_hand, min_length=20, cutoff=0)", "\n", "# print(continuous_segments)", "\n", "\n", "instance_hand_cross_analyser", "=", "HandCrossAnalyser", "(", "self", ".", "name", ",", "self", ".", "path_data", ")", "\n", "continuous_segments", ",", "hand_cross_intersect_data", "=", "instance_hand_cross_analyser", ".", "compute_stationary_rectangles", "(", "min_length", "=", "20", ",", "cutoff", "=", "0", ")", "\n", "print", "(", "continuous_segments", ")", "\n", "\n", "window_size", "=", "100", "\n", "window_step", "=", "50", "\n", "min_size", "=", "100", "\n", "\n", "\n", "cap", "=", "cv2", ".", "VideoCapture", "(", "self", ".", "video_path", ")", "\n", "of_analyser", "=", "OpticalFlowAnalyser", "(", "'test'", ",", "self", ".", "path_data", ")", "\n", "\n", "no_cross_continuous_segments", "=", "[", "]", "\n", "no_cross_list", "=", "[", "i", "for", "i", "in", "range", "(", "of_analyser", ".", "data", ".", "shape", "[", "0", "]", ")", "if", "i", "not", "in", "hand_cross_intersect_data", ".", "keys", "(", ")", "]", "\n", "for", "i", "in", "no_cross_list", ":", "\n", "            ", "if", "len", "(", "no_cross_continuous_segments", ")", "==", "0", ":", "\n", "                ", "no_cross_continuous_segments", ".", "append", "(", "[", "i", ",", "i", "+", "1", "]", ")", "\n", "", "else", ":", "\n", "                ", "if", "no_cross_continuous_segments", "[", "-", "1", "]", "[", "1", "]", "==", "i", ":", "\n", "                    ", "no_cross_continuous_segments", "[", "-", "1", "]", "[", "1", "]", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "no_cross_continuous_segments", ".", "append", "(", "[", "i", ",", "i", "+", "1", "]", ")", "\n", "\n", "", "", "", "continuous_segments", "=", "no_cross_continuous_segments", "\n", "print", "(", "continuous_segments", ")", "\n", "\n", "# init_points = np.hstack(", "\n", "#     (of_analyser.data[:, 194:232],", "\n", "#      of_analyser.data[:, 236:274])", "\n", "# )", "\n", "\n", "participant_id", "=", "self", ".", "participant_id", "\n", "session_id", "=", "self", ".", "session_id", "\n", "\n", "for", "hand", "in", "[", "'left'", ",", "'right'", "]", ":", "\n", "            ", "if", "hand", "==", "'left'", ":", "\n", "                ", "init_points", "=", "of_analyser", ".", "data", "[", ":", ",", "194", ":", "232", "]", "\n", "", "else", ":", "\n", "                ", "init_points", "=", "of_analyser", ".", "data", "[", ":", ",", "236", ":", "274", "]", "\n", "\n", "\n", "", "for", "segment", "in", "continuous_segments", ":", "\n", "                ", "starting", "=", "int", "(", "segment", "[", "0", "]", ")", "\n", "ending", "=", "int", "(", "segment", "[", "1", "]", ")", "\n", "max_length", "=", "ending", "-", "starting", "\n", "print", "(", "'-------->'", ",", "starting", ",", "ending", ")", "\n", "for", "i", "in", "range", "(", "math", ".", "floor", "(", "(", "max_length", "-", "window_size", ")", "/", "window_step", ")", "+", "2", ")", ":", "\n", "                    ", "sub_starting", ",", "sub_ending", "=", "i", "*", "window_step", ",", "i", "*", "window_step", "+", "window_size", "\n", "sub_starting", "+=", "starting", "\n", "sub_ending", "+=", "starting", "\n", "\n", "if", "sub_ending", ">", "ending", ":", "\n", "                        ", "sub_ending", "=", "ending", "\n", "\n", "", "if", "sub_ending", "-", "sub_starting", "<", "min_size", ":", "\n", "                        ", "sub_starting", "=", "sub_ending", "-", "window_size", "\n", "\n", "if", "sub_starting", "<", "starting", ":", "\n", "# can't take at least one window", "\n", "                            ", "continue", "\n", "\n", "", "", "assert", "sub_ending", "-", "sub_starting", "<=", "window_size", ",", "'sub slice must == to window size!'", "\n", "\n", "print", "(", "'start slicing:'", ",", "sub_starting", ",", "sub_ending", ")", "\n", "\n", "new_file_name", "=", "'participant_video_{}_{}_<{}_{}>_{}.npy'", ".", "format", "(", "\n", "participant_id", ",", "session_id", ",", "sub_starting", ",", "sub_ending", ",", "hand", "\n", ")", "\n", "\n", "# run optical flow instance", "\n", "optical_flow_data", "=", "of_analyser", ".", "run_optical_flow", "(", "cap", ",", "starting_time", "=", "sub_starting", ",", "\n", "ending_time", "=", "sub_ending", ",", "init_points", "=", "init_points", ",", "\n", "visualise", "=", "False", ")", "\n", "\n", "result", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "sub_starting", ",", "sub_ending", ")", ":", "\n", "# print(optical_flow_data[i].reshape((1, -1)).shape)", "\n", "# print(i)", "\n", "                        ", "if", "i", "not", "in", "optical_flow_data", ":", "\n", "                            ", "print", "(", "'Error detected, closing segment.'", ")", "\n", "break", "\n", "", "result", ".", "append", "(", "optical_flow_data", "[", "i", "]", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", ")", "\n", "\n", "", "result_path", "=", "os", ".", "path", ".", "join", "(", "DATA_FOLDER", ",", "\n", "'hand_action_analysis_optical_flow_label'", ",", "\n", "new_file_name", "\n", ")", "\n", "\n", "result_array", "=", "np", ".", "zeros", "(", "(", "len", "(", "result", ")", ",", "19", "*", "2", ")", ")", "\n", "for", "index", ",", "frame_data", "in", "enumerate", "(", "result", ")", ":", "\n", "                        ", "result_array", "[", "index", ",", ":", "frame_data", ".", "shape", "[", "1", "]", "]", "=", "frame_data", "\n", "result_array", "[", "index", ",", "frame_data", ".", "shape", "[", "1", "]", ":", "]", "=", "result_array", "[", "index", "-", "1", ",", "frame_data", ".", "shape", "[", "1", "]", ":", "]", "\n", "# print(result_array)", "\n", "", "result", "=", "result_array", "\n", "# result = result.reshape((result.shape[0], result.shape[2]))", "\n", "create_dirs", "(", "[", "os", ".", "path", ".", "split", "(", "result_path", ")", "[", "0", "]", "]", ")", "\n", "np", ".", "save", "(", "result_path", ",", "result", ")", "\n", "# FFT, STD, MEAN = self.analyse_sequence_new(self.get_first_derivative(result))", "\n", "# print(np.mean(FFT, axis=0))", "\n", "# print(np.mean(STD))", "\n", "# print(np.mean(MEAN))", "\n", "#", "\n", "# input()", "\n", "\n", "", "", "", "cap", ".", "release", "(", ")", "\n", "cv2", ".", "destroyAllWindows", "(", ")", "\n", "\n", "print", "(", "'saving completed.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.src.main.MainPipeline.hand_fidgeting_training_DNN": [[625, 705], ["os.walk", "data.keys", "print", "numpy.array", "print", "sklearn.model_selection.train_test_split", "sklearn.model_selection.train_test_split", "main.MainPipeline.hand_fidgeting_training_DNN.reshape_after_division"], "methods", ["None"], ["", "def", "hand_fidgeting_training_DNN", "(", "self", ")", ":", "\n", "        ", "from", "sklearn", ".", "model_selection", "import", "train_test_split", "\n", "\n", "data", "=", "{", "}", "\n", "for", "root", ",", "dirs", ",", "files", "in", "os", ".", "walk", "(", "os", ".", "path", ".", "join", "(", "DATA_FOLDER", ",", "'hand_action_analysis_optical_flow_label'", ")", ")", ":", "\n", "            ", "for", "file", "in", "files", ":", "\n", "                ", "if", "'.npy'", "in", "file", ":", "\n", "                    ", "data", "[", "file", "]", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "root", ",", "file", ")", ")", "\n", "\n", "", "", "", "X", "=", "[", "]", "\n", "y", "=", "[", "]", "\n", "\n", "label_data_collection", "=", "{", "}", "\n", "\n", "for", "file_name", "in", "data", ".", "keys", "(", ")", ":", "\n", "            ", "participant_id", ",", "session_id", ",", "starting", ",", "ending", "=", "decompose_string", "(", "file_name", ")", "\n", "sub_data", "=", "data", "[", "file_name", "]", "\n", "\n", "label_file_path", "=", "os", ".", "path", ".", "join", "(", "DATA_FOLDER", ",", "'hand_action_analysis_optical_flow_label'", ",", "\n", "file_name", ".", "replace", "(", "'.npy'", ",", "'.label1'", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "label_file_path", ")", ":", "\n", "                ", "continue", "\n", "\n", "", "with", "open", "(", "label_file_path", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "label", "=", "f", ".", "read", "(", ")", "\n", "\n", "", "label", "=", "int", "(", "label", ")", "\n", "if", "label", "==", "2", ":", "\n", "                ", "label", "=", "1", "\n", "", "if", "label", "==", "-", "1", ":", "\n", "                ", "continue", "\n", "\n", "", "FFT", ",", "STD", ",", "MEAN", "=", "self", ".", "analyse_sequence_new", "(", "self", ".", "get_first_derivative", "(", "sub_data", ")", ")", "\n", "FFT", "=", "np", ".", "mean", "(", "FFT", ",", "axis", "=", "1", ")", "\n", "STD", "=", "STD", "# np.mean(STD)", "\n", "MEAN", "=", "MEAN", "# np.mean(MEAN, axis=0)", "\n", "\n", "# ratio = np.count_nonzero(label_hand_cross_dynamic_rhythmic[starting:ending, :]) / (ending - starting)", "\n", "# if ratio >= 0.8:", "\n", "#     y.append(1)", "\n", "# else:", "\n", "#     y.append(0)", "\n", "y", ".", "append", "(", "label", ")", "\n", "single_x", "=", "np", ".", "hstack", "(", "\n", "(", "FFT", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", ",", "STD", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", ",", "MEAN", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", ")", "\n", ")", "\n", "X", ".", "append", "(", "\n", "single_x", "\n", ")", "\n", "print", "(", "file_name", ")", "\n", "\n", "", "print", "(", "y", ")", "\n", "X", "=", "np", ".", "array", "(", "X", ")", "\n", "print", "(", "X", ".", "shape", ")", "\n", "\n", "# divide partition", "\n", "\n", "X_train", ",", "X_test", ",", "y_train", ",", "y_test", "=", "train_test_split", "(", "X", ",", "y", ",", "test_size", "=", "0.2", ")", "\n", "X_train", ",", "X_dev", ",", "y_train", ",", "y_dev", "=", "train_test_split", "(", "X_train", ",", "y_train", ",", "test_size", "=", "0.25", ")", "\n", "\n", "def", "reshape_after_division", "(", "X", ")", ":", "\n", "            ", "return", "X", ".", "reshape", "(", "(", "X", ".", "shape", "[", "0", "]", ",", "X", ".", "shape", "[", "2", "]", ")", ")", "\n", "\n", "", "X_train", "=", "reshape_after_division", "(", "X_train", ")", "\n", "X_dev", "=", "reshape_after_division", "(", "X_dev", ")", "\n", "X_test", "=", "reshape_after_division", "(", "X_test", ")", "\n", "\n", "dnn", "=", "Fidgeting_DNN", "(", "input_dim", "=", "[", "41", ",", "76", ",", "76", "]", ",", "num_classes", "=", "2", ")", "\n", "dnn", ".", "build_multi_class_model", "(", ")", "\n", "\n", "dnn", ".", "train_multi_class_model", "(", "X_train", ",", "\n", "y_train", ",", "\n", "X_dev", ",", "\n", "y_dev", ",", "class_weight", "=", "{", "0", ":", "1", ",", "1", ":", "1.3", "}", ")", "\n", "dnn", ".", "evaluate_multi_class", "(", "X_train", ",", "y_train", ")", "\n", "dnn", ".", "evaluate_multi_class", "(", "X_dev", ",", "y_dev", ")", "\n", "dnn", ".", "evaluate_multi_class", "(", "X_test", ",", "y_test", ")", "\n", "\n", "dnn", ".", "save_model", "(", "\n", "os", ".", "path", ".", "join", "(", "DATA_FOLDER", ",", "'pre-trained'", ",", "'hierarchical_DNN.h5'", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.src.main.MainPipeline.hand_fidgeting_training_cross_validation": [[713, 822], ["os.walk", "data.keys", "print", "numpy.array", "print", "sklearn.model_selection.KFold", "sklearn.model_selection.KFold.split", "X.reshape", "os.path.join", "print", "utility.decompose_string.decompose_string", "all_data.setdefault", "os.path.join", "os.path.join", "print", "int", "main.MainPipeline.analyse_sequence_new", "numpy.mean", "[].append", "numpy.hstack", "[].append", "all_data.keys", "list", "print", "list", "list", "print", "print", "numpy.array", "numpy.array", "main.MainPipeline.hand_fidgeting_training_DNN.reshape_after_division"], "methods", ["home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.decompose_string.decompose_string", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.basic_processor.BasicProcessor.analyse_sequence_new"], ["", "def", "hand_fidgeting_training_cross_validation", "(", "self", ")", ":", "\n", "        ", "from", "sklearn", ".", "model_selection", "import", "train_test_split", "\n", "def", "reshape_after_division", "(", "X", ")", ":", "\n", "            ", "return", "X", ".", "reshape", "(", "(", "X", ".", "shape", "[", "0", "]", ",", "X", ".", "shape", "[", "2", "]", ")", ")", "\n", "\n", "", "data", "=", "{", "}", "\n", "for", "root", ",", "dirs", ",", "files", "in", "os", ".", "walk", "(", "os", ".", "path", ".", "join", "(", "DATA_FOLDER", ",", "'hand_cross_analysis_optical_flow_label'", ")", ")", ":", "\n", "            ", "for", "file", "in", "files", ":", "\n", "                ", "if", "'.npy'", "in", "file", ":", "\n", "                    ", "data", "[", "file", "]", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "root", ",", "file", ")", ")", "\n", "\n", "", "", "", "X", "=", "[", "]", "\n", "y", "=", "[", "]", "\n", "\n", "all_data", "=", "{", "}", "\n", "\n", "label_data_collection", "=", "{", "}", "\n", "\n", "for", "file_name", "in", "data", ".", "keys", "(", ")", ":", "\n", "            ", "print", "(", "file_name", ")", "\n", "participant_id", ",", "session_id", ",", "starting", ",", "ending", "=", "decompose_string", "(", "file_name", ")", "\n", "all_data", ".", "setdefault", "(", "participant_id", ",", "{", "'data_list'", ":", "[", "]", ",", "'label_list'", ":", "[", "]", "}", ")", "\n", "sub_data", "=", "data", "[", "file_name", "]", "\n", "\n", "label_file_path", "=", "os", ".", "path", ".", "join", "(", "DATA_FOLDER", ",", "'hand_cross_analysis_optical_flow_label'", ",", "\n", "file_name", ".", "replace", "(", "'.npy'", ",", "'.label1'", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "label_file_path", ")", ":", "\n", "                ", "continue", "\n", "", "else", ":", "\n", "                ", "with", "open", "(", "label_file_path", ",", "'r'", ")", "as", "f", ":", "\n", "                    ", "label1", "=", "f", ".", "read", "(", ")", "\n", "\n", "", "", "label_file_path", "=", "os", ".", "path", ".", "join", "(", "DATA_FOLDER", ",", "'hand_cross_analysis_optical_flow_label'", ",", "\n", "file_name", ".", "replace", "(", "'.npy'", ",", "'.label2'", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "label_file_path", ")", ":", "\n", "                ", "label2", "=", "label1", "\n", "", "else", ":", "\n", "                ", "with", "open", "(", "label_file_path", ",", "'r'", ")", "as", "f", ":", "\n", "                    ", "label2", "=", "f", ".", "read", "(", ")", "\n", "\n", "", "", "if", "label1", "!=", "label2", ":", "\n", "                ", "print", "(", "'drop due to disagreement'", ")", "\n", "continue", "\n", "\n", "", "print", "(", "label1", ",", "label2", ")", "\n", "\n", "label", "=", "int", "(", "label1", ")", "\n", "if", "label", "==", "2", ":", "\n", "                ", "label", "=", "1", "\n", "", "if", "label", "==", "-", "1", ":", "\n", "                ", "continue", "\n", "\n", "", "FFT", ",", "STD", ",", "MEAN", "=", "self", ".", "analyse_sequence_new", "(", "self", ".", "get_first_derivative", "(", "sub_data", ")", ")", "\n", "FFT", "=", "np", ".", "mean", "(", "FFT", ",", "axis", "=", "1", ")", "\n", "STD", "=", "STD", "# np.mean(STD)", "\n", "MEAN", "=", "MEAN", "# np.mean(MEAN, axis=0)", "\n", "\n", "all_data", "[", "participant_id", "]", "[", "'label_list'", "]", ".", "append", "(", "label", ")", "\n", "single_x", "=", "np", ".", "hstack", "(", "\n", "(", "FFT", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", ",", "STD", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", ",", "MEAN", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", ")", "\n", ")", "\n", "all_data", "[", "participant_id", "]", "[", "'data_list'", "]", ".", "append", "(", "\n", "single_x", "\n", ")", "\n", "\n", "", "print", "(", "all_data", ".", "keys", "(", ")", ")", "\n", "id_list", "=", "np", ".", "array", "(", "list", "(", "all_data", ".", "keys", "(", ")", ")", ")", "\n", "print", "(", "id_list", ")", "\n", "kf", "=", "KFold", "(", "n_splits", "=", "5", ")", "\n", "reports", "=", "[", "]", "\n", "for", "train_index", ",", "test_index", "in", "kf", ".", "split", "(", "id_list", ")", ":", "\n", "            ", "train_id_list", "=", "id_list", "[", "train_index", "]", "\n", "test_id_list", "=", "id_list", "[", "test_index", "]", "\n", "print", "(", "train_id_list", ",", "test_id_list", ")", "\n", "\n", "X_train", "=", "[", "]", "\n", "y_train", "=", "[", "]", "\n", "X_test", "=", "[", "]", "\n", "y_test", "=", "[", "]", "\n", "for", "id", "in", "list", "(", "train_id_list", ")", ":", "\n", "                ", "X_train", "+=", "all_data", "[", "id", "]", "[", "'data_list'", "]", "\n", "y_train", "+=", "all_data", "[", "id", "]", "[", "'label_list'", "]", "\n", "\n", "", "for", "id", "in", "list", "(", "test_id_list", ")", ":", "\n", "                ", "X_test", "+=", "all_data", "[", "id", "]", "[", "'data_list'", "]", "\n", "y_test", "+=", "all_data", "[", "id", "]", "[", "'label_list'", "]", "\n", "\n", "", "print", "(", "len", "(", "X_train", ")", ",", "len", "(", "y_train", ")", ")", "\n", "print", "(", "len", "(", "X_test", ")", ",", "len", "(", "y_test", ")", ")", "\n", "\n", "X_train", "=", "np", ".", "array", "(", "X_train", ")", "\n", "X_test", "=", "np", ".", "array", "(", "X_test", ")", "\n", "X_train", "=", "reshape_after_division", "(", "X_train", ")", "\n", "X_test", "=", "reshape_after_division", "(", "X_test", ")", "\n", "\n", "from", "sklearn", ".", "utils", ".", "class_weight", "import", "compute_class_weight", "\n", "class_weights", "=", "compute_class_weight", "(", "'balanced'", ",", "[", "0", ",", "1", "]", ",", "y_train", ")", "\n", "\n", "dnn", "=", "Fidgeting_DNN", "(", "input_dim", "=", "[", "41", ",", "76", ",", "76", "]", ",", "num_classes", "=", "2", ")", "\n", "dnn", ".", "build_multi_class_model", "(", ")", "\n", "print", "(", "'class_weights:'", ",", "class_weights", ")", "\n", "dnn", ".", "train_multi_class_model", "(", "X_train", ",", "\n", "y_train", ",", "\n", "X_test", ",", "\n", "y_test", ",", "\n", "class_weight", "=", "class_weights", ")", "\n", "dnn", ".", "evaluate_multi_class", "(", "X_train", ",", "y_train", ")", "\n", "reports", ".", "append", "(", "dnn", ".", "evaluate_multi_class", "(", "X_test", ",", "y_test", ")", ")", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.src.main.MainPipeline.single_hand_fidgeting_training_DNN": [[837, 919], ["os.walk", "data.keys", "print", "numpy.array", "print", "sklearn.model_selection.train_test_split", "sklearn.model_selection.train_test_split", "main.MainPipeline.hand_fidgeting_training_DNN.reshape_after_division"], "methods", ["None"], ["", "def", "single_hand_fidgeting_training_DNN", "(", "self", ")", ":", "\n", "        ", "from", "sklearn", ".", "model_selection", "import", "train_test_split", "\n", "\n", "data", "=", "{", "}", "\n", "for", "root", ",", "dirs", ",", "files", "in", "os", ".", "walk", "(", "os", ".", "path", ".", "join", "(", "DATA_FOLDER", ",", "'hand_action_analysis_optical_flow_label'", ")", ")", ":", "\n", "            ", "for", "file", "in", "files", ":", "\n", "                ", "if", "'.npy'", "in", "file", ":", "\n", "                    ", "data", "[", "file", "]", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "root", ",", "file", ")", ")", "\n", "\n", "", "", "", "X", "=", "[", "]", "\n", "y", "=", "[", "]", "\n", "\n", "label_data_collection", "=", "{", "}", "\n", "\n", "for", "file_name", "in", "data", ".", "keys", "(", ")", ":", "\n", "            ", "participant_id", ",", "session_id", ",", "starting", ",", "ending", "=", "decompose_string", "(", "file_name", ")", "\n", "sub_data", "=", "data", "[", "file_name", "]", "\n", "\n", "label_file_path", "=", "os", ".", "path", ".", "join", "(", "DATA_FOLDER", ",", "'hand_action_analysis_optical_flow_label'", ",", "\n", "file_name", ".", "replace", "(", "'.npy'", ",", "'.label1'", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "label_file_path", ")", ":", "\n", "                ", "continue", "\n", "\n", "", "print", "(", "file_name", ")", "\n", "\n", "with", "open", "(", "label_file_path", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "label", "=", "f", ".", "read", "(", ")", "\n", "\n", "", "label", "=", "int", "(", "label", ")", "\n", "if", "label", "==", "2", ":", "\n", "                ", "label", "=", "1", "\n", "", "if", "label", "==", "-", "1", ":", "\n", "                ", "continue", "\n", "\n", "", "FFT", ",", "STD", ",", "MEAN", "=", "self", ".", "analyse_sequence_new", "(", "self", ".", "get_first_derivative", "(", "sub_data", ")", ")", "\n", "FFT", "=", "np", ".", "mean", "(", "FFT", ",", "axis", "=", "1", ")", "\n", "STD", "=", "STD", "# np.mean(STD)", "\n", "MEAN", "=", "MEAN", "# np.mean(MEAN, axis=0)", "\n", "\n", "# ratio = np.count_nonzero(label_hand_cross_dynamic_rhythmic[starting:ending, :]) / (ending - starting)", "\n", "# if ratio >= 0.8:", "\n", "#     y.append(1)", "\n", "# else:", "\n", "#     y.append(0)", "\n", "y", ".", "append", "(", "label", ")", "\n", "single_x", "=", "np", ".", "hstack", "(", "\n", "(", "FFT", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", ",", "STD", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", ",", "MEAN", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", ")", "\n", ")", "\n", "X", ".", "append", "(", "\n", "single_x", "\n", ")", "\n", "\n", "\n", "", "print", "(", "y", ")", "\n", "X", "=", "np", ".", "array", "(", "X", ")", "\n", "print", "(", "X", ".", "shape", ")", "\n", "\n", "# divide partition", "\n", "\n", "X_train", ",", "X_test", ",", "y_train", ",", "y_test", "=", "train_test_split", "(", "X", ",", "y", ",", "test_size", "=", "0.2", ")", "\n", "X_train", ",", "X_dev", ",", "y_train", ",", "y_dev", "=", "train_test_split", "(", "X_train", ",", "y_train", ",", "test_size", "=", "0.25", ")", "\n", "\n", "def", "reshape_after_division", "(", "X", ")", ":", "\n", "            ", "return", "X", ".", "reshape", "(", "(", "X", ".", "shape", "[", "0", "]", ",", "X", ".", "shape", "[", "2", "]", ")", ")", "\n", "\n", "", "X_train", "=", "reshape_after_division", "(", "X_train", ")", "\n", "X_dev", "=", "reshape_after_division", "(", "X_dev", ")", "\n", "X_test", "=", "reshape_after_division", "(", "X_test", ")", "\n", "\n", "dnn", "=", "Fidgeting_DNN", "(", "input_dim", "=", "[", "41", ",", "38", ",", "38", "]", ",", "num_classes", "=", "2", ")", "\n", "dnn", ".", "build_multi_class_model", "(", ")", "\n", "\n", "dnn", ".", "train_multi_class_model", "(", "X_train", ",", "\n", "y_train", ",", "\n", "X_dev", ",", "\n", "y_dev", ",", "class_weight", "=", "{", "0", ":", "1", ",", "1", ":", "1.1", "}", ")", "\n", "dnn", ".", "evaluate_multi_class", "(", "X_train", ",", "y_train", ")", "\n", "dnn", ".", "evaluate_multi_class", "(", "X_dev", ",", "y_dev", ")", "\n", "dnn", ".", "evaluate_multi_class", "(", "X_test", ",", "y_test", ")", "\n", "\n", "dnn", ".", "save_model", "(", "\n", "os", ".", "path", ".", "join", "(", "DATA_FOLDER", ",", "'pre-trained'", ",", "'hierarchical_DNN_hand.h5'", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.src.main.MainPipeline.foot_fidgeting_training": [[927, 1000], ["os.walk", "data.keys", "print", "numpy.array", "X.reshape.reshape.reshape", "print", "sklearn.model_selection.train_test_split", "sklearn.model_selection.train_test_split", "model.fidgeting_dnn.Fidgeting_DNN", "model.fidgeting_dnn.Fidgeting_DNN.build_multi_class_model", "model.fidgeting_dnn.Fidgeting_DNN.train_multi_class_model", "model.fidgeting_dnn.Fidgeting_DNN.evaluate_multi_class", "model.fidgeting_dnn.Fidgeting_DNN.evaluate_multi_class", "model.fidgeting_dnn.Fidgeting_DNN.evaluate_multi_class", "model.fidgeting_dnn.Fidgeting_DNN.save_model", "os.path.join", "utility.decompose_string.decompose_string", "os.path.join", "main.MainPipeline.analyse_sequence_new", "numpy.mean", "X.reshape.reshape.reshape", "os.path.join", "file_name.replace", "os.path.exists", "open", "f.read", "main.MainPipeline.get_first_derivative", "y.append", "numpy.hstack", "X.reshape.reshape.append", "numpy.load", "os.path.join", "numpy.mean.reshape", "STD.reshape", "MEAN.reshape"], "methods", ["home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.model.fidgeting_dnn.Fidgeting_DNN.build_multi_class_model", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.model.fidgeting_dnn.Fidgeting_DNN.train_multi_class_model", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.model.fidgeting_dnn.Fidgeting_DNN.evaluate_multi_class", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.model.fidgeting_dnn.Fidgeting_DNN.evaluate_multi_class", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.model.fidgeting_dnn.Fidgeting_DNN.evaluate_multi_class", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.model.fidgeting_dnn.Fidgeting_DNN.save_model", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.decompose_string.decompose_string", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.basic_processor.BasicProcessor.analyse_sequence_new", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.elan_portal.ElanPortal.read", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.basic_processor.BasicProcessor.get_first_derivative"], ["", "def", "foot_fidgeting_training", "(", "self", ")", ":", "\n", "        ", "from", "sklearn", ".", "model_selection", "import", "train_test_split", "\n", "\n", "data", "=", "{", "}", "\n", "for", "root", ",", "dirs", ",", "files", "in", "os", ".", "walk", "(", "os", ".", "path", ".", "join", "(", "DATA_FOLDER", ",", "'leg_action_analysis_optical_flow_label'", ")", ")", ":", "\n", "            ", "for", "file", "in", "files", ":", "\n", "                ", "if", "'.npy'", "in", "file", ":", "\n", "                    ", "data", "[", "file", "]", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "root", ",", "file", ")", ")", "\n", "\n", "", "", "", "X", "=", "[", "]", "\n", "y", "=", "[", "]", "\n", "\n", "label_data_collection", "=", "{", "}", "\n", "\n", "for", "file_name", "in", "data", ".", "keys", "(", ")", ":", "\n", "            ", "participant_id", ",", "session_id", ",", "starting", ",", "ending", "=", "decompose_string", "(", "file_name", ")", "\n", "sub_data", "=", "data", "[", "file_name", "]", "\n", "label_file_path", "=", "os", ".", "path", ".", "join", "(", "DATA_FOLDER", ",", "'leg_action_analysis_optical_flow_label'", ",", "\n", "file_name", ".", "replace", "(", "'.npy'", ",", "'.label1'", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "label_file_path", ")", ":", "\n", "                ", "continue", "\n", "", "with", "open", "(", "label_file_path", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "label", "=", "f", ".", "read", "(", ")", "\n", "# print(sub_data.shape)", "\n", "", "key_name", "=", "'{}_{}'", ".", "format", "(", "participant_id", ",", "session_id", ")", "\n", "\n", "FFT", ",", "STD", ",", "MEAN", "=", "self", ".", "analyse_sequence_new", "(", "self", ".", "get_first_derivative", "(", "sub_data", ")", ")", "\n", "FFT", "=", "np", ".", "mean", "(", "FFT", ",", "axis", "=", "1", ")", "\n", "STD", "=", "STD", "# np.mean(STD)", "\n", "MEAN", "=", "MEAN", "# np.mean(MEAN, axis=0)", "\n", "if", "label", "!=", "'-1'", ":", "\n", "                ", "y", ".", "append", "(", "label", ")", "\n", "single_x", "=", "np", ".", "hstack", "(", "\n", "(", "FFT", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", ",", "STD", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", ",", "MEAN", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", ")", "\n", ")", "\n", "\n", "X", ".", "append", "(", "\n", "single_x", "\n", ")", "\n", "\n", "", "", "print", "(", "y", ")", "\n", "return", "\n", "\n", "# print(X)", "\n", "X", "=", "np", ".", "array", "(", "X", ")", "\n", "X", "=", "X", ".", "reshape", "(", "(", "X", ".", "shape", "[", "0", "]", ",", "X", ".", "shape", "[", "2", "]", ")", ")", "\n", "print", "(", "X", ".", "shape", ")", "\n", "\n", "# divide partition", "\n", "\n", "X_train", ",", "X_test", ",", "y_train", ",", "y_test", "=", "train_test_split", "(", "X", ",", "y", ",", "test_size", "=", "0.2", ")", "\n", "X_train", ",", "X_dev", ",", "y_train", ",", "y_dev", "=", "train_test_split", "(", "X_train", ",", "y_train", ",", "test_size", "=", "0.25", ")", "\n", "\n", "def", "reshape_after_division", "(", "X", ")", ":", "\n", "            ", "return", "X", ".", "reshape", "(", "(", "X", ".", "shape", "[", "0", "]", ",", "X", ".", "shape", "[", "2", "]", ")", ")", "\n", "\n", "# X_train = reshape_after_division(X_train)", "\n", "# X_dev = reshape_after_division(X_dev)", "\n", "# X_test = reshape_after_division(X_test)", "\n", "\n", "", "dnn", "=", "Fidgeting_DNN", "(", "input_dim", "=", "[", "41", ",", "12", ",", "12", "]", ",", "num_classes", "=", "3", ")", "\n", "dnn", ".", "build_multi_class_model", "(", ")", "\n", "\n", "dnn", ".", "train_multi_class_model", "(", "X_train", ",", "\n", "y_train", ",", "\n", "X_dev", ",", "\n", "y_dev", ",", "class_weight", "=", "{", "0", ":", "1", ",", "1", ":", "3", ",", "2", ":", "3", "}", ")", "\n", "dnn", ".", "evaluate_multi_class", "(", "X_train", ",", "y_train", ")", "\n", "dnn", ".", "evaluate_multi_class", "(", "X_dev", ",", "y_dev", ")", "\n", "dnn", ".", "evaluate_multi_class", "(", "X_test", ",", "y_test", ")", "\n", "\n", "dnn", ".", "save_model", "(", "\n", "os", ".", "path", ".", "join", "(", "DATA_FOLDER", ",", "'pre-trained'", ",", "'hierarchical_DNN_leg.h5'", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.src.main.MainPipeline.show_demo": [[1018, 1489], ["cv2.VideoCapture", "numpy.load", "cv2.VideoCapture.get", "print", "int", "print", "component.hand_cross_analyser.HandCrossAnalyser", "component.hand_cross_analyser.HandCrossAnalyser.compute_stationary_rectangles", "print", "os.path.exists", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.array().reshape", "cv2.VideoCapture.set", "cv2.VideoCapture.release", "cv2.destroyAllWindows", "os.path.exists", "cv2.VideoCapture.get", "numpy.array", "numpy.hstack", "range", "numpy.load", "fused_data[].reshape", "fused_data[].reshape", "fused_data[].reshape", "fused_data[].reshape", "fused_data[].reshape", "fused_data[].reshape", "fused_data[].reshape", "fused_data[].reshape", "fused_data[].reshape", "fused_data[].reshape", "fused_data[].reshape", "json.load", "numpy.zeros", "json.load.keys", "print", "range", "print", "component.leg_location_analyser.LegLocationAnalyser", "component.leg_location_analyser.LegLocationAnalyser.compute_leg_intersection", "numpy.zeros", "leg_intersect_data.keys", "print", "component.hand_location_analyser.HandLocationAnalyser", "component.hand_location_analyser.HandLocationAnalyser.compute_hand_intersection", "main.MainPipeline.transfer_to_array", "main.MainPipeline.transfer_to_array", "main.MainPipeline.transfer_to_array", "print", "component.hand_location_analyser.HandLocationAnalyser", "component.hand_location_analyser.HandLocationAnalyser.compute_hand_intersection", "main.MainPipeline.transfer_to_array", "main.MainPipeline.transfer_to_array", "main.MainPipeline.transfer_to_array", "json.load", "print", "numpy.zeros", "json.load.keys", "print", "range", "json.load", "numpy.zeros", "json.load.keys", "print", "json.load", "numpy.full", "json.load.keys", "speaker_array.reshape.reshape.reshape", "json.load", "numpy.full", "numpy.array().reshape", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "numpy.hstack", "numpy.save", "input", "cv2.VideoWriter_fourcc", "cv2.VideoWriter", "print", "cv2.VideoCapture.read", "data[].reshape", "data[].reshape", "data[].reshape", "data[].reshape", "data[].reshape", "cv2.VideoWriter.release", "print", "open", "int", "int", "int", "open", "int", "int", "int", "open", "hand_action_label_data[].keys", "print", "range", "open", "int", "open", "math.floor", "min", "math.ceil", "min", "print", "numpy.array", "cv2.VideoCapture.get", "main.MainPipeline.paint_text", "main.MainPipeline.paint_text", "range", "main.MainPipeline.paint_text", "hand_cross_valid_intersect_data.keys", "cv2.rectangle", "cv2.VideoWriter.write", "cv2.imshow", "ord", "hand_cross_valid_intersect_data.keys", "os.path.join", "print", "math.floor", "len", "len", "os.path.join", "print", "math.floor", "len", "len", "os.path.join", "print", "int", "int", "int", "math.floor", "min", "math.ceil", "min", "numpy.array", "scipy.signal.savgol_filter", "int", "int", "int", "main.MainPipeline.paint_text", "main.MainPipeline.paint_point", "main.MainPipeline.paint_text", "main.MainPipeline.paint_text", "main.MainPipeline.paint_rectangle_to_points", "main.MainPipeline.paint_text", "main.MainPipeline.paint_rectangle_to_points", "main.MainPipeline.paint_text", "cv2.waitKey", "numpy.min", "numpy.max", "str", "segment.split", "segment.split", "range", "abs", "abs", "str", "segment.split", "segment.split", "range", "abs", "abs", "str", "math.floor", "len", "len", "scipy.signal.savgol_filter", "hand_action_label_array[].reshape", "hand_action_label_array[].reshape", "hand_action_label_array[].reshape", "hand_action_label_array[].reshape", "hand_action_label_array[].reshape", "hand_action_label_array[].reshape", "numpy.array().reshape.reshape().tolist", "cv2.VideoCapture.get", "cv2.VideoCapture.get", "main.MainPipeline.paint_text", "str", "int", "int", "label_centroid.keys", "str", "int", "int", "label_centroid.keys", "str", "segment.split", "segment.split", "range", "abs", "abs", "list", "str", "int", "int", "label_centroid.keys", "numpy.array().reshape.reshape", "numpy.array().reshape.reshape", "len", "json.load.keys"], "methods", ["home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.hand_cross_analyser.HandCrossAnalyser.compute_stationary_rectangles", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.leg_location_analyser.LegLocationAnalyser.compute_leg_intersection", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.hand_location_analyser.HandLocationAnalyser.compute_hand_intersection", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.basic_processor.BasicProcessor.transfer_to_array", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.basic_processor.BasicProcessor.transfer_to_array", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.basic_processor.BasicProcessor.transfer_to_array", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.hand_location_analyser.HandLocationAnalyser.compute_hand_intersection", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.basic_processor.BasicProcessor.transfer_to_array", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.basic_processor.BasicProcessor.transfer_to_array", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.basic_processor.BasicProcessor.transfer_to_array", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.elan_portal.ElanPortal.read", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.painting.paint_text", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.painting.paint_text", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.painting.paint_text", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.painting.paint_text", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.painting.paint_point", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.painting.paint_text", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.painting.paint_text", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.painting.paint_rectangle_to_points", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.painting.paint_text", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.painting.paint_rectangle_to_points", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.painting.paint_text", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.painting.paint_text"], ["def", "show_demo", "(", "self", ",", "play_starting", "=", "0", ",", "save_video", "=", "False", ")", ":", "\n", "        ", "'''\n        Show demo\n        :param starting: int\n        :param ending: int\n        :return:\n        '''", "\n", "if", "save_video", ":", "\n", "            ", "if", "os", ".", "path", ".", "exists", "(", "self", ".", "path_data", "[", "'generated_demo_video'", "]", ")", ":", "\n", "                ", "print", "(", "'video file exists, move on.'", ")", "\n", "return", "\n", "\n", "", "", "cap", "=", "cv2", ".", "VideoCapture", "(", "self", ".", "video_path", ")", "\n", "data", "=", "np", ".", "load", "(", "self", ".", "processed_file", ")", "\n", "fps", "=", "cap", ".", "get", "(", "cv2", ".", "CAP_PROP_FPS", ")", "\n", "print", "(", "'fps:'", ",", "fps", ")", "\n", "length", "=", "int", "(", "cap", ".", "get", "(", "cv2", ".", "CAP_PROP_FRAME_COUNT", ")", ")", "\n", "print", "(", "length", ")", "\n", "\n", "fused_data_path", "=", "self", ".", "path_data", "[", "'fused_data'", "]", "\n", "\n", "instance_hand_cross_analyser", "=", "HandCrossAnalyser", "(", "'test'", ",", "participant_data", "[", "participant_id", "]", "[", "session_id", "]", ")", "\n", "continuous_segments", ",", "hand_cross_valid_intersect_data", "=", "instance_hand_cross_analyser", ".", "compute_stationary_rectangles", "(", "\n", "cutoff", "=", "0", ",", "min_length", "=", "20", ")", "\n", "\n", "best_rects", "=", "{", "}", "\n", "for", "segment", "in", "continuous_segments", ":", "\n", "# find largest rectangle for each segment", "\n", "            ", "rects", "=", "[", "hand_cross_valid_intersect_data", "[", "i", "]", "for", "i", "in", "hand_cross_valid_intersect_data", ".", "keys", "(", ")", "\n", "if", "i", ">=", "segment", "[", "0", "]", "and", "i", "<", "segment", "[", "1", "]", "]", "\n", "rects", "=", "np", ".", "array", "(", "rects", ")", "\n", "best_rect", "=", "np", ".", "hstack", "(", "(", "np", ".", "min", "(", "rects", ",", "axis", "=", "0", ")", "[", ":", "2", "]", ",", "np", ".", "max", "(", "rects", ",", "axis", "=", "0", ")", "[", "2", ":", "]", ")", ")", "\n", "for", "i", "in", "range", "(", "segment", "[", "0", "]", ",", "segment", "[", "1", "]", ")", ":", "\n", "                ", "best_rects", "[", "i", "]", "=", "best_rect", "\n", "\n", "", "", "print", "(", "continuous_segments", ")", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "fused_data_path", ")", ":", "\n", "# Read fused data directly", "\n", "            ", "fused_data", "=", "np", ".", "load", "(", "fused_data_path", ")", "\n", "label_array", "=", "fused_data", "[", ":", ",", "0", "]", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "# H2H + fidgeting", "\n", "left_hand_arm_label_array", "=", "fused_data", "[", ":", ",", "1", "]", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "left_hand_leg_label_array", "=", "fused_data", "[", ":", ",", "2", "]", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "left_hand_face_label_array", "=", "fused_data", "[", ":", ",", "3", "]", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "right_hand_arm_label_array", "=", "fused_data", "[", ":", ",", "4", "]", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "right_hand_leg_label_array", "=", "fused_data", "[", ":", ",", "5", "]", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "right_hand_face_label_array", "=", "fused_data", "[", ":", ",", "6", "]", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "leg_location_label_array", "=", "fused_data", "[", ":", ",", "7", "]", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "leg_action_label_array", "=", "fused_data", "[", ":", ",", "8", "]", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "hand_action_label_array", "=", "fused_data", "[", ":", ",", "9", ":", "11", "]", "# shape (n, 2) NOTE!", "\n", "speaker_array", "=", "fused_data", "[", ":", ",", "11", "]", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "voice_array", "=", "fused_data", "[", ":", ",", "12", "]", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "\n", "", "else", ":", "\n", "# compute all necessary data", "\n", "# START!~~~", "\n", "\n", "############################", "\n", "# processing hand cross info", "\n", "            ", "hand_cross_label_data", "=", "json", ".", "load", "(", "open", "(", "\n", "os", ".", "path", ".", "join", "(", "DATA_FOLDER", ",", "'hand_cross_analysis_optical_flow'", ",", "'optical_flow_result.json'", ")", ",", "\n", "'r'", ")", ")", "\n", "try", ":", "\n", "                ", "hand_cross_label_data", "=", "hand_cross_label_data", "[", "str", "(", "self", ".", "participant_id", ")", "]", "[", "str", "(", "self", ".", "session_id", ")", "]", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "print", "(", "'no hands playing data...'", ")", "\n", "hand_cross_label_data", "=", "{", "}", "\n", "\n", "", "window_size", "=", "100", "\n", "window_step", "=", "50", "\n", "\n", "# generate label array", "\n", "label_array", "=", "np", ".", "zeros", "(", "(", "data", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "\n", "label_centroid", "=", "{", "}", "\n", "\n", "for", "segment", "in", "hand_cross_label_data", ".", "keys", "(", ")", ":", "\n", "                ", "starting", "=", "int", "(", "segment", ".", "split", "(", "','", ")", "[", "0", "]", ")", "\n", "ending", "=", "int", "(", "segment", ".", "split", "(", "','", ")", "[", "1", "]", ")", "\n", "centroid", "=", "int", "(", "math", ".", "floor", "(", "(", "starting", "+", "ending", ")", "/", "2", ")", ")", "\n", "# p = (centroid, hand_cross_label_data[segment][0], hand_cross_label_data[segment][1])", "\n", "label_centroid", "[", "centroid", "]", "=", "hand_cross_label_data", "[", "segment", "]", "\n", "\n", "# print(label_centroid)", "\n", "\n", "", "print", "(", "'preprocessing hand cross data'", ")", "\n", "for", "t", "in", "range", "(", "data", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "related_centroids", "=", "[", "(", "i", ",", "label_centroid", "[", "i", "]", ")", "\n", "for", "i", "in", "range", "(", "int", "(", "t", "-", "0.5", "*", "window_size", ")", ",", "int", "(", "t", "+", "0.5", "*", "window_size", ")", ")", "\n", "if", "i", "in", "label_centroid", ".", "keys", "(", ")", "]", "\n", "\n", "if", "len", "(", "related_centroids", ")", "==", "0", ":", "\n", "                    ", "continue", "\n", "", "if", "len", "(", "related_centroids", ")", "==", "1", ":", "\n", "                    ", "closest_centroid", "=", "related_centroids", "[", "0", "]", "\n", "", "else", ":", "\n", "                    ", "id_1", "=", "related_centroids", "[", "0", "]", "[", "0", "]", "\n", "id_2", "=", "related_centroids", "[", "1", "]", "[", "0", "]", "\n", "if", "abs", "(", "id_1", "-", "t", ")", "<", "abs", "(", "id_2", "-", "t", ")", ":", "\n", "                        ", "closest_centroid", "=", "related_centroids", "[", "0", "]", "\n", "", "else", ":", "\n", "                        ", "closest_centroid", "=", "related_centroids", "[", "1", "]", "\n", "# print(closest_centroid)", "\n", "", "", "label", "=", "closest_centroid", "[", "1", "]", "\n", "\n", "label_array", "[", "t", ",", "0", "]", "=", "label", "\n", "\n", "# print(label_array)", "\n", "\n", "\n", "############################", "\n", "# processing leg location info", "\n", "", "print", "(", "'computing leg intersection...'", ")", "\n", "instance_leg", "=", "LegLocationAnalyser", "(", "self", ".", "name", ",", "self", ".", "path_data", ")", "\n", "_", ",", "leg_intersect_data", "=", "instance_leg", ".", "compute_leg_intersection", "(", "cutoff", "=", "0", ",", "min_length", "=", "20", ")", "\n", "leg_location_label_array", "=", "np", ".", "zeros", "(", "(", "data", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "\n", "for", "frame_index", "in", "leg_intersect_data", ".", "keys", "(", ")", ":", "\n", "                ", "leg_location_label_array", "[", "frame_index", ",", "0", "]", "=", "1", "\n", "\n", "", "print", "(", "'computing left hand location...'", ")", "\n", "instance_left_hand", "=", "HandLocationAnalyser", "(", "self", ".", "name", ",", "self", ".", "path_data", ",", "hand", "=", "'left'", ")", "\n", "left_hand_arm_continuous_segments", ",", "left_hand_leg_continuous_segments", ",", "left_hand_face_continuous_segments", "=", "instance_left_hand", ".", "compute_hand_intersection", "(", "cutoff", "=", "0", ",", "min_length", "=", "80", ")", "\n", "left_hand_arm_label_array", "=", "self", ".", "transfer_to_array", "(", "left_hand_arm_continuous_segments", ")", "\n", "left_hand_leg_label_array", "=", "self", ".", "transfer_to_array", "(", "left_hand_leg_continuous_segments", ")", "\n", "left_hand_face_label_array", "=", "self", ".", "transfer_to_array", "(", "left_hand_face_continuous_segments", ")", "\n", "\n", "print", "(", "'computing right hand location...'", ")", "\n", "instance_right_hand", "=", "HandLocationAnalyser", "(", "self", ".", "name", ",", "self", ".", "path_data", ",", "hand", "=", "'right'", ")", "\n", "right_hand_arm_continuous_segments", ",", "right_hand_leg_continuous_segments", ",", "right_hand_face_continuous_segments", "=", "instance_right_hand", ".", "compute_hand_intersection", "(", "cutoff", "=", "0", ",", "min_length", "=", "80", ")", "\n", "right_hand_arm_label_array", "=", "self", ".", "transfer_to_array", "(", "right_hand_arm_continuous_segments", ")", "\n", "right_hand_leg_label_array", "=", "self", ".", "transfer_to_array", "(", "right_hand_leg_continuous_segments", ")", "\n", "right_hand_face_label_array", "=", "self", ".", "transfer_to_array", "(", "right_hand_face_continuous_segments", ")", "\n", "\n", "############################", "\n", "# processing leg action info", "\n", "leg_action_label_data", "=", "json", ".", "load", "(", "open", "(", "\n", "os", ".", "path", ".", "join", "(", "DATA_FOLDER", ",", "'leg_action_analysis_optical_flow'", ",", "'optical_flow_result.json'", ")", ",", "\n", "'r'", ")", ")", "\n", "try", ":", "\n", "                ", "leg_action_label_data", "=", "leg_action_label_data", "[", "str", "(", "self", ".", "participant_id", ")", "]", "[", "str", "(", "self", ".", "session_id", ")", "]", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "print", "(", "'no leg action data...'", ")", "\n", "leg_action_label_data", "=", "{", "}", "\n", "\n", "", "print", "(", "leg_action_label_data", ")", "\n", "# generate label array", "\n", "leg_action_label_array", "=", "np", ".", "zeros", "(", "(", "data", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "\n", "label_centroid", "=", "{", "}", "\n", "\n", "for", "segment", "in", "leg_action_label_data", ".", "keys", "(", ")", ":", "\n", "                ", "starting", "=", "int", "(", "segment", ".", "split", "(", "','", ")", "[", "0", "]", ")", "\n", "ending", "=", "int", "(", "segment", ".", "split", "(", "','", ")", "[", "1", "]", ")", "\n", "centroid", "=", "int", "(", "math", ".", "floor", "(", "(", "starting", "+", "ending", ")", "/", "2", ")", ")", "\n", "# p = (centroid, hand_cross_label_data[segment][0], hand_cross_label_data[segment][1])", "\n", "label_centroid", "[", "centroid", "]", "=", "leg_action_label_data", "[", "segment", "]", "\n", "\n", "", "print", "(", "'preprocessing leg action data'", ")", "\n", "for", "t", "in", "range", "(", "data", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "related_centroids", "=", "[", "(", "i", ",", "label_centroid", "[", "i", "]", ")", "\n", "for", "i", "in", "range", "(", "int", "(", "t", "-", "0.5", "*", "window_size", ")", ",", "int", "(", "t", "+", "0.5", "*", "window_size", ")", ")", "\n", "if", "i", "in", "label_centroid", ".", "keys", "(", ")", "]", "\n", "\n", "if", "len", "(", "related_centroids", ")", "==", "0", ":", "\n", "                    ", "continue", "\n", "", "if", "len", "(", "related_centroids", ")", "==", "1", ":", "\n", "                    ", "closest_centroid", "=", "related_centroids", "[", "0", "]", "\n", "", "else", ":", "\n", "                    ", "id_1", "=", "related_centroids", "[", "0", "]", "[", "0", "]", "\n", "id_2", "=", "related_centroids", "[", "1", "]", "[", "0", "]", "\n", "if", "abs", "(", "id_1", "-", "t", ")", "<", "abs", "(", "id_2", "-", "t", ")", ":", "\n", "                        ", "closest_centroid", "=", "related_centroids", "[", "0", "]", "\n", "", "else", ":", "\n", "                        ", "closest_centroid", "=", "related_centroids", "[", "1", "]", "\n", "# print(closest_centroid)", "\n", "", "", "label", "=", "closest_centroid", "[", "1", "]", "\n", "\n", "leg_action_label_array", "[", "t", ",", "0", "]", "=", "label", "\n", "\n", "# print(leg_action_label_array)", "\n", "\n", "############################", "\n", "# processing hand action info", "\n", "", "hand_action_label_data", "=", "json", ".", "load", "(", "open", "(", "\n", "os", ".", "path", ".", "join", "(", "DATA_FOLDER", ",", "'hand_action_analysis_optical_flow'", ",", "'optical_flow_result.json'", ")", ",", "\n", "'r'", ")", ")", "\n", "try", ":", "\n", "                ", "hand_action_label_data", "=", "hand_action_label_data", "[", "str", "(", "self", ".", "participant_id", ")", "]", "[", "str", "(", "self", ".", "session_id", ")", "]", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "print", "(", "'no hands action data...'", ")", "\n", "hand_action_label_data", "=", "{", "}", "\n", "\n", "", "window_size", "=", "100", "\n", "window_step", "=", "50", "\n", "\n", "# generate label array", "\n", "hand_action_label_array", "=", "np", ".", "zeros", "(", "(", "data", ".", "shape", "[", "0", "]", ",", "2", ")", ")", "\n", "\n", "for", "hand", "in", "hand_action_label_data", ".", "keys", "(", ")", ":", "\n", "                ", "label_centroid", "=", "{", "}", "\n", "for", "segment", "in", "hand_action_label_data", "[", "hand", "]", ".", "keys", "(", ")", ":", "\n", "                    ", "starting", "=", "int", "(", "segment", ".", "split", "(", "','", ")", "[", "0", "]", ")", "\n", "ending", "=", "int", "(", "segment", ".", "split", "(", "','", ")", "[", "1", "]", ")", "\n", "centroid", "=", "int", "(", "math", ".", "floor", "(", "(", "starting", "+", "ending", ")", "/", "2", ")", ")", "\n", "# p = (centroid, hand_cross_label_data[segment][0], hand_cross_label_data[segment][1])", "\n", "label_centroid", "[", "centroid", "]", "=", "hand_action_label_data", "[", "hand", "]", "[", "segment", "]", "\n", "\n", "# print(label_centroid)", "\n", "\n", "", "print", "(", "'preprocessing hand action data'", ")", "\n", "for", "t", "in", "range", "(", "data", ".", "shape", "[", "0", "]", ")", ":", "\n", "                    ", "related_centroids", "=", "[", "(", "i", ",", "label_centroid", "[", "i", "]", ")", "\n", "for", "i", "in", "range", "(", "int", "(", "t", "-", "0.5", "*", "window_size", ")", ",", "int", "(", "t", "+", "0.5", "*", "window_size", ")", ")", "\n", "if", "i", "in", "label_centroid", ".", "keys", "(", ")", "]", "\n", "\n", "if", "len", "(", "related_centroids", ")", "==", "0", ":", "\n", "                        ", "continue", "\n", "", "if", "len", "(", "related_centroids", ")", "==", "1", ":", "\n", "                        ", "closest_centroid", "=", "related_centroids", "[", "0", "]", "\n", "", "else", ":", "\n", "                        ", "id_1", "=", "related_centroids", "[", "0", "]", "[", "0", "]", "\n", "id_2", "=", "related_centroids", "[", "1", "]", "[", "0", "]", "\n", "if", "abs", "(", "id_1", "-", "t", ")", "<", "abs", "(", "id_2", "-", "t", ")", ":", "\n", "                            ", "closest_centroid", "=", "related_centroids", "[", "0", "]", "\n", "", "else", ":", "\n", "                            ", "closest_centroid", "=", "related_centroids", "[", "1", "]", "\n", "# print(closest_centroid)", "\n", "", "", "label", "=", "closest_centroid", "[", "1", "]", "\n", "if", "hand", "==", "'left'", ":", "\n", "                        ", "hand_action_label_array", "[", "t", ",", "0", "]", "=", "label", "\n", "", "else", ":", "\n", "                        ", "hand_action_label_array", "[", "t", ",", "1", "]", "=", "label", "\n", "\n", "# print(hand_action_label_array)", "\n", "\n", "############################", "\n", "# processing speaker info", "\n", "\n", "", "", "", "print", "(", "'Reading speaker info...'", ")", "\n", "speaker_data", "=", "json", ".", "load", "(", "open", "(", "self", ".", "path_data", "[", "'speaker_data'", "]", ",", "'r'", ")", ")", "\n", "speaker_array", "=", "np", ".", "full", "(", "(", "data", ".", "shape", "[", "0", "]", ",", "1", ")", ",", "-", "1", ")", "\n", "\n", "for", "spk", "in", "speaker_data", ".", "keys", "(", ")", ":", "\n", "                ", "sub_spk_data", "=", "speaker_data", "[", "spk", "]", "\n", "spk", "=", "int", "(", "spk", ")", "\n", "# print(spk, '--->')", "\n", "for", "segment", "in", "sub_spk_data", ":", "\n", "                    ", "starting", "=", "segment", "[", "0", "]", "\n", "ending", "=", "segment", "[", "1", "]", "\n", "starting", "=", "math", ".", "floor", "(", "starting", "/", "1000", "*", "fps", ")", "\n", "starting", "=", "min", "(", "starting", ",", "speaker_array", ".", "shape", "[", "0", "]", ")", "\n", "ending", "=", "math", ".", "ceil", "(", "ending", "/", "1000", "*", "fps", ")", "\n", "ending", "=", "min", "(", "ending", ",", "speaker_array", ".", "shape", "[", "0", "]", ")", "\n", "speaker_array", "[", "starting", ":", "ending", ",", ":", "]", "=", "spk", "\n", "# print(starting, ending)", "\n", "\n", "", "", "speaker_array", "=", "speaker_array", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "\n", "############################", "\n", "# processing voice info", "\n", "voice_data", "=", "json", ".", "load", "(", "open", "(", "self", ".", "path_data", "[", "'voice_data'", "]", ",", "'r'", ")", ")", "\n", "voice_array", "=", "np", ".", "full", "(", "(", "data", ".", "shape", "[", "0", "]", ",", "1", ")", ",", "0", ")", "\n", "for", "segment", "in", "voice_data", ":", "\n", "                ", "starting", "=", "segment", "[", "0", "]", "\n", "ending", "=", "segment", "[", "1", "]", "\n", "starting", "=", "math", ".", "floor", "(", "starting", "*", "fps", ")", "\n", "starting", "=", "min", "(", "starting", ",", "voice_array", ".", "shape", "[", "0", "]", ")", "\n", "ending", "=", "math", ".", "ceil", "(", "ending", "*", "fps", ")", "\n", "ending", "=", "min", "(", "ending", ",", "voice_array", ".", "shape", "[", "0", "]", ")", "\n", "voice_array", "[", "starting", ":", "ending", ",", ":", "]", "=", "1", "\n", "print", "(", "starting", ",", "ending", ")", "\n", "\n", "# plt.plot(range(data.shape[0]), list(voice_array.reshape(-1)))", "\n", "# plt.show()", "\n", "", "voice_array", "=", "np", ".", "array", "(", "savgol_filter", "(", "list", "(", "voice_array", ".", "reshape", "(", "-", "1", ")", ")", ",", "51", ",", "3", ")", ")", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "voice_array", "[", "voice_array", ">=", "0.3", "]", "=", "1", "\n", "voice_array", "[", "voice_array", "<", "0.3", "]", "=", "0", "\n", "# plt.plot(range(data.shape[0]), list(voice_array.reshape(-1)))", "\n", "# plt.show()", "\n", "\n", "############################", "\n", "# Data Fusion and save", "\n", "print", "(", "label_array", ".", "shape", ")", "\n", "print", "(", "left_hand_arm_label_array", ".", "shape", ")", "\n", "print", "(", "left_hand_leg_label_array", ".", "shape", ")", "\n", "print", "(", "left_hand_face_label_array", ".", "shape", ")", "\n", "print", "(", "right_hand_arm_label_array", ".", "shape", ")", "\n", "print", "(", "right_hand_leg_label_array", ".", "shape", ")", "\n", "print", "(", "right_hand_face_label_array", ".", "shape", ")", "\n", "print", "(", "leg_action_label_array", ".", "shape", ")", "\n", "print", "(", "leg_location_label_array", ".", "shape", ")", "\n", "print", "(", "hand_action_label_array", ".", "shape", ")", "\n", "print", "(", "speaker_array", ".", "shape", ")", "\n", "print", "(", "voice_array", ".", "shape", ")", "\n", "\n", "fused_data", "=", "np", ".", "hstack", "(", "\n", "(", "\n", "label_array", ",", "# hand cross data", "\n", "left_hand_arm_label_array", ",", "\n", "left_hand_leg_label_array", ",", "\n", "left_hand_face_label_array", ",", "\n", "right_hand_arm_label_array", ",", "\n", "right_hand_leg_label_array", ",", "\n", "right_hand_face_label_array", ",", "\n", "leg_location_label_array", ",", "\n", "leg_action_label_array", ",", "\n", "hand_action_label_array", ",", "# shape (n, 2) NOTE!", "\n", "speaker_array", ",", "\n", "voice_array", ",", "\n", ")", "\n", ")", "\n", "np", ".", "save", "(", "fused_data_path", ",", "fused_data", ")", "\n", "\n", "#############################################", "\n", "# some preprocessing of data", "\n", "\n", "", "left_hand_to_leg_fidget_array", "=", "np", ".", "zeros", "(", "(", "data", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "\n", "left_hand_to_leg_fidget_array", "[", "\n", "(", "hand_action_label_array", "[", ":", ",", "0", "]", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "==", "1", ")", "&", "(", "left_hand_leg_label_array", "==", "1", ")", "]", "=", "1", "\n", "\n", "right_hand_to_leg_fidget_array", "=", "np", ".", "zeros", "(", "(", "data", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "\n", "right_hand_to_leg_fidget_array", "[", "\n", "(", "hand_action_label_array", "[", ":", ",", "1", "]", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "==", "1", ")", "&", "(", "right_hand_leg_label_array", "==", "1", ")", "]", "=", "1", "\n", "\n", "left_hand_to_arm_fidget_array", "=", "np", ".", "zeros", "(", "(", "data", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "\n", "left_hand_to_arm_fidget_array", "[", "\n", "(", "hand_action_label_array", "[", ":", ",", "0", "]", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "==", "1", ")", "&", "(", "left_hand_arm_label_array", "==", "1", ")", "]", "=", "1", "\n", "\n", "right_hand_to_arm_fidget_array", "=", "np", ".", "zeros", "(", "(", "data", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "\n", "right_hand_to_arm_fidget_array", "[", "\n", "(", "hand_action_label_array", "[", ":", ",", "1", "]", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "==", "1", ")", "&", "(", "right_hand_arm_label_array", "==", "1", ")", "]", "=", "1", "\n", "\n", "left_hand_to_face_fidget_array", "=", "np", ".", "zeros", "(", "(", "data", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "\n", "left_hand_to_face_fidget_array", "[", "\n", "(", "hand_action_label_array", "[", ":", ",", "0", "]", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "==", "1", ")", "&", "(", "left_hand_face_label_array", "==", "1", ")", "]", "=", "1", "\n", "\n", "right_hand_to_face_fidget_array", "=", "np", ".", "zeros", "(", "(", "data", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "\n", "right_hand_to_face_fidget_array", "[", "\n", "(", "hand_action_label_array", "[", ":", ",", "1", "]", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "==", "1", ")", "&", "(", "right_hand_face_label_array", "==", "1", ")", "]", "=", "1", "\n", "\n", "leg_fidget_array", "=", "leg_action_label_array", "\n", "leg_fidget_array", "[", "leg_fidget_array", ">", "1", "]", "=", "1", "\n", "leg_fidget_array", "=", "np", ".", "array", "(", "savgol_filter", "(", "leg_fidget_array", ".", "reshape", "(", "-", "1", ")", ".", "tolist", "(", ")", ",", "51", ",", "3", ")", ")", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "leg_fidget_array", "[", "leg_fidget_array", ">=", "0.8", "]", "=", "1", "\n", "leg_fidget_array", "[", "leg_fidget_array", "<", "0.8", "]", "=", "0", "\n", "\n", "#############################################", "\n", "if", "not", "save_video", ":", "\n", "            ", "input", "(", "'ready to play!'", ")", "\n", "\n", "\n", "", "cap", ".", "set", "(", "1", ",", "play_starting", ")", "\n", "t", "=", "play_starting", "\n", "\n", "if", "save_video", ":", "\n", "            ", "fourcc", "=", "cv2", ".", "VideoWriter_fourcc", "(", "*", "'XVID'", ")", "\n", "out", "=", "cv2", ".", "VideoWriter", "(", "self", ".", "path_data", "[", "'generated_demo_video'", "]", ",", "fourcc", ",", "cap", ".", "get", "(", "cv2", ".", "CAP_PROP_FPS", ")", ",", "(", "int", "(", "cap", ".", "get", "(", "cv2", ".", "CAP_PROP_FRAME_WIDTH", ")", ")", ",", "int", "(", "cap", ".", "get", "(", "cv2", ".", "CAP_PROP_FRAME_HEIGHT", ")", ")", ")", ")", "\n", "\n", "", "while", "(", "t", "<", "data", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "print", "(", "'video analysing in progress:'", ",", "t", "/", "data", ".", "shape", "[", "0", "]", ",", "end", "=", "'\\r'", ")", "\n", "ret", ",", "frame", "=", "cap", ".", "read", "(", ")", "\n", "# Display all the data points", "\n", "\n", "try", ":", "\n", "                ", "if", "int", "(", "speaker_array", "[", "t", "]", ")", "in", "speaker_label_data", "[", "self", ".", "participant_id", "]", "[", "self", ".", "session_id", "]", ":", "\n", "                    ", "if", "voice_array", "[", "t", ",", "0", "]", "==", "1", ":", "\n", "                        ", "frame", "=", "self", ".", "paint_text", "(", "frame", ",", "'Participant Speaking'", ",", "(", "350", ",", "200", ")", ",", "font_size", "=", "1", ")", "\n", "# elif int(speaker_array[t]) == -1:", "\n", "#    frame = self.paint_text(frame, 'Unknown', (400, 200), font_size=1)", "\n", "# else:", "\n", "#    frame = self.paint_text(frame, 'Interviewer speaking', (400, 200), font_size=1)", "\n", "", "", "", "except", ":", "\n", "                ", "frame", "=", "self", ".", "paint_text", "(", "frame", ",", "\n", "'{} of {} speaking'", ".", "format", "(", "str", "(", "speaker_array", "[", "t", "]", ")", ",", "len", "(", "speaker_data", ".", "keys", "(", ")", ")", "-", "1", ")", ",", "\n", "(", "100", ",", "100", ")", ")", "\n", "\n", "\n", "\n", "# for i in range(25):", "\n", "#     frame = self.paint_point(frame, [data[t, i * 2], data[t, i * 2 + 1]])", "\n", "# for i in range(25, 95):", "\n", "#     frame = self.paint_point(frame, [data[t, i * 2], data[t, i * 2 + 1]], color=COLOR_BLUE)", "\n", "# for i in range(95, 116):", "\n", "#     frame = self.paint_point(frame, [data[t, i * 2], data[t, i * 2 + 1]], color=COLOR_GREEN)", "\n", "# for i in range(116, 137):", "\n", "#     frame = self.paint_point(frame, [data[t, i * 2], data[t, i * 2 + 1]], color=COLOR_YELLOW)", "\n", "\n", "", "left_hand_data", "=", "data", "[", "t", ",", "194", ":", "232", "]", ".", "reshape", "(", "-", "1", ",", "2", ")", "\n", "right_hand_data", "=", "data", "[", "t", ",", "236", ":", "274", "]", ".", "reshape", "(", "-", "1", ",", "2", ")", "\n", "face_data", "=", "data", "[", "t", ",", "50", ":", "190", "]", ".", "reshape", "(", "-", "1", ",", "2", ")", "\n", "left_foot_data", "=", "data", "[", "t", ",", "38", ":", "44", "]", ".", "reshape", "(", "-", "1", ",", "2", ")", "\n", "right_foot_data", "=", "data", "[", "t", ",", "44", ":", "50", "]", ".", "reshape", "(", "-", "1", ",", "2", ")", "\n", "\n", "# frame = self.paint_rectangle_to_points(frame, left_hand_data, color=COLOR_GREEN)", "\n", "# frame = self.paint_rectangle_to_points(frame, right_hand_data, color=COLOR_YELLOW)", "\n", "\n", "if", "leg_location_label_array", "[", "t", ",", "0", "]", "==", "1", ":", "\n", "                ", "frame", "=", "self", ".", "paint_text", "(", "frame", ",", "'Leg cross'", ",", "(", "790", ",", "630", ")", ",", "font_size", "=", "1", ")", "\n", "\n", "", "if", "leg_action_label_array", "[", "t", ",", "0", "]", "==", "2", ":", "\n", "                ", "frame", "=", "self", ".", "paint_text", "(", "frame", ",", "'Leg dynamic'", ",", "(", "790", ",", "560", ")", ",", "font_size", "=", "1", ")", "\n", "#frame = self.paint_rectangle_to_points(frame, [(540, 430), (790, 630)], color=color)", "\n", "\n", "", "if", "leg_fidget_array", "[", "t", ",", "0", "]", "==", "1", ":", "\n", "                ", "for", "i", "in", "range", "(", "25", ")", ":", "\n", "                    ", "frame", "=", "self", ".", "paint_point", "(", "frame", ",", "[", "data", "[", "t", ",", "i", "*", "2", "]", ",", "data", "[", "t", ",", "i", "*", "2", "+", "1", "]", "]", ",", "color", "=", "COLOR_RED", ")", "\n", "", "frame", "=", "self", ".", "paint_text", "(", "frame", ",", "'Leg Fidgeting'", ",", "(", "790", ",", "500", ")", ",", "font_size", "=", "0.5", ")", "\n", "\n", "\n", "", "if", "t", "in", "hand_cross_valid_intersect_data", ".", "keys", "(", ")", ":", "\n", "# print(t)", "\n", "                ", "rect", "=", "best_rects", "[", "t", "]", "\n", "label", "=", "label_array", "[", "t", ",", "0", "]", "\n", "# print(label)", "\n", "color", "=", "COLOR_YELLOW", "\n", "if", "label", "==", "1", ":", "\n", "                    ", "color", "=", "COLOR_RED", "\n", "frame", "=", "self", ".", "paint_text", "(", "frame", ",", "'Hand Cross Fidgeting'", ",", "(", "rect", "[", "2", "]", ",", "rect", "[", "3", "]", ")", ",", "font_size", "=", "0.5", ")", "\n", "", "else", ":", "\n", "                    ", "color", "=", "COLOR_GREEN", "\n", "frame", "=", "self", ".", "paint_text", "(", "frame", ",", "'Hand Cross'", ",", "(", "rect", "[", "2", "]", ",", "rect", "[", "3", "]", ")", ",", "font_size", "=", "0.5", ")", "\n", "\n", "", "frame", "=", "cv2", ".", "rectangle", "(", "frame", ",", "\n", "(", "rect", "[", "0", "]", "-", "10", ",", "rect", "[", "1", "]", "-", "10", ")", ",", "\n", "(", "rect", "[", "2", "]", "+", "10", ",", "rect", "[", "3", "]", "+", "10", ")", ",", "\n", "color", ",", "\n", "2", ")", "\n", "", "else", ":", "\n", "                ", "left_hand_action_label", "=", "hand_action_label_array", "[", "t", ",", "0", "]", "\n", "right_hand_action_label", "=", "hand_action_label_array", "[", "t", ",", "1", "]", "\n", "flag_left", "=", "''", "\n", "flag_right", "=", "''", "\n", "\n", "if", "left_hand_action_label", "==", "1", ":", "\n", "                    ", "if", "left_hand_to_leg_fidget_array", "[", "t", ",", "0", "]", "==", "1", ":", "\n", "                        ", "flag_left", "=", "'Left hand to leg fidgeting'", "\n", "", "if", "left_hand_to_arm_fidget_array", "[", "t", ",", "0", "]", "==", "1", ":", "\n", "                        ", "flag_left", "=", "'Left hand to arm fidgeting'", "\n", "", "if", "left_hand_to_face_fidget_array", "[", "t", ",", "0", "]", "==", "1", ":", "\n", "                        ", "flag_left", "=", "'Left hand to face'", "\n", "", "", "if", "right_hand_action_label", "==", "1", ":", "\n", "                    ", "if", "right_hand_to_leg_fidget_array", "[", "t", ",", "0", "]", "==", "1", ":", "\n", "                        ", "flag_right", "=", "'Right hand to leg fidgeting'", "\n", "", "if", "right_hand_to_arm_fidget_array", "[", "t", ",", "0", "]", "==", "1", ":", "\n", "                        ", "flag_right", "=", "'Right hand to arm fidgeting'", "\n", "", "if", "right_hand_to_face_fidget_array", "[", "t", ",", "0", "]", "==", "1", ":", "\n", "                        ", "flag_right", "=", "'Right hand to face'", "\n", "\n", "", "", "if", "flag_left", ":", "\n", "                    ", "frame", "=", "self", ".", "paint_rectangle_to_points", "(", "frame", ",", "left_hand_data", ",", "color", "=", "COLOR_RED", ")", "\n", "frame", "=", "self", ".", "paint_text", "(", "frame", ",", "flag_left", ",", "(", "400", ",", "400", ")", ",", "font_size", "=", "0.5", ")", "\n", "", "if", "flag_right", ":", "\n", "                    ", "frame", "=", "self", ".", "paint_rectangle_to_points", "(", "frame", ",", "right_hand_data", ",", "color", "=", "COLOR_RED", ")", "\n", "frame", "=", "self", ".", "paint_text", "(", "frame", ",", "flag_right", ",", "(", "400", ",", "450", ")", ",", "font_size", "=", "0.5", ")", "\n", "\n", "", "", "if", "save_video", ":", "\n", "                ", "out", ".", "write", "(", "frame", ")", "\n", "", "else", ":", "\n", "                ", "cv2", ".", "imshow", "(", "'frame'", ",", "frame", ")", "\n", "\n", "", "if", "cv2", ".", "waitKey", "(", "40", ")", "&", "0xFF", "==", "ord", "(", "'q'", ")", ":", "\n", "                ", "break", "\n", "# if t == starting:", "\n", "#     input()", "\n", "", "t", "+=", "1", "\n", "# except Exception as e:", "\n", "# print(e)", "\n", "", "if", "save_video", ":", "\n", "            ", "out", ".", "release", "(", ")", "\n", "", "cap", ".", "release", "(", ")", "\n", "cv2", ".", "destroyAllWindows", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.src.main.MainPipeline.show_actor_demo": [[1490, 1924], ["cv2.VideoCapture", "numpy.load", "cv2.VideoCapture.get", "print", "int", "print", "utility.dirs.create_dirs", "component.hand_cross_analyser.HandCrossAnalyser", "component.hand_cross_analyser.HandCrossAnalyser.compute_stationary_rectangles", "print", "os.path.exists", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.array().reshape", "main.MainPipeline.transfer_to_array", "main.MainPipeline.transfer_to_array", "cv2.VideoCapture.set", "cv2.VideoCapture.release", "cv2.destroyAllWindows", "utility.dirs.create_dirs", "print", "os.path.exists", "cv2.VideoCapture.get", "numpy.array", "numpy.hstack", "range", "numpy.load", "fused_data[].reshape", "fused_data[].reshape", "fused_data[].reshape", "fused_data[].reshape", "fused_data[].reshape", "fused_data[].reshape", "fused_data[].reshape", "fused_data[].reshape", "fused_data[].reshape", "json.load", "numpy.zeros", "json.load.keys", "print", "range", "print", "component.leg_location_analyser.LegLocationAnalyser", "component.leg_location_analyser.LegLocationAnalyser.compute_leg_intersection", "numpy.zeros", "leg_intersect_data.keys", "print", "component.hand_location_analyser.HandLocationAnalyser", "component.hand_location_analyser.HandLocationAnalyser.compute_hand_intersection", "main.MainPipeline.transfer_to_array", "main.MainPipeline.transfer_to_array", "main.MainPipeline.transfer_to_array", "print", "component.hand_location_analyser.HandLocationAnalyser", "component.hand_location_analyser.HandLocationAnalyser.compute_hand_intersection", "main.MainPipeline.transfer_to_array", "main.MainPipeline.transfer_to_array", "main.MainPipeline.transfer_to_array", "json.load", "print", "numpy.zeros", "json.load.keys", "print", "range", "json.load", "numpy.zeros", "json.load.keys", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "numpy.hstack", "numpy.save", "main.MainPipeline.transfer_to_segments", "main.MainPipeline.transfer_to_segments", "input", "cv2.VideoWriter_fourcc", "cv2.VideoWriter", "print", "cv2.VideoCapture.read", "data[].reshape", "data[].reshape", "data[].reshape", "data[].reshape", "data[].reshape", "cv2.VideoWriter.release", "print", "open", "int", "int", "int", "open", "int", "int", "int", "open", "hand_action_label_data[].keys", "print", "range", "numpy.array", "cv2.VideoCapture.get", "range", "main.MainPipeline.paint_text", "hand_cross_valid_intersect_data.keys", "cv2.rectangle", "cv2.VideoWriter.write", "cv2.imshow", "ord", "os.path.split", "hand_cross_valid_intersect_data.keys", "os.path.join", "print", "math.floor", "len", "len", "os.path.join", "print", "math.floor", "len", "len", "os.path.join", "print", "int", "int", "int", "scipy.signal.savgol_filter", "int", "int", "main.MainPipeline.paint_point", "main.MainPipeline.paint_text", "main.MainPipeline.paint_text", "main.MainPipeline.paint_rectangle_to_points", "main.MainPipeline.paint_text", "main.MainPipeline.paint_rectangle_to_points", "main.MainPipeline.paint_text", "cv2.waitKey", "os.path.split", "numpy.min", "numpy.max", "str", "segment.split", "segment.split", "range", "abs", "abs", "str", "segment.split", "segment.split", "range", "abs", "abs", "str", "math.floor", "len", "len", "hand_action_label_array[].reshape", "hand_action_label_array[].reshape", "hand_action_label_array[].reshape", "hand_action_label_array[].reshape", "hand_action_label_array[].reshape", "hand_action_label_array[].reshape", "numpy.array().reshape.reshape().tolist", "cv2.VideoCapture.get", "cv2.VideoCapture.get", "str", "int", "int", "label_centroid.keys", "str", "int", "int", "label_centroid.keys", "str", "segment.split", "segment.split", "range", "abs", "abs", "int", "int", "label_centroid.keys", "numpy.array().reshape.reshape"], "methods", ["home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.dirs.create_dirs", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.hand_cross_analyser.HandCrossAnalyser.compute_stationary_rectangles", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.basic_processor.BasicProcessor.transfer_to_array", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.basic_processor.BasicProcessor.transfer_to_array", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.dirs.create_dirs", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.leg_location_analyser.LegLocationAnalyser.compute_leg_intersection", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.hand_location_analyser.HandLocationAnalyser.compute_hand_intersection", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.basic_processor.BasicProcessor.transfer_to_array", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.basic_processor.BasicProcessor.transfer_to_array", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.basic_processor.BasicProcessor.transfer_to_array", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.hand_location_analyser.HandLocationAnalyser.compute_hand_intersection", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.basic_processor.BasicProcessor.transfer_to_array", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.basic_processor.BasicProcessor.transfer_to_array", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.basic_processor.BasicProcessor.transfer_to_array", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.basic_processor.BasicProcessor.transfer_to_segments", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.basic_processor.BasicProcessor.transfer_to_segments", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.elan_portal.ElanPortal.read", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.painting.paint_text", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.painting.paint_point", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.painting.paint_text", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.painting.paint_text", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.painting.paint_rectangle_to_points", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.painting.paint_text", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.painting.paint_rectangle_to_points", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.painting.paint_text"], ["", "def", "show_actor_demo", "(", "self", ",", "play_starting", "=", "0", ",", "save_video", "=", "False", ")", ":", "\n", "        ", "'''\n        Show demo\n        :param starting: int\n        :param ending: int\n        :return:\n        '''", "\n", "\n", "if", "save_video", ":", "\n", "            ", "create_dirs", "(", "[", "os", ".", "path", ".", "split", "(", "self", ".", "path_data", "[", "'generated_demo_video'", "]", ")", "[", "0", "]", "]", ")", "\n", "print", "(", "self", ".", "path_data", "[", "'generated_demo_video'", "]", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "self", ".", "path_data", "[", "'generated_demo_video'", "]", ")", ":", "\n", "                ", "print", "(", "'video file exists, move on.'", ")", "\n", "return", "\n", "\n", "", "", "cap", "=", "cv2", ".", "VideoCapture", "(", "self", ".", "video_path", ")", "\n", "data", "=", "np", ".", "load", "(", "self", ".", "processed_file", ")", "\n", "fps", "=", "cap", ".", "get", "(", "cv2", ".", "CAP_PROP_FPS", ")", "\n", "print", "(", "'fps:'", ",", "fps", ")", "\n", "length", "=", "int", "(", "cap", ".", "get", "(", "cv2", ".", "CAP_PROP_FRAME_COUNT", ")", ")", "\n", "print", "(", "length", ")", "\n", "\n", "fused_data_path", "=", "self", ".", "path_data", "[", "'fused_data'", "]", "\n", "create_dirs", "(", "[", "os", ".", "path", ".", "split", "(", "fused_data_path", ")", "[", "0", "]", "]", ")", "\n", "\n", "instance_hand_cross_analyser", "=", "HandCrossAnalyser", "(", "'test'", ",", "participant_data", "[", "participant_id", "]", "[", "session_id", "]", ")", "\n", "continuous_segments", ",", "hand_cross_valid_intersect_data", "=", "instance_hand_cross_analyser", ".", "compute_stationary_rectangles", "(", "\n", "cutoff", "=", "0", ",", "min_length", "=", "20", ")", "\n", "\n", "best_rects", "=", "{", "}", "\n", "for", "segment", "in", "continuous_segments", ":", "\n", "# find largest rectangle for each segment", "\n", "            ", "rects", "=", "[", "hand_cross_valid_intersect_data", "[", "i", "]", "for", "i", "in", "hand_cross_valid_intersect_data", ".", "keys", "(", ")", "\n", "if", "i", ">=", "segment", "[", "0", "]", "and", "i", "<", "segment", "[", "1", "]", "]", "\n", "rects", "=", "np", ".", "array", "(", "rects", ")", "\n", "best_rect", "=", "np", ".", "hstack", "(", "(", "np", ".", "min", "(", "rects", ",", "axis", "=", "0", ")", "[", ":", "2", "]", ",", "np", ".", "max", "(", "rects", ",", "axis", "=", "0", ")", "[", "2", ":", "]", ")", ")", "\n", "for", "i", "in", "range", "(", "segment", "[", "0", "]", ",", "segment", "[", "1", "]", ")", ":", "\n", "                ", "best_rects", "[", "i", "]", "=", "best_rect", "\n", "\n", "", "", "print", "(", "continuous_segments", ")", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "fused_data_path", ")", ":", "\n", "# Read fused data directly", "\n", "            ", "fused_data", "=", "np", ".", "load", "(", "fused_data_path", ")", "\n", "label_array", "=", "fused_data", "[", ":", ",", "0", "]", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "# H2H + fidgeting", "\n", "left_hand_arm_label_array", "=", "fused_data", "[", ":", ",", "1", "]", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "left_hand_leg_label_array", "=", "fused_data", "[", ":", ",", "2", "]", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "left_hand_face_label_array", "=", "fused_data", "[", ":", ",", "3", "]", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "right_hand_arm_label_array", "=", "fused_data", "[", ":", ",", "4", "]", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "right_hand_leg_label_array", "=", "fused_data", "[", ":", ",", "5", "]", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "right_hand_face_label_array", "=", "fused_data", "[", ":", ",", "6", "]", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "leg_location_label_array", "=", "fused_data", "[", ":", ",", "7", "]", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "leg_action_label_array", "=", "fused_data", "[", ":", ",", "8", "]", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "hand_action_label_array", "=", "fused_data", "[", ":", ",", "9", ":", "11", "]", "# shape (n, 2) NOTE!", "\n", "# speaker_array = fused_data[:, 11].reshape((-1, 1))", "\n", "# voice_array = fused_data[:, 12].reshape((-1, 1))", "\n", "\n", "", "else", ":", "\n", "# compute all necessary data", "\n", "# START!~~~", "\n", "\n", "############################", "\n", "# processing hand cross info", "\n", "            ", "hand_cross_label_data", "=", "json", ".", "load", "(", "open", "(", "\n", "os", ".", "path", ".", "join", "(", "DATA_FOLDER", ",", "'hand_cross_analysis_optical_flow'", ",", "'optical_flow_result.json'", ")", ",", "\n", "'r'", ")", ")", "\n", "try", ":", "\n", "                ", "hand_cross_label_data", "=", "hand_cross_label_data", "[", "str", "(", "self", ".", "participant_id", ")", "]", "[", "str", "(", "self", ".", "session_id", ")", "]", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "print", "(", "'no hands playing data...'", ")", "\n", "hand_cross_label_data", "=", "{", "}", "\n", "\n", "", "window_size", "=", "100", "\n", "window_step", "=", "50", "\n", "\n", "# generate label array", "\n", "label_array", "=", "np", ".", "zeros", "(", "(", "data", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "\n", "label_centroid", "=", "{", "}", "\n", "\n", "for", "segment", "in", "hand_cross_label_data", ".", "keys", "(", ")", ":", "\n", "                ", "starting", "=", "int", "(", "segment", ".", "split", "(", "','", ")", "[", "0", "]", ")", "\n", "ending", "=", "int", "(", "segment", ".", "split", "(", "','", ")", "[", "1", "]", ")", "\n", "centroid", "=", "int", "(", "math", ".", "floor", "(", "(", "starting", "+", "ending", ")", "/", "2", ")", ")", "\n", "# p = (centroid, hand_cross_label_data[segment][0], hand_cross_label_data[segment][1])", "\n", "label_centroid", "[", "centroid", "]", "=", "hand_cross_label_data", "[", "segment", "]", "\n", "\n", "# print(label_centroid)", "\n", "\n", "", "print", "(", "'preprocessing hand cross data'", ")", "\n", "for", "t", "in", "range", "(", "data", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "related_centroids", "=", "[", "(", "i", ",", "label_centroid", "[", "i", "]", ")", "\n", "for", "i", "in", "range", "(", "int", "(", "t", "-", "0.5", "*", "window_size", ")", ",", "int", "(", "t", "+", "0.5", "*", "window_size", ")", ")", "\n", "if", "i", "in", "label_centroid", ".", "keys", "(", ")", "]", "\n", "\n", "if", "len", "(", "related_centroids", ")", "==", "0", ":", "\n", "                    ", "continue", "\n", "", "if", "len", "(", "related_centroids", ")", "==", "1", ":", "\n", "                    ", "closest_centroid", "=", "related_centroids", "[", "0", "]", "\n", "", "else", ":", "\n", "                    ", "id_1", "=", "related_centroids", "[", "0", "]", "[", "0", "]", "\n", "id_2", "=", "related_centroids", "[", "1", "]", "[", "0", "]", "\n", "if", "abs", "(", "id_1", "-", "t", ")", "<", "abs", "(", "id_2", "-", "t", ")", ":", "\n", "                        ", "closest_centroid", "=", "related_centroids", "[", "0", "]", "\n", "", "else", ":", "\n", "                        ", "closest_centroid", "=", "related_centroids", "[", "1", "]", "\n", "# print(closest_centroid)", "\n", "", "", "label", "=", "closest_centroid", "[", "1", "]", "\n", "\n", "label_array", "[", "t", ",", "0", "]", "=", "label", "\n", "\n", "# print(label_array)", "\n", "\n", "\n", "############################", "\n", "# processing leg location info", "\n", "", "print", "(", "'computing leg intersection...'", ")", "\n", "instance_leg", "=", "LegLocationAnalyser", "(", "self", ".", "name", ",", "self", ".", "path_data", ")", "\n", "_", ",", "leg_intersect_data", "=", "instance_leg", ".", "compute_leg_intersection", "(", "cutoff", "=", "0", ",", "min_length", "=", "20", ")", "\n", "leg_location_label_array", "=", "np", ".", "zeros", "(", "(", "data", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "\n", "for", "frame_index", "in", "leg_intersect_data", ".", "keys", "(", ")", ":", "\n", "                ", "leg_location_label_array", "[", "frame_index", ",", "0", "]", "=", "1", "\n", "\n", "", "print", "(", "'computing left hand location...'", ")", "\n", "instance_left_hand", "=", "HandLocationAnalyser", "(", "self", ".", "name", ",", "self", ".", "path_data", ",", "hand", "=", "'left'", ")", "\n", "left_hand_arm_continuous_segments", ",", "left_hand_leg_continuous_segments", ",", "left_hand_face_continuous_segments", "=", "instance_left_hand", ".", "compute_hand_intersection", "(", "cutoff", "=", "0", ",", "min_length", "=", "20", ")", "\n", "left_hand_arm_label_array", "=", "self", ".", "transfer_to_array", "(", "left_hand_arm_continuous_segments", ")", "\n", "left_hand_leg_label_array", "=", "self", ".", "transfer_to_array", "(", "left_hand_leg_continuous_segments", ")", "\n", "left_hand_face_label_array", "=", "self", ".", "transfer_to_array", "(", "left_hand_face_continuous_segments", ")", "\n", "\n", "print", "(", "'computing right hand location...'", ")", "\n", "instance_right_hand", "=", "HandLocationAnalyser", "(", "self", ".", "name", ",", "self", ".", "path_data", ",", "hand", "=", "'right'", ")", "\n", "right_hand_arm_continuous_segments", ",", "right_hand_leg_continuous_segments", ",", "right_hand_face_continuous_segments", "=", "instance_right_hand", ".", "compute_hand_intersection", "(", "cutoff", "=", "0", ",", "min_length", "=", "20", ")", "\n", "right_hand_arm_label_array", "=", "self", ".", "transfer_to_array", "(", "right_hand_arm_continuous_segments", ")", "\n", "right_hand_leg_label_array", "=", "self", ".", "transfer_to_array", "(", "right_hand_leg_continuous_segments", ")", "\n", "right_hand_face_label_array", "=", "self", ".", "transfer_to_array", "(", "right_hand_face_continuous_segments", ")", "\n", "\n", "############################", "\n", "# processing leg action info", "\n", "leg_action_label_data", "=", "json", ".", "load", "(", "open", "(", "\n", "os", ".", "path", ".", "join", "(", "DATA_FOLDER", ",", "'leg_action_analysis_optical_flow'", ",", "'optical_flow_result.json'", ")", ",", "\n", "'r'", ")", ")", "\n", "try", ":", "\n", "                ", "leg_action_label_data", "=", "leg_action_label_data", "[", "str", "(", "self", ".", "participant_id", ")", "]", "[", "str", "(", "self", ".", "session_id", ")", "]", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "print", "(", "'no leg action data...'", ")", "\n", "leg_action_label_data", "=", "{", "}", "\n", "\n", "", "print", "(", "leg_action_label_data", ")", "\n", "# generate label array", "\n", "leg_action_label_array", "=", "np", ".", "zeros", "(", "(", "data", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "\n", "label_centroid", "=", "{", "}", "\n", "\n", "for", "segment", "in", "leg_action_label_data", ".", "keys", "(", ")", ":", "\n", "                ", "starting", "=", "int", "(", "segment", ".", "split", "(", "','", ")", "[", "0", "]", ")", "\n", "ending", "=", "int", "(", "segment", ".", "split", "(", "','", ")", "[", "1", "]", ")", "\n", "centroid", "=", "int", "(", "math", ".", "floor", "(", "(", "starting", "+", "ending", ")", "/", "2", ")", ")", "\n", "# p = (centroid, hand_cross_label_data[segment][0], hand_cross_label_data[segment][1])", "\n", "label_centroid", "[", "centroid", "]", "=", "leg_action_label_data", "[", "segment", "]", "\n", "\n", "", "print", "(", "'preprocessing leg action data'", ")", "\n", "for", "t", "in", "range", "(", "data", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "related_centroids", "=", "[", "(", "i", ",", "label_centroid", "[", "i", "]", ")", "\n", "for", "i", "in", "range", "(", "int", "(", "t", "-", "0.5", "*", "window_size", ")", ",", "int", "(", "t", "+", "0.5", "*", "window_size", ")", ")", "\n", "if", "i", "in", "label_centroid", ".", "keys", "(", ")", "]", "\n", "\n", "if", "len", "(", "related_centroids", ")", "==", "0", ":", "\n", "                    ", "continue", "\n", "", "if", "len", "(", "related_centroids", ")", "==", "1", ":", "\n", "                    ", "closest_centroid", "=", "related_centroids", "[", "0", "]", "\n", "", "else", ":", "\n", "                    ", "id_1", "=", "related_centroids", "[", "0", "]", "[", "0", "]", "\n", "id_2", "=", "related_centroids", "[", "1", "]", "[", "0", "]", "\n", "if", "abs", "(", "id_1", "-", "t", ")", "<", "abs", "(", "id_2", "-", "t", ")", ":", "\n", "                        ", "closest_centroid", "=", "related_centroids", "[", "0", "]", "\n", "", "else", ":", "\n", "                        ", "closest_centroid", "=", "related_centroids", "[", "1", "]", "\n", "# print(closest_centroid)", "\n", "", "", "label", "=", "closest_centroid", "[", "1", "]", "\n", "\n", "leg_action_label_array", "[", "t", ",", "0", "]", "=", "label", "\n", "\n", "# print(leg_action_label_array)", "\n", "\n", "############################", "\n", "# processing hand action info", "\n", "", "hand_action_label_data", "=", "json", ".", "load", "(", "open", "(", "\n", "os", ".", "path", ".", "join", "(", "DATA_FOLDER", ",", "'hand_action_analysis_optical_flow'", ",", "'optical_flow_result.json'", ")", ",", "\n", "'r'", ")", ")", "\n", "try", ":", "\n", "                ", "hand_action_label_data", "=", "hand_action_label_data", "[", "str", "(", "self", ".", "participant_id", ")", "]", "[", "str", "(", "self", ".", "session_id", ")", "]", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "print", "(", "'no hands action data...'", ")", "\n", "hand_action_label_data", "=", "{", "}", "\n", "\n", "", "window_size", "=", "100", "\n", "window_step", "=", "50", "\n", "\n", "# generate label array", "\n", "hand_action_label_array", "=", "np", ".", "zeros", "(", "(", "data", ".", "shape", "[", "0", "]", ",", "2", ")", ")", "\n", "\n", "for", "hand", "in", "hand_action_label_data", ".", "keys", "(", ")", ":", "\n", "                ", "label_centroid", "=", "{", "}", "\n", "for", "segment", "in", "hand_action_label_data", "[", "hand", "]", ".", "keys", "(", ")", ":", "\n", "                    ", "starting", "=", "int", "(", "segment", ".", "split", "(", "','", ")", "[", "0", "]", ")", "\n", "ending", "=", "int", "(", "segment", ".", "split", "(", "','", ")", "[", "1", "]", ")", "\n", "centroid", "=", "int", "(", "math", ".", "floor", "(", "(", "starting", "+", "ending", ")", "/", "2", ")", ")", "\n", "# p = (centroid, hand_cross_label_data[segment][0], hand_cross_label_data[segment][1])", "\n", "label_centroid", "[", "centroid", "]", "=", "hand_action_label_data", "[", "hand", "]", "[", "segment", "]", "\n", "\n", "# print(label_centroid)", "\n", "\n", "", "print", "(", "'preprocessing hand action data'", ")", "\n", "for", "t", "in", "range", "(", "data", ".", "shape", "[", "0", "]", ")", ":", "\n", "                    ", "related_centroids", "=", "[", "(", "i", ",", "label_centroid", "[", "i", "]", ")", "\n", "for", "i", "in", "range", "(", "int", "(", "t", "-", "0.5", "*", "window_size", ")", ",", "int", "(", "t", "+", "0.5", "*", "window_size", ")", ")", "\n", "if", "i", "in", "label_centroid", ".", "keys", "(", ")", "]", "\n", "\n", "if", "len", "(", "related_centroids", ")", "==", "0", ":", "\n", "                        ", "continue", "\n", "", "if", "len", "(", "related_centroids", ")", "==", "1", ":", "\n", "                        ", "closest_centroid", "=", "related_centroids", "[", "0", "]", "\n", "", "else", ":", "\n", "                        ", "id_1", "=", "related_centroids", "[", "0", "]", "[", "0", "]", "\n", "id_2", "=", "related_centroids", "[", "1", "]", "[", "0", "]", "\n", "if", "abs", "(", "id_1", "-", "t", ")", "<", "abs", "(", "id_2", "-", "t", ")", ":", "\n", "                            ", "closest_centroid", "=", "related_centroids", "[", "0", "]", "\n", "", "else", ":", "\n", "                            ", "closest_centroid", "=", "related_centroids", "[", "1", "]", "\n", "# print(closest_centroid)", "\n", "", "", "label", "=", "closest_centroid", "[", "1", "]", "\n", "if", "hand", "==", "'left'", ":", "\n", "                        ", "hand_action_label_array", "[", "t", ",", "0", "]", "=", "label", "\n", "", "else", ":", "\n", "                        ", "hand_action_label_array", "[", "t", ",", "1", "]", "=", "label", "\n", "\n", "# print(hand_action_label_array)", "\n", "\n", "############################", "\n", "# Data Fusion and save", "\n", "", "", "", "print", "(", "label_array", ".", "shape", ")", "\n", "print", "(", "left_hand_arm_label_array", ".", "shape", ")", "\n", "print", "(", "left_hand_leg_label_array", ".", "shape", ")", "\n", "print", "(", "left_hand_face_label_array", ".", "shape", ")", "\n", "print", "(", "right_hand_arm_label_array", ".", "shape", ")", "\n", "print", "(", "right_hand_leg_label_array", ".", "shape", ")", "\n", "print", "(", "right_hand_face_label_array", ".", "shape", ")", "\n", "print", "(", "leg_action_label_array", ".", "shape", ")", "\n", "print", "(", "leg_location_label_array", ".", "shape", ")", "\n", "print", "(", "hand_action_label_array", ".", "shape", ")", "\n", "# print(speaker_array.shape)", "\n", "# print(voice_array.shape)", "\n", "\n", "fused_data", "=", "np", ".", "hstack", "(", "\n", "(", "\n", "label_array", ",", "# hand cross data", "\n", "left_hand_arm_label_array", ",", "\n", "left_hand_leg_label_array", ",", "\n", "left_hand_face_label_array", ",", "\n", "right_hand_arm_label_array", ",", "\n", "right_hand_leg_label_array", ",", "\n", "right_hand_face_label_array", ",", "\n", "leg_location_label_array", ",", "\n", "leg_action_label_array", ",", "\n", "hand_action_label_array", ",", "# shape (n, 2) NOTE!", "\n", "# speaker_array,", "\n", "# voice_array,", "\n", ")", "\n", ")", "\n", "np", ".", "save", "(", "fused_data_path", ",", "fused_data", ")", "\n", "\n", "#############################################", "\n", "# some preprocessing of data", "\n", "\n", "", "left_hand_to_leg_fidget_array", "=", "np", ".", "zeros", "(", "(", "data", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "\n", "left_hand_to_leg_fidget_array", "[", "\n", "(", "hand_action_label_array", "[", ":", ",", "0", "]", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "==", "1", ")", "&", "(", "left_hand_leg_label_array", "==", "1", ")", "]", "=", "1", "\n", "\n", "right_hand_to_leg_fidget_array", "=", "np", ".", "zeros", "(", "(", "data", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "\n", "right_hand_to_leg_fidget_array", "[", "\n", "(", "hand_action_label_array", "[", ":", ",", "1", "]", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "==", "1", ")", "&", "(", "right_hand_leg_label_array", "==", "1", ")", "]", "=", "1", "\n", "\n", "left_hand_to_arm_fidget_array", "=", "np", ".", "zeros", "(", "(", "data", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "\n", "left_hand_to_arm_fidget_array", "[", "\n", "(", "hand_action_label_array", "[", ":", ",", "0", "]", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "==", "1", ")", "&", "(", "left_hand_arm_label_array", "==", "1", ")", "]", "=", "1", "\n", "\n", "right_hand_to_arm_fidget_array", "=", "np", ".", "zeros", "(", "(", "data", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "\n", "right_hand_to_arm_fidget_array", "[", "\n", "(", "hand_action_label_array", "[", ":", ",", "1", "]", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "==", "1", ")", "&", "(", "right_hand_arm_label_array", "==", "1", ")", "]", "=", "1", "\n", "\n", "left_hand_to_face_fidget_array", "=", "np", ".", "zeros", "(", "(", "data", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "\n", "left_hand_to_face_fidget_array", "[", "\n", "(", "hand_action_label_array", "[", ":", ",", "0", "]", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "==", "1", ")", "&", "(", "left_hand_face_label_array", "==", "1", ")", "]", "=", "1", "\n", "\n", "right_hand_to_face_fidget_array", "=", "np", ".", "zeros", "(", "(", "data", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "\n", "right_hand_to_face_fidget_array", "[", "\n", "(", "hand_action_label_array", "[", ":", ",", "1", "]", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "==", "1", ")", "&", "(", "right_hand_face_label_array", "==", "1", ")", "]", "=", "1", "\n", "\n", "leg_fidget_array", "=", "leg_action_label_array", "\n", "leg_fidget_array", "[", "leg_fidget_array", ">", "1", "]", "=", "1", "\n", "leg_fidget_array", "=", "np", ".", "array", "(", "savgol_filter", "(", "leg_fidget_array", ".", "reshape", "(", "-", "1", ")", ".", "tolist", "(", ")", ",", "51", ",", "3", ")", ")", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "leg_fidget_array", "[", "leg_fidget_array", ">=", "0.8", "]", "=", "1", "\n", "leg_fidget_array", "[", "leg_fidget_array", "<", "0.8", "]", "=", "0", "\n", "\n", "right_hand_to_leg_fidget_array", "=", "self", ".", "transfer_to_array", "(", "self", ".", "transfer_to_segments", "(", "right_hand_to_leg_fidget_array", ",", "min_length", "=", "100", ")", ")", "\n", "left_hand_to_leg_fidget_array", "=", "self", ".", "transfer_to_array", "(", "\n", "self", ".", "transfer_to_segments", "(", "left_hand_to_leg_fidget_array", ",", "min_length", "=", "100", ")", ")", "\n", "\n", "#############################################", "\n", "if", "not", "save_video", ":", "\n", "            ", "input", "(", "'ready to play!'", ")", "\n", "\n", "\n", "", "cap", ".", "set", "(", "1", ",", "play_starting", ")", "\n", "t", "=", "play_starting", "\n", "\n", "if", "save_video", ":", "\n", "            ", "fourcc", "=", "cv2", ".", "VideoWriter_fourcc", "(", "*", "'XVID'", ")", "\n", "out", "=", "cv2", ".", "VideoWriter", "(", "self", ".", "path_data", "[", "'generated_demo_video'", "]", ",", "fourcc", ",", "cap", ".", "get", "(", "cv2", ".", "CAP_PROP_FPS", ")", ",", "(", "int", "(", "cap", ".", "get", "(", "cv2", ".", "CAP_PROP_FRAME_WIDTH", ")", ")", ",", "int", "(", "cap", ".", "get", "(", "cv2", ".", "CAP_PROP_FRAME_HEIGHT", ")", ")", ")", ")", "\n", "\n", "", "while", "(", "t", "<", "data", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "print", "(", "'video analysing in progress:'", ",", "t", "/", "data", ".", "shape", "[", "0", "]", ",", "end", "=", "'\\r'", ")", "\n", "ret", ",", "frame", "=", "cap", ".", "read", "(", ")", "\n", "# Display all the data points", "\n", "\n", "# try:", "\n", "#     if int(speaker_array[t]) in speaker_label_data[self.participant_id][self.session_id]:", "\n", "#         if voice_array[t, 0] == 1:", "\n", "#             frame = self.paint_text(frame, 'Participant Speaking', (350, 200), font_size=1)", "\n", "#     # elif int(speaker_array[t]) == -1:", "\n", "#     #    frame = self.paint_text(frame, 'Unknown', (400, 200), font_size=1)", "\n", "#     # else:", "\n", "#     #    frame = self.paint_text(frame, 'Interviewer speaking', (400, 200), font_size=1)", "\n", "# except:", "\n", "#     frame = self.paint_text(frame,", "\n", "#                             '{} of {} speaking'.format(str(speaker_array[t]), len(speaker_data.keys()) - 1),", "\n", "#                             (100, 100))", "\n", "\n", "\n", "\n", "# for i in range(25):", "\n", "#     frame = self.paint_point(frame, [data[t, i * 2], data[t, i * 2 + 1]])", "\n", "# for i in range(25, 95):", "\n", "#     frame = self.paint_point(frame, [data[t, i * 2], data[t, i * 2 + 1]], color=COLOR_BLUE)", "\n", "# for i in range(95, 116):", "\n", "#     frame = self.paint_point(frame, [data[t, i * 2], data[t, i * 2 + 1]], color=COLOR_GREEN)", "\n", "# for i in range(116, 137):", "\n", "#     frame = self.paint_point(frame, [data[t, i * 2], data[t, i * 2 + 1]], color=COLOR_YELLOW)", "\n", "\n", "left_hand_data", "=", "data", "[", "t", ",", "194", ":", "232", "]", ".", "reshape", "(", "-", "1", ",", "2", ")", "\n", "right_hand_data", "=", "data", "[", "t", ",", "236", ":", "274", "]", ".", "reshape", "(", "-", "1", ",", "2", ")", "\n", "face_data", "=", "data", "[", "t", ",", "50", ":", "190", "]", ".", "reshape", "(", "-", "1", ",", "2", ")", "\n", "left_foot_data", "=", "data", "[", "t", ",", "38", ":", "44", "]", ".", "reshape", "(", "-", "1", ",", "2", ")", "\n", "right_foot_data", "=", "data", "[", "t", ",", "44", ":", "50", "]", ".", "reshape", "(", "-", "1", ",", "2", ")", "\n", "\n", "# frame = self.paint_rectangle_to_points(frame, left_hand_data, color=COLOR_GREEN)", "\n", "# frame = self.paint_rectangle_to_points(frame, right_hand_data, color=COLOR_YELLOW)", "\n", "\n", "# if leg_location_label_array[t, 0] == 1:", "\n", "#     frame = self.paint_text(frame, 'Leg cross', (790, 630), font_size=1)", "\n", "#", "\n", "# if leg_action_label_array[t, 0] == 2:", "\n", "#     frame = self.paint_text(frame, 'Leg dynamic', (790, 560), font_size=1)", "\n", "#frame = self.paint_rectangle_to_points(frame, [(540, 430), (790, 630)], color=color)", "\n", "\n", "if", "leg_fidget_array", "[", "t", ",", "0", "]", "==", "1", ":", "\n", "                ", "for", "i", "in", "range", "(", "25", ")", ":", "\n", "                    ", "frame", "=", "self", ".", "paint_point", "(", "frame", ",", "[", "data", "[", "t", ",", "i", "*", "2", "]", ",", "data", "[", "t", ",", "i", "*", "2", "+", "1", "]", "]", ",", "color", "=", "COLOR_RED", ")", "\n", "", "frame", "=", "self", ".", "paint_text", "(", "frame", ",", "'Leg Fidgeting'", ",", "(", "400", ",", "350", ")", ",", "font_size", "=", "0.7", ")", "\n", "\n", "\n", "", "if", "t", "in", "hand_cross_valid_intersect_data", ".", "keys", "(", ")", ":", "\n", "# print(t)", "\n", "                ", "rect", "=", "best_rects", "[", "t", "]", "\n", "label", "=", "label_array", "[", "t", ",", "0", "]", "\n", "# print(label)", "\n", "color", "=", "COLOR_YELLOW", "\n", "if", "label", "==", "1", ":", "\n", "                    ", "color", "=", "COLOR_RED", "\n", "frame", "=", "self", ".", "paint_text", "(", "frame", ",", "'Hand Cross Fidgeting'", ",", "(", "rect", "[", "2", "]", ",", "rect", "[", "3", "]", ")", ",", "font_size", "=", "0.5", ")", "\n", "", "else", ":", "\n", "                    ", "color", "=", "COLOR_GREEN", "\n", "frame", "=", "self", ".", "paint_text", "(", "frame", ",", "'Hand Cross'", ",", "(", "rect", "[", "2", "]", ",", "rect", "[", "3", "]", ")", ",", "font_size", "=", "0.5", ")", "\n", "\n", "", "frame", "=", "cv2", ".", "rectangle", "(", "frame", ",", "\n", "(", "rect", "[", "0", "]", "-", "10", ",", "rect", "[", "1", "]", "-", "10", ")", ",", "\n", "(", "rect", "[", "2", "]", "+", "10", ",", "rect", "[", "3", "]", "+", "10", ")", ",", "\n", "color", ",", "\n", "2", ")", "\n", "", "else", ":", "\n", "                ", "left_hand_action_label", "=", "hand_action_label_array", "[", "t", ",", "0", "]", "\n", "right_hand_action_label", "=", "hand_action_label_array", "[", "t", ",", "1", "]", "\n", "flag_left", "=", "''", "\n", "flag_right", "=", "''", "\n", "\n", "if", "left_hand_action_label", "==", "1", ":", "\n", "                    ", "if", "left_hand_to_leg_fidget_array", "[", "t", ",", "0", "]", "==", "1", ":", "\n", "                        ", "flag_left", "=", "'Left hand to leg fidgeting'", "\n", "", "if", "left_hand_to_arm_fidget_array", "[", "t", ",", "0", "]", "==", "1", ":", "\n", "                        ", "flag_left", "=", "'Left hand to arm fidgeting'", "\n", "", "if", "left_hand_to_face_fidget_array", "[", "t", ",", "0", "]", "==", "1", ":", "\n", "                        ", "flag_left", "=", "'Left hand to face'", "\n", "", "", "if", "right_hand_action_label", "==", "1", ":", "\n", "                    ", "if", "right_hand_to_leg_fidget_array", "[", "t", ",", "0", "]", "==", "1", ":", "\n", "                        ", "flag_right", "=", "'Right hand to leg fidgeting'", "\n", "", "if", "right_hand_to_arm_fidget_array", "[", "t", ",", "0", "]", "==", "1", ":", "\n", "                        ", "flag_right", "=", "'Right hand to arm fidgeting'", "\n", "", "if", "right_hand_to_face_fidget_array", "[", "t", ",", "0", "]", "==", "1", ":", "\n", "                        ", "flag_right", "=", "'Right hand to face'", "\n", "\n", "", "", "if", "flag_left", ":", "\n", "                    ", "frame", "=", "self", ".", "paint_rectangle_to_points", "(", "frame", ",", "left_hand_data", ",", "color", "=", "COLOR_RED", ")", "\n", "frame", "=", "self", ".", "paint_text", "(", "frame", ",", "flag_left", ",", "(", "400", ",", "400", ")", ",", "font_size", "=", "0.5", ")", "\n", "", "if", "flag_right", ":", "\n", "                    ", "frame", "=", "self", ".", "paint_rectangle_to_points", "(", "frame", ",", "right_hand_data", ",", "color", "=", "COLOR_RED", ")", "\n", "frame", "=", "self", ".", "paint_text", "(", "frame", ",", "flag_right", ",", "(", "400", ",", "450", ")", ",", "font_size", "=", "0.5", ")", "\n", "\n", "", "", "if", "save_video", ":", "\n", "                ", "out", ".", "write", "(", "frame", ")", "\n", "", "else", ":", "\n", "                ", "cv2", ".", "imshow", "(", "'frame'", ",", "frame", ")", "\n", "\n", "", "if", "cv2", ".", "waitKey", "(", "40", ")", "&", "0xFF", "==", "ord", "(", "'q'", ")", ":", "\n", "                ", "break", "\n", "# if t == starting:", "\n", "#     input()", "\n", "", "t", "+=", "1", "\n", "# except Exception as e:", "\n", "# print(e)", "\n", "", "if", "save_video", ":", "\n", "            ", "out", ".", "release", "(", ")", "\n", "", "cap", ".", "release", "(", ")", "\n", "cv2", ".", "destroyAllWindows", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.src.main.MainPipeline.generate_training_data": [[1926, 2053], ["participant_data.keys", "participant_data[].keys", "main.MainPipeline", "print", "print", "numpy.load", "print", "fused_data[].reshape", "fused_data[].reshape", "fused_data[].reshape", "fused_data[].reshape", "fused_data[].reshape", "fused_data[].reshape", "fused_data[].reshape", "fused_data[].reshape", "fused_data[].reshape", "fused_data[].reshape", "fused_data[].reshape", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.array().reshape", "numpy.zeros", "numpy.hstack", "print", "numpy.load", "print", "scipy.stats.zscore", "numpy.hstack", "pickle.dump", "open", "numpy.array", "scipy.signal.savgol_filter", "list", "list", "hand_action_label_array[].reshape", "hand_action_label_array[].reshape", "hand_action_label_array[].reshape", "hand_action_label_array[].reshape", "hand_action_label_array[].reshape", "hand_action_label_array[].reshape", "numpy.array().reshape.reshape().tolist", "range", "range", "numpy.array().reshape.reshape"], "methods", ["None"], ["", "def", "generate_training_data", "(", "self", ")", ":", "\n", "# slicing videos and assign labels", "\n", "        ", "for", "participant_id", "in", "participant_data", ".", "keys", "(", ")", ":", "\n", "            ", "if", "participant_id", "in", "[", "109", "]", ":", "\n", "                ", "continue", "\n", "", "for", "session_id", "in", "participant_data", "[", "participant_id", "]", ".", "keys", "(", ")", ":", "\n", "                ", "try", ":", "\n", "                    ", "sub_pipeline", "=", "MainPipeline", "(", "'test'", ",", "participant_data", "[", "participant_id", "]", "[", "session_id", "]", ")", "\n", "print", "(", "'working on'", ",", "participant_id", ",", "session_id", ")", "\n", "fused_data_path", "=", "sub_pipeline", ".", "path_data", "[", "'fused_data'", "]", "\n", "print", "(", "fused_data_path", ")", "\n", "fused_data", "=", "np", ".", "load", "(", "fused_data_path", ")", "\n", "print", "(", "fused_data", ".", "shape", ")", "\n", "\n", "hand_cross_fidget_label_array", "=", "fused_data", "[", ":", ",", "0", "]", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "# hand cross fidget data", "\n", "left_hand_arm_label_array", "=", "fused_data", "[", ":", ",", "1", "]", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "left_hand_leg_label_array", "=", "fused_data", "[", ":", ",", "2", "]", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "left_hand_face_label_array", "=", "fused_data", "[", ":", ",", "3", "]", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "right_hand_arm_label_array", "=", "fused_data", "[", ":", ",", "4", "]", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "right_hand_leg_label_array", "=", "fused_data", "[", ":", ",", "5", "]", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "right_hand_face_label_array", "=", "fused_data", "[", ":", ",", "6", "]", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "leg_location_label_array", "=", "fused_data", "[", ":", ",", "7", "]", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "leg_action_label_array", "=", "fused_data", "[", ":", ",", "8", "]", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "hand_action_label_array", "=", "fused_data", "[", ":", ",", "9", ":", "11", "]", "# shape (n, 2) NOTE!", "\n", "speaker_array", "=", "fused_data", "[", ":", ",", "11", "]", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "voice_array", "=", "fused_data", "[", ":", ",", "12", "]", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "\n", "left_hand_to_leg_fidget_array", "=", "np", ".", "zeros", "(", "(", "fused_data", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "\n", "left_hand_to_leg_fidget_array", "[", "\n", "(", "hand_action_label_array", "[", ":", ",", "0", "]", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "==", "1", ")", "&", "(", "left_hand_leg_label_array", "==", "1", ")", "]", "=", "1", "\n", "\n", "right_hand_to_leg_fidget_array", "=", "np", ".", "zeros", "(", "(", "fused_data", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "\n", "right_hand_to_leg_fidget_array", "[", "\n", "(", "hand_action_label_array", "[", ":", ",", "1", "]", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "==", "1", ")", "&", "(", "right_hand_leg_label_array", "==", "1", ")", "]", "=", "1", "\n", "\n", "left_hand_to_arm_fidget_array", "=", "np", ".", "zeros", "(", "(", "fused_data", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "\n", "left_hand_to_arm_fidget_array", "[", "\n", "(", "hand_action_label_array", "[", ":", ",", "0", "]", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "==", "1", ")", "&", "(", "left_hand_arm_label_array", "==", "1", ")", "]", "=", "1", "\n", "\n", "right_hand_to_arm_fidget_array", "=", "np", ".", "zeros", "(", "(", "fused_data", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "\n", "right_hand_to_arm_fidget_array", "[", "\n", "(", "hand_action_label_array", "[", ":", ",", "1", "]", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "==", "1", ")", "&", "(", "right_hand_arm_label_array", "==", "1", ")", "]", "=", "1", "\n", "\n", "left_hand_to_face_fidget_array", "=", "np", ".", "zeros", "(", "(", "fused_data", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "\n", "left_hand_to_face_fidget_array", "[", "\n", "(", "hand_action_label_array", "[", ":", ",", "0", "]", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "==", "1", ")", "&", "(", "left_hand_face_label_array", "==", "1", ")", "]", "=", "1", "\n", "\n", "right_hand_to_face_fidget_array", "=", "np", ".", "zeros", "(", "(", "fused_data", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "\n", "right_hand_to_face_fidget_array", "[", "\n", "(", "hand_action_label_array", "[", ":", ",", "1", "]", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "==", "1", ")", "&", "(", "right_hand_face_label_array", "==", "1", ")", "]", "=", "1", "\n", "\n", "leg_fidget_array", "=", "leg_action_label_array", "\n", "leg_fidget_array", "[", "leg_fidget_array", ">", "1", "]", "=", "1", "\n", "leg_fidget_array", "=", "np", ".", "array", "(", "savgol_filter", "(", "leg_fidget_array", ".", "reshape", "(", "-", "1", ")", ".", "tolist", "(", ")", ",", "51", ",", "3", ")", ")", ".", "reshape", "(", "\n", "(", "-", "1", ",", "1", ")", ")", "\n", "leg_fidget_array", "[", "leg_fidget_array", ">=", "0.8", "]", "=", "1", "\n", "leg_fidget_array", "[", "leg_fidget_array", "<", "0.8", "]", "=", "0", "\n", "\n", "speaking_array", "=", "np", ".", "zeros", "(", "(", "fused_data", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "\n", "for", "speaker_label", "in", "speaker_label_data", "[", "participant_id", "]", "[", "session_id", "]", ":", "\n", "                        ", "speaking_array", "[", "(", "speaker_array", "==", "speaker_label", ")", "]", "=", "1", "\n", "", "speaking_array", "[", "voice_array", "==", "0", "]", "=", "0", "\n", "# hand_cross_fidget_label_array[speaking_array == 0] = 0", "\n", "# left_hand_to_leg_fidget_array[speaking_array == 0] = 0", "\n", "# right_hand_to_leg_fidget_array[speaking_array == 0] = 0", "\n", "# left_hand_to_arm_fidget_array[speaking_array == 0] = 0", "\n", "# right_hand_to_arm_fidget_array[speaking_array == 0] = 0", "\n", "# left_hand_to_face_fidget_array[speaking_array == 0] = 0", "\n", "# right_hand_to_face_fidget_array[speaking_array == 0] = 0", "\n", "# leg_fidget_array[speaking_array == 0] = 0", "\n", "\n", "# fused_data = np.hstack((", "\n", "#     hand_cross_fidget_label_array,", "\n", "#     left_hand_to_leg_fidget_array,", "\n", "#     right_hand_to_leg_fidget_array,", "\n", "#     left_hand_to_arm_fidget_array,", "\n", "#     right_hand_to_arm_fidget_array,", "\n", "#     left_hand_to_face_fidget_array,", "\n", "#     right_hand_to_face_fidget_array,", "\n", "#     leg_fidget_array,", "\n", "#     speaking_array,", "\n", "# ))", "\n", "\n", "fused_data", "=", "np", ".", "hstack", "(", "(", "\n", "hand_cross_fidget_label_array", ",", "\n", "left_hand_arm_label_array", ",", "\n", "left_hand_leg_label_array", ",", "\n", "left_hand_face_label_array", ",", "\n", "right_hand_arm_label_array", ",", "\n", "right_hand_leg_label_array", ",", "\n", "right_hand_face_label_array", ",", "\n", "leg_location_label_array", ",", "\n", "leg_action_label_array", ",", "\n", "hand_action_label_array", ",", "# shape (n, 2) NOTE!", "\n", "speaker_array", ",", "\n", "voice_array", ",", "\n", ")", ")", "\n", "\n", "print", "(", "'processed:'", ",", "fused_data", ".", "shape", ")", "\n", "\n", "processed_data", "=", "np", ".", "load", "(", "sub_pipeline", ".", "processed_smooth_file", ")", "\n", "print", "(", "processed_data", ".", "shape", ")", "\n", "\n", "gaze_data", "=", "processed_data", "[", ":", ",", "list", "(", "range", "(", "274", ",", "282", ")", ")", "]", "\n", "AUs_data", "=", "processed_data", "[", ":", ",", "list", "(", "range", "(", "948", ",", "983", ")", ")", "]", "\n", "\n", "gaze_data", "=", "stats", ".", "zscore", "(", "gaze_data", ",", "axis", "=", "1", ",", "ddof", "=", "1", ")", "\n", "# processed_data = processed_data[:, list(range(274, 282)) + list(range(948, 983))]", "\n", "# print(processed_data.shape)", "\n", "training_data", "=", "np", ".", "hstack", "(", "(", "fused_data", ",", "gaze_data", ",", "AUs_data", ")", ")", "\n", "\n", "# fv_model = FisherVectorGMM(n_kernels=128)", "\n", "# fv_model.fit(training_data)", "\n", "# fv_training_data = fv_model.predict(training_data, normalized=False)", "\n", "# print(fv_training_data.shape)", "\n", "# # training_data = processed_data", "\n", "# training_data = {", "\n", "#     'data': training_data,", "\n", "#     'label': participant_score_data[participant_id]", "\n", "# }", "\n", "full_fused_data", "=", "{", "\n", "'data'", ":", "fused_data", ",", "\n", "'label'", ":", "participant_depression_data", "[", "participant_id", "]", ",", "\n", "}", "\n", "pickle", ".", "dump", "(", "full_fused_data", ",", "open", "(", "sub_pipeline", ".", "path_data", "[", "'full_fused_data'", "]", ",", "'wb'", ")", ")", "\n", "", "except", ":", "\n", "                    ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.hand_cross_analyser.HandCrossAnalyser.__init__": [[16, 18], ["component.basic_processor.BasicProcessor.__init__"], "methods", ["home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.line_rectangle.Line_Rectangle.__init__"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "path_data", ")", ":", "\n", "        ", "BasicProcessor", ".", "__init__", "(", "self", ",", "name", ",", "path_data", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.hand_cross_analyser.HandCrossAnalyser.compute_stationary_rectangles": [[19, 122], ["cv2.VideoCapture", "numpy.load", "int", "print", "cv2.VideoCapture.release", "intersect_data.keys", "valid_intersect_data.keys", "print", "cv2.VideoCapture.get", "print", "data[].reshape", "data[].reshape", "data[].reshape", "hand_cross_analyser.HandCrossAnalyser.check_overlap", "numpy.vstack", "len", "continuous_segments.append", "len", "continuous_segments.append", "new_segments.append", "range", "list", "list", "continuous_segments.append", "continuous_segments.append", "range", "range", "numpy.min().astype", "numpy.max().astype", "numpy.min", "numpy.max"], "methods", ["home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.basic_processor.BasicProcessor.check_overlap"], ["", "def", "compute_stationary_rectangles", "(", "self", ",", "min_length", "=", "100", ",", "cutoff", "=", "0", ")", ":", "\n", "        ", "'''\n        This function compute stationary rectangles out of all the rectangles detected in time series.\n        :return:\n        continuous_segments: list of segments\n        valid_intersect_data: stored rectangle coordinates for each valid segments\n        '''", "\n", "cap", "=", "cv2", ".", "VideoCapture", "(", "self", ".", "video_path", ")", "\n", "data", "=", "np", ".", "load", "(", "self", ".", "processed_file", ")", "\n", "intersect_data", "=", "{", "}", "\n", "# try:", "\n", "length", "=", "int", "(", "cap", ".", "get", "(", "cv2", ".", "CAP_PROP_FRAME_COUNT", ")", ")", "\n", "print", "(", "length", ")", "\n", "t", "=", "0", "\n", "while", "(", "t", "<", "data", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "print", "(", "'progress'", ",", "t", "/", "data", ".", "shape", "[", "0", "]", ",", "end", "=", "'\\r'", ")", "\n", "# Display all the data points", "\n", "'''\n            for i in range(25):\n                frame = self.paint_point(frame, [data[t, i * 2], data[t, i * 2 + 1]])\n            for i in range(25, 95):\n                frame = self.paint_point(frame, [data[t, i * 2], data[t, i * 2 + 1]], color=COLOR_BLUE)\n            for i in range(95, 116):\n                frame = self.paint_point(frame, [data[t, i * 2], data[t, i * 2 + 1]], color=COLOR_GREEN)\n            for i in range(116, 137):\n                frame = self.paint_point(frame, [data[t, i * 2], data[t, i * 2 + 1]], color=COLOR_YELLOW)\n            #'''", "\n", "left_hand_data", "=", "data", "[", "t", ",", "194", ":", "232", "]", ".", "reshape", "(", "-", "1", ",", "2", ")", "\n", "right_hand_data", "=", "data", "[", "t", ",", "236", ":", "274", "]", ".", "reshape", "(", "-", "1", ",", "2", ")", "\n", "face_data", "=", "data", "[", "t", ",", "50", ":", "190", "]", ".", "reshape", "(", "-", "1", ",", "2", ")", "\n", "\n", "# frame = self.paint_rectangle_to_points(frame, left_hand_data, color=COLOR_GREEN)", "\n", "# frame = self.paint_rectangle_to_points(frame, right_hand_data, color=COLOR_YELLOW)", "\n", "\n", "# Check hands overlapping", "\n", "intersect", "=", "self", ".", "check_overlap", "(", "left_hand_data", ",", "right_hand_data", ",", "tolerance", "=", "5", ")", "\n", "if", "intersect", "is", "not", "None", ":", "\n", "                ", "points", "=", "np", ".", "vstack", "(", "(", "left_hand_data", ",", "right_hand_data", ")", ")", "\n", "cordinates", "=", "list", "(", "np", ".", "min", "(", "points", ",", "axis", "=", "0", ")", ".", "astype", "(", "int", ")", ")", "+", "list", "(", "np", ".", "max", "(", "points", ",", "axis", "=", "0", ")", ".", "astype", "(", "int", ")", ")", "\n", "intersect_data", "[", "t", "]", "=", "cordinates", "\n", "", "t", "+=", "1", "\n", "# except Exception as e:", "\n", "# print(e)", "\n", "\n", "", "cap", ".", "release", "(", ")", "\n", "\n", "# compute continuous segment", "\n", "continuous_segments", "=", "[", "]", "\n", "for", "i", "in", "intersect_data", ".", "keys", "(", ")", ":", "\n", "            ", "if", "len", "(", "continuous_segments", ")", "==", "0", ":", "\n", "                ", "continuous_segments", ".", "append", "(", "[", "i", ",", "i", "+", "1", "]", ")", "\n", "", "else", ":", "\n", "                ", "if", "continuous_segments", "[", "-", "1", "]", "[", "1", "]", "==", "i", ":", "\n", "                    ", "continuous_segments", "[", "-", "1", "]", "[", "1", "]", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "continuous_segments", ".", "append", "(", "[", "i", ",", "i", "+", "1", "]", ")", "\n", "\n", "# validate stationarity", "\n", "# valid_intersect_data = {}", "\n", "# for session in continuous_segments:", "\n", "#     starting_time = session[0]", "\n", "#     ending_time = session[1]", "\n", "#     for i in range(starting_time + 1, ending_time):", "\n", "#         previous_rect = np.array(intersect_data[i - 1])", "\n", "#         current_rect = np.array(intersect_data[i])", "\n", "#         change = np.sum(np.power(current_rect - previous_rect, 2))", "\n", "#         if change <= 6:", "\n", "#             # rectangle stationary", "\n", "#             valid_intersect_data[i] = current_rect", "\n", "\n", "", "", "", "valid_intersect_data", "=", "intersect_data", "\n", "\n", "# recompute continuous segments", "\n", "continuous_segments", "=", "[", "]", "\n", "for", "i", "in", "valid_intersect_data", ".", "keys", "(", ")", ":", "\n", "            ", "if", "len", "(", "continuous_segments", ")", "==", "0", ":", "\n", "                ", "continuous_segments", ".", "append", "(", "[", "i", ",", "i", "+", "1", "]", ")", "\n", "", "else", ":", "\n", "                ", "if", "continuous_segments", "[", "-", "1", "]", "[", "1", "]", "==", "i", ":", "\n", "                    ", "continuous_segments", "[", "-", "1", "]", "[", "1", "]", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "continuous_segments", ".", "append", "(", "[", "i", ",", "i", "+", "1", "]", ")", "\n", "\n", "# min length of stationary rectangle", "\n", "", "", "", "new_segments", "=", "[", "]", "\n", "for", "segment", "in", "continuous_segments", ":", "\n", "            ", "if", "segment", "[", "1", "]", "-", "segment", "[", "0", "]", ">=", "(", "min_length", "+", "cutoff", "*", "2", ")", ":", "\n", "                ", "new_segments", ".", "append", "(", "[", "segment", "[", "0", "]", "+", "cutoff", ",", "segment", "[", "1", "]", "-", "cutoff", "]", ")", "\n", "if", "cutoff", "!=", "0", ":", "\n", "                    ", "for", "x", "in", "range", "(", "segment", "[", "0", "]", ",", "segment", "[", "0", "]", "+", "cutoff", ")", ":", "\n", "                        ", "del", "valid_intersect_data", "[", "x", "]", "\n", "", "for", "x", "in", "range", "(", "segment", "[", "1", "]", "-", "cutoff", ",", "segment", "[", "1", "]", ")", ":", "\n", "                        ", "del", "valid_intersect_data", "[", "x", "]", "\n", "", "", "", "else", ":", "\n", "                ", "for", "x", "in", "range", "(", "segment", "[", "0", "]", ",", "segment", "[", "1", "]", ")", ":", "\n", "                    ", "del", "valid_intersect_data", "[", "x", "]", "\n", "", "", "", "continuous_segments", "=", "new_segments", "\n", "\n", "# print(continuous_segments)", "\n", "# print(intersect_data.keys())", "\n", "# print(valid_intersect_data.keys())", "\n", "print", "(", "'\\n'", ")", "\n", "return", "continuous_segments", ",", "valid_intersect_data", "\n", "\n"]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.hand_cross_analyser.HandCrossAnalyser.compute_static_hands_without_crossing": [[123, 198], ["hand_cross_analyser.HandCrossAnalyser.compute_stationary_rectangles", "numpy.load", "cv2.VideoCapture", "int", "print", "cv2.destroyAllWindows", "cv2.VideoCapture.release", "numpy.zeros", "static_data.keys", "print", "scipy.signal.savgol_filter", "numpy.array().reshape", "range", "cv2.VideoCapture.get", "print", "cv2.VideoCapture.read", "numpy.ravel", "data[].reshape", "data[].reshape", "data[].reshape", "data[].reshape", "hand_cross_intersect_data.keys", "numpy.mean", "cv2.waitKey", "numpy.array", "new_segments.append", "numpy.power", "hand_cross_analyser.HandCrossAnalyser.paint_rectangle_to_points", "len", "continuous_segments.append", "list", "list", "continuous_segments.append", "numpy.min().astype", "numpy.max().astype", "numpy.min", "numpy.max"], "methods", ["home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.hand_cross_analyser.HandCrossAnalyser.compute_stationary_rectangles", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.elan_portal.ElanPortal.read", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.painting.paint_rectangle_to_points"], ["", "def", "compute_static_hands_without_crossing", "(", "self", ",", "hand", "=", "'left'", ",", "min_length", "=", "100", ",", "cutoff", "=", "0", ")", ":", "\n", "\n", "# read hand cross data", "\n", "        ", "hand_cross_segments", ",", "hand_cross_intersect_data", "=", "self", ".", "compute_stationary_rectangles", "(", "min_length", "=", "20", ")", "\n", "data", "=", "np", ".", "load", "(", "self", ".", "processed_smooth_file", ")", "\n", "cap", "=", "cv2", ".", "VideoCapture", "(", "self", ".", "video_path", ")", "\n", "\n", "static_data", "=", "{", "}", "\n", "# try:", "\n", "length", "=", "int", "(", "cap", ".", "get", "(", "cv2", ".", "CAP_PROP_FRAME_COUNT", ")", ")", "\n", "print", "(", "length", ")", "\n", "t", "=", "1", "\n", "while", "(", "t", "<", "data", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "print", "(", "'progress'", ",", "t", "/", "data", ".", "shape", "[", "0", "]", ",", "end", "=", "'\\r'", ")", "\n", "if", "hand", "==", "'left'", ":", "\n", "                ", "hand_data", "=", "data", "[", "t", ",", "194", ":", "232", "]", ".", "reshape", "(", "-", "1", ",", "2", ")", "\n", "previous_hand_data", "=", "data", "[", "t", "-", "1", ",", "194", ":", "232", "]", ".", "reshape", "(", "-", "1", ",", "2", ")", "\n", "", "else", ":", "\n", "                ", "hand_data", "=", "data", "[", "t", ",", "236", ":", "274", "]", ".", "reshape", "(", "-", "1", ",", "2", ")", "\n", "previous_hand_data", "=", "data", "[", "t", "-", "1", ",", "236", ":", "274", "]", ".", "reshape", "(", "-", "1", ",", "2", ")", "\n", "\n", "", "ret", ",", "frame", "=", "cap", ".", "read", "(", ")", "\n", "\n", "# without hand cross segments", "\n", "if", "t", "not", "in", "hand_cross_intersect_data", ".", "keys", "(", ")", ":", "\n", "                ", "difference", "=", "hand_data", "-", "previous_hand_data", "\n", "difference", "=", "np", ".", "mean", "(", "np", ".", "power", "(", "difference", ",", "2", ")", ")", "\n", "# print(difference)", "\n", "if", "difference", "<", "0.7", ":", "\n", "                    ", "frame", "=", "self", ".", "paint_rectangle_to_points", "(", "frame", ",", "hand_data", ",", "color", "=", "COLOR_YELLOW", ")", "\n", "points", "=", "hand_data", "\n", "cordinates", "=", "list", "(", "np", ".", "min", "(", "points", ",", "axis", "=", "0", ")", ".", "astype", "(", "int", ")", ")", "+", "list", "(", "np", ".", "max", "(", "points", ",", "axis", "=", "0", ")", ".", "astype", "(", "int", ")", ")", "\n", "static_data", "[", "t", "]", "=", "cordinates", "\n", "\n", "# cv2.imshow('frame', frame)", "\n", "", "", "k", "=", "cv2", ".", "waitKey", "(", "40", ")", "&", "0xff", "\n", "if", "k", "==", "27", ":", "\n", "                ", "break", "\n", "\n", "", "t", "+=", "1", "\n", "# input()", "\n", "", "cv2", ".", "destroyAllWindows", "(", ")", "\n", "cap", ".", "release", "(", ")", "\n", "\n", "# smoothing the data", "\n", "\n", "smooth_array", "=", "np", ".", "zeros", "(", "(", "data", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "\n", "for", "t", "in", "static_data", ".", "keys", "(", ")", ":", "\n", "            ", "smooth_array", "[", "t", ",", ":", "]", "=", "1", "\n", "", "print", "(", "smooth_array", ".", "shape", ")", "\n", "y", "=", "savgol_filter", "(", "np", ".", "ravel", "(", "smooth_array", ")", ",", "11", ",", "3", ")", "\n", "smooth_array", "=", "np", ".", "array", "(", "y", ")", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "smooth_array", "[", "smooth_array", ">=", "0.5", "]", "=", "1", "\n", "smooth_array", "[", "smooth_array", "<", "0.5", "]", "=", "0", "\n", "\n", "# compute continuous segment", "\n", "continuous_segments", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "data", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "if", "smooth_array", "[", "i", ",", "0", "]", "==", "1", ":", "\n", "                ", "if", "len", "(", "continuous_segments", ")", "==", "0", ":", "\n", "                    ", "continuous_segments", ".", "append", "(", "[", "i", ",", "i", "+", "1", "]", ")", "\n", "", "else", ":", "\n", "                    ", "if", "continuous_segments", "[", "-", "1", "]", "[", "1", "]", "==", "i", ":", "\n", "                        ", "continuous_segments", "[", "-", "1", "]", "[", "1", "]", "+=", "1", "\n", "", "else", ":", "\n", "                        ", "continuous_segments", ".", "append", "(", "[", "i", ",", "i", "+", "1", "]", ")", "\n", "\n", "", "", "", "", "new_segments", "=", "[", "]", "\n", "for", "segment", "in", "continuous_segments", ":", "\n", "            ", "if", "segment", "[", "1", "]", "-", "segment", "[", "0", "]", ">=", "(", "min_length", "+", "cutoff", "*", "2", ")", ":", "\n", "                ", "new_segments", ".", "append", "(", "[", "segment", "[", "0", "]", "+", "cutoff", ",", "segment", "[", "1", "]", "-", "cutoff", "]", ")", "\n", "\n", "", "", "continuous_segments", "=", "new_segments", "\n", "\n", "return", "continuous_segments", "\n", "\n"]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.hand_cross_analyser.HandCrossAnalyser.compute_static_and_rhythmic_with_hand_cross": [[199, 277], ["hand_cross_analyser.HandCrossAnalyser.compute_stationary_rectangles", "json.load", "numpy.load", "numpy.zeros", "json.load.keys", "print", "range", "range", "open", "int", "int", "int", "range", "print", "math.floor", "len", "len", "str", "segment.split", "segment.split", "range", "abs", "abs", "hand_cross_intersect_data.keys", "str", "int", "int", "label_centroid.keys", "len", "continuous_segments.append", "continuous_segments.append"], "methods", ["home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.hand_cross_analyser.HandCrossAnalyser.compute_stationary_rectangles"], ["", "def", "compute_static_and_rhythmic_with_hand_cross", "(", "self", ")", ":", "\n", "        ", "hand_cross_segments", ",", "hand_cross_intersect_data", "=", "self", ".", "compute_stationary_rectangles", "(", "min_length", "=", "20", ")", "\n", "\n", "label_data", "=", "json", ".", "load", "(", "open", "(", "'optical_flow_results_for_export_label.json'", ",", "'r'", ")", ")", "\n", "try", ":", "\n", "            ", "label_data", "=", "label_data", "[", "str", "(", "self", ".", "participant_id", ")", "]", "[", "str", "(", "self", ".", "session_id", ")", "]", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "print", "(", "'no hands playing data...'", ")", "\n", "label_data", "=", "{", "}", "\n", "\n", "", "window_size", "=", "100", "\n", "window_step", "=", "50", "\n", "FFT_thres", "=", "30", "\n", "STD_thres", "=", "8", "\n", "data", "=", "np", ".", "load", "(", "self", ".", "processed_file", ")", "\n", "\n", "# generate label array", "\n", "label_array", "=", "np", ".", "zeros", "(", "(", "data", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "\n", "label_centroid", "=", "{", "}", "\n", "\n", "for", "segment", "in", "label_data", ".", "keys", "(", ")", ":", "\n", "            ", "starting", "=", "int", "(", "segment", ".", "split", "(", "','", ")", "[", "0", "]", ")", "\n", "ending", "=", "int", "(", "segment", ".", "split", "(", "','", ")", "[", "1", "]", ")", "\n", "centroid", "=", "int", "(", "math", ".", "floor", "(", "(", "starting", "+", "ending", ")", "/", "2", ")", ")", "\n", "p", "=", "(", "centroid", ",", "label_data", "[", "segment", "]", "[", "0", "]", ",", "label_data", "[", "segment", "]", "[", "1", "]", ")", "\n", "label_centroid", "[", "centroid", "]", "=", "label_data", "[", "segment", "]", "\n", "\n", "", "print", "(", "'preprocessing label data'", ")", "\n", "for", "t", "in", "range", "(", "data", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "related_centroids", "=", "[", "(", "i", ",", "label_centroid", "[", "i", "]", ")", "\n", "for", "i", "in", "range", "(", "int", "(", "t", "-", "0.5", "*", "window_size", ")", ",", "int", "(", "t", "+", "0.5", "*", "window_size", ")", ")", "\n", "if", "i", "in", "label_centroid", ".", "keys", "(", ")", "]", "\n", "\n", "if", "len", "(", "related_centroids", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "", "if", "len", "(", "related_centroids", ")", "==", "1", ":", "\n", "                ", "closest_centroid", "=", "related_centroids", "[", "0", "]", "\n", "", "else", ":", "\n", "                ", "id_1", "=", "related_centroids", "[", "0", "]", "[", "0", "]", "\n", "id_2", "=", "related_centroids", "[", "1", "]", "[", "0", "]", "\n", "if", "abs", "(", "id_1", "-", "t", ")", "<", "abs", "(", "id_2", "-", "t", ")", ":", "\n", "                    ", "closest_centroid", "=", "related_centroids", "[", "0", "]", "\n", "", "else", ":", "\n", "                    ", "closest_centroid", "=", "related_centroids", "[", "1", "]", "\n", "", "", "avg_fft", "=", "closest_centroid", "[", "1", "]", "[", "0", "]", "\n", "avg_std", "=", "closest_centroid", "[", "1", "]", "[", "1", "]", "\n", "\n", "if", "avg_fft", ">=", "FFT_thres", "and", "avg_std", ">=", "STD_thres", ":", "\n", "                ", "label_array", "[", "t", ",", ":", "]", "=", "3", "# dynamic + rhythmic", "\n", "", "elif", "avg_fft", ">=", "FFT_thres", "and", "avg_std", "<", "STD_thres", ":", "\n", "                ", "label_array", "[", "t", ",", ":", "]", "=", "2", "# rhythmic", "\n", "", "elif", "avg_fft", "<", "FFT_thres", "and", "avg_std", ">=", "STD_thres", ":", "\n", "                ", "label_array", "[", "t", ",", ":", "]", "=", "1", "# dynamic", "\n", "", "elif", "avg_fft", "<", "FFT_thres", "and", "avg_std", "<", "STD_thres", ":", "\n", "                ", "label_array", "[", "t", ",", ":", "]", "=", "0", "# static", "\n", "\n", "", "", "for", "x", "in", "range", "(", "4", ")", ":", "\n", "# compute continuous segment", "\n", "            ", "continuous_segments", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "data", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "if", "i", "in", "hand_cross_intersect_data", ".", "keys", "(", ")", ":", "\n", "                    ", "if", "label_array", "[", "i", ",", "0", "]", "==", "x", ":", "\n", "                        ", "if", "len", "(", "continuous_segments", ")", "==", "0", ":", "\n", "                            ", "continuous_segments", ".", "append", "(", "[", "i", ",", "i", "+", "1", "]", ")", "\n", "", "else", ":", "\n", "                            ", "if", "continuous_segments", "[", "-", "1", "]", "[", "1", "]", "==", "i", ":", "\n", "                                ", "continuous_segments", "[", "-", "1", "]", "[", "1", "]", "+=", "1", "\n", "", "else", ":", "\n", "                                ", "continuous_segments", ".", "append", "(", "[", "i", ",", "i", "+", "1", "]", ")", "\n", "", "", "", "", "", "if", "x", "==", "0", ":", "\n", "                ", "static_segments", "=", "continuous_segments", "\n", "", "if", "x", "==", "1", ":", "\n", "                ", "dynamic_segments", "=", "continuous_segments", "\n", "", "if", "x", "==", "2", ":", "\n", "                ", "rhythmic_segments", "=", "continuous_segments", "\n", "", "if", "x", "==", "3", ":", "\n", "                ", "dynamic_rythmic_segments", "=", "continuous_segments", "\n", "", "", "return", "static_segments", ",", "dynamic_segments", ",", "rhythmic_segments", ",", "dynamic_rythmic_segments", "\n", "\n"]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.hand_cross_analyser.HandCrossAnalyser.analyse_hand_cross_optical_flow": [[279, 315], ["os.walk", "load_model", "data.keys", "json.dump", "print", "os.path.join", "os.path.join", "utility.decompose_string.decompose_string", "hand_cross_analyser.HandCrossAnalyser.analyse_sequence_new", "numpy.mean", "int", "print", "open", "hand_cross_analyser.HandCrossAnalyser.get_first_derivative", "numpy.mean.reshape", "STD.reshape", "MEAN.reshape", "label_data.setdefault().setdefault", "os.path.join", "numpy.load", "numpy.argmax", "os.path.join", "print", "load_model.predict", "label_data.setdefault"], "methods", ["home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.model.fidgeting_dnn.Fidgeting_DNN.load_model", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.decompose_string.decompose_string", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.basic_processor.BasicProcessor.analyse_sequence_new", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.basic_processor.BasicProcessor.get_first_derivative"], ["", "def", "analyse_hand_cross_optical_flow", "(", "self", ")", ":", "\n", "        ", "data", "=", "{", "}", "\n", "for", "root", ",", "dirs", ",", "files", "in", "os", ".", "walk", "(", "os", ".", "path", ".", "join", "(", "DATA_FOLDER", ",", "'hand_cross_analysis_optical_flow'", ")", ")", ":", "\n", "            ", "for", "file", "in", "files", ":", "\n", "                ", "if", "'.npy'", "in", "file", ":", "\n", "                    ", "data", "[", "file", "]", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "root", ",", "file", ")", ")", "\n", "if", "data", "[", "file", "]", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "                        ", "print", "(", "file", ",", "data", "[", "file", "]", ".", "shape", ")", "\n", "\n", "", "", "", "", "label_data", "=", "{", "}", "\n", "from", "keras", ".", "models", "import", "load_model", "\n", "model", "=", "load_model", "(", "\n", "os", ".", "path", ".", "join", "(", "DATA_FOLDER", ",", "'pre-trained'", ",", "'hierarchical_DNN.h5'", ")", "\n", ")", "\n", "for", "file", "in", "data", ".", "keys", "(", ")", ":", "\n", "            ", "participant_id", ",", "session_id", ",", "starting", ",", "ending", "=", "decompose_string", "(", "file", ")", "\n", "sub_data", "=", "data", "[", "file", "]", "\n", "if", "sub_data", ".", "shape", "[", "0", "]", "!=", "100", ":", "\n", "                ", "continue", "\n", "", "FFT", ",", "STD", ",", "MEAN", "=", "self", ".", "analyse_sequence_new", "(", "self", ".", "get_first_derivative", "(", "sub_data", ")", ")", "\n", "\n", "FFT", "=", "np", ".", "mean", "(", "FFT", ",", "axis", "=", "1", ")", "\n", "STD", "=", "STD", "# np.mean(STD)", "\n", "MEAN", "=", "MEAN", "# np.mean(MEAN, axis=0)", "\n", "\n", "single_x", "=", "[", "\n", "FFT", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", ",", "STD", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", ",", "MEAN", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", "\n", "]", "\n", "label", "=", "int", "(", "np", ".", "argmax", "(", "model", ".", "predict", "(", "single_x", ")", ",", "axis", "=", "1", ")", "[", "0", "]", ")", "\n", "print", "(", "label", ")", "\n", "label_data", ".", "setdefault", "(", "participant_id", ",", "{", "}", ")", ".", "setdefault", "(", "session_id", ",", "{", "}", ")", "[", "'{},{}'", ".", "format", "(", "starting", ",", "ending", ")", "]", "=", "label", "\n", "\n", "", "json", ".", "dump", "(", "label_data", ",", "open", "(", "\n", "os", ".", "path", ".", "join", "(", "DATA_FOLDER", ",", "'hand_cross_analysis_optical_flow'", ",", "'optical_flow_result.json'", ")", ",", "\n", "'w'", ")", ")", "\n", "print", "(", "'saving completed.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.hand_cross_analyser.HandCrossAnalyser.analyse_hand_action_optical_flow": [[317, 353], ["os.walk", "load_model", "data.keys", "json.dump", "print", "os.path.join", "os.path.join", "utility.decompose_string.decompose_string_hand", "hand_cross_analyser.HandCrossAnalyser.analyse_sequence_new", "numpy.mean", "int", "print", "open", "hand_cross_analyser.HandCrossAnalyser.get_first_derivative", "numpy.mean.reshape", "STD.reshape", "MEAN.reshape", "label_data.setdefault().setdefault().setdefault", "os.path.join", "numpy.load", "numpy.argmax", "os.path.join", "print", "load_model.predict", "label_data.setdefault().setdefault", "label_data.setdefault"], "methods", ["home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.model.fidgeting_dnn.Fidgeting_DNN.load_model", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.decompose_string.decompose_string_hand", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.basic_processor.BasicProcessor.analyse_sequence_new", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.basic_processor.BasicProcessor.get_first_derivative"], ["", "def", "analyse_hand_action_optical_flow", "(", "self", ")", ":", "\n", "        ", "data", "=", "{", "}", "\n", "for", "root", ",", "dirs", ",", "files", "in", "os", ".", "walk", "(", "os", ".", "path", ".", "join", "(", "DATA_FOLDER", ",", "'hand_action_analysis_optical_flow'", ")", ")", ":", "\n", "            ", "for", "file", "in", "files", ":", "\n", "                ", "if", "'.npy'", "in", "file", ":", "\n", "                    ", "data", "[", "file", "]", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "root", ",", "file", ")", ")", "\n", "if", "data", "[", "file", "]", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "                        ", "print", "(", "file", ",", "data", "[", "file", "]", ".", "shape", ")", "\n", "\n", "", "", "", "", "label_data", "=", "{", "}", "\n", "from", "keras", ".", "models", "import", "load_model", "\n", "model", "=", "load_model", "(", "\n", "os", ".", "path", ".", "join", "(", "DATA_FOLDER", ",", "'pre-trained'", ",", "'hierarchical_DNN_hand.h5'", ")", "\n", ")", "\n", "for", "file", "in", "data", ".", "keys", "(", ")", ":", "\n", "            ", "participant_id", ",", "session_id", ",", "starting", ",", "ending", ",", "hand", "=", "decompose_string_hand", "(", "file", ")", "\n", "sub_data", "=", "data", "[", "file", "]", "\n", "if", "sub_data", ".", "shape", "[", "0", "]", "!=", "100", ":", "\n", "                ", "continue", "\n", "", "FFT", ",", "STD", ",", "MEAN", "=", "self", ".", "analyse_sequence_new", "(", "self", ".", "get_first_derivative", "(", "sub_data", ")", ")", "\n", "\n", "FFT", "=", "np", ".", "mean", "(", "FFT", ",", "axis", "=", "1", ")", "\n", "STD", "=", "STD", "# np.mean(STD)", "\n", "MEAN", "=", "MEAN", "# np.mean(MEAN, axis=0)", "\n", "\n", "single_x", "=", "[", "\n", "FFT", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", ",", "STD", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", ",", "MEAN", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", "\n", "]", "\n", "label", "=", "int", "(", "np", ".", "argmax", "(", "model", ".", "predict", "(", "single_x", ")", ",", "axis", "=", "1", ")", "[", "0", "]", ")", "\n", "print", "(", "label", ")", "\n", "label_data", ".", "setdefault", "(", "participant_id", ",", "{", "}", ")", ".", "setdefault", "(", "session_id", ",", "{", "}", ")", ".", "setdefault", "(", "hand", ",", "{", "}", ")", "[", "'{},{}'", ".", "format", "(", "starting", ",", "ending", ")", "]", "=", "label", "\n", "\n", "", "json", ".", "dump", "(", "label_data", ",", "open", "(", "\n", "os", ".", "path", ".", "join", "(", "DATA_FOLDER", ",", "'hand_action_analysis_optical_flow'", ",", "'optical_flow_result.json'", ")", ",", "\n", "'w'", ")", ")", "\n", "print", "(", "'saving completed.'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.optical_flow_analyser.OpticalFlowAnalyser.__init__": [[16, 22], ["component.basic_processor.BasicProcessor.__init__", "numpy.load", "numpy.load"], "methods", ["home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.line_rectangle.Line_Rectangle.__init__"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "path_data", ",", "smooth", "=", "False", ")", ":", "\n", "        ", "BasicProcessor", ".", "__init__", "(", "self", ",", "name", ",", "path_data", ",", "None", ")", "\n", "if", "smooth", ":", "\n", "            ", "self", ".", "data", "=", "np", ".", "load", "(", "self", ".", "processed_smooth_file", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "data", "=", "np", ".", "load", "(", "self", ".", "processed_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.optical_flow_analyser.OpticalFlowAnalyser.run_optical_flow": [[23, 113], ["cap.set", "int", "dict", "dict", "cap.read", "cv2.cvtColor", "init_points[].reshape", "numpy.float32", "numpy.zeros_like", "print", "cap.get", "numpy.around", "good_new.reshape.reshape", "print", "cap.read", "cv2.cvtColor", "numpy.float32", "cv2.calcOpticalFlowPyrLK", "enumerate", "cv2.add", "cv2.cvtColor.copy", "good_new.reshape", "print", "numpy.around", "zip", "new.ravel", "old.ravel", "cv2.circle", "print", "cv2.imshow", "cv2.waitKey", "init_points[].reshape"], "methods", ["home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.elan_portal.ElanPortal.read", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.elan_portal.ElanPortal.read"], ["", "", "def", "run_optical_flow", "(", "self", ",", "cap", ",", "starting_time", ",", "ending_time", ",", "init_points", ",", "visualise", "=", "False", ")", ":", "\n", "        ", "'''\n        generate raw optical flow data from video\n        :return:\n        '''", "\n", "\n", "cap", ".", "set", "(", "1", ",", "starting_time", ")", "\n", "length", "=", "int", "(", "cap", ".", "get", "(", "cv2", ".", "CAP_PROP_FRAME_COUNT", ")", ")", "\n", "\n", "data", "=", "self", ".", "data", "\n", "\n", "# params for ShiTomasi corner detection", "\n", "feature_params", "=", "dict", "(", "maxCorners", "=", "100", ",", "\n", "qualityLevel", "=", "0.3", ",", "\n", "minDistance", "=", "7", ",", "\n", "blockSize", "=", "7", ")", "\n", "\n", "# Parameters for lucas kanade optical flow", "\n", "lk_params", "=", "dict", "(", "winSize", "=", "(", "15", ",", "15", ")", ",", "\n", "maxLevel", "=", "2", ",", "\n", "criteria", "=", "(", "cv2", ".", "TERM_CRITERIA_EPS", "|", "cv2", ".", "TERM_CRITERIA_COUNT", ",", "10", ",", "0.03", ")", ")", "\n", "\n", "\n", "# Take first frame", "\n", "ret", ",", "old_frame", "=", "cap", ".", "read", "(", ")", "\n", "old_gray", "=", "cv2", ".", "cvtColor", "(", "old_frame", ",", "cv2", ".", "COLOR_BGR2GRAY", ")", "\n", "# p0 = cv2.goodFeaturesToTrack(old_gray, mask=None, **feature_params)", "\n", "t", "=", "starting_time", "\n", "# init p0", "\n", "p0", "=", "init_points", "[", "t", ",", ":", "]", ".", "reshape", "(", "-", "1", ",", "2", ")", "\n", "p0", "=", "np", ".", "float32", "(", "np", ".", "around", "(", "p0", ".", "reshape", "(", "-", "1", ",", "1", ",", "2", ")", ")", ")", "\n", "\n", "# Create a mask image for drawing purposes", "\n", "mask", "=", "np", ".", "zeros_like", "(", "old_frame", ")", "\n", "\n", "# dict to save points data", "\n", "optical_flow_data", "=", "{", "}", "\n", "optical_flow_data", "[", "t", "]", "=", "p0", "\n", "t", "+=", "1", "\n", "try", ":", "\n", "            ", "while", "(", "t", "<", "ending_time", ")", ":", "\n", "                ", "print", "(", "'processing video...'", ",", "t", ",", "'of'", ",", "data", ".", "shape", "[", "0", "]", ",", "end", "=", "'\\r'", ")", "\n", "ret", ",", "frame", "=", "cap", ".", "read", "(", ")", "\n", "# cv2.imshow('frame', frame)", "\n", "frame_gray", "=", "cv2", ".", "cvtColor", "(", "frame", ",", "cv2", ".", "COLOR_BGR2GRAY", ")", "\n", "# cv2.imshow('frame_gray', frame_gray)", "\n", "\n", "p_ref", "=", "np", ".", "float32", "(", "np", ".", "around", "(", "init_points", "[", "t", ",", ":", "]", ".", "reshape", "(", "-", "1", ",", "1", ",", "2", ")", ")", ")", "\n", "\n", "# calculate optical flow", "\n", "p1", ",", "st", ",", "err", "=", "cv2", ".", "calcOpticalFlowPyrLK", "(", "old_gray", ",", "frame_gray", ",", "p0", ",", "p_ref", ",", "**", "lk_params", ")", "\n", "\n", "# Select good points", "\n", "good_new", "=", "p1", "[", "st", "==", "1", "]", "\n", "good_old", "=", "p0", "[", "st", "==", "1", "]", "\n", "\n", "# draw the tracks", "\n", "for", "i", ",", "(", "new", ",", "old", ")", "in", "enumerate", "(", "zip", "(", "good_new", ",", "good_old", ")", ")", ":", "\n", "                    ", "a", ",", "b", "=", "new", ".", "ravel", "(", ")", "\n", "c", ",", "d", "=", "old", ".", "ravel", "(", ")", "\n", "# mask = cv2.line(mask, (a, b), (c, d), color[i].tolist(), 2)", "\n", "# frame = cv2.circle(frame, (a, b), 1, color[i].tolist(), -1)", "\n", "frame", "=", "cv2", ".", "circle", "(", "frame", ",", "(", "a", ",", "b", ")", ",", "1", ",", "COLOR_YELLOW", ",", "-", "1", ")", "\n", "\n", "\n", "", "img", "=", "cv2", ".", "add", "(", "frame", ",", "mask", ")", "\n", "\n", "# Now update the previous frame and previous points", "\n", "old_gray", "=", "frame_gray", ".", "copy", "(", ")", "\n", "p0", "=", "good_new", ".", "reshape", "(", "-", "1", ",", "1", ",", "2", ")", "\n", "if", "p0", ".", "shape", "[", "0", "]", "!=", "p_ref", ".", "shape", "[", "0", "]", ":", "\n", "                    ", "print", "(", "'optical flow points missing.'", ")", "\n", "", "optical_flow_data", "[", "t", "]", "=", "good_new", "\n", "\n", "if", "visualise", ":", "\n", "                    ", "cv2", ".", "imshow", "(", "'frame'", ",", "img", ")", "\n", "\n", "", "k", "=", "cv2", ".", "waitKey", "(", "10", ")", "&", "0xff", "\n", "if", "k", "==", "27", ":", "\n", "                    ", "break", "\n", "\n", "", "t", "+=", "1", "\n", "# input()", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "            ", "print", "(", "t", ",", "e", ")", "\n", "pass", "\n", "\n", "", "print", "(", "'\\n'", ")", "\n", "\n", "return", "optical_flow_data", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.label_machine.LabelMachine.__init__": [[9, 12], ["component.basic_processor.BasicProcessor.__init__"], "methods", ["home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.line_rectangle.Line_Rectangle.__init__"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "path_data", ",", "label_type", "=", "'hand_cross'", ")", ":", "\n", "        ", "BasicProcessor", ".", "__init__", "(", "self", ",", "name", ",", "path_data", ",", "None", ")", "\n", "self", ".", "label_type", "=", "label_type", "\n", "\n"]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.label_machine.LabelMachine.start_labelling": [[13, 74], ["os.walk", "data.keys", "os.path.join", "os.path.join().replace", "utility.decompose_string.decompose_string_hand", "utility.decompose_string.decompose_string", "os.path.exists", "print", "np.load", "os.path.join", "print", "print", "component.basic_processor.BasicProcessor", "label_machine.LabelMachine.analyse_sequence_new", "print", "print", "print", "open", "print", "f.write", "os.path.join", "str", "label_machine.LabelMachine.get_first_derivative", "np.mean", "np.mean", "np.mean", "np.max", "print", "component.basic_processor.BasicProcessor.show_frames", "input", "np.mean"], "methods", ["home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.decompose_string.decompose_string_hand", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.decompose_string.decompose_string", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.basic_processor.BasicProcessor.analyse_sequence_new", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.basic_processor.BasicProcessor.get_first_derivative", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.video_processor.VideoProcessor.show_frames"], ["", "def", "start_labelling", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "label_type", "==", "'hand_cross'", ":", "\n", "            ", "Label_Folder", "=", "'hand_cross_analysis_optical_flow_label'", "\n", "", "elif", "self", ".", "label_type", "==", "'leg'", ":", "\n", "            ", "Label_Folder", "=", "'leg_action_analysis_optical_flow_label'", "\n", "", "elif", "self", ".", "label_type", "==", "'left_hand'", ":", "\n", "            ", "Label_Folder", "=", "'hand_action_analysis_optical_flow_label'", "\n", "", "elif", "self", ".", "label_type", "==", "'right_hand'", ":", "\n", "            ", "Label_Folder", "=", "'hand_action_analysis_optical_flow_label'", "\n", "", "data", "=", "{", "}", "\n", "for", "root", ",", "dirs", ",", "files", "in", "os", ".", "walk", "(", "os", ".", "path", ".", "join", "(", "DATA_FOLDER", ",", "Label_Folder", ")", ")", ":", "\n", "            ", "for", "file", "in", "files", ":", "\n", "                ", "if", "self", ".", "label_type", "==", "'left_hand'", ":", "\n", "                    ", "if", "'_right'", "in", "file", ":", "\n", "                        ", "continue", "\n", "", "", "if", "self", ".", "label_type", "==", "'right_hand'", ":", "\n", "                    ", "if", "'_left'", "in", "file", ":", "\n", "                        ", "continue", "\n", "", "", "if", "'.npy'", "in", "file", ":", "\n", "                    ", "data", "[", "file", "]", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "root", ",", "file", ")", ")", "\n", "\n", "", "", "", "i", "=", "0", "\n", "for", "file_name", "in", "data", ".", "keys", "(", ")", ":", "\n", "            ", "i", "+=", "1", "\n", "if", "self", ".", "label_type", "==", "'left_hand'", "or", "self", ".", "label_type", "==", "'right_hand'", ":", "\n", "                ", "participant_id", ",", "session_id", ",", "starting", ",", "ending", ",", "hand", "=", "decompose_string_hand", "(", "file_name", ")", "\n", "", "else", ":", "\n", "                ", "participant_id", ",", "session_id", ",", "starting", ",", "ending", "=", "decompose_string", "(", "file_name", ")", "\n", "", "sub_data", "=", "data", "[", "file_name", "]", "\n", "label_file_path", "=", "os", ".", "path", ".", "join", "(", "DATA_FOLDER", ",", "Label_Folder", ",", "file_name", ")", ".", "replace", "(", "'.npy'", ",", "'.label2'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "label_file_path", ")", ":", "\n", "                ", "try", ":", "\n", "# start labelling", "\n", "                    ", "print", "(", "'currently working on:'", ",", "file_name", ")", "\n", "print", "(", "'no:'", ",", "str", "(", "i", ")", ")", "\n", "sub_pipeline", "=", "BasicProcessor", "(", "'data'", ",", "participant_data", "[", "participant_id", "]", "[", "session_id", "]", ")", "\n", "\n", "FFT", ",", "STD", ",", "MEAN", "=", "self", ".", "analyse_sequence_new", "(", "self", ".", "get_first_derivative", "(", "sub_data", ")", ")", "\n", "print", "(", "np", ".", "mean", "(", "FFT", ",", "axis", "=", "1", ")", ")", "\n", "print", "(", "np", ".", "mean", "(", "STD", ")", ")", "\n", "print", "(", "np", ".", "mean", "(", "MEAN", ")", ")", "\n", "\n", "num", "=", "''", "\n", "if", "np", ".", "max", "(", "np", ".", "mean", "(", "FFT", ",", "axis", "=", "1", ")", ")", "<", "15", ":", "\n", "                        ", "num", "=", "'0'", "\n", "print", "(", "'auto skipped'", ")", "\n", "\n", "", "while", "num", "==", "''", ":", "\n", "                        ", "sub_pipeline", ".", "show_frames", "(", "starting", ",", "ending", ")", "\n", "num", "=", "input", "(", "'input option: blank for replay, 0 for static, 1 for dynamic, 2 for rhythmic'", ")", "\n", "if", "num", "==", "'q'", ":", "\n", "                            ", "return", "\n", "", "", "", "except", ":", "\n", "                    ", "num", "=", "'-1'", "\n", "", "with", "open", "(", "label_file_path", ",", "'w'", ")", "as", "f", ":", "\n", "                    ", "print", "(", "'saving to'", ",", "label_file_path", ")", "\n", "f", ".", "write", "(", "num", ")", "\n", "\n", "\n", "", "", "else", ":", "\n", "                ", "print", "(", "'already labelled:'", ",", "file_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.leg_location_analyser.LegLocationAnalyser.__init__": [[16, 18], ["component.basic_processor.BasicProcessor.__init__"], "methods", ["home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.line_rectangle.Line_Rectangle.__init__"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "path_data", ")", ":", "\n", "        ", "BasicProcessor", ".", "__init__", "(", "self", ",", "name", ",", "path_data", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.leg_location_analyser.LegLocationAnalyser.plot_leg_joints": [[20, 48], ["cv2.VideoCapture", "np.load", "cv2.VideoCapture.isOpened", "cv2.VideoCapture.release", "cv2.destroyAllWindows", "cv2.VideoCapture.read", "range", "cv2.imshow", "leg_location_analyser.LegLocationAnalyser.paint_point", "leg_location_analyser.LegLocationAnalyser.paint_text", "leg_location_analyser.LegLocationAnalyser.paint_line", "ord", "str", "cv2.waitKey"], "methods", ["home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.elan_portal.ElanPortal.read", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.painting.paint_point", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.painting.paint_text", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.painting.paint_line"], ["", "def", "plot_leg_joints", "(", "self", ")", ":", "\n", "        ", "cap", "=", "cv2", ".", "VideoCapture", "(", "self", ".", "video_path", ")", "\n", "data", "=", "np", ".", "load", "(", "self", ".", "processed_file", ")", "\n", "t", "=", "0", "\n", "while", "(", "cap", ".", "isOpened", "(", ")", ")", ":", "\n", "            ", "ret", ",", "frame", "=", "cap", ".", "read", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "0", ",", "25", ")", ":", "\n", "                ", "frame", "=", "self", ".", "paint_point", "(", "frame", ",", "[", "data", "[", "t", ",", "2", "*", "i", "]", ",", "data", "[", "t", ",", "2", "*", "i", "+", "1", "]", "]", ",", "color", "=", "COLOR_YELLOW", ")", "\n", "frame", "=", "self", ".", "paint_text", "(", "frame", ",", "str", "(", "i", ")", ",", "[", "data", "[", "t", ",", "2", "*", "i", "]", ",", "data", "[", "t", ",", "2", "*", "i", "+", "1", "]", "]", ",", "\n", "font_size", "=", "0.5", ",", "color", "=", "COLOR_YELLOW", ")", "\n", "\n", "", "for", "connection", "in", "BODY_CONNECTION", "[", "12", ":", "]", ":", "\n", "                ", "point1", "=", "connection", "[", "0", "]", "\n", "point2", "=", "connection", "[", "1", "]", "\n", "frame", "=", "self", ".", "paint_line", "(", "frame", ",", "\n", "[", "data", "[", "t", ",", "2", "*", "point1", "]", ",", "data", "[", "t", ",", "2", "*", "point1", "+", "1", "]", "]", ",", "\n", "[", "data", "[", "t", ",", "2", "*", "point2", "]", ",", "data", "[", "t", ",", "2", "*", "point2", "+", "1", "]", "]", ",", "\n", "color", "=", "COLOR_YELLOW", ")", "\n", "\n", "", "cv2", ".", "imshow", "(", "'frame'", ",", "frame", ")", "\n", "if", "cv2", ".", "waitKey", "(", "40", ")", "&", "0xFF", "==", "ord", "(", "'q'", ")", ":", "\n", "                ", "break", "\n", "# input()", "\n", "", "t", "+=", "1", "\n", "\n", "", "cap", ".", "release", "(", ")", "\n", "cv2", ".", "destroyAllWindows", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.leg_location_analyser.LegLocationAnalyser.compute_leg_intersection": [[50, 179], ["cv2.VideoCapture", "np.load", "cv2.VideoCapture.release", "scipy.signal.savgol_filter", "range", "cv2.VideoCapture.release", "cv2.destroyAllWindows", "intersect_data.keys", "cv2.VideoCapture.read", "print", "utility.line.Line", "utility.line.Line", "utility.line.Line", "utility.line.Line", "utility.line.Line", "utility.line.Line", "utility.line.Line", "utility.line.Line", "utility.line.Line", "utility.line.Line", "int", "len", "np.shape", "scipy.signal.savgol_filter.append", "scipy.signal.savgol_filter.append", "ord", "round", "len", "continuous_segments.append", "new_segments.append", "range", "utility.line.Line.line_intersection", "cv2.waitKey", "continuous_segments.append", "range", "range"], "methods", ["home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.elan_portal.ElanPortal.read", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.line.Line.line_intersection"], ["", "def", "compute_leg_intersection", "(", "self", ",", "min_length", "=", "100", ",", "cutoff", "=", "0", ")", ":", "\n", "        ", "cap", "=", "cv2", ".", "VideoCapture", "(", "self", ".", "video_path", ",", "0", ")", "\n", "data", "=", "np", ".", "load", "(", "self", ".", "processed_smooth_file", ")", "\n", "\n", "intersect_data_raw", "=", "[", "]", "\n", "intersect_data", "=", "{", "}", "\n", "\n", "t", "=", "0", "\n", "while", "(", "t", "<", "np", ".", "shape", "(", "data", ")", "[", "0", "]", ")", ":", "\n", "            ", "ret", ",", "frame", "=", "cap", ".", "read", "(", ")", "\n", "print", "(", "'progress'", ",", "t", "/", "data", ".", "shape", "[", "0", "]", ",", "end", "=", "'\\r'", ")", "\n", "intersection", "=", "False", "\n", "\n", "# Criterion 1: Toe Position", "\n", "rtoe", "=", "[", "data", "[", "t", ",", "2", "*", "22", "]", ",", "data", "[", "t", ",", "2", "*", "22", "+", "1", "]", "]", "\n", "ltoe", "=", "[", "data", "[", "t", ",", "2", "*", "19", "]", ",", "data", "[", "t", ",", "2", "*", "19", "+", "1", "]", "]", "\n", "\n", "if", "rtoe", "[", "0", "]", ">", "ltoe", "[", "0", "]", ":", "\n", "                ", "intersection", "=", "True", "\n", "\n", "# Criterion 2: Intersection", "\n", "", "rlowerleg", "=", "Line", "(", "(", "data", "[", "t", ",", "2", "*", "10", "]", ",", "data", "[", "t", ",", "2", "*", "10", "+", "1", "]", ")", ",", "(", "data", "[", "t", ",", "2", "*", "11", "]", ",", "data", "[", "t", ",", "2", "*", "11", "+", "1", "]", ")", ")", "\n", "llowerleg", "=", "Line", "(", "(", "data", "[", "t", ",", "2", "*", "13", "]", ",", "data", "[", "t", ",", "2", "*", "13", "+", "1", "]", ")", ",", "(", "data", "[", "t", ",", "2", "*", "14", "]", ",", "data", "[", "t", ",", "2", "*", "14", "+", "1", "]", ")", ")", "\n", "rthigh", "=", "Line", "(", "(", "data", "[", "t", ",", "2", "*", "9", "]", ",", "data", "[", "t", ",", "2", "*", "9", "+", "1", "]", ")", ",", "(", "data", "[", "t", ",", "2", "*", "10", "]", ",", "data", "[", "t", ",", "2", "*", "10", "+", "1", "]", ")", ")", "\n", "lthigh", "=", "Line", "(", "(", "data", "[", "t", ",", "2", "*", "12", "]", ",", "data", "[", "t", ",", "2", "*", "12", "+", "1", "]", ")", ",", "(", "data", "[", "t", ",", "2", "*", "13", "]", ",", "data", "[", "t", ",", "2", "*", "13", "+", "1", "]", ")", ")", "\n", "rfoot", "=", "Line", "(", "(", "data", "[", "t", ",", "2", "*", "11", "]", ",", "data", "[", "t", ",", "2", "*", "11", "+", "1", "]", ")", ",", "(", "data", "[", "t", ",", "2", "*", "22", "]", ",", "data", "[", "t", ",", "2", "*", "22", "+", "1", "]", ")", ")", "\n", "lfoot", "=", "Line", "(", "(", "data", "[", "t", ",", "2", "*", "14", "]", ",", "data", "[", "t", ",", "2", "*", "14", "+", "1", "]", ")", ",", "(", "data", "[", "t", ",", "2", "*", "19", "]", ",", "data", "[", "t", ",", "2", "*", "19", "+", "1", "]", ")", ")", "\n", "rheel", "=", "Line", "(", "(", "data", "[", "t", ",", "2", "*", "11", "]", ",", "data", "[", "t", ",", "2", "*", "11", "+", "1", "]", ")", ",", "(", "data", "[", "t", ",", "2", "*", "24", "]", ",", "data", "[", "t", ",", "2", "*", "24", "+", "1", "]", ")", ")", "\n", "lheel", "=", "Line", "(", "(", "data", "[", "t", ",", "2", "*", "14", "]", ",", "data", "[", "t", ",", "2", "*", "14", "+", "1", "]", ")", ",", "(", "data", "[", "t", ",", "2", "*", "21", "]", ",", "data", "[", "t", ",", "2", "*", "21", "+", "1", "]", ")", ")", "\n", "rtoe", "=", "Line", "(", "(", "data", "[", "t", ",", "2", "*", "22", "]", ",", "data", "[", "t", ",", "2", "*", "22", "+", "1", "]", ")", ",", "(", "data", "[", "t", ",", "2", "*", "23", "]", ",", "data", "[", "t", ",", "2", "*", "23", "+", "1", "]", ")", ")", "\n", "ltoe", "=", "Line", "(", "(", "data", "[", "t", ",", "2", "*", "19", "]", ",", "data", "[", "t", ",", "2", "*", "19", "+", "1", "]", ")", ",", "(", "data", "[", "t", ",", "2", "*", "20", "]", ",", "data", "[", "t", ",", "2", "*", "20", "+", "1", "]", ")", ")", "\n", "\n", "right_list", "=", "[", "rlowerleg", ",", "rthigh", ",", "rfoot", ",", "rheel", ",", "rtoe", "]", "\n", "left_list", "=", "[", "llowerleg", ",", "lthigh", ",", "lfoot", ",", "lheel", ",", "ltoe", "]", "\n", "\n", "for", "right_joint", "in", "right_list", ":", "\n", "                ", "for", "left_joint", "in", "left_list", ":", "\n", "                    ", "lr_intersection", "=", "Line", ".", "line_intersection", "(", "right_joint", ",", "left_joint", ")", "\n", "\n", "if", "lr_intersection", "[", "0", "]", "is", "not", "None", ":", "\n", "# # Right Thigh", "\n", "# frame = self.paint_line(frame,", "\n", "#                         [right_joint.x1, right_joint.y1],", "\n", "#                         [right_joint.x2, right_joint.y2],", "\n", "#                         color=COLOR_YELLOW)", "\n", "#", "\n", "# # Left Thigh", "\n", "# frame = self.paint_line(frame,", "\n", "#                         [left_joint.x1, left_joint.y1],", "\n", "#                         [left_joint.x2, left_joint.y2],", "\n", "#                         color=COLOR_YELLOW)", "\n", "#", "\n", "# frame = self.paint_point(frame, lr_intersection, color=COLOR_YELLOW)", "\n", "\n", "                        ", "intersection", "=", "True", "\n", "\n", "# Save Raw Data", "\n", "", "", "", "if", "intersection", "==", "True", ":", "\n", "                ", "intersect_data_raw", ".", "append", "(", "1", ")", "\n", "", "else", ":", "\n", "                ", "intersect_data_raw", ".", "append", "(", "0", ")", "\n", "\n", "", "if", "cv2", ".", "waitKey", "(", "1", ")", "&", "0xFF", "==", "ord", "(", "'q'", ")", ":", "\n", "                ", "break", "\n", "# if t == 0:", "\n", "# input()", "\n", "", "t", "+=", "1", "\n", "\n", "", "cap", ".", "release", "(", ")", "\n", "\n", "# Smoothing", "\n", "intersect_data_raw", "=", "savgol_filter", "(", "intersect_data_raw", ",", "21", ",", "2", ")", "\n", "intersect_data_raw", "=", "[", "int", "(", "round", "(", "i", ")", ")", "for", "i", "in", "intersect_data_raw", "]", "\n", "# print(intersect_data_raw)", "\n", "\n", "for", "t", "in", "range", "(", "len", "(", "intersect_data_raw", ")", ")", ":", "\n", "            ", "if", "intersect_data_raw", "[", "t", "]", "==", "1", ":", "\n", "                ", "intersect_data", "[", "t", "]", "=", "None", "\n", "\n", "# Visualize Joint", "\n", "# cap = cv2.VideoCapture(self.video_path, 0)", "\n", "# t = 0", "\n", "# while (t < np.shape(data)[0]):", "\n", "#     ret, frame = cap.read()", "\n", "#", "\n", "#     if t in intersect_data:", "\n", "#         for connection in BODY_CONNECTION[12:]:", "\n", "#             point1 = connection[0]", "\n", "#             point2 = connection[1]", "\n", "#             frame = self.paint_line(frame,", "\n", "#                                     [data[t, 2 * point1], data[t, 2 * point1 + 1]],", "\n", "#                                     [data[t, 2 * point2], data[t, 2 * point2 + 1]],", "\n", "#                                     color=COLOR_YELLOW)", "\n", "#", "\n", "#     cv2.imshow('frame', frame)", "\n", "#     if cv2.waitKey(1) & 0xFF == ord('q'):", "\n", "#         break", "\n", "#     t += 1", "\n", "\n", "", "", "cap", ".", "release", "(", ")", "\n", "cv2", ".", "destroyAllWindows", "(", ")", "\n", "\n", "# Continuous segments", "\n", "continuous_segments", "=", "[", "]", "\n", "for", "i", "in", "intersect_data", ".", "keys", "(", ")", ":", "\n", "            ", "if", "len", "(", "continuous_segments", ")", "==", "0", ":", "\n", "                ", "continuous_segments", ".", "append", "(", "[", "i", ",", "i", "+", "1", "]", ")", "\n", "", "else", ":", "\n", "                ", "if", "continuous_segments", "[", "-", "1", "]", "[", "1", "]", "==", "i", ":", "\n", "                    ", "continuous_segments", "[", "-", "1", "]", "[", "1", "]", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "continuous_segments", ".", "append", "(", "[", "i", ",", "i", "+", "1", "]", ")", "\n", "\n", "# min length of stationary rectangle", "\n", "", "", "", "new_segments", "=", "[", "]", "\n", "for", "segment", "in", "continuous_segments", ":", "\n", "            ", "if", "segment", "[", "1", "]", "-", "segment", "[", "0", "]", ">=", "(", "min_length", "+", "cutoff", "*", "2", ")", ":", "\n", "                ", "new_segments", ".", "append", "(", "[", "segment", "[", "0", "]", "+", "cutoff", ",", "segment", "[", "1", "]", "-", "cutoff", "]", ")", "\n", "if", "cutoff", "!=", "0", ":", "\n", "                    ", "for", "x", "in", "range", "(", "segment", "[", "0", "]", ",", "segment", "[", "0", "]", "+", "cutoff", ")", ":", "\n", "                        ", "del", "intersect_data", "[", "x", "]", "\n", "", "for", "x", "in", "range", "(", "segment", "[", "1", "]", "-", "cutoff", ",", "segment", "[", "1", "]", ")", ":", "\n", "                        ", "del", "intersect_data", "[", "x", "]", "\n", "", "", "", "else", ":", "\n", "                ", "for", "x", "in", "range", "(", "segment", "[", "0", "]", ",", "segment", "[", "1", "]", ")", ":", "\n", "                    ", "del", "intersect_data", "[", "x", "]", "\n", "", "", "", "continuous_segments", "=", "new_segments", "\n", "\n", "return", "continuous_segments", ",", "intersect_data", "\n", "\n"]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.leg_location_analyser.LegLocationAnalyser.export_elan_portal": [[180, 193], ["utility.elan_portal.ElanPortal", "leg_location_analyser.LegLocationAnalyser.compute_leg_intersection", "cv2.VideoCapture", "cv2.VideoCapture.get", "print", "leg_location_analyser.LegLocationAnalyser.export_elan_portal.transfer_to_secs"], "methods", ["home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.leg_location_analyser.LegLocationAnalyser.compute_leg_intersection"], ["", "def", "export_elan_portal", "(", "self", ")", ":", "\n", "        ", "portal", "=", "ElanPortal", "(", ")", "\n", "continuous_segments", ",", "valid_intersect_data", "=", "self", ".", "compute_leg_intersection", "(", "cutoff", "=", "10", ",", "min_length", "=", "20", ")", "\n", "cap", "=", "cv2", ".", "VideoCapture", "(", "self", ".", "video_path", ")", "\n", "fps", "=", "cap", ".", "get", "(", "cv2", ".", "CAP_PROP_FPS", ")", "\n", "print", "(", "'fps:'", ",", "fps", ")", "\n", "\n", "def", "transfer_to_secs", "(", "segments", ")", ":", "\n", "            ", "return", "(", "np", ".", "array", "(", "segments", ")", "/", "fps", ")", ".", "tolist", "(", ")", "\n", "\n", "", "continuous_segments", "=", "transfer_to_secs", "(", "continuous_segments", ")", "\n", "portal", ".", "add_tier", "(", "'Leg Location'", ",", "'on leg'", ",", "continuous_segments", ")", "\n", "portal", ".", "export", "(", "'test.txt'", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.hand_location_analyser.HandLocationAnalyser.__init__": [[24, 27], ["component.basic_processor.BasicProcessor.__init__"], "methods", ["home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.line_rectangle.Line_Rectangle.__init__"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "path_data", ",", "hand", "=", "'left'", ")", ":", "\n", "        ", "BasicProcessor", ".", "__init__", "(", "self", ",", "name", ",", "path_data", ",", "None", ")", "\n", "self", ".", "hand", "=", "hand", "\n", "\n"]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.hand_location_analyser.HandLocationAnalyser.compute_hand_intersection": [[28, 33], ["hand_location_analyser.HandLocationAnalyser.compute_left_hand_intersection", "hand_location_analyser.HandLocationAnalyser.compute_right_hand_intersection"], "methods", ["home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.hand_location_analyser.HandLocationAnalyser.compute_left_hand_intersection", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.hand_location_analyser.HandLocationAnalyser.compute_right_hand_intersection"], ["", "def", "compute_hand_intersection", "(", "self", ",", "min_length", "=", "100", ",", "cutoff", "=", "0", ")", ":", "\n", "        ", "if", "self", ".", "hand", "==", "'left'", ":", "\n", "            ", "return", "self", ".", "compute_left_hand_intersection", "(", "min_length", "=", "min_length", ",", "cutoff", "=", "cutoff", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "compute_right_hand_intersection", "(", "min_length", "=", "min_length", ",", "cutoff", "=", "cutoff", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.hand_location_analyser.HandLocationAnalyser.joint_to_quad": [[34, 66], ["int", "int", "tuple", "int", "int", "tuple", "int", "int", "tuple", "int", "int", "tuple", "utility.quadrilateral.Quadrilateral", "numpy.errstate", "numpy.nan_to_num", "numpy.nan_to_num", "numpy.sqrt", "numpy.sqrt"], "methods", ["None"], ["", "", "def", "joint_to_quad", "(", "self", ",", "point1", ",", "point2", ",", "width", "=", "30", ")", ":", "\n", "        ", "x1", "=", "point1", "[", "0", "]", "\n", "y1", "=", "point1", "[", "1", "]", "\n", "x2", "=", "point2", "[", "0", "]", "\n", "y2", "=", "point2", "[", "1", "]", "\n", "# tan_theta = (x2 - x1) / (y1 - y2)", "\n", "\n", "with", "np", ".", "errstate", "(", "divide", "=", "'ignore'", ",", "invalid", "=", "'ignore'", ")", ":", "\n", "            ", "sin_theta", "=", "(", "x2", "-", "x1", ")", "/", "np", ".", "sqrt", "(", "(", "x2", "-", "x1", ")", "**", "2", "+", "(", "y1", "-", "y2", ")", "**", "2", ")", "\n", "cos_theta", "=", "(", "y1", "-", "y2", ")", "/", "np", ".", "sqrt", "(", "(", "x2", "-", "x1", ")", "**", "2", "+", "(", "y1", "-", "y2", ")", "**", "2", ")", "\n", "sin_theta", "=", "np", ".", "nan_to_num", "(", "sin_theta", ")", "\n", "cos_theta", "=", "np", ".", "nan_to_num", "(", "cos_theta", ")", "\n", "\n", "", "xa", "=", "int", "(", "x1", "+", "width", "*", "cos_theta", ")", "\n", "ya", "=", "int", "(", "y1", "+", "width", "*", "sin_theta", ")", "\n", "pointa", "=", "tuple", "(", "[", "xa", ",", "ya", "]", ")", "\n", "\n", "xb", "=", "int", "(", "x2", "+", "width", "*", "cos_theta", ")", "\n", "yb", "=", "int", "(", "y2", "+", "width", "*", "sin_theta", ")", "\n", "pointb", "=", "tuple", "(", "[", "xb", ",", "yb", "]", ")", "\n", "\n", "xc", "=", "int", "(", "x2", "-", "width", "*", "cos_theta", ")", "\n", "yc", "=", "int", "(", "y2", "-", "width", "*", "sin_theta", ")", "\n", "pointc", "=", "tuple", "(", "[", "xc", ",", "yc", "]", ")", "\n", "\n", "xd", "=", "int", "(", "x1", "-", "width", "*", "cos_theta", ")", "\n", "yd", "=", "int", "(", "y1", "-", "width", "*", "sin_theta", ")", "\n", "pointd", "=", "tuple", "(", "[", "xd", ",", "yd", "]", ")", "\n", "\n", "quad", "=", "Quadrilateral", "(", "pointa", ",", "pointb", ",", "pointc", ",", "pointd", ")", "\n", "\n", "return", "quad", "\n", "\n"]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.hand_location_analyser.HandLocationAnalyser.check_quad_overlap": [[67, 71], ["utility.quadrilateral.Quadrilateral.quadrilateral_intersection"], "methods", ["home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.quadrilateral.Quadrilateral.quadrilateral_intersection"], ["", "def", "check_quad_overlap", "(", "self", ",", "alpha", ",", "beta", ",", "tolerance", "=", "0", ")", ":", "\n", "        ", "intersect_check", "=", "Quadrilateral", ".", "quadrilateral_intersection", "(", "alpha", ",", "beta", ",", "tolerance", "=", "tolerance", ")", "\n", "\n", "return", "intersect_check", "\n", "\n"]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.hand_location_analyser.HandLocationAnalyser.compute_right_hand_intersection": [[72, 289], ["cv2.VideoCapture", "numpy.load", "component.hand_cross_analyser.HandCrossAnalyser", "component.hand_cross_analyser.HandCrossAnalyser.compute_stationary_rectangles", "cv2.VideoCapture.release", "cv2.destroyAllWindows", "valid_intersect_data.keys", "valid_intersect_data.keys", "valid_intersect_data.keys", "cv2.VideoCapture.read", "print", "data[].reshape", "data[].reshape", "data[].reshape", "utility.quadrilateral.Quadrilateral", "numpy.shape", "hand_cross_intersect_data.keys", "hand_location_analyser.HandLocationAnalyser.joint_to_quad", "hand_location_analyser.HandLocationAnalyser.joint_to_quad", "hand_location_analyser.HandLocationAnalyser.check_quad_overlap", "hand_location_analyser.HandLocationAnalyser.check_quad_overlap", "hand_location_analyser.HandLocationAnalyser.joint_to_quad", "hand_location_analyser.HandLocationAnalyser.joint_to_quad", "hand_location_analyser.HandLocationAnalyser.joint_to_quad", "hand_location_analyser.HandLocationAnalyser.joint_to_quad", "hand_location_analyser.HandLocationAnalyser.check_quad_overlap", "hand_location_analyser.HandLocationAnalyser.check_quad_overlap", "hand_location_analyser.HandLocationAnalyser.check_quad_overlap", "hand_location_analyser.HandLocationAnalyser.check_quad_overlap", "hand_location_analyser.HandLocationAnalyser.check_rect_overlap", "ord", "len", "continuous_segments.append", "new_segments.append", "range", "len", "continuous_segments.append", "new_segments.append", "range", "len", "continuous_segments.append", "new_segments.append", "range", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "numpy.min().astype", "numpy.min().astype", "numpy.max().astype", "numpy.min().astype", "numpy.max().astype", "numpy.max().astype", "numpy.min().astype", "numpy.max().astype", "cv2.waitKey", "continuous_segments.append", "range", "range", "continuous_segments.append", "range", "range", "continuous_segments.append", "range", "range", "numpy.min", "numpy.min", "numpy.max", "numpy.min", "numpy.max", "numpy.max", "numpy.min", "numpy.max"], "methods", ["home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.hand_cross_analyser.HandCrossAnalyser.compute_stationary_rectangles", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.elan_portal.ElanPortal.read", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.hand_location_analyser.HandLocationAnalyser.joint_to_quad", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.hand_location_analyser.HandLocationAnalyser.joint_to_quad", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.hand_location_analyser.HandLocationAnalyser.check_quad_overlap", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.hand_location_analyser.HandLocationAnalyser.check_quad_overlap", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.hand_location_analyser.HandLocationAnalyser.joint_to_quad", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.hand_location_analyser.HandLocationAnalyser.joint_to_quad", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.hand_location_analyser.HandLocationAnalyser.joint_to_quad", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.hand_location_analyser.HandLocationAnalyser.joint_to_quad", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.hand_location_analyser.HandLocationAnalyser.check_quad_overlap", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.hand_location_analyser.HandLocationAnalyser.check_quad_overlap", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.hand_location_analyser.HandLocationAnalyser.check_quad_overlap", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.hand_location_analyser.HandLocationAnalyser.check_quad_overlap", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.basic_processor.BasicProcessor.check_rect_overlap"], ["", "def", "compute_right_hand_intersection", "(", "self", ",", "min_length", "=", "100", ",", "cutoff", "=", "0", ")", ":", "\n", "        ", "cap", "=", "cv2", ".", "VideoCapture", "(", "self", ".", "video_path", ")", "\n", "data", "=", "np", ".", "load", "(", "self", ".", "processed_smooth_file", ")", "\n", "\n", "# try:", "\n", "hand_arm_intersect_data", "=", "{", "}", "\n", "hand_leg_intersect_data", "=", "{", "}", "\n", "hand_face_intersect_data", "=", "{", "}", "\n", "\n", "instance_hand_cross", "=", "HandCrossAnalyser", "(", "self", ".", "name", ",", "self", ".", "path_data", ")", "\n", "continuous_segments", ",", "hand_cross_intersect_data", "=", "instance_hand_cross", ".", "compute_stationary_rectangles", "(", "cutoff", "=", "0", ",", "\n", "min_length", "=", "20", ")", "\n", "\n", "t", "=", "0", "\n", "while", "(", "t", "<", "np", ".", "shape", "(", "data", ")", "[", "0", "]", ")", ":", "\n", "            ", "ret", ",", "frame", "=", "cap", ".", "read", "(", ")", "\n", "print", "(", "'progress'", ",", "t", "/", "data", ".", "shape", "[", "0", "]", ",", "end", "=", "'\\r'", ")", "\n", "\n", "# Load data", "\n", "left_hand_data", "=", "data", "[", "t", ",", "194", ":", "232", "]", ".", "reshape", "(", "-", "1", ",", "2", ")", "\n", "right_hand_data", "=", "data", "[", "t", ",", "236", ":", "274", "]", ".", "reshape", "(", "-", "1", ",", "2", ")", "\n", "left_upper_arm", "=", "[", "(", "int", "(", "data", "[", "t", ",", "2", "*", "5", "]", ")", ",", "int", "(", "data", "[", "t", ",", "2", "*", "5", "+", "1", "]", ")", ")", ",", "\n", "(", "int", "(", "data", "[", "t", ",", "2", "*", "6", "]", ")", ",", "int", "(", "data", "[", "t", ",", "2", "*", "6", "+", "1", "]", ")", ")", "]", "\n", "left_lower_arm", "=", "[", "(", "int", "(", "data", "[", "t", ",", "2", "*", "6", "]", ")", ",", "int", "(", "data", "[", "t", ",", "2", "*", "6", "+", "1", "]", ")", ")", ",", "\n", "(", "int", "(", "data", "[", "t", ",", "2", "*", "7", "]", ")", ",", "int", "(", "data", "[", "t", ",", "2", "*", "7", "+", "1", "]", ")", ")", "]", "\n", "right_upper_leg", "=", "[", "(", "int", "(", "data", "[", "t", ",", "2", "*", "9", "]", ")", ",", "int", "(", "data", "[", "t", ",", "2", "*", "9", "+", "1", "]", ")", ")", ",", "\n", "(", "int", "(", "data", "[", "t", ",", "2", "*", "10", "]", ")", ",", "int", "(", "data", "[", "t", ",", "2", "*", "10", "+", "1", "]", ")", ")", "]", "\n", "right_lower_leg", "=", "[", "(", "int", "(", "data", "[", "t", ",", "2", "*", "10", "]", ")", ",", "int", "(", "data", "[", "t", ",", "2", "*", "10", "+", "1", "]", ")", ")", ",", "\n", "(", "int", "(", "data", "[", "t", ",", "2", "*", "11", "]", ")", ",", "int", "(", "data", "[", "t", ",", "2", "*", "11", "+", "1", "]", ")", ")", "]", "\n", "left_upper_leg", "=", "[", "(", "int", "(", "data", "[", "t", ",", "2", "*", "12", "]", ")", ",", "int", "(", "data", "[", "t", ",", "2", "*", "12", "+", "1", "]", ")", ")", ",", "\n", "(", "int", "(", "data", "[", "t", ",", "2", "*", "13", "]", ")", ",", "int", "(", "data", "[", "t", ",", "2", "*", "13", "+", "1", "]", ")", ")", "]", "\n", "left_lower_leg", "=", "[", "(", "int", "(", "data", "[", "t", ",", "2", "*", "13", "]", ")", ",", "int", "(", "data", "[", "t", ",", "2", "*", "13", "+", "1", "]", ")", ")", ",", "\n", "(", "int", "(", "data", "[", "t", ",", "2", "*", "14", "]", ")", ",", "int", "(", "data", "[", "t", ",", "2", "*", "14", "+", "1", "]", ")", ")", "]", "\n", "face_data", "=", "data", "[", "t", ",", "50", ":", "190", "]", ".", "reshape", "(", "-", "1", ",", "2", ")", "\n", "\n", "# Define hand quad", "\n", "hand_quad_a", "=", "[", "np", ".", "min", "(", "right_hand_data", ",", "axis", "=", "0", ")", ".", "astype", "(", "int", ")", "[", "0", "]", ",", "\n", "np", ".", "min", "(", "right_hand_data", ",", "axis", "=", "0", ")", ".", "astype", "(", "int", ")", "[", "1", "]", "]", "\n", "hand_quad_b", "=", "[", "np", ".", "max", "(", "right_hand_data", ",", "axis", "=", "0", ")", ".", "astype", "(", "int", ")", "[", "0", "]", ",", "\n", "np", ".", "min", "(", "right_hand_data", ",", "axis", "=", "0", ")", ".", "astype", "(", "int", ")", "[", "1", "]", "]", "\n", "hand_quad_c", "=", "[", "np", ".", "max", "(", "right_hand_data", ",", "axis", "=", "0", ")", ".", "astype", "(", "int", ")", "[", "0", "]", ",", "\n", "np", ".", "max", "(", "right_hand_data", ",", "axis", "=", "0", ")", ".", "astype", "(", "int", ")", "[", "1", "]", "]", "\n", "hand_quad_d", "=", "[", "np", ".", "min", "(", "right_hand_data", ",", "axis", "=", "0", ")", ".", "astype", "(", "int", ")", "[", "0", "]", ",", "\n", "np", ".", "max", "(", "right_hand_data", ",", "axis", "=", "0", ")", ".", "astype", "(", "int", ")", "[", "1", "]", "]", "\n", "hand_quad", "=", "Quadrilateral", "(", "hand_quad_a", ",", "hand_quad_b", ",", "hand_quad_c", ",", "hand_quad_d", ")", "\n", "\n", "# Property", "\n", "intersection", "=", "False", "\n", "\n", "# Check hands overlapping", "\n", "if", "t", "in", "hand_cross_intersect_data", ".", "keys", "(", ")", ":", "\n", "                ", "intersection", "=", "True", "\n", "# x1, y1, x2, y2 = hand_intersect.get_cordinate()", "\n", "# cv2.rectangle(frame,", "\n", "#               (x1, y1),", "\n", "#               (x2, y2),", "\n", "#               COLOR_YELLOW,", "\n", "#               2)", "\n", "\n", "# Check left_hand-right_arm overlapping", "\n", "", "if", "not", "intersection", ":", "\n", "                ", "right_upper_arm_quad", "=", "self", ".", "joint_to_quad", "(", "left_upper_arm", "[", "0", "]", ",", "left_upper_arm", "[", "1", "]", ",", "width", "=", "10", ")", "\n", "right_lower_arm_quad", "=", "self", ".", "joint_to_quad", "(", "left_lower_arm", "[", "0", "]", ",", "left_lower_arm", "[", "1", "]", ",", "width", "=", "10", ")", "\n", "right_upper_arm_overlap", "=", "self", ".", "check_quad_overlap", "(", "right_upper_arm_quad", ",", "hand_quad", ")", "\n", "right_lower_arm_overlap", "=", "self", ".", "check_quad_overlap", "(", "right_lower_arm_quad", ",", "hand_quad", ")", "\n", "\n", "if", "right_upper_arm_overlap", "or", "right_lower_arm_overlap", ":", "\n", "                    ", "intersection", "=", "True", "\n", "hand_arm_intersect_data", "[", "t", "]", "=", "1", "\n", "\n", "# frame = right_upper_arm_quad.paint_quadrilateral(frame)", "\n", "# frame = right_lower_arm_quad.paint_quadrilateral(frame)", "\n", "# for i in range(np.shape(right_hand_data)[0]):", "\n", "#     frame = self.paint_point(frame, right_hand_data[i], color=COLOR_YELLOW)", "\n", "# frame = self.paint_rectangle_to_points(frame, right_hand_data, color=(0, 255, 0))", "\n", "\n", "# Check left_hand-right_leg overlapping", "\n", "", "", "if", "not", "intersection", ":", "\n", "                ", "right_upper_leg_quad", "=", "self", ".", "joint_to_quad", "(", "right_upper_leg", "[", "0", "]", ",", "right_upper_leg", "[", "1", "]", ",", "width", "=", "15", ")", "\n", "right_lower_leg_quad", "=", "self", ".", "joint_to_quad", "(", "right_lower_leg", "[", "0", "]", ",", "right_lower_leg", "[", "1", "]", ",", "width", "=", "15", ")", "\n", "left_upper_leg_quad", "=", "self", ".", "joint_to_quad", "(", "left_upper_leg", "[", "0", "]", ",", "left_upper_leg", "[", "1", "]", ",", "width", "=", "15", ")", "\n", "left_lower_leg_quad", "=", "self", ".", "joint_to_quad", "(", "left_lower_leg", "[", "0", "]", ",", "left_lower_leg", "[", "1", "]", ",", "width", "=", "15", ")", "\n", "\n", "right_upper_leg_overlap", "=", "self", ".", "check_quad_overlap", "(", "right_upper_leg_quad", ",", "hand_quad", ")", "\n", "right_lower_leg_overlap", "=", "self", ".", "check_quad_overlap", "(", "right_lower_leg_quad", ",", "hand_quad", ")", "\n", "left_upper_leg_overlap", "=", "self", ".", "check_quad_overlap", "(", "left_upper_leg_quad", ",", "hand_quad", ")", "\n", "left_lower_leg_overlap", "=", "self", ".", "check_quad_overlap", "(", "left_lower_leg_quad", ",", "hand_quad", ")", "\n", "\n", "condition", "=", "right_upper_leg_overlap", "or", "right_lower_leg_overlap", "or", "left_upper_leg_overlap", "or", "left_lower_leg_overlap", "\n", "\n", "if", "condition", ":", "\n", "                    ", "intersection", "=", "True", "\n", "hand_leg_intersect_data", "[", "t", "]", "=", "1", "\n", "\n", "# frame = right_upper_leg_quad.paint_quadrilateral(frame)", "\n", "# frame = right_lower_leg_quad.paint_quadrilateral(frame)", "\n", "# frame = left_upper_leg_quad.paint_quadrilateral(frame)", "\n", "# frame = left_lower_leg_quad.paint_quadrilateral(frame)", "\n", "\n", "# for i in range(np.shape(right_hand_data)[0]):", "\n", "#     frame = self.paint_point(frame, right_hand_data[i], color=COLOR_YELLOW)", "\n", "\n", "# frame = self.paint_rectangle_to_points(frame, right_hand_data, color=(0, 255, 0))", "\n", "\n", "# frame = self.paint_rectangle_to_points(frame, right_hand_data, color=COLOR_YELLOW)", "\n", "\n", "# Check left_hand-face overlapping", "\n", "", "", "if", "not", "intersection", ":", "\n", "                ", "intersect", "=", "self", ".", "check_rect_overlap", "(", "right_hand_data", ",", "face_data", ",", "tolerance", "=", "5", ")", "\n", "if", "intersect", "is", "not", "None", ":", "\n", "                    ", "intersection", "=", "True", "\n", "hand_face_intersect_data", "[", "t", "]", "=", "1", "\n", "\n", "#     x1, y1, x2, y2 = intersect.get_cordinate()", "\n", "#     cv2.rectangle(frame,", "\n", "#                   (x1, y1),", "\n", "#                   (x2, y2),", "\n", "#                   COLOR_GREEN,", "\n", "#                   2)", "\n", "# # frame = self.paint_rectangle_to_points(frame, right_hand_data, color=(0, 255, 0))", "\n", "# # frame = self.paint_rectangle_to_points(frame, face_data, color=(0, 255, 0))", "\n", "\n", "# if not intersection:", "\n", "#     print('no intersection found')", "\n", "\n", "# cv2.imshow('frame', frame)", "\n", "", "", "if", "cv2", ".", "waitKey", "(", "1", ")", "&", "0xFF", "==", "ord", "(", "'q'", ")", ":", "\n", "                ", "break", "\n", "# if t == 0:", "\n", "", "t", "+=", "1", "\n", "\n", "", "cap", ".", "release", "(", ")", "\n", "cv2", ".", "destroyAllWindows", "(", ")", "\n", "\n", "# Hand arm intersection", "\n", "valid_intersect_data", "=", "hand_arm_intersect_data", "\n", "\n", "continuous_segments", "=", "[", "]", "\n", "for", "i", "in", "valid_intersect_data", ".", "keys", "(", ")", ":", "\n", "            ", "if", "len", "(", "continuous_segments", ")", "==", "0", ":", "\n", "                ", "continuous_segments", ".", "append", "(", "[", "i", ",", "i", "+", "1", "]", ")", "\n", "", "else", ":", "\n", "                ", "if", "continuous_segments", "[", "-", "1", "]", "[", "1", "]", "==", "i", ":", "\n", "                    ", "continuous_segments", "[", "-", "1", "]", "[", "1", "]", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "continuous_segments", ".", "append", "(", "[", "i", ",", "i", "+", "1", "]", ")", "\n", "\n", "", "", "", "new_segments", "=", "[", "]", "\n", "for", "segment", "in", "continuous_segments", ":", "\n", "            ", "if", "segment", "[", "1", "]", "-", "segment", "[", "0", "]", ">=", "(", "min_length", "+", "cutoff", "*", "2", ")", ":", "\n", "                ", "new_segments", ".", "append", "(", "[", "segment", "[", "0", "]", "+", "cutoff", ",", "segment", "[", "1", "]", "-", "cutoff", "]", ")", "\n", "if", "cutoff", "!=", "0", ":", "\n", "                    ", "for", "x", "in", "range", "(", "segment", "[", "0", "]", ",", "segment", "[", "0", "]", "+", "cutoff", ")", ":", "\n", "                        ", "del", "valid_intersect_data", "[", "x", "]", "\n", "", "for", "x", "in", "range", "(", "segment", "[", "1", "]", "-", "cutoff", ",", "segment", "[", "1", "]", ")", ":", "\n", "                        ", "del", "valid_intersect_data", "[", "x", "]", "\n", "", "", "", "else", ":", "\n", "                ", "for", "x", "in", "range", "(", "segment", "[", "0", "]", ",", "segment", "[", "1", "]", ")", ":", "\n", "                    ", "del", "valid_intersect_data", "[", "x", "]", "\n", "", "", "", "hand_arm_continuous_segments", "=", "new_segments", "\n", "\n", "# Hand leg intersection", "\n", "valid_intersect_data", "=", "hand_leg_intersect_data", "\n", "\n", "continuous_segments", "=", "[", "]", "\n", "for", "i", "in", "valid_intersect_data", ".", "keys", "(", ")", ":", "\n", "            ", "if", "len", "(", "continuous_segments", ")", "==", "0", ":", "\n", "                ", "continuous_segments", ".", "append", "(", "[", "i", ",", "i", "+", "1", "]", ")", "\n", "", "else", ":", "\n", "                ", "if", "continuous_segments", "[", "-", "1", "]", "[", "1", "]", "==", "i", ":", "\n", "                    ", "continuous_segments", "[", "-", "1", "]", "[", "1", "]", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "continuous_segments", ".", "append", "(", "[", "i", ",", "i", "+", "1", "]", ")", "\n", "\n", "", "", "", "new_segments", "=", "[", "]", "\n", "for", "segment", "in", "continuous_segments", ":", "\n", "            ", "if", "segment", "[", "1", "]", "-", "segment", "[", "0", "]", ">=", "(", "min_length", "+", "cutoff", "*", "2", ")", ":", "\n", "                ", "new_segments", ".", "append", "(", "[", "segment", "[", "0", "]", "+", "cutoff", ",", "segment", "[", "1", "]", "-", "cutoff", "]", ")", "\n", "if", "cutoff", "!=", "0", ":", "\n", "                    ", "for", "x", "in", "range", "(", "segment", "[", "0", "]", ",", "segment", "[", "0", "]", "+", "cutoff", ")", ":", "\n", "                        ", "del", "valid_intersect_data", "[", "x", "]", "\n", "", "for", "x", "in", "range", "(", "segment", "[", "1", "]", "-", "cutoff", ",", "segment", "[", "1", "]", ")", ":", "\n", "                        ", "del", "valid_intersect_data", "[", "x", "]", "\n", "", "", "", "else", ":", "\n", "                ", "for", "x", "in", "range", "(", "segment", "[", "0", "]", ",", "segment", "[", "1", "]", ")", ":", "\n", "                    ", "del", "valid_intersect_data", "[", "x", "]", "\n", "", "", "", "hand_leg_continuous_segments", "=", "new_segments", "\n", "\n", "# Hand face intersection", "\n", "valid_intersect_data", "=", "hand_face_intersect_data", "\n", "\n", "continuous_segments", "=", "[", "]", "\n", "for", "i", "in", "valid_intersect_data", ".", "keys", "(", ")", ":", "\n", "            ", "if", "len", "(", "continuous_segments", ")", "==", "0", ":", "\n", "                ", "continuous_segments", ".", "append", "(", "[", "i", ",", "i", "+", "1", "]", ")", "\n", "", "else", ":", "\n", "                ", "if", "continuous_segments", "[", "-", "1", "]", "[", "1", "]", "==", "i", ":", "\n", "                    ", "continuous_segments", "[", "-", "1", "]", "[", "1", "]", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "continuous_segments", ".", "append", "(", "[", "i", ",", "i", "+", "1", "]", ")", "\n", "\n", "", "", "", "new_segments", "=", "[", "]", "\n", "for", "segment", "in", "continuous_segments", ":", "\n", "            ", "if", "segment", "[", "1", "]", "-", "segment", "[", "0", "]", ">=", "(", "min_length", "+", "cutoff", "*", "2", ")", ":", "\n", "                ", "new_segments", ".", "append", "(", "[", "segment", "[", "0", "]", "+", "cutoff", ",", "segment", "[", "1", "]", "-", "cutoff", "]", ")", "\n", "if", "cutoff", "!=", "0", ":", "\n", "                    ", "for", "x", "in", "range", "(", "segment", "[", "0", "]", ",", "segment", "[", "0", "]", "+", "cutoff", ")", ":", "\n", "                        ", "del", "valid_intersect_data", "[", "x", "]", "\n", "", "for", "x", "in", "range", "(", "segment", "[", "1", "]", "-", "cutoff", ",", "segment", "[", "1", "]", ")", ":", "\n", "                        ", "del", "valid_intersect_data", "[", "x", "]", "\n", "", "", "", "else", ":", "\n", "                ", "for", "x", "in", "range", "(", "segment", "[", "0", "]", ",", "segment", "[", "1", "]", ")", ":", "\n", "                    ", "del", "valid_intersect_data", "[", "x", "]", "\n", "", "", "", "hand_face_continuous_segments", "=", "new_segments", "\n", "\n", "return", "hand_arm_continuous_segments", ",", "hand_leg_continuous_segments", ",", "hand_face_continuous_segments", "\n", "\n"]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.hand_location_analyser.HandLocationAnalyser.compute_left_hand_intersection": [[290, 529], ["cv2.VideoCapture", "numpy.load", "component.hand_cross_analyser.HandCrossAnalyser", "component.hand_cross_analyser.HandCrossAnalyser.compute_stationary_rectangles", "cv2.VideoCapture.release", "cv2.destroyAllWindows", "valid_intersect_data.keys", "valid_intersect_data.keys", "valid_intersect_data.keys", "cv2.VideoCapture.read", "print", "data[].reshape", "data[].reshape", "data[].reshape", "utility.quadrilateral.Quadrilateral", "numpy.shape", "hand_cross_intersect_data.keys", "hand_location_analyser.HandLocationAnalyser.joint_to_quad", "hand_location_analyser.HandLocationAnalyser.joint_to_quad", "hand_location_analyser.HandLocationAnalyser.check_quad_overlap", "hand_location_analyser.HandLocationAnalyser.check_quad_overlap", "hand_location_analyser.HandLocationAnalyser.joint_to_quad", "hand_location_analyser.HandLocationAnalyser.joint_to_quad", "hand_location_analyser.HandLocationAnalyser.joint_to_quad", "hand_location_analyser.HandLocationAnalyser.joint_to_quad", "hand_location_analyser.HandLocationAnalyser.check_quad_overlap", "hand_location_analyser.HandLocationAnalyser.check_quad_overlap", "hand_location_analyser.HandLocationAnalyser.check_quad_overlap", "hand_location_analyser.HandLocationAnalyser.check_quad_overlap", "hand_location_analyser.HandLocationAnalyser.check_rect_overlap", "ord", "len", "continuous_segments.append", "new_segments.append", "range", "len", "continuous_segments.append", "new_segments.append", "range", "len", "continuous_segments.append", "new_segments.append", "range", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "numpy.min().astype", "numpy.min().astype", "numpy.max().astype", "numpy.min().astype", "numpy.max().astype", "numpy.max().astype", "numpy.min().astype", "numpy.max().astype", "cv2.waitKey", "continuous_segments.append", "range", "range", "continuous_segments.append", "range", "range", "continuous_segments.append", "range", "range", "numpy.min", "numpy.min", "numpy.max", "numpy.min", "numpy.max", "numpy.max", "numpy.min", "numpy.max"], "methods", ["home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.hand_cross_analyser.HandCrossAnalyser.compute_stationary_rectangles", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.elan_portal.ElanPortal.read", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.hand_location_analyser.HandLocationAnalyser.joint_to_quad", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.hand_location_analyser.HandLocationAnalyser.joint_to_quad", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.hand_location_analyser.HandLocationAnalyser.check_quad_overlap", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.hand_location_analyser.HandLocationAnalyser.check_quad_overlap", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.hand_location_analyser.HandLocationAnalyser.joint_to_quad", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.hand_location_analyser.HandLocationAnalyser.joint_to_quad", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.hand_location_analyser.HandLocationAnalyser.joint_to_quad", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.hand_location_analyser.HandLocationAnalyser.joint_to_quad", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.hand_location_analyser.HandLocationAnalyser.check_quad_overlap", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.hand_location_analyser.HandLocationAnalyser.check_quad_overlap", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.hand_location_analyser.HandLocationAnalyser.check_quad_overlap", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.hand_location_analyser.HandLocationAnalyser.check_quad_overlap", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.basic_processor.BasicProcessor.check_rect_overlap"], ["", "def", "compute_left_hand_intersection", "(", "self", ",", "min_length", "=", "100", ",", "cutoff", "=", "0", ")", ":", "\n", "        ", "cap", "=", "cv2", ".", "VideoCapture", "(", "self", ".", "video_path", ")", "\n", "data", "=", "np", ".", "load", "(", "self", ".", "processed_smooth_file", ")", "\n", "\n", "# try:", "\n", "hand_arm_intersect_data", "=", "{", "}", "\n", "hand_leg_intersect_data", "=", "{", "}", "\n", "hand_face_intersect_data", "=", "{", "}", "\n", "\n", "instance_hand_cross", "=", "HandCrossAnalyser", "(", "self", ".", "name", ",", "self", ".", "path_data", ")", "\n", "continuous_segments", ",", "hand_cross_intersect_data", "=", "instance_hand_cross", ".", "compute_stationary_rectangles", "(", "cutoff", "=", "0", ",", "\n", "min_length", "=", "20", ")", "\n", "\n", "t", "=", "0", "\n", "while", "(", "t", "<", "np", ".", "shape", "(", "data", ")", "[", "0", "]", ")", ":", "\n", "            ", "ret", ",", "frame", "=", "cap", ".", "read", "(", ")", "\n", "print", "(", "'progress'", ",", "t", "/", "data", ".", "shape", "[", "0", "]", ",", "end", "=", "'\\r'", ")", "\n", "\n", "# Load data", "\n", "left_hand_data", "=", "data", "[", "t", ",", "194", ":", "232", "]", ".", "reshape", "(", "-", "1", ",", "2", ")", "\n", "right_hand_data", "=", "data", "[", "t", ",", "236", ":", "274", "]", ".", "reshape", "(", "-", "1", ",", "2", ")", "\n", "right_upper_arm", "=", "[", "(", "int", "(", "data", "[", "t", ",", "2", "*", "2", "]", ")", ",", "int", "(", "data", "[", "t", ",", "2", "*", "2", "+", "1", "]", ")", ")", ",", "\n", "(", "int", "(", "data", "[", "t", ",", "2", "*", "3", "]", ")", ",", "int", "(", "data", "[", "t", ",", "2", "*", "3", "+", "1", "]", ")", ")", "]", "\n", "right_lower_arm", "=", "[", "(", "int", "(", "data", "[", "t", ",", "2", "*", "3", "]", ")", ",", "int", "(", "data", "[", "t", ",", "2", "*", "3", "+", "1", "]", ")", ")", ",", "\n", "(", "int", "(", "data", "[", "t", ",", "2", "*", "4", "]", ")", ",", "int", "(", "data", "[", "t", ",", "2", "*", "4", "+", "1", "]", ")", ")", "]", "\n", "right_upper_leg", "=", "[", "(", "int", "(", "data", "[", "t", ",", "2", "*", "9", "]", ")", ",", "int", "(", "data", "[", "t", ",", "2", "*", "9", "+", "1", "]", ")", ")", ",", "\n", "(", "int", "(", "data", "[", "t", ",", "2", "*", "10", "]", ")", ",", "int", "(", "data", "[", "t", ",", "2", "*", "10", "+", "1", "]", ")", ")", "]", "\n", "right_lower_leg", "=", "[", "(", "int", "(", "data", "[", "t", ",", "2", "*", "10", "]", ")", ",", "int", "(", "data", "[", "t", ",", "2", "*", "10", "+", "1", "]", ")", ")", ",", "\n", "(", "int", "(", "data", "[", "t", ",", "2", "*", "11", "]", ")", ",", "int", "(", "data", "[", "t", ",", "2", "*", "11", "+", "1", "]", ")", ")", "]", "\n", "left_upper_leg", "=", "[", "(", "int", "(", "data", "[", "t", ",", "2", "*", "12", "]", ")", ",", "int", "(", "data", "[", "t", ",", "2", "*", "12", "+", "1", "]", ")", ")", ",", "\n", "(", "int", "(", "data", "[", "t", ",", "2", "*", "13", "]", ")", ",", "int", "(", "data", "[", "t", ",", "2", "*", "13", "+", "1", "]", ")", ")", "]", "\n", "left_lower_leg", "=", "[", "(", "int", "(", "data", "[", "t", ",", "2", "*", "13", "]", ")", ",", "int", "(", "data", "[", "t", ",", "2", "*", "13", "+", "1", "]", ")", ")", ",", "\n", "(", "int", "(", "data", "[", "t", ",", "2", "*", "14", "]", ")", ",", "int", "(", "data", "[", "t", ",", "2", "*", "14", "+", "1", "]", ")", ")", "]", "\n", "face_data", "=", "data", "[", "t", ",", "50", ":", "190", "]", ".", "reshape", "(", "-", "1", ",", "2", ")", "\n", "\n", "# Define hand quad", "\n", "hand_quad_a", "=", "[", "np", ".", "min", "(", "left_hand_data", ",", "axis", "=", "0", ")", ".", "astype", "(", "int", ")", "[", "0", "]", ",", "np", ".", "min", "(", "left_hand_data", ",", "axis", "=", "0", ")", ".", "astype", "(", "int", ")", "[", "1", "]", "]", "\n", "hand_quad_b", "=", "[", "np", ".", "max", "(", "left_hand_data", ",", "axis", "=", "0", ")", ".", "astype", "(", "int", ")", "[", "0", "]", ",", "np", ".", "min", "(", "left_hand_data", ",", "axis", "=", "0", ")", ".", "astype", "(", "int", ")", "[", "1", "]", "]", "\n", "hand_quad_c", "=", "[", "np", ".", "max", "(", "left_hand_data", ",", "axis", "=", "0", ")", ".", "astype", "(", "int", ")", "[", "0", "]", ",", "np", ".", "max", "(", "left_hand_data", ",", "axis", "=", "0", ")", ".", "astype", "(", "int", ")", "[", "1", "]", "]", "\n", "hand_quad_d", "=", "[", "np", ".", "min", "(", "left_hand_data", ",", "axis", "=", "0", ")", ".", "astype", "(", "int", ")", "[", "0", "]", ",", "np", ".", "max", "(", "left_hand_data", ",", "axis", "=", "0", ")", ".", "astype", "(", "int", ")", "[", "1", "]", "]", "\n", "hand_quad", "=", "Quadrilateral", "(", "hand_quad_a", ",", "hand_quad_b", ",", "hand_quad_c", ",", "hand_quad_d", ")", "\n", "\n", "# Property", "\n", "intersection", "=", "False", "\n", "\n", "# Check hands overlapping", "\n", "if", "t", "in", "hand_cross_intersect_data", ".", "keys", "(", ")", ":", "\n", "                ", "intersection", "=", "True", "\n", "# x1, y1, x2, y2 = hand_intersect.get_cordinate()", "\n", "# cv2.rectangle(frame,", "\n", "#               (x1, y1),", "\n", "#               (x2, y2),", "\n", "#               COLOR_YELLOW,", "\n", "#               2)", "\n", "\n", "# Check left_hand-right_arm overlapping", "\n", "", "if", "not", "intersection", ":", "\n", "                ", "right_upper_arm_quad", "=", "self", ".", "joint_to_quad", "(", "right_upper_arm", "[", "0", "]", ",", "right_upper_arm", "[", "1", "]", ",", "width", "=", "10", ")", "\n", "right_lower_arm_quad", "=", "self", ".", "joint_to_quad", "(", "right_lower_arm", "[", "0", "]", ",", "right_lower_arm", "[", "1", "]", ",", "width", "=", "10", ")", "\n", "right_upper_arm_overlap", "=", "self", ".", "check_quad_overlap", "(", "right_upper_arm_quad", ",", "hand_quad", ")", "\n", "right_lower_arm_overlap", "=", "self", ".", "check_quad_overlap", "(", "right_lower_arm_quad", ",", "hand_quad", ")", "\n", "\n", "if", "right_upper_arm_overlap", "or", "right_lower_arm_overlap", ":", "\n", "                    ", "intersection", "=", "True", "\n", "hand_arm_intersect_data", "[", "t", "]", "=", "1", "\n", "\n", "# frame = right_upper_arm_quad.paint_quadrilateral(frame)", "\n", "# frame = right_lower_arm_quad.paint_quadrilateral(frame)", "\n", "# for i in range(np.shape(left_hand_data)[0]):", "\n", "#     frame = self.paint_point(frame, left_hand_data[i], color=COLOR_YELLOW)", "\n", "# frame = self.paint_rectangle_to_points(frame, left_hand_data, color=(0, 255, 0))", "\n", "\n", "# Check left_hand-right_leg overlapping", "\n", "", "", "if", "not", "intersection", ":", "\n", "                ", "right_upper_leg_quad", "=", "self", ".", "joint_to_quad", "(", "right_upper_leg", "[", "0", "]", ",", "right_upper_leg", "[", "1", "]", ",", "width", "=", "15", ")", "\n", "right_lower_leg_quad", "=", "self", ".", "joint_to_quad", "(", "right_lower_leg", "[", "0", "]", ",", "right_lower_leg", "[", "1", "]", ",", "width", "=", "15", ")", "\n", "left_upper_leg_quad", "=", "self", ".", "joint_to_quad", "(", "left_upper_leg", "[", "0", "]", ",", "left_upper_leg", "[", "1", "]", ",", "width", "=", "15", ")", "\n", "left_lower_leg_quad", "=", "self", ".", "joint_to_quad", "(", "left_lower_leg", "[", "0", "]", ",", "left_lower_leg", "[", "1", "]", ",", "width", "=", "15", ")", "\n", "\n", "right_upper_leg_overlap", "=", "self", ".", "check_quad_overlap", "(", "right_upper_leg_quad", ",", "hand_quad", ")", "\n", "right_lower_leg_overlap", "=", "self", ".", "check_quad_overlap", "(", "right_lower_leg_quad", ",", "hand_quad", ")", "\n", "left_upper_leg_overlap", "=", "self", ".", "check_quad_overlap", "(", "left_upper_leg_quad", ",", "hand_quad", ")", "\n", "left_lower_leg_overlap", "=", "self", ".", "check_quad_overlap", "(", "left_lower_leg_quad", ",", "hand_quad", ")", "\n", "\n", "condition", "=", "right_upper_leg_overlap", "or", "right_lower_leg_overlap", "or", "left_upper_leg_overlap", "or", "left_lower_leg_overlap", "\n", "\n", "if", "condition", ":", "\n", "                    ", "intersection", "=", "True", "\n", "hand_leg_intersect_data", "[", "t", "]", "=", "1", "\n", "\n", "#     frame = right_upper_leg_quad.paint_quadrilateral(frame)", "\n", "#     frame = right_lower_leg_quad.paint_quadrilateral(frame)", "\n", "#     frame = left_upper_leg_quad.paint_quadrilateral(frame)", "\n", "#     frame = left_lower_leg_quad.paint_quadrilateral(frame)", "\n", "#", "\n", "#     for i in range(np.shape(left_hand_data)[0]):", "\n", "#         frame = self.paint_point(frame, left_hand_data[i], color=COLOR_YELLOW)", "\n", "#", "\n", "#     frame = self.paint_rectangle_to_points(frame, left_hand_data, color=(0, 255, 0))", "\n", "#", "\n", "# # frame = self.paint_rectangle_to_points(frame, left_hand_data, color=COLOR_YELLOW)", "\n", "\n", "# Check left_hand-face overlapping", "\n", "", "", "if", "not", "intersection", ":", "\n", "                ", "intersect", "=", "self", ".", "check_rect_overlap", "(", "left_hand_data", ",", "face_data", ",", "tolerance", "=", "10", ")", "\n", "if", "intersect", "is", "not", "None", ":", "\n", "                    ", "intersection", "=", "True", "\n", "hand_face_intersect_data", "[", "t", "]", "=", "1", "\n", "\n", "# x1, y1, x2, y2 = intersect.get_cordinate()", "\n", "# cv2.rectangle(frame,", "\n", "#               (x1, y1),", "\n", "#               (x2, y2),", "\n", "#               COLOR_GREEN,", "\n", "#               2)", "\n", "# frame = self.paint_rectangle_to_points(frame, left_hand_data, color=(0, 255, 0))", "\n", "# frame = self.paint_rectangle_to_points(frame, face_data, color=(0, 255, 0))", "\n", "\n", "# if not intersection:", "\n", "#     no_intersect_data[t] = 1", "\n", "\n", "# cv2.imshow('frame', frame)", "\n", "", "", "if", "cv2", ".", "waitKey", "(", "1", ")", "&", "0xFF", "==", "ord", "(", "'q'", ")", ":", "\n", "                ", "break", "\n", "", "t", "+=", "1", "\n", "\n", "", "cap", ".", "release", "(", ")", "\n", "cv2", ".", "destroyAllWindows", "(", ")", "\n", "\n", "# Hand arm intersection", "\n", "valid_intersect_data", "=", "hand_arm_intersect_data", "\n", "\n", "continuous_segments", "=", "[", "]", "\n", "for", "i", "in", "valid_intersect_data", ".", "keys", "(", ")", ":", "\n", "            ", "if", "len", "(", "continuous_segments", ")", "==", "0", ":", "\n", "                ", "continuous_segments", ".", "append", "(", "[", "i", ",", "i", "+", "1", "]", ")", "\n", "", "else", ":", "\n", "                ", "if", "continuous_segments", "[", "-", "1", "]", "[", "1", "]", "==", "i", ":", "\n", "                    ", "continuous_segments", "[", "-", "1", "]", "[", "1", "]", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "continuous_segments", ".", "append", "(", "[", "i", ",", "i", "+", "1", "]", ")", "\n", "\n", "", "", "", "new_segments", "=", "[", "]", "\n", "for", "segment", "in", "continuous_segments", ":", "\n", "            ", "if", "segment", "[", "1", "]", "-", "segment", "[", "0", "]", ">=", "(", "min_length", "+", "cutoff", "*", "2", ")", ":", "\n", "                ", "new_segments", ".", "append", "(", "[", "segment", "[", "0", "]", "+", "cutoff", ",", "segment", "[", "1", "]", "-", "cutoff", "]", ")", "\n", "if", "cutoff", "!=", "0", ":", "\n", "                    ", "for", "x", "in", "range", "(", "segment", "[", "0", "]", ",", "segment", "[", "0", "]", "+", "cutoff", ")", ":", "\n", "                        ", "del", "valid_intersect_data", "[", "x", "]", "\n", "", "for", "x", "in", "range", "(", "segment", "[", "1", "]", "-", "cutoff", ",", "segment", "[", "1", "]", ")", ":", "\n", "                        ", "del", "valid_intersect_data", "[", "x", "]", "\n", "", "", "", "else", ":", "\n", "                ", "for", "x", "in", "range", "(", "segment", "[", "0", "]", ",", "segment", "[", "1", "]", ")", ":", "\n", "                    ", "del", "valid_intersect_data", "[", "x", "]", "\n", "", "", "", "hand_arm_continuous_segments", "=", "new_segments", "\n", "\n", "# Hand leg intersection", "\n", "valid_intersect_data", "=", "hand_leg_intersect_data", "\n", "\n", "continuous_segments", "=", "[", "]", "\n", "for", "i", "in", "valid_intersect_data", ".", "keys", "(", ")", ":", "\n", "            ", "if", "len", "(", "continuous_segments", ")", "==", "0", ":", "\n", "                ", "continuous_segments", ".", "append", "(", "[", "i", ",", "i", "+", "1", "]", ")", "\n", "", "else", ":", "\n", "                ", "if", "continuous_segments", "[", "-", "1", "]", "[", "1", "]", "==", "i", ":", "\n", "                    ", "continuous_segments", "[", "-", "1", "]", "[", "1", "]", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "continuous_segments", ".", "append", "(", "[", "i", ",", "i", "+", "1", "]", ")", "\n", "\n", "", "", "", "new_segments", "=", "[", "]", "\n", "for", "segment", "in", "continuous_segments", ":", "\n", "            ", "if", "segment", "[", "1", "]", "-", "segment", "[", "0", "]", ">=", "(", "min_length", "+", "cutoff", "*", "2", ")", ":", "\n", "                ", "new_segments", ".", "append", "(", "[", "segment", "[", "0", "]", "+", "cutoff", ",", "segment", "[", "1", "]", "-", "cutoff", "]", ")", "\n", "if", "cutoff", "!=", "0", ":", "\n", "                    ", "for", "x", "in", "range", "(", "segment", "[", "0", "]", ",", "segment", "[", "0", "]", "+", "cutoff", ")", ":", "\n", "                        ", "del", "valid_intersect_data", "[", "x", "]", "\n", "", "for", "x", "in", "range", "(", "segment", "[", "1", "]", "-", "cutoff", ",", "segment", "[", "1", "]", ")", ":", "\n", "                        ", "del", "valid_intersect_data", "[", "x", "]", "\n", "", "", "", "else", ":", "\n", "                ", "for", "x", "in", "range", "(", "segment", "[", "0", "]", ",", "segment", "[", "1", "]", ")", ":", "\n", "                    ", "del", "valid_intersect_data", "[", "x", "]", "\n", "", "", "", "hand_leg_continuous_segments", "=", "new_segments", "\n", "\n", "# Hand face intersection", "\n", "valid_intersect_data", "=", "hand_face_intersect_data", "\n", "\n", "continuous_segments", "=", "[", "]", "\n", "for", "i", "in", "valid_intersect_data", ".", "keys", "(", ")", ":", "\n", "            ", "if", "len", "(", "continuous_segments", ")", "==", "0", ":", "\n", "                ", "continuous_segments", ".", "append", "(", "[", "i", ",", "i", "+", "1", "]", ")", "\n", "", "else", ":", "\n", "                ", "if", "continuous_segments", "[", "-", "1", "]", "[", "1", "]", "==", "i", ":", "\n", "                    ", "continuous_segments", "[", "-", "1", "]", "[", "1", "]", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "continuous_segments", ".", "append", "(", "[", "i", ",", "i", "+", "1", "]", ")", "\n", "\n", "", "", "", "new_segments", "=", "[", "]", "\n", "for", "segment", "in", "continuous_segments", ":", "\n", "            ", "if", "segment", "[", "1", "]", "-", "segment", "[", "0", "]", ">=", "(", "min_length", "+", "cutoff", "*", "2", ")", ":", "\n", "                ", "new_segments", ".", "append", "(", "[", "segment", "[", "0", "]", "+", "cutoff", ",", "segment", "[", "1", "]", "-", "cutoff", "]", ")", "\n", "if", "cutoff", "!=", "0", ":", "\n", "                    ", "for", "x", "in", "range", "(", "segment", "[", "0", "]", ",", "segment", "[", "0", "]", "+", "cutoff", ")", ":", "\n", "                        ", "del", "valid_intersect_data", "[", "x", "]", "\n", "", "for", "x", "in", "range", "(", "segment", "[", "1", "]", "-", "cutoff", ",", "segment", "[", "1", "]", ")", ":", "\n", "                        ", "del", "valid_intersect_data", "[", "x", "]", "\n", "", "", "", "else", ":", "\n", "                ", "for", "x", "in", "range", "(", "segment", "[", "0", "]", ",", "segment", "[", "1", "]", ")", ":", "\n", "                    ", "del", "valid_intersect_data", "[", "x", "]", "\n", "", "", "", "hand_face_continuous_segments", "=", "new_segments", "\n", "\n", "# # No intersection", "\n", "# valid_intersect_data = no_intersect_data", "\n", "#", "\n", "# continuous_segments = []", "\n", "# for i in valid_intersect_data.keys():", "\n", "#     if len(continuous_segments) == 0:", "\n", "#         continuous_segments.append([i, i + 1])", "\n", "#     else:", "\n", "#         if continuous_segments[-1][1] == i:", "\n", "#             continuous_segments[-1][1] += 1", "\n", "#         else:", "\n", "#             continuous_segments.append([i, i + 1])", "\n", "#", "\n", "# new_segments = []", "\n", "# for segment in continuous_segments:", "\n", "#     if segment[1] - segment[0] >= (min_length + cutoff * 2):", "\n", "#         new_segments.append([segment[0] + cutoff, segment[1] - cutoff])", "\n", "#         if cutoff != 0:", "\n", "#             for x in range(segment[0], segment[0] + cutoff):", "\n", "#                 del valid_intersect_data[x]", "\n", "#             for x in range(segment[1] - cutoff, segment[1]):", "\n", "#                 del valid_intersect_data[x]", "\n", "#     else:", "\n", "#         for x in range(segment[0], segment[1]):", "\n", "#             del valid_intersect_data[x]", "\n", "# no_continuous_segments = new_segments", "\n", "\n", "return", "hand_arm_continuous_segments", ",", "hand_leg_continuous_segments", ",", "hand_face_continuous_segments", "\n", "\n"]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.hand_location_analyser.HandLocationAnalyser.export_elan_portal": [[530, 555], ["utility.elan_portal.ElanPortal", "hand_location_analyser.HandLocationAnalyser.compute_hand_intersection", "cv2.VideoCapture", "cv2.VideoCapture.get", "print", "hand_location_analyser.HandLocationAnalyser.export_elan_portal.transfer_to_secs"], "methods", ["home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.hand_location_analyser.HandLocationAnalyser.compute_hand_intersection"], ["", "def", "export_elan_portal", "(", "self", ")", ":", "\n", "        ", "portal", "=", "ElanPortal", "(", ")", "\n", "hand_arm_continuous_segments", ",", "hand_leg_continuous_segments", ",", "hand_face_continuous_segments", "=", "self", ".", "compute_hand_intersection", "(", "cutoff", "=", "10", ",", "min_length", "=", "20", ")", "\n", "cap", "=", "cv2", ".", "VideoCapture", "(", "self", ".", "video_path", ")", "\n", "fps", "=", "cap", ".", "get", "(", "cv2", ".", "CAP_PROP_FPS", ")", "\n", "print", "(", "'fps:'", ",", "fps", ")", "\n", "\n", "def", "transfer_to_secs", "(", "segments", ")", ":", "\n", "            ", "return", "(", "np", ".", "array", "(", "segments", ")", "/", "fps", ")", ".", "tolist", "(", ")", "\n", "\n", "", "hand_arm_continuous_segments", "=", "transfer_to_secs", "(", "hand_arm_continuous_segments", ")", "\n", "hand_leg_continuous_segments", "=", "transfer_to_secs", "(", "hand_leg_continuous_segments", ")", "\n", "hand_face_continuous_segments", "=", "transfer_to_secs", "(", "hand_face_continuous_segments", ")", "\n", "\n", "if", "self", ".", "hand", "==", "'right'", ":", "\n", "            ", "portal", ".", "add_tier", "(", "'Right Hand Location'", ",", "'on arm'", ",", "hand_arm_continuous_segments", ")", "\n", "portal", ".", "add_tier", "(", "'Right Hand Location'", ",", "'on leg'", ",", "hand_leg_continuous_segments", ")", "\n", "portal", ".", "add_tier", "(", "'Right Hand Location'", ",", "'on face'", ",", "hand_face_continuous_segments", ")", "\n", "", "else", ":", "\n", "            ", "portal", ".", "add_tier", "(", "'Left Hand Location'", ",", "'on arm'", ",", "hand_arm_continuous_segments", ")", "\n", "portal", ".", "add_tier", "(", "'Left Hand Location'", ",", "'on leg'", ",", "hand_leg_continuous_segments", ")", "\n", "portal", ".", "add_tier", "(", "'Left Hand Location'", ",", "'on face'", ",", "hand_face_continuous_segments", ")", "\n", "\n", "", "portal", ".", "export", "(", "'test.txt'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.basic_processor.BasicProcessor.__init__": [[15, 30], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "path_data", ",", "batch_data", "=", "None", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "if", "path_data", "is", "not", "None", ":", "\n", "# single video processing", "\n", "            ", "self", ".", "path_data", "=", "path_data", "\n", "self", ".", "video_path", "=", "path_data", "[", "'video'", "]", "\n", "self", ".", "openpose_output_path", "=", "path_data", "[", "'openpose_data'", "]", "\n", "self", ".", "openface_output_file", "=", "path_data", "[", "'openface_data'", "]", "\n", "self", ".", "processed_file", "=", "path_data", "[", "'processed_data'", "]", "\n", "self", ".", "processed_smooth_file", "=", "path_data", "[", "'processed_data_smooth'", "]", "\n", "self", ".", "participant_id", "=", "path_data", "[", "'participant_id'", "]", "\n", "self", ".", "session_id", "=", "path_data", "[", "'session_id'", "]", "\n", "", "else", ":", "\n", "# general processing", "\n", "            ", "self", ".", "batch_data", "=", "batch_data", "\n", "\n"]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.basic_processor.BasicProcessor.get_label": [[31, 39], ["utility.label_parser.Label_Parser", "utility.label_parser.Label_Parser.parse"], "methods", ["home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.label_parser.Label_Parser.parse"], ["", "", "def", "get_label", "(", "self", ")", ":", "\n", "        ", "'''\n        This function returns label\n        :return:\n        '''", "\n", "parser", "=", "Label_Parser", "(", "self", ".", "path_data", "[", "'fidgeting_label'", "]", ")", "\n", "return", "{", "\n", "'fidgeting'", ":", "parser", ".", "parse", "(", ")", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.basic_processor.BasicProcessor.paint_point": [[43, 53], ["cv2.circle", "int", "int"], "methods", ["None"], ["", "def", "paint_point", "(", "self", ",", "img", ",", "point", ",", "color", "=", "(", "0", ",", "0", ",", "255", ")", ")", ":", "\n", "        ", "'''\n        This function paints point group\n        :param img:\n        :param point: shape of (-1, 2)\n        :param color:\n        :return:\n        '''", "\n", "cv2", ".", "circle", "(", "img", ",", "(", "int", "(", "point", "[", "0", "]", ")", ",", "int", "(", "point", "[", "1", "]", ")", ")", ",", "1", ",", "color", ",", "-", "1", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.basic_processor.BasicProcessor.paint_text": [[54, 66], ["cv2.putText", "math.ceil", "int", "int"], "methods", ["None"], ["", "def", "paint_text", "(", "self", ",", "img", ",", "text", ",", "point", ",", "font_size", "=", "3", ",", "color", "=", "(", "0", ",", "205", ",", "193", ")", ")", ":", "\n", "        ", "'''\n        This function add text to a point\n        :param img:\n        :param text:\n        :param point:\n        :param color:\n        :return:\n        '''", "\n", "font", "=", "cv2", ".", "FONT_HERSHEY_SIMPLEX", "\n", "cv2", ".", "putText", "(", "img", ",", "text", ",", "(", "int", "(", "point", "[", "0", "]", ")", ",", "int", "(", "point", "[", "1", "]", ")", ")", ",", "font", ",", "font_size", ",", "color", ",", "math", ".", "ceil", "(", "font_size", "*", "2", ")", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.basic_processor.BasicProcessor.paint_line": [[67, 78], ["cv2.line", "int", "int", "int", "int"], "methods", ["None"], ["", "def", "paint_line", "(", "self", ",", "img", ",", "point1", ",", "point2", ",", "color", "=", "(", "0", ",", "205", ",", "193", ")", ")", ":", "\n", "        ", "'''\n        This function paints body joints\n        :param img:\n        :param point_1: shape of (2, )\n        :param point_2:  shape of (2, )\n        :param colour:\n        :return:\n        '''", "\n", "cv2", ".", "line", "(", "img", ",", "(", "int", "(", "point1", "[", "0", "]", ")", ",", "int", "(", "point1", "[", "1", "]", ")", ")", ",", "(", "int", "(", "point2", "[", "0", "]", ")", ",", "int", "(", "point2", "[", "1", "]", ")", ")", ",", "color", ",", "2", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.basic_processor.BasicProcessor.paint_rectangle_to_points": [[79, 94], ["numpy.array", "cv2.rectangle", "tuple", "tuple", "numpy.min().astype", "numpy.max().astype", "numpy.min", "numpy.max"], "methods", ["None"], ["", "def", "paint_rectangle_to_points", "(", "self", ",", "img", ",", "points", ",", "color", "=", "(", "0", ",", "255", ",", "0", ")", ")", ":", "\n", "        ", "'''\n        This function paints rectangle to a group of points\n        :param img:\n        :param points: shape of (-1, 2)\n        :param color:\n        :return:\n        '''", "\n", "points", "=", "np", ".", "array", "(", "points", ")", "\n", "cv2", ".", "rectangle", "(", "img", ",", "\n", "tuple", "(", "np", ".", "min", "(", "points", ",", "axis", "=", "0", ")", ".", "astype", "(", "int", ")", ")", ",", "\n", "tuple", "(", "np", ".", "max", "(", "points", ",", "axis", "=", "0", ")", ".", "astype", "(", "int", ")", ")", ",", "\n", "color", ",", "\n", "1", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.basic_processor.BasicProcessor.check_overlap": [[95, 112], ["utility.rectangle.Rectangle", "utility.rectangle.Rectangle", "numpy.min().astype", "numpy.min().astype", "numpy.max().astype", "numpy.max().astype", "numpy.min().astype", "numpy.min().astype", "numpy.max().astype", "numpy.max().astype", "numpy.min", "numpy.min", "numpy.max", "numpy.max", "numpy.min", "numpy.min", "numpy.max", "numpy.max"], "methods", ["None"], ["", "def", "check_overlap", "(", "self", ",", "points_1", ",", "points_2", ",", "tolerance", "=", "0", ")", ":", "\n", "        ", "'''\n        This function check overlapping of point groups\n        :param points_1:\n        :param points_2:\n        :return: intersecting area (rect), None if not intersecting\n        '''", "\n", "a", "=", "Rectangle", "(", "np", ".", "min", "(", "points_1", ",", "axis", "=", "0", ")", ".", "astype", "(", "int", ")", "[", "0", "]", "-", "tolerance", ",", "\n", "np", ".", "min", "(", "points_1", ",", "axis", "=", "0", ")", ".", "astype", "(", "int", ")", "[", "1", "]", "-", "tolerance", ",", "\n", "np", ".", "max", "(", "points_1", ",", "axis", "=", "0", ")", ".", "astype", "(", "int", ")", "[", "0", "]", "+", "tolerance", ",", "\n", "np", ".", "max", "(", "points_1", ",", "axis", "=", "0", ")", ".", "astype", "(", "int", ")", "[", "1", "]", "+", "tolerance", ")", "\n", "b", "=", "Rectangle", "(", "np", ".", "min", "(", "points_2", ",", "axis", "=", "0", ")", ".", "astype", "(", "int", ")", "[", "0", "]", "-", "tolerance", ",", "\n", "np", ".", "min", "(", "points_2", ",", "axis", "=", "0", ")", ".", "astype", "(", "int", ")", "[", "1", "]", "-", "tolerance", ",", "\n", "np", ".", "max", "(", "points_2", ",", "axis", "=", "0", ")", ".", "astype", "(", "int", ")", "[", "0", "]", "+", "tolerance", ",", "\n", "np", ".", "max", "(", "points_2", ",", "axis", "=", "0", ")", ".", "astype", "(", "int", ")", "[", "1", "]", "+", "tolerance", ")", "\n", "intersect", "=", "a", "&", "b", "\n", "return", "intersect", "\n", "\n"]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.basic_processor.BasicProcessor.check_rect_overlap": [[113, 130], ["utility.rectangle.Rectangle", "utility.rectangle.Rectangle", "numpy.min().astype", "numpy.min().astype", "numpy.max().astype", "numpy.max().astype", "numpy.min().astype", "numpy.min().astype", "numpy.max().astype", "numpy.max().astype", "numpy.min", "numpy.min", "numpy.max", "numpy.max", "numpy.min", "numpy.min", "numpy.max", "numpy.max"], "methods", ["None"], ["", "def", "check_rect_overlap", "(", "self", ",", "points_1", ",", "points_2", ",", "tolerance", "=", "0", ")", ":", "\n", "        ", "'''\n        This function check overlapping of point groups\n        :param points_1:\n        :param points_2:\n        :return: intersecting area (rect), None if not intersecting\n        '''", "\n", "a", "=", "Rectangle", "(", "np", ".", "min", "(", "points_1", ",", "axis", "=", "0", ")", ".", "astype", "(", "int", ")", "[", "0", "]", "-", "tolerance", ",", "\n", "np", ".", "min", "(", "points_1", ",", "axis", "=", "0", ")", ".", "astype", "(", "int", ")", "[", "1", "]", "-", "tolerance", ",", "\n", "np", ".", "max", "(", "points_1", ",", "axis", "=", "0", ")", ".", "astype", "(", "int", ")", "[", "0", "]", "+", "tolerance", ",", "\n", "np", ".", "max", "(", "points_1", ",", "axis", "=", "0", ")", ".", "astype", "(", "int", ")", "[", "1", "]", "+", "tolerance", ")", "\n", "b", "=", "Rectangle", "(", "np", ".", "min", "(", "points_2", ",", "axis", "=", "0", ")", ".", "astype", "(", "int", ")", "[", "0", "]", "-", "tolerance", ",", "\n", "np", ".", "min", "(", "points_2", ",", "axis", "=", "0", ")", ".", "astype", "(", "int", ")", "[", "1", "]", "-", "tolerance", ",", "\n", "np", ".", "max", "(", "points_2", ",", "axis", "=", "0", ")", ".", "astype", "(", "int", ")", "[", "0", "]", "+", "tolerance", ",", "\n", "np", ".", "max", "(", "points_2", ",", "axis", "=", "0", ")", ".", "astype", "(", "int", ")", "[", "1", "]", "+", "tolerance", ")", "\n", "intersect", "=", "a", "&", "b", "\n", "return", "intersect", "\n", "\n"]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.basic_processor.BasicProcessor.analyse_sequence": [[131, 143], ["numpy.abs", "numpy.arange", "numpy.fft.fftfreq", "numpy.abs", "numpy.mean", "numpy.fft.fft", "numpy.sum", "numpy.count_nonzero", "numpy.std"], "methods", ["None"], ["", "def", "analyse_sequence", "(", "self", ",", "X", ")", ":", "\n", "        ", "FFT", "=", "np", ".", "abs", "(", "np", ".", "fft", ".", "fft", "(", "X", ",", "axis", "=", "0", ")", ")", "\n", "t", "=", "np", ".", "arange", "(", "X", ".", "shape", "[", "0", "]", ")", "\n", "freq", "=", "np", ".", "fft", ".", "fftfreq", "(", "t", ".", "shape", "[", "-", "1", "]", ")", "\n", "frate", "=", "25", "\n", "freq_in_hertz", "=", "np", ".", "abs", "(", "freq", "*", "frate", ")", "\n", "FFT", "[", "(", "freq_in_hertz", ">", "2.5", ")", "|", "(", "freq_in_hertz", "<", "0.5", ")", ",", ":", "]", "=", "0", "\n", "\n", "avg_fft", "=", "np", ".", "sum", "(", "FFT", ")", "/", "np", ".", "count_nonzero", "(", "FFT", ")", "\n", "\n", "avg_std", "=", "np", ".", "mean", "(", "np", ".", "std", "(", "X", ",", "axis", "=", "0", ")", ")", "\n", "return", "avg_fft", ",", "avg_std", "\n", "\n"]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.basic_processor.BasicProcessor.analyse_sequence_new": [[144, 164], ["numpy.abs", "numpy.arange", "numpy.fft.fftfreq", "numpy.abs", "numpy.std", "numpy.mean", "numpy.fft.fft", "int"], "methods", ["None"], ["", "def", "analyse_sequence_new", "(", "self", ",", "X", ")", ":", "\n", "        ", "'''\n        This function analyses sequence data X\n            FFT = FFT[(freq_in_hertz > 2.5) | (freq_in_hertz < 0.5), :]\n            filters FFT data we are interested in\n        :param X:  to be analysed\n        :return: FFT, STD, MEAN\n        '''", "\n", "FFT", "=", "np", ".", "abs", "(", "np", ".", "fft", ".", "fft", "(", "X", ",", "axis", "=", "0", ")", ")", "\n", "t", "=", "np", ".", "arange", "(", "X", ".", "shape", "[", "0", "]", ")", "\n", "freq", "=", "np", ".", "fft", ".", "fftfreq", "(", "t", ".", "shape", "[", "-", "1", "]", ")", "\n", "frate", "=", "25", "\n", "freq_in_hertz", "=", "np", ".", "abs", "(", "freq", "*", "frate", ")", "\n", "FFT", "=", "FFT", "[", "(", "freq_in_hertz", ">", "2.5", ")", "|", "(", "freq_in_hertz", "<", "0.5", ")", ",", ":", "]", "\n", "FFT", "=", "FFT", "[", ":", "int", "(", "FFT", ".", "shape", "[", "0", "]", "/", "2", ")", ",", ":", "]", "\n", "\n", "STD", "=", "np", ".", "std", "(", "X", ",", "axis", "=", "0", ")", "\n", "MEAN", "=", "np", ".", "mean", "(", "X", ",", "axis", "=", "0", ")", "\n", "\n", "return", "FFT", ",", "STD", ",", "MEAN", "\n", "\n"]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.basic_processor.BasicProcessor.get_first_derivative": [[165, 171], ["numpy.zeros", "range"], "methods", ["None"], ["", "def", "get_first_derivative", "(", "self", ",", "X_0th", ")", ":", "\n", "        ", "time", "=", "0.04", "\n", "X_1st", "=", "np", ".", "zeros", "(", "(", "X_0th", ".", "shape", "[", "0", "]", "-", "1", ",", "X_0th", ".", "shape", "[", "1", "]", ")", ")", "\n", "for", "i", "in", "range", "(", "X_0th", ".", "shape", "[", "0", "]", "-", "1", ")", ":", "\n", "            ", "X_1st", "[", "i", "]", "=", "(", "X_0th", "[", "i", "+", "1", "]", "-", "X_0th", "[", "i", "]", ")", "/", "time", "\n", "", "return", "X_1st", "\n", "\n"]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.basic_processor.BasicProcessor.transfer_to_array": [[172, 177], ["numpy.zeros", "numpy.load"], "methods", ["None"], ["", "def", "transfer_to_array", "(", "self", ",", "segments", ")", ":", "\n", "        ", "X", "=", "np", ".", "zeros", "(", "(", "np", ".", "load", "(", "self", ".", "processed_file", ")", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "\n", "for", "segment", "in", "segments", ":", "\n", "            ", "X", "[", "segment", "[", "0", "]", ":", "segment", "[", "1", "]", ",", ":", "]", "=", "1", "\n", "", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.basic_processor.BasicProcessor.transfer_to_segments": [[178, 203], ["range", "new_segments.append", "len", "continuous_segments.append", "continuous_segments.append"], "methods", ["None"], ["", "def", "transfer_to_segments", "(", "self", ",", "data", ",", "min_length", "=", "100", ",", "cutoff", "=", "0", ")", ":", "\n", "        ", "'''\n        This function transfers an array to segment list\n        :param data:\n        :return:\n        '''", "\n", "continuous_segments", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "data", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "if", "data", "[", "i", ",", "0", "]", "!=", "0", ":", "\n", "                ", "if", "len", "(", "continuous_segments", ")", "==", "0", ":", "\n", "                    ", "continuous_segments", ".", "append", "(", "[", "i", ",", "i", "+", "1", "]", ")", "\n", "", "else", ":", "\n", "                    ", "if", "continuous_segments", "[", "-", "1", "]", "[", "1", "]", "==", "i", ":", "\n", "                        ", "continuous_segments", "[", "-", "1", "]", "[", "1", "]", "+=", "1", "\n", "", "else", ":", "\n", "                        ", "continuous_segments", ".", "append", "(", "[", "i", ",", "i", "+", "1", "]", ")", "\n", "\n", "", "", "", "", "new_segments", "=", "[", "]", "\n", "for", "segment", "in", "continuous_segments", ":", "\n", "            ", "if", "segment", "[", "1", "]", "-", "segment", "[", "0", "]", ">=", "(", "min_length", "+", "cutoff", "*", "2", ")", ":", "\n", "                ", "new_segments", ".", "append", "(", "[", "segment", "[", "0", "]", "+", "cutoff", ",", "segment", "[", "1", "]", "-", "cutoff", "]", ")", "\n", "\n", "", "", "continuous_segments", "=", "new_segments", "\n", "\n", "return", "continuous_segments", "\n", "\n"]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.basic_processor.BasicProcessor.show_frames": [[204, 308], ["cv2.VideoCapture", "numpy.load", "int", "print", "cv2.VideoCapture.set", "cv2.VideoWriter_fourcc", "print", "print", "cv2.VideoCapture.release", "cv2.VideoCapture.get", "cv2.VideoCapture.get", "cv2.VideoCapture.get", "cv2.VideoWriter", "cv2.VideoCapture.read", "range", "range", "data[].reshape", "data[].reshape", "data[].reshape", "basic_processor.BasicProcessor.check_overlap", "cv2.VideoWriter.release", "cv2.VideoCapture.get", "basic_processor.BasicProcessor.paint_point", "basic_processor.BasicProcessor.paint_point", "basic_processor.BasicProcessor.get_cordinate", "cv2.VideoWriter.write", "cv2.imshow", "ord", "int", "int", "cv2.rectangle", "cv2.rectangle", "cv2.waitKey", "cv2.VideoCapture.get", "cv2.VideoCapture.get"], "methods", ["home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.elan_portal.ElanPortal.read", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.basic_processor.BasicProcessor.check_overlap", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.painting.paint_point", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.painting.paint_point", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.rectangle.Rectangle.get_cordinate"], ["", "def", "show_frames", "(", "self", ",", "starting", ",", "ending", ",", "label_data", "=", "None", ",", "save_video", "=", "False", ")", ":", "\n", "        ", "'''\n        Show specific frames of a video\n        :param starting: int\n        :param ending: int\n        :return:\n        '''", "\n", "cap", "=", "cv2", ".", "VideoCapture", "(", "self", ".", "video_path", ")", "\n", "data", "=", "np", ".", "load", "(", "self", ".", "processed_file", ")", "\n", "\n", "# try:", "\n", "length", "=", "int", "(", "cap", ".", "get", "(", "cv2", ".", "CAP_PROP_FRAME_COUNT", ")", ")", "\n", "print", "(", "length", ")", "\n", "cap", ".", "set", "(", "1", ",", "starting", ")", "\n", "\n", "fourcc", "=", "cv2", ".", "VideoWriter_fourcc", "(", "*", "'XVID'", ")", "\n", "print", "(", "cap", ".", "get", "(", "cv2", ".", "CAP_PROP_FRAME_HEIGHT", ")", ",", "'~~~'", ",", "cap", ".", "get", "(", "cv2", ".", "CAP_PROP_FRAME_WIDTH", ")", ")", "\n", "if", "save_video", ":", "\n", "            ", "out", "=", "cv2", ".", "VideoWriter", "(", "'output.avi'", ",", "fourcc", ",", "cap", ".", "get", "(", "cv2", ".", "CAP_PROP_FPS", ")", ",", "(", "int", "(", "cap", ".", "get", "(", "cv2", ".", "CAP_PROP_FRAME_WIDTH", ")", ")", ",", "int", "(", "cap", ".", "get", "(", "cv2", ".", "CAP_PROP_FRAME_HEIGHT", ")", ")", ")", ")", "\n", "\n", "", "t", "=", "starting", "\n", "print", "(", "data", ".", "shape", ")", "\n", "while", "(", "t", "<", "ending", ")", ":", "\n", "# print(t)", "\n", "            ", "ret", ",", "frame", "=", "cap", ".", "read", "(", ")", "\n", "# Display all the data points", "\n", "\n", "for", "i", "in", "range", "(", "25", ")", ":", "\n", "                ", "frame", "=", "self", ".", "paint_point", "(", "frame", ",", "[", "data", "[", "t", ",", "i", "*", "2", "]", ",", "data", "[", "t", ",", "i", "*", "2", "+", "1", "]", "]", ")", "\n", "", "for", "i", "in", "range", "(", "25", ",", "95", ")", ":", "\n", "                ", "frame", "=", "self", ".", "paint_point", "(", "frame", ",", "[", "data", "[", "t", ",", "i", "*", "2", "]", ",", "data", "[", "t", ",", "i", "*", "2", "+", "1", "]", "]", ",", "color", "=", "COLOR_BLUE", ")", "\n", "# for i in range(95, 116):", "\n", "#     frame = self.paint_point(frame, [data[t, i * 2], data[t, i * 2 + 1]], color=COLOR_GREEN)", "\n", "# for i in range(116, 137):", "\n", "#     frame = self.paint_point(frame, [data[t, i * 2], data[t, i * 2 + 1]], color=COLOR_YELLOW)", "\n", "\n", "", "left_hand_data", "=", "data", "[", "t", ",", "194", ":", "232", "]", ".", "reshape", "(", "-", "1", ",", "2", ")", "\n", "right_hand_data", "=", "data", "[", "t", ",", "236", ":", "274", "]", ".", "reshape", "(", "-", "1", ",", "2", ")", "\n", "face_data", "=", "data", "[", "t", ",", "50", ":", "190", "]", ".", "reshape", "(", "-", "1", ",", "2", ")", "\n", "\n", "# frame = self.paint_rectangle_to_points(frame, left_hand_data, color=COLOR_GREEN)", "\n", "# frame = self.paint_rectangle_to_points(frame, right_hand_data, color=COLOR_YELLOW)", "\n", "\n", "# Check hands overlapping", "\n", "intersect", "=", "self", ".", "check_overlap", "(", "left_hand_data", ",", "right_hand_data", ")", "\n", "if", "intersect", "is", "not", "None", ":", "\n", "                ", "x1", ",", "y1", ",", "x2", ",", "y2", "=", "intersect", ".", "get_cordinate", "(", ")", "\n", "\n", "# for i in range(left_hand_data.shape[0]):", "\n", "#     frame = self.paint_point(frame, left_hand_data[i, :], color=COLOR_YELLOW)", "\n", "#     frame = self.paint_point(frame, right_hand_data[i, :], color=COLOR_BLUE)", "\n", "# frame = self.paint_rectangle_to_points(frame,", "\n", "#                                       np.vstack((left_hand_data, right_hand_data)),", "\n", "#                                       color=COLOR_GREEN)", "\n", "\n", "\n", "\n", "# Check hand-face overlapping", "\n", "# intersect = self.check_overlap(left_hand_data, face_data)", "\n", "# if intersect is not None:", "\n", "#     x1, y1, x2, y2 = intersect.get_cordinate()", "\n", "#     cv2.rectangle(frame,", "\n", "#                   (x1, y1),", "\n", "#                   (x2, y2),", "\n", "#                   COLOR_GREEN,", "\n", "#                   2)", "\n", "#", "\n", "# intersect = self.check_overlap(right_hand_data, face_data)", "\n", "# if intersect is not None:", "\n", "#     x1, y1, x2, y2 = intersect.get_cordinate()", "\n", "#     cv2.rectangle(frame,", "\n", "#                   (x1, y1),", "\n", "#                   (x2, y2),", "\n", "#                   COLOR_BLUE,", "\n", "#                   2)", "\n", "", "if", "label_data", "is", "not", "None", ":", "\n", "                ", "if", "label_data", "[", "t", ",", "0", "]", "==", "1", ":", "\n", "                    ", "cv2", ".", "rectangle", "(", "frame", ",", "\n", "(", "500", ",", "200", ")", ",", "\n", "(", "550", ",", "250", ")", ",", "\n", "COLOR_RED", ",", "\n", "2", ")", "\n", "", "else", ":", "\n", "                    ", "cv2", ".", "rectangle", "(", "frame", ",", "\n", "(", "500", ",", "200", ")", ",", "\n", "(", "550", ",", "250", ")", ",", "\n", "COLOR_GREEN", ",", "\n", "2", ")", "\n", "", "", "if", "save_video", ":", "\n", "                ", "out", ".", "write", "(", "frame", ")", "\n", "", "else", ":", "\n", "                ", "cv2", ".", "imshow", "(", "'frame'", ",", "frame", ")", "\n", "\n", "", "if", "cv2", ".", "waitKey", "(", "40", ")", "&", "0xFF", "==", "ord", "(", "'q'", ")", ":", "\n", "                ", "break", "\n", "# if t == starting:", "\n", "#     input()", "\n", "", "t", "+=", "1", "\n", "# except Exception as e:", "\n", "# print(e)", "\n", "\n", "", "cap", ".", "release", "(", ")", "\n", "if", "save_video", ":", "\n", "            ", "out", ".", "release", "(", ")", "\n", "# cv2.destroyAllWindows()", "\n"]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.leg_action_analyser.LegActionAnalyser.__init__": [[13, 15], ["component.basic_processor.BasicProcessor.__init__"], "methods", ["home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.line_rectangle.Line_Rectangle.__init__"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "path_data", ")", ":", "\n", "        ", "BasicProcessor", ".", "__init__", "(", "self", ",", "name", ",", "path_data", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.leg_action_analyser.LegActionAnalyser.compute_static_and_rhythmic_feet": [[16, 131], ["np.load", "np.zeros", "range", "print", "np.zeros", "cv2.VideoCapture", "int", "print", "cv2.destroyAllWindows", "cv2.VideoCapture.release", "range", "cv2.VideoCapture.get", "np.zeros", "range", "cv2.VideoCapture.read", "print", "leg_action_analyser.LegActionAnalyser.analyse_sequence", "leg_action_analyser.LegActionAnalyser.analyse_sequence", "np.max", "np.max", "print", "leg_action_analyser.LegActionAnalyser.compute_static_and_rhythmic_feet.get_first_derivative"], "methods", ["home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.elan_portal.ElanPortal.read", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.basic_processor.BasicProcessor.analyse_sequence", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.basic_processor.BasicProcessor.analyse_sequence", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.basic_processor.BasicProcessor.get_first_derivative"], ["", "def", "compute_static_and_rhythmic_feet", "(", "self", ")", ":", "\n", "        ", "FFT_thres_1", "=", "200", "\n", "STD_thres_1", "=", "8", "\n", "FFT_thres_2", "=", "100", "\n", "STD_thres_2", "=", "8", "\n", "\n", "data", "=", "np", ".", "load", "(", "self", ".", "processed_smooth_file", ")", "\n", "final_label_array", "=", "np", ".", "zeros", "(", "(", "data", ".", "shape", "[", "0", "]", ",", "2", ")", ")", "\n", "\n", "\n", "\n", "for", "foot", "in", "[", "'left'", ",", "'right'", "]", ":", "\n", "            ", "print", "(", "'analysing'", ",", "foot", ",", "'...'", ")", "\n", "# foot + knee", "\n", "label_array", "=", "np", ".", "zeros", "(", "(", "data", ".", "shape", "[", "0", "]", ",", "2", ")", ")", "\n", "\n", "cap", "=", "cv2", ".", "VideoCapture", "(", "self", ".", "video_path", ")", "\n", "\n", "# try:", "\n", "length", "=", "int", "(", "cap", ".", "get", "(", "cv2", ".", "CAP_PROP_FRAME_COUNT", ")", ")", "\n", "# cap.set(1, 50)", "\n", "print", "(", "length", ")", "\n", "t", "=", "0", "\n", "\n", "def", "get_first_derivative", "(", "X_0th", ")", ":", "\n", "                ", "time", "=", "0.04", "\n", "X_1st", "=", "np", ".", "zeros", "(", "(", "X_0th", ".", "shape", "[", "0", "]", "-", "1", ",", "X_0th", ".", "shape", "[", "1", "]", ")", ")", "\n", "for", "i", "in", "range", "(", "X_0th", ".", "shape", "[", "0", "]", "-", "1", ")", ":", "\n", "                    ", "X_1st", "[", "i", "]", "=", "(", "X_0th", "[", "i", "+", "1", "]", "-", "X_0th", "[", "i", "]", ")", "/", "time", "\n", "", "return", "X_1st", "\n", "\n", "", "while", "(", "t", "<", "data", ".", "shape", "[", "0", "]", "-", "25", ")", ":", "\n", "                ", "ret", ",", "frame", "=", "cap", ".", "read", "(", ")", "\n", "\n", "if", "t", "<", "25", ":", "\n", "                    ", "print", "(", "'skip'", ")", "\n", "t", "+=", "1", "\n", "continue", "\n", "", "print", "(", "'progress'", ",", "t", "/", "data", ".", "shape", "[", "0", "]", ",", "end", "=", "'\\r'", ")", "\n", "if", "foot", "==", "'right'", ":", "\n", "                    ", "foot_data", "=", "data", "[", "t", "-", "25", ":", "t", "+", "25", ",", "44", ":", "50", "]", "\n", "knee_data", "=", "data", "[", "t", "-", "25", ":", "t", "+", "25", ",", "20", ":", "22", "]", "\n", "", "else", ":", "\n", "                    ", "foot_data", "=", "data", "[", "t", "-", "25", ":", "t", "+", "25", ",", "38", ":", "44", "]", "\n", "knee_data", "=", "data", "[", "t", "-", "25", ":", "t", "+", "25", ",", "26", ":", "28", "]", "\n", "\n", "\n", "#frame = self.paint_rectangle_to_points(frame, foot_data[50, :].reshape((-1, 2)), color=COLOR_RED)", "\n", "\n", "\n", "", "avg_fft", ",", "avg_std", "=", "self", ".", "analyse_sequence", "(", "get_first_derivative", "(", "foot_data", ")", ")", "\n", "if", "avg_fft", ">=", "FFT_thres_1", "and", "avg_std", ">=", "STD_thres_1", ":", "\n", "                    ", "label_array", "[", "t", ",", "0", "]", "=", "3", "# dynamic + rhythmic", "\n", "frame", "=", "self", ".", "paint_rectangle_to_points", "(", "frame", ",", "foot_data", "[", "25", ",", ":", "]", ".", "reshape", "(", "(", "-", "1", ",", "2", ")", ")", ",", "color", "=", "COLOR_RED", ")", "\n", "", "elif", "avg_fft", ">=", "FFT_thres_1", "and", "avg_std", "<", "STD_thres_1", ":", "\n", "                    ", "label_array", "[", "t", ",", "0", "]", "=", "2", "# rhythmic", "\n", "frame", "=", "self", ".", "paint_rectangle_to_points", "(", "frame", ",", "foot_data", "[", "25", ",", ":", "]", ".", "reshape", "(", "(", "-", "1", ",", "2", ")", ")", ",", "color", "=", "COLOR_YELLOW", ")", "\n", "", "elif", "avg_fft", "<", "FFT_thres_1", "and", "avg_std", ">=", "STD_thres_1", ":", "\n", "                    ", "label_array", "[", "t", ",", "0", "]", "=", "1", "# dynamic", "\n", "", "elif", "avg_fft", "<", "FFT_thres_1", "and", "avg_std", "<", "STD_thres_1", ":", "\n", "                    ", "label_array", "[", "t", ",", "0", "]", "=", "0", "# static", "\n", "frame", "=", "self", ".", "paint_rectangle_to_points", "(", "frame", ",", "foot_data", "[", "25", ",", ":", "]", ".", "reshape", "(", "(", "-", "1", ",", "2", ")", ")", ",", "color", "=", "COLOR_GREEN", ")", "\n", "\n", "# print(avg_fft, avg_std)", "\n", "\n", "", "avg_fft", ",", "avg_std", "=", "self", ".", "analyse_sequence", "(", "get_first_derivative", "(", "knee_data", ")", ")", "\n", "if", "avg_fft", ">=", "FFT_thres_2", "and", "avg_std", ">=", "STD_thres_2", ":", "\n", "                    ", "label_array", "[", "t", ",", "1", "]", "=", "3", "# dynamic + rhythmic", "\n", "frame", "=", "self", ".", "paint_point", "(", "frame", ",", "knee_data", "[", "25", ",", ":", "]", ".", "reshape", "(", "-", "1", ")", ".", "tolist", "(", ")", ",", "color", "=", "COLOR_RED", ")", "\n", "", "elif", "avg_fft", ">=", "FFT_thres_2", "and", "avg_std", "<", "STD_thres_2", ":", "\n", "                    ", "label_array", "[", "t", ",", "1", "]", "=", "2", "# rhythmic", "\n", "frame", "=", "self", ".", "paint_point", "(", "frame", ",", "knee_data", "[", "25", ",", ":", "]", ".", "reshape", "(", "-", "1", ")", ".", "tolist", "(", ")", ",", "color", "=", "COLOR_YELLOW", ")", "\n", "", "elif", "avg_fft", "<", "FFT_thres_2", "and", "avg_std", ">=", "STD_thres_2", ":", "\n", "                    ", "label_array", "[", "t", ",", "1", "]", "=", "1", "# dynamic", "\n", "", "elif", "avg_fft", "<", "FFT_thres_2", "and", "avg_std", "<", "STD_thres_2", ":", "\n", "                    ", "label_array", "[", "t", ",", "1", "]", "=", "0", "# static", "\n", "frame", "=", "self", ".", "paint_point", "(", "frame", ",", "knee_data", "[", "25", ",", ":", "]", ".", "reshape", "(", "-", "1", ")", ".", "tolist", "(", ")", ",", "color", "=", "COLOR_GREEN", ")", "\n", "\n", "# print(avg_fft, avg_std, '\\n')", "\n", "\n", "# cv2.imshow('frame', frame)", "\n", "", "k", "=", "cv2", ".", "waitKey", "(", "40", ")", "&", "0xff", "\n", "if", "k", "==", "27", ":", "\n", "                    ", "break", "\n", "\n", "", "t", "+=", "1", "\n", "", "cv2", ".", "destroyAllWindows", "(", ")", "\n", "cap", ".", "release", "(", ")", "\n", "\n", "if", "foot", "==", "'left'", ":", "\n", "                ", "final_label_array", "[", ":", ",", "0", "]", "=", "np", ".", "max", "(", "label_array", ",", "axis", "=", "1", ")", "\n", "", "else", ":", "\n", "                ", "final_label_array", "[", ":", ",", "1", "]", "=", "np", ".", "max", "(", "label_array", ",", "axis", "=", "1", ")", "\n", "\n", "", "", "for", "x", "in", "range", "(", "4", ")", ":", "\n", "# compute continuous segment", "\n", "            ", "continuous_segments", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "data", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "if", "np", ".", "max", "(", "final_label_array", "[", "i", ",", ":", "]", ")", "==", "x", ":", "\n", "                    ", "if", "len", "(", "continuous_segments", ")", "==", "0", ":", "\n", "                        ", "continuous_segments", ".", "append", "(", "[", "i", ",", "i", "+", "1", "]", ")", "\n", "", "else", ":", "\n", "                        ", "if", "continuous_segments", "[", "-", "1", "]", "[", "1", "]", "==", "i", ":", "\n", "                            ", "continuous_segments", "[", "-", "1", "]", "[", "1", "]", "+=", "1", "\n", "", "else", ":", "\n", "                            ", "continuous_segments", ".", "append", "(", "[", "i", ",", "i", "+", "1", "]", ")", "\n", "", "", "", "", "if", "x", "==", "0", ":", "\n", "                ", "foot_static_segments", "=", "continuous_segments", "\n", "", "if", "x", "==", "1", ":", "\n", "                ", "foot_dynamic_segments", "=", "continuous_segments", "\n", "", "if", "x", "==", "2", ":", "\n", "                ", "foot_rhythmic_segments", "=", "continuous_segments", "\n", "", "if", "x", "==", "3", ":", "\n", "                ", "foot_dynamic_rythmic_segments", "=", "continuous_segments", "\n", "", "", "return", "foot_static_segments", ",", "foot_dynamic_segments", ",", "foot_rhythmic_segments", ",", "foot_dynamic_rythmic_segments", "\n", "\n"]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.leg_action_analyser.LegActionAnalyser.analyse_leg_action_optical_flow": [[132, 169], ["os.walk", "load_model", "data.keys", "json.dump", "print", "os.path.join", "os.path.join", "utility.decompose_string.decompose_string", "leg_action_analyser.LegActionAnalyser.analyse_sequence_new", "np.mean", "int", "print", "print", "open", "leg_action_analyser.LegActionAnalyser.get_first_derivative", "np.mean.reshape", "STD.reshape", "MEAN.reshape", "label_data.setdefault().setdefault", "os.path.join", "np.load", "np.argmax", "os.path.join", "print", "load_model.predict", "label_data.setdefault"], "methods", ["home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.model.fidgeting_dnn.Fidgeting_DNN.load_model", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.decompose_string.decompose_string", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.basic_processor.BasicProcessor.analyse_sequence_new", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.basic_processor.BasicProcessor.get_first_derivative"], ["", "def", "analyse_leg_action_optical_flow", "(", "self", ")", ":", "\n", "        ", "data", "=", "{", "}", "\n", "for", "root", ",", "dirs", ",", "files", "in", "os", ".", "walk", "(", "os", ".", "path", ".", "join", "(", "DATA_FOLDER", ",", "'leg_action_analysis_optical_flow'", ")", ")", ":", "\n", "            ", "for", "file", "in", "files", ":", "\n", "                ", "if", "'.npy'", "in", "file", ":", "\n", "                    ", "data", "[", "file", "]", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "root", ",", "file", ")", ")", "\n", "if", "data", "[", "file", "]", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "                        ", "print", "(", "file", ",", "data", "[", "file", "]", ".", "shape", ")", "\n", "\n", "", "", "", "", "label_data", "=", "{", "}", "\n", "from", "keras", ".", "models", "import", "load_model", "\n", "model", "=", "load_model", "(", "\n", "os", ".", "path", ".", "join", "(", "DATA_FOLDER", ",", "'pre-trained'", ",", "'hierarchical_DNN_leg.h5'", ")", "\n", ")", "\n", "for", "file", "in", "data", ".", "keys", "(", ")", ":", "\n", "            ", "participant_id", ",", "session_id", ",", "starting", ",", "ending", "=", "decompose_string", "(", "file", ")", "\n", "sub_data", "=", "data", "[", "file", "]", "\n", "if", "sub_data", ".", "shape", "[", "0", "]", "!=", "100", ":", "\n", "                ", "continue", "\n", "", "FFT", ",", "STD", ",", "MEAN", "=", "self", ".", "analyse_sequence_new", "(", "self", ".", "get_first_derivative", "(", "sub_data", ")", ")", "\n", "\n", "FFT", "=", "np", ".", "mean", "(", "FFT", ",", "axis", "=", "1", ")", "\n", "STD", "=", "STD", "# np.mean(STD)", "\n", "MEAN", "=", "MEAN", "# np.mean(MEAN, axis=0)", "\n", "\n", "single_x", "=", "[", "\n", "FFT", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", ",", "STD", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", ",", "MEAN", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", "\n", "]", "\n", "label", "=", "int", "(", "np", ".", "argmax", "(", "model", ".", "predict", "(", "single_x", ")", ",", "axis", "=", "1", ")", "[", "0", "]", ")", "\n", "print", "(", "FFT", ")", "\n", "print", "(", "label", ")", "\n", "label_data", ".", "setdefault", "(", "participant_id", ",", "{", "}", ")", ".", "setdefault", "(", "session_id", ",", "{", "}", ")", "[", "'{},{}'", ".", "format", "(", "starting", ",", "ending", ")", "]", "=", "label", "\n", "\n", "", "json", ".", "dump", "(", "label_data", ",", "open", "(", "\n", "os", ".", "path", ".", "join", "(", "DATA_FOLDER", ",", "'leg_action_analysis_optical_flow'", ",", "'optical_flow_result.json'", ")", ",", "\n", "'w'", ")", ")", "\n", "print", "(", "'saving completed.'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.video_processor.VideoProcessor.__init__": [[19, 21], ["component.basic_processor.BasicProcessor.__init__"], "methods", ["home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.line_rectangle.Line_Rectangle.__init__"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "path_data", ")", ":", "\n", "        ", "BasicProcessor", ".", "__init__", "(", "self", ",", "name", ",", "path_data", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.video_processor.VideoProcessor.preprocess_keypoints": [[22, 159], ["print", "print", "utility.pose_data_reader.read_reshaped_directory", "utility.pose_data_reader.read_reshaped_directory.keys", "print", "print", "numpy.delete", "print", "print", "pandas.read_csv", "face_data.iloc[].to_numpy.iloc[].to_numpy.iloc[].to_numpy", "face_data.iloc[].to_numpy.iloc[].to_numpy.iloc[].to_numpy", "print", "min", "print", "numpy.hstack", "print", "numpy.save", "print", "range", "print", "range", "range", "numpy.vstack", "int", "range", "numpy.vstack", "numpy.vstack", "utility.interpolation.cubic_interpolate", "utility.interpolation.cubic_interpolate", "scipy.signal.savgol_filter", "scipy.signal.savgol_filter", "int", "utility.interpolation.cubic_interpolate", "numpy.hstack", "numpy.zeros", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.pose_data_reader.read_reshaped_directory", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.interpolation.cubic_interpolate", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.interpolation.cubic_interpolate", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.interpolation.cubic_interpolate"], ["", "def", "preprocess_keypoints", "(", "self", ",", "cubic_interpolation", "=", "True", ",", "smooth", "=", "True", ",", "overwrite", "=", "False", ")", ":", "\n", "        ", "'''\n        preprocessing data and save to files for further usage\n        This is for full function\n        :param cubic_interpolation:\n        :param smooth:\n        :return:\n        '''", "\n", "# Read OpenPose output and merge into a numpy array", "\n", "print", "(", "'Preprocessing:'", ",", "self", ".", "processed_smooth_file", ")", "\n", "# if os.path.exists(self.processed_file):", "\n", "#     print('already processed')", "\n", "#     return", "\n", "\n", "print", "(", "'Reading OpenPose data...'", ")", "\n", "\n", "pose_raw_data", "=", "read_reshaped_directory", "(", "\n", "self", ".", "openpose_output_path", ",", "0", ")", "\n", "pose_data", "=", "None", "\n", "for", "session", "in", "pose_raw_data", ".", "keys", "(", ")", ":", "\n", "\n", "            ", "session_data", "=", "None", "\n", "for", "feature_name", "in", "[", "'pose'", ",", "'face'", ",", "'left'", ",", "'right'", "]", ":", "\n", "                ", "for", "i", "in", "range", "(", "pose_raw_data", "[", "session", "]", "[", "feature_name", "]", ".", "shape", "[", "0", "]", ")", ":", "\n", "                    ", "if", "session_data", "is", "None", ":", "\n", "                        ", "session_data", "=", "pose_raw_data", "[", "session", "]", "[", "feature_name", "]", "[", "i", ",", ":", ",", ":", "]", "\n", "", "else", ":", "\n", "                        ", "session_data", "=", "np", ".", "hstack", "(", "(", "session_data", ",", "\n", "pose_raw_data", "[", "session", "]", "[", "feature_name", "]", "[", "i", ",", ":", ",", ":", "]", ")", ")", "\n", "\n", "", "", "", "if", "pose_data", "is", "None", ":", "\n", "                ", "if", "session", "!=", "0", ":", "\n", "# shift data back", "\n", "                    ", "pose_data", "=", "np", ".", "vstack", "(", "(", "np", ".", "zeros", "(", "(", "session", ",", "session_data", ".", "shape", "[", "1", "]", ")", ")", ")", ")", "\n", "", "else", ":", "\n", "                    ", "pose_data", "=", "session_data", "\n", "", "", "else", ":", "\n", "# TODO: test on data with several sessions", "\n", "                ", "if", "pose_data", ".", "shape", "[", "0", "]", "<", "session", ":", "\n", "# need to shift back data", "\n", "                    ", "pose_data", "=", "np", ".", "vstack", "(", "(", "pose_data", ",", "np", ".", "zeros", "(", "(", "session", "-", "pose_data", ".", "shape", "[", "0", "]", ",", "pose_data", ".", "shape", "[", "1", "]", ")", ")", ")", ")", "\n", "", "pose_data", "=", "np", ".", "vstack", "(", "(", "pose_data", ",", "session_data", ")", ")", "\n", "\n", "", "", "print", "(", "pose_data", ".", "shape", ")", "\n", "\n", "'''\n        i = 0\n        try:\n            pose_data = None\n            while True:\n                t = str(i).rjust(12, '0')\n                keypoint_file = os.path.join(openpose_output_path, 'participant_video_' + t + '_keypoints.json')\n                with open(keypoint_file) as json_file:\n                    data = json.load(json_file)['people'][0]\n                    pose_keypoints = data['pose_keypoints_2d']\n                    face_keypoints = data['face_keypoints_2d']\n                    hand_left_keypoints = data['hand_left_keypoints_2d']\n                    hand_right_keypoints = data['hand_right_keypoints_2d']\n                    single_data = np.array(pose_keypoints + face_keypoints + hand_left_keypoints + hand_right_keypoints)\n                    #print(single_data)\n                    if pose_data is None:\n                        pose_data = single_data.reshape((1, -1))\n                    else:\n                        pose_data = np.vstack((pose_data, single_data.reshape((1, -1))))\n                i += 1\n        except:\n            print('To the end of this video')\n            print(pose_data.shape)\n        '''", "\n", "\n", "if", "cubic_interpolation", "or", "smooth", ":", "\n", "            ", "print", "(", "'start cubic interpolation and/or smoothing...'", ")", "\n", "for", "i", "in", "range", "(", "int", "(", "pose_data", ".", "shape", "[", "1", "]", "/", "3", ")", ")", ":", "\n", "                ", "x_data", "=", "pose_data", "[", ":", ",", "i", "*", "3", "]", "\n", "y_data", "=", "pose_data", "[", ":", ",", "i", "*", "3", "+", "1", "]", "\n", "confidence_data", "=", "pose_data", "[", ":", ",", "i", "*", "3", "+", "2", "]", "\n", "if", "cubic_interpolation", ":", "\n", "                    ", "x_data", "=", "cubic_interpolate", "(", "x_data", ",", "confidence_data", ")", "\n", "y_data", "=", "cubic_interpolate", "(", "y_data", ",", "confidence_data", ")", "\n", "", "if", "smooth", ":", "\n", "                    ", "x_data", "=", "savgol_filter", "(", "x_data", ",", "11", ",", "3", ")", "\n", "y_data", "=", "savgol_filter", "(", "y_data", ",", "11", ",", "3", ")", "\n", "\n", "", "pose_data", "[", ":", ",", "i", "*", "3", "]", "=", "x_data", "\n", "pose_data", "[", ":", ",", "i", "*", "3", "+", "1", "]", "=", "y_data", "\n", "\n", "", "", "confidence_index", "=", "[", "i", "*", "3", "+", "2", "for", "i", "in", "range", "(", "int", "(", "pose_data", ".", "shape", "[", "1", "]", "/", "3", ")", ")", "]", "\n", "print", "(", "'Removing confidence data from pose data...'", ")", "\n", "pose_data", "=", "np", ".", "delete", "(", "pose_data", ",", "confidence_index", ",", "axis", "=", "1", ")", "\n", "print", "(", "pose_data", ".", "shape", ")", "\n", "\n", "print", "(", "'Reading OpenFace data...'", ")", "\n", "face_data", "=", "pd", ".", "read_csv", "(", "self", ".", "openface_output_file", ",", "header", "=", "0", ")", "\n", "delay_compensation", "=", "20", "\n", "face_data", "=", "face_data", ".", "iloc", "[", "delay_compensation", ":", ",", ":", "]", "\n", "face_success", "=", "face_data", ".", "iloc", "[", ":", ",", "4", "]", ".", "to_numpy", "(", ")", "\n", "face_data", "=", "face_data", ".", "iloc", "[", ":", ",", "5", ":", "]", ".", "to_numpy", "(", ")", "\n", "\n", "# Reshape and cope the cordinates with original video", "\n", "landmarks", "=", "face_data", "[", ":", ",", "294", ":", "430", "]", "\n", "eyes", "=", "face_data", "[", ":", ",", "8", ":", "120", "]", "\n", "\n", "landmarks", "=", "landmarks", "/", "1.5", "\n", "eyes", "=", "eyes", "/", "1.5", "\n", "landmarks", "[", ":", ",", ":", "68", "]", "=", "landmarks", "[", ":", ",", ":", "68", "]", "+", "449", "\n", "landmarks", "[", ":", ",", "68", ":", "]", "=", "landmarks", "[", ":", ",", "68", ":", "]", "+", "73", "\n", "eyes", "[", ":", ",", ":", "68", "]", "=", "eyes", "[", ":", ",", ":", "68", "]", "+", "449", "\n", "eyes", "[", ":", ",", "68", ":", "]", "=", "eyes", "[", ":", ",", "68", ":", "]", "+", "73", "\n", "\n", "face_data", "[", ":", ",", "294", ":", "430", "]", "=", "landmarks", "\n", "face_data", "[", ":", ",", "8", ":", "120", "]", "=", "eyes", "\n", "\n", "print", "(", "face_data", ".", "shape", ")", "\n", "\n", "if", "cubic_interpolation", "or", "smooth", ":", "\n", "            ", "print", "(", "'start cubic interpolation and/or smoothing...'", ")", "\n", "for", "i", "in", "range", "(", "674", ")", ":", "# IMPORTANT: don't smooth/interpolate AUs", "\n", "# print('start cubic interpolation and/or smoothing...', 'feature No.', i)", "\n", "                ", "x_data", "=", "face_data", "[", ":", ",", "i", "]", "\n", "if", "cubic_interpolation", ":", "\n", "                    ", "x_data", "=", "cubic_interpolate", "(", "x_data", ",", "face_success", ")", "\n", "# if smooth:", "\n", "#   x_data = savgol_filter(x_data, 31, 3)", "\n", "", "face_data", "[", ":", ",", "i", "]", "=", "x_data", "\n", "\n", "# Take the min length of existing data", "\n", "", "", "min_length", "=", "min", "(", "face_data", ".", "shape", "[", "0", "]", ",", "pose_data", ".", "shape", "[", "0", "]", ")", "\n", "\n", "print", "(", "'stacking arrays...'", ")", "\n", "data", "=", "np", ".", "hstack", "(", "(", "pose_data", "[", ":", "min_length", ",", ":", "]", ",", "\n", "face_data", "[", ":", "min_length", ",", ":", "]", ")", ")", "\n", "print", "(", "'final shape:'", ",", "data", ".", "shape", ")", "\n", "\n", "# data = pose_data", "\n", "# print('final shape:', data.shape)", "\n", "\n", "np", ".", "save", "(", "self", ".", "processed_smooth_file", ",", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.video_processor.VideoProcessor.preprocess_actor_keypoints": [[160, 307], ["utility.dirs.create_dirs", "utility.dirs.create_dirs", "print", "print", "print", "numpy.delete", "print", "print", "print", "os.path.exists", "print", "os.path.exists", "os.path.join", "json.load", "numpy.array().reshape", "print", "print", "range", "utility.dirs.create_dirs", "numpy.save", "utility.dirs.create_dirs", "numpy.save", "print", "print", "os.path.exists", "print", "open", "numpy.vstack", "int", "range", "os.path.split", "os.path.split", "numpy.array", "utility.interpolation.cubic_interpolate", "utility.interpolation.cubic_interpolate", "scipy.signal.savgol_filter", "scipy.signal.savgol_filter", "int", "str().rjust", "os.path.split", "os.path.split", "str", "str"], "methods", ["home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.dirs.create_dirs", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.dirs.create_dirs", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.dirs.create_dirs", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.dirs.create_dirs", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.interpolation.cubic_interpolate", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.interpolation.cubic_interpolate"], ["", "def", "preprocess_actor_keypoints", "(", "self", ",", "cubic_interpolation", "=", "True", ",", "smooth", "=", "True", ",", "overwrite", "=", "False", ")", ":", "\n", "        ", "'''\n        preprocessing data and save to files for further usage\n        This is for only fidgeting detection\n        :param cubic_interpolation:\n        :param smooth:\n        :return:\n        '''", "\n", "# Read OpenPose output and merge into a numpy array", "\n", "create_dirs", "(", "[", "os", ".", "path", ".", "split", "(", "self", ".", "processed_smooth_file", ")", "[", "0", "]", "]", ")", "\n", "create_dirs", "(", "[", "os", ".", "path", ".", "split", "(", "self", ".", "processed_file", ")", "[", "0", "]", "]", ")", "\n", "\n", "if", "smooth", ":", "\n", "            ", "print", "(", "'Preprocessing:'", ",", "self", ".", "processed_smooth_file", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "self", ".", "processed_smooth_file", ")", ":", "\n", "                ", "print", "(", "'already processed'", ")", "\n", "return", "\n", "", "", "else", ":", "\n", "            ", "print", "(", "'Preprocessing:'", ",", "self", ".", "processed_file", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "self", ".", "processed_file", ")", ":", "\n", "                ", "print", "(", "'already processed'", ")", "\n", "return", "\n", "\n", "", "", "print", "(", "'Reading OpenPose data...'", ")", "\n", "pose_data", "=", "None", "\n", "i", "=", "0", "\n", "while", "True", ":", "\n", "            ", "single_file_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "openpose_output_path", ",", "str", "(", "self", ".", "participant_id", ")", "[", "-", "2", ":", "]", "+", "'_'", "+", "str", "(", "i", ")", ".", "rjust", "(", "12", ",", "'0'", ")", "+", "'_keypoints.json'", ")", "\n", "# print(single_file_path)", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "single_file_path", ")", ":", "\n", "                ", "print", "(", "'reading to the end'", ",", "i", ")", "\n", "break", "\n", "", "single_data", "=", "json", ".", "load", "(", "open", "(", "single_file_path", ",", "'r'", ")", ")", "\n", "single_data", "=", "single_data", "[", "'people'", "]", "[", "0", "]", "\n", "pose_keypoints_2d", "=", "single_data", "[", "'pose_keypoints_2d'", "]", "\n", "face_keypoints_2d", "=", "single_data", "[", "'face_keypoints_2d'", "]", "\n", "hand_left_keypoints_2d", "=", "single_data", "[", "'hand_left_keypoints_2d'", "]", "\n", "hand_right_keypoints_2d", "=", "single_data", "[", "'hand_right_keypoints_2d'", "]", "\n", "\n", "combined", "=", "pose_keypoints_2d", "+", "face_keypoints_2d", "+", "hand_left_keypoints_2d", "+", "hand_right_keypoints_2d", "\n", "# print(combined)", "\n", "combined", "=", "np", ".", "array", "(", "combined", ")", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", "\n", "if", "pose_data", "is", "None", ":", "\n", "                ", "pose_data", "=", "combined", "\n", "", "else", ":", "\n", "                ", "pose_data", "=", "np", ".", "vstack", "(", "(", "pose_data", ",", "combined", ")", ")", "\n", "", "print", "(", "'reading file...'", ",", "pose_data", ".", "shape", ",", "end", "=", "'\\r'", ")", "\n", "i", "+=", "1", "\n", "\n", "", "print", "(", "pose_data", ".", "shape", ")", "\n", "\n", "'''\n        i = 0\n        try:\n            pose_data = None\n            while True:\n                t = str(i).rjust(12, '0')\n                keypoint_file = os.path.join(openpose_output_path, 'participant_video_' + t + '_keypoints.json')\n                with open(keypoint_file) as json_file:\n                    data = json.load(json_file)['people'][0]\n                    pose_keypoints = data['pose_keypoints_2d']\n                    face_keypoints = data['face_keypoints_2d']\n                    hand_left_keypoints = data['hand_left_keypoints_2d']\n                    hand_right_keypoints = data['hand_right_keypoints_2d']\n                    single_data = np.array(pose_keypoints + face_keypoints + hand_left_keypoints + hand_right_keypoints)\n                    #print(single_data)\n                    if pose_data is None:\n                        pose_data = single_data.reshape((1, -1))\n                    else:\n                        pose_data = np.vstack((pose_data, single_data.reshape((1, -1))))\n                i += 1\n        except:\n            print('To the end of this video')\n            print(pose_data.shape)\n        '''", "\n", "\n", "if", "cubic_interpolation", "or", "smooth", ":", "\n", "            ", "print", "(", "'start cubic interpolation and/or smoothing...'", ")", "\n", "for", "i", "in", "range", "(", "int", "(", "pose_data", ".", "shape", "[", "1", "]", "/", "3", ")", ")", ":", "\n", "                ", "x_data", "=", "pose_data", "[", ":", ",", "i", "*", "3", "]", "\n", "y_data", "=", "pose_data", "[", ":", ",", "i", "*", "3", "+", "1", "]", "\n", "confidence_data", "=", "pose_data", "[", ":", ",", "i", "*", "3", "+", "2", "]", "\n", "if", "cubic_interpolation", ":", "\n", "                    ", "x_data", "=", "cubic_interpolate", "(", "x_data", ",", "confidence_data", ")", "\n", "y_data", "=", "cubic_interpolate", "(", "y_data", ",", "confidence_data", ")", "\n", "", "if", "smooth", ":", "\n", "                    ", "x_data", "=", "savgol_filter", "(", "x_data", ",", "11", ",", "3", ")", "\n", "y_data", "=", "savgol_filter", "(", "y_data", ",", "11", ",", "3", ")", "\n", "\n", "", "pose_data", "[", ":", ",", "i", "*", "3", "]", "=", "x_data", "\n", "pose_data", "[", ":", ",", "i", "*", "3", "+", "1", "]", "=", "y_data", "\n", "\n", "", "", "confidence_index", "=", "[", "i", "*", "3", "+", "2", "for", "i", "in", "range", "(", "int", "(", "pose_data", ".", "shape", "[", "1", "]", "/", "3", ")", ")", "]", "\n", "print", "(", "'Removing confidence data from pose data...'", ")", "\n", "pose_data", "=", "np", ".", "delete", "(", "pose_data", ",", "confidence_index", ",", "axis", "=", "1", ")", "\n", "print", "(", "pose_data", ".", "shape", ")", "\n", "\n", "# print('Reading OpenFace data...')", "\n", "# face_data = pd.read_csv(self.openface_output_file, header=0)", "\n", "# delay_compensation = 20", "\n", "# face_data = face_data.iloc[delay_compensation:, :]", "\n", "# face_success = face_data.iloc[:, 4].to_numpy()", "\n", "# face_data = face_data.iloc[:, 5:].to_numpy()", "\n", "#", "\n", "# # Reshape and cope the cordinates with original video", "\n", "# landmarks = face_data[:, 294:430]", "\n", "# eyes = face_data[:, 8:120]", "\n", "#", "\n", "# landmarks = landmarks / 1.5", "\n", "# eyes = eyes / 1.5", "\n", "# landmarks[:, :68] = landmarks[:, :68] + 449", "\n", "# landmarks[:, 68:] = landmarks[:, 68:] + 73", "\n", "# eyes[:, :68] = eyes[:, :68] + 449", "\n", "# eyes[:, 68:] = eyes[:, 68:] + 73", "\n", "#", "\n", "# face_data[:, 294:430] = landmarks", "\n", "# face_data[:, 8:120] = eyes", "\n", "#", "\n", "# print(face_data.shape)", "\n", "#", "\n", "# if cubic_interpolation or smooth:", "\n", "#     print('start cubic interpolation and/or smoothing...')", "\n", "#     for i in range(674):  # IMPORTANT: don't smooth/interpolate AUs", "\n", "#         # print('start cubic interpolation and/or smoothing...', 'feature No.', i)", "\n", "#         x_data = face_data[:, i]", "\n", "#         if cubic_interpolation:", "\n", "#             x_data = cubic_interpolate(x_data, face_success)", "\n", "#         # if smooth:", "\n", "#         #   x_data = savgol_filter(x_data, 31, 3)", "\n", "#         face_data[:, i] = x_data", "\n", "#", "\n", "# # Take the min length of existing data", "\n", "# min_length = min(face_data.shape[0], pose_data.shape[0])", "\n", "#", "\n", "# print('stacking arrays...')", "\n", "# data = np.hstack((pose_data[:min_length, :],", "\n", "#                   face_data[:min_length, :]))", "\n", "# print('final shape:', data.shape)", "\n", "\n", "data", "=", "pose_data", "\n", "print", "(", "'final shape:'", ",", "data", ".", "shape", ")", "\n", "if", "smooth", ":", "\n", "            ", "create_dirs", "(", "[", "os", ".", "path", ".", "split", "(", "self", ".", "processed_smooth_file", ")", "[", "0", "]", "]", ")", "\n", "np", ".", "save", "(", "self", ".", "processed_smooth_file", ",", "data", ")", "\n", "", "else", ":", "\n", "            ", "create_dirs", "(", "[", "os", ".", "path", ".", "split", "(", "self", ".", "processed_file", ")", "[", "0", "]", "]", ")", "\n", "np", ".", "save", "(", "self", ".", "processed_file", ",", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.video_processor.VideoProcessor.show_frames": [[311, 396], ["cv2.VideoCapture", "numpy.load", "int", "print", "cv2.VideoCapture.set", "print", "cv2.VideoCapture.release", "cv2.VideoCapture.get", "cv2.VideoCapture.read", "range", "range", "range", "range", "data[].reshape", "data[].reshape", "data[].reshape", "video_processor.VideoProcessor.check_overlap", "video_processor.VideoProcessor.check_overlap", "video_processor.VideoProcessor.check_overlap", "cv2.imshow", "video_processor.VideoProcessor.paint_point", "video_processor.VideoProcessor.paint_point", "video_processor.VideoProcessor.paint_point", "video_processor.VideoProcessor.paint_point", "video_processor.VideoProcessor.get_cordinate", "video_processor.VideoProcessor.get_cordinate", "cv2.rectangle", "video_processor.VideoProcessor.get_cordinate", "cv2.rectangle", "ord", "input", "cv2.waitKey"], "methods", ["home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.elan_portal.ElanPortal.read", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.basic_processor.BasicProcessor.check_overlap", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.basic_processor.BasicProcessor.check_overlap", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.basic_processor.BasicProcessor.check_overlap", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.painting.paint_point", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.painting.paint_point", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.painting.paint_point", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.painting.paint_point", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.rectangle.Rectangle.get_cordinate", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.rectangle.Rectangle.get_cordinate", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.rectangle.Rectangle.get_cordinate"], ["def", "show_frames", "(", "self", ",", "starting", ",", "ending", ")", ":", "\n", "        ", "'''\n        Show specific frames of a video\n        :param starting: int\n        :param ending: int\n        :return:\n        '''", "\n", "cap", "=", "cv2", ".", "VideoCapture", "(", "self", ".", "video_path", ")", "\n", "data", "=", "np", ".", "load", "(", "self", ".", "processed_file", ")", "\n", "\n", "# try:", "\n", "length", "=", "int", "(", "cap", ".", "get", "(", "cv2", ".", "CAP_PROP_FRAME_COUNT", ")", ")", "\n", "print", "(", "length", ")", "\n", "cap", ".", "set", "(", "1", ",", "starting", ")", "\n", "t", "=", "starting", "\n", "print", "(", "data", ".", "shape", ")", "\n", "while", "(", "t", "<", "ending", ")", ":", "\n", "            ", "ret", ",", "frame", "=", "cap", ".", "read", "(", ")", "\n", "# Display all the data points", "\n", "\n", "for", "i", "in", "range", "(", "25", ")", ":", "\n", "                ", "frame", "=", "self", ".", "paint_point", "(", "frame", ",", "[", "data", "[", "t", ",", "i", "*", "2", "]", ",", "data", "[", "t", ",", "i", "*", "2", "+", "1", "]", "]", ")", "\n", "", "for", "i", "in", "range", "(", "25", ",", "95", ")", ":", "\n", "                ", "frame", "=", "self", ".", "paint_point", "(", "frame", ",", "[", "data", "[", "t", ",", "i", "*", "2", "]", ",", "data", "[", "t", ",", "i", "*", "2", "+", "1", "]", "]", ",", "color", "=", "COLOR_BLUE", ")", "\n", "", "for", "i", "in", "range", "(", "95", ",", "116", ")", ":", "\n", "                ", "frame", "=", "self", ".", "paint_point", "(", "frame", ",", "[", "data", "[", "t", ",", "i", "*", "2", "]", ",", "data", "[", "t", ",", "i", "*", "2", "+", "1", "]", "]", ",", "color", "=", "COLOR_GREEN", ")", "\n", "", "for", "i", "in", "range", "(", "116", ",", "137", ")", ":", "\n", "                ", "frame", "=", "self", ".", "paint_point", "(", "frame", ",", "[", "data", "[", "t", ",", "i", "*", "2", "]", ",", "data", "[", "t", ",", "i", "*", "2", "+", "1", "]", "]", ",", "color", "=", "COLOR_YELLOW", ")", "\n", "\n", "", "left_hand_data", "=", "data", "[", "t", ",", "194", ":", "232", "]", ".", "reshape", "(", "-", "1", ",", "2", ")", "\n", "right_hand_data", "=", "data", "[", "t", ",", "236", ":", "274", "]", ".", "reshape", "(", "-", "1", ",", "2", ")", "\n", "face_data", "=", "data", "[", "t", ",", "50", ":", "190", "]", ".", "reshape", "(", "-", "1", ",", "2", ")", "\n", "\n", "# frame = self.paint_rectangle_to_points(frame, left_hand_data, color=COLOR_GREEN)", "\n", "# frame = self.paint_rectangle_to_points(frame, right_hand_data, color=COLOR_YELLOW)", "\n", "\n", "# Check hands overlapping", "\n", "intersect", "=", "self", ".", "check_overlap", "(", "left_hand_data", ",", "right_hand_data", ")", "\n", "if", "intersect", "is", "not", "None", ":", "\n", "                ", "x1", ",", "y1", ",", "x2", ",", "y2", "=", "intersect", ".", "get_cordinate", "(", ")", "\n", "\n", "# for i in range(left_hand_data.shape[0]):", "\n", "#     frame = self.paint_point(frame, left_hand_data[i, :], color=COLOR_YELLOW)", "\n", "#     frame = self.paint_point(frame, right_hand_data[i, :], color=COLOR_BLUE)", "\n", "# frame = self.paint_rectangle_to_points(frame,", "\n", "#                                       np.vstack((left_hand_data, right_hand_data)),", "\n", "#                                       color=COLOR_GREEN)", "\n", "\n", "'''\n                cv2.rectangle(frame,\n                              (x1, y1),\n                              (x2, y2),\n                              COLOR_YELLOW,\n                              2)\n                '''", "\n", "\n", "# Check hand-face overlapping", "\n", "", "intersect", "=", "self", ".", "check_overlap", "(", "left_hand_data", ",", "face_data", ")", "\n", "if", "intersect", "is", "not", "None", ":", "\n", "                ", "x1", ",", "y1", ",", "x2", ",", "y2", "=", "intersect", ".", "get_cordinate", "(", ")", "\n", "cv2", ".", "rectangle", "(", "frame", ",", "\n", "(", "x1", ",", "y1", ")", ",", "\n", "(", "x2", ",", "y2", ")", ",", "\n", "COLOR_GREEN", ",", "\n", "2", ")", "\n", "\n", "", "intersect", "=", "self", ".", "check_overlap", "(", "right_hand_data", ",", "face_data", ")", "\n", "if", "intersect", "is", "not", "None", ":", "\n", "                ", "x1", ",", "y1", ",", "x2", ",", "y2", "=", "intersect", ".", "get_cordinate", "(", ")", "\n", "cv2", ".", "rectangle", "(", "frame", ",", "\n", "(", "x1", ",", "y1", ")", ",", "\n", "(", "x2", ",", "y2", ")", ",", "\n", "COLOR_BLUE", ",", "\n", "2", ")", "\n", "\n", "", "cv2", ".", "imshow", "(", "'frame'", ",", "frame", ")", "\n", "if", "cv2", ".", "waitKey", "(", "40", ")", "&", "0xFF", "==", "ord", "(", "'q'", ")", ":", "\n", "                ", "break", "\n", "", "if", "t", "==", "starting", ":", "\n", "                ", "input", "(", ")", "\n", "", "t", "+=", "1", "\n", "# except Exception as e:", "\n", "# print(e)", "\n", "\n", "", "cap", ".", "release", "(", ")", "\n", "# cv2.destroyAllWindows()", "\n"]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.video_processor.VideoProcessor.optical_flow_demo": [[398, 596], ["json.load", "numpy.load", "numpy.zeros", "json.load.keys", "print", "range", "video_processor.VideoProcessor.compute_stationary_rectangles", "print", "cv2.VideoCapture", "cv2.VideoCapture.get", "print", "int", "print", "json.load", "numpy.full", "json.load.keys", "speaker_array.reshape.reshape.reshape", "print", "numpy.full", "input", "cv2.VideoCapture.set", "cv2.VideoCapture.isOpened", "cv2.destroyAllWindows", "cv2.VideoCapture.release", "open", "int", "int", "int", "numpy.array().reshape", "numpy.array", "numpy.hstack", "range", "cv2.VideoCapture.get", "open", "int", "print", "video_processor.VideoProcessor.get_label", "int", "int", "cv2.VideoCapture.read", "data[].reshape", "data[].reshape", "data[].reshape", "cv2.imshow", "print", "math.floor", "len", "len", "math.floor", "min", "math.ceil", "min", "print", "video_processor.VideoProcessor.paint_text", "valid_intersect_data.keys", "cv2.rectangle", "cv2.waitKey", "str", "segment.split", "segment.split", "range", "abs", "abs", "numpy.array", "valid_intersect_data.keys", "int", "video_processor.VideoProcessor.paint_text", "video_processor.VideoProcessor.paint_text", "video_processor.VideoProcessor.paint_text", "str", "int", "int", "label_centroid.keys", "numpy.min", "numpy.max", "video_processor.VideoProcessor.paint_text", "str", "video_processor.VideoProcessor.paint_text", "len", "video_processor.VideoProcessor.paint_text", "json.load.keys"], "methods", ["home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.hand_cross_analyser.HandCrossAnalyser.compute_stationary_rectangles", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.component.basic_processor.BasicProcessor.get_label", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.elan_portal.ElanPortal.read", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.painting.paint_text", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.painting.paint_text", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.painting.paint_text", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.painting.paint_text", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.painting.paint_text", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.painting.paint_text", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.painting.paint_text"], ["", "def", "optical_flow_demo", "(", "self", ",", "play_starting", "=", "0", ")", ":", "\n", "        ", "'''\n        This function demonstrates the result of optical flow analyses\n        :param play_starting:\n        :return:\n        '''", "\n", "label_data", "=", "json", ".", "load", "(", "open", "(", "'optical_flow_result.json'", ",", "'r'", ")", ")", "\n", "try", ":", "\n", "            ", "label_data", "=", "label_data", "[", "str", "(", "self", ".", "participant_id", ")", "]", "[", "str", "(", "self", ".", "session_id", ")", "]", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "print", "(", "'no hands playing data...'", ")", "\n", "label_data", "=", "{", "}", "\n", "\n", "", "window_size", "=", "100", "\n", "window_step", "=", "50", "\n", "FFT_thres", "=", "30", "\n", "STD_thres", "=", "8", "\n", "data", "=", "np", ".", "load", "(", "self", ".", "processed_file", ")", "\n", "\n", "# generate label array", "\n", "label_array", "=", "np", ".", "zeros", "(", "(", "data", ".", "shape", "[", "0", "]", ",", "2", ")", ")", "\n", "label_centroid", "=", "{", "}", "\n", "\n", "for", "segment", "in", "label_data", ".", "keys", "(", ")", ":", "\n", "            ", "starting", "=", "int", "(", "segment", ".", "split", "(", "','", ")", "[", "0", "]", ")", "\n", "ending", "=", "int", "(", "segment", ".", "split", "(", "','", ")", "[", "1", "]", ")", "\n", "centroid", "=", "int", "(", "math", ".", "floor", "(", "(", "starting", "+", "ending", ")", "/", "2", ")", ")", "\n", "p", "=", "(", "centroid", ",", "label_data", "[", "segment", "]", "[", "0", "]", ",", "label_data", "[", "segment", "]", "[", "1", "]", ")", "\n", "label_centroid", "[", "centroid", "]", "=", "label_data", "[", "segment", "]", "\n", "\n", "", "print", "(", "'preprocessing label data'", ")", "\n", "for", "t", "in", "range", "(", "data", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "related_centroids", "=", "[", "(", "i", ",", "label_centroid", "[", "i", "]", ")", "\n", "for", "i", "in", "range", "(", "int", "(", "t", "-", "0.5", "*", "window_size", ")", ",", "int", "(", "t", "+", "0.5", "*", "window_size", ")", ")", "\n", "if", "i", "in", "label_centroid", ".", "keys", "(", ")", "]", "\n", "\n", "if", "len", "(", "related_centroids", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "", "if", "len", "(", "related_centroids", ")", "==", "1", ":", "\n", "                ", "closest_centroid", "=", "related_centroids", "[", "0", "]", "\n", "", "else", ":", "\n", "                ", "id_1", "=", "related_centroids", "[", "0", "]", "[", "0", "]", "\n", "id_2", "=", "related_centroids", "[", "1", "]", "[", "0", "]", "\n", "if", "abs", "(", "id_1", "-", "t", ")", "<", "abs", "(", "id_2", "-", "t", ")", ":", "\n", "                    ", "closest_centroid", "=", "related_centroids", "[", "0", "]", "\n", "", "else", ":", "\n", "                    ", "closest_centroid", "=", "related_centroids", "[", "1", "]", "\n", "", "", "avg_fft", "=", "closest_centroid", "[", "1", "]", "[", "0", "]", "\n", "avg_std", "=", "closest_centroid", "[", "1", "]", "[", "1", "]", "\n", "\n", "label_array", "[", "t", ",", ":", "]", "=", "np", ".", "array", "(", "[", "avg_fft", ",", "avg_std", "]", ")", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", "\n", "\n", "", "continuous_segments", ",", "valid_intersect_data", "=", "self", ".", "compute_stationary_rectangles", "(", "cutoff", "=", "10", ")", "\n", "\n", "best_rects", "=", "{", "}", "\n", "for", "segment", "in", "continuous_segments", ":", "\n", "# find largest rectangle for each segment", "\n", "            ", "rects", "=", "[", "valid_intersect_data", "[", "i", "]", "for", "i", "in", "valid_intersect_data", ".", "keys", "(", ")", "\n", "if", "i", ">=", "segment", "[", "0", "]", "and", "i", "<", "segment", "[", "1", "]", "]", "\n", "rects", "=", "np", ".", "array", "(", "rects", ")", "\n", "best_rect", "=", "np", ".", "hstack", "(", "(", "np", ".", "min", "(", "rects", ",", "axis", "=", "0", ")", "[", ":", "2", "]", ",", "np", ".", "max", "(", "rects", ",", "axis", "=", "0", ")", "[", "2", ":", "]", ")", ")", "\n", "for", "i", "in", "range", "(", "segment", "[", "0", "]", ",", "segment", "[", "1", "]", ")", ":", "\n", "                ", "best_rects", "[", "i", "]", "=", "best_rect", "\n", "\n", "", "", "print", "(", "continuous_segments", ")", "\n", "\n", "cap", "=", "cv2", ".", "VideoCapture", "(", "self", ".", "video_path", ")", "\n", "fps", "=", "cap", ".", "get", "(", "cv2", ".", "CAP_PROP_FPS", ")", "\n", "print", "(", "'fps:'", ",", "fps", ")", "\n", "length", "=", "int", "(", "cap", ".", "get", "(", "cv2", ".", "CAP_PROP_FRAME_COUNT", ")", ")", "\n", "\n", "print", "(", "'Reading speaker info...'", ")", "\n", "speaker_data", "=", "json", ".", "load", "(", "open", "(", "self", ".", "path_data", "[", "'speaker_data'", "]", ",", "'r'", ")", ")", "\n", "speaker_array", "=", "np", ".", "full", "(", "(", "data", ".", "shape", "[", "0", "]", ",", "1", ")", ",", "-", "1", ")", "\n", "\n", "for", "spk", "in", "speaker_data", ".", "keys", "(", ")", ":", "\n", "            ", "sub_spk_data", "=", "speaker_data", "[", "spk", "]", "\n", "spk", "=", "int", "(", "spk", ")", "\n", "print", "(", "spk", ",", "'--->'", ")", "\n", "for", "segment", "in", "sub_spk_data", ":", "\n", "                ", "starting", "=", "segment", "[", "0", "]", "\n", "ending", "=", "segment", "[", "1", "]", "\n", "starting", "=", "math", ".", "floor", "(", "starting", "/", "1000", "*", "fps", ")", "\n", "starting", "=", "min", "(", "starting", ",", "speaker_array", ".", "shape", "[", "0", "]", ")", "\n", "ending", "=", "math", ".", "ceil", "(", "ending", "/", "1000", "*", "fps", ")", "\n", "ending", "=", "min", "(", "ending", ",", "speaker_array", ".", "shape", "[", "0", "]", ")", "\n", "speaker_array", "[", "starting", ":", "ending", ",", ":", "]", "=", "spk", "\n", "print", "(", "starting", ",", "ending", ")", "\n", "\n", "", "", "speaker_array", "=", "speaker_array", ".", "reshape", "(", "-", "1", ")", "\n", "# for spk in speaker_data.keys():", "\n", "#      spk = int(spk)", "\n", "#      print(spk, np.count_nonzero(speaker_array == spk))", "\n", "#         participant_speak_label_id = -1", "\n", "# participant_speak_max_frames = 0", "\n", "# for spk in speaker_data.keys():", "\n", "#     spk = int(spk)", "\n", "#     print(spk, np.count_nonzero(speaker_array == spk))", "\n", "#     if np.count_nonzero(speaker_array == spk) > participant_speak_max_frames:", "\n", "#         participant_speak_label_id = spk", "\n", "#         participant_speak_max_frames = np.count_nonzero(speaker_array == spk)", "\n", "#", "\n", "# print('participant_speak_id', participant_speak_label_id)", "\n", "\n", "# Read label data", "\n", "print", "(", "'Reading fidgeting label data...'", ")", "\n", "fidgeting_data", "=", "self", ".", "get_label", "(", ")", "[", "'fidgeting'", "]", "\n", "hand_fidgeting_data", "=", "[", "x", "for", "x", "in", "fidgeting_data", "if", "x", "[", "0", "]", "==", "'Hand'", "]", "\n", "hand_fidgeting_array", "=", "np", ".", "full", "(", "(", "data", ".", "shape", "[", "0", "]", ",", "1", ")", ",", "0", ")", "\n", "for", "item", "in", "hand_fidgeting_data", ":", "\n", "            ", "starting", "=", "int", "(", "item", "[", "1", "]", "*", "fps", ")", "\n", "ending", "=", "int", "(", "item", "[", "2", "]", "*", "fps", ")", "\n", "hand_fidgeting_array", "[", "starting", ":", "ending", ",", ":", "]", "=", "1", "\n", "\n", "", "input", "(", "'ready to play!'", ")", "\n", "\n", "# Create some random colors", "\n", "# color = np.random.randint(0, 255, (100, 3))", "\n", "cap", ".", "set", "(", "1", ",", "play_starting", ")", "\n", "t", "=", "play_starting", "\n", "\n", "while", "(", "cap", ".", "isOpened", "(", ")", ")", ":", "\n", "# print(t)", "\n", "            ", "ret", ",", "frame", "=", "cap", ".", "read", "(", ")", "\n", "videotime", "=", "t", "/", "fps", "# video time in secs", "\n", "# print('current time:', videotime)", "\n", "# Read and print speaker data", "\n", "\n", "try", ":", "\n", "                ", "if", "int", "(", "speaker_array", "[", "t", "]", ")", "in", "speaker_label_data", "[", "self", ".", "participant_id", "]", "[", "self", ".", "session_id", "]", ":", "\n", "                    ", "frame", "=", "self", ".", "paint_text", "(", "frame", ",", "'Speaking'", ",", "(", "400", ",", "200", ")", ",", "font_size", "=", "1", ")", "\n", "# elif int(speaker_array[t]) == -1:", "\n", "#    frame = self.paint_text(frame, 'Unknown', (400, 200), font_size=1)", "\n", "# else:", "\n", "#    frame = self.paint_text(frame, 'Interviewer speaking', (400, 200), font_size=1)", "\n", "", "", "except", ":", "\n", "                ", "frame", "=", "self", ".", "paint_text", "(", "frame", ",", "\n", "'{} of {} speaking'", ".", "format", "(", "str", "(", "speaker_array", "[", "t", "]", ")", ",", "len", "(", "speaker_data", ".", "keys", "(", ")", ")", "-", "1", ")", ",", "\n", "(", "100", ",", "100", ")", ")", "\n", "\n", "", "left_hand_data", "=", "data", "[", "t", ",", "194", ":", "232", "]", ".", "reshape", "(", "-", "1", ",", "2", ")", "\n", "right_hand_data", "=", "data", "[", "t", ",", "236", ":", "274", "]", ".", "reshape", "(", "-", "1", ",", "2", ")", "\n", "face_data", "=", "data", "[", "t", ",", "50", ":", "190", "]", ".", "reshape", "(", "-", "1", ",", "2", ")", "\n", "\n", "# frame = self.paint_rectangle_to_points(frame, left_hand_data, color=COLOR_GREEN)", "\n", "# frame = self.paint_rectangle_to_points(frame, right_hand_data, color=COLOR_YELLOW)", "\n", "\n", "# # Check hands overlapping", "\n", "# intersect = self.check_overlap(left_hand_data, right_hand_data)", "\n", "# if intersect is not None:", "\n", "#     x1, y1, x2, y2 = intersect.get_cordinate()", "\n", "#     frame = self.paint_rectangle_to_points(frame,", "\n", "#                                           np.vstack((left_hand_data, right_hand_data)),", "\n", "#                                           color=COLOR_GREEN)", "\n", "#     cv2.rectangle(frame,", "\n", "#                   (x1, y1),", "\n", "#                   (x2, y2),", "\n", "#                   COLOR_BLUE,", "\n", "#                   2)", "\n", "if", "hand_fidgeting_array", "[", "t", ",", "0", "]", "==", "1", ":", "\n", "                ", "frame", "=", "self", ".", "paint_text", "(", "frame", ",", "'Hand fidgeting'", ",", "(", "400", ",", "400", ")", ",", "font_size", "=", "2", ")", "\n", "\n", "", "if", "t", "in", "valid_intersect_data", ".", "keys", "(", ")", ":", "\n", "# print(t)", "\n", "                ", "rect", "=", "best_rects", "[", "t", "]", "\n", "avg_fft", "=", "label_array", "[", "t", ",", "0", "]", "\n", "avg_std", "=", "label_array", "[", "t", ",", "1", "]", "\n", "color", "=", "COLOR_YELLOW", "\n", "if", "(", "avg_fft", "!=", "0", "and", "avg_std", "!=", "0", ")", ":", "\n", "# print(avg_fft, avg_std)", "\n", "                    ", "if", "avg_fft", ">=", "FFT_thres", "or", "avg_std", ">=", "STD_thres", ":", "\n", "                        ", "color", "=", "COLOR_RED", "\n", "", "else", ":", "\n", "                        ", "color", "=", "COLOR_GREEN", "\n", "", "", "if", "avg_fft", ">=", "FFT_thres", "and", "avg_std", ">=", "STD_thres", ":", "\n", "                    ", "frame", "=", "self", ".", "paint_text", "(", "frame", ",", "'Rhythmic + Move'", ",", "(", "rect", "[", "2", "]", ",", "rect", "[", "3", "]", ")", ",", "font_size", "=", "0.5", ")", "\n", "", "elif", "avg_fft", ">=", "FFT_thres", "and", "avg_std", "<", "STD_thres", ":", "\n", "                    ", "frame", "=", "self", ".", "paint_text", "(", "frame", ",", "'Rhythmic'", ",", "(", "rect", "[", "2", "]", ",", "rect", "[", "3", "]", ")", ",", "font_size", "=", "0.5", ")", "\n", "", "elif", "avg_fft", "<", "FFT_thres", "and", "avg_std", ">=", "STD_thres", ":", "\n", "                    ", "frame", "=", "self", ".", "paint_text", "(", "frame", ",", "'Move'", ",", "(", "rect", "[", "2", "]", ",", "rect", "[", "3", "]", ")", ",", "font_size", "=", "0.5", ")", "\n", "", "elif", "avg_fft", "<", "FFT_thres", "and", "avg_std", "<", "STD_thres", ":", "\n", "                    ", "frame", "=", "self", ".", "paint_text", "(", "frame", ",", "'Stable'", ",", "(", "rect", "[", "2", "]", ",", "rect", "[", "3", "]", ")", ",", "font_size", "=", "0.5", ")", "\n", "\n", "", "frame", "=", "cv2", ".", "rectangle", "(", "frame", ",", "\n", "(", "rect", "[", "0", "]", "-", "10", ",", "rect", "[", "1", "]", "-", "10", ")", ",", "\n", "(", "rect", "[", "2", "]", "+", "10", ",", "rect", "[", "3", "]", "+", "10", ")", ",", "\n", "color", ",", "\n", "2", ")", "\n", "\n", "", "cv2", ".", "imshow", "(", "'frame'", ",", "frame", ")", "\n", "k", "=", "cv2", ".", "waitKey", "(", "40", ")", "&", "0xff", "\n", "if", "k", "==", "27", ":", "\n", "                ", "break", "\n", "\n", "", "t", "+=", "1", "\n", "# input()", "\n", "", "cv2", ".", "destroyAllWindows", "(", ")", "\n", "cap", ".", "release", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.model.fidgeting_dnn.Fidgeting_DNN.__init__": [[17, 21], ["keras.models.Sequential"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ",", "num_classes", "=", "2", ")", ":", "\n", "        ", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "model", "=", "Sequential", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.model.fidgeting_dnn.Fidgeting_DNN.build_multi_class_model": [[22, 59], ["keras.layers.Input", "keras.layers.Input", "keras.layers.Input", "keras.Model", "fidgeting_dnn.Fidgeting_DNN.model.compile", "print", "keras.layers.Dense", "keras.layers.Dense", "keras.layers.Dense", "keras.layers.Dense", "keras.layers.Dense", "keras.layers.Dense", "keras.layers.Concatenate", "keras.layers.Dense", "fidgeting_dnn.Fidgeting_DNN.model.summary"], "methods", ["None"], ["", "def", "build_multi_class_model", "(", "self", ")", ":", "\n", "        ", "input_fft", "=", "self", ".", "input_dim", "[", "0", "]", "\n", "input_std", "=", "self", ".", "input_dim", "[", "1", "]", "\n", "input_mean", "=", "self", ".", "input_dim", "[", "2", "]", "\n", "\n", "inputA", "=", "Input", "(", "shape", "=", "(", "input_fft", ",", ")", ")", "\n", "inputB", "=", "Input", "(", "shape", "=", "(", "input_std", ",", ")", ")", "\n", "inputC", "=", "Input", "(", "shape", "=", "(", "input_mean", ",", ")", ")", "\n", "\n", "x", "=", "Dense", "(", "64", ",", "activation", "=", "\"relu\"", ")", "(", "inputA", ")", "\n", "#x = Dropout(0.2)(x)", "\n", "x", "=", "Dense", "(", "4", ",", "activation", "=", "\"relu\"", ")", "(", "x", ")", "\n", "\n", "y", "=", "Dense", "(", "8", ",", "activation", "=", "\"relu\"", ")", "(", "inputB", ")", "\n", "y", "=", "Dense", "(", "1", ",", "activation", "=", "\"relu\"", ")", "(", "y", ")", "\n", "\n", "m", "=", "Dense", "(", "4", ",", "activation", "=", "\"relu\"", ")", "(", "inputC", ")", "\n", "m", "=", "Dense", "(", "1", ",", "activation", "=", "\"relu\"", ")", "(", "m", ")", "\n", "\n", "combined", "=", "Concatenate", "(", "axis", "=", "1", ")", "(", "[", "x", ",", "y", ",", "m", "]", ")", "\n", "\n", "z", "=", "Dense", "(", "self", ".", "num_classes", ",", "activation", "=", "\"softmax\"", ")", "(", "combined", ")", "\n", "# z = Dense(3, activation=\"softmax\")(z)", "\n", "\n", "self", ".", "model", "=", "Model", "(", "inputs", "=", "[", "inputA", ",", "inputB", ",", "inputC", "]", ",", "outputs", "=", "z", ")", "\n", "# self.model.add(Dense(64, activation='relu', input_dim= self.input_dim))", "\n", "# self.model.add(Dropout(0.1))", "\n", "# self.model.add(Dense(64, activation='relu'))", "\n", "# self.model.add(Dropout(0.1))", "\n", "# self.model.add(Dense(self.num_classes, activation='softmax'))", "\n", "\n", "# sgd = SGD(lr=0.01, decay=1e-6, momentum=0.9, nesterov=True)", "\n", "self", ".", "model", ".", "compile", "(", "loss", "=", "'categorical_crossentropy'", ",", "\n", "optimizer", "=", "'adam'", ",", "\n", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "\n", "print", "(", "self", ".", "model", ".", "summary", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.model.fidgeting_dnn.Fidgeting_DNN.slice_input": [[60, 68], ["print", "result.append"], "methods", ["None"], ["", "def", "slice_input", "(", "self", ",", "X", ")", ":", "\n", "        ", "print", "(", "X", ".", "shape", ")", "\n", "x", "=", "0", "\n", "result", "=", "[", "]", "\n", "for", "i", "in", "self", ".", "input_dim", ":", "\n", "            ", "result", ".", "append", "(", "X", "[", ":", ",", "x", ":", "x", "+", "i", "]", ")", "\n", "x", "+=", "i", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.model.fidgeting_dnn.Fidgeting_DNN.train_multi_class_model": [[69, 80], ["fidgeting_dnn.Fidgeting_DNN.slice_input", "fidgeting_dnn.Fidgeting_DNN.slice_input", "keras.utils.to_categorical", "keras.utils.to_categorical", "fidgeting_dnn.Fidgeting_DNN.model.fit"], "methods", ["home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.model.fidgeting_dnn.Fidgeting_DNN.slice_input", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.model.fidgeting_dnn.Fidgeting_DNN.slice_input"], ["", "def", "train_multi_class_model", "(", "self", ",", "X_train", ",", "y_train", ",", "X_dev", ",", "y_dev", ",", "class_weight", "=", "{", "0", ":", "1", ",", "1", ":", "1", "}", ")", ":", "\n", "        ", "X_train", "=", "self", ".", "slice_input", "(", "X_train", ")", "\n", "X_dev", "=", "self", ".", "slice_input", "(", "X_dev", ")", "\n", "\n", "y_train", "=", "to_categorical", "(", "y_train", ",", "num_classes", "=", "self", ".", "num_classes", ",", "dtype", "=", "'float32'", ")", "\n", "y_dev", "=", "to_categorical", "(", "y_dev", ",", "num_classes", "=", "self", ".", "num_classes", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "self", ".", "model", ".", "fit", "(", "X_train", ",", "y_train", ",", "\n", "batch_size", "=", "64", ",", "epochs", "=", "300", ",", "\n", "validation_data", "=", "(", "X_dev", ",", "y_dev", ")", ",", "\n", "class_weight", "=", "class_weight", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.model.fidgeting_dnn.Fidgeting_DNN.evaluate_multi_class": [[82, 91], ["fidgeting_dnn.Fidgeting_DNN.slice_input", "fidgeting_dnn.Fidgeting_DNN.model.predict", "keras.utils.to_categorical", "numpy.argmax", "numpy.argmax", "print", "sklearn.metrics.classification_report", "sklearn.metrics.classification_report", "range", "range"], "methods", ["home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.model.fidgeting_dnn.Fidgeting_DNN.slice_input"], ["", "def", "evaluate_multi_class", "(", "self", ",", "X", ",", "y", ")", ":", "\n", "        ", "X", "=", "self", ".", "slice_input", "(", "X", ")", "\n", "\n", "y_pred", "=", "self", ".", "model", ".", "predict", "(", "X", ",", "batch_size", "=", "128", ")", "\n", "y", "=", "to_categorical", "(", "y", ",", "num_classes", "=", "self", ".", "num_classes", ",", "dtype", "=", "'float32'", ")", "\n", "y", "=", "np", ".", "argmax", "(", "y", ",", "axis", "=", "1", ")", "\n", "y_pred", "=", "np", ".", "argmax", "(", "y_pred", ",", "axis", "=", "1", ")", "\n", "print", "(", "classification_report", "(", "y", ",", "y_pred", ",", "range", "(", "self", ".", "num_classes", ")", ")", ")", "\n", "return", "classification_report", "(", "y", ",", "y_pred", ",", "range", "(", "self", ".", "num_classes", ")", ",", "output_dict", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.model.fidgeting_dnn.Fidgeting_DNN.build_model": [[92, 104], ["keras.models.Sequential", "fidgeting_dnn.Fidgeting_DNN.model.add", "fidgeting_dnn.Fidgeting_DNN.model.add", "fidgeting_dnn.Fidgeting_DNN.model.add", "fidgeting_dnn.Fidgeting_DNN.model.add", "fidgeting_dnn.Fidgeting_DNN.model.add", "fidgeting_dnn.Fidgeting_DNN.model.compile", "keras.layers.Dense", "keras.layers.Dropout", "keras.layers.Dense", "keras.layers.Dropout", "keras.layers.Dense"], "methods", ["None"], ["", "def", "build_model", "(", "self", ")", ":", "\n", "        ", "self", ".", "model", "=", "Sequential", "(", ")", "\n", "\n", "self", ".", "model", ".", "add", "(", "Dense", "(", "units", "=", "64", ",", "activation", "=", "'relu'", ",", "input_dim", "=", "self", ".", "input_dim", ")", ")", "\n", "self", ".", "model", ".", "add", "(", "Dropout", "(", "0.2", ")", ")", "\n", "self", ".", "model", ".", "add", "(", "Dense", "(", "units", "=", "16", ",", "activation", "=", "'relu'", ")", ")", "\n", "self", ".", "model", ".", "add", "(", "Dropout", "(", "0.2", ")", ")", "\n", "self", ".", "model", ".", "add", "(", "Dense", "(", "1", ",", "activation", "=", "'sigmoid'", ")", ")", "\n", "\n", "self", ".", "model", ".", "compile", "(", "optimizer", "=", "'adam'", ",", "\n", "loss", "=", "'binary_crossentropy'", ",", "\n", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.model.fidgeting_dnn.Fidgeting_DNN.train_model": [[105, 110], ["fidgeting_dnn.Fidgeting_DNN.model.fit"], "methods", ["None"], ["", "def", "train_model", "(", "self", ",", "X_train", ",", "y_train", ",", "X_dev", ",", "y_dev", ",", "class_weight", "=", "{", "0", ":", "1", ",", "1", ":", "1", "}", ")", ":", "\n", "        ", "self", ".", "model", ".", "fit", "(", "X_train", ",", "y_train", ",", "\n", "batch_size", "=", "64", ",", "epochs", "=", "1000", ",", "\n", "validation_data", "=", "(", "X_dev", ",", "y_dev", ")", ",", "\n", "class_weight", "=", "class_weight", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.model.fidgeting_dnn.Fidgeting_DNN.evaluate": [[112, 124], ["fidgeting_dnn.Fidgeting_DNN.model.predict", "print", "sklearn.metrics.classification_report"], "methods", ["None"], ["", "def", "evaluate", "(", "self", ",", "X", ",", "y", ")", ":", "\n", "        ", "y_pred", "=", "self", ".", "model", ".", "predict", "(", "X", ",", "batch_size", "=", "128", ")", "\n", "\n", "# for i in range(X.shape[0]):", "\n", "#     print(X[i, :])", "\n", "#     print(y[i], y_pred[i])", "\n", "#     print('\\n')", "\n", "\n", "y_pred", "[", "y_pred", "<", "0.5", "]", "=", "0", "\n", "y_pred", "[", "y_pred", ">=", "0.5", "]", "=", "1", "\n", "\n", "print", "(", "classification_report", "(", "y", ",", "y_pred", ",", "[", "0", ",", "1", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.model.fidgeting_dnn.Fidgeting_DNN.save_model": [[125, 127], ["fidgeting_dnn.Fidgeting_DNN.model.save"], "methods", ["None"], ["", "def", "save_model", "(", "self", ",", "path", ")", ":", "\n", "        ", "self", ".", "model", ".", "save", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.model.fidgeting_dnn.Fidgeting_DNN.load_model": [[128, 130], ["keras.models.load_model"], "methods", ["home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.model.fidgeting_dnn.Fidgeting_DNN.load_model"], ["", "def", "load_model", "(", "self", ",", "path", ")", ":", "\n", "        ", "self", ".", "model", "=", "load_model", "(", "path", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.agreement.Agreement.__init__": [[7, 10], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data1", ",", "data2", ")", ":", "\n", "        ", "self", ".", "data1", "=", "data1", "\n", "self", ".", "data2", "=", "data2", "\n", "\n"]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.agreement.Agreement.get_score": [[11, 30], ["numpy.zeros_like", "print", "print", "print", "print", "print", "print", "numpy.count_nonzero", "numpy.count_nonzero", "numpy.count_nonzero", "numpy.count_nonzero", "numpy.count_nonzero", "min", "numpy.count_nonzero", "numpy.count_nonzero"], "methods", ["None"], ["", "def", "get_score", "(", "self", ")", ":", "\n", "        ", "overlap_array", "=", "np", ".", "zeros_like", "(", "self", ".", "data1", ")", "\n", "print", "(", "'overlap:'", ")", "\n", "overlap_array", "[", "(", "self", ".", "data1", "==", "1", ")", "&", "(", "self", ".", "data2", "==", "1", ")", "]", "=", "1", "\n", "print", "(", "\n", "np", ".", "count_nonzero", "(", "overlap_array", ")", "/", "min", "(", "\n", "np", ".", "count_nonzero", "(", "self", ".", "data1", ")", ",", "\n", "np", ".", "count_nonzero", "(", "self", ".", "data2", ")", "\n", ")", "\n", ")", "\n", "print", "(", "'total on 1'", ")", "\n", "print", "(", "\n", "np", ".", "count_nonzero", "(", "self", ".", "data1", ")", "\n", ")", "\n", "print", "(", "'total on 2'", ")", "\n", "print", "(", "\n", "np", ".", "count_nonzero", "(", "self", ".", "data2", ")", "\n", ")", "\n", "return", "np", ".", "count_nonzero", "(", "overlap_array", ")", "/", "np", ".", "count_nonzero", "(", "self", ".", "data1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.rectangle.Rectangle.intersection": [[3, 11], ["max", "max", "min", "min", "min", "min", "min", "min", "max", "max", "max", "max", "type"], "methods", ["None"], ["    ", "def", "intersection", "(", "self", ",", "other", ")", ":", "\n", "        ", "a", ",", "b", "=", "self", ",", "other", "\n", "x1", "=", "max", "(", "min", "(", "a", ".", "x1", ",", "a", ".", "x2", ")", ",", "min", "(", "b", ".", "x1", ",", "b", ".", "x2", ")", ")", "\n", "y1", "=", "max", "(", "min", "(", "a", ".", "y1", ",", "a", ".", "y2", ")", ",", "min", "(", "b", ".", "y1", ",", "b", ".", "y2", ")", ")", "\n", "x2", "=", "min", "(", "max", "(", "a", ".", "x1", ",", "a", ".", "x2", ")", ",", "max", "(", "b", ".", "x1", ",", "b", ".", "x2", ")", ")", "\n", "y2", "=", "min", "(", "max", "(", "a", ".", "y1", ",", "a", ".", "y2", ")", ",", "max", "(", "b", ".", "y1", ",", "b", ".", "y2", ")", ")", "\n", "if", "x1", "<", "x2", "and", "y1", "<", "y2", ":", "\n", "            ", "return", "type", "(", "self", ")", "(", "x1", ",", "y1", ",", "x2", ",", "y2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.rectangle.Rectangle.difference": [[14, 31], ["itertools.product", "xs.add", "xs.add", "ys.add", "ys.add", "pairwise", "pairwise", "sorted", "sorted", "type"], "methods", ["None"], ["def", "difference", "(", "self", ",", "other", ")", ":", "\n", "        ", "inter", "=", "self", "&", "other", "\n", "if", "not", "inter", ":", "\n", "            ", "yield", "self", "\n", "return", "\n", "", "xs", "=", "{", "self", ".", "x1", ",", "self", ".", "x2", "}", "\n", "ys", "=", "{", "self", ".", "y1", ",", "self", ".", "y2", "}", "\n", "if", "self", ".", "x1", "<", "other", ".", "x1", "<", "self", ".", "x2", ":", "xs", ".", "add", "(", "other", ".", "x1", ")", "\n", "if", "self", ".", "x1", "<", "other", ".", "x2", "<", "self", ".", "x2", ":", "xs", ".", "add", "(", "other", ".", "x2", ")", "\n", "if", "self", ".", "y1", "<", "other", ".", "y1", "<", "self", ".", "y2", ":", "ys", ".", "add", "(", "other", ".", "y1", ")", "\n", "if", "self", ".", "y1", "<", "other", ".", "y2", "<", "self", ".", "y2", ":", "ys", ".", "add", "(", "other", ".", "y2", ")", "\n", "for", "(", "x1", ",", "x2", ")", ",", "(", "y1", ",", "y2", ")", "in", "itertools", ".", "product", "(", "\n", "pairwise", "(", "sorted", "(", "xs", ")", ")", ",", "pairwise", "(", "sorted", "(", "ys", ")", ")", "\n", ")", ":", "\n", "            ", "rect", "=", "type", "(", "self", ")", "(", "x1", ",", "y1", ",", "x2", ",", "y2", ")", "\n", "if", "rect", "!=", "inter", ":", "\n", "                ", "yield", "rect", "\n", "\n"]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.rectangle.Rectangle.__init__": [[34, 38], ["ValueError"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "x1", ",", "y1", ",", "x2", ",", "y2", ")", ":", "\n", "        ", "if", "x1", ">", "x2", "or", "y1", ">", "y2", ":", "\n", "            ", "raise", "ValueError", "(", "\"Coordinates are invalid\"", ")", "\n", "", "self", ".", "x1", ",", "self", ".", "y1", ",", "self", ".", "x2", ",", "self", ".", "y2", "=", "x1", ",", "y1", ",", "x2", ",", "y2", "\n", "\n"]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.rectangle.Rectangle.__iter__": [[39, 44], ["None"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "yield", "self", ".", "x1", "\n", "yield", "self", ".", "y1", "\n", "yield", "self", ".", "x2", "\n", "yield", "self", ".", "y2", "\n", "\n"]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.rectangle.Rectangle.get_cordinate": [[45, 47], ["None"], "methods", ["None"], ["", "def", "get_cordinate", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "x1", ",", "self", ".", "y1", ",", "self", ".", "x2", ",", "self", ".", "y2", "\n", "\n"]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.rectangle.Rectangle.__eq__": [[48, 50], ["isinstance", "tuple", "tuple"], "methods", ["None"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "isinstance", "(", "other", ",", "Rectangle", ")", "and", "tuple", "(", "self", ")", "==", "tuple", "(", "other", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.rectangle.Rectangle.__ne__": [[51, 53], ["None"], "methods", ["None"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "not", "(", "self", "==", "other", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.rectangle.Rectangle.__repr__": [[54, 56], ["repr", "type", "tuple"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "type", "(", "self", ")", ".", "__name__", "+", "repr", "(", "tuple", "(", "self", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.painting.paint_point": [[4, 14], ["cv2.circle", "int", "int"], "function", ["None"], ["def", "paint_point", "(", "img", ",", "point", ",", "color", "=", "(", "0", ",", "0", ",", "255", ")", ")", ":", "\n", "    ", "'''\n    This function paints point group\n    :param img:\n    :param point: shape of (-1, 2)\n    :param color:\n    :return:\n    '''", "\n", "cv2", ".", "circle", "(", "img", ",", "(", "int", "(", "point", "[", "0", "]", ")", ",", "int", "(", "point", "[", "1", "]", ")", ")", ",", "1", ",", "color", ",", "-", "1", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.painting.paint_text": [[16, 28], ["cv2.putText", "int", "int"], "function", ["None"], ["", "def", "paint_text", "(", "img", ",", "text", ",", "point", ",", "color", "=", "(", "0", ",", "205", ",", "193", ")", ")", ":", "\n", "    ", "'''\n    This function add text to a point\n    :param img:\n    :param text:\n    :param point:\n    :param color:\n    :return:\n    '''", "\n", "font", "=", "cv2", ".", "FONT_HERSHEY_SIMPLEX", "\n", "cv2", ".", "putText", "(", "img", ",", "text", ",", "(", "int", "(", "point", "[", "0", "]", ")", ",", "int", "(", "point", "[", "1", "]", ")", ")", ",", "font", ",", "0.4", ",", "color", ",", "1", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.painting.paint_line": [[30, 41], ["cv2.line", "int", "int", "int", "int"], "function", ["None"], ["", "def", "paint_line", "(", "img", ",", "point1", ",", "point2", ",", "color", "=", "(", "0", ",", "205", ",", "193", ")", ")", ":", "\n", "    ", "'''\n    This function paints body joints\n    :param img:\n    :param point_1: shape of (2, )\n    :param point_2:  shape of (2, )\n    :param colour:\n    :return:\n    '''", "\n", "cv2", ".", "line", "(", "img", ",", "(", "int", "(", "point1", "[", "0", "]", ")", ",", "int", "(", "point1", "[", "1", "]", ")", ")", ",", "(", "int", "(", "point2", "[", "0", "]", ")", ",", "int", "(", "point2", "[", "1", "]", ")", ")", ",", "color", ",", "2", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.painting.paint_rectangle_to_points": [[43, 58], ["numpy.array", "cv2.rectangle", "tuple", "tuple", "numpy.min().astype", "numpy.max().astype", "numpy.min", "numpy.max"], "function", ["None"], ["", "def", "paint_rectangle_to_points", "(", "img", ",", "points", ",", "color", "=", "(", "0", ",", "255", ",", "0", ")", ")", ":", "\n", "    ", "'''\n    This function paints rectangle to a group of points\n    :param img:\n    :param points: shape of (-1, 2)\n    :param color:\n    :return:\n    '''", "\n", "points", "=", "np", ".", "array", "(", "points", ")", "\n", "cv2", ".", "rectangle", "(", "img", ",", "\n", "tuple", "(", "np", ".", "min", "(", "points", ",", "axis", "=", "0", ")", ".", "astype", "(", "int", ")", ")", ",", "\n", "tuple", "(", "np", ".", "max", "(", "points", ",", "axis", "=", "0", ")", ".", "astype", "(", "int", ")", ")", ",", "\n", "color", ",", "\n", "1", ")", "\n", "return", "img", "", "", ""]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.interpolation.cubic_interpolate": [[4, 28], ["range", "scipy.interpolate.interp1d", "scipy.interpolate.interp1d.", "numpy.array", "numpy.array", "numpy.array", "processed_collection.append", "time_axis.append", "range"], "function", ["None"], ["def", "cubic_interpolate", "(", "collection", ",", "confidence", ")", ":", "\n", "    ", "'''\n    Cubic Interpolation\n    :param collection:  np.array shape(n_frames,)\n    :param confidence:  np.array shpae(n_frames,)\n    :return: interpolated_collection: np.array shape(n_frames,)\n    '''", "\n", "t_max", "=", "collection", ".", "shape", "[", "0", "]", "\n", "\n", "processed_collection", "=", "[", "]", "\n", "time_axis", "=", "[", "]", "\n", "for", "x", "in", "range", "(", "t_max", ")", ":", "\n", "        ", "if", "confidence", "[", "x", "]", "!=", "0", ":", "\n", "            ", "processed_collection", ".", "append", "(", "collection", "[", "x", "]", ")", "\n", "time_axis", ".", "append", "(", "x", ")", "\n", "#else:", "\n", "#    print('missing data point!')", "\n", "\n", "", "", "f", "=", "interp1d", "(", "np", ".", "array", "(", "time_axis", ")", ",", "np", ".", "array", "(", "processed_collection", ")", ",", "kind", "=", "'cubic'", ",", "fill_value", "=", "'extrapolate'", ")", "\n", "#plt.plot([t for t in range(t_max)], pose_x_collection[index], 'o', dense_time_axis, f(dense_time_axis), '--')", "\n", "#plt.plot(dense_time_axis, f(dense_time_axis))", "\n", "#$plt.show()", "\n", "#print(f(np.array([t for t in range(t_max)])))", "\n", "return", "f", "(", "np", ".", "array", "(", "[", "t", "for", "t", "in", "range", "(", "t_max", ")", "]", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.base_config.string2score": [[32, 41], ["None"], "function", ["None"], ["def", "string2score", "(", "string", ")", ":", "\n", "    ", "if", "'Several days'", "in", "string", ":", "\n", "        ", "return", "1", "\n", "", "if", "'Not at all'", "in", "string", ":", "\n", "        ", "return", "0", "\n", "", "if", "'More than half the days'", "in", "string", ":", "\n", "        ", "return", "2", "\n", "", "if", "'Nearly every day'", "in", "string", ":", "\n", "        ", "return", "3", "\n", "\n"]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.dirs.create_dirs": [[3, 13], ["print", "os.path.exists", "os.makedirs", "print", "print"], "function", ["None"], ["def", "create_dirs", "(", "createdirs", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "for", "dir", "in", "createdirs", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "exists", "(", "dir", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "dir", ")", "\n", "print", "(", "\"{} folder created\"", ".", "format", "(", "dir", ")", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "\"folder already exists: {}\"", ".", "format", "(", "dir", ")", ")", "\n", "", "", "", "except", "Exception", "as", "e", ":", "\n", "        ", "print", "(", "e", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.label_parser.Label_Parser.__init__": [[7, 9], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "file_path", ")", ":", "\n", "        ", "self", ".", "file_path", "=", "file_path", "\n", "\n"]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.label_parser.Label_Parser.parse": [[10, 15], ["print", "pandas.read_csv", "pandas.read_csv.values.tolist"], "methods", ["None"], ["", "def", "parse", "(", "self", ")", ":", "\n", "        ", "print", "(", "self", ".", "file_path", ")", "\n", "data", "=", "pd", ".", "read_csv", "(", "self", ".", "file_path", ",", "header", "=", "None", ",", "delimiter", "=", "'\\t'", ")", "\n", "data", "=", "data", ".", "iloc", "[", ":", ",", "[", "0", ",", "3", ",", "5", ",", "8", "]", "]", "\n", "return", "data", ".", "values", ".", "tolist", "(", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.quadrilateral.Quadrilateral.__init__": [[8, 14], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "pointa", ",", "pointb", ",", "pointc", ",", "pointd", ")", ":", "\n", "# a, b, c, d must be in clockwise or counter clockwise order", "\n", "        ", "self", ".", "pointa", "=", "pointa", "\n", "self", ".", "pointb", "=", "pointb", "\n", "self", ".", "pointc", "=", "pointc", "\n", "self", ".", "pointd", "=", "pointd", "\n", "\n"]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.quadrilateral.Quadrilateral.paint_quadrilateral": [[15, 22], ["cv2.line", "cv2.line", "cv2.line", "cv2.line"], "methods", ["None"], ["", "def", "paint_quadrilateral", "(", "self", ",", "frame", ")", ":", "\n", "        ", "frame", "=", "cv2", ".", "line", "(", "frame", ",", "self", ".", "pointa", ",", "self", ".", "pointb", ",", "color", "=", "COLOR_YELLOW", ",", "thickness", "=", "2", ")", "\n", "frame", "=", "cv2", ".", "line", "(", "frame", ",", "self", ".", "pointb", ",", "self", ".", "pointc", ",", "color", "=", "COLOR_YELLOW", ",", "thickness", "=", "2", ")", "\n", "frame", "=", "cv2", ".", "line", "(", "frame", ",", "self", ".", "pointc", ",", "self", ".", "pointd", ",", "color", "=", "COLOR_YELLOW", ",", "thickness", "=", "2", ")", "\n", "frame", "=", "cv2", ".", "line", "(", "frame", ",", "self", ".", "pointd", ",", "self", ".", "pointa", ",", "color", "=", "COLOR_YELLOW", ",", "thickness", "=", "2", ")", "\n", "\n", "return", "frame", "\n", "\n"]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.quadrilateral.Quadrilateral.quadrilateral_intersection": [[23, 51], ["utility.line.Line", "utility.line.Line", "utility.line.Line", "utility.line.Line", "utility.line.Line", "utility.line.Line", "utility.line.Line", "utility.line.Line", "utility.line.Line.extend_segment", "utility.line.Line.extend_segment", "utility.line.Line.extend_segment", "utility.line.Line.extend_segment", "utility.line.Line.line_intersection"], "methods", ["home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.line.Line.extend_segment", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.line.Line.extend_segment", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.line.Line.extend_segment", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.line.Line.extend_segment", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.line.Line.line_intersection"], ["", "def", "quadrilateral_intersection", "(", "self", ",", "other", ",", "tolerance", "=", "0", ")", ":", "\n", "        ", "alpha", ",", "beta", "=", "self", ",", "other", "\n", "\n", "alpha1", "=", "Line", "(", "alpha", ".", "pointa", ",", "alpha", ".", "pointb", ")", "\n", "alpha2", "=", "Line", "(", "alpha", ".", "pointb", ",", "alpha", ".", "pointc", ")", "\n", "alpha3", "=", "Line", "(", "alpha", ".", "pointc", ",", "alpha", ".", "pointd", ")", "\n", "alpha4", "=", "Line", "(", "alpha", ".", "pointd", ",", "alpha", ".", "pointa", ")", "\n", "alpha_list", "=", "[", "alpha1", ",", "alpha2", ",", "alpha3", ",", "alpha4", "]", "\n", "\n", "beta1", "=", "Line", "(", "beta", ".", "pointa", ",", "beta", ".", "pointb", ")", "\n", "beta2", "=", "Line", "(", "beta", ".", "pointb", ",", "beta", ".", "pointc", ")", "\n", "beta3", "=", "Line", "(", "beta", ".", "pointc", ",", "beta", ".", "pointd", ")", "\n", "beta4", "=", "Line", "(", "beta", ".", "pointd", ",", "beta", ".", "pointa", ")", "\n", "\n", "beta1", "=", "Line", ".", "extend_segment", "(", "beta1", ",", "length", "=", "tolerance", ")", "\n", "beta2", "=", "Line", ".", "extend_segment", "(", "beta2", ",", "length", "=", "tolerance", ")", "\n", "beta3", "=", "Line", ".", "extend_segment", "(", "beta3", ",", "length", "=", "tolerance", ")", "\n", "beta4", "=", "Line", ".", "extend_segment", "(", "beta4", ",", "length", "=", "tolerance", ")", "\n", "beta_list", "=", "[", "beta1", ",", "beta2", ",", "beta3", ",", "beta4", "]", "\n", "\n", "intersection_bool", "=", "False", "\n", "for", "alpha_side", "in", "alpha_list", ":", "\n", "            ", "for", "beta_side", "in", "beta_list", ":", "\n", "                ", "intersection", "=", "Line", ".", "line_intersection", "(", "alpha_side", ",", "beta_side", ")", "\n", "if", "intersection", "[", "0", "]", "is", "not", "None", ":", "\n", "                    ", "intersection_bool", "=", "True", "\n", "\n", "", "", "", "return", "intersection_bool", "\n", "\n"]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.quadrilateral.Quadrilateral.quadrilateral_with_point": [[52, 75], ["utility.line.Line", "utility.line.Line", "utility.line.Line", "utility.line.Line", "utility.line.Line", "utility.line.Line", "utility.line.Line", "utility.line.Line", "utility.line.Line.line_intersection"], "methods", ["home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.line.Line.line_intersection"], ["", "def", "quadrilateral_with_point", "(", "self", ",", "point", ")", ":", "\n", "        ", "quadrilateral", ",", "point", "=", "self", ",", "point", "\n", "\n", "alpha1", "=", "Line", "(", "quadrilateral", ".", "pointa", ",", "quadrilateral", ".", "pointb", ")", "\n", "alpha2", "=", "Line", "(", "quadrilateral", ".", "pointb", ",", "quadrilateral", ".", "pointc", ")", "\n", "alpha3", "=", "Line", "(", "quadrilateral", ".", "pointc", ",", "quadrilateral", ".", "pointd", ")", "\n", "alpha4", "=", "Line", "(", "quadrilateral", ".", "pointd", ",", "quadrilateral", ".", "pointa", ")", "\n", "\n", "line1", "=", "Line", "(", "quadrilateral", ".", "pointa", ",", "point", ")", "\n", "line2", "=", "Line", "(", "quadrilateral", ".", "pointb", ",", "point", ")", "\n", "line3", "=", "Line", "(", "quadrilateral", ".", "pointc", ",", "point", ")", "\n", "line4", "=", "Line", "(", "quadrilateral", ".", "pointd", ",", "point", ")", "\n", "\n", "pairs", "=", "[", "[", "line1", ",", "alpha2", "]", ",", "[", "line1", ",", "alpha3", "]", ",", "[", "line2", ",", "alpha3", "]", ",", "[", "line2", ",", "alpha4", "]", ",", "\n", "[", "line3", ",", "alpha4", "]", ",", "[", "line3", ",", "alpha1", "]", ",", "[", "line4", ",", "alpha1", "]", ",", "[", "line4", ",", "alpha2", "]", "]", "\n", "\n", "inside_bool", "=", "True", "\n", "for", "pair", "in", "pairs", ":", "\n", "            ", "intersection", "=", "Line", ".", "line_intersection", "(", "pair", "[", "0", "]", ",", "pair", "[", "1", "]", ")", "\n", "if", "intersection", "[", "0", "]", "is", "not", "None", ":", "\n", "                ", "inside_bool", "=", "False", "\n", "\n", "", "", "return", "inside_bool", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.joint_to_box.extend_joint": [[6, 33], ["int", "int", "tuple", "int", "int", "tuple", "int", "int", "tuple", "int", "int", "tuple", "numpy.sqrt", "numpy.sqrt"], "function", ["None"], ["def", "extend_joint", "(", "point1", ",", "point2", ",", "width", "=", "30", ")", ":", "\n", "    ", "x1", "=", "point1", "[", "0", "]", "\n", "y1", "=", "point1", "[", "1", "]", "\n", "x2", "=", "point2", "[", "0", "]", "\n", "y2", "=", "point2", "[", "1", "]", "\n", "\n", "tan_theta", "=", "(", "x2", "-", "x1", ")", "/", "(", "y1", "-", "y2", ")", "\n", "sin_theta", "=", "(", "x2", "-", "x1", ")", "/", "np", ".", "sqrt", "(", "(", "x2", "-", "x1", ")", "**", "2", "+", "(", "y1", "-", "y2", ")", "**", "2", ")", "\n", "cos_theta", "=", "(", "y1", "-", "y2", ")", "/", "np", ".", "sqrt", "(", "(", "x2", "-", "x1", ")", "**", "2", "+", "(", "y1", "-", "y2", ")", "**", "2", ")", "\n", "\n", "xa", "=", "int", "(", "x1", "+", "width", "*", "cos_theta", ")", "\n", "ya", "=", "int", "(", "y1", "+", "width", "*", "sin_theta", ")", "\n", "pointa", "=", "tuple", "(", "[", "xa", ",", "ya", "]", ")", "\n", "\n", "xb", "=", "int", "(", "x2", "+", "width", "*", "cos_theta", ")", "\n", "yb", "=", "int", "(", "y2", "+", "width", "*", "sin_theta", ")", "\n", "pointb", "=", "tuple", "(", "[", "xb", ",", "yb", "]", ")", "\n", "\n", "xc", "=", "int", "(", "x2", "-", "width", "*", "cos_theta", ")", "\n", "yc", "=", "int", "(", "y2", "-", "width", "*", "sin_theta", ")", "\n", "pointc", "=", "tuple", "(", "[", "xc", ",", "yc", "]", ")", "\n", "\n", "xd", "=", "int", "(", "x1", "-", "width", "*", "cos_theta", ")", "\n", "yd", "=", "int", "(", "y1", "-", "width", "*", "sin_theta", ")", "\n", "pointd", "=", "tuple", "(", "[", "xd", ",", "yd", "]", ")", "\n", "\n", "return", "pointa", ",", "pointb", ",", "pointc", ",", "pointd", "\n", "", ""]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.pose_data_reader.read_reshaped_directory_all_people": [[9, 21], ["os.path.isdir", "re.compile", "set", "glob.glob", "re.compile.match", "int", "set.add", "pose_data_reader.read_reshaped_directory", "os.path.basename", "person_id_re.match.group"], "function", ["home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.pose_data_reader.read_reshaped_directory"], ["def", "read_reshaped_directory_all_people", "(", "directory", ")", ":", "\n", "    ", "assert", "os", ".", "path", ".", "isdir", "(", "directory", ")", ",", "\"Must be a directory to be able to read\"", "\n", "person_id_re", "=", "re", ".", "compile", "(", "\"^person_(\\d+)_\\w+_\\d+\\.npy$\"", ")", "\n", "people_ids", "=", "set", "(", ")", "\n", "for", "comp", "in", "glob", ".", "glob", "(", "\"{}/person_*.npy\"", ".", "format", "(", "directory", ")", ")", ":", "\n", "        ", "match", "=", "person_id_re", ".", "match", "(", "os", ".", "path", ".", "basename", "(", "comp", ")", ")", "\n", "assert", "match", "is", "not", "None", ",", "\"Must be able to match person regex, {}\"", ".", "format", "(", "comp", ")", "\n", "pid", "=", "int", "(", "match", ".", "group", "(", "1", ")", ")", "\n", "people_ids", ".", "add", "(", "pid", ")", "\n", "\n", "", "return", "{", "\n", "pid", ":", "read_reshaped_directory", "(", "directory", ",", "pid", ")", "for", "pid", "in", "people_ids", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.pose_data_reader.read_reshaped_directory": [[32, 44], ["os.path.isdir", "re.compile", "glob.glob", "re.compile.match", "int", "numpy.load", "os.path.basename", "file_re.match.group", "file_re.match.group"], "function", ["None"], ["", "def", "read_reshaped_directory", "(", "directory", ",", "person_index", ")", ":", "\n", "    ", "assert", "os", ".", "path", ".", "isdir", "(", "directory", ")", ",", "\"Must be a directory to be able to read\"", "\n", "file_re", "=", "re", ".", "compile", "(", "\"^person_{}_(\\w+)_(\\d+)\\.npy$\"", ".", "format", "(", "person_index", ")", ")", "\n", "blocks", "=", "{", "}", "\n", "for", "comp", "in", "glob", ".", "glob", "(", "\"{}/person_{}_*\"", ".", "format", "(", "directory", ",", "person_index", ")", ")", ":", "\n", "        ", "match", "=", "file_re", ".", "match", "(", "os", ".", "path", ".", "basename", "(", "comp", ")", ")", "\n", "assert", "match", "is", "not", "None", ",", "\"Must be able to match person regex, {}\"", ".", "format", "(", "comp", ")", "\n", "frame_start", "=", "int", "(", "match", ".", "group", "(", "2", ")", ")", "\n", "if", "frame_start", "not", "in", "blocks", ":", "\n", "            ", "blocks", "[", "frame_start", "]", "=", "{", "}", "\n", "", "blocks", "[", "frame_start", "]", "[", "match", ".", "group", "(", "1", ")", "]", "=", "np", ".", "load", "(", "comp", ")", "\n", "", "return", "blocks", "\n", "", ""]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.line.Line.__init__": [[5, 7], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "point1", ",", "point2", ")", ":", "\n", "        ", "self", ".", "x1", ",", "self", ".", "y1", ",", "self", ".", "x2", ",", "self", ".", "y2", "=", "point1", "[", "0", "]", ",", "point1", "[", "1", "]", ",", "point2", "[", "0", "]", ",", "point2", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.line.Line.slope": [[8, 14], ["None"], "methods", ["None"], ["", "def", "slope", "(", "self", ")", ":", "\n", "        ", "if", "(", "self", ".", "x2", "-", "self", ".", "x1", ")", "==", "0", ":", "\n", "            ", "return", "1e10", "\n", "", "else", ":", "\n", "            ", "m", "=", "(", "self", ".", "y2", "-", "self", ".", "y1", ")", "/", "(", "self", ".", "x2", "-", "self", ".", "x1", ")", "\n", "return", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.line.Line.x_bound": [[15, 20], ["max", "min", "min", "min", "max", "max"], "methods", ["None"], ["", "", "def", "x_bound", "(", "self", ",", "other", ")", ":", "\n", "        ", "a", ",", "b", "=", "self", ",", "other", "\n", "x_lower", "=", "max", "(", "min", "(", "a", ".", "x1", ",", "a", ".", "x2", ")", ",", "min", "(", "b", ".", "x1", ",", "b", ".", "x2", ")", ")", "\n", "x_upper", "=", "min", "(", "max", "(", "a", ".", "x1", ",", "a", ".", "x2", ")", ",", "max", "(", "b", ".", "x1", ",", "b", ".", "x2", ")", ")", "\n", "return", "x_lower", ",", "x_upper", "\n", "\n"]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.line.Line.y_bound": [[21, 26], ["max", "min", "min", "min", "max", "max"], "methods", ["None"], ["", "def", "y_bound", "(", "self", ",", "other", ")", ":", "\n", "        ", "a", ",", "b", "=", "self", ",", "other", "\n", "y_lower", "=", "max", "(", "min", "(", "a", ".", "y1", ",", "a", ".", "y2", ")", ",", "min", "(", "b", ".", "y1", ",", "b", ".", "y2", ")", ")", "\n", "y_upper", "=", "min", "(", "max", "(", "a", ".", "y1", ",", "a", ".", "y2", ")", ",", "max", "(", "b", ".", "y1", ",", "b", ".", "y2", ")", ")", "\n", "return", "y_lower", ",", "y_upper", "\n", "\n"]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.line.Line.extend_segment": [[27, 37], ["line.Line", "numpy.sqrt", "numpy.sqrt"], "methods", ["None"], ["", "def", "extend_segment", "(", "self", ",", "length", ")", ":", "\n", "        ", "cos_theta", "=", "(", "self", ".", "x2", "-", "self", ".", "x1", ")", "/", "np", ".", "sqrt", "(", "(", "self", ".", "x2", "-", "self", ".", "x1", ")", "**", "2", "+", "(", "self", ".", "y2", "-", "self", ".", "y1", ")", "**", "2", ")", "\n", "sin_theta", "=", "(", "self", ".", "y2", "-", "self", ".", "y1", ")", "/", "np", ".", "sqrt", "(", "(", "self", ".", "x2", "-", "self", ".", "x1", ")", "**", "2", "+", "(", "self", ".", "y2", "-", "self", ".", "y1", ")", "**", "2", ")", "\n", "x1_", "=", "self", ".", "x1", "-", "length", "*", "cos_theta", "\n", "y1_", "=", "self", ".", "y1", "-", "length", "*", "sin_theta", "\n", "x2_", "=", "self", ".", "x2", "+", "length", "*", "cos_theta", "\n", "y2_", "=", "self", ".", "y2", "+", "length", "*", "sin_theta", "\n", "extended_line", "=", "Line", "(", "(", "x1_", ",", "y1_", ")", ",", "(", "x2_", ",", "y2_", ")", ")", "\n", "\n", "return", "extended_line", "\n", "\n"]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.line.Line.line_intersection": [[39, 63], ["a.slope", "b.slope", "line.Line.x_bound", "line.Line.y_bound"], "methods", ["home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.line.Line.slope", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.line.Line.slope", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.line.Line.x_bound", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.line.Line.y_bound"], ["", "def", "line_intersection", "(", "self", ",", "other", ")", ":", "\n", "        ", "a", ",", "b", "=", "self", ",", "other", "\n", "\n", "m_a", "=", "a", ".", "slope", "(", ")", "\n", "m_b", "=", "b", ".", "slope", "(", ")", "\n", "x_lower", ",", "x_upper", "=", "Line", ".", "x_bound", "(", "a", ",", "b", ")", "\n", "y_lower", ",", "y_upper", "=", "Line", ".", "y_bound", "(", "a", ",", "b", ")", "\n", "\n", "if", "m_a", "==", "m_b", ":", "\n", "# print('Two segments are parallel')", "\n", "            ", "return", "None", ",", "None", "\n", "\n", "", "else", ":", "\n", "            ", "x_intersection", "=", "(", "(", "b", ".", "y1", "-", "m_b", "*", "b", ".", "x1", ")", "-", "(", "a", ".", "y1", "-", "m_a", "*", "a", ".", "x1", ")", ")", "/", "(", "m_a", "-", "m_b", ")", "\n", "y_intersection", "=", "m_a", "*", "x_intersection", "+", "a", ".", "y1", "-", "m_a", "*", "a", ".", "x1", "\n", "\n", "if", "x_lower", "<=", "x_intersection", "<=", "x_upper", ":", "\n", "# print('Two segments intersects')", "\n", "                ", "return", "x_intersection", ",", "y_intersection", "\n", "# if y_lower <= y_intersection <= y_upper:", "\n", "#     return x_intersection, y_intersection", "\n", "", "else", ":", "\n", "# print('Two segments does not intersect')", "\n", "                ", "return", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.decompose_string.decompose_string": [[2, 13], ["descriptor.replace().replace.replace().replace", "int", "[].split", "int", "int", "len", "int", "descriptor.replace().replace.replace", "descriptor.replace().replace.split", "descriptor.replace().replace.split", "descriptor.replace().replace.split", "[].split", "descriptor.replace().replace.split"], "function", ["None"], ["def", "decompose_string", "(", "descriptor", ")", ":", "\n", "    ", "descriptor", "=", "descriptor", ".", "replace", "(", "'.npy'", ",", "''", ")", ".", "replace", "(", "'participant_video_'", ",", "''", ")", "\n", "participant_id", "=", "int", "(", "descriptor", ".", "split", "(", "'_'", ")", "[", "0", "]", ")", "\n", "if", "len", "(", "descriptor", ".", "split", "(", "'_'", ")", "[", "1", "]", ")", "==", "1", ":", "\n", "        ", "session_id", "=", "int", "(", "descriptor", ".", "split", "(", "'_'", ")", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "        ", "session_id", "=", "0", "\n", "", "frames", "=", "descriptor", ".", "split", "(", "'<'", ")", "[", "1", "]", ".", "split", "(", "'>'", ")", "[", "0", "]", ".", "split", "(", "'_'", ")", "\n", "starting", "=", "int", "(", "frames", "[", "0", "]", ")", "\n", "ending", "=", "int", "(", "frames", "[", "1", "]", ")", "\n", "return", "participant_id", ",", "session_id", ",", "starting", ",", "ending", "\n", "\n"]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.decompose_string.decompose_string_hand": [[14, 25], ["decompose_string.decompose_string", "descriptor.replace.replace", "descriptor.replace.replace"], "function", ["home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.decompose_string.decompose_string"], ["", "def", "decompose_string_hand", "(", "descriptor", ")", ":", "\n", "    ", "hand", "=", "'None'", "\n", "if", "'_left'", "in", "descriptor", ":", "\n", "        ", "hand", "=", "'left'", "\n", "descriptor", "=", "descriptor", ".", "replace", "(", "'_left'", ",", "''", ")", "\n", "", "if", "'_right'", "in", "descriptor", ":", "\n", "        ", "hand", "=", "'right'", "\n", "descriptor", "=", "descriptor", ".", "replace", "(", "'_right'", ",", "''", ")", "\n", "\n", "", "participant_id", ",", "session_id", ",", "starting", ",", "ending", "=", "decompose_string", "(", "descriptor", ")", "\n", "return", "participant_id", ",", "session_id", ",", "starting", ",", "ending", ",", "hand", "\n", "", ""]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.elan_portal.ElanPortal.__init__": [[6, 8], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "data", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.elan_portal.ElanPortal.add_tier": [[9, 18], ["elan_portal.ElanPortal.data.setdefault().setdefault", "elan_portal.ElanPortal.data.setdefault"], "methods", ["None"], ["", "def", "add_tier", "(", "self", ",", "tier_name", ",", "type", ",", "tier_data", ")", ":", "\n", "        ", "'''\n        This function add data to portal\n        :param tier_name:\n        :param tier_data:\n        :return:\n        '''", "\n", "self", ".", "data", ".", "setdefault", "(", "tier_name", ",", "{", "}", ")", ".", "setdefault", "(", "type", ",", "[", "]", ")", "\n", "self", ".", "data", "[", "tier_name", "]", "[", "type", "]", "=", "self", ".", "data", "[", "tier_name", "]", "[", "type", "]", "+", "tier_data", "\n", "\n"]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.elan_portal.ElanPortal.export": [[19, 41], ["elan_portal.ElanPortal.data.keys", "pandas.DataFrame", "print", "pandas.DataFrame.to_csv", "data[].append", "data[].append", "data[].append", "data[].append"], "methods", ["None"], ["", "def", "export", "(", "self", ",", "file_path", ")", ":", "\n", "        ", "'''\n        This function exports segments data to txt file\n        :param file_path:\n        :return:\n        '''", "\n", "data", "=", "{", "\n", "'tier_name'", ":", "[", "]", ",", "\n", "'start_time'", ":", "[", "]", ",", "\n", "'end_time'", ":", "[", "]", ",", "\n", "'type'", ":", "[", "]", ",", "\n", "}", "\n", "for", "tier_name", "in", "self", ".", "data", ".", "keys", "(", ")", ":", "\n", "            ", "for", "type", "in", "self", ".", "data", "[", "tier_name", "]", ":", "\n", "                ", "for", "segment", "in", "self", ".", "data", "[", "tier_name", "]", "[", "type", "]", ":", "\n", "                    ", "data", "[", "'tier_name'", "]", ".", "append", "(", "tier_name", ")", "\n", "data", "[", "'start_time'", "]", ".", "append", "(", "segment", "[", "0", "]", ")", "\n", "data", "[", "'end_time'", "]", ".", "append", "(", "segment", "[", "1", "]", ")", "\n", "data", "[", "'type'", "]", ".", "append", "(", "type", ")", "\n", "", "", "", "df", "=", "pd", ".", "DataFrame", "(", "data", ")", "\n", "print", "(", "df", ")", "\n", "df", ".", "to_csv", "(", "file_path", ",", "index", "=", "None", ",", "header", "=", "None", ",", "sep", "=", "'\\t'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.elan_portal.ElanPortal.read": [[42, 56], ["print", "pandas.read_csv", "range", "print", "elan_portal.ElanPortal.data.setdefault().setdefault().append", "int", "int", "elan_portal.ElanPortal.data.setdefault().setdefault", "elan_portal.ElanPortal.data.setdefault"], "methods", ["None"], ["", "def", "read", "(", "self", ",", "file_path", ",", "fps", ")", ":", "\n", "        ", "self", ".", "data", "=", "{", "}", "\n", "print", "(", "'reading elan data...'", ")", "\n", "df", "=", "pd", ".", "read_csv", "(", "file_path", ",", "sep", "=", "'\\t'", ",", "header", "=", "None", ")", "\n", "for", "i", "in", "range", "(", "df", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "record", "=", "df", ".", "iloc", "[", "i", ",", ":", "]", "\n", "tier_name", "=", "record", "[", "0", "]", "\n", "start_time", "=", "record", "[", "1", "]", "\n", "end_time", "=", "record", "[", "2", "]", "\n", "type", "=", "record", "[", "3", "]", "\n", "segment", "=", "[", "int", "(", "start_time", "*", "fps", ")", ",", "int", "(", "end_time", "*", "fps", ")", "]", "\n", "self", ".", "data", ".", "setdefault", "(", "tier_name", ",", "{", "}", ")", ".", "setdefault", "(", "type", ",", "[", "]", ")", ".", "append", "(", "segment", ")", "\n", "\n", "", "print", "(", "'reading elan data...done'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.elan_portal.ElanPortal.get_segments": [[57, 69], ["None"], "methods", ["None"], ["", "def", "get_segments", "(", "self", ",", "tier_name", ",", "type", ")", ":", "\n", "        ", "'''\n        This function get segments list by tier_name and type\n        :param tier_name:\n        :param type:\n        :return:  list of segments\n        '''", "\n", "try", ":", "\n", "            ", "segments", "=", "self", ".", "data", "[", "tier_name", "]", "[", "type", "]", "\n", "return", "segments", "\n", "", "except", ":", "\n", "            ", "return", "[", "]", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.computing.get_dynamics": [[5, 20], ["numpy.zeros", "numpy.zeros", "range", "range", "numpy.hstack"], "function", ["None"], ["def", "get_dynamics", "(", "X_0th", ",", "time", "=", "0.1", ")", ":", "\n", "    ", "'''\n    Compute Dynamics of X_0th\n    :param X_0th:\n    :param time: time delta\n    :return:\n    '''", "\n", "X_1st", "=", "np", ".", "zeros", "(", "(", "X_0th", ".", "shape", "[", "0", "]", "-", "1", ",", "X_0th", ".", "shape", "[", "1", "]", ")", ")", "\n", "X_2nd", "=", "np", ".", "zeros", "(", "(", "X_0th", ".", "shape", "[", "0", "]", "-", "2", ",", "X_0th", ".", "shape", "[", "1", "]", ")", ")", "\n", "for", "i", "in", "range", "(", "X_0th", ".", "shape", "[", "0", "]", "-", "1", ")", ":", "\n", "        ", "X_1st", "[", "i", "]", "=", "(", "X_0th", "[", "i", "+", "1", "]", "-", "X_0th", "[", "i", "]", ")", "/", "time", "\n", "", "for", "j", "in", "range", "(", "X_0th", ".", "shape", "[", "0", "]", "-", "2", ")", ":", "\n", "        ", "X_2nd", "[", "j", "]", "=", "(", "X_1st", "[", "j", "+", "1", "]", "-", "X_1st", "[", "j", "]", ")", "/", "time", "\n", "\n", "", "return", "np", ".", "hstack", "(", "(", "X_0th", "[", "2", ":", "]", ",", "X_1st", "[", "1", ":", "]", ",", "X_2nd", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.computing.get_CCC": [[22, 39], ["X.reshape.reshape", "Y.reshape.reshape", "numpy.cov", "math.sqrt", "math.sqrt", "numpy.mean", "numpy.mean", "numpy.hstack().T.astype", "math.pow", "math.pow", "math.pow", "numpy.hstack"], "function", ["None"], ["", "def", "get_CCC", "(", "X", ",", "Y", ")", ":", "\n", "    ", "X", "=", "X", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "Y", "=", "Y", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "assert", "X", ".", "shape", "[", "1", "]", "==", "1", "\n", "assert", "Y", ".", "shape", "[", "1", "]", "==", "1", "\n", "# print(np.hstack((X, Y)).T.shape)", "\n", "cov_mat", "=", "np", ".", "cov", "(", "np", ".", "hstack", "(", "(", "X", ",", "Y", ")", ")", ".", "T", ".", "astype", "(", "float", ")", ")", "\n", "\n", "var_1", "=", "math", ".", "sqrt", "(", "cov_mat", "[", "0", ",", "0", "]", ")", "\n", "var_2", "=", "math", ".", "sqrt", "(", "cov_mat", "[", "1", ",", "1", "]", ")", "\n", "var_12", "=", "cov_mat", "[", "1", ",", "0", "]", "\n", "mean_1", "=", "np", ".", "mean", "(", "X", ")", "\n", "mean_2", "=", "np", ".", "mean", "(", "Y", ")", "\n", "#print(mean_1, mean_2)", "\n", "#print(var_1, var_2, var_12)", "\n", "\n", "return", "2", "*", "var_12", "/", "(", "math", ".", "pow", "(", "var_1", ",", "2", ")", "+", "math", ".", "pow", "(", "var_2", ",", "2", ")", "+", "math", ".", "pow", "(", "mean_1", "-", "mean_2", ",", "2", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.paint_openpose.paint_openpose.__init__": [[10, 21], ["os.path.join"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "path_data", ")", ":", "\n", "        ", "if", "path_data", "is", "not", "None", ":", "\n", "# single video processing", "\n", "            ", "self", ".", "path_data", "=", "path_data", "\n", "self", ".", "video_path", "=", "path_data", "[", "'video'", "]", "\n", "self", ".", "openpose_output_path", "=", "path_data", "[", "'openpose_data'", "]", "\n", "self", ".", "openface_output_file", "=", "path_data", "[", "'openface_data'", "]", "\n", "self", ".", "processed_file", "=", "os", ".", "path", ".", "join", "(", "DATA_FOLDER", ",", "'processed_data_smooth'", ",", "\n", "path_data", "[", "'file_format'", "]", "+", "'.npy'", ")", "\n", "\n", "self", ".", "save_dir", "=", "'/Volumes/Seagate_Backup/paint_openpose'", "\n", "\n"]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.paint_openpose.paint_openpose.plot_pose_hand_keypoints": [[23, 62], ["cv2.VideoCapture", "numpy.load", "cv2.VideoCapture.set", "cv2.VideoCapture.isOpened", "cv2.VideoCapture.release", "cv2.destroyAllWindows", "cv2.VideoCapture.read", "data[].reshape", "data[].reshape", "range", "utility.painting.paint_rectangle_to_points", "utility.painting.paint_rectangle_to_points", "range", "cv2.imshow", "utility.painting.paint_point", "utility.painting.paint_point", "utility.painting.paint_point", "utility.painting.paint_text", "utility.painting.paint_line", "ord", "numpy.shape", "str", "cv2.waitKey"], "methods", ["home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.elan_portal.ElanPortal.read", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.painting.paint_rectangle_to_points", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.painting.paint_rectangle_to_points", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.painting.paint_point", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.painting.paint_point", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.painting.paint_point", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.painting.paint_text", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.painting.paint_line"], ["", "", "def", "plot_pose_hand_keypoints", "(", "self", ",", "play_starting", "=", "0", ")", ":", "\n", "        ", "cap", "=", "cv2", ".", "VideoCapture", "(", "self", ".", "video_path", ")", "\n", "data", "=", "np", ".", "load", "(", "self", ".", "processed_file", ")", "\n", "\n", "cap", ".", "set", "(", "1", ",", "play_starting", ")", "\n", "t", "=", "play_starting", "\n", "while", "(", "cap", ".", "isOpened", "(", ")", ")", ":", "\n", "            ", "ret", ",", "frame", "=", "cap", ".", "read", "(", ")", "\n", "left_hand_data", "=", "data", "[", "t", ",", "194", ":", "232", "]", ".", "reshape", "(", "-", "1", ",", "2", ")", "\n", "right_hand_data", "=", "data", "[", "t", ",", "236", ":", "274", "]", ".", "reshape", "(", "-", "1", ",", "2", ")", "\n", "\n", "for", "i", "in", "range", "(", "np", ".", "shape", "(", "left_hand_data", ")", "[", "0", "]", ")", ":", "\n", "                ", "frame", "=", "paint_point", "(", "frame", ",", "left_hand_data", "[", "i", "]", ",", "color", "=", "COLOR_YELLOW", ")", "\n", "frame", "=", "paint_point", "(", "frame", ",", "right_hand_data", "[", "i", "]", ",", "color", "=", "COLOR_YELLOW", ")", "\n", "\n", "", "frame", "=", "paint_rectangle_to_points", "(", "frame", ",", "left_hand_data", ",", "color", "=", "(", "0", ",", "255", ",", "0", ")", ")", "\n", "frame", "=", "paint_rectangle_to_points", "(", "frame", ",", "right_hand_data", ",", "color", "=", "(", "0", ",", "255", ",", "0", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "0", ",", "25", ")", ":", "\n", "                ", "frame", "=", "paint_point", "(", "frame", ",", "[", "data", "[", "t", ",", "2", "*", "i", "]", ",", "data", "[", "t", ",", "2", "*", "i", "+", "1", "]", "]", ",", "color", "=", "COLOR_YELLOW", ")", "\n", "frame", "=", "paint_text", "(", "frame", ",", "str", "(", "i", ")", ",", "[", "data", "[", "t", ",", "2", "*", "i", "]", ",", "data", "[", "t", ",", "2", "*", "i", "+", "1", "]", "]", ",", "color", "=", "COLOR_YELLOW", ")", "\n", "\n", "", "for", "connection", "in", "BODY_CONNECTION", ":", "\n", "                ", "point1", "=", "connection", "[", "0", "]", "\n", "point2", "=", "connection", "[", "1", "]", "\n", "frame", "=", "paint_line", "(", "frame", ",", "\n", "[", "data", "[", "t", ",", "2", "*", "point1", "]", ",", "data", "[", "t", ",", "2", "*", "point1", "+", "1", "]", "]", ",", "\n", "[", "data", "[", "t", ",", "2", "*", "point2", "]", ",", "data", "[", "t", ",", "2", "*", "point2", "+", "1", "]", "]", ",", "\n", "color", "=", "COLOR_YELLOW", ")", "\n", "\n", "", "cv2", ".", "imshow", "(", "'frame'", ",", "frame", ")", "\n", "if", "cv2", ".", "waitKey", "(", "1", ")", "&", "0xFF", "==", "ord", "(", "'q'", ")", ":", "\n", "                ", "break", "\n", "# if t == 0:", "\n", "# input()", "\n", "", "t", "+=", "1", "\n", "\n", "", "cap", ".", "release", "(", ")", "\n", "cv2", ".", "destroyAllWindows", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.line_rectangle.Line_Rectangle.__init__": [[5, 21], ["utility.line.Line", "utility.line.Line", "utility.line.Line", "utility.line.Line", "utility.line.Line", "utility.line.Line"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "line", ",", "rectangle", ")", ":", "\n", "        ", "self", ".", "line", "=", "line", "\n", "self", ".", "rectangle", "=", "rectangle", "\n", "\n", "self", ".", "rect_x_lower", "=", "self", ".", "rectangle", ".", "x1", "\n", "self", ".", "rect_x_upper", "=", "self", ".", "rectangle", ".", "x2", "\n", "self", ".", "rect_y_lower", "=", "self", ".", "rectangle", ".", "y1", "\n", "self", ".", "rect_y_upper", "=", "self", ".", "rectangle", ".", "y2", "\n", "\n", "self", ".", "diagonal1", "=", "Line", "(", "self", ".", "rect_x_lower", ",", "self", ".", "rect_y_lower", ",", "self", ".", "rect_x_upper", ",", "self", ".", "rect_y_upper", ")", "\n", "self", ".", "diagonal2", "=", "Line", "(", "self", ".", "rect_x_lower", ",", "self", ".", "rect_y_upper", ",", "self", ".", "rect_x_upper", ",", "self", ".", "rect_y_lower", ")", "\n", "\n", "self", ".", "top", "=", "Line", "(", "self", ".", "rect_x_lower", ",", "self", ".", "rect_y_upper", ",", "self", ".", "rect_x_upper", ",", "self", ".", "rect_y_upper", ")", "\n", "self", ".", "bottom", "=", "Line", "(", "self", ".", "rect_x_lower", ",", "self", ".", "rect_y_lower", ",", "self", ".", "rect_x_upper", ",", "self", ".", "rect_y_lower", ")", "\n", "self", ".", "left", "=", "Line", "(", "self", ".", "rect_x_lower", ",", "self", ".", "rect_y_lower", ",", "self", ".", "rect_x_lower", ",", "self", ".", "rect_y_upper", ")", "\n", "self", ".", "right", "=", "Line", "(", "self", ".", "rect_x_upper", ",", "self", ".", "rect_y_lower", ",", "self", ".", "rect_x_upper", ",", "self", ".", "rect_y_upper", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.line_rectangle.Line_Rectangle.line_rectangle_intersection": [[23, 43], ["utility.line.Line.line_intersection", "utility.line.Line.line_intersection", "utility.line.Line.line_intersection", "utility.line.Line.line_intersection"], "methods", ["home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.line.Line.line_intersection", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.line.Line.line_intersection", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.line.Line.line_intersection", "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.line.Line.line_intersection"], ["", "def", "line_rectangle_intersection", "(", "self", ")", ":", "\n", "        ", "line", "=", "self", ".", "line", "\n", "rectangle", "=", "self", ".", "rectangle", "\n", "top", "=", "self", ".", "top", "\n", "bottom", "=", "self", ".", "bottom", "\n", "left", "=", "self", ".", "left", "\n", "right", "=", "self", ".", "right", "\n", "\n", "intersection1", "=", "Line", ".", "line_intersection", "(", "line", ",", "top", ")", "\n", "intersection2", "=", "Line", ".", "line_intersection", "(", "line", ",", "right", ")", "\n", "intersection3", "=", "Line", ".", "line_intersection", "(", "line", ",", "bottom", ")", "\n", "intersection4", "=", "Line", ".", "line_intersection", "(", "line", ",", "left", ")", "\n", "intersection_list", "=", "[", "intersection1", ",", "intersection2", ",", "intersection3", ",", "intersection4", "]", "\n", "# print(intersection_list)", "\n", "\n", "for", "intersection", "in", "intersection_list", ":", "\n", "            ", "if", "intersection", "[", "0", "]", "is", "not", "None", ":", "\n", "                ", "return", "True", "\n", "\n", "", "", "return", "False", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LinWeizheDragon_AutoFidgetDetection.utility.consistency.consistency": [[6, 22], ["global_settings.participant_data.keys", "participant_data[].keys", "os.path.join", "numpy.load", "cv2.VideoCapture", "int", "numpy.shape", "cv2.VideoCapture.get", "abs", "len_list.append", "len_list.append", "print"], "function", ["None"], ["def", "consistency", "(", "tolerance", "=", "0", ")", ":", "\n", "    ", "for", "particitant", "in", "participant_data", ".", "keys", "(", ")", ":", "\n", "        ", "for", "session", "in", "participant_data", "[", "particitant", "]", ".", "keys", "(", ")", ":", "\n", "            ", "len_list", "=", "[", "]", "\n", "data_path", "=", "os", ".", "path", ".", "join", "(", "participant_data", "[", "particitant", "]", "[", "session", "]", "[", "'openpose_data'", "]", ",", "'person_0_face_0.npy'", ")", "\n", "data", "=", "np", ".", "load", "(", "data_path", ")", "\n", "data_len", "=", "np", ".", "shape", "(", "data", ")", "[", "1", "]", "\n", "\n", "video_path", "=", "participant_data", "[", "particitant", "]", "[", "session", "]", "[", "'video'", "]", "\n", "cap", "=", "cv2", ".", "VideoCapture", "(", "video_path", ")", "\n", "video_length", "=", "int", "(", "cap", ".", "get", "(", "cv2", ".", "CAP_PROP_FRAME_COUNT", ")", ")", "\n", "\n", "if", "abs", "(", "data_len", "-", "video_length", ")", ">", "tolerance", ":", "\n", "                ", "len_list", ".", "append", "(", "data_len", ")", "\n", "len_list", ".", "append", "(", "video_length", ")", "\n", "print", "(", "'participant_{}_session_{}'", ".", "format", "(", "particitant", ",", "session", ")", ",", "len_list", ")", "", "", "", "", "", ""]]}