{"home.repos.pwc.inspect_result.kkoutini_passt.None.ex_openmic.M.__init__": [[96, 114], ["ba3l.module.Ba3lModule.__init__", "helpers.models_size.count_non_zero_params"], "methods", ["home.repos.pwc.inspect_result.kkoutini_passt.audioset.dataset.DistributedSamplerWrapper.__init__", "home.repos.pwc.inspect_result.kkoutini_passt.helpers.models_size.count_non_zero_params"], ["    ", "def", "__init__", "(", "self", ",", "experiment", ")", ":", "\n", "        ", "self", ".", "mel", "=", "None", "\n", "self", ".", "da_net", "=", "None", "\n", "super", "(", "M", ",", "self", ")", ".", "__init__", "(", "experiment", ")", "\n", "\n", "self", ".", "use_mixup", "=", "self", ".", "config", ".", "use_mixup", "or", "False", "\n", "self", ".", "mixup_alpha", "=", "self", ".", "config", ".", "mixup_alpha", "\n", "\n", "desc", ",", "sum_params", ",", "sum_non_zero", "=", "count_non_zero_params", "(", "self", ".", "net", ")", "\n", "self", ".", "experiment", ".", "info", "[", "\"start_sum_params\"", "]", "=", "sum_params", "\n", "self", ".", "experiment", ".", "info", "[", "\"start_sum_params_non_zero\"", "]", "=", "sum_non_zero", "\n", "\n", "# in case we need embedings for the DA", "\n", "self", ".", "net", ".", "return_embed", "=", "True", "\n", "self", ".", "dyn_norm", "=", "self", ".", "config", ".", "dyn_norm", "\n", "self", ".", "do_swa", "=", "False", "\n", "\n", "self", ".", "distributed_mode", "=", "self", ".", "config", ".", "trainer", ".", "num_nodes", ">", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_openmic.M.forward": [[115, 117], ["ex_openmic.M.net"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "net", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_openmic.M.mel_forward": [[118, 130], ["x.reshape.reshape.size", "x.reshape.reshape.reshape", "ex_openmic.M.mel", "x.reshape.reshape.reshape", "ex_openmic.get_dynamic_norm", "ex_openmic.M.register_buffer", "ex_openmic.M.register_buffer", "hasattr", "hasattr"], "methods", ["home.repos.pwc.inspect_result.kkoutini_passt.None.ex_esc50.get_dynamic_norm"], ["", "def", "mel_forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "old_shape", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "reshape", "(", "-", "1", ",", "old_shape", "[", "2", "]", ")", "\n", "x", "=", "self", ".", "mel", "(", "x", ")", "\n", "x", "=", "x", ".", "reshape", "(", "old_shape", "[", "0", "]", ",", "old_shape", "[", "1", "]", ",", "x", ".", "shape", "[", "1", "]", ",", "x", ".", "shape", "[", "2", "]", ")", "\n", "if", "self", ".", "dyn_norm", ":", "\n", "            ", "if", "not", "hasattr", "(", "self", ",", "\"tr_m\"", ")", "or", "not", "hasattr", "(", "self", ",", "\"tr_std\"", ")", ":", "\n", "                ", "tr_m", ",", "tr_std", "=", "get_dynamic_norm", "(", "self", ")", "\n", "self", ".", "register_buffer", "(", "'tr_m'", ",", "tr_m", ")", "\n", "self", ".", "register_buffer", "(", "'tr_std'", ",", "tr_std", ")", "\n", "", "x", "=", "(", "x", "-", "self", ".", "tr_m", ")", "/", "self", ".", "tr_std", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_openmic.M.training_step": [[131, 169], ["y.float.float.float", "len", "ex_openmic.M.forward", "ex_openmic.M.mel_forward", "helpers.mixup.my_mixup", "lam.to.to.to", "torch.nn.functional.binary_cross_entropy_with_logits", "samples_loss.detach.detach.mean", "samples_loss.detach.detach.detach", "torch.nn.functional.binary_cross_entropy_with_logits", "samples_loss.detach.detach.mean", "samples_loss.detach.detach.detach", "y_mask.float", "y_mask.float", "lam.to.to.reshape", "lam.to.to.reshape", "lam.to.to.reshape", "lam.to.to.reshape"], "methods", ["home.repos.pwc.inspect_result.kkoutini_passt.helpers.vit_helpers.DropPath.forward", "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_esc50.M.mel_forward", "home.repos.pwc.inspect_result.kkoutini_passt.helpers.mixup.my_mixup"], ["", "def", "training_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "# REQUIRED", "\n", "        ", "x", ",", "f", ",", "y", "=", "batch", "\n", "if", "self", ".", "mel", ":", "\n", "            ", "x", "=", "self", ".", "mel_forward", "(", "x", ")", "\n", "\n", "", "y_mask", "=", "y", "[", ":", ",", "20", ":", "]", "\n", "y", "=", "y", "[", ":", ",", ":", "20", "]", ">", "0.5", "\n", "y", "=", "y", ".", "float", "(", ")", "\n", "\n", "orig_x", "=", "x", "\n", "batch_size", "=", "len", "(", "y", ")", "\n", "\n", "rn_indices", ",", "lam", "=", "None", ",", "None", "\n", "if", "self", ".", "use_mixup", ":", "\n", "            ", "rn_indices", ",", "lam", "=", "my_mixup", "(", "batch_size", ",", "self", ".", "mixup_alpha", ")", "\n", "lam", "=", "lam", ".", "to", "(", "x", ".", "device", ")", "\n", "x", "=", "x", "*", "lam", ".", "reshape", "(", "batch_size", ",", "1", ",", "1", ",", "1", ")", "+", "x", "[", "rn_indices", "]", "*", "(", "1.", "-", "lam", ".", "reshape", "(", "batch_size", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "\n", "", "y_hat", ",", "embed", "=", "self", ".", "forward", "(", "x", ")", "\n", "\n", "if", "self", ".", "use_mixup", ":", "\n", "            ", "y_mix", "=", "y", "*", "lam", ".", "reshape", "(", "batch_size", ",", "1", ")", "+", "y", "[", "rn_indices", "]", "*", "(", "1.", "-", "lam", ".", "reshape", "(", "batch_size", ",", "1", ")", ")", "\n", "samples_loss", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "\n", "y_hat", ",", "y_mix", ",", "reduction", "=", "\"none\"", ")", "\n", "y_mix_mask", "=", "(", "(", "y_mask", ">", "0.5", ")", "|", "(", "y_mask", "[", "rn_indices", "]", ">", "0.5", ")", ")", ".", "float", "(", ")", "\n", "samples_loss", "=", "y_mask", ".", "float", "(", ")", "*", "samples_loss", "\n", "loss", "=", "samples_loss", ".", "mean", "(", ")", "\n", "samples_loss", "=", "samples_loss", ".", "detach", "(", ")", "\n", "", "else", ":", "\n", "            ", "samples_loss", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "y_hat", ",", "y", ",", "reduction", "=", "\"none\"", ")", "\n", "samples_loss", "=", "y_mask", ".", "float", "(", ")", "*", "samples_loss", "\n", "loss", "=", "samples_loss", ".", "mean", "(", ")", "\n", "samples_loss", "=", "samples_loss", ".", "detach", "(", ")", "\n", "\n", "", "results", "=", "{", "\"loss\"", ":", "loss", ",", "}", "\n", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_openmic.M.training_epoch_end": [[170, 176], ["torch.stack().mean", "ex_openmic.M.log_dict", "torch.stack"], "methods", ["None"], ["", "def", "training_epoch_end", "(", "self", ",", "outputs", ")", ":", "\n", "        ", "avg_loss", "=", "torch", ".", "stack", "(", "[", "x", "[", "'loss'", "]", "for", "x", "in", "outputs", "]", ")", ".", "mean", "(", ")", "\n", "\n", "logs", "=", "{", "'train.loss'", ":", "avg_loss", ",", "'step'", ":", "self", ".", "current_epoch", "}", "\n", "\n", "self", ".", "log_dict", "(", "logs", ",", "sync_dist", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_openmic.M.predict": [[177, 184], ["ex_openmic.M.forward", "ex_openmic.M.mel_forward"], "methods", ["home.repos.pwc.inspect_result.kkoutini_passt.helpers.vit_helpers.DropPath.forward", "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_esc50.M.mel_forward"], ["", "def", "predict", "(", "self", ",", "batch", ",", "batch_idx", ":", "int", ",", "dataloader_idx", ":", "int", "=", "None", ")", ":", "\n", "        ", "x", ",", "f", ",", "y", "=", "batch", "\n", "if", "self", ".", "mel", ":", "\n", "            ", "x", "=", "self", ".", "mel_forward", "(", "x", ")", "\n", "\n", "", "y_hat", ",", "_", "=", "self", ".", "forward", "(", "x", ")", "\n", "return", "f", ",", "y_hat", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_openmic.M.validation_step": [[185, 207], ["y.float.float.float", "ex_openmic.M.mel_forward", "net", "torch.nn.functional.binary_cross_entropy_with_logits", "torch.nn.functional.binary_cross_entropy_with_logits.mean", "torch.sigmoid", "v.cpu", "y_mask.float", "y_hat.detach", "y.float.float.detach", "y_mask.detach", "results.items"], "methods", ["home.repos.pwc.inspect_result.kkoutini_passt.None.ex_esc50.M.mel_forward"], ["", "def", "validation_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "        ", "x", ",", "f", ",", "y", "=", "batch", "\n", "if", "self", ".", "mel", ":", "\n", "            ", "x", "=", "self", ".", "mel_forward", "(", "x", ")", "\n", "", "y_mask", "=", "y", "[", ":", ",", "20", ":", "]", "\n", "y", "=", "y", "[", ":", ",", ":", "20", "]", ">", "0.5", "\n", "y", "=", "y", ".", "float", "(", ")", "\n", "results", "=", "{", "}", "\n", "model_name", "=", "[", "(", "\"\"", ",", "self", ".", "net", ")", "]", "\n", "if", "self", ".", "do_swa", ":", "\n", "            ", "model_name", "=", "model_name", "+", "[", "(", "\"swa_\"", ",", "self", ".", "net_swa", ")", "]", "\n", "", "for", "net_name", ",", "net", "in", "model_name", ":", "\n", "            ", "y_hat", ",", "_", "=", "net", "(", "x", ")", "\n", "samples_loss", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "y_hat", ",", "y", ")", "\n", "samples_loss", "=", "y_mask", ".", "float", "(", ")", "*", "samples_loss", "\n", "loss", "=", "samples_loss", ".", "mean", "(", ")", "\n", "out", "=", "torch", ".", "sigmoid", "(", "y_hat", ".", "detach", "(", ")", ")", "\n", "# self.log(\"validation.loss\", loss, prog_bar=True, on_epoch=True, on_step=False)", "\n", "results", "=", "{", "**", "results", ",", "net_name", "+", "\"val_loss\"", ":", "loss", ",", "net_name", "+", "\"out\"", ":", "out", ",", "net_name", "+", "\"target\"", ":", "y", ".", "detach", "(", ")", ",", "\n", "net_name", "+", "\"mask\"", ":", "y_mask", ".", "detach", "(", ")", "}", "\n", "", "results", "=", "{", "k", ":", "v", ".", "cpu", "(", ")", "for", "k", ",", "v", "in", "results", ".", "items", "(", ")", "}", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_openmic.M.validation_epoch_end": [[208, 251], ["torch.stack().mean", "torch.cat", "torch.cat", "torch.cat", "ex_openmic.M.log_dict", "torch.cat.float().numpy", "torch.cat.float().numpy", "torch.cat.float().numpy", "numpy.array", "numpy.array", "torch.as_tensor().cuda", "torch.as_tensor().cuda", "torch.as_tensor().cuda", "torch.as_tensor().cuda", "ex_openmic.M.all_gather", "ex_openmic.M.all_gather", "ex_openmic.M.all_gather", "ex_openmic.M.reshape().cpu().float().numpy", "ex_openmic.M.reshape().cpu().float().numpy", "ex_openmic.M.reshape().cpu().float().numpy", "numpy.array", "ex_openmic.M.log_dict", "torch.stack", "numpy.array", "numpy.array", "ex_openmic.M.log_dict", "torch.cat.float", "torch.cat.float", "torch.cat.float", "sklearn.metrics.average_precision_score", "sklearn.metrics.roc_auc_score", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "ex_openmic.M.reshape().cpu().float", "ex_openmic.M.reshape().cpu().float", "ex_openmic.M.reshape().cpu().float", "sklearn.metrics.average_precision_score", "torch.as_tensor().cuda", "torch.as_tensor().cuda", "range", "range", "numpy.array.mean", "numpy.array.mean", "range", "ex_openmic.M.reshape().cpu", "ex_openmic.M.reshape().cpu", "ex_openmic.M.reshape().cpu", "torch.as_tensor", "torch.as_tensor", "numpy.array.mean", "ex_openmic.M.reshape", "ex_openmic.M.reshape", "ex_openmic.M.reshape"], "methods", ["None"], ["", "def", "validation_epoch_end", "(", "self", ",", "outputs", ")", ":", "\n", "        ", "model_name", "=", "[", "(", "\"\"", ",", "self", ".", "net", ")", "]", "\n", "if", "self", ".", "do_swa", ":", "\n", "            ", "model_name", "=", "model_name", "+", "[", "(", "\"swa_\"", ",", "self", ".", "net_swa", ")", "]", "\n", "", "for", "net_name", ",", "net", "in", "model_name", ":", "\n", "            ", "avg_loss", "=", "torch", ".", "stack", "(", "[", "x", "[", "net_name", "+", "'val_loss'", "]", "for", "x", "in", "outputs", "]", ")", ".", "mean", "(", ")", "\n", "out", "=", "torch", ".", "cat", "(", "[", "x", "[", "net_name", "+", "'out'", "]", "for", "x", "in", "outputs", "]", ",", "dim", "=", "0", ")", "\n", "target", "=", "torch", ".", "cat", "(", "[", "x", "[", "net_name", "+", "'target'", "]", "for", "x", "in", "outputs", "]", ",", "dim", "=", "0", ")", "\n", "mask", "=", "torch", ".", "cat", "(", "[", "x", "[", "net_name", "+", "'mask'", "]", "for", "x", "in", "outputs", "]", ",", "dim", "=", "0", ")", "\n", "try", ":", "\n", "                ", "y_true", "=", "target", ".", "float", "(", ")", ".", "numpy", "(", ")", "\n", "y_pred", "=", "out", ".", "float", "(", ")", ".", "numpy", "(", ")", "\n", "y_mask", "=", "mask", ".", "float", "(", ")", ".", "numpy", "(", ")", "\n", "average_precision", "=", "np", ".", "array", "(", "[", "metrics", ".", "average_precision_score", "(", "\n", "y_true", "[", ":", ",", "i", "]", ",", "y_pred", "[", ":", ",", "i", "]", ",", "sample_weight", "=", "y_mask", "[", ":", ",", "i", "]", ")", "for", "i", "in", "range", "(", "y_true", ".", "shape", "[", "1", "]", ")", "]", ")", "\n", "", "except", "ValueError", ":", "\n", "                ", "average_precision", "=", "np", ".", "array", "(", "[", "np", ".", "nan", "]", "*", "y_true", ".", "shape", "[", "1", "]", ")", "\n", "#torch.save(average_precision, f\"ap_openmic_perclass_{average_precision.mean()}.pt\")", "\n", "", "try", ":", "\n", "                ", "roc", "=", "np", ".", "array", "(", "[", "metrics", ".", "roc_auc_score", "(", "\n", "y_true", "[", ":", ",", "i", "]", ",", "y_pred", "[", ":", ",", "i", "]", ",", "sample_weight", "=", "y_mask", "[", ":", ",", "i", "]", ")", "for", "i", "in", "range", "(", "y_true", ".", "shape", "[", "1", "]", ")", "]", ")", "\n", "", "except", "ValueError", ":", "\n", "                ", "roc", "=", "np", ".", "array", "(", "[", "np", ".", "nan", "]", "*", "y_true", ".", "shape", "[", "1", "]", ")", "\n", "", "logs", "=", "{", "net_name", "+", "'val.loss'", ":", "torch", ".", "as_tensor", "(", "avg_loss", ")", ".", "cuda", "(", ")", ",", "\n", "net_name", "+", "'ap'", ":", "torch", ".", "as_tensor", "(", "average_precision", ".", "mean", "(", ")", ")", ".", "cuda", "(", ")", ",", "\n", "net_name", "+", "'roc'", ":", "torch", ".", "as_tensor", "(", "roc", ".", "mean", "(", ")", ")", ".", "cuda", "(", ")", ",", "\n", "'step'", ":", "torch", ".", "as_tensor", "(", "self", ".", "current_epoch", ")", ".", "cuda", "(", ")", "}", "\n", "self", ".", "log_dict", "(", "logs", ",", "sync_dist", "=", "True", ")", "\n", "if", "self", ".", "distributed_mode", ":", "\n", "                ", "allout", "=", "self", ".", "all_gather", "(", "out", ")", "\n", "alltarget", "=", "self", ".", "all_gather", "(", "target", ")", "\n", "all_mask", "=", "self", ".", "all_gather", "(", "mask", ")", "\n", "y_true", "=", "alltarget", ".", "reshape", "(", "-", "1", ",", "alltarget", ".", "shape", "[", "-", "1", "]", ")", ".", "cpu", "(", ")", ".", "float", "(", ")", ".", "numpy", "(", ")", "\n", "y_pred", "=", "allout", ".", "reshape", "(", "-", "1", ",", "alltarget", ".", "shape", "[", "-", "1", "]", ")", ".", "cpu", "(", ")", ".", "float", "(", ")", ".", "numpy", "(", ")", "\n", "y_mask", "=", "all_mask", ".", "reshape", "(", "-", "1", ",", "alltarget", ".", "shape", "[", "-", "1", "]", ")", ".", "cpu", "(", ")", ".", "float", "(", ")", ".", "numpy", "(", ")", "\n", "average_precision", "=", "np", ".", "array", "(", "[", "metrics", ".", "average_precision_score", "(", "\n", "y_true", "[", ":", ",", "i", "]", ",", "y_pred", "[", ":", ",", "i", "]", ",", "sample_weight", "=", "y_mask", "[", ":", ",", "i", "]", ")", "for", "i", "in", "range", "(", "y_true", ".", "shape", "[", "1", "]", ")", "]", ")", "\n", "if", "self", ".", "trainer", ".", "is_global_zero", ":", "\n", "                    ", "logs", "=", "{", "net_name", "+", "\"allap\"", ":", "torch", ".", "as_tensor", "(", "average_precision", ".", "mean", "(", ")", ")", ".", "cuda", "(", ")", ",", "\n", "'step'", ":", "torch", ".", "as_tensor", "(", "self", ".", "current_epoch", ")", ".", "cuda", "(", ")", "}", "\n", "self", ".", "log_dict", "(", "logs", ",", "sync_dist", "=", "False", ")", "\n", "", "", "else", ":", "\n", "                ", "self", ".", "log_dict", "(", "{", "net_name", "+", "\"allap\"", ":", "logs", "[", "net_name", "+", "'ap'", "]", ",", "'step'", ":", "logs", "[", "'step'", "]", "}", ",", "sync_dist", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_openmic.M.configure_optimizers": [[252, 261], ["ex_openmic.get_optimizer", "ex_openmic.M.parameters", "ex_openmic.get_lr_scheduler"], "methods", ["home.repos.pwc.inspect_result.kkoutini_passt.None.ex_esc50.get_optimizer", "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_esc50.get_lr_scheduler"], ["", "", "", "def", "configure_optimizers", "(", "self", ")", ":", "\n", "# REQUIRED", "\n", "# can return multiple optimizers and learning_rate schedulers", "\n", "# (LBFGS it is automatically supported, no need for closure function)", "\n", "        ", "optimizer", "=", "get_optimizer", "(", "self", ".", "parameters", "(", ")", ")", "\n", "# torch.optim.Adam(self.parameters(), lr=self.config.lr)", "\n", "return", "{", "\n", "'optimizer'", ":", "optimizer", ",", "\n", "'lr_scheduler'", ":", "get_lr_scheduler", "(", "optimizer", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_openmic.M.configure_callbacks": [[263, 265], ["ex_openmic.get_extra_checkpoint_callback", "ex_openmic.get_extra_swa_callback"], "methods", ["home.repos.pwc.inspect_result.kkoutini_passt.None.ex_esc50.get_extra_checkpoint_callback", "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_esc50.get_extra_swa_callback"], ["", "def", "configure_callbacks", "(", "self", ")", ":", "\n", "        ", "return", "get_extra_checkpoint_callback", "(", ")", "+", "get_extra_swa_callback", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_openmic.default_conf": [[39, 64], ["os.environ.get().strip", "os.environ.get().strip", "os.environ.get().strip", "os.environ.get", "os.getpid", "sacred.config_helpers.DynamicIngredient", "dict", "sacred.config_helpers.DynamicIngredient", "sacred.config_helpers.DynamicIngredient", "os.environ.get", "os.environ.get", "os.environ.get", "os.environ.get().strip", "os.environ.get().strip", "os.environ.get", "os.environ.get"], "function", ["home.repos.pwc.inspect_result.kkoutini_passt.helpers.audiodatasets.ObjectCacher.get", "home.repos.pwc.inspect_result.kkoutini_passt.helpers.audiodatasets.ObjectCacher.get", "home.repos.pwc.inspect_result.kkoutini_passt.helpers.audiodatasets.ObjectCacher.get", "home.repos.pwc.inspect_result.kkoutini_passt.helpers.audiodatasets.ObjectCacher.get", "home.repos.pwc.inspect_result.kkoutini_passt.helpers.audiodatasets.ObjectCacher.get", "home.repos.pwc.inspect_result.kkoutini_passt.helpers.audiodatasets.ObjectCacher.get"], ["@", "ex", ".", "config", "\n", "def", "default_conf", "(", ")", ":", "\n", "    ", "cmd", "=", "\" \"", ".", "join", "(", "sys", ".", "argv", ")", "\n", "saque_cmd", "=", "os", ".", "environ", ".", "get", "(", "\"SAQUE_CMD\"", ",", "\"\"", ")", ".", "strip", "(", ")", "\n", "saque_id", "=", "os", ".", "environ", ".", "get", "(", "\"SAQUE_ID\"", ",", "\"\"", ")", ".", "strip", "(", ")", "\n", "slurm_job_id", "=", "os", ".", "environ", ".", "get", "(", "\"SLURM_JOB_ID\"", ",", "\"\"", ")", ".", "strip", "(", ")", "\n", "if", "os", ".", "environ", ".", "get", "(", "\"SLURM_ARRAY_JOB_ID\"", ",", "False", ")", ":", "\n", "        ", "slurm_job_id", "=", "os", ".", "environ", ".", "get", "(", "\"SLURM_ARRAY_JOB_ID\"", ",", "\"\"", ")", ".", "strip", "(", ")", "+", "\"_\"", "+", "os", ".", "environ", ".", "get", "(", "\"SLURM_ARRAY_TASK_ID\"", ",", "\n", "\"\"", ")", ".", "strip", "(", ")", "\n", "", "process_id", "=", "os", ".", "getpid", "(", ")", "\n", "models", "=", "{", "\n", "\"net\"", ":", "DynamicIngredient", "(", "\"models.passt.model_ing\"", ",", "n_classes", "=", "20", ",", "s_patchout_t", "=", "40", ",", "s_patchout_f", "=", "4", ")", ",", "\n", "\"mel\"", ":", "DynamicIngredient", "(", "\"models.preprocess.model_ing\"", ",", "\n", "instance_cmd", "=", "\"AugmentMelSTFT\"", ",", "\n", "n_mels", "=", "128", ",", "sr", "=", "32000", ",", "win_length", "=", "800", ",", "hopsize", "=", "320", ",", "n_fft", "=", "1024", ",", "freqm", "=", "48", ",", "\n", "timem", "=", "192", ",", "\n", "htk", "=", "False", ",", "fmin", "=", "0.0", ",", "fmax", "=", "None", ",", "norm", "=", "1", ",", "fmin_aug_range", "=", "10", ",", "\n", "fmax_aug_range", "=", "2000", ")", "\n", "}", "\n", "basedataset", "=", "DynamicIngredient", "(", "\"openmic2008.dataset.dataset\"", ",", "wavmix", "=", "1", ")", "\n", "trainer", "=", "dict", "(", "max_epochs", "=", "10", ",", "gpus", "=", "1", ",", "weights_summary", "=", "'full'", ",", "benchmark", "=", "True", ",", "num_sanity_val_steps", "=", "0", ",", "\n", "reload_dataloaders_every_epoch", "=", "True", ")", "\n", "lr", "=", "0.00001", "\n", "use_mixup", "=", "True", "\n", "mixup_alpha", "=", "0.3", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_openmic.get_scheduler_lambda": [[70, 78], ["RuntimeError", "helpers.ramp.exp_warmup_linear_down", "helpers.ramp.cosine_cycle"], "function", ["home.repos.pwc.inspect_result.kkoutini_passt.helpers.ramp.exp_warmup_linear_down", "home.repos.pwc.inspect_result.kkoutini_passt.helpers.ramp.cosine_cycle"], ["@", "ex", ".", "command", "\n", "def", "get_scheduler_lambda", "(", "warm_up_len", "=", "5", ",", "ramp_down_start", "=", "50", ",", "ramp_down_len", "=", "50", ",", "last_lr_value", "=", "0.01", ",", "\n", "schedule_mode", "=", "\"exp_lin\"", ")", ":", "\n", "    ", "if", "schedule_mode", "==", "\"exp_lin\"", ":", "\n", "        ", "return", "exp_warmup_linear_down", "(", "warm_up_len", ",", "ramp_down_len", ",", "ramp_down_start", ",", "last_lr_value", ")", "\n", "", "if", "schedule_mode", "==", "\"cos_cyc\"", ":", "\n", "        ", "return", "cosine_cycle", "(", "warm_up_len", ",", "ramp_down_start", ",", "last_lr_value", ")", "\n", "", "raise", "RuntimeError", "(", "f\"schedule_mode={schedule_mode} Unknown for a lambda funtion.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_openmic.get_lr_scheduler": [[80, 85], ["RuntimeError", "torch.optim.lr_scheduler.LambdaLR", "ex_openmic.get_scheduler_lambda"], "function", ["home.repos.pwc.inspect_result.kkoutini_passt.None.ex_esc50.get_scheduler_lambda"], ["", "@", "ex", ".", "command", "\n", "def", "get_lr_scheduler", "(", "optimizer", ",", "schedule_mode", ")", ":", "\n", "    ", "if", "schedule_mode", "in", "{", "\"exp_lin\"", ",", "\"cos_cyc\"", "}", ":", "\n", "        ", "return", "torch", ".", "optim", ".", "lr_scheduler", ".", "LambdaLR", "(", "optimizer", ",", "get_scheduler_lambda", "(", ")", ")", "\n", "", "raise", "RuntimeError", "(", "f\"schedule_mode={schedule_mode} Unknown.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_openmic.get_optimizer": [[87, 93], ["torch.optim.Adam", "print", "torch.optim.AdamW"], "function", ["None"], ["", "@", "ex", ".", "command", "\n", "def", "get_optimizer", "(", "params", ",", "lr", ",", "adamw", "=", "True", ",", "weight_decay", "=", "0.0001", ")", ":", "\n", "    ", "if", "adamw", ":", "\n", "        ", "print", "(", "f\"\\nUsing adamw weight_decay={weight_decay}!\\n\"", ")", "\n", "return", "torch", ".", "optim", ".", "AdamW", "(", "params", ",", "lr", "=", "lr", ",", "weight_decay", "=", "weight_decay", ")", "\n", "", "return", "torch", ".", "optim", ".", "Adam", "(", "params", ",", "lr", "=", "lr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_openmic.get_dynamic_norm": [[267, 272], ["RuntimeError"], "function", ["None"], ["", "", "@", "ex", ".", "command", "\n", "def", "get_dynamic_norm", "(", "model", ",", "dyn_norm", "=", "False", ")", ":", "\n", "    ", "if", "not", "dyn_norm", ":", "\n", "        ", "return", "None", ",", "None", "\n", "", "raise", "RuntimeError", "(", "'no dynamic norm supported yet.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_openmic.get_extra_checkpoint_callback": [[274, 279], ["pytorch_lightning.callbacks.ModelCheckpoint"], "function", ["None"], ["", "@", "ex", ".", "command", "\n", "def", "get_extra_checkpoint_callback", "(", "save_last_n", "=", "None", ")", ":", "\n", "    ", "if", "save_last_n", "is", "None", ":", "\n", "        ", "return", "[", "]", "\n", "", "return", "[", "ModelCheckpoint", "(", "monitor", "=", "\"step\"", ",", "verbose", "=", "True", ",", "save_top_k", "=", "save_last_n", ",", "mode", "=", "'max'", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_openmic.get_extra_swa_callback": [[281, 289], ["print", "StochasticWeightAveraging"], "function", ["None"], ["", "@", "ex", ".", "command", "\n", "def", "get_extra_swa_callback", "(", "swa", "=", "True", ",", "swa_epoch_start", "=", "2", ",", "\n", "swa_freq", "=", "1", ")", ":", "\n", "    ", "if", "not", "swa", ":", "\n", "        ", "return", "[", "]", "\n", "", "print", "(", "\"\\n Using swa!\\n\"", ")", "\n", "from", "helpers", ".", "swa_callback", "import", "StochasticWeightAveraging", "\n", "return", "[", "StochasticWeightAveraging", "(", "swa_epoch_start", "=", "swa_epoch_start", ",", "swa_freq", "=", "swa_freq", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_openmic.main": [[291, 306], ["ex.get_trainer", "ex.get_train_dataloaders", "ex.get_val_dataloaders", "ex_openmic.M", "ex.get_trainer.fit"], "function", ["None"], ["", "@", "ex", ".", "command", "\n", "def", "main", "(", "_run", ",", "_config", ",", "_log", ",", "_rnd", ",", "_seed", ")", ":", "\n", "    ", "trainer", "=", "ex", ".", "get_trainer", "(", ")", "\n", "train_loader", "=", "ex", ".", "get_train_dataloaders", "(", ")", "\n", "val_loader", "=", "ex", ".", "get_val_dataloaders", "(", ")", "\n", "\n", "modul", "=", "M", "(", "ex", ")", "\n", "\n", "trainer", ".", "fit", "(", "\n", "modul", ",", "\n", "train_dataloader", "=", "train_loader", ",", "\n", "val_dataloaders", "=", "val_loader", ",", "\n", ")", "\n", "\n", "return", "{", "\"done\"", ":", "True", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_openmic.model_speed_test": [[308, 367], ["ex_openmic.M", "modul.cuda.cuda", "print", "print", "torch.ones().cuda", "torch.ones().cuda", "torch.cuda.amp.GradScaler", "torch.optim.SGD", "print", "torch.cuda.synchronize", "time.time", "range", "torch.cuda.synchronize", "time.time", "print", "torch.cuda.synchronize", "time.time", "print", "range", "torch.cuda.synchronize", "time.time", "print", "print", "net.parameters", "torch.cuda.amp.GradScaler.scale().backward", "torch.cuda.amp.GradScaler.step", "torch.cuda.amp.GradScaler.update", "torch.cuda.amp.GradScaler.scale().backward", "torch.cuda.amp.GradScaler.step", "torch.cuda.amp.GradScaler.update", "torch.ones", "torch.ones", "torch.cuda.amp.autocast", "net", "torch.nn.functional.binary_cross_entropy_with_logits().mean", "torch.cuda.amp.autocast", "net", "torch.nn.functional.binary_cross_entropy_with_logits().mean", "torch.cuda.amp.GradScaler.scale", "torch.cuda.amp.GradScaler.scale", "torch.nn.functional.binary_cross_entropy_with_logits", "torch.nn.functional.binary_cross_entropy_with_logits"], "function", ["None"], ["", "@", "ex", ".", "command", "\n", "def", "model_speed_test", "(", "_run", ",", "_config", ",", "_log", ",", "_rnd", ",", "_seed", ",", "speed_test_batch_size", "=", "100", ")", ":", "\n", "    ", "'''\n    Test training speed of a model\n    @param _run:\n    @param _config:\n    @param _log:\n    @param _rnd:\n    @param _seed:\n    @param speed_test_batch_size: the batch size during the test\n    @return:\n    '''", "\n", "\n", "modul", "=", "M", "(", "ex", ")", "\n", "modul", "=", "modul", ".", "cuda", "(", ")", "\n", "batch_size", "=", "speed_test_batch_size", "\n", "print", "(", "f\"\\nBATCH SIZE : {batch_size}\\n\"", ")", "\n", "test_length", "=", "100", "\n", "print", "(", "f\"\\ntest_length : {test_length}\\n\"", ")", "\n", "\n", "x", "=", "torch", ".", "ones", "(", "[", "batch_size", ",", "1", ",", "128", ",", "998", "]", ")", ".", "cuda", "(", ")", "\n", "target", "=", "torch", ".", "ones", "(", "[", "batch_size", ",", "527", "]", ")", ".", "cuda", "(", ")", "\n", "# one passe", "\n", "net", "=", "modul", ".", "net", "\n", "# net(x)", "\n", "scaler", "=", "torch", ".", "cuda", ".", "amp", ".", "GradScaler", "(", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "# net = torch.jit.trace(net,(x,))", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "net", ".", "parameters", "(", ")", ",", "lr", "=", "0.001", ")", "\n", "\n", "print", "(", "\"warmup\"", ")", "\n", "import", "time", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "t1", "=", "time", ".", "time", "(", ")", "\n", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "        ", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", ")", ":", "\n", "            ", "y_hat", ",", "embed", "=", "net", "(", "x", ")", "\n", "loss", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "y_hat", ",", "target", ",", "reduction", "=", "\"none\"", ")", ".", "mean", "(", ")", "\n", "", "scaler", ".", "scale", "(", "loss", ")", ".", "backward", "(", ")", "\n", "scaler", ".", "step", "(", "optimizer", ")", "\n", "scaler", ".", "update", "(", ")", "\n", "", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "t2", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "'warmup done:'", ",", "(", "t2", "-", "t1", ")", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "t1", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\"testing speed\"", ")", "\n", "\n", "for", "i", "in", "range", "(", "test_length", ")", ":", "\n", "        ", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", ")", ":", "\n", "            ", "y_hat", ",", "embed", "=", "net", "(", "x", ")", "\n", "loss", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "y_hat", ",", "target", ",", "reduction", "=", "\"none\"", ")", ".", "mean", "(", ")", "\n", "", "scaler", ".", "scale", "(", "loss", ")", ".", "backward", "(", ")", "\n", "scaler", ".", "step", "(", "optimizer", ")", "\n", "scaler", ".", "update", "(", ")", "\n", "", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "t2", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "'test done:'", ",", "(", "t2", "-", "t1", ")", ")", "\n", "print", "(", "\"average speed: \"", ",", "(", "test_length", "*", "batch_size", ")", "/", "(", "t2", "-", "t1", ")", ",", "\" specs/second\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_openmic.evaluate_only": [[369, 382], ["ex.get_trainer", "ex.get_train_dataloaders", "ex.get_val_dataloaders", "ex_openmic.M", "print", "ex.get_trainer.validate", "print", "print", "len"], "function", ["None"], ["", "@", "ex", ".", "command", "\n", "def", "evaluate_only", "(", "_run", ",", "_config", ",", "_log", ",", "_rnd", ",", "_seed", ")", ":", "\n", "# force overriding the config, not logged = not recommended", "\n", "    ", "trainer", "=", "ex", ".", "get_trainer", "(", ")", "\n", "train_loader", "=", "ex", ".", "get_train_dataloaders", "(", ")", "\n", "val_loader", "=", "ex", ".", "get_val_dataloaders", "(", ")", "\n", "modul", "=", "M", "(", "ex", ")", "\n", "modul", ".", "val_dataloader", "=", "None", "\n", "trainer", ".", "val_dataloaders", "=", "None", "\n", "print", "(", "f\"\\n\\nValidation len={len(val_loader)}\\n\"", ")", "\n", "res", "=", "trainer", ".", "validate", "(", "modul", ",", "val_dataloaders", "=", "val_loader", ")", "\n", "print", "(", "\"\\n\\n Validtaion:\"", ")", "\n", "print", "(", "res", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_openmic.test_loaders": [[384, 397], ["enumerate", "enumerate", "ex.datasets.training.get_iter", "print", "ex.datasets.test.get_iter", "print"], "function", ["None"], ["", "@", "ex", ".", "command", "\n", "def", "test_loaders", "(", ")", ":", "\n", "    ", "'''\n    get one sample from each loader for debbuging\n    @return:\n    '''", "\n", "for", "i", ",", "b", "in", "enumerate", "(", "ex", ".", "datasets", ".", "training", ".", "get_iter", "(", ")", ")", ":", "\n", "        ", "print", "(", "b", ")", "\n", "break", "\n", "\n", "", "for", "i", ",", "b", "in", "enumerate", "(", "ex", ".", "datasets", ".", "test", ".", "get_iter", "(", ")", ")", ":", "\n", "        ", "print", "(", "b", ")", "\n", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_openmic.set_default_json_pickle": [[399, 403], ["isinstance", "list"], "function", ["None"], ["", "", "def", "set_default_json_pickle", "(", "obj", ")", ":", "\n", "    ", "if", "isinstance", "(", "obj", ",", "set", ")", ":", "\n", "        ", "return", "list", "(", "obj", ")", "\n", "", "raise", "TypeError", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_openmic.preload_mp3": [[405, 413], ["sacred.config_helpers.CMD", "print"], "function", ["None"], ["", "@", "ex", ".", "command", "\n", "def", "preload_mp3", "(", "all_y", "=", "CMD", "(", "\"/basedataset.preload_mp3\"", ")", ")", ":", "\n", "    ", "'''\n    read the dataset sequentially, useful if you have a network cache\n    @param all_y: the dataset preload command\n    @return:\n    '''", "\n", "print", "(", "all_y", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_openmic.multiprocessing_run": [[415, 435], ["print", "print", "str", "print", "ex.run_commandline", "os.getpid", "os.environ[].split", "print", "ex_openmic.main", "os.getpid"], "function", ["home.repos.pwc.inspect_result.kkoutini_passt.None.ex_esc50.main"], ["", "def", "multiprocessing_run", "(", "rank", ",", "word_size", ")", ":", "\n", "    ", "print", "(", "\"rank \"", ",", "rank", ",", "os", ".", "getpid", "(", ")", ")", "\n", "print", "(", "\"word_size \"", ",", "word_size", ")", "\n", "os", ".", "environ", "[", "'NODE_RANK'", "]", "=", "str", "(", "rank", ")", "\n", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", ".", "split", "(", "\",\"", ")", "[", "rank", "]", "\n", "argv", "=", "sys", ".", "argv", "\n", "if", "rank", "!=", "0", ":", "\n", "        ", "print", "(", "f\"Unobserved {os.getpid()} with rank {rank}\"", ")", "\n", "argv", "=", "argv", "+", "[", "\"-u\"", "]", "# only rank 0 is observed", "\n", "", "if", "\"with\"", "not", "in", "argv", ":", "\n", "        ", "argv", "=", "argv", "+", "[", "\"with\"", "]", "\n", "\n", "", "argv", "=", "argv", "+", "[", "f\"trainer.num_nodes={word_size}\"", ",", "f\"trainer.accelerator=ddp\"", "]", "\n", "print", "(", "argv", ")", "\n", "\n", "@", "ex", ".", "main", "\n", "def", "default_command", "(", ")", ":", "\n", "        ", "return", "main", "(", ")", "\n", "\n", "", "ex", ".", "run_commandline", "(", "argv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_openmic.default_command": [[466, 469], ["ex_openmic.main"], "function", ["home.repos.pwc.inspect_result.kkoutini_passt.None.ex_esc50.main"], ["@", "ex", ".", "automain", "\n", "def", "default_command", "(", ")", ":", "\n", "    ", "return", "main", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_audioset.M.__init__": [[97, 115], ["ba3l.module.Ba3lModule.__init__", "helpers.models_size.count_non_zero_params"], "methods", ["home.repos.pwc.inspect_result.kkoutini_passt.audioset.dataset.DistributedSamplerWrapper.__init__", "home.repos.pwc.inspect_result.kkoutini_passt.helpers.models_size.count_non_zero_params"], ["    ", "def", "__init__", "(", "self", ",", "experiment", ")", ":", "\n", "        ", "self", ".", "mel", "=", "None", "\n", "self", ".", "da_net", "=", "None", "\n", "super", "(", "M", ",", "self", ")", ".", "__init__", "(", "experiment", ")", "\n", "\n", "self", ".", "use_mixup", "=", "self", ".", "config", ".", "use_mixup", "or", "False", "\n", "self", ".", "mixup_alpha", "=", "self", ".", "config", ".", "mixup_alpha", "\n", "\n", "desc", ",", "sum_params", ",", "sum_non_zero", "=", "count_non_zero_params", "(", "self", ".", "net", ")", "\n", "self", ".", "experiment", ".", "info", "[", "\"start_sum_params\"", "]", "=", "sum_params", "\n", "self", ".", "experiment", ".", "info", "[", "\"start_sum_params_non_zero\"", "]", "=", "sum_non_zero", "\n", "\n", "# in case we need embedings for the DA", "\n", "self", ".", "net", ".", "return_embed", "=", "True", "\n", "self", ".", "dyn_norm", "=", "self", ".", "config", ".", "dyn_norm", "\n", "self", ".", "do_swa", "=", "False", "\n", "\n", "self", ".", "distributed_mode", "=", "self", ".", "config", ".", "trainer", ".", "num_nodes", ">", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_audioset.M.forward": [[116, 118], ["ex_audioset.M.net"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "net", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_audioset.M.mel_forward": [[119, 131], ["x.reshape.reshape.size", "x.reshape.reshape.reshape", "ex_audioset.M.mel", "x.reshape.reshape.reshape", "ex_audioset.get_dynamic_norm", "ex_audioset.M.register_buffer", "ex_audioset.M.register_buffer", "hasattr", "hasattr"], "methods", ["home.repos.pwc.inspect_result.kkoutini_passt.None.ex_esc50.get_dynamic_norm"], ["", "def", "mel_forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "old_shape", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "reshape", "(", "-", "1", ",", "old_shape", "[", "2", "]", ")", "\n", "x", "=", "self", ".", "mel", "(", "x", ")", "\n", "x", "=", "x", ".", "reshape", "(", "old_shape", "[", "0", "]", ",", "old_shape", "[", "1", "]", ",", "x", ".", "shape", "[", "1", "]", ",", "x", ".", "shape", "[", "2", "]", ")", "\n", "if", "self", ".", "dyn_norm", ":", "\n", "            ", "if", "not", "hasattr", "(", "self", ",", "\"tr_m\"", ")", "or", "not", "hasattr", "(", "self", ",", "\"tr_std\"", ")", ":", "\n", "                ", "tr_m", ",", "tr_std", "=", "get_dynamic_norm", "(", "self", ")", "\n", "self", ".", "register_buffer", "(", "'tr_m'", ",", "tr_m", ")", "\n", "self", ".", "register_buffer", "(", "'tr_std'", ",", "tr_std", ")", "\n", "", "x", "=", "(", "x", "-", "self", ".", "tr_m", ")", "/", "self", ".", "tr_std", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_audioset.M.training_step": [[132, 163], ["len", "ex_audioset.M.forward", "ex_audioset.M.mel_forward", "helpers.mixup.my_mixup", "lam.to.to.to", "torch.nn.functional.binary_cross_entropy_with_logits", "samples_loss.detach.detach.mean", "samples_loss.detach.detach.detach", "torch.nn.functional.binary_cross_entropy_with_logits", "samples_loss.detach.detach.mean", "samples_loss.detach.detach.detach", "lam.to.to.reshape", "lam.to.to.reshape", "lam.to.to.reshape", "lam.to.to.reshape"], "methods", ["home.repos.pwc.inspect_result.kkoutini_passt.helpers.vit_helpers.DropPath.forward", "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_esc50.M.mel_forward", "home.repos.pwc.inspect_result.kkoutini_passt.helpers.mixup.my_mixup"], ["", "def", "training_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "# REQUIRED", "\n", "        ", "x", ",", "f", ",", "y", "=", "batch", "\n", "if", "self", ".", "mel", ":", "\n", "            ", "x", "=", "self", ".", "mel_forward", "(", "x", ")", "\n", "\n", "", "orig_x", "=", "x", "\n", "batch_size", "=", "len", "(", "y", ")", "\n", "\n", "rn_indices", ",", "lam", "=", "None", ",", "None", "\n", "if", "self", ".", "use_mixup", ":", "\n", "            ", "rn_indices", ",", "lam", "=", "my_mixup", "(", "batch_size", ",", "self", ".", "mixup_alpha", ")", "\n", "lam", "=", "lam", ".", "to", "(", "x", ".", "device", ")", "\n", "x", "=", "x", "*", "lam", ".", "reshape", "(", "batch_size", ",", "1", ",", "1", ",", "1", ")", "+", "x", "[", "rn_indices", "]", "*", "(", "1.", "-", "lam", ".", "reshape", "(", "batch_size", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "\n", "", "y_hat", ",", "embed", "=", "self", ".", "forward", "(", "x", ")", "\n", "\n", "if", "self", ".", "use_mixup", ":", "\n", "            ", "y_mix", "=", "y", "*", "lam", ".", "reshape", "(", "batch_size", ",", "1", ")", "+", "y", "[", "rn_indices", "]", "*", "(", "1.", "-", "lam", ".", "reshape", "(", "batch_size", ",", "1", ")", ")", "\n", "samples_loss", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "\n", "y_hat", ",", "y_mix", ",", "reduction", "=", "\"none\"", ")", "\n", "loss", "=", "samples_loss", ".", "mean", "(", ")", "\n", "samples_loss", "=", "samples_loss", ".", "detach", "(", ")", "\n", "", "else", ":", "\n", "            ", "samples_loss", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "y_hat", ",", "y", ",", "reduction", "=", "\"none\"", ")", "\n", "loss", "=", "samples_loss", ".", "mean", "(", ")", "\n", "samples_loss", "=", "samples_loss", ".", "detach", "(", ")", "\n", "\n", "", "results", "=", "{", "\"loss\"", ":", "loss", ",", "}", "\n", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_audioset.M.training_epoch_end": [[164, 170], ["torch.stack().mean", "ex_audioset.M.log_dict", "torch.stack"], "methods", ["None"], ["", "def", "training_epoch_end", "(", "self", ",", "outputs", ")", ":", "\n", "        ", "avg_loss", "=", "torch", ".", "stack", "(", "[", "x", "[", "'loss'", "]", "for", "x", "in", "outputs", "]", ")", ".", "mean", "(", ")", "\n", "\n", "logs", "=", "{", "'train.loss'", ":", "avg_loss", ",", "'step'", ":", "self", ".", "current_epoch", "}", "\n", "\n", "self", ".", "log_dict", "(", "logs", ",", "sync_dist", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_audioset.M.predict": [[171, 178], ["ex_audioset.M.forward", "ex_audioset.M.mel_forward"], "methods", ["home.repos.pwc.inspect_result.kkoutini_passt.helpers.vit_helpers.DropPath.forward", "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_esc50.M.mel_forward"], ["", "def", "predict", "(", "self", ",", "batch", ",", "batch_idx", ":", "int", ",", "dataloader_idx", ":", "int", "=", "None", ")", ":", "\n", "        ", "x", ",", "f", ",", "y", "=", "batch", "\n", "if", "self", ".", "mel", ":", "\n", "            ", "x", "=", "self", ".", "mel_forward", "(", "x", ")", "\n", "\n", "", "y_hat", ",", "_", "=", "self", ".", "forward", "(", "x", ")", "\n", "return", "f", ",", "y_hat", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_audioset.M.validation_step": [[179, 197], ["ex_audioset.M.mel_forward", "net", "torch.nn.functional.binary_cross_entropy_with_logits", "torch.nn.functional.binary_cross_entropy_with_logits.mean", "torch.sigmoid", "v.cpu", "y_hat.detach", "y.detach", "results.items"], "methods", ["home.repos.pwc.inspect_result.kkoutini_passt.None.ex_esc50.M.mel_forward"], ["", "def", "validation_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "        ", "x", ",", "f", ",", "y", "=", "batch", "\n", "if", "self", ".", "mel", ":", "\n", "            ", "x", "=", "self", ".", "mel_forward", "(", "x", ")", "\n", "\n", "", "results", "=", "{", "}", "\n", "model_name", "=", "[", "(", "\"\"", ",", "self", ".", "net", ")", "]", "\n", "if", "self", ".", "do_swa", ":", "\n", "            ", "model_name", "=", "model_name", "+", "[", "(", "\"swa_\"", ",", "self", ".", "net_swa", ")", "]", "\n", "", "for", "net_name", ",", "net", "in", "model_name", ":", "\n", "            ", "y_hat", ",", "_", "=", "net", "(", "x", ")", "\n", "samples_loss", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "y_hat", ",", "y", ")", "\n", "loss", "=", "samples_loss", ".", "mean", "(", ")", "\n", "out", "=", "torch", ".", "sigmoid", "(", "y_hat", ".", "detach", "(", ")", ")", "\n", "# self.log(\"validation.loss\", loss, prog_bar=True, on_epoch=True, on_step=False)", "\n", "results", "=", "{", "**", "results", ",", "net_name", "+", "\"val_loss\"", ":", "loss", ",", "net_name", "+", "\"out\"", ":", "out", ",", "net_name", "+", "\"target\"", ":", "y", ".", "detach", "(", ")", "}", "\n", "", "results", "=", "{", "k", ":", "v", ".", "cpu", "(", ")", "for", "k", ",", "v", "in", "results", ".", "items", "(", ")", "}", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_audioset.M.validation_epoch_end": [[198, 235], ["torch.stack().mean", "torch.cat", "torch.cat", "torch.save", "print", "ex_audioset.M.log_dict", "sklearn.metrics.average_precision_score", "sklearn.metrics.roc_auc_score", "torch.as_tensor().cuda", "torch.as_tensor().cuda", "torch.as_tensor().cuda", "torch.as_tensor().cuda", "ex_audioset.M.all_gather", "ex_audioset.M.all_gather", "sklearn.metrics.average_precision_score", "ex_audioset.M.log_dict", "torch.stack", "torch.cat.float().numpy", "torch.cat.float().numpy", "numpy.array", "torch.cat.numpy", "torch.cat.numpy", "numpy.array", "ex_audioset.M.reshape().cpu().numpy", "ex_audioset.M.reshape().cpu().numpy", "ex_audioset.M.log_dict", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "numpy.array.mean", "torch.as_tensor().cuda", "torch.as_tensor().cuda", "torch.cat.float", "torch.cat.float", "numpy.array.mean", "numpy.array.mean", "ex_audioset.M.reshape().cpu", "ex_audioset.M.reshape().cpu", "torch.as_tensor", "torch.as_tensor", "ex_audioset.M.reshape", "ex_audioset.M.reshape", "numpy.array.mean"], "methods", ["None"], ["", "def", "validation_epoch_end", "(", "self", ",", "outputs", ")", ":", "\n", "        ", "model_name", "=", "[", "(", "\"\"", ",", "self", ".", "net", ")", "]", "\n", "if", "self", ".", "do_swa", ":", "\n", "            ", "model_name", "=", "model_name", "+", "[", "(", "\"swa_\"", ",", "self", ".", "net_swa", ")", "]", "\n", "", "for", "net_name", ",", "net", "in", "model_name", ":", "\n", "            ", "avg_loss", "=", "torch", ".", "stack", "(", "[", "x", "[", "net_name", "+", "'val_loss'", "]", "for", "x", "in", "outputs", "]", ")", ".", "mean", "(", ")", "\n", "out", "=", "torch", ".", "cat", "(", "[", "x", "[", "net_name", "+", "'out'", "]", "for", "x", "in", "outputs", "]", ",", "dim", "=", "0", ")", "\n", "target", "=", "torch", ".", "cat", "(", "[", "x", "[", "net_name", "+", "'target'", "]", "for", "x", "in", "outputs", "]", ",", "dim", "=", "0", ")", "\n", "try", ":", "\n", "                ", "average_precision", "=", "metrics", ".", "average_precision_score", "(", "\n", "target", ".", "float", "(", ")", ".", "numpy", "(", ")", ",", "out", ".", "float", "(", ")", ".", "numpy", "(", ")", ",", "average", "=", "None", ")", "\n", "", "except", "ValueError", ":", "\n", "                ", "average_precision", "=", "np", ".", "array", "(", "[", "np", ".", "nan", "]", "*", "527", ")", "\n", "", "try", ":", "\n", "                ", "roc", "=", "metrics", ".", "roc_auc_score", "(", "target", ".", "numpy", "(", ")", ",", "out", ".", "numpy", "(", ")", ",", "average", "=", "None", ")", "\n", "", "except", "ValueError", ":", "\n", "                ", "roc", "=", "np", ".", "array", "(", "[", "np", ".", "nan", "]", "*", "527", ")", "\n", "", "logs", "=", "{", "net_name", "+", "'val.loss'", ":", "torch", ".", "as_tensor", "(", "avg_loss", ")", ".", "cuda", "(", ")", ",", "\n", "net_name", "+", "'ap'", ":", "torch", ".", "as_tensor", "(", "average_precision", ".", "mean", "(", ")", ")", ".", "cuda", "(", ")", ",", "\n", "net_name", "+", "'roc'", ":", "torch", ".", "as_tensor", "(", "roc", ".", "mean", "(", ")", ")", ".", "cuda", "(", ")", ",", "\n", "'step'", ":", "torch", ".", "as_tensor", "(", "self", ".", "current_epoch", ")", ".", "cuda", "(", ")", "}", "\n", "torch", ".", "save", "(", "average_precision", ",", "f\"ap_perclass_{average_precision.mean()}.pt\"", ")", "\n", "print", "(", "average_precision", ")", "\n", "self", ".", "log_dict", "(", "logs", ",", "sync_dist", "=", "True", ")", "\n", "if", "self", ".", "distributed_mode", ":", "\n", "                ", "allout", "=", "self", ".", "all_gather", "(", "out", ")", "\n", "alltarget", "=", "self", ".", "all_gather", "(", "target", ")", "\n", "\n", "average_precision", "=", "metrics", ".", "average_precision_score", "(", "\n", "alltarget", ".", "reshape", "(", "-", "1", ",", "alltarget", ".", "shape", "[", "-", "1", "]", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "allout", ".", "reshape", "(", "-", "1", ",", "allout", ".", "shape", "[", "-", "1", "]", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "average", "=", "None", ")", "\n", "if", "self", ".", "trainer", ".", "is_global_zero", ":", "\n", "                    ", "logs", "=", "{", "net_name", "+", "\"allap\"", ":", "torch", ".", "as_tensor", "(", "average_precision", ".", "mean", "(", ")", ")", ".", "cuda", "(", ")", ",", "\n", "'step'", ":", "torch", ".", "as_tensor", "(", "self", ".", "current_epoch", ")", ".", "cuda", "(", ")", "}", "\n", "self", ".", "log_dict", "(", "logs", ",", "sync_dist", "=", "False", ")", "\n", "", "", "else", ":", "\n", "                ", "self", ".", "log_dict", "(", "{", "net_name", "+", "\"allap\"", ":", "logs", "[", "net_name", "+", "'ap'", "]", ",", "'step'", ":", "logs", "[", "'step'", "]", "}", ",", "sync_dist", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_audioset.M.configure_optimizers": [[236, 245], ["ex_audioset.get_optimizer", "ex_audioset.M.parameters", "ex_audioset.get_lr_scheduler"], "methods", ["home.repos.pwc.inspect_result.kkoutini_passt.None.ex_esc50.get_optimizer", "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_esc50.get_lr_scheduler"], ["", "", "", "def", "configure_optimizers", "(", "self", ")", ":", "\n", "# REQUIRED", "\n", "# can return multiple optimizers and learning_rate schedulers", "\n", "# (LBFGS it is automatically supported, no need for closure function)", "\n", "        ", "optimizer", "=", "get_optimizer", "(", "self", ".", "parameters", "(", ")", ")", "\n", "# torch.optim.Adam(self.parameters(), lr=self.config.lr)", "\n", "return", "{", "\n", "'optimizer'", ":", "optimizer", ",", "\n", "'lr_scheduler'", ":", "get_lr_scheduler", "(", "optimizer", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_audioset.M.configure_callbacks": [[247, 249], ["ex_audioset.get_extra_checkpoint_callback", "ex_audioset.get_extra_swa_callback"], "methods", ["home.repos.pwc.inspect_result.kkoutini_passt.None.ex_esc50.get_extra_checkpoint_callback", "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_esc50.get_extra_swa_callback"], ["", "def", "configure_callbacks", "(", "self", ")", ":", "\n", "        ", "return", "get_extra_checkpoint_callback", "(", ")", "+", "get_extra_swa_callback", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_audioset.default_conf": [[39, 65], ["os.environ.get().strip", "os.environ.get().strip", "os.environ.get().strip", "os.environ.get", "os.getpid", "sacred.config_helpers.DynamicIngredient", "dict", "sacred.config_helpers.DynamicIngredient", "sacred.config_helpers.DynamicIngredient", "os.environ.get", "os.environ.get", "os.environ.get", "os.environ.get().strip", "os.environ.get().strip", "os.environ.get", "os.environ.get"], "function", ["home.repos.pwc.inspect_result.kkoutini_passt.helpers.audiodatasets.ObjectCacher.get", "home.repos.pwc.inspect_result.kkoutini_passt.helpers.audiodatasets.ObjectCacher.get", "home.repos.pwc.inspect_result.kkoutini_passt.helpers.audiodatasets.ObjectCacher.get", "home.repos.pwc.inspect_result.kkoutini_passt.helpers.audiodatasets.ObjectCacher.get", "home.repos.pwc.inspect_result.kkoutini_passt.helpers.audiodatasets.ObjectCacher.get", "home.repos.pwc.inspect_result.kkoutini_passt.helpers.audiodatasets.ObjectCacher.get"], ["@", "ex", ".", "config", "\n", "def", "default_conf", "(", ")", ":", "\n", "    ", "cmd", "=", "\" \"", ".", "join", "(", "sys", ".", "argv", ")", "# command line arguments", "\n", "saque_cmd", "=", "os", ".", "environ", ".", "get", "(", "\"SAQUE_CMD\"", ",", "\"\"", ")", ".", "strip", "(", ")", "\n", "saque_id", "=", "os", ".", "environ", ".", "get", "(", "\"SAQUE_ID\"", ",", "\"\"", ")", ".", "strip", "(", ")", "\n", "slurm_job_id", "=", "os", ".", "environ", ".", "get", "(", "\"SLURM_JOB_ID\"", ",", "\"\"", ")", ".", "strip", "(", ")", "\n", "if", "os", ".", "environ", ".", "get", "(", "\"SLURM_ARRAY_JOB_ID\"", ",", "False", ")", ":", "\n", "        ", "slurm_job_id", "=", "os", ".", "environ", ".", "get", "(", "\"SLURM_ARRAY_JOB_ID\"", ",", "\"\"", ")", ".", "strip", "(", ")", "+", "\"_\"", "+", "os", ".", "environ", ".", "get", "(", "\"SLURM_ARRAY_TASK_ID\"", ",", "\n", "\"\"", ")", ".", "strip", "(", ")", "\n", "", "process_id", "=", "os", ".", "getpid", "(", ")", "\n", "models", "=", "{", "\n", "\"net\"", ":", "DynamicIngredient", "(", "\"models.passt.model_ing\"", ",", "arch", "=", "\"passt_deit_bd_p16_384\"", ",", "n_classes", "=", "527", ",", "s_patchout_t", "=", "40", ",", "\n", "s_patchout_f", "=", "4", ")", ",", "# network config", "\n", "\"mel\"", ":", "DynamicIngredient", "(", "\"models.preprocess.model_ing\"", ",", "\n", "instance_cmd", "=", "\"AugmentMelSTFT\"", ",", "\n", "n_mels", "=", "128", ",", "sr", "=", "32000", ",", "win_length", "=", "800", ",", "hopsize", "=", "320", ",", "n_fft", "=", "1024", ",", "freqm", "=", "48", ",", "\n", "timem", "=", "192", ",", "\n", "htk", "=", "False", ",", "fmin", "=", "0.0", ",", "fmax", "=", "None", ",", "norm", "=", "1", ",", "fmin_aug_range", "=", "10", ",", "\n", "fmax_aug_range", "=", "2000", ")", "\n", "}", "\n", "basedataset", "=", "DynamicIngredient", "(", "\"audioset.dataset.dataset\"", ",", "wavmix", "=", "1", ")", "\n", "trainer", "=", "dict", "(", "max_epochs", "=", "130", ",", "gpus", "=", "1", ",", "weights_summary", "=", "'full'", ",", "benchmark", "=", "True", ",", "num_sanity_val_steps", "=", "0", ",", "\n", "reload_dataloaders_every_epoch", "=", "True", ")", "\n", "lr", "=", "0.00002", "# learning rate", "\n", "use_mixup", "=", "True", "\n", "mixup_alpha", "=", "0.3", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_audioset.get_scheduler_lambda": [[71, 79], ["RuntimeError", "helpers.ramp.exp_warmup_linear_down", "helpers.ramp.cosine_cycle"], "function", ["home.repos.pwc.inspect_result.kkoutini_passt.helpers.ramp.exp_warmup_linear_down", "home.repos.pwc.inspect_result.kkoutini_passt.helpers.ramp.cosine_cycle"], ["@", "ex", ".", "command", "\n", "def", "get_scheduler_lambda", "(", "warm_up_len", "=", "5", ",", "ramp_down_start", "=", "50", ",", "ramp_down_len", "=", "50", ",", "last_lr_value", "=", "0.01", ",", "\n", "schedule_mode", "=", "\"exp_lin\"", ")", ":", "\n", "    ", "if", "schedule_mode", "==", "\"exp_lin\"", ":", "\n", "        ", "return", "exp_warmup_linear_down", "(", "warm_up_len", ",", "ramp_down_len", ",", "ramp_down_start", ",", "last_lr_value", ")", "\n", "", "if", "schedule_mode", "==", "\"cos_cyc\"", ":", "\n", "        ", "return", "cosine_cycle", "(", "warm_up_len", ",", "ramp_down_start", ",", "last_lr_value", ")", "\n", "", "raise", "RuntimeError", "(", "f\"schedule_mode={schedule_mode} Unknown for a lambda funtion.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_audioset.get_lr_scheduler": [[81, 86], ["RuntimeError", "torch.optim.lr_scheduler.LambdaLR", "ex_audioset.get_scheduler_lambda"], "function", ["home.repos.pwc.inspect_result.kkoutini_passt.None.ex_esc50.get_scheduler_lambda"], ["", "@", "ex", ".", "command", "\n", "def", "get_lr_scheduler", "(", "optimizer", ",", "schedule_mode", ")", ":", "\n", "    ", "if", "schedule_mode", "in", "{", "\"exp_lin\"", ",", "\"cos_cyc\"", "}", ":", "\n", "        ", "return", "torch", ".", "optim", ".", "lr_scheduler", ".", "LambdaLR", "(", "optimizer", ",", "get_scheduler_lambda", "(", ")", ")", "\n", "", "raise", "RuntimeError", "(", "f\"schedule_mode={schedule_mode} Unknown.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_audioset.get_optimizer": [[88, 94], ["torch.optim.Adam", "print", "torch.optim.AdamW"], "function", ["None"], ["", "@", "ex", ".", "command", "\n", "def", "get_optimizer", "(", "params", ",", "lr", ",", "adamw", "=", "True", ",", "weight_decay", "=", "0.0001", ")", ":", "\n", "    ", "if", "adamw", ":", "\n", "        ", "print", "(", "f\"\\nUsing adamw weight_decay={weight_decay}!\\n\"", ")", "\n", "return", "torch", ".", "optim", ".", "AdamW", "(", "params", ",", "lr", "=", "lr", ",", "weight_decay", "=", "weight_decay", ")", "\n", "", "return", "torch", ".", "optim", ".", "Adam", "(", "params", ",", "lr", "=", "lr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_audioset.get_dynamic_norm": [[251, 256], ["RuntimeError"], "function", ["None"], ["", "", "@", "ex", ".", "command", "\n", "def", "get_dynamic_norm", "(", "model", ",", "dyn_norm", "=", "False", ")", ":", "\n", "    ", "if", "not", "dyn_norm", ":", "\n", "        ", "return", "None", ",", "None", "\n", "", "raise", "RuntimeError", "(", "'no dynamic norm supported yet.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_audioset.get_extra_checkpoint_callback": [[258, 263], ["pytorch_lightning.callbacks.ModelCheckpoint"], "function", ["None"], ["", "@", "ex", ".", "command", "\n", "def", "get_extra_checkpoint_callback", "(", "save_last_n", "=", "None", ")", ":", "\n", "    ", "if", "save_last_n", "is", "None", ":", "\n", "        ", "return", "[", "]", "\n", "", "return", "[", "ModelCheckpoint", "(", "monitor", "=", "\"step\"", ",", "verbose", "=", "True", ",", "save_top_k", "=", "save_last_n", ",", "mode", "=", "'max'", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_audioset.get_extra_swa_callback": [[265, 273], ["print", "StochasticWeightAveraging"], "function", ["None"], ["", "@", "ex", ".", "command", "\n", "def", "get_extra_swa_callback", "(", "swa", "=", "True", ",", "swa_epoch_start", "=", "50", ",", "\n", "swa_freq", "=", "5", ")", ":", "\n", "    ", "if", "not", "swa", ":", "\n", "        ", "return", "[", "]", "\n", "", "print", "(", "\"\\n Using swa!\\n\"", ")", "\n", "from", "helpers", ".", "swa_callback", "import", "StochasticWeightAveraging", "\n", "return", "[", "StochasticWeightAveraging", "(", "swa_epoch_start", "=", "swa_epoch_start", ",", "swa_freq", "=", "swa_freq", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_audioset.main": [[275, 290], ["ex.get_trainer", "ex.get_train_dataloaders", "ex.get_val_dataloaders", "ex_audioset.M", "ex.get_trainer.fit"], "function", ["None"], ["", "@", "ex", ".", "command", "\n", "def", "main", "(", "_run", ",", "_config", ",", "_log", ",", "_rnd", ",", "_seed", ")", ":", "\n", "    ", "trainer", "=", "ex", ".", "get_trainer", "(", ")", "\n", "train_loader", "=", "ex", ".", "get_train_dataloaders", "(", ")", "\n", "val_loader", "=", "ex", ".", "get_val_dataloaders", "(", ")", "\n", "\n", "modul", "=", "M", "(", "ex", ")", "\n", "\n", "trainer", ".", "fit", "(", "\n", "modul", ",", "\n", "train_dataloader", "=", "train_loader", ",", "\n", "val_dataloaders", "=", "val_loader", ",", "\n", ")", "\n", "\n", "return", "{", "\"done\"", ":", "True", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_audioset.model_speed_test": [[292, 351], ["ex_audioset.M", "modul.cuda.cuda", "print", "print", "torch.ones().cuda", "torch.ones().cuda", "torch.cuda.amp.GradScaler", "torch.optim.SGD", "print", "torch.cuda.synchronize", "time.time", "range", "torch.cuda.synchronize", "time.time", "print", "torch.cuda.synchronize", "time.time", "print", "range", "torch.cuda.synchronize", "time.time", "print", "print", "net.parameters", "torch.cuda.amp.GradScaler.scale().backward", "torch.cuda.amp.GradScaler.step", "torch.cuda.amp.GradScaler.update", "torch.cuda.amp.GradScaler.scale().backward", "torch.cuda.amp.GradScaler.step", "torch.cuda.amp.GradScaler.update", "torch.ones", "torch.ones", "torch.cuda.amp.autocast", "net", "torch.nn.functional.binary_cross_entropy_with_logits().mean", "torch.cuda.amp.autocast", "net", "torch.nn.functional.binary_cross_entropy_with_logits().mean", "torch.cuda.amp.GradScaler.scale", "torch.cuda.amp.GradScaler.scale", "torch.nn.functional.binary_cross_entropy_with_logits", "torch.nn.functional.binary_cross_entropy_with_logits"], "function", ["None"], ["", "@", "ex", ".", "command", "\n", "def", "model_speed_test", "(", "_run", ",", "_config", ",", "_log", ",", "_rnd", ",", "_seed", ",", "speed_test_batch_size", "=", "100", ")", ":", "\n", "    ", "'''\n    Test training speed of a model\n    @param _run:\n    @param _config:\n    @param _log:\n    @param _rnd:\n    @param _seed:\n    @param speed_test_batch_size: the batch size during the test\n    @return:\n    '''", "\n", "\n", "modul", "=", "M", "(", "ex", ")", "\n", "modul", "=", "modul", ".", "cuda", "(", ")", "\n", "batch_size", "=", "speed_test_batch_size", "\n", "print", "(", "f\"\\nBATCH SIZE : {batch_size}\\n\"", ")", "\n", "test_length", "=", "100", "\n", "print", "(", "f\"\\ntest_length : {test_length}\\n\"", ")", "\n", "\n", "x", "=", "torch", ".", "ones", "(", "[", "batch_size", ",", "1", ",", "128", ",", "998", "]", ")", ".", "cuda", "(", ")", "\n", "target", "=", "torch", ".", "ones", "(", "[", "batch_size", ",", "527", "]", ")", ".", "cuda", "(", ")", "\n", "# one passe", "\n", "net", "=", "modul", ".", "net", "\n", "# net(x)", "\n", "scaler", "=", "torch", ".", "cuda", ".", "amp", ".", "GradScaler", "(", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "# net = torch.jit.trace(net,(x,))", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "net", ".", "parameters", "(", ")", ",", "lr", "=", "0.001", ")", "\n", "\n", "print", "(", "\"warmup\"", ")", "\n", "import", "time", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "t1", "=", "time", ".", "time", "(", ")", "\n", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "        ", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", ")", ":", "\n", "            ", "y_hat", ",", "embed", "=", "net", "(", "x", ")", "\n", "loss", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "y_hat", ",", "target", ",", "reduction", "=", "\"none\"", ")", ".", "mean", "(", ")", "\n", "", "scaler", ".", "scale", "(", "loss", ")", ".", "backward", "(", ")", "\n", "scaler", ".", "step", "(", "optimizer", ")", "\n", "scaler", ".", "update", "(", ")", "\n", "", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "t2", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "'warmup done:'", ",", "(", "t2", "-", "t1", ")", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "t1", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\"testing speed\"", ")", "\n", "\n", "for", "i", "in", "range", "(", "test_length", ")", ":", "\n", "        ", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", ")", ":", "\n", "            ", "y_hat", ",", "embed", "=", "net", "(", "x", ")", "\n", "loss", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "y_hat", ",", "target", ",", "reduction", "=", "\"none\"", ")", ".", "mean", "(", ")", "\n", "", "scaler", ".", "scale", "(", "loss", ")", ".", "backward", "(", ")", "\n", "scaler", ".", "step", "(", "optimizer", ")", "\n", "scaler", ".", "update", "(", ")", "\n", "", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "t2", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "'test done:'", ",", "(", "t2", "-", "t1", ")", ")", "\n", "print", "(", "\"average speed: \"", ",", "(", "test_length", "*", "batch_size", ")", "/", "(", "t2", "-", "t1", ")", ",", "\" specs/second\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_audioset.evaluate_only": [[353, 366], ["ex.get_trainer", "ex.get_train_dataloaders", "ex.get_val_dataloaders", "ex_audioset.M", "print", "ex.get_trainer.validate", "print", "print", "len"], "function", ["None"], ["", "@", "ex", ".", "command", "\n", "def", "evaluate_only", "(", "_run", ",", "_config", ",", "_log", ",", "_rnd", ",", "_seed", ")", ":", "\n", "# force overriding the config, not logged = not recommended", "\n", "    ", "trainer", "=", "ex", ".", "get_trainer", "(", ")", "\n", "train_loader", "=", "ex", ".", "get_train_dataloaders", "(", ")", "\n", "val_loader", "=", "ex", ".", "get_val_dataloaders", "(", ")", "\n", "modul", "=", "M", "(", "ex", ")", "\n", "modul", ".", "val_dataloader", "=", "None", "\n", "trainer", ".", "val_dataloaders", "=", "None", "\n", "print", "(", "f\"\\n\\nValidation len={len(val_loader)}\\n\"", ")", "\n", "res", "=", "trainer", ".", "validate", "(", "modul", ",", "val_dataloaders", "=", "val_loader", ")", "\n", "print", "(", "\"\\n\\n Validtaion:\"", ")", "\n", "print", "(", "res", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_audioset.test_loaders": [[368, 381], ["enumerate", "enumerate", "ex.datasets.training.get_iter", "print", "ex.datasets.test.get_iter", "print"], "function", ["None"], ["", "@", "ex", ".", "command", "\n", "def", "test_loaders", "(", ")", ":", "\n", "    ", "'''\n    get one sample from each loader for debbuging\n    @return:\n    '''", "\n", "for", "i", ",", "b", "in", "enumerate", "(", "ex", ".", "datasets", ".", "training", ".", "get_iter", "(", ")", ")", ":", "\n", "        ", "print", "(", "b", ")", "\n", "break", "\n", "\n", "", "for", "i", ",", "b", "in", "enumerate", "(", "ex", ".", "datasets", ".", "test", ".", "get_iter", "(", ")", ")", ":", "\n", "        ", "print", "(", "b", ")", "\n", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_audioset.set_default_json_pickle": [[383, 387], ["isinstance", "list"], "function", ["None"], ["", "", "def", "set_default_json_pickle", "(", "obj", ")", ":", "\n", "    ", "if", "isinstance", "(", "obj", ",", "set", ")", ":", "\n", "        ", "return", "list", "(", "obj", ")", "\n", "", "raise", "TypeError", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_audioset.preload_mp3": [[389, 397], ["sacred.config_helpers.CMD", "print"], "function", ["None"], ["", "@", "ex", ".", "command", "\n", "def", "preload_mp3", "(", "all_y", "=", "CMD", "(", "\"/basedataset.preload_mp3\"", ")", ")", ":", "\n", "    ", "'''\n    read the dataset sequentially, useful if you have a network cache\n    @param all_y: the dataset preload command\n    @return:\n    '''", "\n", "print", "(", "all_y", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_audioset.multiprocessing_run": [[399, 419], ["print", "print", "str", "print", "ex.run_commandline", "os.getpid", "os.environ[].split", "print", "ex_audioset.main", "os.getpid"], "function", ["home.repos.pwc.inspect_result.kkoutini_passt.None.ex_esc50.main"], ["", "def", "multiprocessing_run", "(", "rank", ",", "word_size", ")", ":", "\n", "    ", "print", "(", "\"rank \"", ",", "rank", ",", "os", ".", "getpid", "(", ")", ")", "\n", "print", "(", "\"word_size \"", ",", "word_size", ")", "\n", "os", ".", "environ", "[", "'NODE_RANK'", "]", "=", "str", "(", "rank", ")", "\n", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", ".", "split", "(", "\",\"", ")", "[", "rank", "]", "\n", "argv", "=", "sys", ".", "argv", "\n", "if", "rank", "!=", "0", ":", "\n", "        ", "print", "(", "f\"Unobserved {os.getpid()} with rank {rank}\"", ")", "\n", "argv", "=", "argv", "+", "[", "\"-u\"", "]", "# only rank 0 is observed", "\n", "", "if", "\"with\"", "not", "in", "argv", ":", "\n", "        ", "argv", "=", "argv", "+", "[", "\"with\"", "]", "\n", "\n", "", "argv", "=", "argv", "+", "[", "f\"trainer.num_nodes={word_size}\"", ",", "f\"trainer.accelerator=ddp\"", "]", "\n", "print", "(", "argv", ")", "\n", "\n", "@", "ex", ".", "main", "\n", "def", "default_command", "(", ")", ":", "\n", "        ", "return", "main", "(", ")", "\n", "\n", "", "ex", ".", "run_commandline", "(", "argv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_audioset.default_command": [[450, 453], ["ex_audioset.main"], "function", ["home.repos.pwc.inspect_result.kkoutini_passt.None.ex_esc50.main"], ["@", "ex", ".", "automain", "\n", "def", "default_command", "(", ")", ":", "\n", "    ", "return", "main", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_fsd50k.M.__init__": [[107, 125], ["ba3l.module.Ba3lModule.__init__", "helpers.models_size.count_non_zero_params"], "methods", ["home.repos.pwc.inspect_result.kkoutini_passt.audioset.dataset.DistributedSamplerWrapper.__init__", "home.repos.pwc.inspect_result.kkoutini_passt.helpers.models_size.count_non_zero_params"], ["    ", "def", "__init__", "(", "self", ",", "experiment", ")", ":", "\n", "        ", "self", ".", "mel", "=", "None", "\n", "self", ".", "da_net", "=", "None", "\n", "super", "(", "M", ",", "self", ")", ".", "__init__", "(", "experiment", ")", "\n", "\n", "self", ".", "use_mixup", "=", "self", ".", "config", ".", "use_mixup", "or", "False", "\n", "self", ".", "mixup_alpha", "=", "self", ".", "config", ".", "mixup_alpha", "\n", "\n", "desc", ",", "sum_params", ",", "sum_non_zero", "=", "count_non_zero_params", "(", "self", ".", "net", ")", "\n", "self", ".", "experiment", ".", "info", "[", "\"start_sum_params\"", "]", "=", "sum_params", "\n", "self", ".", "experiment", ".", "info", "[", "\"start_sum_params_non_zero\"", "]", "=", "sum_non_zero", "\n", "\n", "# in case we need embedings for the DA", "\n", "self", ".", "net", ".", "return_embed", "=", "True", "\n", "self", ".", "dyn_norm", "=", "self", ".", "config", ".", "dyn_norm", "\n", "self", ".", "do_swa", "=", "False", "\n", "self", ".", "valid_names", "=", "[", "\"valid\"", ",", "\"eval\"", "]", "\n", "self", ".", "distributed_mode", "=", "self", ".", "config", ".", "trainer", ".", "num_nodes", ">", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_fsd50k.M.forward": [[126, 128], ["ex_fsd50k.M.net"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "net", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_fsd50k.M.mel_forward": [[129, 141], ["x.reshape.reshape.size", "x.reshape.reshape.reshape", "ex_fsd50k.M.mel", "x.reshape.reshape.reshape", "ex_fsd50k.get_dynamic_norm", "ex_fsd50k.M.register_buffer", "ex_fsd50k.M.register_buffer", "hasattr", "hasattr"], "methods", ["home.repos.pwc.inspect_result.kkoutini_passt.None.ex_esc50.get_dynamic_norm"], ["", "def", "mel_forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "old_shape", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "reshape", "(", "-", "1", ",", "old_shape", "[", "2", "]", ")", "\n", "x", "=", "self", ".", "mel", "(", "x", ")", "\n", "x", "=", "x", ".", "reshape", "(", "old_shape", "[", "0", "]", ",", "old_shape", "[", "1", "]", ",", "x", ".", "shape", "[", "1", "]", ",", "x", ".", "shape", "[", "2", "]", ")", "\n", "if", "self", ".", "dyn_norm", ":", "\n", "            ", "if", "not", "hasattr", "(", "self", ",", "\"tr_m\"", ")", "or", "not", "hasattr", "(", "self", ",", "\"tr_std\"", ")", ":", "\n", "                ", "tr_m", ",", "tr_std", "=", "get_dynamic_norm", "(", "self", ")", "\n", "self", ".", "register_buffer", "(", "'tr_m'", ",", "tr_m", ")", "\n", "self", ".", "register_buffer", "(", "'tr_std'", ",", "tr_std", ")", "\n", "", "x", "=", "(", "x", "-", "self", ".", "tr_m", ")", "/", "self", ".", "tr_std", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_fsd50k.M.training_step": [[142, 173], ["len", "ex_fsd50k.M.forward", "ex_fsd50k.M.mel_forward", "helpers.mixup.my_mixup", "lam.to.to.to", "torch.nn.functional.binary_cross_entropy_with_logits", "samples_loss.detach.detach.mean", "samples_loss.detach.detach.detach", "torch.nn.functional.binary_cross_entropy_with_logits", "samples_loss.detach.detach.mean", "samples_loss.detach.detach.detach", "lam.to.to.reshape", "lam.to.to.reshape", "lam.to.to.reshape", "lam.to.to.reshape"], "methods", ["home.repos.pwc.inspect_result.kkoutini_passt.helpers.vit_helpers.DropPath.forward", "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_esc50.M.mel_forward", "home.repos.pwc.inspect_result.kkoutini_passt.helpers.mixup.my_mixup"], ["", "def", "training_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "# REQUIRED", "\n", "        ", "x", ",", "f", ",", "y", "=", "batch", "\n", "if", "self", ".", "mel", ":", "\n", "            ", "x", "=", "self", ".", "mel_forward", "(", "x", ")", "\n", "\n", "", "orig_x", "=", "x", "\n", "batch_size", "=", "len", "(", "y", ")", "\n", "\n", "rn_indices", ",", "lam", "=", "None", ",", "None", "\n", "if", "self", ".", "use_mixup", ":", "\n", "            ", "rn_indices", ",", "lam", "=", "my_mixup", "(", "batch_size", ",", "self", ".", "mixup_alpha", ")", "\n", "lam", "=", "lam", ".", "to", "(", "x", ".", "device", ")", "\n", "x", "=", "x", "*", "lam", ".", "reshape", "(", "batch_size", ",", "1", ",", "1", ",", "1", ")", "+", "x", "[", "rn_indices", "]", "*", "(", "1.", "-", "lam", ".", "reshape", "(", "batch_size", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "\n", "", "y_hat", ",", "embed", "=", "self", ".", "forward", "(", "x", ")", "\n", "\n", "if", "self", ".", "use_mixup", ":", "\n", "            ", "y_mix", "=", "y", "*", "lam", ".", "reshape", "(", "batch_size", ",", "1", ")", "+", "y", "[", "rn_indices", "]", "*", "(", "1.", "-", "lam", ".", "reshape", "(", "batch_size", ",", "1", ")", ")", "\n", "samples_loss", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "\n", "y_hat", ",", "y_mix", ",", "reduction", "=", "\"none\"", ")", "\n", "loss", "=", "samples_loss", ".", "mean", "(", ")", "\n", "samples_loss", "=", "samples_loss", ".", "detach", "(", ")", "\n", "", "else", ":", "\n", "            ", "samples_loss", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "y_hat", ",", "y", ",", "reduction", "=", "\"none\"", ")", "\n", "loss", "=", "samples_loss", ".", "mean", "(", ")", "\n", "samples_loss", "=", "samples_loss", ".", "detach", "(", ")", "\n", "\n", "", "results", "=", "{", "\"loss\"", ":", "loss", ",", "}", "\n", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_fsd50k.M.training_epoch_end": [[174, 180], ["torch.stack().mean", "ex_fsd50k.M.log_dict", "torch.stack"], "methods", ["None"], ["", "def", "training_epoch_end", "(", "self", ",", "outputs", ")", ":", "\n", "        ", "avg_loss", "=", "torch", ".", "stack", "(", "[", "x", "[", "'loss'", "]", "for", "x", "in", "outputs", "]", ")", ".", "mean", "(", ")", "\n", "\n", "logs", "=", "{", "'train.loss'", ":", "avg_loss", ",", "'step'", ":", "self", ".", "current_epoch", "}", "\n", "\n", "self", ".", "log_dict", "(", "logs", ",", "sync_dist", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_fsd50k.M.predict": [[181, 188], ["ex_fsd50k.M.forward", "ex_fsd50k.M.mel_forward"], "methods", ["home.repos.pwc.inspect_result.kkoutini_passt.helpers.vit_helpers.DropPath.forward", "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_esc50.M.mel_forward"], ["", "def", "predict", "(", "self", ",", "batch", ",", "batch_idx", ":", "int", ",", "dataloader_idx", ":", "int", "=", "None", ")", ":", "\n", "        ", "x", ",", "f", ",", "y", "=", "batch", "\n", "if", "self", ".", "mel", ":", "\n", "            ", "x", "=", "self", ".", "mel_forward", "(", "x", ")", "\n", "\n", "", "y_hat", ",", "_", "=", "self", ".", "forward", "(", "x", ")", "\n", "return", "f", ",", "y_hat", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_fsd50k.M.validation_step": [[189, 207], ["ex_fsd50k.M.mel_forward", "net", "torch.nn.functional.binary_cross_entropy_with_logits", "torch.nn.functional.binary_cross_entropy_with_logits.mean", "torch.sigmoid", "v.cpu", "y_hat.detach", "y.detach", "results.items"], "methods", ["home.repos.pwc.inspect_result.kkoutini_passt.None.ex_esc50.M.mel_forward"], ["", "def", "validation_step", "(", "self", ",", "batch", ",", "batch_idx", ",", "dataloader_idx", ")", ":", "\n", "        ", "x", ",", "f", ",", "y", "=", "batch", "\n", "if", "self", ".", "mel", ":", "\n", "            ", "x", "=", "self", ".", "mel_forward", "(", "x", ")", "\n", "\n", "", "results", "=", "{", "}", "\n", "model_name", "=", "[", "(", "\"\"", ",", "self", ".", "net", ")", "]", "\n", "if", "self", ".", "do_swa", ":", "\n", "            ", "model_name", "=", "model_name", "+", "[", "(", "\"swa_\"", ",", "self", ".", "net_swa", ")", "]", "\n", "", "for", "net_name", ",", "net", "in", "model_name", ":", "\n", "            ", "y_hat", ",", "_", "=", "net", "(", "x", ")", "\n", "samples_loss", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "y_hat", ",", "y", ")", "\n", "loss", "=", "samples_loss", ".", "mean", "(", ")", "\n", "out", "=", "torch", ".", "sigmoid", "(", "y_hat", ".", "detach", "(", ")", ")", "\n", "# self.log(\"validation.loss\", loss, prog_bar=True, on_epoch=True, on_step=False)", "\n", "results", "=", "{", "**", "results", ",", "net_name", "+", "\"val_loss\"", ":", "loss", ",", "net_name", "+", "\"out\"", ":", "out", ",", "net_name", "+", "\"target\"", ":", "y", ".", "detach", "(", ")", "}", "\n", "", "results", "=", "{", "k", ":", "v", ".", "cpu", "(", ")", "for", "k", ",", "v", "in", "results", ".", "items", "(", ")", "}", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_fsd50k.M.validation_epoch_end": [[208, 249], ["enumerate", "torch.stack().mean", "torch.cat", "torch.cat", "ex_fsd50k.M.log_dict", "sklearn.metrics.average_precision_score", "sklearn.metrics.roc_auc_score", "torch.as_tensor().cuda", "torch.as_tensor().cuda", "torch.as_tensor().cuda", "torch.as_tensor().cuda", "ex_fsd50k.M.all_gather", "ex_fsd50k.M.all_gather", "sklearn.metrics.average_precision_score", "ex_fsd50k.M.log_dict", "torch.stack", "torch.cat.float().numpy", "torch.cat.float().numpy", "numpy.array", "torch.cat.numpy", "torch.cat.numpy", "numpy.array", "ex_fsd50k.M.reshape().cpu().numpy", "ex_fsd50k.M.reshape().cpu().numpy", "ex_fsd50k.M.log_dict", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor().cuda", "torch.as_tensor().cuda", "torch.cat.float", "torch.cat.float", "numpy.array.mean", "numpy.array.mean", "ex_fsd50k.M.reshape().cpu", "ex_fsd50k.M.reshape().cpu", "torch.as_tensor", "torch.as_tensor", "ex_fsd50k.M.reshape", "ex_fsd50k.M.reshape", "numpy.array.mean"], "methods", ["None"], ["", "def", "validation_epoch_end", "(", "self", ",", "outputs", ")", ":", "\n", "        ", "for", "idx", ",", "one_outputs", "in", "enumerate", "(", "outputs", ")", ":", "\n", "            ", "set_name", "=", "self", ".", "valid_names", "[", "idx", "]", "+", "\"_\"", "\n", "model_name", "=", "[", "(", "\"\"", ",", "self", ".", "net", ")", "]", "\n", "if", "self", ".", "do_swa", ":", "\n", "                ", "model_name", "=", "model_name", "+", "[", "(", "\"swa_\"", ",", "self", ".", "net_swa", ")", "]", "\n", "", "for", "net_name", ",", "net", "in", "model_name", ":", "\n", "                ", "avg_loss", "=", "torch", ".", "stack", "(", "[", "x", "[", "net_name", "+", "'val_loss'", "]", "for", "x", "in", "one_outputs", "]", ")", ".", "mean", "(", ")", "\n", "out", "=", "torch", ".", "cat", "(", "[", "x", "[", "net_name", "+", "'out'", "]", "for", "x", "in", "one_outputs", "]", ",", "dim", "=", "0", ")", "\n", "target", "=", "torch", ".", "cat", "(", "[", "x", "[", "net_name", "+", "'target'", "]", "for", "x", "in", "one_outputs", "]", ",", "dim", "=", "0", ")", "\n", "try", ":", "\n", "                    ", "average_precision", "=", "metrics", ".", "average_precision_score", "(", "\n", "target", ".", "float", "(", ")", ".", "numpy", "(", ")", ",", "out", ".", "float", "(", ")", ".", "numpy", "(", ")", ",", "average", "=", "None", ")", "\n", "", "except", "ValueError", ":", "\n", "                    ", "average_precision", "=", "np", ".", "array", "(", "[", "np", ".", "nan", "]", "*", "200", ")", "\n", "", "try", ":", "\n", "                    ", "roc", "=", "metrics", ".", "roc_auc_score", "(", "target", ".", "numpy", "(", ")", ",", "out", ".", "numpy", "(", ")", ",", "average", "=", "None", ")", "\n", "", "except", "ValueError", ":", "\n", "                    ", "roc", "=", "np", ".", "array", "(", "[", "np", ".", "nan", "]", "*", "200", ")", "\n", "", "logs", "=", "{", "set_name", "+", "net_name", "+", "'val.loss'", ":", "torch", ".", "as_tensor", "(", "avg_loss", ")", ".", "cuda", "(", ")", ",", "\n", "set_name", "+", "net_name", "+", "'ap'", ":", "torch", ".", "as_tensor", "(", "average_precision", ".", "mean", "(", ")", ")", ".", "cuda", "(", ")", ",", "\n", "set_name", "+", "net_name", "+", "'roc'", ":", "torch", ".", "as_tensor", "(", "roc", ".", "mean", "(", ")", ")", ".", "cuda", "(", ")", ",", "\n", "'step'", ":", "torch", ".", "as_tensor", "(", "self", ".", "current_epoch", ")", ".", "cuda", "(", ")", "}", "\n", "# torch.save(average_precision, f\"ap_perclass_{average_precision.mean()}.pt\")", "\n", "# print(average_precision)", "\n", "self", ".", "log_dict", "(", "logs", ",", "sync_dist", "=", "True", ")", "\n", "if", "self", ".", "distributed_mode", ":", "\n", "                    ", "allout", "=", "self", ".", "all_gather", "(", "out", ")", "\n", "alltarget", "=", "self", ".", "all_gather", "(", "target", ")", "\n", "\n", "average_precision", "=", "metrics", ".", "average_precision_score", "(", "\n", "alltarget", ".", "reshape", "(", "-", "1", ",", "alltarget", ".", "shape", "[", "-", "1", "]", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "allout", ".", "reshape", "(", "-", "1", ",", "allout", ".", "shape", "[", "-", "1", "]", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "average", "=", "None", ")", "\n", "if", "self", ".", "trainer", ".", "is_global_zero", ":", "\n", "                        ", "logs", "=", "{", "set_name", "+", "net_name", "+", "\"allap\"", ":", "torch", ".", "as_tensor", "(", "average_precision", ".", "mean", "(", ")", ")", ".", "cuda", "(", ")", ",", "\n", "'step'", ":", "torch", ".", "as_tensor", "(", "self", ".", "current_epoch", ")", ".", "cuda", "(", ")", "}", "\n", "self", ".", "log_dict", "(", "logs", ",", "sync_dist", "=", "False", ")", "\n", "", "", "else", ":", "\n", "                    ", "self", ".", "log_dict", "(", "\n", "{", "set_name", "+", "net_name", "+", "\"allap\"", ":", "logs", "[", "set_name", "+", "net_name", "+", "'ap'", "]", ",", "'step'", ":", "logs", "[", "'step'", "]", "}", ",", "\n", "sync_dist", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_fsd50k.M.configure_optimizers": [[250, 259], ["ex_fsd50k.get_optimizer", "ex_fsd50k.M.parameters", "ex_fsd50k.get_lr_scheduler"], "methods", ["home.repos.pwc.inspect_result.kkoutini_passt.None.ex_esc50.get_optimizer", "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_esc50.get_lr_scheduler"], ["", "", "", "", "def", "configure_optimizers", "(", "self", ")", ":", "\n", "# REQUIRED", "\n", "# can return multiple optimizers and learning_rate schedulers", "\n", "# (LBFGS it is automatically supported, no need for closure function)", "\n", "        ", "optimizer", "=", "get_optimizer", "(", "self", ".", "parameters", "(", ")", ")", "\n", "# torch.optim.Adam(self.parameters(), lr=self.config.lr)", "\n", "return", "{", "\n", "'optimizer'", ":", "optimizer", ",", "\n", "'lr_scheduler'", ":", "get_lr_scheduler", "(", "optimizer", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_fsd50k.M.configure_callbacks": [[261, 263], ["ex_fsd50k.get_extra_checkpoint_callback", "ex_fsd50k.get_extra_swa_callback"], "methods", ["home.repos.pwc.inspect_result.kkoutini_passt.None.ex_esc50.get_extra_checkpoint_callback", "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_esc50.get_extra_swa_callback"], ["", "def", "configure_callbacks", "(", "self", ")", ":", "\n", "        ", "return", "get_extra_checkpoint_callback", "(", ")", "+", "get_extra_swa_callback", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_fsd50k.variable_eval": [[43, 47], ["dict", "dict", "dict", "dict"], "function", ["None"], ["@", "ex", ".", "named_config", "\n", "def", "variable_eval", "(", ")", ":", "\n", "    ", "basedataset", "=", "dict", "(", "variable_eval", "=", "True", ")", "\n", "datasets", "=", "dict", "(", "valid", "=", "dict", "(", "batch_size", "=", "1", ")", ",", "eval", "=", "dict", "(", "batch_size", "=", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_fsd50k.default_conf": [[49, 75], ["os.environ.get().strip", "os.environ.get().strip", "os.environ.get().strip", "os.environ.get", "os.getpid", "sacred.config_helpers.DynamicIngredient", "dict", "sacred.config_helpers.DynamicIngredient", "sacred.config_helpers.DynamicIngredient", "os.environ.get", "os.environ.get", "os.environ.get", "os.environ.get().strip", "os.environ.get().strip", "os.environ.get", "os.environ.get"], "function", ["home.repos.pwc.inspect_result.kkoutini_passt.helpers.audiodatasets.ObjectCacher.get", "home.repos.pwc.inspect_result.kkoutini_passt.helpers.audiodatasets.ObjectCacher.get", "home.repos.pwc.inspect_result.kkoutini_passt.helpers.audiodatasets.ObjectCacher.get", "home.repos.pwc.inspect_result.kkoutini_passt.helpers.audiodatasets.ObjectCacher.get", "home.repos.pwc.inspect_result.kkoutini_passt.helpers.audiodatasets.ObjectCacher.get", "home.repos.pwc.inspect_result.kkoutini_passt.helpers.audiodatasets.ObjectCacher.get"], ["", "@", "ex", ".", "config", "\n", "def", "default_conf", "(", ")", ":", "\n", "    ", "cmd", "=", "\" \"", ".", "join", "(", "sys", ".", "argv", ")", "# command line arguments", "\n", "saque_cmd", "=", "os", ".", "environ", ".", "get", "(", "\"SAQUE_CMD\"", ",", "\"\"", ")", ".", "strip", "(", ")", "\n", "saque_id", "=", "os", ".", "environ", ".", "get", "(", "\"SAQUE_ID\"", ",", "\"\"", ")", ".", "strip", "(", ")", "\n", "slurm_job_id", "=", "os", ".", "environ", ".", "get", "(", "\"SLURM_JOB_ID\"", ",", "\"\"", ")", ".", "strip", "(", ")", "\n", "if", "os", ".", "environ", ".", "get", "(", "\"SLURM_ARRAY_JOB_ID\"", ",", "False", ")", ":", "\n", "        ", "slurm_job_id", "=", "os", ".", "environ", ".", "get", "(", "\"SLURM_ARRAY_JOB_ID\"", ",", "\"\"", ")", ".", "strip", "(", ")", "+", "\"_\"", "+", "os", ".", "environ", ".", "get", "(", "\"SLURM_ARRAY_TASK_ID\"", ",", "\n", "\"\"", ")", ".", "strip", "(", ")", "\n", "", "process_id", "=", "os", ".", "getpid", "(", ")", "\n", "models", "=", "{", "\n", "\"net\"", ":", "DynamicIngredient", "(", "\"models.passt.model_ing\"", ",", "\n", "n_classes", "=", "200", ",", "s_patchout_t", "=", "10", ",", "s_patchout_f", "=", "4", ")", ",", "# network config", "\n", "\"mel\"", ":", "DynamicIngredient", "(", "\"models.preprocess.model_ing\"", ",", "\n", "instance_cmd", "=", "\"AugmentMelSTFT\"", ",", "\n", "n_mels", "=", "128", ",", "sr", "=", "32000", ",", "win_length", "=", "800", ",", "hopsize", "=", "320", ",", "n_fft", "=", "1024", ",", "freqm", "=", "0", ",", "\n", "timem", "=", "0", ",", "\n", "htk", "=", "False", ",", "fmin", "=", "0.0", ",", "fmax", "=", "None", ",", "norm", "=", "1", ",", "fmin_aug_range", "=", "10", ",", "\n", "fmax_aug_range", "=", "2000", ")", "\n", "}", "\n", "basedataset", "=", "DynamicIngredient", "(", "\"fsd50k.dataset.dataset\"", ",", "wavmix", "=", "1", ")", "\n", "trainer", "=", "dict", "(", "max_epochs", "=", "50", ",", "gpus", "=", "1", ",", "weights_summary", "=", "'full'", ",", "benchmark", "=", "True", ",", "num_sanity_val_steps", "=", "0", ",", "\n", "reload_dataloaders_every_epoch", "=", "True", ")", "\n", "lr", "=", "0.00001", "# learning rate", "\n", "use_mixup", "=", "True", "\n", "mixup_alpha", "=", "0.3", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_fsd50k.get_scheduler_lambda": [[81, 89], ["RuntimeError", "helpers.ramp.exp_warmup_linear_down", "helpers.ramp.cosine_cycle"], "function", ["home.repos.pwc.inspect_result.kkoutini_passt.helpers.ramp.exp_warmup_linear_down", "home.repos.pwc.inspect_result.kkoutini_passt.helpers.ramp.cosine_cycle"], ["@", "ex", ".", "command", "\n", "def", "get_scheduler_lambda", "(", "warm_up_len", "=", "5", ",", "ramp_down_start", "=", "10", ",", "ramp_down_len", "=", "10", ",", "last_lr_value", "=", "0.01", ",", "\n", "schedule_mode", "=", "\"exp_lin\"", ")", ":", "\n", "    ", "if", "schedule_mode", "==", "\"exp_lin\"", ":", "\n", "        ", "return", "exp_warmup_linear_down", "(", "warm_up_len", ",", "ramp_down_len", ",", "ramp_down_start", ",", "last_lr_value", ")", "\n", "", "if", "schedule_mode", "==", "\"cos_cyc\"", ":", "\n", "        ", "return", "cosine_cycle", "(", "warm_up_len", ",", "ramp_down_start", ",", "last_lr_value", ")", "\n", "", "raise", "RuntimeError", "(", "f\"schedule_mode={schedule_mode} Unknown for a lambda funtion.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_fsd50k.get_lr_scheduler": [[91, 96], ["RuntimeError", "torch.optim.lr_scheduler.LambdaLR", "ex_fsd50k.get_scheduler_lambda"], "function", ["home.repos.pwc.inspect_result.kkoutini_passt.None.ex_esc50.get_scheduler_lambda"], ["", "@", "ex", ".", "command", "\n", "def", "get_lr_scheduler", "(", "optimizer", ",", "schedule_mode", ")", ":", "\n", "    ", "if", "schedule_mode", "in", "{", "\"exp_lin\"", ",", "\"cos_cyc\"", "}", ":", "\n", "        ", "return", "torch", ".", "optim", ".", "lr_scheduler", ".", "LambdaLR", "(", "optimizer", ",", "get_scheduler_lambda", "(", ")", ")", "\n", "", "raise", "RuntimeError", "(", "f\"schedule_mode={schedule_mode} Unknown.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_fsd50k.get_optimizer": [[98, 104], ["torch.optim.Adam", "print", "torch.optim.AdamW"], "function", ["None"], ["", "@", "ex", ".", "command", "\n", "def", "get_optimizer", "(", "params", ",", "lr", ",", "adamw", "=", "True", ",", "weight_decay", "=", "0.0001", ")", ":", "\n", "    ", "if", "adamw", ":", "\n", "        ", "print", "(", "f\"\\nUsing adamw weight_decay={weight_decay}!\\n\"", ")", "\n", "return", "torch", ".", "optim", ".", "AdamW", "(", "params", ",", "lr", "=", "lr", ",", "weight_decay", "=", "weight_decay", ")", "\n", "", "return", "torch", ".", "optim", ".", "Adam", "(", "params", ",", "lr", "=", "lr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_fsd50k.get_dynamic_norm": [[265, 270], ["RuntimeError"], "function", ["None"], ["", "", "@", "ex", ".", "command", "\n", "def", "get_dynamic_norm", "(", "model", ",", "dyn_norm", "=", "False", ")", ":", "\n", "    ", "if", "not", "dyn_norm", ":", "\n", "        ", "return", "None", ",", "None", "\n", "", "raise", "RuntimeError", "(", "'no dynamic norm supported yet.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_fsd50k.get_extra_checkpoint_callback": [[275, 283], ["pytorch_lightning.callbacks.ModelCheckpoint"], "function", ["None"], ["@", "ex", ".", "command", "\n", "def", "get_extra_checkpoint_callback", "(", "save_best", "=", "None", ")", ":", "\n", "    ", "if", "save_best", "is", "None", ":", "\n", "        ", "return", "[", "]", "\n", "", "global", "model_checkpoint_callback", "\n", "model_checkpoint_callback", "=", "ModelCheckpoint", "(", "monitor", "=", "\"allap\"", ",", "verbose", "=", "True", ",", "save_top_k", "=", "save_best", ",", "mode", "=", "'max'", ",", "\n", "every_n_val_epochs", "=", "1", ",", "every_n_train_steps", "=", "0", ")", "\n", "return", "[", "model_checkpoint_callback", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_fsd50k.get_extra_swa_callback": [[285, 293], ["print", "StochasticWeightAveraging"], "function", ["None"], ["", "@", "ex", ".", "command", "\n", "def", "get_extra_swa_callback", "(", "swa", "=", "True", ",", "swa_epoch_start", "=", "10", ",", "\n", "swa_freq", "=", "3", ")", ":", "\n", "    ", "if", "not", "swa", ":", "\n", "        ", "return", "[", "]", "\n", "", "print", "(", "\"\\n Using swa!\\n\"", ")", "\n", "from", "helpers", ".", "swa_callback", "import", "StochasticWeightAveraging", "\n", "return", "[", "StochasticWeightAveraging", "(", "swa_epoch_start", "=", "swa_epoch_start", ",", "swa_freq", "=", "swa_freq", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_fsd50k.main": [[295, 314], ["ex.get_trainer", "ex.get_train_dataloaders", "ex.get_val_dataloaders", "ex_fsd50k.M", "ex.get_trainer.fit"], "function", ["None"], ["", "@", "ex", ".", "command", "\n", "def", "main", "(", "_run", ",", "_config", ",", "_log", ",", "_rnd", ",", "_seed", ")", ":", "\n", "    ", "trainer", "=", "ex", ".", "get_trainer", "(", ")", "\n", "train_loader", "=", "ex", ".", "get_train_dataloaders", "(", ")", "\n", "val_loader", "=", "ex", ".", "get_val_dataloaders", "(", ")", "\n", "# eval_loader = get_eval_loader()", "\n", "\n", "modul", "=", "M", "(", "ex", ")", "\n", "\n", "trainer", ".", "fit", "(", "\n", "modul", ",", "\n", "train_dataloader", "=", "train_loader", ",", "\n", "val_dataloaders", "=", "[", "val_loader", "[", "'valid'", "]", ",", "val_loader", "[", "'eval'", "]", "]", ",", "\n", ")", "\n", "## evaluate best model on eval set", "\n", "trainer", ".", "val_dataloaders", "=", "None", "\n", "modul", ".", "val_dataloaders", "=", "None", "\n", "\n", "return", "{", "\"done\"", ":", "True", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_fsd50k.model_speed_test": [[316, 375], ["ex_fsd50k.M", "modul.cuda.cuda", "print", "print", "torch.ones().cuda", "torch.ones().cuda", "torch.cuda.amp.GradScaler", "torch.optim.SGD", "print", "torch.cuda.synchronize", "time.time", "range", "torch.cuda.synchronize", "time.time", "print", "torch.cuda.synchronize", "time.time", "print", "range", "torch.cuda.synchronize", "time.time", "print", "print", "net.parameters", "torch.cuda.amp.GradScaler.scale().backward", "torch.cuda.amp.GradScaler.step", "torch.cuda.amp.GradScaler.update", "torch.cuda.amp.GradScaler.scale().backward", "torch.cuda.amp.GradScaler.step", "torch.cuda.amp.GradScaler.update", "torch.ones", "torch.ones", "torch.cuda.amp.autocast", "net", "torch.nn.functional.binary_cross_entropy_with_logits().mean", "torch.cuda.amp.autocast", "net", "torch.nn.functional.binary_cross_entropy_with_logits().mean", "torch.cuda.amp.GradScaler.scale", "torch.cuda.amp.GradScaler.scale", "torch.nn.functional.binary_cross_entropy_with_logits", "torch.nn.functional.binary_cross_entropy_with_logits"], "function", ["None"], ["", "@", "ex", ".", "command", "\n", "def", "model_speed_test", "(", "_run", ",", "_config", ",", "_log", ",", "_rnd", ",", "_seed", ",", "speed_test_batch_size", "=", "100", ")", ":", "\n", "    ", "'''\n    Test training speed of a model\n    @param _run:\n    @param _config:\n    @param _log:\n    @param _rnd:\n    @param _seed:\n    @param speed_test_batch_size: the batch size during the test\n    @return:\n    '''", "\n", "\n", "modul", "=", "M", "(", "ex", ")", "\n", "modul", "=", "modul", ".", "cuda", "(", ")", "\n", "batch_size", "=", "speed_test_batch_size", "\n", "print", "(", "f\"\\nBATCH SIZE : {batch_size}\\n\"", ")", "\n", "test_length", "=", "100", "\n", "print", "(", "f\"\\ntest_length : {test_length}\\n\"", ")", "\n", "\n", "x", "=", "torch", ".", "ones", "(", "[", "batch_size", ",", "1", ",", "128", ",", "998", "]", ")", ".", "cuda", "(", ")", "\n", "target", "=", "torch", ".", "ones", "(", "[", "batch_size", ",", "527", "]", ")", ".", "cuda", "(", ")", "\n", "# one passe", "\n", "net", "=", "modul", ".", "net", "\n", "# net(x)", "\n", "scaler", "=", "torch", ".", "cuda", ".", "amp", ".", "GradScaler", "(", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "# net = torch.jit.trace(net,(x,))", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "net", ".", "parameters", "(", ")", ",", "lr", "=", "0.001", ")", "\n", "\n", "print", "(", "\"warmup\"", ")", "\n", "import", "time", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "t1", "=", "time", ".", "time", "(", ")", "\n", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "        ", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", ")", ":", "\n", "            ", "y_hat", ",", "embed", "=", "net", "(", "x", ")", "\n", "loss", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "y_hat", ",", "target", ",", "reduction", "=", "\"none\"", ")", ".", "mean", "(", ")", "\n", "", "scaler", ".", "scale", "(", "loss", ")", ".", "backward", "(", ")", "\n", "scaler", ".", "step", "(", "optimizer", ")", "\n", "scaler", ".", "update", "(", ")", "\n", "", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "t2", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "'warmup done:'", ",", "(", "t2", "-", "t1", ")", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "t1", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\"testing speed\"", ")", "\n", "\n", "for", "i", "in", "range", "(", "test_length", ")", ":", "\n", "        ", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", ")", ":", "\n", "            ", "y_hat", ",", "embed", "=", "net", "(", "x", ")", "\n", "loss", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "y_hat", ",", "target", ",", "reduction", "=", "\"none\"", ")", ".", "mean", "(", ")", "\n", "", "scaler", ".", "scale", "(", "loss", ")", ".", "backward", "(", ")", "\n", "scaler", ".", "step", "(", "optimizer", ")", "\n", "scaler", ".", "update", "(", ")", "\n", "", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "t2", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "'test done:'", ",", "(", "t2", "-", "t1", ")", ")", "\n", "print", "(", "\"average speed: \"", ",", "(", "test_length", "*", "batch_size", ")", "/", "(", "t2", "-", "t1", ")", ",", "\" specs/second\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_fsd50k.evaluate_only": [[377, 390], ["ex.get_trainer", "ex.get_train_dataloaders", "ex.get_val_dataloaders", "ex_fsd50k.M", "print", "ex.get_trainer.validate", "print", "print", "len"], "function", ["None"], ["", "@", "ex", ".", "command", "\n", "def", "evaluate_only", "(", "_run", ",", "_config", ",", "_log", ",", "_rnd", ",", "_seed", ")", ":", "\n", "# force overriding the config, not logged = not recommended", "\n", "    ", "trainer", "=", "ex", ".", "get_trainer", "(", ")", "\n", "train_loader", "=", "ex", ".", "get_train_dataloaders", "(", ")", "\n", "val_loader", "=", "ex", ".", "get_val_dataloaders", "(", ")", "\n", "modul", "=", "M", "(", "ex", ")", "\n", "modul", ".", "val_dataloader", "=", "None", "\n", "trainer", ".", "val_dataloaders", "=", "None", "\n", "print", "(", "f\"\\n\\nValidation len={len(val_loader)}\\n\"", ")", "\n", "res", "=", "trainer", ".", "validate", "(", "modul", ",", "val_dataloaders", "=", "val_loader", ")", "\n", "print", "(", "\"\\n\\n Validtaion:\"", ")", "\n", "print", "(", "res", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_fsd50k.test_loaders": [[392, 405], ["enumerate", "enumerate", "ex.datasets.training.get_iter", "print", "ex.datasets.test.get_iter", "print"], "function", ["None"], ["", "@", "ex", ".", "command", "\n", "def", "test_loaders", "(", ")", ":", "\n", "    ", "'''\n    get one sample from each loader for debbuging\n    @return:\n    '''", "\n", "for", "i", ",", "b", "in", "enumerate", "(", "ex", ".", "datasets", ".", "training", ".", "get_iter", "(", ")", ")", ":", "\n", "        ", "print", "(", "b", ")", "\n", "break", "\n", "\n", "", "for", "i", ",", "b", "in", "enumerate", "(", "ex", ".", "datasets", ".", "test", ".", "get_iter", "(", ")", ")", ":", "\n", "        ", "print", "(", "b", ")", "\n", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_fsd50k.set_default_json_pickle": [[407, 411], ["isinstance", "list"], "function", ["None"], ["", "", "def", "set_default_json_pickle", "(", "obj", ")", ":", "\n", "    ", "if", "isinstance", "(", "obj", ",", "set", ")", ":", "\n", "        ", "return", "list", "(", "obj", ")", "\n", "", "raise", "TypeError", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_fsd50k.preload_mp3": [[413, 421], ["sacred.config_helpers.CMD", "print"], "function", ["None"], ["", "@", "ex", ".", "command", "\n", "def", "preload_mp3", "(", "all_y", "=", "CMD", "(", "\"/basedataset.preload_mp3\"", ")", ")", ":", "\n", "    ", "'''\n    read the dataset sequentially, useful if you have a network cache\n    @param all_y: the dataset preload command\n    @return:\n    '''", "\n", "print", "(", "all_y", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_fsd50k.multiprocessing_run": [[423, 443], ["print", "print", "str", "print", "ex.run_commandline", "os.getpid", "os.environ[].split", "print", "ex_fsd50k.main", "os.getpid"], "function", ["home.repos.pwc.inspect_result.kkoutini_passt.None.ex_esc50.main"], ["", "def", "multiprocessing_run", "(", "rank", ",", "word_size", ")", ":", "\n", "    ", "print", "(", "\"rank \"", ",", "rank", ",", "os", ".", "getpid", "(", ")", ")", "\n", "print", "(", "\"word_size \"", ",", "word_size", ")", "\n", "os", ".", "environ", "[", "'NODE_RANK'", "]", "=", "str", "(", "rank", ")", "\n", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", ".", "split", "(", "\",\"", ")", "[", "rank", "]", "\n", "argv", "=", "sys", ".", "argv", "\n", "if", "rank", "!=", "0", ":", "\n", "        ", "print", "(", "f\"Unobserved {os.getpid()} with rank {rank}\"", ")", "\n", "argv", "=", "argv", "+", "[", "\"-u\"", "]", "# only rank 0 is observed", "\n", "", "if", "\"with\"", "not", "in", "argv", ":", "\n", "        ", "argv", "=", "argv", "+", "[", "\"with\"", "]", "\n", "\n", "", "argv", "=", "argv", "+", "[", "f\"trainer.num_nodes={word_size}\"", ",", "f\"trainer.accelerator=ddp\"", "]", "\n", "print", "(", "argv", ")", "\n", "\n", "@", "ex", ".", "main", "\n", "def", "default_command", "(", ")", ":", "\n", "        ", "return", "main", "(", ")", "\n", "\n", "", "ex", ".", "run_commandline", "(", "argv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_fsd50k.default_command": [[474, 477], ["ex_fsd50k.main"], "function", ["home.repos.pwc.inspect_result.kkoutini_passt.None.ex_esc50.main"], ["@", "ex", ".", "automain", "\n", "def", "default_command", "(", ")", ":", "\n", "    ", "return", "main", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_esc50.M.__init__": [[96, 114], ["ba3l.module.Ba3lModule.__init__", "helpers.models_size.count_non_zero_params"], "methods", ["home.repos.pwc.inspect_result.kkoutini_passt.audioset.dataset.DistributedSamplerWrapper.__init__", "home.repos.pwc.inspect_result.kkoutini_passt.helpers.models_size.count_non_zero_params"], ["    ", "def", "__init__", "(", "self", ",", "experiment", ")", ":", "\n", "        ", "self", ".", "mel", "=", "None", "\n", "self", ".", "da_net", "=", "None", "\n", "super", "(", "M", ",", "self", ")", ".", "__init__", "(", "experiment", ")", "\n", "\n", "self", ".", "use_mixup", "=", "self", ".", "config", ".", "use_mixup", "or", "False", "\n", "self", ".", "mixup_alpha", "=", "self", ".", "config", ".", "mixup_alpha", "\n", "\n", "desc", ",", "sum_params", ",", "sum_non_zero", "=", "count_non_zero_params", "(", "self", ".", "net", ")", "\n", "self", ".", "experiment", ".", "info", "[", "\"start_sum_params\"", "]", "=", "sum_params", "\n", "self", ".", "experiment", ".", "info", "[", "\"start_sum_params_non_zero\"", "]", "=", "sum_non_zero", "\n", "\n", "# in case we need embedings for the DA", "\n", "self", ".", "net", ".", "return_embed", "=", "True", "\n", "self", ".", "dyn_norm", "=", "self", ".", "config", ".", "dyn_norm", "\n", "self", ".", "do_swa", "=", "False", "\n", "\n", "self", ".", "distributed_mode", "=", "self", ".", "config", ".", "trainer", ".", "num_nodes", ">", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_esc50.M.forward": [[115, 117], ["ex_esc50.M.net"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "net", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_esc50.M.mel_forward": [[118, 130], ["x.reshape.reshape.size", "x.reshape.reshape.reshape", "ex_esc50.M.mel", "x.reshape.reshape.reshape", "ex_esc50.get_dynamic_norm", "ex_esc50.M.register_buffer", "ex_esc50.M.register_buffer", "hasattr", "hasattr"], "methods", ["home.repos.pwc.inspect_result.kkoutini_passt.None.ex_esc50.get_dynamic_norm"], ["", "def", "mel_forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "old_shape", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "reshape", "(", "-", "1", ",", "old_shape", "[", "2", "]", ")", "\n", "x", "=", "self", ".", "mel", "(", "x", ")", "\n", "x", "=", "x", ".", "reshape", "(", "old_shape", "[", "0", "]", ",", "old_shape", "[", "1", "]", ",", "x", ".", "shape", "[", "1", "]", ",", "x", ".", "shape", "[", "2", "]", ")", "\n", "if", "self", ".", "dyn_norm", ":", "\n", "            ", "if", "not", "hasattr", "(", "self", ",", "\"tr_m\"", ")", "or", "not", "hasattr", "(", "self", ",", "\"tr_std\"", ")", ":", "\n", "                ", "tr_m", ",", "tr_std", "=", "get_dynamic_norm", "(", "self", ")", "\n", "self", ".", "register_buffer", "(", "'tr_m'", ",", "tr_m", ")", "\n", "self", ".", "register_buffer", "(", "'tr_std'", ",", "tr_std", ")", "\n", "", "x", "=", "(", "x", "-", "self", ".", "tr_m", ")", "/", "self", ".", "tr_std", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_esc50.M.training_step": [[131, 163], ["len", "ex_esc50.M.forward", "ex_esc50.M.mel_forward", "helpers.mixup.my_mixup", "lam.to.to.to", "samples_loss.detach.detach.mean", "samples_loss.detach.detach.mean", "samples_loss.detach.detach.detach", "torch.nn.functional.cross_entropy", "samples_loss.detach.detach.mean", "samples_loss.detach.detach.detach", "lam.to.to.reshape", "torch.nn.functional.cross_entropy", "lam.to.to.reshape", "torch.nn.functional.cross_entropy", "lam.to.to.reshape", "lam.to.to.reshape"], "methods", ["home.repos.pwc.inspect_result.kkoutini_passt.helpers.vit_helpers.DropPath.forward", "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_esc50.M.mel_forward", "home.repos.pwc.inspect_result.kkoutini_passt.helpers.mixup.my_mixup"], ["", "def", "training_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "# REQUIRED", "\n", "        ", "x", ",", "f", ",", "y", "=", "batch", "\n", "if", "self", ".", "mel", ":", "\n", "            ", "x", "=", "self", ".", "mel_forward", "(", "x", ")", "\n", "\n", "", "orig_x", "=", "x", "\n", "batch_size", "=", "len", "(", "y", ")", "\n", "\n", "rn_indices", ",", "lam", "=", "None", ",", "None", "\n", "if", "self", ".", "use_mixup", ":", "\n", "            ", "rn_indices", ",", "lam", "=", "my_mixup", "(", "batch_size", ",", "self", ".", "mixup_alpha", ")", "\n", "lam", "=", "lam", ".", "to", "(", "x", ".", "device", ")", "\n", "x", "=", "x", "*", "lam", ".", "reshape", "(", "batch_size", ",", "1", ",", "1", ",", "1", ")", "+", "x", "[", "rn_indices", "]", "*", "(", "1.", "-", "lam", ".", "reshape", "(", "batch_size", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "\n", "", "y_hat", ",", "embed", "=", "self", ".", "forward", "(", "x", ")", "\n", "\n", "if", "self", ".", "use_mixup", ":", "\n", "# y_mix = y * lam.reshape(batch_size, 1) + y[rn_indices] * (1. - lam.reshape(batch_size, 1))", "\n", "            ", "samples_loss", "=", "(", "F", ".", "cross_entropy", "(", "y_hat", ",", "y", ",", "reduction", "=", "\"none\"", ")", "*", "lam", ".", "reshape", "(", "batch_size", ")", "+", "\n", "F", ".", "cross_entropy", "(", "y_hat", ",", "y", "[", "rn_indices", "]", ",", "reduction", "=", "\"none\"", ")", "*", "(", "1.", "-", "lam", ".", "reshape", "(", "batch_size", ")", ")", ")", "\n", "loss", "=", "samples_loss", ".", "mean", "(", ")", "\n", "loss", "=", "samples_loss", ".", "mean", "(", ")", "\n", "samples_loss", "=", "samples_loss", ".", "detach", "(", ")", "\n", "", "else", ":", "\n", "            ", "samples_loss", "=", "F", ".", "cross_entropy", "(", "y_hat", ",", "y", ",", "reduction", "=", "\"none\"", ")", "\n", "loss", "=", "samples_loss", ".", "mean", "(", ")", "\n", "samples_loss", "=", "samples_loss", ".", "detach", "(", ")", "\n", "\n", "", "results", "=", "{", "\"loss\"", ":", "loss", ",", "}", "\n", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_esc50.M.training_epoch_end": [[164, 170], ["torch.stack().mean", "ex_esc50.M.log_dict", "torch.stack"], "methods", ["None"], ["", "def", "training_epoch_end", "(", "self", ",", "outputs", ")", ":", "\n", "        ", "avg_loss", "=", "torch", ".", "stack", "(", "[", "x", "[", "'loss'", "]", "for", "x", "in", "outputs", "]", ")", ".", "mean", "(", ")", "\n", "\n", "logs", "=", "{", "'train.loss'", ":", "avg_loss", ",", "'step'", ":", "self", ".", "current_epoch", "}", "\n", "\n", "self", ".", "log_dict", "(", "logs", ",", "sync_dist", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_esc50.M.predict": [[171, 178], ["ex_esc50.M.forward", "ex_esc50.M.mel_forward"], "methods", ["home.repos.pwc.inspect_result.kkoutini_passt.helpers.vit_helpers.DropPath.forward", "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_esc50.M.mel_forward"], ["", "def", "predict", "(", "self", ",", "batch", ",", "batch_idx", ":", "int", ",", "dataloader_idx", ":", "int", "=", "None", ")", ":", "\n", "        ", "x", ",", "f", ",", "y", "=", "batch", "\n", "if", "self", ".", "mel", ":", "\n", "            ", "x", "=", "self", ".", "mel_forward", "(", "x", ")", "\n", "\n", "", "y_hat", ",", "_", "=", "self", ".", "forward", "(", "x", ")", "\n", "return", "f", ",", "y_hat", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_esc50.M.validation_step": [[179, 200], ["ex_esc50.M.mel_forward", "net", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy.mean", "torch.max", "n_correct_pred_per_sample.sum", "v.cpu", "torch.as_tensor", "torch.as_tensor", "results.items", "len"], "methods", ["home.repos.pwc.inspect_result.kkoutini_passt.None.ex_esc50.M.mel_forward"], ["", "def", "validation_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "        ", "x", ",", "f", ",", "y", "=", "batch", "\n", "if", "self", ".", "mel", ":", "\n", "            ", "x", "=", "self", ".", "mel_forward", "(", "x", ")", "\n", "\n", "", "results", "=", "{", "}", "\n", "model_name", "=", "[", "(", "\"\"", ",", "self", ".", "net", ")", "]", "\n", "if", "self", ".", "do_swa", ":", "\n", "            ", "model_name", "=", "model_name", "+", "[", "(", "\"swa_\"", ",", "self", ".", "net_swa", ")", "]", "\n", "", "for", "net_name", ",", "net", "in", "model_name", ":", "\n", "            ", "y_hat", ",", "_", "=", "net", "(", "x", ")", "\n", "samples_loss", "=", "F", ".", "cross_entropy", "(", "y_hat", ",", "y", ",", "reduction", "=", "\"none\"", ")", "\n", "loss", "=", "samples_loss", ".", "mean", "(", ")", "\n", "_", ",", "preds", "=", "torch", ".", "max", "(", "y_hat", ",", "dim", "=", "1", ")", "\n", "n_correct_pred_per_sample", "=", "(", "preds", "==", "y", ")", "\n", "n_correct_pred", "=", "n_correct_pred_per_sample", ".", "sum", "(", ")", "\n", "# self.log(\"validation.loss\", loss, prog_bar=True, on_epoch=True, on_step=False)", "\n", "results", "=", "{", "**", "results", ",", "net_name", "+", "\"val_loss\"", ":", "loss", ",", "\n", "net_name", "+", "\"n_correct_pred\"", ":", "torch", ".", "as_tensor", "(", "n_correct_pred", ")", ",", "net_name", "+", "\"n_pred\"", ":", "torch", ".", "as_tensor", "(", "len", "(", "y", ")", ")", "}", "\n", "", "results", "=", "{", "k", ":", "v", ".", "cpu", "(", ")", "for", "k", ",", "v", "in", "results", ".", "items", "(", ")", "}", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_esc50.M.validation_epoch_end": [[201, 212], ["torch.stack().mean", "ex_esc50.M.log_dict", "sum", "torch.as_tensor().cuda", "torch.as_tensor().cuda", "torch.as_tensor().cuda", "torch.stack", "sum", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor"], "methods", ["None"], ["", "def", "validation_epoch_end", "(", "self", ",", "outputs", ")", ":", "\n", "        ", "model_name", "=", "[", "(", "\"\"", ",", "self", ".", "net", ")", "]", "\n", "if", "self", ".", "do_swa", ":", "\n", "            ", "model_name", "=", "model_name", "+", "[", "(", "\"swa_\"", ",", "self", ".", "net_swa", ")", "]", "\n", "", "for", "net_name", ",", "net", "in", "model_name", ":", "\n", "            ", "avg_loss", "=", "torch", ".", "stack", "(", "[", "x", "[", "net_name", "+", "'val_loss'", "]", "for", "x", "in", "outputs", "]", ")", ".", "mean", "(", ")", "\n", "val_acc", "=", "sum", "(", "[", "x", "[", "'n_correct_pred'", "]", "for", "x", "in", "outputs", "]", ")", "*", "1.0", "/", "sum", "(", "x", "[", "'n_pred'", "]", "for", "x", "in", "outputs", ")", "\n", "logs", "=", "{", "net_name", "+", "'val.loss'", ":", "torch", ".", "as_tensor", "(", "avg_loss", ")", ".", "cuda", "(", ")", ",", "\n", "net_name", "+", "'acc'", ":", "torch", ".", "as_tensor", "(", "val_acc", ")", ".", "cuda", "(", ")", ",", "\n", "'step'", ":", "torch", ".", "as_tensor", "(", "self", ".", "current_epoch", ")", ".", "cuda", "(", ")", "}", "\n", "self", ".", "log_dict", "(", "logs", ",", "sync_dist", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_esc50.M.configure_optimizers": [[213, 222], ["ex_esc50.get_optimizer", "ex_esc50.M.parameters", "ex_esc50.get_lr_scheduler"], "methods", ["home.repos.pwc.inspect_result.kkoutini_passt.None.ex_esc50.get_optimizer", "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_esc50.get_lr_scheduler"], ["", "", "def", "configure_optimizers", "(", "self", ")", ":", "\n", "# REQUIRED", "\n", "# can return multiple optimizers and learning_rate schedulers", "\n", "# (LBFGS it is automatically supported, no need for closure function)", "\n", "        ", "optimizer", "=", "get_optimizer", "(", "self", ".", "parameters", "(", ")", ")", "\n", "# torch.optim.Adam(self.parameters(), lr=self.config.lr)", "\n", "return", "{", "\n", "'optimizer'", ":", "optimizer", ",", "\n", "'lr_scheduler'", ":", "get_lr_scheduler", "(", "optimizer", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_esc50.M.configure_callbacks": [[224, 226], ["ex_esc50.get_extra_checkpoint_callback", "ex_esc50.get_extra_swa_callback"], "methods", ["home.repos.pwc.inspect_result.kkoutini_passt.None.ex_esc50.get_extra_checkpoint_callback", "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_esc50.get_extra_swa_callback"], ["", "def", "configure_callbacks", "(", "self", ")", ":", "\n", "        ", "return", "get_extra_checkpoint_callback", "(", ")", "+", "get_extra_swa_callback", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_esc50.default_conf": [[39, 64], ["os.environ.get().strip", "os.environ.get().strip", "os.environ.get().strip", "os.environ.get", "os.getpid", "sacred.config_helpers.DynamicIngredient", "dict", "sacred.config_helpers.DynamicIngredient", "sacred.config_helpers.DynamicIngredient", "os.environ.get", "os.environ.get", "os.environ.get", "os.environ.get().strip", "os.environ.get().strip", "os.environ.get", "os.environ.get"], "function", ["home.repos.pwc.inspect_result.kkoutini_passt.helpers.audiodatasets.ObjectCacher.get", "home.repos.pwc.inspect_result.kkoutini_passt.helpers.audiodatasets.ObjectCacher.get", "home.repos.pwc.inspect_result.kkoutini_passt.helpers.audiodatasets.ObjectCacher.get", "home.repos.pwc.inspect_result.kkoutini_passt.helpers.audiodatasets.ObjectCacher.get", "home.repos.pwc.inspect_result.kkoutini_passt.helpers.audiodatasets.ObjectCacher.get", "home.repos.pwc.inspect_result.kkoutini_passt.helpers.audiodatasets.ObjectCacher.get"], ["@", "ex", ".", "config", "\n", "def", "default_conf", "(", ")", ":", "\n", "    ", "cmd", "=", "\" \"", ".", "join", "(", "sys", ".", "argv", ")", "\n", "saque_cmd", "=", "os", ".", "environ", ".", "get", "(", "\"SAQUE_CMD\"", ",", "\"\"", ")", ".", "strip", "(", ")", "\n", "saque_id", "=", "os", ".", "environ", ".", "get", "(", "\"SAQUE_ID\"", ",", "\"\"", ")", ".", "strip", "(", ")", "\n", "slurm_job_id", "=", "os", ".", "environ", ".", "get", "(", "\"SLURM_JOB_ID\"", ",", "\"\"", ")", ".", "strip", "(", ")", "\n", "if", "os", ".", "environ", ".", "get", "(", "\"SLURM_ARRAY_JOB_ID\"", ",", "False", ")", ":", "\n", "        ", "slurm_job_id", "=", "os", ".", "environ", ".", "get", "(", "\"SLURM_ARRAY_JOB_ID\"", ",", "\"\"", ")", ".", "strip", "(", ")", "+", "\"_\"", "+", "os", ".", "environ", ".", "get", "(", "\"SLURM_ARRAY_TASK_ID\"", ",", "\n", "\"\"", ")", ".", "strip", "(", ")", "\n", "", "process_id", "=", "os", ".", "getpid", "(", ")", "\n", "models", "=", "{", "\n", "\"net\"", ":", "DynamicIngredient", "(", "\"models.passt.model_ing\"", ",", "n_classes", "=", "50", ",", "s_patchout_t", "=", "10", ",", "s_patchout_f", "=", "3", ")", ",", "\n", "\"mel\"", ":", "DynamicIngredient", "(", "\"models.preprocess.model_ing\"", ",", "\n", "instance_cmd", "=", "\"AugmentMelSTFT\"", ",", "\n", "n_mels", "=", "128", ",", "sr", "=", "32000", ",", "win_length", "=", "800", ",", "hopsize", "=", "320", ",", "n_fft", "=", "1024", ",", "freqm", "=", "48", ",", "\n", "timem", "=", "80", ",", "\n", "htk", "=", "False", ",", "fmin", "=", "0.0", ",", "fmax", "=", "None", ",", "norm", "=", "1", ",", "fmin_aug_range", "=", "10", ",", "\n", "fmax_aug_range", "=", "2000", ")", "\n", "}", "\n", "basedataset", "=", "DynamicIngredient", "(", "\"esc50.dataset.dataset\"", ")", "\n", "trainer", "=", "dict", "(", "max_epochs", "=", "10", ",", "gpus", "=", "1", ",", "weights_summary", "=", "'full'", ",", "benchmark", "=", "True", ",", "num_sanity_val_steps", "=", "0", ",", "\n", "reload_dataloaders_every_epoch", "=", "True", ")", "\n", "lr", "=", "0.00001", "\n", "use_mixup", "=", "True", "\n", "mixup_alpha", "=", "0.3", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_esc50.get_scheduler_lambda": [[70, 78], ["RuntimeError", "helpers.ramp.exp_warmup_linear_down", "helpers.ramp.cosine_cycle"], "function", ["home.repos.pwc.inspect_result.kkoutini_passt.helpers.ramp.exp_warmup_linear_down", "home.repos.pwc.inspect_result.kkoutini_passt.helpers.ramp.cosine_cycle"], ["@", "ex", ".", "command", "\n", "def", "get_scheduler_lambda", "(", "warm_up_len", "=", "5", ",", "ramp_down_start", "=", "50", ",", "ramp_down_len", "=", "50", ",", "last_lr_value", "=", "0.01", ",", "\n", "schedule_mode", "=", "\"exp_lin\"", ")", ":", "\n", "    ", "if", "schedule_mode", "==", "\"exp_lin\"", ":", "\n", "        ", "return", "exp_warmup_linear_down", "(", "warm_up_len", ",", "ramp_down_len", ",", "ramp_down_start", ",", "last_lr_value", ")", "\n", "", "if", "schedule_mode", "==", "\"cos_cyc\"", ":", "\n", "        ", "return", "cosine_cycle", "(", "warm_up_len", ",", "ramp_down_start", ",", "last_lr_value", ")", "\n", "", "raise", "RuntimeError", "(", "f\"schedule_mode={schedule_mode} Unknown for a lambda funtion.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_esc50.get_lr_scheduler": [[80, 85], ["RuntimeError", "torch.optim.lr_scheduler.LambdaLR", "ex_esc50.get_scheduler_lambda"], "function", ["home.repos.pwc.inspect_result.kkoutini_passt.None.ex_esc50.get_scheduler_lambda"], ["", "@", "ex", ".", "command", "\n", "def", "get_lr_scheduler", "(", "optimizer", ",", "schedule_mode", ")", ":", "\n", "    ", "if", "schedule_mode", "in", "{", "\"exp_lin\"", ",", "\"cos_cyc\"", "}", ":", "\n", "        ", "return", "torch", ".", "optim", ".", "lr_scheduler", ".", "LambdaLR", "(", "optimizer", ",", "get_scheduler_lambda", "(", ")", ")", "\n", "", "raise", "RuntimeError", "(", "f\"schedule_mode={schedule_mode} Unknown.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_esc50.get_optimizer": [[87, 93], ["torch.optim.Adam", "print", "torch.optim.AdamW"], "function", ["None"], ["", "@", "ex", ".", "command", "\n", "def", "get_optimizer", "(", "params", ",", "lr", ",", "adamw", "=", "True", ",", "weight_decay", "=", "0.0001", ")", ":", "\n", "    ", "if", "adamw", ":", "\n", "        ", "print", "(", "f\"\\nUsing adamw weight_decay={weight_decay}!\\n\"", ")", "\n", "return", "torch", ".", "optim", ".", "AdamW", "(", "params", ",", "lr", "=", "lr", ",", "weight_decay", "=", "weight_decay", ")", "\n", "", "return", "torch", ".", "optim", ".", "Adam", "(", "params", ",", "lr", "=", "lr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_esc50.get_dynamic_norm": [[228, 233], ["RuntimeError"], "function", ["None"], ["", "", "@", "ex", ".", "command", "\n", "def", "get_dynamic_norm", "(", "model", ",", "dyn_norm", "=", "False", ")", ":", "\n", "    ", "if", "not", "dyn_norm", ":", "\n", "        ", "return", "None", ",", "None", "\n", "", "raise", "RuntimeError", "(", "'no dynamic norm supported yet.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_esc50.get_extra_checkpoint_callback": [[235, 240], ["pytorch_lightning.callbacks.ModelCheckpoint"], "function", ["None"], ["", "@", "ex", ".", "command", "\n", "def", "get_extra_checkpoint_callback", "(", "save_last_n", "=", "None", ")", ":", "\n", "    ", "if", "save_last_n", "is", "None", ":", "\n", "        ", "return", "[", "]", "\n", "", "return", "[", "ModelCheckpoint", "(", "monitor", "=", "\"step\"", ",", "verbose", "=", "True", ",", "save_top_k", "=", "save_last_n", ",", "mode", "=", "'max'", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_esc50.get_extra_swa_callback": [[242, 250], ["print", "StochasticWeightAveraging"], "function", ["None"], ["", "@", "ex", ".", "command", "\n", "def", "get_extra_swa_callback", "(", "swa", "=", "True", ",", "swa_epoch_start", "=", "2", ",", "\n", "swa_freq", "=", "1", ")", ":", "\n", "    ", "if", "not", "swa", ":", "\n", "        ", "return", "[", "]", "\n", "", "print", "(", "\"\\n Using swa!\\n\"", ")", "\n", "from", "helpers", ".", "swa_callback", "import", "StochasticWeightAveraging", "\n", "return", "[", "StochasticWeightAveraging", "(", "swa_epoch_start", "=", "swa_epoch_start", ",", "swa_freq", "=", "swa_freq", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_esc50.main": [[252, 267], ["ex.get_trainer", "ex.get_train_dataloaders", "ex.get_val_dataloaders", "ex_esc50.M", "ex.get_trainer.fit"], "function", ["None"], ["", "@", "ex", ".", "command", "\n", "def", "main", "(", "_run", ",", "_config", ",", "_log", ",", "_rnd", ",", "_seed", ")", ":", "\n", "    ", "trainer", "=", "ex", ".", "get_trainer", "(", ")", "\n", "train_loader", "=", "ex", ".", "get_train_dataloaders", "(", ")", "\n", "val_loader", "=", "ex", ".", "get_val_dataloaders", "(", ")", "\n", "\n", "modul", "=", "M", "(", "ex", ")", "\n", "\n", "trainer", ".", "fit", "(", "\n", "modul", ",", "\n", "train_dataloader", "=", "train_loader", ",", "\n", "val_dataloaders", "=", "val_loader", ",", "\n", ")", "\n", "\n", "return", "{", "\"done\"", ":", "True", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_esc50.model_speed_test": [[269, 328], ["ex_esc50.M", "modul.cuda.cuda", "print", "print", "torch.ones().cuda", "torch.ones().cuda", "torch.cuda.amp.GradScaler", "torch.optim.SGD", "print", "torch.cuda.synchronize", "time.time", "range", "torch.cuda.synchronize", "time.time", "print", "torch.cuda.synchronize", "time.time", "print", "range", "torch.cuda.synchronize", "time.time", "print", "print", "net.parameters", "torch.cuda.amp.GradScaler.scale().backward", "torch.cuda.amp.GradScaler.step", "torch.cuda.amp.GradScaler.update", "torch.cuda.amp.GradScaler.scale().backward", "torch.cuda.amp.GradScaler.step", "torch.cuda.amp.GradScaler.update", "torch.ones", "torch.ones", "torch.cuda.amp.autocast", "net", "torch.nn.functional.binary_cross_entropy_with_logits().mean", "torch.cuda.amp.autocast", "net", "torch.nn.functional.binary_cross_entropy_with_logits().mean", "torch.cuda.amp.GradScaler.scale", "torch.cuda.amp.GradScaler.scale", "torch.nn.functional.binary_cross_entropy_with_logits", "torch.nn.functional.binary_cross_entropy_with_logits"], "function", ["None"], ["", "@", "ex", ".", "command", "\n", "def", "model_speed_test", "(", "_run", ",", "_config", ",", "_log", ",", "_rnd", ",", "_seed", ",", "speed_test_batch_size", "=", "100", ")", ":", "\n", "    ", "'''\n    Test training speed of a model\n    @param _run:\n    @param _config:\n    @param _log:\n    @param _rnd:\n    @param _seed:\n    @param speed_test_batch_size: the batch size during the test\n    @return:\n    '''", "\n", "\n", "modul", "=", "M", "(", "ex", ")", "\n", "modul", "=", "modul", ".", "cuda", "(", ")", "\n", "batch_size", "=", "speed_test_batch_size", "\n", "print", "(", "f\"\\nBATCH SIZE : {batch_size}\\n\"", ")", "\n", "test_length", "=", "100", "\n", "print", "(", "f\"\\ntest_length : {test_length}\\n\"", ")", "\n", "\n", "x", "=", "torch", ".", "ones", "(", "[", "batch_size", ",", "1", ",", "128", ",", "998", "]", ")", ".", "cuda", "(", ")", "\n", "target", "=", "torch", ".", "ones", "(", "[", "batch_size", ",", "527", "]", ")", ".", "cuda", "(", ")", "\n", "# one passe", "\n", "net", "=", "modul", ".", "net", "\n", "# net(x)", "\n", "scaler", "=", "torch", ".", "cuda", ".", "amp", ".", "GradScaler", "(", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "# net = torch.jit.trace(net,(x,))", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "net", ".", "parameters", "(", ")", ",", "lr", "=", "0.001", ")", "\n", "\n", "print", "(", "\"warmup\"", ")", "\n", "import", "time", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "t1", "=", "time", ".", "time", "(", ")", "\n", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "        ", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", ")", ":", "\n", "            ", "y_hat", ",", "embed", "=", "net", "(", "x", ")", "\n", "loss", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "y_hat", ",", "target", ",", "reduction", "=", "\"none\"", ")", ".", "mean", "(", ")", "\n", "", "scaler", ".", "scale", "(", "loss", ")", ".", "backward", "(", ")", "\n", "scaler", ".", "step", "(", "optimizer", ")", "\n", "scaler", ".", "update", "(", ")", "\n", "", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "t2", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "'warmup done:'", ",", "(", "t2", "-", "t1", ")", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "t1", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\"testing speed\"", ")", "\n", "\n", "for", "i", "in", "range", "(", "test_length", ")", ":", "\n", "        ", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", ")", ":", "\n", "            ", "y_hat", ",", "embed", "=", "net", "(", "x", ")", "\n", "loss", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "y_hat", ",", "target", ",", "reduction", "=", "\"none\"", ")", ".", "mean", "(", ")", "\n", "", "scaler", ".", "scale", "(", "loss", ")", ".", "backward", "(", ")", "\n", "scaler", ".", "step", "(", "optimizer", ")", "\n", "scaler", ".", "update", "(", ")", "\n", "", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "t2", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "'test done:'", ",", "(", "t2", "-", "t1", ")", ")", "\n", "print", "(", "\"average speed: \"", ",", "(", "test_length", "*", "batch_size", ")", "/", "(", "t2", "-", "t1", ")", ",", "\" specs/second\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_esc50.evaluate_only": [[330, 343], ["ex.get_trainer", "ex.get_train_dataloaders", "ex.get_val_dataloaders", "ex_esc50.M", "print", "ex.get_trainer.validate", "print", "print", "len"], "function", ["None"], ["", "@", "ex", ".", "command", "\n", "def", "evaluate_only", "(", "_run", ",", "_config", ",", "_log", ",", "_rnd", ",", "_seed", ")", ":", "\n", "# force overriding the config, not logged = not recommended", "\n", "    ", "trainer", "=", "ex", ".", "get_trainer", "(", ")", "\n", "train_loader", "=", "ex", ".", "get_train_dataloaders", "(", ")", "\n", "val_loader", "=", "ex", ".", "get_val_dataloaders", "(", ")", "\n", "modul", "=", "M", "(", "ex", ")", "\n", "modul", ".", "val_dataloader", "=", "None", "\n", "trainer", ".", "val_dataloaders", "=", "None", "\n", "print", "(", "f\"\\n\\nValidation len={len(val_loader)}\\n\"", ")", "\n", "res", "=", "trainer", ".", "validate", "(", "modul", ",", "val_dataloaders", "=", "val_loader", ")", "\n", "print", "(", "\"\\n\\n Validtaion:\"", ")", "\n", "print", "(", "res", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_esc50.test_loaders": [[345, 358], ["enumerate", "enumerate", "ex.datasets.training.get_iter", "print", "ex.datasets.test.get_iter", "print"], "function", ["None"], ["", "@", "ex", ".", "command", "\n", "def", "test_loaders", "(", ")", ":", "\n", "    ", "'''\n    get one sample from each loader for debbuging\n    @return:\n    '''", "\n", "for", "i", ",", "b", "in", "enumerate", "(", "ex", ".", "datasets", ".", "training", ".", "get_iter", "(", ")", ")", ":", "\n", "        ", "print", "(", "b", ")", "\n", "break", "\n", "\n", "", "for", "i", ",", "b", "in", "enumerate", "(", "ex", ".", "datasets", ".", "test", ".", "get_iter", "(", ")", ")", ":", "\n", "        ", "print", "(", "b", ")", "\n", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_esc50.set_default_json_pickle": [[360, 364], ["isinstance", "list"], "function", ["None"], ["", "", "def", "set_default_json_pickle", "(", "obj", ")", ":", "\n", "    ", "if", "isinstance", "(", "obj", ",", "set", ")", ":", "\n", "        ", "return", "list", "(", "obj", ")", "\n", "", "raise", "TypeError", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_esc50.multiprocessing_run": [[367, 387], ["print", "print", "str", "print", "ex.run_commandline", "os.getpid", "os.environ[].split", "print", "ex_esc50.main", "os.getpid"], "function", ["home.repos.pwc.inspect_result.kkoutini_passt.None.ex_esc50.main"], ["", "def", "multiprocessing_run", "(", "rank", ",", "word_size", ")", ":", "\n", "    ", "print", "(", "\"rank \"", ",", "rank", ",", "os", ".", "getpid", "(", ")", ")", "\n", "print", "(", "\"word_size \"", ",", "word_size", ")", "\n", "os", ".", "environ", "[", "'NODE_RANK'", "]", "=", "str", "(", "rank", ")", "\n", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", ".", "split", "(", "\",\"", ")", "[", "rank", "]", "\n", "argv", "=", "sys", ".", "argv", "\n", "if", "rank", "!=", "0", ":", "\n", "        ", "print", "(", "f\"Unobserved {os.getpid()} with rank {rank}\"", ")", "\n", "argv", "=", "argv", "+", "[", "\"-u\"", "]", "# only rank 0 is observed", "\n", "", "if", "\"with\"", "not", "in", "argv", ":", "\n", "        ", "argv", "=", "argv", "+", "[", "\"with\"", "]", "\n", "\n", "", "argv", "=", "argv", "+", "[", "f\"trainer.num_nodes={word_size}\"", ",", "f\"trainer.accelerator=ddp\"", "]", "\n", "print", "(", "argv", ")", "\n", "\n", "@", "ex", ".", "main", "\n", "def", "default_command", "(", ")", ":", "\n", "        ", "return", "main", "(", ")", "\n", "\n", "", "ex", ".", "run_commandline", "(", "argv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.None.ex_esc50.default_command": [[418, 421], ["ex_esc50.main"], "function", ["home.repos.pwc.inspect_result.kkoutini_passt.None.ex_esc50.main"], ["@", "ex", ".", "automain", "\n", "def", "default_command", "(", ")", ":", "\n", "    ", "return", "main", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.kkoutini_passt.None.config_updates.add_configs": [[4, 252], ["dict", "dict", "dict", "dict", "ex.datasets.training.get_iter", "time.time", "print", "enumerate", "time.time", "print", "time.time", "print", "enumerate", "time.time", "print", "sacred.config_helpers.DynamicIngredient", "sacred.config_helpers.DynamicIngredient", "sacred.config_helpers.DynamicIngredient", "sacred.config_helpers.DynamicIngredient", "sacred.config_helpers.DynamicIngredient", "sacred.config_helpers.DynamicIngredient", "sacred.config_helpers.DynamicIngredient", "sacred.config_helpers.DynamicIngredient", "sacred.config_helpers.DynamicIngredient", "sacred.config_helpers.DynamicIngredient", "sacred.config_helpers.DynamicIngredient", "sacred.config_helpers.DynamicIngredient", "sacred.config_helpers.DynamicIngredient", "sacred.config_helpers.DynamicIngredient", "sacred.config_helpers.DynamicIngredient", "sacred.config_helpers.DynamicIngredient", "sacred.config_helpers.DynamicIngredient", "dict", "print", "print", "len", "len"], "function", ["None"], ["def", "add_configs", "(", "ex", ")", ":", "\n", "    ", "'''\n    This functions add generic configuration for the experiments, such as mix-up, architectures, etc...\n    @param ex: Ba3l Experiment\n    @return:\n    '''", "\n", "\n", "@", "ex", ".", "named_config", "\n", "def", "nomixup", "(", ")", ":", "\n", "        ", "'Don\\'t apply mix-up (spectrogram level).'", "\n", "use_mixup", "=", "False", "\n", "mixup_alpha", "=", "0.3", "\n", "\n", "", "@", "ex", ".", "named_config", "\n", "def", "mixup", "(", ")", ":", "\n", "        ", "' Apply mix-up (spectrogram level).'", "\n", "use_mixup", "=", "True", "\n", "mixup_alpha", "=", "0.3", "\n", "\n", "", "@", "ex", ".", "named_config", "\n", "def", "mini_train", "(", ")", ":", "\n", "        ", "'limit training/validation to 5 batches for debbuging.'", "\n", "trainer", "=", "dict", "(", "limit_train_batches", "=", "5", ",", "limit_val_batches", "=", "5", ")", "\n", "\n", "", "@", "ex", ".", "named_config", "\n", "def", "passt", "(", ")", ":", "\n", "        ", "'use PaSST model'", "\n", "models", "=", "{", "\n", "\"net\"", ":", "DynamicIngredient", "(", "\"models.passt.model_ing\"", ")", "\n", "}", "\n", "\n", "", "@", "ex", ".", "named_config", "\n", "def", "passt_s_20sec", "(", ")", ":", "\n", "        ", "'use PaSST model pretrained on Audioset (with SWA) ap=476; time encodings for up to 20 seconds'", "\n", "# python ex_audioset.py evaluate_only with passt_s_ap476", "\n", "models", "=", "{", "\n", "\"net\"", ":", "DynamicIngredient", "(", "\"models.passt.model_ing\"", ",", "arch", "=", "\"passt_s_f128_20sec_p16_s10_ap474\"", ",", "fstride", "=", "10", ",", "\n", "tstride", "=", "10", ",", "input_tdim", "=", "2000", ")", "\n", "}", "\n", "basedataset", "=", "dict", "(", "clip_length", "=", "20", ")", "\n", "\n", "", "@", "ex", ".", "named_config", "\n", "def", "passt_s_30sec", "(", ")", ":", "\n", "        ", "'use PaSST model pretrained on Audioset (with SWA) ap=476; time encodings for up to 30 seconds'", "\n", "# python ex_audioset.py evaluate_only with passt_s_ap476", "\n", "models", "=", "{", "\n", "\"net\"", ":", "DynamicIngredient", "(", "\"models.passt.model_ing\"", ",", "arch", "=", "\"passt_s_f128_30sec_p16_s10_ap473\"", ",", "fstride", "=", "10", ",", "\n", "tstride", "=", "10", ",", "input_tdim", "=", "3000", ")", "\n", "}", "\n", "basedataset", "=", "dict", "(", "clip_length", "=", "20", ")", "\n", "\n", "", "@", "ex", ".", "named_config", "\n", "def", "passt_s_ap476", "(", ")", ":", "\n", "        ", "'use PaSST model pretrained on Audioset (with SWA) ap=476'", "\n", "# python ex_audioset.py evaluate_only with passt_s_ap476", "\n", "models", "=", "{", "\n", "\"net\"", ":", "DynamicIngredient", "(", "\"models.passt.model_ing\"", ",", "arch", "=", "\"passt_s_swa_p16_128_ap476\"", ",", "fstride", "=", "10", ",", "\n", "tstride", "=", "10", ")", "\n", "}", "\n", "\n", "", "@", "ex", ".", "named_config", "\n", "def", "passt_s_ap4763", "(", ")", ":", "\n", "        ", "'use PaSST model pretrained on Audioset (with SWA) ap=4763'", "\n", "# test with: python ex_audioset.py evaluate_only with passt_s_ap4763", "\n", "models", "=", "{", "\n", "\"net\"", ":", "DynamicIngredient", "(", "\"models.passt.model_ing\"", ",", "arch", "=", "\"passt_s_swa_p16_128_ap4763\"", ",", "fstride", "=", "10", ",", "\n", "tstride", "=", "10", ")", "\n", "}", "\n", "\n", "", "@", "ex", ".", "named_config", "\n", "def", "passt_s_ap472", "(", ")", ":", "\n", "        ", "'use PaSST model pretrained on Audioset (no SWA) ap=472'", "\n", "# test with: python ex_audioset.py evaluate_only with passt_s_ap472", "\n", "models", "=", "{", "\n", "\"net\"", ":", "DynamicIngredient", "(", "\"models.passt.model_ing\"", ",", "arch", "=", "\"passt_s_p16_128_ap472\"", ",", "fstride", "=", "10", ",", "\n", "tstride", "=", "10", ")", "\n", "}", "\n", "\n", "", "@", "ex", ".", "named_config", "\n", "def", "passt_s_p16_s16_128_ap468", "(", ")", ":", "\n", "        ", "'use PaSST model pretrained on Audioset (no SWA) ap=468 NO overlap'", "\n", "# test with: python ex_audioset.py evaluate_only with passt_s_p16_s16_128_ap468", "\n", "models", "=", "{", "\n", "\"net\"", ":", "DynamicIngredient", "(", "\"models.passt.model_ing\"", ",", "arch", "=", "\"passt_s_p16_s16_128_ap468\"", ",", "fstride", "=", "16", ",", "\n", "tstride", "=", "16", ")", "\n", "}", "\n", "\n", "", "@", "ex", ".", "named_config", "\n", "def", "passt_s_swa_p16_s16_128_ap473", "(", ")", ":", "\n", "        ", "'use PaSST model pretrained on Audioset (SWA) ap=473 NO overlap'", "\n", "# test with: python ex_audioset.py evaluate_only with passt_s_swa_p16_s16_128_ap473", "\n", "models", "=", "{", "\n", "\"net\"", ":", "DynamicIngredient", "(", "\"models.passt.model_ing\"", ",", "arch", "=", "\"passt_s_swa_p16_s16_128_ap473\"", ",", "fstride", "=", "16", ",", "\n", "tstride", "=", "16", ")", "\n", "}", "\n", "\n", "", "@", "ex", ".", "named_config", "\n", "def", "passt_s_swa_p16_s14_128_ap471", "(", ")", ":", "\n", "        ", "'use PaSST model pretrained on Audioset stride=14 (SWA) ap=471 '", "\n", "# test with: python ex_audioset.py evaluate_only with passt_s_swa_p16_s14_128_ap471", "\n", "models", "=", "{", "\n", "\"net\"", ":", "DynamicIngredient", "(", "\"models.passt.model_ing\"", ",", "arch", "=", "\"passt_s_swa_p16_s14_128_ap471\"", ",", "fstride", "=", "14", ",", "\n", "tstride", "=", "14", ")", "\n", "}", "\n", "\n", "", "@", "ex", ".", "named_config", "\n", "def", "passt_s_p16_s14_128_ap469", "(", ")", ":", "\n", "        ", "'use PaSST model pretrained on Audioset stride=14 (No SWA) ap=469 '", "\n", "# test with: python ex_audioset.py evaluate_only with passt_s_p16_s14_128_ap469", "\n", "models", "=", "{", "\n", "\"net\"", ":", "DynamicIngredient", "(", "\"models.passt.model_ing\"", ",", "arch", "=", "\"passt_s_p16_s14_128_ap469\"", ",", "fstride", "=", "14", ",", "\n", "tstride", "=", "14", ")", "\n", "}", "\n", "\n", "", "@", "ex", ".", "named_config", "\n", "def", "passt_s_swa_p16_s12_128_ap473", "(", ")", ":", "\n", "        ", "'use PaSST model pretrained on Audioset stride=12 (SWA) ap=473 '", "\n", "# test with: python ex_audioset.py evaluate_only with passt_s_swa_p16_s12_128_ap473", "\n", "models", "=", "{", "\n", "\"net\"", ":", "DynamicIngredient", "(", "\"models.passt.model_ing\"", ",", "arch", "=", "\"passt_s_swa_p16_s12_128_ap473\"", ",", "fstride", "=", "12", ",", "\n", "tstride", "=", "12", ")", "\n", "}", "\n", "\n", "", "@", "ex", ".", "named_config", "\n", "def", "passt_s_p16_s12_128_ap470", "(", ")", ":", "\n", "        ", "'use PaSST model pretrained on Audioset stride=12 (No SWA) ap=4670 '", "\n", "# test with: python ex_audioset.py evaluate_only with passt_s_p16_s12_128_ap470", "\n", "models", "=", "{", "\n", "\"net\"", ":", "DynamicIngredient", "(", "\"models.passt.model_ing\"", ",", "arch", "=", "\"passt_s_p16_s12_128_ap470\"", ",", "fstride", "=", "12", ",", "\n", "tstride", "=", "12", ")", "\n", "}", "\n", "\n", "", "@", "ex", ".", "named_config", "\n", "def", "ensemble_s10", "(", ")", ":", "\n", "        ", "'use ensemble of PaSST models pretrained on Audioset  with S10 mAP=.4864'", "\n", "# test with: python ex_audioset.py evaluate_only with  trainer.precision=16 ensemble_s10", "\n", "models", "=", "{", "\n", "\"net\"", ":", "DynamicIngredient", "(", "\"models.passt.model_ing\"", ",", "arch", "=", "\"ensemble_s10\"", ",", "fstride", "=", "None", ",", "\n", "tstride", "=", "None", ",", "instance_cmd", "=", "\"get_ensemble_model\"", ",", "\n", "# don't call get_model but rather get_ensemble_model", "\n", "arch_list", "=", "[", "\n", "(", "\"passt_s_swa_p16_128_ap476\"", ",", "10", ",", "10", ")", ",", "\n", "(", "\"passt_s_swa_p16_128_ap4761\"", ",", "10", ",", "10", ")", ",", "\n", "(", "\"passt_s_p16_128_ap472\"", ",", "10", ",", "10", ")", ",", "\n", "]", "\n", ")", "\n", "}", "\n", "\n", "", "@", "ex", ".", "named_config", "\n", "def", "ensemble_many", "(", ")", ":", "\n", "        ", "'use ensemble of PaSST models pretrained on Audioset  with different strides mAP=.4956'", "\n", "# test with: python ex_audioset.py evaluate_only with  trainer.precision=16 ensemble_many", "\n", "models", "=", "{", "\n", "\"net\"", ":", "DynamicIngredient", "(", "\"models.passt.model_ing\"", ",", "arch", "=", "\"ensemble_many\"", ",", "fstride", "=", "None", ",", "\n", "tstride", "=", "None", ",", "instance_cmd", "=", "\"get_ensemble_model\"", ",", "\n", "# don't call get_model but rather get_ensemble_model", "\n", "arch_list", "=", "[", "\n", "(", "\"passt_s_swa_p16_128_ap476\"", ",", "10", ",", "10", ")", ",", "\n", "(", "\"passt_s_swa_p16_128_ap4761\"", ",", "10", ",", "10", ")", ",", "\n", "(", "\"passt_s_p16_128_ap472\"", ",", "10", ",", "10", ")", ",", "\n", "(", "\"passt_s_p16_s12_128_ap470\"", ",", "12", ",", "12", ")", ",", "\n", "(", "\"passt_s_swa_p16_s12_128_ap473\"", ",", "12", ",", "12", ")", ",", "\n", "(", "\"passt_s_p16_s14_128_ap469\"", ",", "14", ",", "14", ")", ",", "\n", "(", "\"passt_s_swa_p16_s14_128_ap471\"", ",", "14", ",", "14", ")", ",", "\n", "(", "\"passt_s_swa_p16_s16_128_ap473\"", ",", "16", ",", "16", ")", ",", "\n", "(", "\"passt_s_p16_s16_128_ap468\"", ",", "16", ",", "16", ")", ",", "\n", "]", "\n", ")", "\n", "}", "\n", "\n", "", "@", "ex", ".", "named_config", "\n", "def", "ensemble_4", "(", ")", ":", "\n", "        ", "'use ensemble of PaSST models pretrained on Audioset  with different strides mAP=.4926'", "\n", "# test with: python ex_audioset.py evaluate_only with  trainer.precision=16 ensemble_many", "\n", "models", "=", "{", "\n", "\"net\"", ":", "DynamicIngredient", "(", "\"models.passt.model_ing\"", ",", "arch", "=", "\"ensemble_many\"", ",", "fstride", "=", "None", ",", "\n", "tstride", "=", "None", ",", "instance_cmd", "=", "\"get_ensemble_model\"", ",", "\n", "# don't call get_model but rather get_ensemble_model", "\n", "arch_list", "=", "[", "\n", "(", "\"passt_s_swa_p16_128_ap476\"", ",", "10", ",", "10", ")", ",", "\n", "(", "\"passt_s_swa_p16_s12_128_ap473\"", ",", "12", ",", "12", ")", ",", "\n", "(", "\"passt_s_swa_p16_s14_128_ap471\"", ",", "14", ",", "14", ")", ",", "\n", "(", "\"passt_s_swa_p16_s16_128_ap473\"", ",", "16", ",", "16", ")", ",", "\n", "]", "\n", ")", "\n", "}", "\n", "\n", "", "@", "ex", ".", "named_config", "\n", "def", "ensemble_5", "(", ")", ":", "\n", "        ", "'use ensemble of PaSST models pretrained on Audioset  with different strides mAP=.49459'", "\n", "# test with: python ex_audioset.py evaluate_only with  trainer.precision=16 ensemble_many", "\n", "models", "=", "{", "\n", "\"net\"", ":", "DynamicIngredient", "(", "\"models.passt.model_ing\"", ",", "arch", "=", "\"ensemble_many\"", ",", "fstride", "=", "None", ",", "\n", "tstride", "=", "None", ",", "instance_cmd", "=", "\"get_ensemble_model\"", ",", "\n", "# don't call get_model but rather get_ensemble_model", "\n", "arch_list", "=", "[", "\n", "(", "\"passt_s_swa_p16_128_ap476\"", ",", "10", ",", "10", ")", ",", "\n", "(", "\"passt_s_swa_p16_128_ap4761\"", ",", "10", ",", "10", ")", ",", "\n", "(", "\"passt_s_swa_p16_s12_128_ap473\"", ",", "12", ",", "12", ")", ",", "\n", "(", "\"passt_s_swa_p16_s14_128_ap471\"", ",", "14", ",", "14", ")", ",", "\n", "(", "\"passt_s_swa_p16_s16_128_ap473\"", ",", "16", ",", "16", ")", ",", "\n", "]", "\n", ")", "\n", "}", "\n", "\n", "", "@", "ex", ".", "named_config", "\n", "def", "ensemble_s16_14", "(", ")", ":", "\n", "        ", "'use ensemble of two PaSST models pretrained on Audioset  with stride 16 and 14 mAP=.48579'", "\n", "# test with: python ex_audioset.py evaluate_only with  trainer.precision=16 ensemble_s16_14", "\n", "models", "=", "{", "\n", "\"net\"", ":", "DynamicIngredient", "(", "\"models.passt.model_ing\"", ",", "arch", "=", "\"ensemble_s16\"", ",", "fstride", "=", "None", ",", "\n", "tstride", "=", "None", ",", "instance_cmd", "=", "\"get_ensemble_model\"", ",", "\n", "# don't call get_model but rather get_ensemble_model", "\n", "arch_list", "=", "[", "\n", "(", "\"passt_s_swa_p16_s14_128_ap471\"", ",", "14", ",", "14", ")", ",", "\n", "(", "\"passt_s_swa_p16_s16_128_ap473\"", ",", "16", ",", "16", ")", ",", "\n", "]", "\n", ")", "\n", "}", "\n", "\n", "", "@", "ex", ".", "named_config", "\n", "def", "dynamic_roll", "(", ")", ":", "\n", "# dynamically roll the spectrograms/waveforms", "\n", "# updates the dataset config", "\n", "        ", "basedataset", "=", "dict", "(", "roll", "=", "True", ",", "roll_conf", "=", "dict", "(", "axis", "=", "1", ",", "shift_range", "=", "10000", ")", "\n", ")", "\n", "\n", "# extra commands", "\n", "\n", "", "@", "ex", ".", "command", "\n", "def", "test_loaders_train_speed", "(", ")", ":", "\n", "# test how fast data is being loaded from the data loaders.", "\n", "        ", "itr", "=", "ex", ".", "datasets", ".", "training", ".", "get_iter", "(", ")", "\n", "import", "time", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\"hello\"", ")", "\n", "for", "i", ",", "b", "in", "enumerate", "(", "itr", ")", ":", "\n", "            ", "if", "i", "%", "20", "==", "0", ":", "\n", "                ", "print", "(", "f\"{i}/{len(itr)}\"", ",", "end", "=", "\"\\r\"", ")", "\n", "", "", "end", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\"totoal time:\"", ",", "end", "-", "start", ")", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\"retry:\"", ")", "\n", "for", "i", ",", "b", "in", "enumerate", "(", "itr", ")", ":", "\n", "            ", "if", "i", "%", "20", "==", "0", ":", "\n", "                ", "print", "(", "f\"{i}/{len(itr)}\"", ",", "end", "=", "\"\\r\"", ")", "\n", "", "", "end", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\"totoal time:\"", ",", "end", "-", "start", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kkoutini_passt.models.preprocess.AugmentMelSTFT.__init__": [[20, 55], ["torch.nn.Module.__init__", "torch.nn.Module.__init__", "torch.nn.Module.__init__", "torch.nn.Module.__init__", "preprocess.AugmentMelSTFT.register_buffer", "preprocess.AugmentMelSTFT.register_buffer", "print", "torch.hann_window", "torch.hann_window", "torch.hann_window", "torch.hann_window", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Identity", "torchaudio.transforms.FrequencyMasking", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Identity", "torchaudio.transforms.TimeMasking"], "methods", ["home.repos.pwc.inspect_result.kkoutini_passt.audioset.dataset.DistributedSamplerWrapper.__init__", "home.repos.pwc.inspect_result.kkoutini_passt.audioset.dataset.DistributedSamplerWrapper.__init__", "home.repos.pwc.inspect_result.kkoutini_passt.audioset.dataset.DistributedSamplerWrapper.__init__", "home.repos.pwc.inspect_result.kkoutini_passt.audioset.dataset.DistributedSamplerWrapper.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_mels", "=", "128", ",", "sr", "=", "32000", ",", "win_length", "=", "800", ",", "hopsize", "=", "320", ",", "n_fft", "=", "1024", ",", "freqm", "=", "48", ",", "timem", "=", "192", ",", "\n", "htk", "=", "False", ",", "fmin", "=", "0.0", ",", "fmax", "=", "None", ",", "norm", "=", "1", ",", "fmin_aug_range", "=", "1", ",", "fmax_aug_range", "=", "1000", ")", ":", "\n", "        ", "torch", ".", "nn", ".", "Module", ".", "__init__", "(", "self", ")", "\n", "# adapted from: https://github.com/CPJKU/kagglebirds2020/commit/70f8308b39011b09d41eb0f4ace5aa7d2b0e806e", "\n", "# Similar config to the spectrograms used in AST: https://github.com/YuanGongND/ast", "\n", "\n", "self", ".", "win_length", "=", "win_length", "\n", "self", ".", "n_mels", "=", "n_mels", "\n", "self", ".", "n_fft", "=", "n_fft", "\n", "self", ".", "sr", "=", "sr", "\n", "self", ".", "htk", "=", "htk", "\n", "self", ".", "fmin", "=", "fmin", "\n", "if", "fmax", "is", "None", ":", "\n", "            ", "fmax", "=", "sr", "//", "2", "-", "fmax_aug_range", "//", "2", "\n", "print", "(", "f\"Warning: FMAX is None setting to {fmax} \"", ")", "\n", "", "self", ".", "fmax", "=", "fmax", "\n", "self", ".", "norm", "=", "norm", "\n", "self", ".", "hopsize", "=", "hopsize", "\n", "self", ".", "register_buffer", "(", "'window'", ",", "\n", "torch", ".", "hann_window", "(", "win_length", ",", "periodic", "=", "False", ")", ",", "\n", "persistent", "=", "False", ")", "\n", "assert", "fmin_aug_range", ">=", "1", ",", "f\"fmin_aug_range={fmin_aug_range} should be >=1; 1 means no augmentation\"", "\n", "assert", "fmin_aug_range", ">=", "1", ",", "f\"fmax_aug_range={fmax_aug_range} should be >=1; 1 means no augmentation\"", "\n", "self", ".", "fmin_aug_range", "=", "fmin_aug_range", "\n", "self", ".", "fmax_aug_range", "=", "fmax_aug_range", "\n", "\n", "self", ".", "register_buffer", "(", "\"preemphasis_coefficient\"", ",", "torch", ".", "as_tensor", "(", "[", "[", "[", "-", ".97", ",", "1", "]", "]", "]", ")", ",", "persistent", "=", "False", ")", "\n", "if", "freqm", "==", "0", ":", "\n", "            ", "self", ".", "freqm", "=", "torch", ".", "nn", ".", "Identity", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "freqm", "=", "torchaudio", ".", "transforms", ".", "FrequencyMasking", "(", "freqm", ",", "iid_masks", "=", "True", ")", "\n", "", "if", "timem", "==", "0", ":", "\n", "            ", "self", ".", "timem", "=", "torch", ".", "nn", ".", "Identity", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "timem", "=", "torchaudio", ".", "transforms", ".", "TimeMasking", "(", "timem", ",", "iid_masks", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.models.preprocess.AugmentMelSTFT.forward": [[57, 87], ["torch.functional.conv1d().squeeze", "torch.functional.conv1d().squeeze", "torch.stft", "torch.stft", "torch.stft", "torch.stft", "torchaudio.compliance.kaldi.get_mel_banks", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.randint().item", "torch.randint().item", "torch.randint().item", "torch.randint().item", "torch.randint().item", "torch.randint().item", "torch.randint().item", "torch.randint().item", "torch.nn.functional.pad", "torch.nn.functional.pad", "torch.nn.functional.pad", "torch.nn.functional.pad", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "preprocess.AugmentMelSTFT.freqm", "preprocess.AugmentMelSTFT.timem", "torch.functional.conv1d", "torch.functional.conv1d", "torch.stft.unsqueeze", "torch.stft.unsqueeze", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "x", "=", "nn", ".", "functional", ".", "conv1d", "(", "x", ".", "unsqueeze", "(", "1", ")", ",", "self", ".", "preemphasis_coefficient", ")", ".", "squeeze", "(", "1", ")", "\n", "x", "=", "torch", ".", "stft", "(", "x", ",", "self", ".", "n_fft", ",", "hop_length", "=", "self", ".", "hopsize", ",", "win_length", "=", "self", ".", "win_length", ",", "\n", "center", "=", "True", ",", "normalized", "=", "False", ",", "window", "=", "self", ".", "window", ",", "return_complex", "=", "False", ")", "\n", "x", "=", "(", "x", "**", "2", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "# power mag", "\n", "fmin", "=", "self", ".", "fmin", "+", "torch", ".", "randint", "(", "self", ".", "fmin_aug_range", ",", "(", "1", ",", ")", ")", ".", "item", "(", ")", "\n", "fmax", "=", "self", ".", "fmax", "+", "self", ".", "fmax_aug_range", "//", "2", "-", "torch", ".", "randint", "(", "self", ".", "fmax_aug_range", ",", "(", "1", ",", ")", ")", ".", "item", "(", ")", "\n", "# don't augment eval data", "\n", "if", "not", "self", ".", "training", ":", "\n", "            ", "fmin", "=", "self", ".", "fmin", "\n", "fmax", "=", "self", ".", "fmax", "\n", "\n", "\n", "", "mel_basis", ",", "_", "=", "torchaudio", ".", "compliance", ".", "kaldi", ".", "get_mel_banks", "(", "self", ".", "n_mels", ",", "self", ".", "n_fft", ",", "self", ".", "sr", ",", "\n", "fmin", ",", "fmax", ",", "vtln_low", "=", "100.0", ",", "vtln_high", "=", "-", "500.", ",", "vtln_warp_factor", "=", "1.0", ")", "\n", "mel_basis", "=", "torch", ".", "as_tensor", "(", "torch", ".", "nn", ".", "functional", ".", "pad", "(", "mel_basis", ",", "(", "0", ",", "1", ")", ",", "mode", "=", "'constant'", ",", "value", "=", "0", ")", ",", "\n", "device", "=", "x", ".", "device", ")", "\n", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", "enabled", "=", "False", ")", ":", "\n", "            ", "melspec", "=", "torch", ".", "matmul", "(", "mel_basis", ",", "x", ")", "\n", "\n", "", "melspec", "=", "(", "melspec", "+", "0.00001", ")", ".", "log", "(", ")", "\n", "\n", "if", "self", ".", "training", ":", "\n", "            ", "melspec", "=", "self", ".", "freqm", "(", "melspec", ")", "\n", "melspec", "=", "self", ".", "timem", "(", "melspec", ")", "\n", "\n", "", "melspec", "=", "(", "melspec", "+", "4.5", ")", "/", "5.", "# fast normalization", "\n", "\n", "return", "melspec", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.models.preprocess.AugmentMelSTFT.extra_repr": [[88, 91], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "return", "'winsize={}, hopsize={}'", ".", "format", "(", "self", ".", "win_length", ",", "\n", "self", ".", "hopsize", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.models.passt.Mlp.__init__": [[256, 264], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "act_layer", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.kkoutini_passt.audioset.dataset.DistributedSamplerWrapper.__init__"], ["def", "__init__", "(", "self", ",", "in_features", ",", "hidden_features", "=", "None", ",", "out_features", "=", "None", ",", "act_layer", "=", "nn", ".", "GELU", ",", "drop", "=", "0.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "out_features", "=", "out_features", "or", "in_features", "\n", "hidden_features", "=", "hidden_features", "or", "in_features", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "in_features", ",", "hidden_features", ")", "\n", "self", ".", "act", "=", "act_layer", "(", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "hidden_features", ",", "out_features", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "drop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.models.passt.Mlp.forward": [[265, 272], ["passt.Mlp.fc1", "passt.Mlp.act", "passt.Mlp.drop", "passt.Mlp.fc2", "passt.Mlp.drop"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "self", ".", "act", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.models.passt.PatchEmbed.__init__": [[281, 296], ["torch.Module.__init__", "timm.models.layers.helpers.to_2tuple", "timm.models.layers.helpers.to_2tuple", "timm.models.layers.helpers.to_2tuple", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.Identity", "torch.Identity", "torch.Identity"], "methods", ["home.repos.pwc.inspect_result.kkoutini_passt.audioset.dataset.DistributedSamplerWrapper.__init__"], ["def", "__init__", "(", "self", ",", "img_size", "=", "224", ",", "patch_size", "=", "16", ",", "stride", "=", "16", ",", "in_chans", "=", "3", ",", "embed_dim", "=", "768", ",", "norm_layer", "=", "None", ",", "\n", "flatten", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "img_size", "=", "to_2tuple", "(", "img_size", ")", "\n", "patch_size", "=", "to_2tuple", "(", "patch_size", ")", "\n", "stride", "=", "to_2tuple", "(", "stride", ")", "\n", "self", ".", "img_size", "=", "img_size", "\n", "self", ".", "patch_size", "=", "patch_size", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "grid_size", "=", "(", "img_size", "[", "0", "]", "//", "stride", "[", "0", "]", ",", "img_size", "[", "1", "]", "//", "stride", "[", "1", "]", ")", "\n", "self", ".", "num_patches", "=", "self", ".", "grid_size", "[", "0", "]", "*", "self", ".", "grid_size", "[", "1", "]", "\n", "self", ".", "flatten", "=", "flatten", "\n", "self", ".", "embed_dim", "=", "embed_dim", "\n", "self", ".", "proj", "=", "nn", ".", "Conv2d", "(", "in_chans", ",", "embed_dim", ",", "kernel_size", "=", "patch_size", ",", "stride", "=", "stride", ")", "\n", "self", ".", "norm", "=", "norm_layer", "(", "embed_dim", ")", "if", "norm_layer", "else", "nn", ".", "Identity", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.models.passt.PatchEmbed.forward": [[297, 308], ["passt.PatchEmbed.proj", "passt.PatchEmbed.norm", "warnings.warn", "x.flatten().transpose.flatten().transpose.flatten().transpose", "print", "x.flatten().transpose.flatten().transpose.size", "x.flatten().transpose.flatten().transpose.flatten"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "B", ",", "C", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "if", "not", "(", "H", "==", "self", ".", "img_size", "[", "0", "]", "and", "W", "==", "self", ".", "img_size", "[", "1", "]", ")", ":", "\n", "            ", "warnings", ".", "warn", "(", "f\"Input image size ({H}*{W}) doesn't match model ({self.img_size[0]}*{self.img_size[1]}).\"", ")", "\n", "# to do maybe replace weights", "\n", "", "x", "=", "self", ".", "proj", "(", "x", ")", "\n", "if", "self", ".", "flatten", ":", "\n", "            ", "x", "=", "x", ".", "flatten", "(", "2", ")", ".", "transpose", "(", "1", ",", "2", ")", "# BCHW -> BNC", "\n", "", "x", "=", "self", ".", "norm", "(", "x", ")", "\n", "if", "first_RUN", ":", "print", "(", "\"self.norm(x)\"", ",", "x", ".", "size", "(", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.models.passt.Attention.__init__": [[311, 321], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.kkoutini_passt.audioset.dataset.DistributedSamplerWrapper.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "num_heads", "=", "8", ",", "qkv_bias", "=", "False", ",", "attn_drop", "=", "0.", ",", "proj_drop", "=", "0.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "head_dim", "=", "dim", "//", "num_heads", "\n", "self", ".", "scale", "=", "head_dim", "**", "-", "0.5", "\n", "\n", "self", ".", "qkv", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", "*", "3", ",", "bias", "=", "qkv_bias", ")", "\n", "self", ".", "attn_drop", "=", "nn", ".", "Dropout", "(", "attn_drop", ")", "\n", "self", ".", "proj", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ")", "\n", "self", ".", "proj_drop", "=", "nn", ".", "Dropout", "(", "proj_drop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.models.passt.Attention.forward": [[322, 335], ["passt.Attention.qkv().reshape().permute", "passt.Attention.softmax", "passt.Attention.attn_drop", "passt.Attention.proj", "passt.Attention.proj_drop", "passt.Attention.qkv().reshape", "k.transpose", "passt.Attention.qkv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "B", ",", "N", ",", "C", "=", "x", ".", "shape", "\n", "qkv", "=", "self", ".", "qkv", "(", "x", ")", ".", "reshape", "(", "B", ",", "N", ",", "3", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "2", ",", "0", ",", "3", ",", "1", ",", "4", ")", "\n", "q", ",", "k", ",", "v", "=", "qkv", "[", "0", "]", ",", "qkv", "[", "1", "]", ",", "qkv", "[", "2", "]", "# make torchscript happy (cannot use tensor as tuple)", "\n", "\n", "attn", "=", "(", "q", "@", "k", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", "*", "self", ".", "scale", "\n", "attn", "=", "attn", ".", "softmax", "(", "dim", "=", "-", "1", ")", "\n", "attn", "=", "self", ".", "attn_drop", "(", "attn", ")", "\n", "\n", "x", "=", "(", "attn", "@", "v", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "B", ",", "N", ",", "C", ")", "\n", "x", "=", "self", ".", "proj", "(", "x", ")", "\n", "x", "=", "self", ".", "proj_drop", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.models.passt.Block.__init__": [[339, 349], ["torch.Module.__init__", "norm_layer", "passt.Attention", "norm_layer", "int", "passt.Mlp", "helpers.vit_helpers.DropPath", "torch.Identity", "torch.Identity", "torch.Identity"], "methods", ["home.repos.pwc.inspect_result.kkoutini_passt.audioset.dataset.DistributedSamplerWrapper.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "num_heads", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "drop", "=", "0.", ",", "attn_drop", "=", "0.", ",", "\n", "drop_path", "=", "0.", ",", "act_layer", "=", "nn", ".", "GELU", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm1", "=", "norm_layer", "(", "dim", ")", "\n", "self", ".", "attn", "=", "Attention", "(", "dim", ",", "num_heads", "=", "num_heads", ",", "qkv_bias", "=", "qkv_bias", ",", "attn_drop", "=", "attn_drop", ",", "proj_drop", "=", "drop", ")", "\n", "# NOTE: drop path for stochastic depth, we shall see if this is better than dropout here", "\n", "self", ".", "drop_path", "=", "DropPath", "(", "drop_path", ")", "if", "drop_path", ">", "0.", "else", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "norm2", "=", "norm_layer", "(", "dim", ")", "\n", "mlp_hidden_dim", "=", "int", "(", "dim", "*", "mlp_ratio", ")", "\n", "self", ".", "mlp", "=", "Mlp", "(", "in_features", "=", "dim", ",", "hidden_features", "=", "mlp_hidden_dim", ",", "act_layer", "=", "act_layer", ",", "drop", "=", "drop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.models.passt.Block.forward": [[350, 354], ["passt.Block.drop_path", "passt.Block.drop_path", "passt.Block.attn", "passt.Block.mlp", "passt.Block.norm1", "passt.Block.norm2"], "methods", ["home.repos.pwc.inspect_result.kkoutini_passt.helpers.vit_helpers.drop_path", "home.repos.pwc.inspect_result.kkoutini_passt.helpers.vit_helpers.drop_path"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "attn", "(", "self", ".", "norm1", "(", "x", ")", ")", ")", "\n", "x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "mlp", "(", "self", ".", "norm2", "(", "x", ")", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.models.passt.PaSST.__init__": [[364, 443], ["torch.Module.__init__", "embed_layer", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Sequential", "torch.Sequential", "torch.Sequential", "norm_layer", "torch.Sequential", "torch.Sequential", "torch.Sequential", "passt.PaSST.init_weights", "functools.partial", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "x.item", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Identity", "torch.Identity", "torch.Identity", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "collections.OrderedDict", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Identity", "torch.Identity", "torch.Identity", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Identity", "torch.Identity", "torch.Identity", "passt.Block", "range", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.kkoutini_passt.audioset.dataset.DistributedSamplerWrapper.__init__", "home.repos.pwc.inspect_result.kkoutini_passt.models.passt.PaSST.init_weights"], ["def", "__init__", "(", "self", ",", "u_patchout", "=", "0", ",", "s_patchout_t", "=", "0", ",", "s_patchout_f", "=", "0", ",", "img_size", "=", "(", "128", ",", "998", ")", ",", "patch_size", "=", "16", ",", "stride", "=", "16", ",", "\n", "in_chans", "=", "1", ",", "num_classes", "=", "527", ",", "embed_dim", "=", "768", ",", "depth", "=", "12", ",", "\n", "num_heads", "=", "12", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "True", ",", "representation_size", "=", "None", ",", "distilled", "=", "False", ",", "\n", "drop_rate", "=", "0.", ",", "attn_drop_rate", "=", "0.", ",", "drop_path_rate", "=", "0.", ",", "embed_layer", "=", "PatchEmbed", ",", "norm_layer", "=", "None", ",", "\n", "act_layer", "=", "None", ",", "weight_init", "=", "''", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            u_patchout: Unstructured Patchout integer, number of items to be removed from the final sequence\n            s_patchout_t: structured Patchout time integer, number of columns to be removed from the patches grid\n            s_patchout_f: structured Patchout Frequency integer, number of rows to be removed from the patches grid\n            img_size (int, tuple): input image size\n            patch_size (int, tuple): patch size\n            in_chans (int): number of input channels\n            num_classes (int): number of classes for classification head\n            embed_dim (int): embedding dimension\n            depth (int): depth of transformer\n            num_heads (int): number of attention heads\n            mlp_ratio (int): ratio of mlp hidden dim to embedding dim\n            qkv_bias (bool): enable bias for qkv if True\n            representation_size (Optional[int]): enable and set representation layer (pre-logits) to this value if set\n            distilled (bool): model includes a distillation token and head as in DeiT models\n            drop_rate (float): dropout rate\n            attn_drop_rate (float): attention dropout rate\n            drop_path_rate (float): stochastic depth rate\n            embed_layer (nn.Module): patch embedding layer\n            norm_layer: (nn.Module): normalization layer\n            weight_init: (str): weight init scheme\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "u_patchout", "=", "u_patchout", "\n", "self", ".", "s_patchout_t", "=", "s_patchout_t", "\n", "self", ".", "s_patchout_f", "=", "s_patchout_f", "\n", "self", ".", "num_features", "=", "self", ".", "embed_dim", "=", "embed_dim", "# num_features for consistency with other models", "\n", "self", ".", "num_tokens", "=", "2", "if", "distilled", "else", "1", "\n", "norm_layer", "=", "norm_layer", "or", "partial", "(", "nn", ".", "LayerNorm", ",", "eps", "=", "1e-6", ")", "\n", "act_layer", "=", "act_layer", "or", "nn", ".", "GELU", "\n", "\n", "self", ".", "patch_embed", "=", "embed_layer", "(", "\n", "img_size", "=", "img_size", ",", "patch_size", "=", "patch_size", ",", "stride", "=", "stride", ",", "in_chans", "=", "in_chans", ",", "embed_dim", "=", "embed_dim", ",", "\n", "flatten", "=", "False", ")", "\n", "num_patches", "=", "self", ".", "patch_embed", ".", "num_patches", "\n", "\n", "self", ".", "cls_token", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "1", ",", "embed_dim", ")", ")", "\n", "self", ".", "dist_token", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "1", ",", "embed_dim", ")", ")", "if", "distilled", "else", "None", "\n", "# PaSST", "\n", "# refer to https://arxiv.org/abs/2110.05069 Section 2", "\n", "self", ".", "new_pos_embed", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "self", ".", "num_tokens", ",", "embed_dim", ")", ")", "# for C and D tokens", "\n", "self", ".", "freq_new_pos_embed", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "embed_dim", ",", "self", ".", "patch_embed", ".", "grid_size", "[", "0", "]", ",", "1", ")", ")", "# | f", "\n", "self", ".", "time_new_pos_embed", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "embed_dim", ",", "1", ",", "self", ".", "patch_embed", ".", "grid_size", "[", "1", "]", ")", ")", "# __ t", "\n", "####", "\n", "self", ".", "pos_drop", "=", "nn", ".", "Dropout", "(", "p", "=", "drop_rate", ")", "\n", "\n", "dpr", "=", "[", "x", ".", "item", "(", ")", "for", "x", "in", "torch", ".", "linspace", "(", "0", ",", "drop_path_rate", ",", "depth", ")", "]", "# stochastic depth decay rule", "\n", "self", ".", "blocks", "=", "nn", ".", "Sequential", "(", "*", "[", "\n", "Block", "(", "\n", "dim", "=", "embed_dim", ",", "num_heads", "=", "num_heads", ",", "mlp_ratio", "=", "mlp_ratio", ",", "qkv_bias", "=", "qkv_bias", ",", "drop", "=", "drop_rate", ",", "\n", "attn_drop", "=", "attn_drop_rate", ",", "drop_path", "=", "dpr", "[", "i", "]", ",", "norm_layer", "=", "norm_layer", ",", "act_layer", "=", "act_layer", ")", "\n", "for", "i", "in", "range", "(", "depth", ")", "]", ")", "\n", "self", ".", "norm", "=", "norm_layer", "(", "embed_dim", ")", "\n", "\n", "# Representation layer", "\n", "if", "representation_size", "and", "not", "distilled", ":", "\n", "            ", "self", ".", "num_features", "=", "representation_size", "\n", "self", ".", "pre_logits", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "\n", "(", "'fc'", ",", "nn", ".", "Linear", "(", "embed_dim", ",", "representation_size", ")", ")", ",", "\n", "(", "'act'", ",", "nn", ".", "Tanh", "(", ")", ")", "\n", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "pre_logits", "=", "nn", ".", "Identity", "(", ")", "\n", "\n", "# Classifier head(s)", "\n", "", "self", ".", "head", "=", "nn", ".", "Sequential", "(", "nn", ".", "LayerNorm", "(", "self", ".", "num_features", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "num_features", ",", "num_classes", ")", "if", "num_classes", ">", "0", "else", "nn", ".", "Identity", "(", ")", ")", "\n", "self", ".", "head_dist", "=", "None", "\n", "if", "distilled", ":", "\n", "            ", "self", ".", "head_dist", "=", "nn", ".", "Linear", "(", "self", ".", "embed_dim", ",", "self", ".", "num_classes", ")", "if", "num_classes", ">", "0", "else", "nn", ".", "Identity", "(", ")", "\n", "\n", "", "self", ".", "init_weights", "(", "weight_init", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.models.passt.PaSST.init_weights": [[444, 458], ["helpers.vit_helpers.trunc_normal_", "helpers.vit_helpers.trunc_normal_", "helpers.vit_helpers.trunc_normal_", "mode.startswith", "helpers.vit_helpers.trunc_normal_", "RuntimeError", "helpers.vit_helpers.trunc_normal_", "passt.PaSST.apply", "math.log"], "methods", ["home.repos.pwc.inspect_result.kkoutini_passt.helpers.vit_helpers.trunc_normal_", "home.repos.pwc.inspect_result.kkoutini_passt.helpers.vit_helpers.trunc_normal_", "home.repos.pwc.inspect_result.kkoutini_passt.helpers.vit_helpers.trunc_normal_", "home.repos.pwc.inspect_result.kkoutini_passt.helpers.vit_helpers.trunc_normal_", "home.repos.pwc.inspect_result.kkoutini_passt.helpers.vit_helpers.trunc_normal_"], ["", "def", "init_weights", "(", "self", ",", "mode", "=", "''", ")", ":", "\n", "        ", "assert", "mode", "in", "(", "'jax'", ",", "'jax_nlhb'", ",", "'nlhb'", ",", "''", ")", "\n", "head_bias", "=", "-", "math", ".", "log", "(", "self", ".", "num_classes", ")", "if", "'nlhb'", "in", "mode", "else", "0.", "\n", "trunc_normal_", "(", "self", ".", "new_pos_embed", ",", "std", "=", ".02", ")", "\n", "trunc_normal_", "(", "self", ".", "freq_new_pos_embed", ",", "std", "=", ".02", ")", "\n", "trunc_normal_", "(", "self", ".", "time_new_pos_embed", ",", "std", "=", ".02", ")", "\n", "if", "self", ".", "dist_token", "is", "not", "None", ":", "\n", "            ", "trunc_normal_", "(", "self", ".", "dist_token", ",", "std", "=", ".02", ")", "\n", "", "if", "mode", ".", "startswith", "(", "'jax'", ")", ":", "\n", "# leave cls token as zeros to match jax impl", "\n", "            ", "raise", "RuntimeError", "(", "\"Not supported yet\"", ")", "\n", "", "else", ":", "\n", "            ", "trunc_normal_", "(", "self", ".", "cls_token", ",", "std", "=", ".02", ")", "\n", "self", ".", "apply", "(", "_init_vit_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.models.passt.PaSST._init_weights": [[459, 462], ["passt._init_vit_weights"], "methods", ["home.repos.pwc.inspect_result.kkoutini_passt.models.passt._init_vit_weights"], ["", "", "def", "_init_weights", "(", "self", ",", "m", ")", ":", "\n", "# this fn left here for compat with downstream users", "\n", "        ", "_init_vit_weights", "(", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.models.passt.PaSST.no_weight_decay": [[463, 466], ["None"], "methods", ["None"], ["", "@", "torch", ".", "jit", ".", "ignore", "\n", "def", "no_weight_decay", "(", "self", ")", ":", "\n", "        ", "return", "{", "'new_pos_embed'", ",", "'freq_new_pos_embed'", ",", "'time_new_pos_embed'", ",", "'cls_token'", ",", "'dist_token'", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.models.passt.PaSST.get_classifier": [[467, 472], ["None"], "methods", ["None"], ["", "def", "get_classifier", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "dist_token", "is", "None", ":", "\n", "            ", "return", "self", ".", "head", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "head", ",", "self", ".", "head_dist", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.models.passt.PaSST.reset_classifier": [[473, 478], ["torch.Linear", "torch.Linear", "torch.Linear", "torch.Identity", "torch.Identity", "torch.Identity", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Identity", "torch.Identity", "torch.Identity"], "methods", ["None"], ["", "", "def", "reset_classifier", "(", "self", ",", "num_classes", ",", "global_pool", "=", "''", ")", ":", "\n", "        ", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "head", "=", "nn", ".", "Linear", "(", "self", ".", "embed_dim", ",", "num_classes", ")", "if", "num_classes", ">", "0", "else", "nn", ".", "Identity", "(", ")", "\n", "if", "self", ".", "num_tokens", "==", "2", ":", "\n", "            ", "self", ".", "head_dist", "=", "nn", ".", "Linear", "(", "self", ".", "embed_dim", ",", "self", ".", "num_classes", ")", "if", "num_classes", ">", "0", "else", "nn", ".", "Identity", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.models.passt.PaSST.forward_features": [[479, 548], ["passt.PaSST.patch_embed", "torch.cat.flatten().transpose", "torch.cat.flatten().transpose", "torch.cat.flatten().transpose", "passt.PaSST.pos_drop", "passt.PaSST.blocks", "passt.PaSST.norm", "print", "print", "warnings.warn", "print", "print", "print", "passt.PaSST.cls_token.expand", "print", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "print", "print", "passt.PaSST.pre_logits", "torch.randint().item", "torch.randint().item", "torch.randint().item", "torch.randint().item", "torch.randint().item", "torch.randint().item", "torch.randint().item", "torch.randint().item", "torch.randint().item", "print", "print", "[].sort", "print", "print", "[].sort", "print", "torch.cat.flatten", "torch.cat.flatten", "torch.cat.flatten", "torch.cat.size", "torch.cat.size", "torch.cat.size", "[].sort", "print", "passt.PaSST.dist_token.expand", "print", "print", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "len", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm"], "methods", ["None"], ["", "", "def", "forward_features", "(", "self", ",", "x", ")", ":", "\n", "        ", "global", "first_RUN", "# not jit friendly? use trace instead", "\n", "x", "=", "self", ".", "patch_embed", "(", "x", ")", "# [b, e, f, t]", "\n", "B_dim", ",", "E_dim", ",", "F_dim", ",", "T_dim", "=", "x", ".", "shape", "# slow", "\n", "if", "first_RUN", ":", "print", "(", "\" patch_embed : \"", ",", "x", ".", "shape", ")", "\n", "# Adding Time/Freq information", "\n", "if", "first_RUN", ":", "print", "(", "\" self.time_new_pos_embed.shape\"", ",", "self", ".", "time_new_pos_embed", ".", "shape", ")", "\n", "time_new_pos_embed", "=", "self", ".", "time_new_pos_embed", "\n", "if", "x", ".", "shape", "[", "-", "1", "]", "<", "time_new_pos_embed", ".", "shape", "[", "-", "1", "]", ":", "\n", "            ", "if", "self", ".", "training", ":", "\n", "                ", "toffset", "=", "torch", ".", "randint", "(", "1", "+", "time_new_pos_embed", ".", "shape", "[", "-", "1", "]", "-", "x", ".", "shape", "[", "-", "1", "]", ",", "(", "1", ",", ")", ")", ".", "item", "(", ")", "\n", "if", "first_RUN", ":", "print", "(", "f\" CUT with randomoffset={toffset} time_new_pos_embed.shape\"", ",", "\n", "time_new_pos_embed", ".", "shape", ")", "\n", "time_new_pos_embed", "=", "time_new_pos_embed", "[", ":", ",", ":", ",", ":", ",", "toffset", ":", "toffset", "+", "x", ".", "shape", "[", "-", "1", "]", "]", "\n", "", "else", ":", "\n", "                ", "time_new_pos_embed", "=", "time_new_pos_embed", "[", ":", ",", ":", ",", ":", ",", ":", "x", ".", "shape", "[", "-", "1", "]", "]", "\n", "", "if", "first_RUN", ":", "print", "(", "\" CUT time_new_pos_embed.shape\"", ",", "time_new_pos_embed", ".", "shape", ")", "\n", "", "else", ":", "\n", "            ", "warnings", ".", "warn", "(", "\n", "f\"the patches shape:{x.shape} are larger than the expected time encodings {time_new_pos_embed.shape}, x will be cut\"", ")", "\n", "x", "=", "x", "[", ":", ",", ":", ",", ":", ",", ":", "time_new_pos_embed", ".", "shape", "[", "-", "1", "]", "]", "\n", "", "x", "=", "x", "+", "time_new_pos_embed", "\n", "if", "first_RUN", ":", "print", "(", "\" self.freq_new_pos_embed.shape\"", ",", "self", ".", "freq_new_pos_embed", ".", "shape", ")", "\n", "x", "=", "x", "+", "self", ".", "freq_new_pos_embed", "\n", "\n", "# Structured Patchout https://arxiv.org/abs/2110.05069 Section 2.2", "\n", "if", "self", ".", "training", "and", "self", ".", "s_patchout_t", ":", "\n", "            ", "if", "first_RUN", ":", "print", "(", "f\"X Before time Patchout of {self.s_patchout_t} \"", ",", "x", ".", "size", "(", ")", ")", "\n", "# ([1, 768, 1, 82])", "\n", "random_indices", "=", "torch", ".", "randperm", "(", "T_dim", ")", "[", ":", "T_dim", "-", "self", ".", "s_patchout_t", "]", ".", "sort", "(", ")", ".", "values", "\n", "x", "=", "x", "[", ":", ",", ":", ",", ":", ",", "random_indices", "]", "\n", "if", "first_RUN", ":", "print", "(", "\"X after time Patchout\"", ",", "x", ".", "size", "(", ")", ")", "\n", "", "if", "self", ".", "training", "and", "self", ".", "s_patchout_f", ":", "\n", "            ", "if", "first_RUN", ":", "print", "(", "f\"X Before Freq Patchout of {self.s_patchout_f} \"", ",", "x", ".", "size", "(", ")", ")", "\n", "# [1, 768, 12, 1]", "\n", "random_indices", "=", "torch", ".", "randperm", "(", "F_dim", ")", "[", ":", "F_dim", "-", "self", ".", "s_patchout_f", "]", ".", "sort", "(", ")", ".", "values", "\n", "x", "=", "x", "[", ":", ",", ":", ",", "random_indices", ",", ":", "]", "\n", "if", "first_RUN", ":", "print", "(", "\" \\n X after freq Patchout: \"", ",", "x", ".", "size", "(", ")", ")", "\n", "###", "\n", "# Flatten the sequence", "\n", "", "x", "=", "x", ".", "flatten", "(", "2", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "# Unstructured Patchout", "\n", "if", "first_RUN", ":", "print", "(", "\"X flattened\"", ",", "x", ".", "size", "(", ")", ")", "\n", "if", "self", ".", "training", "and", "self", ".", "u_patchout", ":", "\n", "            ", "seq_len", "=", "x", ".", "shape", "[", "1", "]", "\n", "random_indices", "=", "torch", ".", "randperm", "(", "seq_len", ")", "[", ":", "seq_len", "-", "self", ".", "u_patchout", "]", ".", "sort", "(", ")", ".", "values", "\n", "x", "=", "x", "[", ":", ",", "random_indices", ",", ":", "]", "\n", "if", "first_RUN", ":", "print", "(", "\"X After Unstructured Patchout\"", ",", "x", ".", "size", "(", ")", ")", "\n", "####", "\n", "# Add the C/D tokens", "\n", "", "if", "first_RUN", ":", "print", "(", "\" self.new_pos_embed.shape\"", ",", "self", ".", "new_pos_embed", ".", "shape", ")", "\n", "cls_tokens", "=", "self", ".", "cls_token", ".", "expand", "(", "B_dim", ",", "-", "1", ",", "-", "1", ")", "+", "self", ".", "new_pos_embed", "[", ":", ",", ":", "1", ",", ":", "]", "\n", "if", "first_RUN", ":", "print", "(", "\" self.cls_tokens.shape\"", ",", "cls_tokens", ".", "shape", ")", "\n", "if", "self", ".", "dist_token", "is", "None", ":", "\n", "            ", "x", "=", "torch", ".", "cat", "(", "(", "cls_tokens", ",", "x", ")", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "dist_token", "=", "self", ".", "dist_token", ".", "expand", "(", "B_dim", ",", "-", "1", ",", "-", "1", ")", "+", "self", ".", "new_pos_embed", "[", ":", ",", "1", ":", ",", ":", "]", "\n", "if", "first_RUN", ":", "print", "(", "\" self.dist_token.shape\"", ",", "dist_token", ".", "shape", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "cls_tokens", ",", "dist_token", ",", "x", ")", ",", "dim", "=", "1", ")", "\n", "\n", "", "if", "first_RUN", ":", "print", "(", "\" final sequence x\"", ",", "x", ".", "shape", ")", "\n", "x", "=", "self", ".", "pos_drop", "(", "x", ")", "\n", "x", "=", "self", ".", "blocks", "(", "x", ")", "\n", "if", "first_RUN", ":", "print", "(", "f\" after {len(self.blocks)} atten blocks x\"", ",", "x", ".", "shape", ")", "\n", "x", "=", "self", ".", "norm", "(", "x", ")", "\n", "if", "self", ".", "dist_token", "is", "None", ":", "\n", "            ", "return", "self", ".", "pre_logits", "(", "x", "[", ":", ",", "0", "]", ")", "\n", "", "else", ":", "\n", "            ", "return", "x", "[", ":", ",", "0", "]", ",", "x", "[", ":", ",", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.models.passt.PaSST.forward": [[549, 569], ["passt.PaSST.forward_features", "print", "passt.PaSST.head", "passt.PaSST.head", "print", "passt.PaSST.size", "print", "print", "print", "passt.PaSST.size", "features.size", "passt.PaSST.size", "features.size"], "methods", ["home.repos.pwc.inspect_result.kkoutini_passt.models.passt.PaSST.forward_features"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "global", "first_RUN", "\n", "if", "first_RUN", ":", "print", "(", "\"x\"", ",", "x", ".", "size", "(", ")", ")", "\n", "\n", "x", "=", "self", ".", "forward_features", "(", "x", ")", "\n", "\n", "if", "self", ".", "head_dist", "is", "not", "None", ":", "\n", "            ", "features", "=", "(", "x", "[", "0", "]", "+", "x", "[", "1", "]", ")", "/", "2", "\n", "if", "first_RUN", ":", "print", "(", "\"forward_features\"", ",", "features", ".", "size", "(", ")", ")", "\n", "x", "=", "self", ".", "head", "(", "features", ")", "\n", "if", "first_RUN", ":", "print", "(", "\"head\"", ",", "x", ".", "size", "(", ")", ")", "\n", "first_RUN", "=", "False", "\n", "return", "x", ",", "features", "\n", "", "else", ":", "\n", "            ", "features", "=", "x", "\n", "if", "first_RUN", ":", "print", "(", "\"forward_features\"", ",", "features", ".", "size", "(", ")", ")", "\n", "x", "=", "self", ".", "head", "(", "x", ")", "\n", "", "if", "first_RUN", ":", "print", "(", "\"head\"", ",", "x", ".", "size", "(", ")", ")", "\n", "first_RUN", "=", "False", "\n", "return", "x", ",", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.models.passt.EnsembelerModel.__init__": [[965, 968], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList"], "methods", ["home.repos.pwc.inspect_result.kkoutini_passt.audioset.dataset.DistributedSamplerWrapper.__init__"], ["    ", "def", "__init__", "(", "self", ",", "models", ")", ":", "\n", "        ", "super", "(", "EnsembelerModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "models", "=", "nn", ".", "ModuleList", "(", "models", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.models.passt.EnsembelerModel.forward": [[969, 980], ["enumerate", "m", "len"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# ModuleList can act as an iterable, or be indexed using ints", "\n", "        ", "all_out", "=", "None", "\n", "for", "i", ",", "m", "in", "enumerate", "(", "self", ".", "models", ")", ":", "\n", "            ", "out", ",", "_", "=", "m", "(", "x", ")", "\n", "if", "all_out", "is", "None", ":", "\n", "                ", "all_out", "=", "out", "\n", "", "else", ":", "\n", "                ", "all_out", "=", "out", "+", "all_out", "\n", "", "", "all_out", "=", "all_out", "/", "len", "(", "self", ".", "models", ")", "\n", "return", "all_out", ",", "all_out", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.models.passt._cfg": [[31, 39], ["None"], "function", ["None"], ["def", "_cfg", "(", "url", "=", "''", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "{", "\n", "'url'", ":", "url", ",", "\n", "'num_classes'", ":", "1000", ",", "'input_size'", ":", "(", "3", ",", "224", ",", "224", ")", ",", "'pool_size'", ":", "None", ",", "\n", "'crop_pct'", ":", ".9", ",", "'interpolation'", ":", "'bicubic'", ",", "'fixed_input_size'", ":", "True", ",", "\n", "'mean'", ":", "IMAGENET_INCEPTION_MEAN", ",", "'std'", ":", "IMAGENET_INCEPTION_STD", ",", "\n", "'first_conv'", ":", "'patch_embed.proj'", ",", "'classifier'", ":", "'head'", ",", "\n", "**", "kwargs", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.models.passt.adapt_input_conv": [[227, 250], ["conv_weight.sum.float", "conv_weight.sum.to", "conv_weight.sum.reshape", "conv_weight.sum.sum", "conv_weight.sum.sum", "NotImplementedError", "int", "math.ceil", "conv_weight.sum.repeat", "float"], "function", ["None"], ["def", "adapt_input_conv", "(", "in_chans", ",", "conv_weight", ")", ":", "\n", "    ", "conv_type", "=", "conv_weight", ".", "dtype", "\n", "conv_weight", "=", "conv_weight", ".", "float", "(", ")", "# Some weights are in torch.half, ensure it's float for sum on CPU", "\n", "O", ",", "I", ",", "J", ",", "K", "=", "conv_weight", ".", "shape", "\n", "if", "in_chans", "==", "1", ":", "\n", "        ", "if", "I", ">", "3", ":", "\n", "            ", "assert", "conv_weight", ".", "shape", "[", "1", "]", "%", "3", "==", "0", "\n", "# For models with space2depth stems", "\n", "conv_weight", "=", "conv_weight", ".", "reshape", "(", "O", ",", "I", "//", "3", ",", "3", ",", "J", ",", "K", ")", "\n", "conv_weight", "=", "conv_weight", ".", "sum", "(", "dim", "=", "2", ",", "keepdim", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "conv_weight", "=", "conv_weight", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "", "", "elif", "in_chans", "!=", "3", ":", "\n", "        ", "if", "I", "!=", "3", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'Weight format not supported by conversion.'", ")", "\n", "", "else", ":", "\n", "# NOTE this strategy should be better than random init, but there could be other combinations of", "\n", "# the original RGB input layer weights that'd work better for specific cases.", "\n", "            ", "repeat", "=", "int", "(", "math", ".", "ceil", "(", "in_chans", "/", "3", ")", ")", "\n", "conv_weight", "=", "conv_weight", ".", "repeat", "(", "1", ",", "repeat", ",", "1", ",", "1", ")", "[", ":", ",", ":", "in_chans", ",", ":", ",", ":", "]", "\n", "conv_weight", "*=", "(", "3", "/", "float", "(", "in_chans", ")", ")", "\n", "", "", "conv_weight", "=", "conv_weight", ".", "to", "(", "conv_type", ")", "\n", "return", "conv_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.models.passt._init_vit_weights": [[571, 604], ["isinstance", "name.startswith", "torch.init.zeros_", "torch.init.constant_", "name.startswith", "isinstance", "lecun_normal_", "isinstance", "lecun_normal_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.ones_", "torch.init.xavier_uniform_", "helpers.vit_helpers.trunc_normal_", "torch.init.zeros_", "torch.init.normal_", "torch.init.zeros_"], "function", ["home.repos.pwc.inspect_result.kkoutini_passt.helpers.vit_helpers.lecun_normal_", "home.repos.pwc.inspect_result.kkoutini_passt.helpers.vit_helpers.lecun_normal_", "home.repos.pwc.inspect_result.kkoutini_passt.helpers.vit_helpers.trunc_normal_"], ["", "", "def", "_init_vit_weights", "(", "module", ":", "nn", ".", "Module", ",", "name", ":", "str", "=", "''", ",", "head_bias", ":", "float", "=", "0.", ",", "jax_impl", ":", "bool", "=", "False", ")", ":", "\n", "    ", "\"\"\" ViT weight initialization\n    * When called without n, head_bias, jax_impl args it will behave exactly the same\n      as my original init for compatibility with prev hparam / downstream use cases (ie DeiT).\n    * When called w/ valid n (module name) and jax_impl=True, will (hopefully) match JAX impl\n    \"\"\"", "\n", "if", "isinstance", "(", "module", ",", "nn", ".", "Linear", ")", ":", "\n", "        ", "if", "name", ".", "startswith", "(", "'head'", ")", ":", "\n", "            ", "nn", ".", "init", ".", "zeros_", "(", "module", ".", "weight", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "module", ".", "bias", ",", "head_bias", ")", "\n", "", "elif", "name", ".", "startswith", "(", "'pre_logits'", ")", ":", "\n", "            ", "lecun_normal_", "(", "module", ".", "weight", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "module", ".", "bias", ")", "\n", "", "else", ":", "\n", "            ", "if", "jax_impl", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_uniform_", "(", "module", ".", "weight", ")", "\n", "if", "module", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "if", "'mlp'", "in", "name", ":", "\n", "                        ", "nn", ".", "init", ".", "normal_", "(", "module", ".", "bias", ",", "std", "=", "1e-6", ")", "\n", "", "else", ":", "\n", "                        ", "nn", ".", "init", ".", "zeros_", "(", "module", ".", "bias", ")", "\n", "", "", "", "else", ":", "\n", "                ", "trunc_normal_", "(", "module", ".", "weight", ",", "std", "=", ".02", ")", "\n", "if", "module", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "zeros_", "(", "module", ".", "bias", ")", "\n", "", "", "", "", "elif", "jax_impl", "and", "isinstance", "(", "module", ",", "nn", ".", "Conv2d", ")", ":", "\n", "# NOTE conv was left to pytorch default in my original init", "\n", "        ", "lecun_normal_", "(", "module", ".", "weight", ")", "\n", "if", "module", ".", "bias", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "zeros_", "(", "module", ".", "bias", ")", "\n", "", "", "elif", "isinstance", "(", "module", ",", "(", "nn", ".", "LayerNorm", ",", "nn", ".", "GroupNorm", ",", "nn", ".", "BatchNorm2d", ")", ")", ":", "\n", "        ", "nn", ".", "init", ".", "zeros_", "(", "module", ".", "bias", ")", "\n", "nn", ".", "init", ".", "ones_", "(", "module", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.models.passt.resize_pos_embed": [[606, 627], ["_logger.info", "int", "_logger.info", "posemb_grid.permute().reshape.reshape().permute", "torch.interpolate", "posemb_grid.permute().reshape.permute().reshape", "torch.cat", "torch.cat", "torch.cat", "math.sqrt", "len", "len", "len", "posemb_grid.permute().reshape.reshape", "posemb_grid.permute().reshape.permute", "int", "math.sqrt"], "function", ["None"], ["", "", "def", "resize_pos_embed", "(", "posemb", ",", "posemb_new", ",", "num_tokens", "=", "1", ",", "gs_new", "=", "(", ")", ",", "mode", "=", "'bicubic'", ")", ":", "\n", "# Rescale the grid of position embeddings when loading from state_dict. Adapted from", "\n", "# https://github.com/google-research/vision_transformer/blob/00883dd691c63a6830751563748663526e811cee/vit_jax/checkpoint.py#L224", "\n", "    ", "_logger", ".", "info", "(", "'Resized position embedding: %s to %s with %s cls/dis tokens'", ",", "posemb", ".", "shape", ",", "posemb_new", ".", "shape", ",", "\n", "num_tokens", ")", "\n", "ntok_new", "=", "posemb_new", ".", "shape", "[", "1", "]", "\n", "if", "num_tokens", ":", "\n", "        ", "posemb_tok", ",", "posemb_grid", "=", "posemb", "[", ":", ",", ":", "num_tokens", "]", ",", "posemb", "[", "0", ",", "num_tokens", ":", "]", "\n", "ntok_new", "-=", "num_tokens", "\n", "", "else", ":", "\n", "        ", "posemb_tok", ",", "posemb_grid", "=", "posemb", "[", ":", ",", ":", "0", "]", ",", "posemb", "[", "0", "]", "\n", "", "gs_old", "=", "int", "(", "math", ".", "sqrt", "(", "len", "(", "posemb_grid", ")", ")", ")", "\n", "if", "not", "len", "(", "gs_new", ")", ":", "# backwards compatibility", "\n", "        ", "gs_new", "=", "[", "int", "(", "math", ".", "sqrt", "(", "ntok_new", ")", ")", "]", "*", "2", "\n", "", "assert", "len", "(", "gs_new", ")", ">=", "2", "\n", "_logger", ".", "info", "(", "'Position embedding grid-size from %s to %s'", ",", "[", "gs_old", ",", "gs_old", "]", ",", "gs_new", ")", "\n", "posemb_grid", "=", "posemb_grid", ".", "reshape", "(", "1", ",", "gs_old", ",", "gs_old", ",", "-", "1", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "posemb_grid", "=", "F", ".", "interpolate", "(", "posemb_grid", ",", "size", "=", "gs_new", ",", "mode", "=", "mode", ",", "align_corners", "=", "False", ")", "\n", "posemb_grid", "=", "posemb_grid", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "reshape", "(", "1", ",", "gs_new", "[", "0", "]", "*", "gs_new", "[", "1", "]", ",", "-", "1", ")", "\n", "posemb", "=", "torch", ".", "cat", "(", "[", "posemb_tok", ",", "posemb_grid", "]", ",", "dim", "=", "1", ")", "\n", "return", "posemb", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.models.passt.adapt_image_pos_embed_to_passt": [[629, 650], ["_logger.info", "int", "_logger.info", "F.interpolate.reshape().permute", "torch.interpolate", "F.interpolate.mean", "F.interpolate.mean", "_logger.info", "_logger.info", "_logger.info", "math.sqrt", "len", "len", "F.interpolate.reshape"], "function", ["None"], ["", "def", "adapt_image_pos_embed_to_passt", "(", "posemb", ",", "num_tokens", "=", "1", ",", "gs_new", "=", "(", ")", ",", "mode", "=", "'bicubic'", ")", ":", "\n", "# Rescale the grid of position embeddings when loading from state_dict. Adapted from", "\n", "# https://github.com/google-research/vision_transformer/blob/00883dd691c63a6830751563748663526e811cee/vit_jax/checkpoint.py#L224", "\n", "    ", "_logger", ".", "info", "(", "'Resized position embedding: %s to %s with %s cls/dis tokens'", ",", "posemb", ".", "shape", ",", "gs_new", ",", "\n", "num_tokens", ")", "\n", "if", "num_tokens", ":", "\n", "        ", "posemb_tok", ",", "posemb_grid", "=", "posemb", "[", ":", ",", ":", "num_tokens", "]", ",", "posemb", "[", "0", ",", "num_tokens", ":", "]", "\n", "", "else", ":", "\n", "        ", "posemb_tok", ",", "posemb_grid", "=", "posemb", "[", ":", ",", ":", "0", "]", ",", "posemb", "[", "0", "]", "\n", "", "gs_old", "=", "int", "(", "math", ".", "sqrt", "(", "len", "(", "posemb_grid", ")", ")", ")", "\n", "\n", "assert", "len", "(", "gs_new", ")", ">=", "2", "\n", "_logger", ".", "info", "(", "'Position embedding grid-size from %s to %s'", ",", "[", "gs_old", ",", "gs_old", "]", ",", "gs_new", ")", "\n", "posemb_grid", "=", "posemb_grid", ".", "reshape", "(", "1", ",", "gs_old", ",", "gs_old", ",", "-", "1", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "posemb_grid", "=", "F", ".", "interpolate", "(", "posemb_grid", ",", "size", "=", "gs_new", ",", "mode", "=", "mode", ",", "align_corners", "=", "False", ")", "\n", "freq_new_pos_embed", "=", "posemb_grid", ".", "mean", "(", "dim", "=", "3", ",", "keepdim", "=", "True", ")", "\n", "time_new_pos_embed", "=", "posemb_grid", ".", "mean", "(", "dim", "=", "2", ",", "keepdim", "=", "True", ")", "\n", "_logger", ".", "info", "(", "'New Position cls/dstl embedding %s'", ",", "posemb_tok", ".", "shape", ")", "\n", "_logger", ".", "info", "(", "'New FREQ Position embedding %s'", ",", "freq_new_pos_embed", ".", "shape", ")", "\n", "_logger", ".", "info", "(", "'New TIME Position embedding %s'", ",", "time_new_pos_embed", ".", "shape", ")", "\n", "return", "posemb_tok", ",", "freq_new_pos_embed", ",", "time_new_pos_embed", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.models.passt.checkpoint_filter_fn": [[652, 680], ["state_dict.items", "_logger.info", "state_dict.pop", "passt.adapt_image_pos_embed_to_passt", "state_dict.items", "getattr", "resize_pos_embed.reshape", "len", "passt.resize_pos_embed", "getattr"], "function", ["home.repos.pwc.inspect_result.kkoutini_passt.models.passt.adapt_image_pos_embed_to_passt", "home.repos.pwc.inspect_result.kkoutini_passt.models.passt.resize_pos_embed"], ["", "def", "checkpoint_filter_fn", "(", "state_dict", ",", "model", ")", ":", "\n", "    ", "\"\"\" convert patch embedding weight from manual patchify + linear proj to conv\"\"\"", "\n", "out_dict", "=", "{", "}", "\n", "if", "'model'", "in", "state_dict", ":", "\n", "# For deit models", "\n", "        ", "state_dict", "=", "state_dict", "[", "'model'", "]", "\n", "", "state_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", "}", "\n", "if", "\"time_new_pos_embed\"", "not", "in", "state_dict", ":", "\n", "# we are working with ImageNet model", "\n", "        ", "_logger", ".", "info", "(", "\"Adapting pos embedding from ImageNet pretrained model to PaSST.\"", ")", "\n", "v", "=", "state_dict", ".", "pop", "(", "\"pos_embed\"", ")", "\n", "new_pos_embed", ",", "freq_new_pos_embed", ",", "time_new_pos_embed", "=", "adapt_image_pos_embed_to_passt", "(", "\n", "v", ",", "getattr", "(", "model", ",", "'num_tokens'", ",", "1", ")", ",", "model", ".", "patch_embed", ".", "grid_size", ")", "\n", "state_dict", "[", "\"new_pos_embed\"", "]", "=", "new_pos_embed", "\n", "state_dict", "[", "\"freq_new_pos_embed\"", "]", "=", "freq_new_pos_embed", "\n", "state_dict", "[", "\"time_new_pos_embed\"", "]", "=", "time_new_pos_embed", "\n", "\n", "", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "'patch_embed.proj.weight'", "in", "k", "and", "len", "(", "v", ".", "shape", ")", "<", "4", ":", "\n", "# For old models that I trained prior to conv based patchification", "\n", "            ", "O", ",", "I", ",", "H", ",", "W", "=", "model", ".", "patch_embed", ".", "proj", ".", "weight", ".", "shape", "\n", "v", "=", "v", ".", "reshape", "(", "O", ",", "-", "1", ",", "H", ",", "W", ")", "\n", "", "elif", "k", "==", "'pos_embed'", "and", "v", ".", "shape", "!=", "model", ".", "pos_embed", ".", "shape", ":", "\n", "# this should never occur", "\n", "            ", "v", "=", "resize_pos_embed", "(", "\n", "v", ",", "model", ".", "pos_embed", ",", "getattr", "(", "model", ",", "'num_tokens'", ",", "1", ")", ",", "model", ".", "patch_embed", ".", "grid_size", ")", "\n", "", "out_dict", "[", "k", "]", "=", "v", "\n", "", "return", "out_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.models.passt._create_vision_transformer": [[682, 705], ["kwargs.get", "kwargs.get", "kwargs.pop", "helpers.vit_helpers.build_model_with_cfg", "RuntimeError", "_logger.warning"], "function", ["home.repos.pwc.inspect_result.kkoutini_passt.helpers.audiodatasets.ObjectCacher.get", "home.repos.pwc.inspect_result.kkoutini_passt.helpers.audiodatasets.ObjectCacher.get", "home.repos.pwc.inspect_result.kkoutini_passt.helpers.vit_helpers.build_model_with_cfg"], ["", "def", "_create_vision_transformer", "(", "variant", ",", "pretrained", "=", "False", ",", "default_cfg", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "default_cfg", "=", "default_cfg", "or", "default_cfgs", "[", "variant", "]", "\n", "if", "kwargs", ".", "get", "(", "'features_only'", ",", "None", ")", ":", "\n", "        ", "raise", "RuntimeError", "(", "'features_only not implemented for Vision Transformer models.'", ")", "\n", "\n", "# NOTE this extra code to support handling of repr size for in21k pretrained models", "\n", "", "default_num_classes", "=", "default_cfg", "[", "'num_classes'", "]", "\n", "num_classes", "=", "kwargs", ".", "get", "(", "'num_classes'", ",", "default_num_classes", ")", "\n", "repr_size", "=", "kwargs", ".", "pop", "(", "'representation_size'", ",", "None", ")", "\n", "if", "repr_size", "is", "not", "None", "and", "num_classes", "!=", "default_num_classes", ":", "\n", "# Remove representation layer if fine-tuning. This may not always be the desired action,", "\n", "# but I feel better than doing nothing by default for fine-tuning. Perhaps a better interface?", "\n", "        ", "_logger", ".", "warning", "(", "\"Removing representation layer for fine-tuning.\"", ")", "\n", "repr_size", "=", "None", "\n", "\n", "", "model", "=", "build_model_with_cfg", "(", "\n", "PaSST", ",", "variant", ",", "pretrained", ",", "\n", "default_cfg", "=", "default_cfg", ",", "\n", "representation_size", "=", "repr_size", ",", "\n", "pretrained_filter_fn", "=", "checkpoint_filter_fn", ",", "\n", "pretrained_custom_load", "=", "'npz'", "in", "default_cfg", "[", "'url'", "]", ",", "\n", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.models.passt.vit_huge_patch14_224_in21k": [[707, 716], ["dict", "passt._create_vision_transformer"], "function", ["home.repos.pwc.inspect_result.kkoutini_passt.models.passt._create_vision_transformer"], ["", "def", "vit_huge_patch14_224_in21k", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" ViT-Huge model (ViT-H/14) from original paper (https://arxiv.org/abs/2010.11929).\n    ImageNet-21k weights @ 224x224, source https://github.com/google-research/vision_transformer.\n    NOTE: this model has a representation layer but the 21k classifier head is zero'd out in original weights\n    \"\"\"", "\n", "model_kwargs", "=", "dict", "(", "\n", "patch_size", "=", "14", ",", "embed_dim", "=", "1280", ",", "depth", "=", "32", ",", "num_heads", "=", "16", ",", "representation_size", "=", "1280", ",", "**", "kwargs", ")", "\n", "model", "=", "_create_vision_transformer", "(", "'vit_huge_patch14_224_in21k'", ",", "pretrained", "=", "pretrained", ",", "**", "model_kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.models.passt.deit_base_distilled_patch16_384": [[718, 727], ["print", "dict", "passt._create_vision_transformer"], "function", ["home.repos.pwc.inspect_result.kkoutini_passt.models.passt._create_vision_transformer"], ["", "def", "deit_base_distilled_patch16_384", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" DeiT-base distilled model @ 384x384 from paper (https://arxiv.org/abs/2012.12877).\n    ImageNet-1k weights from https://github.com/facebookresearch/deit.\n    \"\"\"", "\n", "print", "(", "\"\\n\\n Loading DEIT BASE 384\\n\\n\"", ")", "\n", "model_kwargs", "=", "dict", "(", "patch_size", "=", "16", ",", "embed_dim", "=", "768", ",", "depth", "=", "12", ",", "num_heads", "=", "12", ",", "**", "kwargs", ")", "\n", "model", "=", "_create_vision_transformer", "(", "\n", "'deit_base_distilled_patch16_384'", ",", "pretrained", "=", "pretrained", ",", "distilled", "=", "True", ",", "**", "model_kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.models.passt.passt_s_swa_p16_128_ap476": [[729, 740], ["print", "dict", "passt._create_vision_transformer", "dict.get", "warnings.warn", "dict.get"], "function", ["home.repos.pwc.inspect_result.kkoutini_passt.models.passt._create_vision_transformer", "home.repos.pwc.inspect_result.kkoutini_passt.helpers.audiodatasets.ObjectCacher.get", "home.repos.pwc.inspect_result.kkoutini_passt.helpers.audiodatasets.ObjectCacher.get"], ["", "def", "passt_s_swa_p16_128_ap476", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" PaSST pre-trained on AudioSet\n    \"\"\"", "\n", "print", "(", "\"\\n\\n Loading PaSST pre-trained on AudioSet Patch 16 stride 10 structured patchout mAP=476 SWA \\n\\n\"", ")", "\n", "model_kwargs", "=", "dict", "(", "patch_size", "=", "16", ",", "embed_dim", "=", "768", ",", "depth", "=", "12", ",", "num_heads", "=", "12", ",", "**", "kwargs", ")", "\n", "if", "model_kwargs", ".", "get", "(", "\"stride\"", ")", "!=", "(", "10", ",", "10", ")", ":", "\n", "        ", "warnings", ".", "warn", "(", "\n", "f\"This model was pre-trained with strides {(10, 10)}, but now you set (fstride,tstride) to {model_kwargs.get('stride')}.\"", ")", "\n", "", "model", "=", "_create_vision_transformer", "(", "\n", "'passt_s_swa_p16_128_ap476'", ",", "pretrained", "=", "pretrained", ",", "distilled", "=", "True", ",", "**", "model_kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.models.passt.passt_s_swa_p16_128_ap4761": [[742, 753], ["print", "dict", "passt._create_vision_transformer", "dict.get", "warnings.warn", "dict.get"], "function", ["home.repos.pwc.inspect_result.kkoutini_passt.models.passt._create_vision_transformer", "home.repos.pwc.inspect_result.kkoutini_passt.helpers.audiodatasets.ObjectCacher.get", "home.repos.pwc.inspect_result.kkoutini_passt.helpers.audiodatasets.ObjectCacher.get"], ["", "def", "passt_s_swa_p16_128_ap4761", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" PaSST pre-trained on AudioSet\n    \"\"\"", "\n", "print", "(", "\"\\n\\n Loading PaSST pre-trained on AudioSet Patch 16 stride 10 structured patchout mAP=4763 SWA \\n\\n\"", ")", "\n", "model_kwargs", "=", "dict", "(", "patch_size", "=", "16", ",", "embed_dim", "=", "768", ",", "depth", "=", "12", ",", "num_heads", "=", "12", ",", "**", "kwargs", ")", "\n", "if", "model_kwargs", ".", "get", "(", "\"stride\"", ")", "!=", "(", "10", ",", "10", ")", ":", "\n", "        ", "warnings", ".", "warn", "(", "\n", "f\"This model was pre-trained with strides {(10, 10)}, but now you set (fstride,tstride) to {model_kwargs.get('stride')}.\"", ")", "\n", "", "model", "=", "_create_vision_transformer", "(", "\n", "'passt_s_swa_p16_128_ap4761'", ",", "pretrained", "=", "pretrained", ",", "distilled", "=", "True", ",", "**", "model_kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.models.passt.passt_s_p16_128_ap472": [[755, 766], ["print", "dict", "passt._create_vision_transformer", "dict.get", "warnings.warn", "dict.get"], "function", ["home.repos.pwc.inspect_result.kkoutini_passt.models.passt._create_vision_transformer", "home.repos.pwc.inspect_result.kkoutini_passt.helpers.audiodatasets.ObjectCacher.get", "home.repos.pwc.inspect_result.kkoutini_passt.helpers.audiodatasets.ObjectCacher.get"], ["", "def", "passt_s_p16_128_ap472", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" PaSST pre-trained on AudioSet\n    \"\"\"", "\n", "print", "(", "\"\\n\\n Loading PaSST pre-trained on AudioSet Patch 16 stride 10 structured patchout mAP=472 \\n\\n\"", ")", "\n", "model_kwargs", "=", "dict", "(", "patch_size", "=", "16", ",", "embed_dim", "=", "768", ",", "depth", "=", "12", ",", "num_heads", "=", "12", ",", "**", "kwargs", ")", "\n", "if", "model_kwargs", ".", "get", "(", "\"stride\"", ")", "!=", "(", "10", ",", "10", ")", ":", "\n", "        ", "warnings", ".", "warn", "(", "\n", "f\"This model was pre-trained with strides {(10, 10)}, but now you set (fstride,tstride) to {model_kwargs.get('stride')}.\"", ")", "\n", "", "model", "=", "_create_vision_transformer", "(", "\n", "'passt_s_p16_128_ap472'", ",", "pretrained", "=", "pretrained", ",", "distilled", "=", "True", ",", "**", "model_kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.models.passt.passt_s_p16_s12_128_ap470": [[768, 779], ["print", "dict", "passt._create_vision_transformer", "dict.get", "warnings.warn", "dict.get"], "function", ["home.repos.pwc.inspect_result.kkoutini_passt.models.passt._create_vision_transformer", "home.repos.pwc.inspect_result.kkoutini_passt.helpers.audiodatasets.ObjectCacher.get", "home.repos.pwc.inspect_result.kkoutini_passt.helpers.audiodatasets.ObjectCacher.get"], ["", "def", "passt_s_p16_s12_128_ap470", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" PaSST pre-trained on AudioSet\n    \"\"\"", "\n", "print", "(", "\"\\n\\n Loading PaSST pre-trained on AudioSet Patch 16 stride 12 structured patchout mAP=472 \\n\\n\"", ")", "\n", "model_kwargs", "=", "dict", "(", "patch_size", "=", "16", ",", "embed_dim", "=", "768", ",", "depth", "=", "12", ",", "num_heads", "=", "12", ",", "**", "kwargs", ")", "\n", "if", "model_kwargs", ".", "get", "(", "\"stride\"", ")", "!=", "(", "12", ",", "12", ")", ":", "\n", "        ", "warnings", ".", "warn", "(", "\n", "f\"This model was pre-trained with strides {(12, 12)}, but now you set (fstride,tstride) to {model_kwargs.get('stride')}.\"", ")", "\n", "", "model", "=", "_create_vision_transformer", "(", "\n", "'passt_s_p16_s12_128_ap470'", ",", "pretrained", "=", "pretrained", ",", "distilled", "=", "True", ",", "**", "model_kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.models.passt.passt_s_f128_20sec_p16_s10_ap474_swa": [[781, 787], ["print", "dict", "passt._create_vision_transformer"], "function", ["home.repos.pwc.inspect_result.kkoutini_passt.models.passt._create_vision_transformer"], ["", "def", "passt_s_f128_20sec_p16_s10_ap474_swa", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "print", "(", "\"\\n\\n Loading PASST TRAINED ON AUDISET with 20 Second time encodings, with STFT hop of 160 \\n\\n\"", ")", "\n", "model_kwargs", "=", "dict", "(", "patch_size", "=", "16", ",", "embed_dim", "=", "768", ",", "depth", "=", "12", ",", "num_heads", "=", "12", ",", "**", "kwargs", ")", "\n", "model", "=", "_create_vision_transformer", "(", "\n", "'passt-s-f128-20sec-p16-s10-ap474-swa'", ",", "pretrained", "=", "pretrained", ",", "distilled", "=", "True", ",", "**", "model_kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.models.passt.passt_s_f128_30sec_p16_s10_ap473_swa": [[789, 795], ["print", "dict", "passt._create_vision_transformer"], "function", ["home.repos.pwc.inspect_result.kkoutini_passt.models.passt._create_vision_transformer"], ["", "def", "passt_s_f128_30sec_p16_s10_ap473_swa", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "print", "(", "\"\\n\\n Loading PASST TRAINED ON AUDISET with 30 Second time encodings, with STFT hop of 160 \\n\\n\"", ")", "\n", "model_kwargs", "=", "dict", "(", "patch_size", "=", "16", ",", "embed_dim", "=", "768", ",", "depth", "=", "12", ",", "num_heads", "=", "12", ",", "**", "kwargs", ")", "\n", "model", "=", "_create_vision_transformer", "(", "\n", "'passt-s-f128-30sec-p16-s10-ap473-swa'", ",", "pretrained", "=", "pretrained", ",", "distilled", "=", "True", ",", "**", "model_kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.models.passt.passt_s_swa_p16_s12_128_ap473": [[797, 808], ["print", "dict", "passt._create_vision_transformer", "dict.get", "warnings.warn", "dict.get"], "function", ["home.repos.pwc.inspect_result.kkoutini_passt.models.passt._create_vision_transformer", "home.repos.pwc.inspect_result.kkoutini_passt.helpers.audiodatasets.ObjectCacher.get", "home.repos.pwc.inspect_result.kkoutini_passt.helpers.audiodatasets.ObjectCacher.get"], ["", "def", "passt_s_swa_p16_s12_128_ap473", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" PaSST pre-trained on AudioSet\n    \"\"\"", "\n", "print", "(", "\"\\n\\n Loading PaSST pre-trained on AudioSet Patch 16 stride 12 structured patchout mAP=472 \\n\\n\"", ")", "\n", "model_kwargs", "=", "dict", "(", "patch_size", "=", "16", ",", "embed_dim", "=", "768", ",", "depth", "=", "12", ",", "num_heads", "=", "12", ",", "**", "kwargs", ")", "\n", "if", "model_kwargs", ".", "get", "(", "\"stride\"", ")", "!=", "(", "12", ",", "12", ")", ":", "\n", "        ", "warnings", ".", "warn", "(", "\n", "f\"This model was pre-trained with strides {(12, 12)}, but now you set (fstride,tstride) to {model_kwargs.get('stride')}.\"", ")", "\n", "", "model", "=", "_create_vision_transformer", "(", "\n", "'passt_s_swa_p16_s12_128_ap473'", ",", "pretrained", "=", "pretrained", ",", "distilled", "=", "True", ",", "**", "model_kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.models.passt.passt_s_p16_s14_128_ap469": [[810, 821], ["print", "dict", "passt._create_vision_transformer", "dict.get", "warnings.warn", "dict.get"], "function", ["home.repos.pwc.inspect_result.kkoutini_passt.models.passt._create_vision_transformer", "home.repos.pwc.inspect_result.kkoutini_passt.helpers.audiodatasets.ObjectCacher.get", "home.repos.pwc.inspect_result.kkoutini_passt.helpers.audiodatasets.ObjectCacher.get"], ["", "def", "passt_s_p16_s14_128_ap469", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" PaSST pre-trained on AudioSet\n    \"\"\"", "\n", "print", "(", "\"\\n\\n Loading PaSST pre-trained on AudioSet Patch 16 stride 14 structured patchout mAP=472 \\n\\n\"", ")", "\n", "model_kwargs", "=", "dict", "(", "patch_size", "=", "16", ",", "embed_dim", "=", "768", ",", "depth", "=", "12", ",", "num_heads", "=", "12", ",", "**", "kwargs", ")", "\n", "if", "model_kwargs", ".", "get", "(", "\"stride\"", ")", "!=", "(", "14", ",", "14", ")", ":", "\n", "        ", "warnings", ".", "warn", "(", "\n", "f\"This model was pre-trained with strides {(14, 14)}, but now you set (fstride,tstride) to {model_kwargs.get('stride')}.\"", ")", "\n", "", "model", "=", "_create_vision_transformer", "(", "\n", "'passt_s_p16_s14_128_ap469'", ",", "pretrained", "=", "pretrained", ",", "distilled", "=", "True", ",", "**", "model_kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.models.passt.passt_s_swa_p16_s14_128_ap471": [[823, 834], ["print", "dict", "passt._create_vision_transformer", "dict.get", "warnings.warn", "dict.get"], "function", ["home.repos.pwc.inspect_result.kkoutini_passt.models.passt._create_vision_transformer", "home.repos.pwc.inspect_result.kkoutini_passt.helpers.audiodatasets.ObjectCacher.get", "home.repos.pwc.inspect_result.kkoutini_passt.helpers.audiodatasets.ObjectCacher.get"], ["", "def", "passt_s_swa_p16_s14_128_ap471", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" PaSST pre-trained on AudioSet\n    \"\"\"", "\n", "print", "(", "\"\\n\\n Loading PaSST pre-trained on AudioSet Patch 16 stride 14 structured patchout mAP=472 \\n\\n\"", ")", "\n", "model_kwargs", "=", "dict", "(", "patch_size", "=", "16", ",", "embed_dim", "=", "768", ",", "depth", "=", "12", ",", "num_heads", "=", "12", ",", "**", "kwargs", ")", "\n", "if", "model_kwargs", ".", "get", "(", "\"stride\"", ")", "!=", "(", "14", ",", "14", ")", ":", "\n", "        ", "warnings", ".", "warn", "(", "\n", "f\"This model was pre-trained with strides {(14, 14)}, but now you set (fstride,tstride) to {model_kwargs.get('stride')}.\"", ")", "\n", "", "model", "=", "_create_vision_transformer", "(", "\n", "'passt_s_swa_p16_s14_128_ap471'", ",", "pretrained", "=", "pretrained", ",", "distilled", "=", "True", ",", "**", "model_kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.models.passt.passt_s_swa_p16_s16_128_ap473": [[836, 847], ["print", "dict", "passt._create_vision_transformer", "dict.get", "warnings.warn", "dict.get"], "function", ["home.repos.pwc.inspect_result.kkoutini_passt.models.passt._create_vision_transformer", "home.repos.pwc.inspect_result.kkoutini_passt.helpers.audiodatasets.ObjectCacher.get", "home.repos.pwc.inspect_result.kkoutini_passt.helpers.audiodatasets.ObjectCacher.get"], ["", "def", "passt_s_swa_p16_s16_128_ap473", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" PaSST pre-trained on AudioSet\n    \"\"\"", "\n", "print", "(", "\"\\n\\n Loading PaSST pre-trained on AudioSet Patch 16 stride 16 structured patchout mAP=472 \\n\\n\"", ")", "\n", "model_kwargs", "=", "dict", "(", "patch_size", "=", "16", ",", "embed_dim", "=", "768", ",", "depth", "=", "12", ",", "num_heads", "=", "12", ",", "**", "kwargs", ")", "\n", "if", "model_kwargs", ".", "get", "(", "\"stride\"", ")", "!=", "(", "16", ",", "16", ")", ":", "\n", "        ", "warnings", ".", "warn", "(", "\n", "f\"This model was pre-trained with strides {(16, 16)}, but now you set (fstride,tstride) to {model_kwargs.get('stride')}.\"", ")", "\n", "", "model", "=", "_create_vision_transformer", "(", "\n", "'passt_s_swa_p16_s16_128_ap473'", ",", "pretrained", "=", "pretrained", ",", "distilled", "=", "True", ",", "**", "model_kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.models.passt.passt_s_p16_s16_128_ap468": [[849, 860], ["print", "dict", "passt._create_vision_transformer", "dict.get", "warnings.warn", "dict.get"], "function", ["home.repos.pwc.inspect_result.kkoutini_passt.models.passt._create_vision_transformer", "home.repos.pwc.inspect_result.kkoutini_passt.helpers.audiodatasets.ObjectCacher.get", "home.repos.pwc.inspect_result.kkoutini_passt.helpers.audiodatasets.ObjectCacher.get"], ["", "def", "passt_s_p16_s16_128_ap468", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" PaSST pre-trained on AudioSet\n    \"\"\"", "\n", "print", "(", "\"\\n\\n Loading PaSST pre-trained on AudioSet Patch 16 stride 16 structured patchout mAP=472 \\n\\n\"", ")", "\n", "model_kwargs", "=", "dict", "(", "patch_size", "=", "16", ",", "embed_dim", "=", "768", ",", "depth", "=", "12", ",", "num_heads", "=", "12", ",", "**", "kwargs", ")", "\n", "if", "model_kwargs", ".", "get", "(", "\"stride\"", ")", "!=", "(", "16", ",", "16", ")", ":", "\n", "        ", "warnings", ".", "warn", "(", "\n", "f\"This model was pre-trained with strides {(16, 16)}, but now you set (fstride,tstride) to {model_kwargs.get('stride')}.\"", ")", "\n", "", "model", "=", "_create_vision_transformer", "(", "\n", "'passt_s_p16_s16_128_ap468'", ",", "pretrained", "=", "pretrained", ",", "distilled", "=", "True", ",", "**", "model_kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.models.passt.fix_embedding_layer": [[869, 878], ["PatchEmbedAdaptiveMean", "PatchEmbedAdaptiveMeanKeepConv"], "function", ["None"], ["@", "model_ing", ".", "command", "\n", "def", "fix_embedding_layer", "(", "model", ",", "embed", "=", "\"default\"", ")", ":", "\n", "    ", "if", "embed", "==", "\"default\"", ":", "\n", "        ", "return", "model", "\n", "", "if", "embed", "==", "\"overlap\"", ":", "\n", "        ", "model", ".", "patch_embed", "=", "PatchEmbedAdaptiveMean", "(", "replace", "=", "model", ".", "patch_embed", ")", "\n", "", "if", "embed", "==", "\"am_keepconv\"", ":", "\n", "        ", "model", ".", "patch_embed", "=", "PatchEmbedAdaptiveMeanKeepConv", "(", "replace", "=", "model", ".", "patch_embed", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.models.passt.lighten_model": [[879, 902], ["print", "list", "torch.Sequential", "print", "print", "print", "model.blocks.children", "print", "len", "ValueError", "len", "len", "len", "len"], "function", ["None"], ["", "@", "model_ing", ".", "command", "\n", "def", "lighten_model", "(", "model", ",", "cut_depth", "=", "0", ")", ":", "\n", "    ", "if", "cut_depth", "==", "0", ":", "\n", "        ", "return", "model", "\n", "", "if", "cut_depth", ":", "\n", "        ", "if", "cut_depth", "<", "0", ":", "\n", "            ", "print", "(", "f\"\\n Reducing model depth by removing every  {-cut_depth} layer \\n\\n\"", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "f\"\\n Reducing model depth by {cut_depth} \\n\\n\"", ")", "\n", "if", "len", "(", "model", ".", "blocks", ")", "<", "cut_depth", "+", "2", ":", "\n", "                ", "raise", "ValueError", "(", "f\"Cut depth a VIT with {len(model.blocks)} \"", "\n", "f\"layers should be between 1 and {len(model.blocks) - 2}\"", ")", "\n", "", "", "print", "(", "f\"\\n Before Cutting it was  {len(model.blocks)} \\n\\n\"", ")", "\n", "\n", "old_blocks", "=", "list", "(", "model", ".", "blocks", ".", "children", "(", ")", ")", "\n", "if", "cut_depth", "<", "0", ":", "\n", "            ", "print", "(", "f\"cut_depth={cut_depth}\"", ")", "\n", "old_blocks", "=", "[", "old_blocks", "[", "0", "]", "]", "+", "old_blocks", "[", "1", ":", "-", "1", ":", "-", "cut_depth", "]", "+", "[", "old_blocks", "[", "-", "1", "]", "]", "\n", "", "else", ":", "\n", "            ", "old_blocks", "=", "[", "old_blocks", "[", "0", "]", "]", "+", "old_blocks", "[", "cut_depth", "+", "1", ":", "]", "\n", "", "model", ".", "blocks", "=", "nn", ".", "Sequential", "(", "*", "old_blocks", ")", "\n", "print", "(", "f\"\\n Atfer Cutting it is  {len(model.blocks)} \\n\\n\"", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.models.passt.get_model": [[904, 962], ["model_func", "passt.fix_embedding_layer", "passt.lighten_model", "print", "RuntimeError"], "function", ["home.repos.pwc.inspect_result.kkoutini_passt.models.passt.fix_embedding_layer", "home.repos.pwc.inspect_result.kkoutini_passt.models.passt.lighten_model"], ["", "@", "model_ing", ".", "command", "\n", "def", "get_model", "(", "arch", "=", "\"passt_s_swa_p16_128_ap476\"", ",", "pretrained", "=", "True", ",", "n_classes", "=", "527", ",", "in_channels", "=", "1", ",", "fstride", "=", "10", ",", "\n", "tstride", "=", "10", ",", "\n", "input_fdim", "=", "128", ",", "input_tdim", "=", "998", ",", "u_patchout", "=", "0", ",", "s_patchout_t", "=", "0", ",", "s_patchout_f", "=", "0", ",", "\n", ")", ":", "\n", "    ", "\"\"\"\n    :param arch: Base ViT or Deit architecture\n    :param pretrained: use pretrained model on imagenet\n    :param n_classes: number of classes\n    :param in_channels: number of input channels: 1 for mono\n    :param fstride: the patches stride over frequency.\n    :param tstride: the patches stride over time.\n    :param input_fdim: the expected input frequency bins.\n    :param input_tdim: the expected input time bins.\n    :param u_patchout: number of input patches to drop in Unstructured Patchout as defined in https://arxiv.org/abs/2110.05069\n    :param s_patchout_t: number of input time frames to drop Structured Patchout as defined in https://arxiv.org/abs/2110.05069\n    :param s_patchout_f:  number of input frequency bins to drop Structured Patchout as defined in https://arxiv.org/abs/2110.05069\n    :param audioset_pretrain: use pretrained models on Audioset.\n    :return:\n\n    \"\"\"", "\n", "model_func", "=", "None", "\n", "input_size", "=", "(", "input_fdim", ",", "input_tdim", ")", "\n", "stride", "=", "(", "fstride", ",", "tstride", ")", "\n", "if", "arch", "==", "\"passt_deit_bd_p16_384\"", ":", "# base deit", "\n", "        ", "model_func", "=", "deit_base_distilled_patch16_384", "\n", "", "elif", "arch", "==", "\"passt_s_swa_p16_128_ap476\"", ":", "# pretrained", "\n", "        ", "model_func", "=", "passt_s_swa_p16_128_ap476", "\n", "", "elif", "arch", "==", "\"passt_s_swa_p16_128_ap4761\"", ":", "\n", "        ", "model_func", "=", "passt_s_swa_p16_128_ap4761", "\n", "", "elif", "arch", "==", "\"passt_s_p16_128_ap472\"", ":", "\n", "        ", "model_func", "=", "passt_s_p16_128_ap472", "\n", "", "elif", "arch", "==", "\"passt_s_p16_s16_128_ap468\"", ":", "\n", "        ", "model_func", "=", "passt_s_p16_s16_128_ap468", "\n", "", "elif", "arch", "==", "\"passt_s_swa_p16_s16_128_ap473\"", ":", "\n", "        ", "model_func", "=", "passt_s_swa_p16_s16_128_ap473", "\n", "", "elif", "arch", "==", "\"passt_s_swa_p16_s14_128_ap471\"", ":", "\n", "        ", "model_func", "=", "passt_s_swa_p16_s14_128_ap471", "\n", "", "elif", "arch", "==", "\"passt_s_p16_s14_128_ap469\"", ":", "\n", "        ", "model_func", "=", "passt_s_p16_s14_128_ap469", "\n", "", "elif", "arch", "==", "\"passt_s_swa_p16_s12_128_ap473\"", ":", "\n", "        ", "model_func", "=", "passt_s_swa_p16_s12_128_ap473", "\n", "", "elif", "arch", "==", "\"passt_s_p16_s12_128_ap470\"", ":", "\n", "        ", "model_func", "=", "passt_s_p16_s12_128_ap470", "\n", "", "elif", "arch", "==", "\"passt_s_f128_20sec_p16_s10_ap474\"", ":", "\n", "        ", "model_func", "=", "passt_s_f128_20sec_p16_s10_ap474_swa", "\n", "", "elif", "arch", "==", "\"passt_s_f128_30sec_p16_s10_ap473\"", ":", "\n", "        ", "model_func", "=", "passt_s_f128_30sec_p16_s10_ap473_swa", "\n", "\n", "", "if", "model_func", "is", "None", ":", "\n", "        ", "raise", "RuntimeError", "(", "f\"Unknown model {arch}\"", ")", "\n", "", "model", "=", "model_func", "(", "pretrained", "=", "pretrained", ",", "num_classes", "=", "n_classes", ",", "in_chans", "=", "in_channels", ",", "\n", "img_size", "=", "input_size", ",", "stride", "=", "stride", ",", "u_patchout", "=", "u_patchout", ",", "\n", "s_patchout_t", "=", "s_patchout_t", ",", "s_patchout_f", "=", "s_patchout_f", ")", "\n", "model", "=", "fix_embedding_layer", "(", "model", ")", "\n", "model", "=", "lighten_model", "(", "model", ")", "\n", "print", "(", "model", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.models.passt.get_ensemble_model": [[982, 989], ["passt.EnsembelerModel", "print", "passt.get_model"], "function", ["home.repos.pwc.inspect_result.kkoutini_passt.models.passt.get_model"], ["", "", "@", "model_ing", ".", "command", "\n", "def", "get_ensemble_model", "(", "arch_list", "=", "[", "]", ")", ":", "\n", "# arch_list = [(passt_s_swa_p16_128_ap476,fstride,tstride)]", "\n", "    ", "models_list", "=", "[", "get_model", "(", "arch", "=", "arch", ",", "fstride", "=", "fstride", ",", "tstride", "=", "tstride", ")", "for", "arch", ",", "fstride", ",", "tstride", "in", "arch_list", "]", "\n", "model", "=", "EnsembelerModel", "(", "models_list", ")", "\n", "print", "(", "model", ")", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.kkoutini_passt.helpers.vit_helpers.DropPath.__init__": [[98, 101], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.kkoutini_passt.audioset.dataset.DistributedSamplerWrapper.__init__"], ["def", "__init__", "(", "self", ",", "drop_prob", "=", "None", ")", ":", "\n", "        ", "super", "(", "DropPath", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "drop_prob", "=", "drop_prob", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.helpers.vit_helpers.DropPath.forward": [[102, 104], ["vit_helpers.drop_path"], "methods", ["home.repos.pwc.inspect_result.kkoutini_passt.helpers.vit_helpers.drop_path"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "drop_path", "(", "x", ",", "self", ".", "drop_prob", ",", "self", ".", "training", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.helpers.vit_helpers.overlay_external_default_cfg": [[14, 22], ["kwargs.pop", "default_cfg.pop", "default_cfg.pop", "default_cfg.update"], "function", ["None"], ["def", "overlay_external_default_cfg", "(", "default_cfg", ",", "kwargs", ")", ":", "\n", "    ", "\"\"\" Overlay 'external_default_cfg' in kwargs on top of default_cfg arg.\n    \"\"\"", "\n", "external_default_cfg", "=", "kwargs", ".", "pop", "(", "'external_default_cfg'", ",", "None", ")", "\n", "if", "external_default_cfg", ":", "\n", "        ", "default_cfg", ".", "pop", "(", "'url'", ",", "None", ")", "# url should come from external cfg", "\n", "default_cfg", ".", "pop", "(", "'hf_hub'", ",", "None", ")", "# hf hub id should come from external cfg", "\n", "default_cfg", ".", "update", "(", "external_default_cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.helpers.vit_helpers.filter_kwargs": [[24, 29], ["kwargs.pop"], "function", ["None"], ["", "", "def", "filter_kwargs", "(", "kwargs", ",", "names", ")", ":", "\n", "    ", "if", "not", "kwargs", "or", "not", "names", ":", "\n", "        ", "return", "\n", "", "for", "n", "in", "names", ":", "\n", "        ", "kwargs", ".", "pop", "(", "n", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.helpers.vit_helpers.set_default_kwargs": [[31, 49], ["default_cfg.get", "kwargs.setdefault", "default_cfg.get", "default_cfg.get", "len", "kwargs.setdefault", "kwargs.setdefault", "len"], "function", ["home.repos.pwc.inspect_result.kkoutini_passt.helpers.audiodatasets.ObjectCacher.get", "home.repos.pwc.inspect_result.kkoutini_passt.helpers.audiodatasets.ObjectCacher.get", "home.repos.pwc.inspect_result.kkoutini_passt.helpers.audiodatasets.ObjectCacher.get"], ["", "", "def", "set_default_kwargs", "(", "kwargs", ",", "names", ",", "default_cfg", ")", ":", "\n", "    ", "for", "n", "in", "names", ":", "\n", "# for legacy reasons, model __init__args uses img_size + in_chans as separate args while", "\n", "# default_cfg has one input_size=(C, H ,W) entry", "\n", "        ", "if", "n", "==", "'img_size'", ":", "\n", "            ", "input_size", "=", "default_cfg", ".", "get", "(", "'input_size'", ",", "None", ")", "\n", "if", "input_size", "is", "not", "None", ":", "\n", "                ", "assert", "len", "(", "input_size", ")", "==", "3", "\n", "kwargs", ".", "setdefault", "(", "n", ",", "input_size", "[", "-", "2", ":", "]", ")", "\n", "", "", "elif", "n", "==", "'in_chans'", ":", "\n", "            ", "input_size", "=", "default_cfg", ".", "get", "(", "'input_size'", ",", "None", ")", "\n", "if", "input_size", "is", "not", "None", ":", "\n", "                ", "assert", "len", "(", "input_size", ")", "==", "3", "\n", "kwargs", ".", "setdefault", "(", "n", ",", "input_size", "[", "0", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "default_val", "=", "default_cfg", ".", "get", "(", "n", ",", "None", ")", "\n", "if", "default_val", "is", "not", "None", ":", "\n", "                ", "kwargs", ".", "setdefault", "(", "n", ",", "default_cfg", "[", "n", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.helpers.vit_helpers.update_default_cfg_and_kwargs": [[51, 72], ["vit_helpers.overlay_external_default_cfg", "default_cfg.get", "vit_helpers.set_default_kwargs", "vit_helpers.filter_kwargs"], "function", ["home.repos.pwc.inspect_result.kkoutini_passt.helpers.vit_helpers.overlay_external_default_cfg", "home.repos.pwc.inspect_result.kkoutini_passt.helpers.audiodatasets.ObjectCacher.get", "home.repos.pwc.inspect_result.kkoutini_passt.helpers.vit_helpers.set_default_kwargs", "home.repos.pwc.inspect_result.kkoutini_passt.helpers.vit_helpers.filter_kwargs"], ["", "", "", "", "def", "update_default_cfg_and_kwargs", "(", "default_cfg", ",", "kwargs", ",", "kwargs_filter", ")", ":", "\n", "    ", "\"\"\" Update the default_cfg and kwargs before passing to model\n\n    FIXME this sequence of overlay default_cfg, set default kwargs, filter kwargs\n    could/should be replaced by an improved configuration mechanism\n\n    Args:\n        default_cfg: input default_cfg (updated in-place)\n        kwargs: keyword args passed to model build fn (updated in-place)\n        kwargs_filter: keyword arg keys that must be removed before model __init__\n    \"\"\"", "\n", "# Overlay default cfg values from `external_default_cfg` if it exists in kwargs", "\n", "overlay_external_default_cfg", "(", "default_cfg", ",", "kwargs", ")", "\n", "# Set model __init__ args that can be determined by default_cfg (if not already passed as kwargs)", "\n", "default_kwarg_names", "=", "(", "'num_classes'", ",", "'global_pool'", ",", "'in_chans'", ")", "\n", "if", "default_cfg", ".", "get", "(", "'fixed_input_size'", ",", "False", ")", ":", "\n", "# if fixed_input_size exists and is True, model takes an img_size arg that fixes its input size", "\n", "        ", "default_kwarg_names", "+=", "(", "'img_size'", ",", ")", "\n", "", "set_default_kwargs", "(", "kwargs", ",", "names", "=", "default_kwarg_names", ",", "default_cfg", "=", "default_cfg", ")", "\n", "# Filter keyword args for task specific model variants (some 'features only' models, etc.)", "\n", "filter_kwargs", "(", "kwargs", ",", "names", "=", "kwargs_filter", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.helpers.vit_helpers.drop_path": [[75, 93], ["random_tensor.floor_", "torch.rand", "x.div"], "function", ["None"], ["", "def", "drop_path", "(", "x", ",", "drop_prob", ":", "float", "=", "0.", ",", "training", ":", "bool", "=", "False", ")", ":", "\n", "    ", "\"\"\"Drop paths (Stochastic Depth) per sample (when applied in main path of residual blocks).\n\n    This is the same as the DropConnect impl I created for EfficientNet, etc networks, however,\n    the original name is misleading as 'Drop Connect' is a different form of dropout in a separate paper...\n    See discussion: https://github.com/tensorflow/tpu/issues/494#issuecomment-532968956 ... I've opted for\n    changing the layer and argument names to 'drop path' rather than mix DropConnect as a layer name and use\n    'survival rate' as the argument.\n\n    \"\"\"", "\n", "if", "drop_prob", "==", "0.", "or", "not", "training", ":", "\n", "        ", "return", "x", "\n", "", "keep_prob", "=", "1", "-", "drop_prob", "\n", "shape", "=", "(", "x", ".", "shape", "[", "0", "]", ",", ")", "+", "(", "1", ",", ")", "*", "(", "x", ".", "ndim", "-", "1", ")", "# work with diff dim tensors, not just 2D ConvNets", "\n", "random_tensor", "=", "keep_prob", "+", "torch", ".", "rand", "(", "shape", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "\n", "random_tensor", ".", "floor_", "(", ")", "# binarize", "\n", "output", "=", "x", ".", "div", "(", "keep_prob", ")", "*", "random_tensor", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.helpers.vit_helpers._no_grad_trunc_normal_": [[110, 144], ["warnings.warn", "torch.no_grad", "vit_helpers._no_grad_trunc_normal_.norm_cdf"], "function", ["None"], ["def", "_no_grad_trunc_normal_", "(", "tensor", ",", "mean", ",", "std", ",", "a", ",", "b", ")", ":", "\n", "# Cut & paste from PyTorch official master until it's in a few official releases - RW", "\n", "# Method based on https://people.sc.fsu.edu/~jburkardt/presentations/truncated_normal.pdf", "\n", "    ", "def", "norm_cdf", "(", "x", ")", ":", "\n", "# Computes standard normal cumulative distribution function", "\n", "        ", "return", "(", "1.", "+", "math", ".", "erf", "(", "x", "/", "math", ".", "sqrt", "(", "2.", ")", ")", ")", "/", "2.", "\n", "\n", "", "if", "(", "mean", "<", "a", "-", "2", "*", "std", ")", "or", "(", "mean", ">", "b", "+", "2", "*", "std", ")", ":", "\n", "        ", "warnings", ".", "warn", "(", "\"mean is more than 2 std from [a, b] in nn.init.trunc_normal_. \"", "\n", "\"The distribution of values may be incorrect.\"", ",", "\n", "stacklevel", "=", "2", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# Values are generated by using a truncated uniform distribution and", "\n", "# then using the inverse CDF for the normal distribution.", "\n", "# Get upper and lower cdf values", "\n", "        ", "l", "=", "norm_cdf", "(", "(", "a", "-", "mean", ")", "/", "std", ")", "\n", "u", "=", "norm_cdf", "(", "(", "b", "-", "mean", ")", "/", "std", ")", "\n", "\n", "# Uniformly fill tensor with values from [l, u], then translate to", "\n", "# [2l-1, 2u-1].", "\n", "tensor", ".", "uniform_", "(", "2", "*", "l", "-", "1", ",", "2", "*", "u", "-", "1", ")", "\n", "\n", "# Use inverse cdf transform for normal distribution to get truncated", "\n", "# standard normal", "\n", "tensor", ".", "erfinv_", "(", ")", "\n", "\n", "# Transform to proper mean, std", "\n", "tensor", ".", "mul_", "(", "std", "*", "math", ".", "sqrt", "(", "2.", ")", ")", "\n", "tensor", ".", "add_", "(", "mean", ")", "\n", "\n", "# Clamp to ensure it's in the proper range", "\n", "tensor", ".", "clamp_", "(", "min", "=", "a", ",", "max", "=", "b", ")", "\n", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.helpers.vit_helpers.trunc_normal_": [[146, 165], ["vit_helpers._no_grad_trunc_normal_"], "function", ["home.repos.pwc.inspect_result.kkoutini_passt.helpers.vit_helpers._no_grad_trunc_normal_"], ["", "", "def", "trunc_normal_", "(", "tensor", ",", "mean", "=", "0.", ",", "std", "=", "1.", ",", "a", "=", "-", "2.", ",", "b", "=", "2.", ")", ":", "\n", "# type: (Tensor, float, float, float, float) -> Tensor", "\n", "    ", "r\"\"\"Fills the input Tensor with values drawn from a truncated\n    normal distribution. The values are effectively drawn from the\n    normal distribution :math:`\\mathcal{N}(\\text{mean}, \\text{std}^2)`\n    with values outside :math:`[a, b]` redrawn until they are within\n    the bounds. The method used for generating the random values works\n    best when :math:`a \\leq \\text{mean} \\leq b`.\n    Args:\n        tensor: an n-dimensional `torch.Tensor`\n        mean: the mean of the normal distribution\n        std: the standard deviation of the normal distribution\n        a: the minimum cutoff value\n        b: the maximum cutoff value\n    Examples:\n        >>> w = torch.empty(3, 5)\n        >>> nn.init.trunc_normal_(w)\n    \"\"\"", "\n", "return", "_no_grad_trunc_normal_", "(", "tensor", ",", "mean", ",", "std", ",", "a", ",", "b", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.helpers.vit_helpers.variance_scaling_": [[167, 188], ["torch.nn.init._calculate_fan_in_and_fan_out", "vit_helpers.trunc_normal_", "tensor.normal_", "math.sqrt", "tensor.uniform_", "ValueError", "math.sqrt", "math.sqrt"], "function", ["home.repos.pwc.inspect_result.kkoutini_passt.helpers.vit_helpers.trunc_normal_"], ["", "def", "variance_scaling_", "(", "tensor", ",", "scale", "=", "1.0", ",", "mode", "=", "'fan_in'", ",", "distribution", "=", "'normal'", ")", ":", "\n", "    ", "fan_in", ",", "fan_out", "=", "_calculate_fan_in_and_fan_out", "(", "tensor", ")", "\n", "if", "mode", "==", "'fan_in'", ":", "\n", "        ", "denom", "=", "fan_in", "\n", "", "elif", "mode", "==", "'fan_out'", ":", "\n", "        ", "denom", "=", "fan_out", "\n", "", "elif", "mode", "==", "'fan_avg'", ":", "\n", "        ", "denom", "=", "(", "fan_in", "+", "fan_out", ")", "/", "2", "\n", "\n", "", "variance", "=", "scale", "/", "denom", "\n", "\n", "if", "distribution", "==", "\"truncated_normal\"", ":", "\n", "# constant is stddev of standard normal truncated to (-2, 2)", "\n", "        ", "trunc_normal_", "(", "tensor", ",", "std", "=", "math", ".", "sqrt", "(", "variance", ")", "/", ".87962566103423978", ")", "\n", "", "elif", "distribution", "==", "\"normal\"", ":", "\n", "        ", "tensor", ".", "normal_", "(", "std", "=", "math", ".", "sqrt", "(", "variance", ")", ")", "\n", "", "elif", "distribution", "==", "\"uniform\"", ":", "\n", "        ", "bound", "=", "math", ".", "sqrt", "(", "3", "*", "variance", ")", "\n", "tensor", ".", "uniform_", "(", "-", "bound", ",", "bound", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "f\"invalid distribution {distribution}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.helpers.vit_helpers.lecun_normal_": [[190, 192], ["vit_helpers.variance_scaling_"], "function", ["home.repos.pwc.inspect_result.kkoutini_passt.helpers.vit_helpers.variance_scaling_"], ["", "", "def", "lecun_normal_", "(", "tensor", ")", ":", "\n", "    ", "variance_scaling_", "(", "tensor", ",", "mode", "=", "'fan_in'", ",", "distribution", "=", "'truncated_normal'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.helpers.vit_helpers.build_model_with_cfg": [[195, 260], ["kwargs.pop", "vit_helpers.update_default_cfg_and_kwargs", "default_cfg.setdefault", "kwargs.pop", "copy.deepcopy", "feature_cfg.setdefault", "model_cls", "model_cls", "getattr", "kwargs.pop", "kwargs.get", "load_custom_pretrained", "timm.models.helpers.load_pretrained", "kwargs.get"], "function", ["home.repos.pwc.inspect_result.kkoutini_passt.helpers.vit_helpers.update_default_cfg_and_kwargs", "home.repos.pwc.inspect_result.kkoutini_passt.helpers.audiodatasets.ObjectCacher.get", "home.repos.pwc.inspect_result.kkoutini_passt.helpers.audiodatasets.ObjectCacher.get"], ["", "def", "build_model_with_cfg", "(", "\n", "model_cls", ",", "\n", "variant", ":", "str", ",", "\n", "pretrained", ":", "bool", ",", "\n", "default_cfg", ":", "dict", ",", "\n", "model_cfg", "=", "None", ",", "\n", "feature_cfg", "=", "None", ",", "\n", "pretrained_strict", ":", "bool", "=", "True", ",", "\n", "pretrained_filter_fn", "=", "None", ",", "\n", "pretrained_custom_load", "=", "False", ",", "\n", "kwargs_filter", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" Build model with specified default_cfg and optional model_cfg\n\n    This helper fn aids in the construction of a model including:\n      * handling default_cfg and associated pretained weight loading\n      * passing through optional model_cfg for models with config based arch spec\n      * features_only model adaptation\n      * pruning config / model adaptation\n\n    Args:\n        model_cls (nn.Module): model class\n        variant (str): model variant name\n        pretrained (bool): load pretrained weights\n        default_cfg (dict): model's default pretrained/task config\n        model_cfg (Optional[Dict]): model's architecture config\n        feature_cfg (Optional[Dict]: feature extraction adapter config\n        pretrained_strict (bool): load pretrained weights strictly\n        pretrained_filter_fn (Optional[Callable]): filter callable for pretrained weights\n        pretrained_custom_load (bool): use custom load fn, to load numpy or other non PyTorch weights\n        kwargs_filter (Optional[Tuple]): kwargs to filter before passing to model\n        **kwargs: model args passed through to model __init__\n    \"\"\"", "\n", "pruned", "=", "kwargs", ".", "pop", "(", "'pruned'", ",", "False", ")", "\n", "features", "=", "False", "\n", "feature_cfg", "=", "feature_cfg", "or", "{", "}", "\n", "default_cfg", "=", "deepcopy", "(", "default_cfg", ")", "if", "default_cfg", "else", "{", "}", "\n", "update_default_cfg_and_kwargs", "(", "default_cfg", ",", "kwargs", ",", "kwargs_filter", ")", "\n", "default_cfg", ".", "setdefault", "(", "'architecture'", ",", "variant", ")", "\n", "\n", "# Setup for feature extraction wrapper done at end of this fn", "\n", "if", "kwargs", ".", "pop", "(", "'features_only'", ",", "False", ")", ":", "\n", "        ", "features", "=", "True", "\n", "feature_cfg", ".", "setdefault", "(", "'out_indices'", ",", "(", "0", ",", "1", ",", "2", ",", "3", ",", "4", ")", ")", "\n", "if", "'out_indices'", "in", "kwargs", ":", "\n", "            ", "feature_cfg", "[", "'out_indices'", "]", "=", "kwargs", ".", "pop", "(", "'out_indices'", ")", "\n", "\n", "# Build the model", "\n", "", "", "model", "=", "model_cls", "(", "**", "kwargs", ")", "if", "model_cfg", "is", "None", "else", "model_cls", "(", "cfg", "=", "model_cfg", ",", "**", "kwargs", ")", "\n", "model", ".", "default_cfg", "=", "default_cfg", "\n", "\n", "\n", "# For classification models, check class attr, then kwargs, then default to 1k, otherwise 0 for feats", "\n", "num_classes_pretrained", "=", "0", "if", "features", "else", "getattr", "(", "model", ",", "'num_classes'", ",", "kwargs", ".", "get", "(", "'num_classes'", ",", "1000", ")", ")", "\n", "if", "pretrained", ":", "\n", "        ", "if", "pretrained_custom_load", ":", "\n", "            ", "load_custom_pretrained", "(", "model", ")", "\n", "", "else", ":", "\n", "            ", "load_pretrained", "(", "\n", "model", ",", "\n", "num_classes", "=", "num_classes_pretrained", ",", "\n", "in_chans", "=", "kwargs", ".", "get", "(", "'in_chans'", ",", "3", ")", ",", "\n", "filter_fn", "=", "pretrained_filter_fn", ",", "\n", "strict", "=", "pretrained_strict", ")", "\n", "", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.helpers.models_size.count_non_zero_params": [[7, 33], ["model.apply", "model.named_parameters", "type().__name__.lower", "p[].numel", "p.numel", "p[].numel", "p.numel", "type", "type", "type"], "function", ["None"], ["def", "count_non_zero_params", "(", "model", ")", ":", "\n", "    ", "sum_params", "=", "0", "\n", "sum_non_zero", "=", "0", "\n", "desc", "=", "\"\"", "\n", "\n", "def", "calc_params", "(", "model", ")", ":", "\n", "        ", "nonlocal", "desc", ",", "sum_params", ",", "sum_non_zero", "\n", "skip", "=", "\"\"", "\n", "if", "\"batchnorm\"", "in", "type", "(", "model", ")", ".", "__name__", ".", "lower", "(", ")", ":", "\n", "             ", "for", "k", ",", "p", "in", "[", "(", "\"running_mean\"", ",", "model", ".", "running_mean", ")", ",", "(", "\"running_var\"", ",", "model", ".", "running_var", ")", "]", ":", "\n", "                 ", "nonzero", "=", "p", "[", "p", "!=", "0", "]", ".", "numel", "(", ")", "\n", "total", "=", "p", ".", "numel", "(", ")", "\n", "desc", "+=", "f\"type {type(model).__name__}, {k},  {total}, {nonzero}, {p.dtype}, {skip} \"", "+", "\"\\n\"", "\n", "if", "skip", "!=", "\"skip\"", ":", "\n", "                     ", "sum_params", "+=", "total", "\n", "sum_non_zero", "+=", "nonzero", "\n", "", "", "", "for", "k", ",", "p", "in", "model", ".", "named_parameters", "(", "recurse", "=", "False", ")", ":", "\n", "            ", "nonzero", "=", "p", "[", "p", "!=", "0", "]", ".", "numel", "(", ")", "\n", "total", "=", "p", ".", "numel", "(", ")", "\n", "desc", "+=", "f\"type {type(model).__name__}, {k},  {total}, {nonzero}, {p.dtype}, {skip} \"", "+", "\"\\n\"", "\n", "if", "skip", "!=", "\"skip\"", ":", "\n", "                ", "sum_params", "+=", "total", "\n", "sum_non_zero", "+=", "nonzero", "\n", "\n", "", "", "", "model", ".", "apply", "(", "calc_params", ")", "\n", "return", "desc", ",", "sum_params", ",", "sum_non_zero", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.helpers.swa_callback.StochasticWeightAveraging.__init__": [[39, 127], ["isinstance", "pytorch_lightning.utilities.exceptions.MisconfigurationException", "isinstance", "pytorch_lightning.utilities.exceptions.MisconfigurationException", "isinstance", "isinstance", "isinstance", "pytorch_lightning.utilities.exceptions.MisconfigurationException", "pytorch_lightning.utilities.exceptions.MisconfigurationException", "pytorch_lightning.utilities.exceptions.MisconfigurationException", "all", "isinstance", "isinstance", "isinstance"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "swa_epoch_start", ":", "Union", "[", "int", ",", "float", "]", "=", "0.8", ",", "\n", "swa_freq", ":", "Union", "[", "int", ",", "float", "]", "=", "3", ",", "\n", "swa_lrs", ":", "Optional", "[", "Union", "[", "float", ",", "list", "]", "]", "=", "None", ",", "\n", "annealing_epochs", ":", "int", "=", "10", ",", "\n", "annealing_strategy", ":", "str", "=", "\"cos\"", ",", "\n", "avg_fn", ":", "Optional", "[", "_AVG_FN", "]", "=", "None", ",", "\n", "device", ":", "Optional", "[", "Union", "[", "torch", ".", "device", ",", "str", "]", "]", "=", "None", ",", "\n", ")", ":", "\n", "        ", "r\"\"\"\n\n        Implements the Stochastic Weight Averaging (SWA) Callback to average a model.\n\n        Stochastic Weight Averaging was proposed in ``Averaging Weights Leads to\n        Wider Optima and Better Generalization`` by Pavel Izmailov, Dmitrii\n        Podoprikhin, Timur Garipov, Dmitry Vetrov and Andrew Gordon Wilson\n        (UAI 2018).\n\n        This documentation is highly inspired by PyTorch's work on SWA.\n        The callback arguments follow the scheme defined in PyTorch's ``swa_utils`` package.\n\n        For a SWA explanation, please take a look\n        `here <https://pytorch.org/blog/pytorch-1.6-now-includes-stochastic-weight-averaging>`_.\n\n        .. warning:: ``StochasticWeightAveraging`` is in beta and subject to change.\n\n        .. warning:: ``StochasticWeightAveraging`` is currently not supported for multiple optimizers/schedulers.\n\n        SWA can easily be activated directly from the Trainer as follow:\n\n        .. code-block:: python\n\n            Trainer(stochastic_weight_avg=True)\n\n        Arguments:\n\n            swa_epoch_start: If provided as int, the procedure will start from\n                the ``swa_epoch_start``-th epoch. If provided as float between 0 and 1,\n                the procedure will start from ``int(swa_epoch_start * max_epochs)`` epoch\n\n            swa_lrs: the learning rate value for all param groups together or separately for each group.\n\n            annealing_epochs: number of epochs in the annealing phase (default: 10)\n\n            annealing_strategy: Specifies the annealing strategy (default: \"cos\"):\n\n                - ``\"cos\"``. For cosine annealing.\n                - ``\"linear\"`` For linear annealing\n\n            avg_fn: the averaging function used to update the parameters;\n                the function must take in the current value of the\n                :class:`AveragedModel` parameter, the current value of :attr:`model`\n                parameter and the number of models already averaged; if None,\n                equally weighted average is used (default: ``None``)\n\n            device: if provided, the averaged model will be stored on the ``device``.\n                When None is provided, it will infer the `device` from ``pl_module``.\n                (default: ``\"cpu\"``)\n\n        \"\"\"", "\n", "\n", "err_msg", "=", "\"swa_epoch_start should be a >0 integer or a float between 0 and 1.\"", "\n", "if", "isinstance", "(", "swa_epoch_start", ",", "int", ")", "and", "swa_epoch_start", "<", "1", ":", "\n", "            ", "raise", "MisconfigurationException", "(", "err_msg", ")", "\n", "", "if", "isinstance", "(", "swa_epoch_start", ",", "float", ")", "and", "not", "(", "0", "<=", "swa_epoch_start", "<=", "1", ")", ":", "\n", "            ", "raise", "MisconfigurationException", "(", "err_msg", ")", "\n", "\n", "", "wrong_type", "=", "not", "isinstance", "(", "swa_lrs", ",", "(", "float", ",", "list", ")", ")", "\n", "wrong_float", "=", "isinstance", "(", "swa_lrs", ",", "float", ")", "and", "swa_lrs", "<=", "0", "\n", "wrong_list", "=", "isinstance", "(", "swa_lrs", ",", "list", ")", "and", "not", "all", "(", "lr", ">", "0", "and", "isinstance", "(", "lr", ",", "float", ")", "for", "lr", "in", "swa_lrs", ")", "\n", "if", "(", "swa_lrs", "is", "not", "None", "and", "(", "wrong_type", "or", "wrong_float", "or", "wrong_list", ")", ")", ":", "\n", "            ", "raise", "MisconfigurationException", "(", "\"The `swa_lrs` should be a positive float or a list of positive float.\"", ")", "\n", "\n", "", "if", "avg_fn", "is", "not", "None", "and", "not", "isinstance", "(", "avg_fn", ",", "Callable", ")", ":", "\n", "            ", "raise", "MisconfigurationException", "(", "\"The `avg_fn` should be callable.\"", ")", "\n", "\n", "", "if", "device", "is", "not", "None", "and", "not", "isinstance", "(", "device", ",", "(", "torch", ".", "device", ",", "str", ")", ")", ":", "\n", "            ", "raise", "MisconfigurationException", "(", "f\"device is expected to be a torch.device or a str. Found {device}\"", ")", "\n", "", "self", ".", "swa_freq", "=", "swa_freq", "\n", "self", ".", "_swa_epoch_start", "=", "swa_epoch_start", "\n", "self", ".", "_swa_lrs", "=", "swa_lrs", "\n", "self", ".", "_annealing_epochs", "=", "annealing_epochs", "\n", "self", ".", "_annealing_strategy", "=", "annealing_strategy", "\n", "self", ".", "_avg_fn", "=", "avg_fn", "or", "self", ".", "avg_fn", "\n", "self", ".", "_device", "=", "device", "\n", "self", ".", "_model_contains_batch_norm", "=", "None", "\n", "self", ".", "_average_model", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.helpers.swa_callback.StochasticWeightAveraging.swa_start": [[128, 131], ["max"], "methods", ["None"], ["", "@", "property", "\n", "def", "swa_start", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "max", "(", "self", ".", "_swa_epoch_start", "-", "1", ",", "0", ")", "# 0-based", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.helpers.swa_callback.StochasticWeightAveraging.swa_end": [[132, 135], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "swa_end", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "self", ".", "_max_epochs", "-", "1", "# 0-based", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.helpers.swa_callback.StochasticWeightAveraging.pl_module_contains_batch_norm": [[136, 139], ["any", "isinstance", "pl_module.modules"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "pl_module_contains_batch_norm", "(", "pl_module", ":", "'pl.LightningModule'", ")", ":", "\n", "        ", "return", "any", "(", "isinstance", "(", "module", ",", "nn", ".", "modules", ".", "batchnorm", ".", "_BatchNorm", ")", "for", "module", "in", "pl_module", ".", "modules", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.helpers.swa_callback.StochasticWeightAveraging.on_before_accelerator_backend_setup": [[140, 143], ["copy.deepcopy"], "methods", ["None"], ["", "def", "on_before_accelerator_backend_setup", "(", "self", ",", "trainer", ":", "'pl.Trainer'", ",", "pl_module", ":", "'pl.LightningModule'", ")", ":", "\n", "# copy the model before moving it to accelerator device.", "\n", "        ", "self", ".", "_average_model", "=", "deepcopy", "(", "pl_module", ".", "net", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.helpers.swa_callback.StochasticWeightAveraging.on_fit_start": [[144, 164], ["isinstance", "swa_callback.StochasticWeightAveraging.pl_module_contains_batch_norm", "len", "pytorch_lightning.utilities.exceptions.MisconfigurationException", "len", "pytorch_lightning.utilities.exceptions.MisconfigurationException", "int", "print"], "methods", ["home.repos.pwc.inspect_result.kkoutini_passt.helpers.swa_callback.StochasticWeightAveraging.pl_module_contains_batch_norm"], ["", "def", "on_fit_start", "(", "self", ",", "trainer", ":", "'pl.Trainer'", ",", "pl_module", ":", "'pl.LightningModule'", ")", ":", "\n", "        ", "optimizers", "=", "trainer", ".", "optimizers", "\n", "lr_schedulers", "=", "trainer", ".", "lr_schedulers", "\n", "\n", "if", "len", "(", "optimizers", ")", "!=", "1", ":", "\n", "            ", "raise", "MisconfigurationException", "(", "\"SWA currently works with 1 `optimizer`.\"", ")", "\n", "\n", "", "if", "len", "(", "lr_schedulers", ")", ">", "1", ":", "\n", "            ", "raise", "MisconfigurationException", "(", "\"SWA currently not supported for more than 1 `lr_scheduler`.\"", ")", "\n", "\n", "", "if", "isinstance", "(", "self", ".", "_swa_epoch_start", ",", "float", ")", ":", "\n", "            ", "self", ".", "_swa_epoch_start", "=", "int", "(", "trainer", ".", "max_epochs", "*", "self", ".", "_swa_epoch_start", ")", "\n", "\n", "", "self", ".", "_model_contains_batch_norm", "=", "self", ".", "pl_module_contains_batch_norm", "(", "pl_module", ")", "\n", "\n", "self", ".", "_max_epochs", "=", "trainer", ".", "max_epochs", "\n", "if", "self", ".", "_model_contains_batch_norm", ":", "\n", "            ", "print", "(", "\"\\n\\n_model_contains_batch_norm\\n\\n\"", ")", "\n", "# virtually increase max_epochs to perform batch norm update on latest epoch.", "\n", "trainer", ".", "max_epochs", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.helpers.swa_callback.StochasticWeightAveraging.on_train_epoch_start": [[165, 201], ["print", "swa_callback.StochasticWeightAveraging._average_model.to", "SWALR", "torch.tensor", "swa_callback.StochasticWeightAveraging.update_parameters", "isinstance"], "methods", ["home.repos.pwc.inspect_result.kkoutini_passt.helpers.swa_callback.StochasticWeightAveraging.update_parameters"], ["", "", "def", "on_train_epoch_start", "(", "self", ",", "trainer", ":", "'pl.Trainer'", ",", "pl_module", ":", "'pl.LightningModule'", ")", ":", "\n", "        ", "if", "trainer", ".", "current_epoch", "==", "self", ".", "swa_start", ":", "\n", "            ", "print", "(", "f\"\\n\\n SWA START at {trainer.current_epoch}\\n\\n\"", ")", "\n", "# move average model to request device.", "\n", "self", ".", "_average_model", "=", "self", ".", "_average_model", ".", "to", "(", "self", ".", "_device", "or", "pl_module", ".", "device", ")", "\n", "\n", "optimizers", "=", "trainer", ".", "optimizers", "\n", "\n", "for", "param_group", "in", "optimizers", "[", "0", "]", ".", "param_groups", ":", "\n", "                ", "if", "self", ".", "_swa_lrs", "is", "None", ":", "\n", "                    ", "initial_lr", "=", "param_group", "[", "\"lr\"", "]", "\n", "\n", "", "elif", "isinstance", "(", "self", ".", "_swa_lrs", ",", "float", ")", ":", "\n", "                    ", "initial_lr", "=", "self", ".", "_swa_lrs", "\n", "\n", "", "else", ":", "\n", "                    ", "initial_lr", "=", "self", ".", "_swa_lrs", "[", "0", "]", "\n", "\n", "", "param_group", "[", "\"initial_lr\"", "]", "=", "initial_lr", "\n", "\n", "", "self", ".", "_swa_lrs", "=", "initial_lr", "\n", "\n", "self", ".", "_swa_scheduler", "=", "SWALR", "(", "\n", "optimizers", "[", "0", "]", ",", "\n", "swa_lr", "=", "initial_lr", ",", "\n", "anneal_epochs", "=", "self", ".", "_annealing_epochs", ",", "\n", "anneal_strategy", "=", "self", ".", "_annealing_strategy", ",", "\n", "last_epoch", "=", "trainer", ".", "max_epochs", "if", "self", ".", "_annealing_strategy", "==", "\"cos\"", "else", "-", "1", "\n", ")", "\n", "\n", "\n", "self", ".", "n_averaged", "=", "torch", ".", "tensor", "(", "0", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "pl_module", ".", "device", ")", "\n", "pl_module", ".", "net_swa", "=", "self", ".", "_average_model", "\n", "", "if", "(", "self", ".", "swa_start", "<=", "trainer", ".", "current_epoch", "<=", "self", ".", "swa_end", ")", "and", "(", "(", "trainer", ".", "current_epoch", "-", "self", ".", "swa_start", ")", "%", "self", ".", "swa_freq", "==", "0", ")", ":", "\n", "            ", "self", ".", "update_parameters", "(", "self", ".", "_average_model", ",", "pl_module", ".", "net", ",", "self", ".", "n_averaged", ",", "self", ".", "avg_fn", ")", "\n", "pl_module", ".", "net_swa", "=", "self", ".", "_average_model", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.helpers.swa_callback.StochasticWeightAveraging.on_train_epoch_end": [[204, 206], ["None"], "methods", ["None"], ["", "", "def", "on_train_epoch_end", "(", "self", ",", "trainer", ":", "'pl.Trainer'", ",", "pl_module", ":", "'pl.LightningModule'", ",", "*", "args", ")", ":", "\n", "        ", "trainer", ".", "train_loop", ".", "_skip_backward", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.helpers.swa_callback.StochasticWeightAveraging.on_train_end": [[208, 210], ["None"], "methods", ["None"], ["", "def", "on_train_end", "(", "self", ",", "trainer", ":", "'pl.Trainer'", ",", "pl_module", ":", "'pl.LightningModule'", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.helpers.swa_callback.StochasticWeightAveraging.on_validation_epoch_start": [[212, 218], ["None"], "methods", ["None"], ["", "def", "on_validation_epoch_start", "(", "self", ",", "trainer", ",", "pl_module", ")", "->", "None", ":", "\n", "        ", "\"\"\"Called when the val epoch begins.\"\"\"", "\n", "if", "(", "self", ".", "swa_start", "<=", "trainer", ".", "current_epoch", "<=", "self", ".", "swa_end", ")", "and", "(", "(", "trainer", ".", "current_epoch", "-", "self", ".", "swa_start", ")", "%", "self", ".", "swa_freq", "==", "0", ")", ":", "\n", "            ", "pl_module", ".", "do_swa", "=", "True", "\n", "", "else", ":", "\n", "            ", "pl_module", ".", "do_swa", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.helpers.swa_callback.StochasticWeightAveraging.on_validation_epoch_end": [[219, 222], ["None"], "methods", ["None"], ["", "", "def", "on_validation_epoch_end", "(", "self", ",", "trainer", ",", "pl_module", ",", "outputs", ")", "->", "None", ":", "\n", "        ", "\"\"\"Called when the val epoch ends.\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.helpers.swa_callback.StochasticWeightAveraging.transfer_weights": [[223, 227], ["zip", "src_pl_module.parameters", "dst_pl_module.parameters", "dst_param.detach().copy_", "src_param.to", "dst_param.detach"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "transfer_weights", "(", "src_pl_module", ":", "'pl.LightningModule'", ",", "dst_pl_module", ":", "'pl.LightningModule'", ")", ":", "\n", "        ", "for", "src_param", ",", "dst_param", "in", "zip", "(", "src_pl_module", ".", "parameters", "(", ")", ",", "dst_pl_module", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "dst_param", ".", "detach", "(", ")", ".", "copy_", "(", "src_param", ".", "to", "(", "dst_param", ".", "device", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.helpers.swa_callback.StochasticWeightAveraging.reset_batch_norm_and_save_state": [[228, 245], ["pl_module.modules", "torch.zeros_like", "torch.ones_like", "isinstance"], "methods", ["None"], ["", "", "def", "reset_batch_norm_and_save_state", "(", "self", ",", "pl_module", ")", ":", "\n", "        ", "\"\"\"\n        Adapted from https://github.com/pytorch/pytorch/blob/v1.7.1/torch/optim/swa_utils.py#L140-L154\n        \"\"\"", "\n", "self", ".", "momenta", "=", "{", "}", "\n", "for", "module", "in", "pl_module", ".", "modules", "(", ")", ":", "\n", "            ", "if", "not", "isinstance", "(", "module", ",", "nn", ".", "modules", ".", "batchnorm", ".", "_BatchNorm", ")", ":", "\n", "                ", "continue", "\n", "", "module", ".", "running_mean", "=", "torch", ".", "zeros_like", "(", "\n", "module", ".", "running_mean", ",", "device", "=", "pl_module", ".", "device", ",", "dtype", "=", "module", ".", "running_mean", ".", "dtype", "\n", ")", "\n", "module", ".", "running_var", "=", "torch", ".", "ones_like", "(", "\n", "module", ".", "running_var", ",", "device", "=", "pl_module", ".", "device", ",", "dtype", "=", "module", ".", "running_var", ".", "dtype", "\n", ")", "\n", "self", ".", "momenta", "[", "module", "]", "=", "module", ".", "momentum", "\n", "module", ".", "momentum", "=", "None", "\n", "module", ".", "num_batches_tracked", "*=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.helpers.swa_callback.StochasticWeightAveraging.reset_momenta": [[246, 252], ["swa_callback.StochasticWeightAveraging.momenta.keys"], "methods", ["None"], ["", "", "def", "reset_momenta", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Adapted from https://github.com/pytorch/pytorch/blob/v1.7.1/torch/optim/swa_utils.py#L164-L165\n        \"\"\"", "\n", "for", "bn_module", "in", "self", ".", "momenta", ".", "keys", "(", ")", ":", "\n", "            ", "bn_module", ".", "momentum", "=", "self", ".", "momenta", "[", "bn_module", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.helpers.swa_callback.StochasticWeightAveraging.update_parameters": [[253, 267], ["zip", "average_model.parameters", "model.parameters", "p_swa.detach", "p_model.detach().to", "p_swa.detach.copy_", "swa_callback.StochasticWeightAveraging.avg_fn"], "methods", ["home.repos.pwc.inspect_result.kkoutini_passt.helpers.swa_callback.StochasticWeightAveraging.avg_fn"], ["", "", "@", "staticmethod", "\n", "def", "update_parameters", "(", "\n", "average_model", ",", "model", ",", "n_averaged", ":", "torch", ".", "LongTensor", ",", "avg_fn", ":", "_AVG_FN", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Adapted from https://github.com/pytorch/pytorch/blob/v1.7.1/torch/optim/swa_utils.py#L104-L112\n        \"\"\"", "\n", "for", "p_swa", ",", "p_model", "in", "zip", "(", "average_model", ".", "parameters", "(", ")", ",", "model", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "device", "=", "p_swa", ".", "device", "\n", "p_swa_", "=", "p_swa", ".", "detach", "(", ")", "\n", "p_model_", "=", "p_model", ".", "detach", "(", ")", ".", "to", "(", "device", ")", "\n", "src", "=", "p_model_", "if", "n_averaged", "==", "0", "else", "avg_fn", "(", "p_swa_", ",", "p_model_", ",", "n_averaged", ".", "to", "(", "device", ")", ")", "\n", "p_swa_", ".", "copy_", "(", "src", ")", "\n", "", "n_averaged", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.helpers.swa_callback.StochasticWeightAveraging.avg_fn": [[268, 276], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "avg_fn", "(", "\n", "averaged_model_parameter", ":", "torch", ".", "Tensor", ",", "model_parameter", ":", "torch", ".", "Tensor", ",", "num_averaged", ":", "torch", ".", "LongTensor", "\n", ")", "->", "torch", ".", "FloatTensor", ":", "\n", "        ", "\"\"\"\n        Adapted from https://github.com/pytorch/pytorch/blob/v1.7.1/torch/optim/swa_utils.py#L95-L97\n        \"\"\"", "\n", "return", "averaged_model_parameter", "+", "(", "model_parameter", "-", "averaged_model_parameter", ")", "/", "(", "num_averaged", "+", "1", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kkoutini_passt.helpers.ramp.pseudo_rampup": [[8, 19], ["None"], "function", ["None"], ["def", "pseudo_rampup", "(", "T1", ",", "T2", ")", ":", "\n", "    ", "def", "warpper", "(", "epoch", ")", ":", "\n", "        ", "if", "epoch", ">", "T1", ":", "\n", "            ", "alpha", "=", "(", "epoch", "-", "T1", ")", "/", "(", "T2", "-", "T1", ")", "\n", "if", "epoch", ">", "T2", ":", "\n", "                ", "alpha", "=", "1.0", "\n", "", "", "else", ":", "\n", "            ", "alpha", "=", "0.0", "\n", "", "return", "alpha", "\n", "\n", "", "return", "warpper", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.helpers.ramp.exp_rampup": [[21, 31], ["numpy.clip", "float", "numpy.exp"], "function", ["None"], ["", "def", "exp_rampup", "(", "rampup_length", ")", ":", "\n", "    ", "\"\"\"Exponential rampup from https://arxiv.org/abs/1610.02242\"\"\"", "\n", "def", "warpper", "(", "epoch", ")", ":", "\n", "        ", "if", "epoch", "<", "rampup_length", ":", "\n", "            ", "epoch", "=", "np", ".", "clip", "(", "epoch", ",", "0.5", ",", "rampup_length", ")", "\n", "phase", "=", "1.0", "-", "epoch", "/", "rampup_length", "\n", "return", "float", "(", "np", ".", "exp", "(", "-", "5.0", "*", "phase", "*", "phase", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "1.0", "\n", "", "", "return", "warpper", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.helpers.ramp.linear_rampup": [[33, 43], ["None"], "function", ["None"], ["", "def", "linear_rampup", "(", "rampup_length", ")", ":", "\n", "    ", "\"\"\"Linear rampup\"\"\"", "\n", "\n", "def", "warpper", "(", "epoch", ")", ":", "\n", "        ", "if", "epoch", "<", "rampup_length", ":", "\n", "            ", "return", "epoch", "/", "rampup_length", "\n", "", "else", ":", "\n", "            ", "return", "1.0", "\n", "\n", "", "", "return", "warpper", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.helpers.ramp.linear_rampdown": [[45, 55], ["None"], "function", ["None"], ["", "def", "linear_rampdown", "(", "rampdown_length", ",", "start", "=", "0", ",", "last_value", "=", "0", ")", ":", "\n", "    ", "\"\"\"Linear rampup -(start)- (rampdown_length) \\ _(for the rest)  \"\"\"", "\n", "def", "warpper", "(", "epoch", ")", ":", "\n", "        ", "if", "epoch", "<=", "start", ":", "\n", "            ", "return", "1.", "\n", "", "elif", "epoch", "-", "start", "<", "rampdown_length", ":", "\n", "            ", "return", "last_value", "+", "(", "1.", "-", "last_value", ")", "*", "(", "rampdown_length", "-", "epoch", "+", "start", ")", "/", "rampdown_length", "\n", "", "else", ":", "\n", "            ", "return", "last_value", "\n", "", "", "return", "warpper", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.helpers.ramp.exp_rampdown": [[57, 68], ["float", "numpy.exp"], "function", ["None"], ["", "def", "exp_rampdown", "(", "rampdown_length", ",", "num_epochs", ")", ":", "\n", "    ", "\"\"\"Exponential rampdown from https://arxiv.org/abs/1610.02242\"\"\"", "\n", "\n", "def", "warpper", "(", "epoch", ")", ":", "\n", "        ", "if", "epoch", ">=", "(", "num_epochs", "-", "rampdown_length", ")", ":", "\n", "            ", "ep", "=", ".5", "*", "(", "epoch", "-", "(", "num_epochs", "-", "rampdown_length", ")", ")", "\n", "return", "float", "(", "np", ".", "exp", "(", "-", "(", "ep", "*", "ep", ")", "/", "rampdown_length", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "1.0", "\n", "\n", "", "", "return", "warpper", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.helpers.ramp.cosine_rampdown": [[70, 81], ["float", "numpy.cos"], "function", ["None"], ["", "def", "cosine_rampdown", "(", "rampdown_length", ",", "num_epochs", ")", ":", "\n", "    ", "\"\"\"Cosine rampdown from https://arxiv.org/abs/1608.03983\"\"\"", "\n", "\n", "def", "warpper", "(", "epoch", ")", ":", "\n", "        ", "if", "epoch", ">=", "(", "num_epochs", "-", "rampdown_length", ")", ":", "\n", "            ", "ep", "=", ".5", "*", "(", "epoch", "-", "(", "num_epochs", "-", "rampdown_length", ")", ")", "\n", "return", "float", "(", ".5", "*", "(", "np", ".", "cos", "(", "np", ".", "pi", "*", "ep", "/", "rampdown_length", ")", "+", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "1.0", "\n", "\n", "", "", "return", "warpper", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.helpers.ramp.exp_warmup": [[83, 91], ["ramp.exp_rampup", "ramp.exp_rampdown", "exp_rampup.", "exp_rampdown."], "function", ["home.repos.pwc.inspect_result.kkoutini_passt.helpers.ramp.exp_rampup", "home.repos.pwc.inspect_result.kkoutini_passt.helpers.ramp.exp_rampdown"], ["", "def", "exp_warmup", "(", "rampup_length", ",", "rampdown_length", ",", "num_epochs", ")", ":", "\n", "    ", "rampup", "=", "exp_rampup", "(", "rampup_length", ")", "\n", "rampdown", "=", "exp_rampdown", "(", "rampdown_length", ",", "num_epochs", ")", "\n", "\n", "def", "warpper", "(", "epoch", ")", ":", "\n", "        ", "return", "rampup", "(", "epoch", ")", "*", "rampdown", "(", "epoch", ")", "\n", "\n", "", "return", "warpper", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.helpers.ramp.exp_warmup_linear_down": [[93, 99], ["ramp.exp_rampup", "ramp.linear_rampdown", "exp_rampup.", "linear_rampdown."], "function", ["home.repos.pwc.inspect_result.kkoutini_passt.helpers.ramp.exp_rampup", "home.repos.pwc.inspect_result.kkoutini_passt.helpers.ramp.linear_rampdown"], ["", "def", "exp_warmup_linear_down", "(", "warmup", ",", "rampdown_length", ",", "start_rampdown", ",", "last_value", ")", ":", "\n", "    ", "rampup", "=", "exp_rampup", "(", "warmup", ")", "\n", "rampdown", "=", "linear_rampdown", "(", "rampdown_length", ",", "start_rampdown", ",", "last_value", ")", "\n", "def", "warpper", "(", "epoch", ")", ":", "\n", "        ", "return", "rampup", "(", "epoch", ")", "*", "rampdown", "(", "epoch", ")", "\n", "", "return", "warpper", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.helpers.ramp.test_warmup": [[101, 105], ["ramp.exp_warmup", "range", "print", "exp_warmup."], "function", ["home.repos.pwc.inspect_result.kkoutini_passt.helpers.ramp.exp_warmup"], ["", "def", "test_warmup", "(", ")", ":", "\n", "    ", "warmup", "=", "exp_warmup", "(", "20", ",", "100", ",", "150", ")", "\n", "for", "ep", "in", "range", "(", "500", ")", ":", "\n", "        ", "print", "(", "warmup", "(", "ep", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.helpers.ramp.test_warmupl": [[107, 111], ["ramp.exp_warmup_linear_down", "range", "print", "exp_warmup_linear_down."], "function", ["home.repos.pwc.inspect_result.kkoutini_passt.helpers.ramp.exp_warmup_linear_down"], ["", "", "def", "test_warmupl", "(", ")", ":", "\n", "    ", "warmup", "=", "exp_warmup_linear_down", "(", "20", ",", "100", ",", "50", ",", "0.001", ")", "\n", "for", "ep", "in", "range", "(", "500", ")", ":", "\n", "        ", "print", "(", "warmup", "(", "ep", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.helpers.ramp.cosine_cycle": [[113, 123], ["print", "float", "numpy.cos"], "function", ["None"], ["", "", "def", "cosine_cycle", "(", "cycle_len", "=", "20", ",", "ramp_down_start", "=", "100", ",", "last_lr_value", "=", "0.01", ")", ":", "\n", "    ", "\"\"\"Cosine rampdown from https://arxiv.org/abs/1608.03983\"\"\"", "\n", "ramp_down_start", "=", "cycle_len", "+", "(", "ramp_down_start", "-", "1", ")", "//", "cycle_len", "*", "(", "cycle_len", ")", "\n", "print", "(", "\"adjusted ramp_down_start:\"", ",", "ramp_down_start", ")", "\n", "def", "warpper", "(", "epoch", ")", ":", "\n", "        ", "ep", "=", "(", "epoch", "+", "cycle_len", "//", "2.", ")", "/", "(", "1.", "*", "cycle_len", ")", "\n", "if", "epoch", ">", "ramp_down_start", ":", "\n", "            ", "return", "last_lr_value", "\n", "", "return", "float", "(", "last_lr_value", "+", "(", "1.", "-", "last_lr_value", ")", "*", ".5", "*", "(", "np", ".", "cos", "(", "2.", "*", "np", ".", "pi", "*", "ep", ")", "+", "1", ")", ")", "\n", "", "return", "warpper", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.helpers.mixup.my_mixup": [[5, 13], ["torch.randperm", "numpy.random.beta().astype", "numpy.concatenate().max", "torch.FloatTensor", "numpy.random.beta", "numpy.concatenate"], "function", ["None"], ["def", "my_mixup", "(", "size", ",", "alpha", ")", ":", "\n", "    ", "rn_indices", "=", "torch", ".", "randperm", "(", "size", ")", "\n", "lambd", "=", "np", ".", "random", ".", "beta", "(", "alpha", ",", "alpha", ",", "size", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "lambd", "=", "np", ".", "concatenate", "(", "[", "lambd", "[", ":", ",", "None", "]", ",", "1", "-", "lambd", "[", ":", ",", "None", "]", "]", ",", "1", ")", ".", "max", "(", "1", ")", "\n", "lam", "=", "torch", ".", "FloatTensor", "(", "lambd", ")", "\n", "# data = data * lam + data2 * (1 - lam)", "\n", "# targets = targets * lam + targets2 * (1 - lam)", "\n", "return", "rn_indices", ",", "lam", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.helpers.workersinit.worker_init_fn": [[6, 13], ["numpy.random.seed", "random.seed", "torch.manual_seed", "torch.initial_seed"], "function", ["None"], ["def", "worker_init_fn", "(", "x", ")", ":", "\n", "    ", "seed", "=", "(", "torch", ".", "initial_seed", "(", ")", "+", "x", "*", "1000", ")", "%", "2", "**", "31", "# problem with nearly seeded randoms", "\n", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "return", "\n", "", ""]], "home.repos.pwc.inspect_result.kkoutini_passt.helpers.audiodatasets.AudioPreprocessDataset.__init__": [[23, 35], ["print"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "files", ",", "labels", ",", "label_encoder", ",", "base_dir", ",", "preprocessor", ",", "return_tensor", "=", "True", ",", "ordered_ids", "=", "None", ")", ":", "\n", "        ", "self", ".", "files", "=", "files", "\n", "if", "ordered_ids", "is", "None", ":", "\n", "            ", "ordered_ids", "=", "files", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"AudioPreprocessDataset: ordered_ids is not None using it instead of files !!!\"", ")", "\n", "", "self", ".", "ordered_ids", "=", "ordered_ids", "\n", "self", ".", "labels", "=", "labels", "\n", "self", ".", "label_encoder", "=", "label_encoder", "\n", "self", ".", "base_dir", "=", "base_dir", "\n", "self", ".", "preprocessor", "=", "preprocessor", "\n", "self", ".", "return_tensor", "=", "return_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.helpers.audiodatasets.AudioPreprocessDataset.__getitem__": [[36, 41], ["audiodatasets.AudioPreprocessDataset.preprocessor", "torch.from_numpy", "isinstance"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "x", "=", "self", ".", "preprocessor", "(", "self", ".", "base_dir", "+", "self", ".", "files", "[", "index", "]", ")", "\n", "if", "self", ".", "return_tensor", "and", "not", "isinstance", "(", "x", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "x", "=", "torch", ".", "from_numpy", "(", "x", ")", "\n", "", "return", "x", ",", "self", ".", "ordered_ids", "[", "index", "]", ",", "self", ".", "labels", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.helpers.audiodatasets.AudioPreprocessDataset.get_ordered_ids": [[42, 44], ["None"], "methods", ["None"], ["", "def", "get_ordered_ids", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "ordered_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.helpers.audiodatasets.AudioPreprocessDataset.get_ordered_labels": [[45, 47], ["None"], "methods", ["None"], ["", "def", "get_ordered_labels", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.helpers.audiodatasets.AudioPreprocessDataset.__len__": [[48, 50], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "ordered_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.helpers.audiodatasets.ObjectCacher.__init__": [[52, 90], ["os.path.expanduser", "os.path.join", "time.time", "audiodatasets.ObjectCacher.get_obj_cache_path", "torch.load", "logging.info", "time.time", "logging.info", "get_obj_func", "time.time", "os.path.dirname", "torch.save", "logging.info", "os.umask", "os.makedirs", "os.umask", "time.time", "logging.info"], "methods", ["home.repos.pwc.inspect_result.kkoutini_passt.helpers.audiodatasets.ObjectCacher.get_obj_cache_path"], ["    ", "def", "__init__", "(", "self", ",", "get_obj_func", ",", "dataset_name", ",", "obj_name", "=", "\"\"", ",", "\n", "cache_path", "=", "\"~/shared/kofta_cached_datasets/\"", ",", "verbose", "=", "True", ")", ":", "\n", "        ", "self", ".", "dataset_name", "=", "dataset_name", "\n", "self", ".", "obj_name", "=", "obj_name", "\n", "cache_path", "=", "expanduser", "(", "cache_path", ")", "\n", "self", ".", "cache_path", "=", "os", ".", "path", ".", "join", "(", "cache_path", ",", "dataset_name", ")", "\n", "try", ":", "\n", "            ", "startTime", "=", "time", ".", "time", "(", ")", "\n", "xpath", "=", "self", ".", "get_obj_cache_path", "(", ")", "\n", "\n", "if", "verbose", ":", "\n", "                ", "logging", ".", "info", "(", "\n", "\"attempting to load x from cache at \"", "+", "xpath", "+", "\"...\"", ")", "\n", "", "self", ".", "obj", "=", "torch", ".", "load", "(", "xpath", ")", "\n", "\n", "if", "verbose", ":", "\n", "                ", "endTime", "=", "time", ".", "time", "(", ")", "\n", "logging", ".", "info", "(", "\n", "\"loaded \"", "+", "xpath", "+", "\" from cache in %s \"", "%", "(", "endTime", "-", "startTime", ")", ")", "\n", "", "", "except", "IOError", ":", "\n", "            ", "if", "verbose", ":", "\n", "                ", "logging", ".", "info", "(", "\n", "\"Invalid cache \"", "+", "xpath", "+", "\" , recomputing\"", ")", "\n", "", "self", ".", "obj", "=", "get_obj_func", "(", ")", "\n", "saveStartTime", "=", "time", ".", "time", "(", ")", "\n", "dirpath", "=", "os", ".", "path", ".", "dirname", "(", "xpath", ")", "\n", "try", ":", "\n", "                ", "original_umask", "=", "os", ".", "umask", "(", "0", ")", "\n", "os", ".", "makedirs", "(", "dirpath", ",", "exist_ok", "=", "True", ")", "\n", "", "finally", ":", "\n", "                ", "os", ".", "umask", "(", "original_umask", ")", "\n", "", "torch", ".", "save", "(", "self", ".", "obj", ",", "xpath", ")", "\n", "if", "verbose", ":", "\n", "                ", "endTime", "=", "time", ".", "time", "(", ")", "\n", "logging", ".", "info", "(", "\n", "\"loaded \"", "+", "obj_name", "+", "\" in %s, and cached in %s, total %s seconds \"", "%", "(", "\n", "(", "saveStartTime", "-", "startTime", ")", ",", "\n", "(", "endTime", "-", "saveStartTime", ")", ",", "(", "endTime", "-", "startTime", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.helpers.audiodatasets.ObjectCacher.get_obj_cache_path": [[91, 93], ["os.path.join"], "methods", ["None"], ["", "", "", "def", "get_obj_cache_path", "(", "self", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "self", ".", "cache_path", ",", "self", ".", "obj_name", "+", "\"_obj.pt\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.helpers.audiodatasets.ObjectCacher.get": [[94, 96], ["None"], "methods", ["None"], ["", "def", "get", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "obj", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.helpers.audiodatasets.PreprocessDataset.__init__": [[106, 112], ["callable", "print", "ValueError"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "dataset", ",", "preprocessor", ")", ":", "\n", "        ", "self", ".", "dataset", "=", "dataset", "\n", "if", "not", "callable", "(", "preprocessor", ")", ":", "\n", "            ", "print", "(", "\"preprocessor: \"", ",", "preprocessor", ")", "\n", "raise", "ValueError", "(", "'preprocessor should be callable'", ")", "\n", "", "self", ".", "preprocessor", "=", "preprocessor", "\n", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.helpers.audiodatasets.PreprocessDataset.__getitem__": [[112, 114], ["audiodatasets.PreprocessDataset.preprocessor"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "self", ".", "preprocessor", "(", "self", ".", "dataset", "[", "index", "]", ")", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.helpers.audiodatasets.PreprocessDataset.__len__": [[114, 116], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.helpers.audiodatasets.FilesCachedDataset.__init__": [[120, 147], ["os.path.expanduser", "os.path.join", "os.umask", "os.makedirs", "os.umask", "get_dataset_func"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "get_dataset_func", ",", "dataset_name", ",", "x_name", "=", "\"\"", ",", "\n", "cache_path", "=", "\"~/shared/kofta_cached_datasets/\"", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n            Cached the dataset in small torch.save files (1 file per sample).\n            The dataset is suitable for SSDs being used bcache from a slow harddrive with a small\n        @param get_dataset_func: fuction gets called if the file cache is invalid\n        @param dataset_name: the folder containing the dataset\n        @param x_name: tag for the version\n        @param cache_path: cache_path\n        \"\"\"", "\n", "self", ".", "dataset", "=", "None", "\n", "\n", "def", "getDataset", "(", ")", ":", "\n", "            ", "if", "self", ".", "dataset", "==", "None", ":", "\n", "                ", "self", ".", "dataset", "=", "get_dataset_func", "(", ")", "\n", "", "return", "self", ".", "dataset", "\n", "\n", "", "self", ".", "get_dataset_func", "=", "getDataset", "\n", "self", ".", "x_name", "=", "x_name", "\n", "cache_path", "=", "expanduser", "(", "cache_path", ")", "\n", "self", ".", "cache_path", "=", "os", ".", "path", ".", "join", "(", "cache_path", ",", "dataset_name", ",", "\"files_cache\"", ",", "self", ".", "x_name", ")", "\n", "try", ":", "\n", "            ", "original_umask", "=", "os", ".", "umask", "(", "0", ")", "\n", "os", ".", "makedirs", "(", "self", ".", "cache_path", ",", "exist_ok", "=", "True", ")", "\n", "", "finally", ":", "\n", "            ", "os", ".", "umask", "(", "original_umask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.helpers.audiodatasets.FilesCachedDataset.__getitem__": [[148, 156], ["os.path.join", "torch.load", "str", "torch.save", "audiodatasets.FilesCachedDataset.get_dataset_func"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "cpath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "cache_path", ",", "str", "(", "index", ")", "+", "\".pt\"", ")", "\n", "try", ":", "\n", "            ", "return", "torch", ".", "load", "(", "cpath", ")", "\n", "", "except", "FileNotFoundError", ":", "\n", "            ", "tup", "=", "self", ".", "get_dataset_func", "(", ")", "[", "index", "]", "\n", "torch", ".", "save", "(", "tup", ",", "cpath", ")", "\n", "return", "tup", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.helpers.audiodatasets.FilesCachedDataset.get_ordered_labels": [[157, 159], ["audiodatasets.FilesCachedDataset.get_dataset_func().get_ordered_labels", "audiodatasets.FilesCachedDataset.get_dataset_func"], "methods", ["home.repos.pwc.inspect_result.kkoutini_passt.helpers.audiodatasets.SelectionDataset.get_ordered_labels"], ["", "", "def", "get_ordered_labels", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "get_dataset_func", "(", ")", ".", "get_ordered_labels", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.helpers.audiodatasets.FilesCachedDataset.get_ordered_ids": [[160, 162], ["audiodatasets.FilesCachedDataset.get_dataset_func().get_ordered_ids", "audiodatasets.FilesCachedDataset.get_dataset_func"], "methods", ["home.repos.pwc.inspect_result.kkoutini_passt.helpers.audiodatasets.SelectionDataset.get_ordered_ids"], ["", "def", "get_ordered_ids", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "get_dataset_func", "(", ")", ".", "get_ordered_ids", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.helpers.audiodatasets.FilesCachedDataset.get_xcache_path": [[163, 165], ["os.path.join"], "methods", ["None"], ["", "def", "get_xcache_path", "(", "self", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "self", ".", "cache_path", ",", "self", ".", "x_name", "+", "\"_x.pt\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.helpers.audiodatasets.FilesCachedDataset.get_ycache_path": [[166, 168], ["os.path.join"], "methods", ["None"], ["", "def", "get_ycache_path", "(", "self", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "self", ".", "cache_path", ",", "self", ".", "y_name", "+", "\"_y.pt\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.helpers.audiodatasets.FilesCachedDataset.get_sidcache_path": [[169, 171], ["os.path.join"], "methods", ["None"], ["", "def", "get_sidcache_path", "(", "self", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "self", ".", "cache_path", ",", "self", ".", "y_name", "+", "\"_sid.pt\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.helpers.audiodatasets.FilesCachedDataset.__len__": [[172, 174], ["len", "audiodatasets.FilesCachedDataset.get_dataset_func"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "get_dataset_func", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.helpers.audiodatasets.SelectionDataset.__init__": [[184, 189], ["audiodatasets.SelectionDataset.reselect"], "methods", ["home.repos.pwc.inspect_result.kkoutini_passt.helpers.audiodatasets.SelectionDataset.reselect"], ["def", "__init__", "(", "self", ",", "dataset", ",", "sample_ids", ")", ":", "\n", "        ", "self", ".", "available_indexes", "=", "[", "]", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "reselect", "(", "sample_ids", ")", "\n", "self", ".", "sample_ids", "=", "sample_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.helpers.audiodatasets.SelectionDataset.reselect": [[190, 193], ["dict", "enumerate", "audiodatasets.SelectionDataset.dataset.get_ordered_ids"], "methods", ["home.repos.pwc.inspect_result.kkoutini_passt.helpers.audiodatasets.SelectionDataset.get_ordered_ids"], ["", "def", "reselect", "(", "self", ",", "sample_ids", ")", ":", "\n", "        ", "reverse_dict", "=", "dict", "(", "[", "(", "sid", ",", "i", ")", "for", "i", ",", "sid", "in", "enumerate", "(", "self", ".", "dataset", ".", "get_ordered_ids", "(", ")", ")", "]", ")", "\n", "self", ".", "available_indexes", "=", "[", "reverse_dict", "[", "sid", "]", "for", "sid", "in", "sample_ids", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.helpers.audiodatasets.SelectionDataset.get_ordered_ids": [[194, 196], ["None"], "methods", ["None"], ["", "def", "get_ordered_ids", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "sample_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.helpers.audiodatasets.SelectionDataset.get_ordered_labels": [[197, 200], ["audiodatasets.SelectionDataset.dataset.get_ordered_labels"], "methods", ["home.repos.pwc.inspect_result.kkoutini_passt.helpers.audiodatasets.SelectionDataset.get_ordered_labels"], ["", "def", "get_ordered_labels", "(", "self", ")", ":", "\n", "        ", "labels", "=", "self", ".", "dataset", ".", "get_ordered_labels", "(", ")", "\n", "return", "[", "labels", "[", "i", "]", "for", "i", "in", "self", ".", "available_indexes", "]", "\n", "#raise NotImplementedError(\"Maybe reconsider caching only a selection Dataset. why not select after cache?\")", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.helpers.audiodatasets.SelectionDataset.__getitem__": [[202, 204], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "self", ".", "dataset", "[", "self", ".", "available_indexes", "[", "index", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.helpers.audiodatasets.SelectionDataset.__len__": [[205, 207], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "available_indexes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.helpers.audiodatasets.SimpleSelectionDataset.__init__": [[215, 218], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "dataset", ",", "available_indexes", ")", ":", "\n", "        ", "self", ".", "available_indexes", "=", "available_indexes", "\n", "self", ".", "dataset", "=", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.helpers.audiodatasets.SimpleSelectionDataset.__getitem__": [[219, 221], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "self", ".", "dataset", "[", "self", ".", "available_indexes", "[", "index", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.helpers.audiodatasets.SimpleSelectionDataset.__len__": [[222, 224], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "available_indexes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.helpers.audiodatasets.h6": [[12, 14], ["hashlib.md5().hexdigest", "hashlib.md5", "w.encode"], "function", ["None"], ["def", "h6", "(", "w", ")", ":", "\n", "    ", "return", "hashlib", ".", "md5", "(", "w", ".", "encode", "(", "'utf-8'", ")", ")", ".", "hexdigest", "(", ")", "[", ":", "6", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.openmic2008.dataset.MixupDataset.__init__": [[111, 116], ["print", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "dataset", ",", "beta", "=", "2", ",", "rate", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "beta", "=", "beta", "\n", "self", ".", "rate", "=", "rate", "\n", "self", ".", "dataset", "=", "dataset", "\n", "print", "(", "f\"Mixing up waveforms from dataset of len {len(dataset)}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.openmic2008.dataset.MixupDataset.__getitem__": [[117, 139], ["torch.as_tensor", "torch.rand", "torch.randint().item", "torch.as_tensor", "numpy.random.beta", "max", "x1.mean", "x2.mean", "x.mean", "len", "torch.stack().max", "torch.randint", "len", "torch.as_tensor", "torch.as_tensor", "torch.stack"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "x1", ",", "f1", ",", "y1", "=", "self", ".", "dataset", "[", "index", "]", "\n", "y1", "=", "torch", ".", "as_tensor", "(", "y1", ")", "\n", "if", "torch", ".", "rand", "(", "1", ")", "<", "self", ".", "rate", ":", "\n", "            ", "idx2", "=", "torch", ".", "randint", "(", "len", "(", "self", ".", "dataset", ")", ",", "(", "1", ",", ")", ")", ".", "item", "(", ")", "\n", "x2", ",", "f2", ",", "y2", "=", "self", ".", "dataset", "[", "idx2", "]", "\n", "y2", "=", "torch", ".", "as_tensor", "(", "y2", ")", "\n", "l", "=", "np", ".", "random", ".", "beta", "(", "self", ".", "beta", ",", "self", ".", "beta", ")", "\n", "l", "=", "max", "(", "l", ",", "1.", "-", "l", ")", "\n", "x1", "=", "x1", "-", "x1", ".", "mean", "(", ")", "\n", "x2", "=", "x2", "-", "x2", ".", "mean", "(", ")", "\n", "x", "=", "(", "x1", "*", "l", "+", "x2", "*", "(", "1.", "-", "l", ")", ")", "\n", "x", "=", "x", "-", "x", ".", "mean", "(", ")", "\n", "assert", "len", "(", "y1", ")", "==", "40", ",", "\"only for openmic, works this\"", "\n", "y_mask1", "=", "(", "torch", ".", "as_tensor", "(", "y1", "[", "20", ":", "]", ")", ">", "0.5", ")", ".", "float", "(", ")", "\n", "y_mask2", "=", "(", "torch", ".", "as_tensor", "(", "y2", "[", "20", ":", "]", ")", ">", "0.5", ")", ".", "float", "(", ")", "\n", "y1", "[", ":", "20", "]", "*=", "y_mask1", "\n", "y2", "[", ":", "20", "]", "*=", "y_mask2", "\n", "yres", "=", "(", "y1", "*", "l", "+", "y2", "*", "(", "1.", "-", "l", ")", ")", "\n", "yres", "[", "20", ":", "]", "=", "torch", ".", "stack", "(", "[", "y_mask1", ",", "y_mask2", "]", ")", ".", "max", "(", "dim", "=", "0", ")", ".", "values", "\n", "return", "x", ",", "f1", ",", "yres", "\n", "", "return", "x1", ",", "f1", ",", "y1", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.openmic2008.dataset.MixupDataset.__len__": [[140, 142], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.openmic2008.dataset.AudioSetDataset.__init__": [[146, 165], ["print", "h5py.File", "len", "print", "print", "open", "io.BytesIO", "f.read"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "hdf5_file", ",", "sample_rate", "=", "32000", ",", "classes_num", "=", "527", ",", "clip_length", "=", "10", ",", "augment", "=", "False", ",", "in_mem", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Reads the mp3 bytes from HDF file decodes using av and returns a fixed length audio wav\n        \"\"\"", "\n", "self", ".", "sample_rate", "=", "sample_rate", "\n", "self", ".", "hdf5_file", "=", "hdf5_file", "\n", "if", "in_mem", ":", "\n", "            ", "print", "(", "\"\\nPreloading in memory\\n\"", ")", "\n", "with", "open", "(", "hdf5_file", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "self", ".", "hdf5_file", "=", "io", ".", "BytesIO", "(", "f", ".", "read", "(", ")", ")", "\n", "", "", "with", "h5py", ".", "File", "(", "hdf5_file", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "self", ".", "length", "=", "len", "(", "f", "[", "'audio_name'", "]", ")", "\n", "print", "(", "f\"Dataset from {hdf5_file} with length {self.length}.\"", ")", "\n", "", "self", ".", "dataset_file", "=", "None", "# lazy init", "\n", "self", ".", "clip_length", "=", "clip_length", "*", "sample_rate", "\n", "self", ".", "classes_num", "=", "classes_num", "\n", "self", ".", "augment", "=", "augment", "\n", "if", "augment", ":", "\n", "            ", "print", "(", "f\"Will agument data from {hdf5_file}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.openmic2008.dataset.AudioSetDataset.open_hdf5": [[166, 168], ["h5py.File"], "methods", ["None"], ["", "", "def", "open_hdf5", "(", "self", ")", ":", "\n", "        ", "self", ".", "dataset_file", "=", "h5py", ".", "File", "(", "self", ".", "hdf5_file", ",", "'r'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.openmic2008.dataset.AudioSetDataset.__len__": [[169, 171], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.openmic2008.dataset.AudioSetDataset.__del__": [[172, 176], ["dataset.AudioSetDataset.dataset_file.close"], "methods", ["None"], ["", "def", "__del__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "dataset_file", "is", "not", "None", ":", "\n", "            ", "self", ".", "dataset_file", ".", "close", "(", ")", "\n", "self", ".", "dataset_file", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.openmic2008.dataset.AudioSetDataset.__getitem__": [[177, 202], ["[].decode", "dataset.decode_mp3", "dataset.pad_or_truncate", "dataset.AudioSetDataset.resample", "target.astype.astype.astype", "dataset.AudioSetDataset.open_hdf5", "dataset.pydub_augment", "pydub_augment.reshape"], "methods", ["home.repos.pwc.inspect_result.kkoutini_passt.audioset.dataset.decode_mp3", "home.repos.pwc.inspect_result.kkoutini_passt.audioset.dataset.pad_or_truncate", "home.repos.pwc.inspect_result.kkoutini_passt.audioset.dataset.AudioSetDataset.resample", "home.repos.pwc.inspect_result.kkoutini_passt.audioset.dataset.AudioSetDataset.open_hdf5", "home.repos.pwc.inspect_result.kkoutini_passt.audioset.dataset.pydub_augment"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"Load waveform and target of an audio clip.\n\n        Args:\n          meta: {\n            'hdf5_path': str,\n            'index_in_hdf5': int}\n        Returns:\n          data_dict: {\n            'audio_name': str,\n            'waveform': (clip_samples,),\n            'target': (classes_num,)}\n        \"\"\"", "\n", "if", "self", ".", "dataset_file", "is", "None", ":", "\n", "            ", "self", ".", "open_hdf5", "(", ")", "\n", "\n", "", "audio_name", "=", "self", ".", "dataset_file", "[", "'audio_name'", "]", "[", "index", "]", ".", "decode", "(", ")", "\n", "waveform", "=", "decode_mp3", "(", "self", ".", "dataset_file", "[", "'mp3'", "]", "[", "index", "]", ")", "\n", "if", "self", ".", "augment", ":", "\n", "            ", "waveform", "=", "pydub_augment", "(", "waveform", ")", "\n", "", "waveform", "=", "pad_or_truncate", "(", "waveform", ",", "self", ".", "clip_length", ")", "\n", "waveform", "=", "self", ".", "resample", "(", "waveform", ")", "\n", "target", "=", "self", ".", "dataset_file", "[", "'target'", "]", "[", "index", "]", "\n", "target", "=", "target", ".", "astype", "(", "np", ".", "float32", ")", "\n", "return", "waveform", ".", "reshape", "(", "1", ",", "-", "1", ")", ",", "audio_name", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.openmic2008.dataset.AudioSetDataset.resample": [[203, 218], ["Exception"], "methods", ["None"], ["", "def", "resample", "(", "self", ",", "waveform", ")", ":", "\n", "        ", "\"\"\"Resample.\n        Args:\n          waveform: (clip_samples,)\n        Returns:\n          (resampled_clip_samples,)\n        \"\"\"", "\n", "if", "self", ".", "sample_rate", "==", "32000", ":", "\n", "            ", "return", "waveform", "\n", "", "elif", "self", ".", "sample_rate", "==", "16000", ":", "\n", "            ", "return", "waveform", "[", "0", ":", ":", "2", "]", "\n", "", "elif", "self", ".", "sample_rate", "==", "8000", ":", "\n", "            ", "return", "waveform", "[", "0", ":", ":", "4", "]", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'Incorrect sample rate!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.openmic2008.dataset.DistributedSamplerWrapper.__init__": [[299, 308], ["torch.utils.data.DistributedSampler.__init__"], "methods", ["home.repos.pwc.inspect_result.kkoutini_passt.audioset.dataset.DistributedSamplerWrapper.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "sampler", ",", "dataset", ",", "\n", "num_replicas", "=", "None", ",", "\n", "rank", "=", "None", ",", "\n", "shuffle", ":", "bool", "=", "True", ")", ":", "\n", "        ", "super", "(", "DistributedSamplerWrapper", ",", "self", ")", ".", "__init__", "(", "\n", "dataset", ",", "num_replicas", ",", "rank", ",", "shuffle", ")", "\n", "# source: @awaelchli https://github.com/PyTorchLightning/pytorch-lightning/issues/3238", "\n", "self", ".", "sampler", "=", "sampler", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.openmic2008.dataset.DistributedSamplerWrapper.__iter__": [[309, 318], ["dataset.DistributedSamplerWrapper.sampler.generator.manual_seed", "list", "iter", "torch.Generator", "print"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "sampler", ".", "generator", "is", "None", ":", "\n", "            ", "self", ".", "sampler", ".", "generator", "=", "torch", ".", "Generator", "(", ")", "\n", "", "self", ".", "sampler", ".", "generator", ".", "manual_seed", "(", "self", ".", "seed", "+", "self", ".", "epoch", ")", "\n", "indices", "=", "list", "(", "self", ".", "sampler", ")", "\n", "if", "self", ".", "epoch", "==", "0", ":", "\n", "            ", "print", "(", "f\"\\n DistributedSamplerWrapper :  {indices[:10]} \\n\\n\"", ")", "\n", "", "indices", "=", "indices", "[", "self", ".", "rank", ":", "self", ".", "total_size", ":", "self", ".", "num_replicas", "]", "\n", "return", "iter", "(", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.openmic2008.dataset.default_config": [[28, 42], ["None"], "function", ["None"], ["@", "dataset", ".", "config", "\n", "def", "default_config", "(", ")", ":", "\n", "    ", "name", "=", "'openmic2008'", "# dataset name", "\n", "normalize", "=", "False", "# normalize dataset", "\n", "subsample", "=", "False", "# subsample squares from the dataset", "\n", "roll", "=", "True", "# apply roll augmentation", "\n", "fold", "=", "1", "\n", "base_dir", "=", "\"audioset_hdf5s/\"", "# base directory of the dataset as downloaded", "\n", "if", "LMODE", ":", "\n", "        ", "base_dir", "=", "\"/system/user/publicdata/CP/audioset/audioset_hdf5s/\"", "\n", "", "openmic_train_hdf5", "=", "base_dir", "+", "\"mp3/openmic_train.csv_mp3.hdf\"", "\n", "openmic_test_hdf5", "=", "base_dir", "+", "\"mp3/openmic_test.csv_mp3.hdf\"", "\n", "ir_path", "=", "base_dir", "+", "\"irs/\"", "\n", "num_of_classes", "=", "20", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.openmic2008.dataset.decode_mp3": [[47, 63], ["av.open", "next", "enumerate", "numpy.concatenate", "io.BytesIO", "av.open.demux", "packet.decode", "RuntimeError", "mp3_arr.tobytes", "a.append", "frame.to_ndarray().reshape", "frame.to_ndarray"], "function", ["None"], ["", "def", "decode_mp3", "(", "mp3_arr", ")", ":", "\n", "    ", "\"\"\"\n    decodes an array if uint8 representing an mp3 file\n    :rtype: np.array\n    \"\"\"", "\n", "container", "=", "av", ".", "open", "(", "io", ".", "BytesIO", "(", "mp3_arr", ".", "tobytes", "(", ")", ")", ")", "\n", "stream", "=", "next", "(", "s", "for", "s", "in", "container", ".", "streams", "if", "s", ".", "type", "==", "'audio'", ")", "\n", "# print(stream)", "\n", "a", "=", "[", "]", "\n", "for", "i", ",", "packet", "in", "enumerate", "(", "container", ".", "demux", "(", "stream", ")", ")", ":", "\n", "        ", "for", "frame", "in", "packet", ".", "decode", "(", ")", ":", "\n", "            ", "a", ".", "append", "(", "frame", ".", "to_ndarray", "(", ")", ".", "reshape", "(", "-", "1", ")", ")", "\n", "", "", "waveform", "=", "np", ".", "concatenate", "(", "a", ")", "\n", "if", "waveform", ".", "dtype", "!=", "'float32'", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"Unexpected wave type\"", ")", "\n", "", "return", "waveform", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.openmic2008.dataset.pad_or_truncate": [[65, 71], ["len", "numpy.concatenate", "numpy.zeros", "len"], "function", ["None"], ["", "def", "pad_or_truncate", "(", "x", ",", "audio_length", ")", ":", "\n", "    ", "\"\"\"Pad all audio to specific length.\"\"\"", "\n", "if", "len", "(", "x", ")", "<=", "audio_length", ":", "\n", "        ", "return", "np", ".", "concatenate", "(", "(", "x", ",", "np", ".", "zeros", "(", "audio_length", "-", "len", "(", "x", ")", ",", "dtype", "=", "np", ".", "float32", ")", ")", ",", "axis", "=", "0", ")", "\n", "", "else", ":", "\n", "        ", "return", "x", "[", "0", ":", "audio_length", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.openmic2008.dataset.get_ir_sample": [[76, 93], ["sorted", "print", "range", "len", "print", "int", "pathlib.Path().rglob", "str().rsplit", "librosa.load", "numpy.random.randint", "len", "pathlib.Path", "str", "os.path.expanduser"], "function", ["None"], ["@", "dataset", ".", "command", "\n", "def", "get_ir_sample", "(", "ir_path", ",", "_run", ",", "ir_augment", ",", "cut_irs_offset", "=", "None", ")", ":", "\n", "    ", "if", "not", "ir_augment", ":", "\n", "        ", "return", "\n", "", "global", "irs_arr", "\n", "if", "irs_arr", "is", "None", ":", "\n", "        ", "all_paths", "=", "[", "path", "for", "path", "in", "pathlib", ".", "Path", "(", "os", ".", "path", ".", "expanduser", "(", "ir_path", ")", ")", ".", "rglob", "(", "'*.wav'", ")", "]", "\n", "all_paths", "=", "sorted", "(", "all_paths", ")", "\n", "if", "cut_irs_offset", "is", "not", "None", ":", "\n", "            ", "all_paths", "=", "all_paths", "[", "cut_irs_offset", ":", "cut_irs_offset", "+", "10", "]", "\n", "", "all_paths_name", "=", "[", "str", "(", "p", ")", ".", "rsplit", "(", "\"/\"", ",", "1", ")", "[", "-", "1", "]", "for", "p", "in", "all_paths", "]", "\n", "print", "(", "\"will use these IRs:\"", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "all_paths_name", ")", ")", ":", "\n", "            ", "print", "(", "i", ",", "\": \"", ",", "all_paths_name", "[", "i", "]", ")", "\n", "", "_run", ".", "info", "[", "\"ir_devices\"", "]", "=", "all_paths_name", "\n", "irs_arr", "=", "[", "librosa", ".", "load", "(", "p", ",", "sr", "=", "32000", ")", "[", "0", "]", "for", "p", "in", "all_paths", "]", "\n", "", "return", "irs_arr", "[", "int", "(", "np", ".", "random", ".", "randint", "(", "0", ",", "len", "(", "irs_arr", ")", ")", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.openmic2008.dataset.pydub_augment": [[95, 105], ["dataset.get_ir_sample", "scipy.signal.convolve", "torch.rand", "torch.randint().item", "torch.randint"], "function", ["home.repos.pwc.inspect_result.kkoutini_passt.audioset.dataset.get_ir_sample"], ["", "@", "dataset", ".", "command", "\n", "def", "pydub_augment", "(", "waveform", ",", "gain_augment", "=", "7", ",", "ir_augment", "=", "0", ")", ":", "\n", "    ", "if", "ir_augment", "and", "torch", ".", "rand", "(", "1", ")", "<", "ir_augment", ":", "\n", "        ", "ir", "=", "get_ir_sample", "(", ")", "\n", "waveform", "=", "convolve", "(", "waveform", ",", "ir", ",", "'full'", ")", "\n", "", "if", "gain_augment", ":", "\n", "        ", "gain", "=", "torch", ".", "randint", "(", "gain_augment", "*", "2", ",", "(", "1", ",", ")", ")", ".", "item", "(", ")", "-", "gain_augment", "\n", "amp", "=", "10", "**", "(", "gain", "/", "20", ")", "\n", "waveform", "=", "waveform", "*", "amp", "\n", "", "return", "waveform", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.openmic2008.dataset.get_base_training_set": [[220, 224], ["dataset.AudioSetDataset"], "function", ["None"], ["", "", "", "@", "dataset", ".", "command", "\n", "def", "get_base_training_set", "(", "openmic_train_hdf5", ")", ":", "\n", "    ", "ds", "=", "AudioSetDataset", "(", "openmic_train_hdf5", ",", "augment", "=", "True", ")", "\n", "return", "ds", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.openmic2008.dataset.get_ft_weighted_sampler": [[226, 239], ["sacred.config.CMD", "int", "int", "max", "print", "int", "dataset.DistributedSamplerWrapper", "os.environ.get", "os.environ.get", "os.environ.get", "torch.utils.data.WeightedRandomSampler", "range"], "function", ["home.repos.pwc.inspect_result.kkoutini_passt.helpers.audiodatasets.ObjectCacher.get", "home.repos.pwc.inspect_result.kkoutini_passt.helpers.audiodatasets.ObjectCacher.get", "home.repos.pwc.inspect_result.kkoutini_passt.helpers.audiodatasets.ObjectCacher.get"], ["", "@", "dataset", ".", "command", "\n", "def", "get_ft_weighted_sampler", "(", "samples_weights", "=", "CMD", "(", "\".get_ft_cls_balanced_sample_weights\"", ")", ",", "\n", "epoch_len", "=", "100000", ",", "sampler_replace", "=", "False", ")", ":", "\n", "    ", "num_nodes", "=", "int", "(", "os", ".", "environ", ".", "get", "(", "'num_nodes'", ",", "1", ")", ")", "\n", "ddp", "=", "int", "(", "os", ".", "environ", ".", "get", "(", "'DDP'", ",", "1", ")", ")", "\n", "num_nodes", "=", "max", "(", "ddp", ",", "num_nodes", ")", "\n", "print", "(", "\"num_nodes= \"", ",", "num_nodes", ")", "\n", "rank", "=", "int", "(", "os", ".", "environ", ".", "get", "(", "'NODE_RANK'", ",", "0", ")", ")", "\n", "return", "DistributedSamplerWrapper", "(", "sampler", "=", "WeightedRandomSampler", "(", "samples_weights", ",", "\n", "num_samples", "=", "epoch_len", ",", "replacement", "=", "sampler_replace", ")", ",", "\n", "dataset", "=", "range", "(", "epoch_len", ")", ",", "\n", "num_replicas", "=", "num_nodes", ",", "\n", "rank", "=", "rank", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.openmic2008.dataset.get_base_test_set": [[242, 246], ["dataset.AudioSetDataset"], "function", ["None"], ["", "@", "dataset", ".", "command", "\n", "def", "get_base_test_set", "(", "openmic_test_hdf5", ")", ":", "\n", "    ", "ds", "=", "AudioSetDataset", "(", "openmic_test_hdf5", ")", "\n", "return", "ds", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.openmic2008.dataset.get_roll_func": [[248, 263], ["dataset.command", "print", "torch.as_tensor", "int", "torch.as_tensor.roll", "numpy.random.random_integers"], "function", ["None"], ["", "@", "dataset", ".", "command", "(", "prefix", "=", "'roll_conf'", ")", "\n", "def", "get_roll_func", "(", "axis", "=", "1", ",", "shift", "=", "None", ",", "shift_range", "=", "50", ")", ":", "\n", "    ", "print", "(", "\"rolling...\"", ")", "\n", "\n", "def", "roll_func", "(", "b", ")", ":", "\n", "        ", "x", ",", "i", ",", "y", "=", "b", "\n", "x", "=", "torch", ".", "as_tensor", "(", "x", ")", "\n", "sf", "=", "shift", "\n", "if", "shift", "is", "None", ":", "\n", "            ", "sf", "=", "int", "(", "np", ".", "random", ".", "random_integers", "(", "-", "shift_range", ",", "shift_range", ")", ")", "\n", "", "global", "FirstTime", "\n", "\n", "return", "x", ".", "roll", "(", "sf", ",", "axis", ")", ",", "i", ",", "y", "\n", "\n", "", "return", "roll_func", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.openmic2008.dataset.get_training_set": [[265, 279], ["dataset.get_base_training_set", "dataset.get_ir_sample", "print", "fill_norms", "helpers.audiodatasets.PreprocessDataset", "helpers.audiodatasets.PreprocessDataset", "dataset.MixupDataset", "dataset.get_roll_func"], "function", ["home.repos.pwc.inspect_result.kkoutini_passt.audioset.dataset.get_base_training_set", "home.repos.pwc.inspect_result.kkoutini_passt.audioset.dataset.get_ir_sample", "home.repos.pwc.inspect_result.kkoutini_passt.audioset.dataset.get_roll_func"], ["", "@", "dataset", ".", "command", "\n", "def", "get_training_set", "(", "normalize", ",", "roll", ",", "wavmix", "=", "False", ")", ":", "\n", "    ", "ds", "=", "get_base_training_set", "(", ")", "\n", "get_ir_sample", "(", ")", "\n", "if", "normalize", ":", "\n", "        ", "print", "(", "\"normalized train!\"", ")", "\n", "fill_norms", "(", ")", "\n", "ds", "=", "PreprocessDataset", "(", "ds", ",", "norm_func", ")", "\n", "", "if", "roll", ":", "\n", "        ", "ds", "=", "PreprocessDataset", "(", "ds", ",", "get_roll_func", "(", ")", ")", "\n", "", "if", "wavmix", ":", "\n", "        ", "ds", "=", "MixupDataset", "(", "ds", ")", "\n", "\n", "", "return", "ds", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.openmic2008.dataset.get_test_set": [[281, 289], ["dataset.get_base_test_set", "print", "fill_norms", "helpers.audiodatasets.PreprocessDataset"], "function", ["home.repos.pwc.inspect_result.kkoutini_passt.audioset.dataset.get_base_test_set"], ["", "@", "dataset", ".", "command", "\n", "def", "get_test_set", "(", "normalize", ")", ":", "\n", "    ", "ds", "=", "get_base_test_set", "(", ")", "\n", "if", "normalize", ":", "\n", "        ", "print", "(", "\"normalized test!\"", ")", "\n", "fill_norms", "(", ")", "\n", "ds", "=", "PreprocessDataset", "(", "ds", ",", "norm_func", ")", "\n", "", "return", "ds", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.openmic2008.dataset.print_conf": [[291, 296], ["print", "print", "print", "id"], "function", ["None"], ["", "@", "dataset", ".", "command", "\n", "def", "print_conf", "(", "_config", ")", ":", "\n", "    ", "print", "(", "\"Config of \"", ",", "dataset", ".", "path", ",", "id", "(", "dataset", ")", ")", "\n", "print", "(", "_config", ")", "\n", "print", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.prepare_scripts.download_preprocess.download": [[21, 27], ["print", "torch.hub.download_url_to_file", "print", "os.path.isfile"], "function", ["None"], ["def", "download", "(", "force", "=", "False", ")", ":", "\n", "    ", "if", "force", "or", "not", "os", ".", "path", ".", "isfile", "(", "download_target", ")", ":", "\n", "        ", "print", "(", "\"Downloading OpenMIC from zenodo...\"", ")", "\n", "download_url_to_file", "(", "openmicurl", ",", "download_target", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "f\"{download_target} already exists. Skipping download!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.prepare_scripts.download_preprocess.untar": [[29, 34], ["tarfile.open", "print", "tarfile.open.extractall"], "function", ["None"], ["", "", "def", "untar", "(", ")", ":", "\n", "    ", "my_tar", "=", "tarfile", ".", "open", "(", "download_target", ")", "\n", "print", "(", "f\"Extracting openmic from {download_target} to {extract_target}\"", ")", "\n", "\n", "my_tar", ".", "extractall", "(", "extract_target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.prepare_scripts.download_preprocess.process_folder": [[36, 48], ["print", "os.makedirs", "list", "print", "print", "len", "print", "glob.glob", "multiprocessing.Pool", "pool.starmap", "enumerate", "os.path.join", "len", "os.path.basename"], "function", ["None"], ["", "def", "process_folder", "(", "fol", "=", "\"balanced_train_segments\"", ")", ":", "\n", "    ", "print", "(", "\"now working on \"", ",", "fol", ")", "\n", "os", ".", "makedirs", "(", "mp3_path", "+", "fol", ",", "exist_ok", "=", "True", ")", "\n", "all_files", "=", "list", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "dataset_path", ",", "\"audio/\"", ")", "+", "\"/*/*.ogg\"", ")", ")", "# openmic format", "\n", "print", "(", "f\"it has {len(all_files)}\"", ")", "\n", "print", "(", "all_files", "[", ":", "5", "]", ")", "\n", "global", "all_num", "\n", "all_num", "=", "len", "(", "all_files", ")", "\n", "cmds", "=", "[", "(", "i", ",", "file", ",", "mp3_path", "+", "fol", "+", "\"/\"", "+", "os", ".", "path", ".", "basename", "(", "file", ")", "[", ":", "-", "3", "]", ")", "for", "i", ",", "file", "in", "enumerate", "(", "all_files", ")", "]", "\n", "print", "(", "cmds", "[", "0", "]", ")", "\n", "with", "multiprocessing", ".", "Pool", "(", "processes", "=", "20", ")", "as", "pool", ":", "\n", "        ", "pool", ".", "starmap", "(", "process_one", ",", "cmds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.prepare_scripts.download_preprocess.process_one": [[50, 54], ["os.system", "print"], "function", ["None"], ["", "", "def", "process_one", "(", "i", ",", "f1", ",", "f2", ")", ":", "\n", "    ", "if", "i", "%", "100", "==", "0", ":", "\n", "        ", "print", "(", "f\"{i}/{all_num} \\t\"", ",", "f1", ")", "\n", "", "os", ".", "system", "(", "f\"ffmpeg  -hide_banner -nostats -loglevel error -n -i {f1} -codec:a mp3 -ar 32000 {f2}mp3\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.prepare_scripts.download_preprocess.make_mp3": [[56, 58], ["download_preprocess.process_folder"], "function", ["home.repos.pwc.inspect_result.kkoutini_passt.prepare_scripts.convert_to_mp3.process_folder"], ["", "def", "make_mp3", "(", ")", ":", "\n", "    ", "process_folder", "(", "\"audio\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.prepare_scripts.download_preprocess.read_metadata": [[60, 93], ["len", "numpy.zeros", "set", "enumerate", "print", "print", "print", "print", "open", "file.readlines", "audio_names.append", "openmicf.Y_mask[].astype", "len", "np.zeros.astype().sum", "len", "mask.sum", "len", "line.rstrip", "numpy.array", "np.zeros.astype"], "function", ["None"], ["", "def", "read_metadata", "(", "csv_path", ",", "classes_num", ",", "id_to_ix", ",", "openmicf", ")", ":", "\n", "    ", "\"\"\"Read metadata of AudioSet from a csv file.\n    source: https://github.com/qiuqiangkong/audioset_tagging_cnn/blob/d2f4b8c18eab44737fcc0de1248ae21eb43f6aa4/utils/utilities.py#L59\n    Args:\n      csv_path: str\n    Returns:\n      meta_dict: {'audio_name': (audios_num,), 'target': (audios_num, classes_num)}\n    \"\"\"", "\n", "\n", "with", "open", "(", "csv_path", ")", "as", "file", ":", "\n", "        ", "lines", "=", "file", ".", "readlines", "(", ")", "\n", "lines", "=", "[", "line", ".", "rstrip", "(", ")", "for", "line", "in", "lines", "]", "\n", "", "audios_num", "=", "len", "(", "lines", ")", "\n", "# class + mask", "\n", "targets", "=", "np", ".", "zeros", "(", "(", "audios_num", ",", "classes_num", "*", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "audio_names", "=", "[", "]", "\n", "notfound", "=", "set", "(", ")", "\n", "for", "i", ",", "row", "in", "enumerate", "(", "lines", ")", ":", "\n", "        ", "audio_name", "=", "'{}.mp3'", ".", "format", "(", "row", ")", "# Audios are started with an extra 'Y' when downloading", "\n", "audio_names", ".", "append", "(", "audio_name", ")", "\n", "t", "=", "openmicf", ".", "Y_true", "[", "id_to_ix", "[", "row", "]", "]", "#id_to_ix[row][\"true\"]", "\n", "m", "=", "openmicf", ".", "Y_mask", "[", "id_to_ix", "[", "row", "]", "]", ".", "astype", "(", "int", ")", "#id_to_ix[row][\"mask\"]", "\n", "# Target", "\n", "targets", "[", "i", ",", ":", "classes_num", "]", "=", "t", "\n", "targets", "[", "i", ",", "classes_num", ":", "]", "=", "m", "\n", "\n", "", "print", "(", "notfound", ")", "\n", "print", "(", "\"original_targets\"", ",", "len", "(", "targets", ")", ")", "\n", "mask", "=", "targets", ".", "astype", "(", "np", ".", "int", ")", ".", "sum", "(", "1", ")", ">", "0", "\n", "print", "(", "len", "(", "mask", ")", ",", "mask", ".", "sum", "(", ")", ")", "\n", "print", "(", "\"after: \"", ",", "len", "(", "targets", "[", "mask", "]", ")", ")", "\n", "meta_dict", "=", "{", "'audio_name'", ":", "np", ".", "array", "(", "audio_names", ")", "[", "mask", "]", ",", "'target'", ":", "targets", "[", "mask", "]", "}", "\n", "return", "meta_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.prepare_scripts.download_preprocess.get_files_labels": [[95, 116], ["download_preprocess.read_metadata", "len", "range", "print", "os.path.isfile", "print", "available_files.append", "available_targets.append"], "function", ["home.repos.pwc.inspect_result.kkoutini_passt.prepare_scripts.create_h5pymp3_dataset.read_metadata"], ["", "def", "get_files_labels", "(", "balanced_csv", ",", "balanced_audio_path", ",", "d_files", ",", "openmicf", ",", "prefix", "=", "None", ",", "zip_contents", "=", "None", ",", "classes_num", "=", "20", ")", ":", "\n", "    ", "meta_csv", "=", "read_metadata", "(", "balanced_csv", ",", "classes_num", ",", "d_files", ",", "openmicf", ")", "\n", "# fname,labels,mids", "\n", "audios_num", "=", "len", "(", "meta_csv", "[", "'audio_name'", "]", ")", "\n", "found", "=", "0", "\n", "notfound", "=", "0", "\n", "available_files", "=", "[", "]", "\n", "available_targets", "=", "[", "]", "\n", "for", "n", "in", "range", "(", "audios_num", ")", ":", "\n", "        ", "audio_path", "=", "meta_csv", "[", "'audio_name'", "]", "[", "n", "]", "\n", "# print(balanced_audio_path + f\"{prefix}/{audio_path}\")", "\n", "if", "n", "==", "0", ":", "\n", "            ", "print", "(", "\"checking: \"", ",", "balanced_audio_path", "+", "f\"{prefix}/{audio_path}\"", ")", "\n", "", "if", "os", ".", "path", ".", "isfile", "(", "balanced_audio_path", "+", "f\"{prefix}/{audio_path}\"", ")", ":", "\n", "            ", "found", "+=", "1", "\n", "available_files", ".", "append", "(", "meta_csv", "[", "'audio_name'", "]", "[", "n", "]", ")", "\n", "available_targets", ".", "append", "(", "meta_csv", "[", "'target'", "]", "[", "n", "]", ")", "\n", "", "else", ":", "\n", "            ", "notfound", "+=", "1", "\n", "", "", "print", "(", "f\"Found {found} . not found {notfound}\"", ")", "\n", "return", "available_files", ",", "available_targets", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.prepare_scripts.download_preprocess.pack": [[118, 162], ["dict", "numpy.load", "enumerate", "print", "os.path.join", "len", "print", "download_preprocess.get_files_labels", "numpy.array", "print", "len", "numpy.fromfile", "h5py.vlen_dtype", "[].replace", "os.makedirs", "os.path.isfile", "print", "print", "print", "numpy.dtype", "print", "h5py.File", "hf.create_dataset", "hf.create_dataset", "hf.create_dataset", "enumerate", "numpy.fromfile", "read_file.rsplit", "print"], "function", ["home.repos.pwc.inspect_result.kkoutini_passt.prepare_scripts.download_preprocess.get_files_labels"], ["", "def", "pack", "(", ")", ":", "\n", "    ", "d_files", "=", "dict", "(", ")", "\n", "opmic", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "dataset_path", ",", "\"openmic-2018.npz\"", ")", ")", "\n", "opmic", ".", "allow_pickle", "=", "True", "\n", "\n", "for", "i", ",", "sid", "in", "enumerate", "(", "opmic", ".", "f", ".", "sample_key", ")", ":", "\n", "\n", "        ", "d_files", "[", "sid", "]", "=", "i", "#{\"mask\": opmic.f.Y_mask[i].astype(int),", "\n", "#\"true\": opmic.f.Y_true[i]}", "\n", "", "print", "(", "\"len=\"", ",", "len", "(", "d_files", ")", ")", "\n", "\n", "for", "read_file", ",", "prefix", "in", "[", "(", "train_files_csv", ",", "\"audio/\"", ")", ",", "(", "test_files_csv", ",", "\"audio/\"", ")", "]", ":", "\n", "        ", "print", "(", "\"now working on \"", ",", "read_file", ",", "prefix", ")", "\n", "# files, y = torch.load(read_file+\".pth\")", "\n", "files", ",", "y", "=", "get_files_labels", "(", "read_file", ",", "mp3_path", ",", "d_files", "=", "d_files", ",", "openmicf", "=", "opmic", ".", "f", ",", "prefix", "=", "prefix", ")", "\n", "y", "=", "np", ".", "array", "(", "y", ")", "\n", "# y = np.packbits(y, axis=-1)", "\n", "packed_len", "=", "y", ".", "shape", "[", "1", "]", "\n", "print", "(", "files", "[", "0", "]", ",", "\"classes: \"", ",", "packed_len", ",", "y", ".", "dtype", ")", "\n", "available_size", "=", "len", "(", "files", ")", "\n", "f", "=", "files", "[", "0", "]", "\n", "a", "=", "np", ".", "fromfile", "(", "mp3_path", "+", "prefix", "+", "\"/\"", "+", "f", ",", "dtype", "=", "'uint8'", ")", "\n", "\n", "dt", "=", "h5py", ".", "vlen_dtype", "(", "np", ".", "dtype", "(", "'uint8'", ")", ")", "\n", "save_file", "=", "read_file", ".", "rsplit", "(", "\"/\"", ",", "1", ")", "[", "1", "]", ".", "replace", "(", "\"split01\"", ",", "\"openmic\"", ")", "\n", "os", ".", "makedirs", "(", "hdf5s_dir", "+", "\"mp3/\"", ",", "exist_ok", "=", "True", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "hdf5s_dir", "+", "\"mp3/\"", "+", "save_file", "+", "\"_mp3.hdf\"", ")", ":", "\n", "            ", "print", "(", "hdf5s_dir", "+", "\"mp3/\"", "+", "save_file", "+", "\"_mp3.hdf\"", ",", "\"exists!\\n\\n\\n contiue\"", ")", "\n", "continue", "\n", "", "with", "h5py", ".", "File", "(", "hdf5s_dir", "+", "\"mp3/\"", "+", "save_file", "+", "\"_mp3.hdf\"", ",", "'w'", ")", "as", "hf", ":", "\n", "            ", "audio_name", "=", "hf", ".", "create_dataset", "(", "'audio_name'", ",", "shape", "=", "(", "(", "available_size", ",", ")", ")", ",", "dtype", "=", "'S20'", ")", "\n", "waveform", "=", "hf", ".", "create_dataset", "(", "'mp3'", ",", "shape", "=", "(", "(", "available_size", ",", ")", ")", ",", "dtype", "=", "dt", ")", "\n", "target", "=", "hf", ".", "create_dataset", "(", "'target'", ",", "shape", "=", "(", "(", "available_size", ",", "packed_len", ")", ")", ",", "dtype", "=", "y", ".", "dtype", ")", "\n", "for", "i", ",", "file", "in", "enumerate", "(", "files", ")", ":", "\n", "                ", "if", "i", "%", "1000", "==", "0", ":", "\n", "                    ", "print", "(", "f\"{i}/{available_size}\"", ")", "\n", "", "f", "=", "file", "\n", "a", "=", "np", ".", "fromfile", "(", "mp3_path", "+", "prefix", "+", "f", ",", "dtype", "=", "'uint8'", ")", "\n", "audio_name", "[", "i", "]", "=", "f", "\n", "waveform", "[", "i", "]", "=", "a", "\n", "target", "[", "i", "]", "=", "y", "[", "i", "]", "\n", "", "", "print", "(", "\"Saved h5py file into \"", ",", "hdf5s_dir", "+", "\"mp3/\"", "+", "save_file", "+", "\"_mp3.hdf\"", ")", "\n", "print", "(", "a", ".", "shape", ")", "\n", "print", "(", "\"Done!\"", ",", "prefix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.prepare_scripts.download_preprocess.preprocess": [[164, 169], ["download_preprocess.download", "download_preprocess.untar", "download_preprocess.make_mp3", "download_preprocess.pack"], "function", ["home.repos.pwc.inspect_result.kkoutini_passt.prepare_scripts.download_preprocess.download", "home.repos.pwc.inspect_result.kkoutini_passt.prepare_scripts.download_preprocess.untar", "home.repos.pwc.inspect_result.kkoutini_passt.prepare_scripts.download_preprocess.make_mp3", "home.repos.pwc.inspect_result.kkoutini_passt.prepare_scripts.download_preprocess.pack"], ["", "", "def", "preprocess", "(", ")", ":", "\n", "    ", "download", "(", ")", "\n", "untar", "(", ")", "\n", "make_mp3", "(", ")", "\n", "pack", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.prepare_scripts.convert_to_mp3.process_folder": [[15, 26], ["print", "os.makedirs", "list", "print", "len", "print", "glob.glob", "multiprocessing.Pool", "pool.starmap", "enumerate", "len", "os.path.basename"], "function", ["None"], ["\n", "all_num", "=", "0", "\n", "\n", "\n", "def", "process_folder", "(", "fol", "=", "\"balanced_train_segments\"", ")", ":", "\n", "    ", "print", "(", "\"now working on \"", ",", "fol", ")", "\n", "os", ".", "makedirs", "(", "outputp", "+", "fol", ",", "exist_ok", "=", "True", ")", "\n", "all_files", "=", "list", "(", "glob", ".", "glob", "(", "FSD50K_base", "+", "fol", "+", "\"/*.wav\"", ")", ")", "\n", "print", "(", "f\"it has {len(all_files)}\"", ")", "\n", "global", "all_num", "\n", "all_num", "=", "len", "(", "all_files", ")", "\n", "cmds", "=", "[", "(", "i", ",", "file", ",", "outputp", "+", "fol", "+", "\"/\"", "+", "os", ".", "path", ".", "basename", "(", "file", ")", "[", ":", "-", "3", "]", ")", "for", "i", ",", "file", "in", "enumerate", "(", "all_files", ")", "]", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.prepare_scripts.convert_to_mp3.process_one": [[28, 32], ["os.system", "print"], "function", ["None"], ["with", "multiprocessing", ".", "Pool", "(", "processes", "=", "20", ")", "as", "pool", ":", "\n", "        ", "pool", ".", "starmap", "(", "process_one", ",", "cmds", ")", "\n", "\n", "\n", "", "", "def", "process_one", "(", "i", ",", "f1", ",", "f2", ")", ":", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.prepare_scripts.create_h5pymp3_dataset.get_labels": [[49, 56], ["numpy.zeros", "enumerate", "target.split", "len"], "function", ["None"], ["def", "get_labels", "(", "df", ")", ":", "\n", "    ", "y", "=", "np", ".", "zeros", "(", "(", "len", "(", "df", ")", ",", "200", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "for", "i", ",", "target", "in", "enumerate", "(", "df", ".", "labels", ".", "values", ")", ":", "\n", "        ", "for", "t", "in", "target", ".", "split", "(", "\",\"", ")", ":", "\n", "            ", "y", "[", "i", ",", "id_to_ix", "[", "t", "]", "]", "=", "1", "\n", "", "", "return", "df", ".", "fname", ".", "values", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.prepare_scripts.create_h5pymp3_dataset.read_metadata": [[18, 51], ["len", "numpy.zeros", "enumerate", "open", "fr.readlines", "line.split", "[].split", "audio_names.append", "numpy.array", "items[].split"], "function", ["None"], ["\n", "", "base_dir", "=", "\"../../audioset_hdf5s/\"", "# the path to store hdf file.", "\n", "\n", "\n", "\n", "####", "\n", "balanced_csv", "=", "FSD50K_base", "+", "\"FSD50K.ground_truth/dev.csv\"", "\n", "eval_csv", "=", "FSD50K_base", "+", "\"FSD50K.ground_truth/eval.csv\"", "\n", "class_idx_csv", "=", "FSD50K_base", "+", "\"FSD50K.ground_truth/vocabulary.csv\"", "\n", "mp3_path", "=", "\"/home/khaled/shared/FSD50K/mp3/\"", "\n", "\n", "# %%", "\n", "\n", "df", "=", "pd", ".", "read_csv", "(", "class_idx_csv", ",", "header", "=", "None", ",", "index_col", "=", "0", ")", "\n", "classes_list", "=", "list", "(", "df", "[", "1", "]", ".", "values", ")", "\n", "assert", "sorted", "(", "classes_list", ")", "==", "classes_list", "\n", "id_to_ix", "=", "{", "id", ":", "i", "for", "i", ",", "id", "in", "enumerate", "(", "classes_list", ")", "}", "\n", "ix_to_id", "=", "{", "i", ":", "id", "for", "i", ",", "id", "in", "enumerate", "(", "classes_list", ")", "}", "\n", "\n", "# %%", "\n", "\n", "# Load labels", "\n", "df", "=", "pd", ".", "read_csv", "(", "balanced_csv", ")", "\n", "\n", "train", "=", "df", "[", "df", ".", "split", "==", "\"train\"", "]", "\n", "val", "=", "df", "[", "df", ".", "split", "==", "\"val\"", "]", "\n", "\n", "eval", "=", "pd", ".", "read_csv", "(", "eval_csv", ")", "\n", "\n", "\n", "# %%", "\n", "def", "get_labels", "(", "df", ")", ":", "\n", "    ", "y", "=", "np", ".", "zeros", "(", "(", "len", "(", "df", ")", ",", "200", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.prepare_scripts.create_h5pymp3_dataset.check_available": [[75, 95], ["create_h5pymp3_dataset.read_metadata", "len", "range", "print", "os.path.isfile", "os.path.basename", "available_files.append", "available_targets.append"], "function", ["home.repos.pwc.inspect_result.kkoutini_passt.prepare_scripts.create_h5pymp3_dataset.read_metadata"], ["        ", "audio_name", "=", "hf", ".", "create_dataset", "(", "'audio_name'", ",", "shape", "=", "(", "(", "available_size", ",", ")", ")", ",", "dtype", "=", "'S20'", ")", "\n", "waveform", "=", "hf", ".", "create_dataset", "(", "'mp3'", ",", "shape", "=", "(", "(", "available_size", ",", ")", ")", ",", "dtype", "=", "dt", ")", "\n", "target", "=", "hf", ".", "create_dataset", "(", "'target'", ",", "shape", "=", "(", "(", "available_size", ",", "packed_len", ")", ")", ",", "dtype", "=", "y", ".", "dtype", ")", "\n", "for", "i", ",", "file", "in", "enumerate", "(", "files", ")", ":", "\n", "            ", "if", "i", "%", "1000", "==", "0", ":", "\n", "                ", "print", "(", "f\"{i}/{available_size}\"", ")", "\n", "", "f", "=", "f\"{file}.mp3\"", "\n", "a", "=", "np", ".", "fromfile", "(", "mp3_path", "+", "prefix", "+", "f", ",", "dtype", "=", "'uint8'", ")", "\n", "audio_name", "[", "i", "]", "=", "f", "\n", "waveform", "[", "i", "]", "=", "a", "\n", "target", "[", "i", "]", "=", "y", "[", "i", "]", "\n", "\n", "", "", "print", "(", "a", ".", "shape", ")", "\n", "print", "(", "\"Done!\"", ",", "prefix", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.kkoutini_passt.esc50.dataset.MixupDataset.__init__": [[111, 116], ["print", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "dataset", ",", "beta", "=", "2", ",", "rate", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "beta", "=", "beta", "\n", "self", ".", "rate", "=", "rate", "\n", "self", ".", "dataset", "=", "dataset", "\n", "print", "(", "f\"Mixing up waveforms from dataset of len {len(dataset)}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.esc50.dataset.MixupDataset.__getitem__": [[117, 130], ["torch.rand", "torch.randint().item", "numpy.random.beta", "max", "x1.mean", "x2.mean", "x.mean", "torch.randint", "len"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "x1", ",", "f1", ",", "y1", "=", "self", ".", "dataset", "[", "index", "]", "\n", "y1", "=", "torch", ".", "as_tensor", "(", "y1", ")", "\n", "if", "torch", ".", "rand", "(", "1", ")", "<", "self", ".", "rate", ":", "\n", "            ", "idx2", "=", "torch", ".", "randint", "(", "len", "(", "self", ".", "dataset", ")", ",", "(", "1", ",", ")", ")", ".", "item", "(", ")", "\n", "x2", ",", "f2", ",", "y2", "=", "self", ".", "dataset", "[", "idx2", "]", "\n", "y2", "=", "torch", ".", "as_tensor", "(", "y2", ")", "\n", "l", "=", "np", ".", "random", ".", "beta", "(", "self", ".", "beta", ",", "self", ".", "beta", ")", "\n", "l", "=", "max", "(", "l", ",", "1.", "-", "l", ")", "\n", "x1", "=", "x1", "-", "x1", ".", "mean", "(", ")", "\n", "x2", "=", "x2", "-", "x2", ".", "mean", "(", ")", "\n", "x", "=", "(", "x1", "*", "l", "+", "x2", "*", "(", "1.", "-", "l", ")", ")", "\n", "x", "=", "x", "-", "x", ".", "mean", "(", ")", "\n", "assert", "len", "(", "y1", ")", "==", "40", ",", "\"only for openmic, works this\"", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.esc50.dataset.MixupDataset.__len__": [[131, 133], ["len"], "methods", ["None"], ["y_mask1", "=", "(", "torch", ".", "as_tensor", "(", "y1", "[", "20", ":", "]", ")", ">", "0.5", ")", ".", "float", "(", ")", "\n", "y_mask2", "=", "(", "torch", ".", "as_tensor", "(", "y2", "[", "20", ":", "]", ")", ">", "0.5", ")", ".", "float", "(", ")", "\n", "y1", "[", ":", "20", "]", "*=", "y_mask1", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.esc50.dataset.AudioSetDataset.__init__": [[138, 162], ["pandas.read_csv", "print", "print", "print", "print", "print", "len", "len", "len", "len"], "methods", ["None"], ["", "return", "x1", ",", "f1", ",", "y1", "\n", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "dataset", ")", "\n", "\n", "\n", "\n", "", "", "class", "AudioSetDataset", "(", "TorchDataset", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "hdf5_file", ",", "sample_rate", "=", "32000", ",", "classes_num", "=", "527", ",", "clip_length", "=", "10", ",", "augment", "=", "False", ",", "in_mem", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Reads the mp3 bytes from HDF file decodes using av and returns a fixed length audio wav\n        \"\"\"", "\n", "self", ".", "sample_rate", "=", "sample_rate", "\n", "self", ".", "hdf5_file", "=", "hdf5_file", "\n", "if", "in_mem", ":", "\n", "            ", "print", "(", "\"\\nPreloading in memory\\n\"", ")", "\n", "with", "open", "(", "hdf5_file", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "self", ".", "hdf5_file", "=", "io", ".", "BytesIO", "(", "f", ".", "read", "(", ")", ")", "\n", "", "", "with", "h5py", ".", "File", "(", "hdf5_file", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "self", ".", "length", "=", "len", "(", "f", "[", "'audio_name'", "]", ")", "\n", "print", "(", "f\"Dataset from {hdf5_file} with length {self.length}.\"", ")", "\n", "", "self", ".", "dataset_file", "=", "None", "# lazy init", "\n", "self", ".", "clip_length", "=", "clip_length", "*", "sample_rate", "\n", "self", ".", "classes_num", "=", "classes_num", "\n", "self", ".", "augment", "=", "augment", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.esc50.dataset.AudioSetDataset.__len__": [[163, 165], ["len"], "methods", ["None"], ["if", "augment", ":", "\n", "            ", "print", "(", "f\"Will agument data from {hdf5_file}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.esc50.dataset.AudioSetDataset.__getitem__": [[166, 189], ["librosa.load", "dataset.pad_or_truncate", "dataset.AudioSetDataset.resample", "dataset.pydub_augment", "pydub_augment.reshape"], "methods", ["home.repos.pwc.inspect_result.kkoutini_passt.audioset.dataset.pad_or_truncate", "home.repos.pwc.inspect_result.kkoutini_passt.audioset.dataset.AudioSetDataset.resample", "home.repos.pwc.inspect_result.kkoutini_passt.audioset.dataset.pydub_augment"], ["", "", "def", "open_hdf5", "(", "self", ")", ":", "\n", "        ", "self", ".", "dataset_file", "=", "h5py", ".", "File", "(", "self", ".", "hdf5_file", ",", "'r'", ")", "\n", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "length", "\n", "\n", "", "def", "__del__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "dataset_file", "is", "not", "None", ":", "\n", "            ", "self", ".", "dataset_file", ".", "close", "(", ")", "\n", "self", ".", "dataset_file", "=", "None", "\n", "\n", "", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"Load waveform and target of an audio clip.\n\n        Args:\n          meta: {\n            'hdf5_path': str,\n            'index_in_hdf5': int}\n        Returns:\n          data_dict: {\n            'audio_name': str,\n            'waveform': (clip_samples,),\n            'target': (classes_num,)}\n        \"\"\"", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.esc50.dataset.AudioSetDataset.resample": [[190, 205], ["Exception"], "methods", ["None"], ["if", "self", ".", "dataset_file", "is", "None", ":", "\n", "            ", "self", ".", "open_hdf5", "(", ")", "\n", "\n", "", "audio_name", "=", "self", ".", "dataset_file", "[", "'audio_name'", "]", "[", "index", "]", ".", "decode", "(", ")", "\n", "waveform", "=", "decode_mp3", "(", "self", ".", "dataset_file", "[", "'mp3'", "]", "[", "index", "]", ")", "\n", "if", "self", ".", "augment", ":", "\n", "            ", "waveform", "=", "pydub_augment", "(", "waveform", ")", "\n", "", "waveform", "=", "pad_or_truncate", "(", "waveform", ",", "self", ".", "clip_length", ")", "\n", "waveform", "=", "self", ".", "resample", "(", "waveform", ")", "\n", "target", "=", "self", ".", "dataset_file", "[", "'target'", "]", "[", "index", "]", "\n", "target", "=", "target", ".", "astype", "(", "np", ".", "float32", ")", "\n", "return", "waveform", ".", "reshape", "(", "1", ",", "-", "1", ")", ",", "audio_name", ",", "target", "\n", "\n", "", "def", "resample", "(", "self", ",", "waveform", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.kkoutini_passt.esc50.dataset.DistributedSamplerWrapper.__init__": [[288, 297], ["torch.utils.data.DistributedSampler.__init__"], "methods", ["home.repos.pwc.inspect_result.kkoutini_passt.audioset.dataset.DistributedSamplerWrapper.__init__"], ["", "return", "ds", "\n", "\n", "\n", "", "@", "dataset", ".", "command", "\n", "def", "print_conf", "(", "_config", ")", ":", "\n", "    ", "print", "(", "\"Config of \"", ",", "dataset", ".", "path", ",", "id", "(", "dataset", ")", ")", "\n", "print", "(", "_config", ")", "\n", "print", "(", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.esc50.dataset.DistributedSamplerWrapper.__iter__": [[298, 307], ["dataset.DistributedSamplerWrapper.sampler.generator.manual_seed", "list", "iter", "torch.Generator", "print"], "methods", ["None"], ["", "class", "DistributedSamplerWrapper", "(", "DistributedSampler", ")", ":", "\n", "    ", "def", "__init__", "(", "\n", "self", ",", "sampler", ",", "dataset", ",", "\n", "num_replicas", "=", "None", ",", "\n", "rank", "=", "None", ",", "\n", "shuffle", ":", "bool", "=", "True", ")", ":", "\n", "        ", "super", "(", "DistributedSamplerWrapper", ",", "self", ")", ".", "__init__", "(", "\n", "dataset", ",", "num_replicas", ",", "rank", ",", "shuffle", ")", "\n", "# source: @awaelchli https://github.com/PyTorchLightning/pytorch-lightning/issues/3238", "\n", "self", ".", "sampler", "=", "sampler", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.esc50.dataset.default_config": [[28, 42], ["None"], "function", ["None"], ["@", "dataset", ".", "config", "\n", "def", "default_config", "(", ")", ":", "\n", "    ", "name", "=", "'openmic2008'", "# dataset name", "\n", "normalize", "=", "False", "# normalize dataset", "\n", "subsample", "=", "False", "# subsample squares from the dataset", "\n", "roll", "=", "True", "# apply roll augmentation", "\n", "fold", "=", "1", "\n", "base_dir", "=", "\"audioset_hdf5s/\"", "# base directory of the dataset as downloaded", "\n", "if", "LMODE", ":", "\n", "        ", "base_dir", "=", "\"/system/user/publicdata/CP/audioset/audioset_hdf5s/\"", "\n", "", "openmic_train_hdf5", "=", "base_dir", "+", "\"mp3/openmic_train.csv_mp3.hdf\"", "\n", "openmic_test_hdf5", "=", "base_dir", "+", "\"mp3/openmic_test.csv_mp3.hdf\"", "\n", "ir_path", "=", "base_dir", "+", "\"irs/\"", "\n", "num_of_classes", "=", "20", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.esc50.dataset.decode_mp3": [[47, 63], ["av.open", "next", "enumerate", "numpy.concatenate", "io.BytesIO", "av.open.demux", "packet.decode", "RuntimeError", "mp3_arr.tobytes", "a.append", "frame.to_ndarray().reshape", "frame.to_ndarray"], "function", ["None"], ["", "def", "decode_mp3", "(", "mp3_arr", ")", ":", "\n", "    ", "\"\"\"\n    decodes an array if uint8 representing an mp3 file\n    :rtype: np.array\n    \"\"\"", "\n", "container", "=", "av", ".", "open", "(", "io", ".", "BytesIO", "(", "mp3_arr", ".", "tobytes", "(", ")", ")", ")", "\n", "stream", "=", "next", "(", "s", "for", "s", "in", "container", ".", "streams", "if", "s", ".", "type", "==", "'audio'", ")", "\n", "# print(stream)", "\n", "a", "=", "[", "]", "\n", "for", "i", ",", "packet", "in", "enumerate", "(", "container", ".", "demux", "(", "stream", ")", ")", ":", "\n", "        ", "for", "frame", "in", "packet", ".", "decode", "(", ")", ":", "\n", "            ", "a", ".", "append", "(", "frame", ".", "to_ndarray", "(", ")", ".", "reshape", "(", "-", "1", ")", ")", "\n", "", "", "waveform", "=", "np", ".", "concatenate", "(", "a", ")", "\n", "if", "waveform", ".", "dtype", "!=", "'float32'", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"Unexpected wave type\"", ")", "\n", "", "return", "waveform", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.esc50.dataset.pad_or_truncate": [[65, 71], ["len", "numpy.concatenate", "numpy.zeros", "len"], "function", ["None"], ["", "def", "pad_or_truncate", "(", "x", ",", "audio_length", ")", ":", "\n", "    ", "\"\"\"Pad all audio to specific length.\"\"\"", "\n", "if", "len", "(", "x", ")", "<=", "audio_length", ":", "\n", "        ", "return", "np", ".", "concatenate", "(", "(", "x", ",", "np", ".", "zeros", "(", "audio_length", "-", "len", "(", "x", ")", ",", "dtype", "=", "np", ".", "float32", ")", ")", ",", "axis", "=", "0", ")", "\n", "", "else", ":", "\n", "        ", "return", "x", "[", "0", ":", "audio_length", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.esc50.dataset.get_ir_sample": [[76, 93], ["sorted", "print", "range", "len", "print", "int", "pathlib.Path().rglob", "str().rsplit", "librosa.load", "numpy.random.randint", "len", "pathlib.Path", "str", "os.path.expanduser"], "function", ["None"], ["@", "dataset", ".", "command", "\n", "def", "get_ir_sample", "(", "ir_path", ",", "_run", ",", "ir_augment", ",", "cut_irs_offset", "=", "None", ")", ":", "\n", "    ", "if", "not", "ir_augment", ":", "\n", "        ", "return", "\n", "", "global", "irs_arr", "\n", "if", "irs_arr", "is", "None", ":", "\n", "        ", "all_paths", "=", "[", "path", "for", "path", "in", "pathlib", ".", "Path", "(", "os", ".", "path", ".", "expanduser", "(", "ir_path", ")", ")", ".", "rglob", "(", "'*.wav'", ")", "]", "\n", "all_paths", "=", "sorted", "(", "all_paths", ")", "\n", "if", "cut_irs_offset", "is", "not", "None", ":", "\n", "            ", "all_paths", "=", "all_paths", "[", "cut_irs_offset", ":", "cut_irs_offset", "+", "10", "]", "\n", "", "all_paths_name", "=", "[", "str", "(", "p", ")", ".", "rsplit", "(", "\"/\"", ",", "1", ")", "[", "-", "1", "]", "for", "p", "in", "all_paths", "]", "\n", "print", "(", "\"will use these IRs:\"", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "all_paths_name", ")", ")", ":", "\n", "            ", "print", "(", "i", ",", "\": \"", ",", "all_paths_name", "[", "i", "]", ")", "\n", "", "_run", ".", "info", "[", "\"ir_devices\"", "]", "=", "all_paths_name", "\n", "irs_arr", "=", "[", "librosa", ".", "load", "(", "p", ",", "sr", "=", "32000", ")", "[", "0", "]", "for", "p", "in", "all_paths", "]", "\n", "", "return", "irs_arr", "[", "int", "(", "np", ".", "random", ".", "randint", "(", "0", ",", "len", "(", "irs_arr", ")", ")", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.esc50.dataset.pydub_augment": [[95, 105], ["dataset.get_ir_sample", "scipy.signal.convolve", "torch.rand", "torch.randint().item", "torch.randint"], "function", ["home.repos.pwc.inspect_result.kkoutini_passt.audioset.dataset.get_ir_sample"], ["", "@", "dataset", ".", "command", "\n", "def", "pydub_augment", "(", "waveform", ",", "gain_augment", "=", "7", ",", "ir_augment", "=", "0", ")", ":", "\n", "    ", "if", "ir_augment", "and", "torch", ".", "rand", "(", "1", ")", "<", "ir_augment", ":", "\n", "        ", "ir", "=", "get_ir_sample", "(", ")", "\n", "waveform", "=", "convolve", "(", "waveform", ",", "ir", ",", "'full'", ")", "\n", "", "if", "gain_augment", ":", "\n", "        ", "gain", "=", "torch", ".", "randint", "(", "gain_augment", "*", "2", ",", "(", "1", ",", ")", ")", ".", "item", "(", ")", "-", "gain_augment", "\n", "amp", "=", "10", "**", "(", "gain", "/", "20", ")", "\n", "waveform", "=", "waveform", "*", "amp", "\n", "", "return", "waveform", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.esc50.dataset.get_base_training_set": [[208, 212], ["dataset.AudioSetDataset"], "function", ["None"], ["\n", "if", "self", ".", "sample_rate", "==", "32000", ":", "\n", "            ", "return", "waveform", "\n", "", "elif", "self", ".", "sample_rate", "==", "16000", ":", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.esc50.dataset.get_ft_weighted_sampler": [[214, 227], ["sacred.config.CMD", "int", "int", "max", "print", "int", "dataset.DistributedSamplerWrapper", "os.environ.get", "os.environ.get", "os.environ.get", "torch.utils.data.WeightedRandomSampler", "range"], "function", ["home.repos.pwc.inspect_result.kkoutini_passt.helpers.audiodatasets.ObjectCacher.get", "home.repos.pwc.inspect_result.kkoutini_passt.helpers.audiodatasets.ObjectCacher.get", "home.repos.pwc.inspect_result.kkoutini_passt.helpers.audiodatasets.ObjectCacher.get"], ["", "elif", "self", ".", "sample_rate", "==", "8000", ":", "\n", "            ", "return", "waveform", "[", "0", ":", ":", "4", "]", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'Incorrect sample rate!'", ")", "\n", "\n", "\n", "", "", "", "@", "dataset", ".", "command", "\n", "def", "get_base_training_set", "(", "openmic_train_hdf5", ")", ":", "\n", "    ", "ds", "=", "AudioSetDataset", "(", "openmic_train_hdf5", ",", "augment", "=", "True", ")", "\n", "return", "ds", "\n", "\n", "\n", "", "@", "dataset", ".", "command", "\n", "def", "get_ft_weighted_sampler", "(", "samples_weights", "=", "CMD", "(", "\".get_ft_cls_balanced_sample_weights\"", ")", ",", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.esc50.dataset.get_base_test_set": [[230, 234], ["dataset.AudioSetDataset"], "function", ["None"], ["ddp", "=", "int", "(", "os", ".", "environ", ".", "get", "(", "'DDP'", ",", "1", ")", ")", "\n", "num_nodes", "=", "max", "(", "ddp", ",", "num_nodes", ")", "\n", "print", "(", "\"num_nodes= \"", ",", "num_nodes", ")", "\n", "rank", "=", "int", "(", "os", ".", "environ", ".", "get", "(", "'NODE_RANK'", ",", "0", ")", ")", "\n", "return", "DistributedSamplerWrapper", "(", "sampler", "=", "WeightedRandomSampler", "(", "samples_weights", ",", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.esc50.dataset.get_roll_func": [[237, 252], ["dataset.command", "print", "torch.as_tensor", "int", "torch.as_tensor.roll", "numpy.random.random_integers"], "function", ["None"], ["num_replicas", "=", "num_nodes", ",", "\n", "rank", "=", "rank", ",", "\n", ")", "\n", "\n", "\n", "", "@", "dataset", ".", "command", "\n", "def", "get_base_test_set", "(", "openmic_test_hdf5", ")", ":", "\n", "    ", "ds", "=", "AudioSetDataset", "(", "openmic_test_hdf5", ")", "\n", "return", "ds", "\n", "\n", "\n", "", "@", "dataset", ".", "command", "(", "prefix", "=", "'roll_conf'", ")", "\n", "def", "get_roll_func", "(", "axis", "=", "1", ",", "shift", "=", "None", ",", "shift_range", "=", "50", ")", ":", "\n", "    ", "print", "(", "\"rolling...\"", ")", "\n", "\n", "def", "roll_func", "(", "b", ")", ":", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.esc50.dataset.get_training_set": [[254, 268], ["dataset.get_base_training_set", "dataset.get_ir_sample", "print", "fill_norms", "helpers.audiodatasets.PreprocessDataset", "helpers.audiodatasets.PreprocessDataset", "dataset.MixupDataset", "dataset.get_roll_func"], "function", ["home.repos.pwc.inspect_result.kkoutini_passt.audioset.dataset.get_base_training_set", "home.repos.pwc.inspect_result.kkoutini_passt.audioset.dataset.get_ir_sample", "home.repos.pwc.inspect_result.kkoutini_passt.audioset.dataset.get_roll_func"], ["x", "=", "torch", ".", "as_tensor", "(", "x", ")", "\n", "sf", "=", "shift", "\n", "if", "shift", "is", "None", ":", "\n", "            ", "sf", "=", "int", "(", "np", ".", "random", ".", "random_integers", "(", "-", "shift_range", ",", "shift_range", ")", ")", "\n", "", "global", "FirstTime", "\n", "\n", "return", "x", ".", "roll", "(", "sf", ",", "axis", ")", ",", "i", ",", "y", "\n", "\n", "", "return", "roll_func", "\n", "\n", "\n", "", "@", "dataset", ".", "command", "\n", "def", "get_training_set", "(", "normalize", ",", "roll", ",", "wavmix", "=", "False", ")", ":", "\n", "    ", "ds", "=", "get_base_training_set", "(", ")", "\n", "get_ir_sample", "(", ")", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.esc50.dataset.get_test_set": [[270, 278], ["dataset.get_base_test_set", "print", "fill_norms", "helpers.audiodatasets.PreprocessDataset"], "function", ["home.repos.pwc.inspect_result.kkoutini_passt.audioset.dataset.get_base_test_set"], ["        ", "print", "(", "\"normalized train!\"", ")", "\n", "fill_norms", "(", ")", "\n", "ds", "=", "PreprocessDataset", "(", "ds", ",", "norm_func", ")", "\n", "", "if", "roll", ":", "\n", "        ", "ds", "=", "PreprocessDataset", "(", "ds", ",", "get_roll_func", "(", ")", ")", "\n", "", "if", "wavmix", ":", "\n", "        ", "ds", "=", "MixupDataset", "(", "ds", ")", "\n", "\n", "", "return", "ds", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.esc50.dataset.print_conf": [[280, 285], ["print", "print", "print", "id"], "function", ["None"], ["\n", "", "@", "dataset", ".", "command", "\n", "def", "get_test_set", "(", "normalize", ")", ":", "\n", "    ", "ds", "=", "get_base_test_set", "(", ")", "\n", "if", "normalize", ":", "\n", "        ", "print", "(", "\"normalized test!\"", ")", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.fsd50k.dataset.MixupDataset.__init__": [[120, 125], ["print", "len"], "methods", ["None"], ["if", "torch", ".", "rand", "(", "1", ")", "<", "self", ".", "rate", ":", "\n", "            ", "idx2", "=", "torch", ".", "randint", "(", "len", "(", "self", ".", "dataset", ")", ",", "(", "1", ",", ")", ")", ".", "item", "(", ")", "\n", "x2", ",", "f2", ",", "y2", "=", "self", ".", "dataset", "[", "idx2", "]", "\n", "y2", "=", "torch", ".", "as_tensor", "(", "y2", ")", "\n", "l", "=", "np", ".", "random", ".", "beta", "(", "self", ".", "beta", ",", "self", ".", "beta", ")", "\n", "l", "=", "max", "(", "l", ",", "1.", "-", "l", ")", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.fsd50k.dataset.MixupDataset.__getitem__": [[126, 139], ["torch.rand", "torch.randint().item", "numpy.random.beta", "max", "x1.mean", "x2.mean", "x.mean", "torch.randint", "len"], "methods", ["None"], ["x1", "=", "x1", "-", "x1", ".", "mean", "(", ")", "\n", "x2", "=", "x2", "-", "x2", ".", "mean", "(", ")", "\n", "x", "=", "(", "x1", "*", "l", "+", "x2", "*", "(", "1.", "-", "l", ")", ")", "\n", "x", "=", "x", "-", "x", ".", "mean", "(", ")", "\n", "assert", "len", "(", "y1", ")", "==", "40", ",", "\"only for openmic, works this\"", "\n", "y_mask1", "=", "(", "torch", ".", "as_tensor", "(", "y1", "[", "20", ":", "]", ")", ">", "0.5", ")", ".", "float", "(", ")", "\n", "y_mask2", "=", "(", "torch", ".", "as_tensor", "(", "y2", "[", "20", ":", "]", ")", ">", "0.5", ")", ".", "float", "(", ")", "\n", "y1", "[", ":", "20", "]", "*=", "y_mask1", "\n", "y2", "[", ":", "20", "]", "*=", "y_mask2", "\n", "yres", "=", "(", "y1", "*", "l", "+", "y2", "*", "(", "1.", "-", "l", ")", ")", "\n", "yres", "[", "20", ":", "]", "=", "torch", ".", "stack", "(", "[", "y_mask1", ",", "y_mask2", "]", ")", ".", "max", "(", "dim", "=", "0", ")", ".", "values", "\n", "return", "x", ",", "f1", ",", "yres", "\n", "", "return", "x1", ",", "f1", ",", "y1", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.fsd50k.dataset.MixupDataset.__len__": [[140, 142], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.fsd50k.dataset.AudioSetDataset.__init__": [[145, 166], ["print", "h5py.File", "len", "print", "print", "open", "io.BytesIO", "f.read"], "methods", ["None"], ["", "", "class", "AudioSetDataset", "(", "TorchDataset", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "hdf5_file", ",", "sample_rate", "=", "32000", ",", "classes_num", "=", "527", ",", "clip_length", "=", "10", ",", "augment", "=", "False", ",", "in_mem", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Reads the mp3 bytes from HDF file decodes using av and returns a fixed length audio wav\n        \"\"\"", "\n", "self", ".", "sample_rate", "=", "sample_rate", "\n", "self", ".", "hdf5_file", "=", "hdf5_file", "\n", "if", "in_mem", ":", "\n", "            ", "print", "(", "\"\\nPreloading in memory\\n\"", ")", "\n", "with", "open", "(", "hdf5_file", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "self", ".", "hdf5_file", "=", "io", ".", "BytesIO", "(", "f", ".", "read", "(", ")", ")", "\n", "", "", "with", "h5py", ".", "File", "(", "hdf5_file", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "self", ".", "length", "=", "len", "(", "f", "[", "'audio_name'", "]", ")", "\n", "print", "(", "f\"Dataset from {hdf5_file} with length {self.length}.\"", ")", "\n", "", "self", ".", "dataset_file", "=", "None", "# lazy init", "\n", "self", ".", "clip_length", "=", "clip_length", "*", "sample_rate", "\n", "self", ".", "classes_num", "=", "classes_num", "\n", "self", ".", "augment", "=", "augment", "\n", "if", "augment", ":", "\n", "            ", "print", "(", "f\"Will agument data from {hdf5_file}\"", ")", "\n", "\n", "", "", "def", "open_hdf5", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.fsd50k.dataset.AudioSetDataset.open_hdf5": [[167, 169], ["h5py.File"], "methods", ["None"], ["        ", "self", ".", "dataset_file", "=", "h5py", ".", "File", "(", "self", ".", "hdf5_file", ",", "'r'", ")", "\n", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.fsd50k.dataset.AudioSetDataset.__len__": [[170, 172], ["None"], "methods", ["None"], ["        ", "return", "self", ".", "length", "\n", "\n", "", "def", "__del__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.fsd50k.dataset.AudioSetDataset.__del__": [[173, 177], ["dataset.AudioSetDataset.dataset_file.close"], "methods", ["None"], ["        ", "if", "self", ".", "dataset_file", "is", "not", "None", ":", "\n", "            ", "self", ".", "dataset_file", ".", "close", "(", ")", "\n", "self", ".", "dataset_file", "=", "None", "\n", "\n", "", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.fsd50k.dataset.AudioSetDataset.__getitem__": [[178, 204], ["[].decode", "dataset.decode_mp3", "dataset.pad_or_truncate", "dataset.AudioSetDataset.resample", "numpy.unpackbits().astype", "dataset.AudioSetDataset.open_hdf5", "dataset.pydub_augment", "pydub_augment.reshape", "numpy.unpackbits"], "methods", ["home.repos.pwc.inspect_result.kkoutini_passt.audioset.dataset.decode_mp3", "home.repos.pwc.inspect_result.kkoutini_passt.audioset.dataset.pad_or_truncate", "home.repos.pwc.inspect_result.kkoutini_passt.audioset.dataset.AudioSetDataset.resample", "home.repos.pwc.inspect_result.kkoutini_passt.audioset.dataset.AudioSetDataset.open_hdf5", "home.repos.pwc.inspect_result.kkoutini_passt.audioset.dataset.pydub_augment"], ["        ", "\"\"\"Load waveform and target of an audio clip.\n\n        Args:\n          meta: {\n            'hdf5_path': str,\n            'index_in_hdf5': int}\n        Returns:\n          data_dict: {\n            'audio_name': str,\n            'waveform': (clip_samples,),\n            'target': (classes_num,)}\n        \"\"\"", "\n", "if", "self", ".", "dataset_file", "is", "None", ":", "\n", "            ", "self", ".", "open_hdf5", "(", ")", "\n", "\n", "", "audio_name", "=", "self", ".", "dataset_file", "[", "'audio_name'", "]", "[", "index", "]", ".", "decode", "(", ")", "\n", "waveform", "=", "decode_mp3", "(", "self", ".", "dataset_file", "[", "'mp3'", "]", "[", "index", "]", ")", "\n", "if", "self", ".", "augment", ":", "\n", "            ", "waveform", "=", "pydub_augment", "(", "waveform", ")", "\n", "", "waveform", "=", "pad_or_truncate", "(", "waveform", ",", "self", ".", "clip_length", ")", "\n", "waveform", "=", "self", ".", "resample", "(", "waveform", ")", "\n", "target", "=", "self", ".", "dataset_file", "[", "'target'", "]", "[", "index", "]", "\n", "target", "=", "target", ".", "astype", "(", "np", ".", "float32", ")", "\n", "return", "waveform", ".", "reshape", "(", "1", ",", "-", "1", ")", ",", "audio_name", ",", "target", "\n", "\n", "", "def", "resample", "(", "self", ",", "waveform", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.kkoutini_passt.fsd50k.dataset.AudioSetDataset.resample": [[205, 220], ["Exception"], "methods", ["None"], ["\n", "if", "self", ".", "sample_rate", "==", "32000", ":", "\n", "            ", "return", "waveform", "\n", "", "elif", "self", ".", "sample_rate", "==", "16000", ":", "\n", "            ", "return", "waveform", "[", "0", ":", ":", "2", "]", "\n", "", "elif", "self", ".", "sample_rate", "==", "8000", ":", "\n", "            ", "return", "waveform", "[", "0", ":", ":", "4", "]", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'Incorrect sample rate!'", ")", "\n", "\n", "\n", "", "", "", "@", "dataset", ".", "command", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.fsd50k.dataset.DistributedSamplerWrapper.__init__": [[338, 347], ["torch.utils.data.DistributedSampler.__init__"], "methods", ["home.repos.pwc.inspect_result.kkoutini_passt.audioset.dataset.DistributedSamplerWrapper.__init__"], ["", "", ""]], "home.repos.pwc.inspect_result.kkoutini_passt.fsd50k.dataset.DistributedSamplerWrapper.__iter__": [[348, 357], ["dataset.DistributedSamplerWrapper.sampler.generator.manual_seed", "list", "iter", "torch.Generator", "print"], "methods", ["None"], []], "home.repos.pwc.inspect_result.kkoutini_passt.fsd50k.dataset.default_config": [[24, 44], ["balanced_train_hdf5.replace.replace", "eval_hdf5.replace.replace", "valid_hdf5.replace.replace", "os.environ.get", "os.environ.get", "os.environ.get"], "function", ["home.repos.pwc.inspect_result.kkoutini_passt.helpers.audiodatasets.ObjectCacher.get", "home.repos.pwc.inspect_result.kkoutini_passt.helpers.audiodatasets.ObjectCacher.get", "home.repos.pwc.inspect_result.kkoutini_passt.helpers.audiodatasets.ObjectCacher.get"], ["\n", "dataset", "=", "Dataset", "(", "'openMIC'", ")", "\n", "\n", "\n", "@", "dataset", ".", "config", "\n", "def", "default_config", "(", ")", ":", "\n", "    ", "name", "=", "'openmic2008'", "# dataset name", "\n", "normalize", "=", "False", "# normalize dataset", "\n", "subsample", "=", "False", "# subsample squares from the dataset", "\n", "roll", "=", "True", "# apply roll augmentation", "\n", "fold", "=", "1", "\n", "base_dir", "=", "\"audioset_hdf5s/\"", "# base directory of the dataset as downloaded", "\n", "if", "LMODE", ":", "\n", "        ", "base_dir", "=", "\"/system/user/publicdata/CP/audioset/audioset_hdf5s/\"", "\n", "", "openmic_train_hdf5", "=", "base_dir", "+", "\"mp3/openmic_train.csv_mp3.hdf\"", "\n", "openmic_test_hdf5", "=", "base_dir", "+", "\"mp3/openmic_test.csv_mp3.hdf\"", "\n", "ir_path", "=", "base_dir", "+", "\"irs/\"", "\n", "num_of_classes", "=", "20", "\n", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.fsd50k.dataset.decode_mp3": [[52, 68], ["av.open", "next", "enumerate", "numpy.concatenate", "io.BytesIO", "av.open.demux", "packet.decode", "RuntimeError", "mp3_arr.tobytes", "a.append", "frame.to_ndarray().reshape", "frame.to_ndarray"], "function", ["None"], ["container", "=", "av", ".", "open", "(", "io", ".", "BytesIO", "(", "mp3_arr", ".", "tobytes", "(", ")", ")", ")", "\n", "stream", "=", "next", "(", "s", "for", "s", "in", "container", ".", "streams", "if", "s", ".", "type", "==", "'audio'", ")", "\n", "# print(stream)", "\n", "a", "=", "[", "]", "\n", "for", "i", ",", "packet", "in", "enumerate", "(", "container", ".", "demux", "(", "stream", ")", ")", ":", "\n", "        ", "for", "frame", "in", "packet", ".", "decode", "(", ")", ":", "\n", "            ", "a", ".", "append", "(", "frame", ".", "to_ndarray", "(", ")", ".", "reshape", "(", "-", "1", ")", ")", "\n", "", "", "waveform", "=", "np", ".", "concatenate", "(", "a", ")", "\n", "if", "waveform", ".", "dtype", "!=", "'float32'", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"Unexpected wave type\"", ")", "\n", "", "return", "waveform", "\n", "\n", "\n", "", "def", "pad_or_truncate", "(", "x", ",", "audio_length", ")", ":", "\n", "    ", "\"\"\"Pad all audio to specific length.\"\"\"", "\n", "if", "len", "(", "x", ")", "<=", "audio_length", ":", "\n", "        ", "return", "np", ".", "concatenate", "(", "(", "x", ",", "np", ".", "zeros", "(", "audio_length", "-", "len", "(", "x", ")", ",", "dtype", "=", "np", ".", "float32", ")", ")", ",", "axis", "=", "0", ")", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.fsd50k.dataset.pad_or_truncate": [[70, 80], ["len", "numpy.concatenate", "torch.randint().item", "numpy.zeros", "torch.randint", "len", "len"], "function", ["None"], ["        ", "return", "x", "[", "0", ":", "audio_length", "]", "\n", "\n", "\n", "", "", "irs_arr", "=", "None", "\n", "\n", "\n", "@", "dataset", ".", "command", "\n", "def", "get_ir_sample", "(", "ir_path", ",", "_run", ",", "ir_augment", ",", "cut_irs_offset", "=", "None", ")", ":", "\n", "    ", "if", "not", "ir_augment", ":", "\n", "        ", "return", "\n", "", "global", "irs_arr", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.fsd50k.dataset.get_ir_sample": [[85, 102], ["sorted", "print", "range", "len", "print", "int", "pathlib.Path().rglob", "str().rsplit", "librosa.load", "numpy.random.randint", "len", "pathlib.Path", "str", "os.path.expanduser"], "function", ["None"], ["            ", "all_paths", "=", "all_paths", "[", "cut_irs_offset", ":", "cut_irs_offset", "+", "10", "]", "\n", "", "all_paths_name", "=", "[", "str", "(", "p", ")", ".", "rsplit", "(", "\"/\"", ",", "1", ")", "[", "-", "1", "]", "for", "p", "in", "all_paths", "]", "\n", "print", "(", "\"will use these IRs:\"", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "all_paths_name", ")", ")", ":", "\n", "            ", "print", "(", "i", ",", "\": \"", ",", "all_paths_name", "[", "i", "]", ")", "\n", "", "_run", ".", "info", "[", "\"ir_devices\"", "]", "=", "all_paths_name", "\n", "irs_arr", "=", "[", "librosa", ".", "load", "(", "p", ",", "sr", "=", "32000", ")", "[", "0", "]", "for", "p", "in", "all_paths", "]", "\n", "", "return", "irs_arr", "[", "int", "(", "np", ".", "random", ".", "randint", "(", "0", ",", "len", "(", "irs_arr", ")", ")", ")", "]", "\n", "\n", "\n", "", "@", "dataset", ".", "command", "\n", "def", "pydub_augment", "(", "waveform", ",", "gain_augment", "=", "7", ",", "ir_augment", "=", "0", ")", ":", "\n", "    ", "if", "ir_augment", "and", "torch", ".", "rand", "(", "1", ")", "<", "ir_augment", ":", "\n", "        ", "ir", "=", "get_ir_sample", "(", ")", "\n", "waveform", "=", "convolve", "(", "waveform", ",", "ir", ",", "'full'", ")", "\n", "", "if", "gain_augment", ":", "\n", "        ", "gain", "=", "torch", ".", "randint", "(", "gain_augment", "*", "2", ",", "(", "1", ",", ")", ")", ".", "item", "(", ")", "-", "gain_augment", "\n", "amp", "=", "10", "**", "(", "gain", "/", "20", ")", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.fsd50k.dataset.pydub_augment": [[104, 114], ["dataset.get_ir_sample", "scipy.signal.convolve", "torch.rand", "torch.randint().item", "torch.randint"], "function", ["home.repos.pwc.inspect_result.kkoutini_passt.audioset.dataset.get_ir_sample"], ["", "return", "waveform", "\n", "\n", "\n", "", "class", "MixupDataset", "(", "TorchDataset", ")", ":", "\n", "    ", "\"\"\" Mixing Up wave forms\n    \"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "dataset", ",", "beta", "=", "2", ",", "rate", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "beta", "=", "beta", "\n", "self", ".", "rate", "=", "rate", "\n", "self", ".", "dataset", "=", "dataset", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.fsd50k.dataset.get_base_training_set": [[222, 226], ["dataset.AudioSetDataset"], "function", ["None"], ["    ", "ds", "=", "AudioSetDataset", "(", "openmic_train_hdf5", ",", "augment", "=", "True", ")", "\n", "return", "ds", "\n", "\n", "\n", "", "@", "dataset", ".", "command", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.fsd50k.dataset.preload_mp3": [[228, 239], ["print", "h5py.File", "print", "print", "len"], "function", ["None"], ["epoch_len", "=", "100000", ",", "sampler_replace", "=", "False", ")", ":", "\n", "    ", "num_nodes", "=", "int", "(", "os", ".", "environ", ".", "get", "(", "'num_nodes'", ",", "1", ")", ")", "\n", "ddp", "=", "int", "(", "os", ".", "environ", ".", "get", "(", "'DDP'", ",", "1", ")", ")", "\n", "num_nodes", "=", "max", "(", "ddp", ",", "num_nodes", ")", "\n", "print", "(", "\"num_nodes= \"", ",", "num_nodes", ")", "\n", "rank", "=", "int", "(", "os", ".", "environ", ".", "get", "(", "'NODE_RANK'", ",", "0", ")", ")", "\n", "return", "DistributedSamplerWrapper", "(", "sampler", "=", "WeightedRandomSampler", "(", "samples_weights", ",", "\n", "num_samples", "=", "epoch_len", ",", "replacement", "=", "sampler_replace", ")", ",", "\n", "dataset", "=", "range", "(", "epoch_len", ")", ",", "\n", "num_replicas", "=", "num_nodes", ",", "\n", "rank", "=", "rank", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.fsd50k.dataset.get_ft_weighted_sampler": [[241, 254], ["sacred.config.CMD", "int", "int", "max", "print", "int", "dataset.DistributedSamplerWrapper", "os.environ.get", "os.environ.get", "os.environ.get", "torch.utils.data.WeightedRandomSampler", "range"], "function", ["home.repos.pwc.inspect_result.kkoutini_passt.helpers.audiodatasets.ObjectCacher.get", "home.repos.pwc.inspect_result.kkoutini_passt.helpers.audiodatasets.ObjectCacher.get", "home.repos.pwc.inspect_result.kkoutini_passt.helpers.audiodatasets.ObjectCacher.get"], ["\n", "", "@", "dataset", ".", "command", "\n", "def", "get_base_test_set", "(", "openmic_test_hdf5", ")", ":", "\n", "    ", "ds", "=", "AudioSetDataset", "(", "openmic_test_hdf5", ")", "\n", "return", "ds", "\n", "\n", "\n", "", "@", "dataset", ".", "command", "(", "prefix", "=", "'roll_conf'", ")", "\n", "def", "get_roll_func", "(", "axis", "=", "1", ",", "shift", "=", "None", ",", "shift_range", "=", "50", ")", ":", "\n", "    ", "print", "(", "\"rolling...\"", ")", "\n", "\n", "def", "roll_func", "(", "b", ")", ":", "\n", "        ", "x", ",", "i", ",", "y", "=", "b", "\n", "x", "=", "torch", ".", "as_tensor", "(", "x", ")", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.fsd50k.dataset.get_base_eval_set": [[257, 265], ["print", "dataset.AudioSetDataset", "dataset.AudioSetDataset"], "function", ["None"], ["            ", "sf", "=", "int", "(", "np", ".", "random", ".", "random_integers", "(", "-", "shift_range", ",", "shift_range", ")", ")", "\n", "", "global", "FirstTime", "\n", "\n", "return", "x", ".", "roll", "(", "sf", ",", "axis", ")", ",", "i", ",", "y", "\n", "\n", "", "return", "roll_func", "\n", "\n", "\n", "", "@", "dataset", ".", "command", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.fsd50k.dataset.get_base_valid_set": [[267, 275], ["print", "dataset.AudioSetDataset", "dataset.AudioSetDataset"], "function", ["None"], ["    ", "ds", "=", "get_base_training_set", "(", ")", "\n", "get_ir_sample", "(", ")", "\n", "if", "normalize", ":", "\n", "        ", "print", "(", "\"normalized train!\"", ")", "\n", "fill_norms", "(", ")", "\n", "ds", "=", "PreprocessDataset", "(", "ds", ",", "norm_func", ")", "\n", "", "if", "roll", ":", "\n", "        ", "ds", "=", "PreprocessDataset", "(", "ds", ",", "get_roll_func", "(", ")", ")", "\n", "", "if", "wavmix", ":", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.fsd50k.dataset.get_roll_func": [[277, 292], ["dataset.command", "print", "torch.as_tensor", "int", "torch.as_tensor.roll", "numpy.random.random_integers"], "function", ["None"], ["\n", "", "return", "ds", "\n", "\n", "\n", "", "@", "dataset", ".", "command", "\n", "def", "get_test_set", "(", "normalize", ")", ":", "\n", "    ", "ds", "=", "get_base_test_set", "(", ")", "\n", "if", "normalize", ":", "\n", "        ", "print", "(", "\"normalized test!\"", ")", "\n", "fill_norms", "(", ")", "\n", "ds", "=", "PreprocessDataset", "(", "ds", ",", "norm_func", ")", "\n", "", "return", "ds", "\n", "\n", "\n", "", "@", "dataset", ".", "command", "\n", "def", "print_conf", "(", "_config", ")", ":", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.fsd50k.dataset.get_training_set": [[294, 308], ["dataset.get_base_training_set", "dataset.get_ir_sample", "print", "fill_norms", "helpers.audiodatasets.PreprocessDataset", "helpers.audiodatasets.PreprocessDataset", "dataset.MixupDataset", "dataset.get_roll_func"], "function", ["home.repos.pwc.inspect_result.kkoutini_passt.audioset.dataset.get_base_training_set", "home.repos.pwc.inspect_result.kkoutini_passt.audioset.dataset.get_ir_sample", "home.repos.pwc.inspect_result.kkoutini_passt.audioset.dataset.get_roll_func"], ["print", "(", "_config", ")", "\n", "print", "(", ")", "\n", "\n", "\n", "", "class", "DistributedSamplerWrapper", "(", "DistributedSampler", ")", ":", "\n", "    ", "def", "__init__", "(", "\n", "self", ",", "sampler", ",", "dataset", ",", "\n", "num_replicas", "=", "None", ",", "\n", "rank", "=", "None", ",", "\n", "shuffle", ":", "bool", "=", "True", ")", ":", "\n", "        ", "super", "(", "DistributedSamplerWrapper", ",", "self", ")", ".", "__init__", "(", "\n", "dataset", ",", "num_replicas", ",", "rank", ",", "shuffle", ")", "\n", "# source: @awaelchli https://github.com/PyTorchLightning/pytorch-lightning/issues/3238", "\n", "self", ".", "sampler", "=", "sampler", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.fsd50k.dataset.get_valid_set": [[310, 318], ["dataset.get_base_valid_set", "print", "fill_norms", "helpers.audiodatasets.PreprocessDataset"], "function", ["home.repos.pwc.inspect_result.kkoutini_passt.fsd50k.dataset.get_base_valid_set"], ["        ", "if", "self", ".", "sampler", ".", "generator", "is", "None", ":", "\n", "            ", "self", ".", "sampler", ".", "generator", "=", "torch", ".", "Generator", "(", ")", "\n", "", "self", ".", "sampler", ".", "generator", ".", "manual_seed", "(", "self", ".", "seed", "+", "self", ".", "epoch", ")", "\n", "indices", "=", "list", "(", "self", ".", "sampler", ")", "\n", "if", "self", ".", "epoch", "==", "0", ":", "\n", "            ", "print", "(", "f\"\\n DistributedSamplerWrapper :  {indices[:10]} \\n\\n\"", ")", "\n", "", "indices", "=", "indices", "[", "self", ".", "rank", ":", "self", ".", "total_size", ":", "self", ".", "num_replicas", "]", "\n", "return", "iter", "(", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.fsd50k.dataset.get_eval_set": [[320, 328], ["dataset.get_base_eval_set", "print", "fill_norms", "helpers.audiodatasets.PreprocessDataset"], "function", ["home.repos.pwc.inspect_result.kkoutini_passt.fsd50k.dataset.get_base_eval_set"], ["", "", "if", "__name__", "==", "\"__main__\"", ":", "\n", "    ", "from", "sacred", "import", "Experiment", "\n", "\n", "ex", "=", "Experiment", "(", "\"test_dataset\"", ",", "ingredients", "=", "[", "dataset", "]", ")", "\n", "\n", "\n", "@", "ex", ".", "automain", "\n", "def", "default_command", "(", ")", ":", "\n", "        ", "ex", ".", "current_run", ".", "get_command_function", "(", "\"print_config\"", ")", "(", ")", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.fsd50k.dataset.print_conf": [[330, 335], ["print", "print", "print", "id"], "function", ["None"], ["ds", "=", "get_test_set", "(", ")", "\n", "print", "(", "ds", "[", "0", "]", ")", "\n", "ds", "=", "get_training_set", "(", ")", "\n", "print", "(", "ds", "[", "0", "]", ")", "\n", "print", "(", "\"get_base_training_set\"", ",", "len", "(", "get_base_training_set", "(", ")", ")", ")", "\n", "print", "(", "\"get_base_test_set\"", ",", "len", "(", "get_base_test_set", "(", ")", ")", ")", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.audioset.dataset.MixupDataset.__init__": [[119, 124], ["print", "len"], "methods", ["None"], ["y1", "=", "torch", ".", "as_tensor", "(", "y1", ")", "\n", "if", "torch", ".", "rand", "(", "1", ")", "<", "self", ".", "rate", ":", "\n", "            ", "idx2", "=", "torch", ".", "randint", "(", "len", "(", "self", ".", "dataset", ")", ",", "(", "1", ",", ")", ")", ".", "item", "(", ")", "\n", "x2", ",", "f2", ",", "y2", "=", "self", ".", "dataset", "[", "idx2", "]", "\n", "y2", "=", "torch", ".", "as_tensor", "(", "y2", ")", "\n", "l", "=", "np", ".", "random", ".", "beta", "(", "self", ".", "beta", ",", "self", ".", "beta", ")", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.audioset.dataset.MixupDataset.__getitem__": [[125, 138], ["torch.rand", "torch.randint().item", "numpy.random.beta", "max", "x1.mean", "x2.mean", "x.mean", "torch.randint", "len"], "methods", ["None"], ["l", "=", "max", "(", "l", ",", "1.", "-", "l", ")", "\n", "x1", "=", "x1", "-", "x1", ".", "mean", "(", ")", "\n", "x2", "=", "x2", "-", "x2", ".", "mean", "(", ")", "\n", "x", "=", "(", "x1", "*", "l", "+", "x2", "*", "(", "1.", "-", "l", ")", ")", "\n", "x", "=", "x", "-", "x", ".", "mean", "(", ")", "\n", "assert", "len", "(", "y1", ")", "==", "40", ",", "\"only for openmic, works this\"", "\n", "y_mask1", "=", "(", "torch", ".", "as_tensor", "(", "y1", "[", "20", ":", "]", ")", ">", "0.5", ")", ".", "float", "(", ")", "\n", "y_mask2", "=", "(", "torch", ".", "as_tensor", "(", "y2", "[", "20", ":", "]", ")", ">", "0.5", ")", ".", "float", "(", ")", "\n", "y1", "[", ":", "20", "]", "*=", "y_mask1", "\n", "y2", "[", ":", "20", "]", "*=", "y_mask2", "\n", "yres", "=", "(", "y1", "*", "l", "+", "y2", "*", "(", "1.", "-", "l", ")", ")", "\n", "yres", "[", "20", ":", "]", "=", "torch", ".", "stack", "(", "[", "y_mask1", ",", "y_mask2", "]", ")", ".", "max", "(", "dim", "=", "0", ")", ".", "values", "\n", "return", "x", ",", "f1", ",", "yres", "\n", "", "return", "x1", ",", "f1", ",", "y1", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.audioset.dataset.MixupDataset.__len__": [[139, 141], ["len"], "methods", ["None"], ["\n", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "dataset", ")", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.audioset.dataset.AudioSetDataset.__init__": [[144, 163], ["print", "h5py.File", "len", "print", "print", "open", "io.BytesIO", "f.read"], "methods", ["None"], ["\n", "", "", "class", "AudioSetDataset", "(", "TorchDataset", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "hdf5_file", ",", "sample_rate", "=", "32000", ",", "classes_num", "=", "527", ",", "clip_length", "=", "10", ",", "augment", "=", "False", ",", "in_mem", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Reads the mp3 bytes from HDF file decodes using av and returns a fixed length audio wav\n        \"\"\"", "\n", "self", ".", "sample_rate", "=", "sample_rate", "\n", "self", ".", "hdf5_file", "=", "hdf5_file", "\n", "if", "in_mem", ":", "\n", "            ", "print", "(", "\"\\nPreloading in memory\\n\"", ")", "\n", "with", "open", "(", "hdf5_file", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "self", ".", "hdf5_file", "=", "io", ".", "BytesIO", "(", "f", ".", "read", "(", ")", ")", "\n", "", "", "with", "h5py", ".", "File", "(", "hdf5_file", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "self", ".", "length", "=", "len", "(", "f", "[", "'audio_name'", "]", ")", "\n", "print", "(", "f\"Dataset from {hdf5_file} with length {self.length}.\"", ")", "\n", "", "self", ".", "dataset_file", "=", "None", "# lazy init", "\n", "self", ".", "clip_length", "=", "clip_length", "*", "sample_rate", "\n", "self", ".", "classes_num", "=", "classes_num", "\n", "self", ".", "augment", "=", "augment", "\n", "if", "augment", ":", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.audioset.dataset.AudioSetDataset.open_hdf5": [[164, 166], ["h5py.File"], "methods", ["None"], ["            ", "print", "(", "f\"Will agument data from {hdf5_file}\"", ")", "\n", "\n", "", "", "def", "open_hdf5", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.audioset.dataset.AudioSetDataset.__len__": [[167, 169], ["None"], "methods", ["None"], ["        ", "self", ".", "dataset_file", "=", "h5py", ".", "File", "(", "self", ".", "hdf5_file", ",", "'r'", ")", "\n", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.audioset.dataset.AudioSetDataset.__del__": [[170, 174], ["dataset.AudioSetDataset.dataset_file.close"], "methods", ["None"], ["        ", "return", "self", ".", "length", "\n", "\n", "", "def", "__del__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "dataset_file", "is", "not", "None", ":", "\n", "            ", "self", ".", "dataset_file", ".", "close", "(", ")", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.audioset.dataset.AudioSetDataset.__getitem__": [[175, 201], ["[].decode", "dataset.decode_mp3", "dataset.pad_or_truncate", "dataset.AudioSetDataset.resample", "numpy.unpackbits().astype", "dataset.AudioSetDataset.open_hdf5", "dataset.pydub_augment", "pydub_augment.reshape", "numpy.unpackbits"], "methods", ["home.repos.pwc.inspect_result.kkoutini_passt.audioset.dataset.decode_mp3", "home.repos.pwc.inspect_result.kkoutini_passt.audioset.dataset.pad_or_truncate", "home.repos.pwc.inspect_result.kkoutini_passt.audioset.dataset.AudioSetDataset.resample", "home.repos.pwc.inspect_result.kkoutini_passt.audioset.dataset.AudioSetDataset.open_hdf5", "home.repos.pwc.inspect_result.kkoutini_passt.audioset.dataset.pydub_augment"], ["self", ".", "dataset_file", "=", "None", "\n", "\n", "", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"Load waveform and target of an audio clip.\n\n        Args:\n          meta: {\n            'hdf5_path': str,\n            'index_in_hdf5': int}\n        Returns:\n          data_dict: {\n            'audio_name': str,\n            'waveform': (clip_samples,),\n            'target': (classes_num,)}\n        \"\"\"", "\n", "if", "self", ".", "dataset_file", "is", "None", ":", "\n", "            ", "self", ".", "open_hdf5", "(", ")", "\n", "\n", "", "audio_name", "=", "self", ".", "dataset_file", "[", "'audio_name'", "]", "[", "index", "]", ".", "decode", "(", ")", "\n", "waveform", "=", "decode_mp3", "(", "self", ".", "dataset_file", "[", "'mp3'", "]", "[", "index", "]", ")", "\n", "if", "self", ".", "augment", ":", "\n", "            ", "waveform", "=", "pydub_augment", "(", "waveform", ")", "\n", "", "waveform", "=", "pad_or_truncate", "(", "waveform", ",", "self", ".", "clip_length", ")", "\n", "waveform", "=", "self", ".", "resample", "(", "waveform", ")", "\n", "target", "=", "self", ".", "dataset_file", "[", "'target'", "]", "[", "index", "]", "\n", "target", "=", "target", ".", "astype", "(", "np", ".", "float32", ")", "\n", "return", "waveform", ".", "reshape", "(", "1", ",", "-", "1", ")", ",", "audio_name", ",", "target", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.audioset.dataset.AudioSetDataset.resample": [[202, 217], ["Exception"], "methods", ["None"], ["\n", "", "def", "resample", "(", "self", ",", "waveform", ")", ":", "\n", "        ", "\"\"\"Resample.\n        Args:\n          waveform: (clip_samples,)\n        Returns:\n          (resampled_clip_samples,)\n        \"\"\"", "\n", "if", "self", ".", "sample_rate", "==", "32000", ":", "\n", "            ", "return", "waveform", "\n", "", "elif", "self", ".", "sample_rate", "==", "16000", ":", "\n", "            ", "return", "waveform", "[", "0", ":", ":", "2", "]", "\n", "", "elif", "self", ".", "sample_rate", "==", "8000", ":", "\n", "            ", "return", "waveform", "[", "0", ":", ":", "4", "]", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'Incorrect sample rate!'", ")", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.audioset.dataset.DistributedSamplerWrapper.__init__": [[382, 391], ["torch.utils.data.DistributedSampler.__init__"], "methods", ["home.repos.pwc.inspect_result.kkoutini_passt.audioset.dataset.DistributedSamplerWrapper.__init__"], []], "home.repos.pwc.inspect_result.kkoutini_passt.audioset.dataset.DistributedSamplerWrapper.__iter__": [[392, 401], ["dataset.DistributedSamplerWrapper.sampler.generator.manual_seed", "list", "iter", "torch.Generator", "print"], "methods", ["None"], []], "home.repos.pwc.inspect_result.kkoutini_passt.audioset.dataset.default_config": [[25, 45], ["balanced_train_hdf5.replace.replace", "unbalanced_train_hdf5.replace.replace", "eval_hdf5.replace.replace", "os.environ.get", "os.environ.get", "os.environ.get"], "function", ["home.repos.pwc.inspect_result.kkoutini_passt.helpers.audiodatasets.ObjectCacher.get", "home.repos.pwc.inspect_result.kkoutini_passt.helpers.audiodatasets.ObjectCacher.get", "home.repos.pwc.inspect_result.kkoutini_passt.helpers.audiodatasets.ObjectCacher.get"], ["dataset", "=", "Dataset", "(", "'openMIC'", ")", "\n", "\n", "\n", "@", "dataset", ".", "config", "\n", "def", "default_config", "(", ")", ":", "\n", "    ", "name", "=", "'openmic2008'", "# dataset name", "\n", "normalize", "=", "False", "# normalize dataset", "\n", "subsample", "=", "False", "# subsample squares from the dataset", "\n", "roll", "=", "True", "# apply roll augmentation", "\n", "fold", "=", "1", "\n", "base_dir", "=", "\"audioset_hdf5s/\"", "# base directory of the dataset as downloaded", "\n", "if", "LMODE", ":", "\n", "        ", "base_dir", "=", "\"/system/user/publicdata/CP/audioset/audioset_hdf5s/\"", "\n", "", "openmic_train_hdf5", "=", "base_dir", "+", "\"mp3/openmic_train.csv_mp3.hdf\"", "\n", "openmic_test_hdf5", "=", "base_dir", "+", "\"mp3/openmic_test.csv_mp3.hdf\"", "\n", "ir_path", "=", "base_dir", "+", "\"irs/\"", "\n", "num_of_classes", "=", "20", "\n", "\n", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.audioset.dataset.decode_mp3": [[55, 71], ["av.open", "next", "enumerate", "numpy.concatenate", "io.BytesIO", "av.open.demux", "packet.decode", "RuntimeError", "mp3_arr.tobytes", "a.append", "frame.to_ndarray().reshape", "frame.to_ndarray"], "function", ["None"], ["a", "=", "[", "]", "\n", "for", "i", ",", "packet", "in", "enumerate", "(", "container", ".", "demux", "(", "stream", ")", ")", ":", "\n", "        ", "for", "frame", "in", "packet", ".", "decode", "(", ")", ":", "\n", "            ", "a", ".", "append", "(", "frame", ".", "to_ndarray", "(", ")", ".", "reshape", "(", "-", "1", ")", ")", "\n", "", "", "waveform", "=", "np", ".", "concatenate", "(", "a", ")", "\n", "if", "waveform", ".", "dtype", "!=", "'float32'", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"Unexpected wave type\"", ")", "\n", "", "return", "waveform", "\n", "\n", "\n", "", "def", "pad_or_truncate", "(", "x", ",", "audio_length", ")", ":", "\n", "    ", "\"\"\"Pad all audio to specific length.\"\"\"", "\n", "if", "len", "(", "x", ")", "<=", "audio_length", ":", "\n", "        ", "return", "np", ".", "concatenate", "(", "(", "x", ",", "np", ".", "zeros", "(", "audio_length", "-", "len", "(", "x", ")", ",", "dtype", "=", "np", ".", "float32", ")", ")", ",", "axis", "=", "0", ")", "\n", "", "else", ":", "\n", "        ", "return", "x", "[", "0", ":", "audio_length", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.audioset.dataset.pad_or_truncate": [[73, 79], ["len", "numpy.concatenate", "numpy.zeros", "len"], "function", ["None"], ["", "", "irs_arr", "=", "None", "\n", "\n", "\n", "@", "dataset", ".", "command", "\n", "def", "get_ir_sample", "(", "ir_path", ",", "_run", ",", "ir_augment", ",", "cut_irs_offset", "=", "None", ")", ":", "\n", "    ", "if", "not", "ir_augment", ":", "\n", "        ", "return", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.audioset.dataset.get_ir_sample": [[84, 101], ["sorted", "print", "range", "len", "print", "int", "pathlib.Path().rglob", "str().rsplit", "librosa.load", "numpy.random.randint", "len", "pathlib.Path", "str", "os.path.expanduser"], "function", ["None"], ["if", "cut_irs_offset", "is", "not", "None", ":", "\n", "            ", "all_paths", "=", "all_paths", "[", "cut_irs_offset", ":", "cut_irs_offset", "+", "10", "]", "\n", "", "all_paths_name", "=", "[", "str", "(", "p", ")", ".", "rsplit", "(", "\"/\"", ",", "1", ")", "[", "-", "1", "]", "for", "p", "in", "all_paths", "]", "\n", "print", "(", "\"will use these IRs:\"", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "all_paths_name", ")", ")", ":", "\n", "            ", "print", "(", "i", ",", "\": \"", ",", "all_paths_name", "[", "i", "]", ")", "\n", "", "_run", ".", "info", "[", "\"ir_devices\"", "]", "=", "all_paths_name", "\n", "irs_arr", "=", "[", "librosa", ".", "load", "(", "p", ",", "sr", "=", "32000", ")", "[", "0", "]", "for", "p", "in", "all_paths", "]", "\n", "", "return", "irs_arr", "[", "int", "(", "np", ".", "random", ".", "randint", "(", "0", ",", "len", "(", "irs_arr", ")", ")", ")", "]", "\n", "\n", "\n", "", "@", "dataset", ".", "command", "\n", "def", "pydub_augment", "(", "waveform", ",", "gain_augment", "=", "7", ",", "ir_augment", "=", "0", ")", ":", "\n", "    ", "if", "ir_augment", "and", "torch", ".", "rand", "(", "1", ")", "<", "ir_augment", ":", "\n", "        ", "ir", "=", "get_ir_sample", "(", ")", "\n", "waveform", "=", "convolve", "(", "waveform", ",", "ir", ",", "'full'", ")", "\n", "", "if", "gain_augment", ":", "\n", "        ", "gain", "=", "torch", ".", "randint", "(", "gain_augment", "*", "2", ",", "(", "1", ",", ")", ")", ".", "item", "(", ")", "-", "gain_augment", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.audioset.dataset.pydub_augment": [[103, 113], ["dataset.get_ir_sample", "scipy.signal.convolve", "torch.rand", "torch.randint().item", "torch.randint"], "function", ["home.repos.pwc.inspect_result.kkoutini_passt.audioset.dataset.get_ir_sample"], ["waveform", "=", "waveform", "*", "amp", "\n", "", "return", "waveform", "\n", "\n", "\n", "", "class", "MixupDataset", "(", "TorchDataset", ")", ":", "\n", "    ", "\"\"\" Mixing Up wave forms\n    \"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "dataset", ",", "beta", "=", "2", ",", "rate", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "beta", "=", "beta", "\n", "self", ".", "rate", "=", "rate", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.audioset.dataset.get_base_training_set": [[219, 223], ["dataset.AudioSetDataset"], "function", ["None"], ["\n", "", "", "", "@", "dataset", ".", "command", "\n", "def", "get_base_training_set", "(", "openmic_train_hdf5", ")", ":", "\n", "    ", "ds", "=", "AudioSetDataset", "(", "openmic_train_hdf5", ",", "augment", "=", "True", ")", "\n", "return", "ds", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.audioset.dataset.get_unbalanced_training_set": [[225, 229], ["dataset.AudioSetDataset"], "function", ["None"], ["\n", "", "@", "dataset", ".", "command", "\n", "def", "get_ft_weighted_sampler", "(", "samples_weights", "=", "CMD", "(", "\".get_ft_cls_balanced_sample_weights\"", ")", ",", "\n", "epoch_len", "=", "100000", ",", "sampler_replace", "=", "False", ")", ":", "\n", "    ", "num_nodes", "=", "int", "(", "os", ".", "environ", ".", "get", "(", "'num_nodes'", ",", "1", ")", ")", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.audioset.dataset.get_norms_dataset": [[232, 237], ["torch.utils.data.ConcatDataset", "dataset.AudioSetDataset", "dataset.AudioSetDataset"], "function", ["None"], ["print", "(", "\"num_nodes= \"", ",", "num_nodes", ")", "\n", "rank", "=", "int", "(", "os", ".", "environ", ".", "get", "(", "'NODE_RANK'", ",", "0", ")", ")", "\n", "return", "DistributedSamplerWrapper", "(", "sampler", "=", "WeightedRandomSampler", "(", "samples_weights", ",", "\n", "num_samples", "=", "epoch_len", ",", "replacement", "=", "sampler_replace", ")", ",", "\n", "dataset", "=", "range", "(", "epoch_len", ")", ",", "\n", "num_replicas", "=", "num_nodes", ",", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.audioset.dataset.get_base_full_training_set": [[239, 244], ["torch.utils.data.ConcatDataset", "dataset.get_base_training_set", "dataset.get_unbalanced_training_set"], "function", ["home.repos.pwc.inspect_result.kkoutini_passt.audioset.dataset.get_base_training_set", "home.repos.pwc.inspect_result.kkoutini_passt.audioset.dataset.get_unbalanced_training_set"], [")", "\n", "\n", "\n", "", "@", "dataset", ".", "command", "\n", "def", "get_base_test_set", "(", "openmic_test_hdf5", ")", ":", "\n", "    ", "ds", "=", "AudioSetDataset", "(", "openmic_test_hdf5", ")", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.audioset.dataset.preload_mp3": [[246, 255], ["print", "h5py.File", "print", "print", "len"], "function", ["None"], ["\n", "\n", "", "@", "dataset", ".", "command", "(", "prefix", "=", "'roll_conf'", ")", "\n", "def", "get_roll_func", "(", "axis", "=", "1", ",", "shift", "=", "None", ",", "shift_range", "=", "50", ")", ":", "\n", "    ", "print", "(", "\"rolling...\"", ")", "\n", "\n", "def", "roll_func", "(", "b", ")", ":", "\n", "        ", "x", ",", "i", ",", "y", "=", "b", "\n", "x", "=", "torch", ".", "as_tensor", "(", "x", ")", "\n", "sf", "=", "shift", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.audioset.dataset.get_ft_cls_balanced_sample_weights": [[257, 291], ["numpy.concatenate", "torch.as_tensor", "torch.as_tensor.long().sum().float().reshape", "print", "print", "all_weight.sum.sum", "all_weight.sum.max", "h5py.File", "numpy.unpackbits", "torch.as_tensor.append", "torch.as_tensor.long().sum().float", "torch.as_tensor.long().sum", "all_y.long().sum().float().reshape.min", "torch.as_tensor.long"], "function", ["None"], ["            ", "sf", "=", "int", "(", "np", ".", "random", ".", "random_integers", "(", "-", "shift_range", ",", "shift_range", ")", ")", "\n", "", "global", "FirstTime", "\n", "\n", "return", "x", ".", "roll", "(", "sf", ",", "axis", ")", ",", "i", ",", "y", "\n", "\n", "", "return", "roll_func", "\n", "\n", "\n", "", "@", "dataset", ".", "command", "\n", "def", "get_training_set", "(", "normalize", ",", "roll", ",", "wavmix", "=", "False", ")", ":", "\n", "    ", "ds", "=", "get_base_training_set", "(", ")", "\n", "get_ir_sample", "(", ")", "\n", "if", "normalize", ":", "\n", "        ", "print", "(", "\"normalized train!\"", ")", "\n", "fill_norms", "(", ")", "\n", "ds", "=", "PreprocessDataset", "(", "ds", ",", "norm_func", ")", "\n", "", "if", "roll", ":", "\n", "        ", "ds", "=", "PreprocessDataset", "(", "ds", ",", "get_roll_func", "(", ")", ")", "\n", "", "if", "wavmix", ":", "\n", "        ", "ds", "=", "MixupDataset", "(", "ds", ")", "\n", "\n", "", "return", "ds", "\n", "\n", "\n", "", "@", "dataset", ".", "command", "\n", "def", "get_test_set", "(", "normalize", ")", ":", "\n", "    ", "ds", "=", "get_base_test_set", "(", ")", "\n", "if", "normalize", ":", "\n", "        ", "print", "(", "\"normalized test!\"", ")", "\n", "fill_norms", "(", ")", "\n", "ds", "=", "PreprocessDataset", "(", "ds", ",", "norm_func", ")", "\n", "", "return", "ds", "\n", "\n", "\n", "", "@", "dataset", ".", "command", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.audioset.dataset.get_ft_weighted_sampler": [[293, 306], ["sacred.config.CMD", "int", "int", "max", "print", "int", "dataset.DistributedSamplerWrapper", "os.environ.get", "os.environ.get", "os.environ.get", "torch.utils.data.WeightedRandomSampler", "range"], "function", ["home.repos.pwc.inspect_result.kkoutini_passt.helpers.audiodatasets.ObjectCacher.get", "home.repos.pwc.inspect_result.kkoutini_passt.helpers.audiodatasets.ObjectCacher.get", "home.repos.pwc.inspect_result.kkoutini_passt.helpers.audiodatasets.ObjectCacher.get"], ["    ", "print", "(", "\"Config of \"", ",", "dataset", ".", "path", ",", "id", "(", "dataset", ")", ")", "\n", "print", "(", "_config", ")", "\n", "print", "(", ")", "\n", "\n", "\n", "", "class", "DistributedSamplerWrapper", "(", "DistributedSampler", ")", ":", "\n", "    ", "def", "__init__", "(", "\n", "self", ",", "sampler", ",", "dataset", ",", "\n", "num_replicas", "=", "None", ",", "\n", "rank", "=", "None", ",", "\n", "shuffle", ":", "bool", "=", "True", ")", ":", "\n", "        ", "super", "(", "DistributedSamplerWrapper", ",", "self", ")", ".", "__init__", "(", "\n", "dataset", ",", "num_replicas", ",", "rank", ",", "shuffle", ")", "\n", "# source: @awaelchli https://github.com/PyTorchLightning/pytorch-lightning/issues/3238", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.audioset.dataset.get_base_test_set": [[309, 313], ["dataset.AudioSetDataset"], "function", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "sampler", ".", "generator", "is", "None", ":", "\n", "            ", "self", ".", "sampler", ".", "generator", "=", "torch", ".", "Generator", "(", ")", "\n", "", "self", ".", "sampler", ".", "generator", ".", "manual_seed", "(", "self", ".", "seed", "+", "self", ".", "epoch", ")", "\n", "indices", "=", "list", "(", "self", ".", "sampler", ")", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.audioset.dataset.get_roll_func": [[315, 330], ["dataset.command", "print", "torch.as_tensor", "int", "torch.as_tensor.roll", "numpy.random.random_integers"], "function", ["None"], ["            ", "print", "(", "f\"\\n DistributedSamplerWrapper :  {indices[:10]} \\n\\n\"", ")", "\n", "", "indices", "=", "indices", "[", "self", ".", "rank", ":", "self", ".", "total_size", ":", "self", ".", "num_replicas", "]", "\n", "return", "iter", "(", "indices", ")", "\n", "\n", "\n", "", "", "if", "__name__", "==", "\"__main__\"", ":", "\n", "    ", "from", "sacred", "import", "Experiment", "\n", "\n", "ex", "=", "Experiment", "(", "\"test_dataset\"", ",", "ingredients", "=", "[", "dataset", "]", ")", "\n", "\n", "\n", "@", "ex", ".", "automain", "\n", "def", "default_command", "(", ")", ":", "\n", "        ", "ex", ".", "current_run", ".", "get_command_function", "(", "\"print_config\"", ")", "(", ")", "\n", "get_base_training_set", "(", ")", "\n", "ds", "=", "get_test_set", "(", ")", "\n"]], "home.repos.pwc.inspect_result.kkoutini_passt.audioset.dataset.get_training_set": [[332, 346], ["dataset.get_base_training_set", "dataset.get_ir_sample", "print", "fill_norms", "helpers.audiodatasets.PreprocessDataset", "helpers.audiodatasets.PreprocessDataset", "dataset.MixupDataset", "dataset.get_roll_func"], "function", ["home.repos.pwc.inspect_result.kkoutini_passt.audioset.dataset.get_base_training_set", "home.repos.pwc.inspect_result.kkoutini_passt.audioset.dataset.get_ir_sample", "home.repos.pwc.inspect_result.kkoutini_passt.audioset.dataset.get_roll_func"], ["ds", "=", "get_training_set", "(", ")", "\n", "print", "(", "ds", "[", "0", "]", ")", "\n", "print", "(", "\"get_base_training_set\"", ",", "len", "(", "get_base_training_set", "(", ")", ")", ")", "\n", "print", "(", "\"get_base_test_set\"", ",", "len", "(", "get_base_test_set", "(", ")", ")", ")", "\n", "print", "(", "\"get_training_set\"", ",", "len", "(", "get_training_set", "(", ")", ")", ")", "\n", "print", "(", "\"get_test_set\"", ",", "len", "(", "get_test_set", "(", ")", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kkoutini_passt.audioset.dataset.get_full_training_set": [[348, 361], ["dataset.get_base_full_training_set", "dataset.get_ir_sample", "print", "fill_norms", "helpers.audiodatasets.PreprocessDataset", "helpers.audiodatasets.PreprocessDataset", "dataset.MixupDataset", "dataset.get_roll_func"], "function", ["home.repos.pwc.inspect_result.kkoutini_passt.audioset.dataset.get_base_full_training_set", "home.repos.pwc.inspect_result.kkoutini_passt.audioset.dataset.get_ir_sample", "home.repos.pwc.inspect_result.kkoutini_passt.audioset.dataset.get_roll_func"], []], "home.repos.pwc.inspect_result.kkoutini_passt.audioset.dataset.get_test_set": [[364, 372], ["dataset.get_base_test_set", "print", "fill_norms", "helpers.audiodatasets.PreprocessDataset"], "function", ["home.repos.pwc.inspect_result.kkoutini_passt.audioset.dataset.get_base_test_set"], []], "home.repos.pwc.inspect_result.kkoutini_passt.audioset.dataset.print_conf": [[374, 379], ["print", "print", "print", "id"], "function", ["None"], []]}