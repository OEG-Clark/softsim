{"home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.None.Decon_edit.count_params": [[244, 250], ["model.parameters", "param.numel"], "function", ["None"], ["def", "count_params", "(", "model", ")", ":", "\n", "    ", "zeros", "=", "0", "\n", "for", "param", "in", "model", ".", "parameters", "(", ")", ":", "\n", "        ", "if", "param", "is", "not", "None", ":", "\n", "            ", "zeros", "+=", "param", ".", "numel", "(", ")", "\n", "", "", "return", "zeros", "\n", "\n"]], "home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.None.Decon_edit.my_hook4d_conv1": [[268, 275], ["grad.clone", "range", "grad.detach", "len"], "function", ["None"], ["def", "my_hook4d_conv1", "(", "grad", ")", ":", "\n", "    ", "grad_clone", "=", "grad", ".", "clone", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "index_dict4d", "[", "\"conv1\"", "]", ")", ")", ":", "\n", "        ", "a", ",", "b", ",", "c", ",", "d", "=", "index_dict4d", "[", "\"conv1\"", "]", "[", "i", "]", "\n", "grad_clone", "[", "a", ",", "b", ",", "c", ",", "d", "]", "=", "0", "\n", "", "grad", ".", "detach", "(", ")", "\n", "return", "grad_clone", "\n", "\n"]], "home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.None.Decon_edit.my_hook4d_conv2": [[277, 284], ["grad.clone", "range", "grad.detach", "len"], "function", ["None"], ["", "def", "my_hook4d_conv2", "(", "grad", ")", ":", "\n", "    ", "grad_clone", "=", "grad", ".", "clone", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "index_dict4d", "[", "\"conv2\"", "]", ")", ")", ":", "\n", "        ", "a", ",", "b", ",", "c", ",", "d", "=", "index_dict4d", "[", "\"conv2\"", "]", "[", "i", "]", "\n", "grad_clone", "[", "a", ",", "b", ",", "c", ",", "d", "]", "=", "0", "\n", "", "grad", ".", "detach", "(", ")", "\n", "return", "grad_clone", "\n", "\n"]], "home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.None.Decon_edit.my_hook4d_conv3": [[286, 293], ["grad.clone", "range", "grad.detach", "len"], "function", ["None"], ["", "def", "my_hook4d_conv3", "(", "grad", ")", ":", "\n", "    ", "grad_clone", "=", "grad", ".", "clone", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "index_dict4d", "[", "\"conv3\"", "]", ")", ")", ":", "\n", "        ", "a", ",", "b", ",", "c", ",", "d", "=", "index_dict4d", "[", "\"conv3\"", "]", "[", "i", "]", "\n", "grad_clone", "[", "a", ",", "b", ",", "c", ",", "d", "]", "=", "0", "\n", "", "grad", ".", "detach", "(", ")", "\n", "return", "grad_clone", "\n", "\n"]], "home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.None.Decon_edit.my_hook4d_conv4": [[295, 302], ["grad.clone", "range", "grad.detach", "len"], "function", ["None"], ["", "def", "my_hook4d_conv4", "(", "grad", ")", ":", "\n", "    ", "grad_clone", "=", "grad", ".", "clone", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "index_dict4d", "[", "\"conv4\"", "]", ")", ")", ":", "\n", "        ", "a", ",", "b", ",", "c", ",", "d", "=", "index_dict4d", "[", "\"conv4\"", "]", "[", "i", "]", "\n", "grad_clone", "[", "a", ",", "b", ",", "c", ",", "d", "]", "=", "0", "\n", "", "grad", ".", "detach", "(", ")", "\n", "return", "grad_clone", "\n", "\n"]], "home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.None.Decon_edit.my_hook4d_conv5": [[304, 311], ["grad.clone", "range", "grad.detach", "len"], "function", ["None"], ["", "def", "my_hook4d_conv5", "(", "grad", ")", ":", "\n", "    ", "grad_clone", "=", "grad", ".", "clone", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "index_dict4d", "[", "\"conv5\"", "]", ")", ")", ":", "\n", "        ", "a", ",", "b", ",", "c", ",", "d", "=", "index_dict4d", "[", "\"conv5\"", "]", "[", "i", "]", "\n", "grad_clone", "[", "a", ",", "b", ",", "c", ",", "d", "]", "=", "0", "\n", "", "grad", ".", "detach", "(", ")", "\n", "return", "grad_clone", "\n", "\n"]], "home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.None.Decon_edit.my_hook4d_lin1": [[313, 320], ["grad.clone", "range", "grad.detach", "len"], "function", ["None"], ["", "def", "my_hook4d_lin1", "(", "grad", ")", ":", "\n", "    ", "grad_clone", "=", "grad", ".", "clone", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "index_dict4d", "[", "\"lin1\"", "]", ")", ")", ":", "\n", "        ", "a", ",", "b", "=", "index_dict4d", "[", "\"lin1\"", "]", "[", "i", "]", "\n", "grad_clone", "[", "a", ",", "b", "]", "=", "0", "\n", "", "grad", ".", "detach", "(", ")", "\n", "return", "grad_clone", "\n", "\n"]], "home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.None.Decon_edit.my_hook4d_lin2": [[322, 329], ["grad.clone", "range", "grad.detach", "len"], "function", ["None"], ["", "def", "my_hook4d_lin2", "(", "grad", ")", ":", "\n", "    ", "grad_clone", "=", "grad", ".", "clone", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "index_dict4d", "[", "\"lin2\"", "]", ")", ")", ":", "\n", "        ", "a", ",", "b", "=", "index_dict4d", "[", "\"lin2\"", "]", "[", "i", "]", "\n", "grad_clone", "[", "a", ",", "b", "]", "=", "0", "\n", "", "grad", ".", "detach", "(", ")", "\n", "return", "grad_clone", "\n", "\n"]], "home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.None.Decon_edit.my_hook4d_lin3": [[331, 338], ["grad.clone", "range", "grad.detach", "len"], "function", ["None"], ["", "def", "my_hook4d_lin3", "(", "grad", ")", ":", "\n", "    ", "grad_clone", "=", "grad", ".", "clone", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "index_dict4d", "[", "\"lin3\"", "]", ")", ")", ":", "\n", "        ", "a", ",", "b", "=", "index_dict4d", "[", "\"lin3\"", "]", "[", "i", "]", "\n", "grad_clone", "[", "a", ",", "b", "]", "=", "0", "\n", "", "grad", ".", "detach", "(", ")", "\n", "return", "grad_clone", "\n", "\n"]], "home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.None.Decon_edit.my_hook1d_conv1": [[340, 347], ["grad.clone", "range", "grad.detach", "len"], "function", ["None"], ["", "def", "my_hook1d_conv1", "(", "grad", ")", ":", "\n", "    ", "grad_clone", "=", "grad", ".", "clone", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "index_dict1d", "[", "\"conv1\"", "]", ")", ")", ":", "\n", "        ", "a", "=", "index_dict1d", "[", "\"conv1\"", "]", "[", "i", "]", "\n", "grad_clone", "[", "a", "]", "=", "0", "\n", "", "grad", ".", "detach", "(", ")", "\n", "return", "grad_clone", "\n", "\n"]], "home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.None.Decon_edit.my_hook1d_conv2": [[349, 356], ["grad.clone", "range", "grad.detach", "len"], "function", ["None"], ["", "def", "my_hook1d_conv2", "(", "grad", ")", ":", "\n", "    ", "grad_clone", "=", "grad", ".", "clone", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "index_dict1d", "[", "\"conv2\"", "]", ")", ")", ":", "\n", "        ", "a", "=", "index_dict1d", "[", "\"conv2\"", "]", "[", "i", "]", "\n", "grad_clone", "[", "a", "]", "=", "0", "\n", "", "grad", ".", "detach", "(", ")", "\n", "return", "grad_clone", "\n", "\n"]], "home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.None.Decon_edit.my_hook1d_conv3": [[358, 365], ["grad.clone", "range", "grad.detach", "len"], "function", ["None"], ["", "def", "my_hook1d_conv3", "(", "grad", ")", ":", "\n", "    ", "grad_clone", "=", "grad", ".", "clone", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "index_dict1d", "[", "\"conv3\"", "]", ")", ")", ":", "\n", "        ", "a", "=", "index_dict1d", "[", "\"conv3\"", "]", "[", "i", "]", "\n", "grad_clone", "[", "a", "]", "=", "0", "\n", "", "grad", ".", "detach", "(", ")", "\n", "return", "grad_clone", "\n", "\n"]], "home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.None.Decon_edit.my_hook1d_conv4": [[367, 374], ["grad.clone", "range", "grad.detach", "len"], "function", ["None"], ["", "def", "my_hook1d_conv4", "(", "grad", ")", ":", "\n", "    ", "grad_clone", "=", "grad", ".", "clone", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "index_dict1d", "[", "\"conv4\"", "]", ")", ")", ":", "\n", "        ", "a", "=", "index_dict1d", "[", "\"conv4\"", "]", "[", "i", "]", "\n", "grad_clone", "[", "a", "]", "=", "0", "\n", "", "grad", ".", "detach", "(", ")", "\n", "return", "grad_clone", "\n", "\n"]], "home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.None.Decon_edit.my_hook1d_conv5": [[376, 383], ["grad.clone", "range", "grad.detach", "len"], "function", ["None"], ["", "def", "my_hook1d_conv5", "(", "grad", ")", ":", "\n", "    ", "grad_clone", "=", "grad", ".", "clone", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "index_dict1d", "[", "\"conv5\"", "]", ")", ")", ":", "\n", "        ", "a", "=", "index_dict1d", "[", "\"conv5\"", "]", "[", "i", "]", "\n", "grad_clone", "[", "a", "]", "=", "0", "\n", "", "grad", ".", "detach", "(", ")", "\n", "return", "grad_clone", "\n", "\n"]], "home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.None.Decon_edit.my_hook1d_lin1": [[385, 392], ["grad.clone", "range", "grad.detach", "len"], "function", ["None"], ["", "def", "my_hook1d_lin1", "(", "grad", ")", ":", "\n", "    ", "grad_clone", "=", "grad", ".", "clone", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "index_dict1d", "[", "\"lin1\"", "]", ")", ")", ":", "\n", "        ", "a", "=", "index_dict1d", "[", "\"lin1\"", "]", "[", "i", "]", "\n", "grad_clone", "[", "a", "]", "=", "0", "\n", "", "grad", ".", "detach", "(", ")", "\n", "return", "grad_clone", "\n", "\n"]], "home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.None.Decon_edit.my_hook1d_lin2": [[394, 401], ["grad.clone", "range", "grad.detach", "len"], "function", ["None"], ["", "def", "my_hook1d_lin2", "(", "grad", ")", ":", "\n", "    ", "grad_clone", "=", "grad", ".", "clone", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "index_dict1d", "[", "\"lin2\"", "]", ")", ")", ":", "\n", "        ", "a", "=", "index_dict1d", "[", "\"lin2\"", "]", "[", "i", "]", "\n", "grad_clone", "[", "a", "]", "=", "0", "\n", "", "grad", ".", "detach", "(", ")", "\n", "return", "grad_clone", "\n", "\n"]], "home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.None.Decon_edit.my_hook1d_lin3": [[403, 410], ["grad.clone", "range", "grad.detach", "len"], "function", ["None"], ["", "def", "my_hook1d_lin3", "(", "grad", ")", ":", "\n", "    ", "grad_clone", "=", "grad", ".", "clone", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "index_dict1d", "[", "\"lin3\"", "]", ")", ")", ":", "\n", "        ", "a", "=", "index_dict1d", "[", "\"lin3\"", "]", "[", "i", "]", "\n", "grad_clone", "[", "a", "]", "=", "0", "\n", "", "grad", ".", "detach", "(", ")", "\n", "return", "grad_clone", "\n", "\n"]], "home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.None.Decon_edit.train_to_convergence": [[413, 545], ["print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.device", "torch.device", "torch.device", "torch.device", "torch.DataParallel", "model_ft.to.to", "print", "torch.nn.BCEWithLogitsLoss", "torch.nn.BCEWithLogitsLoss", "torch.nn.BCEWithLogitsLoss", "torch.nn.BCEWithLogitsLoss", "dict", "dict", "model_ft.to.module.children", "torch.SGD", "torch.lr_scheduler.MultiStepLR", "sum", "sum", "Decon_edit.train_to_convergence.countZeroWeights"], "function", ["None"], ["", "def", "train_to_convergence", "(", "prune_each_iteration", ",", "class_weight", ",", "index_dict4d", ",", "index_dict1d", ",", "num_epochs", ",", "number_params_org", ")", ":", "\n", "    ", "path_load", "=", "glob", ".", "glob", "(", "'./iterations/'", "+", "str", "(", "prune_iteration", "-", "1", ")", "+", "'/pruned_rewind/model_prunedrewind.pt'", ")", "[", "0", "]", "\n", "print", "(", "\"path_init_load\"", ",", "path_load", ")", "\n", "# model = alexnet(True)", "\n", "model", "=", "torch", ".", "load", "(", "path_load", ")", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "model_ft", "=", "nn", ".", "DataParallel", "(", "model", ")", "\n", "model_ft", "=", "model_ft", ".", "to", "(", "device", ")", "\n", "# Loss Function", "\n", "print", "(", "class_weight", ")", "\n", "# ############################## LOSS", "\n", "\n", "# criterion = torch.nn.BCEWithLogitsLoss(weight=class_weight, reduce=False) # returns an array not a scalar!", "\n", "criterion", "=", "torch", ".", "nn", ".", "BCEWithLogitsLoss", "(", "pos_weight", "=", "class_weight", ")", "\n", "\n", "# ################################################################################ Count number of zeros", "\n", "layers", "=", "[", "\"conv1\"", ",", "\"conv2\"", ",", "\"conv3\"", ",", "\"conv4\"", ",", "\"conv5\"", ",", "\"lin1\"", ",", "\"lin2\"", ",", "\"lin3\"", "]", "\n", "all", "=", "0", "\n", "# for x in layers:", "\n", "#     key = index_dict4d[x]", "\n", "#     print(\"index_dict4d\", x, len(key))", "\n", "#     all = all + len(key)", "\n", "#     key = index_dict1d[x]", "\n", "#     print(\"index_dict1d\", x, len(key))", "\n", "#     all = all + len(key)", "\n", "# print(\"index_dict4d1d_All\", all)", "\n", "# # ######################################### Test if zero params remain zero! This checks for Conv1_bias", "\n", "# print(\"index_dict1d[conv1]\", index_dict1d[\"conv1\"])", "\n", "# if len(index_dict1d[\"conv1\"]) != 0:", "\n", "#     first = index_dict1d[\"conv1\"][0]", "\n", "#     last = index_dict1d[\"conv1\"][-1]", "\n", "#     print(\"first\", \"last\", first, last)", "\n", "# for child in model_ft.children():", "\n", "#     for layer in child.children():", "\n", "#         for param in layer.parameters():", "\n", "#             if param.data.size() == (64,):", "\n", "#                 print(\"hello\")", "\n", "#                 for x in range(len(index_dict1d[\"conv1\"])):", "\n", "#                     print(\"param.data[x]\", index_dict1d[\"conv1\"][x], param.data[index_dict1d[\"conv1\"][x]])", "\n", "# ######################################################################################################", "\n", "hook_dict4d", "=", "dict", "(", "[", "(", "\"hook1\"", ",", "my_hook4d_conv1", ")", ",", "(", "\"hook2\"", ",", "my_hook4d_conv2", ")", ",", "(", "\"hook3\"", ",", "my_hook4d_conv3", ")", ",", "\n", "(", "\"hook4\"", ",", "my_hook4d_conv4", ")", ",", "(", "\"hook5\"", ",", "my_hook4d_conv5", ")", ",", "\n", "(", "\"hook6\"", ",", "my_hook4d_lin1", ")", ",", "(", "\"hook7\"", ",", "my_hook4d_lin2", ")", ",", "(", "\"hook8\"", ",", "my_hook4d_lin3", ")", "]", ")", "\n", "\n", "hook_dict1d", "=", "dict", "(", "[", "(", "\"hook1\"", ",", "my_hook1d_conv1", ")", ",", "(", "\"hook2\"", ",", "my_hook1d_conv2", ")", ",", "(", "\"hook3\"", ",", "my_hook1d_conv3", ")", ",", "\n", "(", "\"hook4\"", ",", "my_hook1d_conv4", ")", ",", "(", "\"hook5\"", ",", "my_hook1d_conv5", ")", ",", "\n", "(", "\"hook6\"", ",", "my_hook1d_lin1", ")", ",", "(", "\"hook7\"", ",", "my_hook1d_lin2", ")", ",", "(", "\"hook8\"", ",", "my_hook1d_lin3", ")", "]", ")", "\n", "# hook_dict = dict([(\"my_hook\", my_hook)])", "\n", "\n", "# ############################################################################ Apply hooks", "\n", "conv_counter", "=", "0", "\n", "lin_counter", "=", "0", "\n", "child_counter", "=", "0", "\n", "for", "child", "in", "model_ft", ".", "module", ".", "children", "(", ")", ":", "\n", "        ", "layer_counter", "=", "0", "\n", "for", "layer", "in", "child", ".", "children", "(", ")", ":", "# Going thru all layers of the network", "\n", "# print(layer)", "\n", "# torch.nn.utils.clip_grad_norm_(layer.parameters(), 1)", "\n", "            ", "if", "\"Conv2d\"", "in", "str", "(", "layer", ")", ":", "# check if it is a conv layer", "\n", "                ", "conv_counter", "+=", "1", "\n", "for", "param", "in", "layer", ".", "parameters", "(", ")", ":", "\n", "                    ", "if", "len", "(", "param", ".", "data", ".", "size", "(", ")", ")", "==", "4", ":", "\n", "                        ", "hook_name", "=", "\"hook\"", "+", "str", "(", "conv_counter", ")", "\n", "param", ".", "register_hook", "(", "hook_dict4d", "[", "hook_name", "]", ")", "# zeroes the gradients over all mini-batches", "\n", "", "else", ":", "\n", "                        ", "hook_name", "=", "\"hook\"", "+", "str", "(", "conv_counter", ")", "\n", "param", ".", "register_hook", "(", "hook_dict1d", "[", "hook_name", "]", ")", "\n", "", "", "", "elif", "\"Linear\"", "in", "str", "(", "layer", ")", ":", "# check if it is a linear layer", "\n", "                ", "lin_counter", "+=", "1", "\n", "for", "param", "in", "layer", ".", "parameters", "(", ")", ":", "\n", "                    ", "if", "len", "(", "param", ".", "data", ".", "size", "(", ")", ")", "==", "2", ":", "\n", "                        ", "hook_name", "=", "\"hook\"", "+", "str", "(", "5", "+", "lin_counter", ")", "\n", "param", ".", "register_hook", "(", "hook_dict4d", "[", "hook_name", "]", ")", "\n", "", "else", ":", "\n", "                        ", "hook_name", "=", "\"hook\"", "+", "str", "(", "5", "+", "lin_counter", ")", "\n", "param", ".", "register_hook", "(", "hook_dict1d", "[", "hook_name", "]", ")", "\n", "", "", "", "else", ":", "\n", "                ", "for", "param", "in", "layer", ".", "parameters", "(", ")", ":", "\n", "                    ", "param", ".", "requires_grad", "=", "True", "# freeze part of your model", "\n", "", "", "layer_counter", "+=", "1", "\n", "", "child_counter", "+=", "1", "\n", "# ############################################################################", "\n", "", "optimizer_ft", "=", "optim", ".", "SGD", "(", "model_ft", ".", "parameters", "(", ")", ",", "lr", "=", "0.001", ",", "momentum", "=", "0.9", ")", "\n", "# optimizer_ft = optim.Adam(model_ft.parameters(), lr=0.001)", "\n", "scheduler", "=", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "optimizer_ft", ",", "\n", "milestones", "=", "[", "10", "]", ",", "\n", "gamma", "=", "0.1", ")", "\n", "total_params", "=", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model_ft", ".", "parameters", "(", ")", ")", "\n", "trainable_params", "=", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model_ft", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", ")", "\n", "# print(\"Total Params - Trainable Params\", total_params, trainable_params)", "\n", "# ###################################################################### Count Zeros weights", "\n", "def", "countZeroWeights", "(", "model", ")", ":", "\n", "        ", "zeros", "=", "0", "\n", "for", "param", "in", "model", ".", "parameters", "(", ")", ":", "\n", "            ", "if", "param", "is", "not", "None", ":", "\n", "                ", "zeros", "+=", "param", ".", "numel", "(", ")", "-", "param", ".", "nonzero", "(", ")", ".", "size", "(", "0", ")", "\n", "", "", "return", "zeros", "\n", "", "number_Zeros", "=", "countZeroWeights", "(", "model_ft", ")", "\n", "print", "(", "\"Zero Params_Before training\"", ",", "number_Zeros", ")", "\n", "\n", "# path_load = glob.glob('./iterations/' + str(prune_iteration - 1) + '/pruned/model_pruned.pt')[0]", "\n", "# model = torch.load(path_load)", "\n", "# device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")", "\n", "# model_pruned = model.to(device)", "\n", "# def countZeroWeights2(model):", "\n", "#     zeros = 0", "\n", "#     for child in model.children():", "\n", "#         # print(child)", "\n", "#         for layer in child.children():", "\n", "#             # print(\"layer\", layer)", "\n", "#             for param in layer.parameters():", "\n", "#                 # print(\"hi\")", "\n", "#                 zeros += param.data.view(-1).size()[0] - len(torch.nonzero(param.data))", "\n", "#     return zeros", "\n", "# number_Zeros = countZeroWeights2(model_pruned)", "\n", "# print(\"Zero Params_Before training2\", number_Zeros)", "\n", "\n", "# ############################################################################ Train with hooks", "\n", "# best, best_model = train_model(prune_each_iteration, model_ft, dataloaders, dataset_sizes, criterion, optimizer_ft,", "\n", "#                                num_epochs=num_epochs)", "\n", "best", ",", "best_model", ",", "best_tpfpfn0", ",", "best_tpfpfn1", ",", "best_test_acc", ",", "best_test_auc", "=", "train_model", "(", "prune_each_iteration", ",", "model_ft", ",", "dataloaders", ",", "dataset_sizes", ",", "criterion", ",", "optimizer_ft", ",", "\n", "num_epochs", "=", "num_epochs", ",", "scheduler", "=", "scheduler", ")", "\n", "# ############################################################################", "\n", "total_params", "=", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "best_model", ".", "parameters", "(", ")", ")", "\n", "trainable_params", "=", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "best_model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", ")", "\n", "# print(\"Total Params - Trainable Params\", total_params, trainable_params)", "\n", "number_Zeros", "=", "countZeroWeights", "(", "best_model", ")", "\n", "print", "(", "\"Zero Params_After traning\"", ",", "number_Zeros", ")", "\n", "percent", "=", "1", "-", "float", "(", "number_Zeros", ")", "/", "number_params_org", "\n", "print", "(", "\"percent\"", ",", "percent", ")", "\n", "return", "percent", ",", "best", ",", "best_model", ",", "best_tpfpfn0", ",", "best_tpfpfn1", ",", "best_test_acc", ",", "best_test_auc", "\n", "\n"]], "home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.None.Decon_edit.prune_and_rewindRemaining_to_k": [[548, 681], ["torch.load", "torch.load", "torch.load", "torch.load", "torch.device", "torch.device", "torch.device", "torch.device", "torch.load.to", "torch.load", "torch.load", "torch.load", "torch.load", "torch.device", "torch.device", "torch.device", "torch.device", "torch.load.to", "print", "zip", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "glob.glob", "model.to.children", "model.to.children", "zip", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "str", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "child_end.children", "child_init.children", "torch.device", "torch.device", "torch.device", "torch.device", "str", "zip", "str", "str", "str", "str", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "layer_end.parameters", "layer_init.parameters", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "diff_param.to.to", "str", "zip", "str", "str", "str", "str", "param_end.data.size", "len", "int", "range", "int", "range", "layer_end.parameters", "layer_init.parameters", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "diff_param.to.to", "param_end.data.size", "abs", "abs", "str", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "numpy.unravel_index", "index_dict4d[].append", "abs", "abs", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "numpy.unravel_index", "index_dict1d[].append", "param_end.data.size", "abs", "abs", "len", "int", "range", "int", "range", "diff_param.to.view", "idx[].item", "param_end.data.size", "diff_param.to.view", "idx[].item", "param_end.data.size", "param_end.data.size", "str", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "numpy.unravel_index", "index_dict4d[].append", "abs", "abs", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "numpy.unravel_index", "index_dict1d[].append", "len", "len", "diff_param.to.view", "idx[].item", "param_end.data.size", "str", "diff_param.to.view", "idx[].item", "param_end.data.size", "len", "len", "param_end.data.view", "param_end.data.view", "param_end.data.view", "param_end.data.view"], "function", ["None"], ["", "def", "prune_and_rewindRemaining_to_k", "(", "prune_iteration", ",", "best", ",", "best_model", ",", "k", ")", ":", "\n", "    ", "best_path", "=", "'iterations/'", "+", "str", "(", "prune_iteration", ")", "+", "'/saved/model_'", "+", "str", "(", "best", ")", "+", "'_epoch.pt'", "\n", "# last_best = glob.glob('iterations/' + str(prune_iteration - 1) + '/saved/*.pt')[0]", "\n", "# init_path = last_best", "\n", "init_path", "=", "glob", ".", "glob", "(", "'./iterations/'", "+", "str", "(", "prune_iteration", "-", "1", ")", "+", "'/pruned_rewind/model_prunedrewind.pt'", ")", "[", "0", "]", "\n", "\n", "model", "=", "torch", ".", "load", "(", "best_path", ")", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "model_end", "=", "model", ".", "to", "(", "device", ")", "\n", "\n", "# model.load_state_dict(torch.load(init_path))", "\n", "model", "=", "torch", ".", "load", "(", "init_path", ")", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "model_init", "=", "model", ".", "to", "(", "device", ")", "\n", "\n", "print", "(", "\"This step will last around 10 minutes!\"", ")", "\n", "# print(\"model_init\", model_init)", "\n", "# print(\"model_end\", model_end)", "\n", "\n", "# print(model_init)", "\n", "conv_counter", "=", "0", "\n", "lin_counter", "=", "0", "\n", "for", "child_end", ",", "child_init", "in", "zip", "(", "model_end", ".", "children", "(", ")", ",", "model_init", ".", "children", "(", ")", ")", ":", "\n", "        ", "for", "layer_end", ",", "layer_init", "in", "zip", "(", "child_end", ".", "children", "(", ")", ",", "child_init", ".", "children", "(", ")", ")", ":", "# Going thru layers of the network", "\n", "# print(layer_init)", "\n", "            ", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "if", "\"Conv2d\"", "in", "str", "(", "layer_end", ")", ":", "# check if it is a conv layer", "\n", "# print(\"This is a Conv Layer\")", "\n", "                ", "conv_counter", "+=", "1", "\n", "for", "param_end", ",", "param_init", "in", "zip", "(", "layer_end", ".", "parameters", "(", ")", ",", "layer_init", ".", "parameters", "(", ")", ")", ":", "\n", "                    ", "diff_param", "=", "torch", ".", "zeros", "(", "param_end", ".", "data", ".", "size", "(", ")", ")", "\n", "diff_param", "=", "diff_param", ".", "to", "(", "device", ")", "\n", "# print(diff_param.shape)", "\n", "if", "len", "(", "param_end", ".", "data", ".", "size", "(", ")", ")", "==", "4", ":", "\n", "# Loop through all the entries", "\n", "                        ", "diff_param", "=", "abs", "(", "param_end", ".", "data", ")", "-", "abs", "(", "param_init", ".", "data", ")", "\n", "index_name", "=", "\"conv\"", "+", "str", "(", "conv_counter", ")", "\n", "for", "x", "in", "index_dict4d", "[", "index_name", "]", ":", "\n", "                            ", "diff_param", "[", "x", "]", "=", "10e5", "\n", "", "w_prune_this_iteration", "=", "int", "(", "(", "param_end", ".", "data", ".", "view", "(", "-", "1", ")", ".", "shape", "[", "0", "]", "-", "len", "(", "index_dict4d", "[", "index_name", "]", ")", ")", "*", "prune_each_iteration", ")", "\n", "idx", "=", "torch", ".", "topk", "(", "diff_param", ".", "view", "(", "-", "1", ")", ",", "w_prune_this_iteration", ",", "largest", "=", "False", ",", "sorted", "=", "True", ",", "out", "=", "None", ")", "[", "1", "]", "\n", "for", "id", "in", "range", "(", "w_prune_this_iteration", ")", ":", "\n", "                            ", "org_idx", "=", "np", ".", "unravel_index", "(", "idx", "[", "id", "]", ".", "item", "(", ")", ",", "param_end", ".", "data", ".", "size", "(", ")", ")", "\n", "param_end", ".", "data", "[", "org_idx", "]", "=", "0", "\n", "param_init", ".", "data", "[", "org_idx", "]", "=", "0", "\n", "index_dict4d", "[", "index_name", "]", ".", "append", "(", "org_idx", ")", "\n", "", "", "else", ":", "# len(param_end.data.size()) == 1:", "\n", "                        ", "diff_param", "=", "abs", "(", "param_end", ".", "data", ")", "-", "abs", "(", "param_init", ".", "data", ")", "\n", "for", "x", "in", "index_dict1d", "[", "index_name", "]", ":", "\n", "                            ", "diff_param", "[", "x", "]", "=", "10e5", "\n", "", "w_prune_this_iteration", "=", "int", "(", "(", "param_end", ".", "data", ".", "view", "(", "-", "1", ")", ".", "shape", "[", "0", "]", "-", "len", "(", "index_dict1d", "[", "index_name", "]", ")", ")", "*", "prune_each_iteration", ")", "\n", "idx", "=", "torch", ".", "topk", "(", "diff_param", ".", "view", "(", "-", "1", ")", ",", "w_prune_this_iteration", ",", "largest", "=", "False", ",", "sorted", "=", "True", ",", "out", "=", "None", ")", "[", "1", "]", "\n", "# diff_param.view(-1).scatter_(0, idx, 0)", "\n", "for", "id", "in", "range", "(", "w_prune_this_iteration", ")", ":", "\n", "                            ", "org_idx", "=", "np", ".", "unravel_index", "(", "idx", "[", "id", "]", ".", "item", "(", ")", ",", "param_end", ".", "data", ".", "size", "(", ")", ")", "\n", "# if index_name == \"conv1\":", "\n", "#     print(org_idx)", "\n", "param_end", ".", "data", "[", "org_idx", "]", "=", "0", "\n", "param_init", ".", "data", "[", "org_idx", "]", "=", "0", "\n", "# param_init.data[org_idx].copy_(torch.zeros_like(param_init[org_idx]))", "\n", "index_dict1d", "[", "index_name", "]", ".", "append", "(", "org_idx", ")", "\n", "# mask_dict1d[index_name][org_idx] = 0", "\n", "\n", "", "", "", "", "elif", "\"Linear\"", "in", "str", "(", "layer_end", ")", ":", "\n", "                ", "lin_counter", "+=", "1", "\n", "for", "param_end", ",", "param_init", "in", "zip", "(", "layer_end", ".", "parameters", "(", ")", ",", "layer_init", ".", "parameters", "(", ")", ")", ":", "\n", "                    ", "diff_param", "=", "torch", ".", "zeros", "(", "param_end", ".", "data", ".", "size", "(", ")", ")", "\n", "diff_param", "=", "diff_param", ".", "to", "(", "device", ")", "\n", "diff_param", "=", "abs", "(", "param_end", ".", "data", ")", "-", "abs", "(", "param_init", ".", "data", ")", "\n", "if", "len", "(", "param_end", ".", "data", ".", "size", "(", ")", ")", "==", "2", ":", "\n", "                        ", "index_name", "=", "\"lin\"", "+", "str", "(", "lin_counter", ")", "\n", "for", "x", "in", "index_dict4d", "[", "index_name", "]", ":", "\n", "                            ", "diff_param", "[", "x", "]", "=", "10e5", "\n", "", "w_prune_this_iteration", "=", "int", "(", "(", "param_end", ".", "data", ".", "view", "(", "-", "1", ")", ".", "shape", "[", "0", "]", "-", "len", "(", "index_dict4d", "[", "index_name", "]", ")", ")", "*", "prune_each_iteration", ")", "\n", "# Loop through all the entries", "\n", "idx", "=", "torch", ".", "topk", "(", "diff_param", ".", "view", "(", "-", "1", ")", ",", "w_prune_this_iteration", ",", "largest", "=", "False", ",", "sorted", "=", "True", ",", "out", "=", "None", ")", "[", "1", "]", "\n", "# diff_param.view(-1).scatter_(0, idx, 0)", "\n", "for", "id", "in", "range", "(", "w_prune_this_iteration", ")", ":", "\n", "                            ", "org_idx", "=", "np", ".", "unravel_index", "(", "idx", "[", "id", "]", ".", "item", "(", ")", ",", "param_end", ".", "data", ".", "size", "(", ")", ")", "\n", "param_end", ".", "data", "[", "org_idx", "]", "=", "0", "\n", "param_init", ".", "data", "[", "org_idx", "]", "=", "0", "\n", "index_name", "=", "\"lin\"", "+", "str", "(", "lin_counter", ")", "\n", "# print(org_idx)", "\n", "index_dict4d", "[", "index_name", "]", ".", "append", "(", "org_idx", ")", "\n", "# mask_dict4d[index_name][org_idx] = 0", "\n", "", "", "else", ":", "# len(param_end.data.size()) == 1:", "\n", "                        ", "diff_param", "=", "abs", "(", "param_end", ".", "data", ")", "-", "abs", "(", "param_init", ".", "data", ")", "\n", "for", "x", "in", "index_dict1d", "[", "index_name", "]", ":", "\n", "                            ", "diff_param", "[", "x", "]", "=", "10e5", "\n", "", "w_prune_this_iteration", "=", "int", "(", "(", "param_end", ".", "data", ".", "view", "(", "-", "1", ")", ".", "shape", "[", "0", "]", "-", "len", "(", "index_dict1d", "[", "index_name", "]", ")", ")", "*", "prune_each_iteration", ")", "\n", "idx", "=", "torch", ".", "topk", "(", "diff_param", ".", "view", "(", "-", "1", ")", ",", "w_prune_this_iteration", ",", "largest", "=", "False", ",", "sorted", "=", "True", ",", "out", "=", "None", ")", "[", "1", "]", "\n", "# diff_param.view(-1).scatter_(0, idx, 0)", "\n", "for", "id", "in", "range", "(", "w_prune_this_iteration", ")", ":", "\n", "                            ", "org_idx", "=", "np", ".", "unravel_index", "(", "idx", "[", "id", "]", ".", "item", "(", ")", ",", "param_end", ".", "data", ".", "size", "(", ")", ")", "\n", "param_end", ".", "data", "[", "org_idx", "]", "=", "0", "\n", "param_init", ".", "data", "[", "org_idx", "]", "=", "0", "\n", "index_dict1d", "[", "index_name", "]", ".", "append", "(", "org_idx", ")", "\n", "# mask_dict1d[index_name][org_idx] = 0", "\n", "\n", "\n", "\n", "# # ### Force to zero", "\n", "# layers = [\"conv1\", \"conv2\", \"conv3\", \"conv4\", \"conv5\", \"lin1\", \"lin2\", \"lin3\"]", "\n", "# conv_counter = 0", "\n", "# for child in model_ft.children():", "\n", "#     # print(child)", "\n", "#     for layer in child.children():", "\n", "#         # print(layer)", "\n", "#         if \"Conv2d\" in str(layer):  # check if it is a conv layer", "\n", "#             conv_counter += 1", "\n", "#             index_name = \"conv\" + str(conv_counter)", "\n", "#             for param in layer.parameters():", "\n", "#                 # print(\"size\", param.data.size())", "\n", "#                 if len(param.data.size()) == 4:", "\n", "#                     # print(\"len(index_dict4d[index_name])\",len(index_dict4d[index_name]))", "\n", "#                     for x in range(len(index_dict4d[index_name])):", "\n", "#                         param.data[index_dict4d[index_name][x]] = 0", "\n", "#                 else:", "\n", "#                     # print(\"len(index_dict1d[index_name])\", len(index_dict1d[index_name]))", "\n", "#                     for x in range(len(index_dict1d[index_name])):", "\n", "#                         param.data[index_dict1d[index_name][x]] = 0", "\n", "", "", "", "", "", "", "if", "not", "os", ".", "path", ".", "exists", "(", "'./iterations/'", "+", "str", "(", "prune_iteration", ")", "+", "'/pruned/'", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "'./iterations/'", "+", "str", "(", "prune_iteration", ")", "+", "'/pruned/'", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "'./iterations/'", "+", "str", "(", "prune_iteration", ")", "+", "'/pruned_rewind/'", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "'./iterations/'", "+", "str", "(", "prune_iteration", ")", "+", "'/pruned_rewind/'", ")", "\n", "", "torch", ".", "save", "(", "model_end", ",", "'./iterations/'", "+", "str", "(", "prune_iteration", ")", "+", "'/pruned/model_pruned.pt'", ")", "\n", "torch", ".", "save", "(", "model_init", ",", "'./iterations/'", "+", "str", "(", "prune_iteration", ")", "+", "'/pruned_rewind/model_prunedrewind.pt'", ")", "\n", "\n", "return", "index_dict4d", ",", "index_dict1d", "\n", "\n"]], "home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.models.CNN_3.CNN_3.__init__": [[15, 58], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.MobileNet.dataset.Dataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "2", ")", ":", "\n", "        ", "super", "(", "CNN_3", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "\n", "# nn.Conv2d(3, 64, kernel_size=11, stride=4, padding=2),", "\n", "# nn.ReLU(inplace=True),", "\n", "# nn.MaxPool2d(kernel_size=3, stride=2),", "\n", "nn", ".", "Conv2d", "(", "3", ",", "16", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "16", ",", "16", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "16", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ",", "# out : [batch_size, n_features_conv, height, width]", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", ",", "\n", ")", "\n", "#     self.classifier = nn.Sequential(", "\n", "#         nn.Linear(32*5*5, 32),", "\n", "#         nn.ReLU(inplace=True),", "\n", "#         nn.Dropout(),", "\n", "#         nn.Linear(32, 2),", "\n", "#         # nn.ReLU(inplace=True),", "\n", "#         # nn.Dropout(),", "\n", "#     )", "\n", "#", "\n", "# def forward(self, x):", "\n", "#     x = self.features(x)", "\n", "#     print(x.size())", "\n", "#     # x = x.view(x.size()[0], -1)", "\n", "#     x = x.view(-1, 32*5*5)", "\n", "#     # print(x.size())", "\n", "#     x = self.classifier(x)", "\n", "#     return x", "\n", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "5", ",", "5", ")", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Dropout", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "32", "*", "5", "*", "5", ",", "32", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "32", ",", "2", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.models.CNN_3.CNN_3.forward": [[60, 66], ["CNN_3.CNN_3.features", "CNN_3.CNN_3.avgpool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "CNN_3.CNN_3.classifier"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "1", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.models.CNN_3.alexnet": [[68, 80], ["AlexNet", "torch.Linear", "torch.Linear", "AlexNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "", "def", "alexnet", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"AlexNet model architecture from the\n    `\"One weird trick...\" <https://arxiv.org/abs/1404.5997>`_ paper.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "AlexNet", "(", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'alexnet'", "]", ")", ")", "\n", "", "model", ".", "classifier", "[", "1", "]", "=", "nn", ".", "Linear", "(", "256", "*", "1", "*", "1", ",", "4096", ")", "\n", "model", ".", "classifier", "[", "6", "]", "=", "nn", ".", "Linear", "(", "4096", ",", "2", ")", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.models.train_model.binary_crossentropy_with_ranking": [[11, 59], ["y_pred.clamp", "y_pred_clipped.cpu().detach.cpu().detach", "y_true_1.type.type", "torch.max", "y_pred_score.cpu", "y_true.cpu", "rankloss.clamp", "torch.sum", "y_pred_clipped.cpu().detach.cpu", "rankloss.cpu", "torch.sum"], "function", ["None"], ["def", "binary_crossentropy_with_ranking", "(", "outputs", ",", "labels_onehot", ")", ":", "\n", "    ", "\"\"\" Trying to combine ranking loss with numeric precision\"\"\"", "\n", "# first get the log loss like normal", "\n", "y_pred", "=", "outputs", "\n", "y_true", "=", "labels_onehot", "\n", "# logloss = K.mean(K.binary_crossentropy(y_pred, y_true), axis=-1)", "\n", "\n", "# next, build a rank loss", "\n", "\n", "# #########################################################################clip the probabilities to keep stability", "\n", "# y_pred_clipped = K.clip(y_pred, K.epsilon(), 1 - K.epsilon())", "\n", "epsilon", "=", "10e-8", "\n", "y_pred_clipped", "=", "y_pred", ".", "clamp", "(", "epsilon", ",", "1", "-", "epsilon", ")", "\n", "y_pred_clipped", "=", "y_pred_clipped", ".", "cpu", "(", ")", ".", "detach", "(", ")", "\n", "# print(\"y_pred_clipped\", y_pred_clipped)", "\n", "# ###################################################################translate into the raw scores before the logit", "\n", "# y_pred_score = K.log(y_pred_clipped / (1 - y_pred_clipped))", "\n", "# y_pred_score = torch.log(y_pred_clipped / (1 - y_pred_clipped))", "\n", "y_pred_score", "=", "y_pred_clipped", "\n", "# print(\"y_pred_score\", y_pred_score)", "\n", "\n", "# ###########################################################determine what the maximum score for a zero outcome is", "\n", "# print(\"y_true\", y_true)", "\n", "# print(\"y_true < 1\", y_true < 1)", "\n", "y_true_1", "=", "(", "y_true", "<", "1", ")", "\n", "y_true_1", "=", "y_true_1", ".", "type", "(", "torch", ".", "FloatTensor", ")", "\n", "mul", "=", "y_pred_score", "*", "y_true_1", "\n", "# print(\"mul\", mul)", "\n", "# y_pred_score_zerooutcome_max = K.max(mul)", "\n", "y_pred_score_zerooutcome_max", "=", "torch", ".", "max", "(", "mul", ")", "\n", "# print(\"y_pred_score_zerooutcome_max\", y_pred_score_zerooutcome_max)", "\n", "\n", "# ###############################################################determine how much each score is above or below it", "\n", "rankloss", "=", "y_pred_score", ".", "cpu", "(", ")", "-", "y_pred_score_zerooutcome_max", "\n", "\n", "# ###########################################################################only keep losses for positive outcomes", "\n", "rankloss", "=", "rankloss", "*", "y_true", ".", "cpu", "(", ")", "\n", "\n", "# ################################################################only keep losses where the score is below the max", "\n", "# rankloss = K.square(K.clip(rankloss, -100, 0))", "\n", "rankloss", "=", "rankloss", ".", "clamp", "(", "-", "100", ",", "0", ")", "**", "2", "\n", "\n", "# ##################################################################average the loss for just the positive outcomes", "\n", "# rankloss = K.sum(rankloss, axis=-1) / (K.sum(y_true > 0) + 1)", "\n", "rankloss", "=", "torch", ".", "sum", "(", "rankloss", ".", "cpu", "(", ")", ")", "/", "(", "torch", ".", "sum", "(", "y_true", ">", "0", ")", "+", "1", ")", "\n", "\n", "# return (rankloss + 1) * logloss - an alternative to try", "\n", "return", "rankloss", "\n", "\n"]], "home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.models.train_model.train_model": [[61, 240], ["torch.device", "meters.AverageMeter", "meters.AverageMeter", "range", "print", "os.path.isfile", "os.path.exists", "os.makedirs", "print", "print", "print", "print", "torch.save", "print", "torch.zeros", "glob.glob", "torch.cuda.is_available", "enumerate", "sklearn.metrics.roc_auc_score", "copy.deepcopy", "model.eval", "enumerate", "sklearn.metrics.roc_auc_score", "test_acc_all.append", "test_auc_all.append", "torch.no_grad", "enumerate", "TPFPFN0_all.append", "TPFPFN1_all.append", "print", "print", "str", "model.train", "model.eval", "inputs.to.to", "labels.to.to", "optimizer.zero_grad", "model", "torch.max", "torch.nn.functional.one_hot", "labels_onehot.type.type", "criterion", "train_model.binary_crossentropy_with_ranking", "loss.backward", "optimizer.step", "meters.AverageMeter.update", "meters.AverageMeter.update", "list", "list", "val_acc_all.append", "val_auc_all.append", "inputs.to.to", "labels.to.to", "optimizer.zero_grad", "meters.AverageMeter.update", "list", "list", "torch.zeros", "inputs.to.to", "classes.to", "model", "torch.max", "zip", "os.remove", "str", "str", "model.cpu", "loss.item", "inputs.to.size", "float", "[].cpu().data.numpy", "labels.to.cpu().data.numpy", "str", "torch.set_grad_enabled", "model", "torch.max", "float", "[].cpu().data.numpy", "labels.to.cpu().data.numpy", "classes.to.view", "preds.view", "sum", "sum", "sum", "sum", "str", "str", "torch.sum", "torch.sum", "str", "[].cpu", "labels.to.cpu", "[].cpu", "labels.to.cpu", "torch.nn.functional.softmax", "torch.nn.functional.softmax"], "function", ["home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.models.train_model.binary_crossentropy_with_ranking", "home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.auglib.meters.AverageMeter.update", "home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.auglib.meters.AverageMeter.update", "home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.auglib.meters.AverageMeter.update"], ["", "def", "train_model", "(", "output_path", ",", "model", ",", "dataloaders", ",", "dataset_sizes", ",", "criterion", ",", "optimizer", ",", "num_epochs", "=", "5", ",", "scheduler", "=", "None", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "'iterations/'", "+", "str", "(", "output_path", ")", "+", "'/saved'", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "'iterations/'", "+", "str", "(", "output_path", ")", "+", "'/saved'", ")", "\n", "", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "accuracies", "=", "AverageMeter", "(", ")", "\n", "all_preds", "=", "[", "]", "\n", "all_labels", "=", "[", "]", "\n", "val_auc_all", "=", "[", "]", "\n", "val_acc_all", "=", "[", "]", "\n", "test_auc_all", "=", "[", "]", "\n", "test_acc_all", "=", "[", "]", "\n", "TPFPFN0_all", "=", "[", "]", "\n", "TPFPFN1_all", "=", "[", "]", "\n", "best_val_auc", "=", "0.0", "\n", "best_epoch", "=", "0", "\n", "for", "epoch", "in", "range", "(", "1", ",", "num_epochs", "+", "1", ")", ":", "\n", "        ", "print", "(", "'-'", "*", "50", ")", "\n", "print", "(", "'Epoch {}/{}'", ".", "format", "(", "epoch", ",", "num_epochs", ")", ")", "\n", "for", "phase", "in", "[", "'train'", ",", "'val'", "]", ":", "\n", "            ", "if", "phase", "==", "'train'", ":", "\n", "                ", "model", ".", "train", "(", ")", "# Set model to training mode", "\n", "", "else", ":", "\n", "                ", "model", ".", "eval", "(", ")", "# Set model to evaluate mode", "\n", "\n", "# tqdm_loader = tqdm(dataloaders[phase])", "\n", "# for data in tqdm_loader:", "\n", "#     inputs, labels = data", "\n", "", "for", "i", ",", "(", "inputs", ",", "labels", ")", "in", "enumerate", "(", "dataloaders", "[", "phase", "]", ")", ":", "\n", "\n", "                ", "inputs", "=", "inputs", ".", "to", "(", "device", ")", "\n", "labels", "=", "labels", ".", "to", "(", "device", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "# with torch.set_grad_enabled(True):", "\n", "outputs", "=", "model", "(", "inputs", ")", "\n", "_", ",", "preds", "=", "torch", ".", "max", "(", "outputs", ".", "data", ",", "1", ")", "\n", "labels_onehot", "=", "torch", ".", "nn", ".", "functional", ".", "one_hot", "(", "labels", ",", "num_classes", "=", "2", ")", "\n", "labels_onehot", "=", "labels_onehot", ".", "type", "(", "torch", ".", "FloatTensor", ")", "\n", "\n", "# BCEloss = torch.nn.functional.binary_cross_entropy_with_logits(outputs.cpu(), labels_onehot, torch.FloatTensor([1.0, 1.0]))", "\n", "BCEloss", "=", "criterion", "(", "outputs", ".", "cpu", "(", ")", ",", "labels_onehot", ")", "\n", "# print(\"BCEloss\", BCEloss)", "\n", "BCEloss_rank", "=", "binary_crossentropy_with_ranking", "(", "outputs", ",", "labels_onehot", ")", "\n", "# print(\"BCEloss_rank\", BCEloss_rank)", "\n", "# BCEloss_rank.requires_grad = True", "\n", "loss", "=", "BCEloss", "+", "0", "*", "BCEloss_rank", "\n", "# print(\"BCEloss, BCEloss_rank\", BCEloss, BCEloss_rank)", "\n", "# loss = (BCEloss_rank + 1) * BCEloss", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "acc", "=", "float", "(", "torch", ".", "sum", "(", "preds", "==", "labels", ".", "data", ")", ")", "/", "preds", ".", "shape", "[", "0", "]", "\n", "accuracies", ".", "update", "(", "acc", ")", "\n", "all_preds", "+=", "list", "(", "torch", ".", "nn", ".", "functional", ".", "softmax", "(", "outputs", ",", "dim", "=", "1", ")", "[", ":", ",", "1", "]", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ")", "\n", "all_labels", "+=", "list", "(", "labels", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ")", "\n", "# tqdm_loader.set_postfix(loss=losses.avg, acc=accuracies.avg)", "\n", "\n", "", "auc", "=", "roc_auc_score", "(", "all_labels", ",", "all_preds", ")", "\n", "\n", "if", "phase", "==", "'train'", ":", "\n", "                ", "auc_t", "=", "auc", "\n", "loss_t", "=", "losses", ".", "avg", "\n", "acc_t", "=", "accuracies", ".", "avg", "\n", "", "if", "phase", "==", "'val'", ":", "\n", "                ", "auc_v", "=", "auc", "\n", "loss_v", "=", "losses", ".", "avg", "\n", "acc_v", "=", "accuracies", ".", "avg", "\n", "val_acc_all", ".", "append", "(", "acc_v", ")", "\n", "val_auc_all", ".", "append", "(", "auc_v", ")", "\n", "\n", "", "", "print", "(", "'Train AUC: {:.8f} Loss: {:.8f} ACC: {:.8f} '", ".", "format", "(", "auc_t", ",", "loss_t", ",", "acc_t", ")", ")", "\n", "print", "(", "'Val AUC: {:.8f} Loss: {:.8f} ACC: {:.8f} '", ".", "format", "(", "auc_v", ",", "loss_v", ",", "acc_v", ")", ")", "\n", "if", "auc_v", ">", "best_val_auc", ":", "\n", "            ", "best_val_auc", "=", "auc_v", "\n", "best_epoch", "=", "epoch", "\n", "# print(auc_v, best_val_auc)", "\n", "# print(best_epoch)", "\n", "best_model", "=", "copy", ".", "deepcopy", "(", "model", ")", "\n", "\n", "", "torch", ".", "save", "(", "model", ".", "module", ",", "'./iterations/'", "+", "str", "(", "output_path", ")", "+", "'/saved/model_{}_epoch.pt'", ".", "format", "(", "epoch", ")", ")", "\n", "# ############################################################################################################# Test", "\n", "for", "phase", "in", "[", "'test'", "]", ":", "\n", "            ", "model", ".", "eval", "(", ")", "# Set model to evaluate mode", "\n", "\n", "for", "i", ",", "(", "inputs", ",", "labels", ")", "in", "enumerate", "(", "dataloaders", "[", "phase", "]", ")", ":", "\n", "\n", "                ", "inputs", "=", "inputs", ".", "to", "(", "device", ")", "\n", "labels", "=", "labels", ".", "to", "(", "device", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "with", "torch", ".", "set_grad_enabled", "(", "False", ")", ":", "\n", "                    ", "outputs", "=", "model", "(", "inputs", ")", "\n", "_", ",", "preds", "=", "torch", ".", "max", "(", "outputs", ".", "data", ",", "1", ")", "\n", "\n", "", "acc", "=", "float", "(", "torch", ".", "sum", "(", "preds", "==", "labels", ".", "data", ")", ")", "/", "preds", ".", "shape", "[", "0", "]", "\n", "accuracies", ".", "update", "(", "acc", ")", "\n", "all_preds", "+=", "list", "(", "torch", ".", "nn", ".", "functional", ".", "softmax", "(", "outputs", ",", "dim", "=", "1", ")", "[", ":", ",", "1", "]", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ")", "\n", "all_labels", "+=", "list", "(", "labels", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ")", "\n", "# tqdm_loader.set_postfix(loss=losses.avg, acc=accuracies.avg)", "\n", "\n", "", "auc", "=", "roc_auc_score", "(", "all_labels", ",", "all_preds", ")", "\n", "\n", "auc_test", "=", "auc", "\n", "loss_test", "=", "losses", ".", "avg", "\n", "acc_test", "=", "accuracies", ".", "avg", "\n", "test_acc_all", ".", "append", "(", "acc_test", ")", "\n", "test_auc_all", ".", "append", "(", "auc_test", ")", "\n", "\n", "", "print", "(", "'Test AUC: {:.8f} Loss: {:.8f} ACC: {:.8f} '", ".", "format", "(", "auc_test", ",", "loss_test", ",", "acc_test", ")", ")", "\n", "\n", "nb_classes", "=", "2", "\n", "confusion_matrix", "=", "torch", ".", "zeros", "(", "nb_classes", ",", "nb_classes", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "TrueP0", "=", "0", "\n", "FalseP0", "=", "0", "\n", "FalseN0", "=", "0", "\n", "TrueP1", "=", "0", "\n", "FalseP1", "=", "0", "\n", "FalseN1", "=", "0", "\n", "for", "i", ",", "(", "inputs", ",", "classes", ")", "in", "enumerate", "(", "dataloaders", "[", "phase", "]", ")", ":", "\n", "                ", "confusion_matrix", "=", "torch", ".", "zeros", "(", "nb_classes", ",", "nb_classes", ")", "\n", "input", "=", "inputs", ".", "to", "(", "device", ")", "\n", "target", "=", "classes", ".", "to", "(", "device", ")", "\n", "outputs", "=", "model", "(", "input", ")", "\n", "_", ",", "preds", "=", "torch", ".", "max", "(", "outputs", ",", "1", ")", "\n", "for", "t", ",", "p", "in", "zip", "(", "target", ".", "view", "(", "-", "1", ")", ",", "preds", ".", "view", "(", "-", "1", ")", ")", ":", "\n", "                    ", "confusion_matrix", "[", "t", ",", "p", "]", "+=", "1", "\n", "", "this_class", "=", "0", "\n", "col", "=", "confusion_matrix", "[", ":", ",", "this_class", "]", "\n", "row", "=", "confusion_matrix", "[", "this_class", ",", ":", "]", "\n", "TP", "=", "row", "[", "this_class", "]", "\n", "FN", "=", "sum", "(", "row", ")", "-", "TP", "\n", "FP", "=", "sum", "(", "col", ")", "-", "TP", "\n", "# print(\"TP, FP, FN: \", TP, FP, FN)", "\n", "TrueP0", "=", "TrueP0", "+", "TP", "\n", "FalseP0", "=", "FalseP0", "+", "FP", "\n", "FalseN0", "=", "FalseN0", "+", "FN", "\n", "\n", "this_class", "=", "1", "\n", "col", "=", "confusion_matrix", "[", ":", ",", "this_class", "]", "\n", "row", "=", "confusion_matrix", "[", "this_class", ",", ":", "]", "\n", "TP", "=", "row", "[", "this_class", "]", "\n", "FN", "=", "sum", "(", "row", ")", "-", "TP", "\n", "FP", "=", "sum", "(", "col", ")", "-", "TP", "\n", "# print(\"TP, FP, FN: \", TP, FP, FN)", "\n", "TrueP1", "=", "TrueP1", "+", "TP", "\n", "FalseP1", "=", "FalseP1", "+", "FP", "\n", "FalseN1", "=", "FalseN1", "+", "FN", "\n", "", "TPFPFN0", "=", "[", "TrueP0", ",", "FalseP0", ",", "FalseN0", "]", "\n", "TPFPFN1", "=", "[", "TrueP1", ",", "FalseP1", ",", "FalseN1", "]", "\n", "TPFPFN0_all", ".", "append", "(", "TPFPFN0", ")", "\n", "TPFPFN1_all", ".", "append", "(", "TPFPFN1", ")", "\n", "print", "(", "\"overall_TP, FP, FN for 0: \"", ",", "TrueP0", ",", "FalseP0", ",", "FalseN0", ")", "\n", "print", "(", "\"overall_TP, FP, FN for 1: \"", ",", "TrueP1", ",", "FalseP1", ",", "FalseN1", ")", "\n", "\n", "\n", "", "", "print", "(", "\"best_ValidationEpoch:\"", ",", "best_epoch", ")", "\n", "# print(TPFPFN0_all, val_auc_all, test_auc_all)", "\n", "TPFPFN0_best", "=", "TPFPFN0_all", "[", "best_epoch", "-", "1", "]", "[", "0", "]", "\n", "TPFPFN1_best", "=", "TPFPFN1_all", "[", "best_epoch", "-", "1", "]", "[", "0", "]", "\n", "val_auc_best", "=", "val_auc_all", "[", "best_epoch", "-", "1", "]", "\n", "val_acc_best", "=", "val_acc_all", "[", "best_epoch", "-", "1", "]", "\n", "test_auc_best", "=", "test_auc_all", "[", "best_epoch", "-", "1", "]", "\n", "test_acc_best", "=", "test_acc_all", "[", "best_epoch", "-", "1", "]", "\n", "\n", "# #################### save only the best, delete others", "\n", "file_path", "=", "'./iterations/'", "+", "str", "(", "output_path", ")", "+", "'/saved/model_'", "+", "str", "(", "best_epoch", ")", "+", "'_epoch.pt'", "\n", "if", "os", ".", "path", ".", "isfile", "(", "file_path", ")", ":", "\n", "        ", "for", "CleanUp", "in", "glob", ".", "glob", "(", "'./iterations/'", "+", "str", "(", "output_path", ")", "+", "'/saved/*.pt'", ")", ":", "\n", "            ", "if", "'model_'", "+", "str", "(", "best_epoch", ")", "+", "'_epoch.pt'", "not", "in", "CleanUp", ":", "\n", "                ", "os", ".", "remove", "(", "CleanUp", ")", "\n", "# # ######################################################", "\n", "\n", "", "", "", "return", "best_epoch", ",", "best_model", ",", "TPFPFN0_all", "[", "best_epoch", "-", "1", "]", ",", "TPFPFN1_all", "[", "best_epoch", "-", "1", "]", ",", "test_acc_best", ",", "test_auc_best", "\n", "\n"]], "home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.models.AlexNet3.AlexNet.__init__": [[15, 41], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.MobileNet.dataset.Dataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "super", "(", "AlexNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "11", ",", "stride", "=", "4", ",", "padding", "=", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "192", ",", "kernel_size", "=", "5", ",", "padding", "=", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "192", ",", "384", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "384", ",", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", ",", "\n", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "6", ",", "6", ")", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Dropout", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "256", "*", "6", "*", "6", ",", "4096", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "4096", ",", "4096", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "4096", ",", "num_classes", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.models.AlexNet3.AlexNet.forward": [[43, 50], ["AlexNet3.AlexNet.features", "AlexNet3.AlexNet.avgpool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "AlexNet3.AlexNet.classifier"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "1", ")", "\n", "# print(x.size())", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "return", "x", "\n", "", "", "def", "alexnet", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.models.AlexNet3.alexnet": [[50, 64], ["AlexNet3.AlexNet", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "AlexNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "", "def", "alexnet", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"AlexNet model architecture from the\n    `\"One weird trick...\" <https://arxiv.org/abs/1404.5997>`_ paper.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "AlexNet", "(", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'alexnet'", "]", ")", ")", "\n", "", "model", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "model", ".", "classifier", "[", "1", "]", "=", "nn", ".", "Linear", "(", "256", "*", "1", "*", "1", ",", "8", ")", "\n", "model", ".", "classifier", "[", "4", "]", "=", "nn", ".", "Linear", "(", "8", ",", "8", ")", "\n", "model", ".", "classifier", "[", "6", "]", "=", "nn", ".", "Linear", "(", "8", ",", "2", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.models.AlexNet2.AlexNet.__init__": [[15, 41], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.MobileNet.dataset.Dataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "super", "(", "AlexNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "11", ",", "stride", "=", "4", ",", "padding", "=", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "192", ",", "kernel_size", "=", "5", ",", "padding", "=", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "192", ",", "384", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "384", ",", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", ",", "\n", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "6", ",", "6", ")", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Dropout", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "256", "*", "6", "*", "6", ",", "4096", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "4096", ",", "4096", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "4096", ",", "num_classes", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.models.AlexNet2.AlexNet.forward": [[43, 49], ["AlexNet2.AlexNet.features", "AlexNet2.AlexNet.avgpool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "AlexNet2.AlexNet.classifier"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "1", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "return", "x", "\n", "", "", "def", "alexnet", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.models.AlexNet2.alexnet": [[49, 62], ["AlexNet2.AlexNet", "torch.Linear", "torch.Linear", "torch.Linear", "AlexNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "", "def", "alexnet", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"AlexNet model architecture from the\n    `\"One weird trick...\" <https://arxiv.org/abs/1404.5997>`_ paper.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "AlexNet", "(", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'alexnet'", "]", ")", ")", "\n", "", "model", ".", "classifier", "[", "1", "]", "=", "nn", ".", "Linear", "(", "256", "*", "6", "*", "6", ",", "128", ")", "\n", "model", ".", "classifier", "[", "4", "]", "=", "nn", ".", "Linear", "(", "128", ",", "128", ")", "\n", "model", ".", "classifier", "[", "6", "]", "=", "nn", ".", "Linear", "(", "128", ",", "2", ")", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.models.meters.AverageMeter.__init__": [[3, 5], ["meters.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.auglib.meters.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.models.meters.AverageMeter.reset": [[6, 11], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.models.meters.AverageMeter.update": [[12, 17], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.models.AlexNet.AlexNet.__init__": [[15, 41], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.MobileNet.dataset.Dataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "super", "(", "AlexNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "11", ",", "stride", "=", "4", ",", "padding", "=", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "192", ",", "kernel_size", "=", "5", ",", "padding", "=", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "192", ",", "384", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "384", ",", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", ",", "\n", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "6", ",", "6", ")", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Dropout", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "256", "*", "6", "*", "6", ",", "4096", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "4096", ",", "4096", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "4096", ",", "num_classes", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.models.AlexNet.AlexNet.forward": [[43, 49], ["AlexNet.AlexNet.features", "AlexNet.AlexNet.avgpool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "AlexNet.AlexNet.classifier"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "1", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "return", "x", "\n", "", "", "def", "alexnet", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.models.AlexNet.alexnet": [[49, 61], ["AlexNet.AlexNet", "torch.Linear", "torch.Linear", "AlexNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "", "def", "alexnet", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"AlexNet model architecture from the\n    `\"One weird trick...\" <https://arxiv.org/abs/1404.5997>`_ paper.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "AlexNet", "(", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'alexnet'", "]", ")", ")", "\n", "", "model", ".", "classifier", "[", "1", "]", "=", "nn", ".", "Linear", "(", "256", "*", "6", "*", "6", ",", "4096", ")", "\n", "model", ".", "classifier", "[", "6", "]", "=", "nn", ".", "Linear", "(", "4096", ",", "2", ")", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.models.alexnet_layer_input.AlexNet.__init__": [[16, 58], ["torch.Module.__init__", "dict", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.MobileNet.dataset.Dataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "super", "(", "AlexNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "layer_input", "=", "dict", "(", ")", "\n", "self", ".", "layer_kernel", "=", "{", "\n", "'features.0'", ":", "11", ",", "\n", "'features.3'", ":", "5", ",", "\n", "'features.6'", ":", "3", ",", "\n", "'features.8'", ":", "3", ",", "\n", "'features.10'", ":", "3", "\n", "}", "\n", "self", ".", "layer_stride", "=", "{", "\n", "'features.0'", ":", "4", ",", "\n", "'features.3'", ":", "1", ",", "\n", "'features.6'", ":", "1", ",", "\n", "'features.8'", ":", "1", ",", "\n", "'features.10'", ":", "1", "\n", "}", "\n", "\n", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "11", ",", "stride", "=", "4", ",", "padding", "=", "2", ")", ",", "# 0", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "192", ",", "kernel_size", "=", "5", ",", "padding", "=", "2", ")", ",", "# 3", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "192", ",", "384", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "# 6", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "384", ",", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "# 8", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "# 10", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", ",", "\n", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Dropout", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "256", "*", "6", "*", "6", ",", "4096", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "4096", ",", "4096", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "4096", ",", "num_classes", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.models.alexnet_layer_input.AlexNet.forward": [[60, 77], ["enumerate", "layers.view", "enumerate", "isinstance", "layers", "layers.size", "isinstance", "layers"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "for", "layer_idx", ",", "layers", "in", "enumerate", "(", "self", ".", "features", ")", ":", "\n", "# if type(layers) == torch.nn.modules.conv.Conv2d:", "\n", "            ", "if", "isinstance", "(", "layers", ",", "torch", ".", "nn", ".", "modules", ".", "conv", ".", "Conv2d", ")", ":", "\n", "                ", "self", ".", "layer_input", "[", "'features.%d'", "%", "layer_idx", "]", "=", "x", ".", "data", "\n", "", "x", "=", "layers", "(", "x", ")", "\n", "# x = self.features(x)", "\n", "# x = x.view(x.size(0), 256 * 6 * 6)", "\n", "", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "256", "*", "1", "*", "1", ")", "\n", "# self.layer_input['classifier.0'] = x.data", "\n", "for", "layer_idx", ",", "layers", "in", "enumerate", "(", "self", ".", "classifier", ")", ":", "\n", "# if type(layers) == torch.nn.modules.conv.Conv2d:", "\n", "            ", "if", "isinstance", "(", "layers", ",", "torch", ".", "nn", ".", "modules", ".", "linear", ".", "Linear", ")", ":", "\n", "                ", "self", ".", "layer_input", "[", "'classifier.%d'", "%", "layer_idx", "]", "=", "x", ".", "data", "\n", "", "x", "=", "layers", "(", "x", ")", "\n", "# x = self.classifier(x)", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.models.alexnet_layer_input.alexnet": [[79, 90], ["alexnet_layer_input.AlexNet", "AlexNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "", "def", "alexnet", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"AlexNet model architecture from the\n    `\"One weird trick...\" <https://arxiv.org/abs/1404.5997>`_ paper.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "AlexNet", "(", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'alexnet'", "]", ")", ")", "\n", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.auglib.test.AugmentOnTest.__init__": [[16, 19], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "n", ")", ":", "\n", "        ", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "n", "=", "n", "\n", "\n"]], "home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.auglib.test.AugmentOnTest.__len__": [[20, 22], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n", "*", "len", "(", "self", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.auglib.test.AugmentOnTest.__getitem__": [[23, 25], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "        ", "return", "self", ".", "dataset", "[", "i", "//", "self", ".", "n", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.auglib.test.test_with_augmentation": [[27, 84], ["model.eval", "torch.CrossEntropyLoss", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "meters.AverageMeter", "pandas.DataFrame", "enumerate", "predictions[].values.astype", "predictions[].values.astype", "sklearn.metrics.roc_auc_score", "sklearn.metrics.accuracy_score", "sklearn.metrics.average_precision_score", "test.AugmentOnTest", "tqdm.tqdm", "inputs.squeeze.to", "labels.repeat.to", "meters.AverageMeter.update", "predictions.append.append", "numpy.where", "inputs.squeeze.dim", "inputs.squeeze.squeeze", "labels.repeat.repeat", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model", "[].cpu().data.numpy", "nn.CrossEntropyLoss.", "criterion.item", "inputs.squeeze.size", "torchvision.utils.save_image", "labels.repeat.data[].item", "[].cpu().data.numpy.mean", "torchvision.utils.make_grid", "[].cpu", "torch.softmax"], "function", ["home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.auglib.meters.AverageMeter.update"], ["", "", "def", "test_with_augmentation", "(", "model", ",", "dataset", ",", "device", ",", "num_workers", ",", "n", ",", "\n", "save_images", "=", "False", ")", ":", "\n", "    ", "assert", "n", ">=", "1", ",", "\"n must be larger than 1\"", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n", "if", "n", "!=", "1", ":", "\n", "        ", "dataset", "=", "AugmentOnTest", "(", "dataset", ",", "n", ")", "\n", "\n", "", "dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset", ",", "batch_size", "=", "n", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "num_workers", ",", "pin_memory", "=", "True", ",", "\n", "worker_init_fn", "=", "set_seeds", ")", "\n", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "predictions", "=", "pd", ".", "DataFrame", "(", "columns", "=", "[", "'image'", ",", "'label'", ",", "'score'", "]", ")", "\n", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "tqdm", "(", "dataloader", ")", ")", ":", "\n", "        ", "(", "inputs", ",", "labels", ")", ",", "name", "=", "data", "\n", "\n", "# If the inputs tensor has 5 dimensions, it means", "\n", "# that TenCrop or InceptionCrop was used.", "\n", "if", "inputs", ".", "dim", "(", ")", "==", "5", ":", "\n", "            ", "inputs", "=", "inputs", ".", "squeeze", "(", "0", ")", "\n", "labels", "=", "labels", ".", "repeat", "(", "inputs", ".", "shape", "[", "0", "]", ")", "\n", "\n", "", "inputs", "=", "inputs", ".", "to", "(", "device", ")", "\n", "labels", "=", "labels", ".", "to", "(", "device", ")", "\n", "\n", "if", "save_images", ":", "\n", "            ", "if", "i", "<=", "10", ":", "\n", "                ", "save_image", "(", "make_grid", "(", "inputs", ",", "padding", "=", "0", ")", ",", "\n", "'grid_{}.jpg'", ".", "format", "(", "i", ")", ")", "\n", "\n", "", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "outputs", "=", "model", "(", "inputs", ")", "\n", "scores", "=", "F", ".", "softmax", "(", "outputs", ",", "dim", "=", "1", ")", "[", ":", ",", "1", "]", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "labels", ")", "\n", "\n", "", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "\n", "predictions", "=", "predictions", ".", "append", "(", "\n", "{", "'image'", ":", "name", "[", "0", "]", ",", "\n", "'label'", ":", "labels", ".", "data", "[", "0", "]", ".", "item", "(", ")", ",", "\n", "'score'", ":", "scores", ".", "mean", "(", ")", "}", ",", "\n", "ignore_index", "=", "True", ")", "\n", "\n", "", "labels_array", "=", "predictions", "[", "'label'", "]", ".", "values", ".", "astype", "(", "int", ")", "\n", "scores_array", "=", "predictions", "[", "'score'", "]", ".", "values", ".", "astype", "(", "float", ")", "\n", "auc", "=", "roc_auc_score", "(", "labels_array", ",", "scores_array", ")", "\n", "acc", "=", "accuracy_score", "(", "\n", "labels_array", ",", "np", ".", "where", "(", "scores_array", ">=", "0.5", ",", "1", ",", "0", ")", ")", "\n", "avp", "=", "average_precision_score", "(", "labels_array", ",", "scores_array", ")", "\n", "\n", "return", "(", "{", "'loss'", ":", "losses", ".", "avg", ",", "'auc'", ":", "auc", ",", "'acc'", ":", "acc", ",", "'avp'", ":", "avp", "}", ",", "\n", "predictions", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.auglib.meters.AverageMeter.__init__": [[3, 5], ["meters.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.auglib.meters.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.auglib.meters.AverageMeter.reset": [[6, 11], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.auglib.meters.AverageMeter.update": [[12, 17], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.auglib.dataset_loader.CSVDataset.__init__": [[10, 45], ["pandas.read_csv", "list", "list.sort", "print", "dataset_loader.CSVDataset.class_to_idx.items", "dataset_loader.CSVDataset.data.sample", "dataset_loader.CSVDataset.data.reset_index", "type", "type", "dataset_loader.CSVDataset.data.reset_index", "dataset_loader.CSVDataset.data[].unique", "dict", "print", "range", "len", "len", "dataset_loader.CSVDataset.data[].value_counts", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "csv_file", ",", "image_field", ",", "target_field", ",", "\n", "loader", "=", "default_loader", ",", "transform", "=", "None", ",", "\n", "target_transform", "=", "None", ",", "add_extension", "=", "None", ",", "\n", "limit", "=", "None", ",", "random_subset_size", "=", "None", ")", ":", "\n", "        ", "self", ".", "root", "=", "root", "\n", "self", ".", "loader", "=", "loader", "\n", "self", ".", "image_field", "=", "image_field", "\n", "self", ".", "target_field", "=", "target_field", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "self", ".", "add_extension", "=", "add_extension", "\n", "\n", "self", ".", "data", "=", "pd", ".", "read_csv", "(", "csv_file", ")", "\n", "\n", "if", "random_subset_size", ":", "\n", "            ", "self", ".", "data", "=", "self", ".", "data", ".", "sample", "(", "n", "=", "random_subset_size", ")", "\n", "self", ".", "data", "=", "self", ".", "data", ".", "reset_index", "(", ")", "\n", "\n", "", "if", "type", "(", "limit", ")", "==", "int", ":", "\n", "            ", "limit", "=", "(", "0", ",", "limit", ")", "\n", "", "if", "type", "(", "limit", ")", "==", "tuple", ":", "\n", "            ", "self", ".", "data", "=", "self", ".", "data", "[", "limit", "[", "0", "]", ":", "limit", "[", "1", "]", "]", "\n", "self", ".", "data", "=", "self", ".", "data", ".", "reset_index", "(", ")", "\n", "\n", "", "classes", "=", "list", "(", "self", ".", "data", "[", "self", ".", "target_field", "]", ".", "unique", "(", ")", ")", "\n", "classes", ".", "sort", "(", ")", "\n", "self", ".", "class_to_idx", "=", "{", "classes", "[", "i", "]", ":", "i", "for", "i", "in", "range", "(", "len", "(", "classes", ")", ")", "}", "\n", "self", ".", "classes", "=", "classes", "\n", "\n", "print", "(", "'Found {} images from {} classes.'", ".", "format", "(", "len", "(", "self", ".", "data", ")", ",", "\n", "len", "(", "classes", ")", ")", ")", "\n", "for", "class_name", ",", "idx", "in", "self", ".", "class_to_idx", ".", "items", "(", ")", ":", "\n", "            ", "n_images", "=", "dict", "(", "self", ".", "data", "[", "self", ".", "target_field", "]", ".", "value_counts", "(", ")", ")", "\n", "print", "(", "\"    Class '{}' ({}): {} images.\"", ".", "format", "(", "\n", "class_name", ",", "idx", ",", "n_images", "[", "class_name", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.auglib.dataset_loader.CSVDataset.__getitem__": [[46, 59], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "dataset_loader.CSVDataset.loader", "dataset_loader.CSVDataset.transform", "dataset_loader.CSVDataset.target_transform"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "\n", "self", ".", "data", ".", "loc", "[", "index", ",", "self", ".", "image_field", "]", ")", "\n", "if", "self", ".", "add_extension", ":", "\n", "            ", "path", "=", "path", "+", "self", ".", "add_extension", "\n", "", "sample", "=", "self", ".", "loader", "(", "path", ")", "\n", "target", "=", "self", ".", "class_to_idx", "[", "self", ".", "data", ".", "loc", "[", "index", ",", "self", ".", "target_field", "]", "]", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "sample", "=", "self", ".", "transform", "(", "sample", ")", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "\n", "", "return", "sample", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.auglib.dataset_loader.CSVDataset.__len__": [[60, 62], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.auglib.dataset_loader.CSVDatasetWithName.__getitem__": [[68, 78], ["dataset_loader.CSVDataset.__getitem__"], "methods", ["home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.auglib.dataset_loader.CSVDatasetWithName.__getitem__"], ["def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "        ", "\"\"\"\n        Returns:\n            tuple(tuple(PIL image, int), str): a tuple\n            containing another tuple with an image and\n            the label, and a string representing the\n            name of the image.\n        \"\"\"", "\n", "name", "=", "self", ".", "data", ".", "loc", "[", "i", ",", "self", ".", "image_field", "]", "\n", "return", "super", "(", ")", ".", "__getitem__", "(", "i", ")", ",", "name", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.augmentation.inception_crop.InceptionCrop.__init__": [[29, 32], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "resizes", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "self", ".", "resizes", "=", "resizes", "\n", "\n"]], "home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.augmentation.inception_crop.InceptionCrop.__call__": [[33, 35], ["inception_crop._inception_crop"], "methods", ["home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.augmentation.inception_crop._inception_crop"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "return", "_inception_crop", "(", "img", ",", "self", ".", "size", ",", "self", ".", "resizes", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.augmentation.inception_crop._inception_crop": [[5, 26], ["torchvision.transforms.Resize", "resized_img.crop", "resized_img.crop", "resized_img.crop", "resized_img.crop", "resized_img.crop", "resized_img.crop", "results.append", "results.append", "torchvision.transforms.Resize", "resized_square.transpose", "torchvision.transforms.TenCrop"], "function", ["None"], ["def", "_inception_crop", "(", "img", ",", "size", ",", "resizes", "=", "(", "256", ",", "288", ",", "320", ",", "352", ")", ")", ":", "\n", "    ", "resized", "=", "[", "Resize", "(", "size_", ")", "(", "img", ")", "for", "size_", "in", "resizes", "]", "\n", "results", "=", "[", "]", "\n", "for", "resized_img", "in", "resized", ":", "\n", "        ", "w", ",", "h", "=", "resized_img", ".", "size", "\n", "if", "w", "<", "h", ":", "\n", "            ", "t1", "=", "resized_img", ".", "crop", "(", "(", "0", ",", "0", ",", "w", ",", "w", ")", ")", "\n", "t2", "=", "resized_img", ".", "crop", "(", "(", "0", ",", "h", "/", "2", "-", "w", "/", "2", ",", "w", ",", "h", "/", "2", "+", "w", "/", "2", ")", ")", "\n", "t3", "=", "resized_img", ".", "crop", "(", "(", "0", ",", "h", "-", "w", ",", "w", ",", "h", ")", ")", "\n", "", "else", ":", "\n", "            ", "t1", "=", "resized_img", ".", "crop", "(", "(", "0", ",", "0", ",", "h", ",", "h", ")", ")", "\n", "t2", "=", "resized_img", ".", "crop", "(", "(", "w", "/", "2", "-", "h", "/", "2", ",", "0", ",", "w", "/", "2", "+", "h", "/", "2", ",", "h", ")", ")", "\n", "t3", "=", "resized_img", ".", "crop", "(", "(", "w", "-", "h", ",", "0", ",", "w", ",", "h", ")", ")", "\n", "\n", "", "for", "square", "in", "(", "t1", ",", "t2", ",", "t3", ")", ":", "\n", "            ", "resized_square", "=", "Resize", "(", "size", ")", "(", "square", ")", "\n", "results", ".", "append", "(", "resized_square", ")", "\n", "results", ".", "append", "(", "resized_square", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", ")", "\n", "results", "+=", "TenCrop", "(", "size", ")", "(", "square", ")", "\n", "\n", "", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.augmentation.two_lesions._histogram_matching": [[9, 58], ["template.ravel.copy", "source.ravel.copy", "source.ravel.ravel", "template.ravel.ravel", "numpy.unique", "numpy.unique", "numpy.delete", "numpy.delete", "numpy.cumsum().astype", "numpy.cumsum().astype", "numpy.interp", "interp_t_values[].reshape", "numpy.cumsum", "numpy.cumsum"], "function", ["None"], ["def", "_histogram_matching", "(", "source", ",", "template", ")", ":", "\n", "    ", "\"\"\"\n    Adjust the pixel values of a grayscale image such that its histogram\n    matches that of a target image\n\n    Arguments:\n    -----------\n        source: np.ndarray\n            Image to transform; the histogram is computed over the flattened\n            array\n        template: np.ndarray\n            Template image; can have different dimensions to source\n    Returns:\n    -----------\n        matched: np.ndarray\n            The transformed output image\n\n    Source: https://stackoverflow.com/a/33047048/604734 (Creative Commons)\n    \"\"\"", "\n", "\n", "template", "=", "template", ".", "copy", "(", ")", "\n", "source", "=", "source", ".", "copy", "(", ")", "\n", "template", "[", "template", ".", "mask", "]", "=", "0", "\n", "\n", "oldshape", "=", "source", ".", "shape", "\n", "source", "=", "source", ".", "ravel", "(", ")", "\n", "template", "=", "template", ".", "ravel", "(", ")", "\n", "\n", "# get the set of unique pixel values and their corresponding indices and", "\n", "# counts", "\n", "s_values", ",", "bin_idx", ",", "s_counts", "=", "np", ".", "unique", "(", "source", ",", "return_inverse", "=", "True", ",", "\n", "return_counts", "=", "True", ")", "\n", "t_values", ",", "t_counts", "=", "np", ".", "unique", "(", "template", ",", "return_counts", "=", "True", ")", "\n", "t_values", "=", "np", ".", "delete", "(", "t_values", ",", "0", ")", "\n", "t_counts", "=", "np", ".", "delete", "(", "t_counts", ",", "0", ")", "\n", "\n", "# take the cumsum of the counts and normalize by the number of pixels to", "\n", "# get the empirical cumulative distribution functions for the source and", "\n", "# template images (maps pixel value --> quantile)", "\n", "s_quantiles", "=", "np", ".", "cumsum", "(", "s_counts", ")", ".", "astype", "(", "np", ".", "float64", ")", "\n", "s_quantiles", "/=", "s_quantiles", "[", "-", "1", "]", "\n", "t_quantiles", "=", "np", ".", "cumsum", "(", "t_counts", ")", ".", "astype", "(", "np", ".", "float64", ")", "\n", "t_quantiles", "/=", "t_quantiles", "[", "-", "1", "]", "\n", "\n", "# interpolate linearly to find the pixel values in the template image", "\n", "# that correspond most closely to the quantiles in the source image", "\n", "interp_t_values", "=", "np", ".", "interp", "(", "s_quantiles", ",", "t_quantiles", ",", "t_values", ")", "\n", "\n", "return", "interp_t_values", "[", "bin_idx", "]", ".", "reshape", "(", "oldshape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.augmentation.two_lesions.mix_lesions": [[60, 125], ["range", "random.randint", "skimage.transform.rotate().astype", "skimage.transform.rotate().astype", "scipy.ndimage.center_of_mass", "scipy.ndimage.center_of_mass", "skimage.transform.SimilarityTransform", "skimage.transform.warp().astype", "skimage.transform.warp().astype", "scipy.ndimage.center_of_mass", "numpy.zeros", "skimage.transform.rotate().astype", "skimage.transform.SimilarityTransform", "skimage.transform.warp().astype", "numpy.where", "numpy.argwhere", "np.argwhere.min", "numpy.dstack", "skimage.filters.gaussian.astype", "skimage.filters.gaussian", "numpy.copy", "numpy.where", "numpy.ma.array", "two_lesions._histogram_matching", "numpy.logical_and", "np.argwhere.max", "skimage.transform.rotate", "skimage.transform.rotate", "skimage.transform.warp", "skimage.transform.warp", "skimage.transform.rotate", "skimage.transform.warp", "random.randint"], "function", ["home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.augmentation.two_lesions._histogram_matching"], ["", "def", "mix_lesions", "(", "lesion_bg", ",", "lesion_fg", ",", "mask_bg", ",", "mask_fg", ",", "gauss_sigma", "=", "0", ")", ":", "\n", "    ", "height", ",", "width", "=", "lesion_bg", ".", "shape", "[", ":", "2", "]", "\n", "\n", "# Histogram matching", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "        ", "lesion_bg_masked", "=", "ma", ".", "array", "(", "lesion_bg", "[", "...", ",", "i", "]", ",", "mask", "=", "~", "mask_bg", ")", "\n", "lesion_fg", "[", "...", ",", "i", "]", "=", "_histogram_matching", "(", "lesion_fg", "[", "...", ",", "i", "]", ",", "\n", "lesion_bg_masked", ")", "\n", "\n", "", "rotation", "=", "randint", "(", "0", ",", "90", ")", "\n", "lesion_fg", "=", "rotate", "(", "lesion_fg", ",", "rotation", ",", "mode", "=", "'reflect'", ",", "\n", "preserve_range", "=", "True", ")", ".", "astype", "(", "'uint8'", ")", "\n", "mask_fg", "=", "rotate", "(", "mask_fg", ",", "rotation", ",", "mode", "=", "'constant'", ",", "cval", "=", "0", ",", "\n", "preserve_range", "=", "True", ")", ".", "astype", "(", "'uint8'", ")", "\n", "\n", "cm_fg", "=", "center_of_mass", "(", "mask_fg", ")", "\n", "cm_bg", "=", "center_of_mass", "(", "mask_bg", ")", "\n", "\n", "tf_", "=", "SimilarityTransform", "(", "\n", "scale", "=", "1", ",", "rotation", "=", "0", ",", "\n", "translation", "=", "(", "cm_fg", "[", "1", "]", "-", "cm_bg", "[", "1", "]", ",", "cm_fg", "[", "0", "]", "-", "cm_bg", "[", "0", "]", ")", ")", "\n", "\n", "lesion_fg", "=", "warp", "(", "lesion_fg", ",", "tf_", ",", "mode", "=", "'constant'", ",", "\n", "preserve_range", "=", "True", ")", ".", "astype", "(", "'uint8'", ")", "\n", "mask_fg", "=", "warp", "(", "mask_fg", ",", "tf_", ",", "mode", "=", "'constant'", ",", "cval", "=", "0", ",", "\n", "preserve_range", "=", "True", ")", ".", "astype", "(", "'uint8'", ")", "\n", "cm_fg", "=", "center_of_mass", "(", "mask_fg", ")", "\n", "\n", "# Cut mask", "\n", "cut_mask", "=", "np", ".", "zeros", "(", "mask_fg", ".", "shape", ")", "\n", "cut_mask", "[", "cut_mask", ".", "shape", "[", "0", "]", "//", "2", ":", ",", ":", "]", "=", "255", "\n", "cut_mask", "=", "rotate", "(", "cut_mask", ",", "\n", "randint", "(", "0", ",", "90", ")", ",", "\n", "mode", "=", "'reflect'", ",", "\n", "preserve_range", "=", "True", ")", ".", "astype", "(", "'uint8'", ")", "\n", "tf_cm", "=", "SimilarityTransform", "(", "\n", "scale", "=", "1", ",", "\n", "rotation", "=", "0", ",", "\n", "translation", "=", "(", "width", "//", "2", "-", "cm_bg", "[", "1", "]", ",", "height", "//", "2", "-", "cm_bg", "[", "0", "]", ")", ")", "\n", "cut_mask", "=", "warp", "(", "cut_mask", ",", "tf_cm", ",", "mode", "=", "'constant'", ",", "cval", "=", "0", ",", "\n", "preserve_range", "=", "True", ")", ".", "astype", "(", "'uint8'", ")", "\n", "mask_fg", "=", "np", ".", "where", "(", "np", ".", "logical_and", "(", "mask_fg", ",", "cut_mask", ")", ",", "255", ",", "0", ")", "\n", "\n", "# Calculate mask bounding box", "\n", "coords", "=", "np", ".", "argwhere", "(", "mask_fg", "==", "255", ")", "\n", "y0", ",", "x0", "=", "coords", ".", "min", "(", "axis", "=", "0", ")", "\n", "y1", ",", "x1", "=", "coords", ".", "max", "(", "axis", "=", "0", ")", "+", "1", "\n", "\n", "# Convert mask to 3 channels", "\n", "mask_fg", "=", "np", ".", "dstack", "(", "(", "mask_fg", ",", "mask_fg", ",", "mask_fg", ")", ")", "\n", "# Convert it to float", "\n", "mask_fg", "=", "mask_fg", ".", "astype", "(", "'float'", ")", "\n", "# And normalize it to 0.0~1.0", "\n", "mask_fg", "*=", "(", "1.0", "/", "255.0", ")", "\n", "\n", "# Apply Gaussian Blur to the mask", "\n", "mask_fg", "=", "gaussian", "(", "mask_fg", ",", "sigma", "=", "gauss_sigma", ",", "multichannel", "=", "True", ",", "\n", "preserve_range", "=", "True", ")", "\n", "\n", "out", "=", "np", ".", "copy", "(", "lesion_bg", ")", "\n", "\n", "out_", "=", "(", "lesion_bg", "*", "(", "1.0", "-", "mask_fg", ")", "+", "lesion_fg", "*", "mask_fg", ")", ".", "astype", "(", "'uint8'", ")", "\n", "out", "=", "np", ".", "where", "(", "mask_fg", "==", "0", ",", "lesion_bg", ",", "out_", ")", "\n", "\n", "return", "out", "\n", "", ""]], "home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.augmentation.autoaugment.ImageNetPolicy.__init__": [[24, 54], ["autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "fillcolor", "=", "(", "128", ",", "128", ",", "128", ")", ")", ":", "\n", "        ", "self", ".", "policies", "=", "[", "\n", "SubPolicy", "(", "0.4", ",", "\"posterize\"", ",", "8", ",", "0.6", ",", "\"rotate\"", ",", "9", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"solarize\"", ",", "5", ",", "0.6", ",", "\"autocontrast\"", ",", "5", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.8", ",", "\"equalize\"", ",", "8", ",", "0.6", ",", "\"equalize\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"posterize\"", ",", "7", ",", "0.6", ",", "\"posterize\"", ",", "6", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.4", ",", "\"equalize\"", ",", "7", ",", "0.2", ",", "\"solarize\"", ",", "4", ",", "fillcolor", ")", ",", "\n", "\n", "SubPolicy", "(", "0.4", ",", "\"equalize\"", ",", "4", ",", "0.8", ",", "\"rotate\"", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"solarize\"", ",", "3", ",", "0.6", ",", "\"equalize\"", ",", "7", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.8", ",", "\"posterize\"", ",", "5", ",", "1.0", ",", "\"equalize\"", ",", "2", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.2", ",", "\"rotate\"", ",", "3", ",", "0.6", ",", "\"solarize\"", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"equalize\"", ",", "8", ",", "0.4", ",", "\"posterize\"", ",", "6", ",", "fillcolor", ")", ",", "\n", "\n", "SubPolicy", "(", "0.8", ",", "\"rotate\"", ",", "8", ",", "0.4", ",", "\"color\"", ",", "0", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.4", ",", "\"rotate\"", ",", "9", ",", "0.6", ",", "\"equalize\"", ",", "2", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.0", ",", "\"equalize\"", ",", "7", ",", "0.8", ",", "\"equalize\"", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"invert\"", ",", "4", ",", "1.0", ",", "\"equalize\"", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"color\"", ",", "4", ",", "1.0", ",", "\"contrast\"", ",", "8", ",", "fillcolor", ")", ",", "\n", "\n", "SubPolicy", "(", "0.8", ",", "\"rotate\"", ",", "8", ",", "1.0", ",", "\"color\"", ",", "2", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.8", ",", "\"color\"", ",", "8", ",", "0.8", ",", "\"solarize\"", ",", "7", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.4", ",", "\"sharpness\"", ",", "7", ",", "0.6", ",", "\"invert\"", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"shearX\"", ",", "5", ",", "1.0", ",", "\"equalize\"", ",", "9", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.4", ",", "\"color\"", ",", "0", ",", "0.6", ",", "\"equalize\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "\n", "SubPolicy", "(", "0.4", ",", "\"equalize\"", ",", "7", ",", "0.2", ",", "\"solarize\"", ",", "4", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"solarize\"", ",", "5", ",", "0.6", ",", "\"autocontrast\"", ",", "5", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"invert\"", ",", "4", ",", "1.0", ",", "\"equalize\"", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"color\"", ",", "4", ",", "1.0", ",", "\"contrast\"", ",", "8", ",", "fillcolor", ")", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.augmentation.autoaugment.ImageNetPolicy.__call__": [[57, 60], ["random.randint", "len"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "policy_idx", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "policies", ")", "-", "1", ")", "\n", "return", "self", ".", "policies", "[", "policy_idx", "]", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.augmentation.autoaugment.ImageNetPolicy.__repr__": [[61, 63], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"AutoAugment ImageNet Policy\"", "\n", "\n"]], "home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.augmentation.autoaugment.CIFAR10Policy.__init__": [[78, 109], ["autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "fillcolor", "=", "(", "128", ",", "128", ",", "128", ")", ")", ":", "\n", "        ", "self", ".", "policies", "=", "[", "\n", "SubPolicy", "(", "0.1", ",", "\"invert\"", ",", "7", ",", "0.2", ",", "\"contrast\"", ",", "6", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.7", ",", "\"rotate\"", ",", "2", ",", "0.3", ",", "\"translateX\"", ",", "9", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.8", ",", "\"sharpness\"", ",", "1", ",", "0.9", ",", "\"sharpness\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.5", ",", "\"shearY\"", ",", "8", ",", "0.7", ",", "\"translateY\"", ",", "9", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.5", ",", "\"autocontrast\"", ",", "8", ",", "0.9", ",", "\"equalize\"", ",", "2", ",", "fillcolor", ")", ",", "\n", "\n", "SubPolicy", "(", "0.2", ",", "\"shearY\"", ",", "7", ",", "0.3", ",", "\"posterize\"", ",", "7", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.4", ",", "\"color\"", ",", "3", ",", "0.6", ",", "\"brightness\"", ",", "7", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.3", ",", "\"sharpness\"", ",", "9", ",", "0.7", ",", "\"brightness\"", ",", "9", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"equalize\"", ",", "5", ",", "0.5", ",", "\"equalize\"", ",", "1", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"contrast\"", ",", "7", ",", "0.6", ",", "\"sharpness\"", ",", "5", ",", "fillcolor", ")", ",", "\n", "\n", "SubPolicy", "(", "0.7", ",", "\"color\"", ",", "7", ",", "0.5", ",", "\"translateX\"", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.3", ",", "\"equalize\"", ",", "7", ",", "0.4", ",", "\"autocontrast\"", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.4", ",", "\"translateY\"", ",", "3", ",", "0.2", ",", "\"sharpness\"", ",", "6", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.9", ",", "\"brightness\"", ",", "6", ",", "0.2", ",", "\"color\"", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.5", ",", "\"solarize\"", ",", "2", ",", "0.0", ",", "\"invert\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "\n", "SubPolicy", "(", "0.2", ",", "\"equalize\"", ",", "0", ",", "0.6", ",", "\"autocontrast\"", ",", "0", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.2", ",", "\"equalize\"", ",", "8", ",", "0.8", ",", "\"equalize\"", ",", "4", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.9", ",", "\"color\"", ",", "9", ",", "0.6", ",", "\"equalize\"", ",", "6", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.8", ",", "\"autocontrast\"", ",", "4", ",", "0.2", ",", "\"solarize\"", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.1", ",", "\"brightness\"", ",", "3", ",", "0.7", ",", "\"color\"", ",", "0", ",", "fillcolor", ")", ",", "\n", "\n", "SubPolicy", "(", "0.4", ",", "\"solarize\"", ",", "5", ",", "0.9", ",", "\"autocontrast\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.9", ",", "\"translateY\"", ",", "9", ",", "0.7", ",", "\"translateY\"", ",", "9", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.9", ",", "\"autocontrast\"", ",", "2", ",", "0.8", ",", "\"solarize\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.8", ",", "\"equalize\"", ",", "8", ",", "0.1", ",", "\"invert\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.7", ",", "\"translateY\"", ",", "9", ",", "0.9", ",", "\"autocontrast\"", ",", "1", ",", "fillcolor", ")", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.augmentation.autoaugment.CIFAR10Policy.__call__": [[112, 115], ["random.randint", "len"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "policy_idx", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "policies", ")", "-", "1", ")", "\n", "return", "self", ".", "policies", "[", "policy_idx", "]", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.augmentation.autoaugment.CIFAR10Policy.__repr__": [[116, 118], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"AutoAugment CIFAR10 Policy\"", "\n", "\n"]], "home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.augmentation.autoaugment.SVHNPolicy.__init__": [[133, 164], ["autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "fillcolor", "=", "(", "128", ",", "128", ",", "128", ")", ")", ":", "\n", "        ", "self", ".", "policies", "=", "[", "\n", "SubPolicy", "(", "0.9", ",", "\"shearX\"", ",", "4", ",", "0.2", ",", "\"invert\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.9", ",", "\"shearY\"", ",", "8", ",", "0.7", ",", "\"invert\"", ",", "5", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"equalize\"", ",", "5", ",", "0.6", ",", "\"solarize\"", ",", "6", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.9", ",", "\"invert\"", ",", "3", ",", "0.6", ",", "\"equalize\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"equalize\"", ",", "1", ",", "0.9", ",", "\"rotate\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "\n", "SubPolicy", "(", "0.9", ",", "\"shearX\"", ",", "4", ",", "0.8", ",", "\"autocontrast\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.9", ",", "\"shearY\"", ",", "8", ",", "0.4", ",", "\"invert\"", ",", "5", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.9", ",", "\"shearY\"", ",", "5", ",", "0.2", ",", "\"solarize\"", ",", "6", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.9", ",", "\"invert\"", ",", "6", ",", "0.8", ",", "\"autocontrast\"", ",", "1", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"equalize\"", ",", "3", ",", "0.9", ",", "\"rotate\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "\n", "SubPolicy", "(", "0.9", ",", "\"shearX\"", ",", "4", ",", "0.3", ",", "\"solarize\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.8", ",", "\"shearY\"", ",", "8", ",", "0.7", ",", "\"invert\"", ",", "4", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.9", ",", "\"equalize\"", ",", "5", ",", "0.6", ",", "\"translateY\"", ",", "6", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.9", ",", "\"invert\"", ",", "4", ",", "0.6", ",", "\"equalize\"", ",", "7", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.3", ",", "\"contrast\"", ",", "3", ",", "0.8", ",", "\"rotate\"", ",", "4", ",", "fillcolor", ")", ",", "\n", "\n", "SubPolicy", "(", "0.8", ",", "\"invert\"", ",", "5", ",", "0.0", ",", "\"translateY\"", ",", "2", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.7", ",", "\"shearY\"", ",", "6", ",", "0.4", ",", "\"solarize\"", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"invert\"", ",", "4", ",", "0.8", ",", "\"rotate\"", ",", "4", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.3", ",", "\"shearY\"", ",", "7", ",", "0.9", ",", "\"translateX\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.1", ",", "\"shearX\"", ",", "6", ",", "0.6", ",", "\"invert\"", ",", "5", ",", "fillcolor", ")", ",", "\n", "\n", "SubPolicy", "(", "0.7", ",", "\"solarize\"", ",", "2", ",", "0.6", ",", "\"translateY\"", ",", "7", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.8", ",", "\"shearY\"", ",", "4", ",", "0.8", ",", "\"invert\"", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.7", ",", "\"shearX\"", ",", "9", ",", "0.8", ",", "\"translateY\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.8", ",", "\"shearY\"", ",", "5", ",", "0.7", ",", "\"autocontrast\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.7", ",", "\"shearX\"", ",", "2", ",", "0.1", ",", "\"invert\"", ",", "5", ",", "fillcolor", ")", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.augmentation.autoaugment.SVHNPolicy.__call__": [[167, 170], ["random.randint", "len"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "policy_idx", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "policies", ")", "-", "1", ")", "\n", "return", "self", ".", "policies", "[", "policy_idx", "]", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.augmentation.autoaugment.SVHNPolicy.__repr__": [[171, 173], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"AutoAugment SVHN Policy\"", "\n", "\n"]], "home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.augmentation.autoaugment.SubPolicy.__init__": [[176, 237], ["numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.round().astype", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.linspace", "img.convert().rotate", "PIL.Image.composite().convert", "img.transform", "img.transform", "img.transform", "img.transform", "autoaugment.SubPolicy.__init__.rotate_with_fill"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "p1", ",", "operation1", ",", "magnitude_idx1", ",", "p2", ",", "operation2", ",", "magnitude_idx2", ",", "fillcolor", "=", "(", "128", ",", "128", ",", "128", ")", ")", ":", "\n", "        ", "ranges", "=", "{", "\n", "\"shearX\"", ":", "np", ".", "linspace", "(", "0", ",", "0.3", ",", "10", ")", ",", "\n", "\"shearY\"", ":", "np", ".", "linspace", "(", "0", ",", "0.3", ",", "10", ")", ",", "\n", "\"translateX\"", ":", "np", ".", "linspace", "(", "0", ",", "150", "/", "331", ",", "10", ")", ",", "\n", "\"translateY\"", ":", "np", ".", "linspace", "(", "0", ",", "150", "/", "331", ",", "10", ")", ",", "\n", "\"rotate\"", ":", "np", ".", "linspace", "(", "0", ",", "30", ",", "10", ")", ",", "\n", "\"color\"", ":", "np", ".", "linspace", "(", "0.0", ",", "0.9", ",", "10", ")", ",", "\n", "\"posterize\"", ":", "np", ".", "round", "(", "np", ".", "linspace", "(", "8", ",", "4", ",", "10", ")", ",", "0", ")", ".", "astype", "(", "np", ".", "int", ")", ",", "\n", "\"solarize\"", ":", "np", ".", "linspace", "(", "256", ",", "0", ",", "10", ")", ",", "\n", "\"contrast\"", ":", "np", ".", "linspace", "(", "0.0", ",", "0.9", ",", "10", ")", ",", "\n", "\"sharpness\"", ":", "np", ".", "linspace", "(", "0.0", ",", "0.9", ",", "10", ")", ",", "\n", "\"brightness\"", ":", "np", ".", "linspace", "(", "0.0", ",", "0.9", ",", "10", ")", ",", "\n", "\"autocontrast\"", ":", "[", "0", "]", "*", "10", ",", "\n", "\"equalize\"", ":", "[", "0", "]", "*", "10", ",", "\n", "\"invert\"", ":", "[", "0", "]", "*", "10", "\n", "}", "\n", "\n", "# from https://stackoverflow.com/questions/5252170/specify-image-filling-color-when-rotating-in-python-with-pil-and-setting-expand", "\n", "def", "rotate_with_fill", "(", "img", ",", "magnitude", ")", ":", "\n", "            ", "rot", "=", "img", ".", "convert", "(", "\"RGBA\"", ")", ".", "rotate", "(", "magnitude", ")", "\n", "return", "Image", ".", "composite", "(", "rot", ",", "Image", ".", "new", "(", "\"RGBA\"", ",", "rot", ".", "size", ",", "(", "128", ",", ")", "*", "4", ")", ",", "rot", ")", ".", "convert", "(", "img", ".", "mode", ")", "\n", "\n", "", "func", "=", "{", "\n", "\"shearX\"", ":", "lambda", "img", ",", "magnitude", ":", "img", ".", "transform", "(", "\n", "img", ".", "size", ",", "Image", ".", "AFFINE", ",", "(", "1", ",", "magnitude", "*", "random", ".", "choice", "(", "[", "-", "1", ",", "1", "]", ")", ",", "0", ",", "0", ",", "1", ",", "0", ")", ",", "\n", "Image", ".", "BICUBIC", ",", "fillcolor", "=", "fillcolor", ")", ",", "\n", "\"shearY\"", ":", "lambda", "img", ",", "magnitude", ":", "img", ".", "transform", "(", "\n", "img", ".", "size", ",", "Image", ".", "AFFINE", ",", "(", "1", ",", "0", ",", "0", ",", "magnitude", "*", "random", ".", "choice", "(", "[", "-", "1", ",", "1", "]", ")", ",", "1", ",", "0", ")", ",", "\n", "Image", ".", "BICUBIC", ",", "fillcolor", "=", "fillcolor", ")", ",", "\n", "\"translateX\"", ":", "lambda", "img", ",", "magnitude", ":", "img", ".", "transform", "(", "\n", "img", ".", "size", ",", "Image", ".", "AFFINE", ",", "(", "1", ",", "0", ",", "magnitude", "*", "img", ".", "size", "[", "0", "]", "*", "random", ".", "choice", "(", "[", "-", "1", ",", "1", "]", ")", ",", "0", ",", "1", ",", "0", ")", ",", "\n", "fillcolor", "=", "fillcolor", ")", ",", "\n", "\"translateY\"", ":", "lambda", "img", ",", "magnitude", ":", "img", ".", "transform", "(", "\n", "img", ".", "size", ",", "Image", ".", "AFFINE", ",", "(", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "magnitude", "*", "img", ".", "size", "[", "1", "]", "*", "random", ".", "choice", "(", "[", "-", "1", ",", "1", "]", ")", ")", ",", "\n", "fillcolor", "=", "fillcolor", ")", ",", "\n", "\"rotate\"", ":", "lambda", "img", ",", "magnitude", ":", "rotate_with_fill", "(", "img", ",", "magnitude", ")", ",", "\n", "# \"rotate\": lambda img, magnitude: img.rotate(magnitude * random.choice([-1, 1])),", "\n", "\"color\"", ":", "lambda", "img", ",", "magnitude", ":", "ImageEnhance", ".", "Color", "(", "img", ")", ".", "enhance", "(", "1", "+", "magnitude", "*", "random", ".", "choice", "(", "[", "-", "1", ",", "1", "]", ")", ")", ",", "\n", "\"posterize\"", ":", "lambda", "img", ",", "magnitude", ":", "ImageOps", ".", "posterize", "(", "img", ",", "magnitude", ")", ",", "\n", "\"solarize\"", ":", "lambda", "img", ",", "magnitude", ":", "ImageOps", ".", "solarize", "(", "img", ",", "magnitude", ")", ",", "\n", "\"contrast\"", ":", "lambda", "img", ",", "magnitude", ":", "ImageEnhance", ".", "Contrast", "(", "img", ")", ".", "enhance", "(", "\n", "1", "+", "magnitude", "*", "random", ".", "choice", "(", "[", "-", "1", ",", "1", "]", ")", ")", ",", "\n", "\"sharpness\"", ":", "lambda", "img", ",", "magnitude", ":", "ImageEnhance", ".", "Sharpness", "(", "img", ")", ".", "enhance", "(", "\n", "1", "+", "magnitude", "*", "random", ".", "choice", "(", "[", "-", "1", ",", "1", "]", ")", ")", ",", "\n", "\"brightness\"", ":", "lambda", "img", ",", "magnitude", ":", "ImageEnhance", ".", "Brightness", "(", "img", ")", ".", "enhance", "(", "\n", "1", "+", "magnitude", "*", "random", ".", "choice", "(", "[", "-", "1", ",", "1", "]", ")", ")", ",", "\n", "\"autocontrast\"", ":", "lambda", "img", ",", "magnitude", ":", "ImageOps", ".", "autocontrast", "(", "img", ")", ",", "\n", "\"equalize\"", ":", "lambda", "img", ",", "magnitude", ":", "ImageOps", ".", "equalize", "(", "img", ")", ",", "\n", "\"invert\"", ":", "lambda", "img", ",", "magnitude", ":", "ImageOps", ".", "invert", "(", "img", ")", "\n", "}", "\n", "\n", "# self.name = \"{}_{:.2f}_and_{}_{:.2f}\".format(", "\n", "#     operation1, ranges[operation1][magnitude_idx1],", "\n", "#     operation2, ranges[operation2][magnitude_idx2])", "\n", "self", ".", "p1", "=", "p1", "\n", "self", ".", "operation1", "=", "func", "[", "operation1", "]", "\n", "self", ".", "magnitude1", "=", "ranges", "[", "operation1", "]", "[", "magnitude_idx1", "]", "\n", "self", ".", "p2", "=", "p2", "\n", "self", ".", "operation2", "=", "func", "[", "operation2", "]", "\n", "self", ".", "magnitude2", "=", "ranges", "[", "operation2", "]", "[", "magnitude_idx2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.augmentation.autoaugment.SubPolicy.__call__": [[239, 243], ["random.random", "autoaugment.SubPolicy.operation1", "random.random", "autoaugment.SubPolicy.operation2"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "self", ".", "p1", ":", "img", "=", "self", ".", "operation1", "(", "img", ",", "self", ".", "magnitude1", ")", "\n", "if", "random", ".", "random", "(", ")", "<", "self", ".", "p2", ":", "img", "=", "self", ".", "operation2", "(", "img", ",", "self", ".", "magnitude2", ")", "\n", "return", "img", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.augmentation.augmentations.RandomErasing.__init__": [[40, 45], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "probability", "=", "0.5", ",", "sl", "=", "0.02", ",", "sh", "=", "0.4", ",", "r1", "=", "0.3", ")", ":", "\n", "        ", "self", ".", "probability", "=", "probability", "\n", "self", ".", "sl", "=", "sl", "\n", "self", ".", "sh", "=", "sh", "\n", "self", ".", "r1", "=", "r1", "\n", "\n"]], "home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.augmentation.augmentations.RandomErasing.__call__": [[46, 69], ["range", "random.uniform", "random.uniform", "int", "int", "random.uniform", "round", "round", "random.randint", "random.randint", "math.sqrt", "math.sqrt", "numpy.random.rand", "numpy.random.rand"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "if", "random", ".", "uniform", "(", "0", ",", "1", ")", ">", "self", ".", "probability", ":", "\n", "            ", "return", "img", "\n", "\n", "", "for", "attempt", "in", "range", "(", "10", ")", ":", "\n", "            ", "area", "=", "img", ".", "shape", "[", "0", "]", "*", "img", ".", "shape", "[", "1", "]", "\n", "\n", "target_area", "=", "random", ".", "uniform", "(", "self", ".", "sl", ",", "self", ".", "sh", ")", "*", "area", "\n", "aspect_ratio", "=", "random", ".", "uniform", "(", "self", ".", "r1", ",", "1", "/", "self", ".", "r1", ")", "\n", "\n", "h", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "target_area", "*", "aspect_ratio", ")", ")", ")", "\n", "w", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "target_area", "/", "aspect_ratio", ")", ")", ")", "\n", "\n", "if", "w", "<", "img", ".", "shape", "[", "1", "]", "and", "h", "<", "img", ".", "shape", "[", "0", "]", ":", "\n", "                ", "x1", "=", "random", ".", "randint", "(", "0", ",", "img", ".", "shape", "[", "0", "]", "-", "h", ")", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "img", ".", "shape", "[", "1", "]", "-", "w", ")", "\n", "if", "img", ".", "shape", "[", "2", "]", "==", "3", ":", "\n", "                    ", "img", "[", "x1", ":", "x1", "+", "h", ",", "y1", ":", "y1", "+", "w", ",", ":", "]", "=", "np", ".", "random", ".", "rand", "(", "h", ",", "w", ",", "3", ")", "*", "255.", "\n", "", "else", ":", "\n", "                    ", "img", "[", "x1", ":", "x1", "+", "h", ",", "y1", ":", "y1", "+", "w", ",", "0", "]", "=", "np", ".", "random", ".", "rand", "(", "h", ",", "w", ",", "1", ")", "*", "255.", "\n", "", "return", "img", "\n", "\n", "", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.augmentation.augmentations.Augmentations.__init__": [[72, 134], ["imgaug.augmenters.Affine", "imgaug.augmenters.PiecewiseAffine", "tf_list.append", "tf_list.append", "tf_list.append", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "augmentations.Augmentations._get_crop_transform", "augmentations.Augmentations._get_crop_transform", "tf_list.append", "tf_list.append", "tf_list.append", "tf_list.append", "tf_list.append", "tf_list.append", "tf_list.append", "tf_list.append", "tf_list.append", "tf_list.append", "torchvision.transforms.ToTensor", "torchvision.transforms.RandomResizedCrop", "torchvision.transforms.Resize", "autoaugment.ImageNetPolicy", "numpy.array", "augmentations.RandomErasing", "PIL.Image.fromarray", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.RandomVerticalFlip", "torchvision.transforms.ColorJitter", "torchvision.transforms.Normalize", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "imgaug.augmenters.Affine.augment_image", "imgaug.augmenters.PiecewiseAffine.augment_image", "tps.tps_warp.tps_warp"], "methods", ["home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.augmentation.augmentations.Augmentations._get_crop_transform", "home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.augmentation.augmentations.Augmentations._get_crop_transform"], ["    ", "def", "__init__", "(", "self", ",", "**", "augs", ")", ":", "\n", "        ", "self", ".", "mean", "=", "augs", "[", "'mean'", "]", "\n", "self", ".", "std", "=", "augs", "[", "'std'", "]", "\n", "self", ".", "size", "=", "augs", "[", "'size'", "]", "\n", "\n", "tf_list", "=", "[", "]", "\n", "\n", "if", "not", "augs", "[", "'scale'", "]", ":", "\n", "            ", "augs", "[", "'scale'", "]", "=", "1.0", "\n", "\n", "", "affine", "=", "iaa", ".", "Affine", "(", "\n", "rotate", "=", "(", "-", "augs", "[", "'rotation'", "]", ",", "augs", "[", "'rotation'", "]", ")", ",", "\n", "shear", "=", "(", "-", "augs", "[", "'shear'", "]", ",", "augs", "[", "'shear'", "]", ")", ",", "\n", "scale", "=", "(", "{", "'x'", ":", "augs", "[", "'scale'", "]", ",", "'y'", ":", "augs", "[", "'scale'", "]", "}", ")", ",", "\n", "mode", "=", "'symmetric'", ")", "\n", "\n", "piecewise_affine", "=", "iaa", ".", "PiecewiseAffine", "(", "\n", "scale", "=", "(", "0.0", ",", "0.1", ")", ",", "nb_rows", "=", "4", ",", "nb_cols", "=", "4", ",", "\n", "mode", "=", "'symmetric'", ")", "\n", "\n", "if", "augs", "[", "'random_crop'", "]", ":", "\n", "            ", "tf_list", ".", "append", "(", "transforms", ".", "RandomResizedCrop", "(", "\n", "augs", "[", "'size'", "]", ",", "scale", "=", "(", "0.4", ",", "1.0", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "tf_list", ".", "append", "(", "transforms", ".", "Resize", "(", "(", "augs", "[", "'size'", "]", ",", "augs", "[", "'size'", "]", ")", ")", ")", "\n", "", "if", "augs", "[", "'autoaugment'", "]", ":", "\n", "            ", "tf_list", ".", "append", "(", "ImageNetPolicy", "(", ")", ")", "\n", "", "tf_list", ".", "append", "(", "lambda", "x", ":", "np", ".", "array", "(", "x", ")", ")", "\n", "if", "augs", "[", "'random_erasing'", "]", ":", "\n", "            ", "tf_list", ".", "append", "(", "RandomErasing", "(", "sh", "=", "0.3", ")", ")", "\n", "", "if", "augs", "[", "'rotation'", "]", "or", "augs", "[", "'shear'", "]", "or", "augs", "[", "'scale'", "]", "!=", "1.0", ":", "\n", "            ", "tf_list", ".", "append", "(", "lambda", "x", ":", "affine", ".", "augment_image", "(", "x", ")", ")", "\n", "", "if", "augs", "[", "'piecewise_affine'", "]", ":", "\n", "            ", "tf_list", ".", "append", "(", "lambda", "x", ":", "piecewise_affine", ".", "augment_image", "(", "x", ")", ")", "\n", "", "if", "augs", "[", "'tps'", "]", ":", "\n", "            ", "tf_list", ".", "append", "(", "lambda", "x", ":", "tps_warp", "(", "x", ",", "4", ",", "0.1", ")", ")", "\n", "", "tf_list", ".", "append", "(", "lambda", "x", ":", "PIL", ".", "Image", ".", "fromarray", "(", "x", ")", ")", "\n", "if", "augs", "[", "'hflip'", "]", ":", "\n", "            ", "tf_list", ".", "append", "(", "transforms", ".", "RandomHorizontalFlip", "(", ")", ")", "\n", "", "if", "augs", "[", "'vflip'", "]", ":", "\n", "            ", "tf_list", ".", "append", "(", "transforms", ".", "RandomVerticalFlip", "(", ")", ")", "\n", "", "if", "(", "augs", "[", "'color_saturation'", "]", "or", "augs", "[", "'color_contrast'", "]", "\n", "or", "augs", "[", "'color_brightness'", "]", "or", "augs", "[", "'color_hue'", "]", ")", ":", "\n", "            ", "tf_list", ".", "append", "(", "transforms", ".", "ColorJitter", "(", "\n", "brightness", "=", "augs", "[", "'color_brightness'", "]", ",", "\n", "contrast", "=", "augs", "[", "'color_contrast'", "]", ",", "\n", "saturation", "=", "augs", "[", "'color_saturation'", "]", ",", "\n", "hue", "=", "augs", "[", "'color_hue'", "]", ")", ")", "\n", "\n", "", "tf_list", ".", "append", "(", "transforms", ".", "ToTensor", "(", ")", ")", "\n", "self", ".", "tf_augment", "=", "transforms", ".", "Compose", "(", "tf_list", ")", "\n", "self", ".", "tf_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "self", ".", "tf_augment", ",", "\n", "transforms", ".", "Normalize", "(", "augs", "[", "'mean'", "]", ",", "augs", "[", "'std'", "]", ")", "\n", "]", ")", "\n", "self", ".", "no_augmentation", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "(", "augs", "[", "'size'", "]", ",", "augs", "[", "'size'", "]", ")", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "augs", "[", "'mean'", "]", ",", "augs", "[", "'std'", "]", ")", "\n", "]", ")", "\n", "self", ".", "ten_crop", "=", "self", ".", "_get_crop_transform", "(", "'ten'", ")", "\n", "self", ".", "inception_crop", "=", "self", ".", "_get_crop_transform", "(", "'inception'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.augmentation.augmentations.Augmentations.seed": [[135, 139], ["imgaug.seed", "numpy.random.seed", "random.seed"], "methods", ["home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.augmentation.augmentations.Augmentations.seed", "home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.augmentation.augmentations.Augmentations.seed", "home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.augmentation.augmentations.Augmentations.seed"], ["", "def", "seed", "(", "self", ",", "seed", ")", ":", "\n", "        ", "ia", ".", "seed", "(", "seed", "+", "1", "%", "2", "**", "32", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", "+", "1", "%", "2", "**", "32", ")", "\n", "random", ".", "seed", "(", "seed", "+", "1", "%", "2", "**", "32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.augmentation.augmentations.Augmentations._get_crop_transform": [[140, 160], ["torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "inception_crop.InceptionCrop", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.Lambda", "torchvision.transforms.Resize", "torchvision.transforms.TenCrop", "tuple", "range", "torch.stack", "torchvision.transforms.Compose."], "methods", ["None"], ["", "def", "_get_crop_transform", "(", "self", ",", "method", ")", ":", "\n", "        ", "if", "method", "==", "'ten'", ":", "\n", "            ", "crop_tf", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "(", "self", ".", "size", "+", "32", ",", "self", ".", "size", "+", "32", ")", ")", ",", "\n", "transforms", ".", "TenCrop", "(", "(", "self", ".", "size", ",", "self", ".", "size", ")", ")", "\n", "]", ")", "\n", "", "if", "method", "==", "'inception'", ":", "\n", "            ", "crop_tf", "=", "InceptionCrop", "(", "\n", "self", ".", "size", ",", "\n", "resizes", "=", "tuple", "(", "range", "(", "self", ".", "size", "+", "32", ",", "self", ".", "size", "+", "129", ",", "32", ")", ")", "\n", ")", "\n", "", "after_crop", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "self", ".", "mean", ",", "self", ".", "std", ")", ",", "\n", "]", ")", "\n", "return", "transforms", ".", "Compose", "(", "[", "\n", "crop_tf", ",", "\n", "transforms", ".", "Lambda", "(", "\n", "lambda", "crops", ":", "torch", ".", "stack", "(", "\n", "[", "after_crop", "(", "crop", ")", "for", "crop", "in", "crops", "]", ")", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.augmentation.augmentations.set_seeds": [[16, 25], ["imgaug.seed", "numpy.random.seed", "random.seed", "torch.initial_seed"], "function", ["home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.augmentation.augmentations.Augmentations.seed", "home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.augmentation.augmentations.Augmentations.seed", "home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.augmentation.augmentations.Augmentations.seed"], ["def", "set_seeds", "(", "worker_id", ")", ":", "\n", "    ", "\"\"\"\n    Set random seeds. Used for setting different seeds for each\n    worker created by DataLoader.\n    \"\"\"", "\n", "seed", "=", "torch", ".", "initial_seed", "(", ")", "%", "2", "**", "31", "\n", "ia", ".", "seed", "(", "seed", "+", "1", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", "+", "2", ")", "\n", "random", ".", "seed", "(", "seed", "+", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.MobileNet.dataset.Dataset.__init__": [[14, 112], ["numpy.random.RandomState", "dataset.Dataset.split_dataset", "print", "int", "dataset.Dataset.iterate_example", "dataset.Dataset.iterate_example", "dataset.Dataset.iterate_example", "auglib.augmentation.Augmentations", "print", "enumerate", "enumerate", "dataset.Dataset.dataset.keys", "torchvision.ImageFolder", "torch.utils.data.DataLoader", "len", "print", "cifar.read_data", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "inputs.cpu().numpy().transpose", "labels.cpu().numpy", "inputs.cpu().numpy().transpose", "labels.cpu().numpy", "cifar.read_data", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "inputs.cpu().numpy", "labels.cpu", "inputs.cpu().numpy", "labels.cpu", "inputs.cpu", "inputs.cpu"], "methods", ["home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.MobileNet.dataset.Dataset.split_dataset", "home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.MobileNet.dataset.Dataset.iterate_example", "home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.MobileNet.dataset.Dataset.iterate_example", "home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.MobileNet.dataset.Dataset.iterate_example"], ["    ", "def", "__init__", "(", "self", ",", "datasource", ",", "path_data", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "datasource", "=", "datasource", "\n", "self", ".", "path_data", "=", "path_data", "\n", "self", ".", "rand", "=", "np", ".", "random", ".", "RandomState", "(", "42", ")", "\n", "if", "self", ".", "datasource", "==", "'mnist'", ":", "\n", "            ", "self", ".", "num_classes", "=", "10", "\n", "# self.dataset = mnist.read_data(os.path.join(self.path_data, 'MNIST'))", "\n", "", "elif", "self", ".", "datasource", "==", "'isic'", ":", "\n", "            ", "self", ".", "num_classes", "=", "2", "\n", "# self.dataset = mnist.read_data(os.path.join(self.path_data, 'MNIST'))", "\n", "\n", "data_dir", "=", "'/home/r/raent/Rahim/NetworkCompression/Single-ModeCompression/Code/'", "'DeconstructingLotteryTicket/ISIC2016/Dataset'", "\n", "\n", "num_workers", "=", "{", "\n", "'train'", ":", "100", ",", "\n", "'val'", ":", "100", ",", "\n", "'test'", ":", "100", "\n", "}", "\n", "aug", "=", "{", "\n", "'hflip'", ":", "True", ",", "# Random Horizontal Flip", "\n", "'vflip'", ":", "True", ",", "# Random Vertical Flip", "\n", "'rotation'", ":", "90", ",", "# Rotation (in degrees)", "\n", "'shear'", ":", "20", ",", "# Shear (in degrees)", "\n", "'scale'", ":", "(", "0.8", ",", "1.2", ")", ",", "# Scale (tuple (min, max))", "\n", "'color_contrast'", ":", "0.3", ",", "# Color Jitter: Contrast", "\n", "'color_saturation'", ":", "0.3", ",", "# Color Jitter: Saturation", "\n", "'color_brightness'", ":", "0.3", ",", "# Color Jitter: Brightness", "\n", "'color_hue'", ":", "0.1", ",", "# Color Jitter: Hue", "\n", "'random_crop'", ":", "True", ",", "# Random Crops", "\n", "'random_erasing'", ":", "False", ",", "# Random Erasing", "\n", "'piecewise_affine'", ":", "False", ",", "# Piecewise Affine", "\n", "'tps'", ":", "True", ",", "# TPS Affine", "\n", "'autoaugment'", ":", "False", ",", "# AutoAugmentation", "\n", "}", "\n", "aug", "[", "'size'", "]", "=", "224", "\n", "# aug['mean'] = [0.485, 0.456, 0.406]", "\n", "# aug['std'] = [0.229, 0.224, 0.225]", "\n", "aug", "[", "'mean'", "]", "=", "[", "0.6851", ",", "0.6653", ",", "0.6328", "]", "\n", "aug", "[", "'std'", "]", "=", "[", "0.1442", ",", "0.1402", ",", "0.1382", "]", "\n", "# 'aug={\"color_contrast\": 0.3, \"color_saturation\": 0.3, \"color_brightness\": 0.3, \"color_hue\": 0.1, \"rotation\": 90,", "\n", "# \"scale\": (0.8, 1.2), \"shear\": 20, \"vflip\": True, \"hflip\": True, \"random_crop\": True}' \\", "\n", "\n", "augs", "=", "Augmentations", "(", "**", "aug", ")", "\n", "\n", "# image_datasets = {x: datasets.ImageFolder(os.path.join(data_dir, x),", "\n", "#                                           data_transforms[x]) for x in ['train', 'val', 'test']}", "\n", "image_datasets", "=", "{", "x", ":", "datasets", ".", "ImageFolder", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "x", ")", ",", "\n", "augs", ".", "tf_augment", ")", "for", "x", "in", "[", "'train'", ",", "'val'", ",", "'test'", "]", "}", "\n", "dataloaders", "=", "{", "x", ":", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "image_datasets", "[", "x", "]", ",", "batch_size", "=", "900", ",", "\n", "shuffle", "=", "True", ",", "num_workers", "=", "num_workers", "[", "x", "]", ")", "\n", "for", "x", "in", "[", "'train'", ",", "'val'", ",", "'test'", "]", "}", "\n", "dataset_sizes", "=", "{", "x", ":", "len", "(", "image_datasets", "[", "x", "]", ")", "for", "x", "in", "[", "'train'", ",", "'val'", ",", "'test'", "]", "}", "\n", "print", "(", "dataloaders", ")", "\n", "# with open('ISIC_dataset.pkl', 'wb') as handle:", "\n", "#     pickle.dump(dataloaders, handle, protocol=pickle.HIGHEST_PROTOCOL)", "\n", "\n", "# with open('ISIC_dataset.pkl', 'rb') as handle:", "\n", "#     dataloaders = pickle.load(handle)", "\n", "phase", "=", "'train'", "\n", "train_dict", "=", "{", "m", ":", "[", "]", "for", "m", "in", "[", "'input'", ",", "'label'", "]", "}", "\n", "for", "i", ",", "(", "inputs", ",", "labels", ")", "in", "enumerate", "(", "dataloaders", "[", "phase", "]", ")", ":", "\n", "# inputs = inputs.to(device)", "\n", "# labels = labels.to(device)", "\n", "                ", "train_dict", "=", "{", "'input'", ":", "inputs", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "transpose", "(", "(", "0", ",", "3", ",", "2", ",", "1", ")", ")", ",", "'label'", ":", "labels", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "}", "\n", "# train_dict['input'].append(np.asarray(inputs.cpu().numpy()))", "\n", "# train_dict['label'].append(np.asarray(labels.cpu().numpy()))", "\n", "# train_dict_tmp = {'input': inputs.cpu().numpy(), 'label': labels.cpu().numpy()}", "\n", "# train_dict['input'] = [train_dict['input'], train_dict_tmp['input']]", "\n", "# train_dict['label'] = [train_dict['label'], train_dict_tmp['label']]", "\n", "", "phase", "=", "'test'", "\n", "test_dict", "=", "{", "k", ":", "[", "]", "for", "k", "in", "[", "'input'", ",", "'label'", "]", "}", "\n", "for", "i", ",", "(", "inputs", ",", "labels", ")", "in", "enumerate", "(", "dataloaders", "[", "phase", "]", ")", ":", "\n", "# inputs = inputs.to(device)", "\n", "# labels = labels.to(device)", "\n", "                ", "test_dict", "=", "{", "'input'", ":", "inputs", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "transpose", "(", "(", "0", ",", "3", ",", "2", ",", "1", ")", ")", ",", "'label'", ":", "labels", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "}", "\n", "# test_dict['input'].append(np.asarray(inputs.cpu().numpy()))", "\n", "# test_dict['label'].append(np.asarray(labels.cpu().numpy()))", "\n", "# test_dict_tmp = {'input': inputs.cpu().numpy(), 'label': labels.cpu().numpy()}", "\n", "# test_dict['input'] = [test_dict['input'], test_dict_tmp['input']]", "\n", "# test_dict['label'] = [test_dict['label'], test_dict_tmp['label']]", "\n", "\n", "", "self", ".", "dataset", "=", "{", "'train'", ":", "train_dict", ",", "'test'", ":", "test_dict", "}", "\n", "\n", "", "elif", "self", ".", "datasource", "==", "'cifar-10'", ":", "\n", "            ", "print", "(", "cifar", ".", "read_data", "(", "os", ".", "path", ".", "join", "(", "self", ".", "path_data", ",", "'cifar-10-batches-py'", ")", ")", ")", "\n", "self", ".", "num_classes", "=", "10", "\n", "self", ".", "dataset", "=", "cifar", ".", "read_data", "(", "os", ".", "path", ".", "join", "(", "self", ".", "path_data", ",", "'cifar-10-batches-py'", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "self", ".", "split_dataset", "(", "'train'", ",", "'val'", ",", "int", "(", "self", ".", "dataset", "[", "'train'", "]", "[", "'input'", "]", ".", "shape", "[", "0", "]", "*", "0.1", ")", ",", "\n", "self", ".", "rand", ")", "\n", "self", ".", "num_example", "=", "{", "k", ":", "self", ".", "dataset", "[", "k", "]", "[", "'input'", "]", ".", "shape", "[", "0", "]", "for", "k", "in", "self", ".", "dataset", ".", "keys", "(", ")", "}", "\n", "print", "(", "\"self.num_example\"", ",", "self", ".", "num_example", ")", "\n", "self", ".", "example_generator", "=", "{", "\n", "'train'", ":", "self", ".", "iterate_example", "(", "'train'", ")", ",", "\n", "'val'", ":", "self", ".", "iterate_example", "(", "'val'", ")", ",", "\n", "'test'", ":", "self", ".", "iterate_example", "(", "'test'", ",", "shuffle", "=", "False", ")", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.MobileNet.dataset.Dataset.iterate_example": [[114, 125], ["itertools.count", "list", "range", "dataset.Dataset.rand.shuffle"], "methods", ["None"], ["", "def", "iterate_example", "(", "self", ",", "mode", ",", "shuffle", "=", "True", ")", ":", "\n", "        ", "epochs", "=", "itertools", ".", "count", "(", ")", "\n", "for", "i", "in", "epochs", ":", "\n", "            ", "example_ids", "=", "list", "(", "range", "(", "self", ".", "num_example", "[", "mode", "]", ")", ")", "\n", "if", "shuffle", ":", "\n", "                ", "self", ".", "rand", ".", "shuffle", "(", "example_ids", ")", "\n", "", "for", "example_id", "in", "example_ids", ":", "\n", "                ", "yield", "{", "\n", "'input'", ":", "self", ".", "dataset", "[", "mode", "]", "[", "'input'", "]", "[", "example_id", "]", ",", "\n", "'label'", ":", "self", ".", "dataset", "[", "mode", "]", "[", "'label'", "]", "[", "example_id", "]", ",", "\n", "'id'", ":", "example_id", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.MobileNet.dataset.Dataset.get_next_batch": [[127, 138], ["range", "next", "inputs.append", "labels.append", "ids.append", "numpy.asarray", "numpy.asarray", "numpy.asarray"], "methods", ["None"], ["", "", "", "def", "get_next_batch", "(", "self", ",", "mode", ",", "batch_size", ")", ":", "\n", "        ", "inputs", ",", "labels", ",", "ids", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "example", "=", "next", "(", "self", ".", "example_generator", "[", "mode", "]", ")", "\n", "inputs", ".", "append", "(", "example", "[", "'input'", "]", ")", "\n", "labels", ".", "append", "(", "example", "[", "'label'", "]", ")", "\n", "ids", ".", "append", "(", "example", "[", "'id'", "]", ")", "\n", "", "return", "{", "\n", "'input'", ":", "np", ".", "asarray", "(", "inputs", ")", ",", "\n", "'label'", ":", "np", ".", "asarray", "(", "labels", ")", ",", "\n", "'id'", ":", "np", ".", "asarray", "(", "ids", ")", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.MobileNet.dataset.Dataset.generate_example_epoch": [[140, 147], ["range"], "methods", ["None"], ["", "def", "generate_example_epoch", "(", "self", ",", "mode", ")", ":", "\n", "        ", "example_ids", "=", "range", "(", "self", ".", "num_example", "[", "mode", "]", ")", "\n", "for", "example_id", "in", "example_ids", ":", "\n", "            ", "yield", "{", "\n", "'input'", ":", "self", ".", "dataset", "[", "mode", "]", "[", "'input'", "]", "[", "example_id", "]", ",", "\n", "'label'", ":", "self", ".", "dataset", "[", "mode", "]", "[", "'label'", "]", "[", "example_id", "]", ",", "\n", "'id'", ":", "example_id", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.MobileNet.dataset.Dataset.split_dataset": [[149, 157], ["list", "rand.shuffle", "range"], "methods", ["None"], ["", "", "def", "split_dataset", "(", "self", ",", "source", ",", "target", ",", "number", ",", "rand", ")", ":", "\n", "        ", "keys", "=", "[", "'input'", ",", "'label'", "]", "\n", "indices", "=", "list", "(", "range", "(", "self", ".", "dataset", "[", "source", "]", "[", "'input'", "]", ".", "shape", "[", "0", "]", ")", ")", "\n", "rand", ".", "shuffle", "(", "indices", ")", "\n", "ind_target", "=", "indices", "[", ":", "number", "]", "\n", "ind_remain", "=", "indices", "[", "number", ":", "]", "\n", "self", ".", "dataset", "[", "target", "]", "=", "{", "k", ":", "self", ".", "dataset", "[", "source", "]", "[", "k", "]", "[", "ind_target", "]", "for", "k", "in", "keys", "}", "\n", "self", ".", "dataset", "[", "source", "]", "=", "{", "k", ":", "self", ".", "dataset", "[", "source", "]", "[", "k", "]", "[", "ind_remain", "]", "for", "k", "in", "keys", "}", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.MobileNet.mobilenet_v1._fixed_padding": [[144, 168], ["tensorflow.pad"], "function", ["None"], ["def", "_fixed_padding", "(", "inputs", ",", "kernel_size", ",", "rate", "=", "1", ")", ":", "\n", "  ", "\"\"\"Pads the input along the spatial dimensions independently of input size.\n\n  Pads the input such that if it was used in a convolution with 'VALID' padding,\n  the output would have the same dimensions as if the unpadded input was used\n  in a convolution with 'SAME' padding.\n\n  Args:\n    inputs: A tensor of size [batch, height_in, width_in, channels].\n    kernel_size: The kernel to be used in the conv2d or max_pool2d operation.\n    rate: An integer, rate for atrous convolution.\n\n  Returns:\n    output: A tensor of size [batch, height_out, width_out, channels] with the\n      input, either intact (if kernel_size == 1) or padded (if kernel_size > 1).\n  \"\"\"", "\n", "kernel_size_effective", "=", "[", "kernel_size", "[", "0", "]", "+", "(", "kernel_size", "[", "0", "]", "-", "1", ")", "*", "(", "rate", "-", "1", ")", ",", "\n", "kernel_size", "[", "0", "]", "+", "(", "kernel_size", "[", "0", "]", "-", "1", ")", "*", "(", "rate", "-", "1", ")", "]", "\n", "pad_total", "=", "[", "kernel_size_effective", "[", "0", "]", "-", "1", ",", "kernel_size_effective", "[", "1", "]", "-", "1", "]", "\n", "pad_beg", "=", "[", "pad_total", "[", "0", "]", "//", "2", ",", "pad_total", "[", "1", "]", "//", "2", "]", "\n", "pad_end", "=", "[", "pad_total", "[", "0", "]", "-", "pad_beg", "[", "0", "]", ",", "pad_total", "[", "1", "]", "-", "pad_beg", "[", "1", "]", "]", "\n", "padded_inputs", "=", "tf", ".", "pad", "(", "inputs", ",", "[", "[", "0", ",", "0", "]", ",", "[", "pad_beg", "[", "0", "]", ",", "pad_end", "[", "0", "]", "]", ",", "\n", "[", "pad_beg", "[", "1", "]", ",", "pad_end", "[", "1", "]", "]", ",", "[", "0", ",", "0", "]", "]", ")", "\n", "return", "padded_inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.MobileNet.mobilenet_v1.mobilenet_v1_base": [[170, 303], ["ValueError", "max", "ValueError", "ValueError", "tensorflow.variable_scope", "int", "tensorflow.contrib.slim.arg_scope", "enumerate", "isinstance", "tensorflow.contrib.slim.conv2d", "isinstance", "mobilenet_v1._fixed_padding", "depth", "tensorflow.contrib.slim.separable_conv2d", "tensorflow.contrib.slim.conv2d", "ValueError", "mobilenet_v1._fixed_padding", "depth"], "function", ["home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.MobileNet.mobilenet_v1._fixed_padding", "home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.MobileNet.mobilenet_v1._fixed_padding"], ["", "def", "mobilenet_v1_base", "(", "inputs", ",", "\n", "final_endpoint", "=", "'Conv2d_13_pointwise'", ",", "\n", "min_depth", "=", "8", ",", "\n", "depth_multiplier", "=", "1.0", ",", "\n", "conv_defs", "=", "None", ",", "\n", "output_stride", "=", "None", ",", "\n", "use_explicit_padding", "=", "False", ",", "\n", "scope", "=", "None", ")", ":", "\n", "  ", "\"\"\"Mobilenet v1.\n\n  Constructs a Mobilenet v1 network from inputs to the given final endpoint.\n\n  Args:\n    inputs: a tensor of shape [batch_size, height, width, channels].\n    final_endpoint: specifies the endpoint to construct the network up to. It\n      can be one of ['Conv2d_0', 'Conv2d_1_pointwise', 'Conv2d_2_pointwise',\n      'Conv2d_3_pointwise', 'Conv2d_4_pointwise', 'Conv2d_5'_pointwise,\n      'Conv2d_6_pointwise', 'Conv2d_7_pointwise', 'Conv2d_8_pointwise',\n      'Conv2d_9_pointwise', 'Conv2d_10_pointwise', 'Conv2d_11_pointwise',\n      'Conv2d_12_pointwise', 'Conv2d_13_pointwise'].\n    min_depth: Minimum depth value (number of channels) for all convolution ops.\n      Enforced when depth_multiplier < 1, and not an active constraint when\n      depth_multiplier >= 1.\n    depth_multiplier: Float multiplier for the depth (number of channels)\n      for all convolution ops. The value must be greater than zero. Typical\n      usage will be to set this value in (0, 1) to reduce the number of\n      parameters or computation cost of the model.\n    conv_defs: A list of ConvDef namedtuples specifying the net architecture.\n    output_stride: An integer that specifies the requested ratio of input to\n      output spatial resolution. If not None, then we invoke atrous convolution\n      if necessary to prevent the network from reducing the spatial resolution\n      of the activation maps. Allowed values are 8 (accurate fully convolutional\n      mode), 16 (fast fully convolutional mode), 32 (classification mode).\n    use_explicit_padding: Use 'VALID' padding for convolutions, but prepad\n      inputs so that the output dimensions are the same as if 'SAME' padding\n      were used.\n    scope: Optional variable_scope.\n\n  Returns:\n    tensor_out: output tensor corresponding to the final_endpoint.\n    end_points: a set of activations for external use, for example summaries or\n                losses.\n\n  Raises:\n    ValueError: if final_endpoint is not set to one of the predefined values,\n                or depth_multiplier <= 0, or the target output_stride is not\n                allowed.\n  \"\"\"", "\n", "depth", "=", "lambda", "d", ":", "max", "(", "int", "(", "d", "*", "depth_multiplier", ")", ",", "min_depth", ")", "\n", "end_points", "=", "{", "}", "\n", "\n", "# Used to find thinned depths for each layer.", "\n", "if", "depth_multiplier", "<=", "0", ":", "\n", "    ", "raise", "ValueError", "(", "'depth_multiplier is not greater than zero.'", ")", "\n", "\n", "", "if", "conv_defs", "is", "None", ":", "\n", "    ", "conv_defs", "=", "MOBILENETV1_CONV_DEFS", "\n", "\n", "", "if", "output_stride", "is", "not", "None", "and", "output_stride", "not", "in", "[", "8", ",", "16", ",", "32", "]", ":", "\n", "    ", "raise", "ValueError", "(", "'Only allowed output_stride values are 8, 16, 32.'", ")", "\n", "\n", "", "padding", "=", "'SAME'", "\n", "if", "use_explicit_padding", ":", "\n", "    ", "padding", "=", "'VALID'", "\n", "", "with", "tf", ".", "variable_scope", "(", "scope", ",", "'MobilenetV1'", ",", "[", "inputs", "]", ")", ":", "\n", "    ", "with", "slim", ".", "arg_scope", "(", "[", "slim", ".", "conv2d", ",", "slim", ".", "separable_conv2d", "]", ",", "padding", "=", "padding", ")", ":", "\n", "# The current_stride variable keeps track of the output stride of the", "\n", "# activations, i.e., the running product of convolution strides up to the", "\n", "# current network layer. This allows us to invoke atrous convolution", "\n", "# whenever applying the next convolution would result in the activations", "\n", "# having output stride larger than the target output_stride.", "\n", "      ", "current_stride", "=", "1", "\n", "\n", "# The atrous convolution rate parameter.", "\n", "rate", "=", "1", "\n", "\n", "net", "=", "inputs", "\n", "for", "i", ",", "conv_def", "in", "enumerate", "(", "conv_defs", ")", ":", "\n", "        ", "end_point_base", "=", "'Conv2d_%d'", "%", "i", "\n", "\n", "if", "output_stride", "is", "not", "None", "and", "current_stride", "==", "output_stride", ":", "\n", "# If we have reached the target output_stride, then we need to employ", "\n", "# atrous convolution with stride=1 and multiply the atrous rate by the", "\n", "# current unit's stride for use in subsequent layers.", "\n", "          ", "layer_stride", "=", "1", "\n", "layer_rate", "=", "rate", "\n", "rate", "*=", "conv_def", ".", "stride", "\n", "", "else", ":", "\n", "          ", "layer_stride", "=", "conv_def", ".", "stride", "\n", "layer_rate", "=", "1", "\n", "current_stride", "*=", "conv_def", ".", "stride", "\n", "\n", "", "if", "isinstance", "(", "conv_def", ",", "Conv", ")", ":", "\n", "          ", "end_point", "=", "end_point_base", "\n", "if", "use_explicit_padding", ":", "\n", "            ", "net", "=", "_fixed_padding", "(", "net", ",", "conv_def", ".", "kernel", ")", "\n", "", "net", "=", "slim", ".", "conv2d", "(", "net", ",", "depth", "(", "conv_def", ".", "depth", ")", ",", "conv_def", ".", "kernel", ",", "\n", "stride", "=", "conv_def", ".", "stride", ",", "\n", "scope", "=", "end_point", ")", "\n", "end_points", "[", "end_point", "]", "=", "net", "\n", "if", "end_point", "==", "final_endpoint", ":", "\n", "            ", "return", "net", ",", "end_points", "\n", "\n", "", "", "elif", "isinstance", "(", "conv_def", ",", "DepthSepConv", ")", ":", "\n", "          ", "end_point", "=", "end_point_base", "+", "'_depthwise'", "\n", "\n", "# By passing filters=None", "\n", "# separable_conv2d produces only a depthwise convolution layer", "\n", "if", "use_explicit_padding", ":", "\n", "            ", "net", "=", "_fixed_padding", "(", "net", ",", "conv_def", ".", "kernel", ",", "layer_rate", ")", "\n", "", "net", "=", "slim", ".", "separable_conv2d", "(", "net", ",", "None", ",", "conv_def", ".", "kernel", ",", "\n", "depth_multiplier", "=", "1", ",", "\n", "stride", "=", "layer_stride", ",", "\n", "rate", "=", "layer_rate", ",", "\n", "scope", "=", "end_point", ")", "\n", "\n", "end_points", "[", "end_point", "]", "=", "net", "\n", "if", "end_point", "==", "final_endpoint", ":", "\n", "            ", "return", "net", ",", "end_points", "\n", "\n", "", "end_point", "=", "end_point_base", "+", "'_pointwise'", "\n", "\n", "net", "=", "slim", ".", "conv2d", "(", "net", ",", "depth", "(", "conv_def", ".", "depth", ")", ",", "[", "1", ",", "1", "]", ",", "\n", "stride", "=", "1", ",", "\n", "scope", "=", "end_point", ")", "\n", "\n", "end_points", "[", "end_point", "]", "=", "net", "\n", "if", "end_point", "==", "final_endpoint", ":", "\n", "            ", "return", "net", ",", "end_points", "\n", "", "", "else", ":", "\n", "          ", "raise", "ValueError", "(", "'Unknown convolution type %s for layer %d'", "\n", "%", "(", "conv_def", ".", "ltype", ",", "i", ")", ")", "\n", "", "", "", "", "raise", "ValueError", "(", "'Unknown final endpoint %s'", "%", "final_endpoint", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.MobileNet.mobilenet_v1.mobilenet_v1": [[305, 390], ["inputs.get_shape().as_list", "len", "ValueError", "tensorflow.variable_scope", "inputs.get_shape", "tensorflow.contrib.slim.arg_scope", "mobilenet_v1.mobilenet_v1_base", "len", "tensorflow.variable_scope", "tensorflow.contrib.slim.dropout", "tensorflow.contrib.slim.conv2d", "prediction_fn", "tensorflow.reduce_mean", "mobilenet_v1._reduced_kernel_size_for_small_input", "tensorflow.contrib.slim.avg_pool2d", "tensorflow.squeeze"], "function", ["home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.MobileNet.mobilenet_v1.mobilenet_v1_base", "home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.MobileNet.mobilenet_v1._reduced_kernel_size_for_small_input"], ["", "def", "mobilenet_v1", "(", "inputs", ",", "\n", "num_classes", "=", "1000", ",", "\n", "dropout_keep_prob", "=", "0.999", ",", "\n", "is_training", "=", "True", ",", "\n", "min_depth", "=", "8", ",", "\n", "depth_multiplier", "=", "1.0", ",", "\n", "conv_defs", "=", "None", ",", "\n", "prediction_fn", "=", "contrib_layers", ".", "softmax", ",", "\n", "spatial_squeeze", "=", "True", ",", "\n", "reuse", "=", "None", ",", "\n", "scope", "=", "'MobilenetV1'", ",", "\n", "global_pool", "=", "False", ")", ":", "\n", "  ", "\"\"\"Mobilenet v1 model for classification.\n\n  Args:\n    inputs: a tensor of shape [batch_size, height, width, channels].\n    num_classes: number of predicted classes. If 0 or None, the logits layer\n      is omitted and the input features to the logits layer (before dropout)\n      are returned instead.\n    dropout_keep_prob: the percentage of activation values that are retained.\n    is_training: whether is training or not.\n    min_depth: Minimum depth value (number of channels) for all convolution ops.\n      Enforced when depth_multiplier < 1, and not an active constraint when\n      depth_multiplier >= 1.\n    depth_multiplier: Float multiplier for the depth (number of channels)\n      for all convolution ops. The value must be greater than zero. Typical\n      usage will be to set this value in (0, 1) to reduce the number of\n      parameters or computation cost of the model.\n    conv_defs: A list of ConvDef namedtuples specifying the net architecture.\n    prediction_fn: a function to get predictions out of logits.\n    spatial_squeeze: if True, logits is of shape is [B, C], if false logits is\n        of shape [B, 1, 1, C], where B is batch_size and C is number of classes.\n    reuse: whether or not the network and its variables should be reused. To be\n      able to reuse 'scope' must be given.\n    scope: Optional variable_scope.\n    global_pool: Optional boolean flag to control the avgpooling before the\n      logits layer. If false or unset, pooling is done with a fixed window\n      that reduces default-sized inputs to 1x1, while larger inputs lead to\n      larger outputs. If true, any input size is pooled down to 1x1.\n\n  Returns:\n    net: a 2D Tensor with the logits (pre-softmax activations) if num_classes\n      is a non-zero integer, or the non-dropped-out input to the logits layer\n      if num_classes is 0 or None.\n    end_points: a dictionary from components of the network to the corresponding\n      activation.\n\n  Raises:\n    ValueError: Input rank is invalid.\n  \"\"\"", "\n", "input_shape", "=", "inputs", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "if", "len", "(", "input_shape", ")", "!=", "4", ":", "\n", "    ", "raise", "ValueError", "(", "'Invalid input tensor rank, expected 4, was: %d'", "%", "\n", "len", "(", "input_shape", ")", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "scope", ",", "'MobilenetV1'", ",", "[", "inputs", "]", ",", "reuse", "=", "reuse", ")", "as", "scope", ":", "\n", "    ", "with", "slim", ".", "arg_scope", "(", "[", "slim", ".", "batch_norm", ",", "slim", ".", "dropout", "]", ",", "\n", "is_training", "=", "is_training", ")", ":", "\n", "      ", "net", ",", "end_points", "=", "mobilenet_v1_base", "(", "inputs", ",", "scope", "=", "scope", ",", "\n", "min_depth", "=", "min_depth", ",", "\n", "depth_multiplier", "=", "depth_multiplier", ",", "\n", "conv_defs", "=", "conv_defs", ")", "\n", "with", "tf", ".", "variable_scope", "(", "'Logits'", ")", ":", "\n", "        ", "if", "global_pool", ":", "\n", "# Global average pooling.", "\n", "          ", "net", "=", "tf", ".", "reduce_mean", "(", "net", ",", "[", "1", ",", "2", "]", ",", "keep_dims", "=", "True", ",", "name", "=", "'global_pool'", ")", "\n", "end_points", "[", "'global_pool'", "]", "=", "net", "\n", "", "else", ":", "\n", "# Pooling with a fixed kernel size.", "\n", "          ", "kernel_size", "=", "_reduced_kernel_size_for_small_input", "(", "net", ",", "[", "7", ",", "7", "]", ")", "\n", "net", "=", "slim", ".", "avg_pool2d", "(", "net", ",", "kernel_size", ",", "padding", "=", "'VALID'", ",", "\n", "scope", "=", "'AvgPool_1a'", ")", "\n", "end_points", "[", "'AvgPool_1a'", "]", "=", "net", "\n", "", "if", "not", "num_classes", ":", "\n", "          ", "return", "net", ",", "end_points", "\n", "# 1 x 1 x 1024", "\n", "", "net", "=", "slim", ".", "dropout", "(", "net", ",", "keep_prob", "=", "dropout_keep_prob", ",", "scope", "=", "'Dropout_1b'", ")", "\n", "logits", "=", "slim", ".", "conv2d", "(", "net", ",", "num_classes", ",", "[", "1", ",", "1", "]", ",", "activation_fn", "=", "None", ",", "\n", "normalizer_fn", "=", "None", ",", "scope", "=", "'Conv2d_1c_1x1'", ")", "\n", "if", "spatial_squeeze", ":", "\n", "          ", "logits", "=", "tf", ".", "squeeze", "(", "logits", ",", "[", "1", ",", "2", "]", ",", "name", "=", "'SpatialSqueeze'", ")", "\n", "", "", "end_points", "[", "'Logits'", "]", "=", "logits", "\n", "if", "prediction_fn", ":", "\n", "        ", "end_points", "[", "'Predictions'", "]", "=", "prediction_fn", "(", "logits", ",", "scope", "=", "'Predictions'", ")", "\n", "", "", "", "return", "logits", ",", "end_points", "\n", "\n"]], "home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.MobileNet.mobilenet_v1.wrapped_partial": [[394, 398], ["functools.partial", "functools.update_wrapper", "mobilenet_v1.mobilenet_v1", "mobilenet_v1.mobilenet_v1", "mobilenet_v1.mobilenet_v1"], "function", ["home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.MobileNet.mobilenet_v1.mobilenet_v1", "home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.MobileNet.mobilenet_v1.mobilenet_v1", "home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.MobileNet.mobilenet_v1.mobilenet_v1"], ["def", "wrapped_partial", "(", "func", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "  ", "partial_func", "=", "functools", ".", "partial", "(", "func", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "functools", ".", "update_wrapper", "(", "partial_func", ",", "func", ")", "\n", "return", "partial_func", "\n", "\n"]], "home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.MobileNet.mobilenet_v1._reduced_kernel_size_for_small_input": [[405, 425], ["input_tensor.get_shape().as_list", "input_tensor.get_shape", "min", "min"], "function", ["None"], ["def", "_reduced_kernel_size_for_small_input", "(", "input_tensor", ",", "kernel_size", ")", ":", "\n", "  ", "\"\"\"Define kernel size which is automatically reduced for small input.\n\n  If the shape of the input images is unknown at graph construction time this\n  function assumes that the input images are large enough.\n\n  Args:\n    input_tensor: input tensor of size [batch_size, height, width, channels].\n    kernel_size: desired kernel size of length 2: [kernel_height, kernel_width]\n\n  Returns:\n    a tensor with the kernel size.\n  \"\"\"", "\n", "shape", "=", "input_tensor", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "if", "shape", "[", "1", "]", "is", "None", "or", "shape", "[", "2", "]", "is", "None", ":", "\n", "    ", "kernel_size_out", "=", "kernel_size", "\n", "", "else", ":", "\n", "    ", "kernel_size_out", "=", "[", "min", "(", "shape", "[", "1", "]", ",", "kernel_size", "[", "0", "]", ")", ",", "\n", "min", "(", "shape", "[", "2", "]", ",", "kernel_size", "[", "1", "]", ")", "]", "\n", "", "return", "kernel_size_out", "\n", "\n"]], "home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.MobileNet.mobilenet_v1.mobilenet_v1_arg_scope": [[427, 479], ["tensorflow.truncated_normal_initializer", "tensorflow.contrib.layers.l2_regularizer", "tensorflow.contrib.slim.arg_scope", "tensorflow.contrib.slim.arg_scope", "tensorflow.contrib.slim.arg_scope", "tensorflow.contrib.slim.arg_scope"], "function", ["None"], ["", "def", "mobilenet_v1_arg_scope", "(", "\n", "is_training", "=", "True", ",", "\n", "weight_decay", "=", "0.00004", ",", "\n", "stddev", "=", "0.09", ",", "\n", "regularize_depthwise", "=", "False", ",", "\n", "batch_norm_decay", "=", "0.9997", ",", "\n", "batch_norm_epsilon", "=", "0.001", ",", "\n", "batch_norm_updates_collections", "=", "tf", ".", "GraphKeys", ".", "UPDATE_OPS", ",", "\n", "normalizer_fn", "=", "slim", ".", "batch_norm", ")", ":", "\n", "  ", "\"\"\"Defines the default MobilenetV1 arg scope.\n\n  Args:\n    is_training: Whether or not we're training the model. If this is set to\n      None, the parameter is not added to the batch_norm arg_scope.\n    weight_decay: The weight decay to use for regularizing the model.\n    stddev: The standard deviation of the trunctated normal weight initializer.\n    regularize_depthwise: Whether or not apply regularization on depthwise.\n    batch_norm_decay: Decay for batch norm moving average.\n    batch_norm_epsilon: Small float added to variance to avoid dividing by zero\n      in batch norm.\n    batch_norm_updates_collections: Collection for the update ops for\n      batch norm.\n    normalizer_fn: Normalization function to apply after convolution.\n\n  Returns:\n    An `arg_scope` to use for the mobilenet v1 model.\n  \"\"\"", "\n", "batch_norm_params", "=", "{", "\n", "'center'", ":", "True", ",", "\n", "'scale'", ":", "True", ",", "\n", "'decay'", ":", "batch_norm_decay", ",", "\n", "'epsilon'", ":", "batch_norm_epsilon", ",", "\n", "'updates_collections'", ":", "batch_norm_updates_collections", ",", "\n", "}", "\n", "if", "is_training", "is", "not", "None", ":", "\n", "    ", "batch_norm_params", "[", "'is_training'", "]", "=", "is_training", "\n", "\n", "# Set weight_decay for weights in Conv and DepthSepConv layers.", "\n", "", "weights_init", "=", "tf", ".", "truncated_normal_initializer", "(", "stddev", "=", "stddev", ")", "\n", "regularizer", "=", "contrib_layers", ".", "l2_regularizer", "(", "weight_decay", ")", "\n", "if", "regularize_depthwise", ":", "\n", "    ", "depthwise_regularizer", "=", "regularizer", "\n", "", "else", ":", "\n", "    ", "depthwise_regularizer", "=", "None", "\n", "", "with", "slim", ".", "arg_scope", "(", "[", "slim", ".", "conv2d", ",", "slim", ".", "separable_conv2d", "]", ",", "\n", "weights_initializer", "=", "weights_init", ",", "\n", "activation_fn", "=", "tf", ".", "nn", ".", "relu6", ",", "normalizer_fn", "=", "normalizer_fn", ")", ":", "\n", "    ", "with", "slim", ".", "arg_scope", "(", "[", "slim", ".", "batch_norm", "]", ",", "**", "batch_norm_params", ")", ":", "\n", "      ", "with", "slim", ".", "arg_scope", "(", "[", "slim", ".", "conv2d", "]", ",", "weights_regularizer", "=", "regularizer", ")", ":", "\n", "        ", "with", "slim", ".", "arg_scope", "(", "[", "slim", ".", "separable_conv2d", "]", ",", "\n", "weights_regularizer", "=", "depthwise_regularizer", ")", "as", "sc", ":", "\n", "          ", "return", "sc", "\n", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.MobileNet.MobileNet.get_one_hot": [[19, 22], ["res.reshape", "numpy.eye", "numpy.array().reshape", "list", "numpy.array"], "function", ["None"], ["def", "get_one_hot", "(", "targets", ",", "nb_classes", ")", ":", "\n", "    ", "res", "=", "np", ".", "eye", "(", "nb_classes", ")", "[", "np", ".", "array", "(", "targets", ")", ".", "reshape", "(", "-", "1", ")", "]", "\n", "return", "res", ".", "reshape", "(", "list", "(", "targets", ".", "shape", ")", "+", "[", "nb_classes", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.MobileNet.MobileNet.tf_confusion_metrics": [[25, 80], ["tensorflow.argmax", "tensorflow.argmax", "tensorflow.ones_like", "tensorflow.zeros_like", "tensorflow.ones_like", "tensorflow.zeros_like", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "session.run", "tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "tensorflow.logical_and", "tensorflow.logical_and", "tensorflow.logical_and", "tensorflow.logical_and", "tensorflow.equal", "tensorflow.equal", "tensorflow.equal", "tensorflow.equal", "tensorflow.equal", "tensorflow.equal", "tensorflow.equal", "tensorflow.equal"], "function", ["None"], ["", "def", "tf_confusion_metrics", "(", "model", ",", "actual_classes", ",", "session", ",", "feed_dict", ")", ":", "\n", "  ", "predictions", "=", "tf", ".", "argmax", "(", "model", ",", "1", ")", "\n", "actuals", "=", "tf", ".", "argmax", "(", "actual_classes", ",", "1", ")", "\n", "\n", "ones_like_actuals", "=", "tf", ".", "ones_like", "(", "actuals", ")", "\n", "zeros_like_actuals", "=", "tf", ".", "zeros_like", "(", "actuals", ")", "\n", "ones_like_predictions", "=", "tf", ".", "ones_like", "(", "predictions", ")", "\n", "zeros_like_predictions", "=", "tf", ".", "zeros_like", "(", "predictions", ")", "\n", "\n", "tp_op", "=", "tf", ".", "reduce_sum", "(", "\n", "tf", ".", "cast", "(", "\n", "tf", ".", "logical_and", "(", "\n", "tf", ".", "equal", "(", "actuals", ",", "ones_like_actuals", ")", ",", "\n", "tf", ".", "equal", "(", "predictions", ",", "ones_like_predictions", ")", "\n", ")", ",", "\n", "\"float\"", "\n", ")", "\n", ")", "\n", "\n", "tn_op", "=", "tf", ".", "reduce_sum", "(", "\n", "tf", ".", "cast", "(", "\n", "tf", ".", "logical_and", "(", "\n", "tf", ".", "equal", "(", "actuals", ",", "zeros_like_actuals", ")", ",", "\n", "tf", ".", "equal", "(", "predictions", ",", "zeros_like_predictions", ")", "\n", ")", ",", "\n", "\"float\"", "\n", ")", "\n", ")", "\n", "\n", "fp_op", "=", "tf", ".", "reduce_sum", "(", "\n", "tf", ".", "cast", "(", "\n", "tf", ".", "logical_and", "(", "\n", "tf", ".", "equal", "(", "actuals", ",", "zeros_like_actuals", ")", ",", "\n", "tf", ".", "equal", "(", "predictions", ",", "ones_like_predictions", ")", "\n", ")", ",", "\n", "\"float\"", "\n", ")", "\n", ")", "\n", "\n", "fn_op", "=", "tf", ".", "reduce_sum", "(", "\n", "tf", ".", "cast", "(", "\n", "tf", ".", "logical_and", "(", "\n", "tf", ".", "equal", "(", "actuals", ",", "ones_like_actuals", ")", ",", "\n", "tf", ".", "equal", "(", "predictions", ",", "zeros_like_predictions", ")", "\n", ")", ",", "\n", "\"float\"", "\n", ")", "\n", ")", "\n", "\n", "tp", ",", "tn", ",", "fp", ",", "fn", "=", "session", ".", "run", "(", "\n", "[", "tp_op", ",", "tn_op", ",", "fp_op", ",", "fn_op", "]", ",", "\n", "feed_dict", "\n", ")", "\n", "return", "tp", ",", "tn", ",", "fp", ",", "fn", "\n", "\n"]], "home.repos.pwc.inspect_result.rahimentezari_Sensys-ml2020.MobileNet.MobileNet.parse_arguments": [[83, 115], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "function", ["None"], ["", "def", "parse_arguments", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "# Data options", "\n", "parser", ".", "add_argument", "(", "'--datasource'", ",", "type", "=", "str", ",", "default", "=", "'isic'", ",", "help", "=", "'dataset to use'", ")", "\n", "parser", ".", "add_argument", "(", "'--path_data'", ",", "type", "=", "str", ",", "default", "=", "'./data'", ",", "help", "=", "'location to dataset'", ")", "\n", "parser", ".", "add_argument", "(", "'--aug_kinds'", ",", "nargs", "=", "'+'", ",", "type", "=", "str", ",", "default", "=", "[", "]", ",", "help", "=", "'augmentations to perform'", ")", "\n", "# Model options", "\n", "parser", ".", "add_argument", "(", "'--arch'", ",", "type", "=", "str", ",", "default", "=", "'lenet5'", ",", "help", "=", "'network architecture to use'", ")", "\n", "parser", ".", "add_argument", "(", "'--target_sparsity'", ",", "type", "=", "float", ",", "default", "=", "0.9", ",", "help", "=", "'level of sparsity to achieve'", ")", "\n", "# Train options", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "help", "=", "'number of examples per mini-batch'", ")", "\n", "parser", ".", "add_argument", "(", "'--train_iterations'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'number of training iterations'", ")", "\n", "parser", ".", "add_argument", "(", "'--optimizer'", ",", "type", "=", "str", ",", "default", "=", "'sgd'", ",", "help", "=", "'optimizer of choice'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_decay_type'", ",", "type", "=", "str", ",", "default", "=", "'constant'", ",", "help", "=", "'learning rate decay type'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "1e-1", ",", "help", "=", "'initial learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--decay_boundaries'", ",", "nargs", "=", "'+'", ",", "type", "=", "int", ",", "default", "=", "[", "]", ",", "help", "=", "'boundaries for piecewise_constant decay'", ")", "\n", "parser", ".", "add_argument", "(", "'--decay_values'", ",", "nargs", "=", "'+'", ",", "type", "=", "float", ",", "default", "=", "[", "]", ",", "help", "=", "'values for piecewise_constant decay'", ")", "\n", "# Initialization", "\n", "parser", ".", "add_argument", "(", "'--initializer_w_bp'", ",", "type", "=", "str", ",", "default", "=", "'vs'", ",", "help", "=", "'initializer for w before pruning'", ")", "\n", "parser", ".", "add_argument", "(", "'--initializer_b_bp'", ",", "type", "=", "str", ",", "default", "=", "'zeros'", ",", "help", "=", "'initializer for b before pruning'", ")", "\n", "parser", ".", "add_argument", "(", "'--initializer_w_ap'", ",", "type", "=", "str", ",", "default", "=", "'vs'", ",", "help", "=", "'initializer for w after pruning'", ")", "\n", "parser", ".", "add_argument", "(", "'--initializer_b_ap'", ",", "type", "=", "str", ",", "default", "=", "'zeros'", ",", "help", "=", "'initializer for b after pruning'", ")", "\n", "# Logging, saving, options", "\n", "parser", ".", "add_argument", "(", "'--logdir'", ",", "type", "=", "str", ",", "default", "=", "'logs'", ",", "help", "=", "'location for summaries and checkpoints'", ")", "\n", "parser", ".", "add_argument", "(", "'--check_interval'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'check interval during training'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_interval'", ",", "type", "=", "int", ",", "default", "=", "1000", ",", "help", "=", "'save interval during training'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "# Add more to args", "\n", "args", ".", "path_summary", "=", "os", ".", "path", ".", "join", "(", "args", ".", "logdir", ",", "'summary'", ")", "\n", "args", ".", "path_model", "=", "os", ".", "path", ".", "join", "(", "args", ".", "logdir", ",", "'model'", ")", "\n", "args", ".", "path_assess", "=", "os", ".", "path", ".", "join", "(", "args", ".", "logdir", ",", "'assess'", ")", "\n", "return", "args", "\n", "\n"]]}