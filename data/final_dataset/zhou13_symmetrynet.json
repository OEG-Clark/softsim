{"home.repos.pwc.inspect_result.zhou13_symmetrynet.None.eval.AA": [[51, 56], ["numpy.searchsorted", "numpy.concatenate", "numpy.concatenate"], "function", ["None"], ["def", "AA", "(", "x", ",", "y", ",", "threshold", ")", ":", "\n", "    ", "index", "=", "np", ".", "searchsorted", "(", "x", ",", "threshold", ")", "\n", "x", "=", "np", ".", "concatenate", "(", "[", "x", "[", ":", "index", "]", ",", "[", "threshold", "]", "]", ")", "\n", "y", "=", "np", ".", "concatenate", "(", "[", "y", "[", ":", "index", "]", ",", "[", "threshold", "]", "]", ")", "\n", "return", "(", "(", "x", "[", "1", ":", "]", "-", "x", "[", ":", "-", "1", "]", ")", "*", "y", "[", ":", "-", "1", "]", ")", ".", "sum", "(", ")", "/", "threshold", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.None.eval.main": [[58, 217], ["docopt.docopt", "sym.config.C.update", "sym.config.CI.update", "sym.config.CM.update", "sym.config.CO.update", "pprint.pprint", "random.seed", "numpy.random.seed", "torch.manual_seed", "torch.cuda.is_available", "torch.device", "print", "torch.load", "sym.models.SymmetryNet().to", "sym.utils.MyDataParallel", "sym.utils.MyDataParallel.load_state_dict", "sym.utils.MyDataParallel.eval", "torch.utils.data.DataLoader", "print", "tqdm.tqdm", "enumerate", "numpy.sort", "numpy.sort", "numpy.average", "print", "print", "print", "print", "print", "print", "print", "enumerate", "numpy.savez", "sym.config.C.from_yaml", "torch.cuda.manual_seed", "print", "print", "len", "Dataset", "numpy.array", "range", "abs", "abs", "numpy.logical_and", "np.average.append", "numpy.average", "print", "torch.cuda.device_count", "sym.models.SymmetryNet", "list", "input[].cpu().numpy", "input[].cpu().numpy", "eval.sample_reflection", "numpy.argmax", "ww.append", "abs", "abs", "numpy.abs", "[].tostring().decode", "fname.rstrip.rstrip", "os.makedirs", "os.makedirs", "numpy.savez", "numpy.savez", "numpy.average", "sym.utils.np_eigen_scale_invariant", "sym.utils.np_kitti_error", "numpy.arccos", "numpy.sort", "numpy.sum", "len", "numpy.sum", "len", "numpy.sum", "len", "numpy.sum", "len", "numpy.sum", "len", "numpy.sum", "len", "numpy.sum", "len", "numpy.sum", "len", "numpy.array", "numpy.array", "range", "input[].cpu().numpy", "torch.no_grad", "torch.tensor().float", "sym.utils.MyDataParallel.", "[].cpu().numpy", "[].cpu().numpy", "os.dirname", "min", "numpy.array", "input[].cpu", "input[].cpu", "torch.tensor().float", "[].tostring", "fname[].replace", "numpy.array", "abs", "len", "args[].count", "input[].cpu", "torch.tensor", "[].cpu", "[].cpu", "torch.tensor", "numpy.norm", "input[].cpu().numpy", "numpy.norm", "input[].cpu"], "function", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.update", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.update", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.update", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.update", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.trainer.pprint", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.BoxList.append", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.ConfigBox.list", "home.repos.pwc.inspect_result.zhou13_symmetrynet.None.eval.sample_reflection", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.BoxList.append", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.utils.np_eigen_scale_invariant", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.utils.np_kitti_error", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.ConfigBox.float", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.ConfigBox.float"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "docopt", "(", "__doc__", ")", "\n", "config_file", "=", "args", "[", "\"<yaml-config>\"", "]", "\n", "C", ".", "update", "(", "C", ".", "from_yaml", "(", "filename", "=", "config_file", ")", ")", "\n", "CI", ".", "update", "(", "C", ".", "io", ")", "\n", "CM", ".", "update", "(", "C", ".", "model", ")", "\n", "CO", ".", "update", "(", "C", ".", "optim", ")", "\n", "pprint", ".", "pprint", "(", "C", ",", "indent", "=", "4", ")", "\n", "\n", "random", ".", "seed", "(", "0", ")", "\n", "np", ".", "random", ".", "seed", "(", "0", ")", "\n", "torch", ".", "manual_seed", "(", "0", ")", "\n", "\n", "device_name", "=", "\"cpu\"", "\n", "os", ".", "environ", "[", "\"CUDA_VISIBLE_DEVICES\"", "]", "=", "args", "[", "\"--devices\"", "]", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "device_name", "=", "\"cuda\"", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "0", ")", "\n", "print", "(", "\"Let's use\"", ",", "torch", ".", "cuda", ".", "device_count", "(", ")", ",", "\"GPU(s)!\"", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"CUDA is not available\"", ")", "\n", "", "device", "=", "torch", ".", "device", "(", "device_name", ")", "\n", "\n", "print", "(", "\"Working on\"", ",", "args", "[", "\"<checkpoint>\"", "]", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", "[", "\"<checkpoint>\"", "]", ")", "\n", "model", "=", "sym", ".", "models", ".", "SymmetryNet", "(", ")", ".", "to", "(", "device", ")", "\n", "model", "=", "sym", ".", "utils", ".", "MyDataParallel", "(", "\n", "model", ",", "device_ids", "=", "list", "(", "range", "(", "args", "[", "\"--devices\"", "]", ".", "count", "(", "\",\"", ")", "+", "1", ")", ")", "\n", ")", "\n", "missing", ",", "_", "=", "model", ".", "load_state_dict", "(", "checkpoint", "[", "\"model_state_dict\"", "]", ",", "strict", "=", "True", ")", "\n", "assert", "len", "(", "missing", ")", "==", "0", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "if", "CI", ".", "dataset", "==", "\"ShapeNet\"", ":", "\n", "        ", "Dataset", "=", "ShapeNetDataset", "\n", "", "elif", "CI", ".", "dataset", "==", "\"Pix3D\"", ":", "\n", "        ", "Dataset", "=", "Pix3dDataset", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "split", "=", "args", "[", "\"--split\"", "]", "\n", "# split = \"test_all\"", "\n", "# if \"only_car_plane_chair\" in CI and CI.only_car_plane_chair:", "\n", "#     split = \"test_unseen_all\"", "\n", "# split = \"test-1000\"", "\n", "# if \"only_car_plane_chair\" in CI and CI.only_car_plane_chair:", "\n", "#     split = \"test_unseen-1000\"", "\n", "\n", "loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "Dataset", "(", "C", ".", "io", ".", "datadir", ",", "split", "=", "split", ")", ",", "\n", "batch_size", "=", "1", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "0", ",", "\n", "pin_memory", "=", "True", ",", "\n", ")", "\n", "fpath", "=", "args", "[", "\"--output\"", "]", "\n", "print", "(", "\"save to\"", ",", "fpath", ")", "\n", "\n", "thetas", "=", "[", "np", ".", "pi", "/", "2", "]", "+", "CM", ".", "detection", ".", "theta", "\n", "\n", "err_normal", "=", "[", "]", "\n", "err_depth_avg", "=", "[", "]", "\n", "err_depth_SIL", "=", "[", "]", "\n", "err_depth_AIO", "=", "[", "]", "\n", "w_pd", "=", "[", "]", "\n", "w_gt", "=", "[", "]", "\n", "# D_pd = []", "\n", "# D_gt = []", "\n", "\n", "loader_tqdm", "=", "tqdm", "(", "loader", ")", "\n", "for", "batch_idx", ",", "input", "in", "enumerate", "(", "loader_tqdm", ")", ":", "\n", "        ", "score", "=", "[", "]", "\n", "depth", "=", "[", "]", "\n", "\n", "w0", "=", "input", "[", "\"w0\"", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", "\n", "depth_gt", "=", "input", "[", "\"depth\"", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", "[", "0", "]", "\n", "H", ",", "W", "=", "depth_gt", ".", "shape", "\n", "Rt", "=", "input", "[", "\"RT\"", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", "\n", "w", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", "1", "]", ")", "\n", "ww", "=", "[", "]", "\n", "\n", "# print(input[\"fname\"][0].cpu().numpy().tostring().decode(\"ascii\"))", "\n", "\n", "for", "i", "in", "range", "(", "CM", ".", "detection", ".", "n_level", ")", ":", "\n", "            ", "ws", ",", "S", "=", "sample_reflection", "(", "input", ",", "w", ",", "thetas", "[", "i", "]", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "input", "[", "\"S\"", "]", "=", "torch", ".", "tensor", "(", "S", "[", "None", "]", ")", ".", "float", "(", ")", "\n", "input", "[", "\"w\"", "]", "=", "torch", ".", "tensor", "(", "ws", ")", ".", "float", "(", ")", "[", "None", "]", "\n", "result", "=", "model", "(", "input", ",", "\"test\"", ")", "\n", "", "score", "=", "result", "[", "\"preds\"", "]", "[", "\"score\"", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", ",", ":", ",", "i", "]", "\n", "depth", "=", "result", "[", "\"preds\"", "]", "[", "\"depth\"", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", ",", ":", "]", "\n", "del", "result", "\n", "\n", "# visualize(ws, score, w0)", "\n", "best_w", "=", "np", ".", "argmax", "(", "score", ")", "\n", "w", "=", "ws", "[", "best_w", "]", "\n", "ww", ".", "append", "(", "w", ")", "\n", "\n", "# rescale depth according to the ||w||_2", "\n", "", "depth_pd", "=", "depth", "[", "best_w", "]", "*", "abs", "(", "Rt", "[", "2", "]", "[", "3", "]", ")", "\n", "depth_gt", "=", "depth_gt", "*", "abs", "(", "Rt", "[", "2", "]", "[", "3", "]", ")", "\n", "w", "/=", "abs", "(", "Rt", "[", "2", "]", "[", "3", "]", ")", "\n", "w0", "/=", "abs", "(", "Rt", "[", "2", "]", "[", "3", "]", ")", "\n", "\n", "mask", "=", "np", ".", "logical_and", "(", "depth_gt", ">", "0", ",", "depth_pd", ">", "0", ")", "\n", "diff", "=", "np", ".", "abs", "(", "depth_gt", "-", "depth_pd", ")", "[", "mask", "]", "\n", "\n", "if", "args", "[", "\"--visualize\"", "]", ":", "\n", "            ", "fname", "=", "input", "[", "\"fname\"", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", ".", "tostring", "(", ")", ".", "decode", "(", "\"ascii\"", ")", "\n", "fname", "=", "fname", ".", "rstrip", "(", "\"\\x00\"", ")", "\n", "if", "CI", ".", "dataset", "==", "\"ShapeNet\"", ":", "\n", "                ", "fname", "=", "fname", "[", ":", ":", "-", "1", "]", ".", "replace", "(", "\"/\"", ",", "\"_\"", ",", "1", ")", "[", ":", ":", "-", "1", "]", "\n", "\n", "", "fname_pd", "=", "f\"{args['--visualize']}/{fname}_{args['--suffix']}.npz\"", "\n", "fname_gt", "=", "f\"{args['--visualize']}/{fname}_gt.npz\"", "\n", "os", ".", "makedirs", "(", "osp", ".", "dirname", "(", "fname_pd", ")", ",", "exist_ok", "=", "True", ")", "\n", "np", ".", "savez", "(", "fname_pd", ",", "w", "=", "w", ",", "ww", "=", "np", ".", "array", "(", "ww", ")", ")", "\n", "np", ".", "savez", "(", "fname_gt", ",", "w", "=", "w0", ")", "\n", "# np.savez(fname_pd, depth=depth_pd, w=w)", "\n", "# np.savez(fname_gt, depth=depth_gt, w=w0)", "\n", "\n", "", "err_depth_avg", "+=", "[", "np", ".", "average", "(", "diff", ")", "]", "\n", "err_depth_SIL", "+=", "[", "np_eigen_scale_invariant", "(", "depth_pd", ",", "depth_gt", ",", "mask", ")", "]", "\n", "err_depth_AIO", ".", "append", "(", "np_kitti_error", "(", "depth_gt", ",", "depth_pd", ",", "mask", ")", ")", "\n", "err_normal", "+=", "[", "np", ".", "arccos", "(", "min", "(", "1", ",", "abs", "(", "w", "@", "w0", "/", "LA", ".", "norm", "(", "w0", ")", "/", "LA", ".", "norm", "(", "w", ")", ")", ")", ")", "]", "\n", "w_pd", "+=", "[", "w", "]", "\n", "w_gt", "+=", "[", "w0", "]", "\n", "\n", "", "err_normal", "=", "np", ".", "sort", "(", "np", ".", "array", "(", "err_normal", ")", ")", "/", "np", ".", "pi", "*", "180", "\n", "err_depth_avg", "=", "np", ".", "sort", "(", "err_depth_avg", ")", "\n", "err_depth_SIL", "=", "np", ".", "sort", "(", "err_depth_SIL", ")", "\n", "err_depth_AIO", "=", "np", ".", "average", "(", "err_depth_AIO", ",", "axis", "=", "0", ")", "\n", "\n", "print", "(", "\"avg:\"", ",", "np", ".", "average", "(", "err_normal", ")", ")", "\n", "print", "(", "\"med:\"", ",", "err_normal", "[", "len", "(", "err_normal", ")", "//", "2", "]", ")", "\n", "print", "(", "\"<0d: \"", ",", "np", ".", "sum", "(", "err_normal", "<", "0.5", ")", "/", "len", "(", "err_normal", ")", ")", "\n", "print", "(", "\"<1d: \"", ",", "np", ".", "sum", "(", "err_normal", "<", "1", ")", "/", "len", "(", "err_normal", ")", ")", "\n", "print", "(", "\"<2d: \"", ",", "np", ".", "sum", "(", "err_normal", "<", "2", ")", "/", "len", "(", "err_normal", ")", ")", "\n", "print", "(", "\"<5d: \"", ",", "np", ".", "sum", "(", "err_normal", "<", "5", ")", "/", "len", "(", "err_normal", ")", ")", "\n", "print", "(", "\n", "\"AIO: \"", ",", "\n", "np", ".", "sum", "(", "err_normal", "<", "0.5", ")", "/", "len", "(", "err_normal", ")", ",", "\n", "np", ".", "sum", "(", "err_normal", "<", "1", ")", "/", "len", "(", "err_normal", ")", ",", "\n", "np", ".", "sum", "(", "err_normal", "<", "2", ")", "/", "len", "(", "err_normal", ")", ",", "\n", "np", ".", "sum", "(", "err_normal", "<", "5", ")", "/", "len", "(", "err_normal", ")", ",", "\n", ")", "\n", "\n", "labels", "=", "[", "\"abs_rel\"", ",", "\"sq_rel\"", ",", "\"rmse\"", ",", "\"rmse_log\"", ",", "\"sil\"", ",", "\"a1\"", ",", "\"a2\"", ",", "\"a3\"", "]", "\n", "for", "i", ",", "name", "in", "enumerate", "(", "labels", ")", ":", "\n", "        ", "print", "(", "f\"{name}:\"", ",", "err_depth_AIO", "[", "i", "]", ")", "\n", "\n", "", "np", ".", "savez", "(", "\n", "fpath", ",", "\n", "err_depth_avg", "=", "err_depth_avg", ",", "\n", "err_depth_SIL", "=", "err_depth_SIL", ",", "\n", "err_depth_AIO", "=", "err_depth_AIO", ",", "\n", "err_normal", "=", "err_normal", ",", "\n", "w_pd", "=", "np", ".", "array", "(", "w_pd", ")", ",", "\n", "w_gt", "=", "np", ".", "array", "(", "w_gt", ")", ",", "\n", "# D_pd=np.array(D_pd),", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.None.eval.sample_sphere": [[232, 248], ["eval.sample_sphere.orth", "sym.config.CM.detection.n_theta"], "function", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.misc.find-radius.orth"], ["", "def", "sample_sphere", "(", "v", ",", "alpha", ",", "num_pts", ")", ":", "\n", "    ", "def", "orth", "(", "v", ")", ":", "\n", "        ", "x", ",", "y", ",", "z", "=", "v", "\n", "o", "=", "np", ".", "array", "(", "[", "0.0", ",", "-", "z", ",", "y", "]", "if", "abs", "(", "x", ")", "<", "abs", "(", "y", ")", "else", "[", "-", "z", ",", "0.0", ",", "x", "]", ")", "\n", "o", "/=", "LA", ".", "norm", "(", "o", ")", "\n", "return", "o", "\n", "\n", "", "v1", "=", "orth", "(", "v", ")", "\n", "v2", "=", "np", ".", "cross", "(", "v", ",", "v1", ")", "\n", "v", ",", "v1", ",", "v2", "=", "v", "[", ":", ",", "None", "]", ",", "v1", "[", ":", ",", "None", "]", ",", "v2", "[", ":", ",", "None", "]", "\n", "indices", "=", "np", ".", "linspace", "(", "1", ",", "num_pts", ",", "num_pts", ")", "\n", "phi", "=", "np", ".", "arccos", "(", "1", "+", "(", "math", ".", "cos", "(", "alpha", ")", "-", "1", ")", "*", "indices", "/", "num_pts", ")", "\n", "theta", "=", "np", ".", "pi", "*", "(", "1", "+", "5", "**", "0.5", ")", "*", "indices", "\n", "r", "=", "np", ".", "sin", "(", "phi", ")", "\n", "w", "=", "(", "v", "*", "np", ".", "cos", "(", "phi", ")", "+", "r", "*", "(", "v1", "*", "np", ".", "cos", "(", "theta", ")", "+", "v2", "*", "np", ".", "sin", "(", "theta", ")", ")", ")", ".", "T", "\n", "return", "w", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.None.eval.sample_reflection": [[250, 256], ["eval.sample_sphere", "numpy.array", "input[].cpu().numpy", "numpy.norm", "input[].cpu", "numpy.inv", "sym.datasets.w2S"], "function", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.datasets.sample_sphere", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.datasets.w2S"], ["", "def", "sample_reflection", "(", "input", ",", "v", ",", "alpha", ")", ":", "\n", "    ", "K", "=", "input", "[", "\"K\"", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", "\n", "ws", "=", "sample_sphere", "(", "v", "/", "LA", ".", "norm", "(", "v", ")", ",", "alpha", ",", "CM", ".", "detection", ".", "n_theta", ")", "\n", "ws", "/=", "ws", "[", ":", ",", "2", ":", "]", "\n", "Ss", "=", "np", ".", "array", "(", "[", "K", "@", "w2S", "(", "w", ")", "@", "LA", ".", "inv", "(", "K", ")", "for", "w", "in", "ws", "]", ")", "\n", "return", "ws", ",", "Ss", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.None.eval.visualize": [[261, 295], ["matplotlib.figure().add_subplot", "plt.figure().add_subplot.view_init", "plt.figure().add_subplot.auto_scale_xyz", "numpy.linspace", "numpy.linspace", "numpy.outer", "numpy.outer", "numpy.outer", "plt.figure().add_subplot.plot_surface", "plt.figure().add_subplot.scatter", "plt.figure().add_subplot.scatter", "plt.figure().add_subplot.axes.xaxis.set_ticklabels", "plt.figure().add_subplot.axes.yaxis.set_ticklabels", "plt.figure().add_subplot.axes.zaxis.set_ticklabels", "plt.figure().add_subplot.set_xlim", "plt.figure().add_subplot.set_ylim", "plt.figure().add_subplot.set_zlim", "matplotlib.show", "numpy.norm", "numpy.norm", "numpy.cos", "numpy.sin", "numpy.sin", "numpy.sin", "numpy.ones", "numpy.cos", "matplotlib.figure", "numpy.size"], "function", ["None"], ["", "def", "visualize", "(", "ws", ",", "score", ",", "w0", ")", ":", "\n", "    ", "w0", "/=", "LA", ".", "norm", "(", "w0", ")", "/", "1.02", "\n", "ws", "/=", "LA", ".", "norm", "(", "ws", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "/", "1.02", "\n", "ax", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "10", ",", "6", ")", ")", ".", "add_subplot", "(", "111", ",", "projection", "=", "\"3d\"", ")", "\n", "\n", "# ax.set_box_aspect((1, 1, 1))", "\n", "# ax.set_box_aspect((1, 1, 1))", "\n", "ax", ".", "view_init", "(", "27", ",", "-", "22", ")", "\n", "ax", ".", "auto_scale_xyz", "(", "[", "-", "1", ",", "1", "]", ",", "[", "-", "1", ",", "1", "]", ",", "[", "-", "1", ",", "1", "]", ")", "\n", "\n", "# draw a hemisphere", "\n", "u", "=", "np", ".", "linspace", "(", "0", ",", "2", "*", "np", ".", "pi", ",", "100", ")", "\n", "v", "=", "np", ".", "linspace", "(", "0", ",", "np", ".", "pi", "/", "2", ",", "100", ")", "\n", "x", "=", "np", ".", "outer", "(", "np", ".", "cos", "(", "u", ")", ",", "np", ".", "sin", "(", "v", ")", ")", "\n", "y", "=", "np", ".", "outer", "(", "np", ".", "sin", "(", "u", ")", ",", "np", ".", "sin", "(", "v", ")", ")", "\n", "z", "=", "np", ".", "outer", "(", "np", ".", "ones", "(", "np", ".", "size", "(", "u", ")", ")", ",", "np", ".", "cos", "(", "v", ")", ")", "\n", "ax", ".", "plot_surface", "(", "x", ",", "y", ",", "z", ",", "color", "=", "\"g\"", ",", "alpha", "=", "0.3", ")", "\n", "\n", "# draw sampled points", "\n", "_", "=", "ax", ".", "scatter", "(", "ws", "[", ":", ",", "0", "]", ",", "ws", "[", ":", ",", "1", "]", ",", "ws", "[", ":", ",", "2", "]", ",", "c", "=", "score", ")", "\n", "ax", ".", "scatter", "(", "w0", "[", "0", "]", ",", "w0", "[", "1", "]", ",", "w0", "[", "2", "]", ",", "c", "=", "\"red\"", ",", "marker", "=", "\"^\"", ")", "\n", "ax", ".", "axes", ".", "xaxis", ".", "set_ticklabels", "(", "[", "]", ")", "\n", "ax", ".", "axes", ".", "yaxis", ".", "set_ticklabels", "(", "[", "]", ")", "\n", "ax", ".", "axes", ".", "zaxis", ".", "set_ticklabels", "(", "[", "]", ")", "\n", "\n", "ax", ".", "set_xlim", "(", "-", "1", ",", "1", ")", "\n", "ax", ".", "set_ylim", "(", "-", "1", ",", "1", ")", "\n", "ax", ".", "set_zlim", "(", "-", "0", ",", "1", ")", "\n", "# plt.colorbar(cb)", "\n", "# global count", "\n", "# ax.set_title(f\"Coarse-to-fine Inference Round {count+1}\", pad=10)", "\n", "# plt.savefig(f\"{count}.pdf\")", "\n", "# count += 1", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.None.train.git_hash": [[41, 47], ["subprocess.check_output().strip", "isinstance", "ret.decode.decode", "subprocess.check_output", "shlex.split"], "function", ["None"], ["def", "git_hash", "(", ")", ":", "\n", "    ", "cmd", "=", "'git log -n 1 --pretty=\"%h\"'", "\n", "ret", "=", "subprocess", ".", "check_output", "(", "shlex", ".", "split", "(", "cmd", ")", ")", ".", "strip", "(", ")", "\n", "if", "isinstance", "(", "ret", ",", "bytes", ")", ":", "\n", "        ", "ret", "=", "ret", ".", "decode", "(", ")", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.None.train.get_outdir": [[49, 61], ["str", "os.join", "sym.config.C.to_yaml", "os.system", "os.system", "os.system", "os.system", "datetime.datetime.now().strftime", "train.git_hash", "os.expanduser", "os.exists", "os.makedirs", "os.makedirs", "os.join", "datetime.datetime.now"], "function", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.None.train.git_hash"], ["", "def", "get_outdir", "(", "identifier", ")", ":", "\n", "# load config", "\n", "    ", "name", "=", "str", "(", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%y%m%d-%H%M%S\"", ")", ")", "\n", "name", "+=", "\"-%s\"", "%", "git_hash", "(", ")", "\n", "name", "+=", "\"-%s\"", "%", "identifier", "\n", "outdir", "=", "osp", ".", "join", "(", "osp", ".", "expanduser", "(", "CI", ".", "logdir", ")", ",", "name", ")", "\n", "if", "not", "osp", ".", "exists", "(", "outdir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "outdir", ")", "\n", "", "C", ".", "to_yaml", "(", "osp", ".", "join", "(", "outdir", ",", "\"config.yaml\"", ")", ")", "\n", "os", ".", "system", "(", "f\"git diff HEAD > {outdir}/gitdiff.patch\"", ")", "\n", "os", ".", "system", "(", "f\"find -name '*.py' -print0 | tar -cJf {outdir}/src.tar.xz --null -T -\"", ")", "\n", "return", "outdir", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.None.train.count_parameters": [[63, 65], ["sum", "p.numel", "model.parameters"], "function", ["None"], ["", "def", "count_parameters", "(", "model", ")", ":", "\n", "    ", "return", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.None.train.main": [[67, 162], ["docopt.docopt", "sym.config.C.update", "sym.config.CI.update", "sym.config.CM.update", "sym.config.CO.update", "pprint.pprint", "random.seed", "numpy.random.seed", "torch.manual_seed", "torch.cuda.is_available", "torch.device", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "sym.models.SymmetryNet().to", "print", "sym.utils.MyDataParallel", "train.get_outdir", "shutil.copyfile", "print", "sym.config.C.from_yaml", "args[].count", "torch.cuda.manual_seed", "print", "print", "Dataset", "Dataset", "print", "torch.load", "train.count_parameters", "list", "sym.utils.MyDataParallel.load_state_dict", "torch.optim.Adam", "os.join", "sym.trainer.Trainer", "sym.trainer.Trainer.train", "torch.cuda.device_count", "sym.models.SymmetryNet", "list", "checkpoint[].keys", "module_name.startswith", "sym.utils.MyDataParallel.parameters", "torch.optim.SGD", "range", "sym.utils.MyDataParallel.parameters", "len", "shutil.rmtree", "glob.glob", "args[].count"], "function", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.update", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.update", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.update", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.update", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.trainer.pprint", "home.repos.pwc.inspect_result.zhou13_symmetrynet.None.train.get_outdir", "home.repos.pwc.inspect_result.zhou13_symmetrynet.None.train.count_parameters", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.ConfigBox.list", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.trainer.Trainer.train", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.ConfigBox.list", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.keys"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "docopt", "(", "__doc__", ")", "\n", "config_file", "=", "args", "[", "\"<yaml-config>\"", "]", "or", "\"config/shapenet.yaml\"", "\n", "C", ".", "update", "(", "C", ".", "from_yaml", "(", "filename", "=", "config_file", ")", ")", "\n", "if", "args", "[", "\"--from\"", "]", ":", "\n", "        ", "C", ".", "io", ".", "resume_from", "=", "args", "[", "\"--from\"", "]", "\n", "", "CI", ".", "update", "(", "C", ".", "io", ")", "\n", "CM", ".", "update", "(", "C", ".", "model", ")", "\n", "CO", ".", "update", "(", "C", ".", "optim", ")", "\n", "pprint", ".", "pprint", "(", "C", ",", "indent", "=", "4", ")", "\n", "resume_from", "=", "CI", ".", "resume_from", "\n", "\n", "# WARNING: still not deterministic", "\n", "random", ".", "seed", "(", "0", ")", "\n", "np", ".", "random", ".", "seed", "(", "0", ")", "\n", "torch", ".", "manual_seed", "(", "0", ")", "\n", "\n", "device_name", "=", "\"cpu\"", "\n", "num_gpus", "=", "args", "[", "\"--devices\"", "]", ".", "count", "(", "\",\"", ")", "+", "1", "\n", "os", ".", "environ", "[", "\"CUDA_VISIBLE_DEVICES\"", "]", "=", "args", "[", "\"--devices\"", "]", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "device_name", "=", "\"cuda\"", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "0", ")", "\n", "print", "(", "\"Let's use\"", ",", "torch", ".", "cuda", ".", "device_count", "(", ")", ",", "\"GPU(s)!\"", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"CUDA is not available\"", ")", "\n", "", "device", "=", "torch", ".", "device", "(", "device_name", ")", "\n", "\n", "# 1. dataset", "\n", "batch_size", "=", "CM", ".", "batch_size", "*", "num_gpus", "\n", "datadir", "=", "CI", ".", "datadir", "\n", "kwargs", "=", "{", "\n", "\"batch_size\"", ":", "batch_size", ",", "\n", "\"num_workers\"", ":", "CI", ".", "num_workers", ",", "\n", "\"pin_memory\"", ":", "True", ",", "\n", "}", "\n", "if", "CI", ".", "dataset", "==", "\"ShapeNet\"", ":", "\n", "        ", "Dataset", "=", "ShapeNetDataset", "\n", "", "elif", "CI", ".", "dataset", "==", "\"Pix3D\"", ":", "\n", "        ", "Dataset", "=", "Pix3dDataset", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "Dataset", "(", "datadir", ",", "split", "=", "\"train\"", ")", ",", "shuffle", "=", "True", ",", "**", "kwargs", "\n", ")", "\n", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "Dataset", "(", "datadir", ",", "split", "=", "\"valid\"", ")", ",", "shuffle", "=", "False", ",", "**", "kwargs", "\n", ")", "\n", "\n", "if", "resume_from", ":", "\n", "        ", "print", "(", "\"Restoring from\"", ",", "resume_from", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "resume_from", ")", "\n", "\n", "# 2. model", "\n", "", "model", "=", "sym", ".", "models", ".", "SymmetryNet", "(", ")", ".", "to", "(", "device", ")", "\n", "print", "(", "\"# of params:\"", ",", "count_parameters", "(", "model", ")", ")", "\n", "model", "=", "sym", ".", "utils", ".", "MyDataParallel", "(", "\n", "model", ",", "device_ids", "=", "list", "(", "range", "(", "args", "[", "\"--devices\"", "]", ".", "count", "(", "\",\"", ")", "+", "1", ")", ")", "\n", ")", "\n", "if", "resume_from", ":", "\n", "        ", "for", "module_name", "in", "list", "(", "checkpoint", "[", "\"model_state_dict\"", "]", ".", "keys", "(", ")", ")", ":", "\n", "            ", "if", "module_name", ".", "startswith", "(", "\"module.backbone.volume_network.fc\"", ")", ":", "\n", "                ", "del", "checkpoint", "[", "\"model_state_dict\"", "]", "[", "module_name", "]", "\n", "", "", "model", ".", "load_state_dict", "(", "checkpoint", "[", "\"model_state_dict\"", "]", ",", "strict", "=", "False", ")", "\n", "\n", "# 3. optimizer", "\n", "", "if", "CO", ".", "name", "==", "\"Adam\"", ":", "\n", "        ", "optim", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "**", "CO", ".", "params", ")", "\n", "", "elif", "CO", ".", "name", "==", "\"SGD\"", ":", "\n", "        ", "optim", "=", "torch", ".", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "**", "CO", ".", "params", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "outdir", "=", "get_outdir", "(", "args", "[", "\"--identifier\"", "]", ")", "\n", "shutil", ".", "copyfile", "(", "config_file", ",", "osp", ".", "join", "(", "outdir", ",", "\"config_origin.yaml\"", ")", ")", "\n", "print", "(", "\"outdir:\"", ",", "outdir", ")", "\n", "\n", "try", ":", "\n", "        ", "trainer", "=", "sym", ".", "trainer", ".", "Trainer", "(", "\n", "device", "=", "device", ",", "\n", "model", "=", "model", ",", "\n", "optimizer", "=", "optim", ",", "\n", "train_loader", "=", "train_loader", ",", "\n", "val_loader", "=", "val_loader", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "out", "=", "outdir", ",", "\n", ")", "\n", "trainer", ".", "train", "(", ")", "\n", "", "except", "BaseException", ":", "\n", "        ", "if", "len", "(", "glob", ".", "glob", "(", "f\"{outdir}/viz/*\"", ")", ")", "<=", "1", ":", "\n", "            ", "shutil", ".", "rmtree", "(", "outdir", ")", "\n", "", "raise", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.config.load_config": [[13, 20], ["C.update", "CI.update", "CM.update", "CO.update", "C.from_yaml", "pprint.pprint"], "function", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.update", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.update", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.update", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.update", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.trainer.pprint"], ["def", "load_config", "(", "fname", ",", "verbose", "=", "True", ")", ":", "\n", "    ", "C", ".", "update", "(", "C", ".", "from_yaml", "(", "filename", "=", "fname", ")", ")", "\n", "CI", ".", "update", "(", "C", ".", "io", ")", "\n", "CM", ".", "update", "(", "C", ".", "model", ")", "\n", "CO", ".", "update", "(", "C", ".", "optim", ")", "\n", "if", "verbose", ":", "\n", "        ", "pprint", "(", "C", ",", "indent", "=", "4", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.__new__": [[271, 279], ["dict.__new__", "box._get_box_config"], "methods", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.__new__", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box._get_box_config"], ["def", "__new__", "(", "cls", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Due to the way pickling works in python 3, we need to make sure\n        the box config is created as early as possible.\n        \"\"\"", "\n", "obj", "=", "super", "(", "Box", ",", "cls", ")", ".", "__new__", "(", "cls", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "obj", ".", "_box_config", "=", "_get_box_config", "(", "cls", ",", "kwargs", ")", "\n", "return", "obj", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.__init__": [[280, 319], ["box._get_box_config", "kwargs.pop", "kwargs.items", "box.BoxError", "len", "isinstance", "isinstance", "box.Box.__add_ordered", "box.Box.box_it_up", "ValueError", "args[].items", "isinstance", "TypeError", "isinstance", "box.Box.__add_ordered", "ValueError", "box.Box.__add_ordered", "len"], "methods", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box._get_box_config", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.pop", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.items", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.__add_ordered", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.BoxList.box_it_up", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.items", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.__add_ordered", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.__add_ordered"], ["", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_box_config", "=", "_get_box_config", "(", "self", ".", "__class__", ",", "kwargs", ")", "\n", "if", "self", ".", "_box_config", "[", "'ordered_box'", "]", ":", "\n", "            ", "self", ".", "_box_config", "[", "'__ordered_box_values'", "]", "=", "[", "]", "\n", "", "if", "(", "not", "self", ".", "_box_config", "[", "'conversion_box'", "]", "and", "\n", "self", ".", "_box_config", "[", "'box_duplicates'", "]", "!=", "\"ignore\"", ")", ":", "\n", "            ", "raise", "BoxError", "(", "'box_duplicates are only for conversion_boxes'", ")", "\n", "", "if", "len", "(", "args", ")", "==", "1", ":", "\n", "            ", "if", "isinstance", "(", "args", "[", "0", "]", ",", "basestring", ")", ":", "\n", "                ", "raise", "ValueError", "(", "'Cannot extrapolate Box from string'", ")", "\n", "", "if", "isinstance", "(", "args", "[", "0", "]", ",", "Mapping", ")", ":", "\n", "                ", "for", "k", ",", "v", "in", "args", "[", "0", "]", ".", "items", "(", ")", ":", "\n", "                    ", "if", "v", "is", "args", "[", "0", "]", ":", "\n", "                        ", "v", "=", "self", "\n", "", "self", "[", "k", "]", "=", "v", "\n", "self", ".", "__add_ordered", "(", "k", ")", "\n", "", "", "elif", "isinstance", "(", "args", "[", "0", "]", ",", "Iterable", ")", ":", "\n", "                ", "for", "k", ",", "v", "in", "args", "[", "0", "]", ":", "\n", "                    ", "self", "[", "k", "]", "=", "v", "\n", "self", ".", "__add_ordered", "(", "k", ")", "\n", "\n", "", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "'First argument must be mapping or iterable'", ")", "\n", "", "", "elif", "args", ":", "\n", "            ", "raise", "TypeError", "(", "'Box expected at most 1 argument, '", "\n", "'got {0}'", ".", "format", "(", "len", "(", "args", ")", ")", ")", "\n", "\n", "", "box_it", "=", "kwargs", ".", "pop", "(", "'box_it_up'", ",", "False", ")", "\n", "for", "k", ",", "v", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "            ", "if", "args", "and", "isinstance", "(", "args", "[", "0", "]", ",", "Mapping", ")", "and", "v", "is", "args", "[", "0", "]", ":", "\n", "                ", "v", "=", "self", "\n", "", "self", "[", "k", "]", "=", "v", "\n", "self", ".", "__add_ordered", "(", "k", ")", "\n", "\n", "", "if", "(", "self", ".", "_box_config", "[", "'frozen_box'", "]", "or", "box_it", "or", "\n", "self", ".", "_box_config", "[", "'box_duplicates'", "]", "!=", "'ignore'", ")", ":", "\n", "            ", "self", ".", "box_it_up", "(", ")", "\n", "\n", "", "self", ".", "_box_config", "[", "'__created'", "]", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.__add_ordered": [[320, 324], ["box.Box._box_config[].append"], "methods", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.BoxList.append"], ["", "def", "__add_ordered", "(", "self", ",", "key", ")", ":", "\n", "        ", "if", "(", "self", ".", "_box_config", "[", "'ordered_box'", "]", "and", "\n", "key", "not", "in", "self", ".", "_box_config", "[", "'__ordered_box_values'", "]", ")", ":", "\n", "            ", "self", ".", "_box_config", "[", "'__ordered_box_values'", "]", ".", "append", "(", "key", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.box_it_up": [[325, 336], ["box._conversion_checks", "box.Box.keys", "hasattr", "box.Box.box_it_up"], "methods", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box._conversion_checks", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.keys", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.BoxList.box_it_up"], ["", "", "def", "box_it_up", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Perform value lookup for all items in current dictionary,\n        generating all sub Box objects, while also running `box_it_up` on\n        any of those sub box objects.\n        \"\"\"", "\n", "for", "k", "in", "self", ":", "\n", "            ", "_conversion_checks", "(", "k", ",", "self", ".", "keys", "(", ")", ",", "self", ".", "_box_config", ",", "\n", "check_only", "=", "True", ")", "\n", "if", "self", "[", "k", "]", "is", "not", "self", "and", "hasattr", "(", "self", "[", "k", "]", ",", "'box_it_up'", ")", ":", "\n", "                ", "self", "[", "k", "]", ".", "box_it_up", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.__hash__": [[337, 344], ["TypeError", "box.Box.items", "hash"], "methods", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.items"], ["", "", "", "def", "__hash__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_box_config", "[", "'frozen_box'", "]", ":", "\n", "            ", "hashing", "=", "54321", "\n", "for", "item", "in", "self", ".", "items", "(", ")", ":", "\n", "                ", "hashing", "^=", "hash", "(", "item", ")", "\n", "", "return", "hashing", "\n", "", "raise", "TypeError", "(", "\"unhashable type: 'Box'\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.__dir__": [[345, 381], ["set", "box.Box.keys", "box.Box.keys", "list", "box._safe_key", "box._safe_key", "set.add", "set.add", "dir", "box._camel_killer", "set.add", "box._safe_attr", "set.remove", "set.add", "set.add"], "methods", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.keys", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.keys", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.ConfigBox.list", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box._safe_key", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box._safe_key", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box._camel_killer", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box._safe_attr"], ["", "def", "__dir__", "(", "self", ")", ":", "\n", "        ", "allowed", "=", "string", ".", "ascii_letters", "+", "string", ".", "digits", "+", "'_'", "\n", "kill_camel", "=", "self", ".", "_box_config", "[", "'camel_killer_box'", "]", "\n", "items", "=", "set", "(", "dir", "(", "dict", ")", "+", "[", "'to_dict'", ",", "'to_json'", ",", "\n", "'from_json'", ",", "'box_it_up'", "]", ")", "\n", "# Only show items accessible by dot notation", "\n", "for", "key", "in", "self", ".", "keys", "(", ")", ":", "\n", "            ", "key", "=", "_safe_key", "(", "key", ")", "\n", "if", "(", "' '", "not", "in", "key", "and", "key", "[", "0", "]", "not", "in", "string", ".", "digits", "and", "\n", "key", "not", "in", "kwlist", ")", ":", "\n", "                ", "for", "letter", "in", "key", ":", "\n", "                    ", "if", "letter", "not", "in", "allowed", ":", "\n", "                        ", "break", "\n", "", "", "else", ":", "\n", "                    ", "items", ".", "add", "(", "key", ")", "\n", "\n", "", "", "", "for", "key", "in", "self", ".", "keys", "(", ")", ":", "\n", "            ", "key", "=", "_safe_key", "(", "key", ")", "\n", "if", "key", "not", "in", "items", ":", "\n", "                ", "if", "self", ".", "_box_config", "[", "'conversion_box'", "]", ":", "\n", "                    ", "key", "=", "_safe_attr", "(", "key", ",", "camel_killer", "=", "kill_camel", ",", "\n", "replacement_char", "=", "self", ".", "_box_config", "[", "\n", "'box_safe_prefix'", "]", ")", "\n", "if", "key", ":", "\n", "                        ", "items", ".", "add", "(", "key", ")", "\n", "", "", "", "if", "kill_camel", ":", "\n", "                ", "snake_key", "=", "_camel_killer", "(", "key", ")", "\n", "if", "snake_key", ":", "\n", "                    ", "items", ".", "remove", "(", "key", ")", "\n", "items", ".", "add", "(", "snake_key", ")", "\n", "\n", "", "", "", "if", "yaml_support", ":", "\n", "            ", "items", ".", "add", "(", "'to_yaml'", ")", "\n", "items", ".", "add", "(", "'from_yaml'", ")", "\n", "\n", "", "return", "list", "(", "items", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.get": [[382, 391], ["isinstance", "box.Box", "isinstance", "box.BoxList", "isinstance", "isinstance"], "methods", ["None"], ["", "def", "get", "(", "self", ",", "key", ",", "default", "=", "None", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "return", "self", "[", "key", "]", "\n", "", "except", "KeyError", ":", "\n", "            ", "if", "isinstance", "(", "default", ",", "dict", ")", "and", "not", "isinstance", "(", "default", ",", "Box", ")", ":", "\n", "                ", "return", "Box", "(", "default", ")", "\n", "", "if", "isinstance", "(", "default", ",", "list", ")", "and", "not", "isinstance", "(", "default", ",", "BoxList", ")", ":", "\n", "                ", "return", "BoxList", "(", "default", ")", "\n", "", "return", "default", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.copy": [[392, 394], ["box.Box.__class__", "super().copy"], "methods", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.copy"], ["", "", "def", "copy", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", "(", "super", "(", "self", ".", "__class__", ",", "self", ")", ".", "copy", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.__copy__": [[395, 397], ["box.Box.__class__", "super().copy"], "methods", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.copy"], ["", "def", "__copy__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", "(", "super", "(", "self", ".", "__class__", ",", "self", ")", ".", "copy", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.__deepcopy__": [[398, 405], ["box.Box.__class__", "box.Box.items", "copy.deepcopy", "id", "copy.deepcopy"], "methods", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.items"], ["", "def", "__deepcopy__", "(", "self", ",", "memodict", "=", "None", ")", ":", "\n", "        ", "out", "=", "self", ".", "__class__", "(", ")", "\n", "memodict", "=", "memodict", "or", "{", "}", "\n", "memodict", "[", "id", "(", "self", ")", "]", "=", "out", "\n", "for", "k", ",", "v", "in", "self", ".", "items", "(", ")", ":", "\n", "            ", "out", "[", "copy", ".", "deepcopy", "(", "k", ",", "memodict", ")", "]", "=", "copy", ".", "deepcopy", "(", "v", ",", "memodict", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.__setstate__": [[406, 409], ["box.Box.__dict__.update"], "methods", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.update"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "self", ".", "_box_config", "=", "state", "[", "'_box_config'", "]", "\n", "self", ".", "__dict__", ".", "update", "(", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.__getitem__": [[410, 422], ["dict.__getitem__", "box.Box.__convert_and_store", "box.BoxKeyError", "box.BoxKeyError", "box.Box.__get_default", "str"], "methods", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.datasets.Pix3dDataset.__getitem__", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.__convert_and_store", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.__get_default"], ["", "def", "__getitem__", "(", "self", ",", "item", ",", "_ignore_default", "=", "False", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "value", "=", "super", "(", "Box", ",", "self", ")", ".", "__getitem__", "(", "item", ")", "\n", "", "except", "KeyError", "as", "err", ":", "\n", "            ", "if", "item", "==", "'_box_config'", ":", "\n", "                ", "raise", "BoxKeyError", "(", "'_box_config should only exist as an '", "\n", "'attribute and is never defaulted'", ")", "\n", "", "if", "self", ".", "_box_config", "[", "'default_box'", "]", "and", "not", "_ignore_default", ":", "\n", "                ", "return", "self", ".", "__get_default", "(", "item", ")", "\n", "", "raise", "BoxKeyError", "(", "str", "(", "err", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "__convert_and_store", "(", "item", ",", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.keys": [[423, 427], ["super().keys"], "methods", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.keys"], ["", "", "def", "keys", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_box_config", "[", "'ordered_box'", "]", ":", "\n", "            ", "return", "self", ".", "_box_config", "[", "'__ordered_box_values'", "]", "\n", "", "return", "super", "(", "Box", ",", "self", ")", ".", "keys", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.values": [[428, 430], ["box.Box.keys"], "methods", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.keys"], ["", "def", "values", "(", "self", ")", ":", "\n", "        ", "return", "[", "self", "[", "x", "]", "for", "x", "in", "self", ".", "keys", "(", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.items": [[431, 433], ["box.Box.keys"], "methods", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.keys"], ["", "def", "items", "(", "self", ")", ":", "\n", "        ", "return", "[", "(", "x", ",", "self", "[", "x", "]", ")", "for", "x", "in", "self", ".", "keys", "(", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.__get_default": [[434, 444], ["box.Box.__class__", "isinstance", "default_value", "hasattr", "box.Box.__box_config", "default_value.copy"], "methods", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.__box_config", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.copy"], ["", "def", "__get_default", "(", "self", ",", "item", ")", ":", "\n", "        ", "default_value", "=", "self", ".", "_box_config", "[", "'default_box_attr'", "]", "\n", "if", "default_value", "is", "self", ".", "__class__", ":", "\n", "            ", "return", "self", ".", "__class__", "(", "__box_heritage", "=", "(", "self", ",", "item", ")", ",", "\n", "**", "self", ".", "__box_config", "(", ")", ")", "\n", "", "elif", "isinstance", "(", "default_value", ",", "Callable", ")", ":", "\n", "            ", "return", "default_value", "(", ")", "\n", "", "elif", "hasattr", "(", "default_value", ",", "'copy'", ")", ":", "\n", "            ", "return", "default_value", ".", "copy", "(", ")", "\n", "", "return", "default_value", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.__box_config": [[445, 451], ["box.Box._box_config.copy().items", "box.Box._box_config.copy", "k.startswith"], "methods", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.items", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.copy"], ["", "def", "__box_config", "(", "self", ")", ":", "\n", "        ", "out", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "self", ".", "_box_config", ".", "copy", "(", ")", ".", "items", "(", ")", ":", "\n", "            ", "if", "not", "k", ".", "startswith", "(", "\"__\"", ")", ":", "\n", "                ", "out", "[", "k", "]", "=", "v", "\n", "", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.__convert_and_store": [[452, 480], ["box.Box._box_config[].add", "isinstance", "box.Box.__class__", "isinstance", "isinstance", "box.Box.__box_config", "isinstance", "box._recursive_tuples", "box.BoxList", "isinstance", "box._recursive_tuples", "box.Box.__box_config", "box.Box.__box_config", "box.Box.__box_config"], "methods", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.__box_config", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box._recursive_tuples", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box._recursive_tuples", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.__box_config", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.__box_config", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.__box_config"], ["", "def", "__convert_and_store", "(", "self", ",", "item", ",", "value", ")", ":", "\n", "        ", "if", "item", "in", "self", ".", "_box_config", "[", "'__converted'", "]", ":", "\n", "            ", "return", "value", "\n", "", "if", "isinstance", "(", "value", ",", "dict", ")", "and", "not", "isinstance", "(", "value", ",", "Box", ")", ":", "\n", "            ", "value", "=", "self", ".", "__class__", "(", "value", ",", "__box_heritage", "=", "(", "self", ",", "item", ")", ",", "\n", "**", "self", ".", "__box_config", "(", ")", ")", "\n", "self", "[", "item", "]", "=", "value", "\n", "", "elif", "isinstance", "(", "value", ",", "list", ")", "and", "not", "isinstance", "(", "value", ",", "BoxList", ")", ":", "\n", "            ", "if", "self", ".", "_box_config", "[", "'frozen_box'", "]", ":", "\n", "                ", "value", "=", "_recursive_tuples", "(", "value", ",", "self", ".", "__class__", ",", "\n", "recreate_tuples", "=", "self", ".", "_box_config", "[", "\n", "'modify_tuples_box'", "]", ",", "\n", "__box_heritage", "=", "(", "self", ",", "item", ")", ",", "\n", "**", "self", ".", "__box_config", "(", ")", ")", "\n", "", "else", ":", "\n", "                ", "value", "=", "BoxList", "(", "value", ",", "__box_heritage", "=", "(", "self", ",", "item", ")", ",", "\n", "box_class", "=", "self", ".", "__class__", ",", "\n", "**", "self", ".", "__box_config", "(", ")", ")", "\n", "", "self", "[", "item", "]", "=", "value", "\n", "", "elif", "(", "self", ".", "_box_config", "[", "'modify_tuples_box'", "]", "and", "\n", "isinstance", "(", "value", ",", "tuple", ")", ")", ":", "\n", "            ", "value", "=", "_recursive_tuples", "(", "value", ",", "self", ".", "__class__", ",", "\n", "recreate_tuples", "=", "True", ",", "\n", "__box_heritage", "=", "(", "self", ",", "item", ")", ",", "\n", "**", "self", ".", "__box_config", "(", ")", ")", "\n", "self", "[", "item", "]", "=", "value", "\n", "", "self", ".", "_box_config", "[", "'__converted'", "]", ".", "add", "(", "item", ")", "\n", "return", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.__create_lineage": [[481, 488], ["None"], "methods", ["None"], ["", "def", "__create_lineage", "(", "self", ")", ":", "\n", "        ", "if", "(", "self", ".", "_box_config", "[", "'__box_heritage'", "]", "and", "\n", "self", ".", "_box_config", "[", "'__created'", "]", ")", ":", "\n", "            ", "past", ",", "item", "=", "self", ".", "_box_config", "[", "'__box_heritage'", "]", "\n", "if", "not", "past", "[", "item", "]", ":", "\n", "                ", "past", "[", "item", "]", "=", "self", "\n", "", "self", ".", "_box_config", "[", "'__box_heritage'", "]", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.__getattr__": [[489, 516], ["box.Box.__convert_and_store", "box.Box.__getitem__", "box.BoxKeyError", "object.__getattribute__", "AttributeError", "box.BoxError", "box._conversion_checks", "box.Box.keys", "box.Box.__get_default", "str", "box.Box.keys", "box.Box.__getitem__", "box._camel_killer", "box.Box.__getitem__"], "methods", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.__convert_and_store", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.datasets.Pix3dDataset.__getitem__", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box._conversion_checks", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.keys", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.__get_default", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.keys", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.datasets.Pix3dDataset.__getitem__", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box._camel_killer", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.datasets.Pix3dDataset.__getitem__"], ["", "", "def", "__getattr__", "(", "self", ",", "item", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "try", ":", "\n", "                ", "value", "=", "self", ".", "__getitem__", "(", "item", ",", "_ignore_default", "=", "True", ")", "\n", "", "except", "KeyError", ":", "\n", "                ", "value", "=", "object", ".", "__getattribute__", "(", "self", ",", "item", ")", "\n", "", "", "except", "AttributeError", "as", "err", ":", "\n", "            ", "if", "item", "==", "\"__getstate__\"", ":", "\n", "                ", "raise", "AttributeError", "(", "item", ")", "\n", "", "if", "item", "==", "'_box_config'", ":", "\n", "                ", "raise", "BoxError", "(", "'_box_config key must exist'", ")", "\n", "", "kill_camel", "=", "self", ".", "_box_config", "[", "'camel_killer_box'", "]", "\n", "if", "self", ".", "_box_config", "[", "'conversion_box'", "]", "and", "item", ":", "\n", "                ", "k", "=", "_conversion_checks", "(", "item", ",", "self", ".", "keys", "(", ")", ",", "self", ".", "_box_config", ")", "\n", "if", "k", ":", "\n", "                    ", "return", "self", ".", "__getitem__", "(", "k", ")", "\n", "", "", "if", "kill_camel", ":", "\n", "                ", "for", "k", "in", "self", ".", "keys", "(", ")", ":", "\n", "                    ", "if", "item", "==", "_camel_killer", "(", "k", ")", ":", "\n", "                        ", "return", "self", ".", "__getitem__", "(", "k", ")", "\n", "", "", "", "if", "self", ".", "_box_config", "[", "'default_box'", "]", ":", "\n", "                ", "return", "self", ".", "__get_default", "(", "item", ")", "\n", "", "raise", "BoxKeyError", "(", "str", "(", "err", ")", ")", "\n", "", "else", ":", "\n", "            ", "if", "item", "==", "'_box_config'", ":", "\n", "                ", "return", "value", "\n", "", "return", "self", ".", "__convert_and_store", "(", "item", ",", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.__setitem__": [[517, 527], ["super().__setitem__", "box.Box.__add_ordered", "box.Box.__create_lineage", "box.BoxError", "box._conversion_checks", "box.Box.keys"], "methods", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.BoxList.__setitem__", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.__add_ordered", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.__create_lineage", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box._conversion_checks", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.keys"], ["", "", "def", "__setitem__", "(", "self", ",", "key", ",", "value", ")", ":", "\n", "        ", "if", "(", "key", "!=", "'_box_config'", "and", "self", ".", "_box_config", "[", "'__created'", "]", "and", "\n", "self", ".", "_box_config", "[", "'frozen_box'", "]", ")", ":", "\n", "            ", "raise", "BoxError", "(", "'Box is frozen'", ")", "\n", "", "if", "self", ".", "_box_config", "[", "'conversion_box'", "]", ":", "\n", "            ", "_conversion_checks", "(", "key", ",", "self", ".", "keys", "(", ")", ",", "self", ".", "_box_config", ",", "\n", "check_only", "=", "True", ",", "pre_check", "=", "True", ")", "\n", "", "super", "(", "Box", ",", "self", ")", ".", "__setitem__", "(", "key", ",", "value", ")", "\n", "self", ".", "__add_ordered", "(", "key", ")", "\n", "self", ".", "__create_lineage", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.__setattr__": [[528, 557], ["box.Box.__add_ordered", "box.Box.__create_lineage", "box.BoxError", "AttributeError", "object.__setattr__", "object.__getattribute__", "object.__setattr__", "box.Box.keys", "box._conversion_checks", "box.Box.keys", "box._camel_killer"], "methods", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.__add_ordered", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.__create_lineage", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.__setattr__", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.__setattr__", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.keys", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box._conversion_checks", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.keys", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box._camel_killer"], ["", "def", "__setattr__", "(", "self", ",", "key", ",", "value", ")", ":", "\n", "        ", "if", "(", "key", "!=", "'_box_config'", "and", "self", ".", "_box_config", "[", "'frozen_box'", "]", "and", "\n", "self", ".", "_box_config", "[", "'__created'", "]", ")", ":", "\n", "            ", "raise", "BoxError", "(", "'Box is frozen'", ")", "\n", "", "if", "key", "in", "self", ".", "_protected_keys", ":", "\n", "            ", "raise", "AttributeError", "(", "\"Key name '{0}' is protected\"", ".", "format", "(", "key", ")", ")", "\n", "", "if", "key", "==", "'_box_config'", ":", "\n", "            ", "return", "object", ".", "__setattr__", "(", "self", ",", "key", ",", "value", ")", "\n", "", "try", ":", "\n", "            ", "object", ".", "__getattribute__", "(", "self", ",", "key", ")", "\n", "", "except", "(", "AttributeError", ",", "UnicodeEncodeError", ")", ":", "\n", "            ", "if", "(", "key", "not", "in", "self", ".", "keys", "(", ")", "and", "\n", "(", "self", ".", "_box_config", "[", "'conversion_box'", "]", "or", "\n", "self", ".", "_box_config", "[", "'camel_killer_box'", "]", ")", ")", ":", "\n", "                ", "if", "self", ".", "_box_config", "[", "'conversion_box'", "]", ":", "\n", "                    ", "k", "=", "_conversion_checks", "(", "key", ",", "self", ".", "keys", "(", ")", ",", "\n", "self", ".", "_box_config", ")", "\n", "self", "[", "key", "if", "not", "k", "else", "k", "]", "=", "value", "\n", "", "elif", "self", ".", "_box_config", "[", "'camel_killer_box'", "]", ":", "\n", "                    ", "for", "each_key", "in", "self", ":", "\n", "                        ", "if", "key", "==", "_camel_killer", "(", "each_key", ")", ":", "\n", "                            ", "self", "[", "each_key", "]", "=", "value", "\n", "break", "\n", "", "", "", "", "else", ":", "\n", "                ", "self", "[", "key", "]", "=", "value", "\n", "", "", "else", ":", "\n", "            ", "object", ".", "__setattr__", "(", "self", ",", "key", ",", "value", ")", "\n", "", "self", ".", "__add_ordered", "(", "key", ")", "\n", "self", ".", "__create_lineage", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.__delitem__": [[558, 565], ["super().__delitem__", "box.BoxError", "box.Box._box_config[].remove"], "methods", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.BoxList.__delitem__"], ["", "def", "__delitem__", "(", "self", ",", "key", ")", ":", "\n", "        ", "if", "self", ".", "_box_config", "[", "'frozen_box'", "]", ":", "\n", "            ", "raise", "BoxError", "(", "'Box is frozen'", ")", "\n", "", "super", "(", "Box", ",", "self", ")", ".", "__delitem__", "(", "key", ")", "\n", "if", "(", "self", ".", "_box_config", "[", "'ordered_box'", "]", "and", "\n", "key", "in", "self", ".", "_box_config", "[", "'__ordered_box_values'", "]", ")", ":", "\n", "            ", "self", ".", "_box_config", "[", "'__ordered_box_values'", "]", ".", "remove", "(", "key", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.__delattr__": [[566, 582], ["box.BoxError", "box.BoxError", "AttributeError", "object.__getattribute__", "object.__delattr__", "box.Box._box_config[].remove"], "methods", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.__delattr__"], ["", "", "def", "__delattr__", "(", "self", ",", "item", ")", ":", "\n", "        ", "if", "self", ".", "_box_config", "[", "'frozen_box'", "]", ":", "\n", "            ", "raise", "BoxError", "(", "'Box is frozen'", ")", "\n", "", "if", "item", "==", "'_box_config'", ":", "\n", "            ", "raise", "BoxError", "(", "'\"_box_config\" is protected'", ")", "\n", "", "if", "item", "in", "self", ".", "_protected_keys", ":", "\n", "            ", "raise", "AttributeError", "(", "\"Key name '{0}' is protected\"", ".", "format", "(", "item", ")", ")", "\n", "", "try", ":", "\n", "            ", "object", ".", "__getattribute__", "(", "self", ",", "item", ")", "\n", "", "except", "AttributeError", ":", "\n", "            ", "del", "self", "[", "item", "]", "\n", "", "else", ":", "\n", "            ", "object", ".", "__delattr__", "(", "self", ",", "item", ")", "\n", "", "if", "(", "self", ".", "_box_config", "[", "'ordered_box'", "]", "and", "\n", "item", "in", "self", ".", "_box_config", "[", "'__ordered_box_values'", "]", ")", ":", "\n", "            ", "self", ".", "_box_config", "[", "'__ordered_box_values'", "]", ".", "remove", "(", "item", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.pop": [[583, 602], ["len", "box.BoxError", "box.BoxKeyError"], "methods", ["None"], ["", "", "def", "pop", "(", "self", ",", "key", ",", "*", "args", ")", ":", "\n", "        ", "if", "args", ":", "\n", "            ", "if", "len", "(", "args", ")", "!=", "1", ":", "\n", "                ", "raise", "BoxError", "(", "'pop() takes only one optional'", "\n", "' argument \"default\"'", ")", "\n", "", "try", ":", "\n", "                ", "item", "=", "self", "[", "key", "]", "\n", "", "except", "KeyError", ":", "\n", "                ", "return", "args", "[", "0", "]", "\n", "", "else", ":", "\n", "                ", "del", "self", "[", "key", "]", "\n", "return", "item", "\n", "", "", "try", ":", "\n", "            ", "item", "=", "self", "[", "key", "]", "\n", "", "except", "KeyError", ":", "\n", "            ", "raise", "BoxKeyError", "(", "'{0}'", ".", "format", "(", "key", ")", ")", "\n", "", "else", ":", "\n", "            ", "del", "self", "[", "key", "]", "\n", "return", "item", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.clear": [[603, 606], ["super().clear"], "methods", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.clear"], ["", "", "def", "clear", "(", "self", ")", ":", "\n", "        ", "self", ".", "_box_config", "[", "'__ordered_box_values'", "]", "=", "[", "]", "\n", "super", "(", "Box", ",", "self", ")", ".", "clear", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.popitem": [[607, 613], ["next", "box.Box.pop", "box.Box.__iter__", "box.BoxKeyError"], "methods", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.pop", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.parmapper._chunker.__iter__"], ["", "def", "popitem", "(", "self", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "key", "=", "next", "(", "self", ".", "__iter__", "(", ")", ")", "\n", "", "except", "StopIteration", ":", "\n", "            ", "raise", "BoxKeyError", "(", "'Empty box'", ")", "\n", "", "return", "key", ",", "self", ".", "pop", "(", "key", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.__repr__": [[614, 616], ["str", "box.Box.to_dict"], "methods", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.to_dict"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'<Box: {0}>'", ".", "format", "(", "str", "(", "self", ".", "to_dict", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.__str__": [[617, 619], ["str", "box.Box.to_dict"], "methods", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.to_dict"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "str", "(", "self", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.__iter__": [[620, 623], ["box.Box.keys"], "methods", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.keys"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "for", "key", "in", "self", ".", "keys", "(", ")", ":", "\n", "            ", "yield", "key", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.__reversed__": [[624, 627], ["reversed", "list", "box.Box.keys"], "methods", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.ConfigBox.list", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.keys"], ["", "", "def", "__reversed__", "(", "self", ")", ":", "\n", "        ", "for", "key", "in", "reversed", "(", "list", "(", "self", ".", "keys", "(", ")", ")", ")", ":", "\n", "            ", "yield", "key", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.to_dict": [[628, 644], ["dict", "dict.items", "hasattr", "v.to_dict", "hasattr", "v.to_list"], "methods", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.SBox.dict", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.items", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.to_dict", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.BoxList.to_list"], ["", "", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Turn the Box and sub Boxes back into a native\n        python dictionary.\n\n        :return: python dictionary of this Box\n        \"\"\"", "\n", "out_dict", "=", "dict", "(", "self", ")", "\n", "for", "k", ",", "v", "in", "out_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "v", "is", "self", ":", "\n", "                ", "out_dict", "[", "k", "]", "=", "out_dict", "\n", "", "elif", "hasattr", "(", "v", ",", "'to_dict'", ")", ":", "\n", "                ", "out_dict", "[", "k", "]", "=", "v", ".", "to_dict", "(", ")", "\n", "", "elif", "hasattr", "(", "v", ",", "'to_list'", ")", ":", "\n", "                ", "out_dict", "[", "k", "]", "=", "v", ".", "to_list", "(", ")", "\n", "", "", "return", "out_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.update": [[645, 663], ["hasattr", "item.items", "isinstance", "isinstance", "box.Box.__class__", "box.BoxList", "box.Box.__setattr__", "isinstance", "box.Box.update", "box.Box.__setitem__"], "methods", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.items", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.__setattr__", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.update", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.BoxList.__setitem__"], ["", "def", "update", "(", "self", ",", "item", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "not", "item", ":", "\n", "            ", "item", "=", "kwargs", "\n", "", "iter_over", "=", "item", ".", "items", "(", ")", "if", "hasattr", "(", "item", ",", "'items'", ")", "else", "item", "\n", "for", "k", ",", "v", "in", "iter_over", ":", "\n", "            ", "if", "isinstance", "(", "v", ",", "dict", ")", ":", "\n", "# Box objects must be created in case they are already", "\n", "# in the `converted` box_config set", "\n", "                ", "v", "=", "self", ".", "__class__", "(", "v", ")", "\n", "if", "k", "in", "self", "and", "isinstance", "(", "self", "[", "k", "]", ",", "dict", ")", ":", "\n", "                    ", "self", "[", "k", "]", ".", "update", "(", "v", ")", "\n", "continue", "\n", "", "", "if", "isinstance", "(", "v", ",", "list", ")", ":", "\n", "                ", "v", "=", "BoxList", "(", "v", ")", "\n", "", "try", ":", "\n", "                ", "self", ".", "__setattr__", "(", "k", ",", "v", ")", "\n", "", "except", "(", "AttributeError", ",", "TypeError", ")", ":", "\n", "                ", "self", ".", "__setitem__", "(", "k", ",", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.setdefault": [[664, 674], ["isinstance", "isinstance", "box.Box.__class__", "box.BoxList"], "methods", ["None"], ["", "", "", "def", "setdefault", "(", "self", ",", "item", ",", "default", "=", "None", ")", ":", "\n", "        ", "if", "item", "in", "self", ":", "\n", "            ", "return", "self", "[", "item", "]", "\n", "\n", "", "if", "isinstance", "(", "default", ",", "dict", ")", ":", "\n", "            ", "default", "=", "self", ".", "__class__", "(", "default", ")", "\n", "", "if", "isinstance", "(", "default", ",", "list", ")", ":", "\n", "            ", "default", "=", "BoxList", "(", "default", ")", "\n", "", "self", "[", "item", "]", "=", "default", "\n", "return", "default", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.to_json": [[675, 688], ["box._to_json", "box.Box.to_dict"], "methods", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box._to_json", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.to_dict"], ["", "def", "to_json", "(", "self", ",", "filename", "=", "None", ",", "\n", "encoding", "=", "\"utf-8\"", ",", "errors", "=", "\"strict\"", ",", "**", "json_kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Transform the Box object into a JSON string.\n\n        :param filename: If provided will save to file\n        :param encoding: File encoding\n        :param errors: How to handle encoding errors\n        :param json_kwargs: additional arguments to pass to json.dump(s)\n        :return: string of JSON or return of `json.dump`\n        \"\"\"", "\n", "return", "_to_json", "(", "self", ".", "to_dict", "(", ")", ",", "filename", "=", "filename", ",", "\n", "encoding", "=", "encoding", ",", "errors", "=", "errors", ",", "**", "json_kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.from_json": [[689, 715], ["kwargs.copy", "box._from_json", "cls", "isinstance", "box.BoxError", "kwargs.pop", "type"], "methods", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.copy", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box._from_json", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.pop"], ["", "@", "classmethod", "\n", "def", "from_json", "(", "cls", ",", "json_string", "=", "None", ",", "filename", "=", "None", ",", "\n", "encoding", "=", "\"utf-8\"", ",", "errors", "=", "\"strict\"", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Transform a json object string into a Box object. If the incoming\n        json is a list, you must use BoxList.from_json.\n\n        :param json_string: string to pass to `json.loads`\n        :param filename: filename to open and pass to `json.load`\n        :param encoding: File encoding\n        :param errors: How to handle encoding errors\n        :param kwargs: parameters to pass to `Box()` or `json.loads`\n        :return: Box object from json data\n        \"\"\"", "\n", "bx_args", "=", "{", "}", "\n", "for", "arg", "in", "kwargs", ".", "copy", "(", ")", ":", "\n", "            ", "if", "arg", "in", "BOX_PARAMETERS", ":", "\n", "                ", "bx_args", "[", "arg", "]", "=", "kwargs", ".", "pop", "(", "arg", ")", "\n", "\n", "", "", "data", "=", "_from_json", "(", "json_string", ",", "filename", "=", "filename", ",", "\n", "encoding", "=", "encoding", ",", "errors", "=", "errors", ",", "**", "kwargs", ")", "\n", "\n", "if", "not", "isinstance", "(", "data", ",", "dict", ")", ":", "\n", "            ", "raise", "BoxError", "(", "'json data not returned as a dictionary, '", "\n", "'but rather a {0}'", ".", "format", "(", "type", "(", "data", ")", ".", "__name__", ")", ")", "\n", "", "return", "cls", "(", "data", ",", "**", "bx_args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.BoxList.__init__": [[769, 783], ["box_options.get", "id", "box.BoxList.append", "box.BoxError", "box.BoxList.__setattr__"], "methods", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.get", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.BoxList.append", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.__setattr__"], ["def", "__init__", "(", "self", ",", "iterable", "=", "None", ",", "box_class", "=", "Box", ",", "**", "box_options", ")", ":", "\n", "        ", "self", ".", "box_class", "=", "box_class", "\n", "self", ".", "box_options", "=", "box_options", "\n", "self", ".", "box_org_ref", "=", "self", ".", "box_org_ref", "=", "id", "(", "iterable", ")", "if", "iterable", "else", "0", "\n", "if", "iterable", ":", "\n", "            ", "for", "x", "in", "iterable", ":", "\n", "                ", "self", ".", "append", "(", "x", ")", "\n", "", "", "if", "box_options", ".", "get", "(", "'frozen_box'", ")", ":", "\n", "            ", "def", "frozen", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "                ", "raise", "BoxError", "(", "'BoxList is frozen'", ")", "\n", "\n", "", "for", "method", "in", "[", "'append'", ",", "'extend'", ",", "'insert'", ",", "'pop'", ",", "\n", "'remove'", ",", "'reverse'", ",", "'sort'", "]", ":", "\n", "                ", "self", ".", "__setattr__", "(", "method", ",", "frozen", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.BoxList.__delitem__": [[784, 788], ["box.BoxList.box_options.get", "super().__delitem__", "box.BoxError"], "methods", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.get", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.BoxList.__delitem__"], ["", "", "", "def", "__delitem__", "(", "self", ",", "key", ")", ":", "\n", "        ", "if", "self", ".", "box_options", ".", "get", "(", "'frozen_box'", ")", ":", "\n", "            ", "raise", "BoxError", "(", "'BoxList is frozen'", ")", "\n", "", "super", "(", "BoxList", ",", "self", ")", ".", "__delitem__", "(", "key", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.BoxList.__setitem__": [[789, 793], ["box.BoxList.box_options.get", "super().__setitem__", "box.BoxError"], "methods", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.get", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.BoxList.__setitem__"], ["", "def", "__setitem__", "(", "self", ",", "key", ",", "value", ")", ":", "\n", "        ", "if", "self", ".", "box_options", ".", "get", "(", "'frozen_box'", ")", ":", "\n", "            ", "raise", "BoxError", "(", "'BoxList is frozen'", ")", "\n", "", "super", "(", "BoxList", ",", "self", ")", ".", "__setitem__", "(", "key", ",", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.BoxList.append": [[794, 809], ["isinstance", "super().append", "isinstance", "box.BoxList.box_class", "box.BoxList", "id"], "methods", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.BoxList.append"], ["", "def", "append", "(", "self", ",", "p_object", ")", ":", "\n", "        ", "if", "isinstance", "(", "p_object", ",", "dict", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "p_object", "=", "self", ".", "box_class", "(", "p_object", ",", "**", "self", ".", "box_options", ")", "\n", "", "except", "AttributeError", "as", "err", ":", "\n", "                ", "if", "'box_class'", "in", "self", ".", "__dict__", ":", "\n", "                    ", "raise", "err", "\n", "", "", "", "elif", "isinstance", "(", "p_object", ",", "list", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "p_object", "=", "(", "self", "if", "id", "(", "p_object", ")", "==", "self", ".", "box_org_ref", "else", "\n", "BoxList", "(", "p_object", ")", ")", "\n", "", "except", "AttributeError", "as", "err", ":", "\n", "                ", "if", "'box_org_ref'", "in", "self", ".", "__dict__", ":", "\n", "                    ", "raise", "err", "\n", "", "", "", "super", "(", "BoxList", ",", "self", ")", ".", "append", "(", "p_object", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.BoxList.extend": [[810, 813], ["box.BoxList.append"], "methods", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.BoxList.append"], ["", "def", "extend", "(", "self", ",", "iterable", ")", ":", "\n", "        ", "for", "item", "in", "iterable", ":", "\n", "            ", "self", ".", "append", "(", "item", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.BoxList.insert": [[814, 821], ["isinstance", "super().insert", "box.BoxList.box_class", "isinstance", "box.BoxList", "id"], "methods", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.BoxList.insert"], ["", "", "def", "insert", "(", "self", ",", "index", ",", "p_object", ")", ":", "\n", "        ", "if", "isinstance", "(", "p_object", ",", "dict", ")", ":", "\n", "            ", "p_object", "=", "self", ".", "box_class", "(", "p_object", ",", "**", "self", ".", "box_options", ")", "\n", "", "elif", "isinstance", "(", "p_object", ",", "list", ")", ":", "\n", "            ", "p_object", "=", "(", "self", "if", "id", "(", "p_object", ")", "==", "self", ".", "box_org_ref", "else", "\n", "BoxList", "(", "p_object", ")", ")", "\n", "", "super", "(", "BoxList", ",", "self", ")", ".", "insert", "(", "index", ",", "p_object", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.BoxList.__repr__": [[822, 824], ["box.BoxList.to_list"], "methods", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.BoxList.to_list"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"<BoxList: {0}>\"", ".", "format", "(", "self", ".", "to_list", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.BoxList.__str__": [[825, 827], ["str", "box.BoxList.to_list"], "methods", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.BoxList.to_list"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "str", "(", "self", ".", "to_list", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.BoxList.__copy__": [[828, 832], ["box.BoxList"], "methods", ["None"], ["", "def", "__copy__", "(", "self", ")", ":", "\n", "        ", "return", "BoxList", "(", "(", "x", "for", "x", "in", "self", ")", ",", "\n", "self", ".", "box_class", ",", "\n", "**", "self", ".", "box_options", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.BoxList.__deepcopy__": [[833, 840], ["box.BoxList.__class__", "box.BoxList.append", "id", "copy.deepcopy"], "methods", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.BoxList.append"], ["", "def", "__deepcopy__", "(", "self", ",", "memodict", "=", "None", ")", ":", "\n", "        ", "out", "=", "self", ".", "__class__", "(", ")", "\n", "memodict", "=", "memodict", "or", "{", "}", "\n", "memodict", "[", "id", "(", "self", ")", "]", "=", "out", "\n", "for", "k", "in", "self", ":", "\n", "            ", "out", ".", "append", "(", "copy", ".", "deepcopy", "(", "k", ")", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.BoxList.__hash__": [[841, 847], ["box.BoxList.box_options.get", "TypeError", "hash", "tuple"], "methods", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.get"], ["", "def", "__hash__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "box_options", ".", "get", "(", "'frozen_box'", ")", ":", "\n", "            ", "hashing", "=", "98765", "\n", "hashing", "^=", "hash", "(", "tuple", "(", "self", ")", ")", "\n", "return", "hashing", "\n", "", "raise", "TypeError", "(", "\"unhashable type: 'BoxList'\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.BoxList.to_list": [[848, 860], ["new_list.append", "isinstance", "new_list.append", "isinstance", "x.to_dict", "new_list.append", "new_list.append", "x.to_list"], "methods", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.BoxList.append", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.BoxList.append", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.to_dict", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.BoxList.append", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.BoxList.append", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.BoxList.to_list"], ["", "def", "to_list", "(", "self", ")", ":", "\n", "        ", "new_list", "=", "[", "]", "\n", "for", "x", "in", "self", ":", "\n", "            ", "if", "x", "is", "self", ":", "\n", "                ", "new_list", ".", "append", "(", "new_list", ")", "\n", "", "elif", "isinstance", "(", "x", ",", "Box", ")", ":", "\n", "                ", "new_list", ".", "append", "(", "x", ".", "to_dict", "(", ")", ")", "\n", "", "elif", "isinstance", "(", "x", ",", "BoxList", ")", ":", "\n", "                ", "new_list", ".", "append", "(", "x", ".", "to_list", "(", ")", ")", "\n", "", "else", ":", "\n", "                ", "new_list", ".", "append", "(", "x", ")", "\n", "", "", "return", "new_list", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.BoxList.to_json": [[861, 883], ["box._to_json", "box._to_json", "open", "f.write", "box.BoxList.to_list"], "methods", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box._to_json", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box._to_json", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.BoxList.to_list"], ["", "def", "to_json", "(", "self", ",", "filename", "=", "None", ",", "\n", "encoding", "=", "\"utf-8\"", ",", "errors", "=", "\"strict\"", ",", "\n", "multiline", "=", "False", ",", "**", "json_kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Transform the BoxList object into a JSON string.\n\n        :param filename: If provided will save to file\n        :param encoding: File encoding\n        :param errors: How to handle encoding errors\n        :param multiline: Put each item in list onto it's own line\n        :param json_kwargs: additional arguments to pass to json.dump(s)\n        :return: string of JSON or return of `json.dump`\n        \"\"\"", "\n", "if", "filename", "and", "multiline", ":", "\n", "            ", "lines", "=", "[", "_to_json", "(", "item", ",", "filename", "=", "False", ",", "encoding", "=", "encoding", ",", "\n", "errors", "=", "errors", ",", "**", "json_kwargs", ")", "for", "item", "in", "self", "]", "\n", "with", "open", "(", "filename", ",", "'w'", ",", "encoding", "=", "encoding", ",", "errors", "=", "errors", ")", "as", "f", ":", "\n", "                ", "f", ".", "write", "(", "\"\\n\"", ".", "join", "(", "lines", ")", ".", "decode", "(", "'utf-8'", ")", "if", "\n", "sys", ".", "version_info", "<", "(", "3", ",", "0", ")", "else", "\"\\n\"", ".", "join", "(", "lines", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "return", "_to_json", "(", "self", ".", "to_list", "(", ")", ",", "filename", "=", "filename", ",", "\n", "encoding", "=", "encoding", ",", "errors", "=", "errors", ",", "**", "json_kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.BoxList.from_json": [[884, 911], ["kwargs.copy", "box._from_json", "cls", "isinstance", "box.BoxError", "kwargs.pop", "type"], "methods", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.copy", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box._from_json", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.pop"], ["", "", "@", "classmethod", "\n", "def", "from_json", "(", "cls", ",", "json_string", "=", "None", ",", "filename", "=", "None", ",", "encoding", "=", "\"utf-8\"", ",", "\n", "errors", "=", "\"strict\"", ",", "multiline", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Transform a json object string into a BoxList object. If the incoming\n        json is a dict, you must use Box.from_json.\n\n        :param json_string: string to pass to `json.loads`\n        :param filename: filename to open and pass to `json.load`\n        :param encoding: File encoding\n        :param errors: How to handle encoding errors\n        :param multiline: One object per line\n        :param kwargs: parameters to pass to `Box()` or `json.loads`\n        :return: BoxList object from json data\n        \"\"\"", "\n", "bx_args", "=", "{", "}", "\n", "for", "arg", "in", "kwargs", ".", "copy", "(", ")", ":", "\n", "            ", "if", "arg", "in", "BOX_PARAMETERS", ":", "\n", "                ", "bx_args", "[", "arg", "]", "=", "kwargs", ".", "pop", "(", "arg", ")", "\n", "\n", "", "", "data", "=", "_from_json", "(", "json_string", ",", "filename", "=", "filename", ",", "encoding", "=", "encoding", ",", "\n", "errors", "=", "errors", ",", "multiline", "=", "multiline", ",", "**", "kwargs", ")", "\n", "\n", "if", "not", "isinstance", "(", "data", ",", "list", ")", ":", "\n", "            ", "raise", "BoxError", "(", "'json data not returned as a list, '", "\n", "'but rather a {0}'", ".", "format", "(", "type", "(", "data", ")", ".", "__name__", ")", ")", "\n", "", "return", "cls", "(", "data", ",", "**", "bx_args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.BoxList.box_it_up": [[959, 963], ["hasattr", "v.box_it_up"], "methods", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.BoxList.box_it_up"], ["", "", "def", "box_it_up", "(", "self", ")", ":", "\n", "        ", "for", "v", "in", "self", ":", "\n", "            ", "if", "hasattr", "(", "v", ",", "'box_it_up'", ")", "and", "v", "is", "not", "self", ":", "\n", "                ", "v", ".", "box_it_up", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.ConfigBox.__getattr__": [[983, 990], ["box.Box.__getattr__", "box.Box.__getattr__", "item.lower"], "methods", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.utils.MyDataParallel.__getattr__", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.utils.MyDataParallel.__getattr__"], ["def", "__getattr__", "(", "self", ",", "item", ")", ":", "\n", "        ", "\"\"\"Config file keys are stored in lower case, be a little more\n        loosey goosey\"\"\"", "\n", "try", ":", "\n", "            ", "return", "super", "(", "ConfigBox", ",", "self", ")", ".", "__getattr__", "(", "item", ")", "\n", "", "except", "AttributeError", ":", "\n", "            ", "return", "super", "(", "ConfigBox", ",", "self", ")", ".", "__getattr__", "(", "item", ".", "lower", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.ConfigBox.__dir__": [[991, 995], ["box.Box.__dir__"], "methods", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.ConfigBox.__dir__"], ["", "", "def", "__dir__", "(", "self", ")", ":", "\n", "        ", "return", "super", "(", "ConfigBox", ",", "self", ")", ".", "__dir__", "(", ")", "+", "[", "'bool'", ",", "'int'", ",", "'float'", ",", "\n", "'list'", ",", "'getboolean'", ",", "\n", "'getfloat'", ",", "'getint'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.ConfigBox.bool": [[996, 1018], ["isinstance", "box.ConfigBox.__getattr__", "box.ConfigBox.bool"], "methods", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.utils.MyDataParallel.__getattr__", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.ConfigBox.bool"], ["", "def", "bool", "(", "self", ",", "item", ",", "default", "=", "None", ")", ":", "\n", "        ", "\"\"\" Return value of key as a boolean\n\n        :param item: key of value to transform\n        :param default: value to return if item does not exist\n        :return: approximated bool of value\n        \"\"\"", "\n", "try", ":", "\n", "            ", "item", "=", "self", ".", "__getattr__", "(", "item", ")", "\n", "", "except", "AttributeError", "as", "err", ":", "\n", "            ", "if", "default", "is", "not", "None", ":", "\n", "                ", "return", "default", "\n", "", "raise", "err", "\n", "\n", "", "if", "isinstance", "(", "item", ",", "(", "bool", ",", "int", ")", ")", ":", "\n", "            ", "return", "bool", "(", "item", ")", "\n", "\n", "", "if", "(", "isinstance", "(", "item", ",", "str", ")", "and", "\n", "item", ".", "lower", "(", ")", "in", "(", "'n'", ",", "'no'", ",", "'false'", ",", "'f'", ",", "'0'", ")", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "True", "if", "item", "else", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.ConfigBox.int": [[1019, 1033], ["box.ConfigBox.int"], "methods", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.ConfigBox.int"], ["", "def", "int", "(", "self", ",", "item", ",", "default", "=", "None", ")", ":", "\n", "        ", "\"\"\" Return value of key as an int\n\n        :param item: key of value to transform\n        :param default: value to return if item does not exist\n        :return: int of value\n        \"\"\"", "\n", "try", ":", "\n", "            ", "item", "=", "self", ".", "__getattr__", "(", "item", ")", "\n", "", "except", "AttributeError", "as", "err", ":", "\n", "            ", "if", "default", "is", "not", "None", ":", "\n", "                ", "return", "default", "\n", "", "raise", "err", "\n", "", "return", "int", "(", "item", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.ConfigBox.float": [[1034, 1048], ["box.ConfigBox.float"], "methods", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.ConfigBox.float"], ["", "def", "float", "(", "self", ",", "item", ",", "default", "=", "None", ")", ":", "\n", "        ", "\"\"\" Return value of key as a float\n\n        :param item: key of value to transform\n        :param default: value to return if item does not exist\n        :return: float of value\n        \"\"\"", "\n", "try", ":", "\n", "            ", "item", "=", "self", ".", "__getattr__", "(", "item", ")", "\n", "", "except", "AttributeError", "as", "err", ":", "\n", "            ", "if", "default", "is", "not", "None", ":", "\n", "                ", "return", "default", "\n", "", "raise", "err", "\n", "", "return", "float", "(", "item", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.ConfigBox.list": [[1049, 1071], ["box.ConfigBox.__getattr__", "item.lstrip().rstrip.lstrip().rstrip.lstrip().rstrip", "box.ConfigBox.list"], "methods", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.utils.MyDataParallel.__getattr__", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.ConfigBox.list"], ["", "def", "list", "(", "self", ",", "item", ",", "default", "=", "None", ",", "spliter", "=", "\",\"", ",", "strip", "=", "True", ",", "mod", "=", "None", ")", ":", "\n", "        ", "\"\"\" Return value of key as a list\n\n        :param item: key of value to transform\n        :param mod: function to map against list\n        :param default: value to return if item does not exist\n        :param spliter: character to split str on\n        :param strip: clean the list with the `strip`\n        :return: list of items\n        \"\"\"", "\n", "try", ":", "\n", "            ", "item", "=", "self", ".", "__getattr__", "(", "item", ")", "\n", "", "except", "AttributeError", "as", "err", ":", "\n", "            ", "if", "default", "is", "not", "None", ":", "\n", "                ", "return", "default", "\n", "", "raise", "err", "\n", "", "if", "strip", ":", "\n", "            ", "item", "=", "item", ".", "lstrip", "(", "'['", ")", ".", "rstrip", "(", "']'", ")", "\n", "", "out", "=", "[", "x", ".", "strip", "(", ")", "if", "strip", "else", "x", "for", "x", "in", "item", ".", "split", "(", "spliter", ")", "]", "\n", "if", "mod", ":", "\n", "            ", "return", "list", "(", "map", "(", "mod", ",", "out", ")", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.ConfigBox.getboolean": [[1074, 1076], ["box.ConfigBox.bool"], "methods", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.ConfigBox.bool"], ["", "def", "getboolean", "(", "self", ",", "item", ",", "default", "=", "None", ")", ":", "\n", "        ", "return", "self", ".", "bool", "(", "item", ",", "default", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.ConfigBox.getint": [[1077, 1079], ["box.ConfigBox.int"], "methods", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.ConfigBox.int"], ["", "def", "getint", "(", "self", ",", "item", ",", "default", "=", "None", ")", ":", "\n", "        ", "return", "self", ".", "int", "(", "item", ",", "default", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.ConfigBox.getfloat": [[1080, 1082], ["box.ConfigBox.float"], "methods", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.ConfigBox.float"], ["", "def", "getfloat", "(", "self", ",", "item", ",", "default", "=", "None", ")", ":", "\n", "        ", "return", "self", ".", "float", "(", "item", ",", "default", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.ConfigBox.__repr__": [[1083, 1085], ["str", "box.ConfigBox.to_dict"], "methods", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.to_dict"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'<ConfigBox: {0}>'", ".", "format", "(", "str", "(", "self", ".", "to_dict", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.SBox.dict": [[1096, 1099], ["box.SBox.to_dict"], "methods", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.to_dict"], ["@", "property", "\n", "def", "dict", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.SBox.json": [[1100, 1103], ["box.SBox.to_json"], "methods", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.BoxList.to_json"], ["", "@", "property", "\n", "def", "json", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "to_json", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.SBox.__repr__": [[1109, 1111], ["str", "box.SBox.to_dict"], "methods", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.to_dict"], ["", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'<ShorthandBox: {0}>'", ".", "format", "(", "str", "(", "self", ".", "to_dict", "(", ")", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box._to_json": [[61, 71], ["json.dumps", "open", "f.write", "json.dumps.decode"], "function", ["None"], ["", "def", "_to_json", "(", "obj", ",", "filename", "=", "None", ",", "\n", "encoding", "=", "\"utf-8\"", ",", "errors", "=", "\"strict\"", ",", "**", "json_kwargs", ")", ":", "\n", "    ", "json_dump", "=", "json", ".", "dumps", "(", "obj", ",", "\n", "ensure_ascii", "=", "False", ",", "**", "json_kwargs", ")", "\n", "if", "filename", ":", "\n", "        ", "with", "open", "(", "filename", ",", "'w'", ",", "encoding", "=", "encoding", ",", "errors", "=", "errors", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "json_dump", "if", "sys", ".", "version_info", ">=", "(", "3", ",", "0", ")", "else", "\n", "json_dump", ".", "decode", "(", "\"utf-8\"", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "return", "json_dump", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box._from_json": [[73, 87], ["open", "json.loads", "box.BoxError", "json.load", "json.loads", "line.strip", "line.strip", "line.strip().startswith", "line.strip"], "function", ["None"], ["", "", "def", "_from_json", "(", "json_string", "=", "None", ",", "filename", "=", "None", ",", "\n", "encoding", "=", "\"utf-8\"", ",", "errors", "=", "\"strict\"", ",", "multiline", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "filename", ":", "\n", "        ", "with", "open", "(", "filename", ",", "'r'", ",", "encoding", "=", "encoding", ",", "errors", "=", "errors", ")", "as", "f", ":", "\n", "            ", "if", "multiline", ":", "\n", "                ", "data", "=", "[", "json", ".", "loads", "(", "line", ".", "strip", "(", ")", ",", "**", "kwargs", ")", "for", "line", "in", "f", "\n", "if", "line", ".", "strip", "(", ")", "and", "not", "line", ".", "strip", "(", ")", ".", "startswith", "(", "\"#\"", ")", "]", "\n", "", "else", ":", "\n", "                ", "data", "=", "json", ".", "load", "(", "f", ",", "**", "kwargs", ")", "\n", "", "", "", "elif", "json_string", ":", "\n", "        ", "data", "=", "json", ".", "loads", "(", "json_string", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "        ", "raise", "BoxError", "(", "'from_json requires a string or filename'", ")", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box._to_yaml": [[89, 102], ["yaml.dump", "open", "yaml.dump"], "function", ["None"], ["", "def", "_to_yaml", "(", "obj", ",", "filename", "=", "None", ",", "default_flow_style", "=", "False", ",", "\n", "encoding", "=", "\"utf-8\"", ",", "errors", "=", "\"strict\"", ",", "\n", "**", "yaml_kwargs", ")", ":", "\n", "    ", "if", "filename", ":", "\n", "        ", "with", "open", "(", "filename", ",", "'w'", ",", "\n", "encoding", "=", "encoding", ",", "errors", "=", "errors", ")", "as", "f", ":", "\n", "            ", "yaml", ".", "dump", "(", "obj", ",", "stream", "=", "f", ",", "\n", "default_flow_style", "=", "default_flow_style", ",", "\n", "**", "yaml_kwargs", ")", "\n", "", "", "else", ":", "\n", "        ", "return", "yaml", ".", "dump", "(", "obj", ",", "\n", "default_flow_style", "=", "default_flow_style", ",", "\n", "**", "yaml_kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box._from_yaml": [[104, 116], ["open", "yaml.load", "yaml.load", "box.BoxError"], "function", ["None"], ["", "", "def", "_from_yaml", "(", "yaml_string", "=", "None", ",", "filename", "=", "None", ",", "\n", "encoding", "=", "\"utf-8\"", ",", "errors", "=", "\"strict\"", ",", "\n", "**", "kwargs", ")", ":", "\n", "    ", "if", "filename", ":", "\n", "        ", "with", "open", "(", "filename", ",", "'r'", ",", "\n", "encoding", "=", "encoding", ",", "errors", "=", "errors", ")", "as", "f", ":", "\n", "            ", "data", "=", "yaml", ".", "load", "(", "f", ",", "**", "kwargs", ")", "\n", "", "", "elif", "yaml_string", ":", "\n", "        ", "data", "=", "yaml", ".", "load", "(", "yaml_string", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "        ", "raise", "BoxError", "(", "'from_yaml requires a string or filename'", ")", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box._safe_key": [[121, 126], ["str", "key.encode"], "function", ["None"], ["", "def", "_safe_key", "(", "key", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "return", "str", "(", "key", ")", "\n", "", "except", "UnicodeEncodeError", ":", "\n", "        ", "return", "key", ".", "encode", "(", "\"utf-8\"", ",", "\"ignore\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box._safe_attr": [[128, 155], ["box._safe_key", "_camel_killer.replace", "out.strip.strip", "re.sub", "box._camel_killer", "int"], "function", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box._safe_key", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box._camel_killer", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.ConfigBox.int"], ["", "", "def", "_safe_attr", "(", "attr", ",", "camel_killer", "=", "False", ",", "replacement_char", "=", "'x'", ")", ":", "\n", "    ", "\"\"\"Convert a key into something that is accessible as an attribute\"\"\"", "\n", "allowed", "=", "string", ".", "ascii_letters", "+", "string", ".", "digits", "+", "'_'", "\n", "\n", "attr", "=", "_safe_key", "(", "attr", ")", "\n", "\n", "if", "camel_killer", ":", "\n", "        ", "attr", "=", "_camel_killer", "(", "attr", ")", "\n", "\n", "", "attr", "=", "attr", ".", "replace", "(", "' '", ",", "'_'", ")", "\n", "\n", "out", "=", "''", "\n", "for", "character", "in", "attr", ":", "\n", "        ", "out", "+=", "character", "if", "character", "in", "allowed", "else", "\"_\"", "\n", "", "out", "=", "out", ".", "strip", "(", "\"_\"", ")", "\n", "\n", "try", ":", "\n", "        ", "int", "(", "out", "[", "0", "]", ")", "\n", "", "except", "(", "ValueError", ",", "IndexError", ")", ":", "\n", "        ", "pass", "\n", "", "else", ":", "\n", "        ", "out", "=", "'{0}{1}'", ".", "format", "(", "replacement_char", ",", "out", ")", "\n", "\n", "", "if", "out", "in", "kwlist", ":", "\n", "        ", "out", "=", "'{0}{1}'", ".", "format", "(", "replacement_char", ",", "out", ")", "\n", "\n", "", "return", "re", ".", "sub", "(", "'_+'", ",", "'_'", ",", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box._camel_killer": [[157, 172], ["_first_cap_re.sub", "_all_cap_re.sub", "re.sub", "str", "attr.encode.encode", "hasattr", "_all_cap_re.sub.casefold", "_all_cap_re.sub.lower"], "function", ["None"], ["", "def", "_camel_killer", "(", "attr", ")", ":", "\n", "    ", "\"\"\"\n    CamelKiller, qu'est-ce que c'est?\n\n    Taken from http://stackoverflow.com/a/1176023/3244542\n    \"\"\"", "\n", "try", ":", "\n", "        ", "attr", "=", "str", "(", "attr", ")", "\n", "", "except", "UnicodeEncodeError", ":", "\n", "        ", "attr", "=", "attr", ".", "encode", "(", "\"utf-8\"", ",", "\"ignore\"", ")", "\n", "\n", "", "s1", "=", "_first_cap_re", ".", "sub", "(", "r'\\1_\\2'", ",", "attr", ")", "\n", "s2", "=", "_all_cap_re", ".", "sub", "(", "r'\\1_\\2'", ",", "s1", ")", "\n", "return", "re", ".", "sub", "(", "'_+'", ",", "'_'", ",", "s2", ".", "casefold", "(", ")", "if", "hasattr", "(", "s2", ",", "'casefold'", ")", "else", "\n", "s2", ".", "lower", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box._recursive_tuples": [[174, 185], ["tuple", "isinstance", "out_list.append", "box_class", "isinstance", "out_list.append", "out_list.append", "isinstance", "box._recursive_tuples"], "function", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.BoxList.append", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.BoxList.append", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.BoxList.append", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box._recursive_tuples"], ["", "def", "_recursive_tuples", "(", "iterable", ",", "box_class", ",", "recreate_tuples", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "out_list", "=", "[", "]", "\n", "for", "i", "in", "iterable", ":", "\n", "        ", "if", "isinstance", "(", "i", ",", "dict", ")", ":", "\n", "            ", "out_list", ".", "append", "(", "box_class", "(", "i", ",", "**", "kwargs", ")", ")", "\n", "", "elif", "isinstance", "(", "i", ",", "list", ")", "or", "(", "recreate_tuples", "and", "isinstance", "(", "i", ",", "tuple", ")", ")", ":", "\n", "            ", "out_list", ".", "append", "(", "_recursive_tuples", "(", "i", ",", "box_class", ",", "\n", "recreate_tuples", ",", "**", "kwargs", ")", ")", "\n", "", "else", ":", "\n", "            ", "out_list", ".", "append", "(", "i", ")", "\n", "", "", "return", "tuple", "(", "out_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box._conversion_checks": [[187, 228], ["len", "len", "set", "set", "box_config[].startswith", "box._safe_attr", "list", "box._safe_attr", "set", "set.add", "warnings.warn", "box.BoxError", "set.add"], "function", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box._safe_attr", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.ConfigBox.list", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box._safe_attr"], ["", "def", "_conversion_checks", "(", "item", ",", "keys", ",", "box_config", ",", "check_only", "=", "False", ",", "\n", "pre_check", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Internal use for checking if a duplicate safe attribute already exists\n\n    :param item: Item to see if a dup exists\n    :param keys: Keys to check against\n    :param box_config: Easier to pass in than ask for specfic items\n    :param check_only: Don't bother doing the conversion work\n    :param pre_check: Need to add the item to the list of keys to check\n    :return: the original unmodified key, if exists and not check_only\n    \"\"\"", "\n", "if", "box_config", "[", "'box_duplicates'", "]", "!=", "'ignore'", ":", "\n", "        ", "if", "pre_check", ":", "\n", "            ", "keys", "=", "list", "(", "keys", ")", "+", "[", "item", "]", "\n", "\n", "", "key_list", "=", "[", "(", "k", ",", "\n", "_safe_attr", "(", "k", ",", "camel_killer", "=", "box_config", "[", "'camel_killer_box'", "]", ",", "\n", "replacement_char", "=", "box_config", "[", "'box_safe_prefix'", "]", "\n", ")", ")", "for", "k", "in", "keys", "]", "\n", "if", "len", "(", "key_list", ")", ">", "len", "(", "set", "(", "x", "[", "1", "]", "for", "x", "in", "key_list", ")", ")", ":", "\n", "            ", "seen", "=", "set", "(", ")", "\n", "dups", "=", "set", "(", ")", "\n", "for", "x", "in", "key_list", ":", "\n", "                ", "if", "x", "[", "1", "]", "in", "seen", ":", "\n", "                    ", "dups", ".", "add", "(", "\"{0}({1})\"", ".", "format", "(", "x", "[", "0", "]", ",", "x", "[", "1", "]", ")", ")", "\n", "", "seen", ".", "add", "(", "x", "[", "1", "]", ")", "\n", "", "if", "box_config", "[", "'box_duplicates'", "]", ".", "startswith", "(", "\"warn\"", ")", ":", "\n", "                ", "warnings", ".", "warn", "(", "'Duplicate conversion attributes exist: '", "\n", "'{0}'", ".", "format", "(", "dups", ")", ")", "\n", "", "else", ":", "\n", "                ", "raise", "BoxError", "(", "'Duplicate conversion attributes exist: '", "\n", "'{0}'", ".", "format", "(", "dups", ")", ")", "\n", "", "", "", "if", "check_only", ":", "\n", "        ", "return", "\n", "# This way will be slower for warnings, as it will have double work", "\n", "# But faster for the default 'ignore'", "\n", "", "for", "k", "in", "keys", ":", "\n", "        ", "if", "item", "==", "_safe_attr", "(", "k", ",", "camel_killer", "=", "box_config", "[", "'camel_killer_box'", "]", ",", "\n", "replacement_char", "=", "box_config", "[", "'box_safe_prefix'", "]", ")", ":", "\n", "            ", "return", "k", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box._get_box_config": [[230, 247], ["set", "kwargs.pop", "kwargs.pop", "kwargs.pop", "kwargs.pop", "kwargs.pop", "kwargs.pop", "kwargs.pop", "kwargs.pop", "kwargs.pop", "kwargs.pop"], "function", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.pop", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.pop", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.pop", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.pop", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.pop", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.pop", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.pop", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.pop", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.pop", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.pop"], ["", "", "", "def", "_get_box_config", "(", "cls", ",", "kwargs", ")", ":", "\n", "    ", "return", "{", "\n", "# Internal use only", "\n", "'__converted'", ":", "set", "(", ")", ",", "\n", "'__box_heritage'", ":", "kwargs", ".", "pop", "(", "'__box_heritage'", ",", "None", ")", ",", "\n", "'__created'", ":", "False", ",", "\n", "'__ordered_box_values'", ":", "[", "]", ",", "\n", "# Can be changed by user after box creation", "\n", "'default_box'", ":", "kwargs", ".", "pop", "(", "'default_box'", ",", "False", ")", ",", "\n", "'default_box_attr'", ":", "kwargs", ".", "pop", "(", "'default_box_attr'", ",", "cls", ")", ",", "\n", "'conversion_box'", ":", "kwargs", ".", "pop", "(", "'conversion_box'", ",", "True", ")", ",", "\n", "'box_safe_prefix'", ":", "kwargs", ".", "pop", "(", "'box_safe_prefix'", ",", "'x'", ")", ",", "\n", "'frozen_box'", ":", "kwargs", ".", "pop", "(", "'frozen_box'", ",", "False", ")", ",", "\n", "'camel_killer_box'", ":", "kwargs", ".", "pop", "(", "'camel_killer_box'", ",", "False", ")", ",", "\n", "'modify_tuples_box'", ":", "kwargs", ".", "pop", "(", "'modify_tuples_box'", ",", "False", ")", ",", "\n", "'box_duplicates'", ":", "kwargs", ".", "pop", "(", "'box_duplicates'", ",", "'ignore'", ")", ",", "\n", "'ordered_box'", ":", "kwargs", ".", "pop", "(", "'ordered_box'", ",", "False", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.parmapper._Exception.__init__": [[43, 46], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "E", ",", "infun", "=", "True", ")", ":", "\n", "        ", "self", ".", "E", "=", "E", "\n", "self", ".", "infun", "=", "infun", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.parmapper.ParEval.__init__": [[602, 617], ["ValueError"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "fun", ",", "n_chunks", "=", "None", ",", "n_eval", "=", "None", ",", "n_min", "=", "0", ",", "**", "kwargs", ")", ":", "\n", "        ", "global", "np", "\n", "if", "np", "is", "None", ":", "\n", "            ", "import", "numpy", "as", "np", "\n", "\n", "", "self", ".", "fun", "=", "fun", "\n", "if", "(", "n_chunks", "is", "not", "None", ")", "and", "(", "n_eval", "is", "not", "None", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'Must specify EITHER n_chunks OR n_eval'", ")", "\n", "", "if", "n_chunks", "is", "None", "and", "n_eval", "is", "None", ":", "\n", "            ", "n_chunks", "=", "CPU_COUNT", "\n", "", "self", ".", "n_chunks", "=", "n_chunks", "\n", "self", ".", "n_eval", "=", "n_eval", "\n", "\n", "self", ".", "n_min", "=", "n_min", "\n", "self", ".", "kwargs", "=", "kwargs", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.parmapper.ParEval.__call__": [[618, 624], ["parmapper._chunker", "list", "np.concatenate", "parmapper.parmap"], "methods", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.ConfigBox.list", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.utils.parmap"], ["", "def", "__call__", "(", "self", ",", "X", ")", ":", "\n", "        ", "chunker", "=", "_chunker", "(", "X", ",", "n_chunks", "=", "self", ".", "n_chunks", ",", "\n", "n_eval", "=", "self", ".", "n_eval", ",", "\n", "n_min", "=", "self", ".", "n_min", ")", "\n", "res", "=", "list", "(", "parmap", "(", "self", ".", "fun", ",", "chunker", ",", "**", "self", ".", "kwargs", ")", ")", "\n", "return", "np", ".", "concatenate", "(", "res", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.parmapper._chunker.__init__": [[627, 648], ["np.atleast_1d", "len", "np.asarray", "np.cumsum().tolist", "len", "max", "int", "np.ceil", "np.cumsum"], "methods", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.ConfigBox.int"], ["def", "__init__", "(", "self", ",", "X", ",", "n_chunks", "=", "None", ",", "n_eval", "=", "None", ",", "n_min", "=", "0", ")", ":", "\n", "        ", "global", "np", "\n", "if", "np", "is", "None", ":", "\n", "            ", "import", "numpy", "as", "np", "\n", "", "self", ".", "X", "=", "X", "=", "np", ".", "atleast_1d", "(", "X", ")", "\n", "n", "=", "len", "(", "X", ")", "\n", "# Get number of chunks", "\n", "if", "n_eval", "is", "not", "None", ":", "\n", "            ", "n_eval", "=", "max", "(", "n_min", ",", "n_eval", ")", "\n", "n_chunks", "=", "int", "(", "np", ".", "ceil", "(", "n", "/", "n_eval", ")", ")", "\n", "", "if", "n_chunks", "is", "not", "None", ":", "\n", "            ", "n_chunks", "=", "n_chunks", "\n", "if", "n", "//", "n_chunks", "<", "n_min", ":", "\n", "                ", "n_chunks", "=", "n", "//", "n_min", "\n", "\n", "", "", "stops", "=", "np", ".", "asarray", "(", "[", "n", "//", "n_chunks", "]", "*", "n_chunks", ",", "dtype", "=", "int", ")", "\n", "stops", "[", ":", "n", "%", "n_chunks", "]", "+=", "1", "\n", "self", ".", "stops", "=", "stops", "=", "np", ".", "cumsum", "(", "stops", ")", ".", "tolist", "(", ")", "\n", "self", ".", "len", "=", "len", "(", "stops", ")", "\n", "\n", "self", ".", "ii", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.parmapper._chunker.__next__": [[649, 657], ["StopIteration"], "methods", ["None"], ["", "def", "__next__", "(", "self", ")", ":", "\n", "        ", "ii", "=", "self", ".", "ii", "\n", "if", "ii", "==", "self", ".", "len", ":", "\n", "            ", "raise", "StopIteration", "(", ")", "\n", "", "a", "=", "0", "if", "ii", "==", "0", "else", "self", ".", "stops", "[", "ii", "-", "1", "]", "\n", "b", "=", "self", ".", "stops", "[", "ii", "]", "\n", "self", ".", "ii", "+=", "1", "\n", "return", "self", ".", "X", "[", "a", ":", "b", "]", "\n", "", "next", "=", "__next__", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.parmapper._chunker.__iter__": [[658, 660], ["None"], "methods", ["None"], ["def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.parmapper._chunker.__len__": [[661, 663], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "len", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.parmapper.parmap": [[47, 383], ["max", "multiprocessing.JoinableQueue", "multiprocessing.Queue", "threading.Thread", "threading.Thread.start", "parmapper.parmap.queue_getter"], "function", ["None"], ["", "", "def", "parmap", "(", "fun", ",", "seq", ",", "N", "=", "None", ",", "Nt", "=", "1", ",", "chunksize", "=", "1", ",", "ordered", "=", "True", ",", "daemon", "=", "False", ",", "progress", "=", "False", ",", "\n", "args", "=", "(", ")", ",", "kwargs", "=", "None", ",", "\n", "star", "=", "False", ",", "kwstar", "=", "False", ",", "\n", "exception", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    parmap -- Simple parallel mapper that can split amongst processes (N)\n              and threads (Nt) (within the processes).\n\n              Does *NOT* require functions to be pickleable (unlike\n              vanilla multiprocess.Pool.map)\n\n    Inputs:\n    -------\n    fun\n        Single input function. Use lambdas or functools.partial\n        to enable/exapnd multi-input. See example\n\n    seq\n        Sequence of inputs to map in parallel\n\n    Options:\n    --------\n    N [None] (integer or None)\n        Number of processes to use. If `None`, will use the CPU_COUNT\n\n    Nt [1] (integer)\n        Number of threads to use. See notes below on multi-threaded vs\n        multi-processes.\n\n    chunksize [1] (int)\n        How to be break up the incoming sequence. Useful if also using threads.\n        Will be (re)set to max(chunksize,Nt). \n        \n        Alternativly, if len(seq) exists and chunksize=-1 it will be reset\n        to ceil(len(seq)/(N*Nt)). If chunksize=-1 and len(sequence) is not\n        known, a warning will be emitted and chucksize will be reset to \n        max(chunksize,Nt)\n        \n\n    ordered [True] (bool)\n        Whether or not to order the results. If False, will return in whatever\n        order they finished.\n\n    daemon [False] (bool)\n        Sets the multiprocessing `daemon` flag. If  True, can not spawn child\n        processes (i.e. cannot nest parmap) but should allow for CTRL+C type\n        stopping. Supposedly, there may be issues with CTRL+C with it set to\n        False. Use at your own risk\n\n    progress [False] (bool)\n        Display a progress bar or counter.\n        Warning: Inconsistant in iPython/Jupyter notebooks and may clear\n        other printed content. Instead, specify as 'nb' to use a Jupyter \n        Widget progress bar.\n    \n    args [tuple()]\n        Specify additional arguments for the function\n    \n    kwargs [dict()]\n        Specify additional keyword arguments\n\n    star [False]\n        If True, the arguments to the function will be \"starred\" so, for example\n        if `seq = [ (1,2), (3,4) ]`, the function will be called as\n            star is False: fun((1,2))\n            star is True:  fun(1,2) <==> fun(*(1,2))\n        Can also set to None to not send anything\n        \n    kwstar [False]\n        Assumes all items are (vals,kwvals) where `vals` RESPECTS `star` \n        setting and still includes `args` and `kwvals`. See \"Additional \n        Arguments\" section below.\n    \n    exception ['raise' if N>1 else 'proc']\n        Choose how to handle an exception in a child process\n        \n        'raise'     : [Default] raise the exception (outside of the Process). \n                      Also terminates all existing processes.\n        'return'    : Return the Exception instead of raising it.\n        'proc'      : Raise the exception inside the process. NOT RECOMMENDED\n                      unless used in debugging (and with N=1)\n        \n        Note: An additional attribute called `seq_index` will also be set\n              in the exception (whether raised or returned) to aid in debugging.\n        \n    Additional Arguments\n    --------------------\n    As noted above, there are many ways to pass additional arguments to\n    your function. All of these are not completely needed since parmap\n    makes using lambdas so easy, but they are there if preffered.\n    \n    Assume the following function:\n    \n        def dj(dictA,dictB):\n            '''Join dictA and dictB where dictB takes precedence'''\n            dictA = dictA.copy()\n            dictA.update(dictB) # NOTE: dictB takes precedence\n            return dictA\n\n    Then the behavior is as follows where `args` and `kwargs` come from\n    they main function call. The `val` (singular), `vals` (sequence/tuple of \n    values), and `kwvals` are set via the sequence.\n    \n    | star  | kwstar | expected item | function args  | function keywords   |\n    |-------|--------|---------------|----------------|---------------------|\n    | False | False  | val           | *((val,)+args) | **kwargs            |\u2020\n    | True  | False  | vals          | *(vals+args)   | **kwargs            |\n    | None  | False  | ---           | *args          | **kwargs            |\u00b0\n    | None  | True   | ---           | *args          | **dj(kwargs,kwvals) |\u2021\n    | False | True   | val,kwval     | *((val,)+args) | **dj(kwargs,kwvals) |\u2021\n    | True  | True   | vals,kwval    | *(vals+args)   | **dj(kwargs,kwvals) |\u2021\n                                                        \n                \u2020 Default\n                \u00b0 If kwargs and args are empty, basically calls with nothing\n                \u2021 Note the ordering so kwvals takes precedance\n\n    Note:\n    ------\n    Performs SEMI-lazy iteration based on chunksize. It will exhaust the input\n    iterator but will yield as results are computed (This is similar to the\n    `multiprocessing.Pool().imap` behavior)\n\n    Explicitly wrap the parmap call in a list(...) to force immediate\n    evaluation\n\n    Threads and/or processes:\n    -------------------------\n    This tool has the ability to split work amongst python processes\n    (via multiprocessing) and python threads (via the multiprocessing.dummy\n    module). Python is not very performant in multi-threaded situations\n    (due to the GIL) therefore, processes are the usually the best for CPU\n    bound tasks and threading is good for those that release the GIL (such\n    as IO-bound tasks). \n    \n    WARNING: Many NumPy functions *do* release the GIL and can be threaded, \n             but many NumPy functions are, themselves, multi-threaded.\n\n    Alternatives:\n    -------------\n\n    This tool allows more data types, can split with threads, has an optional\n    progress bar, and has fewer pickling issues, but these come at a small cost. \n    For simple needs, the following may be better:\n\n    >>> import multiprocessing as mp\n    >>> pool = mp.Pool(N) # Or mp.Pool() for N=None\n    >>> results = list( pool.imap(fun,seq) ) # or just pool.map\n    >>> pool.close()\n    \n    Additional Note\n    ---------------\n    For the sake of convienance, a `map=imap=__call__` and\n    `close = lamba *a,**k:None` are also added so a parmap function can mimic\n    a multiprocessing pool object with duck typing\n\n    Version:\n    -------\n    __version__\n    \n    \"\"\"", "\n", "\n", "# Build up a dummy function with args,vals,kwargs, and kwvals", "\n", "if", "kwargs", "is", "None", ":", "\n", "        ", "kwargs", "=", "{", "}", "\n", "\n", "", "def", "_fun", "(", "ss", ")", ":", "\n", "        ", "_args", "=", "list", "(", "args", ")", "\n", "_kw", "=", "kwargs", ".", "copy", "(", ")", "\n", "try", ":", "\n", "# Check for None before boolean", "\n", "            ", "if", "star", "is", "None", "and", "kwstar", ":", "# 4", "\n", "                ", "_kw", ".", "update", "(", "ss", ")", "\n", "", "elif", "star", "is", "None", "and", "not", "kwstar", ":", "# 3", "\n", "                ", "pass", "\n", "", "elif", "not", "star", "and", "not", "kwstar", ":", "# 1", "\n", "                ", "_args", "=", "[", "ss", "]", "+", "_args", "\n", "", "elif", "star", "and", "not", "kwstar", ":", "# 2", "\n", "                ", "_args", "=", "list", "(", "ss", ")", "+", "_args", "\n", "", "elif", "not", "star", "and", "kwstar", ":", "# 5", "\n", "                ", "_args", "=", "[", "ss", "[", "0", "]", "]", "+", "_args", "\n", "_kw", ".", "update", "(", "ss", "[", "1", "]", ")", "\n", "", "elif", "star", "and", "kwstar", ":", "# 6", "\n", "                ", "_args", "=", "list", "(", "ss", "[", "0", "]", ")", "+", "_args", "\n", "_kw", ".", "update", "(", "ss", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "                ", "raise", "TypeError", "(", ")", "\n", "\n", "", "", "except", "TypeError", ":", "# Mostly because bad input types", "\n", "            ", "return", "_Exception", "(", "TypeError", "(", "'Ensure `args` are tuples and `kwargs` are dicts'", ")", ",", "infun", "=", "False", ")", "\n", "", "except", "Exception", "as", "E", ":", "\n", "            ", "return", "_Exception", "(", "E", ",", "infun", "=", "False", ")", "\n", "\n", "", "if", "exception", "==", "'proc'", ":", "\n", "            ", "return", "fun", "(", "*", "_args", ",", "**", "_kw", ")", "# Outside of a try", "\n", "", "try", ":", "\n", "            ", "return", "fun", "(", "*", "_args", ",", "**", "_kw", ")", "\n", "", "except", "Exception", "as", "E", ":", "\n", "            ", "return", "_Exception", "(", "E", ")", "\n", "# It would be great to include all of sys.exc_info() but tracebacks", "\n", "# cannot be pickled.", "\n", "\n", "", "", "try", ":", "\n", "        ", "tot", "=", "len", "(", "seq", ")", "\n", "", "except", "TypeError", ":", "\n", "        ", "tot", "=", "None", "\n", "\n", "", "N", "=", "CPU_COUNT", "if", "N", "is", "None", "else", "N", "\n", "\n", "if", "exception", "is", "None", ":", "\n", "        ", "exception", "=", "'raise'", "if", "N", ">", "1", "else", "'proc'", "\n", "\n", "", "if", "chunksize", "==", "-", "1", ":", "\n", "        ", "if", "tot", "is", "None", ":", "\n", "            ", "warnings", ".", "warn", "(", "'chunksize=-1 does not work when len(seq) is not known'", ")", "\n", "", "else", ":", "\n", "            ", "chunksize", "=", "math", ".", "ceil", "(", "tot", "/", "(", "N", "*", "Nt", ")", ")", "\n", "", "", "chunksize", "=", "max", "(", "chunksize", ",", "Nt", ")", "# Reset", "\n", "\n", "# Consider resetting N", "\n", "if", "tot", "is", "not", "None", ":", "\n", "        ", "N", "=", "min", "(", "N", ",", "tot", "//", "chunksize", ")", "\n", "\n", "# Build a counter iterator based on settings and tqdm", "\n", "", "if", "tqdm", "is", "None", ":", "\n", "        ", "if", "isinstance", "(", "progress", ",", "(", "str", ",", "unicode", ")", ")", "and", "progress", ".", "lower", "(", ")", "in", "[", "'jupyter'", ",", "'notebook'", ",", "'nb'", "]", ":", "\n", "            ", "counter", "=", "partial", "(", "_counter_nb", ",", "tot", "=", "tot", ")", "\n", "", "else", ":", "\n", "            ", "counter", "=", "partial", "(", "_counter", ",", "tot", "=", "tot", ")", "\n", "", "", "else", ":", "\n", "        ", "if", "isinstance", "(", "progress", ",", "(", "str", ",", "unicode", ")", ")", "and", "progress", ".", "lower", "(", ")", "in", "[", "'jupyter'", ",", "'notebook'", ",", "'nb'", "]", "and", "hasattr", "(", "tqdm", ",", "'tqdm_notebook'", ")", ":", "\n", "            ", "counter", "=", "partial", "(", "tqdm", ".", "tqdm_notebook", ",", "total", "=", "tot", ")", "\n", "", "else", ":", "\n", "            ", "counter", "=", "partial", "(", "tqdm", ".", "tqdm", ",", "total", "=", "tot", ")", "# Set the total since tqdm won't be able to get it.", "\n", "\n", "# Handle N=1 without any multiprocessing", "\n", "", "", "if", "N", "==", "1", ":", "\n", "        ", "if", "Nt", "==", "1", ":", "\n", "            ", "out", "=", "imap", "(", "_fun", ",", "seq", ")", "\n", "", "else", ":", "\n", "            ", "pool", "=", "mpd", ".", "Pool", "(", "Nt", ")", "# thread pools don't have the pickle issues", "\n", "out", "=", "pool", ".", "imap", "(", "_fun", ",", "seq", ")", "\n", "\n", "", "if", "progress", ":", "\n", "           ", "out", "=", "counter", "(", "out", ")", "\n", "", "for", "count", ",", "item", "in", "enumerate", "(", "out", ")", ":", "\n", "            ", "if", "isinstance", "(", "item", ",", "_Exception", ")", ":", "\n", "                ", "item", ".", "E", ".", "seq_index", "=", "count", "\n", "if", "not", "item", ".", "infun", ":", "\n", "                    ", "exception", "=", "'raise'", "# reset", "\n", "", "if", "exception", "==", "'raise'", ":", "\n", "                    ", "raise", "item", ".", "E", "\n", "", "elif", "exception", "==", "'return'", ":", "\n", "                    ", "item", "=", "item", ".", "E", "\n", "", "elif", "exception", "==", "'proc'", ":", "\n", "                    ", "pass", "\n", "", "else", ":", "\n", "                    ", "raise", "ValueError", "(", "\"Unrecognized `exception` setting '{}'\"", ".", "format", "(", "exception", ")", ")", "\n", "", "", "yield", "item", "\n", "\n", "", "if", "Nt", ">", "1", ":", "\n", "            ", "pool", ".", "close", "(", ")", "\n", "", "return", "\n", "\n", "", "q_in", "=", "mp", ".", "JoinableQueue", "(", ")", "# Will need to `join` later to make sure is empty", "\n", "q_out", "=", "mp", ".", "Queue", "(", ")", "\n", "\n", "# Start the workers", "\n", "workers", "=", "[", "mp", ".", "Process", "(", "target", "=", "_worker", ",", "args", "=", "(", "_fun", ",", "q_in", ",", "q_out", ",", "Nt", ")", ")", "for", "_", "in", "range", "(", "N", ")", "]", "\n", "for", "worker", "in", "workers", ":", "\n", "        ", "worker", ".", "daemon", "=", "daemon", "\n", "worker", ".", "start", "(", ")", "\n", "\n", "# Create a separate thread to add to the queue in the background", "\n", "", "def", "add_to_queue", "(", ")", ":", "\n", "        ", "for", "iixs", "in", "_iter_chunks", "(", "enumerate", "(", "seq", ")", ",", "chunksize", ")", ":", "\n", "            ", "q_in", ".", "put", "(", "iixs", ")", "\n", "\n", "# Once (if ever) it is exhausted, send None to close workers", "\n", "", "for", "_", "in", "xrange", "(", "N", ")", ":", "\n", "            ", "q_in", ".", "put", "(", "None", ")", "\n", "\n", "", "", "add_to_queue_thread", "=", "Thread", "(", "target", "=", "add_to_queue", ")", "\n", "add_to_queue_thread", ".", "start", "(", ")", "\n", "\n", "# Define a generator that will pull from the q_out and then run through", "\n", "# the rest of our generator/iterator chain for progress and ordering", "\n", "def", "queue_getter", "(", ")", ":", "\n", "        ", "finished", "=", "0", "\n", "count", "=", "0", "\n", "while", "finished", "<", "N", ":", "\n", "            ", "out", "=", "q_out", ".", "get", "(", ")", "\n", "if", "out", "is", "None", ":", "\n", "                ", "finished", "+=", "1", "\n", "continue", "\n", "", "yield", "out", "\n", "\n", "# Chain generators on output", "\n", "", "", "out", "=", "queue_getter", "(", ")", "\n", "if", "progress", ":", "\n", "        ", "out", "=", "counter", "(", "out", ")", "\n", "\n", "", "if", "ordered", ":", "\n", "        ", "out", "=", "_sort_generator_unique_integers", "(", "out", ",", "key", "=", "lambda", "a", ":", "a", "[", "0", "]", ")", "\n", "\n", "# Return items", "\n", "", "for", "item", "in", "out", ":", "\n", "        ", "count", "=", "item", "[", "0", "]", "\n", "item", "=", "item", "[", "1", "]", "\n", "if", "isinstance", "(", "item", ",", "_Exception", ")", ":", "\n", "            ", "item", ".", "E", ".", "seq_index", "=", "count", "\n", "if", "not", "item", ".", "infun", ":", "\n", "                ", "exception", "=", "'raise'", "# reset", "\n", "\n", "", "if", "exception", "==", "'raise'", ":", "\n", "                ", "for", "worker", "in", "workers", ":", "\n", "                    ", "worker", ".", "terminate", "(", ")", "\n", "", "raise", "item", ".", "E", "\n", "", "elif", "exception", "==", "'return'", ":", "\n", "                ", "item", "=", "item", ".", "E", "\n", "", "elif", "exception", "==", "'proc'", ":", "\n", "                ", "pass", "\n", "", "else", ":", "\n", "                ", "for", "worker", "in", "workers", ":", "\n", "                    ", "worker", ".", "terminate", "(", ")", "\n", "", "raise", "ValueError", "(", "\"Unrecognized `exception` setting '{}'\"", ".", "format", "(", "exception", ")", ")", "\n", "", "", "yield", "item", "\n", "\n", "# Clean up threads and processes. Make sure the queue is exhausted", "\n", "", "add_to_queue_thread", ".", "join", "(", ")", "# Make sure we've exhausted the input", "\n", "q_in", ".", "join", "(", ")", "# Make sure there is nothing left in the queue", "\n", "for", "worker", "in", "workers", ":", "\n", "        ", "worker", ".", "join", "(", ")", "# shut it down", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.parmapper._counter": [[392, 401], ["enumerate", "parmapper._txtbar", "print", "sys.stdout.flush"], "function", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.parmapper._txtbar"], ["def", "_counter", "(", "items", ",", "tot", "=", "None", ")", ":", "\n", "    ", "for", "ii", ",", "item", "in", "enumerate", "(", "items", ")", ":", "\n", "        ", "if", "tot", "is", "not", "None", ":", "\n", "            ", "_txtbar", "(", "ii", ",", "tot", ",", "ticks", "=", "50", ",", "text", "=", "''", ")", "\n", "", "else", ":", "\n", "            ", "txt", "=", "'{}'", ".", "format", "(", "ii", "+", "1", ")", "\n", "print", "(", "'\\r%s'", "%", "txt", ",", "end", "=", "''", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "", "yield", "item", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.parmapper._counter_nb": [[402, 422], ["display", "enumerate", "IntText", "IntProgress", "display", "IntText"], "function", ["None"], ["", "", "def", "_counter_nb", "(", "items", ",", "tot", "=", "None", ")", ":", "\n", "    ", "from", "ipywidgets", "import", "IntProgress", ",", "IntText", "\n", "from", "IPython", ".", "display", "import", "display", "\n", "\n", "if", "tot", "is", "not", "None", ":", "\n", "        ", "g", "=", "IntText", "(", "value", "=", "0", ",", "description", "=", "'total = %d'", "%", "tot", ")", "\n", "f", "=", "IntProgress", "(", "min", "=", "0", ",", "max", "=", "tot", ")", "\n", "display", "(", "f", ")", "\n", "g", ".", "desription", "=", "'hi'", "\n", "\n", "", "else", ":", "\n", "        ", "g", "=", "IntText", "(", "value", "=", "0", ")", "\n", "f", "=", "None", "\n", "\n", "", "display", "(", "g", ")", "\n", "for", "ii", ",", "item", "in", "enumerate", "(", "items", ")", ":", "\n", "        ", "if", "f", ":", "\n", "            ", "f", ".", "value", "+=", "1", "\n", "", "g", ".", "value", "+=", "1", "\n", "yield", "item", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.parmapper._worker": [[423, 446], ["multiprocessing.Pool", "q_in.get", "list", "q_in.task_done", "mpd.Pool.close", "q_out.put", "q_in.task_done", "q_out.put", "_map", "fun"], "function", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.get", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.ConfigBox.list"], ["", "", "def", "_worker", "(", "fun", ",", "q_in", ",", "q_out", ",", "Nt", ")", ":", "\n", "    ", "\"\"\" This actually runs everything including threadpools\"\"\"", "\n", "if", "Nt", ">", "1", ":", "\n", "        ", "pool", "=", "mpd", ".", "Pool", "(", "Nt", ")", "\n", "_map", "=", "pool", ".", "map", "# thread pools don't have the pickle issues", "\n", "", "else", ":", "\n", "        ", "_map", "=", "map", "\n", "\n", "", "while", "True", ":", "\n", "        ", "iixs", "=", "q_in", ".", "get", "(", ")", "\n", "if", "iixs", "is", "None", ":", "\n", "            ", "q_out", ".", "put", "(", "None", ")", "\n", "q_in", ".", "task_done", "(", ")", "\n", "break", "\n", "#         for ix in iixs:", "\n", "", "def", "_ap", "(", "ix", ")", ":", "\n", "            ", "i", ",", "x", "=", "ix", "\n", "q_out", ".", "put", "(", "(", "i", ",", "fun", "(", "x", ")", ")", ")", "\n", "", "list", "(", "_map", "(", "_ap", ",", "iixs", ")", ")", "# list forces the iteration", "\n", "q_in", ".", "task_done", "(", ")", "\n", "\n", "", "if", "Nt", ">", "1", ":", "\n", "        ", "pool", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.parmapper._iter_chunks": [[447, 465], ["group.append", "tuple", "tuple"], "function", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.BoxList.append"], ["", "", "def", "_iter_chunks", "(", "seq", ",", "n", ")", ":", "\n", "    ", "\"\"\"\n    yield a len(n) tuple from seq. If not divisible, the last one would be less\n    than n\n    \"\"\"", "\n", "_n", "=", "0", ";", "\n", "for", "item", "in", "seq", ":", "\n", "        ", "if", "_n", "==", "0", ":", "\n", "            ", "group", "=", "[", "item", "]", "\n", "", "else", ":", "\n", "            ", "group", ".", "append", "(", "item", ")", "\n", "", "_n", "+=", "1", "\n", "\n", "if", "_n", "==", "n", ":", "\n", "            ", "yield", "tuple", "(", "group", ")", "\n", "_n", "=", "0", "\n", "", "", "if", "_n", ">", "0", ":", "\n", "        ", "yield", "tuple", "(", "group", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.parmapper._sort_generator_unique_integers": [[466, 495], ["dict", "key", "dict.pop", "dict.pop"], "function", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.SBox.dict", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.pop", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.pop"], ["", "", "def", "_sort_generator_unique_integers", "(", "items", ",", "start", "=", "0", ",", "key", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Yield from `items` in order assuming UNIQUE keys w/o any missing!\n\n    The items ( or key(item) ) MUST be an integer, without repeats, starting\n    at `start`\n    \"\"\"", "\n", "queue", "=", "dict", "(", ")", "\n", "for", "item", "in", "items", ":", "\n", "        ", "if", "key", "is", "not", "None", ":", "\n", "            ", "ik", "=", "key", "(", "item", ")", "\n", "", "else", ":", "\n", "            ", "ik", "=", "item", "\n", "\n", "", "if", "ik", "==", "start", ":", "\n", "            ", "yield", "item", "\n", "start", "+=", "1", "\n", "\n", "# Get any stored items", "\n", "while", "start", "in", "queue", ":", "\n", "                ", "yield", "queue", ".", "pop", "(", "start", ")", "# average O(1), worse-case O(N)", "\n", "start", "+=", "1", "# but based on ref below, should be O(1)", "\n", "", "", "else", ":", "# for integer keys.", "\n", "            ", "queue", "[", "ik", "]", "=", "item", "# Ref: https://wiki.python.org/moin/TimeComplexity", "\n", "\n", "# Exhaust the rest", "\n", "", "", "while", "start", "in", "queue", ":", "\n", "        ", "yield", "queue", ".", "pop", "(", "start", ")", "\n", "start", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.parmapper._txtbar": [[496, 534], ["int", "min", "int", "int", "int", "print", "sys.stdout.flush", "int", "round", "round", "len", "round"], "function", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.ConfigBox.int", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.ConfigBox.int", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.ConfigBox.int", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.ConfigBox.int", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.ConfigBox.int"], ["", "", "def", "_txtbar", "(", "count", ",", "N", ",", "ticks", "=", "50", ",", "text", "=", "'Progress'", ")", ":", "\n", "    ", "\"\"\"\n    Print a text-based progress bar.\n\n    Usage:\n        _txtbar(count,N)\n\n    Inputs:\n        count   : Iteration count (start at 0)\n        N       : Iteration size\n        ticks   : [50] Number of ticks\n        text    : ['Progress'] Text to display (don't include `:`)\n\n    Prints a text-based progress bar to the terminal. Obviosly\n    printing other things to screen will mess this up:\n    \"\"\"", "\n", "\n", "count", "=", "int", "(", "count", "+", "1", ")", "\n", "ticks", "=", "min", "(", "ticks", ",", "N", ")", "\n", "isCount", "=", "int", "(", "1.0", "*", "count", "%", "round", "(", "1.0", "*", "N", "/", "ticks", ")", ")", "==", "0", "\n", "\n", "\n", "if", "not", "(", "isCount", "or", "count", "==", "1", "or", "count", "==", "N", ")", ":", "\n", "        ", "return", "\n", "\n", "", "Npound", "=", "int", "(", "round", "(", "1.0", "*", "count", "/", "N", "*", "ticks", ")", ")", ";", "\n", "Nspace", "=", "int", "(", "1.0", "*", "ticks", "-", "Npound", ")", ";", "\n", "Nprint", "=", "int", "(", "round", "(", "1.0", "*", "count", "/", "N", "*", "100", ")", ")", ";", "\n", "\n", "if", "count", "==", "1", ":", "\n", "        ", "Nprint", "=", "0", "\n", "\n", "", "if", "len", "(", "text", ")", ">", "0", ":", "\n", "        ", "text", "+=", "': '", "\n", "\n", "", "txt", "=", "'{:s}{:s}{:s} : {:3d}%  '", ".", "format", "(", "text", ",", "'#'", "*", "Npound", ",", "'-'", "*", "Nspace", ",", "Nprint", ")", "\n", "print", "(", "'\\r%s'", "%", "txt", ",", "end", "=", "''", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.trainer.Trainer.__init__": [[18, 41], ["numpy.zeros", "os.exists", "os.exists", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "device", ",", "model", ",", "optimizer", ",", "train_loader", ",", "val_loader", ",", "batch_size", ",", "out", "\n", ")", ":", "\n", "        ", "self", ".", "device", "=", "device", "\n", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "optim", "=", "optimizer", "\n", "\n", "self", ".", "train_loader", "=", "train_loader", "\n", "self", ".", "val_loader", "=", "val_loader", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "\n", "self", ".", "out", "=", "out", "\n", "if", "not", "osp", ".", "exists", "(", "self", ".", "out", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "out", ")", "\n", "\n", "", "self", ".", "epoch", "=", "0", "\n", "self", ".", "iteration", "=", "0", "\n", "self", ".", "mean_loss", "=", "self", ".", "best_mean_loss", "=", "1e1000", "\n", "\n", "self", ".", "loss_labels", "=", "None", "\n", "self", ".", "avg_metrics", "=", "None", "\n", "self", ".", "metrics", "=", "np", ".", "zeros", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.trainer.Trainer._loss": [[42, 65], ["dict", "enumerate", "total_loss.item", "numpy.zeros", "print", "combined[].mean", "combined[].mean.item", "list", "list", "open", "print", "list", "metrics.keys", "len", "map", "losses.keys"], "methods", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.SBox.dict", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.ConfigBox.list", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.ConfigBox.list", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.ConfigBox.list", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.keys", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.keys"], ["", "def", "_loss", "(", "self", ",", "result", ")", ":", "\n", "        ", "losses", "=", "result", "[", "\"losses\"", "]", "\n", "metrics", "=", "result", "[", "\"metrics\"", "]", "\n", "combined", "=", "dict", "(", "losses", ",", "**", "metrics", ")", "\n", "\n", "if", "self", ".", "loss_labels", "is", "None", ":", "\n", "            ", "self", ".", "loss_labels", "=", "[", "\"sum\"", "]", "+", "list", "(", "losses", ".", "keys", "(", ")", ")", "+", "list", "(", "metrics", ".", "keys", "(", ")", ")", "\n", "self", ".", "metrics", "=", "np", ".", "zeros", "(", "[", "len", "(", "self", ".", "loss_labels", ")", "]", ")", "\n", "bar", "=", "[", "\"progress \"", "]", "+", "list", "(", "map", "(", "\"{:7}\"", ".", "format", ",", "self", ".", "loss_labels", ")", ")", "\n", "print", "(", "\"\\n\"", "+", "\"| \"", ".", "join", "(", "bar", "+", "[", "\"speed\"", "]", ")", ")", "\n", "with", "open", "(", "f\"{self.out}/loss.csv\"", ",", "\"a\"", ")", "as", "fout", ":", "\n", "                ", "print", "(", "\", \"", ".", "join", "(", "bar", ")", ",", "file", "=", "fout", ")", "\n", "\n", "", "", "total_loss", "=", "0", "\n", "for", "i", ",", "name", "in", "enumerate", "(", "self", ".", "loss_labels", ")", ":", "\n", "            ", "if", "name", "==", "\"sum\"", ":", "\n", "                ", "continue", "\n", "", "L", "=", "combined", "[", "name", "]", ".", "mean", "(", ")", "\n", "self", ".", "metrics", "[", "i", "]", "+=", "L", ".", "item", "(", ")", "\n", "if", "name", "in", "losses", ":", "\n", "                ", "total_loss", "+=", "L", "\n", "", "", "self", ".", "metrics", "[", "0", "]", "+=", "total_loss", ".", "item", "(", ")", "\n", "return", "total_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.trainer.Trainer.validate": [[66, 144], ["trainer.tprint", "trainer.Trainer.model.eval", "trainer.pprint", "torch.save", "max", "os.join", "os.join", "os.join", "os.join", "torch.no_grad", "enumerate", "open", "print", "len", "os.join", "os.join", "shutil.copy", "shutil.copy", "trainer.Trainer.model.train", "os.exists", "os.exists", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "os.exists", "os.exists", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "trainer.Trainer.model", "trainer.Trainer._loss", "range", "trainer.Trainer.optim.state_dict", "trainer.Trainer.model.state_dict", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "len", "map", "map", "numpy.savez", "trainer.Trainer.model.save_figures", "len", "len", "v[].cpu().numpy", "input.items", "result[].items", "result[].items", "v[].cpu"], "methods", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.trainer.tprint", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.trainer.pprint", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.copy", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.copy", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.trainer.Trainer.train", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.trainer.Trainer._loss", "home.repos.pwc.inspect_result.zhou13_symmetrynet.models.symmetry_net.SymmetryNet.save_figures", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.items", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.items", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.items"], ["", "def", "validate", "(", "self", ")", ":", "\n", "        ", "tprint", "(", "\"Running validation...\"", ",", "\" \"", "*", "75", ")", "\n", "training", "=", "self", ".", "model", ".", "training", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n", "n_image", "=", "self", ".", "batch_size", "*", "self", ".", "iteration", "\n", "n_image1", "=", "self", ".", "batch_size", "*", "max", "(", "0", ",", "self", ".", "iteration", "-", "1", ")", "\n", "save_checkpoint", "=", "(", "\n", "n_image", "//", "CI", ".", "checkpoint_interval", "!=", "n_image1", "//", "CI", ".", "checkpoint_interval", "\n", ")", "\n", "\n", "if", "save_checkpoint", ":", "\n", "            ", "viz", "=", "osp", ".", "join", "(", "self", ".", "out", ",", "\"viz\"", ",", "f\"{self.iteration * self.batch_size:09d}\"", ")", "\n", "npz", "=", "osp", ".", "join", "(", "self", ".", "out", ",", "\"npz\"", ",", "f\"{self.iteration * self.batch_size:09d}\"", ")", "\n", "osp", ".", "exists", "(", "viz", ")", "or", "os", ".", "makedirs", "(", "viz", ")", "\n", "osp", ".", "exists", "(", "npz", ")", "or", "os", ".", "makedirs", "(", "npz", ")", "\n", "\n", "", "total_loss", "=", "0", "\n", "self", ".", "metrics", "[", "...", "]", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "batch_idx", ",", "input", "in", "enumerate", "(", "self", ".", "val_loader", ")", ":", "\n", "                ", "result", "=", "self", ".", "model", "(", "input", ",", "\"eval\"", ")", "\n", "total_loss", "+=", "self", ".", "_loss", "(", "result", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "input", "[", "\"image\"", "]", ")", ")", ":", "\n", "                    ", "index", "=", "batch_idx", "*", "self", ".", "batch_size", "+", "i", "\n", "if", "save_checkpoint", ":", "\n", "                        ", "if", "CI", ".", "checkpoint_save_prediction", ":", "\n", "                            ", "np", ".", "savez", "(", "\n", "f\"{npz}/{index:06}.npz\"", ",", "\n", "**", "{", "\n", "k", ":", "v", "[", "i", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "for", "k", ",", "v", "in", "result", "[", "\"preds\"", "]", ".", "items", "(", ")", "\n", "}", ",", "\n", ")", "\n", "", "if", "index", "<", "CI", ".", "num_visualization", ":", "\n", "                            ", "self", ".", "model", ".", "save_figures", "(", "\n", "{", "k", ":", "v", "[", "i", "]", "for", "k", ",", "v", "in", "input", ".", "items", "(", ")", "}", ",", "\n", "{", "k", ":", "v", "[", "i", "]", "for", "k", ",", "v", "in", "result", "[", "\"preds\"", "]", ".", "items", "(", ")", "}", ",", "\n", "f\"{viz}/{index:06}\"", ",", "\n", ")", "\n", "\n", "", "", "", "", "", "with", "open", "(", "f\"{self.out}/loss.csv\"", ",", "\"a\"", ")", "as", "fout", ":", "\n", "            ", "print", "(", "\n", "f\"{self.epoch:03}/{self.iteration * self.batch_size // 1000:04}k| \"", "\n", "+", "\", \"", ".", "join", "(", "map", "(", "\"{:.5f}\"", ".", "format", ",", "self", ".", "metrics", "/", "len", "(", "self", ".", "val_loader", ")", ")", ")", ",", "\n", "file", "=", "fout", ",", "\n", ")", "\n", "", "pprint", "(", "\n", "f\"{self.epoch:03}/{self.iteration * self.batch_size // 1000:04}k| \"", "\n", "+", "\"| \"", ".", "join", "(", "map", "(", "\"{:.5f}\"", ".", "format", ",", "self", ".", "metrics", "/", "len", "(", "self", ".", "val_loader", ")", ")", ")", ",", "\n", "\" \"", "*", "7", ",", "\n", ")", "\n", "self", ".", "mean_loss", "=", "total_loss", "/", "len", "(", "self", ".", "val_loader", ")", "\n", "\n", "torch", ".", "save", "(", "\n", "{", "\n", "\"iteration\"", ":", "self", ".", "iteration", ",", "\n", "\"arch\"", ":", "self", ".", "model", ".", "__class__", ".", "__name__", ",", "\n", "\"optim_state_dict\"", ":", "self", ".", "optim", ".", "state_dict", "(", ")", ",", "\n", "\"model_state_dict\"", ":", "self", ".", "model", ".", "state_dict", "(", ")", ",", "\n", "\"best_mean_loss\"", ":", "self", ".", "best_mean_loss", ",", "\n", "}", ",", "\n", "osp", ".", "join", "(", "self", ".", "out", ",", "\"checkpoint_latest.pth\"", ")", ",", "\n", ")", "\n", "if", "save_checkpoint", ":", "\n", "            ", "shutil", ".", "copy", "(", "\n", "osp", ".", "join", "(", "self", ".", "out", ",", "\"checkpoint_latest.pth\"", ")", ",", "\n", "osp", ".", "join", "(", "npz", ",", "\"checkpoint.pth\"", ")", ",", "\n", ")", "\n", "", "if", "self", ".", "mean_loss", "<", "self", ".", "best_mean_loss", ":", "\n", "            ", "self", ".", "best_mean_loss", "=", "self", ".", "mean_loss", "\n", "shutil", ".", "copy", "(", "\n", "osp", ".", "join", "(", "self", ".", "out", ",", "\"checkpoint_latest.pth\"", ")", ",", "\n", "osp", ".", "join", "(", "self", ".", "out", ",", "\"checkpoint_best.pth\"", ")", ",", "\n", ")", "\n", "\n", "", "if", "training", ":", "\n", "            ", "self", ".", "model", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.trainer.Trainer.train_epoch": [[145, 181], ["trainer.Trainer.model.train", "timeit.default_timer", "enumerate", "trainer.Trainer.optim.zero_grad", "trainer.Trainer.model", "trainer.Trainer._loss", "numpy.isnan", "trainer.Trainer.backward", "trainer.Trainer.optim.step", "trainer.Trainer.item", "ValueError", "trainer.tprint", "timeit.default_timer", "max", "trainer.Trainer.validate", "timeit.default_timer", "map", "timeit.default_timer"], "methods", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.trainer.Trainer.train", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.trainer.Trainer._loss", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.trainer.tprint", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.trainer.Trainer.validate"], ["", "", "def", "train_epoch", "(", "self", ")", ":", "\n", "        ", "self", ".", "model", ".", "train", "(", ")", "\n", "time", "=", "timer", "(", ")", "\n", "for", "batch_idx", ",", "input", "in", "enumerate", "(", "self", ".", "train_loader", ")", ":", "\n", "            ", "self", ".", "optim", ".", "zero_grad", "(", ")", "\n", "self", ".", "metrics", "[", "...", "]", "=", "0", "\n", "\n", "result", "=", "self", ".", "model", "(", "input", ",", "\"train\"", ")", "\n", "\n", "loss", "=", "self", ".", "_loss", "(", "result", ")", "\n", "if", "np", ".", "isnan", "(", "loss", ".", "item", "(", ")", ")", ":", "\n", "                ", "raise", "ValueError", "(", "\"loss is nan while training\"", ")", "\n", "", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optim", ".", "step", "(", ")", "\n", "\n", "if", "self", ".", "avg_metrics", "is", "None", ":", "\n", "                ", "self", ".", "avg_metrics", "=", "self", ".", "metrics", "\n", "", "else", ":", "\n", "                ", "self", ".", "avg_metrics", "=", "self", ".", "avg_metrics", "*", "0.95", "+", "self", ".", "metrics", "*", "0.05", "\n", "", "self", ".", "iteration", "+=", "1", "\n", "\n", "if", "self", ".", "iteration", "%", "4", "==", "0", ":", "\n", "                ", "tprint", "(", "\n", "f\"{self.epoch:03}/{self.iteration * self.batch_size // 1000:04}k| \"", "\n", "+", "\"| \"", ".", "join", "(", "map", "(", "\"{:.5f}\"", ".", "format", ",", "self", ".", "avg_metrics", ")", ")", "\n", "+", "f\"| {4 * self.batch_size / (timer() - time):04.1f} \"", "\n", ")", "\n", "time", "=", "timer", "(", ")", "\n", "", "n_image", "=", "self", ".", "batch_size", "*", "self", ".", "iteration", "\n", "n_image1", "=", "self", ".", "batch_size", "*", "max", "(", "0", ",", "self", ".", "iteration", "-", "1", ")", "\n", "if", "(", "\n", "n_image", "//", "CI", ".", "validation_interval", "!=", "n_image1", "//", "CI", ".", "validation_interval", "\n", "or", "n_image", "==", "CI", ".", "validation_debug", "\n", ")", ":", "\n", "                ", "self", ".", "validate", "(", ")", "\n", "time", "=", "timer", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.trainer.Trainer.train": [[182, 189], ["len", "range", "trainer.Trainer.train_epoch"], "methods", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.trainer.Trainer.train_epoch"], ["", "", "", "def", "train", "(", "self", ")", ":", "\n", "        ", "epoch_size", "=", "len", "(", "self", ".", "train_loader", ")", "\n", "start_epoch", "=", "self", ".", "iteration", "//", "epoch_size", "\n", "for", "self", ".", "epoch", "in", "range", "(", "start_epoch", ",", "CO", ".", "max_epoch", ")", ":", "\n", "            ", "if", "self", ".", "epoch", "in", "CO", ".", "lr_decay_epoch", ":", "\n", "                ", "self", ".", "optim", ".", "param_groups", "[", "0", "]", "[", "\"lr\"", "]", "/=", "10", "\n", "", "self", ".", "train_epoch", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.trainer.tprint": [[191, 195], ["print", "print"], "function", ["None"], ["", "", "", "def", "tprint", "(", "*", "args", ")", ":", "\n", "    ", "\"\"\"Temporarily prints things on the screen\"\"\"", "\n", "print", "(", "\"\\r\\x1b[2K\"", ",", "end", "=", "\"\"", ")", "\n", "print", "(", "*", "args", ",", "end", "=", "\"\"", ",", "flush", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.trainer.pprint": [[197, 201], ["print", "print"], "function", ["None"], ["", "def", "pprint", "(", "*", "args", ")", ":", "\n", "    ", "\"\"\"Permanently prints things on the screen\"\"\"", "\n", "print", "(", "\"\\r\\x1b[2K\"", ",", "end", "=", "\"\"", ")", "\n", "print", "(", "*", "args", ",", "flush", "=", "True", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.utils.MyDataParallel.__getattr__": [[16, 21], ["super().__getattr__", "getattr"], "methods", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.utils.MyDataParallel.__getattr__"], ["    ", "def", "__getattr__", "(", "self", ",", "name", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "return", "super", "(", ")", ".", "__getattr__", "(", "name", ")", "\n", "", "except", "AttributeError", ":", "\n", "            ", "return", "getattr", "(", "self", ".", "module", ",", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.utils.benchmark.__init__": [[24, 28], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "msg", ",", "enable", "=", "True", ",", "fmt", "=", "\"%0.3g\"", ")", ":", "\n", "        ", "self", ".", "msg", "=", "msg", "\n", "self", ".", "fmt", "=", "fmt", "\n", "self", ".", "enable", "=", "enable", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.utils.benchmark.__enter__": [[29, 34], ["torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "timeit.default_timer"], "methods", ["None"], ["", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "enable", ":", "\n", "            ", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "self", ".", "start", "=", "timer", "(", ")", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.utils.benchmark.__exit__": [[35, 41], ["torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "print", "timeit.default_timer"], "methods", ["None"], ["", "def", "__exit__", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "if", "self", ".", "enable", ":", "\n", "            ", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "t", "=", "timer", "(", ")", "-", "self", ".", "start", "\n", "print", "(", "(", "\"%s : \"", "+", "self", ".", "fmt", "+", "\" seconds\"", ")", "%", "(", "self", ".", "msg", ",", "t", ")", ")", "\n", "self", ".", "time", "=", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.utils.np_eigen_scale_invariant": [[43, 46], ["numpy.log", "numpy.log", "numpy.average", "numpy.average"], "function", ["None"], ["", "", "", "def", "np_eigen_scale_invariant", "(", "depth_gt", ",", "depth_pd", ",", "mask", ")", ":", "\n", "    ", "d", "=", "np", ".", "log", "(", "depth_gt", "[", "mask", "]", ")", "-", "np", ".", "log", "(", "depth_pd", "[", "mask", "]", ")", "\n", "return", "np", ".", "average", "(", "d", "**", "2", ")", "-", "np", ".", "average", "(", "d", ")", "**", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.utils.np_kitti_error": [[47, 70], ["numpy.maximum", "numpy.sqrt", "numpy.sqrt", "numpy.mean", "numpy.mean", "np.sqrt.mean", "np.sqrt.mean", "numpy.log", "numpy.log", "numpy.average", "numpy.log", "numpy.log", "numpy.abs", "numpy.average"], "function", ["None"], ["", "def", "np_kitti_error", "(", "depth_gt", ",", "depth_pd", ",", "mask", ")", ":", "\n", "    ", "depth_gt", "=", "depth_gt", "[", "mask", "]", "\n", "depth_pd", "=", "depth_pd", "[", "mask", "]", "\n", "\n", "thresh", "=", "np", ".", "maximum", "(", "(", "depth_gt", "/", "depth_pd", ")", ",", "(", "depth_pd", "/", "depth_gt", ")", ")", "\n", "a1", "=", "(", "thresh", "<", "1.25", ")", ".", "mean", "(", ")", "\n", "a2", "=", "(", "thresh", "<", "1.25", "**", "2", ")", ".", "mean", "(", ")", "\n", "a3", "=", "(", "thresh", "<", "1.25", "**", "3", ")", ".", "mean", "(", ")", "\n", "\n", "rmse", "=", "(", "depth_gt", "-", "depth_pd", ")", "**", "2", "\n", "rmse", "=", "np", ".", "sqrt", "(", "rmse", ".", "mean", "(", ")", ")", "\n", "\n", "rmse_log", "=", "(", "np", ".", "log", "(", "depth_gt", ")", "-", "np", ".", "log", "(", "depth_pd", ")", ")", "**", "2", "\n", "rmse_log", "=", "np", ".", "sqrt", "(", "rmse_log", ".", "mean", "(", ")", ")", "\n", "\n", "abs_rel", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "depth_gt", "-", "depth_pd", ")", "/", "depth_gt", ")", "\n", "\n", "sq_rel", "=", "np", ".", "mean", "(", "(", "(", "depth_gt", "-", "depth_pd", ")", "**", "2", ")", "/", "depth_gt", ")", "\n", "\n", "d", "=", "np", ".", "log", "(", "depth_gt", ")", "-", "np", ".", "log", "(", "depth_pd", ")", "\n", "sil", "=", "np", ".", "average", "(", "d", "**", "2", ")", "-", "np", ".", "average", "(", "d", ")", "**", "2", "\n", "\n", "return", "abs_rel", ",", "sq_rel", ",", "rmse", ",", "rmse_log", ",", "sil", ",", "a1", ",", "a2", ",", "a3", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.utils.plot_image_grid": [[72, 79], ["matplotlib.figure", "matplotlib.title", "range", "len", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.colorbar"], "function", ["None"], ["", "def", "plot_image_grid", "(", "im", ",", "x", "=", "4", ",", "y", "=", "4", ",", "title", "=", "\"\"", ")", ":", "\n", "    ", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "title", "(", "title", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "im", ")", ")", ":", "\n", "        ", "plt", ".", "subplot", "(", "x", ",", "y", ",", "i", "+", "1", ")", "\n", "plt", ".", "imshow", "(", "im", "[", "i", "]", ")", "\n", "plt", ".", "colorbar", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.utils.__parallel_handle": [[81, 87], ["q_in.get", "q_out.put", "f"], "function", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.get"], ["", "", "def", "__parallel_handle", "(", "f", ",", "q_in", ",", "q_out", ")", ":", "\n", "    ", "while", "True", ":", "\n", "        ", "i", ",", "x", "=", "q_in", ".", "get", "(", ")", "\n", "if", "i", "is", "None", ":", "\n", "            ", "break", "\n", "", "q_out", ".", "put", "(", "(", "i", ",", "f", "(", "x", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.utils.parmap": [[89, 113], ["multiprocessing.cpu_count", "multiprocessing.Queue", "multiprocessing.Queue", "multiprocessing.cpu_count", "multiprocessing.Process", "p.start", "range", "multiprocessing.Queue.put", "multiprocessing.Queue.put", "multiprocessing.Queue.get", "p.join", "multiprocessing.Queue.close", "multiprocessing.Queue.close", "sorted", "enumerate", "range", "progress_bar", "range", "len"], "function", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.get"], ["", "", "def", "parmap", "(", "f", ",", "X", ",", "nprocs", "=", "multiprocessing", ".", "cpu_count", "(", ")", ",", "progress_bar", "=", "lambda", "x", ":", "x", ")", ":", "\n", "    ", "if", "nprocs", "==", "0", ":", "\n", "        ", "nprocs", "=", "multiprocessing", ".", "cpu_count", "(", ")", "\n", "", "q_in", "=", "multiprocessing", ".", "Queue", "(", "1", ")", "\n", "q_out", "=", "multiprocessing", ".", "Queue", "(", ")", "\n", "\n", "proc", "=", "[", "\n", "multiprocessing", ".", "Process", "(", "target", "=", "__parallel_handle", ",", "args", "=", "(", "f", ",", "q_in", ",", "q_out", ")", ")", "\n", "for", "_", "in", "range", "(", "nprocs", ")", "\n", "]", "\n", "for", "p", "in", "proc", ":", "\n", "        ", "p", ".", "daemon", "=", "True", "\n", "p", ".", "start", "(", ")", "\n", "\n", "", "try", ":", "\n", "        ", "sent", "=", "[", "q_in", ".", "put", "(", "(", "i", ",", "x", ")", ")", "for", "i", ",", "x", "in", "enumerate", "(", "X", ")", "]", "\n", "[", "q_in", ".", "put", "(", "(", "None", ",", "None", ")", ")", "for", "_", "in", "range", "(", "nprocs", ")", "]", "\n", "res", "=", "[", "q_out", ".", "get", "(", ")", "for", "_", "in", "progress_bar", "(", "range", "(", "len", "(", "sent", ")", ")", ")", "]", "\n", "[", "p", ".", "join", "(", ")", "for", "p", "in", "proc", "]", "\n", "", "except", "KeyboardInterrupt", ":", "\n", "        ", "q_in", ".", "close", "(", ")", "\n", "q_out", ".", "close", "(", ")", "\n", "raise", "\n", "", "return", "[", "x", "for", "i", ",", "x", "in", "sorted", "(", "res", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.datasets.ShapeNetDataset.__init__": [[22, 44], ["numpy.genfromtxt", "numpy.genfromtxt", "random.seed", "random.shuffle", "len", "print", "hasattr"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "rootdir", ",", "split", ")", ":", "\n", "        ", "self", ".", "rootdir", "=", "rootdir", "\n", "self", ".", "split", "=", "split", "\n", "\n", "filelist", "=", "np", ".", "genfromtxt", "(", "f\"{rootdir}/{split}.txt\"", ",", "dtype", "=", "str", ")", "\n", "random", ".", "seed", "(", "0", ")", "\n", "random", ".", "shuffle", "(", "filelist", ")", "\n", "filelist", "=", "[", "f", "for", "f", "in", "filelist", "if", "\"03636649\"", "not", "in", "f", "]", "# remove lamps", "\n", "if", "(", "\n", "split", "==", "\"train\"", "\n", "and", "hasattr", "(", "CI", ",", "\"only_car_plane_chair\"", ")", "\n", "and", "CI", ".", "only_car_plane_chair", "\n", ")", ":", "\n", "            ", "filelist", "=", "[", "\n", "f", "\n", "for", "f", "in", "filelist", "\n", "if", "\"02691156\"", "in", "f", "or", "\"02958343\"", "in", "f", "or", "\"03001627\"", "in", "f", "\n", "]", "\n", "", "self", ".", "filelist", "=", "[", "f\"{rootdir}/{f}\"", "for", "f", "in", "filelist", "]", "\n", "self", ".", "filelist2", "=", "filelist", "\n", "self", ".", "size", "=", "len", "(", "self", ".", "filelist", ")", "\n", "print", "(", "f\"n{split}:\"", ",", "self", ".", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.datasets.ShapeNetDataset.__len__": [[45, 47], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.datasets.ShapeNetDataset.__getitem__": [[48, 94], ["numpy.rollaxis().copy", "numpy.rollaxis().copy", "numpy.rollaxis().copy", "numpy.rollaxis().copy", "numpy.eye", "numpy.eye", "numpy.zeros", "numpy.zeros", "numpy.frombuffer", "numpy.frombuffer", "datasets.sample_plane", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "cv2.imread().astype", "cv2.imread().astype", "open", "json.load", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "oprefix.encode", "abs", "torch.tensor().byte", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "datasets.to_label", "numpy.rollaxis", "numpy.rollaxis", "numpy.rollaxis", "numpy.rollaxis", "numpy.ix_", "numpy.ix_", "len", "numpy.inv", "numpy.inv", "numpy.inv", "numpy.inv", "numpy.inv", "numpy.inv", "torch.tensor().float", "numpy.inv", "numpy.inv", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "cv2.imread", "cv2.imread", "numpy.diagflat", "numpy.diagflat", "numpy.diagflat", "numpy.diagflat", "numpy.diagflat", "numpy.diagflat", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "datasets.w2S", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.copy", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.copy", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.copy", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.copy", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.datasets.sample_plane", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.ConfigBox.float", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.ConfigBox.float", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.ConfigBox.float", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.ConfigBox.float", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.ConfigBox.float", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.ConfigBox.float", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.ConfigBox.float", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.datasets.to_label", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.ConfigBox.float", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.datasets.w2S"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "prefix", "=", "self", ".", "filelist", "[", "idx", "]", "\n", "image", "=", "cv2", ".", "imread", "(", "f\"{prefix}.png\"", ",", "-", "1", ")", ".", "astype", "(", "np", ".", "float32", ")", "/", "255.0", "\n", "# plt.imshow(image)", "\n", "# plt.show()", "\n", "image", "=", "np", ".", "rollaxis", "(", "image", ",", "2", ")", ".", "copy", "(", ")", "\n", "depth", "=", "cv2", ".", "imread", "(", "f\"{prefix}_depth0001.exr\"", ",", "-", "1", ")", ".", "astype", "(", "np", ".", "float32", ")", "[", ":", ",", ":", ",", "0", ":", "1", "]", "\n", "depth", "[", "depth", ">", "20", "]", "=", "0", "\n", "depth", "[", "depth", "<", "0", "]", "=", "0", "\n", "depth", "[", "depth", "!=", "depth", "]", "=", "0", "\n", "depth", "=", "np", ".", "rollaxis", "(", "depth", ",", "2", ")", ".", "copy", "(", ")", "\n", "with", "open", "(", "f\"{prefix}.json\"", ")", "as", "f", ":", "\n", "            ", "js", "=", "json", ".", "load", "(", "f", ")", "\n", "", "Rt", ",", "K_", "=", "np", ".", "array", "(", "js", "[", "\"RT\"", "]", ")", ",", "np", ".", "array", "(", "js", "[", "\"K\"", "]", ")", "\n", "K", "=", "np", ".", "eye", "(", "4", ")", "\n", "K", "[", ":", "3", ",", ":", "3", "]", "=", "K_", "[", "np", ".", "ix_", "(", "[", "0", ",", "1", ",", "3", "]", ",", "[", "0", ",", "1", ",", "2", "]", ")", "]", "\n", "KRt", "=", "K", "@", "Rt", "\n", "\n", "oprefix", "=", "self", ".", "filelist2", "[", "idx", "]", "\n", "fname", "=", "np", ".", "zeros", "(", "[", "60", "]", ",", "dtype", "=", "\"uint8\"", ")", "\n", "fname", "[", ":", "len", "(", "oprefix", ")", "]", "=", "np", ".", "frombuffer", "(", "oprefix", ".", "encode", "(", ")", ",", "\"uint8\"", ")", "\n", "\n", "depth_scale", "=", "1", "/", "abs", "(", "Rt", "[", "2", "]", "[", "3", "]", ")", "\n", "\n", "S0", "=", "[", "\n", "KRt", "@", "np", ".", "diagflat", "(", "[", "1", ",", "-", "1", ",", "1", ",", "1", "]", ")", "@", "LA", ".", "inv", "(", "KRt", ")", ",", "\n", "KRt", "@", "np", ".", "diagflat", "(", "[", "-", "1", ",", "1", ",", "1", ",", "1", "]", ")", "@", "LA", ".", "inv", "(", "KRt", ")", ",", "\n", "KRt", "@", "np", ".", "diagflat", "(", "[", "-", "1", ",", "-", "1", ",", "1", ",", "1", "]", ")", "@", "LA", ".", "inv", "(", "KRt", ")", ",", "\n", "]", "\n", "result", "=", "{", "\n", "\"fname\"", ":", "torch", ".", "tensor", "(", "fname", ")", ".", "byte", "(", ")", ",", "\n", "\"image\"", ":", "torch", ".", "tensor", "(", "image", ")", ".", "float", "(", ")", ",", "\n", "\"depth\"", ":", "torch", ".", "tensor", "(", "depth", ")", ".", "float", "(", ")", "*", "depth_scale", ",", "\n", "\"K\"", ":", "torch", ".", "tensor", "(", "K", ")", ".", "float", "(", ")", ",", "\n", "\"RT\"", ":", "torch", ".", "tensor", "(", "Rt", ")", ".", "float", "(", ")", ",", "\n", "}", "\n", "\n", "w0", ",", "ws", "=", "sample_plane", "(", "Rt", ")", "\n", "S", "=", "[", "K", "@", "w2S", "(", "w", ")", "@", "LA", ".", "inv", "(", "K", ")", "for", "w", "in", "ws", "]", "\n", "y", "=", "[", "to_label", "(", "w", ",", "w0", ")", "for", "w", "in", "ws", "]", "\n", "result", "[", "\"S\"", "]", "=", "torch", ".", "tensor", "(", "S", ")", ".", "float", "(", ")", "\n", "result", "[", "\"y\"", "]", "=", "torch", ".", "tensor", "(", "y", ")", ".", "float", "(", ")", "\n", "result", "[", "\"w\"", "]", "=", "torch", ".", "tensor", "(", "ws", ")", ".", "float", "(", ")", "\n", "result", "[", "\"w0\"", "]", "=", "torch", ".", "tensor", "(", "w0", ")", ".", "float", "(", ")", "\n", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.datasets.Pix3dDataset.__init__": [[97, 124], ["set", "random.seed", "random.shuffle", "print", "open", "json.load", "numpy.loadtxt", "numpy.loadtxt", "len", "len", "range", "len", "range", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "rootdir", ",", "split", ")", ":", "\n", "        ", "self", ".", "rootdir", "=", "rootdir", "\n", "self", ".", "split", "=", "split", "\n", "\n", "with", "open", "(", "f\"{rootdir}/pix3d_info.json\"", ",", "\"r\"", ")", "as", "fin", ":", "\n", "            ", "data_lists", "=", "json", ".", "load", "(", "fin", ")", "\n", "", "data_valid", "=", "set", "(", "np", ".", "loadtxt", "(", "f\"{rootdir}/pix3d-valid.txt\"", ",", "dtype", "=", "str", ")", ")", "\n", "\n", "data_lists", "=", "[", "\n", "d", "\n", "for", "d", "in", "data_lists", "\n", "if", "not", "d", "[", "\"truncated\"", "]", "and", "not", "d", "[", "\"occluded\"", "]", "and", "d", "[", "\"img\"", "]", "[", ":", "-", "4", "]", "in", "data_valid", "\n", "]", "\n", "random", ".", "seed", "(", "0", ")", "\n", "random", ".", "shuffle", "(", "data_lists", ")", "\n", "if", "self", ".", "split", "==", "\"train\"", ":", "\n", "            ", "data_lists", "=", "[", "data_lists", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "data_lists", ")", ")", "if", "i", "%", "10", "!=", "0", "]", "\n", "self", ".", "size", "=", "len", "(", "data_lists", ")", "*", "2", "\n", "", "elif", "self", ".", "split", "==", "\"valid\"", ":", "\n", "            ", "data_lists", "=", "[", "data_lists", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "data_lists", ")", ")", "if", "i", "%", "10", "==", "0", "]", "\n", "self", ".", "size", "=", "len", "(", "data_lists", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "self", ".", "data_lists", "=", "data_lists", "\n", "\n", "print", "(", "f\"n{split}:\"", ",", "self", ".", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.datasets.Pix3dDataset.__len__": [[125, 127], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.datasets.Pix3dDataset.__getitem__": [[128, 192], ["os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "numpy.rollaxis().copy", "numpy.rollaxis().copy", "numpy.concatenate", "numpy.concatenate", "numpy.rollaxis().copy", "numpy.rollaxis().copy", "datasets.sample_plane", "numpy.zeros", "numpy.zeros", "numpy.frombuffer", "numpy.frombuffer", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "cv2.imread().astype", "cv2.imread().astype", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "image[].copy", "depth[].copy", "numpy.array", "numpy.array", "datasets.to_label", "oprefix.encode", "torch.tensor().byte", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "numpy.rollaxis", "numpy.rollaxis", "cv2.imread().astype", "numpy.rollaxis", "numpy.rollaxis", "numpy.diagflat", "numpy.diagflat", "numpy.inv", "numpy.inv", "numpy.inv", "numpy.inv", "numpy.inv", "numpy.inv", "len", "torch.tensor().float", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "cv2.imread", "cv2.imread", "numpy.diagflat", "numpy.diagflat", "datasets.w2S", "datasets.w2S", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "cv2.imread", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.copy", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.copy", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.copy", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.copy", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.datasets.sample_plane", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.ConfigBox.float", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.ConfigBox.float", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.ConfigBox.float", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.ConfigBox.float", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.copy", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.copy", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.datasets.to_label", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.ConfigBox.float", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.ConfigBox.float", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.ConfigBox.float", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.ConfigBox.float", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.ConfigBox.float", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.datasets.w2S", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.datasets.w2S"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "do_flip", "=", "False", "\n", "if", "self", ".", "split", "==", "\"train\"", ":", "\n", "            ", "do_flip", "=", "idx", "%", "2", "==", "1", "\n", "idx", "//=", "2", "\n", "\n", "", "data_item", "=", "self", ".", "data_lists", "[", "idx", "]", "\n", "fimage", "=", "osp", ".", "join", "(", "self", ".", "rootdir", ",", "data_item", "[", "\"img\"", "]", ")", "\n", "fdepth", "=", "osp", ".", "join", "(", "self", ".", "rootdir", ",", "data_item", "[", "\"depth\"", "]", ")", "\n", "fmask", "=", "osp", ".", "join", "(", "self", ".", "rootdir", ",", "data_item", "[", "\"mask\"", "]", ")", "\n", "\n", "image", "=", "cv2", ".", "imread", "(", "fimage", ",", "-", "1", ")", ".", "astype", "(", "np", ".", "float32", ")", "/", "255.0", "\n", "image", "=", "np", ".", "rollaxis", "(", "image", ",", "2", ")", ".", "copy", "(", ")", "\n", "mask", "=", "cv2", ".", "imread", "(", "fmask", ")", ".", "astype", "(", "np", ".", "float32", ")", "[", "None", ",", ":", ",", ":", ",", "0", "]", "/", "255.0", "\n", "image", "=", "np", ".", "concatenate", "(", "[", "image", ",", "mask", "]", ")", "\n", "depth", "=", "cv2", ".", "imread", "(", "fdepth", ",", "-", "1", ")", ".", "astype", "(", "np", ".", "float32", ")", "[", ":", ",", ":", ",", "0", ":", "1", "]", "\n", "depth", "[", "depth", ">", "20", "]", "=", "0", "\n", "depth", "[", "depth", "<", "0", "]", "=", "0", "\n", "depth", "[", "depth", "!=", "depth", "]", "=", "0", "\n", "\n", "depth", "=", "np", ".", "rollaxis", "(", "depth", ",", "2", ")", ".", "copy", "(", ")", "\n", "Rt", ",", "K", "=", "np", ".", "array", "(", "data_item", "[", "\"Rt\"", "]", ")", ",", "np", ".", "array", "(", "data_item", "[", "\"K\"", "]", ")", "\n", "K", "[", ":", "3", "]", "*=", "-", "1", "\n", "\n", "if", "do_flip", ":", "\n", "            ", "K", "=", "np", ".", "diagflat", "(", "[", "-", "1", ",", "1", ",", "1", ",", "1", "]", ")", "@", "K", "\n", "image", "=", "image", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ".", "copy", "(", ")", "\n", "depth", "=", "depth", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ".", "copy", "(", ")", "\n", "\n", "", "KRt", "=", "K", "@", "Rt", "\n", "S0", "=", "[", "KRt", "@", "np", ".", "diagflat", "(", "[", "-", "1", ",", "1", ",", "1", ",", "1", "]", ")", "@", "LA", ".", "inv", "(", "KRt", ")", "]", "\n", "\n", "w0", ",", "ws", "=", "sample_plane", "(", "Rt", ",", "np", ".", "array", "(", "[", "1", ",", "0", ",", "0", ",", "0", "]", ")", ")", "\n", "S", "=", "[", "K", "@", "w2S", "(", "w", ")", "@", "LA", ".", "inv", "(", "K", ")", "for", "w", "in", "ws", "]", "\n", "y", "=", "[", "to_label", "(", "w", ",", "w0", ")", "for", "w", "in", "ws", "]", "\n", "depth_scale", "=", "1", "/", "(", "w0", "@", "Rt", "[", ":", "3", ",", "3", "]", ")", "\n", "\n", "# print(S0)", "\n", "# print(\"Rt\", Rt)", "\n", "# print(\"S0\", Rt @ np.diagflat([-1, 1, 1, 1]) @ LA.inv(Rt))", "\n", "# print(\"S0\", w2S(w0))", "\n", "# print(\"w0\", w0)", "\n", "# print(\"depth_scale\", depth_scale)", "\n", "S0", "=", "[", "K", "@", "w2S", "(", "w0", ")", "@", "LA", ".", "inv", "(", "K", ")", "]", "\n", "# print(S0)", "\n", "\n", "oprefix", "=", "data_item", "[", "\"mask\"", "]", "[", "5", ":", "-", "4", "]", "\n", "fname", "=", "np", ".", "zeros", "(", "[", "60", "]", ",", "dtype", "=", "\"uint8\"", ")", "\n", "fname", "[", ":", "len", "(", "oprefix", ")", "]", "=", "np", ".", "frombuffer", "(", "oprefix", ".", "encode", "(", ")", ",", "\"uint8\"", ")", "\n", "\n", "result", "=", "{", "\n", "\"fname\"", ":", "torch", ".", "tensor", "(", "fname", ")", ".", "byte", "(", ")", ",", "\n", "\"image\"", ":", "torch", ".", "tensor", "(", "image", ")", ".", "float", "(", ")", ",", "\n", "\"depth\"", ":", "torch", ".", "tensor", "(", "depth", ")", ".", "float", "(", ")", "*", "depth_scale", ",", "\n", "\"S0\"", ":", "torch", ".", "tensor", "(", "S0", ")", ".", "float", "(", ")", ",", "\n", "\"K\"", ":", "torch", ".", "tensor", "(", "K", ")", ".", "float", "(", ")", ",", "\n", "\"RT\"", ":", "torch", ".", "tensor", "(", "Rt", ")", ".", "float", "(", ")", ",", "\n", "}", "\n", "result", "[", "\"S\"", "]", "=", "torch", ".", "tensor", "(", "S", ")", ".", "float", "(", ")", "\n", "result", "[", "\"y\"", "]", "=", "torch", ".", "tensor", "(", "y", ")", ".", "float", "(", ")", "\n", "result", "[", "\"w\"", "]", "=", "torch", ".", "tensor", "(", "ws", ")", ".", "float", "(", ")", "\n", "result", "[", "\"w0\"", "]", "=", "torch", ".", "tensor", "(", "w0", ")", ".", "float", "(", ")", "\n", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.datasets.sample_plane": [[194, 219], ["numpy.array", "numpy.array", "zip", "ws.append", "numpy.inv", "datasets.sample_symmetry", "datasets.sample_symmetry", "datasets.sample_symmetry", "datasets.sample_symmetry", "numpy.inv", "sum", "datasets.to_label"], "function", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.BoxList.append", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.datasets.sample_symmetry", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.datasets.sample_symmetry", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.datasets.sample_symmetry", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.datasets.sample_symmetry", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.datasets.to_label"], ["", "", "def", "sample_plane", "(", "Rt", ",", "plane", "=", "np", ".", "array", "(", "[", "0", ",", "1", ",", "0", ",", "0", "]", ")", ",", "plane2", "=", "np", ".", "array", "(", "[", "1", ",", "0", ",", "0", ",", "0", "]", ")", ")", ":", "\n", "    ", "w0_", "=", "LA", ".", "inv", "(", "Rt", ")", ".", "T", "@", "plane", "\n", "# find plane normal s.t. w0 @ x + 1 = 0", "\n", "w0", "=", "w0_", "[", ":", "3", "]", "/", "w0_", "[", "3", "]", "\n", "# normalize so that w[2]=1", "\n", "w0", "=", "w0", "/", "w0", "[", "2", "]", "\n", "\n", "if", "CM", ".", "detection", ".", "sample_hard_negative", ":", "\n", "# sample around second symmetry axis (hard negative)", "\n", "        ", "w1_", "=", "LA", ".", "inv", "(", "Rt", ")", ".", "T", "@", "plane2", "\n", "w1", "=", "w1_", "[", ":", "3", "]", "/", "w1_", "[", "3", "]", "\n", "w1", "=", "w1", "/", "w1", "[", "2", "]", "\n", "ws", "=", "[", "\n", "sample_symmetry", "(", "w0", ",", "0", ",", "math", ".", "pi", "/", "2", ")", ",", "\n", "sample_symmetry", "(", "w1", ",", "0", ",", "CM", ".", "detection", ".", "theta", "[", "0", "]", ")", ",", "\n", "]", "\n", "", "else", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "w", "=", "sample_symmetry", "(", "w0", ",", "0", ",", "math", ".", "pi", "/", "2", ")", "\n", "if", "sum", "(", "to_label", "(", "w", ",", "w0", ")", ")", "==", "0", ":", "\n", "                ", "break", "\n", "", "", "ws", "=", "[", "w", "]", "\n", "", "for", "theta1", ",", "theta0", "in", "zip", "(", "CM", ".", "detection", ".", "theta", ",", "CM", ".", "detection", ".", "theta", "[", "1", ":", "]", "+", "[", "0", "]", ")", ":", "\n", "        ", "ws", ".", "append", "(", "sample_symmetry", "(", "w0", ",", "theta0", "*", "1.001", ",", "theta1", "*", "0.999", ")", ")", "\n", "", "return", "w0", ",", "ws", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.datasets.sample_symmetry": [[221, 224], ["datasets.sample_sphere", "numpy.norm"], "function", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.datasets.sample_sphere"], ["", "def", "sample_symmetry", "(", "w0", ",", "theta0", ",", "theta1", ",", "delta", "=", "1", ")", ":", "\n", "    ", "w", "=", "sample_sphere", "(", "w0", "/", "LA", ".", "norm", "(", "w0", ")", ",", "theta0", ",", "theta1", ")", "\n", "return", "w", "/", "(", "delta", "*", "w", "[", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.datasets.sample_sphere": [[226, 240], ["random.uniform", "datasets.sample_sphere.orth"], "function", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.misc.find-radius.orth"], ["", "def", "sample_sphere", "(", "v", ",", "theta0", ",", "theta1", ")", ":", "\n", "    ", "def", "orth", "(", "v", ")", ":", "\n", "        ", "x", ",", "y", ",", "z", "=", "v", "\n", "o", "=", "np", ".", "array", "(", "[", "0.0", ",", "-", "z", ",", "y", "]", "if", "abs", "(", "x", ")", "<", "abs", "(", "y", ")", "else", "[", "-", "z", ",", "0.0", ",", "x", "]", ")", "\n", "o", "/=", "LA", ".", "norm", "(", "o", ")", "\n", "return", "o", "\n", "\n", "", "costheta", "=", "random", ".", "uniform", "(", "math", ".", "cos", "(", "theta1", ")", ",", "math", ".", "cos", "(", "theta0", ")", ")", "\n", "phi", "=", "random", ".", "random", "(", ")", "*", "math", ".", "pi", "*", "2", "\n", "v1", "=", "orth", "(", "v", ")", "\n", "v2", "=", "np", ".", "cross", "(", "v", ",", "v1", ")", "\n", "r", "=", "math", ".", "sqrt", "(", "1", "-", "costheta", "**", "2", ")", "\n", "w", "=", "v", "*", "costheta", "+", "r", "*", "(", "v1", "*", "math", ".", "cos", "(", "phi", ")", "+", "v2", "*", "math", ".", "sin", "(", "phi", ")", ")", "\n", "return", "w", "/", "LA", ".", "norm", "(", "w", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.datasets.w2S": [[242, 247], ["numpy.eye", "numpy.eye", "numpy.sum", "numpy.sum", "numpy.outer"], "function", ["None"], ["", "def", "w2S", "(", "w", ")", ":", "\n", "    ", "S", "=", "np", ".", "eye", "(", "4", ")", "\n", "S", "[", ":", "3", ",", ":", "3", "]", "=", "np", ".", "eye", "(", "3", ")", "-", "2", "*", "np", ".", "outer", "(", "w", ",", "w", ")", "/", "np", ".", "sum", "(", "w", "**", "2", ")", "\n", "S", "[", ":", "3", ",", "3", "]", "=", "-", "2", "*", "w", "/", "np", ".", "sum", "(", "w", "**", "2", ")", "\n", "return", "S", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.datasets.to_label": [[249, 252], ["math.acos", "numpy.clip", "numpy.norm", "abs", "numpy.norm"], "function", ["None"], ["", "def", "to_label", "(", "w", ",", "w0", ")", ":", "\n", "    ", "theta", "=", "math", ".", "acos", "(", "np", ".", "clip", "(", "abs", "(", "w", "@", "w0", ")", "/", "LA", ".", "norm", "(", "w", ")", "/", "LA", ".", "norm", "(", "w0", ")", ",", "-", "1", ",", "1", ")", ")", "\n", "return", "[", "theta", "<", "theta0", "for", "theta0", "in", "CM", ".", "detection", ".", "theta", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.models.mvsnet.MVSNet.__init__": [[24, 39], ["torch.Module.__init__", "mvsnet.FeatureNet", "mvsnet.VolumeNet", "mvsnet.DetectionNet", "mvsnet.RefineNet", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "mvsnet.MVSNet.register_buffer"], "methods", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.models.utils.ConvTrBnReLU3D.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "MVSNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "feature_network", "=", "FeatureNet", "(", ")", "\n", "self", ".", "volume_network", "=", "VolumeNet", "(", ")", "\n", "self", ".", "detection_network", "=", "DetectionNet", "(", ")", "\n", "self", ".", "refine", "=", "RefineNet", "(", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Conv2d", "(", "64", ",", "32", ",", "1", ")", "\n", "# self.fc_ablation = nn.Conv3d(32, 64, 1)", "\n", "\n", "if", "CM", ".", "cat_depth_feature", ":", "\n", "            ", "depth_feature", "=", "torch", ".", "zeros", "(", "[", "1", ",", "32", ",", "CM", ".", "num_depth", ",", "1", ",", "1", "]", ")", "\n", "div", "=", "CM", ".", "num_depth", "//", "32", "\n", "for", "i", "in", "range", "(", "CM", ".", "num_depth", ")", ":", "\n", "                ", "depth_feature", "[", "0", ",", "i", "//", "div", ",", "i", ",", "0", ",", "0", "]", "=", "(", "i", "%", "div", "+", "1", ")", "/", "div", "\n", "", "self", ".", "register_buffer", "(", "\"depth_feature\"", ",", "depth_feature", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.models.mvsnet.MVSNet.forward": [[40, 82], ["len", "mvsnet.MVSNet.feature_network", "mvsnet.MVSNet.repeat_interleave", "mvsnet.MVSNet.fc().repeat_interleave", "S.view.view.view", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "mvsnet.MVSNet.volume_network", "torch.softmax", "torch.softmax", "torch.softmax", "sym.models.utils.depth_softargmin", "mvsnet.MVSNet.detection_network", "mvsnet.MVSNet.unsqueeze().repeat", "torch.cat.append", "torch.cat.append", "torch.cat.append", "sym.models.utils.warp", "mvsnet.MVSNet.refine", "sym.models.utils.resample", "mvsnet.MVSNet.fc", "mvsnet.MVSNet.depth_feature.repeat", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "sym.models.utils.depth_softargmin().long", "mvsnet.MVSNet.unsqueeze", "torch.avg_pool3d", "torch.avg_pool3d", "torch.avg_pool3d", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "sym.models.utils.depth_softargmin"], "methods", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.BoxList.append", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.BoxList.append", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.BoxList.append", "home.repos.pwc.inspect_result.zhou13_symmetrynet.models.utils.depth_softargmin", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.BoxList.append", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.BoxList.append", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.BoxList.append", "home.repos.pwc.inspect_result.zhou13_symmetrynet.models.utils.warp", "home.repos.pwc.inspect_result.zhou13_symmetrynet.models.utils.resample", "home.repos.pwc.inspect_result.zhou13_symmetrynet.models.utils.depth_softargmin"], ["", "", "def", "forward", "(", "self", ",", "image", ",", "S", ",", "w", ",", "gamma", ")", ":", "\n", "        ", "D", "=", "len", "(", "gamma", ")", "\n", "\n", "# step 1. feature extraction", "\n", "x", "=", "self", ".", "feature_network", "(", "image", ")", "# [N, 32, H, W]", "\n", "N", ",", "_", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "c", "=", "1", "\n", "\n", "# step 2. differentiable homograph, build cost volume", "\n", "# during training, duplicate images for sampling symmetric axis", "\n", "c", "=", "S", ".", "shape", "[", "1", "]", "\n", "x2d", "=", "x", ".", "repeat_interleave", "(", "c", ",", "dim", "=", "0", ")", "\n", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", ".", "repeat_interleave", "(", "c", ",", "dim", "=", "0", ")", "\n", "vol", "=", "[", "x", ".", "unsqueeze", "(", "2", ")", ".", "repeat", "(", "1", ",", "1", ",", "D", ",", "1", ",", "1", ")", "]", "\n", "if", "CM", ".", "cat_depth_feature", ":", "\n", "            ", "vol", ".", "append", "(", "self", ".", "depth_feature", ".", "repeat", "(", "N", "*", "c", ",", "1", ",", "1", ",", "H", ",", "W", ")", ")", "\n", "", "S", "=", "S", ".", "view", "(", "N", "*", "c", ",", "4", ",", "4", ")", "\n", "vol", ".", "append", "(", "warp", "(", "x", ",", "S", ",", "gamma", ")", ")", "\n", "vol", "=", "torch", ".", "cat", "(", "vol", ",", "1", ")", "\n", "\n", "# step 3. cost volume regularization", "\n", "cost", ",", "x3d", "=", "self", ".", "volume_network", "(", "vol", ")", "\n", "prob", "=", "F", ".", "softmax", "(", "cost", ",", "dim", "=", "1", ")", "\n", "depth", "=", "depth_softargmin", "(", "prob", ",", "gamma", ")", "\n", "\n", "if", "CM", ".", "do_refine", ":", "\n", "            ", "depth", "=", "self", ".", "refine", "(", "depth", ",", "x", ")", "\n", "\n", "", "confidence", "=", "None", "\n", "if", "not", "self", ".", "training", "and", "CM", ".", "save_confidence", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# prob_smooth: [N, D, H/4, W/4]", "\n", "                ", "prob_smooth", "=", "F", ".", "avg_pool3d", "(", "\n", "prob", "[", ":", ",", "None", "]", ",", "(", "5", ",", "1", ",", "1", ")", ",", "stride", "=", "1", ",", "padding", "=", "(", "2", ",", "0", ",", "0", ")", "\n", ")", "[", ":", ",", "0", "]", "\n", "index", "=", "torch", ".", "arange", "(", "D", ",", "device", "=", "x", ".", "device", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "depth_index", "=", "depth_softargmin", "(", "prob", ",", "index", ")", ".", "long", "(", ")", "\n", "confidence", "=", "torch", ".", "gather", "(", "prob_smooth", ",", "1", ",", "depth_index", ")", "[", ":", ",", "0", "]", "\n", "\n", "", "", "cls", "=", "self", ".", "detection_network", "(", "x2d", ",", "x3d", ",", "w", ")", "\n", "return", "resample", "(", "depth", ",", "4", ")", ",", "cls", ",", "confidence", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.models.mvsnet.FeatureNet.__init__": [[85, 113], ["torch.Module.__init__", "hasattr", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "sym.models.utils.BasicBlock", "sym.models.utils.BasicBlock", "sym.models.utils.BasicBlock", "sym.models.utils.BasicBlock", "sym.models.utils.BasicBlock", "sym.models.utils.BasicBlock", "sym.models.utils.BasicBlock", "sym.models.utils.BasicBlock"], "methods", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.models.utils.ConvTrBnReLU3D.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "hasattr", "(", "CM", ",", "\"backbone2d\"", ")", "and", "CM", ".", "backbone2d", "==", "\"5x5\"", ":", "\n", "            ", "self", ".", "backbone", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "4", ",", "32", ",", "5", ",", "2", ",", "2", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "32", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "32", ",", "32", ",", "5", ",", "1", ",", "2", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "32", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "32", ",", "64", ",", "5", ",", "2", ",", "2", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "5", ",", "1", ",", "2", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "backbone", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "4", ",", "64", ",", "5", ",", "2", ",", "2", ")", ",", "\n", "BasicBlock", "(", "64", ",", "64", ")", ",", "\n", "BasicBlock", "(", "64", ",", "64", ")", ",", "\n", "BasicBlock", "(", "64", ",", "64", ")", ",", "\n", "BasicBlock", "(", "64", ",", "64", ",", "2", ")", ",", "\n", "BasicBlock", "(", "64", ",", "64", ")", ",", "\n", "BasicBlock", "(", "64", ",", "64", ")", ",", "\n", "BasicBlock", "(", "64", ",", "64", ")", ",", "\n", "BasicBlock", "(", "64", ",", "64", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.models.mvsnet.FeatureNet.forward": [[115, 117], ["mvsnet.FeatureNet.backbone"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "backbone", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.models.mvsnet.VolumeNet.__init__": [[120, 150], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "sym.models.utils.ConvTrBnReLU3D", "sym.models.utils.ConvTrBnReLU3D", "sym.models.utils.ConvTrBnReLU3D", "sym.models.utils.ConvTrBnReLU3D", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "sym.models.utils.ConvBnReLU3D", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "sym.models.utils.ConvBnReLU3D", "sym.models.utils.ConvBnReLU3D", "sym.models.utils.ConvBnReLU3D", "sym.models.utils.ConvBnReLU3D", "sym.models.utils.ConvBnReLU3D", "sym.models.utils.ConvBnReLU3D", "sym.models.utils.ConvBnReLU3D", "sym.models.utils.ConvBnReLU3D", "torch.MaxPool3d", "torch.MaxPool3d", "torch.MaxPool3d", "sym.models.utils.ConvBnReLU3D", "torch.MaxPool3d", "torch.MaxPool3d", "torch.MaxPool3d", "sym.models.utils.ConvBnReLU3D", "torch.MaxPool3d", "torch.MaxPool3d", "torch.MaxPool3d", "sym.models.utils.ConvBnReLU3D", "torch.MaxPool3d", "torch.MaxPool3d", "torch.MaxPool3d", "sym.models.utils.ConvBnReLU3D", "sym.models.utils.ConvBnReLU3D", "sym.models.utils.ConvBnReLU3D", "sym.models.utils.ConvBnReLU3D", "sym.models.utils.ConvBnReLU3D", "sym.models.utils.ConvBnReLU3D", "sym.models.utils.ConvBnReLU3D", "int", "int"], "methods", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.models.utils.ConvTrBnReLU3D.__init__", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.ConfigBox.int", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.ConfigBox.int"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "CM", ".", "large_volumenet", ":", "\n", "            ", "self", ".", "conv0", "=", "nn", ".", "Sequential", "(", "\n", "ConvBnReLU3D", "(", "32", "*", "(", "2", "+", "int", "(", "CM", ".", "cat_depth_feature", ")", ")", ",", "64", ",", "1", ",", "1", ",", "0", ")", ",", "\n", "ConvBnReLU3D", "(", "64", ",", "64", ",", "1", ",", "1", ",", "0", ")", ",", "\n", "ConvBnReLU3D", "(", "64", ",", "8", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv0", "=", "nn", ".", "Sequential", "(", "\n", "ConvBnReLU3D", "(", "32", "*", "(", "2", "+", "int", "(", "CM", ".", "cat_depth_feature", ")", ")", ",", "16", ",", "1", ",", "1", ",", "0", ")", ",", "\n", "ConvBnReLU3D", "(", "16", ",", "8", ",", "1", ",", "1", ",", "0", ")", ",", "\n", "ConvBnReLU3D", "(", "8", ",", "8", ")", ",", "\n", ")", "\n", "\n", "", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "ConvBnReLU3D", "(", "8", ",", "16", ",", "3", ",", "2", ")", ",", "ConvBnReLU3D", "(", "16", ",", "16", ")", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Sequential", "(", "ConvBnReLU3D", "(", "16", ",", "32", ",", "3", ",", "2", ")", ",", "ConvBnReLU3D", "(", "32", ",", "32", ")", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Sequential", "(", "ConvBnReLU3D", "(", "32", ",", "64", ",", "3", ",", "2", ")", ",", "ConvBnReLU3D", "(", "64", ",", "64", ")", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Sequential", "(", "ConvBnReLU3D", "(", "64", ",", "128", ",", "3", ",", "2", ")", ",", "ConvBnReLU3D", "(", "128", ",", "128", ")", ")", "\n", "self", ".", "donv4", "=", "ConvTrBnReLU3D", "(", "128", ",", "64", ",", "stride", "=", "2", ")", "\n", "self", ".", "donv3", "=", "ConvTrBnReLU3D", "(", "64", ",", "32", ",", "stride", "=", "2", ")", "\n", "self", ".", "donv2", "=", "ConvTrBnReLU3D", "(", "32", ",", "16", ",", "stride", "=", "2", ")", "\n", "self", ".", "donv1", "=", "ConvTrBnReLU3D", "(", "16", ",", "8", ",", "stride", "=", "2", ")", "\n", "self", ".", "prob", "=", "nn", ".", "Conv3d", "(", "8", ",", "1", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "fc0", "=", "nn", ".", "Sequential", "(", "nn", ".", "MaxPool3d", "(", "16", ",", "16", ")", ",", "ConvBnReLU3D", "(", "8", ",", "16", ")", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Sequential", "(", "nn", ".", "MaxPool3d", "(", "8", ",", "8", ")", ",", "ConvBnReLU3D", "(", "16", ",", "16", ")", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Sequential", "(", "nn", ".", "MaxPool3d", "(", "4", ",", "4", ")", ",", "ConvBnReLU3D", "(", "32", ",", "32", ")", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Sequential", "(", "nn", ".", "MaxPool3d", "(", "2", ",", "2", ")", ",", "ConvBnReLU3D", "(", "64", ",", "64", ")", ")", "\n", "self", ".", "fc4", "=", "ConvBnReLU3D", "(", "128", ",", "128", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.models.mvsnet.VolumeNet.forward": [[151, 176], ["mvsnet.VolumeNet.conv0", "mvsnet.VolumeNet.conv1", "mvsnet.VolumeNet.conv2", "mvsnet.VolumeNet.conv3", "mvsnet.VolumeNet.conv4", "mvsnet.VolumeNet.prob", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "mvsnet.VolumeNet.donv4", "mvsnet.VolumeNet.donv3", "mvsnet.VolumeNet.donv2", "mvsnet.VolumeNet.donv1", "mvsnet.VolumeNet.fc0", "mvsnet.VolumeNet.fc1", "mvsnet.VolumeNet.fc2", "mvsnet.VolumeNet.fc3", "mvsnet.VolumeNet.fc4"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x0", "=", "self", ".", "conv0", "(", "x", ")", "\n", "x1", "=", "self", ".", "conv1", "(", "x0", ")", "\n", "x2", "=", "self", ".", "conv2", "(", "x1", ")", "\n", "x3", "=", "self", ".", "conv3", "(", "x2", ")", "\n", "x4", "=", "self", ".", "conv4", "(", "x3", ")", "\n", "\n", "# depth branch", "\n", "if", "CM", ".", "enable_depth", ":", "\n", "            ", "x", "=", "x4", "\n", "x", "=", "x3", "+", "self", ".", "donv4", "(", "x", ")", "\n", "x", "=", "x2", "+", "self", ".", "donv3", "(", "x", ")", "\n", "x", "=", "x1", "+", "self", ".", "donv2", "(", "x", ")", "\n", "x", "=", "x0", "+", "self", ".", "donv1", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "x0", "\n", "", "x", "=", "self", ".", "prob", "(", "x", ")", "\n", "\n", "# detection branch", "\n", "xp", "=", "torch", ".", "cat", "(", "\n", "[", "self", ".", "fc0", "(", "x0", ")", ",", "self", ".", "fc1", "(", "x1", ")", ",", "self", ".", "fc2", "(", "x2", ")", ",", "self", ".", "fc3", "(", "x3", ")", ",", "self", ".", "fc4", "(", "x4", ")", "]", ",", "\n", "dim", "=", "1", ",", "\n", ")", "\n", "\n", "return", "x", "[", ":", ",", "0", "]", ",", "xp", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.models.mvsnet.DetectionNet.__init__": [[179, 215], ["torch.Module.__init__", "hasattr", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Flatten", "torch.Flatten", "torch.Flatten", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Flatten", "torch.Flatten", "torch.Flatten", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.AdaptiveMaxPool3d", "torch.AdaptiveMaxPool3d", "torch.AdaptiveMaxPool3d", "torch.Flatten", "torch.Flatten", "torch.Flatten", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.models.utils.ConvTrBnReLU3D.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "dim_fc", "=", "CM", ".", "detection", ".", "fc_channel", "\n", "if", "not", "hasattr", "(", "CM", ".", "detection", ",", "\"fc_pool\"", ")", ":", "\n", "# backward compatible", "\n", "            ", "self", ".", "flatten3d", "=", "nn", ".", "Sequential", "(", "nn", ".", "Flatten", "(", ")", ")", "\n", "self", ".", "fc3d", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "16384", ",", "dim_fc", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", "p", "=", "CM", ".", "detection", ".", "dropout", ")", ",", "\n", "nn", ".", "Linear", "(", "dim_fc", ",", "dim_fc", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", "p", "=", "CM", ".", "detection", ".", "dropout", ")", ",", "\n", "nn", ".", "Linear", "(", "dim_fc", ",", "CM", ".", "detection", ".", "n_level", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "if", "CM", ".", "detection", ".", "fc_pool", ":", "\n", "                ", "self", ".", "flatten3d", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Flatten", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "16384", ",", "dim_fc", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", "p", "=", "CM", ".", "detection", ".", "dropout", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "flatten3d", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "256", ",", "dim_fc", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "AdaptiveMaxPool3d", "(", "(", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Flatten", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "dim_fc", ",", "dim_fc", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "", "self", ".", "fc3d", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "dim_fc", ",", "dim_fc", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "dim_fc", ",", "CM", ".", "detection", ".", "n_level", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.models.mvsnet.DetectionNet.forward": [[217, 221], ["mvsnet.DetectionNet.fc3d", "mvsnet.DetectionNet.view", "mvsnet.DetectionNet.flatten3d"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x2d", ",", "x3d", ",", "w", ")", ":", "\n", "        ", "N", ",", "c", ",", "_", "=", "w", ".", "shape", "\n", "x", "=", "self", ".", "fc3d", "(", "self", ".", "flatten3d", "(", "x3d", ")", ")", "\n", "return", "x", ".", "view", "(", "N", ",", "c", ",", "CM", ".", "detection", ".", "n_level", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.models.mvsnet.RefineNet.__init__": [[224, 229], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "sym.models.hourglass_pose.Hourglass", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.models.utils.ConvTrBnReLU3D.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "33", ",", "32", ",", "1", ")", "\n", "self", ".", "hg", "=", "Hourglass", "(", "Bottleneck2D", ",", "1", ",", "16", ",", "4", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Conv2d", "(", "32", ",", "1", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.models.mvsnet.RefineNet.forward": [[230, 234], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "mvsnet.RefineNet.fc", "mvsnet.RefineNet.hg", "mvsnet.RefineNet.conv"], "methods", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.models.hourglass_pose.hg"], ["", "def", "forward", "(", "self", ",", "depth", ",", "image", ")", ":", "\n", "        ", "x", "=", "torch", ".", "cat", "(", "[", "depth", ",", "image", "]", ",", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "self", ".", "hg", "(", "self", ".", "conv", "(", "x", ")", ")", ")", "\n", "return", "depth", "+", "x", "*", "0.02", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.models.hourglass_pose.Bottleneck2D.__init__": [[22, 33], ["torch.Module.__init__", "hourglass_pose.abn", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "hourglass_pose.abn", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "hourglass_pose.abn", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.models.utils.ConvTrBnReLU3D.__init__", "home.repos.pwc.inspect_result.zhou13_symmetrynet.models.hourglass_pose.abn", "home.repos.pwc.inspect_result.zhou13_symmetrynet.models.hourglass_pose.abn", "home.repos.pwc.inspect_result.zhou13_symmetrynet.models.hourglass_pose.abn"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "resample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck2D", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "abn1", "=", "abn", "(", "inplanes", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "abn2", "=", "abn", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ")", "\n", "self", ".", "abn3", "=", "abn", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "Bottleneck2D", ".", "expansion", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "resample", "=", "resample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.models.hourglass_pose.Bottleneck2D.forward": [[34, 49], ["hourglass_pose.Bottleneck2D.abn1", "hourglass_pose.Bottleneck2D.conv1", "hourglass_pose.Bottleneck2D.abn2", "hourglass_pose.Bottleneck2D.conv2", "hourglass_pose.Bottleneck2D.abn3", "hourglass_pose.Bottleneck2D.conv3", "hourglass_pose.Bottleneck2D.resample"], "methods", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.models.utils.resample"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "if", "self", ".", "resample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "resample", "(", "x", ")", "\n", "\n", "", "x", "=", "self", ".", "abn1", "(", "x", ")", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "abn2", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "abn3", "(", "x", ")", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "\n", "x", "+=", "residual", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.models.hourglass_pose.Hourglass.__init__": [[52, 57], ["torch.Module.__init__", "hourglass_pose.Hourglass._make_hour_glass"], "methods", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.models.utils.ConvTrBnReLU3D.__init__", "home.repos.pwc.inspect_result.zhou13_symmetrynet.models.hourglass_pose.Hourglass._make_hour_glass"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "planes", ",", "depth", ")", ":", "\n", "        ", "super", "(", "Hourglass", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "depth", "=", "depth", "\n", "self", ".", "block", "=", "block", "\n", "self", ".", "hg", "=", "self", ".", "_make_hour_glass", "(", "block", ",", "num_blocks", ",", "planes", ",", "depth", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.models.hourglass_pose.Hourglass._make_residual": [[58, 63], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.BoxList.append"], ["", "def", "_make_residual", "(", "self", ",", "block", ",", "num_blocks", ",", "planes", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "num_blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "planes", "*", "block", ".", "expansion", ",", "planes", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.models.hourglass_pose.Hourglass._make_hour_glass": [[64, 74], ["range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "hg.append", "res.append", "res.append", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "hourglass_pose.Hourglass._make_residual", "hourglass_pose.Hourglass._make_residual"], "methods", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.BoxList.append", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.BoxList.append", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.BoxList.append", "home.repos.pwc.inspect_result.zhou13_symmetrynet.models.hourglass_pose.HourglassNet._make_residual", "home.repos.pwc.inspect_result.zhou13_symmetrynet.models.hourglass_pose.HourglassNet._make_residual"], ["", "def", "_make_hour_glass", "(", "self", ",", "block", ",", "num_blocks", ",", "planes", ",", "depth", ")", ":", "\n", "        ", "hg", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "depth", ")", ":", "\n", "            ", "res", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "3", ")", ":", "\n", "                ", "res", ".", "append", "(", "self", ".", "_make_residual", "(", "block", ",", "num_blocks", ",", "planes", ")", ")", "\n", "", "if", "i", "==", "0", ":", "\n", "                ", "res", ".", "append", "(", "self", ".", "_make_residual", "(", "block", ",", "num_blocks", ",", "planes", ")", ")", "\n", "", "hg", ".", "append", "(", "nn", ".", "ModuleList", "(", "res", ")", ")", "\n", "", "return", "nn", ".", "ModuleList", "(", "hg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.models.hourglass_pose.Hourglass._hour_glass_forward": [[75, 87], ["torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.interpolate", "torch.interpolate", "torch.interpolate", "hourglass_pose.Hourglass._hour_glass_forward"], "methods", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.models.hourglass_pose.Hourglass._hour_glass_forward"], ["", "def", "_hour_glass_forward", "(", "self", ",", "n", ",", "x", ")", ":", "\n", "        ", "up1", "=", "self", ".", "hg", "[", "n", "-", "1", "]", "[", "0", "]", "(", "x", ")", "\n", "low1", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ",", "stride", "=", "2", ")", "\n", "low1", "=", "self", ".", "hg", "[", "n", "-", "1", "]", "[", "1", "]", "(", "low1", ")", "\n", "\n", "if", "n", ">", "1", ":", "\n", "            ", "low2", "=", "self", ".", "_hour_glass_forward", "(", "n", "-", "1", ",", "low1", ")", "\n", "", "else", ":", "\n", "            ", "low2", "=", "self", ".", "hg", "[", "n", "-", "1", "]", "[", "3", "]", "(", "low1", ")", "\n", "", "low3", "=", "self", ".", "hg", "[", "n", "-", "1", "]", "[", "2", "]", "(", "low2", ")", "\n", "up2", "=", "F", ".", "interpolate", "(", "low3", ",", "scale_factor", "=", "2", ",", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "False", ")", "\n", "return", "up1", "+", "up2", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.models.hourglass_pose.Hourglass.forward": [[88, 90], ["hourglass_pose.Hourglass._hour_glass_forward"], "methods", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.models.hourglass_pose.Hourglass._hour_glass_forward"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "_hour_glass_forward", "(", "self", ".", "depth", ",", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.models.hourglass_pose.HourglassNet.__init__": [[93, 126], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "hourglass_pose.HourglassNet._make_residual", "hourglass_pose.HourglassNet._make_residual", "hourglass_pose.HourglassNet._make_residual", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "hg.append", "res.append", "fc.append", "score.append", "hourglass_pose.Hourglass", "hourglass_pose.HourglassNet._make_residual", "hourglass_pose.HourglassNet._make_fc", "head", "fc_.append", "score_.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "inv_head"], "methods", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.models.utils.ConvTrBnReLU3D.__init__", "home.repos.pwc.inspect_result.zhou13_symmetrynet.models.hourglass_pose.HourglassNet._make_residual", "home.repos.pwc.inspect_result.zhou13_symmetrynet.models.hourglass_pose.HourglassNet._make_residual", "home.repos.pwc.inspect_result.zhou13_symmetrynet.models.hourglass_pose.HourglassNet._make_residual", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.BoxList.append", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.BoxList.append", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.BoxList.append", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.BoxList.append", "home.repos.pwc.inspect_result.zhou13_symmetrynet.models.hourglass_pose.HourglassNet._make_residual", "home.repos.pwc.inspect_result.zhou13_symmetrynet.models.hourglass_pose.HourglassNet._make_fc", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.BoxList.append", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.BoxList.append"], ["    ", "def", "__init__", "(", "self", ",", "planes", ",", "block", ",", "head", ",", "inv_head", ",", "depth", ",", "num_stacks", ",", "num_blocks", ")", ":", "\n", "        ", "super", "(", "HourglassNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "num_feats", "=", "128", "\n", "self", ".", "num_stacks", "=", "num_stacks", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "4", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "inplanes", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_residual", "(", "block", ",", "self", ".", "inplanes", ",", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_residual", "(", "block", ",", "self", ".", "inplanes", ",", "1", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_residual", "(", "block", ",", "self", ".", "num_feats", ",", "1", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "2", ",", "stride", "=", "2", ")", "\n", "\n", "# build hourglass modules", "\n", "ch", "=", "self", ".", "num_feats", "*", "block", ".", "expansion", "\n", "\n", "hg", ",", "res", ",", "fc", ",", "score", ",", "fc_", ",", "score_", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "num_stacks", ")", ":", "\n", "            ", "hg", ".", "append", "(", "Hourglass", "(", "block", ",", "num_blocks", ",", "self", ".", "num_feats", ",", "depth", ")", ")", "\n", "res", ".", "append", "(", "self", ".", "_make_residual", "(", "block", ",", "self", ".", "num_feats", ",", "num_blocks", ")", ")", "\n", "fc", ".", "append", "(", "self", ".", "_make_fc", "(", "ch", ",", "ch", ")", ")", "\n", "score", ".", "append", "(", "head", "(", "ch", ",", "planes", ")", ")", "\n", "if", "i", "<", "num_stacks", "-", "1", ":", "\n", "                ", "fc_", ".", "append", "(", "nn", ".", "Conv2d", "(", "ch", ",", "ch", ",", "kernel_size", "=", "1", ")", ")", "\n", "score_", ".", "append", "(", "inv_head", "(", "planes", ",", "ch", ")", ")", "\n", "\n", "", "", "self", ".", "hg", "=", "nn", ".", "ModuleList", "(", "hg", ")", "\n", "self", ".", "res", "=", "nn", ".", "ModuleList", "(", "res", ")", "\n", "self", ".", "fc", "=", "nn", ".", "ModuleList", "(", "fc", ")", "\n", "self", ".", "score", "=", "nn", ".", "ModuleList", "(", "score", ")", "\n", "self", ".", "fc_", "=", "nn", ".", "ModuleList", "(", "fc_", ")", "\n", "self", ".", "score_", "=", "nn", ".", "ModuleList", "(", "score_", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.models.hourglass_pose.HourglassNet._make_residual": [[127, 138], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "block", "layers.append", "block"], "methods", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.BoxList.append"], ["", "def", "_make_residual", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "resample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "resample", "=", "nn", ".", "Conv2d", "(", "\n", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", "\n", ")", "\n", "", "layers", "=", "[", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "resample", ")", "]", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "blocks", "-", "1", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.models.hourglass_pose.HourglassNet._make_fc": [[139, 142], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "hourglass_pose.abn"], "methods", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.models.hourglass_pose.abn"], ["", "def", "_make_fc", "(", "self", ",", "inplanes", ",", "outplanes", ")", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "inplanes", ",", "outplanes", ",", "kernel_size", "=", "1", ")", ",", "abn", "(", "outplanes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.models.hourglass_pose.HourglassNet.forward": [[144, 167], ["hourglass_pose.HourglassNet.conv1", "hourglass_pose.HourglassNet.relu", "hourglass_pose.HourglassNet.bn1", "hourglass_pose.HourglassNet.layer1", "hourglass_pose.HourglassNet.maxpool", "hourglass_pose.HourglassNet.layer2", "hourglass_pose.HourglassNet.layer3", "range", "out.append"], "methods", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.BoxList.append"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "[", "]", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "num_stacks", ")", ":", "\n", "            ", "y", "=", "self", ".", "hg", "[", "i", "]", "(", "x", ")", "\n", "y", "=", "self", ".", "res", "[", "i", "]", "(", "y", ")", "\n", "y", "=", "self", ".", "fc", "[", "i", "]", "(", "y", ")", "\n", "score", "=", "self", ".", "score", "[", "i", "]", "(", "y", ")", "\n", "out", ".", "append", "(", "score", ")", "\n", "if", "i", "<", "self", ".", "num_stacks", "-", "1", ":", "\n", "                ", "fc_", "=", "self", ".", "fc_", "[", "i", "]", "(", "y", ")", "\n", "score_", "=", "self", ".", "score_", "[", "i", "]", "(", "score", ")", "\n", "x", "=", "x", "+", "fc_", "+", "score_", "\n", "\n", "", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.models.hourglass_pose.abn": [[15, 17], ["torch.Sequential", "torch.BatchNorm2d", "torch.ReLU"], "function", ["None"], ["def", "abn", "(", "planes", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "nn", ".", "BatchNorm2d", "(", "planes", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.models.hourglass_pose.hg": [[169, 180], ["hourglass_pose.HourglassNet", "kwargs.get", "kwargs.get", "torch.Conv2d", "torch.Conv2d"], "function", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.get", "home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.Box.get"], ["", "", "def", "hg", "(", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "HourglassNet", "(", "\n", "planes", "=", "kwargs", "[", "\"planes\"", "]", ",", "\n", "block", "=", "Bottleneck2D", ",", "\n", "head", "=", "kwargs", ".", "get", "(", "\"head\"", ",", "lambda", "c_in", ",", "c_out", ":", "nn", ".", "Conv2d", "(", "c_in", ",", "c_out", ",", "1", ")", ")", ",", "\n", "inv_head", "=", "kwargs", ".", "get", "(", "\"inv_head\"", ",", "lambda", "c_in", ",", "c_out", ":", "nn", ".", "Conv2d", "(", "c_in", ",", "c_out", ",", "1", ")", ")", ",", "\n", "depth", "=", "kwargs", "[", "\"depth\"", "]", ",", "\n", "num_stacks", "=", "kwargs", "[", "\"num_stacks\"", "]", ",", "\n", "num_blocks", "=", "kwargs", "[", "\"num_blocks\"", "]", ",", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.models.hourglass_pose.main": [[182, 184], ["hourglass_pose.hg"], "function", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.models.hourglass_pose.hg"], ["", "def", "main", "(", ")", ":", "\n", "    ", "hg", "(", "depth", "=", "2", ",", "num_stacks", "=", "1", ",", "num_blocks", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.models.symmetry_net.SymmetryNet.__init__": [[22, 33], ["torch.Module.__init__", "numpy.linspace", "numpy.linspace", "symmetry_net.SymmetryNet.register_buffer", "symmetry_net.SymmetryNet.register_buffer", "sym.models.mvsnet.MVSNet", "torch.BCEWithLogitsLoss", "torch.BCEWithLogitsLoss", "torch.BCEWithLogitsLoss", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.models.utils.ConvTrBnReLU3D.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "# gamma is depth", "\n", "gamma", "=", "np", ".", "linspace", "(", "CI", ".", "depth_min", ",", "CI", ".", "depth_max", ",", "CM", ".", "num_depth", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "gamma2", "=", "(", "np", ".", "r_", "[", "gamma", ",", "gamma", "[", "-", "1", "]", "*", "2", "]", "+", "np", ".", "r_", "[", "0", ",", "gamma", "]", ")", "/", "2", "\n", "self", ".", "register_buffer", "(", "\"gamma\"", ",", "torch", ".", "from_numpy", "(", "gamma", ")", ")", "\n", "self", ".", "register_buffer", "(", "\"gamma2\"", ",", "torch", ".", "from_numpy", "(", "gamma2", ")", ")", "\n", "\n", "self", ".", "backbone", "=", "MVSNet", "(", ")", "\n", "self", ".", "detection_loss", "=", "nn", ".", "BCEWithLogitsLoss", "(", "reduction", "=", "\"none\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.models.symmetry_net.SymmetryNet.forward": [[34, 97], ["symmetry_net.SymmetryNet.backbone", "depth_gt.repeat_interleave.repeat_interleave.repeat_interleave", "mask.sum().clamp", "symmetry_net.SymmetryNet.detection_loss", "range", "depth.view.view.view", "y.sigmoid", "mask.sum", "L_depth.view.view.view", "range", "maskn[].sum().item", "maskp[].sum().item", "maskn[].sum", "maskp[].sum", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "maskn[].sum", "maskp[].sum", "symmetry_net.l1_smooth"], "methods", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.models.symmetry_net.l1_smooth"], ["", "def", "forward", "(", "self", ",", "input", ",", "mode", ")", ":", "\n", "        ", "depth_gt", "=", "input", "[", "\"depth\"", "]", "\n", "if", "CM", ".", "loss", "==", "\"Ordinal\"", ":", "\n", "            ", "target", "=", "(", "depth_gt", ">", "self", ".", "gamma", "[", ":", ",", "None", ",", "None", "]", ")", ".", "float", "(", ")", "\n", "\n", "", "N", ",", "_", ",", "H", ",", "W", "=", "input", "[", "\"image\"", "]", ".", "shape", "\n", "depth", ",", "y", ",", "confidence", "=", "self", ".", "backbone", "(", "\n", "input", "[", "\"image\"", "]", ",", "input", "[", "\"S\"", "]", ",", "input", "[", "\"w\"", "]", ",", "self", ".", "gamma", "\n", ")", "\n", "\n", "losses", "=", "{", "}", "\n", "n_sample", "=", "input", "[", "\"S\"", "]", ".", "shape", "[", "1", "]", "\n", "depth_gt", "=", "depth_gt", ".", "repeat_interleave", "(", "n_sample", ",", "dim", "=", "0", ")", "\n", "\n", "mask", "=", "(", "depth_gt", ">", "0", ")", ".", "float", "(", ")", "\n", "mask_sum", "=", "mask", ".", "sum", "(", "(", "2", ",", "3", ")", ")", ".", "clamp", "(", "min", "=", "1e-6", ")", "\n", "\n", "if", "CM", ".", "enable_depth", ":", "\n", "            ", "if", "CM", ".", "loss", "==", "\"L1\"", ":", "\n", "                ", "L_depth", "=", "(", "(", "depth", "-", "depth_gt", ")", ".", "abs", "(", ")", "*", "mask", ")", ".", "sum", "(", "(", "2", ",", "3", ")", ")", "/", "mask_sum", "\n", "", "elif", "CM", ".", "loss", "==", "\"L1_smooth\"", ":", "\n", "                ", "L_depth", "=", "(", "l1_smooth", "(", "depth", ",", "depth_gt", ")", "*", "mask", ")", ".", "sum", "(", "(", "2", ",", "3", ")", ")", "/", "mask_sum", "\n", "", "elif", "CM", ".", "loss", "==", "\"L2\"", ":", "\n", "                ", "L_depth", "=", "(", "(", "depth", "-", "depth_gt", ")", "**", "2", "*", "mask", ")", ".", "sum", "(", "(", "2", ",", "3", ")", ")", "/", "mask_sum", "\n", "", "elif", "CM", ".", "loss", "==", "\"Ordinal\"", ":", "\n", "                ", "loss", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "\n", "depth", ",", "target", ",", "reduction", "=", "\"none\"", "\n", ")", "\n", "L_depth", "=", "(", "loss", "*", "mask", ")", ".", "sum", "(", "(", "2", ",", "3", ")", ")", "/", "mask_sum", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "\n", "", "if", "mode", "!=", "\"test\"", ":", "\n", "                ", "L_depth", "=", "L_depth", ".", "view", "(", "N", ",", "-", "1", ")", "\n", "for", "i", "in", "range", "(", "n_sample", ")", ":", "\n", "                    ", "losses", "[", "f\"dep{i}\"", "]", "=", "(", "\n", "L_depth", "[", ":", ",", "i", "]", "*", "CM", ".", "weight_depth", "[", "i", "]", "*", "CM", ".", "weight_depth_", "\n", ")", "\n", "\n", "", "", "", "if", "mode", "!=", "\"test\"", ":", "\n", "            ", "y_gt", "=", "input", "[", "\"y\"", "]", "\n", "L_detection", "=", "self", ".", "detection_loss", "(", "y", ",", "y_gt", ")", "\n", "maskn", "=", "(", "y_gt", "==", "0", ")", ".", "float", "(", ")", "\n", "maskp", "=", "(", "y_gt", "==", "1", ")", ".", "float", "(", ")", "\n", "for", "i", "in", "range", "(", "CM", ".", "detection", ".", "n_level", ")", ":", "\n", "                ", "assert", "maskn", "[", "...", ",", "i", "]", ".", "sum", "(", ")", ".", "item", "(", ")", "!=", "0", "\n", "assert", "maskp", "[", "...", ",", "i", "]", ".", "sum", "(", ")", ".", "item", "(", ")", "!=", "0", "\n", "lneg", "=", "(", "L_detection", "[", "...", ",", "i", "]", "*", "maskn", "[", "...", ",", "i", "]", ")", ".", "sum", "(", ")", "/", "maskn", "[", "...", ",", "i", "]", ".", "sum", "(", ")", "\n", "lpos", "=", "(", "L_detection", "[", "...", ",", "i", "]", "*", "maskp", "[", "...", ",", "i", "]", ")", ".", "sum", "(", ")", "/", "maskp", "[", "...", ",", "i", "]", ".", "sum", "(", ")", "\n", "losses", "[", "f\"det{i}\"", "]", "=", "(", "lneg", "+", "lpos", ")", "[", "None", "]", "*", "CM", ".", "weight_detection", "\n", "\n", "", "", "preds", "=", "{", "}", "\n", "if", "mode", "!=", "\"train\"", ":", "\n", "            ", "depth", "=", "depth", ".", "view", "(", "N", ",", "-", "1", ",", "H", ",", "W", ")", "\n", "preds", "[", "\"score\"", "]", "=", "y", ".", "sigmoid", "(", ")", "\n", "preds", "[", "\"depth\"", "]", "=", "depth", "\n", "if", "CM", ".", "save_confidence", ":", "\n", "                ", "preds", "[", "\"confidence\"", "]", "=", "confidence", "\n", "\n", "", "", "return", "{", "\n", "\"losses\"", ":", "losses", ",", "\n", "\"preds\"", ":", "preds", ",", "\n", "\"metrics\"", ":", "{", "}", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.models.symmetry_net.SymmetryNet.save_figures": [[99, 133], ["numpy.rollaxis", "numpy.rollaxis", "preds[].cpu().numpy", "input[].cpu().numpy", "input[].cpu().numpy", "enumerate", "input[].cpu().numpy", "zip", "matplotlib.imshow", "matplotlib.imshow", "matplotlib.scatter", "matplotlib.scatter", "numpy.linspace", "numpy.linspace", "matplotlib.text", "matplotlib.text", "matplotlib.xlim", "matplotlib.xlim", "matplotlib.ylim", "matplotlib.ylim", "preds[].cpu", "input[].cpu", "input[].cpu", "matplotlib.plot", "matplotlib.plot", "matplotlib.savefig", "matplotlib.savefig", "matplotlib.close", "matplotlib.close", "input[].cpu", "dict", "map", "map"], "methods", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.sym.box.SBox.dict"], ["", "def", "save_figures", "(", "self", ",", "input", ",", "preds", ",", "prefix", ")", ":", "\n", "        ", "return", "\n", "\n", "plt", ".", "rcParams", "[", "\"figure.figsize\"", "]", "=", "(", "24", ",", "24", ")", "\n", "image", "=", "np", ".", "rollaxis", "(", "input", "[", "\"image\"", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "0", ",", "3", ")", "\n", "\n", "scores", "=", "preds", "[", "\"score\"", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "ys", "=", "input", "[", "\"y\"", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "w", "=", "input", "[", "\"w\"", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "for", "idx", ",", "(", "w0", ",", "score", ",", "yy", ")", "in", "enumerate", "(", "zip", "(", "w", ",", "scores", ",", "ys", ")", ")", ":", "\n", "            ", "D", "=", "256", "\n", "x", "=", "-", "w0", "[", "0", "]", "/", "w0", "[", "2", "]", "*", "2.18701", "*", "D", "/", "2", "+", "D", "/", "2", "\n", "y", "=", "w0", "[", "1", "]", "/", "w0", "[", "2", "]", "*", "2.18701", "*", "D", "/", "2", "+", "D", "/", "2", "\n", "plt", ".", "imshow", "(", "image", ")", "\n", "plt", ".", "scatter", "(", "x", ",", "y", ",", "color", "=", "\"r\"", ")", "\n", "for", "xy", "in", "np", ".", "linspace", "(", "0", ",", "D", ",", "10", ")", ":", "\n", "                ", "plt", ".", "plot", "(", "\n", "[", "x", ",", "xy", ",", "x", ",", "xy", ",", "x", ",", "0", ",", "x", ",", "D", "-", "1", "]", ",", "\n", "[", "y", ",", "0", ",", "y", ",", "D", "-", "1", ",", "y", ",", "xy", ",", "y", ",", "xy", "]", ",", "\n", "color", "=", "\"r\"", ",", "\n", ")", "\n", "", "plt", ".", "text", "(", "\n", "100", ",", "\n", "100", ",", "\n", "\" \"", ".", "join", "(", "map", "(", "\"{:.3f}\"", ".", "format", ",", "score", ")", ")", "\n", "+", "\"\\n\"", "\n", "+", "\" \"", ".", "join", "(", "map", "(", "\"{:.3f}\"", ".", "format", ",", "yy", ")", ")", ",", "\n", "bbox", "=", "dict", "(", "facecolor", "=", "\"green\"", ")", ",", "\n", "fontsize", "=", "12", ",", "\n", ")", "\n", "plt", ".", "xlim", "(", "0", ",", "D", ")", "\n", "plt", ".", "ylim", "(", "D", ",", "0", ")", "\n", "plt", ".", "savefig", "(", "f\"{prefix}_{idx}_image.jpg\"", ")", ",", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.models.symmetry_net.l1_smooth": [[146, 150], ["torch.abs", "torch.abs", "torch.abs", "torch.where", "torch.where", "torch.where"], "function", ["None"], ["", "", "", "def", "l1_smooth", "(", "input", ",", "target", ",", "beta", "=", "0.04", ")", ":", "\n", "    ", "n", "=", "torch", ".", "abs", "(", "input", "-", "target", ")", "\n", "cond", "=", "n", "<", "beta", "\n", "return", "torch", ".", "where", "(", "cond", ",", "0.5", "*", "n", "**", "2", "/", "beta", ",", "n", "-", "0.5", "*", "beta", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.models.utils.ReLUDropout.forward": [[7, 10], ["utils.relu_dropout"], "methods", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.models.utils.relu_dropout"], ["import", "matplotlib", ".", "pyplot", "as", "plt", "\n", "import", "numpy", "as", "np", "\n", "import", "numpy", ".", "linalg", "as", "LA", "\n", "import", "torch", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.models.utils.BasicBlock.__init__": [[29, 40], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Identity", "torch.Identity", "torch.Identity", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.models.utils.ConvTrBnReLU3D.__init__"], ["", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "enable", ":", "\n", "            ", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "self", ".", "start", "=", "timer", "(", ")", "\n", "", "return", "self", "\n", "\n", "", "def", "__exit__", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "if", "self", ".", "enable", ":", "\n", "            ", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "t", "=", "timer", "(", ")", "-", "self", ".", "start", "\n", "print", "(", "(", "\"%s : \"", "+", "self", ".", "fmt", "+", "\" seconds\"", ")", "%", "(", "self", ".", "msg", ",", "t", ")", ")", "\n", "self", ".", "time", "=", "t", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.models.utils.BasicBlock.forward": [[41, 48], ["torch.relu", "torch.relu", "torch.relu", "utils.BasicBlock.resample", "utils.BasicBlock.conv1", "utils.BasicBlock.conv2", "utils.BasicBlock.bn1", "torch.relu", "torch.relu", "torch.relu", "utils.BasicBlock.bn2"], "methods", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.models.utils.resample"], ["\n", "\n", "", "", "", "def", "np_eigen_scale_invariant", "(", "depth_gt", ",", "depth_pd", ",", "mask", ")", ":", "\n", "    ", "d", "=", "np", ".", "log", "(", "depth_gt", "[", "mask", "]", ")", "-", "np", ".", "log", "(", "depth_pd", "[", "mask", "]", ")", "\n", "return", "np", ".", "average", "(", "d", "**", "2", ")", "-", "np", ".", "average", "(", "d", ")", "**", "2", "\n", "\n", "", "def", "np_kitti_error", "(", "depth_gt", ",", "depth_pd", ",", "mask", ")", ":", "\n", "    ", "depth_gt", "=", "depth_gt", "[", "mask", "]", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.models.utils.ConvBnReLU.__init__": [[51, 62], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.models.utils.ConvTrBnReLU3D.__init__"], ["thresh", "=", "np", ".", "maximum", "(", "(", "depth_gt", "/", "depth_pd", ")", ",", "(", "depth_pd", "/", "depth_gt", ")", ")", "\n", "a1", "=", "(", "thresh", "<", "1.25", ")", ".", "mean", "(", ")", "\n", "a2", "=", "(", "thresh", "<", "1.25", "**", "2", ")", ".", "mean", "(", ")", "\n", "a3", "=", "(", "thresh", "<", "1.25", "**", "3", ")", ".", "mean", "(", ")", "\n", "\n", "rmse", "=", "(", "depth_gt", "-", "depth_pd", ")", "**", "2", "\n", "rmse", "=", "np", ".", "sqrt", "(", "rmse", ".", "mean", "(", ")", ")", "\n", "\n", "rmse_log", "=", "(", "np", ".", "log", "(", "depth_gt", ")", "-", "np", ".", "log", "(", "depth_pd", ")", ")", "**", "2", "\n", "rmse_log", "=", "np", ".", "sqrt", "(", "rmse_log", ".", "mean", "(", ")", ")", "\n", "\n", "abs_rel", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "depth_gt", "-", "depth_pd", ")", "/", "depth_gt", ")", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.models.utils.ConvBnReLU.forward": [[63, 65], ["torch.relu", "torch.relu", "torch.relu", "utils.ConvBnReLU.bn", "utils.ConvBnReLU.conv"], "methods", ["None"], ["\n", "sq_rel", "=", "np", ".", "mean", "(", "(", "(", "depth_gt", "-", "depth_pd", ")", "**", "2", ")", "/", "depth_gt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.models.utils.ConvBnReLU3D.__init__": [[68, 79], ["torch.Module.__init__", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d"], "methods", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.models.utils.ConvTrBnReLU3D.__init__"], ["\n", "return", "abs_rel", ",", "sq_rel", ",", "rmse", ",", "rmse_log", ",", "sil", ",", "a1", ",", "a2", ",", "a3", "\n", "\n", "\n", "", "def", "plot_image_grid", "(", "im", ",", "x", "=", "4", ",", "y", "=", "4", ",", "title", "=", "\"\"", ")", ":", "\n", "    ", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "title", "(", "title", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "im", ")", ")", ":", "\n", "        ", "plt", ".", "subplot", "(", "x", ",", "y", ",", "i", "+", "1", ")", "\n", "plt", ".", "imshow", "(", "im", "[", "i", "]", ")", "\n", "plt", ".", "colorbar", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.models.utils.ConvBnReLU3D.forward": [[80, 82], ["torch.relu", "torch.relu", "torch.relu", "utils.ConvBnReLU3D.bn", "utils.ConvBnReLU3D.conv"], "methods", ["None"], ["\n", "", "", "def", "__parallel_handle", "(", "f", ",", "q_in", ",", "q_out", ")", ":", "\n", "    ", "while", "True", ":", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.models.utils.ConvTrBnReLU3D.__init__": [[85, 97], ["torch.Module.__init__", "torch.ConvTranspose3d", "torch.ConvTranspose3d", "torch.ConvTranspose3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d"], "methods", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.models.utils.ConvTrBnReLU3D.__init__"], ["            ", "break", "\n", "", "q_out", ".", "put", "(", "(", "i", ",", "f", "(", "x", ")", ")", ")", "\n", "\n", "\n", "", "", "def", "parmap", "(", "f", ",", "X", ",", "nprocs", "=", "multiprocessing", ".", "cpu_count", "(", ")", ",", "progress_bar", "=", "lambda", "x", ":", "x", ")", ":", "\n", "    ", "if", "nprocs", "==", "0", ":", "\n", "        ", "nprocs", "=", "multiprocessing", ".", "cpu_count", "(", ")", "\n", "", "q_in", "=", "multiprocessing", ".", "Queue", "(", "1", ")", "\n", "q_out", "=", "multiprocessing", ".", "Queue", "(", ")", "\n", "\n", "proc", "=", "[", "\n", "multiprocessing", ".", "Process", "(", "target", "=", "__parallel_handle", ",", "args", "=", "(", "f", ",", "q_in", ",", "q_out", ")", ")", "\n", "for", "_", "in", "range", "(", "nprocs", ")", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.models.utils.ConvTrBnReLU3D.forward": [[98, 100], ["torch.relu", "torch.relu", "torch.relu", "utils.ConvTrBnReLU3D.bn", "utils.ConvTrBnReLU3D.conv"], "methods", ["None"], ["]", "\n", "for", "p", "in", "proc", ":", "\n", "        ", "p", ".", "daemon", "=", "True", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.models.utils.relu_dropout": [[13, 25], ["mask.logical_not_", "torch.rand_like", "torch.rand_like", "torch.rand_like", "x.masked_fill_().div_", "x.masked_fill().div", "x.clamp_", "x.clamp", "x.masked_fill_", "x.masked_fill"], "function", ["None"], ["\n", "\n", "class", "MyDataParallel", "(", "nn", ".", "DataParallel", ")", ":", "\n", "    ", "def", "__getattr__", "(", "self", ",", "name", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "return", "super", "(", ")", ".", "__getattr__", "(", "name", ")", "\n", "", "except", "AttributeError", ":", "\n", "            ", "return", "getattr", "(", "self", ".", "module", ",", "name", ")", "\n", "\n", "\n", "", "", "", "class", "benchmark", "(", "object", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "msg", ",", "enable", "=", "True", ",", "fmt", "=", "\"%0.3g\"", ")", ":", "\n", "        ", "self", ".", "msg", "=", "msg", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.models.utils.resample": [[102, 105], ["torch.interpolate"], "function", ["None"], ["\n", "", "try", ":", "\n", "        ", "sent", "=", "[", "q_in", ".", "put", "(", "(", "i", ",", "x", ")", ")", "for", "i", ",", "x", "in", "enumerate", "(", "X", ")", "]", "\n", "[", "q_in", ".", "put", "(", "(", "None", ",", "None", ")", ")", "for", "_", "in", "range", "(", "nprocs", ")", "]", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.models.utils.warp": [[108, 138], ["len", "torch.grid_sample().view", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "gamma.repeat_interleave", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.stack().view", "torch.stack().view", "torch.stack().view", "torch.stack", "torch.stack", "torch.stack", "torch.grid_sample", "torch.matmul", "torch.matmul", "torch.matmul", "torch.stack", "torch.stack", "torch.stack", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.ones_like", "torch.ones_like", "torch.ones_like", "x.flatten", "y.flatten"], "function", ["None"], ["", "except", "KeyboardInterrupt", ":", "\n", "        ", "q_in", ".", "close", "(", ")", "\n", "q_out", ".", "close", "(", ")", "\n", "raise", "\n", "", "return", "[", "x", "for", "i", ",", "x", "in", "sorted", "(", "res", ")", "]", "\n", "\n", "\n", "", "turbo_cmap", "=", "ListedColormap", "(", "\n", "[", "\n", "[", "0.18995", ",", "0.07176", ",", "0.23217", "]", ",", "\n", "[", "0.19483", ",", "0.08339", ",", "0.26149", "]", ",", "\n", "[", "0.19956", ",", "0.09498", ",", "0.29024", "]", ",", "\n", "[", "0.20415", ",", "0.10652", ",", "0.31844", "]", ",", "\n", "[", "0.20860", ",", "0.11802", ",", "0.34607", "]", ",", "\n", "[", "0.21291", ",", "0.12947", ",", "0.37314", "]", ",", "\n", "[", "0.21708", ",", "0.14087", ",", "0.39964", "]", ",", "\n", "[", "0.22111", ",", "0.15223", ",", "0.42558", "]", ",", "\n", "[", "0.22500", ",", "0.16354", ",", "0.45096", "]", ",", "\n", "[", "0.22875", ",", "0.17481", ",", "0.47578", "]", ",", "\n", "[", "0.23236", ",", "0.18603", ",", "0.50004", "]", ",", "\n", "[", "0.23582", ",", "0.19720", ",", "0.52373", "]", ",", "\n", "[", "0.23915", ",", "0.20833", ",", "0.54686", "]", ",", "\n", "[", "0.24234", ",", "0.21941", ",", "0.56942", "]", ",", "\n", "[", "0.24539", ",", "0.23044", ",", "0.59142", "]", ",", "\n", "[", "0.24830", ",", "0.24143", ",", "0.61286", "]", ",", "\n", "[", "0.25107", ",", "0.25237", ",", "0.63374", "]", ",", "\n", "[", "0.25369", ",", "0.26327", ",", "0.65406", "]", ",", "\n", "[", "0.25618", ",", "0.27412", ",", "0.67381", "]", ",", "\n", "[", "0.25853", ",", "0.28492", ",", "0.69300", "]", ",", "\n", "[", "0.26074", ",", "0.29568", ",", "0.71162", "]", ",", "\n", "[", "0.26280", ",", "0.30639", ",", "0.72968", "]", ",", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.models.utils.depth_softargmin": [[140, 151], ["torch.sum", "torch.sum", "torch.sum"], "function", ["None"], ["[", "0.26652", ",", "0.32768", ",", "0.76412", "]", ",", "\n", "[", "0.26816", ",", "0.33825", ",", "0.78050", "]", ",", "\n", "[", "0.26967", ",", "0.34878", ",", "0.79631", "]", ",", "\n", "[", "0.27103", ",", "0.35926", ",", "0.81156", "]", ",", "\n", "[", "0.27226", ",", "0.36970", ",", "0.82624", "]", ",", "\n", "[", "0.27334", ",", "0.38008", ",", "0.84037", "]", ",", "\n", "[", "0.27429", ",", "0.39043", ",", "0.85393", "]", ",", "\n", "[", "0.27509", ",", "0.40072", ",", "0.86692", "]", ",", "\n", "[", "0.27576", ",", "0.41097", ",", "0.87936", "]", ",", "\n", "[", "0.27628", ",", "0.42118", ",", "0.89123", "]", ",", "\n", "[", "0.27667", ",", "0.43134", ",", "0.90254", "]", ",", "\n", "[", "0.27691", ",", "0.44145", ",", "0.91328", "]", ",", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.misc.find-radius.gold_spiral_sampling_patch": [[11, 20], ["find-radius.orth", "numpy.cross", "numpy.arccos", "numpy.sin", "numpy.arange", "numpy.cos", "math.cos", "numpy.cos", "numpy.sin"], "function", ["home.repos.pwc.inspect_result.zhou13_symmetrynet.misc.find-radius.orth"], ["def", "gold_spiral_sampling_patch", "(", "v", ",", "alpha", ",", "num_pts", ")", ":", "\n", "    ", "v1", "=", "orth", "(", "v", ")", "\n", "v2", "=", "np", ".", "cross", "(", "v", ",", "v1", ")", "\n", "v", ",", "v1", ",", "v2", "=", "v", "[", ":", ",", "None", "]", ",", "v1", "[", ":", ",", "None", "]", ",", "v2", "[", ":", ",", "None", "]", "\n", "indices", "=", "np", ".", "arange", "(", "num_pts", ")", "+", "0.66", "\n", "phi", "=", "np", ".", "arccos", "(", "1", "+", "(", "math", ".", "cos", "(", "alpha", ")", "-", "1", ")", "*", "indices", "/", "num_pts", ")", "\n", "theta", "=", "np", ".", "pi", "*", "(", "1", "+", "5", "**", "0.5", ")", "*", "indices", "\n", "r", "=", "np", ".", "sin", "(", "phi", ")", "\n", "return", "(", "v", "*", "np", ".", "cos", "(", "phi", ")", "+", "r", "*", "(", "v1", "*", "np", ".", "cos", "(", "theta", ")", "+", "v2", "*", "np", ".", "sin", "(", "theta", ")", ")", ")", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.zhou13_symmetrynet.misc.find-radius.orth": [[22, 27], ["numpy.array", "numpy.norm", "abs", "abs"], "function", ["None"], ["", "def", "orth", "(", "v", ")", ":", "\n", "    ", "x", ",", "y", ",", "z", "=", "v", "\n", "o", "=", "np", ".", "array", "(", "[", "0.0", ",", "-", "z", ",", "y", "]", "if", "abs", "(", "x", ")", "<", "abs", "(", "y", ")", "else", "[", "-", "z", ",", "0.0", ",", "x", "]", ")", "\n", "o", "/=", "LA", ".", "norm", "(", "o", ")", "\n", "return", "o", "\n", "\n"]]}