{"home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.colormap.colormap": [[26, 114], ["numpy.array().astype", "np.array().astype.reshape", "numpy.array"], "function", ["None"], ["def", "colormap", "(", "rgb", "=", "False", ")", ":", "\n", "    ", "color_list", "=", "np", ".", "array", "(", "\n", "[", "\n", "0.000", ",", "0.447", ",", "0.741", ",", "\n", "0.850", ",", "0.325", ",", "0.098", ",", "\n", "0.929", ",", "0.694", ",", "0.125", ",", "\n", "0.494", ",", "0.184", ",", "0.556", ",", "\n", "0.466", ",", "0.674", ",", "0.188", ",", "\n", "0.301", ",", "0.745", ",", "0.933", ",", "\n", "0.635", ",", "0.078", ",", "0.184", ",", "\n", "0.300", ",", "0.300", ",", "0.300", ",", "\n", "0.600", ",", "0.600", ",", "0.600", ",", "\n", "1.000", ",", "0.000", ",", "0.000", ",", "\n", "1.000", ",", "0.500", ",", "0.000", ",", "\n", "0.749", ",", "0.749", ",", "0.000", ",", "\n", "0.000", ",", "1.000", ",", "0.000", ",", "\n", "0.000", ",", "0.000", ",", "1.000", ",", "\n", "0.667", ",", "0.000", ",", "1.000", ",", "\n", "0.333", ",", "0.333", ",", "0.000", ",", "\n", "0.333", ",", "0.667", ",", "0.000", ",", "\n", "0.333", ",", "1.000", ",", "0.000", ",", "\n", "0.667", ",", "0.333", ",", "0.000", ",", "\n", "0.667", ",", "0.667", ",", "0.000", ",", "\n", "0.667", ",", "1.000", ",", "0.000", ",", "\n", "1.000", ",", "0.333", ",", "0.000", ",", "\n", "1.000", ",", "0.667", ",", "0.000", ",", "\n", "1.000", ",", "1.000", ",", "0.000", ",", "\n", "0.000", ",", "0.333", ",", "0.500", ",", "\n", "0.000", ",", "0.667", ",", "0.500", ",", "\n", "0.000", ",", "1.000", ",", "0.500", ",", "\n", "0.333", ",", "0.000", ",", "0.500", ",", "\n", "0.333", ",", "0.333", ",", "0.500", ",", "\n", "0.333", ",", "0.667", ",", "0.500", ",", "\n", "0.333", ",", "1.000", ",", "0.500", ",", "\n", "0.667", ",", "0.000", ",", "0.500", ",", "\n", "0.667", ",", "0.333", ",", "0.500", ",", "\n", "0.667", ",", "0.667", ",", "0.500", ",", "\n", "0.667", ",", "1.000", ",", "0.500", ",", "\n", "1.000", ",", "0.000", ",", "0.500", ",", "\n", "1.000", ",", "0.333", ",", "0.500", ",", "\n", "1.000", ",", "0.667", ",", "0.500", ",", "\n", "1.000", ",", "1.000", ",", "0.500", ",", "\n", "0.000", ",", "0.333", ",", "1.000", ",", "\n", "0.000", ",", "0.667", ",", "1.000", ",", "\n", "0.000", ",", "1.000", ",", "1.000", ",", "\n", "0.333", ",", "0.000", ",", "1.000", ",", "\n", "0.333", ",", "0.333", ",", "1.000", ",", "\n", "0.333", ",", "0.667", ",", "1.000", ",", "\n", "0.333", ",", "1.000", ",", "1.000", ",", "\n", "0.667", ",", "0.000", ",", "1.000", ",", "\n", "0.667", ",", "0.333", ",", "1.000", ",", "\n", "0.667", ",", "0.667", ",", "1.000", ",", "\n", "0.667", ",", "1.000", ",", "1.000", ",", "\n", "1.000", ",", "0.000", ",", "1.000", ",", "\n", "1.000", ",", "0.333", ",", "1.000", ",", "\n", "1.000", ",", "0.667", ",", "1.000", ",", "\n", "0.167", ",", "0.000", ",", "0.000", ",", "\n", "0.333", ",", "0.000", ",", "0.000", ",", "\n", "0.500", ",", "0.000", ",", "0.000", ",", "\n", "0.667", ",", "0.000", ",", "0.000", ",", "\n", "0.833", ",", "0.000", ",", "0.000", ",", "\n", "1.000", ",", "0.000", ",", "0.000", ",", "\n", "0.000", ",", "0.167", ",", "0.000", ",", "\n", "0.000", ",", "0.333", ",", "0.000", ",", "\n", "0.000", ",", "0.500", ",", "0.000", ",", "\n", "0.000", ",", "0.667", ",", "0.000", ",", "\n", "0.000", ",", "0.833", ",", "0.000", ",", "\n", "0.000", ",", "1.000", ",", "0.000", ",", "\n", "0.000", ",", "0.000", ",", "0.167", ",", "\n", "0.000", ",", "0.000", ",", "0.333", ",", "\n", "0.000", ",", "0.000", ",", "0.500", ",", "\n", "0.000", ",", "0.000", ",", "0.667", ",", "\n", "0.000", ",", "0.000", ",", "0.833", ",", "\n", "0.000", ",", "0.000", ",", "1.000", ",", "\n", "0.000", ",", "0.000", ",", "0.000", ",", "\n", "0.143", ",", "0.143", ",", "0.143", ",", "\n", "0.286", ",", "0.286", ",", "0.286", ",", "\n", "0.429", ",", "0.429", ",", "0.429", ",", "\n", "0.571", ",", "0.571", ",", "0.571", ",", "\n", "0.714", ",", "0.714", ",", "0.714", ",", "\n", "0.857", ",", "0.857", ",", "0.857", ",", "\n", "1.000", ",", "1.000", ",", "1.000", "\n", "]", "\n", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "color_list", "=", "color_list", ".", "reshape", "(", "(", "-", "1", ",", "3", ")", ")", "*", "255", "\n", "if", "not", "rgb", ":", "\n", "        ", "color_list", "=", "color_list", "[", ":", ",", ":", ":", "-", "1", "]", "\n", "", "return", "color_list", "\n", "", ""]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.subprocess.process_in_parallel": [[39, 101], ["os.path.join", "os.environ.copy", "numpy.array_split", "os.environ.get", "enumerate", "open", "yaml.dump", "range", "map", "range", "str", "cmd.format.format", "logger.info", "subprocess.Popen", "processes.append", "subprocess.log_subprocess_output", "isinstance", "os.path.join", "cPickle.load", "outputs.append", "os.environ.get.split", "os.path.join", "open", "open.close", "open", "six.moves.shlex_quote", "int", "int", "six.moves.shlex_quote"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.subprocess.log_subprocess_output"], ["def", "process_in_parallel", "(", "tag", ",", "total_range_size", ",", "binary", ",", "output_dir", ")", ":", "\n", "    ", "\"\"\"Run the specified binary cfg.NUM_GPUS times in parallel, each time as a\n    subprocess that uses one GPU. The binary must accept the command line\n    arguments `--range {start} {end}` that specify a data processing range.\n    \"\"\"", "\n", "# Snapshot the current cfg state in order to pass to the inference", "\n", "# subprocesses", "\n", "cfg_file", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'{}_range_config.yaml'", ".", "format", "(", "tag", ")", ")", "\n", "with", "open", "(", "cfg_file", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "yaml", ".", "dump", "(", "cfg", ",", "stream", "=", "f", ")", "\n", "", "subprocess_env", "=", "os", ".", "environ", ".", "copy", "(", ")", "\n", "processes", "=", "[", "]", "\n", "subinds", "=", "np", ".", "array_split", "(", "range", "(", "total_range_size", ")", ",", "cfg", ".", "NUM_GPUS", ")", "\n", "# Determine GPUs to use", "\n", "cuda_visible_devices", "=", "os", ".", "environ", ".", "get", "(", "'CUDA_VISIBLE_DEVICES'", ")", "\n", "if", "cuda_visible_devices", ":", "\n", "        ", "gpu_inds", "=", "map", "(", "int", ",", "cuda_visible_devices", ".", "split", "(", "','", ")", ")", "\n", "assert", "-", "1", "not", "in", "gpu_inds", ",", "'Hiding GPU indices using the \\'-1\\' index is not supported'", "\n", "", "else", ":", "\n", "        ", "gpu_inds", "=", "range", "(", "cfg", ".", "NUM_GPUS", ")", "\n", "# Run the binary in cfg.NUM_GPUS subprocesses", "\n", "", "for", "i", ",", "gpu_ind", "in", "enumerate", "(", "gpu_inds", ")", ":", "\n", "        ", "start", "=", "subinds", "[", "i", "]", "[", "0", "]", "\n", "end", "=", "subinds", "[", "i", "]", "[", "-", "1", "]", "+", "1", "\n", "subprocess_env", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "str", "(", "gpu_ind", ")", "\n", "cmd", "=", "'{binary} --range {start} {end} --cfg {cfg_file} NUM_GPUS 1'", "\n", "cmd", "=", "cmd", ".", "format", "(", "\n", "binary", "=", "shlex_quote", "(", "binary", ")", ",", "\n", "start", "=", "int", "(", "start", ")", ",", "\n", "end", "=", "int", "(", "end", ")", ",", "\n", "cfg_file", "=", "shlex_quote", "(", "cfg_file", ")", "\n", ")", "\n", "logger", ".", "info", "(", "'{} range command {}: {}'", ".", "format", "(", "tag", ",", "i", ",", "cmd", ")", ")", "\n", "if", "i", "==", "0", ":", "\n", "            ", "subprocess_stdout", "=", "subprocess", ".", "PIPE", "\n", "", "else", ":", "\n", "            ", "filename", "=", "os", ".", "path", ".", "join", "(", "\n", "output_dir", ",", "'%s_range_%s_%s.stdout'", "%", "(", "tag", ",", "start", ",", "end", ")", "\n", ")", "\n", "subprocess_stdout", "=", "open", "(", "filename", ",", "'w'", ")", "# NOQA (close below)", "\n", "", "p", "=", "subprocess", ".", "Popen", "(", "\n", "cmd", ",", "\n", "shell", "=", "True", ",", "\n", "env", "=", "subprocess_env", ",", "\n", "stdout", "=", "subprocess_stdout", ",", "\n", "stderr", "=", "subprocess", ".", "STDOUT", ",", "\n", "bufsize", "=", "1", "\n", ")", "\n", "processes", ".", "append", "(", "(", "i", ",", "p", ",", "start", ",", "end", ",", "subprocess_stdout", ")", ")", "\n", "# Log output from inference processes and collate their results", "\n", "", "outputs", "=", "[", "]", "\n", "for", "i", ",", "p", ",", "start", ",", "end", ",", "subprocess_stdout", "in", "processes", ":", "\n", "        ", "log_subprocess_output", "(", "i", ",", "p", ",", "output_dir", ",", "tag", ",", "start", ",", "end", ")", "\n", "if", "isinstance", "(", "subprocess_stdout", ",", "file", ")", ":", "# NOQA (Python 2 for now)", "\n", "            ", "subprocess_stdout", ".", "close", "(", ")", "\n", "", "range_file", "=", "os", ".", "path", ".", "join", "(", "\n", "output_dir", ",", "'%s_range_%s_%s.pkl'", "%", "(", "tag", ",", "start", ",", "end", ")", "\n", ")", "\n", "range_data", "=", "pickle", ".", "load", "(", "open", "(", "range_file", ")", ")", "\n", "outputs", ".", "append", "(", "range_data", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.subprocess.log_subprocess_output": [[103, 131], ["os.path.join", "logger.info", "logger.info", "logger.info", "p.stdout.close", "p.wait", "p.wait", "open", "iter", "open", "print", "print", "f.write", "line.rstrip", "str", "f.readlines"], "function", ["None"], ["", "def", "log_subprocess_output", "(", "i", ",", "p", ",", "output_dir", ",", "tag", ",", "start", ",", "end", ")", ":", "\n", "    ", "\"\"\"Capture the output of each subprocess and log it in the parent process.\n    The first subprocess's output is logged in realtime. The output from the\n    other subprocesses is buffered and then printed all at once (in order) when\n    subprocesses finish.\n    \"\"\"", "\n", "outfile", "=", "os", ".", "path", ".", "join", "(", "\n", "output_dir", ",", "'%s_range_%s_%s.stdout'", "%", "(", "tag", ",", "start", ",", "end", ")", "\n", ")", "\n", "logger", ".", "info", "(", "'# '", "+", "'-'", "*", "76", "+", "' #'", ")", "\n", "logger", ".", "info", "(", "\n", "'stdout of subprocess %s with range [%s, %s]'", "%", "(", "i", ",", "start", "+", "1", ",", "end", ")", "\n", ")", "\n", "logger", ".", "info", "(", "'# '", "+", "'-'", "*", "76", "+", "' #'", ")", "\n", "if", "i", "==", "0", ":", "\n", "# Stream the piped stdout from the first subprocess in realtime", "\n", "        ", "with", "open", "(", "outfile", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "iter", "(", "p", ".", "stdout", ".", "readline", ",", "b''", ")", ":", "\n", "                ", "print", "(", "line", ".", "rstrip", "(", ")", ")", "\n", "f", ".", "write", "(", "str", "(", "line", ")", ")", "\n", "", "", "p", ".", "stdout", ".", "close", "(", ")", "\n", "ret", "=", "p", ".", "wait", "(", ")", "\n", "", "else", ":", "\n", "# For subprocesses >= 1, wait and dump their log file", "\n", "        ", "ret", "=", "p", ".", "wait", "(", ")", "\n", "with", "open", "(", "outfile", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "print", "(", "''", ".", "join", "(", "f", ".", "readlines", "(", ")", ")", ")", "\n", "", "", "assert", "ret", "==", "0", ",", "'Range subprocess failed (exit code: {})'", ".", "format", "(", "ret", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.logging.SmoothedValue.__init__": [[44, 49], ["collections.deque"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "window_size", ")", ":", "\n", "        ", "self", ".", "deque", "=", "deque", "(", "maxlen", "=", "window_size", ")", "\n", "self", ".", "series", "=", "[", "]", "\n", "self", ".", "total", "=", "0.0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.logging.SmoothedValue.AddValue": [[50, 55], ["logging.SmoothedValue.deque.append", "logging.SmoothedValue.series.append"], "methods", ["None"], ["", "def", "AddValue", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "deque", ".", "append", "(", "value", ")", "\n", "self", ".", "series", ".", "append", "(", "value", ")", "\n", "self", ".", "count", "+=", "1", "\n", "self", ".", "total", "+=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.logging.SmoothedValue.GetMedianValue": [[56, 58], ["numpy.median"], "methods", ["None"], ["", "def", "GetMedianValue", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "median", "(", "self", ".", "deque", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.logging.SmoothedValue.GetAverageValue": [[59, 61], ["numpy.mean"], "methods", ["None"], ["", "def", "GetAverageValue", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "mean", "(", "self", ".", "deque", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.logging.SmoothedValue.GetGlobalAverageValue": [[62, 64], ["None"], "methods", ["None"], ["", "def", "GetGlobalAverageValue", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "total", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.logging.log_json_stats": [[35, 37], ["print", "json.dumps"], "function", ["None"], ["def", "log_json_stats", "(", "stats", ",", "sort_keys", "=", "True", ")", ":", "\n", "    ", "print", "(", "'json_stats: {:s}'", ".", "format", "(", "json", ".", "dumps", "(", "stats", ",", "sort_keys", "=", "sort_keys", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.logging.send_email": [[66, 72], ["smtplib.SMTP", "email.mime.text.MIMEText", "smtplib.SMTP.sendmail", "email.mime.text.MIMEText.as_string"], "function", ["None"], ["", "", "def", "send_email", "(", "subject", ",", "body", ",", "to", ")", ":", "\n", "    ", "s", "=", "smtplib", ".", "SMTP", "(", "'localhost'", ")", "\n", "mime", "=", "MIMEText", "(", "body", ")", "\n", "mime", "[", "'Subject'", "]", "=", "subject", "\n", "mime", "[", "'To'", "]", "=", "to", "\n", "s", ".", "sendmail", "(", "'detectron'", ",", "to", ",", "mime", ".", "as_string", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.logging.setup_logging": [[74, 82], ["logging.basicConfig", "logging.getLogger"], "function", ["None"], ["", "def", "setup_logging", "(", "name", ")", ":", "\n", "    ", "FORMAT", "=", "'%(levelname)s %(filename)s:%(lineno)4d: %(message)s'", "\n", "# Manually clear root loggers to prevent any module that may have called", "\n", "# logging.basicConfig() from blocking our logging setup", "\n", "logging", ".", "root", ".", "handlers", "=", "[", "]", "\n", "logging", ".", "basicConfig", "(", "level", "=", "logging", ".", "INFO", ",", "format", "=", "FORMAT", ",", "stream", "=", "sys", ".", "stdout", ")", "\n", "logger", "=", "logging", ".", "getLogger", "(", "name", ")", "\n", "return", "logger", "\n", "", ""]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.io.save_object": [[37, 42], ["os.path.abspath", "open", "cPickle.dump"], "function", ["None"], ["def", "save_object", "(", "obj", ",", "file_name", ")", ":", "\n", "    ", "\"\"\"Save a Python object by pickling it.\"\"\"", "\n", "file_name", "=", "os", ".", "path", ".", "abspath", "(", "file_name", ")", "\n", "with", "open", "(", "file_name", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "obj", ",", "f", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.io.cache_url": [[44, 72], ["url.startswith", "url.replace", "os.path.exists", "os.path.dirname", "logger.info", "io.download_url", "io.assert_cache_file_is_ok", "re.match", "io.assert_cache_file_is_ok", "os.path.exists", "os.makedirs"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.io.download_url", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.io.assert_cache_file_is_ok", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.io.assert_cache_file_is_ok"], ["", "", "def", "cache_url", "(", "url_or_file", ",", "cache_dir", ")", ":", "\n", "    ", "\"\"\"Download the file specified by the URL to the cache_dir and return the\n    path to the cached file. If the argument is not a URL, simply return it as\n    is.\n    \"\"\"", "\n", "is_url", "=", "re", ".", "match", "(", "r'^(?:http)s?://'", ",", "url_or_file", ",", "re", ".", "IGNORECASE", ")", "is", "not", "None", "\n", "\n", "if", "not", "is_url", ":", "\n", "        ", "return", "url_or_file", "\n", "\n", "", "url", "=", "url_or_file", "\n", "assert", "url", ".", "startswith", "(", "_DETECTRON_S3_BASE_URL", ")", ",", "(", "'Detectron only automatically caches URLs in the Detectron S3 '", "\n", "'bucket: {}'", ")", ".", "format", "(", "_DETECTRON_S3_BASE_URL", ")", "\n", "\n", "cache_file_path", "=", "url", ".", "replace", "(", "_DETECTRON_S3_BASE_URL", ",", "cache_dir", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "cache_file_path", ")", ":", "\n", "        ", "assert_cache_file_is_ok", "(", "url", ",", "cache_file_path", ")", "\n", "return", "cache_file_path", "\n", "\n", "", "cache_file_dir", "=", "os", ".", "path", ".", "dirname", "(", "cache_file_path", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "cache_file_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "cache_file_dir", ")", "\n", "\n", "", "logger", ".", "info", "(", "'Downloading remote file {} to {}'", ".", "format", "(", "url", ",", "cache_file_path", ")", ")", "\n", "download_url", "(", "url", ",", "cache_file_path", ")", "\n", "assert_cache_file_is_ok", "(", "url", ",", "cache_file_path", ")", "\n", "return", "cache_file_path", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.io.assert_cache_file_is_ok": [[74, 86], ["io._get_file_md5sum", "io._get_reference_md5sum"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.io._get_file_md5sum", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.io._get_reference_md5sum"], ["", "def", "assert_cache_file_is_ok", "(", "url", ",", "file_path", ")", ":", "\n", "    ", "\"\"\"Check that cache file has the correct hash.\"\"\"", "\n", "# File is already in the cache, verify that the md5sum matches and", "\n", "# return local path", "\n", "cache_file_md5sum", "=", "_get_file_md5sum", "(", "file_path", ")", "\n", "ref_md5sum", "=", "_get_reference_md5sum", "(", "url", ")", "\n", "assert", "cache_file_md5sum", "==", "ref_md5sum", ",", "(", "'Target URL {} appears to be downloaded to the local cache file '", "\n", "'{}, but the md5 hash of the local file does not match the '", "\n", "'reference (actual: {} vs. expected: {}). You may wish to delete '", "\n", "'the cached file and try again to trigger automatic '", "\n", "'download.'", ")", ".", "format", "(", "url", ",", "file_path", ",", "cache_file_md5sum", ",", "ref_md5sum", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.io._progress_bar": [[88, 106], ["int", "round", "sys.stdout.write", "sys.stdout.flush", "round", "sys.stdout.write", "float", "float"], "function", ["None"], ["", "def", "_progress_bar", "(", "count", ",", "total", ")", ":", "\n", "    ", "\"\"\"Report download progress.\n    Credit:\n    https://stackoverflow.com/questions/3173320/text-progress-bar-in-the-console/27871113\n    \"\"\"", "\n", "bar_len", "=", "60", "\n", "filled_len", "=", "int", "(", "round", "(", "bar_len", "*", "count", "/", "float", "(", "total", ")", ")", ")", "\n", "\n", "percents", "=", "round", "(", "100.0", "*", "count", "/", "float", "(", "total", ")", ",", "1", ")", "\n", "bar", "=", "'='", "*", "filled_len", "+", "'-'", "*", "(", "bar_len", "-", "filled_len", ")", "\n", "\n", "sys", ".", "stdout", ".", "write", "(", "\n", "'  [{}] {}% of {:.1f}MB file  \\r'", ".", "\n", "format", "(", "bar", ",", "percents", ",", "total", "/", "1024", "/", "1024", ")", "\n", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "if", "count", ">=", "total", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.io.download_url": [[108, 131], ["urllib2.urlopen", "urllib2.urlopen.info().getheader().strip", "int", "open", "urllib2.urlopen.info().getheader", "urllib2.urlopen.read", "len", "f.write", "progress_hook", "urllib2.urlopen.info"], "function", ["None"], ["", "", "def", "download_url", "(", "\n", "url", ",", "dst_file_path", ",", "chunk_size", "=", "8192", ",", "progress_hook", "=", "_progress_bar", "\n", ")", ":", "\n", "    ", "\"\"\"Download url and write it to dst_file_path.\n    Credit:\n    https://stackoverflow.com/questions/2028517/python-urllib2-progress-hook\n    \"\"\"", "\n", "response", "=", "urllib2", ".", "urlopen", "(", "url", ")", "\n", "total_size", "=", "response", ".", "info", "(", ")", ".", "getheader", "(", "'Content-Length'", ")", ".", "strip", "(", ")", "\n", "total_size", "=", "int", "(", "total_size", ")", "\n", "bytes_so_far", "=", "0", "\n", "\n", "with", "open", "(", "dst_file_path", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "while", "1", ":", "\n", "            ", "chunk", "=", "response", ".", "read", "(", "chunk_size", ")", "\n", "bytes_so_far", "+=", "len", "(", "chunk", ")", "\n", "if", "not", "chunk", ":", "\n", "                ", "break", "\n", "", "if", "progress_hook", ":", "\n", "                ", "progress_hook", "(", "bytes_so_far", ",", "total_size", ")", "\n", "", "f", ".", "write", "(", "chunk", ")", "\n", "\n", "", "", "return", "bytes_so_far", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.io._get_file_md5sum": [[133, 139], ["hashlib.md5", "hashlib.md5.hexdigest", "open", "hashlib.md5.update", "f.read"], "function", ["None"], ["", "def", "_get_file_md5sum", "(", "file_name", ")", ":", "\n", "    ", "\"\"\"Compute the md5 hash of a file.\"\"\"", "\n", "hash_obj", "=", "hashlib", ".", "md5", "(", ")", "\n", "with", "open", "(", "file_name", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "hash_obj", ".", "update", "(", "f", ".", "read", "(", ")", ")", "\n", "", "return", "hash_obj", ".", "hexdigest", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.io._get_reference_md5sum": [[141, 146], ["urllib2.urlopen().read().strip", "urllib2.urlopen().read", "urllib2.urlopen"], "function", ["None"], ["", "def", "_get_reference_md5sum", "(", "url", ")", ":", "\n", "    ", "\"\"\"By convention the md5 hash for url is stored in url + '.md5sum'.\"\"\"", "\n", "url_md5sum", "=", "url", "+", "'.md5sum'", "\n", "md5sum", "=", "urllib2", ".", "urlopen", "(", "url_md5sum", ")", ".", "read", "(", ")", ".", "strip", "(", ")", "\n", "return", "md5sum", "\n", "", ""]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.timer.Timer.__init__": [[37, 39], ["timer.Timer.reset"], "methods", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.timer.Timer.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.timer.Timer.tic": [[40, 44], ["time.time"], "methods", ["None"], ["", "def", "tic", "(", "self", ")", ":", "\n", "# using time.time instead of time.clock because time time.clock", "\n", "# does not normalize for multithreading", "\n", "        ", "self", ".", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.timer.Timer.toc": [[45, 54], ["time.time"], "methods", ["None"], ["", "def", "toc", "(", "self", ",", "average", "=", "True", ")", ":", "\n", "        ", "self", ".", "diff", "=", "time", ".", "time", "(", ")", "-", "self", ".", "start_time", "\n", "self", ".", "total_time", "+=", "self", ".", "diff", "\n", "self", ".", "calls", "+=", "1", "\n", "self", ".", "average_time", "=", "self", ".", "total_time", "/", "self", ".", "calls", "\n", "if", "average", ":", "\n", "            ", "return", "self", ".", "average_time", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "diff", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.timer.Timer.reset": [[55, 61], ["None"], "methods", ["None"], ["", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "total_time", "=", "0.", "\n", "self", ".", "calls", "=", "0", "\n", "self", ".", "start_time", "=", "0.", "\n", "self", ".", "diff", "=", "0.", "\n", "self", ".", "average_time", "=", "0.", "\n", "", "", ""]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.c2.import_contrib_ops": [[34, 37], ["utils.import_nccl_ops"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.env.import_nccl_ops"], ["def", "import_contrib_ops", "(", ")", ":", "\n", "    ", "\"\"\"Import contrib ops needed by Detectron.\"\"\"", "\n", "envu", ".", "import_nccl_ops", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.c2.import_detectron_ops": [[39, 43], ["utils.get_detectron_ops_lib", "caffe2.python.dyndep.InitOpsLibrary"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.env.get_detectron_ops_lib"], ["", "def", "import_detectron_ops", "(", ")", ":", "\n", "    ", "\"\"\"Import Detectron ops.\"\"\"", "\n", "detectron_ops_lib", "=", "envu", ".", "get_detectron_ops_lib", "(", ")", "\n", "dyndep", ".", "InitOpsLibrary", "(", "detectron_ops_lib", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.c2.import_custom_ops": [[45, 49], ["utils.get_custom_ops_lib", "caffe2.python.dyndep.InitOpsLibrary"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.env.get_custom_ops_lib"], ["", "def", "import_custom_ops", "(", ")", ":", "\n", "    ", "\"\"\"Import custom ops.\"\"\"", "\n", "custom_ops_lib", "=", "envu", ".", "get_custom_ops_lib", "(", ")", "\n", "dyndep", ".", "InitOpsLibrary", "(", "custom_ops_lib", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.c2.SuffixNet": [[51, 78], ["c2.BlobReferenceList", "net.Clone", "net.Clone.Proto().op.extend", "net.Clone.Proto().external_input.extend", "net.Clone.Proto().external_output.extend", "net.BlobIsDefined", "str", "net.Clone.Proto", "net.Clone.Proto", "net.Clone.Proto", "net.Clone.GetBlobRef", "net.Clone.Proto", "net.Proto", "net.Clone.Proto", "net.Clone.BlobIsDefined", "net.Clone.Proto", "net.Clone.Proto"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.c2.BlobReferenceList"], ["", "def", "SuffixNet", "(", "name", ",", "net", ",", "prefix_len", ",", "outputs", ")", ":", "\n", "    ", "\"\"\"Returns a new Net from the given Net (`net`) that includes only the ops\n    after removing the first `prefix_len` number of ops. The new Net is thus a\n    suffix of `net`. Blobs listed in `outputs` are registered as external output\n    blobs.\n    \"\"\"", "\n", "outputs", "=", "BlobReferenceList", "(", "outputs", ")", "\n", "for", "output", "in", "outputs", ":", "\n", "        ", "assert", "net", ".", "BlobIsDefined", "(", "output", ")", "\n", "", "new_net", "=", "net", ".", "Clone", "(", "name", ")", "\n", "\n", "del", "new_net", ".", "Proto", "(", ")", ".", "op", "[", ":", "]", "\n", "del", "new_net", ".", "Proto", "(", ")", ".", "external_input", "[", ":", "]", "\n", "del", "new_net", ".", "Proto", "(", ")", ".", "external_output", "[", ":", "]", "\n", "\n", "# Add suffix ops", "\n", "new_net", ".", "Proto", "(", ")", ".", "op", ".", "extend", "(", "net", ".", "Proto", "(", ")", ".", "op", "[", "prefix_len", ":", "]", ")", "\n", "# Add external input blobs", "\n", "# Treat any undefined blobs as external inputs", "\n", "input_names", "=", "[", "\n", "i", "for", "op", "in", "new_net", ".", "Proto", "(", ")", ".", "op", "for", "i", "in", "op", ".", "input", "\n", "if", "not", "new_net", ".", "BlobIsDefined", "(", "i", ")", "]", "\n", "new_net", ".", "Proto", "(", ")", ".", "external_input", ".", "extend", "(", "input_names", ")", "\n", "# Add external output blobs", "\n", "output_names", "=", "[", "str", "(", "o", ")", "for", "o", "in", "outputs", "]", "\n", "new_net", ".", "Proto", "(", ")", ".", "external_output", ".", "extend", "(", "output_names", ")", "\n", "return", "new_net", ",", "[", "new_net", ".", "GetBlobRef", "(", "o", ")", "for", "o", "in", "output_names", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.c2.BlobReferenceList": [[80, 91], ["isinstance", "type", "TypeError", "isinstance"], "function", ["None"], ["", "def", "BlobReferenceList", "(", "blob_ref_or_list", ")", ":", "\n", "    ", "\"\"\"Ensure that the argument is returned as a list of BlobReferences.\"\"\"", "\n", "if", "isinstance", "(", "blob_ref_or_list", ",", "core", ".", "BlobReference", ")", ":", "\n", "        ", "return", "[", "blob_ref_or_list", "]", "\n", "", "elif", "type", "(", "blob_ref_or_list", ")", "in", "(", "list", ",", "tuple", ")", ":", "\n", "        ", "for", "b", "in", "blob_ref_or_list", ":", "\n", "            ", "assert", "isinstance", "(", "b", ",", "core", ".", "BlobReference", ")", "\n", "", "return", "blob_ref_or_list", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "\n", "'blob_ref_or_list must be a BlobReference or a list/tuple of '", "\n", "'BlobReferences'", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.c2.UnscopeName": [[95, 101], ["isinstance", "possibly_scoped_name.rfind"], "function", ["None"], ["", "", "def", "UnscopeName", "(", "possibly_scoped_name", ")", ":", "\n", "    ", "\"\"\"Remove any name scoping from a (possibly) scoped name. For example,\n    convert the name 'gpu_0/foo' to 'foo'.\"\"\"", "\n", "assert", "isinstance", "(", "possibly_scoped_name", ",", "string_types", ")", "\n", "return", "possibly_scoped_name", "[", "\n", "possibly_scoped_name", ".", "rfind", "(", "scope", ".", "_NAMESCOPE_SEPARATOR", ")", "+", "1", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.c2.NamedCudaScope": [[103, 110], ["c2.GpuNameScope", "c2.CudaScope"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.c2.GpuNameScope", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.c2.CudaScope"], ["", "@", "contextlib", ".", "contextmanager", "\n", "def", "NamedCudaScope", "(", "gpu_id", ")", ":", "\n", "    ", "\"\"\"Creates a GPU name scope and CUDA device scope. This function is provided\n    to reduce `with ...` nesting levels.\"\"\"", "\n", "with", "GpuNameScope", "(", "gpu_id", ")", ":", "\n", "        ", "with", "CudaScope", "(", "gpu_id", ")", ":", "\n", "            ", "yield", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.c2.GpuNameScope": [[112, 117], ["caffe2.python.core.NameScope"], "function", ["None"], ["", "", "", "@", "contextlib", ".", "contextmanager", "\n", "def", "GpuNameScope", "(", "gpu_id", ")", ":", "\n", "    ", "\"\"\"Create a name scope for GPU device `gpu_id`.\"\"\"", "\n", "with", "core", ".", "NameScope", "(", "'gpu_{:d}'", ".", "format", "(", "gpu_id", ")", ")", ":", "\n", "        ", "yield", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.c2.CudaScope": [[119, 125], ["c2.CudaDevice", "caffe2.python.core.DeviceScope"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.c2.CudaDevice"], ["", "", "@", "contextlib", ".", "contextmanager", "\n", "def", "CudaScope", "(", "gpu_id", ")", ":", "\n", "    ", "\"\"\"Create a CUDA device scope for GPU device `gpu_id`.\"\"\"", "\n", "gpu_dev", "=", "CudaDevice", "(", "gpu_id", ")", "\n", "with", "core", ".", "DeviceScope", "(", "gpu_dev", ")", ":", "\n", "        ", "yield", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.c2.CpuScope": [[127, 133], ["caffe2.python.core.DeviceOption", "caffe2.python.core.DeviceScope"], "function", ["None"], ["", "", "@", "contextlib", ".", "contextmanager", "\n", "def", "CpuScope", "(", ")", ":", "\n", "    ", "\"\"\"Create a CPU device scope.\"\"\"", "\n", "cpu_dev", "=", "core", ".", "DeviceOption", "(", "caffe2_pb2", ".", "CPU", ")", "\n", "with", "core", ".", "DeviceScope", "(", "cpu_dev", ")", ":", "\n", "        ", "yield", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.c2.CudaDevice": [[135, 138], ["caffe2.python.core.DeviceOption"], "function", ["None"], ["", "", "def", "CudaDevice", "(", "gpu_id", ")", ":", "\n", "    ", "\"\"\"Create a Cuda device.\"\"\"", "\n", "return", "core", ".", "DeviceOption", "(", "caffe2_pb2", ".", "CUDA", ",", "gpu_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.c2.gauss_fill": [[140, 143], ["None"], "function", ["None"], ["", "def", "gauss_fill", "(", "std", ")", ":", "\n", "    ", "\"\"\"Gaussian fill helper to reduce verbosity.\"\"\"", "\n", "return", "(", "'GaussianFill'", ",", "{", "'std'", ":", "std", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.c2.const_fill": [[145, 148], ["None"], "function", ["None"], ["", "def", "const_fill", "(", "value", ")", ":", "\n", "    ", "\"\"\"Constant fill helper to reduce verbosity.\"\"\"", "\n", "return", "(", "'ConstantFill'", ",", "{", "'value'", ":", "value", "}", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.net.initialize_from_weights_file": [[40, 48], ["net.initialize_gpu_0_from_weights_file", "net.broadcast_parameters"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.net.initialize_gpu_0_from_weights_file", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.net.broadcast_parameters"], ["def", "initialize_from_weights_file", "(", "model", ",", "weights_file", ",", "broadcast", "=", "True", ")", ":", "\n", "    ", "\"\"\"Initialize a model from weights stored in a pickled dictionary. If\n    multiple GPUs are used, the loaded weights are synchronized on all GPUs,\n    unless 'broadcast' is False.\n    \"\"\"", "\n", "initialize_gpu_0_from_weights_file", "(", "model", ",", "weights_file", ")", "\n", "if", "broadcast", ":", "\n", "        ", "broadcast_parameters", "(", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.net.initialize_gpu_0_from_weights_file": [[50, 124], ["caffe2.python.workspace.Blobs", "collections.OrderedDict", "pickle.load.keys", "open", "cPickle.load", "yaml.load", "net.configure_bbox_reg_weights", "utils.NamedCudaScope", "collections.OrderedDict.keys", "caffe2.python.core.ScopedName", "caffe2.python.workspace.FeedBlob", "utils.UnscopeName", "logger.info", "caffe2.python.workspace.FetchBlob", "src_blobs[].astype", "caffe2.python.workspace.FeedBlob", "src_name.endswith", "utils.CpuScope", "caffe2.python.workspace.FeedBlob", "str", "unscoped_param_name.find", "src_blobs[].astype", "unscoped_param_name.find"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.net.configure_bbox_reg_weights", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.c2.NamedCudaScope", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.c2.UnscopeName", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.c2.CpuScope"], ["", "", "def", "initialize_gpu_0_from_weights_file", "(", "model", ",", "weights_file", ")", ":", "\n", "    ", "\"\"\"Initialize a network with ops on GPU 0. Note that we always use GPU 0 and\n    rely on proper usage of CUDA_VISIBLE_DEVICES.\n    \"\"\"", "\n", "#logger.info('Loading from: {}'.format(weights_file))", "\n", "ws_blobs", "=", "workspace", ".", "Blobs", "(", ")", "\n", "with", "open", "(", "weights_file", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "src_blobs", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "if", "'cfg'", "in", "src_blobs", ":", "\n", "        ", "saved_cfg", "=", "yaml", ".", "load", "(", "src_blobs", "[", "'cfg'", "]", ")", "\n", "configure_bbox_reg_weights", "(", "model", ",", "saved_cfg", ")", "\n", "", "if", "'blobs'", "in", "src_blobs", ":", "\n", "# Backwards compat--dictionary used to be only blobs, now they are", "\n", "# stored under the 'blobs' key", "\n", "        ", "src_blobs", "=", "src_blobs", "[", "'blobs'", "]", "\n", "# Initialize weights on GPU 0 only", "\n", "", "unscoped_param_names", "=", "OrderedDict", "(", ")", "# Print these out in model order", "\n", "for", "blob", "in", "model", ".", "params", ":", "\n", "        ", "unscoped_param_names", "[", "c2_utils", ".", "UnscopeName", "(", "str", "(", "blob", ")", ")", "]", "=", "True", "\n", "", "with", "c2_utils", ".", "NamedCudaScope", "(", "0", ")", ":", "\n", "        ", "for", "unscoped_param_name", "in", "unscoped_param_names", ".", "keys", "(", ")", ":", "\n", "            ", "if", "(", "unscoped_param_name", ".", "find", "(", "']_'", ")", ">=", "0", "and", "\n", "unscoped_param_name", "not", "in", "src_blobs", ")", ":", "\n", "# Special case for sharing initialization from a pretrained", "\n", "# model:", "\n", "# If a blob named '_[xyz]_foo' is in model.params and not in", "\n", "# the initialization blob dictionary, then load source blob", "\n", "# 'foo' into destination blob '_[xyz]_foo'", "\n", "                ", "src_name", "=", "unscoped_param_name", "[", "\n", "unscoped_param_name", ".", "find", "(", "']_'", ")", "+", "2", ":", "]", "\n", "", "else", ":", "\n", "                ", "src_name", "=", "unscoped_param_name", "\n", "", "if", "src_name", "not", "in", "src_blobs", ":", "\n", "                ", "logger", ".", "info", "(", "'{:s} not found'", ".", "format", "(", "src_name", ")", ")", "\n", "continue", "\n", "", "dst_name", "=", "core", ".", "ScopedName", "(", "unscoped_param_name", ")", "\n", "has_momentum", "=", "src_name", "+", "'_momentum'", "in", "src_blobs", "\n", "has_momentum_str", "=", "' [+ momentum]'", "if", "has_momentum", "else", "''", "\n", "# logger.info('{:s}{:} loaded from weights file into {:s}: {}'.", "\n", "#             format(", "\n", "#                 src_name, has_momentum_str,", "\n", "#                 dst_name, src_blobs[src_name].shape))", "\n", "if", "dst_name", "in", "ws_blobs", ":", "\n", "# If the blob is already in the workspace, make sure that it", "\n", "# matches the shape of the loaded blob", "\n", "                ", "ws_blob", "=", "workspace", ".", "FetchBlob", "(", "dst_name", ")", "\n", "assert", "ws_blob", ".", "shape", "==", "src_blobs", "[", "src_name", "]", ".", "shape", ",", "(", "'Workspace blob {} with shape {} does not match '", "\n", "'weights file shape {}'", ")", ".", "format", "(", "\n", "src_name", ",", "\n", "ws_blob", ".", "shape", ",", "\n", "src_blobs", "[", "src_name", "]", ".", "shape", ")", "\n", "", "workspace", ".", "FeedBlob", "(", "\n", "dst_name", ",", "\n", "src_blobs", "[", "src_name", "]", ".", "astype", "(", "np", ".", "float32", ",", "copy", "=", "False", ")", ")", "\n", "if", "has_momentum", ":", "\n", "                ", "workspace", ".", "FeedBlob", "(", "\n", "dst_name", "+", "'_momentum'", ",", "\n", "src_blobs", "[", "src_name", "+", "'_momentum'", "]", ".", "astype", "(", "\n", "np", ".", "float32", ",", "copy", "=", "False", ")", ")", "\n", "\n", "# We preserve blobs that are in the weights file but not used by the current", "\n", "# model. We load these into CPU memory under the '__preserve__/' namescope.", "\n", "# These blobs will be stored when saving a model to a weights file. This", "\n", "# feature allows for alternating optimization of Faster R-CNN in which blobs", "\n", "# unused by one step can still be preserved forward and used to initialize", "\n", "# another step.", "\n", "", "", "", "for", "src_name", "in", "src_blobs", ".", "keys", "(", ")", ":", "\n", "        ", "if", "(", "src_name", "not", "in", "unscoped_param_names", "and", "\n", "not", "src_name", ".", "endswith", "(", "'_momentum'", ")", "and", "\n", "src_blobs", "[", "src_name", "]", "is", "not", "None", ")", ":", "\n", "            ", "with", "c2_utils", ".", "CpuScope", "(", ")", ":", "\n", "                ", "workspace", ".", "FeedBlob", "(", "\n", "'__preserve__/{:s}'", ".", "format", "(", "src_name", ")", ",", "src_blobs", "[", "src_name", "]", ")", "\n", "#logger.info(", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.net.save_model_to_weights_file": [[128, 162], ["logger.info", "model.TrainableParams", "caffe2.python.workspace.Blobs", "yaml.dump", "utils.io.save_object", "str", "utils.UnscopeName", "utils.UnscopeName", "str.startswith", "dict", "os.path.abspath", "logger.debug", "caffe2.python.workspace.FetchBlob", "str", "logger.debug", "caffe2.python.workspace.FetchBlob", "utils.UnscopeName", "logger.debug", "caffe2.python.workspace.FetchBlob"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.detector.DetectionModelHelper.TrainableParams", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.io.save_object", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.c2.UnscopeName", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.c2.UnscopeName", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.c2.UnscopeName"], ["", "", "", "", "def", "save_model_to_weights_file", "(", "weights_file", ",", "model", ")", ":", "\n", "    ", "\"\"\"Stash model weights in a dictionary and pickle them to a file. We map\n    GPU device scoped names to unscoped names (e.g., 'gpu_0/conv1_w' ->\n    'conv1_w').\n    \"\"\"", "\n", "logger", ".", "info", "(", "\n", "'Saving parameters and momentum to {}'", ".", "format", "(", "\n", "os", ".", "path", ".", "abspath", "(", "weights_file", ")", ")", ")", "\n", "blobs", "=", "{", "}", "\n", "# Save all parameters", "\n", "for", "param", "in", "model", ".", "params", ":", "\n", "        ", "scoped_name", "=", "str", "(", "param", ")", "\n", "unscoped_name", "=", "c2_utils", ".", "UnscopeName", "(", "scoped_name", ")", "\n", "if", "unscoped_name", "not", "in", "blobs", ":", "\n", "            ", "logger", ".", "debug", "(", "' {:s} -> {:s}'", ".", "format", "(", "scoped_name", ",", "unscoped_name", ")", ")", "\n", "blobs", "[", "unscoped_name", "]", "=", "workspace", ".", "FetchBlob", "(", "scoped_name", ")", "\n", "# Save momentum", "\n", "", "", "for", "param", "in", "model", ".", "TrainableParams", "(", ")", ":", "\n", "        ", "scoped_name", "=", "str", "(", "param", ")", "+", "'_momentum'", "\n", "unscoped_name", "=", "c2_utils", ".", "UnscopeName", "(", "scoped_name", ")", "\n", "if", "unscoped_name", "not", "in", "blobs", ":", "\n", "            ", "logger", ".", "debug", "(", "' {:s} -> {:s}'", ".", "format", "(", "scoped_name", ",", "unscoped_name", ")", ")", "\n", "blobs", "[", "unscoped_name", "]", "=", "workspace", ".", "FetchBlob", "(", "scoped_name", ")", "\n", "# Save preserved blobs", "\n", "", "", "for", "scoped_name", "in", "workspace", ".", "Blobs", "(", ")", ":", "\n", "        ", "if", "scoped_name", ".", "startswith", "(", "'__preserve__/'", ")", ":", "\n", "            ", "unscoped_name", "=", "c2_utils", ".", "UnscopeName", "(", "scoped_name", ")", "\n", "if", "unscoped_name", "not", "in", "blobs", ":", "\n", "                ", "logger", ".", "debug", "(", "\n", "' {:s} -> {:s} (preserved)'", ".", "format", "(", "\n", "scoped_name", ",", "unscoped_name", ")", ")", "\n", "blobs", "[", "unscoped_name", "]", "=", "workspace", ".", "FetchBlob", "(", "scoped_name", ")", "\n", "", "", "", "cfg_yaml", "=", "yaml", ".", "dump", "(", "cfg", ")", "\n", "save_object", "(", "dict", "(", "blobs", "=", "blobs", ",", "cfg", "=", "cfg_yaml", ")", ",", "weights_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.net.broadcast_parameters": [[164, 188], ["net.broadcast_parameters._do_broadcast"], "function", ["None"], ["", "def", "broadcast_parameters", "(", "model", ")", ":", "\n", "    ", "\"\"\"Copy parameter blobs from GPU 0 over the corresponding parameter blobs\n    on GPUs 1 through cfg.NUM_GPUS - 1.\n    \"\"\"", "\n", "if", "cfg", ".", "NUM_GPUS", "==", "1", ":", "\n", "# no-op if only running on a single GPU", "\n", "        ", "return", "\n", "\n", "", "def", "_do_broadcast", "(", "all_blobs", ")", ":", "\n", "        ", "assert", "len", "(", "all_blobs", ")", "%", "cfg", ".", "NUM_GPUS", "==", "0", ",", "(", "'Unexpected value for NUM_GPUS. Make sure you are not '", "\n", "'running single-GPU inference with NUM_GPUS > 1.'", ")", "\n", "blobs_per_gpu", "=", "int", "(", "len", "(", "all_blobs", ")", "/", "cfg", ".", "NUM_GPUS", ")", "\n", "for", "i", "in", "range", "(", "blobs_per_gpu", ")", ":", "\n", "            ", "blobs", "=", "[", "p", "for", "p", "in", "all_blobs", "[", "i", ":", ":", "blobs_per_gpu", "]", "]", "\n", "data", "=", "workspace", ".", "FetchBlob", "(", "blobs", "[", "0", "]", ")", "\n", "logger", ".", "debug", "(", "'Broadcasting {} to'", ".", "format", "(", "str", "(", "blobs", "[", "0", "]", ")", ")", ")", "\n", "for", "i", ",", "p", "in", "enumerate", "(", "blobs", "[", "1", ":", "]", ")", ":", "\n", "                ", "logger", ".", "debug", "(", "' |-> {}'", ".", "format", "(", "str", "(", "p", ")", ")", ")", "\n", "with", "c2_utils", ".", "CudaScope", "(", "i", "+", "1", ")", ":", "\n", "                    ", "workspace", ".", "FeedBlob", "(", "p", ",", "data", ")", "\n", "\n", "", "", "", "", "_do_broadcast", "(", "model", ".", "params", ")", "\n", "_do_broadcast", "(", "[", "b", "+", "'_momentum'", "for", "b", "in", "model", ".", "TrainableParams", "(", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.net.sum_multi_gpu_blob": [[190, 196], ["range", "float", "caffe2.python.workspace.FetchBlob"], "function", ["None"], ["", "def", "sum_multi_gpu_blob", "(", "blob_name", ")", ":", "\n", "    ", "\"\"\"Return the sum of a scalar blob held on multiple GPUs.\"\"\"", "\n", "val", "=", "0", "\n", "for", "i", "in", "range", "(", "cfg", ".", "NUM_GPUS", ")", ":", "\n", "        ", "val", "+=", "float", "(", "workspace", ".", "FetchBlob", "(", "'gpu_{}/{}'", ".", "format", "(", "i", ",", "blob_name", ")", ")", ")", "\n", "", "return", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.net.average_multi_gpu_blob": [[198, 201], ["net.sum_multi_gpu_blob"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.net.sum_multi_gpu_blob"], ["", "def", "average_multi_gpu_blob", "(", "blob_name", ")", ":", "\n", "    ", "\"\"\"Return the average of a scalar blob held on multiple GPUs.\"\"\"", "\n", "return", "sum_multi_gpu_blob", "(", "blob_name", ")", "/", "cfg", ".", "NUM_GPUS", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.net.print_net": [[203, 240], ["logger.info", "logger.info", "model.net.Proto", "str", "model.net.Name", "str.startswith", "range", "model.net.Name", "str.find", "caffe2.python.workspace.FetchBlob", "len", "caffe2.python.workspace.FetchBlob", "isinstance", "logger.info", "utils.UnscopeName", "utils.UnscopeName", "str", "str"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.c2.UnscopeName", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.c2.UnscopeName"], ["", "def", "print_net", "(", "model", ",", "namescope", "=", "'gpu_0'", ")", ":", "\n", "    ", "\"\"\"Print the model network.\"\"\"", "\n", "logger", ".", "info", "(", "'Printing model: {}'", ".", "format", "(", "model", ".", "net", ".", "Name", "(", ")", ")", ")", "\n", "op_list", "=", "model", ".", "net", ".", "Proto", "(", ")", ".", "op", "\n", "for", "op", "in", "op_list", ":", "\n", "        ", "input_name", "=", "op", ".", "input", "\n", "# For simplicity: only print the first output", "\n", "# Not recommended if there are split layers", "\n", "output_name", "=", "str", "(", "op", ".", "output", "[", "0", "]", ")", "\n", "op_type", "=", "op", ".", "type", "\n", "op_name", "=", "op", ".", "name", "\n", "\n", "if", "namescope", "is", "None", "or", "output_name", ".", "startswith", "(", "namescope", ")", ":", "\n", "# Only print the forward pass network", "\n", "            ", "if", "output_name", ".", "find", "(", "'grad'", ")", ">=", "0", ":", "\n", "                ", "break", "\n", "\n", "", "output_shape", "=", "workspace", ".", "FetchBlob", "(", "output_name", ")", ".", "shape", "\n", "first_blob", "=", "True", "\n", "op_label", "=", "op_type", "+", "(", "op_name", "if", "op_name", "==", "''", "else", "':'", "+", "op_name", ")", "\n", "suffix", "=", "' ------- (op: {})'", ".", "format", "(", "op_label", ")", "\n", "for", "j", "in", "range", "(", "len", "(", "input_name", ")", ")", ":", "\n", "                ", "if", "input_name", "[", "j", "]", "in", "model", ".", "params", ":", "\n", "                    ", "continue", "\n", "", "input_blob", "=", "workspace", ".", "FetchBlob", "(", "input_name", "[", "j", "]", ")", "\n", "if", "isinstance", "(", "input_blob", ",", "np", ".", "ndarray", ")", ":", "\n", "                    ", "input_shape", "=", "input_blob", ".", "shape", "\n", "logger", ".", "info", "(", "'{:28s}: {:20s} => {:28s}: {:20s}{}'", ".", "format", "(", "\n", "c2_utils", ".", "UnscopeName", "(", "str", "(", "input_name", "[", "j", "]", ")", ")", ",", "\n", "'{}'", ".", "format", "(", "input_shape", ")", ",", "\n", "c2_utils", ".", "UnscopeName", "(", "str", "(", "output_name", ")", ")", ",", "\n", "'{}'", ".", "format", "(", "output_shape", ")", ",", "\n", "suffix", ")", ")", "\n", "if", "first_blob", ":", "\n", "                        ", "first_blob", "=", "False", "\n", "suffix", "=", "' ------|'", "\n", "", "", "", "", "", "logger", ".", "info", "(", "'End of model: {}'", ".", "format", "(", "model", ".", "net", ".", "Name", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.net.configure_bbox_reg_weights": [[242, 256], ["logger.warning", "logger.info", "logger.info", "pprint.pformat"], "function", ["None"], ["", "def", "configure_bbox_reg_weights", "(", "model", ",", "saved_cfg", ")", ":", "\n", "    ", "\"\"\"Compatibility for old models trained with bounding box regression\n    mean/std normalization (instead of fixed weights).\n    \"\"\"", "\n", "if", "'MODEL'", "not", "in", "saved_cfg", "or", "'BBOX_REG_WEIGHTS'", "not", "in", "saved_cfg", ".", "MODEL", ":", "\n", "        ", "logger", ".", "warning", "(", "'Model from weights file was trained before config key '", "\n", "'MODEL.BBOX_REG_WEIGHTS was added. Forcing '", "\n", "'MODEL.BBOX_REG_WEIGHTS = (1., 1., 1., 1.) to ensure '", "\n", "'correct **inference** behavior.'", ")", "\n", "cfg", ".", "MODEL", ".", "BBOX_REG_WEIGHTS", "=", "(", "1.", ",", "1.", ",", "1.", ",", "1.", ")", "\n", "logger", ".", "info", "(", "'New config:'", ")", "\n", "logger", ".", "info", "(", "pprint", ".", "pformat", "(", "cfg", ")", ")", "\n", "assert", "not", "model", ".", "train", ",", "(", "\n", "'This model was trained with an older version of the code that '", "\n", "'used bounding box regression mean/std normalization. It can no '", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.lr_policy.get_lr_at_iter": [[28, 44], ["numpy.float32", "lr_policy.get_lr_func", "KeyError"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.lr_policy.get_lr_func"], ["def", "get_lr_at_iter", "(", "it", ")", ":", "\n", "    ", "\"\"\"Get the learning rate at iteration it according to the cfg.SOLVER\n    settings.\n    \"\"\"", "\n", "lr", "=", "get_lr_func", "(", ")", "(", "it", ")", "\n", "if", "it", "<", "cfg", ".", "SOLVER", ".", "WARM_UP_ITERS", ":", "\n", "        ", "method", "=", "cfg", ".", "SOLVER", ".", "WARM_UP_METHOD", "\n", "if", "method", "==", "'constant'", ":", "\n", "            ", "warmup_factor", "=", "cfg", ".", "SOLVER", ".", "WARM_UP_FACTOR", "\n", "", "elif", "method", "==", "'linear'", ":", "\n", "            ", "alpha", "=", "it", "/", "cfg", ".", "SOLVER", ".", "WARM_UP_ITERS", "\n", "warmup_factor", "=", "cfg", ".", "SOLVER", ".", "WARM_UP_FACTOR", "*", "(", "1", "-", "alpha", ")", "+", "alpha", "\n", "", "else", ":", "\n", "            ", "raise", "KeyError", "(", "'Unknown SOLVER.WARM_UP_METHOD: {}'", ".", "format", "(", "method", ")", ")", "\n", "", "lr", "*=", "warmup_factor", "\n", "", "return", "np", ".", "float32", "(", "lr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.lr_policy.lr_func_steps_with_lrs": [[50, 65], ["lr_policy.get_step_index"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.lr_policy.get_step_index"], ["", "def", "lr_func_steps_with_lrs", "(", "cur_iter", ")", ":", "\n", "    ", "\"\"\"For cfg.SOLVER.LR_POLICY = 'steps_with_lrs'\n\n    Change the learning rate to specified values at specified iterations.\n\n    Example:\n    cfg.SOLVER.MAX_ITER: 90\n    cfg.SOLVER.STEPS:    [0,    60,    80]\n    cfg.SOLVER.LRS:      [0.02, 0.002, 0.0002]\n    for cur_iter in [0, 59]   use 0.02\n                 in [60, 79]  use 0.002\n                 in [80, inf] use 0.0002\n    \"\"\"", "\n", "ind", "=", "get_step_index", "(", "cur_iter", ")", "\n", "return", "cfg", ".", "SOLVER", ".", "LRS", "[", "ind", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.lr_policy.lr_func_steps_with_decay": [[67, 84], ["lr_policy.get_step_index"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.lr_policy.get_step_index"], ["", "def", "lr_func_steps_with_decay", "(", "cur_iter", ")", ":", "\n", "    ", "\"\"\"For cfg.SOLVER.LR_POLICY = 'steps_with_decay'\n\n    Change the learning rate specified iterations based on the formula\n    lr = base_lr * gamma ** lr_step_count.\n\n    Example:\n    cfg.SOLVER.MAX_ITER: 90\n    cfg.SOLVER.STEPS:    [0,    60,    80]\n    cfg.SOLVER.BASE_LR:  0.02\n    cfg.SOLVER.GAMMA:    0.1\n    for cur_iter in [0, 59]   use 0.02 = 0.02 * 0.1 ** 0\n                 in [60, 79]  use 0.002 = 0.02 * 0.1 ** 1\n                 in [80, inf] use 0.0002 = 0.02 * 0.1 ** 2\n    \"\"\"", "\n", "ind", "=", "get_step_index", "(", "cur_iter", ")", "\n", "return", "cfg", ".", "SOLVER", ".", "BASE_LR", "*", "cfg", ".", "SOLVER", ".", "GAMMA", "**", "ind", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.lr_policy.lr_func_step": [[86, 92], ["None"], "function", ["None"], ["", "def", "lr_func_step", "(", "cur_iter", ")", ":", "\n", "    ", "\"\"\"For cfg.SOLVER.LR_POLICY = 'step'\n    \"\"\"", "\n", "return", "(", "\n", "cfg", ".", "SOLVER", ".", "BASE_LR", "*", "\n", "cfg", ".", "SOLVER", ".", "GAMMA", "**", "(", "cur_iter", "//", "cfg", ".", "SOLVER", ".", "STEP_SIZE", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.lr_policy.get_step_index": [[98, 106], ["enumerate"], "function", ["None"], ["", "def", "get_step_index", "(", "cur_iter", ")", ":", "\n", "    ", "\"\"\"Given an iteration, find which learning rate step we're at.\"\"\"", "\n", "assert", "cfg", ".", "SOLVER", ".", "STEPS", "[", "0", "]", "==", "0", ",", "'The first step should always start at 0.'", "\n", "steps", "=", "cfg", ".", "SOLVER", ".", "STEPS", "+", "[", "cfg", ".", "SOLVER", ".", "MAX_ITER", "]", "\n", "for", "ind", ",", "step", "in", "enumerate", "(", "steps", ")", ":", "# NoQA", "\n", "        ", "if", "cur_iter", "<", "step", ":", "\n", "            ", "break", "\n", "", "", "return", "ind", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.lr_policy.get_lr_func": [[108, 115], ["globals", "NotImplementedError", "globals"], "function", ["None"], ["", "def", "get_lr_func", "(", ")", ":", "\n", "    ", "policy", "=", "'lr_func_'", "+", "cfg", ".", "SOLVER", ".", "LR_POLICY", "\n", "if", "policy", "not", "in", "globals", "(", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\n", "'Unknown LR policy: {}'", ".", "format", "(", "cfg", ".", "SOLVER", ".", "LR_POLICY", ")", ")", "\n", "", "else", ":", "\n", "        ", "return", "globals", "(", ")", "[", "policy", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.collections.AttrDict.__getattr__": [[26, 33], ["AttributeError"], "methods", ["None"], ["    ", "def", "__getattr__", "(", "self", ",", "name", ")", ":", "\n", "        ", "if", "name", "in", "self", ".", "__dict__", ":", "\n", "            ", "return", "self", ".", "__dict__", "[", "name", "]", "\n", "", "elif", "name", "in", "self", ":", "\n", "            ", "return", "self", "[", "name", "]", "\n", "", "else", ":", "\n", "            ", "raise", "AttributeError", "(", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.collections.AttrDict.__setattr__": [[34, 39], ["None"], "methods", ["None"], ["", "", "def", "__setattr__", "(", "self", ",", "name", ",", "value", ")", ":", "\n", "        ", "if", "name", "in", "self", ".", "__dict__", ":", "\n", "            ", "self", ".", "__dict__", "[", "name", "]", "=", "value", "\n", "", "else", ":", "\n", "            ", "self", "[", "name", "]", "=", "value", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.keypoints.get_keypoints": [[30, 64], ["None"], "function", ["None"], ["def", "get_keypoints", "(", ")", ":", "\n", "    ", "\"\"\"Get the COCO keypoints and their left/right flip coorespondence map.\"\"\"", "\n", "# Keypoints are not available in the COCO json for the test split, so we", "\n", "# provide them here.", "\n", "keypoints", "=", "[", "\n", "'nose'", ",", "\n", "'left_eye'", ",", "\n", "'right_eye'", ",", "\n", "'left_ear'", ",", "\n", "'right_ear'", ",", "\n", "'left_shoulder'", ",", "\n", "'right_shoulder'", ",", "\n", "'left_elbow'", ",", "\n", "'right_elbow'", ",", "\n", "'left_wrist'", ",", "\n", "'right_wrist'", ",", "\n", "'left_hip'", ",", "\n", "'right_hip'", ",", "\n", "'left_knee'", ",", "\n", "'right_knee'", ",", "\n", "'left_ankle'", ",", "\n", "'right_ankle'", "\n", "]", "\n", "keypoint_flip_map", "=", "{", "\n", "'left_eye'", ":", "'right_eye'", ",", "\n", "'left_ear'", ":", "'right_ear'", ",", "\n", "'left_shoulder'", ":", "'right_shoulder'", ",", "\n", "'left_elbow'", ":", "'right_elbow'", ",", "\n", "'left_wrist'", ":", "'right_wrist'", ",", "\n", "'left_hip'", ":", "'right_hip'", ",", "\n", "'left_knee'", ":", "'right_knee'", ",", "\n", "'left_ankle'", ":", "'right_ankle'", "\n", "}", "\n", "return", "keypoints", ",", "keypoint_flip_map", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.keypoints.get_person_class_index": [[66, 69], ["None"], "function", ["None"], ["", "def", "get_person_class_index", "(", ")", ":", "\n", "    ", "\"\"\"Index of the person class in COCO.\"\"\"", "\n", "return", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.keypoints.flip_keypoints": [[71, 88], ["keypoint_coords.copy", "keypoint_flip_map.items", "numpy.where", "keypoints.index", "keypoints.index"], "function", ["None"], ["", "def", "flip_keypoints", "(", "keypoints", ",", "keypoint_flip_map", ",", "keypoint_coords", ",", "width", ")", ":", "\n", "    ", "\"\"\"Left/right flip keypoint_coords. keypoints and keypoint_flip_map are\n    accessible from get_keypoints().\n    \"\"\"", "\n", "flipped_kps", "=", "keypoint_coords", ".", "copy", "(", ")", "\n", "for", "lkp", ",", "rkp", "in", "keypoint_flip_map", ".", "items", "(", ")", ":", "\n", "        ", "lid", "=", "keypoints", ".", "index", "(", "lkp", ")", "\n", "rid", "=", "keypoints", ".", "index", "(", "rkp", ")", "\n", "flipped_kps", "[", ":", ",", ":", ",", "lid", "]", "=", "keypoint_coords", "[", ":", ",", ":", ",", "rid", "]", "\n", "flipped_kps", "[", ":", ",", ":", ",", "rid", "]", "=", "keypoint_coords", "[", ":", ",", ":", ",", "lid", "]", "\n", "\n", "# Flip x coordinates", "\n", "", "flipped_kps", "[", ":", ",", "0", ",", ":", "]", "=", "width", "-", "flipped_kps", "[", ":", ",", "0", ",", ":", "]", "-", "1", "\n", "# Maintain COCO convention that if visibility == 0, then x, y = 0", "\n", "inds", "=", "np", ".", "where", "(", "flipped_kps", "[", ":", ",", "2", ",", ":", "]", "==", "0", ")", "\n", "flipped_kps", "[", "inds", "[", "0", "]", ",", "0", ",", "inds", "[", "1", "]", "]", "=", "0", "\n", "return", "flipped_kps", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.keypoints.flip_heatmaps": [[90, 101], ["keypoints.get_keypoints", "heatmaps.copy", "flip_map.items", "keypoints.index", "keypoints.index"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.keypoints.get_keypoints"], ["", "def", "flip_heatmaps", "(", "heatmaps", ")", ":", "\n", "    ", "\"\"\"Flip heatmaps horizontally.\"\"\"", "\n", "keypoints", ",", "flip_map", "=", "get_keypoints", "(", ")", "\n", "heatmaps_flipped", "=", "heatmaps", ".", "copy", "(", ")", "\n", "for", "lkp", ",", "rkp", "in", "flip_map", ".", "items", "(", ")", ":", "\n", "        ", "lid", "=", "keypoints", ".", "index", "(", "lkp", ")", "\n", "rid", "=", "keypoints", ".", "index", "(", "rkp", ")", "\n", "heatmaps_flipped", "[", ":", ",", "rid", ",", ":", ",", ":", "]", "=", "heatmaps", "[", ":", ",", "lid", ",", ":", ",", ":", "]", "\n", "heatmaps_flipped", "[", ":", ",", "lid", ",", ":", ",", ":", "]", "=", "heatmaps", "[", ":", ",", "rid", ",", ":", ",", ":", "]", "\n", "", "heatmaps_flipped", "=", "heatmaps_flipped", "[", ":", ",", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "return", "heatmaps_flipped", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.keypoints.heatmaps_to_keypoints": [[103, 158], ["numpy.maximum", "numpy.maximum", "numpy.ceil", "numpy.ceil", "numpy.transpose", "numpy.zeros", "range", "len", "cv2.resize", "numpy.transpose", "keypoints.scores_to_probs", "range", "len", "int", "int", "np.transpose.copy", "roi_map[].argmax", "numpy.maximum", "numpy.maximum", "roi_map_probs[].max"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.blob.zeros", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.keypoints.scores_to_probs"], ["", "def", "heatmaps_to_keypoints", "(", "maps", ",", "rois", ")", ":", "\n", "    ", "\"\"\"Extract predicted keypoint locations from heatmaps. Output has shape\n    (#rois, 4, #keypoints) with the 4 rows corresponding to (x, y, logit, prob)\n    for each keypoint.\n    \"\"\"", "\n", "# This function converts a discrete image coordinate in a HEATMAP_SIZE x", "\n", "# HEATMAP_SIZE image to a continuous keypoint coordinate. We maintain", "\n", "# consistency with keypoints_to_heatmap_labels by using the conversion from", "\n", "# Heckbert 1990: c = d + 0.5, where d is a discrete coordinate and c is a", "\n", "# continuous coordinate.", "\n", "offset_x", "=", "rois", "[", ":", ",", "0", "]", "\n", "offset_y", "=", "rois", "[", ":", ",", "1", "]", "\n", "\n", "widths", "=", "rois", "[", ":", ",", "2", "]", "-", "rois", "[", ":", ",", "0", "]", "\n", "heights", "=", "rois", "[", ":", ",", "3", "]", "-", "rois", "[", ":", ",", "1", "]", "\n", "widths", "=", "np", ".", "maximum", "(", "widths", ",", "1", ")", "\n", "heights", "=", "np", ".", "maximum", "(", "heights", ",", "1", ")", "\n", "widths_ceil", "=", "np", ".", "ceil", "(", "widths", ")", "\n", "heights_ceil", "=", "np", ".", "ceil", "(", "heights", ")", "\n", "\n", "# NCHW to NHWC for use with OpenCV", "\n", "maps", "=", "np", ".", "transpose", "(", "maps", ",", "[", "0", ",", "2", ",", "3", ",", "1", "]", ")", "\n", "min_size", "=", "cfg", ".", "KRCNN", ".", "INFERENCE_MIN_SIZE", "\n", "xy_preds", "=", "np", ".", "zeros", "(", "\n", "(", "len", "(", "rois", ")", ",", "4", ",", "cfg", ".", "KRCNN", ".", "NUM_KEYPOINTS", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "rois", ")", ")", ":", "\n", "        ", "if", "min_size", ">", "0", ":", "\n", "            ", "roi_map_width", "=", "int", "(", "np", ".", "maximum", "(", "widths_ceil", "[", "i", "]", ",", "min_size", ")", ")", "\n", "roi_map_height", "=", "int", "(", "np", ".", "maximum", "(", "heights_ceil", "[", "i", "]", ",", "min_size", ")", ")", "\n", "", "else", ":", "\n", "            ", "roi_map_width", "=", "widths_ceil", "[", "i", "]", "\n", "roi_map_height", "=", "heights_ceil", "[", "i", "]", "\n", "", "width_correction", "=", "widths", "[", "i", "]", "/", "roi_map_width", "\n", "height_correction", "=", "heights", "[", "i", "]", "/", "roi_map_height", "\n", "roi_map", "=", "cv2", ".", "resize", "(", "\n", "maps", "[", "i", "]", ",", "(", "roi_map_width", ",", "roi_map_height", ")", ",", "\n", "interpolation", "=", "cv2", ".", "INTER_CUBIC", ")", "\n", "# Bring back to CHW", "\n", "roi_map", "=", "np", ".", "transpose", "(", "roi_map", ",", "[", "2", ",", "0", ",", "1", "]", ")", "\n", "roi_map_probs", "=", "scores_to_probs", "(", "roi_map", ".", "copy", "(", ")", ")", "\n", "w", "=", "roi_map", ".", "shape", "[", "2", "]", "\n", "for", "k", "in", "range", "(", "cfg", ".", "KRCNN", ".", "NUM_KEYPOINTS", ")", ":", "\n", "            ", "pos", "=", "roi_map", "[", "k", ",", ":", ",", ":", "]", ".", "argmax", "(", ")", "\n", "x_int", "=", "pos", "%", "w", "\n", "y_int", "=", "(", "pos", "-", "x_int", ")", "//", "w", "\n", "assert", "(", "roi_map_probs", "[", "k", ",", "y_int", ",", "x_int", "]", "==", "\n", "roi_map_probs", "[", "k", ",", ":", ",", ":", "]", ".", "max", "(", ")", ")", "\n", "x", "=", "(", "x_int", "+", "0.5", ")", "*", "width_correction", "\n", "y", "=", "(", "y_int", "+", "0.5", ")", "*", "height_correction", "\n", "xy_preds", "[", "i", ",", "0", ",", "k", "]", "=", "x", "+", "offset_x", "[", "i", "]", "\n", "xy_preds", "[", "i", ",", "1", ",", "k", "]", "=", "y", "+", "offset_y", "[", "i", "]", "\n", "xy_preds", "[", "i", ",", "2", ",", "k", "]", "=", "roi_map", "[", "k", ",", "y_int", ",", "x_int", "]", "\n", "xy_preds", "[", "i", ",", "3", ",", "k", "]", "=", "roi_map_probs", "[", "k", ",", "y_int", ",", "x_int", "]", "\n", "\n", "", "", "return", "xy_preds", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.keypoints.keypoints_to_heatmap_labels": [[160, 212], ["utils.zeros", "utils.zeros", "range", "len", "keypoints[].astype", "keypoints[].astype", "numpy.floor", "numpy.floor", "numpy.logical_and", "numpy.logical_and", "valid.astype.astype", "numpy.where", "numpy.where", "len", "len", "numpy.logical_and", "numpy.logical_and"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.blob.zeros", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.blob.zeros"], ["", "def", "keypoints_to_heatmap_labels", "(", "keypoints", ",", "rois", ")", ":", "\n", "    ", "\"\"\"Encode keypoint location in the target heatmap for use in\n    SoftmaxWithLoss.\n    \"\"\"", "\n", "# Maps keypoints from the half-open interval [x1, x2) on continuous image", "\n", "# coordinates to the closed interval [0, HEATMAP_SIZE - 1] on discrete image", "\n", "# coordinates. We use the continuous <-> discrete conversion from Heckbert", "\n", "# 1990 (\"What is the coordinate of a pixel?\"): d = floor(c) and c = d + 0.5,", "\n", "# where d is a discrete coordinate and c is a continuous coordinate.", "\n", "assert", "keypoints", ".", "shape", "[", "2", "]", "==", "cfg", ".", "KRCNN", ".", "NUM_KEYPOINTS", "\n", "\n", "shape", "=", "(", "len", "(", "rois", ")", ",", "cfg", ".", "KRCNN", ".", "NUM_KEYPOINTS", ")", "\n", "heatmaps", "=", "blob_utils", ".", "zeros", "(", "shape", ")", "\n", "weights", "=", "blob_utils", ".", "zeros", "(", "shape", ")", "\n", "\n", "offset_x", "=", "rois", "[", ":", ",", "0", "]", "\n", "offset_y", "=", "rois", "[", ":", ",", "1", "]", "\n", "scale_x", "=", "cfg", ".", "KRCNN", ".", "HEATMAP_SIZE", "/", "(", "rois", "[", ":", ",", "2", "]", "-", "rois", "[", ":", ",", "0", "]", ")", "\n", "scale_y", "=", "cfg", ".", "KRCNN", ".", "HEATMAP_SIZE", "/", "(", "rois", "[", ":", ",", "3", "]", "-", "rois", "[", ":", ",", "1", "]", ")", "\n", "\n", "for", "kp", "in", "range", "(", "keypoints", ".", "shape", "[", "2", "]", ")", ":", "\n", "        ", "vis", "=", "keypoints", "[", ":", ",", "2", ",", "kp", "]", ">", "0", "\n", "x", "=", "keypoints", "[", ":", ",", "0", ",", "kp", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "y", "=", "keypoints", "[", ":", ",", "1", ",", "kp", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "# Since we use floor below, if a keypoint is exactly on the roi's right", "\n", "# or bottom boundary, we shift it in by eps (conceptually) to keep it in", "\n", "# the ground truth heatmap.", "\n", "x_boundary_inds", "=", "np", ".", "where", "(", "x", "==", "rois", "[", ":", ",", "2", "]", ")", "[", "0", "]", "\n", "y_boundary_inds", "=", "np", ".", "where", "(", "y", "==", "rois", "[", ":", ",", "3", "]", ")", "[", "0", "]", "\n", "x", "=", "(", "x", "-", "offset_x", ")", "*", "scale_x", "\n", "x", "=", "np", ".", "floor", "(", "x", ")", "\n", "if", "len", "(", "x_boundary_inds", ")", ">", "0", ":", "\n", "            ", "x", "[", "x_boundary_inds", "]", "=", "cfg", ".", "KRCNN", ".", "HEATMAP_SIZE", "-", "1", "\n", "\n", "", "y", "=", "(", "y", "-", "offset_y", ")", "*", "scale_y", "\n", "y", "=", "np", ".", "floor", "(", "y", ")", "\n", "if", "len", "(", "y_boundary_inds", ")", ">", "0", ":", "\n", "            ", "y", "[", "y_boundary_inds", "]", "=", "cfg", ".", "KRCNN", ".", "HEATMAP_SIZE", "-", "1", "\n", "\n", "", "valid_loc", "=", "np", ".", "logical_and", "(", "\n", "np", ".", "logical_and", "(", "x", ">=", "0", ",", "y", ">=", "0", ")", ",", "\n", "np", ".", "logical_and", "(", "\n", "x", "<", "cfg", ".", "KRCNN", ".", "HEATMAP_SIZE", ",", "y", "<", "cfg", ".", "KRCNN", ".", "HEATMAP_SIZE", ")", ")", "\n", "\n", "valid", "=", "np", ".", "logical_and", "(", "valid_loc", ",", "vis", ")", "\n", "valid", "=", "valid", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "lin_ind", "=", "y", "*", "cfg", ".", "KRCNN", ".", "HEATMAP_SIZE", "+", "x", "\n", "heatmaps", "[", ":", ",", "kp", "]", "=", "lin_ind", "*", "valid", "\n", "weights", "[", ":", ",", "kp", "]", "=", "valid", "\n", "\n", "", "return", "heatmaps", ",", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.keypoints.scores_to_probs": [[214, 223], ["range", "temp.max", "numpy.exp", "numpy.sum", "numpy.exp"], "function", ["None"], ["", "def", "scores_to_probs", "(", "scores", ")", ":", "\n", "    ", "\"\"\"Transforms CxHxW of scores to probabilities spatially.\"\"\"", "\n", "channels", "=", "scores", ".", "shape", "[", "0", "]", "\n", "for", "c", "in", "range", "(", "channels", ")", ":", "\n", "        ", "temp", "=", "scores", "[", "c", ",", ":", ",", ":", "]", "\n", "max_score", "=", "temp", ".", "max", "(", ")", "\n", "temp", "=", "np", ".", "exp", "(", "temp", "-", "max_score", ")", "/", "np", ".", "sum", "(", "np", ".", "exp", "(", "temp", "-", "max_score", ")", ")", "\n", "scores", "[", "c", ",", ":", ",", ":", "]", "=", "temp", "\n", "", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.keypoints.nms_oks": [[225, 241], ["numpy.mean", "np.mean.argsort", "keep.append", "keypoints.compute_oks", "numpy.where"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.keypoints.compute_oks"], ["", "def", "nms_oks", "(", "kp_predictions", ",", "rois", ",", "thresh", ")", ":", "\n", "    ", "\"\"\"Nms based on kp predictions.\"\"\"", "\n", "scores", "=", "np", ".", "mean", "(", "kp_predictions", "[", ":", ",", "2", ",", ":", "]", ",", "axis", "=", "1", ")", "\n", "order", "=", "scores", ".", "argsort", "(", ")", "[", ":", ":", "-", "1", "]", "\n", "\n", "keep", "=", "[", "]", "\n", "while", "order", ".", "size", ">", "0", ":", "\n", "        ", "i", "=", "order", "[", "0", "]", "\n", "keep", ".", "append", "(", "i", ")", "\n", "ovr", "=", "compute_oks", "(", "\n", "kp_predictions", "[", "i", "]", ",", "rois", "[", "i", "]", ",", "kp_predictions", "[", "order", "[", "1", ":", "]", "]", ",", "\n", "rois", "[", "order", "[", "1", ":", "]", "]", ")", "\n", "inds", "=", "np", ".", "where", "(", "ovr", "<=", "thresh", ")", "[", "0", "]", "\n", "order", "=", "order", "[", "inds", "+", "1", "]", "\n", "\n", "", "return", "keep", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.keypoints.compute_oks": [[243, 267], ["numpy.array", "numpy.sum", "numpy.exp", "numpy.spacing"], "function", ["None"], ["", "def", "compute_oks", "(", "src_keypoints", ",", "src_roi", ",", "dst_keypoints", ",", "dst_roi", ")", ":", "\n", "    ", "\"\"\"Compute OKS for predicted keypoints wrt gt_keypoints.\n    src_keypoints: 4xK\n    src_roi: 4x1\n    dst_keypoints: Nx4xK\n    dst_roi: Nx4\n    \"\"\"", "\n", "\n", "sigmas", "=", "np", ".", "array", "(", "[", "\n", ".26", ",", ".25", ",", ".25", ",", ".35", ",", ".35", ",", ".79", ",", ".79", ",", ".72", ",", ".72", ",", ".62", ",", ".62", ",", "1.07", ",", "1.07", ",", ".87", ",", "\n", ".87", ",", ".89", ",", ".89", "]", ")", "/", "10.0", "\n", "vars", "=", "(", "sigmas", "*", "2", ")", "**", "2", "\n", "\n", "# area", "\n", "src_area", "=", "(", "src_roi", "[", "2", "]", "-", "src_roi", "[", "0", "]", "+", "1", ")", "*", "(", "src_roi", "[", "3", "]", "-", "src_roi", "[", "1", "]", "+", "1", ")", "\n", "\n", "# measure the per-keypoint distance if keypoints visible", "\n", "dx", "=", "dst_keypoints", "[", ":", ",", "0", ",", ":", "]", "-", "src_keypoints", "[", "0", ",", ":", "]", "\n", "dy", "=", "dst_keypoints", "[", ":", ",", "1", ",", ":", "]", "-", "src_keypoints", "[", "1", ",", ":", "]", "\n", "\n", "e", "=", "(", "dx", "**", "2", "+", "dy", "**", "2", ")", "/", "vars", "/", "(", "src_area", "+", "np", ".", "spacing", "(", "1", ")", ")", "/", "2", "\n", "e", "=", "np", ".", "sum", "(", "np", ".", "exp", "(", "-", "e", ")", ",", "axis", "=", "1", ")", "/", "e", ".", "shape", "[", "1", "]", "\n", "\n", "return", "e", "\n", "", ""]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.coordinator.Coordinator.__init__": [[34, 36], ["threading.Event"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "_event", "=", "threading", ".", "Event", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.coordinator.Coordinator.request_stop": [[37, 40], ["log.debug", "coordinator.Coordinator._event.set"], "methods", ["None"], ["", "def", "request_stop", "(", "self", ")", ":", "\n", "        ", "log", ".", "debug", "(", "'Coordinator stopping'", ")", "\n", "self", ".", "_event", ".", "set", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.coordinator.Coordinator.should_stop": [[41, 43], ["coordinator.Coordinator._event.is_set"], "methods", ["None"], ["", "def", "should_stop", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_event", ".", "is_set", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.coordinator.Coordinator.wait_for_stop": [[44, 46], ["coordinator.Coordinator._event.wait"], "methods", ["None"], ["", "def", "wait_for_stop", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_event", ".", "wait", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.coordinator.Coordinator.stop_on_exception": [[47, 55], ["coordinator.Coordinator.should_stop", "traceback.print_exc", "coordinator.Coordinator.request_stop"], "methods", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.coordinator.Coordinator.should_stop", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.coordinator.Coordinator.request_stop"], ["", "@", "contextlib", ".", "contextmanager", "\n", "def", "stop_on_exception", "(", "self", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "yield", "\n", "", "except", "Exception", ":", "\n", "            ", "if", "not", "self", ".", "should_stop", "(", ")", ":", "\n", "                ", "traceback", ".", "print_exc", "(", ")", "\n", "self", ".", "request_stop", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.coordinator.coordinated_get": [[57, 64], ["Exception", "coordinator.should_stop", "queue.get"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.coordinator.Coordinator.should_stop"], ["", "", "", "", "def", "coordinated_get", "(", "coordinator", ",", "queue", ")", ":", "\n", "    ", "while", "not", "coordinator", ".", "should_stop", "(", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "return", "queue", ".", "get", "(", "block", "=", "True", ",", "timeout", "=", "1.0", ")", "\n", "", "except", "Queue", ".", "Empty", ":", "\n", "            ", "continue", "\n", "", "", "raise", "Exception", "(", "'Coordinator stopped during get()'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.coordinator.coordinated_put": [[66, 74], ["Exception", "coordinator.should_stop", "queue.put"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.coordinator.Coordinator.should_stop"], ["", "def", "coordinated_put", "(", "coordinator", ",", "queue", ",", "element", ")", ":", "\n", "    ", "while", "not", "coordinator", ".", "should_stop", "(", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "queue", ".", "put", "(", "element", ",", "block", "=", "True", ",", "timeout", "=", "1.0", ")", "\n", "return", "\n", "", "except", "Queue", ".", "Full", ":", "\n", "            ", "continue", "\n", "", "", "raise", "Exception", "(", "'Coordinator stopped during put()'", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.segms.flip_segms": [[35, 62], ["numpy.array", "np.array.tolist", "pycocotools.decode", "pycocotools.encode", "pycocotools.frPyObjects", "numpy.array", "type", "flipped_segms.append", "flipped_segms.append", "numpy.array", "type", "type", "segms.flip_segms._flip_rle"], "function", ["None"], ["def", "flip_segms", "(", "segms", ",", "height", ",", "width", ")", ":", "\n", "    ", "\"\"\"Left/right flip each mask in a list of masks.\"\"\"", "\n", "def", "_flip_poly", "(", "poly", ",", "width", ")", ":", "\n", "        ", "flipped_poly", "=", "np", ".", "array", "(", "poly", ")", "\n", "flipped_poly", "[", "0", ":", ":", "2", "]", "=", "width", "-", "np", ".", "array", "(", "poly", "[", "0", ":", ":", "2", "]", ")", "-", "1", "\n", "return", "flipped_poly", ".", "tolist", "(", ")", "\n", "\n", "", "def", "_flip_rle", "(", "rle", ",", "height", ",", "width", ")", ":", "\n", "        ", "if", "'counts'", "in", "rle", "and", "type", "(", "rle", "[", "'counts'", "]", ")", "==", "list", ":", "\n", "# Magic RLE format handling painfully discovered by looking at the", "\n", "# COCO API showAnns function.", "\n", "            ", "rle", "=", "mask_util", ".", "frPyObjects", "(", "[", "rle", "]", ",", "height", ",", "width", ")", "\n", "", "mask", "=", "mask_util", ".", "decode", "(", "rle", ")", "\n", "mask", "=", "mask", "[", ":", ",", ":", ":", "-", "1", ",", ":", "]", "\n", "rle", "=", "mask_util", ".", "encode", "(", "np", ".", "array", "(", "mask", ",", "order", "=", "'F'", ",", "dtype", "=", "np", ".", "uint8", ")", ")", "\n", "return", "rle", "\n", "\n", "", "flipped_segms", "=", "[", "]", "\n", "for", "segm", "in", "segms", ":", "\n", "        ", "if", "type", "(", "segm", ")", "==", "list", ":", "\n", "# Polygon format", "\n", "            ", "flipped_segms", ".", "append", "(", "[", "_flip_poly", "(", "poly", ",", "width", ")", "for", "poly", "in", "segm", "]", ")", "\n", "", "else", ":", "\n", "# RLE format", "\n", "            ", "assert", "type", "(", "segm", ")", "==", "dict", "\n", "flipped_segms", ".", "append", "(", "_flip_rle", "(", "segm", ",", "height", ",", "width", ")", ")", "\n", "", "", "return", "flipped_segms", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.segms.polys_to_mask": [[64, 76], ["pycocotools.frPyObjects", "numpy.array", "numpy.sum", "numpy.array", "pycocotools.decode"], "function", ["None"], ["", "def", "polys_to_mask", "(", "polygons", ",", "height", ",", "width", ")", ":", "\n", "    ", "\"\"\"Convert from the COCO polygon segmentation format to a binary mask\n    encoded as a 2D array of data type numpy.float32. The polygon segmentation\n    is understood to be enclosed inside a height x width image. The resulting\n    mask is therefore of shape (height, width).\n    \"\"\"", "\n", "rle", "=", "mask_util", ".", "frPyObjects", "(", "polygons", ",", "height", ",", "width", ")", "\n", "mask", "=", "np", ".", "array", "(", "mask_util", ".", "decode", "(", "rle", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "# Flatten in case polygons was a list", "\n", "mask", "=", "np", ".", "sum", "(", "mask", ",", "axis", "=", "2", ")", "\n", "mask", "=", "np", ".", "array", "(", "mask", ">", "0", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.segms.mask_to_bbox": [[78, 91], ["numpy.array", "numpy.where", "numpy.where", "len", "len", "numpy.sum", "numpy.sum"], "function", ["None"], ["", "def", "mask_to_bbox", "(", "mask", ")", ":", "\n", "    ", "\"\"\"Compute the tight bounding box of a binary mask.\"\"\"", "\n", "xs", "=", "np", ".", "where", "(", "np", ".", "sum", "(", "mask", ",", "axis", "=", "0", ")", ">", "0", ")", "[", "0", "]", "\n", "ys", "=", "np", ".", "where", "(", "np", ".", "sum", "(", "mask", ",", "axis", "=", "1", ")", ">", "0", ")", "[", "0", "]", "\n", "\n", "if", "len", "(", "xs", ")", "==", "0", "or", "len", "(", "ys", ")", "==", "0", ":", "\n", "        ", "return", "None", "\n", "\n", "", "x0", "=", "xs", "[", "0", "]", "\n", "x1", "=", "xs", "[", "-", "1", "]", "\n", "y0", "=", "ys", "[", "0", "]", "\n", "y1", "=", "ys", "[", "-", "1", "]", "\n", "return", "np", ".", "array", "(", "(", "x0", ",", "y0", ",", "x1", ",", "y1", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.segms.polys_to_mask_wrt_box": [[93, 118], ["numpy.maximum", "numpy.maximum", "pycocotools.frPyObjects", "numpy.array", "numpy.sum", "numpy.array", "numpy.array", "polygons_norm.append", "pycocotools.decode"], "function", ["None"], ["", "def", "polys_to_mask_wrt_box", "(", "polygons", ",", "box", ",", "M", ")", ":", "\n", "    ", "\"\"\"Convert from the COCO polygon segmentation format to a binary mask\n    encoded as a 2D array of data type numpy.float32. The polygon segmentation\n    is understood to be enclosed in the given box and rasterized to an M x M\n    mask. The resulting mask is therefore of shape (M, M).\n    \"\"\"", "\n", "w", "=", "box", "[", "2", "]", "-", "box", "[", "0", "]", "\n", "h", "=", "box", "[", "3", "]", "-", "box", "[", "1", "]", "\n", "\n", "w", "=", "np", ".", "maximum", "(", "w", ",", "1", ")", "\n", "h", "=", "np", ".", "maximum", "(", "h", ",", "1", ")", "\n", "\n", "polygons_norm", "=", "[", "]", "\n", "for", "poly", "in", "polygons", ":", "\n", "        ", "p", "=", "np", ".", "array", "(", "poly", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "p", "[", "0", ":", ":", "2", "]", "=", "(", "p", "[", "0", ":", ":", "2", "]", "-", "box", "[", "0", "]", ")", "*", "M", "/", "w", "\n", "p", "[", "1", ":", ":", "2", "]", "=", "(", "p", "[", "1", ":", ":", "2", "]", "-", "box", "[", "1", "]", ")", "*", "M", "/", "h", "\n", "polygons_norm", ".", "append", "(", "p", ")", "\n", "\n", "", "rle", "=", "mask_util", ".", "frPyObjects", "(", "polygons_norm", ",", "M", ",", "M", ")", "\n", "mask", "=", "np", ".", "array", "(", "mask_util", ".", "decode", "(", "rle", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "# Flatten in case polygons was a list", "\n", "mask", "=", "np", ".", "sum", "(", "mask", ",", "axis", "=", "2", ")", "\n", "mask", "=", "np", ".", "array", "(", "mask", ">", "0", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.segms.polys_to_boxes": [[120, 132], ["numpy.zeros", "range", "len", "min", "max", "min", "max", "len", "min", "max", "min", "max"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.blob.zeros"], ["", "def", "polys_to_boxes", "(", "polys", ")", ":", "\n", "    ", "\"\"\"Convert a list of polygons into an array of tight bounding boxes.\"\"\"", "\n", "boxes_from_polys", "=", "np", ".", "zeros", "(", "(", "len", "(", "polys", ")", ",", "4", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "polys", ")", ")", ":", "\n", "        ", "poly", "=", "polys", "[", "i", "]", "\n", "x0", "=", "min", "(", "min", "(", "p", "[", ":", ":", "2", "]", ")", "for", "p", "in", "poly", ")", "\n", "x1", "=", "max", "(", "max", "(", "p", "[", ":", ":", "2", "]", ")", "for", "p", "in", "poly", ")", "\n", "y0", "=", "min", "(", "min", "(", "p", "[", "1", ":", ":", "2", "]", ")", "for", "p", "in", "poly", ")", "\n", "y1", "=", "max", "(", "max", "(", "p", "[", "1", ":", ":", "2", "]", ")", "for", "p", "in", "poly", ")", "\n", "boxes_from_polys", "[", "i", ",", ":", "]", "=", "[", "x0", ",", "y0", ",", "x1", ",", "y1", "]", "\n", "\n", "", "return", "boxes_from_polys", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.segms.rle_mask_voting": [[134, 196], ["pycocotools.iou", "all_dets[].astype", "numpy.zeros", "range", "numpy.maximum", "range", "len", "len", "numpy.array", "numpy.array", "len", "max", "min", "max", "min", "len", "top_segms_out.append", "pycocotools.decode", "pycocotools.decode", "len", "decoded_top_masks[].sum", "top_segms_out.append", "numpy.where", "len", "top_segms_out.append", "numpy.average", "numpy.array", "pycocotools.encode", "numpy.sum", "numpy.array", "NotImplementedError", "numpy.array"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.blob.zeros"], ["", "def", "rle_mask_voting", "(", "\n", "top_masks", ",", "all_masks", ",", "all_dets", ",", "iou_thresh", ",", "binarize_thresh", ",", "method", "=", "'AVG'", "\n", ")", ":", "\n", "    ", "\"\"\"Returns new masks (in correspondence with `top_masks`) by combining\n    multiple overlapping masks coming from the pool of `all_masks`. Two methods\n    for combining masks are supported: 'AVG' uses a weighted average of\n    overlapping mask pixels; 'UNION' takes the union of all mask pixels.\n    \"\"\"", "\n", "if", "len", "(", "top_masks", ")", "==", "0", ":", "\n", "        ", "return", "\n", "\n", "", "all_not_crowd", "=", "[", "False", "]", "*", "len", "(", "all_masks", ")", "\n", "top_to_all_overlaps", "=", "mask_util", ".", "iou", "(", "top_masks", ",", "all_masks", ",", "all_not_crowd", ")", "\n", "decoded_all_masks", "=", "[", "\n", "np", ".", "array", "(", "mask_util", ".", "decode", "(", "rle", ")", ",", "dtype", "=", "np", ".", "float32", ")", "for", "rle", "in", "all_masks", "\n", "]", "\n", "decoded_top_masks", "=", "[", "\n", "np", ".", "array", "(", "mask_util", ".", "decode", "(", "rle", ")", ",", "dtype", "=", "np", ".", "float32", ")", "for", "rle", "in", "top_masks", "\n", "]", "\n", "all_boxes", "=", "all_dets", "[", ":", ",", ":", "4", "]", ".", "astype", "(", "np", ".", "int32", ")", "\n", "all_scores", "=", "all_dets", "[", ":", ",", "4", "]", "\n", "\n", "# Fill box support with weights", "\n", "mask_shape", "=", "decoded_all_masks", "[", "0", "]", ".", "shape", "\n", "mask_weights", "=", "np", ".", "zeros", "(", "(", "len", "(", "all_masks", ")", ",", "mask_shape", "[", "0", "]", ",", "mask_shape", "[", "1", "]", ")", ")", "\n", "for", "k", "in", "range", "(", "len", "(", "all_masks", ")", ")", ":", "\n", "        ", "ref_box", "=", "all_boxes", "[", "k", "]", "\n", "x_0", "=", "max", "(", "ref_box", "[", "0", "]", ",", "0", ")", "\n", "x_1", "=", "min", "(", "ref_box", "[", "2", "]", "+", "1", ",", "mask_shape", "[", "1", "]", ")", "\n", "y_0", "=", "max", "(", "ref_box", "[", "1", "]", ",", "0", ")", "\n", "y_1", "=", "min", "(", "ref_box", "[", "3", "]", "+", "1", ",", "mask_shape", "[", "0", "]", ")", "\n", "mask_weights", "[", "k", ",", "y_0", ":", "y_1", ",", "x_0", ":", "x_1", "]", "=", "all_scores", "[", "k", "]", "\n", "", "mask_weights", "=", "np", ".", "maximum", "(", "mask_weights", ",", "1e-5", ")", "\n", "\n", "top_segms_out", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "len", "(", "top_masks", ")", ")", ":", "\n", "# Corner case of empty mask", "\n", "        ", "if", "decoded_top_masks", "[", "k", "]", ".", "sum", "(", ")", "==", "0", ":", "\n", "            ", "top_segms_out", ".", "append", "(", "top_masks", "[", "k", "]", ")", "\n", "continue", "\n", "\n", "", "inds_to_vote", "=", "np", ".", "where", "(", "top_to_all_overlaps", "[", "k", "]", ">=", "iou_thresh", ")", "[", "0", "]", "\n", "# Only matches itself", "\n", "if", "len", "(", "inds_to_vote", ")", "==", "1", ":", "\n", "            ", "top_segms_out", ".", "append", "(", "top_masks", "[", "k", "]", ")", "\n", "continue", "\n", "\n", "", "masks_to_vote", "=", "[", "decoded_all_masks", "[", "i", "]", "for", "i", "in", "inds_to_vote", "]", "\n", "if", "method", "==", "'AVG'", ":", "\n", "            ", "ws", "=", "mask_weights", "[", "inds_to_vote", "]", "\n", "soft_mask", "=", "np", ".", "average", "(", "masks_to_vote", ",", "axis", "=", "0", ",", "weights", "=", "ws", ")", "\n", "mask", "=", "np", ".", "array", "(", "soft_mask", ">", "binarize_thresh", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "", "elif", "method", "==", "'UNION'", ":", "\n", "# Any pixel that's on joins the mask", "\n", "            ", "soft_mask", "=", "np", ".", "sum", "(", "masks_to_vote", ",", "axis", "=", "0", ")", "\n", "mask", "=", "np", ".", "array", "(", "soft_mask", ">", "1e-5", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'Method {} is unknown'", ".", "format", "(", "method", ")", ")", "\n", "", "rle", "=", "mask_util", ".", "encode", "(", "np", ".", "array", "(", "mask", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", ",", "order", "=", "'F'", ")", ")", "[", "0", "]", "\n", "top_segms_out", ".", "append", "(", "rle", ")", "\n", "\n", "", "return", "top_segms_out", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.segms.rle_mask_nms": [[198, 241], ["numpy.argsort", "len", "len", "pycocotools.iou", "keep.append", "len", "pycocotools.iou", "numpy.maximum", "numpy.where", "len", "mask_util.iou.transpose", "pycocotools.iou", "NotImplementedError", "len"], "function", ["None"], ["", "def", "rle_mask_nms", "(", "masks", ",", "dets", ",", "thresh", ",", "mode", "=", "'IOU'", ")", ":", "\n", "    ", "\"\"\"Performs greedy non-maximum suppression based on an overlap measurement\n    between masks. The type of measurement is determined by `mode` and can be\n    either 'IOU' (standard intersection over union) or 'IOMA' (intersection over\n    mininum area).\n    \"\"\"", "\n", "if", "len", "(", "masks", ")", "==", "0", ":", "\n", "        ", "return", "[", "]", "\n", "", "if", "len", "(", "masks", ")", "==", "1", ":", "\n", "        ", "return", "[", "0", "]", "\n", "\n", "", "if", "mode", "==", "'IOU'", ":", "\n", "# Computes ious[m1, m2] = area(intersect(m1, m2)) / area(union(m1, m2))", "\n", "        ", "all_not_crowds", "=", "[", "False", "]", "*", "len", "(", "masks", ")", "\n", "ious", "=", "mask_util", ".", "iou", "(", "masks", ",", "masks", ",", "all_not_crowds", ")", "\n", "", "elif", "mode", "==", "'IOMA'", ":", "\n", "# Computes ious[m1, m2] = area(intersect(m1, m2)) / min(area(m1), area(m2))", "\n", "        ", "all_crowds", "=", "[", "True", "]", "*", "len", "(", "masks", ")", "\n", "# ious[m1, m2] = area(intersect(m1, m2)) / area(m2)", "\n", "ious", "=", "mask_util", ".", "iou", "(", "masks", ",", "masks", ",", "all_crowds", ")", "\n", "# ... = max(area(intersect(m1, m2)) / area(m2),", "\n", "#           area(intersect(m2, m1)) / area(m1))", "\n", "ious", "=", "np", ".", "maximum", "(", "ious", ",", "ious", ".", "transpose", "(", ")", ")", "\n", "", "elif", "mode", "==", "'CONTAINMENT'", ":", "\n", "# Computes ious[m1, m2] = area(intersect(m1, m2)) / area(m2)", "\n", "# Which measures how much m2 is contained inside m1", "\n", "        ", "all_crowds", "=", "[", "True", "]", "*", "len", "(", "masks", ")", "\n", "ious", "=", "mask_util", ".", "iou", "(", "masks", ",", "masks", ",", "all_crowds", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'Mode {} is unknown'", ".", "format", "(", "mode", ")", ")", "\n", "\n", "", "scores", "=", "dets", "[", ":", ",", "4", "]", "\n", "order", "=", "np", ".", "argsort", "(", "-", "scores", ")", "\n", "\n", "keep", "=", "[", "]", "\n", "while", "order", ".", "size", ">", "0", ":", "\n", "        ", "i", "=", "order", "[", "0", "]", "\n", "keep", ".", "append", "(", "i", ")", "\n", "ovr", "=", "ious", "[", "i", ",", "order", "[", "1", ":", "]", "]", "\n", "inds_to_keep", "=", "np", ".", "where", "(", "ovr", "<=", "thresh", ")", "[", "0", "]", "\n", "order", "=", "order", "[", "inds_to_keep", "+", "1", "]", "\n", "\n", "", "return", "keep", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.segms.rle_masks_to_boxes": [[243, 269], ["numpy.zeros", "enumerate", "len", "numpy.array", "len", "mask.sum", "segms.rle_masks_to_boxes.get_bounds"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.blob.zeros"], ["", "def", "rle_masks_to_boxes", "(", "masks", ")", ":", "\n", "    ", "\"\"\"Computes the bounding box of each mask in a list of RLE encoded masks.\"\"\"", "\n", "if", "len", "(", "masks", ")", "==", "0", ":", "\n", "        ", "return", "[", "]", "\n", "\n", "", "decoded_masks", "=", "[", "\n", "np", ".", "array", "(", "mask_util", ".", "decode", "(", "rle", ")", ",", "dtype", "=", "np", ".", "float32", ")", "for", "rle", "in", "masks", "\n", "]", "\n", "\n", "def", "get_bounds", "(", "flat_mask", ")", ":", "\n", "        ", "inds", "=", "np", ".", "where", "(", "flat_mask", ">", "0", ")", "[", "0", "]", "\n", "return", "inds", ".", "min", "(", ")", ",", "inds", ".", "max", "(", ")", "\n", "\n", "", "boxes", "=", "np", ".", "zeros", "(", "(", "len", "(", "decoded_masks", ")", ",", "4", ")", ")", "\n", "keep", "=", "[", "True", "]", "*", "len", "(", "decoded_masks", ")", "\n", "for", "i", ",", "mask", "in", "enumerate", "(", "decoded_masks", ")", ":", "\n", "        ", "if", "mask", ".", "sum", "(", ")", "==", "0", ":", "\n", "            ", "keep", "[", "i", "]", "=", "False", "\n", "continue", "\n", "", "flat_mask", "=", "mask", ".", "sum", "(", "axis", "=", "0", ")", "\n", "x0", ",", "x1", "=", "get_bounds", "(", "flat_mask", ")", "\n", "flat_mask", "=", "mask", ".", "sum", "(", "axis", "=", "1", ")", "\n", "y0", ",", "y1", "=", "get_bounds", "(", "flat_mask", ")", "\n", "boxes", "[", "i", ",", ":", "]", "=", "(", "x0", ",", "y0", ",", "x1", ",", "y1", ")", "\n", "\n", "", "return", "boxes", ",", "np", ".", "where", "(", "keep", ")", "[", "0", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.blob.im_list_to_blob": [[40, 68], ["numpy.array().max", "len", "numpy.zeros", "range", "blob.transpose.transpose", "float", "int", "int", "numpy.array", "numpy.ceil", "numpy.ceil"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.blob.zeros"], ["def", "im_list_to_blob", "(", "ims", ")", ":", "\n", "    ", "\"\"\"Convert a list of images into a network input. Assumes images were\n    prepared using prep_im_for_blob or equivalent: i.e.\n      - BGR channel order\n      - pixel means subtracted\n      - resized to the desired input size\n      - float32 numpy ndarray format\n    Output is a 4D HCHW tensor of the images concatenated along axis 0 with\n    shape.\n    \"\"\"", "\n", "max_shape", "=", "np", ".", "array", "(", "[", "im", ".", "shape", "for", "im", "in", "ims", "]", ")", ".", "max", "(", "axis", "=", "0", ")", "\n", "# Pad the image so they can be divisible by a stride", "\n", "if", "cfg", ".", "FPN", ".", "FPN_ON", ":", "\n", "        ", "stride", "=", "float", "(", "cfg", ".", "FPN", ".", "COARSEST_STRIDE", ")", "\n", "max_shape", "[", "0", "]", "=", "int", "(", "np", ".", "ceil", "(", "max_shape", "[", "0", "]", "/", "stride", ")", "*", "stride", ")", "\n", "max_shape", "[", "1", "]", "=", "int", "(", "np", ".", "ceil", "(", "max_shape", "[", "1", "]", "/", "stride", ")", "*", "stride", ")", "\n", "\n", "", "num_images", "=", "len", "(", "ims", ")", "\n", "blob", "=", "np", ".", "zeros", "(", "(", "num_images", ",", "max_shape", "[", "0", "]", ",", "max_shape", "[", "1", "]", ",", "3", ")", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "i", "in", "range", "(", "num_images", ")", ":", "\n", "        ", "im", "=", "ims", "[", "i", "]", "\n", "blob", "[", "i", ",", "0", ":", "im", ".", "shape", "[", "0", "]", ",", "0", ":", "im", ".", "shape", "[", "1", "]", ",", ":", "]", "=", "im", "\n", "# Move channels (axis 3) to axis 1", "\n", "# Axis order will become: (batch elem, channel, height, width)", "\n", "", "channel_swap", "=", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "blob", "=", "blob", ".", "transpose", "(", "channel_swap", ")", "\n", "return", "blob", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.blob.prep_im_for_blob": [[70, 96], ["cv2.resize.astype", "numpy.min", "numpy.max", "cv2.resize", "ims.append", "im_scales.append", "float", "float", "numpy.round", "float", "float"], "function", ["None"], ["", "def", "prep_im_for_blob", "(", "im", ",", "pixel_means", ",", "target_sizes", ",", "max_size", ")", ":", "\n", "    ", "\"\"\"Prepare an image for use as a network input blob. Specially:\n      - Subtract per-channel pixel mean\n      - Convert to float32\n      - Rescale to each of the specified target size (capped at max_size)\n    Returns a list of transformed images, one for each target size. Also returns\n    the scale factors that were used to compute each returned image.\n    \"\"\"", "\n", "im", "=", "im", ".", "astype", "(", "np", ".", "float32", ",", "copy", "=", "False", ")", "\n", "im", "-=", "pixel_means", "\n", "im_shape", "=", "im", ".", "shape", "\n", "im_size_min", "=", "np", ".", "min", "(", "im_shape", "[", "0", ":", "2", "]", ")", "\n", "im_size_max", "=", "np", ".", "max", "(", "im_shape", "[", "0", ":", "2", "]", ")", "\n", "\n", "ims", "=", "[", "]", "\n", "im_scales", "=", "[", "]", "\n", "for", "target_size", "in", "target_sizes", ":", "\n", "        ", "im_scale", "=", "float", "(", "target_size", ")", "/", "float", "(", "im_size_min", ")", "\n", "# Prevent the biggest axis from being more than max_size", "\n", "if", "np", ".", "round", "(", "im_scale", "*", "im_size_max", ")", ">", "max_size", ":", "\n", "            ", "im_scale", "=", "float", "(", "max_size", ")", "/", "float", "(", "im_size_max", ")", "\n", "", "im", "=", "cv2", ".", "resize", "(", "im", ",", "None", ",", "None", ",", "fx", "=", "im_scale", ",", "fy", "=", "im_scale", ",", "\n", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "ims", ".", "append", "(", "im", ")", "\n", "im_scales", ".", "append", "(", "im_scale", ")", "\n", "", "return", "ims", ",", "im_scales", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.blob.zeros": [[98, 103], ["numpy.zeros"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.blob.zeros"], ["", "def", "zeros", "(", "shape", ",", "int32", "=", "False", ")", ":", "\n", "    ", "\"\"\"Return a blob of all zeros of the given shape with the correct float or\n    int data type.\n    \"\"\"", "\n", "return", "np", ".", "zeros", "(", "shape", ",", "dtype", "=", "np", ".", "int32", "if", "int32", "else", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.blob.ones": [[105, 110], ["numpy.ones"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.blob.ones"], ["", "def", "ones", "(", "shape", ",", "int32", "=", "False", ")", ":", "\n", "    ", "\"\"\"Return a blob of all ones of the given shape with the correct float or\n    int data type.\n    \"\"\"", "\n", "return", "np", ".", "ones", "(", "shape", ",", "dtype", "=", "np", ".", "int32", "if", "int32", "else", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.blob.py_op_copy_blob": [[112, 129], ["blob_out.init", "blob_out.reshape", "list"], "function", ["None"], ["", "def", "py_op_copy_blob", "(", "blob_in", ",", "blob_out", ")", ":", "\n", "    ", "\"\"\"Copy a numpy ndarray given as blob_in into the Caffe2 CPUTensor blob\n    given as blob_out. Supports float32 and int32 blob data types. This function\n    is intended for copying numpy data into a Caffe2 blob in PythonOps.\n    \"\"\"", "\n", "# Some awkward voodoo required by Caffe2 to support int32 blobs", "\n", "needs_int32_init", "=", "False", "\n", "try", ":", "\n", "        ", "_", "=", "blob", ".", "data", ".", "dtype", "# noqa", "\n", "", "except", "Exception", ":", "\n", "        ", "needs_int32_init", "=", "blob_in", ".", "dtype", "==", "np", ".", "int32", "\n", "", "if", "needs_int32_init", ":", "\n", "# init can only take a list (failed on tuple)", "\n", "        ", "blob_out", ".", "init", "(", "list", "(", "blob_in", ".", "shape", ")", ",", "caffe2_pb2", ".", "TensorProto", ".", "INT32", ")", "\n", "", "else", ":", "\n", "        ", "blob_out", ".", "reshape", "(", "blob_in", ".", "shape", ")", "\n", "", "blob_out", ".", "data", "[", "...", "]", "=", "blob_in", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.blob.get_loss_gradients": [[131, 138], ["model.net.ConstantFill", "str", "str"], "function", ["None"], ["", "def", "get_loss_gradients", "(", "model", ",", "loss_blobs", ")", ":", "\n", "    ", "\"\"\"Generate a gradient of 1 for each loss specified in 'loss_blobs'\"\"\"", "\n", "loss_gradients", "=", "{", "}", "\n", "for", "b", "in", "loss_blobs", ":", "\n", "        ", "loss_grad", "=", "model", ".", "net", ".", "ConstantFill", "(", "b", ",", "[", "b", "+", "'_grad'", "]", ",", "value", "=", "1.0", ")", "\n", "loss_gradients", "[", "str", "(", "b", ")", "]", "=", "str", "(", "loss_grad", ")", "\n", "", "return", "loss_gradients", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.blob.serialize": [[140, 145], ["numpy.fromstring().astype", "numpy.fromstring", "cPickle.dumps"], "function", ["None"], ["", "def", "serialize", "(", "obj", ")", ":", "\n", "    ", "\"\"\"Serialize a Python object using pickle and encode it as an array of\n    float32 values so that it can be feed into the workspace. See deserialize().\n    \"\"\"", "\n", "return", "np", ".", "fromstring", "(", "pickle", ".", "dumps", "(", "obj", ")", ",", "dtype", "=", "np", ".", "uint8", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.blob.deserialize": [[147, 152], ["cPickle.loads", "arr.astype().tobytes", "arr.astype"], "function", ["None"], ["", "def", "deserialize", "(", "arr", ")", ":", "\n", "    ", "\"\"\"Unserialize a Python object from an array of float32 values fetched from\n    a workspace. See serialize().\n    \"\"\"", "\n", "return", "pickle", ".", "loads", "(", "arr", ".", "astype", "(", "np", ".", "uint8", ")", ".", "tobytes", "(", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.image.aspect_ratio_rel": [[27, 33], ["int", "cv2.resize", "round"], "function", ["None"], ["def", "aspect_ratio_rel", "(", "im", ",", "aspect_ratio", ")", ":", "\n", "    ", "\"\"\"Performs width-relative aspect ratio transformation.\"\"\"", "\n", "im_h", ",", "im_w", "=", "im", ".", "shape", "[", ":", "2", "]", "\n", "im_ar_w", "=", "int", "(", "round", "(", "aspect_ratio", "*", "im_w", ")", ")", "\n", "im_ar", "=", "cv2", ".", "resize", "(", "im", ",", "dsize", "=", "(", "im_ar_w", ",", "im_h", ")", ")", "\n", "return", "im_ar", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.image.aspect_ratio_abs": [[35, 46], ["numpy.sqrt", "numpy.sqrt", "numpy.isclose", "cv2.resize", "int", "int"], "function", ["None"], ["", "def", "aspect_ratio_abs", "(", "im", ",", "aspect_ratio", ")", ":", "\n", "    ", "\"\"\"Performs absolute aspect ratio transformation.\"\"\"", "\n", "im_h", ",", "im_w", "=", "im", ".", "shape", "[", ":", "2", "]", "\n", "im_area", "=", "im_h", "*", "im_w", "\n", "\n", "im_ar_w", "=", "np", ".", "sqrt", "(", "im_area", "*", "aspect_ratio", ")", "\n", "im_ar_h", "=", "np", ".", "sqrt", "(", "im_area", "/", "aspect_ratio", ")", "\n", "assert", "np", ".", "isclose", "(", "im_ar_w", "/", "im_ar_h", ",", "aspect_ratio", ")", "\n", "\n", "im_ar", "=", "cv2", ".", "resize", "(", "im", ",", "dsize", "=", "(", "int", "(", "im_ar_w", ")", ",", "int", "(", "im_ar_h", ")", ")", ")", "\n", "return", "im_ar", "\n", "", ""]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.env.get_runtime_dir": [[28, 31], ["None"], "function", ["None"], ["def", "get_runtime_dir", "(", ")", ":", "\n", "    ", "\"\"\"Retrieve the path to the runtime directory.\"\"\"", "\n", "return", "sys", ".", "path", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.env.get_py_bin_ext": [[33, 36], ["None"], "function", ["None"], ["", "def", "get_py_bin_ext", "(", ")", ":", "\n", "    ", "\"\"\"Retrieve python binary extension.\"\"\"", "\n", "return", "'.py'", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.env.set_up_matplotlib": [[38, 43], ["matplotlib.use"], "function", ["None"], ["", "def", "set_up_matplotlib", "(", ")", ":", "\n", "    ", "\"\"\"Set matplotlib up.\"\"\"", "\n", "import", "matplotlib", "\n", "# Use a non-interactive backend", "\n", "matplotlib", ".", "use", "(", "'Agg'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.env.exit_on_error": [[45, 48], ["sys.exit"], "function", ["None"], ["", "def", "exit_on_error", "(", ")", ":", "\n", "    ", "\"\"\"Exit from a detectron tool when there's an error.\"\"\"", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.env.import_nccl_ops": [[50, 55], ["None"], "function", ["None"], ["", "def", "import_nccl_ops", "(", ")", ":", "\n", "    ", "\"\"\"Import NCCL ops.\"\"\"", "\n", "# There is no need to load NCCL ops since the", "\n", "# NCCL dependency is built into the Caffe2 gpu lib", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.env.get_caffe2_dir": [[57, 64], ["imp.find_module", "os.path.exists", "os.path.dirname", "os.path.abspath"], "function", ["None"], ["", "def", "get_caffe2_dir", "(", ")", ":", "\n", "    ", "\"\"\"Retrieve Caffe2 dir path.\"\"\"", "\n", "_fp", ",", "c2_path", ",", "_desc", "=", "imp", ".", "find_module", "(", "'caffe2'", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "c2_path", ")", ",", "'Caffe2 not found at \\'{}\\''", ".", "format", "(", "c2_path", ")", "\n", "c2_dir", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "c2_path", ")", ")", "\n", "return", "c2_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.env.get_detectron_ops_lib": [[66, 75], ["env.get_caffe2_dir", "os.path.join", "os.path.exists"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.env.get_caffe2_dir"], ["", "def", "get_detectron_ops_lib", "(", ")", ":", "\n", "    ", "\"\"\"Retrieve Detectron ops library.\"\"\"", "\n", "c2_dir", "=", "get_caffe2_dir", "(", ")", "\n", "detectron_ops_lib", "=", "os", ".", "path", ".", "join", "(", "\n", "c2_dir", ",", "'lib/libcaffe2_detectron_ops_gpu.so'", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "detectron_ops_lib", ")", ",", "(", "'Detectron ops lib not found at \\'{}\\'; make sure that your Caffe2 '", "\n", "'version includes Detectron module'", ")", ".", "format", "(", "detectron_ops_lib", ")", "\n", "return", "detectron_ops_lib", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.env.get_custom_ops_lib": [[77, 85], ["os.path.split", "os.path.join", "os.path.exists", "os.path.dirname"], "function", ["None"], ["", "def", "get_custom_ops_lib", "(", ")", ":", "\n", "    ", "\"\"\"Retrieve custom ops library.\"\"\"", "\n", "lib_dir", ",", "_utils", "=", "os", ".", "path", ".", "split", "(", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ")", "\n", "custom_ops_lib", "=", "os", ".", "path", ".", "join", "(", "\n", "lib_dir", ",", "'build/libcaffe2_detectron_custom_ops_gpu.so'", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "custom_ops_lib", ")", ",", "'Custom ops lib not found at \\'{}\\''", ".", "format", "(", "custom_ops_lib", ")", "\n", "return", "custom_ops_lib", "\n", "", ""]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.boxes.boxes_area": [[57, 64], ["numpy.all"], "function", ["None"], ["def", "boxes_area", "(", "boxes", ")", ":", "\n", "    ", "\"\"\"Compute the area of an array of boxes.\"\"\"", "\n", "w", "=", "(", "boxes", "[", ":", ",", "2", "]", "-", "boxes", "[", ":", ",", "0", "]", "+", "1", ")", "\n", "h", "=", "(", "boxes", "[", ":", ",", "3", "]", "-", "boxes", "[", ":", ",", "1", "]", "+", "1", ")", "\n", "areas", "=", "w", "*", "h", "\n", "assert", "np", ".", "all", "(", "areas", ">=", "0", ")", ",", "'Negative areas founds'", "\n", "return", "areas", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.boxes.unique_boxes": [[66, 72], ["numpy.array", "numpy.round().dot", "numpy.unique", "numpy.sort", "numpy.round"], "function", ["None"], ["", "def", "unique_boxes", "(", "boxes", ",", "scale", "=", "1.0", ")", ":", "\n", "    ", "\"\"\"Return indices of unique boxes.\"\"\"", "\n", "v", "=", "np", ".", "array", "(", "[", "1", ",", "1e3", ",", "1e6", ",", "1e9", "]", ")", "\n", "hashes", "=", "np", ".", "round", "(", "boxes", "*", "scale", ")", ".", "dot", "(", "v", ")", "\n", "_", ",", "index", "=", "np", ".", "unique", "(", "hashes", ",", "return_index", "=", "True", ")", "\n", "return", "np", ".", "sort", "(", "index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.boxes.xywh_to_xyxy": [[74, 90], ["isinstance", "isinstance", "len", "numpy.maximum", "numpy.maximum", "numpy.hstack", "TypeError", "numpy.maximum"], "function", ["None"], ["", "def", "xywh_to_xyxy", "(", "xywh", ")", ":", "\n", "    ", "\"\"\"Convert [x1 y1 w h] box format to [x1 y1 x2 y2] format.\"\"\"", "\n", "if", "isinstance", "(", "xywh", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "# Single box given as a list of coordinates", "\n", "        ", "assert", "len", "(", "xywh", ")", "==", "4", "\n", "x1", ",", "y1", "=", "xywh", "[", "0", "]", ",", "xywh", "[", "1", "]", "\n", "x2", "=", "x1", "+", "np", ".", "maximum", "(", "0.", ",", "xywh", "[", "2", "]", "-", "1.", ")", "\n", "y2", "=", "y1", "+", "np", ".", "maximum", "(", "0.", ",", "xywh", "[", "3", "]", "-", "1.", ")", "\n", "return", "(", "x1", ",", "y1", ",", "x2", ",", "y2", ")", "\n", "", "elif", "isinstance", "(", "xywh", ",", "np", ".", "ndarray", ")", ":", "\n", "# Multiple boxes given as a 2D ndarray", "\n", "        ", "return", "np", ".", "hstack", "(", "\n", "(", "xywh", "[", ":", ",", "0", ":", "2", "]", ",", "xywh", "[", ":", ",", "0", ":", "2", "]", "+", "np", ".", "maximum", "(", "0", ",", "xywh", "[", ":", ",", "2", ":", "4", "]", "-", "1", ")", ")", "\n", ")", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "'Argument xywh must be a list, tuple, or numpy array.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.boxes.xyxy_to_xywh": [[92, 106], ["isinstance", "isinstance", "len", "numpy.hstack", "TypeError"], "function", ["None"], ["", "", "def", "xyxy_to_xywh", "(", "xyxy", ")", ":", "\n", "    ", "\"\"\"Convert [x1 y1 x2 y2] box format to [x1 y1 w h] format.\"\"\"", "\n", "if", "isinstance", "(", "xyxy", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "# Single box given as a list of coordinates", "\n", "        ", "assert", "len", "(", "xyxy", ")", "==", "4", "\n", "x1", ",", "y1", "=", "xyxy", "[", "0", "]", ",", "xyxy", "[", "1", "]", "\n", "w", "=", "xyxy", "[", "2", "]", "-", "x1", "+", "1", "\n", "h", "=", "xyxy", "[", "3", "]", "-", "y1", "+", "1", "\n", "return", "(", "x1", ",", "y1", ",", "w", ",", "h", ")", "\n", "", "elif", "isinstance", "(", "xyxy", ",", "np", ".", "ndarray", ")", ":", "\n", "# Multiple boxes given as a 2D ndarray", "\n", "        ", "return", "np", ".", "hstack", "(", "(", "xyxy", "[", ":", ",", "0", ":", "2", "]", ",", "xyxy", "[", ":", ",", "2", ":", "4", "]", "-", "xyxy", "[", ":", ",", "0", ":", "2", "]", "+", "1", ")", ")", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "'Argument xyxy must be a list, tuple, or numpy array.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.boxes.filter_small_boxes": [[108, 114], ["numpy.where"], "function", ["None"], ["", "", "def", "filter_small_boxes", "(", "boxes", ",", "min_size", ")", ":", "\n", "    ", "\"\"\"Keep boxes with width and height both greater than min_size.\"\"\"", "\n", "w", "=", "boxes", "[", ":", ",", "2", "]", "-", "boxes", "[", ":", ",", "0", "]", "+", "1", "\n", "h", "=", "boxes", "[", ":", ",", "3", "]", "-", "boxes", "[", ":", ",", "1", "]", "+", "1", "\n", "keep", "=", "np", ".", "where", "(", "(", "w", ">", "min_size", ")", "&", "(", "h", ">", "min_size", ")", ")", "[", "0", "]", "\n", "return", "keep", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.boxes.clip_boxes_to_image": [[116, 121], ["numpy.minimum", "numpy.minimum", "numpy.maximum", "numpy.maximum"], "function", ["None"], ["", "def", "clip_boxes_to_image", "(", "boxes", ",", "height", ",", "width", ")", ":", "\n", "    ", "\"\"\"Clip an array of boxes to an image with the given height and width.\"\"\"", "\n", "boxes", "[", ":", ",", "[", "0", ",", "2", "]", "]", "=", "np", ".", "minimum", "(", "width", "-", "1.", ",", "np", ".", "maximum", "(", "0.", ",", "boxes", "[", ":", ",", "[", "0", ",", "2", "]", "]", ")", ")", "\n", "boxes", "[", ":", ",", "[", "1", ",", "3", "]", "]", "=", "np", ".", "minimum", "(", "height", "-", "1.", ",", "np", ".", "maximum", "(", "0.", ",", "boxes", "[", ":", ",", "[", "1", ",", "3", "]", "]", ")", ")", "\n", "return", "boxes", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.boxes.clip_xyxy_to_image": [[123, 130], ["numpy.minimum", "numpy.minimum", "numpy.minimum", "numpy.minimum", "numpy.maximum", "numpy.maximum", "numpy.maximum", "numpy.maximum"], "function", ["None"], ["", "def", "clip_xyxy_to_image", "(", "x1", ",", "y1", ",", "x2", ",", "y2", ",", "height", ",", "width", ")", ":", "\n", "    ", "\"\"\"Clip coordinates to an image with the given height and width.\"\"\"", "\n", "x1", "=", "np", ".", "minimum", "(", "width", "-", "1.", ",", "np", ".", "maximum", "(", "0.", ",", "x1", ")", ")", "\n", "y1", "=", "np", ".", "minimum", "(", "height", "-", "1.", ",", "np", ".", "maximum", "(", "0.", ",", "y1", ")", ")", "\n", "x2", "=", "np", ".", "minimum", "(", "width", "-", "1.", ",", "np", ".", "maximum", "(", "0.", ",", "x2", ")", ")", "\n", "y2", "=", "np", ".", "minimum", "(", "height", "-", "1.", ",", "np", ".", "maximum", "(", "0.", ",", "y2", ")", ")", "\n", "return", "x1", ",", "y1", ",", "x2", ",", "y2", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.boxes.clip_tiled_boxes": [[132, 148], ["numpy.maximum", "numpy.maximum", "numpy.maximum", "numpy.maximum", "numpy.minimum", "numpy.minimum", "numpy.minimum", "numpy.minimum"], "function", ["None"], ["", "def", "clip_tiled_boxes", "(", "boxes", ",", "im_shape", ")", ":", "\n", "    ", "\"\"\"Clip boxes to image boundaries. im_shape is [height, width] and boxes\n    has shape (N, 4 * num_tiled_boxes).\"\"\"", "\n", "assert", "boxes", ".", "shape", "[", "1", "]", "%", "4", "==", "0", ",", "'boxes.shape[1] is {:d}, but must be divisible by 4.'", ".", "format", "(", "\n", "boxes", ".", "shape", "[", "1", "]", "\n", ")", "\n", "# x1 >= 0", "\n", "boxes", "[", ":", ",", "0", ":", ":", "4", "]", "=", "np", ".", "maximum", "(", "np", ".", "minimum", "(", "boxes", "[", ":", ",", "0", ":", ":", "4", "]", ",", "im_shape", "[", "1", "]", "-", "1", ")", ",", "0", ")", "\n", "# y1 >= 0", "\n", "boxes", "[", ":", ",", "1", ":", ":", "4", "]", "=", "np", ".", "maximum", "(", "np", ".", "minimum", "(", "boxes", "[", ":", ",", "1", ":", ":", "4", "]", ",", "im_shape", "[", "0", "]", "-", "1", ")", ",", "0", ")", "\n", "# x2 < im_shape[1]", "\n", "boxes", "[", ":", ",", "2", ":", ":", "4", "]", "=", "np", ".", "maximum", "(", "np", ".", "minimum", "(", "boxes", "[", ":", ",", "2", ":", ":", "4", "]", ",", "im_shape", "[", "1", "]", "-", "1", ")", ",", "0", ")", "\n", "# y2 < im_shape[0]", "\n", "boxes", "[", ":", ",", "3", ":", ":", "4", "]", "=", "np", ".", "maximum", "(", "np", ".", "minimum", "(", "boxes", "[", ":", ",", "3", ":", ":", "4", "]", ",", "im_shape", "[", "0", "]", "-", "1", ")", ",", "0", ")", "\n", "return", "boxes", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.boxes.bbox_transform": [[150, 191], ["boxes.astype.astype", "numpy.minimum", "numpy.minimum", "numpy.zeros", "numpy.zeros", "numpy.exp", "numpy.exp"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.blob.zeros", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.blob.zeros"], ["", "def", "bbox_transform", "(", "boxes", ",", "deltas", ",", "weights", "=", "(", "1.0", ",", "1.0", ",", "1.0", ",", "1.0", ")", ")", ":", "\n", "    ", "\"\"\"Forward transform that maps proposal boxes to predicted ground-truth\n    boxes using bounding-box regression deltas. See bbox_transform_inv for a\n    description of the weights argument.\n    \"\"\"", "\n", "if", "boxes", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "        ", "return", "np", ".", "zeros", "(", "(", "0", ",", "deltas", ".", "shape", "[", "1", "]", ")", ",", "dtype", "=", "deltas", ".", "dtype", ")", "\n", "\n", "", "boxes", "=", "boxes", ".", "astype", "(", "deltas", ".", "dtype", ",", "copy", "=", "False", ")", "\n", "\n", "widths", "=", "boxes", "[", ":", ",", "2", "]", "-", "boxes", "[", ":", ",", "0", "]", "+", "1.0", "\n", "heights", "=", "boxes", "[", ":", ",", "3", "]", "-", "boxes", "[", ":", ",", "1", "]", "+", "1.0", "\n", "ctr_x", "=", "boxes", "[", ":", ",", "0", "]", "+", "0.5", "*", "widths", "\n", "ctr_y", "=", "boxes", "[", ":", ",", "1", "]", "+", "0.5", "*", "heights", "\n", "\n", "wx", ",", "wy", ",", "ww", ",", "wh", "=", "weights", "\n", "dx", "=", "deltas", "[", ":", ",", "0", ":", ":", "4", "]", "/", "wx", "\n", "dy", "=", "deltas", "[", ":", ",", "1", ":", ":", "4", "]", "/", "wy", "\n", "dw", "=", "deltas", "[", ":", ",", "2", ":", ":", "4", "]", "/", "ww", "\n", "dh", "=", "deltas", "[", ":", ",", "3", ":", ":", "4", "]", "/", "wh", "\n", "\n", "# Prevent sending too large values into np.exp()", "\n", "dw", "=", "np", ".", "minimum", "(", "dw", ",", "cfg", ".", "BBOX_XFORM_CLIP", ")", "\n", "dh", "=", "np", ".", "minimum", "(", "dh", ",", "cfg", ".", "BBOX_XFORM_CLIP", ")", "\n", "\n", "pred_ctr_x", "=", "dx", "*", "widths", "[", ":", ",", "np", ".", "newaxis", "]", "+", "ctr_x", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "pred_ctr_y", "=", "dy", "*", "heights", "[", ":", ",", "np", ".", "newaxis", "]", "+", "ctr_y", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "pred_w", "=", "np", ".", "exp", "(", "dw", ")", "*", "widths", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "pred_h", "=", "np", ".", "exp", "(", "dh", ")", "*", "heights", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "\n", "pred_boxes", "=", "np", ".", "zeros", "(", "deltas", ".", "shape", ",", "dtype", "=", "deltas", ".", "dtype", ")", "\n", "# x1", "\n", "pred_boxes", "[", ":", ",", "0", ":", ":", "4", "]", "=", "pred_ctr_x", "-", "0.5", "*", "pred_w", "\n", "# y1", "\n", "pred_boxes", "[", ":", ",", "1", ":", ":", "4", "]", "=", "pred_ctr_y", "-", "0.5", "*", "pred_h", "\n", "# x2 (note: \"- 1\" is correct; don't be fooled by the asymmetry)", "\n", "pred_boxes", "[", ":", ",", "2", ":", ":", "4", "]", "=", "pred_ctr_x", "+", "0.5", "*", "pred_w", "-", "1", "\n", "# y2 (note: \"- 1\" is correct; don't be fooled by the asymmetry)", "\n", "pred_boxes", "[", ":", ",", "3", ":", ":", "4", "]", "=", "pred_ctr_y", "+", "0.5", "*", "pred_h", "-", "1", "\n", "\n", "return", "pred_boxes", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.boxes.bbox_transform_inv": [[193, 225], ["numpy.vstack().transpose", "numpy.log", "numpy.log", "numpy.vstack"], "function", ["None"], ["", "def", "bbox_transform_inv", "(", "boxes", ",", "gt_boxes", ",", "weights", "=", "(", "1.0", ",", "1.0", ",", "1.0", ",", "1.0", ")", ")", ":", "\n", "    ", "\"\"\"Inverse transform that computes target bounding-box regression deltas\n    given proposal boxes and ground-truth boxes. The weights argument should be\n    a 4-tuple of multiplicative weights that are applied to the regression\n    target.\n\n    In older versions of this code (and in py-faster-rcnn), the weights were set\n    such that the regression deltas would have unit standard deviation on the\n    training dataset. Presently, rather than computing these statistics exactly,\n    we use a fixed set of weights (10., 10., 5., 5.) by default. These are\n    approximately the weights one would get from COCO using the previous unit\n    stdev heuristic.\n    \"\"\"", "\n", "ex_widths", "=", "boxes", "[", ":", ",", "2", "]", "-", "boxes", "[", ":", ",", "0", "]", "+", "1.0", "\n", "ex_heights", "=", "boxes", "[", ":", ",", "3", "]", "-", "boxes", "[", ":", ",", "1", "]", "+", "1.0", "\n", "ex_ctr_x", "=", "boxes", "[", ":", ",", "0", "]", "+", "0.5", "*", "ex_widths", "\n", "ex_ctr_y", "=", "boxes", "[", ":", ",", "1", "]", "+", "0.5", "*", "ex_heights", "\n", "\n", "gt_widths", "=", "gt_boxes", "[", ":", ",", "2", "]", "-", "gt_boxes", "[", ":", ",", "0", "]", "+", "1.0", "\n", "gt_heights", "=", "gt_boxes", "[", ":", ",", "3", "]", "-", "gt_boxes", "[", ":", ",", "1", "]", "+", "1.0", "\n", "gt_ctr_x", "=", "gt_boxes", "[", ":", ",", "0", "]", "+", "0.5", "*", "gt_widths", "\n", "gt_ctr_y", "=", "gt_boxes", "[", ":", ",", "1", "]", "+", "0.5", "*", "gt_heights", "\n", "\n", "wx", ",", "wy", ",", "ww", ",", "wh", "=", "weights", "\n", "targets_dx", "=", "wx", "*", "(", "gt_ctr_x", "-", "ex_ctr_x", ")", "/", "ex_widths", "\n", "targets_dy", "=", "wy", "*", "(", "gt_ctr_y", "-", "ex_ctr_y", ")", "/", "ex_heights", "\n", "targets_dw", "=", "ww", "*", "np", ".", "log", "(", "gt_widths", "/", "ex_widths", ")", "\n", "targets_dh", "=", "wh", "*", "np", ".", "log", "(", "gt_heights", "/", "ex_heights", ")", "\n", "\n", "targets", "=", "np", ".", "vstack", "(", "(", "targets_dx", ",", "targets_dy", ",", "targets_dw", ",", "\n", "targets_dh", ")", ")", ".", "transpose", "(", ")", "\n", "return", "targets", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.boxes.expand_boxes": [[227, 244], ["numpy.zeros"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.blob.zeros"], ["", "def", "expand_boxes", "(", "boxes", ",", "scale", ")", ":", "\n", "    ", "\"\"\"Expand an array of boxes by a given scale.\"\"\"", "\n", "w_half", "=", "(", "boxes", "[", ":", ",", "2", "]", "-", "boxes", "[", ":", ",", "0", "]", ")", "*", ".5", "\n", "h_half", "=", "(", "boxes", "[", ":", ",", "3", "]", "-", "boxes", "[", ":", ",", "1", "]", ")", "*", ".5", "\n", "x_c", "=", "(", "boxes", "[", ":", ",", "2", "]", "+", "boxes", "[", ":", ",", "0", "]", ")", "*", ".5", "\n", "y_c", "=", "(", "boxes", "[", ":", ",", "3", "]", "+", "boxes", "[", ":", ",", "1", "]", ")", "*", ".5", "\n", "\n", "w_half", "*=", "scale", "\n", "h_half", "*=", "scale", "\n", "\n", "boxes_exp", "=", "np", ".", "zeros", "(", "boxes", ".", "shape", ")", "\n", "boxes_exp", "[", ":", ",", "0", "]", "=", "x_c", "-", "w_half", "\n", "boxes_exp", "[", ":", ",", "2", "]", "=", "x_c", "+", "w_half", "\n", "boxes_exp", "[", ":", ",", "1", "]", "=", "y_c", "-", "h_half", "\n", "boxes_exp", "[", ":", ",", "3", "]", "=", "y_c", "+", "h_half", "\n", "\n", "return", "boxes_exp", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.boxes.flip_boxes": [[246, 252], ["boxes.copy"], "function", ["None"], ["", "def", "flip_boxes", "(", "boxes", ",", "im_width", ")", ":", "\n", "    ", "\"\"\"Flip boxes horizontally.\"\"\"", "\n", "boxes_flipped", "=", "boxes", ".", "copy", "(", ")", "\n", "boxes_flipped", "[", ":", ",", "0", ":", ":", "4", "]", "=", "im_width", "-", "boxes", "[", ":", ",", "2", ":", ":", "4", "]", "-", "1", "\n", "boxes_flipped", "[", ":", ",", "2", ":", ":", "4", "]", "=", "im_width", "-", "boxes", "[", ":", ",", "0", ":", ":", "4", "]", "-", "1", "\n", "return", "boxes_flipped", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.boxes.aspect_ratio": [[254, 260], ["boxes.copy"], "function", ["None"], ["", "def", "aspect_ratio", "(", "boxes", ",", "aspect_ratio", ")", ":", "\n", "    ", "\"\"\"Perform width-relative aspect ratio transformation.\"\"\"", "\n", "boxes_ar", "=", "boxes", ".", "copy", "(", ")", "\n", "boxes_ar", "[", ":", ",", "0", ":", ":", "4", "]", "=", "aspect_ratio", "*", "boxes", "[", ":", ",", "0", ":", ":", "4", "]", "\n", "boxes_ar", "[", ":", ",", "2", ":", ":", "4", "]", "=", "aspect_ratio", "*", "boxes", "[", ":", ",", "2", ":", ":", "4", "]", "\n", "return", "boxes_ar", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.boxes.box_voting": [[262, 312], ["top_dets.copy", "bbox_overlaps", "range", "numpy.average", "numpy.where", "numpy.vstack", "numpy.max", "numpy.log", "numpy.exp", "P_temp[].mean", "numpy.sum", "ws.mean", "numpy.average", "numpy.mean", "NotImplementedError", "ws.sum", "float", "len"], "function", ["None"], ["", "def", "box_voting", "(", "top_dets", ",", "all_dets", ",", "thresh", ",", "scoring_method", "=", "'ID'", ",", "beta", "=", "1.0", ")", ":", "\n", "    ", "\"\"\"Apply bounding-box voting to refine `top_dets` by voting with `all_dets`.\n    See: https://arxiv.org/abs/1505.01749. Optional score averaging (not in the\n    referenced  paper) can be applied by setting `scoring_method` appropriately.\n    \"\"\"", "\n", "# top_dets is [N, 5] each row is [x1 y1 x2 y2, sore]", "\n", "# all_dets is [N, 5] each row is [x1 y1 x2 y2, sore]", "\n", "top_dets_out", "=", "top_dets", ".", "copy", "(", ")", "\n", "top_boxes", "=", "top_dets", "[", ":", ",", ":", "4", "]", "\n", "all_boxes", "=", "all_dets", "[", ":", ",", ":", "4", "]", "\n", "all_scores", "=", "all_dets", "[", ":", ",", "4", "]", "\n", "top_to_all_overlaps", "=", "bbox_overlaps", "(", "top_boxes", ",", "all_boxes", ")", "\n", "for", "k", "in", "range", "(", "top_dets_out", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "inds_to_vote", "=", "np", ".", "where", "(", "top_to_all_overlaps", "[", "k", "]", ">=", "thresh", ")", "[", "0", "]", "\n", "boxes_to_vote", "=", "all_boxes", "[", "inds_to_vote", ",", ":", "]", "\n", "ws", "=", "all_scores", "[", "inds_to_vote", "]", "\n", "top_dets_out", "[", "k", ",", ":", "4", "]", "=", "np", ".", "average", "(", "boxes_to_vote", ",", "axis", "=", "0", ",", "weights", "=", "ws", ")", "\n", "if", "scoring_method", "==", "'ID'", ":", "\n", "# Identity, nothing to do", "\n", "            ", "pass", "\n", "", "elif", "scoring_method", "==", "'TEMP_AVG'", ":", "\n", "# Average probabilities (considered as P(detected class) vs.", "\n", "# P(not the detected class)) after smoothing with a temperature", "\n", "# hyperparameter.", "\n", "            ", "P", "=", "np", ".", "vstack", "(", "(", "ws", ",", "1.0", "-", "ws", ")", ")", "\n", "P_max", "=", "np", ".", "max", "(", "P", ",", "axis", "=", "0", ")", "\n", "X", "=", "np", ".", "log", "(", "P", "/", "P_max", ")", "\n", "X_exp", "=", "np", ".", "exp", "(", "X", "/", "beta", ")", "\n", "P_temp", "=", "X_exp", "/", "np", ".", "sum", "(", "X_exp", ",", "axis", "=", "0", ")", "\n", "P_avg", "=", "P_temp", "[", "0", "]", ".", "mean", "(", ")", "\n", "top_dets_out", "[", "k", ",", "4", "]", "=", "P_avg", "\n", "", "elif", "scoring_method", "==", "'AVG'", ":", "\n", "# Combine new probs from overlapping boxes", "\n", "            ", "top_dets_out", "[", "k", ",", "4", "]", "=", "ws", ".", "mean", "(", ")", "\n", "", "elif", "scoring_method", "==", "'IOU_AVG'", ":", "\n", "            ", "P", "=", "ws", "\n", "ws", "=", "top_to_all_overlaps", "[", "k", ",", "inds_to_vote", "]", "\n", "P_avg", "=", "np", ".", "average", "(", "P", ",", "weights", "=", "ws", ")", "\n", "top_dets_out", "[", "k", ",", "4", "]", "=", "P_avg", "\n", "", "elif", "scoring_method", "==", "'GENERALIZED_AVG'", ":", "\n", "            ", "P_avg", "=", "np", ".", "mean", "(", "ws", "**", "beta", ")", "**", "(", "1.0", "/", "beta", ")", "\n", "top_dets_out", "[", "k", ",", "4", "]", "=", "P_avg", "\n", "", "elif", "scoring_method", "==", "'QUASI_SUM'", ":", "\n", "            ", "top_dets_out", "[", "k", ",", "4", "]", "=", "ws", ".", "sum", "(", ")", "/", "float", "(", "len", "(", "ws", ")", ")", "**", "beta", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\n", "'Unknown scoring method {}'", ".", "format", "(", "scoring_method", ")", "\n", ")", "\n", "\n", "", "", "return", "top_dets_out", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.boxes.nms": [[314, 319], ["utils.nms"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.boxes.nms"], ["", "def", "nms", "(", "dets", ",", "thresh", ")", ":", "\n", "    ", "\"\"\"Apply classic DPM-style greedy NMS.\"\"\"", "\n", "if", "dets", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "        ", "return", "[", "]", "\n", "", "return", "cython_nms", ".", "nms", "(", "dets", ",", "thresh", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.boxes.soft_nms": [[321, 339], ["utils.soft_nms", "numpy.ascontiguousarray", "numpy.float32", "numpy.float32", "numpy.float32", "numpy.uint8"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.boxes.soft_nms"], ["", "def", "soft_nms", "(", "\n", "dets", ",", "sigma", "=", "0.5", ",", "overlap_thresh", "=", "0.3", ",", "score_thresh", "=", "0.001", ",", "method", "=", "'linear'", "\n", ")", ":", "\n", "    ", "\"\"\"Apply the soft NMS algorithm from https://arxiv.org/abs/1704.04503.\"\"\"", "\n", "if", "dets", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "        ", "return", "dets", ",", "[", "]", "\n", "\n", "", "methods", "=", "{", "'hard'", ":", "0", ",", "'linear'", ":", "1", ",", "'gaussian'", ":", "2", "}", "\n", "assert", "method", "in", "methods", ",", "'Unknown soft_nms method: {}'", ".", "format", "(", "method", ")", "\n", "\n", "dets", ",", "keep", "=", "cython_nms", ".", "soft_nms", "(", "\n", "np", ".", "ascontiguousarray", "(", "dets", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "np", ".", "float32", "(", "sigma", ")", ",", "\n", "np", ".", "float32", "(", "overlap_thresh", ")", ",", "\n", "np", ".", "float32", "(", "score_thresh", ")", ",", "\n", "np", ".", "uint8", "(", "methods", "[", "method", "]", ")", "\n", ")", "\n", "return", "dets", ",", "keep", "\n", "", ""]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.vis.kp_connections": [[47, 66], ["keypoints.index", "keypoints.index", "keypoints.index", "keypoints.index", "keypoints.index", "keypoints.index", "keypoints.index", "keypoints.index", "keypoints.index", "keypoints.index", "keypoints.index", "keypoints.index", "keypoints.index", "keypoints.index", "keypoints.index", "keypoints.index", "keypoints.index", "keypoints.index", "keypoints.index", "keypoints.index", "keypoints.index", "keypoints.index", "keypoints.index", "keypoints.index", "keypoints.index", "keypoints.index", "keypoints.index", "keypoints.index", "keypoints.index", "keypoints.index"], "function", ["None"], ["def", "kp_connections", "(", "keypoints", ")", ":", "\n", "    ", "kp_lines", "=", "[", "\n", "[", "keypoints", ".", "index", "(", "'left_eye'", ")", ",", "keypoints", ".", "index", "(", "'right_eye'", ")", "]", ",", "\n", "[", "keypoints", ".", "index", "(", "'left_eye'", ")", ",", "keypoints", ".", "index", "(", "'nose'", ")", "]", ",", "\n", "[", "keypoints", ".", "index", "(", "'right_eye'", ")", ",", "keypoints", ".", "index", "(", "'nose'", ")", "]", ",", "\n", "[", "keypoints", ".", "index", "(", "'right_eye'", ")", ",", "keypoints", ".", "index", "(", "'right_ear'", ")", "]", ",", "\n", "[", "keypoints", ".", "index", "(", "'left_eye'", ")", ",", "keypoints", ".", "index", "(", "'left_ear'", ")", "]", ",", "\n", "[", "keypoints", ".", "index", "(", "'right_shoulder'", ")", ",", "keypoints", ".", "index", "(", "'right_elbow'", ")", "]", ",", "\n", "[", "keypoints", ".", "index", "(", "'right_elbow'", ")", ",", "keypoints", ".", "index", "(", "'right_wrist'", ")", "]", ",", "\n", "[", "keypoints", ".", "index", "(", "'left_shoulder'", ")", ",", "keypoints", ".", "index", "(", "'left_elbow'", ")", "]", ",", "\n", "[", "keypoints", ".", "index", "(", "'left_elbow'", ")", ",", "keypoints", ".", "index", "(", "'left_wrist'", ")", "]", ",", "\n", "[", "keypoints", ".", "index", "(", "'right_hip'", ")", ",", "keypoints", ".", "index", "(", "'right_knee'", ")", "]", ",", "\n", "[", "keypoints", ".", "index", "(", "'right_knee'", ")", ",", "keypoints", ".", "index", "(", "'right_ankle'", ")", "]", ",", "\n", "[", "keypoints", ".", "index", "(", "'left_hip'", ")", ",", "keypoints", ".", "index", "(", "'left_knee'", ")", "]", ",", "\n", "[", "keypoints", ".", "index", "(", "'left_knee'", ")", ",", "keypoints", ".", "index", "(", "'left_ankle'", ")", "]", ",", "\n", "[", "keypoints", ".", "index", "(", "'right_shoulder'", ")", ",", "keypoints", ".", "index", "(", "'left_shoulder'", ")", "]", ",", "\n", "[", "keypoints", ".", "index", "(", "'right_hip'", ")", ",", "keypoints", ".", "index", "(", "'left_hip'", ")", "]", ",", "\n", "]", "\n", "return", "kp_lines", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.vis.convert_from_cls_format": [[68, 89], ["range", "len", "numpy.concatenate", "len", "len", "len"], "function", ["None"], ["", "def", "convert_from_cls_format", "(", "cls_boxes", ",", "cls_segms", ",", "cls_keyps", ")", ":", "\n", "    ", "\"\"\"Convert from the class boxes/segms/keyps format generated by the testing\n    code.\n    \"\"\"", "\n", "box_list", "=", "[", "b", "for", "b", "in", "cls_boxes", "if", "len", "(", "b", ")", ">", "0", "]", "\n", "if", "len", "(", "box_list", ")", ">", "0", ":", "\n", "        ", "boxes", "=", "np", ".", "concatenate", "(", "box_list", ")", "\n", "", "else", ":", "\n", "        ", "boxes", "=", "None", "\n", "", "if", "cls_segms", "is", "not", "None", ":", "\n", "        ", "segms", "=", "[", "s", "for", "slist", "in", "cls_segms", "for", "s", "in", "slist", "]", "\n", "", "else", ":", "\n", "        ", "segms", "=", "None", "\n", "", "if", "cls_keyps", "is", "not", "None", ":", "\n", "        ", "keyps", "=", "[", "k", "for", "klist", "in", "cls_keyps", "for", "k", "in", "klist", "]", "\n", "", "else", ":", "\n", "        ", "keyps", "=", "None", "\n", "", "classes", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "len", "(", "cls_boxes", ")", ")", ":", "\n", "        ", "classes", "+=", "[", "j", "]", "*", "len", "(", "cls_boxes", "[", "j", "]", ")", "\n", "", "return", "boxes", ",", "segms", ",", "keyps", ",", "classes", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.vis.get_class_string": [[91, 95], ["None"], "function", ["None"], ["", "def", "get_class_string", "(", "class_index", ",", "score", ",", "dataset", ")", ":", "\n", "    ", "class_text", "=", "dataset", ".", "classes", "[", "class_index", "]", "if", "dataset", "is", "not", "None", "else", "'id{:d}'", ".", "format", "(", "class_index", ")", "\n", "return", "class_text", "+", "' {:0.2f}'", ".", "format", "(", "score", ")", ".", "lstrip", "(", "'0'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.vis.vis_mask": [[97, 112], ["img.astype.astype", "numpy.nonzero", "img.astype.astype", "cv2.findContours", "cv2.drawContours", "mask.copy"], "function", ["None"], ["", "def", "vis_mask", "(", "img", ",", "mask", ",", "col", ",", "alpha", "=", "0.4", ",", "show_border", "=", "True", ",", "border_thick", "=", "1", ")", ":", "\n", "    ", "\"\"\"Visualizes a single binary mask.\"\"\"", "\n", "\n", "img", "=", "img", ".", "astype", "(", "np", ".", "float32", ")", "\n", "idx", "=", "np", ".", "nonzero", "(", "mask", ")", "\n", "\n", "img", "[", "idx", "[", "0", "]", ",", "idx", "[", "1", "]", ",", ":", "]", "*=", "1.0", "-", "alpha", "\n", "img", "[", "idx", "[", "0", "]", ",", "idx", "[", "1", "]", ",", ":", "]", "+=", "alpha", "*", "col", "\n", "\n", "if", "show_border", ":", "\n", "        ", "contours", ",", "_", "=", "cv2", ".", "findContours", "(", "\n", "mask", ".", "copy", "(", ")", ",", "cv2", ".", "RETR_CCOMP", ",", "cv2", ".", "CHAIN_APPROX_NONE", ")", "\n", "cv2", ".", "drawContours", "(", "img", ",", "contours", ",", "-", "1", ",", "_WHITE", ",", "border_thick", ",", "cv2", ".", "LINE_AA", ")", "\n", "\n", "", "return", "img", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.vis.vis_class": [[114, 129], ["cv2.getTextSize", "cv2.rectangle", "cv2.putText", "int", "int", "int", "int"], "function", ["None"], ["", "def", "vis_class", "(", "img", ",", "pos", ",", "class_str", ",", "font_scale", "=", "0.35", ")", ":", "\n", "    ", "\"\"\"Visualizes the class.\"\"\"", "\n", "x0", ",", "y0", "=", "int", "(", "pos", "[", "0", "]", ")", ",", "int", "(", "pos", "[", "1", "]", ")", "\n", "# Compute text size.", "\n", "txt", "=", "class_str", "\n", "font", "=", "cv2", ".", "FONT_HERSHEY_SIMPLEX", "\n", "(", "(", "txt_w", ",", "txt_h", ")", ",", "_", ")", "=", "cv2", ".", "getTextSize", "(", "txt", ",", "font", ",", "font_scale", ",", "1", ")", "\n", "# Place text background.", "\n", "back_tl", "=", "x0", ",", "y0", "-", "int", "(", "1.3", "*", "txt_h", ")", "\n", "back_br", "=", "x0", "+", "txt_w", ",", "y0", "\n", "cv2", ".", "rectangle", "(", "img", ",", "back_tl", ",", "back_br", ",", "_GREEN", ",", "-", "1", ")", "\n", "# Show text.", "\n", "txt_tl", "=", "x0", ",", "y0", "-", "int", "(", "0.3", "*", "txt_h", ")", "\n", "cv2", ".", "putText", "(", "img", ",", "txt", ",", "txt_tl", ",", "font", ",", "font_scale", ",", "_GRAY", ",", "lineType", "=", "cv2", ".", "LINE_AA", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.vis.vis_bbox": [[131, 138], ["cv2.rectangle", "int", "int", "int", "int"], "function", ["None"], ["", "def", "vis_bbox", "(", "img", ",", "bbox", ",", "thick", "=", "1", ")", ":", "\n", "    ", "\"\"\"Visualizes a bounding box.\"\"\"", "\n", "(", "x0", ",", "y0", ",", "w", ",", "h", ")", "=", "bbox", "\n", "x1", ",", "y1", "=", "int", "(", "x0", "+", "w", ")", ",", "int", "(", "y0", "+", "h", ")", "\n", "x0", ",", "y0", "=", "int", "(", "x0", ")", ",", "int", "(", "y0", ")", "\n", "cv2", ".", "rectangle", "(", "img", ",", "(", "x0", ",", "y0", ")", ",", "(", "x1", ",", "y1", ")", ",", "_GREEN", ",", "thickness", "=", "thick", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.vis.vis_keypoints": [[140, 199], ["utils.get_keypoints", "vis.kp_connections", "matplotlib.get_cmap", "numpy.copy", "numpy.minimum", "numpy.minimum", "dataset_keypoints.index", "range", "cv2.addWeighted", "plt.get_cmap.", "cv2.line", "cv2.line", "len", "numpy.linspace", "tuple", "tuple", "tuple", "tuple", "cv2.line", "cv2.circle", "cv2.circle", "len", "dataset_keypoints.index", "dataset_keypoints.index", "dataset_keypoints.index", "dataset_keypoints.index", "dataset_keypoints.index", "dataset_keypoints.index", "dataset_keypoints.index", "dataset_keypoints.index", "len", "len"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.keypoints.get_keypoints", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.vis.kp_connections"], ["", "def", "vis_keypoints", "(", "img", ",", "kps", ",", "kp_thresh", "=", "2", ",", "alpha", "=", "0.7", ")", ":", "\n", "    ", "\"\"\"Visualizes keypoints (adapted from vis_one_image).\n    kps has shape (4, #keypoints) where 4 rows are (x, y, logit, prob).\n    \"\"\"", "\n", "dataset_keypoints", ",", "_", "=", "keypoint_utils", ".", "get_keypoints", "(", ")", "\n", "kp_lines", "=", "kp_connections", "(", "dataset_keypoints", ")", "\n", "\n", "# Convert from plt 0-1 RGBA colors to 0-255 BGR colors for opencv.", "\n", "cmap", "=", "plt", ".", "get_cmap", "(", "'rainbow'", ")", "\n", "colors", "=", "[", "cmap", "(", "i", ")", "for", "i", "in", "np", ".", "linspace", "(", "0", ",", "1", ",", "len", "(", "kp_lines", ")", "+", "2", ")", "]", "\n", "colors", "=", "[", "(", "c", "[", "2", "]", "*", "255", ",", "c", "[", "1", "]", "*", "255", ",", "c", "[", "0", "]", "*", "255", ")", "for", "c", "in", "colors", "]", "\n", "\n", "# Perform the drawing on a copy of the image, to allow for blending.", "\n", "kp_mask", "=", "np", ".", "copy", "(", "img", ")", "\n", "\n", "# Draw mid shoulder / mid hip first for better visualization.", "\n", "mid_shoulder", "=", "(", "\n", "kps", "[", ":", "2", ",", "dataset_keypoints", ".", "index", "(", "'right_shoulder'", ")", "]", "+", "\n", "kps", "[", ":", "2", ",", "dataset_keypoints", ".", "index", "(", "'left_shoulder'", ")", "]", ")", "/", "2.0", "\n", "sc_mid_shoulder", "=", "np", ".", "minimum", "(", "\n", "kps", "[", "2", ",", "dataset_keypoints", ".", "index", "(", "'right_shoulder'", ")", "]", ",", "\n", "kps", "[", "2", ",", "dataset_keypoints", ".", "index", "(", "'left_shoulder'", ")", "]", ")", "\n", "mid_hip", "=", "(", "\n", "kps", "[", ":", "2", ",", "dataset_keypoints", ".", "index", "(", "'right_hip'", ")", "]", "+", "\n", "kps", "[", ":", "2", ",", "dataset_keypoints", ".", "index", "(", "'left_hip'", ")", "]", ")", "/", "2.0", "\n", "sc_mid_hip", "=", "np", ".", "minimum", "(", "\n", "kps", "[", "2", ",", "dataset_keypoints", ".", "index", "(", "'right_hip'", ")", "]", ",", "\n", "kps", "[", "2", ",", "dataset_keypoints", ".", "index", "(", "'left_hip'", ")", "]", ")", "\n", "nose_idx", "=", "dataset_keypoints", ".", "index", "(", "'nose'", ")", "\n", "if", "sc_mid_shoulder", ">", "kp_thresh", "and", "kps", "[", "2", ",", "nose_idx", "]", ">", "kp_thresh", ":", "\n", "        ", "cv2", ".", "line", "(", "\n", "kp_mask", ",", "tuple", "(", "mid_shoulder", ")", ",", "tuple", "(", "kps", "[", ":", "2", ",", "nose_idx", "]", ")", ",", "\n", "color", "=", "colors", "[", "len", "(", "kp_lines", ")", "]", ",", "thickness", "=", "2", ",", "lineType", "=", "cv2", ".", "LINE_AA", ")", "\n", "", "if", "sc_mid_shoulder", ">", "kp_thresh", "and", "sc_mid_hip", ">", "kp_thresh", ":", "\n", "        ", "cv2", ".", "line", "(", "\n", "kp_mask", ",", "tuple", "(", "mid_shoulder", ")", ",", "tuple", "(", "mid_hip", ")", ",", "\n", "color", "=", "colors", "[", "len", "(", "kp_lines", ")", "+", "1", "]", ",", "thickness", "=", "2", ",", "lineType", "=", "cv2", ".", "LINE_AA", ")", "\n", "\n", "# Draw the keypoints.", "\n", "", "for", "l", "in", "range", "(", "len", "(", "kp_lines", ")", ")", ":", "\n", "        ", "i1", "=", "kp_lines", "[", "l", "]", "[", "0", "]", "\n", "i2", "=", "kp_lines", "[", "l", "]", "[", "1", "]", "\n", "p1", "=", "kps", "[", "0", ",", "i1", "]", ",", "kps", "[", "1", ",", "i1", "]", "\n", "p2", "=", "kps", "[", "0", ",", "i2", "]", ",", "kps", "[", "1", ",", "i2", "]", "\n", "if", "kps", "[", "2", ",", "i1", "]", ">", "kp_thresh", "and", "kps", "[", "2", ",", "i2", "]", ">", "kp_thresh", ":", "\n", "            ", "cv2", ".", "line", "(", "\n", "kp_mask", ",", "p1", ",", "p2", ",", "\n", "color", "=", "colors", "[", "l", "]", ",", "thickness", "=", "2", ",", "lineType", "=", "cv2", ".", "LINE_AA", ")", "\n", "", "if", "kps", "[", "2", ",", "i1", "]", ">", "kp_thresh", ":", "\n", "            ", "cv2", ".", "circle", "(", "\n", "kp_mask", ",", "p1", ",", "\n", "radius", "=", "3", ",", "color", "=", "colors", "[", "l", "]", ",", "thickness", "=", "-", "1", ",", "lineType", "=", "cv2", ".", "LINE_AA", ")", "\n", "", "if", "kps", "[", "2", ",", "i2", "]", ">", "kp_thresh", ":", "\n", "            ", "cv2", ".", "circle", "(", "\n", "kp_mask", ",", "p2", ",", "\n", "radius", "=", "3", ",", "color", "=", "colors", "[", "l", "]", ",", "thickness", "=", "-", "1", ",", "lineType", "=", "cv2", ".", "LINE_AA", ")", "\n", "\n", "# Blend the keypoints.", "\n", "", "", "return", "cv2", ".", "addWeighted", "(", "img", ",", "1.0", "-", "alpha", ",", "kp_mask", ",", "alpha", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.vis.vis_one_image_opencv": [[201, 249], ["isinstance", "numpy.argsort", "vis.convert_from_cls_format", "pycocotools.decode", "utils.colormap.colormap", "max", "vis.vis_bbox", "vis.get_class_string", "vis.vis_class", "vis.vis_mask", "vis.vis_keypoints", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tools.convert_detections_to_text.convert_from_cls_format", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.colormap.colormap", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.vis.vis_bbox", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tools.infer_simple_dfg.get_class_string", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.vis.vis_class", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.vis.vis_mask", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.vis.vis_keypoints"], ["", "def", "vis_one_image_opencv", "(", "\n", "im", ",", "boxes", ",", "segms", "=", "None", ",", "keypoints", "=", "None", ",", "thresh", "=", "0.9", ",", "kp_thresh", "=", "2", ",", "\n", "show_box", "=", "False", ",", "dataset", "=", "None", ",", "show_class", "=", "False", ")", ":", "\n", "    ", "\"\"\"Constructs a numpy array with the detections visualized.\"\"\"", "\n", "\n", "if", "isinstance", "(", "boxes", ",", "list", ")", ":", "\n", "        ", "boxes", ",", "segms", ",", "keypoints", ",", "classes", "=", "convert_from_cls_format", "(", "\n", "boxes", ",", "segms", ",", "keypoints", ")", "\n", "\n", "", "if", "boxes", "is", "None", "or", "boxes", ".", "shape", "[", "0", "]", "==", "0", "or", "max", "(", "boxes", "[", ":", ",", "4", "]", ")", "<", "thresh", ":", "\n", "        ", "return", "im", "\n", "\n", "", "if", "segms", "is", "not", "None", ":", "\n", "        ", "masks", "=", "mask_util", ".", "decode", "(", "segms", ")", "\n", "color_list", "=", "colormap", "(", ")", "\n", "mask_color_id", "=", "0", "\n", "\n", "# Display in largest to smallest order to reduce occlusion", "\n", "", "areas", "=", "(", "boxes", "[", ":", ",", "2", "]", "-", "boxes", "[", ":", ",", "0", "]", ")", "*", "(", "boxes", "[", ":", ",", "3", "]", "-", "boxes", "[", ":", ",", "1", "]", ")", "\n", "sorted_inds", "=", "np", ".", "argsort", "(", "-", "areas", ")", "\n", "\n", "for", "i", "in", "sorted_inds", ":", "\n", "        ", "bbox", "=", "boxes", "[", "i", ",", ":", "4", "]", "\n", "score", "=", "boxes", "[", "i", ",", "-", "1", "]", "\n", "if", "score", "<", "thresh", ":", "\n", "            ", "continue", "\n", "\n", "# show box (off by default)", "\n", "", "if", "show_box", ":", "\n", "            ", "im", "=", "vis_bbox", "(", "\n", "im", ",", "(", "bbox", "[", "0", "]", ",", "bbox", "[", "1", "]", ",", "bbox", "[", "2", "]", "-", "bbox", "[", "0", "]", ",", "bbox", "[", "3", "]", "-", "bbox", "[", "1", "]", ")", ")", "\n", "\n", "# show class (off by default)", "\n", "", "if", "show_class", ":", "\n", "            ", "class_str", "=", "get_class_string", "(", "classes", "[", "i", "]", ",", "score", ",", "dataset", ")", "\n", "im", "=", "vis_class", "(", "im", ",", "(", "bbox", "[", "0", "]", ",", "bbox", "[", "1", "]", "-", "2", ")", ",", "class_str", ")", "\n", "\n", "# show mask", "\n", "", "if", "segms", "is", "not", "None", "and", "len", "(", "segms", ")", ">", "i", ":", "\n", "            ", "color_mask", "=", "color_list", "[", "mask_color_id", "%", "len", "(", "color_list", ")", ",", "0", ":", "3", "]", "\n", "mask_color_id", "+=", "1", "\n", "im", "=", "vis_mask", "(", "im", ",", "masks", "[", "...", ",", "i", "]", ",", "color_mask", ")", "\n", "\n", "# show keypoints", "\n", "", "if", "keypoints", "is", "not", "None", "and", "len", "(", "keypoints", ")", ">", "i", ":", "\n", "            ", "im", "=", "vis_keypoints", "(", "im", ",", "keypoints", "[", "i", "]", ",", "kp_thresh", ")", "\n", "\n", "", "", "return", "im", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.vis.vis_one_image": [[251, 393], ["isinstance", "utils.get_keypoints", "vis.kp_connections", "matplotlib.get_cmap", "matplotlib.figure", "plt.figure.set_size_inches", "matplotlib.Axes", "plt.Axes.axis", "plt.figure.add_axes", "plt.Axes.imshow", "numpy.argsort", "plt.figure.savefig", "matplotlib.close", "os.path.exists", "os.makedirs", "vis.convert_from_cls_format", "pycocotools.decode", "utils.colormap.colormap", "plt.get_cmap.", "plt.Axes.add_patch", "os.path.join", "max", "numpy.linspace", "matplotlib.Rectangle", "plt.Axes.text", "numpy.ones", "range", "range", "cv2.findContours", "matplotlib.autoscale", "range", "numpy.minimum", "numpy.minimum", "os.path.basename", "vis.get_class_string", "len", "e.copy", "matplotlib.patches.Polygon", "plt.Axes.add_patch", "len", "len", "matplotlib.plot", "matplotlib.setp", "matplotlib.plot", "matplotlib.setp", "len", "dict", "c.reshape", "matplotlib.plot", "matplotlib.setp", "matplotlib.plot", "matplotlib.plot", "len", "dataset_keypoints.index", "dataset_keypoints.index", "dataset_keypoints.index", "dataset_keypoints.index", "dataset_keypoints.index", "dataset_keypoints.index", "dataset_keypoints.index", "dataset_keypoints.index", "dataset_keypoints.index", "dataset_keypoints.index", "dataset_keypoints.index", "len", "len"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.keypoints.get_keypoints", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.vis.kp_connections", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tools.convert_detections_to_text.convert_from_cls_format", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.colormap.colormap", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.blob.ones", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tools.infer_simple_dfg.get_class_string"], ["", "def", "vis_one_image", "(", "\n", "im", ",", "im_name", ",", "output_dir", ",", "boxes", ",", "segms", "=", "None", ",", "keypoints", "=", "None", ",", "thresh", "=", "0.9", ",", "\n", "kp_thresh", "=", "2", ",", "dpi", "=", "200", ",", "box_alpha", "=", "0.0", ",", "dataset", "=", "None", ",", "show_class", "=", "False", ",", "\n", "ext", "=", "'pdf'", ")", ":", "\n", "    ", "\"\"\"Visual debugging of detections.\"\"\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "output_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "output_dir", ")", "\n", "\n", "", "if", "isinstance", "(", "boxes", ",", "list", ")", ":", "\n", "        ", "boxes", ",", "segms", ",", "keypoints", ",", "classes", "=", "convert_from_cls_format", "(", "\n", "boxes", ",", "segms", ",", "keypoints", ")", "\n", "\n", "", "thresh", "=", "0.8", "\n", "box_alpha", "=", "1", "\n", "\n", "if", "boxes", "is", "None", "or", "boxes", ".", "shape", "[", "0", "]", "==", "0", "or", "max", "(", "boxes", "[", ":", ",", "4", "]", ")", "<", "thresh", ":", "\n", "        ", "return", "\n", "\n", "", "dataset_keypoints", ",", "_", "=", "keypoint_utils", ".", "get_keypoints", "(", ")", "\n", "\n", "if", "segms", "is", "not", "None", ":", "\n", "        ", "masks", "=", "mask_util", ".", "decode", "(", "segms", ")", "\n", "\n", "", "color_list", "=", "colormap", "(", "rgb", "=", "True", ")", "/", "255", "\n", "\n", "kp_lines", "=", "kp_connections", "(", "dataset_keypoints", ")", "\n", "cmap", "=", "plt", ".", "get_cmap", "(", "'rainbow'", ")", "\n", "colors", "=", "[", "cmap", "(", "i", ")", "for", "i", "in", "np", ".", "linspace", "(", "0", ",", "1", ",", "len", "(", "kp_lines", ")", "+", "2", ")", "]", "\n", "\n", "fig", "=", "plt", ".", "figure", "(", "frameon", "=", "False", ")", "\n", "fig", ".", "set_size_inches", "(", "im", ".", "shape", "[", "1", "]", "/", "dpi", ",", "im", ".", "shape", "[", "0", "]", "/", "dpi", ")", "\n", "ax", "=", "plt", ".", "Axes", "(", "fig", ",", "[", "0.", ",", "0.", ",", "1.", ",", "1.", "]", ")", "\n", "ax", ".", "axis", "(", "'off'", ")", "\n", "fig", ".", "add_axes", "(", "ax", ")", "\n", "ax", ".", "imshow", "(", "im", ")", "\n", "\n", "# Display in largest to smallest order to reduce occlusion", "\n", "areas", "=", "(", "boxes", "[", ":", ",", "2", "]", "-", "boxes", "[", ":", ",", "0", "]", ")", "*", "(", "boxes", "[", ":", ",", "3", "]", "-", "boxes", "[", ":", ",", "1", "]", ")", "\n", "sorted_inds", "=", "np", ".", "argsort", "(", "-", "areas", ")", "\n", "\n", "mask_color_id", "=", "0", "\n", "for", "i", "in", "sorted_inds", ":", "\n", "        ", "bbox", "=", "boxes", "[", "i", ",", ":", "4", "]", "\n", "score", "=", "boxes", "[", "i", ",", "-", "1", "]", "\n", "if", "score", "<", "thresh", ":", "\n", "            ", "continue", "\n", "\n", "# show box (off by default)", "\n", "", "ax", ".", "add_patch", "(", "\n", "plt", ".", "Rectangle", "(", "(", "bbox", "[", "0", "]", ",", "bbox", "[", "1", "]", ")", ",", "\n", "bbox", "[", "2", "]", "-", "bbox", "[", "0", "]", ",", "\n", "bbox", "[", "3", "]", "-", "bbox", "[", "1", "]", ",", "\n", "fill", "=", "False", ",", "edgecolor", "=", "'r'", ",", "\n", "linewidth", "=", "2", ",", "alpha", "=", "box_alpha", ")", ")", "\n", "\n", "if", "show_class", ":", "\n", "            ", "ax", ".", "text", "(", "\n", "bbox", "[", "0", "]", ",", "bbox", "[", "1", "]", "-", "2", ",", "\n", "get_class_string", "(", "classes", "[", "i", "]", ",", "score", ",", "dataset", ")", ",", "\n", "fontsize", "=", "10", ",", "\n", "family", "=", "'serif'", ",", "\n", "bbox", "=", "dict", "(", "\n", "facecolor", "=", "'r'", ",", "alpha", "=", "1", ",", "pad", "=", "0", ",", "edgecolor", "=", "'none'", ")", ",", "\n", "color", "=", "'white'", ")", "\n", "\n", "# show mask", "\n", "", "if", "segms", "is", "not", "None", "and", "len", "(", "segms", ")", ">", "i", ":", "\n", "            ", "img", "=", "np", ".", "ones", "(", "im", ".", "shape", ")", "\n", "color_mask", "=", "color_list", "[", "mask_color_id", "%", "len", "(", "color_list", ")", ",", "0", ":", "3", "]", "\n", "mask_color_id", "+=", "1", "\n", "\n", "w_ratio", "=", ".4", "\n", "for", "c", "in", "range", "(", "3", ")", ":", "\n", "                ", "color_mask", "[", "c", "]", "=", "color_mask", "[", "c", "]", "*", "(", "1", "-", "w_ratio", ")", "+", "w_ratio", "\n", "", "for", "c", "in", "range", "(", "3", ")", ":", "\n", "                ", "img", "[", ":", ",", ":", ",", "c", "]", "=", "color_mask", "[", "c", "]", "\n", "", "e", "=", "masks", "[", ":", ",", ":", ",", "i", "]", "\n", "\n", "_", ",", "contour", ",", "hier", "=", "cv2", ".", "findContours", "(", "\n", "e", ".", "copy", "(", ")", ",", "cv2", ".", "RETR_CCOMP", ",", "cv2", ".", "CHAIN_APPROX_NONE", ")", "\n", "\n", "for", "c", "in", "contour", ":", "\n", "                ", "polygon", "=", "Polygon", "(", "\n", "c", ".", "reshape", "(", "(", "-", "1", ",", "2", ")", ")", ",", "\n", "fill", "=", "True", ",", "facecolor", "=", "color_mask", ",", "\n", "edgecolor", "=", "'w'", ",", "linewidth", "=", "1.2", ",", "\n", "alpha", "=", "0.5", ")", "\n", "ax", ".", "add_patch", "(", "polygon", ")", "\n", "\n", "# show keypoints", "\n", "", "", "if", "keypoints", "is", "not", "None", "and", "len", "(", "keypoints", ")", ">", "i", ":", "\n", "            ", "kps", "=", "keypoints", "[", "i", "]", "\n", "plt", ".", "autoscale", "(", "False", ")", "\n", "for", "l", "in", "range", "(", "len", "(", "kp_lines", ")", ")", ":", "\n", "                ", "i1", "=", "kp_lines", "[", "l", "]", "[", "0", "]", "\n", "i2", "=", "kp_lines", "[", "l", "]", "[", "1", "]", "\n", "if", "kps", "[", "2", ",", "i1", "]", ">", "kp_thresh", "and", "kps", "[", "2", ",", "i2", "]", ">", "kp_thresh", ":", "\n", "                    ", "x", "=", "[", "kps", "[", "0", ",", "i1", "]", ",", "kps", "[", "0", ",", "i2", "]", "]", "\n", "y", "=", "[", "kps", "[", "1", ",", "i1", "]", ",", "kps", "[", "1", ",", "i2", "]", "]", "\n", "line", "=", "plt", ".", "plot", "(", "x", ",", "y", ")", "\n", "plt", ".", "setp", "(", "line", ",", "color", "=", "colors", "[", "l", "]", ",", "linewidth", "=", "1.0", ",", "alpha", "=", "0.7", ")", "\n", "", "if", "kps", "[", "2", ",", "i1", "]", ">", "kp_thresh", ":", "\n", "                    ", "plt", ".", "plot", "(", "\n", "kps", "[", "0", ",", "i1", "]", ",", "kps", "[", "1", ",", "i1", "]", ",", "'.'", ",", "color", "=", "colors", "[", "l", "]", ",", "\n", "markersize", "=", "3.0", ",", "alpha", "=", "0.7", ")", "\n", "\n", "", "if", "kps", "[", "2", ",", "i2", "]", ">", "kp_thresh", ":", "\n", "                    ", "plt", ".", "plot", "(", "\n", "kps", "[", "0", ",", "i2", "]", ",", "kps", "[", "1", ",", "i2", "]", ",", "'.'", ",", "color", "=", "colors", "[", "l", "]", ",", "\n", "markersize", "=", "3.0", ",", "alpha", "=", "0.7", ")", "\n", "\n", "# add mid shoulder / mid hip for better visualization", "\n", "", "", "mid_shoulder", "=", "(", "\n", "kps", "[", ":", "2", ",", "dataset_keypoints", ".", "index", "(", "'right_shoulder'", ")", "]", "+", "\n", "kps", "[", ":", "2", ",", "dataset_keypoints", ".", "index", "(", "'left_shoulder'", ")", "]", ")", "/", "2.0", "\n", "sc_mid_shoulder", "=", "np", ".", "minimum", "(", "\n", "kps", "[", "2", ",", "dataset_keypoints", ".", "index", "(", "'right_shoulder'", ")", "]", ",", "\n", "kps", "[", "2", ",", "dataset_keypoints", ".", "index", "(", "'left_shoulder'", ")", "]", ")", "\n", "mid_hip", "=", "(", "\n", "kps", "[", ":", "2", ",", "dataset_keypoints", ".", "index", "(", "'right_hip'", ")", "]", "+", "\n", "kps", "[", ":", "2", ",", "dataset_keypoints", ".", "index", "(", "'left_hip'", ")", "]", ")", "/", "2.0", "\n", "sc_mid_hip", "=", "np", ".", "minimum", "(", "\n", "kps", "[", "2", ",", "dataset_keypoints", ".", "index", "(", "'right_hip'", ")", "]", ",", "\n", "kps", "[", "2", ",", "dataset_keypoints", ".", "index", "(", "'left_hip'", ")", "]", ")", "\n", "if", "(", "sc_mid_shoulder", ">", "kp_thresh", "and", "\n", "kps", "[", "2", ",", "dataset_keypoints", ".", "index", "(", "'nose'", ")", "]", ">", "kp_thresh", ")", ":", "\n", "                ", "x", "=", "[", "mid_shoulder", "[", "0", "]", ",", "kps", "[", "0", ",", "dataset_keypoints", ".", "index", "(", "'nose'", ")", "]", "]", "\n", "y", "=", "[", "mid_shoulder", "[", "1", "]", ",", "kps", "[", "1", ",", "dataset_keypoints", ".", "index", "(", "'nose'", ")", "]", "]", "\n", "line", "=", "plt", ".", "plot", "(", "x", ",", "y", ")", "\n", "plt", ".", "setp", "(", "\n", "line", ",", "color", "=", "colors", "[", "len", "(", "kp_lines", ")", "]", ",", "linewidth", "=", "1.0", ",", "alpha", "=", "0.7", ")", "\n", "", "if", "sc_mid_shoulder", ">", "kp_thresh", "and", "sc_mid_hip", ">", "kp_thresh", ":", "\n", "                ", "x", "=", "[", "mid_shoulder", "[", "0", "]", ",", "mid_hip", "[", "0", "]", "]", "\n", "y", "=", "[", "mid_shoulder", "[", "1", "]", ",", "mid_hip", "[", "1", "]", "]", "\n", "line", "=", "plt", ".", "plot", "(", "x", ",", "y", ")", "\n", "plt", ".", "setp", "(", "\n", "line", ",", "color", "=", "colors", "[", "len", "(", "kp_lines", ")", "+", "1", "]", ",", "linewidth", "=", "1.0", ",", "\n", "alpha", "=", "0.7", ")", "\n", "\n", "", "", "", "output_name", "=", "os", ".", "path", ".", "basename", "(", "im_name", ")", "+", "'.'", "+", "ext", "\n", "fig", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'{}'", ".", "format", "(", "output_name", ")", ")", ",", "dpi", "=", "dpi", ")", "\n", "plt", ".", "close", "(", "'all'", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.voc_eval.parse_rec": [[34, 52], ["xml.parse", "ET.parse.findall", "int", "int", "obj.find", "objects.append", "obj.find", "obj.find", "int", "int", "int", "int", "obj.find", "obj.find", "obj.find.find", "obj.find.find", "obj.find.find", "obj.find.find"], "function", ["None"], ["def", "parse_rec", "(", "filename", ")", ":", "\n", "    ", "\"\"\"Parse a PASCAL VOC xml file.\"\"\"", "\n", "tree", "=", "ET", ".", "parse", "(", "filename", ")", "\n", "objects", "=", "[", "]", "\n", "for", "obj", "in", "tree", ".", "findall", "(", "'object'", ")", ":", "\n", "        ", "obj_struct", "=", "{", "}", "\n", "obj_struct", "[", "'name'", "]", "=", "obj", ".", "find", "(", "'name'", ")", ".", "text", "\n", "obj_struct", "[", "'pose'", "]", "=", "obj", ".", "find", "(", "'pose'", ")", ".", "text", "\n", "obj_struct", "[", "'truncated'", "]", "=", "int", "(", "obj", ".", "find", "(", "'truncated'", ")", ".", "text", ")", "\n", "obj_struct", "[", "'difficult'", "]", "=", "int", "(", "obj", ".", "find", "(", "'difficult'", ")", ".", "text", ")", "\n", "bbox", "=", "obj", ".", "find", "(", "'bndbox'", ")", "\n", "obj_struct", "[", "'bbox'", "]", "=", "[", "int", "(", "bbox", ".", "find", "(", "'xmin'", ")", ".", "text", ")", ",", "\n", "int", "(", "bbox", ".", "find", "(", "'ymin'", ")", ".", "text", ")", ",", "\n", "int", "(", "bbox", ".", "find", "(", "'xmax'", ")", ".", "text", ")", ",", "\n", "int", "(", "bbox", ".", "find", "(", "'ymax'", ")", ".", "text", ")", "]", "\n", "objects", ".", "append", "(", "obj_struct", ")", "\n", "\n", "", "return", "objects", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.voc_eval.voc_ap": [[54, 84], ["numpy.arange", "numpy.concatenate", "numpy.concatenate", "range", "numpy.sum", "numpy.maximum", "numpy.where", "numpy.sum", "numpy.max"], "function", ["None"], ["", "def", "voc_ap", "(", "rec", ",", "prec", ",", "use_07_metric", "=", "False", ")", ":", "\n", "    ", "\"\"\"Compute VOC AP given precision and recall. If use_07_metric is true, uses\n    the VOC 07 11-point method (default:False).\n    \"\"\"", "\n", "if", "use_07_metric", ":", "\n", "# 11 point metric", "\n", "        ", "ap", "=", "0.", "\n", "for", "t", "in", "np", ".", "arange", "(", "0.", ",", "1.1", ",", "0.1", ")", ":", "\n", "            ", "if", "np", ".", "sum", "(", "rec", ">=", "t", ")", "==", "0", ":", "\n", "                ", "p", "=", "0", "\n", "", "else", ":", "\n", "                ", "p", "=", "np", ".", "max", "(", "prec", "[", "rec", ">=", "t", "]", ")", "\n", "", "ap", "=", "ap", "+", "p", "/", "11.", "\n", "", "", "else", ":", "\n", "# correct AP calculation", "\n", "# first append sentinel values at the end", "\n", "        ", "mrec", "=", "np", ".", "concatenate", "(", "(", "[", "0.", "]", ",", "rec", ",", "[", "1.", "]", ")", ")", "\n", "mpre", "=", "np", ".", "concatenate", "(", "(", "[", "0.", "]", ",", "prec", ",", "[", "0.", "]", ")", ")", "\n", "\n", "# compute the precision envelope", "\n", "for", "i", "in", "range", "(", "mpre", ".", "size", "-", "1", ",", "0", ",", "-", "1", ")", ":", "\n", "            ", "mpre", "[", "i", "-", "1", "]", "=", "np", ".", "maximum", "(", "mpre", "[", "i", "-", "1", "]", ",", "mpre", "[", "i", "]", ")", "\n", "\n", "# to calculate area under PR curve, look for points", "\n", "# where X axis (recall) changes value", "\n", "", "i", "=", "np", ".", "where", "(", "mrec", "[", "1", ":", "]", "!=", "mrec", "[", ":", "-", "1", "]", ")", "[", "0", "]", "\n", "\n", "# and sum (\\Delta recall) * prec", "\n", "ap", "=", "np", ".", "sum", "(", "(", "mrec", "[", "i", "+", "1", "]", "-", "mrec", "[", "i", "]", ")", "*", "mpre", "[", "i", "+", "1", "]", ")", "\n", "", "return", "ap", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.voc_eval.voc_eval": [[86, 224], ["os.path.join", "detpath.format", "numpy.array", "numpy.array", "numpy.argsort", "len", "numpy.zeros", "numpy.zeros", "range", "numpy.cumsum", "numpy.cumsum", "voc_eval.voc_ap", "os.path.isdir", "os.mkdir", "os.path.splitext", "open", "f.readlines", "x.strip", "os.path.isfile", "enumerate", "logger.info", "numpy.array", "numpy.array().astype", "open", "f.readlines", "x.strip().split", "BB[].astype", "R[].astype", "float", "numpy.maximum", "os.path.basename", "voc_eval.parse_rec", "open", "cPickle.dump", "open", "cPickle.load", "len", "sum", "float", "numpy.maximum", "numpy.maximum", "numpy.minimum", "numpy.minimum", "numpy.maximum", "numpy.maximum", "numpy.max", "numpy.argmax", "annopath.format", "logger.info", "numpy.array", "x.strip", "float", "numpy.finfo", "len"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.blob.zeros", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.blob.zeros", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.voc_eval.voc_ap", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.voc_eval.parse_rec"], ["", "def", "voc_eval", "(", "detpath", ",", "\n", "annopath", ",", "\n", "imagesetfile", ",", "\n", "classname", ",", "\n", "cachedir", ",", "\n", "ovthresh", "=", "0.5", ",", "\n", "use_07_metric", "=", "False", ")", ":", "\n", "    ", "\"\"\"rec, prec, ap = voc_eval(detpath,\n                                annopath,\n                                imagesetfile,\n                                classname,\n                                [ovthresh],\n                                [use_07_metric])\n\n    Top level function that does the PASCAL VOC evaluation.\n\n    detpath: Path to detections\n        detpath.format(classname) should produce the detection results file.\n    annopath: Path to annotations\n        annopath.format(imagename) should be the xml annotations file.\n    imagesetfile: Text file containing the list of images, one image per line.\n    classname: Category name (duh)\n    cachedir: Directory for caching the annotations\n    [ovthresh]: Overlap threshold (default = 0.5)\n    [use_07_metric]: Whether to use VOC07's 11 point AP computation\n        (default False)\n    \"\"\"", "\n", "# assumes detections are in detpath.format(classname)", "\n", "# assumes annotations are in annopath.format(imagename)", "\n", "# assumes imagesetfile is a text file with each line an image name", "\n", "# cachedir caches the annotations in a pickle file", "\n", "\n", "# first load gt", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "cachedir", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "cachedir", ")", "\n", "", "imageset", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "imagesetfile", ")", ")", "[", "0", "]", "\n", "cachefile", "=", "os", ".", "path", ".", "join", "(", "cachedir", ",", "imageset", "+", "'_annots.pkl'", ")", "\n", "# read list of images", "\n", "with", "open", "(", "imagesetfile", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "", "imagenames", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "lines", "]", "\n", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "cachefile", ")", ":", "\n", "# load annots", "\n", "        ", "recs", "=", "{", "}", "\n", "for", "i", ",", "imagename", "in", "enumerate", "(", "imagenames", ")", ":", "\n", "            ", "recs", "[", "imagename", "]", "=", "parse_rec", "(", "annopath", ".", "format", "(", "imagename", ")", ")", "\n", "if", "i", "%", "100", "==", "0", ":", "\n", "                ", "logger", ".", "info", "(", "\n", "'Reading annotation for {:d}/{:d}'", ".", "format", "(", "\n", "i", "+", "1", ",", "len", "(", "imagenames", ")", ")", ")", "\n", "# save", "\n", "", "", "logger", ".", "info", "(", "'Saving cached annotations to {:s}'", ".", "format", "(", "cachefile", ")", ")", "\n", "with", "open", "(", "cachefile", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "cPickle", ".", "dump", "(", "recs", ",", "f", ")", "\n", "", "", "else", ":", "\n", "# load", "\n", "        ", "with", "open", "(", "cachefile", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "recs", "=", "cPickle", ".", "load", "(", "f", ")", "\n", "\n", "# extract gt objects for this class", "\n", "", "", "class_recs", "=", "{", "}", "\n", "npos", "=", "0", "\n", "for", "imagename", "in", "imagenames", ":", "\n", "        ", "R", "=", "[", "obj", "for", "obj", "in", "recs", "[", "imagename", "]", "if", "obj", "[", "'name'", "]", "==", "classname", "]", "\n", "bbox", "=", "np", ".", "array", "(", "[", "x", "[", "'bbox'", "]", "for", "x", "in", "R", "]", ")", "\n", "difficult", "=", "np", ".", "array", "(", "[", "x", "[", "'difficult'", "]", "for", "x", "in", "R", "]", ")", ".", "astype", "(", "np", ".", "bool", ")", "\n", "det", "=", "[", "False", "]", "*", "len", "(", "R", ")", "\n", "npos", "=", "npos", "+", "sum", "(", "~", "difficult", ")", "\n", "class_recs", "[", "imagename", "]", "=", "{", "'bbox'", ":", "bbox", ",", "\n", "'difficult'", ":", "difficult", ",", "\n", "'det'", ":", "det", "}", "\n", "\n", "# read dets", "\n", "", "detfile", "=", "detpath", ".", "format", "(", "classname", ")", "\n", "with", "open", "(", "detfile", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "\n", "", "splitlines", "=", "[", "x", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "for", "x", "in", "lines", "]", "\n", "image_ids", "=", "[", "x", "[", "0", "]", "for", "x", "in", "splitlines", "]", "\n", "confidence", "=", "np", ".", "array", "(", "[", "float", "(", "x", "[", "1", "]", ")", "for", "x", "in", "splitlines", "]", ")", "\n", "BB", "=", "np", ".", "array", "(", "[", "[", "float", "(", "z", ")", "for", "z", "in", "x", "[", "2", ":", "]", "]", "for", "x", "in", "splitlines", "]", ")", "\n", "\n", "# sort by confidence", "\n", "sorted_ind", "=", "np", ".", "argsort", "(", "-", "confidence", ")", "\n", "BB", "=", "BB", "[", "sorted_ind", ",", ":", "]", "\n", "image_ids", "=", "[", "image_ids", "[", "x", "]", "for", "x", "in", "sorted_ind", "]", "\n", "\n", "# go down dets and mark TPs and FPs", "\n", "nd", "=", "len", "(", "image_ids", ")", "\n", "tp", "=", "np", ".", "zeros", "(", "nd", ")", "\n", "fp", "=", "np", ".", "zeros", "(", "nd", ")", "\n", "for", "d", "in", "range", "(", "nd", ")", ":", "\n", "        ", "R", "=", "class_recs", "[", "image_ids", "[", "d", "]", "]", "\n", "bb", "=", "BB", "[", "d", ",", ":", "]", ".", "astype", "(", "float", ")", "\n", "ovmax", "=", "-", "np", ".", "inf", "\n", "BBGT", "=", "R", "[", "'bbox'", "]", ".", "astype", "(", "float", ")", "\n", "\n", "if", "BBGT", ".", "size", ">", "0", ":", "\n", "# compute overlaps", "\n", "# intersection", "\n", "            ", "ixmin", "=", "np", ".", "maximum", "(", "BBGT", "[", ":", ",", "0", "]", ",", "bb", "[", "0", "]", ")", "\n", "iymin", "=", "np", ".", "maximum", "(", "BBGT", "[", ":", ",", "1", "]", ",", "bb", "[", "1", "]", ")", "\n", "ixmax", "=", "np", ".", "minimum", "(", "BBGT", "[", ":", ",", "2", "]", ",", "bb", "[", "2", "]", ")", "\n", "iymax", "=", "np", ".", "minimum", "(", "BBGT", "[", ":", ",", "3", "]", ",", "bb", "[", "3", "]", ")", "\n", "iw", "=", "np", ".", "maximum", "(", "ixmax", "-", "ixmin", "+", "1.", ",", "0.", ")", "\n", "ih", "=", "np", ".", "maximum", "(", "iymax", "-", "iymin", "+", "1.", ",", "0.", ")", "\n", "inters", "=", "iw", "*", "ih", "\n", "\n", "# union", "\n", "uni", "=", "(", "(", "bb", "[", "2", "]", "-", "bb", "[", "0", "]", "+", "1.", ")", "*", "(", "bb", "[", "3", "]", "-", "bb", "[", "1", "]", "+", "1.", ")", "+", "\n", "(", "BBGT", "[", ":", ",", "2", "]", "-", "BBGT", "[", ":", ",", "0", "]", "+", "1.", ")", "*", "\n", "(", "BBGT", "[", ":", ",", "3", "]", "-", "BBGT", "[", ":", ",", "1", "]", "+", "1.", ")", "-", "inters", ")", "\n", "\n", "overlaps", "=", "inters", "/", "uni", "\n", "ovmax", "=", "np", ".", "max", "(", "overlaps", ")", "\n", "jmax", "=", "np", ".", "argmax", "(", "overlaps", ")", "\n", "\n", "", "if", "ovmax", ">", "ovthresh", ":", "\n", "            ", "if", "not", "R", "[", "'difficult'", "]", "[", "jmax", "]", ":", "\n", "                ", "if", "not", "R", "[", "'det'", "]", "[", "jmax", "]", ":", "\n", "                    ", "tp", "[", "d", "]", "=", "1.", "\n", "R", "[", "'det'", "]", "[", "jmax", "]", "=", "1", "\n", "", "else", ":", "\n", "                    ", "fp", "[", "d", "]", "=", "1.", "\n", "", "", "", "else", ":", "\n", "            ", "fp", "[", "d", "]", "=", "1.", "\n", "\n", "# compute precision recall", "\n", "", "", "fp", "=", "np", ".", "cumsum", "(", "fp", ")", "\n", "tp", "=", "np", ".", "cumsum", "(", "tp", ")", "\n", "rec", "=", "tp", "/", "float", "(", "npos", ")", "\n", "# avoid divide by zero in case the first detection matches a difficult", "\n", "# ground truth", "\n", "prec", "=", "tp", "/", "np", ".", "maximum", "(", "tp", "+", "fp", ",", "np", ".", "finfo", "(", "np", ".", "float64", ")", ".", "eps", ")", "\n", "ap", "=", "voc_ap", "(", "rec", ",", "prec", ",", "use_07_metric", ")", "\n", "\n", "return", "rec", ",", "prec", ",", "ap", "\n", "", ""]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.json_dataset.JsonDataset.__init__": [[56, 86], ["os.path.exists", "os.path.exists", "logger.debug", "pycocotools.coco.COCO", "utils.timer.Timer", "utils.timer.Timer", "json_dataset.JsonDataset.COCO.getCatIds", "dict", "len", "json_dataset.JsonDataset._init_keypoints", "datasets.dataset_catalog.DATASETS.keys", "zip", "json_dataset.JsonDataset.COCO.loadCats", "enumerate", "json_dataset.JsonDataset.json_category_id_to_contiguous_id.items", "json_dataset.JsonDataset.COCO.getCatIds"], "methods", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.json_dataset.JsonDataset._init_keypoints"], ["def", "__init__", "(", "self", ",", "name", ")", ":", "\n", "        ", "assert", "name", "in", "DATASETS", ".", "keys", "(", ")", ",", "'Unknown dataset name: {}'", ".", "format", "(", "name", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "DATASETS", "[", "name", "]", "[", "IM_DIR", "]", ")", ",", "'Image directory \\'{}\\' not found'", ".", "format", "(", "DATASETS", "[", "name", "]", "[", "IM_DIR", "]", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "DATASETS", "[", "name", "]", "[", "ANN_FN", "]", ")", ",", "'Annotation file \\'{}\\' not found'", ".", "format", "(", "DATASETS", "[", "name", "]", "[", "ANN_FN", "]", ")", "\n", "logger", ".", "debug", "(", "'Creating: {}'", ".", "format", "(", "name", ")", ")", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "image_directory", "=", "DATASETS", "[", "name", "]", "[", "IM_DIR", "]", "\n", "self", ".", "image_prefix", "=", "(", "\n", "''", "if", "IM_PREFIX", "not", "in", "DATASETS", "[", "name", "]", "else", "DATASETS", "[", "name", "]", "[", "IM_PREFIX", "]", "\n", ")", "\n", "self", ".", "COCO", "=", "COCO", "(", "DATASETS", "[", "name", "]", "[", "ANN_FN", "]", ")", "\n", "self", ".", "debug_timer", "=", "Timer", "(", ")", "\n", "# Set up dataset classes", "\n", "category_ids", "=", "self", ".", "COCO", ".", "getCatIds", "(", ")", "\n", "categories", "=", "[", "c", "[", "'name'", "]", "for", "c", "in", "self", ".", "COCO", ".", "loadCats", "(", "category_ids", ")", "]", "\n", "self", ".", "category_to_id_map", "=", "dict", "(", "zip", "(", "categories", ",", "category_ids", ")", ")", "\n", "self", ".", "classes", "=", "[", "'__background__'", "]", "+", "categories", "\n", "self", ".", "num_classes", "=", "len", "(", "self", ".", "classes", ")", "\n", "self", ".", "json_category_id_to_contiguous_id", "=", "{", "\n", "v", ":", "i", "+", "1", "\n", "for", "i", ",", "v", "in", "enumerate", "(", "self", ".", "COCO", ".", "getCatIds", "(", ")", ")", "\n", "}", "\n", "self", ".", "contiguous_category_id_to_json_id", "=", "{", "\n", "v", ":", "k", "\n", "for", "k", ",", "v", "in", "self", ".", "json_category_id_to_contiguous_id", ".", "items", "(", ")", "\n", "}", "\n", "self", ".", "_init_keypoints", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.json_dataset.JsonDataset.get_roidb": [[87, 131], ["json_dataset.JsonDataset.COCO.getImgIds", "json_dataset.JsonDataset.sort", "copy.deepcopy", "json_dataset._add_class_assignments", "json_dataset.JsonDataset.COCO.loadImgs", "json_dataset.JsonDataset._prep_roidb_entry", "json_dataset.JsonDataset.debug_timer.tic", "logger.debug", "json_dataset.JsonDataset.debug_timer.tic", "json_dataset.JsonDataset._add_proposals_from_file", "logger.debug", "json_dataset.JsonDataset._add_gt_annotations", "json_dataset.JsonDataset.debug_timer.toc", "json_dataset.JsonDataset.debug_timer.toc"], "methods", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.json_dataset._add_class_assignments", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.json_dataset.JsonDataset._prep_roidb_entry", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.timer.Timer.tic", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.timer.Timer.tic", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.json_dataset.JsonDataset._add_proposals_from_file", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.json_dataset.JsonDataset._add_gt_annotations", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.timer.Timer.toc", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.timer.Timer.toc"], ["", "def", "get_roidb", "(", "\n", "self", ",", "\n", "gt", "=", "False", ",", "\n", "proposal_file", "=", "None", ",", "\n", "min_proposal_size", "=", "2", ",", "\n", "proposal_limit", "=", "-", "1", ",", "\n", "crowd_filter_thresh", "=", "0", "\n", ")", ":", "\n", "        ", "\"\"\"Return an roidb corresponding to the json dataset. Optionally:\n           - include ground truth boxes in the roidb\n           - add proposals specified in a proposals file\n           - filter proposals based on a minimum side length\n           - filter proposals that intersect with crowd regions\n        \"\"\"", "\n", "assert", "gt", "is", "True", "or", "crowd_filter_thresh", "==", "0", ",", "'Crowd filter threshold must be 0 if ground-truth annotations '", "'are not included.'", "\n", "image_ids", "=", "self", ".", "COCO", ".", "getImgIds", "(", ")", "\n", "image_ids", ".", "sort", "(", ")", "\n", "roidb", "=", "copy", ".", "deepcopy", "(", "self", ".", "COCO", ".", "loadImgs", "(", "image_ids", ")", ")", "\n", "for", "entry", "in", "roidb", ":", "\n", "            ", "self", ".", "_prep_roidb_entry", "(", "entry", ")", "\n", "", "if", "gt", ":", "\n", "# Include ground-truth object annotations", "\n", "            ", "self", ".", "debug_timer", ".", "tic", "(", ")", "\n", "for", "entry", "in", "roidb", ":", "\n", "                ", "self", ".", "_add_gt_annotations", "(", "entry", ")", "\n", "", "logger", ".", "debug", "(", "\n", "'_add_gt_annotations took {:.3f}s'", ".", "\n", "format", "(", "self", ".", "debug_timer", ".", "toc", "(", "average", "=", "False", ")", ")", "\n", ")", "\n", "", "if", "proposal_file", "is", "not", "None", ":", "\n", "# Include proposals from a file", "\n", "            ", "self", ".", "debug_timer", ".", "tic", "(", ")", "\n", "self", ".", "_add_proposals_from_file", "(", "\n", "roidb", ",", "proposal_file", ",", "min_proposal_size", ",", "proposal_limit", ",", "\n", "crowd_filter_thresh", "\n", ")", "\n", "logger", ".", "debug", "(", "\n", "'_add_proposals_from_file took {:.3f}s'", ".", "\n", "format", "(", "self", ".", "debug_timer", ".", "toc", "(", "average", "=", "False", ")", ")", "\n", ")", "\n", "", "_add_class_assignments", "(", "roidb", ")", "\n", "return", "roidb", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.json_dataset.JsonDataset._prep_roidb_entry": [[132, 162], ["os.path.join", "numpy.empty", "numpy.empty", "numpy.empty", "scipy.sparse.csr_matrix", "numpy.empty", "numpy.empty", "numpy.empty", "numpy.empty"], "methods", ["None"], ["", "def", "_prep_roidb_entry", "(", "self", ",", "entry", ")", ":", "\n", "        ", "\"\"\"Adds empty metadata fields to an roidb entry.\"\"\"", "\n", "# Reference back to the parent dataset", "\n", "entry", "[", "'dataset'", "]", "=", "self", "\n", "# Make file_name an abs path", "\n", "entry", "[", "'image'", "]", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "image_directory", ",", "self", ".", "image_prefix", "+", "entry", "[", "'file_name'", "]", "\n", ")", "\n", "entry", "[", "'flipped'", "]", "=", "False", "\n", "entry", "[", "'has_visible_keypoints'", "]", "=", "False", "\n", "# Empty placeholders", "\n", "entry", "[", "'boxes'", "]", "=", "np", ".", "empty", "(", "(", "0", ",", "4", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "entry", "[", "'segms'", "]", "=", "[", "]", "\n", "entry", "[", "'gt_classes'", "]", "=", "np", ".", "empty", "(", "(", "0", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "entry", "[", "'seg_areas'", "]", "=", "np", ".", "empty", "(", "(", "0", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "entry", "[", "'gt_overlaps'", "]", "=", "scipy", ".", "sparse", ".", "csr_matrix", "(", "\n", "np", ".", "empty", "(", "(", "0", ",", "self", ".", "num_classes", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", ")", "\n", "entry", "[", "'is_crowd'", "]", "=", "np", ".", "empty", "(", "(", "0", ")", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "# 'box_to_gt_ind_map': Shape is (#rois). Maps from each roi to the index", "\n", "# in the list of rois that satisfy np.where(entry['gt_classes'] > 0)", "\n", "entry", "[", "'box_to_gt_ind_map'", "]", "=", "np", ".", "empty", "(", "(", "0", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "if", "self", ".", "keypoints", "is", "not", "None", ":", "\n", "            ", "entry", "[", "'gt_keypoints'", "]", "=", "np", ".", "empty", "(", "\n", "(", "0", ",", "3", ",", "self", ".", "num_keypoints", ")", ",", "dtype", "=", "np", ".", "int32", "\n", ")", "\n", "# Remove unwanted fields that come from the json file (if they exist)", "\n", "", "for", "k", "in", "[", "'date_captured'", ",", "'url'", ",", "'license'", ",", "'file_name'", "]", ":", "\n", "            ", "if", "k", "in", "entry", ":", "\n", "                ", "del", "entry", "[", "k", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.json_dataset.JsonDataset._add_gt_annotations": [[163, 250], ["json_dataset.JsonDataset.COCO.getAnnIds", "json_dataset.JsonDataset.COCO.loadAnns", "len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "enumerate", "numpy.append", "entry[].extend", "numpy.append", "numpy.append", "numpy.append", "scipy.sparse.csr_matrix", "numpy.append", "numpy.append", "isinstance", "utils.xywh_to_xyxy", "utils.xywh_to_xyxy", "utils.clip_xyxy_to_image", "utils.clip_xyxy_to_image", "numpy.zeros", "entry[].toarray", "numpy.append", "valid_objs.append", "valid_segms.append", "json_dataset.JsonDataset._get_gt_keypoints", "numpy.sum", "len"], "methods", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.blob.zeros", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.blob.zeros", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.blob.zeros", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.blob.zeros", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.blob.zeros", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.blob.zeros", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.boxes.xywh_to_xyxy", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.boxes.xywh_to_xyxy", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.boxes.clip_xyxy_to_image", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.boxes.clip_xyxy_to_image", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.blob.zeros", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.json_dataset.JsonDataset._get_gt_keypoints"], ["", "", "", "def", "_add_gt_annotations", "(", "self", ",", "entry", ")", ":", "\n", "        ", "\"\"\"Add ground truth annotation metadata to an roidb entry.\"\"\"", "\n", "ann_ids", "=", "self", ".", "COCO", ".", "getAnnIds", "(", "imgIds", "=", "entry", "[", "'id'", "]", ",", "iscrowd", "=", "None", ")", "\n", "objs", "=", "self", ".", "COCO", ".", "loadAnns", "(", "ann_ids", ")", "\n", "# Sanitize bboxes -- some are invalid", "\n", "valid_objs", "=", "[", "]", "\n", "valid_segms", "=", "[", "]", "\n", "width", "=", "entry", "[", "'width'", "]", "\n", "height", "=", "entry", "[", "'height'", "]", "\n", "for", "obj", "in", "objs", ":", "\n", "# crowd regions are RLE encoded and stored as dicts", "\n", "            ", "if", "isinstance", "(", "obj", "[", "'segmentation'", "]", ",", "list", ")", ":", "\n", "# Valid polygons have >= 3 points, so require >= 6 coordinates", "\n", "                ", "obj", "[", "'segmentation'", "]", "=", "[", "\n", "p", "for", "p", "in", "obj", "[", "'segmentation'", "]", "if", "len", "(", "p", ")", ">=", "6", "\n", "]", "\n", "", "if", "obj", "[", "'area'", "]", "<", "cfg", ".", "TRAIN", ".", "GT_MIN_AREA", ":", "\n", "                ", "continue", "\n", "", "if", "'ignore'", "in", "obj", "and", "obj", "[", "'ignore'", "]", "==", "1", ":", "\n", "                ", "continue", "\n", "# Convert form (x1, y1, w, h) to (x1, y1, x2, y2)", "\n", "", "x1", ",", "y1", ",", "x2", ",", "y2", "=", "box_utils", ".", "xywh_to_xyxy", "(", "obj", "[", "'bbox'", "]", ")", "\n", "x1", ",", "y1", ",", "x2", ",", "y2", "=", "box_utils", ".", "clip_xyxy_to_image", "(", "\n", "x1", ",", "y1", ",", "x2", ",", "y2", ",", "height", ",", "width", "\n", ")", "\n", "# Require non-zero seg area and more than 1x1 box size", "\n", "if", "obj", "[", "'area'", "]", ">", "0", "and", "x2", ">", "x1", "and", "y2", ">", "y1", ":", "\n", "                ", "obj", "[", "'clean_bbox'", "]", "=", "[", "x1", ",", "y1", ",", "x2", ",", "y2", "]", "\n", "valid_objs", ".", "append", "(", "obj", ")", "\n", "valid_segms", ".", "append", "(", "obj", "[", "'segmentation'", "]", ")", "\n", "", "", "num_valid_objs", "=", "len", "(", "valid_objs", ")", "\n", "\n", "boxes", "=", "np", ".", "zeros", "(", "(", "num_valid_objs", ",", "4", ")", ",", "dtype", "=", "entry", "[", "'boxes'", "]", ".", "dtype", ")", "\n", "gt_classes", "=", "np", ".", "zeros", "(", "(", "num_valid_objs", ")", ",", "dtype", "=", "entry", "[", "'gt_classes'", "]", ".", "dtype", ")", "\n", "gt_overlaps", "=", "np", ".", "zeros", "(", "\n", "(", "num_valid_objs", ",", "self", ".", "num_classes", ")", ",", "\n", "dtype", "=", "entry", "[", "'gt_overlaps'", "]", ".", "dtype", "\n", ")", "\n", "seg_areas", "=", "np", ".", "zeros", "(", "(", "num_valid_objs", ")", ",", "dtype", "=", "entry", "[", "'seg_areas'", "]", ".", "dtype", ")", "\n", "is_crowd", "=", "np", ".", "zeros", "(", "(", "num_valid_objs", ")", ",", "dtype", "=", "entry", "[", "'is_crowd'", "]", ".", "dtype", ")", "\n", "box_to_gt_ind_map", "=", "np", ".", "zeros", "(", "\n", "(", "num_valid_objs", ")", ",", "dtype", "=", "entry", "[", "'box_to_gt_ind_map'", "]", ".", "dtype", "\n", ")", "\n", "if", "self", ".", "keypoints", "is", "not", "None", ":", "\n", "            ", "gt_keypoints", "=", "np", ".", "zeros", "(", "\n", "(", "num_valid_objs", ",", "3", ",", "self", ".", "num_keypoints", ")", ",", "\n", "dtype", "=", "entry", "[", "'gt_keypoints'", "]", ".", "dtype", "\n", ")", "\n", "\n", "", "im_has_visible_keypoints", "=", "False", "\n", "for", "ix", ",", "obj", "in", "enumerate", "(", "valid_objs", ")", ":", "\n", "            ", "cls", "=", "self", ".", "json_category_id_to_contiguous_id", "[", "obj", "[", "'category_id'", "]", "]", "\n", "boxes", "[", "ix", ",", ":", "]", "=", "obj", "[", "'clean_bbox'", "]", "\n", "gt_classes", "[", "ix", "]", "=", "cls", "\n", "seg_areas", "[", "ix", "]", "=", "obj", "[", "'area'", "]", "\n", "is_crowd", "[", "ix", "]", "=", "obj", "[", "'iscrowd'", "]", "\n", "box_to_gt_ind_map", "[", "ix", "]", "=", "ix", "\n", "if", "self", ".", "keypoints", "is", "not", "None", ":", "\n", "                ", "gt_keypoints", "[", "ix", ",", ":", ",", ":", "]", "=", "self", ".", "_get_gt_keypoints", "(", "obj", ")", "\n", "if", "np", ".", "sum", "(", "gt_keypoints", "[", "ix", ",", "2", ",", ":", "]", ")", ">", "0", ":", "\n", "                    ", "im_has_visible_keypoints", "=", "True", "\n", "", "", "if", "obj", "[", "'iscrowd'", "]", ":", "\n", "# Set overlap to -1 for all classes for crowd objects", "\n", "# so they will be excluded during training", "\n", "                ", "gt_overlaps", "[", "ix", ",", ":", "]", "=", "-", "1.0", "\n", "", "else", ":", "\n", "                ", "gt_overlaps", "[", "ix", ",", "cls", "]", "=", "1.0", "\n", "", "", "entry", "[", "'boxes'", "]", "=", "np", ".", "append", "(", "entry", "[", "'boxes'", "]", ",", "boxes", ",", "axis", "=", "0", ")", "\n", "entry", "[", "'segms'", "]", ".", "extend", "(", "valid_segms", ")", "\n", "# To match the original implementation:", "\n", "# entry['boxes'] = np.append(", "\n", "#     entry['boxes'], boxes.astype(np.int).astype(np.float), axis=0)", "\n", "entry", "[", "'gt_classes'", "]", "=", "np", ".", "append", "(", "entry", "[", "'gt_classes'", "]", ",", "gt_classes", ")", "\n", "entry", "[", "'seg_areas'", "]", "=", "np", ".", "append", "(", "entry", "[", "'seg_areas'", "]", ",", "seg_areas", ")", "\n", "entry", "[", "'gt_overlaps'", "]", "=", "np", ".", "append", "(", "\n", "entry", "[", "'gt_overlaps'", "]", ".", "toarray", "(", ")", ",", "gt_overlaps", ",", "axis", "=", "0", "\n", ")", "\n", "entry", "[", "'gt_overlaps'", "]", "=", "scipy", ".", "sparse", ".", "csr_matrix", "(", "entry", "[", "'gt_overlaps'", "]", ")", "\n", "entry", "[", "'is_crowd'", "]", "=", "np", ".", "append", "(", "entry", "[", "'is_crowd'", "]", ",", "is_crowd", ")", "\n", "entry", "[", "'box_to_gt_ind_map'", "]", "=", "np", ".", "append", "(", "\n", "entry", "[", "'box_to_gt_ind_map'", "]", ",", "box_to_gt_ind_map", "\n", ")", "\n", "if", "self", ".", "keypoints", "is", "not", "None", ":", "\n", "            ", "entry", "[", "'gt_keypoints'", "]", "=", "np", ".", "append", "(", "\n", "entry", "[", "'gt_keypoints'", "]", ",", "gt_keypoints", ",", "axis", "=", "0", "\n", ")", "\n", "entry", "[", "'has_visible_keypoints'", "]", "=", "im_has_visible_keypoints", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.json_dataset.JsonDataset._add_proposals_from_file": [[251, 281], ["logger.info", "json_dataset._sort_proposals", "enumerate", "json_dataset._merge_proposal_boxes_into_roidb", "open", "cPickle.load", "utils.clip_boxes_to_image", "utils.clip_boxes_to_image", "utils.unique_boxes", "utils.unique_boxes", "utils.filter_small_boxes", "utils.filter_small_boxes", "box_list.append", "json_dataset._filter_crowd_proposals", "logger.info", "len"], "methods", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.json_dataset._sort_proposals", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.json_dataset._merge_proposal_boxes_into_roidb", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.boxes.clip_boxes_to_image", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.boxes.clip_boxes_to_image", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.boxes.unique_boxes", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.boxes.unique_boxes", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.boxes.filter_small_boxes", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.boxes.filter_small_boxes", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.json_dataset._filter_crowd_proposals"], ["", "", "def", "_add_proposals_from_file", "(", "\n", "self", ",", "roidb", ",", "proposal_file", ",", "min_proposal_size", ",", "top_k", ",", "crowd_thresh", "\n", ")", ":", "\n", "        ", "\"\"\"Add proposals from a proposals file to an roidb.\"\"\"", "\n", "logger", ".", "info", "(", "'Loading proposals from: {}'", ".", "format", "(", "proposal_file", ")", ")", "\n", "with", "open", "(", "proposal_file", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "proposals", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "id_field", "=", "'indexes'", "if", "'indexes'", "in", "proposals", "else", "'ids'", "# compat fix", "\n", "_sort_proposals", "(", "proposals", ",", "id_field", ")", "\n", "box_list", "=", "[", "]", "\n", "for", "i", ",", "entry", "in", "enumerate", "(", "roidb", ")", ":", "\n", "            ", "if", "i", "%", "2500", "==", "0", ":", "\n", "                ", "logger", ".", "info", "(", "' {:d}/{:d}'", ".", "format", "(", "i", "+", "1", ",", "len", "(", "roidb", ")", ")", ")", "\n", "", "boxes", "=", "proposals", "[", "'boxes'", "]", "[", "i", "]", "\n", "# Sanity check that these boxes are for the correct image id", "\n", "assert", "entry", "[", "'id'", "]", "==", "proposals", "[", "id_field", "]", "[", "i", "]", "\n", "# Remove duplicate boxes and very small boxes and then take top k", "\n", "boxes", "=", "box_utils", ".", "clip_boxes_to_image", "(", "\n", "boxes", ",", "entry", "[", "'height'", "]", ",", "entry", "[", "'width'", "]", "\n", ")", "\n", "keep", "=", "box_utils", ".", "unique_boxes", "(", "boxes", ")", "\n", "boxes", "=", "boxes", "[", "keep", ",", ":", "]", "\n", "keep", "=", "box_utils", ".", "filter_small_boxes", "(", "boxes", ",", "min_proposal_size", ")", "\n", "boxes", "=", "boxes", "[", "keep", ",", ":", "]", "\n", "if", "top_k", ">", "0", ":", "\n", "                ", "boxes", "=", "boxes", "[", ":", "top_k", ",", ":", "]", "\n", "", "box_list", ".", "append", "(", "boxes", ")", "\n", "", "_merge_proposal_boxes_into_roidb", "(", "roidb", ",", "box_list", ")", "\n", "if", "crowd_thresh", ">", "0", ":", "\n", "            ", "_filter_crowd_proposals", "(", "roidb", ",", "crowd_thresh", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.json_dataset.JsonDataset._init_keypoints": [[282, 310], ["json_dataset.JsonDataset.COCO.loadCats", "dict", "len", "zip", "range", "len"], "methods", ["None"], ["", "", "def", "_init_keypoints", "(", "self", ")", ":", "\n", "        ", "\"\"\"Initialize COCO keypoint information.\"\"\"", "\n", "self", ".", "keypoints", "=", "None", "\n", "self", ".", "keypoint_flip_map", "=", "None", "\n", "self", ".", "keypoints_to_id_map", "=", "None", "\n", "self", ".", "num_keypoints", "=", "0", "\n", "# Thus far only the 'person' category has keypoints", "\n", "if", "'person'", "in", "self", ".", "category_to_id_map", ":", "\n", "            ", "cat_info", "=", "self", ".", "COCO", ".", "loadCats", "(", "[", "self", ".", "category_to_id_map", "[", "'person'", "]", "]", ")", "\n", "", "else", ":", "\n", "            ", "return", "\n", "\n", "# Check if the annotations contain keypoint data or not", "\n", "", "if", "'keypoints'", "in", "cat_info", "[", "0", "]", ":", "\n", "            ", "keypoints", "=", "cat_info", "[", "0", "]", "[", "'keypoints'", "]", "\n", "self", ".", "keypoints_to_id_map", "=", "dict", "(", "\n", "zip", "(", "keypoints", ",", "range", "(", "len", "(", "keypoints", ")", ")", ")", ")", "\n", "self", ".", "keypoints", "=", "keypoints", "\n", "self", ".", "num_keypoints", "=", "len", "(", "keypoints", ")", "\n", "self", ".", "keypoint_flip_map", "=", "{", "\n", "'left_eye'", ":", "'right_eye'", ",", "\n", "'left_ear'", ":", "'right_ear'", ",", "\n", "'left_shoulder'", ":", "'right_shoulder'", ",", "\n", "'left_elbow'", ":", "'right_elbow'", ",", "\n", "'left_wrist'", ":", "'right_wrist'", ",", "\n", "'left_hip'", ":", "'right_hip'", ",", "\n", "'left_knee'", ":", "'right_knee'", ",", "\n", "'left_ankle'", ":", "'right_ankle'", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.json_dataset.JsonDataset._get_gt_keypoints": [[311, 329], ["numpy.array", "numpy.ones", "range", "len"], "methods", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.blob.ones"], ["", "", "def", "_get_gt_keypoints", "(", "self", ",", "obj", ")", ":", "\n", "        ", "\"\"\"Return ground truth keypoints.\"\"\"", "\n", "if", "'keypoints'", "not", "in", "obj", ":", "\n", "            ", "return", "None", "\n", "", "kp", "=", "np", ".", "array", "(", "obj", "[", "'keypoints'", "]", ")", "\n", "x", "=", "kp", "[", "0", ":", ":", "3", "]", "# 0-indexed x coordinates", "\n", "y", "=", "kp", "[", "1", ":", ":", "3", "]", "# 0-indexed y coordinates", "\n", "# 0: not labeled; 1: labeled, not inside mask;", "\n", "# 2: labeled and inside mask", "\n", "v", "=", "kp", "[", "2", ":", ":", "3", "]", "\n", "num_keypoints", "=", "len", "(", "obj", "[", "'keypoints'", "]", ")", "/", "3", "\n", "assert", "num_keypoints", "==", "self", ".", "num_keypoints", "\n", "gt_kps", "=", "np", ".", "ones", "(", "(", "3", ",", "self", ".", "num_keypoints", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_keypoints", ")", ":", "\n", "            ", "gt_kps", "[", "0", ",", "i", "]", "=", "x", "[", "i", "]", "\n", "gt_kps", "[", "1", ",", "i", "]", "=", "y", "[", "i", "]", "\n", "gt_kps", "[", "2", ",", "i", "]", "=", "v", "[", "i", "]", "\n", "", "return", "gt_kps", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.json_dataset.add_proposals": [[331, 345], ["range", "json_dataset._merge_proposal_boxes_into_roidb", "json_dataset._add_class_assignments", "len", "box_list.append", "json_dataset._filter_crowd_proposals", "numpy.where"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.json_dataset._merge_proposal_boxes_into_roidb", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.json_dataset._add_class_assignments", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.json_dataset._filter_crowd_proposals"], ["", "", "def", "add_proposals", "(", "roidb", ",", "rois", ",", "scales", ",", "crowd_thresh", ",", "tmp", "=", "None", ")", ":", "\n", "    ", "\"\"\"Add proposal boxes (rois) to an roidb that has ground-truth annotations\n    but no proposals. If the proposals are not at the original image scale,\n    specify the scale factor that separate them in scales.\n    \"\"\"", "\n", "box_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "roidb", ")", ")", ":", "\n", "        ", "inv_im_scale", "=", "1.", "/", "scales", "[", "i", "]", "\n", "idx", "=", "np", ".", "where", "(", "rois", "[", ":", ",", "0", "]", "==", "i", ")", "[", "0", "]", "\n", "box_list", ".", "append", "(", "rois", "[", "idx", ",", "1", ":", "]", "*", "inv_im_scale", ")", "\n", "", "_merge_proposal_boxes_into_roidb", "(", "roidb", ",", "box_list", ",", "tmp", ")", "\n", "if", "crowd_thresh", ">", "0", ":", "\n", "        ", "_filter_crowd_proposals", "(", "roidb", ",", "crowd_thresh", ")", "\n", "", "_add_class_assignments", "(", "roidb", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.json_dataset._merge_proposal_boxes_into_roidb": [[347, 431], ["enumerate", "len", "len", "numpy.zeros", "numpy.append", "numpy.append", "numpy.append", "numpy.append", "scipy.sparse.csr_matrix", "numpy.append", "numpy.append", "numpy.ones", "numpy.where", "len", "utils.bbox_overlaps", "numpy.count_nonzero", "numpy.any", "box_utils.bbox_overlaps.argmax", "box_utils.bbox_overlaps.max", "boxes.astype", "numpy.zeros", "numpy.zeros", "entry[].toarray", "numpy.zeros", "box_to_gt_ind_map.astype", "boxes.astype", "gt_boxes.astype", "numpy.min", "print", "numpy.min", "numpy.histogram", "numpy.array", "numpy.where", "numpy.array", "numpy.array", "print"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.blob.zeros", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.blob.ones", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.blob.zeros", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.blob.zeros", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.blob.zeros"], ["", "def", "_merge_proposal_boxes_into_roidb", "(", "roidb", ",", "box_list", ",", "tmp", "=", "None", ")", ":", "\n", "    ", "\"\"\"Add proposal boxes to each roidb entry.\"\"\"", "\n", "assert", "len", "(", "box_list", ")", "==", "len", "(", "roidb", ")", "\n", "for", "i", ",", "entry", "in", "enumerate", "(", "roidb", ")", ":", "\n", "        ", "boxes", "=", "box_list", "[", "i", "]", "\n", "num_boxes", "=", "boxes", ".", "shape", "[", "0", "]", "\n", "gt_overlaps", "=", "np", ".", "zeros", "(", "\n", "(", "num_boxes", ",", "entry", "[", "'gt_overlaps'", "]", ".", "shape", "[", "1", "]", ")", ",", "\n", "dtype", "=", "entry", "[", "'gt_overlaps'", "]", ".", "dtype", "\n", ")", "\n", "box_to_gt_ind_map", "=", "-", "np", ".", "ones", "(", "\n", "(", "num_boxes", ")", ",", "dtype", "=", "entry", "[", "'box_to_gt_ind_map'", "]", ".", "dtype", "\n", ")", "\n", "\n", "# Note: unlike in other places, here we intentionally include all gt", "\n", "# rois, even ones marked as crowd. Boxes that overlap with crowds will", "\n", "# be filtered out later (see: _filter_crowd_proposals).", "\n", "gt_inds", "=", "np", ".", "where", "(", "entry", "[", "'gt_classes'", "]", ">", "0", ")", "[", "0", "]", "\n", "if", "len", "(", "gt_inds", ")", ">", "0", ":", "\n", "            ", "gt_boxes", "=", "entry", "[", "'boxes'", "]", "[", "gt_inds", ",", ":", "]", "\n", "gt_classes", "=", "entry", "[", "'gt_classes'", "]", "[", "gt_inds", "]", "\n", "proposal_to_gt_overlaps", "=", "box_utils", ".", "bbox_overlaps", "(", "\n", "boxes", ".", "astype", "(", "dtype", "=", "np", ".", "float32", ",", "copy", "=", "False", ")", ",", "\n", "gt_boxes", ".", "astype", "(", "dtype", "=", "np", ".", "float32", ",", "copy", "=", "False", ")", "\n", ")", "\n", "\n", "gt_hist", "=", "np", ".", "count_nonzero", "(", "proposal_to_gt_overlaps", ">", "0.5", ",", "axis", "=", "0", ")", "\n", "if", "np", ".", "any", "(", "gt_hist", "<", "5", ")", ":", "\n", "                ", "gt_min_size", "=", "np", ".", "min", "(", "np", ".", "array", "(", "[", "gt_boxes", "[", ":", ",", "2", "]", "-", "gt_boxes", "[", ":", ",", "0", "]", ",", "\n", "gt_boxes", "[", ":", ",", "3", "]", "-", "gt_boxes", "[", ":", ",", "1", "]", "]", ")", ",", "axis", "=", "0", ")", ";", "\n", "print", "(", "'found non-coverd GT overlap histogram:'", ",", "gt_hist", ",", "'with gt sizes:'", ",", "gt_min_size", ")", "\n", "\n", "", "if", "tmp", "is", "not", "None", "and", "False", ":", "\n", "                ", "gt_min_size", "=", "np", ".", "min", "(", "np", ".", "array", "(", "[", "gt_boxes", "[", ":", ",", "2", "]", "-", "gt_boxes", "[", ":", ",", "0", "]", ",", "\n", "gt_boxes", "[", ":", ",", "3", "]", "-", "gt_boxes", "[", ":", ",", "1", "]", "]", ")", ",", "axis", "=", "0", ")", ";", "\n", "\n", "h", "=", "np", ".", "histogram", "(", "gt_min_size", ",", "weights", "=", "gt_hist", ",", "bins", "=", "100", ",", "range", "=", "(", "20", ",", "400", ")", ")", "\n", "tmp", "[", "'i'", "]", "=", "tmp", "[", "'i'", "]", "+", "1", "\n", "\n", "h", "=", "np", ".", "array", "(", "h", ")", "\n", "\n", "if", "tmp", "[", "'i'", "]", "==", "1", ":", "\n", "                    ", "tmp", "[", "'val'", "]", "=", "h", "\n", "", "else", ":", "\n", "                    ", "tmp", "[", "'val'", "]", "=", "tmp", "[", "'val'", "]", "+", "h", "\n", "\n", "", "if", "tmp", "[", "'i'", "]", "%", "10", "==", "0", ":", "\n", "                    ", "print", "(", "tmp", "[", "'val'", "]", ")", "\n", "\n", "# Gt box that overlaps each input box the most", "\n", "# (ties are broken arbitrarily by class order)", "\n", "", "", "argmaxes", "=", "proposal_to_gt_overlaps", ".", "argmax", "(", "axis", "=", "1", ")", "\n", "# Amount of that overlap", "\n", "maxes", "=", "proposal_to_gt_overlaps", ".", "max", "(", "axis", "=", "1", ")", "\n", "# Those boxes with non-zero overlap with gt boxes", "\n", "I", "=", "np", ".", "where", "(", "maxes", ">", "0", ")", "[", "0", "]", "\n", "# Record max overlaps with the class of the appropriate gt box", "\n", "gt_overlaps", "[", "I", ",", "gt_classes", "[", "argmaxes", "[", "I", "]", "]", "]", "=", "maxes", "[", "I", "]", "\n", "box_to_gt_ind_map", "[", "I", "]", "=", "gt_inds", "[", "argmaxes", "[", "I", "]", "]", "\n", "", "entry", "[", "'boxes'", "]", "=", "np", ".", "append", "(", "\n", "entry", "[", "'boxes'", "]", ",", "\n", "boxes", ".", "astype", "(", "entry", "[", "'boxes'", "]", ".", "dtype", ",", "copy", "=", "False", ")", ",", "\n", "axis", "=", "0", "\n", ")", "\n", "entry", "[", "'gt_classes'", "]", "=", "np", ".", "append", "(", "\n", "entry", "[", "'gt_classes'", "]", ",", "\n", "np", ".", "zeros", "(", "(", "num_boxes", ")", ",", "dtype", "=", "entry", "[", "'gt_classes'", "]", ".", "dtype", ")", "\n", ")", "\n", "entry", "[", "'seg_areas'", "]", "=", "np", ".", "append", "(", "\n", "entry", "[", "'seg_areas'", "]", ",", "\n", "np", ".", "zeros", "(", "(", "num_boxes", ")", ",", "dtype", "=", "entry", "[", "'seg_areas'", "]", ".", "dtype", ")", "\n", ")", "\n", "entry", "[", "'gt_overlaps'", "]", "=", "np", ".", "append", "(", "\n", "entry", "[", "'gt_overlaps'", "]", ".", "toarray", "(", ")", ",", "gt_overlaps", ",", "axis", "=", "0", "\n", ")", "\n", "entry", "[", "'gt_overlaps'", "]", "=", "scipy", ".", "sparse", ".", "csr_matrix", "(", "entry", "[", "'gt_overlaps'", "]", ")", "\n", "entry", "[", "'is_crowd'", "]", "=", "np", ".", "append", "(", "\n", "entry", "[", "'is_crowd'", "]", ",", "\n", "np", ".", "zeros", "(", "(", "num_boxes", ")", ",", "dtype", "=", "entry", "[", "'is_crowd'", "]", ".", "dtype", ")", "\n", ")", "\n", "entry", "[", "'box_to_gt_ind_map'", "]", "=", "np", ".", "append", "(", "\n", "entry", "[", "'box_to_gt_ind_map'", "]", ",", "\n", "box_to_gt_ind_map", ".", "astype", "(", "\n", "entry", "[", "'box_to_gt_ind_map'", "]", ".", "dtype", ",", "copy", "=", "False", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.json_dataset._filter_crowd_proposals": [[435, 453], ["entry[].toarray", "utils.xyxy_to_xywh", "utils.xyxy_to_xywh", "pycocotools.mask.iou", "scipy.sparse.csr_matrix", "numpy.where", "numpy.where", "len", "numpy.where", "len", "len", "int", "COCOmask.iou.max"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.boxes.xyxy_to_xywh", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.boxes.xyxy_to_xywh"], ["", "", "def", "_filter_crowd_proposals", "(", "roidb", ",", "crowd_thresh", ")", ":", "\n", "    ", "\"\"\"Finds proposals that are inside crowd regions and marks them as\n    overlap = -1 with each ground-truth rois, which means they will be excluded\n    from training.\n    \"\"\"", "\n", "for", "entry", "in", "roidb", ":", "\n", "        ", "gt_overlaps", "=", "entry", "[", "'gt_overlaps'", "]", ".", "toarray", "(", ")", "\n", "crowd_inds", "=", "np", ".", "where", "(", "entry", "[", "'is_crowd'", "]", "==", "1", ")", "[", "0", "]", "\n", "non_gt_inds", "=", "np", ".", "where", "(", "entry", "[", "'gt_classes'", "]", "==", "0", ")", "[", "0", "]", "\n", "if", "len", "(", "crowd_inds", ")", "==", "0", "or", "len", "(", "non_gt_inds", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "", "crowd_boxes", "=", "box_utils", ".", "xyxy_to_xywh", "(", "entry", "[", "'boxes'", "]", "[", "crowd_inds", ",", ":", "]", ")", "\n", "non_gt_boxes", "=", "box_utils", ".", "xyxy_to_xywh", "(", "entry", "[", "'boxes'", "]", "[", "non_gt_inds", ",", ":", "]", ")", "\n", "iscrowd_flags", "=", "[", "int", "(", "True", ")", "]", "*", "len", "(", "crowd_inds", ")", "\n", "ious", "=", "COCOmask", ".", "iou", "(", "non_gt_boxes", ",", "crowd_boxes", ",", "iscrowd_flags", ")", "\n", "bad_inds", "=", "np", ".", "where", "(", "ious", ".", "max", "(", "axis", "=", "1", ")", ">", "crowd_thresh", ")", "[", "0", "]", "\n", "gt_overlaps", "[", "non_gt_inds", "[", "bad_inds", "]", ",", ":", "]", "=", "-", "1", "\n", "entry", "[", "'gt_overlaps'", "]", "=", "scipy", ".", "sparse", ".", "csr_matrix", "(", "gt_overlaps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.json_dataset._add_class_assignments": [[455, 474], ["entry[].toarray", "entry[].toarray.max", "entry[].toarray.argmax", "all", "all", "numpy.where", "numpy.where"], "function", ["None"], ["", "", "def", "_add_class_assignments", "(", "roidb", ")", ":", "\n", "    ", "\"\"\"Compute object category assignment for each box associated with each\n    roidb entry.\n    \"\"\"", "\n", "for", "entry", "in", "roidb", ":", "\n", "        ", "gt_overlaps", "=", "entry", "[", "'gt_overlaps'", "]", ".", "toarray", "(", ")", "\n", "# max overlap with gt over classes (columns)", "\n", "max_overlaps", "=", "gt_overlaps", ".", "max", "(", "axis", "=", "1", ")", "\n", "# gt class that had the max overlap", "\n", "max_classes", "=", "gt_overlaps", ".", "argmax", "(", "axis", "=", "1", ")", "\n", "entry", "[", "'max_classes'", "]", "=", "max_classes", "\n", "entry", "[", "'max_overlaps'", "]", "=", "max_overlaps", "\n", "# sanity checks", "\n", "# if max overlap is 0, the class must be background (class 0)", "\n", "zero_inds", "=", "np", ".", "where", "(", "max_overlaps", "==", "0", ")", "[", "0", "]", "\n", "assert", "all", "(", "max_classes", "[", "zero_inds", "]", "==", "0", ")", "\n", "# if max overlap > 0, the class must be a fg class (not class 0)", "\n", "nonzero_inds", "=", "np", ".", "where", "(", "max_overlaps", ">", "0", ")", "[", "0", "]", "\n", "assert", "all", "(", "max_classes", "[", "nonzero_inds", "]", "!=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.json_dataset._sort_proposals": [[476, 482], ["numpy.argsort"], "function", ["None"], ["", "", "def", "_sort_proposals", "(", "proposals", ",", "id_field", ")", ":", "\n", "    ", "\"\"\"Sort proposals by the specified id field.\"\"\"", "\n", "order", "=", "np", ".", "argsort", "(", "proposals", "[", "id_field", "]", ")", "\n", "fields_to_sort", "=", "[", "'boxes'", ",", "id_field", ",", "'scores'", "]", "\n", "for", "k", "in", "fields_to_sort", ":", "\n", "        ", "proposals", "[", "k", "]", "=", "[", "proposals", "[", "k", "]", "[", "i", "]", "for", "i", "in", "order", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.dummy_datasets.get_coco_dataset": [[28, 48], ["utils.collections.AttrDict", "enumerate"], "function", ["None"], ["def", "get_coco_dataset", "(", ")", ":", "\n", "    ", "\"\"\"A dummy COCO dataset that includes only the 'classes' field.\"\"\"", "\n", "ds", "=", "AttrDict", "(", ")", "\n", "classes", "=", "[", "\n", "'__background__'", ",", "'person'", ",", "'bicycle'", ",", "'car'", ",", "'motorcycle'", ",", "'airplane'", ",", "\n", "'bus'", ",", "'train'", ",", "'truck'", ",", "'boat'", ",", "'traffic light'", ",", "'fire hydrant'", ",", "\n", "'stop sign'", ",", "'parking meter'", ",", "'bench'", ",", "'bird'", ",", "'cat'", ",", "'dog'", ",", "'horse'", ",", "\n", "'sheep'", ",", "'cow'", ",", "'elephant'", ",", "'bear'", ",", "'zebra'", ",", "'giraffe'", ",", "'backpack'", ",", "\n", "'umbrella'", ",", "'handbag'", ",", "'tie'", ",", "'suitcase'", ",", "'frisbee'", ",", "'skis'", ",", "\n", "'snowboard'", ",", "'sports ball'", ",", "'kite'", ",", "'baseball bat'", ",", "'baseball glove'", ",", "\n", "'skateboard'", ",", "'surfboard'", ",", "'tennis racket'", ",", "'bottle'", ",", "'wine glass'", ",", "\n", "'cup'", ",", "'fork'", ",", "'knife'", ",", "'spoon'", ",", "'bowl'", ",", "'banana'", ",", "'apple'", ",", "'sandwich'", ",", "\n", "'orange'", ",", "'broccoli'", ",", "'carrot'", ",", "'hot dog'", ",", "'pizza'", ",", "'donut'", ",", "'cake'", ",", "\n", "'chair'", ",", "'couch'", ",", "'potted plant'", ",", "'bed'", ",", "'dining table'", ",", "'toilet'", ",", "'tv'", ",", "\n", "'laptop'", ",", "'mouse'", ",", "'remote'", ",", "'keyboard'", ",", "'cell phone'", ",", "'microwave'", ",", "\n", "'oven'", ",", "'toaster'", ",", "'sink'", ",", "'refrigerator'", ",", "'book'", ",", "'clock'", ",", "'vase'", ",", "\n", "'scissors'", ",", "'teddy bear'", ",", "'hair drier'", ",", "'toothbrush'", "\n", "]", "\n", "ds", ".", "classes", "=", "{", "i", ":", "name", "for", "i", ",", "name", "in", "enumerate", "(", "classes", ")", "}", "\n", "return", "ds", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.dummy_datasets.get_dfg200_dataset": [[50, 84], ["utils.collections.AttrDict", "enumerate"], "function", ["None"], ["", "def", "get_dfg200_dataset", "(", ")", ":", "\n", "    ", "\"\"\"A dummy DFG200 dataset that includes only the 'classes' field.\"\"\"", "\n", "ds", "=", "AttrDict", "(", ")", "\n", "classes", "=", "[", "\n", "'__background__'", ",", "'I-1'", ",", "'I-1.1'", ",", "'I-10'", ",", "'I-11'", ",", "'I-13'", ",", "'I-13.1'", ",", "'I-14'", ",", "\n", "'I-15'", ",", "'I-16'", ",", "'I-17'", ",", "'I-18'", ",", "'I-19'", ",", "'I-2'", ",", "'I-2.1'", ",", "'I-20'", ",", "'I-25'", ",", "'I-27'", ",", "\n", "'I-28'", ",", "'I-28.1'", ",", "'I-29'", ",", "'I-29.1'", ",", "'I-3'", ",", "'I-30'", ",", "'I-32'", ",", "'I-34'", ",", "'I-36'", ",", "\n", "'I-37'", ",", "'I-38'", ",", "'I-39-1'", ",", "'I-39-2'", ",", "'I-39-3'", ",", "'I-4'", ",", "'I-5'", ",", "'I-5.1'", ",", "'I-5.2'", ",", "\n", "'I-8'", ",", "'I-9'", ",", "'II-1'", ",", "'II-10.1'", ",", "'II-14'", ",", "'II-17'", ",", "'II-18'", ",", "'II-19-4'", ",", "'II-2'", ",", "\n", "'II-21'", ",", "'II-22'", ",", "'II-23'", ",", "'II-26'", ",", "'II-26.1'", ",", "'II-28'", ",", "'II-3'", ",", "'II-30-10'", ",", "\n", "'II-30-30'", ",", "'II-30-40'", ",", "'II-30-50'", ",", "'II-30-60'", ",", "'II-30-70'", ",", "'II-32'", ",", "'II-33'", ",", "\n", "'II-34'", ",", "'II-35'", ",", "'II-39'", ",", "'II-4'", ",", "'II-40'", ",", "'II-41'", ",", "'II-42'", ",", "'II-42.1'", ",", "'II-43'", ",", "\n", "'II-45'", ",", "'II-45.1'", ",", "'II-45.2'", ",", "'II-46'", ",", "'II-46.1'", ",", "'II-46.2'", ",", "'II-47'", ",", "'II-47.1'", ",", "\n", "'II-48'", ",", "'II-6'", ",", "'II-7'", ",", "'II-7.1'", ",", "'II-8'", ",", "'III-1'", ",", "'III-10'", ",", "'III-105'", ",", "\n", "'III-105.1'", ",", "'III-105.3'", ",", "'III-107-1'", ",", "'III-107-2'", ",", "'III-107.1-1'", ",", "\n", "'III-107.1-2'", ",", "'III-107.2-1'", ",", "'III-107.2-2'", ",", "'III-112'", ",", "'III-113'", ",", "'III-12'", ",", "\n", "'III-120'", ",", "'III-120-1'", ",", "'III-120.1'", ",", "'III-123'", ",", "'III-124'", ",", "'III-14'", ",", "'III-14.1'", ",", "\n", "'III-15'", ",", "'III-16'", ",", "'III-18-40'", ",", "'III-18-50'", ",", "'III-18-60'", ",", "'III-18-70'", ",", "'III-2'", ",", "\n", "'III-202-5'", ",", "'III-203-2'", ",", "'III-206-1'", ",", "'III-21'", ",", "'III-23'", ",", "'III-25'", ",", "'III-25.1'", ",", "\n", "'III-27'", ",", "'III-29-30'", ",", "'III-29-40'", ",", "'III-3'", ",", "'III-30-30'", ",", "'III-33'", ",", "'III-34'", ",", "\n", "'III-35'", ",", "'III-37'", ",", "'III-39'", ",", "'III-40'", ",", "'III-42'", ",", "'III-43'", ",", "'III-45'", ",", "'III-46'", ",", "\n", "'III-47'", ",", "'III-5'", ",", "'III-50'", ",", "'III-54'", ",", "'III-59'", ",", "'III-6'", ",", "'III-64'", ",", "'III-68'", ",", "\n", "'III-74'", ",", "'III-77'", ",", "'III-78'", ",", "'III-8-1'", ",", "'III-84'", ",", "'III-84-1'", ",", "'III-85-2'", ",", "\n", "'III-85-3'", ",", "'III-85.1'", ",", "'III-86-1'", ",", "'III-86-2'", ",", "'III-87'", ",", "'III-90'", ",", "'III-90.1'", ",", "\n", "'III-90.2'", ",", "'III-91'", ",", "'IV-1'", ",", "'IV-1.1'", ",", "'IV-10'", ",", "'IV-11'", ",", "'IV-12'", ",", "'IV-12.1'", ",", "\n", "'IV-13-1'", ",", "'IV-13-2'", ",", "'IV-13-3'", ",", "'IV-13-4'", ",", "'IV-13-5'", ",", "'IV-13-6'", ",", "'IV-13.1-2'", ",", "\n", "'IV-13.1-3'", ",", "'IV-13.1-4'", ",", "'IV-16'", ",", "'IV-17'", ",", "'IV-18'", ",", "'IV-2'", ",", "'IV-20-1'", ",", "\n", "'IV-3-1'", ",", "'IV-3-2'", ",", "'IV-3-4'", ",", "'IV-3-5'", ",", "'IV-5'", ",", "'IV-6'", ",", "'VI-2.1'", ",", "'VI-3-1'", ",", "\n", "'VI-3-2'", ",", "'VI-3.1-1'", ",", "'VI-3.1-2'", ",", "'VI-8'", ",", "'VII-4'", ",", "'VII-4-1'", ",", "'VII-4-2'", ",", "\n", "'VII-4.1-1'", ",", "'VII-4.3'", ",", "'VII-4.3-1'", ",", "'VII-4.3-2'", ",", "'VII-4.4-1'", ",", "'VII-4.4-2'", ",", "\n", "'X-1.1'", ",", "'X-1.2'", ",", "'X-4'", ",", "'X-6-3'", "\n", "]", "\n", "ds", ".", "classes", "=", "{", "i", ":", "name", "for", "i", ",", "name", "in", "enumerate", "(", "classes", ")", "}", "\n", "return", "ds", "", "", ""]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.voc_dataset_evaluator.evaluate_boxes": [[38, 56], ["voc_dataset_evaluator._write_voc_results_files", "voc_dataset_evaluator._do_python_eval", "voc_dataset_evaluator._do_matlab_eval", "str", "shutil.copy", "os.remove", "uuid.uuid4"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.voc_dataset_evaluator._write_voc_results_files", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.voc_dataset_evaluator._do_python_eval", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.voc_dataset_evaluator._do_matlab_eval"], ["def", "evaluate_boxes", "(", "\n", "json_dataset", ",", "\n", "all_boxes", ",", "\n", "output_dir", ",", "\n", "use_salt", "=", "True", ",", "\n", "cleanup", "=", "True", ",", "\n", "use_matlab", "=", "False", "\n", ")", ":", "\n", "    ", "salt", "=", "'_{}'", ".", "format", "(", "str", "(", "uuid", ".", "uuid4", "(", ")", ")", ")", "if", "use_salt", "else", "''", "\n", "filenames", "=", "_write_voc_results_files", "(", "json_dataset", ",", "all_boxes", ",", "salt", ")", "\n", "_do_python_eval", "(", "json_dataset", ",", "salt", ",", "output_dir", ")", "\n", "if", "use_matlab", ":", "\n", "        ", "_do_matlab_eval", "(", "json_dataset", ",", "salt", ",", "output_dir", ")", "\n", "", "if", "cleanup", ":", "\n", "        ", "for", "filename", "in", "filenames", ":", "\n", "            ", "shutil", ".", "copy", "(", "filename", ",", "output_dir", ")", "\n", "os", ".", "remove", "(", "filename", ")", "\n", "", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.voc_dataset_evaluator._write_voc_results_files": [[58, 93], ["os.path.exists", "json_dataset.get_roidb", "enumerate", "enumerate", "voc_dataset_evaluator.voc_info", "open", "logger.info", "_get_voc_results_file_template().format", "filenames.append", "x.strip", "os.path.splitext", "len", "len", "open", "enumerate", "f.readlines", "voc_dataset_evaluator._get_voc_results_file_template", "range", "os.path.split", "type", "f.write", "len"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.rpn_generator.get_roidb", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.voc_dataset_evaluator.voc_info", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.voc_dataset_evaluator._get_voc_results_file_template"], ["", "def", "_write_voc_results_files", "(", "json_dataset", ",", "all_boxes", ",", "salt", ")", ":", "\n", "    ", "filenames", "=", "[", "]", "\n", "image_set_path", "=", "voc_info", "(", "json_dataset", ")", "[", "'image_set_path'", "]", "\n", "assert", "os", ".", "path", ".", "exists", "(", "image_set_path", ")", ",", "'Image set path does not exist: {}'", ".", "format", "(", "image_set_path", ")", "\n", "with", "open", "(", "image_set_path", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "image_index", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "f", ".", "readlines", "(", ")", "]", "\n", "# Sanity check that order of images in json dataset matches order in the", "\n", "# image set", "\n", "", "roidb", "=", "json_dataset", ".", "get_roidb", "(", ")", "\n", "for", "i", ",", "entry", "in", "enumerate", "(", "roidb", ")", ":", "\n", "        ", "index", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "split", "(", "entry", "[", "'image'", "]", ")", "[", "1", "]", ")", "[", "0", "]", "\n", "assert", "index", "==", "image_index", "[", "i", "]", "\n", "", "for", "cls_ind", ",", "cls", "in", "enumerate", "(", "json_dataset", ".", "classes", ")", ":", "\n", "        ", "if", "cls", "==", "'__background__'", ":", "\n", "            ", "continue", "\n", "", "logger", ".", "info", "(", "'Writing VOC results for: {}'", ".", "format", "(", "cls", ")", ")", "\n", "filename", "=", "_get_voc_results_file_template", "(", "json_dataset", ",", "\n", "salt", ")", ".", "format", "(", "cls", ")", "\n", "filenames", ".", "append", "(", "filename", ")", "\n", "assert", "len", "(", "all_boxes", "[", "cls_ind", "]", ")", "==", "len", "(", "image_index", ")", "\n", "with", "open", "(", "filename", ",", "'wt'", ")", "as", "f", ":", "\n", "            ", "for", "im_ind", ",", "index", "in", "enumerate", "(", "image_index", ")", ":", "\n", "                ", "dets", "=", "all_boxes", "[", "cls_ind", "]", "[", "im_ind", "]", "\n", "if", "type", "(", "dets", ")", "==", "list", ":", "\n", "                    ", "assert", "len", "(", "dets", ")", "==", "0", ",", "'dets should be numpy.ndarray or empty list'", "\n", "continue", "\n", "# the VOCdevkit expects 1-based indices", "\n", "", "for", "k", "in", "range", "(", "dets", ".", "shape", "[", "0", "]", ")", ":", "\n", "                    ", "f", ".", "write", "(", "'{:s} {:.3f} {:.1f} {:.1f} {:.1f} {:.1f}\\n'", ".", "\n", "format", "(", "index", ",", "dets", "[", "k", ",", "-", "1", "]", ",", "\n", "dets", "[", "k", ",", "0", "]", "+", "1", ",", "dets", "[", "k", ",", "1", "]", "+", "1", ",", "\n", "dets", "[", "k", ",", "2", "]", "+", "1", ",", "dets", "[", "k", ",", "3", "]", "+", "1", ")", ")", "\n", "", "", "", "", "return", "filenames", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.voc_dataset_evaluator._get_voc_results_file_template": [[95, 103], ["voc_dataset_evaluator.voc_info", "os.path.join"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.voc_dataset_evaluator.voc_info"], ["", "def", "_get_voc_results_file_template", "(", "json_dataset", ",", "salt", ")", ":", "\n", "    ", "info", "=", "voc_info", "(", "json_dataset", ")", "\n", "year", "=", "info", "[", "'year'", "]", "\n", "image_set", "=", "info", "[", "'image_set'", "]", "\n", "devkit_path", "=", "info", "[", "'devkit_path'", "]", "\n", "# VOCdevkit/results/VOC2007/Main/<comp_id>_det_test_aeroplane.txt", "\n", "filename", "=", "'comp4'", "+", "salt", "+", "'_det_'", "+", "image_set", "+", "'_{:s}.txt'", "\n", "return", "os", ".", "path", ".", "join", "(", "devkit_path", ",", "'results'", ",", "'VOC'", "+", "year", ",", "'Main'", ",", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.voc_dataset_evaluator._do_python_eval": [[105, 144], ["voc_dataset_evaluator.voc_info", "os.path.join", "logger.info", "enumerate", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "os.path.isdir", "os.mkdir", "_get_voc_results_file_template().format", "datasets.voc_eval.voc_eval", "logger.info", "os.path.join", "utils.io.save_object", "logger.info", "int", "numpy.mean", "numpy.mean", "voc_dataset_evaluator._get_voc_results_file_template"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.voc_dataset_evaluator.voc_info", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.voc_eval.voc_eval", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.io.save_object", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.voc_dataset_evaluator._get_voc_results_file_template"], ["", "def", "_do_python_eval", "(", "json_dataset", ",", "salt", ",", "output_dir", "=", "'output'", ")", ":", "\n", "    ", "info", "=", "voc_info", "(", "json_dataset", ")", "\n", "year", "=", "info", "[", "'year'", "]", "\n", "anno_path", "=", "info", "[", "'anno_path'", "]", "\n", "image_set_path", "=", "info", "[", "'image_set_path'", "]", "\n", "devkit_path", "=", "info", "[", "'devkit_path'", "]", "\n", "cachedir", "=", "os", ".", "path", ".", "join", "(", "devkit_path", ",", "'annotations_cache'", ")", "\n", "aps", "=", "[", "]", "\n", "# The PASCAL VOC metric changed in 2010", "\n", "use_07_metric", "=", "True", "if", "int", "(", "year", ")", "<", "2010", "else", "False", "\n", "logger", ".", "info", "(", "'VOC07 metric? '", "+", "(", "'Yes'", "if", "use_07_metric", "else", "'No'", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "output_dir", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "output_dir", ")", "\n", "", "for", "_", ",", "cls", "in", "enumerate", "(", "json_dataset", ".", "classes", ")", ":", "\n", "        ", "if", "cls", "==", "'__background__'", ":", "\n", "            ", "continue", "\n", "", "filename", "=", "_get_voc_results_file_template", "(", "\n", "json_dataset", ",", "salt", ")", ".", "format", "(", "cls", ")", "\n", "rec", ",", "prec", ",", "ap", "=", "voc_eval", "(", "\n", "filename", ",", "anno_path", ",", "image_set_path", ",", "cls", ",", "cachedir", ",", "ovthresh", "=", "0.5", ",", "\n", "use_07_metric", "=", "use_07_metric", ")", "\n", "aps", "+=", "[", "ap", "]", "\n", "logger", ".", "info", "(", "'AP for {} = {:.4f}'", ".", "format", "(", "cls", ",", "ap", ")", ")", "\n", "res_file", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "cls", "+", "'_pr.pkl'", ")", "\n", "save_object", "(", "{", "'rec'", ":", "rec", ",", "'prec'", ":", "prec", ",", "'ap'", ":", "ap", "}", ",", "res_file", ")", "\n", "", "logger", ".", "info", "(", "'Mean AP = {:.4f}'", ".", "format", "(", "np", ".", "mean", "(", "aps", ")", ")", ")", "\n", "logger", ".", "info", "(", "'~~~~~~~~'", ")", "\n", "logger", ".", "info", "(", "'Results:'", ")", "\n", "for", "ap", "in", "aps", ":", "\n", "        ", "logger", ".", "info", "(", "'{:.3f}'", ".", "format", "(", "ap", ")", ")", "\n", "", "logger", ".", "info", "(", "'{:.3f}'", ".", "format", "(", "np", ".", "mean", "(", "aps", ")", ")", ")", "\n", "logger", ".", "info", "(", "'~~~~~~~~'", ")", "\n", "logger", ".", "info", "(", "''", ")", "\n", "logger", ".", "info", "(", "'----------------------------------------------------------'", ")", "\n", "logger", ".", "info", "(", "'Results computed with the **unofficial** Python eval code.'", ")", "\n", "logger", ".", "info", "(", "'Results should be very close to the official MATLAB code.'", ")", "\n", "logger", ".", "info", "(", "'Use `./tools/reval.py --matlab ...` for your paper.'", ")", "\n", "logger", ".", "info", "(", "'-- Thanks, The Management'", ")", "\n", "logger", ".", "info", "(", "'----------------------------------------------------------'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.voc_dataset_evaluator._do_matlab_eval": [[146, 162], ["logger.info", "logger.info", "logger.info", "voc_dataset_evaluator.voc_info", "os.path.join", "logger.info", "subprocess.call"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.voc_dataset_evaluator.voc_info"], ["", "def", "_do_matlab_eval", "(", "json_dataset", ",", "salt", ",", "output_dir", "=", "'output'", ")", ":", "\n", "    ", "import", "subprocess", "\n", "logger", ".", "info", "(", "'-----------------------------------------------------'", ")", "\n", "logger", ".", "info", "(", "'Computing results with the official MATLAB eval code.'", ")", "\n", "logger", ".", "info", "(", "'-----------------------------------------------------'", ")", "\n", "info", "=", "voc_info", "(", "json_dataset", ")", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "\n", "cfg", ".", "ROOT_DIR", ",", "'lib'", ",", "'datasets'", ",", "'VOCdevkit-matlab-wrapper'", ")", "\n", "cmd", "=", "'cd {} && '", ".", "format", "(", "path", ")", "\n", "cmd", "+=", "'{:s} -nodisplay -nodesktop '", ".", "format", "(", "cfg", ".", "MATLAB", ")", "\n", "cmd", "+=", "'-r \"dbstop if error; '", "\n", "cmd", "+=", "'voc_eval(\\'{:s}\\',\\'{:s}\\',\\'{:s}\\',\\'{:s}\\'); quit;\"'", ".", "format", "(", "info", "[", "'devkit_path'", "]", ",", "'comp4'", "+", "salt", ",", "info", "[", "'image_set'", "]", ",", "\n", "output_dir", ")", "\n", "logger", ".", "info", "(", "'Running:\\n{}'", ".", "format", "(", "cmd", ")", ")", "\n", "subprocess", ".", "call", "(", "cmd", ",", "shell", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.voc_dataset_evaluator.voc_info": [[164, 180], ["os.path.exists", "os.path.join", "os.path.join", "dict"], "function", ["None"], ["", "def", "voc_info", "(", "json_dataset", ")", ":", "\n", "    ", "year", "=", "json_dataset", ".", "name", "[", "4", ":", "8", "]", "\n", "image_set", "=", "json_dataset", ".", "name", "[", "9", ":", "]", "\n", "devkit_path", "=", "DATASETS", "[", "json_dataset", ".", "name", "]", "[", "DEVKIT_DIR", "]", "\n", "assert", "os", ".", "path", ".", "exists", "(", "devkit_path", ")", ",", "'Devkit directory {} not found'", ".", "format", "(", "devkit_path", ")", "\n", "anno_path", "=", "os", ".", "path", ".", "join", "(", "\n", "devkit_path", ",", "'VOC'", "+", "year", ",", "'Annotations'", ",", "'{:s}.xml'", ")", "\n", "image_set_path", "=", "os", ".", "path", ".", "join", "(", "\n", "devkit_path", ",", "'VOC'", "+", "year", ",", "'ImageSets'", ",", "'Main'", ",", "image_set", "+", "'.txt'", ")", "\n", "return", "dict", "(", "\n", "year", "=", "year", ",", "\n", "image_set", "=", "image_set", ",", "\n", "devkit_path", "=", "devkit_path", ",", "\n", "anno_path", "=", "anno_path", ",", "\n", "image_set_path", "=", "image_set_path", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.task_evaluation.evaluate_all": [[52, 71], ["task_evaluation.evaluate_boxes", "logger.info", "task_evaluation.evaluate_masks", "all_results[].update", "logger.info", "task_evaluation.evaluate_keypoints", "all_results[].update", "logger.info"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.json_dataset_evaluator.evaluate_boxes", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.json_dataset_evaluator.evaluate_masks", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.json_dataset_evaluator.evaluate_keypoints"], ["def", "evaluate_all", "(", "\n", "dataset", ",", "all_boxes", ",", "all_segms", ",", "all_keyps", ",", "output_dir", ",", "use_matlab", "=", "False", "\n", ")", ":", "\n", "    ", "\"\"\"Evaluate \"all\" tasks, where \"all\" includes box detection, instance\n    segmentation, and keypoint detection.\n    \"\"\"", "\n", "all_results", "=", "evaluate_boxes", "(", "\n", "dataset", ",", "all_boxes", ",", "output_dir", ",", "use_matlab", "=", "use_matlab", "\n", ")", "\n", "logger", ".", "info", "(", "'Evaluating bounding boxes is done!'", ")", "\n", "if", "cfg", ".", "MODEL", ".", "MASK_ON", ":", "\n", "        ", "results", "=", "evaluate_masks", "(", "dataset", ",", "all_boxes", ",", "all_segms", ",", "output_dir", ")", "\n", "all_results", "[", "dataset", ".", "name", "]", ".", "update", "(", "results", "[", "dataset", ".", "name", "]", ")", "\n", "logger", ".", "info", "(", "'Evaluating segmentations is done!'", ")", "\n", "", "if", "cfg", ".", "MODEL", ".", "KEYPOINTS_ON", ":", "\n", "        ", "results", "=", "evaluate_keypoints", "(", "dataset", ",", "all_boxes", ",", "all_keyps", ",", "output_dir", ")", "\n", "all_results", "[", "dataset", ".", "name", "]", ".", "update", "(", "results", "[", "dataset", ".", "name", "]", ")", "\n", "logger", ".", "info", "(", "'Evaluating keypoints is done!'", ")", "\n", "", "return", "all_results", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.task_evaluation.evaluate_boxes": [[73, 100], ["logger.info", "task_evaluation._use_json_dataset_evaluator", "collections.OrderedDict", "datasets.evaluate_boxes", "task_evaluation._coco_eval_to_box_results", "task_evaluation._use_cityscapes_evaluator", "logger.warn", "datasets.evaluate_boxes", "task_evaluation._coco_eval_to_box_results", "task_evaluation._use_voc_evaluator", "datasets.evaluate_boxes", "task_evaluation._voc_eval_to_box_results", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.task_evaluation._use_json_dataset_evaluator", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.json_dataset_evaluator.evaluate_boxes", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.task_evaluation._coco_eval_to_box_results", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.task_evaluation._use_cityscapes_evaluator", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.json_dataset_evaluator.evaluate_boxes", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.task_evaluation._coco_eval_to_box_results", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.task_evaluation._use_voc_evaluator", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.json_dataset_evaluator.evaluate_boxes", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.task_evaluation._voc_eval_to_box_results"], ["", "def", "evaluate_boxes", "(", "dataset", ",", "all_boxes", ",", "output_dir", ",", "use_matlab", "=", "False", ")", ":", "\n", "    ", "\"\"\"Evaluate bounding box detection.\"\"\"", "\n", "logger", ".", "info", "(", "'Evaluating detections'", ")", "\n", "not_comp", "=", "not", "cfg", ".", "TEST", ".", "COMPETITION_MODE", "\n", "if", "_use_json_dataset_evaluator", "(", "dataset", ")", ":", "\n", "        ", "coco_eval", "=", "json_dataset_evaluator", ".", "evaluate_boxes", "(", "\n", "dataset", ",", "all_boxes", ",", "output_dir", ",", "use_salt", "=", "not_comp", ",", "cleanup", "=", "not_comp", "\n", ")", "\n", "box_results", "=", "_coco_eval_to_box_results", "(", "coco_eval", ")", "\n", "", "elif", "_use_cityscapes_evaluator", "(", "dataset", ")", ":", "\n", "        ", "logger", ".", "warn", "(", "'Cityscapes bbox evaluated using COCO metrics/conversions'", ")", "\n", "coco_eval", "=", "json_dataset_evaluator", ".", "evaluate_boxes", "(", "\n", "dataset", ",", "all_boxes", ",", "output_dir", ",", "use_salt", "=", "not_comp", ",", "cleanup", "=", "not_comp", "\n", ")", "\n", "box_results", "=", "_coco_eval_to_box_results", "(", "coco_eval", ")", "\n", "", "elif", "_use_voc_evaluator", "(", "dataset", ")", ":", "\n", "# For VOC, always use salt and always cleanup because results are", "\n", "# written to the shared VOCdevkit results directory", "\n", "        ", "voc_eval", "=", "voc_dataset_evaluator", ".", "evaluate_boxes", "(", "\n", "dataset", ",", "all_boxes", ",", "output_dir", ",", "use_matlab", "=", "use_matlab", "\n", ")", "\n", "box_results", "=", "_voc_eval_to_box_results", "(", "voc_eval", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\n", "'No evaluator for dataset: {}'", ".", "format", "(", "dataset", ".", "name", ")", "\n", ")", "\n", "", "return", "OrderedDict", "(", "[", "(", "dataset", ".", "name", ",", "box_results", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.task_evaluation.evaluate_masks": [[102, 131], ["logger.info", "task_evaluation._use_json_dataset_evaluator", "collections.OrderedDict", "datasets.evaluate_masks", "task_evaluation._coco_eval_to_mask_results", "task_evaluation._use_cityscapes_evaluator", "datasets.evaluate_masks", "task_evaluation._cs_eval_to_mask_results", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.task_evaluation._use_json_dataset_evaluator", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.json_dataset_evaluator.evaluate_masks", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.task_evaluation._coco_eval_to_mask_results", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.task_evaluation._use_cityscapes_evaluator", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.json_dataset_evaluator.evaluate_masks", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.task_evaluation._cs_eval_to_mask_results"], ["", "def", "evaluate_masks", "(", "dataset", ",", "all_boxes", ",", "all_segms", ",", "output_dir", ")", ":", "\n", "    ", "\"\"\"Evaluate instance segmentation.\"\"\"", "\n", "logger", ".", "info", "(", "'Evaluating segmentations'", ")", "\n", "not_comp", "=", "not", "cfg", ".", "TEST", ".", "COMPETITION_MODE", "\n", "if", "_use_json_dataset_evaluator", "(", "dataset", ")", ":", "\n", "        ", "coco_eval", "=", "json_dataset_evaluator", ".", "evaluate_masks", "(", "\n", "dataset", ",", "\n", "all_boxes", ",", "\n", "all_segms", ",", "\n", "output_dir", ",", "\n", "use_salt", "=", "not_comp", ",", "\n", "cleanup", "=", "not_comp", "\n", ")", "\n", "mask_results", "=", "_coco_eval_to_mask_results", "(", "coco_eval", ")", "\n", "", "elif", "_use_cityscapes_evaluator", "(", "dataset", ")", ":", "\n", "        ", "cs_eval", "=", "cs_json_dataset_evaluator", ".", "evaluate_masks", "(", "\n", "dataset", ",", "\n", "all_boxes", ",", "\n", "all_segms", ",", "\n", "output_dir", ",", "\n", "use_salt", "=", "not_comp", ",", "\n", "cleanup", "=", "not_comp", "\n", ")", "\n", "mask_results", "=", "_cs_eval_to_mask_results", "(", "cs_eval", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\n", "'No evaluator for dataset: {}'", ".", "format", "(", "dataset", ".", "name", ")", "\n", ")", "\n", "", "return", "OrderedDict", "(", "[", "(", "dataset", ".", "name", ",", "mask_results", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.task_evaluation.evaluate_keypoints": [[133, 149], ["logger.info", "dataset.name.startswith", "datasets.evaluate_keypoints", "task_evaluation._coco_eval_to_keypoint_results", "collections.OrderedDict"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.json_dataset_evaluator.evaluate_keypoints", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.task_evaluation._coco_eval_to_keypoint_results"], ["", "def", "evaluate_keypoints", "(", "dataset", ",", "all_boxes", ",", "all_keyps", ",", "output_dir", ")", ":", "\n", "    ", "\"\"\"Evaluate human keypoint detection (i.e., 2D pose estimation).\"\"\"", "\n", "logger", ".", "info", "(", "'Evaluating detections'", ")", "\n", "not_comp", "=", "not", "cfg", ".", "TEST", ".", "COMPETITION_MODE", "\n", "assert", "dataset", ".", "name", ".", "startswith", "(", "'keypoints_coco_'", ")", ",", "'Only COCO keypoints are currently supported'", "\n", "coco_eval", "=", "json_dataset_evaluator", ".", "evaluate_keypoints", "(", "\n", "dataset", ",", "\n", "all_boxes", ",", "\n", "all_keyps", ",", "\n", "output_dir", ",", "\n", "use_salt", "=", "not_comp", ",", "\n", "cleanup", "=", "not_comp", "\n", ")", "\n", "keypoint_results", "=", "_coco_eval_to_keypoint_results", "(", "coco_eval", ")", "\n", "return", "OrderedDict", "(", "[", "(", "dataset", ".", "name", ",", "keypoint_results", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.task_evaluation.evaluate_box_proposals": [[151, 163], ["task_evaluation._empty_box_proposal_results", "collections.OrderedDict", "areas.items", "datasets.evaluate_box_proposals"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.task_evaluation._empty_box_proposal_results", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.json_dataset_evaluator.evaluate_box_proposals"], ["", "def", "evaluate_box_proposals", "(", "dataset", ",", "roidb", ")", ":", "\n", "    ", "\"\"\"Evaluate bounding box object proposals.\"\"\"", "\n", "res", "=", "_empty_box_proposal_results", "(", ")", "\n", "areas", "=", "{", "'all'", ":", "''", ",", "'small'", ":", "'s'", ",", "'medium'", ":", "'m'", ",", "'large'", ":", "'l'", "}", "\n", "for", "limit", "in", "[", "100", ",", "1000", ",", "5000", ",", "10000", ",", "50000", ",", "100000", "]", ":", "\n", "        ", "for", "area", ",", "suffix", "in", "areas", ".", "items", "(", ")", ":", "\n", "            ", "stats", "=", "json_dataset_evaluator", ".", "evaluate_box_proposals", "(", "\n", "dataset", ",", "roidb", ",", "area", "=", "area", ",", "limit", "=", "limit", ",", "thresholds", "=", "[", "0.7", "]", "\n", ")", "\n", "key", "=", "'AR{}@{:d}'", ".", "format", "(", "suffix", ",", "limit", ")", "\n", "res", "[", "'box_proposal'", "]", "[", "key", "]", "=", "stats", "[", "'ar'", "]", "\n", "", "", "return", "OrderedDict", "(", "[", "(", "dataset", ".", "name", ",", "res", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.task_evaluation.log_box_proposal_results": [[165, 173], ["results.keys", "[].keys", "max", "logger.info", "[].items", "logger.info", "len", "k.ljust"], "function", ["None"], ["", "def", "log_box_proposal_results", "(", "results", ")", ":", "\n", "    ", "\"\"\"Log bounding box proposal results.\"\"\"", "\n", "for", "dataset", "in", "results", ".", "keys", "(", ")", ":", "\n", "        ", "keys", "=", "results", "[", "dataset", "]", "[", "'box_proposal'", "]", ".", "keys", "(", ")", "\n", "pad", "=", "max", "(", "[", "len", "(", "k", ")", "for", "k", "in", "keys", "]", ")", "\n", "logger", ".", "info", "(", "dataset", ")", "\n", "for", "k", ",", "v", "in", "results", "[", "dataset", "]", "[", "'box_proposal'", "]", ".", "items", "(", ")", ":", "\n", "            ", "logger", ".", "info", "(", "'{}: {:.3f}'", ".", "format", "(", "k", ".", "ljust", "(", "pad", ")", ",", "v", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.task_evaluation.log_copy_paste_friendly_results": [[175, 187], ["results.keys", "logger.info", "results[].items", "logger.info", "metrics.keys", "logger.info", "logger.info", "metrics.values"], "function", ["None"], ["", "", "", "def", "log_copy_paste_friendly_results", "(", "results", ")", ":", "\n", "    ", "\"\"\"Log results in a format that makes it easy to copy-and-paste in a\n    spreadsheet. Lines are prefixed with 'copypaste: ' to make grepping easy.\n    \"\"\"", "\n", "for", "dataset", "in", "results", ".", "keys", "(", ")", ":", "\n", "        ", "logger", ".", "info", "(", "'copypaste: Dataset: {}'", ".", "format", "(", "dataset", ")", ")", "\n", "for", "task", ",", "metrics", "in", "results", "[", "dataset", "]", ".", "items", "(", ")", ":", "\n", "            ", "logger", ".", "info", "(", "'copypaste: Task: {}'", ".", "format", "(", "task", ")", ")", "\n", "metric_names", "=", "metrics", ".", "keys", "(", ")", "\n", "metric_vals", "=", "[", "'{:.4f}'", ".", "format", "(", "v", ")", "for", "v", "in", "metrics", ".", "values", "(", ")", "]", "\n", "logger", ".", "info", "(", "'copypaste: '", "+", "','", ".", "join", "(", "metric_names", ")", ")", "\n", "logger", ".", "info", "(", "'copypaste: '", "+", "','", ".", "join", "(", "metric_vals", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.task_evaluation.check_expected_results": [[189, 243], ["len", "abs", "logger.error", "logger.info", "abs", "utils.logging.send_email", "pprint.pformat", "pprint.pformat", "dict"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.logging.send_email"], ["", "", "", "def", "check_expected_results", "(", "results", ",", "atol", "=", "0.005", ",", "rtol", "=", "0.1", ")", ":", "\n", "    ", "\"\"\"Check actual results against expected results stored in\n    cfg.EXPECTED_RESULTS. Optionally email if the match exceeds the specified\n    tolerance.\n\n    Expected results should take the form of a list of expectations, each\n    specified by four elements: [dataset, task, metric, expected value]. For\n    example: [['coco_2014_minival', 'box_proposal', 'AR@1000', 0.387], ...].\n    \"\"\"", "\n", "# cfg contains a reference set of results that we want to check against", "\n", "if", "len", "(", "cfg", ".", "EXPECTED_RESULTS", ")", "==", "0", ":", "\n", "        ", "return", "\n", "\n", "", "for", "dataset", ",", "task", ",", "metric", ",", "expected_val", "in", "cfg", ".", "EXPECTED_RESULTS", ":", "\n", "        ", "assert", "dataset", "in", "results", ",", "'Dataset {} not in results'", ".", "format", "(", "dataset", ")", "\n", "assert", "task", "in", "results", "[", "dataset", "]", ",", "'Task {} not in results'", ".", "format", "(", "task", ")", "\n", "assert", "metric", "in", "results", "[", "dataset", "]", "[", "task", "]", ",", "'Metric {} not in results'", ".", "format", "(", "metric", ")", "\n", "actual_val", "=", "results", "[", "dataset", "]", "[", "task", "]", "[", "metric", "]", "\n", "err", "=", "abs", "(", "actual_val", "-", "expected_val", ")", "\n", "tol", "=", "atol", "+", "rtol", "*", "abs", "(", "expected_val", ")", "\n", "msg", "=", "(", "\n", "'{} > {} > {} sanity check (actual vs. expected): '", "\n", "'{:.3f} vs. {:.3f}, err={:.3f}, tol={:.3f}'", "\n", ")", ".", "format", "(", "dataset", ",", "task", ",", "metric", ",", "actual_val", ",", "expected_val", ",", "err", ",", "tol", ")", "\n", "if", "err", ">", "tol", ":", "\n", "            ", "msg", "=", "'FAIL: '", "+", "msg", "\n", "logger", ".", "error", "(", "msg", ")", "\n", "if", "cfg", ".", "EXPECTED_RESULTS_EMAIL", "!=", "''", ":", "\n", "                ", "subject", "=", "'Detectron end-to-end test failure'", "\n", "job_name", "=", "os", ".", "environ", "[", "\n", "'DETECTRON_JOB_NAME'", "\n", "]", "if", "'DETECTRON_JOB_NAME'", "in", "os", ".", "environ", "else", "'<unknown>'", "\n", "job_id", "=", "os", ".", "environ", "[", "\n", "'WORKFLOW_RUN_ID'", "\n", "]", "if", "'WORKFLOW_RUN_ID'", "in", "os", ".", "environ", "else", "'<unknown>'", "\n", "body", "=", "[", "\n", "'Name:'", ",", "\n", "job_name", ",", "\n", "'Run ID:'", ",", "\n", "job_id", ",", "\n", "'Failure:'", ",", "\n", "msg", ",", "\n", "'Config:'", ",", "\n", "pprint", ".", "pformat", "(", "cfg", ")", ",", "\n", "'Env:'", ",", "\n", "pprint", ".", "pformat", "(", "dict", "(", "os", ".", "environ", ")", ")", ",", "\n", "]", "\n", "send_email", "(", "\n", "subject", ",", "'\\n\\n'", ".", "join", "(", "body", ")", ",", "cfg", ".", "EXPECTED_RESULTS_EMAIL", "\n", ")", "\n", "", "", "else", ":", "\n", "            ", "msg", "=", "'PASS: '", "+", "msg", "\n", "logger", ".", "info", "(", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.task_evaluation._use_json_dataset_evaluator": [[245, 248], ["dataset.name.find"], "function", ["None"], ["", "", "", "def", "_use_json_dataset_evaluator", "(", "dataset", ")", ":", "\n", "    ", "\"\"\"Check if the dataset uses the general json dataset evaluator.\"\"\"", "\n", "return", "dataset", ".", "name", ".", "find", "(", "'coco_'", ")", ">", "-", "1", "or", "cfg", ".", "TEST", ".", "FORCE_JSON_DATASET_EVAL", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.task_evaluation._use_cityscapes_evaluator": [[250, 253], ["dataset.name.find"], "function", ["None"], ["", "def", "_use_cityscapes_evaluator", "(", "dataset", ")", ":", "\n", "    ", "\"\"\"Check if the dataset uses the Cityscapes dataset evaluator.\"\"\"", "\n", "return", "dataset", ".", "name", ".", "find", "(", "'cityscapes_'", ")", ">", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.task_evaluation._use_voc_evaluator": [[255, 258], ["None"], "function", ["None"], ["", "def", "_use_voc_evaluator", "(", "dataset", ")", ":", "\n", "    ", "\"\"\"Check if the dataset uses the PASCAL VOC dataset evaluator.\"\"\"", "\n", "return", "dataset", ".", "name", "[", ":", "4", "]", "==", "'voc_'", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.task_evaluation._coco_eval_to_box_results": [[276, 287], ["task_evaluation._empty_box_results"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.task_evaluation._empty_box_results"], ["def", "_coco_eval_to_box_results", "(", "coco_eval", ")", ":", "\n", "    ", "res", "=", "_empty_box_results", "(", ")", "\n", "if", "coco_eval", "is", "not", "None", ":", "\n", "        ", "s", "=", "coco_eval", ".", "stats", "\n", "res", "[", "'box'", "]", "[", "'AP'", "]", "=", "s", "[", "COCO_AP", "]", "\n", "res", "[", "'box'", "]", "[", "'AP50'", "]", "=", "s", "[", "COCO_AP50", "]", "\n", "res", "[", "'box'", "]", "[", "'AP75'", "]", "=", "s", "[", "COCO_AP75", "]", "\n", "res", "[", "'box'", "]", "[", "'APs'", "]", "=", "s", "[", "COCO_APS", "]", "\n", "res", "[", "'box'", "]", "[", "'APm'", "]", "=", "s", "[", "COCO_APM", "]", "\n", "res", "[", "'box'", "]", "[", "'APl'", "]", "=", "s", "[", "COCO_APL", "]", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.task_evaluation._coco_eval_to_mask_results": [[289, 300], ["task_evaluation._empty_mask_results"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.task_evaluation._empty_mask_results"], ["", "def", "_coco_eval_to_mask_results", "(", "coco_eval", ")", ":", "\n", "    ", "res", "=", "_empty_mask_results", "(", ")", "\n", "if", "coco_eval", "is", "not", "None", ":", "\n", "        ", "s", "=", "coco_eval", ".", "stats", "\n", "res", "[", "'mask'", "]", "[", "'AP'", "]", "=", "s", "[", "COCO_AP", "]", "\n", "res", "[", "'mask'", "]", "[", "'AP50'", "]", "=", "s", "[", "COCO_AP50", "]", "\n", "res", "[", "'mask'", "]", "[", "'AP75'", "]", "=", "s", "[", "COCO_AP75", "]", "\n", "res", "[", "'mask'", "]", "[", "'APs'", "]", "=", "s", "[", "COCO_APS", "]", "\n", "res", "[", "'mask'", "]", "[", "'APm'", "]", "=", "s", "[", "COCO_APM", "]", "\n", "res", "[", "'mask'", "]", "[", "'APl'", "]", "=", "s", "[", "COCO_APL", "]", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.task_evaluation._coco_eval_to_keypoint_results": [[302, 312], ["task_evaluation._empty_keypoint_results"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.task_evaluation._empty_keypoint_results"], ["", "def", "_coco_eval_to_keypoint_results", "(", "coco_eval", ")", ":", "\n", "    ", "res", "=", "_empty_keypoint_results", "(", ")", "\n", "if", "coco_eval", "is", "not", "None", ":", "\n", "        ", "s", "=", "coco_eval", ".", "stats", "\n", "res", "[", "'keypoint'", "]", "[", "'AP'", "]", "=", "s", "[", "COCO_AP", "]", "\n", "res", "[", "'keypoint'", "]", "[", "'AP50'", "]", "=", "s", "[", "COCO_AP50", "]", "\n", "res", "[", "'keypoint'", "]", "[", "'AP75'", "]", "=", "s", "[", "COCO_AP75", "]", "\n", "res", "[", "'keypoint'", "]", "[", "'APm'", "]", "=", "s", "[", "COCO_KPS_APM", "]", "\n", "res", "[", "'keypoint'", "]", "[", "'APl'", "]", "=", "s", "[", "COCO_KPS_APL", "]", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.task_evaluation._voc_eval_to_box_results": [[314, 317], ["task_evaluation._empty_box_results"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.task_evaluation._empty_box_results"], ["", "def", "_voc_eval_to_box_results", "(", "voc_eval", ")", ":", "\n", "# Not supported (return empty results)", "\n", "    ", "return", "_empty_box_results", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.task_evaluation._cs_eval_to_mask_results": [[319, 322], ["task_evaluation._empty_mask_results"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.task_evaluation._empty_mask_results"], ["", "def", "_cs_eval_to_mask_results", "(", "cs_eval", ")", ":", "\n", "# Not supported (return empty results)", "\n", "    ", "return", "_empty_mask_results", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.task_evaluation._empty_box_results": [[324, 335], ["collections.OrderedDict", "collections.OrderedDict"], "function", ["None"], ["", "def", "_empty_box_results", "(", ")", ":", "\n", "    ", "return", "OrderedDict", "(", "{", "\n", "'box'", ":", "\n", "OrderedDict", "(", "\n", "[", "\n", "(", "'AP'", ",", "-", "1", ")", ",", "\n", "(", "'AP50'", ",", "-", "1", ")", ",", "\n", "(", "'AP75'", ",", "-", "1", ")", ",", "\n", "(", "'APs'", ",", "-", "1", ")", ",", "\n", "(", "'APm'", ",", "-", "1", ")", ",", "\n", "(", "'APl'", ",", "-", "1", ")", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.task_evaluation._empty_mask_results": [[340, 351], ["collections.OrderedDict", "collections.OrderedDict"], "function", ["None"], ["", "def", "_empty_mask_results", "(", ")", ":", "\n", "    ", "return", "OrderedDict", "(", "{", "\n", "'mask'", ":", "\n", "OrderedDict", "(", "\n", "[", "\n", "(", "'AP'", ",", "-", "1", ")", ",", "\n", "(", "'AP50'", ",", "-", "1", ")", ",", "\n", "(", "'AP75'", ",", "-", "1", ")", ",", "\n", "(", "'APs'", ",", "-", "1", ")", ",", "\n", "(", "'APm'", ",", "-", "1", ")", ",", "\n", "(", "'APl'", ",", "-", "1", ")", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.task_evaluation._empty_keypoint_results": [[356, 366], ["collections.OrderedDict", "collections.OrderedDict"], "function", ["None"], ["", "def", "_empty_keypoint_results", "(", ")", ":", "\n", "    ", "return", "OrderedDict", "(", "{", "\n", "'keypoint'", ":", "\n", "OrderedDict", "(", "\n", "[", "\n", "(", "'AP'", ",", "-", "1", ")", ",", "\n", "(", "'AP50'", ",", "-", "1", ")", ",", "\n", "(", "'AP75'", ",", "-", "1", ")", ",", "\n", "(", "'APm'", ",", "-", "1", ")", ",", "\n", "(", "'APl'", ",", "-", "1", ")", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.task_evaluation._empty_box_proposal_results": [[371, 384], ["collections.OrderedDict", "collections.OrderedDict"], "function", ["None"], ["", "def", "_empty_box_proposal_results", "(", ")", ":", "\n", "    ", "return", "OrderedDict", "(", "{", "\n", "'box_proposal'", ":", "\n", "OrderedDict", "(", "\n", "[", "\n", "(", "'AR@100'", ",", "-", "1", ")", ",", "\n", "(", "'ARs@100'", ",", "-", "1", ")", ",", "\n", "(", "'ARm@100'", ",", "-", "1", ")", ",", "\n", "(", "'ARl@100'", ",", "-", "1", ")", ",", "\n", "(", "'AR@1000'", ",", "-", "1", ")", ",", "\n", "(", "'ARs@1000'", ",", "-", "1", ")", ",", "\n", "(", "'ARm@1000'", ",", "-", "1", ")", ",", "\n", "(", "'ARl@1000'", ",", "-", "1", ")", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.dataset_catalog.get_villard_database": [[42, 48], ["os.path.join", "os.path.join"], "function", ["None"], ["def", "get_villard_database", "(", "root", ",", "db_parent_dir", ",", "db_name", ",", "db_case_name", ",", "split_name", ")", ":", "\n", "    ", "return", "{", "\n", "IM_DIR", ":", "\n", "os", ".", "path", ".", "join", "(", "root", ",", "db_parent_dir", ",", "db_name", ",", "'JPEGImages'", ")", ",", "\n", "ANN_FN", ":", "\n", "os", ".", "path", ".", "join", "(", "root", ",", "db_parent_dir", ",", "db_name", ",", "'ImageSets'", ",", "'Main'", ",", "db_case_name", ",", "'maskrcnn'", ",", "split_name", "+", "'.json'", ")", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.cityscapes_json_dataset_evaluator.evaluate_masks": [[37, 97], ["os.path.join", "os.path.join", "json_dataset.get_roidb", "enumerate", "logger.info", "cityscapes_eval.main", "os.path.exists", "os.mkdir", "os.path.join", "str", "os.path.splitext", "open", "range", "uuid.uuid4", "os.path.basename", "logger.info", "len", "pycocotools.decode", "range", "os.path.join", "fid_txt.write", "cv2.imwrite", "os.path.join"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.rpn_generator.get_roidb", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tests.data_loader_benchmark.main"], ["def", "evaluate_masks", "(", "\n", "json_dataset", ",", "\n", "all_boxes", ",", "\n", "all_segms", ",", "\n", "output_dir", ",", "\n", "use_salt", "=", "True", ",", "\n", "cleanup", "=", "False", "\n", ")", ":", "\n", "    ", "if", "cfg", ".", "CLUSTER", ".", "ON_CLUSTER", ":", "\n", "# On the cluster avoid saving these files in the job directory", "\n", "        ", "output_dir", "=", "'/tmp'", "\n", "", "res_file", "=", "os", ".", "path", ".", "join", "(", "\n", "output_dir", ",", "'segmentations_'", "+", "json_dataset", ".", "name", "+", "'_results'", ")", "\n", "if", "use_salt", ":", "\n", "        ", "res_file", "+=", "'_{}'", ".", "format", "(", "str", "(", "uuid", ".", "uuid4", "(", ")", ")", ")", "\n", "", "res_file", "+=", "'.json'", "\n", "\n", "results_dir", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'results'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "results_dir", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "results_dir", ")", "\n", "\n", "", "os", ".", "environ", "[", "'CITYSCAPES_DATASET'", "]", "=", "DATASETS", "[", "json_dataset", ".", "name", "]", "[", "RAW_DIR", "]", "\n", "os", ".", "environ", "[", "'CITYSCAPES_RESULTS'", "]", "=", "output_dir", "\n", "\n", "# Load the Cityscapes eval script *after* setting the required env vars,", "\n", "# since the script reads their values into global variables (at load time).", "\n", "import", "cityscapesscripts", ".", "evaluation", ".", "evalInstanceLevelSemanticLabeling", "as", "cityscapes_eval", "\n", "\n", "roidb", "=", "json_dataset", ".", "get_roidb", "(", ")", "\n", "for", "i", ",", "entry", "in", "enumerate", "(", "roidb", ")", ":", "\n", "        ", "im_name", "=", "entry", "[", "'image'", "]", "\n", "\n", "basename", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "im_name", ")", ")", "[", "0", "]", "\n", "txtname", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "basename", "+", "'pred.txt'", ")", "\n", "with", "open", "(", "txtname", ",", "'w'", ")", "as", "fid_txt", ":", "\n", "            ", "if", "i", "%", "10", "==", "0", ":", "\n", "                ", "logger", ".", "info", "(", "'i: {}: {}'", ".", "format", "(", "i", ",", "basename", ")", ")", "\n", "", "for", "j", "in", "range", "(", "1", ",", "len", "(", "all_segms", ")", ")", ":", "\n", "                ", "clss", "=", "json_dataset", ".", "classes", "[", "j", "]", "\n", "clss_id", "=", "cityscapes_eval", ".", "name2label", "[", "clss", "]", ".", "id", "\n", "segms", "=", "all_segms", "[", "j", "]", "[", "i", "]", "\n", "boxes", "=", "all_boxes", "[", "j", "]", "[", "i", "]", "\n", "if", "segms", "==", "[", "]", ":", "\n", "                    ", "continue", "\n", "", "masks", "=", "mask_util", ".", "decode", "(", "segms", ")", "\n", "\n", "for", "k", "in", "range", "(", "boxes", ".", "shape", "[", "0", "]", ")", ":", "\n", "                    ", "score", "=", "boxes", "[", "k", ",", "-", "1", "]", "\n", "mask", "=", "masks", "[", ":", ",", ":", ",", "k", "]", "\n", "pngname", "=", "os", ".", "path", ".", "join", "(", "\n", "'results'", ",", "\n", "basename", "+", "'_'", "+", "clss", "+", "'_{}.png'", ".", "format", "(", "k", ")", ")", "\n", "# write txt", "\n", "fid_txt", ".", "write", "(", "'{} {} {}\\n'", ".", "format", "(", "pngname", ",", "clss_id", ",", "score", ")", ")", "\n", "# save mask", "\n", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "pngname", ")", ",", "mask", "*", "255", ")", "\n", "", "", "", "", "logger", ".", "info", "(", "'Evaluating...'", ")", "\n", "cityscapes_eval", ".", "main", "(", "[", "]", ")", "\n", "return", "None", "\n", "", ""]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.json_dataset_evaluator.evaluate_masks": [[38, 63], ["os.path.join", "json_dataset_evaluator._write_coco_segms_results_file", "json_dataset.name.find", "json_dataset_evaluator._do_segmentation_eval", "os.remove", "str", "uuid.uuid4"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.json_dataset_evaluator._write_coco_segms_results_file", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.json_dataset_evaluator._do_segmentation_eval"], ["def", "evaluate_masks", "(", "\n", "json_dataset", ",", "\n", "all_boxes", ",", "\n", "all_segms", ",", "\n", "output_dir", ",", "\n", "use_salt", "=", "True", ",", "\n", "cleanup", "=", "False", "\n", ")", ":", "\n", "    ", "res_file", "=", "os", ".", "path", ".", "join", "(", "\n", "output_dir", ",", "'segmentations_'", "+", "json_dataset", ".", "name", "+", "'_results'", "\n", ")", "\n", "if", "use_salt", ":", "\n", "        ", "res_file", "+=", "'_{}'", ".", "format", "(", "str", "(", "uuid", ".", "uuid4", "(", ")", ")", ")", "\n", "", "res_file", "+=", "'.json'", "\n", "_write_coco_segms_results_file", "(", "\n", "json_dataset", ",", "all_boxes", ",", "all_segms", ",", "res_file", ")", "\n", "# Only do evaluation on non-test sets (annotations are undisclosed on test)", "\n", "if", "json_dataset", ".", "name", ".", "find", "(", "'test'", ")", "==", "-", "1", ":", "\n", "        ", "coco_eval", "=", "_do_segmentation_eval", "(", "json_dataset", ",", "res_file", ",", "output_dir", ")", "\n", "", "else", ":", "\n", "        ", "coco_eval", "=", "None", "\n", "# Optionally cleanup results json file", "\n", "", "if", "cleanup", ":", "\n", "        ", "os", ".", "remove", "(", "res_file", ")", "\n", "", "return", "coco_eval", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.json_dataset_evaluator._write_coco_segms_results_file": [[65, 86], ["enumerate", "logger.info", "results.extend", "open", "json.dump", "len", "json_dataset_evaluator._coco_segms_results_one_category", "os.path.abspath"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.json_dataset_evaluator._coco_segms_results_one_category"], ["", "def", "_write_coco_segms_results_file", "(", "\n", "json_dataset", ",", "all_boxes", ",", "all_segms", ",", "res_file", "\n", ")", ":", "\n", "# [{\"image_id\": 42,", "\n", "#   \"category_id\": 18,", "\n", "#   \"segmentation\": [...],", "\n", "#   \"score\": 0.236}, ...]", "\n", "    ", "results", "=", "[", "]", "\n", "for", "cls_ind", ",", "cls", "in", "enumerate", "(", "json_dataset", ".", "classes", ")", ":", "\n", "        ", "if", "cls", "==", "'__background__'", ":", "\n", "            ", "continue", "\n", "", "if", "cls_ind", ">=", "len", "(", "all_boxes", ")", ":", "\n", "            ", "break", "\n", "", "cat_id", "=", "json_dataset", ".", "category_to_id_map", "[", "cls", "]", "\n", "results", ".", "extend", "(", "_coco_segms_results_one_category", "(", "\n", "json_dataset", ",", "all_boxes", "[", "cls_ind", "]", ",", "all_segms", "[", "cls_ind", "]", ",", "cat_id", ")", ")", "\n", "", "logger", ".", "info", "(", "\n", "'Writing segmentation results json to: {}'", ".", "format", "(", "\n", "os", ".", "path", ".", "abspath", "(", "res_file", ")", ")", ")", "\n", "with", "open", "(", "res_file", ",", "'w'", ")", "as", "fid", ":", "\n", "        ", "json", ".", "dump", "(", "results", ",", "fid", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.json_dataset_evaluator._coco_segms_results_one_category": [[88, 112], ["json_dataset.COCO.getImgIds", "json_dataset.COCO.getImgIds.sort", "enumerate", "len", "len", "len", "len", "dets.astype.astype", "results.extend", "isinstance", "len", "range"], "function", ["None"], ["", "", "def", "_coco_segms_results_one_category", "(", "json_dataset", ",", "boxes", ",", "segms", ",", "cat_id", ")", ":", "\n", "    ", "results", "=", "[", "]", "\n", "image_ids", "=", "json_dataset", ".", "COCO", ".", "getImgIds", "(", ")", "\n", "image_ids", ".", "sort", "(", ")", "\n", "assert", "len", "(", "boxes", ")", "==", "len", "(", "image_ids", ")", "\n", "assert", "len", "(", "segms", ")", "==", "len", "(", "image_ids", ")", "\n", "for", "i", ",", "image_id", "in", "enumerate", "(", "image_ids", ")", ":", "\n", "        ", "dets", "=", "boxes", "[", "i", "]", "\n", "rles", "=", "segms", "[", "i", "]", "\n", "\n", "if", "isinstance", "(", "dets", ",", "list", ")", "and", "len", "(", "dets", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "\n", "", "dets", "=", "dets", ".", "astype", "(", "np", ".", "float", ")", "\n", "scores", "=", "dets", "[", ":", ",", "-", "1", "]", "\n", "\n", "results", ".", "extend", "(", "\n", "[", "{", "'image_id'", ":", "image_id", ",", "\n", "'category_id'", ":", "cat_id", ",", "\n", "'segmentation'", ":", "rles", "[", "k", "]", ",", "\n", "'score'", ":", "scores", "[", "k", "]", "}", "\n", "for", "k", "in", "range", "(", "dets", ".", "shape", "[", "0", "]", ")", "]", ")", "\n", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.json_dataset_evaluator._do_segmentation_eval": [[114, 124], ["json_dataset.COCO.loadRes", "pycocotools.cocoeval.COCOeval", "pycocotools.cocoeval.COCOeval.evaluate", "pycocotools.cocoeval.COCOeval.accumulate", "json_dataset_evaluator._log_detection_eval_metrics", "os.path.join", "utils.io.save_object", "logger.info", "str"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.json_dataset_evaluator._log_detection_eval_metrics", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.io.save_object"], ["", "def", "_do_segmentation_eval", "(", "json_dataset", ",", "res_file", ",", "output_dir", ")", ":", "\n", "    ", "coco_dt", "=", "json_dataset", ".", "COCO", ".", "loadRes", "(", "str", "(", "res_file", ")", ")", "\n", "coco_eval", "=", "COCOeval", "(", "json_dataset", ".", "COCO", ",", "coco_dt", ",", "'segm'", ")", "\n", "coco_eval", ".", "evaluate", "(", ")", "\n", "coco_eval", ".", "accumulate", "(", ")", "\n", "_log_detection_eval_metrics", "(", "json_dataset", ",", "coco_eval", ")", "\n", "eval_file", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'segmentation_results.pkl'", ")", "\n", "save_object", "(", "coco_eval", ",", "eval_file", ")", "\n", "logger", ".", "info", "(", "'Wrote json eval results to: {}'", ".", "format", "(", "eval_file", ")", ")", "\n", "return", "coco_eval", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.json_dataset_evaluator.evaluate_boxes": [[126, 145], ["os.path.join", "json_dataset_evaluator._write_coco_bbox_results_file", "json_dataset_evaluator._do_detection_eval", "os.remove", "str", "uuid.uuid4"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.json_dataset_evaluator._write_coco_bbox_results_file", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.json_dataset_evaluator._do_detection_eval"], ["", "def", "evaluate_boxes", "(", "\n", "json_dataset", ",", "all_boxes", ",", "output_dir", ",", "use_salt", "=", "True", ",", "cleanup", "=", "False", "\n", ")", ":", "\n", "    ", "res_file", "=", "os", ".", "path", ".", "join", "(", "\n", "output_dir", ",", "'bbox_'", "+", "json_dataset", ".", "name", "+", "'_results'", "\n", ")", "\n", "if", "use_salt", ":", "\n", "        ", "res_file", "+=", "'_{}'", ".", "format", "(", "str", "(", "uuid", ".", "uuid4", "(", ")", ")", ")", "\n", "", "res_file", "+=", "'.json'", "\n", "_write_coco_bbox_results_file", "(", "json_dataset", ",", "all_boxes", ",", "res_file", ")", "\n", "# Only do evaluation on non-test sets (annotations are undisclosed on test)", "\n", "#if json_dataset.name.find('test') == -1:", "\n", "coco_eval", "=", "_do_detection_eval", "(", "json_dataset", ",", "res_file", ",", "output_dir", ")", "\n", "#else:", "\n", "#    coco_eval = None", "\n", "# Optionally cleanup results json file", "\n", "if", "cleanup", ":", "\n", "        ", "os", ".", "remove", "(", "res_file", ")", "\n", "", "return", "coco_eval", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.json_dataset_evaluator._write_coco_bbox_results_file": [[147, 165], ["enumerate", "logger.info", "results.extend", "open", "json.dump", "len", "json_dataset_evaluator._coco_bbox_results_one_category", "os.path.abspath"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.json_dataset_evaluator._coco_bbox_results_one_category"], ["", "def", "_write_coco_bbox_results_file", "(", "json_dataset", ",", "all_boxes", ",", "res_file", ")", ":", "\n", "# [{\"image_id\": 42,", "\n", "#   \"category_id\": 18,", "\n", "#   \"bbox\": [258.15,41.29,348.26,243.78],", "\n", "#   \"score\": 0.236}, ...]", "\n", "    ", "results", "=", "[", "]", "\n", "for", "cls_ind", ",", "cls", "in", "enumerate", "(", "json_dataset", ".", "classes", ")", ":", "\n", "        ", "if", "cls", "==", "'__background__'", ":", "\n", "            ", "continue", "\n", "", "if", "cls_ind", ">=", "len", "(", "all_boxes", ")", ":", "\n", "            ", "break", "\n", "", "cat_id", "=", "json_dataset", ".", "category_to_id_map", "[", "cls", "]", "\n", "results", ".", "extend", "(", "_coco_bbox_results_one_category", "(", "\n", "json_dataset", ",", "all_boxes", "[", "cls_ind", "]", ",", "cat_id", ")", ")", "\n", "", "logger", ".", "info", "(", "\n", "'Writing bbox results json to: {}'", ".", "format", "(", "os", ".", "path", ".", "abspath", "(", "res_file", ")", ")", ")", "\n", "with", "open", "(", "res_file", ",", "'w'", ")", "as", "fid", ":", "\n", "        ", "json", ".", "dump", "(", "results", ",", "fid", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.json_dataset_evaluator._coco_bbox_results_one_category": [[167, 189], ["json_dataset.COCO.getImgIds", "json_dataset.COCO.getImgIds.sort", "enumerate", "len", "len", "dets.astype.astype", "utils.xyxy_to_xywh", "results.extend", "isinstance", "len", "range"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.boxes.xyxy_to_xywh"], ["", "", "def", "_coco_bbox_results_one_category", "(", "json_dataset", ",", "boxes", ",", "cat_id", ")", ":", "\n", "    ", "results", "=", "[", "]", "\n", "image_ids", "=", "json_dataset", ".", "COCO", ".", "getImgIds", "(", ")", "\n", "image_ids", ".", "sort", "(", ")", "\n", "assert", "len", "(", "boxes", ")", "==", "len", "(", "image_ids", ")", "\n", "for", "i", ",", "image_id", "in", "enumerate", "(", "image_ids", ")", ":", "\n", "        ", "dets", "=", "boxes", "[", "i", "]", "\n", "if", "isinstance", "(", "dets", ",", "list", ")", "and", "len", "(", "dets", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "", "dets", "=", "dets", ".", "astype", "(", "np", ".", "float", ")", "\n", "scores", "=", "dets", "[", ":", ",", "-", "1", "]", "\n", "xywh_dets", "=", "box_utils", ".", "xyxy_to_xywh", "(", "dets", "[", ":", ",", "0", ":", "4", "]", ")", "\n", "xs", "=", "xywh_dets", "[", ":", ",", "0", "]", "\n", "ys", "=", "xywh_dets", "[", ":", ",", "1", "]", "\n", "ws", "=", "xywh_dets", "[", ":", ",", "2", "]", "\n", "hs", "=", "xywh_dets", "[", ":", ",", "3", "]", "\n", "results", ".", "extend", "(", "\n", "[", "{", "'image_id'", ":", "image_id", ",", "\n", "'category_id'", ":", "cat_id", ",", "\n", "'bbox'", ":", "[", "xs", "[", "k", "]", ",", "ys", "[", "k", "]", ",", "ws", "[", "k", "]", ",", "hs", "[", "k", "]", "]", ",", "\n", "'score'", ":", "scores", "[", "k", "]", "}", "for", "k", "in", "range", "(", "dets", ".", "shape", "[", "0", "]", ")", "]", ")", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.json_dataset_evaluator._do_detection_eval": [[191, 201], ["json_dataset.COCO.loadRes", "pycocotools.cocoeval.COCOeval", "pycocotools.cocoeval.COCOeval.evaluate", "pycocotools.cocoeval.COCOeval.accumulate", "json_dataset_evaluator._log_detection_eval_metrics", "os.path.join", "utils.io.save_object", "logger.info", "str"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.json_dataset_evaluator._log_detection_eval_metrics", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.io.save_object"], ["", "def", "_do_detection_eval", "(", "json_dataset", ",", "res_file", ",", "output_dir", ")", ":", "\n", "    ", "coco_dt", "=", "json_dataset", ".", "COCO", ".", "loadRes", "(", "str", "(", "res_file", ")", ")", "\n", "coco_eval", "=", "COCOeval", "(", "json_dataset", ".", "COCO", ",", "coco_dt", ",", "'bbox'", ")", "\n", "coco_eval", ".", "evaluate", "(", ")", "\n", "coco_eval", ".", "accumulate", "(", ")", "\n", "_log_detection_eval_metrics", "(", "json_dataset", ",", "coco_eval", ")", "\n", "eval_file", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'detection_results.pkl'", ")", "\n", "save_object", "(", "coco_eval", ",", "eval_file", ")", "\n", "logger", ".", "info", "(", "'Wrote json eval results to: {}'", ".", "format", "(", "eval_file", ")", ")", "\n", "return", "coco_eval", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.json_dataset_evaluator._log_detection_eval_metrics": [[203, 234], ["json_dataset_evaluator._log_detection_eval_metrics._get_thr_ind"], "function", ["None"], ["", "def", "_log_detection_eval_metrics", "(", "json_dataset", ",", "coco_eval", ")", ":", "\n", "    ", "def", "_get_thr_ind", "(", "coco_eval", ",", "thr", ")", ":", "\n", "        ", "ind", "=", "np", ".", "where", "(", "(", "coco_eval", ".", "params", ".", "iouThrs", ">", "thr", "-", "1e-5", ")", "&", "\n", "(", "coco_eval", ".", "params", ".", "iouThrs", "<", "thr", "+", "1e-5", ")", ")", "[", "0", "]", "[", "0", "]", "\n", "iou_thr", "=", "coco_eval", ".", "params", ".", "iouThrs", "[", "ind", "]", "\n", "assert", "np", ".", "isclose", "(", "iou_thr", ",", "thr", ")", "\n", "return", "ind", "\n", "\n", "", "IoU_lo_thresh", "=", "0.5", "\n", "IoU_hi_thresh", "=", "0.95", "\n", "ind_lo", "=", "_get_thr_ind", "(", "coco_eval", ",", "IoU_lo_thresh", ")", "\n", "ind_hi", "=", "_get_thr_ind", "(", "coco_eval", ",", "IoU_hi_thresh", ")", "\n", "# precision has dims (iou, recall, cls, area range, max dets)", "\n", "# area range index 0: all area ranges", "\n", "# max dets index 2: 100 per image", "\n", "precision", "=", "coco_eval", ".", "eval", "[", "'precision'", "]", "[", "ind_lo", ":", "(", "ind_hi", "+", "1", ")", ",", ":", ",", ":", ",", "0", ",", "2", "]", "\n", "ap_default", "=", "np", ".", "mean", "(", "precision", "[", "precision", ">", "-", "1", "]", ")", "\n", "logger", ".", "info", "(", "\n", "'~~~~ Mean and per-category AP @ IoU=[{:.2f},{:.2f}] ~~~~'", ".", "format", "(", "\n", "IoU_lo_thresh", ",", "IoU_hi_thresh", ")", ")", "\n", "logger", ".", "info", "(", "'{:.1f}'", ".", "format", "(", "100", "*", "ap_default", ")", ")", "\n", "for", "cls_ind", ",", "cls", "in", "enumerate", "(", "json_dataset", ".", "classes", ")", ":", "\n", "        ", "if", "cls", "==", "'__background__'", ":", "\n", "            ", "continue", "\n", "# minus 1 because of __background__", "\n", "", "precision", "=", "coco_eval", ".", "eval", "[", "'precision'", "]", "[", "\n", "ind_lo", ":", "(", "ind_hi", "+", "1", ")", ",", ":", ",", "cls_ind", "-", "1", ",", "0", ",", "2", "]", "\n", "ap", "=", "np", ".", "mean", "(", "precision", "[", "precision", ">", "-", "1", "]", ")", "\n", "logger", ".", "info", "(", "'{:.1f}'", ".", "format", "(", "100", "*", "ap", ")", ")", "\n", "", "logger", ".", "info", "(", "'~~~~ Summary metrics ~~~~'", ")", "\n", "coco_eval", ".", "summarize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.json_dataset_evaluator.evaluate_box_proposals": [[236, 318], ["numpy.zeros", "numpy.sort", "numpy.zeros_like", "enumerate", "np.zeros_like.mean", "len", "utils.bbox_overlaps", "numpy.zeros", "range", "numpy.hstack", "numpy.arange", "numpy.where", "numpy.where", "numpy.where", "boxes.astype", "gt_boxes.astype", "min", "box_utils.bbox_overlaps.argmax", "box_utils.bbox_overlaps.max", "overlaps.max.argmax", "overlaps.max.max", "float"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.blob.zeros", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.blob.zeros"], ["", "def", "evaluate_box_proposals", "(", "\n", "json_dataset", ",", "roidb", ",", "thresholds", "=", "None", ",", "area", "=", "'all'", ",", "limit", "=", "None", "\n", ")", ":", "\n", "    ", "\"\"\"Evaluate detection proposal recall metrics. This function is a much\n    faster alternative to the official COCO API recall evaluation code. However,\n    it produces slightly different results.\n    \"\"\"", "\n", "# Record max overlap value for each gt box", "\n", "# Return vector of overlap values", "\n", "areas", "=", "{", "\n", "'all'", ":", "0", ",", "\n", "'small'", ":", "1", ",", "\n", "'medium'", ":", "2", ",", "\n", "'large'", ":", "3", ",", "\n", "'96-128'", ":", "4", ",", "\n", "'128-256'", ":", "5", ",", "\n", "'256-512'", ":", "6", ",", "\n", "'512-inf'", ":", "7", "}", "\n", "area_ranges", "=", "[", "\n", "[", "0", "**", "2", ",", "1e5", "**", "2", "]", ",", "# all", "\n", "[", "0", "**", "2", ",", "32", "**", "2", "]", ",", "# small", "\n", "[", "32", "**", "2", ",", "96", "**", "2", "]", ",", "# medium", "\n", "[", "96", "**", "2", ",", "1e5", "**", "2", "]", ",", "# large", "\n", "[", "96", "**", "2", ",", "128", "**", "2", "]", ",", "# 96-128", "\n", "[", "128", "**", "2", ",", "256", "**", "2", "]", ",", "# 128-256", "\n", "[", "256", "**", "2", ",", "512", "**", "2", "]", ",", "# 256-512", "\n", "[", "512", "**", "2", ",", "1e5", "**", "2", "]", "]", "# 512-inf", "\n", "assert", "area", "in", "areas", ",", "'Unknown area range: {}'", ".", "format", "(", "area", ")", "\n", "area_range", "=", "area_ranges", "[", "areas", "[", "area", "]", "]", "\n", "gt_overlaps", "=", "np", ".", "zeros", "(", "0", ")", "\n", "num_pos", "=", "0", "\n", "for", "entry", "in", "roidb", ":", "\n", "        ", "gt_inds", "=", "np", ".", "where", "(", "\n", "(", "entry", "[", "'gt_classes'", "]", ">", "0", ")", "&", "(", "entry", "[", "'is_crowd'", "]", "==", "0", ")", ")", "[", "0", "]", "\n", "gt_boxes", "=", "entry", "[", "'boxes'", "]", "[", "gt_inds", ",", ":", "]", "\n", "gt_areas", "=", "entry", "[", "'seg_areas'", "]", "[", "gt_inds", "]", "\n", "valid_gt_inds", "=", "np", ".", "where", "(", "\n", "(", "gt_areas", ">=", "area_range", "[", "0", "]", ")", "&", "(", "gt_areas", "<=", "area_range", "[", "1", "]", ")", ")", "[", "0", "]", "\n", "gt_boxes", "=", "gt_boxes", "[", "valid_gt_inds", ",", ":", "]", "\n", "num_pos", "+=", "len", "(", "valid_gt_inds", ")", "\n", "non_gt_inds", "=", "np", ".", "where", "(", "entry", "[", "'gt_classes'", "]", "==", "0", ")", "[", "0", "]", "\n", "boxes", "=", "entry", "[", "'boxes'", "]", "[", "non_gt_inds", ",", ":", "]", "\n", "if", "boxes", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "            ", "continue", "\n", "", "if", "limit", "is", "not", "None", "and", "boxes", ".", "shape", "[", "0", "]", ">", "limit", ":", "\n", "            ", "boxes", "=", "boxes", "[", ":", "limit", ",", ":", "]", "\n", "", "overlaps", "=", "box_utils", ".", "bbox_overlaps", "(", "\n", "boxes", ".", "astype", "(", "dtype", "=", "np", ".", "float32", ",", "copy", "=", "False", ")", ",", "\n", "gt_boxes", ".", "astype", "(", "dtype", "=", "np", ".", "float32", ",", "copy", "=", "False", ")", ")", "\n", "_gt_overlaps", "=", "np", ".", "zeros", "(", "(", "gt_boxes", ".", "shape", "[", "0", "]", ")", ")", "\n", "for", "j", "in", "range", "(", "min", "(", "boxes", ".", "shape", "[", "0", "]", ",", "gt_boxes", ".", "shape", "[", "0", "]", ")", ")", ":", "\n", "# find which proposal box maximally covers each gt box", "\n", "            ", "argmax_overlaps", "=", "overlaps", ".", "argmax", "(", "axis", "=", "0", ")", "\n", "# and get the iou amount of coverage for each gt box", "\n", "max_overlaps", "=", "overlaps", ".", "max", "(", "axis", "=", "0", ")", "\n", "# find which gt box is 'best' covered (i.e. 'best' = most iou)", "\n", "gt_ind", "=", "max_overlaps", ".", "argmax", "(", ")", "\n", "gt_ovr", "=", "max_overlaps", ".", "max", "(", ")", "\n", "assert", "gt_ovr", ">=", "0", "\n", "# find the proposal box that covers the best covered gt box", "\n", "box_ind", "=", "argmax_overlaps", "[", "gt_ind", "]", "\n", "# record the iou coverage of this gt box", "\n", "_gt_overlaps", "[", "j", "]", "=", "overlaps", "[", "box_ind", ",", "gt_ind", "]", "\n", "assert", "_gt_overlaps", "[", "j", "]", "==", "gt_ovr", "\n", "# mark the proposal box and the gt box as used", "\n", "overlaps", "[", "box_ind", ",", ":", "]", "=", "-", "1", "\n", "overlaps", "[", ":", ",", "gt_ind", "]", "=", "-", "1", "\n", "# append recorded iou coverage level", "\n", "", "gt_overlaps", "=", "np", ".", "hstack", "(", "(", "gt_overlaps", ",", "_gt_overlaps", ")", ")", "\n", "\n", "", "gt_overlaps", "=", "np", ".", "sort", "(", "gt_overlaps", ")", "\n", "if", "thresholds", "is", "None", ":", "\n", "        ", "step", "=", "0.05", "\n", "thresholds", "=", "np", ".", "arange", "(", "0.5", ",", "0.95", "+", "1e-5", ",", "step", ")", "\n", "", "recalls", "=", "np", ".", "zeros_like", "(", "thresholds", ")", "\n", "# compute recall for each iou threshold", "\n", "for", "i", ",", "t", "in", "enumerate", "(", "thresholds", ")", ":", "\n", "        ", "recalls", "[", "i", "]", "=", "(", "gt_overlaps", ">=", "t", ")", ".", "sum", "(", ")", "/", "float", "(", "num_pos", ")", "\n", "# ar = 2 * np.trapz(recalls, thresholds)", "\n", "", "ar", "=", "recalls", ".", "mean", "(", ")", "\n", "return", "{", "'ar'", ":", "ar", ",", "'recalls'", ":", "recalls", ",", "'thresholds'", ":", "thresholds", ",", "\n", "'gt_overlaps'", ":", "gt_overlaps", ",", "'num_pos'", ":", "num_pos", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.json_dataset_evaluator.evaluate_keypoints": [[320, 345], ["os.path.join", "json_dataset_evaluator._write_coco_keypoint_results_file", "json_dataset.name.find", "json_dataset_evaluator._do_keypoint_eval", "os.remove", "str", "uuid.uuid4"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.json_dataset_evaluator._write_coco_keypoint_results_file", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.json_dataset_evaluator._do_keypoint_eval"], ["", "def", "evaluate_keypoints", "(", "\n", "json_dataset", ",", "\n", "all_boxes", ",", "\n", "all_keypoints", ",", "\n", "output_dir", ",", "\n", "use_salt", "=", "True", ",", "\n", "cleanup", "=", "False", "\n", ")", ":", "\n", "    ", "res_file", "=", "os", ".", "path", ".", "join", "(", "\n", "output_dir", ",", "'keypoints_'", "+", "json_dataset", ".", "name", "+", "'_results'", "\n", ")", "\n", "if", "use_salt", ":", "\n", "        ", "res_file", "+=", "'_{}'", ".", "format", "(", "str", "(", "uuid", ".", "uuid4", "(", ")", ")", ")", "\n", "", "res_file", "+=", "'.json'", "\n", "_write_coco_keypoint_results_file", "(", "\n", "json_dataset", ",", "all_boxes", ",", "all_keypoints", ",", "res_file", ")", "\n", "# Only do evaluation on non-test sets (annotations are undisclosed on test)", "\n", "if", "json_dataset", ".", "name", ".", "find", "(", "'test'", ")", "==", "-", "1", ":", "\n", "        ", "coco_eval", "=", "_do_keypoint_eval", "(", "json_dataset", ",", "res_file", ",", "output_dir", ")", "\n", "", "else", ":", "\n", "        ", "coco_eval", "=", "None", "\n", "# Optionally cleanup results json file", "\n", "", "if", "cleanup", ":", "\n", "        ", "os", ".", "remove", "(", "res_file", ")", "\n", "", "return", "coco_eval", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.json_dataset_evaluator._write_coco_keypoint_results_file": [[347, 367], ["enumerate", "logger.info", "logger.info", "results.extend", "open", "json.dump", "len", "json_dataset_evaluator._coco_kp_results_one_category", "os.path.abspath", "len"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.json_dataset_evaluator._coco_kp_results_one_category"], ["", "def", "_write_coco_keypoint_results_file", "(", "\n", "json_dataset", ",", "all_boxes", ",", "all_keypoints", ",", "res_file", "\n", ")", ":", "\n", "    ", "results", "=", "[", "]", "\n", "for", "cls_ind", ",", "cls", "in", "enumerate", "(", "json_dataset", ".", "classes", ")", ":", "\n", "        ", "if", "cls", "==", "'__background__'", ":", "\n", "            ", "continue", "\n", "", "if", "cls_ind", ">=", "len", "(", "all_keypoints", ")", ":", "\n", "            ", "break", "\n", "", "logger", ".", "info", "(", "\n", "'Collecting {} results ({:d}/{:d})'", ".", "format", "(", "\n", "cls", ",", "cls_ind", ",", "len", "(", "all_keypoints", ")", "-", "1", ")", ")", "\n", "cat_id", "=", "json_dataset", ".", "category_to_id_map", "[", "cls", "]", "\n", "results", ".", "extend", "(", "_coco_kp_results_one_category", "(", "\n", "json_dataset", ",", "all_boxes", "[", "cls_ind", "]", ",", "all_keypoints", "[", "cls_ind", "]", ",", "cat_id", ")", ")", "\n", "", "logger", ".", "info", "(", "\n", "'Writing keypoint results json to: {}'", ".", "format", "(", "\n", "os", ".", "path", ".", "abspath", "(", "res_file", ")", ")", ")", "\n", "with", "open", "(", "res_file", ",", "'w'", ")", "as", "fid", ":", "\n", "        ", "json", ".", "dump", "(", "results", ",", "fid", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.json_dataset_evaluator._coco_kp_results_one_category": [[369, 415], ["json_dataset.COCO.getImgIds", "json_dataset.COCO.getImgIds.sort", "enumerate", "len", "len", "len", "len", "[].astype", "range", "len", "len", "len", "range", "results.extend", "ValueError", "xy.append", "xy.append", "xy.append", "float", "float"], "function", ["None"], ["", "", "def", "_coco_kp_results_one_category", "(", "json_dataset", ",", "boxes", ",", "kps", ",", "cat_id", ")", ":", "\n", "    ", "results", "=", "[", "]", "\n", "image_ids", "=", "json_dataset", ".", "COCO", ".", "getImgIds", "(", ")", "\n", "image_ids", ".", "sort", "(", ")", "\n", "assert", "len", "(", "kps", ")", "==", "len", "(", "image_ids", ")", "\n", "assert", "len", "(", "boxes", ")", "==", "len", "(", "image_ids", ")", "\n", "use_box_score", "=", "False", "\n", "if", "cfg", ".", "KRCNN", ".", "KEYPOINT_CONFIDENCE", "==", "'logit'", ":", "\n", "# This is ugly; see utils.keypoints.heatmap_to_keypoints for the magic", "\n", "# indexes", "\n", "        ", "score_index", "=", "2", "\n", "", "elif", "cfg", ".", "KRCNN", ".", "KEYPOINT_CONFIDENCE", "==", "'prob'", ":", "\n", "        ", "score_index", "=", "3", "\n", "", "elif", "cfg", ".", "KRCNN", ".", "KEYPOINT_CONFIDENCE", "==", "'bbox'", ":", "\n", "        ", "use_box_score", "=", "True", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "'KRCNN.KEYPOINT_CONFIDENCE must be \"logit\", \"prob\", or \"bbox\"'", ")", "\n", "", "for", "i", ",", "image_id", "in", "enumerate", "(", "image_ids", ")", ":", "\n", "        ", "if", "len", "(", "boxes", "[", "i", "]", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "", "kps_dets", "=", "kps", "[", "i", "]", "\n", "scores", "=", "boxes", "[", "i", "]", "[", ":", ",", "-", "1", "]", ".", "astype", "(", "np", ".", "float", ")", "\n", "if", "len", "(", "kps_dets", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "", "for", "j", "in", "range", "(", "len", "(", "kps_dets", ")", ")", ":", "\n", "            ", "xy", "=", "[", "]", "\n", "\n", "kps_score", "=", "0", "\n", "for", "k", "in", "range", "(", "kps_dets", "[", "j", "]", ".", "shape", "[", "1", "]", ")", ":", "\n", "                ", "xy", ".", "append", "(", "float", "(", "kps_dets", "[", "j", "]", "[", "0", ",", "k", "]", ")", ")", "\n", "xy", ".", "append", "(", "float", "(", "kps_dets", "[", "j", "]", "[", "1", ",", "k", "]", ")", ")", "\n", "xy", ".", "append", "(", "1", ")", "\n", "if", "not", "use_box_score", ":", "\n", "                    ", "kps_score", "+=", "kps_dets", "[", "j", "]", "[", "score_index", ",", "k", "]", "\n", "\n", "", "", "if", "use_box_score", ":", "\n", "                ", "kps_score", "=", "scores", "[", "j", "]", "\n", "", "else", ":", "\n", "                ", "kps_score", "/=", "kps_dets", "[", "j", "]", ".", "shape", "[", "1", "]", "\n", "\n", "", "results", ".", "extend", "(", "[", "{", "'image_id'", ":", "image_id", ",", "\n", "'category_id'", ":", "cat_id", ",", "\n", "'keypoints'", ":", "xy", ",", "\n", "'score'", ":", "kps_score", "}", "]", ")", "\n", "", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.json_dataset_evaluator._do_keypoint_eval": [[417, 431], ["json_dataset.COCO.getImgIds", "json_dataset.COCO.getImgIds.sort", "json_dataset.COCO.loadRes", "pycocotools.cocoeval.COCOeval", "pycocotools.cocoeval.COCOeval.evaluate", "pycocotools.cocoeval.COCOeval.accumulate", "os.path.join", "utils.io.save_object", "logger.info", "pycocotools.cocoeval.COCOeval.summarize"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.io.save_object"], ["", "def", "_do_keypoint_eval", "(", "json_dataset", ",", "res_file", ",", "output_dir", ")", ":", "\n", "    ", "ann_type", "=", "'keypoints'", "\n", "imgIds", "=", "json_dataset", ".", "COCO", ".", "getImgIds", "(", ")", "\n", "imgIds", ".", "sort", "(", ")", "\n", "coco_dt", "=", "json_dataset", ".", "COCO", ".", "loadRes", "(", "res_file", ")", "\n", "coco_eval", "=", "COCOeval", "(", "json_dataset", ".", "COCO", ",", "coco_dt", ",", "ann_type", ")", "\n", "coco_eval", ".", "params", ".", "imgIds", "=", "imgIds", "\n", "coco_eval", ".", "evaluate", "(", ")", "\n", "coco_eval", ".", "accumulate", "(", ")", "\n", "eval_file", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'keypoint_results.pkl'", ")", "\n", "save_object", "(", "coco_eval", ",", "eval_file", ")", "\n", "logger", ".", "info", "(", "'Wrote json eval results to: {}'", ".", "format", "(", "eval_file", ")", ")", "\n", "coco_eval", ".", "summarize", "(", ")", "\n", "return", "coco_eval", "\n", "", ""]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.roidb.combined_roidb_for_training": [[36, 74], ["isinstance", "isinstance", "roidb.filter_for_training", "logger.info", "roidb.add_bbox_regression_targets", "logger.info", "roidb._compute_and_log_stats", "datasets.json_dataset.JsonDataset", "datasets.json_dataset.JsonDataset.get_roidb", "logger.info", "len", "len", "len", "roidb.combined_roidb_for_training.get_roidb"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.roidb.filter_for_training", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.roidb.add_bbox_regression_targets", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.roidb._compute_and_log_stats", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.rpn_generator.get_roidb", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.rpn_generator.get_roidb"], ["def", "combined_roidb_for_training", "(", "dataset_names", ",", "proposal_files", ")", ":", "\n", "    ", "\"\"\"Load and concatenate roidbs for one or more datasets, along with optional\n    object proposals. The roidb entries are then prepared for use in training,\n    which involves caching certain types of metadata for each roidb entry.\n    \"\"\"", "\n", "def", "get_roidb", "(", "dataset_name", ",", "proposal_file", ")", ":", "\n", "        ", "ds", "=", "JsonDataset", "(", "dataset_name", ")", "\n", "roidb", "=", "ds", ".", "get_roidb", "(", "\n", "gt", "=", "True", ",", "\n", "proposal_file", "=", "proposal_file", ",", "\n", "crowd_filter_thresh", "=", "cfg", ".", "TRAIN", ".", "CROWD_FILTER_THRESH", "\n", ")", "\n", "if", "cfg", ".", "TRAIN", ".", "USE_FLIPPED", ":", "\n", "            ", "logger", ".", "info", "(", "'Appending horizontally-flipped training examples...'", ")", "\n", "extend_with_flipped_entries", "(", "roidb", ",", "ds", ")", "\n", "", "logger", ".", "info", "(", "'Loaded dataset: {:s}'", ".", "format", "(", "ds", ".", "name", ")", ")", "\n", "return", "roidb", "\n", "\n", "", "if", "isinstance", "(", "dataset_names", ",", "basestring", ")", ":", "\n", "        ", "dataset_names", "=", "(", "dataset_names", ",", ")", "\n", "", "if", "isinstance", "(", "proposal_files", ",", "basestring", ")", ":", "\n", "        ", "proposal_files", "=", "(", "proposal_files", ",", ")", "\n", "", "if", "len", "(", "proposal_files", ")", "==", "0", ":", "\n", "        ", "proposal_files", "=", "(", "None", ",", ")", "*", "len", "(", "dataset_names", ")", "\n", "", "assert", "len", "(", "dataset_names", ")", "==", "len", "(", "proposal_files", ")", "\n", "roidbs", "=", "[", "get_roidb", "(", "*", "args", ")", "for", "args", "in", "zip", "(", "dataset_names", ",", "proposal_files", ")", "]", "\n", "roidb", "=", "roidbs", "[", "0", "]", "\n", "for", "r", "in", "roidbs", "[", "1", ":", "]", ":", "\n", "        ", "roidb", ".", "extend", "(", "r", ")", "\n", "", "roidb", "=", "filter_for_training", "(", "roidb", ")", "\n", "\n", "logger", ".", "info", "(", "'Computing bounding-box regression targets...'", ")", "\n", "add_bbox_regression_targets", "(", "roidb", ")", "\n", "logger", ".", "info", "(", "'done'", ")", "\n", "\n", "_compute_and_log_stats", "(", "roidb", ")", "\n", "\n", "return", "roidb", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.roidb.extend_with_flipped_entries": [[76, 109], ["roidb.extend", "entry[].copy", "boxes[].copy", "boxes[].copy", "entry.items", "utils.flip_segms", "flipped_roidb.append", "utils.flip_keypoints"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.segms.flip_segms", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.keypoints.flip_keypoints"], ["", "def", "extend_with_flipped_entries", "(", "roidb", ",", "dataset", ")", ":", "\n", "    ", "\"\"\"Flip each entry in the given roidb and return a new roidb that is the\n    concatenation of the original roidb and the flipped entries.\n\n    \"Flipping\" an entry means that that image and associated metadata (e.g.,\n    ground truth boxes and object proposals) are horizontally flipped.\n    \"\"\"", "\n", "flipped_roidb", "=", "[", "]", "\n", "for", "entry", "in", "roidb", ":", "\n", "        ", "width", "=", "entry", "[", "'width'", "]", "\n", "boxes", "=", "entry", "[", "'boxes'", "]", ".", "copy", "(", ")", "\n", "oldx1", "=", "boxes", "[", ":", ",", "0", "]", ".", "copy", "(", ")", "\n", "oldx2", "=", "boxes", "[", ":", ",", "2", "]", ".", "copy", "(", ")", "\n", "boxes", "[", ":", ",", "0", "]", "=", "width", "-", "oldx2", "-", "1", "\n", "boxes", "[", ":", ",", "2", "]", "=", "width", "-", "oldx1", "-", "1", "\n", "assert", "(", "boxes", "[", ":", ",", "2", "]", ">=", "boxes", "[", ":", ",", "0", "]", ")", ".", "all", "(", ")", "\n", "flipped_entry", "=", "{", "}", "\n", "dont_copy", "=", "(", "'boxes'", ",", "'segms'", ",", "'gt_keypoints'", ",", "'flipped'", ")", "\n", "for", "k", ",", "v", "in", "entry", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", "not", "in", "dont_copy", ":", "\n", "                ", "flipped_entry", "[", "k", "]", "=", "v", "\n", "", "", "flipped_entry", "[", "'boxes'", "]", "=", "boxes", "\n", "flipped_entry", "[", "'segms'", "]", "=", "segm_utils", ".", "flip_segms", "(", "\n", "entry", "[", "'segms'", "]", ",", "entry", "[", "'height'", "]", ",", "entry", "[", "'width'", "]", "\n", ")", "\n", "if", "dataset", ".", "keypoints", "is", "not", "None", ":", "\n", "            ", "flipped_entry", "[", "'gt_keypoints'", "]", "=", "keypoint_utils", ".", "flip_keypoints", "(", "\n", "dataset", ".", "keypoints", ",", "dataset", ".", "keypoint_flip_map", ",", "\n", "entry", "[", "'gt_keypoints'", "]", ",", "entry", "[", "'width'", "]", "\n", ")", "\n", "", "flipped_entry", "[", "'flipped'", "]", "=", "True", "\n", "flipped_roidb", ".", "append", "(", "flipped_entry", ")", "\n", "", "roidb", ".", "extend", "(", "flipped_roidb", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.roidb.filter_for_training": [[111, 137], ["len", "len", "logger.info", "numpy.where", "numpy.where", "roidb.filter_for_training.is_valid"], "function", ["None"], ["", "def", "filter_for_training", "(", "roidb", ")", ":", "\n", "    ", "\"\"\"Remove roidb entries that have no usable RoIs based on config settings.\n    \"\"\"", "\n", "def", "is_valid", "(", "entry", ")", ":", "\n", "# Valid images have:", "\n", "#   (1) At least one foreground RoI OR", "\n", "#   (2) At least one background RoI", "\n", "        ", "overlaps", "=", "entry", "[", "'max_overlaps'", "]", "\n", "# find boxes with sufficient overlap", "\n", "fg_inds", "=", "np", ".", "where", "(", "overlaps", ">=", "cfg", ".", "TRAIN", ".", "FG_THRESH", ")", "[", "0", "]", "\n", "# Select background RoIs as those within [BG_THRESH_LO, BG_THRESH_HI)", "\n", "bg_inds", "=", "np", ".", "where", "(", "(", "overlaps", "<", "cfg", ".", "TRAIN", ".", "BG_THRESH_HI", ")", "&", "\n", "(", "overlaps", ">=", "cfg", ".", "TRAIN", ".", "BG_THRESH_LO", ")", ")", "[", "0", "]", "\n", "# image is only valid if such boxes exist", "\n", "valid", "=", "len", "(", "fg_inds", ")", ">", "0", "or", "len", "(", "bg_inds", ")", ">", "0", "\n", "if", "cfg", ".", "MODEL", ".", "KEYPOINTS_ON", ":", "\n", "# If we're training for keypoints, exclude images with no keypoints", "\n", "            ", "valid", "=", "valid", "and", "entry", "[", "'has_visible_keypoints'", "]", "\n", "", "return", "valid", "\n", "\n", "", "num", "=", "len", "(", "roidb", ")", "\n", "filtered_roidb", "=", "[", "entry", "for", "entry", "in", "roidb", "if", "is_valid", "(", "entry", ")", "]", "\n", "num_after", "=", "len", "(", "filtered_roidb", ")", "\n", "logger", ".", "info", "(", "'Filtered {} roidb entries: {} -> {}'", ".", "\n", "format", "(", "num", "-", "num_after", ",", "num", ",", "num_after", ")", ")", "\n", "return", "filtered_roidb", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.roidb.add_bbox_regression_targets": [[139, 143], ["roidb._compute_targets"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.fast_rcnn._compute_targets"], ["", "def", "add_bbox_regression_targets", "(", "roidb", ")", ":", "\n", "    ", "\"\"\"Add information needed to train bounding-box regressors.\"\"\"", "\n", "for", "entry", "in", "roidb", ":", "\n", "        ", "entry", "[", "'bbox_targets'", "]", "=", "_compute_targets", "(", "entry", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.roidb._compute_targets": [[145, 177], ["numpy.zeros", "utils.bbox_overlaps", "box_utils.bbox_overlaps.argmax", "utils.bbox_transform_inv", "numpy.where", "len", "numpy.where", "rois[].astype", "rois[].astype"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.blob.zeros", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.boxes.bbox_transform_inv"], ["", "", "def", "_compute_targets", "(", "entry", ")", ":", "\n", "    ", "\"\"\"Compute bounding-box regression targets for an image.\"\"\"", "\n", "# Indices of ground-truth ROIs", "\n", "rois", "=", "entry", "[", "'boxes'", "]", "\n", "overlaps", "=", "entry", "[", "'max_overlaps'", "]", "\n", "labels", "=", "entry", "[", "'max_classes'", "]", "\n", "gt_inds", "=", "np", ".", "where", "(", "(", "entry", "[", "'gt_classes'", "]", ">", "0", ")", "&", "(", "entry", "[", "'is_crowd'", "]", "==", "0", ")", ")", "[", "0", "]", "\n", "# Targets has format (class, tx, ty, tw, th)", "\n", "targets", "=", "np", ".", "zeros", "(", "(", "rois", ".", "shape", "[", "0", "]", ",", "5", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "if", "len", "(", "gt_inds", ")", "==", "0", ":", "\n", "# Bail if the image has no ground-truth ROIs", "\n", "        ", "return", "targets", "\n", "\n", "# Indices of examples for which we try to make predictions", "\n", "", "ex_inds", "=", "np", ".", "where", "(", "overlaps", ">=", "cfg", ".", "TRAIN", ".", "BBOX_THRESH", ")", "[", "0", "]", "\n", "\n", "# Get IoU overlap between each ex ROI and gt ROI", "\n", "ex_gt_overlaps", "=", "box_utils", ".", "bbox_overlaps", "(", "\n", "rois", "[", "ex_inds", ",", ":", "]", ".", "astype", "(", "dtype", "=", "np", ".", "float32", ",", "copy", "=", "False", ")", ",", "\n", "rois", "[", "gt_inds", ",", ":", "]", ".", "astype", "(", "dtype", "=", "np", ".", "float32", ",", "copy", "=", "False", ")", ")", "\n", "\n", "# Find which gt ROI each ex ROI has max overlap with:", "\n", "# this will be the ex ROI's gt target", "\n", "gt_assignment", "=", "ex_gt_overlaps", ".", "argmax", "(", "axis", "=", "1", ")", "\n", "gt_rois", "=", "rois", "[", "gt_inds", "[", "gt_assignment", "]", ",", ":", "]", "\n", "ex_rois", "=", "rois", "[", "ex_inds", ",", ":", "]", "\n", "# Use class \"1\" for all boxes if using class_agnostic_bbox_reg", "\n", "targets", "[", "ex_inds", ",", "0", "]", "=", "(", "\n", "1", "if", "cfg", ".", "MODEL", ".", "CLS_AGNOSTIC_BBOX_REG", "else", "labels", "[", "ex_inds", "]", ")", "\n", "targets", "[", "ex_inds", ",", "1", ":", "]", "=", "box_utils", ".", "bbox_transform_inv", "(", "\n", "ex_rois", ",", "gt_rois", ",", "cfg", ".", "MODEL", ".", "BBOX_REG_WEIGHTS", ")", "\n", "return", "targets", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.roidb._compute_and_log_stats": [[179, 200], ["numpy.max", "numpy.arange", "numpy.zeros", "logger.info", "enumerate", "logger.info", "logger.info", "len", "logger.info", "len", "len", "numpy.where", "numpy.histogram", "numpy.sum", "classes[].rjust"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.blob.zeros"], ["", "def", "_compute_and_log_stats", "(", "roidb", ")", ":", "\n", "    ", "classes", "=", "roidb", "[", "0", "]", "[", "'dataset'", "]", ".", "classes", "\n", "char_len", "=", "np", ".", "max", "(", "[", "len", "(", "c", ")", "for", "c", "in", "classes", "]", ")", "\n", "hist_bins", "=", "np", ".", "arange", "(", "len", "(", "classes", ")", "+", "1", ")", "\n", "\n", "# Histogram of ground-truth objects", "\n", "gt_hist", "=", "np", ".", "zeros", "(", "(", "len", "(", "classes", ")", ")", ",", "dtype", "=", "np", ".", "int", ")", "\n", "for", "entry", "in", "roidb", ":", "\n", "        ", "gt_inds", "=", "np", ".", "where", "(", "\n", "(", "entry", "[", "'gt_classes'", "]", ">", "0", ")", "&", "(", "entry", "[", "'is_crowd'", "]", "==", "0", ")", ")", "[", "0", "]", "\n", "gt_classes", "=", "entry", "[", "'gt_classes'", "]", "[", "gt_inds", "]", "\n", "gt_hist", "+=", "np", ".", "histogram", "(", "gt_classes", ",", "bins", "=", "hist_bins", ")", "[", "0", "]", "\n", "", "logger", ".", "info", "(", "'Ground-truth class histogram:'", ")", "\n", "for", "i", ",", "v", "in", "enumerate", "(", "gt_hist", ")", ":", "\n", "        ", "logger", ".", "info", "(", "\n", "'{:d}{:s}: {:d}'", ".", "format", "(", "\n", "i", ",", "classes", "[", "i", "]", ".", "rjust", "(", "char_len", ")", ",", "v", ")", ")", "\n", "", "logger", ".", "info", "(", "'-'", "*", "char_len", ")", "\n", "logger", ".", "info", "(", "\n", "'{:s}: {:d}'", ".", "format", "(", "\n", "'total'", ".", "rjust", "(", "char_len", ")", ",", "np", ".", "sum", "(", "gt_hist", ")", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.cityscapes.coco_to_cityscapes_id.cityscapes_to_coco": [[38, 51], ["None"], "function", ["None"], ["def", "cityscapes_to_coco", "(", "cityscapes_id", ")", ":", "\n", "    ", "lookup", "=", "{", "\n", "0", ":", "0", ",", "# ... background", "\n", "1", ":", "2", ",", "# bicycle", "\n", "2", ":", "3", ",", "# car", "\n", "3", ":", "1", ",", "# person", "\n", "4", ":", "7", ",", "# train", "\n", "5", ":", "8", ",", "# truck", "\n", "6", ":", "4", ",", "# motorcycle", "\n", "7", ":", "6", ",", "# bus", "\n", "8", ":", "-", "1", ",", "# rider (-1 means rand init)", "\n", "}", "\n", "return", "lookup", "[", "cityscapes_id", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.cityscapes.coco_to_cityscapes_id.cityscapes_to_coco_with_rider": [[53, 66], ["None"], "function", ["None"], ["", "def", "cityscapes_to_coco_with_rider", "(", "cityscapes_id", ")", ":", "\n", "    ", "lookup", "=", "{", "\n", "0", ":", "0", ",", "# ... background", "\n", "1", ":", "2", ",", "# bicycle", "\n", "2", ":", "3", ",", "# car", "\n", "3", ":", "1", ",", "# person", "\n", "4", ":", "7", ",", "# train", "\n", "5", ":", "8", ",", "# truck", "\n", "6", ":", "4", ",", "# motorcycle", "\n", "7", ":", "6", ",", "# bus", "\n", "8", ":", "1", ",", "# rider (\"person\", *rider has human right!*)", "\n", "}", "\n", "return", "lookup", "[", "cityscapes_id", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.cityscapes.coco_to_cityscapes_id.cityscapes_to_coco_without_person_rider": [[68, 81], ["None"], "function", ["None"], ["", "def", "cityscapes_to_coco_without_person_rider", "(", "cityscapes_id", ")", ":", "\n", "    ", "lookup", "=", "{", "\n", "0", ":", "0", ",", "# ... background", "\n", "1", ":", "2", ",", "# bicycle", "\n", "2", ":", "3", ",", "# car", "\n", "3", ":", "-", "1", ",", "# person (ignore)", "\n", "4", ":", "7", ",", "# train", "\n", "5", ":", "8", ",", "# truck", "\n", "6", ":", "4", ",", "# motorcycle", "\n", "7", ":", "6", ",", "# bus", "\n", "8", ":", "-", "1", ",", "# rider (ignore)", "\n", "}", "\n", "return", "lookup", "[", "cityscapes_id", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.cityscapes.coco_to_cityscapes_id.cityscapes_to_coco_all_random": [[83, 96], ["None"], "function", ["None"], ["", "def", "cityscapes_to_coco_all_random", "(", "cityscapes_id", ")", ":", "\n", "    ", "lookup", "=", "{", "\n", "0", ":", "-", "1", ",", "# ... background", "\n", "1", ":", "-", "1", ",", "# bicycle", "\n", "2", ":", "-", "1", ",", "# car", "\n", "3", ":", "-", "1", ",", "# person (ignore)", "\n", "4", ":", "-", "1", ",", "# train", "\n", "5", ":", "-", "1", ",", "# truck", "\n", "6", ":", "-", "1", ",", "# motorcycle", "\n", "7", ":", "-", "1", ",", "# bus", "\n", "8", ":", "-", "1", ",", "# rider (ignore)", "\n", "}", "\n", "return", "lookup", "[", "cityscapes_id", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tools.convert_coco_model_to_cityscapes.parse_args": [[23, 45], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "len", "argparse.ArgumentParser.print_help", "sys.exit"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tests.data_loader_benchmark.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "'Convert a COCO pre-trained model for use with Cityscapes'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--coco_model'", ",", "dest", "=", "'coco_model_file_name'", ",", "\n", "help", "=", "'Pretrained network weights file path'", ",", "\n", "default", "=", "None", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--convert_func'", ",", "dest", "=", "'convert_func'", ",", "\n", "help", "=", "'Blob conversion function'", ",", "\n", "default", "=", "'cityscapes_to_coco'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--output'", ",", "dest", "=", "'out_file_name'", ",", "\n", "help", "=", "'Output file path'", ",", "\n", "default", "=", "None", ",", "type", "=", "str", ")", "\n", "\n", "if", "len", "(", "sys", ".", "argv", ")", "==", "1", ":", "\n", "        ", "parser", ".", "print_help", "(", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tools.convert_coco_model_to_cityscapes.convert_coco_blobs_to_cityscape_blobs": [[47, 60], ["model_dict[].items", "print", "convert_coco_model_to_cityscapes.convert_coco_blob_to_cityscapes_blob", "print"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tools.convert_coco_model_to_cityscapes.convert_coco_blob_to_cityscapes_blob"], ["", "def", "convert_coco_blobs_to_cityscape_blobs", "(", "model_dict", ")", ":", "\n", "    ", "for", "k", ",", "v", "in", "model_dict", "[", "'blobs'", "]", ".", "items", "(", ")", ":", "\n", "        ", "if", "v", ".", "shape", "[", "0", "]", "==", "NUM_COCO_CLS", "or", "v", ".", "shape", "[", "0", "]", "==", "4", "*", "NUM_COCO_CLS", ":", "\n", "            ", "coco_blob", "=", "model_dict", "[", "'blobs'", "]", "[", "k", "]", "\n", "print", "(", "\n", "'Converting COCO blob {} with shape {}'", ".", "\n", "format", "(", "k", ",", "coco_blob", ".", "shape", ")", "\n", ")", "\n", "cs_blob", "=", "convert_coco_blob_to_cityscapes_blob", "(", "\n", "coco_blob", ",", "args", ".", "convert_func", "\n", ")", "\n", "print", "(", "' -> converted shape {}'", ".", "format", "(", "cs_blob", ".", "shape", ")", ")", "\n", "model_dict", "[", "'blobs'", "]", "[", "k", "]", "=", "cs_blob", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tools.convert_coco_model_to_cityscapes.convert_coco_blob_to_cityscapes_blob": [[62, 86], ["int", "list", "coco_blob.reshape.reshape", "coco_blob.reshape.std", "coco_blob.reshape.mean", "range", "cs_blob.reshape", "list", "getattr", "numpy.random.randn"], "function", ["None"], ["", "", "", "def", "convert_coco_blob_to_cityscapes_blob", "(", "coco_blob", ",", "convert_func", ")", ":", "\n", "# coco blob (81, ...) or (81*4, ...)", "\n", "    ", "coco_shape", "=", "coco_blob", ".", "shape", "\n", "leading_factor", "=", "int", "(", "coco_shape", "[", "0", "]", "/", "NUM_COCO_CLS", ")", "\n", "tail_shape", "=", "list", "(", "coco_shape", "[", "1", ":", "]", ")", "\n", "assert", "leading_factor", "==", "1", "or", "leading_factor", "==", "4", "\n", "\n", "# Reshape in [num_classes, ...] form for easier manipulations", "\n", "coco_blob", "=", "coco_blob", ".", "reshape", "(", "[", "NUM_COCO_CLS", ",", "-", "1", "]", "+", "tail_shape", ")", "\n", "# Default initialization uses Gaussian with mean and std to match the", "\n", "# existing parameters", "\n", "std", "=", "coco_blob", ".", "std", "(", ")", "\n", "mean", "=", "coco_blob", ".", "mean", "(", ")", "\n", "cs_shape", "=", "[", "NUM_CS_CLS", "]", "+", "list", "(", "coco_blob", ".", "shape", "[", "1", ":", "]", ")", "\n", "cs_blob", "=", "(", "np", ".", "random", ".", "randn", "(", "*", "cs_shape", ")", "*", "std", "+", "mean", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "# Replace random parameters with COCO parameters if class mapping exists", "\n", "for", "i", "in", "range", "(", "NUM_CS_CLS", ")", ":", "\n", "        ", "coco_cls_id", "=", "getattr", "(", "cs", ",", "convert_func", ")", "(", "i", ")", "\n", "if", "coco_cls_id", ">=", "0", ":", "# otherwise ignore (rand init)", "\n", "            ", "cs_blob", "[", "i", "]", "=", "coco_blob", "[", "coco_cls_id", "]", "\n", "\n", "", "", "cs_shape", "=", "[", "NUM_CS_CLS", "*", "leading_factor", "]", "+", "tail_shape", "\n", "return", "cs_blob", ".", "reshape", "(", "cs_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tools.convert_coco_model_to_cityscapes.remove_momentum": [[88, 92], ["model_dict[].keys", "k.endswith"], "function", ["None"], ["", "def", "remove_momentum", "(", "model_dict", ")", ":", "\n", "    ", "for", "k", "in", "model_dict", "[", "'blobs'", "]", ".", "keys", "(", ")", ":", "\n", "        ", "if", "k", ".", "endswith", "(", "'_momentum'", ")", ":", "\n", "            ", "del", "model_dict", "[", "'blobs'", "]", "[", "k", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tools.convert_coco_model_to_cityscapes.load_and_convert_coco_model": [[94, 100], ["convert_coco_model_to_cityscapes.remove_momentum", "convert_coco_model_to_cityscapes.convert_coco_blobs_to_cityscape_blobs", "open", "cPickle.load"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tools.convert_coco_model_to_cityscapes.remove_momentum", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tools.convert_coco_model_to_cityscapes.convert_coco_blobs_to_cityscape_blobs"], ["", "", "", "def", "load_and_convert_coco_model", "(", "args", ")", ":", "\n", "    ", "with", "open", "(", "args", ".", "coco_model_file_name", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "model_dict", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "remove_momentum", "(", "model_dict", ")", "\n", "convert_coco_blobs_to_cityscape_blobs", "(", "model_dict", ")", "\n", "return", "model_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tools.convert_cityscapes_to_coco.parse_args": [[19, 32], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "len", "argparse.ArgumentParser.print_help", "sys.exit"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tests.data_loader_benchmark.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Convert dataset'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--dataset'", ",", "help", "=", "\"cocostuff, cityscapes\"", ",", "default", "=", "None", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--outdir'", ",", "help", "=", "\"output dir for json files\"", ",", "default", "=", "None", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--datadir'", ",", "help", "=", "\"data dir for annotations to be converted\"", ",", "\n", "default", "=", "None", ",", "type", "=", "str", ")", "\n", "if", "len", "(", "sys", ".", "argv", ")", "==", "1", ":", "\n", "        ", "parser", ".", "print_help", "(", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tools.convert_cityscapes_to_coco.convert_coco_stuff_mat": [[34, 72], ["os.path.join", "print", "open", "enumerate", "open", "outfile.write", "img_name.replace().strip.replace().strip", "os.path.join", "h5py.File", "h5py.File.get", "scipy.misc.imsave", "images.append", "len", "os.path.join", "json.dumps", "len", "h5py.File.get", "enumerate", "os.path.join", "img_name.replace().strip.replace", "categories.append", "chr"], "function", ["None"], ["", "def", "convert_coco_stuff_mat", "(", "data_dir", ",", "out_dir", ")", ":", "\n", "    ", "\"\"\"Convert to png and save json with path. This currently only contains\n    the segmentation labels for objects+stuff in cocostuff - if we need to\n    combine with other labels from original COCO that will be a TODO.\"\"\"", "\n", "sets", "=", "[", "'train'", ",", "'val'", "]", "\n", "categories", "=", "[", "]", "\n", "json_name", "=", "'coco_stuff_%s.json'", "\n", "ann_dict", "=", "{", "}", "\n", "for", "data_set", "in", "sets", ":", "\n", "        ", "file_list", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'%s.txt'", ")", "\n", "images", "=", "[", "]", "\n", "with", "open", "(", "file_list", "%", "data_set", ")", "as", "f", ":", "\n", "            ", "for", "img_id", ",", "img_name", "in", "enumerate", "(", "f", ")", ":", "\n", "                ", "img_name", "=", "img_name", ".", "replace", "(", "'coco'", ",", "'COCO'", ")", ".", "strip", "(", "'\\n'", ")", "\n", "image", "=", "{", "}", "\n", "mat_file", "=", "os", ".", "path", ".", "join", "(", "\n", "data_dir", ",", "'annotations/%s.mat'", "%", "img_name", ")", "\n", "data", "=", "h5py", ".", "File", "(", "mat_file", ",", "'r'", ")", "\n", "labelMap", "=", "data", ".", "get", "(", "'S'", ")", "\n", "if", "len", "(", "categories", ")", "==", "0", ":", "\n", "                    ", "labelNames", "=", "data", ".", "get", "(", "'names'", ")", "\n", "for", "idx", ",", "n", "in", "enumerate", "(", "labelNames", ")", ":", "\n", "                        ", "categories", ".", "append", "(", "\n", "{", "\"id\"", ":", "idx", ",", "\"name\"", ":", "''", ".", "join", "(", "chr", "(", "i", ")", "for", "i", "in", "data", "[", "\n", "n", "[", "0", "]", "]", ")", "}", ")", "\n", "", "ann_dict", "[", "'categories'", "]", "=", "categories", "\n", "", "scipy", ".", "misc", ".", "imsave", "(", "\n", "os", ".", "path", ".", "join", "(", "data_dir", ",", "img_name", "+", "'.png'", ")", ",", "labelMap", ")", "\n", "image", "[", "'width'", "]", "=", "labelMap", ".", "shape", "[", "0", "]", "\n", "image", "[", "'height'", "]", "=", "labelMap", ".", "shape", "[", "1", "]", "\n", "image", "[", "'file_name'", "]", "=", "img_name", "\n", "image", "[", "'seg_file_name'", "]", "=", "img_name", "\n", "image", "[", "'id'", "]", "=", "img_id", "\n", "images", ".", "append", "(", "image", ")", "\n", "", "", "ann_dict", "[", "'images'", "]", "=", "images", "\n", "print", "(", "\"Num images: %s\"", "%", "len", "(", "images", ")", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "out_dir", ",", "json_name", "%", "data_set", ")", ",", "'wb'", ")", "as", "outfile", ":", "\n", "            ", "outfile", ".", "write", "(", "json", ".", "dumps", "(", "ann_dict", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tools.convert_cityscapes_to_coco.getLabelID": [[75, 80], ["int"], "function", ["None"], ["", "", "", "def", "getLabelID", "(", "self", ",", "instID", ")", ":", "\n", "    ", "if", "(", "instID", "<", "1000", ")", ":", "\n", "        ", "return", "instID", "\n", "", "else", ":", "\n", "        ", "return", "int", "(", "instID", "/", "1000", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tools.convert_cityscapes_to_coco.convert_cityscapes_instance_only": [[82, 193], ["zip", "print", "os.path.join", "os.walk", "print", "print", "print", "open", "outfile.write", "filename.endswith", "len", "len", "len", "os.path.join", "json.dumps", "json.load", "images.append", "os.path.join", "print", "open", "cityscapesscripts.instances2dict_with_polygons", "data_set.split", "len", "os.path.join", "annotations.append", "data_set.split", "print", "len", "min", "print", "utils.xyxy_to_xywh().tolist", "len", "len", "len", "len", "utils.xyxy_to_xywh", "utils.polys_to_boxes", "data_set.split", "data_set.split"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.boxes.xyxy_to_xywh", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.segms.polys_to_boxes"], ["", "", "def", "convert_cityscapes_instance_only", "(", "\n", "data_dir", ",", "out_dir", ")", ":", "\n", "    ", "\"\"\"Convert from cityscapes format to COCO instance seg format - polygons\"\"\"", "\n", "sets", "=", "[", "\n", "'gtFine_val'", ",", "\n", "# 'gtFine_train',", "\n", "# 'gtFine_test',", "\n", "\n", "# 'gtCoarse_train',", "\n", "# 'gtCoarse_val',", "\n", "# 'gtCoarse_train_extra'", "\n", "]", "\n", "ann_dirs", "=", "[", "\n", "'gtFine_trainvaltest/gtFine/val'", ",", "\n", "# 'gtFine_trainvaltest/gtFine/train',", "\n", "# 'gtFine_trainvaltest/gtFine/test',", "\n", "\n", "# 'gtCoarse/train',", "\n", "# 'gtCoarse/train_extra',", "\n", "# 'gtCoarse/val'", "\n", "]", "\n", "json_name", "=", "'instancesonly_filtered_%s.json'", "\n", "ends_in", "=", "'%s_polygons.json'", "\n", "img_id", "=", "0", "\n", "ann_id", "=", "0", "\n", "cat_id", "=", "1", "\n", "category_dict", "=", "{", "}", "\n", "\n", "category_instancesonly", "=", "[", "\n", "'person'", ",", "\n", "'rider'", ",", "\n", "'car'", ",", "\n", "'truck'", ",", "\n", "'bus'", ",", "\n", "'train'", ",", "\n", "'motorcycle'", ",", "\n", "'bicycle'", ",", "\n", "]", "\n", "\n", "for", "data_set", ",", "ann_dir", "in", "zip", "(", "sets", ",", "ann_dirs", ")", ":", "\n", "        ", "print", "(", "'Starting %s'", "%", "data_set", ")", "\n", "ann_dict", "=", "{", "}", "\n", "images", "=", "[", "]", "\n", "annotations", "=", "[", "]", "\n", "ann_dir", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "ann_dir", ")", "\n", "for", "root", ",", "_", ",", "files", "in", "os", ".", "walk", "(", "ann_dir", ")", ":", "\n", "            ", "for", "filename", "in", "files", ":", "\n", "                ", "if", "filename", ".", "endswith", "(", "ends_in", "%", "data_set", ".", "split", "(", "'_'", ")", "[", "0", "]", ")", ":", "\n", "                    ", "if", "len", "(", "images", ")", "%", "50", "==", "0", ":", "\n", "                        ", "print", "(", "\"Processed %s images, %s annotations\"", "%", "(", "\n", "len", "(", "images", ")", ",", "len", "(", "annotations", ")", ")", ")", "\n", "", "json_ann", "=", "json", ".", "load", "(", "open", "(", "os", ".", "path", ".", "join", "(", "root", ",", "filename", ")", ")", ")", "\n", "image", "=", "{", "}", "\n", "image", "[", "'id'", "]", "=", "img_id", "\n", "img_id", "+=", "1", "\n", "\n", "image", "[", "'width'", "]", "=", "json_ann", "[", "'imgWidth'", "]", "\n", "image", "[", "'height'", "]", "=", "json_ann", "[", "'imgHeight'", "]", "\n", "image", "[", "'file_name'", "]", "=", "filename", "[", ":", "-", "len", "(", "\n", "ends_in", "%", "data_set", ".", "split", "(", "'_'", ")", "[", "0", "]", ")", "]", "+", "'leftImg8bit.png'", "\n", "image", "[", "'seg_file_name'", "]", "=", "filename", "[", ":", "-", "len", "(", "\n", "ends_in", "%", "data_set", ".", "split", "(", "'_'", ")", "[", "0", "]", ")", "]", "+", "'%s_instanceIds.png'", "%", "data_set", ".", "split", "(", "'_'", ")", "[", "0", "]", "\n", "images", ".", "append", "(", "image", ")", "\n", "\n", "fullname", "=", "os", ".", "path", ".", "join", "(", "root", ",", "image", "[", "'seg_file_name'", "]", ")", "\n", "objects", "=", "cs", ".", "instances2dict_with_polygons", "(", "\n", "[", "fullname", "]", ",", "verbose", "=", "False", ")", "[", "fullname", "]", "\n", "\n", "for", "object_cls", "in", "objects", ":", "\n", "                        ", "if", "object_cls", "not", "in", "category_instancesonly", ":", "\n", "                            ", "continue", "# skip non-instance categories", "\n", "\n", "", "for", "obj", "in", "objects", "[", "object_cls", "]", ":", "\n", "                            ", "if", "obj", "[", "'contours'", "]", "==", "[", "]", ":", "\n", "                                ", "print", "(", "'Warning: empty contours.'", ")", "\n", "continue", "# skip non-instance categories", "\n", "\n", "", "len_p", "=", "[", "len", "(", "p", ")", "for", "p", "in", "obj", "[", "'contours'", "]", "]", "\n", "if", "min", "(", "len_p", ")", "<=", "4", ":", "\n", "                                ", "print", "(", "'Warning: invalid contours.'", ")", "\n", "continue", "# skip non-instance categories", "\n", "\n", "", "ann", "=", "{", "}", "\n", "ann", "[", "'id'", "]", "=", "ann_id", "\n", "ann_id", "+=", "1", "\n", "ann", "[", "'image_id'", "]", "=", "image", "[", "'id'", "]", "\n", "ann", "[", "'segmentation'", "]", "=", "obj", "[", "'contours'", "]", "\n", "\n", "if", "object_cls", "not", "in", "category_dict", ":", "\n", "                                ", "category_dict", "[", "object_cls", "]", "=", "cat_id", "\n", "cat_id", "+=", "1", "\n", "", "ann", "[", "'category_id'", "]", "=", "category_dict", "[", "object_cls", "]", "\n", "ann", "[", "'iscrowd'", "]", "=", "0", "\n", "ann", "[", "'area'", "]", "=", "obj", "[", "'pixelCount'", "]", "\n", "ann", "[", "'bbox'", "]", "=", "bboxs_util", ".", "xyxy_to_xywh", "(", "\n", "segms_util", ".", "polys_to_boxes", "(", "\n", "[", "ann", "[", "'segmentation'", "]", "]", ")", ")", ".", "tolist", "(", ")", "[", "0", "]", "\n", "\n", "annotations", ".", "append", "(", "ann", ")", "\n", "\n", "", "", "", "", "", "ann_dict", "[", "'images'", "]", "=", "images", "\n", "categories", "=", "[", "{", "\"id\"", ":", "category_dict", "[", "name", "]", ",", "\"name\"", ":", "name", "}", "for", "name", "in", "\n", "category_dict", "]", "\n", "ann_dict", "[", "'categories'", "]", "=", "categories", "\n", "ann_dict", "[", "'annotations'", "]", "=", "annotations", "\n", "print", "(", "\"Num categories: %s\"", "%", "len", "(", "categories", ")", ")", "\n", "print", "(", "\"Num images: %s\"", "%", "len", "(", "images", ")", ")", "\n", "print", "(", "\"Num annotations: %s\"", "%", "len", "(", "annotations", ")", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "out_dir", ",", "json_name", "%", "data_set", ")", ",", "'wb'", ")", "as", "outfile", ":", "\n", "            ", "outfile", ".", "write", "(", "json", ".", "dumps", "(", "ann_dict", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tools.reval.parse_args": [[46, 84], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "len", "argparse.ArgumentParser.print_help", "sys.exit"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tests.data_loader_benchmark.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Re-evaluate results'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'output_dir'", ",", "nargs", "=", "1", ",", "help", "=", "'results directory'", ",", "type", "=", "str", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--dataset'", ",", "\n", "dest", "=", "'dataset_name'", ",", "\n", "help", "=", "'dataset to re-evaluate'", ",", "\n", "default", "=", "'voc_2007_test'", ",", "\n", "type", "=", "str", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--matlab'", ",", "\n", "dest", "=", "'matlab_eval'", ",", "\n", "help", "=", "'use matlab for evaluation'", ",", "\n", "action", "=", "'store_true'", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--comp'", ",", "\n", "dest", "=", "'comp_mode'", ",", "\n", "help", "=", "'competition mode'", ",", "\n", "action", "=", "'store_true'", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--cfg'", ",", "\n", "dest", "=", "'cfg_file'", ",", "\n", "help", "=", "'optional config file'", ",", "\n", "default", "=", "None", ",", "\n", "type", "=", "str", "\n", ")", "\n", "\n", "if", "len", "(", "sys", ".", "argv", ")", "==", "1", ":", "\n", "        ", "parser", ".", "print_help", "(", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tools.reval.do_reval": [[86, 104], ["datasets.json_dataset.JsonDataset", "datasets.task_evaluation.evaluate_all", "datasets.task_evaluation.log_copy_paste_friendly_results", "open", "cPickle.load", "core.config.merge_cfg_from_cfg", "core.config._merge_a_into_b", "os.path.join", "yaml.load", "yaml.load"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.task_evaluation.evaluate_all", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.task_evaluation.log_copy_paste_friendly_results", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.config.merge_cfg_from_cfg", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.config._merge_a_into_b"], ["", "def", "do_reval", "(", "dataset_name", ",", "output_dir", ",", "args", ")", ":", "\n", "    ", "dataset", "=", "JsonDataset", "(", "dataset_name", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'detections.pkl'", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "dets", "=", "pickle", ".", "load", "(", "f", ")", "\n", "# Override config with the one saved in the detections file", "\n", "", "if", "args", ".", "cfg_file", "is", "not", "None", ":", "\n", "        ", "core", ".", "config", ".", "merge_cfg_from_cfg", "(", "yaml", ".", "load", "(", "dets", "[", "'cfg'", "]", ")", ")", "\n", "", "else", ":", "\n", "        ", "core", ".", "config", ".", "_merge_a_into_b", "(", "yaml", ".", "load", "(", "dets", "[", "'cfg'", "]", ")", ",", "cfg", ")", "\n", "", "results", "=", "task_evaluation", ".", "evaluate_all", "(", "\n", "dataset", ",", "\n", "dets", "[", "'all_boxes'", "]", ",", "\n", "dets", "[", "'all_segms'", "]", ",", "\n", "dets", "[", "'all_keyps'", "]", ",", "\n", "output_dir", ",", "\n", "use_matlab", "=", "args", ".", "matlab_eval", "\n", ")", "\n", "task_evaluation", ".", "log_copy_paste_friendly_results", "(", "results", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tools.test_net.parse_args": [[53, 96], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "len", "argparse.ArgumentParser.print_help", "sys.exit"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tests.data_loader_benchmark.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Test a Fast R-CNN network'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--cfg'", ",", "\n", "dest", "=", "'cfg_file'", ",", "\n", "help", "=", "'optional config file'", ",", "\n", "default", "=", "None", ",", "\n", "type", "=", "str", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--wait'", ",", "\n", "dest", "=", "'wait'", ",", "\n", "help", "=", "'wait until net file exists'", ",", "\n", "default", "=", "True", ",", "\n", "type", "=", "bool", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--vis'", ",", "dest", "=", "'vis'", ",", "help", "=", "'visualize detections'", ",", "action", "=", "'store_true'", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--multi-gpu-testing'", ",", "\n", "dest", "=", "'multi_gpu_testing'", ",", "\n", "help", "=", "'using cfg.NUM_GPUS for inference'", ",", "\n", "action", "=", "'store_true'", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--range'", ",", "\n", "dest", "=", "'range'", ",", "\n", "help", "=", "'start (inclusive) and end (exclusive) indices'", ",", "\n", "default", "=", "None", ",", "\n", "type", "=", "int", ",", "\n", "nargs", "=", "2", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'opts'", ",", "\n", "help", "=", "'See lib/core/config.py for all options'", ",", "\n", "default", "=", "None", ",", "\n", "nargs", "=", "argparse", ".", "REMAINDER", "\n", ")", "\n", "if", "len", "(", "sys", ".", "argv", ")", "==", "1", ":", "\n", "        ", "parser", ".", "print_help", "(", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tools.test_net.main": [[98, 143], ["range", "datasets.task_evaluation.check_expected_results", "datasets.task_evaluation.log_copy_paste_friendly_results", "child_func", "len", "len", "parent_func", "all_results.update"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.task_evaluation.check_expected_results", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.task_evaluation.log_copy_paste_friendly_results"], ["", "def", "main", "(", "ind_range", "=", "None", ",", "multi_gpu_testing", "=", "False", ")", ":", "\n", "# Determine which parent or child function should handle inference", "\n", "    ", "if", "cfg", ".", "MODEL", ".", "RPN_ONLY", ":", "\n", "        ", "child_func", "=", "generate_rpn_on_range", "\n", "parent_func", "=", "generate_rpn_on_dataset", "\n", "", "elif", "cfg", ".", "RETINANET", ".", "RETINANET_ON", ":", "\n", "        ", "child_func", "=", "test_retinanet", "\n", "parent_func", "=", "test_retinanet_on_dataset", "\n", "", "else", ":", "\n", "# Generic case that handles all network types other than RPN-only nets", "\n", "# and RetinaNet", "\n", "        ", "child_func", "=", "test_net", "\n", "parent_func", "=", "test_net_on_dataset", "\n", "\n", "", "is_parent", "=", "ind_range", "is", "None", "\n", "\n", "if", "is_parent", ":", "\n", "# Parent case:", "\n", "# In this case we're either running inference on the entire dataset in a", "\n", "# single process or (if multi_gpu_testing is True) using this process to", "\n", "# launch subprocesses that each run inference on a range of the dataset", "\n", "        ", "if", "len", "(", "cfg", ".", "TEST", ".", "DATASETS", ")", "==", "0", ":", "\n", "            ", "cfg", ".", "TEST", ".", "DATASETS", "=", "(", "cfg", ".", "TEST", ".", "DATASET", ",", ")", "\n", "cfg", ".", "TEST", ".", "PROPOSAL_FILES", "=", "(", "cfg", ".", "TEST", ".", "PROPOSAL_FILE", ",", ")", "\n", "\n", "", "all_results", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "len", "(", "cfg", ".", "TEST", ".", "DATASETS", ")", ")", ":", "\n", "            ", "cfg", ".", "TEST", ".", "DATASET", "=", "cfg", ".", "TEST", ".", "DATASETS", "[", "i", "]", "\n", "if", "cfg", ".", "TEST", ".", "PRECOMPUTED_PROPOSALS", ":", "\n", "                ", "cfg", ".", "TEST", ".", "PROPOSAL_FILE", "=", "cfg", ".", "TEST", ".", "PROPOSAL_FILES", "[", "i", "]", "\n", "", "results", "=", "parent_func", "(", "multi_gpu", "=", "multi_gpu_testing", ")", "\n", "all_results", ".", "update", "(", "results", ")", "\n", "\n", "", "task_evaluation", ".", "check_expected_results", "(", "\n", "all_results", ",", "\n", "atol", "=", "cfg", ".", "EXPECTED_RESULTS_ATOL", ",", "\n", "rtol", "=", "cfg", ".", "EXPECTED_RESULTS_RTOL", "\n", ")", "\n", "task_evaluation", ".", "log_copy_paste_friendly_results", "(", "all_results", ")", "\n", "", "else", ":", "\n", "# Subprocess child case:", "\n", "# In this case test_net was called via subprocess.Popen to execute on a", "\n", "# range of inputs on a single dataset (i.e., use cfg.TEST.DATASET and", "\n", "# don't loop over cfg.TEST.DATASETS)", "\n", "        ", "child_func", "(", "ind_range", "=", "ind_range", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tools.convert_detections_to_text.parse_args": [[48, 83], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "len", "argparse.ArgumentParser.print_help", "sys.exit"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tests.data_loader_benchmark.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Convert results to text format that can be read by matlab scripts'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "'--dataset'", ",", "\n", "dest", "=", "'dataset_name'", ",", "\n", "help", "=", "'dataset to re-evaluate'", ",", "\n", "default", "=", "'voc_2007_test'", ",", "\n", "type", "=", "str", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--detection_folder'", ",", "\n", "dest", "=", "'detection_folder'", ",", "\n", "help", "=", "'folder with detection files'", ",", "\n", "type", "=", "str", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--output_dir'", ",", "\n", "dest", "=", "'output_path'", ",", "\n", "help", "=", "'results directory'", ",", "\n", "default", "=", "None", ",", "\n", "type", "=", "str", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'opts'", ",", "\n", "help", "=", "'See lib/core/config.py for all options'", ",", "\n", "default", "=", "None", ",", "\n", "nargs", "=", "argparse", ".", "REMAINDER", "\n", ")", "\n", "if", "len", "(", "sys", ".", "argv", ")", "==", "1", ":", "\n", "        ", "parser", ".", "print_help", "(", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tools.convert_detections_to_text.get_class_string": [[84, 88], ["None"], "function", ["None"], ["", "def", "get_class_string", "(", "class_index", ",", "score", ",", "dataset", ")", ":", "\n", "    ", "class_text", "=", "dataset", ".", "classes", "[", "class_index", "]", "if", "dataset", "is", "not", "None", "else", "'id{:d}'", ".", "format", "(", "class_index", ")", "\n", "return", "class_text", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tools.convert_detections_to_text.convert_from_cls_format": [[90, 111], ["range", "len", "numpy.concatenate", "len", "len", "len"], "function", ["None"], ["", "def", "convert_from_cls_format", "(", "cls_boxes", ",", "cls_segms", ",", "cls_keyps", ")", ":", "\n", "    ", "\"\"\"Convert from the class boxes/segms/keyps format generated by the testing\n    code.\n    \"\"\"", "\n", "box_list", "=", "[", "b", "for", "b", "in", "cls_boxes", "if", "len", "(", "b", ")", ">", "0", "]", "\n", "if", "len", "(", "box_list", ")", ">", "0", ":", "\n", "        ", "boxes", "=", "np", ".", "concatenate", "(", "box_list", ")", "\n", "", "else", ":", "\n", "        ", "boxes", "=", "None", "\n", "", "if", "cls_segms", "is", "not", "None", ":", "\n", "        ", "segms", "=", "[", "s", "for", "slist", "in", "cls_segms", "for", "s", "in", "slist", "]", "\n", "", "else", ":", "\n", "        ", "segms", "=", "None", "\n", "", "if", "cls_keyps", "is", "not", "None", ":", "\n", "        ", "keyps", "=", "[", "k", "for", "klist", "in", "cls_keyps", "for", "k", "in", "klist", "]", "\n", "", "else", ":", "\n", "        ", "keyps", "=", "None", "\n", "", "classes", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "len", "(", "cls_boxes", ")", ")", ":", "\n", "        ", "classes", "+=", "[", "j", "]", "*", "len", "(", "cls_boxes", "[", "j", "]", ")", "\n", "", "return", "boxes", ",", "segms", ",", "keyps", ",", "classes", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tools.convert_detections_to_text.export_txt": [[113, 176], ["datasets.json_dataset.JsonDataset", "os.path.join", "os.path.exists", "os.path.join", "datasets.json_dataset.JsonDataset.get_roidb", "os.path.join", "open", "cPickle.load", "open", "enumerate", "open", "cPickle.load", "scipy.savemat", "len", "isinstance", "fn.write", "fn.write", "os.path.join", "print", "convert_detections_to_text.export_txt.id_or_index"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.rpn_generator.get_roidb"], ["", "def", "export_txt", "(", "dataset", ",", "detections_folder", ",", "output_path", ",", "limit", "=", "-", "1", ")", ":", "\n", "\n", "    ", "if", "output_path", "is", "None", ":", "\n", "        ", "output_path", "=", "detections_folder", "\n", "\n", "", "ds", "=", "JsonDataset", "(", "dataset", ")", "\n", "#detections_folder = get_output_dir(training=False)", "\n", "\n", "# convert region proposals from pkl to mat format if exist", "\n", "region_proposals_pkl", "=", "os", ".", "path", ".", "join", "(", "detections_folder", ",", "'rpn_proposals.pkl'", ")", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "region_proposals_pkl", ")", ":", "\n", "        ", "with", "open", "(", "region_proposals_pkl", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "region_proposals", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "scio", ".", "savemat", "(", "os", ".", "path", ".", "join", "(", "output_path", ",", "'rpn_proposals.mat'", ")", ",", "region_proposals", ")", "\n", "\n", "\n", "", "", "detections_pkl", "=", "os", ".", "path", ".", "join", "(", "detections_folder", ",", "'detections.pkl'", ")", "\n", "\n", "roidb", "=", "ds", ".", "get_roidb", "(", ")", "\n", "\n", "with", "open", "(", "detections_pkl", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "dets", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "all_boxes", "=", "dets", "[", "'all_boxes'", "]", "\n", "\n", "def", "id_or_index", "(", "ix", ",", "val", ")", ":", "\n", "        ", "if", "len", "(", "val", ")", "==", "0", ":", "\n", "            ", "return", "val", "\n", "", "else", ":", "\n", "            ", "return", "val", "[", "ix", "]", "\n", "\n", "\n", "", "", "output_file", "=", "os", ".", "path", ".", "join", "(", "output_path", ",", "'detections.txt'", ")", "\n", "\n", "with", "open", "(", "output_file", ",", "'w'", ")", "as", "fn", ":", "\n", "        ", "for", "ix", ",", "entry", "in", "enumerate", "(", "roidb", ")", ":", "\n", "            ", "if", "limit", ">", "0", "and", "ix", ">=", "limit", ":", "\n", "                ", "break", "\n", "\n", "", "if", "(", "ix", "+", "1", ")", "%", "250", "==", "0", ":", "\n", "                ", "print", "(", "'{:d}/{:d}'", ".", "format", "(", "ix", "+", "1", ",", "len", "(", "roidb", ")", ")", ")", "\n", "\n", "", "cls_boxes_i", "=", "[", "\n", "id_or_index", "(", "ix", ",", "all_boxes", "[", "j", "]", ")", "for", "j", "in", "range", "(", "len", "(", "all_boxes", ")", ")", "\n", "]", "\n", "\n", "if", "isinstance", "(", "cls_boxes_i", ",", "list", ")", ":", "\n", "                ", "boxes", ",", "segms", ",", "keypoints", ",", "classes", "=", "convert_from_cls_format", "(", "\n", "cls_boxes_i", ",", "None", ",", "None", ")", "\n", "\n", "", "fn", ".", "write", "(", "str", "(", "entry", "[", "'id'", "]", ")", ")", "\n", "fn", ".", "write", "(", "'\\n'", ")", "\n", "\n", "if", "boxes", "is", "not", "None", ":", "\n", "                ", "for", "i", ",", "box", "in", "enumerate", "(", "boxes", ")", ":", "\n", "                    ", "bbox", "=", "box", "[", ":", "4", "]", "\n", "score", "=", "box", "[", "-", "1", "]", "\n", "\n", "fn", ".", "write", "(", "get_class_string", "(", "classes", "[", "i", "]", ",", "score", ",", "ds", ")", "+", "' '", "+", "str", "(", "score", ")", "+", "' '", ")", "\n", "fn", ".", "write", "(", "str", "(", "bbox", "[", "0", "]", ")", "+", "' '", "+", "str", "(", "bbox", "[", "1", "]", ")", "+", "' '", "+", "str", "(", "bbox", "[", "2", "]", ")", "+", "' '", "+", "str", "(", "bbox", "[", "3", "]", ")", ")", "\n", "fn", ".", "write", "(", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tools.visualize_results.parse_args": [[39, 81], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "len", "argparse.ArgumentParser.print_help", "sys.exit"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tests.data_loader_benchmark.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--dataset'", ",", "\n", "dest", "=", "'dataset'", ",", "\n", "help", "=", "'dataset'", ",", "\n", "default", "=", "'coco_2014_minival'", ",", "\n", "type", "=", "str", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--detections'", ",", "\n", "dest", "=", "'detections'", ",", "\n", "help", "=", "'detections pkl file'", ",", "\n", "default", "=", "''", ",", "\n", "type", "=", "str", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--thresh'", ",", "\n", "dest", "=", "'thresh'", ",", "\n", "help", "=", "'detection prob threshold'", ",", "\n", "default", "=", "0.9", ",", "\n", "type", "=", "float", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--output-dir'", ",", "\n", "dest", "=", "'output_dir'", ",", "\n", "help", "=", "'output directory'", ",", "\n", "default", "=", "'./tmp/vis-output'", ",", "\n", "type", "=", "str", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--first'", ",", "\n", "dest", "=", "'first'", ",", "\n", "help", "=", "'only visualize the first k images'", ",", "\n", "default", "=", "0", ",", "\n", "type", "=", "int", "\n", ")", "\n", "if", "len", "(", "sys", ".", "argv", ")", "==", "1", ":", "\n", "        ", "parser", ".", "print_help", "(", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tools.visualize_results.vis": [[83, 142], ["datasets.json_dataset.JsonDataset", "datasets.json_dataset.JsonDataset.get_roidb", "enumerate", "open", "cPickle.load", "cv2.imread", "utils.vis_one_image", "len", "print", "os.path.splitext", "visualize_results.vis.id_or_index"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.rpn_generator.get_roidb", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.vis.vis_one_image"], ["", "def", "vis", "(", "dataset", ",", "detections_pkl", ",", "thresh", ",", "output_dir", ",", "limit", "=", "0", ")", ":", "\n", "    ", "ds", "=", "JsonDataset", "(", "dataset", ")", "\n", "roidb", "=", "ds", ".", "get_roidb", "(", ")", "\n", "\n", "with", "open", "(", "detections_pkl", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "dets", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "all_boxes", "=", "dets", "[", "'all_boxes'", "]", "\n", "if", "'all_segms'", "in", "dets", ":", "\n", "        ", "all_segms", "=", "dets", "[", "'all_segms'", "]", "\n", "", "else", ":", "\n", "        ", "all_segms", "=", "None", "\n", "\n", "", "if", "'all_keyps'", "in", "dets", ":", "\n", "        ", "all_keyps", "=", "dets", "[", "'all_keyps'", "]", "\n", "", "else", ":", "\n", "        ", "all_keyps", "=", "None", "\n", "\n", "", "def", "id_or_index", "(", "ix", ",", "val", ")", ":", "\n", "        ", "if", "len", "(", "val", ")", "==", "0", ":", "\n", "            ", "return", "val", "\n", "", "else", ":", "\n", "            ", "return", "val", "[", "ix", "]", "\n", "\n", "", "", "for", "ix", ",", "entry", "in", "enumerate", "(", "roidb", ")", ":", "\n", "        ", "if", "limit", ">", "0", "and", "ix", ">=", "limit", ":", "\n", "            ", "break", "\n", "", "if", "ix", "%", "10", "==", "0", ":", "\n", "            ", "print", "(", "'{:d}/{:d}'", ".", "format", "(", "ix", "+", "1", ",", "len", "(", "roidb", ")", ")", ")", "\n", "", "im", "=", "cv2", ".", "imread", "(", "entry", "[", "'image'", "]", ")", "\n", "im_name", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "entry", "[", "'image'", "]", ")", ")", "[", "0", "]", "\n", "cls_boxes_i", "=", "[", "\n", "id_or_index", "(", "ix", ",", "all_boxes", "[", "j", "]", ")", "for", "j", "in", "range", "(", "len", "(", "all_boxes", ")", ")", "\n", "]", "\n", "if", "all_segms", "is", "not", "None", ":", "\n", "            ", "cls_segms_i", "=", "[", "\n", "id_or_index", "(", "ix", ",", "all_segms", "[", "j", "]", ")", "for", "j", "in", "range", "(", "len", "(", "all_segms", ")", ")", "\n", "]", "\n", "", "else", ":", "\n", "            ", "cls_segms_i", "=", "None", "\n", "\n", "", "if", "all_keyps", "is", "not", "None", ":", "\n", "            ", "cls_keyps_i", "=", "[", "\n", "id_or_index", "(", "ix", ",", "all_keyps", "[", "j", "]", ")", "for", "j", "in", "range", "(", "len", "(", "all_keyps", ")", ")", "\n", "]", "\n", "", "else", ":", "\n", "            ", "cls_keyps_i", "=", "None", "\n", "\n", "", "vis_utils", ".", "vis_one_image", "(", "\n", "im", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ",", "\n", "'{:d}_{:s}'", ".", "format", "(", "ix", ",", "im_name", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'vis'", ")", ",", "\n", "cls_boxes_i", ",", "\n", "segms", "=", "cls_segms_i", ",", "\n", "keypoints", "=", "cls_keyps_i", ",", "\n", "thresh", "=", "thresh", ",", "\n", "box_alpha", "=", "0.8", ",", "\n", "dataset", "=", "ds", ",", "\n", "show_class", "=", "False", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tools.infer_simple_dfg.parse_args": [[55, 99], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "len", "argparse.ArgumentParser.print_help", "sys.exit"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tests.data_loader_benchmark.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'End-to-end inference'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--cfg'", ",", "\n", "dest", "=", "'cfg'", ",", "\n", "help", "=", "'cfg model file (/path/to/model_config.yaml)'", ",", "\n", "default", "=", "None", ",", "\n", "type", "=", "str", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--wts'", ",", "\n", "dest", "=", "'weights'", ",", "\n", "help", "=", "'weights model file (/path/to/model_weights.pkl)'", ",", "\n", "default", "=", "None", ",", "\n", "type", "=", "str", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--output-dir'", ",", "\n", "dest", "=", "'output_dir'", ",", "\n", "help", "=", "'directory for visualization pdfs (default: NONE - does not output images)'", ",", "\n", "default", "=", "None", ",", "\n", "type", "=", "str", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--output-detection-file'", ",", "\n", "dest", "=", "'output_detection_file'", ",", "\n", "help", "=", "'file for outputing detections (default: NONE - does not output detections)'", ",", "\n", "default", "=", "None", ",", "\n", "type", "=", "str", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--image-ext'", ",", "\n", "dest", "=", "'image_ext'", ",", "\n", "help", "=", "'image file name extension (default: jpg)'", ",", "\n", "default", "=", "'jpg'", ",", "\n", "type", "=", "str", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'im_or_folder'", ",", "help", "=", "'image or folder of images'", ",", "default", "=", "None", "\n", ")", "\n", "if", "len", "(", "sys", ".", "argv", ")", "==", "1", ":", "\n", "        ", "parser", ".", "print_help", "(", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tools.infer_simple_dfg.get_class_string": [[101, 105], ["None"], "function", ["None"], ["", "def", "get_class_string", "(", "class_index", ",", "score", ",", "dataset", ")", ":", "\n", "    ", "class_text", "=", "dataset", ".", "classes", "[", "class_index", "]", "if", "dataset", "is", "not", "None", "else", "'id{:d}'", ".", "format", "(", "class_index", ")", "\n", "return", "class_text", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tools.infer_simple_dfg.main": [[107, 180], ["logging.getLogger", "core.config.merge_cfg_from_file", "core.config.assert_and_infer_cfg", "core.initialize_model_from_cfg", "datasets.get_dfg200_dataset", "os.path.isdir", "sorted", "enumerate", "glob.iglob", "open", "logging.getLogger.info", "cv2.imread", "collections.defaultdict", "time.time", "logging.getLogger.info", "collections.defaultdict.items", "open.close", "len", "utils.NamedCudaScope", "core.im_detect_all", "logging.getLogger.info", "logging.getLogger.info", "isinstance", "utils.vis_one_image", "utils.convert_from_cls_format", "open.write", "open.write", "open.flush", "len", "os.path.basename", "time.time", "os.path.basename", "enumerate", "open.write", "open.write", "open.write", "str", "str", "infer_simple_dfg.get_class_string", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.config.merge_cfg_from_file", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.config.assert_and_infer_cfg", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test_engine.initialize_model_from_cfg", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.dummy_datasets.get_dfg200_dataset", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.c2.NamedCudaScope", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test.im_detect_all", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.vis.vis_one_image", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tools.convert_detections_to_text.convert_from_cls_format", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tools.infer_simple_dfg.get_class_string"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "merge_cfg_from_file", "(", "args", ".", "cfg", ")", "\n", "cfg", ".", "TEST", ".", "WEIGHTS", "=", "args", ".", "weights", "\n", "cfg", ".", "NUM_GPUS", "=", "1", "\n", "assert_and_infer_cfg", "(", "cache_urls", "=", "False", ")", "\n", "model", "=", "infer_engine", ".", "initialize_model_from_cfg", "(", ")", "\n", "dummy_dfg200_dataset", "=", "dummy_datasets", ".", "get_dfg200_dataset", "(", ")", "\n", "\n", "if", "os", ".", "path", ".", "isdir", "(", "args", ".", "im_or_folder", ")", ":", "\n", "        ", "im_list", "=", "glob", ".", "iglob", "(", "args", ".", "im_or_folder", "+", "'/*.'", "+", "args", ".", "image_ext", ")", "\n", "", "else", ":", "\n", "        ", "im_list", "=", "[", "args", ".", "im_or_folder", "]", "\n", "\n", "", "im_list", "=", "sorted", "(", "im_list", ")", "\n", "\n", "fn", "=", "None", "\n", "if", "args", ".", "output_detection_file", "is", "not", "None", "and", "len", "(", "args", ".", "output_detection_file", ")", ">", "0", ":", "\n", "        ", "fn", "=", "open", "(", "args", ".", "output_detection_file", ",", "'w'", ")", "\n", "\n", "", "for", "i", ",", "im_name", "in", "enumerate", "(", "im_list", ")", ":", "\n", "        ", "logger", ".", "info", "(", "'Processing {}'", ".", "format", "(", "im_name", ")", ")", "\n", "im", "=", "cv2", ".", "imread", "(", "im_name", ")", "\n", "timers", "=", "defaultdict", "(", "Timer", ")", "\n", "t", "=", "time", ".", "time", "(", ")", "\n", "with", "c2_utils", ".", "NamedCudaScope", "(", "0", ")", ":", "\n", "            ", "cls_boxes", ",", "cls_segms", ",", "cls_keyps", "=", "infer_engine", ".", "im_detect_all", "(", "\n", "model", ",", "im", ",", "None", ",", "timers", "=", "timers", "\n", ")", "\n", "", "logger", ".", "info", "(", "'Inference time: {:.3f}s'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "t", ")", ")", "\n", "for", "k", ",", "v", "in", "timers", ".", "items", "(", ")", ":", "\n", "            ", "logger", ".", "info", "(", "' | {}: {:.3f}s'", ".", "format", "(", "k", ",", "v", ".", "average_time", ")", ")", "\n", "", "if", "i", "==", "0", ":", "\n", "            ", "logger", ".", "info", "(", "\n", "' \\ Note: inference on the first image will be slower than the '", "\n", "'rest (caches and auto-tuning need to warm up)'", "\n", ")", "\n", "\n", "", "if", "fn", "is", "not", "None", ":", "\n", "            ", "if", "isinstance", "(", "cls_boxes", ",", "list", ")", ":", "\n", "                ", "boxes", ",", "segms", ",", "keypoints", ",", "classes", "=", "vis_utils", ".", "convert_from_cls_format", "(", "\n", "cls_boxes", ",", "cls_segms", ",", "cls_keyps", ")", "\n", "\n", "fn", ".", "write", "(", "os", ".", "path", ".", "basename", "(", "im_name", ")", ")", "\n", "fn", ".", "write", "(", "'\\n'", ")", "\n", "\n", "if", "boxes", "is", "not", "None", ":", "\n", "                    ", "for", "i", ",", "box", "in", "enumerate", "(", "boxes", ")", ":", "\n", "                        ", "bbox", "=", "box", "[", ":", "4", "]", "\n", "score", "=", "box", "[", "-", "1", "]", "\n", "\n", "fn", ".", "write", "(", "get_class_string", "(", "classes", "[", "i", "]", ",", "score", ",", "dummy_dfg200_dataset", ")", "+", "' '", "+", "str", "(", "score", ")", "+", "' '", ")", "\n", "fn", ".", "write", "(", "str", "(", "bbox", "[", "0", "]", ")", "+", "' '", "+", "str", "(", "bbox", "[", "1", "]", ")", "+", "' '", "+", "str", "(", "bbox", "[", "2", "]", "-", "bbox", "[", "0", "]", ")", "+", "' '", "+", "str", "(", "bbox", "[", "3", "]", "-", "bbox", "[", "1", "]", ")", ")", "\n", "fn", ".", "write", "(", "'\\n'", ")", "\n", "", "", "fn", ".", "flush", "(", ")", "\n", "\n", "", "", "if", "args", ".", "output_dir", "is", "not", "None", "and", "len", "(", "args", ".", "output_dir", ")", ">", "0", ":", "\n", "            ", "vis_utils", ".", "vis_one_image", "(", "\n", "im", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ",", "# BGR -> RGB for visualization", "\n", "os", ".", "path", ".", "basename", "(", "im_name", ")", ",", "\n", "args", ".", "output_dir", ",", "\n", "cls_boxes", ",", "\n", "cls_segms", ",", "\n", "cls_keyps", ",", "\n", "dataset", "=", "dummy_dfg200_dataset", ",", "\n", "box_alpha", "=", "0.3", ",", "\n", "show_class", "=", "True", ",", "\n", "thresh", "=", "0.4", ",", "\n", "kp_thresh", "=", "2", ",", "\n", "ext", "=", "'png'", "\n", ")", "\n", "", "", "if", "fn", "is", "not", "None", ":", "\n", "        ", "fn", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tools.infer.parse_args": [[61, 97], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "len", "argparse.ArgumentParser.print_help", "sys.exit"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tests.data_loader_benchmark.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Inference on an image'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--im'", ",", "dest", "=", "'im_file'", ",", "help", "=", "'input image'", ",", "default", "=", "None", ",", "type", "=", "str", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--rpn-pkl'", ",", "\n", "dest", "=", "'rpn_pkl'", ",", "\n", "help", "=", "'rpn model file (pkl)'", ",", "\n", "default", "=", "None", ",", "\n", "type", "=", "str", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--rpn-cfg'", ",", "\n", "dest", "=", "'rpn_cfg'", ",", "\n", "help", "=", "'cfg model file (yaml)'", ",", "\n", "default", "=", "None", ",", "\n", "type", "=", "str", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--output-dir'", ",", "\n", "dest", "=", "'output_dir'", ",", "\n", "help", "=", "'directory for visualization pdfs (default: /tmp/infer)'", ",", "\n", "default", "=", "'/tmp/infer'", ",", "\n", "type", "=", "str", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'models_to_run'", ",", "\n", "help", "=", "'list of pkl, yaml pairs'", ",", "\n", "default", "=", "None", ",", "\n", "nargs", "=", "argparse", ".", "REMAINDER", "\n", ")", "\n", "if", "len", "(", "sys", ".", "argv", ")", "==", "1", ":", "\n", "        ", "parser", ".", "print_help", "(", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tools.infer.get_rpn_box_proposals": [[99, 112], ["core.config.merge_cfg_from_file", "core.config.assert_and_infer_cfg", "core.initialize_model_from_cfg", "utils.NamedCudaScope", "core.im_proposals"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.config.merge_cfg_from_file", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.config.assert_and_infer_cfg", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test_engine.initialize_model_from_cfg", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.c2.NamedCudaScope", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.rpn_generator.im_proposals"], ["", "def", "get_rpn_box_proposals", "(", "im", ",", "args", ")", ":", "\n", "    ", "merge_cfg_from_file", "(", "args", ".", "rpn_cfg", ")", "\n", "cfg", ".", "TEST", ".", "WEIGHTS", "=", "args", ".", "rpn_pkl", "\n", "cfg", ".", "NUM_GPUS", "=", "1", "\n", "cfg", ".", "MODEL", ".", "RPN_ONLY", "=", "True", "\n", "cfg", ".", "TEST", ".", "RPN_PRE_NMS_TOP_N", "=", "10000", "\n", "cfg", ".", "TEST", ".", "RPN_POST_NMS_TOP_N", "=", "2000", "\n", "assert_and_infer_cfg", "(", ")", "\n", "\n", "model", "=", "model_engine", ".", "initialize_model_from_cfg", "(", ")", "\n", "with", "c2_utils", ".", "NamedCudaScope", "(", "0", ")", ":", "\n", "        ", "boxes", ",", "scores", "=", "rpn_engine", ".", "im_proposals", "(", "model", ",", "im", ")", "\n", "", "return", "boxes", ",", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tools.infer.main": [[114, 156], ["datasets.get_coco_dataset", "yaml.load", "cv2.imread", "range", "utils.vis_one_image", "yaml.dump", "infer.get_rpn_box_proposals", "caffe2.python.workspace.ResetWorkspace", "len", "core.config.merge_cfg_from_cfg", "core.config.merge_cfg_from_file", "core.config.assert_and_infer_cfg", "core.initialize_model_from_cfg", "caffe2.python.workspace.ResetWorkspace", "len", "utils.NamedCudaScope", "core.im_detect_all"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.dummy_datasets.get_coco_dataset", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.vis.vis_one_image", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tools.infer.get_rpn_box_proposals", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.config.merge_cfg_from_cfg", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.config.merge_cfg_from_file", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.config.assert_and_infer_cfg", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test_engine.initialize_model_from_cfg", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.c2.NamedCudaScope", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test.im_detect_all"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "dummy_coco_dataset", "=", "dummy_datasets", ".", "get_coco_dataset", "(", ")", "\n", "cfg_orig", "=", "yaml", ".", "load", "(", "yaml", ".", "dump", "(", "cfg", ")", ")", "\n", "im", "=", "cv2", ".", "imread", "(", "args", ".", "im_file", ")", "\n", "\n", "if", "args", ".", "rpn_pkl", "is", "not", "None", ":", "\n", "        ", "proposal_boxes", ",", "_proposal_scores", "=", "get_rpn_box_proposals", "(", "im", ",", "args", ")", "\n", "workspace", ".", "ResetWorkspace", "(", ")", "\n", "", "else", ":", "\n", "        ", "proposal_boxes", "=", "None", "\n", "\n", "", "cls_boxes", ",", "cls_segms", ",", "cls_keyps", "=", "None", ",", "None", ",", "None", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "args", ".", "models_to_run", ")", ",", "2", ")", ":", "\n", "        ", "pkl", "=", "args", ".", "models_to_run", "[", "i", "]", "\n", "yml", "=", "args", ".", "models_to_run", "[", "i", "+", "1", "]", "\n", "merge_cfg_from_cfg", "(", "cfg_orig", ")", "\n", "merge_cfg_from_file", "(", "yml", ")", "\n", "if", "len", "(", "pkl", ")", ">", "0", ":", "\n", "            ", "cfg", ".", "TEST", ".", "WEIGHTS", "=", "pkl", "\n", "", "cfg", ".", "NUM_GPUS", "=", "1", "\n", "assert_and_infer_cfg", "(", ")", "\n", "model", "=", "model_engine", ".", "initialize_model_from_cfg", "(", ")", "\n", "with", "c2_utils", ".", "NamedCudaScope", "(", "0", ")", ":", "\n", "            ", "cls_boxes_", ",", "cls_segms_", ",", "cls_keyps_", "=", "model_engine", ".", "im_detect_all", "(", "model", ",", "im", ",", "proposal_boxes", ")", "\n", "", "cls_boxes", "=", "cls_boxes_", "if", "cls_boxes_", "is", "not", "None", "else", "cls_boxes", "\n", "cls_segms", "=", "cls_segms_", "if", "cls_segms_", "is", "not", "None", "else", "cls_segms", "\n", "cls_keyps", "=", "cls_keyps_", "if", "cls_keyps_", "is", "not", "None", "else", "cls_keyps", "\n", "workspace", ".", "ResetWorkspace", "(", ")", "\n", "\n", "", "vis_utils", ".", "vis_one_image", "(", "\n", "im", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ",", "\n", "args", ".", "im_file", ",", "\n", "args", ".", "output_dir", ",", "\n", "cls_boxes", ",", "\n", "cls_segms", ",", "\n", "cls_keyps", ",", "\n", "dataset", "=", "dummy_coco_dataset", ",", "\n", "box_alpha", "=", "0.3", ",", "\n", "show_class", "=", "True", ",", "\n", "thresh", "=", "0.7", ",", "\n", "kp_thresh", "=", "2", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tools.infer.check_args": [[159, 172], ["os.path.exists", "os.path.exists", "len", "len", "os.path.exists"], "function", ["None"], ["", "def", "check_args", "(", "args", ")", ":", "\n", "    ", "assert", "(", "\n", "(", "args", ".", "rpn_pkl", "is", "not", "None", "and", "args", ".", "rpn_cfg", "is", "not", "None", ")", "or", "\n", "(", "args", ".", "rpn_pkl", "is", "None", "and", "args", ".", "rpn_cfg", "is", "None", ")", "\n", ")", "\n", "if", "args", ".", "rpn_pkl", "is", "not", "None", ":", "\n", "        ", "assert", "os", ".", "path", ".", "exists", "(", "args", ".", "rpn_pkl", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "args", ".", "rpn_cfg", ")", "\n", "", "if", "args", ".", "models_to_run", "is", "not", "None", ":", "\n", "        ", "assert", "len", "(", "args", ".", "models_to_run", ")", "%", "2", "==", "0", "\n", "for", "model_file", "in", "args", ".", "models_to_run", ":", "\n", "            ", "if", "len", "(", "model_file", ")", ">", "0", ":", "\n", "                ", "assert", "os", ".", "path", ".", "exists", "(", "model_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tools.generate_testdev_from_test.parse_args": [[39, 54], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "len", "argparse.ArgumentParser.print_help", "sys.exit"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tests.data_loader_benchmark.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--json'", ",", "dest", "=", "'json_file'", ",", "\n", "help", "=", "'detections json file'", ",", "\n", "default", "=", "''", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--output-dir'", ",", "dest", "=", "'output_dir'", ",", "\n", "help", "=", "'output directory'", ",", "\n", "default", "=", "'/tmp'", ",", "type", "=", "str", ")", "\n", "if", "len", "(", "sys", ".", "argv", ")", "==", "1", ":", "\n", "        ", "parser", ".", "print_help", "(", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tools.generate_testdev_from_test.convert": [[56, 93], ["print", "print", "print", "print", "print", "utils.timer.Timer", "utils.timer.Timer.tic", "range", "print", "os.path.splitext", "os.path.join", "print", "open", "json.load", "open", "json.load", "open", "json.load", "len", "os.path.basename", "open", "json.dump", "len", "len", "print", "dt_testdev.append", "utils.timer.Timer.toc", "len"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.timer.Timer.tic", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.timer.Timer.toc"], ["", "def", "convert", "(", "json_file", ",", "output_dir", ")", ":", "\n", "    ", "print", "(", "'Reading: {}'", ".", "format", "(", "json_file", ")", ")", "\n", "with", "open", "(", "json_file", ",", "'r'", ")", "as", "fid", ":", "\n", "        ", "dt", "=", "json", ".", "load", "(", "fid", ")", "\n", "", "print", "(", "'done!'", ")", "\n", "\n", "test_image_info", "=", "DATASETS", "[", "'coco_2017_test'", "]", "[", "ANN_FN", "]", "\n", "with", "open", "(", "test_image_info", ",", "'r'", ")", "as", "fid", ":", "\n", "        ", "info_test", "=", "json", ".", "load", "(", "fid", ")", "\n", "", "image_test", "=", "info_test", "[", "'images'", "]", "\n", "image_test_id", "=", "[", "i", "[", "'id'", "]", "for", "i", "in", "image_test", "]", "\n", "print", "(", "'{} has {} images'", ".", "format", "(", "test_image_info", ",", "len", "(", "image_test_id", ")", ")", ")", "\n", "\n", "test_dev_image_info", "=", "DATASETS", "[", "'coco_2017_test-dev'", "]", "[", "ANN_FN", "]", "\n", "with", "open", "(", "test_dev_image_info", ",", "'r'", ")", "as", "fid", ":", "\n", "        ", "info_testdev", "=", "json", ".", "load", "(", "fid", ")", "\n", "", "image_testdev", "=", "info_testdev", "[", "'images'", "]", "\n", "image_testdev_id", "=", "[", "i", "[", "'id'", "]", "for", "i", "in", "image_testdev", "]", "\n", "print", "(", "'{} has {} images'", ".", "format", "(", "test_dev_image_info", ",", "len", "(", "image_testdev_id", ")", ")", ")", "\n", "\n", "dt_testdev", "=", "[", "]", "\n", "print", "(", "'Filtering test-dev from test...'", ")", "\n", "t", "=", "Timer", "(", ")", "\n", "t", ".", "tic", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "dt", ")", ")", ":", "\n", "        ", "if", "i", "%", "1000", "==", "0", ":", "\n", "            ", "print", "(", "'{}/{}'", ".", "format", "(", "i", ",", "len", "(", "dt", ")", ")", ")", "\n", "", "if", "dt", "[", "i", "]", "[", "'image_id'", "]", "in", "image_testdev_id", ":", "\n", "            ", "dt_testdev", ".", "append", "(", "dt", "[", "i", "]", ")", "\n", "", "", "print", "(", "'Done filtering ({:2}s)!'", ".", "format", "(", "t", ".", "toc", "(", ")", ")", ")", "\n", "\n", "filename", ",", "file_extension", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "json_file", ")", ")", "\n", "filename", "=", "filename", "+", "'_test-dev'", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "filename", "+", "file_extension", ")", "\n", "with", "open", "(", "filename", ",", "'w'", ")", "as", "fid", ":", "\n", "        ", "info_test", "=", "json", ".", "dump", "(", "dt_testdev", ",", "fid", ")", "\n", "", "print", "(", "'Done writing: {}!'", ".", "format", "(", "filename", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tools.train_net.TrainingStats.__init__": [[101, 119], ["caffe2.python.utils.logging.SmoothedValue", "caffe2.python.utils.logging.SmoothedValue", "caffe2.python.utils.timer.Timer", "caffe2.python.utils.logging.SmoothedValue"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "model", ")", ":", "\n", "# Window size for smoothing tracked values (with median filtering)", "\n", "        ", "self", ".", "WIN_SZ", "=", "20", "\n", "# Output logging period in SGD iterations", "\n", "self", ".", "LOG_PERIOD", "=", "20", "\n", "self", ".", "smoothed_losses_and_metrics", "=", "{", "\n", "key", ":", "SmoothedValue", "(", "self", ".", "WIN_SZ", ")", "\n", "for", "key", "in", "model", ".", "losses", "+", "model", ".", "metrics", "\n", "}", "\n", "self", ".", "losses_and_metrics", "=", "{", "\n", "key", ":", "0", "\n", "for", "key", "in", "model", ".", "losses", "+", "model", ".", "metrics", "\n", "}", "\n", "self", ".", "smoothed_total_loss", "=", "SmoothedValue", "(", "self", ".", "WIN_SZ", ")", "\n", "self", ".", "smoothed_mb_qsize", "=", "SmoothedValue", "(", "self", ".", "WIN_SZ", ")", "\n", "self", ".", "iter_total_loss", "=", "np", ".", "nan", "\n", "self", ".", "iter_timer", "=", "Timer", "(", ")", "\n", "self", ".", "model", "=", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tools.train_net.TrainingStats.IterTic": [[120, 122], ["train_net.TrainingStats.iter_timer.tic"], "methods", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.timer.Timer.tic"], ["", "def", "IterTic", "(", "self", ")", ":", "\n", "        ", "self", ".", "iter_timer", ".", "tic", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tools.train_net.TrainingStats.IterToc": [[123, 125], ["train_net.TrainingStats.iter_timer.toc"], "methods", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.timer.Timer.toc"], ["", "def", "IterToc", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "iter_timer", ".", "toc", "(", "average", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tools.train_net.TrainingStats.ResetIterTimer": [[126, 128], ["train_net.TrainingStats.iter_timer.reset"], "methods", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.timer.Timer.reset"], ["", "def", "ResetIterTimer", "(", "self", ")", ":", "\n", "        ", "self", ".", "iter_timer", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tools.train_net.TrainingStats.UpdateIterStats": [[129, 144], ["train_net.TrainingStats.losses_and_metrics.keys", "train_net.TrainingStats.smoothed_losses_and_metrics.items", "numpy.sum", "train_net.TrainingStats.smoothed_total_loss.AddValue", "train_net.TrainingStats.smoothed_mb_qsize.AddValue", "v.AddValue", "numpy.array", "train_net.TrainingStats.model.roi_data_loader._minibatch_queue.qsize", "caffe2.python.utils.sum_multi_gpu_blob", "caffe2.python.utils.average_multi_gpu_blob"], "methods", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.logging.SmoothedValue.AddValue", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.logging.SmoothedValue.AddValue", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.logging.SmoothedValue.AddValue", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.net.sum_multi_gpu_blob", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.net.average_multi_gpu_blob"], ["", "def", "UpdateIterStats", "(", "self", ")", ":", "\n", "        ", "\"\"\"Update tracked iteration statistics.\"\"\"", "\n", "for", "k", "in", "self", ".", "losses_and_metrics", ".", "keys", "(", ")", ":", "\n", "            ", "if", "k", "in", "self", ".", "model", ".", "losses", ":", "\n", "                ", "self", ".", "losses_and_metrics", "[", "k", "]", "=", "nu", ".", "sum_multi_gpu_blob", "(", "k", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "losses_and_metrics", "[", "k", "]", "=", "nu", ".", "average_multi_gpu_blob", "(", "k", ")", "\n", "", "", "for", "k", ",", "v", "in", "self", ".", "smoothed_losses_and_metrics", ".", "items", "(", ")", ":", "\n", "            ", "v", ".", "AddValue", "(", "self", ".", "losses_and_metrics", "[", "k", "]", ")", "\n", "", "self", ".", "iter_total_loss", "=", "np", ".", "sum", "(", "\n", "np", ".", "array", "(", "[", "self", ".", "losses_and_metrics", "[", "k", "]", "for", "k", "in", "self", ".", "model", ".", "losses", "]", ")", "\n", ")", "\n", "self", ".", "smoothed_total_loss", ".", "AddValue", "(", "self", ".", "iter_total_loss", ")", "\n", "self", ".", "smoothed_mb_qsize", ".", "AddValue", "(", "\n", "self", ".", "model", ".", "roi_data_loader", ".", "_minibatch_queue", ".", "qsize", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tools.train_net.TrainingStats.LogIterStats": [[146, 170], ["str", "caffe2.python.utils.GetGPUMemoryUsageStats", "numpy.max", "dict", "train_net.TrainingStats.smoothed_losses_and_metrics.items", "caffe2.python.utils.logging.log_json_stats", "datetime.timedelta", "v.GetMedianValue", "float", "train_net.TrainingStats.smoothed_total_loss.GetMedianValue", "int", "int", "int", "numpy.round", "numpy.ceil", "train_net.TrainingStats.smoothed_mb_qsize.GetMedianValue"], "methods", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.logging.log_json_stats", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.logging.SmoothedValue.GetMedianValue", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.logging.SmoothedValue.GetMedianValue", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.logging.SmoothedValue.GetMedianValue"], ["", "def", "LogIterStats", "(", "self", ",", "cur_iter", ",", "lr", ")", ":", "\n", "        ", "\"\"\"Log the tracked statistics.\"\"\"", "\n", "if", "(", "cur_iter", "%", "self", ".", "LOG_PERIOD", "==", "0", "or", "\n", "cur_iter", "==", "cfg", ".", "SOLVER", ".", "MAX_ITER", "-", "1", ")", ":", "\n", "            ", "eta_seconds", "=", "self", ".", "iter_timer", ".", "average_time", "*", "(", "\n", "cfg", ".", "SOLVER", ".", "MAX_ITER", "-", "cur_iter", "\n", ")", "\n", "eta", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "int", "(", "eta_seconds", ")", ")", ")", "\n", "mem_stats", "=", "c2_py_utils", ".", "GetGPUMemoryUsageStats", "(", ")", "\n", "mem_usage", "=", "np", ".", "max", "(", "mem_stats", "[", "'max_by_gpu'", "]", "[", ":", "cfg", ".", "NUM_GPUS", "]", ")", "\n", "stats", "=", "dict", "(", "\n", "iter", "=", "cur_iter", ",", "\n", "lr", "=", "float", "(", "lr", ")", ",", "\n", "time", "=", "self", ".", "iter_timer", ".", "average_time", ",", "\n", "loss", "=", "self", ".", "smoothed_total_loss", ".", "GetMedianValue", "(", ")", ",", "\n", "eta", "=", "eta", ",", "\n", "mb_qsize", "=", "int", "(", "\n", "np", ".", "round", "(", "self", ".", "smoothed_mb_qsize", ".", "GetMedianValue", "(", ")", ")", "\n", ")", ",", "\n", "mem", "=", "int", "(", "np", ".", "ceil", "(", "mem_usage", "/", "1024", "/", "1024", ")", ")", "\n", ")", "\n", "for", "k", ",", "v", "in", "self", ".", "smoothed_losses_and_metrics", ".", "items", "(", ")", ":", "\n", "                ", "stats", "[", "k", "]", "=", "v", ".", "GetMedianValue", "(", ")", "\n", "", "log_json_stats", "(", "stats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tools.train_net.parse_args": [[63, 96], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "len", "argparse.ArgumentParser.print_help", "sys.exit"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tests.data_loader_benchmark.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "'Train a network with Detectron'", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--cfg'", ",", "\n", "dest", "=", "'cfg_file'", ",", "\n", "help", "=", "'Config file for training (and optionally testing)'", ",", "\n", "default", "=", "None", ",", "\n", "type", "=", "str", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--multi-gpu-testing'", ",", "\n", "dest", "=", "'multi_gpu_testing'", ",", "\n", "help", "=", "'Use cfg.NUM_GPUS GPUs for inference'", ",", "\n", "action", "=", "'store_true'", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--skip-test'", ",", "\n", "dest", "=", "'skip_test'", ",", "\n", "help", "=", "'Do not test the final model'", ",", "\n", "action", "=", "'store_true'", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'opts'", ",", "\n", "help", "=", "'See lib/core/config.py for all options'", ",", "\n", "default", "=", "None", ",", "\n", "nargs", "=", "argparse", ".", "REMAINDER", "\n", ")", "\n", "if", "len", "(", "sys", ".", "argv", ")", "==", "1", ":", "\n", "        ", "parser", ".", "print_help", "(", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tools.train_net.main": [[172, 200], ["caffe2.python.workspace.GlobalInit", "utils.logging.setup_logging", "logging.getLogger().setLevel", "train_net.parse_args", "utils.logging.setup_logging.info", "utils.logging.setup_logging.info", "core.config.assert_and_infer_cfg", "utils.logging.setup_logging.info", "utils.logging.setup_logging.info", "numpy.random.seed", "train_net.train_model", "core.config.merge_cfg_from_file", "core.config.merge_cfg_from_list", "pprint.pformat", "train_net.test_model", "logging.getLogger"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.logging.setup_logging", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tests.data_loader_benchmark.parse_args", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.config.assert_and_infer_cfg", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tools.train_net.train_model", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.config.merge_cfg_from_file", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.config.merge_cfg_from_list", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tools.train_net.test_model"], ["", "", "", "def", "main", "(", ")", ":", "\n", "# Initialize C2", "\n", "    ", "workspace", ".", "GlobalInit", "(", "\n", "[", "'caffe2'", ",", "'--caffe2_log_level=0'", ",", "'--caffe2_gpu_memory_tracking=1'", "]", "\n", ")", "\n", "# Set up logging and load config options", "\n", "logger", "=", "setup_logging", "(", "__name__", ")", "\n", "logging", ".", "getLogger", "(", "'roi_data.loader'", ")", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "args", "=", "parse_args", "(", ")", "\n", "logger", ".", "info", "(", "'Called with args:'", ")", "\n", "logger", ".", "info", "(", "args", ")", "\n", "if", "args", ".", "cfg_file", "is", "not", "None", ":", "\n", "        ", "merge_cfg_from_file", "(", "args", ".", "cfg_file", ")", "\n", "", "if", "args", ".", "opts", "is", "not", "None", ":", "\n", "        ", "merge_cfg_from_list", "(", "args", ".", "opts", ")", "\n", "", "assert_and_infer_cfg", "(", ")", "\n", "logger", ".", "info", "(", "'Training with config:'", ")", "\n", "logger", ".", "info", "(", "pprint", ".", "pformat", "(", "cfg", ")", ")", "\n", "# Note that while we set the numpy random seed network training will not be", "\n", "# deterministic in general. There are sources of non-determinism that cannot", "\n", "# be removed with a reasonble execution-speed tradeoff (such as certain", "\n", "# non-deterministic cudnn functions).", "\n", "np", ".", "random", ".", "seed", "(", "cfg", ".", "RNG_SEED", ")", "\n", "# Execute the training run", "\n", "checkpoints", "=", "train_model", "(", ")", "\n", "# Test the trained model", "\n", "if", "not", "args", ".", "skip_test", ":", "\n", "        ", "test_model", "(", "checkpoints", "[", "'final'", "]", ",", "args", ".", "multi_gpu_testing", ",", "args", ".", "opts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tools.train_net.train_model": [[202, 246], ["logging.getLogger", "train_net.create_model", "train_net.setup_model_for_training", "train_net.TrainingStats", "int", "range", "os.path.join", "utils.save_model_to_weights_file", "model.roi_data_loader.shutdown", "train_net.TrainingStats.IterTic", "model.UpdateWorkspaceLr", "caffe2.python.workspace.RunNet", "train_net.TrainingStats.IterToc", "train_net.TrainingStats.UpdateIterStats", "train_net.TrainingStats.LogIterStats", "numpy.isnan", "utils.print_net", "os.path.join", "utils.save_model_to_weights_file", "train_net.TrainingStats.ResetIterTimer", "logging.getLogger.critical", "model.roi_data_loader.shutdown", "utils.exit_on_error", "model.net.Proto"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tools.train_net.create_model", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tools.train_net.setup_model_for_training", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.net.save_model_to_weights_file", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.loader.RoIDataLoader.shutdown", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tools.train_net.TrainingStats.IterTic", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.detector.DetectionModelHelper.UpdateWorkspaceLr", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tools.train_net.TrainingStats.IterToc", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tools.train_net.TrainingStats.UpdateIterStats", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tools.train_net.TrainingStats.LogIterStats", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.net.print_net", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.net.save_model_to_weights_file", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tools.train_net.TrainingStats.ResetIterTimer", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.loader.RoIDataLoader.shutdown", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.env.exit_on_error"], ["", "", "def", "train_model", "(", ")", ":", "\n", "    ", "\"\"\"Model training loop.\"\"\"", "\n", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "model", ",", "start_iter", ",", "checkpoints", ",", "output_dir", "=", "create_model", "(", ")", "\n", "if", "'final'", "in", "checkpoints", ":", "\n", "# The final model was found in the output directory, so nothing to do", "\n", "        ", "return", "checkpoints", "\n", "\n", "", "setup_model_for_training", "(", "model", ",", "output_dir", ")", "\n", "training_stats", "=", "TrainingStats", "(", "model", ")", "\n", "CHECKPOINT_PERIOD", "=", "int", "(", "cfg", ".", "TRAIN", ".", "SNAPSHOT_ITERS", "/", "cfg", ".", "NUM_GPUS", ")", "\n", "\n", "for", "cur_iter", "in", "range", "(", "start_iter", ",", "cfg", ".", "SOLVER", ".", "MAX_ITER", ")", ":", "\n", "        ", "training_stats", ".", "IterTic", "(", ")", "\n", "lr", "=", "model", ".", "UpdateWorkspaceLr", "(", "cur_iter", ")", "\n", "workspace", ".", "RunNet", "(", "model", ".", "net", ".", "Proto", "(", ")", ".", "name", ")", "\n", "if", "cur_iter", "==", "start_iter", ":", "\n", "            ", "nu", ".", "print_net", "(", "model", ")", "\n", "", "training_stats", ".", "IterToc", "(", ")", "\n", "training_stats", ".", "UpdateIterStats", "(", ")", "\n", "training_stats", ".", "LogIterStats", "(", "cur_iter", ",", "lr", ")", "\n", "\n", "if", "(", "cur_iter", "+", "1", ")", "%", "CHECKPOINT_PERIOD", "==", "0", "and", "cur_iter", ">", "start_iter", ":", "\n", "            ", "checkpoints", "[", "cur_iter", "]", "=", "os", ".", "path", ".", "join", "(", "\n", "output_dir", ",", "'model_iter{}.pkl'", ".", "format", "(", "cur_iter", ")", "\n", ")", "\n", "nu", ".", "save_model_to_weights_file", "(", "checkpoints", "[", "cur_iter", "]", ",", "model", ")", "\n", "\n", "", "if", "cur_iter", "==", "start_iter", "+", "training_stats", ".", "LOG_PERIOD", ":", "\n", "# Reset the iteration timer to remove outliers from the first few", "\n", "# SGD iterations", "\n", "            ", "training_stats", ".", "ResetIterTimer", "(", ")", "\n", "\n", "", "if", "np", ".", "isnan", "(", "training_stats", ".", "iter_total_loss", ")", ":", "\n", "            ", "logger", ".", "critical", "(", "'Loss is NaN, exiting...'", ")", "\n", "model", ".", "roi_data_loader", ".", "shutdown", "(", ")", "\n", "envu", ".", "exit_on_error", "(", ")", "\n", "\n", "# Save the final model", "\n", "", "", "checkpoints", "[", "'final'", "]", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'model_final.pkl'", ")", "\n", "nu", ".", "save_model_to_weights_file", "(", "checkpoints", "[", "'final'", "]", ",", "model", ")", "\n", "# Shutdown data loading threads", "\n", "model", ".", "roi_data_loader", ".", "shutdown", "(", ")", "\n", "return", "checkpoints", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tools.train_net.create_model": [[248, 289], ["logging.getLogger", "core.config.get_output_dir", "logging.getLogger.info", "modeling.model_builder.create", "caffe2.python.workspace.RunNetOnce", "os.path.join", "os.path.exists", "os.listdir", "train_net.optimize_memory", "logging.getLogger.info", "re.findall", "os.path.join", "logging.getLogger.info", "len", "int"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.config.get_output_dir", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder.create", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tools.train_net.optimize_memory"], ["", "def", "create_model", "(", ")", ":", "\n", "    ", "\"\"\"Build the model and look for saved model checkpoints in case we can\n    resume from one.\n    \"\"\"", "\n", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "start_iter", "=", "0", "\n", "checkpoints", "=", "{", "}", "\n", "output_dir", "=", "get_output_dir", "(", "training", "=", "True", ")", "\n", "if", "cfg", ".", "TRAIN", ".", "AUTO_RESUME", ":", "\n", "# Check for the final model (indicates training already finished)", "\n", "        ", "final_path", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'model_final.pkl'", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "final_path", ")", ":", "\n", "            ", "logger", ".", "info", "(", "'model_final.pkl exists; no need to train!'", ")", "\n", "return", "None", ",", "None", ",", "{", "'final'", ":", "final_path", "}", ",", "output_dir", "\n", "\n", "# Find the most recent checkpoint (highest iteration number)", "\n", "", "files", "=", "os", ".", "listdir", "(", "output_dir", ")", "\n", "for", "f", "in", "files", ":", "\n", "            ", "iter_string", "=", "re", ".", "findall", "(", "r'(?<=model_iter)\\d+(?=\\.pkl)'", ",", "f", ")", "\n", "if", "len", "(", "iter_string", ")", ">", "0", ":", "\n", "                ", "checkpoint_iter", "=", "int", "(", "iter_string", "[", "0", "]", ")", "\n", "if", "checkpoint_iter", ">", "start_iter", ":", "\n", "# Start one iteration immediately after the checkpoint iter", "\n", "                    ", "start_iter", "=", "checkpoint_iter", "+", "1", "\n", "resume_weights_file", "=", "f", "\n", "\n", "", "", "", "if", "start_iter", ">", "0", ":", "\n", "# Override the initialization weights with the found checkpoint", "\n", "            ", "cfg", ".", "TRAIN", ".", "WEIGHTS", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "resume_weights_file", ")", "\n", "logger", ".", "info", "(", "\n", "'========> Resuming from checkpoint {} at start iter {}'", ".", "\n", "format", "(", "cfg", ".", "TRAIN", ".", "WEIGHTS", ",", "start_iter", ")", "\n", ")", "\n", "\n", "", "", "logger", ".", "info", "(", "'Building model: {}'", ".", "format", "(", "cfg", ".", "MODEL", ".", "TYPE", ")", ")", "\n", "model", "=", "model_builder", ".", "create", "(", "cfg", ".", "MODEL", ".", "TYPE", ",", "train", "=", "True", ")", "\n", "if", "cfg", ".", "MEMONGER", ":", "\n", "        ", "optimize_memory", "(", "model", ")", "\n", "# Performs random weight initialization as defined by the model", "\n", "", "workspace", ".", "RunNetOnce", "(", "model", ".", "param_init_net", ")", "\n", "return", "model", ",", "start_iter", ",", "checkpoints", ",", "output_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tools.train_net.optimize_memory": [[291, 302], ["range", "caffe2.python.memonger.share_grad_blobs", "set", "model.param_to_grad.values"], "function", ["None"], ["", "def", "optimize_memory", "(", "model", ")", ":", "\n", "    ", "\"\"\"Save GPU memory through blob sharing.\"\"\"", "\n", "for", "device", "in", "range", "(", "cfg", ".", "NUM_GPUS", ")", ":", "\n", "        ", "namescope", "=", "'gpu_{}/'", ".", "format", "(", "device", ")", "\n", "losses", "=", "[", "namescope", "+", "l", "for", "l", "in", "model", ".", "losses", "]", "\n", "model", ".", "net", ".", "_net", "=", "memonger", ".", "share_grad_blobs", "(", "\n", "model", ".", "net", ",", "\n", "losses", ",", "\n", "set", "(", "model", ".", "param_to_grad", ".", "values", "(", ")", ")", ",", "\n", "namescope", ",", "\n", "share_activations", "=", "cfg", ".", "MEMONGER_SHARE_ACTIVATIONS", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tools.train_net.setup_model_for_training": [[305, 325], ["logging.getLogger", "train_net.add_model_training_inputs", "utils.broadcast_parameters", "caffe2.python.workspace.CreateNet", "logging.getLogger.info", "train_net.dump_proto_files", "model.roi_data_loader.register_sigint_handler", "model.roi_data_loader.start", "utils.initialize_gpu_0_from_weights_file", "os.path.abspath"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tools.train_net.add_model_training_inputs", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.net.broadcast_parameters", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tools.train_net.dump_proto_files", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.loader.RoIDataLoader.register_sigint_handler", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.loader.RoIDataLoader.start", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.net.initialize_gpu_0_from_weights_file"], ["", "", "def", "setup_model_for_training", "(", "model", ",", "output_dir", ")", ":", "\n", "    ", "\"\"\"Loaded saved weights and create the network in the C2 workspace.\"\"\"", "\n", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "add_model_training_inputs", "(", "model", ")", "\n", "\n", "if", "cfg", ".", "TRAIN", ".", "WEIGHTS", ":", "\n", "# Override random weight initialization with weights from a saved model", "\n", "        ", "nu", ".", "initialize_gpu_0_from_weights_file", "(", "model", ",", "cfg", ".", "TRAIN", ".", "WEIGHTS", ")", "\n", "# Even if we're randomly initializing we still need to synchronize", "\n", "# parameters across GPUs", "\n", "", "nu", ".", "broadcast_parameters", "(", "model", ")", "\n", "workspace", ".", "CreateNet", "(", "model", ".", "net", ")", "\n", "\n", "logger", ".", "info", "(", "'Outputs saved to: {:s}'", ".", "format", "(", "os", ".", "path", ".", "abspath", "(", "output_dir", ")", ")", ")", "\n", "dump_proto_files", "(", "model", ",", "output_dir", ")", "\n", "\n", "# Start loading mini-batches and enqueuing blobs", "\n", "model", ".", "roi_data_loader", ".", "register_sigint_handler", "(", ")", "\n", "model", ".", "roi_data_loader", ".", "start", "(", "prefill", "=", "True", ")", "\n", "return", "output_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tools.train_net.add_model_training_inputs": [[327, 336], ["logging.getLogger", "logging.getLogger.info", "datasets.roidb.combined_roidb_for_training", "logging.getLogger.info", "modeling.model_builder.add_training_inputs", "len"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.roidb.combined_roidb_for_training", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder.add_training_inputs"], ["", "def", "add_model_training_inputs", "(", "model", ")", ":", "\n", "    ", "\"\"\"Load the training dataset and attach the training inputs to the model.\"\"\"", "\n", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "logger", ".", "info", "(", "'Loading dataset: {}'", ".", "format", "(", "cfg", ".", "TRAIN", ".", "DATASETS", ")", ")", "\n", "roidb", "=", "combined_roidb_for_training", "(", "\n", "cfg", ".", "TRAIN", ".", "DATASETS", ",", "cfg", ".", "TRAIN", ".", "PROPOSAL_FILES", "\n", ")", "\n", "logger", ".", "info", "(", "'{:d} roidb entries'", ".", "format", "(", "len", "(", "roidb", ")", ")", ")", "\n", "model_builder", ".", "add_training_inputs", "(", "model", ",", "roidb", "=", "roidb", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tools.train_net.dump_proto_files": [[338, 345], ["open", "fid.write", "open", "fid.write", "os.path.join", "str", "os.path.join", "str", "model.net.Proto", "model.param_init_net.Proto"], "function", ["None"], ["", "def", "dump_proto_files", "(", "model", ",", "output_dir", ")", ":", "\n", "    ", "\"\"\"Save prototxt descriptions of the training network and parameter\n    initialization network.\"\"\"", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'net.pbtxt'", ")", ",", "'w'", ")", "as", "fid", ":", "\n", "        ", "fid", ".", "write", "(", "str", "(", "model", ".", "net", ".", "Proto", "(", ")", ")", ")", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'param_init_net.pbtxt'", ")", ",", "'w'", ")", "as", "fid", ":", "\n", "        ", "fid", ".", "write", "(", "str", "(", "model", ".", "param_init_net", ".", "Proto", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tools.train_net.test_model": [[347, 355], ["caffe2.python.workspace.ResetWorkspace", "test_net.main"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tests.data_loader_benchmark.main"], ["", "", "def", "test_model", "(", "model_file", ",", "multi_gpu_testing", ",", "opts", "=", "None", ")", ":", "\n", "    ", "\"\"\"Test a model.\"\"\"", "\n", "# All arguments to inference functions are passed via cfg", "\n", "cfg", ".", "TEST", ".", "WEIGHTS", "=", "model_file", "\n", "# Clear memory before inference", "\n", "workspace", ".", "ResetWorkspace", "(", ")", "\n", "# Run inference", "\n", "test_net", ".", "main", "(", "multi_gpu_testing", "=", "multi_gpu_testing", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tools.infer_simple.parse_args": [[54, 91], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "len", "argparse.ArgumentParser.print_help", "sys.exit"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tests.data_loader_benchmark.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'End-to-end inference'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--cfg'", ",", "\n", "dest", "=", "'cfg'", ",", "\n", "help", "=", "'cfg model file (/path/to/model_config.yaml)'", ",", "\n", "default", "=", "None", ",", "\n", "type", "=", "str", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--wts'", ",", "\n", "dest", "=", "'weights'", ",", "\n", "help", "=", "'weights model file (/path/to/model_weights.pkl)'", ",", "\n", "default", "=", "None", ",", "\n", "type", "=", "str", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--output-dir'", ",", "\n", "dest", "=", "'output_dir'", ",", "\n", "help", "=", "'directory for visualization pdfs (default: /tmp/infer_simple)'", ",", "\n", "default", "=", "'/tmp/infer_simple'", ",", "\n", "type", "=", "str", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--image-ext'", ",", "\n", "dest", "=", "'image_ext'", ",", "\n", "help", "=", "'image file name extension (default: jpg)'", ",", "\n", "default", "=", "'jpg'", ",", "\n", "type", "=", "str", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'im_or_folder'", ",", "help", "=", "'image or folder of images'", ",", "default", "=", "None", "\n", ")", "\n", "if", "len", "(", "sys", ".", "argv", ")", "==", "1", ":", "\n", "        ", "parser", ".", "print_help", "(", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tools.infer_simple.main": [[93, 140], ["logging.getLogger", "core.config.merge_cfg_from_file", "core.config.assert_and_infer_cfg", "core.initialize_model_from_cfg", "datasets.get_coco_dataset", "os.path.isdir", "enumerate", "glob.iglob", "os.path.join", "logging.getLogger.info", "cv2.imread", "collections.defaultdict", "time.time", "logging.getLogger.info", "collections.defaultdict.items", "utils.vis_one_image", "utils.NamedCudaScope", "core.im_detect_all", "logging.getLogger.info", "logging.getLogger.info", "os.path.basename", "time.time"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.config.merge_cfg_from_file", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.config.assert_and_infer_cfg", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test_engine.initialize_model_from_cfg", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.dummy_datasets.get_coco_dataset", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.vis.vis_one_image", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.c2.NamedCudaScope", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test.im_detect_all"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "merge_cfg_from_file", "(", "args", ".", "cfg", ")", "\n", "cfg", ".", "TEST", ".", "WEIGHTS", "=", "args", ".", "weights", "\n", "cfg", ".", "NUM_GPUS", "=", "1", "\n", "assert_and_infer_cfg", "(", ")", "\n", "model", "=", "infer_engine", ".", "initialize_model_from_cfg", "(", ")", "\n", "dummy_coco_dataset", "=", "dummy_datasets", ".", "get_coco_dataset", "(", ")", "\n", "\n", "if", "os", ".", "path", ".", "isdir", "(", "args", ".", "im_or_folder", ")", ":", "\n", "        ", "im_list", "=", "glob", ".", "iglob", "(", "args", ".", "im_or_folder", "+", "'/*.'", "+", "args", ".", "image_ext", ")", "\n", "", "else", ":", "\n", "        ", "im_list", "=", "[", "args", ".", "im_or_folder", "]", "\n", "\n", "", "for", "i", ",", "im_name", "in", "enumerate", "(", "im_list", ")", ":", "\n", "        ", "out_name", "=", "os", ".", "path", ".", "join", "(", "\n", "args", ".", "output_dir", ",", "'{}'", ".", "format", "(", "os", ".", "path", ".", "basename", "(", "im_name", ")", "+", "'.pdf'", ")", "\n", ")", "\n", "logger", ".", "info", "(", "'Processing {} -> {}'", ".", "format", "(", "im_name", ",", "out_name", ")", ")", "\n", "im", "=", "cv2", ".", "imread", "(", "im_name", ")", "\n", "timers", "=", "defaultdict", "(", "Timer", ")", "\n", "t", "=", "time", ".", "time", "(", ")", "\n", "with", "c2_utils", ".", "NamedCudaScope", "(", "0", ")", ":", "\n", "            ", "cls_boxes", ",", "cls_segms", ",", "cls_keyps", "=", "infer_engine", ".", "im_detect_all", "(", "\n", "model", ",", "im", ",", "None", ",", "timers", "=", "timers", "\n", ")", "\n", "", "logger", ".", "info", "(", "'Inference time: {:.3f}s'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "t", ")", ")", "\n", "for", "k", ",", "v", "in", "timers", ".", "items", "(", ")", ":", "\n", "            ", "logger", ".", "info", "(", "' | {}: {:.3f}s'", ".", "format", "(", "k", ",", "v", ".", "average_time", ")", ")", "\n", "", "if", "i", "==", "0", ":", "\n", "            ", "logger", ".", "info", "(", "\n", "' \\ Note: inference on the first image will be slower than the '", "\n", "'rest (caches and auto-tuning need to warm up)'", "\n", ")", "\n", "\n", "", "vis_utils", ".", "vis_one_image", "(", "\n", "im", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ",", "# BGR -> RGB for visualization", "\n", "im_name", ",", "\n", "args", ".", "output_dir", ",", "\n", "cls_boxes", ",", "\n", "cls_segms", ",", "\n", "cls_keyps", ",", "\n", "dataset", "=", "dummy_coco_dataset", ",", "\n", "box_alpha", "=", "0.3", ",", "\n", "show_class", "=", "True", ",", "\n", "thresh", "=", "0.7", ",", "\n", "kp_thresh", "=", "2", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tools.pickle_caffe_blobs.parse_args": [[41, 73], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "len", "argparse.ArgumentParser.print_help", "sys.exit"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tests.data_loader_benchmark.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "'Dump weights from a Caffe model'", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--prototxt'", ",", "\n", "dest", "=", "'prototxt_file_name'", ",", "\n", "help", "=", "'Network definition prototxt file path'", ",", "\n", "default", "=", "None", ",", "\n", "type", "=", "str", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--caffemodel'", ",", "\n", "dest", "=", "'caffemodel_file_name'", ",", "\n", "help", "=", "'Pretrained network weights file path'", ",", "\n", "default", "=", "None", ",", "\n", "type", "=", "str", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--output'", ",", "\n", "dest", "=", "'out_file_name'", ",", "\n", "help", "=", "'Output file path'", ",", "\n", "default", "=", "None", ",", "\n", "type", "=", "str", "\n", ")", "\n", "\n", "if", "len", "(", "sys", ".", "argv", ")", "==", "1", ":", "\n", "        ", "parser", ".", "print_help", "(", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tools.pickle_caffe_blobs.normalize_resnet_name": [[75, 89], ["name.find", "name.find", "len", "name.find", "str", "name.find", "int", "len", "ord", "ord"], "function", ["None"], ["", "def", "normalize_resnet_name", "(", "name", ")", ":", "\n", "    ", "if", "name", ".", "find", "(", "'res'", ")", "==", "0", "and", "name", ".", "find", "(", "'res_'", ")", "==", "-", "1", ":", "\n", "# E.g.,", "\n", "#  res4b11_branch2c -> res4_11_branch2c", "\n", "#  res2a_branch1 -> res2_0_branch1", "\n", "        ", "chunk", "=", "name", "[", "len", "(", "'res'", ")", ":", "name", ".", "find", "(", "'_'", ")", "]", "\n", "name", "=", "(", "\n", "'res'", "+", "chunk", "[", "0", "]", "+", "'_'", "+", "str", "(", "\n", "int", "(", "chunk", "[", "2", ":", "]", ")", "if", "len", "(", "chunk", ")", ">", "2", "# e.g., \"b1\" -> 1", "\n", "else", "ord", "(", "chunk", "[", "1", "]", ")", "-", "ord", "(", "'a'", ")", "\n", ")", "+", "# e.g., \"a\" -> 0", "\n", "name", "[", "name", ".", "find", "(", "'_'", ")", ":", "]", "\n", ")", "\n", "", "return", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tools.pickle_caffe_blobs.pickle_weights": [[91, 100], ["print", "print", "pickle_caffe_blobs.normalize_resnet_name", "caffe2.python.utils.Caffe2TensorToNumpyArray", "open", "cPickle.dump", "sorted", "blobs.keys"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tools.pickle_caffe_blobs.normalize_resnet_name"], ["", "def", "pickle_weights", "(", "out_file_name", ",", "weights", ")", ":", "\n", "    ", "blobs", "=", "{", "\n", "normalize_resnet_name", "(", "blob", ".", "name", ")", ":", "utils", ".", "Caffe2TensorToNumpyArray", "(", "blob", ")", "\n", "for", "blob", "in", "weights", ".", "protos", "\n", "}", "\n", "with", "open", "(", "out_file_name", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "blobs", ",", "f", ",", "protocol", "=", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "", "print", "(", "'Wrote blobs:'", ")", "\n", "print", "(", "sorted", "(", "blobs", ".", "keys", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tools.pickle_caffe_blobs.add_missing_biases": [[102, 111], ["caffe.proto.caffe_pb2.BlobProto", "caffe_pb2.BlobProto.data.extend", "layer.blobs.extend", "len", "numpy.zeros"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.blob.zeros"], ["", "def", "add_missing_biases", "(", "caffenet_weights", ")", ":", "\n", "    ", "for", "layer", "in", "caffenet_weights", ".", "layer", ":", "\n", "        ", "if", "layer", ".", "type", "==", "'Convolution'", "and", "len", "(", "layer", ".", "blobs", ")", "==", "1", ":", "\n", "            ", "num_filters", "=", "layer", ".", "blobs", "[", "0", "]", ".", "shape", ".", "dim", "[", "0", "]", "\n", "bias_blob", "=", "caffe_pb2", ".", "BlobProto", "(", ")", "\n", "bias_blob", ".", "data", ".", "extend", "(", "np", ".", "zeros", "(", "num_filters", ")", ")", "\n", "bias_blob", ".", "num", ",", "bias_blob", ".", "channels", ",", "bias_blob", ".", "height", "=", "1", ",", "1", ",", "1", "\n", "bias_blob", ".", "width", "=", "num_filters", "\n", "layer", ".", "blobs", ".", "extend", "(", "[", "bias_blob", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tools.pickle_caffe_blobs.remove_spatial_bn_layers": [[113, 158], ["pickle_caffe_blobs.remove_spatial_bn_layers._remove_layers"], "function", ["None"], ["", "", "", "def", "remove_spatial_bn_layers", "(", "caffenet", ",", "caffenet_weights", ")", ":", "\n", "# Layer types associated with spatial batch norm", "\n", "    ", "remove_types", "=", "[", "'BatchNorm'", ",", "'Scale'", "]", "\n", "\n", "def", "_remove_layers", "(", "net", ")", ":", "\n", "        ", "for", "i", "in", "reversed", "(", "range", "(", "len", "(", "net", ".", "layer", ")", ")", ")", ":", "\n", "            ", "if", "net", ".", "layer", "[", "i", "]", ".", "type", "in", "remove_types", ":", "\n", "                ", "net", ".", "layer", ".", "pop", "(", "i", ")", "\n", "\n", "# First remove layers from caffenet proto", "\n", "", "", "", "_remove_layers", "(", "caffenet", ")", "\n", "# We'll return these so we can save the batch norm parameters", "\n", "bn_layers", "=", "[", "\n", "layer", "for", "layer", "in", "caffenet_weights", ".", "layer", "if", "layer", ".", "type", "in", "remove_types", "\n", "]", "\n", "_remove_layers", "(", "caffenet_weights", ")", "\n", "\n", "def", "_create_tensor", "(", "arr", ",", "shape", ",", "name", ")", ":", "\n", "        ", "t", "=", "caffe2_pb2", ".", "TensorProto", "(", ")", "\n", "t", ".", "name", "=", "name", "\n", "t", ".", "data_type", "=", "caffe2_pb2", ".", "TensorProto", ".", "FLOAT", "\n", "t", ".", "dims", ".", "extend", "(", "shape", ".", "dim", ")", "\n", "t", ".", "float_data", ".", "extend", "(", "arr", ")", "\n", "assert", "len", "(", "t", ".", "float_data", ")", "==", "np", ".", "prod", "(", "t", ".", "dims", ")", ",", "'Data size, shape mismatch'", "\n", "return", "t", "\n", "\n", "", "bn_tensors", "=", "[", "]", "\n", "for", "(", "bn", ",", "scl", ")", "in", "zip", "(", "bn_layers", "[", "0", ":", ":", "2", "]", ",", "bn_layers", "[", "1", ":", ":", "2", "]", ")", ":", "\n", "        ", "assert", "bn", ".", "name", "[", "len", "(", "'bn'", ")", ":", "]", "==", "scl", ".", "name", "[", "len", "(", "'scale'", ")", ":", "]", ",", "'Pair mismatch'", "\n", "blob_out", "=", "'res'", "+", "bn", ".", "name", "[", "len", "(", "'bn'", ")", ":", "]", "+", "'_bn'", "\n", "bn_mean", "=", "np", ".", "asarray", "(", "bn", ".", "blobs", "[", "0", "]", ".", "data", ")", "\n", "bn_var", "=", "np", ".", "asarray", "(", "bn", ".", "blobs", "[", "1", "]", ".", "data", ")", "\n", "scale", "=", "np", ".", "asarray", "(", "scl", ".", "blobs", "[", "0", "]", ".", "data", ")", "\n", "bias", "=", "np", ".", "asarray", "(", "scl", ".", "blobs", "[", "1", "]", ".", "data", ")", "\n", "std", "=", "np", ".", "sqrt", "(", "bn_var", "+", "1e-5", ")", "\n", "new_scale", "=", "scale", "/", "std", "\n", "new_bias", "=", "bias", "-", "bn_mean", "*", "scale", "/", "std", "\n", "new_scale_tensor", "=", "_create_tensor", "(", "\n", "new_scale", ",", "bn", ".", "blobs", "[", "0", "]", ".", "shape", ",", "blob_out", "+", "'_s'", "\n", ")", "\n", "new_bias_tensor", "=", "_create_tensor", "(", "\n", "new_bias", ",", "bn", ".", "blobs", "[", "0", "]", ".", "shape", ",", "blob_out", "+", "'_b'", "\n", ")", "\n", "bn_tensors", ".", "extend", "(", "[", "new_scale_tensor", ",", "new_bias_tensor", "]", ")", "\n", "", "return", "bn_tensors", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tools.pickle_caffe_blobs.remove_layers_without_parameters": [[160, 174], ["reversed", "range", "len", "len", "range", "caffenet_weights.layer.pop", "len", "print", "caffenet.layer.pop", "len"], "function", ["None"], ["", "def", "remove_layers_without_parameters", "(", "caffenet", ",", "caffenet_weights", ")", ":", "\n", "    ", "for", "i", "in", "reversed", "(", "range", "(", "len", "(", "caffenet_weights", ".", "layer", ")", ")", ")", ":", "\n", "        ", "if", "len", "(", "caffenet_weights", ".", "layer", "[", "i", "]", ".", "blobs", ")", "==", "0", ":", "\n", "# Search for the corresponding layer in caffenet and remove it", "\n", "            ", "name", "=", "caffenet_weights", ".", "layer", "[", "i", "]", ".", "name", "\n", "found", "=", "False", "\n", "for", "j", "in", "range", "(", "len", "(", "caffenet", ".", "layer", ")", ")", ":", "\n", "                ", "if", "caffenet", ".", "layer", "[", "j", "]", ".", "name", "==", "name", ":", "\n", "                    ", "caffenet", ".", "layer", ".", "pop", "(", "j", ")", "\n", "found", "=", "True", "\n", "break", "\n", "", "", "if", "not", "found", "and", "name", "[", "-", "len", "(", "'_split'", ")", ":", "]", "!=", "'_split'", ":", "\n", "                ", "print", "(", "'Warning: layer {} not found in caffenet'", ".", "format", "(", "name", ")", ")", "\n", "", "caffenet_weights", ".", "layer", ".", "pop", "(", "i", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tools.pickle_caffe_blobs.normalize_shape": [[176, 190], ["len", "numpy.prod", "tuple", "len", "len", "len"], "function", ["None"], ["", "", "", "def", "normalize_shape", "(", "caffenet_weights", ")", ":", "\n", "    ", "for", "layer", "in", "caffenet_weights", ".", "layer", ":", "\n", "        ", "for", "blob", "in", "layer", ".", "blobs", ":", "\n", "            ", "shape", "=", "(", "blob", ".", "num", ",", "blob", ".", "channels", ",", "blob", ".", "height", ",", "blob", ".", "width", ")", "\n", "if", "len", "(", "blob", ".", "data", ")", "!=", "np", ".", "prod", "(", "shape", ")", ":", "\n", "                ", "shape", "=", "tuple", "(", "blob", ".", "shape", ".", "dim", ")", "\n", "if", "len", "(", "shape", ")", "==", "1", ":", "\n", "# Handle biases", "\n", "                    ", "shape", "=", "(", "1", ",", "1", ",", "1", ",", "shape", "[", "0", "]", ")", "\n", "", "if", "len", "(", "shape", ")", "==", "2", ":", "\n", "# Handle InnerProduct layers", "\n", "                    ", "shape", "=", "(", "1", ",", "1", ",", "shape", "[", "0", "]", ",", "shape", "[", "1", "]", ")", "\n", "", "assert", "len", "(", "shape", ")", "==", "4", "\n", "blob", ".", "num", ",", "blob", ".", "channels", ",", "blob", ".", "height", ",", "blob", ".", "width", "=", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tools.pickle_caffe_blobs.load_and_convert_caffe_model": [[192, 214], ["caffe.proto.caffe_pb2.NetParameter", "caffe.proto.caffe_pb2.NetParameter", "google.protobuf.text_format.Merge", "caffe_pb2.NetParameter.ParseFromString", "pickle_caffe_blobs.add_missing_biases", "pickle_caffe_blobs.remove_layers_without_parameters", "pickle_caffe_blobs.remove_spatial_bn_layers", "pickle_caffe_blobs.normalize_shape", "caffe2.python.caffe_translator.TranslateModel", "pretrained_weights.protos.extend", "open().read", "open().read", "open", "open"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tools.pickle_caffe_blobs.add_missing_biases", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tools.pickle_caffe_blobs.remove_layers_without_parameters", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tools.pickle_caffe_blobs.remove_spatial_bn_layers", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tools.pickle_caffe_blobs.normalize_shape"], ["", "", "", "", "def", "load_and_convert_caffe_model", "(", "prototxt_file_name", ",", "caffemodel_file_name", ")", ":", "\n", "    ", "caffenet", "=", "caffe_pb2", ".", "NetParameter", "(", ")", "\n", "caffenet_weights", "=", "caffe_pb2", ".", "NetParameter", "(", ")", "\n", "text_format", ".", "Merge", "(", "open", "(", "prototxt_file_name", ")", ".", "read", "(", ")", ",", "caffenet", ")", "\n", "caffenet_weights", ".", "ParseFromString", "(", "open", "(", "caffemodel_file_name", ")", ".", "read", "(", ")", ")", "\n", "# C2 conv layers current require biases, but they are optional in C1", "\n", "# Add zeros as biases is they are missing", "\n", "add_missing_biases", "(", "caffenet_weights", ")", "\n", "# We only care about getting parameters, so remove layers w/o parameters", "\n", "remove_layers_without_parameters", "(", "caffenet", ",", "caffenet_weights", ")", "\n", "# BatchNorm is not implemented in the translator *and* we need to fold Scale", "\n", "# layers into the new C2 SpatialBN op, hence we remove the batch norm layers", "\n", "# and apply custom translations code", "\n", "bn_weights", "=", "remove_spatial_bn_layers", "(", "caffenet", ",", "caffenet_weights", ")", "\n", "# Set num, channel, height and width for blobs that use shape.dim instead", "\n", "normalize_shape", "(", "caffenet_weights", ")", "\n", "# Translate the rest of the model", "\n", "net", ",", "pretrained_weights", "=", "caffe_translator", ".", "TranslateModel", "(", "\n", "caffenet", ",", "caffenet_weights", "\n", ")", "\n", "pretrained_weights", ".", "protos", ".", "extend", "(", "bn_weights", ")", "\n", "return", "net", ",", "pretrained_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.mask_rcnn_heads.add_mask_rcnn_outputs": [[46, 92], ["model.FC", "model.Conv", "model.net.Sigmoid", "model.BilinearInterpolation", "utils.c2.gauss_fill", "utils.c2.const_fill", "utils.c2.const_fill"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.detector.DetectionModelHelper.BilinearInterpolation", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.c2.gauss_fill", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.c2.const_fill", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.c2.const_fill"], ["def", "add_mask_rcnn_outputs", "(", "model", ",", "blob_in", ",", "dim", ")", ":", "\n", "    ", "\"\"\"Add Mask R-CNN specific outputs: either mask logits or probs.\"\"\"", "\n", "num_cls", "=", "cfg", ".", "MODEL", ".", "NUM_CLASSES", "if", "cfg", ".", "MRCNN", ".", "CLS_SPECIFIC_MASK", "else", "1", "\n", "\n", "if", "cfg", ".", "MRCNN", ".", "USE_FC_OUTPUT", ":", "\n", "# Predict masks with a fully connected layer (ignore 'fcn' in the blob", "\n", "# name)", "\n", "        ", "blob_out", "=", "model", ".", "FC", "(", "\n", "blob_in", ",", "\n", "'mask_fcn_logits'", ",", "\n", "dim", ",", "\n", "num_cls", "*", "cfg", ".", "MRCNN", ".", "RESOLUTION", "**", "2", ",", "\n", "weight_init", "=", "gauss_fill", "(", "0.001", ")", ",", "\n", "bias_init", "=", "const_fill", "(", "0.0", ")", "\n", ")", "\n", "", "else", ":", "\n", "# Predict mask using Conv", "\n", "\n", "# Use GaussianFill for class-agnostic mask prediction; fills based on", "\n", "# fan-in can be too large in this case and cause divergence", "\n", "        ", "fill", "=", "(", "\n", "cfg", ".", "MRCNN", ".", "CONV_INIT", "\n", "if", "cfg", ".", "MRCNN", ".", "CLS_SPECIFIC_MASK", "else", "'GaussianFill'", "\n", ")", "\n", "blob_out", "=", "model", ".", "Conv", "(", "\n", "blob_in", ",", "\n", "'mask_fcn_logits'", ",", "\n", "dim", ",", "\n", "num_cls", ",", "\n", "kernel", "=", "1", ",", "\n", "pad", "=", "0", ",", "\n", "stride", "=", "1", ",", "\n", "weight_init", "=", "(", "fill", ",", "{", "'std'", ":", "0.001", "}", ")", ",", "\n", "bias_init", "=", "const_fill", "(", "0.0", ")", "\n", ")", "\n", "\n", "if", "cfg", ".", "MRCNN", ".", "UPSAMPLE_RATIO", ">", "1", ":", "\n", "            ", "blob_out", "=", "model", ".", "BilinearInterpolation", "(", "\n", "'mask_fcn_logits'", ",", "'mask_fcn_logits_up'", ",", "num_cls", ",", "num_cls", ",", "\n", "cfg", ".", "MRCNN", ".", "UPSAMPLE_RATIO", "\n", ")", "\n", "\n", "", "", "if", "not", "model", ".", "train", ":", "# == if test", "\n", "        ", "blob_out", "=", "model", ".", "net", ".", "Sigmoid", "(", "blob_out", ",", "'mask_fcn_probs'", ")", "\n", "\n", "", "return", "blob_out", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.mask_rcnn_heads.add_mask_rcnn_losses": [[94, 104], ["model.net.SigmoidCrossEntropyLoss", "utils.get_loss_gradients", "model.AddLosses"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.blob.get_loss_gradients", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.detector.DetectionModelHelper.AddLosses"], ["", "def", "add_mask_rcnn_losses", "(", "model", ",", "blob_mask", ")", ":", "\n", "    ", "\"\"\"Add Mask R-CNN specific losses.\"\"\"", "\n", "loss_mask", "=", "model", ".", "net", ".", "SigmoidCrossEntropyLoss", "(", "\n", "[", "blob_mask", ",", "'masks_int32'", "]", ",", "\n", "'loss_mask'", ",", "\n", "scale", "=", "1.", "/", "cfg", ".", "NUM_GPUS", "*", "cfg", ".", "MRCNN", ".", "WEIGHT_LOSS_MASK", "\n", ")", "\n", "loss_gradients", "=", "blob_utils", ".", "get_loss_gradients", "(", "model", ",", "[", "loss_mask", "]", ")", "\n", "model", ".", "AddLosses", "(", "'loss_mask'", ")", "\n", "return", "loss_gradients", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.mask_rcnn_heads.mask_rcnn_fcn_head_v1up4convs": [[110, 114], ["mask_rcnn_heads.mask_rcnn_fcn_head_v1upXconvs"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.mask_rcnn_heads.mask_rcnn_fcn_head_v1upXconvs"], ["", "def", "mask_rcnn_fcn_head_v1up4convs", "(", "model", ",", "blob_in", ",", "dim_in", ",", "spatial_scale", ")", ":", "\n", "    ", "\"\"\"v1up design: 4 * (conv 3x3), convT 2x2.\"\"\"", "\n", "return", "mask_rcnn_fcn_head_v1upXconvs", "(", "\n", "model", ",", "blob_in", ",", "dim_in", ",", "spatial_scale", ",", "4", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.mask_rcnn_heads.mask_rcnn_fcn_head_v1up": [[117, 121], ["mask_rcnn_heads.mask_rcnn_fcn_head_v1upXconvs"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.mask_rcnn_heads.mask_rcnn_fcn_head_v1upXconvs"], ["", "def", "mask_rcnn_fcn_head_v1up", "(", "model", ",", "blob_in", ",", "dim_in", ",", "spatial_scale", ")", ":", "\n", "    ", "\"\"\"v1up design: 2 * (conv 3x3), convT 2x2.\"\"\"", "\n", "return", "mask_rcnn_fcn_head_v1upXconvs", "(", "\n", "model", ",", "blob_in", ",", "dim_in", ",", "spatial_scale", ",", "2", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.mask_rcnn_heads.mask_rcnn_fcn_head_v1upXconvs": [[124, 171], ["model.RoIFeatureTransform", "range", "model.ConvTranspose", "model.Relu", "model.Conv", "model.Relu", "utils.c2.const_fill", "str"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.detector.DetectionModelHelper.RoIFeatureTransform", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.c2.const_fill"], ["", "def", "mask_rcnn_fcn_head_v1upXconvs", "(", "\n", "model", ",", "blob_in", ",", "dim_in", ",", "spatial_scale", ",", "num_convs", "\n", ")", ":", "\n", "    ", "\"\"\"v1upXconvs design: X * (conv 3x3), convT 2x2.\"\"\"", "\n", "current", "=", "model", ".", "RoIFeatureTransform", "(", "\n", "blob_in", ",", "\n", "blob_out", "=", "'_[mask]_roi_feat'", ",", "\n", "blob_rois", "=", "'mask_rois'", ",", "\n", "method", "=", "cfg", ".", "MRCNN", ".", "ROI_XFORM_METHOD", ",", "\n", "resolution", "=", "cfg", ".", "MRCNN", ".", "ROI_XFORM_RESOLUTION", ",", "\n", "sampling_ratio", "=", "cfg", ".", "MRCNN", ".", "ROI_XFORM_SAMPLING_RATIO", ",", "\n", "spatial_scale", "=", "spatial_scale", "\n", ")", "\n", "\n", "dilation", "=", "cfg", ".", "MRCNN", ".", "DILATION", "\n", "dim_inner", "=", "cfg", ".", "MRCNN", ".", "DIM_REDUCED", "\n", "\n", "for", "i", "in", "range", "(", "num_convs", ")", ":", "\n", "        ", "current", "=", "model", ".", "Conv", "(", "\n", "current", ",", "\n", "'_[mask]_fcn'", "+", "str", "(", "i", "+", "1", ")", ",", "\n", "dim_in", ",", "\n", "dim_inner", ",", "\n", "kernel", "=", "3", ",", "\n", "pad", "=", "1", "*", "dilation", ",", "\n", "stride", "=", "1", ",", "\n", "weight_init", "=", "(", "cfg", ".", "MRCNN", ".", "CONV_INIT", ",", "{", "'std'", ":", "0.001", "}", ")", ",", "\n", "bias_init", "=", "(", "'ConstantFill'", ",", "{", "'value'", ":", "0.", "}", ")", "\n", ")", "\n", "current", "=", "model", ".", "Relu", "(", "current", ",", "current", ")", "\n", "dim_in", "=", "dim_inner", "\n", "\n", "# upsample layer", "\n", "", "model", ".", "ConvTranspose", "(", "\n", "current", ",", "\n", "'conv5_mask'", ",", "\n", "dim_inner", ",", "\n", "dim_inner", ",", "\n", "kernel", "=", "2", ",", "\n", "pad", "=", "0", ",", "\n", "stride", "=", "2", ",", "\n", "weight_init", "=", "(", "cfg", ".", "MRCNN", ".", "CONV_INIT", ",", "{", "'std'", ":", "0.001", "}", ")", ",", "\n", "bias_init", "=", "const_fill", "(", "0.0", ")", "\n", ")", "\n", "blob_mask", "=", "model", ".", "Relu", "(", "'conv5_mask'", ",", "'conv5_mask'", ")", "\n", "\n", "return", "blob_mask", ",", "dim_inner", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.mask_rcnn_heads.mask_rcnn_fcn_head_v0upshare": [[173, 213], ["model.ConvTranspose", "model.Relu", "model.net.SampleAs", "mask_rcnn_heads.add_ResNet_roi_conv5_head_for_masks", "utils.c2.const_fill"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.mask_rcnn_heads.add_ResNet_roi_conv5_head_for_masks", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.c2.const_fill"], ["", "def", "mask_rcnn_fcn_head_v0upshare", "(", "model", ",", "blob_in", ",", "dim_in", ",", "spatial_scale", ")", ":", "\n", "    ", "\"\"\"Use a ResNet \"conv5\" / \"stage5\" head for mask prediction. Weights and\n    computation are shared with the conv5 box head. Computation can only be\n    shared during training, since inference is cascaded.\n\n    v0upshare design: conv5, convT 2x2.\n    \"\"\"", "\n", "# Since box and mask head are shared, these must match", "\n", "assert", "cfg", ".", "MRCNN", ".", "ROI_XFORM_RESOLUTION", "==", "cfg", ".", "FAST_RCNN", ".", "ROI_XFORM_RESOLUTION", "\n", "\n", "if", "model", ".", "train", ":", "# share computation with bbox head at training time", "\n", "        ", "dim_conv5", "=", "2048", "\n", "blob_conv5", "=", "model", ".", "net", ".", "SampleAs", "(", "\n", "[", "'res5_2_sum'", ",", "'roi_has_mask_int32'", "]", ",", "\n", "[", "'_[mask]_res5_2_sum_sliced'", "]", "\n", ")", "\n", "", "else", ":", "# re-compute at test time", "\n", "        ", "blob_conv5", ",", "dim_conv5", "=", "add_ResNet_roi_conv5_head_for_masks", "(", "\n", "model", ",", "\n", "blob_in", ",", "\n", "dim_in", ",", "\n", "spatial_scale", "\n", ")", "\n", "\n", "", "dim_reduced", "=", "cfg", ".", "MRCNN", ".", "DIM_REDUCED", "\n", "\n", "blob_mask", "=", "model", ".", "ConvTranspose", "(", "\n", "blob_conv5", ",", "\n", "'conv5_mask'", ",", "\n", "dim_conv5", ",", "\n", "dim_reduced", ",", "\n", "kernel", "=", "2", ",", "\n", "pad", "=", "0", ",", "\n", "stride", "=", "2", ",", "\n", "weight_init", "=", "(", "cfg", ".", "MRCNN", ".", "CONV_INIT", ",", "{", "'std'", ":", "0.001", "}", ")", ",", "# std only for gauss", "\n", "bias_init", "=", "const_fill", "(", "0.0", ")", "\n", ")", "\n", "model", ".", "Relu", "(", "'conv5_mask'", ",", "'conv5_mask'", ")", "\n", "\n", "return", "blob_mask", ",", "dim_reduced", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.mask_rcnn_heads.mask_rcnn_fcn_head_v0up": [[215, 240], ["mask_rcnn_heads.add_ResNet_roi_conv5_head_for_masks", "model.ConvTranspose", "model.Relu", "utils.c2.const_fill"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.mask_rcnn_heads.add_ResNet_roi_conv5_head_for_masks", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.c2.const_fill"], ["", "def", "mask_rcnn_fcn_head_v0up", "(", "model", ",", "blob_in", ",", "dim_in", ",", "spatial_scale", ")", ":", "\n", "    ", "\"\"\"v0up design: conv5, deconv 2x2 (no weight sharing with the box head).\"\"\"", "\n", "blob_conv5", ",", "dim_conv5", "=", "add_ResNet_roi_conv5_head_for_masks", "(", "\n", "model", ",", "\n", "blob_in", ",", "\n", "dim_in", ",", "\n", "spatial_scale", "\n", ")", "\n", "\n", "dim_reduced", "=", "cfg", ".", "MRCNN", ".", "DIM_REDUCED", "\n", "\n", "model", ".", "ConvTranspose", "(", "\n", "blob_conv5", ",", "\n", "'conv5_mask'", ",", "\n", "dim_conv5", ",", "\n", "dim_reduced", ",", "\n", "kernel", "=", "2", ",", "\n", "pad", "=", "0", ",", "\n", "stride", "=", "2", ",", "\n", "weight_init", "=", "(", "'GaussianFill'", ",", "{", "'std'", ":", "0.001", "}", ")", ",", "\n", "bias_init", "=", "const_fill", "(", "0.0", ")", "\n", ")", "\n", "blob_mask", "=", "model", ".", "Relu", "(", "'conv5_mask'", ",", "'conv5_mask'", ")", "\n", "\n", "return", "blob_mask", ",", "dim_reduced", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.mask_rcnn_heads.add_ResNet_roi_conv5_head_for_masks": [[242, 270], ["model.RoIFeatureTransform", "int", "modeling.add_stage"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.detector.DetectionModelHelper.RoIFeatureTransform", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.ResNet.add_stage"], ["", "def", "add_ResNet_roi_conv5_head_for_masks", "(", "model", ",", "blob_in", ",", "dim_in", ",", "spatial_scale", ")", ":", "\n", "    ", "\"\"\"Add a ResNet \"conv5\" / \"stage5\" head for predicting masks.\"\"\"", "\n", "model", ".", "RoIFeatureTransform", "(", "\n", "blob_in", ",", "\n", "blob_out", "=", "'_[mask]_pool5'", ",", "\n", "blob_rois", "=", "'mask_rois'", ",", "\n", "method", "=", "cfg", ".", "MRCNN", ".", "ROI_XFORM_METHOD", ",", "\n", "resolution", "=", "cfg", ".", "MRCNN", ".", "ROI_XFORM_RESOLUTION", ",", "\n", "sampling_ratio", "=", "cfg", ".", "MRCNN", ".", "ROI_XFORM_SAMPLING_RATIO", ",", "\n", "spatial_scale", "=", "spatial_scale", "\n", ")", "\n", "\n", "dilation", "=", "cfg", ".", "MRCNN", ".", "DILATION", "\n", "stride_init", "=", "int", "(", "cfg", ".", "MRCNN", ".", "ROI_XFORM_RESOLUTION", "/", "7", ")", "# by default: 2", "\n", "\n", "s", ",", "dim_in", "=", "ResNet", ".", "add_stage", "(", "\n", "model", ",", "\n", "'_[mask]_res5'", ",", "\n", "'_[mask]_pool5'", ",", "\n", "3", ",", "\n", "dim_in", ",", "\n", "2048", ",", "\n", "512", ",", "\n", "dilation", ",", "\n", "stride_init", "=", "stride_init", "\n", ")", "\n", "\n", "return", "s", ",", "2048", "\n", "", ""]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.ResNet.add_ResNet50_conv4_body": [[33, 35], ["ResNet.add_ResNet_convX_body"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.ResNet.add_ResNet_convX_body"], ["def", "add_ResNet50_conv4_body", "(", "model", ")", ":", "\n", "    ", "return", "add_ResNet_convX_body", "(", "model", ",", "(", "3", ",", "4", ",", "6", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.ResNet.add_ResNet50_conv5_body": [[37, 39], ["ResNet.add_ResNet_convX_body"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.ResNet.add_ResNet_convX_body"], ["", "def", "add_ResNet50_conv5_body", "(", "model", ")", ":", "\n", "    ", "return", "add_ResNet_convX_body", "(", "model", ",", "(", "3", ",", "4", ",", "6", ",", "3", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.ResNet.add_ResNet101_conv4_body": [[41, 43], ["ResNet.add_ResNet_convX_body"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.ResNet.add_ResNet_convX_body"], ["", "def", "add_ResNet101_conv4_body", "(", "model", ")", ":", "\n", "    ", "return", "add_ResNet_convX_body", "(", "model", ",", "(", "3", ",", "4", ",", "23", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.ResNet.add_ResNet101_conv5_body": [[45, 47], ["ResNet.add_ResNet_convX_body"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.ResNet.add_ResNet_convX_body"], ["", "def", "add_ResNet101_conv5_body", "(", "model", ")", ":", "\n", "    ", "return", "add_ResNet_convX_body", "(", "model", ",", "(", "3", ",", "4", ",", "23", ",", "3", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.ResNet.add_ResNet152_conv5_body": [[49, 51], ["ResNet.add_ResNet_convX_body"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.ResNet.add_ResNet_convX_body"], ["", "def", "add_ResNet152_conv5_body", "(", "model", ")", ":", "\n", "    ", "return", "add_ResNet_convX_body", "(", "model", ",", "(", "3", ",", "8", ",", "36", ",", "3", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.ResNet.add_stage": [[58, 87], ["range", "ResNet.add_residual_block", "core.config.cfg.RESNETS.RES5_DILATION"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.ResNet.add_residual_block"], ["", "def", "add_stage", "(", "\n", "model", ",", "\n", "prefix", ",", "\n", "blob_in", ",", "\n", "n", ",", "\n", "dim_in", ",", "\n", "dim_out", ",", "\n", "dim_inner", ",", "\n", "dilation", ",", "\n", "stride_init", "=", "2", "\n", ")", ":", "\n", "    ", "\"\"\"Add a ResNet stage to the model by stacking n residual blocks.\"\"\"", "\n", "# e.g., prefix = res2", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "        ", "blob_in", "=", "add_residual_block", "(", "\n", "model", ",", "\n", "'{}_{}'", ".", "format", "(", "prefix", ",", "i", ")", ",", "\n", "blob_in", ",", "\n", "dim_in", ",", "\n", "dim_out", ",", "\n", "dim_inner", ",", "\n", "dilation", ",", "\n", "stride_init", ",", "\n", "# Not using inplace for the last block;", "\n", "# it may be fetched externally or used by FPN", "\n", "inplace_sum", "=", "i", "<", "n", "-", "1", "\n", ")", "\n", "dim_in", "=", "dim_out", "\n", "", "return", "blob_in", ",", "dim_in", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.ResNet.add_ResNet_convX_body": [[89, 125], ["model.Conv", "model.AffineChannel", "model.Relu", "model.MaxPool", "ResNet.add_stage", "ResNet.add_stage", "ResNet.add_stage", "model.StopGradient", "model.StopGradient", "model.StopGradient", "len", "ResNet.add_stage", "model.StopGradient"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.detector.DetectionModelHelper.AffineChannel", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.ResNet.add_stage", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.ResNet.add_stage", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.ResNet.add_stage", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.ResNet.add_stage"], ["", "def", "add_ResNet_convX_body", "(", "model", ",", "block_counts", ",", "freeze_at", "=", "2", ")", ":", "\n", "    ", "\"\"\"Add a ResNet body from input data up through the res5 (aka conv5) stage.\n    The final res5/conv5 stage may be optionally excluded (hence convX, where\n    X = 4 or 5).\"\"\"", "\n", "assert", "freeze_at", "in", "[", "0", ",", "2", ",", "3", ",", "4", ",", "5", "]", "\n", "p", "=", "model", ".", "Conv", "(", "'data'", ",", "'conv1'", ",", "3", ",", "64", ",", "7", ",", "pad", "=", "3", ",", "stride", "=", "2", ",", "no_bias", "=", "1", ")", "\n", "p", "=", "model", ".", "AffineChannel", "(", "p", ",", "'res_conv1_bn'", ",", "inplace", "=", "True", ")", "\n", "p", "=", "model", ".", "Relu", "(", "p", ",", "p", ")", "\n", "p", "=", "model", ".", "MaxPool", "(", "p", ",", "'pool1'", ",", "kernel", "=", "3", ",", "pad", "=", "1", ",", "stride", "=", "2", ")", "\n", "dim_in", "=", "64", "\n", "dim_bottleneck", "=", "cfg", ".", "RESNETS", ".", "NUM_GROUPS", "*", "cfg", ".", "RESNETS", ".", "WIDTH_PER_GROUP", "\n", "(", "n1", ",", "n2", ",", "n3", ")", "=", "block_counts", "[", ":", "3", "]", "\n", "s", ",", "dim_in", "=", "add_stage", "(", "model", ",", "'res2'", ",", "p", ",", "n1", ",", "dim_in", ",", "256", ",", "dim_bottleneck", ",", "1", ")", "\n", "if", "freeze_at", "==", "2", ":", "\n", "        ", "model", ".", "StopGradient", "(", "s", ",", "s", ")", "\n", "", "s", ",", "dim_in", "=", "add_stage", "(", "\n", "model", ",", "'res3'", ",", "s", ",", "n2", ",", "dim_in", ",", "512", ",", "dim_bottleneck", "*", "2", ",", "1", "\n", ")", "\n", "if", "freeze_at", "==", "3", ":", "\n", "        ", "model", ".", "StopGradient", "(", "s", ",", "s", ")", "\n", "", "s", ",", "dim_in", "=", "add_stage", "(", "\n", "model", ",", "'res4'", ",", "s", ",", "n3", ",", "dim_in", ",", "1024", ",", "dim_bottleneck", "*", "4", ",", "1", "\n", ")", "\n", "if", "freeze_at", "==", "4", ":", "\n", "        ", "model", ".", "StopGradient", "(", "s", ",", "s", ")", "\n", "", "if", "len", "(", "block_counts", ")", "==", "4", ":", "\n", "        ", "n4", "=", "block_counts", "[", "3", "]", "\n", "s", ",", "dim_in", "=", "add_stage", "(", "\n", "model", ",", "'res5'", ",", "s", ",", "n4", ",", "dim_in", ",", "2048", ",", "dim_bottleneck", "*", "8", ",", "\n", "cfg", ".", "RESNETS", ".", "RES5_DILATION", "\n", ")", "\n", "if", "freeze_at", "==", "5", ":", "\n", "            ", "model", ".", "StopGradient", "(", "s", ",", "s", ")", "\n", "", "return", "s", ",", "dim_in", ",", "1.", "/", "32.", "*", "cfg", ".", "RESNETS", ".", "RES5_DILATION", "\n", "", "else", ":", "\n", "        ", "return", "s", ",", "dim_in", ",", "1.", "/", "16.", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.ResNet.add_ResNet_roi_conv5_head": [[127, 149], ["model.RoIFeatureTransform", "int", "ResNet.add_stage", "model.AveragePool"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.detector.DetectionModelHelper.RoIFeatureTransform", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.ResNet.add_stage"], ["", "", "def", "add_ResNet_roi_conv5_head", "(", "model", ",", "blob_in", ",", "dim_in", ",", "spatial_scale", ")", ":", "\n", "    ", "\"\"\"Adds an RoI feature transformation (e.g., RoI pooling) followed by a\n    res5/conv5 head applied to each RoI.\"\"\"", "\n", "# TODO(rbg): This contains Fast R-CNN specific config options making it non-", "\n", "# reusable; make this more generic with model-specific wrappers", "\n", "model", ".", "RoIFeatureTransform", "(", "\n", "blob_in", ",", "\n", "'pool5'", ",", "\n", "blob_rois", "=", "'rois'", ",", "\n", "method", "=", "cfg", ".", "FAST_RCNN", ".", "ROI_XFORM_METHOD", ",", "\n", "resolution", "=", "cfg", ".", "FAST_RCNN", ".", "ROI_XFORM_RESOLUTION", ",", "\n", "sampling_ratio", "=", "cfg", ".", "FAST_RCNN", ".", "ROI_XFORM_SAMPLING_RATIO", ",", "\n", "spatial_scale", "=", "spatial_scale", "\n", ")", "\n", "dim_bottleneck", "=", "cfg", ".", "RESNETS", ".", "NUM_GROUPS", "*", "cfg", ".", "RESNETS", ".", "WIDTH_PER_GROUP", "\n", "stride_init", "=", "int", "(", "cfg", ".", "FAST_RCNN", ".", "ROI_XFORM_RESOLUTION", "/", "7", ")", "\n", "s", ",", "dim_in", "=", "add_stage", "(", "\n", "model", ",", "'res5'", ",", "'pool5'", ",", "3", ",", "dim_in", ",", "2048", ",", "dim_bottleneck", "*", "8", ",", "1", ",", "\n", "stride_init", "\n", ")", "\n", "s", "=", "model", ".", "AveragePool", "(", "s", ",", "'res5_pool'", ",", "kernel", "=", "7", ")", "\n", "return", "s", ",", "2048", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.ResNet.add_residual_block": [[151, 192], ["ResNet.add_shortcut", "model.Relu", "model.net.Sum", "model.net.Sum", "globals"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.ResNet.add_shortcut"], ["", "def", "add_residual_block", "(", "\n", "model", ",", "\n", "prefix", ",", "\n", "blob_in", ",", "\n", "dim_in", ",", "\n", "dim_out", ",", "\n", "dim_inner", ",", "\n", "dilation", ",", "\n", "stride_init", "=", "2", ",", "\n", "inplace_sum", "=", "False", "\n", ")", ":", "\n", "    ", "\"\"\"Add a residual block to the model.\"\"\"", "\n", "# prefix = res<stage>_<sub_stage>, e.g., res2_3", "\n", "\n", "# Max pooling is performed prior to the first stage (which is uniquely", "\n", "# distinguished by dim_in = 64), thus we keep stride = 1 for the first stage", "\n", "stride", "=", "stride_init", "if", "(", "\n", "dim_in", "!=", "dim_out", "and", "dim_in", "!=", "64", "and", "dilation", "==", "1", "\n", ")", "else", "1", "\n", "\n", "# transformation blob", "\n", "tr", "=", "globals", "(", ")", "[", "cfg", ".", "RESNETS", ".", "TRANS_FUNC", "]", "(", "\n", "model", ",", "\n", "blob_in", ",", "\n", "dim_in", ",", "\n", "dim_out", ",", "\n", "stride", ",", "\n", "prefix", ",", "\n", "dim_inner", ",", "\n", "group", "=", "cfg", ".", "RESNETS", ".", "NUM_GROUPS", ",", "\n", "dilation", "=", "dilation", "\n", ")", "\n", "\n", "# sum -> ReLU", "\n", "sc", "=", "add_shortcut", "(", "model", ",", "prefix", ",", "blob_in", ",", "dim_in", ",", "dim_out", ",", "stride", ")", "\n", "if", "inplace_sum", ":", "\n", "        ", "s", "=", "model", ".", "net", ".", "Sum", "(", "[", "tr", ",", "sc", "]", ",", "tr", ")", "\n", "", "else", ":", "\n", "        ", "s", "=", "model", ".", "net", ".", "Sum", "(", "[", "tr", ",", "sc", "]", ",", "prefix", "+", "'_sum'", ")", "\n", "\n", "", "return", "model", ".", "Relu", "(", "s", ",", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.ResNet.add_shortcut": [[194, 208], ["model.Conv", "model.AffineChannel"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.detector.DetectionModelHelper.AffineChannel"], ["", "def", "add_shortcut", "(", "model", ",", "prefix", ",", "blob_in", ",", "dim_in", ",", "dim_out", ",", "stride", ")", ":", "\n", "    ", "if", "dim_in", "==", "dim_out", ":", "\n", "        ", "return", "blob_in", "\n", "\n", "", "c", "=", "model", ".", "Conv", "(", "\n", "blob_in", ",", "\n", "prefix", "+", "'_branch1'", ",", "\n", "dim_in", ",", "\n", "dim_out", ",", "\n", "kernel", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "no_bias", "=", "1", "\n", ")", "\n", "return", "model", ".", "AffineChannel", "(", "c", ",", "prefix", "+", "'_branch1_bn'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.ResNet.bottleneck_transformation": [[215, 273], ["model.ConvAffine", "model.Relu", "model.ConvAffine", "model.Relu", "model.ConvAffine"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.detector.DetectionModelHelper.ConvAffine", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.detector.DetectionModelHelper.ConvAffine", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.detector.DetectionModelHelper.ConvAffine"], ["", "def", "bottleneck_transformation", "(", "\n", "model", ",", "\n", "blob_in", ",", "\n", "dim_in", ",", "\n", "dim_out", ",", "\n", "stride", ",", "\n", "prefix", ",", "\n", "dim_inner", ",", "\n", "dilation", "=", "1", ",", "\n", "group", "=", "1", "\n", ")", ":", "\n", "    ", "\"\"\"Add a bottleneck transformation to the model.\"\"\"", "\n", "# In original resnet, stride=2 is on 1x1.", "\n", "# In fb.torch resnet, stride=2 is on 3x3.", "\n", "(", "str1x1", ",", "str3x3", ")", "=", "(", "stride", ",", "1", ")", "if", "cfg", ".", "RESNETS", ".", "STRIDE_1X1", "else", "(", "1", ",", "stride", ")", "\n", "\n", "# conv 1x1 -> BN -> ReLU", "\n", "cur", "=", "model", ".", "ConvAffine", "(", "\n", "blob_in", ",", "\n", "prefix", "+", "'_branch2a'", ",", "\n", "dim_in", ",", "\n", "dim_inner", ",", "\n", "kernel", "=", "1", ",", "\n", "stride", "=", "str1x1", ",", "\n", "pad", "=", "0", ",", "\n", "inplace", "=", "True", "\n", ")", "\n", "cur", "=", "model", ".", "Relu", "(", "cur", ",", "cur", ")", "\n", "\n", "# conv 3x3 -> BN -> ReLU", "\n", "cur", "=", "model", ".", "ConvAffine", "(", "\n", "cur", ",", "\n", "prefix", "+", "'_branch2b'", ",", "\n", "dim_inner", ",", "\n", "dim_inner", ",", "\n", "kernel", "=", "3", ",", "\n", "stride", "=", "str3x3", ",", "\n", "pad", "=", "1", "*", "dilation", ",", "\n", "dilation", "=", "dilation", ",", "\n", "group", "=", "group", ",", "\n", "inplace", "=", "True", "\n", ")", "\n", "cur", "=", "model", ".", "Relu", "(", "cur", ",", "cur", ")", "\n", "\n", "# conv 1x1 -> BN (no ReLU)", "\n", "# NB: for now this AffineChannel op cannot be in-place due to a bug in C2", "\n", "# gradient computation for graphs like this", "\n", "cur", "=", "model", ".", "ConvAffine", "(", "\n", "cur", ",", "\n", "prefix", "+", "'_branch2c'", ",", "\n", "dim_inner", ",", "\n", "dim_out", ",", "\n", "kernel", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "pad", "=", "0", ",", "\n", "inplace", "=", "False", "\n", ")", "\n", "return", "cur", "\n", "", ""]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.name_compat.get_new_name": [[59, 63], ["None"], "function", ["None"], ["def", "get_new_name", "(", "func_name", ")", ":", "\n", "    ", "if", "func_name", "in", "_RENAME", ":", "\n", "        ", "func_name", "=", "_RENAME", "[", "func_name", "]", "\n", "", "return", "func_name", "\n", "", ""]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.retinanet_heads.get_retinanet_bias_init": [[29, 61], ["len", "numpy.zeros", "numpy.log", "numpy.vstack", "np.vstack.astype", "range", "numpy.log"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.blob.zeros"], ["def", "get_retinanet_bias_init", "(", "model", ")", ":", "\n", "    ", "\"\"\"Initialize the biases for the conv ops that predict class probabilities.\n    Initialization is performed such that at the start of training, all\n    locations are predicted to be background with high probability\n    (e.g., ~0.99 = 1 - cfg.RETINANET.PRIOR_PROB). See the Focal Loss paper for\n    details.\n    \"\"\"", "\n", "prior_prob", "=", "cfg", ".", "RETINANET", ".", "PRIOR_PROB", "\n", "scales_per_octave", "=", "cfg", ".", "RETINANET", ".", "SCALES_PER_OCTAVE", "\n", "aspect_ratios", "=", "len", "(", "cfg", ".", "RETINANET", ".", "ASPECT_RATIOS", ")", "\n", "if", "cfg", ".", "RETINANET", ".", "SOFTMAX", ":", "\n", "# Multiclass softmax case", "\n", "        ", "bias", "=", "np", ".", "zeros", "(", "(", "model", ".", "num_classes", ",", "1", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "bias", "[", "0", "]", "=", "np", ".", "log", "(", "\n", "(", "model", ".", "num_classes", "-", "1", ")", "*", "(", "1", "-", "prior_prob", ")", "/", "(", "prior_prob", ")", "\n", ")", "\n", "bias", "=", "np", ".", "vstack", "(", "\n", "[", "bias", "for", "_", "in", "range", "(", "scales_per_octave", "*", "aspect_ratios", ")", "]", "\n", ")", "\n", "bias_init", "=", "(", "\n", "'GivenTensorFill'", ",", "{", "\n", "'values'", ":", "bias", ".", "astype", "(", "dtype", "=", "np", ".", "float32", ")", "\n", "}", "\n", ")", "\n", "", "else", ":", "\n", "# Per-class sigmoid (binary classification) case", "\n", "        ", "bias_init", "=", "(", "\n", "'ConstantFill'", ",", "{", "\n", "'value'", ":", "-", "np", ".", "log", "(", "(", "1", "-", "prior_prob", ")", "/", "prior_prob", ")", "\n", "}", "\n", ")", "\n", "", "return", "bias_init", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.retinanet_heads.add_fpn_retinanet_outputs": [[63, 245], ["retinanet_heads.get_retinanet_bias_init", "range", "enumerate", "len", "len", "range", "range", "range", "model.Relu", "model.Conv", "model.ConvShared", "bbox_feat_list.append", "range", "bbox_feat_list.append", "model.Conv", "model.ConvShared", "model.Conv", "model.ConvShared", "model.net.GroupSpatialSoftmax", "model.net.Sigmoid", "model.Relu", "model.Conv", "model.ConvShared"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.retinanet_heads.get_retinanet_bias_init", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.detector.DetectionModelHelper.ConvShared", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.detector.DetectionModelHelper.ConvShared", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.detector.DetectionModelHelper.ConvShared", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.detector.DetectionModelHelper.ConvShared"], ["", "def", "add_fpn_retinanet_outputs", "(", "model", ",", "blobs_in", ",", "dim_in", ",", "spatial_scales", ")", ":", "\n", "    ", "\"\"\"RetinaNet head. For classification and box regression, we can chose to\n    have the same conv tower or a separate tower. \"bl_feat_list\" stores the list\n    of feature blobs for bbox prediction. These blobs can be shared cls feature\n    blobs if we share the tower or else are independent blobs.\n    \"\"\"", "\n", "dim_out", "=", "dim_in", "\n", "k_max", "=", "cfg", ".", "FPN", ".", "RPN_MAX_LEVEL", "# coarsest level of pyramid", "\n", "k_min", "=", "cfg", ".", "FPN", ".", "RPN_MIN_LEVEL", "# finest level of pyramid", "\n", "A", "=", "len", "(", "cfg", ".", "RETINANET", ".", "ASPECT_RATIOS", ")", "*", "cfg", ".", "RETINANET", ".", "SCALES_PER_OCTAVE", "\n", "\n", "# compute init for bias", "\n", "bias_init", "=", "get_retinanet_bias_init", "(", "model", ")", "\n", "\n", "assert", "len", "(", "blobs_in", ")", "==", "k_max", "-", "k_min", "+", "1", "\n", "bbox_feat_list", "=", "[", "]", "\n", "cls_pred_dim", "=", "(", "\n", "model", ".", "num_classes", "if", "cfg", ".", "RETINANET", ".", "SOFTMAX", "else", "(", "model", ".", "num_classes", "-", "1", ")", "\n", ")", "\n", "# unpacked bbox feature and add prediction layers", "\n", "bbox_regr_dim", "=", "(", "\n", "4", "*", "(", "model", ".", "num_classes", "-", "1", ")", "if", "cfg", ".", "RETINANET", ".", "CLASS_SPECIFIC_BBOX", "else", "4", "\n", ")", "\n", "\n", "# ==========================================================================", "\n", "# classification tower with logits and prob prediction", "\n", "# ==========================================================================", "\n", "for", "lvl", "in", "range", "(", "k_min", ",", "k_max", "+", "1", ")", ":", "\n", "        ", "bl_in", "=", "blobs_in", "[", "k_max", "-", "lvl", "]", "# blobs_in is in reversed order", "\n", "# classification tower stack convolution starts", "\n", "for", "nconv", "in", "range", "(", "cfg", ".", "RETINANET", ".", "NUM_CONVS", ")", ":", "\n", "            ", "suffix", "=", "'n{}_fpn{}'", ".", "format", "(", "nconv", ",", "lvl", ")", "\n", "dim_in", ",", "dim_out", "=", "dim_in", ",", "dim_in", "\n", "if", "lvl", "==", "k_min", ":", "\n", "                ", "bl_out", "=", "model", ".", "Conv", "(", "\n", "bl_in", ",", "\n", "'retnet_cls_conv_'", "+", "suffix", ",", "\n", "dim_in", ",", "\n", "dim_out", ",", "\n", "3", ",", "\n", "stride", "=", "1", ",", "\n", "pad", "=", "1", ",", "\n", "weight_init", "=", "(", "'GaussianFill'", ",", "{", "\n", "'std'", ":", "0.01", "\n", "}", ")", ",", "\n", "bias_init", "=", "(", "'ConstantFill'", ",", "{", "\n", "'value'", ":", "0.", "\n", "}", ")", "\n", ")", "\n", "", "else", ":", "\n", "                ", "bl_out", "=", "model", ".", "ConvShared", "(", "\n", "bl_in", ",", "\n", "'retnet_cls_conv_'", "+", "suffix", ",", "\n", "dim_in", ",", "\n", "dim_out", ",", "\n", "3", ",", "\n", "stride", "=", "1", ",", "\n", "pad", "=", "1", ",", "\n", "weight", "=", "'retnet_cls_conv_n{}_fpn{}_w'", ".", "format", "(", "nconv", ",", "k_min", ")", ",", "\n", "bias", "=", "'retnet_cls_conv_n{}_fpn{}_b'", ".", "format", "(", "nconv", ",", "k_min", ")", "\n", ")", "\n", "", "bl_in", "=", "model", ".", "Relu", "(", "bl_out", ",", "bl_out", ")", "\n", "bl_feat", "=", "bl_in", "\n", "# cls tower stack convolution ends. Add the logits layer now", "\n", "", "if", "lvl", "==", "k_min", ":", "\n", "            ", "retnet_cls_pred", "=", "model", ".", "Conv", "(", "\n", "bl_feat", ",", "\n", "'retnet_cls_pred_fpn{}'", ".", "format", "(", "lvl", ")", ",", "\n", "dim_in", ",", "\n", "cls_pred_dim", "*", "A", ",", "\n", "3", ",", "\n", "pad", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "weight_init", "=", "(", "'GaussianFill'", ",", "{", "\n", "'std'", ":", "0.01", "\n", "}", ")", ",", "\n", "bias_init", "=", "bias_init", "\n", ")", "\n", "", "else", ":", "\n", "            ", "retnet_cls_pred", "=", "model", ".", "ConvShared", "(", "\n", "bl_feat", ",", "\n", "'retnet_cls_pred_fpn{}'", ".", "format", "(", "lvl", ")", ",", "\n", "dim_in", ",", "\n", "cls_pred_dim", "*", "A", ",", "\n", "3", ",", "\n", "pad", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "weight", "=", "'retnet_cls_pred_fpn{}_w'", ".", "format", "(", "k_min", ")", ",", "\n", "bias", "=", "'retnet_cls_pred_fpn{}_b'", ".", "format", "(", "k_min", ")", "\n", ")", "\n", "", "if", "not", "model", ".", "train", ":", "\n", "            ", "if", "cfg", ".", "RETINANET", ".", "SOFTMAX", ":", "\n", "                ", "model", ".", "net", ".", "GroupSpatialSoftmax", "(", "\n", "retnet_cls_pred", ",", "\n", "'retnet_cls_prob_fpn{}'", ".", "format", "(", "lvl", ")", ",", "\n", "num_classes", "=", "cls_pred_dim", "\n", ")", "\n", "", "else", ":", "\n", "                ", "model", ".", "net", ".", "Sigmoid", "(", "\n", "retnet_cls_pred", ",", "'retnet_cls_prob_fpn{}'", ".", "format", "(", "lvl", ")", "\n", ")", "\n", "", "", "if", "cfg", ".", "RETINANET", ".", "SHARE_CLS_BBOX_TOWER", ":", "\n", "            ", "bbox_feat_list", ".", "append", "(", "bl_feat", ")", "\n", "\n", "# ==========================================================================", "\n", "# bbox tower if not sharing features with the classification tower with", "\n", "# logits and prob prediction", "\n", "# ==========================================================================", "\n", "", "", "if", "not", "cfg", ".", "RETINANET", ".", "SHARE_CLS_BBOX_TOWER", ":", "\n", "        ", "for", "lvl", "in", "range", "(", "k_min", ",", "k_max", "+", "1", ")", ":", "\n", "            ", "bl_in", "=", "blobs_in", "[", "k_max", "-", "lvl", "]", "# blobs_in is in reversed order", "\n", "for", "nconv", "in", "range", "(", "cfg", ".", "RETINANET", ".", "NUM_CONVS", ")", ":", "\n", "                ", "suffix", "=", "'n{}_fpn{}'", ".", "format", "(", "nconv", ",", "lvl", ")", "\n", "dim_in", ",", "dim_out", "=", "dim_in", ",", "dim_in", "\n", "if", "lvl", "==", "k_min", ":", "\n", "                    ", "bl_out", "=", "model", ".", "Conv", "(", "\n", "bl_in", ",", "\n", "'retnet_bbox_conv_'", "+", "suffix", ",", "\n", "dim_in", ",", "\n", "dim_out", ",", "\n", "3", ",", "\n", "stride", "=", "1", ",", "\n", "pad", "=", "1", ",", "\n", "weight_init", "=", "(", "'GaussianFill'", ",", "{", "\n", "'std'", ":", "0.01", "\n", "}", ")", ",", "\n", "bias_init", "=", "(", "'ConstantFill'", ",", "{", "\n", "'value'", ":", "0.", "\n", "}", ")", "\n", ")", "\n", "", "else", ":", "\n", "                    ", "bl_out", "=", "model", ".", "ConvShared", "(", "\n", "bl_in", ",", "\n", "'retnet_bbox_conv_'", "+", "suffix", ",", "\n", "dim_in", ",", "\n", "dim_out", ",", "\n", "3", ",", "\n", "stride", "=", "1", ",", "\n", "pad", "=", "1", ",", "\n", "weight", "=", "'retnet_bbox_conv_n{}_fpn{}_w'", ".", "format", "(", "\n", "nconv", ",", "k_min", "\n", ")", ",", "\n", "bias", "=", "'retnet_bbox_conv_n{}_fpn{}_b'", ".", "format", "(", "\n", "nconv", ",", "k_min", "\n", ")", "\n", ")", "\n", "", "bl_in", "=", "model", ".", "Relu", "(", "bl_out", ",", "bl_out", ")", "\n", "# Add octave scales and aspect ratio", "\n", "# At least 1 convolution for dealing different aspect ratios", "\n", "bl_feat", "=", "bl_in", "\n", "", "bbox_feat_list", ".", "append", "(", "bl_feat", ")", "\n", "# Depending on the features [shared/separate] for bbox, add prediction layer", "\n", "", "", "for", "i", ",", "lvl", "in", "enumerate", "(", "range", "(", "k_min", ",", "k_max", "+", "1", ")", ")", ":", "\n", "        ", "bbox_pred", "=", "'retnet_bbox_pred_fpn{}'", ".", "format", "(", "lvl", ")", "\n", "bl_feat", "=", "bbox_feat_list", "[", "i", "]", "\n", "if", "lvl", "==", "k_min", ":", "\n", "            ", "model", ".", "Conv", "(", "\n", "bl_feat", ",", "\n", "bbox_pred", ",", "\n", "dim_in", ",", "\n", "bbox_regr_dim", "*", "A", ",", "\n", "3", ",", "\n", "pad", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "weight_init", "=", "(", "'GaussianFill'", ",", "{", "\n", "'std'", ":", "0.01", "\n", "}", ")", ",", "\n", "bias_init", "=", "(", "'ConstantFill'", ",", "{", "\n", "'value'", ":", "0.", "\n", "}", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "model", ".", "ConvShared", "(", "\n", "bl_feat", ",", "\n", "bbox_pred", ",", "\n", "dim_in", ",", "\n", "bbox_regr_dim", "*", "A", ",", "\n", "3", ",", "\n", "pad", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "weight", "=", "'retnet_bbox_pred_fpn{}_w'", ".", "format", "(", "k_min", ")", ",", "\n", "bias", "=", "'retnet_bbox_pred_fpn{}_b'", ".", "format", "(", "k_min", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.retinanet_heads.add_fpn_retinanet_losses": [[248, 310], ["model.AddMetrics", "range", "range", "loss_gradients.update", "model.AddLosses", "model.net.SelectSmoothL1Loss", "gradients.append", "losses.append", "utils.get_loss_gradients", "model.net.SigmoidFocalLoss", "gradients.append", "losses.append", "model.net.SoftmaxFocalLoss", "gradients.append", "losses.append"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.detector.DetectionModelHelper.AddMetrics", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.detector.DetectionModelHelper.AddLosses", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.blob.get_loss_gradients"], ["", "", "", "def", "add_fpn_retinanet_losses", "(", "model", ")", ":", "\n", "    ", "loss_gradients", "=", "{", "}", "\n", "gradients", ",", "losses", "=", "[", "]", ",", "[", "]", "\n", "\n", "k_max", "=", "cfg", ".", "FPN", ".", "RPN_MAX_LEVEL", "# coarsest level of pyramid", "\n", "k_min", "=", "cfg", ".", "FPN", ".", "RPN_MIN_LEVEL", "# finest level of pyramid", "\n", "\n", "model", ".", "AddMetrics", "(", "[", "'retnet_fg_num'", ",", "'retnet_bg_num'", "]", ")", "\n", "# ==========================================================================", "\n", "# bbox regression loss - SelectSmoothL1Loss for multiple anchors at a location", "\n", "# ==========================================================================", "\n", "for", "lvl", "in", "range", "(", "k_min", ",", "k_max", "+", "1", ")", ":", "\n", "        ", "suffix", "=", "'fpn{}'", ".", "format", "(", "lvl", ")", "\n", "bbox_loss", "=", "model", ".", "net", ".", "SelectSmoothL1Loss", "(", "\n", "[", "\n", "'retnet_bbox_pred_'", "+", "suffix", ",", "\n", "'retnet_roi_bbox_targets_'", "+", "suffix", ",", "\n", "'retnet_roi_fg_bbox_locs_'", "+", "suffix", ",", "'retnet_fg_num'", "\n", "]", ",", "\n", "'retnet_loss_bbox_'", "+", "suffix", ",", "\n", "beta", "=", "cfg", ".", "RETINANET", ".", "BBOX_REG_BETA", ",", "\n", "scale", "=", "1.", "/", "cfg", ".", "NUM_GPUS", "*", "cfg", ".", "RETINANET", ".", "BBOX_REG_WEIGHT", "\n", ")", "\n", "gradients", ".", "append", "(", "bbox_loss", ")", "\n", "losses", ".", "append", "(", "'retnet_loss_bbox_'", "+", "suffix", ")", "\n", "\n", "# ==========================================================================", "\n", "# cls loss - depends on softmax/sigmoid outputs", "\n", "# ==========================================================================", "\n", "", "for", "lvl", "in", "range", "(", "k_min", ",", "k_max", "+", "1", ")", ":", "\n", "        ", "suffix", "=", "'fpn{}'", ".", "format", "(", "lvl", ")", "\n", "cls_lvl_logits", "=", "'retnet_cls_pred_'", "+", "suffix", "\n", "if", "not", "cfg", ".", "RETINANET", ".", "SOFTMAX", ":", "\n", "            ", "cls_focal_loss", "=", "model", ".", "net", ".", "SigmoidFocalLoss", "(", "\n", "[", "\n", "cls_lvl_logits", ",", "'retnet_cls_labels_'", "+", "suffix", ",", "\n", "'retnet_fg_num'", "\n", "]", ",", "\n", "[", "'fl_{}'", ".", "format", "(", "suffix", ")", "]", ",", "\n", "gamma", "=", "cfg", ".", "RETINANET", ".", "LOSS_GAMMA", ",", "\n", "alpha", "=", "cfg", ".", "RETINANET", ".", "LOSS_ALPHA", ",", "\n", "scale", "=", "(", "1.", "/", "cfg", ".", "NUM_GPUS", ")", "\n", ")", "\n", "gradients", ".", "append", "(", "cls_focal_loss", ")", "\n", "losses", ".", "append", "(", "'fl_{}'", ".", "format", "(", "suffix", ")", ")", "\n", "", "else", ":", "\n", "            ", "cls_focal_loss", ",", "gated_prob", "=", "model", ".", "net", ".", "SoftmaxFocalLoss", "(", "\n", "[", "\n", "cls_lvl_logits", ",", "'retnet_cls_labels_'", "+", "suffix", ",", "\n", "'retnet_fg_num'", "\n", "]", ",", "\n", "[", "'fl_{}'", ".", "format", "(", "suffix", ")", ",", "'retnet_prob_{}'", ".", "format", "(", "suffix", ")", "]", ",", "\n", "gamma", "=", "cfg", ".", "RETINANET", ".", "LOSS_GAMMA", ",", "\n", "alpha", "=", "cfg", ".", "RETINANET", ".", "LOSS_ALPHA", ",", "\n", "scale", "=", "(", "1.", "/", "cfg", ".", "NUM_GPUS", ")", ",", "\n", ")", "\n", "gradients", ".", "append", "(", "cls_focal_loss", ")", "\n", "losses", ".", "append", "(", "'fl_{}'", ".", "format", "(", "suffix", ")", ")", "\n", "\n", "", "", "loss_gradients", ".", "update", "(", "blob_utils", ".", "get_loss_gradients", "(", "model", ",", "gradients", ")", ")", "\n", "model", ".", "AddLosses", "(", "losses", ")", "\n", "return", "loss_gradients", "\n", "", ""]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.VGG_CNN_M_1024.add_VGG_CNN_M_1024_conv5_body": [[26, 45], ["model.Conv", "model.Relu", "model.LRN", "model.MaxPool", "model.StopGradient", "model.Conv", "model.Relu", "model.LRN", "model.MaxPool", "model.Conv", "model.Relu", "model.Conv", "model.Relu", "model.Conv", "model.Relu"], "function", ["None"], ["def", "add_VGG_CNN_M_1024_conv5_body", "(", "model", ")", ":", "\n", "    ", "model", ".", "Conv", "(", "'data'", ",", "'conv1'", ",", "3", ",", "96", ",", "7", ",", "pad", "=", "0", ",", "stride", "=", "2", ")", "\n", "model", ".", "Relu", "(", "'conv1'", ",", "'conv1'", ")", "\n", "model", ".", "LRN", "(", "'conv1'", ",", "'norm1'", ",", "size", "=", "5", ",", "alpha", "=", "0.0005", ",", "beta", "=", "0.75", ",", "bias", "=", "2.", ")", "\n", "model", ".", "MaxPool", "(", "'norm1'", ",", "'pool1'", ",", "kernel", "=", "3", ",", "pad", "=", "0", ",", "stride", "=", "2", ")", "\n", "model", ".", "StopGradient", "(", "'pool1'", ",", "'pool1'", ")", "\n", "# No updates at conv1 and below (norm1 and pool1 have no params,", "\n", "# so we can stop gradients before them, too)", "\n", "model", ".", "Conv", "(", "'pool1'", ",", "'conv2'", ",", "96", ",", "256", ",", "5", ",", "pad", "=", "0", ",", "stride", "=", "2", ")", "\n", "model", ".", "Relu", "(", "'conv2'", ",", "'conv2'", ")", "\n", "model", ".", "LRN", "(", "'conv2'", ",", "'norm2'", ",", "size", "=", "5", ",", "alpha", "=", "0.0005", ",", "beta", "=", "0.75", ",", "bias", "=", "2.", ")", "\n", "model", ".", "MaxPool", "(", "'norm2'", ",", "'pool2'", ",", "kernel", "=", "3", ",", "pad", "=", "0", ",", "stride", "=", "2", ")", "\n", "model", ".", "Conv", "(", "'pool2'", ",", "'conv3'", ",", "256", ",", "512", ",", "3", ",", "pad", "=", "1", ",", "stride", "=", "1", ")", "\n", "model", ".", "Relu", "(", "'conv3'", ",", "'conv3'", ")", "\n", "model", ".", "Conv", "(", "'conv3'", ",", "'conv4'", ",", "512", ",", "512", ",", "3", ",", "pad", "=", "1", ",", "stride", "=", "1", ")", "\n", "model", ".", "Relu", "(", "'conv4'", ",", "'conv4'", ")", "\n", "model", ".", "Conv", "(", "'conv4'", ",", "'conv5'", ",", "512", ",", "512", ",", "3", ",", "pad", "=", "1", ",", "stride", "=", "1", ")", "\n", "blob_out", "=", "model", ".", "Relu", "(", "'conv5'", ",", "'conv5'", ")", "\n", "return", "blob_out", ",", "512", ",", "1.", "/", "16.", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.VGG_CNN_M_1024.add_VGG_CNN_M_1024_roi_fc_head": [[47, 62], ["model.RoIFeatureTransform", "model.FC", "model.Relu", "model.FC", "model.Relu"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.detector.DetectionModelHelper.RoIFeatureTransform"], ["", "def", "add_VGG_CNN_M_1024_roi_fc_head", "(", "model", ",", "blob_in", ",", "dim_in", ",", "spatial_scale", ")", ":", "\n", "    ", "model", ".", "RoIFeatureTransform", "(", "\n", "blob_in", ",", "\n", "'pool5'", ",", "\n", "blob_rois", "=", "'rois'", ",", "\n", "method", "=", "cfg", ".", "FAST_RCNN", ".", "ROI_XFORM_METHOD", ",", "\n", "resolution", "=", "6", ",", "\n", "sampling_ratio", "=", "cfg", ".", "FAST_RCNN", ".", "ROI_XFORM_SAMPLING_RATIO", ",", "\n", "spatial_scale", "=", "spatial_scale", "\n", ")", "\n", "model", ".", "FC", "(", "'pool5'", ",", "'fc6'", ",", "dim_in", "*", "6", "*", "6", ",", "4096", ")", "\n", "model", ".", "Relu", "(", "'fc6'", ",", "'fc6'", ")", "\n", "model", ".", "FC", "(", "'fc6'", ",", "'fc7'", ",", "4096", ",", "1024", ")", "\n", "blob_out", "=", "model", ".", "Relu", "(", "'fc7'", ",", "'fc7'", ")", "\n", "return", "blob_out", ",", "1024", "\n", "", ""]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.rfcn_heads.add_rfcn_outputs": [[30, 99], ["model.Conv", "model.Conv", "model.net.PSRoIPool", "model.AveragePool", "model.net.Reshape", "model.net.PSRoIPool", "model.AveragePool", "model.Conv", "model.Relu", "model.Softmax", "utils.c2.gauss_fill", "utils.c2.const_fill", "utils.c2.gauss_fill", "utils.c2.const_fill", "utils.c2.gauss_fill", "utils.c2.const_fill"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.c2.gauss_fill", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.c2.const_fill", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.c2.gauss_fill", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.c2.const_fill", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.c2.gauss_fill", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.c2.const_fill"], ["def", "add_rfcn_outputs", "(", "model", ",", "blob_in", ",", "dim_in", ",", "dim_reduce", ",", "spatial_scale", ")", ":", "\n", "    ", "if", "dim_reduce", "is", "not", "None", ":", "\n", "# Optional dim reduction", "\n", "        ", "blob_in", "=", "model", ".", "Conv", "(", "\n", "blob_in", ",", "\n", "'conv_dim_reduce'", ",", "\n", "dim_in", ",", "\n", "dim_reduce", ",", "\n", "kernel", "=", "1", ",", "\n", "pad", "=", "0", ",", "\n", "stride", "=", "1", ",", "\n", "weight_init", "=", "gauss_fill", "(", "0.01", ")", ",", "\n", "bias_init", "=", "const_fill", "(", "0.0", ")", "\n", ")", "\n", "blob_in", "=", "model", ".", "Relu", "(", "blob_in", ",", "blob_in", ")", "\n", "dim_in", "=", "dim_reduce", "\n", "# Classification conv", "\n", "", "model", ".", "Conv", "(", "\n", "blob_in", ",", "\n", "'conv_cls'", ",", "\n", "dim_in", ",", "\n", "model", ".", "num_classes", "*", "cfg", ".", "RFCN", ".", "PS_GRID_SIZE", "**", "2", ",", "\n", "kernel", "=", "1", ",", "\n", "pad", "=", "0", ",", "\n", "stride", "=", "1", ",", "\n", "weight_init", "=", "gauss_fill", "(", "0.01", ")", ",", "\n", "bias_init", "=", "const_fill", "(", "0.0", ")", "\n", ")", "\n", "# # Bounding-box regression conv", "\n", "num_bbox_reg_classes", "=", "(", "\n", "2", "if", "cfg", ".", "MODEL", ".", "CLS_AGNOSTIC_BBOX_REG", "else", "model", ".", "num_classes", "\n", ")", "\n", "model", ".", "Conv", "(", "\n", "blob_in", ",", "\n", "'conv_bbox_pred'", ",", "\n", "dim_in", ",", "\n", "4", "*", "num_bbox_reg_classes", "*", "cfg", ".", "RFCN", ".", "PS_GRID_SIZE", "**", "2", ",", "\n", "kernel", "=", "1", ",", "\n", "pad", "=", "0", ",", "\n", "stride", "=", "1", ",", "\n", "weight_init", "=", "gauss_fill", "(", "0.01", ")", ",", "\n", "bias_init", "=", "const_fill", "(", "0.0", ")", "\n", ")", "\n", "# Classification PS RoI pooling", "\n", "model", ".", "net", ".", "PSRoIPool", "(", "\n", "[", "'conv_cls'", ",", "'rois'", "]", ",", "[", "'psroipooled_cls'", ",", "'_mapping_channel_cls'", "]", ",", "\n", "group_size", "=", "cfg", ".", "RFCN", ".", "PS_GRID_SIZE", ",", "\n", "output_dim", "=", "model", ".", "num_classes", ",", "\n", "spatial_scale", "=", "spatial_scale", "\n", ")", "\n", "model", ".", "AveragePool", "(", "\n", "'psroipooled_cls'", ",", "'cls_score_4d'", ",", "kernel", "=", "cfg", ".", "RFCN", ".", "PS_GRID_SIZE", "\n", ")", "\n", "model", ".", "net", ".", "Reshape", "(", "\n", "'cls_score_4d'", ",", "[", "'cls_score'", ",", "'_cls_scores_shape'", "]", ",", "\n", "shape", "=", "(", "-", "1", ",", "cfg", ".", "MODEL", ".", "NUM_CLASSES", ")", "\n", ")", "\n", "if", "not", "model", ".", "train", ":", "\n", "        ", "model", ".", "Softmax", "(", "'cls_score'", ",", "'cls_prob'", ",", "engine", "=", "'CUDNN'", ")", "\n", "# Bbox regression PS RoI pooling", "\n", "", "model", ".", "net", ".", "PSRoIPool", "(", "\n", "[", "'conv_bbox_pred'", ",", "'rois'", "]", ",", "\n", "[", "'psroipooled_bbox'", ",", "'_mapping_channel_bbox'", "]", ",", "\n", "group_size", "=", "cfg", ".", "RFCN", ".", "PS_GRID_SIZE", ",", "\n", "output_dim", "=", "4", "*", "num_bbox_reg_classes", ",", "\n", "spatial_scale", "=", "spatial_scale", "\n", ")", "\n", "model", ".", "AveragePool", "(", "\n", "'psroipooled_bbox'", ",", "'bbox_pred'", ",", "kernel", "=", "cfg", ".", "RFCN", ".", "PS_GRID_SIZE", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.FPN.add_fpn_ResNet50_conv5_body": [[45, 48], ["FPN.add_fpn_onto_conv_body"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.FPN.add_fpn_onto_conv_body"], ["def", "add_fpn_ResNet50_conv5_body", "(", "model", ")", ":", "\n", "    ", "return", "add_fpn_onto_conv_body", "(", "\n", "model", ",", "ResNet", ".", "add_ResNet50_conv5_body", ",", "fpn_level_info_ResNet50_conv5", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.FPN.add_fpn_ResNet50_conv5_P2only_body": [[51, 57], ["FPN.add_fpn_onto_conv_body"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.FPN.add_fpn_onto_conv_body"], ["", "def", "add_fpn_ResNet50_conv5_P2only_body", "(", "model", ")", ":", "\n", "    ", "return", "add_fpn_onto_conv_body", "(", "\n", "model", ",", "\n", "ResNet", ".", "add_ResNet50_conv5_body", ",", "\n", "fpn_level_info_ResNet50_conv5", ",", "\n", "P2only", "=", "True", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.FPN.add_fpn_ResNet101_conv5_body": [[60, 63], ["FPN.add_fpn_onto_conv_body"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.FPN.add_fpn_onto_conv_body"], ["", "def", "add_fpn_ResNet101_conv5_body", "(", "model", ")", ":", "\n", "    ", "return", "add_fpn_onto_conv_body", "(", "\n", "model", ",", "ResNet", ".", "add_ResNet101_conv5_body", ",", "fpn_level_info_ResNet101_conv5", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.FPN.add_fpn_ResNet101_conv5_P2only_body": [[66, 72], ["FPN.add_fpn_onto_conv_body"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.FPN.add_fpn_onto_conv_body"], ["", "def", "add_fpn_ResNet101_conv5_P2only_body", "(", "model", ")", ":", "\n", "    ", "return", "add_fpn_onto_conv_body", "(", "\n", "model", ",", "\n", "ResNet", ".", "add_ResNet101_conv5_body", ",", "\n", "fpn_level_info_ResNet101_conv5", ",", "\n", "P2only", "=", "True", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.FPN.add_fpn_ResNet152_conv5_body": [[75, 78], ["FPN.add_fpn_onto_conv_body"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.FPN.add_fpn_onto_conv_body"], ["", "def", "add_fpn_ResNet152_conv5_body", "(", "model", ")", ":", "\n", "    ", "return", "add_fpn_onto_conv_body", "(", "\n", "model", ",", "ResNet", ".", "add_ResNet152_conv5_body", ",", "fpn_level_info_ResNet152_conv5", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.FPN.add_fpn_ResNet152_conv5_P2only_body": [[81, 87], ["FPN.add_fpn_onto_conv_body"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.FPN.add_fpn_onto_conv_body"], ["", "def", "add_fpn_ResNet152_conv5_P2only_body", "(", "model", ")", ":", "\n", "    ", "return", "add_fpn_onto_conv_body", "(", "\n", "model", ",", "\n", "ResNet", ".", "add_ResNet152_conv5_body", ",", "\n", "fpn_level_info_ResNet152_conv5", ",", "\n", "P2only", "=", "True", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.FPN.add_fpn_onto_conv_body": [[94, 114], ["FPN.add_fpn", "modeling.ResNet.add_ResNet50_conv5_body", "FPN.fpn_level_info_ResNet50_conv5", "modeling.ResNet.add_ResNet50_conv5_body", "FPN.fpn_level_info_ResNet50_conv5", "modeling.ResNet.add_ResNet101_conv5_body", "FPN.fpn_level_info_ResNet101_conv5", "modeling.ResNet.add_ResNet101_conv5_body", "FPN.fpn_level_info_ResNet101_conv5", "modeling.ResNet.add_ResNet152_conv5_body", "FPN.fpn_level_info_ResNet152_conv5", "modeling.ResNet.add_ResNet152_conv5_body", "FPN.fpn_level_info_ResNet152_conv5"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.FPN.add_fpn", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.ResNet.add_ResNet50_conv5_body", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.FPN.fpn_level_info_ResNet50_conv5", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.ResNet.add_ResNet50_conv5_body", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.FPN.fpn_level_info_ResNet50_conv5", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.ResNet.add_ResNet101_conv5_body", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.FPN.fpn_level_info_ResNet101_conv5", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.ResNet.add_ResNet101_conv5_body", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.FPN.fpn_level_info_ResNet101_conv5", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.ResNet.add_ResNet152_conv5_body", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.FPN.fpn_level_info_ResNet152_conv5", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.ResNet.add_ResNet152_conv5_body", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.FPN.fpn_level_info_ResNet152_conv5"], ["", "def", "add_fpn_onto_conv_body", "(", "\n", "model", ",", "conv_body_func", ",", "fpn_level_info_func", ",", "P2only", "=", "False", "\n", ")", ":", "\n", "    ", "\"\"\"Add the specified conv body to the model and then add FPN levels to it.\n    \"\"\"", "\n", "# Note: blobs_conv is in revsersed order: [fpn5, fpn4, fpn3, fpn2]", "\n", "# similarly for dims_conv: [2048, 1024, 512, 256]", "\n", "# similarly for spatial_scales_fpn: [1/32, 1/16, 1/8, 1/4]", "\n", "\n", "conv_body_func", "(", "model", ")", "\n", "blobs_fpn", ",", "dim_fpn", ",", "spatial_scales_fpn", "=", "add_fpn", "(", "\n", "model", ",", "fpn_level_info_func", "(", ")", "\n", ")", "\n", "\n", "if", "P2only", ":", "\n", "# use only the finest level", "\n", "        ", "return", "blobs_fpn", "[", "-", "1", "]", ",", "dim_fpn", ",", "spatial_scales_fpn", "[", "-", "1", "]", "\n", "", "else", ":", "\n", "# use all levels", "\n", "        ", "return", "blobs_fpn", ",", "dim_fpn", ",", "spatial_scales_fpn", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.FPN.add_fpn": [[116, 225], ["FPN.get_min_max_levels", "model.Conv", "range", "range", "len", "FPN.add_topdown_lateral_module", "model.Conv", "model.MaxPool", "blobs_fpn.insert", "spatial_scales.insert", "range", "utils.c2.const_fill", "model.Conv", "blobs_fpn.insert", "spatial_scales.insert", "utils.c2.const_fill", "model.Relu", "str", "utils.c2.const_fill"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.FPN.get_min_max_levels", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.FPN.add_topdown_lateral_module", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.c2.const_fill", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.c2.const_fill", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.c2.const_fill"], ["", "", "def", "add_fpn", "(", "model", ",", "fpn_level_info", ")", ":", "\n", "    ", "\"\"\"Add FPN connections based on the model described in the FPN paper.\"\"\"", "\n", "# FPN levels are built starting from the highest/coarest level of the", "\n", "# backbone (usually \"conv5\"). First we build down, recursively constructing", "\n", "# lower/finer resolution FPN levels. Then we build up, constructing levels", "\n", "# that are even higher/coarser than the starting level.", "\n", "fpn_dim", "=", "cfg", ".", "FPN", ".", "DIM", "\n", "min_level", ",", "max_level", "=", "get_min_max_levels", "(", ")", "\n", "# Count the number of backbone stages that we will generate FPN levels for", "\n", "# starting from the coarest backbone stage (usually the \"conv5\"-like level)", "\n", "# E.g., if the backbone level info defines stages 4 stages: \"conv5\",", "\n", "# \"conv4\", ... \"conv2\" and min_level=2, then we end up with 4 - (2 - 2) = 4", "\n", "# backbone stages to add FPN to.", "\n", "num_backbone_stages", "=", "(", "\n", "len", "(", "fpn_level_info", ".", "blobs", ")", "-", "(", "min_level", "-", "LOWEST_BACKBONE_LVL", ")", "\n", ")", "\n", "\n", "lateral_input_blobs", "=", "fpn_level_info", ".", "blobs", "[", ":", "num_backbone_stages", "]", "\n", "output_blobs", "=", "[", "\n", "'fpn_inner_{}'", ".", "format", "(", "s", ")", "\n", "for", "s", "in", "fpn_level_info", ".", "blobs", "[", ":", "num_backbone_stages", "]", "\n", "]", "\n", "fpn_dim_lateral", "=", "fpn_level_info", ".", "dims", "\n", "xavier_fill", "=", "(", "'XavierFill'", ",", "{", "}", ")", "\n", "\n", "# For the coarest backbone level: 1x1 conv only seeds recursion", "\n", "model", ".", "Conv", "(", "\n", "lateral_input_blobs", "[", "0", "]", ",", "\n", "output_blobs", "[", "0", "]", ",", "\n", "dim_in", "=", "fpn_dim_lateral", "[", "0", "]", ",", "\n", "dim_out", "=", "fpn_dim", ",", "\n", "kernel", "=", "1", ",", "\n", "pad", "=", "0", ",", "\n", "stride", "=", "1", ",", "\n", "weight_init", "=", "xavier_fill", ",", "\n", "bias_init", "=", "const_fill", "(", "0.0", ")", "\n", ")", "\n", "\n", "#", "\n", "# Step 1: recursively build down starting from the coarsest backbone level", "\n", "#", "\n", "\n", "# For other levels add top-down and lateral connections", "\n", "for", "i", "in", "range", "(", "num_backbone_stages", "-", "1", ")", ":", "\n", "        ", "add_topdown_lateral_module", "(", "\n", "model", ",", "\n", "output_blobs", "[", "i", "]", ",", "# top-down blob", "\n", "lateral_input_blobs", "[", "i", "+", "1", "]", ",", "# lateral blob", "\n", "output_blobs", "[", "i", "+", "1", "]", ",", "# next output blob", "\n", "fpn_dim", ",", "# output dimension", "\n", "fpn_dim_lateral", "[", "i", "+", "1", "]", "# lateral input dimension", "\n", ")", "\n", "\n", "# Post-hoc scale-specific 3x3 convs", "\n", "", "blobs_fpn", "=", "[", "]", "\n", "spatial_scales", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_backbone_stages", ")", ":", "\n", "        ", "fpn_blob", "=", "model", ".", "Conv", "(", "\n", "output_blobs", "[", "i", "]", ",", "\n", "'fpn_{}'", ".", "format", "(", "fpn_level_info", ".", "blobs", "[", "i", "]", ")", ",", "\n", "dim_in", "=", "fpn_dim", ",", "\n", "dim_out", "=", "fpn_dim", ",", "\n", "kernel", "=", "3", ",", "\n", "pad", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "weight_init", "=", "xavier_fill", ",", "\n", "bias_init", "=", "const_fill", "(", "0.0", ")", "\n", ")", "\n", "blobs_fpn", "+=", "[", "fpn_blob", "]", "\n", "spatial_scales", "+=", "[", "fpn_level_info", ".", "spatial_scales", "[", "i", "]", "]", "\n", "\n", "#", "\n", "# Step 2: build up starting from the coarsest backbone level", "\n", "#", "\n", "\n", "# Check if we need the P6 feature map", "\n", "", "if", "not", "cfg", ".", "FPN", ".", "EXTRA_CONV_LEVELS", "and", "max_level", "==", "HIGHEST_BACKBONE_LVL", "+", "1", ":", "\n", "# Original FPN P6 level implementation from our CVPR'17 FPN paper", "\n", "        ", "P6_blob_in", "=", "blobs_fpn", "[", "0", "]", "\n", "P6_name", "=", "P6_blob_in", "+", "'_subsampled_2x'", "\n", "# Use max pooling to simulate stride 2 subsampling", "\n", "P6_blob", "=", "model", ".", "MaxPool", "(", "P6_blob_in", ",", "P6_name", ",", "kernel", "=", "1", ",", "pad", "=", "0", ",", "stride", "=", "2", ")", "\n", "blobs_fpn", ".", "insert", "(", "0", ",", "P6_blob", ")", "\n", "spatial_scales", ".", "insert", "(", "0", ",", "spatial_scales", "[", "0", "]", "*", "0.5", ")", "\n", "\n", "# Coarser FPN levels introduced for RetinaNet", "\n", "", "if", "cfg", ".", "FPN", ".", "EXTRA_CONV_LEVELS", "and", "max_level", ">", "HIGHEST_BACKBONE_LVL", ":", "\n", "        ", "fpn_blob", "=", "fpn_level_info", ".", "blobs", "[", "0", "]", "\n", "dim_in", "=", "fpn_level_info", ".", "dims", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "HIGHEST_BACKBONE_LVL", "+", "1", ",", "max_level", "+", "1", ")", ":", "\n", "            ", "fpn_blob_in", "=", "fpn_blob", "\n", "if", "i", ">", "HIGHEST_BACKBONE_LVL", "+", "1", ":", "\n", "                ", "fpn_blob_in", "=", "model", ".", "Relu", "(", "fpn_blob", ",", "fpn_blob", "+", "'_relu'", ")", "\n", "", "fpn_blob", "=", "model", ".", "Conv", "(", "\n", "fpn_blob_in", ",", "\n", "'fpn_'", "+", "str", "(", "i", ")", ",", "\n", "dim_in", "=", "dim_in", ",", "\n", "dim_out", "=", "fpn_dim", ",", "\n", "kernel", "=", "3", ",", "\n", "pad", "=", "1", ",", "\n", "stride", "=", "2", ",", "\n", "weight_init", "=", "xavier_fill", ",", "\n", "bias_init", "=", "const_fill", "(", "0.0", ")", "\n", ")", "\n", "dim_in", "=", "fpn_dim", "\n", "blobs_fpn", ".", "insert", "(", "0", ",", "fpn_blob", ")", "\n", "spatial_scales", ".", "insert", "(", "0", ",", "spatial_scales", "[", "0", "]", "*", "0.5", ")", "\n", "\n", "", "", "return", "blobs_fpn", ",", "fpn_dim", ",", "spatial_scales", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.FPN.add_topdown_lateral_module": [[227, 250], ["model.Conv", "model.net.UpsampleNearest", "model.net.Sum", "utils.c2.const_fill", "utils.c2.const_fill"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.c2.const_fill", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.c2.const_fill"], ["", "def", "add_topdown_lateral_module", "(", "\n", "model", ",", "fpn_top", ",", "fpn_lateral", ",", "fpn_bottom", ",", "dim_top", ",", "dim_lateral", "\n", ")", ":", "\n", "    ", "\"\"\"Add a top-down lateral module.\"\"\"", "\n", "# Lateral 1x1 conv", "\n", "lat", "=", "model", ".", "Conv", "(", "\n", "fpn_lateral", ",", "\n", "fpn_bottom", "+", "'_lateral'", ",", "\n", "dim_in", "=", "dim_lateral", ",", "\n", "dim_out", "=", "dim_top", ",", "\n", "kernel", "=", "1", ",", "\n", "pad", "=", "0", ",", "\n", "stride", "=", "1", ",", "\n", "weight_init", "=", "(", "\n", "const_fill", "(", "0.0", ")", "if", "cfg", ".", "FPN", ".", "ZERO_INIT_LATERAL", "\n", "else", "(", "'XavierFill'", ",", "{", "}", ")", "\n", ")", ",", "\n", "bias_init", "=", "const_fill", "(", "0.0", ")", "\n", ")", "\n", "# Top-down 2x upsampling", "\n", "td", "=", "model", ".", "net", ".", "UpsampleNearest", "(", "fpn_top", ",", "fpn_bottom", "+", "'_topdown'", ",", "scale", "=", "2", ")", "\n", "# Sum lateral and top-down", "\n", "model", ".", "net", ".", "Sum", "(", "[", "lat", ",", "td", "]", ",", "fpn_bottom", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.FPN.get_min_max_levels": [[252, 268], ["max", "min"], "function", ["None"], ["", "def", "get_min_max_levels", "(", ")", ":", "\n", "    ", "\"\"\"The min and max FPN levels required for supporting RPN and/or RoI\n    transform operations on multiple FPN levels.\n    \"\"\"", "\n", "min_level", "=", "LOWEST_BACKBONE_LVL", "\n", "max_level", "=", "HIGHEST_BACKBONE_LVL", "\n", "if", "cfg", ".", "FPN", ".", "MULTILEVEL_RPN", "and", "not", "cfg", ".", "FPN", ".", "MULTILEVEL_ROIS", ":", "\n", "        ", "max_level", "=", "cfg", ".", "FPN", ".", "RPN_MAX_LEVEL", "\n", "min_level", "=", "cfg", ".", "FPN", ".", "RPN_MIN_LEVEL", "\n", "", "if", "not", "cfg", ".", "FPN", ".", "MULTILEVEL_RPN", "and", "cfg", ".", "FPN", ".", "MULTILEVEL_ROIS", ":", "\n", "        ", "max_level", "=", "cfg", ".", "FPN", ".", "ROI_MAX_LEVEL", "\n", "min_level", "=", "cfg", ".", "FPN", ".", "ROI_MIN_LEVEL", "\n", "", "if", "cfg", ".", "FPN", ".", "MULTILEVEL_RPN", "and", "cfg", ".", "FPN", ".", "MULTILEVEL_ROIS", ":", "\n", "        ", "max_level", "=", "max", "(", "cfg", ".", "FPN", ".", "RPN_MAX_LEVEL", ",", "cfg", ".", "FPN", ".", "ROI_MAX_LEVEL", ")", "\n", "min_level", "=", "min", "(", "cfg", ".", "FPN", ".", "RPN_MIN_LEVEL", ",", "cfg", ".", "FPN", ".", "ROI_MIN_LEVEL", ")", "\n", "", "return", "min_level", ",", "max_level", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.FPN.add_fpn_rpn_outputs": [[274, 388], ["len", "range", "len", "str", "model.Conv", "model.Relu", "model.Conv", "model.Conv", "str", "model.ConvShared", "model.Relu", "model.ConvShared", "model.ConvShared", "modeling.generate_anchors.generate_anchors", "model.net.Sigmoid", "model.GenerateProposals", "utils.c2.gauss_fill", "utils.c2.const_fill", "utils.c2.gauss_fill", "utils.c2.const_fill", "utils.c2.gauss_fill", "utils.c2.const_fill"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.detector.DetectionModelHelper.ConvShared", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.detector.DetectionModelHelper.ConvShared", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.detector.DetectionModelHelper.ConvShared", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.generate_anchors.generate_anchors", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.detector.DetectionModelHelper.GenerateProposals", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.c2.gauss_fill", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.c2.const_fill", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.c2.gauss_fill", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.c2.const_fill", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.c2.gauss_fill", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.c2.const_fill"], ["", "def", "add_fpn_rpn_outputs", "(", "model", ",", "blobs_in", ",", "dim_in", ",", "spatial_scales", ")", ":", "\n", "    ", "\"\"\"Add RPN on FPN specific outputs.\"\"\"", "\n", "num_anchors", "=", "len", "(", "cfg", ".", "FPN", ".", "RPN_ASPECT_RATIOS", ")", "\n", "dim_out", "=", "dim_in", "\n", "\n", "k_max", "=", "cfg", ".", "FPN", ".", "RPN_MAX_LEVEL", "# coarsest level of pyramid", "\n", "k_min", "=", "cfg", ".", "FPN", ".", "RPN_MIN_LEVEL", "# finest level of pyramid", "\n", "assert", "len", "(", "blobs_in", ")", "==", "k_max", "-", "k_min", "+", "1", "\n", "for", "lvl", "in", "range", "(", "k_min", ",", "k_max", "+", "1", ")", ":", "\n", "        ", "bl_in", "=", "blobs_in", "[", "k_max", "-", "lvl", "]", "# blobs_in is in reversed order", "\n", "sc", "=", "spatial_scales", "[", "k_max", "-", "lvl", "]", "# in reversed order", "\n", "slvl", "=", "str", "(", "lvl", ")", "\n", "\n", "if", "lvl", "==", "k_min", ":", "\n", "# Create conv ops with randomly initialized weights and", "\n", "# zeroed biases for the first FPN level; these will be shared by", "\n", "# all other FPN levels", "\n", "# RPN hidden representation", "\n", "            ", "conv_rpn_fpn", "=", "model", ".", "Conv", "(", "\n", "bl_in", ",", "\n", "'conv_rpn_fpn'", "+", "slvl", ",", "\n", "dim_in", ",", "\n", "dim_out", ",", "\n", "kernel", "=", "3", ",", "\n", "pad", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "weight_init", "=", "gauss_fill", "(", "0.01", ")", ",", "\n", "bias_init", "=", "const_fill", "(", "0.0", ")", "\n", ")", "\n", "model", ".", "Relu", "(", "conv_rpn_fpn", ",", "conv_rpn_fpn", ")", "\n", "# Proposal classification scores", "\n", "rpn_cls_logits_fpn", "=", "model", ".", "Conv", "(", "\n", "conv_rpn_fpn", ",", "\n", "'rpn_cls_logits_fpn'", "+", "slvl", ",", "\n", "dim_in", ",", "\n", "num_anchors", ",", "\n", "kernel", "=", "1", ",", "\n", "pad", "=", "0", ",", "\n", "stride", "=", "1", ",", "\n", "weight_init", "=", "gauss_fill", "(", "0.01", ")", ",", "\n", "bias_init", "=", "const_fill", "(", "0.0", ")", "\n", ")", "\n", "# Proposal bbox regression deltas", "\n", "rpn_bbox_pred_fpn", "=", "model", ".", "Conv", "(", "\n", "conv_rpn_fpn", ",", "\n", "'rpn_bbox_pred_fpn'", "+", "slvl", ",", "\n", "dim_in", ",", "\n", "4", "*", "num_anchors", ",", "\n", "kernel", "=", "1", ",", "\n", "pad", "=", "0", ",", "\n", "stride", "=", "1", ",", "\n", "weight_init", "=", "gauss_fill", "(", "0.01", ")", ",", "\n", "bias_init", "=", "const_fill", "(", "0.0", ")", "\n", ")", "\n", "", "else", ":", "\n", "# Share weights and biases", "\n", "            ", "sk_min", "=", "str", "(", "k_min", ")", "\n", "# RPN hidden representation", "\n", "conv_rpn_fpn", "=", "model", ".", "ConvShared", "(", "\n", "bl_in", ",", "\n", "'conv_rpn_fpn'", "+", "slvl", ",", "\n", "dim_in", ",", "\n", "dim_out", ",", "\n", "kernel", "=", "3", ",", "\n", "pad", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "weight", "=", "'conv_rpn_fpn'", "+", "sk_min", "+", "'_w'", ",", "\n", "bias", "=", "'conv_rpn_fpn'", "+", "sk_min", "+", "'_b'", "\n", ")", "\n", "model", ".", "Relu", "(", "conv_rpn_fpn", ",", "conv_rpn_fpn", ")", "\n", "# Proposal classification scores", "\n", "rpn_cls_logits_fpn", "=", "model", ".", "ConvShared", "(", "\n", "conv_rpn_fpn", ",", "\n", "'rpn_cls_logits_fpn'", "+", "slvl", ",", "\n", "dim_in", ",", "\n", "num_anchors", ",", "\n", "kernel", "=", "1", ",", "\n", "pad", "=", "0", ",", "\n", "stride", "=", "1", ",", "\n", "weight", "=", "'rpn_cls_logits_fpn'", "+", "sk_min", "+", "'_w'", ",", "\n", "bias", "=", "'rpn_cls_logits_fpn'", "+", "sk_min", "+", "'_b'", "\n", ")", "\n", "# Proposal bbox regression deltas", "\n", "rpn_bbox_pred_fpn", "=", "model", ".", "ConvShared", "(", "\n", "conv_rpn_fpn", ",", "\n", "'rpn_bbox_pred_fpn'", "+", "slvl", ",", "\n", "dim_in", ",", "\n", "4", "*", "num_anchors", ",", "\n", "kernel", "=", "1", ",", "\n", "pad", "=", "0", ",", "\n", "stride", "=", "1", ",", "\n", "weight", "=", "'rpn_bbox_pred_fpn'", "+", "sk_min", "+", "'_w'", ",", "\n", "bias", "=", "'rpn_bbox_pred_fpn'", "+", "sk_min", "+", "'_b'", "\n", ")", "\n", "\n", "", "if", "not", "model", ".", "train", "or", "cfg", ".", "MODEL", ".", "FASTER_RCNN", ":", "\n", "# Proposals are needed during:", "\n", "#  1) inference (== not model.train) for RPN only and Faster R-CNN", "\n", "#  OR", "\n", "#  2) training for Faster R-CNN", "\n", "# Otherwise (== training for RPN only), proposals are not needed", "\n", "            ", "lvl_anchors", "=", "generate_anchors", "(", "\n", "stride", "=", "2.", "**", "lvl", ",", "\n", "sizes", "=", "(", "cfg", ".", "FPN", ".", "RPN_ANCHOR_START_SIZE", "*", "2.", "**", "(", "lvl", "-", "k_min", ")", ",", ")", ",", "\n", "aspect_ratios", "=", "cfg", ".", "FPN", ".", "RPN_ASPECT_RATIOS", "\n", ")", "\n", "rpn_cls_probs_fpn", "=", "model", ".", "net", ".", "Sigmoid", "(", "\n", "rpn_cls_logits_fpn", ",", "'rpn_cls_probs_fpn'", "+", "slvl", "\n", ")", "\n", "model", ".", "GenerateProposals", "(", "\n", "[", "rpn_cls_probs_fpn", ",", "rpn_bbox_pred_fpn", ",", "'im_info'", "]", ",", "\n", "[", "'rpn_rois_fpn'", "+", "slvl", ",", "'rpn_roi_probs_fpn'", "+", "slvl", "]", ",", "\n", "anchors", "=", "lvl_anchors", ",", "\n", "spatial_scale", "=", "sc", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.FPN.add_fpn_rpn_losses": [[391, 455], ["range", "str", "model.net.SpatialNarrowAs", "model.net.SmoothL1Loss", "loss_gradients.update", "model.AddLosses", "model.net.SpatialNarrowAs", "model.net.SpatialNarrowAs", "model.net.WeightedSigmoidCrossEntropyLoss", "model.net.SigmoidCrossEntropyLoss", "utils.get_loss_gradients"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.detector.DetectionModelHelper.AddLosses", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.blob.get_loss_gradients"], ["", "", "", "def", "add_fpn_rpn_losses", "(", "model", ")", ":", "\n", "    ", "\"\"\"Add RPN on FPN specific losses.\"\"\"", "\n", "loss_gradients", "=", "{", "}", "\n", "for", "lvl", "in", "range", "(", "cfg", ".", "FPN", ".", "RPN_MIN_LEVEL", ",", "cfg", ".", "FPN", ".", "RPN_MAX_LEVEL", "+", "1", ")", ":", "\n", "        ", "slvl", "=", "str", "(", "lvl", ")", "\n", "# Spatially narrow the full-sized RPN label arrays to match the feature map", "\n", "# shape", "\n", "model", ".", "net", ".", "SpatialNarrowAs", "(", "\n", "[", "'rpn_labels_int32_wide_fpn'", "+", "slvl", ",", "'rpn_cls_logits_fpn'", "+", "slvl", "]", ",", "\n", "'rpn_labels_int32_fpn'", "+", "slvl", "\n", ")", "\n", "if", "cfg", ".", "TRAIN", ".", "RPN_SIZE_WEIGHTED_LOSS", ":", "\n", "            ", "model", ".", "net", ".", "SpatialNarrowAs", "(", "\n", "[", "'rpn_label_loss_weights_wide_fpn'", "+", "slvl", ",", "'rpn_cls_logits_fpn'", "+", "slvl", "]", ",", "\n", "'rpn_label_loss_weights_fpn'", "+", "slvl", "\n", ")", "\n", "\n", "", "for", "key", "in", "(", "'targets'", ",", "'inside_weights'", ",", "'outside_weights'", ")", ":", "\n", "            ", "model", ".", "net", ".", "SpatialNarrowAs", "(", "\n", "[", "\n", "'rpn_bbox_'", "+", "key", "+", "'_wide_fpn'", "+", "slvl", ",", "\n", "'rpn_bbox_pred_fpn'", "+", "slvl", "\n", "]", ",", "\n", "'rpn_bbox_'", "+", "key", "+", "'_fpn'", "+", "slvl", "\n", ")", "\n", "", "if", "cfg", ".", "TRAIN", ".", "RPN_SIZE_WEIGHTED_LOSS", ":", "\n", "            ", "loss_rpn_cls_fpn", "=", "model", ".", "net", ".", "WeightedSigmoidCrossEntropyLoss", "(", "\n", "[", "'rpn_cls_logits_fpn'", "+", "slvl", ",", "'rpn_labels_int32_fpn'", "+", "slvl", ",", "'rpn_label_loss_weights_fpn'", "+", "slvl", "]", ",", "\n", "'loss_rpn_cls_fpn'", "+", "slvl", ",", "\n", "normalize", "=", "0", ",", "\n", "scale", "=", "(", "\n", "1.", "/", "cfg", ".", "NUM_GPUS", "/", "cfg", ".", "TRAIN", ".", "RPN_BATCH_SIZE_PER_IM", "/", "\n", "cfg", ".", "TRAIN", ".", "IMS_PER_BATCH", "\n", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "loss_rpn_cls_fpn", "=", "model", ".", "net", ".", "SigmoidCrossEntropyLoss", "(", "\n", "[", "'rpn_cls_logits_fpn'", "+", "slvl", ",", "'rpn_labels_int32_fpn'", "+", "slvl", "]", ",", "\n", "'loss_rpn_cls_fpn'", "+", "slvl", ",", "\n", "normalize", "=", "0", ",", "\n", "scale", "=", "(", "\n", "1.", "/", "cfg", ".", "NUM_GPUS", "/", "cfg", ".", "TRAIN", ".", "RPN_BATCH_SIZE_PER_IM", "/", "\n", "cfg", ".", "TRAIN", ".", "IMS_PER_BATCH", "\n", ")", "\n", ")", "\n", "# Normalization by (1) RPN_BATCH_SIZE_PER_IM and (2) IMS_PER_BATCH is", "\n", "# handled by (1) setting bbox outside weights and (2) SmoothL1Loss", "\n", "# normalizes by IMS_PER_BATCH", "\n", "", "loss_rpn_bbox_fpn", "=", "model", ".", "net", ".", "SmoothL1Loss", "(", "\n", "[", "\n", "'rpn_bbox_pred_fpn'", "+", "slvl", ",", "'rpn_bbox_targets_fpn'", "+", "slvl", ",", "\n", "'rpn_bbox_inside_weights_fpn'", "+", "slvl", ",", "\n", "'rpn_bbox_outside_weights_fpn'", "+", "slvl", "\n", "]", ",", "\n", "'loss_rpn_bbox_fpn'", "+", "slvl", ",", "\n", "beta", "=", "1.", "/", "9.", ",", "\n", "scale", "=", "1.", "/", "cfg", ".", "NUM_GPUS", "\n", ")", "\n", "loss_gradients", ".", "update", "(", "\n", "blob_utils", ".", "\n", "get_loss_gradients", "(", "model", ",", "[", "loss_rpn_cls_fpn", ",", "loss_rpn_bbox_fpn", "]", ")", "\n", ")", "\n", "model", ".", "AddLosses", "(", "[", "'loss_rpn_cls_fpn'", "+", "slvl", ",", "'loss_rpn_bbox_fpn'", "+", "slvl", "]", ")", "\n", "", "return", "loss_gradients", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.FPN.map_rois_to_fpn_levels": [[461, 474], ["numpy.sqrt", "numpy.floor", "numpy.clip", "utils.boxes_area", "numpy.log2"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.boxes.boxes_area"], ["", "def", "map_rois_to_fpn_levels", "(", "rois", ",", "k_min", ",", "k_max", ")", ":", "\n", "    ", "\"\"\"Determine which FPN level each RoI in a set of RoIs should map to based\n    on the heuristic in the FPN paper.\n    \"\"\"", "\n", "# Compute level ids", "\n", "s", "=", "np", ".", "sqrt", "(", "box_utils", ".", "boxes_area", "(", "rois", ")", ")", "\n", "s0", "=", "cfg", ".", "FPN", ".", "ROI_CANONICAL_SCALE", "# default: 224", "\n", "lvl0", "=", "cfg", ".", "FPN", ".", "ROI_CANONICAL_LEVEL", "# default: 4", "\n", "\n", "# Eqn.(1) in FPN paper", "\n", "target_lvls", "=", "np", ".", "floor", "(", "lvl0", "+", "np", ".", "log2", "(", "s", "/", "s0", "+", "1e-6", ")", ")", "\n", "target_lvls", "=", "np", ".", "clip", "(", "target_lvls", ",", "k_min", ",", "k_max", ")", "\n", "return", "target_lvls", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.FPN.add_multilevel_roi_blobs": [[476, 503], ["numpy.empty", "numpy.zeros", "range", "numpy.argsort().astype", "numpy.concatenate", "numpy.vstack", "numpy.where", "numpy.argsort", "str", "str"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.blob.zeros"], ["", "def", "add_multilevel_roi_blobs", "(", "\n", "blobs", ",", "blob_prefix", ",", "rois", ",", "target_lvls", ",", "lvl_min", ",", "lvl_max", "\n", ")", ":", "\n", "    ", "\"\"\"Add RoI blobs for multiple FPN levels to the blobs dict.\n\n    blobs: a dict mapping from blob name to numpy ndarray\n    blob_prefix: name prefix to use for the FPN blobs\n    rois: the source rois as a 2D numpy array of shape (N, 5) where each row is\n      an roi and the columns encode (batch_idx, x1, y1, x2, y2)\n    target_lvls: numpy array of shape (N, ) indicating which FPN level each roi\n      in rois should be assigned to\n    lvl_min: the finest (highest resolution) FPN level (e.g., 2)\n    lvl_max: the coarest (lowest resolution) FPN level (e.g., 6)\n    \"\"\"", "\n", "rois_idx_order", "=", "np", ".", "empty", "(", "(", "0", ",", ")", ")", "\n", "rois_stacked", "=", "np", ".", "zeros", "(", "(", "0", ",", "5", ")", ",", "dtype", "=", "np", ".", "float32", ")", "# for assert", "\n", "for", "lvl", "in", "range", "(", "lvl_min", ",", "lvl_max", "+", "1", ")", ":", "\n", "        ", "idx_lvl", "=", "np", ".", "where", "(", "target_lvls", "==", "lvl", ")", "[", "0", "]", "\n", "blobs", "[", "blob_prefix", "+", "'_fpn'", "+", "str", "(", "lvl", ")", "]", "=", "rois", "[", "idx_lvl", ",", ":", "]", "\n", "rois_idx_order", "=", "np", ".", "concatenate", "(", "(", "rois_idx_order", ",", "idx_lvl", ")", ")", "\n", "rois_stacked", "=", "np", ".", "vstack", "(", "\n", "[", "rois_stacked", ",", "blobs", "[", "blob_prefix", "+", "'_fpn'", "+", "str", "(", "lvl", ")", "]", "]", "\n", ")", "\n", "", "rois_idx_restore", "=", "np", ".", "argsort", "(", "rois_idx_order", ")", ".", "astype", "(", "np", ".", "int32", ",", "copy", "=", "False", ")", "\n", "blobs", "[", "blob_prefix", "+", "'_idx_restore_int32'", "]", "=", "rois_idx_restore", "\n", "# Sanity check that restore order is correct", "\n", "assert", "(", "rois_stacked", "[", "rois_idx_restore", "]", "==", "rois", ")", ".", "all", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.FPN.fpn_level_info_ResNet50_conv5": [[515, 520], ["FpnLevelInfo"], "function", ["None"], ["def", "fpn_level_info_ResNet50_conv5", "(", ")", ":", "\n", "    ", "return", "FpnLevelInfo", "(", "\n", "blobs", "=", "(", "'res5_2_sum'", ",", "'res4_5_sum'", ",", "'res3_3_sum'", ",", "'res2_2_sum'", ")", ",", "\n", "dims", "=", "(", "2048", ",", "1024", ",", "512", ",", "256", ")", ",", "\n", "spatial_scales", "=", "(", "1.", "/", "32.", ",", "1.", "/", "16.", ",", "1.", "/", "8.", ",", "1.", "/", "4.", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.FPN.fpn_level_info_ResNet101_conv5": [[523, 528], ["FpnLevelInfo"], "function", ["None"], ["", "def", "fpn_level_info_ResNet101_conv5", "(", ")", ":", "\n", "    ", "return", "FpnLevelInfo", "(", "\n", "blobs", "=", "(", "'res5_2_sum'", ",", "'res4_22_sum'", ",", "'res3_3_sum'", ",", "'res2_2_sum'", ")", ",", "\n", "dims", "=", "(", "2048", ",", "1024", ",", "512", ",", "256", ")", ",", "\n", "spatial_scales", "=", "(", "1.", "/", "32.", ",", "1.", "/", "16.", ",", "1.", "/", "8.", ",", "1.", "/", "4.", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.FPN.fpn_level_info_ResNet152_conv5": [[531, 536], ["FpnLevelInfo"], "function", ["None"], ["", "def", "fpn_level_info_ResNet152_conv5", "(", ")", ":", "\n", "    ", "return", "FpnLevelInfo", "(", "\n", "blobs", "=", "(", "'res5_2_sum'", ",", "'res4_35_sum'", ",", "'res3_7_sum'", ",", "'res2_2_sum'", ")", ",", "\n", "dims", "=", "(", "2048", ",", "1024", ",", "512", ",", "256", ")", ",", "\n", "spatial_scales", "=", "(", "1.", "/", "32.", ",", "1.", "/", "16.", ",", "1.", "/", "8.", ",", "1.", "/", "4.", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.generate_anchors.generate_anchors": [[54, 65], ["generate_anchors._generate_anchors", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.generate_anchors._generate_anchors"], ["def", "generate_anchors", "(", "\n", "stride", "=", "16", ",", "sizes", "=", "(", "32", ",", "64", ",", "128", ",", "256", ",", "512", ")", ",", "aspect_ratios", "=", "(", "0.5", ",", "1", ",", "2", ")", "\n", ")", ":", "\n", "    ", "\"\"\"Generates a matrix of anchor boxes in (x1, y1, x2, y2) format. Anchors\n    are centered on stride / 2, have (approximate) sqrt areas of the specified\n    sizes, and aspect ratios as given.\n    \"\"\"", "\n", "return", "_generate_anchors", "(", "\n", "stride", ",", "\n", "np", ".", "array", "(", "sizes", ",", "dtype", "=", "np", ".", "float", ")", "/", "stride", ",", "\n", "np", ".", "array", "(", "aspect_ratios", ",", "dtype", "=", "np", ".", "float", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.generate_anchors._generate_anchors": [[68, 78], ["generate_anchors._ratio_enum", "numpy.vstack", "numpy.array", "generate_anchors._scale_enum", "range"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.generate_anchors._ratio_enum", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.generate_anchors._scale_enum"], ["", "def", "_generate_anchors", "(", "base_size", ",", "scales", ",", "aspect_ratios", ")", ":", "\n", "    ", "\"\"\"Generate anchor (reference) windows by enumerating aspect ratios X\n    scales wrt a reference (0, 0, base_size - 1, base_size - 1) window.\n    \"\"\"", "\n", "anchor", "=", "np", ".", "array", "(", "[", "1", ",", "1", ",", "base_size", ",", "base_size", "]", ",", "dtype", "=", "np", ".", "float", ")", "-", "1", "\n", "anchors", "=", "_ratio_enum", "(", "anchor", ",", "aspect_ratios", ")", "\n", "anchors", "=", "np", ".", "vstack", "(", "\n", "[", "_scale_enum", "(", "anchors", "[", "i", ",", ":", "]", ",", "scales", ")", "for", "i", "in", "range", "(", "anchors", ".", "shape", "[", "0", "]", ")", "]", "\n", ")", "\n", "return", "anchors", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.generate_anchors._whctrs": [[80, 87], ["None"], "function", ["None"], ["", "def", "_whctrs", "(", "anchor", ")", ":", "\n", "    ", "\"\"\"Return width, height, x center, and y center for an anchor (window).\"\"\"", "\n", "w", "=", "anchor", "[", "2", "]", "-", "anchor", "[", "0", "]", "+", "1", "\n", "h", "=", "anchor", "[", "3", "]", "-", "anchor", "[", "1", "]", "+", "1", "\n", "x_ctr", "=", "anchor", "[", "0", "]", "+", "0.5", "*", "(", "w", "-", "1", ")", "\n", "y_ctr", "=", "anchor", "[", "1", "]", "+", "0.5", "*", "(", "h", "-", "1", ")", "\n", "return", "w", ",", "h", ",", "x_ctr", ",", "y_ctr", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.generate_anchors._mkanchors": [[89, 104], ["numpy.hstack"], "function", ["None"], ["", "def", "_mkanchors", "(", "ws", ",", "hs", ",", "x_ctr", ",", "y_ctr", ")", ":", "\n", "    ", "\"\"\"Given a vector of widths (ws) and heights (hs) around a center\n    (x_ctr, y_ctr), output a set of anchors (windows).\n    \"\"\"", "\n", "ws", "=", "ws", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "hs", "=", "hs", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "anchors", "=", "np", ".", "hstack", "(", "\n", "(", "\n", "x_ctr", "-", "0.5", "*", "(", "ws", "-", "1", ")", ",", "\n", "y_ctr", "-", "0.5", "*", "(", "hs", "-", "1", ")", ",", "\n", "x_ctr", "+", "0.5", "*", "(", "ws", "-", "1", ")", ",", "\n", "y_ctr", "+", "0.5", "*", "(", "hs", "-", "1", ")", "\n", ")", "\n", ")", "\n", "return", "anchors", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.generate_anchors._ratio_enum": [[106, 115], ["generate_anchors._whctrs", "numpy.round", "numpy.round", "generate_anchors._mkanchors", "numpy.sqrt"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.generate_anchors._whctrs", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.generate_anchors._mkanchors"], ["", "def", "_ratio_enum", "(", "anchor", ",", "ratios", ")", ":", "\n", "    ", "\"\"\"Enumerate a set of anchors for each aspect ratio wrt an anchor.\"\"\"", "\n", "w", ",", "h", ",", "x_ctr", ",", "y_ctr", "=", "_whctrs", "(", "anchor", ")", "\n", "size", "=", "w", "*", "h", "\n", "size_ratios", "=", "size", "/", "ratios", "\n", "ws", "=", "np", ".", "round", "(", "np", ".", "sqrt", "(", "size_ratios", ")", ")", "\n", "hs", "=", "np", ".", "round", "(", "ws", "*", "ratios", ")", "\n", "anchors", "=", "_mkanchors", "(", "ws", ",", "hs", ",", "x_ctr", ",", "y_ctr", ")", "\n", "return", "anchors", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.generate_anchors._scale_enum": [[117, 124], ["generate_anchors._whctrs", "generate_anchors._mkanchors"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.generate_anchors._whctrs", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.generate_anchors._mkanchors"], ["", "def", "_scale_enum", "(", "anchor", ",", "scales", ")", ":", "\n", "    ", "\"\"\"Enumerate a set of anchors for each scale wrt an anchor.\"\"\"", "\n", "w", ",", "h", ",", "x_ctr", ",", "y_ctr", "=", "_whctrs", "(", "anchor", ")", "\n", "ws", "=", "w", "*", "scales", "\n", "hs", "=", "h", "*", "scales", "\n", "anchors", "=", "_mkanchors", "(", "ws", ",", "hs", ",", "x_ctr", ",", "y_ctr", ")", "\n", "return", "anchors", "\n", "", ""]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.keypoint_rcnn_heads.add_keypoint_outputs": [[46, 108], ["model.ConvTranspose", "model.Relu", "model.ConvTranspose", "model.Conv", "model.BilinearInterpolation", "int", "utils.c2.gauss_fill", "utils.c2.const_fill", "int", "utils.c2.const_fill", "utils.c2.const_fill"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.detector.DetectionModelHelper.BilinearInterpolation", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.c2.gauss_fill", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.c2.const_fill", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.c2.const_fill", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.c2.const_fill"], ["def", "add_keypoint_outputs", "(", "model", ",", "blob_in", ",", "dim", ")", ":", "\n", "    ", "\"\"\"Add Mask R-CNN keypoint specific outputs: keypoint heatmaps.\"\"\"", "\n", "# NxKxHxW", "\n", "upsample_heatmap", "=", "(", "cfg", ".", "KRCNN", ".", "UP_SCALE", ">", "1", ")", "\n", "\n", "if", "cfg", ".", "KRCNN", ".", "USE_DECONV", ":", "\n", "# Apply ConvTranspose to the feature representation; results in 2x", "\n", "# upsampling", "\n", "        ", "blob_in", "=", "model", ".", "ConvTranspose", "(", "\n", "blob_in", ",", "\n", "'kps_deconv'", ",", "\n", "dim", ",", "\n", "cfg", ".", "KRCNN", ".", "DECONV_DIM", ",", "\n", "kernel", "=", "cfg", ".", "KRCNN", ".", "DECONV_KERNEL", ",", "\n", "pad", "=", "int", "(", "cfg", ".", "KRCNN", ".", "DECONV_KERNEL", "/", "2", "-", "1", ")", ",", "\n", "stride", "=", "2", ",", "\n", "weight_init", "=", "gauss_fill", "(", "0.01", ")", ",", "\n", "bias_init", "=", "const_fill", "(", "0.0", ")", "\n", ")", "\n", "model", ".", "Relu", "(", "'kps_deconv'", ",", "'kps_deconv'", ")", "\n", "dim", "=", "cfg", ".", "KRCNN", ".", "DECONV_DIM", "\n", "\n", "", "if", "upsample_heatmap", ":", "\n", "        ", "blob_name", "=", "'kps_score_lowres'", "\n", "", "else", ":", "\n", "        ", "blob_name", "=", "'kps_score'", "\n", "\n", "", "if", "cfg", ".", "KRCNN", ".", "USE_DECONV_OUTPUT", ":", "\n", "# Use ConvTranspose to predict heatmaps; results in 2x upsampling", "\n", "        ", "blob_out", "=", "model", ".", "ConvTranspose", "(", "\n", "blob_in", ",", "\n", "blob_name", ",", "\n", "dim", ",", "\n", "cfg", ".", "KRCNN", ".", "NUM_KEYPOINTS", ",", "\n", "kernel", "=", "cfg", ".", "KRCNN", ".", "DECONV_KERNEL", ",", "\n", "pad", "=", "int", "(", "cfg", ".", "KRCNN", ".", "DECONV_KERNEL", "/", "2", "-", "1", ")", ",", "\n", "stride", "=", "2", ",", "\n", "weight_init", "=", "(", "cfg", ".", "KRCNN", ".", "CONV_INIT", ",", "{", "'std'", ":", "0.001", "}", ")", ",", "\n", "bias_init", "=", "const_fill", "(", "0.0", ")", "\n", ")", "\n", "", "else", ":", "\n", "# Use Conv to predict heatmaps; does no upsampling", "\n", "        ", "blob_out", "=", "model", ".", "Conv", "(", "\n", "blob_in", ",", "\n", "blob_name", ",", "\n", "dim", ",", "\n", "cfg", ".", "KRCNN", ".", "NUM_KEYPOINTS", ",", "\n", "kernel", "=", "1", ",", "\n", "pad", "=", "0", ",", "\n", "stride", "=", "1", ",", "\n", "weight_init", "=", "(", "cfg", ".", "KRCNN", ".", "CONV_INIT", ",", "{", "'std'", ":", "0.001", "}", ")", ",", "\n", "bias_init", "=", "const_fill", "(", "0.0", ")", "\n", ")", "\n", "\n", "", "if", "upsample_heatmap", ":", "\n", "# Increase heatmap output size via bilinear upsampling", "\n", "        ", "blob_out", "=", "model", ".", "BilinearInterpolation", "(", "\n", "blob_out", ",", "'kps_score'", ",", "cfg", ".", "KRCNN", ".", "NUM_KEYPOINTS", ",", "\n", "cfg", ".", "KRCNN", ".", "NUM_KEYPOINTS", ",", "cfg", ".", "KRCNN", ".", "UP_SCALE", "\n", ")", "\n", "\n", "", "return", "blob_out", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.keypoint_rcnn_heads.add_keypoint_losses": [[110, 150], ["model.net.Reshape", "model.net.SoftmaxWithLoss", "utils.get_loss_gradients", "model.AddLosses", "model.StopGradient", "model.net.Mul"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.blob.get_loss_gradients", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.detector.DetectionModelHelper.AddLosses"], ["", "def", "add_keypoint_losses", "(", "model", ")", ":", "\n", "    ", "\"\"\"Add Mask R-CNN keypoint specific losses.\"\"\"", "\n", "# Reshape input from (N, K, H, W) to (NK, HW)", "\n", "model", ".", "net", ".", "Reshape", "(", "\n", "[", "'kps_score'", "]", ",", "[", "'kps_score_reshaped'", ",", "'_kps_score_old_shape'", "]", ",", "\n", "shape", "=", "(", "-", "1", ",", "cfg", ".", "KRCNN", ".", "HEATMAP_SIZE", "*", "cfg", ".", "KRCNN", ".", "HEATMAP_SIZE", ")", "\n", ")", "\n", "# Softmax across **space** (woahh....space!)", "\n", "# Note: this is not what is commonly called \"spatial softmax\"", "\n", "# (i.e., softmax applied along the channel dimension at each spatial", "\n", "# location); This is softmax applied over a set of spatial locations (i.e.,", "\n", "# each spatial location is a \"class\").", "\n", "kps_prob", ",", "loss_kps", "=", "model", ".", "net", ".", "SoftmaxWithLoss", "(", "\n", "[", "'kps_score_reshaped'", ",", "'keypoint_locations_int32'", ",", "'keypoint_weights'", "]", ",", "\n", "[", "'kps_prob'", ",", "'loss_kps'", "]", ",", "\n", "scale", "=", "cfg", ".", "KRCNN", ".", "LOSS_WEIGHT", "/", "cfg", ".", "NUM_GPUS", ",", "\n", "spatial", "=", "0", "\n", ")", "\n", "if", "not", "cfg", ".", "KRCNN", ".", "NORMALIZE_BY_VISIBLE_KEYPOINTS", ":", "\n", "# Discussion: the softmax loss above will average the loss by the sum of", "\n", "# keypoint_weights, i.e. the total number of visible keypoints. Since", "\n", "# the number of visible keypoints can vary significantly between", "\n", "# minibatches, this has the effect of up-weighting the importance of", "\n", "# minibatches with few visible keypoints. (Imagine the extreme case of", "\n", "# only one visible keypoint versus N: in the case of N, each one", "\n", "# contributes 1/N to the gradient compared to the single keypoint", "\n", "# determining the gradient direction). Instead, we can normalize the", "\n", "# loss by the total number of keypoints, if it were the case that all", "\n", "# keypoints were visible in a full minibatch. (Returning to the example,", "\n", "# this means that the one visible keypoint contributes as much as each", "\n", "# of the N keypoints.)", "\n", "        ", "model", ".", "StopGradient", "(", "\n", "'keypoint_loss_normalizer'", ",", "'keypoint_loss_normalizer'", "\n", ")", "\n", "loss_kps", "=", "model", ".", "net", ".", "Mul", "(", "\n", "[", "'loss_kps'", ",", "'keypoint_loss_normalizer'", "]", ",", "'loss_kps_normalized'", "\n", ")", "\n", "", "loss_gradients", "=", "blob_utils", ".", "get_loss_gradients", "(", "model", ",", "[", "loss_kps", "]", ")", "\n", "model", ".", "AddLosses", "(", "loss_kps", ")", "\n", "return", "loss_gradients", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.keypoint_rcnn_heads.add_ResNet_roi_conv5_head_for_keypoints": [[156, 185], ["model.RoIFeatureTransform", "modeling.add_stage", "int"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.detector.DetectionModelHelper.RoIFeatureTransform", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.ResNet.add_stage"], ["", "def", "add_ResNet_roi_conv5_head_for_keypoints", "(", "\n", "model", ",", "blob_in", ",", "dim_in", ",", "spatial_scale", "\n", ")", ":", "\n", "    ", "\"\"\"Add a ResNet \"conv5\" / \"stage5\" head for Mask R-CNN keypoint prediction.\n    \"\"\"", "\n", "model", ".", "RoIFeatureTransform", "(", "\n", "blob_in", ",", "\n", "'_[pose]_pool5'", ",", "\n", "blob_rois", "=", "'keypoint_rois'", ",", "\n", "method", "=", "cfg", ".", "KRCNN", ".", "ROI_XFORM_METHOD", ",", "\n", "resolution", "=", "cfg", ".", "KRCNN", ".", "ROI_XFORM_RESOLUTION", ",", "\n", "sampling_ratio", "=", "cfg", ".", "KRCNN", ".", "ROI_XFORM_SAMPLING_RATIO", ",", "\n", "spatial_scale", "=", "spatial_scale", "\n", ")", "\n", "# Using the prefix '_[pose]_' to 'res5' enables initializing the head's", "\n", "# parameters using pretrained 'res5' parameters if given (see", "\n", "# utils.net.initialize_gpu_0_from_weights_file)", "\n", "s", ",", "dim_in", "=", "ResNet", ".", "add_stage", "(", "\n", "model", ",", "\n", "'_[pose]_res5'", ",", "\n", "'_[pose]_pool5'", ",", "\n", "3", ",", "\n", "dim_in", ",", "\n", "2048", ",", "\n", "512", ",", "\n", "cfg", ".", "KRCNN", ".", "DILATION", ",", "\n", "stride_init", "=", "int", "(", "cfg", ".", "KRCNN", ".", "ROI_XFORM_RESOLUTION", "/", "7", ")", "\n", ")", "\n", "return", "s", ",", "2048", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.keypoint_rcnn_heads.add_roi_pose_head_v1convX": [[187, 218], ["model.RoIFeatureTransform", "range", "model.Conv", "model.Relu", "str"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.detector.DetectionModelHelper.RoIFeatureTransform"], ["", "def", "add_roi_pose_head_v1convX", "(", "model", ",", "blob_in", ",", "dim_in", ",", "spatial_scale", ")", ":", "\n", "    ", "\"\"\"Add a Mask R-CNN keypoint head. v1convX design: X * (conv).\"\"\"", "\n", "hidden_dim", "=", "cfg", ".", "KRCNN", ".", "CONV_HEAD_DIM", "\n", "kernel_size", "=", "cfg", ".", "KRCNN", ".", "CONV_HEAD_KERNEL", "\n", "pad_size", "=", "kernel_size", "//", "2", "\n", "current", "=", "model", ".", "RoIFeatureTransform", "(", "\n", "blob_in", ",", "\n", "'_[pose]_roi_feat'", ",", "\n", "blob_rois", "=", "'keypoint_rois'", ",", "\n", "method", "=", "cfg", ".", "KRCNN", ".", "ROI_XFORM_METHOD", ",", "\n", "resolution", "=", "cfg", ".", "KRCNN", ".", "ROI_XFORM_RESOLUTION", ",", "\n", "sampling_ratio", "=", "cfg", ".", "KRCNN", ".", "ROI_XFORM_SAMPLING_RATIO", ",", "\n", "spatial_scale", "=", "spatial_scale", "\n", ")", "\n", "\n", "for", "i", "in", "range", "(", "cfg", ".", "KRCNN", ".", "NUM_STACKED_CONVS", ")", ":", "\n", "        ", "current", "=", "model", ".", "Conv", "(", "\n", "current", ",", "\n", "'conv_fcn'", "+", "str", "(", "i", "+", "1", ")", ",", "\n", "dim_in", ",", "\n", "hidden_dim", ",", "\n", "kernel_size", ",", "\n", "stride", "=", "1", ",", "\n", "pad", "=", "pad_size", ",", "\n", "weight_init", "=", "(", "cfg", ".", "KRCNN", ".", "CONV_INIT", ",", "{", "'std'", ":", "0.01", "}", ")", ",", "\n", "bias_init", "=", "(", "'ConstantFill'", ",", "{", "'value'", ":", "0.", "}", ")", "\n", ")", "\n", "current", "=", "model", ".", "Relu", "(", "current", ",", "current", ")", "\n", "dim_in", "=", "hidden_dim", "\n", "\n", "", "return", "current", ",", "hidden_dim", "\n", "", ""]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder.generalized_rcnn": [[74, 91], ["model_builder.build_generic_detection_model", "model_builder.get_func", "model_builder.get_func", "model_builder.get_func", "model_builder.get_func", "model_builder.get_func"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder.build_generic_detection_model", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder.get_func", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder.get_func", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder.get_func", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder.get_func", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder.get_func"], ["def", "generalized_rcnn", "(", "model", ")", ":", "\n", "    ", "\"\"\"This model type handles:\n      - Fast R-CNN\n      - RPN only (not integrated with Fast R-CNN)\n      - Faster R-CNN (stagewise training from NIPS paper)\n      - Faster R-CNN (end-to-end joint training)\n      - Mask R-CNN (stagewise training from NIPS paper)\n      - Mask R-CNN (end-to-end joint training)\n    \"\"\"", "\n", "return", "build_generic_detection_model", "(", "\n", "model", ",", "\n", "get_func", "(", "cfg", ".", "MODEL", ".", "CONV_BODY", ")", ",", "\n", "add_roi_box_head_func", "=", "get_func", "(", "cfg", ".", "FAST_RCNN", ".", "ROI_BOX_HEAD", ")", ",", "\n", "add_roi_mask_head_func", "=", "get_func", "(", "cfg", ".", "MRCNN", ".", "ROI_MASK_HEAD", ")", ",", "\n", "add_roi_keypoint_head_func", "=", "get_func", "(", "cfg", ".", "KRCNN", ".", "ROI_KEYPOINTS_HEAD", ")", ",", "\n", "add_roi_box_head_ohem_func", "=", "get_func", "(", "cfg", ".", "FAST_RCNN", ".", "ROI_BOX_HEAD_OHEM", ")", ",", "\n", "freeze_conv_body", "=", "cfg", ".", "TRAIN", ".", "FREEZE_CONV_BODY", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder.rfcn": [[94, 97], ["model_builder.build_generic_rfcn_model", "model_builder.get_func"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder.build_generic_rfcn_model", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder.get_func"], ["", "def", "rfcn", "(", "model", ")", ":", "\n", "# TODO(rbg): fold into build_generic_detection_model", "\n", "    ", "return", "build_generic_rfcn_model", "(", "model", ",", "get_func", "(", "cfg", ".", "MODEL", ".", "CONV_BODY", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder.retinanet": [[99, 102], ["model_builder.build_generic_retinanet_model", "model_builder.get_func"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder.build_generic_retinanet_model", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder.get_func"], ["", "def", "retinanet", "(", "model", ")", ":", "\n", "# TODO(rbg): fold into build_generic_detection_model", "\n", "    ", "return", "build_generic_retinanet_model", "(", "model", ",", "get_func", "(", "cfg", ".", "MODEL", ".", "CONV_BODY", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder.create": [[108, 119], ["modeling.detector.DetectionModelHelper", "model_builder.get_func"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder.get_func"], ["", "def", "create", "(", "model_type_func", ",", "train", "=", "False", ")", ":", "\n", "    ", "\"\"\"Generic model creation function that dispatches to specific model\n    building functions.\n    \"\"\"", "\n", "model", "=", "DetectionModelHelper", "(", "\n", "name", "=", "model_type_func", ",", "\n", "train", "=", "train", ",", "\n", "num_classes", "=", "cfg", ".", "MODEL", ".", "NUM_CLASSES", ",", "\n", "init_params", "=", "train", "\n", ")", "\n", "return", "get_func", "(", "model_type_func", ")", "(", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder.get_func": [[121, 147], ["modeling.name_compat.get_new_name", "modeling.name_compat.get_new_name", "modeling.name_compat.get_new_name", "modeling.name_compat.get_new_name", "modeling.name_compat.get_new_name", "modeling.name_compat.get_new_name", "modeling.name_compat.get_new_name", "modeling.name_compat.get_new_name", "modeling.name_compat.get_new_name", "modeling.name_compat.get_new_name", "modeling.name_compat.get_new_name", "logger.warn", "func_name.split", "importlib.import_module", "getattr", "len", "logger.error", "globals", "core.config.cfg.MODEL.CONV_BODY", "core.config.cfg.FAST_RCNN.ROI_BOX_HEAD", "core.config.cfg.MRCNN.ROI_MASK_HEAD", "core.config.cfg.KRCNN.ROI_KEYPOINTS_HEAD", "core.config.cfg.FAST_RCNN.ROI_BOX_HEAD_OHEM", "core.config.cfg.MODEL.CONV_BODY", "core.config.cfg.MODEL.CONV_BODY", "core.config.cfg.MODEL.CONV_BODY", "core.config.cfg.FAST_RCNN.ROI_BOX_HEAD", "core.config.cfg.MODEL.CONV_BODY", "core.config.cfg.MODEL.CONV_BODY", "core.config.cfg.MODEL.CONV_BODY", "core.config.cfg.FAST_RCNN.ROI_BOX_HEAD", "core.config.cfg.MRCNN.ROI_MASK_HEAD", "core.config.cfg.MODEL.CONV_BODY", "core.config.cfg.FAST_RCNN.ROI_BOX_HEAD", "core.config.cfg.KRCNN.ROI_KEYPOINTS_HEAD"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.name_compat.get_new_name", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.name_compat.get_new_name", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.name_compat.get_new_name", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.name_compat.get_new_name", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.name_compat.get_new_name", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.name_compat.get_new_name", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.name_compat.get_new_name", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.name_compat.get_new_name", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.name_compat.get_new_name", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.name_compat.get_new_name", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.name_compat.get_new_name"], ["", "def", "get_func", "(", "func_name", ")", ":", "\n", "    ", "\"\"\"Helper to return a function object by name. func_name must identify a\n    function in this module or the path to a function relative to the base\n    'modeling' module.\n    \"\"\"", "\n", "if", "func_name", "==", "''", ":", "\n", "        ", "return", "None", "\n", "", "new_func_name", "=", "modeling", ".", "name_compat", ".", "get_new_name", "(", "func_name", ")", "\n", "if", "new_func_name", "!=", "func_name", ":", "\n", "        ", "logger", ".", "warn", "(", "\n", "'Remapping old function name: {} -> {}'", ".", "\n", "format", "(", "func_name", ",", "new_func_name", ")", "\n", ")", "\n", "func_name", "=", "new_func_name", "\n", "", "try", ":", "\n", "        ", "parts", "=", "func_name", ".", "split", "(", "'.'", ")", "\n", "# Refers to a function in this module", "\n", "if", "len", "(", "parts", ")", "==", "1", ":", "\n", "            ", "return", "globals", "(", ")", "[", "parts", "[", "0", "]", "]", "\n", "# Otherwise, assume we're referencing a module under modeling", "\n", "", "module_name", "=", "'modeling.'", "+", "'.'", ".", "join", "(", "parts", "[", ":", "-", "1", "]", ")", "\n", "module", "=", "importlib", ".", "import_module", "(", "module_name", ")", "\n", "return", "getattr", "(", "module", ",", "parts", "[", "-", "1", "]", ")", "\n", "", "except", "Exception", ":", "\n", "        ", "logger", ".", "error", "(", "'Failed to find function: {}'", ".", "format", "(", "func_name", ")", ")", "\n", "raise", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder.build_generic_detection_model": [[149, 235], ["modeling.build_data_parallel_model", "utils.BlobReferenceList", "model.net.Clone", "modeling.add_generic_rpn_outputs", "model_builder._narrow_to_fpn_roi_levels", "modeling.add_generic_rpn_ohem_classifier", "model_builder._add_fast_rcnn_head", "model_builder._add_roi_mask_head", "model_builder._add_roi_keypoint_head", "head_loss_gradients.values", "model.StopGradient", "loss_gradients.update", "modeling.VGG_CNN_M_1024.add_VGG_CNN_M_1024_conv5_body", "modeling.VGG_CNN_M_1024.add_VGG_CNN_M_1024_roi_fc_head", "modeling.VGG16.add_VGG16_conv5_body", "modeling.VGG16.add_VGG16_roi_fc_head", "modeling.ResNet.add_ResNet50_conv4_body", "modeling.ResNet.add_ResNet_roi_conv5_head", "modeling.ResNet.add_ResNet101_conv4_body", "modeling.ResNet.add_ResNet_roi_conv5_head", "modeling.ResNet.add_ResNet50_conv4_body", "modeling.ResNet.add_ResNet_roi_conv5_head", "modeling.ResNet.add_ResNet101_conv4_body", "modeling.ResNet.add_ResNet_roi_conv5_head", "modeling.VGG_CNN_M_1024.add_VGG_CNN_M_1024_conv5_body", "modeling.VGG16.add_VGG16_conv5_body", "modeling.ResNet.add_ResNet50_conv4_body", "modeling.ResNet.add_ResNet101_conv4_body", "modeling.VGG_CNN_M_1024.add_VGG_CNN_M_1024_conv5_body", "modeling.VGG16.add_VGG16_conv5_body", "modeling.ResNet.add_ResNet50_conv4_body", "modeling.ResNet.add_ResNet101_conv4_body", "modeling.VGG16.add_VGG16_conv5_body", "modeling.VGG16.add_VGG16_roi_fc_head", "modeling.ResNet.add_ResNet50_conv4_body", "modeling.ResNet.add_ResNet_roi_conv5_head", "modeling.ResNet.add_ResNet101_conv4_body", "modeling.ResNet.add_ResNet_roi_conv5_head"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.optimizer.build_data_parallel_model", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.c2.BlobReferenceList", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.rpn_heads.add_generic_rpn_outputs", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder._narrow_to_fpn_roi_levels", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.rpn_heads.add_generic_rpn_ohem_classifier", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder._add_fast_rcnn_head", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder._add_roi_mask_head", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder._add_roi_keypoint_head", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.VGG_CNN_M_1024.add_VGG_CNN_M_1024_conv5_body", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.VGG_CNN_M_1024.add_VGG_CNN_M_1024_roi_fc_head", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.VGG16.add_VGG16_conv5_body", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.VGG16.add_VGG16_roi_fc_head", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.ResNet.add_ResNet50_conv4_body", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.ResNet.add_ResNet_roi_conv5_head", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.ResNet.add_ResNet101_conv4_body", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.ResNet.add_ResNet_roi_conv5_head", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.ResNet.add_ResNet50_conv4_body", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.ResNet.add_ResNet_roi_conv5_head", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.ResNet.add_ResNet101_conv4_body", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.ResNet.add_ResNet_roi_conv5_head", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.VGG_CNN_M_1024.add_VGG_CNN_M_1024_conv5_body", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.VGG16.add_VGG16_conv5_body", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.ResNet.add_ResNet50_conv4_body", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.ResNet.add_ResNet101_conv4_body", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.VGG_CNN_M_1024.add_VGG_CNN_M_1024_conv5_body", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.VGG16.add_VGG16_conv5_body", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.ResNet.add_ResNet50_conv4_body", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.ResNet.add_ResNet101_conv4_body", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.VGG16.add_VGG16_conv5_body", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.VGG16.add_VGG16_roi_fc_head", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.ResNet.add_ResNet50_conv4_body", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.ResNet.add_ResNet_roi_conv5_head", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.ResNet.add_ResNet101_conv4_body", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.ResNet.add_ResNet_roi_conv5_head"], ["", "", "def", "build_generic_detection_model", "(", "\n", "model", ",", "\n", "add_conv_body_func", ",", "\n", "add_roi_box_head_func", "=", "None", ",", "\n", "add_roi_mask_head_func", "=", "None", ",", "\n", "add_roi_keypoint_head_func", "=", "None", ",", "\n", "add_roi_box_head_ohem_func", "=", "None", ",", "\n", "freeze_conv_body", "=", "False", ",", "\n", ")", ":", "\n", "    ", "def", "_single_gpu_build_func", "(", "model", ")", ":", "\n", "        ", "\"\"\"Build the model on a single GPU. Can be called in a loop over GPUs\n        with name and device scoping to create a data parallel model.\n        \"\"\"", "\n", "# Add the conv body (called \"backbone architecture\" in papers)", "\n", "# E.g., ResNet-50, ResNet-50-FPN, ResNeXt-101-FPN, etc.", "\n", "blob_conv", ",", "dim_conv", ",", "spatial_scale_conv", "=", "add_conv_body_func", "(", "model", ")", "\n", "if", "freeze_conv_body", ":", "\n", "            ", "for", "b", "in", "c2_utils", ".", "BlobReferenceList", "(", "blob_conv", ")", ":", "\n", "                ", "model", ".", "StopGradient", "(", "b", ",", "b", ")", "\n", "\n", "", "", "if", "not", "model", ".", "train", ":", "# == inference", "\n", "# Create a net that can be used to execute the conv body on an image", "\n", "# (without also executing RPN or any other network heads)", "\n", "            ", "model", ".", "conv_body_net", "=", "model", ".", "net", ".", "Clone", "(", "'conv_body_net'", ")", "\n", "\n", "", "head_loss_gradients", "=", "{", "\n", "'rpn'", ":", "None", ",", "\n", "'box'", ":", "None", ",", "\n", "'mask'", ":", "None", ",", "\n", "'keypoints'", ":", "None", ",", "\n", "}", "\n", "\n", "do_OHEM", "=", "model", ".", "train", "and", "cfg", ".", "TRAIN", ".", "OHEM", "\n", "\n", "if", "cfg", ".", "RPN", ".", "RPN_ON", ":", "\n", "# Add the RPN head", "\n", "            ", "head_loss_gradients", "[", "'rpn'", "]", "=", "rpn_heads", ".", "add_generic_rpn_outputs", "(", "\n", "model", ",", "blob_conv", ",", "dim_conv", ",", "spatial_scale_conv", ",", "ohem", "=", "do_OHEM", "\n", ")", "\n", "\n", "", "if", "cfg", ".", "FPN", ".", "FPN_ON", ":", "\n", "# After adding the RPN head, restrict FPN blobs and scales to", "\n", "# those used in the RoI heads", "\n", "            ", "blob_conv", ",", "spatial_scale_conv", "=", "_narrow_to_fpn_roi_levels", "(", "\n", "blob_conv", ",", "spatial_scale_conv", "\n", ")", "\n", "\n", "", "if", "do_OHEM", ":", "\n", "            ", "rpn_heads", ".", "add_generic_rpn_ohem_classifier", "(", "\n", "model", ",", "add_roi_box_head_ohem_func", ",", "blob_conv", ",", "dim_conv", ",", "\n", "spatial_scale_conv", "\n", ")", "\n", "\n", "\n", "", "if", "not", "cfg", ".", "MODEL", ".", "RPN_ONLY", ":", "\n", "# Add the Fast R-CNN head", "\n", "            ", "head_loss_gradients", "[", "'box'", "]", "=", "_add_fast_rcnn_head", "(", "\n", "model", ",", "add_roi_box_head_func", ",", "blob_conv", ",", "dim_conv", ",", "\n", "spatial_scale_conv", "\n", ")", "\n", "\n", "", "if", "cfg", ".", "MODEL", ".", "MASK_ON", ":", "\n", "# Add the mask head", "\n", "            ", "head_loss_gradients", "[", "'mask'", "]", "=", "_add_roi_mask_head", "(", "\n", "model", ",", "add_roi_mask_head_func", ",", "blob_conv", ",", "dim_conv", ",", "\n", "spatial_scale_conv", "\n", ")", "\n", "\n", "", "if", "cfg", ".", "MODEL", ".", "KEYPOINTS_ON", ":", "\n", "# Add the keypoint head", "\n", "            ", "head_loss_gradients", "[", "'keypoint'", "]", "=", "_add_roi_keypoint_head", "(", "\n", "model", ",", "add_roi_keypoint_head_func", ",", "blob_conv", ",", "dim_conv", ",", "\n", "spatial_scale_conv", "\n", ")", "\n", "\n", "", "if", "model", ".", "train", ":", "\n", "            ", "loss_gradients", "=", "{", "}", "\n", "for", "lg", "in", "head_loss_gradients", ".", "values", "(", ")", ":", "\n", "                ", "if", "lg", "is", "not", "None", ":", "\n", "                    ", "loss_gradients", ".", "update", "(", "lg", ")", "\n", "", "", "return", "loss_gradients", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "\n", "", "", "optim", ".", "build_data_parallel_model", "(", "model", ",", "_single_gpu_build_func", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder._narrow_to_fpn_roi_levels": [[237, 251], ["None"], "function", ["None"], ["", "def", "_narrow_to_fpn_roi_levels", "(", "blobs", ",", "spatial_scales", ")", ":", "\n", "    ", "\"\"\"Return only the blobs and spatial scales that will be used for RoI heads.\n    Inputs `blobs` and `spatial_scales` may include extra blobs and scales that\n    are used for RPN proposals, but not for RoI heads.\n    \"\"\"", "\n", "# Code only supports case when RPN and ROI min levels are the same", "\n", "assert", "cfg", ".", "FPN", ".", "RPN_MIN_LEVEL", "==", "cfg", ".", "FPN", ".", "ROI_MIN_LEVEL", "\n", "# RPN max level can be >= to ROI max level", "\n", "assert", "cfg", ".", "FPN", ".", "RPN_MAX_LEVEL", ">=", "cfg", ".", "FPN", ".", "ROI_MAX_LEVEL", "\n", "# FPN RPN max level might be > FPN ROI max level in which case we", "\n", "# need to discard some leading conv blobs (blobs are ordered from", "\n", "# max/coarsest level to min/finest level)", "\n", "num_roi_levels", "=", "cfg", ".", "FPN", ".", "ROI_MAX_LEVEL", "-", "cfg", ".", "FPN", ".", "ROI_MIN_LEVEL", "+", "1", "\n", "return", "blobs", "[", "-", "num_roi_levels", ":", "]", ",", "spatial_scales", "[", "-", "num_roi_levels", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder._add_fast_rcnn_head": [[253, 266], ["add_roi_box_head_func", "modeling.add_fast_rcnn_outputs", "modeling.add_fast_rcnn_losses"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.fast_rcnn_heads.add_fast_rcnn_outputs", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.fast_rcnn_heads.add_fast_rcnn_losses"], ["", "def", "_add_fast_rcnn_head", "(", "\n", "model", ",", "add_roi_box_head_func", ",", "blob_in", ",", "dim_in", ",", "spatial_scale_in", "\n", ")", ":", "\n", "    ", "\"\"\"Add a Fast R-CNN head to the model.\"\"\"", "\n", "blob_frcn", ",", "dim_frcn", "=", "add_roi_box_head_func", "(", "\n", "model", ",", "blob_in", ",", "dim_in", ",", "spatial_scale_in", "\n", ")", "\n", "fast_rcnn_heads", ".", "add_fast_rcnn_outputs", "(", "model", ",", "blob_frcn", ",", "dim_frcn", ")", "\n", "if", "model", ".", "train", ":", "\n", "        ", "loss_gradients", "=", "fast_rcnn_heads", ".", "add_fast_rcnn_losses", "(", "model", ")", "\n", "", "else", ":", "\n", "        ", "loss_gradients", "=", "None", "\n", "", "return", "loss_gradients", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder._add_roi_mask_head": [[268, 296], ["copy.deepcopy", "add_roi_mask_head_func", "modeling.add_mask_rcnn_outputs", "model.net.Proto", "utils.SuffixNet", "modeling.add_mask_rcnn_losses", "len"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.mask_rcnn_heads.add_mask_rcnn_outputs", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.c2.SuffixNet", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.mask_rcnn_heads.add_mask_rcnn_losses"], ["", "def", "_add_roi_mask_head", "(", "\n", "model", ",", "add_roi_mask_head_func", ",", "blob_in", ",", "dim_in", ",", "spatial_scale_in", "\n", ")", ":", "\n", "    ", "\"\"\"Add a mask prediction head to the model.\"\"\"", "\n", "# Capture model graph before adding the mask head", "\n", "bbox_net", "=", "copy", ".", "deepcopy", "(", "model", ".", "net", ".", "Proto", "(", ")", ")", "\n", "# Add the mask head", "\n", "blob_mask_head", ",", "dim_mask_head", "=", "add_roi_mask_head_func", "(", "\n", "model", ",", "blob_in", ",", "dim_in", ",", "spatial_scale_in", "\n", ")", "\n", "# Add the mask output", "\n", "blob_mask", "=", "mask_rcnn_heads", ".", "add_mask_rcnn_outputs", "(", "\n", "model", ",", "blob_mask_head", ",", "dim_mask_head", "\n", ")", "\n", "\n", "if", "not", "model", ".", "train", ":", "# == inference", "\n", "# Inference uses a cascade of box predictions, then mask predictions.", "\n", "# This requires separate nets for box and mask prediction.", "\n", "# So we extract the mask prediction net, store it as its own network,", "\n", "# then restore model.net to be the bbox-only network", "\n", "        ", "model", ".", "mask_net", ",", "blob_mask", "=", "c2_utils", ".", "SuffixNet", "(", "\n", "'mask_net'", ",", "model", ".", "net", ",", "len", "(", "bbox_net", ".", "op", ")", ",", "blob_mask", "\n", ")", "\n", "model", ".", "net", ".", "_net", "=", "bbox_net", "\n", "loss_gradients", "=", "None", "\n", "", "else", ":", "\n", "        ", "loss_gradients", "=", "mask_rcnn_heads", ".", "add_mask_rcnn_losses", "(", "model", ",", "blob_mask", ")", "\n", "", "return", "loss_gradients", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder._add_roi_keypoint_head": [[298, 326], ["copy.deepcopy", "add_roi_keypoint_head_func", "modeling.add_keypoint_outputs", "model.net.Proto", "utils.SuffixNet", "modeling.add_keypoint_losses", "len"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.keypoint_rcnn_heads.add_keypoint_outputs", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.c2.SuffixNet", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.keypoint_rcnn_heads.add_keypoint_losses"], ["", "def", "_add_roi_keypoint_head", "(", "\n", "model", ",", "add_roi_keypoint_head_func", ",", "blob_in", ",", "dim_in", ",", "spatial_scale_in", "\n", ")", ":", "\n", "    ", "\"\"\"Add a keypoint prediction head to the model.\"\"\"", "\n", "# Capture model graph before adding the mask head", "\n", "bbox_net", "=", "copy", ".", "deepcopy", "(", "model", ".", "net", ".", "Proto", "(", ")", ")", "\n", "# Add the keypoint head", "\n", "blob_keypoint_head", ",", "dim_keypoint_head", "=", "add_roi_keypoint_head_func", "(", "\n", "model", ",", "blob_in", ",", "dim_in", ",", "spatial_scale_in", "\n", ")", "\n", "# Add the keypoint output", "\n", "blob_keypoint", "=", "keypoint_rcnn_heads", ".", "add_keypoint_outputs", "(", "\n", "model", ",", "blob_keypoint_head", ",", "dim_keypoint_head", "\n", ")", "\n", "\n", "if", "not", "model", ".", "train", ":", "# == inference", "\n", "# Inference uses a cascade of box predictions, then keypoint predictions", "\n", "# This requires separate nets for box and keypoint prediction.", "\n", "# So we extract the keypoint prediction net, store it as its own", "\n", "# network, then restore model.net to be the bbox-only network", "\n", "        ", "model", ".", "keypoint_net", ",", "keypoint_blob_out", "=", "c2_utils", ".", "SuffixNet", "(", "\n", "'keypoint_net'", ",", "model", ".", "net", ",", "len", "(", "bbox_net", ".", "op", ")", ",", "blob_keypoint", "\n", ")", "\n", "model", ".", "net", ".", "_net", "=", "bbox_net", "\n", "loss_gradients", "=", "None", "\n", "", "else", ":", "\n", "        ", "loss_gradients", "=", "keypoint_rcnn_heads", ".", "add_keypoint_losses", "(", "model", ")", "\n", "", "return", "loss_gradients", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder.build_generic_rfcn_model": [[328, 343], ["modeling.build_data_parallel_model", "modeling.add_rfcn_outputs", "model.net.Clone", "modeling.add_fast_rcnn_losses", "modeling.ResNet.add_ResNet50_conv5_body", "modeling.ResNet.add_ResNet101_conv5_body"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.optimizer.build_data_parallel_model", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.rfcn_heads.add_rfcn_outputs", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.fast_rcnn_heads.add_fast_rcnn_losses", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.ResNet.add_ResNet50_conv5_body", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.ResNet.add_ResNet101_conv5_body"], ["", "def", "build_generic_rfcn_model", "(", "model", ",", "add_conv_body_func", ",", "dim_reduce", "=", "None", ")", ":", "\n", "# TODO(rbg): fold this function into build_generic_detection_model", "\n", "    ", "def", "_single_gpu_build_func", "(", "model", ")", ":", "\n", "        ", "\"\"\"Builds the model on a single GPU. Can be called in a loop over GPUs\n        with name and device scoping to create a data parallel model.\"\"\"", "\n", "blob", ",", "dim", ",", "spatial_scale", "=", "add_conv_body_func", "(", "model", ")", "\n", "if", "not", "model", ".", "train", ":", "\n", "            ", "model", ".", "conv_body_net", "=", "model", ".", "net", ".", "Clone", "(", "'conv_body_net'", ")", "\n", "", "rfcn_heads", ".", "add_rfcn_outputs", "(", "model", ",", "blob", ",", "dim", ",", "dim_reduce", ",", "spatial_scale", ")", "\n", "if", "model", ".", "train", ":", "\n", "            ", "loss_gradients", "=", "fast_rcnn_heads", ".", "add_fast_rcnn_losses", "(", "model", ")", "\n", "", "return", "loss_gradients", "if", "model", ".", "train", "else", "None", "\n", "\n", "", "optim", ".", "build_data_parallel_model", "(", "model", ",", "_single_gpu_build_func", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder.build_generic_retinanet_model": [[345, 364], ["modeling.build_data_parallel_model", "add_conv_body_func", "modeling.add_fpn_retinanet_outputs", "modeling.add_fpn_retinanet_losses"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.optimizer.build_data_parallel_model", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.retinanet_heads.add_fpn_retinanet_outputs", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.retinanet_heads.add_fpn_retinanet_losses"], ["", "def", "build_generic_retinanet_model", "(", "\n", "model", ",", "add_conv_body_func", ",", "freeze_conv_body", "=", "False", "\n", ")", ":", "\n", "# TODO(rbg): fold this function into build_generic_detection_model", "\n", "    ", "def", "_single_gpu_build_func", "(", "model", ")", ":", "\n", "        ", "\"\"\"Builds the model on a single GPU. Can be called in a loop over GPUs\n        with name and device scoping to create a data parallel model.\"\"\"", "\n", "blobs", ",", "dim", ",", "spatial_scales", "=", "add_conv_body_func", "(", "model", ")", "\n", "retinanet_heads", ".", "add_fpn_retinanet_outputs", "(", "\n", "model", ",", "blobs", ",", "dim", ",", "spatial_scales", "\n", ")", "\n", "if", "model", ".", "train", ":", "\n", "            ", "loss_gradients", "=", "retinanet_heads", ".", "add_fpn_retinanet_losses", "(", "\n", "model", "\n", ")", "\n", "", "return", "loss_gradients", "if", "model", ".", "train", "else", "None", "\n", "\n", "", "optim", ".", "build_data_parallel_model", "(", "model", ",", "_single_gpu_build_func", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder.add_training_inputs": [[370, 405], ["len", "roi_data.minibatch.get_minibatch_blob_names", "range", "model.net._net.op.extend", "roi_data.loader.RoIDataLoader", "len", "utils.NamedCudaScope", "model.net.DequeueBlobs", "caffe2.python.workspace.CreateBlob", "caffe2.python.core.ScopedName"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.minibatch.get_minibatch_blob_names", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.c2.NamedCudaScope"], ["", "def", "add_training_inputs", "(", "model", ",", "roidb", "=", "None", ")", ":", "\n", "    ", "\"\"\"Create network input ops and blobs used for training. To be called\n    *after* model_builder.create().\n    \"\"\"", "\n", "# Implementation notes:", "\n", "#   Typically, one would create the input ops and then the rest of the net.", "\n", "#   However, creating the input ops depends on loading the dataset, which", "\n", "#   can take a few minutes for COCO.", "\n", "#   We prefer to avoid waiting so debugging can fail fast.", "\n", "#   Thus, we create the net *without input ops* prior to loading the", "\n", "#   dataset, and then add the input ops after loading the dataset.", "\n", "#   Since we defer input op creation, we need to do a little bit of surgery", "\n", "#   to place the input ops at the start of the network op list.", "\n", "assert", "model", ".", "train", ",", "'Training inputs can only be added to a trainable model'", "\n", "if", "roidb", "is", "not", "None", ":", "\n", "# To make debugging easier you can set cfg.DATA_LOADER.NUM_THREADS = 1", "\n", "        ", "model", ".", "roi_data_loader", "=", "RoIDataLoader", "(", "\n", "roidb", ",", "num_loaders", "=", "cfg", ".", "DATA_LOADER", ".", "NUM_THREADS", "\n", ")", "\n", "", "orig_num_op", "=", "len", "(", "model", ".", "net", ".", "_net", ".", "op", ")", "\n", "blob_names", "=", "roi_data", ".", "minibatch", ".", "get_minibatch_blob_names", "(", "\n", "is_training", "=", "True", "\n", ")", "\n", "for", "gpu_id", "in", "range", "(", "cfg", ".", "NUM_GPUS", ")", ":", "\n", "        ", "with", "c2_utils", ".", "NamedCudaScope", "(", "gpu_id", ")", ":", "\n", "            ", "for", "blob_name", "in", "blob_names", ":", "\n", "                ", "workspace", ".", "CreateBlob", "(", "core", ".", "ScopedName", "(", "blob_name", ")", ")", "\n", "", "model", ".", "net", ".", "DequeueBlobs", "(", "\n", "model", ".", "roi_data_loader", ".", "_blobs_queue_name", ",", "blob_names", "\n", ")", "\n", "# A little op surgery to move input ops to the start of the net", "\n", "", "", "diff", "=", "len", "(", "model", ".", "net", ".", "_net", ".", "op", ")", "-", "orig_num_op", "\n", "new_op", "=", "model", ".", "net", ".", "_net", ".", "op", "[", "-", "diff", ":", "]", "+", "model", ".", "net", ".", "_net", ".", "op", "[", ":", "-", "diff", "]", "\n", "del", "model", ".", "net", ".", "_net", ".", "op", "[", ":", "]", "\n", "model", ".", "net", ".", "_net", ".", "op", ".", "extend", "(", "new_op", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder.add_inference_inputs": [[407, 421], ["model_builder.add_inference_inputs.create_input_blobs_for_net"], "function", ["None"], ["", "def", "add_inference_inputs", "(", "model", ")", ":", "\n", "    ", "\"\"\"Create network input blobs used for inference.\"\"\"", "\n", "\n", "def", "create_input_blobs_for_net", "(", "net_def", ")", ":", "\n", "        ", "for", "op", "in", "net_def", ".", "op", ":", "\n", "            ", "for", "blob_in", "in", "op", ".", "input", ":", "\n", "                ", "if", "not", "workspace", ".", "HasBlob", "(", "blob_in", ")", ":", "\n", "                    ", "workspace", ".", "CreateBlob", "(", "blob_in", ")", "\n", "\n", "", "", "", "", "create_input_blobs_for_net", "(", "model", ".", "net", ".", "Proto", "(", ")", ")", "\n", "if", "cfg", ".", "MODEL", ".", "MASK_ON", ":", "\n", "        ", "create_input_blobs_for_net", "(", "model", ".", "mask_net", ".", "Proto", "(", ")", ")", "\n", "", "if", "cfg", ".", "MODEL", ".", "KEYPOINTS_ON", ":", "\n", "        ", "create_input_blobs_for_net", "(", "model", ".", "keypoint_net", ".", "Proto", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder.fast_rcnn": [[440, 443], ["logger.warn", "model_builder.generalized_rcnn"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder.generalized_rcnn"], ["def", "fast_rcnn", "(", "model", ")", ":", "\n", "    ", "logger", ".", "warn", "(", "'Deprecated: use `MODEL.TYPE: generalized_rcnn`.'", ")", "\n", "return", "generalized_rcnn", "(", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder.mask_rcnn": [[445, 451], ["logger.warn", "model_builder.generalized_rcnn"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder.generalized_rcnn"], ["", "def", "mask_rcnn", "(", "model", ")", ":", "\n", "    ", "logger", ".", "warn", "(", "\n", "'Deprecated: use `MODEL.TYPE: generalized_rcnn` with '", "\n", "'`MODEL.MASK_ON: True`'", "\n", ")", "\n", "return", "generalized_rcnn", "(", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder.keypoint_rcnn": [[453, 459], ["logger.warn", "model_builder.generalized_rcnn"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder.generalized_rcnn"], ["", "def", "keypoint_rcnn", "(", "model", ")", ":", "\n", "    ", "logger", ".", "warn", "(", "\n", "'Deprecated: use `MODEL.TYPE: generalized_rcnn` with '", "\n", "'`MODEL.KEYPOINTS_ON: True`'", "\n", ")", "\n", "return", "generalized_rcnn", "(", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder.mask_and_keypoint_rcnn": [[461, 467], ["logger.warn", "model_builder.generalized_rcnn"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder.generalized_rcnn"], ["", "def", "mask_and_keypoint_rcnn", "(", "model", ")", ":", "\n", "    ", "logger", ".", "warn", "(", "\n", "'Deprecated: use `MODEL.TYPE: generalized_rcnn` with '", "\n", "'`MODEL.MASK_ON: True and ``MODEL.KEYPOINTS_ON: True`'", "\n", ")", "\n", "return", "generalized_rcnn", "(", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder.rpn": [[469, 475], ["logger.warn", "model_builder.generalized_rcnn"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder.generalized_rcnn"], ["", "def", "rpn", "(", "model", ")", ":", "\n", "    ", "logger", ".", "warn", "(", "\n", "'Deprecated: use `MODEL.TYPE: generalized_rcnn` with '", "\n", "'`MODEL.RPN_ONLY: True`'", "\n", ")", "\n", "return", "generalized_rcnn", "(", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder.fpn_rpn": [[477, 483], ["logger.warn", "model_builder.generalized_rcnn"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder.generalized_rcnn"], ["", "def", "fpn_rpn", "(", "model", ")", ":", "\n", "    ", "logger", ".", "warn", "(", "\n", "'Deprecated: use `MODEL.TYPE: generalized_rcnn` with '", "\n", "'`MODEL.RPN_ONLY: True` and FPN enabled via configs'", "\n", ")", "\n", "return", "generalized_rcnn", "(", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder.faster_rcnn": [[485, 491], ["logger.warn", "model_builder.generalized_rcnn"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder.generalized_rcnn"], ["", "def", "faster_rcnn", "(", "model", ")", ":", "\n", "    ", "logger", ".", "warn", "(", "\n", "'Deprecated: use `MODEL.TYPE: generalized_rcnn` with '", "\n", "'`MODEL.FASTER_RCNN: True`'", "\n", ")", "\n", "return", "generalized_rcnn", "(", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder.fast_rcnn_frozen_features": [[493, 500], ["logger.warn", "model_builder.build_generic_detection_model", "model_builder.get_func", "model_builder.get_func"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder.build_generic_detection_model", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder.get_func", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder.get_func"], ["", "def", "fast_rcnn_frozen_features", "(", "model", ")", ":", "\n", "    ", "logger", ".", "warn", "(", "'Deprecated: use `TRAIN.FREEZE_CONV_BODY: True` instead'", ")", "\n", "return", "build_generic_detection_model", "(", "\n", "model", ",", "\n", "get_func", "(", "cfg", ".", "MODEL", ".", "CONV_BODY", ")", ",", "\n", "add_roi_box_head_func", "=", "get_func", "(", "cfg", ".", "FAST_RCNN", ".", "ROI_BOX_HEAD", ")", ",", "\n", "freeze_conv_body", "=", "True", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder.rpn_frozen_features": [[503, 507], ["logger.warn", "model_builder.build_generic_detection_model", "model_builder.get_func"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder.build_generic_detection_model", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder.get_func"], ["", "def", "rpn_frozen_features", "(", "model", ")", ":", "\n", "    ", "logger", ".", "warn", "(", "'Deprecated: use `TRAIN.FREEZE_CONV_BODY: True` instead'", ")", "\n", "return", "build_generic_detection_model", "(", "\n", "model", ",", "get_func", "(", "cfg", ".", "MODEL", ".", "CONV_BODY", ")", ",", "freeze_conv_body", "=", "True", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder.fpn_rpn_frozen_features": [[510, 514], ["logger.warn", "model_builder.build_generic_detection_model", "model_builder.get_func"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder.build_generic_detection_model", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder.get_func"], ["", "def", "fpn_rpn_frozen_features", "(", "model", ")", ":", "\n", "    ", "logger", ".", "warn", "(", "'Deprecated: use `TRAIN.FREEZE_CONV_BODY: True` instead'", ")", "\n", "return", "build_generic_detection_model", "(", "\n", "model", ",", "get_func", "(", "cfg", ".", "MODEL", ".", "CONV_BODY", ")", ",", "freeze_conv_body", "=", "True", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder.mask_rcnn_frozen_features": [[517, 525], ["logger.warn", "model_builder.build_generic_detection_model", "model_builder.get_func", "model_builder.get_func", "model_builder.get_func"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder.build_generic_detection_model", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder.get_func", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder.get_func", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder.get_func"], ["", "def", "mask_rcnn_frozen_features", "(", "model", ")", ":", "\n", "    ", "logger", ".", "warn", "(", "'Deprecated: use `TRAIN.FREEZE_CONV_BODY: True` instead'", ")", "\n", "return", "build_generic_detection_model", "(", "\n", "model", ",", "\n", "get_func", "(", "cfg", ".", "MODEL", ".", "CONV_BODY", ")", ",", "\n", "add_roi_box_head_func", "=", "get_func", "(", "cfg", ".", "FAST_RCNN", ".", "ROI_BOX_HEAD", ")", ",", "\n", "add_roi_mask_head_func", "=", "get_func", "(", "cfg", ".", "MRCNN", ".", "ROI_MASK_HEAD", ")", ",", "\n", "freeze_conv_body", "=", "True", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder.keypoint_rcnn_frozen_features": [[528, 536], ["logger.warn", "model_builder.build_generic_detection_model", "model_builder.get_func", "model_builder.get_func", "model_builder.get_func"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder.build_generic_detection_model", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder.get_func", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder.get_func", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder.get_func"], ["", "def", "keypoint_rcnn_frozen_features", "(", "model", ")", ":", "\n", "    ", "logger", ".", "warn", "(", "'Deprecated: use `TRAIN.FREEZE_CONV_BODY: True` instead'", ")", "\n", "return", "build_generic_detection_model", "(", "\n", "model", ",", "\n", "get_func", "(", "cfg", ".", "MODEL", ".", "CONV_BODY", ")", ",", "\n", "add_roi_box_head_func", "=", "get_func", "(", "cfg", ".", "FAST_RCNN", ".", "ROI_BOX_HEAD", ")", ",", "\n", "add_roi_keypoint_head_func", "=", "get_func", "(", "cfg", ".", "KRCNN", ".", "ROI_KEYPOINTS_HEAD", ")", ",", "\n", "freeze_conv_body", "=", "True", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder.VGG_CNN_M_1024_fast_rcnn": [[544, 548], ["model_builder.build_generic_detection_model"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder.build_generic_detection_model"], ["", "def", "VGG_CNN_M_1024_fast_rcnn", "(", "model", ")", ":", "\n", "    ", "return", "build_generic_detection_model", "(", "\n", "model", ",", "VGG_CNN_M_1024", ".", "add_VGG_CNN_M_1024_conv5_body", ",", "\n", "VGG_CNN_M_1024", ".", "add_VGG_CNN_M_1024_roi_fc_head", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder.VGG16_fast_rcnn": [[551, 554], ["model_builder.build_generic_detection_model"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder.build_generic_detection_model"], ["", "def", "VGG16_fast_rcnn", "(", "model", ")", ":", "\n", "    ", "return", "build_generic_detection_model", "(", "\n", "model", ",", "VGG16", ".", "add_VGG16_conv5_body", ",", "VGG16", ".", "add_VGG16_roi_fc_head", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder.ResNet50_fast_rcnn": [[557, 560], ["model_builder.build_generic_detection_model"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder.build_generic_detection_model"], ["", "def", "ResNet50_fast_rcnn", "(", "model", ")", ":", "\n", "    ", "return", "build_generic_detection_model", "(", "\n", "model", ",", "ResNet", ".", "add_ResNet50_conv4_body", ",", "ResNet", ".", "add_ResNet_roi_conv5_head", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder.ResNet101_fast_rcnn": [[563, 566], ["model_builder.build_generic_detection_model"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder.build_generic_detection_model"], ["", "def", "ResNet101_fast_rcnn", "(", "model", ")", ":", "\n", "    ", "return", "build_generic_detection_model", "(", "\n", "model", ",", "ResNet", ".", "add_ResNet101_conv4_body", ",", "ResNet", ".", "add_ResNet_roi_conv5_head", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder.ResNet50_fast_rcnn_frozen_features": [[569, 575], ["model_builder.build_generic_detection_model"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder.build_generic_detection_model"], ["", "def", "ResNet50_fast_rcnn_frozen_features", "(", "model", ")", ":", "\n", "    ", "return", "build_generic_detection_model", "(", "\n", "model", ",", "\n", "ResNet", ".", "add_ResNet50_conv4_body", ",", "\n", "ResNet", ".", "add_ResNet_roi_conv5_head", ",", "\n", "freeze_conv_body", "=", "True", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder.ResNet101_fast_rcnn_frozen_features": [[578, 584], ["model_builder.build_generic_detection_model"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder.build_generic_detection_model"], ["", "def", "ResNet101_fast_rcnn_frozen_features", "(", "model", ")", ":", "\n", "    ", "return", "build_generic_detection_model", "(", "\n", "model", ",", "\n", "ResNet", ".", "add_ResNet101_conv4_body", ",", "\n", "ResNet", ".", "add_ResNet_roi_conv5_head", ",", "\n", "freeze_conv_body", "=", "True", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder.VGG_CNN_M_1024_rpn": [[592, 595], ["model_builder.build_generic_detection_model"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder.build_generic_detection_model"], ["", "def", "VGG_CNN_M_1024_rpn", "(", "model", ")", ":", "\n", "    ", "return", "build_generic_detection_model", "(", "\n", "model", ",", "VGG_CNN_M_1024", ".", "add_VGG_CNN_M_1024_conv5_body", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder.VGG16_rpn": [[598, 600], ["model_builder.build_generic_detection_model"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder.build_generic_detection_model"], ["", "def", "VGG16_rpn", "(", "model", ")", ":", "\n", "    ", "return", "build_generic_detection_model", "(", "model", ",", "VGG16", ".", "add_VGG16_conv5_body", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder.ResNet50_rpn_conv4": [[602, 604], ["model_builder.build_generic_detection_model"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder.build_generic_detection_model"], ["", "def", "ResNet50_rpn_conv4", "(", "model", ")", ":", "\n", "    ", "return", "build_generic_detection_model", "(", "model", ",", "ResNet", ".", "add_ResNet50_conv4_body", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder.ResNet101_rpn_conv4": [[606, 608], ["model_builder.build_generic_detection_model"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder.build_generic_detection_model"], ["", "def", "ResNet101_rpn_conv4", "(", "model", ")", ":", "\n", "    ", "return", "build_generic_detection_model", "(", "model", ",", "ResNet", ".", "add_ResNet101_conv4_body", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder.VGG_CNN_M_1024_rpn_frozen_features": [[610, 615], ["model_builder.build_generic_detection_model"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder.build_generic_detection_model"], ["", "def", "VGG_CNN_M_1024_rpn_frozen_features", "(", "model", ")", ":", "\n", "    ", "return", "build_generic_detection_model", "(", "\n", "model", ",", "\n", "VGG_CNN_M_1024", ".", "add_VGG_CNN_M_1024_conv5_body", ",", "\n", "freeze_conv_body", "=", "True", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder.VGG16_rpn_frozen_features": [[618, 621], ["model_builder.build_generic_detection_model"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder.build_generic_detection_model"], ["", "def", "VGG16_rpn_frozen_features", "(", "model", ")", ":", "\n", "    ", "return", "build_generic_detection_model", "(", "\n", "model", ",", "VGG16", ".", "add_VGG16_conv5_body", ",", "freeze_conv_body", "=", "True", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder.ResNet50_rpn_conv4_frozen_features": [[624, 627], ["model_builder.build_generic_detection_model"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder.build_generic_detection_model"], ["", "def", "ResNet50_rpn_conv4_frozen_features", "(", "model", ")", ":", "\n", "    ", "return", "build_generic_detection_model", "(", "\n", "model", ",", "ResNet", ".", "add_ResNet50_conv4_body", ",", "freeze_conv_body", "=", "True", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder.ResNet101_rpn_conv4_frozen_features": [[630, 633], ["model_builder.build_generic_detection_model"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder.build_generic_detection_model"], ["", "def", "ResNet101_rpn_conv4_frozen_features", "(", "model", ")", ":", "\n", "    ", "return", "build_generic_detection_model", "(", "\n", "model", ",", "ResNet", ".", "add_ResNet101_conv4_body", ",", "freeze_conv_body", "=", "True", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder.VGG16_faster_rcnn": [[641, 645], ["model_builder.build_generic_detection_model"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder.build_generic_detection_model"], ["", "def", "VGG16_faster_rcnn", "(", "model", ")", ":", "\n", "    ", "assert", "cfg", ".", "MODEL", ".", "FASTER_RCNN", "\n", "return", "build_generic_detection_model", "(", "\n", "model", ",", "VGG16", ".", "add_VGG16_conv5_body", ",", "VGG16", ".", "add_VGG16_roi_fc_head", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder.ResNet50_faster_rcnn": [[648, 652], ["model_builder.build_generic_detection_model"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder.build_generic_detection_model"], ["", "def", "ResNet50_faster_rcnn", "(", "model", ")", ":", "\n", "    ", "assert", "cfg", ".", "MODEL", ".", "FASTER_RCNN", "\n", "return", "build_generic_detection_model", "(", "\n", "model", ",", "ResNet", ".", "add_ResNet50_conv4_body", ",", "ResNet", ".", "add_ResNet_roi_conv5_head", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder.ResNet101_faster_rcnn": [[655, 659], ["model_builder.build_generic_detection_model"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder.build_generic_detection_model"], ["", "def", "ResNet101_faster_rcnn", "(", "model", ")", ":", "\n", "    ", "assert", "cfg", ".", "MODEL", ".", "FASTER_RCNN", "\n", "return", "build_generic_detection_model", "(", "\n", "model", ",", "ResNet", ".", "add_ResNet101_conv4_body", ",", "ResNet", ".", "add_ResNet_roi_conv5_head", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder.ResNet50_rfcn": [[667, 670], ["model_builder.build_generic_rfcn_model"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder.build_generic_rfcn_model"], ["", "def", "ResNet50_rfcn", "(", "model", ")", ":", "\n", "    ", "return", "build_generic_rfcn_model", "(", "\n", "model", ",", "ResNet", ".", "add_ResNet50_conv5_body", ",", "dim_reduce", "=", "1024", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder.ResNet101_rfcn": [[673, 676], ["model_builder.build_generic_rfcn_model"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder.build_generic_rfcn_model"], ["", "def", "ResNet101_rfcn", "(", "model", ")", ":", "\n", "    ", "return", "build_generic_rfcn_model", "(", "\n", "model", ",", "ResNet", ".", "add_ResNet101_conv5_body", ",", "dim_reduce", "=", "1024", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.detector.DetectionModelHelper.__init__": [[49, 71], ["kwargs.get", "kwargs.get", "caffe2.python.cnn.CNNModelHelper.__init__", "detector.DetectionModelHelper.net.Proto", "detector.DetectionModelHelper.net.Proto"], "methods", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.scripts.run_main.FolderProcessing.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "# Handle args specific to the DetectionModelHelper, others pass through", "\n", "# to CNNModelHelper", "\n", "        ", "self", ".", "train", "=", "kwargs", ".", "get", "(", "'train'", ",", "False", ")", "\n", "self", ".", "num_classes", "=", "kwargs", ".", "get", "(", "'num_classes'", ",", "-", "1", ")", "\n", "assert", "self", ".", "num_classes", ">", "0", ",", "'num_classes must be > 0'", "\n", "for", "k", "in", "(", "'train'", ",", "'num_classes'", ")", ":", "\n", "            ", "if", "k", "in", "kwargs", ":", "\n", "                ", "del", "kwargs", "[", "k", "]", "\n", "", "", "kwargs", "[", "'order'", "]", "=", "'NCHW'", "\n", "# Defensively set cudnn_exhaustive_search to False in case the default", "\n", "# changes in CNNModelHelper. The detection code uses variable size", "\n", "# inputs that might not play nicely with cudnn_exhaustive_search.", "\n", "kwargs", "[", "'cudnn_exhaustive_search'", "]", "=", "False", "\n", "super", "(", "DetectionModelHelper", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "roi_data_loader", "=", "None", "\n", "self", ".", "losses", "=", "[", "]", "\n", "self", ".", "metrics", "=", "[", "]", "\n", "self", ".", "do_not_update_params", "=", "[", "]", "# Param on this list are not updated", "\n", "self", ".", "net", ".", "Proto", "(", ")", ".", "type", "=", "cfg", ".", "MODEL", ".", "EXECUTION_TYPE", "\n", "self", ".", "net", ".", "Proto", "(", ")", ".", "num_workers", "=", "cfg", ".", "NUM_GPUS", "*", "4", "\n", "self", ".", "prev_use_cudnn", "=", "self", ".", "use_cudnn", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.detector.DetectionModelHelper.TrainableParams": [[72, 83], ["str().find", "str"], "methods", ["None"], ["", "def", "TrainableParams", "(", "self", ",", "gpu_id", "=", "-", "1", ")", ":", "\n", "        ", "\"\"\"Get the blob names for all trainable parameters, possibly filtered by\n        GPU id.\n        \"\"\"", "\n", "return", "[", "\n", "p", "for", "p", "in", "self", ".", "params", "\n", "if", "(", "\n", "p", "in", "self", ".", "param_to_grad", "and", "# p has a gradient", "\n", "p", "not", "in", "self", ".", "do_not_update_params", "and", "# not on the blacklist", "\n", "(", "gpu_id", "==", "-", "1", "or", "# filter for gpu assignment, if gpu_id set", "\n", "str", "(", "p", ")", ".", "find", "(", "'gpu_{}'", ".", "format", "(", "gpu_id", ")", ")", "==", "0", ")", "\n", ")", "]", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.detector.DetectionModelHelper.AffineChannel": [[85, 109], ["caffe2.python.core.ScopedBlobReference", "caffe2.python.core.ScopedBlobReference", "detector.DetectionModelHelper.net.NextName", "detector.DetectionModelHelper.net.Proto().external_input.extend", "detector.DetectionModelHelper.params.extend", "detector.DetectionModelHelper.weights.append", "detector.DetectionModelHelper.biases.append", "detector.DetectionModelHelper.net.AffineChannel", "detector.DetectionModelHelper.net.AffineChannel", "str", "str", "detector.DetectionModelHelper.net.Proto"], "methods", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.detector.DetectionModelHelper.AffineChannel", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.detector.DetectionModelHelper.AffineChannel"], ["", "def", "AffineChannel", "(", "self", ",", "blob_in", ",", "blob_out", ",", "share_with", "=", "None", ",", "inplace", "=", "False", ")", ":", "\n", "        ", "\"\"\"Affine transformation to replace BN in networks where BN cannot be\n        used (e.g., because the minibatch size is too small).\n\n        The AffineChannel parameters may be shared with another AffineChannelOp\n        by specifying its blob name (excluding the '_{s,b}' suffix) in the\n        share_with argument. The operations can be done in place to save memory.\n        \"\"\"", "\n", "blob_out", "=", "blob_out", "or", "self", ".", "net", ".", "NextName", "(", ")", "\n", "is_not_sharing", "=", "share_with", "is", "None", "\n", "param_prefix", "=", "blob_out", "if", "is_not_sharing", "else", "share_with", "\n", "scale", "=", "core", ".", "ScopedBlobReference", "(", "\n", "param_prefix", "+", "'_s'", ",", "self", ".", "param_init_net", ")", "\n", "bias", "=", "core", ".", "ScopedBlobReference", "(", "\n", "param_prefix", "+", "'_b'", ",", "self", ".", "param_init_net", ")", "\n", "if", "is_not_sharing", ":", "\n", "            ", "self", ".", "net", ".", "Proto", "(", ")", ".", "external_input", ".", "extend", "(", "[", "str", "(", "scale", ")", ",", "str", "(", "bias", ")", "]", ")", "\n", "self", ".", "params", ".", "extend", "(", "[", "scale", ",", "bias", "]", ")", "\n", "self", ".", "weights", ".", "append", "(", "scale", ")", "\n", "self", ".", "biases", ".", "append", "(", "bias", ")", "\n", "", "if", "inplace", ":", "\n", "            ", "return", "self", ".", "net", ".", "AffineChannel", "(", "[", "blob_in", ",", "scale", ",", "bias", "]", ",", "blob_in", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "net", ".", "AffineChannel", "(", "[", "blob_in", ",", "scale", ",", "bias", "]", ",", "blob_out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.detector.DetectionModelHelper.GenerateProposals": [[110, 141], ["detector.DetectionModelHelper.net.Python", "str", "ops.generate_proposals.GenerateProposalsOp"], "methods", ["None"], ["", "", "def", "GenerateProposals", "(", "self", ",", "blobs_in", ",", "blobs_out", ",", "anchors", ",", "spatial_scale", ")", ":", "\n", "        ", "\"\"\"Op for generating RPN porposals.\n\n        blobs_in:\n          - 'rpn_cls_probs': 4D tensor of shape (N, A, H, W), where N is the\n            number of minibatch images, A is the number of anchors per\n            locations, and (H, W) is the spatial size of the prediction grid.\n            Each value represents a \"probability of object\" rating in [0, 1].\n          - 'rpn_bbox_pred': 4D tensor of shape (N, 4 * A, H, W) of predicted\n            deltas for transformation anchor boxes into RPN proposals.\n          - 'im_info': 2D tensor of shape (N, 3) where the three columns encode\n            the input image's [height, width, scale]. Height and width are\n            for the input to the network, not the original image; scale is the\n            scale factor used to scale the original image to the network input\n            size.\n\n        blobs_out:\n          - 'rpn_rois': 2D tensor of shape (R, 5), for R RPN proposals where the\n            five columns encode [batch ind, x1, y1, x2, y2]. The boxes are\n            w.r.t. the network input, which is a *scaled* version of the\n            original image; these proposals must be scaled by 1 / scale (where\n            scale comes from im_info; see above) to transform it back to the\n            original input image coordinate system.\n          - 'rpn_roi_probs': 1D tensor of objectness probability scores\n            (extracted from rpn_cls_probs; see above).\n        \"\"\"", "\n", "name", "=", "'GenerateProposalsOp:'", "+", "','", ".", "join", "(", "[", "str", "(", "b", ")", "for", "b", "in", "blobs_in", "]", ")", "\n", "self", ".", "net", ".", "Python", "(", "\n", "GenerateProposalsOp", "(", "anchors", ",", "spatial_scale", ",", "self", ".", "train", ")", ".", "forward", "\n", ")", "(", "blobs_in", ",", "blobs_out", ",", "name", "=", "name", ")", "\n", "return", "blobs_out", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.detector.DetectionModelHelper.GenerateProposalLabels": [[142, 173], ["roi_data.fast_rcnn.get_fast_rcnn_blob_names", "caffe2.python.core.ScopedBlobReference", "detector.DetectionModelHelper.net.Python", "str", "ops.generate_proposal_labels.GenerateProposalLabelsOp"], "methods", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.fast_rcnn.get_fast_rcnn_blob_names"], ["", "def", "GenerateProposalLabels", "(", "self", ",", "blobs_in", ",", "ohem", "=", "False", ")", ":", "\n", "        ", "\"\"\"Op for generating training labels for RPN proposals. This is used\n        when training RPN jointly with Fast/Mask R-CNN (as in end-to-end\n        Faster R-CNN training).\n\n        blobs_in:\n          - 'rpn_rois': 2D tensor of RPN proposals output by GenerateProposals\n          - 'roidb': roidb entries that will be labeled\n          - 'im_info': See GenerateProposals doc.\n\n        blobs_out:\n          - (variable set of blobs): returns whatever blobs are required for\n            training the model. It does this by querying the data loader for\n            the list of blobs that are needed.\n        \"\"\"", "\n", "name", "=", "'GenerateProposalLabelsOp:'", "+", "','", ".", "join", "(", "\n", "[", "str", "(", "b", ")", "for", "b", "in", "blobs_in", "]", "\n", ")", "\n", "\n", "# The list of blobs is not known before run-time because it depends on", "\n", "# the specific model being trained. Query the data loader to get the", "\n", "# list of output blob names.", "\n", "blobs_out", "=", "roi_data", ".", "fast_rcnn", ".", "get_fast_rcnn_blob_names", "(", "\n", "is_training", "=", "self", ".", "train", ",", "ohem", "=", "ohem", "\n", ")", "\n", "blobs_out", "=", "[", "core", ".", "ScopedBlobReference", "(", "b", ")", "for", "b", "in", "blobs_out", "]", "\n", "\n", "self", ".", "net", ".", "Python", "(", "GenerateProposalLabelsOp", "(", "ohem", "=", "ohem", ")", ".", "forward", ")", "(", "\n", "blobs_in", ",", "blobs_out", ",", "name", "=", "name", "\n", ")", "\n", "return", "blobs_out", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.detector.DetectionModelHelper.GenerateHardProposalLabels": [[174, 213], ["roi_data.fast_rcnn.get_fast_rcnn_blob_names", "roi_data.fast_rcnn.get_fast_rcnn_blob_names", "caffe2.python.core.ScopedBlobReference", "detector.DetectionModelHelper.net.Python", "str", "ops.generate_proposal_labels.GenerateHardProposalLabelsOp"], "methods", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.fast_rcnn.get_fast_rcnn_blob_names", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.fast_rcnn.get_fast_rcnn_blob_names"], ["", "def", "GenerateHardProposalLabels", "(", "self", ",", "blobs_in", ")", ":", "\n", "        ", "\"\"\"Op for generating training labels for RPN proposals. This is used\n        when training RPN jointly with Fast/Mask R-CNN (as in end-to-end\n        Faster R-CNN training).\n\n        blobs_in:\n          - 'ohem_rois'\n          - 'ohem_cls_score': 2D tensor for classification loss of all proposals\n          - (variable set of blobs): blobs from GenerateProposalLabels are\n            inputted here and filtered base on classi\n\n        blobs_out:\n          - (variable set of blobs): returns whatever blobs are required for\n            training the model. It does this by querying the data loader for\n            the list of blobs that are needed.\n        \"\"\"", "\n", "\n", "# This list of input blobs depends on list of output blobs for", "\n", "# GenerateProposalLabels + 'ohem_loss_cls' (from blobs_in)", "\n", "blobs_in", "=", "blobs_in", "+", "roi_data", ".", "fast_rcnn", ".", "get_fast_rcnn_blob_names", "(", "\n", "is_training", "=", "self", ".", "train", ",", "ohem", "=", "True", "\n", ")", "\n", "\n", "name", "=", "'GenerateHardProposalLabelsOp:'", "+", "','", ".", "join", "(", "\n", "[", "str", "(", "b", ")", "for", "b", "in", "blobs_in", "]", "\n", ")", "\n", "\n", "# The list of blobs is not known before run-time because it depends on", "\n", "# the specific model being trained. Query the data loader to get the", "\n", "# list of output blob names.", "\n", "blobs_out", "=", "roi_data", ".", "fast_rcnn", ".", "get_fast_rcnn_blob_names", "(", "\n", "is_training", "=", "self", ".", "train", "\n", ")", "\n", "blobs_out", "=", "[", "core", ".", "ScopedBlobReference", "(", "b", ")", "for", "b", "in", "blobs_out", "]", "\n", "\n", "self", ".", "net", ".", "Python", "(", "GenerateHardProposalLabelsOp", "(", ")", ".", "forward", ")", "(", "\n", "blobs_in", ",", "blobs_out", ",", "name", "=", "name", "\n", ")", "\n", "return", "blobs_out", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.detector.DetectionModelHelper.CollectAndDistributeFpnRpnProposals": [[214, 269], ["roi_data.fast_rcnn.get_fast_rcnn_blob_names", "caffe2.python.core.ScopedBlobReference", "caffe2.python.core.ScopedBlobReference", "detector.DetectionModelHelper.net.Python", "str", "range", "str", "range", "str", "ops.collect_and_distribute_fpn_rpn_proposals.CollectAndDistributeFpnRpnProposalsOp"], "methods", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.fast_rcnn.get_fast_rcnn_blob_names"], ["", "def", "CollectAndDistributeFpnRpnProposals", "(", "self", ",", "ohem", "=", "False", ")", ":", "\n", "        ", "\"\"\"Merge RPN proposals generated at multiple FPN levels and then\n        distribute those proposals to their appropriate FPN levels. An anchor\n        at one FPN level may predict an RoI that will map to another level,\n        hence the need to redistribute the proposals.\n\n        This function assumes standard blob names for input and output blobs.\n\n        Input blobs: [rpn_rois_fpn<min>, ..., rpn_rois_fpn<max>,\n                      rpn_roi_probs_fpn<min>, ..., rpn_roi_probs_fpn<max>]\n          - rpn_rois_fpn<i> are the RPN proposals for FPN level i; see rpn_rois\n            documentation from GenerateProposals.\n          - rpn_roi_probs_fpn<i> are the RPN objectness probabilities for FPN\n            level i; see rpn_roi_probs documentation from GenerateProposals.\n\n        If used during training, then the input blobs will also include:\n          [roidb, im_info] (see GenerateProposalLabels).\n\n        Output blobs: [rois_fpn<min>, ..., rois_rpn<max>, rois,\n                       rois_idx_restore]\n          - rois_fpn<i> are the RPN proposals for FPN level i\n          - rois_idx_restore is a permutation on the concatenation of all\n            rois_fpn<i>, i=min...max, such that when applied the RPN RoIs are\n            restored to their original order in the input blobs.\n\n        If used during training, then the output blobs will also include:\n          [labels, bbox_targets, bbox_inside_weights, bbox_outside_weights].\n        \"\"\"", "\n", "k_max", "=", "cfg", ".", "FPN", ".", "RPN_MAX_LEVEL", "\n", "k_min", "=", "cfg", ".", "FPN", ".", "RPN_MIN_LEVEL", "\n", "\n", "# Prepare input blobs", "\n", "rois_names", "=", "[", "'rpn_rois_fpn'", "+", "str", "(", "l", ")", "for", "l", "in", "range", "(", "k_min", ",", "k_max", "+", "1", ")", "]", "\n", "score_names", "=", "[", "\n", "'rpn_roi_probs_fpn'", "+", "str", "(", "l", ")", "for", "l", "in", "range", "(", "k_min", ",", "k_max", "+", "1", ")", "\n", "]", "\n", "blobs_in", "=", "rois_names", "+", "score_names", "\n", "if", "self", ".", "train", ":", "\n", "            ", "blobs_in", "+=", "[", "'roidb'", ",", "'im_info'", "]", "\n", "", "blobs_in", "=", "[", "core", ".", "ScopedBlobReference", "(", "b", ")", "for", "b", "in", "blobs_in", "]", "\n", "name", "=", "'CollectAndDistributeFpnRpnProposalsOp:'", "+", "','", ".", "join", "(", "\n", "[", "str", "(", "b", ")", "for", "b", "in", "blobs_in", "]", "\n", ")", "\n", "\n", "# Prepare output blobs", "\n", "blobs_out", "=", "roi_data", ".", "fast_rcnn", ".", "get_fast_rcnn_blob_names", "(", "\n", "is_training", "=", "self", ".", "train", ",", "ohem", "=", "ohem", "\n", ")", "\n", "blobs_out", "=", "[", "core", ".", "ScopedBlobReference", "(", "b", ")", "for", "b", "in", "blobs_out", "]", "\n", "\n", "outputs", "=", "self", ".", "net", ".", "Python", "(", "\n", "CollectAndDistributeFpnRpnProposalsOp", "(", "self", ".", "train", ",", "ohem", "=", "ohem", ")", ".", "forward", "\n", ")", "(", "blobs_in", ",", "blobs_out", ",", "name", "=", "name", ")", "\n", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.detector.DetectionModelHelper.DropoutIfTraining": [[270, 279], ["detector.DetectionModelHelper.Dropout"], "methods", ["None"], ["", "def", "DropoutIfTraining", "(", "self", ",", "blob_in", ",", "dropout_rate", ")", ":", "\n", "        ", "\"\"\"Add dropout to blob_in if the model is in training mode and\n        dropout_rate is > 0.\"\"\"", "\n", "blob_out", "=", "blob_in", "\n", "if", "self", ".", "train", "and", "dropout_rate", ">", "0", ":", "\n", "            ", "blob_out", "=", "self", ".", "Dropout", "(", "\n", "blob_in", ",", "blob_in", ",", "ratio", "=", "dropout_rate", ",", "is_test", "=", "False", "\n", ")", "\n", "", "return", "blob_out", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.detector.DetectionModelHelper.RoIFeatureTransform": [[280, 344], ["isinstance", "range", "detector.DetectionModelHelper.net.Concat", "detector.DetectionModelHelper.net.BatchPermutation", "len", "bl_out_list.append", "detector.DetectionModelHelper.net.__getattr__", "str", "str", "detector.DetectionModelHelper.net.__getattr__"], "methods", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.collections.AttrDict.__getattr__", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.collections.AttrDict.__getattr__"], ["", "def", "RoIFeatureTransform", "(", "\n", "self", ",", "\n", "blobs_in", ",", "\n", "blob_out", ",", "\n", "blob_rois", "=", "'rois'", ",", "\n", "method", "=", "'RoIPoolF'", ",", "\n", "resolution", "=", "7", ",", "\n", "spatial_scale", "=", "1.", "/", "16.", ",", "\n", "sampling_ratio", "=", "0", "\n", ")", ":", "\n", "        ", "\"\"\"Add the specified RoI pooling method. The sampling_ratio argument\n        is supported for some, but not all, RoI transform methods.\n\n        RoIFeatureTransform abstracts away:\n          - Use of FPN or not\n          - Specifics of the transform method\n        \"\"\"", "\n", "assert", "method", "in", "{", "'RoIPoolF'", ",", "'RoIAlign'", "}", ",", "'Unknown pooling method: {}'", ".", "format", "(", "method", ")", "\n", "has_argmax", "=", "(", "method", "==", "'RoIPoolF'", ")", "\n", "if", "isinstance", "(", "blobs_in", ",", "list", ")", ":", "\n", "# FPN case: add RoIFeatureTransform to each FPN level", "\n", "            ", "k_max", "=", "cfg", ".", "FPN", ".", "ROI_MAX_LEVEL", "# coarsest level of pyramid", "\n", "k_min", "=", "cfg", ".", "FPN", ".", "ROI_MIN_LEVEL", "# finest level of pyramid", "\n", "assert", "len", "(", "blobs_in", ")", "==", "k_max", "-", "k_min", "+", "1", "\n", "bl_out_list", "=", "[", "]", "\n", "for", "lvl", "in", "range", "(", "k_min", ",", "k_max", "+", "1", ")", ":", "\n", "                ", "bl_in", "=", "blobs_in", "[", "k_max", "-", "lvl", "]", "# blobs_in is in reversed order", "\n", "sc", "=", "spatial_scale", "[", "k_max", "-", "lvl", "]", "# in reversed order", "\n", "bl_rois", "=", "blob_rois", "+", "'_fpn'", "+", "str", "(", "lvl", ")", "\n", "bl_out", "=", "blob_out", "+", "'_fpn'", "+", "str", "(", "lvl", ")", "\n", "bl_out_list", ".", "append", "(", "bl_out", ")", "\n", "bl_argmax", "=", "[", "'_argmax_'", "+", "bl_out", "]", "if", "has_argmax", "else", "[", "]", "\n", "self", ".", "net", ".", "__getattr__", "(", "method", ")", "(", "\n", "[", "bl_in", ",", "bl_rois", "]", ",", "[", "bl_out", "]", "+", "bl_argmax", ",", "\n", "pooled_w", "=", "resolution", ",", "\n", "pooled_h", "=", "resolution", ",", "\n", "spatial_scale", "=", "sc", ",", "\n", "sampling_ratio", "=", "sampling_ratio", "\n", ")", "\n", "# The pooled features from all levels are concatenated along the", "\n", "# batch dimension into a single 4D tensor.", "\n", "", "xform_shuffled", ",", "_", "=", "self", ".", "net", ".", "Concat", "(", "\n", "bl_out_list", ",", "[", "blob_out", "+", "'_shuffled'", ",", "'_concat_'", "+", "blob_out", "]", ",", "\n", "axis", "=", "0", "\n", ")", "\n", "# Unshuffle to match rois from dataloader", "\n", "restore_bl", "=", "blob_rois", "+", "'_idx_restore_int32'", "\n", "xform_out", "=", "self", ".", "net", ".", "BatchPermutation", "(", "\n", "[", "xform_shuffled", ",", "restore_bl", "]", ",", "blob_out", "\n", ")", "\n", "", "else", ":", "\n", "# Single feature level", "\n", "            ", "bl_argmax", "=", "[", "'_argmax_'", "+", "blob_out", "]", "if", "has_argmax", "else", "[", "]", "\n", "# sampling_ratio is ignored for RoIPoolF", "\n", "xform_out", "=", "self", ".", "net", ".", "__getattr__", "(", "method", ")", "(", "\n", "[", "blobs_in", ",", "blob_rois", "]", ",", "[", "blob_out", "]", "+", "bl_argmax", ",", "\n", "pooled_w", "=", "resolution", ",", "\n", "pooled_h", "=", "resolution", ",", "\n", "spatial_scale", "=", "spatial_scale", ",", "\n", "sampling_ratio", "=", "sampling_ratio", "\n", ")", "\n", "# Only return the first blob (the transformed features)", "\n", "", "return", "xform_out", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.detector.DetectionModelHelper.ConvShared": [[345, 378], ["detector.DetectionModelHelper.net.Conv"], "methods", ["None"], ["", "def", "ConvShared", "(", "\n", "self", ",", "\n", "blob_in", ",", "\n", "blob_out", ",", "\n", "dim_in", ",", "\n", "dim_out", ",", "\n", "kernel", ",", "\n", "weight", "=", "None", ",", "\n", "bias", "=", "None", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "\"\"\"Add conv op that shares weights and/or biases with another conv op.\n        \"\"\"", "\n", "use_bias", "=", "(", "\n", "False", "if", "(", "'no_bias'", "in", "kwargs", "and", "kwargs", "[", "'no_bias'", "]", ")", "else", "True", "\n", ")", "\n", "\n", "if", "self", ".", "use_cudnn", ":", "\n", "            ", "kwargs", "[", "'engine'", "]", "=", "'CUDNN'", "\n", "kwargs", "[", "'exhaustive_search'", "]", "=", "self", ".", "cudnn_exhaustive_search", "\n", "if", "self", ".", "ws_nbytes_limit", ":", "\n", "                ", "kwargs", "[", "'ws_nbytes_limit'", "]", "=", "self", ".", "ws_nbytes_limit", "\n", "\n", "", "", "if", "use_bias", ":", "\n", "            ", "blobs_in", "=", "[", "blob_in", ",", "weight", ",", "bias", "]", "\n", "", "else", ":", "\n", "            ", "blobs_in", "=", "[", "blob_in", ",", "weight", "]", "\n", "\n", "", "if", "'no_bias'", "in", "kwargs", ":", "\n", "            ", "del", "kwargs", "[", "'no_bias'", "]", "\n", "\n", "", "return", "self", ".", "net", ".", "Conv", "(", "\n", "blobs_in", ",", "blob_out", ",", "kernel", "=", "kernel", ",", "order", "=", "self", ".", "order", ",", "**", "kwargs", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.detector.DetectionModelHelper.FCShared": [[380, 421], ["caffe2.python.modeling.initializers.update_initializer", "caffe2.python.modeling.initializers.update_initializer", "detector.DetectionModelHelper.create_param", "detector.DetectionModelHelper.create_param", "detector.DetectionModelHelper.net.FC", "caffe2.python.modeling.initializers.ExternalInitializer", "caffe2.python.modeling.initializers.ExternalInitializer", "detector.DetectionModelHelper.net.NextName", "bias_tags.append"], "methods", ["None"], ["", "def", "FCShared", "(", "self", ",", "blob_in", ",", "blob_out", ",", "dim_in", ",", "dim_out", ",", "shared_blob_name", ",", "weight_init", "=", "None", ",", "\n", "bias_init", "=", "None", ",", "WeightInitializer", "=", "None", ",", "BiasInitializer", "=", "None", ",", "\n", "enable_tensor_core", "=", "False", ",", "float16_compute", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "WeightInitializer", "=", "initializers", ".", "update_initializer", "(", "\n", "WeightInitializer", ",", "weight_init", ",", "(", "\"XavierFill\"", ",", "{", "}", ")", "\n", ")", "\n", "BiasInitializer", "=", "initializers", ".", "update_initializer", "(", "\n", "BiasInitializer", ",", "bias_init", ",", "(", "\"ConstantFill\"", ",", "{", "}", ")", "\n", ")", "\n", "if", "not", "self", ".", "init_params", ":", "\n", "            ", "WeightInitializer", "=", "initializers", ".", "ExternalInitializer", "(", ")", "\n", "BiasInitializer", "=", "initializers", ".", "ExternalInitializer", "(", ")", "\n", "\n", "", "blob_out", "=", "blob_out", "or", "self", ".", "net", ".", "NextName", "(", ")", "\n", "bias_tags", "=", "[", "ParameterTags", ".", "BIAS", "]", "\n", "if", "'freeze_bias'", "in", "kwargs", ":", "\n", "            ", "bias_tags", ".", "append", "(", "ParameterTags", ".", "COMPUTED_PARAM", ")", "\n", "\n", "", "weight", "=", "self", ".", "create_param", "(", "\n", "param_name", "=", "shared_blob_name", "+", "'_w'", ",", "\n", "shape", "=", "[", "dim_out", ",", "dim_in", "]", ",", "\n", "initializer", "=", "WeightInitializer", ",", "\n", "tags", "=", "ParameterTags", ".", "WEIGHT", "\n", ")", "\n", "bias", "=", "self", ".", "create_param", "(", "\n", "param_name", "=", "shared_blob_name", "+", "'_b'", ",", "\n", "shape", "=", "[", "dim_out", ",", "]", ",", "\n", "initializer", "=", "BiasInitializer", ",", "\n", "tags", "=", "bias_tags", "\n", ")", "\n", "\n", "# enable TensorCore by setting appropriate engine", "\n", "if", "enable_tensor_core", ":", "\n", "            ", "kwargs", "[", "'engine'", "]", "=", "'TENSORCORE'", "\n", "\n", "# Enable float 16 compute kernel (relevant for CUDA)", "\n", "", "if", "float16_compute", ":", "\n", "            ", "kwargs", "[", "'float16_compute'", "]", "=", "True", "\n", "\n", "", "return", "self", ".", "net", ".", "FC", "(", "[", "blob_in", ",", "weight", ",", "bias", "]", ",", "blob_out", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.detector.DetectionModelHelper.BilinearInterpolation": [[422, 467], ["detector.DetectionModelHelper.BilinearInterpolation.upsample_filt"], "methods", ["None"], ["", "def", "BilinearInterpolation", "(", "\n", "self", ",", "blob_in", ",", "blob_out", ",", "dim_in", ",", "dim_out", ",", "up_scale", "\n", ")", ":", "\n", "        ", "\"\"\"Bilinear interpolation in space of scale.\n\n        Takes input of NxKxHxW and outputs NxKx(sH)x(sW), where s:= up_scale\n\n        Adapted from the CVPR'15 FCN code.\n        See: https://github.com/shelhamer/fcn.berkeleyvision.org/blob/master/surgery.py\n        \"\"\"", "\n", "assert", "dim_in", "==", "dim_out", "\n", "assert", "up_scale", "%", "2", "==", "0", ",", "'Scale should be even'", "\n", "\n", "def", "upsample_filt", "(", "size", ")", ":", "\n", "            ", "factor", "=", "(", "size", "+", "1", ")", "//", "2", "\n", "if", "size", "%", "2", "==", "1", ":", "\n", "                ", "center", "=", "factor", "-", "1", "\n", "", "else", ":", "\n", "                ", "center", "=", "factor", "-", "0.5", "\n", "", "og", "=", "np", ".", "ogrid", "[", ":", "size", ",", ":", "size", "]", "\n", "return", "(", "(", "1", "-", "abs", "(", "og", "[", "0", "]", "-", "center", ")", "/", "factor", ")", "*", "\n", "(", "1", "-", "abs", "(", "og", "[", "1", "]", "-", "center", ")", "/", "factor", ")", ")", "\n", "\n", "", "kernel_size", "=", "up_scale", "*", "2", "\n", "bil_filt", "=", "upsample_filt", "(", "kernel_size", ")", "\n", "\n", "kernel", "=", "np", ".", "zeros", "(", "\n", "(", "dim_in", ",", "dim_out", ",", "kernel_size", ",", "kernel_size", ")", ",", "dtype", "=", "np", ".", "float32", "\n", ")", "\n", "kernel", "[", "range", "(", "dim_out", ")", ",", "range", "(", "dim_in", ")", ",", ":", ",", ":", "]", "=", "bil_filt", "\n", "\n", "blob", "=", "self", ".", "ConvTranspose", "(", "\n", "blob_in", ",", "\n", "blob_out", ",", "\n", "dim_in", ",", "\n", "dim_out", ",", "\n", "kernel_size", ",", "\n", "stride", "=", "int", "(", "up_scale", ")", ",", "\n", "pad", "=", "int", "(", "up_scale", "/", "2", ")", ",", "\n", "weight_init", "=", "(", "'GivenTensorFill'", ",", "{", "'values'", ":", "kernel", "}", ")", ",", "\n", "bias_init", "=", "(", "'ConstantFill'", ",", "{", "'value'", ":", "0.", "}", ")", "\n", ")", "\n", "self", ".", "do_not_update_params", ".", "append", "(", "self", ".", "weights", "[", "-", "1", "]", ")", "\n", "self", ".", "do_not_update_params", ".", "append", "(", "self", ".", "biases", "[", "-", "1", "]", ")", "\n", "return", "blob", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.detector.DetectionModelHelper.ConvAffine": [[468, 497], ["detector.DetectionModelHelper.Conv", "detector.DetectionModelHelper.AffineChannel"], "methods", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.detector.DetectionModelHelper.AffineChannel"], ["", "def", "ConvAffine", "(", "# args in the same order of Conv()", "\n", "self", ",", "blob_in", ",", "prefix", ",", "dim_in", ",", "dim_out", ",", "kernel", ",", "stride", ",", "pad", ",", "\n", "group", "=", "1", ",", "dilation", "=", "1", ",", "\n", "weight_init", "=", "None", ",", "\n", "bias_init", "=", "None", ",", "\n", "suffix", "=", "'_bn'", ",", "\n", "inplace", "=", "False", "\n", ")", ":", "\n", "        ", "\"\"\"ConvAffine adds a Conv op followed by a AffineChannel op (which\n        replaces BN during fine tuning).\n        \"\"\"", "\n", "conv_blob", "=", "self", ".", "Conv", "(", "\n", "blob_in", ",", "\n", "prefix", ",", "\n", "dim_in", ",", "\n", "dim_out", ",", "\n", "kernel", ",", "\n", "stride", "=", "stride", ",", "\n", "pad", "=", "pad", ",", "\n", "group", "=", "group", ",", "\n", "dilation", "=", "dilation", ",", "\n", "weight_init", "=", "weight_init", ",", "\n", "bias_init", "=", "bias_init", ",", "\n", "no_bias", "=", "1", "\n", ")", "\n", "blob_out", "=", "self", ".", "AffineChannel", "(", "\n", "conv_blob", ",", "prefix", "+", "suffix", ",", "inplace", "=", "inplace", "\n", ")", "\n", "return", "blob_out", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.detector.DetectionModelHelper.DisableCudnn": [[498, 501], ["None"], "methods", ["None"], ["", "def", "DisableCudnn", "(", "self", ")", ":", "\n", "        ", "self", ".", "prev_use_cudnn", "=", "self", ".", "use_cudnn", "\n", "self", ".", "use_cudnn", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.detector.DetectionModelHelper.RestorePreviousUseCudnn": [[502, 506], ["None"], "methods", ["None"], ["", "def", "RestorePreviousUseCudnn", "(", "self", ")", ":", "\n", "        ", "prev_use_cudnn", "=", "self", ".", "use_cudnn", "\n", "self", ".", "use_cudnn", "=", "self", ".", "prev_use_cudnn", "\n", "self", ".", "prev_use_cudnn", "=", "prev_use_cudnn", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.detector.DetectionModelHelper.UpdateWorkspaceLr": [[507, 525], ["utils.lr_policy.get_lr_at_iter", "caffe2.python.workspace.FetchBlob", "detector._get_lr_change_ratio", "detector.DetectionModelHelper._SetNewLr", "logger.info"], "methods", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.lr_policy.get_lr_at_iter", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.detector._get_lr_change_ratio", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.detector.DetectionModelHelper._SetNewLr"], ["", "def", "UpdateWorkspaceLr", "(", "self", ",", "cur_iter", ")", ":", "\n", "        ", "\"\"\"Updates the model's current learning rate and the workspace (learning\n        rate and update history/momentum blobs).\n        \"\"\"", "\n", "# The workspace is the one source of truth for the lr", "\n", "# The lr is always the same on all GPUs", "\n", "cur_lr", "=", "workspace", ".", "FetchBlob", "(", "'gpu_0/lr'", ")", "[", "0", "]", "\n", "new_lr", "=", "lr_policy", ".", "get_lr_at_iter", "(", "cur_iter", ")", "\n", "# There are no type conversions between the lr in Python and the lr in", "\n", "# the GPU (both are float32), so exact comparision is ok", "\n", "if", "cur_lr", "!=", "new_lr", ":", "\n", "            ", "ratio", "=", "_get_lr_change_ratio", "(", "cur_lr", ",", "new_lr", ")", "\n", "if", "ratio", ">", "cfg", ".", "SOLVER", ".", "LOG_LR_CHANGE_THRESHOLD", ":", "\n", "                ", "logger", ".", "info", "(", "\n", "'Changing learning rate {:.6f} -> {:.6f} at iter {:d}'", ".", "\n", "format", "(", "cur_lr", ",", "new_lr", ",", "cur_iter", ")", ")", "\n", "", "self", ".", "_SetNewLr", "(", "cur_lr", ",", "new_lr", ")", "\n", "", "return", "new_lr", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.detector.DetectionModelHelper._SetNewLr": [[526, 537], ["range", "detector._get_lr_change_ratio", "detector.DetectionModelHelper._CorrectMomentum", "utils.CudaScope", "caffe2.python.workspace.FeedBlob", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.detector._get_lr_change_ratio", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.detector.DetectionModelHelper._CorrectMomentum", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.c2.CudaScope"], ["", "def", "_SetNewLr", "(", "self", ",", "cur_lr", ",", "new_lr", ")", ":", "\n", "        ", "\"\"\"Do the actual work of updating the model and workspace blobs.\n        \"\"\"", "\n", "for", "i", "in", "range", "(", "cfg", ".", "NUM_GPUS", ")", ":", "\n", "            ", "with", "c2_utils", ".", "CudaScope", "(", "i", ")", ":", "\n", "                ", "workspace", ".", "FeedBlob", "(", "\n", "'gpu_{}/lr'", ".", "format", "(", "i", ")", ",", "np", ".", "array", "(", "[", "new_lr", "]", ",", "dtype", "=", "np", ".", "float32", ")", ")", "\n", "", "", "ratio", "=", "_get_lr_change_ratio", "(", "cur_lr", ",", "new_lr", ")", "\n", "if", "cfg", ".", "SOLVER", ".", "SCALE_MOMENTUM", "and", "cur_lr", ">", "1e-7", "and", "ratio", ">", "cfg", ".", "SOLVER", ".", "SCALE_MOMENTUM_THRESHOLD", ":", "\n", "            ", "self", ".", "_CorrectMomentum", "(", "new_lr", "/", "cur_lr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.detector.DetectionModelHelper._CorrectMomentum": [[538, 559], ["logger.info", "range", "utils.CudaScope", "detector.DetectionModelHelper.TrainableParams", "caffe2.python.core.CreateOperator", "caffe2.python.workspace.RunOperatorOnce"], "methods", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.c2.CudaScope", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.detector.DetectionModelHelper.TrainableParams"], ["", "", "def", "_CorrectMomentum", "(", "self", ",", "correction", ")", ":", "\n", "        ", "\"\"\"The MomentumSGDUpdate op implements the update V as\n\n            V := mu * V + lr * grad,\n\n        where mu is the momentum factor, lr is the learning rate, and grad is\n        the stochastic gradient. Since V is not defined independently of the\n        learning rate (as it should ideally be), when the learning rate is\n        changed we should scale the update history V in order to make it\n        compatible in scale with lr * grad.\n        \"\"\"", "\n", "logger", ".", "info", "(", "\n", "'Scaling update history by {:.6f} (new lr / old lr)'", ".", "\n", "format", "(", "correction", ")", ")", "\n", "for", "i", "in", "range", "(", "cfg", ".", "NUM_GPUS", ")", ":", "\n", "            ", "with", "c2_utils", ".", "CudaScope", "(", "i", ")", ":", "\n", "                ", "for", "param", "in", "self", ".", "TrainableParams", "(", "gpu_id", "=", "i", ")", ":", "\n", "                    ", "op", "=", "core", ".", "CreateOperator", "(", "\n", "'Scale'", ",", "[", "param", "+", "'_momentum'", "]", ",", "[", "param", "+", "'_momentum'", "]", ",", "\n", "scale", "=", "correction", ")", "\n", "workspace", ".", "RunOperatorOnce", "(", "op", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.detector.DetectionModelHelper.AddLosses": [[560, 566], ["list", "isinstance", "utils.UnscopeName", "set", "str"], "methods", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.c2.UnscopeName"], ["", "", "", "", "def", "AddLosses", "(", "self", ",", "losses", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "losses", ",", "list", ")", ":", "\n", "            ", "losses", "=", "[", "losses", "]", "\n", "# Conversion to str allows losses to include BlobReferences", "\n", "", "losses", "=", "[", "c2_utils", ".", "UnscopeName", "(", "str", "(", "l", ")", ")", "for", "l", "in", "losses", "]", "\n", "self", ".", "losses", "=", "list", "(", "set", "(", "self", ".", "losses", "+", "losses", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.detector.DetectionModelHelper.AddMetrics": [[567, 571], ["list", "isinstance", "set"], "methods", ["None"], ["", "def", "AddMetrics", "(", "self", ",", "metrics", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "metrics", ",", "list", ")", ":", "\n", "            ", "metrics", "=", "[", "metrics", "]", "\n", "", "self", ".", "metrics", "=", "list", "(", "set", "(", "self", ".", "metrics", "+", "metrics", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.detector._get_lr_change_ratio": [[573, 579], ["numpy.max", "numpy.max", "numpy.max"], "function", ["None"], ["", "", "def", "_get_lr_change_ratio", "(", "cur_lr", ",", "new_lr", ")", ":", "\n", "    ", "eps", "=", "1e-10", "\n", "ratio", "=", "np", ".", "max", "(", "\n", "(", "new_lr", "/", "np", ".", "max", "(", "(", "cur_lr", ",", "eps", ")", ")", ",", "cur_lr", "/", "np", ".", "max", "(", "(", "new_lr", ",", "eps", ")", ")", ")", "\n", ")", "\n", "return", "ratio", "\n", "", ""]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.fast_rcnn_heads.add_fast_rcnn_outputs": [[45, 66], ["model.FC", "model.FC", "model.Softmax", "utils.c2.gauss_fill", "utils.c2.const_fill", "utils.c2.gauss_fill", "utils.c2.const_fill"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.c2.gauss_fill", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.c2.const_fill", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.c2.gauss_fill", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.c2.const_fill"], ["def", "add_fast_rcnn_outputs", "(", "model", ",", "blob_in", ",", "dim", ")", ":", "\n", "    ", "\"\"\"Add RoI classification and bounding box regression output ops.\"\"\"", "\n", "model", ".", "FC", "(", "\n", "blob_in", ",", "\n", "'cls_score'", ",", "\n", "dim", ",", "\n", "model", ".", "num_classes", ",", "\n", "weight_init", "=", "gauss_fill", "(", "0.01", ")", ",", "\n", "bias_init", "=", "const_fill", "(", "0.0", ")", "\n", ")", "\n", "if", "not", "model", ".", "train", ":", "# == if test", "\n", "# Only add softmax when testing; during training the softmax is combined", "\n", "# with the label cross entropy loss for numerical stability", "\n", "        ", "model", ".", "Softmax", "(", "'cls_score'", ",", "'cls_prob'", ",", "engine", "=", "'CUDNN'", ")", "\n", "", "model", ".", "FC", "(", "\n", "blob_in", ",", "\n", "'bbox_pred'", ",", "\n", "dim", ",", "\n", "model", ".", "num_classes", "*", "4", ",", "\n", "weight_init", "=", "gauss_fill", "(", "0.001", ")", ",", "\n", "bias_init", "=", "const_fill", "(", "0.0", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.fast_rcnn_heads.add_fast_rcnn_losses": [[69, 89], ["model.net.SoftmaxWithLoss", "model.net.SmoothL1Loss", "utils.get_loss_gradients", "model.Accuracy", "model.AddLosses", "model.AddMetrics"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.blob.get_loss_gradients", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.detector.DetectionModelHelper.AddLosses", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.detector.DetectionModelHelper.AddMetrics"], ["", "def", "add_fast_rcnn_losses", "(", "model", ")", ":", "\n", "    ", "\"\"\"Add losses for RoI classification and bounding box regression.\"\"\"", "\n", "cls_prob", ",", "loss_cls", "=", "model", ".", "net", ".", "SoftmaxWithLoss", "(", "\n", "[", "'cls_score'", ",", "'labels_int32'", "]", "+", "(", "[", "'label_loss_weights'", "]", "if", "cfg", ".", "TRAIN", ".", "CLS_SIZE_WEIGHTED_LOSS", "else", "[", "]", ")", ",", "[", "'cls_prob'", ",", "'loss_cls'", "]", ",", "\n", "scale", "=", "1.", "/", "cfg", ".", "NUM_GPUS", "\n", ")", "\n", "\n", "loss_bbox", "=", "model", ".", "net", ".", "SmoothL1Loss", "(", "\n", "[", "\n", "'bbox_pred'", ",", "'bbox_targets'", ",", "'bbox_inside_weights'", ",", "\n", "'bbox_outside_weights'", "\n", "]", ",", "\n", "'loss_bbox'", ",", "\n", "scale", "=", "1.", "/", "cfg", ".", "NUM_GPUS", "\n", ")", "\n", "loss_gradients", "=", "blob_utils", ".", "get_loss_gradients", "(", "model", ",", "[", "loss_cls", ",", "loss_bbox", "]", ")", "\n", "model", ".", "Accuracy", "(", "[", "'cls_prob'", ",", "'labels_int32'", "]", ",", "'accuracy_cls'", ")", "\n", "model", ".", "AddLosses", "(", "[", "'loss_cls'", ",", "'loss_bbox'", "]", ")", "\n", "model", ".", "AddMetrics", "(", "'accuracy_cls'", ")", "\n", "return", "loss_gradients", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.fast_rcnn_heads.add_roi_2mlp_head": [[95, 113], ["model.RoIFeatureTransform", "model.FC", "model.Relu", "model.FC", "model.Relu"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.detector.DetectionModelHelper.RoIFeatureTransform"], ["", "def", "add_roi_2mlp_head", "(", "model", ",", "blob_in", ",", "dim_in", ",", "spatial_scale", ")", ":", "\n", "    ", "\"\"\"Add a ReLU MLP with two hidden layers.\"\"\"", "\n", "hidden_dim", "=", "cfg", ".", "FAST_RCNN", ".", "MLP_HEAD_DIM", "\n", "roi_size", "=", "cfg", ".", "FAST_RCNN", ".", "ROI_XFORM_RESOLUTION", "\n", "roi_feat", "=", "model", ".", "RoIFeatureTransform", "(", "\n", "blob_in", ",", "\n", "'roi_feat'", ",", "\n", "blob_rois", "=", "'rois'", ",", "\n", "method", "=", "cfg", ".", "FAST_RCNN", ".", "ROI_XFORM_METHOD", ",", "\n", "resolution", "=", "roi_size", ",", "\n", "sampling_ratio", "=", "cfg", ".", "FAST_RCNN", ".", "ROI_XFORM_SAMPLING_RATIO", ",", "\n", "spatial_scale", "=", "spatial_scale", "\n", ")", "\n", "model", ".", "FC", "(", "roi_feat", ",", "'fc6'", ",", "dim_in", "*", "roi_size", "*", "roi_size", ",", "hidden_dim", ")", "\n", "model", ".", "Relu", "(", "'fc6'", ",", "'fc6'", ")", "\n", "model", ".", "FC", "(", "'fc6'", ",", "'fc7'", ",", "hidden_dim", ",", "hidden_dim", ")", "\n", "model", ".", "Relu", "(", "'fc7'", ",", "'fc7'", ")", "\n", "return", "'fc7'", ",", "hidden_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.fast_rcnn_heads.add_roi_2mlp_cls_head_ohem": [[116, 151], ["model.RoIFeatureTransform", "model.FCShared", "model.Relu", "model.FCShared", "model.Relu", "model.FCShared", "model.net.SoftmaxWithLoss", "utils.c2.gauss_fill", "utils.c2.const_fill"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.detector.DetectionModelHelper.RoIFeatureTransform", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.detector.DetectionModelHelper.FCShared", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.detector.DetectionModelHelper.FCShared", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.detector.DetectionModelHelper.FCShared", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.c2.gauss_fill", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.c2.const_fill"], ["", "def", "add_roi_2mlp_cls_head_ohem", "(", "model", ",", "blob_in", ",", "dim_in", ",", "spatial_scale", ")", ":", "\n", "    ", "\"\"\"Add a ReLU MLP with two hidden layers.\"\"\"", "\n", "hidden_dim", "=", "cfg", ".", "FAST_RCNN", ".", "MLP_HEAD_DIM", "\n", "roi_size", "=", "cfg", ".", "FAST_RCNN", ".", "ROI_XFORM_RESOLUTION", "\n", "roi_feat", "=", "model", ".", "RoIFeatureTransform", "(", "\n", "blob_in", ",", "\n", "'ohem_roi_feat'", ",", "\n", "blob_rois", "=", "'ohem_rois'", ",", "\n", "method", "=", "cfg", ".", "FAST_RCNN", ".", "ROI_XFORM_METHOD", ",", "\n", "resolution", "=", "roi_size", ",", "\n", "sampling_ratio", "=", "cfg", ".", "FAST_RCNN", ".", "ROI_XFORM_SAMPLING_RATIO", ",", "\n", "spatial_scale", "=", "spatial_scale", "\n", ")", "\n", "model", ".", "FCShared", "(", "roi_feat", ",", "'ohem_fc6'", ",", "dim_in", "*", "roi_size", "*", "roi_size", ",", "hidden_dim", ",", "'fc6'", ")", "\n", "model", ".", "Relu", "(", "'ohem_fc6'", ",", "'ohem_fc6'", ")", "\n", "model", ".", "FCShared", "(", "'ohem_fc6'", ",", "'ohem_fc7'", ",", "hidden_dim", ",", "hidden_dim", ",", "'fc7'", ")", "\n", "model", ".", "Relu", "(", "'ohem_fc7'", ",", "'ohem_fc7'", ")", "\n", "\n", "\"\"\"Add RoI classification and softmax loss.\"\"\"", "\n", "model", ".", "FCShared", "(", "\n", "'ohem_fc7'", ",", "\n", "'ohem_cls_score'", ",", "\n", "hidden_dim", ",", "\n", "model", ".", "num_classes", ",", "\n", "'cls_score'", ",", "\n", "weight_init", "=", "gauss_fill", "(", "0.01", ")", ",", "\n", "bias_init", "=", "const_fill", "(", "0.0", ")", "\n", ")", "\n", "\n", "ohem_cls_prob", ",", "ohem_loss_cls", "=", "model", ".", "net", ".", "SoftmaxWithLoss", "(", "\n", "[", "'ohem_cls_score'", ",", "'ohem_labels_int32'", "]", ",", "[", "'ohem_cls_prob'", ",", "'ohem_loss_cls'", "]", ",", "\n", "scale", "=", "1.", "/", "cfg", ".", "NUM_GPUS", "\n", ")", "\n", "\n", "return", "ohem_loss_cls", "", "", ""]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.VGG16.add_VGG16_conv5_body": [[26, 59], ["model.Conv", "model.Relu", "model.Conv", "model.Relu", "model.MaxPool", "model.Conv", "model.Relu", "model.Conv", "model.Relu", "model.MaxPool", "model.StopGradient", "model.Conv", "model.Relu", "model.Conv", "model.Relu", "model.Conv", "model.Relu", "model.MaxPool", "model.Conv", "model.Relu", "model.Conv", "model.Relu", "model.Conv", "model.Relu", "model.MaxPool", "model.Conv", "model.Relu", "model.Conv", "model.Relu", "model.Conv", "model.Relu"], "function", ["None"], ["def", "add_VGG16_conv5_body", "(", "model", ")", ":", "\n", "    ", "model", ".", "Conv", "(", "'data'", ",", "'conv1_1'", ",", "3", ",", "64", ",", "3", ",", "pad", "=", "1", ",", "stride", "=", "1", ")", "\n", "model", ".", "Relu", "(", "'conv1_1'", ",", "'conv1_1'", ")", "\n", "model", ".", "Conv", "(", "'conv1_1'", ",", "'conv1_2'", ",", "64", ",", "64", ",", "3", ",", "pad", "=", "1", ",", "stride", "=", "1", ")", "\n", "model", ".", "Relu", "(", "'conv1_2'", ",", "'conv1_2'", ")", "\n", "model", ".", "MaxPool", "(", "'conv1_2'", ",", "'pool1'", ",", "kernel", "=", "2", ",", "pad", "=", "0", ",", "stride", "=", "2", ")", "\n", "model", ".", "Conv", "(", "'pool1'", ",", "'conv2_1'", ",", "64", ",", "128", ",", "3", ",", "pad", "=", "1", ",", "stride", "=", "1", ")", "\n", "model", ".", "Relu", "(", "'conv2_1'", ",", "'conv2_1'", ")", "\n", "model", ".", "Conv", "(", "'conv2_1'", ",", "'conv2_2'", ",", "128", ",", "128", ",", "3", ",", "pad", "=", "1", ",", "stride", "=", "1", ")", "\n", "model", ".", "Relu", "(", "'conv2_2'", ",", "'conv2_2'", ")", "\n", "model", ".", "MaxPool", "(", "'conv2_2'", ",", "'pool2'", ",", "kernel", "=", "2", ",", "pad", "=", "0", ",", "stride", "=", "2", ")", "\n", "model", ".", "StopGradient", "(", "'pool2'", ",", "'pool2'", ")", "\n", "model", ".", "Conv", "(", "'pool2'", ",", "'conv3_1'", ",", "128", ",", "256", ",", "3", ",", "pad", "=", "1", ",", "stride", "=", "1", ")", "\n", "model", ".", "Relu", "(", "'conv3_1'", ",", "'conv3_1'", ")", "\n", "model", ".", "Conv", "(", "'conv3_1'", ",", "'conv3_2'", ",", "256", ",", "256", ",", "3", ",", "pad", "=", "1", ",", "stride", "=", "1", ")", "\n", "model", ".", "Relu", "(", "'conv3_2'", ",", "'conv3_2'", ")", "\n", "model", ".", "Conv", "(", "'conv3_2'", ",", "'conv3_3'", ",", "256", ",", "256", ",", "3", ",", "pad", "=", "1", ",", "stride", "=", "1", ")", "\n", "model", ".", "Relu", "(", "'conv3_3'", ",", "'conv3_3'", ")", "\n", "model", ".", "MaxPool", "(", "'conv3_3'", ",", "'pool3'", ",", "kernel", "=", "2", ",", "pad", "=", "0", ",", "stride", "=", "2", ")", "\n", "model", ".", "Conv", "(", "'pool3'", ",", "'conv4_1'", ",", "256", ",", "512", ",", "3", ",", "pad", "=", "1", ",", "stride", "=", "1", ")", "\n", "model", ".", "Relu", "(", "'conv4_1'", ",", "'conv4_1'", ")", "\n", "model", ".", "Conv", "(", "'conv4_1'", ",", "'conv4_2'", ",", "512", ",", "512", ",", "3", ",", "pad", "=", "1", ",", "stride", "=", "1", ")", "\n", "model", ".", "Relu", "(", "'conv4_2'", ",", "'conv4_2'", ")", "\n", "model", ".", "Conv", "(", "'conv4_2'", ",", "'conv4_3'", ",", "512", ",", "512", ",", "3", ",", "pad", "=", "1", ",", "stride", "=", "1", ")", "\n", "model", ".", "Relu", "(", "'conv4_3'", ",", "'conv4_3'", ")", "\n", "model", ".", "MaxPool", "(", "'conv4_3'", ",", "'pool4'", ",", "kernel", "=", "2", ",", "pad", "=", "0", ",", "stride", "=", "2", ")", "\n", "model", ".", "Conv", "(", "'pool4'", ",", "'conv5_1'", ",", "512", ",", "512", ",", "3", ",", "pad", "=", "1", ",", "stride", "=", "1", ")", "\n", "model", ".", "Relu", "(", "'conv5_1'", ",", "'conv5_1'", ")", "\n", "model", ".", "Conv", "(", "'conv5_1'", ",", "'conv5_2'", ",", "512", ",", "512", ",", "3", ",", "pad", "=", "1", ",", "stride", "=", "1", ")", "\n", "model", ".", "Relu", "(", "'conv5_2'", ",", "'conv5_2'", ")", "\n", "model", ".", "Conv", "(", "'conv5_2'", ",", "'conv5_3'", ",", "512", ",", "512", ",", "3", ",", "pad", "=", "1", ",", "stride", "=", "1", ")", "\n", "blob_out", "=", "model", ".", "Relu", "(", "'conv5_3'", ",", "'conv5_3'", ")", "\n", "return", "blob_out", ",", "512", ",", "1.", "/", "16.", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.VGG16.add_VGG16_roi_fc_head": [[61, 76], ["model.RoIFeatureTransform", "model.FC", "model.Relu", "model.FC", "model.Relu"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.detector.DetectionModelHelper.RoIFeatureTransform"], ["", "def", "add_VGG16_roi_fc_head", "(", "model", ",", "blob_in", ",", "dim_in", ",", "spatial_scale", ")", ":", "\n", "    ", "model", ".", "RoIFeatureTransform", "(", "\n", "blob_in", ",", "\n", "'pool5'", ",", "\n", "blob_rois", "=", "'rois'", ",", "\n", "method", "=", "cfg", ".", "FAST_RCNN", ".", "ROI_XFORM_METHOD", ",", "\n", "resolution", "=", "7", ",", "\n", "sampling_ratio", "=", "cfg", ".", "FAST_RCNN", ".", "ROI_XFORM_SAMPLING_RATIO", ",", "\n", "spatial_scale", "=", "spatial_scale", "\n", ")", "\n", "model", ".", "FC", "(", "'pool5'", ",", "'fc6'", ",", "dim_in", "*", "7", "*", "7", ",", "4096", ")", "\n", "model", ".", "Relu", "(", "'fc6'", ",", "'fc6'", ")", "\n", "model", ".", "FC", "(", "'fc6'", ",", "'fc7'", ",", "4096", ",", "4096", ")", "\n", "blob_out", "=", "model", ".", "Relu", "(", "'fc7'", ",", "'fc7'", ")", "\n", "return", "blob_out", ",", "4096", "\n", "", ""]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.rpn_heads.add_generic_rpn_outputs": [[34, 56], ["modeling.add_fpn_rpn_outputs", "rpn_heads.add_single_scale_rpn_outputs", "model.CollectAndDistributeFpnRpnProposals", "modeling.add_fpn_rpn_losses", "rpn_heads.add_single_scale_rpn_losses"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.FPN.add_fpn_rpn_outputs", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.rpn_heads.add_single_scale_rpn_outputs", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.detector.DetectionModelHelper.CollectAndDistributeFpnRpnProposals", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.FPN.add_fpn_rpn_losses", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.rpn_heads.add_single_scale_rpn_losses"], ["def", "add_generic_rpn_outputs", "(", "model", ",", "blob_in", ",", "dim_in", ",", "spatial_scale_in", ",", "ohem", "=", "False", ")", ":", "\n", "    ", "\"\"\"Add RPN outputs (objectness classification and bounding box regression)\n    to an RPN model. Abstracts away the use of FPN.\n    \"\"\"", "\n", "loss_gradients", "=", "None", "\n", "if", "cfg", ".", "FPN", ".", "FPN_ON", ":", "\n", "# Delegate to the FPN module", "\n", "        ", "FPN", ".", "add_fpn_rpn_outputs", "(", "model", ",", "blob_in", ",", "dim_in", ",", "spatial_scale_in", ")", "\n", "if", "cfg", ".", "MODEL", ".", "FASTER_RCNN", ":", "\n", "# CollectAndDistributeFpnRpnProposals also labels proposals when in", "\n", "# training mode", "\n", "            ", "model", ".", "CollectAndDistributeFpnRpnProposals", "(", "ohem", "=", "ohem", ")", "\n", "", "if", "model", ".", "train", ":", "\n", "            ", "loss_gradients", "=", "FPN", ".", "add_fpn_rpn_losses", "(", "model", ")", "\n", "", "", "else", ":", "\n", "# Not using FPN, add RPN to a single scale", "\n", "        ", "add_single_scale_rpn_outputs", "(", "model", ",", "blob_in", ",", "dim_in", ",", "spatial_scale_in", ",", "ohem", "=", "ohem", ")", "\n", "if", "model", ".", "train", ":", "\n", "            ", "loss_gradients", "=", "add_single_scale_rpn_losses", "(", "model", ")", "\n", "\n", "# if we are in training and OHEM requested then add classification head from fast-rcnn (but without gradients) to find hard examples", "\n", "", "", "return", "loss_gradients", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.rpn_heads.add_generic_rpn_ohem_classifier": [[57, 63], ["add_roi_box_head_ohem_func", "model.GenerateHardProposalLabels"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.detector.DetectionModelHelper.GenerateHardProposalLabels"], ["", "def", "add_generic_rpn_ohem_classifier", "(", "model", ",", "add_roi_box_head_ohem_func", ",", "blob_in", ",", "dim_in", ",", "spatial_scale_in", ")", ":", "\n", "# add ROI, 2x FC layers and a classification layer to find hard examples", "\n", "    ", "add_roi_box_head_ohem_func", "(", "model", ",", "blob_in", ",", "dim_in", ",", "spatial_scale_in", ")", "\n", "\n", "# create new ROI by retaining examples with large loss", "\n", "model", ".", "GenerateHardProposalLabels", "(", "[", "'ohem_cls_score'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.rpn_heads.add_single_scale_rpn_outputs": [[64, 132], ["modeling.generate_anchors.generate_anchors", "model.Conv", "model.Relu", "model.Conv", "model.Conv", "model.net.Sigmoid", "model.GenerateProposals", "utils.c2.gauss_fill", "utils.c2.const_fill", "utils.c2.gauss_fill", "utils.c2.const_fill", "utils.c2.gauss_fill", "utils.c2.const_fill", "model.GenerateProposalLabels", "model.net.Alias"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.generate_anchors.generate_anchors", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.detector.DetectionModelHelper.GenerateProposals", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.c2.gauss_fill", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.c2.const_fill", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.c2.gauss_fill", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.c2.const_fill", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.c2.gauss_fill", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.c2.const_fill", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.detector.DetectionModelHelper.GenerateProposalLabels"], ["", "def", "add_single_scale_rpn_outputs", "(", "model", ",", "blob_in", ",", "dim_in", ",", "spatial_scale", ",", "ohem", "=", "False", ")", ":", "\n", "    ", "\"\"\"Add RPN outputs to a single scale model (i.e., no FPN).\"\"\"", "\n", "anchors", "=", "generate_anchors", "(", "\n", "stride", "=", "1.", "/", "spatial_scale", ",", "\n", "sizes", "=", "cfg", ".", "RPN", ".", "SIZES", ",", "\n", "aspect_ratios", "=", "cfg", ".", "RPN", ".", "ASPECT_RATIOS", "\n", ")", "\n", "num_anchors", "=", "anchors", ".", "shape", "[", "0", "]", "\n", "dim_out", "=", "dim_in", "\n", "# RPN hidden representation", "\n", "model", ".", "Conv", "(", "\n", "blob_in", ",", "\n", "'conv_rpn'", ",", "\n", "dim_in", ",", "\n", "dim_out", ",", "\n", "kernel", "=", "3", ",", "\n", "pad", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "weight_init", "=", "gauss_fill", "(", "0.01", ")", ",", "\n", "bias_init", "=", "const_fill", "(", "0.0", ")", "\n", ")", "\n", "model", ".", "Relu", "(", "'conv_rpn'", ",", "'conv_rpn'", ")", "\n", "# Proposal classification scores", "\n", "model", ".", "Conv", "(", "\n", "'conv_rpn'", ",", "\n", "'rpn_cls_logits'", ",", "\n", "dim_in", ",", "\n", "num_anchors", ",", "\n", "kernel", "=", "1", ",", "\n", "pad", "=", "0", ",", "\n", "stride", "=", "1", ",", "\n", "weight_init", "=", "gauss_fill", "(", "0.01", ")", ",", "\n", "bias_init", "=", "const_fill", "(", "0.0", ")", "\n", ")", "\n", "# Proposal bbox regression deltas", "\n", "model", ".", "Conv", "(", "\n", "'conv_rpn'", ",", "\n", "'rpn_bbox_pred'", ",", "\n", "dim_in", ",", "\n", "4", "*", "num_anchors", ",", "\n", "kernel", "=", "1", ",", "\n", "pad", "=", "0", ",", "\n", "stride", "=", "1", ",", "\n", "weight_init", "=", "gauss_fill", "(", "0.01", ")", ",", "\n", "bias_init", "=", "const_fill", "(", "0.0", ")", "\n", ")", "\n", "\n", "if", "not", "model", ".", "train", "or", "cfg", ".", "MODEL", ".", "FASTER_RCNN", ":", "\n", "# Proposals are needed during:", "\n", "#  1) inference (== not model.train) for RPN only and Faster R-CNN", "\n", "#  OR", "\n", "#  2) training for Faster R-CNN", "\n", "# Otherwise (== training for RPN only), proposals are not needed", "\n", "        ", "model", ".", "net", ".", "Sigmoid", "(", "'rpn_cls_logits'", ",", "'rpn_cls_probs'", ")", "\n", "model", ".", "GenerateProposals", "(", "\n", "[", "'rpn_cls_probs'", ",", "'rpn_bbox_pred'", ",", "'im_info'", "]", ",", "\n", "[", "'rpn_rois'", ",", "'rpn_roi_probs'", "]", ",", "\n", "anchors", "=", "anchors", ",", "\n", "spatial_scale", "=", "spatial_scale", "\n", ")", "\n", "\n", "", "if", "cfg", ".", "MODEL", ".", "FASTER_RCNN", ":", "\n", "        ", "if", "model", ".", "train", ":", "\n", "# Add op that generates training labels for in-network RPN proposals", "\n", "            ", "model", ".", "GenerateProposalLabels", "(", "[", "'rpn_rois'", ",", "'roidb'", ",", "'im_info'", "]", ",", "ohem", "=", "ohem", ")", "\n", "", "else", ":", "\n", "# Alias rois to rpn_rois for inference", "\n", "            ", "model", ".", "net", ".", "Alias", "(", "'rpn_rois'", ",", "'rois'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.rpn_heads.add_single_scale_rpn_losses": [[134, 179], ["model.net.SpatialNarrowAs", "model.net.SmoothL1Loss", "utils.get_loss_gradients", "model.AddLosses", "model.net.SpatialNarrowAs", "model.net.SpatialNarrowAs", "model.net.WeightedSigmoidCrossEntropyLoss", "model.net.SigmoidCrossEntropyLoss"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.blob.get_loss_gradients", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.detector.DetectionModelHelper.AddLosses"], ["", "", "", "def", "add_single_scale_rpn_losses", "(", "model", ")", ":", "\n", "    ", "\"\"\"Add losses for a single scale RPN model (i.e., no FPN).\"\"\"", "\n", "# Spatially narrow the full-sized RPN label arrays to match the feature map", "\n", "# shape", "\n", "model", ".", "net", ".", "SpatialNarrowAs", "(", "\n", "[", "'rpn_labels_int32_wide'", ",", "'rpn_cls_logits'", "]", ",", "'rpn_labels_int32'", "\n", ")", "\n", "\n", "if", "cfg", ".", "TRAIN", ".", "RPN_SIZE_WEIGHTED_LOSS", ":", "\n", "        ", "model", ".", "net", ".", "SpatialNarrowAs", "(", "\n", "[", "'rpn_label_loss_weights_wide'", ",", "'rpn_cls_logits'", "]", ",", "\n", "'rpn_label_loss_weights_wide'", "\n", ")", "\n", "\n", "", "for", "key", "in", "(", "'targets'", ",", "'inside_weights'", ",", "'outside_weights'", ")", ":", "\n", "        ", "model", ".", "net", ".", "SpatialNarrowAs", "(", "\n", "[", "'rpn_bbox_'", "+", "key", "+", "'_wide'", ",", "'rpn_bbox_pred'", "]", ",", "'rpn_bbox_'", "+", "key", "\n", ")", "\n", "\n", "", "if", "cfg", ".", "TRAIN", ".", "RPN_SIZE_WEIGHTED_LOSS", ":", "\n", "        ", "loss_rpn_cls", "=", "model", ".", "net", ".", "WeightedSigmoidCrossEntropyLoss", "(", "\n", "[", "'rpn_cls_logits'", ",", "'rpn_labels_int32'", ",", "'rpn_label_loss_weights_wide'", "]", ",", "\n", "'loss_rpn_cls'", ",", "\n", "scale", "=", "1.", "/", "cfg", ".", "NUM_GPUS", "\n", ")", "\n", "", "else", ":", "\n", "        ", "loss_rpn_cls", "=", "model", ".", "net", ".", "SigmoidCrossEntropyLoss", "(", "\n", "[", "'rpn_cls_logits'", ",", "'rpn_labels_int32'", "]", ",", "\n", "'loss_rpn_cls'", ",", "\n", "scale", "=", "1.", "/", "cfg", ".", "NUM_GPUS", "\n", ")", "\n", "", "loss_rpn_bbox", "=", "model", ".", "net", ".", "SmoothL1Loss", "(", "\n", "[", "\n", "'rpn_bbox_pred'", ",", "'rpn_bbox_targets'", ",", "'rpn_bbox_inside_weights'", ",", "\n", "'rpn_bbox_outside_weights'", "\n", "]", ",", "\n", "'loss_rpn_bbox'", ",", "\n", "beta", "=", "1.", "/", "9.", ",", "\n", "scale", "=", "1.", "/", "cfg", ".", "NUM_GPUS", "\n", ")", "\n", "loss_gradients", "=", "blob_utils", ".", "get_loss_gradients", "(", "\n", "model", ",", "[", "loss_rpn_cls", ",", "loss_rpn_bbox", "]", "\n", ")", "\n", "model", ".", "AddLosses", "(", "[", "'loss_rpn_cls'", ",", "'loss_rpn_bbox'", "]", ")", "\n", "return", "loss_gradients", "\n", "", ""]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.optimizer.build_data_parallel_model": [[33, 52], ["optimizer._build_forward_graph", "model.AddGradientOperators", "range", "optimizer._add_allreduce_graph", "optimizer._add_parameter_update_ops", "utils.NamedCudaScope", "single_gpu_build_func"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.optimizer._build_forward_graph", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.optimizer._add_allreduce_graph", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.optimizer._add_parameter_update_ops", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.c2.NamedCudaScope"], ["def", "build_data_parallel_model", "(", "model", ",", "single_gpu_build_func", ")", ":", "\n", "    ", "\"\"\"Build a data parallel model given a function that builds the model on a\n    single GPU.\n    \"\"\"", "\n", "if", "model", ".", "train", ":", "\n", "        ", "all_loss_gradients", "=", "_build_forward_graph", "(", "model", ",", "single_gpu_build_func", ")", "\n", "# Add backward pass on all GPUs", "\n", "model", ".", "AddGradientOperators", "(", "all_loss_gradients", ")", "\n", "if", "cfg", ".", "NUM_GPUS", ">", "1", ":", "\n", "            ", "_add_allreduce_graph", "(", "model", ")", "\n", "", "for", "gpu_id", "in", "range", "(", "cfg", ".", "NUM_GPUS", ")", ":", "\n", "# After allreduce, all GPUs perform SGD updates on their identical", "\n", "# params and gradients in parallel", "\n", "            ", "_add_parameter_update_ops", "(", "model", ",", "gpu_id", ")", "\n", "", "", "else", ":", "\n", "# Test-time network operates on single GPU", "\n", "# Test-time parallelism is implemented through multiprocessing", "\n", "        ", "with", "c2_utils", ".", "NamedCudaScope", "(", "0", ")", ":", "\n", "            ", "single_gpu_build_func", "(", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.optimizer._build_forward_graph": [[54, 62], ["range", "utils.NamedCudaScope", "all_loss_gradients.update", "single_gpu_build_func"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.c2.NamedCudaScope"], ["", "", "", "def", "_build_forward_graph", "(", "model", ",", "single_gpu_build_func", ")", ":", "\n", "    ", "\"\"\"Construct the forward graph on each GPU.\"\"\"", "\n", "all_loss_gradients", "=", "{", "}", "# Will include loss gradients from all GPUs", "\n", "# Build the model on each GPU with correct name and device scoping", "\n", "for", "gpu_id", "in", "range", "(", "cfg", ".", "NUM_GPUS", ")", ":", "\n", "        ", "with", "c2_utils", ".", "NamedCudaScope", "(", "gpu_id", ")", ":", "\n", "            ", "all_loss_gradients", ".", "update", "(", "single_gpu_build_func", "(", "model", ")", ")", "\n", "", "", "return", "all_loss_gradients", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.optimizer._add_allreduce_graph": [[64, 85], ["model.TrainableParams", "int", "utils.CudaScope", "range", "len", "len", "len", "model.net.NCCLAllreduce", "caffe2.python.muji.Allreduce"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.detector.DetectionModelHelper.TrainableParams", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.c2.CudaScope"], ["", "def", "_add_allreduce_graph", "(", "model", ")", ":", "\n", "    ", "\"\"\"Construct the graph that performs Allreduce on the gradients.\"\"\"", "\n", "# Need to all-reduce the per-GPU gradients if training with more than 1 GPU", "\n", "all_params", "=", "model", ".", "TrainableParams", "(", ")", "\n", "assert", "len", "(", "all_params", ")", "%", "cfg", ".", "NUM_GPUS", "==", "0", "\n", "# The model parameters are replicated on each GPU, get the number", "\n", "# distinct parameter blobs (i.e., the number of parameter blobs on", "\n", "# each GPU)", "\n", "params_per_gpu", "=", "int", "(", "len", "(", "all_params", ")", "/", "cfg", ".", "NUM_GPUS", ")", "\n", "with", "c2_utils", ".", "CudaScope", "(", "0", ")", ":", "\n", "# Iterate over distinct parameter blobs", "\n", "        ", "for", "i", "in", "range", "(", "params_per_gpu", ")", ":", "\n", "# Gradients from all GPUs for this parameter blob", "\n", "            ", "gradients", "=", "[", "\n", "model", ".", "param_to_grad", "[", "p", "]", "for", "p", "in", "all_params", "[", "i", ":", ":", "params_per_gpu", "]", "\n", "]", "\n", "if", "len", "(", "gradients", ")", ">", "0", ":", "\n", "                ", "if", "cfg", ".", "USE_NCCL", ":", "\n", "                    ", "model", ".", "net", ".", "NCCLAllreduce", "(", "gradients", ",", "gradients", ")", "\n", "", "else", ":", "\n", "                    ", "muji", ".", "Allreduce", "(", "model", ".", "net", ",", "gradients", ",", "reduced_affix", "=", "''", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.optimizer._add_parameter_update_ops": [[87, 123], ["utils.NamedCudaScope", "model.param_init_net.ConstantFill", "model.param_init_net.ConstantFill", "model.param_init_net.ConstantFill", "model.TrainableParams", "logger.info", "model.param_init_net.ConstantFill", "model.net.MomentumSGDUpdate", "model.Scale", "model.WeightedSum", "str"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.c2.NamedCudaScope", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.detector.DetectionModelHelper.TrainableParams"], ["", "", "", "", "", "def", "_add_parameter_update_ops", "(", "model", ",", "gpu_id", ")", ":", "\n", "    ", "\"\"\"Construct the optimizer update op graph.\"\"\"", "\n", "with", "c2_utils", ".", "NamedCudaScope", "(", "gpu_id", ")", ":", "\n", "# Learning rate of 0 is a dummy value to be set properly at the", "\n", "# start of training", "\n", "        ", "lr", "=", "model", ".", "param_init_net", ".", "ConstantFill", "(", "\n", "[", "]", ",", "'lr'", ",", "shape", "=", "[", "1", "]", ",", "value", "=", "0.0", "\n", ")", "\n", "one", "=", "model", ".", "param_init_net", ".", "ConstantFill", "(", "\n", "[", "]", ",", "'one'", ",", "shape", "=", "[", "1", "]", ",", "value", "=", "1.0", "\n", ")", "\n", "wd", "=", "model", ".", "param_init_net", ".", "ConstantFill", "(", "\n", "[", "]", ",", "'wd'", ",", "shape", "=", "[", "1", "]", ",", "value", "=", "cfg", ".", "SOLVER", ".", "WEIGHT_DECAY", "\n", ")", "\n", "\n", "for", "param", "in", "model", ".", "TrainableParams", "(", "gpu_id", "=", "gpu_id", ")", ":", "\n", "            ", "logger", ".", "info", "(", "'param '", "+", "str", "(", "param", ")", "+", "' will be updated'", ")", "\n", "param_grad", "=", "model", ".", "param_to_grad", "[", "param", "]", "\n", "# Initialize momentum vector", "\n", "param_momentum", "=", "model", ".", "param_init_net", ".", "ConstantFill", "(", "\n", "[", "param", "]", ",", "param", "+", "'_momentum'", ",", "value", "=", "0.0", "\n", ")", "\n", "if", "param", "in", "model", ".", "biases", ":", "\n", "# Special treatment for biases (mainly to match historical impl.", "\n", "# details):", "\n", "# (1) Do not apply weight decay", "\n", "# (2) Use a 2x higher learning rate", "\n", "                ", "model", ".", "Scale", "(", "param_grad", ",", "param_grad", ",", "scale", "=", "2.0", ")", "\n", "", "elif", "cfg", ".", "SOLVER", ".", "WEIGHT_DECAY", ">", "0", ":", "\n", "# Apply weight decay to non-bias weights", "\n", "                ", "model", ".", "WeightedSum", "(", "[", "param_grad", ",", "one", ",", "param", ",", "wd", "]", ",", "param_grad", ")", "\n", "# Update param_grad and param_momentum in place", "\n", "", "model", ".", "net", ".", "MomentumSGDUpdate", "(", "\n", "[", "param_grad", ",", "param_momentum", ",", "lr", ",", "param", "]", ",", "\n", "[", "param_grad", ",", "param_momentum", ",", "param", "]", ",", "\n", "momentum", "=", "cfg", ".", "SOLVER", ".", "MOMENTUM", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.ops.generate_proposals.GenerateProposalsOp.__init__": [[35, 40], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "anchors", ",", "spatial_scale", ",", "train", ")", ":", "\n", "        ", "self", ".", "_anchors", "=", "anchors", "\n", "self", ".", "_num_anchors", "=", "self", ".", "_anchors", ".", "shape", "[", "0", "]", "\n", "self", ".", "_feat_stride", "=", "1.", "/", "spatial_scale", "\n", "self", ".", "_train", "=", "train", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.ops.generate_proposals.GenerateProposalsOp.forward": [[41, 105], ["numpy.meshgrid", "numpy.vstack().transpose", "all_anchors.reshape.reshape.reshape", "numpy.empty", "numpy.empty", "range", "outputs[].reshape", "numpy.arange", "numpy.arange", "generate_proposals.GenerateProposalsOp.proposals_for_one_image", "numpy.hstack", "numpy.append", "numpy.append", "len", "outputs[].reshape", "numpy.vstack", "numpy.ones", "shift_x.ravel", "shift_y.ravel", "shift_x.ravel", "shift_y.ravel"], "methods", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.ops.generate_proposals.GenerateProposalsOp.proposals_for_one_image", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.blob.ones"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "outputs", ")", ":", "\n", "        ", "\"\"\"See modeling.detector.GenerateProposals for inputs/outputs\n        documentation.\n        \"\"\"", "\n", "# 1. for each location i in a (H, W) grid:", "\n", "#      generate A anchor boxes centered on cell i", "\n", "#      apply predicted bbox deltas to each of the A anchors at cell i", "\n", "# 2. clip predicted boxes to image", "\n", "# 3. remove predicted boxes with either height or width < threshold", "\n", "# 4. sort all (proposal, score) pairs by score from highest to lowest", "\n", "# 5. take the top pre_nms_topN proposals before NMS", "\n", "# 6. apply NMS with a loose threshold (0.7) to the remaining proposals", "\n", "# 7. take after_nms_topN proposals after NMS", "\n", "# 8. return the top proposals", "\n", "\n", "# predicted probability of fg object for each RPN anchor", "\n", "scores", "=", "inputs", "[", "0", "]", ".", "data", "\n", "# predicted achors transformations", "\n", "bbox_deltas", "=", "inputs", "[", "1", "]", ".", "data", "\n", "# input image (height, width, scale), in which scale is the scale factor", "\n", "# applied to the original dataset image to get the network input image", "\n", "im_info", "=", "inputs", "[", "2", "]", ".", "data", "\n", "# 1. Generate proposals from bbox deltas and shifted anchors", "\n", "height", ",", "width", "=", "scores", ".", "shape", "[", "-", "2", ":", "]", "\n", "# Enumerate all shifted positions on the (H, W) grid", "\n", "shift_x", "=", "np", ".", "arange", "(", "0", ",", "width", ")", "*", "self", ".", "_feat_stride", "\n", "shift_y", "=", "np", ".", "arange", "(", "0", ",", "height", ")", "*", "self", ".", "_feat_stride", "\n", "shift_x", ",", "shift_y", "=", "np", ".", "meshgrid", "(", "shift_x", ",", "shift_y", ",", "copy", "=", "False", ")", "\n", "# Convert to (K, 4), K=H*W, where the columns are (dx, dy, dx, dy)", "\n", "# shift pointing to each grid location", "\n", "shifts", "=", "np", ".", "vstack", "(", "(", "shift_x", ".", "ravel", "(", ")", ",", "shift_y", ".", "ravel", "(", ")", ",", "\n", "shift_x", ".", "ravel", "(", ")", ",", "shift_y", ".", "ravel", "(", ")", ")", ")", ".", "transpose", "(", ")", "\n", "\n", "# Broacast anchors over shifts to enumerate all anchors at all positions", "\n", "# in the (H, W) grid:", "\n", "#   - add A anchors of shape (1, A, 4) to", "\n", "#   - K shifts of shape (K, 1, 4) to get", "\n", "#   - all shifted anchors of shape (K, A, 4)", "\n", "#   - reshape to (K*A, 4) shifted anchors", "\n", "num_images", "=", "inputs", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "A", "=", "self", ".", "_num_anchors", "\n", "K", "=", "shifts", ".", "shape", "[", "0", "]", "\n", "all_anchors", "=", "self", ".", "_anchors", "[", "np", ".", "newaxis", ",", ":", ",", ":", "]", "+", "shifts", "[", ":", ",", "np", ".", "newaxis", ",", ":", "]", "\n", "all_anchors", "=", "all_anchors", ".", "reshape", "(", "(", "K", "*", "A", ",", "4", ")", ")", "\n", "\n", "rois", "=", "np", ".", "empty", "(", "(", "0", ",", "5", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "roi_probs", "=", "np", ".", "empty", "(", "(", "0", ",", "1", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "im_i", "in", "range", "(", "num_images", ")", ":", "\n", "            ", "im_i_boxes", ",", "im_i_probs", "=", "self", ".", "proposals_for_one_image", "(", "\n", "im_info", "[", "im_i", ",", ":", "]", ",", "all_anchors", ",", "bbox_deltas", "[", "im_i", ",", ":", ",", ":", ",", ":", "]", ",", "\n", "scores", "[", "im_i", ",", ":", ",", ":", ",", ":", "]", "\n", ")", "\n", "batch_inds", "=", "im_i", "*", "np", ".", "ones", "(", "\n", "(", "im_i_boxes", ".", "shape", "[", "0", "]", ",", "1", ")", ",", "dtype", "=", "np", ".", "float32", "\n", ")", "\n", "im_i_rois", "=", "np", ".", "hstack", "(", "(", "batch_inds", ",", "im_i_boxes", ")", ")", "\n", "rois", "=", "np", ".", "append", "(", "rois", ",", "im_i_rois", ",", "axis", "=", "0", ")", "\n", "roi_probs", "=", "np", ".", "append", "(", "roi_probs", ",", "im_i_probs", ",", "axis", "=", "0", ")", "\n", "\n", "", "outputs", "[", "0", "]", ".", "reshape", "(", "rois", ".", "shape", ")", "\n", "outputs", "[", "0", "]", ".", "data", "[", "...", "]", "=", "rois", "\n", "if", "len", "(", "outputs", ")", ">", "1", ":", "\n", "            ", "outputs", "[", "1", "]", ".", "reshape", "(", "roi_probs", ".", "shape", ")", "\n", "outputs", "[", "1", "]", ".", "data", "[", "...", "]", "=", "roi_probs", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.ops.generate_proposals.GenerateProposalsOp.proposals_for_one_image": [[106, 172], ["bbox_deltas.transpose().reshape.transpose().reshape.transpose().reshape", "scores.transpose().reshape.transpose().reshape.transpose().reshape", "utils.bbox_transform", "utils.clip_tiled_boxes", "generate_proposals._filter_boxes", "numpy.argsort", "numpy.argsort", "utils.nms", "bbox_deltas.transpose().reshape.transpose().reshape.transpose", "scores.transpose().reshape.transpose().reshape.transpose", "len", "numpy.argpartition", "numpy.hstack", "scores.transpose().reshape.transpose().reshape.squeeze", "scores[].squeeze", "scores.transpose().reshape.transpose().reshape.squeeze"], "methods", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.boxes.bbox_transform", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.boxes.clip_tiled_boxes", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.ops.generate_proposals._filter_boxes", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.boxes.nms"], ["", "", "def", "proposals_for_one_image", "(", "\n", "self", ",", "im_info", ",", "all_anchors", ",", "bbox_deltas", ",", "scores", "\n", ")", ":", "\n", "# Get mode-dependent configuration", "\n", "        ", "cfg_key", "=", "'TRAIN'", "if", "self", ".", "_train", "else", "'TEST'", "\n", "pre_nms_topN", "=", "cfg", "[", "cfg_key", "]", ".", "RPN_PRE_NMS_TOP_N", "\n", "post_nms_topN", "=", "cfg", "[", "cfg_key", "]", ".", "RPN_POST_NMS_TOP_N", "\n", "nms_thresh", "=", "cfg", "[", "cfg_key", "]", ".", "RPN_NMS_THRESH", "\n", "min_size", "=", "cfg", "[", "cfg_key", "]", ".", "RPN_MIN_SIZE", "\n", "# Transpose and reshape predicted bbox transformations to get them", "\n", "# into the same order as the anchors:", "\n", "#   - bbox deltas will be (4 * A, H, W) format from conv output", "\n", "#   - transpose to (H, W, 4 * A)", "\n", "#   - reshape to (H * W * A, 4) where rows are ordered by (H, W, A)", "\n", "#     in slowest to fastest order to match the enumerated anchors", "\n", "bbox_deltas", "=", "bbox_deltas", ".", "transpose", "(", "(", "1", ",", "2", ",", "0", ")", ")", ".", "reshape", "(", "(", "-", "1", ",", "4", ")", ")", "\n", "\n", "# Same story for the scores:", "\n", "#   - scores are (A, H, W) format from conv output", "\n", "#   - transpose to (H, W, A)", "\n", "#   - reshape to (H * W * A, 1) where rows are ordered by (H, W, A)", "\n", "#     to match the order of anchors and bbox_deltas", "\n", "scores", "=", "scores", ".", "transpose", "(", "(", "1", ",", "2", ",", "0", ")", ")", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "\n", "#print('all scores in generate proposals:', scores.shape)", "\n", "# 4. sort all (proposal, score) pairs by score from highest to lowest", "\n", "# 5. take top pre_nms_topN (e.g. 6000)", "\n", "if", "pre_nms_topN", "<=", "0", "or", "pre_nms_topN", ">=", "len", "(", "scores", ")", ":", "\n", "            ", "order", "=", "np", ".", "argsort", "(", "-", "scores", ".", "squeeze", "(", ")", ")", "\n", "", "else", ":", "\n", "# Avoid sorting possibly large arrays; First partition to get top K", "\n", "# unsorted and then sort just those (~20x faster for 200k scores)", "\n", "            ", "inds", "=", "np", ".", "argpartition", "(", "\n", "-", "scores", ".", "squeeze", "(", ")", ",", "pre_nms_topN", "\n", ")", "[", ":", "pre_nms_topN", "]", "\n", "order", "=", "np", ".", "argsort", "(", "-", "scores", "[", "inds", "]", ".", "squeeze", "(", ")", ")", "\n", "order", "=", "inds", "[", "order", "]", "\n", "", "bbox_deltas", "=", "bbox_deltas", "[", "order", ",", ":", "]", "\n", "all_anchors", "=", "all_anchors", "[", "order", ",", ":", "]", "\n", "scores", "=", "scores", "[", "order", "]", "\n", "#print('scores after first limit:', scores.shape)", "\n", "# Transform anchors into proposals via bbox transformations", "\n", "proposals", "=", "box_utils", ".", "bbox_transform", "(", "\n", "all_anchors", ",", "bbox_deltas", ",", "(", "1.0", ",", "1.0", ",", "1.0", ",", "1.0", ")", ")", "\n", "\n", "# 2. clip proposals to image (may result in proposals with zero area", "\n", "# that will be removed in the next step)", "\n", "proposals", "=", "box_utils", ".", "clip_tiled_boxes", "(", "proposals", ",", "im_info", "[", ":", "2", "]", ")", "\n", "\n", "# 3. remove predicted boxes with either height or width < min_size", "\n", "keep", "=", "_filter_boxes", "(", "proposals", ",", "min_size", ",", "im_info", ")", "\n", "proposals", "=", "proposals", "[", "keep", ",", ":", "]", "\n", "scores", "=", "scores", "[", "keep", "]", "\n", "\n", "# 6. apply loose nms (e.g. threshold = 0.7)", "\n", "# 7. take after_nms_topN (e.g. 300)", "\n", "# 8. return the top proposals (-> RoIs top)", "\n", "if", "nms_thresh", ">", "0", ":", "\n", "#print('scores', proposals.shape)", "\n", "            ", "keep", "=", "box_utils", ".", "nms", "(", "np", ".", "hstack", "(", "(", "proposals", ",", "scores", ")", ")", ",", "nms_thresh", ")", "\n", "if", "post_nms_topN", ">", "0", ":", "\n", "                ", "keep", "=", "keep", "[", ":", "post_nms_topN", "]", "\n", "", "proposals", "=", "proposals", "[", "keep", ",", ":", "]", "\n", "scores", "=", "scores", "[", "keep", "]", "\n", "#print('scores in generate proposals after nms:', scores.shape)", "\n", "", "return", "proposals", ",", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.ops.generate_proposals._filter_boxes": [[174, 187], ["numpy.where"], "function", ["None"], ["", "", "def", "_filter_boxes", "(", "boxes", ",", "min_size", ",", "im_info", ")", ":", "\n", "    ", "\"\"\"Only keep boxes with both sides >= min_size and center within the image.\n    \"\"\"", "\n", "# Scale min_size to match image scale", "\n", "min_size", "*=", "im_info", "[", "2", "]", "\n", "ws", "=", "boxes", "[", ":", ",", "2", "]", "-", "boxes", "[", ":", ",", "0", "]", "+", "1", "\n", "hs", "=", "boxes", "[", ":", ",", "3", "]", "-", "boxes", "[", ":", ",", "1", "]", "+", "1", "\n", "x_ctr", "=", "boxes", "[", ":", ",", "0", "]", "+", "ws", "/", "2.", "\n", "y_ctr", "=", "boxes", "[", ":", ",", "1", "]", "+", "hs", "/", "2.", "\n", "keep", "=", "np", ".", "where", "(", "\n", "(", "ws", ">=", "min_size", ")", "&", "(", "hs", ">=", "min_size", ")", "&", "\n", "(", "x_ctr", "<", "im_info", "[", "1", "]", ")", "&", "(", "y_ctr", "<", "im_info", "[", "0", "]", ")", ")", "[", "0", "]", "\n", "return", "keep", "\n", "", ""]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.ops.collect_and_distribute_fpn_rpn_proposals.CollectAndDistributeFpnRpnProposalsOp.__init__": [[31, 35], ["dict"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "train", ",", "ohem", "=", "False", ")", ":", "\n", "        ", "self", ".", "_train", "=", "train", "\n", "self", ".", "_ohem", "=", "ohem", "\n", "self", ".", "_tmp", "=", "dict", "(", "i", "=", "0", ",", "val", "=", "[", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.ops.collect_and_distribute_fpn_rpn_proposals.CollectAndDistributeFpnRpnProposalsOp.forward": [[36, 69], ["collect_and_distribute_fpn_rpn_proposals.collect", "utils.deserialize", "datasets.json_dataset.add_proposals", "roi_data.fast_rcnn.get_fast_rcnn_blob_names", "roi_data.fast_rcnn.add_fast_rcnn_blobs", "enumerate", "collect_and_distribute_fpn_rpn_proposals.distribute", "utils.py_op_copy_blob"], "methods", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.ops.collect_and_distribute_fpn_rpn_proposals.collect", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.blob.deserialize", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.json_dataset.add_proposals", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.fast_rcnn.get_fast_rcnn_blob_names", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.fast_rcnn.add_fast_rcnn_blobs", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.ops.collect_and_distribute_fpn_rpn_proposals.distribute", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.blob.py_op_copy_blob"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "outputs", ")", ":", "\n", "        ", "\"\"\"See modeling.detector.CollectAndDistributeFpnRpnProposals for\n        inputs/outputs documentation.\n        \"\"\"", "\n", "# inputs is", "\n", "# [rpn_rois_fpn2, ..., rpn_rois_fpn6,", "\n", "#  rpn_roi_probs_fpn2, ..., rpn_roi_probs_fpn6]", "\n", "# If training with Faster R-CNN, then inputs will additionally include", "\n", "#  + [roidb, im_info]", "\n", "rois", "=", "collect", "(", "inputs", ",", "self", ".", "_train", ")", "\n", "if", "self", ".", "_train", ":", "\n", "# During training we reuse the data loader code. We populate roidb", "\n", "# entries on the fly using the rois generated by RPN.", "\n", "# im_info: [[im_height, im_width, im_scale], ...]", "\n", "            ", "im_info", "=", "inputs", "[", "-", "1", "]", ".", "data", "\n", "im_scales", "=", "im_info", "[", ":", ",", "2", "]", "\n", "roidb", "=", "blob_utils", ".", "deserialize", "(", "inputs", "[", "-", "2", "]", ".", "data", ")", "\n", "# For historical consistency with the original Faster R-CNN", "\n", "# implementation we are *not* filtering crowd proposals.", "\n", "# This choice should be investigated in the future (it likely does", "\n", "# not matter).", "\n", "json_dataset", ".", "add_proposals", "(", "roidb", ",", "rois", ",", "im_scales", ",", "crowd_thresh", "=", "0", ",", "tmp", "=", "self", ".", "_tmp", ")", "\n", "# Compute training labels for the RPN proposals; also handles", "\n", "# distributing the proposals over FPN levels", "\n", "output_blob_names", "=", "roi_data", ".", "fast_rcnn", ".", "get_fast_rcnn_blob_names", "(", "ohem", "=", "self", ".", "_ohem", ")", "\n", "blobs", "=", "{", "k", ":", "[", "]", "for", "k", "in", "output_blob_names", "}", "\n", "roi_data", ".", "fast_rcnn", ".", "add_fast_rcnn_blobs", "(", "blobs", ",", "im_scales", ",", "roidb", ",", "ohem", "=", "self", ".", "_ohem", ")", "\n", "for", "i", ",", "k", "in", "enumerate", "(", "output_blob_names", ")", ":", "\n", "                ", "blob_utils", ".", "py_op_copy_blob", "(", "blobs", "[", "k", "]", ",", "outputs", "[", "i", "]", ")", "\n", "", "", "else", ":", "\n", "# For inference we have a special code path that avoids some data", "\n", "# loader overhead", "\n", "            ", "distribute", "(", "rois", ",", "None", ",", "outputs", ",", "self", ".", "_train", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.ops.collect_and_distribute_fpn_rpn_proposals.collect": [[71, 89], ["numpy.concatenate", "numpy.concatenate().squeeze", "numpy.argsort", "numpy.concatenate"], "function", ["None"], ["", "", "", "def", "collect", "(", "inputs", ",", "is_training", ")", ":", "\n", "    ", "cfg_key", "=", "'TRAIN'", "if", "is_training", "else", "'TEST'", "\n", "post_nms_topN", "=", "cfg", "[", "cfg_key", "]", ".", "RPN_POST_NMS_TOP_N", "\n", "k_max", "=", "cfg", ".", "FPN", ".", "RPN_MAX_LEVEL", "\n", "k_min", "=", "cfg", ".", "FPN", ".", "RPN_MIN_LEVEL", "\n", "num_lvls", "=", "k_max", "-", "k_min", "+", "1", "\n", "roi_inputs", "=", "inputs", "[", ":", "num_lvls", "]", "\n", "score_inputs", "=", "inputs", "[", "num_lvls", ":", "]", "\n", "if", "is_training", ":", "\n", "        ", "score_inputs", "=", "score_inputs", "[", ":", "-", "2", "]", "\n", "\n", "# rois are in [[batch_idx, x0, y0, x1, y2], ...] format", "\n", "# Combine predictions across all levels and retain the top scoring", "\n", "", "rois", "=", "np", ".", "concatenate", "(", "[", "blob", ".", "data", "for", "blob", "in", "roi_inputs", "]", ")", "\n", "scores", "=", "np", ".", "concatenate", "(", "[", "blob", ".", "data", "for", "blob", "in", "score_inputs", "]", ")", ".", "squeeze", "(", ")", "\n", "inds", "=", "np", ".", "argsort", "(", "-", "scores", ")", "[", ":", "post_nms_topN", "]", "\n", "rois", "=", "rois", "[", "inds", ",", ":", "]", "\n", "return", "rois", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.ops.collect_and_distribute_fpn_rpn_proposals.distribute": [[91, 114], ["modeling.map_rois_to_fpn_levels", "outputs[].reshape", "numpy.empty", "enumerate", "numpy.argsort", "utils.py_op_copy_blob", "range", "outputs[].reshape", "numpy.concatenate", "np.argsort.astype", "numpy.where"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.FPN.map_rois_to_fpn_levels", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.blob.py_op_copy_blob"], ["", "def", "distribute", "(", "rois", ",", "label_blobs", ",", "outputs", ",", "train", ")", ":", "\n", "    ", "\"\"\"To understand the output blob order see return value of\n    roi_data.fast_rcnn.get_fast_rcnn_blob_names(is_training=False)\n    \"\"\"", "\n", "lvl_min", "=", "cfg", ".", "FPN", ".", "ROI_MIN_LEVEL", "\n", "lvl_max", "=", "cfg", ".", "FPN", ".", "ROI_MAX_LEVEL", "\n", "lvls", "=", "fpn", ".", "map_rois_to_fpn_levels", "(", "rois", "[", ":", ",", "1", ":", "5", "]", ",", "lvl_min", ",", "lvl_max", ")", "\n", "\n", "outputs", "[", "0", "]", ".", "reshape", "(", "rois", ".", "shape", ")", "\n", "outputs", "[", "0", "]", ".", "data", "[", "...", "]", "=", "rois", "\n", "\n", "# Create new roi blobs for each FPN level", "\n", "# (See: modeling.FPN.add_multilevel_roi_blobs which is similar but annoying", "\n", "# to generalize to support this particular case.)", "\n", "rois_idx_order", "=", "np", ".", "empty", "(", "(", "0", ",", ")", ")", "\n", "for", "output_idx", ",", "lvl", "in", "enumerate", "(", "range", "(", "lvl_min", ",", "lvl_max", "+", "1", ")", ")", ":", "\n", "        ", "idx_lvl", "=", "np", ".", "where", "(", "lvls", "==", "lvl", ")", "[", "0", "]", "\n", "blob_roi_level", "=", "rois", "[", "idx_lvl", ",", ":", "]", "\n", "outputs", "[", "output_idx", "+", "1", "]", ".", "reshape", "(", "blob_roi_level", ".", "shape", ")", "\n", "outputs", "[", "output_idx", "+", "1", "]", ".", "data", "[", "...", "]", "=", "blob_roi_level", "\n", "rois_idx_order", "=", "np", ".", "concatenate", "(", "(", "rois_idx_order", ",", "idx_lvl", ")", ")", "\n", "", "rois_idx_restore", "=", "np", ".", "argsort", "(", "rois_idx_order", ")", "\n", "blob_utils", ".", "py_op_copy_blob", "(", "rois_idx_restore", ".", "astype", "(", "np", ".", "int32", ")", ",", "outputs", "[", "-", "1", "]", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.ops.generate_proposal_labels.GenerateProposalLabelsOp.__init__": [[34, 37], ["dict"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "ohem", "=", "False", ")", ":", "\n", "        ", "self", ".", "_ohem", "=", "ohem", "\n", "self", ".", "_tmp", "=", "dict", "(", "i", "=", "0", ",", "val", "=", "[", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.ops.generate_proposal_labels.GenerateProposalLabelsOp.forward": [[38, 59], ["utils.blob.deserialize", "roi_data.fast_rcnn.get_fast_rcnn_blob_names", "datasets.json_dataset.add_proposals", "roi_data.fast_rcnn.add_fast_rcnn_blobs", "enumerate", "utils.blob.py_op_copy_blob"], "methods", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.blob.deserialize", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.fast_rcnn.get_fast_rcnn_blob_names", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.json_dataset.add_proposals", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.fast_rcnn.add_fast_rcnn_blobs", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.blob.py_op_copy_blob"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "outputs", ")", ":", "\n", "        ", "\"\"\"See modeling.detector.GenerateProposalLabels for inputs/outputs\n        documentation.\n        \"\"\"", "\n", "# During training we reuse the data loader code. We populate roidb", "\n", "# entries on the fly using the rois generated by RPN.", "\n", "# im_info: [[im_height, im_width, im_scale], ...]", "\n", "rois", "=", "inputs", "[", "0", "]", ".", "data", "\n", "roidb", "=", "blob_utils", ".", "deserialize", "(", "inputs", "[", "1", "]", ".", "data", ")", "\n", "im_info", "=", "inputs", "[", "2", "]", ".", "data", "\n", "im_scales", "=", "im_info", "[", ":", ",", "2", "]", "\n", "output_blob_names", "=", "roi_data", ".", "fast_rcnn", ".", "get_fast_rcnn_blob_names", "(", "ohem", "=", "self", ".", "_ohem", ")", "\n", "# For historical consistency with the original Faster R-CNN", "\n", "# implementation we are *not* filtering crowd proposals.", "\n", "# This choice should be investigated in the future (it likely does", "\n", "# not matter).", "\n", "json_dataset", ".", "add_proposals", "(", "roidb", ",", "rois", ",", "im_scales", ",", "crowd_thresh", "=", "0", ",", "tmp", "=", "self", ".", "_tmp", ")", "\n", "blobs", "=", "{", "k", ":", "[", "]", "for", "k", "in", "output_blob_names", "}", "\n", "roi_data", ".", "fast_rcnn", ".", "add_fast_rcnn_blobs", "(", "blobs", ",", "im_scales", ",", "roidb", ",", "self", ".", "_ohem", ")", "\n", "for", "i", ",", "k", "in", "enumerate", "(", "output_blob_names", ")", ":", "\n", "            ", "blob_utils", ".", "py_op_copy_blob", "(", "blobs", "[", "k", "]", ",", "outputs", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.ops.generate_proposal_labels.GenerateHardProposalLabelsOp.forward": [[62, 83], ["roi_data.fast_rcnn.get_fast_rcnn_blob_names", "roi_data.fast_rcnn.filter_fast_rcnn_blobs", "enumerate", "utils.blob.py_op_copy_blob", "enumerate"], "methods", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.fast_rcnn.get_fast_rcnn_blob_names", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.fast_rcnn.filter_fast_rcnn_blobs", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.blob.py_op_copy_blob"], ["    ", "def", "forward", "(", "self", ",", "inputs", ",", "outputs", ")", ":", "\n", "        ", "\"\"\"See modeling.detector.GenerateHardProposalLabels for inputs/outputs\n        documentation.\n        \"\"\"", "\n", "# get list of output names", "\n", "output_blob_names", "=", "roi_data", ".", "fast_rcnn", ".", "get_fast_rcnn_blob_names", "(", ")", "\n", "\n", "#for i in range(len(inputs)):", "\n", "#    print('inputs  ', i, 'with shape', inputs[i].shape )", "\n", "\n", "#print('all output blobs:',output_blob_names)", "\n", "\n", "# associated original input with each output blob", "\n", "blobs", "=", "{", "k", ":", "inputs", "[", "i", "+", "1", "]", ".", "data", "for", "i", ",", "k", "in", "enumerate", "(", "output_blob_names", ")", "}", "\n", "\n", "cls_scores", "=", "inputs", "[", "0", "]", ".", "data", "\n", "\n", "output_blobs", "=", "roi_data", ".", "fast_rcnn", ".", "filter_fast_rcnn_blobs", "(", "blobs", ",", "output_blob_names", ",", "cls_scores", ")", "\n", "\n", "for", "i", ",", "k", "in", "enumerate", "(", "output_blob_names", ")", ":", "\n", "            ", "blob_utils", ".", "py_op_copy_blob", "(", "output_blobs", "[", "k", "]", ",", "outputs", "[", "i", "]", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.rpn.get_rpn_blob_names": [[35, 62], ["range", "str", "str", "str", "str", "str"], "function", ["None"], ["def", "get_rpn_blob_names", "(", "is_training", "=", "True", ")", ":", "\n", "    ", "\"\"\"Blob names used by RPN.\"\"\"", "\n", "# im_info: (height, width, image scale)", "\n", "blob_names", "=", "[", "'im_info'", "]", "\n", "if", "is_training", ":", "\n", "# gt boxes: (batch_idx, x1, y1, x2, y2, cls)", "\n", "        ", "blob_names", "+=", "[", "'roidb'", "]", "\n", "if", "cfg", ".", "FPN", ".", "FPN_ON", "and", "cfg", ".", "FPN", ".", "MULTILEVEL_RPN", ":", "\n", "# Same format as RPN blobs, but one per FPN level", "\n", "            ", "for", "lvl", "in", "range", "(", "cfg", ".", "FPN", ".", "RPN_MIN_LEVEL", ",", "cfg", ".", "FPN", ".", "RPN_MAX_LEVEL", "+", "1", ")", ":", "\n", "                ", "blob_names", "+=", "[", "\n", "'rpn_labels_int32_wide_fpn'", "+", "str", "(", "lvl", ")", ",", "\n", "'rpn_label_loss_weights_wide_fpn'", "+", "str", "(", "lvl", ")", ",", "\n", "'rpn_bbox_targets_wide_fpn'", "+", "str", "(", "lvl", ")", ",", "\n", "'rpn_bbox_inside_weights_wide_fpn'", "+", "str", "(", "lvl", ")", ",", "\n", "'rpn_bbox_outside_weights_wide_fpn'", "+", "str", "(", "lvl", ")", "\n", "]", "\n", "", "", "else", ":", "\n", "# Single level RPN blobs", "\n", "            ", "blob_names", "+=", "[", "\n", "'rpn_labels_int32_wide'", ",", "\n", "'rpn_label_loss_weights_wide'", ",", "\n", "'rpn_bbox_targets_wide'", ",", "\n", "'rpn_bbox_inside_weights_wide'", ",", "\n", "'rpn_bbox_outside_weights_wide'", "\n", "]", "\n", "", "", "return", "blob_names", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.rpn.add_rpn_blobs": [[64, 137], ["enumerate", "blobs.items", "enumerate", "utils.serialize", "range", "numpy.concatenate", "roi_data.get_field_of_anchors", "numpy.round", "numpy.round", "utils.zeros", "numpy.array", "blobs[].append", "roi_data.get_field_of_anchors", "foas.append", "numpy.where", "rpn._get_rpn_blobs", "enumerate", "rpn._get_rpn_blobs", "_get_rpn_blobs.items", "isinstance", "numpy.concatenate", "range", "len", "range", "rpn_blobs[].items", "blobs[].append", "len", "len", "blobs[].append", "str"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.blob.serialize", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.data_utils.get_field_of_anchors", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.blob.zeros", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.data_utils.get_field_of_anchors", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.rpn._get_rpn_blobs", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.rpn._get_rpn_blobs"], ["", "def", "add_rpn_blobs", "(", "blobs", ",", "im_scales", ",", "roidb", ")", ":", "\n", "    ", "\"\"\"Add blobs needed training RPN-only and end-to-end Faster R-CNN models.\"\"\"", "\n", "if", "cfg", ".", "FPN", ".", "FPN_ON", "and", "cfg", ".", "FPN", ".", "MULTILEVEL_RPN", ":", "\n", "# RPN applied to many feature levels, as in the FPN paper", "\n", "        ", "k_max", "=", "cfg", ".", "FPN", ".", "RPN_MAX_LEVEL", "\n", "k_min", "=", "cfg", ".", "FPN", ".", "RPN_MIN_LEVEL", "\n", "foas", "=", "[", "]", "\n", "for", "lvl", "in", "range", "(", "k_min", ",", "k_max", "+", "1", ")", ":", "\n", "            ", "field_stride", "=", "2.", "**", "lvl", "\n", "anchor_sizes", "=", "(", "cfg", ".", "FPN", ".", "RPN_ANCHOR_START_SIZE", "*", "2.", "**", "(", "lvl", "-", "k_min", ")", ",", ")", "\n", "anchor_aspect_ratios", "=", "cfg", ".", "FPN", ".", "RPN_ASPECT_RATIOS", "\n", "foa", "=", "data_utils", ".", "get_field_of_anchors", "(", "\n", "field_stride", ",", "anchor_sizes", ",", "anchor_aspect_ratios", "\n", ")", "\n", "foas", ".", "append", "(", "foa", ")", "\n", "", "all_anchors", "=", "np", ".", "concatenate", "(", "[", "f", ".", "field_of_anchors", "for", "f", "in", "foas", "]", ")", "\n", "", "else", ":", "\n", "        ", "foa", "=", "data_utils", ".", "get_field_of_anchors", "(", "\n", "cfg", ".", "RPN", ".", "STRIDE", ",", "cfg", ".", "RPN", ".", "SIZES", ",", "cfg", ".", "RPN", ".", "ASPECT_RATIOS", "\n", ")", "\n", "all_anchors", "=", "foa", ".", "field_of_anchors", "\n", "\n", "", "for", "im_i", ",", "entry", "in", "enumerate", "(", "roidb", ")", ":", "\n", "        ", "scale", "=", "im_scales", "[", "im_i", "]", "\n", "im_height", "=", "np", ".", "round", "(", "entry", "[", "'height'", "]", "*", "scale", ")", "\n", "im_width", "=", "np", ".", "round", "(", "entry", "[", "'width'", "]", "*", "scale", ")", "\n", "gt_inds", "=", "np", ".", "where", "(", "\n", "(", "entry", "[", "'gt_classes'", "]", ">", "0", ")", "&", "(", "entry", "[", "'is_crowd'", "]", "==", "0", ")", "\n", ")", "[", "0", "]", "\n", "gt_rois", "=", "entry", "[", "'boxes'", "]", "[", "gt_inds", ",", ":", "]", "*", "scale", "\n", "# TODO(rbg): gt_boxes is poorly named;", "\n", "# should be something like 'gt_rois_info'", "\n", "gt_boxes", "=", "blob_utils", ".", "zeros", "(", "(", "len", "(", "gt_inds", ")", ",", "6", ")", ")", "\n", "gt_boxes", "[", ":", ",", "0", "]", "=", "im_i", "# batch inds", "\n", "gt_boxes", "[", ":", ",", "1", ":", "5", "]", "=", "gt_rois", "\n", "gt_boxes", "[", ":", ",", "5", "]", "=", "entry", "[", "'gt_classes'", "]", "[", "gt_inds", "]", "\n", "im_info", "=", "np", ".", "array", "(", "[", "[", "im_height", ",", "im_width", ",", "scale", "]", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "blobs", "[", "'im_info'", "]", ".", "append", "(", "im_info", ")", "\n", "\n", "# Add RPN targets", "\n", "if", "cfg", ".", "FPN", ".", "FPN_ON", "and", "cfg", ".", "FPN", ".", "MULTILEVEL_RPN", ":", "\n", "# RPN applied to many feature levels, as in the FPN paper", "\n", "            ", "rpn_blobs", "=", "_get_rpn_blobs", "(", "\n", "im_height", ",", "im_width", ",", "foas", ",", "all_anchors", ",", "gt_rois", "\n", ")", "\n", "for", "i", ",", "lvl", "in", "enumerate", "(", "range", "(", "k_min", ",", "k_max", "+", "1", ")", ")", ":", "\n", "                ", "for", "k", ",", "v", "in", "rpn_blobs", "[", "i", "]", ".", "items", "(", ")", ":", "\n", "                    ", "blobs", "[", "k", "+", "'_fpn'", "+", "str", "(", "lvl", ")", "]", ".", "append", "(", "v", ")", "\n", "", "", "", "else", ":", "\n", "# Classical RPN, applied to a single feature level", "\n", "            ", "rpn_blobs", "=", "_get_rpn_blobs", "(", "\n", "im_height", ",", "im_width", ",", "[", "foa", "]", ",", "all_anchors", ",", "gt_rois", "\n", ")", "\n", "for", "k", ",", "v", "in", "rpn_blobs", ".", "items", "(", ")", ":", "\n", "                ", "blobs", "[", "k", "]", ".", "append", "(", "v", ")", "\n", "\n", "", "", "", "for", "k", ",", "v", "in", "blobs", ".", "items", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "v", ",", "list", ")", "and", "len", "(", "v", ")", ">", "0", ":", "\n", "            ", "blobs", "[", "k", "]", "=", "np", ".", "concatenate", "(", "v", ")", "\n", "\n", "", "", "valid_keys", "=", "[", "\n", "'has_visible_keypoints'", ",", "'boxes'", ",", "'segms'", ",", "'seg_areas'", ",", "'gt_classes'", ",", "\n", "'gt_overlaps'", ",", "'is_crowd'", ",", "'box_to_gt_ind_map'", ",", "'gt_keypoints'", "\n", "]", "\n", "minimal_roidb", "=", "[", "{", "}", "for", "_", "in", "range", "(", "len", "(", "roidb", ")", ")", "]", "\n", "for", "i", ",", "e", "in", "enumerate", "(", "roidb", ")", ":", "\n", "        ", "for", "k", "in", "valid_keys", ":", "\n", "            ", "if", "k", "in", "e", ":", "\n", "                ", "minimal_roidb", "[", "i", "]", "[", "k", "]", "=", "e", "[", "k", "]", "\n", "", "", "", "blobs", "[", "'roidb'", "]", "=", "blob_utils", ".", "serialize", "(", "minimal_roidb", ")", "\n", "\n", "# Always return valid=True, since RPN minibatches are valid by design", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.rpn._get_rpn_blobs": [[139, 354], ["len", "logger.debug", "logger.debug", "logger.debug", "numpy.empty", "data_utils.unmap.fill", "int", "numpy.zeros", "roi_data.compute_targets", "numpy.zeros", "numpy.zeros", "numpy.sum", "roi_data.unmap", "roi_data.unmap", "roi_data.unmap", "roi_data.unmap", "roi_data.unmap", "numpy.arange", "len", "utils.bbox_overlaps", "box_utils.bbox_overlaps.argmax", "box_utils.bbox_overlaps.argmax", "numpy.where", "len", "numpy.where", "numpy.sum", "numpy.where", "len", "numpy.where", "numpy.ones", "_labels.reshape().transpose.reshape().transpose", "_label_loss_weights.reshape().transpose.reshape().transpose", "_bbox_targets.reshape().transpose.reshape().transpose", "_bbox_inside_weights.reshape().transpose.reshape().transpose", "_bbox_outside_weights.reshape().transpose.reshape().transpose", "blobs_out.append", "numpy.where", "numpy.where", "numpy.choice", "range", "numpy.setdiff1d", "dict", "len", "bboxes_assoc_gt.append", "int", "range", "numpy.randint", "_labels.reshape().transpose.reshape", "_label_loss_weights.reshape().transpose.reshape", "_bbox_targets.reshape().transpose.reshape", "_bbox_inside_weights.reshape().transpose.reshape", "_bbox_outside_weights.reshape().transpose.reshape", "numpy.arange", "numpy.arange", "numpy.where", "len", "numpy.sum", "numpy.round", "numpy.where", "len", "len", "len", "min", "numpy.choice", "keep_ids.extend", "numpy.setdiff1d", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.blob.zeros", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.data_utils.compute_targets", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.blob.zeros", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.blob.zeros", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.data_utils.unmap", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.data_utils.unmap", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.data_utils.unmap", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.data_utils.unmap", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.data_utils.unmap", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.blob.ones"], ["", "def", "_get_rpn_blobs", "(", "im_height", ",", "im_width", ",", "foas", ",", "all_anchors", ",", "gt_boxes", ")", ":", "\n", "    ", "total_anchors", "=", "all_anchors", ".", "shape", "[", "0", "]", "\n", "straddle_thresh", "=", "cfg", ".", "TRAIN", ".", "RPN_STRADDLE_THRESH", "\n", "\n", "if", "straddle_thresh", ">=", "0", ":", "\n", "# Only keep anchors inside the image by a margin of straddle_thresh", "\n", "# Set TRAIN.RPN_STRADDLE_THRESH to -1 (or a large value) to keep all", "\n", "# anchors", "\n", "        ", "inds_inside", "=", "np", ".", "where", "(", "\n", "(", "all_anchors", "[", ":", ",", "0", "]", ">=", "-", "straddle_thresh", ")", "&", "\n", "(", "all_anchors", "[", ":", ",", "1", "]", ">=", "-", "straddle_thresh", ")", "&", "\n", "(", "all_anchors", "[", ":", ",", "2", "]", "<", "im_width", "+", "straddle_thresh", ")", "&", "\n", "(", "all_anchors", "[", ":", ",", "3", "]", "<", "im_height", "+", "straddle_thresh", ")", "\n", ")", "[", "0", "]", "\n", "# keep only inside anchors", "\n", "anchors", "=", "all_anchors", "[", "inds_inside", ",", ":", "]", "\n", "", "else", ":", "\n", "        ", "inds_inside", "=", "np", ".", "arange", "(", "all_anchors", ".", "shape", "[", "0", "]", ")", "\n", "anchors", "=", "all_anchors", "\n", "", "num_inside", "=", "len", "(", "inds_inside", ")", "\n", "\n", "logger", ".", "debug", "(", "'total_anchors: {}'", ".", "format", "(", "total_anchors", ")", ")", "\n", "logger", ".", "debug", "(", "'inds_inside: {}'", ".", "format", "(", "num_inside", ")", ")", "\n", "logger", ".", "debug", "(", "'anchors.shape: {}'", ".", "format", "(", "anchors", ".", "shape", ")", ")", "\n", "\n", "# Compute anchor labels:", "\n", "# label=1 is positive, 0 is negative, -1 is don't care (ignore)", "\n", "labels", "=", "np", ".", "empty", "(", "(", "num_inside", ",", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "labels", ".", "fill", "(", "-", "1", ")", "\n", "if", "len", "(", "gt_boxes", ")", ">", "0", ":", "\n", "# Compute overlaps between the anchors and the gt boxes overlaps", "\n", "        ", "anchor_by_gt_overlap", "=", "box_utils", ".", "bbox_overlaps", "(", "anchors", ",", "gt_boxes", ")", "\n", "# Map from anchor to gt box that has highest overlap", "\n", "anchor_to_gt_argmax", "=", "anchor_by_gt_overlap", ".", "argmax", "(", "axis", "=", "1", ")", "\n", "# For each anchor, amount of overlap with most overlapping gt box", "\n", "anchor_to_gt_max", "=", "anchor_by_gt_overlap", "[", "np", ".", "arange", "(", "num_inside", ")", ",", "\n", "anchor_to_gt_argmax", "]", "\n", "\n", "# Map from gt box to an anchor that has highest overlap", "\n", "gt_to_anchor_argmax", "=", "anchor_by_gt_overlap", ".", "argmax", "(", "axis", "=", "0", ")", "\n", "# For each gt box, amount of overlap with most overlapping anchor", "\n", "gt_to_anchor_max", "=", "anchor_by_gt_overlap", "[", "\n", "gt_to_anchor_argmax", ",", "\n", "np", ".", "arange", "(", "anchor_by_gt_overlap", ".", "shape", "[", "1", "]", ")", "\n", "]", "\n", "# Find all anchors that share the max overlap amount", "\n", "# (this includes many ties)", "\n", "anchors_with_max_overlap", "=", "np", ".", "where", "(", "\n", "anchor_by_gt_overlap", "==", "gt_to_anchor_max", "\n", ")", "[", "0", "]", "\n", "\n", "# Fg label: for each gt use anchors with highest overlap", "\n", "# (including ties)", "\n", "labels", "[", "anchors_with_max_overlap", "]", "=", "1", "\n", "# Fg label: above threshold IOU", "\n", "labels", "[", "anchor_to_gt_max", ">=", "cfg", ".", "TRAIN", ".", "RPN_POSITIVE_OVERLAP", "]", "=", "1", "\n", "\n", "# subsample positive labels if we have too many", "\n", "", "num_fg", "=", "int", "(", "cfg", ".", "TRAIN", ".", "RPN_FG_FRACTION", "*", "cfg", ".", "TRAIN", ".", "RPN_BATCH_SIZE_PER_IM", ")", "\n", "fg_inds", "=", "np", ".", "where", "(", "labels", "==", "1", ")", "[", "0", "]", "\n", "\n", "if", "len", "(", "fg_inds", ")", ">", "num_fg", ":", "\n", "\n", "        ", "if", "not", "cfg", ".", "TRAIN", ".", "RPN_EVENLY_SELECT_POS_ROIS", ":", "\n", "            ", "disable_inds", "=", "npr", ".", "choice", "(", "\n", "fg_inds", ",", "size", "=", "(", "len", "(", "fg_inds", ")", "-", "num_fg", ")", ",", "replace", "=", "False", "\n", ")", "\n", "labels", "[", "disable_inds", "]", "=", "-", "1", "\n", "", "else", ":", "\n", "# new implementation that selects bboxes evenly for each object", "\n", "            ", "num_gt", "=", "gt_boxes", ".", "shape", "[", "0", "]", "\n", "\n", "# collect associated bboxes for each GT", "\n", "bboxes_assoc_gt", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_gt", ")", ":", "\n", "# get all bounding boxes associated with this gt", "\n", "                ", "bboxes_gt_i", "=", "np", ".", "where", "(", "anchor_to_gt_argmax", "==", "i", ")", "[", "0", "]", "\n", "\n", "# get those that are actually selected for fg class", "\n", "bboxes_gt_i", "=", "bboxes_gt_i", "[", "labels", "[", "bboxes_gt_i", "]", "==", "1", "]", "\n", "\n", "bboxes_assoc_gt", ".", "append", "(", "bboxes_gt_i", ")", "\n", "\n", "# evenly select positive lables to ensure all samples are considered", "\n", "", "keep_ids", "=", "[", "]", "\n", "\n", "# repeat this while still some space and we have any more bboxes", "\n", "while", "len", "(", "keep_ids", ")", "<", "num_fg", "and", "np", ".", "sum", "(", "[", "len", "(", "x", ")", "for", "x", "in", "bboxes_assoc_gt", "]", ")", ">", "0", ":", "\n", "\n", "# get how many space left and evenly distribute it over all GTs", "\n", "                ", "allowed_fg_per_sample", "=", "int", "(", "np", ".", "round", "(", "(", "num_fg", "-", "len", "(", "keep_ids", ")", ")", "/", "num_gt", ")", ")", "\n", "\n", "added_fg", "=", "0", "\n", "for", "i", "in", "range", "(", "num_gt", ")", ":", "\n", "                    ", "if", "len", "(", "bboxes_assoc_gt", "[", "i", "]", ")", ">", "0", ":", "\n", "                        ", "num_select_gt_i", "=", "min", "(", "allowed_fg_per_sample", ",", "len", "(", "bboxes_assoc_gt", "[", "i", "]", ")", ")", "\n", "# randomly select fg for this GT", "\n", "fg_seleced_for_gt_i", "=", "npr", ".", "choice", "(", "bboxes_assoc_gt", "[", "i", "]", ",", "size", "=", "num_select_gt_i", ",", "replace", "=", "False", ")", "\n", "\n", "# add them to list of ids to keep", "\n", "keep_ids", ".", "extend", "(", "fg_seleced_for_gt_i", ")", "\n", "\n", "added_fg", "=", "added_fg", "+", "len", "(", "fg_seleced_for_gt_i", ")", "\n", "\n", "# and remove them from bboxes_assoc_gt[i] for next loop", "\n", "bboxes_assoc_gt", "[", "i", "]", "=", "np", ".", "setdiff1d", "(", "bboxes_assoc_gt", "[", "i", "]", ",", "fg_seleced_for_gt_i", ")", "\n", "\n", "# we add extra check to avoid infinity loops", "\n", "", "", "if", "added_fg", "<=", "0", ":", "\n", "                    ", "break", "\n", "\n", "# revert from keep_ids to ids that need to be removed", "\n", "", "", "remove_ids", "=", "np", ".", "setdiff1d", "(", "np", ".", "where", "(", "labels", "==", "1", ")", "[", "0", "]", ",", "keep_ids", ")", "\n", "\n", "labels", "[", "remove_ids", "]", "=", "-", "1", "\n", "\n", "", "", "fg_inds", "=", "np", ".", "where", "(", "labels", "==", "1", ")", "[", "0", "]", "\n", "\n", "# subsample negative labels if we have too many", "\n", "# (samples with replacement, but since the set of bg inds is large most", "\n", "# samples will not have repeats)", "\n", "num_bg", "=", "cfg", ".", "TRAIN", ".", "RPN_BATCH_SIZE_PER_IM", "-", "np", ".", "sum", "(", "labels", "==", "1", ")", "\n", "bg_inds", "=", "np", ".", "where", "(", "anchor_to_gt_max", "<", "cfg", ".", "TRAIN", ".", "RPN_NEGATIVE_OVERLAP", ")", "[", "0", "]", "\n", "if", "len", "(", "bg_inds", ")", ">", "num_bg", ":", "\n", "        ", "enable_inds", "=", "bg_inds", "[", "npr", ".", "randint", "(", "len", "(", "bg_inds", ")", ",", "size", "=", "num_bg", ")", "]", "\n", "labels", "[", "enable_inds", "]", "=", "0", "\n", "", "bg_inds", "=", "np", ".", "where", "(", "labels", "==", "0", ")", "[", "0", "]", "\n", "\n", "bbox_targets", "=", "np", ".", "zeros", "(", "(", "num_inside", ",", "4", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "bbox_targets", "[", "fg_inds", ",", ":", "]", "=", "data_utils", ".", "compute_targets", "(", "\n", "anchors", "[", "fg_inds", ",", ":", "]", ",", "gt_boxes", "[", "anchor_to_gt_argmax", "[", "fg_inds", "]", ",", ":", "]", "\n", ")", "\n", "\n", "# weight positive and negative lables differently, and weight smaller", "\n", "# boxes more", "\n", "#label_loss_weights = np.ones((num_inside,), dtype=np.float32)*0.01 # original", "\n", "label_loss_weights", "=", "np", ".", "ones", "(", "(", "num_inside", ",", ")", ",", "dtype", "=", "np", ".", "float32", ")", "*", "0.01", "\n", "\n", "bbox_target_area", "=", "gt_boxes", "[", "anchor_to_gt_argmax", "[", "fg_inds", "]", ",", "2", "]", "*", "gt_boxes", "[", "anchor_to_gt_argmax", "[", "fg_inds", "]", ",", "3", "]", "\n", "\n", "#label_loss_weights[fg_inds] = 9**(1/np.sqrt(bbox_target_area)*100)*10 # original", "\n", "label_loss_weights", "[", "fg_inds", "]", "=", "1", "\n", "\n", "# Bbox regression loss has the form:", "\n", "#   loss(x) = weight_outside * L(weight_inside * x)", "\n", "# Inside weights allow us to set zero loss on an element-wise basis", "\n", "# Bbox regression is only trained on positive examples so we set their", "\n", "# weights to 1.0 (or otherwise if config is different) and 0 otherwise", "\n", "bbox_inside_weights", "=", "np", ".", "zeros", "(", "(", "num_inside", ",", "4", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "bbox_inside_weights", "[", "labels", "==", "1", ",", ":", "]", "=", "(", "1.0", ",", "1.0", ",", "1.0", ",", "1.0", ")", "\n", "\n", "# The bbox regression loss only averages by the number of images in the", "\n", "# mini-batch, whereas we need to average by the total number of example", "\n", "# anchors selected", "\n", "# Outside weights are used to scale each element-wise loss so the final", "\n", "# average over the mini-batch is correct", "\n", "bbox_outside_weights", "=", "np", ".", "zeros", "(", "(", "num_inside", ",", "4", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "# uniform weighting of examples (given non-uniform sampling)", "\n", "num_examples", "=", "np", ".", "sum", "(", "labels", ">=", "0", ")", "\n", "bbox_outside_weights", "[", "labels", "==", "1", ",", ":", "]", "=", "1.0", "/", "num_examples", "\n", "bbox_outside_weights", "[", "labels", "==", "0", ",", ":", "]", "=", "1.0", "/", "num_examples", "\n", "\n", "# Map up to original set of anchors", "\n", "labels", "=", "data_utils", ".", "unmap", "(", "labels", ",", "total_anchors", ",", "inds_inside", ",", "fill", "=", "-", "1", ")", "\n", "\n", "label_loss_weights", "=", "data_utils", ".", "unmap", "(", "label_loss_weights", ",", "total_anchors", ",", "inds_inside", ",", "fill", "=", "0", ")", "\n", "\n", "bbox_targets", "=", "data_utils", ".", "unmap", "(", "\n", "bbox_targets", ",", "total_anchors", ",", "inds_inside", ",", "fill", "=", "0", "\n", ")", "\n", "bbox_inside_weights", "=", "data_utils", ".", "unmap", "(", "\n", "bbox_inside_weights", ",", "total_anchors", ",", "inds_inside", ",", "fill", "=", "0", "\n", ")", "\n", "bbox_outside_weights", "=", "data_utils", ".", "unmap", "(", "\n", "bbox_outside_weights", ",", "total_anchors", ",", "inds_inside", ",", "fill", "=", "0", "\n", ")", "\n", "\n", "# Split the generated labels, etc. into labels per each field of anchors", "\n", "blobs_out", "=", "[", "]", "\n", "start_idx", "=", "0", "\n", "for", "foa", "in", "foas", ":", "\n", "        ", "H", "=", "foa", ".", "field_size", "\n", "W", "=", "foa", ".", "field_size", "\n", "A", "=", "foa", ".", "num_cell_anchors", "\n", "end_idx", "=", "start_idx", "+", "H", "*", "W", "*", "A", "\n", "_labels", "=", "labels", "[", "start_idx", ":", "end_idx", "]", "\n", "_label_loss_weights", "=", "label_loss_weights", "[", "start_idx", ":", "end_idx", "]", "\n", "_bbox_targets", "=", "bbox_targets", "[", "start_idx", ":", "end_idx", ",", ":", "]", "\n", "_bbox_inside_weights", "=", "bbox_inside_weights", "[", "start_idx", ":", "end_idx", ",", ":", "]", "\n", "_bbox_outside_weights", "=", "bbox_outside_weights", "[", "start_idx", ":", "end_idx", ",", ":", "]", "\n", "start_idx", "=", "end_idx", "\n", "\n", "# labels output with shape (1, A, height, width)", "\n", "_labels", "=", "_labels", ".", "reshape", "(", "(", "1", ",", "H", ",", "W", ",", "A", ")", ")", ".", "transpose", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "# label loss weights output with shape (1, A, height, width)", "\n", "_label_loss_weights", "=", "_label_loss_weights", ".", "reshape", "(", "(", "1", ",", "H", ",", "W", ",", "A", ")", ")", ".", "transpose", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "# bbox_targets output with shape (1, 4 * A, height, width)", "\n", "_bbox_targets", "=", "_bbox_targets", ".", "reshape", "(", "\n", "(", "1", ",", "H", ",", "W", ",", "A", "*", "4", ")", ")", ".", "transpose", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "# bbox_inside_weights output with shape (1, 4 * A, height, width)", "\n", "_bbox_inside_weights", "=", "_bbox_inside_weights", ".", "reshape", "(", "\n", "(", "1", ",", "H", ",", "W", ",", "A", "*", "4", ")", ")", ".", "transpose", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "# bbox_outside_weights output with shape (1, 4 * A, height, width)", "\n", "_bbox_outside_weights", "=", "_bbox_outside_weights", ".", "reshape", "(", "\n", "(", "1", ",", "H", ",", "W", ",", "A", "*", "4", ")", ")", ".", "transpose", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "blobs_out", ".", "append", "(", "\n", "dict", "(", "\n", "rpn_labels_int32_wide", "=", "_labels", ",", "\n", "rpn_label_loss_weights_wide", "=", "_label_loss_weights", ",", "\n", "rpn_bbox_targets_wide", "=", "_bbox_targets", ",", "\n", "rpn_bbox_inside_weights_wide", "=", "_bbox_inside_weights", ",", "\n", "rpn_bbox_outside_weights_wide", "=", "_bbox_outside_weights", "\n", ")", "\n", ")", "\n", "", "return", "blobs_out", "[", "0", "]", "if", "len", "(", "blobs_out", ")", "==", "1", "else", "blobs_out", "\n", "", ""]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.retinanet.get_retinanet_blob_names": [[34, 76], ["range"], "function", ["None"], ["def", "get_retinanet_blob_names", "(", "is_training", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Returns blob names in the order in which they are read by the data\n    loader.\n\n    N = number of images per minibatch\n    A = number of anchors = num_scales * num_aspect_ratios\n        (for example 9 used in RetinaNet paper)\n    H, W = spatial dimensions (different for each FPN level)\n    M = Out of all the anchors generated, depending on the positive/negative IoU\n        overlap thresholds, we will have M positive anchors. These are the anchors\n        that bounding box branch will regress on.\n\n    retnet_cls_labels -> labels for the cls branch for each FPN level\n                         Shape: N x A x H x W\n\n    retnet_roi_bbox_targets -> targets for the bbox regression branch\n                               Shape: M x 4\n\n    retnet_roi_fg_bbox_locs -> for the bbox regression, since we are only\n                               interested in regressing on fg bboxes which are\n                               M in number and the output prediction of the network\n                               is of shape N x (A * 4) x H x W\n                               (in case of non class-specific bbox), so we\n                               store the locations of positive fg boxes in this\n                               blob retnet_roi_fg_bbox_locs of shape M x 4 where\n                               each row looks like: [img_id, anchor_id, x_loc, y_loc]\n    \"\"\"", "\n", "# im_info: (height, width, image scale)", "\n", "blob_names", "=", "[", "'im_info'", "]", "\n", "assert", "cfg", ".", "FPN", ".", "FPN_ON", ",", "\"RetinaNet uses FPN for dense detection\"", "\n", "# Same format as RPN blobs, but one per FPN level", "\n", "if", "is_training", ":", "\n", "        ", "blob_names", "+=", "[", "'retnet_fg_num'", ",", "'retnet_bg_num'", "]", "\n", "for", "lvl", "in", "range", "(", "cfg", ".", "FPN", ".", "RPN_MIN_LEVEL", ",", "cfg", ".", "FPN", ".", "RPN_MAX_LEVEL", "+", "1", ")", ":", "\n", "            ", "suffix", "=", "'fpn{}'", ".", "format", "(", "lvl", ")", "\n", "blob_names", "+=", "[", "\n", "'retnet_cls_labels_'", "+", "suffix", ",", "\n", "'retnet_roi_bbox_targets_'", "+", "suffix", ",", "\n", "'retnet_roi_fg_bbox_locs_'", "+", "suffix", ",", "\n", "]", "\n", "", "", "return", "blob_names", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.retinanet.add_retinanet_blobs": [[78, 180], ["len", "range", "numpy.concatenate", "enumerate", "blobs[].astype", "blobs[].astype", "len", "blobs.items", "range", "numpy.round", "numpy.round", "numpy.array", "blobs[].append", "retinanet._get_retinanet_blobs", "enumerate", "range", "numpy.where", "len", "retinanet_blobs[].items", "isinstance", "int", "roi_data.get_field_of_anchors", "foas.append", "int", "blobs[].append", "len", "k.find", "range", "numpy.concatenate", "numpy.concatenate", "float", "numpy.log2", "len", "len", "tmp.append", "numpy.concatenate"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.retinanet._get_retinanet_blobs", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.data_utils.get_field_of_anchors"], ["", "def", "add_retinanet_blobs", "(", "blobs", ",", "im_scales", ",", "roidb", ",", "image_width", ",", "image_height", ")", ":", "\n", "    ", "\"\"\"Add RetinaNet blobs.\"\"\"", "\n", "# RetinaNet is applied to many feature levels, as in the FPN paper", "\n", "k_max", ",", "k_min", "=", "cfg", ".", "FPN", ".", "RPN_MAX_LEVEL", ",", "cfg", ".", "FPN", ".", "RPN_MIN_LEVEL", "\n", "scales_per_octave", "=", "cfg", ".", "RETINANET", ".", "SCALES_PER_OCTAVE", "\n", "num_aspect_ratios", "=", "len", "(", "cfg", ".", "RETINANET", ".", "ASPECT_RATIOS", ")", "\n", "aspect_ratios", "=", "cfg", ".", "RETINANET", ".", "ASPECT_RATIOS", "\n", "anchor_scale", "=", "cfg", ".", "RETINANET", ".", "ANCHOR_SCALE", "\n", "\n", "# get anchors from all levels for all scales/aspect ratios", "\n", "foas", "=", "[", "]", "\n", "for", "lvl", "in", "range", "(", "k_min", ",", "k_max", "+", "1", ")", ":", "\n", "        ", "stride", "=", "2.", "**", "lvl", "\n", "for", "octave", "in", "range", "(", "scales_per_octave", ")", ":", "\n", "            ", "octave_scale", "=", "2", "**", "(", "octave", "/", "float", "(", "scales_per_octave", ")", ")", "\n", "for", "idx", "in", "range", "(", "num_aspect_ratios", ")", ":", "\n", "                ", "anchor_sizes", "=", "(", "stride", "*", "octave_scale", "*", "anchor_scale", ",", ")", "\n", "anchor_aspect_ratios", "=", "(", "aspect_ratios", "[", "idx", "]", ",", ")", "\n", "foa", "=", "data_utils", ".", "get_field_of_anchors", "(", "\n", "stride", ",", "anchor_sizes", ",", "anchor_aspect_ratios", ",", "octave", ",", "idx", ")", "\n", "foas", ".", "append", "(", "foa", ")", "\n", "", "", "", "all_anchors", "=", "np", ".", "concatenate", "(", "[", "f", ".", "field_of_anchors", "for", "f", "in", "foas", "]", ")", "\n", "\n", "blobs", "[", "'retnet_fg_num'", "]", ",", "blobs", "[", "'retnet_bg_num'", "]", "=", "0.0", ",", "0.0", "\n", "for", "im_i", ",", "entry", "in", "enumerate", "(", "roidb", ")", ":", "\n", "        ", "scale", "=", "im_scales", "[", "im_i", "]", "\n", "im_height", "=", "np", ".", "round", "(", "entry", "[", "'height'", "]", "*", "scale", ")", "\n", "im_width", "=", "np", ".", "round", "(", "entry", "[", "'width'", "]", "*", "scale", ")", "\n", "gt_inds", "=", "np", ".", "where", "(", "\n", "(", "entry", "[", "'gt_classes'", "]", ">", "0", ")", "&", "(", "entry", "[", "'is_crowd'", "]", "==", "0", ")", ")", "[", "0", "]", "\n", "assert", "len", "(", "gt_inds", ")", ">", "0", ",", "'Empty ground truth empty for image is not allowed. Please check.'", "\n", "\n", "gt_rois", "=", "entry", "[", "'boxes'", "]", "[", "gt_inds", ",", ":", "]", "*", "scale", "\n", "gt_classes", "=", "entry", "[", "'gt_classes'", "]", "[", "gt_inds", "]", "\n", "\n", "im_info", "=", "np", ".", "array", "(", "[", "[", "im_height", ",", "im_width", ",", "scale", "]", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "blobs", "[", "'im_info'", "]", ".", "append", "(", "im_info", ")", "\n", "\n", "retinanet_blobs", ",", "fg_num", ",", "bg_num", "=", "_get_retinanet_blobs", "(", "\n", "foas", ",", "all_anchors", ",", "gt_rois", ",", "gt_classes", ",", "image_width", ",", "image_height", ")", "\n", "for", "i", ",", "foa", "in", "enumerate", "(", "foas", ")", ":", "\n", "            ", "for", "k", ",", "v", "in", "retinanet_blobs", "[", "i", "]", ".", "items", "(", ")", ":", "\n", "# the way it stacks is:", "\n", "# [[anchors for image1] + [anchors for images 2]]", "\n", "                ", "level", "=", "int", "(", "np", ".", "log2", "(", "foa", ".", "stride", ")", ")", "\n", "key", "=", "'{}_fpn{}'", ".", "format", "(", "k", ",", "level", ")", "\n", "if", "k", "==", "'retnet_roi_fg_bbox_locs'", ":", "\n", "                    ", "v", "[", ":", ",", "0", "]", "=", "im_i", "\n", "# loc_stride: 80 * 4 if cls_specific else 4", "\n", "loc_stride", "=", "4", "# 4 coordinate corresponding to bbox prediction", "\n", "if", "cfg", ".", "RETINANET", ".", "CLASS_SPECIFIC_BBOX", ":", "\n", "                        ", "loc_stride", "*=", "(", "cfg", ".", "MODEL", ".", "NUM_CLASSES", "-", "1", ")", "\n", "", "anchor_ind", "=", "foa", ".", "octave", "*", "num_aspect_ratios", "+", "foa", ".", "aspect", "\n", "# v[:, 1] is the class label [range 0-80] if we do", "\n", "# class-specfic bbox otherwise it is 0. In case of class", "\n", "# specific, based on the label, the location of current", "\n", "# anchor is class_label * 4 and then we take into account", "\n", "# the anchor_ind if the anchors", "\n", "v", "[", ":", ",", "1", "]", "*=", "4", "\n", "v", "[", ":", ",", "1", "]", "+=", "loc_stride", "*", "anchor_ind", "\n", "", "blobs", "[", "key", "]", ".", "append", "(", "v", ")", "\n", "", "", "blobs", "[", "'retnet_fg_num'", "]", "+=", "fg_num", "\n", "blobs", "[", "'retnet_bg_num'", "]", "+=", "bg_num", "\n", "\n", "", "blobs", "[", "'retnet_fg_num'", "]", "=", "blobs", "[", "'retnet_fg_num'", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "blobs", "[", "'retnet_bg_num'", "]", "=", "blobs", "[", "'retnet_bg_num'", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "N", "=", "len", "(", "roidb", ")", "\n", "for", "k", ",", "v", "in", "blobs", ".", "items", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "v", ",", "list", ")", "and", "len", "(", "v", ")", ">", "0", ":", "\n", "# compute number of anchors", "\n", "            ", "A", "=", "int", "(", "len", "(", "v", ")", "/", "N", ")", "\n", "# for the cls branch labels [per fpn level],", "\n", "# we have blobs['retnet_cls_labels_fpn{}'] as a list until this step", "\n", "# and length of this list is N x A where", "\n", "# N = num_images, A = num_anchors for example, N = 2, A = 9", "\n", "# Each element of the list has the shape 1 x 1 x H x W where H, W are", "\n", "# spatial dimension of curret fpn lvl. Let a{i} denote the element", "\n", "# corresponding to anchor i [9 anchors total] in the list.", "\n", "# The elements in the list are in order [[a0, ..., a9], [a0, ..., a9]]", "\n", "# however the network will make predictions like 2 x (9 * 80) x H x W", "\n", "# so we first concatenate the elements of each image to a numpy array", "\n", "# and then concatenate the two images to get the 2 x 9 x H x W", "\n", "\n", "if", "k", ".", "find", "(", "'retnet_cls_labels'", ")", ">=", "0", ":", "\n", "                ", "tmp", "=", "[", "]", "\n", "# concat anchors within an image", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "v", ")", ",", "A", ")", ":", "\n", "                    ", "tmp", ".", "append", "(", "np", ".", "concatenate", "(", "v", "[", "i", ":", "i", "+", "A", "]", ",", "axis", "=", "1", ")", ")", "\n", "# concat images", "\n", "", "blobs", "[", "k", "]", "=", "np", ".", "concatenate", "(", "tmp", ",", "axis", "=", "0", ")", "\n", "", "else", ":", "\n", "# for the bbox branch elements [per FPN level],", "\n", "#  we have the targets and the fg boxes locations", "\n", "# in the shape: M x 4 where M is the number of fg locations in a", "\n", "# given image at the current FPN level. For the given level,", "\n", "# the bbox predictions will be. The elements in the list are in", "\n", "# order [[a0, ..., a9], [a0, ..., a9]]", "\n", "# Concatenate them to form M x 4", "\n", "                ", "blobs", "[", "k", "]", "=", "np", ".", "concatenate", "(", "v", ",", "axis", "=", "0", ")", "\n", "", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.retinanet._get_retinanet_blobs": [[182, 289], ["logger.debug", "numpy.arange", "len", "logger.debug", "logger.debug", "logger.debug", "numpy.empty", "data_utils.unmap.fill", "numpy.zeros", "roi_data.compute_targets", "roi_data.unmap", "roi_data.unmap", "numpy.array", "len", "utils.bbox_overlaps", "box_utils.bbox_overlaps.argmax", "box_utils.bbox_overlaps.argmax", "numpy.where", "numpy.where", "len", "len", "_labels.reshape.reshape", "_bbox_targets.reshape().transpose.reshape().transpose", "int", "int", "numpy.where", "len", "numpy.zeros", "numpy.zeros", "blobs_out.append", "numpy.where", "numpy.zeros", "numpy.zeros", "enumerate", "dict", "numpy.array", "_bbox_targets.reshape().transpose.reshape", "numpy.array", "numpy.arange", "numpy.arange", "len", "len", "_labels[].astype", "np.zeros.astype", "np.zeros.astype"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.blob.zeros", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.data_utils.compute_targets", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.data_utils.unmap", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.data_utils.unmap", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.blob.zeros", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.blob.zeros", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.blob.zeros", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.blob.zeros"], ["", "def", "_get_retinanet_blobs", "(", "\n", "foas", ",", "all_anchors", ",", "gt_boxes", ",", "gt_classes", ",", "im_width", ",", "im_height", ")", ":", "\n", "    ", "total_anchors", "=", "all_anchors", ".", "shape", "[", "0", "]", "\n", "logger", ".", "debug", "(", "'Getting mad blobs: im_height {} im_width: {}'", ".", "format", "(", "\n", "im_height", ",", "im_width", ")", ")", "\n", "\n", "inds_inside", "=", "np", ".", "arange", "(", "all_anchors", ".", "shape", "[", "0", "]", ")", "\n", "anchors", "=", "all_anchors", "\n", "num_inside", "=", "len", "(", "inds_inside", ")", "\n", "\n", "logger", ".", "debug", "(", "'total_anchors: {}'", ".", "format", "(", "total_anchors", ")", ")", "\n", "logger", ".", "debug", "(", "'inds_inside: {}'", ".", "format", "(", "num_inside", ")", ")", "\n", "logger", ".", "debug", "(", "'anchors.shape: {}'", ".", "format", "(", "anchors", ".", "shape", ")", ")", "\n", "\n", "# Compute anchor labels:", "\n", "# label=1 is positive, 0 is negative, -1 is don't care (ignore)", "\n", "labels", "=", "np", ".", "empty", "(", "(", "num_inside", ",", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "labels", ".", "fill", "(", "-", "1", ")", "\n", "if", "len", "(", "gt_boxes", ")", ">", "0", ":", "\n", "# Compute overlaps between the anchors and the gt boxes overlaps", "\n", "        ", "anchor_by_gt_overlap", "=", "box_utils", ".", "bbox_overlaps", "(", "anchors", ",", "gt_boxes", ")", "\n", "# Map from anchor to gt box that has highest overlap", "\n", "anchor_to_gt_argmax", "=", "anchor_by_gt_overlap", ".", "argmax", "(", "axis", "=", "1", ")", "\n", "# For each anchor, amount of overlap with most overlapping gt box", "\n", "anchor_to_gt_max", "=", "anchor_by_gt_overlap", "[", "\n", "np", ".", "arange", "(", "num_inside", ")", ",", "anchor_to_gt_argmax", "]", "\n", "\n", "# Map from gt box to an anchor that has highest overlap", "\n", "gt_to_anchor_argmax", "=", "anchor_by_gt_overlap", ".", "argmax", "(", "axis", "=", "0", ")", "\n", "# For each gt box, amount of overlap with most overlapping anchor", "\n", "gt_to_anchor_max", "=", "anchor_by_gt_overlap", "[", "\n", "gt_to_anchor_argmax", ",", "np", ".", "arange", "(", "anchor_by_gt_overlap", ".", "shape", "[", "1", "]", ")", "]", "\n", "# Find all anchors that share the max overlap amount", "\n", "# (this includes many ties)", "\n", "anchors_with_max_overlap", "=", "np", ".", "where", "(", "\n", "anchor_by_gt_overlap", "==", "gt_to_anchor_max", ")", "[", "0", "]", "\n", "\n", "# Fg label: for each gt use anchors with highest overlap", "\n", "# (including ties)", "\n", "gt_inds", "=", "anchor_to_gt_argmax", "[", "anchors_with_max_overlap", "]", "\n", "labels", "[", "anchors_with_max_overlap", "]", "=", "gt_classes", "[", "gt_inds", "]", "\n", "# Fg label: above threshold IOU", "\n", "inds", "=", "anchor_to_gt_max", ">=", "cfg", ".", "RETINANET", ".", "POSITIVE_OVERLAP", "\n", "gt_inds", "=", "anchor_to_gt_argmax", "[", "inds", "]", "\n", "labels", "[", "inds", "]", "=", "gt_classes", "[", "gt_inds", "]", "\n", "\n", "", "fg_inds", "=", "np", ".", "where", "(", "labels", ">=", "1", ")", "[", "0", "]", "\n", "bg_inds", "=", "np", ".", "where", "(", "anchor_to_gt_max", "<", "cfg", ".", "RETINANET", ".", "NEGATIVE_OVERLAP", ")", "[", "0", "]", "\n", "labels", "[", "bg_inds", "]", "=", "0", "\n", "num_fg", ",", "num_bg", "=", "len", "(", "fg_inds", ")", ",", "len", "(", "bg_inds", ")", "\n", "\n", "bbox_targets", "=", "np", ".", "zeros", "(", "(", "num_inside", ",", "4", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "bbox_targets", "[", "fg_inds", ",", ":", "]", "=", "data_utils", ".", "compute_targets", "(", "\n", "anchors", "[", "fg_inds", ",", ":", "]", ",", "gt_boxes", "[", "anchor_to_gt_argmax", "[", "fg_inds", "]", ",", ":", "]", ")", "\n", "\n", "# Map up to original set of anchors", "\n", "labels", "=", "data_utils", ".", "unmap", "(", "labels", ",", "total_anchors", ",", "inds_inside", ",", "fill", "=", "-", "1", ")", "\n", "bbox_targets", "=", "data_utils", ".", "unmap", "(", "bbox_targets", ",", "total_anchors", ",", "inds_inside", ",", "fill", "=", "0", ")", "\n", "\n", "# Split the generated labels, etc. into labels per each field of anchors", "\n", "blobs_out", "=", "[", "]", "\n", "start_idx", "=", "0", "\n", "for", "foa", "in", "foas", ":", "\n", "        ", "H", "=", "foa", ".", "field_size", "\n", "W", "=", "foa", ".", "field_size", "\n", "end_idx", "=", "start_idx", "+", "H", "*", "W", "\n", "_labels", "=", "labels", "[", "start_idx", ":", "end_idx", "]", "\n", "_bbox_targets", "=", "bbox_targets", "[", "start_idx", ":", "end_idx", ",", ":", "]", "\n", "start_idx", "=", "end_idx", "\n", "\n", "# labels output with shape (1, height, width)", "\n", "_labels", "=", "_labels", ".", "reshape", "(", "(", "1", ",", "1", ",", "H", ",", "W", ")", ")", "\n", "# bbox_targets output with shape (1, 4 * A, height, width)", "\n", "_bbox_targets", "=", "_bbox_targets", ".", "reshape", "(", "(", "1", ",", "H", ",", "W", ",", "4", ")", ")", ".", "transpose", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "stride", "=", "foa", ".", "stride", "\n", "w", "=", "int", "(", "im_width", "/", "stride", ")", "\n", "h", "=", "int", "(", "im_height", "/", "stride", ")", "\n", "\n", "# data for select_smooth_l1 loss", "\n", "num_classes", "=", "cfg", ".", "MODEL", ".", "NUM_CLASSES", "-", "1", "\n", "inds_4d", "=", "np", ".", "where", "(", "_labels", ">", "0", ")", "\n", "M", "=", "len", "(", "inds_4d", ")", "\n", "_roi_bbox_targets", "=", "np", ".", "zeros", "(", "(", "0", ",", "4", ")", ")", "\n", "_roi_fg_bbox_locs", "=", "np", ".", "zeros", "(", "(", "0", ",", "4", ")", ")", "\n", "if", "M", ">", "0", ":", "\n", "            ", "im_inds", ",", "y", ",", "x", "=", "inds_4d", "[", "0", "]", ",", "inds_4d", "[", "2", "]", ",", "inds_4d", "[", "3", "]", "\n", "_roi_bbox_targets", "=", "np", ".", "zeros", "(", "(", "len", "(", "im_inds", ")", ",", "4", ")", ")", "\n", "_roi_fg_bbox_locs", "=", "np", ".", "zeros", "(", "(", "len", "(", "im_inds", ")", ",", "4", ")", ")", "\n", "lbls", "=", "_labels", "[", "im_inds", ",", ":", ",", "y", ",", "x", "]", "\n", "for", "i", ",", "lbl", "in", "enumerate", "(", "lbls", ")", ":", "\n", "                ", "l", "=", "lbl", "[", "0", "]", "-", "1", "\n", "if", "not", "cfg", ".", "RETINANET", ".", "CLASS_SPECIFIC_BBOX", ":", "\n", "                    ", "l", "=", "0", "\n", "", "assert", "l", ">=", "0", "and", "l", "<", "num_classes", ",", "'label out of the range'", "\n", "_roi_bbox_targets", "[", "i", ",", ":", "]", "=", "_bbox_targets", "[", ":", ",", ":", ",", "y", "[", "i", "]", ",", "x", "[", "i", "]", "]", "\n", "_roi_fg_bbox_locs", "[", "i", ",", ":", "]", "=", "np", ".", "array", "(", "[", "[", "0", ",", "l", ",", "y", "[", "i", "]", ",", "x", "[", "i", "]", "]", "]", ")", "\n", "", "", "blobs_out", ".", "append", "(", "\n", "dict", "(", "\n", "retnet_cls_labels", "=", "_labels", "[", ":", ",", ":", ",", "0", ":", "h", ",", "0", ":", "w", "]", ".", "astype", "(", "np", ".", "int32", ")", ",", "\n", "retnet_roi_bbox_targets", "=", "_roi_bbox_targets", ".", "astype", "(", "np", ".", "float32", ")", ",", "\n", "retnet_roi_fg_bbox_locs", "=", "_roi_fg_bbox_locs", ".", "astype", "(", "np", ".", "float32", ")", ",", "\n", ")", ")", "\n", "", "out_num_fg", "=", "np", ".", "array", "(", "[", "num_fg", "+", "1.0", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "out_num_bg", "=", "(", "\n", "np", ".", "array", "(", "[", "num_bg", "+", "1.0", "]", ")", "*", "(", "cfg", ".", "MODEL", ".", "NUM_CLASSES", "-", "1", ")", "+", "\n", "out_num_fg", "*", "(", "cfg", ".", "MODEL", ".", "NUM_CLASSES", "-", "2", ")", ")", "\n", "return", "blobs_out", ",", "out_num_fg", ",", "out_num_bg", "\n", "", ""]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.fast_rcnn.get_fast_rcnn_blob_names": [[40, 112], ["range", "range", "range", "str", "str", "str"], "function", ["None"], ["def", "get_fast_rcnn_blob_names", "(", "is_training", "=", "True", ",", "ohem", "=", "False", ")", ":", "\n", "    ", "\"\"\"Fast R-CNN blob names.\"\"\"", "\n", "# rois blob: holds R regions of interest, each is a 5-tuple", "\n", "# (batch_idx, x1, y1, x2, y2) specifying an image batch index and a", "\n", "# rectangle (x1, y1, x2, y2)", "\n", "blob_names", "=", "[", "'rois'", "]", "\n", "if", "is_training", ":", "\n", "# labels_int32 blob: R categorical labels in [0, ..., K] for K", "\n", "# foreground classes plus background", "\n", "        ", "blob_names", "+=", "[", "'labels_int32'", "]", "\n", "blob_names", "+=", "[", "'label_loss_weights'", "]", "\n", "", "if", "is_training", ":", "\n", "# bbox_targets blob: R bounding-box regression targets with 4", "\n", "# targets per class", "\n", "        ", "blob_names", "+=", "[", "'bbox_targets'", "]", "\n", "# bbox_inside_weights blob: At most 4 targets per roi are active", "\n", "# this binary vector sepcifies the subset of active targets", "\n", "blob_names", "+=", "[", "'bbox_inside_weights'", "]", "\n", "blob_names", "+=", "[", "'bbox_outside_weights'", "]", "\n", "", "if", "is_training", "and", "cfg", ".", "MODEL", ".", "MASK_ON", ":", "\n", "# 'mask_rois': RoIs sampled for training the mask prediction branch.", "\n", "# Shape is (#masks, 5) in format (batch_idx, x1, y1, x2, y2).", "\n", "        ", "blob_names", "+=", "[", "'mask_rois'", "]", "\n", "# 'roi_has_mask': binary labels for the RoIs specified in 'rois'", "\n", "# indicating if each RoI has a mask or not. Note that in some cases", "\n", "# a *bg* RoI will have an all -1 (ignore) mask associated with it in", "\n", "# the case that no fg RoIs can be sampled. Shape is (batchsize).", "\n", "blob_names", "+=", "[", "'roi_has_mask_int32'", "]", "\n", "# 'masks_int32' holds binary masks for the RoIs specified in", "\n", "# 'mask_rois'. Shape is (#fg, M * M) where M is the ground truth", "\n", "# mask size.", "\n", "blob_names", "+=", "[", "'masks_int32'", "]", "\n", "", "if", "is_training", "and", "cfg", ".", "MODEL", ".", "KEYPOINTS_ON", ":", "\n", "# 'keypoint_rois': RoIs sampled for training the keypoint prediction", "\n", "# branch. Shape is (#instances, 5) in format (batch_idx, x1, y1, x2,", "\n", "# y2).", "\n", "        ", "blob_names", "+=", "[", "'keypoint_rois'", "]", "\n", "# 'keypoint_locations_int32': index of keypoint in", "\n", "# KRCNN.HEATMAP_SIZE**2 sized array. Shape is (#instances). Used in", "\n", "# SoftmaxWithLoss.", "\n", "blob_names", "+=", "[", "'keypoint_locations_int32'", "]", "\n", "# 'keypoint_weights': weight assigned to each target in", "\n", "# 'keypoint_locations_int32'. Shape is (#instances). Used in", "\n", "# SoftmaxWithLoss.", "\n", "blob_names", "+=", "[", "'keypoint_weights'", "]", "\n", "# 'keypoint_loss_normalizer': optional normalization factor to use if", "\n", "# cfg.KRCNN.NORMALIZE_BY_VISIBLE_KEYPOINTS is False.", "\n", "blob_names", "+=", "[", "'keypoint_loss_normalizer'", "]", "\n", "", "if", "cfg", ".", "FPN", ".", "FPN_ON", "and", "cfg", ".", "FPN", ".", "MULTILEVEL_ROIS", ":", "\n", "# Support for FPN multi-level rois without bbox reg isn't", "\n", "# implemented (... and may never be implemented)", "\n", "        ", "k_max", "=", "cfg", ".", "FPN", ".", "ROI_MAX_LEVEL", "\n", "k_min", "=", "cfg", ".", "FPN", ".", "ROI_MIN_LEVEL", "\n", "# Same format as rois blob, but one per FPN level", "\n", "for", "lvl", "in", "range", "(", "k_min", ",", "k_max", "+", "1", ")", ":", "\n", "            ", "blob_names", "+=", "[", "'rois_fpn'", "+", "str", "(", "lvl", ")", "]", "\n", "", "blob_names", "+=", "[", "'rois_idx_restore_int32'", "]", "\n", "if", "is_training", ":", "\n", "            ", "if", "cfg", ".", "MODEL", ".", "MASK_ON", ":", "\n", "                ", "for", "lvl", "in", "range", "(", "k_min", ",", "k_max", "+", "1", ")", ":", "\n", "                    ", "blob_names", "+=", "[", "'mask_rois_fpn'", "+", "str", "(", "lvl", ")", "]", "\n", "", "blob_names", "+=", "[", "'mask_rois_idx_restore_int32'", "]", "\n", "", "if", "cfg", ".", "MODEL", ".", "KEYPOINTS_ON", ":", "\n", "                ", "for", "lvl", "in", "range", "(", "k_min", ",", "k_max", "+", "1", ")", ":", "\n", "                    ", "blob_names", "+=", "[", "'keypoint_rois_fpn'", "+", "str", "(", "lvl", ")", "]", "\n", "", "blob_names", "+=", "[", "'keypoint_rois_idx_restore_int32'", "]", "\n", "\n", "# add ohem prefix to output blobs if in ohem", "\n", "", "", "", "if", "ohem", ":", "\n", "        ", "blob_names", "=", "[", "'ohem_'", "+", "b", "for", "b", "in", "blob_names", "]", "\n", "\n", "", "return", "blob_names", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.fast_rcnn.add_fast_rcnn_blobs": [[114, 140], ["enumerate", "blobs.items", "_sample_rois.items", "fast_rcnn._add_multilevel_rois", "roi_data.keypoint_rcnn.finalize_keypoint_minibatch", "roi_data.keypoint_rcnn.finalize_keypoint_minibatch", "fast_rcnn._all_rois", "fast_rcnn._sample_rois", "blobs[].append", "isinstance", "numpy.concatenate", "len"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.fast_rcnn._add_multilevel_rois", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.keypoint_rcnn.finalize_keypoint_minibatch", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.keypoint_rcnn.finalize_keypoint_minibatch", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.fast_rcnn._all_rois", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.fast_rcnn._sample_rois"], ["", "def", "add_fast_rcnn_blobs", "(", "blobs", ",", "im_scales", ",", "roidb", ",", "ohem", "=", "False", ")", ":", "\n", "    ", "\"\"\"Add blobs needed for training Fast R-CNN style models.\"\"\"", "\n", "# Sample training RoIs from each image and append them to the blob lists", "\n", "for", "im_i", ",", "entry", "in", "enumerate", "(", "roidb", ")", ":", "\n", "        ", "if", "ohem", ":", "\n", "# in ohem we do not sample but use all of them for classification", "\n", "            ", "frcn_blobs", "=", "_all_rois", "(", "entry", ",", "im_scales", "[", "im_i", "]", ",", "im_i", ")", "\n", "", "else", ":", "\n", "            ", "frcn_blobs", "=", "_sample_rois", "(", "entry", ",", "im_scales", "[", "im_i", "]", ",", "im_i", ")", "\n", "", "for", "k", ",", "v", "in", "frcn_blobs", ".", "items", "(", ")", ":", "\n", "            ", "blobs", "[", "k", "]", ".", "append", "(", "v", ")", "\n", "# Concat the training blob lists into tensors", "\n", "", "", "for", "k", ",", "v", "in", "blobs", ".", "items", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "v", ",", "list", ")", "and", "len", "(", "v", ")", ">", "0", ":", "\n", "            ", "blobs", "[", "k", "]", "=", "np", ".", "concatenate", "(", "v", ")", "\n", "# Add FPN multilevel training RoIs, if configured", "\n", "", "", "if", "cfg", ".", "FPN", ".", "FPN_ON", "and", "cfg", ".", "FPN", ".", "MULTILEVEL_ROIS", ":", "\n", "        ", "_add_multilevel_rois", "(", "blobs", ",", "ohem", ")", "\n", "\n", "# Perform any final work and validity checks after the collating blobs for", "\n", "# all minibatch images", "\n", "", "valid", "=", "True", "\n", "if", "cfg", ".", "MODEL", ".", "KEYPOINTS_ON", ":", "\n", "        ", "valid", "=", "roi_data", ".", "keypoint_rcnn", ".", "finalize_keypoint_minibatch", "(", "blobs", ",", "valid", ")", "\n", "\n", "", "return", "valid", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.fast_rcnn.filter_fast_rcnn_blobs": [[141, 215], ["int", "numpy.unique", "numpy.concatenate", "numpy.zeros", "range", "utils.nms", "min", "max", "np.concatenate.append", "fast_rcnn._add_multilevel_rois", "enumerate", "numpy.where", "numpy.divide", "numpy.log", "numpy.argsort", "numpy.where", "numpy.where", "len", "len", "numpy.hstack", "len", "int", "numpy.sum", "numpy.count_nonzero", "numpy.exp", "numpy.exp", "range", "losses[].reshape", "numpy.where"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.blob.zeros", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.boxes.nms", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.fast_rcnn._add_multilevel_rois"], ["", "def", "filter_fast_rcnn_blobs", "(", "blobs", ",", "output_blob_names", ",", "cls_scores", ")", ":", "\n", "    ", "\"\"\"Filters out ROI for OHEM. Only hard negative samples are retained. \"\"\"", "\n", "rois_per_image", "=", "int", "(", "cfg", ".", "TRAIN", ".", "BATCH_SIZE_PER_IM", ")", "\n", "fg_fraction", "=", "cfg", ".", "TRAIN", ".", "FG_FRACTION", "\n", "\n", "output_blobs", "=", "{", "k", ":", "[", "]", "for", "i", ",", "k", "in", "enumerate", "(", "output_blob_names", ")", "}", "\n", "\n", "# for each image retain only relevant regions proposals", "\n", "keep_ind_unsorted", "=", "[", "]", "\n", "\n", "for", "i", "in", "np", ".", "unique", "(", "blobs", "[", "'rois'", "]", "[", ":", ",", "0", "]", ")", ":", "\n", "\n", "        ", "ith_sample", "=", "np", ".", "where", "(", "blobs", "[", "'rois'", "]", "[", ":", ",", "0", "]", "==", "i", ")", "[", "0", "]", "\n", "\n", "# print('%d rois for sample %d ' % (len(ith_sample),i ))", "\n", "\n", "# print('label shape:', blobs['labels_int32'].shape)", "\n", "# print('mask values: ', ith_sample)", "\n", "\n", "bboxes", "=", "blobs", "[", "'rois'", "]", "[", "ith_sample", ",", ":", "]", "\n", "labels", "=", "blobs", "[", "'labels_int32'", "]", "[", "ith_sample", "]", "\n", "losses", "=", "cls_scores", "[", "ith_sample", ",", ":", "]", "\n", "\n", "# get softmax and find appropriate loss based on GT label", "\n", "score_softmax", "=", "np", ".", "divide", "(", "np", ".", "exp", "(", "losses", ")", ".", "T", ",", "np", ".", "sum", "(", "np", ".", "exp", "(", "losses", ")", ",", "1", ")", ")", ".", "T", "\n", "losses", "=", "score_softmax", "[", "range", "(", "labels", ".", "shape", "[", "0", "]", ")", ",", "labels", "]", "\n", "losses", "=", "-", "np", ".", "log", "(", "losses", ")", "\n", "\n", "# sort by descending losses", "\n", "sort_ids", "=", "np", ".", "argsort", "(", "losses", ")", "[", ":", ":", "-", "1", "]", "\n", "\n", "bboxes", "=", "bboxes", "[", "sort_ids", "]", "\n", "labels", "=", "labels", "[", "sort_ids", "]", "\n", "losses", "=", "losses", "[", "sort_ids", "]", "\n", "\n", "bg_ids", "=", "np", ".", "where", "(", "labels", "==", "0", ")", "[", "0", "]", "\n", "fg_ids", "=", "np", ".", "where", "(", "labels", ">", "0", ")", "[", "0", "]", "\n", "\n", "keep_inds", "=", "np", ".", "zeros", "(", "len", "(", "sort_ids", ")", ",", "dtype", "=", "bool", ")", "\n", "\n", "# do NMS on bg regions but not on fg", "\n", "fg_keep_inds", "=", "range", "(", "len", "(", "fg_ids", ")", ")", "\n", "bg_keep_inds", "=", "box_utils", ".", "nms", "(", "np", ".", "hstack", "(", "(", "bboxes", "[", "bg_ids", ",", "1", ":", "]", ",", "losses", "[", "bg_ids", "]", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", ")", ")", ",", "0.3", ")", "\n", "\n", "# calculate how many fg can we retain", "\n", "max_fg_inds", "=", "min", "(", "len", "(", "fg_keep_inds", ")", ",", "int", "(", "rois_per_image", "*", "fg_fraction", ")", ")", "\n", "\n", "if", "max_fg_inds", ">", "0", ":", "\n", "            ", "keep_inds", "[", "fg_ids", "[", "fg_keep_inds", "[", "0", ":", "max_fg_inds", "]", "]", "]", "=", "True", "\n", "\n", "# print('keep num pos inds:', len(np.where(keep_inds)[0]))", "\n", "\n", "# set which bg regions to retain", "\n", "", "remaining_inds", "=", "max", "(", "rois_per_image", "-", "np", ".", "count_nonzero", "(", "keep_inds", ")", ",", "0", ")", "\n", "if", "remaining_inds", ">", "0", ":", "\n", "            ", "keep_inds", "[", "bg_ids", "[", "bg_keep_inds", "[", "0", ":", "remaining_inds", "]", "]", "]", "=", "True", "\n", "\n", "# print('keep num pos and neg inds:', len(np.where(keep_inds)[0]))", "\n", "\n", "# we got indexes on sorted array but need them on unsorted so !!", "\n", "", "keep_ind_unsorted", ".", "append", "(", "sort_ids", "[", "np", ".", "where", "(", "keep_inds", ")", "[", "0", "]", "]", ")", "\n", "\n", "# merge indexes to keep", "\n", "", "keep_ind_unsorted", "=", "np", ".", "concatenate", "(", "keep_ind_unsorted", ")", "\n", "\n", "# retain only hard examples for fast-rcnn boxes", "\n", "for", "k", "in", "[", "'rois'", ",", "'labels_int32'", ",", "'label_loss_weights'", ",", "'bbox_targets'", ",", "'bbox_inside_weights'", ",", "'bbox_outside_weights'", "]", ":", "\n", "        ", "output_blobs", "[", "k", "]", "=", "blobs", "[", "k", "]", "[", "keep_ind_unsorted", "]", "\n", "\n", "# Add FPN multilevel training RoIs, if configured", "\n", "", "if", "cfg", ".", "FPN", ".", "FPN_ON", "and", "cfg", ".", "FPN", ".", "MULTILEVEL_ROIS", ":", "\n", "        ", "_add_multilevel_rois", "(", "output_blobs", ",", "False", ")", "\n", "\n", "", "return", "output_blobs", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.fast_rcnn._sample_rois": [[217, 319], ["int", "int", "numpy.minimum", "numpy.minimum", "numpy.append", "numpy.array", "numpy.hstack", "dict", "numpy.round", "numpy.where", "numpy.choice", "numpy.where", "numpy.choice", "numpy.where", "fast_rcnn._compute_targets", "fast_rcnn._expand_bbox_targets", "fast_rcnn._expand_bbox_targets", "numpy.ones", "numpy.where", "utils.ones", "roi_data.mask_rcnn.add_mask_rcnn_blobs", "roi_data.mask_rcnn.add_mask_rcnn_blobs", "roi_data.keypoint_rcnn.add_keypoint_rcnn_blobs", "roi_data.keypoint_rcnn.add_keypoint_rcnn_blobs", "sampled_labels.astype"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.fast_rcnn._compute_targets", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.fast_rcnn._expand_bbox_targets", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.fast_rcnn._expand_bbox_targets", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.blob.ones", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.blob.ones", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.mask_rcnn.add_mask_rcnn_blobs", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.mask_rcnn.add_mask_rcnn_blobs", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.keypoint_rcnn.add_keypoint_rcnn_blobs", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.keypoint_rcnn.add_keypoint_rcnn_blobs"], ["", "def", "_sample_rois", "(", "roidb", ",", "im_scale", ",", "batch_idx", ")", ":", "\n", "    ", "\"\"\"Generate a random sample of RoIs comprising foreground and background\n    examples.\n    \"\"\"", "\n", "rois_per_image", "=", "int", "(", "cfg", ".", "TRAIN", ".", "BATCH_SIZE_PER_IM", ")", "\n", "fg_rois_per_image", "=", "int", "(", "np", ".", "round", "(", "cfg", ".", "TRAIN", ".", "FG_FRACTION", "*", "rois_per_image", ")", ")", "\n", "max_overlaps", "=", "roidb", "[", "'max_overlaps'", "]", "\n", "\n", "# Select foreground RoIs as those with >= FG_THRESH overlap", "\n", "fg_inds", "=", "np", ".", "where", "(", "max_overlaps", ">=", "cfg", ".", "TRAIN", ".", "FG_THRESH", ")", "[", "0", "]", "\n", "# Guard against the case when an image has fewer than fg_rois_per_image", "\n", "# foreground RoIs", "\n", "fg_rois_per_this_image", "=", "np", ".", "minimum", "(", "fg_rois_per_image", ",", "fg_inds", ".", "size", ")", "\n", "# Sample foreground regions without replacement", "\n", "if", "fg_inds", ".", "size", ">", "0", ":", "\n", "        ", "fg_inds", "=", "npr", ".", "choice", "(", "\n", "fg_inds", ",", "size", "=", "fg_rois_per_this_image", ",", "replace", "=", "False", "\n", ")", "\n", "\n", "# Select background RoIs as those within [BG_THRESH_LO, BG_THRESH_HI)", "\n", "", "bg_inds", "=", "np", ".", "where", "(", "\n", "(", "max_overlaps", "<", "cfg", ".", "TRAIN", ".", "BG_THRESH_HI", ")", "&", "\n", "(", "max_overlaps", ">=", "cfg", ".", "TRAIN", ".", "BG_THRESH_LO", ")", "\n", ")", "[", "0", "]", "\n", "# Compute number of background RoIs to take from this image (guarding", "\n", "# against there being fewer than desired)", "\n", "bg_rois_per_this_image", "=", "rois_per_image", "-", "fg_rois_per_this_image", "\n", "bg_rois_per_this_image", "=", "np", ".", "minimum", "(", "bg_rois_per_this_image", ",", "bg_inds", ".", "size", ")", "\n", "# Sample foreground regions without replacement", "\n", "if", "bg_inds", ".", "size", ">", "0", ":", "\n", "        ", "bg_inds", "=", "npr", ".", "choice", "(", "\n", "bg_inds", ",", "size", "=", "bg_rois_per_this_image", ",", "replace", "=", "False", "\n", ")", "\n", "\n", "# The indices that we're selecting (both fg and bg)", "\n", "", "keep_inds", "=", "np", ".", "append", "(", "fg_inds", ",", "bg_inds", ")", "\n", "# Label is the class each RoI has max overlap with", "\n", "sampled_labels", "=", "roidb", "[", "'max_classes'", "]", "[", "keep_inds", "]", "\n", "sampled_labels", "[", "fg_rois_per_this_image", ":", "]", "=", "0", "# Label bg RoIs with class 0", "\n", "sampled_boxes", "=", "roidb", "[", "'boxes'", "]", "[", "keep_inds", "]", "\n", "\n", "gt_inds", "=", "np", ".", "where", "(", "roidb", "[", "'gt_classes'", "]", ">", "0", ")", "[", "0", "]", "\n", "gt_boxes", "=", "roidb", "[", "'boxes'", "]", "[", "gt_inds", ",", ":", "]", "\n", "gt_assignments", "=", "gt_inds", "[", "roidb", "[", "'box_to_gt_ind_map'", "]", "[", "keep_inds", "]", "]", "\n", "\n", "if", "'bbox_targets'", "not", "in", "roidb", ":", "\n", "        ", "bbox_targets", "=", "_compute_targets", "(", "\n", "sampled_boxes", ",", "gt_boxes", "[", "gt_assignments", ",", ":", "]", ",", "sampled_labels", "\n", ")", "\n", "bbox_targets", ",", "bbox_inside_weights", "=", "_expand_bbox_targets", "(", "bbox_targets", ")", "\n", "", "else", ":", "\n", "        ", "bbox_targets", ",", "bbox_inside_weights", "=", "_expand_bbox_targets", "(", "\n", "roidb", "[", "'bbox_targets'", "]", "[", "keep_inds", ",", ":", "]", "\n", ")", "\n", "\n", "", "label_weights", "=", "np", ".", "ones", "(", "sampled_labels", ".", "shape", ")", "*", "0.1", "# eight version", "\n", "\n", "fg_inds", "=", "np", ".", "where", "(", "sampled_labels", ">", "0", ")", "[", "0", "]", "\n", "\n", "bbox_target_area", "=", "gt_boxes", "[", "gt_assignments", "[", "fg_inds", "]", ",", "2", "]", "*", "gt_boxes", "[", "gt_assignments", "[", "fg_inds", "]", ",", "3", "]", "\n", "\n", "#label_weights[fg_inds] = 9**(1/np.sqrt(bbox_target_area)*100)*10 # initial version", "\n", "#label_weights[fg_inds] = 2**(1/np.sqrt(bbox_target_area)*256)  # second version", "\n", "#label_weights[fg_inds] = 2 ** (1 / np.sqrt(bbox_target_area) * 256) *10  # third version", "\n", "#label_weights[fg_inds] = 2 ** (1 / np.sqrt(bbox_target_area) * 384) # forth version", "\n", "#label_weights[fg_inds] = 2 ** (1 / np.sqrt(bbox_target_area) * 384) * 10 # fifth version", "\n", "#label_weights[fg_inds] = 10 ** (1 / np.sqrt(bbox_target_area) * 100) # sixt version", "\n", "#label_weights[fg_inds] = 10 ** (1 / np.sqrt(bbox_target_area) * 128)  # seventh version", "\n", "label_weights", "[", "fg_inds", "]", "=", "1", "# eight version", "\n", "\n", "bbox_outside_weights", "=", "np", ".", "array", "(", "\n", "bbox_inside_weights", ">", "0", ",", "dtype", "=", "bbox_inside_weights", ".", "dtype", "\n", ")", "\n", "\n", "# Scale rois and format as (batch_idx, x1, y1, x2, y2)", "\n", "sampled_rois", "=", "sampled_boxes", "*", "im_scale", "\n", "repeated_batch_idx", "=", "batch_idx", "*", "blob_utils", ".", "ones", "(", "(", "sampled_rois", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "\n", "sampled_rois", "=", "np", ".", "hstack", "(", "(", "repeated_batch_idx", ",", "sampled_rois", ")", ")", "\n", "\n", "# Base Fast R-CNN blobs", "\n", "blob_dict", "=", "dict", "(", "\n", "labels_int32", "=", "sampled_labels", ".", "astype", "(", "np", ".", "int32", ",", "copy", "=", "False", ")", ",", "\n", "label_loss_weights", "=", "label_weights", ",", "\n", "rois", "=", "sampled_rois", ",", "\n", "bbox_targets", "=", "bbox_targets", ",", "\n", "bbox_inside_weights", "=", "bbox_inside_weights", ",", "\n", "bbox_outside_weights", "=", "bbox_outside_weights", "\n", ")", "\n", "\n", "# Optionally add Mask R-CNN blobs", "\n", "if", "cfg", ".", "MODEL", ".", "MASK_ON", ":", "\n", "        ", "roi_data", ".", "mask_rcnn", ".", "add_mask_rcnn_blobs", "(", "\n", "blob_dict", ",", "sampled_boxes", ",", "roidb", ",", "im_scale", ",", "batch_idx", "\n", ")", "\n", "\n", "# Optionally add Keypoint R-CNN blobs", "\n", "", "if", "cfg", ".", "MODEL", ".", "KEYPOINTS_ON", ":", "\n", "        ", "roi_data", ".", "keypoint_rcnn", ".", "add_keypoint_rcnn_blobs", "(", "\n", "blob_dict", ",", "roidb", ",", "fg_rois_per_image", ",", "fg_inds", ",", "im_scale", ",", "batch_idx", "\n", ")", "\n", "\n", "", "return", "blob_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.fast_rcnn._all_rois": [[321, 395], ["numpy.array", "numpy.hstack", "dict", "numpy.where", "numpy.where", "fast_rcnn._compute_targets", "fast_rcnn._expand_bbox_targets", "fast_rcnn._expand_bbox_targets", "numpy.ones", "numpy.where", "utils.ones", "Exception", "Exception", "sampled_labels.astype"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.fast_rcnn._compute_targets", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.fast_rcnn._expand_bbox_targets", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.fast_rcnn._expand_bbox_targets", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.blob.ones", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.blob.ones"], ["", "def", "_all_rois", "(", "roidb", ",", "im_scale", ",", "batch_idx", ")", ":", "\n", "    ", "\"\"\"Pass all RoIs with labels.\n    \"\"\"", "\n", "max_overlaps", "=", "roidb", "[", "'max_overlaps'", "]", "\n", "\n", "# Select background RoIs as those within [BG_THRESH_LO, BG_THRESH_HI)", "\n", "bg_inds", "=", "np", ".", "where", "(", "\n", "(", "max_overlaps", "<", "cfg", ".", "TRAIN", ".", "BG_THRESH_HI", ")", "&", "\n", "(", "max_overlaps", ">=", "cfg", ".", "TRAIN", ".", "BG_THRESH_LO", ")", "\n", ")", "[", "0", "]", "\n", "\n", "# Label is the class each RoI has max overlap with", "\n", "sampled_labels", "=", "roidb", "[", "'max_classes'", "]", "\n", "sampled_labels", "[", "bg_inds", "]", "=", "0", "# Label bg RoIs with class 0", "\n", "sampled_boxes", "=", "roidb", "[", "'boxes'", "]", "\n", "\n", "gt_inds", "=", "np", ".", "where", "(", "roidb", "[", "'gt_classes'", "]", ">", "0", ")", "[", "0", "]", "\n", "gt_boxes", "=", "roidb", "[", "'boxes'", "]", "[", "gt_inds", ",", ":", "]", "\n", "gt_assignments", "=", "gt_inds", "[", "roidb", "[", "'box_to_gt_ind_map'", "]", "]", "\n", "\n", "if", "'bbox_targets'", "not", "in", "roidb", ":", "\n", "        ", "bbox_targets", "=", "_compute_targets", "(", "\n", "sampled_boxes", ",", "gt_boxes", "[", "gt_assignments", ",", ":", "]", ",", "sampled_labels", "\n", ")", "\n", "bbox_targets", ",", "bbox_inside_weights", "=", "_expand_bbox_targets", "(", "bbox_targets", ")", "\n", "", "else", ":", "\n", "        ", "bbox_targets", ",", "bbox_inside_weights", "=", "_expand_bbox_targets", "(", "\n", "roidb", "[", "'bbox_targets'", "]", "\n", ")", "\n", "", "label_weights", "=", "np", ".", "ones", "(", "sampled_labels", ".", "shape", ")", "*", "0.1", "# eight version", "\n", "\n", "fg_inds", "=", "np", ".", "where", "(", "sampled_labels", ">", "0", ")", "[", "0", "]", "\n", "\n", "bbox_target_area", "=", "gt_boxes", "[", "gt_assignments", "[", "fg_inds", "]", ",", "2", "]", "*", "gt_boxes", "[", "gt_assignments", "[", "fg_inds", "]", ",", "3", "]", "\n", "\n", "#label_weights[fg_inds] = 9**(1/np.sqrt(bbox_target_area)*100)*10 # initial version", "\n", "#label_weights[fg_inds] = 2 ** (1 / np.sqrt(bbox_target_area) * 256) # second version", "\n", "#label_weights[fg_inds] = 2 ** (1 / np.sqrt(bbox_target_area) * 256) * 10 # third version", "\n", "#label_weights[fg_inds] = 2 ** (1 / np.sqrt(bbox_target_area) * 384)  # forth version", "\n", "#label_weights[fg_inds] = 2 ** (1 / np.sqrt(bbox_target_area) * 384) * 10 # fifth version", "\n", "#label_weights[fg_inds] = 10 ** (1 / np.sqrt(bbox_target_area) * 100) # sixt version", "\n", "#label_weights[fg_inds] = 10 ** (1 / np.sqrt(bbox_target_area) * 128)  # seventh version", "\n", "label_weights", "[", "fg_inds", "]", "=", "1", "# eight version", "\n", "\n", "bbox_outside_weights", "=", "np", ".", "array", "(", "\n", "bbox_inside_weights", ">", "0", ",", "dtype", "=", "bbox_inside_weights", ".", "dtype", "\n", ")", "\n", "\n", "# Scale rois and format as (batch_idx, x1, y1, x2, y2)", "\n", "sampled_rois", "=", "sampled_boxes", "*", "im_scale", "\n", "repeated_batch_idx", "=", "batch_idx", "*", "blob_utils", ".", "ones", "(", "(", "sampled_rois", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "\n", "sampled_rois", "=", "np", ".", "hstack", "(", "(", "repeated_batch_idx", ",", "sampled_rois", ")", ")", "\n", "\n", "# Base Fast R-CNN blobs", "\n", "blob_dict", "=", "dict", "(", "\n", "ohem_labels_int32", "=", "sampled_labels", ".", "astype", "(", "np", ".", "int32", ",", "copy", "=", "False", ")", ",", "\n", "ohem_label_loss_weights", "=", "label_weights", ",", "\n", "ohem_rois", "=", "sampled_rois", ",", "\n", "ohem_bbox_targets", "=", "bbox_targets", ",", "\n", "ohem_bbox_inside_weights", "=", "bbox_inside_weights", ",", "\n", "ohem_bbox_outside_weights", "=", "bbox_outside_weights", "\n", ")", "\n", "\n", "# Optionally add Mask R-CNN blobs", "\n", "if", "cfg", ".", "MODEL", ".", "MASK_ON", ":", "\n", "# not supported yet", "\n", "        ", "raise", "Exception", "(", "'ohem not supported for mask-rcnn'", ")", "\n", "\n", "# Optionally add Keypoint R-CNN blobs", "\n", "", "if", "cfg", ".", "MODEL", ".", "KEYPOINTS_ON", ":", "\n", "# not supported yet", "\n", "        ", "raise", "Exception", "(", "'ohem not supported for key-points'", ")", "\n", "\n", "", "return", "blob_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.fast_rcnn._compute_targets": [[397, 409], ["utils.bbox_transform_inv", "numpy.hstack().astype", "numpy.hstack"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.boxes.bbox_transform_inv"], ["", "def", "_compute_targets", "(", "ex_rois", ",", "gt_rois", ",", "labels", ")", ":", "\n", "    ", "\"\"\"Compute bounding-box regression targets for an image.\"\"\"", "\n", "\n", "assert", "ex_rois", ".", "shape", "[", "0", "]", "==", "gt_rois", ".", "shape", "[", "0", "]", "\n", "assert", "ex_rois", ".", "shape", "[", "1", "]", "==", "4", "\n", "assert", "gt_rois", ".", "shape", "[", "1", "]", "==", "4", "\n", "\n", "targets", "=", "box_utils", ".", "bbox_transform_inv", "(", "\n", "ex_rois", ",", "gt_rois", ",", "cfg", ".", "MODEL", ".", "BBOX_REG_WEIGHTS", "\n", ")", "\n", "return", "np", ".", "hstack", "(", "(", "labels", "[", ":", ",", "np", ".", "newaxis", "]", ",", "targets", ")", ")", ".", "astype", "(", "\n", "np", ".", "float32", ",", "copy", "=", "False", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.fast_rcnn._expand_bbox_targets": [[412, 439], ["utils.zeros", "utils.zeros", "numpy.where", "int"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.blob.zeros", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.blob.zeros"], ["", "def", "_expand_bbox_targets", "(", "bbox_target_data", ")", ":", "\n", "    ", "\"\"\"Bounding-box regression targets are stored in a compact form in the\n    roidb.\n\n    This function expands those targets into the 4-of-4*K representation used\n    by the network (i.e. only one class has non-zero targets). The loss weights\n    are similarly expanded.\n\n    Returns:\n        bbox_target_data (ndarray): N x 4K blob of regression targets\n        bbox_inside_weights (ndarray): N x 4K blob of loss weights\n    \"\"\"", "\n", "num_bbox_reg_classes", "=", "cfg", ".", "MODEL", ".", "NUM_CLASSES", "\n", "if", "cfg", ".", "MODEL", ".", "CLS_AGNOSTIC_BBOX_REG", ":", "\n", "        ", "num_bbox_reg_classes", "=", "2", "# bg and fg", "\n", "\n", "", "clss", "=", "bbox_target_data", "[", ":", ",", "0", "]", "\n", "bbox_targets", "=", "blob_utils", ".", "zeros", "(", "(", "clss", ".", "size", ",", "4", "*", "num_bbox_reg_classes", ")", ")", "\n", "bbox_inside_weights", "=", "blob_utils", ".", "zeros", "(", "bbox_targets", ".", "shape", ")", "\n", "inds", "=", "np", ".", "where", "(", "clss", ">", "0", ")", "[", "0", "]", "\n", "for", "ind", "in", "inds", ":", "\n", "        ", "cls", "=", "int", "(", "clss", "[", "ind", "]", ")", "\n", "start", "=", "4", "*", "cls", "\n", "end", "=", "start", "+", "4", "\n", "bbox_targets", "[", "ind", ",", "start", ":", "end", "]", "=", "bbox_target_data", "[", "ind", ",", "1", ":", "]", "\n", "bbox_inside_weights", "[", "ind", ",", "start", ":", "end", "]", "=", "(", "1.0", ",", "1.0", ",", "1.0", ",", "1.0", ")", "\n", "", "return", "bbox_targets", ",", "bbox_inside_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.fast_rcnn._add_multilevel_rois": [[441, 469], ["fast_rcnn._add_multilevel_rois._distribute_rois_over_fpn_levels"], "function", ["None"], ["", "def", "_add_multilevel_rois", "(", "blobs", ",", "ohem", "=", "False", ")", ":", "\n", "    ", "\"\"\"By default training RoIs are added for a single feature map level only.\n    When using FPN, the RoIs must be distributed over different FPN levels\n    according the level assignment heuristic (see: modeling.FPN.\n    map_rois_to_fpn_levels).\n    \"\"\"", "\n", "lvl_min", "=", "cfg", ".", "FPN", ".", "ROI_MIN_LEVEL", "\n", "lvl_max", "=", "cfg", ".", "FPN", ".", "ROI_MAX_LEVEL", "\n", "\n", "def", "_distribute_rois_over_fpn_levels", "(", "rois_blob_name", ")", ":", "\n", "        ", "\"\"\"Distribute rois over the different FPN levels.\"\"\"", "\n", "# Get target level for each roi", "\n", "# Recall blob rois are in (batch_idx, x1, y1, x2, y2) format, hence take", "\n", "# the box coordinates from columns 1:5", "\n", "target_lvls", "=", "fpn", ".", "map_rois_to_fpn_levels", "(", "\n", "blobs", "[", "rois_blob_name", "]", "[", ":", ",", "1", ":", "5", "]", ",", "lvl_min", ",", "lvl_max", "\n", ")", "\n", "# Add per FPN level roi blobs named like: <rois_blob_name>_fpn<lvl>", "\n", "fpn", ".", "add_multilevel_roi_blobs", "(", "\n", "blobs", ",", "rois_blob_name", ",", "blobs", "[", "rois_blob_name", "]", ",", "target_lvls", ",", "lvl_min", ",", "\n", "lvl_max", "\n", ")", "\n", "\n", "", "_distribute_rois_over_fpn_levels", "(", "'rois'", "if", "not", "ohem", "else", "'ohem_rois'", ")", "\n", "if", "cfg", ".", "MODEL", ".", "MASK_ON", ":", "\n", "        ", "_distribute_rois_over_fpn_levels", "(", "'mask_rois'", ")", "\n", "", "if", "cfg", ".", "MODEL", ".", "KEYPOINTS_ON", ":", "\n", "        ", "_distribute_rois_over_fpn_levels", "(", "'keypoint_rois'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.data_utils.get_field_of_anchors": [[50, 102], ["modeling.generate_anchors.generate_anchors", "int", "numpy.meshgrid", "shift_x.ravel.ravel", "shift_y.ravel.ravel", "numpy.vstack().transpose", "field_of_anchors.reshape.reshape", "FieldOfAnchors", "hasattr", "str", "numpy.ceil", "numpy.ceil", "numpy.arange", "modeling.generate_anchors.generate_anchors.reshape", "np.vstack().transpose.reshape().transpose", "str", "str", "numpy.vstack", "field_of_anchors.reshape.astype", "float", "float", "np.vstack().transpose.reshape"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.generate_anchors.generate_anchors"], ["def", "get_field_of_anchors", "(", "\n", "stride", ",", "anchor_sizes", ",", "anchor_aspect_ratios", ",", "octave", "=", "None", ",", "aspect", "=", "None", "\n", ")", ":", "\n", "    ", "global", "_threadlocal_foa", "\n", "if", "not", "hasattr", "(", "_threadlocal_foa", ",", "'cache'", ")", ":", "\n", "        ", "_threadlocal_foa", ".", "cache", "=", "{", "}", "\n", "\n", "", "cache_key", "=", "str", "(", "stride", ")", "+", "str", "(", "anchor_sizes", ")", "+", "str", "(", "anchor_aspect_ratios", ")", "\n", "if", "cache_key", "in", "_threadlocal_foa", ".", "cache", ":", "\n", "        ", "return", "_threadlocal_foa", ".", "cache", "[", "cache_key", "]", "\n", "\n", "# Anchors at a single feature cell", "\n", "", "cell_anchors", "=", "generate_anchors", "(", "\n", "stride", "=", "stride", ",", "sizes", "=", "anchor_sizes", ",", "aspect_ratios", "=", "anchor_aspect_ratios", "\n", ")", "\n", "num_cell_anchors", "=", "cell_anchors", ".", "shape", "[", "0", "]", "\n", "\n", "# Generate canonical proposals from shifted anchors", "\n", "# Enumerate all shifted positions on the (H, W) grid", "\n", "fpn_max_size", "=", "cfg", ".", "FPN", ".", "COARSEST_STRIDE", "*", "np", ".", "ceil", "(", "\n", "cfg", ".", "TRAIN", ".", "MAX_SIZE", "/", "float", "(", "cfg", ".", "FPN", ".", "COARSEST_STRIDE", ")", "\n", ")", "\n", "field_size", "=", "int", "(", "np", ".", "ceil", "(", "fpn_max_size", "/", "float", "(", "stride", ")", ")", ")", "\n", "shifts", "=", "np", ".", "arange", "(", "0", ",", "field_size", ")", "*", "stride", "\n", "shift_x", ",", "shift_y", "=", "np", ".", "meshgrid", "(", "shifts", ",", "shifts", ")", "\n", "shift_x", "=", "shift_x", ".", "ravel", "(", ")", "\n", "shift_y", "=", "shift_y", ".", "ravel", "(", ")", "\n", "shifts", "=", "np", ".", "vstack", "(", "(", "shift_x", ",", "shift_y", ",", "shift_x", ",", "shift_y", ")", ")", ".", "transpose", "(", ")", "\n", "\n", "# Broacast anchors over shifts to enumerate all anchors at all positions", "\n", "# in the (H, W) grid:", "\n", "#   - add A cell anchors of shape (1, A, 4) to", "\n", "#   - K shifts of shape (K, 1, 4) to get", "\n", "#   - all shifted anchors of shape (K, A, 4)", "\n", "#   - reshape to (K*A, 4) shifted anchors", "\n", "A", "=", "num_cell_anchors", "\n", "K", "=", "shifts", ".", "shape", "[", "0", "]", "\n", "field_of_anchors", "=", "(", "\n", "cell_anchors", ".", "reshape", "(", "(", "1", ",", "A", ",", "4", ")", ")", "+", "\n", "shifts", ".", "reshape", "(", "(", "1", ",", "K", ",", "4", ")", ")", ".", "transpose", "(", "(", "1", ",", "0", ",", "2", ")", ")", "\n", ")", "\n", "field_of_anchors", "=", "field_of_anchors", ".", "reshape", "(", "(", "K", "*", "A", ",", "4", ")", ")", "\n", "foa", "=", "FieldOfAnchors", "(", "\n", "field_of_anchors", "=", "field_of_anchors", ".", "astype", "(", "np", ".", "float32", ")", ",", "\n", "num_cell_anchors", "=", "num_cell_anchors", ",", "\n", "stride", "=", "stride", ",", "\n", "field_size", "=", "field_size", ",", "\n", "octave", "=", "octave", ",", "\n", "aspect", "=", "aspect", "\n", ")", "\n", "_threadlocal_foa", ".", "cache", "[", "cache_key", "]", "=", "foa", "\n", "return", "foa", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.data_utils.unmap": [[104, 119], ["len", "len", "numpy.empty", "np.empty.fill", "numpy.empty", "np.empty.fill"], "function", ["None"], ["", "def", "unmap", "(", "data", ",", "count", ",", "inds", ",", "fill", "=", "0", ")", ":", "\n", "    ", "\"\"\"Unmap a subset of item (data) back to the original set of items (of\n    size count)\"\"\"", "\n", "if", "count", "==", "len", "(", "inds", ")", ":", "\n", "        ", "return", "data", "\n", "\n", "", "if", "len", "(", "data", ".", "shape", ")", "==", "1", ":", "\n", "        ", "ret", "=", "np", ".", "empty", "(", "(", "count", ",", ")", ",", "dtype", "=", "data", ".", "dtype", ")", "\n", "ret", ".", "fill", "(", "fill", ")", "\n", "ret", "[", "inds", "]", "=", "data", "\n", "", "else", ":", "\n", "        ", "ret", "=", "np", ".", "empty", "(", "(", "count", ",", ")", "+", "data", ".", "shape", "[", "1", ":", "]", ",", "dtype", "=", "data", ".", "dtype", ")", "\n", "ret", ".", "fill", "(", "fill", ")", "\n", "ret", "[", "inds", ",", ":", "]", "=", "data", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.data_utils.compute_targets": [[121, 125], ["utils.bbox_transform_inv().astype", "utils.bbox_transform_inv"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.boxes.bbox_transform_inv"], ["", "def", "compute_targets", "(", "ex_rois", ",", "gt_rois", ",", "weights", "=", "(", "1.0", ",", "1.0", ",", "1.0", ",", "1.0", ")", ")", ":", "\n", "    ", "\"\"\"Compute bounding-box regression targets for an image.\"\"\"", "\n", "return", "box_utils", ".", "bbox_transform_inv", "(", "ex_rois", ",", "gt_rois", ",", "weights", ")", ".", "astype", "(", "\n", "np", ".", "float32", ",", "copy", "=", "False", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.keypoint_rcnn.add_keypoint_rcnn_blobs": [[37, 92], ["keypoint_rcnn._within_box", "numpy.minimum", "range", "utils.keypoints_to_heatmap_labels", "heats.reshape.reshape", "weights.reshape.reshape", "numpy.hstack", "heats.reshape.astype", "numpy.where", "numpy.sum", "numpy.where", "numpy.random.choice", "numpy.ones", "len", "utils.ones", "numpy.logical_and", "numpy.logical_and", "len", "numpy.sum"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.keypoint_rcnn._within_box", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.keypoints.keypoints_to_heatmap_labels", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.blob.ones", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.blob.ones"], ["def", "add_keypoint_rcnn_blobs", "(", "\n", "blobs", ",", "roidb", ",", "fg_rois_per_image", ",", "fg_inds", ",", "im_scale", ",", "batch_idx", "\n", ")", ":", "\n", "    ", "\"\"\"Add Mask R-CNN keypoint specific blobs to the given blobs dictionary.\"\"\"", "\n", "# Note: gt_inds must match how they're computed in", "\n", "# datasets.json_dataset._merge_proposal_boxes_into_roidb", "\n", "gt_inds", "=", "np", ".", "where", "(", "roidb", "[", "'gt_classes'", "]", ">", "0", ")", "[", "0", "]", "\n", "max_overlaps", "=", "roidb", "[", "'max_overlaps'", "]", "\n", "gt_keypoints", "=", "roidb", "[", "'gt_keypoints'", "]", "\n", "\n", "ind_kp", "=", "gt_inds", "[", "roidb", "[", "'box_to_gt_ind_map'", "]", "]", "\n", "within_box", "=", "_within_box", "(", "gt_keypoints", "[", "ind_kp", ",", ":", ",", ":", "]", ",", "roidb", "[", "'boxes'", "]", ")", "\n", "vis_kp", "=", "gt_keypoints", "[", "ind_kp", ",", "2", ",", ":", "]", ">", "0", "\n", "is_visible", "=", "np", ".", "sum", "(", "np", ".", "logical_and", "(", "vis_kp", ",", "within_box", ")", ",", "axis", "=", "1", ")", ">", "0", "\n", "kp_fg_inds", "=", "np", ".", "where", "(", "\n", "np", ".", "logical_and", "(", "max_overlaps", ">=", "cfg", ".", "TRAIN", ".", "FG_THRESH", ",", "is_visible", ")", "\n", ")", "[", "0", "]", "\n", "\n", "kp_fg_rois_per_this_image", "=", "np", ".", "minimum", "(", "fg_rois_per_image", ",", "kp_fg_inds", ".", "size", ")", "\n", "if", "kp_fg_inds", ".", "size", ">", "kp_fg_rois_per_this_image", ":", "\n", "        ", "kp_fg_inds", "=", "np", ".", "random", ".", "choice", "(", "\n", "kp_fg_inds", ",", "size", "=", "kp_fg_rois_per_this_image", ",", "replace", "=", "False", "\n", ")", "\n", "\n", "", "sampled_fg_rois", "=", "roidb", "[", "'boxes'", "]", "[", "kp_fg_inds", "]", "\n", "box_to_gt_ind_map", "=", "roidb", "[", "'box_to_gt_ind_map'", "]", "[", "kp_fg_inds", "]", "\n", "\n", "num_keypoints", "=", "gt_keypoints", ".", "shape", "[", "2", "]", "\n", "sampled_keypoints", "=", "-", "np", ".", "ones", "(", "\n", "(", "len", "(", "sampled_fg_rois", ")", ",", "gt_keypoints", ".", "shape", "[", "1", "]", ",", "num_keypoints", ")", ",", "\n", "dtype", "=", "gt_keypoints", ".", "dtype", "\n", ")", "\n", "for", "ii", "in", "range", "(", "len", "(", "sampled_fg_rois", ")", ")", ":", "\n", "        ", "ind", "=", "box_to_gt_ind_map", "[", "ii", "]", "\n", "if", "ind", ">=", "0", ":", "\n", "            ", "sampled_keypoints", "[", "ii", ",", ":", ",", ":", "]", "=", "gt_keypoints", "[", "gt_inds", "[", "ind", "]", ",", ":", ",", ":", "]", "\n", "assert", "np", ".", "sum", "(", "sampled_keypoints", "[", "ii", ",", "2", ",", ":", "]", ")", ">", "0", "\n", "\n", "", "", "heats", ",", "weights", "=", "keypoint_utils", ".", "keypoints_to_heatmap_labels", "(", "\n", "sampled_keypoints", ",", "sampled_fg_rois", "\n", ")", "\n", "\n", "shape", "=", "(", "sampled_fg_rois", ".", "shape", "[", "0", "]", "*", "cfg", ".", "KRCNN", ".", "NUM_KEYPOINTS", ",", "1", ")", "\n", "heats", "=", "heats", ".", "reshape", "(", "shape", ")", "\n", "weights", "=", "weights", ".", "reshape", "(", "shape", ")", "\n", "\n", "sampled_fg_rois", "*=", "im_scale", "\n", "repeated_batch_idx", "=", "batch_idx", "*", "blob_utils", ".", "ones", "(", "\n", "(", "sampled_fg_rois", ".", "shape", "[", "0", "]", ",", "1", ")", "\n", ")", "\n", "sampled_fg_rois", "=", "np", ".", "hstack", "(", "(", "repeated_batch_idx", ",", "sampled_fg_rois", ")", ")", "\n", "\n", "blobs", "[", "'keypoint_rois'", "]", "=", "sampled_fg_rois", "\n", "blobs", "[", "'keypoint_locations_int32'", "]", "=", "heats", ".", "astype", "(", "np", ".", "int32", ",", "copy", "=", "False", ")", "\n", "blobs", "[", "'keypoint_weights'", "]", "=", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.keypoint_rcnn.finalize_keypoint_minibatch": [[94, 112], ["numpy.sum", "numpy.array", "len"], "function", ["None"], ["", "def", "finalize_keypoint_minibatch", "(", "blobs", ",", "valid", ")", ":", "\n", "    ", "\"\"\"Finalize the minibatch after blobs for all minibatch images have been\n    collated.\n    \"\"\"", "\n", "min_count", "=", "cfg", ".", "KRCNN", ".", "MIN_KEYPOINT_COUNT_FOR_VALID_MINIBATCH", "\n", "num_visible_keypoints", "=", "np", ".", "sum", "(", "blobs", "[", "'keypoint_weights'", "]", ")", "\n", "valid", "=", "(", "\n", "valid", "and", "len", "(", "blobs", "[", "'keypoint_weights'", "]", ")", ">", "0", "and", "\n", "num_visible_keypoints", ">", "min_count", "\n", ")", "\n", "# Normalizer to use if cfg.KRCNN.NORMALIZE_BY_VISIBLE_KEYPOINTS is False.", "\n", "# See modeling.model_builder.add_keypoint_losses", "\n", "norm", "=", "num_visible_keypoints", "/", "(", "\n", "cfg", ".", "TRAIN", ".", "IMS_PER_BATCH", "*", "cfg", ".", "TRAIN", ".", "BATCH_SIZE_PER_IM", "*", "\n", "cfg", ".", "TRAIN", ".", "FG_FRACTION", "*", "cfg", ".", "KRCNN", ".", "NUM_KEYPOINTS", "\n", ")", "\n", "blobs", "[", "'keypoint_loss_normalizer'", "]", "=", "np", ".", "array", "(", "norm", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "return", "valid", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.keypoint_rcnn._within_box": [[114, 130], ["numpy.logical_and", "numpy.logical_and", "numpy.logical_and", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims"], "function", ["None"], ["", "def", "_within_box", "(", "points", ",", "boxes", ")", ":", "\n", "    ", "\"\"\"Validate which keypoints are contained inside a given box.\n\n    points: Nx2xK\n    boxes: Nx4\n    output: NxK\n    \"\"\"", "\n", "x_within", "=", "np", ".", "logical_and", "(", "\n", "points", "[", ":", ",", "0", ",", ":", "]", ">=", "np", ".", "expand_dims", "(", "boxes", "[", ":", ",", "0", "]", ",", "axis", "=", "1", ")", ",", "\n", "points", "[", ":", ",", "0", ",", ":", "]", "<=", "np", ".", "expand_dims", "(", "boxes", "[", ":", ",", "2", "]", ",", "axis", "=", "1", ")", "\n", ")", "\n", "y_within", "=", "np", ".", "logical_and", "(", "\n", "points", "[", ":", ",", "1", ",", ":", "]", ">=", "np", ".", "expand_dims", "(", "boxes", "[", ":", ",", "1", "]", ",", "axis", "=", "1", ")", ",", "\n", "points", "[", ":", ",", "1", ",", ":", "]", "<=", "np", ".", "expand_dims", "(", "boxes", "[", ":", ",", "3", "]", ",", "axis", "=", "1", ")", "\n", ")", "\n", "return", "np", ".", "logical_and", "(", "x_within", ",", "y_within", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.mask_rcnn.add_mask_rcnn_blobs": [[37, 103], ["utils.polys_to_boxes", "blobs[].copy", "numpy.hstack", "numpy.where", "numpy.where", "utils.zeros", "utils.bbox_overlaps", "numpy.argmax", "range", "sampled_boxes[].reshape", "utils.zeros", "mask_rcnn._expand_to_class_specific_mask_targets", "utils.ones", "sampled_boxes[].reshape.astype", "segm_utils.polys_to_boxes.astype", "utils.polys_to_mask_wrt_box", "numpy.array", "numpy.reshape", "numpy.where", "utils.ones"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.segms.polys_to_boxes", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.blob.zeros", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.blob.zeros", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.mask_rcnn._expand_to_class_specific_mask_targets", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.blob.ones", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.segms.polys_to_mask_wrt_box", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.blob.ones"], ["def", "add_mask_rcnn_blobs", "(", "blobs", ",", "sampled_boxes", ",", "roidb", ",", "im_scale", ",", "batch_idx", ")", ":", "\n", "    ", "\"\"\"Add Mask R-CNN specific blobs to the input blob dictionary.\"\"\"", "\n", "# Prepare the mask targets by associating one gt mask to each training roi", "\n", "# that has a fg (non-bg) class label.", "\n", "M", "=", "cfg", ".", "MRCNN", ".", "RESOLUTION", "\n", "polys_gt_inds", "=", "np", ".", "where", "(", "\n", "(", "roidb", "[", "'gt_classes'", "]", ">", "0", ")", "&", "(", "roidb", "[", "'is_crowd'", "]", "==", "0", ")", "\n", ")", "[", "0", "]", "\n", "polys_gt", "=", "[", "roidb", "[", "'segms'", "]", "[", "i", "]", "for", "i", "in", "polys_gt_inds", "]", "\n", "boxes_from_polys", "=", "segm_utils", ".", "polys_to_boxes", "(", "polys_gt", ")", "\n", "fg_inds", "=", "np", ".", "where", "(", "blobs", "[", "'labels_int32'", "]", ">", "0", ")", "[", "0", "]", "\n", "roi_has_mask", "=", "blobs", "[", "'labels_int32'", "]", ".", "copy", "(", ")", "\n", "roi_has_mask", "[", "roi_has_mask", ">", "0", "]", "=", "1", "\n", "\n", "if", "fg_inds", ".", "shape", "[", "0", "]", ">", "0", ":", "\n", "# Class labels for the foreground rois", "\n", "        ", "mask_class_labels", "=", "blobs", "[", "'labels_int32'", "]", "[", "fg_inds", "]", "\n", "masks", "=", "blob_utils", ".", "zeros", "(", "(", "fg_inds", ".", "shape", "[", "0", "]", ",", "M", "**", "2", ")", ",", "int32", "=", "True", ")", "\n", "\n", "# Find overlap between all foreground rois and the bounding boxes", "\n", "# enclosing each segmentation", "\n", "rois_fg", "=", "sampled_boxes", "[", "fg_inds", "]", "\n", "overlaps_bbfg_bbpolys", "=", "box_utils", ".", "bbox_overlaps", "(", "\n", "rois_fg", ".", "astype", "(", "np", ".", "float32", ",", "copy", "=", "False", ")", ",", "\n", "boxes_from_polys", ".", "astype", "(", "np", ".", "float32", ",", "copy", "=", "False", ")", "\n", ")", "\n", "# Map from each fg rois to the index of the mask with highest overlap", "\n", "# (measured by bbox overlap)", "\n", "fg_polys_inds", "=", "np", ".", "argmax", "(", "overlaps_bbfg_bbpolys", ",", "axis", "=", "1", ")", "\n", "\n", "# add fg targets", "\n", "for", "i", "in", "range", "(", "rois_fg", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "fg_polys_ind", "=", "fg_polys_inds", "[", "i", "]", "\n", "poly_gt", "=", "polys_gt", "[", "fg_polys_ind", "]", "\n", "roi_fg", "=", "rois_fg", "[", "i", "]", "\n", "# Rasterize the portion of the polygon mask within the given fg roi", "\n", "# to an M x M binary image", "\n", "mask", "=", "segm_utils", ".", "polys_to_mask_wrt_box", "(", "poly_gt", ",", "roi_fg", ",", "M", ")", "\n", "mask", "=", "np", ".", "array", "(", "mask", ">", "0", ",", "dtype", "=", "np", ".", "int32", ")", "# Ensure it's binary", "\n", "masks", "[", "i", ",", ":", "]", "=", "np", ".", "reshape", "(", "mask", ",", "M", "**", "2", ")", "\n", "", "", "else", ":", "# If there are no fg masks (it does happen)", "\n", "# The network cannot handle empty blobs, so we must provide a mask", "\n", "# We simply take the first bg roi, given it an all -1's mask (ignore", "\n", "# label), and label it with class zero (bg).", "\n", "        ", "bg_inds", "=", "np", ".", "where", "(", "blobs", "[", "'labels_int32'", "]", "==", "0", ")", "[", "0", "]", "\n", "# rois_fg is actually one background roi, but that's ok because ...", "\n", "rois_fg", "=", "sampled_boxes", "[", "bg_inds", "[", "0", "]", "]", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", "\n", "# We give it an -1's blob (ignore label)", "\n", "masks", "=", "-", "blob_utils", ".", "ones", "(", "(", "1", ",", "M", "**", "2", ")", ",", "int32", "=", "True", ")", "\n", "# We label it with class = 0 (background)", "\n", "mask_class_labels", "=", "blob_utils", ".", "zeros", "(", "(", "1", ",", ")", ")", "\n", "# Mark that the first roi has a mask", "\n", "roi_has_mask", "[", "0", "]", "=", "1", "\n", "\n", "", "if", "cfg", ".", "MRCNN", ".", "CLS_SPECIFIC_MASK", ":", "\n", "        ", "masks", "=", "_expand_to_class_specific_mask_targets", "(", "masks", ",", "mask_class_labels", ")", "\n", "\n", "# Scale rois_fg and format as (batch_idx, x1, y1, x2, y2)", "\n", "", "rois_fg", "*=", "im_scale", "\n", "repeated_batch_idx", "=", "batch_idx", "*", "blob_utils", ".", "ones", "(", "(", "rois_fg", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "\n", "rois_fg", "=", "np", ".", "hstack", "(", "(", "repeated_batch_idx", ",", "rois_fg", ")", ")", "\n", "\n", "# Update blobs dict with Mask R-CNN blobs", "\n", "blobs", "[", "'mask_rois'", "]", "=", "rois_fg", "\n", "blobs", "[", "'roi_has_mask_int32'", "]", "=", "roi_has_mask", "\n", "blobs", "[", "'masks_int32'", "]", "=", "masks", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.mask_rcnn._expand_to_class_specific_mask_targets": [[105, 127], ["range", "utils.ones", "int"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.blob.ones"], ["", "def", "_expand_to_class_specific_mask_targets", "(", "masks", ",", "mask_class_labels", ")", ":", "\n", "    ", "\"\"\"Expand masks from shape (#masks, M ** 2) to (#masks, #classes * M ** 2)\n    to encode class specific mask targets.\n    \"\"\"", "\n", "assert", "masks", ".", "shape", "[", "0", "]", "==", "mask_class_labels", ".", "shape", "[", "0", "]", "\n", "M", "=", "cfg", ".", "MRCNN", ".", "RESOLUTION", "\n", "\n", "# Target values of -1 are \"don't care\" / ignore labels", "\n", "mask_targets", "=", "-", "blob_utils", ".", "ones", "(", "\n", "(", "masks", ".", "shape", "[", "0", "]", ",", "cfg", ".", "MODEL", ".", "NUM_CLASSES", "*", "M", "**", "2", ")", ",", "int32", "=", "True", "\n", ")", "\n", "\n", "for", "i", "in", "range", "(", "masks", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "cls", "=", "int", "(", "mask_class_labels", "[", "i", "]", ")", "\n", "start", "=", "M", "**", "2", "*", "cls", "\n", "end", "=", "start", "+", "M", "**", "2", "\n", "# Ignore background instance", "\n", "# (only happens when there is no fg samples in an image)", "\n", "if", "cls", ">", "0", ":", "\n", "            ", "mask_targets", "[", "i", ",", "start", ":", "end", "]", "=", "masks", "[", "i", ",", ":", "]", "\n", "\n", "", "", "return", "mask_targets", "\n", "", ""]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.minibatch.get_minibatch_blob_names": [[44, 62], ["roi_data.rpn.get_rpn_blob_names", "roi_data.rpn.get_rpn_blob_names", "roi_data.rpn.get_rpn_blob_names", "roi_data.retinanet.get_retinanet_blob_names", "roi_data.retinanet.get_retinanet_blob_names", "roi_data.retinanet.get_retinanet_blob_names", "roi_data.fast_rcnn.get_fast_rcnn_blob_names", "roi_data.fast_rcnn.get_fast_rcnn_blob_names", "roi_data.fast_rcnn.get_fast_rcnn_blob_names"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.rpn.get_rpn_blob_names", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.rpn.get_rpn_blob_names", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.rpn.get_rpn_blob_names", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.retinanet.get_retinanet_blob_names", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.retinanet.get_retinanet_blob_names", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.retinanet.get_retinanet_blob_names", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.fast_rcnn.get_fast_rcnn_blob_names", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.fast_rcnn.get_fast_rcnn_blob_names", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.fast_rcnn.get_fast_rcnn_blob_names"], ["def", "get_minibatch_blob_names", "(", "is_training", "=", "True", ")", ":", "\n", "    ", "\"\"\"Return blob names in the order in which they are read by the data loader.\n    \"\"\"", "\n", "# data blob: holds a batch of N images, each with 3 channels", "\n", "blob_names", "=", "[", "'data'", "]", "\n", "if", "cfg", ".", "RPN", ".", "RPN_ON", ":", "\n", "# RPN-only or end-to-end Faster R-CNN", "\n", "        ", "blob_names", "+=", "roi_data", ".", "rpn", ".", "get_rpn_blob_names", "(", "is_training", "=", "is_training", ")", "\n", "", "elif", "cfg", ".", "RETINANET", ".", "RETINANET_ON", ":", "\n", "        ", "blob_names", "+=", "roi_data", ".", "retinanet", ".", "get_retinanet_blob_names", "(", "\n", "is_training", "=", "is_training", "\n", ")", "\n", "", "else", ":", "\n", "# Fast R-CNN like models trained on precomputed proposals", "\n", "        ", "blob_names", "+=", "roi_data", ".", "fast_rcnn", ".", "get_fast_rcnn_blob_names", "(", "\n", "is_training", "=", "is_training", "\n", ")", "\n", "", "return", "blob_names", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.minibatch.get_minibatch": [[64, 87], ["minibatch._get_image_blob", "roi_data.rpn.add_rpn_blobs", "roi_data.rpn.add_rpn_blobs", "roi_data.rpn.add_rpn_blobs", "minibatch.get_minibatch_blob_names", "roi_data.retinanet.add_retinanet_blobs", "roi_data.retinanet.add_retinanet_blobs", "roi_data.retinanet.add_retinanet_blobs", "roi_data.fast_rcnn.add_fast_rcnn_blobs", "roi_data.fast_rcnn.add_fast_rcnn_blobs", "roi_data.fast_rcnn.add_fast_rcnn_blobs"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test._get_image_blob", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.rpn.add_rpn_blobs", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.rpn.add_rpn_blobs", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.rpn.add_rpn_blobs", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.minibatch.get_minibatch_blob_names", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.retinanet.add_retinanet_blobs", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.retinanet.add_retinanet_blobs", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.retinanet.add_retinanet_blobs", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.fast_rcnn.add_fast_rcnn_blobs", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.fast_rcnn.add_fast_rcnn_blobs", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.fast_rcnn.add_fast_rcnn_blobs"], ["", "def", "get_minibatch", "(", "roidb", ")", ":", "\n", "    ", "\"\"\"Given a roidb, construct a minibatch sampled from it.\"\"\"", "\n", "# We collect blobs from each image onto a list and then concat them into a", "\n", "# single tensor, hence we initialize each blob to an empty list", "\n", "blobs", "=", "{", "k", ":", "[", "]", "for", "k", "in", "get_minibatch_blob_names", "(", ")", "}", "\n", "# Get the input image blob, formatted for caffe2", "\n", "im_blob", ",", "im_scales", "=", "_get_image_blob", "(", "roidb", ")", "\n", "blobs", "[", "'data'", "]", "=", "im_blob", "\n", "if", "cfg", ".", "RPN", ".", "RPN_ON", ":", "\n", "# RPN-only or end-to-end Faster/Mask R-CNN", "\n", "        ", "valid", "=", "roi_data", ".", "rpn", ".", "add_rpn_blobs", "(", "blobs", ",", "im_scales", ",", "roidb", ")", "\n", "", "elif", "cfg", ".", "RETINANET", ".", "RETINANET_ON", ":", "\n", "        ", "im_width", ",", "im_height", "=", "im_blob", ".", "shape", "[", "3", "]", ",", "im_blob", ".", "shape", "[", "2", "]", "\n", "# im_width, im_height corresponds to the network input: padded image", "\n", "# (if needed) width and height. We pass it as input and slice the data", "\n", "# accordingly so that we don't need to use SampleAsOp", "\n", "valid", "=", "roi_data", ".", "retinanet", ".", "add_retinanet_blobs", "(", "\n", "blobs", ",", "im_scales", ",", "roidb", ",", "im_width", ",", "im_height", "\n", ")", "\n", "", "else", ":", "\n", "# Fast R-CNN like models trained on precomputed proposals", "\n", "        ", "valid", "=", "roi_data", ".", "fast_rcnn", ".", "add_fast_rcnn_blobs", "(", "blobs", ",", "im_scales", ",", "roidb", ")", "\n", "", "return", "blobs", ",", "valid", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.minibatch._get_image_blob": [[89, 115], ["len", "numpy.random.randint", "range", "utils.im_list_to_blob", "cv2.imread", "utils.prep_im_for_blob", "im_scales.append", "processed_ims.append", "len"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.blob.im_list_to_blob", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.blob.prep_im_for_blob"], ["", "def", "_get_image_blob", "(", "roidb", ")", ":", "\n", "    ", "\"\"\"Builds an input blob from the images in the roidb at the specified\n    scales.\n    \"\"\"", "\n", "num_images", "=", "len", "(", "roidb", ")", "\n", "# Sample random scales to use for each image in this batch", "\n", "scale_inds", "=", "np", ".", "random", ".", "randint", "(", "\n", "0", ",", "high", "=", "len", "(", "cfg", ".", "TRAIN", ".", "SCALES", ")", ",", "size", "=", "num_images", "\n", ")", "\n", "processed_ims", "=", "[", "]", "\n", "im_scales", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_images", ")", ":", "\n", "        ", "im", "=", "cv2", ".", "imread", "(", "roidb", "[", "i", "]", "[", "'image'", "]", ")", "\n", "if", "roidb", "[", "i", "]", "[", "'flipped'", "]", ":", "\n", "            ", "im", "=", "im", "[", ":", ",", ":", ":", "-", "1", ",", ":", "]", "\n", "", "target_size", "=", "cfg", ".", "TRAIN", ".", "SCALES", "[", "scale_inds", "[", "i", "]", "]", "\n", "im", ",", "im_scale", "=", "blob_utils", ".", "prep_im_for_blob", "(", "\n", "im", ",", "cfg", ".", "PIXEL_MEANS", ",", "[", "target_size", "]", ",", "cfg", ".", "TRAIN", ".", "MAX_SIZE", "\n", ")", "\n", "im_scales", ".", "append", "(", "im_scale", "[", "0", "]", ")", "\n", "processed_ims", ".", "append", "(", "im", "[", "0", "]", ")", "\n", "\n", "# Create a blob to hold the input images", "\n", "", "blob", "=", "blob_utils", ".", "im_list_to_blob", "(", "processed_ims", ")", "\n", "\n", "return", "blob", ",", "im_scales", "\n", "", ""]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.loader.RoIDataLoader.__init__": [[67, 96], ["threading.Lock", "collections.deque", "Queue.Queue", "uuid.uuid4", "utils.coordinator.Coordinator", "roi_data.minibatch.get_minibatch_blob_names", "loader.RoIDataLoader._shuffle_roidb_inds", "loader.RoIDataLoader.create_threads", "range", "len"], "methods", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.minibatch.get_minibatch_blob_names", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.loader.RoIDataLoader._shuffle_roidb_inds", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.loader.RoIDataLoader.create_threads"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "roidb", ",", "\n", "num_loaders", "=", "4", ",", "\n", "minibatch_queue_size", "=", "64", ",", "\n", "blobs_queue_capacity", "=", "8", "\n", ")", ":", "\n", "        ", "self", ".", "_roidb", "=", "roidb", "\n", "self", ".", "_lock", "=", "threading", ".", "Lock", "(", ")", "\n", "self", ".", "_perm", "=", "deque", "(", "range", "(", "len", "(", "self", ".", "_roidb", ")", ")", ")", "\n", "self", ".", "_cur", "=", "0", "# _perm cursor", "\n", "# The minibatch queue holds prepared training data in host (CPU) memory", "\n", "# When training with N > 1 GPUs, each element in the minibatch queue", "\n", "# is actually a partial minibatch which contributes 1 / N of the", "\n", "# examples to the overall minibatch", "\n", "self", ".", "_minibatch_queue", "=", "Queue", ".", "Queue", "(", "maxsize", "=", "minibatch_queue_size", ")", "\n", "self", ".", "_blobs_queue_capacity", "=", "blobs_queue_capacity", "\n", "# Random queue name in case one instantiates multple RoIDataLoaders", "\n", "self", ".", "_loader_id", "=", "uuid", ".", "uuid4", "(", ")", "\n", "self", ".", "_blobs_queue_name", "=", "'roi_blobs_queue_{}'", ".", "format", "(", "self", ".", "_loader_id", ")", "\n", "# Loader threads construct (partial) minibatches and put them on the", "\n", "# minibatch queue", "\n", "self", ".", "_num_loaders", "=", "num_loaders", "\n", "self", ".", "_num_gpus", "=", "cfg", ".", "NUM_GPUS", "\n", "self", ".", "coordinator", "=", "Coordinator", "(", ")", "\n", "\n", "self", ".", "_output_names", "=", "get_minibatch_blob_names", "(", ")", "\n", "self", ".", "_shuffle_roidb_inds", "(", ")", "\n", "self", ".", "create_threads", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.loader.RoIDataLoader.minibatch_loader_thread": [[97, 114], ["logger.info", "loader.RoIDataLoader.coordinator.stop_on_exception", "loader.RoIDataLoader.coordinator.should_stop", "loader.RoIDataLoader.get_next_minibatch", "collections.OrderedDict", "loader.RoIDataLoader.get_output_names", "utils.coordinator.coordinated_put"], "methods", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.coordinator.Coordinator.stop_on_exception", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.coordinator.Coordinator.should_stop", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.loader.RoIDataLoader.get_next_minibatch", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.loader.RoIDataLoader.get_output_names", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.coordinator.coordinated_put"], ["", "def", "minibatch_loader_thread", "(", "self", ")", ":", "\n", "        ", "\"\"\"Load mini-batches and put them onto the mini-batch queue.\"\"\"", "\n", "with", "self", ".", "coordinator", ".", "stop_on_exception", "(", ")", ":", "\n", "            ", "while", "not", "self", ".", "coordinator", ".", "should_stop", "(", ")", ":", "\n", "                ", "blobs", "=", "self", ".", "get_next_minibatch", "(", ")", "\n", "# Blobs must be queued in the order specified by", "\n", "# self.get_output_names", "\n", "ordered_blobs", "=", "OrderedDict", "(", ")", "\n", "for", "key", "in", "self", ".", "get_output_names", "(", ")", ":", "\n", "                    ", "assert", "blobs", "[", "key", "]", ".", "dtype", "in", "(", "np", ".", "int32", ",", "np", ".", "float32", ")", ",", "'Blob {} of dtype {} must have dtype of '", "'np.int32 or np.float32'", ".", "format", "(", "key", ",", "blobs", "[", "key", "]", ".", "dtype", ")", "\n", "ordered_blobs", "[", "key", "]", "=", "blobs", "[", "key", "]", "\n", "", "coordinated_put", "(", "\n", "self", ".", "coordinator", ",", "self", ".", "_minibatch_queue", ",", "ordered_blobs", "\n", ")", "\n", "", "", "logger", ".", "info", "(", "'Stopping mini-batch loading thread'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.loader.RoIDataLoader.enqueue_blobs_thread": [[115, 127], ["loader.RoIDataLoader.coordinator.stop_on_exception", "logger.info", "loader.RoIDataLoader.coordinator.should_stop", "utils.coordinator.coordinated_get", "loader.RoIDataLoader.enqueue_blobs", "logger.debug", "logger.warning", "utils.coordinator.coordinated_get.values", "loader.RoIDataLoader._minibatch_queue.qsize"], "methods", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.coordinator.Coordinator.stop_on_exception", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.coordinator.Coordinator.should_stop", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.coordinator.coordinated_get", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.loader.RoIDataLoader.enqueue_blobs"], ["", "def", "enqueue_blobs_thread", "(", "self", ",", "gpu_id", ",", "blob_names", ")", ":", "\n", "        ", "\"\"\"Transfer mini-batches from a mini-batch queue to a BlobsQueue.\"\"\"", "\n", "with", "self", ".", "coordinator", ".", "stop_on_exception", "(", ")", ":", "\n", "            ", "while", "not", "self", ".", "coordinator", ".", "should_stop", "(", ")", ":", "\n", "                ", "if", "self", ".", "_minibatch_queue", ".", "qsize", "==", "0", ":", "\n", "                    ", "logger", ".", "warning", "(", "'Mini-batch queue is empty'", ")", "\n", "", "blobs", "=", "coordinated_get", "(", "self", ".", "coordinator", ",", "self", ".", "_minibatch_queue", ")", "\n", "self", ".", "enqueue_blobs", "(", "gpu_id", ",", "blob_names", ",", "blobs", ".", "values", "(", ")", ")", "\n", "logger", ".", "debug", "(", "\n", "'batch queue size {}'", ".", "format", "(", "self", ".", "_minibatch_queue", ".", "qsize", "(", ")", ")", "\n", ")", "\n", "", "logger", ".", "info", "(", "'Stopping enqueue thread'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.loader.RoIDataLoader.get_next_minibatch": [[128, 136], ["loader.RoIDataLoader._get_next_minibatch_inds", "roi_data.minibatch.get_minibatch"], "methods", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.loader.RoIDataLoader._get_next_minibatch_inds", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.minibatch.get_minibatch"], ["", "", "def", "get_next_minibatch", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return the blobs to be used for the next minibatch. Thread safe.\"\"\"", "\n", "valid", "=", "False", "\n", "while", "not", "valid", ":", "\n", "            ", "db_inds", "=", "self", ".", "_get_next_minibatch_inds", "(", ")", "\n", "minibatch_db", "=", "[", "self", ".", "_roidb", "[", "i", "]", "for", "i", "in", "db_inds", "]", "\n", "blobs", ",", "valid", "=", "get_minibatch", "(", "minibatch_db", ")", "\n", "", "return", "blobs", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.loader.RoIDataLoader._shuffle_roidb_inds": [[137, 166], ["collections.deque", "numpy.array", "numpy.array", "print", "numpy.logical_not", "print", "print", "numpy.hstack", "numpy.set_printoptions", "print", "print", "numpy.reshape", "numpy.random.permutation", "numpy.reshape", "numpy.random.permutation", "numpy.where", "numpy.where", "numpy.arange", "numpy.arange", "numpy.random.permutation", "numpy.random.permutation", "len"], "methods", ["None"], ["", "def", "_shuffle_roidb_inds", "(", "self", ")", ":", "\n", "        ", "\"\"\"Randomly permute the training roidb. Not thread safe.\"\"\"", "\n", "if", "cfg", ".", "TRAIN", ".", "ASPECT_GROUPING", ":", "\n", "            ", "widths", "=", "np", ".", "array", "(", "[", "r", "[", "'width'", "]", "for", "r", "in", "self", ".", "_roidb", "]", ")", "\n", "heights", "=", "np", ".", "array", "(", "[", "r", "[", "'height'", "]", "for", "r", "in", "self", ".", "_roidb", "]", ")", "\n", "print", "(", "widths", ",", "heights", ")", "\n", "horz", "=", "(", "widths", ">=", "heights", ")", "\n", "vert", "=", "np", ".", "logical_not", "(", "horz", ")", "\n", "print", "(", "horz", ",", "vert", ")", "\n", "horz_inds", "=", "np", ".", "where", "(", "horz", ")", "[", "0", "]", "\n", "vert_inds", "=", "np", ".", "where", "(", "vert", ")", "[", "0", "]", "\n", "print", "(", "horz_inds", ",", "vert_inds", ")", "\n", "inds", "=", "np", ".", "hstack", "(", "\n", "(", "\n", "np", ".", "random", ".", "permutation", "(", "horz_inds", ")", ",", "\n", "np", ".", "random", ".", "permutation", "(", "vert_inds", ")", "\n", ")", "\n", ")", "\n", "np", ".", "set_printoptions", "(", "threshold", "=", "np", ".", "inf", ")", "\n", "print", "(", "inds", ")", "\n", "print", "(", "inds", ".", "size", ")", "\n", "inds", "=", "np", ".", "reshape", "(", "inds", ",", "(", "-", "1", ",", "2", ")", ")", "\n", "row_perm", "=", "np", ".", "random", ".", "permutation", "(", "np", ".", "arange", "(", "inds", ".", "shape", "[", "0", "]", ")", ")", "\n", "inds", "=", "np", ".", "reshape", "(", "inds", "[", "row_perm", ",", ":", "]", ",", "(", "-", "1", ",", ")", ")", "\n", "self", ".", "_perm", "=", "inds", "\n", "", "else", ":", "\n", "            ", "self", ".", "_perm", "=", "np", ".", "random", ".", "permutation", "(", "np", ".", "arange", "(", "len", "(", "self", ".", "_roidb", ")", ")", ")", "\n", "", "self", ".", "_perm", "=", "deque", "(", "self", ".", "_perm", ")", "\n", "self", ".", "_cur", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.loader.RoIDataLoader._get_next_minibatch_inds": [[167, 180], ["loader.RoIDataLoader._perm.rotate", "len", "loader.RoIDataLoader._shuffle_roidb_inds", "range"], "methods", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.loader.RoIDataLoader._shuffle_roidb_inds"], ["", "def", "_get_next_minibatch_inds", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return the roidb indices for the next minibatch. Thread safe.\"\"\"", "\n", "with", "self", ".", "_lock", ":", "\n", "# We use a deque and always take the *first* IMS_PER_BATCH items", "\n", "# followed by *rotating* the deque so that we see fresh items", "\n", "# each time. If the length of _perm is not divisible by", "\n", "# IMS_PER_BATCH, then we end up wrapping around the permutation.", "\n", "            ", "db_inds", "=", "[", "self", ".", "_perm", "[", "i", "]", "for", "i", "in", "range", "(", "cfg", ".", "TRAIN", ".", "IMS_PER_BATCH", ")", "]", "\n", "self", ".", "_perm", ".", "rotate", "(", "-", "cfg", ".", "TRAIN", ".", "IMS_PER_BATCH", ")", "\n", "self", ".", "_cur", "+=", "cfg", ".", "TRAIN", ".", "IMS_PER_BATCH", "\n", "if", "self", ".", "_cur", ">=", "len", "(", "self", ".", "_perm", ")", ":", "\n", "                ", "self", ".", "_shuffle_roidb_inds", "(", ")", "\n", "", "", "return", "db_inds", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.loader.RoIDataLoader.get_output_names": [[181, 183], ["None"], "methods", ["None"], ["", "def", "get_output_names", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_output_names", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.loader.RoIDataLoader.enqueue_blobs": [[184, 207], ["time.time", "utils.CudaDevice", "zip", "logger.debug", "time.time", "caffe2.python.core.CreateOperator", "caffe2.python.workspace.RunOperatorOnce", "logger.debug", "len", "len", "caffe2.python.workspace.FeedBlob", "time.time", "time.time"], "methods", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.c2.CudaDevice"], ["", "def", "enqueue_blobs", "(", "self", ",", "gpu_id", ",", "blob_names", ",", "blobs", ")", ":", "\n", "        ", "\"\"\"Put a mini-batch on a BlobsQueue.\"\"\"", "\n", "assert", "len", "(", "blob_names", ")", "==", "len", "(", "blobs", ")", "\n", "t", "=", "time", ".", "time", "(", ")", "\n", "dev", "=", "c2_utils", ".", "CudaDevice", "(", "gpu_id", ")", "\n", "queue_name", "=", "'gpu_{}/{}'", ".", "format", "(", "gpu_id", ",", "self", ".", "_blobs_queue_name", ")", "\n", "blob_names", "=", "[", "'gpu_{}/{}'", ".", "format", "(", "gpu_id", ",", "b", ")", "for", "b", "in", "blob_names", "]", "\n", "for", "(", "blob_name", ",", "blob", ")", "in", "zip", "(", "blob_names", ",", "blobs", ")", ":", "\n", "            ", "workspace", ".", "FeedBlob", "(", "blob_name", ",", "blob", ",", "device_option", "=", "dev", ")", "\n", "", "logger", ".", "debug", "(", "\n", "'enqueue_blobs {}: workspace.FeedBlob: {}'", ".", "\n", "format", "(", "gpu_id", ",", "time", ".", "time", "(", ")", "-", "t", ")", "\n", ")", "\n", "t", "=", "time", ".", "time", "(", ")", "\n", "op", "=", "core", ".", "CreateOperator", "(", "\n", "'SafeEnqueueBlobs'", ",", "[", "queue_name", "]", "+", "blob_names", ",", "\n", "blob_names", "+", "[", "queue_name", "+", "'_enqueue_status'", "]", ",", "\n", "device_option", "=", "dev", "\n", ")", "\n", "workspace", ".", "RunOperatorOnce", "(", "op", ")", "\n", "logger", ".", "debug", "(", "\n", "'enqueue_blobs {}: workspace.RunOperatorOnce: {}'", ".", "\n", "format", "(", "gpu_id", ",", "time", ".", "time", "(", ")", "-", "t", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.loader.RoIDataLoader.create_threads": [[209, 227], ["loader.RoIDataLoader.create_blobs_queues", "threading.Thread", "threading.Thread", "range", "range"], "methods", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.loader.RoIDataLoader.create_blobs_queues"], ["", "def", "create_threads", "(", "self", ")", ":", "\n", "# Create mini-batch loader threads, each of which builds mini-batches", "\n", "# and places them into a queue in CPU memory", "\n", "        ", "self", ".", "_workers", "=", "[", "\n", "threading", ".", "Thread", "(", "target", "=", "self", ".", "minibatch_loader_thread", ")", "\n", "for", "_", "in", "range", "(", "self", ".", "_num_loaders", ")", "\n", "]", "\n", "\n", "# Create one BlobsQueue per GPU", "\n", "# (enqueue_blob_names are unscoped)", "\n", "enqueue_blob_names", "=", "self", ".", "create_blobs_queues", "(", ")", "\n", "\n", "# Create one enqueuer thread per GPU", "\n", "self", ".", "_enqueuers", "=", "[", "\n", "threading", ".", "Thread", "(", "\n", "target", "=", "self", ".", "enqueue_blobs_thread", ",", "\n", "args", "=", "(", "gpu_id", ",", "enqueue_blob_names", ")", "\n", ")", "for", "gpu_id", "in", "range", "(", "self", ".", "_num_gpus", ")", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.loader.RoIDataLoader.start": [[229, 246], ["w.start", "logger.info", "loader.RoIDataLoader._minibatch_queue.full", "logger.info", "time.sleep", "loader.RoIDataLoader.coordinator.should_stop", "loader.RoIDataLoader.shutdown", "loader.RoIDataLoader._minibatch_queue.qsize"], "methods", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.loader.RoIDataLoader.start", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.coordinator.Coordinator.should_stop", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.loader.RoIDataLoader.shutdown"], ["", "def", "start", "(", "self", ",", "prefill", "=", "False", ")", ":", "\n", "        ", "for", "w", "in", "self", ".", "_workers", "+", "self", ".", "_enqueuers", ":", "\n", "            ", "w", ".", "start", "(", ")", "\n", "", "if", "prefill", ":", "\n", "            ", "logger", ".", "info", "(", "'Pre-filling mini-batch queue...'", ")", "\n", "while", "not", "self", ".", "_minibatch_queue", ".", "full", "(", ")", ":", "\n", "                ", "logger", ".", "info", "(", "\n", "'  [{:d}/{:d}]'", ".", "format", "(", "\n", "self", ".", "_minibatch_queue", ".", "qsize", "(", ")", ",", "\n", "self", ".", "_minibatch_queue", ".", "maxsize", "\n", ")", "\n", ")", "\n", "time", ".", "sleep", "(", "0.1", ")", "\n", "# Detect failure and shutdown", "\n", "if", "self", ".", "coordinator", ".", "should_stop", "(", ")", ":", "\n", "                    ", "self", ".", "shutdown", "(", ")", "\n", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.loader.RoIDataLoader.shutdown": [[247, 253], ["loader.RoIDataLoader.coordinator.request_stop", "loader.RoIDataLoader.coordinator.wait_for_stop", "loader.RoIDataLoader.close_blobs_queues", "w.join"], "methods", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.coordinator.Coordinator.request_stop", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.coordinator.Coordinator.wait_for_stop", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.loader.RoIDataLoader.close_blobs_queues"], ["", "", "", "", "def", "shutdown", "(", "self", ")", ":", "\n", "        ", "self", ".", "coordinator", ".", "request_stop", "(", ")", "\n", "self", ".", "coordinator", ".", "wait_for_stop", "(", ")", "\n", "self", ".", "close_blobs_queues", "(", ")", "\n", "for", "w", "in", "self", ".", "_workers", "+", "self", ".", "_enqueuers", ":", "\n", "            ", "w", ".", "join", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.loader.RoIDataLoader.create_blobs_queues": [[254, 266], ["range", "loader.RoIDataLoader.create_enqueue_blobs", "utils.GpuNameScope", "caffe2.python.workspace.RunOperatorOnce", "caffe2.python.core.CreateOperator", "len", "loader.RoIDataLoader.get_output_names"], "methods", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.loader.RoIDataLoader.create_enqueue_blobs", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.c2.GpuNameScope", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.loader.RoIDataLoader.get_output_names"], ["", "", "def", "create_blobs_queues", "(", "self", ")", ":", "\n", "        ", "\"\"\"Create one BlobsQueue for each GPU to hold mini-batches.\"\"\"", "\n", "for", "gpu_id", "in", "range", "(", "self", ".", "_num_gpus", ")", ":", "\n", "            ", "with", "c2_utils", ".", "GpuNameScope", "(", "gpu_id", ")", ":", "\n", "                ", "workspace", ".", "RunOperatorOnce", "(", "\n", "core", ".", "CreateOperator", "(", "\n", "'CreateBlobsQueue'", ",", "[", "]", ",", "[", "self", ".", "_blobs_queue_name", "]", ",", "\n", "num_blobs", "=", "len", "(", "self", ".", "get_output_names", "(", ")", ")", ",", "\n", "capacity", "=", "self", ".", "_blobs_queue_capacity", "\n", ")", "\n", ")", "\n", "", "", "return", "self", ".", "create_enqueue_blobs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.loader.RoIDataLoader.close_blobs_queues": [[267, 274], ["range", "caffe2.python.core.NameScope", "caffe2.python.workspace.RunOperatorOnce", "caffe2.python.core.CreateOperator"], "methods", ["None"], ["", "def", "close_blobs_queues", "(", "self", ")", ":", "\n", "        ", "\"\"\"Close a BlobsQueue.\"\"\"", "\n", "for", "gpu_id", "in", "range", "(", "self", ".", "_num_gpus", ")", ":", "\n", "            ", "with", "core", ".", "NameScope", "(", "'gpu_{}'", ".", "format", "(", "gpu_id", ")", ")", ":", "\n", "                ", "workspace", ".", "RunOperatorOnce", "(", "\n", "core", ".", "CreateOperator", "(", "\n", "'CloseBlobsQueue'", ",", "[", "self", ".", "_blobs_queue_name", "]", ",", "[", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.loader.RoIDataLoader.create_enqueue_blobs": [[277, 287], ["loader.RoIDataLoader.get_output_names", "range", "utils.NamedCudaScope", "caffe2.python.workspace.CreateBlob", "caffe2.python.core.ScopedName"], "methods", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.loader.RoIDataLoader.get_output_names", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.c2.NamedCudaScope"], ["", "", "", "def", "create_enqueue_blobs", "(", "self", ")", ":", "\n", "        ", "blob_names", "=", "self", ".", "get_output_names", "(", ")", "\n", "enqueue_blob_names", "=", "[", "\n", "'{}_enqueue_{}'", ".", "format", "(", "b", ",", "self", ".", "_loader_id", ")", "for", "b", "in", "blob_names", "\n", "]", "\n", "for", "gpu_id", "in", "range", "(", "self", ".", "_num_gpus", ")", ":", "\n", "            ", "with", "c2_utils", ".", "NamedCudaScope", "(", "gpu_id", ")", ":", "\n", "                ", "for", "blob", "in", "enqueue_blob_names", ":", "\n", "                    ", "workspace", ".", "CreateBlob", "(", "core", ".", "ScopedName", "(", "blob", ")", ")", "\n", "", "", "", "return", "enqueue_blob_names", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.loader.RoIDataLoader.register_sigint_handler": [[288, 296], ["signal.signal", "logger.info", "loader.RoIDataLoader.shutdown"], "methods", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.loader.RoIDataLoader.shutdown"], ["", "def", "register_sigint_handler", "(", "self", ")", ":", "\n", "        ", "def", "signal_handler", "(", "signal", ",", "frame", ")", ":", "\n", "            ", "logger", ".", "info", "(", "\n", "'SIGINT: Shutting down RoIDataLoader threads and exiting...'", "\n", ")", "\n", "self", ".", "shutdown", "(", ")", "\n", "\n", "", "signal", ".", "signal", "(", "signal", ".", "SIGINT", ",", "signal_handler", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.rpn_generator.generate_rpn_on_dataset": [[57, 76], ["core.config.get_output_dir", "datasets.json_dataset.JsonDataset", "utils.timer.Timer", "utils.timer.Timer.tic", "os.path.join", "utils.timer.Timer.toc", "logger.info", "rpn_generator.evaluate_proposal_file", "os.path.exists", "len", "rpn_generator.multi_gpu_generate_rpn_on_dataset", "rpn_generator.generate_rpn_on_range", "datasets.json_dataset.JsonDataset.get_roidb"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.config.get_output_dir", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.timer.Timer.tic", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.timer.Timer.toc", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.rpn_generator.evaluate_proposal_file", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.rpn_generator.multi_gpu_generate_rpn_on_dataset", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.rpn_generator.generate_rpn_on_range", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.rpn_generator.get_roidb"], ["def", "generate_rpn_on_dataset", "(", "multi_gpu", "=", "False", ")", ":", "\n", "    ", "\"\"\"Run inference on a dataset.\"\"\"", "\n", "output_dir", "=", "get_output_dir", "(", "training", "=", "False", ")", "\n", "dataset", "=", "JsonDataset", "(", "cfg", ".", "TEST", ".", "DATASET", ")", "\n", "test_timer", "=", "Timer", "(", ")", "\n", "test_timer", ".", "tic", "(", ")", "\n", "rpn_file", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'rpn_proposals.pkl'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "rpn_file", ")", ":", "\n", "        ", "if", "multi_gpu", ":", "\n", "            ", "num_images", "=", "len", "(", "dataset", ".", "get_roidb", "(", ")", ")", "\n", "_boxes", ",", "_scores", ",", "_ids", ",", "rpn_file", "=", "multi_gpu_generate_rpn_on_dataset", "(", "\n", "num_images", ",", "output_dir", "\n", ")", "\n", "", "else", ":", "\n", "# Processes entire dataset range by default", "\n", "            ", "_boxes", ",", "_scores", ",", "_ids", ",", "rpn_file", "=", "generate_rpn_on_range", "(", ")", "\n", "", "", "test_timer", ".", "toc", "(", ")", "\n", "logger", ".", "info", "(", "'Total inference time: {:.3f}s'", ".", "format", "(", "test_timer", ".", "average_time", ")", ")", "\n", "return", "evaluate_proposal_file", "(", "dataset", ",", "rpn_file", ",", "output_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.rpn_generator.multi_gpu_generate_rpn_on_dataset": [[78, 104], ["utils.get_runtime_dir", "utils.get_py_bin_ext", "os.path.join", "os.path.exists", "utils.process_in_parallel", "os.path.join", "yaml.dump", "utils.io.save_object", "logger.info", "dict", "os.path.abspath"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.env.get_runtime_dir", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.env.get_py_bin_ext", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.subprocess.process_in_parallel", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.io.save_object"], ["", "def", "multi_gpu_generate_rpn_on_dataset", "(", "num_images", ",", "output_dir", ")", ":", "\n", "    ", "\"\"\"Multi-gpu inference on a dataset.\"\"\"", "\n", "# Retrieve the test_net binary path", "\n", "binary_dir", "=", "envu", ".", "get_runtime_dir", "(", ")", "\n", "binary_ext", "=", "envu", ".", "get_py_bin_ext", "(", ")", "\n", "binary", "=", "os", ".", "path", ".", "join", "(", "binary_dir", ",", "'test_net'", "+", "binary_ext", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "binary", ")", ",", "'Binary \\'{}\\' not found'", ".", "format", "(", "binary", ")", "\n", "\n", "# Run inference in parallel in subprocesses", "\n", "outputs", "=", "subprocess_utils", ".", "process_in_parallel", "(", "\n", "'rpn_proposals'", ",", "num_images", ",", "binary", ",", "output_dir", "\n", ")", "\n", "\n", "# Collate the results from each subprocess", "\n", "boxes", ",", "scores", ",", "ids", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "rpn_data", "in", "outputs", ":", "\n", "        ", "boxes", "+=", "rpn_data", "[", "'boxes'", "]", "\n", "scores", "+=", "rpn_data", "[", "'scores'", "]", "\n", "ids", "+=", "rpn_data", "[", "'ids'", "]", "\n", "", "rpn_file", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'rpn_proposals.pkl'", ")", "\n", "cfg_yaml", "=", "yaml", ".", "dump", "(", "cfg", ")", "\n", "save_object", "(", "\n", "dict", "(", "boxes", "=", "boxes", ",", "scores", "=", "scores", ",", "ids", "=", "ids", ",", "cfg", "=", "cfg_yaml", ")", ",", "rpn_file", "\n", ")", "\n", "logger", ".", "info", "(", "'Wrote RPN proposals to {}'", ".", "format", "(", "os", ".", "path", ".", "abspath", "(", "rpn_file", ")", ")", ")", "\n", "return", "boxes", ",", "scores", ",", "ids", ",", "rpn_file", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.rpn_generator.generate_rpn_on_range": [[106, 146], ["rpn_generator.get_roidb", "core.config.get_output_dir", "logger.info", "modeling.model_builder.create", "utils.initialize_from_weights_file", "modeling.model_builder.add_inference_inputs", "caffe2.python.workspace.CreateNet", "rpn_generator.generate_proposals_on_roidb", "yaml.dump", "os.path.join", "utils.io.save_object", "logger.info", "dict", "os.path.abspath", "tuple", "os.path.abspath"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.rpn_generator.get_roidb", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.config.get_output_dir", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder.create", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.net.initialize_from_weights_file", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder.add_inference_inputs", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.rpn_generator.generate_proposals_on_roidb", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.io.save_object"], ["", "def", "generate_rpn_on_range", "(", "ind_range", "=", "None", ")", ":", "\n", "    ", "\"\"\"Run inference on all images in a dataset or over an index range of images\n    in a dataset using a single GPU.\n    \"\"\"", "\n", "assert", "cfg", ".", "TEST", ".", "WEIGHTS", "!=", "''", ",", "'TEST.WEIGHTS must be set to the model file to test'", "\n", "assert", "cfg", ".", "TEST", ".", "DATASET", "!=", "''", ",", "'TEST.DATASET must be set to the dataset name to test'", "\n", "assert", "cfg", ".", "MODEL", ".", "RPN_ONLY", "or", "cfg", ".", "MODEL", ".", "FASTER_RCNN", "\n", "\n", "roidb", ",", "start_ind", ",", "end_ind", ",", "total_num_images", "=", "get_roidb", "(", "ind_range", ")", "\n", "output_dir", "=", "get_output_dir", "(", "training", "=", "False", ")", "\n", "logger", ".", "info", "(", "\n", "'Output will be saved to: {:s}'", ".", "format", "(", "os", ".", "path", ".", "abspath", "(", "output_dir", ")", ")", "\n", ")", "\n", "\n", "model", "=", "model_builder", ".", "create", "(", "cfg", ".", "MODEL", ".", "TYPE", ",", "train", "=", "False", ")", "\n", "nu", ".", "initialize_from_weights_file", "(", "model", ",", "cfg", ".", "TEST", ".", "WEIGHTS", ")", "\n", "model_builder", ".", "add_inference_inputs", "(", "model", ")", "\n", "workspace", ".", "CreateNet", "(", "model", ".", "net", ")", "\n", "\n", "boxes", ",", "scores", ",", "ids", "=", "generate_proposals_on_roidb", "(", "\n", "model", ",", "\n", "roidb", ",", "\n", "start_ind", "=", "start_ind", ",", "\n", "end_ind", "=", "end_ind", ",", "\n", "total_num_images", "=", "total_num_images", "\n", ")", "\n", "\n", "cfg_yaml", "=", "yaml", ".", "dump", "(", "cfg", ")", "\n", "if", "ind_range", "is", "not", "None", ":", "\n", "        ", "rpn_name", "=", "'rpn_proposals_range_%s_%s.pkl'", "%", "tuple", "(", "ind_range", ")", "\n", "", "else", ":", "\n", "        ", "rpn_name", "=", "'rpn_proposals.pkl'", "\n", "", "rpn_file", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "rpn_name", ")", "\n", "save_object", "(", "\n", "dict", "(", "boxes", "=", "boxes", ",", "scores", "=", "scores", ",", "ids", "=", "ids", ",", "cfg", "=", "cfg_yaml", ")", ",", "rpn_file", "\n", ")", "\n", "logger", ".", "info", "(", "'Wrote RPN proposals to {}'", ".", "format", "(", "os", ".", "path", ".", "abspath", "(", "rpn_file", ")", ")", ")", "\n", "return", "boxes", ",", "scores", ",", "ids", ",", "rpn_file", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.rpn_generator.generate_proposals_on_roidb": [[148, 183], ["utils.timer.Timer", "len", "range", "cv2.imread", "range", "range", "range", "utils.NamedCudaScope", "utils.timer.Timer.tic", "rpn_generator.im_proposals", "utils.timer.Timer.toc", "str", "logger.info", "datetime.timedelta", "int"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.c2.NamedCudaScope", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.timer.Timer.tic", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.rpn_generator.im_proposals", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.timer.Timer.toc"], ["", "def", "generate_proposals_on_roidb", "(", "\n", "model", ",", "roidb", ",", "start_ind", "=", "None", ",", "end_ind", "=", "None", ",", "total_num_images", "=", "None", "\n", ")", ":", "\n", "    ", "\"\"\"Generate RPN proposals on all images in an imdb.\"\"\"", "\n", "_t", "=", "Timer", "(", ")", "\n", "num_images", "=", "len", "(", "roidb", ")", "\n", "roidb_boxes", "=", "[", "[", "]", "for", "_", "in", "range", "(", "num_images", ")", "]", "\n", "roidb_scores", "=", "[", "[", "]", "for", "_", "in", "range", "(", "num_images", ")", "]", "\n", "roidb_ids", "=", "[", "[", "]", "for", "_", "in", "range", "(", "num_images", ")", "]", "\n", "if", "start_ind", "is", "None", ":", "\n", "        ", "start_ind", "=", "0", "\n", "end_ind", "=", "num_images", "\n", "total_num_images", "=", "num_images", "\n", "", "for", "i", "in", "range", "(", "num_images", ")", ":", "\n", "        ", "roidb_ids", "[", "i", "]", "=", "roidb", "[", "i", "]", "[", "'id'", "]", "\n", "im", "=", "cv2", ".", "imread", "(", "roidb", "[", "i", "]", "[", "'image'", "]", ")", "\n", "with", "c2_utils", ".", "NamedCudaScope", "(", "0", ")", ":", "\n", "            ", "_t", ".", "tic", "(", ")", "\n", "roidb_boxes", "[", "i", "]", ",", "roidb_scores", "[", "i", "]", "=", "im_proposals", "(", "model", ",", "im", ")", "\n", "_t", ".", "toc", "(", ")", "\n", "", "if", "i", "%", "10", "==", "0", ":", "\n", "            ", "ave_time", "=", "_t", ".", "average_time", "\n", "eta_seconds", "=", "ave_time", "*", "(", "num_images", "-", "i", "-", "1", ")", "\n", "eta", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "int", "(", "eta_seconds", ")", ")", ")", "\n", "logger", ".", "info", "(", "\n", "(", "\n", "'rpn_generate: range [{:d}, {:d}] of {:d}: '", "\n", "'{:d}/{:d} {:.3f}s (eta: {})'", "\n", ")", ".", "format", "(", "\n", "start_ind", "+", "1", ",", "end_ind", ",", "total_num_images", ",", "start_ind", "+", "i", "+", "1", ",", "\n", "start_ind", "+", "num_images", ",", "ave_time", ",", "eta", "\n", ")", "\n", ")", "\n", "\n", "", "", "return", "roidb_boxes", ",", "roidb_scores", ",", "roidb_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.rpn_generator.im_proposals": [[185, 228], ["rpn_generator._get_image_blob", "inputs.items", "caffe2.python.workspace.RunNet", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.FetchBlobs", "numpy.concatenate", "numpy.concatenate().squeeze", "caffe2.python.workspace.FetchBlobs", "scores.squeeze.squeeze", "caffe2.python.core.ScopedName", "v.astype", "model.net.Proto", "caffe2.python.core.ScopedName", "caffe2.python.core.ScopedName", "numpy.argsort", "range", "range", "numpy.concatenate", "caffe2.python.core.ScopedName", "caffe2.python.core.ScopedName", "str", "str", "len", "len"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test._get_image_blob"], ["", "def", "im_proposals", "(", "model", ",", "im", ")", ":", "\n", "    ", "\"\"\"Generate RPN proposals on a single image.\"\"\"", "\n", "inputs", "=", "{", "}", "\n", "inputs", "[", "'data'", "]", ",", "inputs", "[", "'im_info'", "]", "=", "_get_image_blob", "(", "im", ")", "\n", "scale", "=", "inputs", "[", "'im_info'", "]", "[", "0", ",", "2", "]", "\n", "for", "k", ",", "v", "in", "inputs", ".", "items", "(", ")", ":", "\n", "        ", "workspace", ".", "FeedBlob", "(", "core", ".", "ScopedName", "(", "k", ")", ",", "v", ".", "astype", "(", "np", ".", "float32", ",", "copy", "=", "False", ")", ")", "\n", "", "workspace", ".", "RunNet", "(", "model", ".", "net", ".", "Proto", "(", ")", ".", "name", ")", "\n", "\n", "if", "cfg", ".", "FPN", ".", "FPN_ON", "and", "cfg", ".", "FPN", ".", "MULTILEVEL_RPN", ":", "\n", "        ", "k_max", "=", "cfg", ".", "FPN", ".", "RPN_MAX_LEVEL", "\n", "k_min", "=", "cfg", ".", "FPN", ".", "RPN_MIN_LEVEL", "\n", "rois_names", "=", "[", "\n", "core", ".", "ScopedName", "(", "'rpn_rois_fpn'", "+", "str", "(", "l", ")", ")", "\n", "for", "l", "in", "range", "(", "k_min", ",", "k_max", "+", "1", ")", "\n", "]", "\n", "score_names", "=", "[", "\n", "core", ".", "ScopedName", "(", "'rpn_roi_probs_fpn'", "+", "str", "(", "l", ")", ")", "\n", "for", "l", "in", "range", "(", "k_min", ",", "k_max", "+", "1", ")", "\n", "]", "\n", "blobs", "=", "workspace", ".", "FetchBlobs", "(", "rois_names", "+", "score_names", ")", "\n", "# Combine predictions across all levels and retain the top scoring", "\n", "boxes", "=", "np", ".", "concatenate", "(", "blobs", "[", ":", "len", "(", "rois_names", ")", "]", ")", "\n", "scores", "=", "np", ".", "concatenate", "(", "blobs", "[", "len", "(", "rois_names", ")", ":", "]", ")", ".", "squeeze", "(", ")", "\n", "# Discussion: one could do NMS again after combining predictions from", "\n", "# the different FPN levels. Conceptually, it's probably the right thing", "\n", "# to do. For arbitrary reasons, the original FPN RPN implementation did", "\n", "# not do another round of NMS.", "\n", "inds", "=", "np", ".", "argsort", "(", "-", "scores", ")", "[", ":", "cfg", ".", "TEST", ".", "RPN_POST_NMS_TOP_N", "]", "\n", "scores", "=", "scores", "[", "inds", "]", "\n", "boxes", "=", "boxes", "[", "inds", ",", ":", "]", "\n", "", "else", ":", "\n", "        ", "boxes", ",", "scores", "=", "workspace", ".", "FetchBlobs", "(", "\n", "[", "core", ".", "ScopedName", "(", "'rpn_rois'", ")", ",", "\n", "core", ".", "ScopedName", "(", "'rpn_roi_probs'", ")", "]", "\n", ")", "\n", "scores", "=", "scores", ".", "squeeze", "(", ")", "\n", "\n", "# Column 0 is the batch index in the (batch ind, x1, y1, x2, y2) encoding,", "\n", "# so we remove it since we just want to return boxes", "\n", "# Scale proposals back to the original input image scale", "\n", "", "boxes", "=", "boxes", "[", ":", ",", "1", ":", "]", "/", "scale", "\n", "return", "boxes", ",", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.rpn_generator.get_roidb": [[230, 247], ["datasets.json_dataset.JsonDataset", "datasets.json_dataset.JsonDataset.get_roidb", "len", "len"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.rpn_generator.get_roidb"], ["", "def", "get_roidb", "(", "ind_range", ")", ":", "\n", "    ", "\"\"\"Get the roidb for the dataset specified in the global cfg. Optionally\n    restrict it to a range of indices if ind_range is a pair of integers.\n    \"\"\"", "\n", "dataset", "=", "JsonDataset", "(", "cfg", ".", "TEST", ".", "DATASET", ")", "\n", "roidb", "=", "dataset", ".", "get_roidb", "(", ")", "\n", "\n", "if", "ind_range", "is", "not", "None", ":", "\n", "        ", "total_num_images", "=", "len", "(", "roidb", ")", "\n", "start", ",", "end", "=", "ind_range", "\n", "roidb", "=", "roidb", "[", "start", ":", "end", "]", "\n", "", "else", ":", "\n", "        ", "start", "=", "0", "\n", "end", "=", "len", "(", "roidb", ")", "\n", "total_num_images", "=", "end", "\n", "\n", "", "return", "roidb", ",", "start", ",", "end", ",", "total_num_images", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.rpn_generator.evaluate_proposal_file": [[249, 257], ["dataset.get_roidb", "datasets.task_evaluation.evaluate_box_proposals", "datasets.task_evaluation.log_box_proposal_results", "os.path.join", "utils.io.save_object"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.rpn_generator.get_roidb", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.json_dataset_evaluator.evaluate_box_proposals", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.task_evaluation.log_box_proposal_results", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.io.save_object"], ["", "def", "evaluate_proposal_file", "(", "dataset", ",", "proposal_file", ",", "output_dir", ")", ":", "\n", "    ", "\"\"\"Evaluate box proposal average recall.\"\"\"", "\n", "roidb", "=", "dataset", ".", "get_roidb", "(", "gt", "=", "True", ",", "proposal_file", "=", "proposal_file", ")", "\n", "results", "=", "task_evaluation", ".", "evaluate_box_proposals", "(", "dataset", ",", "roidb", ")", "\n", "task_evaluation", ".", "log_box_proposal_results", "(", "results", ")", "\n", "recall_file", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'rpn_proposal_recall.pkl'", ")", "\n", "save_object", "(", "results", ",", "recall_file", ")", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.rpn_generator._get_image_blob": [[259, 295], ["cv2.resize.astype", "numpy.min", "numpy.max", "cv2.resize", "processed_ims.append", "utils.blob.im_list_to_blob", "len", "float", "float", "numpy.round", "numpy.hstack", "float", "float"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.blob.im_list_to_blob"], ["", "def", "_get_image_blob", "(", "im", ")", ":", "\n", "    ", "\"\"\"Converts an image into a network input.\n\n    Arguments:\n        im (ndarray): a color image in BGR order\n\n    Returns:\n        blob (ndarray): a data blob holding an image pyramid\n        im_scale_factors (list): list of image scales (relative to im) used\n            in the image pyramid\n    \"\"\"", "\n", "im_orig", "=", "im", ".", "astype", "(", "np", ".", "float32", ",", "copy", "=", "True", ")", "\n", "im_orig", "-=", "cfg", ".", "PIXEL_MEANS", "\n", "\n", "im_shape", "=", "im_orig", ".", "shape", "\n", "im_size_min", "=", "np", ".", "min", "(", "im_shape", "[", "0", ":", "2", "]", ")", "\n", "im_size_max", "=", "np", ".", "max", "(", "im_shape", "[", "0", ":", "2", "]", ")", "\n", "\n", "processed_ims", "=", "[", "]", "\n", "\n", "assert", "len", "(", "cfg", ".", "TEST", ".", "SCALES", ")", "==", "1", "\n", "target_size", "=", "cfg", ".", "TEST", ".", "SCALES", "[", "0", "]", "\n", "\n", "im_scale", "=", "float", "(", "target_size", ")", "/", "float", "(", "im_size_min", ")", "\n", "# Prevent the biggest axis from being more than MAX_SIZE", "\n", "if", "np", ".", "round", "(", "im_scale", "*", "im_size_max", ")", ">", "cfg", ".", "TEST", ".", "MAX_SIZE", ":", "\n", "        ", "im_scale", "=", "float", "(", "cfg", ".", "TEST", ".", "MAX_SIZE", ")", "/", "float", "(", "im_size_max", ")", "\n", "", "im", "=", "cv2", ".", "resize", "(", "im_orig", ",", "None", ",", "None", ",", "fx", "=", "im_scale", ",", "fy", "=", "im_scale", ",", "\n", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "im_info", "=", "np", ".", "hstack", "(", "(", "im", ".", "shape", "[", ":", "2", "]", ",", "im_scale", ")", ")", "[", "np", ".", "newaxis", ",", ":", "]", "\n", "processed_ims", ".", "append", "(", "im", ")", "\n", "\n", "# Create a blob to hold the input images", "\n", "blob", "=", "im_list_to_blob", "(", "processed_ims", ")", "\n", "\n", "return", "blob", ",", "im_info", "\n", "", ""]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.config.assert_and_infer_cfg": [[1035, 1042], ["config.cache_cfg_urls"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.config.cache_cfg_urls"], ["def", "assert_and_infer_cfg", "(", "cache_urls", "=", "True", ")", ":", "\n", "    ", "if", "__C", ".", "MODEL", ".", "RPN_ONLY", "or", "__C", ".", "MODEL", ".", "FASTER_RCNN", ":", "\n", "        ", "__C", ".", "RPN", ".", "RPN_ON", "=", "True", "\n", "", "if", "__C", ".", "RPN", ".", "RPN_ON", "or", "__C", ".", "RETINANET", ".", "RETINANET_ON", ":", "\n", "        ", "__C", ".", "TEST", ".", "PRECOMPUTED_PROPOSALS", "=", "False", "\n", "", "if", "cache_urls", ":", "\n", "        ", "cache_cfg_urls", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.config.cache_cfg_urls": [[1044, 1055], ["utils.io.cache_url", "utils.io.cache_url", "tuple", "tuple", "utils.io.cache_url", "utils.io.cache_url"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.io.cache_url", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.io.cache_url", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.io.cache_url", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.io.cache_url"], ["", "", "def", "cache_cfg_urls", "(", ")", ":", "\n", "    ", "\"\"\"Download URLs in the config, cache them locally, and rewrite cfg to make\n    use of the locally cached file.\n    \"\"\"", "\n", "__C", ".", "TRAIN", ".", "WEIGHTS", "=", "cache_url", "(", "__C", ".", "TRAIN", ".", "WEIGHTS", ",", "__C", ".", "DOWNLOAD_CACHE", ")", "\n", "__C", ".", "TEST", ".", "WEIGHTS", "=", "cache_url", "(", "__C", ".", "TEST", ".", "WEIGHTS", ",", "__C", ".", "DOWNLOAD_CACHE", ")", "\n", "__C", ".", "TRAIN", ".", "PROPOSAL_FILES", "=", "tuple", "(", "\n", "[", "cache_url", "(", "f", ",", "__C", ".", "DOWNLOAD_CACHE", ")", "for", "f", "in", "__C", ".", "TRAIN", ".", "PROPOSAL_FILES", "]", "\n", ")", "\n", "__C", ".", "TEST", ".", "PROPOSAL_FILES", "=", "tuple", "(", "\n", "[", "cache_url", "(", "f", ",", "__C", ".", "DOWNLOAD_CACHE", ")", "for", "f", "in", "__C", ".", "TEST", ".", "PROPOSAL_FILES", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.config.get_output_dir": [[1058, 1068], ["os.join", "os.exists", "os.makedirs", "os.makedirs"], "function", ["None"], ["", "def", "get_output_dir", "(", "training", "=", "True", ")", ":", "\n", "    ", "\"\"\"Get the output directory determined by the current global config.\"\"\"", "\n", "dataset", "=", "__C", ".", "TRAIN", ".", "DATASETS", "if", "training", "else", "__C", ".", "TEST", ".", "DATASETS", "\n", "dataset", "=", "':'", ".", "join", "(", "dataset", ")", "\n", "tag", "=", "'train'", "if", "training", "else", "'test'", "\n", "# <output-dir>/<train|test>/<dataset>/<model-type>/", "\n", "outdir", "=", "osp", ".", "join", "(", "__C", ".", "OUTPUT_DIR", ",", "tag", ",", "dataset", ",", "__C", ".", "MODEL", ".", "TYPE", ")", "\n", "if", "not", "osp", ".", "exists", "(", "outdir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "outdir", ")", "\n", "", "return", "outdir", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.config.merge_cfg_from_file": [[1070, 1075], ["config._merge_a_into_b", "open", "utils.collections.AttrDict", "yaml.load"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.config._merge_a_into_b"], ["", "def", "merge_cfg_from_file", "(", "cfg_filename", ")", ":", "\n", "    ", "\"\"\"Load a yaml config file and merge it into the global config.\"\"\"", "\n", "with", "open", "(", "cfg_filename", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "yaml_cfg", "=", "AttrDict", "(", "yaml", ".", "load", "(", "f", ")", ")", "\n", "", "_merge_a_into_b", "(", "yaml_cfg", ",", "__C", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.config.merge_cfg_from_cfg": [[1077, 1080], ["config._merge_a_into_b"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.config._merge_a_into_b"], ["", "def", "merge_cfg_from_cfg", "(", "cfg_other", ")", ":", "\n", "    ", "\"\"\"Merge `cfg_other` into the global config.\"\"\"", "\n", "_merge_a_into_b", "(", "cfg_other", ",", "__C", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.config.merge_cfg_from_list": [[1082, 1104], ["zip", "config._key_is_deprecated", "config._key_is_renamed", "full_key.split", "config._decode_cfg_value", "config._check_and_coerce_cfg_value_type", "len", "config._raise_key_rename_error"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.config._key_is_deprecated", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.config._key_is_renamed", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.config._decode_cfg_value", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.config._check_and_coerce_cfg_value_type", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.config._raise_key_rename_error"], ["", "def", "merge_cfg_from_list", "(", "cfg_list", ")", ":", "\n", "    ", "\"\"\"Merge config keys, values in a list (e.g., from command line) into the\n    global config. For example, `cfg_list = ['TEST.NMS', 0.5]`.\n    \"\"\"", "\n", "assert", "len", "(", "cfg_list", ")", "%", "2", "==", "0", "\n", "for", "full_key", ",", "v", "in", "zip", "(", "cfg_list", "[", "0", ":", ":", "2", "]", ",", "cfg_list", "[", "1", ":", ":", "2", "]", ")", ":", "\n", "        ", "if", "_key_is_deprecated", "(", "full_key", ")", ":", "\n", "            ", "continue", "\n", "", "if", "_key_is_renamed", "(", "full_key", ")", ":", "\n", "            ", "_raise_key_rename_error", "(", "full_key", ")", "\n", "", "key_list", "=", "full_key", ".", "split", "(", "'.'", ")", "\n", "d", "=", "__C", "\n", "for", "subkey", "in", "key_list", "[", ":", "-", "1", "]", ":", "\n", "            ", "assert", "subkey", "in", "d", ",", "'Non-existent key: {}'", ".", "format", "(", "full_key", ")", "\n", "d", "=", "d", "[", "subkey", "]", "\n", "", "subkey", "=", "key_list", "[", "-", "1", "]", "\n", "assert", "subkey", "in", "d", ",", "'Non-existent key: {}'", ".", "format", "(", "full_key", ")", "\n", "value", "=", "_decode_cfg_value", "(", "v", ")", "\n", "value", "=", "_check_and_coerce_cfg_value_type", "(", "\n", "value", ",", "d", "[", "subkey", "]", ",", "subkey", ",", "full_key", "\n", ")", "\n", "d", "[", "subkey", "]", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.config._merge_a_into_b": [[1106, 1137], ["isinstance", "isinstance", "a.items", "copy.deepcopy", "config._decode_cfg_value", "config._check_and_coerce_cfg_value_type", "isinstance", "config._key_is_deprecated", "config._key_is_renamed", "config._merge_a_into_b", "config._raise_key_rename_error", "KeyError"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.config._decode_cfg_value", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.config._check_and_coerce_cfg_value_type", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.config._key_is_deprecated", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.config._key_is_renamed", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.config._merge_a_into_b", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.config._raise_key_rename_error"], ["", "", "def", "_merge_a_into_b", "(", "a", ",", "b", ",", "stack", "=", "None", ")", ":", "\n", "    ", "\"\"\"Merge config dictionary a into config dictionary b, clobbering the\n    options in b whenever they are also specified in a.\n    \"\"\"", "\n", "assert", "isinstance", "(", "a", ",", "AttrDict", ")", ",", "'Argument `a` must be an AttrDict'", "\n", "assert", "isinstance", "(", "b", ",", "AttrDict", ")", ",", "'Argument `b` must be an AttrDict'", "\n", "\n", "for", "k", ",", "v_", "in", "a", ".", "items", "(", ")", ":", "\n", "        ", "full_key", "=", "'.'", ".", "join", "(", "stack", ")", "+", "'.'", "+", "k", "if", "stack", "is", "not", "None", "else", "k", "\n", "# a must specify keys that are in b", "\n", "if", "k", "not", "in", "b", ":", "\n", "            ", "if", "_key_is_deprecated", "(", "full_key", ")", ":", "\n", "                ", "continue", "\n", "", "elif", "_key_is_renamed", "(", "full_key", ")", ":", "\n", "                ", "_raise_key_rename_error", "(", "full_key", ")", "\n", "", "else", ":", "\n", "                ", "raise", "KeyError", "(", "'Non-existent config key: {}'", ".", "format", "(", "full_key", ")", ")", "\n", "\n", "", "", "v", "=", "copy", ".", "deepcopy", "(", "v_", ")", "\n", "v", "=", "_decode_cfg_value", "(", "v", ")", "\n", "v", "=", "_check_and_coerce_cfg_value_type", "(", "v", ",", "b", "[", "k", "]", ",", "k", ",", "full_key", ")", "\n", "\n", "# Recursively merge dicts", "\n", "if", "isinstance", "(", "v", ",", "AttrDict", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "stack_push", "=", "[", "k", "]", "if", "stack", "is", "None", "else", "stack", "+", "[", "k", "]", "\n", "_merge_a_into_b", "(", "v", ",", "b", "[", "k", "]", ",", "stack", "=", "stack_push", ")", "\n", "", "except", "BaseException", ":", "\n", "                ", "raise", "\n", "", "", "else", ":", "\n", "            ", "b", "[", "k", "]", "=", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.config._key_is_deprecated": [[1139, 1146], ["logger.warn"], "function", ["None"], ["", "", "", "def", "_key_is_deprecated", "(", "full_key", ")", ":", "\n", "    ", "if", "full_key", "in", "_DEPCRECATED_KEYS", ":", "\n", "        ", "logger", ".", "warn", "(", "\n", "'Deprecated config key (ignoring): {}'", ".", "format", "(", "full_key", ")", "\n", ")", "\n", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.config._key_is_renamed": [[1148, 1150], ["None"], "function", ["None"], ["", "def", "_key_is_renamed", "(", "full_key", ")", ":", "\n", "    ", "return", "full_key", "in", "_RENAMED_KEYS", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.config._raise_key_rename_error": [[1152, 1162], ["isinstance", "KeyError"], "function", ["None"], ["", "def", "_raise_key_rename_error", "(", "full_key", ")", ":", "\n", "    ", "new_key", "=", "_RENAMED_KEYS", "[", "full_key", "]", "\n", "if", "isinstance", "(", "new_key", ",", "tuple", ")", ":", "\n", "        ", "msg", "=", "' Note: '", "+", "new_key", "[", "1", "]", "\n", "new_key", "=", "new_key", "[", "0", "]", "\n", "", "else", ":", "\n", "        ", "msg", "=", "''", "\n", "", "raise", "KeyError", "(", "\n", "'Key {} was renamed to {}; please update your config.{}'", ".", "\n", "format", "(", "full_key", ",", "new_key", ",", "msg", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.config._decode_cfg_value": [[1165, 1196], ["isinstance", "utils.collections.AttrDict", "isinstance", "ast.literal_eval"], "function", ["None"], ["", "def", "_decode_cfg_value", "(", "v", ")", ":", "\n", "    ", "\"\"\"Decodes a raw config value (e.g., from a yaml config files or command\n    line argument) into a Python object.\n    \"\"\"", "\n", "# Configs parsed from raw yaml will contain dictionary keys that need to be", "\n", "# converted to AttrDict objects", "\n", "if", "isinstance", "(", "v", ",", "dict", ")", ":", "\n", "        ", "return", "AttrDict", "(", "v", ")", "\n", "# All remaining processing is only applied to strings", "\n", "", "if", "not", "isinstance", "(", "v", ",", "basestring", ")", ":", "\n", "        ", "return", "v", "\n", "# Try to interpret `v` as a:", "\n", "#   string, number, tuple, list, dict, boolean, or None", "\n", "", "try", ":", "\n", "        ", "v", "=", "literal_eval", "(", "v", ")", "\n", "# The following two excepts allow v to pass through when it represents a", "\n", "# string.", "\n", "#", "\n", "# Longer explanation:", "\n", "# The type of v is always a string (before calling literal_eval), but", "\n", "# sometimes it *represents* a string and other times a data structure, like", "\n", "# a list. In the case that v represents a string, what we got back from the", "\n", "# yaml parser is 'foo' *without quotes* (so, not '\"foo\"'). literal_eval is", "\n", "# ok with '\"foo\"', but will raise a ValueError if given 'foo'. In other", "\n", "# cases, like paths (v = 'foo/bar' and not v = '\"foo/bar\"'), literal_eval", "\n", "# will raise a SyntaxError.", "\n", "", "except", "ValueError", ":", "\n", "        ", "pass", "\n", "", "except", "SyntaxError", ":", "\n", "        ", "pass", "\n", "", "return", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.config._check_and_coerce_cfg_value_type": [[1198, 1224], ["type", "type", "isinstance", "numpy.array", "isinstance", "str", "isinstance", "isinstance", "list", "isinstance", "isinstance", "tuple", "ValueError"], "function", ["None"], ["", "def", "_check_and_coerce_cfg_value_type", "(", "value_a", ",", "value_b", ",", "key", ",", "full_key", ")", ":", "\n", "    ", "\"\"\"Checks that `value_a`, which is intended to replace `value_b` is of the\n    right type. The type is correct if it matches exactly or is one of a few\n    cases in which the type can be easily coerced.\n    \"\"\"", "\n", "# The types must match (with some exceptions)", "\n", "type_b", "=", "type", "(", "value_b", ")", "\n", "type_a", "=", "type", "(", "value_a", ")", "\n", "if", "type_a", "is", "type_b", ":", "\n", "        ", "return", "value_a", "\n", "\n", "# Exceptions: numpy arrays, strings, tuple<->list", "\n", "", "if", "isinstance", "(", "value_b", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "value_a", "=", "np", ".", "array", "(", "value_a", ",", "dtype", "=", "value_b", ".", "dtype", ")", "\n", "", "elif", "isinstance", "(", "value_b", ",", "basestring", ")", ":", "\n", "        ", "value_a", "=", "str", "(", "value_a", ")", "\n", "", "elif", "isinstance", "(", "value_a", ",", "tuple", ")", "and", "isinstance", "(", "value_b", ",", "list", ")", ":", "\n", "        ", "value_a", "=", "list", "(", "value_a", ")", "\n", "", "elif", "isinstance", "(", "value_a", ",", "list", ")", "and", "isinstance", "(", "value_b", ",", "tuple", ")", ":", "\n", "        ", "value_a", "=", "tuple", "(", "value_a", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "'Type mismatch ({} vs. {}) with values ({} vs. {}) for config '", "\n", "'key: {}'", ".", "format", "(", "type_b", ",", "type_a", ",", "value_b", ",", "value_a", ",", "full_key", ")", "\n", ")", "\n", "", "return", "value_a", "\n", "", ""]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test_engine.test_net_on_dataset": [[50, 69], ["core.config.get_output_dir", "datasets.json_dataset.JsonDataset", "utils.timer.Timer", "utils.timer.Timer.tic", "utils.timer.Timer.toc", "logger.info", "datasets.task_evaluation.evaluate_all", "len", "test_engine.multi_gpu_test_net_on_dataset", "test_engine.test_net", "datasets.json_dataset.JsonDataset.get_roidb"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.config.get_output_dir", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.timer.Timer.tic", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.timer.Timer.toc", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.task_evaluation.evaluate_all", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test_engine.multi_gpu_test_net_on_dataset", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test_engine.test_net", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.rpn_generator.get_roidb"], ["def", "test_net_on_dataset", "(", "multi_gpu", "=", "False", ")", ":", "\n", "    ", "\"\"\"Run inference on a dataset.\"\"\"", "\n", "output_dir", "=", "get_output_dir", "(", "training", "=", "False", ")", "\n", "dataset", "=", "JsonDataset", "(", "cfg", ".", "TEST", ".", "DATASET", ")", "\n", "test_timer", "=", "Timer", "(", ")", "\n", "test_timer", ".", "tic", "(", ")", "\n", "if", "multi_gpu", ":", "\n", "        ", "num_images", "=", "len", "(", "dataset", ".", "get_roidb", "(", ")", ")", "\n", "all_boxes", ",", "all_segms", ",", "all_keyps", "=", "multi_gpu_test_net_on_dataset", "(", "\n", "num_images", ",", "output_dir", "\n", ")", "\n", "", "else", ":", "\n", "        ", "all_boxes", ",", "all_segms", ",", "all_keyps", "=", "test_net", "(", ")", "\n", "", "test_timer", ".", "toc", "(", ")", "\n", "logger", ".", "info", "(", "'Total inference time: {:.3f}s'", ".", "format", "(", "test_timer", ".", "average_time", ")", ")", "\n", "results", "=", "task_evaluation", ".", "evaluate_all", "(", "\n", "dataset", ",", "all_boxes", ",", "all_segms", ",", "all_keyps", ",", "output_dir", "\n", ")", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test_engine.multi_gpu_test_net_on_dataset": [[71, 110], ["utils.get_runtime_dir", "utils.get_py_bin_ext", "os.path.join", "os.path.exists", "utils.process_in_parallel", "os.path.join", "yaml.dump", "utils.io.save_object", "logger.info", "range", "dict", "range", "range", "range", "os.path.abspath"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.env.get_runtime_dir", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.env.get_py_bin_ext", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.subprocess.process_in_parallel", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.io.save_object"], ["", "def", "multi_gpu_test_net_on_dataset", "(", "num_images", ",", "output_dir", ")", ":", "\n", "    ", "\"\"\"Multi-gpu inference on a dataset.\"\"\"", "\n", "binary_dir", "=", "envu", ".", "get_runtime_dir", "(", ")", "\n", "binary_ext", "=", "envu", ".", "get_py_bin_ext", "(", ")", "\n", "binary", "=", "os", ".", "path", ".", "join", "(", "binary_dir", ",", "'test_net'", "+", "binary_ext", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "binary", ")", ",", "'Binary \\'{}\\' not found'", ".", "format", "(", "binary", ")", "\n", "\n", "# Run inference in parallel in subprocesses", "\n", "# Outputs will be a list of outputs from each subprocess, where the output", "\n", "# of each subprocess is the dictionary saved by test_net().", "\n", "outputs", "=", "subprocess_utils", ".", "process_in_parallel", "(", "\n", "'detection'", ",", "num_images", ",", "binary", ",", "output_dir", "\n", ")", "\n", "\n", "# Collate the results from each subprocess", "\n", "all_boxes", "=", "[", "[", "]", "for", "_", "in", "range", "(", "cfg", ".", "MODEL", ".", "NUM_CLASSES", ")", "]", "\n", "all_segms", "=", "[", "[", "]", "for", "_", "in", "range", "(", "cfg", ".", "MODEL", ".", "NUM_CLASSES", ")", "]", "\n", "all_keyps", "=", "[", "[", "]", "for", "_", "in", "range", "(", "cfg", ".", "MODEL", ".", "NUM_CLASSES", ")", "]", "\n", "for", "det_data", "in", "outputs", ":", "\n", "        ", "all_boxes_batch", "=", "det_data", "[", "'all_boxes'", "]", "\n", "all_segms_batch", "=", "det_data", "[", "'all_segms'", "]", "\n", "all_keyps_batch", "=", "det_data", "[", "'all_keyps'", "]", "\n", "for", "cls_idx", "in", "range", "(", "1", ",", "cfg", ".", "MODEL", ".", "NUM_CLASSES", ")", ":", "\n", "            ", "all_boxes", "[", "cls_idx", "]", "+=", "all_boxes_batch", "[", "cls_idx", "]", "\n", "all_segms", "[", "cls_idx", "]", "+=", "all_segms_batch", "[", "cls_idx", "]", "\n", "all_keyps", "[", "cls_idx", "]", "+=", "all_keyps_batch", "[", "cls_idx", "]", "\n", "", "", "det_file", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'detections.pkl'", ")", "\n", "cfg_yaml", "=", "yaml", ".", "dump", "(", "cfg", ")", "\n", "save_object", "(", "\n", "dict", "(", "\n", "all_boxes", "=", "all_boxes", ",", "\n", "all_segms", "=", "all_segms", ",", "\n", "all_keyps", "=", "all_keyps", ",", "\n", "cfg", "=", "cfg_yaml", "\n", ")", ",", "det_file", "\n", ")", "\n", "logger", ".", "info", "(", "'Wrote detections to: {}'", ".", "format", "(", "os", ".", "path", ".", "abspath", "(", "det_file", ")", ")", ")", "\n", "\n", "return", "all_boxes", ",", "all_segms", ",", "all_keyps", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test_engine.test_net": [[112, 216], ["core.config.get_output_dir", "test_engine.get_roidb_and_dataset", "test_engine.initialize_model_from_cfg", "len", "test_engine.empty_results", "collections.defaultdict", "enumerate", "yaml.dump", "os.path.join", "utils.io.save_object", "logger.info", "cv2.imread", "test_engine.extend_results", "dict", "utils.NamedCudaScope", "core.test.im_detect_all", "test_engine.extend_results", "test_engine.extend_results", "numpy.sum", "str", "logger.info", "print", "utils.vis_one_image", "tuple", "os.path.abspath", "len", "datetime.timedelta", "os.path.splitext", "os.path.join", "os.path.basename", "collections.defaultdict.values", "int"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.config.get_output_dir", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test_engine.get_roidb_and_dataset", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test_engine.initialize_model_from_cfg", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test_engine.empty_results", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.io.save_object", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test_engine.extend_results", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.c2.NamedCudaScope", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test.im_detect_all", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test_engine.extend_results", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test_engine.extend_results", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.vis.vis_one_image"], ["", "def", "test_net", "(", "ind_range", "=", "None", ")", ":", "\n", "    ", "\"\"\"Run inference on all images in a dataset or over an index range of images\n    in a dataset using a single GPU.\n    \"\"\"", "\n", "assert", "cfg", ".", "TEST", ".", "WEIGHTS", "!=", "''", ",", "'TEST.WEIGHTS must be set to the model file to test'", "\n", "assert", "not", "cfg", ".", "MODEL", ".", "RPN_ONLY", ",", "'Use rpn_generate to generate proposals from RPN-only models'", "\n", "assert", "cfg", ".", "TEST", ".", "DATASET", "!=", "''", ",", "'TEST.DATASET must be set to the dataset name to test'", "\n", "\n", "output_dir", "=", "get_output_dir", "(", "training", "=", "False", ")", "\n", "roidb", ",", "dataset", ",", "start_ind", ",", "end_ind", ",", "total_num_images", "=", "get_roidb_and_dataset", "(", "\n", "ind_range", "\n", ")", "\n", "model", "=", "initialize_model_from_cfg", "(", ")", "\n", "num_images", "=", "len", "(", "roidb", ")", "\n", "num_classes", "=", "cfg", ".", "MODEL", ".", "NUM_CLASSES", "\n", "all_boxes", ",", "all_segms", ",", "all_keyps", "=", "empty_results", "(", "num_classes", ",", "num_images", ")", "\n", "timers", "=", "defaultdict", "(", "Timer", ")", "\n", "for", "i", ",", "entry", "in", "enumerate", "(", "roidb", ")", ":", "\n", "        ", "if", "cfg", ".", "MODEL", ".", "FASTER_RCNN", ":", "\n", "# Faster R-CNN type models generate proposals on-the-fly with an", "\n", "# in-network RPN", "\n", "            ", "box_proposals", "=", "None", "\n", "", "else", ":", "\n", "# The roidb may contain ground-truth rois (for example, if the roidb", "\n", "# comes from the training or val split). We only want to evaluate", "\n", "# detection on the *non*-ground-truth rois. We select only the rois", "\n", "# that have the gt_classes field set to 0, which means there's no", "\n", "# ground truth.", "\n", "            ", "box_proposals", "=", "entry", "[", "'boxes'", "]", "[", "entry", "[", "'gt_classes'", "]", "==", "0", "]", "\n", "if", "len", "(", "box_proposals", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "\n", "", "", "im", "=", "cv2", ".", "imread", "(", "entry", "[", "'image'", "]", ")", "\n", "with", "c2_utils", ".", "NamedCudaScope", "(", "0", ")", ":", "\n", "            ", "cls_boxes_i", ",", "cls_segms_i", ",", "cls_keyps_i", "=", "im_detect_all", "(", "\n", "model", ",", "im", ",", "box_proposals", ",", "timers", "\n", ")", "\n", "\n", "", "extend_results", "(", "i", ",", "all_boxes", ",", "cls_boxes_i", ")", "\n", "if", "cls_segms_i", "is", "not", "None", ":", "\n", "            ", "extend_results", "(", "i", ",", "all_segms", ",", "cls_segms_i", ")", "\n", "", "if", "cls_keyps_i", "is", "not", "None", ":", "\n", "            ", "extend_results", "(", "i", ",", "all_keyps", ",", "cls_keyps_i", ")", "\n", "\n", "", "if", "i", "%", "10", "==", "0", ":", "# Reduce log file size", "\n", "            ", "ave_total_time", "=", "np", ".", "sum", "(", "[", "t", ".", "average_time", "for", "t", "in", "timers", ".", "values", "(", ")", "]", ")", "\n", "eta_seconds", "=", "ave_total_time", "*", "(", "num_images", "-", "i", "-", "1", ")", "\n", "eta", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "int", "(", "eta_seconds", ")", ")", ")", "\n", "det_time", "=", "(", "\n", "timers", "[", "'im_detect_bbox'", "]", ".", "average_time", "+", "\n", "timers", "[", "'im_detect_mask'", "]", ".", "average_time", "+", "\n", "timers", "[", "'im_detect_keypoints'", "]", ".", "average_time", "\n", ")", "\n", "misc_time", "=", "(", "\n", "timers", "[", "'misc_bbox'", "]", ".", "average_time", "+", "\n", "timers", "[", "'misc_mask'", "]", ".", "average_time", "+", "\n", "timers", "[", "'misc_keypoints'", "]", ".", "average_time", "\n", ")", "\n", "logger", ".", "info", "(", "\n", "(", "\n", "'im_detect: range [{:d}, {:d}] of {:d}: '", "\n", "'{:d}/{:d} {:.3f}s + {:.3f}s (eta: {})'", "\n", ")", ".", "format", "(", "\n", "start_ind", "+", "1", ",", "end_ind", ",", "total_num_images", ",", "start_ind", "+", "i", "+", "1", ",", "\n", "start_ind", "+", "num_images", ",", "det_time", ",", "misc_time", ",", "eta", "\n", ")", "\n", ")", "\n", "\n", "", "if", "cfg", ".", "VIS", ":", "\n", "            ", "im_name", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "entry", "[", "'image'", "]", ")", ")", "[", "0", "]", "\n", "print", "(", "cls_segms_i", ")", "\n", "vis_utils", ".", "vis_one_image", "(", "\n", "im", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ",", "\n", "'{:d}_{:s}'", ".", "format", "(", "i", ",", "im_name", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'vis'", ")", ",", "\n", "cls_boxes_i", ",", "\n", "segms", "=", "cls_segms_i", ",", "\n", "keypoints", "=", "cls_keyps_i", ",", "\n", "thresh", "=", "cfg", ".", "VIS_TH", ",", "\n", "box_alpha", "=", "1", ",", "\n", "dataset", "=", "dataset", ",", "\n", "show_class", "=", "True", ",", "\n", "ext", "=", "'jpg'", "\n", ")", "\n", "\n", "", "", "cfg_yaml", "=", "yaml", ".", "dump", "(", "cfg", ")", "\n", "if", "ind_range", "is", "not", "None", ":", "\n", "        ", "det_name", "=", "'detection_range_%s_%s.pkl'", "%", "tuple", "(", "ind_range", ")", "\n", "", "else", ":", "\n", "        ", "det_name", "=", "'detections.pkl'", "\n", "", "det_file", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "det_name", ")", "\n", "save_object", "(", "\n", "dict", "(", "\n", "all_boxes", "=", "all_boxes", ",", "\n", "all_segms", "=", "all_segms", ",", "\n", "all_keyps", "=", "all_keyps", ",", "\n", "cfg", "=", "cfg_yaml", "\n", ")", ",", "det_file", "\n", ")", "\n", "logger", ".", "info", "(", "'Wrote detections to: {}'", ".", "format", "(", "os", ".", "path", ".", "abspath", "(", "det_file", ")", ")", ")", "\n", "return", "all_boxes", ",", "all_segms", ",", "all_keyps", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test_engine.initialize_model_from_cfg": [[218, 234], ["modeling.model_builder.create", "utils.initialize_from_weights_file", "modeling.model_builder.add_inference_inputs", "caffe2.python.workspace.CreateNet", "caffe2.python.workspace.CreateNet", "caffe2.python.workspace.CreateNet", "caffe2.python.workspace.CreateNet"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder.create", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.net.initialize_from_weights_file", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder.add_inference_inputs"], ["", "def", "initialize_model_from_cfg", "(", ")", ":", "\n", "    ", "\"\"\"Initialize a model from the global cfg. Loads test-time weights and\n    creates the networks in the Caffe2 workspace.\n    \"\"\"", "\n", "model", "=", "model_builder", ".", "create", "(", "cfg", ".", "MODEL", ".", "TYPE", ",", "train", "=", "False", ")", "\n", "net_utils", ".", "initialize_from_weights_file", "(", "\n", "model", ",", "cfg", ".", "TEST", ".", "WEIGHTS", ",", "broadcast", "=", "False", "\n", ")", "\n", "model_builder", ".", "add_inference_inputs", "(", "model", ")", "\n", "workspace", ".", "CreateNet", "(", "model", ".", "net", ")", "\n", "workspace", ".", "CreateNet", "(", "model", ".", "conv_body_net", ")", "\n", "if", "cfg", ".", "MODEL", ".", "MASK_ON", ":", "\n", "        ", "workspace", ".", "CreateNet", "(", "model", ".", "mask_net", ")", "\n", "", "if", "cfg", ".", "MODEL", ".", "KEYPOINTS_ON", ":", "\n", "        ", "workspace", ".", "CreateNet", "(", "model", ".", "keypoint_net", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test_engine.get_roidb_and_dataset": [[236, 259], ["datasets.json_dataset.JsonDataset", "datasets.json_dataset.JsonDataset.get_roidb", "datasets.json_dataset.JsonDataset.get_roidb", "len", "len"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.rpn_generator.get_roidb", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.rpn_generator.get_roidb"], ["", "def", "get_roidb_and_dataset", "(", "ind_range", ")", ":", "\n", "    ", "\"\"\"Get the roidb for the dataset specified in the global cfg. Optionally\n    restrict it to a range of indices if ind_range is a pair of integers.\n    \"\"\"", "\n", "dataset", "=", "JsonDataset", "(", "cfg", ".", "TEST", ".", "DATASET", ")", "\n", "if", "cfg", ".", "MODEL", ".", "FASTER_RCNN", ":", "\n", "        ", "roidb", "=", "dataset", ".", "get_roidb", "(", ")", "\n", "", "else", ":", "\n", "        ", "roidb", "=", "dataset", ".", "get_roidb", "(", "\n", "proposal_file", "=", "cfg", ".", "TEST", ".", "PROPOSAL_FILE", ",", "\n", "proposal_limit", "=", "cfg", ".", "TEST", ".", "PROPOSAL_LIMIT", "\n", ")", "\n", "\n", "", "if", "ind_range", "is", "not", "None", ":", "\n", "        ", "total_num_images", "=", "len", "(", "roidb", ")", "\n", "start", ",", "end", "=", "ind_range", "\n", "roidb", "=", "roidb", "[", "start", ":", "end", "]", "\n", "", "else", ":", "\n", "        ", "start", "=", "0", "\n", "end", "=", "len", "(", "roidb", ")", "\n", "total_num_images", "=", "end", "\n", "\n", "", "return", "roidb", ",", "dataset", ",", "start", ",", "end", ",", "total_num_images", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test_engine.empty_results": [[261, 281], ["range", "range", "range", "range", "range", "range"], "function", ["None"], ["", "def", "empty_results", "(", "num_classes", ",", "num_images", ")", ":", "\n", "    ", "\"\"\"Return empty results lists for boxes, masks, and keypoints.\n    Box detections are collected into:\n      all_boxes[cls][image] = N x 5 array with columns (x1, y1, x2, y2, score)\n    Instance mask predictions are collected into:\n      all_segms[cls][image] = [...] list of COCO RLE encoded masks that are in\n      1:1 correspondence with the boxes in all_boxes[cls][image]\n    Keypoint predictions are collected into:\n      all_keyps[cls][image] = [...] list of keypoints results, each encoded as\n      a 3D array (#rois, 4, #keypoints) with the 4 rows corresponding to\n      [x, y, logit, prob] (See: utils.keypoints.heatmaps_to_keypoints).\n      Keypoints are recorded for person (cls = 1); they are in 1:1\n      correspondence with the boxes in all_boxes[cls][image].\n    \"\"\"", "\n", "# Note: do not be tempted to use [[] * N], which gives N references to the", "\n", "# *same* empty list.", "\n", "all_boxes", "=", "[", "[", "[", "]", "for", "_", "in", "range", "(", "num_images", ")", "]", "for", "_", "in", "range", "(", "num_classes", ")", "]", "\n", "all_segms", "=", "[", "[", "[", "]", "for", "_", "in", "range", "(", "num_images", ")", "]", "for", "_", "in", "range", "(", "num_classes", ")", "]", "\n", "all_keyps", "=", "[", "[", "[", "]", "for", "_", "in", "range", "(", "num_images", ")", "]", "for", "_", "in", "range", "(", "num_classes", ")", "]", "\n", "return", "all_boxes", ",", "all_segms", ",", "all_keyps", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test_engine.extend_results": [[283, 290], ["range", "len"], "function", ["None"], ["", "def", "extend_results", "(", "index", ",", "all_res", ",", "im_res", ")", ":", "\n", "    ", "\"\"\"Add results for an image to the set of all results at the specified\n    index.\n    \"\"\"", "\n", "# Skip cls_idx 0 (__background__)", "\n", "for", "cls_idx", "in", "range", "(", "1", ",", "len", "(", "im_res", ")", ")", ":", "\n", "        ", "all_res", "[", "cls_idx", "]", "[", "index", "]", "=", "im_res", "[", "cls_idx", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test.im_detect_all": [[51, 101], ["timers[].tic", "timers[].toc", "timers[].tic", "test.box_results_with_nms_and_limit", "timers[].toc", "collections.defaultdict", "test.im_detect_bbox_aug", "test.im_detect_bbox", "timers[].tic", "timers[].toc", "timers[].tic", "test.segm_results", "timers[].toc", "timers[].tic", "timers[].toc", "timers[].tic", "test.keypoint_results", "timers[].toc", "test.im_detect_mask_aug", "test.im_detect_mask", "test.im_detect_keypoints_aug", "test.im_detect_keypoints"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.timer.Timer.tic", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.timer.Timer.toc", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.timer.Timer.tic", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test.box_results_with_nms_and_limit", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.timer.Timer.toc", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test.im_detect_bbox_aug", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test.im_detect_bbox", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.timer.Timer.tic", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.timer.Timer.toc", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.timer.Timer.tic", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test.segm_results", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.timer.Timer.toc", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.timer.Timer.tic", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.timer.Timer.toc", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.timer.Timer.tic", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test.keypoint_results", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.timer.Timer.toc", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test.im_detect_mask_aug", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test.im_detect_mask", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test.im_detect_keypoints_aug", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test.im_detect_keypoints"], ["def", "im_detect_all", "(", "model", ",", "im", ",", "box_proposals", ",", "timers", "=", "None", ")", ":", "\n", "    ", "if", "timers", "is", "None", ":", "\n", "        ", "timers", "=", "defaultdict", "(", "Timer", ")", "\n", "\n", "", "timers", "[", "'im_detect_bbox'", "]", ".", "tic", "(", ")", "\n", "if", "cfg", ".", "TEST", ".", "BBOX_AUG", ".", "ENABLED", ":", "\n", "        ", "scores", ",", "boxes", ",", "im_scales", "=", "im_detect_bbox_aug", "(", "model", ",", "im", ",", "box_proposals", ")", "\n", "", "else", ":", "\n", "        ", "scores", ",", "boxes", ",", "im_scales", "=", "im_detect_bbox", "(", "model", ",", "im", ",", "box_proposals", ")", "\n", "", "timers", "[", "'im_detect_bbox'", "]", ".", "toc", "(", ")", "\n", "\n", "# score and boxes are from the whole image after score thresholding and nms", "\n", "# (they are not separated by class)", "\n", "# cls_boxes boxes and scores are separated by class and in the format used", "\n", "# for evaluating results", "\n", "timers", "[", "'misc_bbox'", "]", ".", "tic", "(", ")", "\n", "scores", ",", "boxes", ",", "cls_boxes", "=", "box_results_with_nms_and_limit", "(", "scores", ",", "boxes", ")", "\n", "timers", "[", "'misc_bbox'", "]", ".", "toc", "(", ")", "\n", "\n", "if", "cfg", ".", "MODEL", ".", "MASK_ON", "and", "boxes", ".", "shape", "[", "0", "]", ">", "0", ":", "\n", "        ", "timers", "[", "'im_detect_mask'", "]", ".", "tic", "(", ")", "\n", "if", "cfg", ".", "TEST", ".", "MASK_AUG", ".", "ENABLED", ":", "\n", "            ", "masks", "=", "im_detect_mask_aug", "(", "model", ",", "im", ",", "boxes", ")", "\n", "", "else", ":", "\n", "            ", "masks", "=", "im_detect_mask", "(", "model", ",", "im_scales", ",", "boxes", ")", "\n", "", "timers", "[", "'im_detect_mask'", "]", ".", "toc", "(", ")", "\n", "\n", "timers", "[", "'misc_mask'", "]", ".", "tic", "(", ")", "\n", "cls_segms", "=", "segm_results", "(", "\n", "cls_boxes", ",", "masks", ",", "boxes", ",", "im", ".", "shape", "[", "0", "]", ",", "im", ".", "shape", "[", "1", "]", "\n", ")", "\n", "timers", "[", "'misc_mask'", "]", ".", "toc", "(", ")", "\n", "", "else", ":", "\n", "        ", "cls_segms", "=", "None", "\n", "\n", "", "if", "cfg", ".", "MODEL", ".", "KEYPOINTS_ON", "and", "boxes", ".", "shape", "[", "0", "]", ">", "0", ":", "\n", "        ", "timers", "[", "'im_detect_keypoints'", "]", ".", "tic", "(", ")", "\n", "if", "cfg", ".", "TEST", ".", "KPS_AUG", ".", "ENABLED", ":", "\n", "            ", "heatmaps", "=", "im_detect_keypoints_aug", "(", "model", ",", "im", ",", "boxes", ")", "\n", "", "else", ":", "\n", "            ", "heatmaps", "=", "im_detect_keypoints", "(", "model", ",", "im_scales", ",", "boxes", ")", "\n", "", "timers", "[", "'im_detect_keypoints'", "]", ".", "toc", "(", ")", "\n", "\n", "timers", "[", "'misc_keypoints'", "]", ".", "tic", "(", ")", "\n", "cls_keyps", "=", "keypoint_results", "(", "cls_boxes", ",", "heatmaps", ",", "boxes", ")", "\n", "timers", "[", "'misc_keypoints'", "]", ".", "toc", "(", ")", "\n", "", "else", ":", "\n", "        ", "cls_keyps", "=", "None", "\n", "\n", "", "return", "cls_boxes", ",", "cls_segms", ",", "cls_keyps", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test.im_conv_body_only": [[103, 109], ["test._get_image_blob", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.RunNet", "caffe2.python.core.ScopedName", "model.conv_body_net.Proto"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test._get_image_blob"], ["", "def", "im_conv_body_only", "(", "model", ",", "im", ")", ":", "\n", "    ", "\"\"\"Runs `model.conv_body_net` on the given image `im`.\"\"\"", "\n", "im_blob", ",", "im_scale_factors", "=", "_get_image_blob", "(", "im", ")", "\n", "workspace", ".", "FeedBlob", "(", "core", ".", "ScopedName", "(", "'data'", ")", ",", "im_blob", ")", "\n", "workspace", ".", "RunNet", "(", "model", ".", "conv_body_net", ".", "Proto", "(", ")", ".", "name", ")", "\n", "return", "im_scale_factors", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test.im_detect_bbox": [[111, 187], ["test._get_blobs", "inputs.items", "caffe2.python.workspace.RunNet", "caffe2.python.workspace.FetchBlob().squeeze", "scores.reshape.reshape", "numpy.array", "numpy.round().dot", "numpy.unique", "test._add_multilevel_rois_for_test", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.FetchBlob().squeeze", "box_deltas.reshape.reshape", "utils.bbox_transform", "utils.clip_tiled_boxes", "numpy.tile", "caffe2.python.core.ScopedName", "model.net.Proto", "len", "caffe2.python.core.ScopedName", "caffe2.python.workspace.FetchBlob", "numpy.tile", "numpy.round", "caffe2.python.core.ScopedName", "caffe2.python.workspace.FetchBlob", "caffe2.python.core.ScopedName"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test._get_blobs", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test._add_multilevel_rois_for_test", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.boxes.bbox_transform", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.boxes.clip_tiled_boxes"], ["", "def", "im_detect_bbox", "(", "model", ",", "im", ",", "boxes", "=", "None", ")", ":", "\n", "    ", "\"\"\"Bounding box object detection for an image with given box proposals.\n\n    Arguments:\n        model (DetectionModelHelper): the detection model to use\n        im (ndarray): color image to test (in BGR order)\n        boxes (ndarray): R x 4 array of object proposals in 0-indexed\n            [x1, y1, x2, y2] format, or None if using RPN\n\n    Returns:\n        scores (ndarray): R x K array of object class scores for K classes\n            (K includes background as object category 0)\n        boxes (ndarray): R x 4*K array of predicted bounding boxes\n        im_scales (list): list of image scales used in the input blob (as\n            returned by _get_blobs and for use with im_detect_mask, etc.)\n    \"\"\"", "\n", "inputs", ",", "im_scales", "=", "_get_blobs", "(", "im", ",", "boxes", ")", "\n", "\n", "# When mapping from image ROIs to feature map ROIs, there's some aliasing", "\n", "# (some distinct image ROIs get mapped to the same feature ROI).", "\n", "# Here, we identify duplicate feature ROIs, so we only compute features", "\n", "# on the unique subset.", "\n", "if", "cfg", ".", "DEDUP_BOXES", ">", "0", "and", "not", "cfg", ".", "MODEL", ".", "FASTER_RCNN", ":", "\n", "        ", "v", "=", "np", ".", "array", "(", "[", "1", ",", "1e3", ",", "1e6", ",", "1e9", ",", "1e12", "]", ")", "\n", "hashes", "=", "np", ".", "round", "(", "inputs", "[", "'rois'", "]", "*", "cfg", ".", "DEDUP_BOXES", ")", ".", "dot", "(", "v", ")", "\n", "_", ",", "index", ",", "inv_index", "=", "np", ".", "unique", "(", "\n", "hashes", ",", "return_index", "=", "True", ",", "return_inverse", "=", "True", "\n", ")", "\n", "inputs", "[", "'rois'", "]", "=", "inputs", "[", "'rois'", "]", "[", "index", ",", ":", "]", "\n", "boxes", "=", "boxes", "[", "index", ",", ":", "]", "\n", "\n", "# Add multi-level rois for FPN", "\n", "", "if", "cfg", ".", "FPN", ".", "MULTILEVEL_ROIS", "and", "not", "cfg", ".", "MODEL", ".", "FASTER_RCNN", ":", "\n", "        ", "_add_multilevel_rois_for_test", "(", "inputs", ",", "'rois'", ")", "\n", "\n", "", "for", "k", ",", "v", "in", "inputs", ".", "items", "(", ")", ":", "\n", "        ", "workspace", ".", "FeedBlob", "(", "core", ".", "ScopedName", "(", "k", ")", ",", "v", ")", "\n", "", "workspace", ".", "RunNet", "(", "model", ".", "net", ".", "Proto", "(", ")", ".", "name", ")", "\n", "\n", "# Read out blobs", "\n", "if", "cfg", ".", "MODEL", ".", "FASTER_RCNN", ":", "\n", "        ", "assert", "len", "(", "im_scales", ")", "==", "1", ",", "'Only single-image / single-scale batch implemented'", "\n", "rois", "=", "workspace", ".", "FetchBlob", "(", "core", ".", "ScopedName", "(", "'rois'", ")", ")", "\n", "# unscale back to raw image space", "\n", "boxes", "=", "rois", "[", ":", ",", "1", ":", "5", "]", "/", "im_scales", "[", "0", "]", "\n", "\n", "# Softmax class probabilities", "\n", "", "scores", "=", "workspace", ".", "FetchBlob", "(", "core", ".", "ScopedName", "(", "'cls_prob'", ")", ")", ".", "squeeze", "(", ")", "\n", "# In case there is 1 proposal", "\n", "scores", "=", "scores", ".", "reshape", "(", "[", "-", "1", ",", "scores", ".", "shape", "[", "-", "1", "]", "]", ")", "\n", "\n", "if", "cfg", ".", "TEST", ".", "BBOX_REG", ":", "\n", "# Apply bounding-box regression deltas", "\n", "        ", "box_deltas", "=", "workspace", ".", "FetchBlob", "(", "core", ".", "ScopedName", "(", "'bbox_pred'", ")", ")", ".", "squeeze", "(", ")", "\n", "# In case there is 1 proposal", "\n", "box_deltas", "=", "box_deltas", ".", "reshape", "(", "[", "-", "1", ",", "box_deltas", ".", "shape", "[", "-", "1", "]", "]", ")", "\n", "if", "cfg", ".", "MODEL", ".", "CLS_AGNOSTIC_BBOX_REG", ":", "\n", "# Remove predictions for bg class (compat with MSRA code)", "\n", "            ", "box_deltas", "=", "box_deltas", "[", ":", ",", "-", "4", ":", "]", "\n", "", "pred_boxes", "=", "box_utils", ".", "bbox_transform", "(", "\n", "boxes", ",", "box_deltas", ",", "cfg", ".", "MODEL", ".", "BBOX_REG_WEIGHTS", "\n", ")", "\n", "pred_boxes", "=", "box_utils", ".", "clip_tiled_boxes", "(", "pred_boxes", ",", "im", ".", "shape", ")", "\n", "if", "cfg", ".", "MODEL", ".", "CLS_AGNOSTIC_BBOX_REG", ":", "\n", "            ", "pred_boxes", "=", "np", ".", "tile", "(", "pred_boxes", ",", "(", "1", ",", "scores", ".", "shape", "[", "1", "]", ")", ")", "\n", "", "", "else", ":", "\n", "# Simply repeat the boxes, once for each class", "\n", "        ", "pred_boxes", "=", "np", ".", "tile", "(", "boxes", ",", "(", "1", ",", "scores", ".", "shape", "[", "1", "]", ")", ")", "\n", "\n", "", "if", "cfg", ".", "DEDUP_BOXES", ">", "0", "and", "not", "cfg", ".", "MODEL", ".", "FASTER_RCNN", ":", "\n", "# Map scores and predictions back to the original set of boxes", "\n", "        ", "scores", "=", "scores", "[", "inv_index", ",", ":", "]", "\n", "pred_boxes", "=", "pred_boxes", "[", "inv_index", ",", ":", "]", "\n", "\n", "", "return", "scores", ",", "pred_boxes", ",", "im_scales", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test.im_detect_bbox_aug": [[189, 278], ["test.im_detect_bbox", "test.im_detect_bbox_aug.add_preds_t"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test.im_detect_bbox"], ["", "def", "im_detect_bbox_aug", "(", "model", ",", "im", ",", "box_proposals", "=", "None", ")", ":", "\n", "    ", "\"\"\"Performs bbox detection with test-time augmentations.\n    Function signature is the same as for im_detect_bbox.\n    \"\"\"", "\n", "assert", "not", "cfg", ".", "TEST", ".", "BBOX_AUG", ".", "SCALE_SIZE_DEP", ",", "'Size dependent scaling not implemented'", "\n", "assert", "not", "cfg", ".", "TEST", ".", "BBOX_AUG", ".", "SCORE_HEUR", "==", "'UNION'", "or", "cfg", ".", "TEST", ".", "BBOX_AUG", ".", "COORD_HEUR", "==", "'UNION'", ",", "'Coord heuristic must be union whenever score heuristic is union'", "\n", "assert", "not", "cfg", ".", "TEST", ".", "BBOX_AUG", ".", "COORD_HEUR", "==", "'UNION'", "or", "cfg", ".", "TEST", ".", "BBOX_AUG", ".", "SCORE_HEUR", "==", "'UNION'", ",", "'Score heuristic must be union whenever coord heuristic is union'", "\n", "assert", "not", "cfg", ".", "MODEL", ".", "FASTER_RCNN", "or", "cfg", ".", "TEST", ".", "BBOX_AUG", ".", "SCORE_HEUR", "==", "'UNION'", ",", "'Union heuristic must be used to combine Faster RCNN predictions'", "\n", "\n", "# Collect detections computed under different transformations", "\n", "scores_ts", "=", "[", "]", "\n", "boxes_ts", "=", "[", "]", "\n", "\n", "def", "add_preds_t", "(", "scores_t", ",", "boxes_t", ")", ":", "\n", "        ", "scores_ts", ".", "append", "(", "scores_t", ")", "\n", "boxes_ts", ".", "append", "(", "boxes_t", ")", "\n", "\n", "# Perform detection on the horizontally flipped image", "\n", "", "if", "cfg", ".", "TEST", ".", "BBOX_AUG", ".", "H_FLIP", ":", "\n", "        ", "scores_hf", ",", "boxes_hf", ",", "_im_scales_hf", "=", "im_detect_bbox_hflip", "(", "\n", "model", ",", "im", ",", "box_proposals", "\n", ")", "\n", "add_preds_t", "(", "scores_hf", ",", "boxes_hf", ")", "\n", "\n", "# Compute detections at different scales", "\n", "", "for", "scale", "in", "cfg", ".", "TEST", ".", "BBOX_AUG", ".", "SCALES", ":", "\n", "        ", "max_size", "=", "cfg", ".", "TEST", ".", "BBOX_AUG", ".", "MAX_SIZE", "\n", "scores_scl", ",", "boxes_scl", "=", "im_detect_bbox_scale", "(", "\n", "model", ",", "im", ",", "scale", ",", "max_size", ",", "box_proposals", "\n", ")", "\n", "add_preds_t", "(", "scores_scl", ",", "boxes_scl", ")", "\n", "\n", "if", "cfg", ".", "TEST", ".", "BBOX_AUG", ".", "SCALE_H_FLIP", ":", "\n", "            ", "scores_scl_hf", ",", "boxes_scl_hf", "=", "im_detect_bbox_scale", "(", "\n", "model", ",", "im", ",", "scale", ",", "max_size", ",", "box_proposals", ",", "hflip", "=", "True", "\n", ")", "\n", "add_preds_t", "(", "scores_scl_hf", ",", "boxes_scl_hf", ")", "\n", "\n", "# Perform detection at different aspect ratios", "\n", "", "", "for", "aspect_ratio", "in", "cfg", ".", "TEST", ".", "BBOX_AUG", ".", "ASPECT_RATIOS", ":", "\n", "        ", "scores_ar", ",", "boxes_ar", "=", "im_detect_bbox_aspect_ratio", "(", "\n", "model", ",", "im", ",", "aspect_ratio", ",", "box_proposals", "\n", ")", "\n", "add_preds_t", "(", "scores_ar", ",", "boxes_ar", ")", "\n", "\n", "if", "cfg", ".", "TEST", ".", "BBOX_AUG", ".", "ASPECT_RATIO_H_FLIP", ":", "\n", "            ", "scores_ar_hf", ",", "boxes_ar_hf", "=", "im_detect_bbox_aspect_ratio", "(", "\n", "model", ",", "im", ",", "aspect_ratio", ",", "box_proposals", ",", "hflip", "=", "True", "\n", ")", "\n", "add_preds_t", "(", "scores_ar_hf", ",", "boxes_ar_hf", ")", "\n", "\n", "# Compute detections for the original image (identity transform) last to", "\n", "# ensure that the Caffe2 workspace is populated with blobs corresponding", "\n", "# to the original image on return (postcondition of im_detect_bbox)", "\n", "", "", "scores_i", ",", "boxes_i", ",", "im_scales_i", "=", "im_detect_bbox", "(", "model", ",", "im", ",", "box_proposals", ")", "\n", "add_preds_t", "(", "scores_i", ",", "boxes_i", ")", "\n", "\n", "# Combine the predicted scores", "\n", "if", "cfg", ".", "TEST", ".", "BBOX_AUG", ".", "SCORE_HEUR", "==", "'ID'", ":", "\n", "        ", "scores_c", "=", "scores_i", "\n", "", "elif", "cfg", ".", "TEST", ".", "BBOX_AUG", ".", "SCORE_HEUR", "==", "'AVG'", ":", "\n", "        ", "scores_c", "=", "np", ".", "mean", "(", "scores_ts", ",", "axis", "=", "0", ")", "\n", "", "elif", "cfg", ".", "TEST", ".", "BBOX_AUG", ".", "SCORE_HEUR", "==", "'UNION'", ":", "\n", "        ", "scores_c", "=", "np", ".", "vstack", "(", "scores_ts", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\n", "'Score heur {} not supported'", ".", "format", "(", "cfg", ".", "TEST", ".", "BBOX_AUG", ".", "SCORE_HEUR", ")", "\n", ")", "\n", "\n", "# Combine the predicted boxes", "\n", "", "if", "cfg", ".", "TEST", ".", "BBOX_AUG", ".", "COORD_HEUR", "==", "'ID'", ":", "\n", "        ", "boxes_c", "=", "boxes_i", "\n", "", "elif", "cfg", ".", "TEST", ".", "BBOX_AUG", ".", "COORD_HEUR", "==", "'AVG'", ":", "\n", "        ", "boxes_c", "=", "np", ".", "mean", "(", "boxes_ts", ",", "axis", "=", "0", ")", "\n", "", "elif", "cfg", ".", "TEST", ".", "BBOX_AUG", ".", "COORD_HEUR", "==", "'UNION'", ":", "\n", "        ", "boxes_c", "=", "np", ".", "vstack", "(", "boxes_ts", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\n", "'Coord heur {} not supported'", ".", "format", "(", "cfg", ".", "TEST", ".", "BBOX_AUG", ".", "COORD_HEUR", ")", "\n", ")", "\n", "\n", "", "return", "scores_c", ",", "boxes_c", ",", "im_scales_i", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test.im_detect_bbox_hflip": [[280, 301], ["test.im_detect_bbox", "utils.flip_boxes", "utils.flip_boxes"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test.im_detect_bbox", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.boxes.flip_boxes", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.boxes.flip_boxes"], ["", "def", "im_detect_bbox_hflip", "(", "model", ",", "im", ",", "box_proposals", "=", "None", ")", ":", "\n", "    ", "\"\"\"Performs bbox detection on the horizontally flipped image.\n    Function signature is the same as for im_detect_bbox.\n    \"\"\"", "\n", "# Compute predictions on the flipped image", "\n", "im_hf", "=", "im", "[", ":", ",", ":", ":", "-", "1", ",", ":", "]", "\n", "im_width", "=", "im", ".", "shape", "[", "1", "]", "\n", "\n", "if", "not", "cfg", ".", "MODEL", ".", "FASTER_RCNN", ":", "\n", "        ", "box_proposals_hf", "=", "box_utils", ".", "flip_boxes", "(", "box_proposals", ",", "im_width", ")", "\n", "", "else", ":", "\n", "        ", "box_proposals_hf", "=", "None", "\n", "\n", "", "scores_hf", ",", "boxes_hf", ",", "im_scales", "=", "im_detect_bbox", "(", "\n", "model", ",", "im_hf", ",", "box_proposals_hf", "\n", ")", "\n", "\n", "# Invert the detections computed on the flipped image", "\n", "boxes_inv", "=", "box_utils", ".", "flip_boxes", "(", "boxes_hf", ",", "im_width", ")", "\n", "\n", "return", "scores_hf", ",", "boxes_inv", ",", "im_scales", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test.im_detect_bbox_scale": [[303, 329], ["test.im_detect_bbox_hflip", "test.im_detect_bbox"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test.im_detect_bbox_hflip", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test.im_detect_bbox"], ["", "def", "im_detect_bbox_scale", "(", "\n", "model", ",", "im", ",", "scale", ",", "max_size", ",", "box_proposals", "=", "None", ",", "hflip", "=", "False", "\n", ")", ":", "\n", "    ", "\"\"\"Computes bbox detections at the given scale.\n    Returns predictions in the original image space.\n    \"\"\"", "\n", "# Remember the original scale", "\n", "orig_scales", "=", "cfg", ".", "TEST", ".", "SCALES", "\n", "orig_max_size", "=", "cfg", ".", "TEST", ".", "MAX_SIZE", "\n", "\n", "# Perform detection at the given scale", "\n", "cfg", ".", "TEST", ".", "SCALES", "=", "(", "scale", ",", ")", "\n", "cfg", ".", "TEST", ".", "MAX_SIZE", "=", "max_size", "\n", "\n", "if", "hflip", ":", "\n", "        ", "scores_scl", ",", "boxes_scl", ",", "_", "=", "im_detect_bbox_hflip", "(", "\n", "model", ",", "im", ",", "box_proposals", "\n", ")", "\n", "", "else", ":", "\n", "        ", "scores_scl", ",", "boxes_scl", ",", "_", "=", "im_detect_bbox", "(", "model", ",", "im", ",", "box_proposals", ")", "\n", "\n", "# Restore the original scale", "\n", "", "cfg", ".", "TEST", ".", "SCALES", "=", "orig_scales", "\n", "cfg", ".", "TEST", ".", "MAX_SIZE", "=", "orig_max_size", "\n", "\n", "return", "scores_scl", ",", "boxes_scl", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test.im_detect_bbox_aspect_ratio": [[331, 356], ["utils.aspect_ratio_rel", "utils.aspect_ratio", "utils.aspect_ratio", "test.im_detect_bbox_hflip", "test.im_detect_bbox"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.image.aspect_ratio_rel", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.boxes.aspect_ratio", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.boxes.aspect_ratio", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test.im_detect_bbox_hflip", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test.im_detect_bbox"], ["", "def", "im_detect_bbox_aspect_ratio", "(", "\n", "model", ",", "im", ",", "aspect_ratio", ",", "box_proposals", "=", "None", ",", "hflip", "=", "False", "\n", ")", ":", "\n", "    ", "\"\"\"Computes bbox detections at the given width-relative aspect ratio.\n    Returns predictions in the original image space.\n    \"\"\"", "\n", "# Compute predictions on the transformed image", "\n", "im_ar", "=", "image_utils", ".", "aspect_ratio_rel", "(", "im", ",", "aspect_ratio", ")", "\n", "\n", "if", "not", "cfg", ".", "MODEL", ".", "FASTER_RCNN", ":", "\n", "        ", "box_proposals_ar", "=", "box_utils", ".", "aspect_ratio", "(", "box_proposals", ",", "aspect_ratio", ")", "\n", "", "else", ":", "\n", "        ", "box_proposals_ar", "=", "None", "\n", "\n", "", "if", "hflip", ":", "\n", "        ", "scores_ar", ",", "boxes_ar", ",", "_", "=", "im_detect_bbox_hflip", "(", "\n", "model", ",", "im_ar", ",", "box_proposals_ar", "\n", ")", "\n", "", "else", ":", "\n", "        ", "scores_ar", ",", "boxes_ar", ",", "_", "=", "im_detect_bbox", "(", "model", ",", "im_ar", ",", "box_proposals_ar", ")", "\n", "\n", "# Invert the detected boxes", "\n", "", "boxes_inv", "=", "box_utils", ".", "aspect_ratio", "(", "boxes_ar", ",", "1.0", "/", "aspect_ratio", ")", "\n", "\n", "return", "scores_ar", ",", "boxes_inv", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test.im_detect_mask": [[358, 402], ["inputs.items", "caffe2.python.workspace.RunNet", "caffe2.python.workspace.FetchBlob().squeeze", "len", "numpy.zeros", "test._get_rois_blob", "test._add_multilevel_rois_for_test", "caffe2.python.workspace.FeedBlob", "pred_masks.reshape.reshape", "pred_masks.reshape.reshape", "caffe2.python.core.ScopedName", "model.mask_net.Proto", "caffe2.python.workspace.FetchBlob", "caffe2.python.core.ScopedName"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.blob.zeros", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test._get_rois_blob", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test._add_multilevel_rois_for_test"], ["", "def", "im_detect_mask", "(", "model", ",", "im_scales", ",", "boxes", ")", ":", "\n", "    ", "\"\"\"Infer instance segmentation masks. This function must be called after\n    im_detect_bbox as it assumes that the Caffe2 workspace is already populated\n    with the necessary blobs.\n\n    Arguments:\n        model (DetectionModelHelper): the detection model to use\n        im_scales (list): image blob scales as returned by im_detect_bbox\n        boxes (ndarray): R x 4 array of bounding box detections (e.g., as\n            returned by im_detect_bbox)\n\n    Returns:\n        pred_masks (ndarray): R x K x M x M array of class specific soft masks\n            output by the network (must be processed by segm_results to convert\n            into hard masks in the original image coordinate space)\n    \"\"\"", "\n", "assert", "len", "(", "im_scales", ")", "==", "1", ",", "'Only single-image / single-scale batch implemented'", "\n", "\n", "M", "=", "cfg", ".", "MRCNN", ".", "RESOLUTION", "\n", "if", "boxes", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "        ", "pred_masks", "=", "np", ".", "zeros", "(", "(", "0", ",", "M", ",", "M", ")", ",", "np", ".", "float32", ")", "\n", "return", "pred_masks", "\n", "\n", "", "inputs", "=", "{", "'mask_rois'", ":", "_get_rois_blob", "(", "boxes", ",", "im_scales", ")", "}", "\n", "# Add multi-level rois for FPN", "\n", "if", "cfg", ".", "FPN", ".", "MULTILEVEL_ROIS", ":", "\n", "        ", "_add_multilevel_rois_for_test", "(", "inputs", ",", "'mask_rois'", ")", "\n", "\n", "", "for", "k", ",", "v", "in", "inputs", ".", "items", "(", ")", ":", "\n", "        ", "workspace", ".", "FeedBlob", "(", "core", ".", "ScopedName", "(", "k", ")", ",", "v", ")", "\n", "", "workspace", ".", "RunNet", "(", "model", ".", "mask_net", ".", "Proto", "(", ")", ".", "name", ")", "\n", "\n", "# Fetch masks", "\n", "pred_masks", "=", "workspace", ".", "FetchBlob", "(", "\n", "core", ".", "ScopedName", "(", "'mask_fcn_probs'", ")", "\n", ")", ".", "squeeze", "(", ")", "\n", "\n", "if", "cfg", ".", "MRCNN", ".", "CLS_SPECIFIC_MASK", ":", "\n", "        ", "pred_masks", "=", "pred_masks", ".", "reshape", "(", "[", "-", "1", ",", "cfg", ".", "MODEL", ".", "NUM_CLASSES", ",", "M", ",", "M", "]", ")", "\n", "", "else", ":", "\n", "        ", "pred_masks", "=", "pred_masks", ".", "reshape", "(", "[", "-", "1", ",", "1", ",", "M", ",", "M", "]", ")", "\n", "\n", "", "return", "pred_masks", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test.im_detect_mask_aug": [[404, 473], ["test.im_conv_body_only", "test.im_detect_mask", "masks_ts.append", "test.im_detect_mask_hflip", "masks_ts.append", "test.im_detect_mask_scale", "masks_ts.append", "test.im_detect_mask_aspect_ratio", "masks_ts.append", "numpy.mean", "test.im_detect_mask_scale", "masks_ts.append", "test.im_detect_mask_aspect_ratio", "masks_ts.append", "numpy.amax", "numpy.mean", "NotImplementedError", "test.im_detect_mask_aug.logit"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test.im_conv_body_only", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test.im_detect_mask", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test.im_detect_mask_hflip", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test.im_detect_mask_scale", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test.im_detect_mask_aspect_ratio", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test.im_detect_mask_scale", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test.im_detect_mask_aspect_ratio"], ["", "def", "im_detect_mask_aug", "(", "model", ",", "im", ",", "boxes", ")", ":", "\n", "    ", "\"\"\"Performs mask detection with test-time augmentations.\n\n    Arguments:\n        model (DetectionModelHelper): the detection model to use\n        im (ndarray): BGR image to test\n        boxes (ndarray): R x 4 array of bounding boxes\n\n    Returns:\n        masks (ndarray): R x K x M x M array of class specific soft masks\n    \"\"\"", "\n", "assert", "not", "cfg", ".", "TEST", ".", "MASK_AUG", ".", "SCALE_SIZE_DEP", ",", "'Size dependent scaling not implemented'", "\n", "\n", "# Collect masks computed under different transformations", "\n", "masks_ts", "=", "[", "]", "\n", "\n", "# Compute masks for the original image (identity transform)", "\n", "im_scales_i", "=", "im_conv_body_only", "(", "model", ",", "im", ")", "\n", "masks_i", "=", "im_detect_mask", "(", "model", ",", "im_scales_i", ",", "boxes", ")", "\n", "masks_ts", ".", "append", "(", "masks_i", ")", "\n", "\n", "# Perform mask detection on the horizontally flipped image", "\n", "if", "cfg", ".", "TEST", ".", "MASK_AUG", ".", "H_FLIP", ":", "\n", "        ", "masks_hf", "=", "im_detect_mask_hflip", "(", "model", ",", "im", ",", "boxes", ")", "\n", "masks_ts", ".", "append", "(", "masks_hf", ")", "\n", "\n", "# Compute detections at different scales", "\n", "", "for", "scale", "in", "cfg", ".", "TEST", ".", "MASK_AUG", ".", "SCALES", ":", "\n", "        ", "max_size", "=", "cfg", ".", "TEST", ".", "MASK_AUG", ".", "MAX_SIZE", "\n", "masks_scl", "=", "im_detect_mask_scale", "(", "model", ",", "im", ",", "scale", ",", "max_size", ",", "boxes", ")", "\n", "masks_ts", ".", "append", "(", "masks_scl", ")", "\n", "\n", "if", "cfg", ".", "TEST", ".", "MASK_AUG", ".", "SCALE_H_FLIP", ":", "\n", "            ", "masks_scl_hf", "=", "im_detect_mask_scale", "(", "\n", "model", ",", "im", ",", "scale", ",", "max_size", ",", "boxes", ",", "hflip", "=", "True", "\n", ")", "\n", "masks_ts", ".", "append", "(", "masks_scl_hf", ")", "\n", "\n", "# Compute masks at different aspect ratios", "\n", "", "", "for", "aspect_ratio", "in", "cfg", ".", "TEST", ".", "MASK_AUG", ".", "ASPECT_RATIOS", ":", "\n", "        ", "masks_ar", "=", "im_detect_mask_aspect_ratio", "(", "model", ",", "im", ",", "aspect_ratio", ",", "boxes", ")", "\n", "masks_ts", ".", "append", "(", "masks_ar", ")", "\n", "\n", "if", "cfg", ".", "TEST", ".", "MASK_AUG", ".", "ASPECT_RATIO_H_FLIP", ":", "\n", "            ", "masks_ar_hf", "=", "im_detect_mask_aspect_ratio", "(", "\n", "model", ",", "im", ",", "aspect_ratio", ",", "boxes", ",", "hflip", "=", "True", "\n", ")", "\n", "masks_ts", ".", "append", "(", "masks_ar_hf", ")", "\n", "\n", "# Combine the predicted soft masks", "\n", "", "", "if", "cfg", ".", "TEST", ".", "MASK_AUG", ".", "HEUR", "==", "'SOFT_AVG'", ":", "\n", "        ", "masks_c", "=", "np", ".", "mean", "(", "masks_ts", ",", "axis", "=", "0", ")", "\n", "", "elif", "cfg", ".", "TEST", ".", "MASK_AUG", ".", "HEUR", "==", "'SOFT_MAX'", ":", "\n", "        ", "masks_c", "=", "np", ".", "amax", "(", "masks_ts", ",", "axis", "=", "0", ")", "\n", "", "elif", "cfg", ".", "TEST", ".", "MASK_AUG", ".", "HEUR", "==", "'LOGIT_AVG'", ":", "\n", "\n", "        ", "def", "logit", "(", "y", ")", ":", "\n", "            ", "return", "-", "1.0", "*", "np", ".", "log", "(", "(", "1.0", "-", "y", ")", "/", "np", ".", "maximum", "(", "y", ",", "1e-20", ")", ")", "\n", "\n", "", "logit_masks", "=", "[", "logit", "(", "y", ")", "for", "y", "in", "masks_ts", "]", "\n", "logit_masks", "=", "np", ".", "mean", "(", "logit_masks", ",", "axis", "=", "0", ")", "\n", "masks_c", "=", "1.0", "/", "(", "1.0", "+", "np", ".", "exp", "(", "-", "logit_masks", ")", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\n", "'Heuristic {} not supported'", ".", "format", "(", "cfg", ".", "TEST", ".", "MASK_AUG", ".", "HEUR", ")", "\n", ")", "\n", "\n", "", "return", "masks_c", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test.im_detect_mask_hflip": [[475, 490], ["utils.flip_boxes", "test.im_conv_body_only", "test.im_detect_mask"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.boxes.flip_boxes", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test.im_conv_body_only", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test.im_detect_mask"], ["", "def", "im_detect_mask_hflip", "(", "model", ",", "im", ",", "boxes", ")", ":", "\n", "    ", "\"\"\"Performs mask detection on the horizontally flipped image.\n    Function signature is the same as for im_detect_mask_aug.\n    \"\"\"", "\n", "# Compute the masks for the flipped image", "\n", "im_hf", "=", "im", "[", ":", ",", ":", ":", "-", "1", ",", ":", "]", "\n", "boxes_hf", "=", "box_utils", ".", "flip_boxes", "(", "boxes", ",", "im", ".", "shape", "[", "1", "]", ")", "\n", "\n", "im_scales", "=", "im_conv_body_only", "(", "model", ",", "im_hf", ")", "\n", "masks_hf", "=", "im_detect_mask", "(", "model", ",", "im_scales", ",", "boxes_hf", ")", "\n", "\n", "# Invert the predicted soft masks", "\n", "masks_inv", "=", "masks_hf", "[", ":", ",", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "\n", "return", "masks_inv", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test.im_detect_mask_scale": [[492, 514], ["test.im_detect_mask_hflip", "test.im_conv_body_only", "test.im_detect_mask"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test.im_detect_mask_hflip", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test.im_conv_body_only", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test.im_detect_mask"], ["", "def", "im_detect_mask_scale", "(", "model", ",", "im", ",", "scale", ",", "max_size", ",", "boxes", ",", "hflip", "=", "False", ")", ":", "\n", "    ", "\"\"\"Computes masks at the given scale.\"\"\"", "\n", "\n", "# Remember the original scale", "\n", "orig_scales", "=", "cfg", ".", "TEST", ".", "SCALES", "\n", "orig_max_size", "=", "cfg", ".", "TEST", ".", "MAX_SIZE", "\n", "\n", "# Perform mask detection at the given scale", "\n", "cfg", ".", "TEST", ".", "SCALES", "=", "(", "scale", ",", ")", "\n", "cfg", ".", "TEST", ".", "MAX_SIZE", "=", "max_size", "\n", "\n", "if", "hflip", ":", "\n", "        ", "masks_scl", "=", "im_detect_mask_hflip", "(", "model", ",", "im", ",", "boxes", ")", "\n", "", "else", ":", "\n", "        ", "im_scales", "=", "im_conv_body_only", "(", "model", ",", "im", ")", "\n", "masks_scl", "=", "im_detect_mask", "(", "model", ",", "im_scales", ",", "boxes", ")", "\n", "\n", "# Restore the original scale", "\n", "", "cfg", ".", "TEST", ".", "SCALES", "=", "orig_scales", "\n", "cfg", ".", "TEST", ".", "MAX_SIZE", "=", "orig_max_size", "\n", "\n", "return", "masks_scl", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test.im_detect_mask_aspect_ratio": [[516, 530], ["utils.aspect_ratio_rel", "utils.aspect_ratio", "test.im_detect_mask_hflip", "test.im_conv_body_only", "test.im_detect_mask"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.image.aspect_ratio_rel", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.boxes.aspect_ratio", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test.im_detect_mask_hflip", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test.im_conv_body_only", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test.im_detect_mask"], ["", "def", "im_detect_mask_aspect_ratio", "(", "model", ",", "im", ",", "aspect_ratio", ",", "boxes", ",", "hflip", "=", "False", ")", ":", "\n", "    ", "\"\"\"Computes mask detections at the given width-relative aspect ratio.\"\"\"", "\n", "\n", "# Perform mask detection on the transformed image", "\n", "im_ar", "=", "image_utils", ".", "aspect_ratio_rel", "(", "im", ",", "aspect_ratio", ")", "\n", "boxes_ar", "=", "box_utils", ".", "aspect_ratio", "(", "boxes", ",", "aspect_ratio", ")", "\n", "\n", "if", "hflip", ":", "\n", "        ", "masks_ar", "=", "im_detect_mask_hflip", "(", "model", ",", "im_ar", ",", "boxes_ar", ")", "\n", "", "else", ":", "\n", "        ", "im_scales", "=", "im_conv_body_only", "(", "model", ",", "im_ar", ")", "\n", "masks_ar", "=", "im_detect_mask", "(", "model", ",", "im_scales", ",", "boxes_ar", ")", "\n", "\n", "", "return", "masks_ar", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test.im_detect_keypoints": [[532, 574], ["inputs.items", "caffe2.python.workspace.RunNet", "caffe2.python.workspace.FetchBlob().squeeze", "len", "numpy.zeros", "test._get_rois_blob", "test._add_multilevel_rois_for_test", "caffe2.python.workspace.FeedBlob", "numpy.expand_dims", "caffe2.python.core.ScopedName", "model.keypoint_net.Proto", "caffe2.python.workspace.FetchBlob", "caffe2.python.core.ScopedName"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.blob.zeros", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test._get_rois_blob", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test._add_multilevel_rois_for_test"], ["", "def", "im_detect_keypoints", "(", "model", ",", "im_scales", ",", "boxes", ")", ":", "\n", "    ", "\"\"\"Infer instance keypoint poses. This function must be called after\n    im_detect_bbox as it assumes that the Caffe2 workspace is already populated\n    with the necessary blobs.\n\n    Arguments:\n        model (DetectionModelHelper): the detection model to use\n        im_scales (list): image blob scales as returned by im_detect_bbox\n        boxes (ndarray): R x 4 array of bounding box detections (e.g., as\n            returned by im_detect_bbox)\n\n    Returns:\n        pred_heatmaps (ndarray): R x J x M x M array of keypoint location\n            logits (softmax inputs) for each of the J keypoint types output\n            by the network (must be processed by keypoint_results to convert\n            into point predictions in the original image coordinate space)\n    \"\"\"", "\n", "assert", "len", "(", "im_scales", ")", "==", "1", ",", "'Only single-image / single-scale batch implemented'", "\n", "\n", "M", "=", "cfg", ".", "KRCNN", ".", "HEATMAP_SIZE", "\n", "if", "boxes", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "        ", "pred_heatmaps", "=", "np", ".", "zeros", "(", "(", "0", ",", "cfg", ".", "KRCNN", ".", "NUM_KEYPOINTS", ",", "M", ",", "M", ")", ",", "np", ".", "float32", ")", "\n", "return", "pred_heatmaps", "\n", "\n", "", "inputs", "=", "{", "'keypoint_rois'", ":", "_get_rois_blob", "(", "boxes", ",", "im_scales", ")", "}", "\n", "\n", "# Add multi-level rois for FPN", "\n", "if", "cfg", ".", "FPN", ".", "MULTILEVEL_ROIS", ":", "\n", "        ", "_add_multilevel_rois_for_test", "(", "inputs", ",", "'keypoint_rois'", ")", "\n", "\n", "", "for", "k", ",", "v", "in", "inputs", ".", "items", "(", ")", ":", "\n", "        ", "workspace", ".", "FeedBlob", "(", "core", ".", "ScopedName", "(", "k", ")", ",", "v", ")", "\n", "", "workspace", ".", "RunNet", "(", "model", ".", "keypoint_net", ".", "Proto", "(", ")", ".", "name", ")", "\n", "\n", "pred_heatmaps", "=", "workspace", ".", "FetchBlob", "(", "core", ".", "ScopedName", "(", "'kps_score'", ")", ")", ".", "squeeze", "(", ")", "\n", "\n", "# In case of 1", "\n", "if", "pred_heatmaps", ".", "ndim", "==", "3", ":", "\n", "        ", "pred_heatmaps", "=", "np", ".", "expand_dims", "(", "pred_heatmaps", ",", "axis", "=", "0", ")", "\n", "\n", "", "return", "pred_heatmaps", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test.im_detect_keypoints_aug": [[576, 659], ["test.im_conv_body_only", "test.im_detect_keypoints", "test.im_detect_keypoints_aug.add_heatmaps_t"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test.im_conv_body_only", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test.im_detect_keypoints"], ["", "def", "im_detect_keypoints_aug", "(", "model", ",", "im", ",", "boxes", ")", ":", "\n", "    ", "\"\"\"Computes keypoint predictions with test-time augmentations.\n\n    Arguments:\n        model (DetectionModelHelper): the detection model to use\n        im (ndarray): BGR image to test\n        boxes (ndarray): R x 4 array of bounding boxes\n\n    Returns:\n        heatmaps (ndarray): R x J x M x M array of keypoint location logits\n    \"\"\"", "\n", "\n", "# Collect heatmaps predicted under different transformations", "\n", "heatmaps_ts", "=", "[", "]", "\n", "# Tag predictions computed under downscaling and upscaling transformations", "\n", "ds_ts", "=", "[", "]", "\n", "us_ts", "=", "[", "]", "\n", "\n", "def", "add_heatmaps_t", "(", "heatmaps_t", ",", "ds_t", "=", "False", ",", "us_t", "=", "False", ")", ":", "\n", "        ", "heatmaps_ts", ".", "append", "(", "heatmaps_t", ")", "\n", "ds_ts", ".", "append", "(", "ds_t", ")", "\n", "us_ts", ".", "append", "(", "us_t", ")", "\n", "\n", "# Compute the heatmaps for the original image (identity transform)", "\n", "", "im_scales", "=", "im_conv_body_only", "(", "model", ",", "im", ")", "\n", "heatmaps_i", "=", "im_detect_keypoints", "(", "model", ",", "im_scales", ",", "boxes", ")", "\n", "add_heatmaps_t", "(", "heatmaps_i", ")", "\n", "\n", "# Perform keypoints detection on the horizontally flipped image", "\n", "if", "cfg", ".", "TEST", ".", "KPS_AUG", ".", "H_FLIP", ":", "\n", "        ", "heatmaps_hf", "=", "im_detect_keypoints_hflip", "(", "model", ",", "im", ",", "boxes", ")", "\n", "add_heatmaps_t", "(", "heatmaps_hf", ")", "\n", "\n", "# Compute detections at different scales", "\n", "", "for", "scale", "in", "cfg", ".", "TEST", ".", "KPS_AUG", ".", "SCALES", ":", "\n", "        ", "ds_scl", "=", "scale", "<", "cfg", ".", "TEST", ".", "SCALES", "[", "0", "]", "\n", "us_scl", "=", "scale", ">", "cfg", ".", "TEST", ".", "SCALES", "[", "0", "]", "\n", "heatmaps_scl", "=", "im_detect_keypoints_scale", "(", "\n", "model", ",", "im", ",", "scale", ",", "cfg", ".", "TEST", ".", "KPS_AUG", ".", "MAX_SIZE", ",", "boxes", "\n", ")", "\n", "add_heatmaps_t", "(", "heatmaps_scl", ",", "ds_scl", ",", "us_scl", ")", "\n", "\n", "if", "cfg", ".", "TEST", ".", "KPS_AUG", ".", "SCALE_H_FLIP", ":", "\n", "            ", "heatmaps_scl_hf", "=", "im_detect_keypoints_scale", "(", "\n", "model", ",", "im", ",", "scale", ",", "cfg", ".", "TEST", ".", "KPS_AUG", ".", "MAX_SIZE", ",", "boxes", ",", "hflip", "=", "True", "\n", ")", "\n", "add_heatmaps_t", "(", "heatmaps_scl_hf", ",", "ds_scl", ",", "us_scl", ")", "\n", "\n", "# Compute keypoints at different aspect ratios", "\n", "", "", "for", "aspect_ratio", "in", "cfg", ".", "TEST", ".", "KPS_AUG", ".", "ASPECT_RATIOS", ":", "\n", "        ", "heatmaps_ar", "=", "im_detect_keypoints_aspect_ratio", "(", "\n", "model", ",", "im", ",", "aspect_ratio", ",", "boxes", "\n", ")", "\n", "add_heatmaps_t", "(", "heatmaps_ar", ")", "\n", "\n", "if", "cfg", ".", "TEST", ".", "KPS_AUG", ".", "ASPECT_RATIO_H_FLIP", ":", "\n", "            ", "heatmaps_ar_hf", "=", "im_detect_keypoints_aspect_ratio", "(", "\n", "model", ",", "im", ",", "aspect_ratio", ",", "boxes", ",", "hflip", "=", "True", "\n", ")", "\n", "add_heatmaps_t", "(", "heatmaps_ar_hf", ")", "\n", "\n", "# Select the heuristic function for combining the heatmaps", "\n", "", "", "if", "cfg", ".", "TEST", ".", "KPS_AUG", ".", "HEUR", "==", "'HM_AVG'", ":", "\n", "        ", "np_f", "=", "np", ".", "mean", "\n", "", "elif", "cfg", ".", "TEST", ".", "KPS_AUG", ".", "HEUR", "==", "'HM_MAX'", ":", "\n", "        ", "np_f", "=", "np", ".", "amax", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\n", "'Heuristic {} not supported'", ".", "format", "(", "cfg", ".", "TEST", ".", "KPS_AUG", ".", "HEUR", ")", "\n", ")", "\n", "\n", "", "def", "heur_f", "(", "hms_ts", ")", ":", "\n", "        ", "return", "np_f", "(", "hms_ts", ",", "axis", "=", "0", ")", "\n", "\n", "# Combine the heatmaps", "\n", "", "if", "cfg", ".", "TEST", ".", "KPS_AUG", ".", "SCALE_SIZE_DEP", ":", "\n", "        ", "heatmaps_c", "=", "combine_heatmaps_size_dep", "(", "\n", "heatmaps_ts", ",", "ds_ts", ",", "us_ts", ",", "boxes", ",", "heur_f", "\n", ")", "\n", "", "else", ":", "\n", "        ", "heatmaps_c", "=", "heur_f", "(", "heatmaps_ts", ")", "\n", "\n", "", "return", "heatmaps_c", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test.im_detect_keypoints_hflip": [[661, 676], ["utils.flip_boxes", "test.im_conv_body_only", "test.im_detect_keypoints", "utils.flip_heatmaps"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.boxes.flip_boxes", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test.im_conv_body_only", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test.im_detect_keypoints", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.keypoints.flip_heatmaps"], ["", "def", "im_detect_keypoints_hflip", "(", "model", ",", "im", ",", "boxes", ")", ":", "\n", "    ", "\"\"\"Computes keypoint predictions on the horizontally flipped image.\n    Function signature is the same as for im_detect_keypoints_aug.\n    \"\"\"", "\n", "# Compute keypoints for the flipped image", "\n", "im_hf", "=", "im", "[", ":", ",", ":", ":", "-", "1", ",", ":", "]", "\n", "boxes_hf", "=", "box_utils", ".", "flip_boxes", "(", "boxes", ",", "im", ".", "shape", "[", "1", "]", ")", "\n", "\n", "im_scales", "=", "im_conv_body_only", "(", "model", ",", "im_hf", ")", "\n", "heatmaps_hf", "=", "im_detect_keypoints", "(", "model", ",", "im_scales", ",", "boxes_hf", ")", "\n", "\n", "# Invert the predicted keypoints", "\n", "heatmaps_inv", "=", "keypoint_utils", ".", "flip_heatmaps", "(", "heatmaps_hf", ")", "\n", "\n", "return", "heatmaps_inv", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test.im_detect_keypoints_scale": [[678, 700], ["test.im_detect_keypoints_hflip", "test.im_conv_body_only", "test.im_detect_keypoints", "core.config.cfg.TEST.KPS_AUG.MAX_SIZE", "core.config.cfg.TEST.KPS_AUG.MAX_SIZE"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test.im_detect_keypoints_hflip", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test.im_conv_body_only", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test.im_detect_keypoints"], ["", "def", "im_detect_keypoints_scale", "(", "model", ",", "im", ",", "scale", ",", "max_size", ",", "boxes", ",", "hflip", "=", "False", ")", ":", "\n", "    ", "\"\"\"Computes keypoint predictions at the given scale.\"\"\"", "\n", "\n", "# Store the original scale", "\n", "orig_scales", "=", "cfg", ".", "TEST", ".", "SCALES", "\n", "orig_max_size", "=", "cfg", ".", "TEST", ".", "MAX_SIZE", "\n", "\n", "# Perform detection at the given scale", "\n", "cfg", ".", "TEST", ".", "SCALES", "=", "(", "scale", ",", ")", "\n", "cfg", ".", "TEST", ".", "MAX_SIZE", "=", "max_size", "\n", "\n", "if", "hflip", ":", "\n", "        ", "heatmaps_scl", "=", "im_detect_keypoints_hflip", "(", "model", ",", "im", ",", "boxes", ")", "\n", "", "else", ":", "\n", "        ", "im_scales", "=", "im_conv_body_only", "(", "model", ",", "im", ")", "\n", "heatmaps_scl", "=", "im_detect_keypoints", "(", "model", ",", "im_scales", ",", "boxes", ")", "\n", "\n", "# Restore the original scale", "\n", "", "cfg", ".", "TEST", ".", "SCALES", "=", "orig_scales", "\n", "cfg", ".", "TEST", ".", "MAX_SIZE", "=", "orig_max_size", "\n", "\n", "return", "heatmaps_scl", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test.im_detect_keypoints_aspect_ratio": [[702, 718], ["utils.aspect_ratio_rel", "utils.aspect_ratio", "test.im_detect_keypoints_hflip", "test.im_conv_body_only", "test.im_detect_keypoints"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.image.aspect_ratio_rel", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.boxes.aspect_ratio", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test.im_detect_keypoints_hflip", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test.im_conv_body_only", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test.im_detect_keypoints"], ["", "def", "im_detect_keypoints_aspect_ratio", "(", "\n", "model", ",", "im", ",", "aspect_ratio", ",", "boxes", ",", "hflip", "=", "False", "\n", ")", ":", "\n", "    ", "\"\"\"Detects keypoints at the given width-relative aspect ratio.\"\"\"", "\n", "\n", "# Perform keypoint detectionon the transformed image", "\n", "im_ar", "=", "image_utils", ".", "aspect_ratio_rel", "(", "im", ",", "aspect_ratio", ")", "\n", "boxes_ar", "=", "box_utils", ".", "aspect_ratio", "(", "boxes", ",", "aspect_ratio", ")", "\n", "\n", "if", "hflip", ":", "\n", "        ", "heatmaps_ar", "=", "im_detect_keypoints_hflip", "(", "model", ",", "im_ar", ",", "boxes_ar", ")", "\n", "", "else", ":", "\n", "        ", "im_scales", "=", "im_conv_body_only", "(", "model", ",", "im_ar", ")", "\n", "heatmaps_ar", "=", "im_detect_keypoints", "(", "model", ",", "im_scales", ",", "boxes_ar", ")", "\n", "\n", "", "return", "heatmaps_ar", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test.combine_heatmaps_size_dep": [[720, 746], ["utils.boxes_area", "numpy.zeros_like", "range", "zip", "test.im_detect_keypoints_aug.heur_f", "len", "len", "len", "len", "hms_to_combine.append"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.boxes.boxes_area"], ["", "def", "combine_heatmaps_size_dep", "(", "hms_ts", ",", "ds_ts", ",", "us_ts", ",", "boxes", ",", "heur_f", ")", ":", "\n", "    ", "\"\"\"Combines heatmaps while taking object sizes into account.\"\"\"", "\n", "assert", "len", "(", "hms_ts", ")", "==", "len", "(", "ds_ts", ")", "and", "len", "(", "ds_ts", ")", "==", "len", "(", "us_ts", ")", ",", "'All sets of hms must be tagged with downscaling and upscaling flags'", "\n", "\n", "# Classify objects into small+medium and large based on their box areas", "\n", "areas", "=", "box_utils", ".", "boxes_area", "(", "boxes", ")", "\n", "sm_objs", "=", "areas", "<", "cfg", ".", "TEST", ".", "KPS_AUG", ".", "AREA_TH", "\n", "l_objs", "=", "areas", ">=", "cfg", ".", "TEST", ".", "KPS_AUG", ".", "AREA_TH", "\n", "\n", "# Combine heatmaps computed under different transformations for each object", "\n", "hms_c", "=", "np", ".", "zeros_like", "(", "hms_ts", "[", "0", "]", ")", "\n", "\n", "for", "i", "in", "range", "(", "hms_c", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "hms_to_combine", "=", "[", "]", "\n", "for", "hms_t", ",", "ds_t", ",", "us_t", "in", "zip", "(", "hms_ts", ",", "ds_ts", ",", "us_ts", ")", ":", "\n", "# Discard downscaling predictions for small and medium objects", "\n", "            ", "if", "sm_objs", "[", "i", "]", "and", "ds_t", ":", "\n", "                ", "continue", "\n", "# Discard upscaling predictions for large objects", "\n", "", "if", "l_objs", "[", "i", "]", "and", "us_t", ":", "\n", "                ", "continue", "\n", "", "hms_to_combine", ".", "append", "(", "hms_t", "[", "i", "]", ")", "\n", "", "hms_c", "[", "i", "]", "=", "heur_f", "(", "hms_to_combine", ")", "\n", "\n", "", "return", "hms_c", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test.box_results_with_nms_and_limit": [[748, 812], ["range", "numpy.vstack", "numpy.hstack().astype", "numpy.hstack", "range", "numpy.where", "len", "utils.soft_nms", "utils.nms", "utils.box_voting", "len", "range", "numpy.hstack", "numpy.sort", "range", "range", "numpy.where"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.boxes.soft_nms", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.boxes.nms", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.boxes.box_voting"], ["", "def", "box_results_with_nms_and_limit", "(", "scores", ",", "boxes", ")", ":", "\n", "    ", "\"\"\"Returns bounding-box detection results by thresholding on scores and\n    applying non-maximum suppression (NMS).\n\n    `boxes` has shape (#detections, 4 * #classes), where each row represents\n    a list of predicted bounding boxes for each of the object classes in the\n    dataset (including the background class). The detections in each row\n    originate from the same object proposal.\n\n    `scores` has shape (#detection, #classes), where each row represents a list\n    of object detection confidence scores for each of the object classes in the\n    dataset (including the background class). `scores[i, j]`` corresponds to the\n    box at `boxes[i, j * 4:(j + 1) * 4]`.\n    \"\"\"", "\n", "num_classes", "=", "cfg", ".", "MODEL", ".", "NUM_CLASSES", "\n", "cls_boxes", "=", "[", "[", "]", "for", "_", "in", "range", "(", "num_classes", ")", "]", "\n", "# Apply threshold on detection probabilities and apply NMS", "\n", "# Skip j = 0, because it's the background class", "\n", "for", "j", "in", "range", "(", "1", ",", "num_classes", ")", ":", "\n", "        ", "inds", "=", "np", ".", "where", "(", "scores", "[", ":", ",", "j", "]", ">", "cfg", ".", "TEST", ".", "SCORE_THRESH", ")", "[", "0", "]", "\n", "scores_j", "=", "scores", "[", "inds", ",", "j", "]", "\n", "boxes_j", "=", "boxes", "[", "inds", ",", "j", "*", "4", ":", "(", "j", "+", "1", ")", "*", "4", "]", "\n", "dets_j", "=", "np", ".", "hstack", "(", "(", "boxes_j", ",", "scores_j", "[", ":", ",", "np", ".", "newaxis", "]", ")", ")", ".", "astype", "(", "\n", "np", ".", "float32", ",", "copy", "=", "False", "\n", ")", "\n", "if", "len", "(", "inds", ")", ">", "0", ":", "\n", "            ", "pass", "\n", "", "if", "cfg", ".", "TEST", ".", "SOFT_NMS", ".", "ENABLED", ":", "\n", "            ", "nms_dets", ",", "_", "=", "box_utils", ".", "soft_nms", "(", "\n", "dets_j", ",", "\n", "sigma", "=", "cfg", ".", "TEST", ".", "SOFT_NMS", ".", "SIGMA", ",", "\n", "overlap_thresh", "=", "cfg", ".", "TEST", ".", "NMS", ",", "\n", "score_thresh", "=", "0.0001", ",", "\n", "method", "=", "cfg", ".", "TEST", ".", "SOFT_NMS", ".", "METHOD", "\n", ")", "\n", "", "else", ":", "\n", "            ", "keep", "=", "box_utils", ".", "nms", "(", "dets_j", ",", "cfg", ".", "TEST", ".", "NMS", ")", "\n", "nms_dets", "=", "dets_j", "[", "keep", ",", ":", "]", "\n", "\n", "# Refine the post-NMS boxes using bounding-box voting", "\n", "", "if", "cfg", ".", "TEST", ".", "BBOX_VOTE", ".", "ENABLED", ":", "\n", "            ", "nms_dets", "=", "box_utils", ".", "box_voting", "(", "\n", "nms_dets", ",", "\n", "dets_j", ",", "\n", "cfg", ".", "TEST", ".", "BBOX_VOTE", ".", "VOTE_TH", ",", "\n", "scoring_method", "=", "cfg", ".", "TEST", ".", "BBOX_VOTE", ".", "SCORING_METHOD", "\n", ")", "\n", "", "cls_boxes", "[", "j", "]", "=", "nms_dets", "\n", "\n", "# Limit to max_per_image detections **over all classes**", "\n", "", "if", "cfg", ".", "TEST", ".", "DETECTIONS_PER_IM", ">", "0", ":", "\n", "        ", "image_scores", "=", "np", ".", "hstack", "(", "\n", "[", "cls_boxes", "[", "j", "]", "[", ":", ",", "-", "1", "]", "for", "j", "in", "range", "(", "1", ",", "num_classes", ")", "]", "\n", ")", "\n", "if", "len", "(", "image_scores", ")", ">", "cfg", ".", "TEST", ".", "DETECTIONS_PER_IM", ":", "\n", "            ", "image_thresh", "=", "np", ".", "sort", "(", "image_scores", ")", "[", "-", "cfg", ".", "TEST", ".", "DETECTIONS_PER_IM", "]", "\n", "for", "j", "in", "range", "(", "1", ",", "num_classes", ")", ":", "\n", "                ", "keep", "=", "np", ".", "where", "(", "cls_boxes", "[", "j", "]", "[", ":", ",", "-", "1", "]", ">=", "image_thresh", ")", "[", "0", "]", "\n", "cls_boxes", "[", "j", "]", "=", "cls_boxes", "[", "j", "]", "[", "keep", ",", ":", "]", "\n", "\n", "", "", "", "im_results", "=", "np", ".", "vstack", "(", "[", "cls_boxes", "[", "j", "]", "for", "j", "in", "range", "(", "1", ",", "num_classes", ")", "]", ")", "\n", "boxes", "=", "im_results", "[", ":", ",", ":", "-", "1", "]", "\n", "scores", "=", "im_results", "[", ":", ",", "-", "1", "]", "\n", "return", "scores", ",", "boxes", ",", "cls_boxes", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test.segm_results": [[814, 870], ["utils.expand_boxes", "ref_boxes.astype.astype", "numpy.zeros", "range", "range", "range", "numpy.maximum", "numpy.maximum", "cv2.resize", "numpy.array", "numpy.zeros", "max", "min", "max", "min", "segms.append", "pycocotools.encode", "numpy.array"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.boxes.expand_boxes", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.blob.zeros", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.blob.zeros"], ["", "def", "segm_results", "(", "cls_boxes", ",", "masks", ",", "ref_boxes", ",", "im_h", ",", "im_w", ")", ":", "\n", "    ", "num_classes", "=", "cfg", ".", "MODEL", ".", "NUM_CLASSES", "\n", "cls_segms", "=", "[", "[", "]", "for", "_", "in", "range", "(", "num_classes", ")", "]", "\n", "mask_ind", "=", "0", "\n", "# To work around an issue with cv2.resize (it seems to automatically pad", "\n", "# with repeated border values), we manually zero-pad the masks by 1 pixel", "\n", "# prior to resizing back to the original image resolution. This prevents", "\n", "# \"top hat\" artifacts. We therefore need to expand the reference boxes by an", "\n", "# appropriate factor.", "\n", "M", "=", "cfg", ".", "MRCNN", ".", "RESOLUTION", "\n", "scale", "=", "(", "M", "+", "2.0", ")", "/", "M", "\n", "ref_boxes", "=", "box_utils", ".", "expand_boxes", "(", "ref_boxes", ",", "scale", ")", "\n", "ref_boxes", "=", "ref_boxes", ".", "astype", "(", "np", ".", "int32", ")", "\n", "padded_mask", "=", "np", ".", "zeros", "(", "(", "M", "+", "2", ",", "M", "+", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "# skip j = 0, because it's the background class", "\n", "for", "j", "in", "range", "(", "1", ",", "num_classes", ")", ":", "\n", "        ", "segms", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "cls_boxes", "[", "j", "]", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "if", "cfg", ".", "MRCNN", ".", "CLS_SPECIFIC_MASK", ":", "\n", "                ", "padded_mask", "[", "1", ":", "-", "1", ",", "1", ":", "-", "1", "]", "=", "masks", "[", "mask_ind", ",", "j", ",", ":", ",", ":", "]", "\n", "", "else", ":", "\n", "                ", "padded_mask", "[", "1", ":", "-", "1", ",", "1", ":", "-", "1", "]", "=", "masks", "[", "mask_ind", ",", "0", ",", ":", ",", ":", "]", "\n", "\n", "", "ref_box", "=", "ref_boxes", "[", "mask_ind", ",", ":", "]", "\n", "w", "=", "ref_box", "[", "2", "]", "-", "ref_box", "[", "0", "]", "+", "1", "\n", "h", "=", "ref_box", "[", "3", "]", "-", "ref_box", "[", "1", "]", "+", "1", "\n", "w", "=", "np", ".", "maximum", "(", "w", ",", "1", ")", "\n", "h", "=", "np", ".", "maximum", "(", "h", ",", "1", ")", "\n", "\n", "mask", "=", "cv2", ".", "resize", "(", "padded_mask", ",", "(", "w", ",", "h", ")", ")", "\n", "mask", "=", "np", ".", "array", "(", "mask", ">", "cfg", ".", "MRCNN", ".", "THRESH_BINARIZE", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "im_mask", "=", "np", ".", "zeros", "(", "(", "im_h", ",", "im_w", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "x_0", "=", "max", "(", "ref_box", "[", "0", "]", ",", "0", ")", "\n", "x_1", "=", "min", "(", "ref_box", "[", "2", "]", "+", "1", ",", "im_w", ")", "\n", "y_0", "=", "max", "(", "ref_box", "[", "1", "]", ",", "0", ")", "\n", "y_1", "=", "min", "(", "ref_box", "[", "3", "]", "+", "1", ",", "im_h", ")", "\n", "\n", "im_mask", "[", "y_0", ":", "y_1", ",", "x_0", ":", "x_1", "]", "=", "mask", "[", "\n", "(", "y_0", "-", "ref_box", "[", "1", "]", ")", ":", "(", "y_1", "-", "ref_box", "[", "1", "]", ")", ",", "\n", "(", "x_0", "-", "ref_box", "[", "0", "]", ")", ":", "(", "x_1", "-", "ref_box", "[", "0", "]", ")", "\n", "]", "\n", "\n", "# Get RLE encoding used by the COCO evaluation API", "\n", "rle", "=", "mask_util", ".", "encode", "(", "\n", "np", ".", "array", "(", "im_mask", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", ",", "order", "=", "'F'", ")", "\n", ")", "[", "0", "]", "\n", "segms", ".", "append", "(", "rle", ")", "\n", "\n", "mask_ind", "+=", "1", "\n", "\n", "", "cls_segms", "[", "j", "]", "=", "segms", "\n", "\n", "", "assert", "mask_ind", "==", "masks", ".", "shape", "[", "0", "]", "\n", "return", "cls_segms", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test.keypoint_results": [[872, 889], ["utils.get_person_class_index", "utils.heatmaps_to_keypoints", "utils.nms_oks", "range", "range"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.keypoints.get_person_class_index", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.keypoints.heatmaps_to_keypoints", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.keypoints.nms_oks"], ["", "def", "keypoint_results", "(", "cls_boxes", ",", "pred_heatmaps", ",", "ref_boxes", ")", ":", "\n", "    ", "num_classes", "=", "cfg", ".", "MODEL", ".", "NUM_CLASSES", "\n", "cls_keyps", "=", "[", "[", "]", "for", "_", "in", "range", "(", "num_classes", ")", "]", "\n", "person_idx", "=", "keypoint_utils", ".", "get_person_class_index", "(", ")", "\n", "xy_preds", "=", "keypoint_utils", ".", "heatmaps_to_keypoints", "(", "pred_heatmaps", ",", "ref_boxes", ")", "\n", "\n", "# NMS OKS", "\n", "if", "cfg", ".", "KRCNN", ".", "NMS_OKS", ":", "\n", "        ", "keep", "=", "keypoint_utils", ".", "nms_oks", "(", "xy_preds", ",", "ref_boxes", ",", "0.3", ")", "\n", "xy_preds", "=", "xy_preds", "[", "keep", ",", ":", ",", ":", "]", "\n", "ref_boxes", "=", "ref_boxes", "[", "keep", ",", ":", "]", "\n", "pred_heatmaps", "=", "pred_heatmaps", "[", "keep", ",", ":", ",", ":", ",", ":", "]", "\n", "cls_boxes", "[", "person_idx", "]", "=", "cls_boxes", "[", "person_idx", "]", "[", "keep", ",", ":", "]", "\n", "\n", "", "kps", "=", "[", "xy_preds", "[", "i", "]", "for", "i", "in", "range", "(", "xy_preds", ".", "shape", "[", "0", "]", ")", "]", "\n", "cls_keyps", "[", "person_idx", "]", "=", "kps", "\n", "return", "cls_keyps", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test._get_image_blob": [[891, 907], ["utils.prep_im_for_blob", "utils.im_list_to_blob", "numpy.array"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.blob.prep_im_for_blob", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.blob.im_list_to_blob"], ["", "def", "_get_image_blob", "(", "im", ")", ":", "\n", "    ", "\"\"\"Converts an image into a network input.\n\n    Arguments:\n        im (ndarray): a color image in BGR order\n\n    Returns:\n        blob (ndarray): a data blob holding an image pyramid\n        im_scale_factors (ndarray): array of image scales (relative to im) used\n            in the image pyramid\n    \"\"\"", "\n", "processed_ims", ",", "im_scale_factors", "=", "blob_utils", ".", "prep_im_for_blob", "(", "\n", "im", ",", "cfg", ".", "PIXEL_MEANS", ",", "cfg", ".", "TEST", ".", "SCALES", ",", "cfg", ".", "TEST", ".", "MAX_SIZE", "\n", ")", "\n", "blob", "=", "blob_utils", ".", "im_list_to_blob", "(", "processed_ims", ")", "\n", "return", "blob", ",", "np", ".", "array", "(", "im_scale_factors", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test._get_rois_blob": [[909, 923], ["test._project_im_rois", "numpy.hstack", "np.hstack.astype"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test._project_im_rois"], ["", "def", "_get_rois_blob", "(", "im_rois", ",", "im_scale_factors", ")", ":", "\n", "    ", "\"\"\"Converts RoIs into network inputs.\n\n    Arguments:\n        im_rois (ndarray): R x 4 matrix of RoIs in original image coordinates\n        im_scale_factors (list): scale factors as returned by _get_image_blob\n\n    Returns:\n        blob (ndarray): R x 5 matrix of RoIs in the image pyramid with columns\n            [level, x1, y1, x2, y2]\n    \"\"\"", "\n", "rois", ",", "levels", "=", "_project_im_rois", "(", "im_rois", ",", "im_scale_factors", ")", "\n", "rois_blob", "=", "np", ".", "hstack", "(", "(", "levels", ",", "rois", ")", ")", "\n", "return", "rois_blob", ".", "astype", "(", "np", ".", "float32", ",", "copy", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test._project_im_rois": [[925, 952], ["im_rois.astype.astype", "len", "numpy.abs", "numpy.zeros", "np.abs.argmin"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.blob.zeros"], ["", "def", "_project_im_rois", "(", "im_rois", ",", "scales", ")", ":", "\n", "    ", "\"\"\"Project image RoIs into the image pyramid built by _get_image_blob.\n\n    Arguments:\n        im_rois (ndarray): R x 4 matrix of RoIs in original image coordinates\n        scales (list): scale factors as returned by _get_image_blob\n\n    Returns:\n        rois (ndarray): R x 4 matrix of projected RoI coordinates\n        levels (ndarray): image pyramid levels used by each projected RoI\n    \"\"\"", "\n", "im_rois", "=", "im_rois", ".", "astype", "(", "np", ".", "float", ",", "copy", "=", "False", ")", "\n", "\n", "if", "len", "(", "scales", ")", ">", "1", ":", "\n", "        ", "widths", "=", "im_rois", "[", ":", ",", "2", "]", "-", "im_rois", "[", ":", ",", "0", "]", "+", "1", "\n", "heights", "=", "im_rois", "[", ":", ",", "3", "]", "-", "im_rois", "[", ":", ",", "1", "]", "+", "1", "\n", "\n", "areas", "=", "widths", "*", "heights", "\n", "scaled_areas", "=", "areas", "[", ":", ",", "np", ".", "newaxis", "]", "*", "(", "scales", "[", "np", ".", "newaxis", ",", ":", "]", "**", "2", ")", "\n", "diff_areas", "=", "np", ".", "abs", "(", "scaled_areas", "-", "224", "*", "224", ")", "\n", "levels", "=", "diff_areas", ".", "argmin", "(", "axis", "=", "1", ")", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "", "else", ":", "\n", "        ", "levels", "=", "np", ".", "zeros", "(", "(", "im_rois", ".", "shape", "[", "0", "]", ",", "1", ")", ",", "dtype", "=", "np", ".", "int", ")", "\n", "\n", "", "rois", "=", "im_rois", "*", "scales", "[", "levels", "]", "\n", "\n", "return", "rois", ",", "levels", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test._add_multilevel_rois_for_test": [[954, 972], ["modeling.map_rois_to_fpn_levels", "modeling.add_multilevel_roi_blobs"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.FPN.map_rois_to_fpn_levels", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.FPN.add_multilevel_roi_blobs"], ["", "def", "_add_multilevel_rois_for_test", "(", "blobs", ",", "name", ")", ":", "\n", "    ", "\"\"\"Distributes a set of RoIs across FPN pyramid levels by creating new level\n    specific RoI blobs.\n\n    Arguments:\n        blobs (dict): dictionary of blobs\n        name (str): a key in 'blobs' identifying the source RoI blob\n\n    Returns:\n        [by ref] blobs (dict): new keys named by `name + 'fpn' + level`\n            are added to dict each with a value that's an R_level x 5 ndarray of\n            RoIs (see _get_rois_blob for format)\n    \"\"\"", "\n", "lvl_min", "=", "cfg", ".", "FPN", ".", "ROI_MIN_LEVEL", "\n", "lvl_max", "=", "cfg", ".", "FPN", ".", "ROI_MAX_LEVEL", "\n", "lvls", "=", "fpn", ".", "map_rois_to_fpn_levels", "(", "blobs", "[", "name", "]", "[", ":", ",", "1", ":", "5", "]", ",", "lvl_min", ",", "lvl_max", ")", "\n", "fpn", ".", "add_multilevel_roi_blobs", "(", "\n", "blobs", ",", "name", ",", "blobs", "[", "name", "]", ",", "lvls", ",", "lvl_min", ",", "lvl_max", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test._get_blobs": [[975, 986], ["test._get_image_blob", "numpy.array", "test._get_rois_blob"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test._get_image_blob", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test._get_rois_blob"], ["", "def", "_get_blobs", "(", "im", ",", "rois", ")", ":", "\n", "    ", "\"\"\"Convert an image and RoIs within that image into network inputs.\"\"\"", "\n", "blobs", "=", "{", "}", "\n", "blobs", "[", "'data'", "]", ",", "im_scale_factors", "=", "_get_image_blob", "(", "im", ")", "\n", "if", "cfg", ".", "MODEL", ".", "FASTER_RCNN", "and", "rois", "is", "None", ":", "\n", "        ", "height", ",", "width", "=", "blobs", "[", "'data'", "]", ".", "shape", "[", "2", "]", ",", "blobs", "[", "'data'", "]", ".", "shape", "[", "3", "]", "\n", "scale", "=", "im_scale_factors", "[", "0", "]", "\n", "blobs", "[", "'im_info'", "]", "=", "np", ".", "array", "(", "[", "[", "height", ",", "width", ",", "scale", "]", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "if", "rois", "is", "not", "None", ":", "\n", "        ", "blobs", "[", "'rois'", "]", "=", "_get_rois_blob", "(", "rois", ",", "im_scale_factors", ")", "\n", "", "return", "blobs", ",", "im_scale_factors", "\n", "", ""]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test_retinanet.create_cell_anchors": [[53, 80], ["range", "len", "numpy.zeros", "range", "modeling.generate_anchors.generate_anchors", "float"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.blob.zeros", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.generate_anchors.generate_anchors"], ["def", "create_cell_anchors", "(", ")", ":", "\n", "    ", "\"\"\"\n    Generate all types of anchors for all fpn levels/scales/aspect ratios.\n    This function is called only once at the beginning of inference.\n    \"\"\"", "\n", "k_max", ",", "k_min", "=", "cfg", ".", "FPN", ".", "RPN_MAX_LEVEL", ",", "cfg", ".", "FPN", ".", "RPN_MIN_LEVEL", "\n", "scales_per_octave", "=", "cfg", ".", "RETINANET", ".", "SCALES_PER_OCTAVE", "\n", "aspect_ratios", "=", "cfg", ".", "RETINANET", ".", "ASPECT_RATIOS", "\n", "anchor_scale", "=", "cfg", ".", "RETINANET", ".", "ANCHOR_SCALE", "\n", "A", "=", "scales_per_octave", "*", "len", "(", "aspect_ratios", ")", "\n", "anchors", "=", "{", "}", "\n", "for", "lvl", "in", "range", "(", "k_min", ",", "k_max", "+", "1", ")", ":", "\n", "# create cell anchors array", "\n", "        ", "stride", "=", "2.", "**", "lvl", "\n", "cell_anchors", "=", "np", ".", "zeros", "(", "(", "A", ",", "4", ")", ")", "\n", "a", "=", "0", "\n", "for", "octave", "in", "range", "(", "scales_per_octave", ")", ":", "\n", "            ", "octave_scale", "=", "2", "**", "(", "octave", "/", "float", "(", "scales_per_octave", ")", ")", "\n", "for", "aspect", "in", "aspect_ratios", ":", "\n", "                ", "anchor_sizes", "=", "(", "stride", "*", "octave_scale", "*", "anchor_scale", ",", ")", "\n", "anchor_aspect_ratios", "=", "(", "aspect", ",", ")", "\n", "cell_anchors", "[", "a", ",", ":", "]", "=", "generate_anchors", "(", "\n", "stride", "=", "stride", ",", "sizes", "=", "anchor_sizes", ",", "\n", "aspect_ratios", "=", "anchor_aspect_ratios", ")", "\n", "a", "+=", "1", "\n", "", "", "anchors", "[", "lvl", "]", "=", "cell_anchors", "\n", "", "return", "anchors", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test_retinanet.im_detections": [[82, 189], ["core.rpn_generator._get_image_blob", "range", "inputs.items", "caffe2.python.workspace.RunNet", "caffe2.python.workspace.FetchBlobs", "caffe2.python.workspace.FetchBlobs", "collections.defaultdict", "range", "collections.defaultdict.items", "numpy.vstack", "numpy.argsort", "len", "workspace.FetchBlobs.append", "workspace.FetchBlobs.append", "caffe2.python.workspace.FeedBlob", "cls_prob.reshape.reshape", "box_pred.reshape.reshape", "cls_prob.reshape.ravel", "min", "numpy.array().transpose", "numpy.column_stack().astype", "utils.clip_tiled_boxes", "numpy.zeros", "range", "numpy.vstack().astype", "utils.nms", "numpy.zeros", "out[].fill", "np.vstack.append", "caffe2.python.core.ScopedName", "caffe2.python.core.ScopedName", "caffe2.python.core.ScopedName", "v.astype", "model.net.Proto", "numpy.where", "len", "len", "numpy.argpartition", "numpy.vstack", "utils.bbox_transform", "int", "numpy.array", "numpy.column_stack", "numpy.where", "len", "boxes_all[].extend", "numpy.vstack", "len", "numpy.unravel_index", "zip"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test._get_image_blob", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.boxes.clip_tiled_boxes", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.blob.zeros", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.boxes.nms", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.blob.zeros", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.boxes.bbox_transform"], ["", "def", "im_detections", "(", "model", ",", "im", ",", "anchors", ")", ":", "\n", "    ", "\"\"\"Generate RetinaNet detections on a single image.\"\"\"", "\n", "k_max", ",", "k_min", "=", "cfg", ".", "FPN", ".", "RPN_MAX_LEVEL", ",", "cfg", ".", "FPN", ".", "RPN_MIN_LEVEL", "\n", "A", "=", "cfg", ".", "RETINANET", ".", "SCALES_PER_OCTAVE", "*", "len", "(", "cfg", ".", "RETINANET", ".", "ASPECT_RATIOS", ")", "\n", "inputs", "=", "{", "}", "\n", "inputs", "[", "'data'", "]", ",", "inputs", "[", "'im_info'", "]", "=", "_get_image_blob", "(", "im", ")", "\n", "cls_probs", ",", "box_preds", "=", "[", "]", ",", "[", "]", "\n", "for", "lvl", "in", "range", "(", "k_min", ",", "k_max", "+", "1", ")", ":", "\n", "        ", "suffix", "=", "'fpn{}'", ".", "format", "(", "lvl", ")", "\n", "cls_probs", ".", "append", "(", "core", ".", "ScopedName", "(", "'retnet_cls_prob_{}'", ".", "format", "(", "suffix", ")", ")", ")", "\n", "box_preds", ".", "append", "(", "core", ".", "ScopedName", "(", "'retnet_bbox_pred_{}'", ".", "format", "(", "suffix", ")", ")", ")", "\n", "", "for", "k", ",", "v", "in", "inputs", ".", "items", "(", ")", ":", "\n", "        ", "workspace", ".", "FeedBlob", "(", "core", ".", "ScopedName", "(", "k", ")", ",", "v", ".", "astype", "(", "np", ".", "float32", ",", "copy", "=", "False", ")", ")", "\n", "\n", "", "workspace", ".", "RunNet", "(", "model", ".", "net", ".", "Proto", "(", ")", ".", "name", ")", "\n", "scale", "=", "inputs", "[", "'im_info'", "]", "[", "0", ",", "2", "]", "\n", "cls_probs", "=", "workspace", ".", "FetchBlobs", "(", "cls_probs", ")", "\n", "box_preds", "=", "workspace", ".", "FetchBlobs", "(", "box_preds", ")", "\n", "\n", "# here the boxes_all are [x0, y0, x1, y1, score]", "\n", "boxes_all", "=", "defaultdict", "(", "list", ")", "\n", "\n", "cnt", "=", "0", "\n", "for", "lvl", "in", "range", "(", "k_min", ",", "k_max", "+", "1", ")", ":", "\n", "# create cell anchors array", "\n", "        ", "stride", "=", "2.", "**", "lvl", "\n", "cell_anchors", "=", "anchors", "[", "lvl", "]", "\n", "\n", "# fetch per level probability", "\n", "cls_prob", "=", "cls_probs", "[", "cnt", "]", "\n", "box_pred", "=", "box_preds", "[", "cnt", "]", "\n", "cls_prob", "=", "cls_prob", ".", "reshape", "(", "(", "\n", "cls_prob", ".", "shape", "[", "0", "]", ",", "A", ",", "int", "(", "cls_prob", ".", "shape", "[", "1", "]", "/", "A", ")", ",", "\n", "cls_prob", ".", "shape", "[", "2", "]", ",", "cls_prob", ".", "shape", "[", "3", "]", ")", ")", "\n", "box_pred", "=", "box_pred", ".", "reshape", "(", "(", "\n", "box_pred", ".", "shape", "[", "0", "]", ",", "A", ",", "4", ",", "box_pred", ".", "shape", "[", "2", "]", ",", "box_pred", ".", "shape", "[", "3", "]", ")", ")", "\n", "cnt", "+=", "1", "\n", "\n", "if", "cfg", ".", "RETINANET", ".", "SOFTMAX", ":", "\n", "            ", "cls_prob", "=", "cls_prob", "[", ":", ",", ":", ",", "1", ":", ":", ",", ":", ",", ":", "]", "\n", "\n", "", "cls_prob_ravel", "=", "cls_prob", ".", "ravel", "(", ")", "\n", "# In some cases [especially for very small img sizes], it's possible that", "\n", "# candidate_ind is empty if we impose threshold 0.05 at all levels. This", "\n", "# will lead to errors since no detections are found for this image. Hence,", "\n", "# for lvl 7 which has small spatial resolution, we take the threshold 0.0", "\n", "th", "=", "cfg", ".", "RETINANET", ".", "INFERENCE_TH", "if", "lvl", "<", "k_max", "else", "0.0", "\n", "candidate_inds", "=", "np", ".", "where", "(", "cls_prob_ravel", ">", "th", ")", "[", "0", "]", "\n", "if", "(", "len", "(", "candidate_inds", ")", "==", "0", ")", ":", "\n", "            ", "continue", "\n", "\n", "", "pre_nms_topn", "=", "min", "(", "cfg", ".", "RETINANET", ".", "PRE_NMS_TOP_N", ",", "len", "(", "candidate_inds", ")", ")", "\n", "inds", "=", "np", ".", "argpartition", "(", "\n", "cls_prob_ravel", "[", "candidate_inds", "]", ",", "-", "pre_nms_topn", ")", "[", "-", "pre_nms_topn", ":", "]", "\n", "inds", "=", "candidate_inds", "[", "inds", "]", "\n", "\n", "inds_5d", "=", "np", ".", "array", "(", "np", ".", "unravel_index", "(", "inds", ",", "cls_prob", ".", "shape", ")", ")", ".", "transpose", "(", ")", "\n", "classes", "=", "inds_5d", "[", ":", ",", "2", "]", "\n", "anchor_ids", ",", "y", ",", "x", "=", "inds_5d", "[", ":", ",", "1", "]", ",", "inds_5d", "[", ":", ",", "3", "]", ",", "inds_5d", "[", ":", ",", "4", "]", "\n", "scores", "=", "cls_prob", "[", ":", ",", "anchor_ids", ",", "classes", ",", "y", ",", "x", "]", "\n", "\n", "boxes", "=", "np", ".", "column_stack", "(", "(", "x", ",", "y", ",", "x", ",", "y", ")", ")", ".", "astype", "(", "dtype", "=", "np", ".", "float32", ")", "\n", "boxes", "*=", "stride", "\n", "boxes", "+=", "cell_anchors", "[", "anchor_ids", ",", ":", "]", "\n", "\n", "if", "not", "cfg", ".", "RETINANET", ".", "CLASS_SPECIFIC_BBOX", ":", "\n", "            ", "box_deltas", "=", "box_pred", "[", "0", ",", "anchor_ids", ",", ":", ",", "y", ",", "x", "]", "\n", "", "else", ":", "\n", "            ", "box_cls_inds", "=", "classes", "*", "4", "\n", "box_deltas", "=", "np", ".", "vstack", "(", "\n", "[", "box_pred", "[", "0", ",", "ind", ":", "ind", "+", "4", ",", "yi", ",", "xi", "]", "\n", "for", "ind", ",", "yi", ",", "xi", "in", "zip", "(", "box_cls_inds", ",", "y", ",", "x", ")", "]", "\n", ")", "\n", "", "pred_boxes", "=", "(", "\n", "box_utils", ".", "bbox_transform", "(", "boxes", ",", "box_deltas", ")", "\n", "if", "cfg", ".", "TEST", ".", "BBOX_REG", "else", "boxes", ")", "\n", "pred_boxes", "/=", "scale", "\n", "pred_boxes", "=", "box_utils", ".", "clip_tiled_boxes", "(", "pred_boxes", ",", "im", ".", "shape", ")", "\n", "box_scores", "=", "np", ".", "zeros", "(", "(", "pred_boxes", ".", "shape", "[", "0", "]", ",", "5", ")", ")", "\n", "box_scores", "[", ":", ",", "0", ":", "4", "]", "=", "pred_boxes", "\n", "box_scores", "[", ":", ",", "4", "]", "=", "scores", "\n", "\n", "for", "cls", "in", "range", "(", "1", ",", "cfg", ".", "MODEL", ".", "NUM_CLASSES", ")", ":", "\n", "            ", "inds", "=", "np", ".", "where", "(", "classes", "==", "cls", "-", "1", ")", "[", "0", "]", "\n", "if", "len", "(", "inds", ")", ">", "0", ":", "\n", "                ", "boxes_all", "[", "cls", "]", ".", "extend", "(", "box_scores", "[", "inds", ",", ":", "]", ")", "\n", "\n", "# Combine predictions across all levels and retain the top scoring by class", "\n", "", "", "", "detections", "=", "[", "]", "\n", "for", "cls", ",", "boxes", "in", "boxes_all", ".", "items", "(", ")", ":", "\n", "        ", "cls_dets", "=", "np", ".", "vstack", "(", "boxes", ")", ".", "astype", "(", "dtype", "=", "np", ".", "float32", ")", "\n", "# do class specific nms here", "\n", "keep", "=", "box_utils", ".", "nms", "(", "cls_dets", ",", "cfg", ".", "TEST", ".", "NMS", ")", "\n", "cls_dets", "=", "cls_dets", "[", "keep", ",", ":", "]", "\n", "out", "=", "np", ".", "zeros", "(", "(", "len", "(", "keep", ")", ",", "6", ")", ")", "\n", "out", "[", ":", ",", "0", ":", "5", "]", "=", "cls_dets", "\n", "out", "[", ":", ",", "5", "]", ".", "fill", "(", "cls", ")", "\n", "detections", ".", "append", "(", "out", ")", "\n", "\n", "", "detections", "=", "np", ".", "vstack", "(", "detections", ")", "\n", "# sort all again", "\n", "inds", "=", "np", ".", "argsort", "(", "-", "detections", "[", ":", ",", "4", "]", ")", "\n", "detections", "=", "detections", "[", "inds", "[", "0", ":", "cfg", ".", "TEST", ".", "DETECTIONS_PER_IM", "]", ",", ":", "]", "\n", "boxes", "=", "detections", "[", ":", ",", "0", ":", "4", "]", "\n", "scores", "=", "detections", "[", ":", ",", "4", "]", "\n", "classes", "=", "detections", "[", ":", ",", "5", "]", "\n", "return", "boxes", ",", "scores", ",", "classes", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test_retinanet.im_list_detections": [[191, 213], ["utils.timer.Timer", "len", "test_retinanet.create_cell_anchors", "range", "cv2.imread", "logger.info", "range", "range", "range", "range", "utils.NamedCudaScope", "utils.timer.Timer.tic", "test_retinanet.im_detections", "utils.timer.Timer.toc"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test_retinanet.create_cell_anchors", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.c2.NamedCudaScope", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.timer.Timer.tic", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test_retinanet.im_detections", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.timer.Timer.toc"], ["", "def", "im_list_detections", "(", "model", ",", "im_list", ")", ":", "\n", "    ", "\"\"\"Generate RetinaNet proposals on all images in im_list.\"\"\"", "\n", "_t", "=", "Timer", "(", ")", "\n", "num_images", "=", "len", "(", "im_list", ")", "\n", "im_list_boxes", "=", "[", "[", "]", "for", "_", "in", "range", "(", "num_images", ")", "]", "\n", "im_list_scores", "=", "[", "[", "]", "for", "_", "in", "range", "(", "num_images", ")", "]", "\n", "im_list_ids", "=", "[", "[", "]", "for", "_", "in", "range", "(", "num_images", ")", "]", "\n", "im_list_classes", "=", "[", "[", "]", "for", "_", "in", "range", "(", "num_images", ")", "]", "\n", "# create anchors for each level", "\n", "anchors", "=", "create_cell_anchors", "(", ")", "\n", "for", "i", "in", "range", "(", "num_images", ")", ":", "\n", "        ", "im_list_ids", "[", "i", "]", "=", "im_list", "[", "i", "]", "[", "'id'", "]", "\n", "im", "=", "cv2", ".", "imread", "(", "im_list", "[", "i", "]", "[", "'image'", "]", ")", "\n", "with", "c2_utils", ".", "NamedCudaScope", "(", "0", ")", ":", "\n", "            ", "_t", ".", "tic", "(", ")", "\n", "im_list_boxes", "[", "i", "]", ",", "im_list_scores", "[", "i", "]", ",", "im_list_classes", "[", "i", "]", "=", "im_detections", "(", "model", ",", "im", ",", "anchors", ")", "\n", "_t", ".", "toc", "(", ")", "\n", "", "logger", ".", "info", "(", "\n", "'im_detections: {:d}/{:d} {:.3f}s'", ".", "format", "(", "\n", "i", "+", "1", ",", "num_images", ",", "_t", ".", "average_time", ")", ")", "\n", "", "return", "im_list_boxes", ",", "im_list_scores", ",", "im_list_classes", ",", "im_list_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test_retinanet.test_retinanet": [[215, 256], ["core.config.get_output_dir", "datasets.json_dataset.JsonDataset", "datasets.json_dataset.JsonDataset.get_roidb", "modeling.model_builder.create", "modeling.model_builder.add_inference_inputs", "caffe2.python.workspace.CreateNet", "test_retinanet.im_list_detections", "yaml.dump", "os.path.join", "utils.io.save_object", "logger.info", "logger.info", "utils.initialize_from_weights_file", "dict", "tuple", "os.path.abspath"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.config.get_output_dir", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.rpn_generator.get_roidb", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder.create", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.modeling.model_builder.add_inference_inputs", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test_retinanet.im_list_detections", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.io.save_object", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.net.initialize_from_weights_file"], ["", "def", "test_retinanet", "(", "ind_range", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Test RetinaNet model either on the entire dataset or the subset of dataset\n    specified by the index range\n    \"\"\"", "\n", "assert", "cfg", ".", "RETINANET", ".", "RETINANET_ON", ",", "'RETINANET_ON must be set for testing RetinaNet model'", "\n", "output_dir", "=", "get_output_dir", "(", "training", "=", "False", ")", "\n", "dataset", "=", "JsonDataset", "(", "cfg", ".", "TEST", ".", "DATASET", ")", "\n", "im_list", "=", "dataset", ".", "get_roidb", "(", ")", "\n", "if", "ind_range", "is", "not", "None", ":", "\n", "        ", "start", ",", "end", "=", "ind_range", "\n", "im_list", "=", "im_list", "[", "start", ":", "end", "]", "\n", "logger", ".", "info", "(", "'Testing on roidb range: {}-{}'", ".", "format", "(", "start", ",", "end", ")", ")", "\n", "", "else", ":", "\n", "# if testing over the whole dataset, use the NUM_TEST_IMAGES setting", "\n", "# the NUM_TEST_IMAGES could be over a small set of images for quick", "\n", "# debugging purposes", "\n", "        ", "im_list", "=", "im_list", "[", "0", ":", "cfg", ".", "TEST", ".", "NUM_TEST_IMAGES", "]", "\n", "\n", "", "model", "=", "model_builder", ".", "create", "(", "cfg", ".", "MODEL", ".", "TYPE", ",", "train", "=", "False", ")", "\n", "if", "cfg", ".", "TEST", ".", "WEIGHTS", ":", "\n", "        ", "nu", ".", "initialize_from_weights_file", "(", "\n", "model", ",", "cfg", ".", "TEST", ".", "WEIGHTS", ",", "broadcast", "=", "False", "\n", ")", "\n", "", "model_builder", ".", "add_inference_inputs", "(", "model", ")", "\n", "workspace", ".", "CreateNet", "(", "model", ".", "net", ")", "\n", "boxes", ",", "scores", ",", "classes", ",", "image_ids", "=", "im_list_detections", "(", "\n", "model", ",", "im_list", "[", "0", ":", "cfg", ".", "TEST", ".", "NUM_TEST_IMAGES", "]", ")", "\n", "\n", "cfg_yaml", "=", "yaml", ".", "dump", "(", "cfg", ")", "\n", "if", "ind_range", "is", "not", "None", ":", "\n", "        ", "det_name", "=", "'retinanet_detections_range_%s_%s.pkl'", "%", "tuple", "(", "ind_range", ")", "\n", "", "else", ":", "\n", "        ", "det_name", "=", "'retinanet_detections.pkl'", "\n", "", "det_file", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "det_name", ")", "\n", "save_object", "(", "\n", "dict", "(", "boxes", "=", "boxes", ",", "scores", "=", "scores", ",", "classes", "=", "classes", ",", "ids", "=", "image_ids", ",", "cfg", "=", "cfg_yaml", ")", ",", "\n", "det_file", ")", "\n", "logger", ".", "info", "(", "'Wrote detections to: {}'", ".", "format", "(", "os", ".", "path", ".", "abspath", "(", "det_file", ")", ")", ")", "\n", "return", "boxes", ",", "scores", ",", "classes", ",", "image_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test_retinanet.multi_gpu_test_retinanet_on_dataset": [[258, 283], ["utils.get_runtime_dir", "utils.get_py_bin_ext", "os.path.join", "os.path.exists", "utils.process_in_parallel", "boxes.extend", "scores.extend", "classes.extend", "image_ids.extend"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.env.get_runtime_dir", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.env.get_py_bin_ext", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.subprocess.process_in_parallel"], ["", "def", "multi_gpu_test_retinanet_on_dataset", "(", "num_images", ",", "output_dir", ",", "dataset", ")", ":", "\n", "    ", "\"\"\"\n    If doing multi-gpu testing, we need to divide the data on various gpus and\n    make the subprocess call for each child process that'll run test_retinanet()\n    on its subset data. After all the subprocesses finish, we combine the results\n    and return\n    \"\"\"", "\n", "# Retrieve the test_net binary path", "\n", "binary_dir", "=", "envu", ".", "get_runtime_dir", "(", ")", "\n", "binary_ext", "=", "envu", ".", "get_py_bin_ext", "(", ")", "\n", "binary", "=", "os", ".", "path", ".", "join", "(", "binary_dir", ",", "'test_net'", "+", "binary_ext", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "binary", ")", ",", "'Binary \\'{}\\' not found'", ".", "format", "(", "binary", ")", "\n", "\n", "# Run inference in parallel in subprocesses", "\n", "outputs", "=", "subprocess_utils", ".", "process_in_parallel", "(", "\n", "'retinanet_detections'", ",", "num_images", ",", "binary", ",", "output_dir", ")", "\n", "\n", "# Combine the results from each subprocess now", "\n", "boxes", ",", "scores", ",", "classes", ",", "image_ids", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "det_data", "in", "outputs", ":", "\n", "        ", "boxes", ".", "extend", "(", "det_data", "[", "'boxes'", "]", ")", "\n", "scores", ".", "extend", "(", "det_data", "[", "'scores'", "]", ")", "\n", "classes", ".", "extend", "(", "det_data", "[", "'classes'", "]", ")", "\n", "image_ids", ".", "extend", "(", "det_data", "[", "'ids'", "]", ")", "\n", "", "return", "boxes", ",", "scores", ",", "classes", ",", "image_ids", ",", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test_retinanet.test_retinanet_on_dataset": [[285, 328], ["core.config.get_output_dir", "logger.info", "datasets.json_dataset.JsonDataset", "os.path.join", "logger.info", "utils.io.save_object", "logger.info", "test_retinanet.write_coco_detection_results", "test_retinanet.coco_evaluate", "datasets.task_evaluation._coco_eval_to_box_results", "collections.OrderedDict", "len", "test_retinanet.multi_gpu_test_retinanet_on_dataset", "test_retinanet.test_retinanet", "dict", "os.path.abspath", "datasets.json_dataset.JsonDataset.get_roidb", "os.path.abspath", "os.path.abspath"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.config.get_output_dir", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.io.save_object", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test_retinanet.write_coco_detection_results", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test_retinanet.coco_evaluate", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.task_evaluation._coco_eval_to_box_results", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test_retinanet.multi_gpu_test_retinanet_on_dataset", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test_retinanet.test_retinanet", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.rpn_generator.get_roidb"], ["", "def", "test_retinanet_on_dataset", "(", "multi_gpu", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Main entry point for testing on a given dataset: whether multi_gpu or not\n    \"\"\"", "\n", "output_dir", "=", "get_output_dir", "(", "training", "=", "False", ")", "\n", "logger", ".", "info", "(", "'Output will be saved to: {:s}'", ".", "format", "(", "os", ".", "path", ".", "abspath", "(", "output_dir", ")", ")", ")", "\n", "\n", "dataset", "=", "JsonDataset", "(", "cfg", ".", "TEST", ".", "DATASET", ")", "\n", "# for test-dev or full test dataset, we generate detections for all images", "\n", "if", "'test-dev'", "in", "cfg", ".", "TEST", ".", "DATASET", "or", "'test'", "in", "cfg", ".", "TEST", ".", "DATASET", ":", "\n", "        ", "cfg", ".", "TEST", ".", "NUM_TEST_IMAGES", "=", "len", "(", "dataset", ".", "get_roidb", "(", ")", ")", "\n", "\n", "", "if", "multi_gpu", ":", "\n", "        ", "num_images", "=", "cfg", ".", "TEST", ".", "NUM_TEST_IMAGES", "\n", "boxes", ",", "scores", ",", "classes", ",", "image_ids", "=", "multi_gpu_test_retinanet_on_dataset", "(", "\n", "num_images", ",", "output_dir", ",", "dataset", "\n", ")", "\n", "", "else", ":", "\n", "        ", "boxes", ",", "scores", ",", "classes", ",", "image_ids", "=", "test_retinanet", "(", ")", "\n", "\n", "# write RetinaNet detections pkl file to be used for various purposes", "\n", "# dump the boxes first just in case there are spurious failures", "\n", "", "res_file", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'retinanet_detections.pkl'", ")", "\n", "logger", ".", "info", "(", "\n", "'Writing roidb detections to file: {}'", ".", "\n", "format", "(", "os", ".", "path", ".", "abspath", "(", "res_file", ")", ")", "\n", ")", "\n", "save_object", "(", "\n", "dict", "(", "boxes", "=", "boxes", ",", "scores", "=", "scores", ",", "classes", "=", "classes", ",", "ids", "=", "image_ids", ")", ",", "\n", "res_file", "\n", ")", "\n", "logger", ".", "info", "(", "'Wrote RetinaNet detections to {}'", ".", "format", "(", "os", ".", "path", ".", "abspath", "(", "res_file", ")", ")", ")", "\n", "\n", "# Write the detections to a file that can be uploaded to coco evaluation server", "\n", "# which takes a json file format", "\n", "res_file", "=", "write_coco_detection_results", "(", "\n", "output_dir", ",", "dataset", ",", "boxes", ",", "scores", ",", "classes", ",", "image_ids", ")", "\n", "\n", "# Perform coco evaluation", "\n", "coco_eval", "=", "coco_evaluate", "(", "dataset", ",", "res_file", ",", "image_ids", ")", "\n", "\n", "box_results", "=", "task_evaluation", ".", "_coco_eval_to_box_results", "(", "coco_eval", ")", "\n", "return", "OrderedDict", "(", "[", "(", "dataset", ".", "name", ",", "box_results", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test_retinanet.coco_evaluate": [[330, 338], ["json_dataset.COCO.loadRes", "pycocotools.cocoeval.COCOeval", "pycocotools.cocoeval.COCOeval.evaluate", "pycocotools.cocoeval.COCOeval.accumulate", "pycocotools.cocoeval.COCOeval.summarize", "str"], "function", ["None"], ["", "def", "coco_evaluate", "(", "json_dataset", ",", "res_file", ",", "image_ids", ")", ":", "\n", "    ", "coco_dt", "=", "json_dataset", ".", "COCO", ".", "loadRes", "(", "str", "(", "res_file", ")", ")", "\n", "coco_eval", "=", "COCOeval", "(", "json_dataset", ".", "COCO", ",", "coco_dt", ",", "'bbox'", ")", "\n", "coco_eval", ".", "params", ".", "imgIds", "=", "image_ids", "\n", "coco_eval", ".", "evaluate", "(", ")", "\n", "coco_eval", ".", "accumulate", "(", ")", "\n", "coco_eval", ".", "summarize", "(", ")", "\n", "return", "coco_eval", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test_retinanet.write_coco_detection_results": [[340, 373], ["os.path.join", "logger.info", "zip", "logger.info", "logger.info", "dets.astype.astype", "score.astype.astype", "numpy.array", "results.extend", "open", "json.dump", "str", "os.path.abspath", "uuid.uuid4", "range"], "function", ["None"], ["", "def", "write_coco_detection_results", "(", "\n", "output_dir", ",", "json_dataset", ",", "all_boxes", ",", "all_scores", ",", "all_classes", ",", "image_ids", ",", "\n", "use_salt", "=", "False", "\n", ")", ":", "\n", "    ", "res_file", "=", "os", ".", "path", ".", "join", "(", "\n", "output_dir", ",", "'detections_'", "+", "json_dataset", ".", "name", "+", "'_results'", ")", "\n", "if", "use_salt", ":", "\n", "        ", "res_file", "+=", "'_{}'", ".", "format", "(", "str", "(", "uuid", ".", "uuid4", "(", ")", ")", ")", "\n", "", "res_file", "+=", "'.json'", "\n", "logger", ".", "info", "(", "'Writing RetinaNet detections for submitting to coco server...'", ")", "\n", "results", "=", "[", "]", "\n", "for", "(", "im_id", ",", "dets", ",", "cls", ",", "score", ")", "in", "zip", "(", "image_ids", ",", "all_boxes", ",", "all_classes", ",", "all_scores", ")", ":", "\n", "        ", "dets", "=", "dets", ".", "astype", "(", "np", ".", "float", ")", "\n", "score", "=", "score", ".", "astype", "(", "np", ".", "float", ")", "\n", "classes", "=", "np", ".", "array", "(", "\n", "[", "json_dataset", ".", "contiguous_category_id_to_json_id", "[", "c", "]", "for", "c", "in", "cls", "]", ")", "\n", "xs", "=", "dets", "[", ":", ",", "0", "]", "\n", "ys", "=", "dets", "[", ":", ",", "1", "]", "\n", "ws", "=", "dets", "[", ":", ",", "2", "]", "-", "xs", "+", "1", "\n", "hs", "=", "dets", "[", ":", ",", "3", "]", "-", "ys", "+", "1", "\n", "results", ".", "extend", "(", "\n", "[", "{", "'image_id'", ":", "im_id", ",", "\n", "'category_id'", ":", "classes", "[", "k", "]", ",", "\n", "'bbox'", ":", "[", "xs", "[", "k", "]", ",", "ys", "[", "k", "]", ",", "ws", "[", "k", "]", ",", "hs", "[", "k", "]", "]", ",", "\n", "'score'", ":", "score", "[", "k", "]", "}", "for", "k", "in", "range", "(", "dets", ".", "shape", "[", "0", "]", ")", "]", ")", "\n", "\n", "", "logger", ".", "info", "(", "'Writing detection results to json: {}'", ".", "format", "(", "\n", "os", ".", "path", ".", "abspath", "(", "res_file", ")", "\n", ")", ")", "\n", "with", "open", "(", "res_file", ",", "'w'", ")", "as", "fid", ":", "\n", "        ", "json", ".", "dump", "(", "results", ",", "fid", ")", "\n", "", "logger", ".", "info", "(", "'Done!'", ")", "\n", "return", "res_file", "\n", "", ""]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.scripts.echolib_wrapper.EcholibWrapper.__init__": [[8, 21], ["cv2.VideoCapture", "echolib.pyecho.IOLoop", "echolib.pyecho.Client", "echolib_wrapper.EcholibWrapper.loop.add_handler", "echolib.pyecho.Publisher", "echolib.pyecho.Subscriber"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "detection_method", ",", "out_channel", ",", "in_channel", ")", ":", "\n", "        ", "self", ".", "camera", "=", "cv2", ".", "VideoCapture", "(", "0", ")", "\n", "\n", "self", ".", "loop", "=", "pyecho", ".", "IOLoop", "(", ")", "\n", "self", ".", "client", "=", "pyecho", ".", "Client", "(", ")", "\n", "self", ".", "loop", ".", "add_handler", "(", "self", ".", "client", ")", "\n", "\n", "self", ".", "enabled", "=", "False", "\n", "\n", "self", ".", "dockerCommandOut", "=", "pyecho", ".", "Publisher", "(", "self", ".", "client", ",", "out_channel", ",", "\"numpy.ndarray\"", ")", "\n", "self", ".", "dockerCommandIn", "=", "pyecho", ".", "Subscriber", "(", "self", ".", "client", ",", "in_channel", ",", "\"int\"", ",", "self", ".", "callback", ")", "\n", "\n", "self", ".", "detection_method", "=", "detection_method", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.scripts.echolib_wrapper.EcholibWrapper.callback": [[22, 24], ["echolib.pyecho.MessageReader().readInt", "echolib.pyecho.MessageReader"], "methods", ["None"], ["", "def", "callback", "(", "self", ",", "message", ")", ":", "\n", "        ", "self", ".", "enabled", "=", "True", "if", "(", "pyecho", ".", "MessageReader", "(", "message", ")", ".", "readInt", "(", ")", "!=", "0", ")", "else", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.scripts.echolib_wrapper.EcholibWrapper.run": [[25, 35], ["echolib_wrapper.EcholibWrapper.loop.wait", "echolib_wrapper.EcholibWrapper.camera.read", "echolib.pyecho.MessageWriter", "echocv.writeMat", "echolib_wrapper.EcholibWrapper.dockerCommandOut.send", "time.sleep", "echolib_wrapper.EcholibWrapper.detection_method.doDetection"], "methods", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.scripts.run_main.TSRDemo.doDetection"], ["", "def", "run", "(", "self", ",", "wait_sec", "=", "10", ",", "sleep_sec", "=", "0", ")", ":", "\n", "        ", "while", "self", ".", "loop", ".", "wait", "(", "wait_sec", ")", ":", "\n", "            ", "_", ",", "frame", "=", "self", ".", "camera", ".", "read", "(", ")", "\n", "\n", "writer", "=", "pyecho", ".", "MessageWriter", "(", ")", "\n", "echocv", ".", "writeMat", "(", "writer", ",", "self", ".", "detection_method", ".", "doDetection", "(", "frame", ")", "if", "self", ".", "enabled", "else", "frame", ")", "\n", "self", ".", "dockerCommandOut", ".", "send", "(", "writer", ")", "\n", "\n", "if", "sleep_sec", ">", "0", ":", "\n", "                ", "time", ".", "sleep", "(", "sleep_sec", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.scripts.run_main.TSRDemo.__init__": [[29, 54], ["caffe2.python.workspace.GlobalInit", "core.config.merge_cfg_from_file", "core.config.assert_and_infer_cfg", "core.initialize_model_from_cfg", "datasets.get_dfg200_dataset", "os.path.exists", "run_main.TSRDemo.dfg200_dataset.classes.iteritems", "cv2.imread", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.config.merge_cfg_from_file", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.config.assert_and_infer_cfg", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test_engine.initialize_model_from_cfg", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.dummy_datasets.get_dfg200_dataset"], ["    ", "def", "__init__", "(", "self", ",", "cfg_filename", ",", "weights_filename", ",", "catalog_folder", "=", "None", ",", "\n", "vis_thresh", "=", "0.8", ",", "vis_font_scale", "=", "0.5", ",", "vis_box_thick", "=", "2", ",", "\n", "vis_cls_im_show", "=", "True", ",", "vis_cls_im_min", "=", "30", ",", "vis_cls_im_max", "=", "150", ")", ":", "\n", "        ", "workspace", ".", "GlobalInit", "(", "[", "'caffe2'", ",", "'--caffe2_log_level=0'", "]", ")", "\n", "\n", "merge_cfg_from_file", "(", "cfg_filename", ")", "\n", "cfg", ".", "TEST", ".", "WEIGHTS", "=", "weights_filename", "\n", "cfg", ".", "NUM_GPUS", "=", "1", "\n", "assert_and_infer_cfg", "(", "cache_urls", "=", "False", ")", "\n", "\n", "self", ".", "model", "=", "infer_engine", ".", "initialize_model_from_cfg", "(", ")", "\n", "self", ".", "dfg200_dataset", "=", "dummy_datasets", ".", "get_dfg200_dataset", "(", ")", "\n", "\n", "# load class images from catalog_folder", "\n", "if", "catalog_folder", "is", "not", "None", "and", "os", ".", "path", ".", "exists", "(", "catalog_folder", ")", ":", "\n", "            ", "self", ".", "cls_image", "=", "{", "}", "\n", "for", "id", ",", "cls", "in", "self", ".", "dfg200_dataset", ".", "classes", ".", "iteritems", "(", ")", ":", "\n", "                ", "self", ".", "cls_image", "[", "id", "]", "=", "cv2", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "catalog_folder", ",", "'%s.jpg'", "%", "cls", ")", ")", "\n", "\n", "", "", "self", ".", "vis_thresh", "=", "vis_thresh", "\n", "self", ".", "vis_font_scale", "=", "vis_font_scale", "\n", "self", ".", "vis_box_thick", "=", "vis_box_thick", "\n", "self", ".", "vis_cls_im_show", "=", "vis_cls_im_show", "\n", "self", ".", "vis_cls_im_min", "=", "vis_cls_im_min", "\n", "self", ".", "vis_cls_im_max", "=", "vis_cls_im_max", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.scripts.run_main.TSRDemo.doDetection": [[55, 64], ["utils.NamedCudaScope", "core.im_detect_all", "run_main.TSRDemo.visualizeResults"], "methods", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.c2.NamedCudaScope", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.test.im_detect_all", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.scripts.run_main.TSRDemo.visualizeResults"], ["", "def", "doDetection", "(", "self", ",", "im", ")", ":", "\n", "\n", "        ", "with", "c2_utils", ".", "NamedCudaScope", "(", "0", ")", ":", "\n", "            ", "cls_boxes", ",", "cls_segms", ",", "cls_keyps", "=", "infer_engine", ".", "im_detect_all", "(", "self", ".", "model", ",", "im", ",", "None", ")", "\n", "\n", "", "if", "cls_boxes", "is", "not", "None", ":", "\n", "          ", "im", "=", "self", ".", "visualizeResults", "(", "im", ",", "cls_boxes", ")", "\n", "\n", "", "return", "im", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.scripts.run_main.TSRDemo.visualizeResults": [[65, 169], ["isinstance", "numpy.stack", "numpy.argsort", "run_main.TSRDemo._get_forbidden_plot_regions", "utils.vis.convert_from_cls_format", "max", "utils.vis.vis_bbox", "utils.vis.get_class_string", "utils.vis.vis_class", "run_main.TSRDemo._get_potential_plot_regions", "numpy.array", "zip", "numpy.argmin", "map", "cv2.resize", "plot_candiates_intersect.append", "max", "max", "max", "max", "numpy.sum", "numpy.concatenate", "float", "cv2.rotatedRectangleIntersection", "cv2.contourArea", "float", "numpy.array().reshape", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.scripts.run_main.TSRDemo._get_forbidden_plot_regions", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tools.convert_detections_to_text.convert_from_cls_format", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.vis.vis_bbox", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tools.infer_simple_dfg.get_class_string", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.vis.vis_class", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.scripts.run_main.TSRDemo._get_potential_plot_regions"], ["", "def", "visualizeResults", "(", "self", ",", "im", ",", "boxes", ")", ":", "\n", "        ", "\"\"\"Constructs a numpy array with the detections visualized.\"\"\"", "\n", "\n", "if", "isinstance", "(", "boxes", ",", "list", ")", ":", "\n", "            ", "boxes", ",", "segms", ",", "keypoints", ",", "classes", "=", "convert_from_cls_format", "(", "boxes", ",", "cls_segms", "=", "None", ",", "cls_keyps", "=", "None", ")", "\n", "\n", "", "if", "boxes", "is", "None", "or", "boxes", ".", "shape", "[", "0", "]", "==", "0", "or", "max", "(", "boxes", "[", ":", ",", "4", "]", ")", "<", "self", ".", "vis_thresh", ":", "\n", "            ", "return", "im", "\n", "\n", "", "boxes_wh", "=", "np", ".", "stack", "(", "(", "boxes", "[", ":", ",", "0", "]", ",", "\n", "boxes", "[", ":", ",", "1", "]", ",", "\n", "boxes", "[", ":", ",", "2", "]", "-", "boxes", "[", ":", ",", "0", "]", ",", "\n", "boxes", "[", ":", ",", "3", "]", "-", "boxes", "[", ":", ",", "1", "]", ")", ",", "axis", "=", "1", ")", "\n", "\n", "# Display in largest to smallest order to reduce occlusion", "\n", "areas", "=", "(", "boxes", "[", ":", ",", "2", "]", "-", "boxes", "[", ":", ",", "0", "]", ")", "*", "(", "boxes", "[", ":", ",", "3", "]", "-", "boxes", "[", ":", ",", "1", "]", ")", "\n", "sorted_inds", "=", "np", ".", "argsort", "(", "-", "areas", ")", "\n", "\n", "forbidden_plot_regions", "=", "self", ".", "_get_forbidden_plot_regions", "(", "boxes_wh", ",", "boxes", "[", ":", ",", "-", "1", "]", ",", "(", "im", ".", "shape", "[", "1", "]", ",", "im", ".", "shape", "[", "0", "]", ")", ")", "\n", "\n", "for", "i", "in", "sorted_inds", ":", "\n", "            ", "bbox", "=", "boxes", "[", "i", ",", ":", "4", "]", "# x1,y1,x2,y2", "\n", "bbox_wh", "=", "boxes_wh", "[", "i", ",", ":", "4", "]", "# x,y,w,h", "\n", "score", "=", "boxes", "[", "i", ",", "-", "1", "]", "\n", "if", "score", "<", "self", ".", "vis_thresh", ":", "\n", "                ", "continue", "\n", "\n", "# show box (off by default)", "\n", "", "if", "self", ".", "vis_box_thick", ">", "0", ":", "\n", "                ", "im", "=", "vis_bbox", "(", "im", ",", "(", "bbox", "[", "0", "]", ",", "bbox", "[", "1", "]", ",", "bbox", "[", "2", "]", "-", "bbox", "[", "0", "]", ",", "bbox", "[", "3", "]", "-", "bbox", "[", "1", "]", ")", ",", "thick", "=", "self", ".", "vis_box_thick", ")", "\n", "\n", "# show class (off by default)", "\n", "", "if", "self", ".", "vis_font_scale", ">", "0", ":", "\n", "                ", "class_str", "=", "get_class_string", "(", "classes", "[", "i", "]", ",", "score", ",", "self", ".", "dfg200_dataset", ")", "\n", "im", "=", "vis_class", "(", "im", ",", "(", "bbox", "[", "0", "]", ",", "bbox", "[", "1", "]", "-", "2", ")", ",", "class_str", ",", "font_scale", "=", "self", ".", "vis_font_scale", ")", "\n", "\n", "", "if", "self", ".", "vis_cls_im_show", "and", "classes", "[", "i", "]", "in", "self", ".", "cls_image", ":", "\n", "# get display image", "\n", "                ", "cat_img", "=", "self", ".", "cls_image", "[", "classes", "[", "i", "]", "]", "\n", "\n", "# get potential plot regions", "\n", "plot_candiates", "=", "self", ".", "_get_potential_plot_regions", "(", "bbox_wh", ",", "(", "im", ".", "shape", "[", "1", "]", ",", "im", ".", "shape", "[", "0", "]", ")", ",", "\n", "cat_img", ".", "shape", "[", "1", "]", "/", "float", "(", "cat_img", ".", "shape", "[", "0", "]", ")", ",", "\n", "self", ".", "vis_cls_im_min", ",", "\n", "self", ".", "vis_cls_im_max", ")", "\n", "plot_candiates", "=", "np", ".", "array", "(", "plot_candiates", ")", "\n", "plot_candiates_intersect", "=", "[", "]", "\n", "# check how much each plot candidate overlaps with the forbidden_plot_regions", "\n", "for", "c", ",", "a", "in", "zip", "(", "plot_candiates", ",", "plot_candiates", "[", ":", ",", "2", "]", "*", "plot_candiates", "[", ":", ",", "3", "]", ")", ":", "\n", "\n", "                    ", "intersect_area", "=", "0", "\n", "for", "f", "in", "forbidden_plot_regions", ":", "\n", "                        ", "r1", "=", "(", "(", "c", "[", "0", "]", "+", "c", "[", "2", "]", "/", "2", ",", "c", "[", "1", "]", "+", "c", "[", "3", "]", "/", "2", ")", ",", "(", "c", "[", "2", "]", ",", "c", "[", "3", "]", ")", ",", "0", ")", "\n", "r2", "=", "(", "(", "f", "[", "0", "]", "+", "f", "[", "2", "]", "/", "2", ",", "f", "[", "1", "]", "+", "f", "[", "3", "]", "/", "2", ")", ",", "(", "f", "[", "2", "]", ",", "f", "[", "3", "]", ")", ",", "0", ")", "\n", "\n", "int_pts", "=", "cv2", ".", "rotatedRectangleIntersection", "(", "r1", ",", "r2", ")", "\n", "if", "int_pts", "[", "0", "]", "!=", "0", ":", "\n", "                            ", "intersect_area", "+=", "cv2", ".", "contourArea", "(", "int_pts", "[", "1", "]", ")", "\n", "\n", "# allow 25% overlap to remove jumpines of windowos due to neighbor overlaps", "\n", "", "", "if", "float", "(", "intersect_area", ")", "/", "a", "<", "0.25", ":", "\n", "                        ", "intersect_area", "=", "0", "\n", "\n", "", "plot_candiates_intersect", ".", "append", "(", "intersect_area", ")", "\n", "\n", "# we can stop if found one that does not intersect at all", "\n", "if", "intersect_area", "==", "0", ":", "\n", "                        ", "break", "\n", "\n", "# select one with the smallest interesection", "\n", "", "", "best_candidate_index", "=", "np", ".", "argmin", "(", "plot_candiates_intersect", ")", "\n", "\n", "plot_region", "=", "plot_candiates", "[", "best_candidate_index", "]", "\n", "plot_region", "=", "map", "(", "int", ",", "plot_region", ")", "\n", "\n", "# resize catalog image to the same size as detection", "\n", "resized_cat_img", "=", "cv2", ".", "resize", "(", "cat_img", ",", "dsize", "=", "(", "plot_region", "[", "2", "]", ",", "plot_region", "[", "3", "]", ")", ")", "\n", "\n", "cat_img_roi", "=", "[", "0", ",", "0", ",", "resized_cat_img", ".", "shape", "[", "1", "]", ",", "resized_cat_img", ".", "shape", "[", "0", "]", "]", "\n", "\n", "# clip = left (x), right (x), top (y), bottom (y)", "\n", "clip", "=", "[", "max", "(", "0", ",", "0", "-", "plot_region", "[", "0", "]", ")", ",", "\n", "max", "(", "0", ",", "(", "plot_region", "[", "0", "]", "+", "plot_region", "[", "2", "]", ")", "-", "im", ".", "shape", "[", "1", "]", ")", ",", "\n", "max", "(", "0", ",", "0", "-", "plot_region", "[", "1", "]", ")", ",", "\n", "max", "(", "0", ",", "(", "plot_region", "[", "1", "]", "+", "plot_region", "[", "3", "]", ")", "-", "im", ".", "shape", "[", "0", "]", ")", "]", "\n", "\n", "# ensure image does not fall out of bounds", "\n", "if", "np", ".", "sum", "(", "clip", ")", ">", "0", ":", "\n", "                    ", "plot_region", "=", "[", "plot_region", "[", "0", "]", "+", "clip", "[", "0", "]", ",", "plot_region", "[", "1", "]", "+", "clip", "[", "2", "]", ",", "plot_region", "[", "2", "]", "-", "(", "clip", "[", "0", "]", "+", "clip", "[", "1", "]", ")", ",", "plot_region", "[", "3", "]", "-", "(", "clip", "[", "2", "]", "+", "clip", "[", "3", "]", ")", "]", "\n", "cat_img_roi", "=", "[", "cat_img_roi", "[", "0", "]", "+", "clip", "[", "0", "]", ",", "cat_img_roi", "[", "1", "]", "+", "clip", "[", "2", "]", ",", "cat_img_roi", "[", "2", "]", "-", "(", "clip", "[", "0", "]", "+", "clip", "[", "1", "]", ")", ",", "cat_img_roi", "[", "3", "]", "-", "(", "clip", "[", "2", "]", "+", "clip", "[", "3", "]", ")", "]", "\n", "\n", "", "if", "cat_img_roi", "[", "2", "]", "*", "cat_img_roi", "[", "3", "]", ">", "0", ":", "\n", "\n", "# append selected region to forbidden plots (before converting to x1,y1,x2,y2)", "\n", "                    ", "forbidden_plot_regions", "=", "np", ".", "concatenate", "(", "(", "forbidden_plot_regions", ",", "np", ".", "array", "(", "plot_region", ")", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", ")", ",", "axis", "=", "0", ")", "\n", "\n", "# convert to x1,y1,x2,y2", "\n", "plot_region", "=", "[", "plot_region", "[", "0", "]", ",", "plot_region", "[", "1", "]", ",", "plot_region", "[", "0", "]", "+", "plot_region", "[", "2", "]", ",", "plot_region", "[", "1", "]", "+", "plot_region", "[", "3", "]", "]", "\n", "cat_img_roi", "=", "[", "cat_img_roi", "[", "0", "]", ",", "cat_img_roi", "[", "1", "]", ",", "cat_img_roi", "[", "0", "]", "+", "cat_img_roi", "[", "2", "]", ",", "cat_img_roi", "[", "1", "]", "+", "cat_img_roi", "[", "3", "]", "]", "\n", "im", "[", "plot_region", "[", "1", "]", ":", "plot_region", "[", "3", "]", ",", "plot_region", "[", "0", "]", ":", "plot_region", "[", "2", "]", ",", ":", "]", "=", "resized_cat_img", "[", "cat_img_roi", "[", "1", "]", ":", "cat_img_roi", "[", "3", "]", ",", "cat_img_roi", "[", "0", "]", ":", "cat_img_roi", "[", "2", "]", ",", ":", "]", "\n", "\n", "\n", "\n", "", "", "", "return", "im", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.scripts.run_main.TSRDemo._get_forbidden_plot_regions": [[170, 186], ["forbidden_plot_regions.append", "forbidden_plot_regions.append", "forbidden_plot_regions.append", "forbidden_plot_regions.append", "forbidden_plot_regions.append", "forbidden_plot_regions.append", "forbidden_plot_regions.append", "forbidden_plot_regions.append", "numpy.concatenate", "numpy.array"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_get_forbidden_plot_regions", "(", "boxes_wh", ",", "scores", ",", "frame_size", ")", ":", "\n", "# add out-of-frame regions as forbidden (but can be used if nothing else is available", "\n", "        ", "forbidden_plot_regions", "=", "[", "]", "\n", "\n", "forbidden_plot_regions", ".", "append", "(", "(", "-", "frame_size", "[", "0", "]", ",", "-", "frame_size", "[", "1", "]", ",", "frame_size", "[", "0", "]", ",", "frame_size", "[", "1", "]", ")", ")", "\n", "forbidden_plot_regions", ".", "append", "(", "(", "0", ",", "-", "frame_size", "[", "1", "]", ",", "frame_size", "[", "0", "]", ",", "frame_size", "[", "1", "]", ")", ")", "\n", "forbidden_plot_regions", ".", "append", "(", "(", "frame_size", "[", "0", "]", ",", "-", "frame_size", "[", "1", "]", ",", "frame_size", "[", "0", "]", ",", "frame_size", "[", "1", "]", ")", ")", "\n", "forbidden_plot_regions", ".", "append", "(", "(", "-", "frame_size", "[", "0", "]", ",", "0", ",", "frame_size", "[", "0", "]", ",", "frame_size", "[", "1", "]", ")", ")", "\n", "#forbidden_plot_regions.append((0,0,frame._size[0],frame._size[1]))", "\n", "forbidden_plot_regions", ".", "append", "(", "(", "frame_size", "[", "0", "]", ",", "0", ",", "frame_size", "[", "0", "]", ",", "frame_size", "[", "1", "]", ")", ")", "\n", "forbidden_plot_regions", ".", "append", "(", "(", "-", "frame_size", "[", "0", "]", ",", "frame_size", "[", "1", "]", ",", "frame_size", "[", "0", "]", ",", "frame_size", "[", "1", "]", ")", ")", "\n", "forbidden_plot_regions", ".", "append", "(", "(", "0", ",", "frame_size", "[", "1", "]", ",", "frame_size", "[", "0", "]", ",", "frame_size", "[", "1", "]", ")", ")", "\n", "forbidden_plot_regions", ".", "append", "(", "(", "frame_size", "[", "0", "]", ",", "frame_size", "[", "1", "]", ",", "frame_size", "[", "0", "]", ",", "frame_size", "[", "1", "]", ")", ")", "\n", "\n", "return", "np", ".", "concatenate", "(", "(", "boxes_wh", ",", "np", ".", "array", "(", "forbidden_plot_regions", ")", ")", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.scripts.run_main.TSRDemo._get_potential_plot_regions": [[188, 226], ["float", "float", "float", "float", "candidate_regions.append", "candidate_regions.append", "candidate_regions.append", "candidate_regions.append", "candidate_regions.append", "candidate_regions.append", "candidate_regions.append", "candidate_regions.append", "max", "int", "int", "max", "int", "int"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_get_potential_plot_regions", "(", "bbox_wh", ",", "frame_size", ",", "required_aspect_ratio", ",", "min_size", ",", "max_size", ")", ":", "\n", "# bbox = [x,y,w,h]", "\n", "        ", "candidate_regions", "=", "[", "]", "\n", "candidate_size", "=", "[", "bbox_wh", "[", "2", "]", ",", "bbox_wh", "[", "3", "]", "]", "\n", "\n", "# change the aspect ratio to maintain the small side", "\n", "if", "candidate_size", "[", "0", "]", ">=", "candidate_size", "[", "1", "]", ":", "\n", "            ", "candidate_size", "[", "0", "]", "=", "candidate_size", "[", "1", "]", "*", "required_aspect_ratio", "\n", "", "else", ":", "\n", "            ", "candidate_size", "[", "1", "]", "=", "candidate_size", "[", "0", "]", "/", "required_aspect_ratio", "\n", "\n", "# require region to have at least 30 px for the larger side", "\n", "", "resize_factor", "=", "float", "(", "min_size", ")", "/", "float", "(", "max", "(", "candidate_size", "[", "0", "]", ",", "candidate_size", "[", "1", "]", ")", ")", "\n", "\n", "if", "resize_factor", ">", "1", ":", "\n", "            ", "candidate_size", "=", "[", "int", "(", "candidate_size", "[", "0", "]", "*", "resize_factor", ")", ",", "int", "(", "candidate_size", "[", "1", "]", "*", "resize_factor", ")", "]", "\n", "\n", "# require region to have max 150 px (in width or height)", "\n", "", "resize_factor", "=", "float", "(", "max_size", ")", "/", "float", "(", "max", "(", "candidate_size", "[", "0", "]", ",", "candidate_size", "[", "1", "]", ")", ")", "\n", "\n", "if", "resize_factor", "<", "1", ":", "\n", "            ", "candidate_size", "=", "[", "int", "(", "candidate_size", "[", "0", "]", "*", "resize_factor", ")", ",", "int", "(", "candidate_size", "[", "1", "]", "*", "resize_factor", ")", "]", "\n", "\n", "", "if", "bbox_wh", "[", "0", "]", "+", "bbox_wh", "[", "2", "]", "/", "2", "<", "frame_size", "[", "0", "]", "/", "2", ":", "\n", "# LEFT side", "\n", "            ", "candidate_regions", ".", "append", "(", "(", "bbox_wh", "[", "0", "]", "+", "bbox_wh", "[", "2", "]", ",", "bbox_wh", "[", "1", "]", ",", "candidate_size", "[", "0", "]", ",", "candidate_size", "[", "1", "]", ")", ")", "\n", "candidate_regions", ".", "append", "(", "(", "bbox_wh", "[", "0", "]", "-", "candidate_size", "[", "0", "]", ",", "bbox_wh", "[", "1", "]", ",", "candidate_size", "[", "0", "]", ",", "candidate_size", "[", "1", "]", ")", ")", "\n", "candidate_regions", ".", "append", "(", "(", "bbox_wh", "[", "0", "]", ",", "bbox_wh", "[", "1", "]", "+", "bbox_wh", "[", "3", "]", ",", "candidate_size", "[", "0", "]", ",", "candidate_size", "[", "1", "]", ")", ")", "\n", "candidate_regions", ".", "append", "(", "(", "bbox_wh", "[", "0", "]", ",", "bbox_wh", "[", "1", "]", "-", "candidate_size", "[", "1", "]", ",", "candidate_size", "[", "0", "]", ",", "candidate_size", "[", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "# RIGHT side", "\n", "            ", "candidate_regions", ".", "append", "(", "(", "bbox_wh", "[", "0", "]", "-", "candidate_size", "[", "0", "]", ",", "bbox_wh", "[", "1", "]", ",", "candidate_size", "[", "0", "]", ",", "candidate_size", "[", "1", "]", ")", ")", "\n", "candidate_regions", ".", "append", "(", "(", "bbox_wh", "[", "0", "]", "+", "bbox_wh", "[", "2", "]", ",", "bbox_wh", "[", "1", "]", ",", "candidate_size", "[", "0", "]", ",", "candidate_size", "[", "1", "]", ")", ")", "\n", "candidate_regions", ".", "append", "(", "(", "bbox_wh", "[", "0", "]", ",", "bbox_wh", "[", "1", "]", "+", "bbox_wh", "[", "3", "]", ",", "candidate_size", "[", "0", "]", ",", "candidate_size", "[", "1", "]", ")", ")", "\n", "candidate_regions", ".", "append", "(", "(", "bbox_wh", "[", "0", "]", ",", "bbox_wh", "[", "1", "]", "-", "candidate_size", "[", "1", "]", ",", "candidate_size", "[", "0", "]", ",", "candidate_size", "[", "1", "]", ")", ")", "\n", "\n", "", "return", "candidate_regions", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.scripts.run_main.FolderProcessing.__init__": [[229, 235], ["glob.iglob", "sorted", "os.path.join"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "detection_method", ",", "folder", ",", "img_ext", ",", "out_folder", "=", "None", ")", ":", "\n", "        ", "self", ".", "detection_method", "=", "detection_method", "\n", "self", ".", "img_list", "=", "glob", ".", "iglob", "(", "os", ".", "path", ".", "join", "(", "folder", ",", "'*.'", "+", "img_ext", ")", ")", "\n", "self", ".", "img_list", "=", "sorted", "(", "self", ".", "img_list", ")", "\n", "\n", "self", ".", "out_folder", "=", "out_folder", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.scripts.run_main.FolderProcessing.run": [[236, 248], ["cv2.imread", "run_main.FolderProcessing.detection_method.doDetection", "cv2.imwrite", "plt.imshow", "plt.show", "os.path.join", "cv2.cvtColor", "os.path.basename"], "methods", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.scripts.run_main.TSRDemo.doDetection"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "import", "pylab", "as", "plt", "\n", "for", "img_filename", "in", "self", ".", "img_list", ":", "\n", "\n", "            ", "frame", "=", "cv2", ".", "imread", "(", "img_filename", ")", "\n", "frame", "=", "self", ".", "detection_method", ".", "doDetection", "(", "frame", ")", "\n", "\n", "if", "self", ".", "out_folder", "!=", "None", ":", "\n", "                ", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "self", ".", "out_folder", ",", "os", ".", "path", ".", "basename", "(", "img_filename", ")", ")", ",", "frame", ")", "\n", "", "else", ":", "\n", "                ", "plt", ".", "imshow", "(", "cv2", ".", "cvtColor", "(", "frame", ",", "cv2", ".", "COLOR_BGR2RGB", ")", ")", "\n", "plt", ".", "show", "(", "block", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.scripts.run_main.main": [[249, 267], ["processer", "run_main.TSRDemo", "processer.run", "EcholibWrapper", "run_main.FolderProcessing"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.scripts.run_main.FolderProcessing.run"], ["", "", "", "", "def", "main", "(", "args", ")", ":", "\n", "\n", "    ", "if", "args", ".", "image_folder", "is", "None", ":", "\n", "        ", "from", "echolib_wrapper", "import", "EcholibWrapper", "\n", "processer", "=", "lambda", "d", ":", "EcholibWrapper", "(", "d", ",", "args", ".", "out_channel", ",", "args", ".", "in_channel", ")", "\n", "", "else", ":", "\n", "        ", "processer", "=", "lambda", "d", ":", "FolderProcessing", "(", "d", ",", "args", ".", "image_folder", ",", "args", ".", "image_ext", ",", "args", ".", "out_folder", ")", "\n", "\n", "", "cfg_filename", "=", "args", ".", "cfg", "\n", "weights_filename", "=", "args", ".", "weights", "\n", "catalog_folder", "=", "args", ".", "catalog", "\n", "\n", "demo", "=", "processer", "(", "TSRDemo", "(", "cfg_filename", ",", "weights_filename", ",", "catalog_folder", "=", "catalog_folder", ")", ")", "\n", "\n", "try", ":", "\n", "        ", "demo", ".", "run", "(", ")", "\n", "", "except", "KeyboardInterrupt", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.scripts.run_main.parse_args": [[268, 323], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "len", "argparse.ArgumentParser.print_help", "sys.exit"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tests.data_loader_benchmark.parse_args"], ["", "", "def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Traffic Sign Detection'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "'--cfg'", ",", "\n", "dest", "=", "'cfg'", ",", "\n", "help", "=", "'cfg model file (/path/to/model_config.yaml)'", ",", "\n", "default", "=", "None", ",", "\n", "type", "=", "str", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--wts'", ",", "\n", "dest", "=", "'weights'", ",", "\n", "help", "=", "'weights model file (/path/to/model_weights.pkl)'", ",", "\n", "default", "=", "None", ",", "\n", "type", "=", "str", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--cat'", ",", "\n", "dest", "=", "'catalog'", ",", "\n", "help", "=", "'folder to dataset catalog (class template images) '", ",", "\n", "default", "=", "None", ",", "\n", "type", "=", "str", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--image-ext'", ",", "\n", "dest", "=", "'image_ext'", ",", "\n", "help", "=", "'image file name extension (default: jpg)'", ",", "\n", "default", "=", "'jpg'", ",", "\n", "type", "=", "str", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--image-folder'", ",", "\n", "dest", "=", "'image_folder'", ",", "\n", "help", "=", "'folder to images for processing (default: None)'", ",", "\n", "default", "=", "None", ",", "\n", "type", "=", "str", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--out-folder'", ",", "\n", "dest", "=", "'out_folder'", ",", "\n", "help", "=", "'folder to store output (default: None)'", ",", "\n", "default", "=", "None", ",", "\n", "type", "=", "str", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'out_channel'", ",", "help", "=", "'out channel for echolib'", ",", "default", "=", "None", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'in_channel'", ",", "help", "=", "'input channel for echolib'", ",", "default", "=", "None", "\n", ")", "\n", "if", "len", "(", "sys", ".", "argv", ")", "==", "1", ":", "\n", "        ", "parser", ".", "print_help", "(", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tests.data_loader_benchmark.parse_args": [[46, 88], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "len", "argparse.ArgumentParser.print_help", "sys.exit"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tests.data_loader_benchmark.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--loaders'", ",", "dest", "=", "'num_loaders'", ",", "\n", "help", "=", "'Number of data loading threads'", ",", "\n", "default", "=", "4", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--dequeuers'", ",", "dest", "=", "'num_dequeuers'", ",", "\n", "help", "=", "'Number of dequeuers'", ",", "\n", "default", "=", "1", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--minibatch-queue-size'", ",", "dest", "=", "'minibatch_queue_size'", ",", "\n", "help", "=", "'Size of minibatch queue'", ",", "\n", "default", "=", "64", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--blobs-queue-capacity'", ",", "dest", "=", "'blobs_queue_capacity'", ",", "\n", "default", "=", "8", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--num-batches'", ",", "dest", "=", "'num_batches'", ",", "\n", "help", "=", "'Number of minibatches to run'", ",", "\n", "default", "=", "500", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--sleep'", ",", "dest", "=", "'sleep_time'", ",", "\n", "help", "=", "'Seconds sleep to emulate a network running'", ",", "\n", "default", "=", "0.1", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--cfg'", ",", "dest", "=", "'cfg_file'", ",", "help", "=", "'optional config file'", ",", "default", "=", "None", ",", "\n", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--x-factor'", ",", "dest", "=", "'x_factor'", ",", "help", "=", "'simulates x-factor more GPUs'", ",", "\n", "default", "=", "1", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--profiler'", ",", "dest", "=", "'profiler'", ",", "help", "=", "'profile minibatch load time'", ",", "\n", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'opts'", ",", "help", "=", "'See lib/core/config.py for all options'", ",", "default", "=", "None", ",", "\n", "nargs", "=", "argparse", ".", "REMAINDER", ")", "\n", "if", "len", "(", "sys", ".", "argv", ")", "==", "1", ":", "\n", "        ", "parser", ".", "print_help", "(", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tests.data_loader_benchmark.loader_loop": [[90, 99], ["utils.timer.Timer", "range", "utils.timer.Timer.tic", "roi_data_loader.get_next_minibatch", "utils.timer.Timer.toc", "print"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.timer.Timer.tic", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.loader.RoIDataLoader.get_next_minibatch", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.timer.Timer.toc"], ["", "def", "loader_loop", "(", "roi_data_loader", ")", ":", "\n", "    ", "load_timer", "=", "Timer", "(", ")", "\n", "iters", "=", "100", "\n", "for", "i", "in", "range", "(", "iters", ")", ":", "\n", "        ", "load_timer", ".", "tic", "(", ")", "\n", "roi_data_loader", ".", "get_next_minibatch", "(", ")", "\n", "load_timer", ".", "toc", "(", ")", "\n", "print", "(", "'{:d}/{:d}: Average get_next_minibatch time: {:.3f}s'", ".", "format", "(", "\n", "i", "+", "1", ",", "iters", ",", "load_timer", ".", "average_time", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tests.data_loader_benchmark.main": [[101, 155], ["logging.getLogger", "datasets.roidb.combined_roidb_for_training", "logging.getLogger.info", "roi_data.loader.RoIDataLoader", "roi_data.loader.RoIDataLoader.get_output_names", "caffe2.python.core.Net", "range", "logging.getLogger.info", "roi_data.loader.RoIDataLoader.register_sigint_handler", "roi_data.loader.RoIDataLoader.start", "range", "logging.getLogger.info", "roi_data.loader.RoIDataLoader.shutdown", "cProfile.runctx", "data_loader_benchmark.loader_loop", "time.time", "range", "logging.getLogger.info", "time.sleep", "len", "caffe2.python.core.NameScope", "str", "globals", "locals", "caffe2.python.workspace.RunNetOnce", "caffe2.python.core.DeviceScope", "core.Net.DequeueBlobs", "core.Net.Proto", "time.time", "roi_data.loader.RoIDataLoader._minibatch_queue.qsize", "caffe2.python.muji.OnGPU", "caffe2.python.core.ScopedName", "all_blobs.append", "caffe2.python.workspace.CreateBlob", "logging.getLogger.info"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.datasets.roidb.combined_roidb_for_training", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.loader.RoIDataLoader.get_output_names", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.loader.RoIDataLoader.register_sigint_handler", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.loader.RoIDataLoader.start", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.loader.RoIDataLoader.shutdown", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tests.data_loader_benchmark.loader_loop"], ["", "", "def", "main", "(", "opts", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "roidb", "=", "combined_roidb_for_training", "(", "\n", "cfg", ".", "TRAIN", ".", "DATASETS", ",", "cfg", ".", "TRAIN", ".", "PROPOSAL_FILES", ")", "\n", "logger", ".", "info", "(", "'{:d} roidb entries'", ".", "format", "(", "len", "(", "roidb", ")", ")", ")", "\n", "roi_data_loader", "=", "RoIDataLoader", "(", "\n", "roidb", ",", "\n", "num_loaders", "=", "opts", ".", "num_loaders", ",", "\n", "minibatch_queue_size", "=", "opts", ".", "minibatch_queue_size", ",", "\n", "blobs_queue_capacity", "=", "opts", ".", "blobs_queue_capacity", ")", "\n", "blob_names", "=", "roi_data_loader", ".", "get_output_names", "(", ")", "\n", "\n", "net", "=", "core", ".", "Net", "(", "'dequeue_net'", ")", "\n", "net", ".", "type", "=", "'dag'", "\n", "all_blobs", "=", "[", "]", "\n", "for", "gpu_id", "in", "range", "(", "cfg", ".", "NUM_GPUS", ")", ":", "\n", "        ", "with", "core", ".", "NameScope", "(", "'gpu_{}'", ".", "format", "(", "gpu_id", ")", ")", ":", "\n", "            ", "with", "core", ".", "DeviceScope", "(", "muji", ".", "OnGPU", "(", "gpu_id", ")", ")", ":", "\n", "                ", "for", "blob_name", "in", "blob_names", ":", "\n", "                    ", "blob", "=", "core", ".", "ScopedName", "(", "blob_name", ")", "\n", "all_blobs", ".", "append", "(", "blob", ")", "\n", "workspace", ".", "CreateBlob", "(", "blob", ")", "\n", "logger", ".", "info", "(", "'Creating blob: {}'", ".", "format", "(", "blob", ")", ")", "\n", "", "net", ".", "DequeueBlobs", "(", "\n", "roi_data_loader", ".", "_blobs_queue_name", ",", "blob_names", ")", "\n", "", "", "", "logger", ".", "info", "(", "\"Protobuf:\\n\"", "+", "str", "(", "net", ".", "Proto", "(", ")", ")", ")", "\n", "\n", "if", "opts", ".", "profiler", ":", "\n", "        ", "import", "cProfile", "\n", "cProfile", ".", "runctx", "(", "\n", "'loader_loop(roi_data_loader)'", ",", "globals", "(", ")", ",", "locals", "(", ")", ",", "\n", "sort", "=", "'cumulative'", ")", "\n", "", "else", ":", "\n", "        ", "loader_loop", "(", "roi_data_loader", ")", "\n", "\n", "", "roi_data_loader", ".", "register_sigint_handler", "(", ")", "\n", "roi_data_loader", ".", "start", "(", "prefill", "=", "True", ")", "\n", "total_time", "=", "0", "\n", "for", "i", "in", "range", "(", "opts", ".", "num_batches", ")", ":", "\n", "        ", "start_t", "=", "time", ".", "time", "(", ")", "\n", "for", "_", "in", "range", "(", "opts", ".", "x_factor", ")", ":", "\n", "            ", "workspace", ".", "RunNetOnce", "(", "net", ")", "\n", "", "total_time", "+=", "(", "time", ".", "time", "(", ")", "-", "start_t", ")", "/", "opts", ".", "x_factor", "\n", "logger", ".", "info", "(", "'{:d}/{:d}: Averge dequeue time: {:.3f}s  [{:d}/{:d}]'", ".", "\n", "format", "(", "i", "+", "1", ",", "opts", ".", "num_batches", ",", "total_time", "/", "(", "i", "+", "1", ")", ",", "\n", "roi_data_loader", ".", "_minibatch_queue", ".", "qsize", "(", ")", ",", "\n", "opts", ".", "minibatch_queue_size", ")", ")", "\n", "# Sleep to simulate the time taken by running a little network", "\n", "time", ".", "sleep", "(", "opts", ".", "sleep_time", ")", "\n", "# To inspect:", "\n", "# blobs = workspace.FetchBlobs(all_blobs)", "\n", "# from IPython import embed; embed()", "\n", "", "logger", ".", "info", "(", "'Shutting down data loader (EnqueueBlob errors are ok)...'", ")", "\n", "roi_data_loader", ".", "shutdown", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tests.test_batch_permutation_op.BatchPermutationOpTest._run_op_test": [[34, 54], ["caffe2.python.workspace.RunOperatorOnce", "caffe2.python.workspace.FetchBlob", "numpy.testing.assert_allclose", "caffe2.python.core.DeviceScope", "caffe2.python.core.CreateOperator", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.FeedBlob", "caffe2.python.gradient_checker.GradientChecker", "caffe2.python.gradient_checker.GradientChecker.CheckSimple", "test_batch_permutation_op.BatchPermutationOpTest.assertTrue", "caffe2.python.core.DeviceOption", "caffe2.python.core.DeviceOption"], "methods", ["None"], ["    ", "def", "_run_op_test", "(", "self", ",", "X", ",", "I", ",", "check_grad", "=", "False", ")", ":", "\n", "        ", "with", "core", ".", "DeviceScope", "(", "core", ".", "DeviceOption", "(", "caffe2_pb2", ".", "CUDA", ",", "0", ")", ")", ":", "\n", "            ", "op", "=", "core", ".", "CreateOperator", "(", "'BatchPermutation'", ",", "[", "'X'", ",", "'I'", "]", ",", "[", "'Y'", "]", ")", "\n", "workspace", ".", "FeedBlob", "(", "'X'", ",", "X", ")", "\n", "workspace", ".", "FeedBlob", "(", "'I'", ",", "I", ")", "\n", "", "workspace", ".", "RunOperatorOnce", "(", "op", ")", "\n", "Y", "=", "workspace", ".", "FetchBlob", "(", "'Y'", ")", "\n", "\n", "if", "check_grad", ":", "\n", "            ", "gc", "=", "gradient_checker", ".", "GradientChecker", "(", "\n", "stepsize", "=", "0.1", ",", "\n", "threshold", "=", "0.001", ",", "\n", "device_option", "=", "core", ".", "DeviceOption", "(", "caffe2_pb2", ".", "CUDA", ",", "0", ")", "\n", ")", "\n", "\n", "res", ",", "grad", ",", "grad_estimated", "=", "gc", ".", "CheckSimple", "(", "op", ",", "[", "X", ",", "I", "]", ",", "0", ",", "[", "0", "]", ")", "\n", "self", ".", "assertTrue", "(", "res", ",", "'Grad check failed'", ")", "\n", "\n", "", "Y_ref", "=", "X", "[", "I", "]", "\n", "np", ".", "testing", ".", "assert_allclose", "(", "Y", ",", "Y_ref", ",", "rtol", "=", "1e-5", ",", "atol", "=", "1e-08", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tests.test_batch_permutation_op.BatchPermutationOpTest._run_speed_test": [[55, 79], ["caffe2.python.core.Net", "caffe2.python.core.Net.BatchPermutation", "caffe2.python.core.Net.FlattenToVec", "caffe2.python.core.Net.AveragedLoss", "caffe2.python.core.Net.AddGradientOperators", "caffe2.python.workspace.CreateNet", "numpy.random.randn", "range", "caffe2.python.core.Net.Proto", "caffe2.python.core.Net.Proto", "numpy.random.permutation", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.RunNet", "numpy.testing.assert_allclose", "numpy.random.randn.astype", "numpy.random.permutation.astype", "caffe2.python.workspace.FetchBlob", "caffe2.python.core.Net.Proto"], "methods", ["None"], ["", "def", "_run_speed_test", "(", "self", ",", "iters", "=", "5", ",", "N", "=", "1024", ")", ":", "\n", "        ", "\"\"\"This function provides an example of how to benchmark custom\n        operators using the Caffe2 'prof_dag' network execution type. Please\n        note that for 'prof_dag' to work, Caffe2 must be compiled with profiling\n        support using the `-DUSE_PROF=ON` option passed to `cmake` when building\n        Caffe2.\n        \"\"\"", "\n", "net", "=", "core", ".", "Net", "(", "'test'", ")", "\n", "net", ".", "Proto", "(", ")", ".", "type", "=", "'prof_dag'", "\n", "net", ".", "Proto", "(", ")", ".", "num_workers", "=", "2", "\n", "Y", "=", "net", ".", "BatchPermutation", "(", "[", "'X'", ",", "'I'", "]", ",", "'Y'", ")", "\n", "Y_flat", "=", "net", ".", "FlattenToVec", "(", "[", "Y", "]", ",", "'Y_flat'", ")", "\n", "loss", "=", "net", ".", "AveragedLoss", "(", "[", "Y_flat", "]", ",", "'loss'", ")", "\n", "net", ".", "AddGradientOperators", "(", "[", "loss", "]", ")", "\n", "workspace", ".", "CreateNet", "(", "net", ")", "\n", "\n", "X", "=", "np", ".", "random", ".", "randn", "(", "N", ",", "256", ",", "14", ",", "14", ")", "\n", "for", "_i", "in", "range", "(", "iters", ")", ":", "\n", "            ", "I", "=", "np", ".", "random", ".", "permutation", "(", "N", ")", "\n", "workspace", ".", "FeedBlob", "(", "'X'", ",", "X", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "workspace", ".", "FeedBlob", "(", "'I'", ",", "I", ".", "astype", "(", "np", ".", "int32", ")", ")", "\n", "workspace", ".", "RunNet", "(", "net", ".", "Proto", "(", ")", ".", "name", ")", "\n", "np", ".", "testing", ".", "assert_allclose", "(", "\n", "workspace", ".", "FetchBlob", "(", "'Y'", ")", ",", "X", "[", "I", "]", ",", "rtol", "=", "1e-5", ",", "atol", "=", "1e-08", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tests.test_batch_permutation_op.BatchPermutationOpTest.test_forward_and_gradient": [[81, 93], ["numpy.random.randn().astype", "numpy.array", "test_batch_permutation_op.BatchPermutationOpTest._run_op_test", "numpy.random.randn().astype", "numpy.array", "test_batch_permutation_op.BatchPermutationOpTest._run_op_test", "numpy.random.randn().astype", "numpy.array", "test_batch_permutation_op.BatchPermutationOpTest._run_op_test", "numpy.random.permutation", "numpy.random.randn", "numpy.random.randn", "numpy.random.randn"], "methods", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tests.test_batch_permutation_op.BatchPermutationOpTest._run_op_test", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tests.test_batch_permutation_op.BatchPermutationOpTest._run_op_test", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tests.test_batch_permutation_op.BatchPermutationOpTest._run_op_test"], ["", "", "def", "test_forward_and_gradient", "(", "self", ")", ":", "\n", "        ", "A", "=", "np", ".", "random", ".", "randn", "(", "2", ",", "3", ",", "5", ",", "7", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "I", "=", "np", ".", "array", "(", "[", "0", ",", "1", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "self", ".", "_run_op_test", "(", "A", ",", "I", ",", "check_grad", "=", "True", ")", "\n", "\n", "A", "=", "np", ".", "random", ".", "randn", "(", "2", ",", "3", ",", "5", ",", "7", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "I", "=", "np", ".", "array", "(", "[", "1", ",", "0", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "self", ".", "_run_op_test", "(", "A", ",", "I", ",", "check_grad", "=", "True", ")", "\n", "\n", "A", "=", "np", ".", "random", ".", "randn", "(", "10", ",", "3", ",", "5", ",", "7", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "I", "=", "np", ".", "array", "(", "np", ".", "random", ".", "permutation", "(", "10", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "self", ".", "_run_op_test", "(", "A", ",", "I", ",", "check_grad", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tests.test_batch_permutation_op.BatchPermutationOpTest.test_size_exceptions": [[94, 99], ["numpy.random.randn().astype", "numpy.array", "numpy.random.permutation", "test_batch_permutation_op.BatchPermutationOpTest.assertRaises", "test_batch_permutation_op.BatchPermutationOpTest._run_op_test", "numpy.random.randn"], "methods", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tests.test_batch_permutation_op.BatchPermutationOpTest._run_op_test"], ["", "def", "test_size_exceptions", "(", "self", ")", ":", "\n", "        ", "A", "=", "np", ".", "random", ".", "randn", "(", "2", ",", "256", ",", "42", ",", "86", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "I", "=", "np", ".", "array", "(", "np", ".", "random", ".", "permutation", "(", "10", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "with", "self", ".", "assertRaises", "(", "RuntimeError", ")", ":", "\n", "            ", "self", ".", "_run_op_test", "(", "A", ",", "I", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tests.test_cfg.TestCfg.test_copy_cfg": [[33, 38], ["copy.deepcopy"], "methods", ["None"], ["    ", "def", "test_copy_cfg", "(", "self", ")", ":", "\n", "        ", "cfg2", "=", "copy", ".", "deepcopy", "(", "cfg", ")", "\n", "s", "=", "cfg", ".", "MODEL", ".", "TYPE", "\n", "cfg2", ".", "MODEL", ".", "TYPE", "=", "'dummy'", "\n", "assert", "cfg", ".", "MODEL", ".", "TYPE", "==", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tests.test_cfg.TestCfg.test_merge_cfg_from_cfg": [[39, 84], ["copy.deepcopy", "core.config.merge_cfg_from_cfg", "yaml.load", "core.config.merge_cfg_from_cfg", "utils.collections.AttrDict", "utils.collections.AttrDict", "core.config.merge_cfg_from_cfg", "utils.collections.AttrDict", "utils.collections.AttrDict", "utils.collections.AttrDict", "utils.collections.AttrDict", "core.config.merge_cfg_from_cfg", "utils.collections.AttrDict", "utils.collections.AttrDict", "yaml.dump", "test_cfg.TestCfg.assertRaises", "core.config.merge_cfg_from_cfg", "type", "test_cfg.TestCfg.assertRaises", "core.config.merge_cfg_from_cfg"], "methods", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.config.merge_cfg_from_cfg", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.config.merge_cfg_from_cfg", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.config.merge_cfg_from_cfg", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.config.merge_cfg_from_cfg", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.config.merge_cfg_from_cfg", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.config.merge_cfg_from_cfg"], ["", "def", "test_merge_cfg_from_cfg", "(", "self", ")", ":", "\n", "# Test: merge from deepcopy", "\n", "        ", "s", "=", "'dummy0'", "\n", "cfg2", "=", "copy", ".", "deepcopy", "(", "cfg", ")", "\n", "cfg2", ".", "MODEL", ".", "TYPE", "=", "s", "\n", "core", ".", "config", ".", "merge_cfg_from_cfg", "(", "cfg2", ")", "\n", "assert", "cfg", ".", "MODEL", ".", "TYPE", "==", "s", "\n", "\n", "# Test: merge from yaml", "\n", "s", "=", "'dummy1'", "\n", "cfg2", "=", "yaml", ".", "load", "(", "yaml", ".", "dump", "(", "cfg", ")", ")", "\n", "cfg2", ".", "MODEL", ".", "TYPE", "=", "s", "\n", "core", ".", "config", ".", "merge_cfg_from_cfg", "(", "cfg2", ")", "\n", "assert", "cfg", ".", "MODEL", ".", "TYPE", "==", "s", "\n", "\n", "# Test: merge with a valid key", "\n", "s", "=", "'dummy2'", "\n", "cfg2", "=", "AttrDict", "(", ")", "\n", "cfg2", ".", "MODEL", "=", "AttrDict", "(", ")", "\n", "cfg2", ".", "MODEL", ".", "TYPE", "=", "s", "\n", "core", ".", "config", ".", "merge_cfg_from_cfg", "(", "cfg2", ")", "\n", "assert", "cfg", ".", "MODEL", ".", "TYPE", "==", "s", "\n", "\n", "# Test: merge with an invalid key", "\n", "s", "=", "'dummy3'", "\n", "cfg2", "=", "AttrDict", "(", ")", "\n", "cfg2", ".", "FOO", "=", "AttrDict", "(", ")", "\n", "cfg2", ".", "FOO", ".", "BAR", "=", "s", "\n", "with", "self", ".", "assertRaises", "(", "KeyError", ")", ":", "\n", "            ", "core", ".", "config", ".", "merge_cfg_from_cfg", "(", "cfg2", ")", "\n", "\n", "# Test: merge with converted type", "\n", "", "cfg2", "=", "AttrDict", "(", ")", "\n", "cfg2", ".", "TRAIN", "=", "AttrDict", "(", ")", "\n", "cfg2", ".", "TRAIN", ".", "SCALES", "=", "[", "1", "]", "\n", "core", ".", "config", ".", "merge_cfg_from_cfg", "(", "cfg2", ")", "\n", "assert", "type", "(", "cfg", ".", "TRAIN", ".", "SCALES", ")", "is", "tuple", "\n", "assert", "cfg", ".", "TRAIN", ".", "SCALES", "[", "0", "]", "==", "1", "\n", "\n", "# Test: merge with invalid type", "\n", "cfg2", "=", "AttrDict", "(", ")", "\n", "cfg2", ".", "TRAIN", "=", "AttrDict", "(", ")", "\n", "cfg2", ".", "TRAIN", ".", "SCALES", "=", "1", "\n", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "core", ".", "config", ".", "merge_cfg_from_cfg", "(", "cfg2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tests.test_cfg.TestCfg.test_merge_cfg_from_file": [[85, 93], ["tempfile.NamedTemporaryFile", "yaml.dump", "core.config.merge_cfg_from_file"], "methods", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.config.merge_cfg_from_file"], ["", "", "def", "test_merge_cfg_from_file", "(", "self", ")", ":", "\n", "        ", "with", "tempfile", ".", "NamedTemporaryFile", "(", ")", "as", "f", ":", "\n", "            ", "yaml", ".", "dump", "(", "cfg", ",", "f", ")", "\n", "s", "=", "cfg", ".", "MODEL", ".", "TYPE", "\n", "cfg", ".", "MODEL", ".", "TYPE", "=", "'dummy'", "\n", "assert", "cfg", ".", "MODEL", ".", "TYPE", "!=", "s", "\n", "core", ".", "config", ".", "merge_cfg_from_file", "(", "f", ".", "name", ")", "\n", "assert", "cfg", ".", "MODEL", ".", "TYPE", "==", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tests.test_cfg.TestCfg.test_merge_cfg_from_list": [[94, 108], ["core.config.merge_cfg_from_list", "len", "type", "len"], "methods", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.config.merge_cfg_from_list"], ["", "", "def", "test_merge_cfg_from_list", "(", "self", ")", ":", "\n", "        ", "opts", "=", "[", "\n", "'TRAIN.SCALES'", ",", "'(100, )'", ",", "'MODEL.TYPE'", ",", "u'foobar'", ",", "'NUM_GPUS'", ",", "2", "\n", "]", "\n", "assert", "len", "(", "cfg", ".", "TRAIN", ".", "SCALES", ")", ">", "0", "\n", "assert", "cfg", ".", "TRAIN", ".", "SCALES", "[", "0", "]", "!=", "100", "\n", "assert", "cfg", ".", "MODEL", ".", "TYPE", "!=", "'foobar'", "\n", "assert", "cfg", ".", "NUM_GPUS", "!=", "2", "\n", "core", ".", "config", ".", "merge_cfg_from_list", "(", "opts", ")", "\n", "assert", "type", "(", "cfg", ".", "TRAIN", ".", "SCALES", ")", "is", "tuple", "\n", "assert", "len", "(", "cfg", ".", "TRAIN", ".", "SCALES", ")", "==", "1", "\n", "assert", "cfg", ".", "TRAIN", ".", "SCALES", "[", "0", "]", "==", "100", "\n", "assert", "cfg", ".", "MODEL", ".", "TYPE", "==", "'foobar'", "\n", "assert", "cfg", ".", "NUM_GPUS", "==", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tests.test_cfg.TestCfg.test_deprecated_key_from_list": [[109, 122], ["core.config.merge_cfg_from_list", "test_cfg.TestCfg.assertRaises", "test_cfg.TestCfg.assertRaises", "test_cfg.TestCfg.assertRaises", "test_cfg.TestCfg.assertRaises"], "methods", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.config.merge_cfg_from_list"], ["", "def", "test_deprecated_key_from_list", "(", "self", ")", ":", "\n", "# You should see logger messages like:", "\n", "#   \"Deprecated config key (ignoring): MODEL.DILATION\"", "\n", "        ", "opts", "=", "[", "'FINAL_MSG'", ",", "'foobar'", ",", "'MODEL.DILATION'", ",", "2", "]", "\n", "with", "self", ".", "assertRaises", "(", "AttributeError", ")", ":", "\n", "            ", "_", "=", "cfg", ".", "FINAL_MSG", "# noqa", "\n", "", "with", "self", ".", "assertRaises", "(", "AttributeError", ")", ":", "\n", "            ", "_", "=", "cfg", ".", "MODEL", ".", "DILATION", "# noqa", "\n", "", "core", ".", "config", ".", "merge_cfg_from_list", "(", "opts", ")", "\n", "with", "self", ".", "assertRaises", "(", "AttributeError", ")", ":", "\n", "            ", "_", "=", "cfg", ".", "FINAL_MSG", "# noqa", "\n", "", "with", "self", ".", "assertRaises", "(", "AttributeError", ")", ":", "\n", "            ", "_", "=", "cfg", ".", "MODEL", ".", "DILATION", "# noqa", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tests.test_cfg.TestCfg.test_deprecated_key_from_file": [[123, 135], ["tempfile.NamedTemporaryFile", "copy.deepcopy", "yaml.dump", "core.config.merge_cfg_from_file", "test_cfg.TestCfg.assertRaises", "test_cfg.TestCfg.assertRaises"], "methods", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.config.merge_cfg_from_file"], ["", "", "def", "test_deprecated_key_from_file", "(", "self", ")", ":", "\n", "# You should see logger messages like:", "\n", "#   \"Deprecated config key (ignoring): MODEL.DILATION\"", "\n", "        ", "with", "tempfile", ".", "NamedTemporaryFile", "(", ")", "as", "f", ":", "\n", "            ", "cfg2", "=", "copy", ".", "deepcopy", "(", "cfg", ")", "\n", "cfg2", ".", "MODEL", ".", "DILATION", "=", "2", "\n", "yaml", ".", "dump", "(", "cfg2", ",", "f", ")", "\n", "with", "self", ".", "assertRaises", "(", "AttributeError", ")", ":", "\n", "                ", "_", "=", "cfg", ".", "MODEL", ".", "DILATION", "# noqa", "\n", "", "core", ".", "config", ".", "merge_cfg_from_file", "(", "f", ".", "name", ")", "\n", "with", "self", ".", "assertRaises", "(", "AttributeError", ")", ":", "\n", "                ", "_", "=", "cfg", ".", "MODEL", ".", "DILATION", "# noqa", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tests.test_cfg.TestCfg.test_renamed_key_from_list": [[136, 145], ["test_cfg.TestCfg.assertRaises", "test_cfg.TestCfg.assertRaises", "core.config.merge_cfg_from_list"], "methods", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.config.merge_cfg_from_list"], ["", "", "", "def", "test_renamed_key_from_list", "(", "self", ")", ":", "\n", "# You should see logger messages like:", "\n", "#  \"Key EXAMPLE.RENAMED.KEY was renamed to EXAMPLE.KEY;", "\n", "#  please update your config\"", "\n", "        ", "opts", "=", "[", "'EXAMPLE.RENAMED.KEY'", ",", "'foobar'", "]", "\n", "with", "self", ".", "assertRaises", "(", "AttributeError", ")", ":", "\n", "            ", "_", "=", "cfg", ".", "EXAMPLE", ".", "RENAMED", ".", "KEY", "# noqa", "\n", "", "with", "self", ".", "assertRaises", "(", "KeyError", ")", ":", "\n", "            ", "core", ".", "config", ".", "merge_cfg_from_list", "(", "opts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tests.test_cfg.TestCfg.test_renamed_key_from_file": [[146, 160], ["tempfile.NamedTemporaryFile", "copy.deepcopy", "utils.collections.AttrDict", "utils.collections.AttrDict", "yaml.dump", "test_cfg.TestCfg.assertRaises", "test_cfg.TestCfg.assertRaises", "core.config.merge_cfg_from_file"], "methods", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.core.config.merge_cfg_from_file"], ["", "", "def", "test_renamed_key_from_file", "(", "self", ")", ":", "\n", "# You should see logger messages like:", "\n", "#  \"Key EXAMPLE.RENAMED.KEY was renamed to EXAMPLE.KEY;", "\n", "#  please update your config\"", "\n", "        ", "with", "tempfile", ".", "NamedTemporaryFile", "(", ")", "as", "f", ":", "\n", "            ", "cfg2", "=", "copy", ".", "deepcopy", "(", "cfg", ")", "\n", "cfg2", ".", "EXAMPLE", "=", "AttrDict", "(", ")", "\n", "cfg2", ".", "EXAMPLE", ".", "RENAMED", "=", "AttrDict", "(", ")", "\n", "cfg2", ".", "EXAMPLE", ".", "RENAMED", ".", "KEY", "=", "'foobar'", "\n", "yaml", ".", "dump", "(", "cfg2", ",", "f", ")", "\n", "with", "self", ".", "assertRaises", "(", "AttributeError", ")", ":", "\n", "                ", "_", "=", "cfg", ".", "EXAMPLE", ".", "RENAMED", ".", "KEY", "# noqa", "\n", "", "with", "self", ".", "assertRaises", "(", "KeyError", ")", ":", "\n", "                ", "core", ".", "config", ".", "merge_cfg_from_file", "(", "f", ".", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tests.test_zero_even_op.ZeroEvenOpTest._run_zero_even_op": [[18, 24], ["caffe2.python.core.CreateOperator", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.RunOperatorOnce", "caffe2.python.workspace.FetchBlob"], "methods", ["None"], ["    ", "def", "_run_zero_even_op", "(", "self", ",", "X", ")", ":", "\n", "        ", "op", "=", "core", ".", "CreateOperator", "(", "'ZeroEven'", ",", "[", "'X'", "]", ",", "[", "'Y'", "]", ")", "\n", "workspace", ".", "FeedBlob", "(", "'X'", ",", "X", ")", "\n", "workspace", ".", "RunOperatorOnce", "(", "op", ")", "\n", "Y", "=", "workspace", ".", "FetchBlob", "(", "'Y'", ")", "\n", "return", "Y", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tests.test_zero_even_op.ZeroEvenOpTest._run_zero_even_op_gpu": [[25, 32], ["caffe2.python.workspace.RunOperatorOnce", "caffe2.python.workspace.FetchBlob", "caffe2.python.core.DeviceScope", "caffe2.python.core.CreateOperator", "caffe2.python.workspace.FeedBlob", "caffe2.python.core.DeviceOption"], "methods", ["None"], ["", "def", "_run_zero_even_op_gpu", "(", "self", ",", "X", ")", ":", "\n", "        ", "with", "core", ".", "DeviceScope", "(", "core", ".", "DeviceOption", "(", "caffe2_pb2", ".", "CUDA", ",", "0", ")", ")", ":", "\n", "            ", "op", "=", "core", ".", "CreateOperator", "(", "'ZeroEven'", ",", "[", "'X'", "]", ",", "[", "'Y'", "]", ")", "\n", "workspace", ".", "FeedBlob", "(", "'X'", ",", "X", ")", "\n", "", "workspace", ".", "RunOperatorOnce", "(", "op", ")", "\n", "Y", "=", "workspace", ".", "FetchBlob", "(", "'Y'", ")", "\n", "return", "Y", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tests.test_zero_even_op.ZeroEvenOpTest.test_throws_on_non_1D_arrays": [[33, 37], ["numpy.zeros", "test_zero_even_op.ZeroEvenOpTest.assertRaisesRegexp", "test_zero_even_op.ZeroEvenOpTest._run_zero_even_op"], "methods", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.blob.zeros", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tests.test_zero_even_op.ZeroEvenOpTest._run_zero_even_op"], ["", "def", "test_throws_on_non_1D_arrays", "(", "self", ")", ":", "\n", "        ", "X", "=", "np", ".", "zeros", "(", "(", "2", ",", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "with", "self", ".", "assertRaisesRegexp", "(", "RuntimeError", ",", "'X\\.ndim\\(\\) == 1'", ")", ":", "\n", "            ", "self", ".", "_run_zero_even_op", "(", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tests.test_zero_even_op.ZeroEvenOpTest.test_handles_empty_arrays": [[38, 43], ["numpy.array", "numpy.copy", "test_zero_even_op.ZeroEvenOpTest._run_zero_even_op", "numpy.testing.assert_allclose"], "methods", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tests.test_zero_even_op.ZeroEvenOpTest._run_zero_even_op"], ["", "", "def", "test_handles_empty_arrays", "(", "self", ")", ":", "\n", "        ", "X", "=", "np", ".", "array", "(", "[", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "Y_exp", "=", "np", ".", "copy", "(", "X", ")", "\n", "Y_act", "=", "self", ".", "_run_zero_even_op", "(", "X", ")", "\n", "np", ".", "testing", ".", "assert_allclose", "(", "Y_act", ",", "Y_exp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tests.test_zero_even_op.ZeroEvenOpTest.test_sets_vals_at_even_inds_to_zero": [[44, 49], ["numpy.array", "numpy.array", "test_zero_even_op.ZeroEvenOpTest._run_zero_even_op", "numpy.testing.assert_allclose"], "methods", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tests.test_zero_even_op.ZeroEvenOpTest._run_zero_even_op"], ["", "def", "test_sets_vals_at_even_inds_to_zero", "(", "self", ")", ":", "\n", "        ", "X", "=", "np", ".", "array", "(", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "Y_exp", "=", "np", ".", "array", "(", "[", "0", ",", "1", ",", "0", ",", "3", ",", "0", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "Y_act", "=", "self", ".", "_run_zero_even_op", "(", "X", ")", "\n", "np", ".", "testing", ".", "assert_allclose", "(", "Y_act", "[", "0", ":", ":", "2", "]", ",", "Y_exp", "[", "0", ":", ":", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tests.test_zero_even_op.ZeroEvenOpTest.test_preserves_vals_at_odd_inds": [[50, 55], ["numpy.array", "numpy.array", "test_zero_even_op.ZeroEvenOpTest._run_zero_even_op", "numpy.testing.assert_allclose"], "methods", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tests.test_zero_even_op.ZeroEvenOpTest._run_zero_even_op"], ["", "def", "test_preserves_vals_at_odd_inds", "(", "self", ")", ":", "\n", "        ", "X", "=", "np", ".", "array", "(", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "Y_exp", "=", "np", ".", "array", "(", "[", "0", ",", "1", ",", "0", ",", "3", ",", "0", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "Y_act", "=", "self", ".", "_run_zero_even_op", "(", "X", ")", "\n", "np", ".", "testing", ".", "assert_allclose", "(", "Y_act", "[", "1", ":", ":", "2", "]", ",", "Y_exp", "[", "1", ":", ":", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tests.test_zero_even_op.ZeroEvenOpTest.test_handles_even_length_arrays": [[56, 62], ["numpy.random.rand().astype", "numpy.copy", "test_zero_even_op.ZeroEvenOpTest._run_zero_even_op", "numpy.testing.assert_allclose", "numpy.random.rand"], "methods", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tests.test_zero_even_op.ZeroEvenOpTest._run_zero_even_op"], ["", "def", "test_handles_even_length_arrays", "(", "self", ")", ":", "\n", "        ", "X", "=", "np", ".", "random", ".", "rand", "(", "64", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "Y_exp", "=", "np", ".", "copy", "(", "X", ")", "\n", "Y_exp", "[", "0", ":", ":", "2", "]", "=", "0.0", "\n", "Y_act", "=", "self", ".", "_run_zero_even_op", "(", "X", ")", "\n", "np", ".", "testing", ".", "assert_allclose", "(", "Y_act", ",", "Y_exp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tests.test_zero_even_op.ZeroEvenOpTest.test_handles_odd_length_arrays": [[63, 69], ["numpy.random.randn().astype", "numpy.copy", "test_zero_even_op.ZeroEvenOpTest._run_zero_even_op", "numpy.testing.assert_allclose", "numpy.random.randn"], "methods", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tests.test_zero_even_op.ZeroEvenOpTest._run_zero_even_op"], ["", "def", "test_handles_odd_length_arrays", "(", "self", ")", ":", "\n", "        ", "X", "=", "np", ".", "random", ".", "randn", "(", "77", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "Y_exp", "=", "np", ".", "copy", "(", "X", ")", "\n", "Y_exp", "[", "0", ":", ":", "2", "]", "=", "0.0", "\n", "Y_act", "=", "self", ".", "_run_zero_even_op", "(", "X", ")", "\n", "np", ".", "testing", ".", "assert_allclose", "(", "Y_act", ",", "Y_exp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tests.test_zero_even_op.ZeroEvenOpTest.test_gpu_throws_on_non_1D_arrays": [[70, 74], ["numpy.zeros", "test_zero_even_op.ZeroEvenOpTest.assertRaisesRegexp", "test_zero_even_op.ZeroEvenOpTest._run_zero_even_op_gpu"], "methods", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.blob.zeros", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tests.test_zero_even_op.ZeroEvenOpTest._run_zero_even_op_gpu"], ["", "def", "test_gpu_throws_on_non_1D_arrays", "(", "self", ")", ":", "\n", "        ", "X", "=", "np", ".", "zeros", "(", "(", "2", ",", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "with", "self", ".", "assertRaisesRegexp", "(", "RuntimeError", ",", "'X\\.ndim\\(\\) == 1'", ")", ":", "\n", "            ", "self", ".", "_run_zero_even_op_gpu", "(", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tests.test_zero_even_op.ZeroEvenOpTest.test_gpu_handles_empty_arrays": [[75, 80], ["numpy.array", "numpy.copy", "test_zero_even_op.ZeroEvenOpTest._run_zero_even_op_gpu", "numpy.testing.assert_allclose"], "methods", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tests.test_zero_even_op.ZeroEvenOpTest._run_zero_even_op_gpu"], ["", "", "def", "test_gpu_handles_empty_arrays", "(", "self", ")", ":", "\n", "        ", "X", "=", "np", ".", "array", "(", "[", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "Y_exp", "=", "np", ".", "copy", "(", "X", ")", "\n", "Y_act", "=", "self", ".", "_run_zero_even_op_gpu", "(", "X", ")", "\n", "np", ".", "testing", ".", "assert_allclose", "(", "Y_act", ",", "Y_exp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tests.test_zero_even_op.ZeroEvenOpTest.test_gpu_sets_vals_at_even_inds_to_zero": [[81, 86], ["numpy.array", "numpy.array", "test_zero_even_op.ZeroEvenOpTest._run_zero_even_op_gpu", "numpy.testing.assert_allclose"], "methods", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tests.test_zero_even_op.ZeroEvenOpTest._run_zero_even_op_gpu"], ["", "def", "test_gpu_sets_vals_at_even_inds_to_zero", "(", "self", ")", ":", "\n", "        ", "X", "=", "np", ".", "array", "(", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "Y_exp", "=", "np", ".", "array", "(", "[", "0", ",", "1", ",", "0", ",", "3", ",", "0", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "Y_act", "=", "self", ".", "_run_zero_even_op_gpu", "(", "X", ")", "\n", "np", ".", "testing", ".", "assert_allclose", "(", "Y_act", "[", "0", ":", ":", "2", "]", ",", "Y_exp", "[", "0", ":", ":", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tests.test_zero_even_op.ZeroEvenOpTest.test_gpu_preserves_vals_at_odd_inds": [[87, 92], ["numpy.array", "numpy.array", "test_zero_even_op.ZeroEvenOpTest._run_zero_even_op_gpu", "numpy.testing.assert_allclose"], "methods", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tests.test_zero_even_op.ZeroEvenOpTest._run_zero_even_op_gpu"], ["", "def", "test_gpu_preserves_vals_at_odd_inds", "(", "self", ")", ":", "\n", "        ", "X", "=", "np", ".", "array", "(", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "Y_exp", "=", "np", ".", "array", "(", "[", "0", ",", "1", ",", "0", ",", "3", ",", "0", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "Y_act", "=", "self", ".", "_run_zero_even_op_gpu", "(", "X", ")", "\n", "np", ".", "testing", ".", "assert_allclose", "(", "Y_act", "[", "1", ":", ":", "2", "]", ",", "Y_exp", "[", "1", ":", ":", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tests.test_zero_even_op.ZeroEvenOpTest.test_gpu_handles_even_length_arrays": [[93, 99], ["numpy.random.rand().astype", "numpy.copy", "test_zero_even_op.ZeroEvenOpTest._run_zero_even_op_gpu", "numpy.testing.assert_allclose", "numpy.random.rand"], "methods", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tests.test_zero_even_op.ZeroEvenOpTest._run_zero_even_op_gpu"], ["", "def", "test_gpu_handles_even_length_arrays", "(", "self", ")", ":", "\n", "        ", "X", "=", "np", ".", "random", ".", "rand", "(", "64", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "Y_exp", "=", "np", ".", "copy", "(", "X", ")", "\n", "Y_exp", "[", "0", ":", ":", "2", "]", "=", "0.0", "\n", "Y_act", "=", "self", ".", "_run_zero_even_op_gpu", "(", "X", ")", "\n", "np", ".", "testing", ".", "assert_allclose", "(", "Y_act", ",", "Y_exp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tests.test_zero_even_op.ZeroEvenOpTest.test_gpu_handles_odd_length_arrays": [[100, 106], ["numpy.random.randn().astype", "numpy.copy", "test_zero_even_op.ZeroEvenOpTest._run_zero_even_op_gpu", "numpy.testing.assert_allclose", "numpy.random.randn"], "methods", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tests.test_zero_even_op.ZeroEvenOpTest._run_zero_even_op_gpu"], ["", "def", "test_gpu_handles_odd_length_arrays", "(", "self", ")", ":", "\n", "        ", "X", "=", "np", ".", "random", ".", "randn", "(", "77", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "Y_exp", "=", "np", ".", "copy", "(", "X", ")", "\n", "Y_exp", "[", "0", ":", ":", "2", "]", "=", "0.0", "\n", "Y_act", "=", "self", ".", "_run_zero_even_op_gpu", "(", "X", ")", "\n", "np", ".", "testing", ".", "assert_allclose", "(", "Y_act", ",", "Y_exp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tests.test_loader.TestRoIDataLoader.test_two_parallel_loaders": [[84, 101], ["mock.patch", "mock.patch", "numpy.random.rand().astype", "test_loader.create_loader_and_network", "numpy.random.rand().astype", "test_loader.create_loader_and_network", "range", "test_loader.shutdown", "train_loader.shutdown", "test_loader.run_net", "test_loader.TestRoIDataLoader.assertEqual", "test_loader.run_net", "test_loader.TestRoIDataLoader.assertEqual", "numpy.random.rand", "numpy.random.rand", "data[].tolist", "numpy.random.rand().astype.tolist", "data[].tolist", "numpy.random.rand().astype.tolist"], "methods", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tests.test_loader.create_loader_and_network", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tests.test_loader.create_loader_and_network", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.loader.RoIDataLoader.shutdown", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.loader.RoIDataLoader.shutdown", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tests.test_loader.run_net", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tests.test_loader.run_net"], ["    ", "@", "mock", ".", "patch", "(", "'roi_data.loader.get_minibatch_blob_names'", ",", "\n", "return_value", "=", "[", "u'data'", "]", ")", "\n", "@", "mock", ".", "patch", "(", "'roi_data.loader.get_minibatch'", ",", "side_effect", "=", "get_roidb_blobs", ")", "\n", "def", "test_two_parallel_loaders", "(", "self", ",", "_1", ",", "_2", ")", ":", "\n", "        ", "train_data", "=", "np", ".", "random", ".", "rand", "(", "2", ",", "3", ",", "3", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "train_loader", ",", "train_net", "=", "create_loader_and_network", "(", "train_data", ",", "\n", "'dequeue_net_train'", ")", "\n", "test_data", "=", "np", ".", "random", ".", "rand", "(", "2", ",", "4", ",", "4", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "test_loader", ",", "test_net", "=", "create_loader_and_network", "(", "test_data", ",", "\n", "'dequeue_net_test'", ")", "\n", "for", "_", "in", "range", "(", "5", ")", ":", "\n", "            ", "data", "=", "run_net", "(", "train_net", ")", "\n", "self", ".", "assertEqual", "(", "data", "[", "0", "]", ".", "tolist", "(", ")", ",", "train_data", ".", "tolist", "(", ")", ")", "\n", "data", "=", "run_net", "(", "test_net", ")", "\n", "self", ".", "assertEqual", "(", "data", "[", "0", "]", ".", "tolist", "(", ")", ",", "test_data", ".", "tolist", "(", ")", ")", "\n", "", "test_loader", ".", "shutdown", "(", ")", "\n", "train_loader", ".", "shutdown", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tests.test_loader.get_roidb_blobs": [[33, 37], ["numpy.stack"], "function", ["None"], ["def", "get_roidb_blobs", "(", "roidb", ")", ":", "\n", "    ", "blobs", "=", "{", "}", "\n", "blobs", "[", "'data'", "]", "=", "np", ".", "stack", "(", "[", "entry", "[", "'data'", "]", "for", "entry", "in", "roidb", "]", ")", "\n", "return", "blobs", ",", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tests.test_loader.get_net": [[39, 55], ["logging.getLogger", "data_loader.get_output_names", "caffe2.python.core.Net", "range", "logging.getLogger.info", "caffe2.python.core.NameScope", "str", "caffe2.python.core.DeviceScope", "core.Net.DequeueBlobs", "core.Net.Proto", "caffe2.python.muji.OnGPU", "caffe2.python.core.ScopedName", "caffe2.python.workspace.CreateBlob"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.loader.RoIDataLoader.get_output_names"], ["", "def", "get_net", "(", "data_loader", ",", "name", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "blob_names", "=", "data_loader", ".", "get_output_names", "(", ")", "\n", "net", "=", "core", ".", "Net", "(", "name", ")", "\n", "net", ".", "type", "=", "'dag'", "\n", "for", "gpu_id", "in", "range", "(", "cfg", ".", "NUM_GPUS", ")", ":", "\n", "        ", "with", "core", ".", "NameScope", "(", "'gpu_{}'", ".", "format", "(", "gpu_id", ")", ")", ":", "\n", "            ", "with", "core", ".", "DeviceScope", "(", "muji", ".", "OnGPU", "(", "gpu_id", ")", ")", ":", "\n", "                ", "for", "blob_name", "in", "blob_names", ":", "\n", "                    ", "blob", "=", "core", ".", "ScopedName", "(", "blob_name", ")", "\n", "workspace", ".", "CreateBlob", "(", "blob", ")", "\n", "", "net", ".", "DequeueBlobs", "(", "\n", "data_loader", ".", "_blobs_queue_name", ",", "blob_names", ")", "\n", "", "", "", "logger", ".", "info", "(", "\"Protobuf:\\n\"", "+", "str", "(", "net", ".", "Proto", "(", ")", ")", ")", "\n", "\n", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tests.test_loader.get_roidb_sample_data": [[57, 62], ["range", "numpy.random.randint", "roidb.append"], "function", ["None"], ["", "def", "get_roidb_sample_data", "(", "sample_data", ")", ":", "\n", "    ", "roidb", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "np", ".", "random", ".", "randint", "(", "4", ",", "10", ")", ")", ":", "\n", "        ", "roidb", ".", "append", "(", "{", "'data'", ":", "sample_data", "}", ")", "\n", "", "return", "roidb", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tests.test_loader.create_loader_and_network": [[64, 71], ["test_loader.get_roidb_sample_data", "roi_data.loader.RoIDataLoader", "test_loader.get_net", "roi_data.loader.RoIDataLoader.register_sigint_handler", "roi_data.loader.RoIDataLoader.start"], "function", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tests.test_loader.get_roidb_sample_data", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tests.test_loader.get_net", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.loader.RoIDataLoader.register_sigint_handler", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.roi_data.loader.RoIDataLoader.start"], ["", "def", "create_loader_and_network", "(", "sample_data", ",", "name", ")", ":", "\n", "    ", "roidb", "=", "get_roidb_sample_data", "(", "sample_data", ")", "\n", "loader", "=", "RoIDataLoader", "(", "roidb", ")", "\n", "net", "=", "get_net", "(", "loader", ",", "'dequeue_net_train'", ")", "\n", "loader", ".", "register_sigint_handler", "(", ")", "\n", "loader", ".", "start", "(", "prefill", "=", "False", ")", "\n", "return", "loader", ",", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tests.test_loader.run_net": [[73, 81], ["caffe2.python.workspace.RunNetOnce", "caffe2.python.core.DeviceOption", "caffe2.python.core.NameScope", "caffe2.python.core.DeviceScope", "caffe2.python.workspace.FetchBlob", "caffe2.python.core.ScopedName"], "function", ["None"], ["", "def", "run_net", "(", "net", ")", ":", "\n", "    ", "workspace", ".", "RunNetOnce", "(", "net", ")", "\n", "gpu_dev", "=", "core", ".", "DeviceOption", "(", "caffe2_pb2", ".", "CUDA", ",", "0", ")", "\n", "name_scope", "=", "'gpu_{}'", ".", "format", "(", "0", ")", "\n", "with", "core", ".", "NameScope", "(", "name_scope", ")", ":", "\n", "        ", "with", "core", ".", "DeviceScope", "(", "gpu_dev", ")", ":", "\n", "            ", "data", "=", "workspace", ".", "FetchBlob", "(", "core", ".", "ScopedName", "(", "'data'", ")", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tests.test_smooth_l1_loss_op.SmoothL1LossTest.test_forward_and_gradient": [[34, 74], ["numpy.random.randn().astype", "numpy.random.randn().astype", "numpy.random.randn().astype", "numpy.random.randn().astype", "numpy.random.random", "numpy.random.random", "caffe2.python.core.CreateOperator", "caffe2.python.gradient_checker.GradientChecker", "caffe2.python.gradient_checker.GradientChecker.CheckSimple", "test_smooth_l1_loss_op.SmoothL1LossTest.assertTrue", "test_smooth_l1_loss_op.SmoothL1LossTest.assertTrue", "numpy.random.randn", "numpy.random.randn", "numpy.random.randn", "numpy.random.randn", "caffe2.python.core.DeviceOption"], "methods", ["None"], ["    ", "def", "test_forward_and_gradient", "(", "self", ")", ":", "\n", "        ", "Y", "=", "np", ".", "random", ".", "randn", "(", "128", ",", "4", "*", "21", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "Y_hat", "=", "np", ".", "random", ".", "randn", "(", "128", ",", "4", "*", "21", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "inside_weights", "=", "np", ".", "random", ".", "randn", "(", "128", ",", "4", "*", "21", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "inside_weights", "[", "inside_weights", "<", "0", "]", "=", "0", "\n", "outside_weights", "=", "np", ".", "random", ".", "randn", "(", "128", ",", "4", "*", "21", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "outside_weights", "[", "outside_weights", "<", "0", "]", "=", "0", "\n", "scale", "=", "np", ".", "random", ".", "random", "(", ")", "\n", "beta", "=", "np", ".", "random", ".", "random", "(", ")", "\n", "\n", "op", "=", "core", ".", "CreateOperator", "(", "\n", "'SmoothL1Loss'", ",", "[", "'Y_hat'", ",", "'Y'", ",", "'inside_weights'", ",", "'outside_weights'", "]", ",", "\n", "[", "'loss'", "]", ",", "\n", "scale", "=", "scale", ",", "\n", "beta", "=", "beta", "\n", ")", "\n", "\n", "gc", "=", "gradient_checker", ".", "GradientChecker", "(", "\n", "stepsize", "=", "0.005", ",", "\n", "threshold", "=", "0.005", ",", "\n", "device_option", "=", "core", ".", "DeviceOption", "(", "caffe2_pb2", ".", "CUDA", ",", "0", ")", "\n", ")", "\n", "\n", "res", ",", "grad", ",", "grad_estimated", "=", "gc", ".", "CheckSimple", "(", "\n", "op", ",", "[", "Y_hat", ",", "Y", ",", "inside_weights", ",", "outside_weights", "]", ",", "0", ",", "[", "0", "]", "\n", ")", "\n", "\n", "self", ".", "assertTrue", "(", "\n", "grad", ".", "shape", "==", "grad_estimated", ".", "shape", ",", "\n", "'Fail check: grad.shape != grad_estimated.shape'", "\n", ")", "\n", "\n", "# To inspect the gradient and estimated gradient:", "\n", "# np.set_printoptions(precision=3, suppress=True)", "\n", "# print('grad:')", "\n", "# print(grad)", "\n", "# print('grad_estimated:')", "\n", "# print(grad_estimated)", "\n", "\n", "self", ".", "assertTrue", "(", "res", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tests.test_spatial_narrow_as_op.SpatialNarrowAsOpTest._run_test": [[34, 55], ["caffe2.python.workspace.RunOperatorOnce", "caffe2.python.workspace.FetchBlob", "numpy.testing.assert_allclose", "caffe2.python.core.DeviceScope", "caffe2.python.core.CreateOperator", "caffe2.python.workspace.FeedBlob", "caffe2.python.workspace.FeedBlob", "caffe2.python.gradient_checker.GradientChecker", "caffe2.python.gradient_checker.GradientChecker.CheckSimple", "test_spatial_narrow_as_op.SpatialNarrowAsOpTest.assertTrue", "caffe2.python.core.DeviceOption", "caffe2.python.core.DeviceOption"], "methods", ["None"], ["    ", "def", "_run_test", "(", "self", ",", "A", ",", "B", ",", "check_grad", "=", "False", ")", ":", "\n", "        ", "with", "core", ".", "DeviceScope", "(", "core", ".", "DeviceOption", "(", "caffe2_pb2", ".", "CUDA", ",", "0", ")", ")", ":", "\n", "            ", "op", "=", "core", ".", "CreateOperator", "(", "'SpatialNarrowAs'", ",", "[", "'A'", ",", "'B'", "]", ",", "[", "'C'", "]", ")", "\n", "workspace", ".", "FeedBlob", "(", "'A'", ",", "A", ")", "\n", "workspace", ".", "FeedBlob", "(", "'B'", ",", "B", ")", "\n", "", "workspace", ".", "RunOperatorOnce", "(", "op", ")", "\n", "C", "=", "workspace", ".", "FetchBlob", "(", "'C'", ")", "\n", "\n", "if", "check_grad", ":", "\n", "            ", "gc", "=", "gradient_checker", ".", "GradientChecker", "(", "\n", "stepsize", "=", "0.005", ",", "\n", "threshold", "=", "0.005", ",", "\n", "device_option", "=", "core", ".", "DeviceOption", "(", "caffe2_pb2", ".", "CUDA", ",", "0", ")", "\n", ")", "\n", "\n", "res", ",", "grad", ",", "grad_estimated", "=", "gc", ".", "CheckSimple", "(", "op", ",", "[", "A", ",", "B", "]", ",", "0", ",", "[", "0", "]", ")", "\n", "self", ".", "assertTrue", "(", "res", ",", "'Grad check failed'", ")", "\n", "\n", "", "dims", "=", "C", ".", "shape", "\n", "C_ref", "=", "A", "[", ":", "dims", "[", "0", "]", ",", ":", "dims", "[", "1", "]", ",", ":", "dims", "[", "2", "]", ",", ":", "dims", "[", "3", "]", "]", "\n", "np", ".", "testing", ".", "assert_allclose", "(", "C", ",", "C_ref", ",", "rtol", "=", "1e-5", ",", "atol", "=", "1e-08", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tests.test_spatial_narrow_as_op.SpatialNarrowAsOpTest.test_small_forward_and_gradient": [[56, 64], ["numpy.random.randn().astype", "numpy.random.randn().astype", "test_spatial_narrow_as_op.SpatialNarrowAsOpTest._run_test", "numpy.random.randn().astype", "numpy.random.randn().astype", "test_spatial_narrow_as_op.SpatialNarrowAsOpTest._run_test", "numpy.random.randn", "numpy.random.randn", "numpy.random.randn", "numpy.random.randn"], "methods", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tests.test_spatial_narrow_as_op.SpatialNarrowAsOpTest._run_test", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tests.test_spatial_narrow_as_op.SpatialNarrowAsOpTest._run_test"], ["", "def", "test_small_forward_and_gradient", "(", "self", ")", ":", "\n", "        ", "A", "=", "np", ".", "random", ".", "randn", "(", "2", ",", "3", ",", "5", ",", "7", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "B", "=", "np", ".", "random", ".", "randn", "(", "2", ",", "3", ",", "2", ",", "2", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "self", ".", "_run_test", "(", "A", ",", "B", ",", "check_grad", "=", "True", ")", "\n", "\n", "A", "=", "np", ".", "random", ".", "randn", "(", "2", ",", "3", ",", "5", ",", "7", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "B", "=", "np", ".", "random", ".", "randn", "(", "2", ",", "3", ",", "5", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "self", ".", "_run_test", "(", "A", ",", "B", ",", "check_grad", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tests.test_spatial_narrow_as_op.SpatialNarrowAsOpTest.test_large_forward": [[65, 73], ["numpy.random.randn().astype", "numpy.random.randn().astype", "test_spatial_narrow_as_op.SpatialNarrowAsOpTest._run_test", "numpy.random.randn().astype", "numpy.random.randn().astype", "test_spatial_narrow_as_op.SpatialNarrowAsOpTest._run_test", "numpy.random.randn", "numpy.random.randn", "numpy.random.randn", "numpy.random.randn"], "methods", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tests.test_spatial_narrow_as_op.SpatialNarrowAsOpTest._run_test", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tests.test_spatial_narrow_as_op.SpatialNarrowAsOpTest._run_test"], ["", "def", "test_large_forward", "(", "self", ")", ":", "\n", "        ", "A", "=", "np", ".", "random", ".", "randn", "(", "2", ",", "256", ",", "42", ",", "100", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "B", "=", "np", ".", "random", ".", "randn", "(", "2", ",", "256", ",", "35", ",", "87", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "self", ".", "_run_test", "(", "A", ",", "B", ")", "\n", "\n", "A", "=", "np", ".", "random", ".", "randn", "(", "2", ",", "256", ",", "42", ",", "87", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "B", "=", "np", ".", "random", ".", "randn", "(", "2", ",", "256", ",", "35", ",", "87", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "self", ".", "_run_test", "(", "A", ",", "B", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tests.test_spatial_narrow_as_op.SpatialNarrowAsOpTest.test_size_exceptions": [[74, 84], ["numpy.random.randn().astype", "numpy.random.randn().astype", "numpy.random.randn().astype", "numpy.random.randn().astype", "test_spatial_narrow_as_op.SpatialNarrowAsOpTest.assertRaises", "test_spatial_narrow_as_op.SpatialNarrowAsOpTest._run_test", "test_spatial_narrow_as_op.SpatialNarrowAsOpTest.assertRaises", "test_spatial_narrow_as_op.SpatialNarrowAsOpTest._run_test", "numpy.random.randn", "numpy.random.randn", "numpy.random.randn", "numpy.random.randn"], "methods", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tests.test_spatial_narrow_as_op.SpatialNarrowAsOpTest._run_test", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tests.test_spatial_narrow_as_op.SpatialNarrowAsOpTest._run_test"], ["", "def", "test_size_exceptions", "(", "self", ")", ":", "\n", "        ", "A", "=", "np", ".", "random", ".", "randn", "(", "2", ",", "256", ",", "42", ",", "86", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "B", "=", "np", ".", "random", ".", "randn", "(", "2", ",", "256", ",", "35", ",", "87", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "with", "self", ".", "assertRaises", "(", "RuntimeError", ")", ":", "\n", "            ", "self", ".", "_run_test", "(", "A", ",", "B", ")", "\n", "\n", "", "A", "=", "np", ".", "random", ".", "randn", "(", "2", ",", "255", ",", "42", ",", "88", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "B", "=", "np", ".", "random", ".", "randn", "(", "2", ",", "256", ",", "35", ",", "87", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "with", "self", ".", "assertRaises", "(", "RuntimeError", ")", ":", "\n", "            ", "self", ".", "_run_test", "(", "A", ",", "B", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tests.test_bbox_transform.TestBboxTransform.test_bbox_transform_and_inverse": [[35, 47], ["test_bbox_transform.random_boxes", "test_bbox_transform.random_boxes", "utils.bbox_transform_inv", "utils.bbox_transform", "numpy.testing.assert_array_almost_equal"], "methods", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tests.test_bbox_transform.random_boxes", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tests.test_bbox_transform.random_boxes", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.boxes.bbox_transform_inv", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.boxes.bbox_transform"], ["    ", "def", "test_bbox_transform_and_inverse", "(", "self", ")", ":", "\n", "        ", "weights", "=", "(", "5", ",", "5", ",", "10", ",", "10", ")", "\n", "src_boxes", "=", "random_boxes", "(", "[", "10", ",", "10", ",", "20", ",", "20", "]", ",", "1", ",", "10", ")", "\n", "dst_boxes", "=", "random_boxes", "(", "[", "10", ",", "10", ",", "20", ",", "20", "]", ",", "1", ",", "10", ")", "\n", "deltas", "=", "box_utils", ".", "bbox_transform_inv", "(", "\n", "src_boxes", ",", "dst_boxes", ",", "weights", "=", "weights", "\n", ")", "\n", "dst_boxes_reconstructed", "=", "box_utils", ".", "bbox_transform", "(", "\n", "src_boxes", ",", "deltas", ",", "weights", "=", "weights", "\n", ")", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "\n", "dst_boxes", ",", "dst_boxes_reconstructed", ",", "decimal", "=", "5", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tests.test_bbox_transform.TestBboxTransform.test_bbox_dataset_to_prediction_roundtrip": [[49, 76], ["utils.xywh_to_xyxy", "test_bbox_transform.random_boxes", "utils.bbox_transform_inv", "utils.bbox_transform", "utils.xyxy_to_xywh", "pycocotools.mask.iou", "numpy.testing.assert_array_almost_equal", "numpy.array", "numpy.array", "numpy.ones", "int"], "methods", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.boxes.xywh_to_xyxy", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tests.test_bbox_transform.random_boxes", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.boxes.bbox_transform_inv", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.boxes.bbox_transform", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.boxes.xyxy_to_xywh", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.utils.blob.ones"], ["", "def", "test_bbox_dataset_to_prediction_roundtrip", "(", "self", ")", ":", "\n", "        ", "\"\"\"Simulate the process of reading a ground-truth box from a dataset,\n        make predictions from proposals, convert the predictions back to the\n        dataset format, and then use the COCO API to compute IoU overlap between\n        the gt box and the predictions. These should have IoU of 1.\n        \"\"\"", "\n", "weights", "=", "(", "5", ",", "5", ",", "10", ",", "10", ")", "\n", "# 1/ \"read\" a box from a dataset in the default (x1, y1, w, h) format", "\n", "gt_xywh_box", "=", "[", "10", ",", "20", ",", "100", ",", "150", "]", "\n", "# 2/ convert it to our internal (x1, y1, x2, y2) format", "\n", "gt_xyxy_box", "=", "box_utils", ".", "xywh_to_xyxy", "(", "gt_xywh_box", ")", "\n", "# 3/ consider nearby proposal boxes", "\n", "prop_xyxy_boxes", "=", "random_boxes", "(", "gt_xyxy_box", ",", "10", ",", "10", ")", "\n", "# 4/ compute proposal-to-gt transformation deltas", "\n", "deltas", "=", "box_utils", ".", "bbox_transform_inv", "(", "\n", "prop_xyxy_boxes", ",", "np", ".", "array", "(", "[", "gt_xyxy_box", "]", ")", ",", "weights", "=", "weights", "\n", ")", "\n", "# 5/ use deltas to transform proposals to xyxy predicted box", "\n", "pred_xyxy_boxes", "=", "box_utils", ".", "bbox_transform", "(", "\n", "prop_xyxy_boxes", ",", "deltas", ",", "weights", "=", "weights", "\n", ")", "\n", "# 6/ convert xyxy predicted box to xywh predicted box", "\n", "pred_xywh_boxes", "=", "box_utils", ".", "xyxy_to_xywh", "(", "pred_xyxy_boxes", ")", "\n", "# 7/ use COCO API to compute IoU", "\n", "not_crowd", "=", "[", "int", "(", "False", ")", "]", "*", "pred_xywh_boxes", ".", "shape", "[", "0", "]", "\n", "ious", "=", "COCOmask", ".", "iou", "(", "pred_xywh_boxes", ",", "np", ".", "array", "(", "[", "gt_xywh_box", "]", ")", ",", "not_crowd", ")", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "ious", ",", "np", ".", "ones", "(", "ious", ".", "shape", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tests.test_bbox_transform.TestBboxTransform.test_cython_bbox_iou_against_coco_api_bbox_iou": [[77, 104], ["test_bbox_transform.random_boxes", "test_bbox_transform.random_boxes", "test_bbox_transform.TestBboxTransform.test_cython_bbox_iou_against_coco_api_bbox_iou._do_test"], "methods", ["home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tests.test_bbox_transform.random_boxes", "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tests.test_bbox_transform.random_boxes"], ["", "def", "test_cython_bbox_iou_against_coco_api_bbox_iou", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check that our cython implementation of bounding box IoU overlap\n        matches the COCO API implementation.\n        \"\"\"", "\n", "def", "_do_test", "(", "b1", ",", "b2", ")", ":", "\n", "# Compute IoU overlap with the cython implementation", "\n", "            ", "cython_iou", "=", "box_utils", ".", "bbox_overlaps", "(", "b1", ",", "b2", ")", "\n", "# Compute IoU overlap with the COCO API implementation", "\n", "# (requires converting boxes from xyxy to xywh format)", "\n", "xywh_b1", "=", "box_utils", ".", "xyxy_to_xywh", "(", "b1", ")", "\n", "xywh_b2", "=", "box_utils", ".", "xyxy_to_xywh", "(", "b2", ")", "\n", "not_crowd", "=", "[", "int", "(", "False", ")", "]", "*", "b2", ".", "shape", "[", "0", "]", "\n", "coco_ious", "=", "COCOmask", ".", "iou", "(", "xywh_b1", ",", "xywh_b2", ",", "not_crowd", ")", "\n", "# IoUs should be similar", "\n", "np", ".", "testing", ".", "assert_array_almost_equal", "(", "\n", "cython_iou", ",", "coco_ious", ",", "decimal", "=", "5", "\n", ")", "\n", "\n", "# Test small boxes", "\n", "", "b1", "=", "random_boxes", "(", "[", "10", ",", "10", ",", "20", ",", "20", "]", ",", "5", ",", "10", ")", "\n", "b2", "=", "random_boxes", "(", "[", "10", ",", "10", ",", "20", ",", "20", "]", ",", "5", ",", "10", ")", "\n", "_do_test", "(", "b1", ",", "b2", ")", "\n", "\n", "# Test bigger boxes", "\n", "b1", "=", "random_boxes", "(", "[", "10", ",", "10", ",", "110", ",", "20", "]", ",", "20", ",", "10", ")", "\n", "b2", "=", "random_boxes", "(", "[", "10", ",", "10", ",", "110", ",", "20", "]", ",", "20", ",", "10", ")", "\n", "_do_test", "(", "b1", ",", "b2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skokec_detectron-traffic-signs.tests.test_bbox_transform.random_boxes": [[29, 32], ["boxes.astype", "numpy.random.randn"], "function", ["None"], ["def", "random_boxes", "(", "mean_box", ",", "stdev", ",", "N", ")", ":", "\n", "    ", "boxes", "=", "np", ".", "random", ".", "randn", "(", "N", ",", "4", ")", "*", "stdev", "+", "mean_box", "\n", "return", "boxes", ".", "astype", "(", "dtype", "=", "np", ".", "float32", ")", "\n", "\n"]]}